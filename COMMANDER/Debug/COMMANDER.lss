
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001990c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001990c  0001990c  0002990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  00019914  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000072c  20000200  00019b20  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000092c  0001a24c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007e622  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008aa8  00000000  00000000  000ae89f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a6a1  00000000  00000000  000b7347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001cf0  00000000  00000000  000c19e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001af8  00000000  00000000  000c36d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028740  00000000  00000000  000c51d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027775  00000000  00000000  000ed910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a211a  00000000  00000000  00115085  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007190  00000000  00000000  001b71a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 29 00 20 81 38 01 00 79 39 01 00 79 39 01 00     0). .8..y9..y9..
	...
      2c:	1d d9 00 00 00 00 00 00 00 00 00 00 51 da 00 00     ............Q...
      3c:	99 da 00 00 79 39 01 00 79 39 01 00 d9 ff 00 00     ....y9..y9......
      4c:	99 d2 00 00 01 10 01 00 79 39 01 00 31 c8 00 00     ........y9..1...
      5c:	79 39 01 00 6d 10 01 00 f9 0d 01 00 11 0e 01 00     y9..m...........
      6c:	29 0e 01 00 41 0e 01 00 59 0e 01 00 71 0e 01 00     )...A...Y...q...
      7c:	fd ff 00 00 11 00 01 00 25 00 01 00 b5 00 01 00     ........%.......
      8c:	c9 00 01 00 dd 00 01 00 f1 00 01 00 05 01 01 00     ................
      9c:	b9 c6 00 00 c5 13 01 00 f5 c7 00 00 79 39 01 00     ............y9..
      ac:	79 39 01 00 00 00 00 00                             y9......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
      d8:	00019914 	.word	0x00019914

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
     108:	00019914 	.word	0x00019914
     10c:	00019914 	.word	0x00019914
     110:	00000000 	.word	0x00000000

00000114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
     114:	b590      	push	{r4, r7, lr}
     116:	b083      	sub	sp, #12
     118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
     11a:	1dfc      	adds	r4, r7, #7
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <configure_eeprom+0x34>)
     11e:	4798      	blx	r3
     120:	0003      	movs	r3, r0
     122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
     124:	1dfb      	adds	r3, r7, #7
     126:	781b      	ldrb	r3, [r3, #0]
     128:	2b16      	cmp	r3, #22
     12a:	d100      	bne.n	12e <configure_eeprom+0x1a>
	{
		while (true);
     12c:	e7fe      	b.n	12c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
     12e:	1dfb      	adds	r3, r7, #7
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d003      	beq.n	13e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <configure_eeprom+0x38>)
     138:	4798      	blx	r3
		eeprom_emulator_init();
     13a:	4b03      	ldr	r3, [pc, #12]	; (148 <configure_eeprom+0x34>)
     13c:	4798      	blx	r3
	}
}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	b003      	add	sp, #12
     144:	bd90      	pop	{r4, r7, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	0001243d 	.word	0x0001243d
     14c:	00012525 	.word	0x00012525

00000150 <init_eeprom>:

void init_eeprom(void)
{
     150:	b580      	push	{r7, lr}
     152:	af00      	add	r7, sp, #0
	configure_eeprom();
     154:	4bf6      	ldr	r3, [pc, #984]	; (530 <init_eeprom+0x3e0>)
     156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     158:	4bf6      	ldr	r3, [pc, #984]	; (534 <init_eeprom+0x3e4>)
     15a:	0019      	movs	r1, r3
     15c:	2000      	movs	r0, #0
     15e:	4bf6      	ldr	r3, [pc, #984]	; (538 <init_eeprom+0x3e8>)
     160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
     162:	49f4      	ldr	r1, [pc, #976]	; (534 <init_eeprom+0x3e4>)
     164:	4bf5      	ldr	r3, [pc, #980]	; (53c <init_eeprom+0x3ec>)
     166:	2218      	movs	r2, #24
     168:	0018      	movs	r0, r3
     16a:	4bf5      	ldr	r3, [pc, #980]	; (540 <init_eeprom+0x3f0>)
     16c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
     16e:	4bf3      	ldr	r3, [pc, #972]	; (53c <init_eeprom+0x3ec>)
     170:	791b      	ldrb	r3, [r3, #4]
     172:	2b55      	cmp	r3, #85	; 0x55
     174:	d029      	beq.n	1ca <init_eeprom+0x7a>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
     176:	4bf1      	ldr	r3, [pc, #964]	; (53c <init_eeprom+0x3ec>)
     178:	2200      	movs	r2, #0
     17a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
     17c:	4bef      	ldr	r3, [pc, #956]	; (53c <init_eeprom+0x3ec>)
     17e:	2255      	movs	r2, #85	; 0x55
     180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
     182:	4bee      	ldr	r3, [pc, #952]	; (53c <init_eeprom+0x3ec>)
     184:	2200      	movs	r2, #0
     186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
     188:	4bec      	ldr	r3, [pc, #944]	; (53c <init_eeprom+0x3ec>)
     18a:	2200      	movs	r2, #0
     18c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
     18e:	4beb      	ldr	r3, [pc, #940]	; (53c <init_eeprom+0x3ec>)
     190:	2200      	movs	r2, #0
     192:	71da      	strb	r2, [r3, #7]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
     194:	4beb      	ldr	r3, [pc, #940]	; (544 <init_eeprom+0x3f4>)
     196:	2210      	movs	r2, #16
     198:	2100      	movs	r1, #0
     19a:	0018      	movs	r0, r3
     19c:	4bea      	ldr	r3, [pc, #936]	; (548 <init_eeprom+0x3f8>)
     19e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
     1a0:	4be8      	ldr	r3, [pc, #928]	; (544 <init_eeprom+0x3f4>)
     1a2:	4aea      	ldr	r2, [pc, #936]	; (54c <init_eeprom+0x3fc>)
     1a4:	ca03      	ldmia	r2!, {r0, r1}
     1a6:	c303      	stmia	r3!, {r0, r1}
     1a8:	8811      	ldrh	r1, [r2, #0]
     1aa:	8019      	strh	r1, [r3, #0]
     1ac:	7892      	ldrb	r2, [r2, #2]
     1ae:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
     1b0:	49e2      	ldr	r1, [pc, #904]	; (53c <init_eeprom+0x3ec>)
     1b2:	4be0      	ldr	r3, [pc, #896]	; (534 <init_eeprom+0x3e4>)
     1b4:	2218      	movs	r2, #24
     1b6:	0018      	movs	r0, r3
     1b8:	4be1      	ldr	r3, [pc, #900]	; (540 <init_eeprom+0x3f0>)
     1ba:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     1bc:	4bdd      	ldr	r3, [pc, #884]	; (534 <init_eeprom+0x3e4>)
     1be:	0019      	movs	r1, r3
     1c0:	2000      	movs	r0, #0
     1c2:	4be3      	ldr	r3, [pc, #908]	; (550 <init_eeprom+0x400>)
     1c4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     1c6:	4be3      	ldr	r3, [pc, #908]	; (554 <init_eeprom+0x404>)
     1c8:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
     1ca:	4bda      	ldr	r3, [pc, #872]	; (534 <init_eeprom+0x3e4>)
     1cc:	0019      	movs	r1, r3
     1ce:	2001      	movs	r0, #1
     1d0:	4bd9      	ldr	r3, [pc, #868]	; (538 <init_eeprom+0x3e8>)
     1d2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
     1d4:	49d7      	ldr	r1, [pc, #860]	; (534 <init_eeprom+0x3e4>)
     1d6:	4be0      	ldr	r3, [pc, #896]	; (558 <init_eeprom+0x408>)
     1d8:	2238      	movs	r2, #56	; 0x38
     1da:	0018      	movs	r0, r3
     1dc:	4bd8      	ldr	r3, [pc, #864]	; (540 <init_eeprom+0x3f0>)
     1de:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
     1e0:	4bdd      	ldr	r3, [pc, #884]	; (558 <init_eeprom+0x408>)
     1e2:	791b      	ldrb	r3, [r3, #4]
     1e4:	2b55      	cmp	r3, #85	; 0x55
     1e6:	d02e      	beq.n	246 <init_eeprom+0xf6>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
     1e8:	4bdb      	ldr	r3, [pc, #876]	; (558 <init_eeprom+0x408>)
     1ea:	2200      	movs	r2, #0
     1ec:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
     1ee:	4bda      	ldr	r3, [pc, #872]	; (558 <init_eeprom+0x408>)
     1f0:	2255      	movs	r2, #85	; 0x55
     1f2:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
     1f4:	4bd9      	ldr	r3, [pc, #868]	; (55c <init_eeprom+0x40c>)
     1f6:	221e      	movs	r2, #30
     1f8:	2100      	movs	r1, #0
     1fa:	0018      	movs	r0, r3
     1fc:	4bd2      	ldr	r3, [pc, #840]	; (548 <init_eeprom+0x3f8>)
     1fe:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
     200:	4ad6      	ldr	r2, [pc, #856]	; (55c <init_eeprom+0x40c>)
     202:	4bd7      	ldr	r3, [pc, #860]	; (560 <init_eeprom+0x410>)
     204:	0010      	movs	r0, r2
     206:	0019      	movs	r1, r3
     208:	2310      	movs	r3, #16
     20a:	001a      	movs	r2, r3
     20c:	4bcc      	ldr	r3, [pc, #816]	; (540 <init_eeprom+0x3f0>)
     20e:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
     210:	4bd4      	ldr	r3, [pc, #848]	; (564 <init_eeprom+0x414>)
     212:	2214      	movs	r2, #20
     214:	2100      	movs	r1, #0
     216:	0018      	movs	r0, r3
     218:	4bcb      	ldr	r3, [pc, #812]	; (548 <init_eeprom+0x3f8>)
     21a:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
     21c:	4ad1      	ldr	r2, [pc, #836]	; (564 <init_eeprom+0x414>)
     21e:	4bd2      	ldr	r3, [pc, #840]	; (568 <init_eeprom+0x418>)
     220:	0010      	movs	r0, r2
     222:	0019      	movs	r1, r3
     224:	230b      	movs	r3, #11
     226:	001a      	movs	r2, r3
     228:	4bc5      	ldr	r3, [pc, #788]	; (540 <init_eeprom+0x3f0>)
     22a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
     22c:	49ca      	ldr	r1, [pc, #808]	; (558 <init_eeprom+0x408>)
     22e:	4bc1      	ldr	r3, [pc, #772]	; (534 <init_eeprom+0x3e4>)
     230:	2238      	movs	r2, #56	; 0x38
     232:	0018      	movs	r0, r3
     234:	4bc2      	ldr	r3, [pc, #776]	; (540 <init_eeprom+0x3f0>)
     236:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
     238:	4bbe      	ldr	r3, [pc, #760]	; (534 <init_eeprom+0x3e4>)
     23a:	0019      	movs	r1, r3
     23c:	2001      	movs	r0, #1
     23e:	4bc4      	ldr	r3, [pc, #784]	; (550 <init_eeprom+0x400>)
     240:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     242:	4bc4      	ldr	r3, [pc, #784]	; (554 <init_eeprom+0x404>)
     244:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
     246:	4bbb      	ldr	r3, [pc, #748]	; (534 <init_eeprom+0x3e4>)
     248:	0019      	movs	r1, r3
     24a:	2002      	movs	r0, #2
     24c:	4bba      	ldr	r3, [pc, #744]	; (538 <init_eeprom+0x3e8>)
     24e:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
     250:	49b8      	ldr	r1, [pc, #736]	; (534 <init_eeprom+0x3e4>)
     252:	4bc6      	ldr	r3, [pc, #792]	; (56c <init_eeprom+0x41c>)
     254:	2238      	movs	r2, #56	; 0x38
     256:	0018      	movs	r0, r3
     258:	4bb9      	ldr	r3, [pc, #740]	; (540 <init_eeprom+0x3f0>)
     25a:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
     25c:	4bc3      	ldr	r3, [pc, #780]	; (56c <init_eeprom+0x41c>)
     25e:	791b      	ldrb	r3, [r3, #4]
     260:	2b55      	cmp	r3, #85	; 0x55
     262:	d03c      	beq.n	2de <init_eeprom+0x18e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
     264:	4bc1      	ldr	r3, [pc, #772]	; (56c <init_eeprom+0x41c>)
     266:	2200      	movs	r2, #0
     268:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
     26a:	4bc0      	ldr	r3, [pc, #768]	; (56c <init_eeprom+0x41c>)
     26c:	2255      	movs	r2, #85	; 0x55
     26e:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
     270:	4bbf      	ldr	r3, [pc, #764]	; (570 <init_eeprom+0x420>)
     272:	2210      	movs	r2, #16
     274:	2100      	movs	r1, #0
     276:	0018      	movs	r0, r3
     278:	4bb3      	ldr	r3, [pc, #716]	; (548 <init_eeprom+0x3f8>)
     27a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
     27c:	4bbb      	ldr	r3, [pc, #748]	; (56c <init_eeprom+0x41c>)
     27e:	2205      	movs	r2, #5
     280:	49bc      	ldr	r1, [pc, #752]	; (574 <init_eeprom+0x424>)
     282:	189b      	adds	r3, r3, r2
     284:	2210      	movs	r2, #16
     286:	0018      	movs	r0, r3
     288:	4bad      	ldr	r3, [pc, #692]	; (540 <init_eeprom+0x3f0>)
     28a:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
     28c:	4bba      	ldr	r3, [pc, #744]	; (578 <init_eeprom+0x428>)
     28e:	2210      	movs	r2, #16
     290:	2100      	movs	r1, #0
     292:	0018      	movs	r0, r3
     294:	4bac      	ldr	r3, [pc, #688]	; (548 <init_eeprom+0x3f8>)
     296:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
     298:	4ab8      	ldr	r2, [pc, #736]	; (57c <init_eeprom+0x42c>)
     29a:	4bb9      	ldr	r3, [pc, #740]	; (580 <init_eeprom+0x430>)
     29c:	0010      	movs	r0, r2
     29e:	0019      	movs	r1, r3
     2a0:	230a      	movs	r3, #10
     2a2:	001a      	movs	r2, r3
     2a4:	4ba6      	ldr	r3, [pc, #664]	; (540 <init_eeprom+0x3f0>)
     2a6:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
     2a8:	4bb3      	ldr	r3, [pc, #716]	; (578 <init_eeprom+0x428>)
     2aa:	2210      	movs	r2, #16
     2ac:	2100      	movs	r1, #0
     2ae:	0018      	movs	r0, r3
     2b0:	4ba5      	ldr	r3, [pc, #660]	; (548 <init_eeprom+0x3f8>)
     2b2:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
     2b4:	4ab0      	ldr	r2, [pc, #704]	; (578 <init_eeprom+0x428>)
     2b6:	4bb3      	ldr	r3, [pc, #716]	; (584 <init_eeprom+0x434>)
     2b8:	0010      	movs	r0, r2
     2ba:	0019      	movs	r1, r3
     2bc:	230d      	movs	r3, #13
     2be:	001a      	movs	r2, r3
     2c0:	4b9f      	ldr	r3, [pc, #636]	; (540 <init_eeprom+0x3f0>)
     2c2:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
     2c4:	49a9      	ldr	r1, [pc, #676]	; (56c <init_eeprom+0x41c>)
     2c6:	4b9b      	ldr	r3, [pc, #620]	; (534 <init_eeprom+0x3e4>)
     2c8:	2238      	movs	r2, #56	; 0x38
     2ca:	0018      	movs	r0, r3
     2cc:	4b9c      	ldr	r3, [pc, #624]	; (540 <init_eeprom+0x3f0>)
     2ce:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
     2d0:	4b98      	ldr	r3, [pc, #608]	; (534 <init_eeprom+0x3e4>)
     2d2:	0019      	movs	r1, r3
     2d4:	2002      	movs	r0, #2
     2d6:	4b9e      	ldr	r3, [pc, #632]	; (550 <init_eeprom+0x400>)
     2d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     2da:	4b9e      	ldr	r3, [pc, #632]	; (554 <init_eeprom+0x404>)
     2dc:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
     2de:	4b95      	ldr	r3, [pc, #596]	; (534 <init_eeprom+0x3e4>)
     2e0:	0019      	movs	r1, r3
     2e2:	2008      	movs	r0, #8
     2e4:	4b94      	ldr	r3, [pc, #592]	; (538 <init_eeprom+0x3e8>)
     2e6:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
     2e8:	4aa7      	ldr	r2, [pc, #668]	; (588 <init_eeprom+0x438>)
     2ea:	4b92      	ldr	r3, [pc, #584]	; (534 <init_eeprom+0x3e4>)
     2ec:	0010      	movs	r0, r2
     2ee:	0019      	movs	r1, r3
     2f0:	2308      	movs	r3, #8
     2f2:	001a      	movs	r2, r3
     2f4:	4b92      	ldr	r3, [pc, #584]	; (540 <init_eeprom+0x3f0>)
     2f6:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
     2f8:	4ba3      	ldr	r3, [pc, #652]	; (588 <init_eeprom+0x438>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	2b55      	cmp	r3, #85	; 0x55
     2fe:	d01d      	beq.n	33c <init_eeprom+0x1ec>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
     300:	4ba1      	ldr	r3, [pc, #644]	; (588 <init_eeprom+0x438>)
     302:	2255      	movs	r2, #85	; 0x55
     304:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
     306:	4ba0      	ldr	r3, [pc, #640]	; (588 <init_eeprom+0x438>)
     308:	220f      	movs	r2, #15
     30a:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
     30c:	4b9e      	ldr	r3, [pc, #632]	; (588 <init_eeprom+0x438>)
     30e:	2200      	movs	r2, #0
     310:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
     312:	4b9d      	ldr	r3, [pc, #628]	; (588 <init_eeprom+0x438>)
     314:	2200      	movs	r2, #0
     316:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
     318:	4b9b      	ldr	r3, [pc, #620]	; (588 <init_eeprom+0x438>)
     31a:	2201      	movs	r2, #1
     31c:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     31e:	4a85      	ldr	r2, [pc, #532]	; (534 <init_eeprom+0x3e4>)
     320:	4b99      	ldr	r3, [pc, #612]	; (588 <init_eeprom+0x438>)
     322:	0010      	movs	r0, r2
     324:	0019      	movs	r1, r3
     326:	2308      	movs	r3, #8
     328:	001a      	movs	r2, r3
     32a:	4b85      	ldr	r3, [pc, #532]	; (540 <init_eeprom+0x3f0>)
     32c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     32e:	4b81      	ldr	r3, [pc, #516]	; (534 <init_eeprom+0x3e4>)
     330:	0019      	movs	r1, r3
     332:	2008      	movs	r0, #8
     334:	4b86      	ldr	r3, [pc, #536]	; (550 <init_eeprom+0x400>)
     336:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     338:	4b86      	ldr	r3, [pc, #536]	; (554 <init_eeprom+0x404>)
     33a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
     33c:	4b93      	ldr	r3, [pc, #588]	; (58c <init_eeprom+0x43c>)
     33e:	0019      	movs	r1, r3
     340:	2003      	movs	r0, #3
     342:	4b93      	ldr	r3, [pc, #588]	; (590 <init_eeprom+0x440>)
     344:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
     346:	4b93      	ldr	r3, [pc, #588]	; (594 <init_eeprom+0x444>)
     348:	0019      	movs	r1, r3
     34a:	2004      	movs	r0, #4
     34c:	4b90      	ldr	r3, [pc, #576]	; (590 <init_eeprom+0x440>)
     34e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
     350:	4b91      	ldr	r3, [pc, #580]	; (598 <init_eeprom+0x448>)
     352:	0019      	movs	r1, r3
     354:	2005      	movs	r0, #5
     356:	4b8e      	ldr	r3, [pc, #568]	; (590 <init_eeprom+0x440>)
     358:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
     35a:	4b90      	ldr	r3, [pc, #576]	; (59c <init_eeprom+0x44c>)
     35c:	0019      	movs	r1, r3
     35e:	2006      	movs	r0, #6
     360:	4b8b      	ldr	r3, [pc, #556]	; (590 <init_eeprom+0x440>)
     362:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
     364:	4b8e      	ldr	r3, [pc, #568]	; (5a0 <init_eeprom+0x450>)
     366:	0019      	movs	r1, r3
     368:	2007      	movs	r0, #7
     36a:	4b89      	ldr	r3, [pc, #548]	; (590 <init_eeprom+0x440>)
     36c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
     36e:	4b77      	ldr	r3, [pc, #476]	; (54c <init_eeprom+0x3fc>)
     370:	0019      	movs	r1, r3
     372:	2009      	movs	r0, #9
     374:	4b86      	ldr	r3, [pc, #536]	; (590 <init_eeprom+0x440>)
     376:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
     378:	4b74      	ldr	r3, [pc, #464]	; (54c <init_eeprom+0x3fc>)
     37a:	0019      	movs	r1, r3
     37c:	200a      	movs	r0, #10
     37e:	4b84      	ldr	r3, [pc, #528]	; (590 <init_eeprom+0x440>)
     380:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
     382:	4b72      	ldr	r3, [pc, #456]	; (54c <init_eeprom+0x3fc>)
     384:	0019      	movs	r1, r3
     386:	200b      	movs	r0, #11
     388:	4b81      	ldr	r3, [pc, #516]	; (590 <init_eeprom+0x440>)
     38a:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
     38c:	4b6f      	ldr	r3, [pc, #444]	; (54c <init_eeprom+0x3fc>)
     38e:	0019      	movs	r1, r3
     390:	200c      	movs	r0, #12
     392:	4b7f      	ldr	r3, [pc, #508]	; (590 <init_eeprom+0x440>)
     394:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
     396:	4b6d      	ldr	r3, [pc, #436]	; (54c <init_eeprom+0x3fc>)
     398:	0019      	movs	r1, r3
     39a:	200d      	movs	r0, #13
     39c:	4b7c      	ldr	r3, [pc, #496]	; (590 <init_eeprom+0x440>)
     39e:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
     3a0:	4b6a      	ldr	r3, [pc, #424]	; (54c <init_eeprom+0x3fc>)
     3a2:	0019      	movs	r1, r3
     3a4:	200e      	movs	r0, #14
     3a6:	4b7a      	ldr	r3, [pc, #488]	; (590 <init_eeprom+0x440>)
     3a8:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
     3aa:	4b68      	ldr	r3, [pc, #416]	; (54c <init_eeprom+0x3fc>)
     3ac:	0019      	movs	r1, r3
     3ae:	200f      	movs	r0, #15
     3b0:	4b77      	ldr	r3, [pc, #476]	; (590 <init_eeprom+0x440>)
     3b2:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
     3b4:	4b65      	ldr	r3, [pc, #404]	; (54c <init_eeprom+0x3fc>)
     3b6:	0019      	movs	r1, r3
     3b8:	2010      	movs	r0, #16
     3ba:	4b75      	ldr	r3, [pc, #468]	; (590 <init_eeprom+0x440>)
     3bc:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
     3be:	4b63      	ldr	r3, [pc, #396]	; (54c <init_eeprom+0x3fc>)
     3c0:	0019      	movs	r1, r3
     3c2:	2011      	movs	r0, #17
     3c4:	4b72      	ldr	r3, [pc, #456]	; (590 <init_eeprom+0x440>)
     3c6:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
     3c8:	4b60      	ldr	r3, [pc, #384]	; (54c <init_eeprom+0x3fc>)
     3ca:	0019      	movs	r1, r3
     3cc:	2012      	movs	r0, #18
     3ce:	4b70      	ldr	r3, [pc, #448]	; (590 <init_eeprom+0x440>)
     3d0:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
     3d2:	4b5e      	ldr	r3, [pc, #376]	; (54c <init_eeprom+0x3fc>)
     3d4:	0019      	movs	r1, r3
     3d6:	2013      	movs	r0, #19
     3d8:	4b6d      	ldr	r3, [pc, #436]	; (590 <init_eeprom+0x440>)
     3da:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
     3dc:	4b5b      	ldr	r3, [pc, #364]	; (54c <init_eeprom+0x3fc>)
     3de:	0019      	movs	r1, r3
     3e0:	2014      	movs	r0, #20
     3e2:	4b6b      	ldr	r3, [pc, #428]	; (590 <init_eeprom+0x440>)
     3e4:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
     3e6:	4b59      	ldr	r3, [pc, #356]	; (54c <init_eeprom+0x3fc>)
     3e8:	0019      	movs	r1, r3
     3ea:	2015      	movs	r0, #21
     3ec:	4b68      	ldr	r3, [pc, #416]	; (590 <init_eeprom+0x440>)
     3ee:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
     3f0:	4b56      	ldr	r3, [pc, #344]	; (54c <init_eeprom+0x3fc>)
     3f2:	0019      	movs	r1, r3
     3f4:	2016      	movs	r0, #22
     3f6:	4b66      	ldr	r3, [pc, #408]	; (590 <init_eeprom+0x440>)
     3f8:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
     3fa:	4b54      	ldr	r3, [pc, #336]	; (54c <init_eeprom+0x3fc>)
     3fc:	0019      	movs	r1, r3
     3fe:	2017      	movs	r0, #23
     400:	4b63      	ldr	r3, [pc, #396]	; (590 <init_eeprom+0x440>)
     402:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
     404:	4b4b      	ldr	r3, [pc, #300]	; (534 <init_eeprom+0x3e4>)
     406:	0019      	movs	r1, r3
     408:	2018      	movs	r0, #24
     40a:	4b4b      	ldr	r3, [pc, #300]	; (538 <init_eeprom+0x3e8>)
     40c:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
     40e:	4a65      	ldr	r2, [pc, #404]	; (5a4 <init_eeprom+0x454>)
     410:	4b48      	ldr	r3, [pc, #288]	; (534 <init_eeprom+0x3e4>)
     412:	0010      	movs	r0, r2
     414:	0019      	movs	r1, r3
     416:	2318      	movs	r3, #24
     418:	001a      	movs	r2, r3
     41a:	4b49      	ldr	r3, [pc, #292]	; (540 <init_eeprom+0x3f0>)
     41c:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
     41e:	4b61      	ldr	r3, [pc, #388]	; (5a4 <init_eeprom+0x454>)
     420:	781b      	ldrb	r3, [r3, #0]
     422:	2b55      	cmp	r3, #85	; 0x55
     424:	d025      	beq.n	472 <init_eeprom+0x322>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
     426:	4b5f      	ldr	r3, [pc, #380]	; (5a4 <init_eeprom+0x454>)
     428:	2255      	movs	r2, #85	; 0x55
     42a:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
     42c:	4b5d      	ldr	r3, [pc, #372]	; (5a4 <init_eeprom+0x454>)
     42e:	2200      	movs	r2, #0
     430:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
     432:	4b5c      	ldr	r3, [pc, #368]	; (5a4 <init_eeprom+0x454>)
     434:	2200      	movs	r2, #0
     436:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     438:	4b5b      	ldr	r3, [pc, #364]	; (5a8 <init_eeprom+0x458>)
     43a:	2214      	movs	r2, #20
     43c:	2100      	movs	r1, #0
     43e:	0018      	movs	r0, r3
     440:	4b41      	ldr	r3, [pc, #260]	; (548 <init_eeprom+0x3f8>)
     442:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
     444:	4a58      	ldr	r2, [pc, #352]	; (5a8 <init_eeprom+0x458>)
     446:	4b41      	ldr	r3, [pc, #260]	; (54c <init_eeprom+0x3fc>)
     448:	0010      	movs	r0, r2
     44a:	0019      	movs	r1, r3
     44c:	230b      	movs	r3, #11
     44e:	001a      	movs	r2, r3
     450:	4b3b      	ldr	r3, [pc, #236]	; (540 <init_eeprom+0x3f0>)
     452:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     454:	4a37      	ldr	r2, [pc, #220]	; (534 <init_eeprom+0x3e4>)
     456:	4b53      	ldr	r3, [pc, #332]	; (5a4 <init_eeprom+0x454>)
     458:	0010      	movs	r0, r2
     45a:	0019      	movs	r1, r3
     45c:	2318      	movs	r3, #24
     45e:	001a      	movs	r2, r3
     460:	4b37      	ldr	r3, [pc, #220]	; (540 <init_eeprom+0x3f0>)
     462:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     464:	4b33      	ldr	r3, [pc, #204]	; (534 <init_eeprom+0x3e4>)
     466:	0019      	movs	r1, r3
     468:	2018      	movs	r0, #24
     46a:	4b39      	ldr	r3, [pc, #228]	; (550 <init_eeprom+0x400>)
     46c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     46e:	4b39      	ldr	r3, [pc, #228]	; (554 <init_eeprom+0x404>)
     470:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
     472:	4b30      	ldr	r3, [pc, #192]	; (534 <init_eeprom+0x3e4>)
     474:	0019      	movs	r1, r3
     476:	2019      	movs	r0, #25
     478:	4b2f      	ldr	r3, [pc, #188]	; (538 <init_eeprom+0x3e8>)
     47a:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
     47c:	4a4b      	ldr	r2, [pc, #300]	; (5ac <init_eeprom+0x45c>)
     47e:	4b2d      	ldr	r3, [pc, #180]	; (534 <init_eeprom+0x3e4>)
     480:	0010      	movs	r0, r2
     482:	0019      	movs	r1, r3
     484:	2330      	movs	r3, #48	; 0x30
     486:	001a      	movs	r2, r3
     488:	4b2d      	ldr	r3, [pc, #180]	; (540 <init_eeprom+0x3f0>)
     48a:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
     48c:	4b47      	ldr	r3, [pc, #284]	; (5ac <init_eeprom+0x45c>)
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	2b55      	cmp	r3, #85	; 0x55
     492:	d03c      	beq.n	50e <init_eeprom+0x3be>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
     494:	4b45      	ldr	r3, [pc, #276]	; (5ac <init_eeprom+0x45c>)
     496:	2255      	movs	r2, #85	; 0x55
     498:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
     49a:	4b45      	ldr	r3, [pc, #276]	; (5b0 <init_eeprom+0x460>)
     49c:	2214      	movs	r2, #20
     49e:	2100      	movs	r1, #0
     4a0:	0018      	movs	r0, r3
     4a2:	4b29      	ldr	r3, [pc, #164]	; (548 <init_eeprom+0x3f8>)
     4a4:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
     4a6:	4a42      	ldr	r2, [pc, #264]	; (5b0 <init_eeprom+0x460>)
     4a8:	4b28      	ldr	r3, [pc, #160]	; (54c <init_eeprom+0x3fc>)
     4aa:	0010      	movs	r0, r2
     4ac:	0019      	movs	r1, r3
     4ae:	230b      	movs	r3, #11
     4b0:	001a      	movs	r2, r3
     4b2:	4b23      	ldr	r3, [pc, #140]	; (540 <init_eeprom+0x3f0>)
     4b4:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
     4b6:	4b3f      	ldr	r3, [pc, #252]	; (5b4 <init_eeprom+0x464>)
     4b8:	2214      	movs	r2, #20
     4ba:	2100      	movs	r1, #0
     4bc:	0018      	movs	r0, r3
     4be:	4b22      	ldr	r3, [pc, #136]	; (548 <init_eeprom+0x3f8>)
     4c0:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
     4c2:	4a3c      	ldr	r2, [pc, #240]	; (5b4 <init_eeprom+0x464>)
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <init_eeprom+0x3fc>)
     4c6:	0010      	movs	r0, r2
     4c8:	0019      	movs	r1, r3
     4ca:	230b      	movs	r3, #11
     4cc:	001a      	movs	r2, r3
     4ce:	4b1c      	ldr	r3, [pc, #112]	; (540 <init_eeprom+0x3f0>)
     4d0:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
     4d2:	4b36      	ldr	r3, [pc, #216]	; (5ac <init_eeprom+0x45c>)
     4d4:	2200      	movs	r2, #0
     4d6:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
     4d8:	4b34      	ldr	r3, [pc, #208]	; (5ac <init_eeprom+0x45c>)
     4da:	2200      	movs	r2, #0
     4dc:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
     4de:	4b33      	ldr	r3, [pc, #204]	; (5ac <init_eeprom+0x45c>)
     4e0:	2200      	movs	r2, #0
     4e2:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
     4e4:	4b31      	ldr	r3, [pc, #196]	; (5ac <init_eeprom+0x45c>)
     4e6:	2200      	movs	r2, #0
     4e8:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
     4ea:	4b30      	ldr	r3, [pc, #192]	; (5ac <init_eeprom+0x45c>)
     4ec:	2200      	movs	r2, #0
     4ee:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     4f0:	4a10      	ldr	r2, [pc, #64]	; (534 <init_eeprom+0x3e4>)
     4f2:	4b2e      	ldr	r3, [pc, #184]	; (5ac <init_eeprom+0x45c>)
     4f4:	0010      	movs	r0, r2
     4f6:	0019      	movs	r1, r3
     4f8:	2330      	movs	r3, #48	; 0x30
     4fa:	001a      	movs	r2, r3
     4fc:	4b10      	ldr	r3, [pc, #64]	; (540 <init_eeprom+0x3f0>)
     4fe:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     500:	4b0c      	ldr	r3, [pc, #48]	; (534 <init_eeprom+0x3e4>)
     502:	0019      	movs	r1, r3
     504:	2019      	movs	r0, #25
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <init_eeprom+0x400>)
     508:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     50a:	4b12      	ldr	r3, [pc, #72]	; (554 <init_eeprom+0x404>)
     50c:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     50e:	4b09      	ldr	r3, [pc, #36]	; (534 <init_eeprom+0x3e4>)
     510:	0019      	movs	r1, r3
     512:	201a      	movs	r0, #26
     514:	4b08      	ldr	r3, [pc, #32]	; (538 <init_eeprom+0x3e8>)
     516:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
     518:	4906      	ldr	r1, [pc, #24]	; (534 <init_eeprom+0x3e4>)
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <init_eeprom+0x468>)
     51c:	2228      	movs	r2, #40	; 0x28
     51e:	0018      	movs	r0, r3
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <init_eeprom+0x3f0>)
     522:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     524:	4b24      	ldr	r3, [pc, #144]	; (5b8 <init_eeprom+0x468>)
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b55      	cmp	r3, #85	; 0x55
     52a:	d100      	bne.n	52e <init_eeprom+0x3de>
     52c:	e09d      	b.n	66a <init_eeprom+0x51a>
     52e:	e045      	b.n	5bc <init_eeprom+0x46c>
     530:	00000115 	.word	0x00000115
     534:	20000574 	.word	0x20000574
     538:	00012655 	.word	0x00012655
     53c:	200005e8 	.word	0x200005e8
     540:	00017881 	.word	0x00017881
     544:	200005f0 	.word	0x200005f0
     548:	000178b7 	.word	0x000178b7
     54c:	000184b8 	.word	0x000184b8
     550:	00012549 	.word	0x00012549
     554:	000126f1 	.word	0x000126f1
     558:	2000050c 	.word	0x2000050c
     55c:	20000511 	.word	0x20000511
     560:	000184c4 	.word	0x000184c4
     564:	2000052f 	.word	0x2000052f
     568:	000184d4 	.word	0x000184d4
     56c:	200005b0 	.word	0x200005b0
     570:	200005b5 	.word	0x200005b5
     574:	000184e0 	.word	0x000184e0
     578:	200005d5 	.word	0x200005d5
     57c:	200005c5 	.word	0x200005c5
     580:	000184f0 	.word	0x000184f0
     584:	000184fc 	.word	0x000184fc
     588:	20000600 	.word	0x20000600
     58c:	0001850c 	.word	0x0001850c
     590:	00000725 	.word	0x00000725
     594:	00018518 	.word	0x00018518
     598:	00018524 	.word	0x00018524
     59c:	00018530 	.word	0x00018530
     5a0:	0001853c 	.word	0x0001853c
     5a4:	20000634 	.word	0x20000634
     5a8:	20000638 	.word	0x20000638
     5ac:	20000544 	.word	0x20000544
     5b0:	2000054c 	.word	0x2000054c
     5b4:	20000560 	.word	0x20000560
     5b8:	2000064c 	.word	0x2000064c
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
     5bc:	4b4f      	ldr	r3, [pc, #316]	; (6fc <init_eeprom+0x5ac>)
     5be:	2255      	movs	r2, #85	; 0x55
     5c0:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
     5c2:	4b4e      	ldr	r3, [pc, #312]	; (6fc <init_eeprom+0x5ac>)
     5c4:	2200      	movs	r2, #0
     5c6:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
     5c8:	4b4c      	ldr	r3, [pc, #304]	; (6fc <init_eeprom+0x5ac>)
     5ca:	2232      	movs	r2, #50	; 0x32
     5cc:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
     5ce:	4b4b      	ldr	r3, [pc, #300]	; (6fc <init_eeprom+0x5ac>)
     5d0:	224f      	movs	r2, #79	; 0x4f
     5d2:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
     5d4:	4b49      	ldr	r3, [pc, #292]	; (6fc <init_eeprom+0x5ac>)
     5d6:	2254      	movs	r2, #84	; 0x54
     5d8:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
     5da:	4b48      	ldr	r3, [pc, #288]	; (6fc <init_eeprom+0x5ac>)
     5dc:	2202      	movs	r2, #2
     5de:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
     5e0:	4b46      	ldr	r3, [pc, #280]	; (6fc <init_eeprom+0x5ac>)
     5e2:	2200      	movs	r2, #0
     5e4:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
     5e6:	4b45      	ldr	r3, [pc, #276]	; (6fc <init_eeprom+0x5ac>)
     5e8:	2200      	movs	r2, #0
     5ea:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
     5ec:	4b43      	ldr	r3, [pc, #268]	; (6fc <init_eeprom+0x5ac>)
     5ee:	2200      	movs	r2, #0
     5f0:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
     5f2:	4b42      	ldr	r3, [pc, #264]	; (6fc <init_eeprom+0x5ac>)
     5f4:	2200      	movs	r2, #0
     5f6:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
     5f8:	4b40      	ldr	r3, [pc, #256]	; (6fc <init_eeprom+0x5ac>)
     5fa:	2200      	movs	r2, #0
     5fc:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
     5fe:	4b3f      	ldr	r3, [pc, #252]	; (6fc <init_eeprom+0x5ac>)
     600:	2200      	movs	r2, #0
     602:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
     604:	4b3d      	ldr	r3, [pc, #244]	; (6fc <init_eeprom+0x5ac>)
     606:	2200      	movs	r2, #0
     608:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
     60a:	4b3c      	ldr	r3, [pc, #240]	; (6fc <init_eeprom+0x5ac>)
     60c:	2200      	movs	r2, #0
     60e:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
     610:	4b3a      	ldr	r3, [pc, #232]	; (6fc <init_eeprom+0x5ac>)
     612:	2200      	movs	r2, #0
     614:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
     616:	4b39      	ldr	r3, [pc, #228]	; (6fc <init_eeprom+0x5ac>)
     618:	2200      	movs	r2, #0
     61a:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
     61c:	4b37      	ldr	r3, [pc, #220]	; (6fc <init_eeprom+0x5ac>)
     61e:	2200      	movs	r2, #0
     620:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
     622:	4b36      	ldr	r3, [pc, #216]	; (6fc <init_eeprom+0x5ac>)
     624:	2255      	movs	r2, #85	; 0x55
     626:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
     628:	4b34      	ldr	r3, [pc, #208]	; (6fc <init_eeprom+0x5ac>)
     62a:	2278      	movs	r2, #120	; 0x78
     62c:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
     62e:	4b33      	ldr	r3, [pc, #204]	; (6fc <init_eeprom+0x5ac>)
     630:	2200      	movs	r2, #0
     632:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
     634:	4b31      	ldr	r3, [pc, #196]	; (6fc <init_eeprom+0x5ac>)
     636:	2200      	movs	r2, #0
     638:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
     63a:	4b30      	ldr	r3, [pc, #192]	; (6fc <init_eeprom+0x5ac>)
     63c:	2220      	movs	r2, #32
     63e:	2101      	movs	r1, #1
     640:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
     642:	4b2e      	ldr	r3, [pc, #184]	; (6fc <init_eeprom+0x5ac>)
     644:	2250      	movs	r2, #80	; 0x50
     646:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
     648:	4b2c      	ldr	r3, [pc, #176]	; (6fc <init_eeprom+0x5ac>)
     64a:	2224      	movs	r2, #36	; 0x24
     64c:	2101      	movs	r1, #1
     64e:	5499      	strb	r1, [r3, r2]

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     650:	492a      	ldr	r1, [pc, #168]	; (6fc <init_eeprom+0x5ac>)
     652:	4b2b      	ldr	r3, [pc, #172]	; (700 <init_eeprom+0x5b0>)
     654:	2228      	movs	r2, #40	; 0x28
     656:	0018      	movs	r0, r3
     658:	4b2a      	ldr	r3, [pc, #168]	; (704 <init_eeprom+0x5b4>)
     65a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     65c:	4b28      	ldr	r3, [pc, #160]	; (700 <init_eeprom+0x5b0>)
     65e:	0019      	movs	r1, r3
     660:	201a      	movs	r0, #26
     662:	4b29      	ldr	r3, [pc, #164]	; (708 <init_eeprom+0x5b8>)
     664:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     666:	4b29      	ldr	r3, [pc, #164]	; (70c <init_eeprom+0x5bc>)
     668:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     66a:	4b25      	ldr	r3, [pc, #148]	; (700 <init_eeprom+0x5b0>)
     66c:	0019      	movs	r1, r3
     66e:	201b      	movs	r0, #27
     670:	4b27      	ldr	r3, [pc, #156]	; (710 <init_eeprom+0x5c0>)
     672:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
     674:	4a27      	ldr	r2, [pc, #156]	; (714 <init_eeprom+0x5c4>)
     676:	4b22      	ldr	r3, [pc, #136]	; (700 <init_eeprom+0x5b0>)
     678:	0010      	movs	r0, r2
     67a:	0019      	movs	r1, r3
     67c:	231c      	movs	r3, #28
     67e:	001a      	movs	r2, r3
     680:	4b20      	ldr	r3, [pc, #128]	; (704 <init_eeprom+0x5b4>)
     682:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     684:	4b23      	ldr	r3, [pc, #140]	; (714 <init_eeprom+0x5c4>)
     686:	781b      	ldrb	r3, [r3, #0]
     688:	2b55      	cmp	r3, #85	; 0x55
     68a:	d034      	beq.n	6f6 <init_eeprom+0x5a6>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
     68c:	4b21      	ldr	r3, [pc, #132]	; (714 <init_eeprom+0x5c4>)
     68e:	2255      	movs	r2, #85	; 0x55
     690:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
     692:	4b20      	ldr	r3, [pc, #128]	; (714 <init_eeprom+0x5c4>)
     694:	2201      	movs	r2, #1
     696:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
     698:	4b1e      	ldr	r3, [pc, #120]	; (714 <init_eeprom+0x5c4>)
     69a:	2201      	movs	r2, #1
     69c:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
     69e:	4b1d      	ldr	r3, [pc, #116]	; (714 <init_eeprom+0x5c4>)
     6a0:	2200      	movs	r2, #0
     6a2:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
     6a4:	4b1b      	ldr	r3, [pc, #108]	; (714 <init_eeprom+0x5c4>)
     6a6:	2200      	movs	r2, #0
     6a8:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
     6aa:	4b1a      	ldr	r3, [pc, #104]	; (714 <init_eeprom+0x5c4>)
     6ac:	2200      	movs	r2, #0
     6ae:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
     6b0:	4b18      	ldr	r3, [pc, #96]	; (714 <init_eeprom+0x5c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
     6b6:	4b17      	ldr	r3, [pc, #92]	; (714 <init_eeprom+0x5c4>)
     6b8:	2200      	movs	r2, #0
     6ba:	71da      	strb	r2, [r3, #7]
		
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     6bc:	4b16      	ldr	r3, [pc, #88]	; (718 <init_eeprom+0x5c8>)
     6be:	2214      	movs	r2, #20
     6c0:	2100      	movs	r1, #0
     6c2:	0018      	movs	r0, r3
     6c4:	4b15      	ldr	r3, [pc, #84]	; (71c <init_eeprom+0x5cc>)
     6c6:	4798      	blx	r3
		strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
     6c8:	4a13      	ldr	r2, [pc, #76]	; (718 <init_eeprom+0x5c8>)
     6ca:	4b15      	ldr	r3, [pc, #84]	; (720 <init_eeprom+0x5d0>)
     6cc:	0010      	movs	r0, r2
     6ce:	0019      	movs	r1, r3
     6d0:	230b      	movs	r3, #11
     6d2:	001a      	movs	r2, r3
     6d4:	4b0b      	ldr	r3, [pc, #44]	; (704 <init_eeprom+0x5b4>)
     6d6:	4798      	blx	r3
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
     6d8:	4a09      	ldr	r2, [pc, #36]	; (700 <init_eeprom+0x5b0>)
     6da:	4b0e      	ldr	r3, [pc, #56]	; (714 <init_eeprom+0x5c4>)
     6dc:	0010      	movs	r0, r2
     6de:	0019      	movs	r1, r3
     6e0:	231c      	movs	r3, #28
     6e2:	001a      	movs	r2, r3
     6e4:	4b07      	ldr	r3, [pc, #28]	; (704 <init_eeprom+0x5b4>)
     6e6:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     6e8:	4b05      	ldr	r3, [pc, #20]	; (700 <init_eeprom+0x5b0>)
     6ea:	0019      	movs	r1, r3
     6ec:	201b      	movs	r0, #27
     6ee:	4b06      	ldr	r3, [pc, #24]	; (708 <init_eeprom+0x5b8>)
     6f0:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     6f2:	4b06      	ldr	r3, [pc, #24]	; (70c <init_eeprom+0x5bc>)
     6f4:	4798      	blx	r3
	}
}
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	46bd      	mov	sp, r7
     6fa:	bd80      	pop	{r7, pc}
     6fc:	2000064c 	.word	0x2000064c
     700:	20000574 	.word	0x20000574
     704:	00017881 	.word	0x00017881
     708:	00012549 	.word	0x00012549
     70c:	000126f1 	.word	0x000126f1
     710:	00012655 	.word	0x00012655
     714:	20000618 	.word	0x20000618
     718:	20000620 	.word	0x20000620
     71c:	000178b7 	.word	0x000178b7
     720:	000184b8 	.word	0x000184b8

00000724 <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
     724:	b580      	push	{r7, lr}
     726:	b088      	sub	sp, #32
     728:	af00      	add	r7, sp, #0
     72a:	0002      	movs	r2, r0
     72c:	6039      	str	r1, [r7, #0]
     72e:	1dfb      	adds	r3, r7, #7
     730:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
     732:	4b28      	ldr	r3, [pc, #160]	; (7d4 <config_mobile_no_ee+0xb0>)
     734:	223c      	movs	r2, #60	; 0x3c
     736:	2100      	movs	r1, #0
     738:	0018      	movs	r0, r3
     73a:	4b27      	ldr	r3, [pc, #156]	; (7d8 <config_mobile_no_ee+0xb4>)
     73c:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
     73e:	4a25      	ldr	r2, [pc, #148]	; (7d4 <config_mobile_no_ee+0xb0>)
     740:	1dfb      	adds	r3, r7, #7
     742:	781b      	ldrb	r3, [r3, #0]
     744:	0011      	movs	r1, r2
     746:	0018      	movs	r0, r3
     748:	4b24      	ldr	r3, [pc, #144]	; (7dc <config_mobile_no_ee+0xb8>)
     74a:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
     74c:	2308      	movs	r3, #8
     74e:	18fa      	adds	r2, r7, r3
     750:	4b20      	ldr	r3, [pc, #128]	; (7d4 <config_mobile_no_ee+0xb0>)
     752:	0010      	movs	r0, r2
     754:	0019      	movs	r1, r3
     756:	2318      	movs	r3, #24
     758:	001a      	movs	r2, r3
     75a:	4b21      	ldr	r3, [pc, #132]	; (7e0 <config_mobile_no_ee+0xbc>)
     75c:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
     75e:	2308      	movs	r3, #8
     760:	18fb      	adds	r3, r7, r3
     762:	781b      	ldrb	r3, [r3, #0]
     764:	2b55      	cmp	r3, #85	; 0x55
     766:	d031      	beq.n	7cc <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
     768:	2308      	movs	r3, #8
     76a:	18fb      	adds	r3, r7, r3
     76c:	2255      	movs	r2, #85	; 0x55
     76e:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
     770:	2308      	movs	r3, #8
     772:	18fb      	adds	r3, r7, r3
     774:	2200      	movs	r2, #0
     776:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
     778:	2308      	movs	r3, #8
     77a:	18fb      	adds	r3, r7, r3
     77c:	2200      	movs	r2, #0
     77e:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
     780:	2308      	movs	r3, #8
     782:	18fb      	adds	r3, r7, r3
     784:	2200      	movs	r2, #0
     786:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     788:	2308      	movs	r3, #8
     78a:	18fb      	adds	r3, r7, r3
     78c:	3304      	adds	r3, #4
     78e:	2214      	movs	r2, #20
     790:	2100      	movs	r1, #0
     792:	0018      	movs	r0, r3
     794:	4b10      	ldr	r3, [pc, #64]	; (7d8 <config_mobile_no_ee+0xb4>)
     796:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
     798:	683a      	ldr	r2, [r7, #0]
     79a:	2308      	movs	r3, #8
     79c:	18fb      	adds	r3, r7, r3
     79e:	3304      	adds	r3, #4
     7a0:	0011      	movs	r1, r2
     7a2:	0018      	movs	r0, r3
     7a4:	4b0f      	ldr	r3, [pc, #60]	; (7e4 <config_mobile_no_ee+0xc0>)
     7a6:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
     7a8:	4a0a      	ldr	r2, [pc, #40]	; (7d4 <config_mobile_no_ee+0xb0>)
     7aa:	2308      	movs	r3, #8
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	0010      	movs	r0, r2
     7b0:	0019      	movs	r1, r3
     7b2:	2318      	movs	r3, #24
     7b4:	001a      	movs	r2, r3
     7b6:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <config_mobile_no_ee+0xbc>)
     7b8:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
     7ba:	4a06      	ldr	r2, [pc, #24]	; (7d4 <config_mobile_no_ee+0xb0>)
     7bc:	1dfb      	adds	r3, r7, #7
     7be:	781b      	ldrb	r3, [r3, #0]
     7c0:	0011      	movs	r1, r2
     7c2:	0018      	movs	r0, r3
     7c4:	4b08      	ldr	r3, [pc, #32]	; (7e8 <config_mobile_no_ee+0xc4>)
     7c6:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     7c8:	4b08      	ldr	r3, [pc, #32]	; (7ec <config_mobile_no_ee+0xc8>)
     7ca:	4798      	blx	r3
	}
}
     7cc:	46c0      	nop			; (mov r8, r8)
     7ce:	46bd      	mov	sp, r7
     7d0:	b008      	add	sp, #32
     7d2:	bd80      	pop	{r7, pc}
     7d4:	20000574 	.word	0x20000574
     7d8:	000178b7 	.word	0x000178b7
     7dc:	00012655 	.word	0x00012655
     7e0:	00017881 	.word	0x00017881
     7e4:	00017b37 	.word	0x00017b37
     7e8:	00012549 	.word	0x00012549
     7ec:	000126f1 	.word	0x000126f1

000007f0 <getNumbers>:


void getNumbers(char *string)
{
     7f0:	b580      	push	{r7, lr}
     7f2:	b08a      	sub	sp, #40	; 0x28
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
     7f8:	687b      	ldr	r3, [r7, #4]
     7fa:	2200      	movs	r2, #0
     7fc:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     7fe:	2327      	movs	r3, #39	; 0x27
     800:	18fb      	adds	r3, r7, r3
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
     806:	e063      	b.n	8d0 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     808:	4b37      	ldr	r3, [pc, #220]	; (8e8 <getNumbers+0xf8>)
     80a:	223c      	movs	r2, #60	; 0x3c
     80c:	2100      	movs	r1, #0
     80e:	0018      	movs	r0, r3
     810:	4b36      	ldr	r3, [pc, #216]	; (8ec <getNumbers+0xfc>)
     812:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     814:	2327      	movs	r3, #39	; 0x27
     816:	18fb      	adds	r3, r7, r3
     818:	781b      	ldrb	r3, [r3, #0]
     81a:	3309      	adds	r3, #9
     81c:	b2db      	uxtb	r3, r3
     81e:	4a32      	ldr	r2, [pc, #200]	; (8e8 <getNumbers+0xf8>)
     820:	0011      	movs	r1, r2
     822:	0018      	movs	r0, r3
     824:	4b32      	ldr	r3, [pc, #200]	; (8f0 <getNumbers+0x100>)
     826:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     828:	230c      	movs	r3, #12
     82a:	18fa      	adds	r2, r7, r3
     82c:	4b2e      	ldr	r3, [pc, #184]	; (8e8 <getNumbers+0xf8>)
     82e:	0010      	movs	r0, r2
     830:	0019      	movs	r1, r3
     832:	2318      	movs	r3, #24
     834:	001a      	movs	r2, r3
     836:	4b2f      	ldr	r3, [pc, #188]	; (8f4 <getNumbers+0x104>)
     838:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
     83a:	4b2f      	ldr	r3, [pc, #188]	; (8f8 <getNumbers+0x108>)
     83c:	78db      	ldrb	r3, [r3, #3]
     83e:	2227      	movs	r2, #39	; 0x27
     840:	18ba      	adds	r2, r7, r2
     842:	7812      	ldrb	r2, [r2, #0]
     844:	429a      	cmp	r2, r3
     846:	d10f      	bne.n	868 <getNumbers+0x78>
		{
			strcat(string,"P:");
     848:	687b      	ldr	r3, [r7, #4]
     84a:	0018      	movs	r0, r3
     84c:	4b2b      	ldr	r3, [pc, #172]	; (8fc <getNumbers+0x10c>)
     84e:	4798      	blx	r3
     850:	0003      	movs	r3, r0
     852:	001a      	movs	r2, r3
     854:	687b      	ldr	r3, [r7, #4]
     856:	189a      	adds	r2, r3, r2
     858:	4b29      	ldr	r3, [pc, #164]	; (900 <getNumbers+0x110>)
     85a:	0010      	movs	r0, r2
     85c:	0019      	movs	r1, r3
     85e:	2303      	movs	r3, #3
     860:	001a      	movs	r2, r3
     862:	4b24      	ldr	r3, [pc, #144]	; (8f4 <getNumbers+0x104>)
     864:	4798      	blx	r3
     866:	e015      	b.n	894 <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
     868:	4b23      	ldr	r3, [pc, #140]	; (8f8 <getNumbers+0x108>)
     86a:	791b      	ldrb	r3, [r3, #4]
     86c:	2227      	movs	r2, #39	; 0x27
     86e:	18ba      	adds	r2, r7, r2
     870:	7812      	ldrb	r2, [r2, #0]
     872:	429a      	cmp	r2, r3
     874:	d10e      	bne.n	894 <getNumbers+0xa4>
		{
			strcat(string,"S:");
     876:	687b      	ldr	r3, [r7, #4]
     878:	0018      	movs	r0, r3
     87a:	4b20      	ldr	r3, [pc, #128]	; (8fc <getNumbers+0x10c>)
     87c:	4798      	blx	r3
     87e:	0003      	movs	r3, r0
     880:	001a      	movs	r2, r3
     882:	687b      	ldr	r3, [r7, #4]
     884:	189a      	adds	r2, r3, r2
     886:	4b1f      	ldr	r3, [pc, #124]	; (904 <getNumbers+0x114>)
     888:	0010      	movs	r0, r2
     88a:	0019      	movs	r1, r3
     88c:	2303      	movs	r3, #3
     88e:	001a      	movs	r2, r3
     890:	4b18      	ldr	r3, [pc, #96]	; (8f4 <getNumbers+0x104>)
     892:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
     894:	230c      	movs	r3, #12
     896:	18fb      	adds	r3, r7, r3
     898:	1d1a      	adds	r2, r3, #4
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	0011      	movs	r1, r2
     89e:	0018      	movs	r0, r3
     8a0:	4b19      	ldr	r3, [pc, #100]	; (908 <getNumbers+0x118>)
     8a2:	4798      	blx	r3
		strcat(string,"\n");
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	0018      	movs	r0, r3
     8a8:	4b14      	ldr	r3, [pc, #80]	; (8fc <getNumbers+0x10c>)
     8aa:	4798      	blx	r3
     8ac:	0003      	movs	r3, r0
     8ae:	001a      	movs	r2, r3
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	189a      	adds	r2, r3, r2
     8b4:	4b15      	ldr	r3, [pc, #84]	; (90c <getNumbers+0x11c>)
     8b6:	0010      	movs	r0, r2
     8b8:	0019      	movs	r1, r3
     8ba:	2302      	movs	r3, #2
     8bc:	001a      	movs	r2, r3
     8be:	4b0d      	ldr	r3, [pc, #52]	; (8f4 <getNumbers+0x104>)
     8c0:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     8c2:	2327      	movs	r3, #39	; 0x27
     8c4:	18fb      	adds	r3, r7, r3
     8c6:	781a      	ldrb	r2, [r3, #0]
     8c8:	2327      	movs	r3, #39	; 0x27
     8ca:	18fb      	adds	r3, r7, r3
     8cc:	3201      	adds	r2, #1
     8ce:	701a      	strb	r2, [r3, #0]
     8d0:	4b09      	ldr	r3, [pc, #36]	; (8f8 <getNumbers+0x108>)
     8d2:	789b      	ldrb	r3, [r3, #2]
     8d4:	2227      	movs	r2, #39	; 0x27
     8d6:	18ba      	adds	r2, r7, r2
     8d8:	7812      	ldrb	r2, [r2, #0]
     8da:	429a      	cmp	r2, r3
     8dc:	d394      	bcc.n	808 <getNumbers+0x18>
	}
}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	46bd      	mov	sp, r7
     8e2:	b00a      	add	sp, #40	; 0x28
     8e4:	bd80      	pop	{r7, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	20000574 	.word	0x20000574
     8ec:	000178b7 	.word	0x000178b7
     8f0:	00012655 	.word	0x00012655
     8f4:	00017881 	.word	0x00017881
     8f8:	20000600 	.word	0x20000600
     8fc:	00017b47 	.word	0x00017b47
     900:	00018548 	.word	0x00018548
     904:	0001854c 	.word	0x0001854c
     908:	00017b01 	.word	0x00017b01
     90c:	00018550 	.word	0x00018550

00000910 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
     910:	b580      	push	{r7, lr}
     912:	b088      	sub	sp, #32
     914:	af00      	add	r7, sp, #0
     916:	6078      	str	r0, [r7, #4]
     918:	000a      	movs	r2, r1
     91a:	1cfb      	adds	r3, r7, #3
     91c:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
     91e:	687b      	ldr	r3, [r7, #4]
     920:	2200      	movs	r2, #0
     922:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
     924:	4b15      	ldr	r3, [pc, #84]	; (97c <getIndexedNumber+0x6c>)
     926:	789b      	ldrb	r3, [r3, #2]
     928:	1cfa      	adds	r2, r7, #3
     92a:	7812      	ldrb	r2, [r2, #0]
     92c:	429a      	cmp	r2, r3
     92e:	d21f      	bcs.n	970 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     930:	4b13      	ldr	r3, [pc, #76]	; (980 <getIndexedNumber+0x70>)
     932:	223c      	movs	r2, #60	; 0x3c
     934:	2100      	movs	r1, #0
     936:	0018      	movs	r0, r3
     938:	4b12      	ldr	r3, [pc, #72]	; (984 <getIndexedNumber+0x74>)
     93a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
     93c:	1cfb      	adds	r3, r7, #3
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	3309      	adds	r3, #9
     942:	b2db      	uxtb	r3, r3
     944:	4a0e      	ldr	r2, [pc, #56]	; (980 <getIndexedNumber+0x70>)
     946:	0011      	movs	r1, r2
     948:	0018      	movs	r0, r3
     94a:	4b0f      	ldr	r3, [pc, #60]	; (988 <getIndexedNumber+0x78>)
     94c:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     94e:	2308      	movs	r3, #8
     950:	18fa      	adds	r2, r7, r3
     952:	4b0b      	ldr	r3, [pc, #44]	; (980 <getIndexedNumber+0x70>)
     954:	0010      	movs	r0, r2
     956:	0019      	movs	r1, r3
     958:	2318      	movs	r3, #24
     95a:	001a      	movs	r2, r3
     95c:	4b0b      	ldr	r3, [pc, #44]	; (98c <getIndexedNumber+0x7c>)
     95e:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
     960:	2308      	movs	r3, #8
     962:	18fb      	adds	r3, r7, r3
     964:	1d1a      	adds	r2, r3, #4
     966:	687b      	ldr	r3, [r7, #4]
     968:	0011      	movs	r1, r2
     96a:	0018      	movs	r0, r3
     96c:	4b08      	ldr	r3, [pc, #32]	; (990 <getIndexedNumber+0x80>)
     96e:	4798      	blx	r3
	}
	return IndexNo;
     970:	687b      	ldr	r3, [r7, #4]
}
     972:	0018      	movs	r0, r3
     974:	46bd      	mov	sp, r7
     976:	b008      	add	sp, #32
     978:	bd80      	pop	{r7, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	20000600 	.word	0x20000600
     980:	20000574 	.word	0x20000574
     984:	000178b7 	.word	0x000178b7
     988:	00012655 	.word	0x00012655
     98c:	00017881 	.word	0x00017881
     990:	00017b01 	.word	0x00017b01

00000994 <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
     994:	b580      	push	{r7, lr}
     996:	b088      	sub	sp, #32
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     99c:	4b14      	ldr	r3, [pc, #80]	; (9f0 <isPrimaryNumber+0x5c>)
     99e:	789b      	ldrb	r3, [r3, #2]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d020      	beq.n	9e6 <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
     9a4:	230c      	movs	r3, #12
     9a6:	18fb      	adds	r3, r7, r3
     9a8:	0018      	movs	r0, r3
     9aa:	2314      	movs	r3, #20
     9ac:	001a      	movs	r2, r3
     9ae:	2100      	movs	r1, #0
     9b0:	4b10      	ldr	r3, [pc, #64]	; (9f4 <isPrimaryNumber+0x60>)
     9b2:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
     9b4:	4b0e      	ldr	r3, [pc, #56]	; (9f0 <isPrimaryNumber+0x5c>)
     9b6:	78da      	ldrb	r2, [r3, #3]
     9b8:	230c      	movs	r3, #12
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	0011      	movs	r1, r2
     9be:	0018      	movs	r0, r3
     9c0:	4b0d      	ldr	r3, [pc, #52]	; (9f8 <isPrimaryNumber+0x64>)
     9c2:	4798      	blx	r3
		if(strstr(number,primaryNumber))
     9c4:	230c      	movs	r3, #12
     9c6:	18fa      	adds	r2, r7, r3
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	0011      	movs	r1, r2
     9cc:	0018      	movs	r0, r3
     9ce:	4b0b      	ldr	r3, [pc, #44]	; (9fc <isPrimaryNumber+0x68>)
     9d0:	4798      	blx	r3
     9d2:	1e03      	subs	r3, r0, #0
     9d4:	d001      	beq.n	9da <isPrimaryNumber+0x46>
		{
			return true;
     9d6:	2301      	movs	r3, #1
     9d8:	e006      	b.n	9e8 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	0018      	movs	r0, r3
     9de:	4b08      	ldr	r3, [pc, #32]	; (a00 <isPrimaryNumber+0x6c>)
     9e0:	4798      	blx	r3
     9e2:	0003      	movs	r3, r0
     9e4:	e000      	b.n	9e8 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
     9e6:	2300      	movs	r3, #0
}
     9e8:	0018      	movs	r0, r3
     9ea:	46bd      	mov	sp, r7
     9ec:	b008      	add	sp, #32
     9ee:	bd80      	pop	{r7, pc}
     9f0:	20000600 	.word	0x20000600
     9f4:	000178b7 	.word	0x000178b7
     9f8:	00000911 	.word	0x00000911
     9fc:	00017b77 	.word	0x00017b77
     a00:	00000a05 	.word	0x00000a05

00000a04 <isAlterNumber>:

bool isAlterNumber(char *number)
{
     a04:	b580      	push	{r7, lr}
     a06:	b082      	sub	sp, #8
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     a0c:	4b0b      	ldr	r3, [pc, #44]	; (a3c <isAlterNumber+0x38>)
     a0e:	789b      	ldrb	r3, [r3, #2]
     a10:	2b00      	cmp	r3, #0
     a12:	d00d      	beq.n	a30 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
     a14:	4b0a      	ldr	r3, [pc, #40]	; (a40 <isAlterNumber+0x3c>)
     a16:	789b      	ldrb	r3, [r3, #2]
     a18:	2b00      	cmp	r3, #0
     a1a:	d009      	beq.n	a30 <isAlterNumber+0x2c>
     a1c:	4a09      	ldr	r2, [pc, #36]	; (a44 <isAlterNumber+0x40>)
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	0011      	movs	r1, r2
     a22:	0018      	movs	r0, r3
     a24:	4b08      	ldr	r3, [pc, #32]	; (a48 <isAlterNumber+0x44>)
     a26:	4798      	blx	r3
     a28:	1e03      	subs	r3, r0, #0
     a2a:	d001      	beq.n	a30 <isAlterNumber+0x2c>
		{
			return true;
     a2c:	2301      	movs	r3, #1
     a2e:	e000      	b.n	a32 <isAlterNumber+0x2e>
		}
	}
	return false;
     a30:	2300      	movs	r3, #0
}
     a32:	0018      	movs	r0, r3
     a34:	46bd      	mov	sp, r7
     a36:	b002      	add	sp, #8
     a38:	bd80      	pop	{r7, pc}
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	20000600 	.word	0x20000600
     a40:	20000634 	.word	0x20000634
     a44:	20000638 	.word	0x20000638
     a48:	00017b77 	.word	0x00017b77

00000a4c <isM2MNumber>:

bool isM2MNumber(char *number)
{
     a4c:	b580      	push	{r7, lr}
     a4e:	b082      	sub	sp, #8
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
     a54:	4b09      	ldr	r3, [pc, #36]	; (a7c <isM2MNumber+0x30>)
     a56:	785b      	ldrb	r3, [r3, #1]
     a58:	2b00      	cmp	r3, #0
     a5a:	d009      	beq.n	a70 <isM2MNumber+0x24>
     a5c:	4a08      	ldr	r2, [pc, #32]	; (a80 <isM2MNumber+0x34>)
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	0011      	movs	r1, r2
     a62:	0018      	movs	r0, r3
     a64:	4b07      	ldr	r3, [pc, #28]	; (a84 <isM2MNumber+0x38>)
     a66:	4798      	blx	r3
     a68:	1e03      	subs	r3, r0, #0
     a6a:	d001      	beq.n	a70 <isM2MNumber+0x24>
	{
		return true;
     a6c:	2301      	movs	r3, #1
     a6e:	e000      	b.n	a72 <isM2MNumber+0x26>
	}
	return false;
     a70:	2300      	movs	r3, #0
}
     a72:	0018      	movs	r0, r3
     a74:	46bd      	mov	sp, r7
     a76:	b002      	add	sp, #8
     a78:	bd80      	pop	{r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	20000544 	.word	0x20000544
     a80:	2000054c 	.word	0x2000054c
     a84:	00017b77 	.word	0x00017b77

00000a88 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
     a88:	b580      	push	{r7, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	af00      	add	r7, sp, #0
     a8e:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
     a90:	4b09      	ldr	r3, [pc, #36]	; (ab8 <isM2MRemoteNumber+0x30>)
     a92:	78db      	ldrb	r3, [r3, #3]
     a94:	2b00      	cmp	r3, #0
     a96:	d009      	beq.n	aac <isM2MRemoteNumber+0x24>
     a98:	4a08      	ldr	r2, [pc, #32]	; (abc <isM2MRemoteNumber+0x34>)
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	0011      	movs	r1, r2
     a9e:	0018      	movs	r0, r3
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <isM2MRemoteNumber+0x38>)
     aa2:	4798      	blx	r3
     aa4:	1e03      	subs	r3, r0, #0
     aa6:	d001      	beq.n	aac <isM2MRemoteNumber+0x24>
	{
		return true;
     aa8:	2301      	movs	r3, #1
     aaa:	e000      	b.n	aae <isM2MRemoteNumber+0x26>
	}
	return false;
     aac:	2300      	movs	r3, #0
}
     aae:	0018      	movs	r0, r3
     ab0:	46bd      	mov	sp, r7
     ab2:	b002      	add	sp, #8
     ab4:	bd80      	pop	{r7, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	20000544 	.word	0x20000544
     abc:	20000560 	.word	0x20000560
     ac0:	00017b77 	.word	0x00017b77

00000ac4 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	b082      	sub	sp, #8
     ac8:	af00      	add	r7, sp, #0
     aca:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
     acc:	4b09      	ldr	r3, [pc, #36]	; (af4 <getM2MNumber+0x30>)
     ace:	785b      	ldrb	r3, [r3, #1]
     ad0:	2b00      	cmp	r3, #0
     ad2:	d006      	beq.n	ae2 <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
     ad4:	4a08      	ldr	r2, [pc, #32]	; (af8 <getM2MNumber+0x34>)
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	0011      	movs	r1, r2
     ada:	0018      	movs	r0, r3
     adc:	4b07      	ldr	r3, [pc, #28]	; (afc <getM2MNumber+0x38>)
     ade:	4798      	blx	r3
     ae0:	e002      	b.n	ae8 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	2200      	movs	r2, #0
     ae6:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
     ae8:	687b      	ldr	r3, [r7, #4]
}
     aea:	0018      	movs	r0, r3
     aec:	46bd      	mov	sp, r7
     aee:	b002      	add	sp, #8
     af0:	bd80      	pop	{r7, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	20000544 	.word	0x20000544
     af8:	2000054c 	.word	0x2000054c
     afc:	00017b37 	.word	0x00017b37

00000b00 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
     b08:	4b09      	ldr	r3, [pc, #36]	; (b30 <getM2MRemoteNumber+0x30>)
     b0a:	78db      	ldrb	r3, [r3, #3]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d006      	beq.n	b1e <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
     b10:	4a08      	ldr	r2, [pc, #32]	; (b34 <getM2MRemoteNumber+0x34>)
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	0011      	movs	r1, r2
     b16:	0018      	movs	r0, r3
     b18:	4b07      	ldr	r3, [pc, #28]	; (b38 <getM2MRemoteNumber+0x38>)
     b1a:	4798      	blx	r3
     b1c:	e002      	b.n	b24 <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	2200      	movs	r2, #0
     b22:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
     b24:	687b      	ldr	r3, [r7, #4]
}
     b26:	0018      	movs	r0, r3
     b28:	46bd      	mov	sp, r7
     b2a:	b002      	add	sp, #8
     b2c:	bd80      	pop	{r7, pc}
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	20000544 	.word	0x20000544
     b34:	20000560 	.word	0x20000560
     b38:	00017b37 	.word	0x00017b37

00000b3c <setM2MVerify>:

void setM2MVerify(bool flag)
{
     b3c:	b580      	push	{r7, lr}
     b3e:	b082      	sub	sp, #8
     b40:	af00      	add	r7, sp, #0
     b42:	0002      	movs	r2, r0
     b44:	1dfb      	adds	r3, r7, #7
     b46:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
     b48:	1dfb      	adds	r3, r7, #7
     b4a:	781a      	ldrb	r2, [r3, #0]
     b4c:	4b0a      	ldr	r3, [pc, #40]	; (b78 <setM2MVerify+0x3c>)
     b4e:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     b50:	4a0a      	ldr	r2, [pc, #40]	; (b7c <setM2MVerify+0x40>)
     b52:	4b09      	ldr	r3, [pc, #36]	; (b78 <setM2MVerify+0x3c>)
     b54:	0010      	movs	r0, r2
     b56:	0019      	movs	r1, r3
     b58:	2330      	movs	r3, #48	; 0x30
     b5a:	001a      	movs	r2, r3
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <setM2MVerify+0x44>)
     b5e:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     b60:	4b06      	ldr	r3, [pc, #24]	; (b7c <setM2MVerify+0x40>)
     b62:	0019      	movs	r1, r3
     b64:	2019      	movs	r0, #25
     b66:	4b07      	ldr	r3, [pc, #28]	; (b84 <setM2MVerify+0x48>)
     b68:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     b6a:	4b07      	ldr	r3, [pc, #28]	; (b88 <setM2MVerify+0x4c>)
     b6c:	4798      	blx	r3
}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	46bd      	mov	sp, r7
     b72:	b002      	add	sp, #8
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	20000544 	.word	0x20000544
     b7c:	20000574 	.word	0x20000574
     b80:	00017881 	.word	0x00017881
     b84:	00012549 	.word	0x00012549
     b88:	000126f1 	.word	0x000126f1

00000b8c <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	0002      	movs	r2, r0
     b94:	1dfb      	adds	r3, r7, #7
     b96:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
     b98:	1dfb      	adds	r3, r7, #7
     b9a:	781a      	ldrb	r2, [r3, #0]
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <setM2MRemoteVerified+0x3c>)
     b9e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     ba0:	4a0a      	ldr	r2, [pc, #40]	; (bcc <setM2MRemoteVerified+0x40>)
     ba2:	4b09      	ldr	r3, [pc, #36]	; (bc8 <setM2MRemoteVerified+0x3c>)
     ba4:	0010      	movs	r0, r2
     ba6:	0019      	movs	r1, r3
     ba8:	2330      	movs	r3, #48	; 0x30
     baa:	001a      	movs	r2, r3
     bac:	4b08      	ldr	r3, [pc, #32]	; (bd0 <setM2MRemoteVerified+0x44>)
     bae:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     bb0:	4b06      	ldr	r3, [pc, #24]	; (bcc <setM2MRemoteVerified+0x40>)
     bb2:	0019      	movs	r1, r3
     bb4:	2019      	movs	r0, #25
     bb6:	4b07      	ldr	r3, [pc, #28]	; (bd4 <setM2MRemoteVerified+0x48>)
     bb8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     bba:	4b07      	ldr	r3, [pc, #28]	; (bd8 <setM2MRemoteVerified+0x4c>)
     bbc:	4798      	blx	r3
}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	46bd      	mov	sp, r7
     bc2:	b002      	add	sp, #8
     bc4:	bd80      	pop	{r7, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	20000544 	.word	0x20000544
     bcc:	20000574 	.word	0x20000574
     bd0:	00017881 	.word	0x00017881
     bd4:	00012549 	.word	0x00012549
     bd8:	000126f1 	.word	0x000126f1

00000bdc <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
     be2:	0002      	movs	r2, r0
     be4:	1dfb      	adds	r3, r7, #7
     be6:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
     be8:	1dfb      	adds	r3, r7, #7
     bea:	781a      	ldrb	r2, [r3, #0]
     bec:	4b0f      	ldr	r3, [pc, #60]	; (c2c <saveM2MSettings+0x50>)
     bee:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	781b      	ldrb	r3, [r3, #0]
     bf4:	2201      	movs	r2, #1
     bf6:	4053      	eors	r3, r2
     bf8:	b2db      	uxtb	r3, r3
     bfa:	2b00      	cmp	r3, #0
     bfc:	d002      	beq.n	c04 <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
     bfe:	4b0b      	ldr	r3, [pc, #44]	; (c2c <saveM2MSettings+0x50>)
     c00:	2200      	movs	r2, #0
     c02:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c04:	4a0a      	ldr	r2, [pc, #40]	; (c30 <saveM2MSettings+0x54>)
     c06:	4b09      	ldr	r3, [pc, #36]	; (c2c <saveM2MSettings+0x50>)
     c08:	0010      	movs	r0, r2
     c0a:	0019      	movs	r1, r3
     c0c:	2330      	movs	r3, #48	; 0x30
     c0e:	001a      	movs	r2, r3
     c10:	4b08      	ldr	r3, [pc, #32]	; (c34 <saveM2MSettings+0x58>)
     c12:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c14:	4b06      	ldr	r3, [pc, #24]	; (c30 <saveM2MSettings+0x54>)
     c16:	0019      	movs	r1, r3
     c18:	2019      	movs	r0, #25
     c1a:	4b07      	ldr	r3, [pc, #28]	; (c38 <saveM2MSettings+0x5c>)
     c1c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c1e:	4b07      	ldr	r3, [pc, #28]	; (c3c <saveM2MSettings+0x60>)
     c20:	4798      	blx	r3
}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	46bd      	mov	sp, r7
     c26:	b002      	add	sp, #8
     c28:	bd80      	pop	{r7, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	20000544 	.word	0x20000544
     c30:	20000574 	.word	0x20000574
     c34:	00017881 	.word	0x00017881
     c38:	00012549 	.word	0x00012549
     c3c:	000126f1 	.word	0x000126f1

00000c40 <addM2MNumber>:

void addM2MNumber(char *no)
{
     c40:	b580      	push	{r7, lr}
     c42:	b082      	sub	sp, #8
     c44:	af00      	add	r7, sp, #0
     c46:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
     c48:	4b0f      	ldr	r3, [pc, #60]	; (c88 <addM2MNumber+0x48>)
     c4a:	2201      	movs	r2, #1
     c4c:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
     c4e:	687a      	ldr	r2, [r7, #4]
     c50:	4b0e      	ldr	r3, [pc, #56]	; (c8c <addM2MNumber+0x4c>)
     c52:	0011      	movs	r1, r2
     c54:	0018      	movs	r0, r3
     c56:	4b0e      	ldr	r3, [pc, #56]	; (c90 <addM2MNumber+0x50>)
     c58:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c5a:	4a0e      	ldr	r2, [pc, #56]	; (c94 <addM2MNumber+0x54>)
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <addM2MNumber+0x48>)
     c5e:	0010      	movs	r0, r2
     c60:	0019      	movs	r1, r3
     c62:	2330      	movs	r3, #48	; 0x30
     c64:	001a      	movs	r2, r3
     c66:	4b0c      	ldr	r3, [pc, #48]	; (c98 <addM2MNumber+0x58>)
     c68:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c6a:	4b0a      	ldr	r3, [pc, #40]	; (c94 <addM2MNumber+0x54>)
     c6c:	0019      	movs	r1, r3
     c6e:	2019      	movs	r0, #25
     c70:	4b0a      	ldr	r3, [pc, #40]	; (c9c <addM2MNumber+0x5c>)
     c72:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c74:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <addM2MNumber+0x60>)
     c76:	4798      	blx	r3
	setM2MVerify(false);
     c78:	2000      	movs	r0, #0
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <addM2MNumber+0x64>)
     c7c:	4798      	blx	r3
}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46bd      	mov	sp, r7
     c82:	b002      	add	sp, #8
     c84:	bd80      	pop	{r7, pc}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	20000544 	.word	0x20000544
     c8c:	2000054c 	.word	0x2000054c
     c90:	00017b37 	.word	0x00017b37
     c94:	20000574 	.word	0x20000574
     c98:	00017881 	.word	0x00017881
     c9c:	00012549 	.word	0x00012549
     ca0:	000126f1 	.word	0x000126f1
     ca4:	00000b3d 	.word	0x00000b3d

00000ca8 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b082      	sub	sp, #8
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
     cb0:	4b10      	ldr	r3, [pc, #64]	; (cf4 <addM2MRemoteNumber+0x4c>)
     cb2:	2201      	movs	r2, #1
     cb4:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
     cb6:	687a      	ldr	r2, [r7, #4]
     cb8:	4b0f      	ldr	r3, [pc, #60]	; (cf8 <addM2MRemoteNumber+0x50>)
     cba:	0011      	movs	r1, r2
     cbc:	0018      	movs	r0, r3
     cbe:	4b0f      	ldr	r3, [pc, #60]	; (cfc <addM2MRemoteNumber+0x54>)
     cc0:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     cc2:	4a0f      	ldr	r2, [pc, #60]	; (d00 <addM2MRemoteNumber+0x58>)
     cc4:	4b0b      	ldr	r3, [pc, #44]	; (cf4 <addM2MRemoteNumber+0x4c>)
     cc6:	0010      	movs	r0, r2
     cc8:	0019      	movs	r1, r3
     cca:	2330      	movs	r3, #48	; 0x30
     ccc:	001a      	movs	r2, r3
     cce:	4b0d      	ldr	r3, [pc, #52]	; (d04 <addM2MRemoteNumber+0x5c>)
     cd0:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     cd2:	4b0b      	ldr	r3, [pc, #44]	; (d00 <addM2MRemoteNumber+0x58>)
     cd4:	0019      	movs	r1, r3
     cd6:	2019      	movs	r0, #25
     cd8:	4b0b      	ldr	r3, [pc, #44]	; (d08 <addM2MRemoteNumber+0x60>)
     cda:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     cdc:	4b0b      	ldr	r3, [pc, #44]	; (d0c <addM2MRemoteNumber+0x64>)
     cde:	4798      	blx	r3
	setM2MRemoteVerified(false);
     ce0:	2000      	movs	r0, #0
     ce2:	4b0b      	ldr	r3, [pc, #44]	; (d10 <addM2MRemoteNumber+0x68>)
     ce4:	4798      	blx	r3
	saveM2MSettings(false);
     ce6:	2000      	movs	r0, #0
     ce8:	4b0a      	ldr	r3, [pc, #40]	; (d14 <addM2MRemoteNumber+0x6c>)
     cea:	4798      	blx	r3
}
     cec:	46c0      	nop			; (mov r8, r8)
     cee:	46bd      	mov	sp, r7
     cf0:	b002      	add	sp, #8
     cf2:	bd80      	pop	{r7, pc}
     cf4:	20000544 	.word	0x20000544
     cf8:	20000560 	.word	0x20000560
     cfc:	00017b37 	.word	0x00017b37
     d00:	20000574 	.word	0x20000574
     d04:	00017881 	.word	0x00017881
     d08:	00012549 	.word	0x00012549
     d0c:	000126f1 	.word	0x000126f1
     d10:	00000b8d 	.word	0x00000b8d
     d14:	00000bdd 	.word	0x00000bdd

00000d18 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
     d18:	b580      	push	{r7, lr}
     d1a:	b08e      	sub	sp, #56	; 0x38
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     d20:	4b28      	ldr	r3, [pc, #160]	; (dc4 <getActiveNumber+0xac>)
     d22:	789b      	ldrb	r3, [r3, #2]
     d24:	2b00      	cmp	r3, #0
     d26:	d02b      	beq.n	d80 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
     d28:	4b27      	ldr	r3, [pc, #156]	; (dc8 <getActiveNumber+0xb0>)
     d2a:	785b      	ldrb	r3, [r3, #1]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d006      	beq.n	d3e <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
     d30:	4a26      	ldr	r2, [pc, #152]	; (dcc <getActiveNumber+0xb4>)
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	0011      	movs	r1, r2
     d36:	0018      	movs	r0, r3
     d38:	4b25      	ldr	r3, [pc, #148]	; (dd0 <getActiveNumber+0xb8>)
     d3a:	4798      	blx	r3
     d3c:	e03c      	b.n	db8 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     d3e:	4b25      	ldr	r3, [pc, #148]	; (dd4 <getActiveNumber+0xbc>)
     d40:	223c      	movs	r2, #60	; 0x3c
     d42:	2100      	movs	r1, #0
     d44:	0018      	movs	r0, r3
     d46:	4b24      	ldr	r3, [pc, #144]	; (dd8 <getActiveNumber+0xc0>)
     d48:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
     d4a:	4b1e      	ldr	r3, [pc, #120]	; (dc4 <getActiveNumber+0xac>)
     d4c:	78db      	ldrb	r3, [r3, #3]
     d4e:	3309      	adds	r3, #9
     d50:	b2db      	uxtb	r3, r3
     d52:	4a20      	ldr	r2, [pc, #128]	; (dd4 <getActiveNumber+0xbc>)
     d54:	0011      	movs	r1, r2
     d56:	0018      	movs	r0, r3
     d58:	4b20      	ldr	r3, [pc, #128]	; (ddc <getActiveNumber+0xc4>)
     d5a:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d5c:	2320      	movs	r3, #32
     d5e:	18fa      	adds	r2, r7, r3
     d60:	4b1c      	ldr	r3, [pc, #112]	; (dd4 <getActiveNumber+0xbc>)
     d62:	0010      	movs	r0, r2
     d64:	0019      	movs	r1, r3
     d66:	2318      	movs	r3, #24
     d68:	001a      	movs	r2, r3
     d6a:	4b1d      	ldr	r3, [pc, #116]	; (de0 <getActiveNumber+0xc8>)
     d6c:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
     d6e:	2320      	movs	r3, #32
     d70:	18fb      	adds	r3, r7, r3
     d72:	1d1a      	adds	r2, r3, #4
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	0011      	movs	r1, r2
     d78:	0018      	movs	r0, r3
     d7a:	4b15      	ldr	r3, [pc, #84]	; (dd0 <getActiveNumber+0xb8>)
     d7c:	4798      	blx	r3
     d7e:	e01b      	b.n	db8 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     d80:	4b14      	ldr	r3, [pc, #80]	; (dd4 <getActiveNumber+0xbc>)
     d82:	223c      	movs	r2, #60	; 0x3c
     d84:	2100      	movs	r1, #0
     d86:	0018      	movs	r0, r3
     d88:	4b13      	ldr	r3, [pc, #76]	; (dd8 <getActiveNumber+0xc0>)
     d8a:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
     d8c:	4b11      	ldr	r3, [pc, #68]	; (dd4 <getActiveNumber+0xbc>)
     d8e:	0019      	movs	r1, r3
     d90:	2003      	movs	r0, #3
     d92:	4b12      	ldr	r3, [pc, #72]	; (ddc <getActiveNumber+0xc4>)
     d94:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d96:	2308      	movs	r3, #8
     d98:	18fa      	adds	r2, r7, r3
     d9a:	4b0e      	ldr	r3, [pc, #56]	; (dd4 <getActiveNumber+0xbc>)
     d9c:	0010      	movs	r0, r2
     d9e:	0019      	movs	r1, r3
     da0:	2318      	movs	r3, #24
     da2:	001a      	movs	r2, r3
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <getActiveNumber+0xc8>)
     da6:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
     da8:	2308      	movs	r3, #8
     daa:	18fb      	adds	r3, r7, r3
     dac:	1d1a      	adds	r2, r3, #4
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	0011      	movs	r1, r2
     db2:	0018      	movs	r0, r3
     db4:	4b06      	ldr	r3, [pc, #24]	; (dd0 <getActiveNumber+0xb8>)
     db6:	4798      	blx	r3
	}
	
	return ActiveNo;
     db8:	687b      	ldr	r3, [r7, #4]
}
     dba:	0018      	movs	r0, r3
     dbc:	46bd      	mov	sp, r7
     dbe:	b00e      	add	sp, #56	; 0x38
     dc0:	bd80      	pop	{r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	20000600 	.word	0x20000600
     dc8:	20000634 	.word	0x20000634
     dcc:	20000638 	.word	0x20000638
     dd0:	00017b37 	.word	0x00017b37
     dd4:	20000574 	.word	0x20000574
     dd8:	000178b7 	.word	0x000178b7
     ddc:	00012655 	.word	0x00012655
     de0:	00017881 	.word	0x00017881

00000de4 <checkExists>:
uint8_t checkExists(char *number)
{
     de4:	b580      	push	{r7, lr}
     de6:	b08a      	sub	sp, #40	; 0x28
     de8:	af00      	add	r7, sp, #0
     dea:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     dec:	4b33      	ldr	r3, [pc, #204]	; (ebc <checkExists+0xd8>)
     dee:	789b      	ldrb	r3, [r3, #2]
     df0:	2b00      	cmp	r3, #0
     df2:	d039      	beq.n	e68 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     df4:	2327      	movs	r3, #39	; 0x27
     df6:	18fb      	adds	r3, r7, r3
     df8:	2200      	movs	r2, #0
     dfa:	701a      	strb	r2, [r3, #0]
     dfc:	e02d      	b.n	e5a <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     dfe:	4b30      	ldr	r3, [pc, #192]	; (ec0 <checkExists+0xdc>)
     e00:	223c      	movs	r2, #60	; 0x3c
     e02:	2100      	movs	r1, #0
     e04:	0018      	movs	r0, r3
     e06:	4b2f      	ldr	r3, [pc, #188]	; (ec4 <checkExists+0xe0>)
     e08:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     e0a:	2327      	movs	r3, #39	; 0x27
     e0c:	18fb      	adds	r3, r7, r3
     e0e:	781b      	ldrb	r3, [r3, #0]
     e10:	3309      	adds	r3, #9
     e12:	b2db      	uxtb	r3, r3
     e14:	4a2a      	ldr	r2, [pc, #168]	; (ec0 <checkExists+0xdc>)
     e16:	0011      	movs	r1, r2
     e18:	0018      	movs	r0, r3
     e1a:	4b2b      	ldr	r3, [pc, #172]	; (ec8 <checkExists+0xe4>)
     e1c:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     e1e:	230c      	movs	r3, #12
     e20:	18fa      	adds	r2, r7, r3
     e22:	4b27      	ldr	r3, [pc, #156]	; (ec0 <checkExists+0xdc>)
     e24:	0010      	movs	r0, r2
     e26:	0019      	movs	r1, r3
     e28:	2318      	movs	r3, #24
     e2a:	001a      	movs	r2, r3
     e2c:	4b27      	ldr	r3, [pc, #156]	; (ecc <checkExists+0xe8>)
     e2e:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
     e30:	230c      	movs	r3, #12
     e32:	18fb      	adds	r3, r7, r3
     e34:	1d1a      	adds	r2, r3, #4
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	0011      	movs	r1, r2
     e3a:	0018      	movs	r0, r3
     e3c:	4b24      	ldr	r3, [pc, #144]	; (ed0 <checkExists+0xec>)
     e3e:	4798      	blx	r3
     e40:	1e03      	subs	r3, r0, #0
     e42:	d003      	beq.n	e4c <checkExists+0x68>
			{
				return i;
     e44:	2327      	movs	r3, #39	; 0x27
     e46:	18fb      	adds	r3, r7, r3
     e48:	781b      	ldrb	r3, [r3, #0]
     e4a:	e032      	b.n	eb2 <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     e4c:	2327      	movs	r3, #39	; 0x27
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781a      	ldrb	r2, [r3, #0]
     e52:	2327      	movs	r3, #39	; 0x27
     e54:	18fb      	adds	r3, r7, r3
     e56:	3201      	adds	r2, #1
     e58:	701a      	strb	r2, [r3, #0]
     e5a:	4b18      	ldr	r3, [pc, #96]	; (ebc <checkExists+0xd8>)
     e5c:	789b      	ldrb	r3, [r3, #2]
     e5e:	2227      	movs	r2, #39	; 0x27
     e60:	18ba      	adds	r2, r7, r2
     e62:	7812      	ldrb	r2, [r2, #0]
     e64:	429a      	cmp	r2, r3
     e66:	d3ca      	bcc.n	dfe <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	0018      	movs	r0, r3
     e6c:	4b19      	ldr	r3, [pc, #100]	; (ed4 <checkExists+0xf0>)
     e6e:	4798      	blx	r3
     e70:	1e03      	subs	r3, r0, #0
     e72:	d001      	beq.n	e78 <checkExists+0x94>
	{
		return 0xFD;
     e74:	23fd      	movs	r3, #253	; 0xfd
     e76:	e01c      	b.n	eb2 <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
     e78:	4b17      	ldr	r3, [pc, #92]	; (ed8 <checkExists+0xf4>)
     e7a:	789b      	ldrb	r3, [r3, #2]
     e7c:	2b00      	cmp	r3, #0
     e7e:	d007      	beq.n	e90 <checkExists+0xac>
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	0018      	movs	r0, r3
     e84:	4b15      	ldr	r3, [pc, #84]	; (edc <checkExists+0xf8>)
     e86:	4798      	blx	r3
     e88:	1e03      	subs	r3, r0, #0
     e8a:	d001      	beq.n	e90 <checkExists+0xac>
	{
		return 0xFE;
     e8c:	23fe      	movs	r3, #254	; 0xfe
     e8e:	e010      	b.n	eb2 <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
     e90:	4b13      	ldr	r3, [pc, #76]	; (ee0 <checkExists+0xfc>)
     e92:	78db      	ldrb	r3, [r3, #3]
     e94:	2b00      	cmp	r3, #0
     e96:	d00b      	beq.n	eb0 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
     e98:	4b0f      	ldr	r3, [pc, #60]	; (ed8 <checkExists+0xf4>)
     e9a:	791b      	ldrb	r3, [r3, #4]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d007      	beq.n	eb0 <checkExists+0xcc>
     ea0:	687b      	ldr	r3, [r7, #4]
     ea2:	0018      	movs	r0, r3
     ea4:	4b0f      	ldr	r3, [pc, #60]	; (ee4 <checkExists+0x100>)
     ea6:	4798      	blx	r3
     ea8:	1e03      	subs	r3, r0, #0
     eaa:	d001      	beq.n	eb0 <checkExists+0xcc>
		{
			return 0xFE;
     eac:	23fe      	movs	r3, #254	; 0xfe
     eae:	e000      	b.n	eb2 <checkExists+0xce>
		}
	}
	return 0xFF;
     eb0:	23ff      	movs	r3, #255	; 0xff
}
     eb2:	0018      	movs	r0, r3
     eb4:	46bd      	mov	sp, r7
     eb6:	b00a      	add	sp, #40	; 0x28
     eb8:	bd80      	pop	{r7, pc}
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	20000600 	.word	0x20000600
     ec0:	20000574 	.word	0x20000574
     ec4:	000178b7 	.word	0x000178b7
     ec8:	00012655 	.word	0x00012655
     ecc:	00017881 	.word	0x00017881
     ed0:	00017b77 	.word	0x00017b77
     ed4:	00000a05 	.word	0x00000a05
     ed8:	20000544 	.word	0x20000544
     edc:	00000a4d 	.word	0x00000a4d
     ee0:	20000618 	.word	0x20000618
     ee4:	00000a89 	.word	0x00000a89

00000ee8 <addNumber>:

bool addNumber(char *number)
{
     ee8:	b580      	push	{r7, lr}
     eea:	b088      	sub	sp, #32
     eec:	af00      	add	r7, sp, #0
     eee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     ef0:	4b33      	ldr	r3, [pc, #204]	; (fc0 <addNumber+0xd8>)
     ef2:	789a      	ldrb	r2, [r3, #2]
     ef4:	4b32      	ldr	r3, [pc, #200]	; (fc0 <addNumber+0xd8>)
     ef6:	785b      	ldrb	r3, [r3, #1]
     ef8:	429a      	cmp	r2, r3
     efa:	d101      	bne.n	f00 <addNumber+0x18>
	{
		return false;
     efc:	2300      	movs	r3, #0
     efe:	e05a      	b.n	fb6 <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	0018      	movs	r0, r3
     f04:	4b2f      	ldr	r3, [pc, #188]	; (fc4 <addNumber+0xdc>)
     f06:	4798      	blx	r3
     f08:	0003      	movs	r3, r0
     f0a:	2bf0      	cmp	r3, #240	; 0xf0
     f0c:	d952      	bls.n	fb4 <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     f0e:	4b2e      	ldr	r3, [pc, #184]	; (fc8 <addNumber+0xe0>)
     f10:	223c      	movs	r2, #60	; 0x3c
     f12:	2100      	movs	r1, #0
     f14:	0018      	movs	r0, r3
     f16:	4b2d      	ldr	r3, [pc, #180]	; (fcc <addNumber+0xe4>)
     f18:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f1a:	4b29      	ldr	r3, [pc, #164]	; (fc0 <addNumber+0xd8>)
     f1c:	789b      	ldrb	r3, [r3, #2]
     f1e:	3309      	adds	r3, #9
     f20:	b2db      	uxtb	r3, r3
     f22:	4a29      	ldr	r2, [pc, #164]	; (fc8 <addNumber+0xe0>)
     f24:	0011      	movs	r1, r2
     f26:	0018      	movs	r0, r3
     f28:	4b29      	ldr	r3, [pc, #164]	; (fd0 <addNumber+0xe8>)
     f2a:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     f2c:	2308      	movs	r3, #8
     f2e:	18fa      	adds	r2, r7, r3
     f30:	4b25      	ldr	r3, [pc, #148]	; (fc8 <addNumber+0xe0>)
     f32:	0010      	movs	r0, r2
     f34:	0019      	movs	r1, r3
     f36:	2318      	movs	r3, #24
     f38:	001a      	movs	r2, r3
     f3a:	4b26      	ldr	r3, [pc, #152]	; (fd4 <addNumber+0xec>)
     f3c:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     f3e:	2308      	movs	r3, #8
     f40:	18fb      	adds	r3, r7, r3
     f42:	3304      	adds	r3, #4
     f44:	2214      	movs	r2, #20
     f46:	2100      	movs	r1, #0
     f48:	0018      	movs	r0, r3
     f4a:	4b20      	ldr	r3, [pc, #128]	; (fcc <addNumber+0xe4>)
     f4c:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
     f4e:	687a      	ldr	r2, [r7, #4]
     f50:	2308      	movs	r3, #8
     f52:	18fb      	adds	r3, r7, r3
     f54:	3304      	adds	r3, #4
     f56:	0011      	movs	r1, r2
     f58:	0018      	movs	r0, r3
     f5a:	4b1f      	ldr	r3, [pc, #124]	; (fd8 <addNumber+0xf0>)
     f5c:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
     f5e:	4a1a      	ldr	r2, [pc, #104]	; (fc8 <addNumber+0xe0>)
     f60:	2308      	movs	r3, #8
     f62:	18fb      	adds	r3, r7, r3
     f64:	0010      	movs	r0, r2
     f66:	0019      	movs	r1, r3
     f68:	2318      	movs	r3, #24
     f6a:	001a      	movs	r2, r3
     f6c:	4b19      	ldr	r3, [pc, #100]	; (fd4 <addNumber+0xec>)
     f6e:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f70:	4b13      	ldr	r3, [pc, #76]	; (fc0 <addNumber+0xd8>)
     f72:	789b      	ldrb	r3, [r3, #2]
     f74:	3309      	adds	r3, #9
     f76:	b2db      	uxtb	r3, r3
     f78:	4a13      	ldr	r2, [pc, #76]	; (fc8 <addNumber+0xe0>)
     f7a:	0011      	movs	r1, r2
     f7c:	0018      	movs	r0, r3
     f7e:	4b17      	ldr	r3, [pc, #92]	; (fdc <addNumber+0xf4>)
     f80:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     f82:	4b17      	ldr	r3, [pc, #92]	; (fe0 <addNumber+0xf8>)
     f84:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
     f86:	4b0e      	ldr	r3, [pc, #56]	; (fc0 <addNumber+0xd8>)
     f88:	789b      	ldrb	r3, [r3, #2]
     f8a:	3301      	adds	r3, #1
     f8c:	b2da      	uxtb	r2, r3
     f8e:	4b0c      	ldr	r3, [pc, #48]	; (fc0 <addNumber+0xd8>)
     f90:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     f92:	4a0d      	ldr	r2, [pc, #52]	; (fc8 <addNumber+0xe0>)
     f94:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <addNumber+0xd8>)
     f96:	0010      	movs	r0, r2
     f98:	0019      	movs	r1, r3
     f9a:	2308      	movs	r3, #8
     f9c:	001a      	movs	r2, r3
     f9e:	4b0d      	ldr	r3, [pc, #52]	; (fd4 <addNumber+0xec>)
     fa0:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     fa2:	4b09      	ldr	r3, [pc, #36]	; (fc8 <addNumber+0xe0>)
     fa4:	0019      	movs	r1, r3
     fa6:	2008      	movs	r0, #8
     fa8:	4b0c      	ldr	r3, [pc, #48]	; (fdc <addNumber+0xf4>)
     faa:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     fac:	4b0c      	ldr	r3, [pc, #48]	; (fe0 <addNumber+0xf8>)
     fae:	4798      	blx	r3
			
			return true;
     fb0:	2301      	movs	r3, #1
     fb2:	e000      	b.n	fb6 <addNumber+0xce>
		}
	}
	return false;
     fb4:	2300      	movs	r3, #0
}
     fb6:	0018      	movs	r0, r3
     fb8:	46bd      	mov	sp, r7
     fba:	b008      	add	sp, #32
     fbc:	bd80      	pop	{r7, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	20000600 	.word	0x20000600
     fc4:	00000de5 	.word	0x00000de5
     fc8:	20000574 	.word	0x20000574
     fcc:	000178b7 	.word	0x000178b7
     fd0:	00012655 	.word	0x00012655
     fd4:	00017881 	.word	0x00017881
     fd8:	00017b37 	.word	0x00017b37
     fdc:	00012549 	.word	0x00012549
     fe0:	000126f1 	.word	0x000126f1

00000fe4 <removeNumber>:

bool removeNumber(char *numer)
{
     fe4:	b590      	push	{r4, r7, lr}
     fe6:	b085      	sub	sp, #20
     fe8:	af00      	add	r7, sp, #0
     fea:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
     fec:	4b3d      	ldr	r3, [pc, #244]	; (10e4 <removeNumber+0x100>)
     fee:	789b      	ldrb	r3, [r3, #2]
     ff0:	2b01      	cmp	r3, #1
     ff2:	d801      	bhi.n	ff8 <removeNumber+0x14>
	{
		return false;
     ff4:	2300      	movs	r3, #0
     ff6:	e071      	b.n	10dc <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
     ff8:	230e      	movs	r3, #14
     ffa:	18fc      	adds	r4, r7, r3
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	0018      	movs	r0, r3
    1000:	4b39      	ldr	r3, [pc, #228]	; (10e8 <removeNumber+0x104>)
    1002:	4798      	blx	r3
    1004:	0003      	movs	r3, r0
    1006:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
    1008:	4b36      	ldr	r3, [pc, #216]	; (10e4 <removeNumber+0x100>)
    100a:	785b      	ldrb	r3, [r3, #1]
    100c:	220e      	movs	r2, #14
    100e:	18ba      	adds	r2, r7, r2
    1010:	7812      	ldrb	r2, [r2, #0]
    1012:	429a      	cmp	r2, r3
    1014:	d261      	bcs.n	10da <removeNumber+0xf6>
    1016:	4b33      	ldr	r3, [pc, #204]	; (10e4 <removeNumber+0x100>)
    1018:	78db      	ldrb	r3, [r3, #3]
    101a:	220e      	movs	r2, #14
    101c:	18ba      	adds	r2, r7, r2
    101e:	7812      	ldrb	r2, [r2, #0]
    1020:	429a      	cmp	r2, r3
    1022:	d05a      	beq.n	10da <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    1024:	230f      	movs	r3, #15
    1026:	18fb      	adds	r3, r7, r3
    1028:	220e      	movs	r2, #14
    102a:	18ba      	adds	r2, r7, r2
    102c:	7812      	ldrb	r2, [r2, #0]
    102e:	701a      	strb	r2, [r3, #0]
    1030:	e022      	b.n	1078 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
    1032:	4b2e      	ldr	r3, [pc, #184]	; (10ec <removeNumber+0x108>)
    1034:	223c      	movs	r2, #60	; 0x3c
    1036:	2100      	movs	r1, #0
    1038:	0018      	movs	r0, r3
    103a:	4b2d      	ldr	r3, [pc, #180]	; (10f0 <removeNumber+0x10c>)
    103c:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
    103e:	230f      	movs	r3, #15
    1040:	18fb      	adds	r3, r7, r3
    1042:	781b      	ldrb	r3, [r3, #0]
    1044:	330a      	adds	r3, #10
    1046:	b2db      	uxtb	r3, r3
    1048:	4a28      	ldr	r2, [pc, #160]	; (10ec <removeNumber+0x108>)
    104a:	0011      	movs	r1, r2
    104c:	0018      	movs	r0, r3
    104e:	4b29      	ldr	r3, [pc, #164]	; (10f4 <removeNumber+0x110>)
    1050:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
    1052:	230f      	movs	r3, #15
    1054:	18fb      	adds	r3, r7, r3
    1056:	781b      	ldrb	r3, [r3, #0]
    1058:	3309      	adds	r3, #9
    105a:	b2db      	uxtb	r3, r3
    105c:	4a23      	ldr	r2, [pc, #140]	; (10ec <removeNumber+0x108>)
    105e:	0011      	movs	r1, r2
    1060:	0018      	movs	r0, r3
    1062:	4b25      	ldr	r3, [pc, #148]	; (10f8 <removeNumber+0x114>)
    1064:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
    1066:	4b25      	ldr	r3, [pc, #148]	; (10fc <removeNumber+0x118>)
    1068:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    106a:	230f      	movs	r3, #15
    106c:	18fb      	adds	r3, r7, r3
    106e:	781a      	ldrb	r2, [r3, #0]
    1070:	230f      	movs	r3, #15
    1072:	18fb      	adds	r3, r7, r3
    1074:	3201      	adds	r2, #1
    1076:	701a      	strb	r2, [r3, #0]
    1078:	230f      	movs	r3, #15
    107a:	18fb      	adds	r3, r7, r3
    107c:	781a      	ldrb	r2, [r3, #0]
    107e:	4b19      	ldr	r3, [pc, #100]	; (10e4 <removeNumber+0x100>)
    1080:	789b      	ldrb	r3, [r3, #2]
    1082:	3b01      	subs	r3, #1
    1084:	429a      	cmp	r2, r3
    1086:	dbd4      	blt.n	1032 <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
    1088:	4b16      	ldr	r3, [pc, #88]	; (10e4 <removeNumber+0x100>)
    108a:	789b      	ldrb	r3, [r3, #2]
    108c:	3b01      	subs	r3, #1
    108e:	b2da      	uxtb	r2, r3
    1090:	4b14      	ldr	r3, [pc, #80]	; (10e4 <removeNumber+0x100>)
    1092:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
    1094:	4b13      	ldr	r3, [pc, #76]	; (10e4 <removeNumber+0x100>)
    1096:	791b      	ldrb	r3, [r3, #4]
    1098:	220e      	movs	r2, #14
    109a:	18ba      	adds	r2, r7, r2
    109c:	7812      	ldrb	r2, [r2, #0]
    109e:	429a      	cmp	r2, r3
    10a0:	d007      	beq.n	10b2 <removeNumber+0xce>
    10a2:	230e      	movs	r3, #14
    10a4:	18fb      	adds	r3, r7, r3
    10a6:	781a      	ldrb	r2, [r3, #0]
    10a8:	4b0e      	ldr	r3, [pc, #56]	; (10e4 <removeNumber+0x100>)
    10aa:	789b      	ldrb	r3, [r3, #2]
    10ac:	3b01      	subs	r3, #1
    10ae:	429a      	cmp	r2, r3
    10b0:	dd02      	ble.n	10b8 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
    10b2:	4b0c      	ldr	r3, [pc, #48]	; (10e4 <removeNumber+0x100>)
    10b4:	2201      	movs	r2, #1
    10b6:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    10b8:	4a0c      	ldr	r2, [pc, #48]	; (10ec <removeNumber+0x108>)
    10ba:	4b0a      	ldr	r3, [pc, #40]	; (10e4 <removeNumber+0x100>)
    10bc:	0010      	movs	r0, r2
    10be:	0019      	movs	r1, r3
    10c0:	2308      	movs	r3, #8
    10c2:	001a      	movs	r2, r3
    10c4:	4b0e      	ldr	r3, [pc, #56]	; (1100 <removeNumber+0x11c>)
    10c6:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    10c8:	4b08      	ldr	r3, [pc, #32]	; (10ec <removeNumber+0x108>)
    10ca:	0019      	movs	r1, r3
    10cc:	2008      	movs	r0, #8
    10ce:	4b0a      	ldr	r3, [pc, #40]	; (10f8 <removeNumber+0x114>)
    10d0:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    10d2:	4b0a      	ldr	r3, [pc, #40]	; (10fc <removeNumber+0x118>)
    10d4:	4798      	blx	r3
			return true;
    10d6:	2301      	movs	r3, #1
    10d8:	e000      	b.n	10dc <removeNumber+0xf8>
		}
	}
	return false;
    10da:	2300      	movs	r3, #0
}
    10dc:	0018      	movs	r0, r3
    10de:	46bd      	mov	sp, r7
    10e0:	b005      	add	sp, #20
    10e2:	bd90      	pop	{r4, r7, pc}
    10e4:	20000600 	.word	0x20000600
    10e8:	00000de5 	.word	0x00000de5
    10ec:	20000574 	.word	0x20000574
    10f0:	000178b7 	.word	0x000178b7
    10f4:	00012655 	.word	0x00012655
    10f8:	00012549 	.word	0x00012549
    10fc:	000126f1 	.word	0x000126f1
    1100:	00017881 	.word	0x00017881

00001104 <clearNumbers>:

void clearNumbers(bool admin)
{
    1104:	b580      	push	{r7, lr}
    1106:	b082      	sub	sp, #8
    1108:	af00      	add	r7, sp, #0
    110a:	0002      	movs	r2, r0
    110c:	1dfb      	adds	r3, r7, #7
    110e:	701a      	strb	r2, [r3, #0]
	if (admin)
    1110:	1dfb      	adds	r3, r7, #7
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	2b00      	cmp	r3, #0
    1116:	d003      	beq.n	1120 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
    1118:	4b28      	ldr	r3, [pc, #160]	; (11bc <clearNumbers+0xb8>)
    111a:	2200      	movs	r2, #0
    111c:	709a      	strb	r2, [r3, #2]
    111e:	e018      	b.n	1152 <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
    1120:	4b27      	ldr	r3, [pc, #156]	; (11c0 <clearNumbers+0xbc>)
    1122:	223c      	movs	r2, #60	; 0x3c
    1124:	2100      	movs	r1, #0
    1126:	0018      	movs	r0, r3
    1128:	4b26      	ldr	r3, [pc, #152]	; (11c4 <clearNumbers+0xc0>)
    112a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
    112c:	4b23      	ldr	r3, [pc, #140]	; (11bc <clearNumbers+0xb8>)
    112e:	78db      	ldrb	r3, [r3, #3]
    1130:	3309      	adds	r3, #9
    1132:	b2db      	uxtb	r3, r3
    1134:	4a22      	ldr	r2, [pc, #136]	; (11c0 <clearNumbers+0xbc>)
    1136:	0011      	movs	r1, r2
    1138:	0018      	movs	r0, r3
    113a:	4b23      	ldr	r3, [pc, #140]	; (11c8 <clearNumbers+0xc4>)
    113c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
    113e:	4b20      	ldr	r3, [pc, #128]	; (11c0 <clearNumbers+0xbc>)
    1140:	0019      	movs	r1, r3
    1142:	2009      	movs	r0, #9
    1144:	4b21      	ldr	r3, [pc, #132]	; (11cc <clearNumbers+0xc8>)
    1146:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1148:	4b21      	ldr	r3, [pc, #132]	; (11d0 <clearNumbers+0xcc>)
    114a:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
    114c:	4b1b      	ldr	r3, [pc, #108]	; (11bc <clearNumbers+0xb8>)
    114e:	2201      	movs	r2, #1
    1150:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
    1152:	4b1a      	ldr	r3, [pc, #104]	; (11bc <clearNumbers+0xb8>)
    1154:	2200      	movs	r2, #0
    1156:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    1158:	4b18      	ldr	r3, [pc, #96]	; (11bc <clearNumbers+0xb8>)
    115a:	2201      	movs	r2, #1
    115c:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    115e:	4a18      	ldr	r2, [pc, #96]	; (11c0 <clearNumbers+0xbc>)
    1160:	4b16      	ldr	r3, [pc, #88]	; (11bc <clearNumbers+0xb8>)
    1162:	0010      	movs	r0, r2
    1164:	0019      	movs	r1, r3
    1166:	2308      	movs	r3, #8
    1168:	001a      	movs	r2, r3
    116a:	4b1a      	ldr	r3, [pc, #104]	; (11d4 <clearNumbers+0xd0>)
    116c:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
    116e:	4b13      	ldr	r3, [pc, #76]	; (11bc <clearNumbers+0xb8>)
    1170:	2200      	movs	r2, #0
    1172:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    1174:	4b11      	ldr	r3, [pc, #68]	; (11bc <clearNumbers+0xb8>)
    1176:	2201      	movs	r2, #1
    1178:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    117a:	4b11      	ldr	r3, [pc, #68]	; (11c0 <clearNumbers+0xbc>)
    117c:	0019      	movs	r1, r3
    117e:	2008      	movs	r0, #8
    1180:	4b12      	ldr	r3, [pc, #72]	; (11cc <clearNumbers+0xc8>)
    1182:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1184:	4b12      	ldr	r3, [pc, #72]	; (11d0 <clearNumbers+0xcc>)
    1186:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
    1188:	2000      	movs	r0, #0
    118a:	4b13      	ldr	r3, [pc, #76]	; (11d8 <clearNumbers+0xd4>)
    118c:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
    118e:	4b13      	ldr	r3, [pc, #76]	; (11dc <clearNumbers+0xd8>)
    1190:	2200      	movs	r2, #0
    1192:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    1194:	4a0a      	ldr	r2, [pc, #40]	; (11c0 <clearNumbers+0xbc>)
    1196:	4b11      	ldr	r3, [pc, #68]	; (11dc <clearNumbers+0xd8>)
    1198:	0010      	movs	r0, r2
    119a:	0019      	movs	r1, r3
    119c:	2318      	movs	r3, #24
    119e:	001a      	movs	r2, r3
    11a0:	4b0c      	ldr	r3, [pc, #48]	; (11d4 <clearNumbers+0xd0>)
    11a2:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    11a4:	4b06      	ldr	r3, [pc, #24]	; (11c0 <clearNumbers+0xbc>)
    11a6:	0019      	movs	r1, r3
    11a8:	2018      	movs	r0, #24
    11aa:	4b08      	ldr	r3, [pc, #32]	; (11cc <clearNumbers+0xc8>)
    11ac:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    11ae:	4b08      	ldr	r3, [pc, #32]	; (11d0 <clearNumbers+0xcc>)
    11b0:	4798      	blx	r3
}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	46bd      	mov	sp, r7
    11b6:	b002      	add	sp, #8
    11b8:	bd80      	pop	{r7, pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	20000600 	.word	0x20000600
    11c0:	20000574 	.word	0x20000574
    11c4:	000178b7 	.word	0x000178b7
    11c8:	00012655 	.word	0x00012655
    11cc:	00012549 	.word	0x00012549
    11d0:	000126f1 	.word	0x000126f1
    11d4:	00017881 	.word	0x00017881
    11d8:	000011e1 	.word	0x000011e1
    11dc:	20000634 	.word	0x20000634

000011e0 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b082      	sub	sp, #8
    11e4:	af00      	add	r7, sp, #0
    11e6:	0002      	movs	r2, r0
    11e8:	1dfb      	adds	r3, r7, #7
    11ea:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
    11ec:	1dfb      	adds	r3, r7, #7
    11ee:	781a      	ldrb	r2, [r3, #0]
    11f0:	4b0a      	ldr	r3, [pc, #40]	; (121c <saveAlterNumberSetting+0x3c>)
    11f2:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    11f4:	4a0a      	ldr	r2, [pc, #40]	; (1220 <saveAlterNumberSetting+0x40>)
    11f6:	4b09      	ldr	r3, [pc, #36]	; (121c <saveAlterNumberSetting+0x3c>)
    11f8:	0010      	movs	r0, r2
    11fa:	0019      	movs	r1, r3
    11fc:	2318      	movs	r3, #24
    11fe:	001a      	movs	r2, r3
    1200:	4b08      	ldr	r3, [pc, #32]	; (1224 <saveAlterNumberSetting+0x44>)
    1202:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <saveAlterNumberSetting+0x40>)
    1206:	0019      	movs	r1, r3
    1208:	2018      	movs	r0, #24
    120a:	4b07      	ldr	r3, [pc, #28]	; (1228 <saveAlterNumberSetting+0x48>)
    120c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    120e:	4b07      	ldr	r3, [pc, #28]	; (122c <saveAlterNumberSetting+0x4c>)
    1210:	4798      	blx	r3
}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	46bd      	mov	sp, r7
    1216:	b002      	add	sp, #8
    1218:	bd80      	pop	{r7, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	20000634 	.word	0x20000634
    1220:	20000574 	.word	0x20000574
    1224:	00017881 	.word	0x00017881
    1228:	00012549 	.word	0x00012549
    122c:	000126f1 	.word	0x000126f1

00001230 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
    1230:	b580      	push	{r7, lr}
    1232:	b082      	sub	sp, #8
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
    1238:	4b11      	ldr	r3, [pc, #68]	; (1280 <addAlternateNumber+0x50>)
    123a:	789b      	ldrb	r3, [r3, #2]
    123c:	2b00      	cmp	r3, #0
    123e:	d019      	beq.n	1274 <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
    1240:	4b10      	ldr	r3, [pc, #64]	; (1284 <addAlternateNumber+0x54>)
    1242:	2201      	movs	r2, #1
    1244:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
    1246:	687a      	ldr	r2, [r7, #4]
    1248:	4b0f      	ldr	r3, [pc, #60]	; (1288 <addAlternateNumber+0x58>)
    124a:	0011      	movs	r1, r2
    124c:	0018      	movs	r0, r3
    124e:	4b0f      	ldr	r3, [pc, #60]	; (128c <addAlternateNumber+0x5c>)
    1250:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    1252:	4a0f      	ldr	r2, [pc, #60]	; (1290 <addAlternateNumber+0x60>)
    1254:	4b0b      	ldr	r3, [pc, #44]	; (1284 <addAlternateNumber+0x54>)
    1256:	0010      	movs	r0, r2
    1258:	0019      	movs	r1, r3
    125a:	2318      	movs	r3, #24
    125c:	001a      	movs	r2, r3
    125e:	4b0d      	ldr	r3, [pc, #52]	; (1294 <addAlternateNumber+0x64>)
    1260:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    1262:	4b0b      	ldr	r3, [pc, #44]	; (1290 <addAlternateNumber+0x60>)
    1264:	0019      	movs	r1, r3
    1266:	2018      	movs	r0, #24
    1268:	4b0b      	ldr	r3, [pc, #44]	; (1298 <addAlternateNumber+0x68>)
    126a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    126c:	4b0b      	ldr	r3, [pc, #44]	; (129c <addAlternateNumber+0x6c>)
    126e:	4798      	blx	r3
		
		return true;
    1270:	2301      	movs	r3, #1
    1272:	e000      	b.n	1276 <addAlternateNumber+0x46>
	}
	return false;
    1274:	2300      	movs	r3, #0
}
    1276:	0018      	movs	r0, r3
    1278:	46bd      	mov	sp, r7
    127a:	b002      	add	sp, #8
    127c:	bd80      	pop	{r7, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	20000600 	.word	0x20000600
    1284:	20000634 	.word	0x20000634
    1288:	20000638 	.word	0x20000638
    128c:	00017b37 	.word	0x00017b37
    1290:	20000574 	.word	0x20000574
    1294:	00017881 	.word	0x00017881
    1298:	00012549 	.word	0x00012549
    129c:	000126f1 	.word	0x000126f1

000012a0 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
    12a0:	b580      	push	{r7, lr}
    12a2:	b082      	sub	sp, #8
    12a4:	af00      	add	r7, sp, #0
    12a6:	0002      	movs	r2, r0
    12a8:	1dfb      	adds	r3, r7, #7
    12aa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
    12ac:	1dfb      	adds	r3, r7, #7
    12ae:	781a      	ldrb	r2, [r3, #0]
    12b0:	4b09      	ldr	r3, [pc, #36]	; (12d8 <saveAutoStartSettings+0x38>)
    12b2:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    12b4:	4908      	ldr	r1, [pc, #32]	; (12d8 <saveAutoStartSettings+0x38>)
    12b6:	4b09      	ldr	r3, [pc, #36]	; (12dc <saveAutoStartSettings+0x3c>)
    12b8:	2228      	movs	r2, #40	; 0x28
    12ba:	0018      	movs	r0, r3
    12bc:	4b08      	ldr	r3, [pc, #32]	; (12e0 <saveAutoStartSettings+0x40>)
    12be:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    12c0:	4b06      	ldr	r3, [pc, #24]	; (12dc <saveAutoStartSettings+0x3c>)
    12c2:	0019      	movs	r1, r3
    12c4:	201a      	movs	r0, #26
    12c6:	4b07      	ldr	r3, [pc, #28]	; (12e4 <saveAutoStartSettings+0x44>)
    12c8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    12ca:	4b07      	ldr	r3, [pc, #28]	; (12e8 <saveAutoStartSettings+0x48>)
    12cc:	4798      	blx	r3
}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	46bd      	mov	sp, r7
    12d2:	b002      	add	sp, #8
    12d4:	bd80      	pop	{r7, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	2000064c 	.word	0x2000064c
    12dc:	20000574 	.word	0x20000574
    12e0:	00017881 	.word	0x00017881
    12e4:	00012549 	.word	0x00012549
    12e8:	000126f1 	.word	0x000126f1

000012ec <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
    12ec:	b580      	push	{r7, lr}
    12ee:	b082      	sub	sp, #8
    12f0:	af00      	add	r7, sp, #0
    12f2:	0002      	movs	r2, r0
    12f4:	1dbb      	adds	r3, r7, #6
    12f6:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
    12f8:	4b0a      	ldr	r3, [pc, #40]	; (1324 <saveAutoStartTimeSettings+0x38>)
    12fa:	1dba      	adds	r2, r7, #6
    12fc:	8812      	ldrh	r2, [r2, #0]
    12fe:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1300:	4908      	ldr	r1, [pc, #32]	; (1324 <saveAutoStartTimeSettings+0x38>)
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <saveAutoStartTimeSettings+0x3c>)
    1304:	2228      	movs	r2, #40	; 0x28
    1306:	0018      	movs	r0, r3
    1308:	4b08      	ldr	r3, [pc, #32]	; (132c <saveAutoStartTimeSettings+0x40>)
    130a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    130c:	4b06      	ldr	r3, [pc, #24]	; (1328 <saveAutoStartTimeSettings+0x3c>)
    130e:	0019      	movs	r1, r3
    1310:	201a      	movs	r0, #26
    1312:	4b07      	ldr	r3, [pc, #28]	; (1330 <saveAutoStartTimeSettings+0x44>)
    1314:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1316:	4b07      	ldr	r3, [pc, #28]	; (1334 <saveAutoStartTimeSettings+0x48>)
    1318:	4798      	blx	r3
}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	46bd      	mov	sp, r7
    131e:	b002      	add	sp, #8
    1320:	bd80      	pop	{r7, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	2000064c 	.word	0x2000064c
    1328:	20000574 	.word	0x20000574
    132c:	00017881 	.word	0x00017881
    1330:	00012549 	.word	0x00012549
    1334:	000126f1 	.word	0x000126f1

00001338 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
    1338:	b580      	push	{r7, lr}
    133a:	b082      	sub	sp, #8
    133c:	af00      	add	r7, sp, #0
    133e:	0002      	movs	r2, r0
    1340:	1dfb      	adds	r3, r7, #7
    1342:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
    1344:	4b0a      	ldr	r3, [pc, #40]	; (1370 <saveDNDSettings+0x38>)
    1346:	1dfa      	adds	r2, r7, #7
    1348:	7812      	ldrb	r2, [r2, #0]
    134a:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    134c:	4908      	ldr	r1, [pc, #32]	; (1370 <saveDNDSettings+0x38>)
    134e:	4b09      	ldr	r3, [pc, #36]	; (1374 <saveDNDSettings+0x3c>)
    1350:	2228      	movs	r2, #40	; 0x28
    1352:	0018      	movs	r0, r3
    1354:	4b08      	ldr	r3, [pc, #32]	; (1378 <saveDNDSettings+0x40>)
    1356:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <saveDNDSettings+0x3c>)
    135a:	0019      	movs	r1, r3
    135c:	201a      	movs	r0, #26
    135e:	4b07      	ldr	r3, [pc, #28]	; (137c <saveDNDSettings+0x44>)
    1360:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <saveDNDSettings+0x48>)
    1364:	4798      	blx	r3
}
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	46bd      	mov	sp, r7
    136a:	b002      	add	sp, #8
    136c:	bd80      	pop	{r7, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	2000064c 	.word	0x2000064c
    1374:	20000574 	.word	0x20000574
    1378:	00017881 	.word	0x00017881
    137c:	00012549 	.word	0x00012549
    1380:	000126f1 	.word	0x000126f1

00001384 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
    1384:	b580      	push	{r7, lr}
    1386:	b082      	sub	sp, #8
    1388:	af00      	add	r7, sp, #0
    138a:	0002      	movs	r2, r0
    138c:	1dfb      	adds	r3, r7, #7
    138e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
    1390:	4b0a      	ldr	r3, [pc, #40]	; (13bc <saveResponseSettings+0x38>)
    1392:	1dfa      	adds	r2, r7, #7
    1394:	7812      	ldrb	r2, [r2, #0]
    1396:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1398:	4908      	ldr	r1, [pc, #32]	; (13bc <saveResponseSettings+0x38>)
    139a:	4b09      	ldr	r3, [pc, #36]	; (13c0 <saveResponseSettings+0x3c>)
    139c:	2228      	movs	r2, #40	; 0x28
    139e:	0018      	movs	r0, r3
    13a0:	4b08      	ldr	r3, [pc, #32]	; (13c4 <saveResponseSettings+0x40>)
    13a2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    13a4:	4b06      	ldr	r3, [pc, #24]	; (13c0 <saveResponseSettings+0x3c>)
    13a6:	0019      	movs	r1, r3
    13a8:	201a      	movs	r0, #26
    13aa:	4b07      	ldr	r3, [pc, #28]	; (13c8 <saveResponseSettings+0x44>)
    13ac:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    13ae:	4b07      	ldr	r3, [pc, #28]	; (13cc <saveResponseSettings+0x48>)
    13b0:	4798      	blx	r3
}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	46bd      	mov	sp, r7
    13b6:	b002      	add	sp, #8
    13b8:	bd80      	pop	{r7, pc}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	2000064c 	.word	0x2000064c
    13c0:	20000574 	.word	0x20000574
    13c4:	00017881 	.word	0x00017881
    13c8:	00012549 	.word	0x00012549
    13cc:	000126f1 	.word	0x000126f1

000013d0 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
    13d0:	b5b0      	push	{r4, r5, r7, lr}
    13d2:	b082      	sub	sp, #8
    13d4:	af00      	add	r7, sp, #0
    13d6:	0005      	movs	r5, r0
    13d8:	000c      	movs	r4, r1
    13da:	0010      	movs	r0, r2
    13dc:	0019      	movs	r1, r3
    13de:	1dfb      	adds	r3, r7, #7
    13e0:	1c2a      	adds	r2, r5, #0
    13e2:	701a      	strb	r2, [r3, #0]
    13e4:	1dbb      	adds	r3, r7, #6
    13e6:	1c22      	adds	r2, r4, #0
    13e8:	701a      	strb	r2, [r3, #0]
    13ea:	1d7b      	adds	r3, r7, #5
    13ec:	1c02      	adds	r2, r0, #0
    13ee:	701a      	strb	r2, [r3, #0]
    13f0:	1d3b      	adds	r3, r7, #4
    13f2:	1c0a      	adds	r2, r1, #0
    13f4:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
    13f6:	1dfb      	adds	r3, r7, #7
    13f8:	781a      	ldrb	r2, [r3, #0]
    13fa:	4b14      	ldr	r3, [pc, #80]	; (144c <saveNoCallSettings+0x7c>)
    13fc:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
    13fe:	4b13      	ldr	r3, [pc, #76]	; (144c <saveNoCallSettings+0x7c>)
    1400:	7a5b      	ldrb	r3, [r3, #9]
    1402:	2b00      	cmp	r3, #0
    1404:	d010      	beq.n	1428 <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
    1406:	4b11      	ldr	r3, [pc, #68]	; (144c <saveNoCallSettings+0x7c>)
    1408:	1dba      	adds	r2, r7, #6
    140a:	7812      	ldrb	r2, [r2, #0]
    140c:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
    140e:	4b0f      	ldr	r3, [pc, #60]	; (144c <saveNoCallSettings+0x7c>)
    1410:	1d7a      	adds	r2, r7, #5
    1412:	7812      	ldrb	r2, [r2, #0]
    1414:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
    1416:	4b0d      	ldr	r3, [pc, #52]	; (144c <saveNoCallSettings+0x7c>)
    1418:	1d3a      	adds	r2, r7, #4
    141a:	7812      	ldrb	r2, [r2, #0]
    141c:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
    141e:	4b0b      	ldr	r3, [pc, #44]	; (144c <saveNoCallSettings+0x7c>)
    1420:	2218      	movs	r2, #24
    1422:	18ba      	adds	r2, r7, r2
    1424:	7812      	ldrb	r2, [r2, #0]
    1426:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1428:	4908      	ldr	r1, [pc, #32]	; (144c <saveNoCallSettings+0x7c>)
    142a:	4b09      	ldr	r3, [pc, #36]	; (1450 <saveNoCallSettings+0x80>)
    142c:	2228      	movs	r2, #40	; 0x28
    142e:	0018      	movs	r0, r3
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <saveNoCallSettings+0x84>)
    1432:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1434:	4b06      	ldr	r3, [pc, #24]	; (1450 <saveNoCallSettings+0x80>)
    1436:	0019      	movs	r1, r3
    1438:	201a      	movs	r0, #26
    143a:	4b07      	ldr	r3, [pc, #28]	; (1458 <saveNoCallSettings+0x88>)
    143c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    143e:	4b07      	ldr	r3, [pc, #28]	; (145c <saveNoCallSettings+0x8c>)
    1440:	4798      	blx	r3
}
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	46bd      	mov	sp, r7
    1446:	b002      	add	sp, #8
    1448:	bdb0      	pop	{r4, r5, r7, pc}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	2000064c 	.word	0x2000064c
    1450:	20000574 	.word	0x20000574
    1454:	00017881 	.word	0x00017881
    1458:	00012549 	.word	0x00012549
    145c:	000126f1 	.word	0x000126f1

00001460 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
    1466:	0002      	movs	r2, r0
    1468:	1dfb      	adds	r3, r7, #7
    146a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
    146c:	1dfb      	adds	r3, r7, #7
    146e:	781a      	ldrb	r2, [r3, #0]
    1470:	4b09      	ldr	r3, [pc, #36]	; (1498 <saveWaterBypassSettings+0x38>)
    1472:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1474:	4908      	ldr	r1, [pc, #32]	; (1498 <saveWaterBypassSettings+0x38>)
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <saveWaterBypassSettings+0x3c>)
    1478:	2228      	movs	r2, #40	; 0x28
    147a:	0018      	movs	r0, r3
    147c:	4b08      	ldr	r3, [pc, #32]	; (14a0 <saveWaterBypassSettings+0x40>)
    147e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1480:	4b06      	ldr	r3, [pc, #24]	; (149c <saveWaterBypassSettings+0x3c>)
    1482:	0019      	movs	r1, r3
    1484:	201a      	movs	r0, #26
    1486:	4b07      	ldr	r3, [pc, #28]	; (14a4 <saveWaterBypassSettings+0x44>)
    1488:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    148a:	4b07      	ldr	r3, [pc, #28]	; (14a8 <saveWaterBypassSettings+0x48>)
    148c:	4798      	blx	r3
}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	46bd      	mov	sp, r7
    1492:	b002      	add	sp, #8
    1494:	bd80      	pop	{r7, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	2000064c 	.word	0x2000064c
    149c:	20000574 	.word	0x20000574
    14a0:	00017881 	.word	0x00017881
    14a4:	00012549 	.word	0x00012549
    14a8:	000126f1 	.word	0x000126f1

000014ac <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b082      	sub	sp, #8
    14b0:	af00      	add	r7, sp, #0
    14b2:	0002      	movs	r2, r0
    14b4:	1dfb      	adds	r3, r7, #7
    14b6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
    14b8:	1dfb      	adds	r3, r7, #7
    14ba:	781a      	ldrb	r2, [r3, #0]
    14bc:	4b09      	ldr	r3, [pc, #36]	; (14e4 <savePreventOverFlowSettings+0x38>)
    14be:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    14c0:	4908      	ldr	r1, [pc, #32]	; (14e4 <savePreventOverFlowSettings+0x38>)
    14c2:	4b09      	ldr	r3, [pc, #36]	; (14e8 <savePreventOverFlowSettings+0x3c>)
    14c4:	2228      	movs	r2, #40	; 0x28
    14c6:	0018      	movs	r0, r3
    14c8:	4b08      	ldr	r3, [pc, #32]	; (14ec <savePreventOverFlowSettings+0x40>)
    14ca:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    14cc:	4b06      	ldr	r3, [pc, #24]	; (14e8 <savePreventOverFlowSettings+0x3c>)
    14ce:	0019      	movs	r1, r3
    14d0:	201a      	movs	r0, #26
    14d2:	4b07      	ldr	r3, [pc, #28]	; (14f0 <savePreventOverFlowSettings+0x44>)
    14d4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    14d6:	4b07      	ldr	r3, [pc, #28]	; (14f4 <savePreventOverFlowSettings+0x48>)
    14d8:	4798      	blx	r3
}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	46bd      	mov	sp, r7
    14de:	b002      	add	sp, #8
    14e0:	bd80      	pop	{r7, pc}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	2000064c 	.word	0x2000064c
    14e8:	20000574 	.word	0x20000574
    14ec:	00017881 	.word	0x00017881
    14f0:	00012549 	.word	0x00012549
    14f4:	000126f1 	.word	0x000126f1

000014f8 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	af00      	add	r7, sp, #0
    14fe:	0002      	movs	r2, r0
    1500:	1dfb      	adds	r3, r7, #7
    1502:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
    1504:	1dfb      	adds	r3, r7, #7
    1506:	781b      	ldrb	r3, [r3, #0]
    1508:	2b64      	cmp	r3, #100	; 0x64
    150a:	d918      	bls.n	153e <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
    150c:	4b0e      	ldr	r3, [pc, #56]	; (1548 <setOverloadPer+0x50>)
    150e:	1dfa      	adds	r2, r7, #7
    1510:	7812      	ldrb	r2, [r2, #0]
    1512:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1514:	490c      	ldr	r1, [pc, #48]	; (1548 <setOverloadPer+0x50>)
    1516:	4b0d      	ldr	r3, [pc, #52]	; (154c <setOverloadPer+0x54>)
    1518:	2228      	movs	r2, #40	; 0x28
    151a:	0018      	movs	r0, r3
    151c:	4b0c      	ldr	r3, [pc, #48]	; (1550 <setOverloadPer+0x58>)
    151e:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1520:	4b0a      	ldr	r3, [pc, #40]	; (154c <setOverloadPer+0x54>)
    1522:	0019      	movs	r1, r3
    1524:	201a      	movs	r0, #26
    1526:	4b0b      	ldr	r3, [pc, #44]	; (1554 <setOverloadPer+0x5c>)
    1528:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    152a:	4b0b      	ldr	r3, [pc, #44]	; (1558 <setOverloadPer+0x60>)
    152c:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
    152e:	4b06      	ldr	r3, [pc, #24]	; (1548 <setOverloadPer+0x50>)
    1530:	7bdb      	ldrb	r3, [r3, #15]
    1532:	2b00      	cmp	r3, #0
    1534:	d001      	beq.n	153a <setOverloadPer+0x42>
		{
			calcCurrentValues();
    1536:	4b09      	ldr	r3, [pc, #36]	; (155c <setOverloadPer+0x64>)
    1538:	4798      	blx	r3
		}
		return true;
    153a:	2301      	movs	r3, #1
    153c:	e000      	b.n	1540 <setOverloadPer+0x48>
	}
	return false;
    153e:	2300      	movs	r3, #0
}
    1540:	0018      	movs	r0, r3
    1542:	46bd      	mov	sp, r7
    1544:	b002      	add	sp, #8
    1546:	bd80      	pop	{r7, pc}
    1548:	2000064c 	.word	0x2000064c
    154c:	20000574 	.word	0x20000574
    1550:	00017881 	.word	0x00017881
    1554:	00012549 	.word	0x00012549
    1558:	000126f1 	.word	0x000126f1
    155c:	000016b5 	.word	0x000016b5

00001560 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
    1560:	b580      	push	{r7, lr}
    1562:	b082      	sub	sp, #8
    1564:	af00      	add	r7, sp, #0
    1566:	0002      	movs	r2, r0
    1568:	1dfb      	adds	r3, r7, #7
    156a:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
    156c:	1dfb      	adds	r3, r7, #7
    156e:	781b      	ldrb	r3, [r3, #0]
    1570:	2b00      	cmp	r3, #0
    1572:	d01c      	beq.n	15ae <setUnderloadPer+0x4e>
    1574:	1dfb      	adds	r3, r7, #7
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	2b63      	cmp	r3, #99	; 0x63
    157a:	d818      	bhi.n	15ae <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
    157c:	4b0e      	ldr	r3, [pc, #56]	; (15b8 <setUnderloadPer+0x58>)
    157e:	1dfa      	adds	r2, r7, #7
    1580:	7812      	ldrb	r2, [r2, #0]
    1582:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1584:	490c      	ldr	r1, [pc, #48]	; (15b8 <setUnderloadPer+0x58>)
    1586:	4b0d      	ldr	r3, [pc, #52]	; (15bc <setUnderloadPer+0x5c>)
    1588:	2228      	movs	r2, #40	; 0x28
    158a:	0018      	movs	r0, r3
    158c:	4b0c      	ldr	r3, [pc, #48]	; (15c0 <setUnderloadPer+0x60>)
    158e:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1590:	4b0a      	ldr	r3, [pc, #40]	; (15bc <setUnderloadPer+0x5c>)
    1592:	0019      	movs	r1, r3
    1594:	201a      	movs	r0, #26
    1596:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <setUnderloadPer+0x64>)
    1598:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    159a:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <setUnderloadPer+0x68>)
    159c:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
    159e:	4b06      	ldr	r3, [pc, #24]	; (15b8 <setUnderloadPer+0x58>)
    15a0:	7bdb      	ldrb	r3, [r3, #15]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d001      	beq.n	15aa <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
    15a6:	4b09      	ldr	r3, [pc, #36]	; (15cc <setUnderloadPer+0x6c>)
    15a8:	4798      	blx	r3
		}
		return true;
    15aa:	2301      	movs	r3, #1
    15ac:	e000      	b.n	15b0 <setUnderloadPer+0x50>
	}
	return false;
    15ae:	2300      	movs	r3, #0
}
    15b0:	0018      	movs	r0, r3
    15b2:	46bd      	mov	sp, r7
    15b4:	b002      	add	sp, #8
    15b6:	bd80      	pop	{r7, pc}
    15b8:	2000064c 	.word	0x2000064c
    15bc:	20000574 	.word	0x20000574
    15c0:	00017881 	.word	0x00017881
    15c4:	00012549 	.word	0x00012549
    15c8:	000126f1 	.word	0x000126f1
    15cc:	000016b5 	.word	0x000016b5

000015d0 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b082      	sub	sp, #8
    15d4:	af00      	add	r7, sp, #0
    15d6:	0002      	movs	r2, r0
    15d8:	1dfb      	adds	r3, r7, #7
    15da:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
    15dc:	1dfb      	adds	r3, r7, #7
    15de:	7819      	ldrb	r1, [r3, #0]
    15e0:	4b09      	ldr	r3, [pc, #36]	; (1608 <saveSinglePhasingSettings+0x38>)
    15e2:	2220      	movs	r2, #32
    15e4:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    15e6:	4908      	ldr	r1, [pc, #32]	; (1608 <saveSinglePhasingSettings+0x38>)
    15e8:	4b08      	ldr	r3, [pc, #32]	; (160c <saveSinglePhasingSettings+0x3c>)
    15ea:	2228      	movs	r2, #40	; 0x28
    15ec:	0018      	movs	r0, r3
    15ee:	4b08      	ldr	r3, [pc, #32]	; (1610 <saveSinglePhasingSettings+0x40>)
    15f0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    15f2:	4b06      	ldr	r3, [pc, #24]	; (160c <saveSinglePhasingSettings+0x3c>)
    15f4:	0019      	movs	r1, r3
    15f6:	201a      	movs	r0, #26
    15f8:	4b06      	ldr	r3, [pc, #24]	; (1614 <saveSinglePhasingSettings+0x44>)
    15fa:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <saveSinglePhasingSettings+0x48>)
    15fe:	4798      	blx	r3
}
    1600:	46c0      	nop			; (mov r8, r8)
    1602:	46bd      	mov	sp, r7
    1604:	b002      	add	sp, #8
    1606:	bd80      	pop	{r7, pc}
    1608:	2000064c 	.word	0x2000064c
    160c:	20000574 	.word	0x20000574
    1610:	00017881 	.word	0x00017881
    1614:	00012549 	.word	0x00012549
    1618:	000126f1 	.word	0x000126f1

0000161c <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
    161c:	b580      	push	{r7, lr}
    161e:	b082      	sub	sp, #8
    1620:	af00      	add	r7, sp, #0
    1622:	0002      	movs	r2, r0
    1624:	1dbb      	adds	r3, r7, #6
    1626:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
    1628:	4b0a      	ldr	r3, [pc, #40]	; (1654 <saveSinglePhasingVoltage+0x38>)
    162a:	1dba      	adds	r2, r7, #6
    162c:	8812      	ldrh	r2, [r2, #0]
    162e:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1630:	4908      	ldr	r1, [pc, #32]	; (1654 <saveSinglePhasingVoltage+0x38>)
    1632:	4b09      	ldr	r3, [pc, #36]	; (1658 <saveSinglePhasingVoltage+0x3c>)
    1634:	2228      	movs	r2, #40	; 0x28
    1636:	0018      	movs	r0, r3
    1638:	4b08      	ldr	r3, [pc, #32]	; (165c <saveSinglePhasingVoltage+0x40>)
    163a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    163c:	4b06      	ldr	r3, [pc, #24]	; (1658 <saveSinglePhasingVoltage+0x3c>)
    163e:	0019      	movs	r1, r3
    1640:	201a      	movs	r0, #26
    1642:	4b07      	ldr	r3, [pc, #28]	; (1660 <saveSinglePhasingVoltage+0x44>)
    1644:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1646:	4b07      	ldr	r3, [pc, #28]	; (1664 <saveSinglePhasingVoltage+0x48>)
    1648:	4798      	blx	r3
}
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	46bd      	mov	sp, r7
    164e:	b002      	add	sp, #8
    1650:	bd80      	pop	{r7, pc}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	2000064c 	.word	0x2000064c
    1658:	20000574 	.word	0x20000574
    165c:	00017881 	.word	0x00017881
    1660:	00012549 	.word	0x00012549
    1664:	000126f1 	.word	0x000126f1

00001668 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
    1668:	b580      	push	{r7, lr}
    166a:	b082      	sub	sp, #8
    166c:	af00      	add	r7, sp, #0
    166e:	0002      	movs	r2, r0
    1670:	1dfb      	adds	r3, r7, #7
    1672:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
    1674:	1dfb      	adds	r3, r7, #7
    1676:	7819      	ldrb	r1, [r3, #0]
    1678:	4b09      	ldr	r3, [pc, #36]	; (16a0 <savePhaseSequenceProtectionSettings+0x38>)
    167a:	2224      	movs	r2, #36	; 0x24
    167c:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    167e:	4908      	ldr	r1, [pc, #32]	; (16a0 <savePhaseSequenceProtectionSettings+0x38>)
    1680:	4b08      	ldr	r3, [pc, #32]	; (16a4 <savePhaseSequenceProtectionSettings+0x3c>)
    1682:	2228      	movs	r2, #40	; 0x28
    1684:	0018      	movs	r0, r3
    1686:	4b08      	ldr	r3, [pc, #32]	; (16a8 <savePhaseSequenceProtectionSettings+0x40>)
    1688:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    168a:	4b06      	ldr	r3, [pc, #24]	; (16a4 <savePhaseSequenceProtectionSettings+0x3c>)
    168c:	0019      	movs	r1, r3
    168e:	201a      	movs	r0, #26
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <savePhaseSequenceProtectionSettings+0x44>)
    1692:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1694:	4b06      	ldr	r3, [pc, #24]	; (16b0 <savePhaseSequenceProtectionSettings+0x48>)
    1696:	4798      	blx	r3
}
    1698:	46c0      	nop			; (mov r8, r8)
    169a:	46bd      	mov	sp, r7
    169c:	b002      	add	sp, #8
    169e:	bd80      	pop	{r7, pc}
    16a0:	2000064c 	.word	0x2000064c
    16a4:	20000574 	.word	0x20000574
    16a8:	00017881 	.word	0x00017881
    16ac:	00012549 	.word	0x00012549
    16b0:	000126f1 	.word	0x000126f1

000016b4 <calcCurrentValues>:


void calcCurrentValues(void)
{
    16b4:	b590      	push	{r4, r7, lr}
    16b6:	b083      	sub	sp, #12
    16b8:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
    16ba:	4b2b      	ldr	r3, [pc, #172]	; (1768 <calcCurrentValues+0xb4>)
    16bc:	691a      	ldr	r2, [r3, #16]
    16be:	4b2b      	ldr	r3, [pc, #172]	; (176c <calcCurrentValues+0xb8>)
    16c0:	0010      	movs	r0, r2
    16c2:	4798      	blx	r3
    16c4:	1c04      	adds	r4, r0, #0
    16c6:	4b28      	ldr	r3, [pc, #160]	; (1768 <calcCurrentValues+0xb4>)
    16c8:	7f1a      	ldrb	r2, [r3, #28]
    16ca:	4b28      	ldr	r3, [pc, #160]	; (176c <calcCurrentValues+0xb8>)
    16cc:	0010      	movs	r0, r2
    16ce:	4798      	blx	r3
    16d0:	1c02      	adds	r2, r0, #0
    16d2:	4b27      	ldr	r3, [pc, #156]	; (1770 <calcCurrentValues+0xbc>)
    16d4:	1c11      	adds	r1, r2, #0
    16d6:	1c20      	adds	r0, r4, #0
    16d8:	4798      	blx	r3
    16da:	1c03      	adds	r3, r0, #0
    16dc:	1c1a      	adds	r2, r3, #0
    16de:	4b25      	ldr	r3, [pc, #148]	; (1774 <calcCurrentValues+0xc0>)
    16e0:	1c10      	adds	r0, r2, #0
    16e2:	4798      	blx	r3
    16e4:	4c24      	ldr	r4, [pc, #144]	; (1778 <calcCurrentValues+0xc4>)
    16e6:	2200      	movs	r2, #0
    16e8:	4b24      	ldr	r3, [pc, #144]	; (177c <calcCurrentValues+0xc8>)
    16ea:	47a0      	blx	r4
    16ec:	0003      	movs	r3, r0
    16ee:	000c      	movs	r4, r1
    16f0:	0019      	movs	r1, r3
    16f2:	0022      	movs	r2, r4
    16f4:	1dbc      	adds	r4, r7, #6
    16f6:	4b22      	ldr	r3, [pc, #136]	; (1780 <calcCurrentValues+0xcc>)
    16f8:	0008      	movs	r0, r1
    16fa:	0011      	movs	r1, r2
    16fc:	4798      	blx	r3
    16fe:	0003      	movs	r3, r0
    1700:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
    1702:	1dbb      	adds	r3, r7, #6
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	0018      	movs	r0, r3
    1708:	4b1e      	ldr	r3, [pc, #120]	; (1784 <calcCurrentValues+0xd0>)
    170a:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
    170c:	4b16      	ldr	r3, [pc, #88]	; (1768 <calcCurrentValues+0xb4>)
    170e:	691a      	ldr	r2, [r3, #16]
    1710:	4b16      	ldr	r3, [pc, #88]	; (176c <calcCurrentValues+0xb8>)
    1712:	0010      	movs	r0, r2
    1714:	4798      	blx	r3
    1716:	1c04      	adds	r4, r0, #0
    1718:	4b13      	ldr	r3, [pc, #76]	; (1768 <calcCurrentValues+0xb4>)
    171a:	7f5a      	ldrb	r2, [r3, #29]
    171c:	4b13      	ldr	r3, [pc, #76]	; (176c <calcCurrentValues+0xb8>)
    171e:	0010      	movs	r0, r2
    1720:	4798      	blx	r3
    1722:	1c02      	adds	r2, r0, #0
    1724:	4b12      	ldr	r3, [pc, #72]	; (1770 <calcCurrentValues+0xbc>)
    1726:	1c11      	adds	r1, r2, #0
    1728:	1c20      	adds	r0, r4, #0
    172a:	4798      	blx	r3
    172c:	1c03      	adds	r3, r0, #0
    172e:	1c1a      	adds	r2, r3, #0
    1730:	4b10      	ldr	r3, [pc, #64]	; (1774 <calcCurrentValues+0xc0>)
    1732:	1c10      	adds	r0, r2, #0
    1734:	4798      	blx	r3
    1736:	4c10      	ldr	r4, [pc, #64]	; (1778 <calcCurrentValues+0xc4>)
    1738:	2200      	movs	r2, #0
    173a:	4b10      	ldr	r3, [pc, #64]	; (177c <calcCurrentValues+0xc8>)
    173c:	47a0      	blx	r4
    173e:	0003      	movs	r3, r0
    1740:	000c      	movs	r4, r1
    1742:	0019      	movs	r1, r3
    1744:	0022      	movs	r2, r4
    1746:	1dbc      	adds	r4, r7, #6
    1748:	4b0d      	ldr	r3, [pc, #52]	; (1780 <calcCurrentValues+0xcc>)
    174a:	0008      	movs	r0, r1
    174c:	0011      	movs	r1, r2
    174e:	4798      	blx	r3
    1750:	0003      	movs	r3, r0
    1752:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
    1754:	1dbb      	adds	r3, r7, #6
    1756:	881b      	ldrh	r3, [r3, #0]
    1758:	0018      	movs	r0, r3
    175a:	4b0b      	ldr	r3, [pc, #44]	; (1788 <calcCurrentValues+0xd4>)
    175c:	4798      	blx	r3
}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	46bd      	mov	sp, r7
    1762:	b003      	add	sp, #12
    1764:	bd90      	pop	{r4, r7, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	2000064c 	.word	0x2000064c
    176c:	00015ac9 	.word	0x00015ac9
    1770:	00015889 	.word	0x00015889
    1774:	000176a5 	.word	0x000176a5
    1778:	00016175 	.word	0x00016175
    177c:	40590000 	.word	0x40590000
    1780:	0001543d 	.word	0x0001543d
    1784:	0000178d 	.word	0x0000178d
    1788:	000017d1 	.word	0x000017d1

0000178c <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
    1794:	4b09      	ldr	r3, [pc, #36]	; (17bc <setUnderloadValue+0x30>)
    1796:	687a      	ldr	r2, [r7, #4]
    1798:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    179a:	4908      	ldr	r1, [pc, #32]	; (17bc <setUnderloadValue+0x30>)
    179c:	4b08      	ldr	r3, [pc, #32]	; (17c0 <setUnderloadValue+0x34>)
    179e:	2228      	movs	r2, #40	; 0x28
    17a0:	0018      	movs	r0, r3
    17a2:	4b08      	ldr	r3, [pc, #32]	; (17c4 <setUnderloadValue+0x38>)
    17a4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    17a6:	4b06      	ldr	r3, [pc, #24]	; (17c0 <setUnderloadValue+0x34>)
    17a8:	0019      	movs	r1, r3
    17aa:	201a      	movs	r0, #26
    17ac:	4b06      	ldr	r3, [pc, #24]	; (17c8 <setUnderloadValue+0x3c>)
    17ae:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    17b0:	4b06      	ldr	r3, [pc, #24]	; (17cc <setUnderloadValue+0x40>)
    17b2:	4798      	blx	r3
}
    17b4:	46c0      	nop			; (mov r8, r8)
    17b6:	46bd      	mov	sp, r7
    17b8:	b002      	add	sp, #8
    17ba:	bd80      	pop	{r7, pc}
    17bc:	2000064c 	.word	0x2000064c
    17c0:	20000574 	.word	0x20000574
    17c4:	00017881 	.word	0x00017881
    17c8:	00012549 	.word	0x00012549
    17cc:	000126f1 	.word	0x000126f1

000017d0 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b082      	sub	sp, #8
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
    17d8:	4b09      	ldr	r3, [pc, #36]	; (1800 <setOverloadValue+0x30>)
    17da:	687a      	ldr	r2, [r7, #4]
    17dc:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    17de:	4908      	ldr	r1, [pc, #32]	; (1800 <setOverloadValue+0x30>)
    17e0:	4b08      	ldr	r3, [pc, #32]	; (1804 <setOverloadValue+0x34>)
    17e2:	2228      	movs	r2, #40	; 0x28
    17e4:	0018      	movs	r0, r3
    17e6:	4b08      	ldr	r3, [pc, #32]	; (1808 <setOverloadValue+0x38>)
    17e8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    17ea:	4b06      	ldr	r3, [pc, #24]	; (1804 <setOverloadValue+0x34>)
    17ec:	0019      	movs	r1, r3
    17ee:	201a      	movs	r0, #26
    17f0:	4b06      	ldr	r3, [pc, #24]	; (180c <setOverloadValue+0x3c>)
    17f2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    17f4:	4b06      	ldr	r3, [pc, #24]	; (1810 <setOverloadValue+0x40>)
    17f6:	4798      	blx	r3
}
    17f8:	46c0      	nop			; (mov r8, r8)
    17fa:	46bd      	mov	sp, r7
    17fc:	b002      	add	sp, #8
    17fe:	bd80      	pop	{r7, pc}
    1800:	2000064c 	.word	0x2000064c
    1804:	20000574 	.word	0x20000574
    1808:	00017881 	.word	0x00017881
    180c:	00012549 	.word	0x00012549
    1810:	000126f1 	.word	0x000126f1

00001814 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
    1814:	b580      	push	{r7, lr}
    1816:	b082      	sub	sp, #8
    1818:	af00      	add	r7, sp, #0
    181a:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
    181c:	4b09      	ldr	r3, [pc, #36]	; (1844 <setNormalLoadValue+0x30>)
    181e:	687a      	ldr	r2, [r7, #4]
    1820:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1822:	4908      	ldr	r1, [pc, #32]	; (1844 <setNormalLoadValue+0x30>)
    1824:	4b08      	ldr	r3, [pc, #32]	; (1848 <setNormalLoadValue+0x34>)
    1826:	2228      	movs	r2, #40	; 0x28
    1828:	0018      	movs	r0, r3
    182a:	4b08      	ldr	r3, [pc, #32]	; (184c <setNormalLoadValue+0x38>)
    182c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    182e:	4b06      	ldr	r3, [pc, #24]	; (1848 <setNormalLoadValue+0x34>)
    1830:	0019      	movs	r1, r3
    1832:	201a      	movs	r0, #26
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <setNormalLoadValue+0x3c>)
    1836:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1838:	4b06      	ldr	r3, [pc, #24]	; (1854 <setNormalLoadValue+0x40>)
    183a:	4798      	blx	r3
}
    183c:	46c0      	nop			; (mov r8, r8)
    183e:	46bd      	mov	sp, r7
    1840:	b002      	add	sp, #8
    1842:	bd80      	pop	{r7, pc}
    1844:	2000064c 	.word	0x2000064c
    1848:	20000574 	.word	0x20000574
    184c:	00017881 	.word	0x00017881
    1850:	00012549 	.word	0x00012549
    1854:	000126f1 	.word	0x000126f1

00001858 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
    1858:	b580      	push	{r7, lr}
    185a:	b082      	sub	sp, #8
    185c:	af00      	add	r7, sp, #0
    185e:	0002      	movs	r2, r0
    1860:	1dfb      	adds	r3, r7, #7
    1862:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
    1864:	1dfb      	adds	r3, r7, #7
    1866:	781a      	ldrb	r2, [r3, #0]
    1868:	4b09      	ldr	r3, [pc, #36]	; (1890 <setCurrentDetection+0x38>)
    186a:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    186c:	4908      	ldr	r1, [pc, #32]	; (1890 <setCurrentDetection+0x38>)
    186e:	4b09      	ldr	r3, [pc, #36]	; (1894 <setCurrentDetection+0x3c>)
    1870:	2228      	movs	r2, #40	; 0x28
    1872:	0018      	movs	r0, r3
    1874:	4b08      	ldr	r3, [pc, #32]	; (1898 <setCurrentDetection+0x40>)
    1876:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <setCurrentDetection+0x3c>)
    187a:	0019      	movs	r1, r3
    187c:	201a      	movs	r0, #26
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <setCurrentDetection+0x44>)
    1880:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1882:	4b07      	ldr	r3, [pc, #28]	; (18a0 <setCurrentDetection+0x48>)
    1884:	4798      	blx	r3
}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	46bd      	mov	sp, r7
    188a:	b002      	add	sp, #8
    188c:	bd80      	pop	{r7, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	2000064c 	.word	0x2000064c
    1894:	20000574 	.word	0x20000574
    1898:	00017881 	.word	0x00017881
    189c:	00012549 	.word	0x00012549
    18a0:	000126f1 	.word	0x000126f1

000018a4 <saveStarDeltaTimer>:
	strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	b082      	sub	sp, #8
    18a8:	af00      	add	r7, sp, #0
    18aa:	0002      	movs	r2, r0
    18ac:	1dbb      	adds	r3, r7, #6
    18ae:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
    18b0:	4b0a      	ldr	r3, [pc, #40]	; (18dc <saveStarDeltaTimer+0x38>)
    18b2:	1dba      	adds	r2, r7, #6
    18b4:	8812      	ldrh	r2, [r2, #0]
    18b6:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    18b8:	4908      	ldr	r1, [pc, #32]	; (18dc <saveStarDeltaTimer+0x38>)
    18ba:	4b09      	ldr	r3, [pc, #36]	; (18e0 <saveStarDeltaTimer+0x3c>)
    18bc:	2228      	movs	r2, #40	; 0x28
    18be:	0018      	movs	r0, r3
    18c0:	4b08      	ldr	r3, [pc, #32]	; (18e4 <saveStarDeltaTimer+0x40>)
    18c2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    18c4:	4b06      	ldr	r3, [pc, #24]	; (18e0 <saveStarDeltaTimer+0x3c>)
    18c6:	0019      	movs	r1, r3
    18c8:	201a      	movs	r0, #26
    18ca:	4b07      	ldr	r3, [pc, #28]	; (18e8 <saveStarDeltaTimer+0x44>)
    18cc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    18ce:	4b07      	ldr	r3, [pc, #28]	; (18ec <saveStarDeltaTimer+0x48>)
    18d0:	4798      	blx	r3
}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	46bd      	mov	sp, r7
    18d6:	b002      	add	sp, #8
    18d8:	bd80      	pop	{r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	2000064c 	.word	0x2000064c
    18e0:	20000574 	.word	0x20000574
    18e4:	00017881 	.word	0x00017881
    18e8:	00012549 	.word	0x00012549
    18ec:	000126f1 	.word	0x000126f1

000018f0 <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	b082      	sub	sp, #8
    18f4:	af00      	add	r7, sp, #0
    18f6:	0002      	movs	r2, r0
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <saveEventStageSettings+0x38>)
    18fe:	1dfa      	adds	r2, r7, #7
    1900:	7812      	ldrb	r2, [r2, #0]
    1902:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1904:	4908      	ldr	r1, [pc, #32]	; (1928 <saveEventStageSettings+0x38>)
    1906:	4b09      	ldr	r3, [pc, #36]	; (192c <saveEventStageSettings+0x3c>)
    1908:	2228      	movs	r2, #40	; 0x28
    190a:	0018      	movs	r0, r3
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <saveEventStageSettings+0x40>)
    190e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1910:	4b06      	ldr	r3, [pc, #24]	; (192c <saveEventStageSettings+0x3c>)
    1912:	0019      	movs	r1, r3
    1914:	201a      	movs	r0, #26
    1916:	4b07      	ldr	r3, [pc, #28]	; (1934 <saveEventStageSettings+0x44>)
    1918:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <saveEventStageSettings+0x48>)
    191c:	4798      	blx	r3
}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	46bd      	mov	sp, r7
    1922:	b002      	add	sp, #8
    1924:	bd80      	pop	{r7, pc}
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	2000064c 	.word	0x2000064c
    192c:	20000574 	.word	0x20000574
    1930:	00017881 	.word	0x00017881
    1934:	00012549 	.word	0x00012549
    1938:	000126f1 	.word	0x000126f1

0000193c <isAdmin>:

bool isAdmin(char *number)
{
    193c:	b580      	push	{r7, lr}
    193e:	b08a      	sub	sp, #40	; 0x28
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
    1944:	2327      	movs	r3, #39	; 0x27
    1946:	18fb      	adds	r3, r7, r3
    1948:	2200      	movs	r2, #0
    194a:	701a      	strb	r2, [r3, #0]
    194c:	e02b      	b.n	19a6 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
    194e:	4b1b      	ldr	r3, [pc, #108]	; (19bc <isAdmin+0x80>)
    1950:	223c      	movs	r2, #60	; 0x3c
    1952:	2100      	movs	r1, #0
    1954:	0018      	movs	r0, r3
    1956:	4b1a      	ldr	r3, [pc, #104]	; (19c0 <isAdmin+0x84>)
    1958:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
    195a:	2327      	movs	r3, #39	; 0x27
    195c:	18fb      	adds	r3, r7, r3
    195e:	781b      	ldrb	r3, [r3, #0]
    1960:	3303      	adds	r3, #3
    1962:	b2db      	uxtb	r3, r3
    1964:	4a15      	ldr	r2, [pc, #84]	; (19bc <isAdmin+0x80>)
    1966:	0011      	movs	r1, r2
    1968:	0018      	movs	r0, r3
    196a:	4b16      	ldr	r3, [pc, #88]	; (19c4 <isAdmin+0x88>)
    196c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
    196e:	230c      	movs	r3, #12
    1970:	18fa      	adds	r2, r7, r3
    1972:	4b12      	ldr	r3, [pc, #72]	; (19bc <isAdmin+0x80>)
    1974:	0010      	movs	r0, r2
    1976:	0019      	movs	r1, r3
    1978:	2318      	movs	r3, #24
    197a:	001a      	movs	r2, r3
    197c:	4b12      	ldr	r3, [pc, #72]	; (19c8 <isAdmin+0x8c>)
    197e:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
    1980:	230c      	movs	r3, #12
    1982:	18fb      	adds	r3, r7, r3
    1984:	1d1a      	adds	r2, r3, #4
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	0011      	movs	r1, r2
    198a:	0018      	movs	r0, r3
    198c:	4b0f      	ldr	r3, [pc, #60]	; (19cc <isAdmin+0x90>)
    198e:	4798      	blx	r3
    1990:	1e03      	subs	r3, r0, #0
    1992:	d001      	beq.n	1998 <isAdmin+0x5c>
		{
			return true;
    1994:	2301      	movs	r3, #1
    1996:	e00c      	b.n	19b2 <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
    1998:	2327      	movs	r3, #39	; 0x27
    199a:	18fb      	adds	r3, r7, r3
    199c:	781a      	ldrb	r2, [r3, #0]
    199e:	2327      	movs	r3, #39	; 0x27
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	3201      	adds	r2, #1
    19a4:	701a      	strb	r2, [r3, #0]
    19a6:	2327      	movs	r3, #39	; 0x27
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2b04      	cmp	r3, #4
    19ae:	d9ce      	bls.n	194e <isAdmin+0x12>
		}
	}
	return false;
    19b0:	2300      	movs	r3, #0
}
    19b2:	0018      	movs	r0, r3
    19b4:	46bd      	mov	sp, r7
    19b6:	b00a      	add	sp, #40	; 0x28
    19b8:	bd80      	pop	{r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000574 	.word	0x20000574
    19c0:	000178b7 	.word	0x000178b7
    19c4:	00012655 	.word	0x00012655
    19c8:	00017881 	.word	0x00017881
    19cc:	00017b77 	.word	0x00017b77

000019d0 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	0002      	movs	r2, r0
    19d8:	1dfb      	adds	r3, r7, #7
    19da:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
    19dc:	4b0b      	ldr	r3, [pc, #44]	; (1a0c <setPrimaryNumberIndex+0x3c>)
    19de:	1dfa      	adds	r2, r7, #7
    19e0:	7812      	ldrb	r2, [r2, #0]
    19e2:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    19e4:	4a0a      	ldr	r2, [pc, #40]	; (1a10 <setPrimaryNumberIndex+0x40>)
    19e6:	4b09      	ldr	r3, [pc, #36]	; (1a0c <setPrimaryNumberIndex+0x3c>)
    19e8:	0010      	movs	r0, r2
    19ea:	0019      	movs	r1, r3
    19ec:	2308      	movs	r3, #8
    19ee:	001a      	movs	r2, r3
    19f0:	4b08      	ldr	r3, [pc, #32]	; (1a14 <setPrimaryNumberIndex+0x44>)
    19f2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    19f4:	4b06      	ldr	r3, [pc, #24]	; (1a10 <setPrimaryNumberIndex+0x40>)
    19f6:	0019      	movs	r1, r3
    19f8:	2008      	movs	r0, #8
    19fa:	4b07      	ldr	r3, [pc, #28]	; (1a18 <setPrimaryNumberIndex+0x48>)
    19fc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <setPrimaryNumberIndex+0x4c>)
    1a00:	4798      	blx	r3

}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	46bd      	mov	sp, r7
    1a06:	b002      	add	sp, #8
    1a08:	bd80      	pop	{r7, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	20000600 	.word	0x20000600
    1a10:	20000574 	.word	0x20000574
    1a14:	00017881 	.word	0x00017881
    1a18:	00012549 	.word	0x00012549
    1a1c:	000126f1 	.word	0x000126f1

00001a20 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	0002      	movs	r2, r0
    1a28:	1dfb      	adds	r3, r7, #7
    1a2a:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
    1a2c:	4b0b      	ldr	r3, [pc, #44]	; (1a5c <setSecondaryNumberIndex+0x3c>)
    1a2e:	1dfa      	adds	r2, r7, #7
    1a30:	7812      	ldrb	r2, [r2, #0]
    1a32:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a34:	4a0a      	ldr	r2, [pc, #40]	; (1a60 <setSecondaryNumberIndex+0x40>)
    1a36:	4b09      	ldr	r3, [pc, #36]	; (1a5c <setSecondaryNumberIndex+0x3c>)
    1a38:	0010      	movs	r0, r2
    1a3a:	0019      	movs	r1, r3
    1a3c:	2308      	movs	r3, #8
    1a3e:	001a      	movs	r2, r3
    1a40:	4b08      	ldr	r3, [pc, #32]	; (1a64 <setSecondaryNumberIndex+0x44>)
    1a42:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a44:	4b06      	ldr	r3, [pc, #24]	; (1a60 <setSecondaryNumberIndex+0x40>)
    1a46:	0019      	movs	r1, r3
    1a48:	2008      	movs	r0, #8
    1a4a:	4b07      	ldr	r3, [pc, #28]	; (1a68 <setSecondaryNumberIndex+0x48>)
    1a4c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1a4e:	4b07      	ldr	r3, [pc, #28]	; (1a6c <setSecondaryNumberIndex+0x4c>)
    1a50:	4798      	blx	r3
}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	46bd      	mov	sp, r7
    1a56:	b002      	add	sp, #8
    1a58:	bd80      	pop	{r7, pc}
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	20000600 	.word	0x20000600
    1a60:	20000574 	.word	0x20000574
    1a64:	00017881 	.word	0x00017881
    1a68:	00012549 	.word	0x00012549
    1a6c:	000126f1 	.word	0x000126f1

00001a70 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
    1a70:	b590      	push	{r4, r7, lr}
    1a72:	b085      	sub	sp, #20
    1a74:	af00      	add	r7, sp, #0
    1a76:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1a78:	230e      	movs	r3, #14
    1a7a:	18fc      	adds	r4, r7, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	0018      	movs	r0, r3
    1a80:	4b21      	ldr	r3, [pc, #132]	; (1b08 <addPrimaryIndexedNumber+0x98>)
    1a82:	4798      	blx	r3
    1a84:	0003      	movs	r3, r0
    1a86:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
    1a88:	230f      	movs	r3, #15
    1a8a:	18fb      	adds	r3, r7, r3
    1a8c:	22ff      	movs	r2, #255	; 0xff
    1a8e:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
    1a90:	4b1e      	ldr	r3, [pc, #120]	; (1b0c <addPrimaryIndexedNumber+0x9c>)
    1a92:	785b      	ldrb	r3, [r3, #1]
    1a94:	220e      	movs	r2, #14
    1a96:	18ba      	adds	r2, r7, r2
    1a98:	7812      	ldrb	r2, [r2, #0]
    1a9a:	429a      	cmp	r2, r3
    1a9c:	d309      	bcc.n	1ab2 <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
    1a9e:	230f      	movs	r3, #15
    1aa0:	18fb      	adds	r3, r7, r3
    1aa2:	4a1a      	ldr	r2, [pc, #104]	; (1b0c <addPrimaryIndexedNumber+0x9c>)
    1aa4:	7892      	ldrb	r2, [r2, #2]
    1aa6:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	0018      	movs	r0, r3
    1aac:	4b18      	ldr	r3, [pc, #96]	; (1b10 <addPrimaryIndexedNumber+0xa0>)
    1aae:	4798      	blx	r3
    1ab0:	e00c      	b.n	1acc <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
    1ab2:	4b16      	ldr	r3, [pc, #88]	; (1b0c <addPrimaryIndexedNumber+0x9c>)
    1ab4:	785b      	ldrb	r3, [r3, #1]
    1ab6:	220e      	movs	r2, #14
    1ab8:	18ba      	adds	r2, r7, r2
    1aba:	7812      	ldrb	r2, [r2, #0]
    1abc:	429a      	cmp	r2, r3
    1abe:	d205      	bcs.n	1acc <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
    1ac0:	230f      	movs	r3, #15
    1ac2:	18fb      	adds	r3, r7, r3
    1ac4:	220e      	movs	r2, #14
    1ac6:	18ba      	adds	r2, r7, r2
    1ac8:	7812      	ldrb	r2, [r2, #0]
    1aca:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
    1acc:	4b0f      	ldr	r3, [pc, #60]	; (1b0c <addPrimaryIndexedNumber+0x9c>)
    1ace:	785b      	ldrb	r3, [r3, #1]
    1ad0:	220f      	movs	r2, #15
    1ad2:	18ba      	adds	r2, r7, r2
    1ad4:	7812      	ldrb	r2, [r2, #0]
    1ad6:	429a      	cmp	r2, r3
    1ad8:	d210      	bcs.n	1afc <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
    1ada:	4b0c      	ldr	r3, [pc, #48]	; (1b0c <addPrimaryIndexedNumber+0x9c>)
    1adc:	789b      	ldrb	r3, [r3, #2]
    1ade:	2b01      	cmp	r3, #1
    1ae0:	d904      	bls.n	1aec <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
    1ae2:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <addPrimaryIndexedNumber+0x9c>)
    1ae4:	78db      	ldrb	r3, [r3, #3]
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <addPrimaryIndexedNumber+0xa4>)
    1aea:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
    1aec:	230f      	movs	r3, #15
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	0018      	movs	r0, r3
    1af4:	4b08      	ldr	r3, [pc, #32]	; (1b18 <addPrimaryIndexedNumber+0xa8>)
    1af6:	4798      	blx	r3
		return true;
    1af8:	2301      	movs	r3, #1
    1afa:	e000      	b.n	1afe <addPrimaryIndexedNumber+0x8e>
	}

	return false;
    1afc:	2300      	movs	r3, #0
}
    1afe:	0018      	movs	r0, r3
    1b00:	46bd      	mov	sp, r7
    1b02:	b005      	add	sp, #20
    1b04:	bd90      	pop	{r4, r7, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00000de5 	.word	0x00000de5
    1b0c:	20000600 	.word	0x20000600
    1b10:	00000ee9 	.word	0x00000ee9
    1b14:	00001a21 	.word	0x00001a21
    1b18:	000019d1 	.word	0x000019d1

00001b1c <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
    1b1c:	b590      	push	{r4, r7, lr}
    1b1e:	b085      	sub	sp, #20
    1b20:	af00      	add	r7, sp, #0
    1b22:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
    1b24:	4b21      	ldr	r3, [pc, #132]	; (1bac <addSecondaryIndexedNumber+0x90>)
    1b26:	789b      	ldrb	r3, [r3, #2]
    1b28:	2b01      	cmp	r3, #1
    1b2a:	d801      	bhi.n	1b30 <addSecondaryIndexedNumber+0x14>
	return false;
    1b2c:	2300      	movs	r3, #0
    1b2e:	e039      	b.n	1ba4 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1b30:	230e      	movs	r3, #14
    1b32:	18fc      	adds	r4, r7, r3
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	0018      	movs	r0, r3
    1b38:	4b1d      	ldr	r3, [pc, #116]	; (1bb0 <addSecondaryIndexedNumber+0x94>)
    1b3a:	4798      	blx	r3
    1b3c:	0003      	movs	r3, r0
    1b3e:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
    1b40:	230f      	movs	r3, #15
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	22ff      	movs	r2, #255	; 0xff
    1b46:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
    1b48:	4b18      	ldr	r3, [pc, #96]	; (1bac <addSecondaryIndexedNumber+0x90>)
    1b4a:	785b      	ldrb	r3, [r3, #1]
    1b4c:	220e      	movs	r2, #14
    1b4e:	18ba      	adds	r2, r7, r2
    1b50:	7812      	ldrb	r2, [r2, #0]
    1b52:	429a      	cmp	r2, r3
    1b54:	d309      	bcc.n	1b6a <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
    1b56:	230f      	movs	r3, #15
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	4a14      	ldr	r2, [pc, #80]	; (1bac <addSecondaryIndexedNumber+0x90>)
    1b5c:	7892      	ldrb	r2, [r2, #2]
    1b5e:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	0018      	movs	r0, r3
    1b64:	4b13      	ldr	r3, [pc, #76]	; (1bb4 <addSecondaryIndexedNumber+0x98>)
    1b66:	4798      	blx	r3
    1b68:	e00c      	b.n	1b84 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
    1b6a:	4b10      	ldr	r3, [pc, #64]	; (1bac <addSecondaryIndexedNumber+0x90>)
    1b6c:	785b      	ldrb	r3, [r3, #1]
    1b6e:	220e      	movs	r2, #14
    1b70:	18ba      	adds	r2, r7, r2
    1b72:	7812      	ldrb	r2, [r2, #0]
    1b74:	429a      	cmp	r2, r3
    1b76:	d205      	bcs.n	1b84 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
    1b78:	230f      	movs	r3, #15
    1b7a:	18fb      	adds	r3, r7, r3
    1b7c:	220e      	movs	r2, #14
    1b7e:	18ba      	adds	r2, r7, r2
    1b80:	7812      	ldrb	r2, [r2, #0]
    1b82:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
    1b84:	4b09      	ldr	r3, [pc, #36]	; (1bac <addSecondaryIndexedNumber+0x90>)
    1b86:	785b      	ldrb	r3, [r3, #1]
    1b88:	220f      	movs	r2, #15
    1b8a:	18ba      	adds	r2, r7, r2
    1b8c:	7812      	ldrb	r2, [r2, #0]
    1b8e:	429a      	cmp	r2, r3
    1b90:	d207      	bcs.n	1ba2 <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
    1b92:	230f      	movs	r3, #15
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	0018      	movs	r0, r3
    1b9a:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <addSecondaryIndexedNumber+0x9c>)
    1b9c:	4798      	blx	r3
		return true;
    1b9e:	2301      	movs	r3, #1
    1ba0:	e000      	b.n	1ba4 <addSecondaryIndexedNumber+0x88>
	}
	return false;
    1ba2:	2300      	movs	r3, #0
}
    1ba4:	0018      	movs	r0, r3
    1ba6:	46bd      	mov	sp, r7
    1ba8:	b005      	add	sp, #20
    1baa:	bd90      	pop	{r4, r7, pc}
    1bac:	20000600 	.word	0x20000600
    1bb0:	00000de5 	.word	0x00000de5
    1bb4:	00000ee9 	.word	0x00000ee9
    1bb8:	00001a21 	.word	0x00001a21

00001bbc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1bbc:	b580      	push	{r7, lr}
    1bbe:	b082      	sub	sp, #8
    1bc0:	af00      	add	r7, sp, #0
    1bc2:	0002      	movs	r2, r0
    1bc4:	1dfb      	adds	r3, r7, #7
    1bc6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bc8:	4b06      	ldr	r3, [pc, #24]	; (1be4 <system_interrupt_enable+0x28>)
    1bca:	1dfa      	adds	r2, r7, #7
    1bcc:	7812      	ldrb	r2, [r2, #0]
    1bce:	0011      	movs	r1, r2
    1bd0:	221f      	movs	r2, #31
    1bd2:	400a      	ands	r2, r1
    1bd4:	2101      	movs	r1, #1
    1bd6:	4091      	lsls	r1, r2
    1bd8:	000a      	movs	r2, r1
    1bda:	601a      	str	r2, [r3, #0]
}
    1bdc:	46c0      	nop			; (mov r8, r8)
    1bde:	46bd      	mov	sp, r7
    1be0:	b002      	add	sp, #8
    1be2:	bd80      	pop	{r7, pc}
    1be4:	e000e100 	.word	0xe000e100

00001be8 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b082      	sub	sp, #8
    1bec:	af00      	add	r7, sp, #0
    1bee:	0002      	movs	r2, r0
    1bf0:	1dfb      	adds	r3, r7, #7
    1bf2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bf4:	4a07      	ldr	r2, [pc, #28]	; (1c14 <system_interrupt_disable+0x2c>)
    1bf6:	1dfb      	adds	r3, r7, #7
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	0019      	movs	r1, r3
    1bfc:	231f      	movs	r3, #31
    1bfe:	400b      	ands	r3, r1
    1c00:	2101      	movs	r1, #1
    1c02:	4099      	lsls	r1, r3
    1c04:	000b      	movs	r3, r1
    1c06:	0019      	movs	r1, r3
    1c08:	2380      	movs	r3, #128	; 0x80
    1c0a:	50d1      	str	r1, [r2, r3]
}
    1c0c:	46c0      	nop			; (mov r8, r8)
    1c0e:	46bd      	mov	sp, r7
    1c10:	b002      	add	sp, #8
    1c12:	bd80      	pop	{r7, pc}
    1c14:	e000e100 	.word	0xe000e100

00001c18 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b084      	sub	sp, #16
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	0002      	movs	r2, r0
    1c20:	1dfb      	adds	r3, r7, #7
    1c22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c24:	230f      	movs	r3, #15
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	1dfa      	adds	r2, r7, #7
    1c2a:	7812      	ldrb	r2, [r2, #0]
    1c2c:	09d2      	lsrs	r2, r2, #7
    1c2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c30:	230e      	movs	r3, #14
    1c32:	18fb      	adds	r3, r7, r3
    1c34:	1dfa      	adds	r2, r7, #7
    1c36:	7812      	ldrb	r2, [r2, #0]
    1c38:	0952      	lsrs	r2, r2, #5
    1c3a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c3c:	4b0d      	ldr	r3, [pc, #52]	; (1c74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c3e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1c40:	230f      	movs	r3, #15
    1c42:	18fb      	adds	r3, r7, r3
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d10f      	bne.n	1c6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c4a:	230f      	movs	r3, #15
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	781b      	ldrb	r3, [r3, #0]
    1c50:	009b      	lsls	r3, r3, #2
    1c52:	2210      	movs	r2, #16
    1c54:	4694      	mov	ip, r2
    1c56:	44bc      	add	ip, r7
    1c58:	4463      	add	r3, ip
    1c5a:	3b08      	subs	r3, #8
    1c5c:	681a      	ldr	r2, [r3, #0]
    1c5e:	230e      	movs	r3, #14
    1c60:	18fb      	adds	r3, r7, r3
    1c62:	781b      	ldrb	r3, [r3, #0]
    1c64:	01db      	lsls	r3, r3, #7
    1c66:	18d3      	adds	r3, r2, r3
    1c68:	e000      	b.n	1c6c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1c6a:	2300      	movs	r3, #0
	}
}
    1c6c:	0018      	movs	r0, r3
    1c6e:	46bd      	mov	sp, r7
    1c70:	b004      	add	sp, #16
    1c72:	bd80      	pop	{r7, pc}
    1c74:	41004400 	.word	0x41004400

00001c78 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b082      	sub	sp, #8
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	0002      	movs	r2, r0
    1c80:	1dfb      	adds	r3, r7, #7
    1c82:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1c84:	1dfb      	adds	r3, r7, #7
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	0018      	movs	r0, r3
    1c8a:	4b03      	ldr	r3, [pc, #12]	; (1c98 <port_get_group_from_gpio_pin+0x20>)
    1c8c:	4798      	blx	r3
    1c8e:	0003      	movs	r3, r0
}
    1c90:	0018      	movs	r0, r3
    1c92:	46bd      	mov	sp, r7
    1c94:	b002      	add	sp, #8
    1c96:	bd80      	pop	{r7, pc}
    1c98:	00001c19 	.word	0x00001c19

00001c9c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b082      	sub	sp, #8
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	2200      	movs	r2, #0
    1ca8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	2201      	movs	r2, #1
    1cae:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	2200      	movs	r2, #0
    1cb4:	709a      	strb	r2, [r3, #2]
}
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	46bd      	mov	sp, r7
    1cba:	b002      	add	sp, #8
    1cbc:	bd80      	pop	{r7, pc}
	...

00001cc0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	b084      	sub	sp, #16
    1cc4:	af00      	add	r7, sp, #0
    1cc6:	0002      	movs	r2, r0
    1cc8:	1dfb      	adds	r3, r7, #7
    1cca:	701a      	strb	r2, [r3, #0]
    1ccc:	1dbb      	adds	r3, r7, #6
    1cce:	1c0a      	adds	r2, r1, #0
    1cd0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1cd2:	1dfb      	adds	r3, r7, #7
    1cd4:	781b      	ldrb	r3, [r3, #0]
    1cd6:	0018      	movs	r0, r3
    1cd8:	4b0d      	ldr	r3, [pc, #52]	; (1d10 <port_pin_set_output_level+0x50>)
    1cda:	4798      	blx	r3
    1cdc:	0003      	movs	r3, r0
    1cde:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ce0:	1dfb      	adds	r3, r7, #7
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	221f      	movs	r2, #31
    1ce6:	4013      	ands	r3, r2
    1ce8:	2201      	movs	r2, #1
    1cea:	409a      	lsls	r2, r3
    1cec:	0013      	movs	r3, r2
    1cee:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1cf0:	1dbb      	adds	r3, r7, #6
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d003      	beq.n	1d00 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1cf8:	68fb      	ldr	r3, [r7, #12]
    1cfa:	68ba      	ldr	r2, [r7, #8]
    1cfc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1cfe:	e002      	b.n	1d06 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1d00:	68fb      	ldr	r3, [r7, #12]
    1d02:	68ba      	ldr	r2, [r7, #8]
    1d04:	615a      	str	r2, [r3, #20]
}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	46bd      	mov	sp, r7
    1d0a:	b004      	add	sp, #16
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00001c79 	.word	0x00001c79

00001d14 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b084      	sub	sp, #16
    1d18:	af00      	add	r7, sp, #0
    1d1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1d22:	68fb      	ldr	r3, [r7, #12]
    1d24:	69db      	ldr	r3, [r3, #28]
    1d26:	1e5a      	subs	r2, r3, #1
    1d28:	4193      	sbcs	r3, r2
    1d2a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1d2c:	0018      	movs	r0, r3
    1d2e:	46bd      	mov	sp, r7
    1d30:	b004      	add	sp, #16
    1d32:	bd80      	pop	{r7, pc}

00001d34 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1d34:	b580      	push	{r7, lr}
    1d36:	b082      	sub	sp, #8
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1d3c:	46c0      	nop			; (mov r8, r8)
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	0018      	movs	r0, r3
    1d42:	4b04      	ldr	r3, [pc, #16]	; (1d54 <_usart_wait_for_sync+0x20>)
    1d44:	4798      	blx	r3
    1d46:	1e03      	subs	r3, r0, #0
    1d48:	d1f9      	bne.n	1d3e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	46bd      	mov	sp, r7
    1d4e:	b002      	add	sp, #8
    1d50:	bd80      	pop	{r7, pc}
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	00001d15 	.word	0x00001d15

00001d58 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b082      	sub	sp, #8
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1d60:	687b      	ldr	r3, [r7, #4]
    1d62:	2280      	movs	r2, #128	; 0x80
    1d64:	05d2      	lsls	r2, r2, #23
    1d66:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	2200      	movs	r2, #0
    1d6c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	22ff      	movs	r2, #255	; 0xff
    1d72:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	2200      	movs	r2, #0
    1d78:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	2200      	movs	r2, #0
    1d7e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	2296      	movs	r2, #150	; 0x96
    1d84:	0192      	lsls	r2, r2, #6
    1d86:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1d88:	687b      	ldr	r3, [r7, #4]
    1d8a:	2224      	movs	r2, #36	; 0x24
    1d8c:	2101      	movs	r1, #1
    1d8e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	2225      	movs	r2, #37	; 0x25
    1d94:	2101      	movs	r1, #1
    1d96:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	2226      	movs	r2, #38	; 0x26
    1d9c:	2100      	movs	r1, #0
    1d9e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	2227      	movs	r2, #39	; 0x27
    1da4:	2100      	movs	r1, #0
    1da6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	2200      	movs	r2, #0
    1dac:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	2288      	movs	r2, #136	; 0x88
    1db2:	0352      	lsls	r2, r2, #13
    1db4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	222c      	movs	r2, #44	; 0x2c
    1dba:	2100      	movs	r1, #0
    1dbc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	222d      	movs	r2, #45	; 0x2d
    1dc2:	2100      	movs	r1, #0
    1dc4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	2200      	movs	r2, #0
    1dca:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	2200      	movs	r2, #0
    1dd0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	2200      	movs	r2, #0
    1dd6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	2200      	movs	r2, #0
    1ddc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	2200      	movs	r2, #0
    1de2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	2200      	movs	r2, #0
    1de8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	2200      	movs	r2, #0
    1dee:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	2200      	movs	r2, #0
    1df4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	2200      	movs	r2, #0
    1dfa:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	2200      	movs	r2, #0
    1e00:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	2213      	movs	r2, #19
    1e06:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	2200      	movs	r2, #0
    1e0c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	46bd      	mov	sp, r7
    1e12:	b002      	add	sp, #8
    1e14:	bd80      	pop	{r7, pc}
	...

00001e18 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	b084      	sub	sp, #16
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	0018      	movs	r0, r3
    1e2c:	4b09      	ldr	r3, [pc, #36]	; (1e54 <usart_enable+0x3c>)
    1e2e:	4798      	blx	r3
    1e30:	0003      	movs	r3, r0
    1e32:	0018      	movs	r0, r3
    1e34:	4b08      	ldr	r3, [pc, #32]	; (1e58 <usart_enable+0x40>)
    1e36:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	0018      	movs	r0, r3
    1e3c:	4b07      	ldr	r3, [pc, #28]	; (1e5c <usart_enable+0x44>)
    1e3e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e40:	68fb      	ldr	r3, [r7, #12]
    1e42:	681b      	ldr	r3, [r3, #0]
    1e44:	2202      	movs	r2, #2
    1e46:	431a      	orrs	r2, r3
    1e48:	68fb      	ldr	r3, [r7, #12]
    1e4a:	601a      	str	r2, [r3, #0]
}
    1e4c:	46c0      	nop			; (mov r8, r8)
    1e4e:	46bd      	mov	sp, r7
    1e50:	b004      	add	sp, #16
    1e52:	bd80      	pop	{r7, pc}
    1e54:	00010db5 	.word	0x00010db5
    1e58:	00001bbd 	.word	0x00001bbd
    1e5c:	00001d35 	.word	0x00001d35

00001e60 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    1e60:	b580      	push	{r7, lr}
    1e62:	b084      	sub	sp, #16
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	681b      	ldr	r3, [r3, #0]
    1e6c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	681b      	ldr	r3, [r3, #0]
    1e72:	0018      	movs	r0, r3
    1e74:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <usart_disable+0x40>)
    1e76:	4798      	blx	r3
    1e78:	0003      	movs	r3, r0
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b09      	ldr	r3, [pc, #36]	; (1ea4 <usart_disable+0x44>)
    1e7e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	0018      	movs	r0, r3
    1e84:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <usart_disable+0x48>)
    1e86:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e88:	68fb      	ldr	r3, [r7, #12]
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	2202      	movs	r2, #2
    1e8e:	4393      	bics	r3, r2
    1e90:	001a      	movs	r2, r3
    1e92:	68fb      	ldr	r3, [r7, #12]
    1e94:	601a      	str	r2, [r3, #0]
}
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	46bd      	mov	sp, r7
    1e9a:	b004      	add	sp, #16
    1e9c:	bd80      	pop	{r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	00010db5 	.word	0x00010db5
    1ea4:	00001be9 	.word	0x00001be9
    1ea8:	00001d35 	.word	0x00001d35

00001eac <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b084      	sub	sp, #16
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	681b      	ldr	r3, [r3, #0]
    1eb8:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	0018      	movs	r0, r3
    1ebe:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <usart_reset+0x2c>)
    1ec0:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	0018      	movs	r0, r3
    1ec6:	4b05      	ldr	r3, [pc, #20]	; (1edc <usart_reset+0x30>)
    1ec8:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    1eca:	68fb      	ldr	r3, [r7, #12]
    1ecc:	2201      	movs	r2, #1
    1ece:	601a      	str	r2, [r3, #0]
}
    1ed0:	46c0      	nop			; (mov r8, r8)
    1ed2:	46bd      	mov	sp, r7
    1ed4:	b004      	add	sp, #16
    1ed6:	bd80      	pop	{r7, pc}
    1ed8:	00001e61 	.word	0x00001e61
    1edc:	00001d35 	.word	0x00001d35

00001ee0 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
 *
 *  \param[in]  timer  ID of the timer that has expired.
 */
static void gsm_timer_callback(TimerHandle_t timer)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b082      	sub	sp, #8
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	6078      	str	r0, [r7, #4]
}
    1ee8:	46c0      	nop			; (mov r8, r8)
    1eea:	46bd      	mov	sp, r7
    1eec:	b002      	add	sp, #8
    1eee:	bd80      	pop	{r7, pc}

00001ef0 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1ef6:	4b09      	ldr	r3, [pc, #36]	; (1f1c <Flush_RX_Buffer+0x2c>)
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	1cf9      	adds	r1, r7, #3
    1efc:	2200      	movs	r2, #0
    1efe:	0018      	movs	r0, r3
    1f00:	4b07      	ldr	r3, [pc, #28]	; (1f20 <Flush_RX_Buffer+0x30>)
    1f02:	4798      	blx	r3
    1f04:	0003      	movs	r3, r0
    1f06:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d000      	beq.n	1f10 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1f0e:	e7f2      	b.n	1ef6 <Flush_RX_Buffer+0x6>
		{
			break;
    1f10:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	46bd      	mov	sp, r7
    1f16:	b002      	add	sp, #8
    1f18:	bd80      	pop	{r7, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	2000021c 	.word	0x2000021c
    1f20:	0000e151 	.word	0x0000e151

00001f24 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
    1f24:	b590      	push	{r4, r7, lr}
    1f26:	b085      	sub	sp, #20
    1f28:	af00      	add	r7, sp, #0
    1f2a:	0002      	movs	r2, r0
    1f2c:	1dfb      	adds	r3, r7, #7
    1f2e:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
    1f30:	4b18      	ldr	r3, [pc, #96]	; (1f94 <gsm_rx_handler+0x70>)
    1f32:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) 
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	7e1b      	ldrb	r3, [r3, #24]
    1f38:	b2db      	uxtb	r3, r3
    1f3a:	001a      	movs	r2, r3
    1f3c:	2304      	movs	r3, #4
    1f3e:	4013      	ands	r3, r2
    1f40:	d023      	beq.n	1f8a <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
    1f42:	68fb      	ldr	r3, [r7, #12]
    1f44:	8b5b      	ldrh	r3, [r3, #26]
    1f46:	b29b      	uxth	r3, r3
    1f48:	b2da      	uxtb	r2, r3
    1f4a:	230b      	movs	r3, #11
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	2106      	movs	r1, #6
    1f50:	400a      	ands	r2, r1
    1f52:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error) 
    1f54:	230b      	movs	r3, #11
    1f56:	18fb      	adds	r3, r7, r3
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d006      	beq.n	1f6c <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
    1f5e:	230b      	movs	r3, #11
    1f60:	18fb      	adds	r3, r7, r3
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	b29a      	uxth	r2, r3
    1f66:	68fb      	ldr	r3, [r7, #12]
    1f68:	835a      	strh	r2, [r3, #26]
		{
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
		}
	}
}
    1f6a:	e00e      	b.n	1f8a <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1f70:	b29b      	uxth	r3, r3
    1f72:	b2da      	uxtb	r2, r3
    1f74:	230a      	movs	r3, #10
    1f76:	18fb      	adds	r3, r7, r3
    1f78:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
    1f7a:	4b07      	ldr	r3, [pc, #28]	; (1f98 <gsm_rx_handler+0x74>)
    1f7c:	6818      	ldr	r0, [r3, #0]
    1f7e:	230a      	movs	r3, #10
    1f80:	18f9      	adds	r1, r7, r3
    1f82:	2300      	movs	r3, #0
    1f84:	2200      	movs	r2, #0
    1f86:	4c05      	ldr	r4, [pc, #20]	; (1f9c <gsm_rx_handler+0x78>)
    1f88:	47a0      	blx	r4
}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	46bd      	mov	sp, r7
    1f8e:	b005      	add	sp, #20
    1f90:	bd90      	pop	{r4, r7, pc}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	42001400 	.word	0x42001400
    1f98:	2000021c 	.word	0x2000021c
    1f9c:	0000e031 	.word	0x0000e031

00001fa0 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	af00      	add	r7, sp, #0
	
}
    1fa4:	46c0      	nop			; (mov r8, r8)
    1fa6:	46bd      	mov	sp, r7
    1fa8:	bd80      	pop	{r7, pc}
	...

00001fac <gsm_init>:

void gsm_init(void)	
{
    1fac:	b590      	push	{r4, r7, lr}
    1fae:	b097      	sub	sp, #92	; 0x5c
    1fb0:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
    1fb2:	234c      	movs	r3, #76	; 0x4c
    1fb4:	18fb      	adds	r3, r7, r3
    1fb6:	0018      	movs	r0, r3
    1fb8:	4b4d      	ldr	r3, [pc, #308]	; (20f0 <STACK_SIZE+0xf0>)
    1fba:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
    1fbc:	234c      	movs	r3, #76	; 0x4c
    1fbe:	18fb      	adds	r3, r7, r3
    1fc0:	2201      	movs	r2, #1
    1fc2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
    1fc4:	234c      	movs	r3, #76	; 0x4c
    1fc6:	18fb      	adds	r3, r7, r3
    1fc8:	0019      	movs	r1, r3
    1fca:	2014      	movs	r0, #20
    1fcc:	4b49      	ldr	r3, [pc, #292]	; (20f4 <STACK_SIZE+0xf4>)
    1fce:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
    1fd0:	2100      	movs	r1, #0
    1fd2:	2014      	movs	r0, #20
    1fd4:	4b48      	ldr	r3, [pc, #288]	; (20f8 <STACK_SIZE+0xf8>)
    1fd6:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    1fd8:	2340      	movs	r3, #64	; 0x40
    1fda:	18fb      	adds	r3, r7, r3
    1fdc:	0018      	movs	r0, r3
    1fde:	4b47      	ldr	r3, [pc, #284]	; (20fc <STACK_SIZE+0xfc>)
    1fe0:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
    1fe2:	2340      	movs	r3, #64	; 0x40
    1fe4:	18fb      	adds	r3, r7, r3
    1fe6:	2231      	movs	r2, #49	; 0x31
    1fe8:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
    1fea:	2340      	movs	r3, #64	; 0x40
    1fec:	18fb      	adds	r3, r7, r3
    1fee:	2200      	movs	r2, #0
    1ff0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1ff2:	2340      	movs	r3, #64	; 0x40
    1ff4:	18fb      	adds	r3, r7, r3
    1ff6:	2201      	movs	r2, #1
    1ff8:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1ffa:	2340      	movs	r3, #64	; 0x40
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	2202      	movs	r2, #2
    2000:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
    2002:	2340      	movs	r3, #64	; 0x40
    2004:	18fb      	adds	r3, r7, r3
    2006:	0019      	movs	r1, r3
    2008:	2001      	movs	r0, #1
    200a:	4b3d      	ldr	r3, [pc, #244]	; (2100 <STACK_SIZE+0x100>)
    200c:	4798      	blx	r3
		
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    200e:	2100      	movs	r1, #0
    2010:	2001      	movs	r0, #1
    2012:	4b3c      	ldr	r3, [pc, #240]	; (2104 <STACK_SIZE+0x104>)
    2014:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2016:	4b3c      	ldr	r3, [pc, #240]	; (2108 <STACK_SIZE+0x108>)
    2018:	2200      	movs	r2, #0
    201a:	2101      	movs	r1, #1
    201c:	0018      	movs	r0, r3
    201e:	4b3b      	ldr	r3, [pc, #236]	; (210c <STACK_SIZE+0x10c>)
    2020:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
    2022:	2200      	movs	r2, #0
    2024:	2101      	movs	r1, #1
    2026:	20f0      	movs	r0, #240	; 0xf0
    2028:	4b39      	ldr	r3, [pc, #228]	; (2110 <STACK_SIZE+0x110>)
    202a:	4798      	blx	r3
    202c:	0002      	movs	r2, r0
    202e:	4b39      	ldr	r3, [pc, #228]	; (2114 <STACK_SIZE+0x114>)
    2030:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    2032:	4939      	ldr	r1, [pc, #228]	; (2118 <STACK_SIZE+0x118>)
    2034:	4839      	ldr	r0, [pc, #228]	; (211c <STACK_SIZE+0x11c>)
    2036:	4b3a      	ldr	r3, [pc, #232]	; (2120 <STACK_SIZE+0x120>)
    2038:	9300      	str	r3, [sp, #0]
    203a:	2300      	movs	r3, #0
    203c:	2200      	movs	r2, #0
    203e:	4c39      	ldr	r4, [pc, #228]	; (2124 <STACK_SIZE+0x124>)
    2040:	47a0      	blx	r4
    2042:	0002      	movs	r2, r0
    2044:	4b38      	ldr	r3, [pc, #224]	; (2128 <STACK_SIZE+0x128>)
    2046:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
    2048:	2203      	movs	r2, #3
    204a:	2100      	movs	r1, #0
    204c:	2001      	movs	r0, #1
    204e:	4b30      	ldr	r3, [pc, #192]	; (2110 <STACK_SIZE+0x110>)
    2050:	4798      	blx	r3
    2052:	0002      	movs	r2, r0
    2054:	4b35      	ldr	r3, [pc, #212]	; (212c <STACK_SIZE+0x12c>)
    2056:	601a      	str	r2, [r3, #0]
    2058:	4b34      	ldr	r3, [pc, #208]	; (212c <STACK_SIZE+0x12c>)
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	2b00      	cmp	r3, #0
    205e:	d006      	beq.n	206e <STACK_SIZE+0x6e>
    2060:	4b32      	ldr	r3, [pc, #200]	; (212c <STACK_SIZE+0x12c>)
    2062:	6818      	ldr	r0, [r3, #0]
    2064:	2300      	movs	r3, #0
    2066:	2200      	movs	r2, #0
    2068:	2100      	movs	r1, #0
    206a:	4c31      	ldr	r4, [pc, #196]	; (2130 <STACK_SIZE+0x130>)
    206c:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    206e:	003b      	movs	r3, r7
    2070:	0018      	movs	r0, r3
    2072:	4b30      	ldr	r3, [pc, #192]	; (2134 <STACK_SIZE+0x134>)
    2074:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
    2076:	003b      	movs	r3, r7
    2078:	22e1      	movs	r2, #225	; 0xe1
    207a:	0252      	lsls	r2, r2, #9
    207c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
    207e:	003b      	movs	r3, r7
    2080:	2280      	movs	r2, #128	; 0x80
    2082:	0352      	lsls	r2, r2, #13
    2084:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
    2086:	003b      	movs	r3, r7
    2088:	4a2b      	ldr	r2, [pc, #172]	; (2138 <STACK_SIZE+0x138>)
    208a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
    208c:	003b      	movs	r3, r7
    208e:	4a2b      	ldr	r2, [pc, #172]	; (213c <STACK_SIZE+0x13c>)
    2090:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
    2092:	003b      	movs	r3, r7
    2094:	2201      	movs	r2, #1
    2096:	4252      	negs	r2, r2
    2098:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
    209a:	003b      	movs	r3, r7
    209c:	2201      	movs	r2, #1
    209e:	4252      	negs	r2, r2
    20a0:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
    20a2:	003b      	movs	r3, r7
    20a4:	222c      	movs	r2, #44	; 0x2c
    20a6:	2101      	movs	r1, #1
    20a8:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    20aa:	e003      	b.n	20b4 <STACK_SIZE+0xb4>
	{
		usart_reset(&gsm_usart);
    20ac:	4b24      	ldr	r3, [pc, #144]	; (2140 <STACK_SIZE+0x140>)
    20ae:	0018      	movs	r0, r3
    20b0:	4b24      	ldr	r3, [pc, #144]	; (2144 <STACK_SIZE+0x144>)
    20b2:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    20b4:	003a      	movs	r2, r7
    20b6:	4924      	ldr	r1, [pc, #144]	; (2148 <STACK_SIZE+0x148>)
    20b8:	4b21      	ldr	r3, [pc, #132]	; (2140 <STACK_SIZE+0x140>)
    20ba:	0018      	movs	r0, r3
    20bc:	4b23      	ldr	r3, [pc, #140]	; (214c <STACK_SIZE+0x14c>)
    20be:	4798      	blx	r3
    20c0:	1e03      	subs	r3, r0, #0
    20c2:	d1f3      	bne.n	20ac <STACK_SIZE+0xac>
	}
	usart_enable(&gsm_usart);
    20c4:	4b1e      	ldr	r3, [pc, #120]	; (2140 <STACK_SIZE+0x140>)
    20c6:	0018      	movs	r0, r3
    20c8:	4b21      	ldr	r3, [pc, #132]	; (2150 <STACK_SIZE+0x150>)
    20ca:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
    20cc:	4b1e      	ldr	r3, [pc, #120]	; (2148 <STACK_SIZE+0x148>)
    20ce:	0018      	movs	r0, r3
    20d0:	4b20      	ldr	r3, [pc, #128]	; (2154 <STACK_SIZE+0x154>)
    20d2:	4798      	blx	r3
    20d4:	0003      	movs	r3, r0
    20d6:	001a      	movs	r2, r3
    20d8:	4b1f      	ldr	r3, [pc, #124]	; (2158 <STACK_SIZE+0x158>)
    20da:	0019      	movs	r1, r3
    20dc:	0010      	movs	r0, r2
    20de:	4b1f      	ldr	r3, [pc, #124]	; (215c <STACK_SIZE+0x15c>)
    20e0:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
    20e2:	4b19      	ldr	r3, [pc, #100]	; (2148 <STACK_SIZE+0x148>)
    20e4:	2204      	movs	r2, #4
    20e6:	759a      	strb	r2, [r3, #22]
}
    20e8:	46c0      	nop			; (mov r8, r8)
    20ea:	46bd      	mov	sp, r7
    20ec:	b015      	add	sp, #84	; 0x54
    20ee:	bd90      	pop	{r4, r7, pc}
    20f0:	00001c9d 	.word	0x00001c9d
    20f4:	00011ac9 	.word	0x00011ac9
    20f8:	00001cc1 	.word	0x00001cc1
    20fc:	0000cc15 	.word	0x0000cc15
    2100:	0000cc49 	.word	0x0000cc49
    2104:	00010fb9 	.word	0x00010fb9
    2108:	00001fa1 	.word	0x00001fa1
    210c:	00010f55 	.word	0x00010f55
    2110:	0000dd95 	.word	0x0000dd95
    2114:	2000021c 	.word	0x2000021c
    2118:	00001388 	.word	0x00001388
    211c:	00018554 	.word	0x00018554
    2120:	00001ee1 	.word	0x00001ee1
    2124:	0000f961 	.word	0x0000f961
    2128:	20000220 	.word	0x20000220
    212c:	20000224 	.word	0x20000224
    2130:	0000de51 	.word	0x0000de51
    2134:	00001d59 	.word	0x00001d59
    2138:	00160002 	.word	0x00160002
    213c:	00170002 	.word	0x00170002
    2140:	2000067c 	.word	0x2000067c
    2144:	00001ead 	.word	0x00001ead
    2148:	42001400 	.word	0x42001400
    214c:	000105ad 	.word	0x000105ad
    2150:	00001e19 	.word	0x00001e19
    2154:	0000d829 	.word	0x0000d829
    2158:	00001f25 	.word	0x00001f25
    215c:	00010d49 	.word	0x00010d49

00002160 <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
    2160:	b590      	push	{r4, r7, lr}
    2162:	b08b      	sub	sp, #44	; 0x2c
    2164:	af02      	add	r7, sp, #8
    2166:	60f8      	str	r0, [r7, #12]
    2168:	60b9      	str	r1, [r7, #8]
    216a:	607a      	str	r2, [r7, #4]
    216c:	001a      	movs	r2, r3
    216e:	1cfb      	adds	r3, r7, #3
    2170:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    2172:	4b64      	ldr	r3, [pc, #400]	; (2304 <gsm_send_at_command+0x1a4>)
    2174:	681b      	ldr	r3, [r3, #0]
    2176:	2101      	movs	r1, #1
    2178:	0018      	movs	r0, r3
    217a:	4b63      	ldr	r3, [pc, #396]	; (2308 <gsm_send_at_command+0x1a8>)
    217c:	4798      	blx	r3
    217e:	1e03      	subs	r3, r0, #0
    2180:	d101      	bne.n	2186 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
    2182:	2302      	movs	r3, #2
    2184:	e0ba      	b.n	22fc <gsm_send_at_command+0x19c>
	/* Enable DTR and wait for the module to be ready to accept a command */
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
	//vTaskDelay(100 / portTICK_PERIOD_MS);
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
    2186:	4b61      	ldr	r3, [pc, #388]	; (230c <gsm_send_at_command+0x1ac>)
    2188:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
    218a:	231f      	movs	r3, #31
    218c:	18fb      	adds	r3, r7, r3
    218e:	2200      	movs	r2, #0
    2190:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
    2192:	231e      	movs	r3, #30
    2194:	18fb      	adds	r3, r7, r3
    2196:	2200      	movs	r2, #0
    2198:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
    219a:	2313      	movs	r3, #19
    219c:	18fb      	adds	r3, r7, r3
    219e:	2200      	movs	r2, #0
    21a0:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
    21a2:	2101      	movs	r1, #1
    21a4:	20f0      	movs	r0, #240	; 0xf0
    21a6:	4b5a      	ldr	r3, [pc, #360]	; (2310 <gsm_send_at_command+0x1b0>)
    21a8:	4798      	blx	r3
    21aa:	0003      	movs	r3, r0
    21ac:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
    21ae:	69bb      	ldr	r3, [r7, #24]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d101      	bne.n	21b8 <gsm_send_at_command+0x58>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
    21b4:	2300      	movs	r3, #0
    21b6:	e0a1      	b.n	22fc <gsm_send_at_command+0x19c>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
    21b8:	69bb      	ldr	r3, [r7, #24]
    21ba:	22f0      	movs	r2, #240	; 0xf0
    21bc:	2100      	movs	r1, #0
    21be:	0018      	movs	r0, r3
    21c0:	4b54      	ldr	r3, [pc, #336]	; (2314 <gsm_send_at_command+0x1b4>)
    21c2:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));	
    21c4:	68fb      	ldr	r3, [r7, #12]
    21c6:	0018      	movs	r0, r3
    21c8:	4b53      	ldr	r3, [pc, #332]	; (2318 <gsm_send_at_command+0x1b8>)
    21ca:	4798      	blx	r3
    21cc:	0003      	movs	r3, r0
    21ce:	b29a      	uxth	r2, r3
    21d0:	68f9      	ldr	r1, [r7, #12]
    21d2:	4b52      	ldr	r3, [pc, #328]	; (231c <gsm_send_at_command+0x1bc>)
    21d4:	0018      	movs	r0, r3
    21d6:	4b52      	ldr	r3, [pc, #328]	; (2320 <gsm_send_at_command+0x1c0>)
    21d8:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
    21da:	4b52      	ldr	r3, [pc, #328]	; (2324 <gsm_send_at_command+0x1c4>)
    21dc:	6818      	ldr	r0, [r3, #0]
    21de:	687a      	ldr	r2, [r7, #4]
    21e0:	2301      	movs	r3, #1
    21e2:	425b      	negs	r3, r3
    21e4:	9300      	str	r3, [sp, #0]
    21e6:	2300      	movs	r3, #0
    21e8:	2104      	movs	r1, #4
    21ea:	4c4f      	ldr	r4, [pc, #316]	; (2328 <gsm_send_at_command+0x1c8>)
    21ec:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
    21ee:	4b4d      	ldr	r3, [pc, #308]	; (2324 <gsm_send_at_command+0x1c4>)
    21f0:	681b      	ldr	r3, [r3, #0]
    21f2:	0018      	movs	r0, r3
    21f4:	4b4d      	ldr	r3, [pc, #308]	; (232c <gsm_send_at_command+0x1cc>)
    21f6:	4798      	blx	r3
    21f8:	1e03      	subs	r3, r0, #0
    21fa:	d03e      	beq.n	227a <gsm_send_at_command+0x11a>
		{
			if (u8tRx_Index<240)
    21fc:	231e      	movs	r3, #30
    21fe:	18fb      	adds	r3, r7, r3
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	2bef      	cmp	r3, #239	; 0xef
    2204:	d81c      	bhi.n	2240 <gsm_send_at_command+0xe0>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
    2206:	4b4a      	ldr	r3, [pc, #296]	; (2330 <gsm_send_at_command+0x1d0>)
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	2213      	movs	r2, #19
    220c:	18b9      	adds	r1, r7, r2
    220e:	2200      	movs	r2, #0
    2210:	0018      	movs	r0, r3
    2212:	4b48      	ldr	r3, [pc, #288]	; (2334 <gsm_send_at_command+0x1d4>)
    2214:	4798      	blx	r3
    2216:	0003      	movs	r3, r0
    2218:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
    221a:	697b      	ldr	r3, [r7, #20]
    221c:	2b00      	cmp	r3, #0
    221e:	d00f      	beq.n	2240 <gsm_send_at_command+0xe0>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
    2220:	231e      	movs	r3, #30
    2222:	18fb      	adds	r3, r7, r3
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	69ba      	ldr	r2, [r7, #24]
    2228:	18d3      	adds	r3, r2, r3
    222a:	2213      	movs	r2, #19
    222c:	18ba      	adds	r2, r7, r2
    222e:	7812      	ldrb	r2, [r2, #0]
    2230:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
    2232:	231e      	movs	r3, #30
    2234:	18fb      	adds	r3, r7, r3
    2236:	781a      	ldrb	r2, [r3, #0]
    2238:	231e      	movs	r3, #30
    223a:	18fb      	adds	r3, r7, r3
    223c:	3201      	adds	r2, #1
    223e:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
    2240:	68bb      	ldr	r3, [r7, #8]
    2242:	2b00      	cmp	r3, #0
    2244:	d00c      	beq.n	2260 <gsm_send_at_command+0x100>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
    2246:	68ba      	ldr	r2, [r7, #8]
    2248:	69bb      	ldr	r3, [r7, #24]
    224a:	0011      	movs	r1, r2
    224c:	0018      	movs	r0, r3
    224e:	4b3a      	ldr	r3, [pc, #232]	; (2338 <gsm_send_at_command+0x1d8>)
    2250:	4798      	blx	r3
    2252:	1e03      	subs	r3, r0, #0
    2254:	d004      	beq.n	2260 <gsm_send_at_command+0x100>
				{
					err_no = GSM_ERROR_NONE;
    2256:	231f      	movs	r3, #31
    2258:	18fb      	adds	r3, r7, r3
    225a:	2200      	movs	r2, #0
    225c:	701a      	strb	r2, [r3, #0]
					break;
    225e:	e024      	b.n	22aa <gsm_send_at_command+0x14a>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
    2260:	4a36      	ldr	r2, [pc, #216]	; (233c <gsm_send_at_command+0x1dc>)
    2262:	69bb      	ldr	r3, [r7, #24]
    2264:	0011      	movs	r1, r2
    2266:	0018      	movs	r0, r3
    2268:	4b33      	ldr	r3, [pc, #204]	; (2338 <gsm_send_at_command+0x1d8>)
    226a:	4798      	blx	r3
    226c:	1e03      	subs	r3, r0, #0
    226e:	d0be      	beq.n	21ee <gsm_send_at_command+0x8e>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
    2270:	231f      	movs	r3, #31
    2272:	18fb      	adds	r3, r7, r3
    2274:	220b      	movs	r2, #11
    2276:	701a      	strb	r2, [r3, #0]
				break;
    2278:	e017      	b.n	22aa <gsm_send_at_command+0x14a>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
    227a:	4b2a      	ldr	r3, [pc, #168]	; (2324 <gsm_send_at_command+0x1c4>)
    227c:	6818      	ldr	r0, [r3, #0]
    227e:	2301      	movs	r3, #1
    2280:	425b      	negs	r3, r3
    2282:	9300      	str	r3, [sp, #0]
    2284:	2300      	movs	r3, #0
    2286:	2200      	movs	r2, #0
    2288:	2103      	movs	r1, #3
    228a:	4c27      	ldr	r4, [pc, #156]	; (2328 <gsm_send_at_command+0x1c8>)
    228c:	47a0      	blx	r4
			if (u8tRx_Index==0)
    228e:	231e      	movs	r3, #30
    2290:	18fb      	adds	r3, r7, r3
    2292:	781b      	ldrb	r3, [r3, #0]
    2294:	2b00      	cmp	r3, #0
    2296:	d104      	bne.n	22a2 <gsm_send_at_command+0x142>
			{
				err_no = GSM_ERROR_TIMEOUT;
    2298:	231f      	movs	r3, #31
    229a:	18fb      	adds	r3, r7, r3
    229c:	2207      	movs	r2, #7
    229e:	701a      	strb	r2, [r3, #0]
				break;
    22a0:	e003      	b.n	22aa <gsm_send_at_command+0x14a>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
    22a2:	231f      	movs	r3, #31
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	2208      	movs	r2, #8
    22a8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
    22aa:	1cfb      	adds	r3, r7, #3
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d016      	beq.n	22e0 <gsm_send_at_command+0x180>
    22b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    22b4:	2b00      	cmp	r3, #0
    22b6:	d013      	beq.n	22e0 <gsm_send_at_command+0x180>
    22b8:	1cfa      	adds	r2, r7, #3
    22ba:	231e      	movs	r3, #30
    22bc:	18fb      	adds	r3, r7, r3
    22be:	7812      	ldrb	r2, [r2, #0]
    22c0:	781b      	ldrb	r3, [r3, #0]
    22c2:	429a      	cmp	r2, r3
    22c4:	d90c      	bls.n	22e0 <gsm_send_at_command+0x180>
    22c6:	231f      	movs	r3, #31
    22c8:	18fb      	adds	r3, r7, r3
    22ca:	781b      	ldrb	r3, [r3, #0]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d107      	bne.n	22e0 <gsm_send_at_command+0x180>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
    22d0:	231e      	movs	r3, #30
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	781a      	ldrb	r2, [r3, #0]
    22d6:	69b9      	ldr	r1, [r7, #24]
    22d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    22da:	0018      	movs	r0, r3
    22dc:	4b18      	ldr	r3, [pc, #96]	; (2340 <gsm_send_at_command+0x1e0>)
    22de:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
    22e0:	4b08      	ldr	r3, [pc, #32]	; (2304 <gsm_send_at_command+0x1a4>)
    22e2:	6818      	ldr	r0, [r3, #0]
    22e4:	2300      	movs	r3, #0
    22e6:	2200      	movs	r2, #0
    22e8:	2100      	movs	r1, #0
    22ea:	4c16      	ldr	r4, [pc, #88]	; (2344 <gsm_send_at_command+0x1e4>)
    22ec:	47a0      	blx	r4
	free(aDataBuffer);
    22ee:	69bb      	ldr	r3, [r7, #24]
    22f0:	0018      	movs	r0, r3
    22f2:	4b15      	ldr	r3, [pc, #84]	; (2348 <gsm_send_at_command+0x1e8>)
    22f4:	4798      	blx	r3
	return err_no;
    22f6:	231f      	movs	r3, #31
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	781b      	ldrb	r3, [r3, #0]
}
    22fc:	0018      	movs	r0, r3
    22fe:	46bd      	mov	sp, r7
    2300:	b009      	add	sp, #36	; 0x24
    2302:	bd90      	pop	{r4, r7, pc}
    2304:	20000224 	.word	0x20000224
    2308:	0000e2f1 	.word	0x0000e2f1
    230c:	00001ef1 	.word	0x00001ef1
    2310:	000177a9 	.word	0x000177a9
    2314:	000178b7 	.word	0x000178b7
    2318:	00017b47 	.word	0x00017b47
    231c:	2000067c 	.word	0x2000067c
    2320:	00010885 	.word	0x00010885
    2324:	20000220 	.word	0x20000220
    2328:	0000fa05 	.word	0x0000fa05
    232c:	0000ff81 	.word	0x0000ff81
    2330:	2000021c 	.word	0x2000021c
    2334:	0000e151 	.word	0x0000e151
    2338:	00017b77 	.word	0x00017b77
    233c:	00018560 	.word	0x00018560
    2340:	00017881 	.word	0x00017881
    2344:	0000de51 	.word	0x0000de51
    2348:	00017849 	.word	0x00017849

0000234c <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
    234c:	b590      	push	{r4, r7, lr}
    234e:	b083      	sub	sp, #12
    2350:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
    2352:	4a06      	ldr	r2, [pc, #24]	; (236c <gsm_check_module+0x20>)
    2354:	4906      	ldr	r1, [pc, #24]	; (2370 <gsm_check_module+0x24>)
    2356:	4807      	ldr	r0, [pc, #28]	; (2374 <gsm_check_module+0x28>)
    2358:	2300      	movs	r3, #0
    235a:	9300      	str	r3, [sp, #0]
    235c:	2300      	movs	r3, #0
    235e:	4c06      	ldr	r4, [pc, #24]	; (2378 <gsm_check_module+0x2c>)
    2360:	47a0      	blx	r4
    2362:	0003      	movs	r3, r0
}
    2364:	0018      	movs	r0, r3
    2366:	46bd      	mov	sp, r7
    2368:	b001      	add	sp, #4
    236a:	bd90      	pop	{r4, r7, pc}
    236c:	00001388 	.word	0x00001388
    2370:	00018568 	.word	0x00018568
    2374:	0001856c 	.word	0x0001856c
    2378:	00002161 	.word	0x00002161

0000237c <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
    237c:	b5b0      	push	{r4, r5, r7, lr}
    237e:	b084      	sub	sp, #16
    2380:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
    2382:	1dfc      	adds	r4, r7, #7
    2384:	4a12      	ldr	r2, [pc, #72]	; (23d0 <gsm_is_network_registered+0x54>)
    2386:	4913      	ldr	r1, [pc, #76]	; (23d4 <gsm_is_network_registered+0x58>)
    2388:	4813      	ldr	r0, [pc, #76]	; (23d8 <gsm_is_network_registered+0x5c>)
    238a:	2300      	movs	r3, #0
    238c:	9300      	str	r3, [sp, #0]
    238e:	2300      	movs	r3, #0
    2390:	4d12      	ldr	r5, [pc, #72]	; (23dc <gsm_is_network_registered+0x60>)
    2392:	47a8      	blx	r5
    2394:	0003      	movs	r3, r0
    2396:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
    2398:	1dfb      	adds	r3, r7, #7
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	2b00      	cmp	r3, #0
    239e:	d101      	bne.n	23a4 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;	
    23a0:	2309      	movs	r3, #9
    23a2:	e011      	b.n	23c8 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
    23a4:	1dbc      	adds	r4, r7, #6
    23a6:	4a0a      	ldr	r2, [pc, #40]	; (23d0 <gsm_is_network_registered+0x54>)
    23a8:	490d      	ldr	r1, [pc, #52]	; (23e0 <gsm_is_network_registered+0x64>)
    23aa:	480b      	ldr	r0, [pc, #44]	; (23d8 <gsm_is_network_registered+0x5c>)
    23ac:	2300      	movs	r3, #0
    23ae:	9300      	str	r3, [sp, #0]
    23b0:	2300      	movs	r3, #0
    23b2:	4d0a      	ldr	r5, [pc, #40]	; (23dc <gsm_is_network_registered+0x60>)
    23b4:	47a8      	blx	r5
    23b6:	0003      	movs	r3, r0
    23b8:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
    23ba:	1dbb      	adds	r3, r7, #6
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	2b00      	cmp	r3, #0
    23c0:	d101      	bne.n	23c6 <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
    23c2:	2309      	movs	r3, #9
    23c4:	e000      	b.n	23c8 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
    23c6:	230a      	movs	r3, #10
			}
		}
	}
}
    23c8:	0018      	movs	r0, r3
    23ca:	46bd      	mov	sp, r7
    23cc:	b002      	add	sp, #8
    23ce:	bdb0      	pop	{r4, r5, r7, pc}
    23d0:	00001388 	.word	0x00001388
    23d4:	0001857c 	.word	0x0001857c
    23d8:	00018588 	.word	0x00018588
    23dc:	00002161 	.word	0x00002161
    23e0:	00018594 	.word	0x00018594

000023e4 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
    23e4:	b590      	push	{r4, r7, lr}
    23e6:	b089      	sub	sp, #36	; 0x24
    23e8:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
    23ea:	1d3b      	adds	r3, r7, #4
    23ec:	0018      	movs	r0, r3
    23ee:	2314      	movs	r3, #20
    23f0:	001a      	movs	r2, r3
    23f2:	2100      	movs	r1, #0
    23f4:	4b0a      	ldr	r3, [pc, #40]	; (2420 <gsm_set_baudrate+0x3c>)
    23f6:	4798      	blx	r3
		
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
    23f8:	23e1      	movs	r3, #225	; 0xe1
    23fa:	025a      	lsls	r2, r3, #9
    23fc:	4909      	ldr	r1, [pc, #36]	; (2424 <gsm_set_baudrate+0x40>)
    23fe:	1d3b      	adds	r3, r7, #4
    2400:	0018      	movs	r0, r3
    2402:	4b09      	ldr	r3, [pc, #36]	; (2428 <gsm_set_baudrate+0x44>)
    2404:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
    2406:	4a09      	ldr	r2, [pc, #36]	; (242c <gsm_set_baudrate+0x48>)
    2408:	4909      	ldr	r1, [pc, #36]	; (2430 <gsm_set_baudrate+0x4c>)
    240a:	1d38      	adds	r0, r7, #4
    240c:	2300      	movs	r3, #0
    240e:	9300      	str	r3, [sp, #0]
    2410:	2300      	movs	r3, #0
    2412:	4c08      	ldr	r4, [pc, #32]	; (2434 <gsm_set_baudrate+0x50>)
    2414:	47a0      	blx	r4
    2416:	0003      	movs	r3, r0
}
    2418:	0018      	movs	r0, r3
    241a:	46bd      	mov	sp, r7
    241c:	b007      	add	sp, #28
    241e:	bd90      	pop	{r4, r7, pc}
    2420:	000178b7 	.word	0x000178b7
    2424:	000185a0 	.word	0x000185a0
    2428:	00017abd 	.word	0x00017abd
    242c:	00001388 	.word	0x00001388
    2430:	00018568 	.word	0x00018568
    2434:	00002161 	.word	0x00002161

00002438 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
    2438:	b590      	push	{r4, r7, lr}
    243a:	b083      	sub	sp, #12
    243c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
    243e:	4a06      	ldr	r2, [pc, #24]	; (2458 <gsm_detect_simcard+0x20>)
    2440:	4906      	ldr	r1, [pc, #24]	; (245c <gsm_detect_simcard+0x24>)
    2442:	4807      	ldr	r0, [pc, #28]	; (2460 <gsm_detect_simcard+0x28>)
    2444:	2300      	movs	r3, #0
    2446:	9300      	str	r3, [sp, #0]
    2448:	2300      	movs	r3, #0
    244a:	4c06      	ldr	r4, [pc, #24]	; (2464 <gsm_detect_simcard+0x2c>)
    244c:	47a0      	blx	r4
    244e:	0003      	movs	r3, r0
}
    2450:	0018      	movs	r0, r3
    2452:	46bd      	mov	sp, r7
    2454:	b001      	add	sp, #4
    2456:	bd90      	pop	{r4, r7, pc}
    2458:	00001388 	.word	0x00001388
    245c:	00018610 	.word	0x00018610
    2460:	00018620 	.word	0x00018620
    2464:	00002161 	.word	0x00002161

00002468 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
    2468:	b590      	push	{r4, r7, lr}
    246a:	b083      	sub	sp, #12
    246c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
    246e:	4a06      	ldr	r2, [pc, #24]	; (2488 <gsm_delete_all_sms+0x20>)
    2470:	4906      	ldr	r1, [pc, #24]	; (248c <gsm_delete_all_sms+0x24>)
    2472:	4807      	ldr	r0, [pc, #28]	; (2490 <gsm_delete_all_sms+0x28>)
    2474:	2300      	movs	r3, #0
    2476:	9300      	str	r3, [sp, #0]
    2478:	2300      	movs	r3, #0
    247a:	4c06      	ldr	r4, [pc, #24]	; (2494 <gsm_delete_all_sms+0x2c>)
    247c:	47a0      	blx	r4
    247e:	0003      	movs	r3, r0
}
    2480:	0018      	movs	r0, r3
    2482:	46bd      	mov	sp, r7
    2484:	b001      	add	sp, #4
    2486:	bd90      	pop	{r4, r7, pc}
    2488:	000061a8 	.word	0x000061a8
    248c:	00018568 	.word	0x00018568
    2490:	0001862c 	.word	0x0001862c
    2494:	00002161 	.word	0x00002161

00002498 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
    2498:	b590      	push	{r4, r7, lr}
    249a:	b083      	sub	sp, #12
    249c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
    249e:	4a06      	ldr	r2, [pc, #24]	; (24b8 <gsm_store_active_profile+0x20>)
    24a0:	4906      	ldr	r1, [pc, #24]	; (24bc <gsm_store_active_profile+0x24>)
    24a2:	4807      	ldr	r0, [pc, #28]	; (24c0 <gsm_store_active_profile+0x28>)
    24a4:	2300      	movs	r3, #0
    24a6:	9300      	str	r3, [sp, #0]
    24a8:	2300      	movs	r3, #0
    24aa:	4c06      	ldr	r4, [pc, #24]	; (24c4 <gsm_store_active_profile+0x2c>)
    24ac:	47a0      	blx	r4
    24ae:	0003      	movs	r3, r0
}
    24b0:	0018      	movs	r0, r3
    24b2:	46bd      	mov	sp, r7
    24b4:	b001      	add	sp, #4
    24b6:	bd90      	pop	{r4, r7, pc}
    24b8:	00001388 	.word	0x00001388
    24bc:	00018568 	.word	0x00018568
    24c0:	00018640 	.word	0x00018640
    24c4:	00002161 	.word	0x00002161

000024c8 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
    24c8:	b590      	push	{r4, r7, lr}
    24ca:	b083      	sub	sp, #12
    24cc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
    24ce:	4a06      	ldr	r2, [pc, #24]	; (24e8 <gsm_enable_calling_line_identification+0x20>)
    24d0:	4906      	ldr	r1, [pc, #24]	; (24ec <gsm_enable_calling_line_identification+0x24>)
    24d2:	4807      	ldr	r0, [pc, #28]	; (24f0 <gsm_enable_calling_line_identification+0x28>)
    24d4:	2300      	movs	r3, #0
    24d6:	9300      	str	r3, [sp, #0]
    24d8:	2300      	movs	r3, #0
    24da:	4c06      	ldr	r4, [pc, #24]	; (24f4 <gsm_enable_calling_line_identification+0x2c>)
    24dc:	47a0      	blx	r4
    24de:	0003      	movs	r3, r0
}
    24e0:	0018      	movs	r0, r3
    24e2:	46bd      	mov	sp, r7
    24e4:	b001      	add	sp, #4
    24e6:	bd90      	pop	{r4, r7, pc}
    24e8:	00003a98 	.word	0x00003a98
    24ec:	00018568 	.word	0x00018568
    24f0:	00018648 	.word	0x00018648
    24f4:	00002161 	.word	0x00002161

000024f8 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
    24f8:	b590      	push	{r4, r7, lr}
    24fa:	b083      	sub	sp, #12
    24fc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    24fe:	4a06      	ldr	r2, [pc, #24]	; (2518 <gsm_enable_connected_line_identification_presentation+0x20>)
    2500:	4906      	ldr	r1, [pc, #24]	; (251c <gsm_enable_connected_line_identification_presentation+0x24>)
    2502:	4807      	ldr	r0, [pc, #28]	; (2520 <gsm_enable_connected_line_identification_presentation+0x28>)
    2504:	2300      	movs	r3, #0
    2506:	9300      	str	r3, [sp, #0]
    2508:	2300      	movs	r3, #0
    250a:	4c06      	ldr	r4, [pc, #24]	; (2524 <gsm_enable_connected_line_identification_presentation+0x2c>)
    250c:	47a0      	blx	r4
    250e:	0003      	movs	r3, r0
}
    2510:	0018      	movs	r0, r3
    2512:	46bd      	mov	sp, r7
    2514:	b001      	add	sp, #4
    2516:	bd90      	pop	{r4, r7, pc}
    2518:	00001388 	.word	0x00001388
    251c:	00018568 	.word	0x00018568
    2520:	00018654 	.word	0x00018654
    2524:	00002161 	.word	0x00002161

00002528 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
    2528:	b590      	push	{r4, r7, lr}
    252a:	b083      	sub	sp, #12
    252c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    252e:	4a06      	ldr	r2, [pc, #24]	; (2548 <gsm_enable_list_current_calls_of_ME+0x20>)
    2530:	4906      	ldr	r1, [pc, #24]	; (254c <gsm_enable_list_current_calls_of_ME+0x24>)
    2532:	4807      	ldr	r0, [pc, #28]	; (2550 <gsm_enable_list_current_calls_of_ME+0x28>)
    2534:	2300      	movs	r3, #0
    2536:	9300      	str	r3, [sp, #0]
    2538:	2300      	movs	r3, #0
    253a:	4c06      	ldr	r4, [pc, #24]	; (2554 <gsm_enable_list_current_calls_of_ME+0x2c>)
    253c:	47a0      	blx	r4
    253e:	0003      	movs	r3, r0
}
    2540:	0018      	movs	r0, r3
    2542:	46bd      	mov	sp, r7
    2544:	b001      	add	sp, #4
    2546:	bd90      	pop	{r4, r7, pc}
    2548:	00001388 	.word	0x00001388
    254c:	00018568 	.word	0x00018568
    2550:	00018688 	.word	0x00018688
    2554:	00002161 	.word	0x00002161

00002558 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
    2558:	b590      	push	{r4, r7, lr}
    255a:	b083      	sub	sp, #12
    255c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
    255e:	4a06      	ldr	r2, [pc, #24]	; (2578 <gsm_factory_reset+0x20>)
    2560:	4906      	ldr	r1, [pc, #24]	; (257c <gsm_factory_reset+0x24>)
    2562:	4807      	ldr	r0, [pc, #28]	; (2580 <gsm_factory_reset+0x28>)
    2564:	2300      	movs	r3, #0
    2566:	9300      	str	r3, [sp, #0]
    2568:	2300      	movs	r3, #0
    256a:	4c06      	ldr	r4, [pc, #24]	; (2584 <gsm_factory_reset+0x2c>)
    256c:	47a0      	blx	r4
    256e:	0003      	movs	r3, r0
}
    2570:	0018      	movs	r0, r3
    2572:	46bd      	mov	sp, r7
    2574:	b001      	add	sp, #4
    2576:	bd90      	pop	{r4, r7, pc}
    2578:	00003a98 	.word	0x00003a98
    257c:	00018568 	.word	0x00018568
    2580:	00018694 	.word	0x00018694
    2584:	00002161 	.word	0x00002161

00002588 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
    2588:	b590      	push	{r4, r7, lr}
    258a:	b083      	sub	sp, #12
    258c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
    258e:	4a06      	ldr	r2, [pc, #24]	; (25a8 <gsm_echo_off+0x20>)
    2590:	4906      	ldr	r1, [pc, #24]	; (25ac <gsm_echo_off+0x24>)
    2592:	4807      	ldr	r0, [pc, #28]	; (25b0 <gsm_echo_off+0x28>)
    2594:	2300      	movs	r3, #0
    2596:	9300      	str	r3, [sp, #0]
    2598:	2300      	movs	r3, #0
    259a:	4c06      	ldr	r4, [pc, #24]	; (25b4 <gsm_echo_off+0x2c>)
    259c:	47a0      	blx	r4
    259e:	0003      	movs	r3, r0
}
    25a0:	0018      	movs	r0, r3
    25a2:	46bd      	mov	sp, r7
    25a4:	b001      	add	sp, #4
    25a6:	bd90      	pop	{r4, r7, pc}
    25a8:	00001388 	.word	0x00001388
    25ac:	00018568 	.word	0x00018568
    25b0:	0001869c 	.word	0x0001869c
    25b4:	00002161 	.word	0x00002161

000025b8 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
    25b8:	b590      	push	{r4, r7, lr}
    25ba:	b083      	sub	sp, #12
    25bc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    25be:	4a06      	ldr	r2, [pc, #24]	; (25d8 <gsm_select_sms_message_formate_text_mode+0x20>)
    25c0:	4906      	ldr	r1, [pc, #24]	; (25dc <gsm_select_sms_message_formate_text_mode+0x24>)
    25c2:	4807      	ldr	r0, [pc, #28]	; (25e0 <gsm_select_sms_message_formate_text_mode+0x28>)
    25c4:	2300      	movs	r3, #0
    25c6:	9300      	str	r3, [sp, #0]
    25c8:	2300      	movs	r3, #0
    25ca:	4c06      	ldr	r4, [pc, #24]	; (25e4 <gsm_select_sms_message_formate_text_mode+0x2c>)
    25cc:	47a0      	blx	r4
    25ce:	0003      	movs	r3, r0
}
    25d0:	0018      	movs	r0, r3
    25d2:	46bd      	mov	sp, r7
    25d4:	b001      	add	sp, #4
    25d6:	bd90      	pop	{r4, r7, pc}
    25d8:	00001388 	.word	0x00001388
    25dc:	00018568 	.word	0x00018568
    25e0:	000186a4 	.word	0x000186a4
    25e4:	00002161 	.word	0x00002161

000025e8 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
    25e8:	b590      	push	{r4, r7, lr}
    25ea:	b083      	sub	sp, #12
    25ec:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
    25ee:	4a06      	ldr	r2, [pc, #24]	; (2608 <gsm_set_sms_text_mode_parameter+0x20>)
    25f0:	4906      	ldr	r1, [pc, #24]	; (260c <gsm_set_sms_text_mode_parameter+0x24>)
    25f2:	4807      	ldr	r0, [pc, #28]	; (2610 <gsm_set_sms_text_mode_parameter+0x28>)
    25f4:	2300      	movs	r3, #0
    25f6:	9300      	str	r3, [sp, #0]
    25f8:	2300      	movs	r3, #0
    25fa:	4c06      	ldr	r4, [pc, #24]	; (2614 <gsm_set_sms_text_mode_parameter+0x2c>)
    25fc:	47a0      	blx	r4
    25fe:	0003      	movs	r3, r0
}
    2600:	0018      	movs	r0, r3
    2602:	46bd      	mov	sp, r7
    2604:	b001      	add	sp, #4
    2606:	bd90      	pop	{r4, r7, pc}
    2608:	00001b58 	.word	0x00001b58
    260c:	00018568 	.word	0x00018568
    2610:	000186b0 	.word	0x000186b0
    2614:	00002161 	.word	0x00002161

00002618 <gsm_getsignalstrength>:
 20--25   4
 26--31   5
 
 */
uint8_t gsm_getsignalstrength(void)
{
    2618:	b5b0      	push	{r4, r5, r7, lr}
    261a:	b088      	sub	sp, #32
    261c:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
    261e:	2316      	movs	r3, #22
    2620:	18fb      	adds	r3, r7, r3
    2622:	2264      	movs	r2, #100	; 0x64
    2624:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2626:	2316      	movs	r3, #22
    2628:	18fb      	adds	r3, r7, r3
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	2101      	movs	r1, #1
    262e:	0018      	movs	r0, r3
    2630:	4b60      	ldr	r3, [pc, #384]	; (27b4 <gsm_getsignalstrength+0x19c>)
    2632:	4798      	blx	r3
    2634:	0003      	movs	r3, r0
    2636:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
    2638:	693b      	ldr	r3, [r7, #16]
    263a:	2b00      	cmp	r3, #0
    263c:	d105      	bne.n	264a <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
    263e:	693b      	ldr	r3, [r7, #16]
    2640:	0018      	movs	r0, r3
    2642:	4b5d      	ldr	r3, [pc, #372]	; (27b8 <gsm_getsignalstrength+0x1a0>)
    2644:	4798      	blx	r3
		return 0;
    2646:	2300      	movs	r3, #0
    2648:	e0af      	b.n	27aa <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    264a:	2316      	movs	r3, #22
    264c:	18fb      	adds	r3, r7, r3
    264e:	781a      	ldrb	r2, [r3, #0]
    2650:	693b      	ldr	r3, [r7, #16]
    2652:	2100      	movs	r1, #0
    2654:	0018      	movs	r0, r3
    2656:	4b59      	ldr	r3, [pc, #356]	; (27bc <gsm_getsignalstrength+0x1a4>)
    2658:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
    265a:	230f      	movs	r3, #15
    265c:	18fc      	adds	r4, r7, r3
    265e:	2316      	movs	r3, #22
    2660:	18fb      	adds	r3, r7, r3
    2662:	781a      	ldrb	r2, [r3, #0]
    2664:	4d56      	ldr	r5, [pc, #344]	; (27c0 <gsm_getsignalstrength+0x1a8>)
    2666:	4957      	ldr	r1, [pc, #348]	; (27c4 <gsm_getsignalstrength+0x1ac>)
    2668:	4857      	ldr	r0, [pc, #348]	; (27c8 <gsm_getsignalstrength+0x1b0>)
    266a:	693b      	ldr	r3, [r7, #16]
    266c:	9300      	str	r3, [sp, #0]
    266e:	0013      	movs	r3, r2
    2670:	002a      	movs	r2, r5
    2672:	4d56      	ldr	r5, [pc, #344]	; (27cc <gsm_getsignalstrength+0x1b4>)
    2674:	47a8      	blx	r5
    2676:	0003      	movs	r3, r0
    2678:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
    267a:	230f      	movs	r3, #15
    267c:	18fb      	adds	r3, r7, r3
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2b00      	cmp	r3, #0
    2682:	d000      	beq.n	2686 <gsm_getsignalstrength+0x6e>
    2684:	e086      	b.n	2794 <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
    2686:	4a52      	ldr	r2, [pc, #328]	; (27d0 <gsm_getsignalstrength+0x1b8>)
    2688:	693b      	ldr	r3, [r7, #16]
    268a:	0011      	movs	r1, r2
    268c:	0018      	movs	r0, r3
    268e:	4b51      	ldr	r3, [pc, #324]	; (27d4 <gsm_getsignalstrength+0x1bc>)
    2690:	4798      	blx	r3
    2692:	1e03      	subs	r3, r0, #0
    2694:	d000      	beq.n	2698 <gsm_getsignalstrength+0x80>
    2696:	e078      	b.n	278a <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
    2698:	4a4f      	ldr	r2, [pc, #316]	; (27d8 <gsm_getsignalstrength+0x1c0>)
    269a:	693b      	ldr	r3, [r7, #16]
    269c:	0011      	movs	r1, r2
    269e:	0018      	movs	r0, r3
    26a0:	4b4e      	ldr	r3, [pc, #312]	; (27dc <gsm_getsignalstrength+0x1c4>)
    26a2:	4798      	blx	r3
    26a4:	0003      	movs	r3, r0
    26a6:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
    26a8:	4b4b      	ldr	r3, [pc, #300]	; (27d8 <gsm_getsignalstrength+0x1c0>)
    26aa:	0019      	movs	r1, r3
    26ac:	2000      	movs	r0, #0
    26ae:	4b4b      	ldr	r3, [pc, #300]	; (27dc <gsm_getsignalstrength+0x1c4>)
    26b0:	4798      	blx	r3
    26b2:	0003      	movs	r3, r0
    26b4:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
    26b6:	4a4a      	ldr	r2, [pc, #296]	; (27e0 <gsm_getsignalstrength+0x1c8>)
    26b8:	68bb      	ldr	r3, [r7, #8]
    26ba:	0011      	movs	r1, r2
    26bc:	0018      	movs	r0, r3
    26be:	4b47      	ldr	r3, [pc, #284]	; (27dc <gsm_getsignalstrength+0x1c4>)
    26c0:	4798      	blx	r3
    26c2:	0003      	movs	r3, r0
    26c4:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
    26c6:	68bb      	ldr	r3, [r7, #8]
    26c8:	0018      	movs	r0, r3
    26ca:	4b46      	ldr	r3, [pc, #280]	; (27e4 <gsm_getsignalstrength+0x1cc>)
    26cc:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
    26ce:	68bb      	ldr	r3, [r7, #8]
    26d0:	0018      	movs	r0, r3
    26d2:	4b45      	ldr	r3, [pc, #276]	; (27e8 <gsm_getsignalstrength+0x1d0>)
    26d4:	4798      	blx	r3
    26d6:	0002      	movs	r2, r0
    26d8:	1dfb      	adds	r3, r7, #7
    26da:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
    26dc:	1dfb      	adds	r3, r7, #7
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d007      	beq.n	26f4 <gsm_getsignalstrength+0xdc>
    26e4:	1dfb      	adds	r3, r7, #7
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	2b01      	cmp	r3, #1
    26ea:	d003      	beq.n	26f4 <gsm_getsignalstrength+0xdc>
    26ec:	1dfb      	adds	r3, r7, #7
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	2b63      	cmp	r3, #99	; 0x63
    26f2:	d104      	bne.n	26fe <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
    26f4:	2317      	movs	r3, #23
    26f6:	18fb      	adds	r3, r7, r3
    26f8:	2200      	movs	r2, #0
    26fa:	701a      	strb	r2, [r3, #0]
    26fc:	e04e      	b.n	279c <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
    26fe:	1dfb      	adds	r3, r7, #7
    2700:	781b      	ldrb	r3, [r3, #0]
    2702:	2b01      	cmp	r3, #1
    2704:	d908      	bls.n	2718 <gsm_getsignalstrength+0x100>
    2706:	1dfb      	adds	r3, r7, #7
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	2b07      	cmp	r3, #7
    270c:	d804      	bhi.n	2718 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
    270e:	2317      	movs	r3, #23
    2710:	18fb      	adds	r3, r7, r3
    2712:	2201      	movs	r2, #1
    2714:	701a      	strb	r2, [r3, #0]
    2716:	e041      	b.n	279c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
    2718:	1dfb      	adds	r3, r7, #7
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	2b07      	cmp	r3, #7
    271e:	d908      	bls.n	2732 <gsm_getsignalstrength+0x11a>
    2720:	1dfb      	adds	r3, r7, #7
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	2b0d      	cmp	r3, #13
    2726:	d804      	bhi.n	2732 <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
    2728:	2317      	movs	r3, #23
    272a:	18fb      	adds	r3, r7, r3
    272c:	2202      	movs	r2, #2
    272e:	701a      	strb	r2, [r3, #0]
    2730:	e034      	b.n	279c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
    2732:	1dfb      	adds	r3, r7, #7
    2734:	781b      	ldrb	r3, [r3, #0]
    2736:	2b0d      	cmp	r3, #13
    2738:	d908      	bls.n	274c <gsm_getsignalstrength+0x134>
    273a:	1dfb      	adds	r3, r7, #7
    273c:	781b      	ldrb	r3, [r3, #0]
    273e:	2b13      	cmp	r3, #19
    2740:	d804      	bhi.n	274c <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
    2742:	2317      	movs	r3, #23
    2744:	18fb      	adds	r3, r7, r3
    2746:	2203      	movs	r2, #3
    2748:	701a      	strb	r2, [r3, #0]
    274a:	e027      	b.n	279c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
    274c:	1dfb      	adds	r3, r7, #7
    274e:	781b      	ldrb	r3, [r3, #0]
    2750:	2b13      	cmp	r3, #19
    2752:	d908      	bls.n	2766 <gsm_getsignalstrength+0x14e>
    2754:	1dfb      	adds	r3, r7, #7
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	2b19      	cmp	r3, #25
    275a:	d804      	bhi.n	2766 <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
    275c:	2317      	movs	r3, #23
    275e:	18fb      	adds	r3, r7, r3
    2760:	2204      	movs	r2, #4
    2762:	701a      	strb	r2, [r3, #0]
    2764:	e01a      	b.n	279c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
    2766:	1dfb      	adds	r3, r7, #7
    2768:	781b      	ldrb	r3, [r3, #0]
    276a:	2b19      	cmp	r3, #25
    276c:	d908      	bls.n	2780 <gsm_getsignalstrength+0x168>
    276e:	1dfb      	adds	r3, r7, #7
    2770:	781b      	ldrb	r3, [r3, #0]
    2772:	2b1f      	cmp	r3, #31
    2774:	d804      	bhi.n	2780 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
    2776:	2317      	movs	r3, #23
    2778:	18fb      	adds	r3, r7, r3
    277a:	2205      	movs	r2, #5
    277c:	701a      	strb	r2, [r3, #0]
    277e:	e00d      	b.n	279c <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
    2780:	2317      	movs	r3, #23
    2782:	18fb      	adds	r3, r7, r3
    2784:	2200      	movs	r2, #0
    2786:	701a      	strb	r2, [r3, #0]
    2788:	e008      	b.n	279c <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
    278a:	2317      	movs	r3, #23
    278c:	18fb      	adds	r3, r7, r3
    278e:	2200      	movs	r2, #0
    2790:	701a      	strb	r2, [r3, #0]
    2792:	e003      	b.n	279c <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
    2794:	2317      	movs	r3, #23
    2796:	18fb      	adds	r3, r7, r3
    2798:	2200      	movs	r2, #0
    279a:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
    279c:	693b      	ldr	r3, [r7, #16]
    279e:	0018      	movs	r0, r3
    27a0:	4b05      	ldr	r3, [pc, #20]	; (27b8 <gsm_getsignalstrength+0x1a0>)
    27a2:	4798      	blx	r3
	
	return sig_strength;
    27a4:	2317      	movs	r3, #23
    27a6:	18fb      	adds	r3, r7, r3
    27a8:	781b      	ldrb	r3, [r3, #0]
}
    27aa:	0018      	movs	r0, r3
    27ac:	46bd      	mov	sp, r7
    27ae:	b006      	add	sp, #24
    27b0:	bdb0      	pop	{r4, r5, r7, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	000177a9 	.word	0x000177a9
    27b8:	00017849 	.word	0x00017849
    27bc:	000178b7 	.word	0x000178b7
    27c0:	00001388 	.word	0x00001388
    27c4:	00018568 	.word	0x00018568
    27c8:	000186dc 	.word	0x000186dc
    27cc:	00002161 	.word	0x00002161
    27d0:	000186e4 	.word	0x000186e4
    27d4:	00017b77 	.word	0x00017b77
    27d8:	00018680 	.word	0x00018680
    27dc:	00017ba9 	.word	0x00017ba9
    27e0:	00018684 	.word	0x00018684
    27e4:	000027ed 	.word	0x000027ed
    27e8:	0001779d 	.word	0x0001779d

000027ec <RemoveSpaces>:

void RemoveSpaces(char* source)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b084      	sub	sp, #16
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
	char* i = source;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	60fb      	str	r3, [r7, #12]
	char* j = source;
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
    27fc:	e00c      	b.n	2818 <RemoveSpaces+0x2c>
	{
		*i = *j++;
    27fe:	68bb      	ldr	r3, [r7, #8]
    2800:	1c5a      	adds	r2, r3, #1
    2802:	60ba      	str	r2, [r7, #8]
    2804:	781a      	ldrb	r2, [r3, #0]
    2806:	68fb      	ldr	r3, [r7, #12]
    2808:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
    280a:	68fb      	ldr	r3, [r7, #12]
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	2b20      	cmp	r3, #32
    2810:	d002      	beq.n	2818 <RemoveSpaces+0x2c>
		i++;
    2812:	68fb      	ldr	r3, [r7, #12]
    2814:	3301      	adds	r3, #1
    2816:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
    2818:	68bb      	ldr	r3, [r7, #8]
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	2b00      	cmp	r3, #0
    281e:	d1ee      	bne.n	27fe <RemoveSpaces+0x12>
	}
	*i = 0;
    2820:	68fb      	ldr	r3, [r7, #12]
    2822:	2200      	movs	r2, #0
    2824:	701a      	strb	r2, [r3, #0]
}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	46bd      	mov	sp, r7
    282a:	b004      	add	sp, #16
    282c:	bd80      	pop	{r7, pc}
	...

00002830 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
    2830:	b590      	push	{r4, r7, lr}
    2832:	b083      	sub	sp, #12
    2834:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
    2836:	4a06      	ldr	r2, [pc, #24]	; (2850 <gsm_enable_new_sms_message_indications+0x20>)
    2838:	4906      	ldr	r1, [pc, #24]	; (2854 <gsm_enable_new_sms_message_indications+0x24>)
    283a:	4807      	ldr	r0, [pc, #28]	; (2858 <gsm_enable_new_sms_message_indications+0x28>)
    283c:	2300      	movs	r3, #0
    283e:	9300      	str	r3, [sp, #0]
    2840:	2300      	movs	r3, #0
    2842:	4c06      	ldr	r4, [pc, #24]	; (285c <gsm_enable_new_sms_message_indications+0x2c>)
    2844:	47a0      	blx	r4
    2846:	0003      	movs	r3, r0
}
    2848:	0018      	movs	r0, r3
    284a:	46bd      	mov	sp, r7
    284c:	b001      	add	sp, #4
    284e:	bd90      	pop	{r4, r7, pc}
    2850:	00001388 	.word	0x00001388
    2854:	00018568 	.word	0x00018568
    2858:	000186e8 	.word	0x000186e8
    285c:	00002161 	.word	0x00002161

00002860 <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
    2860:	b5b0      	push	{r4, r5, r7, lr}
    2862:	b088      	sub	sp, #32
    2864:	af02      	add	r7, sp, #8
    2866:	6078      	str	r0, [r7, #4]
    2868:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250) 
    286a:	683b      	ldr	r3, [r7, #0]
    286c:	0018      	movs	r0, r3
    286e:	4b3b      	ldr	r3, [pc, #236]	; (295c <gsm_send_sms+0xfc>)
    2870:	4798      	blx	r3
    2872:	0003      	movs	r3, r0
    2874:	2bfa      	cmp	r3, #250	; 0xfa
    2876:	d901      	bls.n	287c <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
    2878:	2303      	movs	r3, #3
    287a:	e06b      	b.n	2954 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6) 
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	0018      	movs	r0, r3
    2880:	4b36      	ldr	r3, [pc, #216]	; (295c <gsm_send_sms+0xfc>)
    2882:	4798      	blx	r3
    2884:	0003      	movs	r3, r0
    2886:	2b05      	cmp	r3, #5
    2888:	d801      	bhi.n	288e <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
    288a:	2304      	movs	r3, #4
    288c:	e062      	b.n	2954 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
    288e:	2317      	movs	r3, #23
    2890:	18fb      	adds	r3, r7, r3
    2892:	22fa      	movs	r2, #250	; 0xfa
    2894:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2896:	2317      	movs	r3, #23
    2898:	18fb      	adds	r3, r7, r3
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	2101      	movs	r1, #1
    289e:	0018      	movs	r0, r3
    28a0:	4b2f      	ldr	r3, [pc, #188]	; (2960 <gsm_send_sms+0x100>)
    28a2:	4798      	blx	r3
    28a4:	0003      	movs	r3, r0
    28a6:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
    28a8:	693b      	ldr	r3, [r7, #16]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d101      	bne.n	28b2 <gsm_send_sms+0x52>
	{
		return 0;
    28ae:	2300      	movs	r3, #0
    28b0:	e050      	b.n	2954 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    28b2:	2317      	movs	r3, #23
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	781a      	ldrb	r2, [r3, #0]
    28b8:	693b      	ldr	r3, [r7, #16]
    28ba:	2100      	movs	r1, #0
    28bc:	0018      	movs	r0, r3
    28be:	4b29      	ldr	r3, [pc, #164]	; (2964 <gsm_send_sms+0x104>)
    28c0:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
    28c2:	2317      	movs	r3, #23
    28c4:	18fb      	adds	r3, r7, r3
    28c6:	7819      	ldrb	r1, [r3, #0]
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	4a27      	ldr	r2, [pc, #156]	; (2968 <gsm_send_sms+0x108>)
    28cc:	6938      	ldr	r0, [r7, #16]
    28ce:	4c27      	ldr	r4, [pc, #156]	; (296c <gsm_send_sms+0x10c>)
    28d0:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
    28d2:	4a27      	ldr	r2, [pc, #156]	; (2970 <gsm_send_sms+0x110>)
    28d4:	4927      	ldr	r1, [pc, #156]	; (2974 <gsm_send_sms+0x114>)
    28d6:	6938      	ldr	r0, [r7, #16]
    28d8:	2300      	movs	r3, #0
    28da:	9300      	str	r3, [sp, #0]
    28dc:	2300      	movs	r3, #0
    28de:	4c26      	ldr	r4, [pc, #152]	; (2978 <gsm_send_sms+0x118>)
    28e0:	47a0      	blx	r4
    28e2:	1e03      	subs	r3, r0, #0
    28e4:	d131      	bne.n	294a <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
    28e6:	23fa      	movs	r3, #250	; 0xfa
    28e8:	005b      	lsls	r3, r3, #1
    28ea:	0018      	movs	r0, r3
    28ec:	4b23      	ldr	r3, [pc, #140]	; (297c <gsm_send_sms+0x11c>)
    28ee:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
    28f0:	2317      	movs	r3, #23
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	781a      	ldrb	r2, [r3, #0]
    28f6:	693b      	ldr	r3, [r7, #16]
    28f8:	2100      	movs	r1, #0
    28fa:	0018      	movs	r0, r3
    28fc:	4b19      	ldr	r3, [pc, #100]	; (2964 <gsm_send_sms+0x104>)
    28fe:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
    2900:	2317      	movs	r3, #23
    2902:	18fb      	adds	r3, r7, r3
    2904:	7819      	ldrb	r1, [r3, #0]
    2906:	683b      	ldr	r3, [r7, #0]
    2908:	4a1d      	ldr	r2, [pc, #116]	; (2980 <gsm_send_sms+0x120>)
    290a:	6938      	ldr	r0, [r7, #16]
    290c:	4c17      	ldr	r4, [pc, #92]	; (296c <gsm_send_sms+0x10c>)
    290e:	47a0      	blx	r4
		
	    err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
    2910:	230f      	movs	r3, #15
    2912:	18fc      	adds	r4, r7, r3
    2914:	4a16      	ldr	r2, [pc, #88]	; (2970 <gsm_send_sms+0x110>)
    2916:	491b      	ldr	r1, [pc, #108]	; (2984 <gsm_send_sms+0x124>)
    2918:	6938      	ldr	r0, [r7, #16]
    291a:	2300      	movs	r3, #0
    291c:	9300      	str	r3, [sp, #0]
    291e:	2300      	movs	r3, #0
    2920:	4d15      	ldr	r5, [pc, #84]	; (2978 <gsm_send_sms+0x118>)
    2922:	47a8      	blx	r5
    2924:	0003      	movs	r3, r0
    2926:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
    2928:	230f      	movs	r3, #15
    292a:	18fb      	adds	r3, r7, r3
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	2b00      	cmp	r3, #0
    2930:	d105      	bne.n	293e <gsm_send_sms+0xde>
		{
			free(cmdx);
    2932:	693b      	ldr	r3, [r7, #16]
    2934:	0018      	movs	r0, r3
    2936:	4b14      	ldr	r3, [pc, #80]	; (2988 <gsm_send_sms+0x128>)
    2938:	4798      	blx	r3
			return GSM_ERROR_NONE;
    293a:	2300      	movs	r3, #0
    293c:	e00a      	b.n	2954 <gsm_send_sms+0xf4>
		}
		else 
		{
			free(cmdx);
    293e:	693b      	ldr	r3, [r7, #16]
    2940:	0018      	movs	r0, r3
    2942:	4b11      	ldr	r3, [pc, #68]	; (2988 <gsm_send_sms+0x128>)
    2944:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
    2946:	2306      	movs	r3, #6
    2948:	e004      	b.n	2954 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
    294a:	693b      	ldr	r3, [r7, #16]
    294c:	0018      	movs	r0, r3
    294e:	4b0e      	ldr	r3, [pc, #56]	; (2988 <gsm_send_sms+0x128>)
    2950:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
    2952:	2306      	movs	r3, #6
	}
}
    2954:	0018      	movs	r0, r3
    2956:	46bd      	mov	sp, r7
    2958:	b006      	add	sp, #24
    295a:	bdb0      	pop	{r4, r5, r7, pc}
    295c:	00017b47 	.word	0x00017b47
    2960:	000177a9 	.word	0x000177a9
    2964:	000178b7 	.word	0x000178b7
    2968:	00018710 	.word	0x00018710
    296c:	00017a59 	.word	0x00017a59
    2970:	0000ea60 	.word	0x0000ea60
    2974:	00018720 	.word	0x00018720
    2978:	00002161 	.word	0x00002161
    297c:	0000ebf9 	.word	0x0000ebf9
    2980:	00018724 	.word	0x00018724
    2984:	00018568 	.word	0x00018568
    2988:	00017849 	.word	0x00017849

0000298c <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
    298c:	b590      	push	{r4, r7, lr}
    298e:	b08f      	sub	sp, #60	; 0x3c
    2990:	af02      	add	r7, sp, #8
    2992:	60b9      	str	r1, [r7, #8]
    2994:	0011      	movs	r1, r2
    2996:	607b      	str	r3, [r7, #4]
    2998:	230f      	movs	r3, #15
    299a:	18fb      	adds	r3, r7, r3
    299c:	1c02      	adds	r2, r0, #0
    299e:	701a      	strb	r2, [r3, #0]
    29a0:	230e      	movs	r3, #14
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	1c0a      	adds	r2, r1, #0
    29a6:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
    29a8:	232f      	movs	r3, #47	; 0x2f
    29aa:	18fb      	adds	r3, r7, r3
    29ac:	22e6      	movs	r2, #230	; 0xe6
    29ae:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    29b0:	232f      	movs	r3, #47	; 0x2f
    29b2:	18fb      	adds	r3, r7, r3
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	2101      	movs	r1, #1
    29b8:	0018      	movs	r0, r3
    29ba:	4b6e      	ldr	r3, [pc, #440]	; (2b74 <gsm_read_sms+0x1e8>)
    29bc:	4798      	blx	r3
    29be:	0003      	movs	r3, r0
    29c0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
    29c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29c4:	2b00      	cmp	r3, #0
    29c6:	d105      	bne.n	29d4 <gsm_read_sms+0x48>
	{
		free(cmdx);
    29c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29ca:	0018      	movs	r0, r3
    29cc:	4b6a      	ldr	r3, [pc, #424]	; (2b78 <gsm_read_sms+0x1ec>)
    29ce:	4798      	blx	r3
		return 0;
    29d0:	2300      	movs	r3, #0
    29d2:	e0ca      	b.n	2b6a <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    29d4:	232f      	movs	r3, #47	; 0x2f
    29d6:	18fb      	adds	r3, r7, r3
    29d8:	781a      	ldrb	r2, [r3, #0]
    29da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29dc:	2100      	movs	r1, #0
    29de:	0018      	movs	r0, r3
    29e0:	4b66      	ldr	r3, [pc, #408]	; (2b7c <gsm_read_sms+0x1f0>)
    29e2:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
    29e4:	2310      	movs	r3, #16
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	0018      	movs	r0, r3
    29ea:	230a      	movs	r3, #10
    29ec:	001a      	movs	r2, r3
    29ee:	2100      	movs	r1, #0
    29f0:	4b62      	ldr	r3, [pc, #392]	; (2b7c <gsm_read_sms+0x1f0>)
    29f2:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
    29f4:	232f      	movs	r3, #47	; 0x2f
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	7819      	ldrb	r1, [r3, #0]
    29fa:	230f      	movs	r3, #15
    29fc:	18fb      	adds	r3, r7, r3
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	4a5f      	ldr	r2, [pc, #380]	; (2b80 <gsm_read_sms+0x1f4>)
    2a02:	2010      	movs	r0, #16
    2a04:	1838      	adds	r0, r7, r0
    2a06:	4c5f      	ldr	r4, [pc, #380]	; (2b84 <gsm_read_sms+0x1f8>)
    2a08:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
    2a0a:	232f      	movs	r3, #47	; 0x2f
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	781a      	ldrb	r2, [r3, #0]
    2a10:	4c5d      	ldr	r4, [pc, #372]	; (2b88 <gsm_read_sms+0x1fc>)
    2a12:	495e      	ldr	r1, [pc, #376]	; (2b8c <gsm_read_sms+0x200>)
    2a14:	2310      	movs	r3, #16
    2a16:	18f8      	adds	r0, r7, r3
    2a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a1a:	9300      	str	r3, [sp, #0]
    2a1c:	0013      	movs	r3, r2
    2a1e:	0022      	movs	r2, r4
    2a20:	4c5b      	ldr	r4, [pc, #364]	; (2b90 <gsm_read_sms+0x204>)
    2a22:	47a0      	blx	r4
    2a24:	1e03      	subs	r3, r0, #0
    2a26:	d000      	beq.n	2a2a <gsm_read_sms+0x9e>
    2a28:	e094      	b.n	2b54 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
    2a2a:	4a5a      	ldr	r2, [pc, #360]	; (2b94 <gsm_read_sms+0x208>)
    2a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a2e:	0011      	movs	r1, r2
    2a30:	0018      	movs	r0, r3
    2a32:	4b59      	ldr	r3, [pc, #356]	; (2b98 <gsm_read_sms+0x20c>)
    2a34:	4798      	blx	r3
    2a36:	0003      	movs	r3, r0
    2a38:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
    2a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d100      	bne.n	2a42 <gsm_read_sms+0xb6>
    2a40:	e082      	b.n	2b48 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
    2a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a44:	212c      	movs	r1, #44	; 0x2c
    2a46:	0018      	movs	r0, r3
    2a48:	4b54      	ldr	r3, [pc, #336]	; (2b9c <gsm_read_sms+0x210>)
    2a4a:	4798      	blx	r3
    2a4c:	0003      	movs	r3, r0
    2a4e:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
    2a50:	6a3b      	ldr	r3, [r7, #32]
    2a52:	3302      	adds	r3, #2
    2a54:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
    2a56:	69fb      	ldr	r3, [r7, #28]
    2a58:	2122      	movs	r1, #34	; 0x22
    2a5a:	0018      	movs	r0, r3
    2a5c:	4b4f      	ldr	r3, [pc, #316]	; (2b9c <gsm_read_sms+0x210>)
    2a5e:	4798      	blx	r3
    2a60:	0003      	movs	r3, r0
    2a62:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
    2a64:	6a3b      	ldr	r3, [r7, #32]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d02a      	beq.n	2ac0 <gsm_read_sms+0x134>
			{
				*p_char = 0;
    2a6a:	6a3b      	ldr	r3, [r7, #32]
    2a6c:	2200      	movs	r2, #0
    2a6e:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
    2a70:	69fb      	ldr	r3, [r7, #28]
    2a72:	0018      	movs	r0, r3
    2a74:	4b4a      	ldr	r3, [pc, #296]	; (2ba0 <gsm_read_sms+0x214>)
    2a76:	4798      	blx	r3
    2a78:	0002      	movs	r2, r0
    2a7a:	231b      	movs	r3, #27
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
    2a80:	231b      	movs	r3, #27
    2a82:	18fa      	adds	r2, r7, r3
    2a84:	230e      	movs	r3, #14
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	7812      	ldrb	r2, [r2, #0]
    2a8a:	781b      	ldrb	r3, [r3, #0]
    2a8c:	429a      	cmp	r2, r3
    2a8e:	d206      	bcs.n	2a9e <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
    2a90:	69fa      	ldr	r2, [r7, #28]
    2a92:	68bb      	ldr	r3, [r7, #8]
    2a94:	0011      	movs	r1, r2
    2a96:	0018      	movs	r0, r3
    2a98:	4b42      	ldr	r3, [pc, #264]	; (2ba4 <gsm_read_sms+0x218>)
    2a9a:	4798      	blx	r3
    2a9c:	e010      	b.n	2ac0 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
    2a9e:	230e      	movs	r3, #14
    2aa0:	18fb      	adds	r3, r7, r3
    2aa2:	781b      	ldrb	r3, [r3, #0]
    2aa4:	3b01      	subs	r3, #1
    2aa6:	001a      	movs	r2, r3
    2aa8:	69f9      	ldr	r1, [r7, #28]
    2aaa:	68bb      	ldr	r3, [r7, #8]
    2aac:	0018      	movs	r0, r3
    2aae:	4b3e      	ldr	r3, [pc, #248]	; (2ba8 <gsm_read_sms+0x21c>)
    2ab0:	4798      	blx	r3
					phone_number[max_phone_len]=0;
    2ab2:	230e      	movs	r3, #14
    2ab4:	18fb      	adds	r3, r7, r3
    2ab6:	781b      	ldrb	r3, [r3, #0]
    2ab8:	68ba      	ldr	r2, [r7, #8]
    2aba:	18d3      	adds	r3, r2, r3
    2abc:	2200      	movs	r2, #0
    2abe:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
    2ac0:	6a3b      	ldr	r3, [r7, #32]
    2ac2:	3301      	adds	r3, #1
    2ac4:	210a      	movs	r1, #10
    2ac6:	0018      	movs	r0, r3
    2ac8:	4b34      	ldr	r3, [pc, #208]	; (2b9c <gsm_read_sms+0x210>)
    2aca:	4798      	blx	r3
    2acc:	0003      	movs	r3, r0
    2ace:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
    2ad0:	6a3b      	ldr	r3, [r7, #32]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d044      	beq.n	2b60 <gsm_read_sms+0x1d4>
			{
				p_char++;
    2ad6:	6a3b      	ldr	r3, [r7, #32]
    2ad8:	3301      	adds	r3, #1
    2ada:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
    2adc:	6a3b      	ldr	r3, [r7, #32]
    2ade:	210d      	movs	r1, #13
    2ae0:	0018      	movs	r0, r3
    2ae2:	4b2e      	ldr	r3, [pc, #184]	; (2b9c <gsm_read_sms+0x210>)
    2ae4:	4798      	blx	r3
    2ae6:	0003      	movs	r3, r0
    2ae8:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
    2aea:	69fb      	ldr	r3, [r7, #28]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d002      	beq.n	2af6 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
    2af0:	69fb      	ldr	r3, [r7, #28]
    2af2:	2200      	movs	r2, #0
    2af4:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
    2af6:	6a3b      	ldr	r3, [r7, #32]
    2af8:	0018      	movs	r0, r3
    2afa:	4b29      	ldr	r3, [pc, #164]	; (2ba0 <gsm_read_sms+0x214>)
    2afc:	4798      	blx	r3
    2afe:	0002      	movs	r2, r0
    2b00:	231b      	movs	r3, #27
    2b02:	18fb      	adds	r3, r7, r3
    2b04:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
    2b06:	231b      	movs	r3, #27
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	2240      	movs	r2, #64	; 0x40
    2b0c:	18b9      	adds	r1, r7, r2
    2b0e:	781a      	ldrb	r2, [r3, #0]
    2b10:	780b      	ldrb	r3, [r1, #0]
    2b12:	429a      	cmp	r2, r3
    2b14:	d206      	bcs.n	2b24 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
    2b16:	6a3a      	ldr	r2, [r7, #32]
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	0011      	movs	r1, r2
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b21      	ldr	r3, [pc, #132]	; (2ba4 <gsm_read_sms+0x218>)
    2b20:	4798      	blx	r3
    2b22:	e01d      	b.n	2b60 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
    2b24:	2340      	movs	r3, #64	; 0x40
    2b26:	18fb      	adds	r3, r7, r3
    2b28:	781b      	ldrb	r3, [r3, #0]
    2b2a:	3b01      	subs	r3, #1
    2b2c:	001a      	movs	r2, r3
    2b2e:	6a39      	ldr	r1, [r7, #32]
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	0018      	movs	r0, r3
    2b34:	4b1c      	ldr	r3, [pc, #112]	; (2ba8 <gsm_read_sms+0x21c>)
    2b36:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
    2b38:	2340      	movs	r3, #64	; 0x40
    2b3a:	18fb      	adds	r3, r7, r3
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	687a      	ldr	r2, [r7, #4]
    2b40:	18d3      	adds	r3, r2, r3
    2b42:	2200      	movs	r2, #0
    2b44:	701a      	strb	r2, [r3, #0]
    2b46:	e00b      	b.n	2b60 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
    2b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b4a:	0018      	movs	r0, r3
    2b4c:	4b0a      	ldr	r3, [pc, #40]	; (2b78 <gsm_read_sms+0x1ec>)
    2b4e:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE; 
    2b50:	230c      	movs	r3, #12
    2b52:	e00a      	b.n	2b6a <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
    2b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b56:	0018      	movs	r0, r3
    2b58:	4b07      	ldr	r3, [pc, #28]	; (2b78 <gsm_read_sms+0x1ec>)
    2b5a:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE; 
    2b5c:	230c      	movs	r3, #12
    2b5e:	e004      	b.n	2b6a <gsm_read_sms+0x1de>
	}
	free(cmdx);
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	0018      	movs	r0, r3
    2b64:	4b04      	ldr	r3, [pc, #16]	; (2b78 <gsm_read_sms+0x1ec>)
    2b66:	4798      	blx	r3
	return GSM_ERROR_NONE; 
    2b68:	2300      	movs	r3, #0
}
    2b6a:	0018      	movs	r0, r3
    2b6c:	46bd      	mov	sp, r7
    2b6e:	b00d      	add	sp, #52	; 0x34
    2b70:	bd90      	pop	{r4, r7, pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	000177a9 	.word	0x000177a9
    2b78:	00017849 	.word	0x00017849
    2b7c:	000178b7 	.word	0x000178b7
    2b80:	00018770 	.word	0x00018770
    2b84:	00017a59 	.word	0x00017a59
    2b88:	00001388 	.word	0x00001388
    2b8c:	00018568 	.word	0x00018568
    2b90:	00002161 	.word	0x00002161
    2b94:	0001877c 	.word	0x0001877c
    2b98:	00017b77 	.word	0x00017b77
    2b9c:	00017b1b 	.word	0x00017b1b
    2ba0:	00017b47 	.word	0x00017b47
    2ba4:	00017b37 	.word	0x00017b37
    2ba8:	00017881 	.word	0x00017881

00002bac <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
    2bac:	b5b0      	push	{r4, r5, r7, lr}
    2bae:	b088      	sub	sp, #32
    2bb0:	af02      	add	r7, sp, #8
    2bb2:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2bb4:	2317      	movs	r3, #23
    2bb6:	18fb      	adds	r3, r7, r3
    2bb8:	221e      	movs	r2, #30
    2bba:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2bbc:	2317      	movs	r3, #23
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	2101      	movs	r1, #1
    2bc4:	0018      	movs	r0, r3
    2bc6:	4b18      	ldr	r3, [pc, #96]	; (2c28 <gsm_call_to_dial_a_number+0x7c>)
    2bc8:	4798      	blx	r3
    2bca:	0003      	movs	r3, r0
    2bcc:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2bce:	693b      	ldr	r3, [r7, #16]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d101      	bne.n	2bd8 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
    2bd4:	2300      	movs	r3, #0
    2bd6:	e023      	b.n	2c20 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2bd8:	2317      	movs	r3, #23
    2bda:	18fb      	adds	r3, r7, r3
    2bdc:	781a      	ldrb	r2, [r3, #0]
    2bde:	693b      	ldr	r3, [r7, #16]
    2be0:	2100      	movs	r1, #0
    2be2:	0018      	movs	r0, r3
    2be4:	4b11      	ldr	r3, [pc, #68]	; (2c2c <gsm_call_to_dial_a_number+0x80>)
    2be6:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
    2be8:	2317      	movs	r3, #23
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	7819      	ldrb	r1, [r3, #0]
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	4a0f      	ldr	r2, [pc, #60]	; (2c30 <gsm_call_to_dial_a_number+0x84>)
    2bf2:	6938      	ldr	r0, [r7, #16]
    2bf4:	4c0f      	ldr	r4, [pc, #60]	; (2c34 <gsm_call_to_dial_a_number+0x88>)
    2bf6:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
    2bf8:	230f      	movs	r3, #15
    2bfa:	18fc      	adds	r4, r7, r3
    2bfc:	23fa      	movs	r3, #250	; 0xfa
    2bfe:	00da      	lsls	r2, r3, #3
    2c00:	490d      	ldr	r1, [pc, #52]	; (2c38 <gsm_call_to_dial_a_number+0x8c>)
    2c02:	6938      	ldr	r0, [r7, #16]
    2c04:	2300      	movs	r3, #0
    2c06:	9300      	str	r3, [sp, #0]
    2c08:	2300      	movs	r3, #0
    2c0a:	4d0c      	ldr	r5, [pc, #48]	; (2c3c <gsm_call_to_dial_a_number+0x90>)
    2c0c:	47a8      	blx	r5
    2c0e:	0003      	movs	r3, r0
    2c10:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2c12:	693b      	ldr	r3, [r7, #16]
    2c14:	0018      	movs	r0, r3
    2c16:	4b0a      	ldr	r3, [pc, #40]	; (2c40 <gsm_call_to_dial_a_number+0x94>)
    2c18:	4798      	blx	r3
	return err;
    2c1a:	230f      	movs	r3, #15
    2c1c:	18fb      	adds	r3, r7, r3
    2c1e:	781b      	ldrb	r3, [r3, #0]
	
}
    2c20:	0018      	movs	r0, r3
    2c22:	46bd      	mov	sp, r7
    2c24:	b006      	add	sp, #24
    2c26:	bdb0      	pop	{r4, r5, r7, pc}
    2c28:	000177a9 	.word	0x000177a9
    2c2c:	000178b7 	.word	0x000178b7
    2c30:	00018784 	.word	0x00018784
    2c34:	00017a59 	.word	0x00017a59
    2c38:	00018568 	.word	0x00018568
    2c3c:	00002161 	.word	0x00002161
    2c40:	00017849 	.word	0x00017849

00002c44 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
    2c44:	b590      	push	{r4, r7, lr}
    2c46:	b083      	sub	sp, #12
    2c48:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2c4a:	4a06      	ldr	r2, [pc, #24]	; (2c64 <gsm_answer_an_incomming_call+0x20>)
    2c4c:	4906      	ldr	r1, [pc, #24]	; (2c68 <gsm_answer_an_incomming_call+0x24>)
    2c4e:	4807      	ldr	r0, [pc, #28]	; (2c6c <gsm_answer_an_incomming_call+0x28>)
    2c50:	2300      	movs	r3, #0
    2c52:	9300      	str	r3, [sp, #0]
    2c54:	2300      	movs	r3, #0
    2c56:	4c06      	ldr	r4, [pc, #24]	; (2c70 <gsm_answer_an_incomming_call+0x2c>)
    2c58:	47a0      	blx	r4
    2c5a:	0003      	movs	r3, r0
}
    2c5c:	0018      	movs	r0, r3
    2c5e:	46bd      	mov	sp, r7
    2c60:	b001      	add	sp, #4
    2c62:	bd90      	pop	{r4, r7, pc}
    2c64:	00001388 	.word	0x00001388
    2c68:	00018568 	.word	0x00018568
    2c6c:	0001878c 	.word	0x0001878c
    2c70:	00002161 	.word	0x00002161

00002c74 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
    2c74:	b590      	push	{r4, r7, lr}
    2c76:	b083      	sub	sp, #12
    2c78:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
    2c7a:	4a06      	ldr	r2, [pc, #24]	; (2c94 <gsm_enable_network_time_update+0x20>)
    2c7c:	4906      	ldr	r1, [pc, #24]	; (2c98 <gsm_enable_network_time_update+0x24>)
    2c7e:	4807      	ldr	r0, [pc, #28]	; (2c9c <gsm_enable_network_time_update+0x28>)
    2c80:	2300      	movs	r3, #0
    2c82:	9300      	str	r3, [sp, #0]
    2c84:	2300      	movs	r3, #0
    2c86:	4c06      	ldr	r4, [pc, #24]	; (2ca0 <gsm_enable_network_time_update+0x2c>)
    2c88:	47a0      	blx	r4
    2c8a:	0003      	movs	r3, r0
}
    2c8c:	0018      	movs	r0, r3
    2c8e:	46bd      	mov	sp, r7
    2c90:	b001      	add	sp, #4
    2c92:	bd90      	pop	{r4, r7, pc}
    2c94:	00002710 	.word	0x00002710
    2c98:	00018568 	.word	0x00018568
    2c9c:	00018794 	.word	0x00018794
    2ca0:	00002161 	.word	0x00002161

00002ca4 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
    2ca4:	b590      	push	{r4, r7, lr}
    2ca6:	b083      	sub	sp, #12
    2ca8:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2caa:	4a06      	ldr	r2, [pc, #24]	; (2cc4 <gsm_enable_DTMF_detection+0x20>)
    2cac:	4906      	ldr	r1, [pc, #24]	; (2cc8 <gsm_enable_DTMF_detection+0x24>)
    2cae:	4807      	ldr	r0, [pc, #28]	; (2ccc <gsm_enable_DTMF_detection+0x28>)
    2cb0:	2300      	movs	r3, #0
    2cb2:	9300      	str	r3, [sp, #0]
    2cb4:	2300      	movs	r3, #0
    2cb6:	4c06      	ldr	r4, [pc, #24]	; (2cd0 <gsm_enable_DTMF_detection+0x2c>)
    2cb8:	47a0      	blx	r4
    2cba:	0003      	movs	r3, r0
}
    2cbc:	0018      	movs	r0, r3
    2cbe:	46bd      	mov	sp, r7
    2cc0:	b001      	add	sp, #4
    2cc2:	bd90      	pop	{r4, r7, pc}
    2cc4:	00001388 	.word	0x00001388
    2cc8:	00018568 	.word	0x00018568
    2ccc:	000187ac 	.word	0x000187ac
    2cd0:	00002161 	.word	0x00002161

00002cd4 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
    2cd4:	b5b0      	push	{r4, r5, r7, lr}
    2cd6:	b088      	sub	sp, #32
    2cd8:	af02      	add	r7, sp, #8
    2cda:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2cdc:	2317      	movs	r3, #23
    2cde:	18fb      	adds	r3, r7, r3
    2ce0:	221e      	movs	r2, #30
    2ce2:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2ce4:	2317      	movs	r3, #23
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	2101      	movs	r1, #1
    2cec:	0018      	movs	r0, r3
    2cee:	4b18      	ldr	r3, [pc, #96]	; (2d50 <gsm_send_DTMF_Tone+0x7c>)
    2cf0:	4798      	blx	r3
    2cf2:	0003      	movs	r3, r0
    2cf4:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2cf6:	693b      	ldr	r3, [r7, #16]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d101      	bne.n	2d00 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
    2cfc:	2300      	movs	r3, #0
    2cfe:	e022      	b.n	2d46 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2d00:	2317      	movs	r3, #23
    2d02:	18fb      	adds	r3, r7, r3
    2d04:	781a      	ldrb	r2, [r3, #0]
    2d06:	693b      	ldr	r3, [r7, #16]
    2d08:	2100      	movs	r1, #0
    2d0a:	0018      	movs	r0, r3
    2d0c:	4b11      	ldr	r3, [pc, #68]	; (2d54 <gsm_send_DTMF_Tone+0x80>)
    2d0e:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
    2d10:	2317      	movs	r3, #23
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	7819      	ldrb	r1, [r3, #0]
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	4a0f      	ldr	r2, [pc, #60]	; (2d58 <gsm_send_DTMF_Tone+0x84>)
    2d1a:	6938      	ldr	r0, [r7, #16]
    2d1c:	4c0f      	ldr	r4, [pc, #60]	; (2d5c <gsm_send_DTMF_Tone+0x88>)
    2d1e:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
    2d20:	230f      	movs	r3, #15
    2d22:	18fc      	adds	r4, r7, r3
    2d24:	4a0e      	ldr	r2, [pc, #56]	; (2d60 <gsm_send_DTMF_Tone+0x8c>)
    2d26:	490f      	ldr	r1, [pc, #60]	; (2d64 <gsm_send_DTMF_Tone+0x90>)
    2d28:	6938      	ldr	r0, [r7, #16]
    2d2a:	2300      	movs	r3, #0
    2d2c:	9300      	str	r3, [sp, #0]
    2d2e:	2300      	movs	r3, #0
    2d30:	4d0d      	ldr	r5, [pc, #52]	; (2d68 <gsm_send_DTMF_Tone+0x94>)
    2d32:	47a8      	blx	r5
    2d34:	0003      	movs	r3, r0
    2d36:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2d38:	693b      	ldr	r3, [r7, #16]
    2d3a:	0018      	movs	r0, r3
    2d3c:	4b0b      	ldr	r3, [pc, #44]	; (2d6c <gsm_send_DTMF_Tone+0x98>)
    2d3e:	4798      	blx	r3
	return err;
    2d40:	230f      	movs	r3, #15
    2d42:	18fb      	adds	r3, r7, r3
    2d44:	781b      	ldrb	r3, [r3, #0]
}
    2d46:	0018      	movs	r0, r3
    2d48:	46bd      	mov	sp, r7
    2d4a:	b006      	add	sp, #24
    2d4c:	bdb0      	pop	{r4, r5, r7, pc}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	000177a9 	.word	0x000177a9
    2d54:	000178b7 	.word	0x000178b7
    2d58:	000187b8 	.word	0x000187b8
    2d5c:	00017a59 	.word	0x00017a59
    2d60:	00001388 	.word	0x00001388
    2d64:	00018568 	.word	0x00018568
    2d68:	00002161 	.word	0x00002161
    2d6c:	00017849 	.word	0x00017849

00002d70 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
    2d70:	b590      	push	{r4, r7, lr}
    2d72:	b083      	sub	sp, #12
    2d74:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2d76:	4a06      	ldr	r2, [pc, #24]	; (2d90 <gsm_hangup_call+0x20>)
    2d78:	4906      	ldr	r1, [pc, #24]	; (2d94 <gsm_hangup_call+0x24>)
    2d7a:	4807      	ldr	r0, [pc, #28]	; (2d98 <gsm_hangup_call+0x28>)
    2d7c:	2300      	movs	r3, #0
    2d7e:	9300      	str	r3, [sp, #0]
    2d80:	2300      	movs	r3, #0
    2d82:	4c06      	ldr	r4, [pc, #24]	; (2d9c <gsm_hangup_call+0x2c>)
    2d84:	47a0      	blx	r4
    2d86:	0003      	movs	r3, r0
}
    2d88:	0018      	movs	r0, r3
    2d8a:	46bd      	mov	sp, r7
    2d8c:	b001      	add	sp, #4
    2d8e:	bd90      	pop	{r4, r7, pc}
    2d90:	00001388 	.word	0x00001388
    2d94:	00018568 	.word	0x00018568
    2d98:	000187c8 	.word	0x000187c8
    2d9c:	00002161 	.word	0x00002161

00002da0 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
    2da0:	b590      	push	{r4, r7, lr}
    2da2:	b083      	sub	sp, #12
    2da4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
    2da6:	4a06      	ldr	r2, [pc, #24]	; (2dc0 <gsm_disable_call_waiting+0x20>)
    2da8:	4906      	ldr	r1, [pc, #24]	; (2dc4 <gsm_disable_call_waiting+0x24>)
    2daa:	4807      	ldr	r0, [pc, #28]	; (2dc8 <gsm_disable_call_waiting+0x28>)
    2dac:	2300      	movs	r3, #0
    2dae:	9300      	str	r3, [sp, #0]
    2db0:	2300      	movs	r3, #0
    2db2:	4c06      	ldr	r4, [pc, #24]	; (2dcc <gsm_disable_call_waiting+0x2c>)
    2db4:	47a0      	blx	r4
    2db6:	0003      	movs	r3, r0
}
    2db8:	0018      	movs	r0, r3
    2dba:	46bd      	mov	sp, r7
    2dbc:	b001      	add	sp, #4
    2dbe:	bd90      	pop	{r4, r7, pc}
    2dc0:	00004650 	.word	0x00004650
    2dc4:	00018568 	.word	0x00018568
    2dc8:	000187d4 	.word	0x000187d4
    2dcc:	00002161 	.word	0x00002161

00002dd0 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
    2dd0:	b590      	push	{r4, r7, lr}
    2dd2:	b083      	sub	sp, #12
    2dd4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
    2dd6:	23fa      	movs	r3, #250	; 0xfa
    2dd8:	00da      	lsls	r2, r3, #3
    2dda:	4906      	ldr	r1, [pc, #24]	; (2df4 <gsm_stop_play_record_file+0x24>)
    2ddc:	4806      	ldr	r0, [pc, #24]	; (2df8 <gsm_stop_play_record_file+0x28>)
    2dde:	2300      	movs	r3, #0
    2de0:	9300      	str	r3, [sp, #0]
    2de2:	2300      	movs	r3, #0
    2de4:	4c05      	ldr	r4, [pc, #20]	; (2dfc <gsm_stop_play_record_file+0x2c>)
    2de6:	47a0      	blx	r4
    2de8:	0003      	movs	r3, r0
}
    2dea:	0018      	movs	r0, r3
    2dec:	46bd      	mov	sp, r7
    2dee:	b001      	add	sp, #4
    2df0:	bd90      	pop	{r4, r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	00018568 	.word	0x00018568
    2df8:	00018804 	.word	0x00018804
    2dfc:	00002161 	.word	0x00002161

00002e00 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
    2e00:	b590      	push	{r4, r7, lr}
    2e02:	b087      	sub	sp, #28
    2e04:	af02      	add	r7, sp, #8
    2e06:	6078      	str	r0, [r7, #4]
    2e08:	000a      	movs	r2, r1
    2e0a:	1cfb      	adds	r3, r7, #3
    2e0c:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
    2e0e:	230f      	movs	r3, #15
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	2200      	movs	r2, #0
    2e14:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
    2e16:	1cfb      	adds	r3, r7, #3
    2e18:	781b      	ldrb	r3, [r3, #0]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d003      	beq.n	2e26 <gsm_play_record_file+0x26>
	{
		repeat = 1;
    2e1e:	230f      	movs	r3, #15
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	2201      	movs	r2, #1
    2e24:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
    2e26:	230e      	movs	r3, #14
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	2232      	movs	r2, #50	; 0x32
    2e2c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2e2e:	230e      	movs	r3, #14
    2e30:	18fb      	adds	r3, r7, r3
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	2101      	movs	r1, #1
    2e36:	0018      	movs	r0, r3
    2e38:	4b17      	ldr	r3, [pc, #92]	; (2e98 <gsm_play_record_file+0x98>)
    2e3a:	4798      	blx	r3
    2e3c:	0003      	movs	r3, r0
    2e3e:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
    2e40:	68bb      	ldr	r3, [r7, #8]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d101      	bne.n	2e4a <gsm_play_record_file+0x4a>
	{
		return 0;
    2e46:	2300      	movs	r3, #0
    2e48:	e022      	b.n	2e90 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2e4a:	230e      	movs	r3, #14
    2e4c:	18fb      	adds	r3, r7, r3
    2e4e:	781a      	ldrb	r2, [r3, #0]
    2e50:	68bb      	ldr	r3, [r7, #8]
    2e52:	2100      	movs	r1, #0
    2e54:	0018      	movs	r0, r3
    2e56:	4b11      	ldr	r3, [pc, #68]	; (2e9c <gsm_play_record_file+0x9c>)
    2e58:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
    2e5a:	230e      	movs	r3, #14
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	7819      	ldrb	r1, [r3, #0]
    2e60:	230f      	movs	r3, #15
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	687c      	ldr	r4, [r7, #4]
    2e68:	4a0d      	ldr	r2, [pc, #52]	; (2ea0 <gsm_play_record_file+0xa0>)
    2e6a:	68b8      	ldr	r0, [r7, #8]
    2e6c:	9300      	str	r3, [sp, #0]
    2e6e:	0023      	movs	r3, r4
    2e70:	4c0c      	ldr	r4, [pc, #48]	; (2ea4 <gsm_play_record_file+0xa4>)
    2e72:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
    2e74:	23fa      	movs	r3, #250	; 0xfa
    2e76:	00da      	lsls	r2, r3, #3
    2e78:	490b      	ldr	r1, [pc, #44]	; (2ea8 <gsm_play_record_file+0xa8>)
    2e7a:	68b8      	ldr	r0, [r7, #8]
    2e7c:	2300      	movs	r3, #0
    2e7e:	9300      	str	r3, [sp, #0]
    2e80:	2300      	movs	r3, #0
    2e82:	4c0a      	ldr	r4, [pc, #40]	; (2eac <gsm_play_record_file+0xac>)
    2e84:	47a0      	blx	r4
	free(cmdx);
    2e86:	68bb      	ldr	r3, [r7, #8]
    2e88:	0018      	movs	r0, r3
    2e8a:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <gsm_play_record_file+0xb0>)
    2e8c:	4798      	blx	r3
	return GSM_ERROR_NONE;
    2e8e:	2300      	movs	r3, #0
	
}
    2e90:	0018      	movs	r0, r3
    2e92:	46bd      	mov	sp, r7
    2e94:	b005      	add	sp, #20
    2e96:	bd90      	pop	{r4, r7, pc}
    2e98:	000177a9 	.word	0x000177a9
    2e9c:	000178b7 	.word	0x000178b7
    2ea0:	00018810 	.word	0x00018810
    2ea4:	00017a59 	.word	0x00017a59
    2ea8:	00018568 	.word	0x00018568
    2eac:	00002161 	.word	0x00002161
    2eb0:	00017849 	.word	0x00017849

00002eb4 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
    2eb4:	b5b0      	push	{r4, r5, r7, lr}
    2eb6:	b086      	sub	sp, #24
    2eb8:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
    2eba:	230f      	movs	r3, #15
    2ebc:	18fb      	adds	r3, r7, r3
    2ebe:	2246      	movs	r2, #70	; 0x46
    2ec0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2ec2:	230f      	movs	r3, #15
    2ec4:	18fb      	adds	r3, r7, r3
    2ec6:	781b      	ldrb	r3, [r3, #0]
    2ec8:	2101      	movs	r1, #1
    2eca:	0018      	movs	r0, r3
    2ecc:	4b57      	ldr	r3, [pc, #348]	; (302c <gsm_get_internal_rtc_time+0x178>)
    2ece:	4798      	blx	r3
    2ed0:	0003      	movs	r3, r0
    2ed2:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
    2ed4:	68bb      	ldr	r3, [r7, #8]
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d105      	bne.n	2ee6 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
    2eda:	68bb      	ldr	r3, [r7, #8]
    2edc:	0018      	movs	r0, r3
    2ede:	4b54      	ldr	r3, [pc, #336]	; (3030 <gsm_get_internal_rtc_time+0x17c>)
    2ee0:	4798      	blx	r3
		return 0;
    2ee2:	2300      	movs	r3, #0
    2ee4:	e09d      	b.n	3022 <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2ee6:	230f      	movs	r3, #15
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	781a      	ldrb	r2, [r3, #0]
    2eec:	68bb      	ldr	r3, [r7, #8]
    2eee:	2100      	movs	r1, #0
    2ef0:	0018      	movs	r0, r3
    2ef2:	4b50      	ldr	r3, [pc, #320]	; (3034 <gsm_get_internal_rtc_time+0x180>)
    2ef4:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
    2ef6:	1dfc      	adds	r4, r7, #7
    2ef8:	230f      	movs	r3, #15
    2efa:	18fb      	adds	r3, r7, r3
    2efc:	781a      	ldrb	r2, [r3, #0]
    2efe:	4d4e      	ldr	r5, [pc, #312]	; (3038 <gsm_get_internal_rtc_time+0x184>)
    2f00:	494e      	ldr	r1, [pc, #312]	; (303c <gsm_get_internal_rtc_time+0x188>)
    2f02:	484f      	ldr	r0, [pc, #316]	; (3040 <gsm_get_internal_rtc_time+0x18c>)
    2f04:	68bb      	ldr	r3, [r7, #8]
    2f06:	9300      	str	r3, [sp, #0]
    2f08:	0013      	movs	r3, r2
    2f0a:	002a      	movs	r2, r5
    2f0c:	4d4d      	ldr	r5, [pc, #308]	; (3044 <gsm_get_internal_rtc_time+0x190>)
    2f0e:	47a8      	blx	r5
    2f10:	0003      	movs	r3, r0
    2f12:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
    2f14:	1dfb      	adds	r3, r7, #7
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d16a      	bne.n	2ff2 <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
    2f1c:	4a4a      	ldr	r2, [pc, #296]	; (3048 <gsm_get_internal_rtc_time+0x194>)
    2f1e:	68bb      	ldr	r3, [r7, #8]
    2f20:	0011      	movs	r1, r2
    2f22:	0018      	movs	r0, r3
    2f24:	4b49      	ldr	r3, [pc, #292]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2f26:	4798      	blx	r3
    2f28:	0003      	movs	r3, r0
    2f2a:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
    2f2c:	4b46      	ldr	r3, [pc, #280]	; (3048 <gsm_get_internal_rtc_time+0x194>)
    2f2e:	0019      	movs	r1, r3
    2f30:	2000      	movs	r0, #0
    2f32:	4b46      	ldr	r3, [pc, #280]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2f34:	4798      	blx	r3
    2f36:	0003      	movs	r3, r0
    2f38:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
    2f3a:	4a45      	ldr	r2, [pc, #276]	; (3050 <gsm_get_internal_rtc_time+0x19c>)
    2f3c:	683b      	ldr	r3, [r7, #0]
    2f3e:	0011      	movs	r1, r2
    2f40:	0018      	movs	r0, r3
    2f42:	4b42      	ldr	r3, [pc, #264]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
    2f4a:	683b      	ldr	r3, [r7, #0]
    2f4c:	0018      	movs	r0, r3
    2f4e:	4b41      	ldr	r3, [pc, #260]	; (3054 <gsm_get_internal_rtc_time+0x1a0>)
    2f50:	4798      	blx	r3
    2f52:	0003      	movs	r3, r0
    2f54:	b2da      	uxtb	r2, r3
    2f56:	4b40      	ldr	r3, [pc, #256]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2f58:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
    2f5a:	4b3d      	ldr	r3, [pc, #244]	; (3050 <gsm_get_internal_rtc_time+0x19c>)
    2f5c:	0019      	movs	r1, r3
    2f5e:	2000      	movs	r0, #0
    2f60:	4b3a      	ldr	r3, [pc, #232]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2f62:	4798      	blx	r3
    2f64:	0003      	movs	r3, r0
    2f66:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
    2f68:	683b      	ldr	r3, [r7, #0]
    2f6a:	0018      	movs	r0, r3
    2f6c:	4b39      	ldr	r3, [pc, #228]	; (3054 <gsm_get_internal_rtc_time+0x1a0>)
    2f6e:	4798      	blx	r3
    2f70:	0003      	movs	r3, r0
    2f72:	b2da      	uxtb	r2, r3
    2f74:	4b38      	ldr	r3, [pc, #224]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2f76:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
    2f78:	4b38      	ldr	r3, [pc, #224]	; (305c <gsm_get_internal_rtc_time+0x1a8>)
    2f7a:	0019      	movs	r1, r3
    2f7c:	2000      	movs	r0, #0
    2f7e:	4b33      	ldr	r3, [pc, #204]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2f80:	4798      	blx	r3
    2f82:	0003      	movs	r3, r0
    2f84:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
    2f86:	683b      	ldr	r3, [r7, #0]
    2f88:	0018      	movs	r0, r3
    2f8a:	4b32      	ldr	r3, [pc, #200]	; (3054 <gsm_get_internal_rtc_time+0x1a0>)
    2f8c:	4798      	blx	r3
    2f8e:	0003      	movs	r3, r0
    2f90:	b2da      	uxtb	r2, r3
    2f92:	4b31      	ldr	r3, [pc, #196]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2f94:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
    2f96:	4b32      	ldr	r3, [pc, #200]	; (3060 <gsm_get_internal_rtc_time+0x1ac>)
    2f98:	0019      	movs	r1, r3
    2f9a:	2000      	movs	r0, #0
    2f9c:	4b2b      	ldr	r3, [pc, #172]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2f9e:	4798      	blx	r3
    2fa0:	0003      	movs	r3, r0
    2fa2:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
    2fa4:	683b      	ldr	r3, [r7, #0]
    2fa6:	0018      	movs	r0, r3
    2fa8:	4b2a      	ldr	r3, [pc, #168]	; (3054 <gsm_get_internal_rtc_time+0x1a0>)
    2faa:	4798      	blx	r3
    2fac:	0003      	movs	r3, r0
    2fae:	b2da      	uxtb	r2, r3
    2fb0:	4b29      	ldr	r3, [pc, #164]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2fb2:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
    2fb4:	4b2a      	ldr	r3, [pc, #168]	; (3060 <gsm_get_internal_rtc_time+0x1ac>)
    2fb6:	0019      	movs	r1, r3
    2fb8:	2000      	movs	r0, #0
    2fba:	4b24      	ldr	r3, [pc, #144]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2fbc:	4798      	blx	r3
    2fbe:	0003      	movs	r3, r0
    2fc0:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
    2fc2:	683b      	ldr	r3, [r7, #0]
    2fc4:	0018      	movs	r0, r3
    2fc6:	4b23      	ldr	r3, [pc, #140]	; (3054 <gsm_get_internal_rtc_time+0x1a0>)
    2fc8:	4798      	blx	r3
    2fca:	0003      	movs	r3, r0
    2fcc:	b2da      	uxtb	r2, r3
    2fce:	4b22      	ldr	r3, [pc, #136]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2fd0:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
    2fd2:	4b24      	ldr	r3, [pc, #144]	; (3064 <gsm_get_internal_rtc_time+0x1b0>)
    2fd4:	0019      	movs	r1, r3
    2fd6:	2000      	movs	r0, #0
    2fd8:	4b1c      	ldr	r3, [pc, #112]	; (304c <gsm_get_internal_rtc_time+0x198>)
    2fda:	4798      	blx	r3
    2fdc:	0003      	movs	r3, r0
    2fde:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
    2fe0:	683b      	ldr	r3, [r7, #0]
    2fe2:	0018      	movs	r0, r3
    2fe4:	4b1b      	ldr	r3, [pc, #108]	; (3054 <gsm_get_internal_rtc_time+0x1a0>)
    2fe6:	4798      	blx	r3
    2fe8:	0003      	movs	r3, r0
    2fea:	b2da      	uxtb	r2, r3
    2fec:	4b1a      	ldr	r3, [pc, #104]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2fee:	715a      	strb	r2, [r3, #5]
    2ff0:	e011      	b.n	3016 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
    2ff2:	4b19      	ldr	r3, [pc, #100]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2ff4:	2200      	movs	r2, #0
    2ff6:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
    2ff8:	4b17      	ldr	r3, [pc, #92]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    2ffa:	2200      	movs	r2, #0
    2ffc:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
    2ffe:	4b16      	ldr	r3, [pc, #88]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    3000:	2200      	movs	r2, #0
    3002:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
    3004:	4b14      	ldr	r3, [pc, #80]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    3006:	2200      	movs	r2, #0
    3008:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
    300a:	4b13      	ldr	r3, [pc, #76]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    300c:	2200      	movs	r2, #0
    300e:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
    3010:	4b11      	ldr	r3, [pc, #68]	; (3058 <gsm_get_internal_rtc_time+0x1a4>)
    3012:	2200      	movs	r2, #0
    3014:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
    3016:	68bb      	ldr	r3, [r7, #8]
    3018:	0018      	movs	r0, r3
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <gsm_get_internal_rtc_time+0x17c>)
    301c:	4798      	blx	r3
	return err;
    301e:	1dfb      	adds	r3, r7, #7
    3020:	781b      	ldrb	r3, [r3, #0]
}
    3022:	0018      	movs	r0, r3
    3024:	46bd      	mov	sp, r7
    3026:	b004      	add	sp, #16
    3028:	bdb0      	pop	{r4, r5, r7, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	000177a9 	.word	0x000177a9
    3030:	00017849 	.word	0x00017849
    3034:	000178b7 	.word	0x000178b7
    3038:	00001388 	.word	0x00001388
    303c:	00018568 	.word	0x00018568
    3040:	00018834 	.word	0x00018834
    3044:	00002161 	.word	0x00002161
    3048:	00018840 	.word	0x00018840
    304c:	00017ba9 	.word	0x00017ba9
    3050:	00018844 	.word	0x00018844
    3054:	0001779d 	.word	0x0001779d
    3058:	20000674 	.word	0x20000674
    305c:	00018684 	.word	0x00018684
    3060:	00018680 	.word	0x00018680
    3064:	00018848 	.word	0x00018848

00003068 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
    3068:	b580      	push	{r7, lr}
    306a:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
    306c:	4b31      	ldr	r3, [pc, #196]	; (3134 <gsm_config_module+0xcc>)
    306e:	4798      	blx	r3
    3070:	1e03      	subs	r3, r0, #0
    3072:	d000      	beq.n	3076 <gsm_config_module+0xe>
    3074:	e058      	b.n	3128 <gsm_config_module+0xc0>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
    3076:	4b30      	ldr	r3, [pc, #192]	; (3138 <gsm_config_module+0xd0>)
    3078:	4798      	blx	r3
    307a:	1e03      	subs	r3, r0, #0
    307c:	d000      	beq.n	3080 <gsm_config_module+0x18>
    307e:	e051      	b.n	3124 <gsm_config_module+0xbc>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
    3080:	23fa      	movs	r3, #250	; 0xfa
    3082:	00db      	lsls	r3, r3, #3
    3084:	0018      	movs	r0, r3
    3086:	4b2d      	ldr	r3, [pc, #180]	; (313c <gsm_config_module+0xd4>)
    3088:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
    308a:	4b2d      	ldr	r3, [pc, #180]	; (3140 <gsm_config_module+0xd8>)
    308c:	4798      	blx	r3
    308e:	1e03      	subs	r3, r0, #0
    3090:	d146      	bne.n	3120 <gsm_config_module+0xb8>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
    3092:	4b2c      	ldr	r3, [pc, #176]	; (3144 <gsm_config_module+0xdc>)
    3094:	4798      	blx	r3
    3096:	1e03      	subs	r3, r0, #0
    3098:	d148      	bne.n	312c <gsm_config_module+0xc4>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
    309a:	4b2b      	ldr	r3, [pc, #172]	; (3148 <gsm_config_module+0xe0>)
    309c:	4798      	blx	r3
    309e:	1e03      	subs	r3, r0, #0
    30a0:	d13c      	bne.n	311c <gsm_config_module+0xb4>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
    30a2:	23fa      	movs	r3, #250	; 0xfa
    30a4:	00db      	lsls	r3, r3, #3
    30a6:	0018      	movs	r0, r3
    30a8:	4b24      	ldr	r3, [pc, #144]	; (313c <gsm_config_module+0xd4>)
    30aa:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
    30ac:	4b27      	ldr	r3, [pc, #156]	; (314c <gsm_config_module+0xe4>)
    30ae:	4798      	blx	r3
    30b0:	1e03      	subs	r3, r0, #0
    30b2:	d131      	bne.n	3118 <gsm_config_module+0xb0>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
    30b4:	4b26      	ldr	r3, [pc, #152]	; (3150 <gsm_config_module+0xe8>)
    30b6:	4798      	blx	r3
    30b8:	1e03      	subs	r3, r0, #0
    30ba:	d12b      	bne.n	3114 <gsm_config_module+0xac>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
    30bc:	4b25      	ldr	r3, [pc, #148]	; (3154 <gsm_config_module+0xec>)
    30be:	4798      	blx	r3
    30c0:	1e03      	subs	r3, r0, #0
    30c2:	d125      	bne.n	3110 <gsm_config_module+0xa8>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
    30c4:	4b24      	ldr	r3, [pc, #144]	; (3158 <gsm_config_module+0xf0>)
    30c6:	4798      	blx	r3
    30c8:	1e03      	subs	r3, r0, #0
    30ca:	d11f      	bne.n	310c <gsm_config_module+0xa4>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
    30cc:	4b23      	ldr	r3, [pc, #140]	; (315c <gsm_config_module+0xf4>)
    30ce:	4798      	blx	r3
    30d0:	1e03      	subs	r3, r0, #0
    30d2:	d119      	bne.n	3108 <gsm_config_module+0xa0>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
    30d4:	4b22      	ldr	r3, [pc, #136]	; (3160 <gsm_config_module+0xf8>)
    30d6:	4798      	blx	r3
    30d8:	1e03      	subs	r3, r0, #0
    30da:	d113      	bne.n	3104 <gsm_config_module+0x9c>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
    30dc:	4b21      	ldr	r3, [pc, #132]	; (3164 <gsm_config_module+0xfc>)
    30de:	4798      	blx	r3
    30e0:	1e03      	subs	r3, r0, #0
    30e2:	d10d      	bne.n	3100 <gsm_config_module+0x98>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
    30e4:	4b20      	ldr	r3, [pc, #128]	; (3168 <gsm_config_module+0x100>)
    30e6:	4798      	blx	r3
    30e8:	1e03      	subs	r3, r0, #0
    30ea:	d107      	bne.n	30fc <gsm_config_module+0x94>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
    30ec:	4b1f      	ldr	r3, [pc, #124]	; (316c <gsm_config_module+0x104>)
    30ee:	4798      	blx	r3
    30f0:	1e03      	subs	r3, r0, #0
    30f2:	d101      	bne.n	30f8 <gsm_config_module+0x90>
															{
																return GSM_ERROR_NONE; 
    30f4:	2300      	movs	r3, #0
    30f6:	e01a      	b.n	312e <gsm_config_module+0xc6>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
    30f8:	2310      	movs	r3, #16
    30fa:	e018      	b.n	312e <gsm_config_module+0xc6>
														//	return GSM_ERROR_CONFIG_FAILED;
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
    30fc:	2310      	movs	r3, #16
    30fe:	e016      	b.n	312e <gsm_config_module+0xc6>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
    3100:	2310      	movs	r3, #16
    3102:	e014      	b.n	312e <gsm_config_module+0xc6>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
    3104:	2310      	movs	r3, #16
    3106:	e012      	b.n	312e <gsm_config_module+0xc6>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
    3108:	2310      	movs	r3, #16
    310a:	e010      	b.n	312e <gsm_config_module+0xc6>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
    310c:	2310      	movs	r3, #16
    310e:	e00e      	b.n	312e <gsm_config_module+0xc6>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
    3110:	2310      	movs	r3, #16
    3112:	e00c      	b.n	312e <gsm_config_module+0xc6>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
    3114:	2310      	movs	r3, #16
    3116:	e00a      	b.n	312e <gsm_config_module+0xc6>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
    3118:	2310      	movs	r3, #16
    311a:	e008      	b.n	312e <gsm_config_module+0xc6>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
    311c:	2310      	movs	r3, #16
    311e:	e006      	b.n	312e <gsm_config_module+0xc6>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
    3120:	2310      	movs	r3, #16
    3122:	e004      	b.n	312e <gsm_config_module+0xc6>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
    3124:	2310      	movs	r3, #16
    3126:	e002      	b.n	312e <gsm_config_module+0xc6>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
    3128:	2310      	movs	r3, #16
    312a:	e000      	b.n	312e <gsm_config_module+0xc6>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
    312c:	2310      	movs	r3, #16
}
    312e:	0018      	movs	r0, r3
    3130:	46bd      	mov	sp, r7
    3132:	bd80      	pop	{r7, pc}
    3134:	0000234d 	.word	0x0000234d
    3138:	00002559 	.word	0x00002559
    313c:	0000ebf9 	.word	0x0000ebf9
    3140:	00002439 	.word	0x00002439
    3144:	00002589 	.word	0x00002589
    3148:	000023e5 	.word	0x000023e5
    314c:	000024c9 	.word	0x000024c9
    3150:	000024f9 	.word	0x000024f9
    3154:	00002529 	.word	0x00002529
    3158:	000025b9 	.word	0x000025b9
    315c:	000025e9 	.word	0x000025e9
    3160:	00002831 	.word	0x00002831
    3164:	00002c75 	.word	0x00002c75
    3168:	00002ca5 	.word	0x00002ca5
    316c:	00002499 	.word	0x00002499

00003170 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
    3170:	b580      	push	{r7, lr}
    3172:	b084      	sub	sp, #16
    3174:	af00      	add	r7, sp, #0
    3176:	6078      	str	r0, [r7, #4]
    3178:	000a      	movs	r2, r1
    317a:	1cfb      	adds	r3, r7, #3
    317c:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
    317e:	230f      	movs	r3, #15
    3180:	18fb      	adds	r3, r7, r3
    3182:	2200      	movs	r2, #0
    3184:	701a      	strb	r2, [r3, #0]
	while (length > 1) 
    3186:	e026      	b.n	31d6 <gsm_read_response_line+0x66>
	{
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
    3188:	4b1b      	ldr	r3, [pc, #108]	; (31f8 <gsm_read_response_line+0x88>)
    318a:	6818      	ldr	r0, [r3, #0]
    318c:	23fa      	movs	r3, #250	; 0xfa
    318e:	005a      	lsls	r2, r3, #1
    3190:	230e      	movs	r3, #14
    3192:	18fb      	adds	r3, r7, r3
    3194:	0019      	movs	r1, r3
    3196:	4b19      	ldr	r3, [pc, #100]	; (31fc <gsm_read_response_line+0x8c>)
    3198:	4798      	blx	r3
    319a:	1e03      	subs	r3, r0, #0
    319c:	d101      	bne.n	31a2 <gsm_read_response_line+0x32>
		{
			return false;
    319e:	2300      	movs	r3, #0
    31a0:	e025      	b.n	31ee <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n') 
    31a2:	230e      	movs	r3, #14
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2b0a      	cmp	r3, #10
    31aa:	d014      	beq.n	31d6 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r') 
    31ac:	230e      	movs	r3, #14
    31ae:	18fb      	adds	r3, r7, r3
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	2b0d      	cmp	r3, #13
    31b4:	d014      	beq.n	31e0 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	1c5a      	adds	r2, r3, #1
    31ba:	607a      	str	r2, [r7, #4]
    31bc:	220e      	movs	r2, #14
    31be:	18ba      	adds	r2, r7, r2
    31c0:	7812      	ldrb	r2, [r2, #0]
    31c2:	701a      	strb	r2, [r3, #0]
			length--;
    31c4:	1cfb      	adds	r3, r7, #3
    31c6:	781a      	ldrb	r2, [r3, #0]
    31c8:	1cfb      	adds	r3, r7, #3
    31ca:	3a01      	subs	r2, #1
    31cc:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
    31ce:	230f      	movs	r3, #15
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	2201      	movs	r2, #1
    31d4:	701a      	strb	r2, [r3, #0]
	while (length > 1) 
    31d6:	1cfb      	adds	r3, r7, #3
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	2b01      	cmp	r3, #1
    31dc:	d8d4      	bhi.n	3188 <gsm_read_response_line+0x18>
    31de:	e000      	b.n	31e2 <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
    31e0:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	2200      	movs	r2, #0
    31e6:	701a      	strb	r2, [r3, #0]
	
	return line_non_empty;
    31e8:	230f      	movs	r3, #15
    31ea:	18fb      	adds	r3, r7, r3
    31ec:	781b      	ldrb	r3, [r3, #0]
}
    31ee:	0018      	movs	r0, r3
    31f0:	46bd      	mov	sp, r7
    31f2:	b004      	add	sp, #16
    31f4:	bd80      	pop	{r7, pc}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	2000021c 	.word	0x2000021c
    31fc:	0000e151 	.word	0x0000e151

00003200 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
    3200:	b580      	push	{r7, lr}
    3202:	b084      	sub	sp, #16
    3204:	af00      	add	r7, sp, #0
    3206:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
    3208:	230f      	movs	r3, #15
    320a:	18fb      	adds	r3, r7, r3
    320c:	2200      	movs	r2, #0
    320e:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
    3210:	4a17      	ldr	r2, [pc, #92]	; (3270 <gsm_responseLine_isNew_SMS_Received+0x70>)
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	0011      	movs	r1, r2
    3216:	0018      	movs	r0, r3
    3218:	4b16      	ldr	r3, [pc, #88]	; (3274 <gsm_responseLine_isNew_SMS_Received+0x74>)
    321a:	4798      	blx	r3
    321c:	1e03      	subs	r3, r0, #0
    321e:	d01b      	beq.n	3258 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
    3220:	4a15      	ldr	r2, [pc, #84]	; (3278 <gsm_responseLine_isNew_SMS_Received+0x78>)
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	0011      	movs	r1, r2
    3226:	0018      	movs	r0, r3
    3228:	4b14      	ldr	r3, [pc, #80]	; (327c <gsm_responseLine_isNew_SMS_Received+0x7c>)
    322a:	4798      	blx	r3
    322c:	0003      	movs	r3, r0
    322e:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
    3230:	4b11      	ldr	r3, [pc, #68]	; (3278 <gsm_responseLine_isNew_SMS_Received+0x78>)
    3232:	0019      	movs	r1, r3
    3234:	2000      	movs	r0, #0
    3236:	4b11      	ldr	r3, [pc, #68]	; (327c <gsm_responseLine_isNew_SMS_Received+0x7c>)
    3238:	4798      	blx	r3
    323a:	0003      	movs	r3, r0
    323c:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
    323e:	68bb      	ldr	r3, [r7, #8]
    3240:	0018      	movs	r0, r3
    3242:	4b0f      	ldr	r3, [pc, #60]	; (3280 <gsm_responseLine_isNew_SMS_Received+0x80>)
    3244:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
    3246:	68bb      	ldr	r3, [r7, #8]
    3248:	0018      	movs	r0, r3
    324a:	4b0e      	ldr	r3, [pc, #56]	; (3284 <gsm_responseLine_isNew_SMS_Received+0x84>)
    324c:	4798      	blx	r3
    324e:	0002      	movs	r2, r0
    3250:	230f      	movs	r3, #15
    3252:	18fb      	adds	r3, r7, r3
    3254:	701a      	strb	r2, [r3, #0]
    3256:	e003      	b.n	3260 <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
    3258:	230f      	movs	r3, #15
    325a:	18fb      	adds	r3, r7, r3
    325c:	2200      	movs	r2, #0
    325e:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
    3260:	230f      	movs	r3, #15
    3262:	18fb      	adds	r3, r7, r3
    3264:	781b      	ldrb	r3, [r3, #0]
}
    3266:	0018      	movs	r0, r3
    3268:	46bd      	mov	sp, r7
    326a:	b004      	add	sp, #16
    326c:	bd80      	pop	{r7, pc}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	0001884c 	.word	0x0001884c
    3274:	00017b77 	.word	0x00017b77
    3278:	00018684 	.word	0x00018684
    327c:	00017ba9 	.word	0x00017ba9
    3280:	000027ed 	.word	0x000027ed
    3284:	0001779d 	.word	0x0001779d

00003288 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
    3288:	b580      	push	{r7, lr}
    328a:	b082      	sub	sp, #8
    328c:	af00      	add	r7, sp, #0
    328e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
    3290:	4a07      	ldr	r2, [pc, #28]	; (32b0 <gsm_responseLine_isRinging+0x28>)
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	0011      	movs	r1, r2
    3296:	0018      	movs	r0, r3
    3298:	4b06      	ldr	r3, [pc, #24]	; (32b4 <gsm_responseLine_isRinging+0x2c>)
    329a:	4798      	blx	r3
    329c:	1e03      	subs	r3, r0, #0
    329e:	d001      	beq.n	32a4 <gsm_responseLine_isRinging+0x1c>
	{
		return true;	
    32a0:	2301      	movs	r3, #1
    32a2:	e000      	b.n	32a6 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
    32a4:	2300      	movs	r3, #0
	}
}
    32a6:	0018      	movs	r0, r3
    32a8:	46bd      	mov	sp, r7
    32aa:	b002      	add	sp, #8
    32ac:	bd80      	pop	{r7, pc}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	00018854 	.word	0x00018854
    32b4:	00017b77 	.word	0x00017b77

000032b8 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
    32b8:	b580      	push	{r7, lr}
    32ba:	b084      	sub	sp, #16
    32bc:	af00      	add	r7, sp, #0
    32be:	6078      	str	r0, [r7, #4]
    32c0:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
    32c2:	4a1e      	ldr	r2, [pc, #120]	; (333c <gsm_responseLine_get_IncommingCallNo+0x84>)
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	0011      	movs	r1, r2
    32c8:	0018      	movs	r0, r3
    32ca:	4b1d      	ldr	r3, [pc, #116]	; (3340 <gsm_responseLine_get_IncommingCallNo+0x88>)
    32cc:	4798      	blx	r3
    32ce:	1e03      	subs	r3, r0, #0
    32d0:	d02e      	beq.n	3330 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		  char *ptr_tocken;
		  ptr_tocken = strtok(response,":"); 
    32d2:	4a1c      	ldr	r2, [pc, #112]	; (3344 <gsm_responseLine_get_IncommingCallNo+0x8c>)
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	0011      	movs	r1, r2
    32d8:	0018      	movs	r0, r3
    32da:	4b1b      	ldr	r3, [pc, #108]	; (3348 <gsm_responseLine_get_IncommingCallNo+0x90>)
    32dc:	4798      	blx	r3
    32de:	0003      	movs	r3, r0
    32e0:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(NULL,",");
    32e2:	4b1a      	ldr	r3, [pc, #104]	; (334c <gsm_responseLine_get_IncommingCallNo+0x94>)
    32e4:	0019      	movs	r1, r3
    32e6:	2000      	movs	r0, #0
    32e8:	4b17      	ldr	r3, [pc, #92]	; (3348 <gsm_responseLine_get_IncommingCallNo+0x90>)
    32ea:	4798      	blx	r3
    32ec:	0003      	movs	r3, r0
    32ee:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(ptr_tocken,"\"");
    32f0:	4a17      	ldr	r2, [pc, #92]	; (3350 <gsm_responseLine_get_IncommingCallNo+0x98>)
    32f2:	68fb      	ldr	r3, [r7, #12]
    32f4:	0011      	movs	r1, r2
    32f6:	0018      	movs	r0, r3
    32f8:	4b13      	ldr	r3, [pc, #76]	; (3348 <gsm_responseLine_get_IncommingCallNo+0x90>)
    32fa:	4798      	blx	r3
    32fc:	0003      	movs	r3, r0
    32fe:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(NULL,"\"");
    3300:	4b13      	ldr	r3, [pc, #76]	; (3350 <gsm_responseLine_get_IncommingCallNo+0x98>)
    3302:	0019      	movs	r1, r3
    3304:	2000      	movs	r0, #0
    3306:	4b10      	ldr	r3, [pc, #64]	; (3348 <gsm_responseLine_get_IncommingCallNo+0x90>)
    3308:	4798      	blx	r3
    330a:	0003      	movs	r3, r0
    330c:	60fb      	str	r3, [r7, #12]
		  
		  if (!strstr(ptr_tocken,"+"))
    330e:	68fb      	ldr	r3, [r7, #12]
    3310:	212b      	movs	r1, #43	; 0x2b
    3312:	0018      	movs	r0, r3
    3314:	4b0f      	ldr	r3, [pc, #60]	; (3354 <gsm_responseLine_get_IncommingCallNo+0x9c>)
    3316:	4798      	blx	r3
    3318:	1e03      	subs	r3, r0, #0
    331a:	d101      	bne.n	3320 <gsm_responseLine_get_IncommingCallNo+0x68>
		  {
			  return false;
    331c:	2300      	movs	r3, #0
    331e:	e008      	b.n	3332 <gsm_responseLine_get_IncommingCallNo+0x7a>
		  }
		  strcpy(phone_number, (char *)(ptr_tocken));		  
    3320:	68fa      	ldr	r2, [r7, #12]
    3322:	683b      	ldr	r3, [r7, #0]
    3324:	0011      	movs	r1, r2
    3326:	0018      	movs	r0, r3
    3328:	4b0b      	ldr	r3, [pc, #44]	; (3358 <gsm_responseLine_get_IncommingCallNo+0xa0>)
    332a:	4798      	blx	r3
		  return true;
    332c:	2301      	movs	r3, #1
    332e:	e000      	b.n	3332 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
    3330:	2300      	movs	r3, #0
	}
}
    3332:	0018      	movs	r0, r3
    3334:	46bd      	mov	sp, r7
    3336:	b004      	add	sp, #16
    3338:	bd80      	pop	{r7, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	0001885c 	.word	0x0001885c
    3340:	00017b77 	.word	0x00017b77
    3344:	00018680 	.word	0x00018680
    3348:	00017ba9 	.word	0x00017ba9
    334c:	00018684 	.word	0x00018684
    3350:	00018840 	.word	0x00018840
    3354:	00017b1b 	.word	0x00017b1b
    3358:	00017b37 	.word	0x00017b37

0000335c <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
    335c:	b580      	push	{r7, lr}
    335e:	b082      	sub	sp, #8
    3360:	af00      	add	r7, sp, #0
    3362:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
    3364:	4a16      	ldr	r2, [pc, #88]	; (33c0 <gsm_responseLine_isCallCut+0x64>)
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	0011      	movs	r1, r2
    336a:	0018      	movs	r0, r3
    336c:	4b15      	ldr	r3, [pc, #84]	; (33c4 <gsm_responseLine_isCallCut+0x68>)
    336e:	4798      	blx	r3
    3370:	1e03      	subs	r3, r0, #0
    3372:	d001      	beq.n	3378 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
    3374:	2301      	movs	r3, #1
    3376:	e01e      	b.n	33b6 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
    3378:	4a13      	ldr	r2, [pc, #76]	; (33c8 <gsm_responseLine_isCallCut+0x6c>)
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	0011      	movs	r1, r2
    337e:	0018      	movs	r0, r3
    3380:	4b10      	ldr	r3, [pc, #64]	; (33c4 <gsm_responseLine_isCallCut+0x68>)
    3382:	4798      	blx	r3
    3384:	1e03      	subs	r3, r0, #0
    3386:	d001      	beq.n	338c <gsm_responseLine_isCallCut+0x30>
	{
		return true;
    3388:	2301      	movs	r3, #1
    338a:	e014      	b.n	33b6 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
    338c:	4a0f      	ldr	r2, [pc, #60]	; (33cc <gsm_responseLine_isCallCut+0x70>)
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	0011      	movs	r1, r2
    3392:	0018      	movs	r0, r3
    3394:	4b0b      	ldr	r3, [pc, #44]	; (33c4 <gsm_responseLine_isCallCut+0x68>)
    3396:	4798      	blx	r3
    3398:	1e03      	subs	r3, r0, #0
    339a:	d001      	beq.n	33a0 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
    339c:	2301      	movs	r3, #1
    339e:	e00a      	b.n	33b6 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
    33a0:	4a0b      	ldr	r2, [pc, #44]	; (33d0 <gsm_responseLine_isCallCut+0x74>)
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	0011      	movs	r1, r2
    33a6:	0018      	movs	r0, r3
    33a8:	4b06      	ldr	r3, [pc, #24]	; (33c4 <gsm_responseLine_isCallCut+0x68>)
    33aa:	4798      	blx	r3
    33ac:	1e03      	subs	r3, r0, #0
    33ae:	d001      	beq.n	33b4 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
    33b0:	2301      	movs	r3, #1
    33b2:	e000      	b.n	33b6 <gsm_responseLine_isCallCut+0x5a>
	}
	else
	{
		return false;
    33b4:	2300      	movs	r3, #0
	}
}
    33b6:	0018      	movs	r0, r3
    33b8:	46bd      	mov	sp, r7
    33ba:	b002      	add	sp, #8
    33bc:	bd80      	pop	{r7, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	00018864 	.word	0x00018864
    33c4:	00017b77 	.word	0x00017b77
    33c8:	00018870 	.word	0x00018870
    33cc:	00018878 	.word	0x00018878
    33d0:	00018560 	.word	0x00018560

000033d4 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b082      	sub	sp, #8
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
    33dc:	4a07      	ldr	r2, [pc, #28]	; (33fc <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	0011      	movs	r1, r2
    33e2:	0018      	movs	r0, r3
    33e4:	4b06      	ldr	r3, [pc, #24]	; (3400 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
    33e6:	4798      	blx	r3
    33e8:	1e03      	subs	r3, r0, #0
    33ea:	d001      	beq.n	33f0 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
    33ec:	2301      	movs	r3, #1
    33ee:	e000      	b.n	33f2 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
    33f0:	2300      	movs	r3, #0
	}
}
    33f2:	0018      	movs	r0, r3
    33f4:	46bd      	mov	sp, r7
    33f6:	b002      	add	sp, #8
    33f8:	bd80      	pop	{r7, pc}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	00018884 	.word	0x00018884
    3400:	00017b77 	.word	0x00017b77

00003404 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
    3404:	b580      	push	{r7, lr}
    3406:	b082      	sub	sp, #8
    3408:	af00      	add	r7, sp, #0
    340a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
    340c:	4a07      	ldr	r2, [pc, #28]	; (342c <gsm_responseLine_is_StopSound_Received+0x28>)
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	0011      	movs	r1, r2
    3412:	0018      	movs	r0, r3
    3414:	4b06      	ldr	r3, [pc, #24]	; (3430 <gsm_responseLine_is_StopSound_Received+0x2c>)
    3416:	4798      	blx	r3
    3418:	1e03      	subs	r3, r0, #0
    341a:	d001      	beq.n	3420 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
    341c:	2301      	movs	r3, #1
    341e:	e000      	b.n	3422 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
    3420:	2300      	movs	r3, #0
	}
}
    3422:	0018      	movs	r0, r3
    3424:	46bd      	mov	sp, r7
    3426:	b002      	add	sp, #8
    3428:	bd80      	pop	{r7, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	0001888c 	.word	0x0001888c
    3430:	00017b77 	.word	0x00017b77

00003434 <system_pinmux_get_group_from_gpio_pin>:
{
    3434:	b580      	push	{r7, lr}
    3436:	b084      	sub	sp, #16
    3438:	af00      	add	r7, sp, #0
    343a:	0002      	movs	r2, r0
    343c:	1dfb      	adds	r3, r7, #7
    343e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3440:	230f      	movs	r3, #15
    3442:	18fb      	adds	r3, r7, r3
    3444:	1dfa      	adds	r2, r7, #7
    3446:	7812      	ldrb	r2, [r2, #0]
    3448:	09d2      	lsrs	r2, r2, #7
    344a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    344c:	230e      	movs	r3, #14
    344e:	18fb      	adds	r3, r7, r3
    3450:	1dfa      	adds	r2, r7, #7
    3452:	7812      	ldrb	r2, [r2, #0]
    3454:	0952      	lsrs	r2, r2, #5
    3456:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3458:	4b0d      	ldr	r3, [pc, #52]	; (3490 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    345a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    345c:	230f      	movs	r3, #15
    345e:	18fb      	adds	r3, r7, r3
    3460:	781b      	ldrb	r3, [r3, #0]
    3462:	2b00      	cmp	r3, #0
    3464:	d10f      	bne.n	3486 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3466:	230f      	movs	r3, #15
    3468:	18fb      	adds	r3, r7, r3
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	009b      	lsls	r3, r3, #2
    346e:	2210      	movs	r2, #16
    3470:	4694      	mov	ip, r2
    3472:	44bc      	add	ip, r7
    3474:	4463      	add	r3, ip
    3476:	3b08      	subs	r3, #8
    3478:	681a      	ldr	r2, [r3, #0]
    347a:	230e      	movs	r3, #14
    347c:	18fb      	adds	r3, r7, r3
    347e:	781b      	ldrb	r3, [r3, #0]
    3480:	01db      	lsls	r3, r3, #7
    3482:	18d3      	adds	r3, r2, r3
    3484:	e000      	b.n	3488 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3486:	2300      	movs	r3, #0
}
    3488:	0018      	movs	r0, r3
    348a:	46bd      	mov	sp, r7
    348c:	b004      	add	sp, #16
    348e:	bd80      	pop	{r7, pc}
    3490:	41004400 	.word	0x41004400

00003494 <port_get_group_from_gpio_pin>:
{
    3494:	b580      	push	{r7, lr}
    3496:	b082      	sub	sp, #8
    3498:	af00      	add	r7, sp, #0
    349a:	0002      	movs	r2, r0
    349c:	1dfb      	adds	r3, r7, #7
    349e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    34a0:	1dfb      	adds	r3, r7, #7
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	0018      	movs	r0, r3
    34a6:	4b03      	ldr	r3, [pc, #12]	; (34b4 <port_get_group_from_gpio_pin+0x20>)
    34a8:	4798      	blx	r3
    34aa:	0003      	movs	r3, r0
}
    34ac:	0018      	movs	r0, r3
    34ae:	46bd      	mov	sp, r7
    34b0:	b002      	add	sp, #8
    34b2:	bd80      	pop	{r7, pc}
    34b4:	00003435 	.word	0x00003435

000034b8 <port_get_config_defaults>:
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b082      	sub	sp, #8
    34bc:	af00      	add	r7, sp, #0
    34be:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	2200      	movs	r2, #0
    34c4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	2201      	movs	r2, #1
    34ca:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	2200      	movs	r2, #0
    34d0:	709a      	strb	r2, [r3, #2]
}
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	46bd      	mov	sp, r7
    34d6:	b002      	add	sp, #8
    34d8:	bd80      	pop	{r7, pc}
	...

000034dc <port_pin_set_output_level>:
{
    34dc:	b580      	push	{r7, lr}
    34de:	b084      	sub	sp, #16
    34e0:	af00      	add	r7, sp, #0
    34e2:	0002      	movs	r2, r0
    34e4:	1dfb      	adds	r3, r7, #7
    34e6:	701a      	strb	r2, [r3, #0]
    34e8:	1dbb      	adds	r3, r7, #6
    34ea:	1c0a      	adds	r2, r1, #0
    34ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    34ee:	1dfb      	adds	r3, r7, #7
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	0018      	movs	r0, r3
    34f4:	4b0d      	ldr	r3, [pc, #52]	; (352c <port_pin_set_output_level+0x50>)
    34f6:	4798      	blx	r3
    34f8:	0003      	movs	r3, r0
    34fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    34fc:	1dfb      	adds	r3, r7, #7
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	221f      	movs	r2, #31
    3502:	4013      	ands	r3, r2
    3504:	2201      	movs	r2, #1
    3506:	409a      	lsls	r2, r3
    3508:	0013      	movs	r3, r2
    350a:	60bb      	str	r3, [r7, #8]
	if (level) {
    350c:	1dbb      	adds	r3, r7, #6
    350e:	781b      	ldrb	r3, [r3, #0]
    3510:	2b00      	cmp	r3, #0
    3512:	d003      	beq.n	351c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3514:	68fb      	ldr	r3, [r7, #12]
    3516:	68ba      	ldr	r2, [r7, #8]
    3518:	619a      	str	r2, [r3, #24]
}
    351a:	e002      	b.n	3522 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    351c:	68fb      	ldr	r3, [r7, #12]
    351e:	68ba      	ldr	r2, [r7, #8]
    3520:	615a      	str	r2, [r3, #20]
}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	46bd      	mov	sp, r7
    3526:	b004      	add	sp, #16
    3528:	bd80      	pop	{r7, pc}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	00003495 	.word	0x00003495

00003530 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
    3530:	b5f0      	push	{r4, r5, r6, r7, lr}
    3532:	b08b      	sub	sp, #44	; 0x2c
    3534:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
    3536:	230b      	movs	r3, #11
    3538:	2218      	movs	r2, #24
    353a:	4694      	mov	ip, r2
    353c:	44bc      	add	ip, r7
    353e:	4463      	add	r3, ip
    3540:	2210      	movs	r2, #16
    3542:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
    3544:	230a      	movs	r3, #10
    3546:	2218      	movs	r2, #24
    3548:	4694      	mov	ip, r2
    354a:	44bc      	add	ip, r7
    354c:	4463      	add	r3, ip
    354e:	2202      	movs	r2, #2
    3550:	701a      	strb	r2, [r3, #0]
	delay_init();
    3552:	4b90      	ldr	r3, [pc, #576]	; (3794 <LCD_init+0x264>)
    3554:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
    3556:	4b90      	ldr	r3, [pc, #576]	; (3798 <LCD_init+0x268>)
    3558:	223f      	movs	r2, #63	; 0x3f
    355a:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
    355c:	4b8f      	ldr	r3, [pc, #572]	; (379c <LCD_init+0x26c>)
    355e:	223e      	movs	r2, #62	; 0x3e
    3560:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
    3562:	4b8f      	ldr	r3, [pc, #572]	; (37a0 <LCD_init+0x270>)
    3564:	2221      	movs	r2, #33	; 0x21
    3566:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
    3568:	4b8d      	ldr	r3, [pc, #564]	; (37a0 <LCD_init+0x270>)
    356a:	2220      	movs	r2, #32
    356c:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
    356e:	4b8c      	ldr	r3, [pc, #560]	; (37a0 <LCD_init+0x270>)
    3570:	2223      	movs	r2, #35	; 0x23
    3572:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
    3574:	4b8a      	ldr	r3, [pc, #552]	; (37a0 <LCD_init+0x270>)
    3576:	2222      	movs	r2, #34	; 0x22
    3578:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    357a:	4b8a      	ldr	r3, [pc, #552]	; (37a4 <LCD_init+0x274>)
    357c:	2200      	movs	r2, #0
    357e:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
    3580:	230a      	movs	r3, #10
    3582:	2218      	movs	r2, #24
    3584:	4694      	mov	ip, r2
    3586:	44bc      	add	ip, r7
    3588:	4463      	add	r3, ip
    358a:	781b      	ldrb	r3, [r3, #0]
    358c:	2b01      	cmp	r3, #1
    358e:	d906      	bls.n	359e <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
    3590:	4b84      	ldr	r3, [pc, #528]	; (37a4 <LCD_init+0x274>)
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2208      	movs	r2, #8
    3596:	4313      	orrs	r3, r2
    3598:	b2da      	uxtb	r2, r3
    359a:	4b82      	ldr	r3, [pc, #520]	; (37a4 <LCD_init+0x274>)
    359c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
    359e:	4b82      	ldr	r3, [pc, #520]	; (37a8 <LCD_init+0x278>)
    35a0:	220a      	movs	r2, #10
    35a2:	2118      	movs	r1, #24
    35a4:	468c      	mov	ip, r1
    35a6:	44bc      	add	ip, r7
    35a8:	4462      	add	r2, ip
    35aa:	7812      	ldrb	r2, [r2, #0]
    35ac:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
    35ae:	230b      	movs	r3, #11
    35b0:	2218      	movs	r2, #24
    35b2:	4694      	mov	ip, r2
    35b4:	44bc      	add	ip, r7
    35b6:	4463      	add	r3, ip
    35b8:	781a      	ldrb	r2, [r3, #0]
    35ba:	230b      	movs	r3, #11
    35bc:	2118      	movs	r1, #24
    35be:	468c      	mov	ip, r1
    35c0:	44bc      	add	ip, r7
    35c2:	4463      	add	r3, ip
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	3340      	adds	r3, #64	; 0x40
    35c8:	2140      	movs	r1, #64	; 0x40
    35ca:	2000      	movs	r0, #0
    35cc:	4c77      	ldr	r4, [pc, #476]	; (37ac <LCD_init+0x27c>)
    35ce:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    35d0:	231c      	movs	r3, #28
    35d2:	18fb      	adds	r3, r7, r3
    35d4:	0018      	movs	r0, r3
    35d6:	4b76      	ldr	r3, [pc, #472]	; (37b0 <LCD_init+0x280>)
    35d8:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    35da:	231c      	movs	r3, #28
    35dc:	18fb      	adds	r3, r7, r3
    35de:	2201      	movs	r2, #1
    35e0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
    35e2:	4b6d      	ldr	r3, [pc, #436]	; (3798 <LCD_init+0x268>)
    35e4:	781b      	ldrb	r3, [r3, #0]
    35e6:	221c      	movs	r2, #28
    35e8:	18ba      	adds	r2, r7, r2
    35ea:	0011      	movs	r1, r2
    35ec:	0018      	movs	r0, r3
    35ee:	4b71      	ldr	r3, [pc, #452]	; (37b4 <LCD_init+0x284>)
    35f0:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
    35f2:	4b6a      	ldr	r3, [pc, #424]	; (379c <LCD_init+0x26c>)
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	221c      	movs	r2, #28
    35f8:	18ba      	adds	r2, r7, r2
    35fa:	0011      	movs	r1, r2
    35fc:	0018      	movs	r0, r3
    35fe:	4b6d      	ldr	r3, [pc, #436]	; (37b4 <LCD_init+0x284>)
    3600:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
    3602:	2300      	movs	r3, #0
    3604:	627b      	str	r3, [r7, #36]	; 0x24
    3606:	e00c      	b.n	3622 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
    3608:	4a65      	ldr	r2, [pc, #404]	; (37a0 <LCD_init+0x270>)
    360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    360c:	18d3      	adds	r3, r2, r3
    360e:	781b      	ldrb	r3, [r3, #0]
    3610:	221c      	movs	r2, #28
    3612:	18ba      	adds	r2, r7, r2
    3614:	0011      	movs	r1, r2
    3616:	0018      	movs	r0, r3
    3618:	4b66      	ldr	r3, [pc, #408]	; (37b4 <LCD_init+0x284>)
    361a:	4798      	blx	r3
	for (int i=0; i<4; ++i)
    361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    361e:	3301      	adds	r3, #1
    3620:	627b      	str	r3, [r7, #36]	; 0x24
    3622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3624:	2b03      	cmp	r3, #3
    3626:	ddef      	ble.n	3608 <LCD_init+0xd8>
	}
	delay_us(50000);
    3628:	2000      	movs	r0, #0
    362a:	4b63      	ldr	r3, [pc, #396]	; (37b8 <LCD_init+0x288>)
    362c:	4798      	blx	r3
    362e:	0003      	movs	r3, r0
    3630:	613b      	str	r3, [r7, #16]
    3632:	2300      	movs	r3, #0
    3634:	617b      	str	r3, [r7, #20]
    3636:	4c61      	ldr	r4, [pc, #388]	; (37bc <LCD_init+0x28c>)
    3638:	4a61      	ldr	r2, [pc, #388]	; (37c0 <LCD_init+0x290>)
    363a:	2300      	movs	r3, #0
    363c:	6938      	ldr	r0, [r7, #16]
    363e:	6979      	ldr	r1, [r7, #20]
    3640:	47a0      	blx	r4
    3642:	0003      	movs	r3, r0
    3644:	000c      	movs	r4, r1
    3646:	0019      	movs	r1, r3
    3648:	0022      	movs	r2, r4
    364a:	4b5e      	ldr	r3, [pc, #376]	; (37c4 <LCD_init+0x294>)
    364c:	2400      	movs	r4, #0
    364e:	18c9      	adds	r1, r1, r3
    3650:	4162      	adcs	r2, r4
    3652:	0008      	movs	r0, r1
    3654:	0011      	movs	r1, r2
    3656:	4c5c      	ldr	r4, [pc, #368]	; (37c8 <LCD_init+0x298>)
    3658:	4a5c      	ldr	r2, [pc, #368]	; (37cc <LCD_init+0x29c>)
    365a:	2300      	movs	r3, #0
    365c:	47a0      	blx	r4
    365e:	0003      	movs	r3, r0
    3660:	000c      	movs	r4, r1
    3662:	0018      	movs	r0, r3
    3664:	4b5a      	ldr	r3, [pc, #360]	; (37d0 <LCD_init+0x2a0>)
    3666:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
    3668:	4b4b      	ldr	r3, [pc, #300]	; (3798 <LCD_init+0x268>)
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	2100      	movs	r1, #0
    366e:	0018      	movs	r0, r3
    3670:	4b58      	ldr	r3, [pc, #352]	; (37d4 <LCD_init+0x2a4>)
    3672:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
    3674:	4b49      	ldr	r3, [pc, #292]	; (379c <LCD_init+0x26c>)
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	2100      	movs	r1, #0
    367a:	0018      	movs	r0, r3
    367c:	4b55      	ldr	r3, [pc, #340]	; (37d4 <LCD_init+0x2a4>)
    367e:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
    3680:	2003      	movs	r0, #3
    3682:	4b55      	ldr	r3, [pc, #340]	; (37d8 <LCD_init+0x2a8>)
    3684:	4798      	blx	r3
	 delay_us(4500); 
    3686:	2000      	movs	r0, #0
    3688:	4b4b      	ldr	r3, [pc, #300]	; (37b8 <LCD_init+0x288>)
    368a:	4798      	blx	r3
    368c:	0003      	movs	r3, r0
    368e:	60bb      	str	r3, [r7, #8]
    3690:	2300      	movs	r3, #0
    3692:	60fb      	str	r3, [r7, #12]
    3694:	4c49      	ldr	r4, [pc, #292]	; (37bc <LCD_init+0x28c>)
    3696:	4a51      	ldr	r2, [pc, #324]	; (37dc <LCD_init+0x2ac>)
    3698:	2300      	movs	r3, #0
    369a:	68b8      	ldr	r0, [r7, #8]
    369c:	68f9      	ldr	r1, [r7, #12]
    369e:	47a0      	blx	r4
    36a0:	0003      	movs	r3, r0
    36a2:	000c      	movs	r4, r1
    36a4:	0019      	movs	r1, r3
    36a6:	0022      	movs	r2, r4
    36a8:	4b46      	ldr	r3, [pc, #280]	; (37c4 <LCD_init+0x294>)
    36aa:	2400      	movs	r4, #0
    36ac:	18c9      	adds	r1, r1, r3
    36ae:	4162      	adcs	r2, r4
    36b0:	0008      	movs	r0, r1
    36b2:	0011      	movs	r1, r2
    36b4:	4c44      	ldr	r4, [pc, #272]	; (37c8 <LCD_init+0x298>)
    36b6:	4a45      	ldr	r2, [pc, #276]	; (37cc <LCD_init+0x29c>)
    36b8:	2300      	movs	r3, #0
    36ba:	47a0      	blx	r4
    36bc:	0003      	movs	r3, r0
    36be:	000c      	movs	r4, r1
    36c0:	0018      	movs	r0, r3
    36c2:	4b43      	ldr	r3, [pc, #268]	; (37d0 <LCD_init+0x2a0>)
    36c4:	4798      	blx	r3
	 
	 write4bits(0x03);
    36c6:	2003      	movs	r0, #3
    36c8:	4b43      	ldr	r3, [pc, #268]	; (37d8 <LCD_init+0x2a8>)
    36ca:	4798      	blx	r3
	 delay_us(4500); 
    36cc:	2000      	movs	r0, #0
    36ce:	4b3a      	ldr	r3, [pc, #232]	; (37b8 <LCD_init+0x288>)
    36d0:	4798      	blx	r3
    36d2:	0003      	movs	r3, r0
    36d4:	603b      	str	r3, [r7, #0]
    36d6:	2300      	movs	r3, #0
    36d8:	607b      	str	r3, [r7, #4]
    36da:	4c38      	ldr	r4, [pc, #224]	; (37bc <LCD_init+0x28c>)
    36dc:	4a3f      	ldr	r2, [pc, #252]	; (37dc <LCD_init+0x2ac>)
    36de:	2300      	movs	r3, #0
    36e0:	6838      	ldr	r0, [r7, #0]
    36e2:	6879      	ldr	r1, [r7, #4]
    36e4:	47a0      	blx	r4
    36e6:	0003      	movs	r3, r0
    36e8:	000c      	movs	r4, r1
    36ea:	0019      	movs	r1, r3
    36ec:	0022      	movs	r2, r4
    36ee:	4b35      	ldr	r3, [pc, #212]	; (37c4 <LCD_init+0x294>)
    36f0:	2400      	movs	r4, #0
    36f2:	18c9      	adds	r1, r1, r3
    36f4:	4162      	adcs	r2, r4
    36f6:	0008      	movs	r0, r1
    36f8:	0011      	movs	r1, r2
    36fa:	4c33      	ldr	r4, [pc, #204]	; (37c8 <LCD_init+0x298>)
    36fc:	4a33      	ldr	r2, [pc, #204]	; (37cc <LCD_init+0x29c>)
    36fe:	2300      	movs	r3, #0
    3700:	47a0      	blx	r4
    3702:	0003      	movs	r3, r0
    3704:	000c      	movs	r4, r1
    3706:	0018      	movs	r0, r3
    3708:	4b31      	ldr	r3, [pc, #196]	; (37d0 <LCD_init+0x2a0>)
    370a:	4798      	blx	r3
	
	 write4bits(0x03);
    370c:	2003      	movs	r0, #3
    370e:	4b32      	ldr	r3, [pc, #200]	; (37d8 <LCD_init+0x2a8>)
    3710:	4798      	blx	r3
	 delay_us(150);
    3712:	2000      	movs	r0, #0
    3714:	4b28      	ldr	r3, [pc, #160]	; (37b8 <LCD_init+0x288>)
    3716:	4798      	blx	r3
    3718:	0003      	movs	r3, r0
    371a:	001d      	movs	r5, r3
    371c:	2300      	movs	r3, #0
    371e:	001e      	movs	r6, r3
    3720:	4c26      	ldr	r4, [pc, #152]	; (37bc <LCD_init+0x28c>)
    3722:	2296      	movs	r2, #150	; 0x96
    3724:	2300      	movs	r3, #0
    3726:	0028      	movs	r0, r5
    3728:	0031      	movs	r1, r6
    372a:	47a0      	blx	r4
    372c:	0003      	movs	r3, r0
    372e:	000c      	movs	r4, r1
    3730:	0019      	movs	r1, r3
    3732:	0022      	movs	r2, r4
    3734:	4b23      	ldr	r3, [pc, #140]	; (37c4 <LCD_init+0x294>)
    3736:	2400      	movs	r4, #0
    3738:	18c9      	adds	r1, r1, r3
    373a:	4162      	adcs	r2, r4
    373c:	0008      	movs	r0, r1
    373e:	0011      	movs	r1, r2
    3740:	4c21      	ldr	r4, [pc, #132]	; (37c8 <LCD_init+0x298>)
    3742:	4a22      	ldr	r2, [pc, #136]	; (37cc <LCD_init+0x29c>)
    3744:	2300      	movs	r3, #0
    3746:	47a0      	blx	r4
    3748:	0003      	movs	r3, r0
    374a:	000c      	movs	r4, r1
    374c:	0018      	movs	r0, r3
    374e:	4b20      	ldr	r3, [pc, #128]	; (37d0 <LCD_init+0x2a0>)
    3750:	4798      	blx	r3

	 write4bits(0x02);
    3752:	2002      	movs	r0, #2
    3754:	4b20      	ldr	r3, [pc, #128]	; (37d8 <LCD_init+0x2a8>)
    3756:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
    3758:	4b12      	ldr	r3, [pc, #72]	; (37a4 <LCD_init+0x274>)
    375a:	781b      	ldrb	r3, [r3, #0]
    375c:	2220      	movs	r2, #32
    375e:	4313      	orrs	r3, r2
    3760:	b2db      	uxtb	r3, r3
    3762:	0018      	movs	r0, r3
    3764:	4b1e      	ldr	r3, [pc, #120]	; (37e0 <LCD_init+0x2b0>)
    3766:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    3768:	4b1e      	ldr	r3, [pc, #120]	; (37e4 <LCD_init+0x2b4>)
    376a:	2204      	movs	r2, #4
    376c:	701a      	strb	r2, [r3, #0]
	LCD_display();
    376e:	4b1e      	ldr	r3, [pc, #120]	; (37e8 <LCD_init+0x2b8>)
    3770:	4798      	blx	r3
	LCD_clear();
    3772:	4b1e      	ldr	r3, [pc, #120]	; (37ec <LCD_init+0x2bc>)
    3774:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    3776:	4b1e      	ldr	r3, [pc, #120]	; (37f0 <LCD_init+0x2c0>)
    3778:	2202      	movs	r2, #2
    377a:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
    377c:	4b1c      	ldr	r3, [pc, #112]	; (37f0 <LCD_init+0x2c0>)
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	2204      	movs	r2, #4
    3782:	4313      	orrs	r3, r2
    3784:	b2db      	uxtb	r3, r3
    3786:	0018      	movs	r0, r3
    3788:	4b15      	ldr	r3, [pc, #84]	; (37e0 <LCD_init+0x2b0>)
    378a:	4798      	blx	r3
}
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	46bd      	mov	sp, r7
    3790:	b00b      	add	sp, #44	; 0x2c
    3792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3794:	00011475 	.word	0x00011475
    3798:	200006bf 	.word	0x200006bf
    379c:	200006be 	.word	0x200006be
    37a0:	200006b8 	.word	0x200006b8
    37a4:	200006bd 	.word	0x200006bd
    37a8:	200006b6 	.word	0x200006b6
    37ac:	000038a1 	.word	0x000038a1
    37b0:	000034b9 	.word	0x000034b9
    37b4:	00011ac9 	.word	0x00011ac9
    37b8:	00013435 	.word	0x00013435
    37bc:	000153e9 	.word	0x000153e9
    37c0:	0000c350 	.word	0x0000c350
    37c4:	006acfbf 	.word	0x006acfbf
    37c8:	000153a9 	.word	0x000153a9
    37cc:	006acfc0 	.word	0x006acfc0
    37d0:	20000001 	.word	0x20000001
    37d4:	000034dd 	.word	0x000034dd
    37d8:	000038dd 	.word	0x000038dd
    37dc:	00001194 	.word	0x00001194
    37e0:	00003a21 	.word	0x00003a21
    37e4:	200006b5 	.word	0x200006b5
    37e8:	00003c09 	.word	0x00003c09
    37ec:	00003ac1 	.word	0x00003ac1
    37f0:	200006bc 	.word	0x200006bc

000037f4 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b082      	sub	sp, #8
    37f8:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    37fa:	1d3b      	adds	r3, r7, #4
    37fc:	0018      	movs	r0, r3
    37fe:	4b08      	ldr	r3, [pc, #32]	; (3820 <LCD_PWR_CONFIG+0x2c>)
    3800:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    3802:	1d3b      	adds	r3, r7, #4
    3804:	2201      	movs	r2, #1
    3806:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    3808:	1d3b      	adds	r3, r7, #4
    380a:	2200      	movs	r2, #0
    380c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    380e:	1d3b      	adds	r3, r7, #4
    3810:	0019      	movs	r1, r3
    3812:	2024      	movs	r0, #36	; 0x24
    3814:	4b03      	ldr	r3, [pc, #12]	; (3824 <LCD_PWR_CONFIG+0x30>)
    3816:	4798      	blx	r3
}
    3818:	46c0      	nop			; (mov r8, r8)
    381a:	46bd      	mov	sp, r7
    381c:	b002      	add	sp, #8
    381e:	bd80      	pop	{r7, pc}
    3820:	000034b9 	.word	0x000034b9
    3824:	00011ac9 	.word	0x00011ac9

00003828 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
    3828:	b580      	push	{r7, lr}
    382a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
    382c:	2101      	movs	r1, #1
    382e:	2024      	movs	r0, #36	; 0x24
    3830:	4b02      	ldr	r3, [pc, #8]	; (383c <LCD_PWR_EN+0x14>)
    3832:	4798      	blx	r3
}
    3834:	46c0      	nop			; (mov r8, r8)
    3836:	46bd      	mov	sp, r7
    3838:	bd80      	pop	{r7, pc}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	000034dd 	.word	0x000034dd

00003840 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
    3840:	b580      	push	{r7, lr}
    3842:	b082      	sub	sp, #8
    3844:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
    3846:	2100      	movs	r1, #0
    3848:	2024      	movs	r0, #36	; 0x24
    384a:	4b11      	ldr	r3, [pc, #68]	; (3890 <LCD_PWR_DIS+0x50>)
    384c:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
    384e:	2300      	movs	r3, #0
    3850:	607b      	str	r3, [r7, #4]
    3852:	e00a      	b.n	386a <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
    3854:	4a0f      	ldr	r2, [pc, #60]	; (3894 <LCD_PWR_DIS+0x54>)
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	18d3      	adds	r3, r2, r3
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	2100      	movs	r1, #0
    385e:	0018      	movs	r0, r3
    3860:	4b0b      	ldr	r3, [pc, #44]	; (3890 <LCD_PWR_DIS+0x50>)
    3862:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	3301      	adds	r3, #1
    3868:	607b      	str	r3, [r7, #4]
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	2b03      	cmp	r3, #3
    386e:	ddf1      	ble.n	3854 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
    3870:	4b09      	ldr	r3, [pc, #36]	; (3898 <LCD_PWR_DIS+0x58>)
    3872:	781b      	ldrb	r3, [r3, #0]
    3874:	2100      	movs	r1, #0
    3876:	0018      	movs	r0, r3
    3878:	4b05      	ldr	r3, [pc, #20]	; (3890 <LCD_PWR_DIS+0x50>)
    387a:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
    387c:	4b07      	ldr	r3, [pc, #28]	; (389c <LCD_PWR_DIS+0x5c>)
    387e:	781b      	ldrb	r3, [r3, #0]
    3880:	2100      	movs	r1, #0
    3882:	0018      	movs	r0, r3
    3884:	4b02      	ldr	r3, [pc, #8]	; (3890 <LCD_PWR_DIS+0x50>)
    3886:	4798      	blx	r3
	
}
    3888:	46c0      	nop			; (mov r8, r8)
    388a:	46bd      	mov	sp, r7
    388c:	b002      	add	sp, #8
    388e:	bd80      	pop	{r7, pc}
    3890:	000034dd 	.word	0x000034dd
    3894:	200006b8 	.word	0x200006b8
    3898:	200006be 	.word	0x200006be
    389c:	200006bf 	.word	0x200006bf

000038a0 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
    38a0:	b580      	push	{r7, lr}
    38a2:	b084      	sub	sp, #16
    38a4:	af00      	add	r7, sp, #0
    38a6:	60f8      	str	r0, [r7, #12]
    38a8:	60b9      	str	r1, [r7, #8]
    38aa:	607a      	str	r2, [r7, #4]
    38ac:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
    38ae:	68fb      	ldr	r3, [r7, #12]
    38b0:	b2da      	uxtb	r2, r3
    38b2:	4b09      	ldr	r3, [pc, #36]	; (38d8 <LCD_setRowOffsets+0x38>)
    38b4:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
    38b6:	68bb      	ldr	r3, [r7, #8]
    38b8:	b2da      	uxtb	r2, r3
    38ba:	4b07      	ldr	r3, [pc, #28]	; (38d8 <LCD_setRowOffsets+0x38>)
    38bc:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	b2da      	uxtb	r2, r3
    38c2:	4b05      	ldr	r3, [pc, #20]	; (38d8 <LCD_setRowOffsets+0x38>)
    38c4:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
    38c6:	683b      	ldr	r3, [r7, #0]
    38c8:	b2da      	uxtb	r2, r3
    38ca:	4b03      	ldr	r3, [pc, #12]	; (38d8 <LCD_setRowOffsets+0x38>)
    38cc:	70da      	strb	r2, [r3, #3]
}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	46bd      	mov	sp, r7
    38d2:	b004      	add	sp, #16
    38d4:	bd80      	pop	{r7, pc}
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	200006b0 	.word	0x200006b0

000038dc <write4bits>:

void write4bits(uint8_t value)
{
    38dc:	b580      	push	{r7, lr}
    38de:	b084      	sub	sp, #16
    38e0:	af00      	add	r7, sp, #0
    38e2:	0002      	movs	r2, r0
    38e4:	1dfb      	adds	r3, r7, #7
    38e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
    38e8:	2300      	movs	r3, #0
    38ea:	60fb      	str	r3, [r7, #12]
    38ec:	e013      	b.n	3916 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    38ee:	4a0e      	ldr	r2, [pc, #56]	; (3928 <write4bits+0x4c>)
    38f0:	68fb      	ldr	r3, [r7, #12]
    38f2:	18d3      	adds	r3, r2, r3
    38f4:	7818      	ldrb	r0, [r3, #0]
    38f6:	1dfb      	adds	r3, r7, #7
    38f8:	781a      	ldrb	r2, [r3, #0]
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	411a      	asrs	r2, r3
    38fe:	0013      	movs	r3, r2
    3900:	2201      	movs	r2, #1
    3902:	4013      	ands	r3, r2
    3904:	1e5a      	subs	r2, r3, #1
    3906:	4193      	sbcs	r3, r2
    3908:	b2db      	uxtb	r3, r3
    390a:	0019      	movs	r1, r3
    390c:	4b07      	ldr	r3, [pc, #28]	; (392c <write4bits+0x50>)
    390e:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
    3910:	68fb      	ldr	r3, [r7, #12]
    3912:	3301      	adds	r3, #1
    3914:	60fb      	str	r3, [r7, #12]
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	2b03      	cmp	r3, #3
    391a:	dde8      	ble.n	38ee <write4bits+0x12>
	}
	pulseEnable();
    391c:	4b04      	ldr	r3, [pc, #16]	; (3930 <write4bits+0x54>)
    391e:	4798      	blx	r3
}
    3920:	46c0      	nop			; (mov r8, r8)
    3922:	46bd      	mov	sp, r7
    3924:	b004      	add	sp, #16
    3926:	bd80      	pop	{r7, pc}
    3928:	200006b8 	.word	0x200006b8
    392c:	000034dd 	.word	0x000034dd
    3930:	00003935 	.word	0x00003935

00003934 <pulseEnable>:



void pulseEnable(void)
{
    3934:	b5f0      	push	{r4, r5, r6, r7, lr}
    3936:	b085      	sub	sp, #20
    3938:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
    393a:	4b31      	ldr	r3, [pc, #196]	; (3a00 <pulseEnable+0xcc>)
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	2100      	movs	r1, #0
    3940:	0018      	movs	r0, r3
    3942:	4b30      	ldr	r3, [pc, #192]	; (3a04 <pulseEnable+0xd0>)
    3944:	4798      	blx	r3
 	delay_us(1);
    3946:	2000      	movs	r0, #0
    3948:	4b2f      	ldr	r3, [pc, #188]	; (3a08 <pulseEnable+0xd4>)
    394a:	4798      	blx	r3
    394c:	0003      	movs	r3, r0
    394e:	60bb      	str	r3, [r7, #8]
    3950:	2300      	movs	r3, #0
    3952:	60fb      	str	r3, [r7, #12]
    3954:	4b2d      	ldr	r3, [pc, #180]	; (3a0c <pulseEnable+0xd8>)
    3956:	2400      	movs	r4, #0
    3958:	68b8      	ldr	r0, [r7, #8]
    395a:	68f9      	ldr	r1, [r7, #12]
    395c:	18c0      	adds	r0, r0, r3
    395e:	4161      	adcs	r1, r4
    3960:	4c2b      	ldr	r4, [pc, #172]	; (3a10 <pulseEnable+0xdc>)
    3962:	4a2c      	ldr	r2, [pc, #176]	; (3a14 <pulseEnable+0xe0>)
    3964:	2300      	movs	r3, #0
    3966:	47a0      	blx	r4
    3968:	0003      	movs	r3, r0
    396a:	000c      	movs	r4, r1
    396c:	0018      	movs	r0, r3
    396e:	4b2a      	ldr	r3, [pc, #168]	; (3a18 <pulseEnable+0xe4>)
    3970:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
    3972:	4b23      	ldr	r3, [pc, #140]	; (3a00 <pulseEnable+0xcc>)
    3974:	781b      	ldrb	r3, [r3, #0]
    3976:	2101      	movs	r1, #1
    3978:	0018      	movs	r0, r3
    397a:	4b22      	ldr	r3, [pc, #136]	; (3a04 <pulseEnable+0xd0>)
    397c:	4798      	blx	r3
 	delay_us(1);
    397e:	2000      	movs	r0, #0
    3980:	4b21      	ldr	r3, [pc, #132]	; (3a08 <pulseEnable+0xd4>)
    3982:	4798      	blx	r3
    3984:	0003      	movs	r3, r0
    3986:	001d      	movs	r5, r3
    3988:	2300      	movs	r3, #0
    398a:	001e      	movs	r6, r3
    398c:	4b1f      	ldr	r3, [pc, #124]	; (3a0c <pulseEnable+0xd8>)
    398e:	2400      	movs	r4, #0
    3990:	0028      	movs	r0, r5
    3992:	0031      	movs	r1, r6
    3994:	18c0      	adds	r0, r0, r3
    3996:	4161      	adcs	r1, r4
    3998:	4c1d      	ldr	r4, [pc, #116]	; (3a10 <pulseEnable+0xdc>)
    399a:	4a1e      	ldr	r2, [pc, #120]	; (3a14 <pulseEnable+0xe0>)
    399c:	2300      	movs	r3, #0
    399e:	47a0      	blx	r4
    39a0:	0003      	movs	r3, r0
    39a2:	000c      	movs	r4, r1
    39a4:	0018      	movs	r0, r3
    39a6:	4b1c      	ldr	r3, [pc, #112]	; (3a18 <pulseEnable+0xe4>)
    39a8:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
    39aa:	4b15      	ldr	r3, [pc, #84]	; (3a00 <pulseEnable+0xcc>)
    39ac:	781b      	ldrb	r3, [r3, #0]
    39ae:	2100      	movs	r1, #0
    39b0:	0018      	movs	r0, r3
    39b2:	4b14      	ldr	r3, [pc, #80]	; (3a04 <pulseEnable+0xd0>)
    39b4:	4798      	blx	r3
 	delay_us(100);
    39b6:	2000      	movs	r0, #0
    39b8:	4b13      	ldr	r3, [pc, #76]	; (3a08 <pulseEnable+0xd4>)
    39ba:	4798      	blx	r3
    39bc:	0003      	movs	r3, r0
    39be:	603b      	str	r3, [r7, #0]
    39c0:	2300      	movs	r3, #0
    39c2:	607b      	str	r3, [r7, #4]
    39c4:	4c15      	ldr	r4, [pc, #84]	; (3a1c <pulseEnable+0xe8>)
    39c6:	2264      	movs	r2, #100	; 0x64
    39c8:	2300      	movs	r3, #0
    39ca:	6838      	ldr	r0, [r7, #0]
    39cc:	6879      	ldr	r1, [r7, #4]
    39ce:	47a0      	blx	r4
    39d0:	0003      	movs	r3, r0
    39d2:	000c      	movs	r4, r1
    39d4:	0019      	movs	r1, r3
    39d6:	0022      	movs	r2, r4
    39d8:	4b0c      	ldr	r3, [pc, #48]	; (3a0c <pulseEnable+0xd8>)
    39da:	2400      	movs	r4, #0
    39dc:	18c9      	adds	r1, r1, r3
    39de:	4162      	adcs	r2, r4
    39e0:	0008      	movs	r0, r1
    39e2:	0011      	movs	r1, r2
    39e4:	4c0a      	ldr	r4, [pc, #40]	; (3a10 <pulseEnable+0xdc>)
    39e6:	4a0b      	ldr	r2, [pc, #44]	; (3a14 <pulseEnable+0xe0>)
    39e8:	2300      	movs	r3, #0
    39ea:	47a0      	blx	r4
    39ec:	0003      	movs	r3, r0
    39ee:	000c      	movs	r4, r1
    39f0:	0018      	movs	r0, r3
    39f2:	4b09      	ldr	r3, [pc, #36]	; (3a18 <pulseEnable+0xe4>)
    39f4:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	46bd      	mov	sp, r7
    39fa:	b005      	add	sp, #20
    39fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	200006be 	.word	0x200006be
    3a04:	000034dd 	.word	0x000034dd
    3a08:	00013435 	.word	0x00013435
    3a0c:	006acfbf 	.word	0x006acfbf
    3a10:	000153a9 	.word	0x000153a9
    3a14:	006acfc0 	.word	0x006acfc0
    3a18:	20000001 	.word	0x20000001
    3a1c:	000153e9 	.word	0x000153e9

00003a20 <command>:

inline void command(uint8_t value) 
{
    3a20:	b580      	push	{r7, lr}
    3a22:	b082      	sub	sp, #8
    3a24:	af00      	add	r7, sp, #0
    3a26:	0002      	movs	r2, r0
    3a28:	1dfb      	adds	r3, r7, #7
    3a2a:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
    3a2c:	1dfb      	adds	r3, r7, #7
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	2100      	movs	r1, #0
    3a32:	0018      	movs	r0, r3
    3a34:	4b02      	ldr	r3, [pc, #8]	; (3a40 <command+0x20>)
    3a36:	4798      	blx	r3
}
    3a38:	46c0      	nop			; (mov r8, r8)
    3a3a:	46bd      	mov	sp, r7
    3a3c:	b002      	add	sp, #8
    3a3e:	bd80      	pop	{r7, pc}
    3a40:	00003a6d 	.word	0x00003a6d

00003a44 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
    3a44:	b580      	push	{r7, lr}
    3a46:	b082      	sub	sp, #8
    3a48:	af00      	add	r7, sp, #0
    3a4a:	0002      	movs	r2, r0
    3a4c:	1dfb      	adds	r3, r7, #7
    3a4e:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
    3a50:	1dfb      	adds	r3, r7, #7
    3a52:	781b      	ldrb	r3, [r3, #0]
    3a54:	2101      	movs	r1, #1
    3a56:	0018      	movs	r0, r3
    3a58:	4b03      	ldr	r3, [pc, #12]	; (3a68 <LCD_write+0x24>)
    3a5a:	4798      	blx	r3
	return 1;
    3a5c:	2301      	movs	r3, #1
}
    3a5e:	0018      	movs	r0, r3
    3a60:	46bd      	mov	sp, r7
    3a62:	b002      	add	sp, #8
    3a64:	bd80      	pop	{r7, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	00003a6d 	.word	0x00003a6d

00003a6c <send>:

void send(uint8_t value, uint8_t mode) 
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b082      	sub	sp, #8
    3a70:	af00      	add	r7, sp, #0
    3a72:	0002      	movs	r2, r0
    3a74:	1dfb      	adds	r3, r7, #7
    3a76:	701a      	strb	r2, [r3, #0]
    3a78:	1dbb      	adds	r3, r7, #6
    3a7a:	1c0a      	adds	r2, r1, #0
    3a7c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
    3a7e:	4b0d      	ldr	r3, [pc, #52]	; (3ab4 <send+0x48>)
    3a80:	781a      	ldrb	r2, [r3, #0]
    3a82:	1dbb      	adds	r3, r7, #6
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	1e59      	subs	r1, r3, #1
    3a88:	418b      	sbcs	r3, r1
    3a8a:	b2db      	uxtb	r3, r3
    3a8c:	0019      	movs	r1, r3
    3a8e:	0010      	movs	r0, r2
    3a90:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <send+0x4c>)
    3a92:	4798      	blx	r3
	
	{
		write4bits(value>>4);
    3a94:	1dfb      	adds	r3, r7, #7
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	091b      	lsrs	r3, r3, #4
    3a9a:	b2db      	uxtb	r3, r3
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b07      	ldr	r3, [pc, #28]	; (3abc <send+0x50>)
    3aa0:	4798      	blx	r3
		write4bits(value);
    3aa2:	1dfb      	adds	r3, r7, #7
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	0018      	movs	r0, r3
    3aa8:	4b04      	ldr	r3, [pc, #16]	; (3abc <send+0x50>)
    3aaa:	4798      	blx	r3
	}
}
    3aac:	46c0      	nop			; (mov r8, r8)
    3aae:	46bd      	mov	sp, r7
    3ab0:	b002      	add	sp, #8
    3ab2:	bd80      	pop	{r7, pc}
    3ab4:	200006bf 	.word	0x200006bf
    3ab8:	000034dd 	.word	0x000034dd
    3abc:	000038dd 	.word	0x000038dd

00003ac0 <LCD_clear>:

void LCD_clear(void)
{
    3ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ac2:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
    3ac4:	2001      	movs	r0, #1
    3ac6:	4b13      	ldr	r3, [pc, #76]	; (3b14 <LCD_clear+0x54>)
    3ac8:	4798      	blx	r3
	delay_us(2000);
    3aca:	2000      	movs	r0, #0
    3acc:	4b12      	ldr	r3, [pc, #72]	; (3b18 <LCD_clear+0x58>)
    3ace:	4798      	blx	r3
    3ad0:	0003      	movs	r3, r0
    3ad2:	001d      	movs	r5, r3
    3ad4:	2300      	movs	r3, #0
    3ad6:	001e      	movs	r6, r3
    3ad8:	4c10      	ldr	r4, [pc, #64]	; (3b1c <LCD_clear+0x5c>)
    3ada:	22fa      	movs	r2, #250	; 0xfa
    3adc:	00d2      	lsls	r2, r2, #3
    3ade:	2300      	movs	r3, #0
    3ae0:	0028      	movs	r0, r5
    3ae2:	0031      	movs	r1, r6
    3ae4:	47a0      	blx	r4
    3ae6:	0003      	movs	r3, r0
    3ae8:	000c      	movs	r4, r1
    3aea:	0019      	movs	r1, r3
    3aec:	0022      	movs	r2, r4
    3aee:	4b0c      	ldr	r3, [pc, #48]	; (3b20 <LCD_clear+0x60>)
    3af0:	2400      	movs	r4, #0
    3af2:	18c9      	adds	r1, r1, r3
    3af4:	4162      	adcs	r2, r4
    3af6:	0008      	movs	r0, r1
    3af8:	0011      	movs	r1, r2
    3afa:	4c0a      	ldr	r4, [pc, #40]	; (3b24 <LCD_clear+0x64>)
    3afc:	4a0a      	ldr	r2, [pc, #40]	; (3b28 <LCD_clear+0x68>)
    3afe:	2300      	movs	r3, #0
    3b00:	47a0      	blx	r4
    3b02:	0003      	movs	r3, r0
    3b04:	000c      	movs	r4, r1
    3b06:	0018      	movs	r0, r3
    3b08:	4b08      	ldr	r3, [pc, #32]	; (3b2c <LCD_clear+0x6c>)
    3b0a:	4798      	blx	r3
}
    3b0c:	46c0      	nop			; (mov r8, r8)
    3b0e:	46bd      	mov	sp, r7
    3b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	00003a21 	.word	0x00003a21
    3b18:	00013435 	.word	0x00013435
    3b1c:	000153e9 	.word	0x000153e9
    3b20:	006acfbf 	.word	0x006acfbf
    3b24:	000153a9 	.word	0x000153a9
    3b28:	006acfc0 	.word	0x006acfc0
    3b2c:	20000001 	.word	0x20000001

00003b30 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b084      	sub	sp, #16
    3b34:	af00      	add	r7, sp, #0
    3b36:	0002      	movs	r2, r0
    3b38:	6039      	str	r1, [r7, #0]
    3b3a:	1dfb      	adds	r3, r7, #7
    3b3c:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
    3b3e:	1dfb      	adds	r3, r7, #7
    3b40:	1dfa      	adds	r2, r7, #7
    3b42:	7812      	ldrb	r2, [r2, #0]
    3b44:	2107      	movs	r1, #7
    3b46:	400a      	ands	r2, r1
    3b48:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
    3b4a:	1dfb      	adds	r3, r7, #7
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	00db      	lsls	r3, r3, #3
    3b50:	b25b      	sxtb	r3, r3
    3b52:	2240      	movs	r2, #64	; 0x40
    3b54:	4313      	orrs	r3, r2
    3b56:	b25b      	sxtb	r3, r3
    3b58:	b2db      	uxtb	r3, r3
    3b5a:	0018      	movs	r0, r3
    3b5c:	4b0a      	ldr	r3, [pc, #40]	; (3b88 <LCD_Create_Custom_createChar+0x58>)
    3b5e:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3b60:	2300      	movs	r3, #0
    3b62:	60fb      	str	r3, [r7, #12]
    3b64:	e009      	b.n	3b7a <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
    3b66:	68fb      	ldr	r3, [r7, #12]
    3b68:	683a      	ldr	r2, [r7, #0]
    3b6a:	18d3      	adds	r3, r2, r3
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	0018      	movs	r0, r3
    3b70:	4b06      	ldr	r3, [pc, #24]	; (3b8c <LCD_Create_Custom_createChar+0x5c>)
    3b72:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3b74:	68fb      	ldr	r3, [r7, #12]
    3b76:	3301      	adds	r3, #1
    3b78:	60fb      	str	r3, [r7, #12]
    3b7a:	68fb      	ldr	r3, [r7, #12]
    3b7c:	2b07      	cmp	r3, #7
    3b7e:	ddf2      	ble.n	3b66 <LCD_Create_Custom_createChar+0x36>
	}
}
    3b80:	46c0      	nop			; (mov r8, r8)
    3b82:	46bd      	mov	sp, r7
    3b84:	b004      	add	sp, #16
    3b86:	bd80      	pop	{r7, pc}
    3b88:	00003a21 	.word	0x00003a21
    3b8c:	00003a45 	.word	0x00003a45

00003b90 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b084      	sub	sp, #16
    3b94:	af00      	add	r7, sp, #0
    3b96:	0002      	movs	r2, r0
    3b98:	1dfb      	adds	r3, r7, #7
    3b9a:	701a      	strb	r2, [r3, #0]
    3b9c:	1dbb      	adds	r3, r7, #6
    3b9e:	1c0a      	adds	r2, r1, #0
    3ba0:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
    3ba2:	2304      	movs	r3, #4
    3ba4:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
    3ba6:	1dbb      	adds	r3, r7, #6
    3ba8:	781a      	ldrb	r2, [r3, #0]
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	429a      	cmp	r2, r3
    3bae:	d304      	bcc.n	3bba <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
    3bb0:	68fb      	ldr	r3, [r7, #12]
    3bb2:	b2da      	uxtb	r2, r3
    3bb4:	1dbb      	adds	r3, r7, #6
    3bb6:	3a01      	subs	r2, #1
    3bb8:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
    3bba:	4b10      	ldr	r3, [pc, #64]	; (3bfc <LCD_setCursor+0x6c>)
    3bbc:	781b      	ldrb	r3, [r3, #0]
    3bbe:	1dba      	adds	r2, r7, #6
    3bc0:	7812      	ldrb	r2, [r2, #0]
    3bc2:	429a      	cmp	r2, r3
    3bc4:	d304      	bcc.n	3bd0 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
    3bc6:	4b0d      	ldr	r3, [pc, #52]	; (3bfc <LCD_setCursor+0x6c>)
    3bc8:	781a      	ldrb	r2, [r3, #0]
    3bca:	1dbb      	adds	r3, r7, #6
    3bcc:	3a01      	subs	r2, #1
    3bce:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    3bd0:	1dbb      	adds	r3, r7, #6
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	4a0a      	ldr	r2, [pc, #40]	; (3c00 <LCD_setCursor+0x70>)
    3bd6:	5cd2      	ldrb	r2, [r2, r3]
    3bd8:	1dfb      	adds	r3, r7, #7
    3bda:	781b      	ldrb	r3, [r3, #0]
    3bdc:	18d3      	adds	r3, r2, r3
    3bde:	b2db      	uxtb	r3, r3
    3be0:	b25b      	sxtb	r3, r3
    3be2:	2280      	movs	r2, #128	; 0x80
    3be4:	4252      	negs	r2, r2
    3be6:	4313      	orrs	r3, r2
    3be8:	b25b      	sxtb	r3, r3
    3bea:	b2db      	uxtb	r3, r3
    3bec:	0018      	movs	r0, r3
    3bee:	4b05      	ldr	r3, [pc, #20]	; (3c04 <LCD_setCursor+0x74>)
    3bf0:	4798      	blx	r3
}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	46bd      	mov	sp, r7
    3bf6:	b004      	add	sp, #16
    3bf8:	bd80      	pop	{r7, pc}
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	200006b6 	.word	0x200006b6
    3c00:	200006b0 	.word	0x200006b0
    3c04:	00003a21 	.word	0x00003a21

00003c08 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
    3c0c:	4b08      	ldr	r3, [pc, #32]	; (3c30 <LCD_display+0x28>)
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	2204      	movs	r2, #4
    3c12:	4313      	orrs	r3, r2
    3c14:	b2da      	uxtb	r2, r3
    3c16:	4b06      	ldr	r3, [pc, #24]	; (3c30 <LCD_display+0x28>)
    3c18:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    3c1a:	4b05      	ldr	r3, [pc, #20]	; (3c30 <LCD_display+0x28>)
    3c1c:	781b      	ldrb	r3, [r3, #0]
    3c1e:	2208      	movs	r2, #8
    3c20:	4313      	orrs	r3, r2
    3c22:	b2db      	uxtb	r3, r3
    3c24:	0018      	movs	r0, r3
    3c26:	4b03      	ldr	r3, [pc, #12]	; (3c34 <LCD_display+0x2c>)
    3c28:	4798      	blx	r3
}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	46bd      	mov	sp, r7
    3c2e:	bd80      	pop	{r7, pc}
    3c30:	200006b5 	.word	0x200006b5
    3c34:	00003a21 	.word	0x00003a21

00003c38 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	0018      	movs	r0, r3
    3c44:	4b0f      	ldr	r3, [pc, #60]	; (3c84 <Buffer_writer+0x4c>)
    3c46:	4798      	blx	r3
    3c48:	0003      	movs	r3, r0
    3c4a:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
    3c4c:	2300      	movs	r3, #0
    3c4e:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3c50:	e00b      	b.n	3c6a <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	1c5a      	adds	r2, r3, #1
    3c56:	607a      	str	r2, [r7, #4]
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	0018      	movs	r0, r3
    3c5c:	4b0a      	ldr	r3, [pc, #40]	; (3c88 <Buffer_writer+0x50>)
    3c5e:	4798      	blx	r3
    3c60:	1e03      	subs	r3, r0, #0
    3c62:	d008      	beq.n	3c76 <Buffer_writer+0x3e>
    3c64:	68bb      	ldr	r3, [r7, #8]
    3c66:	3301      	adds	r3, #1
    3c68:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3c6a:	68fb      	ldr	r3, [r7, #12]
    3c6c:	1e5a      	subs	r2, r3, #1
    3c6e:	60fa      	str	r2, [r7, #12]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d1ee      	bne.n	3c52 <Buffer_writer+0x1a>
    3c74:	e000      	b.n	3c78 <Buffer_writer+0x40>
		else break;
    3c76:	46c0      	nop			; (mov r8, r8)
	}
	return n;
    3c78:	68bb      	ldr	r3, [r7, #8]
}
    3c7a:	0018      	movs	r0, r3
    3c7c:	46bd      	mov	sp, r7
    3c7e:	b004      	add	sp, #16
    3c80:	bd80      	pop	{r7, pc}
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	00017b47 	.word	0x00017b47
    3c88:	00003a45 	.word	0x00003a45

00003c8c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
    3c8c:	b40f      	push	{r0, r1, r2, r3}
    3c8e:	b580      	push	{r7, lr}
    3c90:	b084      	sub	sp, #16
    3c92:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
    3c94:	69bb      	ldr	r3, [r7, #24]
    3c96:	0018      	movs	r0, r3
    3c98:	4b11      	ldr	r3, [pc, #68]	; (3ce0 <lcd_printf+0x54>)
    3c9a:	4798      	blx	r3
    3c9c:	0003      	movs	r3, r0
    3c9e:	3303      	adds	r3, #3
    3ca0:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    3ca2:	68fb      	ldr	r3, [r7, #12]
    3ca4:	0018      	movs	r0, r3
    3ca6:	4b0f      	ldr	r3, [pc, #60]	; (3ce4 <lcd_printf+0x58>)
    3ca8:	4798      	blx	r3
    3caa:	0003      	movs	r3, r0
    3cac:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
    3cae:	231c      	movs	r3, #28
    3cb0:	18fb      	adds	r3, r7, r3
    3cb2:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
    3cb4:	687a      	ldr	r2, [r7, #4]
    3cb6:	69b9      	ldr	r1, [r7, #24]
    3cb8:	68bb      	ldr	r3, [r7, #8]
    3cba:	0018      	movs	r0, r3
    3cbc:	4b0a      	ldr	r3, [pc, #40]	; (3ce8 <lcd_printf+0x5c>)
    3cbe:	4798      	blx	r3
	Buffer_writer(lcd_buff);
    3cc0:	68bb      	ldr	r3, [r7, #8]
    3cc2:	0018      	movs	r0, r3
    3cc4:	4b09      	ldr	r3, [pc, #36]	; (3cec <lcd_printf+0x60>)
    3cc6:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
    3cc8:	68bb      	ldr	r3, [r7, #8]
    3cca:	0018      	movs	r0, r3
    3ccc:	4b08      	ldr	r3, [pc, #32]	; (3cf0 <lcd_printf+0x64>)
    3cce:	4798      	blx	r3
}
    3cd0:	46c0      	nop			; (mov r8, r8)
    3cd2:	46bd      	mov	sp, r7
    3cd4:	b004      	add	sp, #16
    3cd6:	bc80      	pop	{r7}
    3cd8:	bc08      	pop	{r3}
    3cda:	b004      	add	sp, #16
    3cdc:	4718      	bx	r3
    3cde:	46c0      	nop			; (mov r8, r8)
    3ce0:	00017b47 	.word	0x00017b47
    3ce4:	00017835 	.word	0x00017835
    3ce8:	00017e35 	.word	0x00017e35
    3cec:	00003c39 	.word	0x00003c39
    3cf0:	00017849 	.word	0x00017849

00003cf4 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
    3cf4:	b580      	push	{r7, lr}
    3cf6:	b084      	sub	sp, #16
    3cf8:	af00      	add	r7, sp, #0
    3cfa:	6078      	str	r0, [r7, #4]
	if (!str) return;
    3cfc:	687b      	ldr	r3, [r7, #4]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d028      	beq.n	3d54 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	60fb      	str	r3, [r7, #12]
    3d06:	e020      	b.n	3d4a <StringtoUpperCase+0x56>
		*p = toupper(*p);
    3d08:	230b      	movs	r3, #11
    3d0a:	18fb      	adds	r3, r7, r3
    3d0c:	68fa      	ldr	r2, [r7, #12]
    3d0e:	7812      	ldrb	r2, [r2, #0]
    3d10:	701a      	strb	r2, [r3, #0]
    3d12:	4b12      	ldr	r3, [pc, #72]	; (3d5c <StringtoUpperCase+0x68>)
    3d14:	4798      	blx	r3
    3d16:	0002      	movs	r2, r0
    3d18:	230b      	movs	r3, #11
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	781b      	ldrb	r3, [r3, #0]
    3d1e:	3301      	adds	r3, #1
    3d20:	18d3      	adds	r3, r2, r3
    3d22:	781b      	ldrb	r3, [r3, #0]
    3d24:	001a      	movs	r2, r3
    3d26:	2303      	movs	r3, #3
    3d28:	4013      	ands	r3, r2
    3d2a:	2b02      	cmp	r3, #2
    3d2c:	d104      	bne.n	3d38 <StringtoUpperCase+0x44>
    3d2e:	230b      	movs	r3, #11
    3d30:	18fb      	adds	r3, r7, r3
    3d32:	781b      	ldrb	r3, [r3, #0]
    3d34:	3b20      	subs	r3, #32
    3d36:	e002      	b.n	3d3e <StringtoUpperCase+0x4a>
    3d38:	230b      	movs	r3, #11
    3d3a:	18fb      	adds	r3, r7, r3
    3d3c:	781b      	ldrb	r3, [r3, #0]
    3d3e:	b2da      	uxtb	r2, r3
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
    3d44:	68fb      	ldr	r3, [r7, #12]
    3d46:	3301      	adds	r3, #1
    3d48:	60fb      	str	r3, [r7, #12]
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	781b      	ldrb	r3, [r3, #0]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d1da      	bne.n	3d08 <StringtoUpperCase+0x14>
    3d52:	e000      	b.n	3d56 <StringtoUpperCase+0x62>
	if (!str) return;
    3d54:	46c0      	nop			; (mov r8, r8)
	}
}
    3d56:	46bd      	mov	sp, r7
    3d58:	b004      	add	sp, #16
    3d5a:	bd80      	pop	{r7, pc}
    3d5c:	00017819 	.word	0x00017819

00003d60 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b084      	sub	sp, #16
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
    3d6a:	683b      	ldr	r3, [r7, #0]
    3d6c:	0018      	movs	r0, r3
    3d6e:	4b10      	ldr	r3, [pc, #64]	; (3db0 <StringstartsWith+0x50>)
    3d70:	4798      	blx	r3
    3d72:	0003      	movs	r3, r0
    3d74:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	0018      	movs	r0, r3
    3d7a:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <StringstartsWith+0x50>)
    3d7c:	4798      	blx	r3
    3d7e:	0003      	movs	r3, r0
    3d80:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    3d82:	68ba      	ldr	r2, [r7, #8]
    3d84:	68fb      	ldr	r3, [r7, #12]
    3d86:	429a      	cmp	r2, r3
    3d88:	d309      	bcc.n	3d9e <StringstartsWith+0x3e>
    3d8a:	68fa      	ldr	r2, [r7, #12]
    3d8c:	6879      	ldr	r1, [r7, #4]
    3d8e:	683b      	ldr	r3, [r7, #0]
    3d90:	0018      	movs	r0, r3
    3d92:	4b08      	ldr	r3, [pc, #32]	; (3db4 <StringstartsWith+0x54>)
    3d94:	4798      	blx	r3
    3d96:	1e03      	subs	r3, r0, #0
    3d98:	d101      	bne.n	3d9e <StringstartsWith+0x3e>
    3d9a:	2301      	movs	r3, #1
    3d9c:	e000      	b.n	3da0 <StringstartsWith+0x40>
    3d9e:	2300      	movs	r3, #0
    3da0:	1c1a      	adds	r2, r3, #0
    3da2:	2301      	movs	r3, #1
    3da4:	4013      	ands	r3, r2
    3da6:	b2db      	uxtb	r3, r3
}
    3da8:	0018      	movs	r0, r3
    3daa:	46bd      	mov	sp, r7
    3dac:	b004      	add	sp, #16
    3dae:	bd80      	pop	{r7, pc}
    3db0:	00017b47 	.word	0x00017b47
    3db4:	00017b55 	.word	0x00017b55

00003db8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    3dbc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    3dc0:	4b02      	ldr	r3, [pc, #8]	; (3dcc <NVIC_SystemReset+0x14>)
    3dc2:	4a03      	ldr	r2, [pc, #12]	; (3dd0 <NVIC_SystemReset+0x18>)
    3dc4:	60da      	str	r2, [r3, #12]
    3dc6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    3dca:	e7fe      	b.n	3dca <NVIC_SystemReset+0x12>
    3dcc:	e000ed00 	.word	0xe000ed00
    3dd0:	05fa0004 	.word	0x05fa0004

00003dd4 <system_pinmux_get_group_from_gpio_pin>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b084      	sub	sp, #16
    3dd8:	af00      	add	r7, sp, #0
    3dda:	0002      	movs	r2, r0
    3ddc:	1dfb      	adds	r3, r7, #7
    3dde:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3de0:	230f      	movs	r3, #15
    3de2:	18fb      	adds	r3, r7, r3
    3de4:	1dfa      	adds	r2, r7, #7
    3de6:	7812      	ldrb	r2, [r2, #0]
    3de8:	09d2      	lsrs	r2, r2, #7
    3dea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3dec:	230e      	movs	r3, #14
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	1dfa      	adds	r2, r7, #7
    3df2:	7812      	ldrb	r2, [r2, #0]
    3df4:	0952      	lsrs	r2, r2, #5
    3df6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3df8:	4b0d      	ldr	r3, [pc, #52]	; (3e30 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3dfa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3dfc:	230f      	movs	r3, #15
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	781b      	ldrb	r3, [r3, #0]
    3e02:	2b00      	cmp	r3, #0
    3e04:	d10f      	bne.n	3e26 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3e06:	230f      	movs	r3, #15
    3e08:	18fb      	adds	r3, r7, r3
    3e0a:	781b      	ldrb	r3, [r3, #0]
    3e0c:	009b      	lsls	r3, r3, #2
    3e0e:	2210      	movs	r2, #16
    3e10:	4694      	mov	ip, r2
    3e12:	44bc      	add	ip, r7
    3e14:	4463      	add	r3, ip
    3e16:	3b08      	subs	r3, #8
    3e18:	681a      	ldr	r2, [r3, #0]
    3e1a:	230e      	movs	r3, #14
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	781b      	ldrb	r3, [r3, #0]
    3e20:	01db      	lsls	r3, r3, #7
    3e22:	18d3      	adds	r3, r2, r3
    3e24:	e000      	b.n	3e28 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3e26:	2300      	movs	r3, #0
}
    3e28:	0018      	movs	r0, r3
    3e2a:	46bd      	mov	sp, r7
    3e2c:	b004      	add	sp, #16
    3e2e:	bd80      	pop	{r7, pc}
    3e30:	41004400 	.word	0x41004400

00003e34 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    3e34:	b580      	push	{r7, lr}
    3e36:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    3e38:	4b02      	ldr	r3, [pc, #8]	; (3e44 <system_reset+0x10>)
    3e3a:	4798      	blx	r3
}
    3e3c:	46c0      	nop			; (mov r8, r8)
    3e3e:	46bd      	mov	sp, r7
    3e40:	bd80      	pop	{r7, pc}
    3e42:	46c0      	nop			; (mov r8, r8)
    3e44:	00003db9 	.word	0x00003db9

00003e48 <port_get_group_from_gpio_pin>:
{
    3e48:	b580      	push	{r7, lr}
    3e4a:	b082      	sub	sp, #8
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	0002      	movs	r2, r0
    3e50:	1dfb      	adds	r3, r7, #7
    3e52:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3e54:	1dfb      	adds	r3, r7, #7
    3e56:	781b      	ldrb	r3, [r3, #0]
    3e58:	0018      	movs	r0, r3
    3e5a:	4b03      	ldr	r3, [pc, #12]	; (3e68 <port_get_group_from_gpio_pin+0x20>)
    3e5c:	4798      	blx	r3
    3e5e:	0003      	movs	r3, r0
}
    3e60:	0018      	movs	r0, r3
    3e62:	46bd      	mov	sp, r7
    3e64:	b002      	add	sp, #8
    3e66:	bd80      	pop	{r7, pc}
    3e68:	00003dd5 	.word	0x00003dd5

00003e6c <port_get_config_defaults>:
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	2200      	movs	r2, #0
    3e78:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	2201      	movs	r2, #1
    3e7e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	2200      	movs	r2, #0
    3e84:	709a      	strb	r2, [r3, #2]
}
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	46bd      	mov	sp, r7
    3e8a:	b002      	add	sp, #8
    3e8c:	bd80      	pop	{r7, pc}
	...

00003e90 <port_pin_get_input_level>:
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b084      	sub	sp, #16
    3e94:	af00      	add	r7, sp, #0
    3e96:	0002      	movs	r2, r0
    3e98:	1dfb      	adds	r3, r7, #7
    3e9a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3e9c:	1dfb      	adds	r3, r7, #7
    3e9e:	781b      	ldrb	r3, [r3, #0]
    3ea0:	0018      	movs	r0, r3
    3ea2:	4b0b      	ldr	r3, [pc, #44]	; (3ed0 <port_pin_get_input_level+0x40>)
    3ea4:	4798      	blx	r3
    3ea6:	0003      	movs	r3, r0
    3ea8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3eaa:	1dfb      	adds	r3, r7, #7
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	221f      	movs	r2, #31
    3eb0:	4013      	ands	r3, r2
    3eb2:	2201      	movs	r2, #1
    3eb4:	409a      	lsls	r2, r3
    3eb6:	0013      	movs	r3, r2
    3eb8:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    3eba:	68fb      	ldr	r3, [r7, #12]
    3ebc:	6a1b      	ldr	r3, [r3, #32]
    3ebe:	68ba      	ldr	r2, [r7, #8]
    3ec0:	4013      	ands	r3, r2
    3ec2:	1e5a      	subs	r2, r3, #1
    3ec4:	4193      	sbcs	r3, r2
    3ec6:	b2db      	uxtb	r3, r3
}
    3ec8:	0018      	movs	r0, r3
    3eca:	46bd      	mov	sp, r7
    3ecc:	b004      	add	sp, #16
    3ece:	bd80      	pop	{r7, pc}
    3ed0:	00003e49 	.word	0x00003e49

00003ed4 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
    3ed4:	b580      	push	{r7, lr}
    3ed6:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
    3ed8:	4b0b      	ldr	r3, [pc, #44]	; (3f08 <setObtainEvent+0x34>)
    3eda:	781b      	ldrb	r3, [r3, #0]
    3edc:	2201      	movs	r2, #1
    3ede:	4053      	eors	r3, r2
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d00c      	beq.n	3f00 <setObtainEvent+0x2c>
    3ee6:	4b09      	ldr	r3, [pc, #36]	; (3f0c <setObtainEvent+0x38>)
    3ee8:	4798      	blx	r3
    3eea:	0002      	movs	r2, r0
    3eec:	4b08      	ldr	r3, [pc, #32]	; (3f10 <setObtainEvent+0x3c>)
    3eee:	681b      	ldr	r3, [r3, #0]
    3ef0:	1ad2      	subs	r2, r2, r3
    3ef2:	23fa      	movs	r3, #250	; 0xfa
    3ef4:	009b      	lsls	r3, r3, #2
    3ef6:	429a      	cmp	r2, r3
    3ef8:	d902      	bls.n	3f00 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
    3efa:	4b03      	ldr	r3, [pc, #12]	; (3f08 <setObtainEvent+0x34>)
    3efc:	2201      	movs	r2, #1
    3efe:	701a      	strb	r2, [r3, #0]
	}
}
    3f00:	46c0      	nop			; (mov r8, r8)
    3f02:	46bd      	mov	sp, r7
    3f04:	bd80      	pop	{r7, pc}
    3f06:	46c0      	nop			; (mov r8, r8)
    3f08:	20000736 	.word	0x20000736
    3f0c:	0000ef5d 	.word	0x0000ef5d
    3f10:	200007b4 	.word	0x200007b4

00003f14 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
    3f14:	b580      	push	{r7, lr}
    3f16:	b082      	sub	sp, #8
    3f18:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
    3f1a:	1dfb      	adds	r3, r7, #7
    3f1c:	2201      	movs	r2, #1
    3f1e:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
    3f20:	4b1f      	ldr	r3, [pc, #124]	; (3fa0 <operateOnStagedEvent+0x8c>)
    3f22:	781b      	ldrb	r3, [r3, #0]
    3f24:	2b00      	cmp	r3, #0
    3f26:	d003      	beq.n	3f30 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
    3f28:	1dfb      	adds	r3, r7, #7
    3f2a:	4a1e      	ldr	r2, [pc, #120]	; (3fa4 <operateOnStagedEvent+0x90>)
    3f2c:	7a12      	ldrb	r2, [r2, #8]
    3f2e:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
    3f30:	4b1d      	ldr	r3, [pc, #116]	; (3fa8 <operateOnStagedEvent+0x94>)
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d02f      	beq.n	3f98 <operateOnStagedEvent+0x84>
    3f38:	4b1c      	ldr	r3, [pc, #112]	; (3fac <operateOnStagedEvent+0x98>)
    3f3a:	781b      	ldrb	r3, [r3, #0]
    3f3c:	2b01      	cmp	r3, #1
    3f3e:	d00b      	beq.n	3f58 <operateOnStagedEvent+0x44>
    3f40:	4b1b      	ldr	r3, [pc, #108]	; (3fb0 <operateOnStagedEvent+0x9c>)
    3f42:	4798      	blx	r3
    3f44:	0002      	movs	r2, r0
    3f46:	4b1b      	ldr	r3, [pc, #108]	; (3fb4 <operateOnStagedEvent+0xa0>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	1ad2      	subs	r2, r2, r3
    3f4c:	1dfb      	adds	r3, r7, #7
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	4919      	ldr	r1, [pc, #100]	; (3fb8 <operateOnStagedEvent+0xa4>)
    3f52:	434b      	muls	r3, r1
    3f54:	429a      	cmp	r2, r3
    3f56:	d91f      	bls.n	3f98 <operateOnStagedEvent+0x84>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    3f58:	4b18      	ldr	r3, [pc, #96]	; (3fbc <operateOnStagedEvent+0xa8>)
    3f5a:	78db      	ldrb	r3, [r3, #3]
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d01b      	beq.n	3f98 <operateOnStagedEvent+0x84>
		{
			if (eventStaged)
    3f60:	4b0f      	ldr	r3, [pc, #60]	; (3fa0 <operateOnStagedEvent+0x8c>)
    3f62:	781b      	ldrb	r3, [r3, #0]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d007      	beq.n	3f78 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
    3f68:	4b15      	ldr	r3, [pc, #84]	; (3fc0 <operateOnStagedEvent+0xac>)
    3f6a:	781a      	ldrb	r2, [r3, #0]
    3f6c:	4b15      	ldr	r3, [pc, #84]	; (3fc4 <operateOnStagedEvent+0xb0>)
    3f6e:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
    3f70:	4b0b      	ldr	r3, [pc, #44]	; (3fa0 <operateOnStagedEvent+0x8c>)
    3f72:	2200      	movs	r2, #0
    3f74:	701a      	strb	r2, [r3, #0]
    3f76:	e00d      	b.n	3f94 <operateOnStagedEvent+0x80>
			}
			else if (m2mEventStaged)
    3f78:	4b13      	ldr	r3, [pc, #76]	; (3fc8 <operateOnStagedEvent+0xb4>)
    3f7a:	781b      	ldrb	r3, [r3, #0]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d009      	beq.n	3f94 <operateOnStagedEvent+0x80>
			{
				m2mEventNo=stagedEventType;
    3f80:	4b0f      	ldr	r3, [pc, #60]	; (3fc0 <operateOnStagedEvent+0xac>)
    3f82:	781a      	ldrb	r2, [r3, #0]
    3f84:	4b11      	ldr	r3, [pc, #68]	; (3fcc <operateOnStagedEvent+0xb8>)
    3f86:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
    3f88:	4b11      	ldr	r3, [pc, #68]	; (3fd0 <operateOnStagedEvent+0xbc>)
    3f8a:	2201      	movs	r2, #1
    3f8c:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
    3f8e:	4b0e      	ldr	r3, [pc, #56]	; (3fc8 <operateOnStagedEvent+0xb4>)
    3f90:	2200      	movs	r2, #0
    3f92:	701a      	strb	r2, [r3, #0]
			}
			makeResponseAction();
    3f94:	4b0f      	ldr	r3, [pc, #60]	; (3fd4 <operateOnStagedEvent+0xc0>)
    3f96:	4798      	blx	r3
		}
	}
}
    3f98:	46c0      	nop			; (mov r8, r8)
    3f9a:	46bd      	mov	sp, r7
    3f9c:	b002      	add	sp, #8
    3f9e:	bd80      	pop	{r7, pc}
    3fa0:	20000786 	.word	0x20000786
    3fa4:	2000064c 	.word	0x2000064c
    3fa8:	20000736 	.word	0x20000736
    3fac:	200006c5 	.word	0x200006c5
    3fb0:	0000ef5d 	.word	0x0000ef5d
    3fb4:	20000798 	.word	0x20000798
    3fb8:	0000ea60 	.word	0x0000ea60
    3fbc:	20000618 	.word	0x20000618
    3fc0:	20000738 	.word	0x20000738
    3fc4:	20000727 	.word	0x20000727
    3fc8:	20000752 	.word	0x20000752
    3fcc:	20000701 	.word	0x20000701
    3fd0:	20000707 	.word	0x20000707
    3fd4:	00003fd9 	.word	0x00003fd9

00003fd8 <makeResponseAction>:

void makeResponseAction(void)
{
    3fd8:	b580      	push	{r7, lr}
    3fda:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
    3fdc:	4b07      	ldr	r3, [pc, #28]	; (3ffc <makeResponseAction+0x24>)
    3fde:	795b      	ldrb	r3, [r3, #5]
    3fe0:	2b4e      	cmp	r3, #78	; 0x4e
    3fe2:	d103      	bne.n	3fec <makeResponseAction+0x14>
    3fe4:	4b06      	ldr	r3, [pc, #24]	; (4000 <makeResponseAction+0x28>)
    3fe6:	781b      	ldrb	r3, [r3, #0]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d004      	beq.n	3ff6 <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
    3fec:	4b05      	ldr	r3, [pc, #20]	; (4004 <makeResponseAction+0x2c>)
    3fee:	2201      	movs	r2, #1
    3ff0:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
    3ff2:	4b05      	ldr	r3, [pc, #20]	; (4008 <makeResponseAction+0x30>)
    3ff4:	4798      	blx	r3
	}
}
    3ff6:	46c0      	nop			; (mov r8, r8)
    3ff8:	46bd      	mov	sp, r7
    3ffa:	bd80      	pop	{r7, pc}
    3ffc:	2000064c 	.word	0x2000064c
    4000:	20000707 	.word	0x20000707
    4004:	20000708 	.word	0x20000708
    4008:	00004241 	.word	0x00004241

0000400c <endCall>:

void endCall(void)
{
    400c:	b580      	push	{r7, lr}
    400e:	af00      	add	r7, sp, #0
	nr  = 0;
    4010:	4b6d      	ldr	r3, [pc, #436]	; (41c8 <endCall+0x1bc>)
    4012:	2200      	movs	r2, #0
    4014:	701a      	strb	r2, [r3, #0]
	inCall=false;
    4016:	4b6d      	ldr	r3, [pc, #436]	; (41cc <endCall+0x1c0>)
    4018:	2200      	movs	r2, #0
    401a:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
    401c:	4b6c      	ldr	r3, [pc, #432]	; (41d0 <endCall+0x1c4>)
    401e:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    4020:	2200      	movs	r2, #0
    4022:	2100      	movs	r1, #0
    4024:	2000      	movs	r0, #0
    4026:	4b6b      	ldr	r3, [pc, #428]	; (41d4 <endCall+0x1c8>)
    4028:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
    402a:	23fa      	movs	r3, #250	; 0xfa
    402c:	009b      	lsls	r3, r3, #2
    402e:	0018      	movs	r0, r3
    4030:	4b69      	ldr	r3, [pc, #420]	; (41d8 <endCall+0x1cc>)
    4032:	4798      	blx	r3
	freezeIncomingCalls = false;
    4034:	4b69      	ldr	r3, [pc, #420]	; (41dc <endCall+0x1d0>)
    4036:	2200      	movs	r2, #0
    4038:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    403a:	4b69      	ldr	r3, [pc, #420]	; (41e0 <endCall+0x1d4>)
    403c:	785b      	ldrb	r3, [r3, #1]
    403e:	2b00      	cmp	r3, #0
    4040:	d002      	beq.n	4048 <endCall+0x3c>
	{
		zeroPressed=false;
    4042:	4b68      	ldr	r3, [pc, #416]	; (41e4 <endCall+0x1d8>)
    4044:	2200      	movs	r2, #0
    4046:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    4048:	4b65      	ldr	r3, [pc, #404]	; (41e0 <endCall+0x1d4>)
    404a:	78db      	ldrb	r3, [r3, #3]
    404c:	2b01      	cmp	r3, #1
    404e:	d11d      	bne.n	408c <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
    4050:	4b65      	ldr	r3, [pc, #404]	; (41e8 <endCall+0x1dc>)
    4052:	781b      	ldrb	r3, [r3, #0]
    4054:	b2db      	uxtb	r3, r3
    4056:	2b4e      	cmp	r3, #78	; 0x4e
    4058:	d004      	beq.n	4064 <endCall+0x58>
    405a:	4b63      	ldr	r3, [pc, #396]	; (41e8 <endCall+0x1dc>)
    405c:	781b      	ldrb	r3, [r3, #0]
    405e:	b2db      	uxtb	r3, r3
    4060:	2b52      	cmp	r3, #82	; 0x52
    4062:	d10d      	bne.n	4080 <endCall+0x74>
    4064:	4b61      	ldr	r3, [pc, #388]	; (41ec <endCall+0x1e0>)
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	b2db      	uxtb	r3, r3
    406a:	2b4f      	cmp	r3, #79	; 0x4f
    406c:	d108      	bne.n	4080 <endCall+0x74>
    406e:	4b60      	ldr	r3, [pc, #384]	; (41f0 <endCall+0x1e4>)
    4070:	781b      	ldrb	r3, [r3, #0]
    4072:	2201      	movs	r2, #1
    4074:	4053      	eors	r3, r2
    4076:	b2db      	uxtb	r3, r3
    4078:	2b00      	cmp	r3, #0
    407a:	d001      	beq.n	4080 <endCall+0x74>
    407c:	2301      	movs	r3, #1
    407e:	e000      	b.n	4082 <endCall+0x76>
    4080:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    4082:	1c1a      	adds	r2, r3, #0
    4084:	2301      	movs	r3, #1
    4086:	4013      	ands	r3, r2
    4088:	b2db      	uxtb	r3, r3
    408a:	e015      	b.n	40b8 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
    408c:	4b56      	ldr	r3, [pc, #344]	; (41e8 <endCall+0x1dc>)
    408e:	781b      	ldrb	r3, [r3, #0]
    4090:	b2db      	uxtb	r3, r3
    4092:	2b4e      	cmp	r3, #78	; 0x4e
    4094:	d004      	beq.n	40a0 <endCall+0x94>
    4096:	4b54      	ldr	r3, [pc, #336]	; (41e8 <endCall+0x1dc>)
    4098:	781b      	ldrb	r3, [r3, #0]
    409a:	b2db      	uxtb	r3, r3
    409c:	2b52      	cmp	r3, #82	; 0x52
    409e:	d106      	bne.n	40ae <endCall+0xa2>
    40a0:	4b52      	ldr	r3, [pc, #328]	; (41ec <endCall+0x1e0>)
    40a2:	781b      	ldrb	r3, [r3, #0]
    40a4:	b2db      	uxtb	r3, r3
    40a6:	2b4f      	cmp	r3, #79	; 0x4f
    40a8:	d101      	bne.n	40ae <endCall+0xa2>
    40aa:	2301      	movs	r3, #1
    40ac:	e000      	b.n	40b0 <endCall+0xa4>
    40ae:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    40b0:	1c1a      	adds	r2, r3, #0
    40b2:	2301      	movs	r3, #1
    40b4:	4013      	ands	r3, r2
    40b6:	b2db      	uxtb	r3, r3
    40b8:	2b00      	cmp	r3, #0
    40ba:	d021      	beq.n	4100 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
    40bc:	4b4d      	ldr	r3, [pc, #308]	; (41f4 <endCall+0x1e8>)
    40be:	781b      	ldrb	r3, [r3, #0]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d11d      	bne.n	4100 <endCall+0xf4>
    40c4:	4b4c      	ldr	r3, [pc, #304]	; (41f8 <endCall+0x1ec>)
    40c6:	781b      	ldrb	r3, [r3, #0]
    40c8:	2201      	movs	r2, #1
    40ca:	4053      	eors	r3, r2
    40cc:	b2db      	uxtb	r3, r3
    40ce:	2b00      	cmp	r3, #0
    40d0:	d016      	beq.n	4100 <endCall+0xf4>
    40d2:	4b4a      	ldr	r3, [pc, #296]	; (41fc <endCall+0x1f0>)
    40d4:	795b      	ldrb	r3, [r3, #5]
    40d6:	2b54      	cmp	r3, #84	; 0x54
    40d8:	d112      	bne.n	4100 <endCall+0xf4>
    40da:	4b49      	ldr	r3, [pc, #292]	; (4200 <endCall+0x1f4>)
    40dc:	789b      	ldrb	r3, [r3, #2]
    40de:	2b01      	cmp	r3, #1
    40e0:	d90e      	bls.n	4100 <endCall+0xf4>
		{
			retries=1;
    40e2:	4b44      	ldr	r3, [pc, #272]	; (41f4 <endCall+0x1e8>)
    40e4:	2201      	movs	r2, #1
    40e6:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    40e8:	4b46      	ldr	r3, [pc, #280]	; (4204 <endCall+0x1f8>)
    40ea:	2201      	movs	r2, #1
    40ec:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
    40ee:	4b46      	ldr	r3, [pc, #280]	; (4208 <endCall+0x1fc>)
    40f0:	4798      	blx	r3
    40f2:	0002      	movs	r2, r0
    40f4:	4b45      	ldr	r3, [pc, #276]	; (420c <endCall+0x200>)
    40f6:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
    40f8:	4b45      	ldr	r3, [pc, #276]	; (4210 <endCall+0x204>)
    40fa:	781a      	ldrb	r2, [r3, #0]
    40fc:	4b45      	ldr	r3, [pc, #276]	; (4214 <endCall+0x208>)
    40fe:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
    4100:	4b37      	ldr	r3, [pc, #220]	; (41e0 <endCall+0x1d4>)
    4102:	78db      	ldrb	r3, [r3, #3]
    4104:	2b00      	cmp	r3, #0
    4106:	d047      	beq.n	4198 <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
    4108:	4b37      	ldr	r3, [pc, #220]	; (41e8 <endCall+0x1dc>)
    410a:	781b      	ldrb	r3, [r3, #0]
    410c:	b2db      	uxtb	r3, r3
    410e:	2b49      	cmp	r3, #73	; 0x49
    4110:	d004      	beq.n	411c <endCall+0x110>
    4112:	4b35      	ldr	r3, [pc, #212]	; (41e8 <endCall+0x1dc>)
    4114:	781b      	ldrb	r3, [r3, #0]
    4116:	b2db      	uxtb	r3, r3
    4118:	2b52      	cmp	r3, #82	; 0x52
    411a:	d137      	bne.n	418c <endCall+0x180>
    411c:	4b33      	ldr	r3, [pc, #204]	; (41ec <endCall+0x1e0>)
    411e:	781b      	ldrb	r3, [r3, #0]
    4120:	b2db      	uxtb	r3, r3
    4122:	2b4f      	cmp	r3, #79	; 0x4f
    4124:	d132      	bne.n	418c <endCall+0x180>
    4126:	4b32      	ldr	r3, [pc, #200]	; (41f0 <endCall+0x1e4>)
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	2b00      	cmp	r3, #0
    412c:	d02e      	beq.n	418c <endCall+0x180>
    412e:	4b3a      	ldr	r3, [pc, #232]	; (4218 <endCall+0x20c>)
    4130:	795b      	ldrb	r3, [r3, #5]
    4132:	2b00      	cmp	r3, #0
    4134:	d02a      	beq.n	418c <endCall+0x180>
		{
			m2mEventCalls++;
    4136:	4b39      	ldr	r3, [pc, #228]	; (421c <endCall+0x210>)
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	3301      	adds	r3, #1
    413c:	b2da      	uxtb	r2, r3
    413e:	4b37      	ldr	r3, [pc, #220]	; (421c <endCall+0x210>)
    4140:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
    4142:	4b37      	ldr	r3, [pc, #220]	; (4220 <endCall+0x214>)
    4144:	781b      	ldrb	r3, [r3, #0]
    4146:	2b00      	cmp	r3, #0
    4148:	d006      	beq.n	4158 <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
    414a:	4b36      	ldr	r3, [pc, #216]	; (4224 <endCall+0x218>)
    414c:	781b      	ldrb	r3, [r3, #0]
    414e:	2100      	movs	r1, #0
    4150:	0018      	movs	r0, r3
    4152:	4b35      	ldr	r3, [pc, #212]	; (4228 <endCall+0x21c>)
    4154:	4798      	blx	r3
    4156:	e016      	b.n	4186 <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
    4158:	4b30      	ldr	r3, [pc, #192]	; (421c <endCall+0x210>)
    415a:	781b      	ldrb	r3, [r3, #0]
    415c:	2b01      	cmp	r3, #1
    415e:	d80c      	bhi.n	417a <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
    4160:	4b29      	ldr	r3, [pc, #164]	; (4208 <endCall+0x1fc>)
    4162:	4798      	blx	r3
    4164:	0002      	movs	r2, r0
    4166:	4b29      	ldr	r3, [pc, #164]	; (420c <endCall+0x200>)
    4168:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
    416a:	4b2e      	ldr	r3, [pc, #184]	; (4224 <endCall+0x218>)
    416c:	781a      	ldrb	r2, [r3, #0]
    416e:	4b29      	ldr	r3, [pc, #164]	; (4214 <endCall+0x208>)
    4170:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
    4172:	4b2e      	ldr	r3, [pc, #184]	; (422c <endCall+0x220>)
    4174:	2201      	movs	r2, #1
    4176:	701a      	strb	r2, [r3, #0]
    4178:	e005      	b.n	4186 <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
    417a:	4b2a      	ldr	r3, [pc, #168]	; (4224 <endCall+0x218>)
    417c:	781b      	ldrb	r3, [r3, #0]
    417e:	2103      	movs	r1, #3
    4180:	0018      	movs	r0, r3
    4182:	4b29      	ldr	r3, [pc, #164]	; (4228 <endCall+0x21c>)
    4184:	4798      	blx	r3
				}
			}
			m2mEvent = false;
    4186:	4b1a      	ldr	r3, [pc, #104]	; (41f0 <endCall+0x1e4>)
    4188:	2200      	movs	r2, #0
    418a:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
    418c:	4b28      	ldr	r3, [pc, #160]	; (4230 <endCall+0x224>)
    418e:	2200      	movs	r2, #0
    4190:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
    4192:	4b23      	ldr	r3, [pc, #140]	; (4220 <endCall+0x214>)
    4194:	2200      	movs	r2, #0
    4196:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
    4198:	4b17      	ldr	r3, [pc, #92]	; (41f8 <endCall+0x1ec>)
    419a:	2200      	movs	r2, #0
    419c:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    419e:	4b12      	ldr	r3, [pc, #72]	; (41e8 <endCall+0x1dc>)
    41a0:	224e      	movs	r2, #78	; 0x4e
    41a2:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    41a4:	4b11      	ldr	r3, [pc, #68]	; (41ec <endCall+0x1e0>)
    41a6:	224e      	movs	r2, #78	; 0x4e
    41a8:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
    41aa:	4b22      	ldr	r3, [pc, #136]	; (4234 <endCall+0x228>)
    41ac:	2200      	movs	r2, #0
    41ae:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
    41b0:	4b15      	ldr	r3, [pc, #84]	; (4208 <endCall+0x1fc>)
    41b2:	4798      	blx	r3
    41b4:	0002      	movs	r2, r0
    41b6:	4b20      	ldr	r3, [pc, #128]	; (4238 <endCall+0x22c>)
    41b8:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
    41ba:	4b20      	ldr	r3, [pc, #128]	; (423c <endCall+0x230>)
    41bc:	2200      	movs	r2, #0
    41be:	701a      	strb	r2, [r3, #0]
}
    41c0:	46c0      	nop			; (mov r8, r8)
    41c2:	46bd      	mov	sp, r7
    41c4:	bd80      	pop	{r7, pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	200006c4 	.word	0x200006c4
    41cc:	20000760 	.word	0x20000760
    41d0:	00002d71 	.word	0x00002d71
    41d4:	0000b93d 	.word	0x0000b93d
    41d8:	0000ebf9 	.word	0x0000ebf9
    41dc:	20000708 	.word	0x20000708
    41e0:	20000618 	.word	0x20000618
    41e4:	200007af 	.word	0x200007af
    41e8:	20000794 	.word	0x20000794
    41ec:	20000753 	.word	0x20000753
    41f0:	20000707 	.word	0x20000707
    41f4:	200006c5 	.word	0x200006c5
    41f8:	20000762 	.word	0x20000762
    41fc:	2000064c 	.word	0x2000064c
    4200:	20000600 	.word	0x20000600
    4204:	20000786 	.word	0x20000786
    4208:	0000ef5d 	.word	0x0000ef5d
    420c:	20000798 	.word	0x20000798
    4210:	20000727 	.word	0x20000727
    4214:	20000738 	.word	0x20000738
    4218:	20000544 	.word	0x20000544
    421c:	20000787 	.word	0x20000787
    4220:	20000700 	.word	0x20000700
    4224:	20000701 	.word	0x20000701
    4228:	0000a9fd 	.word	0x0000a9fd
    422c:	20000752 	.word	0x20000752
    4230:	20000784 	.word	0x20000784
    4234:	2000075c 	.word	0x2000075c
    4238:	200007b4 	.word	0x200007b4
    423c:	20000736 	.word	0x20000736

00004240 <makeCall>:


void makeCall(void)
{
    4240:	b580      	push	{r7, lr}
    4242:	b086      	sub	sp, #24
    4244:	af00      	add	r7, sp, #0
	inCall=true;
    4246:	4b20      	ldr	r3, [pc, #128]	; (42c8 <makeCall+0x88>)
    4248:	2201      	movs	r2, #1
    424a:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
    424c:	1d3b      	adds	r3, r7, #4
    424e:	0018      	movs	r0, r3
    4250:	2314      	movs	r3, #20
    4252:	001a      	movs	r2, r3
    4254:	2100      	movs	r1, #0
    4256:	4b1d      	ldr	r3, [pc, #116]	; (42cc <makeCall+0x8c>)
    4258:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
    425a:	4b1d      	ldr	r3, [pc, #116]	; (42d0 <makeCall+0x90>)
    425c:	795b      	ldrb	r3, [r3, #5]
    425e:	2b00      	cmp	r3, #0
    4260:	d008      	beq.n	4274 <makeCall+0x34>
    4262:	4b1c      	ldr	r3, [pc, #112]	; (42d4 <makeCall+0x94>)
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2b00      	cmp	r3, #0
    4268:	d004      	beq.n	4274 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
    426a:	1d3b      	adds	r3, r7, #4
    426c:	0018      	movs	r0, r3
    426e:	4b1a      	ldr	r3, [pc, #104]	; (42d8 <makeCall+0x98>)
    4270:	4798      	blx	r3
    4272:	e00f      	b.n	4294 <makeCall+0x54>
	}
	else
	{
		if(retries)
    4274:	4b19      	ldr	r3, [pc, #100]	; (42dc <makeCall+0x9c>)
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	2b00      	cmp	r3, #0
    427a:	d007      	beq.n	428c <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
    427c:	4b18      	ldr	r3, [pc, #96]	; (42e0 <makeCall+0xa0>)
    427e:	791a      	ldrb	r2, [r3, #4]
    4280:	1d3b      	adds	r3, r7, #4
    4282:	0011      	movs	r1, r2
    4284:	0018      	movs	r0, r3
    4286:	4b17      	ldr	r3, [pc, #92]	; (42e4 <makeCall+0xa4>)
    4288:	4798      	blx	r3
    428a:	e003      	b.n	4294 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
    428c:	1d3b      	adds	r3, r7, #4
    428e:	0018      	movs	r0, r3
    4290:	4b15      	ldr	r3, [pc, #84]	; (42e8 <makeCall+0xa8>)
    4292:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
    4294:	1d3b      	adds	r3, r7, #4
    4296:	0018      	movs	r0, r3
    4298:	4b14      	ldr	r3, [pc, #80]	; (42ec <makeCall+0xac>)
    429a:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
    429c:	1d3b      	adds	r3, r7, #4
    429e:	2200      	movs	r2, #0
    42a0:	0019      	movs	r1, r3
    42a2:	2003      	movs	r0, #3
    42a4:	4b12      	ldr	r3, [pc, #72]	; (42f0 <makeCall+0xb0>)
    42a6:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    42a8:	4b12      	ldr	r3, [pc, #72]	; (42f4 <makeCall+0xb4>)
    42aa:	4798      	blx	r3
    42ac:	0002      	movs	r2, r0
    42ae:	4b12      	ldr	r3, [pc, #72]	; (42f8 <makeCall+0xb8>)
    42b0:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
    42b2:	4b12      	ldr	r3, [pc, #72]	; (42fc <makeCall+0xbc>)
    42b4:	2252      	movs	r2, #82	; 0x52
    42b6:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
    42b8:	4b11      	ldr	r3, [pc, #68]	; (4300 <makeCall+0xc0>)
    42ba:	224f      	movs	r2, #79	; 0x4f
    42bc:	701a      	strb	r2, [r3, #0]
}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	46bd      	mov	sp, r7
    42c2:	b006      	add	sp, #24
    42c4:	bd80      	pop	{r7, pc}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	20000760 	.word	0x20000760
    42cc:	000178b7 	.word	0x000178b7
    42d0:	20000544 	.word	0x20000544
    42d4:	20000707 	.word	0x20000707
    42d8:	00000b01 	.word	0x00000b01
    42dc:	200006c5 	.word	0x200006c5
    42e0:	20000600 	.word	0x20000600
    42e4:	00000911 	.word	0x00000911
    42e8:	00000d19 	.word	0x00000d19
    42ec:	00002bad 	.word	0x00002bad
    42f0:	0000b93d 	.word	0x0000b93d
    42f4:	0000ef5d 	.word	0x0000ef5d
    42f8:	200007b8 	.word	0x200007b8
    42fc:	20000794 	.word	0x20000794
    4300:	20000753 	.word	0x20000753

00004304 <acceptCall>:

void acceptCall(void)
{
    4304:	b580      	push	{r7, lr}
    4306:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
    4308:	4b0a      	ldr	r3, [pc, #40]	; (4334 <acceptCall+0x30>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
    430e:	4b0a      	ldr	r3, [pc, #40]	; (4338 <acceptCall+0x34>)
    4310:	2201      	movs	r2, #1
    4312:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
    4314:	4b09      	ldr	r3, [pc, #36]	; (433c <acceptCall+0x38>)
    4316:	4798      	blx	r3
	currentStatus = 'I';
    4318:	4b09      	ldr	r3, [pc, #36]	; (4340 <acceptCall+0x3c>)
    431a:	2249      	movs	r2, #73	; 0x49
    431c:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
    431e:	4b09      	ldr	r3, [pc, #36]	; (4344 <acceptCall+0x40>)
    4320:	2249      	movs	r2, #73	; 0x49
    4322:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
    4324:	2101      	movs	r1, #1
    4326:	204d      	movs	r0, #77	; 0x4d
    4328:	4b07      	ldr	r3, [pc, #28]	; (4348 <acceptCall+0x44>)
    432a:	4798      	blx	r3
	//displayInIncomingCall
}
    432c:	46c0      	nop			; (mov r8, r8)
    432e:	46bd      	mov	sp, r7
    4330:	bd80      	pop	{r7, pc}
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	2000075c 	.word	0x2000075c
    4338:	20000762 	.word	0x20000762
    433c:	00002c45 	.word	0x00002c45
    4340:	20000794 	.word	0x20000794
    4344:	20000753 	.word	0x20000753
    4348:	0000434d 	.word	0x0000434d

0000434c <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
    434c:	b580      	push	{r7, lr}
    434e:	b082      	sub	sp, #8
    4350:	af00      	add	r7, sp, #0
    4352:	0002      	movs	r2, r0
    4354:	1dfb      	adds	r3, r7, #7
    4356:	701a      	strb	r2, [r3, #0]
    4358:	1dbb      	adds	r3, r7, #6
    435a:	1c0a      	adds	r2, r1, #0
    435c:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
    435e:	4b14      	ldr	r3, [pc, #80]	; (43b0 <playSound+0x64>)
    4360:	4798      	blx	r3
	bplaySound = true;
    4362:	4b14      	ldr	r3, [pc, #80]	; (43b4 <playSound+0x68>)
    4364:	2201      	movs	r2, #1
    4366:	701a      	strb	r2, [r3, #0]
	if (newAction)
    4368:	1dbb      	adds	r3, r7, #6
    436a:	781b      	ldrb	r3, [r3, #0]
    436c:	2b00      	cmp	r3, #0
    436e:	d016      	beq.n	439e <playSound+0x52>
	{
		maxPlayingFiles=1;
    4370:	4b11      	ldr	r3, [pc, #68]	; (43b8 <playSound+0x6c>)
    4372:	2201      	movs	r2, #1
    4374:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
    4376:	4b11      	ldr	r3, [pc, #68]	; (43bc <playSound+0x70>)
    4378:	2200      	movs	r2, #0
    437a:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
    437c:	4b0f      	ldr	r3, [pc, #60]	; (43bc <playSound+0x70>)
    437e:	781b      	ldrb	r3, [r3, #0]
    4380:	0019      	movs	r1, r3
    4382:	4b0f      	ldr	r3, [pc, #60]	; (43c0 <playSound+0x74>)
    4384:	1dfa      	adds	r2, r7, #7
    4386:	7812      	ldrb	r2, [r2, #0]
    4388:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
    438a:	4b0c      	ldr	r3, [pc, #48]	; (43bc <playSound+0x70>)
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	3301      	adds	r3, #1
    4390:	4a0b      	ldr	r2, [pc, #44]	; (43c0 <playSound+0x74>)
    4392:	2100      	movs	r1, #0
    4394:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
    4396:	4b0b      	ldr	r3, [pc, #44]	; (43c4 <playSound+0x78>)
    4398:	1dfa      	adds	r2, r7, #7
    439a:	7812      	ldrb	r2, [r2, #0]
    439c:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
    439e:	4b0a      	ldr	r3, [pc, #40]	; (43c8 <playSound+0x7c>)
    43a0:	1dfa      	adds	r2, r7, #7
    43a2:	7812      	ldrb	r2, [r2, #0]
    43a4:	701a      	strb	r2, [r3, #0]
}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	46bd      	mov	sp, r7
    43aa:	b002      	add	sp, #8
    43ac:	bd80      	pop	{r7, pc}
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	00002dd1 	.word	0x00002dd1
    43b4:	200007fd 	.word	0x200007fd
    43b8:	20000788 	.word	0x20000788
    43bc:	20000778 	.word	0x20000778
    43c0:	20000710 	.word	0x20000710
    43c4:	20000727 	.word	0x20000727
    43c8:	20000777 	.word	0x20000777

000043cc <playSoundElligible>:

bool playSoundElligible(void)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
    43d0:	4b0d      	ldr	r3, [pc, #52]	; (4408 <playSoundElligible+0x3c>)
    43d2:	781b      	ldrb	r3, [r3, #0]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d00e      	beq.n	43f6 <playSoundElligible+0x2a>
    43d8:	4b0c      	ldr	r3, [pc, #48]	; (440c <playSoundElligible+0x40>)
    43da:	4798      	blx	r3
    43dc:	0002      	movs	r2, r0
    43de:	4b0c      	ldr	r3, [pc, #48]	; (4410 <playSoundElligible+0x44>)
    43e0:	681b      	ldr	r3, [r3, #0]
    43e2:	1ad3      	subs	r3, r2, r3
    43e4:	4a0b      	ldr	r2, [pc, #44]	; (4414 <playSoundElligible+0x48>)
    43e6:	7812      	ldrb	r2, [r2, #0]
    43e8:	0011      	movs	r1, r2
    43ea:	2264      	movs	r2, #100	; 0x64
    43ec:	434a      	muls	r2, r1
    43ee:	4293      	cmp	r3, r2
    43f0:	d901      	bls.n	43f6 <playSoundElligible+0x2a>
    43f2:	2301      	movs	r3, #1
    43f4:	e000      	b.n	43f8 <playSoundElligible+0x2c>
    43f6:	2300      	movs	r3, #0
    43f8:	1c1a      	adds	r2, r3, #0
    43fa:	2301      	movs	r3, #1
    43fc:	4013      	ands	r3, r2
    43fe:	b2db      	uxtb	r3, r3
}
    4400:	0018      	movs	r0, r3
    4402:	46bd      	mov	sp, r7
    4404:	bd80      	pop	{r7, pc}
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	200007fd 	.word	0x200007fd
    440c:	0000ef5d 	.word	0x0000ef5d
    4410:	200007e0 	.word	0x200007e0
    4414:	20000789 	.word	0x20000789

00004418 <triggerPlaySound>:

void triggerPlaySound(void)
{
    4418:	b580      	push	{r7, lr}
    441a:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
    441c:	4b0b      	ldr	r3, [pc, #44]	; (444c <triggerPlaySound+0x34>)
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	2b01      	cmp	r3, #1
    4422:	d906      	bls.n	4432 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
    4424:	4b0a      	ldr	r3, [pc, #40]	; (4450 <triggerPlaySound+0x38>)
    4426:	781b      	ldrb	r3, [r3, #0]
    4428:	2100      	movs	r1, #0
    442a:	0018      	movs	r0, r3
    442c:	4b09      	ldr	r3, [pc, #36]	; (4454 <triggerPlaySound+0x3c>)
    442e:	4798      	blx	r3
    4430:	e005      	b.n	443e <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
    4432:	4b07      	ldr	r3, [pc, #28]	; (4450 <triggerPlaySound+0x38>)
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	2101      	movs	r1, #1
    4438:	0018      	movs	r0, r3
    443a:	4b06      	ldr	r3, [pc, #24]	; (4454 <triggerPlaySound+0x3c>)
    443c:	4798      	blx	r3
	}
	bplaySound = false;
    443e:	4b06      	ldr	r3, [pc, #24]	; (4458 <triggerPlaySound+0x40>)
    4440:	2200      	movs	r2, #0
    4442:	701a      	strb	r2, [r3, #0]
}
    4444:	46c0      	nop			; (mov r8, r8)
    4446:	46bd      	mov	sp, r7
    4448:	bd80      	pop	{r7, pc}
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	20000788 	.word	0x20000788
    4450:	20000777 	.word	0x20000777
    4454:	00002e01 	.word	0x00002e01
    4458:	200007fd 	.word	0x200007fd

0000445c <playSoundAgain>:

void playSoundAgain(char *string)
{
    445c:	b580      	push	{r7, lr}
    445e:	b082      	sub	sp, #8
    4460:	af00      	add	r7, sp, #0
    4462:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
    4464:	4b18      	ldr	r3, [pc, #96]	; (44c8 <playSoundAgain+0x6c>)
    4466:	781b      	ldrb	r3, [r3, #0]
    4468:	2201      	movs	r2, #1
    446a:	4053      	eors	r3, r2
    446c:	b2db      	uxtb	r3, r3
    446e:	2b00      	cmp	r3, #0
    4470:	d025      	beq.n	44be <playSoundAgain+0x62>
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	0018      	movs	r0, r3
    4476:	4b15      	ldr	r3, [pc, #84]	; (44cc <playSoundAgain+0x70>)
    4478:	4798      	blx	r3
    447a:	1e03      	subs	r3, r0, #0
    447c:	d01f      	beq.n	44be <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
    447e:	4b14      	ldr	r3, [pc, #80]	; (44d0 <playSoundAgain+0x74>)
    4480:	781b      	ldrb	r3, [r3, #0]
    4482:	2b01      	cmp	r3, #1
    4484:	d91b      	bls.n	44be <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
    4486:	4b13      	ldr	r3, [pc, #76]	; (44d4 <playSoundAgain+0x78>)
    4488:	781b      	ldrb	r3, [r3, #0]
    448a:	001a      	movs	r2, r3
    448c:	4b10      	ldr	r3, [pc, #64]	; (44d0 <playSoundAgain+0x74>)
    448e:	781b      	ldrb	r3, [r3, #0]
    4490:	3b01      	subs	r3, #1
    4492:	429a      	cmp	r2, r3
    4494:	da0f      	bge.n	44b6 <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
    4496:	4b0f      	ldr	r3, [pc, #60]	; (44d4 <playSoundAgain+0x78>)
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	3301      	adds	r3, #1
    449c:	b2da      	uxtb	r2, r3
    449e:	4b0d      	ldr	r3, [pc, #52]	; (44d4 <playSoundAgain+0x78>)
    44a0:	701a      	strb	r2, [r3, #0]
    44a2:	4b0c      	ldr	r3, [pc, #48]	; (44d4 <playSoundAgain+0x78>)
    44a4:	781b      	ldrb	r3, [r3, #0]
    44a6:	001a      	movs	r2, r3
    44a8:	4b0b      	ldr	r3, [pc, #44]	; (44d8 <playSoundAgain+0x7c>)
    44aa:	5c9b      	ldrb	r3, [r3, r2]
    44ac:	2100      	movs	r1, #0
    44ae:	0018      	movs	r0, r3
    44b0:	4b0a      	ldr	r3, [pc, #40]	; (44dc <playSoundAgain+0x80>)
    44b2:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
    44b4:	e003      	b.n	44be <playSoundAgain+0x62>
				playSound('M',true);
    44b6:	2101      	movs	r1, #1
    44b8:	204d      	movs	r0, #77	; 0x4d
    44ba:	4b08      	ldr	r3, [pc, #32]	; (44dc <playSoundAgain+0x80>)
    44bc:	4798      	blx	r3
}
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	46bd      	mov	sp, r7
    44c2:	b002      	add	sp, #8
    44c4:	bd80      	pop	{r7, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	200007fd 	.word	0x200007fd
    44cc:	00003405 	.word	0x00003405
    44d0:	20000788 	.word	0x20000788
    44d4:	20000778 	.word	0x20000778
    44d8:	20000710 	.word	0x20000710
    44dc:	0000434d 	.word	0x0000434d

000044e0 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b082      	sub	sp, #8
    44e4:	af00      	add	r7, sp, #0
    44e6:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
    44e8:	687b      	ldr	r3, [r7, #4]
    44ea:	0018      	movs	r0, r3
    44ec:	4b14      	ldr	r3, [pc, #80]	; (4540 <playRepeatedFiles+0x60>)
    44ee:	4798      	blx	r3
    44f0:	0003      	movs	r3, r0
    44f2:	2b0e      	cmp	r3, #14
    44f4:	d81f      	bhi.n	4536 <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
    44f6:	4b13      	ldr	r3, [pc, #76]	; (4544 <playRepeatedFiles+0x64>)
    44f8:	2200      	movs	r2, #0
    44fa:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	0018      	movs	r0, r3
    4500:	4b0f      	ldr	r3, [pc, #60]	; (4540 <playRepeatedFiles+0x60>)
    4502:	4798      	blx	r3
    4504:	0003      	movs	r3, r0
    4506:	b2da      	uxtb	r2, r3
    4508:	4b0f      	ldr	r3, [pc, #60]	; (4548 <playRepeatedFiles+0x68>)
    450a:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
    450c:	687a      	ldr	r2, [r7, #4]
    450e:	4b0f      	ldr	r3, [pc, #60]	; (454c <playRepeatedFiles+0x6c>)
    4510:	0011      	movs	r1, r2
    4512:	0018      	movs	r0, r3
    4514:	4b0e      	ldr	r3, [pc, #56]	; (4550 <playRepeatedFiles+0x70>)
    4516:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
    4518:	4b0e      	ldr	r3, [pc, #56]	; (4554 <playRepeatedFiles+0x74>)
    451a:	4798      	blx	r3
    451c:	0002      	movs	r2, r0
    451e:	4b0e      	ldr	r3, [pc, #56]	; (4558 <playRepeatedFiles+0x78>)
    4520:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
    4522:	4b08      	ldr	r3, [pc, #32]	; (4544 <playRepeatedFiles+0x64>)
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	001a      	movs	r2, r3
    4528:	4b08      	ldr	r3, [pc, #32]	; (454c <playRepeatedFiles+0x6c>)
    452a:	5c9a      	ldrb	r2, [r3, r2]
    452c:	4b0b      	ldr	r3, [pc, #44]	; (455c <playRepeatedFiles+0x7c>)
    452e:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
    4530:	4b0b      	ldr	r3, [pc, #44]	; (4560 <playRepeatedFiles+0x80>)
    4532:	2201      	movs	r2, #1
    4534:	701a      	strb	r2, [r3, #0]
	}
}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	46bd      	mov	sp, r7
    453a:	b002      	add	sp, #8
    453c:	bd80      	pop	{r7, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	00017b47 	.word	0x00017b47
    4544:	20000778 	.word	0x20000778
    4548:	20000788 	.word	0x20000788
    454c:	20000710 	.word	0x20000710
    4550:	00017b37 	.word	0x00017b37
    4554:	0000ef5d 	.word	0x0000ef5d
    4558:	200007e0 	.word	0x200007e0
    455c:	20000777 	.word	0x20000777
    4560:	200007fd 	.word	0x200007fd

00004564 <callTimerExpire>:

bool callTimerExpire(void)
{
    4564:	b580      	push	{r7, lr}
    4566:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
    4568:	4b09      	ldr	r3, [pc, #36]	; (4590 <callTimerExpire+0x2c>)
    456a:	4798      	blx	r3
    456c:	0002      	movs	r2, r0
    456e:	4b09      	ldr	r3, [pc, #36]	; (4594 <callTimerExpire+0x30>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	1ad2      	subs	r2, r2, r3
    4574:	4b08      	ldr	r3, [pc, #32]	; (4598 <callTimerExpire+0x34>)
    4576:	881b      	ldrh	r3, [r3, #0]
    4578:	0019      	movs	r1, r3
    457a:	2364      	movs	r3, #100	; 0x64
    457c:	434b      	muls	r3, r1
    457e:	0019      	movs	r1, r3
    4580:	2300      	movs	r3, #0
    4582:	428a      	cmp	r2, r1
    4584:	415b      	adcs	r3, r3
    4586:	b2db      	uxtb	r3, r3
}
    4588:	0018      	movs	r0, r3
    458a:	46bd      	mov	sp, r7
    458c:	bd80      	pop	{r7, pc}
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	0000ef5d 	.word	0x0000ef5d
    4594:	200007b8 	.word	0x200007b8
    4598:	20000728 	.word	0x20000728

0000459c <OutGoingcallState>:

char OutGoingcallState(char *response)
{
    459c:	b580      	push	{r7, lr}
    459e:	b082      	sub	sp, #8
    45a0:	af00      	add	r7, sp, #0
    45a2:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
    45a4:	4a16      	ldr	r2, [pc, #88]	; (4600 <OutGoingcallState+0x64>)
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	0011      	movs	r1, r2
    45aa:	0018      	movs	r0, r3
    45ac:	4b15      	ldr	r3, [pc, #84]	; (4604 <OutGoingcallState+0x68>)
    45ae:	4798      	blx	r3
    45b0:	1e03      	subs	r3, r0, #0
    45b2:	d001      	beq.n	45b8 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
    45b4:	2344      	movs	r3, #68	; 0x44
    45b6:	e01e      	b.n	45f6 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
    45b8:	4a13      	ldr	r2, [pc, #76]	; (4608 <OutGoingcallState+0x6c>)
    45ba:	687b      	ldr	r3, [r7, #4]
    45bc:	0011      	movs	r1, r2
    45be:	0018      	movs	r0, r3
    45c0:	4b10      	ldr	r3, [pc, #64]	; (4604 <OutGoingcallState+0x68>)
    45c2:	4798      	blx	r3
    45c4:	1e03      	subs	r3, r0, #0
    45c6:	d001      	beq.n	45cc <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
    45c8:	2352      	movs	r3, #82	; 0x52
    45ca:	e014      	b.n	45f6 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
    45cc:	4a0f      	ldr	r2, [pc, #60]	; (460c <OutGoingcallState+0x70>)
    45ce:	687b      	ldr	r3, [r7, #4]
    45d0:	0011      	movs	r1, r2
    45d2:	0018      	movs	r0, r3
    45d4:	4b0b      	ldr	r3, [pc, #44]	; (4604 <OutGoingcallState+0x68>)
    45d6:	4798      	blx	r3
    45d8:	1e03      	subs	r3, r0, #0
    45da:	d001      	beq.n	45e0 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
    45dc:	2349      	movs	r3, #73	; 0x49
    45de:	e00a      	b.n	45f6 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
    45e0:	4a0b      	ldr	r2, [pc, #44]	; (4610 <OutGoingcallState+0x74>)
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	0011      	movs	r1, r2
    45e6:	0018      	movs	r0, r3
    45e8:	4b06      	ldr	r3, [pc, #24]	; (4604 <OutGoingcallState+0x68>)
    45ea:	4798      	blx	r3
    45ec:	1e03      	subs	r3, r0, #0
    45ee:	d001      	beq.n	45f4 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
    45f0:	2345      	movs	r3, #69	; 0x45
    45f2:	e000      	b.n	45f6 <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
    45f4:	234e      	movs	r3, #78	; 0x4e
	}
}
    45f6:	0018      	movs	r0, r3
    45f8:	46bd      	mov	sp, r7
    45fa:	b002      	add	sp, #8
    45fc:	bd80      	pop	{r7, pc}
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	00018aac 	.word	0x00018aac
    4604:	00017b77 	.word	0x00017b77
    4608:	00018abc 	.word	0x00018abc
    460c:	00018acc 	.word	0x00018acc
    4610:	00018adc 	.word	0x00018adc

00004614 <registerEvent>:

bool registerEvent(char eventType)
{
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
    461a:	0002      	movs	r2, r0
    461c:	1dfb      	adds	r3, r7, #7
    461e:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    4620:	4b34      	ldr	r3, [pc, #208]	; (46f4 <registerEvent+0xe0>)
    4622:	789b      	ldrb	r3, [r3, #2]
    4624:	2b00      	cmp	r3, #0
    4626:	d003      	beq.n	4630 <registerEvent+0x1c>
    4628:	4b33      	ldr	r3, [pc, #204]	; (46f8 <registerEvent+0xe4>)
    462a:	795b      	ldrb	r3, [r3, #5]
    462c:	2b4e      	cmp	r3, #78	; 0x4e
    462e:	d101      	bne.n	4634 <registerEvent+0x20>
	{
		return true;
    4630:	2301      	movs	r3, #1
    4632:	e05b      	b.n	46ec <registerEvent+0xd8>
	}
	if (!initialized)
    4634:	4b31      	ldr	r3, [pc, #196]	; (46fc <registerEvent+0xe8>)
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	b2db      	uxtb	r3, r3
    463a:	2201      	movs	r2, #1
    463c:	4053      	eors	r3, r2
    463e:	b2db      	uxtb	r3, r3
    4640:	2b00      	cmp	r3, #0
    4642:	d001      	beq.n	4648 <registerEvent+0x34>
	{
		return true;
    4644:	2301      	movs	r3, #1
    4646:	e051      	b.n	46ec <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
    4648:	4b2d      	ldr	r3, [pc, #180]	; (4700 <registerEvent+0xec>)
    464a:	781b      	ldrb	r3, [r3, #0]
    464c:	2201      	movs	r2, #1
    464e:	4053      	eors	r3, r2
    4650:	b2db      	uxtb	r3, r3
    4652:	2b00      	cmp	r3, #0
    4654:	d007      	beq.n	4666 <registerEvent+0x52>
    4656:	4b2b      	ldr	r3, [pc, #172]	; (4704 <registerEvent+0xf0>)
    4658:	781b      	ldrb	r3, [r3, #0]
    465a:	1dfa      	adds	r2, r7, #7
    465c:	7812      	ldrb	r2, [r2, #0]
    465e:	429a      	cmp	r2, r3
    4660:	d101      	bne.n	4666 <registerEvent+0x52>
	{
		return true;
    4662:	2301      	movs	r3, #1
    4664:	e042      	b.n	46ec <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    4666:	4b28      	ldr	r3, [pc, #160]	; (4708 <registerEvent+0xf4>)
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	b2db      	uxtb	r3, r3
    466c:	2b4e      	cmp	r3, #78	; 0x4e
    466e:	d13c      	bne.n	46ea <registerEvent+0xd6>
    4670:	4b26      	ldr	r3, [pc, #152]	; (470c <registerEvent+0xf8>)
    4672:	781b      	ldrb	r3, [r3, #0]
    4674:	b2db      	uxtb	r3, r3
    4676:	2b4e      	cmp	r3, #78	; 0x4e
    4678:	d137      	bne.n	46ea <registerEvent+0xd6>
    467a:	4b25      	ldr	r3, [pc, #148]	; (4710 <registerEvent+0xfc>)
    467c:	781b      	ldrb	r3, [r3, #0]
    467e:	2b00      	cmp	r3, #0
    4680:	d033      	beq.n	46ea <registerEvent+0xd6>
    4682:	4b1f      	ldr	r3, [pc, #124]	; (4700 <registerEvent+0xec>)
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	2201      	movs	r2, #1
    4688:	4053      	eors	r3, r2
    468a:	b2db      	uxtb	r3, r3
    468c:	2b00      	cmp	r3, #0
    468e:	d02c      	beq.n	46ea <registerEvent+0xd6>
    4690:	4b20      	ldr	r3, [pc, #128]	; (4714 <registerEvent+0x100>)
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	2201      	movs	r2, #1
    4696:	4053      	eors	r3, r2
    4698:	b2db      	uxtb	r3, r3
    469a:	2b00      	cmp	r3, #0
    469c:	d025      	beq.n	46ea <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
    469e:	4b16      	ldr	r3, [pc, #88]	; (46f8 <registerEvent+0xe4>)
    46a0:	7a5b      	ldrb	r3, [r3, #9]
    46a2:	2b00      	cmp	r3, #0
    46a4:	d005      	beq.n	46b2 <registerEvent+0x9e>
    46a6:	4b1c      	ldr	r3, [pc, #112]	; (4718 <registerEvent+0x104>)
    46a8:	4798      	blx	r3
    46aa:	1e03      	subs	r3, r0, #0
    46ac:	d001      	beq.n	46b2 <registerEvent+0x9e>
		{
			return true;
    46ae:	2301      	movs	r3, #1
    46b0:	e01c      	b.n	46ec <registerEvent+0xd8>
		}
		retries=0;
    46b2:	4b1a      	ldr	r3, [pc, #104]	; (471c <registerEvent+0x108>)
    46b4:	2200      	movs	r2, #0
    46b6:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
    46b8:	4b0f      	ldr	r3, [pc, #60]	; (46f8 <registerEvent+0xe4>)
    46ba:	7a1b      	ldrb	r3, [r3, #8]
    46bc:	2b00      	cmp	r3, #0
    46be:	d00c      	beq.n	46da <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
    46c0:	4b17      	ldr	r3, [pc, #92]	; (4720 <registerEvent+0x10c>)
    46c2:	4798      	blx	r3
    46c4:	0002      	movs	r2, r0
    46c6:	4b17      	ldr	r3, [pc, #92]	; (4724 <registerEvent+0x110>)
    46c8:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
    46ca:	4b17      	ldr	r3, [pc, #92]	; (4728 <registerEvent+0x114>)
    46cc:	1dfa      	adds	r2, r7, #7
    46ce:	7812      	ldrb	r2, [r2, #0]
    46d0:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    46d2:	4b0b      	ldr	r3, [pc, #44]	; (4700 <registerEvent+0xec>)
    46d4:	2201      	movs	r2, #1
    46d6:	701a      	strb	r2, [r3, #0]
    46d8:	e005      	b.n	46e6 <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
    46da:	4b0a      	ldr	r3, [pc, #40]	; (4704 <registerEvent+0xf0>)
    46dc:	1dfa      	adds	r2, r7, #7
    46de:	7812      	ldrb	r2, [r2, #0]
    46e0:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
    46e2:	4b12      	ldr	r3, [pc, #72]	; (472c <registerEvent+0x118>)
    46e4:	4798      	blx	r3
		}
		return true;
    46e6:	2301      	movs	r3, #1
    46e8:	e000      	b.n	46ec <registerEvent+0xd8>
	}
	else
	{
		return false;
    46ea:	2300      	movs	r3, #0
	}
}
    46ec:	0018      	movs	r0, r3
    46ee:	46bd      	mov	sp, r7
    46f0:	b002      	add	sp, #8
    46f2:	bd80      	pop	{r7, pc}
    46f4:	20000600 	.word	0x20000600
    46f8:	2000064c 	.word	0x2000064c
    46fc:	20000761 	.word	0x20000761
    4700:	20000786 	.word	0x20000786
    4704:	20000727 	.word	0x20000727
    4708:	20000794 	.word	0x20000794
    470c:	20000753 	.word	0x20000753
    4710:	20000736 	.word	0x20000736
    4714:	20000752 	.word	0x20000752
    4718:	00006975 	.word	0x00006975
    471c:	200006c5 	.word	0x200006c5
    4720:	0000ef5d 	.word	0x0000ef5d
    4724:	20000798 	.word	0x20000798
    4728:	20000738 	.word	0x20000738
    472c:	00003fd9 	.word	0x00003fd9

00004730 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
    4730:	b580      	push	{r7, lr}
    4732:	b082      	sub	sp, #8
    4734:	af00      	add	r7, sp, #0
    4736:	0002      	movs	r2, r0
    4738:	1dfb      	adds	r3, r7, #7
    473a:	701a      	strb	r2, [r3, #0]
	if (!initialized)
    473c:	4b20      	ldr	r3, [pc, #128]	; (47c0 <registerM2MEvent+0x90>)
    473e:	781b      	ldrb	r3, [r3, #0]
    4740:	b2db      	uxtb	r3, r3
    4742:	2201      	movs	r2, #1
    4744:	4053      	eors	r3, r2
    4746:	b2db      	uxtb	r3, r3
    4748:	2b00      	cmp	r3, #0
    474a:	d006      	beq.n	475a <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
    474c:	1dfb      	adds	r3, r7, #7
    474e:	781b      	ldrb	r3, [r3, #0]
    4750:	2100      	movs	r1, #0
    4752:	0018      	movs	r0, r3
    4754:	4b1b      	ldr	r3, [pc, #108]	; (47c4 <registerM2MEvent+0x94>)
    4756:	4798      	blx	r3
		return;
    4758:	e02e      	b.n	47b8 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    475a:	4b1b      	ldr	r3, [pc, #108]	; (47c8 <registerM2MEvent+0x98>)
    475c:	781b      	ldrb	r3, [r3, #0]
    475e:	b2db      	uxtb	r3, r3
    4760:	2b4e      	cmp	r3, #78	; 0x4e
    4762:	d129      	bne.n	47b8 <registerM2MEvent+0x88>
    4764:	4b19      	ldr	r3, [pc, #100]	; (47cc <registerM2MEvent+0x9c>)
    4766:	781b      	ldrb	r3, [r3, #0]
    4768:	b2db      	uxtb	r3, r3
    476a:	2b4e      	cmp	r3, #78	; 0x4e
    476c:	d124      	bne.n	47b8 <registerM2MEvent+0x88>
    476e:	4b18      	ldr	r3, [pc, #96]	; (47d0 <registerM2MEvent+0xa0>)
    4770:	781b      	ldrb	r3, [r3, #0]
    4772:	2b00      	cmp	r3, #0
    4774:	d020      	beq.n	47b8 <registerM2MEvent+0x88>
    4776:	4b17      	ldr	r3, [pc, #92]	; (47d4 <registerM2MEvent+0xa4>)
    4778:	781b      	ldrb	r3, [r3, #0]
    477a:	2201      	movs	r2, #1
    477c:	4053      	eors	r3, r2
    477e:	b2db      	uxtb	r3, r3
    4780:	2b00      	cmp	r3, #0
    4782:	d019      	beq.n	47b8 <registerM2MEvent+0x88>
    4784:	4b14      	ldr	r3, [pc, #80]	; (47d8 <registerM2MEvent+0xa8>)
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	2201      	movs	r2, #1
    478a:	4053      	eors	r3, r2
    478c:	b2db      	uxtb	r3, r3
    478e:	2b00      	cmp	r3, #0
    4790:	d012      	beq.n	47b8 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
    4792:	1dfb      	adds	r3, r7, #7
    4794:	781b      	ldrb	r3, [r3, #0]
    4796:	2102      	movs	r1, #2
    4798:	0018      	movs	r0, r3
    479a:	4b0a      	ldr	r3, [pc, #40]	; (47c4 <registerM2MEvent+0x94>)
    479c:	4798      	blx	r3
		m2mEvent=true;
    479e:	4b0f      	ldr	r3, [pc, #60]	; (47dc <registerM2MEvent+0xac>)
    47a0:	2201      	movs	r2, #1
    47a2:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
    47a4:	4b0e      	ldr	r3, [pc, #56]	; (47e0 <registerM2MEvent+0xb0>)
    47a6:	1dfa      	adds	r2, r7, #7
    47a8:	7812      	ldrb	r2, [r2, #0]
    47aa:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
    47ac:	4b0d      	ldr	r3, [pc, #52]	; (47e4 <registerM2MEvent+0xb4>)
    47ae:	2200      	movs	r2, #0
    47b0:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
    47b2:	4b0d      	ldr	r3, [pc, #52]	; (47e8 <registerM2MEvent+0xb8>)
    47b4:	4798      	blx	r3
		return;
    47b6:	46c0      	nop			; (mov r8, r8)
	}
}
    47b8:	46bd      	mov	sp, r7
    47ba:	b002      	add	sp, #8
    47bc:	bd80      	pop	{r7, pc}
    47be:	46c0      	nop			; (mov r8, r8)
    47c0:	20000761 	.word	0x20000761
    47c4:	0000a9fd 	.word	0x0000a9fd
    47c8:	20000794 	.word	0x20000794
    47cc:	20000753 	.word	0x20000753
    47d0:	20000736 	.word	0x20000736
    47d4:	20000786 	.word	0x20000786
    47d8:	20000752 	.word	0x20000752
    47dc:	20000707 	.word	0x20000707
    47e0:	20000701 	.word	0x20000701
    47e4:	20000787 	.word	0x20000787
    47e8:	00003fd9 	.word	0x00003fd9

000047ec <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	0002      	movs	r2, r0
    47f4:	1dfb      	adds	r3, r7, #7
    47f6:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
    47f8:	4b07      	ldr	r3, [pc, #28]	; (4818 <setMotorMGRResponse+0x2c>)
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b2db      	uxtb	r3, r3
    47fe:	2b49      	cmp	r3, #73	; 0x49
    4800:	d106      	bne.n	4810 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
    4802:	1dfb      	adds	r3, r7, #7
    4804:	781b      	ldrb	r3, [r3, #0]
    4806:	2101      	movs	r1, #1
    4808:	0018      	movs	r0, r3
    480a:	4b04      	ldr	r3, [pc, #16]	; (481c <setMotorMGRResponse+0x30>)
    480c:	4798      	blx	r3
    480e:	e000      	b.n	4812 <setMotorMGRResponse+0x26>
		return;
    4810:	46c0      	nop			; (mov r8, r8)
}
    4812:	46bd      	mov	sp, r7
    4814:	b002      	add	sp, #8
    4816:	bd80      	pop	{r7, pc}
    4818:	20000794 	.word	0x20000794
    481c:	0000434d 	.word	0x0000434d

00004820 <checkRespSMS>:

void checkRespSMS(char t1)
{
    4820:	b580      	push	{r7, lr}
    4822:	b082      	sub	sp, #8
    4824:	af00      	add	r7, sp, #0
    4826:	0002      	movs	r2, r0
    4828:	1dfb      	adds	r3, r7, #7
    482a:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
    482c:	4b0c      	ldr	r3, [pc, #48]	; (4860 <checkRespSMS+0x40>)
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	2201      	movs	r2, #1
    4832:	4053      	eors	r3, r2
    4834:	b2db      	uxtb	r3, r3
    4836:	2b00      	cmp	r3, #0
    4838:	d00d      	beq.n	4856 <checkRespSMS+0x36>
    483a:	4b0a      	ldr	r3, [pc, #40]	; (4864 <checkRespSMS+0x44>)
    483c:	795b      	ldrb	r3, [r3, #5]
    483e:	2b41      	cmp	r3, #65	; 0x41
    4840:	d109      	bne.n	4856 <checkRespSMS+0x36>
	{
		actionType = t1;
    4842:	4b09      	ldr	r3, [pc, #36]	; (4868 <checkRespSMS+0x48>)
    4844:	1dfa      	adds	r2, r7, #7
    4846:	7812      	ldrb	r2, [r2, #0]
    4848:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
    484a:	4b08      	ldr	r3, [pc, #32]	; (486c <checkRespSMS+0x4c>)
    484c:	2200      	movs	r2, #0
    484e:	2100      	movs	r1, #0
    4850:	0018      	movs	r0, r3
    4852:	4b07      	ldr	r3, [pc, #28]	; (4870 <checkRespSMS+0x50>)
    4854:	4798      	blx	r3
	}
}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	46bd      	mov	sp, r7
    485a:	b002      	add	sp, #8
    485c:	bd80      	pop	{r7, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	20000762 	.word	0x20000762
    4864:	2000064c 	.word	0x2000064c
    4868:	20000727 	.word	0x20000727
    486c:	00018aec 	.word	0x00018aec
    4870:	00006a59 	.word	0x00006a59

00004874 <subDTMF>:

void subDTMF(void)
{
    4874:	b580      	push	{r7, lr}
    4876:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
    4878:	4b04      	ldr	r3, [pc, #16]	; (488c <subDTMF+0x18>)
    487a:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    487c:	4b04      	ldr	r3, [pc, #16]	; (4890 <subDTMF+0x1c>)
    487e:	4798      	blx	r3
    4880:	0002      	movs	r2, r0
    4882:	4b04      	ldr	r3, [pc, #16]	; (4894 <subDTMF+0x20>)
    4884:	601a      	str	r2, [r3, #0]
}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	46bd      	mov	sp, r7
    488a:	bd80      	pop	{r7, pc}
    488c:	00002dd1 	.word	0x00002dd1
    4890:	0000ef5d 	.word	0x0000ef5d
    4894:	200007b8 	.word	0x200007b8

00004898 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
    4898:	b580      	push	{r7, lr}
    489a:	b084      	sub	sp, #16
    489c:	af00      	add	r7, sp, #0
    489e:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
    48a0:	230f      	movs	r3, #15
    48a2:	18fb      	adds	r3, r7, r3
    48a4:	687a      	ldr	r2, [r7, #4]
    48a6:	7812      	ldrb	r2, [r2, #0]
    48a8:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
    48aa:	4b69      	ldr	r3, [pc, #420]	; (4a50 <processOnDTMF+0x1b8>)
    48ac:	78db      	ldrb	r3, [r3, #3]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d010      	beq.n	48d4 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
    48b2:	4b68      	ldr	r3, [pc, #416]	; (4a54 <processOnDTMF+0x1bc>)
    48b4:	781b      	ldrb	r3, [r3, #0]
    48b6:	2b00      	cmp	r3, #0
    48b8:	d100      	bne.n	48bc <processOnDTMF+0x24>
    48ba:	e0c5      	b.n	4a48 <processOnDTMF+0x1b0>
		{
			if(dtmf == 'A')
    48bc:	230f      	movs	r3, #15
    48be:	18fb      	adds	r3, r7, r3
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	2b41      	cmp	r3, #65	; 0x41
    48c4:	d000      	beq.n	48c8 <processOnDTMF+0x30>
    48c6:	e0bf      	b.n	4a48 <processOnDTMF+0x1b0>
			{
				m2mAck=true;
    48c8:	4b63      	ldr	r3, [pc, #396]	; (4a58 <processOnDTMF+0x1c0>)
    48ca:	2201      	movs	r2, #1
    48cc:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
    48ce:	4b63      	ldr	r3, [pc, #396]	; (4a5c <processOnDTMF+0x1c4>)
    48d0:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
    48d2:	e0b9      	b.n	4a48 <processOnDTMF+0x1b0>
		if (dtmf == '1') //Motor On
    48d4:	230f      	movs	r3, #15
    48d6:	18fb      	adds	r3, r7, r3
    48d8:	781b      	ldrb	r3, [r3, #0]
    48da:	2b31      	cmp	r3, #49	; 0x31
    48dc:	d105      	bne.n	48ea <processOnDTMF+0x52>
			subDTMF();
    48de:	4b60      	ldr	r3, [pc, #384]	; (4a60 <processOnDTMF+0x1c8>)
    48e0:	4798      	blx	r3
			startMotor(true);
    48e2:	2001      	movs	r0, #1
    48e4:	4b5f      	ldr	r3, [pc, #380]	; (4a64 <processOnDTMF+0x1cc>)
    48e6:	4798      	blx	r3
}
    48e8:	e0ae      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '2') //Motor Off
    48ea:	230f      	movs	r3, #15
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	781b      	ldrb	r3, [r3, #0]
    48f0:	2b32      	cmp	r3, #50	; 0x32
    48f2:	d107      	bne.n	4904 <processOnDTMF+0x6c>
			subDTMF();
    48f4:	4b5a      	ldr	r3, [pc, #360]	; (4a60 <processOnDTMF+0x1c8>)
    48f6:	4798      	blx	r3
			stopMotor(true,false,false);
    48f8:	2200      	movs	r2, #0
    48fa:	2100      	movs	r1, #0
    48fc:	2001      	movs	r0, #1
    48fe:	4b5a      	ldr	r3, [pc, #360]	; (4a68 <processOnDTMF+0x1d0>)
    4900:	4798      	blx	r3
}
    4902:	e0a1      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '3') //Status
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2b33      	cmp	r3, #51	; 0x33
    490c:	d104      	bne.n	4918 <processOnDTMF+0x80>
			subDTMF();
    490e:	4b54      	ldr	r3, [pc, #336]	; (4a60 <processOnDTMF+0x1c8>)
    4910:	4798      	blx	r3
			statusOnCall();
    4912:	4b56      	ldr	r3, [pc, #344]	; (4a6c <processOnDTMF+0x1d4>)
    4914:	4798      	blx	r3
}
    4916:	e097      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '4') //underground status
    4918:	230f      	movs	r3, #15
    491a:	18fb      	adds	r3, r7, r3
    491c:	781b      	ldrb	r3, [r3, #0]
    491e:	2b34      	cmp	r3, #52	; 0x34
    4920:	d10a      	bne.n	4938 <processOnDTMF+0xa0>
			if (factory_settings_parameter_struct.ENABLE_WATER)
    4922:	4b4b      	ldr	r3, [pc, #300]	; (4a50 <processOnDTMF+0x1b8>)
    4924:	795b      	ldrb	r3, [r3, #5]
    4926:	2b00      	cmp	r3, #0
    4928:	d100      	bne.n	492c <processOnDTMF+0x94>
    492a:	e08d      	b.n	4a48 <processOnDTMF+0x1b0>
				subDTMF();
    492c:	4b4c      	ldr	r3, [pc, #304]	; (4a60 <processOnDTMF+0x1c8>)
    492e:	4798      	blx	r3
				waterStatusOnCall(false);
    4930:	2000      	movs	r0, #0
    4932:	4b4f      	ldr	r3, [pc, #316]	; (4a70 <processOnDTMF+0x1d8>)
    4934:	4798      	blx	r3
}
    4936:	e087      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '5') //overHead Status
    4938:	230f      	movs	r3, #15
    493a:	18fb      	adds	r3, r7, r3
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	2b35      	cmp	r3, #53	; 0x35
    4940:	d10a      	bne.n	4958 <processOnDTMF+0xc0>
			if (factory_settings_parameter_struct.ENABLE_GP)
    4942:	4b43      	ldr	r3, [pc, #268]	; (4a50 <processOnDTMF+0x1b8>)
    4944:	791b      	ldrb	r3, [r3, #4]
    4946:	2b00      	cmp	r3, #0
    4948:	d100      	bne.n	494c <processOnDTMF+0xb4>
    494a:	e07d      	b.n	4a48 <processOnDTMF+0x1b0>
				subDTMF();
    494c:	4b44      	ldr	r3, [pc, #272]	; (4a60 <processOnDTMF+0x1c8>)
    494e:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
    4950:	2000      	movs	r0, #0
    4952:	4b48      	ldr	r3, [pc, #288]	; (4a74 <processOnDTMF+0x1dc>)
    4954:	4798      	blx	r3
}
    4956:	e077      	b.n	4a48 <processOnDTMF+0x1b0>
		else if(dtmf == '0')
    4958:	230f      	movs	r3, #15
    495a:	18fb      	adds	r3, r7, r3
    495c:	781b      	ldrb	r3, [r3, #0]
    495e:	2b30      	cmp	r3, #48	; 0x30
    4960:	d114      	bne.n	498c <processOnDTMF+0xf4>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4962:	4b3b      	ldr	r3, [pc, #236]	; (4a50 <processOnDTMF+0x1b8>)
    4964:	785b      	ldrb	r3, [r3, #1]
    4966:	2b00      	cmp	r3, #0
    4968:	d100      	bne.n	496c <processOnDTMF+0xd4>
    496a:	e06d      	b.n	4a48 <processOnDTMF+0x1b0>
				if(zeroPressed)
    496c:	4b42      	ldr	r3, [pc, #264]	; (4a78 <processOnDTMF+0x1e0>)
    496e:	781b      	ldrb	r3, [r3, #0]
    4970:	2b00      	cmp	r3, #0
    4972:	d007      	beq.n	4984 <processOnDTMF+0xec>
					autoSetCurrent();   //to enable or disable current detection
    4974:	4b41      	ldr	r3, [pc, #260]	; (4a7c <processOnDTMF+0x1e4>)
    4976:	4798      	blx	r3
					subDTMF();
    4978:	4b39      	ldr	r3, [pc, #228]	; (4a60 <processOnDTMF+0x1c8>)
    497a:	4798      	blx	r3
					zeroPressed=false;
    497c:	4b3e      	ldr	r3, [pc, #248]	; (4a78 <processOnDTMF+0x1e0>)
    497e:	2200      	movs	r2, #0
    4980:	701a      	strb	r2, [r3, #0]
}
    4982:	e061      	b.n	4a48 <processOnDTMF+0x1b0>
					zeroPressed=true;
    4984:	4b3c      	ldr	r3, [pc, #240]	; (4a78 <processOnDTMF+0x1e0>)
    4986:	2201      	movs	r2, #1
    4988:	701a      	strb	r2, [r3, #0]
}
    498a:	e05d      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '7') //Speak Current Ampere On Call
    498c:	230f      	movs	r3, #15
    498e:	18fb      	adds	r3, r7, r3
    4990:	781b      	ldrb	r3, [r3, #0]
    4992:	2b37      	cmp	r3, #55	; 0x37
    4994:	d108      	bne.n	49a8 <processOnDTMF+0x110>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
    4996:	4b2e      	ldr	r3, [pc, #184]	; (4a50 <processOnDTMF+0x1b8>)
    4998:	789b      	ldrb	r3, [r3, #2]
    499a:	2b00      	cmp	r3, #0
    499c:	d054      	beq.n	4a48 <processOnDTMF+0x1b0>
				subDTMF();
    499e:	4b30      	ldr	r3, [pc, #192]	; (4a60 <processOnDTMF+0x1c8>)
    49a0:	4798      	blx	r3
				speakAmpere();
    49a2:	4b37      	ldr	r3, [pc, #220]	; (4a80 <processOnDTMF+0x1e8>)
    49a4:	4798      	blx	r3
}
    49a6:	e04f      	b.n	4a48 <processOnDTMF+0x1b0>
		else if(dtmf=='D')
    49a8:	230f      	movs	r3, #15
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	2b44      	cmp	r3, #68	; 0x44
    49b0:	d10c      	bne.n	49cc <processOnDTMF+0x134>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    49b2:	2001      	movs	r0, #1
    49b4:	4b33      	ldr	r3, [pc, #204]	; (4a84 <processOnDTMF+0x1ec>)
    49b6:	4798      	blx	r3
			resetAutoStart(true);
    49b8:	2001      	movs	r0, #1
    49ba:	4b33      	ldr	r3, [pc, #204]	; (4a88 <processOnDTMF+0x1f0>)
    49bc:	4798      	blx	r3
			startMotor(false);
    49be:	2000      	movs	r0, #0
    49c0:	4b28      	ldr	r3, [pc, #160]	; (4a64 <processOnDTMF+0x1cc>)
    49c2:	4798      	blx	r3
			sendDTMFTone(0xFF);
    49c4:	20ff      	movs	r0, #255	; 0xff
    49c6:	4b31      	ldr	r3, [pc, #196]	; (4a8c <processOnDTMF+0x1f4>)
    49c8:	4798      	blx	r3
}
    49ca:	e03d      	b.n	4a48 <processOnDTMF+0x1b0>
		else if(dtmf=='C')
    49cc:	230f      	movs	r3, #15
    49ce:	18fb      	adds	r3, r7, r3
    49d0:	781b      	ldrb	r3, [r3, #0]
    49d2:	2b43      	cmp	r3, #67	; 0x43
    49d4:	d10b      	bne.n	49ee <processOnDTMF+0x156>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
    49d6:	2000      	movs	r0, #0
    49d8:	4b2a      	ldr	r3, [pc, #168]	; (4a84 <processOnDTMF+0x1ec>)
    49da:	4798      	blx	r3
			stopMotor(false,false,true);
    49dc:	2201      	movs	r2, #1
    49de:	2100      	movs	r1, #0
    49e0:	2000      	movs	r0, #0
    49e2:	4b21      	ldr	r3, [pc, #132]	; (4a68 <processOnDTMF+0x1d0>)
    49e4:	4798      	blx	r3
			sendDTMFTone(0xFF);
    49e6:	20ff      	movs	r0, #255	; 0xff
    49e8:	4b28      	ldr	r3, [pc, #160]	; (4a8c <processOnDTMF+0x1f4>)
    49ea:	4798      	blx	r3
}
    49ec:	e02c      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '8') //Set AUTOTIMER ON
    49ee:	230f      	movs	r3, #15
    49f0:	18fb      	adds	r3, r7, r3
    49f2:	781b      	ldrb	r3, [r3, #0]
    49f4:	2b38      	cmp	r3, #56	; 0x38
    49f6:	d10c      	bne.n	4a12 <processOnDTMF+0x17a>
			subDTMF();
    49f8:	4b19      	ldr	r3, [pc, #100]	; (4a60 <processOnDTMF+0x1c8>)
    49fa:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    49fc:	2001      	movs	r0, #1
    49fe:	4b21      	ldr	r3, [pc, #132]	; (4a84 <processOnDTMF+0x1ec>)
    4a00:	4798      	blx	r3
			resetAutoStart(true);
    4a02:	2001      	movs	r0, #1
    4a04:	4b20      	ldr	r3, [pc, #128]	; (4a88 <processOnDTMF+0x1f0>)
    4a06:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
    4a08:	2101      	movs	r1, #1
    4a0a:	2029      	movs	r0, #41	; 0x29
    4a0c:	4b20      	ldr	r3, [pc, #128]	; (4a90 <processOnDTMF+0x1f8>)
    4a0e:	4798      	blx	r3
}
    4a10:	e01a      	b.n	4a48 <processOnDTMF+0x1b0>
		else if (dtmf == '9') //Set AUTOTIMER OFF
    4a12:	230f      	movs	r3, #15
    4a14:	18fb      	adds	r3, r7, r3
    4a16:	781b      	ldrb	r3, [r3, #0]
    4a18:	2b39      	cmp	r3, #57	; 0x39
    4a1a:	d10c      	bne.n	4a36 <processOnDTMF+0x19e>
			subDTMF();
    4a1c:	4b10      	ldr	r3, [pc, #64]	; (4a60 <processOnDTMF+0x1c8>)
    4a1e:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
    4a20:	2000      	movs	r0, #0
    4a22:	4b18      	ldr	r3, [pc, #96]	; (4a84 <processOnDTMF+0x1ec>)
    4a24:	4798      	blx	r3
			resetAutoStart(true);
    4a26:	2001      	movs	r0, #1
    4a28:	4b17      	ldr	r3, [pc, #92]	; (4a88 <processOnDTMF+0x1f0>)
    4a2a:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
    4a2c:	2101      	movs	r1, #1
    4a2e:	205b      	movs	r0, #91	; 0x5b
    4a30:	4b17      	ldr	r3, [pc, #92]	; (4a90 <processOnDTMF+0x1f8>)
    4a32:	4798      	blx	r3
}
    4a34:	e008      	b.n	4a48 <processOnDTMF+0x1b0>
		else if(dtmf == '*')
    4a36:	230f      	movs	r3, #15
    4a38:	18fb      	adds	r3, r7, r3
    4a3a:	781b      	ldrb	r3, [r3, #0]
    4a3c:	2b2a      	cmp	r3, #42	; 0x2a
    4a3e:	d103      	bne.n	4a48 <processOnDTMF+0x1b0>
			subDTMF();
    4a40:	4b07      	ldr	r3, [pc, #28]	; (4a60 <processOnDTMF+0x1c8>)
    4a42:	4798      	blx	r3
			voltageOnCall();
    4a44:	4b13      	ldr	r3, [pc, #76]	; (4a94 <processOnDTMF+0x1fc>)
    4a46:	4798      	blx	r3
}
    4a48:	46c0      	nop			; (mov r8, r8)
    4a4a:	46bd      	mov	sp, r7
    4a4c:	b004      	add	sp, #16
    4a4e:	bd80      	pop	{r7, pc}
    4a50:	20000618 	.word	0x20000618
    4a54:	20000707 	.word	0x20000707
    4a58:	20000700 	.word	0x20000700
    4a5c:	00002d71 	.word	0x00002d71
    4a60:	00004875 	.word	0x00004875
    4a64:	0000a2fd 	.word	0x0000a2fd
    4a68:	0000a4a9 	.word	0x0000a4a9
    4a6c:	0000a8ad 	.word	0x0000a8ad
    4a70:	00008a1d 	.word	0x00008a1d
    4a74:	000088d5 	.word	0x000088d5
    4a78:	200007af 	.word	0x200007af
    4a7c:	000093b9 	.word	0x000093b9
    4a80:	000094ad 	.word	0x000094ad
    4a84:	000012a1 	.word	0x000012a1
    4a88:	00009ed5 	.word	0x00009ed5
    4a8c:	00006c15 	.word	0x00006c15
    4a90:	0000434d 	.word	0x0000434d
    4a94:	0000a9bd 	.word	0x0000a9bd

00004a98 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
    4a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a9a:	46c6      	mov	lr, r8
    4a9c:	b500      	push	{lr}
    4a9e:	b0d2      	sub	sp, #328	; 0x148
    4aa0:	af06      	add	r7, sp, #24
    4aa2:	60f8      	str	r0, [r7, #12]
    4aa4:	000c      	movs	r4, r1
    4aa6:	0010      	movs	r0, r2
    4aa8:	0019      	movs	r1, r3
    4aaa:	4bea      	ldr	r3, [pc, #936]	; (4e54 <processOnSMS+0x3bc>)
    4aac:	2294      	movs	r2, #148	; 0x94
    4aae:	0052      	lsls	r2, r2, #1
    4ab0:	4694      	mov	ip, r2
    4ab2:	2208      	movs	r2, #8
    4ab4:	4690      	mov	r8, r2
    4ab6:	44b8      	add	r8, r7
    4ab8:	44c4      	add	ip, r8
    4aba:	4463      	add	r3, ip
    4abc:	1c22      	adds	r2, r4, #0
    4abe:	701a      	strb	r2, [r3, #0]
    4ac0:	4be5      	ldr	r3, [pc, #916]	; (4e58 <processOnSMS+0x3c0>)
    4ac2:	2294      	movs	r2, #148	; 0x94
    4ac4:	0052      	lsls	r2, r2, #1
    4ac6:	4694      	mov	ip, r2
    4ac8:	2208      	movs	r2, #8
    4aca:	4690      	mov	r8, r2
    4acc:	44b8      	add	r8, r7
    4ace:	44c4      	add	ip, r8
    4ad0:	4463      	add	r3, ip
    4ad2:	1c02      	adds	r2, r0, #0
    4ad4:	701a      	strb	r2, [r3, #0]
    4ad6:	4be1      	ldr	r3, [pc, #900]	; (4e5c <processOnSMS+0x3c4>)
    4ad8:	2294      	movs	r2, #148	; 0x94
    4ada:	0052      	lsls	r2, r2, #1
    4adc:	4694      	mov	ip, r2
    4ade:	2208      	movs	r2, #8
    4ae0:	4690      	mov	r8, r2
    4ae2:	44b8      	add	r8, r7
    4ae4:	44c4      	add	ip, r8
    4ae6:	4463      	add	r3, ip
    4ae8:	1c0a      	adds	r2, r1, #0
    4aea:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
    4aec:	2328      	movs	r3, #40	; 0x28
    4aee:	33ff      	adds	r3, #255	; 0xff
    4af0:	2208      	movs	r2, #8
    4af2:	4694      	mov	ip, r2
    4af4:	44bc      	add	ip, r7
    4af6:	4463      	add	r3, ip
    4af8:	2200      	movs	r2, #0
    4afa:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
    4afc:	68fb      	ldr	r3, [r7, #12]
    4afe:	228e      	movs	r2, #142	; 0x8e
    4b00:	0052      	lsls	r2, r2, #1
    4b02:	2108      	movs	r1, #8
    4b04:	468c      	mov	ip, r1
    4b06:	44bc      	add	ip, r7
    4b08:	4462      	add	r2, ip
    4b0a:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
    4b0c:	4bd3      	ldr	r3, [pc, #844]	; (4e5c <processOnSMS+0x3c4>)
    4b0e:	2294      	movs	r2, #148	; 0x94
    4b10:	0052      	lsls	r2, r2, #1
    4b12:	4694      	mov	ip, r2
    4b14:	2208      	movs	r2, #8
    4b16:	4690      	mov	r8, r2
    4b18:	44b8      	add	r8, r7
    4b1a:	44c4      	add	ip, r8
    4b1c:	4463      	add	r3, ip
    4b1e:	781b      	ldrb	r3, [r3, #0]
    4b20:	2b00      	cmp	r3, #0
    4b22:	d00e      	beq.n	4b42 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
    4b24:	4ace      	ldr	r2, [pc, #824]	; (4e60 <processOnSMS+0x3c8>)
    4b26:	68fb      	ldr	r3, [r7, #12]
    4b28:	0011      	movs	r1, r2
    4b2a:	0018      	movs	r0, r3
    4b2c:	4bcd      	ldr	r3, [pc, #820]	; (4e64 <processOnSMS+0x3cc>)
    4b2e:	4798      	blx	r3
    4b30:	0003      	movs	r3, r0
    4b32:	001a      	movs	r2, r3
    4b34:	2301      	movs	r3, #1
    4b36:	4053      	eors	r3, r2
    4b38:	b2db      	uxtb	r3, r3
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d001      	beq.n	4b42 <processOnSMS+0xaa>
    4b3e:	f001 fe50 	bl	67e2 <processOnSMS+0x1d4a>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
    4b42:	4ac9      	ldr	r2, [pc, #804]	; (4e68 <processOnSMS+0x3d0>)
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	0011      	movs	r1, r2
    4b48:	0018      	movs	r0, r3
    4b4a:	4bc6      	ldr	r3, [pc, #792]	; (4e64 <processOnSMS+0x3cc>)
    4b4c:	4798      	blx	r3
    4b4e:	1e03      	subs	r3, r0, #0
    4b50:	d014      	beq.n	4b7c <processOnSMS+0xe4>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
    4b52:	4bc6      	ldr	r3, [pc, #792]	; (4e6c <processOnSMS+0x3d4>)
    4b54:	2201      	movs	r2, #1
    4b56:	715a      	strb	r2, [r3, #5]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    4b58:	49c4      	ldr	r1, [pc, #784]	; (4e6c <processOnSMS+0x3d4>)
    4b5a:	4bc5      	ldr	r3, [pc, #788]	; (4e70 <processOnSMS+0x3d8>)
    4b5c:	2218      	movs	r2, #24
    4b5e:	0018      	movs	r0, r3
    4b60:	4bc4      	ldr	r3, [pc, #784]	; (4e74 <processOnSMS+0x3dc>)
    4b62:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    4b64:	4bc2      	ldr	r3, [pc, #776]	; (4e70 <processOnSMS+0x3d8>)
    4b66:	0019      	movs	r1, r3
    4b68:	2000      	movs	r0, #0
    4b6a:	4bc3      	ldr	r3, [pc, #780]	; (4e78 <processOnSMS+0x3e0>)
    4b6c:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    4b6e:	4bc3      	ldr	r3, [pc, #780]	; (4e7c <processOnSMS+0x3e4>)
    4b70:	4798      	blx	r3
			vTaskDelay(100);
    4b72:	2064      	movs	r0, #100	; 0x64
    4b74:	4bc2      	ldr	r3, [pc, #776]	; (4e80 <processOnSMS+0x3e8>)
    4b76:	4798      	blx	r3
			system_reset();
    4b78:	4bc2      	ldr	r3, [pc, #776]	; (4e84 <processOnSMS+0x3ec>)
    4b7a:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
    4b7c:	4ac2      	ldr	r2, [pc, #776]	; (4e88 <processOnSMS+0x3f0>)
    4b7e:	68fb      	ldr	r3, [r7, #12]
    4b80:	0011      	movs	r1, r2
    4b82:	0018      	movs	r0, r3
    4b84:	4bb7      	ldr	r3, [pc, #732]	; (4e64 <processOnSMS+0x3cc>)
    4b86:	4798      	blx	r3
    4b88:	1e03      	subs	r3, r0, #0
    4b8a:	d047      	beq.n	4c1c <processOnSMS+0x184>
	{
		enum gsm_error err = gsm_disable_call_waiting();
    4b8c:	231c      	movs	r3, #28
    4b8e:	33ff      	adds	r3, #255	; 0xff
    4b90:	2208      	movs	r2, #8
    4b92:	18ba      	adds	r2, r7, r2
    4b94:	18d4      	adds	r4, r2, r3
    4b96:	4bbd      	ldr	r3, [pc, #756]	; (4e8c <processOnSMS+0x3f4>)
    4b98:	4798      	blx	r3
    4b9a:	0003      	movs	r3, r0
    4b9c:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
    4b9e:	2328      	movs	r3, #40	; 0x28
    4ba0:	33ff      	adds	r3, #255	; 0xff
    4ba2:	2208      	movs	r2, #8
    4ba4:	4694      	mov	ip, r2
    4ba6:	44bc      	add	ip, r7
    4ba8:	4463      	add	r3, ip
    4baa:	2201      	movs	r2, #1
    4bac:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4bae:	4baa      	ldr	r3, [pc, #680]	; (4e58 <processOnSMS+0x3c0>)
    4bb0:	2294      	movs	r2, #148	; 0x94
    4bb2:	0052      	lsls	r2, r2, #1
    4bb4:	4694      	mov	ip, r2
    4bb6:	2208      	movs	r2, #8
    4bb8:	4690      	mov	r8, r2
    4bba:	44b8      	add	r8, r7
    4bbc:	44c4      	add	ip, r8
    4bbe:	4463      	add	r3, ip
    4bc0:	781b      	ldrb	r3, [r3, #0]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d101      	bne.n	4bca <processOnSMS+0x132>
    4bc6:	f001 fdc6 	bl	6756 <processOnSMS+0x1cbe>
		{
			if (err == GSM_ERROR_NONE)
    4bca:	231c      	movs	r3, #28
    4bcc:	33ff      	adds	r3, #255	; 0xff
    4bce:	2208      	movs	r2, #8
    4bd0:	4694      	mov	ip, r2
    4bd2:	44bc      	add	ip, r7
    4bd4:	4463      	add	r3, ip
    4bd6:	781b      	ldrb	r3, [r3, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d10d      	bne.n	4bf8 <processOnSMS+0x160>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
    4bdc:	2310      	movs	r3, #16
    4bde:	2208      	movs	r2, #8
    4be0:	4694      	mov	ip, r2
    4be2:	44bc      	add	ip, r7
    4be4:	4463      	add	r3, ip
    4be6:	4aaa      	ldr	r2, [pc, #680]	; (4e90 <processOnSMS+0x3f8>)
    4be8:	ca13      	ldmia	r2!, {r0, r1, r4}
    4bea:	c313      	stmia	r3!, {r0, r1, r4}
    4bec:	ca13      	ldmia	r2!, {r0, r1, r4}
    4bee:	c313      	stmia	r3!, {r0, r1, r4}
    4bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
    4bf2:	c313      	stmia	r3!, {r0, r1, r4}
    4bf4:	f001 fdaf 	bl	6756 <processOnSMS+0x1cbe>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
    4bf8:	2310      	movs	r3, #16
    4bfa:	2208      	movs	r2, #8
    4bfc:	4694      	mov	ip, r2
    4bfe:	44bc      	add	ip, r7
    4c00:	4463      	add	r3, ip
    4c02:	4aa4      	ldr	r2, [pc, #656]	; (4e94 <processOnSMS+0x3fc>)
    4c04:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c06:	c313      	stmia	r3!, {r0, r1, r4}
    4c08:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c0a:	c313      	stmia	r3!, {r0, r1, r4}
    4c0c:	ca03      	ldmia	r2!, {r0, r1}
    4c0e:	c303      	stmia	r3!, {r0, r1}
    4c10:	8811      	ldrh	r1, [r2, #0]
    4c12:	8019      	strh	r1, [r3, #0]
    4c14:	7892      	ldrb	r2, [r2, #2]
    4c16:	709a      	strb	r2, [r3, #2]
    4c18:	f001 fd9d 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
    4c1c:	4a9e      	ldr	r2, [pc, #632]	; (4e98 <processOnSMS+0x400>)
    4c1e:	68fb      	ldr	r3, [r7, #12]
    4c20:	0011      	movs	r1, r2
    4c22:	0018      	movs	r0, r3
    4c24:	4b8f      	ldr	r3, [pc, #572]	; (4e64 <processOnSMS+0x3cc>)
    4c26:	4798      	blx	r3
    4c28:	1e03      	subs	r3, r0, #0
    4c2a:	d030      	beq.n	4c8e <processOnSMS+0x1f6>
	{
		clearNumbers(admin);
    4c2c:	4b89      	ldr	r3, [pc, #548]	; (4e54 <processOnSMS+0x3bc>)
    4c2e:	2294      	movs	r2, #148	; 0x94
    4c30:	0052      	lsls	r2, r2, #1
    4c32:	4694      	mov	ip, r2
    4c34:	2208      	movs	r2, #8
    4c36:	4690      	mov	r8, r2
    4c38:	44b8      	add	r8, r7
    4c3a:	44c4      	add	ip, r8
    4c3c:	4463      	add	r3, ip
    4c3e:	781b      	ldrb	r3, [r3, #0]
    4c40:	0018      	movs	r0, r3
    4c42:	4b96      	ldr	r3, [pc, #600]	; (4e9c <processOnSMS+0x404>)
    4c44:	4798      	blx	r3
		incomingSMSProcessed=true;
    4c46:	2328      	movs	r3, #40	; 0x28
    4c48:	33ff      	adds	r3, #255	; 0xff
    4c4a:	2208      	movs	r2, #8
    4c4c:	4694      	mov	ip, r2
    4c4e:	44bc      	add	ip, r7
    4c50:	4463      	add	r3, ip
    4c52:	2201      	movs	r2, #1
    4c54:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4c56:	4b80      	ldr	r3, [pc, #512]	; (4e58 <processOnSMS+0x3c0>)
    4c58:	2294      	movs	r2, #148	; 0x94
    4c5a:	0052      	lsls	r2, r2, #1
    4c5c:	4694      	mov	ip, r2
    4c5e:	2208      	movs	r2, #8
    4c60:	4690      	mov	r8, r2
    4c62:	44b8      	add	r8, r7
    4c64:	44c4      	add	ip, r8
    4c66:	4463      	add	r3, ip
    4c68:	781b      	ldrb	r3, [r3, #0]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d101      	bne.n	4c72 <processOnSMS+0x1da>
    4c6e:	f001 fd72 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
    4c72:	2310      	movs	r3, #16
    4c74:	2208      	movs	r2, #8
    4c76:	4694      	mov	ip, r2
    4c78:	44bc      	add	ip, r7
    4c7a:	4463      	add	r3, ip
    4c7c:	4a88      	ldr	r2, [pc, #544]	; (4ea0 <processOnSMS+0x408>)
    4c7e:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c80:	c313      	stmia	r3!, {r0, r1, r4}
    4c82:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c84:	c313      	stmia	r3!, {r0, r1, r4}
    4c86:	7812      	ldrb	r2, [r2, #0]
    4c88:	701a      	strb	r2, [r3, #0]
    4c8a:	f001 fd64 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
    4c8e:	4a85      	ldr	r2, [pc, #532]	; (4ea4 <processOnSMS+0x40c>)
    4c90:	68fb      	ldr	r3, [r7, #12]
    4c92:	0011      	movs	r1, r2
    4c94:	0018      	movs	r0, r3
    4c96:	4b73      	ldr	r3, [pc, #460]	; (4e64 <processOnSMS+0x3cc>)
    4c98:	4798      	blx	r3
    4c9a:	1e03      	subs	r3, r0, #0
    4c9c:	d065      	beq.n	4d6a <processOnSMS+0x2d2>
	{
		saveAutoStartSettings(false);
    4c9e:	2000      	movs	r0, #0
    4ca0:	4b81      	ldr	r3, [pc, #516]	; (4ea8 <processOnSMS+0x410>)
    4ca2:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
    4ca4:	4b81      	ldr	r3, [pc, #516]	; (4eac <processOnSMS+0x414>)
    4ca6:	795b      	ldrb	r3, [r3, #5]
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d00d      	beq.n	4cc8 <processOnSMS+0x230>
		{
			saveWaterBypassSettings(false);
    4cac:	2000      	movs	r0, #0
    4cae:	4b80      	ldr	r3, [pc, #512]	; (4eb0 <processOnSMS+0x418>)
    4cb0:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
    4cb2:	4b7e      	ldr	r3, [pc, #504]	; (4eac <processOnSMS+0x414>)
    4cb4:	78db      	ldrb	r3, [r3, #3]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d003      	beq.n	4cc2 <processOnSMS+0x22a>
			{
				saveM2MSettings(false);
    4cba:	2000      	movs	r0, #0
    4cbc:	4b7d      	ldr	r3, [pc, #500]	; (4eb4 <processOnSMS+0x41c>)
    4cbe:	4798      	blx	r3
    4cc0:	e002      	b.n	4cc8 <processOnSMS+0x230>
			}
			else
			{
				savePreventOverFlowSettings(false);
    4cc2:	2000      	movs	r0, #0
    4cc4:	4b7c      	ldr	r3, [pc, #496]	; (4eb8 <processOnSMS+0x420>)
    4cc6:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4cc8:	4b78      	ldr	r3, [pc, #480]	; (4eac <processOnSMS+0x414>)
    4cca:	785b      	ldrb	r3, [r3, #1]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d008      	beq.n	4ce2 <processOnSMS+0x24a>
		{
			setOverloadPer(120);
    4cd0:	2078      	movs	r0, #120	; 0x78
    4cd2:	4b7a      	ldr	r3, [pc, #488]	; (4ebc <processOnSMS+0x424>)
    4cd4:	4798      	blx	r3
			setUnderloadPer(85);
    4cd6:	2055      	movs	r0, #85	; 0x55
    4cd8:	4b79      	ldr	r3, [pc, #484]	; (4ec0 <processOnSMS+0x428>)
    4cda:	4798      	blx	r3
			setCurrentDetection(false);
    4cdc:	2000      	movs	r0, #0
    4cde:	4b79      	ldr	r3, [pc, #484]	; (4ec4 <processOnSMS+0x42c>)
    4ce0:	4798      	blx	r3
		}
		saveEventStageSettings(0);
    4ce2:	2000      	movs	r0, #0
    4ce4:	4b78      	ldr	r3, [pc, #480]	; (4ec8 <processOnSMS+0x430>)
    4ce6:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
    4ce8:	2000      	movs	r0, #0
    4cea:	4b78      	ldr	r3, [pc, #480]	; (4ecc <processOnSMS+0x434>)
    4cec:	4798      	blx	r3
		saveResponseSettings('C');
    4cee:	2043      	movs	r0, #67	; 0x43
    4cf0:	4b77      	ldr	r3, [pc, #476]	; (4ed0 <processOnSMS+0x438>)
    4cf2:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
    4cf4:	2032      	movs	r0, #50	; 0x32
    4cf6:	4b77      	ldr	r3, [pc, #476]	; (4ed4 <processOnSMS+0x43c>)
    4cf8:	4798      	blx	r3
		saveStarDeltaTimer(2);
    4cfa:	2002      	movs	r0, #2
    4cfc:	4b76      	ldr	r3, [pc, #472]	; (4ed8 <processOnSMS+0x440>)
    4cfe:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
    4d00:	2001      	movs	r0, #1
    4d02:	4b76      	ldr	r3, [pc, #472]	; (4edc <processOnSMS+0x444>)
    4d04:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
    4d06:	2050      	movs	r0, #80	; 0x50
    4d08:	4b75      	ldr	r3, [pc, #468]	; (4ee0 <processOnSMS+0x448>)
    4d0a:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
    4d0c:	2001      	movs	r0, #1
    4d0e:	4b75      	ldr	r3, [pc, #468]	; (4ee4 <processOnSMS+0x44c>)
    4d10:	4798      	blx	r3
		setPrimaryNumberIndex(0);
    4d12:	2000      	movs	r0, #0
    4d14:	4b74      	ldr	r3, [pc, #464]	; (4ee8 <processOnSMS+0x450>)
    4d16:	4798      	blx	r3
		setSecondaryNumberIndex(1);
    4d18:	2001      	movs	r0, #1
    4d1a:	4b74      	ldr	r3, [pc, #464]	; (4eec <processOnSMS+0x454>)
    4d1c:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4d1e:	2328      	movs	r3, #40	; 0x28
    4d20:	33ff      	adds	r3, #255	; 0xff
    4d22:	2208      	movs	r2, #8
    4d24:	4694      	mov	ip, r2
    4d26:	44bc      	add	ip, r7
    4d28:	4463      	add	r3, ip
    4d2a:	2201      	movs	r2, #1
    4d2c:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4d2e:	4b4a      	ldr	r3, [pc, #296]	; (4e58 <processOnSMS+0x3c0>)
    4d30:	2294      	movs	r2, #148	; 0x94
    4d32:	0052      	lsls	r2, r2, #1
    4d34:	4694      	mov	ip, r2
    4d36:	2208      	movs	r2, #8
    4d38:	4690      	mov	r8, r2
    4d3a:	44b8      	add	r8, r7
    4d3c:	44c4      	add	ip, r8
    4d3e:	4463      	add	r3, ip
    4d40:	781b      	ldrb	r3, [r3, #0]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d101      	bne.n	4d4a <processOnSMS+0x2b2>
    4d46:	f001 fd06 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
    4d4a:	2310      	movs	r3, #16
    4d4c:	2208      	movs	r2, #8
    4d4e:	4694      	mov	ip, r2
    4d50:	44bc      	add	ip, r7
    4d52:	4463      	add	r3, ip
    4d54:	4a66      	ldr	r2, [pc, #408]	; (4ef0 <processOnSMS+0x458>)
    4d56:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d58:	c313      	stmia	r3!, {r0, r1, r4}
    4d5a:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d5c:	c313      	stmia	r3!, {r0, r1, r4}
    4d5e:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d60:	c313      	stmia	r3!, {r0, r1, r4}
    4d62:	7812      	ldrb	r2, [r2, #0]
    4d64:	701a      	strb	r2, [r3, #0]
    4d66:	f001 fcf6 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
    4d6a:	4a62      	ldr	r2, [pc, #392]	; (4ef4 <processOnSMS+0x45c>)
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	0011      	movs	r1, r2
    4d70:	0018      	movs	r0, r3
    4d72:	4b3c      	ldr	r3, [pc, #240]	; (4e64 <processOnSMS+0x3cc>)
    4d74:	4798      	blx	r3
    4d76:	1e03      	subs	r3, r0, #0
    4d78:	d038      	beq.n	4dec <processOnSMS+0x354>
	{
		response_sms_processed_cmd = true;
    4d7a:	4b37      	ldr	r3, [pc, #220]	; (4e58 <processOnSMS+0x3c0>)
    4d7c:	2294      	movs	r2, #148	; 0x94
    4d7e:	0052      	lsls	r2, r2, #1
    4d80:	4694      	mov	ip, r2
    4d82:	2208      	movs	r2, #8
    4d84:	4690      	mov	r8, r2
    4d86:	44b8      	add	r8, r7
    4d88:	44c4      	add	ip, r8
    4d8a:	4463      	add	r3, ip
    4d8c:	2201      	movs	r2, #1
    4d8e:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4d90:	2328      	movs	r3, #40	; 0x28
    4d92:	33ff      	adds	r3, #255	; 0xff
    4d94:	2208      	movs	r2, #8
    4d96:	4694      	mov	ip, r2
    4d98:	44bc      	add	ip, r7
    4d9a:	4463      	add	r3, ip
    4d9c:	2201      	movs	r2, #1
    4d9e:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
    4da0:	2310      	movs	r3, #16
    4da2:	2208      	movs	r2, #8
    4da4:	4694      	mov	ip, r2
    4da6:	44bc      	add	ip, r7
    4da8:	4463      	add	r3, ip
    4daa:	22fa      	movs	r2, #250	; 0xfa
    4dac:	2100      	movs	r1, #0
    4dae:	0018      	movs	r0, r3
    4db0:	4b51      	ldr	r3, [pc, #324]	; (4ef8 <processOnSMS+0x460>)
    4db2:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
    4db4:	4b51      	ldr	r3, [pc, #324]	; (4efc <processOnSMS+0x464>)
    4db6:	789b      	ldrb	r3, [r3, #2]
    4db8:	2b00      	cmp	r3, #0
    4dba:	d10d      	bne.n	4dd8 <processOnSMS+0x340>
		{
			strcpy(resep_msg,"No Numbers Exists");
    4dbc:	2310      	movs	r3, #16
    4dbe:	2208      	movs	r2, #8
    4dc0:	4694      	mov	ip, r2
    4dc2:	44bc      	add	ip, r7
    4dc4:	4463      	add	r3, ip
    4dc6:	4a4e      	ldr	r2, [pc, #312]	; (4f00 <processOnSMS+0x468>)
    4dc8:	ca13      	ldmia	r2!, {r0, r1, r4}
    4dca:	c313      	stmia	r3!, {r0, r1, r4}
    4dcc:	6811      	ldr	r1, [r2, #0]
    4dce:	6019      	str	r1, [r3, #0]
    4dd0:	8892      	ldrh	r2, [r2, #4]
    4dd2:	809a      	strh	r2, [r3, #4]
    4dd4:	f001 fcbf 	bl	6756 <processOnSMS+0x1cbe>
		}
		else
		{
			getNumbers(resep_msg);
    4dd8:	2310      	movs	r3, #16
    4dda:	2208      	movs	r2, #8
    4ddc:	4694      	mov	ip, r2
    4dde:	44bc      	add	ip, r7
    4de0:	4463      	add	r3, ip
    4de2:	0018      	movs	r0, r3
    4de4:	4b47      	ldr	r3, [pc, #284]	; (4f04 <processOnSMS+0x46c>)
    4de6:	4798      	blx	r3
    4de8:	f001 fcb5 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
    4dec:	4a46      	ldr	r2, [pc, #280]	; (4f08 <processOnSMS+0x470>)
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	0011      	movs	r1, r2
    4df2:	0018      	movs	r0, r3
    4df4:	4b1b      	ldr	r3, [pc, #108]	; (4e64 <processOnSMS+0x3cc>)
    4df6:	4798      	blx	r3
    4df8:	1e03      	subs	r3, r0, #0
    4dfa:	d003      	beq.n	4e04 <processOnSMS+0x36c>
	{
		system_reset();
    4dfc:	4b21      	ldr	r3, [pc, #132]	; (4e84 <processOnSMS+0x3ec>)
    4dfe:	4798      	blx	r3
    4e00:	f001 fca9 	bl	6756 <processOnSMS+0x1cbe>
	}
	else if (StringstartsWith(received_command,"DID"))
    4e04:	4a41      	ldr	r2, [pc, #260]	; (4f0c <processOnSMS+0x474>)
    4e06:	68fb      	ldr	r3, [r7, #12]
    4e08:	0011      	movs	r1, r2
    4e0a:	0018      	movs	r0, r3
    4e0c:	4b15      	ldr	r3, [pc, #84]	; (4e64 <processOnSMS+0x3cc>)
    4e0e:	4798      	blx	r3
    4e10:	1e03      	subs	r3, r0, #0
    4e12:	d100      	bne.n	4e16 <processOnSMS+0x37e>
    4e14:	e080      	b.n	4f18 <processOnSMS+0x480>
	{
		response_sms_processed_cmd=true;
    4e16:	4b10      	ldr	r3, [pc, #64]	; (4e58 <processOnSMS+0x3c0>)
    4e18:	2294      	movs	r2, #148	; 0x94
    4e1a:	0052      	lsls	r2, r2, #1
    4e1c:	4694      	mov	ip, r2
    4e1e:	2208      	movs	r2, #8
    4e20:	4690      	mov	r8, r2
    4e22:	44b8      	add	r8, r7
    4e24:	44c4      	add	ip, r8
    4e26:	4463      	add	r3, ip
    4e28:	2201      	movs	r2, #1
    4e2a:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4e2c:	2328      	movs	r3, #40	; 0x28
    4e2e:	33ff      	adds	r3, #255	; 0xff
    4e30:	2208      	movs	r2, #8
    4e32:	4694      	mov	ip, r2
    4e34:	44bc      	add	ip, r7
    4e36:	4463      	add	r3, ip
    4e38:	2201      	movs	r2, #1
    4e3a:	701a      	strb	r2, [r3, #0]
		
		strcpy(resep_msg,factory_settings_parameter_struct.DeviceID_ee);
    4e3c:	4a34      	ldr	r2, [pc, #208]	; (4f10 <processOnSMS+0x478>)
    4e3e:	2310      	movs	r3, #16
    4e40:	2108      	movs	r1, #8
    4e42:	468c      	mov	ip, r1
    4e44:	44bc      	add	ip, r7
    4e46:	4463      	add	r3, ip
    4e48:	0011      	movs	r1, r2
    4e4a:	0018      	movs	r0, r3
    4e4c:	4b31      	ldr	r3, [pc, #196]	; (4f14 <processOnSMS+0x47c>)
    4e4e:	4798      	blx	r3
    4e50:	f001 fc81 	bl	6756 <processOnSMS+0x1cbe>
    4e54:	fffffedb 	.word	0xfffffedb
    4e58:	fffffeda 	.word	0xfffffeda
    4e5c:	fffffed9 	.word	0xfffffed9
    4e60:	00018af0 	.word	0x00018af0
    4e64:	00003d61 	.word	0x00003d61
    4e68:	00018af8 	.word	0x00018af8
    4e6c:	200005e8 	.word	0x200005e8
    4e70:	20000574 	.word	0x20000574
    4e74:	00017881 	.word	0x00017881
    4e78:	00012549 	.word	0x00012549
    4e7c:	000126f1 	.word	0x000126f1
    4e80:	0000ebf9 	.word	0x0000ebf9
    4e84:	00003e35 	.word	0x00003e35
    4e88:	00018b00 	.word	0x00018b00
    4e8c:	00002da1 	.word	0x00002da1
    4e90:	00018b08 	.word	0x00018b08
    4e94:	00018b2c 	.word	0x00018b2c
    4e98:	00018b50 	.word	0x00018b50
    4e9c:	00001105 	.word	0x00001105
    4ea0:	00018b5c 	.word	0x00018b5c
    4ea4:	00018b78 	.word	0x00018b78
    4ea8:	000012a1 	.word	0x000012a1
    4eac:	20000618 	.word	0x20000618
    4eb0:	00001461 	.word	0x00001461
    4eb4:	00000bdd 	.word	0x00000bdd
    4eb8:	000014ad 	.word	0x000014ad
    4ebc:	000014f9 	.word	0x000014f9
    4ec0:	00001561 	.word	0x00001561
    4ec4:	00001859 	.word	0x00001859
    4ec8:	000018f1 	.word	0x000018f1
    4ecc:	00001339 	.word	0x00001339
    4ed0:	00001385 	.word	0x00001385
    4ed4:	000012ed 	.word	0x000012ed
    4ed8:	000018a5 	.word	0x000018a5
    4edc:	000015d1 	.word	0x000015d1
    4ee0:	0000161d 	.word	0x0000161d
    4ee4:	00001669 	.word	0x00001669
    4ee8:	000019d1 	.word	0x000019d1
    4eec:	00001a21 	.word	0x00001a21
    4ef0:	00018b80 	.word	0x00018b80
    4ef4:	00018ba8 	.word	0x00018ba8
    4ef8:	000178b7 	.word	0x000178b7
    4efc:	20000600 	.word	0x20000600
    4f00:	00018bac 	.word	0x00018bac
    4f04:	000007f1 	.word	0x000007f1
    4f08:	00018bc0 	.word	0x00018bc0
    4f0c:	00018bc8 	.word	0x00018bc8
    4f10:	20000620 	.word	0x20000620
    4f14:	00017b37 	.word	0x00017b37
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
    4f18:	4aec      	ldr	r2, [pc, #944]	; (52cc <processOnSMS+0x834>)
    4f1a:	68fb      	ldr	r3, [r7, #12]
    4f1c:	0011      	movs	r1, r2
    4f1e:	0018      	movs	r0, r3
    4f20:	4beb      	ldr	r3, [pc, #940]	; (52d0 <processOnSMS+0x838>)
    4f22:	4798      	blx	r3
    4f24:	1e03      	subs	r3, r0, #0
    4f26:	d027      	beq.n	4f78 <processOnSMS+0x4e0>
	{
		saveAutoStartSettings(true);
    4f28:	2001      	movs	r0, #1
    4f2a:	4bea      	ldr	r3, [pc, #936]	; (52d4 <processOnSMS+0x83c>)
    4f2c:	4798      	blx	r3
		resetAutoStart(true);
    4f2e:	2001      	movs	r0, #1
    4f30:	4be9      	ldr	r3, [pc, #932]	; (52d8 <processOnSMS+0x840>)
    4f32:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4f34:	2328      	movs	r3, #40	; 0x28
    4f36:	33ff      	adds	r3, #255	; 0xff
    4f38:	2208      	movs	r2, #8
    4f3a:	4694      	mov	ip, r2
    4f3c:	44bc      	add	ip, r7
    4f3e:	4463      	add	r3, ip
    4f40:	2201      	movs	r2, #1
    4f42:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4f44:	4be5      	ldr	r3, [pc, #916]	; (52dc <processOnSMS+0x844>)
    4f46:	2294      	movs	r2, #148	; 0x94
    4f48:	0052      	lsls	r2, r2, #1
    4f4a:	4694      	mov	ip, r2
    4f4c:	2208      	movs	r2, #8
    4f4e:	4690      	mov	r8, r2
    4f50:	44b8      	add	r8, r7
    4f52:	44c4      	add	ip, r8
    4f54:	4463      	add	r3, ip
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d101      	bne.n	4f60 <processOnSMS+0x4c8>
    4f5c:	f001 fbfb 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
    4f60:	2310      	movs	r3, #16
    4f62:	2208      	movs	r2, #8
    4f64:	4694      	mov	ip, r2
    4f66:	44bc      	add	ip, r7
    4f68:	4463      	add	r3, ip
    4f6a:	4add      	ldr	r2, [pc, #884]	; (52e0 <processOnSMS+0x848>)
    4f6c:	ca13      	ldmia	r2!, {r0, r1, r4}
    4f6e:	c313      	stmia	r3!, {r0, r1, r4}
    4f70:	6812      	ldr	r2, [r2, #0]
    4f72:	601a      	str	r2, [r3, #0]
    4f74:	f001 fbef 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
    4f78:	4ada      	ldr	r2, [pc, #872]	; (52e4 <processOnSMS+0x84c>)
    4f7a:	68fb      	ldr	r3, [r7, #12]
    4f7c:	0011      	movs	r1, r2
    4f7e:	0018      	movs	r0, r3
    4f80:	4bd3      	ldr	r3, [pc, #844]	; (52d0 <processOnSMS+0x838>)
    4f82:	4798      	blx	r3
    4f84:	1e03      	subs	r3, r0, #0
    4f86:	d029      	beq.n	4fdc <processOnSMS+0x544>
	{
		saveAutoStartSettings(false);
    4f88:	2000      	movs	r0, #0
    4f8a:	4bd2      	ldr	r3, [pc, #840]	; (52d4 <processOnSMS+0x83c>)
    4f8c:	4798      	blx	r3
		resetAutoStart(true);
    4f8e:	2001      	movs	r0, #1
    4f90:	4bd1      	ldr	r3, [pc, #836]	; (52d8 <processOnSMS+0x840>)
    4f92:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4f94:	2328      	movs	r3, #40	; 0x28
    4f96:	33ff      	adds	r3, #255	; 0xff
    4f98:	2208      	movs	r2, #8
    4f9a:	4694      	mov	ip, r2
    4f9c:	44bc      	add	ip, r7
    4f9e:	4463      	add	r3, ip
    4fa0:	2201      	movs	r2, #1
    4fa2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4fa4:	4bcd      	ldr	r3, [pc, #820]	; (52dc <processOnSMS+0x844>)
    4fa6:	2294      	movs	r2, #148	; 0x94
    4fa8:	0052      	lsls	r2, r2, #1
    4faa:	4694      	mov	ip, r2
    4fac:	2208      	movs	r2, #8
    4fae:	4690      	mov	r8, r2
    4fb0:	44b8      	add	r8, r7
    4fb2:	44c4      	add	ip, r8
    4fb4:	4463      	add	r3, ip
    4fb6:	781b      	ldrb	r3, [r3, #0]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d101      	bne.n	4fc0 <processOnSMS+0x528>
    4fbc:	f001 fbcb 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
    4fc0:	2310      	movs	r3, #16
    4fc2:	2208      	movs	r2, #8
    4fc4:	4694      	mov	ip, r2
    4fc6:	44bc      	add	ip, r7
    4fc8:	4463      	add	r3, ip
    4fca:	4ac7      	ldr	r2, [pc, #796]	; (52e8 <processOnSMS+0x850>)
    4fcc:	ca13      	ldmia	r2!, {r0, r1, r4}
    4fce:	c313      	stmia	r3!, {r0, r1, r4}
    4fd0:	6811      	ldr	r1, [r2, #0]
    4fd2:	6019      	str	r1, [r3, #0]
    4fd4:	7912      	ldrb	r2, [r2, #4]
    4fd6:	711a      	strb	r2, [r3, #4]
    4fd8:	f001 fbbd 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
    4fdc:	4ac3      	ldr	r2, [pc, #780]	; (52ec <processOnSMS+0x854>)
    4fde:	68fb      	ldr	r3, [r7, #12]
    4fe0:	0011      	movs	r1, r2
    4fe2:	0018      	movs	r0, r3
    4fe4:	4bba      	ldr	r3, [pc, #744]	; (52d0 <processOnSMS+0x838>)
    4fe6:	4798      	blx	r3
    4fe8:	1e03      	subs	r3, r0, #0
    4fea:	d02a      	beq.n	5042 <processOnSMS+0x5aa>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
    4fec:	4bc0      	ldr	r3, [pc, #768]	; (52f0 <processOnSMS+0x858>)
    4fee:	795b      	ldrb	r3, [r3, #5]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d101      	bne.n	4ff8 <processOnSMS+0x560>
    4ff4:	f001 fbaf 	bl	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    4ff8:	2328      	movs	r3, #40	; 0x28
    4ffa:	33ff      	adds	r3, #255	; 0xff
    4ffc:	2208      	movs	r2, #8
    4ffe:	4694      	mov	ip, r2
    5000:	44bc      	add	ip, r7
    5002:	4463      	add	r3, ip
    5004:	2201      	movs	r2, #1
    5006:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
    5008:	2001      	movs	r0, #1
    500a:	4bba      	ldr	r3, [pc, #744]	; (52f4 <processOnSMS+0x85c>)
    500c:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    500e:	4bb3      	ldr	r3, [pc, #716]	; (52dc <processOnSMS+0x844>)
    5010:	2294      	movs	r2, #148	; 0x94
    5012:	0052      	lsls	r2, r2, #1
    5014:	4694      	mov	ip, r2
    5016:	2208      	movs	r2, #8
    5018:	4690      	mov	r8, r2
    501a:	44b8      	add	r8, r7
    501c:	44c4      	add	ip, r8
    501e:	4463      	add	r3, ip
    5020:	781b      	ldrb	r3, [r3, #0]
    5022:	2b00      	cmp	r3, #0
    5024:	d101      	bne.n	502a <processOnSMS+0x592>
    5026:	f001 fb96 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
    502a:	2310      	movs	r3, #16
    502c:	2208      	movs	r2, #8
    502e:	4694      	mov	ip, r2
    5030:	44bc      	add	ip, r7
    5032:	4463      	add	r3, ip
    5034:	4ab0      	ldr	r2, [pc, #704]	; (52f8 <processOnSMS+0x860>)
    5036:	ca13      	ldmia	r2!, {r0, r1, r4}
    5038:	c313      	stmia	r3!, {r0, r1, r4}
    503a:	6812      	ldr	r2, [r2, #0]
    503c:	601a      	str	r2, [r3, #0]
    503e:	f001 fb8a 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
    5042:	4aae      	ldr	r2, [pc, #696]	; (52fc <processOnSMS+0x864>)
    5044:	68fb      	ldr	r3, [r7, #12]
    5046:	0011      	movs	r1, r2
    5048:	0018      	movs	r0, r3
    504a:	4ba1      	ldr	r3, [pc, #644]	; (52d0 <processOnSMS+0x838>)
    504c:	4798      	blx	r3
    504e:	1e03      	subs	r3, r0, #0
    5050:	d02c      	beq.n	50ac <processOnSMS+0x614>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
    5052:	4ba7      	ldr	r3, [pc, #668]	; (52f0 <processOnSMS+0x858>)
    5054:	795b      	ldrb	r3, [r3, #5]
    5056:	2b00      	cmp	r3, #0
    5058:	d101      	bne.n	505e <processOnSMS+0x5c6>
    505a:	f001 fb7c 	bl	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    505e:	2328      	movs	r3, #40	; 0x28
    5060:	33ff      	adds	r3, #255	; 0xff
    5062:	2208      	movs	r2, #8
    5064:	4694      	mov	ip, r2
    5066:	44bc      	add	ip, r7
    5068:	4463      	add	r3, ip
    506a:	2201      	movs	r2, #1
    506c:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
    506e:	2000      	movs	r0, #0
    5070:	4ba0      	ldr	r3, [pc, #640]	; (52f4 <processOnSMS+0x85c>)
    5072:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    5074:	4b99      	ldr	r3, [pc, #612]	; (52dc <processOnSMS+0x844>)
    5076:	2294      	movs	r2, #148	; 0x94
    5078:	0052      	lsls	r2, r2, #1
    507a:	4694      	mov	ip, r2
    507c:	2208      	movs	r2, #8
    507e:	4690      	mov	r8, r2
    5080:	44b8      	add	r8, r7
    5082:	44c4      	add	ip, r8
    5084:	4463      	add	r3, ip
    5086:	781b      	ldrb	r3, [r3, #0]
    5088:	2b00      	cmp	r3, #0
    508a:	d101      	bne.n	5090 <processOnSMS+0x5f8>
    508c:	f001 fb63 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
    5090:	2310      	movs	r3, #16
    5092:	2208      	movs	r2, #8
    5094:	4694      	mov	ip, r2
    5096:	44bc      	add	ip, r7
    5098:	4463      	add	r3, ip
    509a:	4a99      	ldr	r2, [pc, #612]	; (5300 <processOnSMS+0x868>)
    509c:	ca13      	ldmia	r2!, {r0, r1, r4}
    509e:	c313      	stmia	r3!, {r0, r1, r4}
    50a0:	6811      	ldr	r1, [r2, #0]
    50a2:	6019      	str	r1, [r3, #0]
    50a4:	7912      	ldrb	r2, [r2, #4]
    50a6:	711a      	strb	r2, [r3, #4]
    50a8:	f001 fb55 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
    50ac:	4a95      	ldr	r2, [pc, #596]	; (5304 <processOnSMS+0x86c>)
    50ae:	68fb      	ldr	r3, [r7, #12]
    50b0:	0011      	movs	r1, r2
    50b2:	0018      	movs	r0, r3
    50b4:	4b86      	ldr	r3, [pc, #536]	; (52d0 <processOnSMS+0x838>)
    50b6:	4798      	blx	r3
    50b8:	1e03      	subs	r3, r0, #0
    50ba:	d026      	beq.n	510a <processOnSMS+0x672>
	{
		saveSinglePhasingSettings(true);
    50bc:	2001      	movs	r0, #1
    50be:	4b92      	ldr	r3, [pc, #584]	; (5308 <processOnSMS+0x870>)
    50c0:	4798      	blx	r3
		incomingSMSProcessed=true;
    50c2:	2328      	movs	r3, #40	; 0x28
    50c4:	33ff      	adds	r3, #255	; 0xff
    50c6:	2208      	movs	r2, #8
    50c8:	4694      	mov	ip, r2
    50ca:	44bc      	add	ip, r7
    50cc:	4463      	add	r3, ip
    50ce:	2201      	movs	r2, #1
    50d0:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    50d2:	4b82      	ldr	r3, [pc, #520]	; (52dc <processOnSMS+0x844>)
    50d4:	2294      	movs	r2, #148	; 0x94
    50d6:	0052      	lsls	r2, r2, #1
    50d8:	4694      	mov	ip, r2
    50da:	2208      	movs	r2, #8
    50dc:	4690      	mov	r8, r2
    50de:	44b8      	add	r8, r7
    50e0:	44c4      	add	ip, r8
    50e2:	4463      	add	r3, ip
    50e4:	781b      	ldrb	r3, [r3, #0]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d101      	bne.n	50ee <processOnSMS+0x656>
    50ea:	f001 fb34 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"SPP ON");
    50ee:	2310      	movs	r3, #16
    50f0:	2208      	movs	r2, #8
    50f2:	4694      	mov	ip, r2
    50f4:	44bc      	add	ip, r7
    50f6:	4463      	add	r3, ip
    50f8:	4a84      	ldr	r2, [pc, #528]	; (530c <processOnSMS+0x874>)
    50fa:	6811      	ldr	r1, [r2, #0]
    50fc:	6019      	str	r1, [r3, #0]
    50fe:	8891      	ldrh	r1, [r2, #4]
    5100:	8099      	strh	r1, [r3, #4]
    5102:	7992      	ldrb	r2, [r2, #6]
    5104:	719a      	strb	r2, [r3, #6]
    5106:	f001 fb26 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
    510a:	4a81      	ldr	r2, [pc, #516]	; (5310 <processOnSMS+0x878>)
    510c:	68fb      	ldr	r3, [r7, #12]
    510e:	0011      	movs	r1, r2
    5110:	0018      	movs	r0, r3
    5112:	4b6f      	ldr	r3, [pc, #444]	; (52d0 <processOnSMS+0x838>)
    5114:	4798      	blx	r3
    5116:	1e03      	subs	r3, r0, #0
    5118:	d022      	beq.n	5160 <processOnSMS+0x6c8>
	{
		saveSinglePhasingSettings(false);
    511a:	2000      	movs	r0, #0
    511c:	4b7a      	ldr	r3, [pc, #488]	; (5308 <processOnSMS+0x870>)
    511e:	4798      	blx	r3
		incomingSMSProcessed=true;
    5120:	2328      	movs	r3, #40	; 0x28
    5122:	33ff      	adds	r3, #255	; 0xff
    5124:	2208      	movs	r2, #8
    5126:	4694      	mov	ip, r2
    5128:	44bc      	add	ip, r7
    512a:	4463      	add	r3, ip
    512c:	2201      	movs	r2, #1
    512e:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5130:	4b6a      	ldr	r3, [pc, #424]	; (52dc <processOnSMS+0x844>)
    5132:	2294      	movs	r2, #148	; 0x94
    5134:	0052      	lsls	r2, r2, #1
    5136:	4694      	mov	ip, r2
    5138:	2208      	movs	r2, #8
    513a:	4690      	mov	r8, r2
    513c:	44b8      	add	r8, r7
    513e:	44c4      	add	ip, r8
    5140:	4463      	add	r3, ip
    5142:	781b      	ldrb	r3, [r3, #0]
    5144:	2b00      	cmp	r3, #0
    5146:	d101      	bne.n	514c <processOnSMS+0x6b4>
    5148:	f001 fb05 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"SPP OFF");
    514c:	2310      	movs	r3, #16
    514e:	2208      	movs	r2, #8
    5150:	4694      	mov	ip, r2
    5152:	44bc      	add	ip, r7
    5154:	4463      	add	r3, ip
    5156:	4a6f      	ldr	r2, [pc, #444]	; (5314 <processOnSMS+0x87c>)
    5158:	ca03      	ldmia	r2!, {r0, r1}
    515a:	c303      	stmia	r3!, {r0, r1}
    515c:	f001 fafb 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
    5160:	4a6d      	ldr	r2, [pc, #436]	; (5318 <processOnSMS+0x880>)
    5162:	68fb      	ldr	r3, [r7, #12]
    5164:	0011      	movs	r1, r2
    5166:	0018      	movs	r0, r3
    5168:	4b59      	ldr	r3, [pc, #356]	; (52d0 <processOnSMS+0x838>)
    516a:	4798      	blx	r3
    516c:	1e03      	subs	r3, r0, #0
    516e:	d055      	beq.n	521c <processOnSMS+0x784>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    5170:	68fb      	ldr	r3, [r7, #12]
    5172:	1d1c      	adds	r4, r3, #4
    5174:	68fb      	ldr	r3, [r7, #12]
    5176:	0018      	movs	r0, r3
    5178:	4b68      	ldr	r3, [pc, #416]	; (531c <processOnSMS+0x884>)
    517a:	4798      	blx	r3
    517c:	0002      	movs	r2, r0
    517e:	68fb      	ldr	r3, [r7, #12]
    5180:	0021      	movs	r1, r4
    5182:	0018      	movs	r0, r3
    5184:	4b66      	ldr	r3, [pc, #408]	; (5320 <processOnSMS+0x888>)
    5186:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
    5188:	68fb      	ldr	r3, [r7, #12]
    518a:	0018      	movs	r0, r3
    518c:	4b65      	ldr	r3, [pc, #404]	; (5324 <processOnSMS+0x88c>)
    518e:	4798      	blx	r3
    5190:	0002      	movs	r2, r0
    5192:	2393      	movs	r3, #147	; 0x93
    5194:	005b      	lsls	r3, r3, #1
    5196:	2108      	movs	r1, #8
    5198:	468c      	mov	ip, r1
    519a:	44bc      	add	ip, r7
    519c:	4463      	add	r3, ip
    519e:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
    51a0:	2393      	movs	r3, #147	; 0x93
    51a2:	005b      	lsls	r3, r3, #1
    51a4:	2208      	movs	r2, #8
    51a6:	4694      	mov	ip, r2
    51a8:	44bc      	add	ip, r7
    51aa:	4463      	add	r3, ip
    51ac:	781b      	ldrb	r3, [r3, #0]
    51ae:	2b13      	cmp	r3, #19
    51b0:	d807      	bhi.n	51c2 <processOnSMS+0x72a>
    51b2:	2393      	movs	r3, #147	; 0x93
    51b4:	005b      	lsls	r3, r3, #1
    51b6:	2208      	movs	r2, #8
    51b8:	4694      	mov	ip, r2
    51ba:	44bc      	add	ip, r7
    51bc:	4463      	add	r3, ip
    51be:	2214      	movs	r2, #20
    51c0:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
    51c2:	2393      	movs	r3, #147	; 0x93
    51c4:	005b      	lsls	r3, r3, #1
    51c6:	2208      	movs	r2, #8
    51c8:	4694      	mov	ip, r2
    51ca:	44bc      	add	ip, r7
    51cc:	4463      	add	r3, ip
    51ce:	781b      	ldrb	r3, [r3, #0]
    51d0:	b29b      	uxth	r3, r3
    51d2:	0018      	movs	r0, r3
    51d4:	4b54      	ldr	r3, [pc, #336]	; (5328 <processOnSMS+0x890>)
    51d6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    51d8:	2328      	movs	r3, #40	; 0x28
    51da:	33ff      	adds	r3, #255	; 0xff
    51dc:	2208      	movs	r2, #8
    51de:	4694      	mov	ip, r2
    51e0:	44bc      	add	ip, r7
    51e2:	4463      	add	r3, ip
    51e4:	2201      	movs	r2, #1
    51e6:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
    51e8:	4b3c      	ldr	r3, [pc, #240]	; (52dc <processOnSMS+0x844>)
    51ea:	2294      	movs	r2, #148	; 0x94
    51ec:	0052      	lsls	r2, r2, #1
    51ee:	4694      	mov	ip, r2
    51f0:	2208      	movs	r2, #8
    51f2:	4690      	mov	r8, r2
    51f4:	44b8      	add	r8, r7
    51f6:	44c4      	add	ip, r8
    51f8:	4463      	add	r3, ip
    51fa:	781b      	ldrb	r3, [r3, #0]
    51fc:	2b00      	cmp	r3, #0
    51fe:	d101      	bne.n	5204 <processOnSMS+0x76c>
    5200:	f001 faa9 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"SPP VOLT SET");
    5204:	2310      	movs	r3, #16
    5206:	2208      	movs	r2, #8
    5208:	4694      	mov	ip, r2
    520a:	44bc      	add	ip, r7
    520c:	4463      	add	r3, ip
    520e:	4a47      	ldr	r2, [pc, #284]	; (532c <processOnSMS+0x894>)
    5210:	ca13      	ldmia	r2!, {r0, r1, r4}
    5212:	c313      	stmia	r3!, {r0, r1, r4}
    5214:	7812      	ldrb	r2, [r2, #0]
    5216:	701a      	strb	r2, [r3, #0]
    5218:	f001 fa9d 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
    521c:	4a44      	ldr	r2, [pc, #272]	; (5330 <processOnSMS+0x898>)
    521e:	68fb      	ldr	r3, [r7, #12]
    5220:	0011      	movs	r1, r2
    5222:	0018      	movs	r0, r3
    5224:	4b2a      	ldr	r3, [pc, #168]	; (52d0 <processOnSMS+0x838>)
    5226:	4798      	blx	r3
    5228:	1e03      	subs	r3, r0, #0
    522a:	d022      	beq.n	5272 <processOnSMS+0x7da>
	{
		savePhaseSequenceProtectionSettings(true);
    522c:	2001      	movs	r0, #1
    522e:	4b41      	ldr	r3, [pc, #260]	; (5334 <processOnSMS+0x89c>)
    5230:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    5232:	2328      	movs	r3, #40	; 0x28
    5234:	33ff      	adds	r3, #255	; 0xff
    5236:	2208      	movs	r2, #8
    5238:	4694      	mov	ip, r2
    523a:	44bc      	add	ip, r7
    523c:	4463      	add	r3, ip
    523e:	2201      	movs	r2, #1
    5240:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5242:	4b26      	ldr	r3, [pc, #152]	; (52dc <processOnSMS+0x844>)
    5244:	2294      	movs	r2, #148	; 0x94
    5246:	0052      	lsls	r2, r2, #1
    5248:	4694      	mov	ip, r2
    524a:	2208      	movs	r2, #8
    524c:	4690      	mov	r8, r2
    524e:	44b8      	add	r8, r7
    5250:	44c4      	add	ip, r8
    5252:	4463      	add	r3, ip
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	2b00      	cmp	r3, #0
    5258:	d101      	bne.n	525e <processOnSMS+0x7c6>
    525a:	f001 fa7c 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"SEQP ON");
    525e:	2310      	movs	r3, #16
    5260:	2208      	movs	r2, #8
    5262:	4694      	mov	ip, r2
    5264:	44bc      	add	ip, r7
    5266:	4463      	add	r3, ip
    5268:	4a33      	ldr	r2, [pc, #204]	; (5338 <processOnSMS+0x8a0>)
    526a:	ca03      	ldmia	r2!, {r0, r1}
    526c:	c303      	stmia	r3!, {r0, r1}
    526e:	f001 fa72 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
    5272:	4a32      	ldr	r2, [pc, #200]	; (533c <processOnSMS+0x8a4>)
    5274:	68fb      	ldr	r3, [r7, #12]
    5276:	0011      	movs	r1, r2
    5278:	0018      	movs	r0, r3
    527a:	4b15      	ldr	r3, [pc, #84]	; (52d0 <processOnSMS+0x838>)
    527c:	4798      	blx	r3
    527e:	1e03      	subs	r3, r0, #0
    5280:	d060      	beq.n	5344 <processOnSMS+0x8ac>
	{
		savePhaseSequenceProtectionSettings(false);
    5282:	2000      	movs	r0, #0
    5284:	4b2b      	ldr	r3, [pc, #172]	; (5334 <processOnSMS+0x89c>)
    5286:	4798      	blx	r3

		incomingSMSProcessed=true;
    5288:	2328      	movs	r3, #40	; 0x28
    528a:	33ff      	adds	r3, #255	; 0xff
    528c:	2208      	movs	r2, #8
    528e:	4694      	mov	ip, r2
    5290:	44bc      	add	ip, r7
    5292:	4463      	add	r3, ip
    5294:	2201      	movs	r2, #1
    5296:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5298:	4b10      	ldr	r3, [pc, #64]	; (52dc <processOnSMS+0x844>)
    529a:	2294      	movs	r2, #148	; 0x94
    529c:	0052      	lsls	r2, r2, #1
    529e:	4694      	mov	ip, r2
    52a0:	2208      	movs	r2, #8
    52a2:	4690      	mov	r8, r2
    52a4:	44b8      	add	r8, r7
    52a6:	44c4      	add	ip, r8
    52a8:	4463      	add	r3, ip
    52aa:	781b      	ldrb	r3, [r3, #0]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d101      	bne.n	52b4 <processOnSMS+0x81c>
    52b0:	f001 fa51 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"SEQP OFF");
    52b4:	2310      	movs	r3, #16
    52b6:	2208      	movs	r2, #8
    52b8:	4694      	mov	ip, r2
    52ba:	44bc      	add	ip, r7
    52bc:	4463      	add	r3, ip
    52be:	4a20      	ldr	r2, [pc, #128]	; (5340 <processOnSMS+0x8a8>)
    52c0:	ca03      	ldmia	r2!, {r0, r1}
    52c2:	c303      	stmia	r3!, {r0, r1}
    52c4:	7812      	ldrb	r2, [r2, #0]
    52c6:	701a      	strb	r2, [r3, #0]
    52c8:	f001 fa45 	bl	6756 <processOnSMS+0x1cbe>
    52cc:	00018bcc 	.word	0x00018bcc
    52d0:	00003d61 	.word	0x00003d61
    52d4:	000012a1 	.word	0x000012a1
    52d8:	00009ed5 	.word	0x00009ed5
    52dc:	fffffeda 	.word	0xfffffeda
    52e0:	00018bd4 	.word	0x00018bd4
    52e4:	00018be4 	.word	0x00018be4
    52e8:	00018bec 	.word	0x00018bec
    52ec:	00018c00 	.word	0x00018c00
    52f0:	20000618 	.word	0x20000618
    52f4:	00001461 	.word	0x00001461
    52f8:	00018c08 	.word	0x00018c08
    52fc:	00018c18 	.word	0x00018c18
    5300:	00018c20 	.word	0x00018c20
    5304:	00018c34 	.word	0x00018c34
    5308:	000015d1 	.word	0x000015d1
    530c:	00018c3c 	.word	0x00018c3c
    5310:	00018c44 	.word	0x00018c44
    5314:	00018c4c 	.word	0x00018c4c
    5318:	00018c54 	.word	0x00018c54
    531c:	00017b47 	.word	0x00017b47
    5320:	00017893 	.word	0x00017893
    5324:	0001779d 	.word	0x0001779d
    5328:	0000161d 	.word	0x0000161d
    532c:	00018c5c 	.word	0x00018c5c
    5330:	00018c6c 	.word	0x00018c6c
    5334:	00001669 	.word	0x00001669
    5338:	00018c74 	.word	0x00018c74
    533c:	00018c7c 	.word	0x00018c7c
    5340:	00018c84 	.word	0x00018c84
		}
	}
	else if (StringstartsWith(received_command,"DND"))
    5344:	4ad1      	ldr	r2, [pc, #836]	; (568c <processOnSMS+0xbf4>)
    5346:	68fb      	ldr	r3, [r7, #12]
    5348:	0011      	movs	r1, r2
    534a:	0018      	movs	r0, r3
    534c:	4bd0      	ldr	r3, [pc, #832]	; (5690 <processOnSMS+0xbf8>)
    534e:	4798      	blx	r3
    5350:	1e03      	subs	r3, r0, #0
    5352:	d06c      	beq.n	542e <processOnSMS+0x996>
	{
		if (strlen(received_command)>3)
    5354:	68fb      	ldr	r3, [r7, #12]
    5356:	0018      	movs	r0, r3
    5358:	4bce      	ldr	r3, [pc, #824]	; (5694 <processOnSMS+0xbfc>)
    535a:	4798      	blx	r3
    535c:	0003      	movs	r3, r0
    535e:	2b03      	cmp	r3, #3
    5360:	d801      	bhi.n	5366 <processOnSMS+0x8ce>
    5362:	f001 f9f8 	bl	6756 <processOnSMS+0x1cbe>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    5366:	68fb      	ldr	r3, [r7, #12]
    5368:	1cdc      	adds	r4, r3, #3
    536a:	68fb      	ldr	r3, [r7, #12]
    536c:	0018      	movs	r0, r3
    536e:	4bc9      	ldr	r3, [pc, #804]	; (5694 <processOnSMS+0xbfc>)
    5370:	4798      	blx	r3
    5372:	0002      	movs	r2, r0
    5374:	68fb      	ldr	r3, [r7, #12]
    5376:	0021      	movs	r1, r4
    5378:	0018      	movs	r0, r3
    537a:	4bc7      	ldr	r3, [pc, #796]	; (5698 <processOnSMS+0xc00>)
    537c:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
    537e:	68fb      	ldr	r3, [r7, #12]
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	2b4c      	cmp	r3, #76	; 0x4c
    5384:	d009      	beq.n	539a <processOnSMS+0x902>
    5386:	68fb      	ldr	r3, [r7, #12]
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	2b53      	cmp	r3, #83	; 0x53
    538c:	d005      	beq.n	539a <processOnSMS+0x902>
    538e:	68fb      	ldr	r3, [r7, #12]
    5390:	781b      	ldrb	r3, [r3, #0]
    5392:	2b4f      	cmp	r3, #79	; 0x4f
    5394:	d001      	beq.n	539a <processOnSMS+0x902>
    5396:	f001 f9de 	bl	6756 <processOnSMS+0x1cbe>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
    539a:	68fb      	ldr	r3, [r7, #12]
    539c:	b2db      	uxtb	r3, r3
    539e:	0018      	movs	r0, r3
    53a0:	4bbe      	ldr	r3, [pc, #760]	; (569c <processOnSMS+0xc04>)
    53a2:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    53a4:	2328      	movs	r3, #40	; 0x28
    53a6:	33ff      	adds	r3, #255	; 0xff
    53a8:	2208      	movs	r2, #8
    53aa:	4694      	mov	ip, r2
    53ac:	44bc      	add	ip, r7
    53ae:	4463      	add	r3, ip
    53b0:	2201      	movs	r2, #1
    53b2:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    53b4:	4bba      	ldr	r3, [pc, #744]	; (56a0 <processOnSMS+0xc08>)
    53b6:	2294      	movs	r2, #148	; 0x94
    53b8:	0052      	lsls	r2, r2, #1
    53ba:	4694      	mov	ip, r2
    53bc:	2208      	movs	r2, #8
    53be:	4690      	mov	r8, r2
    53c0:	44b8      	add	r8, r7
    53c2:	44c4      	add	ip, r8
    53c4:	4463      	add	r3, ip
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d101      	bne.n	53d0 <processOnSMS+0x938>
    53cc:	f001 f9c3 	bl	6756 <processOnSMS+0x1cbe>
				{
					strcpy(resep_msg,"DND : ");
    53d0:	2310      	movs	r3, #16
    53d2:	2208      	movs	r2, #8
    53d4:	4694      	mov	ip, r2
    53d6:	44bc      	add	ip, r7
    53d8:	4463      	add	r3, ip
    53da:	4ab2      	ldr	r2, [pc, #712]	; (56a4 <processOnSMS+0xc0c>)
    53dc:	6811      	ldr	r1, [r2, #0]
    53de:	6019      	str	r1, [r3, #0]
    53e0:	8891      	ldrh	r1, [r2, #4]
    53e2:	8099      	strh	r1, [r3, #4]
    53e4:	7992      	ldrb	r2, [r2, #6]
    53e6:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
    53e8:	68fa      	ldr	r2, [r7, #12]
    53ea:	2310      	movs	r3, #16
    53ec:	2108      	movs	r1, #8
    53ee:	468c      	mov	ip, r1
    53f0:	44bc      	add	ip, r7
    53f2:	4463      	add	r3, ip
    53f4:	0011      	movs	r1, r2
    53f6:	0018      	movs	r0, r3
    53f8:	4bab      	ldr	r3, [pc, #684]	; (56a8 <processOnSMS+0xc10>)
    53fa:	4798      	blx	r3
					strcat(resep_msg," OK");
    53fc:	2310      	movs	r3, #16
    53fe:	2208      	movs	r2, #8
    5400:	4694      	mov	ip, r2
    5402:	44bc      	add	ip, r7
    5404:	4463      	add	r3, ip
    5406:	0018      	movs	r0, r3
    5408:	4ba2      	ldr	r3, [pc, #648]	; (5694 <processOnSMS+0xbfc>)
    540a:	4798      	blx	r3
    540c:	0003      	movs	r3, r0
    540e:	001a      	movs	r2, r3
    5410:	2310      	movs	r3, #16
    5412:	2108      	movs	r1, #8
    5414:	468c      	mov	ip, r1
    5416:	44bc      	add	ip, r7
    5418:	4463      	add	r3, ip
    541a:	189a      	adds	r2, r3, r2
    541c:	4ba3      	ldr	r3, [pc, #652]	; (56ac <processOnSMS+0xc14>)
    541e:	0010      	movs	r0, r2
    5420:	0019      	movs	r1, r3
    5422:	2304      	movs	r3, #4
    5424:	001a      	movs	r2, r3
    5426:	4ba2      	ldr	r3, [pc, #648]	; (56b0 <processOnSMS+0xc18>)
    5428:	4798      	blx	r3
    542a:	f001 f994 	bl	6756 <processOnSMS+0x1cbe>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
    542e:	4aa1      	ldr	r2, [pc, #644]	; (56b4 <processOnSMS+0xc1c>)
    5430:	68fb      	ldr	r3, [r7, #12]
    5432:	0011      	movs	r1, r2
    5434:	0018      	movs	r0, r3
    5436:	4b96      	ldr	r3, [pc, #600]	; (5690 <processOnSMS+0xbf8>)
    5438:	4798      	blx	r3
    543a:	1e03      	subs	r3, r0, #0
    543c:	d06c      	beq.n	5518 <processOnSMS+0xa80>
	{
		if (strlen(received_command)>4)
    543e:	68fb      	ldr	r3, [r7, #12]
    5440:	0018      	movs	r0, r3
    5442:	4b94      	ldr	r3, [pc, #592]	; (5694 <processOnSMS+0xbfc>)
    5444:	4798      	blx	r3
    5446:	0003      	movs	r3, r0
    5448:	2b04      	cmp	r3, #4
    544a:	d801      	bhi.n	5450 <processOnSMS+0x9b8>
    544c:	f001 f983 	bl	6756 <processOnSMS+0x1cbe>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	1d1c      	adds	r4, r3, #4
    5454:	68fb      	ldr	r3, [r7, #12]
    5456:	0018      	movs	r0, r3
    5458:	4b8e      	ldr	r3, [pc, #568]	; (5694 <processOnSMS+0xbfc>)
    545a:	4798      	blx	r3
    545c:	0002      	movs	r2, r0
    545e:	68fb      	ldr	r3, [r7, #12]
    5460:	0021      	movs	r1, r4
    5462:	0018      	movs	r0, r3
    5464:	4b8c      	ldr	r3, [pc, #560]	; (5698 <processOnSMS+0xc00>)
    5466:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
    5468:	68fb      	ldr	r3, [r7, #12]
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	2b43      	cmp	r3, #67	; 0x43
    546e:	d00d      	beq.n	548c <processOnSMS+0x9f4>
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	781b      	ldrb	r3, [r3, #0]
    5474:	2b41      	cmp	r3, #65	; 0x41
    5476:	d009      	beq.n	548c <processOnSMS+0x9f4>
    5478:	68fb      	ldr	r3, [r7, #12]
    547a:	781b      	ldrb	r3, [r3, #0]
    547c:	2b54      	cmp	r3, #84	; 0x54
    547e:	d005      	beq.n	548c <processOnSMS+0x9f4>
    5480:	68fb      	ldr	r3, [r7, #12]
    5482:	781b      	ldrb	r3, [r3, #0]
    5484:	2b4e      	cmp	r3, #78	; 0x4e
    5486:	d001      	beq.n	548c <processOnSMS+0x9f4>
    5488:	f001 f965 	bl	6756 <processOnSMS+0x1cbe>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	b2db      	uxtb	r3, r3
    5490:	0018      	movs	r0, r3
    5492:	4b89      	ldr	r3, [pc, #548]	; (56b8 <processOnSMS+0xc20>)
    5494:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    5496:	2328      	movs	r3, #40	; 0x28
    5498:	33ff      	adds	r3, #255	; 0xff
    549a:	2208      	movs	r2, #8
    549c:	4694      	mov	ip, r2
    549e:	44bc      	add	ip, r7
    54a0:	4463      	add	r3, ip
    54a2:	2201      	movs	r2, #1
    54a4:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    54a6:	4b7e      	ldr	r3, [pc, #504]	; (56a0 <processOnSMS+0xc08>)
    54a8:	2294      	movs	r2, #148	; 0x94
    54aa:	0052      	lsls	r2, r2, #1
    54ac:	4694      	mov	ip, r2
    54ae:	2208      	movs	r2, #8
    54b0:	4690      	mov	r8, r2
    54b2:	44b8      	add	r8, r7
    54b4:	44c4      	add	ip, r8
    54b6:	4463      	add	r3, ip
    54b8:	781b      	ldrb	r3, [r3, #0]
    54ba:	2b00      	cmp	r3, #0
    54bc:	d101      	bne.n	54c2 <processOnSMS+0xa2a>
    54be:	f001 f94a 	bl	6756 <processOnSMS+0x1cbe>
				{
					strcpy(resep_msg,"RESP : ");
    54c2:	2310      	movs	r3, #16
    54c4:	2208      	movs	r2, #8
    54c6:	4694      	mov	ip, r2
    54c8:	44bc      	add	ip, r7
    54ca:	4463      	add	r3, ip
    54cc:	4a7b      	ldr	r2, [pc, #492]	; (56bc <processOnSMS+0xc24>)
    54ce:	ca03      	ldmia	r2!, {r0, r1}
    54d0:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
    54d2:	68fa      	ldr	r2, [r7, #12]
    54d4:	2310      	movs	r3, #16
    54d6:	2108      	movs	r1, #8
    54d8:	468c      	mov	ip, r1
    54da:	44bc      	add	ip, r7
    54dc:	4463      	add	r3, ip
    54de:	0011      	movs	r1, r2
    54e0:	0018      	movs	r0, r3
    54e2:	4b71      	ldr	r3, [pc, #452]	; (56a8 <processOnSMS+0xc10>)
    54e4:	4798      	blx	r3
					strcat(resep_msg," OK");
    54e6:	2310      	movs	r3, #16
    54e8:	2208      	movs	r2, #8
    54ea:	4694      	mov	ip, r2
    54ec:	44bc      	add	ip, r7
    54ee:	4463      	add	r3, ip
    54f0:	0018      	movs	r0, r3
    54f2:	4b68      	ldr	r3, [pc, #416]	; (5694 <processOnSMS+0xbfc>)
    54f4:	4798      	blx	r3
    54f6:	0003      	movs	r3, r0
    54f8:	001a      	movs	r2, r3
    54fa:	2310      	movs	r3, #16
    54fc:	2108      	movs	r1, #8
    54fe:	468c      	mov	ip, r1
    5500:	44bc      	add	ip, r7
    5502:	4463      	add	r3, ip
    5504:	189a      	adds	r2, r3, r2
    5506:	4b69      	ldr	r3, [pc, #420]	; (56ac <processOnSMS+0xc14>)
    5508:	0010      	movs	r0, r2
    550a:	0019      	movs	r1, r3
    550c:	2304      	movs	r3, #4
    550e:	001a      	movs	r2, r3
    5510:	4b67      	ldr	r3, [pc, #412]	; (56b0 <processOnSMS+0xc18>)
    5512:	4798      	blx	r3
    5514:	f001 f91f 	bl	6756 <processOnSMS+0x1cbe>
	}
	//else if (StringstartsWith(received_command,"SJMP"))
	//{
	//strcpy(resep_msg,"New hardware does not required Jumper Setting");
	//}
	else if (StringstartsWith(received_command,"OVR"))
    5518:	4a69      	ldr	r2, [pc, #420]	; (56c0 <processOnSMS+0xc28>)
    551a:	68fb      	ldr	r3, [r7, #12]
    551c:	0011      	movs	r1, r2
    551e:	0018      	movs	r0, r3
    5520:	4b5b      	ldr	r3, [pc, #364]	; (5690 <processOnSMS+0xbf8>)
    5522:	4798      	blx	r3
    5524:	1e03      	subs	r3, r0, #0
    5526:	d050      	beq.n	55ca <processOnSMS+0xb32>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    5528:	68fb      	ldr	r3, [r7, #12]
    552a:	1cdc      	adds	r4, r3, #3
    552c:	68fb      	ldr	r3, [r7, #12]
    552e:	0018      	movs	r0, r3
    5530:	4b58      	ldr	r3, [pc, #352]	; (5694 <processOnSMS+0xbfc>)
    5532:	4798      	blx	r3
    5534:	0002      	movs	r2, r0
    5536:	68fb      	ldr	r3, [r7, #12]
    5538:	0021      	movs	r1, r4
    553a:	0018      	movs	r0, r3
    553c:	4b56      	ldr	r3, [pc, #344]	; (5698 <processOnSMS+0xc00>)
    553e:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	0018      	movs	r0, r3
    5544:	4b5f      	ldr	r3, [pc, #380]	; (56c4 <processOnSMS+0xc2c>)
    5546:	4798      	blx	r3
    5548:	0002      	movs	r2, r0
    554a:	238d      	movs	r3, #141	; 0x8d
    554c:	005b      	lsls	r3, r3, #1
    554e:	2108      	movs	r1, #8
    5550:	468c      	mov	ip, r1
    5552:	44bc      	add	ip, r7
    5554:	4463      	add	r3, ip
    5556:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
    5558:	238d      	movs	r3, #141	; 0x8d
    555a:	005b      	lsls	r3, r3, #1
    555c:	2208      	movs	r2, #8
    555e:	4694      	mov	ip, r2
    5560:	44bc      	add	ip, r7
    5562:	4463      	add	r3, ip
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	2b68      	cmp	r3, #104	; 0x68
    5568:	d801      	bhi.n	556e <processOnSMS+0xad6>
    556a:	f001 f8f4 	bl	6756 <processOnSMS+0x1cbe>
		{
			setOverloadPer(ovr_per);
    556e:	238d      	movs	r3, #141	; 0x8d
    5570:	005b      	lsls	r3, r3, #1
    5572:	2208      	movs	r2, #8
    5574:	4694      	mov	ip, r2
    5576:	44bc      	add	ip, r7
    5578:	4463      	add	r3, ip
    557a:	781b      	ldrb	r3, [r3, #0]
    557c:	0018      	movs	r0, r3
    557e:	4b52      	ldr	r3, [pc, #328]	; (56c8 <processOnSMS+0xc30>)
    5580:	4798      	blx	r3
			incomingSMSProcessed=true;
    5582:	2328      	movs	r3, #40	; 0x28
    5584:	33ff      	adds	r3, #255	; 0xff
    5586:	2208      	movs	r2, #8
    5588:	4694      	mov	ip, r2
    558a:	44bc      	add	ip, r7
    558c:	4463      	add	r3, ip
    558e:	2201      	movs	r2, #1
    5590:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    5592:	4b43      	ldr	r3, [pc, #268]	; (56a0 <processOnSMS+0xc08>)
    5594:	2294      	movs	r2, #148	; 0x94
    5596:	0052      	lsls	r2, r2, #1
    5598:	4694      	mov	ip, r2
    559a:	2208      	movs	r2, #8
    559c:	4690      	mov	r8, r2
    559e:	44b8      	add	r8, r7
    55a0:	44c4      	add	ip, r8
    55a2:	4463      	add	r3, ip
    55a4:	781b      	ldrb	r3, [r3, #0]
    55a6:	2b00      	cmp	r3, #0
    55a8:	d101      	bne.n	55ae <processOnSMS+0xb16>
    55aa:	f001 f8d4 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"OVR SET OK");
    55ae:	2310      	movs	r3, #16
    55b0:	2208      	movs	r2, #8
    55b2:	4694      	mov	ip, r2
    55b4:	44bc      	add	ip, r7
    55b6:	4463      	add	r3, ip
    55b8:	4a44      	ldr	r2, [pc, #272]	; (56cc <processOnSMS+0xc34>)
    55ba:	ca03      	ldmia	r2!, {r0, r1}
    55bc:	c303      	stmia	r3!, {r0, r1}
    55be:	8811      	ldrh	r1, [r2, #0]
    55c0:	8019      	strh	r1, [r3, #0]
    55c2:	7892      	ldrb	r2, [r2, #2]
    55c4:	709a      	strb	r2, [r3, #2]
    55c6:	f001 f8c6 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
    55ca:	4a41      	ldr	r2, [pc, #260]	; (56d0 <processOnSMS+0xc38>)
    55cc:	68fb      	ldr	r3, [r7, #12]
    55ce:	0011      	movs	r1, r2
    55d0:	0018      	movs	r0, r3
    55d2:	4b2f      	ldr	r3, [pc, #188]	; (5690 <processOnSMS+0xbf8>)
    55d4:	4798      	blx	r3
    55d6:	1e03      	subs	r3, r0, #0
    55d8:	d100      	bne.n	55dc <processOnSMS+0xb44>
    55da:	e07f      	b.n	56dc <processOnSMS+0xc44>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    55dc:	68fb      	ldr	r3, [r7, #12]
    55de:	1d1c      	adds	r4, r3, #4
    55e0:	68fb      	ldr	r3, [r7, #12]
    55e2:	0018      	movs	r0, r3
    55e4:	4b2b      	ldr	r3, [pc, #172]	; (5694 <processOnSMS+0xbfc>)
    55e6:	4798      	blx	r3
    55e8:	0002      	movs	r2, r0
    55ea:	68fb      	ldr	r3, [r7, #12]
    55ec:	0021      	movs	r1, r4
    55ee:	0018      	movs	r0, r3
    55f0:	4b29      	ldr	r3, [pc, #164]	; (5698 <processOnSMS+0xc00>)
    55f2:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
    55f4:	68fb      	ldr	r3, [r7, #12]
    55f6:	0018      	movs	r0, r3
    55f8:	4b32      	ldr	r3, [pc, #200]	; (56c4 <processOnSMS+0xc2c>)
    55fa:	4798      	blx	r3
    55fc:	0002      	movs	r2, r0
    55fe:	231a      	movs	r3, #26
    5600:	33ff      	adds	r3, #255	; 0xff
    5602:	2108      	movs	r1, #8
    5604:	468c      	mov	ip, r1
    5606:	44bc      	add	ip, r7
    5608:	4463      	add	r3, ip
    560a:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
    560c:	231a      	movs	r3, #26
    560e:	33ff      	adds	r3, #255	; 0xff
    5610:	2208      	movs	r2, #8
    5612:	4694      	mov	ip, r2
    5614:	44bc      	add	ip, r7
    5616:	4463      	add	r3, ip
    5618:	781b      	ldrb	r3, [r3, #0]
    561a:	2b61      	cmp	r3, #97	; 0x61
    561c:	d901      	bls.n	5622 <processOnSMS+0xb8a>
    561e:	f001 f89a 	bl	6756 <processOnSMS+0x1cbe>
    5622:	231a      	movs	r3, #26
    5624:	33ff      	adds	r3, #255	; 0xff
    5626:	2208      	movs	r2, #8
    5628:	4694      	mov	ip, r2
    562a:	44bc      	add	ip, r7
    562c:	4463      	add	r3, ip
    562e:	781b      	ldrb	r3, [r3, #0]
    5630:	2b00      	cmp	r3, #0
    5632:	d101      	bne.n	5638 <processOnSMS+0xba0>
    5634:	f001 f88f 	bl	6756 <processOnSMS+0x1cbe>
		{

			setUnderloadPer(undr_per);
    5638:	231a      	movs	r3, #26
    563a:	33ff      	adds	r3, #255	; 0xff
    563c:	2208      	movs	r2, #8
    563e:	4694      	mov	ip, r2
    5640:	44bc      	add	ip, r7
    5642:	4463      	add	r3, ip
    5644:	781b      	ldrb	r3, [r3, #0]
    5646:	0018      	movs	r0, r3
    5648:	4b22      	ldr	r3, [pc, #136]	; (56d4 <processOnSMS+0xc3c>)
    564a:	4798      	blx	r3

			incomingSMSProcessed=true;
    564c:	2328      	movs	r3, #40	; 0x28
    564e:	33ff      	adds	r3, #255	; 0xff
    5650:	2208      	movs	r2, #8
    5652:	4694      	mov	ip, r2
    5654:	44bc      	add	ip, r7
    5656:	4463      	add	r3, ip
    5658:	2201      	movs	r2, #1
    565a:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    565c:	4b10      	ldr	r3, [pc, #64]	; (56a0 <processOnSMS+0xc08>)
    565e:	2294      	movs	r2, #148	; 0x94
    5660:	0052      	lsls	r2, r2, #1
    5662:	4694      	mov	ip, r2
    5664:	2208      	movs	r2, #8
    5666:	4690      	mov	r8, r2
    5668:	44b8      	add	r8, r7
    566a:	44c4      	add	ip, r8
    566c:	4463      	add	r3, ip
    566e:	781b      	ldrb	r3, [r3, #0]
    5670:	2b00      	cmp	r3, #0
    5672:	d101      	bne.n	5678 <processOnSMS+0xbe0>
    5674:	f001 f86f 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"UNDR SET OK");
    5678:	2310      	movs	r3, #16
    567a:	2208      	movs	r2, #8
    567c:	4694      	mov	ip, r2
    567e:	44bc      	add	ip, r7
    5680:	4463      	add	r3, ip
    5682:	4a15      	ldr	r2, [pc, #84]	; (56d8 <processOnSMS+0xc40>)
    5684:	ca13      	ldmia	r2!, {r0, r1, r4}
    5686:	c313      	stmia	r3!, {r0, r1, r4}
    5688:	f001 f865 	bl	6756 <processOnSMS+0x1cbe>
    568c:	00018c90 	.word	0x00018c90
    5690:	00003d61 	.word	0x00003d61
    5694:	00017b47 	.word	0x00017b47
    5698:	00017893 	.word	0x00017893
    569c:	00001339 	.word	0x00001339
    56a0:	fffffeda 	.word	0xfffffeda
    56a4:	00018c94 	.word	0x00018c94
    56a8:	00017b01 	.word	0x00017b01
    56ac:	00018c9c 	.word	0x00018c9c
    56b0:	00017881 	.word	0x00017881
    56b4:	00018ca0 	.word	0x00018ca0
    56b8:	00001385 	.word	0x00001385
    56bc:	00018ca8 	.word	0x00018ca8
    56c0:	00018cb0 	.word	0x00018cb0
    56c4:	0001779d 	.word	0x0001779d
    56c8:	000014f9 	.word	0x000014f9
    56cc:	00018cb4 	.word	0x00018cb4
    56d0:	00018cc0 	.word	0x00018cc0
    56d4:	00001561 	.word	0x00001561
    56d8:	00018cc8 	.word	0x00018cc8
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
    56dc:	4ae4      	ldr	r2, [pc, #912]	; (5a70 <processOnSMS+0xfd8>)
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	0011      	movs	r1, r2
    56e2:	0018      	movs	r0, r3
    56e4:	4be3      	ldr	r3, [pc, #908]	; (5a74 <processOnSMS+0xfdc>)
    56e6:	4798      	blx	r3
    56e8:	1e03      	subs	r3, r0, #0
    56ea:	d040      	beq.n	576e <processOnSMS+0xcd6>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
    56ec:	4be2      	ldr	r3, [pc, #904]	; (5a78 <processOnSMS+0xfe0>)
    56ee:	785b      	ldrb	r3, [r3, #1]
    56f0:	2b00      	cmp	r3, #0
    56f2:	d101      	bne.n	56f8 <processOnSMS+0xc60>
    56f4:	f001 f82f 	bl	6756 <processOnSMS+0x1cbe>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
    56f8:	4be0      	ldr	r3, [pc, #896]	; (5a7c <processOnSMS+0xfe4>)
    56fa:	8a9b      	ldrh	r3, [r3, #20]
    56fc:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    56fe:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
    5700:	4bde      	ldr	r3, [pc, #888]	; (5a7c <processOnSMS+0xfe4>)
    5702:	8adb      	ldrh	r3, [r3, #22]
    5704:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    5706:	603b      	str	r3, [r7, #0]
    5708:	4bdd      	ldr	r3, [pc, #884]	; (5a80 <processOnSMS+0xfe8>)
    570a:	691a      	ldr	r2, [r3, #16]
    570c:	4bdc      	ldr	r3, [pc, #880]	; (5a80 <processOnSMS+0xfe8>)
    570e:	6959      	ldr	r1, [r3, #20]
    5710:	4bdb      	ldr	r3, [pc, #876]	; (5a80 <processOnSMS+0xfe8>)
    5712:	699b      	ldr	r3, [r3, #24]
    5714:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
    5716:	48da      	ldr	r0, [pc, #872]	; (5a80 <processOnSMS+0xfe8>)
    5718:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    571a:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
    571c:	48d8      	ldr	r0, [pc, #864]	; (5a80 <processOnSMS+0xfe8>)
    571e:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    5720:	0006      	movs	r6, r0
    5722:	4cd8      	ldr	r4, [pc, #864]	; (5a84 <processOnSMS+0xfec>)
    5724:	2010      	movs	r0, #16
    5726:	2308      	movs	r3, #8
    5728:	469c      	mov	ip, r3
    572a:	44bc      	add	ip, r7
    572c:	4460      	add	r0, ip
    572e:	9604      	str	r6, [sp, #16]
    5730:	9503      	str	r5, [sp, #12]
    5732:	4643      	mov	r3, r8
    5734:	9302      	str	r3, [sp, #8]
    5736:	9101      	str	r1, [sp, #4]
    5738:	9200      	str	r2, [sp, #0]
    573a:	683b      	ldr	r3, [r7, #0]
    573c:	687a      	ldr	r2, [r7, #4]
    573e:	0021      	movs	r1, r4
    5740:	4cd1      	ldr	r4, [pc, #836]	; (5a88 <processOnSMS+0xff0>)
    5742:	47a0      	blx	r4
			response_sms_processed_cmd = true;
    5744:	4bd1      	ldr	r3, [pc, #836]	; (5a8c <processOnSMS+0xff4>)
    5746:	2294      	movs	r2, #148	; 0x94
    5748:	0052      	lsls	r2, r2, #1
    574a:	4694      	mov	ip, r2
    574c:	2208      	movs	r2, #8
    574e:	4690      	mov	r8, r2
    5750:	44b8      	add	r8, r7
    5752:	44c4      	add	ip, r8
    5754:	4463      	add	r3, ip
    5756:	2201      	movs	r2, #1
    5758:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
    575a:	2328      	movs	r3, #40	; 0x28
    575c:	33ff      	adds	r3, #255	; 0xff
    575e:	2208      	movs	r2, #8
    5760:	4694      	mov	ip, r2
    5762:	44bc      	add	ip, r7
    5764:	4463      	add	r3, ip
    5766:	2201      	movs	r2, #1
    5768:	701a      	strb	r2, [r3, #0]
    576a:	f000 fff4 	bl	6756 <processOnSMS+0x1cbe>

		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
    576e:	4ac8      	ldr	r2, [pc, #800]	; (5a90 <processOnSMS+0xff8>)
    5770:	68fb      	ldr	r3, [r7, #12]
    5772:	0011      	movs	r1, r2
    5774:	0018      	movs	r0, r3
    5776:	4bbf      	ldr	r3, [pc, #764]	; (5a74 <processOnSMS+0xfdc>)
    5778:	4798      	blx	r3
    577a:	1e03      	subs	r3, r0, #0
    577c:	d032      	beq.n	57e4 <processOnSMS+0xd4c>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    577e:	4bbe      	ldr	r3, [pc, #760]	; (5a78 <processOnSMS+0xfe0>)
    5780:	795b      	ldrb	r3, [r3, #5]
    5782:	2b00      	cmp	r3, #0
    5784:	d101      	bne.n	578a <processOnSMS+0xcf2>
    5786:	f000 ffe6 	bl	6756 <processOnSMS+0x1cbe>
    578a:	4bbb      	ldr	r3, [pc, #748]	; (5a78 <processOnSMS+0xfe0>)
    578c:	78db      	ldrb	r3, [r3, #3]
    578e:	2b00      	cmp	r3, #0
    5790:	d001      	beq.n	5796 <processOnSMS+0xcfe>
    5792:	f000 ffe0 	bl	6756 <processOnSMS+0x1cbe>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
    5796:	2001      	movs	r0, #1
    5798:	4bbe      	ldr	r3, [pc, #760]	; (5a94 <processOnSMS+0xffc>)
    579a:	4798      	blx	r3
			
			incomingSMSProcessed=true;
    579c:	2328      	movs	r3, #40	; 0x28
    579e:	33ff      	adds	r3, #255	; 0xff
    57a0:	2208      	movs	r2, #8
    57a2:	4694      	mov	ip, r2
    57a4:	44bc      	add	ip, r7
    57a6:	4463      	add	r3, ip
    57a8:	2201      	movs	r2, #1
    57aa:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
    57ac:	4bb7      	ldr	r3, [pc, #732]	; (5a8c <processOnSMS+0xff4>)
    57ae:	2294      	movs	r2, #148	; 0x94
    57b0:	0052      	lsls	r2, r2, #1
    57b2:	4694      	mov	ip, r2
    57b4:	2208      	movs	r2, #8
    57b6:	4690      	mov	r8, r2
    57b8:	44b8      	add	r8, r7
    57ba:	44c4      	add	ip, r8
    57bc:	4463      	add	r3, ip
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	2b00      	cmp	r3, #0
    57c2:	d101      	bne.n	57c8 <processOnSMS+0xd30>
    57c4:	f000 ffc7 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
    57c8:	2310      	movs	r3, #16
    57ca:	2208      	movs	r2, #8
    57cc:	4694      	mov	ip, r2
    57ce:	44bc      	add	ip, r7
    57d0:	4463      	add	r3, ip
    57d2:	4ab1      	ldr	r2, [pc, #708]	; (5a98 <processOnSMS+0x1000>)
    57d4:	ca13      	ldmia	r2!, {r0, r1, r4}
    57d6:	c313      	stmia	r3!, {r0, r1, r4}
    57d8:	ca13      	ldmia	r2!, {r0, r1, r4}
    57da:	c313      	stmia	r3!, {r0, r1, r4}
    57dc:	6812      	ldr	r2, [r2, #0]
    57de:	601a      	str	r2, [r3, #0]
    57e0:	f000 ffb9 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
    57e4:	4aad      	ldr	r2, [pc, #692]	; (5a9c <processOnSMS+0x1004>)
    57e6:	68fb      	ldr	r3, [r7, #12]
    57e8:	0011      	movs	r1, r2
    57ea:	0018      	movs	r0, r3
    57ec:	4ba1      	ldr	r3, [pc, #644]	; (5a74 <processOnSMS+0xfdc>)
    57ee:	4798      	blx	r3
    57f0:	1e03      	subs	r3, r0, #0
    57f2:	d034      	beq.n	585e <processOnSMS+0xdc6>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    57f4:	4ba0      	ldr	r3, [pc, #640]	; (5a78 <processOnSMS+0xfe0>)
    57f6:	795b      	ldrb	r3, [r3, #5]
    57f8:	2b00      	cmp	r3, #0
    57fa:	d101      	bne.n	5800 <processOnSMS+0xd68>
    57fc:	f000 ffab 	bl	6756 <processOnSMS+0x1cbe>
    5800:	4b9d      	ldr	r3, [pc, #628]	; (5a78 <processOnSMS+0xfe0>)
    5802:	78db      	ldrb	r3, [r3, #3]
    5804:	2b00      	cmp	r3, #0
    5806:	d001      	beq.n	580c <processOnSMS+0xd74>
    5808:	f000 ffa5 	bl	6756 <processOnSMS+0x1cbe>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
    580c:	2000      	movs	r0, #0
    580e:	4ba1      	ldr	r3, [pc, #644]	; (5a94 <processOnSMS+0xffc>)
    5810:	4798      	blx	r3

			incomingSMSProcessed=true;
    5812:	2328      	movs	r3, #40	; 0x28
    5814:	33ff      	adds	r3, #255	; 0xff
    5816:	2208      	movs	r2, #8
    5818:	4694      	mov	ip, r2
    581a:	44bc      	add	ip, r7
    581c:	4463      	add	r3, ip
    581e:	2201      	movs	r2, #1
    5820:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
    5822:	4b9a      	ldr	r3, [pc, #616]	; (5a8c <processOnSMS+0xff4>)
    5824:	2294      	movs	r2, #148	; 0x94
    5826:	0052      	lsls	r2, r2, #1
    5828:	4694      	mov	ip, r2
    582a:	2208      	movs	r2, #8
    582c:	4690      	mov	r8, r2
    582e:	44b8      	add	r8, r7
    5830:	44c4      	add	ip, r8
    5832:	4463      	add	r3, ip
    5834:	781b      	ldrb	r3, [r3, #0]
    5836:	2b00      	cmp	r3, #0
    5838:	d101      	bne.n	583e <processOnSMS+0xda6>
    583a:	f000 ff8c 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
    583e:	2310      	movs	r3, #16
    5840:	2208      	movs	r2, #8
    5842:	4694      	mov	ip, r2
    5844:	44bc      	add	ip, r7
    5846:	4463      	add	r3, ip
    5848:	4a95      	ldr	r2, [pc, #596]	; (5aa0 <processOnSMS+0x1008>)
    584a:	ca13      	ldmia	r2!, {r0, r1, r4}
    584c:	c313      	stmia	r3!, {r0, r1, r4}
    584e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5850:	c313      	stmia	r3!, {r0, r1, r4}
    5852:	6811      	ldr	r1, [r2, #0]
    5854:	6019      	str	r1, [r3, #0]
    5856:	7912      	ldrb	r2, [r2, #4]
    5858:	711a      	strb	r2, [r3, #4]
    585a:	f000 ff7c 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
    585e:	4a91      	ldr	r2, [pc, #580]	; (5aa4 <processOnSMS+0x100c>)
    5860:	68fb      	ldr	r3, [r7, #12]
    5862:	0011      	movs	r1, r2
    5864:	0018      	movs	r0, r3
    5866:	4b83      	ldr	r3, [pc, #524]	; (5a74 <processOnSMS+0xfdc>)
    5868:	4798      	blx	r3
    586a:	1e03      	subs	r3, r0, #0
    586c:	d05c      	beq.n	5928 <processOnSMS+0xe90>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    586e:	4b82      	ldr	r3, [pc, #520]	; (5a78 <processOnSMS+0xfe0>)
    5870:	78db      	ldrb	r3, [r3, #3]
    5872:	2b00      	cmp	r3, #0
    5874:	d101      	bne.n	587a <processOnSMS+0xde2>
    5876:	f000 ff6e 	bl	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    587a:	2328      	movs	r3, #40	; 0x28
    587c:	33ff      	adds	r3, #255	; 0xff
    587e:	2208      	movs	r2, #8
    5880:	4694      	mov	ip, r2
    5882:	44bc      	add	ip, r7
    5884:	4463      	add	r3, ip
    5886:	2201      	movs	r2, #1
    5888:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
    588a:	4b87      	ldr	r3, [pc, #540]	; (5aa8 <processOnSMS+0x1010>)
    588c:	78db      	ldrb	r3, [r3, #3]
    588e:	2b00      	cmp	r3, #0
    5890:	d02f      	beq.n	58f2 <processOnSMS+0xe5a>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
    5892:	4b85      	ldr	r3, [pc, #532]	; (5aa8 <processOnSMS+0x1010>)
    5894:	791b      	ldrb	r3, [r3, #4]
    5896:	2b00      	cmp	r3, #0
    5898:	d10e      	bne.n	58b8 <processOnSMS+0xe20>
				{
					response_sms_processed_cmd = false;
    589a:	4b7c      	ldr	r3, [pc, #496]	; (5a8c <processOnSMS+0xff4>)
    589c:	2294      	movs	r2, #148	; 0x94
    589e:	0052      	lsls	r2, r2, #1
    58a0:	4694      	mov	ip, r2
    58a2:	2208      	movs	r2, #8
    58a4:	4690      	mov	r8, r2
    58a6:	44b8      	add	r8, r7
    58a8:	44c4      	add	ip, r8
    58aa:	4463      	add	r3, ip
    58ac:	2200      	movs	r2, #0
    58ae:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
    58b0:	4b7e      	ldr	r3, [pc, #504]	; (5aac <processOnSMS+0x1014>)
    58b2:	4798      	blx	r3
    58b4:	f000 ff4f 	bl	6756 <processOnSMS+0x1cbe>
				}
				else
				{
					response_sms_processed_cmd = true;
    58b8:	4b74      	ldr	r3, [pc, #464]	; (5a8c <processOnSMS+0xff4>)
    58ba:	2294      	movs	r2, #148	; 0x94
    58bc:	0052      	lsls	r2, r2, #1
    58be:	4694      	mov	ip, r2
    58c0:	2208      	movs	r2, #8
    58c2:	4690      	mov	r8, r2
    58c4:	44b8      	add	r8, r7
    58c6:	44c4      	add	ip, r8
    58c8:	4463      	add	r3, ip
    58ca:	2201      	movs	r2, #1
    58cc:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
    58ce:	2310      	movs	r3, #16
    58d0:	2208      	movs	r2, #8
    58d2:	4694      	mov	ip, r2
    58d4:	44bc      	add	ip, r7
    58d6:	4463      	add	r3, ip
    58d8:	4a75      	ldr	r2, [pc, #468]	; (5ab0 <processOnSMS+0x1018>)
    58da:	ca13      	ldmia	r2!, {r0, r1, r4}
    58dc:	c313      	stmia	r3!, {r0, r1, r4}
    58de:	ca13      	ldmia	r2!, {r0, r1, r4}
    58e0:	c313      	stmia	r3!, {r0, r1, r4}
    58e2:	ca13      	ldmia	r2!, {r0, r1, r4}
    58e4:	c313      	stmia	r3!, {r0, r1, r4}
    58e6:	ca03      	ldmia	r2!, {r0, r1}
    58e8:	c303      	stmia	r3!, {r0, r1}
    58ea:	8812      	ldrh	r2, [r2, #0]
    58ec:	801a      	strh	r2, [r3, #0]
    58ee:	f000 ff32 	bl	6756 <processOnSMS+0x1cbe>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
    58f2:	4b66      	ldr	r3, [pc, #408]	; (5a8c <processOnSMS+0xff4>)
    58f4:	2294      	movs	r2, #148	; 0x94
    58f6:	0052      	lsls	r2, r2, #1
    58f8:	4694      	mov	ip, r2
    58fa:	2208      	movs	r2, #8
    58fc:	4690      	mov	r8, r2
    58fe:	44b8      	add	r8, r7
    5900:	44c4      	add	ip, r8
    5902:	4463      	add	r3, ip
    5904:	2201      	movs	r2, #1
    5906:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
    5908:	2310      	movs	r3, #16
    590a:	2208      	movs	r2, #8
    590c:	4694      	mov	ip, r2
    590e:	44bc      	add	ip, r7
    5910:	4463      	add	r3, ip
    5912:	4a68      	ldr	r2, [pc, #416]	; (5ab4 <processOnSMS+0x101c>)
    5914:	ca13      	ldmia	r2!, {r0, r1, r4}
    5916:	c313      	stmia	r3!, {r0, r1, r4}
    5918:	ca13      	ldmia	r2!, {r0, r1, r4}
    591a:	c313      	stmia	r3!, {r0, r1, r4}
    591c:	ca13      	ldmia	r2!, {r0, r1, r4}
    591e:	c313      	stmia	r3!, {r0, r1, r4}
    5920:	7812      	ldrb	r2, [r2, #0]
    5922:	701a      	strb	r2, [r3, #0]
    5924:	f000 ff17 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
    5928:	4a63      	ldr	r2, [pc, #396]	; (5ab8 <processOnSMS+0x1020>)
    592a:	68fb      	ldr	r3, [r7, #12]
    592c:	0011      	movs	r1, r2
    592e:	0018      	movs	r0, r3
    5930:	4b50      	ldr	r3, [pc, #320]	; (5a74 <processOnSMS+0xfdc>)
    5932:	4798      	blx	r3
    5934:	1e03      	subs	r3, r0, #0
    5936:	d02a      	beq.n	598e <processOnSMS+0xef6>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    5938:	4b4f      	ldr	r3, [pc, #316]	; (5a78 <processOnSMS+0xfe0>)
    593a:	78db      	ldrb	r3, [r3, #3]
    593c:	2b00      	cmp	r3, #0
    593e:	d101      	bne.n	5944 <processOnSMS+0xeac>
    5940:	f000 ff09 	bl	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    5944:	2328      	movs	r3, #40	; 0x28
    5946:	33ff      	adds	r3, #255	; 0xff
    5948:	2208      	movs	r2, #8
    594a:	4694      	mov	ip, r2
    594c:	44bc      	add	ip, r7
    594e:	4463      	add	r3, ip
    5950:	2201      	movs	r2, #1
    5952:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
    5954:	2000      	movs	r0, #0
    5956:	4b59      	ldr	r3, [pc, #356]	; (5abc <processOnSMS+0x1024>)
    5958:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    595a:	4b4c      	ldr	r3, [pc, #304]	; (5a8c <processOnSMS+0xff4>)
    595c:	2294      	movs	r2, #148	; 0x94
    595e:	0052      	lsls	r2, r2, #1
    5960:	4694      	mov	ip, r2
    5962:	2208      	movs	r2, #8
    5964:	4690      	mov	r8, r2
    5966:	44b8      	add	r8, r7
    5968:	44c4      	add	ip, r8
    596a:	4463      	add	r3, ip
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	2b00      	cmp	r3, #0
    5970:	d101      	bne.n	5976 <processOnSMS+0xede>
    5972:	f000 fef0 	bl	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
    5976:	2310      	movs	r3, #16
    5978:	2208      	movs	r2, #8
    597a:	4694      	mov	ip, r2
    597c:	44bc      	add	ip, r7
    597e:	4463      	add	r3, ip
    5980:	4a4f      	ldr	r2, [pc, #316]	; (5ac0 <processOnSMS+0x1028>)
    5982:	ca13      	ldmia	r2!, {r0, r1, r4}
    5984:	c313      	stmia	r3!, {r0, r1, r4}
    5986:	6812      	ldr	r2, [r2, #0]
    5988:	601a      	str	r2, [r3, #0]
    598a:	f000 fee4 	bl	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
    598e:	4a4d      	ldr	r2, [pc, #308]	; (5ac4 <processOnSMS+0x102c>)
    5990:	68fb      	ldr	r3, [r7, #12]
    5992:	0011      	movs	r1, r2
    5994:	0018      	movs	r0, r3
    5996:	4b37      	ldr	r3, [pc, #220]	; (5a74 <processOnSMS+0xfdc>)
    5998:	4798      	blx	r3
    599a:	1e03      	subs	r3, r0, #0
    599c:	d01c      	beq.n	59d8 <processOnSMS+0xf40>
	{
		incomingSMSProcessed=true;
    599e:	2328      	movs	r3, #40	; 0x28
    59a0:	33ff      	adds	r3, #255	; 0xff
    59a2:	2208      	movs	r2, #8
    59a4:	4694      	mov	ip, r2
    59a6:	44bc      	add	ip, r7
    59a8:	4463      	add	r3, ip
    59aa:	2201      	movs	r2, #1
    59ac:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
    59ae:	4b37      	ldr	r3, [pc, #220]	; (5a8c <processOnSMS+0xff4>)
    59b0:	2294      	movs	r2, #148	; 0x94
    59b2:	0052      	lsls	r2, r2, #1
    59b4:	4694      	mov	ip, r2
    59b6:	2208      	movs	r2, #8
    59b8:	4690      	mov	r8, r2
    59ba:	44b8      	add	r8, r7
    59bc:	44c4      	add	ip, r8
    59be:	4463      	add	r3, ip
    59c0:	2201      	movs	r2, #1
    59c2:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
    59c4:	2310      	movs	r3, #16
    59c6:	2208      	movs	r2, #8
    59c8:	4694      	mov	ip, r2
    59ca:	44bc      	add	ip, r7
    59cc:	4463      	add	r3, ip
    59ce:	0018      	movs	r0, r3
    59d0:	4b3d      	ldr	r3, [pc, #244]	; (5ac8 <processOnSMS+0x1030>)
    59d2:	4798      	blx	r3
    59d4:	f000 febf 	bl	6756 <processOnSMS+0x1cbe>
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
    59d8:	4a3c      	ldr	r2, [pc, #240]	; (5acc <processOnSMS+0x1034>)
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	0011      	movs	r1, r2
    59de:	0018      	movs	r0, r3
    59e0:	4b24      	ldr	r3, [pc, #144]	; (5a74 <processOnSMS+0xfdc>)
    59e2:	4798      	blx	r3
    59e4:	1e03      	subs	r3, r0, #0
    59e6:	d100      	bne.n	59ea <processOnSMS+0xf52>
    59e8:	e09a      	b.n	5b20 <processOnSMS+0x1088>
    59ea:	4b39      	ldr	r3, [pc, #228]	; (5ad0 <processOnSMS+0x1038>)
    59ec:	2294      	movs	r2, #148	; 0x94
    59ee:	0052      	lsls	r2, r2, #1
    59f0:	4694      	mov	ip, r2
    59f2:	2208      	movs	r2, #8
    59f4:	4690      	mov	r8, r2
    59f6:	44b8      	add	r8, r7
    59f8:	44c4      	add	ip, r8
    59fa:	4463      	add	r3, ip
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d10c      	bne.n	5a1c <processOnSMS+0xf84>
    5a02:	4b34      	ldr	r3, [pc, #208]	; (5ad4 <processOnSMS+0x103c>)
    5a04:	2294      	movs	r2, #148	; 0x94
    5a06:	0052      	lsls	r2, r2, #1
    5a08:	4694      	mov	ip, r2
    5a0a:	2208      	movs	r2, #8
    5a0c:	4690      	mov	r8, r2
    5a0e:	44b8      	add	r8, r7
    5a10:	44c4      	add	ip, r8
    5a12:	4463      	add	r3, ip
    5a14:	781b      	ldrb	r3, [r3, #0]
    5a16:	2b00      	cmp	r3, #0
    5a18:	d100      	bne.n	5a1c <processOnSMS+0xf84>
    5a1a:	e081      	b.n	5b20 <processOnSMS+0x1088>
	{
		incomingSMSProcessed=true;
    5a1c:	2328      	movs	r3, #40	; 0x28
    5a1e:	33ff      	adds	r3, #255	; 0xff
    5a20:	2208      	movs	r2, #8
    5a22:	4694      	mov	ip, r2
    5a24:	44bc      	add	ip, r7
    5a26:	4463      	add	r3, ip
    5a28:	2201      	movs	r2, #1
    5a2a:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
    5a2c:	4b2a      	ldr	r3, [pc, #168]	; (5ad8 <processOnSMS+0x1040>)
    5a2e:	789b      	ldrb	r3, [r3, #2]
    5a30:	2b00      	cmp	r3, #0
    5a32:	d057      	beq.n	5ae4 <processOnSMS+0x104c>
		{
			saveAlterNumberSetting(true);
    5a34:	2001      	movs	r0, #1
    5a36:	4b29      	ldr	r3, [pc, #164]	; (5adc <processOnSMS+0x1044>)
    5a38:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5a3a:	4b14      	ldr	r3, [pc, #80]	; (5a8c <processOnSMS+0xff4>)
    5a3c:	2294      	movs	r2, #148	; 0x94
    5a3e:	0052      	lsls	r2, r2, #1
    5a40:	4694      	mov	ip, r2
    5a42:	2208      	movs	r2, #8
    5a44:	4690      	mov	r8, r2
    5a46:	44b8      	add	r8, r7
    5a48:	44c4      	add	ip, r8
    5a4a:	4463      	add	r3, ip
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d101      	bne.n	5a56 <processOnSMS+0xfbe>
    5a52:	f000 fe7f 	bl	6754 <processOnSMS+0x1cbc>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
    5a56:	2310      	movs	r3, #16
    5a58:	2208      	movs	r2, #8
    5a5a:	4694      	mov	ip, r2
    5a5c:	44bc      	add	ip, r7
    5a5e:	4463      	add	r3, ip
    5a60:	4a1f      	ldr	r2, [pc, #124]	; (5ae0 <processOnSMS+0x1048>)
    5a62:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a64:	c313      	stmia	r3!, {r0, r1, r4}
    5a66:	ca03      	ldmia	r2!, {r0, r1}
    5a68:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
    5a6a:	f000 fe73 	bl	6754 <processOnSMS+0x1cbc>
    5a6e:	46c0      	nop			; (mov r8, r8)
    5a70:	00018cd4 	.word	0x00018cd4
    5a74:	00003d61 	.word	0x00003d61
    5a78:	20000618 	.word	0x20000618
    5a7c:	200006c8 	.word	0x200006c8
    5a80:	2000064c 	.word	0x2000064c
    5a84:	00018cdc 	.word	0x00018cdc
    5a88:	00017abd 	.word	0x00017abd
    5a8c:	fffffeda 	.word	0xfffffeda
    5a90:	00018d00 	.word	0x00018d00
    5a94:	000014ad 	.word	0x000014ad
    5a98:	00018d08 	.word	0x00018d08
    5a9c:	00018d24 	.word	0x00018d24
    5aa0:	00018d2c 	.word	0x00018d2c
    5aa4:	00018d4c 	.word	0x00018d4c
    5aa8:	20000544 	.word	0x20000544
    5aac:	00006a39 	.word	0x00006a39
    5ab0:	00018d54 	.word	0x00018d54
    5ab4:	00018d84 	.word	0x00018d84
    5ab8:	00018dac 	.word	0x00018dac
    5abc:	00000bdd 	.word	0x00000bdd
    5ac0:	00018db4 	.word	0x00018db4
    5ac4:	00018dc4 	.word	0x00018dc4
    5ac8:	0000682d 	.word	0x0000682d
    5acc:	00018af0 	.word	0x00018af0
    5ad0:	fffffedb 	.word	0xfffffedb
    5ad4:	fffffed9 	.word	0xfffffed9
    5ad8:	20000634 	.word	0x20000634
    5adc:	000011e1 	.word	0x000011e1
    5ae0:	00018dcc 	.word	0x00018dcc
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
    5ae4:	4bed      	ldr	r3, [pc, #948]	; (5e9c <processOnSMS+0x1404>)
    5ae6:	2294      	movs	r2, #148	; 0x94
    5ae8:	0052      	lsls	r2, r2, #1
    5aea:	4694      	mov	ip, r2
    5aec:	2208      	movs	r2, #8
    5aee:	4690      	mov	r8, r2
    5af0:	44b8      	add	r8, r7
    5af2:	44c4      	add	ip, r8
    5af4:	4463      	add	r3, ip
    5af6:	781b      	ldrb	r3, [r3, #0]
    5af8:	2b00      	cmp	r3, #0
    5afa:	d101      	bne.n	5b00 <processOnSMS+0x1068>
    5afc:	f000 fe2a 	bl	6754 <processOnSMS+0x1cbc>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
    5b00:	2310      	movs	r3, #16
    5b02:	2208      	movs	r2, #8
    5b04:	4694      	mov	ip, r2
    5b06:	44bc      	add	ip, r7
    5b08:	4463      	add	r3, ip
    5b0a:	4ae5      	ldr	r2, [pc, #916]	; (5ea0 <processOnSMS+0x1408>)
    5b0c:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b0e:	c313      	stmia	r3!, {r0, r1, r4}
    5b10:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b12:	c313      	stmia	r3!, {r0, r1, r4}
    5b14:	6811      	ldr	r1, [r2, #0]
    5b16:	6019      	str	r1, [r3, #0]
    5b18:	7912      	ldrb	r2, [r2, #4]
    5b1a:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
    5b1c:	f000 fe1a 	bl	6754 <processOnSMS+0x1cbc>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
    5b20:	4ae0      	ldr	r2, [pc, #896]	; (5ea4 <processOnSMS+0x140c>)
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	0011      	movs	r1, r2
    5b26:	0018      	movs	r0, r3
    5b28:	4bdf      	ldr	r3, [pc, #892]	; (5ea8 <processOnSMS+0x1410>)
    5b2a:	4798      	blx	r3
    5b2c:	1e03      	subs	r3, r0, #0
    5b2e:	d026      	beq.n	5b7e <processOnSMS+0x10e6>
	{
		saveAlterNumberSetting(false);
    5b30:	2000      	movs	r0, #0
    5b32:	4bde      	ldr	r3, [pc, #888]	; (5eac <processOnSMS+0x1414>)
    5b34:	4798      	blx	r3
		incomingSMSProcessed=true;
    5b36:	2328      	movs	r3, #40	; 0x28
    5b38:	33ff      	adds	r3, #255	; 0xff
    5b3a:	2208      	movs	r2, #8
    5b3c:	4694      	mov	ip, r2
    5b3e:	44bc      	add	ip, r7
    5b40:	4463      	add	r3, ip
    5b42:	2201      	movs	r2, #1
    5b44:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5b46:	4bd5      	ldr	r3, [pc, #852]	; (5e9c <processOnSMS+0x1404>)
    5b48:	2294      	movs	r2, #148	; 0x94
    5b4a:	0052      	lsls	r2, r2, #1
    5b4c:	4694      	mov	ip, r2
    5b4e:	2208      	movs	r2, #8
    5b50:	4690      	mov	r8, r2
    5b52:	44b8      	add	r8, r7
    5b54:	44c4      	add	ip, r8
    5b56:	4463      	add	r3, ip
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d101      	bne.n	5b62 <processOnSMS+0x10ca>
    5b5e:	f000 fdfa 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
    5b62:	2310      	movs	r3, #16
    5b64:	2208      	movs	r2, #8
    5b66:	4694      	mov	ip, r2
    5b68:	44bc      	add	ip, r7
    5b6a:	4463      	add	r3, ip
    5b6c:	4ad0      	ldr	r2, [pc, #832]	; (5eb0 <processOnSMS+0x1418>)
    5b6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b70:	c313      	stmia	r3!, {r0, r1, r4}
    5b72:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b74:	c313      	stmia	r3!, {r0, r1, r4}
    5b76:	6812      	ldr	r2, [r2, #0]
    5b78:	601a      	str	r2, [r3, #0]
    5b7a:	f000 fdec 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
    5b7e:	4acd      	ldr	r2, [pc, #820]	; (5eb4 <processOnSMS+0x141c>)
    5b80:	68fb      	ldr	r3, [r7, #12]
    5b82:	0011      	movs	r1, r2
    5b84:	0018      	movs	r0, r3
    5b86:	4bc8      	ldr	r3, [pc, #800]	; (5ea8 <processOnSMS+0x1410>)
    5b88:	4798      	blx	r3
    5b8a:	1e03      	subs	r3, r0, #0
    5b8c:	d029      	beq.n	5be2 <processOnSMS+0x114a>
	{
		saveNoCallSettings(false,0,0,0,0);
    5b8e:	2300      	movs	r3, #0
    5b90:	9300      	str	r3, [sp, #0]
    5b92:	2300      	movs	r3, #0
    5b94:	2200      	movs	r2, #0
    5b96:	2100      	movs	r1, #0
    5b98:	2000      	movs	r0, #0
    5b9a:	4cc7      	ldr	r4, [pc, #796]	; (5eb8 <processOnSMS+0x1420>)
    5b9c:	47a0      	blx	r4
		incomingSMSProcessed=true;
    5b9e:	2328      	movs	r3, #40	; 0x28
    5ba0:	33ff      	adds	r3, #255	; 0xff
    5ba2:	2208      	movs	r2, #8
    5ba4:	4694      	mov	ip, r2
    5ba6:	44bc      	add	ip, r7
    5ba8:	4463      	add	r3, ip
    5baa:	2201      	movs	r2, #1
    5bac:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5bae:	4bbb      	ldr	r3, [pc, #748]	; (5e9c <processOnSMS+0x1404>)
    5bb0:	2294      	movs	r2, #148	; 0x94
    5bb2:	0052      	lsls	r2, r2, #1
    5bb4:	4694      	mov	ip, r2
    5bb6:	2208      	movs	r2, #8
    5bb8:	4690      	mov	r8, r2
    5bba:	44b8      	add	r8, r7
    5bbc:	44c4      	add	ip, r8
    5bbe:	4463      	add	r3, ip
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d101      	bne.n	5bca <processOnSMS+0x1132>
    5bc6:	f000 fdc6 	bl	6756 <processOnSMS+0x1cbe>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
    5bca:	2310      	movs	r3, #16
    5bcc:	2208      	movs	r2, #8
    5bce:	4694      	mov	ip, r2
    5bd0:	44bc      	add	ip, r7
    5bd2:	4463      	add	r3, ip
    5bd4:	4ab9      	ldr	r2, [pc, #740]	; (5ebc <processOnSMS+0x1424>)
    5bd6:	ca13      	ldmia	r2!, {r0, r1, r4}
    5bd8:	c313      	stmia	r3!, {r0, r1, r4}
    5bda:	ca03      	ldmia	r2!, {r0, r1}
    5bdc:	c303      	stmia	r3!, {r0, r1}
    5bde:	f000 fdba 	bl	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
    5be2:	4ab7      	ldr	r2, [pc, #732]	; (5ec0 <processOnSMS+0x1428>)
    5be4:	68fb      	ldr	r3, [r7, #12]
    5be6:	0011      	movs	r1, r2
    5be8:	0018      	movs	r0, r3
    5bea:	4baf      	ldr	r3, [pc, #700]	; (5ea8 <processOnSMS+0x1410>)
    5bec:	4798      	blx	r3
    5bee:	1e03      	subs	r3, r0, #0
    5bf0:	d03e      	beq.n	5c70 <processOnSMS+0x11d8>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
    5bf2:	230e      	movs	r3, #14
    5bf4:	2208      	movs	r2, #8
    5bf6:	18ba      	adds	r2, r7, r2
    5bf8:	18d2      	adds	r2, r2, r3
    5bfa:	230f      	movs	r3, #15
    5bfc:	2108      	movs	r1, #8
    5bfe:	468c      	mov	ip, r1
    5c00:	44bc      	add	ip, r7
    5c02:	4463      	add	r3, ip
    5c04:	0011      	movs	r1, r2
    5c06:	0018      	movs	r0, r3
    5c08:	4bae      	ldr	r3, [pc, #696]	; (5ec4 <processOnSMS+0x142c>)
    5c0a:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
    5c0c:	4bae      	ldr	r3, [pc, #696]	; (5ec8 <processOnSMS+0x1430>)
    5c0e:	2294      	movs	r2, #148	; 0x94
    5c10:	0052      	lsls	r2, r2, #1
    5c12:	4694      	mov	ip, r2
    5c14:	2208      	movs	r2, #8
    5c16:	4690      	mov	r8, r2
    5c18:	44b8      	add	r8, r7
    5c1a:	44c4      	add	ip, r8
    5c1c:	4463      	add	r3, ip
    5c1e:	781b      	ldrb	r3, [r3, #0]
    5c20:	001a      	movs	r2, r3
    5c22:	4baa      	ldr	r3, [pc, #680]	; (5ecc <processOnSMS+0x1434>)
    5c24:	2194      	movs	r1, #148	; 0x94
    5c26:	0049      	lsls	r1, r1, #1
    5c28:	468c      	mov	ip, r1
    5c2a:	2108      	movs	r1, #8
    5c2c:	4688      	mov	r8, r1
    5c2e:	44b8      	add	r8, r7
    5c30:	44c4      	add	ip, r8
    5c32:	4463      	add	r3, ip
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	49a6      	ldr	r1, [pc, #664]	; (5ed0 <processOnSMS+0x1438>)
    5c38:	2010      	movs	r0, #16
    5c3a:	2408      	movs	r4, #8
    5c3c:	46a4      	mov	ip, r4
    5c3e:	44bc      	add	ip, r7
    5c40:	4460      	add	r0, ip
    5c42:	4ca4      	ldr	r4, [pc, #656]	; (5ed4 <processOnSMS+0x143c>)
    5c44:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
    5c46:	2328      	movs	r3, #40	; 0x28
    5c48:	33ff      	adds	r3, #255	; 0xff
    5c4a:	2208      	movs	r2, #8
    5c4c:	4694      	mov	ip, r2
    5c4e:	44bc      	add	ip, r7
    5c50:	4463      	add	r3, ip
    5c52:	2201      	movs	r2, #1
    5c54:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
    5c56:	4b91      	ldr	r3, [pc, #580]	; (5e9c <processOnSMS+0x1404>)
    5c58:	2294      	movs	r2, #148	; 0x94
    5c5a:	0052      	lsls	r2, r2, #1
    5c5c:	4694      	mov	ip, r2
    5c5e:	2208      	movs	r2, #8
    5c60:	4690      	mov	r8, r2
    5c62:	44b8      	add	r8, r7
    5c64:	44c4      	add	ip, r8
    5c66:	4463      	add	r3, ip
    5c68:	2201      	movs	r2, #1
    5c6a:	701a      	strb	r2, [r3, #0]
    5c6c:	f000 fd73 	bl	6756 <processOnSMS+0x1cbe>
	}
	else if (StringstartsWith(received_command,"SETTIME"))
    5c70:	4a99      	ldr	r2, [pc, #612]	; (5ed8 <processOnSMS+0x1440>)
    5c72:	68fb      	ldr	r3, [r7, #12]
    5c74:	0011      	movs	r1, r2
    5c76:	0018      	movs	r0, r3
    5c78:	4b8b      	ldr	r3, [pc, #556]	; (5ea8 <processOnSMS+0x1410>)
    5c7a:	4798      	blx	r3
    5c7c:	1e03      	subs	r3, r0, #0
    5c7e:	d001      	beq.n	5c84 <processOnSMS+0x11ec>
    5c80:	f000 fd69 	bl	6756 <processOnSMS+0x1cbe>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
    5c84:	4a95      	ldr	r2, [pc, #596]	; (5edc <processOnSMS+0x1444>)
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	0011      	movs	r1, r2
    5c8a:	0018      	movs	r0, r3
    5c8c:	4b86      	ldr	r3, [pc, #536]	; (5ea8 <processOnSMS+0x1410>)
    5c8e:	4798      	blx	r3
    5c90:	1e03      	subs	r3, r0, #0
    5c92:	d100      	bne.n	5c96 <processOnSMS+0x11fe>
    5c94:	e167      	b.n	5f66 <processOnSMS+0x14ce>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
    5c96:	4a92      	ldr	r2, [pc, #584]	; (5ee0 <processOnSMS+0x1448>)
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0011      	movs	r1, r2
    5c9c:	0018      	movs	r0, r3
    5c9e:	4b91      	ldr	r3, [pc, #580]	; (5ee4 <processOnSMS+0x144c>)
    5ca0:	4798      	blx	r3
    5ca2:	0003      	movs	r3, r0
    5ca4:	228a      	movs	r2, #138	; 0x8a
    5ca6:	0052      	lsls	r2, r2, #1
    5ca8:	2108      	movs	r1, #8
    5caa:	468c      	mov	ip, r1
    5cac:	44bc      	add	ip, r7
    5cae:	4462      	add	r2, ip
    5cb0:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
    5cb2:	4b8d      	ldr	r3, [pc, #564]	; (5ee8 <processOnSMS+0x1450>)
    5cb4:	0019      	movs	r1, r3
    5cb6:	2000      	movs	r0, #0
    5cb8:	4b8a      	ldr	r3, [pc, #552]	; (5ee4 <processOnSMS+0x144c>)
    5cba:	4798      	blx	r3
    5cbc:	0003      	movs	r3, r0
    5cbe:	228a      	movs	r2, #138	; 0x8a
    5cc0:	0052      	lsls	r2, r2, #1
    5cc2:	2108      	movs	r1, #8
    5cc4:	468c      	mov	ip, r1
    5cc6:	44bc      	add	ip, r7
    5cc8:	4462      	add	r2, ip
    5cca:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
    5ccc:	238a      	movs	r3, #138	; 0x8a
    5cce:	005b      	lsls	r3, r3, #1
    5cd0:	2208      	movs	r2, #8
    5cd2:	4694      	mov	ip, r2
    5cd4:	44bc      	add	ip, r7
    5cd6:	4463      	add	r3, ip
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	781b      	ldrb	r3, [r3, #0]
    5cdc:	0018      	movs	r0, r3
    5cde:	4b83      	ldr	r3, [pc, #524]	; (5eec <processOnSMS+0x1454>)
    5ce0:	4798      	blx	r3
    5ce2:	0002      	movs	r2, r0
    5ce4:	2314      	movs	r3, #20
    5ce6:	33ff      	adds	r3, #255	; 0xff
    5ce8:	2108      	movs	r1, #8
    5cea:	468c      	mov	ip, r1
    5cec:	44bc      	add	ip, r7
    5cee:	4463      	add	r3, ip
    5cf0:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
    5cf2:	4b7b      	ldr	r3, [pc, #492]	; (5ee0 <processOnSMS+0x1448>)
    5cf4:	0019      	movs	r1, r3
    5cf6:	2000      	movs	r0, #0
    5cf8:	4b7a      	ldr	r3, [pc, #488]	; (5ee4 <processOnSMS+0x144c>)
    5cfa:	4798      	blx	r3
    5cfc:	0003      	movs	r3, r0
    5cfe:	228a      	movs	r2, #138	; 0x8a
    5d00:	0052      	lsls	r2, r2, #1
    5d02:	2108      	movs	r1, #8
    5d04:	468c      	mov	ip, r1
    5d06:	44bc      	add	ip, r7
    5d08:	4462      	add	r2, ip
    5d0a:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
    5d0c:	238a      	movs	r3, #138	; 0x8a
    5d0e:	005b      	lsls	r3, r3, #1
    5d10:	2208      	movs	r2, #8
    5d12:	4694      	mov	ip, r2
    5d14:	44bc      	add	ip, r7
    5d16:	4463      	add	r3, ip
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	781b      	ldrb	r3, [r3, #0]
    5d1c:	0018      	movs	r0, r3
    5d1e:	4b73      	ldr	r3, [pc, #460]	; (5eec <processOnSMS+0x1454>)
    5d20:	4798      	blx	r3
    5d22:	0002      	movs	r2, r0
    5d24:	2389      	movs	r3, #137	; 0x89
    5d26:	005b      	lsls	r3, r3, #1
    5d28:	2108      	movs	r1, #8
    5d2a:	468c      	mov	ip, r1
    5d2c:	44bc      	add	ip, r7
    5d2e:	4463      	add	r3, ip
    5d30:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    5d32:	4b6d      	ldr	r3, [pc, #436]	; (5ee8 <processOnSMS+0x1450>)
    5d34:	0019      	movs	r1, r3
    5d36:	2000      	movs	r0, #0
    5d38:	4b6a      	ldr	r3, [pc, #424]	; (5ee4 <processOnSMS+0x144c>)
    5d3a:	4798      	blx	r3
    5d3c:	0003      	movs	r3, r0
    5d3e:	228a      	movs	r2, #138	; 0x8a
    5d40:	0052      	lsls	r2, r2, #1
    5d42:	2108      	movs	r1, #8
    5d44:	468c      	mov	ip, r1
    5d46:	44bc      	add	ip, r7
    5d48:	4462      	add	r2, ip
    5d4a:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
    5d4c:	238a      	movs	r3, #138	; 0x8a
    5d4e:	005b      	lsls	r3, r3, #1
    5d50:	2208      	movs	r2, #8
    5d52:	4694      	mov	ip, r2
    5d54:	44bc      	add	ip, r7
    5d56:	4463      	add	r3, ip
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	781b      	ldrb	r3, [r3, #0]
    5d5c:	0018      	movs	r0, r3
    5d5e:	4b63      	ldr	r3, [pc, #396]	; (5eec <processOnSMS+0x1454>)
    5d60:	4798      	blx	r3
    5d62:	0002      	movs	r2, r0
    5d64:	2312      	movs	r3, #18
    5d66:	33ff      	adds	r3, #255	; 0xff
    5d68:	2108      	movs	r1, #8
    5d6a:	468c      	mov	ip, r1
    5d6c:	44bc      	add	ip, r7
    5d6e:	4463      	add	r3, ip
    5d70:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    5d72:	4b5d      	ldr	r3, [pc, #372]	; (5ee8 <processOnSMS+0x1450>)
    5d74:	0019      	movs	r1, r3
    5d76:	2000      	movs	r0, #0
    5d78:	4b5a      	ldr	r3, [pc, #360]	; (5ee4 <processOnSMS+0x144c>)
    5d7a:	4798      	blx	r3
    5d7c:	0003      	movs	r3, r0
    5d7e:	228a      	movs	r2, #138	; 0x8a
    5d80:	0052      	lsls	r2, r2, #1
    5d82:	2108      	movs	r1, #8
    5d84:	468c      	mov	ip, r1
    5d86:	44bc      	add	ip, r7
    5d88:	4462      	add	r2, ip
    5d8a:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
    5d8c:	238a      	movs	r3, #138	; 0x8a
    5d8e:	005b      	lsls	r3, r3, #1
    5d90:	2208      	movs	r2, #8
    5d92:	4694      	mov	ip, r2
    5d94:	44bc      	add	ip, r7
    5d96:	4463      	add	r3, ip
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	0018      	movs	r0, r3
    5d9e:	4b53      	ldr	r3, [pc, #332]	; (5eec <processOnSMS+0x1454>)
    5da0:	4798      	blx	r3
    5da2:	0002      	movs	r2, r0
    5da4:	2388      	movs	r3, #136	; 0x88
    5da6:	005b      	lsls	r3, r3, #1
    5da8:	2108      	movs	r1, #8
    5daa:	468c      	mov	ip, r1
    5dac:	44bc      	add	ip, r7
    5dae:	4463      	add	r3, ip
    5db0:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
    5db2:	2314      	movs	r3, #20
    5db4:	33ff      	adds	r3, #255	; 0xff
    5db6:	2208      	movs	r2, #8
    5db8:	4694      	mov	ip, r2
    5dba:	44bc      	add	ip, r7
    5dbc:	4463      	add	r3, ip
    5dbe:	781b      	ldrb	r3, [r3, #0]
    5dc0:	2b17      	cmp	r3, #23
    5dc2:	d901      	bls.n	5dc8 <processOnSMS+0x1330>
    5dc4:	f000 fcc7 	bl	6756 <processOnSMS+0x1cbe>
    5dc8:	2389      	movs	r3, #137	; 0x89
    5dca:	005b      	lsls	r3, r3, #1
    5dcc:	2208      	movs	r2, #8
    5dce:	4694      	mov	ip, r2
    5dd0:	44bc      	add	ip, r7
    5dd2:	4463      	add	r3, ip
    5dd4:	781b      	ldrb	r3, [r3, #0]
    5dd6:	2b3b      	cmp	r3, #59	; 0x3b
    5dd8:	d901      	bls.n	5dde <processOnSMS+0x1346>
    5dda:	f000 fcbc 	bl	6756 <processOnSMS+0x1cbe>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
    5dde:	2312      	movs	r3, #18
    5de0:	33ff      	adds	r3, #255	; 0xff
    5de2:	2208      	movs	r2, #8
    5de4:	4694      	mov	ip, r2
    5de6:	44bc      	add	ip, r7
    5de8:	4463      	add	r3, ip
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	2b17      	cmp	r3, #23
    5dee:	d901      	bls.n	5df4 <processOnSMS+0x135c>
    5df0:	f000 fcb1 	bl	6756 <processOnSMS+0x1cbe>
    5df4:	2388      	movs	r3, #136	; 0x88
    5df6:	005b      	lsls	r3, r3, #1
    5df8:	2208      	movs	r2, #8
    5dfa:	4694      	mov	ip, r2
    5dfc:	44bc      	add	ip, r7
    5dfe:	4463      	add	r3, ip
    5e00:	781b      	ldrb	r3, [r3, #0]
    5e02:	2b3b      	cmp	r3, #59	; 0x3b
    5e04:	d901      	bls.n	5e0a <processOnSMS+0x1372>
    5e06:	f000 fca6 	bl	6756 <processOnSMS+0x1cbe>
			{
				incomingSMSProcessed=true;
    5e0a:	2328      	movs	r3, #40	; 0x28
    5e0c:	33ff      	adds	r3, #255	; 0xff
    5e0e:	2208      	movs	r2, #8
    5e10:	4694      	mov	ip, r2
    5e12:	44bc      	add	ip, r7
    5e14:	4463      	add	r3, ip
    5e16:	2201      	movs	r2, #1
    5e18:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
    5e1a:	2314      	movs	r3, #20
    5e1c:	33ff      	adds	r3, #255	; 0xff
    5e1e:	2208      	movs	r2, #8
    5e20:	18ba      	adds	r2, r7, r2
    5e22:	18d2      	adds	r2, r2, r3
    5e24:	2312      	movs	r3, #18
    5e26:	33ff      	adds	r3, #255	; 0xff
    5e28:	2108      	movs	r1, #8
    5e2a:	468c      	mov	ip, r1
    5e2c:	44bc      	add	ip, r7
    5e2e:	4463      	add	r3, ip
    5e30:	7812      	ldrb	r2, [r2, #0]
    5e32:	781b      	ldrb	r3, [r3, #0]
    5e34:	429a      	cmp	r2, r3
    5e36:	d15b      	bne.n	5ef0 <processOnSMS+0x1458>
    5e38:	2389      	movs	r3, #137	; 0x89
    5e3a:	005b      	lsls	r3, r3, #1
    5e3c:	2208      	movs	r2, #8
    5e3e:	18ba      	adds	r2, r7, r2
    5e40:	18d2      	adds	r2, r2, r3
    5e42:	2388      	movs	r3, #136	; 0x88
    5e44:	005b      	lsls	r3, r3, #1
    5e46:	2108      	movs	r1, #8
    5e48:	468c      	mov	ip, r1
    5e4a:	44bc      	add	ip, r7
    5e4c:	4463      	add	r3, ip
    5e4e:	7812      	ldrb	r2, [r2, #0]
    5e50:	781b      	ldrb	r3, [r3, #0]
    5e52:	429a      	cmp	r2, r3
    5e54:	d14c      	bne.n	5ef0 <processOnSMS+0x1458>
				{
					saveNoCallSettings(false,0,0,0,0);
    5e56:	2300      	movs	r3, #0
    5e58:	9300      	str	r3, [sp, #0]
    5e5a:	2300      	movs	r3, #0
    5e5c:	2200      	movs	r2, #0
    5e5e:	2100      	movs	r1, #0
    5e60:	2000      	movs	r0, #0
    5e62:	4c15      	ldr	r4, [pc, #84]	; (5eb8 <processOnSMS+0x1420>)
    5e64:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    5e66:	4b0d      	ldr	r3, [pc, #52]	; (5e9c <processOnSMS+0x1404>)
    5e68:	2294      	movs	r2, #148	; 0x94
    5e6a:	0052      	lsls	r2, r2, #1
    5e6c:	4694      	mov	ip, r2
    5e6e:	2208      	movs	r2, #8
    5e70:	4690      	mov	r8, r2
    5e72:	44b8      	add	r8, r7
    5e74:	44c4      	add	ip, r8
    5e76:	4463      	add	r3, ip
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d101      	bne.n	5e82 <processOnSMS+0x13ea>
    5e7e:	f000 fc6a 	bl	6756 <processOnSMS+0x1cbe>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
    5e82:	2310      	movs	r3, #16
    5e84:	2208      	movs	r2, #8
    5e86:	4694      	mov	ip, r2
    5e88:	44bc      	add	ip, r7
    5e8a:	4463      	add	r3, ip
    5e8c:	4a0b      	ldr	r2, [pc, #44]	; (5ebc <processOnSMS+0x1424>)
    5e8e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5e90:	c313      	stmia	r3!, {r0, r1, r4}
    5e92:	ca03      	ldmia	r2!, {r0, r1}
    5e94:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
    5e96:	f000 fc5e 	bl	6756 <processOnSMS+0x1cbe>
    5e9a:	46c0      	nop			; (mov r8, r8)
    5e9c:	fffffeda 	.word	0xfffffeda
    5ea0:	00018de0 	.word	0x00018de0
    5ea4:	00018e00 	.word	0x00018e00
    5ea8:	00003d61 	.word	0x00003d61
    5eac:	000011e1 	.word	0x000011e1
    5eb0:	00018e08 	.word	0x00018e08
    5eb4:	00018e24 	.word	0x00018e24
    5eb8:	000013d1 	.word	0x000013d1
    5ebc:	00018e2c 	.word	0x00018e2c
    5ec0:	00018e40 	.word	0x00018e40
    5ec4:	00006c71 	.word	0x00006c71
    5ec8:	fffffee7 	.word	0xfffffee7
    5ecc:	fffffee6 	.word	0xfffffee6
    5ed0:	00018e48 	.word	0x00018e48
    5ed4:	00017abd 	.word	0x00017abd
    5ed8:	00018e58 	.word	0x00018e58
    5edc:	00018e60 	.word	0x00018e60
    5ee0:	00018e68 	.word	0x00018e68
    5ee4:	00017ba9 	.word	0x00017ba9
    5ee8:	00018e6c 	.word	0x00018e6c
    5eec:	0001779d 	.word	0x0001779d
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
    5ef0:	2312      	movs	r3, #18
    5ef2:	33ff      	adds	r3, #255	; 0xff
    5ef4:	2208      	movs	r2, #8
    5ef6:	4694      	mov	ip, r2
    5ef8:	44bc      	add	ip, r7
    5efa:	4463      	add	r3, ip
    5efc:	7818      	ldrb	r0, [r3, #0]
    5efe:	2389      	movs	r3, #137	; 0x89
    5f00:	005b      	lsls	r3, r3, #1
    5f02:	2208      	movs	r2, #8
    5f04:	4694      	mov	ip, r2
    5f06:	44bc      	add	ip, r7
    5f08:	4463      	add	r3, ip
    5f0a:	781a      	ldrb	r2, [r3, #0]
    5f0c:	2314      	movs	r3, #20
    5f0e:	33ff      	adds	r3, #255	; 0xff
    5f10:	2108      	movs	r1, #8
    5f12:	468c      	mov	ip, r1
    5f14:	44bc      	add	ip, r7
    5f16:	4463      	add	r3, ip
    5f18:	7819      	ldrb	r1, [r3, #0]
    5f1a:	2388      	movs	r3, #136	; 0x88
    5f1c:	005b      	lsls	r3, r3, #1
    5f1e:	2408      	movs	r4, #8
    5f20:	46a4      	mov	ip, r4
    5f22:	44bc      	add	ip, r7
    5f24:	4463      	add	r3, ip
    5f26:	781b      	ldrb	r3, [r3, #0]
    5f28:	9300      	str	r3, [sp, #0]
    5f2a:	0003      	movs	r3, r0
    5f2c:	2001      	movs	r0, #1
    5f2e:	4ccf      	ldr	r4, [pc, #828]	; (626c <processOnSMS+0x17d4>)
    5f30:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    5f32:	4bcf      	ldr	r3, [pc, #828]	; (6270 <processOnSMS+0x17d8>)
    5f34:	2294      	movs	r2, #148	; 0x94
    5f36:	0052      	lsls	r2, r2, #1
    5f38:	4694      	mov	ip, r2
    5f3a:	2208      	movs	r2, #8
    5f3c:	4690      	mov	r8, r2
    5f3e:	44b8      	add	r8, r7
    5f40:	44c4      	add	ip, r8
    5f42:	4463      	add	r3, ip
    5f44:	781b      	ldrb	r3, [r3, #0]
    5f46:	2b00      	cmp	r3, #0
    5f48:	d101      	bne.n	5f4e <processOnSMS+0x14b6>
    5f4a:	f000 fc04 	bl	6756 <processOnSMS+0x1cbe>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
    5f4e:	2310      	movs	r3, #16
    5f50:	2208      	movs	r2, #8
    5f52:	4694      	mov	ip, r2
    5f54:	44bc      	add	ip, r7
    5f56:	4463      	add	r3, ip
    5f58:	4ac6      	ldr	r2, [pc, #792]	; (6274 <processOnSMS+0x17dc>)
    5f5a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5f5c:	c313      	stmia	r3!, {r0, r1, r4}
    5f5e:	ca03      	ldmia	r2!, {r0, r1}
    5f60:	c303      	stmia	r3!, {r0, r1}
    5f62:	f000 fbf8 	bl	6756 <processOnSMS+0x1cbe>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
    5f66:	4ac4      	ldr	r2, [pc, #784]	; (6278 <processOnSMS+0x17e0>)
    5f68:	68fb      	ldr	r3, [r7, #12]
    5f6a:	0011      	movs	r1, r2
    5f6c:	0018      	movs	r0, r3
    5f6e:	4bc3      	ldr	r3, [pc, #780]	; (627c <processOnSMS+0x17e4>)
    5f70:	4798      	blx	r3
    5f72:	1e03      	subs	r3, r0, #0
    5f74:	d059      	beq.n	602a <processOnSMS+0x1592>
	{
		memmove(received_command,received_command+5,strlen(received_command));
    5f76:	68fb      	ldr	r3, [r7, #12]
    5f78:	1d5c      	adds	r4, r3, #5
    5f7a:	68fb      	ldr	r3, [r7, #12]
    5f7c:	0018      	movs	r0, r3
    5f7e:	4bc0      	ldr	r3, [pc, #768]	; (6280 <processOnSMS+0x17e8>)
    5f80:	4798      	blx	r3
    5f82:	0002      	movs	r2, r0
    5f84:	68fb      	ldr	r3, [r7, #12]
    5f86:	0021      	movs	r1, r4
    5f88:	0018      	movs	r0, r3
    5f8a:	4bbe      	ldr	r3, [pc, #760]	; (6284 <processOnSMS+0x17ec>)
    5f8c:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
    5f8e:	68fb      	ldr	r3, [r7, #12]
    5f90:	0018      	movs	r0, r3
    5f92:	4bbd      	ldr	r3, [pc, #756]	; (6288 <processOnSMS+0x17f0>)
    5f94:	4798      	blx	r3
    5f96:	0002      	movs	r2, r0
    5f98:	2392      	movs	r3, #146	; 0x92
    5f9a:	005b      	lsls	r3, r3, #1
    5f9c:	2108      	movs	r1, #8
    5f9e:	468c      	mov	ip, r1
    5fa0:	44bc      	add	ip, r7
    5fa2:	4463      	add	r3, ip
    5fa4:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
    5fa6:	2392      	movs	r3, #146	; 0x92
    5fa8:	005b      	lsls	r3, r3, #1
    5faa:	2208      	movs	r2, #8
    5fac:	4694      	mov	ip, r2
    5fae:	44bc      	add	ip, r7
    5fb0:	4463      	add	r3, ip
    5fb2:	881b      	ldrh	r3, [r3, #0]
    5fb4:	2b05      	cmp	r3, #5
    5fb6:	d907      	bls.n	5fc8 <processOnSMS+0x1530>
    5fb8:	2392      	movs	r3, #146	; 0x92
    5fba:	005b      	lsls	r3, r3, #1
    5fbc:	2208      	movs	r2, #8
    5fbe:	4694      	mov	ip, r2
    5fc0:	44bc      	add	ip, r7
    5fc2:	4463      	add	r3, ip
    5fc4:	2205      	movs	r2, #5
    5fc6:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
    5fc8:	2392      	movs	r3, #146	; 0x92
    5fca:	005b      	lsls	r3, r3, #1
    5fcc:	2208      	movs	r2, #8
    5fce:	4694      	mov	ip, r2
    5fd0:	44bc      	add	ip, r7
    5fd2:	4463      	add	r3, ip
    5fd4:	881b      	ldrh	r3, [r3, #0]
    5fd6:	b2db      	uxtb	r3, r3
    5fd8:	0018      	movs	r0, r3
    5fda:	4bac      	ldr	r3, [pc, #688]	; (628c <processOnSMS+0x17f4>)
    5fdc:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    5fde:	2328      	movs	r3, #40	; 0x28
    5fe0:	33ff      	adds	r3, #255	; 0xff
    5fe2:	2208      	movs	r2, #8
    5fe4:	4694      	mov	ip, r2
    5fe6:	44bc      	add	ip, r7
    5fe8:	4463      	add	r3, ip
    5fea:	2201      	movs	r2, #1
    5fec:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
    5fee:	4ba0      	ldr	r3, [pc, #640]	; (6270 <processOnSMS+0x17d8>)
    5ff0:	2294      	movs	r2, #148	; 0x94
    5ff2:	0052      	lsls	r2, r2, #1
    5ff4:	4694      	mov	ip, r2
    5ff6:	2208      	movs	r2, #8
    5ff8:	4690      	mov	r8, r2
    5ffa:	44b8      	add	r8, r7
    5ffc:	44c4      	add	ip, r8
    5ffe:	4463      	add	r3, ip
    6000:	781b      	ldrb	r3, [r3, #0]
    6002:	2b00      	cmp	r3, #0
    6004:	d100      	bne.n	6008 <processOnSMS+0x1570>
    6006:	e3a6      	b.n	6756 <processOnSMS+0x1cbe>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
    6008:	2392      	movs	r3, #146	; 0x92
    600a:	005b      	lsls	r3, r3, #1
    600c:	2208      	movs	r2, #8
    600e:	4694      	mov	ip, r2
    6010:	44bc      	add	ip, r7
    6012:	4463      	add	r3, ip
    6014:	881a      	ldrh	r2, [r3, #0]
    6016:	499e      	ldr	r1, [pc, #632]	; (6290 <processOnSMS+0x17f8>)
    6018:	2310      	movs	r3, #16
    601a:	2008      	movs	r0, #8
    601c:	4684      	mov	ip, r0
    601e:	44bc      	add	ip, r7
    6020:	4463      	add	r3, ip
    6022:	0018      	movs	r0, r3
    6024:	4b9b      	ldr	r3, [pc, #620]	; (6294 <processOnSMS+0x17fc>)
    6026:	4798      	blx	r3
    6028:	e395      	b.n	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
    602a:	4a9b      	ldr	r2, [pc, #620]	; (6298 <processOnSMS+0x1800>)
    602c:	68fb      	ldr	r3, [r7, #12]
    602e:	0011      	movs	r1, r2
    6030:	0018      	movs	r0, r3
    6032:	4b92      	ldr	r3, [pc, #584]	; (627c <processOnSMS+0x17e4>)
    6034:	4798      	blx	r3
    6036:	1e03      	subs	r3, r0, #0
    6038:	d06d      	beq.n	6116 <processOnSMS+0x167e>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    603a:	68fb      	ldr	r3, [r7, #12]
    603c:	3308      	adds	r3, #8
    603e:	001c      	movs	r4, r3
    6040:	68fb      	ldr	r3, [r7, #12]
    6042:	0018      	movs	r0, r3
    6044:	4b8e      	ldr	r3, [pc, #568]	; (6280 <processOnSMS+0x17e8>)
    6046:	4798      	blx	r3
    6048:	0002      	movs	r2, r0
    604a:	68fb      	ldr	r3, [r7, #12]
    604c:	0021      	movs	r1, r4
    604e:	0018      	movs	r0, r3
    6050:	4b8c      	ldr	r3, [pc, #560]	; (6284 <processOnSMS+0x17ec>)
    6052:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
    6054:	68fb      	ldr	r3, [r7, #12]
    6056:	0018      	movs	r0, r3
    6058:	4b8b      	ldr	r3, [pc, #556]	; (6288 <processOnSMS+0x17f0>)
    605a:	4798      	blx	r3
    605c:	0002      	movs	r2, r0
    605e:	2391      	movs	r3, #145	; 0x91
    6060:	005b      	lsls	r3, r3, #1
    6062:	2108      	movs	r1, #8
    6064:	468c      	mov	ip, r1
    6066:	44bc      	add	ip, r7
    6068:	4463      	add	r3, ip
    606a:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
    606c:	2391      	movs	r3, #145	; 0x91
    606e:	005b      	lsls	r3, r3, #1
    6070:	2208      	movs	r2, #8
    6072:	4694      	mov	ip, r2
    6074:	44bc      	add	ip, r7
    6076:	4463      	add	r3, ip
    6078:	881b      	ldrh	r3, [r3, #0]
    607a:	2b01      	cmp	r3, #1
    607c:	d807      	bhi.n	608e <processOnSMS+0x15f6>
		{
			STARTIME = 2;
    607e:	2391      	movs	r3, #145	; 0x91
    6080:	005b      	lsls	r3, r3, #1
    6082:	2208      	movs	r2, #8
    6084:	4694      	mov	ip, r2
    6086:	44bc      	add	ip, r7
    6088:	4463      	add	r3, ip
    608a:	2202      	movs	r2, #2
    608c:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
    608e:	2391      	movs	r3, #145	; 0x91
    6090:	005b      	lsls	r3, r3, #1
    6092:	2208      	movs	r2, #8
    6094:	4694      	mov	ip, r2
    6096:	44bc      	add	ip, r7
    6098:	4463      	add	r3, ip
    609a:	881a      	ldrh	r2, [r3, #0]
    609c:	2396      	movs	r3, #150	; 0x96
    609e:	00db      	lsls	r3, r3, #3
    60a0:	429a      	cmp	r2, r3
    60a2:	d908      	bls.n	60b6 <processOnSMS+0x161e>
		{
			STARTIME = 1200;
    60a4:	2391      	movs	r3, #145	; 0x91
    60a6:	005b      	lsls	r3, r3, #1
    60a8:	2208      	movs	r2, #8
    60aa:	4694      	mov	ip, r2
    60ac:	44bc      	add	ip, r7
    60ae:	4463      	add	r3, ip
    60b0:	2296      	movs	r2, #150	; 0x96
    60b2:	00d2      	lsls	r2, r2, #3
    60b4:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
    60b6:	2391      	movs	r3, #145	; 0x91
    60b8:	005b      	lsls	r3, r3, #1
    60ba:	2208      	movs	r2, #8
    60bc:	4694      	mov	ip, r2
    60be:	44bc      	add	ip, r7
    60c0:	4463      	add	r3, ip
    60c2:	881b      	ldrh	r3, [r3, #0]
    60c4:	0018      	movs	r0, r3
    60c6:	4b75      	ldr	r3, [pc, #468]	; (629c <processOnSMS+0x1804>)
    60c8:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    60ca:	2328      	movs	r3, #40	; 0x28
    60cc:	33ff      	adds	r3, #255	; 0xff
    60ce:	2208      	movs	r2, #8
    60d0:	4694      	mov	ip, r2
    60d2:	44bc      	add	ip, r7
    60d4:	4463      	add	r3, ip
    60d6:	2201      	movs	r2, #1
    60d8:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    60da:	4b65      	ldr	r3, [pc, #404]	; (6270 <processOnSMS+0x17d8>)
    60dc:	2294      	movs	r2, #148	; 0x94
    60de:	0052      	lsls	r2, r2, #1
    60e0:	4694      	mov	ip, r2
    60e2:	2208      	movs	r2, #8
    60e4:	4690      	mov	r8, r2
    60e6:	44b8      	add	r8, r7
    60e8:	44c4      	add	ip, r8
    60ea:	4463      	add	r3, ip
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2b00      	cmp	r3, #0
    60f0:	d100      	bne.n	60f4 <processOnSMS+0x165c>
    60f2:	e330      	b.n	6756 <processOnSMS+0x1cbe>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
    60f4:	2391      	movs	r3, #145	; 0x91
    60f6:	005b      	lsls	r3, r3, #1
    60f8:	2208      	movs	r2, #8
    60fa:	4694      	mov	ip, r2
    60fc:	44bc      	add	ip, r7
    60fe:	4463      	add	r3, ip
    6100:	881a      	ldrh	r2, [r3, #0]
    6102:	4967      	ldr	r1, [pc, #412]	; (62a0 <processOnSMS+0x1808>)
    6104:	2310      	movs	r3, #16
    6106:	2008      	movs	r0, #8
    6108:	4684      	mov	ip, r0
    610a:	44bc      	add	ip, r7
    610c:	4463      	add	r3, ip
    610e:	0018      	movs	r0, r3
    6110:	4b60      	ldr	r3, [pc, #384]	; (6294 <processOnSMS+0x17fc>)
    6112:	4798      	blx	r3
    6114:	e31f      	b.n	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
    6116:	4a63      	ldr	r2, [pc, #396]	; (62a4 <processOnSMS+0x180c>)
    6118:	68fb      	ldr	r3, [r7, #12]
    611a:	0011      	movs	r1, r2
    611c:	0018      	movs	r0, r3
    611e:	4b57      	ldr	r3, [pc, #348]	; (627c <processOnSMS+0x17e4>)
    6120:	4798      	blx	r3
    6122:	1e03      	subs	r3, r0, #0
    6124:	d06d      	beq.n	6202 <processOnSMS+0x176a>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    6126:	68fb      	ldr	r3, [r7, #12]
    6128:	3308      	adds	r3, #8
    612a:	001c      	movs	r4, r3
    612c:	68fb      	ldr	r3, [r7, #12]
    612e:	0018      	movs	r0, r3
    6130:	4b53      	ldr	r3, [pc, #332]	; (6280 <processOnSMS+0x17e8>)
    6132:	4798      	blx	r3
    6134:	0002      	movs	r2, r0
    6136:	68fb      	ldr	r3, [r7, #12]
    6138:	0021      	movs	r1, r4
    613a:	0018      	movs	r0, r3
    613c:	4b51      	ldr	r3, [pc, #324]	; (6284 <processOnSMS+0x17ec>)
    613e:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
    6140:	68fb      	ldr	r3, [r7, #12]
    6142:	0018      	movs	r0, r3
    6144:	4b50      	ldr	r3, [pc, #320]	; (6288 <processOnSMS+0x17f0>)
    6146:	4798      	blx	r3
    6148:	0002      	movs	r2, r0
    614a:	2390      	movs	r3, #144	; 0x90
    614c:	005b      	lsls	r3, r3, #1
    614e:	2108      	movs	r1, #8
    6150:	468c      	mov	ip, r1
    6152:	44bc      	add	ip, r7
    6154:	4463      	add	r3, ip
    6156:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
    6158:	2390      	movs	r3, #144	; 0x90
    615a:	005b      	lsls	r3, r3, #1
    615c:	2208      	movs	r2, #8
    615e:	4694      	mov	ip, r2
    6160:	44bc      	add	ip, r7
    6162:	4463      	add	r3, ip
    6164:	881b      	ldrh	r3, [r3, #0]
    6166:	2b31      	cmp	r3, #49	; 0x31
    6168:	d807      	bhi.n	617a <processOnSMS+0x16e2>
		{
			AUTOTIME = 50;
    616a:	2390      	movs	r3, #144	; 0x90
    616c:	005b      	lsls	r3, r3, #1
    616e:	2208      	movs	r2, #8
    6170:	4694      	mov	ip, r2
    6172:	44bc      	add	ip, r7
    6174:	4463      	add	r3, ip
    6176:	2232      	movs	r2, #50	; 0x32
    6178:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
    617a:	2390      	movs	r3, #144	; 0x90
    617c:	005b      	lsls	r3, r3, #1
    617e:	2208      	movs	r2, #8
    6180:	4694      	mov	ip, r2
    6182:	44bc      	add	ip, r7
    6184:	4463      	add	r3, ip
    6186:	881a      	ldrh	r2, [r3, #0]
    6188:	23e1      	movs	r3, #225	; 0xe1
    618a:	01db      	lsls	r3, r3, #7
    618c:	429a      	cmp	r2, r3
    618e:	d908      	bls.n	61a2 <processOnSMS+0x170a>
		{
			AUTOTIME = 28800;
    6190:	2390      	movs	r3, #144	; 0x90
    6192:	005b      	lsls	r3, r3, #1
    6194:	2208      	movs	r2, #8
    6196:	4694      	mov	ip, r2
    6198:	44bc      	add	ip, r7
    619a:	4463      	add	r3, ip
    619c:	22e1      	movs	r2, #225	; 0xe1
    619e:	01d2      	lsls	r2, r2, #7
    61a0:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
    61a2:	2390      	movs	r3, #144	; 0x90
    61a4:	005b      	lsls	r3, r3, #1
    61a6:	2208      	movs	r2, #8
    61a8:	4694      	mov	ip, r2
    61aa:	44bc      	add	ip, r7
    61ac:	4463      	add	r3, ip
    61ae:	881b      	ldrh	r3, [r3, #0]
    61b0:	0018      	movs	r0, r3
    61b2:	4b3d      	ldr	r3, [pc, #244]	; (62a8 <processOnSMS+0x1810>)
    61b4:	4798      	blx	r3
		incomingSMSProcessed=true;
    61b6:	2328      	movs	r3, #40	; 0x28
    61b8:	33ff      	adds	r3, #255	; 0xff
    61ba:	2208      	movs	r2, #8
    61bc:	4694      	mov	ip, r2
    61be:	44bc      	add	ip, r7
    61c0:	4463      	add	r3, ip
    61c2:	2201      	movs	r2, #1
    61c4:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    61c6:	4b2a      	ldr	r3, [pc, #168]	; (6270 <processOnSMS+0x17d8>)
    61c8:	2294      	movs	r2, #148	; 0x94
    61ca:	0052      	lsls	r2, r2, #1
    61cc:	4694      	mov	ip, r2
    61ce:	2208      	movs	r2, #8
    61d0:	4690      	mov	r8, r2
    61d2:	44b8      	add	r8, r7
    61d4:	44c4      	add	ip, r8
    61d6:	4463      	add	r3, ip
    61d8:	781b      	ldrb	r3, [r3, #0]
    61da:	2b00      	cmp	r3, #0
    61dc:	d100      	bne.n	61e0 <processOnSMS+0x1748>
    61de:	e2ba      	b.n	6756 <processOnSMS+0x1cbe>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
    61e0:	2390      	movs	r3, #144	; 0x90
    61e2:	005b      	lsls	r3, r3, #1
    61e4:	2208      	movs	r2, #8
    61e6:	4694      	mov	ip, r2
    61e8:	44bc      	add	ip, r7
    61ea:	4463      	add	r3, ip
    61ec:	881a      	ldrh	r2, [r3, #0]
    61ee:	492f      	ldr	r1, [pc, #188]	; (62ac <processOnSMS+0x1814>)
    61f0:	2310      	movs	r3, #16
    61f2:	2008      	movs	r0, #8
    61f4:	4684      	mov	ip, r0
    61f6:	44bc      	add	ip, r7
    61f8:	4463      	add	r3, ip
    61fa:	0018      	movs	r0, r3
    61fc:	4b25      	ldr	r3, [pc, #148]	; (6294 <processOnSMS+0x17fc>)
    61fe:	4798      	blx	r3
    6200:	e2a9      	b.n	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
    6202:	4a2b      	ldr	r2, [pc, #172]	; (62b0 <processOnSMS+0x1818>)
    6204:	68fb      	ldr	r3, [r7, #12]
    6206:	0011      	movs	r1, r2
    6208:	0018      	movs	r0, r3
    620a:	4b1c      	ldr	r3, [pc, #112]	; (627c <processOnSMS+0x17e4>)
    620c:	4798      	blx	r3
    620e:	1e03      	subs	r3, r0, #0
    6210:	d000      	beq.n	6214 <processOnSMS+0x177c>
    6212:	e2a0      	b.n	6756 <processOnSMS+0x1cbe>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
    6214:	4a27      	ldr	r2, [pc, #156]	; (62b4 <processOnSMS+0x181c>)
    6216:	68fb      	ldr	r3, [r7, #12]
    6218:	0011      	movs	r1, r2
    621a:	0018      	movs	r0, r3
    621c:	4b17      	ldr	r3, [pc, #92]	; (627c <processOnSMS+0x17e4>)
    621e:	4798      	blx	r3
    6220:	1e03      	subs	r3, r0, #0
    6222:	d04d      	beq.n	62c0 <processOnSMS+0x1828>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    6224:	68fb      	ldr	r3, [r7, #12]
    6226:	1cdc      	adds	r4, r3, #3
    6228:	68fb      	ldr	r3, [r7, #12]
    622a:	0018      	movs	r0, r3
    622c:	4b14      	ldr	r3, [pc, #80]	; (6280 <processOnSMS+0x17e8>)
    622e:	4798      	blx	r3
    6230:	0002      	movs	r2, r0
    6232:	68fb      	ldr	r3, [r7, #12]
    6234:	0021      	movs	r1, r4
    6236:	0018      	movs	r0, r3
    6238:	4b12      	ldr	r3, [pc, #72]	; (6284 <processOnSMS+0x17ec>)
    623a:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
    623c:	68fb      	ldr	r3, [r7, #12]
    623e:	0018      	movs	r0, r3
    6240:	4b1d      	ldr	r3, [pc, #116]	; (62b8 <processOnSMS+0x1820>)
    6242:	4798      	blx	r3
    6244:	1e03      	subs	r3, r0, #0
    6246:	d100      	bne.n	624a <processOnSMS+0x17b2>
    6248:	e285      	b.n	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    624a:	2328      	movs	r3, #40	; 0x28
    624c:	33ff      	adds	r3, #255	; 0xff
    624e:	2208      	movs	r2, #8
    6250:	4694      	mov	ip, r2
    6252:	44bc      	add	ip, r7
    6254:	4463      	add	r3, ip
    6256:	2201      	movs	r2, #1
    6258:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
    625a:	2310      	movs	r3, #16
    625c:	2208      	movs	r2, #8
    625e:	4694      	mov	ip, r2
    6260:	44bc      	add	ip, r7
    6262:	4463      	add	r3, ip
    6264:	4a15      	ldr	r2, [pc, #84]	; (62bc <processOnSMS+0x1824>)
    6266:	ca13      	ldmia	r2!, {r0, r1, r4}
    6268:	c313      	stmia	r3!, {r0, r1, r4}
    626a:	e274      	b.n	6756 <processOnSMS+0x1cbe>
    626c:	000013d1 	.word	0x000013d1
    6270:	fffffeda 	.word	0xfffffeda
    6274:	00018e70 	.word	0x00018e70
    6278:	00018e84 	.word	0x00018e84
    627c:	00003d61 	.word	0x00003d61
    6280:	00017b47 	.word	0x00017b47
    6284:	00017893 	.word	0x00017893
    6288:	0001779d 	.word	0x0001779d
    628c:	000018f1 	.word	0x000018f1
    6290:	00018e8c 	.word	0x00018e8c
    6294:	00017abd 	.word	0x00017abd
    6298:	00018ea4 	.word	0x00018ea4
    629c:	000018a5 	.word	0x000018a5
    62a0:	00018eb0 	.word	0x00018eb0
    62a4:	00018ec8 	.word	0x00018ec8
    62a8:	000012ed 	.word	0x000012ed
    62ac:	00018ed4 	.word	0x00018ed4
    62b0:	00018eec 	.word	0x00018eec
    62b4:	00018ef0 	.word	0x00018ef0
    62b8:	00001a71 	.word	0x00001a71
    62bc:	00018ef4 	.word	0x00018ef4
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
    62c0:	4ad6      	ldr	r2, [pc, #856]	; (661c <processOnSMS+0x1b84>)
    62c2:	68fb      	ldr	r3, [r7, #12]
    62c4:	0011      	movs	r1, r2
    62c6:	0018      	movs	r0, r3
    62c8:	4bd5      	ldr	r3, [pc, #852]	; (6620 <processOnSMS+0x1b88>)
    62ca:	4798      	blx	r3
    62cc:	1e03      	subs	r3, r0, #0
    62ce:	d023      	beq.n	6318 <processOnSMS+0x1880>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    62d0:	68fb      	ldr	r3, [r7, #12]
    62d2:	1cdc      	adds	r4, r3, #3
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	0018      	movs	r0, r3
    62d8:	4bd2      	ldr	r3, [pc, #840]	; (6624 <processOnSMS+0x1b8c>)
    62da:	4798      	blx	r3
    62dc:	0002      	movs	r2, r0
    62de:	68fb      	ldr	r3, [r7, #12]
    62e0:	0021      	movs	r1, r4
    62e2:	0018      	movs	r0, r3
    62e4:	4bd0      	ldr	r3, [pc, #832]	; (6628 <processOnSMS+0x1b90>)
    62e6:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
    62e8:	68fb      	ldr	r3, [r7, #12]
    62ea:	0018      	movs	r0, r3
    62ec:	4bcf      	ldr	r3, [pc, #828]	; (662c <processOnSMS+0x1b94>)
    62ee:	4798      	blx	r3
    62f0:	1e03      	subs	r3, r0, #0
    62f2:	d100      	bne.n	62f6 <processOnSMS+0x185e>
    62f4:	e22f      	b.n	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    62f6:	2328      	movs	r3, #40	; 0x28
    62f8:	33ff      	adds	r3, #255	; 0xff
    62fa:	2208      	movs	r2, #8
    62fc:	4694      	mov	ip, r2
    62fe:	44bc      	add	ip, r7
    6300:	4463      	add	r3, ip
    6302:	2201      	movs	r2, #1
    6304:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
    6306:	2310      	movs	r3, #16
    6308:	2208      	movs	r2, #8
    630a:	4694      	mov	ip, r2
    630c:	44bc      	add	ip, r7
    630e:	4463      	add	r3, ip
    6310:	4ac7      	ldr	r2, [pc, #796]	; (6630 <processOnSMS+0x1b98>)
    6312:	ca13      	ldmia	r2!, {r0, r1, r4}
    6314:	c313      	stmia	r3!, {r0, r1, r4}
    6316:	e21e      	b.n	6756 <processOnSMS+0x1cbe>
		}
	}
	else if (StringstartsWith(received_command,"M+"))
    6318:	4ac6      	ldr	r2, [pc, #792]	; (6634 <processOnSMS+0x1b9c>)
    631a:	68fb      	ldr	r3, [r7, #12]
    631c:	0011      	movs	r1, r2
    631e:	0018      	movs	r0, r3
    6320:	4bbf      	ldr	r3, [pc, #764]	; (6620 <processOnSMS+0x1b88>)
    6322:	4798      	blx	r3
    6324:	1e03      	subs	r3, r0, #0
    6326:	d100      	bne.n	632a <processOnSMS+0x1892>
    6328:	e091      	b.n	644e <processOnSMS+0x19b6>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    632a:	68fb      	ldr	r3, [r7, #12]
    632c:	1c9c      	adds	r4, r3, #2
    632e:	68fb      	ldr	r3, [r7, #12]
    6330:	0018      	movs	r0, r3
    6332:	4bbc      	ldr	r3, [pc, #752]	; (6624 <processOnSMS+0x1b8c>)
    6334:	4798      	blx	r3
    6336:	0002      	movs	r2, r0
    6338:	68fb      	ldr	r3, [r7, #12]
    633a:	0021      	movs	r1, r4
    633c:	0018      	movs	r0, r3
    633e:	4bba      	ldr	r3, [pc, #744]	; (6628 <processOnSMS+0x1b90>)
    6340:	4798      	blx	r3
		bool result = addNumber(received_command);
    6342:	2310      	movs	r3, #16
    6344:	33ff      	adds	r3, #255	; 0xff
    6346:	2208      	movs	r2, #8
    6348:	18ba      	adds	r2, r7, r2
    634a:	18d4      	adds	r4, r2, r3
    634c:	68fb      	ldr	r3, [r7, #12]
    634e:	0018      	movs	r0, r3
    6350:	4bb9      	ldr	r3, [pc, #740]	; (6638 <processOnSMS+0x1ba0>)
    6352:	4798      	blx	r3
    6354:	0003      	movs	r3, r0
    6356:	7023      	strb	r3, [r4, #0]
		if(result)
    6358:	2310      	movs	r3, #16
    635a:	33ff      	adds	r3, #255	; 0xff
    635c:	2208      	movs	r2, #8
    635e:	4694      	mov	ip, r2
    6360:	44bc      	add	ip, r7
    6362:	4463      	add	r3, ip
    6364:	781b      	ldrb	r3, [r3, #0]
    6366:	2b00      	cmp	r3, #0
    6368:	d100      	bne.n	636c <processOnSMS+0x18d4>
    636a:	e1f4      	b.n	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    636c:	2328      	movs	r3, #40	; 0x28
    636e:	33ff      	adds	r3, #255	; 0xff
    6370:	2208      	movs	r2, #8
    6372:	4694      	mov	ip, r2
    6374:	44bc      	add	ip, r7
    6376:	4463      	add	r3, ip
    6378:	2201      	movs	r2, #1
    637a:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
    637c:	4baf      	ldr	r3, [pc, #700]	; (663c <processOnSMS+0x1ba4>)
    637e:	2294      	movs	r2, #148	; 0x94
    6380:	0052      	lsls	r2, r2, #1
    6382:	4694      	mov	ip, r2
    6384:	2208      	movs	r2, #8
    6386:	4690      	mov	r8, r2
    6388:	44b8      	add	r8, r7
    638a:	44c4      	add	ip, r8
    638c:	4463      	add	r3, ip
    638e:	781b      	ldrb	r3, [r3, #0]
    6390:	2b00      	cmp	r3, #0
    6392:	d100      	bne.n	6396 <processOnSMS+0x18fe>
    6394:	e1df      	b.n	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"MOBILE NO:");
    6396:	2310      	movs	r3, #16
    6398:	2208      	movs	r2, #8
    639a:	4694      	mov	ip, r2
    639c:	44bc      	add	ip, r7
    639e:	4463      	add	r3, ip
    63a0:	4aa7      	ldr	r2, [pc, #668]	; (6640 <processOnSMS+0x1ba8>)
    63a2:	ca03      	ldmia	r2!, {r0, r1}
    63a4:	c303      	stmia	r3!, {r0, r1}
    63a6:	8811      	ldrh	r1, [r2, #0]
    63a8:	8019      	strh	r1, [r3, #0]
    63aa:	7892      	ldrb	r2, [r2, #2]
    63ac:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    63ae:	2310      	movs	r3, #16
    63b0:	2208      	movs	r2, #8
    63b2:	4694      	mov	ip, r2
    63b4:	44bc      	add	ip, r7
    63b6:	4463      	add	r3, ip
    63b8:	0018      	movs	r0, r3
    63ba:	4b9a      	ldr	r3, [pc, #616]	; (6624 <processOnSMS+0x1b8c>)
    63bc:	4798      	blx	r3
    63be:	0003      	movs	r3, r0
    63c0:	001a      	movs	r2, r3
    63c2:	2310      	movs	r3, #16
    63c4:	2108      	movs	r1, #8
    63c6:	468c      	mov	ip, r1
    63c8:	44bc      	add	ip, r7
    63ca:	4463      	add	r3, ip
    63cc:	189a      	adds	r2, r3, r2
    63ce:	4b9d      	ldr	r3, [pc, #628]	; (6644 <processOnSMS+0x1bac>)
    63d0:	0010      	movs	r0, r2
    63d2:	0019      	movs	r1, r3
    63d4:	2302      	movs	r3, #2
    63d6:	001a      	movs	r2, r3
    63d8:	4b9b      	ldr	r3, [pc, #620]	; (6648 <processOnSMS+0x1bb0>)
    63da:	4798      	blx	r3
				strcat(resep_msg,received_command);
    63dc:	68fa      	ldr	r2, [r7, #12]
    63de:	2310      	movs	r3, #16
    63e0:	2108      	movs	r1, #8
    63e2:	468c      	mov	ip, r1
    63e4:	44bc      	add	ip, r7
    63e6:	4463      	add	r3, ip
    63e8:	0011      	movs	r1, r2
    63ea:	0018      	movs	r0, r3
    63ec:	4b97      	ldr	r3, [pc, #604]	; (664c <processOnSMS+0x1bb4>)
    63ee:	4798      	blx	r3
				strcat(resep_msg,"\n");
    63f0:	2310      	movs	r3, #16
    63f2:	2208      	movs	r2, #8
    63f4:	4694      	mov	ip, r2
    63f6:	44bc      	add	ip, r7
    63f8:	4463      	add	r3, ip
    63fa:	0018      	movs	r0, r3
    63fc:	4b89      	ldr	r3, [pc, #548]	; (6624 <processOnSMS+0x1b8c>)
    63fe:	4798      	blx	r3
    6400:	0003      	movs	r3, r0
    6402:	001a      	movs	r2, r3
    6404:	2310      	movs	r3, #16
    6406:	2108      	movs	r1, #8
    6408:	468c      	mov	ip, r1
    640a:	44bc      	add	ip, r7
    640c:	4463      	add	r3, ip
    640e:	189a      	adds	r2, r3, r2
    6410:	4b8c      	ldr	r3, [pc, #560]	; (6644 <processOnSMS+0x1bac>)
    6412:	0010      	movs	r0, r2
    6414:	0019      	movs	r1, r3
    6416:	2302      	movs	r3, #2
    6418:	001a      	movs	r2, r3
    641a:	4b8b      	ldr	r3, [pc, #556]	; (6648 <processOnSMS+0x1bb0>)
    641c:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
    641e:	2310      	movs	r3, #16
    6420:	2208      	movs	r2, #8
    6422:	4694      	mov	ip, r2
    6424:	44bc      	add	ip, r7
    6426:	4463      	add	r3, ip
    6428:	0018      	movs	r0, r3
    642a:	4b7e      	ldr	r3, [pc, #504]	; (6624 <processOnSMS+0x1b8c>)
    642c:	4798      	blx	r3
    642e:	0003      	movs	r3, r0
    6430:	001a      	movs	r2, r3
    6432:	2310      	movs	r3, #16
    6434:	2108      	movs	r1, #8
    6436:	468c      	mov	ip, r1
    6438:	44bc      	add	ip, r7
    643a:	4463      	add	r3, ip
    643c:	189a      	adds	r2, r3, r2
    643e:	4b84      	ldr	r3, [pc, #528]	; (6650 <processOnSMS+0x1bb8>)
    6440:	0010      	movs	r0, r2
    6442:	0019      	movs	r1, r3
    6444:	2313      	movs	r3, #19
    6446:	001a      	movs	r2, r3
    6448:	4b7f      	ldr	r3, [pc, #508]	; (6648 <processOnSMS+0x1bb0>)
    644a:	4798      	blx	r3
    644c:	e183      	b.n	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
    644e:	4a81      	ldr	r2, [pc, #516]	; (6654 <processOnSMS+0x1bbc>)
    6450:	68fb      	ldr	r3, [r7, #12]
    6452:	0011      	movs	r1, r2
    6454:	0018      	movs	r0, r3
    6456:	4b72      	ldr	r3, [pc, #456]	; (6620 <processOnSMS+0x1b88>)
    6458:	4798      	blx	r3
    645a:	1e03      	subs	r3, r0, #0
    645c:	d100      	bne.n	6460 <processOnSMS+0x19c8>
    645e:	e091      	b.n	6584 <processOnSMS+0x1aec>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    6460:	68fb      	ldr	r3, [r7, #12]
    6462:	1c9c      	adds	r4, r3, #2
    6464:	68fb      	ldr	r3, [r7, #12]
    6466:	0018      	movs	r0, r3
    6468:	4b6e      	ldr	r3, [pc, #440]	; (6624 <processOnSMS+0x1b8c>)
    646a:	4798      	blx	r3
    646c:	0002      	movs	r2, r0
    646e:	68fb      	ldr	r3, [r7, #12]
    6470:	0021      	movs	r1, r4
    6472:	0018      	movs	r0, r3
    6474:	4b6c      	ldr	r3, [pc, #432]	; (6628 <processOnSMS+0x1b90>)
    6476:	4798      	blx	r3
		bool result = removeNumber(received_command);
    6478:	2387      	movs	r3, #135	; 0x87
    647a:	005b      	lsls	r3, r3, #1
    647c:	2208      	movs	r2, #8
    647e:	18ba      	adds	r2, r7, r2
    6480:	18d4      	adds	r4, r2, r3
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	0018      	movs	r0, r3
    6486:	4b74      	ldr	r3, [pc, #464]	; (6658 <processOnSMS+0x1bc0>)
    6488:	4798      	blx	r3
    648a:	0003      	movs	r3, r0
    648c:	7023      	strb	r3, [r4, #0]
		if(result)
    648e:	2387      	movs	r3, #135	; 0x87
    6490:	005b      	lsls	r3, r3, #1
    6492:	2208      	movs	r2, #8
    6494:	4694      	mov	ip, r2
    6496:	44bc      	add	ip, r7
    6498:	4463      	add	r3, ip
    649a:	781b      	ldrb	r3, [r3, #0]
    649c:	2b00      	cmp	r3, #0
    649e:	d100      	bne.n	64a2 <processOnSMS+0x1a0a>
    64a0:	e159      	b.n	6756 <processOnSMS+0x1cbe>
		{
			incomingSMSProcessed=true;
    64a2:	2328      	movs	r3, #40	; 0x28
    64a4:	33ff      	adds	r3, #255	; 0xff
    64a6:	2208      	movs	r2, #8
    64a8:	4694      	mov	ip, r2
    64aa:	44bc      	add	ip, r7
    64ac:	4463      	add	r3, ip
    64ae:	2201      	movs	r2, #1
    64b0:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    64b2:	4b62      	ldr	r3, [pc, #392]	; (663c <processOnSMS+0x1ba4>)
    64b4:	2294      	movs	r2, #148	; 0x94
    64b6:	0052      	lsls	r2, r2, #1
    64b8:	4694      	mov	ip, r2
    64ba:	2208      	movs	r2, #8
    64bc:	4690      	mov	r8, r2
    64be:	44b8      	add	r8, r7
    64c0:	44c4      	add	ip, r8
    64c2:	4463      	add	r3, ip
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	2b00      	cmp	r3, #0
    64c8:	d100      	bne.n	64cc <processOnSMS+0x1a34>
    64ca:	e144      	b.n	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"MOBILE NO:");
    64cc:	2310      	movs	r3, #16
    64ce:	2208      	movs	r2, #8
    64d0:	4694      	mov	ip, r2
    64d2:	44bc      	add	ip, r7
    64d4:	4463      	add	r3, ip
    64d6:	4a5a      	ldr	r2, [pc, #360]	; (6640 <processOnSMS+0x1ba8>)
    64d8:	ca03      	ldmia	r2!, {r0, r1}
    64da:	c303      	stmia	r3!, {r0, r1}
    64dc:	8811      	ldrh	r1, [r2, #0]
    64de:	8019      	strh	r1, [r3, #0]
    64e0:	7892      	ldrb	r2, [r2, #2]
    64e2:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    64e4:	2310      	movs	r3, #16
    64e6:	2208      	movs	r2, #8
    64e8:	4694      	mov	ip, r2
    64ea:	44bc      	add	ip, r7
    64ec:	4463      	add	r3, ip
    64ee:	0018      	movs	r0, r3
    64f0:	4b4c      	ldr	r3, [pc, #304]	; (6624 <processOnSMS+0x1b8c>)
    64f2:	4798      	blx	r3
    64f4:	0003      	movs	r3, r0
    64f6:	001a      	movs	r2, r3
    64f8:	2310      	movs	r3, #16
    64fa:	2108      	movs	r1, #8
    64fc:	468c      	mov	ip, r1
    64fe:	44bc      	add	ip, r7
    6500:	4463      	add	r3, ip
    6502:	189a      	adds	r2, r3, r2
    6504:	4b4f      	ldr	r3, [pc, #316]	; (6644 <processOnSMS+0x1bac>)
    6506:	0010      	movs	r0, r2
    6508:	0019      	movs	r1, r3
    650a:	2302      	movs	r3, #2
    650c:	001a      	movs	r2, r3
    650e:	4b4e      	ldr	r3, [pc, #312]	; (6648 <processOnSMS+0x1bb0>)
    6510:	4798      	blx	r3
				strcat(resep_msg,received_command);
    6512:	68fa      	ldr	r2, [r7, #12]
    6514:	2310      	movs	r3, #16
    6516:	2108      	movs	r1, #8
    6518:	468c      	mov	ip, r1
    651a:	44bc      	add	ip, r7
    651c:	4463      	add	r3, ip
    651e:	0011      	movs	r1, r2
    6520:	0018      	movs	r0, r3
    6522:	4b4a      	ldr	r3, [pc, #296]	; (664c <processOnSMS+0x1bb4>)
    6524:	4798      	blx	r3
				strcat(resep_msg,"\n");
    6526:	2310      	movs	r3, #16
    6528:	2208      	movs	r2, #8
    652a:	4694      	mov	ip, r2
    652c:	44bc      	add	ip, r7
    652e:	4463      	add	r3, ip
    6530:	0018      	movs	r0, r3
    6532:	4b3c      	ldr	r3, [pc, #240]	; (6624 <processOnSMS+0x1b8c>)
    6534:	4798      	blx	r3
    6536:	0003      	movs	r3, r0
    6538:	001a      	movs	r2, r3
    653a:	2310      	movs	r3, #16
    653c:	2108      	movs	r1, #8
    653e:	468c      	mov	ip, r1
    6540:	44bc      	add	ip, r7
    6542:	4463      	add	r3, ip
    6544:	189a      	adds	r2, r3, r2
    6546:	4b3f      	ldr	r3, [pc, #252]	; (6644 <processOnSMS+0x1bac>)
    6548:	0010      	movs	r0, r2
    654a:	0019      	movs	r1, r3
    654c:	2302      	movs	r3, #2
    654e:	001a      	movs	r2, r3
    6550:	4b3d      	ldr	r3, [pc, #244]	; (6648 <processOnSMS+0x1bb0>)
    6552:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
    6554:	2310      	movs	r3, #16
    6556:	2208      	movs	r2, #8
    6558:	4694      	mov	ip, r2
    655a:	44bc      	add	ip, r7
    655c:	4463      	add	r3, ip
    655e:	0018      	movs	r0, r3
    6560:	4b30      	ldr	r3, [pc, #192]	; (6624 <processOnSMS+0x1b8c>)
    6562:	4798      	blx	r3
    6564:	0003      	movs	r3, r0
    6566:	001a      	movs	r2, r3
    6568:	2310      	movs	r3, #16
    656a:	2108      	movs	r1, #8
    656c:	468c      	mov	ip, r1
    656e:	44bc      	add	ip, r7
    6570:	4463      	add	r3, ip
    6572:	189a      	adds	r2, r3, r2
    6574:	4b39      	ldr	r3, [pc, #228]	; (665c <processOnSMS+0x1bc4>)
    6576:	0010      	movs	r0, r2
    6578:	0019      	movs	r1, r3
    657a:	2315      	movs	r3, #21
    657c:	001a      	movs	r2, r3
    657e:	4b32      	ldr	r3, [pc, #200]	; (6648 <processOnSMS+0x1bb0>)
    6580:	4798      	blx	r3
    6582:	e0e8      	b.n	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
    6584:	4a36      	ldr	r2, [pc, #216]	; (6660 <processOnSMS+0x1bc8>)
    6586:	68fb      	ldr	r3, [r7, #12]
    6588:	0011      	movs	r1, r2
    658a:	0018      	movs	r0, r3
    658c:	4b24      	ldr	r3, [pc, #144]	; (6620 <processOnSMS+0x1b88>)
    658e:	4798      	blx	r3
    6590:	1e03      	subs	r3, r0, #0
    6592:	d06b      	beq.n	666c <processOnSMS+0x1bd4>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    6594:	68fb      	ldr	r3, [r7, #12]
    6596:	1cdc      	adds	r4, r3, #3
    6598:	68fb      	ldr	r3, [r7, #12]
    659a:	0018      	movs	r0, r3
    659c:	4b21      	ldr	r3, [pc, #132]	; (6624 <processOnSMS+0x1b8c>)
    659e:	4798      	blx	r3
    65a0:	0002      	movs	r2, r0
    65a2:	68fb      	ldr	r3, [r7, #12]
    65a4:	0021      	movs	r1, r4
    65a6:	0018      	movs	r0, r3
    65a8:	4b1f      	ldr	r3, [pc, #124]	; (6628 <processOnSMS+0x1b90>)
    65aa:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
    65ac:	230e      	movs	r3, #14
    65ae:	33ff      	adds	r3, #255	; 0xff
    65b0:	2208      	movs	r2, #8
    65b2:	18ba      	adds	r2, r7, r2
    65b4:	18d4      	adds	r4, r2, r3
    65b6:	68fb      	ldr	r3, [r7, #12]
    65b8:	0018      	movs	r0, r3
    65ba:	4b2a      	ldr	r3, [pc, #168]	; (6664 <processOnSMS+0x1bcc>)
    65bc:	4798      	blx	r3
    65be:	0003      	movs	r3, r0
    65c0:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
    65c2:	2328      	movs	r3, #40	; 0x28
    65c4:	33ff      	adds	r3, #255	; 0xff
    65c6:	2208      	movs	r2, #8
    65c8:	4694      	mov	ip, r2
    65ca:	44bc      	add	ip, r7
    65cc:	4463      	add	r3, ip
    65ce:	2201      	movs	r2, #1
    65d0:	701a      	strb	r2, [r3, #0]
			if(result)
    65d2:	230e      	movs	r3, #14
    65d4:	33ff      	adds	r3, #255	; 0xff
    65d6:	2208      	movs	r2, #8
    65d8:	4694      	mov	ip, r2
    65da:	44bc      	add	ip, r7
    65dc:	4463      	add	r3, ip
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d100      	bne.n	65e6 <processOnSMS+0x1b4e>
    65e4:	e0b7      	b.n	6756 <processOnSMS+0x1cbe>
			{
				if (response_sms_processed_cmd == true)
    65e6:	4b15      	ldr	r3, [pc, #84]	; (663c <processOnSMS+0x1ba4>)
    65e8:	2294      	movs	r2, #148	; 0x94
    65ea:	0052      	lsls	r2, r2, #1
    65ec:	4694      	mov	ip, r2
    65ee:	2208      	movs	r2, #8
    65f0:	4690      	mov	r8, r2
    65f2:	44b8      	add	r8, r7
    65f4:	44c4      	add	ip, r8
    65f6:	4463      	add	r3, ip
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	2b00      	cmp	r3, #0
    65fc:	d100      	bne.n	6600 <processOnSMS+0x1b68>
    65fe:	e0aa      	b.n	6756 <processOnSMS+0x1cbe>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
    6600:	2310      	movs	r3, #16
    6602:	2208      	movs	r2, #8
    6604:	4694      	mov	ip, r2
    6606:	44bc      	add	ip, r7
    6608:	4463      	add	r3, ip
    660a:	4a17      	ldr	r2, [pc, #92]	; (6668 <processOnSMS+0x1bd0>)
    660c:	ca13      	ldmia	r2!, {r0, r1, r4}
    660e:	c313      	stmia	r3!, {r0, r1, r4}
    6610:	ca13      	ldmia	r2!, {r0, r1, r4}
    6612:	c313      	stmia	r3!, {r0, r1, r4}
    6614:	ca03      	ldmia	r2!, {r0, r1}
    6616:	c303      	stmia	r3!, {r0, r1}
    6618:	e09d      	b.n	6756 <processOnSMS+0x1cbe>
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	00018f00 	.word	0x00018f00
    6620:	00003d61 	.word	0x00003d61
    6624:	00017b47 	.word	0x00017b47
    6628:	00017893 	.word	0x00017893
    662c:	00001b1d 	.word	0x00001b1d
    6630:	00018f04 	.word	0x00018f04
    6634:	00018f10 	.word	0x00018f10
    6638:	00000ee9 	.word	0x00000ee9
    663c:	fffffeda 	.word	0xfffffeda
    6640:	00018f14 	.word	0x00018f14
    6644:	00018f20 	.word	0x00018f20
    6648:	00017881 	.word	0x00017881
    664c:	00017b01 	.word	0x00017b01
    6650:	00018f24 	.word	0x00018f24
    6654:	00018f38 	.word	0x00018f38
    6658:	00000fe5 	.word	0x00000fe5
    665c:	00018f3c 	.word	0x00018f3c
    6660:	00018f54 	.word	0x00018f54
    6664:	00001231 	.word	0x00001231
    6668:	00018f58 	.word	0x00018f58
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
    666c:	4a60      	ldr	r2, [pc, #384]	; (67f0 <processOnSMS+0x1d58>)
    666e:	68fb      	ldr	r3, [r7, #12]
    6670:	0011      	movs	r1, r2
    6672:	0018      	movs	r0, r3
    6674:	4b5f      	ldr	r3, [pc, #380]	; (67f4 <processOnSMS+0x1d5c>)
    6676:	4798      	blx	r3
    6678:	1e03      	subs	r3, r0, #0
    667a:	d02e      	beq.n	66da <processOnSMS+0x1c42>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	1cdc      	adds	r4, r3, #3
    6680:	68fb      	ldr	r3, [r7, #12]
    6682:	0018      	movs	r0, r3
    6684:	4b5c      	ldr	r3, [pc, #368]	; (67f8 <processOnSMS+0x1d60>)
    6686:	4798      	blx	r3
    6688:	0002      	movs	r2, r0
    668a:	68fb      	ldr	r3, [r7, #12]
    668c:	0021      	movs	r1, r4
    668e:	0018      	movs	r0, r3
    6690:	4b5a      	ldr	r3, [pc, #360]	; (67fc <processOnSMS+0x1d64>)
    6692:	4798      	blx	r3
			addM2MNumber(received_command);
    6694:	68fb      	ldr	r3, [r7, #12]
    6696:	0018      	movs	r0, r3
    6698:	4b59      	ldr	r3, [pc, #356]	; (6800 <processOnSMS+0x1d68>)
    669a:	4798      	blx	r3
			incomingSMSProcessed=true;
    669c:	2328      	movs	r3, #40	; 0x28
    669e:	33ff      	adds	r3, #255	; 0xff
    66a0:	2208      	movs	r2, #8
    66a2:	4694      	mov	ip, r2
    66a4:	44bc      	add	ip, r7
    66a6:	4463      	add	r3, ip
    66a8:	2201      	movs	r2, #1
    66aa:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    66ac:	4b55      	ldr	r3, [pc, #340]	; (6804 <processOnSMS+0x1d6c>)
    66ae:	2294      	movs	r2, #148	; 0x94
    66b0:	0052      	lsls	r2, r2, #1
    66b2:	4694      	mov	ip, r2
    66b4:	2208      	movs	r2, #8
    66b6:	4690      	mov	r8, r2
    66b8:	44b8      	add	r8, r7
    66ba:	44c4      	add	ip, r8
    66bc:	4463      	add	r3, ip
    66be:	781b      	ldrb	r3, [r3, #0]
    66c0:	2b00      	cmp	r3, #0
    66c2:	d048      	beq.n	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
    66c4:	2310      	movs	r3, #16
    66c6:	2208      	movs	r2, #8
    66c8:	4694      	mov	ip, r2
    66ca:	44bc      	add	ip, r7
    66cc:	4463      	add	r3, ip
    66ce:	4a4e      	ldr	r2, [pc, #312]	; (6808 <processOnSMS+0x1d70>)
    66d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    66d2:	c313      	stmia	r3!, {r0, r1, r4}
    66d4:	8812      	ldrh	r2, [r2, #0]
    66d6:	801a      	strh	r2, [r3, #0]
    66d8:	e03d      	b.n	6756 <processOnSMS+0x1cbe>
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
    66da:	4a4c      	ldr	r2, [pc, #304]	; (680c <processOnSMS+0x1d74>)
    66dc:	68fb      	ldr	r3, [r7, #12]
    66de:	0011      	movs	r1, r2
    66e0:	0018      	movs	r0, r3
    66e2:	4b44      	ldr	r3, [pc, #272]	; (67f4 <processOnSMS+0x1d5c>)
    66e4:	4798      	blx	r3
    66e6:	1e03      	subs	r3, r0, #0
    66e8:	d035      	beq.n	6756 <processOnSMS+0x1cbe>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
    66ea:	4b49      	ldr	r3, [pc, #292]	; (6810 <processOnSMS+0x1d78>)
    66ec:	78db      	ldrb	r3, [r3, #3]
    66ee:	2b00      	cmp	r3, #0
    66f0:	d031      	beq.n	6756 <processOnSMS+0x1cbe>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    66f2:	68fb      	ldr	r3, [r7, #12]
    66f4:	1cdc      	adds	r4, r3, #3
    66f6:	68fb      	ldr	r3, [r7, #12]
    66f8:	0018      	movs	r0, r3
    66fa:	4b3f      	ldr	r3, [pc, #252]	; (67f8 <processOnSMS+0x1d60>)
    66fc:	4798      	blx	r3
    66fe:	0002      	movs	r2, r0
    6700:	68fb      	ldr	r3, [r7, #12]
    6702:	0021      	movs	r1, r4
    6704:	0018      	movs	r0, r3
    6706:	4b3d      	ldr	r3, [pc, #244]	; (67fc <processOnSMS+0x1d64>)
    6708:	4798      	blx	r3
			incomingSMSProcessed=true;
    670a:	2328      	movs	r3, #40	; 0x28
    670c:	33ff      	adds	r3, #255	; 0xff
    670e:	2208      	movs	r2, #8
    6710:	4694      	mov	ip, r2
    6712:	44bc      	add	ip, r7
    6714:	4463      	add	r3, ip
    6716:	2201      	movs	r2, #1
    6718:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
    671a:	68fb      	ldr	r3, [r7, #12]
    671c:	0018      	movs	r0, r3
    671e:	4b3d      	ldr	r3, [pc, #244]	; (6814 <processOnSMS+0x1d7c>)
    6720:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    6722:	4b38      	ldr	r3, [pc, #224]	; (6804 <processOnSMS+0x1d6c>)
    6724:	2294      	movs	r2, #148	; 0x94
    6726:	0052      	lsls	r2, r2, #1
    6728:	4694      	mov	ip, r2
    672a:	2208      	movs	r2, #8
    672c:	4690      	mov	r8, r2
    672e:	44b8      	add	r8, r7
    6730:	44c4      	add	ip, r8
    6732:	4463      	add	r3, ip
    6734:	781b      	ldrb	r3, [r3, #0]
    6736:	2b00      	cmp	r3, #0
    6738:	d00d      	beq.n	6756 <processOnSMS+0x1cbe>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
    673a:	2310      	movs	r3, #16
    673c:	2208      	movs	r2, #8
    673e:	4694      	mov	ip, r2
    6740:	44bc      	add	ip, r7
    6742:	4463      	add	r3, ip
    6744:	4a34      	ldr	r2, [pc, #208]	; (6818 <processOnSMS+0x1d80>)
    6746:	ca13      	ldmia	r2!, {r0, r1, r4}
    6748:	c313      	stmia	r3!, {r0, r1, r4}
    674a:	ca03      	ldmia	r2!, {r0, r1}
    674c:	c303      	stmia	r3!, {r0, r1}
    674e:	7812      	ldrb	r2, [r2, #0]
    6750:	701a      	strb	r2, [r3, #0]
    6752:	e000      	b.n	6756 <processOnSMS+0x1cbe>
		if (alternateNumber_struct.alterNumberPresent)
    6754:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
    6756:	4b2b      	ldr	r3, [pc, #172]	; (6804 <processOnSMS+0x1d6c>)
    6758:	2294      	movs	r2, #148	; 0x94
    675a:	0052      	lsls	r2, r2, #1
    675c:	4694      	mov	ip, r2
    675e:	2208      	movs	r2, #8
    6760:	4690      	mov	r8, r2
    6762:	44b8      	add	r8, r7
    6764:	44c4      	add	ip, r8
    6766:	4463      	add	r3, ip
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	2b00      	cmp	r3, #0
    676c:	d03a      	beq.n	67e4 <processOnSMS+0x1d4c>
	{
		if(!incomingSMSProcessed)
    676e:	2328      	movs	r3, #40	; 0x28
    6770:	33ff      	adds	r3, #255	; 0xff
    6772:	2208      	movs	r2, #8
    6774:	4694      	mov	ip, r2
    6776:	44bc      	add	ip, r7
    6778:	4463      	add	r3, ip
    677a:	781b      	ldrb	r3, [r3, #0]
    677c:	2201      	movs	r2, #1
    677e:	4053      	eors	r3, r2
    6780:	b2db      	uxtb	r3, r3
    6782:	2b00      	cmp	r3, #0
    6784:	d011      	beq.n	67aa <processOnSMS+0x1d12>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
    6786:	238e      	movs	r3, #142	; 0x8e
    6788:	005b      	lsls	r3, r3, #1
    678a:	2208      	movs	r2, #8
    678c:	4694      	mov	ip, r2
    678e:	44bc      	add	ip, r7
    6790:	4463      	add	r3, ip
    6792:	681b      	ldr	r3, [r3, #0]
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	001a      	movs	r2, r3
    6798:	4920      	ldr	r1, [pc, #128]	; (681c <processOnSMS+0x1d84>)
    679a:	2310      	movs	r3, #16
    679c:	2008      	movs	r0, #8
    679e:	4684      	mov	ip, r0
    67a0:	44bc      	add	ip, r7
    67a2:	4463      	add	r3, ip
    67a4:	0018      	movs	r0, r3
    67a6:	4b1e      	ldr	r3, [pc, #120]	; (6820 <processOnSMS+0x1d88>)
    67a8:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    67aa:	23a0      	movs	r3, #160	; 0xa0
    67ac:	005b      	lsls	r3, r3, #1
    67ae:	2208      	movs	r2, #8
    67b0:	4694      	mov	ip, r2
    67b2:	44bc      	add	ip, r7
    67b4:	4463      	add	r3, ip
    67b6:	681b      	ldr	r3, [r3, #0]
    67b8:	2200      	movs	r2, #0
    67ba:	0019      	movs	r1, r3
    67bc:	2005      	movs	r0, #5
    67be:	4b19      	ldr	r3, [pc, #100]	; (6824 <processOnSMS+0x1d8c>)
    67c0:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
    67c2:	2310      	movs	r3, #16
    67c4:	2208      	movs	r2, #8
    67c6:	18ba      	adds	r2, r7, r2
    67c8:	18d2      	adds	r2, r2, r3
    67ca:	23a0      	movs	r3, #160	; 0xa0
    67cc:	005b      	lsls	r3, r3, #1
    67ce:	2108      	movs	r1, #8
    67d0:	468c      	mov	ip, r1
    67d2:	44bc      	add	ip, r7
    67d4:	4463      	add	r3, ip
    67d6:	681b      	ldr	r3, [r3, #0]
    67d8:	0011      	movs	r1, r2
    67da:	0018      	movs	r0, r3
    67dc:	4b12      	ldr	r3, [pc, #72]	; (6828 <processOnSMS+0x1d90>)
    67de:	4798      	blx	r3
    67e0:	e000      	b.n	67e4 <processOnSMS+0x1d4c>
		return;
    67e2:	46c0      	nop			; (mov r8, r8)
	}
}
    67e4:	46bd      	mov	sp, r7
    67e6:	b04c      	add	sp, #304	; 0x130
    67e8:	bc04      	pop	{r2}
    67ea:	4690      	mov	r8, r2
    67ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	00018f78 	.word	0x00018f78
    67f4:	00003d61 	.word	0x00003d61
    67f8:	00017b47 	.word	0x00017b47
    67fc:	00017893 	.word	0x00017893
    6800:	00000c41 	.word	0x00000c41
    6804:	fffffeda 	.word	0xfffffeda
    6808:	00018f7c 	.word	0x00018f7c
    680c:	00018f8c 	.word	0x00018f8c
    6810:	20000618 	.word	0x20000618
    6814:	00000ca9 	.word	0x00000ca9
    6818:	00018f90 	.word	0x00018f90
    681c:	00018fa8 	.word	0x00018fa8
    6820:	00017abd 	.word	0x00017abd
    6824:	0000b93d 	.word	0x0000b93d
    6828:	00002861 	.word	0x00002861

0000682c <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
    682c:	b5f0      	push	{r4, r5, r6, r7, lr}
    682e:	b091      	sub	sp, #68	; 0x44
    6830:	af06      	add	r7, sp, #24
    6832:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
    6834:	2327      	movs	r3, #39	; 0x27
    6836:	18fc      	adds	r4, r7, r3
    6838:	4b32      	ldr	r3, [pc, #200]	; (6904 <buildStatusMessage+0xd8>)
    683a:	4798      	blx	r3
    683c:	0003      	movs	r3, r0
    683e:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
    6840:	4b31      	ldr	r3, [pc, #196]	; (6908 <buildStatusMessage+0xdc>)
    6842:	785b      	ldrb	r3, [r3, #1]
    6844:	b2db      	uxtb	r3, r3
    6846:	2b02      	cmp	r3, #2
    6848:	d009      	beq.n	685e <buildStatusMessage+0x32>
    684a:	2b03      	cmp	r3, #3
    684c:	d10d      	bne.n	686a <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
    684e:	231c      	movs	r3, #28
    6850:	18fb      	adds	r3, r7, r3
    6852:	4a2e      	ldr	r2, [pc, #184]	; (690c <buildStatusMessage+0xe0>)
    6854:	8811      	ldrh	r1, [r2, #0]
    6856:	8019      	strh	r1, [r3, #0]
    6858:	7892      	ldrb	r2, [r2, #2]
    685a:	709a      	strb	r2, [r3, #2]
		break;
    685c:	e00a      	b.n	6874 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
    685e:	231c      	movs	r3, #28
    6860:	18fb      	adds	r3, r7, r3
    6862:	4a2b      	ldr	r2, [pc, #172]	; (6910 <buildStatusMessage+0xe4>)
    6864:	ca03      	ldmia	r2!, {r0, r1}
    6866:	c303      	stmia	r3!, {r0, r1}
		break;
    6868:	e004      	b.n	6874 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
    686a:	231c      	movs	r3, #28
    686c:	18fb      	adds	r3, r7, r3
    686e:	4a29      	ldr	r2, [pc, #164]	; (6914 <buildStatusMessage+0xe8>)
    6870:	601a      	str	r2, [r3, #0]
		break;
    6872:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    6874:	4b24      	ldr	r3, [pc, #144]	; (6908 <buildStatusMessage+0xdc>)
    6876:	781b      	ldrb	r3, [r3, #0]
    6878:	b2db      	uxtb	r3, r3
    687a:	2b02      	cmp	r3, #2
    687c:	d107      	bne.n	688e <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
    687e:	2314      	movs	r3, #20
    6880:	18fb      	adds	r3, r7, r3
    6882:	4a25      	ldr	r2, [pc, #148]	; (6918 <buildStatusMessage+0xec>)
    6884:	8811      	ldrh	r1, [r2, #0]
    6886:	8019      	strh	r1, [r3, #0]
    6888:	7892      	ldrb	r2, [r2, #2]
    688a:	709a      	strb	r2, [r3, #2]
    688c:	e006      	b.n	689c <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
    688e:	2314      	movs	r3, #20
    6890:	18fb      	adds	r3, r7, r3
    6892:	4a22      	ldr	r2, [pc, #136]	; (691c <buildStatusMessage+0xf0>)
    6894:	6811      	ldr	r1, [r2, #0]
    6896:	6019      	str	r1, [r3, #0]
    6898:	8892      	ldrh	r2, [r2, #4]
    689a:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
    689c:	4b20      	ldr	r3, [pc, #128]	; (6920 <buildStatusMessage+0xf4>)
    689e:	4798      	blx	r3
    68a0:	1e03      	subs	r3, r0, #0
    68a2:	d007      	beq.n	68b4 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
    68a4:	230c      	movs	r3, #12
    68a6:	18fb      	adds	r3, r7, r3
    68a8:	4a18      	ldr	r2, [pc, #96]	; (690c <buildStatusMessage+0xe0>)
    68aa:	8811      	ldrh	r1, [r2, #0]
    68ac:	8019      	strh	r1, [r3, #0]
    68ae:	7892      	ldrb	r2, [r2, #2]
    68b0:	709a      	strb	r2, [r3, #2]
    68b2:	e003      	b.n	68bc <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
    68b4:	230c      	movs	r3, #12
    68b6:	18fb      	adds	r3, r7, r3
    68b8:	4a16      	ldr	r2, [pc, #88]	; (6914 <buildStatusMessage+0xe8>)
    68ba:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    68bc:	4b19      	ldr	r3, [pc, #100]	; (6924 <buildStatusMessage+0xf8>)
    68be:	681c      	ldr	r4, [r3, #0]
    68c0:	4b18      	ldr	r3, [pc, #96]	; (6924 <buildStatusMessage+0xf8>)
    68c2:	685d      	ldr	r5, [r3, #4]
    68c4:	4b17      	ldr	r3, [pc, #92]	; (6924 <buildStatusMessage+0xf8>)
    68c6:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
    68c8:	4a16      	ldr	r2, [pc, #88]	; (6924 <buildStatusMessage+0xf8>)
    68ca:	8a92      	ldrh	r2, [r2, #20]
    68cc:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    68ce:	0016      	movs	r6, r2
    68d0:	2227      	movs	r2, #39	; 0x27
    68d2:	18ba      	adds	r2, r7, r2
    68d4:	7812      	ldrb	r2, [r2, #0]
    68d6:	4914      	ldr	r1, [pc, #80]	; (6928 <buildStatusMessage+0xfc>)
    68d8:	6878      	ldr	r0, [r7, #4]
    68da:	9205      	str	r2, [sp, #20]
    68dc:	9604      	str	r6, [sp, #16]
    68de:	220c      	movs	r2, #12
    68e0:	18ba      	adds	r2, r7, r2
    68e2:	9203      	str	r2, [sp, #12]
    68e4:	2214      	movs	r2, #20
    68e6:	18ba      	adds	r2, r7, r2
    68e8:	9202      	str	r2, [sp, #8]
    68ea:	221c      	movs	r2, #28
    68ec:	18ba      	adds	r2, r7, r2
    68ee:	9201      	str	r2, [sp, #4]
    68f0:	9300      	str	r3, [sp, #0]
    68f2:	002b      	movs	r3, r5
    68f4:	0022      	movs	r2, r4
    68f6:	4c0d      	ldr	r4, [pc, #52]	; (692c <buildStatusMessage+0x100>)
    68f8:	47a0      	blx	r4
}
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	46bd      	mov	sp, r7
    68fe:	b00b      	add	sp, #44	; 0x2c
    6900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6902:	46c0      	nop			; (mov r8, r8)
    6904:	00002619 	.word	0x00002619
    6908:	2000070c 	.word	0x2000070c
    690c:	00018fb4 	.word	0x00018fb4
    6910:	00018fb8 	.word	0x00018fb8
    6914:	0046464f 	.word	0x0046464f
    6918:	00018fc0 	.word	0x00018fc0
    691c:	00018fc4 	.word	0x00018fc4
    6920:	00009c89 	.word	0x00009c89
    6924:	200006c8 	.word	0x200006c8
    6928:	00018fcc 	.word	0x00018fcc
    692c:	00017abd 	.word	0x00017abd

00006930 <checkNumber>:


bool checkNumber(char *number)
{
    6930:	b580      	push	{r7, lr}
    6932:	b082      	sub	sp, #8
    6934:	af00      	add	r7, sp, #0
    6936:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	0018      	movs	r0, r3
    693c:	4b0a      	ldr	r3, [pc, #40]	; (6968 <checkNumber+0x38>)
    693e:	4798      	blx	r3
    6940:	1e03      	subs	r3, r0, #0
    6942:	d109      	bne.n	6958 <checkNumber+0x28>
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	0018      	movs	r0, r3
    6948:	4b08      	ldr	r3, [pc, #32]	; (696c <checkNumber+0x3c>)
    694a:	4798      	blx	r3
    694c:	0003      	movs	r3, r0
    694e:	001a      	movs	r2, r3
    6950:	4b07      	ldr	r3, [pc, #28]	; (6970 <checkNumber+0x40>)
    6952:	785b      	ldrb	r3, [r3, #1]
    6954:	429a      	cmp	r2, r3
    6956:	d201      	bcs.n	695c <checkNumber+0x2c>
	{
		return true;
    6958:	2301      	movs	r3, #1
    695a:	e000      	b.n	695e <checkNumber+0x2e>
	}
	else
	{
		return false;
    695c:	2300      	movs	r3, #0
	}
}
    695e:	0018      	movs	r0, r3
    6960:	46bd      	mov	sp, r7
    6962:	b002      	add	sp, #8
    6964:	bd80      	pop	{r7, pc}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	0000193d 	.word	0x0000193d
    696c:	00000de5 	.word	0x00000de5
    6970:	20000600 	.word	0x20000600

00006974 <checkNoCallTime>:

bool checkNoCallTime(void)
{
    6974:	b580      	push	{r7, lr}
    6976:	b082      	sub	sp, #8
    6978:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
    697a:	1dba      	adds	r2, r7, #6
    697c:	1dfb      	adds	r3, r7, #7
    697e:	0011      	movs	r1, r2
    6980:	0018      	movs	r0, r3
    6982:	4b2b      	ldr	r3, [pc, #172]	; (6a30 <checkNoCallTime+0xbc>)
    6984:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
    6986:	4b2b      	ldr	r3, [pc, #172]	; (6a34 <checkNoCallTime+0xc0>)
    6988:	7a9a      	ldrb	r2, [r3, #10]
    698a:	1dfb      	adds	r3, r7, #7
    698c:	781b      	ldrb	r3, [r3, #0]
    698e:	429a      	cmp	r2, r3
    6990:	d849      	bhi.n	6a26 <checkNoCallTime+0xb2>
    6992:	4b28      	ldr	r3, [pc, #160]	; (6a34 <checkNoCallTime+0xc0>)
    6994:	7b1a      	ldrb	r2, [r3, #12]
    6996:	1dfb      	adds	r3, r7, #7
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	429a      	cmp	r2, r3
    699c:	d343      	bcc.n	6a26 <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
    699e:	4b25      	ldr	r3, [pc, #148]	; (6a34 <checkNoCallTime+0xc0>)
    69a0:	7a9a      	ldrb	r2, [r3, #10]
    69a2:	4b24      	ldr	r3, [pc, #144]	; (6a34 <checkNoCallTime+0xc0>)
    69a4:	7b1b      	ldrb	r3, [r3, #12]
    69a6:	429a      	cmp	r2, r3
    69a8:	d10f      	bne.n	69ca <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    69aa:	4b22      	ldr	r3, [pc, #136]	; (6a34 <checkNoCallTime+0xc0>)
    69ac:	7ada      	ldrb	r2, [r3, #11]
    69ae:	1dbb      	adds	r3, r7, #6
    69b0:	781b      	ldrb	r3, [r3, #0]
    69b2:	429a      	cmp	r2, r3
    69b4:	d807      	bhi.n	69c6 <checkNoCallTime+0x52>
    69b6:	4b1f      	ldr	r3, [pc, #124]	; (6a34 <checkNoCallTime+0xc0>)
    69b8:	7b5a      	ldrb	r2, [r3, #13]
    69ba:	1dbb      	adds	r3, r7, #6
    69bc:	781b      	ldrb	r3, [r3, #0]
    69be:	429a      	cmp	r2, r3
    69c0:	d301      	bcc.n	69c6 <checkNoCallTime+0x52>
			return true;
    69c2:	2301      	movs	r3, #1
    69c4:	e030      	b.n	6a28 <checkNoCallTime+0xb4>
			else
			return false;
    69c6:	2300      	movs	r3, #0
    69c8:	e02e      	b.n	6a28 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
    69ca:	4b1a      	ldr	r3, [pc, #104]	; (6a34 <checkNoCallTime+0xc0>)
    69cc:	7a9a      	ldrb	r2, [r3, #10]
    69ce:	1dfb      	adds	r3, r7, #7
    69d0:	781b      	ldrb	r3, [r3, #0]
    69d2:	429a      	cmp	r2, r3
    69d4:	d109      	bne.n	69ea <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
    69d6:	4b17      	ldr	r3, [pc, #92]	; (6a34 <checkNoCallTime+0xc0>)
    69d8:	7ada      	ldrb	r2, [r3, #11]
    69da:	1dbb      	adds	r3, r7, #6
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	429a      	cmp	r2, r3
    69e0:	d801      	bhi.n	69e6 <checkNoCallTime+0x72>
			return true;
    69e2:	2301      	movs	r3, #1
    69e4:	e020      	b.n	6a28 <checkNoCallTime+0xb4>
			else
			return false;
    69e6:	2300      	movs	r3, #0
    69e8:	e01e      	b.n	6a28 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
    69ea:	4b12      	ldr	r3, [pc, #72]	; (6a34 <checkNoCallTime+0xc0>)
    69ec:	7b1a      	ldrb	r2, [r3, #12]
    69ee:	1dfb      	adds	r3, r7, #7
    69f0:	781b      	ldrb	r3, [r3, #0]
    69f2:	429a      	cmp	r2, r3
    69f4:	d109      	bne.n	6a0a <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    69f6:	4b0f      	ldr	r3, [pc, #60]	; (6a34 <checkNoCallTime+0xc0>)
    69f8:	7b5a      	ldrb	r2, [r3, #13]
    69fa:	1dbb      	adds	r3, r7, #6
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	429a      	cmp	r2, r3
    6a00:	d301      	bcc.n	6a06 <checkNoCallTime+0x92>
			return true;
    6a02:	2301      	movs	r3, #1
    6a04:	e010      	b.n	6a28 <checkNoCallTime+0xb4>
			else
			return false;
    6a06:	2300      	movs	r3, #0
    6a08:	e00e      	b.n	6a28 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
    6a0a:	4b0a      	ldr	r3, [pc, #40]	; (6a34 <checkNoCallTime+0xc0>)
    6a0c:	7a9a      	ldrb	r2, [r3, #10]
    6a0e:	1dfb      	adds	r3, r7, #7
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	429a      	cmp	r2, r3
    6a14:	d207      	bcs.n	6a26 <checkNoCallTime+0xb2>
    6a16:	4b07      	ldr	r3, [pc, #28]	; (6a34 <checkNoCallTime+0xc0>)
    6a18:	7b1a      	ldrb	r2, [r3, #12]
    6a1a:	1dfb      	adds	r3, r7, #7
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	429a      	cmp	r2, r3
    6a20:	d901      	bls.n	6a26 <checkNoCallTime+0xb2>
		return true;
    6a22:	2301      	movs	r3, #1
    6a24:	e000      	b.n	6a28 <checkNoCallTime+0xb4>
	}
	return false;
    6a26:	2300      	movs	r3, #0
}
    6a28:	0018      	movs	r0, r3
    6a2a:	46bd      	mov	sp, r7
    6a2c:	b002      	add	sp, #8
    6a2e:	bd80      	pop	{r7, pc}
    6a30:	00006c71 	.word	0x00006c71
    6a34:	2000064c 	.word	0x2000064c

00006a38 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
    6a38:	b580      	push	{r7, lr}
    6a3a:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
    6a3c:	4b04      	ldr	r3, [pc, #16]	; (6a50 <verifyRemoteNumber+0x18>)
    6a3e:	2201      	movs	r2, #1
    6a40:	2101      	movs	r1, #1
    6a42:	0018      	movs	r0, r3
    6a44:	4b03      	ldr	r3, [pc, #12]	; (6a54 <verifyRemoteNumber+0x1c>)
    6a46:	4798      	blx	r3
}
    6a48:	46c0      	nop			; (mov r8, r8)
    6a4a:	46bd      	mov	sp, r7
    6a4c:	bd80      	pop	{r7, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	00019018 	.word	0x00019018
    6a54:	00006a59 	.word	0x00006a59

00006a58 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b08e      	sub	sp, #56	; 0x38
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	6078      	str	r0, [r7, #4]
    6a60:	0008      	movs	r0, r1
    6a62:	0011      	movs	r1, r2
    6a64:	1cfb      	adds	r3, r7, #3
    6a66:	1c02      	adds	r2, r0, #0
    6a68:	701a      	strb	r2, [r3, #0]
    6a6a:	1cbb      	adds	r3, r7, #2
    6a6c:	1c0a      	adds	r2, r1, #0
    6a6e:	701a      	strb	r2, [r3, #0]
	inCall=true;
    6a70:	4b55      	ldr	r3, [pc, #340]	; (6bc8 <sendSMS+0x170>)
    6a72:	2201      	movs	r2, #1
    6a74:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
    6a76:	1cfb      	adds	r3, r7, #3
    6a78:	781b      	ldrb	r3, [r3, #0]
    6a7a:	2201      	movs	r2, #1
    6a7c:	4053      	eors	r3, r2
    6a7e:	b2db      	uxtb	r3, r3
    6a80:	2b00      	cmp	r3, #0
    6a82:	d048      	beq.n	6b16 <sendSMS+0xbe>
	{
		switch(actionType)
    6a84:	4b51      	ldr	r3, [pc, #324]	; (6bcc <sendSMS+0x174>)
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	3b43      	subs	r3, #67	; 0x43
    6a8a:	2b12      	cmp	r3, #18
    6a8c:	d900      	bls.n	6a90 <sendSMS+0x38>
    6a8e:	e096      	b.n	6bbe <sendSMS+0x166>
    6a90:	009a      	lsls	r2, r3, #2
    6a92:	4b4f      	ldr	r3, [pc, #316]	; (6bd0 <sendSMS+0x178>)
    6a94:	18d3      	adds	r3, r2, r3
    6a96:	681b      	ldr	r3, [r3, #0]
    6a98:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	0018      	movs	r0, r3
    6a9e:	4b4d      	ldr	r3, [pc, #308]	; (6bd4 <sendSMS+0x17c>)
    6aa0:	4798      	blx	r3
    6aa2:	0003      	movs	r3, r0
    6aa4:	001a      	movs	r2, r3
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	189a      	adds	r2, r3, r2
    6aaa:	4b4b      	ldr	r3, [pc, #300]	; (6bd8 <sendSMS+0x180>)
    6aac:	0010      	movs	r0, r2
    6aae:	0019      	movs	r1, r3
    6ab0:	2307      	movs	r3, #7
    6ab2:	001a      	movs	r2, r3
    6ab4:	4b49      	ldr	r3, [pc, #292]	; (6bdc <sendSMS+0x184>)
    6ab6:	4798      	blx	r3
			strcat(msg,STR_ON);
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	0018      	movs	r0, r3
    6abc:	4b45      	ldr	r3, [pc, #276]	; (6bd4 <sendSMS+0x17c>)
    6abe:	4798      	blx	r3
    6ac0:	0003      	movs	r3, r0
    6ac2:	001a      	movs	r2, r3
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	189a      	adds	r2, r3, r2
    6ac8:	4b45      	ldr	r3, [pc, #276]	; (6be0 <sendSMS+0x188>)
    6aca:	0010      	movs	r0, r2
    6acc:	0019      	movs	r1, r3
    6ace:	2303      	movs	r3, #3
    6ad0:	001a      	movs	r2, r3
    6ad2:	4b42      	ldr	r3, [pc, #264]	; (6bdc <sendSMS+0x184>)
    6ad4:	4798      	blx	r3
			break;
    6ad6:	e01e      	b.n	6b16 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
    6ad8:	687b      	ldr	r3, [r7, #4]
    6ada:	0018      	movs	r0, r3
    6adc:	4b3d      	ldr	r3, [pc, #244]	; (6bd4 <sendSMS+0x17c>)
    6ade:	4798      	blx	r3
    6ae0:	0003      	movs	r3, r0
    6ae2:	001a      	movs	r2, r3
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	189a      	adds	r2, r3, r2
    6ae8:	4b3b      	ldr	r3, [pc, #236]	; (6bd8 <sendSMS+0x180>)
    6aea:	0010      	movs	r0, r2
    6aec:	0019      	movs	r1, r3
    6aee:	2307      	movs	r3, #7
    6af0:	001a      	movs	r2, r3
    6af2:	4b3a      	ldr	r3, [pc, #232]	; (6bdc <sendSMS+0x184>)
    6af4:	4798      	blx	r3
			strcat(msg,STR_OFF);
    6af6:	687b      	ldr	r3, [r7, #4]
    6af8:	0018      	movs	r0, r3
    6afa:	4b36      	ldr	r3, [pc, #216]	; (6bd4 <sendSMS+0x17c>)
    6afc:	4798      	blx	r3
    6afe:	0003      	movs	r3, r0
    6b00:	001a      	movs	r2, r3
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	189a      	adds	r2, r3, r2
    6b06:	4b37      	ldr	r3, [pc, #220]	; (6be4 <sendSMS+0x18c>)
    6b08:	0010      	movs	r0, r2
    6b0a:	0019      	movs	r1, r3
    6b0c:	2304      	movs	r3, #4
    6b0e:	001a      	movs	r2, r3
    6b10:	4b32      	ldr	r3, [pc, #200]	; (6bdc <sendSMS+0x184>)
    6b12:	4798      	blx	r3
			break;
    6b14:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
    6b16:	1cbb      	adds	r3, r7, #2
    6b18:	781b      	ldrb	r3, [r3, #0]
    6b1a:	2b02      	cmp	r3, #2
    6b1c:	d105      	bne.n	6b2a <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
    6b1e:	2324      	movs	r3, #36	; 0x24
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	0018      	movs	r0, r3
    6b24:	4b30      	ldr	r3, [pc, #192]	; (6be8 <sendSMS+0x190>)
    6b26:	4798      	blx	r3
    6b28:	e034      	b.n	6b94 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
    6b2a:	1cbb      	adds	r3, r7, #2
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	2b01      	cmp	r3, #1
    6b30:	d109      	bne.n	6b46 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    6b32:	4b2e      	ldr	r3, [pc, #184]	; (6bec <sendSMS+0x194>)
    6b34:	78db      	ldrb	r3, [r3, #3]
    6b36:	2b00      	cmp	r3, #0
    6b38:	d02c      	beq.n	6b94 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
    6b3a:	2324      	movs	r3, #36	; 0x24
    6b3c:	18fb      	adds	r3, r7, r3
    6b3e:	0018      	movs	r0, r3
    6b40:	4b2b      	ldr	r3, [pc, #172]	; (6bf0 <sendSMS+0x198>)
    6b42:	4798      	blx	r3
    6b44:	e026      	b.n	6b94 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
    6b46:	4b2b      	ldr	r3, [pc, #172]	; (6bf4 <sendSMS+0x19c>)
    6b48:	781b      	ldrb	r3, [r3, #0]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d01d      	beq.n	6b8a <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
    6b4e:	4b2a      	ldr	r3, [pc, #168]	; (6bf8 <sendSMS+0x1a0>)
    6b50:	223c      	movs	r2, #60	; 0x3c
    6b52:	2100      	movs	r1, #0
    6b54:	0018      	movs	r0, r3
    6b56:	4b29      	ldr	r3, [pc, #164]	; (6bfc <sendSMS+0x1a4>)
    6b58:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
    6b5a:	4b27      	ldr	r3, [pc, #156]	; (6bf8 <sendSMS+0x1a0>)
    6b5c:	0019      	movs	r1, r3
    6b5e:	2003      	movs	r0, #3
    6b60:	4b27      	ldr	r3, [pc, #156]	; (6c00 <sendSMS+0x1a8>)
    6b62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
    6b64:	230c      	movs	r3, #12
    6b66:	18fa      	adds	r2, r7, r3
    6b68:	4b23      	ldr	r3, [pc, #140]	; (6bf8 <sendSMS+0x1a0>)
    6b6a:	0010      	movs	r0, r2
    6b6c:	0019      	movs	r1, r3
    6b6e:	2318      	movs	r3, #24
    6b70:	001a      	movs	r2, r3
    6b72:	4b1a      	ldr	r3, [pc, #104]	; (6bdc <sendSMS+0x184>)
    6b74:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
    6b76:	230c      	movs	r3, #12
    6b78:	18fb      	adds	r3, r7, r3
    6b7a:	1d1a      	adds	r2, r3, #4
    6b7c:	2324      	movs	r3, #36	; 0x24
    6b7e:	18fb      	adds	r3, r7, r3
    6b80:	0011      	movs	r1, r2
    6b82:	0018      	movs	r0, r3
    6b84:	4b1f      	ldr	r3, [pc, #124]	; (6c04 <sendSMS+0x1ac>)
    6b86:	4798      	blx	r3
    6b88:	e004      	b.n	6b94 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
    6b8a:	2324      	movs	r3, #36	; 0x24
    6b8c:	18fb      	adds	r3, r7, r3
    6b8e:	0018      	movs	r0, r3
    6b90:	4b1d      	ldr	r3, [pc, #116]	; (6c08 <sendSMS+0x1b0>)
    6b92:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    6b94:	2324      	movs	r3, #36	; 0x24
    6b96:	18fb      	adds	r3, r7, r3
    6b98:	2200      	movs	r2, #0
    6b9a:	0019      	movs	r1, r3
    6b9c:	2005      	movs	r0, #5
    6b9e:	4b1b      	ldr	r3, [pc, #108]	; (6c0c <sendSMS+0x1b4>)
    6ba0:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
    6ba2:	687a      	ldr	r2, [r7, #4]
    6ba4:	2324      	movs	r3, #36	; 0x24
    6ba6:	18fb      	adds	r3, r7, r3
    6ba8:	0011      	movs	r1, r2
    6baa:	0018      	movs	r0, r3
    6bac:	4b18      	ldr	r3, [pc, #96]	; (6c10 <sendSMS+0x1b8>)
    6bae:	4798      	blx	r3
	isMsgFromAdmin = false;
    6bb0:	4b10      	ldr	r3, [pc, #64]	; (6bf4 <sendSMS+0x19c>)
    6bb2:	2200      	movs	r2, #0
    6bb4:	701a      	strb	r2, [r3, #0]
	inCall=false;
    6bb6:	4b04      	ldr	r3, [pc, #16]	; (6bc8 <sendSMS+0x170>)
    6bb8:	2200      	movs	r2, #0
    6bba:	701a      	strb	r2, [r3, #0]
    6bbc:	e000      	b.n	6bc0 <sendSMS+0x168>
			return;
    6bbe:	46c0      	nop			; (mov r8, r8)
}
    6bc0:	46bd      	mov	sp, r7
    6bc2:	b00e      	add	sp, #56	; 0x38
    6bc4:	bd80      	pop	{r7, pc}
    6bc6:	46c0      	nop			; (mov r8, r8)
    6bc8:	20000760 	.word	0x20000760
    6bcc:	20000727 	.word	0x20000727
    6bd0:	00019054 	.word	0x00019054
    6bd4:	00017b47 	.word	0x00017b47
    6bd8:	00019020 	.word	0x00019020
    6bdc:	00017881 	.word	0x00017881
    6be0:	00018fb4 	.word	0x00018fb4
    6be4:	00019028 	.word	0x00019028
    6be8:	00000ac5 	.word	0x00000ac5
    6bec:	20000618 	.word	0x20000618
    6bf0:	00000b01 	.word	0x00000b01
    6bf4:	20000740 	.word	0x20000740
    6bf8:	20000574 	.word	0x20000574
    6bfc:	000178b7 	.word	0x000178b7
    6c00:	00012655 	.word	0x00012655
    6c04:	00017b37 	.word	0x00017b37
    6c08:	00000d19 	.word	0x00000d19
    6c0c:	0000b93d 	.word	0x0000b93d
    6c10:	00002861 	.word	0x00002861

00006c14 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
    6c14:	b580      	push	{r7, lr}
    6c16:	b082      	sub	sp, #8
    6c18:	af00      	add	r7, sp, #0
    6c1a:	0002      	movs	r2, r0
    6c1c:	1dfb      	adds	r3, r7, #7
    6c1e:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
    6c20:	1dfb      	adds	r3, r7, #7
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	2bff      	cmp	r3, #255	; 0xff
    6c26:	d103      	bne.n	6c30 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
    6c28:	2041      	movs	r0, #65	; 0x41
    6c2a:	4b0f      	ldr	r3, [pc, #60]	; (6c68 <sendDTMFTone+0x54>)
    6c2c:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
    6c2e:	e016      	b.n	6c5e <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
    6c30:	1dfb      	adds	r3, r7, #7
    6c32:	781b      	ldrb	r3, [r3, #0]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d107      	bne.n	6c48 <sendDTMFTone+0x34>
    6c38:	4b0c      	ldr	r3, [pc, #48]	; (6c6c <sendDTMFTone+0x58>)
    6c3a:	78db      	ldrb	r3, [r3, #3]
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d003      	beq.n	6c48 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
    6c40:	2044      	movs	r0, #68	; 0x44
    6c42:	4b09      	ldr	r3, [pc, #36]	; (6c68 <sendDTMFTone+0x54>)
    6c44:	4798      	blx	r3
}
    6c46:	e00a      	b.n	6c5e <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
    6c48:	1dfb      	adds	r3, r7, #7
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	2b01      	cmp	r3, #1
    6c4e:	d106      	bne.n	6c5e <sendDTMFTone+0x4a>
    6c50:	4b06      	ldr	r3, [pc, #24]	; (6c6c <sendDTMFTone+0x58>)
    6c52:	78db      	ldrb	r3, [r3, #3]
    6c54:	2b00      	cmp	r3, #0
    6c56:	d002      	beq.n	6c5e <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
    6c58:	2043      	movs	r0, #67	; 0x43
    6c5a:	4b03      	ldr	r3, [pc, #12]	; (6c68 <sendDTMFTone+0x54>)
    6c5c:	4798      	blx	r3
}
    6c5e:	46c0      	nop			; (mov r8, r8)
    6c60:	46bd      	mov	sp, r7
    6c62:	b002      	add	sp, #8
    6c64:	bd80      	pop	{r7, pc}
    6c66:	46c0      	nop			; (mov r8, r8)
    6c68:	00002cd5 	.word	0x00002cd5
    6c6c:	20000618 	.word	0x20000618

00006c70 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	b082      	sub	sp, #8
    6c74:	af00      	add	r7, sp, #0
    6c76:	6078      	str	r0, [r7, #4]
    6c78:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
    6c7a:	4b09      	ldr	r3, [pc, #36]	; (6ca0 <getSystemTime+0x30>)
    6c7c:	4798      	blx	r3
    6c7e:	1e03      	subs	r3, r0, #0
    6c80:	d109      	bne.n	6c96 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
    6c82:	4b08      	ldr	r3, [pc, #32]	; (6ca4 <getSystemTime+0x34>)
    6c84:	78db      	ldrb	r3, [r3, #3]
    6c86:	b2da      	uxtb	r2, r3
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
    6c8c:	4b05      	ldr	r3, [pc, #20]	; (6ca4 <getSystemTime+0x34>)
    6c8e:	791b      	ldrb	r3, [r3, #4]
    6c90:	b2da      	uxtb	r2, r3
    6c92:	683b      	ldr	r3, [r7, #0]
    6c94:	701a      	strb	r2, [r3, #0]
	}
}
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	46bd      	mov	sp, r7
    6c9a:	b002      	add	sp, #8
    6c9c:	bd80      	pop	{r7, pc}
    6c9e:	46c0      	nop			; (mov r8, r8)
    6ca0:	00002eb5 	.word	0x00002eb5
    6ca4:	20000674 	.word	0x20000674

00006ca8 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
    6ca8:	b590      	push	{r4, r7, lr}
    6caa:	b0cf      	sub	sp, #316	; 0x13c
    6cac:	af02      	add	r7, sp, #8
    6cae:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
    6cb0:	2300      	movs	r3, #0
    6cb2:	2296      	movs	r2, #150	; 0x96
    6cb4:	0052      	lsls	r2, r2, #1
    6cb6:	18ba      	adds	r2, r7, r2
    6cb8:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
    6cba:	4bc6      	ldr	r3, [pc, #792]	; (6fd4 <vTask_GSM_service+0x32c>)
    6cbc:	4ac5      	ldr	r2, [pc, #788]	; (6fd4 <vTask_GSM_service+0x32c>)
    6cbe:	6812      	ldr	r2, [r2, #0]
    6cc0:	2180      	movs	r1, #128	; 0x80
    6cc2:	0249      	lsls	r1, r1, #9
    6cc4:	430a      	orrs	r2, r1
    6cc6:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    6cc8:	2388      	movs	r3, #136	; 0x88
    6cca:	005b      	lsls	r3, r3, #1
    6ccc:	18fb      	adds	r3, r7, r3
    6cce:	0018      	movs	r0, r3
    6cd0:	4bc1      	ldr	r3, [pc, #772]	; (6fd8 <vTask_GSM_service+0x330>)
    6cd2:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
    6cd4:	2388      	movs	r3, #136	; 0x88
    6cd6:	005b      	lsls	r3, r3, #1
    6cd8:	18fb      	adds	r3, r7, r3
    6cda:	2200      	movs	r2, #0
    6cdc:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    6cde:	2388      	movs	r3, #136	; 0x88
    6ce0:	005b      	lsls	r3, r3, #1
    6ce2:	18fb      	adds	r3, r7, r3
    6ce4:	2200      	movs	r2, #0
    6ce6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    6ce8:	2388      	movs	r3, #136	; 0x88
    6cea:	005b      	lsls	r3, r3, #1
    6cec:	18fb      	adds	r3, r7, r3
    6cee:	0019      	movs	r1, r3
    6cf0:	201b      	movs	r0, #27
    6cf2:	4bba      	ldr	r3, [pc, #744]	; (6fdc <vTask_GSM_service+0x334>)
    6cf4:	4798      	blx	r3
	
	gsm_init();
    6cf6:	4bba      	ldr	r3, [pc, #744]	; (6fe0 <vTask_GSM_service+0x338>)
    6cf8:	4798      	blx	r3
	
	initialized = false;
    6cfa:	4bba      	ldr	r3, [pc, #744]	; (6fe4 <vTask_GSM_service+0x33c>)
    6cfc:	2200      	movs	r2, #0
    6cfe:	701a      	strb	r2, [r3, #0]
	
	inCall=false;
    6d00:	4bb9      	ldr	r3, [pc, #740]	; (6fe8 <vTask_GSM_service+0x340>)
    6d02:	2200      	movs	r2, #0
    6d04:	701a      	strb	r2, [r3, #0]
	simReInit=false;
    6d06:	4bb9      	ldr	r3, [pc, #740]	; (6fec <vTask_GSM_service+0x344>)
    6d08:	2200      	movs	r2, #0
    6d0a:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
    6d0c:	232c      	movs	r3, #44	; 0x2c
    6d0e:	33ff      	adds	r3, #255	; 0xff
    6d10:	18fb      	adds	r3, r7, r3
    6d12:	2200      	movs	r2, #0
    6d14:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
    6d16:	2395      	movs	r3, #149	; 0x95
    6d18:	005b      	lsls	r3, r3, #1
    6d1a:	18fb      	adds	r3, r7, r3
    6d1c:	2200      	movs	r2, #0
    6d1e:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
    6d20:	4bb3      	ldr	r3, [pc, #716]	; (6ff0 <vTask_GSM_service+0x348>)
    6d22:	2200      	movs	r2, #0
    6d24:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
    6d26:	4bb3      	ldr	r3, [pc, #716]	; (6ff4 <vTask_GSM_service+0x34c>)
    6d28:	2205      	movs	r2, #5
    6d2a:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
    6d2c:	4bb2      	ldr	r3, [pc, #712]	; (6ff8 <vTask_GSM_service+0x350>)
    6d2e:	2200      	movs	r2, #0
    6d30:	701a      	strb	r2, [r3, #0]
	
	actionType = 'N';
    6d32:	4bb2      	ldr	r3, [pc, #712]	; (6ffc <vTask_GSM_service+0x354>)
    6d34:	224e      	movs	r2, #78	; 0x4e
    6d36:	701a      	strb	r2, [r3, #0]
	callCutWaitTime = 580;
    6d38:	4bb1      	ldr	r3, [pc, #708]	; (7000 <vTask_GSM_service+0x358>)
    6d3a:	2291      	movs	r2, #145	; 0x91
    6d3c:	0092      	lsls	r2, r2, #2
    6d3e:	801a      	strh	r2, [r3, #0]
	nr = 0;
    6d40:	4bb0      	ldr	r3, [pc, #704]	; (7004 <vTask_GSM_service+0x35c>)
    6d42:	2200      	movs	r2, #0
    6d44:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    6d46:	4bb0      	ldr	r3, [pc, #704]	; (7008 <vTask_GSM_service+0x360>)
    6d48:	224e      	movs	r2, #78	; 0x4e
    6d4a:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    6d4c:	4baf      	ldr	r3, [pc, #700]	; (700c <vTask_GSM_service+0x364>)
    6d4e:	224e      	movs	r2, #78	; 0x4e
    6d50:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
    6d52:	4baf      	ldr	r3, [pc, #700]	; (7010 <vTask_GSM_service+0x368>)
    6d54:	2200      	movs	r2, #0
    6d56:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
    6d58:	4bae      	ldr	r3, [pc, #696]	; (7014 <vTask_GSM_service+0x36c>)
    6d5a:	2200      	movs	r2, #0
    6d5c:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
    6d5e:	4bae      	ldr	r3, [pc, #696]	; (7018 <vTask_GSM_service+0x370>)
    6d60:	2201      	movs	r2, #1
    6d62:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
    6d64:	4bad      	ldr	r3, [pc, #692]	; (701c <vTask_GSM_service+0x374>)
    6d66:	2200      	movs	r2, #0
    6d68:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
    6d6a:	4bad      	ldr	r3, [pc, #692]	; (7020 <vTask_GSM_service+0x378>)
    6d6c:	2200      	movs	r2, #0
    6d6e:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
    6d70:	4bac      	ldr	r3, [pc, #688]	; (7024 <vTask_GSM_service+0x37c>)
    6d72:	224e      	movs	r2, #78	; 0x4e
    6d74:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
    6d76:	4bac      	ldr	r3, [pc, #688]	; (7028 <vTask_GSM_service+0x380>)
    6d78:	2200      	movs	r2, #0
    6d7a:	701a      	strb	r2, [r3, #0]
	retries=0;
    6d7c:	4bab      	ldr	r3, [pc, #684]	; (702c <vTask_GSM_service+0x384>)
    6d7e:	2200      	movs	r2, #0
    6d80:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    6d82:	4bab      	ldr	r3, [pc, #684]	; (7030 <vTask_GSM_service+0x388>)
    6d84:	785b      	ldrb	r3, [r3, #1]
    6d86:	2b00      	cmp	r3, #0
    6d88:	d002      	beq.n	6d90 <vTask_GSM_service+0xe8>
	{
		zeroPressed=false;
    6d8a:	4baa      	ldr	r3, [pc, #680]	; (7034 <vTask_GSM_service+0x38c>)
    6d8c:	2200      	movs	r2, #0
    6d8e:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    6d90:	4ba7      	ldr	r3, [pc, #668]	; (7030 <vTask_GSM_service+0x388>)
    6d92:	78db      	ldrb	r3, [r3, #3]
    6d94:	2b00      	cmp	r3, #0
    6d96:	d012      	beq.n	6dbe <vTask_GSM_service+0x116>
	{
		m2mAck=false;
    6d98:	4ba7      	ldr	r3, [pc, #668]	; (7038 <vTask_GSM_service+0x390>)
    6d9a:	2200      	movs	r2, #0
    6d9c:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
    6d9e:	4ba7      	ldr	r3, [pc, #668]	; (703c <vTask_GSM_service+0x394>)
    6da0:	2200      	movs	r2, #0
    6da2:	701a      	strb	r2, [r3, #0]
    6da4:	4ba5      	ldr	r3, [pc, #660]	; (703c <vTask_GSM_service+0x394>)
    6da6:	781a      	ldrb	r2, [r3, #0]
    6da8:	4ba5      	ldr	r3, [pc, #660]	; (7040 <vTask_GSM_service+0x398>)
    6daa:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
    6dac:	4ba5      	ldr	r3, [pc, #660]	; (7044 <vTask_GSM_service+0x39c>)
    6dae:	2200      	movs	r2, #0
    6db0:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
    6db2:	4ba5      	ldr	r3, [pc, #660]	; (7048 <vTask_GSM_service+0x3a0>)
    6db4:	2200      	movs	r2, #0
    6db6:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
    6db8:	4ba4      	ldr	r3, [pc, #656]	; (704c <vTask_GSM_service+0x3a4>)
    6dba:	2200      	movs	r2, #0
    6dbc:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
    6dbe:	201b      	movs	r0, #27
    6dc0:	4ba3      	ldr	r3, [pc, #652]	; (7050 <vTask_GSM_service+0x3a8>)
    6dc2:	4798      	blx	r3
    6dc4:	1e03      	subs	r3, r0, #0
    6dc6:	d01e      	beq.n	6e06 <vTask_GSM_service+0x15e>
	{
		boolGsm_config_flag			=false;
    6dc8:	232c      	movs	r3, #44	; 0x2c
    6dca:	33ff      	adds	r3, #255	; 0xff
    6dcc:	18fb      	adds	r3, r7, r3
    6dce:	2200      	movs	r2, #0
    6dd0:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
    6dd2:	2395      	movs	r3, #149	; 0x95
    6dd4:	005b      	lsls	r3, r3, #1
    6dd6:	18fb      	adds	r3, r7, r3
    6dd8:	2200      	movs	r2, #0
    6dda:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
    6ddc:	4b9d      	ldr	r3, [pc, #628]	; (7054 <vTask_GSM_service+0x3ac>)
    6dde:	4a9d      	ldr	r2, [pc, #628]	; (7054 <vTask_GSM_service+0x3ac>)
    6de0:	6812      	ldr	r2, [r2, #0]
    6de2:	2180      	movs	r1, #128	; 0x80
    6de4:	0249      	lsls	r1, r1, #9
    6de6:	430a      	orrs	r2, r1
    6de8:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
    6dea:	4b9b      	ldr	r3, [pc, #620]	; (7058 <vTask_GSM_service+0x3b0>)
    6dec:	0018      	movs	r0, r3
    6dee:	4b9b      	ldr	r3, [pc, #620]	; (705c <vTask_GSM_service+0x3b4>)
    6df0:	4798      	blx	r3
		GSM_PWR_OFF;
    6df2:	4b98      	ldr	r3, [pc, #608]	; (7054 <vTask_GSM_service+0x3ac>)
    6df4:	4a97      	ldr	r2, [pc, #604]	; (7054 <vTask_GSM_service+0x3ac>)
    6df6:	6812      	ldr	r2, [r2, #0]
    6df8:	4999      	ldr	r1, [pc, #612]	; (7060 <vTask_GSM_service+0x3b8>)
    6dfa:	400a      	ands	r2, r1
    6dfc:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
    6dfe:	4b99      	ldr	r3, [pc, #612]	; (7064 <vTask_GSM_service+0x3bc>)
    6e00:	0018      	movs	r0, r3
    6e02:	4b96      	ldr	r3, [pc, #600]	; (705c <vTask_GSM_service+0x3b4>)
    6e04:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
    6e06:	201b      	movs	r0, #27
    6e08:	4b91      	ldr	r3, [pc, #580]	; (7050 <vTask_GSM_service+0x3a8>)
    6e0a:	4798      	blx	r3
    6e0c:	1e03      	subs	r3, r0, #0
    6e0e:	d101      	bne.n	6e14 <vTask_GSM_service+0x16c>
    6e10:	f000 fc4e 	bl	76b0 <vTask_GSM_service+0xa08>
		{
			if (boolGsm_config_flag == false)
    6e14:	232c      	movs	r3, #44	; 0x2c
    6e16:	33ff      	adds	r3, #255	; 0xff
    6e18:	18fb      	adds	r3, r7, r3
    6e1a:	781b      	ldrb	r3, [r3, #0]
    6e1c:	2201      	movs	r2, #1
    6e1e:	4053      	eors	r3, r2
    6e20:	b2db      	uxtb	r3, r3
    6e22:	2b00      	cmp	r3, #0
    6e24:	d038      	beq.n	6e98 <vTask_GSM_service+0x1f0>
			{
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
    6e26:	4b90      	ldr	r3, [pc, #576]	; (7068 <vTask_GSM_service+0x3c0>)
    6e28:	4798      	blx	r3
    6e2a:	0003      	movs	r3, r0
    6e2c:	2b09      	cmp	r3, #9
    6e2e:	d12d      	bne.n	6e8c <vTask_GSM_service+0x1e4>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
    6e30:	4b8e      	ldr	r3, [pc, #568]	; (706c <vTask_GSM_service+0x3c4>)
    6e32:	4798      	blx	r3
    6e34:	1e03      	subs	r3, r0, #0
    6e36:	d123      	bne.n	6e80 <vTask_GSM_service+0x1d8>
					{
						for (uint8_t i=0;i<20;i++)
    6e38:	232a      	movs	r3, #42	; 0x2a
    6e3a:	33ff      	adds	r3, #255	; 0xff
    6e3c:	18fb      	adds	r3, r7, r3
    6e3e:	2200      	movs	r2, #0
    6e40:	701a      	strb	r2, [r3, #0]
    6e42:	e011      	b.n	6e68 <vTask_GSM_service+0x1c0>
						{
							Signal_Strength = gsm_getsignalstrength();
    6e44:	4b8a      	ldr	r3, [pc, #552]	; (7070 <vTask_GSM_service+0x3c8>)
    6e46:	4798      	blx	r3
    6e48:	0003      	movs	r3, r0
    6e4a:	001a      	movs	r2, r3
    6e4c:	4b68      	ldr	r3, [pc, #416]	; (6ff0 <vTask_GSM_service+0x348>)
    6e4e:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
    6e50:	2032      	movs	r0, #50	; 0x32
    6e52:	4b82      	ldr	r3, [pc, #520]	; (705c <vTask_GSM_service+0x3b4>)
    6e54:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
    6e56:	232a      	movs	r3, #42	; 0x2a
    6e58:	33ff      	adds	r3, #255	; 0xff
    6e5a:	18fb      	adds	r3, r7, r3
    6e5c:	781a      	ldrb	r2, [r3, #0]
    6e5e:	232a      	movs	r3, #42	; 0x2a
    6e60:	33ff      	adds	r3, #255	; 0xff
    6e62:	18fb      	adds	r3, r7, r3
    6e64:	3201      	adds	r2, #1
    6e66:	701a      	strb	r2, [r3, #0]
    6e68:	232a      	movs	r3, #42	; 0x2a
    6e6a:	33ff      	adds	r3, #255	; 0xff
    6e6c:	18fb      	adds	r3, r7, r3
    6e6e:	781b      	ldrb	r3, [r3, #0]
    6e70:	2b13      	cmp	r3, #19
    6e72:	d9e7      	bls.n	6e44 <vTask_GSM_service+0x19c>
						}
						boolGsm_config_flag = true;
    6e74:	232c      	movs	r3, #44	; 0x2c
    6e76:	33ff      	adds	r3, #255	; 0xff
    6e78:	18fb      	adds	r3, r7, r3
    6e7a:	2201      	movs	r2, #1
    6e7c:	701a      	strb	r2, [r3, #0]
    6e7e:	e7c2      	b.n	6e06 <vTask_GSM_service+0x15e>
					}
					else
					{
						boolGsm_config_flag = false;
    6e80:	232c      	movs	r3, #44	; 0x2c
    6e82:	33ff      	adds	r3, #255	; 0xff
    6e84:	18fb      	adds	r3, r7, r3
    6e86:	2200      	movs	r2, #0
    6e88:	701a      	strb	r2, [r3, #0]
    6e8a:	e7bc      	b.n	6e06 <vTask_GSM_service+0x15e>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
    6e8c:	23fa      	movs	r3, #250	; 0xfa
    6e8e:	00db      	lsls	r3, r3, #3
    6e90:	0018      	movs	r0, r3
    6e92:	4b72      	ldr	r3, [pc, #456]	; (705c <vTask_GSM_service+0x3b4>)
    6e94:	4798      	blx	r3
    6e96:	e7b6      	b.n	6e06 <vTask_GSM_service+0x15e>
				}
			}
			else
			{
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
    6e98:	2395      	movs	r3, #149	; 0x95
    6e9a:	005b      	lsls	r3, r3, #1
    6e9c:	18fb      	adds	r3, r7, r3
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	2201      	movs	r2, #1
    6ea2:	4053      	eors	r3, r2
    6ea4:	b2db      	uxtb	r3, r3
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d01a      	beq.n	6ee0 <vTask_GSM_service+0x238>
    6eaa:	232c      	movs	r3, #44	; 0x2c
    6eac:	33ff      	adds	r3, #255	; 0xff
    6eae:	18fb      	adds	r3, r7, r3
    6eb0:	781b      	ldrb	r3, [r3, #0]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d014      	beq.n	6ee0 <vTask_GSM_service+0x238>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    6eb6:	4b6f      	ldr	r3, [pc, #444]	; (7074 <vTask_GSM_service+0x3cc>)
    6eb8:	4798      	blx	r3
    6eba:	1e03      	subs	r3, r0, #0
    6ebc:	d109      	bne.n	6ed2 <vTask_GSM_service+0x22a>
					{
						boolOne_Time_Msg_Delete_Flag = true;
    6ebe:	2395      	movs	r3, #149	; 0x95
    6ec0:	005b      	lsls	r3, r3, #1
    6ec2:	18fb      	adds	r3, r7, r3
    6ec4:	2201      	movs	r2, #1
    6ec6:	701a      	strb	r2, [r3, #0]
						initialized = true;
    6ec8:	4b46      	ldr	r3, [pc, #280]	; (6fe4 <vTask_GSM_service+0x33c>)
    6eca:	2201      	movs	r2, #1
    6ecc:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    6ece:	f000 fc14 	bl	76fa <vTask_GSM_service+0xa52>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
    6ed2:	2395      	movs	r3, #149	; 0x95
    6ed4:	005b      	lsls	r3, r3, #1
    6ed6:	18fb      	adds	r3, r7, r3
    6ed8:	2200      	movs	r2, #0
    6eda:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    6edc:	f000 fc0d 	bl	76fa <vTask_GSM_service+0xa52>
					}
				}
				else
				{
					if (currentStatus == 'N' && currentCallStatus == 'N')
    6ee0:	4b49      	ldr	r3, [pc, #292]	; (7008 <vTask_GSM_service+0x360>)
    6ee2:	781b      	ldrb	r3, [r3, #0]
    6ee4:	b2db      	uxtb	r3, r3
    6ee6:	2b4e      	cmp	r3, #78	; 0x4e
    6ee8:	d12a      	bne.n	6f40 <vTask_GSM_service+0x298>
    6eea:	4b48      	ldr	r3, [pc, #288]	; (700c <vTask_GSM_service+0x364>)
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	b2db      	uxtb	r3, r3
    6ef0:	2b4e      	cmp	r3, #78	; 0x4e
    6ef2:	d125      	bne.n	6f40 <vTask_GSM_service+0x298>
					{
						////Update network
						if (xTaskGetTickCount() - network_update_time>= (1*30*1000))
    6ef4:	4b60      	ldr	r3, [pc, #384]	; (7078 <vTask_GSM_service+0x3d0>)
    6ef6:	4798      	blx	r3
    6ef8:	0002      	movs	r2, r0
    6efa:	2396      	movs	r3, #150	; 0x96
    6efc:	005b      	lsls	r3, r3, #1
    6efe:	18fb      	adds	r3, r7, r3
    6f00:	681b      	ldr	r3, [r3, #0]
    6f02:	1ad3      	subs	r3, r2, r3
    6f04:	4a5d      	ldr	r2, [pc, #372]	; (707c <vTask_GSM_service+0x3d4>)
    6f06:	4293      	cmp	r3, r2
    6f08:	d90c      	bls.n	6f24 <vTask_GSM_service+0x27c>
						{
							network_update_time = xTaskGetTickCount();
    6f0a:	4b5b      	ldr	r3, [pc, #364]	; (7078 <vTask_GSM_service+0x3d0>)
    6f0c:	4798      	blx	r3
    6f0e:	0003      	movs	r3, r0
    6f10:	2296      	movs	r2, #150	; 0x96
    6f12:	0052      	lsls	r2, r2, #1
    6f14:	18ba      	adds	r2, r7, r2
    6f16:	6013      	str	r3, [r2, #0]
							Signal_Strength = gsm_getsignalstrength();
    6f18:	4b55      	ldr	r3, [pc, #340]	; (7070 <vTask_GSM_service+0x3c8>)
    6f1a:	4798      	blx	r3
    6f1c:	0003      	movs	r3, r0
    6f1e:	001a      	movs	r2, r3
    6f20:	4b33      	ldr	r3, [pc, #204]	; (6ff0 <vTask_GSM_service+0x348>)
    6f22:	701a      	strb	r2, [r3, #0]
						}
						
						setObtainEvent();
    6f24:	4b56      	ldr	r3, [pc, #344]	; (7080 <vTask_GSM_service+0x3d8>)
    6f26:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    6f28:	4b3d      	ldr	r3, [pc, #244]	; (7020 <vTask_GSM_service+0x378>)
    6f2a:	781b      	ldrb	r3, [r3, #0]
    6f2c:	2b00      	cmp	r3, #0
    6f2e:	d104      	bne.n	6f3a <vTask_GSM_service+0x292>
    6f30:	4b44      	ldr	r3, [pc, #272]	; (7044 <vTask_GSM_service+0x39c>)
    6f32:	781b      	ldrb	r3, [r3, #0]
    6f34:	2b00      	cmp	r3, #0
    6f36:	d100      	bne.n	6f3a <vTask_GSM_service+0x292>
    6f38:	e0b4      	b.n	70a4 <vTask_GSM_service+0x3fc>
						{
							operateOnStagedEvent();
    6f3a:	4b52      	ldr	r3, [pc, #328]	; (7084 <vTask_GSM_service+0x3dc>)
    6f3c:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    6f3e:	e0b1      	b.n	70a4 <vTask_GSM_service+0x3fc>
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
    6f40:	4b31      	ldr	r3, [pc, #196]	; (7008 <vTask_GSM_service+0x360>)
    6f42:	781b      	ldrb	r3, [r3, #0]
    6f44:	b2db      	uxtb	r3, r3
    6f46:	2b49      	cmp	r3, #73	; 0x49
    6f48:	d005      	beq.n	6f56 <vTask_GSM_service+0x2ae>
    6f4a:	4b2f      	ldr	r3, [pc, #188]	; (7008 <vTask_GSM_service+0x360>)
    6f4c:	781b      	ldrb	r3, [r3, #0]
    6f4e:	b2db      	uxtb	r3, r3
    6f50:	2b52      	cmp	r3, #82	; 0x52
    6f52:	d000      	beq.n	6f56 <vTask_GSM_service+0x2ae>
    6f54:	e0a7      	b.n	70a6 <vTask_GSM_service+0x3fe>
					{
						if (callTimerExpire())
    6f56:	4b4c      	ldr	r3, [pc, #304]	; (7088 <vTask_GSM_service+0x3e0>)
    6f58:	4798      	blx	r3
    6f5a:	1e03      	subs	r3, r0, #0
    6f5c:	d00e      	beq.n	6f7c <vTask_GSM_service+0x2d4>
						{
							char t1 = actionType;
    6f5e:	2326      	movs	r3, #38	; 0x26
    6f60:	33ff      	adds	r3, #255	; 0xff
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	4a25      	ldr	r2, [pc, #148]	; (6ffc <vTask_GSM_service+0x354>)
    6f66:	7812      	ldrb	r2, [r2, #0]
    6f68:	701a      	strb	r2, [r3, #0]
							endCall();
    6f6a:	4b48      	ldr	r3, [pc, #288]	; (708c <vTask_GSM_service+0x3e4>)
    6f6c:	4798      	blx	r3
							checkRespSMS(t1);
    6f6e:	2326      	movs	r3, #38	; 0x26
    6f70:	33ff      	adds	r3, #255	; 0xff
    6f72:	18fb      	adds	r3, r7, r3
    6f74:	781b      	ldrb	r3, [r3, #0]
    6f76:	0018      	movs	r0, r3
    6f78:	4b45      	ldr	r3, [pc, #276]	; (7090 <vTask_GSM_service+0x3e8>)
    6f7a:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
    6f7c:	4b2c      	ldr	r3, [pc, #176]	; (7030 <vTask_GSM_service+0x388>)
    6f7e:	78db      	ldrb	r3, [r3, #3]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d020      	beq.n	6fc6 <vTask_GSM_service+0x31e>
						{
							if(m2mEvent && callAccepted)
    6f84:	4b30      	ldr	r3, [pc, #192]	; (7048 <vTask_GSM_service+0x3a0>)
    6f86:	781b      	ldrb	r3, [r3, #0]
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d01c      	beq.n	6fc6 <vTask_GSM_service+0x31e>
    6f8c:	4b20      	ldr	r3, [pc, #128]	; (7010 <vTask_GSM_service+0x368>)
    6f8e:	781b      	ldrb	r3, [r3, #0]
    6f90:	2b00      	cmp	r3, #0
    6f92:	d018      	beq.n	6fc6 <vTask_GSM_service+0x31e>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
    6f94:	4b2d      	ldr	r3, [pc, #180]	; (704c <vTask_GSM_service+0x3a4>)
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	2201      	movs	r2, #1
    6f9a:	4053      	eors	r3, r2
    6f9c:	b2db      	uxtb	r3, r3
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d011      	beq.n	6fc6 <vTask_GSM_service+0x31e>
    6fa2:	4b35      	ldr	r3, [pc, #212]	; (7078 <vTask_GSM_service+0x3d0>)
    6fa4:	4798      	blx	r3
    6fa6:	0002      	movs	r2, r0
    6fa8:	4b3a      	ldr	r3, [pc, #232]	; (7094 <vTask_GSM_service+0x3ec>)
    6faa:	681b      	ldr	r3, [r3, #0]
    6fac:	1ad2      	subs	r2, r2, r3
    6fae:	23fa      	movs	r3, #250	; 0xfa
    6fb0:	00db      	lsls	r3, r3, #3
    6fb2:	429a      	cmp	r2, r3
    6fb4:	d907      	bls.n	6fc6 <vTask_GSM_service+0x31e>
								{
									keyPressed=true;
    6fb6:	4b25      	ldr	r3, [pc, #148]	; (704c <vTask_GSM_service+0x3a4>)
    6fb8:	2201      	movs	r2, #1
    6fba:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
    6fbc:	4b1f      	ldr	r3, [pc, #124]	; (703c <vTask_GSM_service+0x394>)
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	0018      	movs	r0, r3
    6fc2:	4b35      	ldr	r3, [pc, #212]	; (7098 <vTask_GSM_service+0x3f0>)
    6fc4:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
    6fc6:	4b35      	ldr	r3, [pc, #212]	; (709c <vTask_GSM_service+0x3f4>)
    6fc8:	4798      	blx	r3
    6fca:	1e03      	subs	r3, r0, #0
    6fcc:	d06b      	beq.n	70a6 <vTask_GSM_service+0x3fe>
						{
							triggerPlaySound();
    6fce:	4b34      	ldr	r3, [pc, #208]	; (70a0 <vTask_GSM_service+0x3f8>)
    6fd0:	4798      	blx	r3
    6fd2:	e068      	b.n	70a6 <vTask_GSM_service+0x3fe>
    6fd4:	41004480 	.word	0x41004480
    6fd8:	00003e6d 	.word	0x00003e6d
    6fdc:	00011ac9 	.word	0x00011ac9
    6fe0:	00001fad 	.word	0x00001fad
    6fe4:	20000761 	.word	0x20000761
    6fe8:	20000760 	.word	0x20000760
    6fec:	2000074b 	.word	0x2000074b
    6ff0:	2000074e 	.word	0x2000074e
    6ff4:	20000789 	.word	0x20000789
    6ff8:	200007fd 	.word	0x200007fd
    6ffc:	20000727 	.word	0x20000727
    7000:	20000728 	.word	0x20000728
    7004:	200006c4 	.word	0x200006c4
    7008:	20000794 	.word	0x20000794
    700c:	20000753 	.word	0x20000753
    7010:	20000762 	.word	0x20000762
    7014:	20000708 	.word	0x20000708
    7018:	20000736 	.word	0x20000736
    701c:	20000740 	.word	0x20000740
    7020:	20000786 	.word	0x20000786
    7024:	20000738 	.word	0x20000738
    7028:	2000075c 	.word	0x2000075c
    702c:	200006c5 	.word	0x200006c5
    7030:	20000618 	.word	0x20000618
    7034:	200007af 	.word	0x200007af
    7038:	20000700 	.word	0x20000700
    703c:	20000701 	.word	0x20000701
    7040:	20000787 	.word	0x20000787
    7044:	20000752 	.word	0x20000752
    7048:	20000707 	.word	0x20000707
    704c:	20000784 	.word	0x20000784
    7050:	00003e91 	.word	0x00003e91
    7054:	41004490 	.word	0x41004490
    7058:	00000bb8 	.word	0x00000bb8
    705c:	0000ebf9 	.word	0x0000ebf9
    7060:	fffeffff 	.word	0xfffeffff
    7064:	00001388 	.word	0x00001388
    7068:	0000237d 	.word	0x0000237d
    706c:	00003069 	.word	0x00003069
    7070:	00002619 	.word	0x00002619
    7074:	00002469 	.word	0x00002469
    7078:	0000ef5d 	.word	0x0000ef5d
    707c:	0000752f 	.word	0x0000752f
    7080:	00003ed5 	.word	0x00003ed5
    7084:	00003f15 	.word	0x00003f15
    7088:	00004565 	.word	0x00004565
    708c:	0000400d 	.word	0x0000400d
    7090:	00004821 	.word	0x00004821
    7094:	200007b8 	.word	0x200007b8
    7098:	00006c15 	.word	0x00006c15
    709c:	000043cd 	.word	0x000043cd
    70a0:	00004419 	.word	0x00004419
						if (eventStaged || m2mEventStaged)
    70a4:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
    70a6:	4bde      	ldr	r3, [pc, #888]	; (7420 <vTask_GSM_service+0x778>)
    70a8:	2298      	movs	r2, #152	; 0x98
    70aa:	0052      	lsls	r2, r2, #1
    70ac:	4694      	mov	ip, r2
    70ae:	44bc      	add	ip, r7
    70b0:	4463      	add	r3, ip
    70b2:	0018      	movs	r0, r3
    70b4:	2340      	movs	r3, #64	; 0x40
    70b6:	001a      	movs	r2, r3
    70b8:	2100      	movs	r1, #0
    70ba:	4bda      	ldr	r3, [pc, #872]	; (7424 <vTask_GSM_service+0x77c>)
    70bc:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
    70be:	230c      	movs	r3, #12
    70c0:	18fb      	adds	r3, r7, r3
    70c2:	2140      	movs	r1, #64	; 0x40
    70c4:	0018      	movs	r0, r3
    70c6:	4bd8      	ldr	r3, [pc, #864]	; (7428 <vTask_GSM_service+0x780>)
    70c8:	4798      	blx	r3
    70ca:	1e03      	subs	r3, r0, #0
    70cc:	d100      	bne.n	70d0 <vTask_GSM_service+0x428>
    70ce:	e69a      	b.n	6e06 <vTask_GSM_service+0x15e>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
    70d0:	2392      	movs	r3, #146	; 0x92
    70d2:	005b      	lsls	r3, r3, #1
    70d4:	18fc      	adds	r4, r7, r3
    70d6:	230c      	movs	r3, #12
    70d8:	18fb      	adds	r3, r7, r3
    70da:	0018      	movs	r0, r3
    70dc:	4bd3      	ldr	r3, [pc, #844]	; (742c <vTask_GSM_service+0x784>)
    70de:	4798      	blx	r3
    70e0:	0003      	movs	r3, r0
    70e2:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
    70e4:	2392      	movs	r3, #146	; 0x92
    70e6:	005b      	lsls	r3, r3, #1
    70e8:	18fb      	adds	r3, r7, r3
    70ea:	781b      	ldrb	r3, [r3, #0]
    70ec:	2b00      	cmp	r3, #0
    70ee:	d100      	bne.n	70f2 <vTask_GSM_service+0x44a>
    70f0:	e0d5      	b.n	729e <vTask_GSM_service+0x5f6>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
    70f2:	234c      	movs	r3, #76	; 0x4c
    70f4:	18fa      	adds	r2, r7, r3
    70f6:	1c79      	adds	r1, r7, #1
    70f8:	31ff      	adds	r1, #255	; 0xff
    70fa:	2392      	movs	r3, #146	; 0x92
    70fc:	005b      	lsls	r3, r3, #1
    70fe:	18fb      	adds	r3, r7, r3
    7100:	7818      	ldrb	r0, [r3, #0]
    7102:	23a0      	movs	r3, #160	; 0xa0
    7104:	9300      	str	r3, [sp, #0]
    7106:	0013      	movs	r3, r2
    7108:	220f      	movs	r2, #15
    710a:	4cc9      	ldr	r4, [pc, #804]	; (7430 <vTask_GSM_service+0x788>)
    710c:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
    710e:	2324      	movs	r3, #36	; 0x24
    7110:	33ff      	adds	r3, #255	; 0xff
    7112:	18fc      	adds	r4, r7, r3
    7114:	1c7b      	adds	r3, r7, #1
    7116:	33ff      	adds	r3, #255	; 0xff
    7118:	0018      	movs	r0, r3
    711a:	4bc6      	ldr	r3, [pc, #792]	; (7434 <vTask_GSM_service+0x78c>)
    711c:	4798      	blx	r3
    711e:	0003      	movs	r3, r0
    7120:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
    7122:	2391      	movs	r3, #145	; 0x91
    7124:	005b      	lsls	r3, r3, #1
    7126:	18fc      	adds	r4, r7, r3
    7128:	1c7b      	adds	r3, r7, #1
    712a:	33ff      	adds	r3, #255	; 0xff
    712c:	0018      	movs	r0, r3
    712e:	4bc2      	ldr	r3, [pc, #776]	; (7438 <vTask_GSM_service+0x790>)
    7130:	4798      	blx	r3
    7132:	0003      	movs	r3, r0
    7134:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
    7136:	2322      	movs	r3, #34	; 0x22
    7138:	33ff      	adds	r3, #255	; 0xff
    713a:	18fc      	adds	r4, r7, r3
    713c:	1c7b      	adds	r3, r7, #1
    713e:	33ff      	adds	r3, #255	; 0xff
    7140:	0018      	movs	r0, r3
    7142:	4bbe      	ldr	r3, [pc, #760]	; (743c <vTask_GSM_service+0x794>)
    7144:	4798      	blx	r3
    7146:	0003      	movs	r3, r0
    7148:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
    714a:	2394      	movs	r3, #148	; 0x94
    714c:	005b      	lsls	r3, r3, #1
    714e:	18fb      	adds	r3, r7, r3
    7150:	2201      	movs	r2, #1
    7152:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
    7154:	4bba      	ldr	r3, [pc, #744]	; (7440 <vTask_GSM_service+0x798>)
    7156:	2200      	movs	r2, #0
    7158:	0019      	movs	r1, r3
    715a:	2004      	movs	r0, #4
    715c:	4bb9      	ldr	r3, [pc, #740]	; (7444 <vTask_GSM_service+0x79c>)
    715e:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
    7160:	234c      	movs	r3, #76	; 0x4c
    7162:	18fb      	adds	r3, r7, r3
    7164:	0018      	movs	r0, r3
    7166:	4bb8      	ldr	r3, [pc, #736]	; (7448 <vTask_GSM_service+0x7a0>)
    7168:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+17,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
    716a:	2324      	movs	r3, #36	; 0x24
    716c:	33ff      	adds	r3, #255	; 0xff
    716e:	18fb      	adds	r3, r7, r3
    7170:	781b      	ldrb	r3, [r3, #0]
    7172:	2b00      	cmp	r3, #0
    7174:	d10b      	bne.n	718e <vTask_GSM_service+0x4e6>
    7176:	2391      	movs	r3, #145	; 0x91
    7178:	005b      	lsls	r3, r3, #1
    717a:	18fb      	adds	r3, r7, r3
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	2b00      	cmp	r3, #0
    7180:	d105      	bne.n	718e <vTask_GSM_service+0x4e6>
    7182:	2322      	movs	r3, #34	; 0x22
    7184:	33ff      	adds	r3, #255	; 0xff
    7186:	18fb      	adds	r3, r7, r3
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	2b00      	cmp	r3, #0
    718c:	d031      	beq.n	71f2 <vTask_GSM_service+0x54a>
							{
								if(StringstartsWith(Received_SMS,"#"))
    718e:	4aaf      	ldr	r2, [pc, #700]	; (744c <vTask_GSM_service+0x7a4>)
    7190:	234c      	movs	r3, #76	; 0x4c
    7192:	18fb      	adds	r3, r7, r3
    7194:	0011      	movs	r1, r2
    7196:	0018      	movs	r0, r3
    7198:	4bad      	ldr	r3, [pc, #692]	; (7450 <vTask_GSM_service+0x7a8>)
    719a:	4798      	blx	r3
    719c:	1e03      	subs	r3, r0, #0
    719e:	d013      	beq.n	71c8 <vTask_GSM_service+0x520>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
    71a0:	234c      	movs	r3, #76	; 0x4c
    71a2:	18fc      	adds	r4, r7, r3
    71a4:	3401      	adds	r4, #1
    71a6:	234c      	movs	r3, #76	; 0x4c
    71a8:	18fb      	adds	r3, r7, r3
    71aa:	0018      	movs	r0, r3
    71ac:	4ba9      	ldr	r3, [pc, #676]	; (7454 <vTask_GSM_service+0x7ac>)
    71ae:	4798      	blx	r3
    71b0:	0002      	movs	r2, r0
    71b2:	234c      	movs	r3, #76	; 0x4c
    71b4:	18fb      	adds	r3, r7, r3
    71b6:	0021      	movs	r1, r4
    71b8:	0018      	movs	r0, r3
    71ba:	4ba7      	ldr	r3, [pc, #668]	; (7458 <vTask_GSM_service+0x7b0>)
    71bc:	4798      	blx	r3
									response_sms_processed_cmd=false;
    71be:	2394      	movs	r3, #148	; 0x94
    71c0:	005b      	lsls	r3, r3, #1
    71c2:	18fb      	adds	r3, r7, r3
    71c4:	2200      	movs	r2, #0
    71c6:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
    71c8:	2322      	movs	r3, #34	; 0x22
    71ca:	33ff      	adds	r3, #255	; 0xff
    71cc:	18fb      	adds	r3, r7, r3
    71ce:	781c      	ldrb	r4, [r3, #0]
    71d0:	2394      	movs	r3, #148	; 0x94
    71d2:	005b      	lsls	r3, r3, #1
    71d4:	18fb      	adds	r3, r7, r3
    71d6:	781a      	ldrb	r2, [r3, #0]
    71d8:	2324      	movs	r3, #36	; 0x24
    71da:	33ff      	adds	r3, #255	; 0xff
    71dc:	18fb      	adds	r3, r7, r3
    71de:	7819      	ldrb	r1, [r3, #0]
    71e0:	234c      	movs	r3, #76	; 0x4c
    71e2:	18f8      	adds	r0, r7, r3
    71e4:	1c7b      	adds	r3, r7, #1
    71e6:	33ff      	adds	r3, #255	; 0xff
    71e8:	9300      	str	r3, [sp, #0]
    71ea:	0023      	movs	r3, r4
    71ec:	4c9b      	ldr	r4, [pc, #620]	; (745c <vTask_GSM_service+0x7b4>)
    71ee:	47a0      	blx	r4
    71f0:	e053      	b.n	729a <vTask_GSM_service+0x5f2>
							}
							else if(isM2MNumber(phone_number))
    71f2:	1c7b      	adds	r3, r7, #1
    71f4:	33ff      	adds	r3, #255	; 0xff
    71f6:	0018      	movs	r0, r3
    71f8:	4b99      	ldr	r3, [pc, #612]	; (7460 <vTask_GSM_service+0x7b8>)
    71fa:	4798      	blx	r3
    71fc:	1e03      	subs	r3, r0, #0
    71fe:	d01f      	beq.n	7240 <vTask_GSM_service+0x598>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
    7200:	4a98      	ldr	r2, [pc, #608]	; (7464 <vTask_GSM_service+0x7bc>)
    7202:	234c      	movs	r3, #76	; 0x4c
    7204:	18fb      	adds	r3, r7, r3
    7206:	0011      	movs	r1, r2
    7208:	0018      	movs	r0, r3
    720a:	4b91      	ldr	r3, [pc, #580]	; (7450 <vTask_GSM_service+0x7a8>)
    720c:	4798      	blx	r3
    720e:	1e03      	subs	r3, r0, #0
    7210:	d043      	beq.n	729a <vTask_GSM_service+0x5f2>
								{
									setM2MVerify(true);
    7212:	2001      	movs	r0, #1
    7214:	4b94      	ldr	r3, [pc, #592]	; (7468 <vTask_GSM_service+0x7c0>)
    7216:	4798      	blx	r3
									getM2MNumber(phone_number);
    7218:	1c7b      	adds	r3, r7, #1
    721a:	33ff      	adds	r3, #255	; 0xff
    721c:	0018      	movs	r0, r3
    721e:	4b93      	ldr	r3, [pc, #588]	; (746c <vTask_GSM_service+0x7c4>)
    7220:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    7222:	1c7b      	adds	r3, r7, #1
    7224:	33ff      	adds	r3, #255	; 0xff
    7226:	2200      	movs	r2, #0
    7228:	0019      	movs	r1, r3
    722a:	2005      	movs	r0, #5
    722c:	4b85      	ldr	r3, [pc, #532]	; (7444 <vTask_GSM_service+0x79c>)
    722e:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
    7230:	4a8f      	ldr	r2, [pc, #572]	; (7470 <vTask_GSM_service+0x7c8>)
    7232:	1c7b      	adds	r3, r7, #1
    7234:	33ff      	adds	r3, #255	; 0xff
    7236:	0011      	movs	r1, r2
    7238:	0018      	movs	r0, r3
    723a:	4b8e      	ldr	r3, [pc, #568]	; (7474 <vTask_GSM_service+0x7cc>)
    723c:	4798      	blx	r3
    723e:	e02c      	b.n	729a <vTask_GSM_service+0x5f2>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
    7240:	4b8d      	ldr	r3, [pc, #564]	; (7478 <vTask_GSM_service+0x7d0>)
    7242:	78db      	ldrb	r3, [r3, #3]
    7244:	2b00      	cmp	r3, #0
    7246:	d028      	beq.n	729a <vTask_GSM_service+0x5f2>
    7248:	1c7b      	adds	r3, r7, #1
    724a:	33ff      	adds	r3, #255	; 0xff
    724c:	0018      	movs	r0, r3
    724e:	4b8b      	ldr	r3, [pc, #556]	; (747c <vTask_GSM_service+0x7d4>)
    7250:	4798      	blx	r3
    7252:	1e03      	subs	r3, r0, #0
    7254:	d021      	beq.n	729a <vTask_GSM_service+0x5f2>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
    7256:	4a86      	ldr	r2, [pc, #536]	; (7470 <vTask_GSM_service+0x7c8>)
    7258:	234c      	movs	r3, #76	; 0x4c
    725a:	18fb      	adds	r3, r7, r3
    725c:	0011      	movs	r1, r2
    725e:	0018      	movs	r0, r3
    7260:	4b7b      	ldr	r3, [pc, #492]	; (7450 <vTask_GSM_service+0x7a8>)
    7262:	4798      	blx	r3
    7264:	1e03      	subs	r3, r0, #0
    7266:	d018      	beq.n	729a <vTask_GSM_service+0x5f2>
								{
									setM2MRemoteVerified(true);
    7268:	2001      	movs	r0, #1
    726a:	4b85      	ldr	r3, [pc, #532]	; (7480 <vTask_GSM_service+0x7d8>)
    726c:	4798      	blx	r3
									saveM2MSettings(true);
    726e:	2001      	movs	r0, #1
    7270:	4b84      	ldr	r3, [pc, #528]	; (7484 <vTask_GSM_service+0x7dc>)
    7272:	4798      	blx	r3
									getActiveNumber(phone_number);
    7274:	1c7b      	adds	r3, r7, #1
    7276:	33ff      	adds	r3, #255	; 0xff
    7278:	0018      	movs	r0, r3
    727a:	4b83      	ldr	r3, [pc, #524]	; (7488 <vTask_GSM_service+0x7e0>)
    727c:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);	
    727e:	1c7b      	adds	r3, r7, #1
    7280:	33ff      	adds	r3, #255	; 0xff
    7282:	2200      	movs	r2, #0
    7284:	0019      	movs	r1, r3
    7286:	2005      	movs	r0, #5
    7288:	4b6e      	ldr	r3, [pc, #440]	; (7444 <vTask_GSM_service+0x79c>)
    728a:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
    728c:	4a7f      	ldr	r2, [pc, #508]	; (748c <vTask_GSM_service+0x7e4>)
    728e:	1c7b      	adds	r3, r7, #1
    7290:	33ff      	adds	r3, #255	; 0xff
    7292:	0011      	movs	r1, r2
    7294:	0018      	movs	r0, r3
    7296:	4b77      	ldr	r3, [pc, #476]	; (7474 <vTask_GSM_service+0x7cc>)
    7298:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
    729a:	4b7d      	ldr	r3, [pc, #500]	; (7490 <vTask_GSM_service+0x7e8>)
    729c:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
    729e:	4b7d      	ldr	r3, [pc, #500]	; (7494 <vTask_GSM_service+0x7ec>)
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	2201      	movs	r2, #1
    72a4:	4053      	eors	r3, r2
    72a6:	b2db      	uxtb	r3, r3
    72a8:	2b00      	cmp	r3, #0
    72aa:	d100      	bne.n	72ae <vTask_GSM_service+0x606>
    72ac:	e099      	b.n	73e2 <vTask_GSM_service+0x73a>
    72ae:	4b7a      	ldr	r3, [pc, #488]	; (7498 <vTask_GSM_service+0x7f0>)
    72b0:	781b      	ldrb	r3, [r3, #0]
    72b2:	b2db      	uxtb	r3, r3
    72b4:	2b4e      	cmp	r3, #78	; 0x4e
    72b6:	d005      	beq.n	72c4 <vTask_GSM_service+0x61c>
    72b8:	4b77      	ldr	r3, [pc, #476]	; (7498 <vTask_GSM_service+0x7f0>)
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	b2db      	uxtb	r3, r3
    72be:	2b52      	cmp	r3, #82	; 0x52
    72c0:	d000      	beq.n	72c4 <vTask_GSM_service+0x61c>
    72c2:	e08e      	b.n	73e2 <vTask_GSM_service+0x73a>
    72c4:	4b75      	ldr	r3, [pc, #468]	; (749c <vTask_GSM_service+0x7f4>)
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	b2db      	uxtb	r3, r3
    72ca:	2b4e      	cmp	r3, #78	; 0x4e
    72cc:	d005      	beq.n	72da <vTask_GSM_service+0x632>
    72ce:	4b73      	ldr	r3, [pc, #460]	; (749c <vTask_GSM_service+0x7f4>)
    72d0:	781b      	ldrb	r3, [r3, #0]
    72d2:	b2db      	uxtb	r3, r3
    72d4:	2b49      	cmp	r3, #73	; 0x49
    72d6:	d000      	beq.n	72da <vTask_GSM_service+0x632>
    72d8:	e083      	b.n	73e2 <vTask_GSM_service+0x73a>
						{
							if (gsm_responseLine_isRinging(response))
    72da:	230c      	movs	r3, #12
    72dc:	18fb      	adds	r3, r7, r3
    72de:	0018      	movs	r0, r3
    72e0:	4b6f      	ldr	r3, [pc, #444]	; (74a0 <vTask_GSM_service+0x7f8>)
    72e2:	4798      	blx	r3
    72e4:	1e03      	subs	r3, r0, #0
    72e6:	d071      	beq.n	73cc <vTask_GSM_service+0x724>
							{
								currentStatus = 'R';
    72e8:	4b6b      	ldr	r3, [pc, #428]	; (7498 <vTask_GSM_service+0x7f0>)
    72ea:	2252      	movs	r2, #82	; 0x52
    72ec:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
    72ee:	4b6b      	ldr	r3, [pc, #428]	; (749c <vTask_GSM_service+0x7f4>)
    72f0:	2249      	movs	r2, #73	; 0x49
    72f2:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
    72f4:	23ec      	movs	r3, #236	; 0xec
    72f6:	18fb      	adds	r3, r7, r3
    72f8:	0018      	movs	r0, r3
    72fa:	2314      	movs	r3, #20
    72fc:	001a      	movs	r2, r3
    72fe:	2100      	movs	r1, #0
    7300:	4b48      	ldr	r3, [pc, #288]	; (7424 <vTask_GSM_service+0x77c>)
    7302:	4798      	blx	r3
								inCall = true;
    7304:	4b67      	ldr	r3, [pc, #412]	; (74a4 <vTask_GSM_service+0x7fc>)
    7306:	2201      	movs	r2, #1
    7308:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
    730a:	2328      	movs	r3, #40	; 0x28
    730c:	33ff      	adds	r3, #255	; 0xff
    730e:	18fb      	adds	r3, r7, r3
    7310:	2200      	movs	r2, #0
    7312:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
    7314:	2393      	movs	r3, #147	; 0x93
    7316:	005b      	lsls	r3, r3, #1
    7318:	18fb      	adds	r3, r7, r3
    731a:	2200      	movs	r2, #0
    731c:	701a      	strb	r2, [r3, #0]
    731e:	e02f      	b.n	7380 <vTask_GSM_service+0x6d8>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
    7320:	23fa      	movs	r3, #250	; 0xfa
    7322:	005b      	lsls	r3, r3, #1
    7324:	0018      	movs	r0, r3
    7326:	4b60      	ldr	r3, [pc, #384]	; (74a8 <vTask_GSM_service+0x800>)
    7328:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
    732a:	230c      	movs	r3, #12
    732c:	18fb      	adds	r3, r7, r3
    732e:	2140      	movs	r1, #64	; 0x40
    7330:	0018      	movs	r0, r3
    7332:	4b3d      	ldr	r3, [pc, #244]	; (7428 <vTask_GSM_service+0x780>)
    7334:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
    7336:	23ec      	movs	r3, #236	; 0xec
    7338:	18fa      	adds	r2, r7, r3
    733a:	230c      	movs	r3, #12
    733c:	18fb      	adds	r3, r7, r3
    733e:	0011      	movs	r1, r2
    7340:	0018      	movs	r0, r3
    7342:	4b5a      	ldr	r3, [pc, #360]	; (74ac <vTask_GSM_service+0x804>)
    7344:	4798      	blx	r3
    7346:	1e03      	subs	r3, r0, #0
    7348:	d011      	beq.n	736e <vTask_GSM_service+0x6c6>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
    734a:	23ec      	movs	r3, #236	; 0xec
    734c:	18fb      	adds	r3, r7, r3
    734e:	2200      	movs	r2, #0
    7350:	0019      	movs	r1, r3
    7352:	2001      	movs	r0, #1
    7354:	4b3b      	ldr	r3, [pc, #236]	; (7444 <vTask_GSM_service+0x79c>)
    7356:	4798      	blx	r3
										new_call = true;
    7358:	2328      	movs	r3, #40	; 0x28
    735a:	33ff      	adds	r3, #255	; 0xff
    735c:	18fb      	adds	r3, r7, r3
    735e:	2201      	movs	r2, #1
    7360:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
    7362:	4b53      	ldr	r3, [pc, #332]	; (74b0 <vTask_GSM_service+0x808>)
    7364:	4798      	blx	r3
    7366:	0002      	movs	r2, r0
    7368:	4b52      	ldr	r3, [pc, #328]	; (74b4 <vTask_GSM_service+0x80c>)
    736a:	601a      	str	r2, [r3, #0]
										break;
    736c:	e00e      	b.n	738c <vTask_GSM_service+0x6e4>
								for (uint8_t i=0;i<4;i++)
    736e:	2393      	movs	r3, #147	; 0x93
    7370:	005b      	lsls	r3, r3, #1
    7372:	18fb      	adds	r3, r7, r3
    7374:	781a      	ldrb	r2, [r3, #0]
    7376:	2393      	movs	r3, #147	; 0x93
    7378:	005b      	lsls	r3, r3, #1
    737a:	18fb      	adds	r3, r7, r3
    737c:	3201      	adds	r2, #1
    737e:	701a      	strb	r2, [r3, #0]
    7380:	2393      	movs	r3, #147	; 0x93
    7382:	005b      	lsls	r3, r3, #1
    7384:	18fb      	adds	r3, r7, r3
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	2b03      	cmp	r3, #3
    738a:	d9c9      	bls.n	7320 <vTask_GSM_service+0x678>
									}
								}
								if (new_call)
    738c:	2328      	movs	r3, #40	; 0x28
    738e:	33ff      	adds	r3, #255	; 0xff
    7390:	18fb      	adds	r3, r7, r3
    7392:	781b      	ldrb	r3, [r3, #0]
    7394:	2b00      	cmp	r3, #0
    7396:	d100      	bne.n	739a <vTask_GSM_service+0x6f2>
    7398:	e1ab      	b.n	76f2 <vTask_GSM_service+0xa4a>
								{
									new_call = false;
    739a:	2328      	movs	r3, #40	; 0x28
    739c:	33ff      	adds	r3, #255	; 0xff
    739e:	18fb      	adds	r3, r7, r3
    73a0:	2200      	movs	r2, #0
    73a2:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
    73a4:	23ec      	movs	r3, #236	; 0xec
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	0018      	movs	r0, r3
    73aa:	4b43      	ldr	r3, [pc, #268]	; (74b8 <vTask_GSM_service+0x810>)
    73ac:	4798      	blx	r3
    73ae:	1e03      	subs	r3, r0, #0
    73b0:	d009      	beq.n	73c6 <vTask_GSM_service+0x71e>
									{
										acceptCall();
    73b2:	4b42      	ldr	r3, [pc, #264]	; (74bc <vTask_GSM_service+0x814>)
    73b4:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
    73b6:	23ec      	movs	r3, #236	; 0xec
    73b8:	18fb      	adds	r3, r7, r3
    73ba:	2200      	movs	r2, #0
    73bc:	0019      	movs	r1, r3
    73be:	2002      	movs	r0, #2
    73c0:	4b20      	ldr	r3, [pc, #128]	; (7444 <vTask_GSM_service+0x79c>)
    73c2:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    73c4:	e195      	b.n	76f2 <vTask_GSM_service+0xa4a>
									}
									else
									{
										endCall();
    73c6:	4b3e      	ldr	r3, [pc, #248]	; (74c0 <vTask_GSM_service+0x818>)
    73c8:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    73ca:	e192      	b.n	76f2 <vTask_GSM_service+0xa4a>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
    73cc:	230c      	movs	r3, #12
    73ce:	18fb      	adds	r3, r7, r3
    73d0:	0018      	movs	r0, r3
    73d2:	4b3c      	ldr	r3, [pc, #240]	; (74c4 <vTask_GSM_service+0x81c>)
    73d4:	4798      	blx	r3
    73d6:	1e03      	subs	r3, r0, #0
    73d8:	d100      	bne.n	73dc <vTask_GSM_service+0x734>
    73da:	e18a      	b.n	76f2 <vTask_GSM_service+0xa4a>
							{
								endCall();
    73dc:	4b38      	ldr	r3, [pc, #224]	; (74c0 <vTask_GSM_service+0x818>)
    73de:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    73e0:	e187      	b.n	76f2 <vTask_GSM_service+0xa4a>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
    73e2:	4b2c      	ldr	r3, [pc, #176]	; (7494 <vTask_GSM_service+0x7ec>)
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	2201      	movs	r2, #1
    73e8:	4053      	eors	r3, r2
    73ea:	b2db      	uxtb	r3, r3
    73ec:	2b00      	cmp	r3, #0
    73ee:	d100      	bne.n	73f2 <vTask_GSM_service+0x74a>
    73f0:	e09c      	b.n	752c <vTask_GSM_service+0x884>
    73f2:	4b29      	ldr	r3, [pc, #164]	; (7498 <vTask_GSM_service+0x7f0>)
    73f4:	781b      	ldrb	r3, [r3, #0]
    73f6:	b2db      	uxtb	r3, r3
    73f8:	2b49      	cmp	r3, #73	; 0x49
    73fa:	d000      	beq.n	73fe <vTask_GSM_service+0x756>
    73fc:	e096      	b.n	752c <vTask_GSM_service+0x884>
    73fe:	4b27      	ldr	r3, [pc, #156]	; (749c <vTask_GSM_service+0x7f4>)
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	b2db      	uxtb	r3, r3
    7404:	2b49      	cmp	r3, #73	; 0x49
    7406:	d000      	beq.n	740a <vTask_GSM_service+0x762>
    7408:	e090      	b.n	752c <vTask_GSM_service+0x884>
						{
							if (gsm_responseLine_isCallCut(response))
    740a:	230c      	movs	r3, #12
    740c:	18fb      	adds	r3, r7, r3
    740e:	0018      	movs	r0, r3
    7410:	4b2c      	ldr	r3, [pc, #176]	; (74c4 <vTask_GSM_service+0x81c>)
    7412:	4798      	blx	r3
    7414:	1e03      	subs	r3, r0, #0
    7416:	d057      	beq.n	74c8 <vTask_GSM_service+0x820>
							{
								endCall();
    7418:	4b29      	ldr	r3, [pc, #164]	; (74c0 <vTask_GSM_service+0x818>)
    741a:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    741c:	e16d      	b.n	76fa <vTask_GSM_service+0xa52>
    741e:	46c0      	nop			; (mov r8, r8)
    7420:	fffffedc 	.word	0xfffffedc
    7424:	000178b7 	.word	0x000178b7
    7428:	00003171 	.word	0x00003171
    742c:	00003201 	.word	0x00003201
    7430:	0000298d 	.word	0x0000298d
    7434:	0000193d 	.word	0x0000193d
    7438:	00000995 	.word	0x00000995
    743c:	00000a05 	.word	0x00000a05
    7440:	0001902c 	.word	0x0001902c
    7444:	0000b93d 	.word	0x0000b93d
    7448:	00003cf5 	.word	0x00003cf5
    744c:	00019034 	.word	0x00019034
    7450:	00003d61 	.word	0x00003d61
    7454:	00017b47 	.word	0x00017b47
    7458:	00017893 	.word	0x00017893
    745c:	00004a99 	.word	0x00004a99
    7460:	00000a4d 	.word	0x00000a4d
    7464:	00019018 	.word	0x00019018
    7468:	00000b3d 	.word	0x00000b3d
    746c:	00000ac5 	.word	0x00000ac5
    7470:	00019038 	.word	0x00019038
    7474:	00002861 	.word	0x00002861
    7478:	20000618 	.word	0x20000618
    747c:	00000a89 	.word	0x00000a89
    7480:	00000b8d 	.word	0x00000b8d
    7484:	00000bdd 	.word	0x00000bdd
    7488:	00000d19 	.word	0x00000d19
    748c:	00019040 	.word	0x00019040
    7490:	00002469 	.word	0x00002469
    7494:	20000708 	.word	0x20000708
    7498:	20000794 	.word	0x20000794
    749c:	20000753 	.word	0x20000753
    74a0:	00003289 	.word	0x00003289
    74a4:	20000760 	.word	0x20000760
    74a8:	0000ebf9 	.word	0x0000ebf9
    74ac:	000032b9 	.word	0x000032b9
    74b0:	0000ef5d 	.word	0x0000ef5d
    74b4:	200007b8 	.word	0x200007b8
    74b8:	00006931 	.word	0x00006931
    74bc:	00004305 	.word	0x00004305
    74c0:	0000400d 	.word	0x0000400d
    74c4:	0000335d 	.word	0x0000335d
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
    74c8:	230c      	movs	r3, #12
    74ca:	18fb      	adds	r3, r7, r3
    74cc:	0018      	movs	r0, r3
    74ce:	4b8c      	ldr	r3, [pc, #560]	; (7700 <vTask_GSM_service+0xa58>)
    74d0:	4798      	blx	r3
    74d2:	1e03      	subs	r3, r0, #0
    74d4:	d024      	beq.n	7520 <vTask_GSM_service+0x878>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    74d6:	4a8b      	ldr	r2, [pc, #556]	; (7704 <vTask_GSM_service+0xa5c>)
    74d8:	230c      	movs	r3, #12
    74da:	18fb      	adds	r3, r7, r3
    74dc:	0011      	movs	r1, r2
    74de:	0018      	movs	r0, r3
    74e0:	4b89      	ldr	r3, [pc, #548]	; (7708 <vTask_GSM_service+0xa60>)
    74e2:	4798      	blx	r3
    74e4:	0003      	movs	r3, r0
    74e6:	228e      	movs	r2, #142	; 0x8e
    74e8:	0052      	lsls	r2, r2, #1
    74ea:	18ba      	adds	r2, r7, r2
    74ec:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    74ee:	4b85      	ldr	r3, [pc, #532]	; (7704 <vTask_GSM_service+0xa5c>)
    74f0:	0019      	movs	r1, r3
    74f2:	2000      	movs	r0, #0
    74f4:	4b84      	ldr	r3, [pc, #528]	; (7708 <vTask_GSM_service+0xa60>)
    74f6:	4798      	blx	r3
    74f8:	0003      	movs	r3, r0
    74fa:	228e      	movs	r2, #142	; 0x8e
    74fc:	0052      	lsls	r2, r2, #1
    74fe:	18ba      	adds	r2, r7, r2
    7500:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    7502:	238e      	movs	r3, #142	; 0x8e
    7504:	005b      	lsls	r3, r3, #1
    7506:	18fb      	adds	r3, r7, r3
    7508:	681b      	ldr	r3, [r3, #0]
    750a:	0018      	movs	r0, r3
    750c:	4b7f      	ldr	r3, [pc, #508]	; (770c <vTask_GSM_service+0xa64>)
    750e:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    7510:	238e      	movs	r3, #142	; 0x8e
    7512:	005b      	lsls	r3, r3, #1
    7514:	18fb      	adds	r3, r7, r3
    7516:	681b      	ldr	r3, [r3, #0]
    7518:	0018      	movs	r0, r3
    751a:	4b7d      	ldr	r3, [pc, #500]	; (7710 <vTask_GSM_service+0xa68>)
    751c:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    751e:	e0ec      	b.n	76fa <vTask_GSM_service+0xa52>
							}
							else
							{
								playSoundAgain(response);
    7520:	230c      	movs	r3, #12
    7522:	18fb      	adds	r3, r7, r3
    7524:	0018      	movs	r0, r3
    7526:	4b7b      	ldr	r3, [pc, #492]	; (7714 <vTask_GSM_service+0xa6c>)
    7528:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    752a:	e0e6      	b.n	76fa <vTask_GSM_service+0xa52>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
    752c:	4b7a      	ldr	r3, [pc, #488]	; (7718 <vTask_GSM_service+0xa70>)
    752e:	781b      	ldrb	r3, [r3, #0]
    7530:	b2db      	uxtb	r3, r3
    7532:	2b4e      	cmp	r3, #78	; 0x4e
    7534:	d004      	beq.n	7540 <vTask_GSM_service+0x898>
    7536:	4b78      	ldr	r3, [pc, #480]	; (7718 <vTask_GSM_service+0xa70>)
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	b2db      	uxtb	r3, r3
    753c:	2b52      	cmp	r3, #82	; 0x52
    753e:	d163      	bne.n	7608 <vTask_GSM_service+0x960>
    7540:	4b76      	ldr	r3, [pc, #472]	; (771c <vTask_GSM_service+0xa74>)
    7542:	781b      	ldrb	r3, [r3, #0]
    7544:	b2db      	uxtb	r3, r3
    7546:	2b4f      	cmp	r3, #79	; 0x4f
    7548:	d15e      	bne.n	7608 <vTask_GSM_service+0x960>
						{
							if (OutGoingcallState(response) == 'R')
    754a:	230c      	movs	r3, #12
    754c:	18fb      	adds	r3, r7, r3
    754e:	0018      	movs	r0, r3
    7550:	4b73      	ldr	r3, [pc, #460]	; (7720 <vTask_GSM_service+0xa78>)
    7552:	4798      	blx	r3
    7554:	0003      	movs	r3, r0
    7556:	2b52      	cmp	r3, #82	; 0x52
    7558:	d10b      	bne.n	7572 <vTask_GSM_service+0x8ca>
							{
								callCutWait = xTaskGetTickCount();
    755a:	4b72      	ldr	r3, [pc, #456]	; (7724 <vTask_GSM_service+0xa7c>)
    755c:	4798      	blx	r3
    755e:	0002      	movs	r2, r0
    7560:	4b71      	ldr	r3, [pc, #452]	; (7728 <vTask_GSM_service+0xa80>)
    7562:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
    7564:	4b6c      	ldr	r3, [pc, #432]	; (7718 <vTask_GSM_service+0xa70>)
    7566:	2252      	movs	r2, #82	; 0x52
    7568:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    756a:	4b6c      	ldr	r3, [pc, #432]	; (771c <vTask_GSM_service+0xa74>)
    756c:	224f      	movs	r2, #79	; 0x4f
    756e:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
    7570:	e0c2      	b.n	76f8 <vTask_GSM_service+0xa50>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
    7572:	230c      	movs	r3, #12
    7574:	18fb      	adds	r3, r7, r3
    7576:	0018      	movs	r0, r3
    7578:	4b6c      	ldr	r3, [pc, #432]	; (772c <vTask_GSM_service+0xa84>)
    757a:	4798      	blx	r3
    757c:	1e03      	subs	r3, r0, #0
    757e:	d107      	bne.n	7590 <vTask_GSM_service+0x8e8>
    7580:	230c      	movs	r3, #12
    7582:	18fb      	adds	r3, r7, r3
    7584:	0018      	movs	r0, r3
    7586:	4b66      	ldr	r3, [pc, #408]	; (7720 <vTask_GSM_service+0xa78>)
    7588:	4798      	blx	r3
    758a:	0003      	movs	r3, r0
    758c:	2b45      	cmp	r3, #69	; 0x45
    758e:	d110      	bne.n	75b2 <vTask_GSM_service+0x90a>
							{
								char t1 = actionType;
    7590:	231c      	movs	r3, #28
    7592:	33ff      	adds	r3, #255	; 0xff
    7594:	18fb      	adds	r3, r7, r3
    7596:	4a66      	ldr	r2, [pc, #408]	; (7730 <vTask_GSM_service+0xa88>)
    7598:	7812      	ldrb	r2, [r2, #0]
    759a:	701a      	strb	r2, [r3, #0]
								endCall();
    759c:	4b65      	ldr	r3, [pc, #404]	; (7734 <vTask_GSM_service+0xa8c>)
    759e:	4798      	blx	r3
								checkRespSMS(t1);
    75a0:	231c      	movs	r3, #28
    75a2:	33ff      	adds	r3, #255	; 0xff
    75a4:	18fb      	adds	r3, r7, r3
    75a6:	781b      	ldrb	r3, [r3, #0]
    75a8:	0018      	movs	r0, r3
    75aa:	4b63      	ldr	r3, [pc, #396]	; (7738 <vTask_GSM_service+0xa90>)
    75ac:	4798      	blx	r3
							{
    75ae:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
    75b0:	e0a2      	b.n	76f8 <vTask_GSM_service+0xa50>
							}
							else if (OutGoingcallState(response) == 'I')
    75b2:	230c      	movs	r3, #12
    75b4:	18fb      	adds	r3, r7, r3
    75b6:	0018      	movs	r0, r3
    75b8:	4b59      	ldr	r3, [pc, #356]	; (7720 <vTask_GSM_service+0xa78>)
    75ba:	4798      	blx	r3
    75bc:	0003      	movs	r3, r0
    75be:	2b49      	cmp	r3, #73	; 0x49
    75c0:	d000      	beq.n	75c4 <vTask_GSM_service+0x91c>
    75c2:	e099      	b.n	76f8 <vTask_GSM_service+0xa50>
							{
								callCutWait = xTaskGetTickCount();
    75c4:	4b57      	ldr	r3, [pc, #348]	; (7724 <vTask_GSM_service+0xa7c>)
    75c6:	4798      	blx	r3
    75c8:	0002      	movs	r2, r0
    75ca:	4b57      	ldr	r3, [pc, #348]	; (7728 <vTask_GSM_service+0xa80>)
    75cc:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
    75ce:	4b52      	ldr	r3, [pc, #328]	; (7718 <vTask_GSM_service+0xa70>)
    75d0:	2249      	movs	r2, #73	; 0x49
    75d2:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    75d4:	4b51      	ldr	r3, [pc, #324]	; (771c <vTask_GSM_service+0xa74>)
    75d6:	224f      	movs	r2, #79	; 0x4f
    75d8:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
    75da:	4b58      	ldr	r3, [pc, #352]	; (773c <vTask_GSM_service+0xa94>)
    75dc:	2201      	movs	r2, #1
    75de:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
    75e0:	2201      	movs	r2, #1
    75e2:	2100      	movs	r1, #0
    75e4:	2002      	movs	r0, #2
    75e6:	4b56      	ldr	r3, [pc, #344]	; (7740 <vTask_GSM_service+0xa98>)
    75e8:	4798      	blx	r3
								if (!m2mEvent)
    75ea:	4b56      	ldr	r3, [pc, #344]	; (7744 <vTask_GSM_service+0xa9c>)
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	2201      	movs	r2, #1
    75f0:	4053      	eors	r3, r2
    75f2:	b2db      	uxtb	r3, r3
    75f4:	2b00      	cmp	r3, #0
    75f6:	d100      	bne.n	75fa <vTask_GSM_service+0x952>
    75f8:	e07e      	b.n	76f8 <vTask_GSM_service+0xa50>
								{
									playSound(actionType,true);
    75fa:	4b4d      	ldr	r3, [pc, #308]	; (7730 <vTask_GSM_service+0xa88>)
    75fc:	781b      	ldrb	r3, [r3, #0]
    75fe:	2101      	movs	r1, #1
    7600:	0018      	movs	r0, r3
    7602:	4b51      	ldr	r3, [pc, #324]	; (7748 <vTask_GSM_service+0xaa0>)
    7604:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
    7606:	e077      	b.n	76f8 <vTask_GSM_service+0xa50>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
    7608:	4b43      	ldr	r3, [pc, #268]	; (7718 <vTask_GSM_service+0xa70>)
    760a:	781b      	ldrb	r3, [r3, #0]
    760c:	b2db      	uxtb	r3, r3
    760e:	2b49      	cmp	r3, #73	; 0x49
    7610:	d001      	beq.n	7616 <vTask_GSM_service+0x96e>
    7612:	f7ff fbf8 	bl	6e06 <vTask_GSM_service+0x15e>
    7616:	4b41      	ldr	r3, [pc, #260]	; (771c <vTask_GSM_service+0xa74>)
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	b2db      	uxtb	r3, r3
    761c:	2b4f      	cmp	r3, #79	; 0x4f
    761e:	d001      	beq.n	7624 <vTask_GSM_service+0x97c>
    7620:	f7ff fbf1 	bl	6e06 <vTask_GSM_service+0x15e>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
    7624:	230c      	movs	r3, #12
    7626:	18fb      	adds	r3, r7, r3
    7628:	0018      	movs	r0, r3
    762a:	4b40      	ldr	r3, [pc, #256]	; (772c <vTask_GSM_service+0xa84>)
    762c:	4798      	blx	r3
    762e:	1e03      	subs	r3, r0, #0
    7630:	d107      	bne.n	7642 <vTask_GSM_service+0x99a>
    7632:	230c      	movs	r3, #12
    7634:	18fb      	adds	r3, r7, r3
    7636:	0018      	movs	r0, r3
    7638:	4b39      	ldr	r3, [pc, #228]	; (7720 <vTask_GSM_service+0xa78>)
    763a:	4798      	blx	r3
    763c:	0003      	movs	r3, r0
    763e:	2b45      	cmp	r3, #69	; 0x45
    7640:	d102      	bne.n	7648 <vTask_GSM_service+0x9a0>
							{
								endCall();
    7642:	4b3c      	ldr	r3, [pc, #240]	; (7734 <vTask_GSM_service+0xa8c>)
    7644:	4798      	blx	r3
    7646:	e058      	b.n	76fa <vTask_GSM_service+0xa52>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
    7648:	230c      	movs	r3, #12
    764a:	18fb      	adds	r3, r7, r3
    764c:	0018      	movs	r0, r3
    764e:	4b2c      	ldr	r3, [pc, #176]	; (7700 <vTask_GSM_service+0xa58>)
    7650:	4798      	blx	r3
    7652:	1e03      	subs	r3, r0, #0
    7654:	d025      	beq.n	76a2 <vTask_GSM_service+0x9fa>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    7656:	4a2b      	ldr	r2, [pc, #172]	; (7704 <vTask_GSM_service+0xa5c>)
    7658:	230c      	movs	r3, #12
    765a:	18fb      	adds	r3, r7, r3
    765c:	0011      	movs	r1, r2
    765e:	0018      	movs	r0, r3
    7660:	4b29      	ldr	r3, [pc, #164]	; (7708 <vTask_GSM_service+0xa60>)
    7662:	4798      	blx	r3
    7664:	0003      	movs	r3, r0
    7666:	228a      	movs	r2, #138	; 0x8a
    7668:	0052      	lsls	r2, r2, #1
    766a:	18ba      	adds	r2, r7, r2
    766c:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    766e:	4b25      	ldr	r3, [pc, #148]	; (7704 <vTask_GSM_service+0xa5c>)
    7670:	0019      	movs	r1, r3
    7672:	2000      	movs	r0, #0
    7674:	4b24      	ldr	r3, [pc, #144]	; (7708 <vTask_GSM_service+0xa60>)
    7676:	4798      	blx	r3
    7678:	0003      	movs	r3, r0
    767a:	228a      	movs	r2, #138	; 0x8a
    767c:	0052      	lsls	r2, r2, #1
    767e:	18ba      	adds	r2, r7, r2
    7680:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    7682:	238a      	movs	r3, #138	; 0x8a
    7684:	005b      	lsls	r3, r3, #1
    7686:	18fb      	adds	r3, r7, r3
    7688:	681b      	ldr	r3, [r3, #0]
    768a:	0018      	movs	r0, r3
    768c:	4b1f      	ldr	r3, [pc, #124]	; (770c <vTask_GSM_service+0xa64>)
    768e:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    7690:	238a      	movs	r3, #138	; 0x8a
    7692:	005b      	lsls	r3, r3, #1
    7694:	18fb      	adds	r3, r7, r3
    7696:	681b      	ldr	r3, [r3, #0]
    7698:	0018      	movs	r0, r3
    769a:	4b1d      	ldr	r3, [pc, #116]	; (7710 <vTask_GSM_service+0xa68>)
    769c:	4798      	blx	r3
    769e:	f7ff fbb2 	bl	6e06 <vTask_GSM_service+0x15e>
							}
							else
							{
								playSoundAgain(response);
    76a2:	230c      	movs	r3, #12
    76a4:	18fb      	adds	r3, r7, r3
    76a6:	0018      	movs	r0, r3
    76a8:	4b1a      	ldr	r3, [pc, #104]	; (7714 <vTask_GSM_service+0xa6c>)
    76aa:	4798      	blx	r3
    76ac:	f7ff fbab 	bl	6e06 <vTask_GSM_service+0x15e>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
    76b0:	232c      	movs	r3, #44	; 0x2c
    76b2:	33ff      	adds	r3, #255	; 0xff
    76b4:	18fb      	adds	r3, r7, r3
    76b6:	2200      	movs	r2, #0
    76b8:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
    76ba:	2395      	movs	r3, #149	; 0x95
    76bc:	005b      	lsls	r3, r3, #1
    76be:	18fb      	adds	r3, r7, r3
    76c0:	2200      	movs	r2, #0
    76c2:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
    76c4:	4b21      	ldr	r3, [pc, #132]	; (774c <vTask_GSM_service+0xaa4>)
    76c6:	4a21      	ldr	r2, [pc, #132]	; (774c <vTask_GSM_service+0xaa4>)
    76c8:	6812      	ldr	r2, [r2, #0]
    76ca:	2180      	movs	r1, #128	; 0x80
    76cc:	0249      	lsls	r1, r1, #9
    76ce:	430a      	orrs	r2, r1
    76d0:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
    76d2:	4b1f      	ldr	r3, [pc, #124]	; (7750 <vTask_GSM_service+0xaa8>)
    76d4:	0018      	movs	r0, r3
    76d6:	4b1f      	ldr	r3, [pc, #124]	; (7754 <vTask_GSM_service+0xaac>)
    76d8:	4798      	blx	r3
			GSM_PWR_OFF;
    76da:	4b1c      	ldr	r3, [pc, #112]	; (774c <vTask_GSM_service+0xaa4>)
    76dc:	4a1b      	ldr	r2, [pc, #108]	; (774c <vTask_GSM_service+0xaa4>)
    76de:	6812      	ldr	r2, [r2, #0]
    76e0:	491d      	ldr	r1, [pc, #116]	; (7758 <vTask_GSM_service+0xab0>)
    76e2:	400a      	ands	r2, r1
    76e4:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
    76e6:	4b1d      	ldr	r3, [pc, #116]	; (775c <vTask_GSM_service+0xab4>)
    76e8:	0018      	movs	r0, r3
    76ea:	4b1a      	ldr	r3, [pc, #104]	; (7754 <vTask_GSM_service+0xaac>)
    76ec:	4798      	blx	r3
    76ee:	f7ff fb8a 	bl	6e06 <vTask_GSM_service+0x15e>
							if (gsm_responseLine_isRinging(response))
    76f2:	46c0      	nop			; (mov r8, r8)
    76f4:	f7ff fb87 	bl	6e06 <vTask_GSM_service+0x15e>
							if (OutGoingcallState(response) == 'R')
    76f8:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
    76fa:	f7ff fb84 	bl	6e06 <vTask_GSM_service+0x15e>
    76fe:	46c0      	nop			; (mov r8, r8)
    7700:	000033d5 	.word	0x000033d5
    7704:	00019050 	.word	0x00019050
    7708:	00017ba9 	.word	0x00017ba9
    770c:	000027ed 	.word	0x000027ed
    7710:	00004899 	.word	0x00004899
    7714:	0000445d 	.word	0x0000445d
    7718:	20000794 	.word	0x20000794
    771c:	20000753 	.word	0x20000753
    7720:	0000459d 	.word	0x0000459d
    7724:	0000ef5d 	.word	0x0000ef5d
    7728:	200007b8 	.word	0x200007b8
    772c:	0000335d 	.word	0x0000335d
    7730:	20000727 	.word	0x20000727
    7734:	0000400d 	.word	0x0000400d
    7738:	00004821 	.word	0x00004821
    773c:	20000762 	.word	0x20000762
    7740:	0000b93d 	.word	0x0000b93d
    7744:	20000707 	.word	0x20000707
    7748:	0000434d 	.word	0x0000434d
    774c:	41004490 	.word	0x41004490
    7750:	00000bb8 	.word	0x00000bb8
    7754:	0000ebf9 	.word	0x0000ebf9
    7758:	fffeffff 	.word	0xfffeffff
    775c:	00001388 	.word	0x00001388

00007760 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
    7760:	b590      	push	{r4, r7, lr}
    7762:	b083      	sub	sp, #12
    7764:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)900,NULL,1,NULL);
    7766:	23e1      	movs	r3, #225	; 0xe1
    7768:	009a      	lsls	r2, r3, #2
    776a:	4806      	ldr	r0, [pc, #24]	; (7784 <start_gsm_service+0x24>)
    776c:	2300      	movs	r3, #0
    776e:	9301      	str	r3, [sp, #4]
    7770:	2301      	movs	r3, #1
    7772:	9300      	str	r3, [sp, #0]
    7774:	2300      	movs	r3, #0
    7776:	2100      	movs	r1, #0
    7778:	4c03      	ldr	r4, [pc, #12]	; (7788 <start_gsm_service+0x28>)
    777a:	47a0      	blx	r4
}
    777c:	46c0      	nop			; (mov r8, r8)
    777e:	46bd      	mov	sp, r7
    7780:	b001      	add	sp, #4
    7782:	bd90      	pop	{r4, r7, pc}
    7784:	00006ca9 	.word	0x00006ca9
    7788:	0000e8b9 	.word	0x0000e8b9

0000778c <busy>:

bool busy(void)
{
    778c:	b580      	push	{r7, lr}
    778e:	af00      	add	r7, sp, #0
	return (inCall /*|| inInterrupt*/);
    7790:	4b02      	ldr	r3, [pc, #8]	; (779c <busy+0x10>)
    7792:	781b      	ldrb	r3, [r3, #0]
}
    7794:	0018      	movs	r0, r3
    7796:	46bd      	mov	sp, r7
    7798:	bd80      	pop	{r7, pc}
    779a:	46c0      	nop			; (mov r8, r8)
    779c:	20000760 	.word	0x20000760

000077a0 <checkNotInCall>:

bool checkNotInCall(void)
{
    77a0:	b580      	push	{r7, lr}
    77a2:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
    77a4:	4b13      	ldr	r3, [pc, #76]	; (77f4 <checkNotInCall+0x54>)
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
    77aa:	2b4e      	cmp	r3, #78	; 0x4e
    77ac:	d11a      	bne.n	77e4 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
    77ae:	4b12      	ldr	r3, [pc, #72]	; (77f8 <checkNotInCall+0x58>)
    77b0:	781b      	ldrb	r3, [r3, #0]
    77b2:	b2db      	uxtb	r3, r3
    77b4:	2b4e      	cmp	r3, #78	; 0x4e
    77b6:	d115      	bne.n	77e4 <checkNotInCall+0x44>
    77b8:	4b10      	ldr	r3, [pc, #64]	; (77fc <checkNotInCall+0x5c>)
    77ba:	781b      	ldrb	r3, [r3, #0]
    77bc:	2b00      	cmp	r3, #0
    77be:	d011      	beq.n	77e4 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
    77c0:	4b0f      	ldr	r3, [pc, #60]	; (7800 <checkNotInCall+0x60>)
    77c2:	781b      	ldrb	r3, [r3, #0]
    77c4:	2201      	movs	r2, #1
    77c6:	4053      	eors	r3, r2
    77c8:	b2db      	uxtb	r3, r3
    77ca:	2b00      	cmp	r3, #0
    77cc:	d00a      	beq.n	77e4 <checkNotInCall+0x44>
    77ce:	4b0d      	ldr	r3, [pc, #52]	; (7804 <checkNotInCall+0x64>)
    77d0:	4798      	blx	r3
    77d2:	0003      	movs	r3, r0
    77d4:	001a      	movs	r2, r3
    77d6:	2301      	movs	r3, #1
    77d8:	4053      	eors	r3, r2
    77da:	b2db      	uxtb	r3, r3
    77dc:	2b00      	cmp	r3, #0
    77de:	d001      	beq.n	77e4 <checkNotInCall+0x44>
    77e0:	2301      	movs	r3, #1
    77e2:	e000      	b.n	77e6 <checkNotInCall+0x46>
    77e4:	2300      	movs	r3, #0
    77e6:	1c1a      	adds	r2, r3, #0
    77e8:	2301      	movs	r3, #1
    77ea:	4013      	ands	r3, r2
    77ec:	b2db      	uxtb	r3, r3
}
    77ee:	0018      	movs	r0, r3
    77f0:	46bd      	mov	sp, r7
    77f2:	bd80      	pop	{r7, pc}
    77f4:	20000794 	.word	0x20000794
    77f8:	20000753 	.word	0x20000753
    77fc:	20000736 	.word	0x20000736
    7800:	20000708 	.word	0x20000708
    7804:	0000778d 	.word	0x0000778d

00007808 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
    7808:	b580      	push	{r7, lr}
    780a:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
    780c:	4b20      	ldr	r3, [pc, #128]	; (7890 <gsm_checkSleepElligible+0x88>)
    780e:	78db      	ldrb	r3, [r3, #3]
    7810:	2b00      	cmp	r3, #0
    7812:	d020      	beq.n	7856 <gsm_checkSleepElligible+0x4e>
	{
		return(!commandsAccepted  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    7814:	4b1f      	ldr	r3, [pc, #124]	; (7894 <gsm_checkSleepElligible+0x8c>)
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	2201      	movs	r2, #1
    781a:	4053      	eors	r3, r2
    781c:	b2db      	uxtb	r3, r3
    781e:	2b00      	cmp	r3, #0
    7820:	d013      	beq.n	784a <gsm_checkSleepElligible+0x42>
    7822:	4b1d      	ldr	r3, [pc, #116]	; (7898 <gsm_checkSleepElligible+0x90>)
    7824:	4798      	blx	r3
    7826:	1e03      	subs	r3, r0, #0
    7828:	d00f      	beq.n	784a <gsm_checkSleepElligible+0x42>
    782a:	4b1c      	ldr	r3, [pc, #112]	; (789c <gsm_checkSleepElligible+0x94>)
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	2201      	movs	r2, #1
    7830:	4053      	eors	r3, r2
    7832:	b2db      	uxtb	r3, r3
    7834:	2b00      	cmp	r3, #0
    7836:	d008      	beq.n	784a <gsm_checkSleepElligible+0x42>
    7838:	4b19      	ldr	r3, [pc, #100]	; (78a0 <gsm_checkSleepElligible+0x98>)
    783a:	781b      	ldrb	r3, [r3, #0]
    783c:	2201      	movs	r2, #1
    783e:	4053      	eors	r3, r2
    7840:	b2db      	uxtb	r3, r3
    7842:	2b00      	cmp	r3, #0
    7844:	d001      	beq.n	784a <gsm_checkSleepElligible+0x42>
    7846:	2301      	movs	r3, #1
    7848:	e000      	b.n	784c <gsm_checkSleepElligible+0x44>
    784a:	2300      	movs	r3, #0
    784c:	1c1a      	adds	r2, r3, #0
    784e:	2301      	movs	r3, #1
    7850:	4013      	ands	r3, r2
    7852:	b2db      	uxtb	r3, r3
    7854:	e018      	b.n	7888 <gsm_checkSleepElligible+0x80>
	}
	else
	{
		return(!commandsAccepted  && checkNotInCall() && !eventStaged);
    7856:	4b0f      	ldr	r3, [pc, #60]	; (7894 <gsm_checkSleepElligible+0x8c>)
    7858:	781b      	ldrb	r3, [r3, #0]
    785a:	2201      	movs	r2, #1
    785c:	4053      	eors	r3, r2
    785e:	b2db      	uxtb	r3, r3
    7860:	2b00      	cmp	r3, #0
    7862:	d00c      	beq.n	787e <gsm_checkSleepElligible+0x76>
    7864:	4b0c      	ldr	r3, [pc, #48]	; (7898 <gsm_checkSleepElligible+0x90>)
    7866:	4798      	blx	r3
    7868:	1e03      	subs	r3, r0, #0
    786a:	d008      	beq.n	787e <gsm_checkSleepElligible+0x76>
    786c:	4b0c      	ldr	r3, [pc, #48]	; (78a0 <gsm_checkSleepElligible+0x98>)
    786e:	781b      	ldrb	r3, [r3, #0]
    7870:	2201      	movs	r2, #1
    7872:	4053      	eors	r3, r2
    7874:	b2db      	uxtb	r3, r3
    7876:	2b00      	cmp	r3, #0
    7878:	d001      	beq.n	787e <gsm_checkSleepElligible+0x76>
    787a:	2301      	movs	r3, #1
    787c:	e000      	b.n	7880 <gsm_checkSleepElligible+0x78>
    787e:	2300      	movs	r3, #0
    7880:	1c1a      	adds	r2, r3, #0
    7882:	2301      	movs	r3, #1
    7884:	4013      	ands	r3, r2
    7886:	b2db      	uxtb	r3, r3
	}
    7888:	0018      	movs	r0, r3
    788a:	46bd      	mov	sp, r7
    788c:	bd80      	pop	{r7, pc}
    788e:	46c0      	nop			; (mov r8, r8)
    7890:	20000618 	.word	0x20000618
    7894:	2000074f 	.word	0x2000074f
    7898:	000077a1 	.word	0x000077a1
    789c:	20000752 	.word	0x20000752
    78a0:	20000786 	.word	0x20000786

000078a4 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
    78a4:	b590      	push	{r4, r7, lr}
    78a6:	b093      	sub	sp, #76	; 0x4c
    78a8:	af02      	add	r7, sp, #8
    78aa:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
    78ac:	4be6      	ldr	r3, [pc, #920]	; (7c48 <lcd_displaying_task+0x3a4>)
    78ae:	2200      	movs	r2, #0
    78b0:	701a      	strb	r2, [r3, #0]
	
	LCD_PWR_CONFIG();
    78b2:	4be6      	ldr	r3, [pc, #920]	; (7c4c <lcd_displaying_task+0x3a8>)
    78b4:	4798      	blx	r3
	LCD_PWR_EN();
    78b6:	4be6      	ldr	r3, [pc, #920]	; (7c50 <lcd_displaying_task+0x3ac>)
    78b8:	4798      	blx	r3
	vTaskDelay(500);
    78ba:	23fa      	movs	r3, #250	; 0xfa
    78bc:	005b      	lsls	r3, r3, #1
    78be:	0018      	movs	r0, r3
    78c0:	4be4      	ldr	r3, [pc, #912]	; (7c54 <lcd_displaying_task+0x3b0>)
    78c2:	4798      	blx	r3
	
	LCD_init();
    78c4:	4be4      	ldr	r3, [pc, #912]	; (7c58 <lcd_displaying_task+0x3b4>)
    78c6:	4798      	blx	r3
	
	uint8_t screen=1;
    78c8:	233f      	movs	r3, #63	; 0x3f
    78ca:	18fb      	adds	r3, r7, r3
    78cc:	2201      	movs	r2, #1
    78ce:	701a      	strb	r2, [r3, #0]
	
	bool four_sec_timer_is_active = true;
    78d0:	233d      	movs	r3, #61	; 0x3d
    78d2:	18fb      	adds	r3, r7, r3
    78d4:	2201      	movs	r2, #1
    78d6:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
    78d8:	233c      	movs	r3, #60	; 0x3c
    78da:	18fb      	adds	r3, r7, r3
    78dc:	2200      	movs	r2, #0
    78de:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
    78e0:	233a      	movs	r3, #58	; 0x3a
    78e2:	18fb      	adds	r3, r7, r3
    78e4:	2200      	movs	r2, #0
    78e6:	701a      	strb	r2, [r3, #0]
	
	byte Network_0[8]={
    78e8:	2330      	movs	r3, #48	; 0x30
    78ea:	18fb      	adds	r3, r7, r3
    78ec:	0018      	movs	r0, r3
    78ee:	2308      	movs	r3, #8
    78f0:	001a      	movs	r2, r3
    78f2:	2100      	movs	r1, #0
    78f4:	4bd9      	ldr	r3, [pc, #868]	; (7c5c <lcd_displaying_task+0x3b8>)
    78f6:	4798      	blx	r3
		0B00000,
		0B00000,
		0B00000
	};
	
	byte Network_1[8]={
    78f8:	2328      	movs	r3, #40	; 0x28
    78fa:	18fb      	adds	r3, r7, r3
    78fc:	4ad8      	ldr	r2, [pc, #864]	; (7c60 <lcd_displaying_task+0x3bc>)
    78fe:	ca03      	ldmia	r2!, {r0, r1}
    7900:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B00000,
		0B11111,
		0B11111
	};
	byte Network_2[8]={
    7902:	2320      	movs	r3, #32
    7904:	18fb      	adds	r3, r7, r3
    7906:	4ad7      	ldr	r2, [pc, #860]	; (7c64 <lcd_displaying_task+0x3c0>)
    7908:	ca03      	ldmia	r2!, {r0, r1}
    790a:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_3[8]={
    790c:	2318      	movs	r3, #24
    790e:	18fb      	adds	r3, r7, r3
    7910:	4ad5      	ldr	r2, [pc, #852]	; (7c68 <lcd_displaying_task+0x3c4>)
    7912:	ca03      	ldmia	r2!, {r0, r1}
    7914:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_4[8]={
    7916:	2310      	movs	r3, #16
    7918:	18fb      	adds	r3, r7, r3
    791a:	4ad4      	ldr	r2, [pc, #848]	; (7c6c <lcd_displaying_task+0x3c8>)
    791c:	ca03      	ldmia	r2!, {r0, r1}
    791e:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};

	byte Network_5[8]={
    7920:	2308      	movs	r3, #8
    7922:	18fb      	adds	r3, r7, r3
    7924:	4ad2      	ldr	r2, [pc, #840]	; (7c70 <lcd_displaying_task+0x3cc>)
    7926:	ca03      	ldmia	r2!, {r0, r1}
    7928:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};
	
	LCD_Create_Custom_createChar(0,Network_0);
    792a:	2330      	movs	r3, #48	; 0x30
    792c:	18fb      	adds	r3, r7, r3
    792e:	0019      	movs	r1, r3
    7930:	2000      	movs	r0, #0
    7932:	4bd0      	ldr	r3, [pc, #832]	; (7c74 <lcd_displaying_task+0x3d0>)
    7934:	4798      	blx	r3
	LCD_Create_Custom_createChar(1,Network_1);
    7936:	2328      	movs	r3, #40	; 0x28
    7938:	18fb      	adds	r3, r7, r3
    793a:	0019      	movs	r1, r3
    793c:	2001      	movs	r0, #1
    793e:	4bcd      	ldr	r3, [pc, #820]	; (7c74 <lcd_displaying_task+0x3d0>)
    7940:	4798      	blx	r3
	LCD_Create_Custom_createChar(2,Network_2);
    7942:	2320      	movs	r3, #32
    7944:	18fb      	adds	r3, r7, r3
    7946:	0019      	movs	r1, r3
    7948:	2002      	movs	r0, #2
    794a:	4bca      	ldr	r3, [pc, #808]	; (7c74 <lcd_displaying_task+0x3d0>)
    794c:	4798      	blx	r3
	LCD_Create_Custom_createChar(3,Network_3);
    794e:	2318      	movs	r3, #24
    7950:	18fb      	adds	r3, r7, r3
    7952:	0019      	movs	r1, r3
    7954:	2003      	movs	r0, #3
    7956:	4bc7      	ldr	r3, [pc, #796]	; (7c74 <lcd_displaying_task+0x3d0>)
    7958:	4798      	blx	r3
	LCD_Create_Custom_createChar(4,Network_4);
    795a:	2310      	movs	r3, #16
    795c:	18fb      	adds	r3, r7, r3
    795e:	0019      	movs	r1, r3
    7960:	2004      	movs	r0, #4
    7962:	4bc4      	ldr	r3, [pc, #784]	; (7c74 <lcd_displaying_task+0x3d0>)
    7964:	4798      	blx	r3
	LCD_Create_Custom_createChar(5,Network_5);
    7966:	2308      	movs	r3, #8
    7968:	18fb      	adds	r3, r7, r3
    796a:	0019      	movs	r1, r3
    796c:	2005      	movs	r0, #5
    796e:	4bc1      	ldr	r3, [pc, #772]	; (7c74 <lcd_displaying_task+0x3d0>)
    7970:	4798      	blx	r3
	
	LCD_clear();
    7972:	4bc1      	ldr	r3, [pc, #772]	; (7c78 <lcd_displaying_task+0x3d4>)
    7974:	4798      	blx	r3
	LCD_setCursor(0,0);
    7976:	2100      	movs	r1, #0
    7978:	2000      	movs	r0, #0
    797a:	4bc0      	ldr	r3, [pc, #768]	; (7c7c <lcd_displaying_task+0x3d8>)
    797c:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
    797e:	4bc0      	ldr	r3, [pc, #768]	; (7c80 <lcd_displaying_task+0x3dc>)
    7980:	0018      	movs	r0, r3
    7982:	4bc0      	ldr	r3, [pc, #768]	; (7c84 <lcd_displaying_task+0x3e0>)
    7984:	4798      	blx	r3
	LCD_setCursor(0,1);
    7986:	2101      	movs	r1, #1
    7988:	2000      	movs	r0, #0
    798a:	4bbc      	ldr	r3, [pc, #752]	; (7c7c <lcd_displaying_task+0x3d8>)
    798c:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
    798e:	4bbe      	ldr	r3, [pc, #760]	; (7c88 <lcd_displaying_task+0x3e4>)
    7990:	0018      	movs	r0, r3
    7992:	4bbc      	ldr	r3, [pc, #752]	; (7c84 <lcd_displaying_task+0x3e0>)
    7994:	4798      	blx	r3
	vTaskDelay(3000);
    7996:	4bbd      	ldr	r3, [pc, #756]	; (7c8c <lcd_displaying_task+0x3e8>)
    7998:	0018      	movs	r0, r3
    799a:	4bae      	ldr	r3, [pc, #696]	; (7c54 <lcd_displaying_task+0x3b0>)
    799c:	4798      	blx	r3
	
	LCD_clear();
    799e:	4bb6      	ldr	r3, [pc, #728]	; (7c78 <lcd_displaying_task+0x3d4>)
    79a0:	4798      	blx	r3
	LCD_setCursor(0,0);
    79a2:	2100      	movs	r1, #0
    79a4:	2000      	movs	r0, #0
    79a6:	4bb5      	ldr	r3, [pc, #724]	; (7c7c <lcd_displaying_task+0x3d8>)
    79a8:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
    79aa:	4bb9      	ldr	r3, [pc, #740]	; (7c90 <lcd_displaying_task+0x3ec>)
    79ac:	0018      	movs	r0, r3
    79ae:	4bb5      	ldr	r3, [pc, #724]	; (7c84 <lcd_displaying_task+0x3e0>)
    79b0:	4798      	blx	r3
	LCD_setCursor(0,1);
    79b2:	2101      	movs	r1, #1
    79b4:	2000      	movs	r0, #0
    79b6:	4bb1      	ldr	r3, [pc, #708]	; (7c7c <lcd_displaying_task+0x3d8>)
    79b8:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
    79ba:	4ab6      	ldr	r2, [pc, #728]	; (7c94 <lcd_displaying_task+0x3f0>)
    79bc:	4bb6      	ldr	r3, [pc, #728]	; (7c98 <lcd_displaying_task+0x3f4>)
    79be:	0011      	movs	r1, r2
    79c0:	0018      	movs	r0, r3
    79c2:	4bb0      	ldr	r3, [pc, #704]	; (7c84 <lcd_displaying_task+0x3e0>)
    79c4:	4798      	blx	r3
	vTaskDelay(2000);
    79c6:	23fa      	movs	r3, #250	; 0xfa
    79c8:	00db      	lsls	r3, r3, #3
    79ca:	0018      	movs	r0, r3
    79cc:	4ba1      	ldr	r3, [pc, #644]	; (7c54 <lcd_displaying_task+0x3b0>)
    79ce:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
    79d0:	23fa      	movs	r3, #250	; 0xfa
    79d2:	0119      	lsls	r1, r3, #4
    79d4:	4bb1      	ldr	r3, [pc, #708]	; (7c9c <lcd_displaying_task+0x3f8>)
    79d6:	9300      	str	r3, [sp, #0]
    79d8:	2300      	movs	r3, #0
    79da:	2201      	movs	r2, #1
    79dc:	2000      	movs	r0, #0
    79de:	4cb0      	ldr	r4, [pc, #704]	; (7ca0 <lcd_displaying_task+0x3fc>)
    79e0:	47a0      	blx	r4
    79e2:	0002      	movs	r2, r0
    79e4:	4baf      	ldr	r3, [pc, #700]	; (7ca4 <lcd_displaying_task+0x400>)
    79e6:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
    79e8:	4bae      	ldr	r3, [pc, #696]	; (7ca4 <lcd_displaying_task+0x400>)
    79ea:	681c      	ldr	r4, [r3, #0]
    79ec:	4bae      	ldr	r3, [pc, #696]	; (7ca8 <lcd_displaying_task+0x404>)
    79ee:	4798      	blx	r3
    79f0:	0002      	movs	r2, r0
    79f2:	2300      	movs	r3, #0
    79f4:	9300      	str	r3, [sp, #0]
    79f6:	2300      	movs	r3, #0
    79f8:	2101      	movs	r1, #1
    79fa:	0020      	movs	r0, r4
    79fc:	4cab      	ldr	r4, [pc, #684]	; (7cac <lcd_displaying_task+0x408>)
    79fe:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
    7a00:	4b91      	ldr	r3, [pc, #580]	; (7c48 <lcd_displaying_task+0x3a4>)
    7a02:	781b      	ldrb	r3, [r3, #0]
    7a04:	b2db      	uxtb	r3, r3
    7a06:	2b00      	cmp	r3, #0
    7a08:	d009      	beq.n	7a1e <lcd_displaying_task+0x17a>
		{
			lcd_in_sleep = false;
    7a0a:	4b8f      	ldr	r3, [pc, #572]	; (7c48 <lcd_displaying_task+0x3a4>)
    7a0c:	2200      	movs	r2, #0
    7a0e:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
    7a10:	4b8f      	ldr	r3, [pc, #572]	; (7c50 <lcd_displaying_task+0x3ac>)
    7a12:	4798      	blx	r3
			vTaskDelay(100);
    7a14:	2064      	movs	r0, #100	; 0x64
    7a16:	4b8f      	ldr	r3, [pc, #572]	; (7c54 <lcd_displaying_task+0x3b0>)
    7a18:	4798      	blx	r3
			LCD_init();
    7a1a:	4b8f      	ldr	r3, [pc, #572]	; (7c58 <lcd_displaying_task+0x3b4>)
    7a1c:	4798      	blx	r3
		}
		
		switch(screen)
    7a1e:	233f      	movs	r3, #63	; 0x3f
    7a20:	18fb      	adds	r3, r7, r3
    7a22:	781b      	ldrb	r3, [r3, #0]
    7a24:	2b06      	cmp	r3, #6
    7a26:	d900      	bls.n	7a2a <lcd_displaying_task+0x186>
    7a28:	e1fa      	b.n	7e20 <lcd_displaying_task+0x57c>
    7a2a:	009a      	lsls	r2, r3, #2
    7a2c:	4ba0      	ldr	r3, [pc, #640]	; (7cb0 <lcd_displaying_task+0x40c>)
    7a2e:	18d3      	adds	r3, r2, r3
    7a30:	681b      	ldr	r3, [r3, #0]
    7a32:	469f      	mov	pc, r3
		{
			case  1:
			{
				LCD_setCursor(0,0);
    7a34:	2100      	movs	r1, #0
    7a36:	2000      	movs	r0, #0
    7a38:	4b90      	ldr	r3, [pc, #576]	; (7c7c <lcd_displaying_task+0x3d8>)
    7a3a:	4798      	blx	r3
				lcd_printf("VRY   VYB   VBR ");
    7a3c:	4b9d      	ldr	r3, [pc, #628]	; (7cb4 <lcd_displaying_task+0x410>)
    7a3e:	0018      	movs	r0, r3
    7a40:	4b90      	ldr	r3, [pc, #576]	; (7c84 <lcd_displaying_task+0x3e0>)
    7a42:	4798      	blx	r3
				LCD_setCursor(0,1);
    7a44:	2101      	movs	r1, #1
    7a46:	2000      	movs	r0, #0
    7a48:	4b8c      	ldr	r3, [pc, #560]	; (7c7c <lcd_displaying_task+0x3d8>)
    7a4a:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
    7a4c:	4b9a      	ldr	r3, [pc, #616]	; (7cb8 <lcd_displaying_task+0x414>)
    7a4e:	681a      	ldr	r2, [r3, #0]
    7a50:	4b9a      	ldr	r3, [pc, #616]	; (7cbc <lcd_displaying_task+0x418>)
    7a52:	0011      	movs	r1, r2
    7a54:	0018      	movs	r0, r3
    7a56:	4b8b      	ldr	r3, [pc, #556]	; (7c84 <lcd_displaying_task+0x3e0>)
    7a58:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
    7a5a:	4b97      	ldr	r3, [pc, #604]	; (7cb8 <lcd_displaying_task+0x414>)
    7a5c:	685a      	ldr	r2, [r3, #4]
    7a5e:	4b97      	ldr	r3, [pc, #604]	; (7cbc <lcd_displaying_task+0x418>)
    7a60:	0011      	movs	r1, r2
    7a62:	0018      	movs	r0, r3
    7a64:	4b87      	ldr	r3, [pc, #540]	; (7c84 <lcd_displaying_task+0x3e0>)
    7a66:	4798      	blx	r3
				lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
    7a68:	4b93      	ldr	r3, [pc, #588]	; (7cb8 <lcd_displaying_task+0x414>)
    7a6a:	689a      	ldr	r2, [r3, #8]
    7a6c:	4b94      	ldr	r3, [pc, #592]	; (7cc0 <lcd_displaying_task+0x41c>)
    7a6e:	0011      	movs	r1, r2
    7a70:	0018      	movs	r0, r3
    7a72:	4b84      	ldr	r3, [pc, #528]	; (7c84 <lcd_displaying_task+0x3e0>)
    7a74:	4798      	blx	r3
				break;
    7a76:	e1d3      	b.n	7e20 <lcd_displaying_task+0x57c>
			}
			case  2:
			{
				if(!getMotorState())
    7a78:	4b92      	ldr	r3, [pc, #584]	; (7cc4 <lcd_displaying_task+0x420>)
    7a7a:	4798      	blx	r3
    7a7c:	0003      	movs	r3, r0
    7a7e:	001a      	movs	r2, r3
    7a80:	2301      	movs	r3, #1
    7a82:	4053      	eors	r3, r2
    7a84:	b2db      	uxtb	r3, r3
    7a86:	2b00      	cmp	r3, #0
    7a88:	d010      	beq.n	7aac <lcd_displaying_task+0x208>
				{
					LCD_setCursor(0,0);
    7a8a:	2100      	movs	r1, #0
    7a8c:	2000      	movs	r0, #0
    7a8e:	4b7b      	ldr	r3, [pc, #492]	; (7c7c <lcd_displaying_task+0x3d8>)
    7a90:	4798      	blx	r3
					lcd_printf("MOTOR:  OFF     ");
    7a92:	4b8d      	ldr	r3, [pc, #564]	; (7cc8 <lcd_displaying_task+0x424>)
    7a94:	0018      	movs	r0, r3
    7a96:	4b7b      	ldr	r3, [pc, #492]	; (7c84 <lcd_displaying_task+0x3e0>)
    7a98:	4798      	blx	r3
					LCD_setCursor(0,1);
    7a9a:	2101      	movs	r1, #1
    7a9c:	2000      	movs	r0, #0
    7a9e:	4b77      	ldr	r3, [pc, #476]	; (7c7c <lcd_displaying_task+0x3d8>)
    7aa0:	4798      	blx	r3
					lcd_printf("                ");
    7aa2:	4b8a      	ldr	r3, [pc, #552]	; (7ccc <lcd_displaying_task+0x428>)
    7aa4:	0018      	movs	r0, r3
    7aa6:	4b77      	ldr	r3, [pc, #476]	; (7c84 <lcd_displaying_task+0x3e0>)
    7aa8:	4798      	blx	r3
					LCD_setCursor(0,0);
					lcd_printf("MOTOR CURRENT:  ");
					LCD_setCursor(0,1);
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
				}
				break;
    7aaa:	e1b9      	b.n	7e20 <lcd_displaying_task+0x57c>
					LCD_setCursor(0,0);
    7aac:	2100      	movs	r1, #0
    7aae:	2000      	movs	r0, #0
    7ab0:	4b72      	ldr	r3, [pc, #456]	; (7c7c <lcd_displaying_task+0x3d8>)
    7ab2:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
    7ab4:	4b86      	ldr	r3, [pc, #536]	; (7cd0 <lcd_displaying_task+0x42c>)
    7ab6:	0018      	movs	r0, r3
    7ab8:	4b72      	ldr	r3, [pc, #456]	; (7c84 <lcd_displaying_task+0x3e0>)
    7aba:	4798      	blx	r3
					LCD_setCursor(0,1);
    7abc:	2101      	movs	r1, #1
    7abe:	2000      	movs	r0, #0
    7ac0:	4b6e      	ldr	r3, [pc, #440]	; (7c7c <lcd_displaying_task+0x3d8>)
    7ac2:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
    7ac4:	4b7c      	ldr	r3, [pc, #496]	; (7cb8 <lcd_displaying_task+0x414>)
    7ac6:	8a9b      	ldrh	r3, [r3, #20]
    7ac8:	b29b      	uxth	r3, r3
    7aca:	0019      	movs	r1, r3
    7acc:	4b7a      	ldr	r3, [pc, #488]	; (7cb8 <lcd_displaying_task+0x414>)
    7ace:	8adb      	ldrh	r3, [r3, #22]
    7ad0:	b29b      	uxth	r3, r3
    7ad2:	001a      	movs	r2, r3
    7ad4:	4b7f      	ldr	r3, [pc, #508]	; (7cd4 <lcd_displaying_task+0x430>)
    7ad6:	0018      	movs	r0, r3
    7ad8:	4b6a      	ldr	r3, [pc, #424]	; (7c84 <lcd_displaying_task+0x3e0>)
    7ada:	4798      	blx	r3
				break;
    7adc:	e1a0      	b.n	7e20 <lcd_displaying_task+0x57c>
			}
			
			case 3:
			{
				LCD_setCursor(0,0);
    7ade:	2100      	movs	r1, #0
    7ae0:	2000      	movs	r0, #0
    7ae2:	4b66      	ldr	r3, [pc, #408]	; (7c7c <lcd_displaying_task+0x3d8>)
    7ae4:	4798      	blx	r3
				lcd_printf("3 PHASE SEQ:");
    7ae6:	4b7c      	ldr	r3, [pc, #496]	; (7cd8 <lcd_displaying_task+0x434>)
    7ae8:	0018      	movs	r0, r3
    7aea:	4b66      	ldr	r3, [pc, #408]	; (7c84 <lcd_displaying_task+0x3e0>)
    7aec:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    7aee:	4b7b      	ldr	r3, [pc, #492]	; (7cdc <lcd_displaying_task+0x438>)
    7af0:	781b      	ldrb	r3, [r3, #0]
    7af2:	b2db      	uxtb	r3, r3
    7af4:	2b02      	cmp	r3, #2
    7af6:	d104      	bne.n	7b02 <lcd_displaying_task+0x25e>
				{
					lcd_printf(" OK ");
    7af8:	4b79      	ldr	r3, [pc, #484]	; (7ce0 <lcd_displaying_task+0x43c>)
    7afa:	0018      	movs	r0, r3
    7afc:	4b61      	ldr	r3, [pc, #388]	; (7c84 <lcd_displaying_task+0x3e0>)
    7afe:	4798      	blx	r3
    7b00:	e003      	b.n	7b0a <lcd_displaying_task+0x266>
				}
				else
				{
					lcd_printf(" ERR");
    7b02:	4b78      	ldr	r3, [pc, #480]	; (7ce4 <lcd_displaying_task+0x440>)
    7b04:	0018      	movs	r0, r3
    7b06:	4b5f      	ldr	r3, [pc, #380]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b08:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7b0a:	2101      	movs	r1, #1
    7b0c:	2000      	movs	r0, #0
    7b0e:	4b5b      	ldr	r3, [pc, #364]	; (7c7c <lcd_displaying_task+0x3d8>)
    7b10:	4798      	blx	r3
				lcd_printf("PHASE STATE:");
    7b12:	4b75      	ldr	r3, [pc, #468]	; (7ce8 <lcd_displaying_task+0x444>)
    7b14:	0018      	movs	r0, r3
    7b16:	4b5b      	ldr	r3, [pc, #364]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b18:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
    7b1a:	4b70      	ldr	r3, [pc, #448]	; (7cdc <lcd_displaying_task+0x438>)
    7b1c:	785b      	ldrb	r3, [r3, #1]
    7b1e:	b2db      	uxtb	r3, r3
    7b20:	2b03      	cmp	r3, #3
    7b22:	d104      	bne.n	7b2e <lcd_displaying_task+0x28a>
				{
					lcd_printf(" 3PH ");
    7b24:	4b71      	ldr	r3, [pc, #452]	; (7cec <lcd_displaying_task+0x448>)
    7b26:	0018      	movs	r0, r3
    7b28:	4b56      	ldr	r3, [pc, #344]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b2a:	4798      	blx	r3
				}
				else
				{
					lcd_printf(" OFF");
				}
				break;
    7b2c:	e178      	b.n	7e20 <lcd_displaying_task+0x57c>
				else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
    7b2e:	4b6b      	ldr	r3, [pc, #428]	; (7cdc <lcd_displaying_task+0x438>)
    7b30:	785b      	ldrb	r3, [r3, #1]
    7b32:	b2db      	uxtb	r3, r3
    7b34:	2b02      	cmp	r3, #2
    7b36:	d104      	bne.n	7b42 <lcd_displaying_task+0x29e>
					lcd_printf(" 2PH ");
    7b38:	4b6d      	ldr	r3, [pc, #436]	; (7cf0 <lcd_displaying_task+0x44c>)
    7b3a:	0018      	movs	r0, r3
    7b3c:	4b51      	ldr	r3, [pc, #324]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b3e:	4798      	blx	r3
				break;
    7b40:	e16e      	b.n	7e20 <lcd_displaying_task+0x57c>
					lcd_printf(" OFF");
    7b42:	4b6c      	ldr	r3, [pc, #432]	; (7cf4 <lcd_displaying_task+0x450>)
    7b44:	0018      	movs	r0, r3
    7b46:	4b4f      	ldr	r3, [pc, #316]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b48:	4798      	blx	r3
				break;
    7b4a:	e169      	b.n	7e20 <lcd_displaying_task+0x57c>
			}
			case 4:
			{
				LCD_setCursor(0,0);
    7b4c:	2100      	movs	r1, #0
    7b4e:	2000      	movs	r0, #0
    7b50:	4b4a      	ldr	r3, [pc, #296]	; (7c7c <lcd_displaying_task+0x3d8>)
    7b52:	4798      	blx	r3
				lcd_printf("O-LEVEL : ");
    7b54:	4b68      	ldr	r3, [pc, #416]	; (7cf8 <lcd_displaying_task+0x454>)
    7b56:	0018      	movs	r0, r3
    7b58:	4b4a      	ldr	r3, [pc, #296]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b5a:	4798      	blx	r3
				if (overheadLevel == OVERHEADHIGHLEVEL)
    7b5c:	4b67      	ldr	r3, [pc, #412]	; (7cfc <lcd_displaying_task+0x458>)
    7b5e:	781b      	ldrb	r3, [r3, #0]
    7b60:	b2db      	uxtb	r3, r3
    7b62:	2b02      	cmp	r3, #2
    7b64:	d104      	bne.n	7b70 <lcd_displaying_task+0x2cc>
				{
					lcd_printf("HIGH  ");
    7b66:	4b66      	ldr	r3, [pc, #408]	; (7d00 <lcd_displaying_task+0x45c>)
    7b68:	0018      	movs	r0, r3
    7b6a:	4b46      	ldr	r3, [pc, #280]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b6c:	4798      	blx	r3
    7b6e:	e012      	b.n	7b96 <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADMIDLEVEL)
    7b70:	4b62      	ldr	r3, [pc, #392]	; (7cfc <lcd_displaying_task+0x458>)
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	b2db      	uxtb	r3, r3
    7b76:	2b01      	cmp	r3, #1
    7b78:	d104      	bne.n	7b84 <lcd_displaying_task+0x2e0>
				{
					lcd_printf("MID   ");
    7b7a:	4b62      	ldr	r3, [pc, #392]	; (7d04 <lcd_displaying_task+0x460>)
    7b7c:	0018      	movs	r0, r3
    7b7e:	4b41      	ldr	r3, [pc, #260]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b80:	4798      	blx	r3
    7b82:	e008      	b.n	7b96 <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADCRITICALLEVEL)
    7b84:	4b5d      	ldr	r3, [pc, #372]	; (7cfc <lcd_displaying_task+0x458>)
    7b86:	781b      	ldrb	r3, [r3, #0]
    7b88:	b2db      	uxtb	r3, r3
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	d103      	bne.n	7b96 <lcd_displaying_task+0x2f2>
				{
					lcd_printf("LOW   ");
    7b8e:	4b5e      	ldr	r3, [pc, #376]	; (7d08 <lcd_displaying_task+0x464>)
    7b90:	0018      	movs	r0, r3
    7b92:	4b3c      	ldr	r3, [pc, #240]	; (7c84 <lcd_displaying_task+0x3e0>)
    7b94:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7b96:	2101      	movs	r1, #1
    7b98:	2000      	movs	r0, #0
    7b9a:	4b38      	ldr	r3, [pc, #224]	; (7c7c <lcd_displaying_task+0x3d8>)
    7b9c:	4798      	blx	r3
				lcd_printf("U-LEVEL : ");
    7b9e:	4b5b      	ldr	r3, [pc, #364]	; (7d0c <lcd_displaying_task+0x468>)
    7ba0:	0018      	movs	r0, r3
    7ba2:	4b38      	ldr	r3, [pc, #224]	; (7c84 <lcd_displaying_task+0x3e0>)
    7ba4:	4798      	blx	r3
				if (undergroundLevel == CRITICALLEVEL)
    7ba6:	4b5a      	ldr	r3, [pc, #360]	; (7d10 <lcd_displaying_task+0x46c>)
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d104      	bne.n	7bb8 <lcd_displaying_task+0x314>
				{
					lcd_printf("CRTCL ");
    7bae:	4b59      	ldr	r3, [pc, #356]	; (7d14 <lcd_displaying_task+0x470>)
    7bb0:	0018      	movs	r0, r3
    7bb2:	4b34      	ldr	r3, [pc, #208]	; (7c84 <lcd_displaying_task+0x3e0>)
    7bb4:	4798      	blx	r3
				}
				else if (undergroundLevel == HIGHLEVEL)
				{
					lcd_printf("HIGH  ");
				}
				break;
    7bb6:	e130      	b.n	7e1a <lcd_displaying_task+0x576>
				else if (undergroundLevel == LOWLEVEL)
    7bb8:	4b55      	ldr	r3, [pc, #340]	; (7d10 <lcd_displaying_task+0x46c>)
    7bba:	781b      	ldrb	r3, [r3, #0]
    7bbc:	2b01      	cmp	r3, #1
    7bbe:	d104      	bne.n	7bca <lcd_displaying_task+0x326>
					lcd_printf("LOW   ");
    7bc0:	4b51      	ldr	r3, [pc, #324]	; (7d08 <lcd_displaying_task+0x464>)
    7bc2:	0018      	movs	r0, r3
    7bc4:	4b2f      	ldr	r3, [pc, #188]	; (7c84 <lcd_displaying_task+0x3e0>)
    7bc6:	4798      	blx	r3
				break;
    7bc8:	e127      	b.n	7e1a <lcd_displaying_task+0x576>
				else if (undergroundLevel == MIDLEVEL)
    7bca:	4b51      	ldr	r3, [pc, #324]	; (7d10 <lcd_displaying_task+0x46c>)
    7bcc:	781b      	ldrb	r3, [r3, #0]
    7bce:	2b02      	cmp	r3, #2
    7bd0:	d104      	bne.n	7bdc <lcd_displaying_task+0x338>
					lcd_printf("MID   ");
    7bd2:	4b4c      	ldr	r3, [pc, #304]	; (7d04 <lcd_displaying_task+0x460>)
    7bd4:	0018      	movs	r0, r3
    7bd6:	4b2b      	ldr	r3, [pc, #172]	; (7c84 <lcd_displaying_task+0x3e0>)
    7bd8:	4798      	blx	r3
				break;
    7bda:	e11e      	b.n	7e1a <lcd_displaying_task+0x576>
				else if (undergroundLevel == HIGHLEVEL)
    7bdc:	4b4c      	ldr	r3, [pc, #304]	; (7d10 <lcd_displaying_task+0x46c>)
    7bde:	781b      	ldrb	r3, [r3, #0]
    7be0:	2b03      	cmp	r3, #3
    7be2:	d000      	beq.n	7be6 <lcd_displaying_task+0x342>
    7be4:	e119      	b.n	7e1a <lcd_displaying_task+0x576>
					lcd_printf("HIGH  ");
    7be6:	4b46      	ldr	r3, [pc, #280]	; (7d00 <lcd_displaying_task+0x45c>)
    7be8:	0018      	movs	r0, r3
    7bea:	4b26      	ldr	r3, [pc, #152]	; (7c84 <lcd_displaying_task+0x3e0>)
    7bec:	4798      	blx	r3
				break;
    7bee:	e114      	b.n	7e1a <lcd_displaying_task+0x576>
			}
			case 5:
			{
				LCD_setCursor(0,0);
    7bf0:	2100      	movs	r1, #0
    7bf2:	2000      	movs	r0, #0
    7bf4:	4b21      	ldr	r3, [pc, #132]	; (7c7c <lcd_displaying_task+0x3d8>)
    7bf6:	4798      	blx	r3
				lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
    7bf8:	4b2f      	ldr	r3, [pc, #188]	; (7cb8 <lcd_displaying_task+0x414>)
    7bfa:	7f1b      	ldrb	r3, [r3, #28]
    7bfc:	b2db      	uxtb	r3, r3
    7bfe:	001a      	movs	r2, r3
    7c00:	4b45      	ldr	r3, [pc, #276]	; (7d18 <lcd_displaying_task+0x474>)
    7c02:	0011      	movs	r1, r2
    7c04:	0018      	movs	r0, r3
    7c06:	4b1f      	ldr	r3, [pc, #124]	; (7c84 <lcd_displaying_task+0x3e0>)
    7c08:	4798      	blx	r3
				LCD_setCursor(0,1);
    7c0a:	2101      	movs	r1, #1
    7c0c:	2000      	movs	r0, #0
    7c0e:	4b1b      	ldr	r3, [pc, #108]	; (7c7c <lcd_displaying_task+0x3d8>)
    7c10:	4798      	blx	r3
				lcd_printf("SIGNAL : ");
    7c12:	4b42      	ldr	r3, [pc, #264]	; (7d1c <lcd_displaying_task+0x478>)
    7c14:	0018      	movs	r0, r3
    7c16:	4b1b      	ldr	r3, [pc, #108]	; (7c84 <lcd_displaying_task+0x3e0>)
    7c18:	4798      	blx	r3
				LCD_setCursor(9,1);
    7c1a:	2101      	movs	r1, #1
    7c1c:	2009      	movs	r0, #9
    7c1e:	4b17      	ldr	r3, [pc, #92]	; (7c7c <lcd_displaying_task+0x3d8>)
    7c20:	4798      	blx	r3
				lcd_printf("       ");
    7c22:	4b3f      	ldr	r3, [pc, #252]	; (7d20 <lcd_displaying_task+0x47c>)
    7c24:	0018      	movs	r0, r3
    7c26:	4b17      	ldr	r3, [pc, #92]	; (7c84 <lcd_displaying_task+0x3e0>)
    7c28:	4798      	blx	r3
				LCD_setCursor(9,1);
    7c2a:	2101      	movs	r1, #1
    7c2c:	2009      	movs	r0, #9
    7c2e:	4b13      	ldr	r3, [pc, #76]	; (7c7c <lcd_displaying_task+0x3d8>)
    7c30:	4798      	blx	r3
				
				uint8_t tempSignal = Signal_Strength;
    7c32:	233b      	movs	r3, #59	; 0x3b
    7c34:	18fb      	adds	r3, r7, r3
    7c36:	4a3b      	ldr	r2, [pc, #236]	; (7d24 <lcd_displaying_task+0x480>)
    7c38:	7812      	ldrb	r2, [r2, #0]
    7c3a:	701a      	strb	r2, [r3, #0]
				for (uint8_t i=0;i<=tempSignal;i++)
    7c3c:	233e      	movs	r3, #62	; 0x3e
    7c3e:	18fb      	adds	r3, r7, r3
    7c40:	2200      	movs	r2, #0
    7c42:	701a      	strb	r2, [r3, #0]
    7c44:	e07d      	b.n	7d42 <lcd_displaying_task+0x49e>
    7c46:	46c0      	nop			; (mov r8, r8)
    7c48:	200007ff 	.word	0x200007ff
    7c4c:	000037f5 	.word	0x000037f5
    7c50:	00003829 	.word	0x00003829
    7c54:	0000ebf9 	.word	0x0000ebf9
    7c58:	00003531 	.word	0x00003531
    7c5c:	000178b7 	.word	0x000178b7
    7c60:	00019284 	.word	0x00019284
    7c64:	0001928c 	.word	0x0001928c
    7c68:	00019294 	.word	0x00019294
    7c6c:	0001929c 	.word	0x0001929c
    7c70:	000192a4 	.word	0x000192a4
    7c74:	00003b31 	.word	0x00003b31
    7c78:	00003ac1 	.word	0x00003ac1
    7c7c:	00003b91 	.word	0x00003b91
    7c80:	000190a0 	.word	0x000190a0
    7c84:	00003c8d 	.word	0x00003c8d
    7c88:	000190b4 	.word	0x000190b4
    7c8c:	00000bb8 	.word	0x00000bb8
    7c90:	000190c8 	.word	0x000190c8
    7c94:	000190dc 	.word	0x000190dc
    7c98:	000190f0 	.word	0x000190f0
    7c9c:	00007f5d 	.word	0x00007f5d
    7ca0:	0000f961 	.word	0x0000f961
    7ca4:	2000022c 	.word	0x2000022c
    7ca8:	0000ef5d 	.word	0x0000ef5d
    7cac:	0000fa05 	.word	0x0000fa05
    7cb0:	000192ac 	.word	0x000192ac
    7cb4:	000190f4 	.word	0x000190f4
    7cb8:	200006c8 	.word	0x200006c8
    7cbc:	00019108 	.word	0x00019108
    7cc0:	00019114 	.word	0x00019114
    7cc4:	00009c89 	.word	0x00009c89
    7cc8:	0001911c 	.word	0x0001911c
    7ccc:	00019130 	.word	0x00019130
    7cd0:	00019144 	.word	0x00019144
    7cd4:	00019158 	.word	0x00019158
    7cd8:	00019170 	.word	0x00019170
    7cdc:	2000070c 	.word	0x2000070c
    7ce0:	00019180 	.word	0x00019180
    7ce4:	00019188 	.word	0x00019188
    7ce8:	00019190 	.word	0x00019190
    7cec:	000191a0 	.word	0x000191a0
    7cf0:	000191a8 	.word	0x000191a8
    7cf4:	000191b0 	.word	0x000191b0
    7cf8:	000191b8 	.word	0x000191b8
    7cfc:	20000754 	.word	0x20000754
    7d00:	000191c4 	.word	0x000191c4
    7d04:	000191cc 	.word	0x000191cc
    7d08:	000191d4 	.word	0x000191d4
    7d0c:	000191dc 	.word	0x000191dc
    7d10:	200007fc 	.word	0x200007fc
    7d14:	000191e8 	.word	0x000191e8
    7d18:	000191f0 	.word	0x000191f0
    7d1c:	00019204 	.word	0x00019204
    7d20:	00019210 	.word	0x00019210
    7d24:	2000074e 	.word	0x2000074e
				{
					LCD_write(i);
    7d28:	233e      	movs	r3, #62	; 0x3e
    7d2a:	18fb      	adds	r3, r7, r3
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	0018      	movs	r0, r3
    7d30:	4b65      	ldr	r3, [pc, #404]	; (7ec8 <lcd_displaying_task+0x624>)
    7d32:	4798      	blx	r3
				for (uint8_t i=0;i<=tempSignal;i++)
    7d34:	233e      	movs	r3, #62	; 0x3e
    7d36:	18fb      	adds	r3, r7, r3
    7d38:	781a      	ldrb	r2, [r3, #0]
    7d3a:	233e      	movs	r3, #62	; 0x3e
    7d3c:	18fb      	adds	r3, r7, r3
    7d3e:	3201      	adds	r2, #1
    7d40:	701a      	strb	r2, [r3, #0]
    7d42:	233e      	movs	r3, #62	; 0x3e
    7d44:	18fa      	adds	r2, r7, r3
    7d46:	233b      	movs	r3, #59	; 0x3b
    7d48:	18fb      	adds	r3, r7, r3
    7d4a:	7812      	ldrb	r2, [r2, #0]
    7d4c:	781b      	ldrb	r3, [r3, #0]
    7d4e:	429a      	cmp	r2, r3
    7d50:	d9ea      	bls.n	7d28 <lcd_displaying_task+0x484>
				}
				
				break;
    7d52:	e065      	b.n	7e20 <lcd_displaying_task+0x57c>
			}
			case 6:
			{
				LCD_setCursor(0,0);
    7d54:	2100      	movs	r1, #0
    7d56:	2000      	movs	r0, #0
    7d58:	4b5c      	ldr	r3, [pc, #368]	; (7ecc <lcd_displaying_task+0x628>)
    7d5a:	4798      	blx	r3
				switch(callStateOnLCD)
    7d5c:	4b5c      	ldr	r3, [pc, #368]	; (7ed0 <lcd_displaying_task+0x62c>)
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	2b05      	cmp	r3, #5
    7d62:	d85c      	bhi.n	7e1e <lcd_displaying_task+0x57a>
    7d64:	009a      	lsls	r2, r3, #2
    7d66:	4b5b      	ldr	r3, [pc, #364]	; (7ed4 <lcd_displaying_task+0x630>)
    7d68:	18d3      	adds	r3, r2, r3
    7d6a:	681b      	ldr	r3, [r3, #0]
    7d6c:	469f      	mov	pc, r3
				{
					case LCDCALLSTATE_RINGING:
					{
						lcd_printf("INCOMING CALL.. ");
    7d6e:	4b5a      	ldr	r3, [pc, #360]	; (7ed8 <lcd_displaying_task+0x634>)
    7d70:	0018      	movs	r0, r3
    7d72:	4b5a      	ldr	r3, [pc, #360]	; (7edc <lcd_displaying_task+0x638>)
    7d74:	4798      	blx	r3
						LCD_setCursor(0,1);
    7d76:	2101      	movs	r1, #1
    7d78:	2000      	movs	r0, #0
    7d7a:	4b54      	ldr	r3, [pc, #336]	; (7ecc <lcd_displaying_task+0x628>)
    7d7c:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7d7e:	4a58      	ldr	r2, [pc, #352]	; (7ee0 <lcd_displaying_task+0x63c>)
    7d80:	4b58      	ldr	r3, [pc, #352]	; (7ee4 <lcd_displaying_task+0x640>)
    7d82:	0011      	movs	r1, r2
    7d84:	0018      	movs	r0, r3
    7d86:	4b55      	ldr	r3, [pc, #340]	; (7edc <lcd_displaying_task+0x638>)
    7d88:	4798      	blx	r3
						break;
    7d8a:	e045      	b.n	7e18 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCALL:
					{
						lcd_printf("IN CALL...      ");
    7d8c:	4b56      	ldr	r3, [pc, #344]	; (7ee8 <lcd_displaying_task+0x644>)
    7d8e:	0018      	movs	r0, r3
    7d90:	4b52      	ldr	r3, [pc, #328]	; (7edc <lcd_displaying_task+0x638>)
    7d92:	4798      	blx	r3
						LCD_setCursor(0,1);
    7d94:	2101      	movs	r1, #1
    7d96:	2000      	movs	r0, #0
    7d98:	4b4c      	ldr	r3, [pc, #304]	; (7ecc <lcd_displaying_task+0x628>)
    7d9a:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7d9c:	4a50      	ldr	r2, [pc, #320]	; (7ee0 <lcd_displaying_task+0x63c>)
    7d9e:	4b51      	ldr	r3, [pc, #324]	; (7ee4 <lcd_displaying_task+0x640>)
    7da0:	0011      	movs	r1, r2
    7da2:	0018      	movs	r0, r3
    7da4:	4b4d      	ldr	r3, [pc, #308]	; (7edc <lcd_displaying_task+0x638>)
    7da6:	4798      	blx	r3
						break;
    7da8:	e036      	b.n	7e18 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOING:
					{
						lcd_printf("DIALING...      ");
    7daa:	4b50      	ldr	r3, [pc, #320]	; (7eec <lcd_displaying_task+0x648>)
    7dac:	0018      	movs	r0, r3
    7dae:	4b4b      	ldr	r3, [pc, #300]	; (7edc <lcd_displaying_task+0x638>)
    7db0:	4798      	blx	r3
						LCD_setCursor(0,1);
    7db2:	2101      	movs	r1, #1
    7db4:	2000      	movs	r0, #0
    7db6:	4b45      	ldr	r3, [pc, #276]	; (7ecc <lcd_displaying_task+0x628>)
    7db8:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7dba:	4a49      	ldr	r2, [pc, #292]	; (7ee0 <lcd_displaying_task+0x63c>)
    7dbc:	4b49      	ldr	r3, [pc, #292]	; (7ee4 <lcd_displaying_task+0x640>)
    7dbe:	0011      	movs	r1, r2
    7dc0:	0018      	movs	r0, r3
    7dc2:	4b46      	ldr	r3, [pc, #280]	; (7edc <lcd_displaying_task+0x638>)
    7dc4:	4798      	blx	r3
						break;
    7dc6:	e027      	b.n	7e18 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCOMINGSMS:
					{
						lcd_printf("INCOMING SMS... ");
    7dc8:	4b49      	ldr	r3, [pc, #292]	; (7ef0 <lcd_displaying_task+0x64c>)
    7dca:	0018      	movs	r0, r3
    7dcc:	4b43      	ldr	r3, [pc, #268]	; (7edc <lcd_displaying_task+0x638>)
    7dce:	4798      	blx	r3
						LCD_setCursor(0,1);
    7dd0:	2101      	movs	r1, #1
    7dd2:	2000      	movs	r0, #0
    7dd4:	4b3d      	ldr	r3, [pc, #244]	; (7ecc <lcd_displaying_task+0x628>)
    7dd6:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7dd8:	4a41      	ldr	r2, [pc, #260]	; (7ee0 <lcd_displaying_task+0x63c>)
    7dda:	4b42      	ldr	r3, [pc, #264]	; (7ee4 <lcd_displaying_task+0x640>)
    7ddc:	0011      	movs	r1, r2
    7dde:	0018      	movs	r0, r3
    7de0:	4b3e      	ldr	r3, [pc, #248]	; (7edc <lcd_displaying_task+0x638>)
    7de2:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    7de4:	2200      	movs	r2, #0
    7de6:	2100      	movs	r1, #0
    7de8:	2000      	movs	r0, #0
    7dea:	4b42      	ldr	r3, [pc, #264]	; (7ef4 <lcd_displaying_task+0x650>)
    7dec:	4798      	blx	r3
						break;
    7dee:	e013      	b.n	7e18 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOINGSMS:
					{
						lcd_printf("OUTGOING SMS... ");
    7df0:	4b41      	ldr	r3, [pc, #260]	; (7ef8 <lcd_displaying_task+0x654>)
    7df2:	0018      	movs	r0, r3
    7df4:	4b39      	ldr	r3, [pc, #228]	; (7edc <lcd_displaying_task+0x638>)
    7df6:	4798      	blx	r3
						LCD_setCursor(0,1);
    7df8:	2101      	movs	r1, #1
    7dfa:	2000      	movs	r0, #0
    7dfc:	4b33      	ldr	r3, [pc, #204]	; (7ecc <lcd_displaying_task+0x628>)
    7dfe:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7e00:	4a37      	ldr	r2, [pc, #220]	; (7ee0 <lcd_displaying_task+0x63c>)
    7e02:	4b38      	ldr	r3, [pc, #224]	; (7ee4 <lcd_displaying_task+0x640>)
    7e04:	0011      	movs	r1, r2
    7e06:	0018      	movs	r0, r3
    7e08:	4b34      	ldr	r3, [pc, #208]	; (7edc <lcd_displaying_task+0x638>)
    7e0a:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    7e0c:	2200      	movs	r2, #0
    7e0e:	2100      	movs	r1, #0
    7e10:	2000      	movs	r0, #0
    7e12:	4b38      	ldr	r3, [pc, #224]	; (7ef4 <lcd_displaying_task+0x650>)
    7e14:	4798      	blx	r3
						break;
    7e16:	46c0      	nop			; (mov r8, r8)
					}
				}
				break;
    7e18:	e001      	b.n	7e1e <lcd_displaying_task+0x57a>
				break;
    7e1a:	46c0      	nop			; (mov r8, r8)
    7e1c:	e000      	b.n	7e20 <lcd_displaying_task+0x57c>
				break;
    7e1e:	46c0      	nop			; (mov r8, r8)
			}
		}
		if (xQueueReceive(xfour_Second_Queue,&time,0))
    7e20:	4b36      	ldr	r3, [pc, #216]	; (7efc <lcd_displaying_task+0x658>)
    7e22:	681b      	ldr	r3, [r3, #0]
    7e24:	223a      	movs	r2, #58	; 0x3a
    7e26:	18b9      	adds	r1, r7, r2
    7e28:	2200      	movs	r2, #0
    7e2a:	0018      	movs	r0, r3
    7e2c:	4b34      	ldr	r3, [pc, #208]	; (7f00 <lcd_displaying_task+0x65c>)
    7e2e:	4798      	blx	r3
    7e30:	1e03      	subs	r3, r0, #0
    7e32:	d039      	beq.n	7ea8 <lcd_displaying_task+0x604>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
    7e34:	4b33      	ldr	r3, [pc, #204]	; (7f04 <lcd_displaying_task+0x660>)
    7e36:	6818      	ldr	r0, [r3, #0]
    7e38:	23fa      	movs	r3, #250	; 0xfa
    7e3a:	011a      	lsls	r2, r3, #4
    7e3c:	2301      	movs	r3, #1
    7e3e:	425b      	negs	r3, r3
    7e40:	9300      	str	r3, [sp, #0]
    7e42:	2300      	movs	r3, #0
    7e44:	2104      	movs	r1, #4
    7e46:	4c30      	ldr	r4, [pc, #192]	; (7f08 <lcd_displaying_task+0x664>)
    7e48:	47a0      	blx	r4
			if(varPauseDisplay==false)
    7e4a:	4b30      	ldr	r3, [pc, #192]	; (7f0c <lcd_displaying_task+0x668>)
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	b2db      	uxtb	r3, r3
    7e50:	2201      	movs	r2, #1
    7e52:	4053      	eors	r3, r2
    7e54:	b2db      	uxtb	r3, r3
    7e56:	2b00      	cmp	r3, #0
    7e58:	d026      	beq.n	7ea8 <lcd_displaying_task+0x604>
			{
				screen++;
    7e5a:	233f      	movs	r3, #63	; 0x3f
    7e5c:	18fb      	adds	r3, r7, r3
    7e5e:	781a      	ldrb	r2, [r3, #0]
    7e60:	233f      	movs	r3, #63	; 0x3f
    7e62:	18fb      	adds	r3, r7, r3
    7e64:	3201      	adds	r2, #1
    7e66:	701a      	strb	r2, [r3, #0]
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==4)
    7e68:	4b29      	ldr	r3, [pc, #164]	; (7f10 <lcd_displaying_task+0x66c>)
    7e6a:	795b      	ldrb	r3, [r3, #5]
    7e6c:	2b00      	cmp	r3, #0
    7e6e:	d10b      	bne.n	7e88 <lcd_displaying_task+0x5e4>
    7e70:	233f      	movs	r3, #63	; 0x3f
    7e72:	18fb      	adds	r3, r7, r3
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	2b04      	cmp	r3, #4
    7e78:	d106      	bne.n	7e88 <lcd_displaying_task+0x5e4>
				{
					screen++;
    7e7a:	233f      	movs	r3, #63	; 0x3f
    7e7c:	18fb      	adds	r3, r7, r3
    7e7e:	781a      	ldrb	r2, [r3, #0]
    7e80:	233f      	movs	r3, #63	; 0x3f
    7e82:	18fb      	adds	r3, r7, r3
    7e84:	3201      	adds	r2, #1
    7e86:	701a      	strb	r2, [r3, #0]
				}
				if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==6)
    7e88:	4b11      	ldr	r3, [pc, #68]	; (7ed0 <lcd_displaying_task+0x62c>)
    7e8a:	781b      	ldrb	r3, [r3, #0]
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	d10b      	bne.n	7ea8 <lcd_displaying_task+0x604>
    7e90:	233f      	movs	r3, #63	; 0x3f
    7e92:	18fb      	adds	r3, r7, r3
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	2b06      	cmp	r3, #6
    7e98:	d106      	bne.n	7ea8 <lcd_displaying_task+0x604>
				{
					screen++;
    7e9a:	233f      	movs	r3, #63	; 0x3f
    7e9c:	18fb      	adds	r3, r7, r3
    7e9e:	781a      	ldrb	r2, [r3, #0]
    7ea0:	233f      	movs	r3, #63	; 0x3f
    7ea2:	18fb      	adds	r3, r7, r3
    7ea4:	3201      	adds	r2, #1
    7ea6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		if (screen>6)
    7ea8:	233f      	movs	r3, #63	; 0x3f
    7eaa:	18fb      	adds	r3, r7, r3
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	2b06      	cmp	r3, #6
    7eb0:	d903      	bls.n	7eba <lcd_displaying_task+0x616>
		{
			screen=1;
    7eb2:	233f      	movs	r3, #63	; 0x3f
    7eb4:	18fb      	adds	r3, r7, r3
    7eb6:	2201      	movs	r2, #1
    7eb8:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
    7eba:	23fa      	movs	r3, #250	; 0xfa
    7ebc:	005b      	lsls	r3, r3, #1
    7ebe:	0018      	movs	r0, r3
    7ec0:	4b14      	ldr	r3, [pc, #80]	; (7f14 <lcd_displaying_task+0x670>)
    7ec2:	4798      	blx	r3
		if (lcd_in_sleep)
    7ec4:	e59c      	b.n	7a00 <lcd_displaying_task+0x15c>
    7ec6:	46c0      	nop			; (mov r8, r8)
    7ec8:	00003a45 	.word	0x00003a45
    7ecc:	00003b91 	.word	0x00003b91
    7ed0:	20000785 	.word	0x20000785
    7ed4:	000192c8 	.word	0x000192c8
    7ed8:	00019218 	.word	0x00019218
    7edc:	00003c8d 	.word	0x00003c8d
    7ee0:	200007e8 	.word	0x200007e8
    7ee4:	0001922c 	.word	0x0001922c
    7ee8:	00019234 	.word	0x00019234
    7eec:	00019248 	.word	0x00019248
    7ef0:	0001925c 	.word	0x0001925c
    7ef4:	0000b93d 	.word	0x0000b93d
    7ef8:	00019270 	.word	0x00019270
    7efc:	20000228 	.word	0x20000228
    7f00:	0000e151 	.word	0x0000e151
    7f04:	2000022c 	.word	0x2000022c
    7f08:	0000fa05 	.word	0x0000fa05
    7f0c:	20000770 	.word	0x20000770
    7f10:	20000618 	.word	0x20000618
    7f14:	0000ebf9 	.word	0x0000ebf9

00007f18 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
    7f18:	b590      	push	{r4, r7, lr}
    7f1a:	b083      	sub	sp, #12
    7f1c:	af02      	add	r7, sp, #8
	
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
    7f1e:	2200      	movs	r2, #0
    7f20:	2101      	movs	r1, #1
    7f22:	2001      	movs	r0, #1
    7f24:	4b09      	ldr	r3, [pc, #36]	; (7f4c <start_lcd_service+0x34>)
    7f26:	4798      	blx	r3
    7f28:	0002      	movs	r2, r0
    7f2a:	4b09      	ldr	r3, [pc, #36]	; (7f50 <start_lcd_service+0x38>)
    7f2c:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
    7f2e:	23c8      	movs	r3, #200	; 0xc8
    7f30:	005a      	lsls	r2, r3, #1
    7f32:	4808      	ldr	r0, [pc, #32]	; (7f54 <start_lcd_service+0x3c>)
    7f34:	2300      	movs	r3, #0
    7f36:	9301      	str	r3, [sp, #4]
    7f38:	2301      	movs	r3, #1
    7f3a:	9300      	str	r3, [sp, #0]
    7f3c:	2300      	movs	r3, #0
    7f3e:	2100      	movs	r1, #0
    7f40:	4c05      	ldr	r4, [pc, #20]	; (7f58 <start_lcd_service+0x40>)
    7f42:	47a0      	blx	r4
	
}
    7f44:	46c0      	nop			; (mov r8, r8)
    7f46:	46bd      	mov	sp, r7
    7f48:	b001      	add	sp, #4
    7f4a:	bd90      	pop	{r4, r7, pc}
    7f4c:	0000dd95 	.word	0x0000dd95
    7f50:	20000228 	.word	0x20000228
    7f54:	000078a5 	.word	0x000078a5
    7f58:	0000e8b9 	.word	0x0000e8b9

00007f5c <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
    7f5c:	b590      	push	{r4, r7, lr}
    7f5e:	b085      	sub	sp, #20
    7f60:	af00      	add	r7, sp, #0
    7f62:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
    7f64:	230f      	movs	r3, #15
    7f66:	18fb      	adds	r3, r7, r3
    7f68:	2201      	movs	r2, #1
    7f6a:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
    7f6c:	4b05      	ldr	r3, [pc, #20]	; (7f84 <four_second_timer_callback+0x28>)
    7f6e:	6818      	ldr	r0, [r3, #0]
    7f70:	230f      	movs	r3, #15
    7f72:	18f9      	adds	r1, r7, r3
    7f74:	2300      	movs	r3, #0
    7f76:	2200      	movs	r2, #0
    7f78:	4c03      	ldr	r4, [pc, #12]	; (7f88 <four_second_timer_callback+0x2c>)
    7f7a:	47a0      	blx	r4
}
    7f7c:	46c0      	nop			; (mov r8, r8)
    7f7e:	46bd      	mov	sp, r7
    7f80:	b005      	add	sp, #20
    7f82:	bd90      	pop	{r4, r7, pc}
    7f84:	20000228 	.word	0x20000228
    7f88:	0000e031 	.word	0x0000e031

00007f8c <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b084      	sub	sp, #16
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	681b      	ldr	r3, [r3, #0]
    7f98:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    7f9a:	68fb      	ldr	r3, [r7, #12]
    7f9c:	7a5b      	ldrb	r3, [r3, #9]
    7f9e:	b2db      	uxtb	r3, r3
    7fa0:	b25b      	sxtb	r3, r3
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	da01      	bge.n	7faa <ac_is_syncing+0x1e>
		return true;
    7fa6:	2301      	movs	r3, #1
    7fa8:	e000      	b.n	7fac <ac_is_syncing+0x20>
	}

	return false;
    7faa:	2300      	movs	r3, #0
#endif
}
    7fac:	0018      	movs	r0, r3
    7fae:	46bd      	mov	sp, r7
    7fb0:	b004      	add	sp, #16
    7fb2:	bd80      	pop	{r7, pc}

00007fb4 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b084      	sub	sp, #16
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    7fbc:	2300      	movs	r3, #0
    7fbe:	60fb      	str	r3, [r7, #12]
    7fc0:	e007      	b.n	7fd2 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
    7fc2:	687a      	ldr	r2, [r7, #4]
    7fc4:	68fb      	ldr	r3, [r7, #12]
    7fc6:	18d3      	adds	r3, r2, r3
    7fc8:	2200      	movs	r2, #0
    7fca:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    7fcc:	68fb      	ldr	r3, [r7, #12]
    7fce:	3301      	adds	r3, #1
    7fd0:	60fb      	str	r3, [r7, #12]
    7fd2:	68fb      	ldr	r3, [r7, #12]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d0f4      	beq.n	7fc2 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
    7fd8:	687b      	ldr	r3, [r7, #4]
    7fda:	2200      	movs	r2, #0
    7fdc:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
    7fde:	687b      	ldr	r3, [r7, #4]
    7fe0:	2203      	movs	r2, #3
    7fe2:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
    7fe4:	46c0      	nop			; (mov r8, r8)
    7fe6:	46bd      	mov	sp, r7
    7fe8:	b004      	add	sp, #16
    7fea:	bd80      	pop	{r7, pc}

00007fec <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
    7fec:	b580      	push	{r7, lr}
    7fee:	b084      	sub	sp, #16
    7ff0:	af00      	add	r7, sp, #0
    7ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    7ff4:	687b      	ldr	r3, [r7, #4]
    7ff6:	681b      	ldr	r3, [r3, #0]
    7ff8:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    7ffa:	46c0      	nop			; (mov r8, r8)
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	0018      	movs	r0, r3
    8000:	4b07      	ldr	r3, [pc, #28]	; (8020 <ac_enable+0x34>)
    8002:	4798      	blx	r3
    8004:	1e03      	subs	r3, r0, #0
    8006:	d1f9      	bne.n	7ffc <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
    8008:	68fb      	ldr	r3, [r7, #12]
    800a:	781b      	ldrb	r3, [r3, #0]
    800c:	b2db      	uxtb	r3, r3
    800e:	2202      	movs	r2, #2
    8010:	4313      	orrs	r3, r2
    8012:	b2da      	uxtb	r2, r3
    8014:	68fb      	ldr	r3, [r7, #12]
    8016:	701a      	strb	r2, [r3, #0]
}
    8018:	46c0      	nop			; (mov r8, r8)
    801a:	46bd      	mov	sp, r7
    801c:	b004      	add	sp, #16
    801e:	bd80      	pop	{r7, pc}
    8020:	00007f8d 	.word	0x00007f8d

00008024 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
    8024:	b580      	push	{r7, lr}
    8026:	b086      	sub	sp, #24
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
    802c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    8034:	2300      	movs	r3, #0
    8036:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    8038:	2313      	movs	r3, #19
    803a:	18fb      	adds	r3, r7, r3
    803c:	2200      	movs	r2, #0
    803e:	701a      	strb	r2, [r3, #0]
    8040:	e017      	b.n	8072 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
    8042:	2313      	movs	r3, #19
    8044:	18fb      	adds	r3, r7, r3
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	683a      	ldr	r2, [r7, #0]
    804a:	5cd3      	ldrb	r3, [r2, r3]
    804c:	2b00      	cmp	r3, #0
    804e:	d009      	beq.n	8064 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
    8050:	2313      	movs	r3, #19
    8052:	18fb      	adds	r3, r7, r3
    8054:	781b      	ldrb	r3, [r3, #0]
    8056:	2210      	movs	r2, #16
    8058:	409a      	lsls	r2, r3
    805a:	0013      	movs	r3, r2
    805c:	001a      	movs	r2, r3
    805e:	697b      	ldr	r3, [r7, #20]
    8060:	4313      	orrs	r3, r2
    8062:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    8064:	2313      	movs	r3, #19
    8066:	18fb      	adds	r3, r7, r3
    8068:	781a      	ldrb	r2, [r3, #0]
    806a:	2313      	movs	r3, #19
    806c:	18fb      	adds	r3, r7, r3
    806e:	3201      	adds	r2, #1
    8070:	701a      	strb	r2, [r3, #0]
    8072:	2313      	movs	r3, #19
    8074:	18fb      	adds	r3, r7, r3
    8076:	781b      	ldrb	r3, [r3, #0]
    8078:	2b00      	cmp	r3, #0
    807a:	d0e2      	beq.n	8042 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    807c:	2312      	movs	r3, #18
    807e:	18fb      	adds	r3, r7, r3
    8080:	2200      	movs	r2, #0
    8082:	701a      	strb	r2, [r3, #0]
    8084:	e02b      	b.n	80de <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
    8086:	2312      	movs	r3, #18
    8088:	18fb      	adds	r3, r7, r3
    808a:	781b      	ldrb	r3, [r3, #0]
    808c:	683a      	ldr	r2, [r7, #0]
    808e:	18d3      	adds	r3, r2, r3
    8090:	78db      	ldrb	r3, [r3, #3]
    8092:	2b00      	cmp	r3, #0
    8094:	d00a      	beq.n	80ac <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
    8096:	2312      	movs	r3, #18
    8098:	18fb      	adds	r3, r7, r3
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	2280      	movs	r2, #128	; 0x80
    809e:	0052      	lsls	r2, r2, #1
    80a0:	409a      	lsls	r2, r3
    80a2:	0013      	movs	r3, r2
    80a4:	001a      	movs	r2, r3
    80a6:	697b      	ldr	r3, [r7, #20]
    80a8:	4313      	orrs	r3, r2
    80aa:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
    80ac:	2312      	movs	r3, #18
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	781b      	ldrb	r3, [r3, #0]
    80b2:	683a      	ldr	r2, [r7, #0]
    80b4:	18d3      	adds	r3, r2, r3
    80b6:	785b      	ldrb	r3, [r3, #1]
    80b8:	2b00      	cmp	r3, #0
    80ba:	d009      	beq.n	80d0 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
    80bc:	2312      	movs	r3, #18
    80be:	18fb      	adds	r3, r7, r3
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	2201      	movs	r2, #1
    80c4:	409a      	lsls	r2, r3
    80c6:	0013      	movs	r3, r2
    80c8:	001a      	movs	r2, r3
    80ca:	697b      	ldr	r3, [r7, #20]
    80cc:	4313      	orrs	r3, r2
    80ce:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    80d0:	2312      	movs	r3, #18
    80d2:	18fb      	adds	r3, r7, r3
    80d4:	781a      	ldrb	r2, [r3, #0]
    80d6:	2312      	movs	r3, #18
    80d8:	18fb      	adds	r3, r7, r3
    80da:	3201      	adds	r2, #1
    80dc:	701a      	strb	r2, [r3, #0]
    80de:	2312      	movs	r3, #18
    80e0:	18fb      	adds	r3, r7, r3
    80e2:	781b      	ldrb	r3, [r3, #0]
    80e4:	2b01      	cmp	r3, #1
    80e6:	d9ce      	bls.n	8086 <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
    80e8:	68fb      	ldr	r3, [r7, #12]
    80ea:	885b      	ldrh	r3, [r3, #2]
    80ec:	b29a      	uxth	r2, r3
    80ee:	697b      	ldr	r3, [r7, #20]
    80f0:	b29b      	uxth	r3, r3
    80f2:	4313      	orrs	r3, r2
    80f4:	b29a      	uxth	r2, r3
    80f6:	68fb      	ldr	r3, [r7, #12]
    80f8:	805a      	strh	r2, [r3, #2]
}
    80fa:	46c0      	nop			; (mov r8, r8)
    80fc:	46bd      	mov	sp, r7
    80fe:	b006      	add	sp, #24
    8100:	bd80      	pop	{r7, pc}
	...

00008104 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8104:	b580      	push	{r7, lr}
    8106:	b084      	sub	sp, #16
    8108:	af00      	add	r7, sp, #0
    810a:	6078      	str	r0, [r7, #4]
    810c:	000a      	movs	r2, r1
    810e:	1cfb      	adds	r3, r7, #3
    8110:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    8118:	46c0      	nop			; (mov r8, r8)
    811a:	687b      	ldr	r3, [r7, #4]
    811c:	0018      	movs	r0, r3
    811e:	4b0b      	ldr	r3, [pc, #44]	; (814c <ac_chan_enable+0x48>)
    8120:	4798      	blx	r3
    8122:	1e03      	subs	r3, r0, #0
    8124:	d1f9      	bne.n	811a <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
    8126:	1cfb      	adds	r3, r7, #3
    8128:	781a      	ldrb	r2, [r3, #0]
    812a:	1cfb      	adds	r3, r7, #3
    812c:	7819      	ldrb	r1, [r3, #0]
    812e:	68fb      	ldr	r3, [r7, #12]
    8130:	3104      	adds	r1, #4
    8132:	0089      	lsls	r1, r1, #2
    8134:	58cb      	ldr	r3, [r1, r3]
    8136:	2101      	movs	r1, #1
    8138:	4319      	orrs	r1, r3
    813a:	68fb      	ldr	r3, [r7, #12]
    813c:	3204      	adds	r2, #4
    813e:	0092      	lsls	r2, r2, #2
    8140:	50d1      	str	r1, [r2, r3]
}
    8142:	46c0      	nop			; (mov r8, r8)
    8144:	46bd      	mov	sp, r7
    8146:	b004      	add	sp, #16
    8148:	bd80      	pop	{r7, pc}
    814a:	46c0      	nop			; (mov r8, r8)
    814c:	00007f8d 	.word	0x00007f8d

00008150 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8150:	b580      	push	{r7, lr}
    8152:	b084      	sub	sp, #16
    8154:	af00      	add	r7, sp, #0
    8156:	6078      	str	r0, [r7, #4]
    8158:	000a      	movs	r2, r1
    815a:	1cfb      	adds	r3, r7, #3
    815c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	681b      	ldr	r3, [r3, #0]
    8162:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
    8164:	68fb      	ldr	r3, [r7, #12]
    8166:	7a5b      	ldrb	r3, [r3, #9]
    8168:	b2db      	uxtb	r3, r3
    816a:	0019      	movs	r1, r3
    816c:	1cfb      	adds	r3, r7, #3
    816e:	781b      	ldrb	r3, [r3, #0]
    8170:	2201      	movs	r2, #1
    8172:	409a      	lsls	r2, r3
    8174:	0013      	movs	r3, r2
    8176:	400b      	ands	r3, r1
    8178:	1e5a      	subs	r2, r3, #1
    817a:	4193      	sbcs	r3, r2
    817c:	b2db      	uxtb	r3, r3
}
    817e:	0018      	movs	r0, r3
    8180:	46bd      	mov	sp, r7
    8182:	b004      	add	sp, #16
    8184:	bd80      	pop	{r7, pc}
	...

00008188 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8188:	b580      	push	{r7, lr}
    818a:	b084      	sub	sp, #16
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
    8190:	000a      	movs	r2, r1
    8192:	1cfb      	adds	r3, r7, #3
    8194:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
    819c:	230f      	movs	r3, #15
    819e:	18fb      	adds	r3, r7, r3
    81a0:	2200      	movs	r2, #0
    81a2:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
    81a4:	68bb      	ldr	r3, [r7, #8]
    81a6:	799b      	ldrb	r3, [r3, #6]
    81a8:	b2db      	uxtb	r3, r3
    81aa:	001a      	movs	r2, r3
    81ac:	1cfb      	adds	r3, r7, #3
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	411a      	asrs	r2, r3
    81b2:	0013      	movs	r3, r2
    81b4:	2201      	movs	r2, #1
    81b6:	4013      	ands	r3, r2
    81b8:	d003      	beq.n	81c2 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
    81ba:	230f      	movs	r3, #15
    81bc:	18fb      	adds	r3, r7, r3
    81be:	2208      	movs	r2, #8
    81c0:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
    81c2:	1cfb      	adds	r3, r7, #3
    81c4:	781a      	ldrb	r2, [r3, #0]
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	0011      	movs	r1, r2
    81ca:	0018      	movs	r0, r3
    81cc:	4b1b      	ldr	r3, [pc, #108]	; (823c <ac_chan_get_status+0xb4>)
    81ce:	4798      	blx	r3
    81d0:	0003      	movs	r3, r0
    81d2:	001a      	movs	r2, r3
    81d4:	2301      	movs	r3, #1
    81d6:	4053      	eors	r3, r2
    81d8:	b2db      	uxtb	r3, r3
    81da:	2b00      	cmp	r3, #0
    81dc:	d00b      	beq.n	81f6 <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
    81de:	230f      	movs	r3, #15
    81e0:	18fb      	adds	r3, r7, r3
    81e2:	220f      	movs	r2, #15
    81e4:	18ba      	adds	r2, r7, r2
    81e6:	7812      	ldrb	r2, [r2, #0]
    81e8:	2101      	movs	r1, #1
    81ea:	430a      	orrs	r2, r1
    81ec:	701a      	strb	r2, [r3, #0]
		return status_mask;
    81ee:	230f      	movs	r3, #15
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	781b      	ldrb	r3, [r3, #0]
    81f4:	e01e      	b.n	8234 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
    81f6:	68bb      	ldr	r3, [r7, #8]
    81f8:	7a1b      	ldrb	r3, [r3, #8]
    81fa:	b2db      	uxtb	r3, r3
    81fc:	001a      	movs	r2, r3
    81fe:	1cfb      	adds	r3, r7, #3
    8200:	781b      	ldrb	r3, [r3, #0]
    8202:	411a      	asrs	r2, r3
    8204:	0013      	movs	r3, r2
    8206:	2201      	movs	r2, #1
    8208:	4013      	ands	r3, r2
    820a:	d008      	beq.n	821e <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
    820c:	230f      	movs	r3, #15
    820e:	18fb      	adds	r3, r7, r3
    8210:	220f      	movs	r2, #15
    8212:	18ba      	adds	r2, r7, r2
    8214:	7812      	ldrb	r2, [r2, #0]
    8216:	2104      	movs	r1, #4
    8218:	430a      	orrs	r2, r1
    821a:	701a      	strb	r2, [r3, #0]
    821c:	e007      	b.n	822e <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
    821e:	230f      	movs	r3, #15
    8220:	18fb      	adds	r3, r7, r3
    8222:	220f      	movs	r2, #15
    8224:	18ba      	adds	r2, r7, r2
    8226:	7812      	ldrb	r2, [r2, #0]
    8228:	2102      	movs	r1, #2
    822a:	430a      	orrs	r2, r1
    822c:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
    822e:	230f      	movs	r3, #15
    8230:	18fb      	adds	r3, r7, r3
    8232:	781b      	ldrb	r3, [r3, #0]
}
    8234:	0018      	movs	r0, r3
    8236:	46bd      	mov	sp, r7
    8238:	b004      	add	sp, #16
    823a:	bd80      	pop	{r7, pc}
    823c:	00008151 	.word	0x00008151

00008240 <system_interrupt_enable>:
{
    8240:	b580      	push	{r7, lr}
    8242:	b082      	sub	sp, #8
    8244:	af00      	add	r7, sp, #0
    8246:	0002      	movs	r2, r0
    8248:	1dfb      	adds	r3, r7, #7
    824a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    824c:	4b06      	ldr	r3, [pc, #24]	; (8268 <system_interrupt_enable+0x28>)
    824e:	1dfa      	adds	r2, r7, #7
    8250:	7812      	ldrb	r2, [r2, #0]
    8252:	0011      	movs	r1, r2
    8254:	221f      	movs	r2, #31
    8256:	400a      	ands	r2, r1
    8258:	2101      	movs	r1, #1
    825a:	4091      	lsls	r1, r2
    825c:	000a      	movs	r2, r1
    825e:	601a      	str	r2, [r3, #0]
}
    8260:	46c0      	nop			; (mov r8, r8)
    8262:	46bd      	mov	sp, r7
    8264:	b002      	add	sp, #8
    8266:	bd80      	pop	{r7, pc}
    8268:	e000e100 	.word	0xe000e100

0000826c <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
    826c:	b580      	push	{r7, lr}
    826e:	b084      	sub	sp, #16
    8270:	af00      	add	r7, sp, #0
    8272:	6078      	str	r0, [r7, #4]
    8274:	000a      	movs	r2, r1
    8276:	1cfb      	adds	r3, r7, #3
    8278:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	7e5b      	ldrb	r3, [r3, #25]
    827e:	b25a      	sxtb	r2, r3
    8280:	1cfb      	adds	r3, r7, #3
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	2101      	movs	r1, #1
    8286:	4099      	lsls	r1, r3
    8288:	000b      	movs	r3, r1
    828a:	b25b      	sxtb	r3, r3
    828c:	4313      	orrs	r3, r2
    828e:	b25b      	sxtb	r3, r3
    8290:	b2da      	uxtb	r2, r3
    8292:	687b      	ldr	r3, [r7, #4]
    8294:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
    8296:	2300      	movs	r3, #0
    8298:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
    829a:	1cfb      	adds	r3, r7, #3
    829c:	781b      	ldrb	r3, [r3, #0]
    829e:	2b01      	cmp	r3, #1
    82a0:	d009      	beq.n	82b6 <ac_enable_callback+0x4a>
    82a2:	2b04      	cmp	r3, #4
    82a4:	d00c      	beq.n	82c0 <ac_enable_callback+0x54>
    82a6:	2b00      	cmp	r3, #0
    82a8:	d000      	beq.n	82ac <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
    82aa:	e00e      	b.n	82ca <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
    82ac:	68fb      	ldr	r3, [r7, #12]
    82ae:	2201      	movs	r2, #1
    82b0:	4313      	orrs	r3, r2
    82b2:	60fb      	str	r3, [r7, #12]
			break;
    82b4:	e009      	b.n	82ca <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
    82b6:	68fb      	ldr	r3, [r7, #12]
    82b8:	2202      	movs	r2, #2
    82ba:	4313      	orrs	r3, r2
    82bc:	60fb      	str	r3, [r7, #12]
			break;
    82be:	e004      	b.n	82ca <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
    82c0:	68fb      	ldr	r3, [r7, #12]
    82c2:	2210      	movs	r2, #16
    82c4:	4313      	orrs	r3, r2
    82c6:	60fb      	str	r3, [r7, #12]
			break;
    82c8:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	681b      	ldr	r3, [r3, #0]
    82ce:	68fa      	ldr	r2, [r7, #12]
    82d0:	b2d2      	uxtb	r2, r2
    82d2:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
    82d4:	2018      	movs	r0, #24
    82d6:	4b03      	ldr	r3, [pc, #12]	; (82e4 <ac_enable_callback+0x78>)
    82d8:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
    82da:	46c0      	nop			; (mov r8, r8)
    82dc:	46bd      	mov	sp, r7
    82de:	b004      	add	sp, #16
    82e0:	bd80      	pop	{r7, pc}
    82e2:	46c0      	nop			; (mov r8, r8)
    82e4:	00008241 	.word	0x00008241

000082e8 <system_pinmux_get_group_from_gpio_pin>:
{
    82e8:	b580      	push	{r7, lr}
    82ea:	b084      	sub	sp, #16
    82ec:	af00      	add	r7, sp, #0
    82ee:	0002      	movs	r2, r0
    82f0:	1dfb      	adds	r3, r7, #7
    82f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    82f4:	230f      	movs	r3, #15
    82f6:	18fb      	adds	r3, r7, r3
    82f8:	1dfa      	adds	r2, r7, #7
    82fa:	7812      	ldrb	r2, [r2, #0]
    82fc:	09d2      	lsrs	r2, r2, #7
    82fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8300:	230e      	movs	r3, #14
    8302:	18fb      	adds	r3, r7, r3
    8304:	1dfa      	adds	r2, r7, #7
    8306:	7812      	ldrb	r2, [r2, #0]
    8308:	0952      	lsrs	r2, r2, #5
    830a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    830c:	4b0d      	ldr	r3, [pc, #52]	; (8344 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    830e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8310:	230f      	movs	r3, #15
    8312:	18fb      	adds	r3, r7, r3
    8314:	781b      	ldrb	r3, [r3, #0]
    8316:	2b00      	cmp	r3, #0
    8318:	d10f      	bne.n	833a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    831a:	230f      	movs	r3, #15
    831c:	18fb      	adds	r3, r7, r3
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	009b      	lsls	r3, r3, #2
    8322:	2210      	movs	r2, #16
    8324:	4694      	mov	ip, r2
    8326:	44bc      	add	ip, r7
    8328:	4463      	add	r3, ip
    832a:	3b08      	subs	r3, #8
    832c:	681a      	ldr	r2, [r3, #0]
    832e:	230e      	movs	r3, #14
    8330:	18fb      	adds	r3, r7, r3
    8332:	781b      	ldrb	r3, [r3, #0]
    8334:	01db      	lsls	r3, r3, #7
    8336:	18d3      	adds	r3, r2, r3
    8338:	e000      	b.n	833c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    833a:	2300      	movs	r3, #0
}
    833c:	0018      	movs	r0, r3
    833e:	46bd      	mov	sp, r7
    8340:	b004      	add	sp, #16
    8342:	bd80      	pop	{r7, pc}
    8344:	41004400 	.word	0x41004400

00008348 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    8348:	b580      	push	{r7, lr}
    834a:	b084      	sub	sp, #16
    834c:	af00      	add	r7, sp, #0
    834e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    8350:	687b      	ldr	r3, [r7, #4]
    8352:	681b      	ldr	r3, [r3, #0]
    8354:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8356:	68fb      	ldr	r3, [r7, #12]
    8358:	7e5b      	ldrb	r3, [r3, #25]
    835a:	b2db      	uxtb	r3, r3
    835c:	b25b      	sxtb	r3, r3
    835e:	2b00      	cmp	r3, #0
    8360:	da01      	bge.n	8366 <adc_is_syncing+0x1e>
		return true;
    8362:	2301      	movs	r3, #1
    8364:	e000      	b.n	8368 <adc_is_syncing+0x20>
	}

	return false;
    8366:	2300      	movs	r3, #0
}
    8368:	0018      	movs	r0, r3
    836a:	46bd      	mov	sp, r7
    836c:	b004      	add	sp, #16
    836e:	bd80      	pop	{r7, pc}

00008370 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    8370:	b580      	push	{r7, lr}
    8372:	b086      	sub	sp, #24
    8374:	af00      	add	r7, sp, #0
    8376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	681b      	ldr	r3, [r3, #0]
    837c:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    837e:	693b      	ldr	r3, [r7, #16]
    8380:	7e1b      	ldrb	r3, [r3, #24]
    8382:	b2db      	uxtb	r3, r3
    8384:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    8386:	2300      	movs	r3, #0
    8388:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    838a:	68fb      	ldr	r3, [r7, #12]
    838c:	2201      	movs	r2, #1
    838e:	4013      	ands	r3, r2
    8390:	d003      	beq.n	839a <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    8392:	697b      	ldr	r3, [r7, #20]
    8394:	2201      	movs	r2, #1
    8396:	4313      	orrs	r3, r2
    8398:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    839a:	68fb      	ldr	r3, [r7, #12]
    839c:	2204      	movs	r2, #4
    839e:	4013      	ands	r3, r2
    83a0:	d003      	beq.n	83aa <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    83a2:	697b      	ldr	r3, [r7, #20]
    83a4:	2202      	movs	r2, #2
    83a6:	4313      	orrs	r3, r2
    83a8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    83aa:	68fb      	ldr	r3, [r7, #12]
    83ac:	2202      	movs	r2, #2
    83ae:	4013      	ands	r3, r2
    83b0:	d003      	beq.n	83ba <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    83b2:	697b      	ldr	r3, [r7, #20]
    83b4:	2204      	movs	r2, #4
    83b6:	4313      	orrs	r3, r2
    83b8:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    83ba:	697b      	ldr	r3, [r7, #20]
}
    83bc:	0018      	movs	r0, r3
    83be:	46bd      	mov	sp, r7
    83c0:	b006      	add	sp, #24
    83c2:	bd80      	pop	{r7, pc}

000083c4 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    83c4:	b580      	push	{r7, lr}
    83c6:	b084      	sub	sp, #16
    83c8:	af00      	add	r7, sp, #0
    83ca:	6078      	str	r0, [r7, #4]
    83cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    83ce:	687b      	ldr	r3, [r7, #4]
    83d0:	681b      	ldr	r3, [r3, #0]
    83d2:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    83d4:	2300      	movs	r3, #0
    83d6:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    83d8:	683b      	ldr	r3, [r7, #0]
    83da:	2201      	movs	r2, #1
    83dc:	4013      	ands	r3, r2
    83de:	d003      	beq.n	83e8 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    83e0:	68fb      	ldr	r3, [r7, #12]
    83e2:	2201      	movs	r2, #1
    83e4:	4313      	orrs	r3, r2
    83e6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    83e8:	683b      	ldr	r3, [r7, #0]
    83ea:	2202      	movs	r2, #2
    83ec:	4013      	ands	r3, r2
    83ee:	d003      	beq.n	83f8 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    83f0:	68fb      	ldr	r3, [r7, #12]
    83f2:	2204      	movs	r2, #4
    83f4:	4313      	orrs	r3, r2
    83f6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    83f8:	683b      	ldr	r3, [r7, #0]
    83fa:	2204      	movs	r2, #4
    83fc:	4013      	ands	r3, r2
    83fe:	d003      	beq.n	8408 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    8400:	68fb      	ldr	r3, [r7, #12]
    8402:	2202      	movs	r2, #2
    8404:	4313      	orrs	r3, r2
    8406:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    8408:	68fb      	ldr	r3, [r7, #12]
    840a:	b2da      	uxtb	r2, r3
    840c:	68bb      	ldr	r3, [r7, #8]
    840e:	761a      	strb	r2, [r3, #24]
}
    8410:	46c0      	nop			; (mov r8, r8)
    8412:	46bd      	mov	sp, r7
    8414:	b004      	add	sp, #16
    8416:	bd80      	pop	{r7, pc}

00008418 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    8418:	b580      	push	{r7, lr}
    841a:	b084      	sub	sp, #16
    841c:	af00      	add	r7, sp, #0
    841e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	681b      	ldr	r3, [r3, #0]
    8424:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8426:	46c0      	nop			; (mov r8, r8)
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	0018      	movs	r0, r3
    842c:	4b10      	ldr	r3, [pc, #64]	; (8470 <adc_enable+0x58>)
    842e:	4798      	blx	r3
    8430:	1e03      	subs	r3, r0, #0
    8432:	d1f9      	bne.n	8428 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    8434:	2017      	movs	r0, #23
    8436:	4b0f      	ldr	r3, [pc, #60]	; (8474 <adc_enable+0x5c>)
    8438:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    843a:	68fb      	ldr	r3, [r7, #12]
    843c:	220f      	movs	r2, #15
    843e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    8440:	68fb      	ldr	r3, [r7, #12]
    8442:	220f      	movs	r2, #15
    8444:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    8446:	68fb      	ldr	r3, [r7, #12]
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	b2db      	uxtb	r3, r3
    844c:	2202      	movs	r2, #2
    844e:	4313      	orrs	r3, r2
    8450:	b2da      	uxtb	r2, r3
    8452:	68fb      	ldr	r3, [r7, #12]
    8454:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	0018      	movs	r0, r3
    845c:	4b04      	ldr	r3, [pc, #16]	; (8470 <adc_enable+0x58>)
    845e:	4798      	blx	r3
    8460:	1e03      	subs	r3, r0, #0
    8462:	d1f9      	bne.n	8458 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    8464:	2300      	movs	r3, #0
}
    8466:	0018      	movs	r0, r3
    8468:	46bd      	mov	sp, r7
    846a:	b004      	add	sp, #16
    846c:	bd80      	pop	{r7, pc}
    846e:	46c0      	nop			; (mov r8, r8)
    8470:	00008349 	.word	0x00008349
    8474:	00008241 	.word	0x00008241

00008478 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    8478:	b580      	push	{r7, lr}
    847a:	b084      	sub	sp, #16
    847c:	af00      	add	r7, sp, #0
    847e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8480:	687b      	ldr	r3, [r7, #4]
    8482:	681b      	ldr	r3, [r3, #0]
    8484:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	0018      	movs	r0, r3
    848c:	4b0b      	ldr	r3, [pc, #44]	; (84bc <adc_start_conversion+0x44>)
    848e:	4798      	blx	r3
    8490:	1e03      	subs	r3, r0, #0
    8492:	d1f9      	bne.n	8488 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8494:	68fb      	ldr	r3, [r7, #12]
    8496:	7b1b      	ldrb	r3, [r3, #12]
    8498:	b2db      	uxtb	r3, r3
    849a:	2202      	movs	r2, #2
    849c:	4313      	orrs	r3, r2
    849e:	b2da      	uxtb	r2, r3
    84a0:	68fb      	ldr	r3, [r7, #12]
    84a2:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    84a4:	46c0      	nop			; (mov r8, r8)
    84a6:	687b      	ldr	r3, [r7, #4]
    84a8:	0018      	movs	r0, r3
    84aa:	4b04      	ldr	r3, [pc, #16]	; (84bc <adc_start_conversion+0x44>)
    84ac:	4798      	blx	r3
    84ae:	1e03      	subs	r3, r0, #0
    84b0:	d1f9      	bne.n	84a6 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    84b2:	46c0      	nop			; (mov r8, r8)
    84b4:	46bd      	mov	sp, r7
    84b6:	b004      	add	sp, #16
    84b8:	bd80      	pop	{r7, pc}
    84ba:	46c0      	nop			; (mov r8, r8)
    84bc:	00008349 	.word	0x00008349

000084c0 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b084      	sub	sp, #16
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
    84c8:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    84ca:	687b      	ldr	r3, [r7, #4]
    84cc:	0018      	movs	r0, r3
    84ce:	4b18      	ldr	r3, [pc, #96]	; (8530 <adc_read+0x70>)
    84d0:	4798      	blx	r3
    84d2:	0002      	movs	r2, r0
    84d4:	2301      	movs	r3, #1
    84d6:	4013      	ands	r3, r2
    84d8:	d101      	bne.n	84de <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    84da:	2305      	movs	r3, #5
    84dc:	e023      	b.n	8526 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    84de:	687b      	ldr	r3, [r7, #4]
    84e0:	681b      	ldr	r3, [r3, #0]
    84e2:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    84e4:	46c0      	nop			; (mov r8, r8)
    84e6:	687b      	ldr	r3, [r7, #4]
    84e8:	0018      	movs	r0, r3
    84ea:	4b12      	ldr	r3, [pc, #72]	; (8534 <adc_read+0x74>)
    84ec:	4798      	blx	r3
    84ee:	1e03      	subs	r3, r0, #0
    84f0:	d1f9      	bne.n	84e6 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    84f2:	68fb      	ldr	r3, [r7, #12]
    84f4:	8b5b      	ldrh	r3, [r3, #26]
    84f6:	b29a      	uxth	r2, r3
    84f8:	683b      	ldr	r3, [r7, #0]
    84fa:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    84fc:	687b      	ldr	r3, [r7, #4]
    84fe:	2101      	movs	r1, #1
    8500:	0018      	movs	r0, r3
    8502:	4b0d      	ldr	r3, [pc, #52]	; (8538 <adc_read+0x78>)
    8504:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    8506:	687b      	ldr	r3, [r7, #4]
    8508:	0018      	movs	r0, r3
    850a:	4b09      	ldr	r3, [pc, #36]	; (8530 <adc_read+0x70>)
    850c:	4798      	blx	r3
    850e:	0002      	movs	r2, r0
    8510:	2304      	movs	r3, #4
    8512:	4013      	ands	r3, r2
    8514:	d006      	beq.n	8524 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    8516:	687b      	ldr	r3, [r7, #4]
    8518:	2104      	movs	r1, #4
    851a:	0018      	movs	r0, r3
    851c:	4b06      	ldr	r3, [pc, #24]	; (8538 <adc_read+0x78>)
    851e:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    8520:	231e      	movs	r3, #30
    8522:	e000      	b.n	8526 <adc_read+0x66>
	}

	return STATUS_OK;
    8524:	2300      	movs	r3, #0
}
    8526:	0018      	movs	r0, r3
    8528:	46bd      	mov	sp, r7
    852a:	b004      	add	sp, #16
    852c:	bd80      	pop	{r7, pc}
    852e:	46c0      	nop			; (mov r8, r8)
    8530:	00008371 	.word	0x00008371
    8534:	00008349 	.word	0x00008349
    8538:	000083c5 	.word	0x000083c5

0000853c <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    853c:	b580      	push	{r7, lr}
    853e:	b084      	sub	sp, #16
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
    8544:	000a      	movs	r2, r1
    8546:	1cfb      	adds	r3, r7, #3
    8548:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	681b      	ldr	r3, [r3, #0]
    854e:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8550:	46c0      	nop			; (mov r8, r8)
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	0018      	movs	r0, r3
    8556:	4b0c      	ldr	r3, [pc, #48]	; (8588 <adc_set_positive_input+0x4c>)
    8558:	4798      	blx	r3
    855a:	1e03      	subs	r3, r0, #0
    855c:	d1f9      	bne.n	8552 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    855e:	68fb      	ldr	r3, [r7, #12]
    8560:	691b      	ldr	r3, [r3, #16]
    8562:	221f      	movs	r2, #31
    8564:	4393      	bics	r3, r2
    8566:	001a      	movs	r2, r3
    8568:	1cfb      	adds	r3, r7, #3
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    856e:	68fb      	ldr	r3, [r7, #12]
    8570:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	0018      	movs	r0, r3
    8578:	4b03      	ldr	r3, [pc, #12]	; (8588 <adc_set_positive_input+0x4c>)
    857a:	4798      	blx	r3
    857c:	1e03      	subs	r3, r0, #0
    857e:	d1f9      	bne.n	8574 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
    8580:	46c0      	nop			; (mov r8, r8)
    8582:	46bd      	mov	sp, r7
    8584:	b004      	add	sp, #16
    8586:	bd80      	pop	{r7, pc}
    8588:	00008349 	.word	0x00008349

0000858c <port_get_group_from_gpio_pin>:
{
    858c:	b580      	push	{r7, lr}
    858e:	b082      	sub	sp, #8
    8590:	af00      	add	r7, sp, #0
    8592:	0002      	movs	r2, r0
    8594:	1dfb      	adds	r3, r7, #7
    8596:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8598:	1dfb      	adds	r3, r7, #7
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	0018      	movs	r0, r3
    859e:	4b03      	ldr	r3, [pc, #12]	; (85ac <port_get_group_from_gpio_pin+0x20>)
    85a0:	4798      	blx	r3
    85a2:	0003      	movs	r3, r0
}
    85a4:	0018      	movs	r0, r3
    85a6:	46bd      	mov	sp, r7
    85a8:	b002      	add	sp, #8
    85aa:	bd80      	pop	{r7, pc}
    85ac:	000082e9 	.word	0x000082e9

000085b0 <port_get_config_defaults>:
{
    85b0:	b580      	push	{r7, lr}
    85b2:	b082      	sub	sp, #8
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	2200      	movs	r2, #0
    85bc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	2201      	movs	r2, #1
    85c2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	2200      	movs	r2, #0
    85c8:	709a      	strb	r2, [r3, #2]
}
    85ca:	46c0      	nop			; (mov r8, r8)
    85cc:	46bd      	mov	sp, r7
    85ce:	b002      	add	sp, #8
    85d0:	bd80      	pop	{r7, pc}
	...

000085d4 <port_pin_get_input_level>:
{
    85d4:	b580      	push	{r7, lr}
    85d6:	b084      	sub	sp, #16
    85d8:	af00      	add	r7, sp, #0
    85da:	0002      	movs	r2, r0
    85dc:	1dfb      	adds	r3, r7, #7
    85de:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    85e0:	1dfb      	adds	r3, r7, #7
    85e2:	781b      	ldrb	r3, [r3, #0]
    85e4:	0018      	movs	r0, r3
    85e6:	4b0b      	ldr	r3, [pc, #44]	; (8614 <port_pin_get_input_level+0x40>)
    85e8:	4798      	blx	r3
    85ea:	0003      	movs	r3, r0
    85ec:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    85ee:	1dfb      	adds	r3, r7, #7
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	221f      	movs	r2, #31
    85f4:	4013      	ands	r3, r2
    85f6:	2201      	movs	r2, #1
    85f8:	409a      	lsls	r2, r3
    85fa:	0013      	movs	r3, r2
    85fc:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    85fe:	68fb      	ldr	r3, [r7, #12]
    8600:	6a1b      	ldr	r3, [r3, #32]
    8602:	68ba      	ldr	r2, [r7, #8]
    8604:	4013      	ands	r3, r2
    8606:	1e5a      	subs	r2, r3, #1
    8608:	4193      	sbcs	r3, r2
    860a:	b2db      	uxtb	r3, r3
}
    860c:	0018      	movs	r0, r3
    860e:	46bd      	mov	sp, r7
    8610:	b004      	add	sp, #16
    8612:	bd80      	pop	{r7, pc}
    8614:	0000858d 	.word	0x0000858d

00008618 <port_pin_set_output_level>:
{
    8618:	b580      	push	{r7, lr}
    861a:	b084      	sub	sp, #16
    861c:	af00      	add	r7, sp, #0
    861e:	0002      	movs	r2, r0
    8620:	1dfb      	adds	r3, r7, #7
    8622:	701a      	strb	r2, [r3, #0]
    8624:	1dbb      	adds	r3, r7, #6
    8626:	1c0a      	adds	r2, r1, #0
    8628:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    862a:	1dfb      	adds	r3, r7, #7
    862c:	781b      	ldrb	r3, [r3, #0]
    862e:	0018      	movs	r0, r3
    8630:	4b0d      	ldr	r3, [pc, #52]	; (8668 <port_pin_set_output_level+0x50>)
    8632:	4798      	blx	r3
    8634:	0003      	movs	r3, r0
    8636:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8638:	1dfb      	adds	r3, r7, #7
    863a:	781b      	ldrb	r3, [r3, #0]
    863c:	221f      	movs	r2, #31
    863e:	4013      	ands	r3, r2
    8640:	2201      	movs	r2, #1
    8642:	409a      	lsls	r2, r3
    8644:	0013      	movs	r3, r2
    8646:	60bb      	str	r3, [r7, #8]
	if (level) {
    8648:	1dbb      	adds	r3, r7, #6
    864a:	781b      	ldrb	r3, [r3, #0]
    864c:	2b00      	cmp	r3, #0
    864e:	d003      	beq.n	8658 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8650:	68fb      	ldr	r3, [r7, #12]
    8652:	68ba      	ldr	r2, [r7, #8]
    8654:	619a      	str	r2, [r3, #24]
}
    8656:	e002      	b.n	865e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8658:	68fb      	ldr	r3, [r7, #12]
    865a:	68ba      	ldr	r2, [r7, #8]
    865c:	615a      	str	r2, [r3, #20]
}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	46bd      	mov	sp, r7
    8662:	b004      	add	sp, #16
    8664:	bd80      	pop	{r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	0000858d 	.word	0x0000858d

0000866c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    866c:	b580      	push	{r7, lr}
    866e:	b084      	sub	sp, #16
    8670:	af00      	add	r7, sp, #0
    8672:	0002      	movs	r2, r0
    8674:	1dfb      	adds	r3, r7, #7
    8676:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    8678:	230f      	movs	r3, #15
    867a:	18fb      	adds	r3, r7, r3
    867c:	1dfa      	adds	r2, r7, #7
    867e:	7812      	ldrb	r2, [r2, #0]
    8680:	0952      	lsrs	r2, r2, #5
    8682:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8684:	230f      	movs	r3, #15
    8686:	18fb      	adds	r3, r7, r3
    8688:	781b      	ldrb	r3, [r3, #0]
    868a:	2b00      	cmp	r3, #0
    868c:	d10c      	bne.n	86a8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    868e:	4b09      	ldr	r3, [pc, #36]	; (86b4 <_extint_get_eic_from_channel+0x48>)
    8690:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    8692:	230f      	movs	r3, #15
    8694:	18fb      	adds	r3, r7, r3
    8696:	781b      	ldrb	r3, [r3, #0]
    8698:	009b      	lsls	r3, r3, #2
    869a:	2210      	movs	r2, #16
    869c:	4694      	mov	ip, r2
    869e:	44bc      	add	ip, r7
    86a0:	4463      	add	r3, ip
    86a2:	3b08      	subs	r3, #8
    86a4:	681b      	ldr	r3, [r3, #0]
    86a6:	e000      	b.n	86aa <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    86a8:	2300      	movs	r3, #0
	}
}
    86aa:	0018      	movs	r0, r3
    86ac:	46bd      	mov	sp, r7
    86ae:	b004      	add	sp, #16
    86b0:	bd80      	pop	{r7, pc}
    86b2:	46c0      	nop			; (mov r8, r8)
    86b4:	40001800 	.word	0x40001800

000086b8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    86b8:	b580      	push	{r7, lr}
    86ba:	b084      	sub	sp, #16
    86bc:	af00      	add	r7, sp, #0
    86be:	0002      	movs	r2, r0
    86c0:	1dfb      	adds	r3, r7, #7
    86c2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    86c4:	1dfb      	adds	r3, r7, #7
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	0018      	movs	r0, r3
    86ca:	4b09      	ldr	r3, [pc, #36]	; (86f0 <extint_chan_clear_detected+0x38>)
    86cc:	4798      	blx	r3
    86ce:	0003      	movs	r3, r0
    86d0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    86d2:	1dfb      	adds	r3, r7, #7
    86d4:	781b      	ldrb	r3, [r3, #0]
    86d6:	221f      	movs	r2, #31
    86d8:	4013      	ands	r3, r2
    86da:	2201      	movs	r2, #1
    86dc:	409a      	lsls	r2, r3
    86de:	0013      	movs	r3, r2
    86e0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    86e2:	68fb      	ldr	r3, [r7, #12]
    86e4:	68ba      	ldr	r2, [r7, #8]
    86e6:	611a      	str	r2, [r3, #16]
}
    86e8:	46c0      	nop			; (mov r8, r8)
    86ea:	46bd      	mov	sp, r7
    86ec:	b004      	add	sp, #16
    86ee:	bd80      	pop	{r7, pc}
    86f0:	0000866d 	.word	0x0000866d

000086f4 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    86f4:	b580      	push	{r7, lr}
    86f6:	b084      	sub	sp, #16
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	22a0      	movs	r2, #160	; 0xa0
    8700:	0112      	lsls	r2, r2, #4
    8702:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    8704:	687b      	ldr	r3, [r7, #4]
    8706:	2201      	movs	r2, #1
    8708:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    870a:	687b      	ldr	r3, [r7, #4]
    870c:	2200      	movs	r2, #0
    870e:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	2200      	movs	r2, #0
    8714:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8716:	230f      	movs	r3, #15
    8718:	18fb      	adds	r3, r7, r3
    871a:	2200      	movs	r2, #0
    871c:	701a      	strb	r2, [r3, #0]
    871e:	e00e      	b.n	873e <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    8720:	230f      	movs	r3, #15
    8722:	18fb      	adds	r3, r7, r3
    8724:	781a      	ldrb	r2, [r3, #0]
    8726:	687b      	ldr	r3, [r7, #4]
    8728:	3202      	adds	r2, #2
    872a:	0092      	lsls	r2, r2, #2
    872c:	2100      	movs	r1, #0
    872e:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8730:	230f      	movs	r3, #15
    8732:	18fb      	adds	r3, r7, r3
    8734:	781a      	ldrb	r2, [r3, #0]
    8736:	230f      	movs	r3, #15
    8738:	18fb      	adds	r3, r7, r3
    873a:	3201      	adds	r2, #1
    873c:	701a      	strb	r2, [r3, #0]
    873e:	230f      	movs	r3, #15
    8740:	18fb      	adds	r3, r7, r3
    8742:	781b      	ldrb	r3, [r3, #0]
    8744:	2b01      	cmp	r3, #1
    8746:	d9eb      	bls.n	8720 <rtc_count_get_config_defaults+0x2c>
	}
}
    8748:	46c0      	nop			; (mov r8, r8)
    874a:	46bd      	mov	sp, r7
    874c:	b004      	add	sp, #16
    874e:	bd80      	pop	{r7, pc}

00008750 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
    8750:	b580      	push	{r7, lr}
    8752:	b086      	sub	sp, #24
    8754:	af00      	add	r7, sp, #0
    8756:	6078      	str	r0, [r7, #4]
    8758:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    8760:	2300      	movs	r3, #0
    8762:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    8764:	683b      	ldr	r3, [r7, #0]
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	2b00      	cmp	r3, #0
    876a:	d004      	beq.n	8776 <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
    876c:	697b      	ldr	r3, [r7, #20]
    876e:	2280      	movs	r2, #128	; 0x80
    8770:	0212      	lsls	r2, r2, #8
    8772:	4313      	orrs	r3, r2
    8774:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8776:	2313      	movs	r3, #19
    8778:	18fb      	adds	r3, r7, r3
    877a:	2200      	movs	r2, #0
    877c:	701a      	strb	r2, [r3, #0]
    877e:	e01c      	b.n	87ba <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
    8780:	2313      	movs	r3, #19
    8782:	18fb      	adds	r3, r7, r3
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	683a      	ldr	r2, [r7, #0]
    8788:	18d3      	adds	r3, r2, r3
    878a:	785b      	ldrb	r3, [r3, #1]
    878c:	2b00      	cmp	r3, #0
    878e:	d00d      	beq.n	87ac <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
    8790:	2313      	movs	r3, #19
    8792:	18fb      	adds	r3, r7, r3
    8794:	781b      	ldrb	r3, [r3, #0]
    8796:	2201      	movs	r2, #1
    8798:	409a      	lsls	r2, r3
    879a:	0013      	movs	r3, r2
    879c:	021b      	lsls	r3, r3, #8
    879e:	001a      	movs	r2, r3
    87a0:	2380      	movs	r3, #128	; 0x80
    87a2:	005b      	lsls	r3, r3, #1
    87a4:	4013      	ands	r3, r2
    87a6:	697a      	ldr	r2, [r7, #20]
    87a8:	4313      	orrs	r3, r2
    87aa:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    87ac:	2313      	movs	r3, #19
    87ae:	18fb      	adds	r3, r7, r3
    87b0:	781a      	ldrb	r2, [r3, #0]
    87b2:	2313      	movs	r3, #19
    87b4:	18fb      	adds	r3, r7, r3
    87b6:	3201      	adds	r2, #1
    87b8:	701a      	strb	r2, [r3, #0]
    87ba:	2313      	movs	r3, #19
    87bc:	18fb      	adds	r3, r7, r3
    87be:	781b      	ldrb	r3, [r3, #0]
    87c0:	2b01      	cmp	r3, #1
    87c2:	d9dd      	bls.n	8780 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
    87c4:	2312      	movs	r3, #18
    87c6:	18fb      	adds	r3, r7, r3
    87c8:	2200      	movs	r2, #0
    87ca:	701a      	strb	r2, [r3, #0]
    87cc:	e01a      	b.n	8804 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
    87ce:	2312      	movs	r3, #18
    87d0:	18fb      	adds	r3, r7, r3
    87d2:	781b      	ldrb	r3, [r3, #0]
    87d4:	683a      	ldr	r2, [r7, #0]
    87d6:	18d3      	adds	r3, r2, r3
    87d8:	78db      	ldrb	r3, [r3, #3]
    87da:	2b00      	cmp	r3, #0
    87dc:	d00b      	beq.n	87f6 <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
    87de:	2312      	movs	r3, #18
    87e0:	18fb      	adds	r3, r7, r3
    87e2:	781b      	ldrb	r3, [r3, #0]
    87e4:	2201      	movs	r2, #1
    87e6:	409a      	lsls	r2, r3
    87e8:	0013      	movs	r3, r2
    87ea:	001a      	movs	r2, r3
    87ec:	23ff      	movs	r3, #255	; 0xff
    87ee:	4013      	ands	r3, r2
    87f0:	697a      	ldr	r2, [r7, #20]
    87f2:	4313      	orrs	r3, r2
    87f4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
    87f6:	2312      	movs	r3, #18
    87f8:	18fb      	adds	r3, r7, r3
    87fa:	781a      	ldrb	r2, [r3, #0]
    87fc:	2312      	movs	r3, #18
    87fe:	18fb      	adds	r3, r7, r3
    8800:	3201      	adds	r2, #1
    8802:	701a      	strb	r2, [r3, #0]
    8804:	2312      	movs	r3, #18
    8806:	18fb      	adds	r3, r7, r3
    8808:	781b      	ldrb	r3, [r3, #0]
    880a:	2b07      	cmp	r3, #7
    880c:	d9df      	bls.n	87ce <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    880e:	68fb      	ldr	r3, [r7, #12]
    8810:	889b      	ldrh	r3, [r3, #4]
    8812:	b29a      	uxth	r2, r3
    8814:	697b      	ldr	r3, [r7, #20]
    8816:	b29b      	uxth	r3, r3
    8818:	4313      	orrs	r3, r2
    881a:	b29a      	uxth	r2, r3
    881c:	68fb      	ldr	r3, [r7, #12]
    881e:	809a      	strh	r2, [r3, #4]
}
    8820:	46c0      	nop			; (mov r8, r8)
    8822:	46bd      	mov	sp, r7
    8824:	b006      	add	sp, #24
    8826:	bd80      	pop	{r7, pc}

00008828 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
    8828:	b580      	push	{r7, lr}
    882a:	b082      	sub	sp, #8
    882c:	af00      	add	r7, sp, #0
    882e:	6078      	str	r0, [r7, #4]
    8830:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
    8832:	200d      	movs	r0, #13
    8834:	4b08      	ldr	r3, [pc, #32]	; (8858 <readOverHeadWaterSensorState+0x30>)
    8836:	4798      	blx	r3
    8838:	0003      	movs	r3, r0
    883a:	001a      	movs	r2, r3
    883c:	687b      	ldr	r3, [r7, #4]
    883e:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
    8840:	202f      	movs	r0, #47	; 0x2f
    8842:	4b05      	ldr	r3, [pc, #20]	; (8858 <readOverHeadWaterSensorState+0x30>)
    8844:	4798      	blx	r3
    8846:	0003      	movs	r3, r0
    8848:	001a      	movs	r2, r3
    884a:	683b      	ldr	r3, [r7, #0]
    884c:	701a      	strb	r2, [r3, #0]
}
    884e:	46c0      	nop			; (mov r8, r8)
    8850:	46bd      	mov	sp, r7
    8852:	b002      	add	sp, #8
    8854:	bd80      	pop	{r7, pc}
    8856:	46c0      	nop			; (mov r8, r8)
    8858:	000085d5 	.word	0x000085d5

0000885c <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
    885c:	b580      	push	{r7, lr}
    885e:	b082      	sub	sp, #8
    8860:	af00      	add	r7, sp, #0
    8862:	0002      	movs	r2, r0
    8864:	1dfb      	adds	r3, r7, #7
    8866:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
    8868:	4b03      	ldr	r3, [pc, #12]	; (8878 <updateOverheadLevel+0x1c>)
    886a:	1dfa      	adds	r2, r7, #7
    886c:	7812      	ldrb	r2, [r2, #0]
    886e:	701a      	strb	r2, [r3, #0]
}
    8870:	46c0      	nop			; (mov r8, r8)
    8872:	46bd      	mov	sp, r7
    8874:	b002      	add	sp, #8
    8876:	bd80      	pop	{r7, pc}
    8878:	20000754 	.word	0x20000754

0000887c <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
    887c:	b580      	push	{r7, lr}
    887e:	b082      	sub	sp, #8
    8880:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
    8882:	1d7a      	adds	r2, r7, #5
    8884:	1dbb      	adds	r3, r7, #6
    8886:	0011      	movs	r1, r2
    8888:	0018      	movs	r0, r3
    888a:	4b11      	ldr	r3, [pc, #68]	; (88d0 <getOverHeadWaterSensorState+0x54>)
    888c:	4798      	blx	r3
	uint8_t ans=0;
    888e:	1dfb      	adds	r3, r7, #7
    8890:	2200      	movs	r2, #0
    8892:	701a      	strb	r2, [r3, #0]
	if(!olow)
    8894:	1dbb      	adds	r3, r7, #6
    8896:	781b      	ldrb	r3, [r3, #0]
    8898:	2201      	movs	r2, #1
    889a:	4053      	eors	r3, r2
    889c:	b2db      	uxtb	r3, r3
    889e:	2b00      	cmp	r3, #0
    88a0:	d010      	beq.n	88c4 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
    88a2:	1dfb      	adds	r3, r7, #7
    88a4:	781a      	ldrb	r2, [r3, #0]
    88a6:	1dfb      	adds	r3, r7, #7
    88a8:	3201      	adds	r2, #1
    88aa:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
    88ac:	1d7b      	adds	r3, r7, #5
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	2201      	movs	r2, #1
    88b2:	4053      	eors	r3, r2
    88b4:	b2db      	uxtb	r3, r3
    88b6:	2b00      	cmp	r3, #0
    88b8:	d004      	beq.n	88c4 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
    88ba:	1dfb      	adds	r3, r7, #7
    88bc:	781a      	ldrb	r2, [r3, #0]
    88be:	1dfb      	adds	r3, r7, #7
    88c0:	3201      	adds	r2, #1
    88c2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    88c4:	1dfb      	adds	r3, r7, #7
    88c6:	781b      	ldrb	r3, [r3, #0]
}
    88c8:	0018      	movs	r0, r3
    88ca:	46bd      	mov	sp, r7
    88cc:	b002      	add	sp, #8
    88ce:	bd80      	pop	{r7, pc}
    88d0:	00008829 	.word	0x00008829

000088d4 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
    88d4:	b590      	push	{r4, r7, lr}
    88d6:	b085      	sub	sp, #20
    88d8:	af00      	add	r7, sp, #0
    88da:	0002      	movs	r2, r0
    88dc:	1dfb      	adds	r3, r7, #7
    88de:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
    88e0:	230f      	movs	r3, #15
    88e2:	18fc      	adds	r4, r7, r3
    88e4:	4b15      	ldr	r3, [pc, #84]	; (893c <overHeadWaterStatusOnCall+0x68>)
    88e6:	4798      	blx	r3
    88e8:	0003      	movs	r3, r0
    88ea:	7023      	strb	r3, [r4, #0]
	if(current)
    88ec:	1dfb      	adds	r3, r7, #7
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	2b00      	cmp	r3, #0
    88f2:	d004      	beq.n	88fe <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
    88f4:	230f      	movs	r3, #15
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	4a11      	ldr	r2, [pc, #68]	; (8940 <overHeadWaterStatusOnCall+0x6c>)
    88fa:	7812      	ldrb	r2, [r2, #0]
    88fc:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
    88fe:	230f      	movs	r3, #15
    8900:	18fb      	adds	r3, r7, r3
    8902:	781b      	ldrb	r3, [r3, #0]
    8904:	2b02      	cmp	r3, #2
    8906:	d103      	bne.n	8910 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
    8908:	2056      	movs	r0, #86	; 0x56
    890a:	4b0e      	ldr	r3, [pc, #56]	; (8944 <overHeadWaterStatusOnCall+0x70>)
    890c:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
    890e:	e010      	b.n	8932 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
    8910:	230f      	movs	r3, #15
    8912:	18fb      	adds	r3, r7, r3
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	2b01      	cmp	r3, #1
    8918:	d103      	bne.n	8922 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
    891a:	2058      	movs	r0, #88	; 0x58
    891c:	4b09      	ldr	r3, [pc, #36]	; (8944 <overHeadWaterStatusOnCall+0x70>)
    891e:	4798      	blx	r3
}
    8920:	e007      	b.n	8932 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
    8922:	230f      	movs	r3, #15
    8924:	18fb      	adds	r3, r7, r3
    8926:	781b      	ldrb	r3, [r3, #0]
    8928:	2b00      	cmp	r3, #0
    892a:	d102      	bne.n	8932 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
    892c:	2057      	movs	r0, #87	; 0x57
    892e:	4b05      	ldr	r3, [pc, #20]	; (8944 <overHeadWaterStatusOnCall+0x70>)
    8930:	4798      	blx	r3
}
    8932:	46c0      	nop			; (mov r8, r8)
    8934:	46bd      	mov	sp, r7
    8936:	b005      	add	sp, #20
    8938:	bd90      	pop	{r4, r7, pc}
    893a:	46c0      	nop			; (mov r8, r8)
    893c:	0000887d 	.word	0x0000887d
    8940:	20000754 	.word	0x20000754
    8944:	000047ed 	.word	0x000047ed

00008948 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
    8948:	b580      	push	{r7, lr}
    894a:	b084      	sub	sp, #16
    894c:	af00      	add	r7, sp, #0
    894e:	60f8      	str	r0, [r7, #12]
    8950:	60b9      	str	r1, [r7, #8]
    8952:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
    8954:	2037      	movs	r0, #55	; 0x37
    8956:	4b0c      	ldr	r3, [pc, #48]	; (8988 <readWaterSensorState+0x40>)
    8958:	4798      	blx	r3
    895a:	0003      	movs	r3, r0
    895c:	001a      	movs	r2, r3
    895e:	68fb      	ldr	r3, [r7, #12]
    8960:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
    8962:	200f      	movs	r0, #15
    8964:	4b08      	ldr	r3, [pc, #32]	; (8988 <readWaterSensorState+0x40>)
    8966:	4798      	blx	r3
    8968:	0003      	movs	r3, r0
    896a:	001a      	movs	r2, r3
    896c:	68bb      	ldr	r3, [r7, #8]
    896e:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
    8970:	200e      	movs	r0, #14
    8972:	4b05      	ldr	r3, [pc, #20]	; (8988 <readWaterSensorState+0x40>)
    8974:	4798      	blx	r3
    8976:	0003      	movs	r3, r0
    8978:	001a      	movs	r2, r3
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	701a      	strb	r2, [r3, #0]
}
    897e:	46c0      	nop			; (mov r8, r8)
    8980:	46bd      	mov	sp, r7
    8982:	b004      	add	sp, #16
    8984:	bd80      	pop	{r7, pc}
    8986:	46c0      	nop			; (mov r8, r8)
    8988:	000085d5 	.word	0x000085d5

0000898c <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
    898c:	b580      	push	{r7, lr}
    898e:	b082      	sub	sp, #8
    8990:	af00      	add	r7, sp, #0
    8992:	0002      	movs	r2, r0
    8994:	1dfb      	adds	r3, r7, #7
    8996:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
    8998:	4b03      	ldr	r3, [pc, #12]	; (89a8 <updateUndergroundLevel+0x1c>)
    899a:	1dfa      	adds	r2, r7, #7
    899c:	7812      	ldrb	r2, [r2, #0]
    899e:	701a      	strb	r2, [r3, #0]
}
    89a0:	46c0      	nop			; (mov r8, r8)
    89a2:	46bd      	mov	sp, r7
    89a4:	b002      	add	sp, #8
    89a6:	bd80      	pop	{r7, pc}
    89a8:	200007fc 	.word	0x200007fc

000089ac <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
    89ac:	b580      	push	{r7, lr}
    89ae:	b082      	sub	sp, #8
    89b0:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
    89b2:	1d3a      	adds	r2, r7, #4
    89b4:	1d79      	adds	r1, r7, #5
    89b6:	1dbb      	adds	r3, r7, #6
    89b8:	0018      	movs	r0, r3
    89ba:	4b17      	ldr	r3, [pc, #92]	; (8a18 <getWaterSensorState+0x6c>)
    89bc:	4798      	blx	r3
	uint8_t ans=0;
    89be:	1dfb      	adds	r3, r7, #7
    89c0:	2200      	movs	r2, #0
    89c2:	701a      	strb	r2, [r3, #0]

	if(!l)
    89c4:	1dbb      	adds	r3, r7, #6
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	2201      	movs	r2, #1
    89ca:	4053      	eors	r3, r2
    89cc:	b2db      	uxtb	r3, r3
    89ce:	2b00      	cmp	r3, #0
    89d0:	d01c      	beq.n	8a0c <getWaterSensorState+0x60>
	{
		ans++;
    89d2:	1dfb      	adds	r3, r7, #7
    89d4:	781a      	ldrb	r2, [r3, #0]
    89d6:	1dfb      	adds	r3, r7, #7
    89d8:	3201      	adds	r2, #1
    89da:	701a      	strb	r2, [r3, #0]
		if(!m)
    89dc:	1d7b      	adds	r3, r7, #5
    89de:	781b      	ldrb	r3, [r3, #0]
    89e0:	2201      	movs	r2, #1
    89e2:	4053      	eors	r3, r2
    89e4:	b2db      	uxtb	r3, r3
    89e6:	2b00      	cmp	r3, #0
    89e8:	d010      	beq.n	8a0c <getWaterSensorState+0x60>
		{
			ans++;
    89ea:	1dfb      	adds	r3, r7, #7
    89ec:	781a      	ldrb	r2, [r3, #0]
    89ee:	1dfb      	adds	r3, r7, #7
    89f0:	3201      	adds	r2, #1
    89f2:	701a      	strb	r2, [r3, #0]
			if(!h)
    89f4:	1d3b      	adds	r3, r7, #4
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	2201      	movs	r2, #1
    89fa:	4053      	eors	r3, r2
    89fc:	b2db      	uxtb	r3, r3
    89fe:	2b00      	cmp	r3, #0
    8a00:	d004      	beq.n	8a0c <getWaterSensorState+0x60>
			{
				ans++;
    8a02:	1dfb      	adds	r3, r7, #7
    8a04:	781a      	ldrb	r2, [r3, #0]
    8a06:	1dfb      	adds	r3, r7, #7
    8a08:	3201      	adds	r2, #1
    8a0a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8a0c:	1dfb      	adds	r3, r7, #7
    8a0e:	781b      	ldrb	r3, [r3, #0]
}
    8a10:	0018      	movs	r0, r3
    8a12:	46bd      	mov	sp, r7
    8a14:	b002      	add	sp, #8
    8a16:	bd80      	pop	{r7, pc}
    8a18:	00008949 	.word	0x00008949

00008a1c <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
    8a1c:	b590      	push	{r4, r7, lr}
    8a1e:	b085      	sub	sp, #20
    8a20:	af00      	add	r7, sp, #0
    8a22:	0002      	movs	r2, r0
    8a24:	1dfb      	adds	r3, r7, #7
    8a26:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
    8a28:	230f      	movs	r3, #15
    8a2a:	18fc      	adds	r4, r7, r3
    8a2c:	4b19      	ldr	r3, [pc, #100]	; (8a94 <waterStatusOnCall+0x78>)
    8a2e:	4798      	blx	r3
    8a30:	0003      	movs	r3, r0
    8a32:	7023      	strb	r3, [r4, #0]
	if(current)
    8a34:	1dfb      	adds	r3, r7, #7
    8a36:	781b      	ldrb	r3, [r3, #0]
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d004      	beq.n	8a46 <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
    8a3c:	230f      	movs	r3, #15
    8a3e:	18fb      	adds	r3, r7, r3
    8a40:	4a15      	ldr	r2, [pc, #84]	; (8a98 <waterStatusOnCall+0x7c>)
    8a42:	7812      	ldrb	r2, [r2, #0]
    8a44:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
    8a46:	230f      	movs	r3, #15
    8a48:	18fb      	adds	r3, r7, r3
    8a4a:	781b      	ldrb	r3, [r3, #0]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d103      	bne.n	8a58 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
    8a50:	2054      	movs	r0, #84	; 0x54
    8a52:	4b12      	ldr	r3, [pc, #72]	; (8a9c <waterStatusOnCall+0x80>)
    8a54:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
    8a56:	e019      	b.n	8a8c <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
    8a58:	230f      	movs	r3, #15
    8a5a:	18fb      	adds	r3, r7, r3
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	2b01      	cmp	r3, #1
    8a60:	d103      	bne.n	8a6a <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
    8a62:	2051      	movs	r0, #81	; 0x51
    8a64:	4b0d      	ldr	r3, [pc, #52]	; (8a9c <waterStatusOnCall+0x80>)
    8a66:	4798      	blx	r3
}
    8a68:	e010      	b.n	8a8c <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
    8a6a:	230f      	movs	r3, #15
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	781b      	ldrb	r3, [r3, #0]
    8a70:	2b02      	cmp	r3, #2
    8a72:	d103      	bne.n	8a7c <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
    8a74:	2052      	movs	r0, #82	; 0x52
    8a76:	4b09      	ldr	r3, [pc, #36]	; (8a9c <waterStatusOnCall+0x80>)
    8a78:	4798      	blx	r3
}
    8a7a:	e007      	b.n	8a8c <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
    8a7c:	230f      	movs	r3, #15
    8a7e:	18fb      	adds	r3, r7, r3
    8a80:	781b      	ldrb	r3, [r3, #0]
    8a82:	2b03      	cmp	r3, #3
    8a84:	d102      	bne.n	8a8c <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
    8a86:	2045      	movs	r0, #69	; 0x45
    8a88:	4b04      	ldr	r3, [pc, #16]	; (8a9c <waterStatusOnCall+0x80>)
    8a8a:	4798      	blx	r3
}
    8a8c:	46c0      	nop			; (mov r8, r8)
    8a8e:	46bd      	mov	sp, r7
    8a90:	b005      	add	sp, #20
    8a92:	bd90      	pop	{r4, r7, pc}
    8a94:	000089ad 	.word	0x000089ad
    8a98:	200007fc 	.word	0x200007fc
    8a9c:	000047ed 	.word	0x000047ed

00008aa0 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
    8aa0:	b590      	push	{r4, r7, lr}
    8aa2:	b085      	sub	sp, #20
    8aa4:	af00      	add	r7, sp, #0
    8aa6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
    8aa8:	2308      	movs	r3, #8
    8aaa:	18fb      	adds	r3, r7, r3
    8aac:	0018      	movs	r0, r3
    8aae:	4b8b      	ldr	r3, [pc, #556]	; (8cdc <Water_Level_Task+0x23c>)
    8ab0:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
    8ab2:	2308      	movs	r3, #8
    8ab4:	18fb      	adds	r3, r7, r3
    8ab6:	2200      	movs	r2, #0
    8ab8:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
    8aba:	2308      	movs	r3, #8
    8abc:	18fb      	adds	r3, r7, r3
    8abe:	2201      	movs	r2, #1
    8ac0:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
    8ac2:	2308      	movs	r3, #8
    8ac4:	18fb      	adds	r3, r7, r3
    8ac6:	0019      	movs	r1, r3
    8ac8:	202f      	movs	r0, #47	; 0x2f
    8aca:	4b85      	ldr	r3, [pc, #532]	; (8ce0 <Water_Level_Task+0x240>)
    8acc:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
    8ace:	2308      	movs	r3, #8
    8ad0:	18fb      	adds	r3, r7, r3
    8ad2:	0019      	movs	r1, r3
    8ad4:	200c      	movs	r0, #12
    8ad6:	4b82      	ldr	r3, [pc, #520]	; (8ce0 <Water_Level_Task+0x240>)
    8ad8:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
    8ada:	2308      	movs	r3, #8
    8adc:	18fb      	adds	r3, r7, r3
    8ade:	0019      	movs	r1, r3
    8ae0:	200d      	movs	r0, #13
    8ae2:	4b7f      	ldr	r3, [pc, #508]	; (8ce0 <Water_Level_Task+0x240>)
    8ae4:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
    8ae6:	2308      	movs	r3, #8
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	0019      	movs	r1, r3
    8aec:	200e      	movs	r0, #14
    8aee:	4b7c      	ldr	r3, [pc, #496]	; (8ce0 <Water_Level_Task+0x240>)
    8af0:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
    8af2:	2308      	movs	r3, #8
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	0019      	movs	r1, r3
    8af8:	200f      	movs	r0, #15
    8afa:	4b79      	ldr	r3, [pc, #484]	; (8ce0 <Water_Level_Task+0x240>)
    8afc:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
    8afe:	2308      	movs	r3, #8
    8b00:	18fb      	adds	r3, r7, r3
    8b02:	0019      	movs	r1, r3
    8b04:	2037      	movs	r0, #55	; 0x37
    8b06:	4b76      	ldr	r3, [pc, #472]	; (8ce0 <Water_Level_Task+0x240>)
    8b08:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
    8b0a:	4b76      	ldr	r3, [pc, #472]	; (8ce4 <Water_Level_Task+0x244>)
    8b0c:	2202      	movs	r2, #2
    8b0e:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
    8b10:	4b75      	ldr	r3, [pc, #468]	; (8ce8 <Water_Level_Task+0x248>)
    8b12:	2202      	movs	r2, #2
    8b14:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
    8b16:	4b75      	ldr	r3, [pc, #468]	; (8cec <Water_Level_Task+0x24c>)
    8b18:	2201      	movs	r2, #1
    8b1a:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
    8b1c:	4b74      	ldr	r3, [pc, #464]	; (8cf0 <Water_Level_Task+0x250>)
    8b1e:	2201      	movs	r2, #1
    8b20:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
    8b22:	4b74      	ldr	r3, [pc, #464]	; (8cf4 <Water_Level_Task+0x254>)
    8b24:	2200      	movs	r2, #0
    8b26:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
    8b28:	230f      	movs	r3, #15
    8b2a:	18fb      	adds	r3, r7, r3
    8b2c:	2200      	movs	r2, #0
    8b2e:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8b30:	4b71      	ldr	r3, [pc, #452]	; (8cf8 <Water_Level_Task+0x258>)
    8b32:	791b      	ldrb	r3, [r3, #4]
    8b34:	2b00      	cmp	r3, #0
    8b36:	d004      	beq.n	8b42 <Water_Level_Task+0xa2>
	{
		j = 19;
    8b38:	230f      	movs	r3, #15
    8b3a:	18fb      	adds	r3, r7, r3
    8b3c:	2213      	movs	r2, #19
    8b3e:	701a      	strb	r2, [r3, #0]
    8b40:	e003      	b.n	8b4a <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
    8b42:	230f      	movs	r3, #15
    8b44:	18fb      	adds	r3, r7, r3
    8b46:	2211      	movs	r2, #17
    8b48:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
    8b4a:	230e      	movs	r3, #14
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	220c      	movs	r2, #12
    8b50:	701a      	strb	r2, [r3, #0]
    8b52:	e00c      	b.n	8b6e <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
    8b54:	230e      	movs	r3, #14
    8b56:	18fb      	adds	r3, r7, r3
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	4a68      	ldr	r2, [pc, #416]	; (8cfc <Water_Level_Task+0x25c>)
    8b5c:	2101      	movs	r1, #1
    8b5e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
    8b60:	230e      	movs	r3, #14
    8b62:	18fb      	adds	r3, r7, r3
    8b64:	781a      	ldrb	r2, [r3, #0]
    8b66:	230e      	movs	r3, #14
    8b68:	18fb      	adds	r3, r7, r3
    8b6a:	3201      	adds	r2, #1
    8b6c:	701a      	strb	r2, [r3, #0]
    8b6e:	230e      	movs	r3, #14
    8b70:	18fa      	adds	r2, r7, r3
    8b72:	230f      	movs	r3, #15
    8b74:	18fb      	adds	r3, r7, r3
    8b76:	7812      	ldrb	r2, [r2, #0]
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	429a      	cmp	r2, r3
    8b7c:	d3ea      	bcc.n	8b54 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
    8b7e:	4b60      	ldr	r3, [pc, #384]	; (8d00 <Water_Level_Task+0x260>)
    8b80:	2249      	movs	r2, #73	; 0x49
    8b82:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
    8b84:	4b5e      	ldr	r3, [pc, #376]	; (8d00 <Water_Level_Task+0x260>)
    8b86:	2244      	movs	r2, #68	; 0x44
    8b88:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
    8b8a:	4b5d      	ldr	r3, [pc, #372]	; (8d00 <Water_Level_Task+0x260>)
    8b8c:	2248      	movs	r2, #72	; 0x48
    8b8e:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
    8b90:	4b5b      	ldr	r3, [pc, #364]	; (8d00 <Water_Level_Task+0x260>)
    8b92:	2245      	movs	r2, #69	; 0x45
    8b94:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
    8b96:	4b5a      	ldr	r3, [pc, #360]	; (8d00 <Water_Level_Task+0x260>)
    8b98:	225a      	movs	r2, #90	; 0x5a
    8b9a:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8b9c:	4b56      	ldr	r3, [pc, #344]	; (8cf8 <Water_Level_Task+0x258>)
    8b9e:	791b      	ldrb	r3, [r3, #4]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d005      	beq.n	8bb0 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
    8ba4:	4b56      	ldr	r3, [pc, #344]	; (8d00 <Water_Level_Task+0x260>)
    8ba6:	2256      	movs	r2, #86	; 0x56
    8ba8:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
    8baa:	4b55      	ldr	r3, [pc, #340]	; (8d00 <Water_Level_Task+0x260>)
    8bac:	2257      	movs	r2, #87	; 0x57
    8bae:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    8bb0:	4b51      	ldr	r3, [pc, #324]	; (8cf8 <Water_Level_Task+0x258>)
    8bb2:	78db      	ldrb	r3, [r3, #3]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d00b      	beq.n	8bd0 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
    8bb8:	4b52      	ldr	r3, [pc, #328]	; (8d04 <Water_Level_Task+0x264>)
    8bba:	2200      	movs	r2, #0
    8bbc:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
    8bbe:	4b51      	ldr	r3, [pc, #324]	; (8d04 <Water_Level_Task+0x264>)
    8bc0:	2200      	movs	r2, #0
    8bc2:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
    8bc4:	4b50      	ldr	r3, [pc, #320]	; (8d08 <Water_Level_Task+0x268>)
    8bc6:	220d      	movs	r2, #13
    8bc8:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
    8bca:	4b4f      	ldr	r3, [pc, #316]	; (8d08 <Water_Level_Task+0x268>)
    8bcc:	220f      	movs	r2, #15
    8bce:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
    8bd0:	230c      	movs	r3, #12
    8bd2:	18fb      	adds	r3, r7, r3
    8bd4:	2200      	movs	r2, #0
    8bd6:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
    8bd8:	4b4c      	ldr	r3, [pc, #304]	; (8d0c <Water_Level_Task+0x26c>)
    8bda:	7fdb      	ldrb	r3, [r3, #31]
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d000      	beq.n	8be2 <Water_Level_Task+0x142>
    8be0:	e073      	b.n	8cca <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
    8be2:	230b      	movs	r3, #11
    8be4:	18fc      	adds	r4, r7, r3
    8be6:	4b4a      	ldr	r3, [pc, #296]	; (8d10 <Water_Level_Task+0x270>)
    8be8:	4798      	blx	r3
    8bea:	0003      	movs	r3, r0
    8bec:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
    8bee:	4b42      	ldr	r3, [pc, #264]	; (8cf8 <Water_Level_Task+0x258>)
    8bf0:	791b      	ldrb	r3, [r3, #4]
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d005      	beq.n	8c02 <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
    8bf6:	230d      	movs	r3, #13
    8bf8:	18fc      	adds	r4, r7, r3
    8bfa:	4b46      	ldr	r3, [pc, #280]	; (8d14 <Water_Level_Task+0x274>)
    8bfc:	4798      	blx	r3
    8bfe:	0003      	movs	r3, r0
    8c00:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8c02:	4b3d      	ldr	r3, [pc, #244]	; (8cf8 <Water_Level_Task+0x258>)
    8c04:	791b      	ldrb	r3, [r3, #4]
    8c06:	2b01      	cmp	r3, #1
    8c08:	d125      	bne.n	8c56 <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
    8c0a:	4b36      	ldr	r3, [pc, #216]	; (8ce4 <Water_Level_Task+0x244>)
    8c0c:	781b      	ldrb	r3, [r3, #0]
    8c0e:	220b      	movs	r2, #11
    8c10:	18ba      	adds	r2, r7, r2
    8c12:	7812      	ldrb	r2, [r2, #0]
    8c14:	429a      	cmp	r2, r3
    8c16:	d006      	beq.n	8c26 <Water_Level_Task+0x186>
    8c18:	4b33      	ldr	r3, [pc, #204]	; (8ce8 <Water_Level_Task+0x248>)
    8c1a:	781b      	ldrb	r3, [r3, #0]
    8c1c:	220b      	movs	r2, #11
    8c1e:	18ba      	adds	r2, r7, r2
    8c20:	7812      	ldrb	r2, [r2, #0]
    8c22:	429a      	cmp	r2, r3
    8c24:	d00f      	beq.n	8c46 <Water_Level_Task+0x1a6>
    8c26:	4b31      	ldr	r3, [pc, #196]	; (8cec <Water_Level_Task+0x24c>)
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	b2db      	uxtb	r3, r3
    8c2c:	220d      	movs	r2, #13
    8c2e:	18ba      	adds	r2, r7, r2
    8c30:	7812      	ldrb	r2, [r2, #0]
    8c32:	429a      	cmp	r2, r3
    8c34:	d009      	beq.n	8c4a <Water_Level_Task+0x1aa>
    8c36:	4b2e      	ldr	r3, [pc, #184]	; (8cf0 <Water_Level_Task+0x250>)
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	b2db      	uxtb	r3, r3
    8c3c:	220d      	movs	r2, #13
    8c3e:	18ba      	adds	r2, r7, r2
    8c40:	7812      	ldrb	r2, [r2, #0]
    8c42:	429a      	cmp	r2, r3
    8c44:	d101      	bne.n	8c4a <Water_Level_Task+0x1aa>
    8c46:	2301      	movs	r3, #1
    8c48:	e000      	b.n	8c4c <Water_Level_Task+0x1ac>
    8c4a:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8c4c:	1c1a      	adds	r2, r3, #0
    8c4e:	2301      	movs	r3, #1
    8c50:	4013      	ands	r3, r2
    8c52:	b2db      	uxtb	r3, r3
    8c54:	e014      	b.n	8c80 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
    8c56:	4b23      	ldr	r3, [pc, #140]	; (8ce4 <Water_Level_Task+0x244>)
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	220b      	movs	r2, #11
    8c5c:	18ba      	adds	r2, r7, r2
    8c5e:	7812      	ldrb	r2, [r2, #0]
    8c60:	429a      	cmp	r2, r3
    8c62:	d008      	beq.n	8c76 <Water_Level_Task+0x1d6>
    8c64:	4b20      	ldr	r3, [pc, #128]	; (8ce8 <Water_Level_Task+0x248>)
    8c66:	781b      	ldrb	r3, [r3, #0]
    8c68:	220b      	movs	r2, #11
    8c6a:	18ba      	adds	r2, r7, r2
    8c6c:	7812      	ldrb	r2, [r2, #0]
    8c6e:	429a      	cmp	r2, r3
    8c70:	d101      	bne.n	8c76 <Water_Level_Task+0x1d6>
    8c72:	2301      	movs	r3, #1
    8c74:	e000      	b.n	8c78 <Water_Level_Task+0x1d8>
    8c76:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8c78:	1c1a      	adds	r2, r3, #0
    8c7a:	2301      	movs	r3, #1
    8c7c:	4013      	ands	r3, r2
    8c7e:	b2db      	uxtb	r3, r3
    8c80:	2b00      	cmp	r3, #0
    8c82:	d010      	beq.n	8ca6 <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
    8c84:	4b1b      	ldr	r3, [pc, #108]	; (8cf4 <Water_Level_Task+0x254>)
    8c86:	781b      	ldrb	r3, [r3, #0]
    8c88:	3301      	adds	r3, #1
    8c8a:	b2da      	uxtb	r2, r3
    8c8c:	4b19      	ldr	r3, [pc, #100]	; (8cf4 <Water_Level_Task+0x254>)
    8c8e:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
    8c90:	4b18      	ldr	r3, [pc, #96]	; (8cf4 <Water_Level_Task+0x254>)
    8c92:	781b      	ldrb	r3, [r3, #0]
    8c94:	2b09      	cmp	r3, #9
    8c96:	d909      	bls.n	8cac <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
    8c98:	4b1f      	ldr	r3, [pc, #124]	; (8d18 <Water_Level_Task+0x278>)
    8c9a:	4798      	blx	r3
					result=true;
    8c9c:	230c      	movs	r3, #12
    8c9e:	18fb      	adds	r3, r7, r3
    8ca0:	2201      	movs	r2, #1
    8ca2:	701a      	strb	r2, [r3, #0]
    8ca4:	e002      	b.n	8cac <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
    8ca6:	4b13      	ldr	r3, [pc, #76]	; (8cf4 <Water_Level_Task+0x254>)
    8ca8:	2200      	movs	r2, #0
    8caa:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
    8cac:	4b0e      	ldr	r3, [pc, #56]	; (8ce8 <Water_Level_Task+0x248>)
    8cae:	220b      	movs	r2, #11
    8cb0:	18ba      	adds	r2, r7, r2
    8cb2:	7812      	ldrb	r2, [r2, #0]
    8cb4:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
    8cb6:	4b10      	ldr	r3, [pc, #64]	; (8cf8 <Water_Level_Task+0x258>)
    8cb8:	791b      	ldrb	r3, [r3, #4]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d009      	beq.n	8cd2 <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
    8cbe:	4b0c      	ldr	r3, [pc, #48]	; (8cf0 <Water_Level_Task+0x250>)
    8cc0:	220d      	movs	r2, #13
    8cc2:	18ba      	adds	r2, r7, r2
    8cc4:	7812      	ldrb	r2, [r2, #0]
    8cc6:	701a      	strb	r2, [r3, #0]
    8cc8:	e003      	b.n	8cd2 <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
    8cca:	4b14      	ldr	r3, [pc, #80]	; (8d1c <Water_Level_Task+0x27c>)
    8ccc:	0018      	movs	r0, r3
    8cce:	4b14      	ldr	r3, [pc, #80]	; (8d20 <Water_Level_Task+0x280>)
    8cd0:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
    8cd2:	2064      	movs	r0, #100	; 0x64
    8cd4:	4b12      	ldr	r3, [pc, #72]	; (8d20 <Water_Level_Task+0x280>)
    8cd6:	4798      	blx	r3
	{
    8cd8:	e77a      	b.n	8bd0 <Water_Level_Task+0x130>
    8cda:	46c0      	nop			; (mov r8, r8)
    8cdc:	000085b1 	.word	0x000085b1
    8ce0:	00011ac9 	.word	0x00011ac9
    8ce4:	200007fc 	.word	0x200007fc
    8ce8:	20000735 	.word	0x20000735
    8cec:	20000754 	.word	0x20000754
    8cf0:	20000726 	.word	0x20000726
    8cf4:	20000750 	.word	0x20000750
    8cf8:	20000618 	.word	0x20000618
    8cfc:	200006ec 	.word	0x200006ec
    8d00:	2000079c 	.word	0x2000079c
    8d04:	20000774 	.word	0x20000774
    8d08:	20000704 	.word	0x20000704
    8d0c:	2000064c 	.word	0x2000064c
    8d10:	000089ad 	.word	0x000089ad
    8d14:	0000887d 	.word	0x0000887d
    8d18:	00008d25 	.word	0x00008d25
    8d1c:	00001388 	.word	0x00001388
    8d20:	0000ebf9 	.word	0x0000ebf9

00008d24 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
    8d24:	b580      	push	{r7, lr}
    8d26:	b082      	sub	sp, #8
    8d28:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
    8d2a:	1dfb      	adds	r3, r7, #7
    8d2c:	4abb      	ldr	r2, [pc, #748]	; (901c <operateOnWaterEvent+0x2f8>)
    8d2e:	7812      	ldrb	r2, [r2, #0]
    8d30:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
    8d32:	1dbb      	adds	r3, r7, #6
    8d34:	4aba      	ldr	r2, [pc, #744]	; (9020 <operateOnWaterEvent+0x2fc>)
    8d36:	7812      	ldrb	r2, [r2, #0]
    8d38:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
    8d3a:	4bba      	ldr	r3, [pc, #744]	; (9024 <operateOnWaterEvent+0x300>)
    8d3c:	781b      	ldrb	r3, [r3, #0]
    8d3e:	1dfa      	adds	r2, r7, #7
    8d40:	7812      	ldrb	r2, [r2, #0]
    8d42:	429a      	cmp	r2, r3
    8d44:	d10c      	bne.n	8d60 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    8d46:	4bb8      	ldr	r3, [pc, #736]	; (9028 <operateOnWaterEvent+0x304>)
    8d48:	791b      	ldrb	r3, [r3, #4]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d000      	beq.n	8d50 <operateOnWaterEvent+0x2c>
    8d4e:	e15e      	b.n	900e <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
    8d50:	4bb6      	ldr	r3, [pc, #728]	; (902c <operateOnWaterEvent+0x308>)
    8d52:	781b      	ldrb	r3, [r3, #0]
    8d54:	b2db      	uxtb	r3, r3
    8d56:	1dba      	adds	r2, r7, #6
    8d58:	7812      	ldrb	r2, [r2, #0]
    8d5a:	429a      	cmp	r2, r3
    8d5c:	d100      	bne.n	8d60 <operateOnWaterEvent+0x3c>
    8d5e:	e158      	b.n	9012 <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
    8d60:	4bb3      	ldr	r3, [pc, #716]	; (9030 <operateOnWaterEvent+0x30c>)
    8d62:	4798      	blx	r3
    8d64:	1e03      	subs	r3, r0, #0
    8d66:	d100      	bne.n	8d6a <operateOnWaterEvent+0x46>
    8d68:	e0c3      	b.n	8ef2 <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
    8d6a:	1dfb      	adds	r3, r7, #7
    8d6c:	781b      	ldrb	r3, [r3, #0]
    8d6e:	2b00      	cmp	r3, #0
    8d70:	d122      	bne.n	8db8 <operateOnWaterEvent+0x94>
    8d72:	4bac      	ldr	r3, [pc, #688]	; (9024 <operateOnWaterEvent+0x300>)
    8d74:	781b      	ldrb	r3, [r3, #0]
    8d76:	2b00      	cmp	r3, #0
    8d78:	d01e      	beq.n	8db8 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
    8d7a:	2200      	movs	r2, #0
    8d7c:	2101      	movs	r1, #1
    8d7e:	2000      	movs	r0, #0
    8d80:	4bac      	ldr	r3, [pc, #688]	; (9034 <operateOnWaterEvent+0x310>)
    8d82:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
    8d84:	2049      	movs	r0, #73	; 0x49
    8d86:	4bac      	ldr	r3, [pc, #688]	; (9038 <operateOnWaterEvent+0x314>)
    8d88:	4798      	blx	r3
    8d8a:	0003      	movs	r3, r0
    8d8c:	001a      	movs	r2, r3
    8d8e:	4bab      	ldr	r3, [pc, #684]	; (903c <operateOnWaterEvent+0x318>)
    8d90:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8d92:	4ba5      	ldr	r3, [pc, #660]	; (9028 <operateOnWaterEvent+0x304>)
    8d94:	78db      	ldrb	r3, [r3, #3]
    8d96:	2b00      	cmp	r3, #0
    8d98:	d100      	bne.n	8d9c <operateOnWaterEvent+0x78>
    8d9a:	e071      	b.n	8e80 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
    8d9c:	4ba8      	ldr	r3, [pc, #672]	; (9040 <operateOnWaterEvent+0x31c>)
    8d9e:	795b      	ldrb	r3, [r3, #5]
    8da0:	2b00      	cmp	r3, #0
    8da2:	d100      	bne.n	8da6 <operateOnWaterEvent+0x82>
    8da4:	e06c      	b.n	8e80 <operateOnWaterEvent+0x15c>
    8da6:	4b9f      	ldr	r3, [pc, #636]	; (9024 <operateOnWaterEvent+0x300>)
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	2b01      	cmp	r3, #1
    8dac:	d800      	bhi.n	8db0 <operateOnWaterEvent+0x8c>
    8dae:	e067      	b.n	8e80 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    8db0:	4ba4      	ldr	r3, [pc, #656]	; (9044 <operateOnWaterEvent+0x320>)
    8db2:	2201      	movs	r2, #1
    8db4:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8db6:	e063      	b.n	8e80 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
    8db8:	1dfb      	adds	r3, r7, #7
    8dba:	781b      	ldrb	r3, [r3, #0]
    8dbc:	2b03      	cmp	r3, #3
    8dbe:	d12f      	bne.n	8e20 <operateOnWaterEvent+0xfc>
    8dc0:	4b98      	ldr	r3, [pc, #608]	; (9024 <operateOnWaterEvent+0x300>)
    8dc2:	781b      	ldrb	r3, [r3, #0]
    8dc4:	2b02      	cmp	r3, #2
    8dc6:	d82b      	bhi.n	8e20 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8dc8:	4b97      	ldr	r3, [pc, #604]	; (9028 <operateOnWaterEvent+0x304>)
    8dca:	78db      	ldrb	r3, [r3, #3]
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d05a      	beq.n	8e86 <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
    8dd0:	4b9b      	ldr	r3, [pc, #620]	; (9040 <operateOnWaterEvent+0x31c>)
    8dd2:	795b      	ldrb	r3, [r3, #5]
    8dd4:	2b00      	cmp	r3, #0
    8dd6:	d003      	beq.n	8de0 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    8dd8:	4b9a      	ldr	r3, [pc, #616]	; (9044 <operateOnWaterEvent+0x320>)
    8dda:	2201      	movs	r2, #1
    8ddc:	705a      	strb	r2, [r3, #1]
    8dde:	e006      	b.n	8dee <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
    8de0:	2045      	movs	r0, #69	; 0x45
    8de2:	4b95      	ldr	r3, [pc, #596]	; (9038 <operateOnWaterEvent+0x314>)
    8de4:	4798      	blx	r3
    8de6:	0003      	movs	r3, r0
    8de8:	001a      	movs	r2, r3
    8dea:	4b94      	ldr	r3, [pc, #592]	; (903c <operateOnWaterEvent+0x318>)
    8dec:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
    8dee:	4b96      	ldr	r3, [pc, #600]	; (9048 <operateOnWaterEvent+0x324>)
    8df0:	7f9b      	ldrb	r3, [r3, #30]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d00c      	beq.n	8e10 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
    8df6:	2200      	movs	r2, #0
    8df8:	2101      	movs	r1, #1
    8dfa:	2000      	movs	r0, #0
    8dfc:	4b8d      	ldr	r3, [pc, #564]	; (9034 <operateOnWaterEvent+0x310>)
    8dfe:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
    8e00:	2048      	movs	r0, #72	; 0x48
    8e02:	4b8d      	ldr	r3, [pc, #564]	; (9038 <operateOnWaterEvent+0x314>)
    8e04:	4798      	blx	r3
    8e06:	0003      	movs	r3, r0
    8e08:	001a      	movs	r2, r3
    8e0a:	4b8c      	ldr	r3, [pc, #560]	; (903c <operateOnWaterEvent+0x318>)
    8e0c:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e0e:	e03a      	b.n	8e86 <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    8e10:	2045      	movs	r0, #69	; 0x45
    8e12:	4b89      	ldr	r3, [pc, #548]	; (9038 <operateOnWaterEvent+0x314>)
    8e14:	4798      	blx	r3
    8e16:	0003      	movs	r3, r0
    8e18:	001a      	movs	r2, r3
    8e1a:	4b88      	ldr	r3, [pc, #544]	; (903c <operateOnWaterEvent+0x318>)
    8e1c:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e1e:	e032      	b.n	8e86 <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
    8e20:	1dfb      	adds	r3, r7, #7
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	2b01      	cmp	r3, #1
    8e26:	d11b      	bne.n	8e60 <operateOnWaterEvent+0x13c>
    8e28:	4b7e      	ldr	r3, [pc, #504]	; (9024 <operateOnWaterEvent+0x300>)
    8e2a:	781b      	ldrb	r3, [r3, #0]
    8e2c:	2b01      	cmp	r3, #1
    8e2e:	d917      	bls.n	8e60 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e30:	4b7d      	ldr	r3, [pc, #500]	; (9028 <operateOnWaterEvent+0x304>)
    8e32:	78db      	ldrb	r3, [r3, #3]
    8e34:	2b00      	cmp	r3, #0
    8e36:	d007      	beq.n	8e48 <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
    8e38:	4b81      	ldr	r3, [pc, #516]	; (9040 <operateOnWaterEvent+0x31c>)
    8e3a:	795b      	ldrb	r3, [r3, #5]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d021      	beq.n	8e84 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    8e40:	4b80      	ldr	r3, [pc, #512]	; (9044 <operateOnWaterEvent+0x320>)
    8e42:	2201      	movs	r2, #1
    8e44:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e46:	e01d      	b.n	8e84 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
    8e48:	4b77      	ldr	r3, [pc, #476]	; (9028 <operateOnWaterEvent+0x304>)
    8e4a:	79db      	ldrb	r3, [r3, #7]
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d019      	beq.n	8e84 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
    8e50:	2044      	movs	r0, #68	; 0x44
    8e52:	4b79      	ldr	r3, [pc, #484]	; (9038 <operateOnWaterEvent+0x314>)
    8e54:	4798      	blx	r3
    8e56:	0003      	movs	r3, r0
    8e58:	001a      	movs	r2, r3
    8e5a:	4b78      	ldr	r3, [pc, #480]	; (903c <operateOnWaterEvent+0x318>)
    8e5c:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e5e:	e011      	b.n	8e84 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
    8e60:	1dfb      	adds	r3, r7, #7
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	2b02      	cmp	r3, #2
    8e66:	d10e      	bne.n	8e86 <operateOnWaterEvent+0x162>
    8e68:	4b6e      	ldr	r3, [pc, #440]	; (9024 <operateOnWaterEvent+0x300>)
    8e6a:	781b      	ldrb	r3, [r3, #0]
    8e6c:	2b01      	cmp	r3, #1
    8e6e:	d80a      	bhi.n	8e86 <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
    8e70:	205a      	movs	r0, #90	; 0x5a
    8e72:	4b71      	ldr	r3, [pc, #452]	; (9038 <operateOnWaterEvent+0x314>)
    8e74:	4798      	blx	r3
    8e76:	0003      	movs	r3, r0
    8e78:	001a      	movs	r2, r3
    8e7a:	4b70      	ldr	r3, [pc, #448]	; (903c <operateOnWaterEvent+0x318>)
    8e7c:	741a      	strb	r2, [r3, #16]
    8e7e:	e002      	b.n	8e86 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e80:	46c0      	nop			; (mov r8, r8)
    8e82:	e000      	b.n	8e86 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8e84:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    8e86:	4b68      	ldr	r3, [pc, #416]	; (9028 <operateOnWaterEvent+0x304>)
    8e88:	791b      	ldrb	r3, [r3, #4]
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d100      	bne.n	8e90 <operateOnWaterEvent+0x16c>
    8e8e:	e0af      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
    8e90:	4b66      	ldr	r3, [pc, #408]	; (902c <operateOnWaterEvent+0x308>)
    8e92:	781b      	ldrb	r3, [r3, #0]
    8e94:	b2db      	uxtb	r3, r3
    8e96:	1dba      	adds	r2, r7, #6
    8e98:	7812      	ldrb	r2, [r2, #0]
    8e9a:	429a      	cmp	r2, r3
    8e9c:	d100      	bne.n	8ea0 <operateOnWaterEvent+0x17c>
    8e9e:	e0a7      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
    8ea0:	1dbb      	adds	r3, r7, #6
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	2b02      	cmp	r3, #2
    8ea6:	d111      	bne.n	8ecc <operateOnWaterEvent+0x1a8>
    8ea8:	4b60      	ldr	r3, [pc, #384]	; (902c <operateOnWaterEvent+0x308>)
    8eaa:	781b      	ldrb	r3, [r3, #0]
    8eac:	b2db      	uxtb	r3, r3
    8eae:	2b01      	cmp	r3, #1
    8eb0:	d80c      	bhi.n	8ecc <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
    8eb2:	2200      	movs	r2, #0
    8eb4:	2101      	movs	r1, #1
    8eb6:	2000      	movs	r0, #0
    8eb8:	4b5e      	ldr	r3, [pc, #376]	; (9034 <operateOnWaterEvent+0x310>)
    8eba:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
    8ebc:	2056      	movs	r0, #86	; 0x56
    8ebe:	4b5e      	ldr	r3, [pc, #376]	; (9038 <operateOnWaterEvent+0x314>)
    8ec0:	4798      	blx	r3
    8ec2:	0003      	movs	r3, r0
    8ec4:	001a      	movs	r2, r3
    8ec6:	4b5d      	ldr	r3, [pc, #372]	; (903c <operateOnWaterEvent+0x318>)
    8ec8:	745a      	strb	r2, [r3, #17]
    8eca:	e091      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
    8ecc:	1dbb      	adds	r3, r7, #6
    8ece:	781b      	ldrb	r3, [r3, #0]
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d000      	beq.n	8ed6 <operateOnWaterEvent+0x1b2>
    8ed4:	e08c      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
    8ed6:	4b55      	ldr	r3, [pc, #340]	; (902c <operateOnWaterEvent+0x308>)
    8ed8:	781b      	ldrb	r3, [r3, #0]
    8eda:	b2db      	uxtb	r3, r3
    8edc:	2b00      	cmp	r3, #0
    8ede:	d100      	bne.n	8ee2 <operateOnWaterEvent+0x1be>
    8ee0:	e086      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
    8ee2:	2057      	movs	r0, #87	; 0x57
    8ee4:	4b54      	ldr	r3, [pc, #336]	; (9038 <operateOnWaterEvent+0x314>)
    8ee6:	4798      	blx	r3
    8ee8:	0003      	movs	r3, r0
    8eea:	001a      	movs	r2, r3
    8eec:	4b53      	ldr	r3, [pc, #332]	; (903c <operateOnWaterEvent+0x318>)
    8eee:	749a      	strb	r2, [r3, #18]
    8ef0:	e07e      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    8ef2:	4b4d      	ldr	r3, [pc, #308]	; (9028 <operateOnWaterEvent+0x304>)
    8ef4:	78db      	ldrb	r3, [r3, #3]
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	d027      	beq.n	8f4a <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
    8efa:	4b51      	ldr	r3, [pc, #324]	; (9040 <operateOnWaterEvent+0x31c>)
    8efc:	795b      	ldrb	r3, [r3, #5]
    8efe:	2b00      	cmp	r3, #0
    8f00:	d00b      	beq.n	8f1a <operateOnWaterEvent+0x1f6>
    8f02:	1dfb      	adds	r3, r7, #7
    8f04:	781b      	ldrb	r3, [r3, #0]
    8f06:	2b01      	cmp	r3, #1
    8f08:	d807      	bhi.n	8f1a <operateOnWaterEvent+0x1f6>
    8f0a:	4b46      	ldr	r3, [pc, #280]	; (9024 <operateOnWaterEvent+0x300>)
    8f0c:	781b      	ldrb	r3, [r3, #0]
    8f0e:	2b01      	cmp	r3, #1
    8f10:	d903      	bls.n	8f1a <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
    8f12:	4b4c      	ldr	r3, [pc, #304]	; (9044 <operateOnWaterEvent+0x320>)
    8f14:	2201      	movs	r2, #1
    8f16:	701a      	strb	r2, [r3, #0]
    8f18:	e04b      	b.n	8fb2 <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
    8f1a:	1dfb      	adds	r3, r7, #7
    8f1c:	781b      	ldrb	r3, [r3, #0]
    8f1e:	2b03      	cmp	r3, #3
    8f20:	d147      	bne.n	8fb2 <operateOnWaterEvent+0x28e>
    8f22:	4b40      	ldr	r3, [pc, #256]	; (9024 <operateOnWaterEvent+0x300>)
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	2b02      	cmp	r3, #2
    8f28:	d843      	bhi.n	8fb2 <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
    8f2a:	4b45      	ldr	r3, [pc, #276]	; (9040 <operateOnWaterEvent+0x31c>)
    8f2c:	795b      	ldrb	r3, [r3, #5]
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d003      	beq.n	8f3a <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    8f32:	4b44      	ldr	r3, [pc, #272]	; (9044 <operateOnWaterEvent+0x320>)
    8f34:	2201      	movs	r2, #1
    8f36:	705a      	strb	r2, [r3, #1]
    8f38:	e03b      	b.n	8fb2 <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    8f3a:	2045      	movs	r0, #69	; 0x45
    8f3c:	4b3e      	ldr	r3, [pc, #248]	; (9038 <operateOnWaterEvent+0x314>)
    8f3e:	4798      	blx	r3
    8f40:	0003      	movs	r3, r0
    8f42:	001a      	movs	r2, r3
    8f44:	4b3d      	ldr	r3, [pc, #244]	; (903c <operateOnWaterEvent+0x318>)
    8f46:	73da      	strb	r2, [r3, #15]
    8f48:	e033      	b.n	8fb2 <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
    8f4a:	1dfb      	adds	r3, r7, #7
    8f4c:	781b      	ldrb	r3, [r3, #0]
    8f4e:	2b03      	cmp	r3, #3
    8f50:	d10b      	bne.n	8f6a <operateOnWaterEvent+0x246>
    8f52:	4b34      	ldr	r3, [pc, #208]	; (9024 <operateOnWaterEvent+0x300>)
    8f54:	781b      	ldrb	r3, [r3, #0]
    8f56:	2b02      	cmp	r3, #2
    8f58:	d807      	bhi.n	8f6a <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    8f5a:	2045      	movs	r0, #69	; 0x45
    8f5c:	4b36      	ldr	r3, [pc, #216]	; (9038 <operateOnWaterEvent+0x314>)
    8f5e:	4798      	blx	r3
    8f60:	0003      	movs	r3, r0
    8f62:	001a      	movs	r2, r3
    8f64:	4b35      	ldr	r3, [pc, #212]	; (903c <operateOnWaterEvent+0x318>)
    8f66:	73da      	strb	r2, [r3, #15]
    8f68:	e023      	b.n	8fb2 <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
    8f6a:	1dfb      	adds	r3, r7, #7
    8f6c:	781b      	ldrb	r3, [r3, #0]
    8f6e:	2b02      	cmp	r3, #2
    8f70:	d11f      	bne.n	8fb2 <operateOnWaterEvent+0x28e>
    8f72:	4b2c      	ldr	r3, [pc, #176]	; (9024 <operateOnWaterEvent+0x300>)
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	2b01      	cmp	r3, #1
    8f78:	d81b      	bhi.n	8fb2 <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
    8f7a:	4b2b      	ldr	r3, [pc, #172]	; (9028 <operateOnWaterEvent+0x304>)
    8f7c:	791b      	ldrb	r3, [r3, #4]
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d00d      	beq.n	8f9e <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
    8f82:	4b29      	ldr	r3, [pc, #164]	; (9028 <operateOnWaterEvent+0x304>)
    8f84:	799b      	ldrb	r3, [r3, #6]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d009      	beq.n	8f9e <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
    8f8a:	1dbb      	adds	r3, r7, #6
    8f8c:	781b      	ldrb	r3, [r3, #0]
    8f8e:	2b01      	cmp	r3, #1
    8f90:	d805      	bhi.n	8f9e <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    8f92:	4b2d      	ldr	r3, [pc, #180]	; (9048 <operateOnWaterEvent+0x324>)
    8f94:	785b      	ldrb	r3, [r3, #1]
    8f96:	2b00      	cmp	r3, #0
    8f98:	d001      	beq.n	8f9e <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
    8f9a:	4b2c      	ldr	r3, [pc, #176]	; (904c <operateOnWaterEvent+0x328>)
    8f9c:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
    8f9e:	4b22      	ldr	r3, [pc, #136]	; (9028 <operateOnWaterEvent+0x304>)
    8fa0:	799b      	ldrb	r3, [r3, #6]
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d005      	beq.n	8fb2 <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    8fa6:	4b28      	ldr	r3, [pc, #160]	; (9048 <operateOnWaterEvent+0x324>)
    8fa8:	785b      	ldrb	r3, [r3, #1]
    8faa:	2b00      	cmp	r3, #0
    8fac:	d001      	beq.n	8fb2 <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
    8fae:	4b27      	ldr	r3, [pc, #156]	; (904c <operateOnWaterEvent+0x328>)
    8fb0:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    8fb2:	4b1d      	ldr	r3, [pc, #116]	; (9028 <operateOnWaterEvent+0x304>)
    8fb4:	791b      	ldrb	r3, [r3, #4]
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	d01a      	beq.n	8ff0 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
    8fba:	1dbb      	adds	r3, r7, #6
    8fbc:	781b      	ldrb	r3, [r3, #0]
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d116      	bne.n	8ff0 <operateOnWaterEvent+0x2cc>
    8fc2:	4b1a      	ldr	r3, [pc, #104]	; (902c <operateOnWaterEvent+0x308>)
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	b2db      	uxtb	r3, r3
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d011      	beq.n	8ff0 <operateOnWaterEvent+0x2cc>
    8fcc:	1dfb      	adds	r3, r7, #7
    8fce:	781b      	ldrb	r3, [r3, #0]
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d00d      	beq.n	8ff0 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
    8fd4:	4b1c      	ldr	r3, [pc, #112]	; (9048 <operateOnWaterEvent+0x324>)
    8fd6:	785b      	ldrb	r3, [r3, #1]
    8fd8:	2b00      	cmp	r3, #0
    8fda:	d002      	beq.n	8fe2 <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
    8fdc:	4b1b      	ldr	r3, [pc, #108]	; (904c <operateOnWaterEvent+0x328>)
    8fde:	4798      	blx	r3
    8fe0:	e006      	b.n	8ff0 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
    8fe2:	2057      	movs	r0, #87	; 0x57
    8fe4:	4b14      	ldr	r3, [pc, #80]	; (9038 <operateOnWaterEvent+0x314>)
    8fe6:	4798      	blx	r3
    8fe8:	0003      	movs	r3, r0
    8fea:	001a      	movs	r2, r3
    8fec:	4b13      	ldr	r3, [pc, #76]	; (903c <operateOnWaterEvent+0x318>)
    8fee:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
    8ff0:	4b0d      	ldr	r3, [pc, #52]	; (9028 <operateOnWaterEvent+0x304>)
    8ff2:	791b      	ldrb	r3, [r3, #4]
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d004      	beq.n	9002 <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
    8ff8:	1dbb      	adds	r3, r7, #6
    8ffa:	781b      	ldrb	r3, [r3, #0]
    8ffc:	0018      	movs	r0, r3
    8ffe:	4b14      	ldr	r3, [pc, #80]	; (9050 <operateOnWaterEvent+0x32c>)
    9000:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
    9002:	1dfb      	adds	r3, r7, #7
    9004:	781b      	ldrb	r3, [r3, #0]
    9006:	0018      	movs	r0, r3
    9008:	4b12      	ldr	r3, [pc, #72]	; (9054 <operateOnWaterEvent+0x330>)
    900a:	4798      	blx	r3
    900c:	e002      	b.n	9014 <operateOnWaterEvent+0x2f0>
			return;
    900e:	46c0      	nop			; (mov r8, r8)
    9010:	e000      	b.n	9014 <operateOnWaterEvent+0x2f0>
				return;
    9012:	46c0      	nop			; (mov r8, r8)
}
    9014:	46bd      	mov	sp, r7
    9016:	b002      	add	sp, #8
    9018:	bd80      	pop	{r7, pc}
    901a:	46c0      	nop			; (mov r8, r8)
    901c:	20000735 	.word	0x20000735
    9020:	20000726 	.word	0x20000726
    9024:	200007fc 	.word	0x200007fc
    9028:	20000618 	.word	0x20000618
    902c:	20000754 	.word	0x20000754
    9030:	00009c89 	.word	0x00009c89
    9034:	0000a4a9 	.word	0x0000a4a9
    9038:	00004615 	.word	0x00004615
    903c:	200006ec 	.word	0x200006ec
    9040:	20000544 	.word	0x20000544
    9044:	20000774 	.word	0x20000774
    9048:	2000064c 	.word	0x2000064c
    904c:	00009f2d 	.word	0x00009f2d
    9050:	0000885d 	.word	0x0000885d
    9054:	0000898d 	.word	0x0000898d

00009058 <Configure_ADC0>:

void Configure_ADC0(void)
{
    9058:	b580      	push	{r7, lr}
    905a:	b08c      	sub	sp, #48	; 0x30
    905c:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
    905e:	003b      	movs	r3, r7
    9060:	0018      	movs	r0, r3
    9062:	4b15      	ldr	r3, [pc, #84]	; (90b8 <Configure_ADC0+0x60>)
    9064:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
    9066:	003b      	movs	r3, r7
    9068:	2213      	movs	r2, #19
    906a:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    906c:	003b      	movs	r3, r7
    906e:	22c0      	movs	r2, #192	; 0xc0
    9070:	0152      	lsls	r2, r2, #5
    9072:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
    9074:	003b      	movs	r3, r7
    9076:	2203      	movs	r2, #3
    9078:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
    907a:	003b      	movs	r3, r7
    907c:	2203      	movs	r2, #3
    907e:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
    9080:	003b      	movs	r3, r7
    9082:	2200      	movs	r2, #0
    9084:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
    9086:	003b      	movs	r3, r7
    9088:	2200      	movs	r2, #0
    908a:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
    908c:	003b      	movs	r3, r7
    908e:	2280      	movs	r2, #128	; 0x80
    9090:	00d2      	lsls	r2, r2, #3
    9092:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
    9094:	003b      	movs	r3, r7
    9096:	2201      	movs	r2, #1
    9098:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
    909a:	003a      	movs	r2, r7
    909c:	4907      	ldr	r1, [pc, #28]	; (90bc <Configure_ADC0+0x64>)
    909e:	4b08      	ldr	r3, [pc, #32]	; (90c0 <Configure_ADC0+0x68>)
    90a0:	0018      	movs	r0, r3
    90a2:	4b08      	ldr	r3, [pc, #32]	; (90c4 <Configure_ADC0+0x6c>)
    90a4:	4798      	blx	r3
	adc_enable(&adc_inst);
    90a6:	4b06      	ldr	r3, [pc, #24]	; (90c0 <Configure_ADC0+0x68>)
    90a8:	0018      	movs	r0, r3
    90aa:	4b07      	ldr	r3, [pc, #28]	; (90c8 <Configure_ADC0+0x70>)
    90ac:	4798      	blx	r3
}
    90ae:	46c0      	nop			; (mov r8, r8)
    90b0:	46bd      	mov	sp, r7
    90b2:	b00c      	add	sp, #48	; 0x30
    90b4:	bd80      	pop	{r7, pc}
    90b6:	46c0      	nop			; (mov r8, r8)
    90b8:	0000bda1 	.word	0x0000bda1
    90bc:	42004000 	.word	0x42004000
    90c0:	200007c0 	.word	0x200007c0
    90c4:	0000c3f1 	.word	0x0000c3f1
    90c8:	00008419 	.word	0x00008419

000090cc <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
    90cc:	b580      	push	{r7, lr}
    90ce:	b084      	sub	sp, #16
    90d0:	af00      	add	r7, sp, #0
    90d2:	6078      	str	r0, [r7, #4]
    90d4:	000a      	movs	r2, r1
    90d6:	1cbb      	adds	r3, r7, #2
    90d8:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
    90da:	687b      	ldr	r3, [r7, #4]
    90dc:	b2da      	uxtb	r2, r3
    90de:	4b24      	ldr	r3, [pc, #144]	; (9170 <Read_ADC0+0xa4>)
    90e0:	0011      	movs	r1, r2
    90e2:	0018      	movs	r0, r3
    90e4:	4b23      	ldr	r3, [pc, #140]	; (9174 <Read_ADC0+0xa8>)
    90e6:	4798      	blx	r3
	uint16_t current_value = 0;
    90e8:	2308      	movs	r3, #8
    90ea:	18fb      	adds	r3, r7, r3
    90ec:	2200      	movs	r2, #0
    90ee:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
    90f0:	2300      	movs	r3, #0
    90f2:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    90f4:	230a      	movs	r3, #10
    90f6:	18fb      	adds	r3, r7, r3
    90f8:	2200      	movs	r2, #0
    90fa:	801a      	strh	r2, [r3, #0]
    90fc:	e026      	b.n	914c <Read_ADC0+0x80>
	{
		current_value = 0;
    90fe:	2308      	movs	r3, #8
    9100:	18fb      	adds	r3, r7, r3
    9102:	2200      	movs	r2, #0
    9104:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
    9106:	4b1a      	ldr	r3, [pc, #104]	; (9170 <Read_ADC0+0xa4>)
    9108:	0018      	movs	r0, r3
    910a:	4b1b      	ldr	r3, [pc, #108]	; (9178 <Read_ADC0+0xac>)
    910c:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
    910e:	46c0      	nop			; (mov r8, r8)
    9110:	4b17      	ldr	r3, [pc, #92]	; (9170 <Read_ADC0+0xa4>)
    9112:	0018      	movs	r0, r3
    9114:	4b19      	ldr	r3, [pc, #100]	; (917c <Read_ADC0+0xb0>)
    9116:	4798      	blx	r3
    9118:	0002      	movs	r2, r0
    911a:	2301      	movs	r3, #1
    911c:	4013      	ands	r3, r2
    911e:	2b01      	cmp	r3, #1
    9120:	d1f6      	bne.n	9110 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
    9122:	2308      	movs	r3, #8
    9124:	18fa      	adds	r2, r7, r3
    9126:	4b12      	ldr	r3, [pc, #72]	; (9170 <Read_ADC0+0xa4>)
    9128:	0011      	movs	r1, r2
    912a:	0018      	movs	r0, r3
    912c:	4b14      	ldr	r3, [pc, #80]	; (9180 <Read_ADC0+0xb4>)
    912e:	4798      	blx	r3
		total_value+=current_value;
    9130:	2308      	movs	r3, #8
    9132:	18fb      	adds	r3, r7, r3
    9134:	881b      	ldrh	r3, [r3, #0]
    9136:	001a      	movs	r2, r3
    9138:	68fb      	ldr	r3, [r7, #12]
    913a:	189b      	adds	r3, r3, r2
    913c:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    913e:	230a      	movs	r3, #10
    9140:	18fb      	adds	r3, r7, r3
    9142:	881a      	ldrh	r2, [r3, #0]
    9144:	230a      	movs	r3, #10
    9146:	18fb      	adds	r3, r7, r3
    9148:	3201      	adds	r2, #1
    914a:	801a      	strh	r2, [r3, #0]
    914c:	230a      	movs	r3, #10
    914e:	18fa      	adds	r2, r7, r3
    9150:	1cbb      	adds	r3, r7, #2
    9152:	8812      	ldrh	r2, [r2, #0]
    9154:	881b      	ldrh	r3, [r3, #0]
    9156:	429a      	cmp	r2, r3
    9158:	d3d1      	bcc.n	90fe <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
    915a:	1cbb      	adds	r3, r7, #2
    915c:	881a      	ldrh	r2, [r3, #0]
    915e:	4b09      	ldr	r3, [pc, #36]	; (9184 <Read_ADC0+0xb8>)
    9160:	0011      	movs	r1, r2
    9162:	68f8      	ldr	r0, [r7, #12]
    9164:	4798      	blx	r3
    9166:	0003      	movs	r3, r0
}
    9168:	0018      	movs	r0, r3
    916a:	46bd      	mov	sp, r7
    916c:	b004      	add	sp, #16
    916e:	bd80      	pop	{r7, pc}
    9170:	200007c0 	.word	0x200007c0
    9174:	0000853d 	.word	0x0000853d
    9178:	00008479 	.word	0x00008479
    917c:	00008371 	.word	0x00008371
    9180:	000084c1 	.word	0x000084c1
    9184:	00015041 	.word	0x00015041

00009188 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
    9188:	b5f0      	push	{r4, r5, r6, r7, lr}
    918a:	b093      	sub	sp, #76	; 0x4c
    918c:	af00      	add	r7, sp, #0
    918e:	61f8      	str	r0, [r7, #28]
    9190:	466b      	mov	r3, sp
    9192:	61bb      	str	r3, [r7, #24]
	adc_set_positive_input(&adc_inst, adc_pin);
    9194:	69fb      	ldr	r3, [r7, #28]
    9196:	b2da      	uxtb	r2, r3
    9198:	4b7b      	ldr	r3, [pc, #492]	; (9388 <Read_Voltage_ADC0+0x200>)
    919a:	0011      	movs	r1, r2
    919c:	0018      	movs	r0, r3
    919e:	4b7b      	ldr	r3, [pc, #492]	; (938c <Read_Voltage_ADC0+0x204>)
    91a0:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
    91a2:	2324      	movs	r3, #36	; 0x24
    91a4:	2218      	movs	r2, #24
    91a6:	4694      	mov	ip, r2
    91a8:	44bc      	add	ip, r7
    91aa:	4463      	add	r3, ip
    91ac:	2288      	movs	r2, #136	; 0x88
    91ae:	0092      	lsls	r2, r2, #2
    91b0:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
    91b2:	2324      	movs	r3, #36	; 0x24
    91b4:	2218      	movs	r2, #24
    91b6:	4694      	mov	ip, r2
    91b8:	44bc      	add	ip, r7
    91ba:	4463      	add	r3, ip
    91bc:	881b      	ldrh	r3, [r3, #0]
    91be:	001a      	movs	r2, r3
    91c0:	3a01      	subs	r2, #1
    91c2:	63ba      	str	r2, [r7, #56]	; 0x38
    91c4:	60bb      	str	r3, [r7, #8]
    91c6:	2200      	movs	r2, #0
    91c8:	60fa      	str	r2, [r7, #12]
    91ca:	68b8      	ldr	r0, [r7, #8]
    91cc:	68f9      	ldr	r1, [r7, #12]
    91ce:	0002      	movs	r2, r0
    91d0:	0f12      	lsrs	r2, r2, #28
    91d2:	000e      	movs	r6, r1
    91d4:	0136      	lsls	r6, r6, #4
    91d6:	617e      	str	r6, [r7, #20]
    91d8:	697e      	ldr	r6, [r7, #20]
    91da:	4316      	orrs	r6, r2
    91dc:	617e      	str	r6, [r7, #20]
    91de:	0002      	movs	r2, r0
    91e0:	0112      	lsls	r2, r2, #4
    91e2:	613a      	str	r2, [r7, #16]
    91e4:	603b      	str	r3, [r7, #0]
    91e6:	2200      	movs	r2, #0
    91e8:	607a      	str	r2, [r7, #4]
    91ea:	6838      	ldr	r0, [r7, #0]
    91ec:	6879      	ldr	r1, [r7, #4]
    91ee:	0002      	movs	r2, r0
    91f0:	0f12      	lsrs	r2, r2, #28
    91f2:	000e      	movs	r6, r1
    91f4:	0135      	lsls	r5, r6, #4
    91f6:	4315      	orrs	r5, r2
    91f8:	0002      	movs	r2, r0
    91fa:	0114      	lsls	r4, r2, #4
    91fc:	005b      	lsls	r3, r3, #1
    91fe:	3301      	adds	r3, #1
    9200:	3307      	adds	r3, #7
    9202:	08db      	lsrs	r3, r3, #3
    9204:	00db      	lsls	r3, r3, #3
    9206:	466a      	mov	r2, sp
    9208:	1ad3      	subs	r3, r2, r3
    920a:	469d      	mov	sp, r3
    920c:	466b      	mov	r3, sp
    920e:	3301      	adds	r3, #1
    9210:	085b      	lsrs	r3, r3, #1
    9212:	005b      	lsls	r3, r3, #1
    9214:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint16_t i=0;i<no_of_samples;i++)
    9216:	232e      	movs	r3, #46	; 0x2e
    9218:	2218      	movs	r2, #24
    921a:	4694      	mov	ip, r2
    921c:	44bc      	add	ip, r7
    921e:	4463      	add	r3, ip
    9220:	2200      	movs	r2, #0
    9222:	801a      	strh	r2, [r3, #0]
    9224:	e021      	b.n	926a <Read_Voltage_ADC0+0xe2>
	{
		adc_start_conversion(&adc_inst);
    9226:	4b58      	ldr	r3, [pc, #352]	; (9388 <Read_Voltage_ADC0+0x200>)
    9228:	0018      	movs	r0, r3
    922a:	4b59      	ldr	r3, [pc, #356]	; (9390 <Read_Voltage_ADC0+0x208>)
    922c:	4798      	blx	r3
		while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
    922e:	46c0      	nop			; (mov r8, r8)
    9230:	232e      	movs	r3, #46	; 0x2e
    9232:	2218      	movs	r2, #24
    9234:	4694      	mov	ip, r2
    9236:	44bc      	add	ip, r7
    9238:	4463      	add	r3, ip
    923a:	881b      	ldrh	r3, [r3, #0]
    923c:	005b      	lsls	r3, r3, #1
    923e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9240:	18d2      	adds	r2, r2, r3
    9242:	4b51      	ldr	r3, [pc, #324]	; (9388 <Read_Voltage_ADC0+0x200>)
    9244:	0011      	movs	r1, r2
    9246:	0018      	movs	r0, r3
    9248:	4b52      	ldr	r3, [pc, #328]	; (9394 <Read_Voltage_ADC0+0x20c>)
    924a:	4798      	blx	r3
    924c:	1e03      	subs	r3, r0, #0
    924e:	d1ef      	bne.n	9230 <Read_Voltage_ADC0+0xa8>
	for (uint16_t i=0;i<no_of_samples;i++)
    9250:	232e      	movs	r3, #46	; 0x2e
    9252:	2218      	movs	r2, #24
    9254:	4694      	mov	ip, r2
    9256:	44bc      	add	ip, r7
    9258:	4463      	add	r3, ip
    925a:	881a      	ldrh	r2, [r3, #0]
    925c:	232e      	movs	r3, #46	; 0x2e
    925e:	2118      	movs	r1, #24
    9260:	468c      	mov	ip, r1
    9262:	44bc      	add	ip, r7
    9264:	4463      	add	r3, ip
    9266:	3201      	adds	r2, #1
    9268:	801a      	strh	r2, [r3, #0]
    926a:	232e      	movs	r3, #46	; 0x2e
    926c:	2218      	movs	r2, #24
    926e:	18ba      	adds	r2, r7, r2
    9270:	18d2      	adds	r2, r2, r3
    9272:	2324      	movs	r3, #36	; 0x24
    9274:	2118      	movs	r1, #24
    9276:	468c      	mov	ip, r1
    9278:	44bc      	add	ip, r7
    927a:	4463      	add	r3, ip
    927c:	8812      	ldrh	r2, [r2, #0]
    927e:	881b      	ldrh	r3, [r3, #0]
    9280:	429a      	cmp	r2, r3
    9282:	d3d0      	bcc.n	9226 <Read_Voltage_ADC0+0x9e>
		}
	}
	
	uint32_t square = 0;
    9284:	2300      	movs	r3, #0
    9286:	643b      	str	r3, [r7, #64]	; 0x40
	
	double  mean = 0.0;
    9288:	2300      	movs	r3, #0
    928a:	2400      	movs	r4, #0
    928c:	62bb      	str	r3, [r7, #40]	; 0x28
    928e:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	double  root = 0.0;
    9290:	2300      	movs	r3, #0
    9292:	2400      	movs	r4, #0
    9294:	623b      	str	r3, [r7, #32]
    9296:	627c      	str	r4, [r7, #36]	; 0x24
	
	for (uint16_t i = 0; i < no_of_samples; i++) 
    9298:	2326      	movs	r3, #38	; 0x26
    929a:	2218      	movs	r2, #24
    929c:	4694      	mov	ip, r2
    929e:	44bc      	add	ip, r7
    92a0:	4463      	add	r3, ip
    92a2:	2200      	movs	r2, #0
    92a4:	801a      	strh	r2, [r3, #0]
    92a6:	e032      	b.n	930e <Read_Voltage_ADC0+0x186>
	{
		square += pow(samples_buffer[i], 2);
    92a8:	2326      	movs	r3, #38	; 0x26
    92aa:	2218      	movs	r2, #24
    92ac:	4694      	mov	ip, r2
    92ae:	44bc      	add	ip, r7
    92b0:	4463      	add	r3, ip
    92b2:	881a      	ldrh	r2, [r3, #0]
    92b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92b6:	0052      	lsls	r2, r2, #1
    92b8:	5ad2      	ldrh	r2, [r2, r3]
    92ba:	4b37      	ldr	r3, [pc, #220]	; (9398 <Read_Voltage_ADC0+0x210>)
    92bc:	0010      	movs	r0, r2
    92be:	4798      	blx	r3
    92c0:	2300      	movs	r3, #0
    92c2:	2480      	movs	r4, #128	; 0x80
    92c4:	05e4      	lsls	r4, r4, #23
    92c6:	001a      	movs	r2, r3
    92c8:	0023      	movs	r3, r4
    92ca:	4c34      	ldr	r4, [pc, #208]	; (939c <Read_Voltage_ADC0+0x214>)
    92cc:	47a0      	blx	r4
    92ce:	0005      	movs	r5, r0
    92d0:	000e      	movs	r6, r1
    92d2:	4b31      	ldr	r3, [pc, #196]	; (9398 <Read_Voltage_ADC0+0x210>)
    92d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
    92d6:	4798      	blx	r3
    92d8:	4c31      	ldr	r4, [pc, #196]	; (93a0 <Read_Voltage_ADC0+0x218>)
    92da:	002a      	movs	r2, r5
    92dc:	0033      	movs	r3, r6
    92de:	47a0      	blx	r4
    92e0:	0003      	movs	r3, r0
    92e2:	000c      	movs	r4, r1
    92e4:	0019      	movs	r1, r3
    92e6:	0022      	movs	r2, r4
    92e8:	4b2e      	ldr	r3, [pc, #184]	; (93a4 <Read_Voltage_ADC0+0x21c>)
    92ea:	0008      	movs	r0, r1
    92ec:	0011      	movs	r1, r2
    92ee:	4798      	blx	r3
    92f0:	0003      	movs	r3, r0
    92f2:	643b      	str	r3, [r7, #64]	; 0x40
	for (uint16_t i = 0; i < no_of_samples; i++) 
    92f4:	2326      	movs	r3, #38	; 0x26
    92f6:	2218      	movs	r2, #24
    92f8:	4694      	mov	ip, r2
    92fa:	44bc      	add	ip, r7
    92fc:	4463      	add	r3, ip
    92fe:	881a      	ldrh	r2, [r3, #0]
    9300:	2326      	movs	r3, #38	; 0x26
    9302:	2118      	movs	r1, #24
    9304:	468c      	mov	ip, r1
    9306:	44bc      	add	ip, r7
    9308:	4463      	add	r3, ip
    930a:	3201      	adds	r2, #1
    930c:	801a      	strh	r2, [r3, #0]
    930e:	2326      	movs	r3, #38	; 0x26
    9310:	2218      	movs	r2, #24
    9312:	18ba      	adds	r2, r7, r2
    9314:	18d2      	adds	r2, r2, r3
    9316:	2324      	movs	r3, #36	; 0x24
    9318:	2118      	movs	r1, #24
    931a:	468c      	mov	ip, r1
    931c:	44bc      	add	ip, r7
    931e:	4463      	add	r3, ip
    9320:	8812      	ldrh	r2, [r2, #0]
    9322:	881b      	ldrh	r3, [r3, #0]
    9324:	429a      	cmp	r2, r3
    9326:	d3bf      	bcc.n	92a8 <Read_Voltage_ADC0+0x120>
	}
	
	mean = (square / (float)(no_of_samples)); 
    9328:	4b1f      	ldr	r3, [pc, #124]	; (93a8 <Read_Voltage_ADC0+0x220>)
    932a:	6c38      	ldr	r0, [r7, #64]	; 0x40
    932c:	4798      	blx	r3
    932e:	1c04      	adds	r4, r0, #0
    9330:	2324      	movs	r3, #36	; 0x24
    9332:	2218      	movs	r2, #24
    9334:	4694      	mov	ip, r2
    9336:	44bc      	add	ip, r7
    9338:	4463      	add	r3, ip
    933a:	881a      	ldrh	r2, [r3, #0]
    933c:	4b1a      	ldr	r3, [pc, #104]	; (93a8 <Read_Voltage_ADC0+0x220>)
    933e:	0010      	movs	r0, r2
    9340:	4798      	blx	r3
    9342:	1c02      	adds	r2, r0, #0
    9344:	4b19      	ldr	r3, [pc, #100]	; (93ac <Read_Voltage_ADC0+0x224>)
    9346:	1c11      	adds	r1, r2, #0
    9348:	1c20      	adds	r0, r4, #0
    934a:	4798      	blx	r3
    934c:	1c03      	adds	r3, r0, #0
    934e:	1c1a      	adds	r2, r3, #0
    9350:	4b17      	ldr	r3, [pc, #92]	; (93b0 <Read_Voltage_ADC0+0x228>)
    9352:	1c10      	adds	r0, r2, #0
    9354:	4798      	blx	r3
    9356:	0003      	movs	r3, r0
    9358:	000c      	movs	r4, r1
    935a:	62bb      	str	r3, [r7, #40]	; 0x28
    935c:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	 // Calculate Root.
	 root = sqrt(mean);
    935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9360:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    9362:	0018      	movs	r0, r3
    9364:	0021      	movs	r1, r4
    9366:	4b13      	ldr	r3, [pc, #76]	; (93b4 <Read_Voltage_ADC0+0x22c>)
    9368:	4798      	blx	r3
    936a:	0003      	movs	r3, r0
    936c:	000c      	movs	r4, r1
    936e:	623b      	str	r3, [r7, #32]
    9370:	627c      	str	r4, [r7, #36]	; 0x24
	 
	 return (uint32_t)root;
    9372:	4b0c      	ldr	r3, [pc, #48]	; (93a4 <Read_Voltage_ADC0+0x21c>)
    9374:	6a38      	ldr	r0, [r7, #32]
    9376:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9378:	4798      	blx	r3
    937a:	0003      	movs	r3, r0
    937c:	69ba      	ldr	r2, [r7, #24]
    937e:	4695      	mov	sp, r2
			//}
		//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
    9380:	0018      	movs	r0, r3
    9382:	46bd      	mov	sp, r7
    9384:	b013      	add	sp, #76	; 0x4c
    9386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9388:	200007c0 	.word	0x200007c0
    938c:	0000853d 	.word	0x0000853d
    9390:	00008479 	.word	0x00008479
    9394:	000084c1 	.word	0x000084c1
    9398:	00017635 	.word	0x00017635
    939c:	00013dad 	.word	0x00013dad
    93a0:	00015b55 	.word	0x00015b55
    93a4:	0001543d 	.word	0x0001543d
    93a8:	00015ac9 	.word	0x00015ac9
    93ac:	000155f9 	.word	0x000155f9
    93b0:	000176a5 	.word	0x000176a5
    93b4:	00014105 	.word	0x00014105

000093b8 <autoSetCurrent>:

void autoSetCurrent(void)
{
    93b8:	b580      	push	{r7, lr}
    93ba:	b084      	sub	sp, #16
    93bc:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
    93be:	4b2e      	ldr	r3, [pc, #184]	; (9478 <autoSetCurrent+0xc0>)
    93c0:	4798      	blx	r3
    93c2:	1e03      	subs	r3, r0, #0
    93c4:	d04e      	beq.n	9464 <autoSetCurrent+0xac>
    93c6:	4b2d      	ldr	r3, [pc, #180]	; (947c <autoSetCurrent+0xc4>)
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	2201      	movs	r2, #1
    93cc:	4053      	eors	r3, r2
    93ce:	b2db      	uxtb	r3, r3
    93d0:	2b00      	cmp	r3, #0
    93d2:	d047      	beq.n	9464 <autoSetCurrent+0xac>
    93d4:	4b2a      	ldr	r3, [pc, #168]	; (9480 <autoSetCurrent+0xc8>)
    93d6:	781b      	ldrb	r3, [r3, #0]
    93d8:	2201      	movs	r2, #1
    93da:	4053      	eors	r3, r2
    93dc:	b2db      	uxtb	r3, r3
    93de:	2b00      	cmp	r3, #0
    93e0:	d040      	beq.n	9464 <autoSetCurrent+0xac>
    93e2:	4b28      	ldr	r3, [pc, #160]	; (9484 <autoSetCurrent+0xcc>)
    93e4:	781b      	ldrb	r3, [r3, #0]
    93e6:	2201      	movs	r2, #1
    93e8:	4053      	eors	r3, r2
    93ea:	b2db      	uxtb	r3, r3
    93ec:	2b00      	cmp	r3, #0
    93ee:	d039      	beq.n	9464 <autoSetCurrent+0xac>
    93f0:	4b25      	ldr	r3, [pc, #148]	; (9488 <autoSetCurrent+0xd0>)
    93f2:	4798      	blx	r3
    93f4:	1e03      	subs	r3, r0, #0
    93f6:	d035      	beq.n	9464 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    93f8:	4b24      	ldr	r3, [pc, #144]	; (948c <autoSetCurrent+0xd4>)
    93fa:	691b      	ldr	r3, [r3, #16]
    93fc:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
    93fe:	68fb      	ldr	r3, [r7, #12]
    9400:	2bf9      	cmp	r3, #249	; 0xf9
    9402:	d806      	bhi.n	9412 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
    9404:	2000      	movs	r0, #0
    9406:	4b22      	ldr	r3, [pc, #136]	; (9490 <autoSetCurrent+0xd8>)
    9408:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
    940a:	2059      	movs	r0, #89	; 0x59
    940c:	4b21      	ldr	r3, [pc, #132]	; (9494 <autoSetCurrent+0xdc>)
    940e:	4798      	blx	r3
			return;
    9410:	e02e      	b.n	9470 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
    9412:	4b21      	ldr	r3, [pc, #132]	; (9498 <autoSetCurrent+0xe0>)
    9414:	7f1b      	ldrb	r3, [r3, #28]
    9416:	001a      	movs	r2, r3
    9418:	68fb      	ldr	r3, [r7, #12]
    941a:	435a      	muls	r2, r3
    941c:	4b1f      	ldr	r3, [pc, #124]	; (949c <autoSetCurrent+0xe4>)
    941e:	2164      	movs	r1, #100	; 0x64
    9420:	0010      	movs	r0, r2
    9422:	4798      	blx	r3
    9424:	0003      	movs	r3, r0
    9426:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
    9428:	4b1b      	ldr	r3, [pc, #108]	; (9498 <autoSetCurrent+0xe0>)
    942a:	7f5b      	ldrb	r3, [r3, #29]
    942c:	001a      	movs	r2, r3
    942e:	68fb      	ldr	r3, [r7, #12]
    9430:	435a      	muls	r2, r3
    9432:	4b1a      	ldr	r3, [pc, #104]	; (949c <autoSetCurrent+0xe4>)
    9434:	2164      	movs	r1, #100	; 0x64
    9436:	0010      	movs	r0, r2
    9438:	4798      	blx	r3
    943a:	0003      	movs	r3, r0
    943c:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
    943e:	68fb      	ldr	r3, [r7, #12]
    9440:	0018      	movs	r0, r3
    9442:	4b17      	ldr	r3, [pc, #92]	; (94a0 <autoSetCurrent+0xe8>)
    9444:	4798      	blx	r3
		setUnderloadValue(tempUnder);
    9446:	68bb      	ldr	r3, [r7, #8]
    9448:	0018      	movs	r0, r3
    944a:	4b16      	ldr	r3, [pc, #88]	; (94a4 <autoSetCurrent+0xec>)
    944c:	4798      	blx	r3
		setOverloadValue(tempOver);
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	0018      	movs	r0, r3
    9452:	4b15      	ldr	r3, [pc, #84]	; (94a8 <autoSetCurrent+0xf0>)
    9454:	4798      	blx	r3
		setCurrentDetection(true);
    9456:	2001      	movs	r0, #1
    9458:	4b0d      	ldr	r3, [pc, #52]	; (9490 <autoSetCurrent+0xd8>)
    945a:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
    945c:	204b      	movs	r0, #75	; 0x4b
    945e:	4b0d      	ldr	r3, [pc, #52]	; (9494 <autoSetCurrent+0xdc>)
    9460:	4798      	blx	r3
	{
    9462:	e005      	b.n	9470 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
    9464:	2000      	movs	r0, #0
    9466:	4b0a      	ldr	r3, [pc, #40]	; (9490 <autoSetCurrent+0xd8>)
    9468:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
    946a:	2059      	movs	r0, #89	; 0x59
    946c:	4b09      	ldr	r3, [pc, #36]	; (9494 <autoSetCurrent+0xdc>)
    946e:	4798      	blx	r3
	}
}
    9470:	46bd      	mov	sp, r7
    9472:	b004      	add	sp, #16
    9474:	bd80      	pop	{r7, pc}
    9476:	46c0      	nop			; (mov r8, r8)
    9478:	00009c89 	.word	0x00009c89
    947c:	2000075d 	.word	0x2000075d
    9480:	2000075f 	.word	0x2000075f
    9484:	2000074d 	.word	0x2000074d
    9488:	00009c21 	.word	0x00009c21
    948c:	200006c8 	.word	0x200006c8
    9490:	00001859 	.word	0x00001859
    9494:	000047ed 	.word	0x000047ed
    9498:	2000064c 	.word	0x2000064c
    949c:	00015041 	.word	0x00015041
    94a0:	00001815 	.word	0x00001815
    94a4:	0000178d 	.word	0x0000178d
    94a8:	000017d1 	.word	0x000017d1

000094ac <speakAmpere>:

void speakAmpere(void)
{
    94ac:	b580      	push	{r7, lr}
    94ae:	b084      	sub	sp, #16
    94b0:	af00      	add	r7, sp, #0
	if(getMotorState())
    94b2:	4b0d      	ldr	r3, [pc, #52]	; (94e8 <speakAmpere+0x3c>)
    94b4:	4798      	blx	r3
    94b6:	1e03      	subs	r3, r0, #0
    94b8:	d00f      	beq.n	94da <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    94ba:	4b0c      	ldr	r3, [pc, #48]	; (94ec <speakAmpere+0x40>)
    94bc:	8a9b      	ldrh	r3, [r3, #20]
    94be:	b29b      	uxth	r3, r3
    94c0:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
    94c2:	1d39      	adds	r1, r7, #4
    94c4:	68fb      	ldr	r3, [r7, #12]
    94c6:	220a      	movs	r2, #10
    94c8:	0018      	movs	r0, r3
    94ca:	4b09      	ldr	r3, [pc, #36]	; (94f0 <speakAmpere+0x44>)
    94cc:	4798      	blx	r3
		playRepeatedFiles(cTemp);
    94ce:	1d3b      	adds	r3, r7, #4
    94d0:	0018      	movs	r0, r3
    94d2:	4b08      	ldr	r3, [pc, #32]	; (94f4 <speakAmpere+0x48>)
    94d4:	4798      	blx	r3
		return;
    94d6:	46c0      	nop			; (mov r8, r8)
    94d8:	e002      	b.n	94e0 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
    94da:	202d      	movs	r0, #45	; 0x2d
    94dc:	4b06      	ldr	r3, [pc, #24]	; (94f8 <speakAmpere+0x4c>)
    94de:	4798      	blx	r3
}
    94e0:	46bd      	mov	sp, r7
    94e2:	b004      	add	sp, #16
    94e4:	bd80      	pop	{r7, pc}
    94e6:	46c0      	nop			; (mov r8, r8)
    94e8:	00009c89 	.word	0x00009c89
    94ec:	200006c8 	.word	0x200006c8
    94f0:	00017dfd 	.word	0x00017dfd
    94f4:	000044e1 	.word	0x000044e1
    94f8:	000047ed 	.word	0x000047ed

000094fc <PR2_ISR>:

void PR2_ISR(void)
{
    94fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    94fe:	b08b      	sub	sp, #44	; 0x2c
    9500:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
    9502:	4b77      	ldr	r3, [pc, #476]	; (96e0 <PR2_ISR+0x1e4>)
    9504:	781b      	ldrb	r3, [r3, #0]
    9506:	b2db      	uxtb	r3, r3
    9508:	2b01      	cmp	r3, #1
    950a:	d000      	beq.n	950e <PR2_ISR+0x12>
    950c:	e0e3      	b.n	96d6 <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
    950e:	4b75      	ldr	r3, [pc, #468]	; (96e4 <PR2_ISR+0x1e8>)
    9510:	2200      	movs	r2, #0
    9512:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
    9514:	2000      	movs	r0, #0
    9516:	4b74      	ldr	r3, [pc, #464]	; (96e8 <PR2_ISR+0x1ec>)
    9518:	4798      	blx	r3
    951a:	0003      	movs	r3, r0
    951c:	60bb      	str	r3, [r7, #8]
    951e:	2300      	movs	r3, #0
    9520:	60fb      	str	r3, [r7, #12]
    9522:	68bb      	ldr	r3, [r7, #8]
    9524:	68fc      	ldr	r4, [r7, #12]
    9526:	0f9a      	lsrs	r2, r3, #30
    9528:	00a0      	lsls	r0, r4, #2
    952a:	61f8      	str	r0, [r7, #28]
    952c:	69f8      	ldr	r0, [r7, #28]
    952e:	4310      	orrs	r0, r2
    9530:	61f8      	str	r0, [r7, #28]
    9532:	009b      	lsls	r3, r3, #2
    9534:	61bb      	str	r3, [r7, #24]
    9536:	69bb      	ldr	r3, [r7, #24]
    9538:	69fc      	ldr	r4, [r7, #28]
    953a:	68b9      	ldr	r1, [r7, #8]
    953c:	68fa      	ldr	r2, [r7, #12]
    953e:	185b      	adds	r3, r3, r1
    9540:	4154      	adcs	r4, r2
    9542:	496a      	ldr	r1, [pc, #424]	; (96ec <PR2_ISR+0x1f0>)
    9544:	2200      	movs	r2, #0
    9546:	185b      	adds	r3, r3, r1
    9548:	4154      	adcs	r4, r2
    954a:	0018      	movs	r0, r3
    954c:	0021      	movs	r1, r4
    954e:	4c68      	ldr	r4, [pc, #416]	; (96f0 <PR2_ISR+0x1f4>)
    9550:	4a68      	ldr	r2, [pc, #416]	; (96f4 <PR2_ISR+0x1f8>)
    9552:	2300      	movs	r3, #0
    9554:	47a0      	blx	r4
    9556:	0003      	movs	r3, r0
    9558:	000c      	movs	r4, r1
    955a:	0018      	movs	r0, r3
    955c:	4b66      	ldr	r3, [pc, #408]	; (96f8 <PR2_ISR+0x1fc>)
    955e:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
    9560:	2323      	movs	r3, #35	; 0x23
    9562:	18fb      	adds	r3, r7, r3
    9564:	2200      	movs	r2, #0
    9566:	701a      	strb	r2, [r3, #0]
    9568:	2322      	movs	r3, #34	; 0x22
    956a:	18fb      	adds	r3, r7, r3
    956c:	2200      	movs	r2, #0
    956e:	701a      	strb	r2, [r3, #0]
    9570:	2321      	movs	r3, #33	; 0x21
    9572:	18fb      	adds	r3, r7, r3
    9574:	2200      	movs	r2, #0
    9576:	701a      	strb	r2, [r3, #0]
    9578:	2320      	movs	r3, #32
    957a:	18fb      	adds	r3, r7, r3
    957c:	2200      	movs	r2, #0
    957e:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
    9580:	202b      	movs	r0, #43	; 0x2b
    9582:	4b5e      	ldr	r3, [pc, #376]	; (96fc <PR2_ISR+0x200>)
    9584:	4798      	blx	r3
    9586:	1e03      	subs	r3, r0, #0
    9588:	d100      	bne.n	958c <PR2_ISR+0x90>
    958a:	e08e      	b.n	96aa <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    958c:	2300      	movs	r3, #0
    958e:	627b      	str	r3, [r7, #36]	; 0x24
    9590:	e085      	b.n	969e <PR2_ISR+0x1a2>
			{
				delay_us(25);
    9592:	2000      	movs	r0, #0
    9594:	4b54      	ldr	r3, [pc, #336]	; (96e8 <PR2_ISR+0x1ec>)
    9596:	4798      	blx	r3
    9598:	0003      	movs	r3, r0
    959a:	603b      	str	r3, [r7, #0]
    959c:	2300      	movs	r3, #0
    959e:	607b      	str	r3, [r7, #4]
    95a0:	6838      	ldr	r0, [r7, #0]
    95a2:	6879      	ldr	r1, [r7, #4]
    95a4:	0003      	movs	r3, r0
    95a6:	000c      	movs	r4, r1
    95a8:	0f9a      	lsrs	r2, r3, #30
    95aa:	00a6      	lsls	r6, r4, #2
    95ac:	4316      	orrs	r6, r2
    95ae:	009d      	lsls	r5, r3, #2
    95b0:	0003      	movs	r3, r0
    95b2:	000c      	movs	r4, r1
    95b4:	195b      	adds	r3, r3, r5
    95b6:	4174      	adcs	r4, r6
    95b8:	0f9a      	lsrs	r2, r3, #30
    95ba:	00a1      	lsls	r1, r4, #2
    95bc:	6179      	str	r1, [r7, #20]
    95be:	6979      	ldr	r1, [r7, #20]
    95c0:	4311      	orrs	r1, r2
    95c2:	6179      	str	r1, [r7, #20]
    95c4:	009a      	lsls	r2, r3, #2
    95c6:	613a      	str	r2, [r7, #16]
    95c8:	6939      	ldr	r1, [r7, #16]
    95ca:	697a      	ldr	r2, [r7, #20]
    95cc:	185b      	adds	r3, r3, r1
    95ce:	4154      	adcs	r4, r2
    95d0:	494b      	ldr	r1, [pc, #300]	; (9700 <PR2_ISR+0x204>)
    95d2:	2200      	movs	r2, #0
    95d4:	185b      	adds	r3, r3, r1
    95d6:	4154      	adcs	r4, r2
    95d8:	0018      	movs	r0, r3
    95da:	0021      	movs	r1, r4
    95dc:	4c44      	ldr	r4, [pc, #272]	; (96f0 <PR2_ISR+0x1f4>)
    95de:	4a49      	ldr	r2, [pc, #292]	; (9704 <PR2_ISR+0x208>)
    95e0:	2300      	movs	r3, #0
    95e2:	47a0      	blx	r4
    95e4:	0003      	movs	r3, r0
    95e6:	000c      	movs	r4, r1
    95e8:	0018      	movs	r0, r3
    95ea:	4b43      	ldr	r3, [pc, #268]	; (96f8 <PR2_ISR+0x1fc>)
    95ec:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
    95ee:	202a      	movs	r0, #42	; 0x2a
    95f0:	4b42      	ldr	r3, [pc, #264]	; (96fc <PR2_ISR+0x200>)
    95f2:	4798      	blx	r3
    95f4:	1e03      	subs	r3, r0, #0
    95f6:	d014      	beq.n	9622 <PR2_ISR+0x126>
    95f8:	2323      	movs	r3, #35	; 0x23
    95fa:	18fb      	adds	r3, r7, r3
    95fc:	781b      	ldrb	r3, [r3, #0]
    95fe:	b2db      	uxtb	r3, r3
    9600:	2b00      	cmp	r3, #0
    9602:	d10e      	bne.n	9622 <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
    9604:	2323      	movs	r3, #35	; 0x23
    9606:	18fb      	adds	r3, r7, r3
    9608:	2201      	movs	r2, #1
    960a:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
    960c:	2322      	movs	r3, #34	; 0x22
    960e:	18fb      	adds	r3, r7, r3
    9610:	781b      	ldrb	r3, [r3, #0]
    9612:	b2db      	uxtb	r3, r3
    9614:	2b01      	cmp	r3, #1
    9616:	d104      	bne.n	9622 <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
    9618:	2320      	movs	r3, #32
    961a:	18fb      	adds	r3, r7, r3
    961c:	2201      	movs	r2, #1
    961e:	701a      	strb	r2, [r3, #0]
						break;
    9620:	e043      	b.n	96aa <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
    9622:	202a      	movs	r0, #42	; 0x2a
    9624:	4b35      	ldr	r3, [pc, #212]	; (96fc <PR2_ISR+0x200>)
    9626:	4798      	blx	r3
    9628:	0003      	movs	r3, r0
    962a:	001a      	movs	r2, r3
    962c:	2301      	movs	r3, #1
    962e:	4053      	eors	r3, r2
    9630:	b2db      	uxtb	r3, r3
    9632:	2b00      	cmp	r3, #0
    9634:	d013      	beq.n	965e <PR2_ISR+0x162>
    9636:	2322      	movs	r3, #34	; 0x22
    9638:	18fb      	adds	r3, r7, r3
    963a:	781b      	ldrb	r3, [r3, #0]
    963c:	b2db      	uxtb	r3, r3
    963e:	2b00      	cmp	r3, #0
    9640:	d10d      	bne.n	965e <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
    9642:	2322      	movs	r3, #34	; 0x22
    9644:	18fb      	adds	r3, r7, r3
    9646:	2201      	movs	r2, #1
    9648:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
    964a:	2323      	movs	r3, #35	; 0x23
    964c:	18fb      	adds	r3, r7, r3
    964e:	781b      	ldrb	r3, [r3, #0]
    9650:	b2db      	uxtb	r3, r3
    9652:	2b01      	cmp	r3, #1
    9654:	d103      	bne.n	965e <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
    9656:	2321      	movs	r3, #33	; 0x21
    9658:	18fb      	adds	r3, r7, r3
    965a:	2201      	movs	r2, #1
    965c:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
    965e:	2321      	movs	r3, #33	; 0x21
    9660:	18fb      	adds	r3, r7, r3
    9662:	781b      	ldrb	r3, [r3, #0]
    9664:	b2db      	uxtb	r3, r3
    9666:	2b01      	cmp	r3, #1
    9668:	d10c      	bne.n	9684 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
    966a:	4b27      	ldr	r3, [pc, #156]	; (9708 <PR2_ISR+0x20c>)
    966c:	2202      	movs	r2, #2
    966e:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
    9670:	4b26      	ldr	r3, [pc, #152]	; (970c <PR2_ISR+0x210>)
    9672:	2202      	movs	r2, #2
    9674:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
    9676:	4b26      	ldr	r3, [pc, #152]	; (9710 <PR2_ISR+0x214>)
    9678:	2200      	movs	r2, #0
    967a:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
    967c:	4b18      	ldr	r3, [pc, #96]	; (96e0 <PR2_ISR+0x1e4>)
    967e:	2200      	movs	r2, #0
    9680:	701a      	strb	r2, [r3, #0]
					break;
    9682:	e012      	b.n	96aa <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
    9684:	202b      	movs	r0, #43	; 0x2b
    9686:	4b1d      	ldr	r3, [pc, #116]	; (96fc <PR2_ISR+0x200>)
    9688:	4798      	blx	r3
    968a:	0003      	movs	r3, r0
    968c:	001a      	movs	r2, r3
    968e:	2301      	movs	r3, #1
    9690:	4053      	eors	r3, r2
    9692:	b2db      	uxtb	r3, r3
    9694:	2b00      	cmp	r3, #0
    9696:	d107      	bne.n	96a8 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    9698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    969a:	3301      	adds	r3, #1
    969c:	627b      	str	r3, [r7, #36]	; 0x24
    969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96a0:	2b77      	cmp	r3, #119	; 0x77
    96a2:	d800      	bhi.n	96a6 <PR2_ISR+0x1aa>
    96a4:	e775      	b.n	9592 <PR2_ISR+0x96>
    96a6:	e000      	b.n	96aa <PR2_ISR+0x1ae>
				{
					break;
    96a8:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
    96aa:	4b19      	ldr	r3, [pc, #100]	; (9710 <PR2_ISR+0x214>)
    96ac:	781b      	ldrb	r3, [r3, #0]
    96ae:	b2db      	uxtb	r3, r3
    96b0:	3301      	adds	r3, #1
    96b2:	b2db      	uxtb	r3, r3
    96b4:	4a16      	ldr	r2, [pc, #88]	; (9710 <PR2_ISR+0x214>)
    96b6:	1c19      	adds	r1, r3, #0
    96b8:	7011      	strb	r1, [r2, #0]
    96ba:	2b02      	cmp	r3, #2
    96bc:	d90b      	bls.n	96d6 <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
    96be:	4b14      	ldr	r3, [pc, #80]	; (9710 <PR2_ISR+0x214>)
    96c0:	2200      	movs	r2, #0
    96c2:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    96c4:	4b10      	ldr	r3, [pc, #64]	; (9708 <PR2_ISR+0x20c>)
    96c6:	2201      	movs	r2, #1
    96c8:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    96ca:	4b10      	ldr	r3, [pc, #64]	; (970c <PR2_ISR+0x210>)
    96cc:	2201      	movs	r2, #1
    96ce:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
    96d0:	4b03      	ldr	r3, [pc, #12]	; (96e0 <PR2_ISR+0x1e4>)
    96d2:	2200      	movs	r2, #0
    96d4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    96d6:	46c0      	nop			; (mov r8, r8)
    96d8:	46bd      	mov	sp, r7
    96da:	b00b      	add	sp, #44	; 0x2c
    96dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96de:	46c0      	nop			; (mov r8, r8)
    96e0:	2000000c 	.word	0x2000000c
    96e4:	20000238 	.word	0x20000238
    96e8:	00013435 	.word	0x00013435
    96ec:	00001b57 	.word	0x00001b57
    96f0:	000153a9 	.word	0x000153a9
    96f4:	00001b58 	.word	0x00001b58
    96f8:	20000001 	.word	0x20000001
    96fc:	000085d5 	.word	0x000085d5
    9700:	006acfbf 	.word	0x006acfbf
    9704:	006acfc0 	.word	0x006acfc0
    9708:	2000070c 	.word	0x2000070c
    970c:	20000234 	.word	0x20000234
    9710:	20000235 	.word	0x20000235

00009714 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
    9714:	b580      	push	{r7, lr}
    9716:	b084      	sub	sp, #16
    9718:	af00      	add	r7, sp, #0
    971a:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    971c:	4b12      	ldr	r3, [pc, #72]	; (9768 <vTask_10ms_Timer+0x54>)
    971e:	4798      	blx	r3
    9720:	0003      	movs	r3, r0
    9722:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    9724:	230c      	movs	r3, #12
    9726:	18fb      	adds	r3, r7, r3
    9728:	210a      	movs	r1, #10
    972a:	0018      	movs	r0, r3
    972c:	4b0f      	ldr	r3, [pc, #60]	; (976c <vTask_10ms_Timer+0x58>)
    972e:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
    9730:	4b0f      	ldr	r3, [pc, #60]	; (9770 <vTask_10ms_Timer+0x5c>)
    9732:	781b      	ldrb	r3, [r3, #0]
    9734:	b2db      	uxtb	r3, r3
    9736:	2b01      	cmp	r3, #1
    9738:	d1f4      	bne.n	9724 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
    973a:	4b0e      	ldr	r3, [pc, #56]	; (9774 <vTask_10ms_Timer+0x60>)
    973c:	781b      	ldrb	r3, [r3, #0]
    973e:	3301      	adds	r3, #1
    9740:	b2da      	uxtb	r2, r3
    9742:	4b0c      	ldr	r3, [pc, #48]	; (9774 <vTask_10ms_Timer+0x60>)
    9744:	701a      	strb	r2, [r3, #0]
    9746:	4b0b      	ldr	r3, [pc, #44]	; (9774 <vTask_10ms_Timer+0x60>)
    9748:	781b      	ldrb	r3, [r3, #0]
    974a:	2b13      	cmp	r3, #19
    974c:	d9ea      	bls.n	9724 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
    974e:	4b09      	ldr	r3, [pc, #36]	; (9774 <vTask_10ms_Timer+0x60>)
    9750:	2200      	movs	r2, #0
    9752:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    9754:	4b08      	ldr	r3, [pc, #32]	; (9778 <vTask_10ms_Timer+0x64>)
    9756:	2201      	movs	r2, #1
    9758:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    975a:	4b08      	ldr	r3, [pc, #32]	; (977c <vTask_10ms_Timer+0x68>)
    975c:	2201      	movs	r2, #1
    975e:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
    9760:	4b03      	ldr	r3, [pc, #12]	; (9770 <vTask_10ms_Timer+0x5c>)
    9762:	2200      	movs	r2, #0
    9764:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    9766:	e7dd      	b.n	9724 <vTask_10ms_Timer+0x10>
    9768:	0000ef5d 	.word	0x0000ef5d
    976c:	0000eb31 	.word	0x0000eb31
    9770:	2000000c 	.word	0x2000000c
    9774:	20000238 	.word	0x20000238
    9778:	2000070c 	.word	0x2000070c
    977c:	20000234 	.word	0x20000234

00009780 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
    9780:	b580      	push	{r7, lr}
    9782:	b084      	sub	sp, #16
    9784:	af00      	add	r7, sp, #0
    9786:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    9788:	4b17      	ldr	r3, [pc, #92]	; (97e8 <vTask_100ms_Timer+0x68>)
    978a:	4798      	blx	r3
    978c:	0003      	movs	r3, r0
    978e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    9790:	230c      	movs	r3, #12
    9792:	18fb      	adds	r3, r7, r3
    9794:	2164      	movs	r1, #100	; 0x64
    9796:	0018      	movs	r0, r3
    9798:	4b14      	ldr	r3, [pc, #80]	; (97ec <vTask_100ms_Timer+0x6c>)
    979a:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
    979c:	4b14      	ldr	r3, [pc, #80]	; (97f0 <vTask_100ms_Timer+0x70>)
    979e:	781b      	ldrb	r3, [r3, #0]
    97a0:	b2db      	uxtb	r3, r3
    97a2:	1c5a      	adds	r2, r3, #1
    97a4:	b2d1      	uxtb	r1, r2
    97a6:	4a12      	ldr	r2, [pc, #72]	; (97f0 <vTask_100ms_Timer+0x70>)
    97a8:	7011      	strb	r1, [r2, #0]
    97aa:	2b04      	cmp	r3, #4
    97ac:	d905      	bls.n	97ba <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
    97ae:	4b10      	ldr	r3, [pc, #64]	; (97f0 <vTask_100ms_Timer+0x70>)
    97b0:	2200      	movs	r2, #0
    97b2:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
    97b4:	4b0f      	ldr	r3, [pc, #60]	; (97f4 <vTask_100ms_Timer+0x74>)
    97b6:	2201      	movs	r2, #1
    97b8:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
    97ba:	4b0f      	ldr	r3, [pc, #60]	; (97f8 <vTask_100ms_Timer+0x78>)
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	b2db      	uxtb	r3, r3
    97c0:	1c5a      	adds	r2, r3, #1
    97c2:	b2d1      	uxtb	r1, r2
    97c4:	4a0c      	ldr	r2, [pc, #48]	; (97f8 <vTask_100ms_Timer+0x78>)
    97c6:	7011      	strb	r1, [r2, #0]
    97c8:	2b04      	cmp	r3, #4
    97ca:	d9e1      	bls.n	9790 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
    97cc:	4b0a      	ldr	r3, [pc, #40]	; (97f8 <vTask_100ms_Timer+0x78>)
    97ce:	2200      	movs	r2, #0
    97d0:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
    97d2:	4b0a      	ldr	r3, [pc, #40]	; (97fc <vTask_100ms_Timer+0x7c>)
    97d4:	2201      	movs	r2, #1
    97d6:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
    97d8:	4b09      	ldr	r3, [pc, #36]	; (9800 <vTask_100ms_Timer+0x80>)
    97da:	2200      	movs	r2, #0
    97dc:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
    97de:	200b      	movs	r0, #11
    97e0:	4b08      	ldr	r3, [pc, #32]	; (9804 <vTask_100ms_Timer+0x84>)
    97e2:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    97e4:	e7d4      	b.n	9790 <vTask_100ms_Timer+0x10>
    97e6:	46c0      	nop			; (mov r8, r8)
    97e8:	0000ef5d 	.word	0x0000ef5d
    97ec:	0000eb31 	.word	0x0000eb31
    97f0:	2000000d 	.word	0x2000000d
    97f4:	20000237 	.word	0x20000237
    97f8:	20000236 	.word	0x20000236
    97fc:	2000000c 	.word	0x2000000c
    9800:	20000238 	.word	0x20000238
    9804:	000086b9 	.word	0x000086b9

00009808 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
    9808:	b580      	push	{r7, lr}
    980a:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
    980c:	4b04      	ldr	r3, [pc, #16]	; (9820 <should_Detect_New_Voltage+0x18>)
    980e:	781b      	ldrb	r3, [r3, #0]
    9810:	b2db      	uxtb	r3, r3
    9812:	425a      	negs	r2, r3
    9814:	4153      	adcs	r3, r2
    9816:	b2db      	uxtb	r3, r3
}
    9818:	0018      	movs	r0, r3
    981a:	46bd      	mov	sp, r7
    981c:	bd80      	pop	{r7, pc}
    981e:	46c0      	nop			; (mov r8, r8)
    9820:	2000000d 	.word	0x2000000d

00009824 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
    9824:	b590      	push	{r4, r7, lr}
    9826:	b083      	sub	sp, #12
    9828:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    982a:	4b25      	ldr	r3, [pc, #148]	; (98c0 <detect_battery_voltage_and_percentage+0x9c>)
    982c:	681a      	ldr	r2, [r3, #0]
    982e:	2301      	movs	r3, #1
    9830:	425b      	negs	r3, r3
    9832:	0019      	movs	r1, r3
    9834:	0010      	movs	r0, r2
    9836:	4b23      	ldr	r3, [pc, #140]	; (98c4 <detect_battery_voltage_and_percentage+0xa0>)
    9838:	4798      	blx	r3
    983a:	0003      	movs	r3, r0
    983c:	2b01      	cmp	r3, #1
    983e:	d13b      	bne.n	98b8 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
    9840:	21c8      	movs	r1, #200	; 0xc8
    9842:	2007      	movs	r0, #7
    9844:	4b20      	ldr	r3, [pc, #128]	; (98c8 <detect_battery_voltage_and_percentage+0xa4>)
    9846:	4798      	blx	r3
    9848:	0003      	movs	r3, r0
    984a:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
    984c:	683b      	ldr	r3, [r7, #0]
    984e:	4a1f      	ldr	r2, [pc, #124]	; (98cc <detect_battery_voltage_and_percentage+0xa8>)
    9850:	435a      	muls	r2, r3
    9852:	0010      	movs	r0, r2
    9854:	4b1e      	ldr	r3, [pc, #120]	; (98d0 <detect_battery_voltage_and_percentage+0xac>)
    9856:	22fa      	movs	r2, #250	; 0xfa
    9858:	0091      	lsls	r1, r2, #2
    985a:	4798      	blx	r3
    985c:	0003      	movs	r3, r0
    985e:	001a      	movs	r2, r3
    9860:	4b1c      	ldr	r3, [pc, #112]	; (98d4 <detect_battery_voltage_and_percentage+0xb0>)
    9862:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
    9864:	1dfb      	adds	r3, r7, #7
    9866:	2200      	movs	r2, #0
    9868:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    986a:	4b1a      	ldr	r3, [pc, #104]	; (98d4 <detect_battery_voltage_and_percentage+0xb0>)
    986c:	699b      	ldr	r3, [r3, #24]
    986e:	4a1a      	ldr	r2, [pc, #104]	; (98d8 <detect_battery_voltage_and_percentage+0xb4>)
    9870:	4293      	cmp	r3, r2
    9872:	d803      	bhi.n	987c <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
    9874:	1dfb      	adds	r3, r7, #7
    9876:	2200      	movs	r2, #0
    9878:	701a      	strb	r2, [r3, #0]
    987a:	e012      	b.n	98a2 <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
    987c:	4b15      	ldr	r3, [pc, #84]	; (98d4 <detect_battery_voltage_and_percentage+0xb0>)
    987e:	699b      	ldr	r3, [r3, #24]
    9880:	4a16      	ldr	r2, [pc, #88]	; (98dc <detect_battery_voltage_and_percentage+0xb8>)
    9882:	189a      	adds	r2, r3, r2
    9884:	4b12      	ldr	r3, [pc, #72]	; (98d0 <detect_battery_voltage_and_percentage+0xac>)
    9886:	2109      	movs	r1, #9
    9888:	0010      	movs	r0, r2
    988a:	4798      	blx	r3
    988c:	0003      	movs	r3, r0
    988e:	001a      	movs	r2, r3
    9890:	1dfb      	adds	r3, r7, #7
    9892:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
    9894:	1dfb      	adds	r3, r7, #7
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	2b64      	cmp	r3, #100	; 0x64
    989a:	d902      	bls.n	98a2 <detect_battery_voltage_and_percentage+0x7e>
    989c:	1dfb      	adds	r3, r7, #7
    989e:	2264      	movs	r2, #100	; 0x64
    98a0:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
    98a2:	4b0c      	ldr	r3, [pc, #48]	; (98d4 <detect_battery_voltage_and_percentage+0xb0>)
    98a4:	1dfa      	adds	r2, r7, #7
    98a6:	7812      	ldrb	r2, [r2, #0]
    98a8:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
    98aa:	4b05      	ldr	r3, [pc, #20]	; (98c0 <detect_battery_voltage_and_percentage+0x9c>)
    98ac:	6818      	ldr	r0, [r3, #0]
    98ae:	2300      	movs	r3, #0
    98b0:	2200      	movs	r2, #0
    98b2:	2100      	movs	r1, #0
    98b4:	4c0a      	ldr	r4, [pc, #40]	; (98e0 <detect_battery_voltage_and_percentage+0xbc>)
    98b6:	47a0      	blx	r4
	}
}
    98b8:	46c0      	nop			; (mov r8, r8)
    98ba:	46bd      	mov	sp, r7
    98bc:	b003      	add	sp, #12
    98be:	bd90      	pop	{r4, r7, pc}
    98c0:	20000230 	.word	0x20000230
    98c4:	0000e2f1 	.word	0x0000e2f1
    98c8:	000090cd 	.word	0x000090cd
    98cc:	000005b1 	.word	0x000005b1
    98d0:	00015041 	.word	0x00015041
    98d4:	200006c8 	.word	0x200006c8
    98d8:	00000ce4 	.word	0x00000ce4
    98dc:	fffff31c 	.word	0xfffff31c
    98e0:	0000de51 	.word	0x0000de51

000098e4 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
    98e4:	b590      	push	{r4, r7, lr}
    98e6:	b085      	sub	sp, #20
    98e8:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    98ea:	4b3d      	ldr	r3, [pc, #244]	; (99e0 <detect_Three_Phase_Voltage+0xfc>)
    98ec:	681a      	ldr	r2, [r3, #0]
    98ee:	2301      	movs	r3, #1
    98f0:	425b      	negs	r3, r3
    98f2:	0019      	movs	r1, r3
    98f4:	0010      	movs	r0, r2
    98f6:	4b3b      	ldr	r3, [pc, #236]	; (99e4 <detect_Three_Phase_Voltage+0x100>)
    98f8:	4798      	blx	r3
    98fa:	0003      	movs	r3, r0
    98fc:	2b01      	cmp	r3, #1
    98fe:	d16b      	bne.n	99d8 <detect_Three_Phase_Voltage+0xf4>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
    9900:	2013      	movs	r0, #19
    9902:	4b39      	ldr	r3, [pc, #228]	; (99e8 <detect_Three_Phase_Voltage+0x104>)
    9904:	4798      	blx	r3
    9906:	0003      	movs	r3, r0
    9908:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
    990a:	68fb      	ldr	r3, [r7, #12]
    990c:	3b0a      	subs	r3, #10
    990e:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
    9910:	68fb      	ldr	r3, [r7, #12]
    9912:	2b00      	cmp	r3, #0
    9914:	da02      	bge.n	991c <detect_Three_Phase_Voltage+0x38>
		{
			adcRY = 0;
    9916:	2300      	movs	r3, #0
    9918:	60fb      	str	r3, [r7, #12]
    991a:	e00f      	b.n	993c <detect_Three_Phase_Voltage+0x58>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
    991c:	68fb      	ldr	r3, [r7, #12]
    991e:	3b0a      	subs	r3, #10
    9920:	4a32      	ldr	r2, [pc, #200]	; (99ec <detect_Three_Phase_Voltage+0x108>)
    9922:	435a      	muls	r2, r3
    9924:	0010      	movs	r0, r2
    9926:	4b32      	ldr	r3, [pc, #200]	; (99f0 <detect_Three_Phase_Voltage+0x10c>)
    9928:	22fa      	movs	r2, #250	; 0xfa
    992a:	0091      	lsls	r1, r2, #2
    992c:	4798      	blx	r3
    992e:	0003      	movs	r3, r0
    9930:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
    9932:	68fb      	ldr	r3, [r7, #12]
    9934:	2b00      	cmp	r3, #0
    9936:	da01      	bge.n	993c <detect_Three_Phase_Voltage+0x58>
			{
				adcRY = 0;
    9938:	2300      	movs	r3, #0
    993a:	60fb      	str	r3, [r7, #12]
			}
		}
		
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
    993c:	2012      	movs	r0, #18
    993e:	4b2a      	ldr	r3, [pc, #168]	; (99e8 <detect_Three_Phase_Voltage+0x104>)
    9940:	4798      	blx	r3
    9942:	0003      	movs	r3, r0
    9944:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
    9946:	68bb      	ldr	r3, [r7, #8]
    9948:	3b0a      	subs	r3, #10
    994a:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
    994c:	68bb      	ldr	r3, [r7, #8]
    994e:	2b00      	cmp	r3, #0
    9950:	da02      	bge.n	9958 <detect_Three_Phase_Voltage+0x74>
		{
			adcYB = 0;
    9952:	2300      	movs	r3, #0
    9954:	60bb      	str	r3, [r7, #8]
    9956:	e00f      	b.n	9978 <detect_Three_Phase_Voltage+0x94>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
    9958:	68bb      	ldr	r3, [r7, #8]
    995a:	3b0a      	subs	r3, #10
    995c:	4a23      	ldr	r2, [pc, #140]	; (99ec <detect_Three_Phase_Voltage+0x108>)
    995e:	435a      	muls	r2, r3
    9960:	0010      	movs	r0, r2
    9962:	4b23      	ldr	r3, [pc, #140]	; (99f0 <detect_Three_Phase_Voltage+0x10c>)
    9964:	22fa      	movs	r2, #250	; 0xfa
    9966:	0091      	lsls	r1, r2, #2
    9968:	4798      	blx	r3
    996a:	0003      	movs	r3, r0
    996c:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
    996e:	68bb      	ldr	r3, [r7, #8]
    9970:	2b00      	cmp	r3, #0
    9972:	da01      	bge.n	9978 <detect_Three_Phase_Voltage+0x94>
			{
				adcYB = 0;
    9974:	2300      	movs	r3, #0
    9976:	60bb      	str	r3, [r7, #8]
			}
		}
		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
    9978:	2011      	movs	r0, #17
    997a:	4b1b      	ldr	r3, [pc, #108]	; (99e8 <detect_Three_Phase_Voltage+0x104>)
    997c:	4798      	blx	r3
    997e:	0003      	movs	r3, r0
    9980:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	3b0c      	subs	r3, #12
    9986:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
    9988:	687b      	ldr	r3, [r7, #4]
    998a:	2b00      	cmp	r3, #0
    998c:	da02      	bge.n	9994 <detect_Three_Phase_Voltage+0xb0>
		{
			adcBR = 0;
    998e:	2300      	movs	r3, #0
    9990:	607b      	str	r3, [r7, #4]
    9992:	e00f      	b.n	99b4 <detect_Three_Phase_Voltage+0xd0>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
    9994:	687b      	ldr	r3, [r7, #4]
    9996:	3b0c      	subs	r3, #12
    9998:	4a16      	ldr	r2, [pc, #88]	; (99f4 <detect_Three_Phase_Voltage+0x110>)
    999a:	435a      	muls	r2, r3
    999c:	0010      	movs	r0, r2
    999e:	4b14      	ldr	r3, [pc, #80]	; (99f0 <detect_Three_Phase_Voltage+0x10c>)
    99a0:	22fa      	movs	r2, #250	; 0xfa
    99a2:	0091      	lsls	r1, r2, #2
    99a4:	4798      	blx	r3
    99a6:	0003      	movs	r3, r0
    99a8:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
    99aa:	687b      	ldr	r3, [r7, #4]
    99ac:	2b00      	cmp	r3, #0
    99ae:	da01      	bge.n	99b4 <detect_Three_Phase_Voltage+0xd0>
			{
				adcBR = 0;
    99b0:	2300      	movs	r3, #0
    99b2:	607b      	str	r3, [r7, #4]
			}
		}
		
		
		Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
    99b4:	68fa      	ldr	r2, [r7, #12]
    99b6:	4b10      	ldr	r3, [pc, #64]	; (99f8 <detect_Three_Phase_Voltage+0x114>)
    99b8:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
    99ba:	68ba      	ldr	r2, [r7, #8]
    99bc:	4b0e      	ldr	r3, [pc, #56]	; (99f8 <detect_Three_Phase_Voltage+0x114>)
    99be:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
    99c0:	687a      	ldr	r2, [r7, #4]
    99c2:	4b0d      	ldr	r3, [pc, #52]	; (99f8 <detect_Three_Phase_Voltage+0x114>)
    99c4:	609a      	str	r2, [r3, #8]
		
		set_Three_Phase_State_From_Voltage();
    99c6:	4b0d      	ldr	r3, [pc, #52]	; (99fc <detect_Three_Phase_Voltage+0x118>)
    99c8:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
    99ca:	4b05      	ldr	r3, [pc, #20]	; (99e0 <detect_Three_Phase_Voltage+0xfc>)
    99cc:	6818      	ldr	r0, [r3, #0]
    99ce:	2300      	movs	r3, #0
    99d0:	2200      	movs	r2, #0
    99d2:	2100      	movs	r1, #0
    99d4:	4c0a      	ldr	r4, [pc, #40]	; (9a00 <detect_Three_Phase_Voltage+0x11c>)
    99d6:	47a0      	blx	r4
	}
}
    99d8:	46c0      	nop			; (mov r8, r8)
    99da:	46bd      	mov	sp, r7
    99dc:	b005      	add	sp, #20
    99de:	bd90      	pop	{r4, r7, pc}
    99e0:	20000230 	.word	0x20000230
    99e4:	0000e2f1 	.word	0x0000e2f1
    99e8:	00009189 	.word	0x00009189
    99ec:	0000028f 	.word	0x0000028f
    99f0:	00015155 	.word	0x00015155
    99f4:	0000029e 	.word	0x0000029e
    99f8:	200006c8 	.word	0x200006c8
    99fc:	00009a05 	.word	0x00009a05
    9a00:	0000de51 	.word	0x0000de51

00009a04 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
    9a04:	b580      	push	{r7, lr}
    9a06:	b082      	sub	sp, #8
    9a08:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    9a0a:	1dfb      	adds	r3, r7, #7
    9a0c:	4a2a      	ldr	r2, [pc, #168]	; (9ab8 <set_Three_Phase_State_From_Voltage+0xb4>)
    9a0e:	7852      	ldrb	r2, [r2, #1]
    9a10:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9a12:	4b2a      	ldr	r3, [pc, #168]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a14:	681b      	ldr	r3, [r3, #0]
    9a16:	2b27      	cmp	r3, #39	; 0x27
    9a18:	d80b      	bhi.n	9a32 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9a1a:	4b28      	ldr	r3, [pc, #160]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a1c:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9a1e:	2b27      	cmp	r3, #39	; 0x27
    9a20:	d807      	bhi.n	9a32 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
    9a22:	4b26      	ldr	r3, [pc, #152]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a24:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9a26:	2b27      	cmp	r3, #39	; 0x27
    9a28:	d803      	bhi.n	9a32 <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
    9a2a:	4b23      	ldr	r3, [pc, #140]	; (9ab8 <set_Three_Phase_State_From_Voltage+0xb4>)
    9a2c:	2200      	movs	r2, #0
    9a2e:	705a      	strb	r2, [r3, #1]
    9a30:	e02a      	b.n	9a88 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9a32:	4b22      	ldr	r3, [pc, #136]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a34:	681a      	ldr	r2, [r3, #0]
    9a36:	4b21      	ldr	r3, [pc, #132]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a38:	685b      	ldr	r3, [r3, #4]
    9a3a:	1ad3      	subs	r3, r2, r3
    9a3c:	17da      	asrs	r2, r3, #31
    9a3e:	189b      	adds	r3, r3, r2
    9a40:	4053      	eors	r3, r2
    9a42:	4a1f      	ldr	r2, [pc, #124]	; (9ac0 <set_Three_Phase_State_From_Voltage+0xbc>)
    9a44:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9a46:	4293      	cmp	r3, r2
    9a48:	dc17      	bgt.n	9a7a <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9a4a:	4b1c      	ldr	r3, [pc, #112]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a4c:	685a      	ldr	r2, [r3, #4]
    9a4e:	4b1b      	ldr	r3, [pc, #108]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a50:	689b      	ldr	r3, [r3, #8]
    9a52:	1ad3      	subs	r3, r2, r3
    9a54:	17da      	asrs	r2, r3, #31
    9a56:	189b      	adds	r3, r3, r2
    9a58:	4053      	eors	r3, r2
    9a5a:	4a19      	ldr	r2, [pc, #100]	; (9ac0 <set_Three_Phase_State_From_Voltage+0xbc>)
    9a5c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9a5e:	4293      	cmp	r3, r2
    9a60:	dc0b      	bgt.n	9a7a <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
    9a62:	4b16      	ldr	r3, [pc, #88]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a64:	689a      	ldr	r2, [r3, #8]
    9a66:	4b15      	ldr	r3, [pc, #84]	; (9abc <set_Three_Phase_State_From_Voltage+0xb8>)
    9a68:	681b      	ldr	r3, [r3, #0]
    9a6a:	1ad3      	subs	r3, r2, r3
    9a6c:	17da      	asrs	r2, r3, #31
    9a6e:	189b      	adds	r3, r3, r2
    9a70:	4053      	eors	r3, r2
    9a72:	4a13      	ldr	r2, [pc, #76]	; (9ac0 <set_Three_Phase_State_From_Voltage+0xbc>)
    9a74:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9a76:	4293      	cmp	r3, r2
    9a78:	dd03      	ble.n	9a82 <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
    9a7a:	4b0f      	ldr	r3, [pc, #60]	; (9ab8 <set_Three_Phase_State_From_Voltage+0xb4>)
    9a7c:	2202      	movs	r2, #2
    9a7e:	705a      	strb	r2, [r3, #1]
    9a80:	e002      	b.n	9a88 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
    9a82:	4b0d      	ldr	r3, [pc, #52]	; (9ab8 <set_Three_Phase_State_From_Voltage+0xb4>)
    9a84:	2203      	movs	r2, #3
    9a86:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
    9a88:	4b0b      	ldr	r3, [pc, #44]	; (9ab8 <set_Three_Phase_State_From_Voltage+0xb4>)
    9a8a:	785b      	ldrb	r3, [r3, #1]
    9a8c:	b2da      	uxtb	r2, r3
    9a8e:	4b0d      	ldr	r3, [pc, #52]	; (9ac4 <set_Three_Phase_State_From_Voltage+0xc0>)
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	b2db      	uxtb	r3, r3
    9a94:	429a      	cmp	r2, r3
    9a96:	d00b      	beq.n	9ab0 <set_Three_Phase_State_From_Voltage+0xac>
	{
		last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
    9a98:	4b0b      	ldr	r3, [pc, #44]	; (9ac8 <set_Three_Phase_State_From_Voltage+0xc4>)
    9a9a:	1dfa      	adds	r2, r7, #7
    9a9c:	7812      	ldrb	r2, [r2, #0]
    9a9e:	701a      	strb	r2, [r3, #0]
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
    9aa0:	4b05      	ldr	r3, [pc, #20]	; (9ab8 <set_Three_Phase_State_From_Voltage+0xb4>)
    9aa2:	785b      	ldrb	r3, [r3, #1]
    9aa4:	b2da      	uxtb	r2, r3
    9aa6:	4b07      	ldr	r3, [pc, #28]	; (9ac4 <set_Three_Phase_State_From_Voltage+0xc0>)
    9aa8:	701a      	strb	r2, [r3, #0]
		eventOccured = true;
    9aaa:	4b08      	ldr	r3, [pc, #32]	; (9acc <set_Three_Phase_State_From_Voltage+0xc8>)
    9aac:	2201      	movs	r2, #1
    9aae:	701a      	strb	r2, [r3, #0]
	}
}
    9ab0:	46c0      	nop			; (mov r8, r8)
    9ab2:	46bd      	mov	sp, r7
    9ab4:	b002      	add	sp, #8
    9ab6:	bd80      	pop	{r7, pc}
    9ab8:	2000070c 	.word	0x2000070c
    9abc:	200006c8 	.word	0x200006c8
    9ac0:	2000064c 	.word	0x2000064c
    9ac4:	200007e4 	.word	0x200007e4
    9ac8:	200006ff 	.word	0x200006ff
    9acc:	20000703 	.word	0x20000703

00009ad0 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
    9ad0:	b590      	push	{r4, r7, lr}
    9ad2:	b083      	sub	sp, #12
    9ad4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9ad6:	4b32      	ldr	r3, [pc, #200]	; (9ba0 <detect_Motor_Current+0xd0>)
    9ad8:	681a      	ldr	r2, [r3, #0]
    9ada:	2301      	movs	r3, #1
    9adc:	425b      	negs	r3, r3
    9ade:	0019      	movs	r1, r3
    9ae0:	0010      	movs	r0, r2
    9ae2:	4b30      	ldr	r3, [pc, #192]	; (9ba4 <detect_Motor_Current+0xd4>)
    9ae4:	4798      	blx	r3
    9ae6:	0003      	movs	r3, r0
    9ae8:	2b01      	cmp	r3, #1
    9aea:	d155      	bne.n	9b98 <detect_Motor_Current+0xc8>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
    9aec:	21c8      	movs	r1, #200	; 0xc8
    9aee:	2010      	movs	r0, #16
    9af0:	4b2d      	ldr	r3, [pc, #180]	; (9ba8 <detect_Motor_Current+0xd8>)
    9af2:	4798      	blx	r3
    9af4:	0003      	movs	r3, r0
    9af6:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
    9af8:	687b      	ldr	r3, [r7, #4]
    9afa:	2b0f      	cmp	r3, #15
    9afc:	d906      	bls.n	9b0c <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
    9afe:	687b      	ldr	r3, [r7, #4]
    9b00:	3b0f      	subs	r3, #15
    9b02:	17da      	asrs	r2, r3, #31
    9b04:	189b      	adds	r3, r3, r2
    9b06:	4053      	eors	r3, r2
    9b08:	607b      	str	r3, [r7, #4]
    9b0a:	e004      	b.n	9b16 <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
    9b0c:	687b      	ldr	r3, [r7, #4]
    9b0e:	2b0f      	cmp	r3, #15
    9b10:	d801      	bhi.n	9b16 <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
    9b12:	2300      	movs	r3, #0
    9b14:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
    9b16:	4b22      	ldr	r3, [pc, #136]	; (9ba0 <detect_Motor_Current+0xd0>)
    9b18:	6818      	ldr	r0, [r3, #0]
    9b1a:	2300      	movs	r3, #0
    9b1c:	2200      	movs	r2, #0
    9b1e:	2100      	movs	r1, #0
    9b20:	4c22      	ldr	r4, [pc, #136]	; (9bac <detect_Motor_Current+0xdc>)
    9b22:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
    9b24:	4b22      	ldr	r3, [pc, #136]	; (9bb0 <detect_Motor_Current+0xe0>)
    9b26:	687a      	ldr	r2, [r7, #4]
    9b28:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
    9b2a:	687b      	ldr	r3, [r7, #4]
    9b2c:	4a21      	ldr	r2, [pc, #132]	; (9bb4 <detect_Motor_Current+0xe4>)
    9b2e:	435a      	muls	r2, r3
    9b30:	0010      	movs	r0, r2
    9b32:	4b21      	ldr	r3, [pc, #132]	; (9bb8 <detect_Motor_Current+0xe8>)
    9b34:	22fa      	movs	r2, #250	; 0xfa
    9b36:	0091      	lsls	r1, r2, #2
    9b38:	4798      	blx	r3
    9b3a:	0003      	movs	r3, r0
    9b3c:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	4a1e      	ldr	r2, [pc, #120]	; (9bbc <detect_Motor_Current+0xec>)
    9b42:	4293      	cmp	r3, r2
    9b44:	d810      	bhi.n	9b68 <detect_Motor_Current+0x98>
    9b46:	687b      	ldr	r3, [r7, #4]
    9b48:	2b00      	cmp	r3, #0
    9b4a:	d00d      	beq.n	9b68 <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
    9b4c:	687b      	ldr	r3, [r7, #4]
    9b4e:	4a1c      	ldr	r2, [pc, #112]	; (9bc0 <detect_Motor_Current+0xf0>)
    9b50:	4353      	muls	r3, r2
    9b52:	4a1c      	ldr	r2, [pc, #112]	; (9bc4 <detect_Motor_Current+0xf4>)
    9b54:	1898      	adds	r0, r3, r2
    9b56:	4b18      	ldr	r3, [pc, #96]	; (9bb8 <detect_Motor_Current+0xe8>)
    9b58:	22fa      	movs	r2, #250	; 0xfa
    9b5a:	0091      	lsls	r1, r2, #2
    9b5c:	4798      	blx	r3
    9b5e:	0003      	movs	r3, r0
    9b60:	001a      	movs	r2, r3
    9b62:	687b      	ldr	r3, [r7, #4]
    9b64:	189b      	adds	r3, r3, r2
    9b66:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
    9b68:	4b11      	ldr	r3, [pc, #68]	; (9bb0 <detect_Motor_Current+0xe0>)
    9b6a:	687a      	ldr	r2, [r7, #4]
    9b6c:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
    9b6e:	687a      	ldr	r2, [r7, #4]
    9b70:	4b11      	ldr	r3, [pc, #68]	; (9bb8 <detect_Motor_Current+0xe8>)
    9b72:	2164      	movs	r1, #100	; 0x64
    9b74:	0010      	movs	r0, r2
    9b76:	4798      	blx	r3
    9b78:	0003      	movs	r3, r0
    9b7a:	b29a      	uxth	r2, r3
    9b7c:	4b0c      	ldr	r3, [pc, #48]	; (9bb0 <detect_Motor_Current+0xe0>)
    9b7e:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
    9b80:	687a      	ldr	r2, [r7, #4]
    9b82:	4b11      	ldr	r3, [pc, #68]	; (9bc8 <detect_Motor_Current+0xf8>)
    9b84:	2164      	movs	r1, #100	; 0x64
    9b86:	0010      	movs	r0, r2
    9b88:	4798      	blx	r3
    9b8a:	000b      	movs	r3, r1
    9b8c:	b29a      	uxth	r2, r3
    9b8e:	4b08      	ldr	r3, [pc, #32]	; (9bb0 <detect_Motor_Current+0xe0>)
    9b90:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
    9b92:	4b0e      	ldr	r3, [pc, #56]	; (9bcc <detect_Motor_Current+0xfc>)
    9b94:	2200      	movs	r2, #0
    9b96:	701a      	strb	r2, [r3, #0]
	}
}
    9b98:	46c0      	nop			; (mov r8, r8)
    9b9a:	46bd      	mov	sp, r7
    9b9c:	b003      	add	sp, #12
    9b9e:	bd90      	pop	{r4, r7, pc}
    9ba0:	20000230 	.word	0x20000230
    9ba4:	0000e2f1 	.word	0x0000e2f1
    9ba8:	000090cd 	.word	0x000090cd
    9bac:	0000de51 	.word	0x0000de51
    9bb0:	200006c8 	.word	0x200006c8
    9bb4:	00000d61 	.word	0x00000d61
    9bb8:	00015041 	.word	0x00015041
    9bbc:	000004af 	.word	0x000004af
    9bc0:	fffffef0 	.word	0xfffffef0
    9bc4:	0004fb00 	.word	0x0004fb00
    9bc8:	0001514d 	.word	0x0001514d
    9bcc:	20000237 	.word	0x20000237

00009bd0 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
    9bd0:	b580      	push	{r7, lr}
    9bd2:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
    9bd4:	4b04      	ldr	r3, [pc, #16]	; (9be8 <should_Detect_New_Current+0x18>)
    9bd6:	781b      	ldrb	r3, [r3, #0]
    9bd8:	b2db      	uxtb	r3, r3
    9bda:	3b01      	subs	r3, #1
    9bdc:	425a      	negs	r2, r3
    9bde:	4153      	adcs	r3, r2
    9be0:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
    9be2:	0018      	movs	r0, r3
    9be4:	46bd      	mov	sp, r7
    9be6:	bd80      	pop	{r7, pc}
    9be8:	20000237 	.word	0x20000237

00009bec <getACPowerState>:


bool getACPowerState(void)
{
    9bec:	b580      	push	{r7, lr}
    9bee:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
    9bf0:	4b02      	ldr	r3, [pc, #8]	; (9bfc <getACPowerState+0x10>)
    9bf2:	781b      	ldrb	r3, [r3, #0]
    9bf4:	b2db      	uxtb	r3, r3
}
    9bf6:	0018      	movs	r0, r3
    9bf8:	46bd      	mov	sp, r7
    9bfa:	bd80      	pop	{r7, pc}
    9bfc:	20000776 	.word	0x20000776

00009c00 <setACPowerState>:

void setACPowerState(bool state)
{
    9c00:	b580      	push	{r7, lr}
    9c02:	b082      	sub	sp, #8
    9c04:	af00      	add	r7, sp, #0
    9c06:	0002      	movs	r2, r0
    9c08:	1dfb      	adds	r3, r7, #7
    9c0a:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
    9c0c:	4b03      	ldr	r3, [pc, #12]	; (9c1c <setACPowerState+0x1c>)
    9c0e:	1dfa      	adds	r2, r7, #7
    9c10:	7812      	ldrb	r2, [r2, #0]
    9c12:	701a      	strb	r2, [r3, #0]
}
    9c14:	46c0      	nop			; (mov r8, r8)
    9c16:	46bd      	mov	sp, r7
    9c18:	b002      	add	sp, #8
    9c1a:	bd80      	pop	{r7, pc}
    9c1c:	20000776 	.word	0x20000776

00009c20 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
    9c20:	b580      	push	{r7, lr}
    9c22:	af00      	add	r7, sp, #0
	return allPhase;
    9c24:	4b02      	ldr	r3, [pc, #8]	; (9c30 <getAllPhaseState+0x10>)
    9c26:	781b      	ldrb	r3, [r3, #0]
    9c28:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
    9c2a:	0018      	movs	r0, r3
    9c2c:	46bd      	mov	sp, r7
    9c2e:	bd80      	pop	{r7, pc}
    9c30:	20000725 	.word	0x20000725

00009c34 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
    9c34:	b580      	push	{r7, lr}
    9c36:	b082      	sub	sp, #8
    9c38:	af00      	add	r7, sp, #0
    9c3a:	0002      	movs	r2, r0
    9c3c:	1dfb      	adds	r3, r7, #7
    9c3e:	701a      	strb	r2, [r3, #0]
	allPhase = state;
    9c40:	4b03      	ldr	r3, [pc, #12]	; (9c50 <setAllPhaseState+0x1c>)
    9c42:	1dfa      	adds	r2, r7, #7
    9c44:	7812      	ldrb	r2, [r2, #0]
    9c46:	701a      	strb	r2, [r3, #0]
}
    9c48:	46c0      	nop			; (mov r8, r8)
    9c4a:	46bd      	mov	sp, r7
    9c4c:	b002      	add	sp, #8
    9c4e:	bd80      	pop	{r7, pc}
    9c50:	20000725 	.word	0x20000725

00009c54 <getPhaseSequence>:

bool getPhaseSequence()
{
    9c54:	b580      	push	{r7, lr}
    9c56:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
    9c58:	4b02      	ldr	r3, [pc, #8]	; (9c64 <getPhaseSequence+0x10>)
    9c5a:	781b      	ldrb	r3, [r3, #0]
    9c5c:	b2db      	uxtb	r3, r3
}
    9c5e:	0018      	movs	r0, r3
    9c60:	46bd      	mov	sp, r7
    9c62:	bd80      	pop	{r7, pc}
    9c64:	20000737 	.word	0x20000737

00009c68 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
    9c68:	b580      	push	{r7, lr}
    9c6a:	b082      	sub	sp, #8
    9c6c:	af00      	add	r7, sp, #0
    9c6e:	0002      	movs	r2, r0
    9c70:	1dfb      	adds	r3, r7, #7
    9c72:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
    9c74:	4b03      	ldr	r3, [pc, #12]	; (9c84 <setPhaseSequence+0x1c>)
    9c76:	1dfa      	adds	r2, r7, #7
    9c78:	7812      	ldrb	r2, [r2, #0]
    9c7a:	701a      	strb	r2, [r3, #0]
}
    9c7c:	46c0      	nop			; (mov r8, r8)
    9c7e:	46bd      	mov	sp, r7
    9c80:	b002      	add	sp, #8
    9c82:	bd80      	pop	{r7, pc}
    9c84:	20000737 	.word	0x20000737

00009c88 <getMotorState>:


bool getMotorState(void)
{
    9c88:	b580      	push	{r7, lr}
    9c8a:	af00      	add	r7, sp, #0
	return mFeedback;
    9c8c:	4b02      	ldr	r3, [pc, #8]	; (9c98 <getMotorState+0x10>)
    9c8e:	781b      	ldrb	r3, [r3, #0]
    9c90:	b2db      	uxtb	r3, r3
}
    9c92:	0018      	movs	r0, r3
    9c94:	46bd      	mov	sp, r7
    9c96:	bd80      	pop	{r7, pc}
    9c98:	20000706 	.word	0x20000706

00009c9c <setMotorState>:

void setMotorState(bool state)
{
    9c9c:	b580      	push	{r7, lr}
    9c9e:	b082      	sub	sp, #8
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	0002      	movs	r2, r0
    9ca4:	1dfb      	adds	r3, r7, #7
    9ca6:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
    9ca8:	4b0a      	ldr	r3, [pc, #40]	; (9cd4 <setMotorState+0x38>)
    9caa:	1dfa      	adds	r2, r7, #7
    9cac:	7812      	ldrb	r2, [r2, #0]
    9cae:	701a      	strb	r2, [r3, #0]
	if (state)
    9cb0:	1dfb      	adds	r3, r7, #7
    9cb2:	781b      	ldrb	r3, [r3, #0]
    9cb4:	2b00      	cmp	r3, #0
    9cb6:	d004      	beq.n	9cc2 <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
    9cb8:	2100      	movs	r1, #0
    9cba:	2005      	movs	r0, #5
    9cbc:	4b06      	ldr	r3, [pc, #24]	; (9cd8 <setMotorState+0x3c>)
    9cbe:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
    9cc0:	e003      	b.n	9cca <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
    9cc2:	2101      	movs	r1, #1
    9cc4:	2005      	movs	r0, #5
    9cc6:	4b04      	ldr	r3, [pc, #16]	; (9cd8 <setMotorState+0x3c>)
    9cc8:	4798      	blx	r3
}
    9cca:	46c0      	nop			; (mov r8, r8)
    9ccc:	46bd      	mov	sp, r7
    9cce:	b002      	add	sp, #8
    9cd0:	bd80      	pop	{r7, pc}
    9cd2:	46c0      	nop			; (mov r8, r8)
    9cd4:	20000706 	.word	0x20000706
    9cd8:	00008619 	.word	0x00008619

00009cdc <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
    9cdc:	b590      	push	{r4, r7, lr}
    9cde:	b083      	sub	sp, #12
    9ce0:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
    9ce2:	1d3b      	adds	r3, r7, #4
    9ce4:	1d7a      	adds	r2, r7, #5
    9ce6:	1db9      	adds	r1, r7, #6
    9ce8:	1df8      	adds	r0, r7, #7
    9cea:	4c06      	ldr	r4, [pc, #24]	; (9d04 <getMotorState_from_pin+0x28>)
    9cec:	47a0      	blx	r4
	setMotorState(p3);
    9cee:	1d7b      	adds	r3, r7, #5
    9cf0:	781b      	ldrb	r3, [r3, #0]
    9cf2:	0018      	movs	r0, r3
    9cf4:	4b04      	ldr	r3, [pc, #16]	; (9d08 <getMotorState_from_pin+0x2c>)
    9cf6:	4798      	blx	r3
	return p3;
    9cf8:	1d7b      	adds	r3, r7, #5
    9cfa:	781b      	ldrb	r3, [r3, #0]
}
    9cfc:	0018      	movs	r0, r3
    9cfe:	46bd      	mov	sp, r7
    9d00:	b003      	add	sp, #12
    9d02:	bd90      	pop	{r4, r7, pc}
    9d04:	00009d0d 	.word	0x00009d0d
    9d08:	00009c9d 	.word	0x00009c9d

00009d0c <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
    9d0c:	b590      	push	{r4, r7, lr}
    9d0e:	b087      	sub	sp, #28
    9d10:	af00      	add	r7, sp, #0
    9d12:	60f8      	str	r0, [r7, #12]
    9d14:	60b9      	str	r1, [r7, #8]
    9d16:	607a      	str	r2, [r7, #4]
    9d18:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
    9d1a:	4b29      	ldr	r3, [pc, #164]	; (9dc0 <readSensorState+0xb4>)
    9d1c:	785b      	ldrb	r3, [r3, #1]
    9d1e:	b2da      	uxtb	r2, r3
    9d20:	68fb      	ldr	r3, [r7, #12]
    9d22:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    9d24:	4b26      	ldr	r3, [pc, #152]	; (9dc0 <readSensorState+0xb4>)
    9d26:	781b      	ldrb	r3, [r3, #0]
    9d28:	b2db      	uxtb	r3, r3
    9d2a:	2b02      	cmp	r3, #2
    9d2c:	d103      	bne.n	9d36 <readSensorState+0x2a>
	{
		*phaseSeq=true;
    9d2e:	68bb      	ldr	r3, [r7, #8]
    9d30:	2201      	movs	r2, #1
    9d32:	701a      	strb	r2, [r3, #0]
    9d34:	e002      	b.n	9d3c <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
    9d36:	68bb      	ldr	r3, [r7, #8]
    9d38:	2200      	movs	r2, #0
    9d3a:	701a      	strb	r2, [r3, #0]
	//else
	//{
	//*p1 = false;
	//}

	*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    9d3c:	202e      	movs	r0, #46	; 0x2e
    9d3e:	4b21      	ldr	r3, [pc, #132]	; (9dc4 <readSensorState+0xb8>)
    9d40:	4798      	blx	r3
    9d42:	0003      	movs	r3, r0
    9d44:	1e5a      	subs	r2, r3, #1
    9d46:	4193      	sbcs	r3, r2
    9d48:	b2db      	uxtb	r3, r3
    9d4a:	2201      	movs	r2, #1
    9d4c:	4053      	eors	r3, r2
    9d4e:	b2db      	uxtb	r3, r3
    9d50:	1c1a      	adds	r2, r3, #0
    9d52:	2301      	movs	r3, #1
    9d54:	4013      	ands	r3, r2
    9d56:	b2da      	uxtb	r2, r3
    9d58:	687b      	ldr	r3, [r7, #4]
    9d5a:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    9d5c:	2317      	movs	r3, #23
    9d5e:	18fb      	adds	r3, r7, r3
    9d60:	2201      	movs	r2, #1
    9d62:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    9d64:	2317      	movs	r3, #23
    9d66:	18fc      	adds	r4, r7, r3
    9d68:	4b17      	ldr	r3, [pc, #92]	; (9dc8 <readSensorState+0xbc>)
    9d6a:	2100      	movs	r1, #0
    9d6c:	0018      	movs	r0, r3
    9d6e:	4b17      	ldr	r3, [pc, #92]	; (9dcc <readSensorState+0xc0>)
    9d70:	4798      	blx	r3
    9d72:	0003      	movs	r3, r0
    9d74:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    9d76:	23fa      	movs	r3, #250	; 0xfa
    9d78:	005b      	lsls	r3, r3, #1
    9d7a:	0018      	movs	r0, r3
    9d7c:	4b14      	ldr	r3, [pc, #80]	; (9dd0 <readSensorState+0xc4>)
    9d7e:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    9d80:	2317      	movs	r3, #23
    9d82:	18fc      	adds	r4, r7, r3
    9d84:	4b10      	ldr	r3, [pc, #64]	; (9dc8 <readSensorState+0xbc>)
    9d86:	2100      	movs	r1, #0
    9d88:	0018      	movs	r0, r3
    9d8a:	4b10      	ldr	r3, [pc, #64]	; (9dcc <readSensorState+0xc0>)
    9d8c:	4798      	blx	r3
    9d8e:	0003      	movs	r3, r0
    9d90:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    9d92:	2317      	movs	r3, #23
    9d94:	18fb      	adds	r3, r7, r3
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	2204      	movs	r2, #4
    9d9a:	4013      	ands	r3, r2
    9d9c:	d003      	beq.n	9da6 <readSensorState+0x9a>
	{
		isACpowerAvailable = true;
    9d9e:	4b0d      	ldr	r3, [pc, #52]	; (9dd4 <readSensorState+0xc8>)
    9da0:	2201      	movs	r2, #1
    9da2:	701a      	strb	r2, [r3, #0]
    9da4:	e002      	b.n	9dac <readSensorState+0xa0>
	}
	else
	{
		isACpowerAvailable = false;
    9da6:	4b0b      	ldr	r3, [pc, #44]	; (9dd4 <readSensorState+0xc8>)
    9da8:	2200      	movs	r2, #0
    9daa:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
    9dac:	4b09      	ldr	r3, [pc, #36]	; (9dd4 <readSensorState+0xc8>)
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	b2da      	uxtb	r2, r3
    9db2:	683b      	ldr	r3, [r7, #0]
    9db4:	701a      	strb	r2, [r3, #0]
}
    9db6:	46c0      	nop			; (mov r8, r8)
    9db8:	46bd      	mov	sp, r7
    9dba:	b007      	add	sp, #28
    9dbc:	bd90      	pop	{r4, r7, pc}
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	2000070c 	.word	0x2000070c
    9dc4:	000085d5 	.word	0x000085d5
    9dc8:	20000820 	.word	0x20000820
    9dcc:	00008189 	.word	0x00008189
    9dd0:	0000ebf9 	.word	0x0000ebf9
    9dd4:	20000751 	.word	0x20000751

00009dd8 <updateSensorState>:

void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
    9dd8:	b5b0      	push	{r4, r5, r7, lr}
    9dda:	b084      	sub	sp, #16
    9ddc:	af00      	add	r7, sp, #0
    9dde:	0005      	movs	r5, r0
    9de0:	000c      	movs	r4, r1
    9de2:	0010      	movs	r0, r2
    9de4:	0019      	movs	r1, r3
    9de6:	1dfb      	adds	r3, r7, #7
    9de8:	1c2a      	adds	r2, r5, #0
    9dea:	701a      	strb	r2, [r3, #0]
    9dec:	1dbb      	adds	r3, r7, #6
    9dee:	1c22      	adds	r2, r4, #0
    9df0:	701a      	strb	r2, [r3, #0]
    9df2:	1d7b      	adds	r3, r7, #5
    9df4:	1c02      	adds	r2, r0, #0
    9df6:	701a      	strb	r2, [r3, #0]
    9df8:	1d3b      	adds	r3, r7, #4
    9dfa:	1c0a      	adds	r2, r1, #0
    9dfc:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
    9dfe:	1dfb      	adds	r3, r7, #7
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	0018      	movs	r0, r3
    9e04:	4b29      	ldr	r3, [pc, #164]	; (9eac <updateSensorState+0xd4>)
    9e06:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
    9e08:	1dbb      	adds	r3, r7, #6
    9e0a:	781b      	ldrb	r3, [r3, #0]
    9e0c:	0018      	movs	r0, r3
    9e0e:	4b28      	ldr	r3, [pc, #160]	; (9eb0 <updateSensorState+0xd8>)
    9e10:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
    9e12:	1d7b      	adds	r3, r7, #5
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	0018      	movs	r0, r3
    9e18:	4b26      	ldr	r3, [pc, #152]	; (9eb4 <updateSensorState+0xdc>)
    9e1a:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
    9e1c:	1d3b      	adds	r3, r7, #4
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	0018      	movs	r0, r3
    9e22:	4b25      	ldr	r3, [pc, #148]	; (9eb8 <updateSensorState+0xe0>)
    9e24:	4798      	blx	r3
	
	if(getAllPhaseState()==AC_3PH && getACPowerState())
    9e26:	4b25      	ldr	r3, [pc, #148]	; (9ebc <updateSensorState+0xe4>)
    9e28:	4798      	blx	r3
    9e2a:	0003      	movs	r3, r0
    9e2c:	2b03      	cmp	r3, #3
    9e2e:	d12e      	bne.n	9e8e <updateSensorState+0xb6>
    9e30:	4b23      	ldr	r3, [pc, #140]	; (9ec0 <updateSensorState+0xe8>)
    9e32:	4798      	blx	r3
    9e34:	1e03      	subs	r3, r0, #0
    9e36:	d02a      	beq.n	9e8e <updateSensorState+0xb6>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
    9e38:	230f      	movs	r3, #15
    9e3a:	18fb      	adds	r3, r7, r3
    9e3c:	2201      	movs	r2, #1
    9e3e:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
    9e40:	4b20      	ldr	r3, [pc, #128]	; (9ec4 <updateSensorState+0xec>)
    9e42:	2224      	movs	r2, #36	; 0x24
    9e44:	5c9b      	ldrb	r3, [r3, r2]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d005      	beq.n	9e56 <updateSensorState+0x7e>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
    9e4a:	230f      	movs	r3, #15
    9e4c:	18fc      	adds	r4, r7, r3
    9e4e:	4b1e      	ldr	r3, [pc, #120]	; (9ec8 <updateSensorState+0xf0>)
    9e50:	4798      	blx	r3
    9e52:	0003      	movs	r3, r0
    9e54:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
    9e56:	230f      	movs	r3, #15
    9e58:	18fb      	adds	r3, r7, r3
    9e5a:	781b      	ldrb	r3, [r3, #0]
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d004      	beq.n	9e6a <updateSensorState+0x92>
		{
			THREEPHASE_OK_LED_ON;
    9e60:	2100      	movs	r1, #0
    9e62:	2027      	movs	r0, #39	; 0x27
    9e64:	4b19      	ldr	r3, [pc, #100]	; (9ecc <updateSensorState+0xf4>)
    9e66:	4798      	blx	r3
    9e68:	e003      	b.n	9e72 <updateSensorState+0x9a>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
    9e6a:	2101      	movs	r1, #1
    9e6c:	2027      	movs	r0, #39	; 0x27
    9e6e:	4b17      	ldr	r3, [pc, #92]	; (9ecc <updateSensorState+0xf4>)
    9e70:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
    9e72:	4b14      	ldr	r3, [pc, #80]	; (9ec4 <updateSensorState+0xec>)
    9e74:	785b      	ldrb	r3, [r3, #1]
    9e76:	2b00      	cmp	r3, #0
    9e78:	d004      	beq.n	9e84 <updateSensorState+0xac>
		{
			AUTO_ON_LED_ON;
    9e7a:	2100      	movs	r1, #0
    9e7c:	2028      	movs	r0, #40	; 0x28
    9e7e:	4b13      	ldr	r3, [pc, #76]	; (9ecc <updateSensorState+0xf4>)
    9e80:	4798      	blx	r3
	{
    9e82:	e00f      	b.n	9ea4 <updateSensorState+0xcc>
		}
		else
		{
			AUTO_ON_LED_OFF;
    9e84:	2101      	movs	r1, #1
    9e86:	2028      	movs	r0, #40	; 0x28
    9e88:	4b10      	ldr	r3, [pc, #64]	; (9ecc <updateSensorState+0xf4>)
    9e8a:	4798      	blx	r3
	{
    9e8c:	e00a      	b.n	9ea4 <updateSensorState+0xcc>
		}
	}
	else
	{
		THREEPHASE_OK_LED_OFF;
    9e8e:	2101      	movs	r1, #1
    9e90:	2027      	movs	r0, #39	; 0x27
    9e92:	4b0e      	ldr	r3, [pc, #56]	; (9ecc <updateSensorState+0xf4>)
    9e94:	4798      	blx	r3
		AUTO_ON_LED_OFF;
    9e96:	2101      	movs	r1, #1
    9e98:	2028      	movs	r0, #40	; 0x28
    9e9a:	4b0c      	ldr	r3, [pc, #48]	; (9ecc <updateSensorState+0xf4>)
    9e9c:	4798      	blx	r3
		startTimerOn=false;
    9e9e:	4b0c      	ldr	r3, [pc, #48]	; (9ed0 <updateSensorState+0xf8>)
    9ea0:	2200      	movs	r2, #0
    9ea2:	701a      	strb	r2, [r3, #0]
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
    9ea4:	46c0      	nop			; (mov r8, r8)
    9ea6:	46bd      	mov	sp, r7
    9ea8:	b004      	add	sp, #16
    9eaa:	bdb0      	pop	{r4, r5, r7, pc}
    9eac:	00009c35 	.word	0x00009c35
    9eb0:	00009c69 	.word	0x00009c69
    9eb4:	00009c9d 	.word	0x00009c9d
    9eb8:	00009c01 	.word	0x00009c01
    9ebc:	00009c21 	.word	0x00009c21
    9ec0:	00009bed 	.word	0x00009bed
    9ec4:	2000064c 	.word	0x2000064c
    9ec8:	00009c55 	.word	0x00009c55
    9ecc:	00008619 	.word	0x00008619
    9ed0:	2000075e 	.word	0x2000075e

00009ed4 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
    9ed4:	b580      	push	{r7, lr}
    9ed6:	b082      	sub	sp, #8
    9ed8:	af00      	add	r7, sp, #0
    9eda:	0002      	movs	r2, r0
    9edc:	1dfb      	adds	r3, r7, #7
    9ede:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
    9ee0:	4b0e      	ldr	r3, [pc, #56]	; (9f1c <resetAutoStart+0x48>)
    9ee2:	785b      	ldrb	r3, [r3, #1]
    9ee4:	2b00      	cmp	r3, #0
    9ee6:	d107      	bne.n	9ef8 <resetAutoStart+0x24>
	{
		startTimerOn=false;
    9ee8:	4b0d      	ldr	r3, [pc, #52]	; (9f20 <resetAutoStart+0x4c>)
    9eea:	2200      	movs	r2, #0
    9eec:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
    9eee:	2101      	movs	r1, #1
    9ef0:	2028      	movs	r0, #40	; 0x28
    9ef2:	4b0c      	ldr	r3, [pc, #48]	; (9f24 <resetAutoStart+0x50>)
    9ef4:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
    9ef6:	e00d      	b.n	9f14 <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
    9ef8:	4b08      	ldr	r3, [pc, #32]	; (9f1c <resetAutoStart+0x48>)
    9efa:	785b      	ldrb	r3, [r3, #1]
    9efc:	2b00      	cmp	r3, #0
    9efe:	d009      	beq.n	9f14 <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
    9f00:	2100      	movs	r1, #0
    9f02:	2028      	movs	r0, #40	; 0x28
    9f04:	4b07      	ldr	r3, [pc, #28]	; (9f24 <resetAutoStart+0x50>)
    9f06:	4798      	blx	r3
		if (setChange)
    9f08:	1dfb      	adds	r3, r7, #7
    9f0a:	781b      	ldrb	r3, [r3, #0]
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d001      	beq.n	9f14 <resetAutoStart+0x40>
			triggerAutoStart();
    9f10:	4b05      	ldr	r3, [pc, #20]	; (9f28 <resetAutoStart+0x54>)
    9f12:	4798      	blx	r3
}
    9f14:	46c0      	nop			; (mov r8, r8)
    9f16:	46bd      	mov	sp, r7
    9f18:	b002      	add	sp, #8
    9f1a:	bd80      	pop	{r7, pc}
    9f1c:	2000064c 	.word	0x2000064c
    9f20:	2000075e 	.word	0x2000075e
    9f24:	00008619 	.word	0x00008619
    9f28:	00009f2d 	.word	0x00009f2d

00009f2c <triggerAutoStart>:

void triggerAutoStart(void)
{
    9f2c:	b580      	push	{r7, lr}
    9f2e:	af00      	add	r7, sp, #0
	if (!getMotorState())
    9f30:	4b0d      	ldr	r3, [pc, #52]	; (9f68 <triggerAutoStart+0x3c>)
    9f32:	4798      	blx	r3
    9f34:	0003      	movs	r3, r0
    9f36:	001a      	movs	r2, r3
    9f38:	2301      	movs	r3, #1
    9f3a:	4053      	eors	r3, r2
    9f3c:	b2db      	uxtb	r3, r3
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d00f      	beq.n	9f62 <triggerAutoStart+0x36>
	{
		if (getAllPhaseState() && getACPowerState())
    9f42:	4b0a      	ldr	r3, [pc, #40]	; (9f6c <triggerAutoStart+0x40>)
    9f44:	4798      	blx	r3
    9f46:	1e03      	subs	r3, r0, #0
    9f48:	d00b      	beq.n	9f62 <triggerAutoStart+0x36>
    9f4a:	4b09      	ldr	r3, [pc, #36]	; (9f70 <triggerAutoStart+0x44>)
    9f4c:	4798      	blx	r3
    9f4e:	1e03      	subs	r3, r0, #0
    9f50:	d007      	beq.n	9f62 <triggerAutoStart+0x36>
		{
			startTimerOn = true;
    9f52:	4b08      	ldr	r3, [pc, #32]	; (9f74 <triggerAutoStart+0x48>)
    9f54:	2201      	movs	r2, #1
    9f56:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
    9f58:	4b07      	ldr	r3, [pc, #28]	; (9f78 <triggerAutoStart+0x4c>)
    9f5a:	4798      	blx	r3
    9f5c:	0002      	movs	r2, r0
    9f5e:	4b07      	ldr	r3, [pc, #28]	; (9f7c <triggerAutoStart+0x50>)
    9f60:	601a      	str	r2, [r3, #0]
		}
	}
}
    9f62:	46c0      	nop			; (mov r8, r8)
    9f64:	46bd      	mov	sp, r7
    9f66:	bd80      	pop	{r7, pc}
    9f68:	00009c89 	.word	0x00009c89
    9f6c:	00009c21 	.word	0x00009c21
    9f70:	00009bed 	.word	0x00009bed
    9f74:	2000075e 	.word	0x2000075e
    9f78:	0000ef5d 	.word	0x0000ef5d
    9f7c:	20000764 	.word	0x20000764

00009f80 <operateOnEvent>:

void operateOnEvent(void)
{
    9f80:	b590      	push	{r4, r7, lr}
    9f82:	b083      	sub	sp, #12
    9f84:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
    9f86:	1d3b      	adds	r3, r7, #4
    9f88:	1d7a      	adds	r2, r7, #5
    9f8a:	1db9      	adds	r1, r7, #6
    9f8c:	1df8      	adds	r0, r7, #7
    9f8e:	4c65      	ldr	r4, [pc, #404]	; (a124 <operateOnEvent+0x1a4>)
    9f90:	47a0      	blx	r4
	eventOccured = false;
    9f92:	4b65      	ldr	r3, [pc, #404]	; (a128 <operateOnEvent+0x1a8>)
    9f94:	2200      	movs	r2, #0
    9f96:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    9f98:	4b64      	ldr	r3, [pc, #400]	; (a12c <operateOnEvent+0x1ac>)
    9f9a:	4798      	blx	r3
    9f9c:	0003      	movs	r3, r0
    9f9e:	001a      	movs	r2, r3
    9fa0:	1dfb      	adds	r3, r7, #7
    9fa2:	781b      	ldrb	r3, [r3, #0]
    9fa4:	429a      	cmp	r2, r3
    9fa6:	d110      	bne.n	9fca <operateOnEvent+0x4a>
    9fa8:	4b61      	ldr	r3, [pc, #388]	; (a130 <operateOnEvent+0x1b0>)
    9faa:	4798      	blx	r3
    9fac:	0003      	movs	r3, r0
    9fae:	001a      	movs	r2, r3
    9fb0:	1d7b      	adds	r3, r7, #5
    9fb2:	781b      	ldrb	r3, [r3, #0]
    9fb4:	429a      	cmp	r2, r3
    9fb6:	d108      	bne.n	9fca <operateOnEvent+0x4a>
    9fb8:	4b5e      	ldr	r3, [pc, #376]	; (a134 <operateOnEvent+0x1b4>)
    9fba:	4798      	blx	r3
    9fbc:	0003      	movs	r3, r0
    9fbe:	001a      	movs	r2, r3
    9fc0:	1d3b      	adds	r3, r7, #4
    9fc2:	781b      	ldrb	r3, [r3, #0]
    9fc4:	429a      	cmp	r2, r3
    9fc6:	d100      	bne.n	9fca <operateOnEvent+0x4a>
    9fc8:	e0a7      	b.n	a11a <operateOnEvent+0x19a>
	{
		return;
	}
	if (getMotorState())	//motorOn
    9fca:	4b59      	ldr	r3, [pc, #356]	; (a130 <operateOnEvent+0x1b0>)
    9fcc:	4798      	blx	r3
    9fce:	1e03      	subs	r3, r0, #0
    9fd0:	d100      	bne.n	9fd4 <operateOnEvent+0x54>
    9fd2:	e066      	b.n	a0a2 <operateOnEvent+0x122>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
    9fd4:	1dfb      	adds	r3, r7, #7
    9fd6:	781b      	ldrb	r3, [r3, #0]
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d11e      	bne.n	a01a <operateOnEvent+0x9a>
    9fdc:	1d7b      	adds	r3, r7, #5
    9fde:	781b      	ldrb	r3, [r3, #0]
    9fe0:	2201      	movs	r2, #1
    9fe2:	4053      	eors	r3, r2
    9fe4:	b2db      	uxtb	r3, r3
    9fe6:	2b00      	cmp	r3, #0
    9fe8:	d017      	beq.n	a01a <operateOnEvent+0x9a>
    9fea:	1d3b      	adds	r3, r7, #4
    9fec:	781b      	ldrb	r3, [r3, #0]
    9fee:	2201      	movs	r2, #1
    9ff0:	4053      	eors	r3, r2
    9ff2:	b2db      	uxtb	r3, r3
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d010      	beq.n	a01a <operateOnEvent+0x9a>
		{
			stopMotor(false,true,false);
    9ff8:	2200      	movs	r2, #0
    9ffa:	2101      	movs	r1, #1
    9ffc:	2000      	movs	r0, #0
    9ffe:	4b4e      	ldr	r3, [pc, #312]	; (a138 <operateOnEvent+0x1b8>)
    a000:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
    a002:	2101      	movs	r1, #1
    a004:	2027      	movs	r0, #39	; 0x27
    a006:	4b4d      	ldr	r3, [pc, #308]	; (a13c <operateOnEvent+0x1bc>)
    a008:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
    a00a:	2043      	movs	r0, #67	; 0x43
    a00c:	4b4c      	ldr	r3, [pc, #304]	; (a140 <operateOnEvent+0x1c0>)
    a00e:	4798      	blx	r3
    a010:	0003      	movs	r3, r0
    a012:	001a      	movs	r2, r3
    a014:	4b4b      	ldr	r3, [pc, #300]	; (a144 <operateOnEvent+0x1c4>)
    a016:	719a      	strb	r2, [r3, #6]
    a018:	e074      	b.n	a104 <operateOnEvent+0x184>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a01a:	1d3b      	adds	r3, r7, #4
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	2b00      	cmp	r3, #0
    a020:	d029      	beq.n	a076 <operateOnEvent+0xf6>
    a022:	4b44      	ldr	r3, [pc, #272]	; (a134 <operateOnEvent+0x1b4>)
    a024:	4798      	blx	r3
    a026:	1e03      	subs	r3, r0, #0
    a028:	d025      	beq.n	a076 <operateOnEvent+0xf6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a02a:	4b47      	ldr	r3, [pc, #284]	; (a148 <operateOnEvent+0x1c8>)
    a02c:	2220      	movs	r2, #32
    a02e:	5c9b      	ldrb	r3, [r3, r2]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a030:	2b00      	cmp	r3, #0
    a032:	d008      	beq.n	a046 <operateOnEvent+0xc6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a034:	1dfb      	adds	r3, r7, #7
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	2b03      	cmp	r3, #3
    a03a:	d104      	bne.n	a046 <operateOnEvent+0xc6>
    a03c:	4b3b      	ldr	r3, [pc, #236]	; (a12c <operateOnEvent+0x1ac>)
    a03e:	4798      	blx	r3
    a040:	0003      	movs	r3, r0
    a042:	2b03      	cmp	r3, #3
    a044:	d00d      	beq.n	a062 <operateOnEvent+0xe2>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a046:	4b40      	ldr	r3, [pc, #256]	; (a148 <operateOnEvent+0x1c8>)
    a048:	2220      	movs	r2, #32
    a04a:	5c9b      	ldrb	r3, [r3, r2]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a04c:	2b00      	cmp	r3, #0
    a04e:	d112      	bne.n	a076 <operateOnEvent+0xf6>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a050:	1dfb      	adds	r3, r7, #7
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	2b01      	cmp	r3, #1
    a056:	d90e      	bls.n	a076 <operateOnEvent+0xf6>
    a058:	4b34      	ldr	r3, [pc, #208]	; (a12c <operateOnEvent+0x1ac>)
    a05a:	4798      	blx	r3
    a05c:	0003      	movs	r3, r0
    a05e:	2b01      	cmp	r3, #1
    a060:	d909      	bls.n	a076 <operateOnEvent+0xf6>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
    a062:	1d7b      	adds	r3, r7, #5
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	2201      	movs	r2, #1
    a068:	4053      	eors	r3, r2
    a06a:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a06c:	2b00      	cmp	r3, #0
    a06e:	d002      	beq.n	a076 <operateOnEvent+0xf6>
		{
			unknownMotorOff();
    a070:	4b36      	ldr	r3, [pc, #216]	; (a14c <operateOnEvent+0x1cc>)
    a072:	4798      	blx	r3
    a074:	e046      	b.n	a104 <operateOnEvent+0x184>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a076:	4b34      	ldr	r3, [pc, #208]	; (a148 <operateOnEvent+0x1c8>)
    a078:	2220      	movs	r2, #32
    a07a:	5c9b      	ldrb	r3, [r3, r2]
    a07c:	2b00      	cmp	r3, #0
    a07e:	d041      	beq.n	a104 <operateOnEvent+0x184>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a080:	1dfb      	adds	r3, r7, #7
    a082:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a084:	2b02      	cmp	r3, #2
    a086:	d13d      	bne.n	a104 <operateOnEvent+0x184>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a088:	1d3b      	adds	r3, r7, #4
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	2b00      	cmp	r3, #0
    a08e:	d039      	beq.n	a104 <operateOnEvent+0x184>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
    a090:	4b2f      	ldr	r3, [pc, #188]	; (a150 <operateOnEvent+0x1d0>)
    a092:	4798      	blx	r3
    a094:	0002      	movs	r2, r0
    a096:	4b2f      	ldr	r3, [pc, #188]	; (a154 <operateOnEvent+0x1d4>)
    a098:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
    a09a:	4b2f      	ldr	r3, [pc, #188]	; (a158 <operateOnEvent+0x1d8>)
    a09c:	2201      	movs	r2, #1
    a09e:	701a      	strb	r2, [r3, #0]
    a0a0:	e030      	b.n	a104 <operateOnEvent+0x184>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
    a0a2:	1d7b      	adds	r3, r7, #5
    a0a4:	781b      	ldrb	r3, [r3, #0]
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d024      	beq.n	a0f4 <operateOnEvent+0x174>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
    a0aa:	1dfb      	adds	r3, r7, #7
    a0ac:	781b      	ldrb	r3, [r3, #0]
    a0ae:	2b03      	cmp	r3, #3
    a0b0:	d11a      	bne.n	a0e8 <operateOnEvent+0x168>
    a0b2:	1dbb      	adds	r3, r7, #6
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d016      	beq.n	a0e8 <operateOnEvent+0x168>
    a0ba:	1d3b      	adds	r3, r7, #4
    a0bc:	781b      	ldrb	r3, [r3, #0]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d012      	beq.n	a0e8 <operateOnEvent+0x168>
			{
				if (startTimerOn)
    a0c2:	4b26      	ldr	r3, [pc, #152]	; (a15c <operateOnEvent+0x1dc>)
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	d002      	beq.n	a0d0 <operateOnEvent+0x150>
				{
					startTimerOn = false;
    a0ca:	4b24      	ldr	r3, [pc, #144]	; (a15c <operateOnEvent+0x1dc>)
    a0cc:	2200      	movs	r2, #0
    a0ce:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
    a0d0:	2100      	movs	r1, #0
    a0d2:	2027      	movs	r0, #39	; 0x27
    a0d4:	4b19      	ldr	r3, [pc, #100]	; (a13c <operateOnEvent+0x1bc>)
    a0d6:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
    a0d8:	2053      	movs	r0, #83	; 0x53
    a0da:	4b19      	ldr	r3, [pc, #100]	; (a140 <operateOnEvent+0x1c0>)
    a0dc:	4798      	blx	r3
    a0de:	0003      	movs	r3, r0
    a0e0:	001a      	movs	r2, r3
    a0e2:	4b18      	ldr	r3, [pc, #96]	; (a144 <operateOnEvent+0x1c4>)
    a0e4:	71da      	strb	r2, [r3, #7]
    a0e6:	e00d      	b.n	a104 <operateOnEvent+0x184>
			}
			else
			{
				stopMotor(false,true,false);
    a0e8:	2200      	movs	r2, #0
    a0ea:	2101      	movs	r1, #1
    a0ec:	2000      	movs	r0, #0
    a0ee:	4b12      	ldr	r3, [pc, #72]	; (a138 <operateOnEvent+0x1b8>)
    a0f0:	4798      	blx	r3
    a0f2:	e007      	b.n	a104 <operateOnEvent+0x184>
			}
		}
		else
		{
			waitStableLineOn = true;
    a0f4:	4b1a      	ldr	r3, [pc, #104]	; (a160 <operateOnEvent+0x1e0>)
    a0f6:	2201      	movs	r2, #1
    a0f8:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
    a0fa:	4b15      	ldr	r3, [pc, #84]	; (a150 <operateOnEvent+0x1d0>)
    a0fc:	4798      	blx	r3
    a0fe:	0002      	movs	r2, r0
    a100:	4b18      	ldr	r3, [pc, #96]	; (a164 <operateOnEvent+0x1e4>)
    a102:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
    a104:	1dfb      	adds	r3, r7, #7
    a106:	7818      	ldrb	r0, [r3, #0]
    a108:	1dbb      	adds	r3, r7, #6
    a10a:	7819      	ldrb	r1, [r3, #0]
    a10c:	1d7b      	adds	r3, r7, #5
    a10e:	781a      	ldrb	r2, [r3, #0]
    a110:	1d3b      	adds	r3, r7, #4
    a112:	781b      	ldrb	r3, [r3, #0]
    a114:	4c14      	ldr	r4, [pc, #80]	; (a168 <operateOnEvent+0x1e8>)
    a116:	47a0      	blx	r4
    a118:	e000      	b.n	a11c <operateOnEvent+0x19c>
		return;
    a11a:	46c0      	nop			; (mov r8, r8)
}
    a11c:	46bd      	mov	sp, r7
    a11e:	b003      	add	sp, #12
    a120:	bd90      	pop	{r4, r7, pc}
    a122:	46c0      	nop			; (mov r8, r8)
    a124:	00009d0d 	.word	0x00009d0d
    a128:	20000703 	.word	0x20000703
    a12c:	00009c21 	.word	0x00009c21
    a130:	00009c89 	.word	0x00009c89
    a134:	00009bed 	.word	0x00009bed
    a138:	0000a4a9 	.word	0x0000a4a9
    a13c:	00008619 	.word	0x00008619
    a140:	00004615 	.word	0x00004615
    a144:	200006ec 	.word	0x200006ec
    a148:	2000064c 	.word	0x2000064c
    a14c:	0000a59d 	.word	0x0000a59d
    a150:	0000ef5d 	.word	0x0000ef5d
    a154:	20000744 	.word	0x20000744
    a158:	20000755 	.word	0x20000755
    a15c:	2000075e 	.word	0x2000075e
    a160:	200007b1 	.word	0x200007b1
    a164:	20000780 	.word	0x20000780
    a168:	00009dd9 	.word	0x00009dd9

0000a16c <checkLineSensors>:

uint8_t checkLineSensors(void)
{
    a16c:	b580      	push	{r7, lr}
    a16e:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
    a170:	4b02      	ldr	r3, [pc, #8]	; (a17c <checkLineSensors+0x10>)
    a172:	785b      	ldrb	r3, [r3, #1]
    a174:	b2db      	uxtb	r3, r3
}
    a176:	0018      	movs	r0, r3
    a178:	46bd      	mov	sp, r7
    a17a:	bd80      	pop	{r7, pc}
    a17c:	2000070c 	.word	0x2000070c

0000a180 <operateOnStableLine>:

void operateOnStableLine(void)
{
    a180:	b590      	push	{r4, r7, lr}
    a182:	b083      	sub	sp, #12
    a184:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
    a186:	4b41      	ldr	r3, [pc, #260]	; (a28c <operateOnStableLine+0x10c>)
    a188:	2200      	movs	r2, #0
    a18a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
    a18c:	1dbc      	adds	r4, r7, #6
    a18e:	4b40      	ldr	r3, [pc, #256]	; (a290 <operateOnStableLine+0x110>)
    a190:	4798      	blx	r3
    a192:	0003      	movs	r3, r0
    a194:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
    a196:	1dbb      	adds	r3, r7, #6
    a198:	781b      	ldrb	r3, [r3, #0]
    a19a:	2b03      	cmp	r3, #3
    a19c:	d133      	bne.n	a206 <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
    a19e:	1dfb      	adds	r3, r7, #7
    a1a0:	2201      	movs	r2, #1
    a1a2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
    a1a4:	4b3b      	ldr	r3, [pc, #236]	; (a294 <operateOnStableLine+0x114>)
    a1a6:	2224      	movs	r2, #36	; 0x24
    a1a8:	5c9b      	ldrb	r3, [r3, r2]
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	d004      	beq.n	a1b8 <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
    a1ae:	1dfc      	adds	r4, r7, #7
    a1b0:	4b39      	ldr	r3, [pc, #228]	; (a298 <operateOnStableLine+0x118>)
    a1b2:	4798      	blx	r3
    a1b4:	0003      	movs	r3, r0
    a1b6:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
    a1b8:	1dfb      	adds	r3, r7, #7
    a1ba:	781b      	ldrb	r3, [r3, #0]
    a1bc:	2b00      	cmp	r3, #0
    a1be:	d016      	beq.n	a1ee <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
    a1c0:	2100      	movs	r1, #0
    a1c2:	2027      	movs	r0, #39	; 0x27
    a1c4:	4b35      	ldr	r3, [pc, #212]	; (a29c <operateOnStableLine+0x11c>)
    a1c6:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
    a1c8:	4b32      	ldr	r3, [pc, #200]	; (a294 <operateOnStableLine+0x114>)
    a1ca:	785b      	ldrb	r3, [r3, #1]
    a1cc:	2b00      	cmp	r3, #0
    a1ce:	d002      	beq.n	a1d6 <operateOnStableLine+0x56>
			{
				triggerAutoStart();
    a1d0:	4b33      	ldr	r3, [pc, #204]	; (a2a0 <operateOnStableLine+0x120>)
    a1d2:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
    a1d4:	e055      	b.n	a282 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
    a1d6:	4b2f      	ldr	r3, [pc, #188]	; (a294 <operateOnStableLine+0x114>)
    a1d8:	791b      	ldrb	r3, [r3, #4]
    a1da:	2b4c      	cmp	r3, #76	; 0x4c
    a1dc:	d051      	beq.n	a282 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
    a1de:	2047      	movs	r0, #71	; 0x47
    a1e0:	4b30      	ldr	r3, [pc, #192]	; (a2a4 <operateOnStableLine+0x124>)
    a1e2:	4798      	blx	r3
    a1e4:	0003      	movs	r3, r0
    a1e6:	001a      	movs	r2, r3
    a1e8:	4b2f      	ldr	r3, [pc, #188]	; (a2a8 <operateOnStableLine+0x128>)
    a1ea:	711a      	strb	r2, [r3, #4]
}
    a1ec:	e049      	b.n	a282 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
    a1ee:	2101      	movs	r1, #1
    a1f0:	2027      	movs	r0, #39	; 0x27
    a1f2:	4b2a      	ldr	r3, [pc, #168]	; (a29c <operateOnStableLine+0x11c>)
    a1f4:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
    a1f6:	2041      	movs	r0, #65	; 0x41
    a1f8:	4b2a      	ldr	r3, [pc, #168]	; (a2a4 <operateOnStableLine+0x124>)
    a1fa:	4798      	blx	r3
    a1fc:	0003      	movs	r3, r0
    a1fe:	001a      	movs	r2, r3
    a200:	4b29      	ldr	r3, [pc, #164]	; (a2a8 <operateOnStableLine+0x128>)
    a202:	725a      	strb	r2, [r3, #9]
}
    a204:	e03d      	b.n	a282 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
    a206:	1dbb      	adds	r3, r7, #6
    a208:	781b      	ldrb	r3, [r3, #0]
    a20a:	2b02      	cmp	r3, #2
    a20c:	d114      	bne.n	a238 <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
    a20e:	2101      	movs	r1, #1
    a210:	2027      	movs	r0, #39	; 0x27
    a212:	4b22      	ldr	r3, [pc, #136]	; (a29c <operateOnStableLine+0x11c>)
    a214:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a216:	4b1f      	ldr	r3, [pc, #124]	; (a294 <operateOnStableLine+0x114>)
    a218:	791b      	ldrb	r3, [r3, #4]
    a21a:	2b4f      	cmp	r3, #79	; 0x4f
    a21c:	d131      	bne.n	a282 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
    a21e:	4b1d      	ldr	r3, [pc, #116]	; (a294 <operateOnStableLine+0x114>)
    a220:	2220      	movs	r2, #32
    a222:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a224:	2b00      	cmp	r3, #0
    a226:	d12c      	bne.n	a282 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
    a228:	2041      	movs	r0, #65	; 0x41
    a22a:	4b1e      	ldr	r3, [pc, #120]	; (a2a4 <operateOnStableLine+0x124>)
    a22c:	4798      	blx	r3
    a22e:	0003      	movs	r3, r0
    a230:	001a      	movs	r2, r3
    a232:	4b1d      	ldr	r3, [pc, #116]	; (a2a8 <operateOnStableLine+0x128>)
    a234:	725a      	strb	r2, [r3, #9]
}
    a236:	e024      	b.n	a282 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
    a238:	1dbb      	adds	r3, r7, #6
    a23a:	781b      	ldrb	r3, [r3, #0]
    a23c:	2b00      	cmp	r3, #0
    a23e:	d120      	bne.n	a282 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
    a240:	2101      	movs	r1, #1
    a242:	2027      	movs	r0, #39	; 0x27
    a244:	4b15      	ldr	r3, [pc, #84]	; (a29c <operateOnStableLine+0x11c>)
    a246:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a248:	4b12      	ldr	r3, [pc, #72]	; (a294 <operateOnStableLine+0x114>)
    a24a:	791b      	ldrb	r3, [r3, #4]
    a24c:	2b4f      	cmp	r3, #79	; 0x4f
    a24e:	d011      	beq.n	a274 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a250:	4b16      	ldr	r3, [pc, #88]	; (a2ac <operateOnStableLine+0x12c>)
    a252:	781b      	ldrb	r3, [r3, #0]
    a254:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a256:	2b02      	cmp	r3, #2
    a258:	d103      	bne.n	a262 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a25a:	4b0e      	ldr	r3, [pc, #56]	; (a294 <operateOnStableLine+0x114>)
    a25c:	791b      	ldrb	r3, [r3, #4]
    a25e:	2b4f      	cmp	r3, #79	; 0x4f
    a260:	d008      	beq.n	a274 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a262:	4b12      	ldr	r3, [pc, #72]	; (a2ac <operateOnStableLine+0x12c>)
    a264:	781b      	ldrb	r3, [r3, #0]
    a266:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a268:	2b03      	cmp	r3, #3
    a26a:	d10a      	bne.n	a282 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a26c:	4b09      	ldr	r3, [pc, #36]	; (a294 <operateOnStableLine+0x114>)
    a26e:	791b      	ldrb	r3, [r3, #4]
    a270:	2b4c      	cmp	r3, #76	; 0x4c
    a272:	d006      	beq.n	a282 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
    a274:	204c      	movs	r0, #76	; 0x4c
    a276:	4b0b      	ldr	r3, [pc, #44]	; (a2a4 <operateOnStableLine+0x124>)
    a278:	4798      	blx	r3
    a27a:	0003      	movs	r3, r0
    a27c:	001a      	movs	r2, r3
    a27e:	4b0a      	ldr	r3, [pc, #40]	; (a2a8 <operateOnStableLine+0x128>)
    a280:	715a      	strb	r2, [r3, #5]
}
    a282:	46c0      	nop			; (mov r8, r8)
    a284:	46bd      	mov	sp, r7
    a286:	b003      	add	sp, #12
    a288:	bd90      	pop	{r4, r7, pc}
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	200007b1 	.word	0x200007b1
    a290:	0000a16d 	.word	0x0000a16d
    a294:	2000064c 	.word	0x2000064c
    a298:	00009c55 	.word	0x00009c55
    a29c:	00008619 	.word	0x00008619
    a2a0:	00009f2d 	.word	0x00009f2d
    a2a4:	00004615 	.word	0x00004615
    a2a8:	200006ec 	.word	0x200006ec
    a2ac:	200006ff 	.word	0x200006ff

0000a2b0 <waitStableLineOver>:

bool waitStableLineOver(void)
{
    a2b0:	b580      	push	{r7, lr}
    a2b2:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
    a2b4:	4b0d      	ldr	r3, [pc, #52]	; (a2ec <waitStableLineOver+0x3c>)
    a2b6:	781b      	ldrb	r3, [r3, #0]
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	d00e      	beq.n	a2da <waitStableLineOver+0x2a>
    a2bc:	4b0c      	ldr	r3, [pc, #48]	; (a2f0 <waitStableLineOver+0x40>)
    a2be:	4798      	blx	r3
    a2c0:	0002      	movs	r2, r0
    a2c2:	4b0c      	ldr	r3, [pc, #48]	; (a2f4 <waitStableLineOver+0x44>)
    a2c4:	681b      	ldr	r3, [r3, #0]
    a2c6:	1ad3      	subs	r3, r2, r3
    a2c8:	4a0b      	ldr	r2, [pc, #44]	; (a2f8 <waitStableLineOver+0x48>)
    a2ca:	7812      	ldrb	r2, [r2, #0]
    a2cc:	0011      	movs	r1, r2
    a2ce:	2264      	movs	r2, #100	; 0x64
    a2d0:	434a      	muls	r2, r1
    a2d2:	4293      	cmp	r3, r2
    a2d4:	d301      	bcc.n	a2da <waitStableLineOver+0x2a>
    a2d6:	2301      	movs	r3, #1
    a2d8:	e000      	b.n	a2dc <waitStableLineOver+0x2c>
    a2da:	2300      	movs	r3, #0
    a2dc:	1c1a      	adds	r2, r3, #0
    a2de:	2301      	movs	r3, #1
    a2e0:	4013      	ands	r3, r2
    a2e2:	b2db      	uxtb	r3, r3
}
    a2e4:	0018      	movs	r0, r3
    a2e6:	46bd      	mov	sp, r7
    a2e8:	bd80      	pop	{r7, pc}
    a2ea:	46c0      	nop			; (mov r8, r8)
    a2ec:	200007b1 	.word	0x200007b1
    a2f0:	0000ef5d 	.word	0x0000ef5d
    a2f4:	20000780 	.word	0x20000780
    a2f8:	20000795 	.word	0x20000795

0000a2fc <startMotor>:



void startMotor(bool commanded)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	b082      	sub	sp, #8
    a300:	af00      	add	r7, sp, #0
    a302:	0002      	movs	r2, r0
    a304:	1dfb      	adds	r3, r7, #7
    a306:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
    a308:	4b53      	ldr	r3, [pc, #332]	; (a458 <startMotor+0x15c>)
    a30a:	2200      	movs	r2, #0
    a30c:	701a      	strb	r2, [r3, #0]
	
	if (getACPowerState() &&																														//AC Phase is Presnet
    a30e:	4b53      	ldr	r3, [pc, #332]	; (a45c <startMotor+0x160>)
    a310:	4798      	blx	r3
    a312:	1e03      	subs	r3, r0, #0
    a314:	d100      	bne.n	a318 <startMotor+0x1c>
    a316:	e08b      	b.n	a430 <startMotor+0x134>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a318:	4b51      	ldr	r3, [pc, #324]	; (a460 <startMotor+0x164>)
    a31a:	4798      	blx	r3
    a31c:	0003      	movs	r3, r0
	if (getACPowerState() &&																														//AC Phase is Presnet
    a31e:	2b03      	cmp	r3, #3
    a320:	d00b      	beq.n	a33a <startMotor+0x3e>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a322:	4b4f      	ldr	r3, [pc, #316]	; (a460 <startMotor+0x164>)
    a324:	4798      	blx	r3
    a326:	0003      	movs	r3, r0
    a328:	2b02      	cmp	r3, #2
    a32a:	d000      	beq.n	a32e <startMotor+0x32>
    a32c:	e080      	b.n	a430 <startMotor+0x134>
    a32e:	4b4d      	ldr	r3, [pc, #308]	; (a464 <startMotor+0x168>)
    a330:	2220      	movs	r2, #32
    a332:	5c9b      	ldrb	r3, [r3, r2]
    a334:	2b00      	cmp	r3, #0
    a336:	d000      	beq.n	a33a <startMotor+0x3e>
    a338:	e07a      	b.n	a430 <startMotor+0x134>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence)))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a33a:	4b4a      	ldr	r3, [pc, #296]	; (a464 <startMotor+0x168>)
    a33c:	2224      	movs	r2, #36	; 0x24
    a33e:	5c9b      	ldrb	r3, [r3, r2]
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a340:	2b00      	cmp	r3, #0
    a342:	d003      	beq.n	a34c <startMotor+0x50>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence)))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a344:	4b48      	ldr	r3, [pc, #288]	; (a468 <startMotor+0x16c>)
    a346:	4798      	blx	r3
    a348:	1e03      	subs	r3, r0, #0
    a34a:	d105      	bne.n	a358 <startMotor+0x5c>
    a34c:	4b45      	ldr	r3, [pc, #276]	; (a464 <startMotor+0x168>)
    a34e:	2224      	movs	r2, #36	; 0x24
    a350:	5c9b      	ldrb	r3, [r3, r2]
    a352:	2b00      	cmp	r3, #0
    a354:	d000      	beq.n	a358 <startMotor+0x5c>
    a356:	e06b      	b.n	a430 <startMotor+0x134>
	{
		if (!getMotorState())
    a358:	4b44      	ldr	r3, [pc, #272]	; (a46c <startMotor+0x170>)
    a35a:	4798      	blx	r3
    a35c:	0003      	movs	r3, r0
    a35e:	001a      	movs	r2, r3
    a360:	2301      	movs	r3, #1
    a362:	4053      	eors	r3, r2
    a364:	b2db      	uxtb	r3, r3
    a366:	2b00      	cmp	r3, #0
    a368:	d05a      	beq.n	a420 <startMotor+0x124>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
    a36a:	4b41      	ldr	r3, [pc, #260]	; (a470 <startMotor+0x174>)
    a36c:	795b      	ldrb	r3, [r3, #5]
    a36e:	2b00      	cmp	r3, #0
    a370:	d034      	beq.n	a3dc <startMotor+0xe0>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
    a372:	4b3c      	ldr	r3, [pc, #240]	; (a464 <startMotor+0x168>)
    a374:	7fdb      	ldrb	r3, [r3, #31]
    a376:	2b00      	cmp	r3, #0
    a378:	d113      	bne.n	a3a2 <startMotor+0xa6>
    a37a:	4b3e      	ldr	r3, [pc, #248]	; (a474 <startMotor+0x178>)
    a37c:	4798      	blx	r3
    a37e:	1e03      	subs	r3, r0, #0
    a380:	d10f      	bne.n	a3a2 <startMotor+0xa6>
				{
					if (commanded)
    a382:	1dfb      	adds	r3, r7, #7
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	2b00      	cmp	r3, #0
    a388:	d003      	beq.n	a392 <startMotor+0x96>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
    a38a:	2054      	movs	r0, #84	; 0x54
    a38c:	4b3a      	ldr	r3, [pc, #232]	; (a478 <startMotor+0x17c>)
    a38e:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
    a390:	e05f      	b.n	a452 <startMotor+0x156>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a392:	204e      	movs	r0, #78	; 0x4e
    a394:	4b39      	ldr	r3, [pc, #228]	; (a47c <startMotor+0x180>)
    a396:	4798      	blx	r3
    a398:	0003      	movs	r3, r0
    a39a:	001a      	movs	r2, r3
    a39c:	4b38      	ldr	r3, [pc, #224]	; (a480 <startMotor+0x184>)
    a39e:	701a      	strb	r2, [r3, #0]
					return;
    a3a0:	e057      	b.n	a452 <startMotor+0x156>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
    a3a2:	4b33      	ldr	r3, [pc, #204]	; (a470 <startMotor+0x174>)
    a3a4:	791b      	ldrb	r3, [r3, #4]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d018      	beq.n	a3dc <startMotor+0xe0>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
    a3aa:	4b2e      	ldr	r3, [pc, #184]	; (a464 <startMotor+0x168>)
    a3ac:	7fdb      	ldrb	r3, [r3, #31]
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d114      	bne.n	a3dc <startMotor+0xe0>
    a3b2:	4b34      	ldr	r3, [pc, #208]	; (a484 <startMotor+0x188>)
    a3b4:	4798      	blx	r3
    a3b6:	0003      	movs	r3, r0
    a3b8:	2b02      	cmp	r3, #2
    a3ba:	d10f      	bne.n	a3dc <startMotor+0xe0>
					{
						if(commanded)
    a3bc:	1dfb      	adds	r3, r7, #7
    a3be:	781b      	ldrb	r3, [r3, #0]
    a3c0:	2b00      	cmp	r3, #0
    a3c2:	d003      	beq.n	a3cc <startMotor+0xd0>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
    a3c4:	2056      	movs	r0, #86	; 0x56
    a3c6:	4b2c      	ldr	r3, [pc, #176]	; (a478 <startMotor+0x17c>)
    a3c8:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
    a3ca:	e042      	b.n	a452 <startMotor+0x156>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
    a3cc:	2056      	movs	r0, #86	; 0x56
    a3ce:	4b2b      	ldr	r3, [pc, #172]	; (a47c <startMotor+0x180>)
    a3d0:	4798      	blx	r3
    a3d2:	0003      	movs	r3, r0
    a3d4:	001a      	movs	r2, r3
    a3d6:	4b2a      	ldr	r3, [pc, #168]	; (a480 <startMotor+0x184>)
    a3d8:	745a      	strb	r2, [r3, #17]
						return;
    a3da:	e03a      	b.n	a452 <startMotor+0x156>
					}
				}
			}

			STOP_RELAY_ON;
    a3dc:	2101      	movs	r1, #1
    a3de:	202c      	movs	r0, #44	; 0x2c
    a3e0:	4b29      	ldr	r3, [pc, #164]	; (a488 <startMotor+0x18c>)
    a3e2:	4798      	blx	r3
			START_RELAY_ON;
    a3e4:	2101      	movs	r1, #1
    a3e6:	202d      	movs	r0, #45	; 0x2d
    a3e8:	4b27      	ldr	r3, [pc, #156]	; (a488 <startMotor+0x18c>)
    a3ea:	4798      	blx	r3
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
    a3ec:	4b27      	ldr	r3, [pc, #156]	; (a48c <startMotor+0x190>)
    a3ee:	4798      	blx	r3
    a3f0:	0002      	movs	r2, r0
    a3f2:	4b27      	ldr	r3, [pc, #156]	; (a490 <startMotor+0x194>)
    a3f4:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
    a3f6:	4b27      	ldr	r3, [pc, #156]	; (a494 <startMotor+0x198>)
    a3f8:	2201      	movs	r2, #1
    a3fa:	701a      	strb	r2, [r3, #0]
			setMotorState(true);
    a3fc:	2001      	movs	r0, #1
    a3fe:	4b26      	ldr	r3, [pc, #152]	; (a498 <startMotor+0x19c>)
    a400:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a402:	4b1b      	ldr	r3, [pc, #108]	; (a470 <startMotor+0x174>)
    a404:	785b      	ldrb	r3, [r3, #1]
    a406:	2b00      	cmp	r3, #0
    a408:	d005      	beq.n	a416 <startMotor+0x11a>
			{
				enableCurrentBuffer=false;
    a40a:	4b24      	ldr	r3, [pc, #144]	; (a49c <startMotor+0x1a0>)
    a40c:	2200      	movs	r2, #0
    a40e:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
    a410:	4b23      	ldr	r3, [pc, #140]	; (a4a0 <startMotor+0x1a4>)
    a412:	2200      	movs	r2, #0
    a414:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
    a416:	4b23      	ldr	r3, [pc, #140]	; (a4a4 <startMotor+0x1a8>)
    a418:	1dfa      	adds	r2, r7, #7
    a41a:	7812      	ldrb	r2, [r2, #0]
    a41c:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
    a41e:	e017      	b.n	a450 <startMotor+0x154>
		}
		else
		{
			if (commanded)
    a420:	1dfb      	adds	r3, r7, #7
    a422:	781b      	ldrb	r3, [r3, #0]
    a424:	2b00      	cmp	r3, #0
    a426:	d013      	beq.n	a450 <startMotor+0x154>
			{
				setMotorMGRResponse('+');		//motor is already on
    a428:	202b      	movs	r0, #43	; 0x2b
    a42a:	4b13      	ldr	r3, [pc, #76]	; (a478 <startMotor+0x17c>)
    a42c:	4798      	blx	r3
		if (!getMotorState())
    a42e:	e00f      	b.n	a450 <startMotor+0x154>
			}
		}
	}
	else
	{
		if (commanded)
    a430:	1dfb      	adds	r3, r7, #7
    a432:	781b      	ldrb	r3, [r3, #0]
    a434:	2b00      	cmp	r3, #0
    a436:	d003      	beq.n	a440 <startMotor+0x144>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
    a438:	204e      	movs	r0, #78	; 0x4e
    a43a:	4b0f      	ldr	r3, [pc, #60]	; (a478 <startMotor+0x17c>)
    a43c:	4798      	blx	r3
    a43e:	e008      	b.n	a452 <startMotor+0x156>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a440:	204e      	movs	r0, #78	; 0x4e
    a442:	4b0e      	ldr	r3, [pc, #56]	; (a47c <startMotor+0x180>)
    a444:	4798      	blx	r3
    a446:	0003      	movs	r3, r0
    a448:	001a      	movs	r2, r3
    a44a:	4b0d      	ldr	r3, [pc, #52]	; (a480 <startMotor+0x184>)
    a44c:	701a      	strb	r2, [r3, #0]
    a44e:	e000      	b.n	a452 <startMotor+0x156>
		if (!getMotorState())
    a450:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    a452:	46bd      	mov	sp, r7
    a454:	b002      	add	sp, #8
    a456:	bd80      	pop	{r7, pc}
    a458:	2000075e 	.word	0x2000075e
    a45c:	00009bed 	.word	0x00009bed
    a460:	00009c21 	.word	0x00009c21
    a464:	2000064c 	.word	0x2000064c
    a468:	00009c55 	.word	0x00009c55
    a46c:	00009c89 	.word	0x00009c89
    a470:	20000618 	.word	0x20000618
    a474:	000089ad 	.word	0x000089ad
    a478:	000047ed 	.word	0x000047ed
    a47c:	00004615 	.word	0x00004615
    a480:	200006ec 	.word	0x200006ec
    a484:	0000887d 	.word	0x0000887d
    a488:	00008619 	.word	0x00008619
    a48c:	0000ef5d 	.word	0x0000ef5d
    a490:	20000758 	.word	0x20000758
    a494:	2000075d 	.word	0x2000075d
    a498:	00009c9d 	.word	0x00009c9d
    a49c:	20000724 	.word	0x20000724
    a4a0:	2000074a 	.word	0x2000074a
    a4a4:	200006e8 	.word	0x200006e8

0000a4a8 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
    a4a8:	b590      	push	{r4, r7, lr}
    a4aa:	b083      	sub	sp, #12
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	0004      	movs	r4, r0
    a4b0:	0008      	movs	r0, r1
    a4b2:	0011      	movs	r1, r2
    a4b4:	1dfb      	adds	r3, r7, #7
    a4b6:	1c22      	adds	r2, r4, #0
    a4b8:	701a      	strb	r2, [r3, #0]
    a4ba:	1dbb      	adds	r3, r7, #6
    a4bc:	1c02      	adds	r2, r0, #0
    a4be:	701a      	strb	r2, [r3, #0]
    a4c0:	1d7b      	adds	r3, r7, #5
    a4c2:	1c0a      	adds	r2, r1, #0
    a4c4:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
    a4c6:	1dbb      	adds	r3, r7, #6
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d103      	bne.n	a4d6 <stopMotor+0x2e>
    a4ce:	4b19      	ldr	r3, [pc, #100]	; (a534 <stopMotor+0x8c>)
    a4d0:	4798      	blx	r3
    a4d2:	1e03      	subs	r3, r0, #0
    a4d4:	d021      	beq.n	a51a <stopMotor+0x72>
	{
		singlePhasingTimerOn = false;
    a4d6:	4b18      	ldr	r3, [pc, #96]	; (a538 <stopMotor+0x90>)
    a4d8:	2200      	movs	r2, #0
    a4da:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
    a4dc:	2100      	movs	r1, #0
    a4de:	202c      	movs	r0, #44	; 0x2c
    a4e0:	4b16      	ldr	r3, [pc, #88]	; (a53c <stopMotor+0x94>)
    a4e2:	4798      	blx	r3
		tempStopSequenceTimer = xTaskGetTickCount();
    a4e4:	4b16      	ldr	r3, [pc, #88]	; (a540 <stopMotor+0x98>)
    a4e6:	4798      	blx	r3
    a4e8:	0002      	movs	r2, r0
    a4ea:	4b16      	ldr	r3, [pc, #88]	; (a544 <stopMotor+0x9c>)
    a4ec:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
    a4ee:	4b16      	ldr	r3, [pc, #88]	; (a548 <stopMotor+0xa0>)
    a4f0:	2201      	movs	r2, #1
    a4f2:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
    a4f4:	2000      	movs	r0, #0
    a4f6:	4b15      	ldr	r3, [pc, #84]	; (a54c <stopMotor+0xa4>)
    a4f8:	4798      	blx	r3
		gotOffCommand = commanded;
    a4fa:	4b15      	ldr	r3, [pc, #84]	; (a550 <stopMotor+0xa8>)
    a4fc:	1dfa      	adds	r2, r7, #7
    a4fe:	7812      	ldrb	r2, [r2, #0]
    a500:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
    a502:	4b14      	ldr	r3, [pc, #80]	; (a554 <stopMotor+0xac>)
    a504:	1d7a      	adds	r2, r7, #5
    a506:	7812      	ldrb	r2, [r2, #0]
    a508:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a50a:	4b13      	ldr	r3, [pc, #76]	; (a558 <stopMotor+0xb0>)
    a50c:	785b      	ldrb	r3, [r3, #1]
    a50e:	2b00      	cmp	r3, #0
    a510:	d00b      	beq.n	a52a <stopMotor+0x82>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
    a512:	4b12      	ldr	r3, [pc, #72]	; (a55c <stopMotor+0xb4>)
    a514:	2200      	movs	r2, #0
    a516:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a518:	e007      	b.n	a52a <stopMotor+0x82>
		}
	}
	else
	{
		if (commanded)
    a51a:	1dfb      	adds	r3, r7, #7
    a51c:	781b      	ldrb	r3, [r3, #0]
    a51e:	2b00      	cmp	r3, #0
    a520:	d003      	beq.n	a52a <stopMotor+0x82>
		{
			setMotorMGRResponse('-');	//motor is already off
    a522:	202d      	movs	r0, #45	; 0x2d
    a524:	4b0e      	ldr	r3, [pc, #56]	; (a560 <stopMotor+0xb8>)
    a526:	4798      	blx	r3
		}
	}
}
    a528:	e7ff      	b.n	a52a <stopMotor+0x82>
    a52a:	46c0      	nop			; (mov r8, r8)
    a52c:	46bd      	mov	sp, r7
    a52e:	b003      	add	sp, #12
    a530:	bd90      	pop	{r4, r7, pc}
    a532:	46c0      	nop			; (mov r8, r8)
    a534:	00009c89 	.word	0x00009c89
    a538:	20000755 	.word	0x20000755
    a53c:	00008619 	.word	0x00008619
    a540:	0000ef5d 	.word	0x0000ef5d
    a544:	2000076c 	.word	0x2000076c
    a548:	2000074d 	.word	0x2000074d
    a54c:	00009c9d 	.word	0x00009c9d
    a550:	200007b0 	.word	0x200007b0
    a554:	20000768 	.word	0x20000768
    a558:	20000618 	.word	0x20000618
    a55c:	2000074a 	.word	0x2000074a
    a560:	000047ed 	.word	0x000047ed

0000a564 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
    a564:	b580      	push	{r7, lr}
    a566:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
    a568:	4b09      	ldr	r3, [pc, #36]	; (a590 <startMotorTimerOver+0x2c>)
    a56a:	4798      	blx	r3
    a56c:	0002      	movs	r2, r0
    a56e:	4b09      	ldr	r3, [pc, #36]	; (a594 <startMotorTimerOver+0x30>)
    a570:	681b      	ldr	r3, [r3, #0]
    a572:	1ad1      	subs	r1, r2, r3
    a574:	4b08      	ldr	r3, [pc, #32]	; (a598 <startMotorTimerOver+0x34>)
    a576:	885b      	ldrh	r3, [r3, #2]
    a578:	001a      	movs	r2, r3
    a57a:	23fa      	movs	r3, #250	; 0xfa
    a57c:	009b      	lsls	r3, r3, #2
    a57e:	435a      	muls	r2, r3
    a580:	2300      	movs	r3, #0
    a582:	4291      	cmp	r1, r2
    a584:	415b      	adcs	r3, r3
    a586:	b2db      	uxtb	r3, r3
}
    a588:	0018      	movs	r0, r3
    a58a:	46bd      	mov	sp, r7
    a58c:	bd80      	pop	{r7, pc}
    a58e:	46c0      	nop			; (mov r8, r8)
    a590:	0000ef5d 	.word	0x0000ef5d
    a594:	20000764 	.word	0x20000764
    a598:	2000064c 	.word	0x2000064c

0000a59c <unknownMotorOff>:

void unknownMotorOff(void)
{
    a59c:	b580      	push	{r7, lr}
    a59e:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
    a5a0:	2200      	movs	r2, #0
    a5a2:	2101      	movs	r1, #1
    a5a4:	2000      	movs	r0, #0
    a5a6:	4b06      	ldr	r3, [pc, #24]	; (a5c0 <unknownMotorOff+0x24>)
    a5a8:	4798      	blx	r3
	simEventTemp[2] = registerEvent('U');
    a5aa:	2055      	movs	r0, #85	; 0x55
    a5ac:	4b05      	ldr	r3, [pc, #20]	; (a5c4 <unknownMotorOff+0x28>)
    a5ae:	4798      	blx	r3
    a5b0:	0003      	movs	r3, r0
    a5b2:	001a      	movs	r2, r3
    a5b4:	4b04      	ldr	r3, [pc, #16]	; (a5c8 <unknownMotorOff+0x2c>)
    a5b6:	709a      	strb	r2, [r3, #2]
}
    a5b8:	46c0      	nop			; (mov r8, r8)
    a5ba:	46bd      	mov	sp, r7
    a5bc:	bd80      	pop	{r7, pc}
    a5be:	46c0      	nop			; (mov r8, r8)
    a5c0:	0000a4a9 	.word	0x0000a4a9
    a5c4:	00004615 	.word	0x00004615
    a5c8:	200006ec 	.word	0x200006ec

0000a5cc <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
    a5cc:	b580      	push	{r7, lr}
    a5ce:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
    a5d0:	4b0d      	ldr	r3, [pc, #52]	; (a608 <singlePhasingTimerOver+0x3c>)
    a5d2:	781b      	ldrb	r3, [r3, #0]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d00e      	beq.n	a5f6 <singlePhasingTimerOver+0x2a>
    a5d8:	4b0c      	ldr	r3, [pc, #48]	; (a60c <singlePhasingTimerOver+0x40>)
    a5da:	4798      	blx	r3
    a5dc:	0002      	movs	r2, r0
    a5de:	4b0c      	ldr	r3, [pc, #48]	; (a610 <singlePhasingTimerOver+0x44>)
    a5e0:	681b      	ldr	r3, [r3, #0]
    a5e2:	1ad2      	subs	r2, r2, r3
    a5e4:	4b0b      	ldr	r3, [pc, #44]	; (a614 <singlePhasingTimerOver+0x48>)
    a5e6:	781b      	ldrb	r3, [r3, #0]
    a5e8:	0019      	movs	r1, r3
    a5ea:	2364      	movs	r3, #100	; 0x64
    a5ec:	434b      	muls	r3, r1
    a5ee:	429a      	cmp	r2, r3
    a5f0:	d901      	bls.n	a5f6 <singlePhasingTimerOver+0x2a>
    a5f2:	2301      	movs	r3, #1
    a5f4:	e000      	b.n	a5f8 <singlePhasingTimerOver+0x2c>
    a5f6:	2300      	movs	r3, #0
    a5f8:	1c1a      	adds	r2, r3, #0
    a5fa:	2301      	movs	r3, #1
    a5fc:	4013      	ands	r3, r2
    a5fe:	b2db      	uxtb	r3, r3
}
    a600:	0018      	movs	r0, r3
    a602:	46bd      	mov	sp, r7
    a604:	bd80      	pop	{r7, pc}
    a606:	46c0      	nop			; (mov r8, r8)
    a608:	20000755 	.word	0x20000755
    a60c:	0000ef5d 	.word	0x0000ef5d
    a610:	20000744 	.word	0x20000744
    a614:	20000734 	.word	0x20000734

0000a618 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
    a618:	b580      	push	{r7, lr}
    a61a:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
    a61c:	2101      	movs	r1, #1
    a61e:	2027      	movs	r0, #39	; 0x27
    a620:	4b08      	ldr	r3, [pc, #32]	; (a644 <operateOnSinglePhasing+0x2c>)
    a622:	4798      	blx	r3
	stopMotor(false,true,false);
    a624:	2200      	movs	r2, #0
    a626:	2101      	movs	r1, #1
    a628:	2000      	movs	r0, #0
    a62a:	4b07      	ldr	r3, [pc, #28]	; (a648 <operateOnSinglePhasing+0x30>)
    a62c:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
    a62e:	2046      	movs	r0, #70	; 0x46
    a630:	4b06      	ldr	r3, [pc, #24]	; (a64c <operateOnSinglePhasing+0x34>)
    a632:	4798      	blx	r3
    a634:	0003      	movs	r3, r0
    a636:	001a      	movs	r2, r3
    a638:	4b05      	ldr	r3, [pc, #20]	; (a650 <operateOnSinglePhasing+0x38>)
    a63a:	70da      	strb	r2, [r3, #3]
}
    a63c:	46c0      	nop			; (mov r8, r8)
    a63e:	46bd      	mov	sp, r7
    a640:	bd80      	pop	{r7, pc}
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	00008619 	.word	0x00008619
    a648:	0000a4a9 	.word	0x0000a4a9
    a64c:	00004615 	.word	0x00004615
    a650:	200006ec 	.word	0x200006ec

0000a654 <terminateStopRelay>:

void terminateStopRelay(void)
{
    a654:	b580      	push	{r7, lr}
    a656:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
    a658:	4b27      	ldr	r3, [pc, #156]	; (a6f8 <terminateStopRelay+0xa4>)
    a65a:	781b      	ldrb	r3, [r3, #0]
    a65c:	2b00      	cmp	r3, #0
    a65e:	d047      	beq.n	a6f0 <terminateStopRelay+0x9c>
    a660:	4b26      	ldr	r3, [pc, #152]	; (a6fc <terminateStopRelay+0xa8>)
    a662:	4798      	blx	r3
    a664:	0002      	movs	r2, r0
    a666:	4b26      	ldr	r3, [pc, #152]	; (a700 <terminateStopRelay+0xac>)
    a668:	681b      	ldr	r3, [r3, #0]
    a66a:	1ad3      	subs	r3, r2, r3
    a66c:	4a25      	ldr	r2, [pc, #148]	; (a704 <terminateStopRelay+0xb0>)
    a66e:	7812      	ldrb	r2, [r2, #0]
    a670:	0011      	movs	r1, r2
    a672:	2264      	movs	r2, #100	; 0x64
    a674:	434a      	muls	r2, r1
    a676:	4293      	cmp	r3, r2
    a678:	d93a      	bls.n	a6f0 <terminateStopRelay+0x9c>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
    a67a:	4b1f      	ldr	r3, [pc, #124]	; (a6f8 <terminateStopRelay+0xa4>)
    a67c:	2200      	movs	r2, #0
    a67e:	701a      	strb	r2, [r3, #0]
		if (!getMotorState_from_pin())		//motor has turned off
    a680:	4b21      	ldr	r3, [pc, #132]	; (a708 <terminateStopRelay+0xb4>)
    a682:	4798      	blx	r3
    a684:	0003      	movs	r3, r0
    a686:	001a      	movs	r2, r3
    a688:	2301      	movs	r3, #1
    a68a:	4053      	eors	r3, r2
    a68c:	b2db      	uxtb	r3, r3
    a68e:	2b00      	cmp	r3, #0
    a690:	d019      	beq.n	a6c6 <terminateStopRelay+0x72>
		{
			if (gotOffCommand)
    a692:	4b1e      	ldr	r3, [pc, #120]	; (a70c <terminateStopRelay+0xb8>)
    a694:	781b      	ldrb	r3, [r3, #0]
    a696:	2b00      	cmp	r3, #0
    a698:	d006      	beq.n	a6a8 <terminateStopRelay+0x54>
			{
				gotOffCommand = false;
    a69a:	4b1c      	ldr	r3, [pc, #112]	; (a70c <terminateStopRelay+0xb8>)
    a69c:	2200      	movs	r2, #0
    a69e:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
    a6a0:	204f      	movs	r0, #79	; 0x4f
    a6a2:	4b1b      	ldr	r3, [pc, #108]	; (a710 <terminateStopRelay+0xbc>)
    a6a4:	4798      	blx	r3
    a6a6:	e020      	b.n	a6ea <terminateStopRelay+0x96>
			}
			else if(offButtonPressed)
    a6a8:	4b1a      	ldr	r3, [pc, #104]	; (a714 <terminateStopRelay+0xc0>)
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	2b00      	cmp	r3, #0
    a6ae:	d01c      	beq.n	a6ea <terminateStopRelay+0x96>
			{
				offButtonPressed=false;
    a6b0:	4b18      	ldr	r3, [pc, #96]	; (a714 <terminateStopRelay+0xc0>)
    a6b2:	2200      	movs	r2, #0
    a6b4:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
    a6b6:	204f      	movs	r0, #79	; 0x4f
    a6b8:	4b17      	ldr	r3, [pc, #92]	; (a718 <terminateStopRelay+0xc4>)
    a6ba:	4798      	blx	r3
    a6bc:	0003      	movs	r3, r0
    a6be:	001a      	movs	r2, r3
    a6c0:	4b16      	ldr	r3, [pc, #88]	; (a71c <terminateStopRelay+0xc8>)
    a6c2:	721a      	strb	r2, [r3, #8]
    a6c4:	e011      	b.n	a6ea <terminateStopRelay+0x96>
			}
		}
		else
		{
			if (gotOffCommand)
    a6c6:	4b11      	ldr	r3, [pc, #68]	; (a70c <terminateStopRelay+0xb8>)
    a6c8:	781b      	ldrb	r3, [r3, #0]
    a6ca:	2b00      	cmp	r3, #0
    a6cc:	d006      	beq.n	a6dc <terminateStopRelay+0x88>
			{
				gotOffCommand = false;
    a6ce:	4b0f      	ldr	r3, [pc, #60]	; (a70c <terminateStopRelay+0xb8>)
    a6d0:	2200      	movs	r2, #0
    a6d2:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
    a6d4:	2050      	movs	r0, #80	; 0x50
    a6d6:	4b0e      	ldr	r3, [pc, #56]	; (a710 <terminateStopRelay+0xbc>)
    a6d8:	4798      	blx	r3
    a6da:	e006      	b.n	a6ea <terminateStopRelay+0x96>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
    a6dc:	2050      	movs	r0, #80	; 0x50
    a6de:	4b0e      	ldr	r3, [pc, #56]	; (a718 <terminateStopRelay+0xc4>)
    a6e0:	4798      	blx	r3
    a6e2:	0003      	movs	r3, r0
    a6e4:	001a      	movs	r2, r3
    a6e6:	4b0d      	ldr	r3, [pc, #52]	; (a71c <terminateStopRelay+0xc8>)
    a6e8:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
    a6ea:	4b0a      	ldr	r3, [pc, #40]	; (a714 <terminateStopRelay+0xc0>)
    a6ec:	2200      	movs	r2, #0
    a6ee:	701a      	strb	r2, [r3, #0]
	}
}
    a6f0:	46c0      	nop			; (mov r8, r8)
    a6f2:	46bd      	mov	sp, r7
    a6f4:	bd80      	pop	{r7, pc}
    a6f6:	46c0      	nop			; (mov r8, r8)
    a6f8:	2000074d 	.word	0x2000074d
    a6fc:	0000ef5d 	.word	0x0000ef5d
    a700:	2000076c 	.word	0x2000076c
    a704:	200007fe 	.word	0x200007fe
    a708:	00009cdd 	.word	0x00009cdd
    a70c:	200007b0 	.word	0x200007b0
    a710:	000047ed 	.word	0x000047ed
    a714:	20000768 	.word	0x20000768
    a718:	00004615 	.word	0x00004615
    a71c:	200006ec 	.word	0x200006ec

0000a720 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
    a720:	b580      	push	{r7, lr}
    a722:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
    a724:	4b13      	ldr	r3, [pc, #76]	; (a774 <terminateStarDeltaTimer+0x54>)
    a726:	781b      	ldrb	r3, [r3, #0]
    a728:	2b00      	cmp	r3, #0
    a72a:	d020      	beq.n	a76e <terminateStarDeltaTimer+0x4e>
    a72c:	4b12      	ldr	r3, [pc, #72]	; (a778 <terminateStarDeltaTimer+0x58>)
    a72e:	4798      	blx	r3
    a730:	0002      	movs	r2, r0
    a732:	4b12      	ldr	r3, [pc, #72]	; (a77c <terminateStarDeltaTimer+0x5c>)
    a734:	681b      	ldr	r3, [r3, #0]
    a736:	1ad2      	subs	r2, r2, r3
    a738:	4b11      	ldr	r3, [pc, #68]	; (a780 <terminateStarDeltaTimer+0x60>)
    a73a:	88db      	ldrh	r3, [r3, #6]
    a73c:	0019      	movs	r1, r3
    a73e:	23fa      	movs	r3, #250	; 0xfa
    a740:	009b      	lsls	r3, r3, #2
    a742:	434b      	muls	r3, r1
    a744:	429a      	cmp	r2, r3
    a746:	d912      	bls.n	a76e <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
    a748:	2100      	movs	r1, #0
    a74a:	202d      	movs	r0, #45	; 0x2d
    a74c:	4b0d      	ldr	r3, [pc, #52]	; (a784 <terminateStarDeltaTimer+0x64>)
    a74e:	4798      	blx	r3
		starDeltaTimerOn=false;
    a750:	4b08      	ldr	r3, [pc, #32]	; (a774 <terminateStarDeltaTimer+0x54>)
    a752:	2200      	movs	r2, #0
    a754:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a756:	4b0c      	ldr	r3, [pc, #48]	; (a788 <terminateStarDeltaTimer+0x68>)
    a758:	785b      	ldrb	r3, [r3, #1]
    a75a:	2b00      	cmp	r3, #0
    a75c:	d007      	beq.n	a76e <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
    a75e:	4b0b      	ldr	r3, [pc, #44]	; (a78c <terminateStarDeltaTimer+0x6c>)
    a760:	2201      	movs	r2, #1
    a762:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
    a764:	4b04      	ldr	r3, [pc, #16]	; (a778 <terminateStarDeltaTimer+0x58>)
    a766:	4798      	blx	r3
    a768:	0002      	movs	r2, r0
    a76a:	4b04      	ldr	r3, [pc, #16]	; (a77c <terminateStarDeltaTimer+0x5c>)
    a76c:	601a      	str	r2, [r3, #0]
		}
	}
}
    a76e:	46c0      	nop			; (mov r8, r8)
    a770:	46bd      	mov	sp, r7
    a772:	bd80      	pop	{r7, pc}
    a774:	2000075f 	.word	0x2000075f
    a778:	0000ef5d 	.word	0x0000ef5d
    a77c:	20000758 	.word	0x20000758
    a780:	2000064c 	.word	0x2000064c
    a784:	00008619 	.word	0x00008619
    a788:	20000618 	.word	0x20000618
    a78c:	20000724 	.word	0x20000724

0000a790 <terminateStartRelay>:

void terminateStartRelay(void)
{
    a790:	b590      	push	{r4, r7, lr}
    a792:	b083      	sub	sp, #12
    a794:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
    a796:	4b36      	ldr	r3, [pc, #216]	; (a870 <terminateStartRelay+0xe0>)
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	2b00      	cmp	r3, #0
    a79c:	d064      	beq.n	a868 <terminateStartRelay+0xd8>
    a79e:	4b35      	ldr	r3, [pc, #212]	; (a874 <terminateStartRelay+0xe4>)
    a7a0:	4798      	blx	r3
    a7a2:	0002      	movs	r2, r0
    a7a4:	4b34      	ldr	r3, [pc, #208]	; (a878 <terminateStartRelay+0xe8>)
    a7a6:	681b      	ldr	r3, [r3, #0]
    a7a8:	1ad3      	subs	r3, r2, r3
    a7aa:	4a34      	ldr	r2, [pc, #208]	; (a87c <terminateStartRelay+0xec>)
    a7ac:	7812      	ldrb	r2, [r2, #0]
    a7ae:	0011      	movs	r1, r2
    a7b0:	2264      	movs	r2, #100	; 0x64
    a7b2:	434a      	muls	r2, r1
    a7b4:	4293      	cmp	r3, r2
    a7b6:	d957      	bls.n	a868 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
    a7b8:	4b31      	ldr	r3, [pc, #196]	; (a880 <terminateStartRelay+0xf0>)
    a7ba:	88db      	ldrh	r3, [r3, #6]
    a7bc:	001a      	movs	r2, r3
    a7be:	0013      	movs	r3, r2
    a7c0:	009b      	lsls	r3, r3, #2
    a7c2:	189b      	adds	r3, r3, r2
    a7c4:	005b      	lsls	r3, r3, #1
    a7c6:	001a      	movs	r2, r3
    a7c8:	4b2c      	ldr	r3, [pc, #176]	; (a87c <terminateStartRelay+0xec>)
    a7ca:	781b      	ldrb	r3, [r3, #0]
    a7cc:	429a      	cmp	r2, r3
    a7ce:	d810      	bhi.n	a7f2 <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
    a7d0:	2100      	movs	r1, #0
    a7d2:	202d      	movs	r0, #45	; 0x2d
    a7d4:	4b2b      	ldr	r3, [pc, #172]	; (a884 <terminateStartRelay+0xf4>)
    a7d6:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
    a7d8:	4b26      	ldr	r3, [pc, #152]	; (a874 <terminateStartRelay+0xe4>)
    a7da:	4798      	blx	r3
    a7dc:	0002      	movs	r2, r0
    a7de:	4b26      	ldr	r3, [pc, #152]	; (a878 <terminateStartRelay+0xe8>)
    a7e0:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a7e2:	4b29      	ldr	r3, [pc, #164]	; (a888 <terminateStartRelay+0xf8>)
    a7e4:	785b      	ldrb	r3, [r3, #1]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d006      	beq.n	a7f8 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
    a7ea:	4b28      	ldr	r3, [pc, #160]	; (a88c <terminateStartRelay+0xfc>)
    a7ec:	2201      	movs	r2, #1
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	e002      	b.n	a7f8 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
    a7f2:	4b27      	ldr	r3, [pc, #156]	; (a890 <terminateStartRelay+0x100>)
    a7f4:	2201      	movs	r2, #1
    a7f6:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
    a7f8:	4b1d      	ldr	r3, [pc, #116]	; (a870 <terminateStartRelay+0xe0>)
    a7fa:	2200      	movs	r2, #0
    a7fc:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
    a7fe:	1dfc      	adds	r4, r7, #7
    a800:	4b24      	ldr	r3, [pc, #144]	; (a894 <terminateStartRelay+0x104>)
    a802:	4798      	blx	r3
    a804:	0003      	movs	r3, r0
    a806:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
    a808:	4b23      	ldr	r3, [pc, #140]	; (a898 <terminateStartRelay+0x108>)
    a80a:	781b      	ldrb	r3, [r3, #0]
    a80c:	2b00      	cmp	r3, #0
    a80e:	d013      	beq.n	a838 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
    a810:	4b21      	ldr	r3, [pc, #132]	; (a898 <terminateStartRelay+0x108>)
    a812:	2200      	movs	r2, #0
    a814:	701a      	strb	r2, [r3, #0]
			if (motor)
    a816:	1dfb      	adds	r3, r7, #7
    a818:	781b      	ldrb	r3, [r3, #0]
    a81a:	2b00      	cmp	r3, #0
    a81c:	d003      	beq.n	a826 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
    a81e:	2053      	movs	r0, #83	; 0x53
    a820:	4b1e      	ldr	r3, [pc, #120]	; (a89c <terminateStartRelay+0x10c>)
    a822:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
    a824:	e020      	b.n	a868 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    a826:	2200      	movs	r2, #0
    a828:	2101      	movs	r1, #1
    a82a:	2000      	movs	r0, #0
    a82c:	4b1c      	ldr	r3, [pc, #112]	; (a8a0 <terminateStartRelay+0x110>)
    a82e:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
    a830:	204e      	movs	r0, #78	; 0x4e
    a832:	4b1a      	ldr	r3, [pc, #104]	; (a89c <terminateStartRelay+0x10c>)
    a834:	4798      	blx	r3
}
    a836:	e017      	b.n	a868 <terminateStartRelay+0xd8>
			if (motor)
    a838:	1dfb      	adds	r3, r7, #7
    a83a:	781b      	ldrb	r3, [r3, #0]
    a83c:	2b00      	cmp	r3, #0
    a83e:	d007      	beq.n	a850 <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
    a840:	2053      	movs	r0, #83	; 0x53
    a842:	4b18      	ldr	r3, [pc, #96]	; (a8a4 <terminateStartRelay+0x114>)
    a844:	4798      	blx	r3
    a846:	0003      	movs	r3, r0
    a848:	001a      	movs	r2, r3
    a84a:	4b17      	ldr	r3, [pc, #92]	; (a8a8 <terminateStartRelay+0x118>)
    a84c:	71da      	strb	r2, [r3, #7]
}
    a84e:	e00b      	b.n	a868 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    a850:	2200      	movs	r2, #0
    a852:	2101      	movs	r1, #1
    a854:	2000      	movs	r0, #0
    a856:	4b12      	ldr	r3, [pc, #72]	; (a8a0 <terminateStartRelay+0x110>)
    a858:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a85a:	204e      	movs	r0, #78	; 0x4e
    a85c:	4b11      	ldr	r3, [pc, #68]	; (a8a4 <terminateStartRelay+0x114>)
    a85e:	4798      	blx	r3
    a860:	0003      	movs	r3, r0
    a862:	001a      	movs	r2, r3
    a864:	4b10      	ldr	r3, [pc, #64]	; (a8a8 <terminateStartRelay+0x118>)
    a866:	701a      	strb	r2, [r3, #0]
}
    a868:	46c0      	nop			; (mov r8, r8)
    a86a:	46bd      	mov	sp, r7
    a86c:	b003      	add	sp, #12
    a86e:	bd90      	pop	{r4, r7, pc}
    a870:	2000075d 	.word	0x2000075d
    a874:	0000ef5d 	.word	0x0000ef5d
    a878:	20000758 	.word	0x20000758
    a87c:	200007bc 	.word	0x200007bc
    a880:	2000064c 	.word	0x2000064c
    a884:	00008619 	.word	0x00008619
    a888:	20000618 	.word	0x20000618
    a88c:	20000724 	.word	0x20000724
    a890:	2000075f 	.word	0x2000075f
    a894:	00009cdd 	.word	0x00009cdd
    a898:	200006e8 	.word	0x200006e8
    a89c:	000047ed 	.word	0x000047ed
    a8a0:	0000a4a9 	.word	0x0000a4a9
    a8a4:	00004615 	.word	0x00004615
    a8a8:	200006ec 	.word	0x200006ec

0000a8ac <statusOnCall>:

void statusOnCall(void)
{
    a8ac:	b590      	push	{r4, r7, lr}
    a8ae:	b083      	sub	sp, #12
    a8b0:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
    a8b2:	1dfb      	adds	r3, r7, #7
    a8b4:	2200      	movs	r2, #0
    a8b6:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
    a8b8:	1dbc      	adds	r4, r7, #6
    a8ba:	4b3b      	ldr	r3, [pc, #236]	; (a9a8 <statusOnCall+0xfc>)
    a8bc:	4798      	blx	r3
    a8be:	0003      	movs	r3, r0
    a8c0:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
    a8c2:	1dbb      	adds	r3, r7, #6
    a8c4:	781b      	ldrb	r3, [r3, #0]
    a8c6:	2b00      	cmp	r3, #0
    a8c8:	d109      	bne.n	a8de <statusOnCall+0x32>
	{
		status[index++]='L';
    a8ca:	1dfb      	adds	r3, r7, #7
    a8cc:	781b      	ldrb	r3, [r3, #0]
    a8ce:	1dfa      	adds	r2, r7, #7
    a8d0:	1c59      	adds	r1, r3, #1
    a8d2:	7011      	strb	r1, [r2, #0]
    a8d4:	001a      	movs	r2, r3
    a8d6:	003b      	movs	r3, r7
    a8d8:	214c      	movs	r1, #76	; 0x4c
    a8da:	5499      	strb	r1, [r3, r2]
    a8dc:	e03b      	b.n	a956 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
    a8de:	1dbb      	adds	r3, r7, #6
    a8e0:	781b      	ldrb	r3, [r3, #0]
    a8e2:	2b02      	cmp	r3, #2
    a8e4:	d109      	bne.n	a8fa <statusOnCall+0x4e>
	{
		status[index++]='A';
    a8e6:	1dfb      	adds	r3, r7, #7
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	1dfa      	adds	r2, r7, #7
    a8ec:	1c59      	adds	r1, r3, #1
    a8ee:	7011      	strb	r1, [r2, #0]
    a8f0:	001a      	movs	r2, r3
    a8f2:	003b      	movs	r3, r7
    a8f4:	2141      	movs	r1, #65	; 0x41
    a8f6:	5499      	strb	r1, [r3, r2]
    a8f8:	e02d      	b.n	a956 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
    a8fa:	1dbb      	adds	r3, r7, #6
    a8fc:	781b      	ldrb	r3, [r3, #0]
    a8fe:	2b03      	cmp	r3, #3
    a900:	d129      	bne.n	a956 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
    a902:	1d7c      	adds	r4, r7, #5
    a904:	4b29      	ldr	r3, [pc, #164]	; (a9ac <statusOnCall+0x100>)
    a906:	4798      	blx	r3
    a908:	0003      	movs	r3, r0
    a90a:	7023      	strb	r3, [r4, #0]
		if (temp)
    a90c:	1d7b      	adds	r3, r7, #5
    a90e:	781b      	ldrb	r3, [r3, #0]
    a910:	2b00      	cmp	r3, #0
    a912:	d009      	beq.n	a928 <statusOnCall+0x7c>
		{
			status[index++]='+';
    a914:	1dfb      	adds	r3, r7, #7
    a916:	781b      	ldrb	r3, [r3, #0]
    a918:	1dfa      	adds	r2, r7, #7
    a91a:	1c59      	adds	r1, r3, #1
    a91c:	7011      	strb	r1, [r2, #0]
    a91e:	001a      	movs	r2, r3
    a920:	003b      	movs	r3, r7
    a922:	212b      	movs	r1, #43	; 0x2b
    a924:	5499      	strb	r1, [r3, r2]
    a926:	e016      	b.n	a956 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
    a928:	1dfb      	adds	r3, r7, #7
    a92a:	781b      	ldrb	r3, [r3, #0]
    a92c:	1dfa      	adds	r2, r7, #7
    a92e:	1c59      	adds	r1, r3, #1
    a930:	7011      	strb	r1, [r2, #0]
    a932:	001a      	movs	r2, r3
    a934:	003b      	movs	r3, r7
    a936:	215f      	movs	r1, #95	; 0x5f
    a938:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
    a93a:	4b1d      	ldr	r3, [pc, #116]	; (a9b0 <statusOnCall+0x104>)
    a93c:	781b      	ldrb	r3, [r3, #0]
    a93e:	b2db      	uxtb	r3, r3
    a940:	2b02      	cmp	r3, #2
    a942:	d008      	beq.n	a956 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
    a944:	1dfb      	adds	r3, r7, #7
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	1dfa      	adds	r2, r7, #7
    a94a:	1c59      	adds	r1, r3, #1
    a94c:	7011      	strb	r1, [r2, #0]
    a94e:	001a      	movs	r2, r3
    a950:	003b      	movs	r3, r7
    a952:	2141      	movs	r1, #65	; 0x41
    a954:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
    a956:	4b17      	ldr	r3, [pc, #92]	; (a9b4 <statusOnCall+0x108>)
    a958:	785b      	ldrb	r3, [r3, #1]
    a95a:	2b00      	cmp	r3, #0
    a95c:	d009      	beq.n	a972 <statusOnCall+0xc6>
	{
		status[index++]=')';
    a95e:	1dfb      	adds	r3, r7, #7
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	1dfa      	adds	r2, r7, #7
    a964:	1c59      	adds	r1, r3, #1
    a966:	7011      	strb	r1, [r2, #0]
    a968:	001a      	movs	r2, r3
    a96a:	003b      	movs	r3, r7
    a96c:	2129      	movs	r1, #41	; 0x29
    a96e:	5499      	strb	r1, [r3, r2]
    a970:	e008      	b.n	a984 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
    a972:	1dfb      	adds	r3, r7, #7
    a974:	781b      	ldrb	r3, [r3, #0]
    a976:	1dfa      	adds	r2, r7, #7
    a978:	1c59      	adds	r1, r3, #1
    a97a:	7011      	strb	r1, [r2, #0]
    a97c:	001a      	movs	r2, r3
    a97e:	003b      	movs	r3, r7
    a980:	215b      	movs	r1, #91	; 0x5b
    a982:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
    a984:	1dfb      	adds	r3, r7, #7
    a986:	781b      	ldrb	r3, [r3, #0]
    a988:	1dfa      	adds	r2, r7, #7
    a98a:	1c59      	adds	r1, r3, #1
    a98c:	7011      	strb	r1, [r2, #0]
    a98e:	001a      	movs	r2, r3
    a990:	003b      	movs	r3, r7
    a992:	2100      	movs	r1, #0
    a994:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
    a996:	003b      	movs	r3, r7
    a998:	0018      	movs	r0, r3
    a99a:	4b07      	ldr	r3, [pc, #28]	; (a9b8 <statusOnCall+0x10c>)
    a99c:	4798      	blx	r3
}
    a99e:	46c0      	nop			; (mov r8, r8)
    a9a0:	46bd      	mov	sp, r7
    a9a2:	b003      	add	sp, #12
    a9a4:	bd90      	pop	{r4, r7, pc}
    a9a6:	46c0      	nop			; (mov r8, r8)
    a9a8:	0000a16d 	.word	0x0000a16d
    a9ac:	00009cdd 	.word	0x00009cdd
    a9b0:	2000070c 	.word	0x2000070c
    a9b4:	2000064c 	.word	0x2000064c
    a9b8:	000044e1 	.word	0x000044e1

0000a9bc <voltageOnCall>:

void voltageOnCall(void)
{
    a9bc:	b590      	push	{r4, r7, lr}
    a9be:	b087      	sub	sp, #28
    a9c0:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"0%lu0%lu0%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
    a9c2:	4b0a      	ldr	r3, [pc, #40]	; (a9ec <voltageOnCall+0x30>)
    a9c4:	681a      	ldr	r2, [r3, #0]
    a9c6:	4b09      	ldr	r3, [pc, #36]	; (a9ec <voltageOnCall+0x30>)
    a9c8:	685c      	ldr	r4, [r3, #4]
    a9ca:	4b08      	ldr	r3, [pc, #32]	; (a9ec <voltageOnCall+0x30>)
    a9cc:	689b      	ldr	r3, [r3, #8]
    a9ce:	4908      	ldr	r1, [pc, #32]	; (a9f0 <voltageOnCall+0x34>)
    a9d0:	0038      	movs	r0, r7
    a9d2:	9300      	str	r3, [sp, #0]
    a9d4:	0023      	movs	r3, r4
    a9d6:	4c07      	ldr	r4, [pc, #28]	; (a9f4 <voltageOnCall+0x38>)
    a9d8:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
    a9da:	003b      	movs	r3, r7
    a9dc:	0018      	movs	r0, r3
    a9de:	4b06      	ldr	r3, [pc, #24]	; (a9f8 <voltageOnCall+0x3c>)
    a9e0:	4798      	blx	r3
}
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	46bd      	mov	sp, r7
    a9e6:	b005      	add	sp, #20
    a9e8:	bd90      	pop	{r4, r7, pc}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	200006c8 	.word	0x200006c8
    a9f0:	000192e0 	.word	0x000192e0
    a9f4:	00017abd 	.word	0x00017abd
    a9f8:	000044e1 	.word	0x000044e1

0000a9fc <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
    a9fc:	b580      	push	{r7, lr}
    a9fe:	b082      	sub	sp, #8
    aa00:	af00      	add	r7, sp, #0
    aa02:	0002      	movs	r2, r0
    aa04:	1dfb      	adds	r3, r7, #7
    aa06:	701a      	strb	r2, [r3, #0]
    aa08:	1dbb      	adds	r3, r7, #6
    aa0a:	1c0a      	adds	r2, r1, #0
    aa0c:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
    aa0e:	1dfb      	adds	r3, r7, #7
    aa10:	781b      	ldrb	r3, [r3, #0]
    aa12:	4a0e      	ldr	r2, [pc, #56]	; (aa4c <setM2MEventState+0x50>)
    aa14:	5cd3      	ldrb	r3, [r2, r3]
    aa16:	2b02      	cmp	r3, #2
    aa18:	d10e      	bne.n	aa38 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
    aa1a:	1dbb      	adds	r3, r7, #6
    aa1c:	781b      	ldrb	r3, [r3, #0]
    aa1e:	2b03      	cmp	r3, #3
    aa20:	d10a      	bne.n	aa38 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
    aa22:	1dbb      	adds	r3, r7, #6
    aa24:	2200      	movs	r2, #0
    aa26:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
    aa28:	1dfb      	adds	r3, r7, #7
    aa2a:	781b      	ldrb	r3, [r3, #0]
    aa2c:	4a08      	ldr	r2, [pc, #32]	; (aa50 <setM2MEventState+0x54>)
    aa2e:	5cd3      	ldrb	r3, [r2, r3]
    aa30:	001a      	movs	r2, r3
    aa32:	4b08      	ldr	r3, [pc, #32]	; (aa54 <setM2MEventState+0x58>)
    aa34:	2100      	movs	r1, #0
    aa36:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
    aa38:	1dfb      	adds	r3, r7, #7
    aa3a:	781b      	ldrb	r3, [r3, #0]
    aa3c:	4a03      	ldr	r2, [pc, #12]	; (aa4c <setM2MEventState+0x50>)
    aa3e:	1db9      	adds	r1, r7, #6
    aa40:	7809      	ldrb	r1, [r1, #0]
    aa42:	54d1      	strb	r1, [r2, r3]
}
    aa44:	46c0      	nop			; (mov r8, r8)
    aa46:	46bd      	mov	sp, r7
    aa48:	b002      	add	sp, #8
    aa4a:	bd80      	pop	{r7, pc}
    aa4c:	20000774 	.word	0x20000774
    aa50:	20000704 	.word	0x20000704
    aa54:	200006ec 	.word	0x200006ec

0000aa58 <M2MEventManager>:

void M2MEventManager(void)
{
    aa58:	b580      	push	{r7, lr}
    aa5a:	b082      	sub	sp, #8
    aa5c:	af00      	add	r7, sp, #0
	uint8_t j=2;
    aa5e:	1dfb      	adds	r3, r7, #7
    aa60:	2202      	movs	r2, #2
    aa62:	701a      	strb	r2, [r3, #0]
	while(j--)
    aa64:	e00a      	b.n	aa7c <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
    aa66:	1dfb      	adds	r3, r7, #7
    aa68:	781b      	ldrb	r3, [r3, #0]
    aa6a:	4a0a      	ldr	r2, [pc, #40]	; (aa94 <M2MEventManager+0x3c>)
    aa6c:	5cd3      	ldrb	r3, [r2, r3]
    aa6e:	2b01      	cmp	r3, #1
    aa70:	d104      	bne.n	aa7c <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
    aa72:	1dfb      	adds	r3, r7, #7
    aa74:	781b      	ldrb	r3, [r3, #0]
    aa76:	0018      	movs	r0, r3
    aa78:	4b07      	ldr	r3, [pc, #28]	; (aa98 <M2MEventManager+0x40>)
    aa7a:	4798      	blx	r3
	while(j--)
    aa7c:	1dfb      	adds	r3, r7, #7
    aa7e:	781b      	ldrb	r3, [r3, #0]
    aa80:	1dfa      	adds	r2, r7, #7
    aa82:	1e59      	subs	r1, r3, #1
    aa84:	7011      	strb	r1, [r2, #0]
    aa86:	2b00      	cmp	r3, #0
    aa88:	d1ed      	bne.n	aa66 <M2MEventManager+0xe>
		}
	}
}
    aa8a:	46c0      	nop			; (mov r8, r8)
    aa8c:	46bd      	mov	sp, r7
    aa8e:	b002      	add	sp, #8
    aa90:	bd80      	pop	{r7, pc}
    aa92:	46c0      	nop			; (mov r8, r8)
    aa94:	20000774 	.word	0x20000774
    aa98:	00004731 	.word	0x00004731

0000aa9c <SIMEventManager>:

void SIMEventManager(void)
{
    aa9c:	b590      	push	{r4, r7, lr}
    aa9e:	b083      	sub	sp, #12
    aaa0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
    aaa2:	1dfb      	adds	r3, r7, #7
    aaa4:	2200      	movs	r2, #0
    aaa6:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    aaa8:	4b1e      	ldr	r3, [pc, #120]	; (ab24 <SIMEventManager+0x88>)
    aaaa:	795b      	ldrb	r3, [r3, #5]
    aaac:	2b00      	cmp	r3, #0
    aaae:	d00b      	beq.n	aac8 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    aab0:	4b1c      	ldr	r3, [pc, #112]	; (ab24 <SIMEventManager+0x88>)
    aab2:	791b      	ldrb	r3, [r3, #4]
    aab4:	2b00      	cmp	r3, #0
    aab6:	d003      	beq.n	aac0 <SIMEventManager+0x24>
		{
			i = 19;
    aab8:	1dfb      	adds	r3, r7, #7
    aaba:	2213      	movs	r2, #19
    aabc:	701a      	strb	r2, [r3, #0]
    aabe:	e025      	b.n	ab0c <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
    aac0:	1dfb      	adds	r3, r7, #7
    aac2:	2211      	movs	r2, #17
    aac4:	701a      	strb	r2, [r3, #0]
    aac6:	e021      	b.n	ab0c <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    aac8:	4b16      	ldr	r3, [pc, #88]	; (ab24 <SIMEventManager+0x88>)
    aaca:	785b      	ldrb	r3, [r3, #1]
    aacc:	2b00      	cmp	r3, #0
    aace:	d003      	beq.n	aad8 <SIMEventManager+0x3c>
		{
			i = 14;
    aad0:	1dfb      	adds	r3, r7, #7
    aad2:	220e      	movs	r2, #14
    aad4:	701a      	strb	r2, [r3, #0]
    aad6:	e019      	b.n	ab0c <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
    aad8:	1dfb      	adds	r3, r7, #7
    aada:	220c      	movs	r2, #12
    aadc:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
    aade:	e015      	b.n	ab0c <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
    aae0:	1dfb      	adds	r3, r7, #7
    aae2:	781b      	ldrb	r3, [r3, #0]
    aae4:	4a10      	ldr	r2, [pc, #64]	; (ab28 <SIMEventManager+0x8c>)
    aae6:	5cd3      	ldrb	r3, [r2, r3]
    aae8:	2201      	movs	r2, #1
    aaea:	4053      	eors	r3, r2
    aaec:	b2db      	uxtb	r3, r3
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d00c      	beq.n	ab0c <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
    aaf2:	1dfb      	adds	r3, r7, #7
    aaf4:	781c      	ldrb	r4, [r3, #0]
    aaf6:	1dfb      	adds	r3, r7, #7
    aaf8:	781b      	ldrb	r3, [r3, #0]
    aafa:	4a0c      	ldr	r2, [pc, #48]	; (ab2c <SIMEventManager+0x90>)
    aafc:	5cd3      	ldrb	r3, [r2, r3]
    aafe:	0018      	movs	r0, r3
    ab00:	4b0b      	ldr	r3, [pc, #44]	; (ab30 <SIMEventManager+0x94>)
    ab02:	4798      	blx	r3
    ab04:	0003      	movs	r3, r0
    ab06:	001a      	movs	r2, r3
    ab08:	4b07      	ldr	r3, [pc, #28]	; (ab28 <SIMEventManager+0x8c>)
    ab0a:	551a      	strb	r2, [r3, r4]
	while(i--)
    ab0c:	1dfb      	adds	r3, r7, #7
    ab0e:	781b      	ldrb	r3, [r3, #0]
    ab10:	1dfa      	adds	r2, r7, #7
    ab12:	1e59      	subs	r1, r3, #1
    ab14:	7011      	strb	r1, [r2, #0]
    ab16:	2b00      	cmp	r3, #0
    ab18:	d1e2      	bne.n	aae0 <SIMEventManager+0x44>
	}
}
    ab1a:	46c0      	nop			; (mov r8, r8)
    ab1c:	46bd      	mov	sp, r7
    ab1e:	b003      	add	sp, #12
    ab20:	bd90      	pop	{r4, r7, pc}
    ab22:	46c0      	nop			; (mov r8, r8)
    ab24:	20000618 	.word	0x20000618
    ab28:	200006ec 	.word	0x200006ec
    ab2c:	2000079c 	.word	0x2000079c
    ab30:	00004615 	.word	0x00004615

0000ab34 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
    ab34:	b580      	push	{r7, lr}
    ab36:	b084      	sub	sp, #16
    ab38:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
    ab3a:	4b6f      	ldr	r3, [pc, #444]	; (acf8 <checkCurrentConsumption+0x1c4>)
    ab3c:	781b      	ldrb	r3, [r3, #0]
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d000      	beq.n	ab44 <checkCurrentConsumption+0x10>
    ab42:	e0d5      	b.n	acf0 <checkCurrentConsumption+0x1bc>
    ab44:	4b6d      	ldr	r3, [pc, #436]	; (acfc <checkCurrentConsumption+0x1c8>)
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d000      	beq.n	ab4e <checkCurrentConsumption+0x1a>
    ab4c:	e0d0      	b.n	acf0 <checkCurrentConsumption+0x1bc>
    ab4e:	4b6c      	ldr	r3, [pc, #432]	; (ad00 <checkCurrentConsumption+0x1cc>)
    ab50:	4798      	blx	r3
    ab52:	0003      	movs	r3, r0
    ab54:	001a      	movs	r2, r3
    ab56:	2301      	movs	r3, #1
    ab58:	4053      	eors	r3, r2
    ab5a:	b2db      	uxtb	r3, r3
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d000      	beq.n	ab62 <checkCurrentConsumption+0x2e>
    ab60:	e0c6      	b.n	acf0 <checkCurrentConsumption+0x1bc>
    ab62:	4b68      	ldr	r3, [pc, #416]	; (ad04 <checkCurrentConsumption+0x1d0>)
    ab64:	7bdb      	ldrb	r3, [r3, #15]
    ab66:	2b00      	cmp	r3, #0
    ab68:	d100      	bne.n	ab6c <checkCurrentConsumption+0x38>
    ab6a:	e0c1      	b.n	acf0 <checkCurrentConsumption+0x1bc>
    ab6c:	4b66      	ldr	r3, [pc, #408]	; (ad08 <checkCurrentConsumption+0x1d4>)
    ab6e:	781b      	ldrb	r3, [r3, #0]
    ab70:	2b00      	cmp	r3, #0
    ab72:	d000      	beq.n	ab76 <checkCurrentConsumption+0x42>
    ab74:	e0bc      	b.n	acf0 <checkCurrentConsumption+0x1bc>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
    ab76:	4b65      	ldr	r3, [pc, #404]	; (ad0c <checkCurrentConsumption+0x1d8>)
    ab78:	781b      	ldrb	r3, [r3, #0]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d00b      	beq.n	ab96 <checkCurrentConsumption+0x62>
    ab7e:	4b64      	ldr	r3, [pc, #400]	; (ad10 <checkCurrentConsumption+0x1dc>)
    ab80:	4798      	blx	r3
    ab82:	0002      	movs	r2, r0
    ab84:	4b63      	ldr	r3, [pc, #396]	; (ad14 <checkCurrentConsumption+0x1e0>)
    ab86:	681b      	ldr	r3, [r3, #0]
    ab88:	1ad3      	subs	r3, r2, r3
    ab8a:	4a63      	ldr	r2, [pc, #396]	; (ad18 <checkCurrentConsumption+0x1e4>)
    ab8c:	4293      	cmp	r3, r2
    ab8e:	d902      	bls.n	ab96 <checkCurrentConsumption+0x62>
	{
		enableCurrentBuffer=false;
    ab90:	4b5e      	ldr	r3, [pc, #376]	; (ad0c <checkCurrentConsumption+0x1d8>)
    ab92:	2200      	movs	r2, #0
    ab94:	701a      	strb	r2, [r3, #0]
	}
	
	//lastCurrentReadingTime=xTaskGetTickCount();
	
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    ab96:	4b61      	ldr	r3, [pc, #388]	; (ad1c <checkCurrentConsumption+0x1e8>)
    ab98:	691b      	ldr	r3, [r3, #16]
    ab9a:	607b      	str	r3, [r7, #4]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp = ADCcurrent;
    ab9c:	687b      	ldr	r3, [r7, #4]
    ab9e:	603b      	str	r3, [r7, #0]
	
	uint32_t overLoadDetectValue=12000;
    aba0:	4b5f      	ldr	r3, [pc, #380]	; (ad20 <checkCurrentConsumption+0x1ec>)
    aba2:	60fb      	str	r3, [r7, #12]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
    aba4:	4b59      	ldr	r3, [pc, #356]	; (ad0c <checkCurrentConsumption+0x1d8>)
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	2b00      	cmp	r3, #0
    abaa:	d00c      	beq.n	abc6 <checkCurrentConsumption+0x92>
    abac:	4b55      	ldr	r3, [pc, #340]	; (ad04 <checkCurrentConsumption+0x1d0>)
    abae:	691b      	ldr	r3, [r3, #16]
    abb0:	005a      	lsls	r2, r3, #1
    abb2:	683b      	ldr	r3, [r7, #0]
    abb4:	429a      	cmp	r2, r3
    abb6:	d206      	bcs.n	abc6 <checkCurrentConsumption+0x92>
	{
		temp2 = CR_OVER2;
    abb8:	230b      	movs	r3, #11
    abba:	18fb      	adds	r3, r7, r3
    abbc:	2202      	movs	r2, #2
    abbe:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
    abc0:	4b58      	ldr	r3, [pc, #352]	; (ad24 <checkCurrentConsumption+0x1f0>)
    abc2:	60fb      	str	r3, [r7, #12]
    abc4:	e055      	b.n	ac72 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
    abc6:	4b51      	ldr	r3, [pc, #324]	; (ad0c <checkCurrentConsumption+0x1d8>)
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	2201      	movs	r2, #1
    abcc:	4053      	eors	r3, r2
    abce:	b2db      	uxtb	r3, r3
    abd0:	2b00      	cmp	r3, #0
    abd2:	d00d      	beq.n	abf0 <checkCurrentConsumption+0xbc>
    abd4:	4b4b      	ldr	r3, [pc, #300]	; (ad04 <checkCurrentConsumption+0x1d0>)
    abd6:	691b      	ldr	r3, [r3, #16]
    abd8:	005a      	lsls	r2, r3, #1
    abda:	683b      	ldr	r3, [r7, #0]
    abdc:	429a      	cmp	r2, r3
    abde:	d207      	bcs.n	abf0 <checkCurrentConsumption+0xbc>
	{
		temp2 = CR_OVER;
    abe0:	230b      	movs	r3, #11
    abe2:	18fb      	adds	r3, r7, r3
    abe4:	2201      	movs	r2, #1
    abe6:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    abe8:	68fb      	ldr	r3, [r7, #12]
    abea:	089b      	lsrs	r3, r3, #2
    abec:	60fb      	str	r3, [r7, #12]
    abee:	e040      	b.n	ac72 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
    abf0:	4b46      	ldr	r3, [pc, #280]	; (ad0c <checkCurrentConsumption+0x1d8>)
    abf2:	781b      	ldrb	r3, [r3, #0]
    abf4:	2201      	movs	r2, #1
    abf6:	4053      	eors	r3, r2
    abf8:	b2db      	uxtb	r3, r3
    abfa:	2b00      	cmp	r3, #0
    abfc:	d010      	beq.n	ac20 <checkCurrentConsumption+0xec>
    abfe:	4b41      	ldr	r3, [pc, #260]	; (ad04 <checkCurrentConsumption+0x1d0>)
    ac00:	691a      	ldr	r2, [r3, #16]
    ac02:	4b40      	ldr	r3, [pc, #256]	; (ad04 <checkCurrentConsumption+0x1d0>)
    ac04:	691b      	ldr	r3, [r3, #16]
    ac06:	085b      	lsrs	r3, r3, #1
    ac08:	18d2      	adds	r2, r2, r3
    ac0a:	683b      	ldr	r3, [r7, #0]
    ac0c:	429a      	cmp	r2, r3
    ac0e:	d207      	bcs.n	ac20 <checkCurrentConsumption+0xec>
	{
		temp2 = CR_OVER;
    ac10:	230b      	movs	r3, #11
    ac12:	18fb      	adds	r3, r7, r3
    ac14:	2201      	movs	r2, #1
    ac16:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
    ac18:	68fb      	ldr	r3, [r7, #12]
    ac1a:	085b      	lsrs	r3, r3, #1
    ac1c:	60fb      	str	r3, [r7, #12]
    ac1e:	e028      	b.n	ac72 <checkCurrentConsumption+0x13e>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
    ac20:	4b3a      	ldr	r3, [pc, #232]	; (ad0c <checkCurrentConsumption+0x1d8>)
    ac22:	781b      	ldrb	r3, [r3, #0]
    ac24:	2201      	movs	r2, #1
    ac26:	4053      	eors	r3, r2
    ac28:	b2db      	uxtb	r3, r3
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	d009      	beq.n	ac42 <checkCurrentConsumption+0x10e>
    ac2e:	4b35      	ldr	r3, [pc, #212]	; (ad04 <checkCurrentConsumption+0x1d0>)
    ac30:	695a      	ldr	r2, [r3, #20]
    ac32:	683b      	ldr	r3, [r7, #0]
    ac34:	429a      	cmp	r2, r3
    ac36:	d204      	bcs.n	ac42 <checkCurrentConsumption+0x10e>
	{
		temp2 = CR_OVER;
    ac38:	230b      	movs	r3, #11
    ac3a:	18fb      	adds	r3, r7, r3
    ac3c:	2201      	movs	r2, #1
    ac3e:	701a      	strb	r2, [r3, #0]
    ac40:	e017      	b.n	ac72 <checkCurrentConsumption+0x13e>
	}
	else if(temp < user_settings_parameter_struct.underloadAddress && !enableCurrentBuffer)		// only consider noLoad after 30 secs
    ac42:	4b30      	ldr	r3, [pc, #192]	; (ad04 <checkCurrentConsumption+0x1d0>)
    ac44:	699a      	ldr	r2, [r3, #24]
    ac46:	683b      	ldr	r3, [r7, #0]
    ac48:	429a      	cmp	r2, r3
    ac4a:	d90e      	bls.n	ac6a <checkCurrentConsumption+0x136>
    ac4c:	4b2f      	ldr	r3, [pc, #188]	; (ad0c <checkCurrentConsumption+0x1d8>)
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	2201      	movs	r2, #1
    ac52:	4053      	eors	r3, r2
    ac54:	b2db      	uxtb	r3, r3
    ac56:	2b00      	cmp	r3, #0
    ac58:	d007      	beq.n	ac6a <checkCurrentConsumption+0x136>
	{
		temp2 = CR_UNDER;
    ac5a:	230b      	movs	r3, #11
    ac5c:	18fb      	adds	r3, r7, r3
    ac5e:	2202      	movs	r2, #2
    ac60:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    ac62:	68fb      	ldr	r3, [r7, #12]
    ac64:	089b      	lsrs	r3, r3, #2
    ac66:	60fb      	str	r3, [r7, #12]
    ac68:	e003      	b.n	ac72 <checkCurrentConsumption+0x13e>
	}
	else
	{
		temp2= CR_NORMAL;
    ac6a:	230b      	movs	r3, #11
    ac6c:	18fb      	adds	r3, r7, r3
    ac6e:	2200      	movs	r2, #0
    ac70:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
    ac72:	4b2d      	ldr	r3, [pc, #180]	; (ad28 <checkCurrentConsumption+0x1f4>)
    ac74:	781b      	ldrb	r3, [r3, #0]
    ac76:	220b      	movs	r2, #11
    ac78:	18ba      	adds	r2, r7, r2
    ac7a:	7812      	ldrb	r2, [r2, #0]
    ac7c:	429a      	cmp	r2, r3
    ac7e:	d12c      	bne.n	acda <checkCurrentConsumption+0x1a6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
    ac80:	4b23      	ldr	r3, [pc, #140]	; (ad10 <checkCurrentConsumption+0x1dc>)
    ac82:	4798      	blx	r3
    ac84:	0002      	movs	r2, r0
    ac86:	4b29      	ldr	r3, [pc, #164]	; (ad2c <checkCurrentConsumption+0x1f8>)
    ac88:	681b      	ldr	r3, [r3, #0]
    ac8a:	1ad2      	subs	r2, r2, r3
    ac8c:	68fb      	ldr	r3, [r7, #12]
    ac8e:	429a      	cmp	r2, r3
    ac90:	d92f      	bls.n	acf2 <checkCurrentConsumption+0x1be>
		{
			if(temp2==CR_OVER)
    ac92:	230b      	movs	r3, #11
    ac94:	18fb      	adds	r3, r7, r3
    ac96:	781b      	ldrb	r3, [r3, #0]
    ac98:	2b01      	cmp	r3, #1
    ac9a:	d10c      	bne.n	acb6 <checkCurrentConsumption+0x182>
			{
				stopMotor(false,true,false);
    ac9c:	2200      	movs	r2, #0
    ac9e:	2101      	movs	r1, #1
    aca0:	2000      	movs	r0, #0
    aca2:	4b23      	ldr	r3, [pc, #140]	; (ad30 <checkCurrentConsumption+0x1fc>)
    aca4:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
    aca6:	2042      	movs	r0, #66	; 0x42
    aca8:	4b22      	ldr	r3, [pc, #136]	; (ad34 <checkCurrentConsumption+0x200>)
    acaa:	4798      	blx	r3
    acac:	0003      	movs	r3, r0
    acae:	001a      	movs	r2, r3
    acb0:	4b21      	ldr	r3, [pc, #132]	; (ad38 <checkCurrentConsumption+0x204>)
    acb2:	731a      	strb	r2, [r3, #12]
    acb4:	e01d      	b.n	acf2 <checkCurrentConsumption+0x1be>
			}
			else if(temp2==CR_UNDER)
    acb6:	230b      	movs	r3, #11
    acb8:	18fb      	adds	r3, r7, r3
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	2b02      	cmp	r3, #2
    acbe:	d118      	bne.n	acf2 <checkCurrentConsumption+0x1be>
			{
				stopMotor(false,true,false);
    acc0:	2200      	movs	r2, #0
    acc2:	2101      	movs	r1, #1
    acc4:	2000      	movs	r0, #0
    acc6:	4b1a      	ldr	r3, [pc, #104]	; (ad30 <checkCurrentConsumption+0x1fc>)
    acc8:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
    acca:	204a      	movs	r0, #74	; 0x4a
    accc:	4b19      	ldr	r3, [pc, #100]	; (ad34 <checkCurrentConsumption+0x200>)
    acce:	4798      	blx	r3
    acd0:	0003      	movs	r3, r0
    acd2:	001a      	movs	r2, r3
    acd4:	4b18      	ldr	r3, [pc, #96]	; (ad38 <checkCurrentConsumption+0x204>)
    acd6:	735a      	strb	r2, [r3, #13]
    acd8:	e00b      	b.n	acf2 <checkCurrentConsumption+0x1be>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
    acda:	4b0d      	ldr	r3, [pc, #52]	; (ad10 <checkCurrentConsumption+0x1dc>)
    acdc:	4798      	blx	r3
    acde:	0002      	movs	r2, r0
    ace0:	4b12      	ldr	r3, [pc, #72]	; (ad2c <checkCurrentConsumption+0x1f8>)
    ace2:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
    ace4:	4b10      	ldr	r3, [pc, #64]	; (ad28 <checkCurrentConsumption+0x1f4>)
    ace6:	220b      	movs	r2, #11
    ace8:	18ba      	adds	r2, r7, r2
    acea:	7812      	ldrb	r2, [r2, #0]
    acec:	701a      	strb	r2, [r3, #0]
    acee:	e000      	b.n	acf2 <checkCurrentConsumption+0x1be>
		return;
    acf0:	46c0      	nop			; (mov r8, r8)
	}
}
    acf2:	46bd      	mov	sp, r7
    acf4:	b004      	add	sp, #16
    acf6:	bd80      	pop	{r7, pc}
    acf8:	2000075d 	.word	0x2000075d
    acfc:	2000074d 	.word	0x2000074d
    ad00:	00009c89 	.word	0x00009c89
    ad04:	2000064c 	.word	0x2000064c
    ad08:	2000075f 	.word	0x2000075f
    ad0c:	20000724 	.word	0x20000724
    ad10:	0000ef5d 	.word	0x0000ef5d
    ad14:	20000758 	.word	0x20000758
    ad18:	00007530 	.word	0x00007530
    ad1c:	200006c8 	.word	0x200006c8
    ad20:	00002ee0 	.word	0x00002ee0
    ad24:	00004650 	.word	0x00004650
    ad28:	2000074a 	.word	0x2000074a
    ad2c:	20000730 	.word	0x20000730
    ad30:	0000a4a9 	.word	0x0000a4a9
    ad34:	00004615 	.word	0x00004615
    ad38:	200006ec 	.word	0x200006ec

0000ad3c <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
    ad3c:	b580      	push	{r7, lr}
    ad3e:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
    ad40:	4b02      	ldr	r3, [pc, #8]	; (ad4c <button_detect_pin_callback+0x10>)
    ad42:	2201      	movs	r2, #1
    ad44:	701a      	strb	r2, [r3, #0]
//	xTaskNotifyGive(fiftymsTask);
}
    ad46:	46c0      	nop			; (mov r8, r8)
    ad48:	46bd      	mov	sp, r7
    ad4a:	bd80      	pop	{r7, pc}
    ad4c:	20000763 	.word	0x20000763

0000ad50 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
    ad50:	b590      	push	{r4, r7, lr}
    ad52:	b085      	sub	sp, #20
    ad54:	af00      	add	r7, sp, #0
    ad56:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
    ad58:	4ba7      	ldr	r3, [pc, #668]	; (aff8 <vTask_MOTORCONTROL+0x2a8>)
    ad5a:	4798      	blx	r3
	
	configure_ac();
    ad5c:	4ba7      	ldr	r3, [pc, #668]	; (affc <vTask_MOTORCONTROL+0x2ac>)
    ad5e:	4798      	blx	r3
	configure_rtc();
    ad60:	4ba7      	ldr	r3, [pc, #668]	; (b000 <vTask_MOTORCONTROL+0x2b0>)
    ad62:	4798      	blx	r3
	configure_event();
    ad64:	4ba7      	ldr	r3, [pc, #668]	; (b004 <vTask_MOTORCONTROL+0x2b4>)
    ad66:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
    ad68:	4ba7      	ldr	r3, [pc, #668]	; (b008 <vTask_MOTORCONTROL+0x2b8>)
    ad6a:	2200      	movs	r2, #0
    ad6c:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
    ad6e:	4ba7      	ldr	r3, [pc, #668]	; (b00c <vTask_MOTORCONTROL+0x2bc>)
    ad70:	2200      	movs	r2, #0
    ad72:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
    ad74:	4ba6      	ldr	r3, [pc, #664]	; (b010 <vTask_MOTORCONTROL+0x2c0>)
    ad76:	2200      	movs	r2, #0
    ad78:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    ad7a:	230d      	movs	r3, #13
    ad7c:	18fb      	adds	r3, r7, r3
    ad7e:	2201      	movs	r2, #1
    ad80:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    ad82:	230d      	movs	r3, #13
    ad84:	18fc      	adds	r4, r7, r3
    ad86:	4ba3      	ldr	r3, [pc, #652]	; (b014 <vTask_MOTORCONTROL+0x2c4>)
    ad88:	2100      	movs	r1, #0
    ad8a:	0018      	movs	r0, r3
    ad8c:	4ba2      	ldr	r3, [pc, #648]	; (b018 <vTask_MOTORCONTROL+0x2c8>)
    ad8e:	4798      	blx	r3
    ad90:	0003      	movs	r3, r0
    ad92:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    ad94:	23fa      	movs	r3, #250	; 0xfa
    ad96:	005b      	lsls	r3, r3, #1
    ad98:	0018      	movs	r0, r3
    ad9a:	4ba0      	ldr	r3, [pc, #640]	; (b01c <vTask_MOTORCONTROL+0x2cc>)
    ad9c:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    ad9e:	230d      	movs	r3, #13
    ada0:	18fc      	adds	r4, r7, r3
    ada2:	4b9c      	ldr	r3, [pc, #624]	; (b014 <vTask_MOTORCONTROL+0x2c4>)
    ada4:	2100      	movs	r1, #0
    ada6:	0018      	movs	r0, r3
    ada8:	4b9b      	ldr	r3, [pc, #620]	; (b018 <vTask_MOTORCONTROL+0x2c8>)
    adaa:	4798      	blx	r3
    adac:	0003      	movs	r3, r0
    adae:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    adb0:	230d      	movs	r3, #13
    adb2:	18fb      	adds	r3, r7, r3
    adb4:	781b      	ldrb	r3, [r3, #0]
    adb6:	2204      	movs	r2, #4
    adb8:	4013      	ands	r3, r2
    adba:	d003      	beq.n	adc4 <vTask_MOTORCONTROL+0x74>
	{
		isACpowerAvailable = true;
    adbc:	4b98      	ldr	r3, [pc, #608]	; (b020 <vTask_MOTORCONTROL+0x2d0>)
    adbe:	2201      	movs	r2, #1
    adc0:	701a      	strb	r2, [r3, #0]
    adc2:	e002      	b.n	adca <vTask_MOTORCONTROL+0x7a>
	}
	else
	{
		isACpowerAvailable = false;
    adc4:	4b96      	ldr	r3, [pc, #600]	; (b020 <vTask_MOTORCONTROL+0x2d0>)
    adc6:	2200      	movs	r2, #0
    adc8:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
    adca:	4b96      	ldr	r3, [pc, #600]	; (b024 <vTask_MOTORCONTROL+0x2d4>)
    adcc:	2200      	movs	r2, #0
    adce:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
    add0:	4b95      	ldr	r3, [pc, #596]	; (b028 <vTask_MOTORCONTROL+0x2d8>)
    add2:	2200      	movs	r2, #0
    add4:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
    add6:	4b95      	ldr	r3, [pc, #596]	; (b02c <vTask_MOTORCONTROL+0x2dc>)
    add8:	220a      	movs	r2, #10
    adda:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
    addc:	4b94      	ldr	r3, [pc, #592]	; (b030 <vTask_MOTORCONTROL+0x2e0>)
    adde:	2200      	movs	r2, #0
    ade0:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
    ade2:	4b94      	ldr	r3, [pc, #592]	; (b034 <vTask_MOTORCONTROL+0x2e4>)
    ade4:	2214      	movs	r2, #20
    ade6:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
    ade8:	4b93      	ldr	r3, [pc, #588]	; (b038 <vTask_MOTORCONTROL+0x2e8>)
    adea:	2200      	movs	r2, #0
    adec:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
    adee:	4b93      	ldr	r3, [pc, #588]	; (b03c <vTask_MOTORCONTROL+0x2ec>)
    adf0:	2200      	movs	r2, #0
    adf2:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
    adf4:	4b92      	ldr	r3, [pc, #584]	; (b040 <vTask_MOTORCONTROL+0x2f0>)
    adf6:	2214      	movs	r2, #20
    adf8:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
    adfa:	4b92      	ldr	r3, [pc, #584]	; (b044 <vTask_MOTORCONTROL+0x2f4>)
    adfc:	2200      	movs	r2, #0
    adfe:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
    ae00:	2000      	movs	r0, #0
    ae02:	4b91      	ldr	r3, [pc, #580]	; (b048 <vTask_MOTORCONTROL+0x2f8>)
    ae04:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
    ae06:	2000      	movs	r0, #0
    ae08:	4b90      	ldr	r3, [pc, #576]	; (b04c <vTask_MOTORCONTROL+0x2fc>)
    ae0a:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
    ae0c:	2000      	movs	r0, #0
    ae0e:	4b90      	ldr	r3, [pc, #576]	; (b050 <vTask_MOTORCONTROL+0x300>)
    ae10:	4798      	blx	r3
	
	lastPressTime=0;
    ae12:	4b90      	ldr	r3, [pc, #576]	; (b054 <vTask_MOTORCONTROL+0x304>)
    ae14:	2200      	movs	r2, #0
    ae16:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
    ae18:	4b8f      	ldr	r3, [pc, #572]	; (b058 <vTask_MOTORCONTROL+0x308>)
    ae1a:	2200      	movs	r2, #0
    ae1c:	701a      	strb	r2, [r3, #0]
	
	uint8_t i= 0;
    ae1e:	230f      	movs	r3, #15
    ae20:	18fb      	adds	r3, r7, r3
    ae22:	2200      	movs	r2, #0
    ae24:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    ae26:	4b8d      	ldr	r3, [pc, #564]	; (b05c <vTask_MOTORCONTROL+0x30c>)
    ae28:	785b      	ldrb	r3, [r3, #1]
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d004      	beq.n	ae38 <vTask_MOTORCONTROL+0xe8>
	{
		i=14;
    ae2e:	230f      	movs	r3, #15
    ae30:	18fb      	adds	r3, r7, r3
    ae32:	220e      	movs	r2, #14
    ae34:	701a      	strb	r2, [r3, #0]
    ae36:	e00a      	b.n	ae4e <vTask_MOTORCONTROL+0xfe>
	}
	else
	{
		i = 12;
    ae38:	230f      	movs	r3, #15
    ae3a:	18fb      	adds	r3, r7, r3
    ae3c:	220c      	movs	r2, #12
    ae3e:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
    ae40:	e005      	b.n	ae4e <vTask_MOTORCONTROL+0xfe>
	{
		simEventTemp[i] = true;
    ae42:	230f      	movs	r3, #15
    ae44:	18fb      	adds	r3, r7, r3
    ae46:	781b      	ldrb	r3, [r3, #0]
    ae48:	4a85      	ldr	r2, [pc, #532]	; (b060 <vTask_MOTORCONTROL+0x310>)
    ae4a:	2101      	movs	r1, #1
    ae4c:	54d1      	strb	r1, [r2, r3]
	while(i--)
    ae4e:	230f      	movs	r3, #15
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	781b      	ldrb	r3, [r3, #0]
    ae54:	220f      	movs	r2, #15
    ae56:	18ba      	adds	r2, r7, r2
    ae58:	1e59      	subs	r1, r3, #1
    ae5a:	7011      	strb	r1, [r2, #0]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d1f0      	bne.n	ae42 <vTask_MOTORCONTROL+0xf2>
	}
	simEvent[0] = 'N';
    ae60:	4b80      	ldr	r3, [pc, #512]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae62:	224e      	movs	r2, #78	; 0x4e
    ae64:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
    ae66:	4b7f      	ldr	r3, [pc, #508]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae68:	2250      	movs	r2, #80	; 0x50
    ae6a:	705a      	strb	r2, [r3, #1]
	simEvent[2] = 'U';
    ae6c:	4b7d      	ldr	r3, [pc, #500]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae6e:	2255      	movs	r2, #85	; 0x55
    ae70:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
    ae72:	4b7c      	ldr	r3, [pc, #496]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae74:	2246      	movs	r2, #70	; 0x46
    ae76:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
    ae78:	4b7a      	ldr	r3, [pc, #488]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae7a:	2247      	movs	r2, #71	; 0x47
    ae7c:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
    ae7e:	4b79      	ldr	r3, [pc, #484]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae80:	224c      	movs	r2, #76	; 0x4c
    ae82:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
    ae84:	4b77      	ldr	r3, [pc, #476]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae86:	2243      	movs	r2, #67	; 0x43
    ae88:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
    ae8a:	4b76      	ldr	r3, [pc, #472]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae8c:	2253      	movs	r2, #83	; 0x53
    ae8e:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
    ae90:	4b74      	ldr	r3, [pc, #464]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae92:	224f      	movs	r2, #79	; 0x4f
    ae94:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
    ae96:	4b73      	ldr	r3, [pc, #460]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae98:	2241      	movs	r2, #65	; 0x41
    ae9a:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
    ae9c:	4b71      	ldr	r3, [pc, #452]	; (b064 <vTask_MOTORCONTROL+0x314>)
    ae9e:	2229      	movs	r2, #41	; 0x29
    aea0:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
    aea2:	4b70      	ldr	r3, [pc, #448]	; (b064 <vTask_MOTORCONTROL+0x314>)
    aea4:	225b      	movs	r2, #91	; 0x5b
    aea6:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    aea8:	4b6c      	ldr	r3, [pc, #432]	; (b05c <vTask_MOTORCONTROL+0x30c>)
    aeaa:	785b      	ldrb	r3, [r3, #1]
    aeac:	2b00      	cmp	r3, #0
    aeae:	d005      	beq.n	aebc <vTask_MOTORCONTROL+0x16c>
	{
		simEvent[12] = 'B';		//Overload Event
    aeb0:	4b6c      	ldr	r3, [pc, #432]	; (b064 <vTask_MOTORCONTROL+0x314>)
    aeb2:	2242      	movs	r2, #66	; 0x42
    aeb4:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
    aeb6:	4b6b      	ldr	r3, [pc, #428]	; (b064 <vTask_MOTORCONTROL+0x314>)
    aeb8:	224a      	movs	r2, #74	; 0x4a
    aeba:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
    aebc:	2001      	movs	r0, #1
    aebe:	4b6a      	ldr	r3, [pc, #424]	; (b068 <vTask_MOTORCONTROL+0x318>)
    aec0:	4798      	blx	r3
	eventOccured=true;
    aec2:	4b53      	ldr	r3, [pc, #332]	; (b010 <vTask_MOTORCONTROL+0x2c0>)
    aec4:	2201      	movs	r2, #1
    aec6:	701a      	strb	r2, [r3, #0]
	//////////////////////////////
	for (;;)
	{
		
		if(taskPSet)
    aec8:	4b68      	ldr	r3, [pc, #416]	; (b06c <vTask_MOTORCONTROL+0x31c>)
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	b2db      	uxtb	r3, r3
    aece:	2b00      	cmp	r3, #0
    aed0:	d006      	beq.n	aee0 <vTask_MOTORCONTROL+0x190>
		{
			vTaskPrioritySet(NULL,1);
    aed2:	2101      	movs	r1, #1
    aed4:	2000      	movs	r0, #0
    aed6:	4b66      	ldr	r3, [pc, #408]	; (b070 <vTask_MOTORCONTROL+0x320>)
    aed8:	4798      	blx	r3
			taskPSet=false;
    aeda:	4b64      	ldr	r3, [pc, #400]	; (b06c <vTask_MOTORCONTROL+0x31c>)
    aedc:	2200      	movs	r2, #0
    aede:	701a      	strb	r2, [r3, #0]
		}
		
		if(!startSequenceOn && !stopSequenceOn)
    aee0:	4b56      	ldr	r3, [pc, #344]	; (b03c <vTask_MOTORCONTROL+0x2ec>)
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	2201      	movs	r2, #1
    aee6:	4053      	eors	r3, r2
    aee8:	b2db      	uxtb	r3, r3
    aeea:	2b00      	cmp	r3, #0
    aeec:	d020      	beq.n	af30 <vTask_MOTORCONTROL+0x1e0>
    aeee:	4b55      	ldr	r3, [pc, #340]	; (b044 <vTask_MOTORCONTROL+0x2f4>)
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	2201      	movs	r2, #1
    aef4:	4053      	eors	r3, r2
    aef6:	b2db      	uxtb	r3, r3
    aef8:	2b00      	cmp	r3, #0
    aefa:	d019      	beq.n	af30 <vTask_MOTORCONTROL+0x1e0>
		{
			uint8_t tempEventOccured=eventOccured;
    aefc:	4b44      	ldr	r3, [pc, #272]	; (b010 <vTask_MOTORCONTROL+0x2c0>)
    aefe:	781b      	ldrb	r3, [r3, #0]
    af00:	b2da      	uxtb	r2, r3
    af02:	230c      	movs	r3, #12
    af04:	18fb      	adds	r3, r7, r3
    af06:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
    af08:	4b5a      	ldr	r3, [pc, #360]	; (b074 <vTask_MOTORCONTROL+0x324>)
    af0a:	781b      	ldrb	r3, [r3, #0]
    af0c:	b2da      	uxtb	r2, r3
    af0e:	230b      	movs	r3, #11
    af10:	18fb      	adds	r3, r7, r3
    af12:	701a      	strb	r2, [r3, #0]
			
			if(tempEventOccured)
    af14:	230c      	movs	r3, #12
    af16:	18fb      	adds	r3, r7, r3
    af18:	781b      	ldrb	r3, [r3, #0]
    af1a:	2b00      	cmp	r3, #0
    af1c:	d001      	beq.n	af22 <vTask_MOTORCONTROL+0x1d2>
			{
				operateOnEvent();
    af1e:	4b56      	ldr	r3, [pc, #344]	; (b078 <vTask_MOTORCONTROL+0x328>)
    af20:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
    af22:	4b4d      	ldr	r3, [pc, #308]	; (b058 <vTask_MOTORCONTROL+0x308>)
    af24:	781b      	ldrb	r3, [r3, #0]
    af26:	b2db      	uxtb	r3, r3
    af28:	2b00      	cmp	r3, #0
    af2a:	d001      	beq.n	af30 <vTask_MOTORCONTROL+0x1e0>
			{
				buttonFilter();
    af2c:	4b53      	ldr	r3, [pc, #332]	; (b07c <vTask_MOTORCONTROL+0x32c>)
    af2e:	4798      	blx	r3
			//{
			//buttonPostFilter();
			//}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
    af30:	4b53      	ldr	r3, [pc, #332]	; (b080 <vTask_MOTORCONTROL+0x330>)
    af32:	4798      	blx	r3
    af34:	1e03      	subs	r3, r0, #0
    af36:	d003      	beq.n	af40 <vTask_MOTORCONTROL+0x1f0>
			detect_battery_voltage_and_percentage();
    af38:	4b52      	ldr	r3, [pc, #328]	; (b084 <vTask_MOTORCONTROL+0x334>)
    af3a:	4798      	blx	r3
			detect_Three_Phase_Voltage();
    af3c:	4b52      	ldr	r3, [pc, #328]	; (b088 <vTask_MOTORCONTROL+0x338>)
    af3e:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		if(should_Detect_New_Current()) {
    af40:	4b52      	ldr	r3, [pc, #328]	; (b08c <vTask_MOTORCONTROL+0x33c>)
    af42:	4798      	blx	r3
    af44:	1e03      	subs	r3, r0, #0
    af46:	d007      	beq.n	af58 <vTask_MOTORCONTROL+0x208>
			detect_Motor_Current();
    af48:	4b51      	ldr	r3, [pc, #324]	; (b090 <vTask_MOTORCONTROL+0x340>)
    af4a:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    af4c:	4b43      	ldr	r3, [pc, #268]	; (b05c <vTask_MOTORCONTROL+0x30c>)
    af4e:	785b      	ldrb	r3, [r3, #1]
    af50:	2b00      	cmp	r3, #0
    af52:	d001      	beq.n	af58 <vTask_MOTORCONTROL+0x208>
			{
				checkCurrentConsumption();
    af54:	4b4f      	ldr	r3, [pc, #316]	; (b094 <vTask_MOTORCONTROL+0x344>)
    af56:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
    af58:	4b4f      	ldr	r3, [pc, #316]	; (b098 <vTask_MOTORCONTROL+0x348>)
    af5a:	781b      	ldrb	r3, [r3, #0]
    af5c:	2b00      	cmp	r3, #0
    af5e:	d005      	beq.n	af6c <vTask_MOTORCONTROL+0x21c>
    af60:	4b4e      	ldr	r3, [pc, #312]	; (b09c <vTask_MOTORCONTROL+0x34c>)
    af62:	4798      	blx	r3
    af64:	1e03      	subs	r3, r0, #0
    af66:	d001      	beq.n	af6c <vTask_MOTORCONTROL+0x21c>
		{
			operateOnStableLine();
    af68:	4b4d      	ldr	r3, [pc, #308]	; (b0a0 <vTask_MOTORCONTROL+0x350>)
    af6a:	4798      	blx	r3
		}
		if(singlePhasingTimerOn)
    af6c:	4b30      	ldr	r3, [pc, #192]	; (b030 <vTask_MOTORCONTROL+0x2e0>)
    af6e:	781b      	ldrb	r3, [r3, #0]
    af70:	2b00      	cmp	r3, #0
    af72:	d01a      	beq.n	afaa <vTask_MOTORCONTROL+0x25a>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
    af74:	4b4b      	ldr	r3, [pc, #300]	; (b0a4 <vTask_MOTORCONTROL+0x354>)
    af76:	785b      	ldrb	r3, [r3, #1]
    af78:	b2db      	uxtb	r3, r3
    af7a:	2b03      	cmp	r3, #3
    af7c:	d003      	beq.n	af86 <vTask_MOTORCONTROL+0x236>
			{
				b = false;
    af7e:	230e      	movs	r3, #14
    af80:	18fb      	adds	r3, r7, r3
    af82:	2200      	movs	r2, #0
    af84:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
    af86:	230e      	movs	r3, #14
    af88:	18fb      	adds	r3, r7, r3
    af8a:	781b      	ldrb	r3, [r3, #0]
    af8c:	2201      	movs	r2, #1
    af8e:	4053      	eors	r3, r2
    af90:	b2db      	uxtb	r3, r3
    af92:	2b00      	cmp	r3, #0
    af94:	d006      	beq.n	afa4 <vTask_MOTORCONTROL+0x254>
			{
				if(singlePhasingTimerOver())
    af96:	4b44      	ldr	r3, [pc, #272]	; (b0a8 <vTask_MOTORCONTROL+0x358>)
    af98:	4798      	blx	r3
    af9a:	1e03      	subs	r3, r0, #0
    af9c:	d005      	beq.n	afaa <vTask_MOTORCONTROL+0x25a>
				{
					operateOnSinglePhasing();
    af9e:	4b43      	ldr	r3, [pc, #268]	; (b0ac <vTask_MOTORCONTROL+0x35c>)
    afa0:	4798      	blx	r3
    afa2:	e002      	b.n	afaa <vTask_MOTORCONTROL+0x25a>
				}
			}
			else
			{
				singlePhasingTimerOn=false;
    afa4:	4b22      	ldr	r3, [pc, #136]	; (b030 <vTask_MOTORCONTROL+0x2e0>)
    afa6:	2200      	movs	r2, #0
    afa8:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
    afaa:	4b1f      	ldr	r3, [pc, #124]	; (b028 <vTask_MOTORCONTROL+0x2d8>)
    afac:	781b      	ldrb	r3, [r3, #0]
    afae:	2b00      	cmp	r3, #0
    afb0:	d006      	beq.n	afc0 <vTask_MOTORCONTROL+0x270>
		{
			if (startMotorTimerOver())
    afb2:	4b3f      	ldr	r3, [pc, #252]	; (b0b0 <vTask_MOTORCONTROL+0x360>)
    afb4:	4798      	blx	r3
    afb6:	1e03      	subs	r3, r0, #0
    afb8:	d002      	beq.n	afc0 <vTask_MOTORCONTROL+0x270>
			{
				startMotor(false);
    afba:	2000      	movs	r0, #0
    afbc:	4b3d      	ldr	r3, [pc, #244]	; (b0b4 <vTask_MOTORCONTROL+0x364>)
    afbe:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
    afc0:	4b1e      	ldr	r3, [pc, #120]	; (b03c <vTask_MOTORCONTROL+0x2ec>)
    afc2:	781b      	ldrb	r3, [r3, #0]
    afc4:	2b00      	cmp	r3, #0
    afc6:	d001      	beq.n	afcc <vTask_MOTORCONTROL+0x27c>
		{
			terminateStartRelay();
    afc8:	4b3b      	ldr	r3, [pc, #236]	; (b0b8 <vTask_MOTORCONTROL+0x368>)
    afca:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
    afcc:	4b1a      	ldr	r3, [pc, #104]	; (b038 <vTask_MOTORCONTROL+0x2e8>)
    afce:	781b      	ldrb	r3, [r3, #0]
    afd0:	2b00      	cmp	r3, #0
    afd2:	d001      	beq.n	afd8 <vTask_MOTORCONTROL+0x288>
		{
			terminateStarDeltaTimer();
    afd4:	4b39      	ldr	r3, [pc, #228]	; (b0bc <vTask_MOTORCONTROL+0x36c>)
    afd6:	4798      	blx	r3
		}
		if(stopSequenceOn)
    afd8:	4b1a      	ldr	r3, [pc, #104]	; (b044 <vTask_MOTORCONTROL+0x2f4>)
    afda:	781b      	ldrb	r3, [r3, #0]
    afdc:	2b00      	cmp	r3, #0
    afde:	d001      	beq.n	afe4 <vTask_MOTORCONTROL+0x294>
		{
			terminateStopRelay();
    afe0:	4b37      	ldr	r3, [pc, #220]	; (b0c0 <vTask_MOTORCONTROL+0x370>)
    afe2:	4798      	blx	r3
		}
		
		SIMEventManager();
    afe4:	4b37      	ldr	r3, [pc, #220]	; (b0c4 <vTask_MOTORCONTROL+0x374>)
    afe6:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
    afe8:	4b1c      	ldr	r3, [pc, #112]	; (b05c <vTask_MOTORCONTROL+0x30c>)
    afea:	78db      	ldrb	r3, [r3, #3]
    afec:	2b00      	cmp	r3, #0
    afee:	d100      	bne.n	aff2 <vTask_MOTORCONTROL+0x2a2>
    aff0:	e76a      	b.n	aec8 <vTask_MOTORCONTROL+0x178>
		{
			M2MEventManager();
    aff2:	4b35      	ldr	r3, [pc, #212]	; (b0c8 <vTask_MOTORCONTROL+0x378>)
    aff4:	4798      	blx	r3
		if(taskPSet)
    aff6:	e767      	b.n	aec8 <vTask_MOTORCONTROL+0x178>
    aff8:	00009059 	.word	0x00009059
    affc:	0000b50d 	.word	0x0000b50d
    b000:	0000b601 	.word	0x0000b601
    b004:	0000b6c1 	.word	0x0000b6c1
    b008:	200007b0 	.word	0x200007b0
    b00c:	200006e8 	.word	0x200006e8
    b010:	20000703 	.word	0x20000703
    b014:	20000820 	.word	0x20000820
    b018:	00008189 	.word	0x00008189
    b01c:	0000ebf9 	.word	0x0000ebf9
    b020:	20000751 	.word	0x20000751
    b024:	200007e4 	.word	0x200007e4
    b028:	2000075e 	.word	0x2000075e
    b02c:	20000734 	.word	0x20000734
    b030:	20000755 	.word	0x20000755
    b034:	200007bc 	.word	0x200007bc
    b038:	2000075f 	.word	0x2000075f
    b03c:	2000075d 	.word	0x2000075d
    b040:	200007fe 	.word	0x200007fe
    b044:	2000074d 	.word	0x2000074d
    b048:	00009c35 	.word	0x00009c35
    b04c:	00009c9d 	.word	0x00009c9d
    b050:	00009c01 	.word	0x00009c01
    b054:	2000072c 	.word	0x2000072c
    b058:	2000074c 	.word	0x2000074c
    b05c:	20000618 	.word	0x20000618
    b060:	200006ec 	.word	0x200006ec
    b064:	2000079c 	.word	0x2000079c
    b068:	00009ed5 	.word	0x00009ed5
    b06c:	20000702 	.word	0x20000702
    b070:	0000ec55 	.word	0x0000ec55
    b074:	20000763 	.word	0x20000763
    b078:	00009f81 	.word	0x00009f81
    b07c:	0000b7cd 	.word	0x0000b7cd
    b080:	00009809 	.word	0x00009809
    b084:	00009825 	.word	0x00009825
    b088:	000098e5 	.word	0x000098e5
    b08c:	00009bd1 	.word	0x00009bd1
    b090:	00009ad1 	.word	0x00009ad1
    b094:	0000ab35 	.word	0x0000ab35
    b098:	200007b1 	.word	0x200007b1
    b09c:	0000a2b1 	.word	0x0000a2b1
    b0a0:	0000a181 	.word	0x0000a181
    b0a4:	2000070c 	.word	0x2000070c
    b0a8:	0000a5cd 	.word	0x0000a5cd
    b0ac:	0000a619 	.word	0x0000a619
    b0b0:	0000a565 	.word	0x0000a565
    b0b4:	0000a2fd 	.word	0x0000a2fd
    b0b8:	0000a791 	.word	0x0000a791
    b0bc:	0000a721 	.word	0x0000a721
    b0c0:	0000a655 	.word	0x0000a655
    b0c4:	0000aa9d 	.word	0x0000aa9d
    b0c8:	0000aa59 	.word	0x0000aa59

0000b0cc <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
    b0cc:	b590      	push	{r4, r7, lr}
    b0ce:	b08b      	sub	sp, #44	; 0x2c
    b0d0:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
    b0d2:	2314      	movs	r3, #20
    b0d4:	18fb      	adds	r3, r7, r3
    b0d6:	0018      	movs	r0, r3
    b0d8:	4ba4      	ldr	r3, [pc, #656]	; (b36c <start_motor_service+0x2a0>)
    b0da:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
    b0dc:	2314      	movs	r3, #20
    b0de:	18fb      	adds	r3, r7, r3
    b0e0:	222b      	movs	r2, #43	; 0x2b
    b0e2:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
    b0e4:	2314      	movs	r3, #20
    b0e6:	18fb      	adds	r3, r7, r3
    b0e8:	2200      	movs	r2, #0
    b0ea:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
    b0ec:	2314      	movs	r3, #20
    b0ee:	18fb      	adds	r3, r7, r3
    b0f0:	2201      	movs	r2, #1
    b0f2:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
    b0f4:	2314      	movs	r3, #20
    b0f6:	18fb      	adds	r3, r7, r3
    b0f8:	2201      	movs	r2, #1
    b0fa:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
    b0fc:	2314      	movs	r3, #20
    b0fe:	18fb      	adds	r3, r7, r3
    b100:	2200      	movs	r2, #0
    b102:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
    b104:	2314      	movs	r3, #20
    b106:	18fb      	adds	r3, r7, r3
    b108:	0019      	movs	r1, r3
    b10a:	200b      	movs	r0, #11
    b10c:	4b98      	ldr	r3, [pc, #608]	; (b370 <start_motor_service+0x2a4>)
    b10e:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
    b110:	4b98      	ldr	r3, [pc, #608]	; (b374 <start_motor_service+0x2a8>)
    b112:	2200      	movs	r2, #0
    b114:	210b      	movs	r1, #11
    b116:	0018      	movs	r0, r3
    b118:	4b97      	ldr	r3, [pc, #604]	; (b378 <start_motor_service+0x2ac>)
    b11a:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    b11c:	2100      	movs	r1, #0
    b11e:	200b      	movs	r0, #11
    b120:	4b96      	ldr	r3, [pc, #600]	; (b37c <start_motor_service+0x2b0>)
    b122:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
    b124:	2310      	movs	r3, #16
    b126:	18fb      	adds	r3, r7, r3
    b128:	0018      	movs	r0, r3
    b12a:	4b95      	ldr	r3, [pc, #596]	; (b380 <start_motor_service+0x2b4>)
    b12c:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
    b12e:	2310      	movs	r3, #16
    b130:	18fb      	adds	r3, r7, r3
    b132:	2200      	movs	r2, #0
    b134:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
    b136:	2310      	movs	r3, #16
    b138:	18fb      	adds	r3, r7, r3
    b13a:	2201      	movs	r2, #1
    b13c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
    b13e:	2310      	movs	r3, #16
    b140:	18fb      	adds	r3, r7, r3
    b142:	0019      	movs	r1, r3
    b144:	202a      	movs	r0, #42	; 0x2a
    b146:	4b8f      	ldr	r3, [pc, #572]	; (b384 <start_motor_service+0x2b8>)
    b148:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
    b14a:	2203      	movs	r2, #3
    b14c:	2100      	movs	r1, #0
    b14e:	2001      	movs	r0, #1
    b150:	4b8d      	ldr	r3, [pc, #564]	; (b388 <start_motor_service+0x2bc>)
    b152:	4798      	blx	r3
    b154:	0002      	movs	r2, r0
    b156:	4b8d      	ldr	r3, [pc, #564]	; (b38c <start_motor_service+0x2c0>)
    b158:	601a      	str	r2, [r3, #0]
    b15a:	4b8c      	ldr	r3, [pc, #560]	; (b38c <start_motor_service+0x2c0>)
    b15c:	681b      	ldr	r3, [r3, #0]
    b15e:	2b00      	cmp	r3, #0
    b160:	d006      	beq.n	b170 <start_motor_service+0xa4>
    b162:	4b8a      	ldr	r3, [pc, #552]	; (b38c <start_motor_service+0x2c0>)
    b164:	6818      	ldr	r0, [r3, #0]
    b166:	2300      	movs	r3, #0
    b168:	2200      	movs	r2, #0
    b16a:	2100      	movs	r1, #0
    b16c:	4c88      	ldr	r4, [pc, #544]	; (b390 <start_motor_service+0x2c4>)
    b16e:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
    b170:	230c      	movs	r3, #12
    b172:	18fb      	adds	r3, r7, r3
    b174:	0018      	movs	r0, r3
    b176:	4b82      	ldr	r3, [pc, #520]	; (b380 <start_motor_service+0x2b4>)
    b178:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
    b17a:	230c      	movs	r3, #12
    b17c:	18fb      	adds	r3, r7, r3
    b17e:	2201      	movs	r2, #1
    b180:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
    b182:	230c      	movs	r3, #12
    b184:	18fb      	adds	r3, r7, r3
    b186:	2200      	movs	r2, #0
    b188:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
    b18a:	230c      	movs	r3, #12
    b18c:	18fb      	adds	r3, r7, r3
    b18e:	0019      	movs	r1, r3
    b190:	202d      	movs	r0, #45	; 0x2d
    b192:	4b7c      	ldr	r3, [pc, #496]	; (b384 <start_motor_service+0x2b8>)
    b194:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
    b196:	230c      	movs	r3, #12
    b198:	18fb      	adds	r3, r7, r3
    b19a:	0019      	movs	r1, r3
    b19c:	202c      	movs	r0, #44	; 0x2c
    b19e:	4b79      	ldr	r3, [pc, #484]	; (b384 <start_motor_service+0x2b8>)
    b1a0:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
    b1a2:	230c      	movs	r3, #12
    b1a4:	18fb      	adds	r3, r7, r3
    b1a6:	0019      	movs	r1, r3
    b1a8:	2028      	movs	r0, #40	; 0x28
    b1aa:	4b76      	ldr	r3, [pc, #472]	; (b384 <start_motor_service+0x2b8>)
    b1ac:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
    b1ae:	230c      	movs	r3, #12
    b1b0:	18fb      	adds	r3, r7, r3
    b1b2:	0019      	movs	r1, r3
    b1b4:	2027      	movs	r0, #39	; 0x27
    b1b6:	4b73      	ldr	r3, [pc, #460]	; (b384 <start_motor_service+0x2b8>)
    b1b8:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
    b1ba:	230c      	movs	r3, #12
    b1bc:	18fb      	adds	r3, r7, r3
    b1be:	0019      	movs	r1, r3
    b1c0:	2005      	movs	r0, #5
    b1c2:	4b70      	ldr	r3, [pc, #448]	; (b384 <start_motor_service+0x2b8>)
    b1c4:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
    b1c6:	2101      	movs	r1, #1
    b1c8:	2028      	movs	r0, #40	; 0x28
    b1ca:	4b72      	ldr	r3, [pc, #456]	; (b394 <start_motor_service+0x2c8>)
    b1cc:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
    b1ce:	2101      	movs	r1, #1
    b1d0:	2005      	movs	r0, #5
    b1d2:	4b70      	ldr	r3, [pc, #448]	; (b394 <start_motor_service+0x2c8>)
    b1d4:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
    b1d6:	2101      	movs	r1, #1
    b1d8:	2027      	movs	r0, #39	; 0x27
    b1da:	4b6e      	ldr	r3, [pc, #440]	; (b394 <start_motor_service+0x2c8>)
    b1dc:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    b1de:	003b      	movs	r3, r7
    b1e0:	0018      	movs	r0, r3
    b1e2:	4b62      	ldr	r3, [pc, #392]	; (b36c <start_motor_service+0x2a0>)
    b1e4:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
    b1e6:	003b      	movs	r3, r7
    b1e8:	222e      	movs	r2, #46	; 0x2e
    b1ea:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
    b1ec:	003b      	movs	r3, r7
    b1ee:	2200      	movs	r2, #0
    b1f0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b1f2:	003b      	movs	r3, r7
    b1f4:	2201      	movs	r2, #1
    b1f6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    b1f8:	003b      	movs	r3, r7
    b1fa:	2203      	movs	r2, #3
    b1fc:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
    b1fe:	003b      	movs	r3, r7
    b200:	0019      	movs	r1, r3
    b202:	200e      	movs	r0, #14
    b204:	4b5a      	ldr	r3, [pc, #360]	; (b370 <start_motor_service+0x2a4>)
    b206:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b208:	2100      	movs	r1, #0
    b20a:	200e      	movs	r0, #14
    b20c:	4b5b      	ldr	r3, [pc, #364]	; (b37c <start_motor_service+0x2b0>)
    b20e:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b210:	4b61      	ldr	r3, [pc, #388]	; (b398 <start_motor_service+0x2cc>)
    b212:	2200      	movs	r2, #0
    b214:	210e      	movs	r1, #14
    b216:	0018      	movs	r0, r3
    b218:	4b57      	ldr	r3, [pc, #348]	; (b378 <start_motor_service+0x2ac>)
    b21a:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
    b21c:	003b      	movs	r3, r7
    b21e:	2226      	movs	r2, #38	; 0x26
    b220:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
    b222:	003b      	movs	r3, r7
    b224:	2200      	movs	r2, #0
    b226:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b228:	003b      	movs	r3, r7
    b22a:	2201      	movs	r2, #1
    b22c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b22e:	003b      	movs	r3, r7
    b230:	2202      	movs	r2, #2
    b232:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
    b234:	003b      	movs	r3, r7
    b236:	0019      	movs	r1, r3
    b238:	2006      	movs	r0, #6
    b23a:	4b4d      	ldr	r3, [pc, #308]	; (b370 <start_motor_service+0x2a4>)
    b23c:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b23e:	2100      	movs	r1, #0
    b240:	2006      	movs	r0, #6
    b242:	4b4e      	ldr	r3, [pc, #312]	; (b37c <start_motor_service+0x2b0>)
    b244:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b246:	4b55      	ldr	r3, [pc, #340]	; (b39c <start_motor_service+0x2d0>)
    b248:	2200      	movs	r2, #0
    b24a:	2106      	movs	r1, #6
    b24c:	0018      	movs	r0, r3
    b24e:	4b4a      	ldr	r3, [pc, #296]	; (b378 <start_motor_service+0x2ac>)
    b250:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
    b252:	003b      	movs	r3, r7
    b254:	2225      	movs	r2, #37	; 0x25
    b256:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
    b258:	003b      	movs	r3, r7
    b25a:	2200      	movs	r2, #0
    b25c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b25e:	003b      	movs	r3, r7
    b260:	2201      	movs	r2, #1
    b262:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b264:	003b      	movs	r3, r7
    b266:	2202      	movs	r2, #2
    b268:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
    b26a:	003b      	movs	r3, r7
    b26c:	0019      	movs	r1, r3
    b26e:	2005      	movs	r0, #5
    b270:	4b3f      	ldr	r3, [pc, #252]	; (b370 <start_motor_service+0x2a4>)
    b272:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b274:	2100      	movs	r1, #0
    b276:	2005      	movs	r0, #5
    b278:	4b40      	ldr	r3, [pc, #256]	; (b37c <start_motor_service+0x2b0>)
    b27a:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b27c:	4b47      	ldr	r3, [pc, #284]	; (b39c <start_motor_service+0x2d0>)
    b27e:	2200      	movs	r2, #0
    b280:	2105      	movs	r1, #5
    b282:	0018      	movs	r0, r3
    b284:	4b3c      	ldr	r3, [pc, #240]	; (b378 <start_motor_service+0x2ac>)
    b286:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
    b288:	003b      	movs	r3, r7
    b28a:	221c      	movs	r2, #28
    b28c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
    b28e:	003b      	movs	r3, r7
    b290:	2200      	movs	r2, #0
    b292:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b294:	003b      	movs	r3, r7
    b296:	2201      	movs	r2, #1
    b298:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b29a:	003b      	movs	r3, r7
    b29c:	2202      	movs	r2, #2
    b29e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
    b2a0:	003b      	movs	r3, r7
    b2a2:	0019      	movs	r1, r3
    b2a4:	2008      	movs	r0, #8
    b2a6:	4b32      	ldr	r3, [pc, #200]	; (b370 <start_motor_service+0x2a4>)
    b2a8:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b2aa:	2100      	movs	r1, #0
    b2ac:	2008      	movs	r0, #8
    b2ae:	4b33      	ldr	r3, [pc, #204]	; (b37c <start_motor_service+0x2b0>)
    b2b0:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b2b2:	4b3a      	ldr	r3, [pc, #232]	; (b39c <start_motor_service+0x2d0>)
    b2b4:	2200      	movs	r2, #0
    b2b6:	2108      	movs	r1, #8
    b2b8:	0018      	movs	r0, r3
    b2ba:	4b2f      	ldr	r3, [pc, #188]	; (b378 <start_motor_service+0x2ac>)
    b2bc:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
    b2be:	003b      	movs	r3, r7
    b2c0:	2229      	movs	r2, #41	; 0x29
    b2c2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
    b2c4:	003b      	movs	r3, r7
    b2c6:	2200      	movs	r2, #0
    b2c8:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b2ca:	003b      	movs	r3, r7
    b2cc:	2201      	movs	r2, #1
    b2ce:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b2d0:	003b      	movs	r3, r7
    b2d2:	2202      	movs	r2, #2
    b2d4:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
    b2d6:	003b      	movs	r3, r7
    b2d8:	0019      	movs	r1, r3
    b2da:	2009      	movs	r0, #9
    b2dc:	4b24      	ldr	r3, [pc, #144]	; (b370 <start_motor_service+0x2a4>)
    b2de:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b2e0:	2100      	movs	r1, #0
    b2e2:	2009      	movs	r0, #9
    b2e4:	4b25      	ldr	r3, [pc, #148]	; (b37c <start_motor_service+0x2b0>)
    b2e6:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b2e8:	4b2c      	ldr	r3, [pc, #176]	; (b39c <start_motor_service+0x2d0>)
    b2ea:	2200      	movs	r2, #0
    b2ec:	2109      	movs	r1, #9
    b2ee:	0018      	movs	r0, r3
    b2f0:	4b21      	ldr	r3, [pc, #132]	; (b378 <start_motor_service+0x2ac>)
    b2f2:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b2f4:	482a      	ldr	r0, [pc, #168]	; (b3a0 <start_motor_service+0x2d4>)
    b2f6:	2300      	movs	r3, #0
    b2f8:	9301      	str	r3, [sp, #4]
    b2fa:	2301      	movs	r3, #1
    b2fc:	9300      	str	r3, [sp, #0]
    b2fe:	2300      	movs	r3, #0
    b300:	2282      	movs	r2, #130	; 0x82
    b302:	2100      	movs	r1, #0
    b304:	4c27      	ldr	r4, [pc, #156]	; (b3a4 <start_motor_service+0x2d8>)
    b306:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b308:	4827      	ldr	r0, [pc, #156]	; (b3a8 <start_motor_service+0x2dc>)
    b30a:	2300      	movs	r3, #0
    b30c:	9301      	str	r3, [sp, #4]
    b30e:	2301      	movs	r3, #1
    b310:	9300      	str	r3, [sp, #0]
    b312:	2300      	movs	r3, #0
    b314:	2282      	movs	r2, #130	; 0x82
    b316:	2100      	movs	r1, #0
    b318:	4c22      	ldr	r4, [pc, #136]	; (b3a4 <start_motor_service+0x2d8>)
    b31a:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
    b31c:	4823      	ldr	r0, [pc, #140]	; (b3ac <start_motor_service+0x2e0>)
    b31e:	4b24      	ldr	r3, [pc, #144]	; (b3b0 <start_motor_service+0x2e4>)
    b320:	9301      	str	r3, [sp, #4]
    b322:	2301      	movs	r3, #1
    b324:	9300      	str	r3, [sp, #0]
    b326:	2300      	movs	r3, #0
    b328:	2282      	movs	r2, #130	; 0x82
    b32a:	2100      	movs	r1, #0
    b32c:	4c1d      	ldr	r4, [pc, #116]	; (b3a4 <start_motor_service+0x2d8>)
    b32e:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
    b330:	4b20      	ldr	r3, [pc, #128]	; (b3b4 <start_motor_service+0x2e8>)
    b332:	795b      	ldrb	r3, [r3, #5]
    b334:	2b00      	cmp	r3, #0
    b336:	d00a      	beq.n	b34e <start_motor_service+0x282>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
    b338:	23af      	movs	r3, #175	; 0xaf
    b33a:	009a      	lsls	r2, r3, #2
    b33c:	481e      	ldr	r0, [pc, #120]	; (b3b8 <start_motor_service+0x2ec>)
    b33e:	2300      	movs	r3, #0
    b340:	9301      	str	r3, [sp, #4]
    b342:	2301      	movs	r3, #1
    b344:	9300      	str	r3, [sp, #0]
    b346:	2300      	movs	r3, #0
    b348:	2100      	movs	r1, #0
    b34a:	4c16      	ldr	r4, [pc, #88]	; (b3a4 <start_motor_service+0x2d8>)
    b34c:	47a0      	blx	r4
	}
	

	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)700,NULL,1, &motorTask);
    b34e:	23af      	movs	r3, #175	; 0xaf
    b350:	009a      	lsls	r2, r3, #2
    b352:	481a      	ldr	r0, [pc, #104]	; (b3bc <start_motor_service+0x2f0>)
    b354:	4b1a      	ldr	r3, [pc, #104]	; (b3c0 <start_motor_service+0x2f4>)
    b356:	9301      	str	r3, [sp, #4]
    b358:	2301      	movs	r3, #1
    b35a:	9300      	str	r3, [sp, #0]
    b35c:	2300      	movs	r3, #0
    b35e:	2100      	movs	r1, #0
    b360:	4c10      	ldr	r4, [pc, #64]	; (b3a4 <start_motor_service+0x2d8>)
    b362:	47a0      	blx	r4

}
    b364:	46c0      	nop			; (mov r8, r8)
    b366:	46bd      	mov	sp, r7
    b368:	b009      	add	sp, #36	; 0x24
    b36a:	bd90      	pop	{r4, r7, pc}
    b36c:	0000cc15 	.word	0x0000cc15
    b370:	0000cc49 	.word	0x0000cc49
    b374:	000094fd 	.word	0x000094fd
    b378:	00010f55 	.word	0x00010f55
    b37c:	00010fb9 	.word	0x00010fb9
    b380:	000085b1 	.word	0x000085b1
    b384:	00011ac9 	.word	0x00011ac9
    b388:	0000dd95 	.word	0x0000dd95
    b38c:	20000230 	.word	0x20000230
    b390:	0000de51 	.word	0x0000de51
    b394:	00008619 	.word	0x00008619
    b398:	0000b6ad 	.word	0x0000b6ad
    b39c:	0000ad3d 	.word	0x0000ad3d
    b3a0:	00009715 	.word	0x00009715
    b3a4:	0000e8b9 	.word	0x0000e8b9
    b3a8:	00009781 	.word	0x00009781
    b3ac:	0000b9a1 	.word	0x0000b9a1
    b3b0:	2000073c 	.word	0x2000073c
    b3b4:	20000618 	.word	0x20000618
    b3b8:	00008aa1 	.word	0x00008aa1
    b3bc:	0000ad51 	.word	0x0000ad51
    b3c0:	20000790 	.word	0x20000790

0000b3c4 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b082      	sub	sp, #8
    b3c8:	af00      	add	r7, sp, #0
	uint8_t j = 0;
    b3ca:	1dfb      	adds	r3, r7, #7
    b3cc:	2200      	movs	r2, #0
    b3ce:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    b3d0:	4b44      	ldr	r3, [pc, #272]	; (b4e4 <motor_checkSleepElligible+0x120>)
    b3d2:	795b      	ldrb	r3, [r3, #5]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d00b      	beq.n	b3f0 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    b3d8:	4b42      	ldr	r3, [pc, #264]	; (b4e4 <motor_checkSleepElligible+0x120>)
    b3da:	791b      	ldrb	r3, [r3, #4]
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d003      	beq.n	b3e8 <motor_checkSleepElligible+0x24>
		{
			j = 19;
    b3e0:	1dfb      	adds	r3, r7, #7
    b3e2:	2213      	movs	r2, #19
    b3e4:	701a      	strb	r2, [r3, #0]
    b3e6:	e00e      	b.n	b406 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
    b3e8:	1dfb      	adds	r3, r7, #7
    b3ea:	2211      	movs	r2, #17
    b3ec:	701a      	strb	r2, [r3, #0]
    b3ee:	e00a      	b.n	b406 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b3f0:	4b3c      	ldr	r3, [pc, #240]	; (b4e4 <motor_checkSleepElligible+0x120>)
    b3f2:	785b      	ldrb	r3, [r3, #1]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d003      	beq.n	b400 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
    b3f8:	1dfb      	adds	r3, r7, #7
    b3fa:	220e      	movs	r2, #14
    b3fc:	701a      	strb	r2, [r3, #0]
    b3fe:	e002      	b.n	b406 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
    b400:	1dfb      	adds	r3, r7, #7
    b402:	220c      	movs	r2, #12
    b404:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
    b406:	1dbb      	adds	r3, r7, #6
    b408:	2201      	movs	r2, #1
    b40a:	701a      	strb	r2, [r3, #0]
	while(j--)
    b40c:	e00c      	b.n	b428 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
    b40e:	1dfb      	adds	r3, r7, #7
    b410:	781b      	ldrb	r3, [r3, #0]
    b412:	4a35      	ldr	r2, [pc, #212]	; (b4e8 <motor_checkSleepElligible+0x124>)
    b414:	5cd3      	ldrb	r3, [r2, r3]
    b416:	2201      	movs	r2, #1
    b418:	4053      	eors	r3, r2
    b41a:	b2db      	uxtb	r3, r3
    b41c:	2b00      	cmp	r3, #0
    b41e:	d003      	beq.n	b428 <motor_checkSleepElligible+0x64>
		{
			event=false;
    b420:	1dbb      	adds	r3, r7, #6
    b422:	2200      	movs	r2, #0
    b424:	701a      	strb	r2, [r3, #0]
			break;
    b426:	e006      	b.n	b436 <motor_checkSleepElligible+0x72>
	while(j--)
    b428:	1dfb      	adds	r3, r7, #7
    b42a:	781b      	ldrb	r3, [r3, #0]
    b42c:	1dfa      	adds	r2, r7, #7
    b42e:	1e59      	subs	r1, r3, #1
    b430:	7011      	strb	r1, [r2, #0]
    b432:	2b00      	cmp	r3, #0
    b434:	d1eb      	bne.n	b40e <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    b436:	4b2b      	ldr	r3, [pc, #172]	; (b4e4 <motor_checkSleepElligible+0x120>)
    b438:	78db      	ldrb	r3, [r3, #3]
    b43a:	2b00      	cmp	r3, #0
    b43c:	d00e      	beq.n	b45c <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
    b43e:	1dbb      	adds	r3, r7, #6
    b440:	781b      	ldrb	r3, [r3, #0]
    b442:	2b00      	cmp	r3, #0
    b444:	d003      	beq.n	b44e <motor_checkSleepElligible+0x8a>
    b446:	4b29      	ldr	r3, [pc, #164]	; (b4ec <motor_checkSleepElligible+0x128>)
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	2b01      	cmp	r3, #1
    b44c:	d003      	beq.n	b456 <motor_checkSleepElligible+0x92>
    b44e:	4b27      	ldr	r3, [pc, #156]	; (b4ec <motor_checkSleepElligible+0x128>)
    b450:	785b      	ldrb	r3, [r3, #1]
    b452:	2b01      	cmp	r3, #1
    b454:	d102      	bne.n	b45c <motor_checkSleepElligible+0x98>
		{
			event = false;
    b456:	1dbb      	adds	r3, r7, #6
    b458:	2200      	movs	r2, #0
    b45a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b45c:	4b24      	ldr	r3, [pc, #144]	; (b4f0 <motor_checkSleepElligible+0x12c>)
    b45e:	4798      	blx	r3
    b460:	0003      	movs	r3, r0
    b462:	001a      	movs	r2, r3
    b464:	2301      	movs	r3, #1
    b466:	4053      	eors	r3, r2
    b468:	b2db      	uxtb	r3, r3
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    b46a:	2b00      	cmp	r3, #0
    b46c:	d030      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b46e:	4b21      	ldr	r3, [pc, #132]	; (b4f4 <motor_checkSleepElligible+0x130>)
    b470:	781b      	ldrb	r3, [r3, #0]
    b472:	b2db      	uxtb	r3, r3
    b474:	2201      	movs	r2, #1
    b476:	4053      	eors	r3, r2
    b478:	b2db      	uxtb	r3, r3
    b47a:	2b00      	cmp	r3, #0
    b47c:	d028      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
    b47e:	1dbb      	adds	r3, r7, #6
    b480:	781b      	ldrb	r3, [r3, #0]
    b482:	2b00      	cmp	r3, #0
    b484:	d024      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
    b486:	4b1c      	ldr	r3, [pc, #112]	; (b4f8 <motor_checkSleepElligible+0x134>)
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	2201      	movs	r2, #1
    b48c:	4053      	eors	r3, r2
    b48e:	b2db      	uxtb	r3, r3
    b490:	2b00      	cmp	r3, #0
    b492:	d01d      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
    b494:	4b19      	ldr	r3, [pc, #100]	; (b4fc <motor_checkSleepElligible+0x138>)
    b496:	781b      	ldrb	r3, [r3, #0]
    b498:	2201      	movs	r2, #1
    b49a:	4053      	eors	r3, r2
    b49c:	b2db      	uxtb	r3, r3
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d016      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    b4a2:	4b17      	ldr	r3, [pc, #92]	; (b500 <motor_checkSleepElligible+0x13c>)
    b4a4:	781b      	ldrb	r3, [r3, #0]
    b4a6:	2201      	movs	r2, #1
    b4a8:	4053      	eors	r3, r2
    b4aa:	b2db      	uxtb	r3, r3
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d00f      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
    b4b0:	4b14      	ldr	r3, [pc, #80]	; (b504 <motor_checkSleepElligible+0x140>)
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	2201      	movs	r2, #1
    b4b6:	4053      	eors	r3, r2
    b4b8:	b2db      	uxtb	r3, r3
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d008      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
    b4be:	4b12      	ldr	r3, [pc, #72]	; (b508 <motor_checkSleepElligible+0x144>)
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	2201      	movs	r2, #1
    b4c4:	4053      	eors	r3, r2
    b4c6:	b2db      	uxtb	r3, r3
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d001      	beq.n	b4d0 <motor_checkSleepElligible+0x10c>
    b4cc:	2301      	movs	r3, #1
    b4ce:	e000      	b.n	b4d2 <motor_checkSleepElligible+0x10e>
    b4d0:	2300      	movs	r3, #0
    b4d2:	1c1a      	adds	r2, r3, #0
    b4d4:	2301      	movs	r3, #1
    b4d6:	4013      	ands	r3, r2
    b4d8:	b2db      	uxtb	r3, r3
	
}
    b4da:	0018      	movs	r0, r3
    b4dc:	46bd      	mov	sp, r7
    b4de:	b002      	add	sp, #8
    b4e0:	bd80      	pop	{r7, pc}
    b4e2:	46c0      	nop			; (mov r8, r8)
    b4e4:	20000618 	.word	0x20000618
    b4e8:	200006ec 	.word	0x200006ec
    b4ec:	20000774 	.word	0x20000774
    b4f0:	00009bed 	.word	0x00009bed
    b4f4:	20000703 	.word	0x20000703
    b4f8:	200007b1 	.word	0x200007b1
    b4fc:	20000755 	.word	0x20000755
    b500:	2000075e 	.word	0x2000075e
    b504:	2000075d 	.word	0x2000075d
    b508:	2000074d 	.word	0x2000074d

0000b50c <configure_ac>:


void configure_ac(void)
{
    b50c:	b580      	push	{r7, lr}
    b50e:	b08a      	sub	sp, #40	; 0x28
    b510:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
    b512:	231c      	movs	r3, #28
    b514:	18fb      	adds	r3, r7, r3
    b516:	0018      	movs	r0, r3
    b518:	2305      	movs	r3, #5
    b51a:	001a      	movs	r2, r3
    b51c:	2100      	movs	r1, #0
    b51e:	4b2c      	ldr	r3, [pc, #176]	; (b5d0 <configure_ac+0xc4>)
    b520:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
    b522:	2324      	movs	r3, #36	; 0x24
    b524:	18fb      	adds	r3, r7, r3
    b526:	0018      	movs	r0, r3
    b528:	4b2a      	ldr	r3, [pc, #168]	; (b5d4 <configure_ac+0xc8>)
    b52a:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
    b52c:	2324      	movs	r3, #36	; 0x24
    b52e:	18fb      	adds	r3, r7, r3
    b530:	2201      	movs	r2, #1
    b532:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
    b534:	2324      	movs	r3, #36	; 0x24
    b536:	18fb      	adds	r3, r7, r3
    b538:	2206      	movs	r2, #6
    b53a:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
    b53c:	2324      	movs	r3, #36	; 0x24
    b53e:	18fa      	adds	r2, r7, r3
    b540:	4925      	ldr	r1, [pc, #148]	; (b5d8 <configure_ac+0xcc>)
    b542:	4b26      	ldr	r3, [pc, #152]	; (b5dc <configure_ac+0xd0>)
    b544:	0018      	movs	r0, r3
    b546:	4b26      	ldr	r3, [pc, #152]	; (b5e0 <configure_ac+0xd4>)
    b548:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    b54a:	1d3b      	adds	r3, r7, #4
    b54c:	2200      	movs	r2, #0
    b54e:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
    b550:	1d3b      	adds	r3, r7, #4
    b552:	2200      	movs	r2, #0
    b554:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
    b556:	1d3b      	adds	r3, r7, #4
    b558:	2200      	movs	r2, #0
    b55a:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
    b55c:	1d3b      	adds	r3, r7, #4
    b55e:	2200      	movs	r2, #0
    b560:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
    b562:	1d3b      	adds	r3, r7, #4
    b564:	2200      	movs	r2, #0
    b566:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
    b568:	1d3b      	adds	r3, r7, #4
    b56a:	22a0      	movs	r2, #160	; 0xa0
    b56c:	00d2      	lsls	r2, r2, #3
    b56e:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
    b570:	1d3b      	adds	r3, r7, #4
    b572:	222d      	movs	r2, #45	; 0x2d
    b574:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
    b576:	1d3b      	adds	r3, r7, #4
    b578:	2200      	movs	r2, #0
    b57a:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
    b57c:	1d3a      	adds	r2, r7, #4
    b57e:	4b17      	ldr	r3, [pc, #92]	; (b5dc <configure_ac+0xd0>)
    b580:	2100      	movs	r1, #0
    b582:	0018      	movs	r0, r3
    b584:	4b17      	ldr	r3, [pc, #92]	; (b5e4 <configure_ac+0xd8>)
    b586:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
    b588:	4b14      	ldr	r3, [pc, #80]	; (b5dc <configure_ac+0xd0>)
    b58a:	2100      	movs	r1, #0
    b58c:	0018      	movs	r0, r3
    b58e:	4b16      	ldr	r3, [pc, #88]	; (b5e8 <configure_ac+0xdc>)
    b590:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
    b592:	231c      	movs	r3, #28
    b594:	18fb      	adds	r3, r7, r3
    b596:	2201      	movs	r2, #1
    b598:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
    b59a:	231c      	movs	r3, #28
    b59c:	18fa      	adds	r2, r7, r3
    b59e:	4b0f      	ldr	r3, [pc, #60]	; (b5dc <configure_ac+0xd0>)
    b5a0:	0011      	movs	r1, r2
    b5a2:	0018      	movs	r0, r3
    b5a4:	4b11      	ldr	r3, [pc, #68]	; (b5ec <configure_ac+0xe0>)
    b5a6:	4798      	blx	r3
	
	ac_enable(&ac_instance);
    b5a8:	4b0c      	ldr	r3, [pc, #48]	; (b5dc <configure_ac+0xd0>)
    b5aa:	0018      	movs	r0, r3
    b5ac:	4b10      	ldr	r3, [pc, #64]	; (b5f0 <configure_ac+0xe4>)
    b5ae:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
    b5b0:	4910      	ldr	r1, [pc, #64]	; (b5f4 <configure_ac+0xe8>)
    b5b2:	4b0a      	ldr	r3, [pc, #40]	; (b5dc <configure_ac+0xd0>)
    b5b4:	2200      	movs	r2, #0
    b5b6:	0018      	movs	r0, r3
    b5b8:	4b0f      	ldr	r3, [pc, #60]	; (b5f8 <configure_ac+0xec>)
    b5ba:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
    b5bc:	4b07      	ldr	r3, [pc, #28]	; (b5dc <configure_ac+0xd0>)
    b5be:	2100      	movs	r1, #0
    b5c0:	0018      	movs	r0, r3
    b5c2:	4b0e      	ldr	r3, [pc, #56]	; (b5fc <configure_ac+0xf0>)
    b5c4:	4798      	blx	r3
}
    b5c6:	46c0      	nop			; (mov r8, r8)
    b5c8:	46bd      	mov	sp, r7
    b5ca:	b00a      	add	sp, #40	; 0x28
    b5cc:	bd80      	pop	{r7, pc}
    b5ce:	46c0      	nop			; (mov r8, r8)
    b5d0:	000178b7 	.word	0x000178b7
    b5d4:	00007fb5 	.word	0x00007fb5
    b5d8:	42004400 	.word	0x42004400
    b5dc:	20000820 	.word	0x20000820
    b5e0:	0000bb09 	.word	0x0000bb09
    b5e4:	0000bbe9 	.word	0x0000bbe9
    b5e8:	00008105 	.word	0x00008105
    b5ec:	00008025 	.word	0x00008025
    b5f0:	00007fed 	.word	0x00007fed
    b5f4:	0000b691 	.word	0x0000b691
    b5f8:	00011381 	.word	0x00011381
    b5fc:	0000826d 	.word	0x0000826d

0000b600 <configure_rtc>:

void configure_rtc(void)
{
    b600:	b580      	push	{r7, lr}
    b602:	b088      	sub	sp, #32
    b604:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
    b606:	1d3b      	adds	r3, r7, #4
    b608:	0018      	movs	r0, r3
    b60a:	230b      	movs	r3, #11
    b60c:	001a      	movs	r2, r3
    b60e:	2100      	movs	r1, #0
    b610:	4b17      	ldr	r3, [pc, #92]	; (b670 <configure_rtc+0x70>)
    b612:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
    b614:	2310      	movs	r3, #16
    b616:	18fb      	adds	r3, r7, r3
    b618:	0018      	movs	r0, r3
    b61a:	4b16      	ldr	r3, [pc, #88]	; (b674 <configure_rtc+0x74>)
    b61c:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
    b61e:	2310      	movs	r3, #16
    b620:	18fb      	adds	r3, r7, r3
    b622:	2200      	movs	r2, #0
    b624:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
    b626:	2310      	movs	r3, #16
    b628:	18fb      	adds	r3, r7, r3
    b62a:	2200      	movs	r2, #0
    b62c:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
    b62e:	2310      	movs	r3, #16
    b630:	18fb      	adds	r3, r7, r3
    b632:	2201      	movs	r2, #1
    b634:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
    b636:	2310      	movs	r3, #16
    b638:	18fa      	adds	r2, r7, r3
    b63a:	490f      	ldr	r1, [pc, #60]	; (b678 <configure_rtc+0x78>)
    b63c:	4b0f      	ldr	r3, [pc, #60]	; (b67c <configure_rtc+0x7c>)
    b63e:	0018      	movs	r0, r3
    b640:	4b0f      	ldr	r3, [pc, #60]	; (b680 <configure_rtc+0x80>)
    b642:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
    b644:	4b0d      	ldr	r3, [pc, #52]	; (b67c <configure_rtc+0x7c>)
    b646:	210a      	movs	r1, #10
    b648:	0018      	movs	r0, r3
    b64a:	4b0e      	ldr	r3, [pc, #56]	; (b684 <configure_rtc+0x84>)
    b64c:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
    b64e:	1d3b      	adds	r3, r7, #4
    b650:	2201      	movs	r2, #1
    b652:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
    b654:	1d3a      	adds	r2, r7, #4
    b656:	4b09      	ldr	r3, [pc, #36]	; (b67c <configure_rtc+0x7c>)
    b658:	0011      	movs	r1, r2
    b65a:	0018      	movs	r0, r3
    b65c:	4b0a      	ldr	r3, [pc, #40]	; (b688 <configure_rtc+0x88>)
    b65e:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    b660:	4b06      	ldr	r3, [pc, #24]	; (b67c <configure_rtc+0x7c>)
    b662:	0018      	movs	r0, r3
    b664:	4b09      	ldr	r3, [pc, #36]	; (b68c <configure_rtc+0x8c>)
    b666:	4798      	blx	r3
}
    b668:	46c0      	nop			; (mov r8, r8)
    b66a:	46bd      	mov	sp, r7
    b66c:	b008      	add	sp, #32
    b66e:	bd80      	pop	{r7, pc}
    b670:	000178b7 	.word	0x000178b7
    b674:	000086f5 	.word	0x000086f5
    b678:	40001400 	.word	0x40001400
    b67c:	20000800 	.word	0x20000800
    b680:	0000d065 	.word	0x0000d065
    b684:	0000d181 	.word	0x0000d181
    b688:	00008751 	.word	0x00008751
    b68c:	0000ce3d 	.word	0x0000ce3d

0000b690 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
    b690:	b580      	push	{r7, lr}
    b692:	b082      	sub	sp, #8
    b694:	af00      	add	r7, sp, #0
    b696:	6078      	str	r0, [r7, #4]
	eventOccured = true;
    b698:	4b03      	ldr	r3, [pc, #12]	; (b6a8 <ac_detect_callback+0x18>)
    b69a:	2201      	movs	r2, #1
    b69c:	701a      	strb	r2, [r3, #0]
}
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	46bd      	mov	sp, r7
    b6a2:	b002      	add	sp, #8
    b6a4:	bd80      	pop	{r7, pc}
    b6a6:	46c0      	nop			; (mov r8, r8)
    b6a8:	20000703 	.word	0x20000703

0000b6ac <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
    b6ac:	b580      	push	{r7, lr}
    b6ae:	af00      	add	r7, sp, #0
	eventOccured = true;
    b6b0:	4b02      	ldr	r3, [pc, #8]	; (b6bc <motor_feedback_callback+0x10>)
    b6b2:	2201      	movs	r2, #1
    b6b4:	701a      	strb	r2, [r3, #0]
}
    b6b6:	46c0      	nop			; (mov r8, r8)
    b6b8:	46bd      	mov	sp, r7
    b6ba:	bd80      	pop	{r7, pc}
    b6bc:	20000703 	.word	0x20000703

0000b6c0 <configure_event>:

void configure_event(void)
{
    b6c0:	b580      	push	{r7, lr}
    b6c2:	b082      	sub	sp, #8
    b6c4:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
    b6c6:	1d3b      	adds	r3, r7, #4
    b6c8:	0018      	movs	r0, r3
    b6ca:	4b0d      	ldr	r3, [pc, #52]	; (b700 <configure_event+0x40>)
    b6cc:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
    b6ce:	1d3b      	adds	r3, r7, #4
    b6d0:	2203      	movs	r2, #3
    b6d2:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
    b6d4:	1d3b      	adds	r3, r7, #4
    b6d6:	2200      	movs	r2, #0
    b6d8:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
    b6da:	1d3b      	adds	r3, r7, #4
    b6dc:	2202      	movs	r2, #2
    b6de:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
    b6e0:	1d3a      	adds	r2, r7, #4
    b6e2:	4b08      	ldr	r3, [pc, #32]	; (b704 <configure_event+0x44>)
    b6e4:	0011      	movs	r1, r2
    b6e6:	0018      	movs	r0, r3
    b6e8:	4b07      	ldr	r3, [pc, #28]	; (b708 <configure_event+0x48>)
    b6ea:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
    b6ec:	4b05      	ldr	r3, [pc, #20]	; (b704 <configure_event+0x44>)
    b6ee:	2119      	movs	r1, #25
    b6f0:	0018      	movs	r0, r3
    b6f2:	4b06      	ldr	r3, [pc, #24]	; (b70c <configure_event+0x4c>)
    b6f4:	4798      	blx	r3
}
    b6f6:	46c0      	nop			; (mov r8, r8)
    b6f8:	46bd      	mov	sp, r7
    b6fa:	b002      	add	sp, #8
    b6fc:	bd80      	pop	{r7, pc}
    b6fe:	46c0      	nop			; (mov r8, r8)
    b700:	00011241 	.word	0x00011241
    b704:	20000818 	.word	0x20000818
    b708:	00011269 	.word	0x00011269
    b70c:	00011331 	.word	0x00011331

0000b710 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
    b710:	b580      	push	{r7, lr}
    b712:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
    b714:	4b28      	ldr	r3, [pc, #160]	; (b7b8 <operateOnButtonEvent+0xa8>)
    b716:	2200      	movs	r2, #0
    b718:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
    b71a:	2026      	movs	r0, #38	; 0x26
    b71c:	4b27      	ldr	r3, [pc, #156]	; (b7bc <operateOnButtonEvent+0xac>)
    b71e:	4798      	blx	r3
    b720:	0003      	movs	r3, r0
    b722:	001a      	movs	r2, r3
    b724:	2301      	movs	r3, #1
    b726:	4053      	eors	r3, r2
    b728:	b2db      	uxtb	r3, r3
    b72a:	2b00      	cmp	r3, #0
    b72c:	d008      	beq.n	b740 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
    b72e:	4b24      	ldr	r3, [pc, #144]	; (b7c0 <operateOnButtonEvent+0xb0>)
    b730:	4798      	blx	r3
    b732:	0002      	movs	r2, r0
    b734:	4b23      	ldr	r3, [pc, #140]	; (b7c4 <operateOnButtonEvent+0xb4>)
    b736:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
    b738:	4b23      	ldr	r3, [pc, #140]	; (b7c8 <operateOnButtonEvent+0xb8>)
    b73a:	2201      	movs	r2, #1
    b73c:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
    b73e:	e037      	b.n	b7b0 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
    b740:	2025      	movs	r0, #37	; 0x25
    b742:	4b1e      	ldr	r3, [pc, #120]	; (b7bc <operateOnButtonEvent+0xac>)
    b744:	4798      	blx	r3
    b746:	0003      	movs	r3, r0
    b748:	001a      	movs	r2, r3
    b74a:	2301      	movs	r3, #1
    b74c:	4053      	eors	r3, r2
    b74e:	b2db      	uxtb	r3, r3
    b750:	2b00      	cmp	r3, #0
    b752:	d008      	beq.n	b766 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
    b754:	4b1a      	ldr	r3, [pc, #104]	; (b7c0 <operateOnButtonEvent+0xb0>)
    b756:	4798      	blx	r3
    b758:	0002      	movs	r2, r0
    b75a:	4b1a      	ldr	r3, [pc, #104]	; (b7c4 <operateOnButtonEvent+0xb4>)
    b75c:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
    b75e:	4b1a      	ldr	r3, [pc, #104]	; (b7c8 <operateOnButtonEvent+0xb8>)
    b760:	2202      	movs	r2, #2
    b762:	701a      	strb	r2, [r3, #0]
}
    b764:	e024      	b.n	b7b0 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
    b766:	201c      	movs	r0, #28
    b768:	4b14      	ldr	r3, [pc, #80]	; (b7bc <operateOnButtonEvent+0xac>)
    b76a:	4798      	blx	r3
    b76c:	0003      	movs	r3, r0
    b76e:	001a      	movs	r2, r3
    b770:	2301      	movs	r3, #1
    b772:	4053      	eors	r3, r2
    b774:	b2db      	uxtb	r3, r3
    b776:	2b00      	cmp	r3, #0
    b778:	d008      	beq.n	b78c <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
    b77a:	4b11      	ldr	r3, [pc, #68]	; (b7c0 <operateOnButtonEvent+0xb0>)
    b77c:	4798      	blx	r3
    b77e:	0002      	movs	r2, r0
    b780:	4b10      	ldr	r3, [pc, #64]	; (b7c4 <operateOnButtonEvent+0xb4>)
    b782:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
    b784:	4b10      	ldr	r3, [pc, #64]	; (b7c8 <operateOnButtonEvent+0xb8>)
    b786:	2203      	movs	r2, #3
    b788:	701a      	strb	r2, [r3, #0]
}
    b78a:	e011      	b.n	b7b0 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
    b78c:	2029      	movs	r0, #41	; 0x29
    b78e:	4b0b      	ldr	r3, [pc, #44]	; (b7bc <operateOnButtonEvent+0xac>)
    b790:	4798      	blx	r3
    b792:	0003      	movs	r3, r0
    b794:	001a      	movs	r2, r3
    b796:	2301      	movs	r3, #1
    b798:	4053      	eors	r3, r2
    b79a:	b2db      	uxtb	r3, r3
    b79c:	2b00      	cmp	r3, #0
    b79e:	d007      	beq.n	b7b0 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
    b7a0:	4b07      	ldr	r3, [pc, #28]	; (b7c0 <operateOnButtonEvent+0xb0>)
    b7a2:	4798      	blx	r3
    b7a4:	0002      	movs	r2, r0
    b7a6:	4b07      	ldr	r3, [pc, #28]	; (b7c4 <operateOnButtonEvent+0xb4>)
    b7a8:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
    b7aa:	4b07      	ldr	r3, [pc, #28]	; (b7c8 <operateOnButtonEvent+0xb8>)
    b7ac:	2204      	movs	r2, #4
    b7ae:	701a      	strb	r2, [r3, #0]
}
    b7b0:	46c0      	nop			; (mov r8, r8)
    b7b2:	46bd      	mov	sp, r7
    b7b4:	bd80      	pop	{r7, pc}
    b7b6:	46c0      	nop			; (mov r8, r8)
    b7b8:	20000763 	.word	0x20000763
    b7bc:	000085d5 	.word	0x000085d5
    b7c0:	0000ef5d 	.word	0x0000ef5d
    b7c4:	2000072c 	.word	0x2000072c
    b7c8:	2000074c 	.word	0x2000074c

0000b7cc <buttonFilter>:

void buttonFilter(void)
{
    b7cc:	b580      	push	{r7, lr}
    b7ce:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
    b7d0:	4b47      	ldr	r3, [pc, #284]	; (b8f0 <buttonFilter+0x124>)
    b7d2:	781b      	ldrb	r3, [r3, #0]
    b7d4:	b2db      	uxtb	r3, r3
    b7d6:	2b00      	cmp	r3, #0
    b7d8:	d100      	bne.n	b7dc <buttonFilter+0x10>
    b7da:	e085      	b.n	b8e8 <buttonFilter+0x11c>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
    b7dc:	4b44      	ldr	r3, [pc, #272]	; (b8f0 <buttonFilter+0x124>)
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	b2db      	uxtb	r3, r3
    b7e2:	2b01      	cmp	r3, #1
    b7e4:	d110      	bne.n	b808 <buttonFilter+0x3c>
    b7e6:	2026      	movs	r0, #38	; 0x26
    b7e8:	4b42      	ldr	r3, [pc, #264]	; (b8f4 <buttonFilter+0x128>)
    b7ea:	4798      	blx	r3
    b7ec:	0003      	movs	r3, r0
    b7ee:	001a      	movs	r2, r3
    b7f0:	2301      	movs	r3, #1
    b7f2:	4053      	eors	r3, r2
    b7f4:	b2db      	uxtb	r3, r3
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d006      	beq.n	b808 <buttonFilter+0x3c>
		{
			lastButtonEvent=0;
    b7fa:	4b3d      	ldr	r3, [pc, #244]	; (b8f0 <buttonFilter+0x124>)
    b7fc:	2200      	movs	r2, #0
    b7fe:	701a      	strb	r2, [r3, #0]
			startMotor(false);
    b800:	2000      	movs	r0, #0
    b802:	4b3d      	ldr	r3, [pc, #244]	; (b8f8 <buttonFilter+0x12c>)
    b804:	4798      	blx	r3
    b806:	e06f      	b.n	b8e8 <buttonFilter+0x11c>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
    b808:	4b39      	ldr	r3, [pc, #228]	; (b8f0 <buttonFilter+0x124>)
    b80a:	781b      	ldrb	r3, [r3, #0]
    b80c:	b2db      	uxtb	r3, r3
    b80e:	2b02      	cmp	r3, #2
    b810:	d112      	bne.n	b838 <buttonFilter+0x6c>
    b812:	2025      	movs	r0, #37	; 0x25
    b814:	4b37      	ldr	r3, [pc, #220]	; (b8f4 <buttonFilter+0x128>)
    b816:	4798      	blx	r3
    b818:	0003      	movs	r3, r0
    b81a:	001a      	movs	r2, r3
    b81c:	2301      	movs	r3, #1
    b81e:	4053      	eors	r3, r2
    b820:	b2db      	uxtb	r3, r3
    b822:	2b00      	cmp	r3, #0
    b824:	d008      	beq.n	b838 <buttonFilter+0x6c>
		{
			lastButtonEvent=0;
    b826:	4b32      	ldr	r3, [pc, #200]	; (b8f0 <buttonFilter+0x124>)
    b828:	2200      	movs	r2, #0
    b82a:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
    b82c:	2201      	movs	r2, #1
    b82e:	2100      	movs	r1, #0
    b830:	2000      	movs	r0, #0
    b832:	4b32      	ldr	r3, [pc, #200]	; (b8fc <buttonFilter+0x130>)
    b834:	4798      	blx	r3
    b836:	e057      	b.n	b8e8 <buttonFilter+0x11c>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
    b838:	4b2d      	ldr	r3, [pc, #180]	; (b8f0 <buttonFilter+0x124>)
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	b2db      	uxtb	r3, r3
    b83e:	2b03      	cmp	r3, #3
    b840:	d12b      	bne.n	b89a <buttonFilter+0xce>
    b842:	201c      	movs	r0, #28
    b844:	4b2b      	ldr	r3, [pc, #172]	; (b8f4 <buttonFilter+0x128>)
    b846:	4798      	blx	r3
    b848:	0003      	movs	r3, r0
    b84a:	001a      	movs	r2, r3
    b84c:	2301      	movs	r3, #1
    b84e:	4053      	eors	r3, r2
    b850:	b2db      	uxtb	r3, r3
    b852:	2b00      	cmp	r3, #0
    b854:	d021      	beq.n	b89a <buttonFilter+0xce>
		{
			lastButtonEvent=0;
    b856:	4b26      	ldr	r3, [pc, #152]	; (b8f0 <buttonFilter+0x124>)
    b858:	2200      	movs	r2, #0
    b85a:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
    b85c:	4b28      	ldr	r3, [pc, #160]	; (b900 <buttonFilter+0x134>)
    b85e:	785b      	ldrb	r3, [r3, #1]
    b860:	425a      	negs	r2, r3
    b862:	4153      	adcs	r3, r2
    b864:	b2db      	uxtb	r3, r3
    b866:	0018      	movs	r0, r3
    b868:	4b26      	ldr	r3, [pc, #152]	; (b904 <buttonFilter+0x138>)
    b86a:	4798      	blx	r3
			resetAutoStart(true);
    b86c:	2001      	movs	r0, #1
    b86e:	4b26      	ldr	r3, [pc, #152]	; (b908 <buttonFilter+0x13c>)
    b870:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
    b872:	4b23      	ldr	r3, [pc, #140]	; (b900 <buttonFilter+0x134>)
    b874:	785b      	ldrb	r3, [r3, #1]
    b876:	2b00      	cmp	r3, #0
    b878:	d007      	beq.n	b88a <buttonFilter+0xbe>
			{
				simEventTemp[10] = registerEvent(')');
    b87a:	2029      	movs	r0, #41	; 0x29
    b87c:	4b23      	ldr	r3, [pc, #140]	; (b90c <buttonFilter+0x140>)
    b87e:	4798      	blx	r3
    b880:	0003      	movs	r3, r0
    b882:	001a      	movs	r2, r3
    b884:	4b22      	ldr	r3, [pc, #136]	; (b910 <buttonFilter+0x144>)
    b886:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
    b888:	e02e      	b.n	b8e8 <buttonFilter+0x11c>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
    b88a:	205b      	movs	r0, #91	; 0x5b
    b88c:	4b1f      	ldr	r3, [pc, #124]	; (b90c <buttonFilter+0x140>)
    b88e:	4798      	blx	r3
    b890:	0003      	movs	r3, r0
    b892:	001a      	movs	r2, r3
    b894:	4b1e      	ldr	r3, [pc, #120]	; (b910 <buttonFilter+0x144>)
    b896:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
    b898:	e026      	b.n	b8e8 <buttonFilter+0x11c>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
    b89a:	4b15      	ldr	r3, [pc, #84]	; (b8f0 <buttonFilter+0x124>)
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	b2db      	uxtb	r3, r3
    b8a0:	2b04      	cmp	r3, #4
    b8a2:	d11d      	bne.n	b8e0 <buttonFilter+0x114>
    b8a4:	2029      	movs	r0, #41	; 0x29
    b8a6:	4b13      	ldr	r3, [pc, #76]	; (b8f4 <buttonFilter+0x128>)
    b8a8:	4798      	blx	r3
    b8aa:	0003      	movs	r3, r0
    b8ac:	001a      	movs	r2, r3
    b8ae:	2301      	movs	r3, #1
    b8b0:	4053      	eors	r3, r2
    b8b2:	b2db      	uxtb	r3, r3
    b8b4:	2b00      	cmp	r3, #0
    b8b6:	d013      	beq.n	b8e0 <buttonFilter+0x114>
		{
			lastButtonEvent=0;
    b8b8:	4b0d      	ldr	r3, [pc, #52]	; (b8f0 <buttonFilter+0x124>)
    b8ba:	2200      	movs	r2, #0
    b8bc:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
    b8be:	4b15      	ldr	r3, [pc, #84]	; (b914 <buttonFilter+0x148>)
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	b2db      	uxtb	r3, r3
    b8c4:	1e5a      	subs	r2, r3, #1
    b8c6:	4193      	sbcs	r3, r2
    b8c8:	b2db      	uxtb	r3, r3
    b8ca:	2201      	movs	r2, #1
    b8cc:	4053      	eors	r3, r2
    b8ce:	b2db      	uxtb	r3, r3
    b8d0:	1c1a      	adds	r2, r3, #0
    b8d2:	2301      	movs	r3, #1
    b8d4:	4013      	ands	r3, r2
    b8d6:	b2db      	uxtb	r3, r3
    b8d8:	0018      	movs	r0, r3
    b8da:	4b0f      	ldr	r3, [pc, #60]	; (b918 <buttonFilter+0x14c>)
    b8dc:	4798      	blx	r3
    b8de:	e003      	b.n	b8e8 <buttonFilter+0x11c>
		}
		else
		{
			lastButtonEvent=0;
    b8e0:	4b03      	ldr	r3, [pc, #12]	; (b8f0 <buttonFilter+0x124>)
    b8e2:	2200      	movs	r2, #0
    b8e4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    b8e6:	e7ff      	b.n	b8e8 <buttonFilter+0x11c>
    b8e8:	46c0      	nop			; (mov r8, r8)
    b8ea:	46bd      	mov	sp, r7
    b8ec:	bd80      	pop	{r7, pc}
    b8ee:	46c0      	nop			; (mov r8, r8)
    b8f0:	2000074c 	.word	0x2000074c
    b8f4:	000085d5 	.word	0x000085d5
    b8f8:	0000a2fd 	.word	0x0000a2fd
    b8fc:	0000a4a9 	.word	0x0000a4a9
    b900:	2000064c 	.word	0x2000064c
    b904:	000012a1 	.word	0x000012a1
    b908:	00009ed5 	.word	0x00009ed5
    b90c:	00004615 	.word	0x00004615
    b910:	200006ec 	.word	0x200006ec
    b914:	20000770 	.word	0x20000770
    b918:	0000b91d 	.word	0x0000b91d

0000b91c <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
    b91c:	b580      	push	{r7, lr}
    b91e:	b082      	sub	sp, #8
    b920:	af00      	add	r7, sp, #0
    b922:	0002      	movs	r2, r0
    b924:	1dfb      	adds	r3, r7, #7
    b926:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
    b928:	4b03      	ldr	r3, [pc, #12]	; (b938 <setDisplayPause+0x1c>)
    b92a:	1dfa      	adds	r2, r7, #7
    b92c:	7812      	ldrb	r2, [r2, #0]
    b92e:	701a      	strb	r2, [r3, #0]
}
    b930:	46c0      	nop			; (mov r8, r8)
    b932:	46bd      	mov	sp, r7
    b934:	b002      	add	sp, #8
    b936:	bd80      	pop	{r7, pc}
    b938:	20000770 	.word	0x20000770

0000b93c <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
    b93c:	b580      	push	{r7, lr}
    b93e:	b082      	sub	sp, #8
    b940:	af00      	add	r7, sp, #0
    b942:	6039      	str	r1, [r7, #0]
    b944:	0011      	movs	r1, r2
    b946:	1dfb      	adds	r3, r7, #7
    b948:	1c02      	adds	r2, r0, #0
    b94a:	701a      	strb	r2, [r3, #0]
    b94c:	1dbb      	adds	r3, r7, #6
    b94e:	1c0a      	adds	r2, r1, #0
    b950:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
    b952:	4b0f      	ldr	r3, [pc, #60]	; (b990 <setCallStateOnLCD+0x54>)
    b954:	1dfa      	adds	r2, r7, #7
    b956:	7812      	ldrb	r2, [r2, #0]
    b958:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
    b95a:	1dbb      	adds	r3, r7, #6
    b95c:	781b      	ldrb	r3, [r3, #0]
    b95e:	2201      	movs	r2, #1
    b960:	4053      	eors	r3, r2
    b962:	b2db      	uxtb	r3, r3
    b964:	2b00      	cmp	r3, #0
    b966:	d00f      	beq.n	b988 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
    b968:	4b0a      	ldr	r3, [pc, #40]	; (b994 <setCallStateOnLCD+0x58>)
    b96a:	2214      	movs	r2, #20
    b96c:	2100      	movs	r1, #0
    b96e:	0018      	movs	r0, r3
    b970:	4b09      	ldr	r3, [pc, #36]	; (b998 <setCallStateOnLCD+0x5c>)
    b972:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
    b974:	4b06      	ldr	r3, [pc, #24]	; (b990 <setCallStateOnLCD+0x54>)
    b976:	781b      	ldrb	r3, [r3, #0]
    b978:	2b00      	cmp	r3, #0
    b97a:	d005      	beq.n	b988 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
    b97c:	683a      	ldr	r2, [r7, #0]
    b97e:	4b05      	ldr	r3, [pc, #20]	; (b994 <setCallStateOnLCD+0x58>)
    b980:	0011      	movs	r1, r2
    b982:	0018      	movs	r0, r3
    b984:	4b05      	ldr	r3, [pc, #20]	; (b99c <setCallStateOnLCD+0x60>)
    b986:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
    b988:	46c0      	nop			; (mov r8, r8)
    b98a:	46bd      	mov	sp, r7
    b98c:	b002      	add	sp, #8
    b98e:	bd80      	pop	{r7, pc}
    b990:	20000785 	.word	0x20000785
    b994:	200007e8 	.word	0x200007e8
    b998:	000178b7 	.word	0x000178b7
    b99c:	00017b37 	.word	0x00017b37

0000b9a0 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
    b9a0:	b580      	push	{r7, lr}
    b9a2:	b084      	sub	sp, #16
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    b9a8:	4b0f      	ldr	r3, [pc, #60]	; (b9e8 <vTask_50ms_Timer+0x48>)
    b9aa:	4798      	blx	r3
    b9ac:	0003      	movs	r3, r0
    b9ae:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    b9b0:	230c      	movs	r3, #12
    b9b2:	18fb      	adds	r3, r7, r3
    b9b4:	2119      	movs	r1, #25
    b9b6:	0018      	movs	r0, r3
    b9b8:	4b0c      	ldr	r3, [pc, #48]	; (b9ec <vTask_50ms_Timer+0x4c>)
    b9ba:	4798      	blx	r3
		if(buttonEventOccured)
    b9bc:	4b0c      	ldr	r3, [pc, #48]	; (b9f0 <vTask_50ms_Timer+0x50>)
    b9be:	781b      	ldrb	r3, [r3, #0]
    b9c0:	b2db      	uxtb	r3, r3
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	d001      	beq.n	b9ca <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
    b9c6:	4b0b      	ldr	r3, [pc, #44]	; (b9f4 <vTask_50ms_Timer+0x54>)
    b9c8:	4798      	blx	r3
		}
		if(lastButtonEvent>0)
    b9ca:	4b0b      	ldr	r3, [pc, #44]	; (b9f8 <vTask_50ms_Timer+0x58>)
    b9cc:	781b      	ldrb	r3, [r3, #0]
    b9ce:	b2db      	uxtb	r3, r3
    b9d0:	2b00      	cmp	r3, #0
    b9d2:	d0ed      	beq.n	b9b0 <vTask_50ms_Timer+0x10>
		{
			taskPSet=true;
    b9d4:	4b09      	ldr	r3, [pc, #36]	; (b9fc <vTask_50ms_Timer+0x5c>)
    b9d6:	2201      	movs	r2, #1
    b9d8:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
    b9da:	4b09      	ldr	r3, [pc, #36]	; (ba00 <vTask_50ms_Timer+0x60>)
    b9dc:	681b      	ldr	r3, [r3, #0]
    b9de:	2102      	movs	r1, #2
    b9e0:	0018      	movs	r0, r3
    b9e2:	4b08      	ldr	r3, [pc, #32]	; (ba04 <vTask_50ms_Timer+0x64>)
    b9e4:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    b9e6:	e7e3      	b.n	b9b0 <vTask_50ms_Timer+0x10>
    b9e8:	0000ef5d 	.word	0x0000ef5d
    b9ec:	0000eb31 	.word	0x0000eb31
    b9f0:	20000763 	.word	0x20000763
    b9f4:	0000b711 	.word	0x0000b711
    b9f8:	2000074c 	.word	0x2000074c
    b9fc:	20000702 	.word	0x20000702
    ba00:	20000790 	.word	0x20000790
    ba04:	0000ec55 	.word	0x0000ec55

0000ba08 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    ba08:	b580      	push	{r7, lr}
    ba0a:	b082      	sub	sp, #8
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    ba10:	687b      	ldr	r3, [r7, #4]
    ba12:	2200      	movs	r2, #0
    ba14:	701a      	strb	r2, [r3, #0]
}
    ba16:	46c0      	nop			; (mov r8, r8)
    ba18:	46bd      	mov	sp, r7
    ba1a:	b002      	add	sp, #8
    ba1c:	bd80      	pop	{r7, pc}
	...

0000ba20 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    ba20:	b580      	push	{r7, lr}
    ba22:	b082      	sub	sp, #8
    ba24:	af00      	add	r7, sp, #0
    ba26:	0002      	movs	r2, r0
    ba28:	6039      	str	r1, [r7, #0]
    ba2a:	1dfb      	adds	r3, r7, #7
    ba2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ba2e:	1dfb      	adds	r3, r7, #7
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	2b01      	cmp	r3, #1
    ba34:	d00a      	beq.n	ba4c <system_apb_clock_set_mask+0x2c>
    ba36:	2b02      	cmp	r3, #2
    ba38:	d00f      	beq.n	ba5a <system_apb_clock_set_mask+0x3a>
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d114      	bne.n	ba68 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    ba3e:	4b0e      	ldr	r3, [pc, #56]	; (ba78 <system_apb_clock_set_mask+0x58>)
    ba40:	4a0d      	ldr	r2, [pc, #52]	; (ba78 <system_apb_clock_set_mask+0x58>)
    ba42:	6991      	ldr	r1, [r2, #24]
    ba44:	683a      	ldr	r2, [r7, #0]
    ba46:	430a      	orrs	r2, r1
    ba48:	619a      	str	r2, [r3, #24]
			break;
    ba4a:	e00f      	b.n	ba6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    ba4c:	4b0a      	ldr	r3, [pc, #40]	; (ba78 <system_apb_clock_set_mask+0x58>)
    ba4e:	4a0a      	ldr	r2, [pc, #40]	; (ba78 <system_apb_clock_set_mask+0x58>)
    ba50:	69d1      	ldr	r1, [r2, #28]
    ba52:	683a      	ldr	r2, [r7, #0]
    ba54:	430a      	orrs	r2, r1
    ba56:	61da      	str	r2, [r3, #28]
			break;
    ba58:	e008      	b.n	ba6c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    ba5a:	4b07      	ldr	r3, [pc, #28]	; (ba78 <system_apb_clock_set_mask+0x58>)
    ba5c:	4a06      	ldr	r2, [pc, #24]	; (ba78 <system_apb_clock_set_mask+0x58>)
    ba5e:	6a11      	ldr	r1, [r2, #32]
    ba60:	683a      	ldr	r2, [r7, #0]
    ba62:	430a      	orrs	r2, r1
    ba64:	621a      	str	r2, [r3, #32]
			break;
    ba66:	e001      	b.n	ba6c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    ba68:	2317      	movs	r3, #23
    ba6a:	e000      	b.n	ba6e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    ba6c:	2300      	movs	r3, #0
}
    ba6e:	0018      	movs	r0, r3
    ba70:	46bd      	mov	sp, r7
    ba72:	b002      	add	sp, #8
    ba74:	bd80      	pop	{r7, pc}
    ba76:	46c0      	nop			; (mov r8, r8)
    ba78:	40000400 	.word	0x40000400

0000ba7c <ac_is_syncing>:
{
    ba7c:	b580      	push	{r7, lr}
    ba7e:	b084      	sub	sp, #16
    ba80:	af00      	add	r7, sp, #0
    ba82:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
    ba84:	687b      	ldr	r3, [r7, #4]
    ba86:	681b      	ldr	r3, [r3, #0]
    ba88:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    ba8a:	68fb      	ldr	r3, [r7, #12]
    ba8c:	7a5b      	ldrb	r3, [r3, #9]
    ba8e:	b2db      	uxtb	r3, r3
    ba90:	b25b      	sxtb	r3, r3
    ba92:	2b00      	cmp	r3, #0
    ba94:	da01      	bge.n	ba9a <ac_is_syncing+0x1e>
		return true;
    ba96:	2301      	movs	r3, #1
    ba98:	e000      	b.n	ba9c <ac_is_syncing+0x20>
	return false;
    ba9a:	2300      	movs	r3, #0
}
    ba9c:	0018      	movs	r0, r3
    ba9e:	46bd      	mov	sp, r7
    baa0:	b004      	add	sp, #16
    baa2:	bd80      	pop	{r7, pc}

0000baa4 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
    baa4:	b580      	push	{r7, lr}
    baa6:	b086      	sub	sp, #24
    baa8:	af00      	add	r7, sp, #0
    baaa:	6078      	str	r0, [r7, #4]
    baac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    baae:	687b      	ldr	r3, [r7, #4]
    bab0:	681b      	ldr	r3, [r3, #0]
    bab2:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
    bab4:	2300      	movs	r3, #0
    bab6:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bab8:	2300      	movs	r3, #0
    baba:	613b      	str	r3, [r7, #16]
    babc:	e00f      	b.n	bade <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
    babe:	683a      	ldr	r2, [r7, #0]
    bac0:	693b      	ldr	r3, [r7, #16]
    bac2:	18d3      	adds	r3, r2, r3
    bac4:	781b      	ldrb	r3, [r3, #0]
    bac6:	2b00      	cmp	r3, #0
    bac8:	d006      	beq.n	bad8 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
    baca:	2204      	movs	r2, #4
    bacc:	693b      	ldr	r3, [r7, #16]
    bace:	409a      	lsls	r2, r3
    bad0:	0013      	movs	r3, r2
    bad2:	697a      	ldr	r2, [r7, #20]
    bad4:	4313      	orrs	r3, r2
    bad6:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bad8:	693b      	ldr	r3, [r7, #16]
    bada:	3301      	adds	r3, #1
    badc:	613b      	str	r3, [r7, #16]
    bade:	693b      	ldr	r3, [r7, #16]
    bae0:	2b00      	cmp	r3, #0
    bae2:	d0ec      	beq.n	babe <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
    bae4:	46c0      	nop			; (mov r8, r8)
    bae6:	687b      	ldr	r3, [r7, #4]
    bae8:	0018      	movs	r0, r3
    baea:	4b06      	ldr	r3, [pc, #24]	; (bb04 <_ac_set_config+0x60>)
    baec:	4798      	blx	r3
    baee:	1e03      	subs	r3, r0, #0
    baf0:	d1f9      	bne.n	bae6 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
    baf2:	697b      	ldr	r3, [r7, #20]
    baf4:	b2da      	uxtb	r2, r3
    baf6:	68fb      	ldr	r3, [r7, #12]
    baf8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bafa:	2300      	movs	r3, #0
}
    bafc:	0018      	movs	r0, r3
    bafe:	46bd      	mov	sp, r7
    bb00:	b006      	add	sp, #24
    bb02:	bd80      	pop	{r7, pc}
    bb04:	0000ba7d 	.word	0x0000ba7d

0000bb08 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
    bb08:	b580      	push	{r7, lr}
    bb0a:	b086      	sub	sp, #24
    bb0c:	af00      	add	r7, sp, #0
    bb0e:	60f8      	str	r0, [r7, #12]
    bb10:	60b9      	str	r1, [r7, #8]
    bb12:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
    bb14:	68fb      	ldr	r3, [r7, #12]
    bb16:	68ba      	ldr	r2, [r7, #8]
    bb18:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    bb1a:	2314      	movs	r3, #20
    bb1c:	18fb      	adds	r3, r7, r3
    bb1e:	0018      	movs	r0, r3
    bb20:	4b2a      	ldr	r3, [pc, #168]	; (bbcc <ac_init+0xc4>)
    bb22:	4798      	blx	r3

	if (hw == AC) {
    bb24:	68bb      	ldr	r3, [r7, #8]
    bb26:	4a2a      	ldr	r2, [pc, #168]	; (bbd0 <ac_init+0xc8>)
    bb28:	4293      	cmp	r3, r2
    bb2a:	d121      	bne.n	bb70 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
    bb2c:	2380      	movs	r3, #128	; 0x80
    bb2e:	029b      	lsls	r3, r3, #10
    bb30:	0019      	movs	r1, r3
    bb32:	2002      	movs	r0, #2
    bb34:	4b27      	ldr	r3, [pc, #156]	; (bbd4 <ac_init+0xcc>)
    bb36:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	785a      	ldrb	r2, [r3, #1]
    bb3c:	2314      	movs	r3, #20
    bb3e:	18fb      	adds	r3, r7, r3
    bb40:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    bb42:	2314      	movs	r3, #20
    bb44:	18fb      	adds	r3, r7, r3
    bb46:	0019      	movs	r1, r3
    bb48:	201f      	movs	r0, #31
    bb4a:	4b23      	ldr	r3, [pc, #140]	; (bbd8 <ac_init+0xd0>)
    bb4c:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
    bb4e:	201f      	movs	r0, #31
    bb50:	4b22      	ldr	r3, [pc, #136]	; (bbdc <ac_init+0xd4>)
    bb52:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
    bb54:	687b      	ldr	r3, [r7, #4]
    bb56:	789a      	ldrb	r2, [r3, #2]
    bb58:	2314      	movs	r3, #20
    bb5a:	18fb      	adds	r3, r7, r3
    bb5c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
    bb5e:	2314      	movs	r3, #20
    bb60:	18fb      	adds	r3, r7, r3
    bb62:	0019      	movs	r1, r3
    bb64:	2020      	movs	r0, #32
    bb66:	4b1c      	ldr	r3, [pc, #112]	; (bbd8 <ac_init+0xd0>)
    bb68:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
    bb6a:	2020      	movs	r0, #32
    bb6c:	4b1b      	ldr	r3, [pc, #108]	; (bbdc <ac_init+0xd4>)
    bb6e:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    bb70:	2317      	movs	r3, #23
    bb72:	18fb      	adds	r3, r7, r3
    bb74:	2200      	movs	r2, #0
    bb76:	701a      	strb	r2, [r3, #0]
    bb78:	e00f      	b.n	bb9a <ac_init+0x92>
		module_inst->callback[i]        = NULL;
    bb7a:	2317      	movs	r3, #23
    bb7c:	18fb      	adds	r3, r7, r3
    bb7e:	781b      	ldrb	r3, [r3, #0]
    bb80:	68fa      	ldr	r2, [r7, #12]
    bb82:	009b      	lsls	r3, r3, #2
    bb84:	18d3      	adds	r3, r2, r3
    bb86:	3304      	adds	r3, #4
    bb88:	2200      	movs	r2, #0
    bb8a:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    bb8c:	2317      	movs	r3, #23
    bb8e:	18fb      	adds	r3, r7, r3
    bb90:	781a      	ldrb	r2, [r3, #0]
    bb92:	2317      	movs	r3, #23
    bb94:	18fb      	adds	r3, r7, r3
    bb96:	3201      	adds	r2, #1
    bb98:	701a      	strb	r2, [r3, #0]
    bb9a:	2317      	movs	r3, #23
    bb9c:	18fb      	adds	r3, r7, r3
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	2b04      	cmp	r3, #4
    bba2:	d9ea      	bls.n	bb7a <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
    bba4:	68fb      	ldr	r3, [r7, #12]
    bba6:	2200      	movs	r2, #0
    bba8:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
    bbaa:	68fb      	ldr	r3, [r7, #12]
    bbac:	2200      	movs	r2, #0
    bbae:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
    bbb0:	4b0b      	ldr	r3, [pc, #44]	; (bbe0 <ac_init+0xd8>)
    bbb2:	68fa      	ldr	r2, [r7, #12]
    bbb4:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
    bbb6:	687a      	ldr	r2, [r7, #4]
    bbb8:	68fb      	ldr	r3, [r7, #12]
    bbba:	0011      	movs	r1, r2
    bbbc:	0018      	movs	r0, r3
    bbbe:	4b09      	ldr	r3, [pc, #36]	; (bbe4 <ac_init+0xdc>)
    bbc0:	4798      	blx	r3
    bbc2:	0003      	movs	r3, r0
}
    bbc4:	0018      	movs	r0, r3
    bbc6:	46bd      	mov	sp, r7
    bbc8:	b006      	add	sp, #24
    bbca:	bd80      	pop	{r7, pc}
    bbcc:	0000ba09 	.word	0x0000ba09
    bbd0:	42004400 	.word	0x42004400
    bbd4:	0000ba21 	.word	0x0000ba21
    bbd8:	0001350d 	.word	0x0001350d
    bbdc:	00013551 	.word	0x00013551
    bbe0:	20000924 	.word	0x20000924
    bbe4:	0000baa5 	.word	0x0000baa5

0000bbe8 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
    bbe8:	b580      	push	{r7, lr}
    bbea:	b086      	sub	sp, #24
    bbec:	af00      	add	r7, sp, #0
    bbee:	60f8      	str	r0, [r7, #12]
    bbf0:	607a      	str	r2, [r7, #4]
    bbf2:	230b      	movs	r3, #11
    bbf4:	18fb      	adds	r3, r7, r3
    bbf6:	1c0a      	adds	r2, r1, #0
    bbf8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    bbfa:	68fb      	ldr	r3, [r7, #12]
    bbfc:	681b      	ldr	r3, [r3, #0]
    bbfe:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
    bc00:	2300      	movs	r3, #0
    bc02:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
    bc04:	687b      	ldr	r3, [r7, #4]
    bc06:	685b      	ldr	r3, [r3, #4]
    bc08:	697a      	ldr	r2, [r7, #20]
    bc0a:	4313      	orrs	r3, r2
    bc0c:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
    bc0e:	687b      	ldr	r3, [r7, #4]
    bc10:	7a1b      	ldrb	r3, [r3, #8]
    bc12:	2b00      	cmp	r3, #0
    bc14:	d004      	beq.n	bc20 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
    bc16:	697b      	ldr	r3, [r7, #20]
    bc18:	2280      	movs	r2, #128	; 0x80
    bc1a:	0312      	lsls	r2, r2, #12
    bc1c:	4313      	orrs	r3, r2
    bc1e:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
    bc20:	687b      	ldr	r3, [r7, #4]
    bc22:	68db      	ldr	r3, [r3, #12]
    bc24:	697a      	ldr	r2, [r7, #20]
    bc26:	4313      	orrs	r3, r2
    bc28:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
    bc2a:	687b      	ldr	r3, [r7, #4]
    bc2c:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
    bc2e:	687b      	ldr	r3, [r7, #4]
    bc30:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
    bc32:	4313      	orrs	r3, r2
    bc34:	b29b      	uxth	r3, r3
    bc36:	001a      	movs	r2, r3
	compctrl_temp |=
    bc38:	697b      	ldr	r3, [r7, #20]
    bc3a:	4313      	orrs	r3, r2
    bc3c:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
    bc3e:	687b      	ldr	r3, [r7, #4]
    bc40:	781b      	ldrb	r3, [r3, #0]
    bc42:	001a      	movs	r2, r3
    bc44:	697b      	ldr	r3, [r7, #20]
    bc46:	4313      	orrs	r3, r2
    bc48:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
    bc4a:	687b      	ldr	r3, [r7, #4]
    bc4c:	7d5b      	ldrb	r3, [r3, #21]
    bc4e:	001a      	movs	r2, r3
    bc50:	697b      	ldr	r3, [r7, #20]
    bc52:	4313      	orrs	r3, r2
    bc54:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
    bc56:	46c0      	nop			; (mov r8, r8)
    bc58:	68fb      	ldr	r3, [r7, #12]
    bc5a:	0018      	movs	r0, r3
    bc5c:	4b0e      	ldr	r3, [pc, #56]	; (bc98 <ac_chan_set_config+0xb0>)
    bc5e:	4798      	blx	r3
    bc60:	1e03      	subs	r3, r0, #0
    bc62:	d1f9      	bne.n	bc58 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
    bc64:	230b      	movs	r3, #11
    bc66:	18fb      	adds	r3, r7, r3
    bc68:	781a      	ldrb	r2, [r3, #0]
    bc6a:	693b      	ldr	r3, [r7, #16]
    bc6c:	3204      	adds	r2, #4
    bc6e:	0092      	lsls	r2, r2, #2
    bc70:	6979      	ldr	r1, [r7, #20]
    bc72:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
    bc74:	230b      	movs	r3, #11
    bc76:	18fb      	adds	r3, r7, r3
    bc78:	781b      	ldrb	r3, [r3, #0]
    bc7a:	687a      	ldr	r2, [r7, #4]
    bc7c:	7d12      	ldrb	r2, [r2, #20]
    bc7e:	3a01      	subs	r2, #1
    bc80:	b2d0      	uxtb	r0, r2
    bc82:	693a      	ldr	r2, [r7, #16]
    bc84:	2120      	movs	r1, #32
    bc86:	18d3      	adds	r3, r2, r3
    bc88:	185b      	adds	r3, r3, r1
    bc8a:	1c02      	adds	r2, r0, #0
    bc8c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bc8e:	2300      	movs	r3, #0
}
    bc90:	0018      	movs	r0, r3
    bc92:	46bd      	mov	sp, r7
    bc94:	b006      	add	sp, #24
    bc96:	bd80      	pop	{r7, pc}
    bc98:	0000ba7d 	.word	0x0000ba7d

0000bc9c <system_gclk_chan_get_config_defaults>:
{
    bc9c:	b580      	push	{r7, lr}
    bc9e:	b082      	sub	sp, #8
    bca0:	af00      	add	r7, sp, #0
    bca2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    bca4:	687b      	ldr	r3, [r7, #4]
    bca6:	2200      	movs	r2, #0
    bca8:	701a      	strb	r2, [r3, #0]
}
    bcaa:	46c0      	nop			; (mov r8, r8)
    bcac:	46bd      	mov	sp, r7
    bcae:	b002      	add	sp, #8
    bcb0:	bd80      	pop	{r7, pc}
	...

0000bcb4 <system_apb_clock_set_mask>:
{
    bcb4:	b580      	push	{r7, lr}
    bcb6:	b082      	sub	sp, #8
    bcb8:	af00      	add	r7, sp, #0
    bcba:	0002      	movs	r2, r0
    bcbc:	6039      	str	r1, [r7, #0]
    bcbe:	1dfb      	adds	r3, r7, #7
    bcc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bcc2:	1dfb      	adds	r3, r7, #7
    bcc4:	781b      	ldrb	r3, [r3, #0]
    bcc6:	2b01      	cmp	r3, #1
    bcc8:	d00a      	beq.n	bce0 <system_apb_clock_set_mask+0x2c>
    bcca:	2b02      	cmp	r3, #2
    bccc:	d00f      	beq.n	bcee <system_apb_clock_set_mask+0x3a>
    bcce:	2b00      	cmp	r3, #0
    bcd0:	d114      	bne.n	bcfc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    bcd2:	4b0e      	ldr	r3, [pc, #56]	; (bd0c <system_apb_clock_set_mask+0x58>)
    bcd4:	4a0d      	ldr	r2, [pc, #52]	; (bd0c <system_apb_clock_set_mask+0x58>)
    bcd6:	6991      	ldr	r1, [r2, #24]
    bcd8:	683a      	ldr	r2, [r7, #0]
    bcda:	430a      	orrs	r2, r1
    bcdc:	619a      	str	r2, [r3, #24]
			break;
    bcde:	e00f      	b.n	bd00 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    bce0:	4b0a      	ldr	r3, [pc, #40]	; (bd0c <system_apb_clock_set_mask+0x58>)
    bce2:	4a0a      	ldr	r2, [pc, #40]	; (bd0c <system_apb_clock_set_mask+0x58>)
    bce4:	69d1      	ldr	r1, [r2, #28]
    bce6:	683a      	ldr	r2, [r7, #0]
    bce8:	430a      	orrs	r2, r1
    bcea:	61da      	str	r2, [r3, #28]
			break;
    bcec:	e008      	b.n	bd00 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    bcee:	4b07      	ldr	r3, [pc, #28]	; (bd0c <system_apb_clock_set_mask+0x58>)
    bcf0:	4a06      	ldr	r2, [pc, #24]	; (bd0c <system_apb_clock_set_mask+0x58>)
    bcf2:	6a11      	ldr	r1, [r2, #32]
    bcf4:	683a      	ldr	r2, [r7, #0]
    bcf6:	430a      	orrs	r2, r1
    bcf8:	621a      	str	r2, [r3, #32]
			break;
    bcfa:	e001      	b.n	bd00 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    bcfc:	2317      	movs	r3, #23
    bcfe:	e000      	b.n	bd02 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    bd00:	2300      	movs	r3, #0
}
    bd02:	0018      	movs	r0, r3
    bd04:	46bd      	mov	sp, r7
    bd06:	b002      	add	sp, #8
    bd08:	bd80      	pop	{r7, pc}
    bd0a:	46c0      	nop			; (mov r8, r8)
    bd0c:	40000400 	.word	0x40000400

0000bd10 <system_pinmux_get_config_defaults>:
{
    bd10:	b580      	push	{r7, lr}
    bd12:	b082      	sub	sp, #8
    bd14:	af00      	add	r7, sp, #0
    bd16:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    bd18:	687b      	ldr	r3, [r7, #4]
    bd1a:	2280      	movs	r2, #128	; 0x80
    bd1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    bd1e:	687b      	ldr	r3, [r7, #4]
    bd20:	2200      	movs	r2, #0
    bd22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    bd24:	687b      	ldr	r3, [r7, #4]
    bd26:	2201      	movs	r2, #1
    bd28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    bd2a:	687b      	ldr	r3, [r7, #4]
    bd2c:	2200      	movs	r2, #0
    bd2e:	70da      	strb	r2, [r3, #3]
}
    bd30:	46c0      	nop			; (mov r8, r8)
    bd32:	46bd      	mov	sp, r7
    bd34:	b002      	add	sp, #8
    bd36:	bd80      	pop	{r7, pc}

0000bd38 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    bd38:	b580      	push	{r7, lr}
    bd3a:	b082      	sub	sp, #8
    bd3c:	af00      	add	r7, sp, #0
    bd3e:	0002      	movs	r2, r0
    bd40:	1dfb      	adds	r3, r7, #7
    bd42:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    bd44:	1dfb      	adds	r3, r7, #7
    bd46:	781b      	ldrb	r3, [r3, #0]
    bd48:	2b00      	cmp	r3, #0
    bd4a:	d002      	beq.n	bd52 <system_voltage_reference_enable+0x1a>
    bd4c:	2b01      	cmp	r3, #1
    bd4e:	d007      	beq.n	bd60 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    bd50:	e00d      	b.n	bd6e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    bd52:	4b08      	ldr	r3, [pc, #32]	; (bd74 <system_voltage_reference_enable+0x3c>)
    bd54:	4a07      	ldr	r2, [pc, #28]	; (bd74 <system_voltage_reference_enable+0x3c>)
    bd56:	6c12      	ldr	r2, [r2, #64]	; 0x40
    bd58:	2102      	movs	r1, #2
    bd5a:	430a      	orrs	r2, r1
    bd5c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    bd5e:	e006      	b.n	bd6e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    bd60:	4b04      	ldr	r3, [pc, #16]	; (bd74 <system_voltage_reference_enable+0x3c>)
    bd62:	4a04      	ldr	r2, [pc, #16]	; (bd74 <system_voltage_reference_enable+0x3c>)
    bd64:	6c12      	ldr	r2, [r2, #64]	; 0x40
    bd66:	2104      	movs	r1, #4
    bd68:	430a      	orrs	r2, r1
    bd6a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    bd6c:	46c0      	nop			; (mov r8, r8)
	}
}
    bd6e:	46bd      	mov	sp, r7
    bd70:	b002      	add	sp, #8
    bd72:	bd80      	pop	{r7, pc}
    bd74:	40000800 	.word	0x40000800

0000bd78 <adc_is_syncing>:
{
    bd78:	b580      	push	{r7, lr}
    bd7a:	b084      	sub	sp, #16
    bd7c:	af00      	add	r7, sp, #0
    bd7e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    bd80:	687b      	ldr	r3, [r7, #4]
    bd82:	681b      	ldr	r3, [r3, #0]
    bd84:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    bd86:	68fb      	ldr	r3, [r7, #12]
    bd88:	7e5b      	ldrb	r3, [r3, #25]
    bd8a:	b2db      	uxtb	r3, r3
    bd8c:	b25b      	sxtb	r3, r3
    bd8e:	2b00      	cmp	r3, #0
    bd90:	da01      	bge.n	bd96 <adc_is_syncing+0x1e>
		return true;
    bd92:	2301      	movs	r3, #1
    bd94:	e000      	b.n	bd98 <adc_is_syncing+0x20>
	return false;
    bd96:	2300      	movs	r3, #0
}
    bd98:	0018      	movs	r0, r3
    bd9a:	46bd      	mov	sp, r7
    bd9c:	b004      	add	sp, #16
    bd9e:	bd80      	pop	{r7, pc}

0000bda0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    bda0:	b580      	push	{r7, lr}
    bda2:	b082      	sub	sp, #8
    bda4:	af00      	add	r7, sp, #0
    bda6:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    bda8:	687b      	ldr	r3, [r7, #4]
    bdaa:	2200      	movs	r2, #0
    bdac:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    bdae:	687b      	ldr	r3, [r7, #4]
    bdb0:	2200      	movs	r2, #0
    bdb2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    bdb4:	687b      	ldr	r3, [r7, #4]
    bdb6:	2200      	movs	r2, #0
    bdb8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    bdba:	687b      	ldr	r3, [r7, #4]
    bdbc:	2200      	movs	r2, #0
    bdbe:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    bdc0:	687b      	ldr	r3, [r7, #4]
    bdc2:	2200      	movs	r2, #0
    bdc4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    bdc6:	687b      	ldr	r3, [r7, #4]
    bdc8:	2200      	movs	r2, #0
    bdca:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    bdcc:	687b      	ldr	r3, [r7, #4]
    bdce:	2200      	movs	r2, #0
    bdd0:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    bdd2:	687b      	ldr	r3, [r7, #4]
    bdd4:	2200      	movs	r2, #0
    bdd6:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	2200      	movs	r2, #0
    bddc:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    bdde:	687b      	ldr	r3, [r7, #4]
    bde0:	22c0      	movs	r2, #192	; 0xc0
    bde2:	0152      	lsls	r2, r2, #5
    bde4:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    bde6:	687b      	ldr	r3, [r7, #4]
    bde8:	2200      	movs	r2, #0
    bdea:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    bdec:	687b      	ldr	r3, [r7, #4]
    bdee:	2200      	movs	r2, #0
    bdf0:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    bdf2:	687b      	ldr	r3, [r7, #4]
    bdf4:	2200      	movs	r2, #0
    bdf6:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	2200      	movs	r2, #0
    bdfc:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    bdfe:	687b      	ldr	r3, [r7, #4]
    be00:	2200      	movs	r2, #0
    be02:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	222a      	movs	r2, #42	; 0x2a
    be08:	2100      	movs	r1, #0
    be0a:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    be0c:	687b      	ldr	r3, [r7, #4]
    be0e:	2200      	movs	r2, #0
    be10:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    be12:	687b      	ldr	r3, [r7, #4]
    be14:	2200      	movs	r2, #0
    be16:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    be18:	687b      	ldr	r3, [r7, #4]
    be1a:	2224      	movs	r2, #36	; 0x24
    be1c:	2100      	movs	r1, #0
    be1e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    be20:	687b      	ldr	r3, [r7, #4]
    be22:	2200      	movs	r2, #0
    be24:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    be26:	687b      	ldr	r3, [r7, #4]
    be28:	2200      	movs	r2, #0
    be2a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    be2c:	687b      	ldr	r3, [r7, #4]
    be2e:	2200      	movs	r2, #0
    be30:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    be32:	687b      	ldr	r3, [r7, #4]
    be34:	222b      	movs	r2, #43	; 0x2b
    be36:	2100      	movs	r1, #0
    be38:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    be3a:	687b      	ldr	r3, [r7, #4]
    be3c:	222c      	movs	r2, #44	; 0x2c
    be3e:	2100      	movs	r1, #0
    be40:	5499      	strb	r1, [r3, r2]
}
    be42:	46c0      	nop			; (mov r8, r8)
    be44:	46bd      	mov	sp, r7
    be46:	b002      	add	sp, #8
    be48:	bd80      	pop	{r7, pc}
	...

0000be4c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    be4c:	b580      	push	{r7, lr}
    be4e:	b098      	sub	sp, #96	; 0x60
    be50:	af00      	add	r7, sp, #0
    be52:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    be54:	230c      	movs	r3, #12
    be56:	18fa      	adds	r2, r7, r3
    be58:	4b15      	ldr	r3, [pc, #84]	; (beb0 <_adc_configure_ain_pin+0x64>)
    be5a:	0010      	movs	r0, r2
    be5c:	0019      	movs	r1, r3
    be5e:	2350      	movs	r3, #80	; 0x50
    be60:	001a      	movs	r2, r3
    be62:	4b14      	ldr	r3, [pc, #80]	; (beb4 <_adc_configure_ain_pin+0x68>)
    be64:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    be66:	4b14      	ldr	r3, [pc, #80]	; (beb8 <_adc_configure_ain_pin+0x6c>)
    be68:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    be6a:	687b      	ldr	r3, [r7, #4]
    be6c:	2b13      	cmp	r3, #19
    be6e:	d81a      	bhi.n	bea6 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    be70:	230c      	movs	r3, #12
    be72:	18fb      	adds	r3, r7, r3
    be74:	687a      	ldr	r2, [r7, #4]
    be76:	0092      	lsls	r2, r2, #2
    be78:	58d3      	ldr	r3, [r2, r3]
    be7a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    be7c:	2308      	movs	r3, #8
    be7e:	18fb      	adds	r3, r7, r3
    be80:	0018      	movs	r0, r3
    be82:	4b0e      	ldr	r3, [pc, #56]	; (bebc <_adc_configure_ain_pin+0x70>)
    be84:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    be86:	2308      	movs	r3, #8
    be88:	18fb      	adds	r3, r7, r3
    be8a:	2200      	movs	r2, #0
    be8c:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    be8e:	2308      	movs	r3, #8
    be90:	18fb      	adds	r3, r7, r3
    be92:	2201      	movs	r2, #1
    be94:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    be96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be98:	b2db      	uxtb	r3, r3
    be9a:	2208      	movs	r2, #8
    be9c:	18ba      	adds	r2, r7, r2
    be9e:	0011      	movs	r1, r2
    bea0:	0018      	movs	r0, r3
    bea2:	4b07      	ldr	r3, [pc, #28]	; (bec0 <_adc_configure_ain_pin+0x74>)
    bea4:	4798      	blx	r3
	}
}
    bea6:	46c0      	nop			; (mov r8, r8)
    bea8:	46bd      	mov	sp, r7
    beaa:	b018      	add	sp, #96	; 0x60
    beac:	bd80      	pop	{r7, pc}
    beae:	46c0      	nop			; (mov r8, r8)
    beb0:	000192f0 	.word	0x000192f0
    beb4:	00017881 	.word	0x00017881
    beb8:	0000ffff 	.word	0x0000ffff
    bebc:	0000bd11 	.word	0x0000bd11
    bec0:	000137f9 	.word	0x000137f9

0000bec4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bec6:	b089      	sub	sp, #36	; 0x24
    bec8:	af00      	add	r7, sp, #0
    beca:	6078      	str	r0, [r7, #4]
    becc:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    bece:	231f      	movs	r3, #31
    bed0:	18fb      	adds	r3, r7, r3
    bed2:	2200      	movs	r2, #0
    bed4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    bed6:	2310      	movs	r3, #16
    bed8:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    beda:	2317      	movs	r3, #23
    bedc:	18fb      	adds	r3, r7, r3
    bede:	2200      	movs	r2, #0
    bee0:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    bee2:	687b      	ldr	r3, [r7, #4]
    bee4:	681b      	ldr	r3, [r3, #0]
    bee6:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    bee8:	230c      	movs	r3, #12
    beea:	18fb      	adds	r3, r7, r3
    beec:	0018      	movs	r0, r3
    beee:	4bce      	ldr	r3, [pc, #824]	; (c228 <_adc_set_config+0x364>)
    bef0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    bef2:	683b      	ldr	r3, [r7, #0]
    bef4:	781a      	ldrb	r2, [r3, #0]
    bef6:	230c      	movs	r3, #12
    bef8:	18fb      	adds	r3, r7, r3
    befa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    befc:	230c      	movs	r3, #12
    befe:	18fb      	adds	r3, r7, r3
    bf00:	0019      	movs	r1, r3
    bf02:	201e      	movs	r0, #30
    bf04:	4bc9      	ldr	r3, [pc, #804]	; (c22c <_adc_set_config+0x368>)
    bf06:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    bf08:	201e      	movs	r0, #30
    bf0a:	4bc9      	ldr	r3, [pc, #804]	; (c230 <_adc_set_config+0x36c>)
    bf0c:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    bf0e:	683b      	ldr	r3, [r7, #0]
    bf10:	222c      	movs	r2, #44	; 0x2c
    bf12:	5c9b      	ldrb	r3, [r3, r2]
    bf14:	2b00      	cmp	r3, #0
    bf16:	d040      	beq.n	bf9a <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    bf18:	2316      	movs	r3, #22
    bf1a:	18fb      	adds	r3, r7, r3
    bf1c:	683a      	ldr	r2, [r7, #0]
    bf1e:	212b      	movs	r1, #43	; 0x2b
    bf20:	5c52      	ldrb	r2, [r2, r1]
    bf22:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    bf24:	683b      	ldr	r3, [r7, #0]
    bf26:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    bf28:	2315      	movs	r3, #21
    bf2a:	18fb      	adds	r3, r7, r3
    bf2c:	2216      	movs	r2, #22
    bf2e:	18ba      	adds	r2, r7, r2
    bf30:	7812      	ldrb	r2, [r2, #0]
    bf32:	188a      	adds	r2, r1, r2
    bf34:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    bf36:	683b      	ldr	r3, [r7, #0]
    bf38:	222c      	movs	r2, #44	; 0x2c
    bf3a:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    bf3c:	230f      	movs	r3, #15
    bf3e:	18fb      	adds	r3, r7, r3
    bf40:	2215      	movs	r2, #21
    bf42:	18ba      	adds	r2, r7, r2
    bf44:	7812      	ldrb	r2, [r2, #0]
    bf46:	188a      	adds	r2, r1, r2
    bf48:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    bf4a:	e018      	b.n	bf7e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    bf4c:	2316      	movs	r3, #22
    bf4e:	18fb      	adds	r3, r7, r3
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	220f      	movs	r2, #15
    bf54:	4013      	ands	r3, r2
    bf56:	683a      	ldr	r2, [r7, #0]
    bf58:	7b12      	ldrb	r2, [r2, #12]
    bf5a:	189b      	adds	r3, r3, r2
    bf5c:	0018      	movs	r0, r3
    bf5e:	4bb5      	ldr	r3, [pc, #724]	; (c234 <_adc_set_config+0x370>)
    bf60:	4798      	blx	r3
			start_pin++;
    bf62:	2315      	movs	r3, #21
    bf64:	18fb      	adds	r3, r7, r3
    bf66:	781a      	ldrb	r2, [r3, #0]
    bf68:	2315      	movs	r3, #21
    bf6a:	18fb      	adds	r3, r7, r3
    bf6c:	3201      	adds	r2, #1
    bf6e:	701a      	strb	r2, [r3, #0]
			offset++;
    bf70:	2316      	movs	r3, #22
    bf72:	18fb      	adds	r3, r7, r3
    bf74:	781a      	ldrb	r2, [r3, #0]
    bf76:	2316      	movs	r3, #22
    bf78:	18fb      	adds	r3, r7, r3
    bf7a:	3201      	adds	r2, #1
    bf7c:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    bf7e:	2315      	movs	r3, #21
    bf80:	18fa      	adds	r2, r7, r3
    bf82:	230f      	movs	r3, #15
    bf84:	18fb      	adds	r3, r7, r3
    bf86:	7812      	ldrb	r2, [r2, #0]
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	429a      	cmp	r2, r3
    bf8c:	d3de      	bcc.n	bf4c <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    bf8e:	683b      	ldr	r3, [r7, #0]
    bf90:	89db      	ldrh	r3, [r3, #14]
    bf92:	0018      	movs	r0, r3
    bf94:	4ba7      	ldr	r3, [pc, #668]	; (c234 <_adc_set_config+0x370>)
    bf96:	4798      	blx	r3
    bf98:	e009      	b.n	bfae <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    bf9a:	683b      	ldr	r3, [r7, #0]
    bf9c:	7b1b      	ldrb	r3, [r3, #12]
    bf9e:	0018      	movs	r0, r3
    bfa0:	4ba4      	ldr	r3, [pc, #656]	; (c234 <_adc_set_config+0x370>)
    bfa2:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    bfa4:	683b      	ldr	r3, [r7, #0]
    bfa6:	89db      	ldrh	r3, [r3, #14]
    bfa8:	0018      	movs	r0, r3
    bfaa:	4ba2      	ldr	r3, [pc, #648]	; (c234 <_adc_set_config+0x370>)
    bfac:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    bfae:	683b      	ldr	r3, [r7, #0]
    bfb0:	7d5b      	ldrb	r3, [r3, #21]
    bfb2:	009b      	lsls	r3, r3, #2
    bfb4:	b2da      	uxtb	r2, r3
    bfb6:	693b      	ldr	r3, [r7, #16]
    bfb8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    bfba:	683b      	ldr	r3, [r7, #0]
    bfbc:	7d9b      	ldrb	r3, [r3, #22]
    bfbe:	01db      	lsls	r3, r3, #7
    bfc0:	b25a      	sxtb	r2, r3
			(config->reference);
    bfc2:	683b      	ldr	r3, [r7, #0]
    bfc4:	785b      	ldrb	r3, [r3, #1]
    bfc6:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    bfc8:	4313      	orrs	r3, r2
    bfca:	b25b      	sxtb	r3, r3
    bfcc:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    bfce:	693b      	ldr	r3, [r7, #16]
    bfd0:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    bfd2:	683b      	ldr	r3, [r7, #0]
    bfd4:	791b      	ldrb	r3, [r3, #4]
    bfd6:	2b34      	cmp	r3, #52	; 0x34
    bfd8:	d846      	bhi.n	c068 <_adc_set_config+0x1a4>
    bfda:	009a      	lsls	r2, r3, #2
    bfdc:	4b96      	ldr	r3, [pc, #600]	; (c238 <_adc_set_config+0x374>)
    bfde:	18d3      	adds	r3, r2, r3
    bfe0:	681b      	ldr	r3, [r3, #0]
    bfe2:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    bfe4:	231f      	movs	r3, #31
    bfe6:	18fb      	adds	r3, r7, r3
    bfe8:	683a      	ldr	r2, [r7, #0]
    bfea:	7c52      	ldrb	r2, [r2, #17]
    bfec:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    bfee:	2317      	movs	r3, #23
    bff0:	18fb      	adds	r3, r7, r3
    bff2:	683a      	ldr	r2, [r7, #0]
    bff4:	7c12      	ldrb	r2, [r2, #16]
    bff6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    bff8:	2310      	movs	r3, #16
    bffa:	61bb      	str	r3, [r7, #24]
		break;
    bffc:	e036      	b.n	c06c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    bffe:	231f      	movs	r3, #31
    c000:	18fb      	adds	r3, r7, r3
    c002:	2201      	movs	r2, #1
    c004:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    c006:	2317      	movs	r3, #23
    c008:	18fb      	adds	r3, r7, r3
    c00a:	2202      	movs	r2, #2
    c00c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c00e:	2310      	movs	r3, #16
    c010:	61bb      	str	r3, [r7, #24]
		break;
    c012:	e02b      	b.n	c06c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    c014:	231f      	movs	r3, #31
    c016:	18fb      	adds	r3, r7, r3
    c018:	2202      	movs	r2, #2
    c01a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    c01c:	2317      	movs	r3, #23
    c01e:	18fb      	adds	r3, r7, r3
    c020:	2204      	movs	r2, #4
    c022:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c024:	2310      	movs	r3, #16
    c026:	61bb      	str	r3, [r7, #24]
		break;
    c028:	e020      	b.n	c06c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c02a:	231f      	movs	r3, #31
    c02c:	18fb      	adds	r3, r7, r3
    c02e:	2201      	movs	r2, #1
    c030:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    c032:	2317      	movs	r3, #23
    c034:	18fb      	adds	r3, r7, r3
    c036:	2206      	movs	r2, #6
    c038:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c03a:	2310      	movs	r3, #16
    c03c:	61bb      	str	r3, [r7, #24]
		break;
    c03e:	e015      	b.n	c06c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    c040:	231f      	movs	r3, #31
    c042:	18fb      	adds	r3, r7, r3
    c044:	2200      	movs	r2, #0
    c046:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    c048:	2317      	movs	r3, #23
    c04a:	18fb      	adds	r3, r7, r3
    c04c:	2208      	movs	r2, #8
    c04e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c050:	2310      	movs	r3, #16
    c052:	61bb      	str	r3, [r7, #24]
		break;
    c054:	e00a      	b.n	c06c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    c056:	2330      	movs	r3, #48	; 0x30
    c058:	61bb      	str	r3, [r7, #24]
		break;
    c05a:	e007      	b.n	c06c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    c05c:	2320      	movs	r3, #32
    c05e:	61bb      	str	r3, [r7, #24]
		break;
    c060:	e004      	b.n	c06c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    c062:	2300      	movs	r3, #0
    c064:	61bb      	str	r3, [r7, #24]
		break;
    c066:	e001      	b.n	c06c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    c068:	2317      	movs	r3, #23
    c06a:	e1ae      	b.n	c3ca <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    c06c:	231f      	movs	r3, #31
    c06e:	18fb      	adds	r3, r7, r3
    c070:	781b      	ldrb	r3, [r3, #0]
    c072:	011b      	lsls	r3, r3, #4
    c074:	b2db      	uxtb	r3, r3
    c076:	2270      	movs	r2, #112	; 0x70
    c078:	4013      	ands	r3, r2
    c07a:	b2da      	uxtb	r2, r3
    c07c:	2317      	movs	r3, #23
    c07e:	18fb      	adds	r3, r7, r3
    c080:	781b      	ldrb	r3, [r3, #0]
    c082:	4313      	orrs	r3, r2
    c084:	b2da      	uxtb	r2, r3
    c086:	693b      	ldr	r3, [r7, #16]
    c088:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    c08a:	683b      	ldr	r3, [r7, #0]
    c08c:	7ddb      	ldrb	r3, [r3, #23]
    c08e:	2b3f      	cmp	r3, #63	; 0x3f
    c090:	d901      	bls.n	c096 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    c092:	2317      	movs	r3, #23
    c094:	e199      	b.n	c3ca <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    c096:	683b      	ldr	r3, [r7, #0]
    c098:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    c09a:	693b      	ldr	r3, [r7, #16]
    c09c:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    c09e:	46c0      	nop			; (mov r8, r8)
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	0018      	movs	r0, r3
    c0a4:	4b65      	ldr	r3, [pc, #404]	; (c23c <_adc_set_config+0x378>)
    c0a6:	4798      	blx	r3
    c0a8:	1e03      	subs	r3, r0, #0
    c0aa:	d1f9      	bne.n	c0a0 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    c0ac:	683b      	ldr	r3, [r7, #0]
    c0ae:	885a      	ldrh	r2, [r3, #2]
    c0b0:	69bb      	ldr	r3, [r7, #24]
    c0b2:	b29b      	uxth	r3, r3
    c0b4:	4313      	orrs	r3, r2
    c0b6:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c0b8:	683b      	ldr	r3, [r7, #0]
    c0ba:	2124      	movs	r1, #36	; 0x24
    c0bc:	5c5b      	ldrb	r3, [r3, r1]
    c0be:	b29b      	uxth	r3, r3
    c0c0:	00db      	lsls	r3, r3, #3
    c0c2:	b29b      	uxth	r3, r3
			resolution |
    c0c4:	4313      	orrs	r3, r2
    c0c6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c0c8:	683b      	ldr	r3, [r7, #0]
    c0ca:	7d1b      	ldrb	r3, [r3, #20]
    c0cc:	b29b      	uxth	r3, r3
    c0ce:	009b      	lsls	r3, r3, #2
    c0d0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c0d2:	4313      	orrs	r3, r2
    c0d4:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c0d6:	683b      	ldr	r3, [r7, #0]
    c0d8:	7c9b      	ldrb	r3, [r3, #18]
    c0da:	b29b      	uxth	r3, r3
    c0dc:	18db      	adds	r3, r3, r3
    c0de:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c0e0:	4313      	orrs	r3, r2
    c0e2:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    c0e4:	683b      	ldr	r3, [r7, #0]
    c0e6:	7cdb      	ldrb	r3, [r3, #19]
    c0e8:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c0ea:	4313      	orrs	r3, r2
    c0ec:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    c0ee:	693b      	ldr	r3, [r7, #16]
    c0f0:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    c0f2:	683b      	ldr	r3, [r7, #0]
    c0f4:	7e1b      	ldrb	r3, [r3, #24]
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	d100      	bne.n	c0fc <_adc_set_config+0x238>
    c0fa:	e0c4      	b.n	c286 <_adc_set_config+0x3c2>
		switch (resolution) {
    c0fc:	69bb      	ldr	r3, [r7, #24]
    c0fe:	2b10      	cmp	r3, #16
    c100:	d100      	bne.n	c104 <_adc_set_config+0x240>
    c102:	e076      	b.n	c1f2 <_adc_set_config+0x32e>
    c104:	d802      	bhi.n	c10c <_adc_set_config+0x248>
    c106:	2b00      	cmp	r3, #0
    c108:	d04d      	beq.n	c1a6 <_adc_set_config+0x2e2>
    c10a:	e0bc      	b.n	c286 <_adc_set_config+0x3c2>
    c10c:	2b20      	cmp	r3, #32
    c10e:	d023      	beq.n	c158 <_adc_set_config+0x294>
    c110:	2b30      	cmp	r3, #48	; 0x30
    c112:	d000      	beq.n	c116 <_adc_set_config+0x252>
    c114:	e0b7      	b.n	c286 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    c116:	683b      	ldr	r3, [r7, #0]
    c118:	7cdb      	ldrb	r3, [r3, #19]
    c11a:	2b00      	cmp	r3, #0
    c11c:	d011      	beq.n	c142 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    c11e:	683b      	ldr	r3, [r7, #0]
    c120:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c122:	2b7f      	cmp	r3, #127	; 0x7f
    c124:	dc0b      	bgt.n	c13e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    c126:	683b      	ldr	r3, [r7, #0]
    c128:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    c12a:	3380      	adds	r3, #128	; 0x80
    c12c:	db07      	blt.n	c13e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    c12e:	683b      	ldr	r3, [r7, #0]
    c130:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    c132:	2b7f      	cmp	r3, #127	; 0x7f
    c134:	dc03      	bgt.n	c13e <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    c136:	683b      	ldr	r3, [r7, #0]
    c138:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    c13a:	3380      	adds	r3, #128	; 0x80
    c13c:	da01      	bge.n	c142 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c13e:	2317      	movs	r3, #23
    c140:	e143      	b.n	c3ca <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    c142:	683b      	ldr	r3, [r7, #0]
    c144:	69db      	ldr	r3, [r3, #28]
    c146:	2bff      	cmp	r3, #255	; 0xff
    c148:	dc04      	bgt.n	c154 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    c14a:	683b      	ldr	r3, [r7, #0]
    c14c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    c14e:	2bff      	cmp	r3, #255	; 0xff
    c150:	dc00      	bgt.n	c154 <_adc_set_config+0x290>
    c152:	e091      	b.n	c278 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c154:	2317      	movs	r3, #23
    c156:	e138      	b.n	c3ca <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    c158:	683b      	ldr	r3, [r7, #0]
    c15a:	7cdb      	ldrb	r3, [r3, #19]
    c15c:	2b00      	cmp	r3, #0
    c15e:	d015      	beq.n	c18c <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    c160:	683b      	ldr	r3, [r7, #0]
    c162:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c164:	4a36      	ldr	r2, [pc, #216]	; (c240 <_adc_set_config+0x37c>)
    c166:	4293      	cmp	r3, r2
    c168:	dc0e      	bgt.n	c188 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    c16a:	683b      	ldr	r3, [r7, #0]
    c16c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    c16e:	4a35      	ldr	r2, [pc, #212]	; (c244 <_adc_set_config+0x380>)
    c170:	4293      	cmp	r3, r2
    c172:	db09      	blt.n	c188 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    c174:	683b      	ldr	r3, [r7, #0]
    c176:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    c178:	4a31      	ldr	r2, [pc, #196]	; (c240 <_adc_set_config+0x37c>)
    c17a:	4293      	cmp	r3, r2
    c17c:	dc04      	bgt.n	c188 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    c17e:	683b      	ldr	r3, [r7, #0]
    c180:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    c182:	4a30      	ldr	r2, [pc, #192]	; (c244 <_adc_set_config+0x380>)
    c184:	4293      	cmp	r3, r2
    c186:	da01      	bge.n	c18c <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c188:	2317      	movs	r3, #23
    c18a:	e11e      	b.n	c3ca <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    c18c:	683b      	ldr	r3, [r7, #0]
    c18e:	69db      	ldr	r3, [r3, #28]
    c190:	4a2d      	ldr	r2, [pc, #180]	; (c248 <_adc_set_config+0x384>)
    c192:	4293      	cmp	r3, r2
    c194:	dc05      	bgt.n	c1a2 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    c196:	683b      	ldr	r3, [r7, #0]
    c198:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    c19a:	4a2b      	ldr	r2, [pc, #172]	; (c248 <_adc_set_config+0x384>)
    c19c:	4293      	cmp	r3, r2
    c19e:	dc00      	bgt.n	c1a2 <_adc_set_config+0x2de>
    c1a0:	e06c      	b.n	c27c <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c1a2:	2317      	movs	r3, #23
    c1a4:	e111      	b.n	c3ca <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    c1a6:	683b      	ldr	r3, [r7, #0]
    c1a8:	7cdb      	ldrb	r3, [r3, #19]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d015      	beq.n	c1da <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    c1ae:	683b      	ldr	r3, [r7, #0]
    c1b0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c1b2:	4a26      	ldr	r2, [pc, #152]	; (c24c <_adc_set_config+0x388>)
    c1b4:	4293      	cmp	r3, r2
    c1b6:	dc0e      	bgt.n	c1d6 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    c1b8:	683b      	ldr	r3, [r7, #0]
    c1ba:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    c1bc:	4a24      	ldr	r2, [pc, #144]	; (c250 <_adc_set_config+0x38c>)
    c1be:	4293      	cmp	r3, r2
    c1c0:	db09      	blt.n	c1d6 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    c1c2:	683b      	ldr	r3, [r7, #0]
    c1c4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    c1c6:	4a21      	ldr	r2, [pc, #132]	; (c24c <_adc_set_config+0x388>)
    c1c8:	4293      	cmp	r3, r2
    c1ca:	dc04      	bgt.n	c1d6 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    c1cc:	683b      	ldr	r3, [r7, #0]
    c1ce:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    c1d0:	4a1f      	ldr	r2, [pc, #124]	; (c250 <_adc_set_config+0x38c>)
    c1d2:	4293      	cmp	r3, r2
    c1d4:	da01      	bge.n	c1da <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c1d6:	2317      	movs	r3, #23
    c1d8:	e0f7      	b.n	c3ca <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    c1da:	683b      	ldr	r3, [r7, #0]
    c1dc:	69db      	ldr	r3, [r3, #28]
    c1de:	4a1d      	ldr	r2, [pc, #116]	; (c254 <_adc_set_config+0x390>)
    c1e0:	4293      	cmp	r3, r2
    c1e2:	dc04      	bgt.n	c1ee <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    c1e4:	683b      	ldr	r3, [r7, #0]
    c1e6:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    c1e8:	4a1a      	ldr	r2, [pc, #104]	; (c254 <_adc_set_config+0x390>)
    c1ea:	4293      	cmp	r3, r2
    c1ec:	dd48      	ble.n	c280 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c1ee:	2317      	movs	r3, #23
    c1f0:	e0eb      	b.n	c3ca <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    c1f2:	683b      	ldr	r3, [r7, #0]
    c1f4:	7cdb      	ldrb	r3, [r3, #19]
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	d032      	beq.n	c260 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    c1fa:	683b      	ldr	r3, [r7, #0]
    c1fc:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c1fe:	4a16      	ldr	r2, [pc, #88]	; (c258 <_adc_set_config+0x394>)
    c200:	4293      	cmp	r3, r2
    c202:	dc0e      	bgt.n	c222 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    c204:	683b      	ldr	r3, [r7, #0]
    c206:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    c208:	4a14      	ldr	r2, [pc, #80]	; (c25c <_adc_set_config+0x398>)
    c20a:	4293      	cmp	r3, r2
    c20c:	db09      	blt.n	c222 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    c20e:	683b      	ldr	r3, [r7, #0]
    c210:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    c212:	4a11      	ldr	r2, [pc, #68]	; (c258 <_adc_set_config+0x394>)
    c214:	4293      	cmp	r3, r2
    c216:	dc04      	bgt.n	c222 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    c218:	683b      	ldr	r3, [r7, #0]
    c21a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    c21c:	4a0f      	ldr	r2, [pc, #60]	; (c25c <_adc_set_config+0x398>)
    c21e:	4293      	cmp	r3, r2
    c220:	da1e      	bge.n	c260 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c222:	2317      	movs	r3, #23
    c224:	e0d1      	b.n	c3ca <_adc_set_config+0x506>
    c226:	46c0      	nop			; (mov r8, r8)
    c228:	0000bc9d 	.word	0x0000bc9d
    c22c:	0001350d 	.word	0x0001350d
    c230:	00013551 	.word	0x00013551
    c234:	0000be4d 	.word	0x0000be4d
    c238:	00019340 	.word	0x00019340
    c23c:	0000bd79 	.word	0x0000bd79
    c240:	000001ff 	.word	0x000001ff
    c244:	fffffe00 	.word	0xfffffe00
    c248:	000003ff 	.word	0x000003ff
    c24c:	000007ff 	.word	0x000007ff
    c250:	fffff800 	.word	0xfffff800
    c254:	00000fff 	.word	0x00000fff
    c258:	00007fff 	.word	0x00007fff
    c25c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    c260:	683b      	ldr	r3, [r7, #0]
    c262:	69db      	ldr	r3, [r3, #28]
    c264:	4a5b      	ldr	r2, [pc, #364]	; (c3d4 <_adc_set_config+0x510>)
    c266:	4293      	cmp	r3, r2
    c268:	dc04      	bgt.n	c274 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    c26a:	683b      	ldr	r3, [r7, #0]
    c26c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    c26e:	4a59      	ldr	r2, [pc, #356]	; (c3d4 <_adc_set_config+0x510>)
    c270:	4293      	cmp	r3, r2
    c272:	dd07      	ble.n	c284 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c274:	2317      	movs	r3, #23
    c276:	e0a8      	b.n	c3ca <_adc_set_config+0x506>
			break;
    c278:	46c0      	nop			; (mov r8, r8)
    c27a:	e004      	b.n	c286 <_adc_set_config+0x3c2>
			break;
    c27c:	46c0      	nop			; (mov r8, r8)
    c27e:	e002      	b.n	c286 <_adc_set_config+0x3c2>
			break;
    c280:	46c0      	nop			; (mov r8, r8)
    c282:	e000      	b.n	c286 <_adc_set_config+0x3c2>
			}
			break;
    c284:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    c286:	46c0      	nop			; (mov r8, r8)
    c288:	687b      	ldr	r3, [r7, #4]
    c28a:	0018      	movs	r0, r3
    c28c:	4b52      	ldr	r3, [pc, #328]	; (c3d8 <_adc_set_config+0x514>)
    c28e:	4798      	blx	r3
    c290:	1e03      	subs	r3, r0, #0
    c292:	d1f9      	bne.n	c288 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    c294:	683b      	ldr	r3, [r7, #0]
    c296:	7e1a      	ldrb	r2, [r3, #24]
    c298:	693b      	ldr	r3, [r7, #16]
    c29a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    c29c:	46c0      	nop			; (mov r8, r8)
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	0018      	movs	r0, r3
    c2a2:	4b4d      	ldr	r3, [pc, #308]	; (c3d8 <_adc_set_config+0x514>)
    c2a4:	4798      	blx	r3
    c2a6:	1e03      	subs	r3, r0, #0
    c2a8:	d1f9      	bne.n	c29e <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    c2aa:	683b      	ldr	r3, [r7, #0]
    c2ac:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    c2ae:	b29a      	uxth	r2, r3
    c2b0:	693b      	ldr	r3, [r7, #16]
    c2b2:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    c2b4:	46c0      	nop			; (mov r8, r8)
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	0018      	movs	r0, r3
    c2ba:	4b47      	ldr	r3, [pc, #284]	; (c3d8 <_adc_set_config+0x514>)
    c2bc:	4798      	blx	r3
    c2be:	1e03      	subs	r3, r0, #0
    c2c0:	d1f9      	bne.n	c2b6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    c2c2:	683b      	ldr	r3, [r7, #0]
    c2c4:	6a1b      	ldr	r3, [r3, #32]
    c2c6:	b29a      	uxth	r2, r3
    c2c8:	693b      	ldr	r3, [r7, #16]
    c2ca:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    c2cc:	2314      	movs	r3, #20
    c2ce:	18fb      	adds	r3, r7, r3
    c2d0:	683a      	ldr	r2, [r7, #0]
    c2d2:	212c      	movs	r1, #44	; 0x2c
    c2d4:	5c52      	ldrb	r2, [r2, r1]
    c2d6:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    c2d8:	2314      	movs	r3, #20
    c2da:	18fb      	adds	r3, r7, r3
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	2b00      	cmp	r3, #0
    c2e0:	d006      	beq.n	c2f0 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    c2e2:	2314      	movs	r3, #20
    c2e4:	18fb      	adds	r3, r7, r3
    c2e6:	781a      	ldrb	r2, [r3, #0]
    c2e8:	2314      	movs	r3, #20
    c2ea:	18fb      	adds	r3, r7, r3
    c2ec:	3a01      	subs	r2, #1
    c2ee:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c2f0:	2314      	movs	r3, #20
    c2f2:	18fb      	adds	r3, r7, r3
    c2f4:	781b      	ldrb	r3, [r3, #0]
    c2f6:	2b0f      	cmp	r3, #15
    c2f8:	d804      	bhi.n	c304 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    c2fa:	683b      	ldr	r3, [r7, #0]
    c2fc:	222b      	movs	r2, #43	; 0x2b
    c2fe:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c300:	2b0f      	cmp	r3, #15
    c302:	d901      	bls.n	c308 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    c304:	2317      	movs	r3, #23
    c306:	e060      	b.n	c3ca <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    c308:	46c0      	nop			; (mov r8, r8)
    c30a:	687b      	ldr	r3, [r7, #4]
    c30c:	0018      	movs	r0, r3
    c30e:	4b32      	ldr	r3, [pc, #200]	; (c3d8 <_adc_set_config+0x514>)
    c310:	4798      	blx	r3
    c312:	1e03      	subs	r3, r0, #0
    c314:	d1f9      	bne.n	c30a <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    c316:	683b      	ldr	r3, [r7, #0]
    c318:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    c31a:	683a      	ldr	r2, [r7, #0]
    c31c:	212b      	movs	r1, #43	; 0x2b
    c31e:	5c52      	ldrb	r2, [r2, r1]
    c320:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    c322:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c324:	2214      	movs	r2, #20
    c326:	18ba      	adds	r2, r7, r2
    c328:	7812      	ldrb	r2, [r2, #0]
    c32a:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    c32c:	4313      	orrs	r3, r2
			config->negative_input |
    c32e:	683a      	ldr	r2, [r7, #0]
    c330:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c332:	4313      	orrs	r3, r2
			config->positive_input;
    c334:	683a      	ldr	r2, [r7, #0]
    c336:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    c338:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    c33a:	693b      	ldr	r3, [r7, #16]
    c33c:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    c33e:	683b      	ldr	r3, [r7, #0]
    c340:	222a      	movs	r2, #42	; 0x2a
    c342:	5c9a      	ldrb	r2, [r3, r2]
    c344:	693b      	ldr	r3, [r7, #16]
    c346:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    c348:	693b      	ldr	r3, [r7, #16]
    c34a:	220f      	movs	r2, #15
    c34c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    c34e:	683b      	ldr	r3, [r7, #0]
    c350:	2224      	movs	r2, #36	; 0x24
    c352:	5c9b      	ldrb	r3, [r3, r2]
    c354:	2b00      	cmp	r3, #0
    c356:	d01e      	beq.n	c396 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    c358:	683b      	ldr	r3, [r7, #0]
    c35a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    c35c:	4a1f      	ldr	r2, [pc, #124]	; (c3dc <_adc_set_config+0x518>)
    c35e:	4293      	cmp	r3, r2
    c360:	d901      	bls.n	c366 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    c362:	2317      	movs	r3, #23
    c364:	e031      	b.n	c3ca <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    c366:	683b      	ldr	r3, [r7, #0]
    c368:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    c36a:	693b      	ldr	r3, [r7, #16]
    c36c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    c36e:	683b      	ldr	r3, [r7, #0]
    c370:	2228      	movs	r2, #40	; 0x28
    c372:	5e9b      	ldrsh	r3, [r3, r2]
    c374:	4a1a      	ldr	r2, [pc, #104]	; (c3e0 <_adc_set_config+0x51c>)
    c376:	4293      	cmp	r3, r2
    c378:	dc05      	bgt.n	c386 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    c37a:	683b      	ldr	r3, [r7, #0]
    c37c:	2228      	movs	r2, #40	; 0x28
    c37e:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    c380:	4a18      	ldr	r2, [pc, #96]	; (c3e4 <_adc_set_config+0x520>)
    c382:	4293      	cmp	r3, r2
    c384:	da01      	bge.n	c38a <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    c386:	2317      	movs	r3, #23
    c388:	e01f      	b.n	c3ca <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    c38a:	683b      	ldr	r3, [r7, #0]
    c38c:	2228      	movs	r2, #40	; 0x28
    c38e:	5e9b      	ldrsh	r3, [r3, r2]
    c390:	b29a      	uxth	r2, r3
    c392:	693b      	ldr	r3, [r7, #16]
    c394:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    c396:	4b14      	ldr	r3, [pc, #80]	; (c3e8 <_adc_set_config+0x524>)
    c398:	681b      	ldr	r3, [r3, #0]
    c39a:	08db      	lsrs	r3, r3, #3
    c39c:	b29b      	uxth	r3, r3
    c39e:	021b      	lsls	r3, r3, #8
    c3a0:	b29a      	uxth	r2, r3
    c3a2:	23e0      	movs	r3, #224	; 0xe0
    c3a4:	00db      	lsls	r3, r3, #3
    c3a6:	4013      	ands	r3, r2
    c3a8:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    c3aa:	4b10      	ldr	r3, [pc, #64]	; (c3ec <_adc_set_config+0x528>)
    c3ac:	685c      	ldr	r4, [r3, #4]
    c3ae:	681b      	ldr	r3, [r3, #0]
    c3b0:	0161      	lsls	r1, r4, #5
    c3b2:	0edd      	lsrs	r5, r3, #27
    c3b4:	430d      	orrs	r5, r1
    c3b6:	0ee6      	lsrs	r6, r4, #27
    c3b8:	b2ab      	uxth	r3, r5
    c3ba:	21ff      	movs	r1, #255	; 0xff
    c3bc:	400b      	ands	r3, r1
    c3be:	b29b      	uxth	r3, r3
			) |
    c3c0:	4313      	orrs	r3, r2
    c3c2:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    c3c4:	693b      	ldr	r3, [r7, #16]
    c3c6:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    c3c8:	2300      	movs	r3, #0
}
    c3ca:	0018      	movs	r0, r3
    c3cc:	46bd      	mov	sp, r7
    c3ce:	b009      	add	sp, #36	; 0x24
    c3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3d2:	46c0      	nop			; (mov r8, r8)
    c3d4:	0000ffff 	.word	0x0000ffff
    c3d8:	0000bd79 	.word	0x0000bd79
    c3dc:	00000fff 	.word	0x00000fff
    c3e0:	000007ff 	.word	0x000007ff
    c3e4:	fffff800 	.word	0xfffff800
    c3e8:	00806024 	.word	0x00806024
    c3ec:	00806020 	.word	0x00806020

0000c3f0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    c3f0:	b580      	push	{r7, lr}
    c3f2:	b086      	sub	sp, #24
    c3f4:	af00      	add	r7, sp, #0
    c3f6:	60f8      	str	r0, [r7, #12]
    c3f8:	60b9      	str	r1, [r7, #8]
    c3fa:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    c3fc:	68fb      	ldr	r3, [r7, #12]
    c3fe:	68ba      	ldr	r2, [r7, #8]
    c400:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    c402:	2380      	movs	r3, #128	; 0x80
    c404:	025b      	lsls	r3, r3, #9
    c406:	0019      	movs	r1, r3
    c408:	2002      	movs	r0, #2
    c40a:	4b32      	ldr	r3, [pc, #200]	; (c4d4 <adc_init+0xe4>)
    c40c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    c40e:	68bb      	ldr	r3, [r7, #8]
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	b2db      	uxtb	r3, r3
    c414:	001a      	movs	r2, r3
    c416:	2301      	movs	r3, #1
    c418:	4013      	ands	r3, r2
    c41a:	d001      	beq.n	c420 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    c41c:	2305      	movs	r3, #5
    c41e:	e055      	b.n	c4cc <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    c420:	68bb      	ldr	r3, [r7, #8]
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	b2db      	uxtb	r3, r3
    c426:	001a      	movs	r2, r3
    c428:	2302      	movs	r3, #2
    c42a:	4013      	ands	r3, r2
    c42c:	d001      	beq.n	c432 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    c42e:	231c      	movs	r3, #28
    c430:	e04c      	b.n	c4cc <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    c432:	687b      	ldr	r3, [r7, #4]
    c434:	785a      	ldrb	r2, [r3, #1]
    c436:	68fb      	ldr	r3, [r7, #12]
    c438:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    c43a:	68fb      	ldr	r3, [r7, #12]
    c43c:	791b      	ldrb	r3, [r3, #4]
    c43e:	2b00      	cmp	r3, #0
    c440:	d102      	bne.n	c448 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    c442:	2001      	movs	r0, #1
    c444:	4b24      	ldr	r3, [pc, #144]	; (c4d8 <adc_init+0xe8>)
    c446:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c448:	2317      	movs	r3, #23
    c44a:	18fb      	adds	r3, r7, r3
    c44c:	2200      	movs	r2, #0
    c44e:	701a      	strb	r2, [r3, #0]
    c450:	e00e      	b.n	c470 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    c452:	2317      	movs	r3, #23
    c454:	18fb      	adds	r3, r7, r3
    c456:	781a      	ldrb	r2, [r3, #0]
    c458:	68fb      	ldr	r3, [r7, #12]
    c45a:	3202      	adds	r2, #2
    c45c:	0092      	lsls	r2, r2, #2
    c45e:	2100      	movs	r1, #0
    c460:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c462:	2317      	movs	r3, #23
    c464:	18fb      	adds	r3, r7, r3
    c466:	781a      	ldrb	r2, [r3, #0]
    c468:	2317      	movs	r3, #23
    c46a:	18fb      	adds	r3, r7, r3
    c46c:	3201      	adds	r2, #1
    c46e:	701a      	strb	r2, [r3, #0]
    c470:	2317      	movs	r3, #23
    c472:	18fb      	adds	r3, r7, r3
    c474:	781b      	ldrb	r3, [r3, #0]
    c476:	2b02      	cmp	r3, #2
    c478:	d9eb      	bls.n	c452 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    c47a:	68fb      	ldr	r3, [r7, #12]
    c47c:	2200      	movs	r2, #0
    c47e:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    c480:	68fb      	ldr	r3, [r7, #12]
    c482:	2200      	movs	r2, #0
    c484:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    c486:	68fb      	ldr	r3, [r7, #12]
    c488:	2200      	movs	r2, #0
    c48a:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    c48c:	68fb      	ldr	r3, [r7, #12]
    c48e:	2200      	movs	r2, #0
    c490:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    c492:	4b12      	ldr	r3, [pc, #72]	; (c4dc <adc_init+0xec>)
    c494:	68fa      	ldr	r2, [r7, #12]
    c496:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c498:	687b      	ldr	r3, [r7, #4]
    c49a:	222a      	movs	r2, #42	; 0x2a
    c49c:	5c9b      	ldrb	r3, [r3, r2]
    c49e:	2b00      	cmp	r3, #0
    c4a0:	d10a      	bne.n	c4b8 <adc_init+0xc8>
			!config->freerunning) {
    c4a2:	687b      	ldr	r3, [r7, #4]
    c4a4:	7d1b      	ldrb	r3, [r3, #20]
    c4a6:	2201      	movs	r2, #1
    c4a8:	4053      	eors	r3, r2
    c4aa:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d003      	beq.n	c4b8 <adc_init+0xc8>
		module_inst->software_trigger = true;
    c4b0:	68fb      	ldr	r3, [r7, #12]
    c4b2:	2201      	movs	r2, #1
    c4b4:	775a      	strb	r2, [r3, #29]
    c4b6:	e002      	b.n	c4be <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    c4b8:	68fb      	ldr	r3, [r7, #12]
    c4ba:	2200      	movs	r2, #0
    c4bc:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    c4be:	687a      	ldr	r2, [r7, #4]
    c4c0:	68fb      	ldr	r3, [r7, #12]
    c4c2:	0011      	movs	r1, r2
    c4c4:	0018      	movs	r0, r3
    c4c6:	4b06      	ldr	r3, [pc, #24]	; (c4e0 <adc_init+0xf0>)
    c4c8:	4798      	blx	r3
    c4ca:	0003      	movs	r3, r0
}
    c4cc:	0018      	movs	r0, r3
    c4ce:	46bd      	mov	sp, r7
    c4d0:	b006      	add	sp, #24
    c4d2:	bd80      	pop	{r7, pc}
    c4d4:	0000bcb5 	.word	0x0000bcb5
    c4d8:	0000bd39 	.word	0x0000bd39
    c4dc:	2000083c 	.word	0x2000083c
    c4e0:	0000bec5 	.word	0x0000bec5

0000c4e4 <adc_is_syncing>:
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	b084      	sub	sp, #16
    c4e8:	af00      	add	r7, sp, #0
    c4ea:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    c4ec:	687b      	ldr	r3, [r7, #4]
    c4ee:	681b      	ldr	r3, [r3, #0]
    c4f0:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c4f2:	68fb      	ldr	r3, [r7, #12]
    c4f4:	7e5b      	ldrb	r3, [r3, #25]
    c4f6:	b2db      	uxtb	r3, r3
    c4f8:	b25b      	sxtb	r3, r3
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	da01      	bge.n	c502 <adc_is_syncing+0x1e>
		return true;
    c4fe:	2301      	movs	r3, #1
    c500:	e000      	b.n	c504 <adc_is_syncing+0x20>
	return false;
    c502:	2300      	movs	r3, #0
}
    c504:	0018      	movs	r0, r3
    c506:	46bd      	mov	sp, r7
    c508:	b004      	add	sp, #16
    c50a:	bd80      	pop	{r7, pc}

0000c50c <adc_start_conversion>:
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b084      	sub	sp, #16
    c510:	af00      	add	r7, sp, #0
    c512:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    c514:	687b      	ldr	r3, [r7, #4]
    c516:	681b      	ldr	r3, [r3, #0]
    c518:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    c51a:	46c0      	nop			; (mov r8, r8)
    c51c:	687b      	ldr	r3, [r7, #4]
    c51e:	0018      	movs	r0, r3
    c520:	4b0b      	ldr	r3, [pc, #44]	; (c550 <adc_start_conversion+0x44>)
    c522:	4798      	blx	r3
    c524:	1e03      	subs	r3, r0, #0
    c526:	d1f9      	bne.n	c51c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    c528:	68fb      	ldr	r3, [r7, #12]
    c52a:	7b1b      	ldrb	r3, [r3, #12]
    c52c:	b2db      	uxtb	r3, r3
    c52e:	2202      	movs	r2, #2
    c530:	4313      	orrs	r3, r2
    c532:	b2da      	uxtb	r2, r3
    c534:	68fb      	ldr	r3, [r7, #12]
    c536:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
    c538:	46c0      	nop			; (mov r8, r8)
    c53a:	687b      	ldr	r3, [r7, #4]
    c53c:	0018      	movs	r0, r3
    c53e:	4b04      	ldr	r3, [pc, #16]	; (c550 <adc_start_conversion+0x44>)
    c540:	4798      	blx	r3
    c542:	1e03      	subs	r3, r0, #0
    c544:	d1f9      	bne.n	c53a <adc_start_conversion+0x2e>
}
    c546:	46c0      	nop			; (mov r8, r8)
    c548:	46bd      	mov	sp, r7
    c54a:	b004      	add	sp, #16
    c54c:	bd80      	pop	{r7, pc}
    c54e:	46c0      	nop			; (mov r8, r8)
    c550:	0000c4e5 	.word	0x0000c4e5

0000c554 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    c554:	b580      	push	{r7, lr}
    c556:	b084      	sub	sp, #16
    c558:	af00      	add	r7, sp, #0
    c55a:	6078      	str	r0, [r7, #4]
    c55c:	000a      	movs	r2, r1
    c55e:	1cfb      	adds	r3, r7, #3
    c560:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c562:	687b      	ldr	r3, [r7, #4]
    c564:	681b      	ldr	r3, [r3, #0]
    c566:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    c568:	68fb      	ldr	r3, [r7, #12]
    c56a:	1cfa      	adds	r2, r7, #3
    c56c:	7812      	ldrb	r2, [r2, #0]
    c56e:	759a      	strb	r2, [r3, #22]
}
    c570:	46c0      	nop			; (mov r8, r8)
    c572:	46bd      	mov	sp, r7
    c574:	b004      	add	sp, #16
    c576:	bd80      	pop	{r7, pc}

0000c578 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    c578:	b580      	push	{r7, lr}
    c57a:	b084      	sub	sp, #16
    c57c:	af00      	add	r7, sp, #0
    c57e:	0002      	movs	r2, r0
    c580:	1dfb      	adds	r3, r7, #7
    c582:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    c584:	1dfb      	adds	r3, r7, #7
    c586:	781a      	ldrb	r2, [r3, #0]
    c588:	4b47      	ldr	r3, [pc, #284]	; (c6a8 <_adc_interrupt_handler+0x130>)
    c58a:	0092      	lsls	r2, r2, #2
    c58c:	58d3      	ldr	r3, [r2, r3]
    c58e:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    c590:	68fb      	ldr	r3, [r7, #12]
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	7e1b      	ldrb	r3, [r3, #24]
    c596:	b2da      	uxtb	r2, r3
    c598:	68fb      	ldr	r3, [r7, #12]
    c59a:	681b      	ldr	r3, [r3, #0]
    c59c:	7ddb      	ldrb	r3, [r3, #23]
    c59e:	b2db      	uxtb	r3, r3
    c5a0:	4013      	ands	r3, r2
    c5a2:	b2db      	uxtb	r3, r3
    c5a4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    c5a6:	68bb      	ldr	r3, [r7, #8]
    c5a8:	2201      	movs	r2, #1
    c5aa:	4013      	ands	r3, r2
    c5ac:	d045      	beq.n	c63a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    c5ae:	68fb      	ldr	r3, [r7, #12]
    c5b0:	681b      	ldr	r3, [r3, #0]
    c5b2:	2201      	movs	r2, #1
    c5b4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    c5b6:	46c0      	nop			; (mov r8, r8)
    c5b8:	68fb      	ldr	r3, [r7, #12]
    c5ba:	0018      	movs	r0, r3
    c5bc:	4b3b      	ldr	r3, [pc, #236]	; (c6ac <_adc_interrupt_handler+0x134>)
    c5be:	4798      	blx	r3
    c5c0:	1e03      	subs	r3, r0, #0
    c5c2:	d1f9      	bne.n	c5b8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    c5c4:	68fb      	ldr	r3, [r7, #12]
    c5c6:	695b      	ldr	r3, [r3, #20]
    c5c8:	1c99      	adds	r1, r3, #2
    c5ca:	68fa      	ldr	r2, [r7, #12]
    c5cc:	6151      	str	r1, [r2, #20]
    c5ce:	68fa      	ldr	r2, [r7, #12]
    c5d0:	6812      	ldr	r2, [r2, #0]
    c5d2:	8b52      	ldrh	r2, [r2, #26]
    c5d4:	b292      	uxth	r2, r2
    c5d6:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    c5d8:	68fb      	ldr	r3, [r7, #12]
    c5da:	8b1b      	ldrh	r3, [r3, #24]
    c5dc:	b29b      	uxth	r3, r3
    c5de:	3b01      	subs	r3, #1
    c5e0:	b29b      	uxth	r3, r3
    c5e2:	68fa      	ldr	r2, [r7, #12]
    c5e4:	1c19      	adds	r1, r3, #0
    c5e6:	8311      	strh	r1, [r2, #24]
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d008      	beq.n	c5fe <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    c5ec:	68fb      	ldr	r3, [r7, #12]
    c5ee:	7f5b      	ldrb	r3, [r3, #29]
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d022      	beq.n	c63a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    c5f4:	68fb      	ldr	r3, [r7, #12]
    c5f6:	0018      	movs	r0, r3
    c5f8:	4b2d      	ldr	r3, [pc, #180]	; (c6b0 <_adc_interrupt_handler+0x138>)
    c5fa:	4798      	blx	r3
    c5fc:	e01d      	b.n	c63a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    c5fe:	68fb      	ldr	r3, [r7, #12]
    c600:	2101      	movs	r1, #1
    c602:	0018      	movs	r0, r3
    c604:	4b2b      	ldr	r3, [pc, #172]	; (c6b4 <_adc_interrupt_handler+0x13c>)
    c606:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    c608:	68fb      	ldr	r3, [r7, #12]
    c60a:	7f1b      	ldrb	r3, [r3, #28]
    c60c:	b2db      	uxtb	r3, r3
    c60e:	2b05      	cmp	r3, #5
    c610:	d113      	bne.n	c63a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    c612:	68fb      	ldr	r3, [r7, #12]
    c614:	2200      	movs	r2, #0
    c616:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    c618:	68fb      	ldr	r3, [r7, #12]
    c61a:	7edb      	ldrb	r3, [r3, #27]
    c61c:	001a      	movs	r2, r3
    c61e:	2301      	movs	r3, #1
    c620:	4013      	ands	r3, r2
    c622:	d00a      	beq.n	c63a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    c624:	68fb      	ldr	r3, [r7, #12]
    c626:	7e9b      	ldrb	r3, [r3, #26]
    c628:	001a      	movs	r2, r3
    c62a:	2301      	movs	r3, #1
    c62c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    c62e:	d004      	beq.n	c63a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    c630:	68fb      	ldr	r3, [r7, #12]
    c632:	689b      	ldr	r3, [r3, #8]
    c634:	68fa      	ldr	r2, [r7, #12]
    c636:	0010      	movs	r0, r2
    c638:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    c63a:	68bb      	ldr	r3, [r7, #8]
    c63c:	2204      	movs	r2, #4
    c63e:	4013      	ands	r3, r2
    c640:	d014      	beq.n	c66c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    c642:	68fb      	ldr	r3, [r7, #12]
    c644:	681b      	ldr	r3, [r3, #0]
    c646:	2204      	movs	r2, #4
    c648:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    c64a:	68fb      	ldr	r3, [r7, #12]
    c64c:	7edb      	ldrb	r3, [r3, #27]
    c64e:	001a      	movs	r2, r3
    c650:	2302      	movs	r3, #2
    c652:	4013      	ands	r3, r2
    c654:	d00a      	beq.n	c66c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    c656:	68fb      	ldr	r3, [r7, #12]
    c658:	7e9b      	ldrb	r3, [r3, #26]
    c65a:	001a      	movs	r2, r3
    c65c:	2302      	movs	r3, #2
    c65e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    c660:	d004      	beq.n	c66c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    c662:	68fb      	ldr	r3, [r7, #12]
    c664:	68db      	ldr	r3, [r3, #12]
    c666:	68fa      	ldr	r2, [r7, #12]
    c668:	0010      	movs	r0, r2
    c66a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    c66c:	68bb      	ldr	r3, [r7, #8]
    c66e:	2202      	movs	r2, #2
    c670:	4013      	ands	r3, r2
    c672:	d014      	beq.n	c69e <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    c674:	68fb      	ldr	r3, [r7, #12]
    c676:	681b      	ldr	r3, [r3, #0]
    c678:	2202      	movs	r2, #2
    c67a:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    c67c:	68fb      	ldr	r3, [r7, #12]
    c67e:	7edb      	ldrb	r3, [r3, #27]
    c680:	001a      	movs	r2, r3
    c682:	2304      	movs	r3, #4
    c684:	4013      	ands	r3, r2
    c686:	d00a      	beq.n	c69e <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    c688:	68fb      	ldr	r3, [r7, #12]
    c68a:	7e9b      	ldrb	r3, [r3, #26]
    c68c:	001a      	movs	r2, r3
    c68e:	2304      	movs	r3, #4
    c690:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    c692:	d004      	beq.n	c69e <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    c694:	68fb      	ldr	r3, [r7, #12]
    c696:	691b      	ldr	r3, [r3, #16]
    c698:	68fa      	ldr	r2, [r7, #12]
    c69a:	0010      	movs	r0, r2
    c69c:	4798      	blx	r3
		}
	}
}
    c69e:	46c0      	nop			; (mov r8, r8)
    c6a0:	46bd      	mov	sp, r7
    c6a2:	b004      	add	sp, #16
    c6a4:	bd80      	pop	{r7, pc}
    c6a6:	46c0      	nop			; (mov r8, r8)
    c6a8:	2000083c 	.word	0x2000083c
    c6ac:	0000c4e5 	.word	0x0000c4e5
    c6b0:	0000c50d 	.word	0x0000c50d
    c6b4:	0000c555 	.word	0x0000c555

0000c6b8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    c6b8:	b580      	push	{r7, lr}
    c6ba:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    c6bc:	2000      	movs	r0, #0
    c6be:	4b02      	ldr	r3, [pc, #8]	; (c6c8 <ADC_Handler+0x10>)
    c6c0:	4798      	blx	r3
}
    c6c2:	46c0      	nop			; (mov r8, r8)
    c6c4:	46bd      	mov	sp, r7
    c6c6:	bd80      	pop	{r7, pc}
    c6c8:	0000c579 	.word	0x0000c579

0000c6cc <system_interrupt_disable>:
{
    c6cc:	b580      	push	{r7, lr}
    c6ce:	b082      	sub	sp, #8
    c6d0:	af00      	add	r7, sp, #0
    c6d2:	0002      	movs	r2, r0
    c6d4:	1dfb      	adds	r3, r7, #7
    c6d6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c6d8:	4a07      	ldr	r2, [pc, #28]	; (c6f8 <system_interrupt_disable+0x2c>)
    c6da:	1dfb      	adds	r3, r7, #7
    c6dc:	781b      	ldrb	r3, [r3, #0]
    c6de:	0019      	movs	r1, r3
    c6e0:	231f      	movs	r3, #31
    c6e2:	400b      	ands	r3, r1
    c6e4:	2101      	movs	r1, #1
    c6e6:	4099      	lsls	r1, r3
    c6e8:	000b      	movs	r3, r1
    c6ea:	0019      	movs	r1, r3
    c6ec:	2380      	movs	r3, #128	; 0x80
    c6ee:	50d1      	str	r1, [r2, r3]
}
    c6f0:	46c0      	nop			; (mov r8, r8)
    c6f2:	46bd      	mov	sp, r7
    c6f4:	b002      	add	sp, #8
    c6f6:	bd80      	pop	{r7, pc}
    c6f8:	e000e100 	.word	0xe000e100

0000c6fc <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b084      	sub	sp, #16
    c700:	af00      	add	r7, sp, #0
    c702:	0002      	movs	r2, r0
    c704:	1dfb      	adds	r3, r7, #7
    c706:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    c708:	1dfb      	adds	r3, r7, #7
    c70a:	781a      	ldrb	r2, [r3, #0]
    c70c:	4b37      	ldr	r3, [pc, #220]	; (c7ec <_dac_interrupt_handler+0xf0>)
    c70e:	0092      	lsls	r2, r2, #2
    c710:	58d3      	ldr	r3, [r2, r3]
    c712:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    c714:	68fb      	ldr	r3, [r7, #12]
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    c71a:	68bb      	ldr	r3, [r7, #8]
    c71c:	799b      	ldrb	r3, [r3, #6]
    c71e:	b2db      	uxtb	r3, r3
    c720:	001a      	movs	r2, r3
    c722:	2301      	movs	r3, #1
    c724:	4013      	ands	r3, r2
    c726:	d00e      	beq.n	c746 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    c728:	68bb      	ldr	r3, [r7, #8]
    c72a:	2201      	movs	r2, #1
    c72c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    c72e:	68fb      	ldr	r3, [r7, #12]
    c730:	3314      	adds	r3, #20
    c732:	2b00      	cmp	r3, #0
    c734:	d007      	beq.n	c746 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    c736:	68fb      	ldr	r3, [r7, #12]
    c738:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    c73a:	2b00      	cmp	r3, #0
    c73c:	d003      	beq.n	c746 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    c73e:	68fb      	ldr	r3, [r7, #12]
    c740:	699b      	ldr	r3, [r3, #24]
    c742:	2000      	movs	r0, #0
    c744:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    c746:	68bb      	ldr	r3, [r7, #8]
    c748:	799b      	ldrb	r3, [r3, #6]
    c74a:	b2db      	uxtb	r3, r3
    c74c:	001a      	movs	r2, r3
    c74e:	2302      	movs	r3, #2
    c750:	4013      	ands	r3, r2
    c752:	d047      	beq.n	c7e4 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    c754:	68bb      	ldr	r3, [r7, #8]
    c756:	2202      	movs	r2, #2
    c758:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    c75a:	68fb      	ldr	r3, [r7, #12]
    c75c:	899b      	ldrh	r3, [r3, #12]
    c75e:	b29b      	uxth	r3, r3
    c760:	2b00      	cmp	r3, #0
    c762:	d033      	beq.n	c7cc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    c764:	68fb      	ldr	r3, [r7, #12]
    c766:	689a      	ldr	r2, [r3, #8]
    c768:	68fb      	ldr	r3, [r7, #12]
    c76a:	89db      	ldrh	r3, [r3, #14]
    c76c:	b29b      	uxth	r3, r3
    c76e:	1c59      	adds	r1, r3, #1
    c770:	b288      	uxth	r0, r1
    c772:	68f9      	ldr	r1, [r7, #12]
    c774:	81c8      	strh	r0, [r1, #14]
    c776:	005b      	lsls	r3, r3, #1
    c778:	18d3      	adds	r3, r2, r3
    c77a:	881b      	ldrh	r3, [r3, #0]
    c77c:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    c77e:	68bb      	ldr	r3, [r7, #8]
    c780:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    c782:	68fb      	ldr	r3, [r7, #12]
    c784:	899b      	ldrh	r3, [r3, #12]
    c786:	b29b      	uxth	r3, r3
    c788:	3b01      	subs	r3, #1
    c78a:	b29a      	uxth	r2, r3
    c78c:	68fb      	ldr	r3, [r7, #12]
    c78e:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    c790:	68fb      	ldr	r3, [r7, #12]
    c792:	899b      	ldrh	r3, [r3, #12]
    c794:	b29b      	uxth	r3, r3
    c796:	2b00      	cmp	r3, #0
    c798:	d118      	bne.n	c7cc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    c79a:	68fb      	ldr	r3, [r7, #12]
    c79c:	2220      	movs	r2, #32
    c79e:	2100      	movs	r1, #0
    c7a0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    c7a2:	68bb      	ldr	r3, [r7, #8]
    c7a4:	2202      	movs	r2, #2
    c7a6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    c7a8:	68bb      	ldr	r3, [r7, #8]
    c7aa:	2202      	movs	r2, #2
    c7ac:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    c7ae:	2019      	movs	r0, #25
    c7b0:	4b0f      	ldr	r3, [pc, #60]	; (c7f0 <_dac_interrupt_handler+0xf4>)
    c7b2:	4798      	blx	r3

				if ((module->callback) &&
    c7b4:	68fb      	ldr	r3, [r7, #12]
    c7b6:	3314      	adds	r3, #20
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d007      	beq.n	c7cc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    c7bc:	68fb      	ldr	r3, [r7, #12]
    c7be:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d003      	beq.n	c7cc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    c7c4:	68fb      	ldr	r3, [r7, #12]
    c7c6:	69db      	ldr	r3, [r3, #28]
    c7c8:	2000      	movs	r0, #0
    c7ca:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    c7cc:	68fb      	ldr	r3, [r7, #12]
    c7ce:	3314      	adds	r3, #20
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d007      	beq.n	c7e4 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    c7d4:	68fb      	ldr	r3, [r7, #12]
    c7d6:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d003      	beq.n	c7e4 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    c7dc:	68fb      	ldr	r3, [r7, #12]
    c7de:	695b      	ldr	r3, [r3, #20]
    c7e0:	2000      	movs	r0, #0
    c7e2:	4798      	blx	r3
		}
	}
}
    c7e4:	46c0      	nop			; (mov r8, r8)
    c7e6:	46bd      	mov	sp, r7
    c7e8:	b004      	add	sp, #16
    c7ea:	bd80      	pop	{r7, pc}
    c7ec:	20000840 	.word	0x20000840
    c7f0:	0000c6cd 	.word	0x0000c6cd

0000c7f4 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    c7f4:	b580      	push	{r7, lr}
    c7f6:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    c7f8:	2000      	movs	r0, #0
    c7fa:	4b02      	ldr	r3, [pc, #8]	; (c804 <DAC_Handler+0x10>)
    c7fc:	4798      	blx	r3
}
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	46bd      	mov	sp, r7
    c802:	bd80      	pop	{r7, pc}
    c804:	0000c6fd 	.word	0x0000c6fd

0000c808 <system_interrupt_enter_critical_section>:
{
    c808:	b580      	push	{r7, lr}
    c80a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    c80c:	4b02      	ldr	r3, [pc, #8]	; (c818 <system_interrupt_enter_critical_section+0x10>)
    c80e:	4798      	blx	r3
}
    c810:	46c0      	nop			; (mov r8, r8)
    c812:	46bd      	mov	sp, r7
    c814:	bd80      	pop	{r7, pc}
    c816:	46c0      	nop			; (mov r8, r8)
    c818:	00012755 	.word	0x00012755

0000c81c <system_interrupt_leave_critical_section>:
{
    c81c:	b580      	push	{r7, lr}
    c81e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    c820:	4b02      	ldr	r3, [pc, #8]	; (c82c <system_interrupt_leave_critical_section+0x10>)
    c822:	4798      	blx	r3
}
    c824:	46c0      	nop			; (mov r8, r8)
    c826:	46bd      	mov	sp, r7
    c828:	bd80      	pop	{r7, pc}
    c82a:	46c0      	nop			; (mov r8, r8)
    c82c:	000127a9 	.word	0x000127a9

0000c830 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    c830:	b580      	push	{r7, lr}
    c832:	b086      	sub	sp, #24
    c834:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    c836:	4b49      	ldr	r3, [pc, #292]	; (c95c <DMAC_Handler+0x12c>)
    c838:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    c83a:	4b49      	ldr	r3, [pc, #292]	; (c960 <DMAC_Handler+0x130>)
    c83c:	8c1b      	ldrh	r3, [r3, #32]
    c83e:	b29b      	uxth	r3, r3
    c840:	b2da      	uxtb	r2, r3
    c842:	2317      	movs	r3, #23
    c844:	18fb      	adds	r3, r7, r3
    c846:	210f      	movs	r1, #15
    c848:	400a      	ands	r2, r1
    c84a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    c84c:	2317      	movs	r3, #23
    c84e:	18fb      	adds	r3, r7, r3
    c850:	781a      	ldrb	r2, [r3, #0]
    c852:	4b44      	ldr	r3, [pc, #272]	; (c964 <DMAC_Handler+0x134>)
    c854:	0092      	lsls	r2, r2, #2
    c856:	58d3      	ldr	r3, [r2, r3]
    c858:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    c85a:	4a41      	ldr	r2, [pc, #260]	; (c960 <DMAC_Handler+0x130>)
    c85c:	693b      	ldr	r3, [r7, #16]
    c85e:	781b      	ldrb	r3, [r3, #0]
    c860:	210f      	movs	r1, #15
    c862:	400b      	ands	r3, r1
    c864:	b2d9      	uxtb	r1, r3
    c866:	233f      	movs	r3, #63	; 0x3f
    c868:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    c86a:	493d      	ldr	r1, [pc, #244]	; (c960 <DMAC_Handler+0x130>)
    c86c:	230f      	movs	r3, #15
    c86e:	18fb      	adds	r3, r7, r3
    c870:	224e      	movs	r2, #78	; 0x4e
    c872:	5c8a      	ldrb	r2, [r1, r2]
    c874:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    c876:	693b      	ldr	r3, [r7, #16]
    c878:	781b      	ldrb	r3, [r3, #0]
    c87a:	4a3b      	ldr	r2, [pc, #236]	; (c968 <DMAC_Handler+0x138>)
    c87c:	011b      	lsls	r3, r3, #4
    c87e:	18d3      	adds	r3, r2, r3
    c880:	3302      	adds	r3, #2
    c882:	881b      	ldrh	r3, [r3, #0]
    c884:	b29b      	uxth	r3, r3
    c886:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    c888:	693b      	ldr	r3, [r7, #16]
    c88a:	781b      	ldrb	r3, [r3, #0]
    c88c:	4a37      	ldr	r2, [pc, #220]	; (c96c <DMAC_Handler+0x13c>)
    c88e:	011b      	lsls	r3, r3, #4
    c890:	18d3      	adds	r3, r2, r3
    c892:	3302      	adds	r3, #2
    c894:	881b      	ldrh	r3, [r3, #0]
    c896:	b29b      	uxth	r3, r3
    c898:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    c89a:	68ba      	ldr	r2, [r7, #8]
    c89c:	687b      	ldr	r3, [r7, #4]
    c89e:	1ad2      	subs	r2, r2, r3
    c8a0:	693b      	ldr	r3, [r7, #16]
    c8a2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    c8a4:	230f      	movs	r3, #15
    c8a6:	18fb      	adds	r3, r7, r3
    c8a8:	781b      	ldrb	r3, [r3, #0]
    c8aa:	2201      	movs	r2, #1
    c8ac:	4013      	ands	r3, r2
    c8ae:	d016      	beq.n	c8de <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    c8b0:	4a2b      	ldr	r2, [pc, #172]	; (c960 <DMAC_Handler+0x130>)
    c8b2:	234e      	movs	r3, #78	; 0x4e
    c8b4:	2101      	movs	r1, #1
    c8b6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    c8b8:	693b      	ldr	r3, [r7, #16]
    c8ba:	2210      	movs	r2, #16
    c8bc:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    c8be:	693b      	ldr	r3, [r7, #16]
    c8c0:	7c1b      	ldrb	r3, [r3, #16]
    c8c2:	001a      	movs	r2, r3
    c8c4:	2301      	movs	r3, #1
    c8c6:	4013      	ands	r3, r2
    c8c8:	d042      	beq.n	c950 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    c8ca:	693b      	ldr	r3, [r7, #16]
    c8cc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d03e      	beq.n	c950 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    c8d2:	693b      	ldr	r3, [r7, #16]
    c8d4:	685b      	ldr	r3, [r3, #4]
    c8d6:	693a      	ldr	r2, [r7, #16]
    c8d8:	0010      	movs	r0, r2
    c8da:	4798      	blx	r3
    c8dc:	e038      	b.n	c950 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    c8de:	230f      	movs	r3, #15
    c8e0:	18fb      	adds	r3, r7, r3
    c8e2:	781b      	ldrb	r3, [r3, #0]
    c8e4:	2202      	movs	r2, #2
    c8e6:	4013      	ands	r3, r2
    c8e8:	d016      	beq.n	c918 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    c8ea:	4a1d      	ldr	r2, [pc, #116]	; (c960 <DMAC_Handler+0x130>)
    c8ec:	234e      	movs	r3, #78	; 0x4e
    c8ee:	2102      	movs	r1, #2
    c8f0:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    c8f2:	693b      	ldr	r3, [r7, #16]
    c8f4:	2200      	movs	r2, #0
    c8f6:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    c8f8:	693b      	ldr	r3, [r7, #16]
    c8fa:	7c1b      	ldrb	r3, [r3, #16]
    c8fc:	001a      	movs	r2, r3
    c8fe:	2302      	movs	r3, #2
    c900:	4013      	ands	r3, r2
    c902:	d025      	beq.n	c950 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    c904:	693b      	ldr	r3, [r7, #16]
    c906:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    c908:	2b00      	cmp	r3, #0
    c90a:	d021      	beq.n	c950 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    c90c:	693b      	ldr	r3, [r7, #16]
    c90e:	689b      	ldr	r3, [r3, #8]
    c910:	693a      	ldr	r2, [r7, #16]
    c912:	0010      	movs	r0, r2
    c914:	4798      	blx	r3
    c916:	e01b      	b.n	c950 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    c918:	230f      	movs	r3, #15
    c91a:	18fb      	adds	r3, r7, r3
    c91c:	781b      	ldrb	r3, [r3, #0]
    c91e:	2204      	movs	r2, #4
    c920:	4013      	ands	r3, r2
    c922:	d015      	beq.n	c950 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    c924:	4a0e      	ldr	r2, [pc, #56]	; (c960 <DMAC_Handler+0x130>)
    c926:	234e      	movs	r3, #78	; 0x4e
    c928:	2104      	movs	r1, #4
    c92a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    c92c:	693b      	ldr	r3, [r7, #16]
    c92e:	2206      	movs	r2, #6
    c930:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    c932:	693b      	ldr	r3, [r7, #16]
    c934:	7c1b      	ldrb	r3, [r3, #16]
    c936:	001a      	movs	r2, r3
    c938:	2304      	movs	r3, #4
    c93a:	4013      	ands	r3, r2
    c93c:	d008      	beq.n	c950 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    c93e:	693b      	ldr	r3, [r7, #16]
    c940:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    c942:	2b00      	cmp	r3, #0
    c944:	d004      	beq.n	c950 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    c946:	693b      	ldr	r3, [r7, #16]
    c948:	68db      	ldr	r3, [r3, #12]
    c94a:	693a      	ldr	r2, [r7, #16]
    c94c:	0010      	movs	r0, r2
    c94e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    c950:	4b07      	ldr	r3, [pc, #28]	; (c970 <DMAC_Handler+0x140>)
    c952:	4798      	blx	r3
}
    c954:	46c0      	nop			; (mov r8, r8)
    c956:	46bd      	mov	sp, r7
    c958:	b006      	add	sp, #24
    c95a:	bd80      	pop	{r7, pc}
    c95c:	0000c809 	.word	0x0000c809
    c960:	41004800 	.word	0x41004800
    c964:	20000290 	.word	0x20000290
    c968:	20000850 	.word	0x20000850
    c96c:	20000240 	.word	0x20000240
    c970:	0000c81d 	.word	0x0000c81d

0000c974 <system_gclk_chan_get_config_defaults>:
{
    c974:	b580      	push	{r7, lr}
    c976:	b082      	sub	sp, #8
    c978:	af00      	add	r7, sp, #0
    c97a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c97c:	687b      	ldr	r3, [r7, #4]
    c97e:	2200      	movs	r2, #0
    c980:	701a      	strb	r2, [r3, #0]
}
    c982:	46c0      	nop			; (mov r8, r8)
    c984:	46bd      	mov	sp, r7
    c986:	b002      	add	sp, #8
    c988:	bd80      	pop	{r7, pc}
	...

0000c98c <system_apb_clock_set_mask>:
{
    c98c:	b580      	push	{r7, lr}
    c98e:	b082      	sub	sp, #8
    c990:	af00      	add	r7, sp, #0
    c992:	0002      	movs	r2, r0
    c994:	6039      	str	r1, [r7, #0]
    c996:	1dfb      	adds	r3, r7, #7
    c998:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c99a:	1dfb      	adds	r3, r7, #7
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	2b01      	cmp	r3, #1
    c9a0:	d00a      	beq.n	c9b8 <system_apb_clock_set_mask+0x2c>
    c9a2:	2b02      	cmp	r3, #2
    c9a4:	d00f      	beq.n	c9c6 <system_apb_clock_set_mask+0x3a>
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d114      	bne.n	c9d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c9aa:	4b0e      	ldr	r3, [pc, #56]	; (c9e4 <system_apb_clock_set_mask+0x58>)
    c9ac:	4a0d      	ldr	r2, [pc, #52]	; (c9e4 <system_apb_clock_set_mask+0x58>)
    c9ae:	6991      	ldr	r1, [r2, #24]
    c9b0:	683a      	ldr	r2, [r7, #0]
    c9b2:	430a      	orrs	r2, r1
    c9b4:	619a      	str	r2, [r3, #24]
			break;
    c9b6:	e00f      	b.n	c9d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c9b8:	4b0a      	ldr	r3, [pc, #40]	; (c9e4 <system_apb_clock_set_mask+0x58>)
    c9ba:	4a0a      	ldr	r2, [pc, #40]	; (c9e4 <system_apb_clock_set_mask+0x58>)
    c9bc:	69d1      	ldr	r1, [r2, #28]
    c9be:	683a      	ldr	r2, [r7, #0]
    c9c0:	430a      	orrs	r2, r1
    c9c2:	61da      	str	r2, [r3, #28]
			break;
    c9c4:	e008      	b.n	c9d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c9c6:	4b07      	ldr	r3, [pc, #28]	; (c9e4 <system_apb_clock_set_mask+0x58>)
    c9c8:	4a06      	ldr	r2, [pc, #24]	; (c9e4 <system_apb_clock_set_mask+0x58>)
    c9ca:	6a11      	ldr	r1, [r2, #32]
    c9cc:	683a      	ldr	r2, [r7, #0]
    c9ce:	430a      	orrs	r2, r1
    c9d0:	621a      	str	r2, [r3, #32]
			break;
    c9d2:	e001      	b.n	c9d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c9d4:	2317      	movs	r3, #23
    c9d6:	e000      	b.n	c9da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c9d8:	2300      	movs	r3, #0
}
    c9da:	0018      	movs	r0, r3
    c9dc:	46bd      	mov	sp, r7
    c9de:	b002      	add	sp, #8
    c9e0:	bd80      	pop	{r7, pc}
    c9e2:	46c0      	nop			; (mov r8, r8)
    c9e4:	40000400 	.word	0x40000400

0000c9e8 <system_pinmux_get_config_defaults>:
{
    c9e8:	b580      	push	{r7, lr}
    c9ea:	b082      	sub	sp, #8
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c9f0:	687b      	ldr	r3, [r7, #4]
    c9f2:	2280      	movs	r2, #128	; 0x80
    c9f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c9f6:	687b      	ldr	r3, [r7, #4]
    c9f8:	2200      	movs	r2, #0
    c9fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c9fc:	687b      	ldr	r3, [r7, #4]
    c9fe:	2201      	movs	r2, #1
    ca00:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	2200      	movs	r2, #0
    ca06:	70da      	strb	r2, [r3, #3]
}
    ca08:	46c0      	nop			; (mov r8, r8)
    ca0a:	46bd      	mov	sp, r7
    ca0c:	b002      	add	sp, #8
    ca0e:	bd80      	pop	{r7, pc}

0000ca10 <system_interrupt_enable>:
{
    ca10:	b580      	push	{r7, lr}
    ca12:	b082      	sub	sp, #8
    ca14:	af00      	add	r7, sp, #0
    ca16:	0002      	movs	r2, r0
    ca18:	1dfb      	adds	r3, r7, #7
    ca1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ca1c:	4b06      	ldr	r3, [pc, #24]	; (ca38 <system_interrupt_enable+0x28>)
    ca1e:	1dfa      	adds	r2, r7, #7
    ca20:	7812      	ldrb	r2, [r2, #0]
    ca22:	0011      	movs	r1, r2
    ca24:	221f      	movs	r2, #31
    ca26:	400a      	ands	r2, r1
    ca28:	2101      	movs	r1, #1
    ca2a:	4091      	lsls	r1, r2
    ca2c:	000a      	movs	r2, r1
    ca2e:	601a      	str	r2, [r3, #0]
}
    ca30:	46c0      	nop			; (mov r8, r8)
    ca32:	46bd      	mov	sp, r7
    ca34:	b002      	add	sp, #8
    ca36:	bd80      	pop	{r7, pc}
    ca38:	e000e100 	.word	0xe000e100

0000ca3c <_extint_get_eic_from_channel>:
{
    ca3c:	b580      	push	{r7, lr}
    ca3e:	b084      	sub	sp, #16
    ca40:	af00      	add	r7, sp, #0
    ca42:	0002      	movs	r2, r0
    ca44:	1dfb      	adds	r3, r7, #7
    ca46:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    ca48:	230f      	movs	r3, #15
    ca4a:	18fb      	adds	r3, r7, r3
    ca4c:	1dfa      	adds	r2, r7, #7
    ca4e:	7812      	ldrb	r2, [r2, #0]
    ca50:	0952      	lsrs	r2, r2, #5
    ca52:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    ca54:	230f      	movs	r3, #15
    ca56:	18fb      	adds	r3, r7, r3
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d10c      	bne.n	ca78 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ca5e:	4b09      	ldr	r3, [pc, #36]	; (ca84 <_extint_get_eic_from_channel+0x48>)
    ca60:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    ca62:	230f      	movs	r3, #15
    ca64:	18fb      	adds	r3, r7, r3
    ca66:	781b      	ldrb	r3, [r3, #0]
    ca68:	009b      	lsls	r3, r3, #2
    ca6a:	2210      	movs	r2, #16
    ca6c:	4694      	mov	ip, r2
    ca6e:	44bc      	add	ip, r7
    ca70:	4463      	add	r3, ip
    ca72:	3b08      	subs	r3, #8
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	e000      	b.n	ca7a <_extint_get_eic_from_channel+0x3e>
		return NULL;
    ca78:	2300      	movs	r3, #0
}
    ca7a:	0018      	movs	r0, r3
    ca7c:	46bd      	mov	sp, r7
    ca7e:	b004      	add	sp, #16
    ca80:	bd80      	pop	{r7, pc}
    ca82:	46c0      	nop			; (mov r8, r8)
    ca84:	40001800 	.word	0x40001800

0000ca88 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    ca88:	b580      	push	{r7, lr}
    ca8a:	b082      	sub	sp, #8
    ca8c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ca8e:	4b0f      	ldr	r3, [pc, #60]	; (cacc <extint_is_syncing+0x44>)
    ca90:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    ca92:	2300      	movs	r3, #0
    ca94:	607b      	str	r3, [r7, #4]
    ca96:	e011      	b.n	cabc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    ca98:	687b      	ldr	r3, [r7, #4]
    ca9a:	009b      	lsls	r3, r3, #2
    ca9c:	2208      	movs	r2, #8
    ca9e:	4694      	mov	ip, r2
    caa0:	44bc      	add	ip, r7
    caa2:	4463      	add	r3, ip
    caa4:	3b08      	subs	r3, #8
    caa6:	681b      	ldr	r3, [r3, #0]
    caa8:	785b      	ldrb	r3, [r3, #1]
    caaa:	b2db      	uxtb	r3, r3
    caac:	b25b      	sxtb	r3, r3
    caae:	2b00      	cmp	r3, #0
    cab0:	da01      	bge.n	cab6 <extint_is_syncing+0x2e>
			return true;
    cab2:	2301      	movs	r3, #1
    cab4:	e006      	b.n	cac4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	3301      	adds	r3, #1
    caba:	607b      	str	r3, [r7, #4]
    cabc:	687b      	ldr	r3, [r7, #4]
    cabe:	2b00      	cmp	r3, #0
    cac0:	d0ea      	beq.n	ca98 <extint_is_syncing+0x10>
		}
	}
	return false;
    cac2:	2300      	movs	r3, #0
}
    cac4:	0018      	movs	r0, r3
    cac6:	46bd      	mov	sp, r7
    cac8:	b002      	add	sp, #8
    caca:	bd80      	pop	{r7, pc}
    cacc:	40001800 	.word	0x40001800

0000cad0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    cad0:	b580      	push	{r7, lr}
    cad2:	b084      	sub	sp, #16
    cad4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cad6:	4b2d      	ldr	r3, [pc, #180]	; (cb8c <_system_extint_init+0xbc>)
    cad8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    cada:	2140      	movs	r1, #64	; 0x40
    cadc:	2000      	movs	r0, #0
    cade:	4b2c      	ldr	r3, [pc, #176]	; (cb90 <_system_extint_init+0xc0>)
    cae0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    cae2:	003b      	movs	r3, r7
    cae4:	0018      	movs	r0, r3
    cae6:	4b2b      	ldr	r3, [pc, #172]	; (cb94 <_system_extint_init+0xc4>)
    cae8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    caea:	003b      	movs	r3, r7
    caec:	2206      	movs	r2, #6
    caee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    caf0:	003b      	movs	r3, r7
    caf2:	0019      	movs	r1, r3
    caf4:	2005      	movs	r0, #5
    caf6:	4b28      	ldr	r3, [pc, #160]	; (cb98 <_system_extint_init+0xc8>)
    caf8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    cafa:	2005      	movs	r0, #5
    cafc:	4b27      	ldr	r3, [pc, #156]	; (cb9c <_system_extint_init+0xcc>)
    cafe:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cb00:	2300      	movs	r3, #0
    cb02:	60fb      	str	r3, [r7, #12]
    cb04:	e018      	b.n	cb38 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    cb06:	68fb      	ldr	r3, [r7, #12]
    cb08:	009b      	lsls	r3, r3, #2
    cb0a:	2210      	movs	r2, #16
    cb0c:	4694      	mov	ip, r2
    cb0e:	44bc      	add	ip, r7
    cb10:	4463      	add	r3, ip
    cb12:	3b0c      	subs	r3, #12
    cb14:	681a      	ldr	r2, [r3, #0]
    cb16:	68fb      	ldr	r3, [r7, #12]
    cb18:	009b      	lsls	r3, r3, #2
    cb1a:	2110      	movs	r1, #16
    cb1c:	468c      	mov	ip, r1
    cb1e:	44bc      	add	ip, r7
    cb20:	4463      	add	r3, ip
    cb22:	3b0c      	subs	r3, #12
    cb24:	681b      	ldr	r3, [r3, #0]
    cb26:	781b      	ldrb	r3, [r3, #0]
    cb28:	b2db      	uxtb	r3, r3
    cb2a:	2101      	movs	r1, #1
    cb2c:	430b      	orrs	r3, r1
    cb2e:	b2db      	uxtb	r3, r3
    cb30:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cb32:	68fb      	ldr	r3, [r7, #12]
    cb34:	3301      	adds	r3, #1
    cb36:	60fb      	str	r3, [r7, #12]
    cb38:	68fb      	ldr	r3, [r7, #12]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d0e3      	beq.n	cb06 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    cb3e:	46c0      	nop			; (mov r8, r8)
    cb40:	4b17      	ldr	r3, [pc, #92]	; (cba0 <_system_extint_init+0xd0>)
    cb42:	4798      	blx	r3
    cb44:	1e03      	subs	r3, r0, #0
    cb46:	d1fb      	bne.n	cb40 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    cb48:	230b      	movs	r3, #11
    cb4a:	18fb      	adds	r3, r7, r3
    cb4c:	2200      	movs	r2, #0
    cb4e:	701a      	strb	r2, [r3, #0]
    cb50:	e00d      	b.n	cb6e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    cb52:	230b      	movs	r3, #11
    cb54:	18fb      	adds	r3, r7, r3
    cb56:	781a      	ldrb	r2, [r3, #0]
    cb58:	4b12      	ldr	r3, [pc, #72]	; (cba4 <_system_extint_init+0xd4>)
    cb5a:	0092      	lsls	r2, r2, #2
    cb5c:	2100      	movs	r1, #0
    cb5e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    cb60:	230b      	movs	r3, #11
    cb62:	18fb      	adds	r3, r7, r3
    cb64:	781a      	ldrb	r2, [r3, #0]
    cb66:	230b      	movs	r3, #11
    cb68:	18fb      	adds	r3, r7, r3
    cb6a:	3201      	adds	r2, #1
    cb6c:	701a      	strb	r2, [r3, #0]
    cb6e:	230b      	movs	r3, #11
    cb70:	18fb      	adds	r3, r7, r3
    cb72:	781b      	ldrb	r3, [r3, #0]
    cb74:	2b0f      	cmp	r3, #15
    cb76:	d9ec      	bls.n	cb52 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    cb78:	2004      	movs	r0, #4
    cb7a:	4b0b      	ldr	r3, [pc, #44]	; (cba8 <_system_extint_init+0xd8>)
    cb7c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    cb7e:	4b0b      	ldr	r3, [pc, #44]	; (cbac <_system_extint_init+0xdc>)
    cb80:	4798      	blx	r3
}
    cb82:	46c0      	nop			; (mov r8, r8)
    cb84:	46bd      	mov	sp, r7
    cb86:	b004      	add	sp, #16
    cb88:	bd80      	pop	{r7, pc}
    cb8a:	46c0      	nop			; (mov r8, r8)
    cb8c:	40001800 	.word	0x40001800
    cb90:	0000c98d 	.word	0x0000c98d
    cb94:	0000c975 	.word	0x0000c975
    cb98:	0001350d 	.word	0x0001350d
    cb9c:	00013551 	.word	0x00013551
    cba0:	0000ca89 	.word	0x0000ca89
    cba4:	200008a0 	.word	0x200008a0
    cba8:	0000ca11 	.word	0x0000ca11
    cbac:	0000cbb1 	.word	0x0000cbb1

0000cbb0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    cbb0:	b580      	push	{r7, lr}
    cbb2:	b082      	sub	sp, #8
    cbb4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cbb6:	4b15      	ldr	r3, [pc, #84]	; (cc0c <_extint_enable+0x5c>)
    cbb8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cbba:	2300      	movs	r3, #0
    cbbc:	607b      	str	r3, [r7, #4]
    cbbe:	e018      	b.n	cbf2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    cbc0:	687b      	ldr	r3, [r7, #4]
    cbc2:	009b      	lsls	r3, r3, #2
    cbc4:	2208      	movs	r2, #8
    cbc6:	4694      	mov	ip, r2
    cbc8:	44bc      	add	ip, r7
    cbca:	4463      	add	r3, ip
    cbcc:	3b08      	subs	r3, #8
    cbce:	681a      	ldr	r2, [r3, #0]
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	009b      	lsls	r3, r3, #2
    cbd4:	2108      	movs	r1, #8
    cbd6:	468c      	mov	ip, r1
    cbd8:	44bc      	add	ip, r7
    cbda:	4463      	add	r3, ip
    cbdc:	3b08      	subs	r3, #8
    cbde:	681b      	ldr	r3, [r3, #0]
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	b2db      	uxtb	r3, r3
    cbe4:	2102      	movs	r1, #2
    cbe6:	430b      	orrs	r3, r1
    cbe8:	b2db      	uxtb	r3, r3
    cbea:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	3301      	adds	r3, #1
    cbf0:	607b      	str	r3, [r7, #4]
    cbf2:	687b      	ldr	r3, [r7, #4]
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	d0e3      	beq.n	cbc0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    cbf8:	46c0      	nop			; (mov r8, r8)
    cbfa:	4b05      	ldr	r3, [pc, #20]	; (cc10 <_extint_enable+0x60>)
    cbfc:	4798      	blx	r3
    cbfe:	1e03      	subs	r3, r0, #0
    cc00:	d1fb      	bne.n	cbfa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    cc02:	46c0      	nop			; (mov r8, r8)
    cc04:	46bd      	mov	sp, r7
    cc06:	b002      	add	sp, #8
    cc08:	bd80      	pop	{r7, pc}
    cc0a:	46c0      	nop			; (mov r8, r8)
    cc0c:	40001800 	.word	0x40001800
    cc10:	0000ca89 	.word	0x0000ca89

0000cc14 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    cc1c:	687b      	ldr	r3, [r7, #4]
    cc1e:	2200      	movs	r2, #0
    cc20:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    cc22:	687b      	ldr	r3, [r7, #4]
    cc24:	2200      	movs	r2, #0
    cc26:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    cc28:	687b      	ldr	r3, [r7, #4]
    cc2a:	2201      	movs	r2, #1
    cc2c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    cc2e:	687b      	ldr	r3, [r7, #4]
    cc30:	2201      	movs	r2, #1
    cc32:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    cc34:	687b      	ldr	r3, [r7, #4]
    cc36:	2200      	movs	r2, #0
    cc38:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    cc3a:	687b      	ldr	r3, [r7, #4]
    cc3c:	2202      	movs	r2, #2
    cc3e:	72da      	strb	r2, [r3, #11]
}
    cc40:	46c0      	nop			; (mov r8, r8)
    cc42:	46bd      	mov	sp, r7
    cc44:	b002      	add	sp, #8
    cc46:	bd80      	pop	{r7, pc}

0000cc48 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    cc48:	b580      	push	{r7, lr}
    cc4a:	b086      	sub	sp, #24
    cc4c:	af00      	add	r7, sp, #0
    cc4e:	0002      	movs	r2, r0
    cc50:	6039      	str	r1, [r7, #0]
    cc52:	1dfb      	adds	r3, r7, #7
    cc54:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    cc56:	2308      	movs	r3, #8
    cc58:	18fb      	adds	r3, r7, r3
    cc5a:	0018      	movs	r0, r3
    cc5c:	4b36      	ldr	r3, [pc, #216]	; (cd38 <extint_chan_set_config+0xf0>)
    cc5e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    cc60:	683b      	ldr	r3, [r7, #0]
    cc62:	685b      	ldr	r3, [r3, #4]
    cc64:	b2da      	uxtb	r2, r3
    cc66:	2308      	movs	r3, #8
    cc68:	18fb      	adds	r3, r7, r3
    cc6a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cc6c:	2308      	movs	r3, #8
    cc6e:	18fb      	adds	r3, r7, r3
    cc70:	2200      	movs	r2, #0
    cc72:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    cc74:	683b      	ldr	r3, [r7, #0]
    cc76:	7a1a      	ldrb	r2, [r3, #8]
    cc78:	2308      	movs	r3, #8
    cc7a:	18fb      	adds	r3, r7, r3
    cc7c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    cc7e:	683b      	ldr	r3, [r7, #0]
    cc80:	681b      	ldr	r3, [r3, #0]
    cc82:	b2db      	uxtb	r3, r3
    cc84:	2208      	movs	r2, #8
    cc86:	18ba      	adds	r2, r7, r2
    cc88:	0011      	movs	r1, r2
    cc8a:	0018      	movs	r0, r3
    cc8c:	4b2b      	ldr	r3, [pc, #172]	; (cd3c <extint_chan_set_config+0xf4>)
    cc8e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    cc90:	1dfb      	adds	r3, r7, #7
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	0018      	movs	r0, r3
    cc96:	4b2a      	ldr	r3, [pc, #168]	; (cd40 <extint_chan_set_config+0xf8>)
    cc98:	4798      	blx	r3
    cc9a:	0003      	movs	r3, r0
    cc9c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    cc9e:	1dfb      	adds	r3, r7, #7
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	2207      	movs	r2, #7
    cca4:	4013      	ands	r3, r2
    cca6:	009b      	lsls	r3, r3, #2
    cca8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    ccaa:	683b      	ldr	r3, [r7, #0]
    ccac:	7adb      	ldrb	r3, [r3, #11]
    ccae:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    ccb0:	683b      	ldr	r3, [r7, #0]
    ccb2:	7a9b      	ldrb	r3, [r3, #10]
    ccb4:	2b00      	cmp	r3, #0
    ccb6:	d003      	beq.n	ccc0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    ccb8:	697b      	ldr	r3, [r7, #20]
    ccba:	2208      	movs	r2, #8
    ccbc:	4313      	orrs	r3, r2
    ccbe:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    ccc0:	1dfb      	adds	r3, r7, #7
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	08db      	lsrs	r3, r3, #3
    ccc6:	b2db      	uxtb	r3, r3
    ccc8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    ccca:	1dfb      	adds	r3, r7, #7
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	08db      	lsrs	r3, r3, #3
    ccd0:	b2db      	uxtb	r3, r3
    ccd2:	001a      	movs	r2, r3
    ccd4:	693b      	ldr	r3, [r7, #16]
    ccd6:	3206      	adds	r2, #6
    ccd8:	0092      	lsls	r2, r2, #2
    ccda:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ccdc:	210f      	movs	r1, #15
    ccde:	68fa      	ldr	r2, [r7, #12]
    cce0:	4091      	lsls	r1, r2
    cce2:	000a      	movs	r2, r1
    cce4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    cce6:	401a      	ands	r2, r3
			(new_config << config_pos);
    cce8:	6979      	ldr	r1, [r7, #20]
    ccea:	68fb      	ldr	r3, [r7, #12]
    ccec:	4099      	lsls	r1, r3
    ccee:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ccf0:	431a      	orrs	r2, r3
    ccf2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    ccf4:	693b      	ldr	r3, [r7, #16]
    ccf6:	1d82      	adds	r2, r0, #6
    ccf8:	0092      	lsls	r2, r2, #2
    ccfa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    ccfc:	683b      	ldr	r3, [r7, #0]
    ccfe:	7a5b      	ldrb	r3, [r3, #9]
    cd00:	2b00      	cmp	r3, #0
    cd02:	d00a      	beq.n	cd1a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    cd04:	693b      	ldr	r3, [r7, #16]
    cd06:	695a      	ldr	r2, [r3, #20]
    cd08:	1dfb      	adds	r3, r7, #7
    cd0a:	781b      	ldrb	r3, [r3, #0]
    cd0c:	2101      	movs	r1, #1
    cd0e:	4099      	lsls	r1, r3
    cd10:	000b      	movs	r3, r1
    cd12:	431a      	orrs	r2, r3
    cd14:	693b      	ldr	r3, [r7, #16]
    cd16:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    cd18:	e00a      	b.n	cd30 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    cd1a:	693b      	ldr	r3, [r7, #16]
    cd1c:	695b      	ldr	r3, [r3, #20]
    cd1e:	1dfa      	adds	r2, r7, #7
    cd20:	7812      	ldrb	r2, [r2, #0]
    cd22:	2101      	movs	r1, #1
    cd24:	4091      	lsls	r1, r2
    cd26:	000a      	movs	r2, r1
    cd28:	43d2      	mvns	r2, r2
    cd2a:	401a      	ands	r2, r3
    cd2c:	693b      	ldr	r3, [r7, #16]
    cd2e:	615a      	str	r2, [r3, #20]
}
    cd30:	46c0      	nop			; (mov r8, r8)
    cd32:	46bd      	mov	sp, r7
    cd34:	b006      	add	sp, #24
    cd36:	bd80      	pop	{r7, pc}
    cd38:	0000c9e9 	.word	0x0000c9e9
    cd3c:	000137f9 	.word	0x000137f9
    cd40:	0000ca3d 	.word	0x0000ca3d

0000cd44 <system_gclk_chan_get_config_defaults>:
{
    cd44:	b580      	push	{r7, lr}
    cd46:	b082      	sub	sp, #8
    cd48:	af00      	add	r7, sp, #0
    cd4a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    cd4c:	687b      	ldr	r3, [r7, #4]
    cd4e:	2200      	movs	r2, #0
    cd50:	701a      	strb	r2, [r3, #0]
}
    cd52:	46c0      	nop			; (mov r8, r8)
    cd54:	46bd      	mov	sp, r7
    cd56:	b002      	add	sp, #8
    cd58:	bd80      	pop	{r7, pc}
	...

0000cd5c <system_apb_clock_set_mask>:
{
    cd5c:	b580      	push	{r7, lr}
    cd5e:	b082      	sub	sp, #8
    cd60:	af00      	add	r7, sp, #0
    cd62:	0002      	movs	r2, r0
    cd64:	6039      	str	r1, [r7, #0]
    cd66:	1dfb      	adds	r3, r7, #7
    cd68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    cd6a:	1dfb      	adds	r3, r7, #7
    cd6c:	781b      	ldrb	r3, [r3, #0]
    cd6e:	2b01      	cmp	r3, #1
    cd70:	d00a      	beq.n	cd88 <system_apb_clock_set_mask+0x2c>
    cd72:	2b02      	cmp	r3, #2
    cd74:	d00f      	beq.n	cd96 <system_apb_clock_set_mask+0x3a>
    cd76:	2b00      	cmp	r3, #0
    cd78:	d114      	bne.n	cda4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    cd7a:	4b0e      	ldr	r3, [pc, #56]	; (cdb4 <system_apb_clock_set_mask+0x58>)
    cd7c:	4a0d      	ldr	r2, [pc, #52]	; (cdb4 <system_apb_clock_set_mask+0x58>)
    cd7e:	6991      	ldr	r1, [r2, #24]
    cd80:	683a      	ldr	r2, [r7, #0]
    cd82:	430a      	orrs	r2, r1
    cd84:	619a      	str	r2, [r3, #24]
			break;
    cd86:	e00f      	b.n	cda8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    cd88:	4b0a      	ldr	r3, [pc, #40]	; (cdb4 <system_apb_clock_set_mask+0x58>)
    cd8a:	4a0a      	ldr	r2, [pc, #40]	; (cdb4 <system_apb_clock_set_mask+0x58>)
    cd8c:	69d1      	ldr	r1, [r2, #28]
    cd8e:	683a      	ldr	r2, [r7, #0]
    cd90:	430a      	orrs	r2, r1
    cd92:	61da      	str	r2, [r3, #28]
			break;
    cd94:	e008      	b.n	cda8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    cd96:	4b07      	ldr	r3, [pc, #28]	; (cdb4 <system_apb_clock_set_mask+0x58>)
    cd98:	4a06      	ldr	r2, [pc, #24]	; (cdb4 <system_apb_clock_set_mask+0x58>)
    cd9a:	6a11      	ldr	r1, [r2, #32]
    cd9c:	683a      	ldr	r2, [r7, #0]
    cd9e:	430a      	orrs	r2, r1
    cda0:	621a      	str	r2, [r3, #32]
			break;
    cda2:	e001      	b.n	cda8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    cda4:	2317      	movs	r3, #23
    cda6:	e000      	b.n	cdaa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    cda8:	2300      	movs	r3, #0
}
    cdaa:	0018      	movs	r0, r3
    cdac:	46bd      	mov	sp, r7
    cdae:	b002      	add	sp, #8
    cdb0:	bd80      	pop	{r7, pc}
    cdb2:	46c0      	nop			; (mov r8, r8)
    cdb4:	40000400 	.word	0x40000400

0000cdb8 <system_interrupt_enable>:
{
    cdb8:	b580      	push	{r7, lr}
    cdba:	b082      	sub	sp, #8
    cdbc:	af00      	add	r7, sp, #0
    cdbe:	0002      	movs	r2, r0
    cdc0:	1dfb      	adds	r3, r7, #7
    cdc2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cdc4:	4b06      	ldr	r3, [pc, #24]	; (cde0 <system_interrupt_enable+0x28>)
    cdc6:	1dfa      	adds	r2, r7, #7
    cdc8:	7812      	ldrb	r2, [r2, #0]
    cdca:	0011      	movs	r1, r2
    cdcc:	221f      	movs	r2, #31
    cdce:	400a      	ands	r2, r1
    cdd0:	2101      	movs	r1, #1
    cdd2:	4091      	lsls	r1, r2
    cdd4:	000a      	movs	r2, r1
    cdd6:	601a      	str	r2, [r3, #0]
}
    cdd8:	46c0      	nop			; (mov r8, r8)
    cdda:	46bd      	mov	sp, r7
    cddc:	b002      	add	sp, #8
    cdde:	bd80      	pop	{r7, pc}
    cde0:	e000e100 	.word	0xe000e100

0000cde4 <system_interrupt_disable>:
{
    cde4:	b580      	push	{r7, lr}
    cde6:	b082      	sub	sp, #8
    cde8:	af00      	add	r7, sp, #0
    cdea:	0002      	movs	r2, r0
    cdec:	1dfb      	adds	r3, r7, #7
    cdee:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cdf0:	4a07      	ldr	r2, [pc, #28]	; (ce10 <system_interrupt_disable+0x2c>)
    cdf2:	1dfb      	adds	r3, r7, #7
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	0019      	movs	r1, r3
    cdf8:	231f      	movs	r3, #31
    cdfa:	400b      	ands	r3, r1
    cdfc:	2101      	movs	r1, #1
    cdfe:	4099      	lsls	r1, r3
    ce00:	000b      	movs	r3, r1
    ce02:	0019      	movs	r1, r3
    ce04:	2380      	movs	r3, #128	; 0x80
    ce06:	50d1      	str	r1, [r2, r3]
}
    ce08:	46c0      	nop			; (mov r8, r8)
    ce0a:	46bd      	mov	sp, r7
    ce0c:	b002      	add	sp, #8
    ce0e:	bd80      	pop	{r7, pc}
    ce10:	e000e100 	.word	0xe000e100

0000ce14 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    ce14:	b580      	push	{r7, lr}
    ce16:	b084      	sub	sp, #16
    ce18:	af00      	add	r7, sp, #0
    ce1a:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ce1c:	687b      	ldr	r3, [r7, #4]
    ce1e:	681b      	ldr	r3, [r3, #0]
    ce20:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    ce22:	68fb      	ldr	r3, [r7, #12]
    ce24:	7a9b      	ldrb	r3, [r3, #10]
    ce26:	b2db      	uxtb	r3, r3
    ce28:	b25b      	sxtb	r3, r3
    ce2a:	2b00      	cmp	r3, #0
    ce2c:	da01      	bge.n	ce32 <rtc_count_is_syncing+0x1e>
                return true;
    ce2e:	2301      	movs	r3, #1
    ce30:	e000      	b.n	ce34 <rtc_count_is_syncing+0x20>
        }

        return false;
    ce32:	2300      	movs	r3, #0
}
    ce34:	0018      	movs	r0, r3
    ce36:	46bd      	mov	sp, r7
    ce38:	b004      	add	sp, #16
    ce3a:	bd80      	pop	{r7, pc}

0000ce3c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    ce3c:	b580      	push	{r7, lr}
    ce3e:	b084      	sub	sp, #16
    ce40:	af00      	add	r7, sp, #0
    ce42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ce44:	687b      	ldr	r3, [r7, #4]
    ce46:	681b      	ldr	r3, [r3, #0]
    ce48:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    ce4a:	2003      	movs	r0, #3
    ce4c:	4b0a      	ldr	r3, [pc, #40]	; (ce78 <rtc_count_enable+0x3c>)
    ce4e:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    ce50:	46c0      	nop			; (mov r8, r8)
    ce52:	687b      	ldr	r3, [r7, #4]
    ce54:	0018      	movs	r0, r3
    ce56:	4b09      	ldr	r3, [pc, #36]	; (ce7c <rtc_count_enable+0x40>)
    ce58:	4798      	blx	r3
    ce5a:	1e03      	subs	r3, r0, #0
    ce5c:	d1f9      	bne.n	ce52 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    ce5e:	68fb      	ldr	r3, [r7, #12]
    ce60:	881b      	ldrh	r3, [r3, #0]
    ce62:	b29b      	uxth	r3, r3
    ce64:	2202      	movs	r2, #2
    ce66:	4313      	orrs	r3, r2
    ce68:	b29a      	uxth	r2, r3
    ce6a:	68fb      	ldr	r3, [r7, #12]
    ce6c:	801a      	strh	r2, [r3, #0]
}
    ce6e:	46c0      	nop			; (mov r8, r8)
    ce70:	46bd      	mov	sp, r7
    ce72:	b004      	add	sp, #16
    ce74:	bd80      	pop	{r7, pc}
    ce76:	46c0      	nop			; (mov r8, r8)
    ce78:	0000cdb9 	.word	0x0000cdb9
    ce7c:	0000ce15 	.word	0x0000ce15

0000ce80 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    ce80:	b580      	push	{r7, lr}
    ce82:	b084      	sub	sp, #16
    ce84:	af00      	add	r7, sp, #0
    ce86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	681b      	ldr	r3, [r3, #0]
    ce8c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    ce8e:	2003      	movs	r0, #3
    ce90:	4b0d      	ldr	r3, [pc, #52]	; (cec8 <rtc_count_disable+0x48>)
    ce92:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    ce94:	46c0      	nop			; (mov r8, r8)
    ce96:	687b      	ldr	r3, [r7, #4]
    ce98:	0018      	movs	r0, r3
    ce9a:	4b0c      	ldr	r3, [pc, #48]	; (cecc <rtc_count_disable+0x4c>)
    ce9c:	4798      	blx	r3
    ce9e:	1e03      	subs	r3, r0, #0
    cea0:	d1f9      	bne.n	ce96 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    cea2:	68fb      	ldr	r3, [r7, #12]
    cea4:	22c1      	movs	r2, #193	; 0xc1
    cea6:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    cea8:	68fb      	ldr	r3, [r7, #12]
    ceaa:	22c1      	movs	r2, #193	; 0xc1
    ceac:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    ceae:	68fb      	ldr	r3, [r7, #12]
    ceb0:	881b      	ldrh	r3, [r3, #0]
    ceb2:	b29b      	uxth	r3, r3
    ceb4:	2202      	movs	r2, #2
    ceb6:	4393      	bics	r3, r2
    ceb8:	b29a      	uxth	r2, r3
    ceba:	68fb      	ldr	r3, [r7, #12]
    cebc:	801a      	strh	r2, [r3, #0]
}
    cebe:	46c0      	nop			; (mov r8, r8)
    cec0:	46bd      	mov	sp, r7
    cec2:	b004      	add	sp, #16
    cec4:	bd80      	pop	{r7, pc}
    cec6:	46c0      	nop			; (mov r8, r8)
    cec8:	0000cde5 	.word	0x0000cde5
    cecc:	0000ce15 	.word	0x0000ce15

0000ced0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    ced0:	b580      	push	{r7, lr}
    ced2:	b084      	sub	sp, #16
    ced4:	af00      	add	r7, sp, #0
    ced6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	681b      	ldr	r3, [r3, #0]
    cedc:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	0018      	movs	r0, r3
    cee2:	4b0d      	ldr	r3, [pc, #52]	; (cf18 <rtc_count_reset+0x48>)
    cee4:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    cee6:	687b      	ldr	r3, [r7, #4]
    cee8:	2200      	movs	r2, #0
    ceea:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	2200      	movs	r2, #0
    cef0:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
    cef2:	46c0      	nop			; (mov r8, r8)
    cef4:	687b      	ldr	r3, [r7, #4]
    cef6:	0018      	movs	r0, r3
    cef8:	4b08      	ldr	r3, [pc, #32]	; (cf1c <rtc_count_reset+0x4c>)
    cefa:	4798      	blx	r3
    cefc:	1e03      	subs	r3, r0, #0
    cefe:	d1f9      	bne.n	cef4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    cf00:	68fb      	ldr	r3, [r7, #12]
    cf02:	881b      	ldrh	r3, [r3, #0]
    cf04:	b29b      	uxth	r3, r3
    cf06:	2201      	movs	r2, #1
    cf08:	4313      	orrs	r3, r2
    cf0a:	b29a      	uxth	r2, r3
    cf0c:	68fb      	ldr	r3, [r7, #12]
    cf0e:	801a      	strh	r2, [r3, #0]
}
    cf10:	46c0      	nop			; (mov r8, r8)
    cf12:	46bd      	mov	sp, r7
    cf14:	b004      	add	sp, #16
    cf16:	bd80      	pop	{r7, pc}
    cf18:	0000ce81 	.word	0x0000ce81
    cf1c:	0000ce15 	.word	0x0000ce15

0000cf20 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    cf20:	b580      	push	{r7, lr}
    cf22:	b084      	sub	sp, #16
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
    cf28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    cf2a:	687b      	ldr	r3, [r7, #4]
    cf2c:	681b      	ldr	r3, [r3, #0]
    cf2e:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    cf30:	683b      	ldr	r3, [r7, #0]
    cf32:	881a      	ldrh	r2, [r3, #0]
    cf34:	68bb      	ldr	r3, [r7, #8]
    cf36:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    cf38:	683b      	ldr	r3, [r7, #0]
    cf3a:	789b      	ldrb	r3, [r3, #2]
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d03a      	beq.n	cfb6 <_rtc_count_set_config+0x96>
    cf40:	2b01      	cmp	r3, #1
    cf42:	d000      	beq.n	cf46 <_rtc_count_set_config+0x26>
    cf44:	e06c      	b.n	d020 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    cf46:	68bb      	ldr	r3, [r7, #8]
    cf48:	881b      	ldrh	r3, [r3, #0]
    cf4a:	b29a      	uxth	r2, r3
    cf4c:	68bb      	ldr	r3, [r7, #8]
    cf4e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    cf50:	683b      	ldr	r3, [r7, #0]
    cf52:	78db      	ldrb	r3, [r3, #3]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d007      	beq.n	cf68 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    cf58:	68bb      	ldr	r3, [r7, #8]
    cf5a:	881b      	ldrh	r3, [r3, #0]
    cf5c:	b29b      	uxth	r3, r3
    cf5e:	2280      	movs	r2, #128	; 0x80
    cf60:	4313      	orrs	r3, r2
    cf62:	b29a      	uxth	r2, r3
    cf64:	68bb      	ldr	r3, [r7, #8]
    cf66:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    cf68:	230f      	movs	r3, #15
    cf6a:	18fb      	adds	r3, r7, r3
    cf6c:	2200      	movs	r2, #0
    cf6e:	701a      	strb	r2, [r3, #0]
    cf70:	e01b      	b.n	cfaa <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
    cf72:	46c0      	nop			; (mov r8, r8)
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	0018      	movs	r0, r3
    cf78:	4b37      	ldr	r3, [pc, #220]	; (d058 <_rtc_count_set_config+0x138>)
    cf7a:	4798      	blx	r3
    cf7c:	1e03      	subs	r3, r0, #0
    cf7e:	d1f9      	bne.n	cf74 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    cf80:	230f      	movs	r3, #15
    cf82:	18fb      	adds	r3, r7, r3
    cf84:	781a      	ldrb	r2, [r3, #0]
    cf86:	683b      	ldr	r3, [r7, #0]
    cf88:	3202      	adds	r2, #2
    cf8a:	0092      	lsls	r2, r2, #2
    cf8c:	58d1      	ldr	r1, [r2, r3]
    cf8e:	230f      	movs	r3, #15
    cf90:	18fb      	adds	r3, r7, r3
    cf92:	781a      	ldrb	r2, [r3, #0]
    cf94:	687b      	ldr	r3, [r7, #4]
    cf96:	0018      	movs	r0, r3
    cf98:	4b30      	ldr	r3, [pc, #192]	; (d05c <_rtc_count_set_config+0x13c>)
    cf9a:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    cf9c:	230f      	movs	r3, #15
    cf9e:	18fb      	adds	r3, r7, r3
    cfa0:	781a      	ldrb	r2, [r3, #0]
    cfa2:	230f      	movs	r3, #15
    cfa4:	18fb      	adds	r3, r7, r3
    cfa6:	3201      	adds	r2, #1
    cfa8:	701a      	strb	r2, [r3, #0]
    cfaa:	230f      	movs	r3, #15
    cfac:	18fb      	adds	r3, r7, r3
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d0de      	beq.n	cf72 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
    cfb4:	e036      	b.n	d024 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    cfb6:	68bb      	ldr	r3, [r7, #8]
    cfb8:	881b      	ldrh	r3, [r3, #0]
    cfba:	b29b      	uxth	r3, r3
    cfbc:	2204      	movs	r2, #4
    cfbe:	4313      	orrs	r3, r2
    cfc0:	b29a      	uxth	r2, r3
    cfc2:	68bb      	ldr	r3, [r7, #8]
    cfc4:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    cfc6:	683b      	ldr	r3, [r7, #0]
    cfc8:	78db      	ldrb	r3, [r3, #3]
    cfca:	2b00      	cmp	r3, #0
    cfcc:	d001      	beq.n	cfd2 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    cfce:	2317      	movs	r3, #23
    cfd0:	e03e      	b.n	d050 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    cfd2:	230e      	movs	r3, #14
    cfd4:	18fb      	adds	r3, r7, r3
    cfd6:	2200      	movs	r2, #0
    cfd8:	701a      	strb	r2, [r3, #0]
    cfda:	e01b      	b.n	d014 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
    cfdc:	46c0      	nop			; (mov r8, r8)
    cfde:	687b      	ldr	r3, [r7, #4]
    cfe0:	0018      	movs	r0, r3
    cfe2:	4b1d      	ldr	r3, [pc, #116]	; (d058 <_rtc_count_set_config+0x138>)
    cfe4:	4798      	blx	r3
    cfe6:	1e03      	subs	r3, r0, #0
    cfe8:	d1f9      	bne.n	cfde <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    cfea:	230e      	movs	r3, #14
    cfec:	18fb      	adds	r3, r7, r3
    cfee:	781a      	ldrb	r2, [r3, #0]
    cff0:	683b      	ldr	r3, [r7, #0]
    cff2:	3202      	adds	r2, #2
    cff4:	0092      	lsls	r2, r2, #2
    cff6:	58d1      	ldr	r1, [r2, r3]
    cff8:	230e      	movs	r3, #14
    cffa:	18fb      	adds	r3, r7, r3
    cffc:	781a      	ldrb	r2, [r3, #0]
    cffe:	687b      	ldr	r3, [r7, #4]
    d000:	0018      	movs	r0, r3
    d002:	4b16      	ldr	r3, [pc, #88]	; (d05c <_rtc_count_set_config+0x13c>)
    d004:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d006:	230e      	movs	r3, #14
    d008:	18fb      	adds	r3, r7, r3
    d00a:	781a      	ldrb	r2, [r3, #0]
    d00c:	230e      	movs	r3, #14
    d00e:	18fb      	adds	r3, r7, r3
    d010:	3201      	adds	r2, #1
    d012:	701a      	strb	r2, [r3, #0]
    d014:	230e      	movs	r3, #14
    d016:	18fb      	adds	r3, r7, r3
    d018:	781b      	ldrb	r3, [r3, #0]
    d01a:	2b01      	cmp	r3, #1
    d01c:	d9de      	bls.n	cfdc <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
    d01e:	e001      	b.n	d024 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    d020:	2317      	movs	r3, #23
    d022:	e015      	b.n	d050 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    d024:	683b      	ldr	r3, [r7, #0]
    d026:	791b      	ldrb	r3, [r3, #4]
    d028:	2b00      	cmp	r3, #0
    d02a:	d010      	beq.n	d04e <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    d02c:	68bb      	ldr	r3, [r7, #8]
    d02e:	885b      	ldrh	r3, [r3, #2]
    d030:	b29b      	uxth	r3, r3
    d032:	2280      	movs	r2, #128	; 0x80
    d034:	01d2      	lsls	r2, r2, #7
    d036:	4313      	orrs	r3, r2
    d038:	b29a      	uxth	r2, r3
    d03a:	68bb      	ldr	r3, [r7, #8]
    d03c:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    d03e:	68bb      	ldr	r3, [r7, #8]
    d040:	885b      	ldrh	r3, [r3, #2]
    d042:	b29b      	uxth	r3, r3
    d044:	4a06      	ldr	r2, [pc, #24]	; (d060 <_rtc_count_set_config+0x140>)
    d046:	4313      	orrs	r3, r2
    d048:	b29a      	uxth	r2, r3
    d04a:	68bb      	ldr	r3, [r7, #8]
    d04c:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    d04e:	2300      	movs	r3, #0
}
    d050:	0018      	movs	r0, r3
    d052:	46bd      	mov	sp, r7
    d054:	b004      	add	sp, #16
    d056:	bd80      	pop	{r7, pc}
    d058:	0000ce15 	.word	0x0000ce15
    d05c:	0000d0f5 	.word	0x0000d0f5
    d060:	ffff8000 	.word	0xffff8000

0000d064 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    d064:	b580      	push	{r7, lr}
    d066:	b086      	sub	sp, #24
    d068:	af00      	add	r7, sp, #0
    d06a:	60f8      	str	r0, [r7, #12]
    d06c:	60b9      	str	r1, [r7, #8]
    d06e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d070:	68fb      	ldr	r3, [r7, #12]
    d072:	68ba      	ldr	r2, [r7, #8]
    d074:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    d076:	2120      	movs	r1, #32
    d078:	2000      	movs	r0, #0
    d07a:	4b17      	ldr	r3, [pc, #92]	; (d0d8 <rtc_count_init+0x74>)
    d07c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d07e:	2314      	movs	r3, #20
    d080:	18fb      	adds	r3, r7, r3
    d082:	0018      	movs	r0, r3
    d084:	4b15      	ldr	r3, [pc, #84]	; (d0dc <rtc_count_init+0x78>)
    d086:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    d088:	2314      	movs	r3, #20
    d08a:	18fb      	adds	r3, r7, r3
    d08c:	2202      	movs	r2, #2
    d08e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    d090:	2314      	movs	r3, #20
    d092:	18fb      	adds	r3, r7, r3
    d094:	0019      	movs	r1, r3
    d096:	2004      	movs	r0, #4
    d098:	4b11      	ldr	r3, [pc, #68]	; (d0e0 <rtc_count_init+0x7c>)
    d09a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    d09c:	2004      	movs	r0, #4
    d09e:	4b11      	ldr	r3, [pc, #68]	; (d0e4 <rtc_count_init+0x80>)
    d0a0:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    d0a2:	68fb      	ldr	r3, [r7, #12]
    d0a4:	0018      	movs	r0, r3
    d0a6:	4b10      	ldr	r3, [pc, #64]	; (d0e8 <rtc_count_init+0x84>)
    d0a8:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    d0aa:	687b      	ldr	r3, [r7, #4]
    d0ac:	789a      	ldrb	r2, [r3, #2]
    d0ae:	68fb      	ldr	r3, [r7, #12]
    d0b0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    d0b2:	687b      	ldr	r3, [r7, #4]
    d0b4:	791a      	ldrb	r2, [r3, #4]
    d0b6:	68fb      	ldr	r3, [r7, #12]
    d0b8:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    d0ba:	4b0c      	ldr	r3, [pc, #48]	; (d0ec <rtc_count_init+0x88>)
    d0bc:	68fa      	ldr	r2, [r7, #12]
    d0be:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    d0c0:	687a      	ldr	r2, [r7, #4]
    d0c2:	68fb      	ldr	r3, [r7, #12]
    d0c4:	0011      	movs	r1, r2
    d0c6:	0018      	movs	r0, r3
    d0c8:	4b09      	ldr	r3, [pc, #36]	; (d0f0 <rtc_count_init+0x8c>)
    d0ca:	4798      	blx	r3
    d0cc:	0003      	movs	r3, r0
}
    d0ce:	0018      	movs	r0, r3
    d0d0:	46bd      	mov	sp, r7
    d0d2:	b006      	add	sp, #24
    d0d4:	bd80      	pop	{r7, pc}
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	0000cd5d 	.word	0x0000cd5d
    d0dc:	0000cd45 	.word	0x0000cd45
    d0e0:	0001350d 	.word	0x0001350d
    d0e4:	00013551 	.word	0x00013551
    d0e8:	0000ced1 	.word	0x0000ced1
    d0ec:	200008e0 	.word	0x200008e0
    d0f0:	0000cf21 	.word	0x0000cf21

0000d0f4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    d0f4:	b580      	push	{r7, lr}
    d0f6:	b086      	sub	sp, #24
    d0f8:	af00      	add	r7, sp, #0
    d0fa:	60f8      	str	r0, [r7, #12]
    d0fc:	60b9      	str	r1, [r7, #8]
    d0fe:	1dfb      	adds	r3, r7, #7
    d100:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d102:	68fb      	ldr	r3, [r7, #12]
    d104:	681b      	ldr	r3, [r3, #0]
    d106:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    d108:	46c0      	nop			; (mov r8, r8)
    d10a:	68fb      	ldr	r3, [r7, #12]
    d10c:	0018      	movs	r0, r3
    d10e:	4b1a      	ldr	r3, [pc, #104]	; (d178 <rtc_count_set_compare+0x84>)
    d110:	4798      	blx	r3
    d112:	1e03      	subs	r3, r0, #0
    d114:	d1f9      	bne.n	d10a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    d116:	68fb      	ldr	r3, [r7, #12]
    d118:	791b      	ldrb	r3, [r3, #4]
    d11a:	2b00      	cmp	r3, #0
    d11c:	d00f      	beq.n	d13e <rtc_count_set_compare+0x4a>
    d11e:	2b01      	cmp	r3, #1
    d120:	d122      	bne.n	d168 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    d122:	1dfb      	adds	r3, r7, #7
    d124:	781b      	ldrb	r3, [r3, #0]
    d126:	2b01      	cmp	r3, #1
    d128:	d901      	bls.n	d12e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    d12a:	2317      	movs	r3, #23
    d12c:	e01f      	b.n	d16e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    d12e:	1dfb      	adds	r3, r7, #7
    d130:	781a      	ldrb	r2, [r3, #0]
    d132:	697b      	ldr	r3, [r7, #20]
    d134:	3206      	adds	r2, #6
    d136:	0092      	lsls	r2, r2, #2
    d138:	68b9      	ldr	r1, [r7, #8]
    d13a:	50d1      	str	r1, [r2, r3]

			break;
    d13c:	e016      	b.n	d16c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    d13e:	1dfb      	adds	r3, r7, #7
    d140:	781b      	ldrb	r3, [r3, #0]
    d142:	2b02      	cmp	r3, #2
    d144:	d901      	bls.n	d14a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    d146:	2317      	movs	r3, #23
    d148:	e011      	b.n	d16e <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    d14a:	68bb      	ldr	r3, [r7, #8]
    d14c:	4a0b      	ldr	r2, [pc, #44]	; (d17c <rtc_count_set_compare+0x88>)
    d14e:	4293      	cmp	r3, r2
    d150:	d901      	bls.n	d156 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d152:	2317      	movs	r3, #23
    d154:	e00b      	b.n	d16e <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    d156:	1dfb      	adds	r3, r7, #7
    d158:	781a      	ldrb	r2, [r3, #0]
    d15a:	68bb      	ldr	r3, [r7, #8]
    d15c:	b299      	uxth	r1, r3
    d15e:	697b      	ldr	r3, [r7, #20]
    d160:	320c      	adds	r2, #12
    d162:	0052      	lsls	r2, r2, #1
    d164:	52d1      	strh	r1, [r2, r3]

			break;
    d166:	e001      	b.n	d16c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    d168:	231a      	movs	r3, #26
    d16a:	e000      	b.n	d16e <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    d16c:	2300      	movs	r3, #0
}
    d16e:	0018      	movs	r0, r3
    d170:	46bd      	mov	sp, r7
    d172:	b006      	add	sp, #24
    d174:	bd80      	pop	{r7, pc}
    d176:	46c0      	nop			; (mov r8, r8)
    d178:	0000ce15 	.word	0x0000ce15
    d17c:	0000ffff 	.word	0x0000ffff

0000d180 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    d180:	b580      	push	{r7, lr}
    d182:	b084      	sub	sp, #16
    d184:	af00      	add	r7, sp, #0
    d186:	6078      	str	r0, [r7, #4]
    d188:	000a      	movs	r2, r1
    d18a:	1cbb      	adds	r3, r7, #2
    d18c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d18e:	687b      	ldr	r3, [r7, #4]
    d190:	681b      	ldr	r3, [r3, #0]
    d192:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    d194:	687b      	ldr	r3, [r7, #4]
    d196:	791b      	ldrb	r3, [r3, #4]
    d198:	2b00      	cmp	r3, #0
    d19a:	d001      	beq.n	d1a0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d19c:	2315      	movs	r3, #21
    d19e:	e00b      	b.n	d1b8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
    d1a0:	46c0      	nop			; (mov r8, r8)
    d1a2:	687b      	ldr	r3, [r7, #4]
    d1a4:	0018      	movs	r0, r3
    d1a6:	4b06      	ldr	r3, [pc, #24]	; (d1c0 <rtc_count_set_period+0x40>)
    d1a8:	4798      	blx	r3
    d1aa:	1e03      	subs	r3, r0, #0
    d1ac:	d1f9      	bne.n	d1a2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
    d1ae:	68fb      	ldr	r3, [r7, #12]
    d1b0:	1cba      	adds	r2, r7, #2
    d1b2:	8812      	ldrh	r2, [r2, #0]
    d1b4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    d1b6:	2300      	movs	r3, #0
}
    d1b8:	0018      	movs	r0, r3
    d1ba:	46bd      	mov	sp, r7
    d1bc:	b004      	add	sp, #16
    d1be:	bd80      	pop	{r7, pc}
    d1c0:	0000ce15 	.word	0x0000ce15

0000d1c4 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    d1c4:	b580      	push	{r7, lr}
    d1c6:	b086      	sub	sp, #24
    d1c8:	af00      	add	r7, sp, #0
    d1ca:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    d1cc:	4b31      	ldr	r3, [pc, #196]	; (d294 <_rtc_interrupt_handler+0xd0>)
    d1ce:	687a      	ldr	r2, [r7, #4]
    d1d0:	0092      	lsls	r2, r2, #2
    d1d2:	58d3      	ldr	r3, [r2, r3]
    d1d4:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    d1d6:	697b      	ldr	r3, [r7, #20]
    d1d8:	681b      	ldr	r3, [r3, #0]
    d1da:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    d1dc:	230e      	movs	r3, #14
    d1de:	18fb      	adds	r3, r7, r3
    d1e0:	697a      	ldr	r2, [r7, #20]
    d1e2:	8ad2      	ldrh	r2, [r2, #22]
    d1e4:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    d1e6:	697b      	ldr	r3, [r7, #20]
    d1e8:	8a9b      	ldrh	r3, [r3, #20]
    d1ea:	b29a      	uxth	r2, r3
    d1ec:	230e      	movs	r3, #14
    d1ee:	18fb      	adds	r3, r7, r3
    d1f0:	210e      	movs	r1, #14
    d1f2:	1879      	adds	r1, r7, r1
    d1f4:	8809      	ldrh	r1, [r1, #0]
    d1f6:	400a      	ands	r2, r1
    d1f8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    d1fa:	693b      	ldr	r3, [r7, #16]
    d1fc:	7a1b      	ldrb	r3, [r3, #8]
    d1fe:	b2da      	uxtb	r2, r3
    d200:	230c      	movs	r3, #12
    d202:	18fb      	adds	r3, r7, r3
    d204:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    d206:	693b      	ldr	r3, [r7, #16]
    d208:	79db      	ldrb	r3, [r3, #7]
    d20a:	b2db      	uxtb	r3, r3
    d20c:	b29a      	uxth	r2, r3
    d20e:	230c      	movs	r3, #12
    d210:	18fb      	adds	r3, r7, r3
    d212:	210c      	movs	r1, #12
    d214:	1879      	adds	r1, r7, r1
    d216:	8809      	ldrh	r1, [r1, #0]
    d218:	400a      	ands	r2, r1
    d21a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    d21c:	230c      	movs	r3, #12
    d21e:	18fb      	adds	r3, r7, r3
    d220:	881b      	ldrh	r3, [r3, #0]
    d222:	2280      	movs	r2, #128	; 0x80
    d224:	4013      	ands	r3, r2
    d226:	d00c      	beq.n	d242 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    d228:	230e      	movs	r3, #14
    d22a:	18fb      	adds	r3, r7, r3
    d22c:	881b      	ldrh	r3, [r3, #0]
    d22e:	2204      	movs	r2, #4
    d230:	4013      	ands	r3, r2
    d232:	d002      	beq.n	d23a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    d234:	697b      	ldr	r3, [r7, #20]
    d236:	691b      	ldr	r3, [r3, #16]
    d238:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    d23a:	693b      	ldr	r3, [r7, #16]
    d23c:	2280      	movs	r2, #128	; 0x80
    d23e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    d240:	e024      	b.n	d28c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    d242:	230c      	movs	r3, #12
    d244:	18fb      	adds	r3, r7, r3
    d246:	881b      	ldrh	r3, [r3, #0]
    d248:	2201      	movs	r2, #1
    d24a:	4013      	ands	r3, r2
    d24c:	d00c      	beq.n	d268 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    d24e:	230e      	movs	r3, #14
    d250:	18fb      	adds	r3, r7, r3
    d252:	881b      	ldrh	r3, [r3, #0]
    d254:	2201      	movs	r2, #1
    d256:	4013      	ands	r3, r2
    d258:	d002      	beq.n	d260 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    d25a:	697b      	ldr	r3, [r7, #20]
    d25c:	689b      	ldr	r3, [r3, #8]
    d25e:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    d260:	693b      	ldr	r3, [r7, #16]
    d262:	2201      	movs	r2, #1
    d264:	721a      	strb	r2, [r3, #8]
}
    d266:	e011      	b.n	d28c <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    d268:	230c      	movs	r3, #12
    d26a:	18fb      	adds	r3, r7, r3
    d26c:	881b      	ldrh	r3, [r3, #0]
    d26e:	2202      	movs	r2, #2
    d270:	4013      	ands	r3, r2
    d272:	d00b      	beq.n	d28c <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    d274:	230e      	movs	r3, #14
    d276:	18fb      	adds	r3, r7, r3
    d278:	881b      	ldrh	r3, [r3, #0]
    d27a:	2202      	movs	r2, #2
    d27c:	4013      	ands	r3, r2
    d27e:	d002      	beq.n	d286 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    d280:	697b      	ldr	r3, [r7, #20]
    d282:	68db      	ldr	r3, [r3, #12]
    d284:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    d286:	693b      	ldr	r3, [r7, #16]
    d288:	2202      	movs	r2, #2
    d28a:	721a      	strb	r2, [r3, #8]
}
    d28c:	46c0      	nop			; (mov r8, r8)
    d28e:	46bd      	mov	sp, r7
    d290:	b006      	add	sp, #24
    d292:	bd80      	pop	{r7, pc}
    d294:	200008e0 	.word	0x200008e0

0000d298 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    d298:	b580      	push	{r7, lr}
    d29a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    d29c:	2000      	movs	r0, #0
    d29e:	4b02      	ldr	r3, [pc, #8]	; (d2a8 <RTC_Handler+0x10>)
    d2a0:	4798      	blx	r3
}
    d2a2:	46c0      	nop			; (mov r8, r8)
    d2a4:	46bd      	mov	sp, r7
    d2a6:	bd80      	pop	{r7, pc}
    d2a8:	0000d1c5 	.word	0x0000d1c5

0000d2ac <system_gclk_chan_get_config_defaults>:
{
    d2ac:	b580      	push	{r7, lr}
    d2ae:	b082      	sub	sp, #8
    d2b0:	af00      	add	r7, sp, #0
    d2b2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d2b4:	687b      	ldr	r3, [r7, #4]
    d2b6:	2200      	movs	r2, #0
    d2b8:	701a      	strb	r2, [r3, #0]
}
    d2ba:	46c0      	nop			; (mov r8, r8)
    d2bc:	46bd      	mov	sp, r7
    d2be:	b002      	add	sp, #8
    d2c0:	bd80      	pop	{r7, pc}

0000d2c2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d2c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2c4:	b08d      	sub	sp, #52	; 0x34
    d2c6:	af00      	add	r7, sp, #0
    d2c8:	60b8      	str	r0, [r7, #8]
    d2ca:	60f9      	str	r1, [r7, #12]
    d2cc:	603a      	str	r2, [r7, #0]
    d2ce:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d2d0:	2300      	movs	r3, #0
    d2d2:	2400      	movs	r4, #0
    d2d4:	623b      	str	r3, [r7, #32]
    d2d6:	627c      	str	r4, [r7, #36]	; 0x24
    d2d8:	2300      	movs	r3, #0
    d2da:	2400      	movs	r4, #0
    d2dc:	61bb      	str	r3, [r7, #24]
    d2de:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    d2e0:	233f      	movs	r3, #63	; 0x3f
    d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d2e4:	e053      	b.n	d38e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2e8:	3b20      	subs	r3, #32
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	db04      	blt.n	d2f8 <long_division+0x36>
    d2ee:	2201      	movs	r2, #1
    d2f0:	409a      	lsls	r2, r3
    d2f2:	0013      	movs	r3, r2
    d2f4:	617b      	str	r3, [r7, #20]
    d2f6:	e00b      	b.n	d310 <long_division+0x4e>
    d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2fa:	2220      	movs	r2, #32
    d2fc:	1ad3      	subs	r3, r2, r3
    d2fe:	2201      	movs	r2, #1
    d300:	40da      	lsrs	r2, r3
    d302:	0013      	movs	r3, r2
    d304:	2100      	movs	r1, #0
    d306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d308:	4091      	lsls	r1, r2
    d30a:	000a      	movs	r2, r1
    d30c:	4313      	orrs	r3, r2
    d30e:	617b      	str	r3, [r7, #20]
    d310:	2201      	movs	r2, #1
    d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d314:	409a      	lsls	r2, r3
    d316:	0013      	movs	r3, r2
    d318:	613b      	str	r3, [r7, #16]

		r = r << 1;
    d31a:	69bb      	ldr	r3, [r7, #24]
    d31c:	69fc      	ldr	r4, [r7, #28]
    d31e:	18db      	adds	r3, r3, r3
    d320:	4164      	adcs	r4, r4
    d322:	61bb      	str	r3, [r7, #24]
    d324:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    d326:	68bb      	ldr	r3, [r7, #8]
    d328:	693a      	ldr	r2, [r7, #16]
    d32a:	401a      	ands	r2, r3
    d32c:	0015      	movs	r5, r2
    d32e:	68fb      	ldr	r3, [r7, #12]
    d330:	697a      	ldr	r2, [r7, #20]
    d332:	401a      	ands	r2, r3
    d334:	0016      	movs	r6, r2
    d336:	002b      	movs	r3, r5
    d338:	4333      	orrs	r3, r6
    d33a:	d007      	beq.n	d34c <long_division+0x8a>
			r |= 0x01;
    d33c:	69bb      	ldr	r3, [r7, #24]
    d33e:	2201      	movs	r2, #1
    d340:	4313      	orrs	r3, r2
    d342:	61bb      	str	r3, [r7, #24]
    d344:	69fb      	ldr	r3, [r7, #28]
    d346:	2200      	movs	r2, #0
    d348:	4313      	orrs	r3, r2
    d34a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    d34c:	687a      	ldr	r2, [r7, #4]
    d34e:	69fb      	ldr	r3, [r7, #28]
    d350:	429a      	cmp	r2, r3
    d352:	d819      	bhi.n	d388 <long_division+0xc6>
    d354:	687a      	ldr	r2, [r7, #4]
    d356:	69fb      	ldr	r3, [r7, #28]
    d358:	429a      	cmp	r2, r3
    d35a:	d103      	bne.n	d364 <long_division+0xa2>
    d35c:	683a      	ldr	r2, [r7, #0]
    d35e:	69bb      	ldr	r3, [r7, #24]
    d360:	429a      	cmp	r2, r3
    d362:	d811      	bhi.n	d388 <long_division+0xc6>
			r = r - d;
    d364:	69b9      	ldr	r1, [r7, #24]
    d366:	69fa      	ldr	r2, [r7, #28]
    d368:	683b      	ldr	r3, [r7, #0]
    d36a:	687c      	ldr	r4, [r7, #4]
    d36c:	1ac9      	subs	r1, r1, r3
    d36e:	41a2      	sbcs	r2, r4
    d370:	000b      	movs	r3, r1
    d372:	0014      	movs	r4, r2
    d374:	61bb      	str	r3, [r7, #24]
    d376:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    d378:	6a3a      	ldr	r2, [r7, #32]
    d37a:	693b      	ldr	r3, [r7, #16]
    d37c:	4313      	orrs	r3, r2
    d37e:	623b      	str	r3, [r7, #32]
    d380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d382:	697b      	ldr	r3, [r7, #20]
    d384:	4313      	orrs	r3, r2
    d386:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d38a:	3b01      	subs	r3, #1
    d38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d390:	2b00      	cmp	r3, #0
    d392:	daa8      	bge.n	d2e6 <long_division+0x24>
		}
	}

	return q;
    d394:	6a3b      	ldr	r3, [r7, #32]
    d396:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    d398:	0018      	movs	r0, r3
    d39a:	0021      	movs	r1, r4
    d39c:	46bd      	mov	sp, r7
    d39e:	b00d      	add	sp, #52	; 0x34
    d3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d3a2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d3a2:	b580      	push	{r7, lr}
    d3a4:	b086      	sub	sp, #24
    d3a6:	af00      	add	r7, sp, #0
    d3a8:	60f8      	str	r0, [r7, #12]
    d3aa:	60b9      	str	r1, [r7, #8]
    d3ac:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    d3ae:	2316      	movs	r3, #22
    d3b0:	18fb      	adds	r3, r7, r3
    d3b2:	2200      	movs	r2, #0
    d3b4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    d3b6:	68bb      	ldr	r3, [r7, #8]
    d3b8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d3ba:	68bb      	ldr	r3, [r7, #8]
    d3bc:	085a      	lsrs	r2, r3, #1
    d3be:	68fb      	ldr	r3, [r7, #12]
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d201      	bcs.n	d3c8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d3c4:	2340      	movs	r3, #64	; 0x40
    d3c6:	e026      	b.n	d416 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    d3c8:	68bb      	ldr	r3, [r7, #8]
    d3ca:	085b      	lsrs	r3, r3, #1
    d3cc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    d3ce:	e00a      	b.n	d3e6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    d3d0:	693a      	ldr	r2, [r7, #16]
    d3d2:	68fb      	ldr	r3, [r7, #12]
    d3d4:	1ad3      	subs	r3, r2, r3
    d3d6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    d3d8:	2316      	movs	r3, #22
    d3da:	18fb      	adds	r3, r7, r3
    d3dc:	881a      	ldrh	r2, [r3, #0]
    d3de:	2316      	movs	r3, #22
    d3e0:	18fb      	adds	r3, r7, r3
    d3e2:	3201      	adds	r2, #1
    d3e4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    d3e6:	693a      	ldr	r2, [r7, #16]
    d3e8:	68fb      	ldr	r3, [r7, #12]
    d3ea:	429a      	cmp	r2, r3
    d3ec:	d2f0      	bcs.n	d3d0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    d3ee:	2316      	movs	r3, #22
    d3f0:	18fb      	adds	r3, r7, r3
    d3f2:	2216      	movs	r2, #22
    d3f4:	18ba      	adds	r2, r7, r2
    d3f6:	8812      	ldrh	r2, [r2, #0]
    d3f8:	3a01      	subs	r2, #1
    d3fa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    d3fc:	2316      	movs	r3, #22
    d3fe:	18fb      	adds	r3, r7, r3
    d400:	881b      	ldrh	r3, [r3, #0]
    d402:	2bff      	cmp	r3, #255	; 0xff
    d404:	d901      	bls.n	d40a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d406:	2340      	movs	r3, #64	; 0x40
    d408:	e005      	b.n	d416 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    d40a:	687b      	ldr	r3, [r7, #4]
    d40c:	2216      	movs	r2, #22
    d40e:	18ba      	adds	r2, r7, r2
    d410:	8812      	ldrh	r2, [r2, #0]
    d412:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    d414:	2300      	movs	r3, #0
	}
}
    d416:	0018      	movs	r0, r3
    d418:	46bd      	mov	sp, r7
    d41a:	b006      	add	sp, #24
    d41c:	bd80      	pop	{r7, pc}
	...

0000d420 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d420:	b5f0      	push	{r4, r5, r6, r7, lr}
    d422:	b0a1      	sub	sp, #132	; 0x84
    d424:	af00      	add	r7, sp, #0
    d426:	64f8      	str	r0, [r7, #76]	; 0x4c
    d428:	64b9      	str	r1, [r7, #72]	; 0x48
    d42a:	647a      	str	r2, [r7, #68]	; 0x44
    d42c:	2243      	movs	r2, #67	; 0x43
    d42e:	18ba      	adds	r2, r7, r2
    d430:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    d432:	2300      	movs	r3, #0
    d434:	2400      	movs	r4, #0
    d436:	673b      	str	r3, [r7, #112]	; 0x70
    d438:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    d43a:	2300      	movs	r3, #0
    d43c:	2400      	movs	r4, #0
    d43e:	66bb      	str	r3, [r7, #104]	; 0x68
    d440:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    d442:	2300      	movs	r3, #0
    d444:	2400      	movs	r4, #0
    d446:	67bb      	str	r3, [r7, #120]	; 0x78
    d448:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    d44a:	2300      	movs	r3, #0
    d44c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d44e:	2358      	movs	r3, #88	; 0x58
    d450:	2240      	movs	r2, #64	; 0x40
    d452:	4694      	mov	ip, r2
    d454:	44bc      	add	ip, r7
    d456:	4463      	add	r3, ip
    d458:	781a      	ldrb	r2, [r3, #0]
    d45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d45c:	435a      	muls	r2, r3
    d45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d460:	429a      	cmp	r2, r3
    d462:	d901      	bls.n	d468 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d464:	2340      	movs	r3, #64	; 0x40
    d466:	e0b3      	b.n	d5d0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d468:	2343      	movs	r3, #67	; 0x43
    d46a:	18fb      	adds	r3, r7, r3
    d46c:	781b      	ldrb	r3, [r3, #0]
    d46e:	2b00      	cmp	r3, #0
    d470:	d13d      	bne.n	d4ee <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d472:	2358      	movs	r3, #88	; 0x58
    d474:	2240      	movs	r2, #64	; 0x40
    d476:	4694      	mov	ip, r2
    d478:	44bc      	add	ip, r7
    d47a:	4463      	add	r3, ip
    d47c:	781b      	ldrb	r3, [r3, #0]
    d47e:	b2db      	uxtb	r3, r3
    d480:	613b      	str	r3, [r7, #16]
    d482:	2300      	movs	r3, #0
    d484:	617b      	str	r3, [r7, #20]
    d486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d488:	60bb      	str	r3, [r7, #8]
    d48a:	2300      	movs	r3, #0
    d48c:	60fb      	str	r3, [r7, #12]
    d48e:	4c52      	ldr	r4, [pc, #328]	; (d5d8 <_sercom_get_async_baud_val+0x1b8>)
    d490:	68ba      	ldr	r2, [r7, #8]
    d492:	68fb      	ldr	r3, [r7, #12]
    d494:	6938      	ldr	r0, [r7, #16]
    d496:	6979      	ldr	r1, [r7, #20]
    d498:	47a0      	blx	r4
    d49a:	0003      	movs	r3, r0
    d49c:	000c      	movs	r4, r1
    d49e:	001b      	movs	r3, r3
    d4a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    d4a2:	2300      	movs	r3, #0
    d4a4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    d4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d4a8:	603b      	str	r3, [r7, #0]
    d4aa:	2300      	movs	r3, #0
    d4ac:	607b      	str	r3, [r7, #4]
    d4ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
    d4b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    d4b2:	683a      	ldr	r2, [r7, #0]
    d4b4:	687b      	ldr	r3, [r7, #4]
    d4b6:	4c49      	ldr	r4, [pc, #292]	; (d5dc <_sercom_get_async_baud_val+0x1bc>)
    d4b8:	47a0      	blx	r4
    d4ba:	0003      	movs	r3, r0
    d4bc:	000c      	movs	r4, r1
    d4be:	673b      	str	r3, [r7, #112]	; 0x70
    d4c0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d4c2:	2100      	movs	r1, #0
    d4c4:	2201      	movs	r2, #1
    d4c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    d4c8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    d4ca:	1ac9      	subs	r1, r1, r3
    d4cc:	41a2      	sbcs	r2, r4
    d4ce:	000b      	movs	r3, r1
    d4d0:	0014      	movs	r4, r2
    d4d2:	66bb      	str	r3, [r7, #104]	; 0x68
    d4d4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    d4d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d4d8:	0c1b      	lsrs	r3, r3, #16
    d4da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    d4dc:	0416      	lsls	r6, r2, #16
    d4de:	431e      	orrs	r6, r3
    d4e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d4e2:	041d      	lsls	r5, r3, #16
    d4e4:	0033      	movs	r3, r6
    d4e6:	67bb      	str	r3, [r7, #120]	; 0x78
    d4e8:	2300      	movs	r3, #0
    d4ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    d4ec:	e06a      	b.n	d5c4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d4ee:	2343      	movs	r3, #67	; 0x43
    d4f0:	18fb      	adds	r3, r7, r3
    d4f2:	781b      	ldrb	r3, [r3, #0]
    d4f4:	2b01      	cmp	r3, #1
    d4f6:	d165      	bne.n	d5c4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    d4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d4fa:	633b      	str	r3, [r7, #48]	; 0x30
    d4fc:	2300      	movs	r3, #0
    d4fe:	637b      	str	r3, [r7, #52]	; 0x34
    d500:	2358      	movs	r3, #88	; 0x58
    d502:	2240      	movs	r2, #64	; 0x40
    d504:	4694      	mov	ip, r2
    d506:	44bc      	add	ip, r7
    d508:	4463      	add	r3, ip
    d50a:	781b      	ldrb	r3, [r3, #0]
    d50c:	b2db      	uxtb	r3, r3
    d50e:	62bb      	str	r3, [r7, #40]	; 0x28
    d510:	2300      	movs	r3, #0
    d512:	62fb      	str	r3, [r7, #44]	; 0x2c
    d514:	4c30      	ldr	r4, [pc, #192]	; (d5d8 <_sercom_get_async_baud_val+0x1b8>)
    d516:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d51c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d51e:	47a0      	blx	r4
    d520:	0003      	movs	r3, r0
    d522:	000c      	movs	r4, r1
    d524:	65bb      	str	r3, [r7, #88]	; 0x58
    d526:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    d528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d52a:	623b      	str	r3, [r7, #32]
    d52c:	2300      	movs	r3, #0
    d52e:	627b      	str	r3, [r7, #36]	; 0x24
    d530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d532:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d534:	001a      	movs	r2, r3
    d536:	0023      	movs	r3, r4
    d538:	6a38      	ldr	r0, [r7, #32]
    d53a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d53c:	4c27      	ldr	r4, [pc, #156]	; (d5dc <_sercom_get_async_baud_val+0x1bc>)
    d53e:	47a0      	blx	r4
    d540:	0003      	movs	r3, r0
    d542:	000c      	movs	r4, r1
    d544:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    d546:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    d548:	2380      	movs	r3, #128	; 0x80
    d54a:	019b      	lsls	r3, r3, #6
    d54c:	429a      	cmp	r2, r3
    d54e:	d901      	bls.n	d554 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d550:	2340      	movs	r3, #64	; 0x40
    d552:	e03d      	b.n	d5d0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    d554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d556:	61bb      	str	r3, [r7, #24]
    d558:	2300      	movs	r3, #0
    d55a:	61fb      	str	r3, [r7, #28]
    d55c:	69b9      	ldr	r1, [r7, #24]
    d55e:	69fa      	ldr	r2, [r7, #28]
    d560:	000b      	movs	r3, r1
    d562:	0f5b      	lsrs	r3, r3, #29
    d564:	0010      	movs	r0, r2
    d566:	00c0      	lsls	r0, r0, #3
    d568:	63f8      	str	r0, [r7, #60]	; 0x3c
    d56a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d56c:	4318      	orrs	r0, r3
    d56e:	63f8      	str	r0, [r7, #60]	; 0x3c
    d570:	000b      	movs	r3, r1
    d572:	00db      	lsls	r3, r3, #3
    d574:	63bb      	str	r3, [r7, #56]	; 0x38
    d576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d578:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d57a:	001a      	movs	r2, r3
    d57c:	0023      	movs	r3, r4
    d57e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    d582:	4c16      	ldr	r4, [pc, #88]	; (d5dc <_sercom_get_async_baud_val+0x1bc>)
    d584:	47a0      	blx	r4
    d586:	0003      	movs	r3, r0
    d588:	000c      	movs	r4, r1
    d58a:	65bb      	str	r3, [r7, #88]	; 0x58
    d58c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    d58e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d590:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d592:	b2d9      	uxtb	r1, r3
    d594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d596:	b2db      	uxtb	r3, r3
    d598:	00db      	lsls	r3, r3, #3
    d59a:	b2da      	uxtb	r2, r3
    d59c:	2317      	movs	r3, #23
    d59e:	2040      	movs	r0, #64	; 0x40
    d5a0:	4684      	mov	ip, r0
    d5a2:	44bc      	add	ip, r7
    d5a4:	4463      	add	r3, ip
    d5a6:	1a8a      	subs	r2, r1, r2
    d5a8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    d5aa:	2317      	movs	r3, #23
    d5ac:	2240      	movs	r2, #64	; 0x40
    d5ae:	4694      	mov	ip, r2
    d5b0:	44bc      	add	ip, r7
    d5b2:	4463      	add	r3, ip
    d5b4:	781b      	ldrb	r3, [r3, #0]
    d5b6:	035b      	lsls	r3, r3, #13
    d5b8:	001a      	movs	r2, r3
    d5ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d5bc:	4313      	orrs	r3, r2
    d5be:	67bb      	str	r3, [r7, #120]	; 0x78
    d5c0:	2300      	movs	r3, #0
    d5c2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    d5c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d5c6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    d5c8:	b29a      	uxth	r2, r3
    d5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d5cc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    d5ce:	2300      	movs	r3, #0
}
    d5d0:	0018      	movs	r0, r3
    d5d2:	46bd      	mov	sp, r7
    d5d4:	b021      	add	sp, #132	; 0x84
    d5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5d8:	000153e9 	.word	0x000153e9
    d5dc:	0000d2c3 	.word	0x0000d2c3

0000d5e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    d5e0:	b580      	push	{r7, lr}
    d5e2:	b084      	sub	sp, #16
    d5e4:	af00      	add	r7, sp, #0
    d5e6:	0002      	movs	r2, r0
    d5e8:	1dfb      	adds	r3, r7, #7
    d5ea:	701a      	strb	r2, [r3, #0]
    d5ec:	1dbb      	adds	r3, r7, #6
    d5ee:	1c0a      	adds	r2, r1, #0
    d5f0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    d5f2:	4b1a      	ldr	r3, [pc, #104]	; (d65c <sercom_set_gclk_generator+0x7c>)
    d5f4:	781b      	ldrb	r3, [r3, #0]
    d5f6:	2201      	movs	r2, #1
    d5f8:	4053      	eors	r3, r2
    d5fa:	b2db      	uxtb	r3, r3
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d103      	bne.n	d608 <sercom_set_gclk_generator+0x28>
    d600:	1dbb      	adds	r3, r7, #6
    d602:	781b      	ldrb	r3, [r3, #0]
    d604:	2b00      	cmp	r3, #0
    d606:	d01b      	beq.n	d640 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d608:	230c      	movs	r3, #12
    d60a:	18fb      	adds	r3, r7, r3
    d60c:	0018      	movs	r0, r3
    d60e:	4b14      	ldr	r3, [pc, #80]	; (d660 <sercom_set_gclk_generator+0x80>)
    d610:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    d612:	230c      	movs	r3, #12
    d614:	18fb      	adds	r3, r7, r3
    d616:	1dfa      	adds	r2, r7, #7
    d618:	7812      	ldrb	r2, [r2, #0]
    d61a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    d61c:	230c      	movs	r3, #12
    d61e:	18fb      	adds	r3, r7, r3
    d620:	0019      	movs	r1, r3
    d622:	2013      	movs	r0, #19
    d624:	4b0f      	ldr	r3, [pc, #60]	; (d664 <sercom_set_gclk_generator+0x84>)
    d626:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    d628:	2013      	movs	r0, #19
    d62a:	4b0f      	ldr	r3, [pc, #60]	; (d668 <sercom_set_gclk_generator+0x88>)
    d62c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    d62e:	4b0b      	ldr	r3, [pc, #44]	; (d65c <sercom_set_gclk_generator+0x7c>)
    d630:	1dfa      	adds	r2, r7, #7
    d632:	7812      	ldrb	r2, [r2, #0]
    d634:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    d636:	4b09      	ldr	r3, [pc, #36]	; (d65c <sercom_set_gclk_generator+0x7c>)
    d638:	2201      	movs	r2, #1
    d63a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    d63c:	2300      	movs	r3, #0
    d63e:	e008      	b.n	d652 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    d640:	4b06      	ldr	r3, [pc, #24]	; (d65c <sercom_set_gclk_generator+0x7c>)
    d642:	785b      	ldrb	r3, [r3, #1]
    d644:	1dfa      	adds	r2, r7, #7
    d646:	7812      	ldrb	r2, [r2, #0]
    d648:	429a      	cmp	r2, r3
    d64a:	d101      	bne.n	d650 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    d64c:	2300      	movs	r3, #0
    d64e:	e000      	b.n	d652 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    d650:	231d      	movs	r3, #29
}
    d652:	0018      	movs	r0, r3
    d654:	46bd      	mov	sp, r7
    d656:	b004      	add	sp, #16
    d658:	bd80      	pop	{r7, pc}
    d65a:	46c0      	nop			; (mov r8, r8)
    d65c:	200002a4 	.word	0x200002a4
    d660:	0000d2ad 	.word	0x0000d2ad
    d664:	0001350d 	.word	0x0001350d
    d668:	00013551 	.word	0x00013551

0000d66c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    d66c:	b580      	push	{r7, lr}
    d66e:	b082      	sub	sp, #8
    d670:	af00      	add	r7, sp, #0
    d672:	6078      	str	r0, [r7, #4]
    d674:	000a      	movs	r2, r1
    d676:	1cfb      	adds	r3, r7, #3
    d678:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	4a4d      	ldr	r2, [pc, #308]	; (d7b4 <_sercom_get_default_pad+0x148>)
    d67e:	4293      	cmp	r3, r2
    d680:	d03f      	beq.n	d702 <_sercom_get_default_pad+0x96>
    d682:	4a4c      	ldr	r2, [pc, #304]	; (d7b4 <_sercom_get_default_pad+0x148>)
    d684:	4293      	cmp	r3, r2
    d686:	d806      	bhi.n	d696 <_sercom_get_default_pad+0x2a>
    d688:	4a4b      	ldr	r2, [pc, #300]	; (d7b8 <_sercom_get_default_pad+0x14c>)
    d68a:	4293      	cmp	r3, r2
    d68c:	d00f      	beq.n	d6ae <_sercom_get_default_pad+0x42>
    d68e:	4a4b      	ldr	r2, [pc, #300]	; (d7bc <_sercom_get_default_pad+0x150>)
    d690:	4293      	cmp	r3, r2
    d692:	d021      	beq.n	d6d8 <_sercom_get_default_pad+0x6c>
    d694:	e089      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d696:	4a4a      	ldr	r2, [pc, #296]	; (d7c0 <_sercom_get_default_pad+0x154>)
    d698:	4293      	cmp	r3, r2
    d69a:	d100      	bne.n	d69e <_sercom_get_default_pad+0x32>
    d69c:	e05b      	b.n	d756 <_sercom_get_default_pad+0xea>
    d69e:	4a49      	ldr	r2, [pc, #292]	; (d7c4 <_sercom_get_default_pad+0x158>)
    d6a0:	4293      	cmp	r3, r2
    d6a2:	d100      	bne.n	d6a6 <_sercom_get_default_pad+0x3a>
    d6a4:	e06c      	b.n	d780 <_sercom_get_default_pad+0x114>
    d6a6:	4a48      	ldr	r2, [pc, #288]	; (d7c8 <_sercom_get_default_pad+0x15c>)
    d6a8:	4293      	cmp	r3, r2
    d6aa:	d03f      	beq.n	d72c <_sercom_get_default_pad+0xc0>
    d6ac:	e07d      	b.n	d7aa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d6ae:	1cfb      	adds	r3, r7, #3
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	2b01      	cmp	r3, #1
    d6b4:	d00a      	beq.n	d6cc <_sercom_get_default_pad+0x60>
    d6b6:	dc02      	bgt.n	d6be <_sercom_get_default_pad+0x52>
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d005      	beq.n	d6c8 <_sercom_get_default_pad+0x5c>
    d6bc:	e075      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d6be:	2b02      	cmp	r3, #2
    d6c0:	d006      	beq.n	d6d0 <_sercom_get_default_pad+0x64>
    d6c2:	2b03      	cmp	r3, #3
    d6c4:	d006      	beq.n	d6d4 <_sercom_get_default_pad+0x68>
    d6c6:	e070      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d6c8:	4b40      	ldr	r3, [pc, #256]	; (d7cc <_sercom_get_default_pad+0x160>)
    d6ca:	e06f      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6cc:	4b40      	ldr	r3, [pc, #256]	; (d7d0 <_sercom_get_default_pad+0x164>)
    d6ce:	e06d      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6d0:	4b40      	ldr	r3, [pc, #256]	; (d7d4 <_sercom_get_default_pad+0x168>)
    d6d2:	e06b      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6d4:	4b40      	ldr	r3, [pc, #256]	; (d7d8 <_sercom_get_default_pad+0x16c>)
    d6d6:	e069      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6d8:	1cfb      	adds	r3, r7, #3
    d6da:	781b      	ldrb	r3, [r3, #0]
    d6dc:	2b01      	cmp	r3, #1
    d6de:	d00a      	beq.n	d6f6 <_sercom_get_default_pad+0x8a>
    d6e0:	dc02      	bgt.n	d6e8 <_sercom_get_default_pad+0x7c>
    d6e2:	2b00      	cmp	r3, #0
    d6e4:	d005      	beq.n	d6f2 <_sercom_get_default_pad+0x86>
    d6e6:	e060      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d6e8:	2b02      	cmp	r3, #2
    d6ea:	d006      	beq.n	d6fa <_sercom_get_default_pad+0x8e>
    d6ec:	2b03      	cmp	r3, #3
    d6ee:	d006      	beq.n	d6fe <_sercom_get_default_pad+0x92>
    d6f0:	e05b      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d6f2:	2303      	movs	r3, #3
    d6f4:	e05a      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6f6:	4b39      	ldr	r3, [pc, #228]	; (d7dc <_sercom_get_default_pad+0x170>)
    d6f8:	e058      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6fa:	4b39      	ldr	r3, [pc, #228]	; (d7e0 <_sercom_get_default_pad+0x174>)
    d6fc:	e056      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d6fe:	4b39      	ldr	r3, [pc, #228]	; (d7e4 <_sercom_get_default_pad+0x178>)
    d700:	e054      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d702:	1cfb      	adds	r3, r7, #3
    d704:	781b      	ldrb	r3, [r3, #0]
    d706:	2b01      	cmp	r3, #1
    d708:	d00a      	beq.n	d720 <_sercom_get_default_pad+0xb4>
    d70a:	dc02      	bgt.n	d712 <_sercom_get_default_pad+0xa6>
    d70c:	2b00      	cmp	r3, #0
    d70e:	d005      	beq.n	d71c <_sercom_get_default_pad+0xb0>
    d710:	e04b      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d712:	2b02      	cmp	r3, #2
    d714:	d006      	beq.n	d724 <_sercom_get_default_pad+0xb8>
    d716:	2b03      	cmp	r3, #3
    d718:	d006      	beq.n	d728 <_sercom_get_default_pad+0xbc>
    d71a:	e046      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d71c:	4b32      	ldr	r3, [pc, #200]	; (d7e8 <_sercom_get_default_pad+0x17c>)
    d71e:	e045      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d720:	4b32      	ldr	r3, [pc, #200]	; (d7ec <_sercom_get_default_pad+0x180>)
    d722:	e043      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d724:	4b32      	ldr	r3, [pc, #200]	; (d7f0 <_sercom_get_default_pad+0x184>)
    d726:	e041      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d728:	4b32      	ldr	r3, [pc, #200]	; (d7f4 <_sercom_get_default_pad+0x188>)
    d72a:	e03f      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d72c:	1cfb      	adds	r3, r7, #3
    d72e:	781b      	ldrb	r3, [r3, #0]
    d730:	2b01      	cmp	r3, #1
    d732:	d00a      	beq.n	d74a <_sercom_get_default_pad+0xde>
    d734:	dc02      	bgt.n	d73c <_sercom_get_default_pad+0xd0>
    d736:	2b00      	cmp	r3, #0
    d738:	d005      	beq.n	d746 <_sercom_get_default_pad+0xda>
    d73a:	e036      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d73c:	2b02      	cmp	r3, #2
    d73e:	d006      	beq.n	d74e <_sercom_get_default_pad+0xe2>
    d740:	2b03      	cmp	r3, #3
    d742:	d006      	beq.n	d752 <_sercom_get_default_pad+0xe6>
    d744:	e031      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d746:	4b2c      	ldr	r3, [pc, #176]	; (d7f8 <_sercom_get_default_pad+0x18c>)
    d748:	e030      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d74a:	4b2c      	ldr	r3, [pc, #176]	; (d7fc <_sercom_get_default_pad+0x190>)
    d74c:	e02e      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d74e:	4b2c      	ldr	r3, [pc, #176]	; (d800 <_sercom_get_default_pad+0x194>)
    d750:	e02c      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d752:	4b2c      	ldr	r3, [pc, #176]	; (d804 <_sercom_get_default_pad+0x198>)
    d754:	e02a      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d756:	1cfb      	adds	r3, r7, #3
    d758:	781b      	ldrb	r3, [r3, #0]
    d75a:	2b01      	cmp	r3, #1
    d75c:	d00a      	beq.n	d774 <_sercom_get_default_pad+0x108>
    d75e:	dc02      	bgt.n	d766 <_sercom_get_default_pad+0xfa>
    d760:	2b00      	cmp	r3, #0
    d762:	d005      	beq.n	d770 <_sercom_get_default_pad+0x104>
    d764:	e021      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d766:	2b02      	cmp	r3, #2
    d768:	d006      	beq.n	d778 <_sercom_get_default_pad+0x10c>
    d76a:	2b03      	cmp	r3, #3
    d76c:	d006      	beq.n	d77c <_sercom_get_default_pad+0x110>
    d76e:	e01c      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d770:	4b25      	ldr	r3, [pc, #148]	; (d808 <_sercom_get_default_pad+0x19c>)
    d772:	e01b      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d774:	4b25      	ldr	r3, [pc, #148]	; (d80c <_sercom_get_default_pad+0x1a0>)
    d776:	e019      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d778:	4b25      	ldr	r3, [pc, #148]	; (d810 <_sercom_get_default_pad+0x1a4>)
    d77a:	e017      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d77c:	4b25      	ldr	r3, [pc, #148]	; (d814 <_sercom_get_default_pad+0x1a8>)
    d77e:	e015      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d780:	1cfb      	adds	r3, r7, #3
    d782:	781b      	ldrb	r3, [r3, #0]
    d784:	2b01      	cmp	r3, #1
    d786:	d00a      	beq.n	d79e <_sercom_get_default_pad+0x132>
    d788:	dc02      	bgt.n	d790 <_sercom_get_default_pad+0x124>
    d78a:	2b00      	cmp	r3, #0
    d78c:	d005      	beq.n	d79a <_sercom_get_default_pad+0x12e>
    d78e:	e00c      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d790:	2b02      	cmp	r3, #2
    d792:	d006      	beq.n	d7a2 <_sercom_get_default_pad+0x136>
    d794:	2b03      	cmp	r3, #3
    d796:	d006      	beq.n	d7a6 <_sercom_get_default_pad+0x13a>
    d798:	e007      	b.n	d7aa <_sercom_get_default_pad+0x13e>
    d79a:	4b1f      	ldr	r3, [pc, #124]	; (d818 <_sercom_get_default_pad+0x1ac>)
    d79c:	e006      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d79e:	4b1f      	ldr	r3, [pc, #124]	; (d81c <_sercom_get_default_pad+0x1b0>)
    d7a0:	e004      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d7a2:	4b1f      	ldr	r3, [pc, #124]	; (d820 <_sercom_get_default_pad+0x1b4>)
    d7a4:	e002      	b.n	d7ac <_sercom_get_default_pad+0x140>
    d7a6:	4b1f      	ldr	r3, [pc, #124]	; (d824 <_sercom_get_default_pad+0x1b8>)
    d7a8:	e000      	b.n	d7ac <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    d7aa:	2300      	movs	r3, #0
}
    d7ac:	0018      	movs	r0, r3
    d7ae:	46bd      	mov	sp, r7
    d7b0:	b002      	add	sp, #8
    d7b2:	bd80      	pop	{r7, pc}
    d7b4:	42001000 	.word	0x42001000
    d7b8:	42000800 	.word	0x42000800
    d7bc:	42000c00 	.word	0x42000c00
    d7c0:	42001800 	.word	0x42001800
    d7c4:	42001c00 	.word	0x42001c00
    d7c8:	42001400 	.word	0x42001400
    d7cc:	00040003 	.word	0x00040003
    d7d0:	00050003 	.word	0x00050003
    d7d4:	00060003 	.word	0x00060003
    d7d8:	00070003 	.word	0x00070003
    d7dc:	00010003 	.word	0x00010003
    d7e0:	001e0003 	.word	0x001e0003
    d7e4:	001f0003 	.word	0x001f0003
    d7e8:	00080003 	.word	0x00080003
    d7ec:	00090003 	.word	0x00090003
    d7f0:	000a0003 	.word	0x000a0003
    d7f4:	000b0003 	.word	0x000b0003
    d7f8:	00100003 	.word	0x00100003
    d7fc:	00110003 	.word	0x00110003
    d800:	00120003 	.word	0x00120003
    d804:	00130003 	.word	0x00130003
    d808:	000c0003 	.word	0x000c0003
    d80c:	000d0003 	.word	0x000d0003
    d810:	000e0003 	.word	0x000e0003
    d814:	000f0003 	.word	0x000f0003
    d818:	00160003 	.word	0x00160003
    d81c:	00170003 	.word	0x00170003
    d820:	00180003 	.word	0x00180003
    d824:	00190003 	.word	0x00190003

0000d828 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    d828:	b590      	push	{r4, r7, lr}
    d82a:	b08b      	sub	sp, #44	; 0x2c
    d82c:	af00      	add	r7, sp, #0
    d82e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    d830:	230c      	movs	r3, #12
    d832:	18fb      	adds	r3, r7, r3
    d834:	4a0f      	ldr	r2, [pc, #60]	; (d874 <_sercom_get_sercom_inst_index+0x4c>)
    d836:	ca13      	ldmia	r2!, {r0, r1, r4}
    d838:	c313      	stmia	r3!, {r0, r1, r4}
    d83a:	ca13      	ldmia	r2!, {r0, r1, r4}
    d83c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d83e:	2300      	movs	r3, #0
    d840:	627b      	str	r3, [r7, #36]	; 0x24
    d842:	e00e      	b.n	d862 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    d844:	230c      	movs	r3, #12
    d846:	18fb      	adds	r3, r7, r3
    d848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d84a:	0092      	lsls	r2, r2, #2
    d84c:	58d3      	ldr	r3, [r2, r3]
    d84e:	001a      	movs	r2, r3
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	429a      	cmp	r2, r3
    d854:	d102      	bne.n	d85c <_sercom_get_sercom_inst_index+0x34>
			return i;
    d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d858:	b2db      	uxtb	r3, r3
    d85a:	e006      	b.n	d86a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d85e:	3301      	adds	r3, #1
    d860:	627b      	str	r3, [r7, #36]	; 0x24
    d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d864:	2b05      	cmp	r3, #5
    d866:	d9ed      	bls.n	d844 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    d868:	2300      	movs	r3, #0
}
    d86a:	0018      	movs	r0, r3
    d86c:	46bd      	mov	sp, r7
    d86e:	b00b      	add	sp, #44	; 0x2c
    d870:	bd90      	pop	{r4, r7, pc}
    d872:	46c0      	nop			; (mov r8, r8)
    d874:	00019414 	.word	0x00019414

0000d878 <system_cpu_clock_get_hz>:
{
    d878:	b580      	push	{r7, lr}
    d87a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    d87c:	2000      	movs	r0, #0
    d87e:	4b05      	ldr	r3, [pc, #20]	; (d894 <system_cpu_clock_get_hz+0x1c>)
    d880:	4798      	blx	r3
    d882:	0002      	movs	r2, r0
    d884:	4b04      	ldr	r3, [pc, #16]	; (d898 <system_cpu_clock_get_hz+0x20>)
    d886:	7a1b      	ldrb	r3, [r3, #8]
    d888:	b2db      	uxtb	r3, r3
    d88a:	40da      	lsrs	r2, r3
    d88c:	0013      	movs	r3, r2
}
    d88e:	0018      	movs	r0, r3
    d890:	46bd      	mov	sp, r7
    d892:	bd80      	pop	{r7, pc}
    d894:	00013435 	.word	0x00013435
    d898:	40000400 	.word	0x40000400

0000d89c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    d89c:	b580      	push	{r7, lr}
    d89e:	b084      	sub	sp, #16
    d8a0:	af00      	add	r7, sp, #0
    d8a2:	60f8      	str	r0, [r7, #12]
    d8a4:	60b9      	str	r1, [r7, #8]
    d8a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    d8a8:	68fb      	ldr	r3, [r7, #12]
    d8aa:	3b04      	subs	r3, #4
    d8ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    d8ae:	68fb      	ldr	r3, [r7, #12]
    d8b0:	2280      	movs	r2, #128	; 0x80
    d8b2:	0452      	lsls	r2, r2, #17
    d8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    d8b6:	68fb      	ldr	r3, [r7, #12]
    d8b8:	3b04      	subs	r3, #4
    d8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    d8bc:	68ba      	ldr	r2, [r7, #8]
    d8be:	68fb      	ldr	r3, [r7, #12]
    d8c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    d8c2:	68fb      	ldr	r3, [r7, #12]
    d8c4:	3b04      	subs	r3, #4
    d8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    d8c8:	4a08      	ldr	r2, [pc, #32]	; (d8ec <pxPortInitialiseStack+0x50>)
    d8ca:	68fb      	ldr	r3, [r7, #12]
    d8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    d8ce:	68fb      	ldr	r3, [r7, #12]
    d8d0:	3b14      	subs	r3, #20
    d8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    d8d4:	687a      	ldr	r2, [r7, #4]
    d8d6:	68fb      	ldr	r3, [r7, #12]
    d8d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    d8da:	68fb      	ldr	r3, [r7, #12]
    d8dc:	3b20      	subs	r3, #32
    d8de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    d8e0:	68fb      	ldr	r3, [r7, #12]
}
    d8e2:	0018      	movs	r0, r3
    d8e4:	46bd      	mov	sp, r7
    d8e6:	b004      	add	sp, #16
    d8e8:	bd80      	pop	{r7, pc}
    d8ea:	46c0      	nop			; (mov r8, r8)
    d8ec:	0000d8f1 	.word	0x0000d8f1

0000d8f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    d8f0:	b580      	push	{r7, lr}
    d8f2:	b082      	sub	sp, #8
    d8f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    d8f6:	2300      	movs	r3, #0
    d8f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    d8fa:	4b07      	ldr	r3, [pc, #28]	; (d918 <prvTaskExitError+0x28>)
    d8fc:	681b      	ldr	r3, [r3, #0]
    d8fe:	3301      	adds	r3, #1
    d900:	d001      	beq.n	d906 <prvTaskExitError+0x16>
    d902:	b672      	cpsid	i
    d904:	e7fe      	b.n	d904 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    d906:	b672      	cpsid	i
	while( ulDummy == 0 )
    d908:	46c0      	nop			; (mov r8, r8)
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	2b00      	cmp	r3, #0
    d90e:	d0fc      	beq.n	d90a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    d910:	46c0      	nop			; (mov r8, r8)
    d912:	46bd      	mov	sp, r7
    d914:	b002      	add	sp, #8
    d916:	bd80      	pop	{r7, pc}
    d918:	20000010 	.word	0x20000010

0000d91c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    d91c:	b580      	push	{r7, lr}
    d91e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    d920:	46c0      	nop			; (mov r8, r8)
    d922:	46bd      	mov	sp, r7
    d924:	bd80      	pop	{r7, pc}
	...

0000d930 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    d930:	4a0b      	ldr	r2, [pc, #44]	; (d960 <pxCurrentTCBConst2>)
    d932:	6813      	ldr	r3, [r2, #0]
    d934:	6818      	ldr	r0, [r3, #0]
    d936:	3020      	adds	r0, #32
    d938:	f380 8809 	msr	PSP, r0
    d93c:	2002      	movs	r0, #2
    d93e:	f380 8814 	msr	CONTROL, r0
    d942:	f3bf 8f6f 	isb	sy
    d946:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    d948:	46ae      	mov	lr, r5
    d94a:	bc08      	pop	{r3}
    d94c:	bc04      	pop	{r2}
    d94e:	b662      	cpsie	i
    d950:	4718      	bx	r3
    d952:	46c0      	nop			; (mov r8, r8)
    d954:	46c0      	nop			; (mov r8, r8)
    d956:	46c0      	nop			; (mov r8, r8)
    d958:	46c0      	nop			; (mov r8, r8)
    d95a:	46c0      	nop			; (mov r8, r8)
    d95c:	46c0      	nop			; (mov r8, r8)
    d95e:	46c0      	nop			; (mov r8, r8)

0000d960 <pxCurrentTCBConst2>:
    d960:	200002a8 	.word	0x200002a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    d964:	46c0      	nop			; (mov r8, r8)
    d966:	46c0      	nop			; (mov r8, r8)

0000d968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    d968:	b580      	push	{r7, lr}
    d96a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    d96c:	4b0e      	ldr	r3, [pc, #56]	; (d9a8 <xPortStartScheduler+0x40>)
    d96e:	4a0e      	ldr	r2, [pc, #56]	; (d9a8 <xPortStartScheduler+0x40>)
    d970:	6812      	ldr	r2, [r2, #0]
    d972:	21ff      	movs	r1, #255	; 0xff
    d974:	0409      	lsls	r1, r1, #16
    d976:	430a      	orrs	r2, r1
    d978:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    d97a:	4b0b      	ldr	r3, [pc, #44]	; (d9a8 <xPortStartScheduler+0x40>)
    d97c:	4a0a      	ldr	r2, [pc, #40]	; (d9a8 <xPortStartScheduler+0x40>)
    d97e:	6812      	ldr	r2, [r2, #0]
    d980:	21ff      	movs	r1, #255	; 0xff
    d982:	0609      	lsls	r1, r1, #24
    d984:	430a      	orrs	r2, r1
    d986:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    d988:	4b08      	ldr	r3, [pc, #32]	; (d9ac <xPortStartScheduler+0x44>)
    d98a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    d98c:	4b08      	ldr	r3, [pc, #32]	; (d9b0 <xPortStartScheduler+0x48>)
    d98e:	2200      	movs	r2, #0
    d990:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    d992:	4b08      	ldr	r3, [pc, #32]	; (d9b4 <xPortStartScheduler+0x4c>)
    d994:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    d996:	4b08      	ldr	r3, [pc, #32]	; (d9b8 <xPortStartScheduler+0x50>)
    d998:	4798      	blx	r3
	prvTaskExitError();
    d99a:	4b08      	ldr	r3, [pc, #32]	; (d9bc <xPortStartScheduler+0x54>)
    d99c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    d99e:	2300      	movs	r3, #0
}
    d9a0:	0018      	movs	r0, r3
    d9a2:	46bd      	mov	sp, r7
    d9a4:	bd80      	pop	{r7, pc}
    d9a6:	46c0      	nop			; (mov r8, r8)
    d9a8:	e000ed20 	.word	0xe000ed20
    d9ac:	0000dad9 	.word	0x0000dad9
    d9b0:	20000010 	.word	0x20000010
    d9b4:	0000d931 	.word	0x0000d931
    d9b8:	0000f0ed 	.word	0x0000f0ed
    d9bc:	0000d8f1 	.word	0x0000d8f1

0000d9c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    d9c0:	b580      	push	{r7, lr}
    d9c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    d9c4:	4b05      	ldr	r3, [pc, #20]	; (d9dc <vPortYield+0x1c>)
    d9c6:	2280      	movs	r2, #128	; 0x80
    d9c8:	0552      	lsls	r2, r2, #21
    d9ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    d9cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    d9d0:	f3bf 8f6f 	isb	sy
}
    d9d4:	46c0      	nop			; (mov r8, r8)
    d9d6:	46bd      	mov	sp, r7
    d9d8:	bd80      	pop	{r7, pc}
    d9da:	46c0      	nop			; (mov r8, r8)
    d9dc:	e000ed04 	.word	0xe000ed04

0000d9e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    d9e0:	b580      	push	{r7, lr}
    d9e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    d9e4:	b672      	cpsid	i
    uxCriticalNesting++;
    d9e6:	4b06      	ldr	r3, [pc, #24]	; (da00 <vPortEnterCritical+0x20>)
    d9e8:	681b      	ldr	r3, [r3, #0]
    d9ea:	1c5a      	adds	r2, r3, #1
    d9ec:	4b04      	ldr	r3, [pc, #16]	; (da00 <vPortEnterCritical+0x20>)
    d9ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    d9f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    d9f4:	f3bf 8f6f 	isb	sy
}
    d9f8:	46c0      	nop			; (mov r8, r8)
    d9fa:	46bd      	mov	sp, r7
    d9fc:	bd80      	pop	{r7, pc}
    d9fe:	46c0      	nop			; (mov r8, r8)
    da00:	20000010 	.word	0x20000010

0000da04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    da04:	b580      	push	{r7, lr}
    da06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    da08:	4b09      	ldr	r3, [pc, #36]	; (da30 <vPortExitCritical+0x2c>)
    da0a:	681b      	ldr	r3, [r3, #0]
    da0c:	2b00      	cmp	r3, #0
    da0e:	d101      	bne.n	da14 <vPortExitCritical+0x10>
    da10:	b672      	cpsid	i
    da12:	e7fe      	b.n	da12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    da14:	4b06      	ldr	r3, [pc, #24]	; (da30 <vPortExitCritical+0x2c>)
    da16:	681b      	ldr	r3, [r3, #0]
    da18:	1e5a      	subs	r2, r3, #1
    da1a:	4b05      	ldr	r3, [pc, #20]	; (da30 <vPortExitCritical+0x2c>)
    da1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    da1e:	4b04      	ldr	r3, [pc, #16]	; (da30 <vPortExitCritical+0x2c>)
    da20:	681b      	ldr	r3, [r3, #0]
    da22:	2b00      	cmp	r3, #0
    da24:	d100      	bne.n	da28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    da26:	b662      	cpsie	i
    }
}
    da28:	46c0      	nop			; (mov r8, r8)
    da2a:	46bd      	mov	sp, r7
    da2c:	bd80      	pop	{r7, pc}
    da2e:	46c0      	nop			; (mov r8, r8)
    da30:	20000010 	.word	0x20000010

0000da34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    da34:	f3ef 8010 	mrs	r0, PRIMASK
    da38:	b672      	cpsid	i
    da3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    da3c:	46c0      	nop			; (mov r8, r8)
    da3e:	0018      	movs	r0, r3

0000da40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    da40:	f380 8810 	msr	PRIMASK, r0
    da44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    da46:	46c0      	nop			; (mov r8, r8)
	...

0000da50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    da50:	f3ef 8009 	mrs	r0, PSP
    da54:	4b0e      	ldr	r3, [pc, #56]	; (da90 <pxCurrentTCBConst>)
    da56:	681a      	ldr	r2, [r3, #0]
    da58:	3820      	subs	r0, #32
    da5a:	6010      	str	r0, [r2, #0]
    da5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    da5e:	4644      	mov	r4, r8
    da60:	464d      	mov	r5, r9
    da62:	4656      	mov	r6, sl
    da64:	465f      	mov	r7, fp
    da66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    da68:	b508      	push	{r3, lr}
    da6a:	b672      	cpsid	i
    da6c:	f001 fb3e 	bl	f0ec <vTaskSwitchContext>
    da70:	b662      	cpsie	i
    da72:	bc0c      	pop	{r2, r3}
    da74:	6811      	ldr	r1, [r2, #0]
    da76:	6808      	ldr	r0, [r1, #0]
    da78:	3010      	adds	r0, #16
    da7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    da7c:	46a0      	mov	r8, r4
    da7e:	46a9      	mov	r9, r5
    da80:	46b2      	mov	sl, r6
    da82:	46bb      	mov	fp, r7
    da84:	f380 8809 	msr	PSP, r0
    da88:	3820      	subs	r0, #32
    da8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    da8c:	4718      	bx	r3
    da8e:	46c0      	nop			; (mov r8, r8)

0000da90 <pxCurrentTCBConst>:
    da90:	200002a8 	.word	0x200002a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    da94:	46c0      	nop			; (mov r8, r8)
    da96:	46c0      	nop			; (mov r8, r8)

0000da98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    da98:	b580      	push	{r7, lr}
    da9a:	b082      	sub	sp, #8
    da9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    da9e:	4b0a      	ldr	r3, [pc, #40]	; (dac8 <SysTick_Handler+0x30>)
    daa0:	4798      	blx	r3
    daa2:	0003      	movs	r3, r0
    daa4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    daa6:	4b09      	ldr	r3, [pc, #36]	; (dacc <SysTick_Handler+0x34>)
    daa8:	4798      	blx	r3
    daaa:	1e03      	subs	r3, r0, #0
    daac:	d003      	beq.n	dab6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    daae:	4b08      	ldr	r3, [pc, #32]	; (dad0 <SysTick_Handler+0x38>)
    dab0:	2280      	movs	r2, #128	; 0x80
    dab2:	0552      	lsls	r2, r2, #21
    dab4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    dab6:	687b      	ldr	r3, [r7, #4]
    dab8:	0018      	movs	r0, r3
    daba:	4b06      	ldr	r3, [pc, #24]	; (dad4 <SysTick_Handler+0x3c>)
    dabc:	4798      	blx	r3
}
    dabe:	46c0      	nop			; (mov r8, r8)
    dac0:	46bd      	mov	sp, r7
    dac2:	b002      	add	sp, #8
    dac4:	bd80      	pop	{r7, pc}
    dac6:	46c0      	nop			; (mov r8, r8)
    dac8:	0000da35 	.word	0x0000da35
    dacc:	0000ef79 	.word	0x0000ef79
    dad0:	e000ed04 	.word	0xe000ed04
    dad4:	0000da41 	.word	0x0000da41

0000dad8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    dad8:	b5b0      	push	{r4, r5, r7, lr}
    dada:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    dadc:	4b0a      	ldr	r3, [pc, #40]	; (db08 <prvSetupTimerInterrupt+0x30>)
    dade:	2200      	movs	r2, #0
    dae0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    dae2:	4b0a      	ldr	r3, [pc, #40]	; (db0c <prvSetupTimerInterrupt+0x34>)
    dae4:	2200      	movs	r2, #0
    dae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    dae8:	4c09      	ldr	r4, [pc, #36]	; (db10 <prvSetupTimerInterrupt+0x38>)
    daea:	4b0a      	ldr	r3, [pc, #40]	; (db14 <prvSetupTimerInterrupt+0x3c>)
    daec:	4798      	blx	r3
    daee:	4b0a      	ldr	r3, [pc, #40]	; (db18 <prvSetupTimerInterrupt+0x40>)
    daf0:	22fa      	movs	r2, #250	; 0xfa
    daf2:	0091      	lsls	r1, r2, #2
    daf4:	4798      	blx	r3
    daf6:	0003      	movs	r3, r0
    daf8:	3b01      	subs	r3, #1
    dafa:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    dafc:	4b02      	ldr	r3, [pc, #8]	; (db08 <prvSetupTimerInterrupt+0x30>)
    dafe:	2207      	movs	r2, #7
    db00:	601a      	str	r2, [r3, #0]
}
    db02:	46c0      	nop			; (mov r8, r8)
    db04:	46bd      	mov	sp, r7
    db06:	bdb0      	pop	{r4, r5, r7, pc}
    db08:	e000e010 	.word	0xe000e010
    db0c:	e000e018 	.word	0xe000e018
    db10:	e000e014 	.word	0xe000e014
    db14:	0000d879 	.word	0x0000d879
    db18:	00015041 	.word	0x00015041

0000db1c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    db1c:	b580      	push	{r7, lr}
    db1e:	b084      	sub	sp, #16
    db20:	af00      	add	r7, sp, #0
    db22:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    db24:	4b07      	ldr	r3, [pc, #28]	; (db44 <pvPortMalloc+0x28>)
    db26:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
    db28:	687b      	ldr	r3, [r7, #4]
    db2a:	0018      	movs	r0, r3
    db2c:	4b06      	ldr	r3, [pc, #24]	; (db48 <pvPortMalloc+0x2c>)
    db2e:	4798      	blx	r3
    db30:	0003      	movs	r3, r0
    db32:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    db34:	4b05      	ldr	r3, [pc, #20]	; (db4c <pvPortMalloc+0x30>)
    db36:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    db38:	68fb      	ldr	r3, [r7, #12]
}
    db3a:	0018      	movs	r0, r3
    db3c:	46bd      	mov	sp, r7
    db3e:	b004      	add	sp, #16
    db40:	bd80      	pop	{r7, pc}
    db42:	46c0      	nop			; (mov r8, r8)
    db44:	0000ee11 	.word	0x0000ee11
    db48:	00017835 	.word	0x00017835
    db4c:	0000ee29 	.word	0x0000ee29

0000db50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    db50:	b580      	push	{r7, lr}
    db52:	b082      	sub	sp, #8
    db54:	af00      	add	r7, sp, #0
    db56:	6078      	str	r0, [r7, #4]
	if( pv )
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	2b00      	cmp	r3, #0
    db5c:	d007      	beq.n	db6e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
    db5e:	4b06      	ldr	r3, [pc, #24]	; (db78 <vPortFree+0x28>)
    db60:	4798      	blx	r3
		{
			free( pv );
    db62:	687b      	ldr	r3, [r7, #4]
    db64:	0018      	movs	r0, r3
    db66:	4b05      	ldr	r3, [pc, #20]	; (db7c <vPortFree+0x2c>)
    db68:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    db6a:	4b05      	ldr	r3, [pc, #20]	; (db80 <vPortFree+0x30>)
    db6c:	4798      	blx	r3
	}
}
    db6e:	46c0      	nop			; (mov r8, r8)
    db70:	46bd      	mov	sp, r7
    db72:	b002      	add	sp, #8
    db74:	bd80      	pop	{r7, pc}
    db76:	46c0      	nop			; (mov r8, r8)
    db78:	0000ee11 	.word	0x0000ee11
    db7c:	00017849 	.word	0x00017849
    db80:	0000ee29 	.word	0x0000ee29

0000db84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    db84:	b580      	push	{r7, lr}
    db86:	b082      	sub	sp, #8
    db88:	af00      	add	r7, sp, #0
    db8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    db8c:	687b      	ldr	r3, [r7, #4]
    db8e:	3308      	adds	r3, #8
    db90:	001a      	movs	r2, r3
    db92:	687b      	ldr	r3, [r7, #4]
    db94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	2201      	movs	r2, #1
    db9a:	4252      	negs	r2, r2
    db9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    db9e:	687b      	ldr	r3, [r7, #4]
    dba0:	3308      	adds	r3, #8
    dba2:	001a      	movs	r2, r3
    dba4:	687b      	ldr	r3, [r7, #4]
    dba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dba8:	687b      	ldr	r3, [r7, #4]
    dbaa:	3308      	adds	r3, #8
    dbac:	001a      	movs	r2, r3
    dbae:	687b      	ldr	r3, [r7, #4]
    dbb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    dbb2:	687b      	ldr	r3, [r7, #4]
    dbb4:	2200      	movs	r2, #0
    dbb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    dbb8:	46c0      	nop			; (mov r8, r8)
    dbba:	46bd      	mov	sp, r7
    dbbc:	b002      	add	sp, #8
    dbbe:	bd80      	pop	{r7, pc}

0000dbc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    dbc0:	b580      	push	{r7, lr}
    dbc2:	b082      	sub	sp, #8
    dbc4:	af00      	add	r7, sp, #0
    dbc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    dbc8:	687b      	ldr	r3, [r7, #4]
    dbca:	2200      	movs	r2, #0
    dbcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    dbce:	46c0      	nop			; (mov r8, r8)
    dbd0:	46bd      	mov	sp, r7
    dbd2:	b002      	add	sp, #8
    dbd4:	bd80      	pop	{r7, pc}

0000dbd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    dbd6:	b580      	push	{r7, lr}
    dbd8:	b084      	sub	sp, #16
    dbda:	af00      	add	r7, sp, #0
    dbdc:	6078      	str	r0, [r7, #4]
    dbde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	685b      	ldr	r3, [r3, #4]
    dbe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    dbe6:	683b      	ldr	r3, [r7, #0]
    dbe8:	68fa      	ldr	r2, [r7, #12]
    dbea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    dbec:	68fb      	ldr	r3, [r7, #12]
    dbee:	689a      	ldr	r2, [r3, #8]
    dbf0:	683b      	ldr	r3, [r7, #0]
    dbf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    dbf4:	68fb      	ldr	r3, [r7, #12]
    dbf6:	689b      	ldr	r3, [r3, #8]
    dbf8:	683a      	ldr	r2, [r7, #0]
    dbfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    dbfc:	68fb      	ldr	r3, [r7, #12]
    dbfe:	683a      	ldr	r2, [r7, #0]
    dc00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    dc02:	683b      	ldr	r3, [r7, #0]
    dc04:	687a      	ldr	r2, [r7, #4]
    dc06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    dc08:	687b      	ldr	r3, [r7, #4]
    dc0a:	681b      	ldr	r3, [r3, #0]
    dc0c:	1c5a      	adds	r2, r3, #1
    dc0e:	687b      	ldr	r3, [r7, #4]
    dc10:	601a      	str	r2, [r3, #0]
}
    dc12:	46c0      	nop			; (mov r8, r8)
    dc14:	46bd      	mov	sp, r7
    dc16:	b004      	add	sp, #16
    dc18:	bd80      	pop	{r7, pc}

0000dc1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    dc1a:	b580      	push	{r7, lr}
    dc1c:	b084      	sub	sp, #16
    dc1e:	af00      	add	r7, sp, #0
    dc20:	6078      	str	r0, [r7, #4]
    dc22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    dc24:	683b      	ldr	r3, [r7, #0]
    dc26:	681b      	ldr	r3, [r3, #0]
    dc28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    dc2a:	68bb      	ldr	r3, [r7, #8]
    dc2c:	3301      	adds	r3, #1
    dc2e:	d103      	bne.n	dc38 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    dc30:	687b      	ldr	r3, [r7, #4]
    dc32:	691b      	ldr	r3, [r3, #16]
    dc34:	60fb      	str	r3, [r7, #12]
    dc36:	e00c      	b.n	dc52 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dc38:	687b      	ldr	r3, [r7, #4]
    dc3a:	3308      	adds	r3, #8
    dc3c:	60fb      	str	r3, [r7, #12]
    dc3e:	e002      	b.n	dc46 <vListInsert+0x2c>
    dc40:	68fb      	ldr	r3, [r7, #12]
    dc42:	685b      	ldr	r3, [r3, #4]
    dc44:	60fb      	str	r3, [r7, #12]
    dc46:	68fb      	ldr	r3, [r7, #12]
    dc48:	685b      	ldr	r3, [r3, #4]
    dc4a:	681a      	ldr	r2, [r3, #0]
    dc4c:	68bb      	ldr	r3, [r7, #8]
    dc4e:	429a      	cmp	r2, r3
    dc50:	d9f6      	bls.n	dc40 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    dc52:	68fb      	ldr	r3, [r7, #12]
    dc54:	685a      	ldr	r2, [r3, #4]
    dc56:	683b      	ldr	r3, [r7, #0]
    dc58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    dc5a:	683b      	ldr	r3, [r7, #0]
    dc5c:	685b      	ldr	r3, [r3, #4]
    dc5e:	683a      	ldr	r2, [r7, #0]
    dc60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    dc62:	683b      	ldr	r3, [r7, #0]
    dc64:	68fa      	ldr	r2, [r7, #12]
    dc66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    dc68:	68fb      	ldr	r3, [r7, #12]
    dc6a:	683a      	ldr	r2, [r7, #0]
    dc6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    dc6e:	683b      	ldr	r3, [r7, #0]
    dc70:	687a      	ldr	r2, [r7, #4]
    dc72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	681b      	ldr	r3, [r3, #0]
    dc78:	1c5a      	adds	r2, r3, #1
    dc7a:	687b      	ldr	r3, [r7, #4]
    dc7c:	601a      	str	r2, [r3, #0]
}
    dc7e:	46c0      	nop			; (mov r8, r8)
    dc80:	46bd      	mov	sp, r7
    dc82:	b004      	add	sp, #16
    dc84:	bd80      	pop	{r7, pc}

0000dc86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    dc86:	b580      	push	{r7, lr}
    dc88:	b084      	sub	sp, #16
    dc8a:	af00      	add	r7, sp, #0
    dc8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    dc8e:	687b      	ldr	r3, [r7, #4]
    dc90:	691b      	ldr	r3, [r3, #16]
    dc92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    dc94:	687b      	ldr	r3, [r7, #4]
    dc96:	685b      	ldr	r3, [r3, #4]
    dc98:	687a      	ldr	r2, [r7, #4]
    dc9a:	6892      	ldr	r2, [r2, #8]
    dc9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    dc9e:	687b      	ldr	r3, [r7, #4]
    dca0:	689b      	ldr	r3, [r3, #8]
    dca2:	687a      	ldr	r2, [r7, #4]
    dca4:	6852      	ldr	r2, [r2, #4]
    dca6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    dca8:	68fb      	ldr	r3, [r7, #12]
    dcaa:	685a      	ldr	r2, [r3, #4]
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	429a      	cmp	r2, r3
    dcb0:	d103      	bne.n	dcba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	689a      	ldr	r2, [r3, #8]
    dcb6:	68fb      	ldr	r3, [r7, #12]
    dcb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    dcba:	687b      	ldr	r3, [r7, #4]
    dcbc:	2200      	movs	r2, #0
    dcbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    dcc0:	68fb      	ldr	r3, [r7, #12]
    dcc2:	681b      	ldr	r3, [r3, #0]
    dcc4:	1e5a      	subs	r2, r3, #1
    dcc6:	68fb      	ldr	r3, [r7, #12]
    dcc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    dcca:	68fb      	ldr	r3, [r7, #12]
    dccc:	681b      	ldr	r3, [r3, #0]
}
    dcce:	0018      	movs	r0, r3
    dcd0:	46bd      	mov	sp, r7
    dcd2:	b004      	add	sp, #16
    dcd4:	bd80      	pop	{r7, pc}
	...

0000dcd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    dcd8:	b580      	push	{r7, lr}
    dcda:	b084      	sub	sp, #16
    dcdc:	af00      	add	r7, sp, #0
    dcde:	6078      	str	r0, [r7, #4]
    dce0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    dce6:	68fb      	ldr	r3, [r7, #12]
    dce8:	2b00      	cmp	r3, #0
    dcea:	d101      	bne.n	dcf0 <xQueueGenericReset+0x18>
    dcec:	b672      	cpsid	i
    dcee:	e7fe      	b.n	dcee <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    dcf0:	4b23      	ldr	r3, [pc, #140]	; (dd80 <xQueueGenericReset+0xa8>)
    dcf2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    dcf4:	68fb      	ldr	r3, [r7, #12]
    dcf6:	681a      	ldr	r2, [r3, #0]
    dcf8:	68fb      	ldr	r3, [r7, #12]
    dcfa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    dcfc:	68fb      	ldr	r3, [r7, #12]
    dcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dd00:	434b      	muls	r3, r1
    dd02:	18d2      	adds	r2, r2, r3
    dd04:	68fb      	ldr	r3, [r7, #12]
    dd06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    dd08:	68fb      	ldr	r3, [r7, #12]
    dd0a:	2200      	movs	r2, #0
    dd0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    dd0e:	68fb      	ldr	r3, [r7, #12]
    dd10:	681a      	ldr	r2, [r3, #0]
    dd12:	68fb      	ldr	r3, [r7, #12]
    dd14:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    dd16:	68fb      	ldr	r3, [r7, #12]
    dd18:	681a      	ldr	r2, [r3, #0]
    dd1a:	68fb      	ldr	r3, [r7, #12]
    dd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    dd1e:	1e59      	subs	r1, r3, #1
    dd20:	68fb      	ldr	r3, [r7, #12]
    dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dd24:	434b      	muls	r3, r1
    dd26:	18d2      	adds	r2, r2, r3
    dd28:	68fb      	ldr	r3, [r7, #12]
    dd2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    dd2c:	68fb      	ldr	r3, [r7, #12]
    dd2e:	2244      	movs	r2, #68	; 0x44
    dd30:	21ff      	movs	r1, #255	; 0xff
    dd32:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    dd34:	68fb      	ldr	r3, [r7, #12]
    dd36:	2245      	movs	r2, #69	; 0x45
    dd38:	21ff      	movs	r1, #255	; 0xff
    dd3a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    dd3c:	683b      	ldr	r3, [r7, #0]
    dd3e:	2b00      	cmp	r3, #0
    dd40:	d10d      	bne.n	dd5e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	691b      	ldr	r3, [r3, #16]
    dd46:	2b00      	cmp	r3, #0
    dd48:	d013      	beq.n	dd72 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    dd4a:	68fb      	ldr	r3, [r7, #12]
    dd4c:	3310      	adds	r3, #16
    dd4e:	0018      	movs	r0, r3
    dd50:	4b0c      	ldr	r3, [pc, #48]	; (dd84 <xQueueGenericReset+0xac>)
    dd52:	4798      	blx	r3
    dd54:	1e03      	subs	r3, r0, #0
    dd56:	d00c      	beq.n	dd72 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    dd58:	4b0b      	ldr	r3, [pc, #44]	; (dd88 <xQueueGenericReset+0xb0>)
    dd5a:	4798      	blx	r3
    dd5c:	e009      	b.n	dd72 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    dd5e:	68fb      	ldr	r3, [r7, #12]
    dd60:	3310      	adds	r3, #16
    dd62:	0018      	movs	r0, r3
    dd64:	4b09      	ldr	r3, [pc, #36]	; (dd8c <xQueueGenericReset+0xb4>)
    dd66:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    dd68:	68fb      	ldr	r3, [r7, #12]
    dd6a:	3324      	adds	r3, #36	; 0x24
    dd6c:	0018      	movs	r0, r3
    dd6e:	4b07      	ldr	r3, [pc, #28]	; (dd8c <xQueueGenericReset+0xb4>)
    dd70:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    dd72:	4b07      	ldr	r3, [pc, #28]	; (dd90 <xQueueGenericReset+0xb8>)
    dd74:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    dd76:	2301      	movs	r3, #1
}
    dd78:	0018      	movs	r0, r3
    dd7a:	46bd      	mov	sp, r7
    dd7c:	b004      	add	sp, #16
    dd7e:	bd80      	pop	{r7, pc}
    dd80:	0000d9e1 	.word	0x0000d9e1
    dd84:	0000f229 	.word	0x0000f229
    dd88:	0000d9c1 	.word	0x0000d9c1
    dd8c:	0000db85 	.word	0x0000db85
    dd90:	0000da05 	.word	0x0000da05

0000dd94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    dd94:	b590      	push	{r4, r7, lr}
    dd96:	b08b      	sub	sp, #44	; 0x2c
    dd98:	af02      	add	r7, sp, #8
    dd9a:	60f8      	str	r0, [r7, #12]
    dd9c:	60b9      	str	r1, [r7, #8]
    dd9e:	1dfb      	adds	r3, r7, #7
    dda0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    dda2:	68fb      	ldr	r3, [r7, #12]
    dda4:	2b00      	cmp	r3, #0
    dda6:	d101      	bne.n	ddac <xQueueGenericCreate+0x18>
    dda8:	b672      	cpsid	i
    ddaa:	e7fe      	b.n	ddaa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    ddac:	68bb      	ldr	r3, [r7, #8]
    ddae:	2b00      	cmp	r3, #0
    ddb0:	d102      	bne.n	ddb8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    ddb2:	2300      	movs	r3, #0
    ddb4:	61fb      	str	r3, [r7, #28]
    ddb6:	e003      	b.n	ddc0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ddb8:	68fb      	ldr	r3, [r7, #12]
    ddba:	68ba      	ldr	r2, [r7, #8]
    ddbc:	4353      	muls	r3, r2
    ddbe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    ddc0:	69fb      	ldr	r3, [r7, #28]
    ddc2:	334c      	adds	r3, #76	; 0x4c
    ddc4:	0018      	movs	r0, r3
    ddc6:	4b0c      	ldr	r3, [pc, #48]	; (ddf8 <xQueueGenericCreate+0x64>)
    ddc8:	4798      	blx	r3
    ddca:	0003      	movs	r3, r0
    ddcc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    ddce:	69bb      	ldr	r3, [r7, #24]
    ddd0:	2b00      	cmp	r3, #0
    ddd2:	d00c      	beq.n	ddee <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    ddd4:	69bb      	ldr	r3, [r7, #24]
    ddd6:	334c      	adds	r3, #76	; 0x4c
    ddd8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    ddda:	1dfb      	adds	r3, r7, #7
    dddc:	781c      	ldrb	r4, [r3, #0]
    ddde:	697a      	ldr	r2, [r7, #20]
    dde0:	68b9      	ldr	r1, [r7, #8]
    dde2:	68f8      	ldr	r0, [r7, #12]
    dde4:	69bb      	ldr	r3, [r7, #24]
    dde6:	9300      	str	r3, [sp, #0]
    dde8:	0023      	movs	r3, r4
    ddea:	4c04      	ldr	r4, [pc, #16]	; (ddfc <xQueueGenericCreate+0x68>)
    ddec:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    ddee:	69bb      	ldr	r3, [r7, #24]
	}
    ddf0:	0018      	movs	r0, r3
    ddf2:	46bd      	mov	sp, r7
    ddf4:	b009      	add	sp, #36	; 0x24
    ddf6:	bd90      	pop	{r4, r7, pc}
    ddf8:	0000db1d 	.word	0x0000db1d
    ddfc:	0000de01 	.word	0x0000de01

0000de00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    de00:	b580      	push	{r7, lr}
    de02:	b084      	sub	sp, #16
    de04:	af00      	add	r7, sp, #0
    de06:	60f8      	str	r0, [r7, #12]
    de08:	60b9      	str	r1, [r7, #8]
    de0a:	607a      	str	r2, [r7, #4]
    de0c:	001a      	movs	r2, r3
    de0e:	1cfb      	adds	r3, r7, #3
    de10:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    de12:	68bb      	ldr	r3, [r7, #8]
    de14:	2b00      	cmp	r3, #0
    de16:	d103      	bne.n	de20 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    de18:	69bb      	ldr	r3, [r7, #24]
    de1a:	69ba      	ldr	r2, [r7, #24]
    de1c:	601a      	str	r2, [r3, #0]
    de1e:	e002      	b.n	de26 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    de20:	69bb      	ldr	r3, [r7, #24]
    de22:	687a      	ldr	r2, [r7, #4]
    de24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    de26:	69bb      	ldr	r3, [r7, #24]
    de28:	68fa      	ldr	r2, [r7, #12]
    de2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    de2c:	69bb      	ldr	r3, [r7, #24]
    de2e:	68ba      	ldr	r2, [r7, #8]
    de30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    de32:	69bb      	ldr	r3, [r7, #24]
    de34:	2101      	movs	r1, #1
    de36:	0018      	movs	r0, r3
    de38:	4b04      	ldr	r3, [pc, #16]	; (de4c <prvInitialiseNewQueue+0x4c>)
    de3a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    de3c:	69bb      	ldr	r3, [r7, #24]
    de3e:	2200      	movs	r2, #0
    de40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    de42:	46c0      	nop			; (mov r8, r8)
    de44:	46bd      	mov	sp, r7
    de46:	b004      	add	sp, #16
    de48:	bd80      	pop	{r7, pc}
    de4a:	46c0      	nop			; (mov r8, r8)
    de4c:	0000dcd9 	.word	0x0000dcd9

0000de50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    de50:	b580      	push	{r7, lr}
    de52:	b08a      	sub	sp, #40	; 0x28
    de54:	af00      	add	r7, sp, #0
    de56:	60f8      	str	r0, [r7, #12]
    de58:	60b9      	str	r1, [r7, #8]
    de5a:	607a      	str	r2, [r7, #4]
    de5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    de5e:	2300      	movs	r3, #0
    de60:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    de62:	68fb      	ldr	r3, [r7, #12]
    de64:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    de66:	6a3b      	ldr	r3, [r7, #32]
    de68:	2b00      	cmp	r3, #0
    de6a:	d101      	bne.n	de70 <xQueueGenericSend+0x20>
    de6c:	b672      	cpsid	i
    de6e:	e7fe      	b.n	de6e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    de70:	68bb      	ldr	r3, [r7, #8]
    de72:	2b00      	cmp	r3, #0
    de74:	d103      	bne.n	de7e <xQueueGenericSend+0x2e>
    de76:	6a3b      	ldr	r3, [r7, #32]
    de78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    de7a:	2b00      	cmp	r3, #0
    de7c:	d101      	bne.n	de82 <xQueueGenericSend+0x32>
    de7e:	2301      	movs	r3, #1
    de80:	e000      	b.n	de84 <xQueueGenericSend+0x34>
    de82:	2300      	movs	r3, #0
    de84:	2b00      	cmp	r3, #0
    de86:	d101      	bne.n	de8c <xQueueGenericSend+0x3c>
    de88:	b672      	cpsid	i
    de8a:	e7fe      	b.n	de8a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    de8c:	683b      	ldr	r3, [r7, #0]
    de8e:	2b02      	cmp	r3, #2
    de90:	d103      	bne.n	de9a <xQueueGenericSend+0x4a>
    de92:	6a3b      	ldr	r3, [r7, #32]
    de94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    de96:	2b01      	cmp	r3, #1
    de98:	d101      	bne.n	de9e <xQueueGenericSend+0x4e>
    de9a:	2301      	movs	r3, #1
    de9c:	e000      	b.n	dea0 <xQueueGenericSend+0x50>
    de9e:	2300      	movs	r3, #0
    dea0:	2b00      	cmp	r3, #0
    dea2:	d101      	bne.n	dea8 <xQueueGenericSend+0x58>
    dea4:	b672      	cpsid	i
    dea6:	e7fe      	b.n	dea6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    dea8:	4b53      	ldr	r3, [pc, #332]	; (dff8 <xQueueGenericSend+0x1a8>)
    deaa:	4798      	blx	r3
    deac:	1e03      	subs	r3, r0, #0
    deae:	d102      	bne.n	deb6 <xQueueGenericSend+0x66>
    deb0:	687b      	ldr	r3, [r7, #4]
    deb2:	2b00      	cmp	r3, #0
    deb4:	d101      	bne.n	deba <xQueueGenericSend+0x6a>
    deb6:	2301      	movs	r3, #1
    deb8:	e000      	b.n	debc <xQueueGenericSend+0x6c>
    deba:	2300      	movs	r3, #0
    debc:	2b00      	cmp	r3, #0
    debe:	d101      	bne.n	dec4 <xQueueGenericSend+0x74>
    dec0:	b672      	cpsid	i
    dec2:	e7fe      	b.n	dec2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    dec4:	4b4d      	ldr	r3, [pc, #308]	; (dffc <xQueueGenericSend+0x1ac>)
    dec6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    dec8:	6a3b      	ldr	r3, [r7, #32]
    deca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    decc:	6a3b      	ldr	r3, [r7, #32]
    dece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ded0:	429a      	cmp	r2, r3
    ded2:	d302      	bcc.n	deda <xQueueGenericSend+0x8a>
    ded4:	683b      	ldr	r3, [r7, #0]
    ded6:	2b02      	cmp	r3, #2
    ded8:	d12d      	bne.n	df36 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    deda:	683a      	ldr	r2, [r7, #0]
    dedc:	68b9      	ldr	r1, [r7, #8]
    dede:	6a3b      	ldr	r3, [r7, #32]
    dee0:	0018      	movs	r0, r3
    dee2:	4b47      	ldr	r3, [pc, #284]	; (e000 <xQueueGenericSend+0x1b0>)
    dee4:	4798      	blx	r3
    dee6:	0003      	movs	r3, r0
    dee8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    deea:	6a3b      	ldr	r3, [r7, #32]
    deec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    deee:	2b00      	cmp	r3, #0
    def0:	d00a      	beq.n	df08 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    def2:	683a      	ldr	r2, [r7, #0]
    def4:	6a3b      	ldr	r3, [r7, #32]
    def6:	0011      	movs	r1, r2
    def8:	0018      	movs	r0, r3
    defa:	4b42      	ldr	r3, [pc, #264]	; (e004 <xQueueGenericSend+0x1b4>)
    defc:	4798      	blx	r3
    defe:	1e03      	subs	r3, r0, #0
    df00:	d015      	beq.n	df2e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    df02:	4b41      	ldr	r3, [pc, #260]	; (e008 <xQueueGenericSend+0x1b8>)
    df04:	4798      	blx	r3
    df06:	e012      	b.n	df2e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    df08:	6a3b      	ldr	r3, [r7, #32]
    df0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    df0c:	2b00      	cmp	r3, #0
    df0e:	d009      	beq.n	df24 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    df10:	6a3b      	ldr	r3, [r7, #32]
    df12:	3324      	adds	r3, #36	; 0x24
    df14:	0018      	movs	r0, r3
    df16:	4b3d      	ldr	r3, [pc, #244]	; (e00c <xQueueGenericSend+0x1bc>)
    df18:	4798      	blx	r3
    df1a:	1e03      	subs	r3, r0, #0
    df1c:	d007      	beq.n	df2e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    df1e:	4b3a      	ldr	r3, [pc, #232]	; (e008 <xQueueGenericSend+0x1b8>)
    df20:	4798      	blx	r3
    df22:	e004      	b.n	df2e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    df24:	69fb      	ldr	r3, [r7, #28]
    df26:	2b00      	cmp	r3, #0
    df28:	d001      	beq.n	df2e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    df2a:	4b37      	ldr	r3, [pc, #220]	; (e008 <xQueueGenericSend+0x1b8>)
    df2c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    df2e:	4b38      	ldr	r3, [pc, #224]	; (e010 <xQueueGenericSend+0x1c0>)
    df30:	4798      	blx	r3
				return pdPASS;
    df32:	2301      	movs	r3, #1
    df34:	e05c      	b.n	dff0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    df36:	687b      	ldr	r3, [r7, #4]
    df38:	2b00      	cmp	r3, #0
    df3a:	d103      	bne.n	df44 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    df3c:	4b34      	ldr	r3, [pc, #208]	; (e010 <xQueueGenericSend+0x1c0>)
    df3e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    df40:	2300      	movs	r3, #0
    df42:	e055      	b.n	dff0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    df46:	2b00      	cmp	r3, #0
    df48:	d106      	bne.n	df58 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    df4a:	2314      	movs	r3, #20
    df4c:	18fb      	adds	r3, r7, r3
    df4e:	0018      	movs	r0, r3
    df50:	4b30      	ldr	r3, [pc, #192]	; (e014 <xQueueGenericSend+0x1c4>)
    df52:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    df54:	2301      	movs	r3, #1
    df56:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    df58:	4b2d      	ldr	r3, [pc, #180]	; (e010 <xQueueGenericSend+0x1c0>)
    df5a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    df5c:	4b2e      	ldr	r3, [pc, #184]	; (e018 <xQueueGenericSend+0x1c8>)
    df5e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    df60:	4b26      	ldr	r3, [pc, #152]	; (dffc <xQueueGenericSend+0x1ac>)
    df62:	4798      	blx	r3
    df64:	6a3b      	ldr	r3, [r7, #32]
    df66:	2244      	movs	r2, #68	; 0x44
    df68:	5c9b      	ldrb	r3, [r3, r2]
    df6a:	b25b      	sxtb	r3, r3
    df6c:	3301      	adds	r3, #1
    df6e:	d103      	bne.n	df78 <xQueueGenericSend+0x128>
    df70:	6a3b      	ldr	r3, [r7, #32]
    df72:	2244      	movs	r2, #68	; 0x44
    df74:	2100      	movs	r1, #0
    df76:	5499      	strb	r1, [r3, r2]
    df78:	6a3b      	ldr	r3, [r7, #32]
    df7a:	2245      	movs	r2, #69	; 0x45
    df7c:	5c9b      	ldrb	r3, [r3, r2]
    df7e:	b25b      	sxtb	r3, r3
    df80:	3301      	adds	r3, #1
    df82:	d103      	bne.n	df8c <xQueueGenericSend+0x13c>
    df84:	6a3b      	ldr	r3, [r7, #32]
    df86:	2245      	movs	r2, #69	; 0x45
    df88:	2100      	movs	r1, #0
    df8a:	5499      	strb	r1, [r3, r2]
    df8c:	4b20      	ldr	r3, [pc, #128]	; (e010 <xQueueGenericSend+0x1c0>)
    df8e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    df90:	1d3a      	adds	r2, r7, #4
    df92:	2314      	movs	r3, #20
    df94:	18fb      	adds	r3, r7, r3
    df96:	0011      	movs	r1, r2
    df98:	0018      	movs	r0, r3
    df9a:	4b20      	ldr	r3, [pc, #128]	; (e01c <xQueueGenericSend+0x1cc>)
    df9c:	4798      	blx	r3
    df9e:	1e03      	subs	r3, r0, #0
    dfa0:	d11f      	bne.n	dfe2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    dfa2:	6a3b      	ldr	r3, [r7, #32]
    dfa4:	0018      	movs	r0, r3
    dfa6:	4b1e      	ldr	r3, [pc, #120]	; (e020 <xQueueGenericSend+0x1d0>)
    dfa8:	4798      	blx	r3
    dfaa:	1e03      	subs	r3, r0, #0
    dfac:	d012      	beq.n	dfd4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    dfae:	6a3b      	ldr	r3, [r7, #32]
    dfb0:	3310      	adds	r3, #16
    dfb2:	687a      	ldr	r2, [r7, #4]
    dfb4:	0011      	movs	r1, r2
    dfb6:	0018      	movs	r0, r3
    dfb8:	4b1a      	ldr	r3, [pc, #104]	; (e024 <xQueueGenericSend+0x1d4>)
    dfba:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    dfbc:	6a3b      	ldr	r3, [r7, #32]
    dfbe:	0018      	movs	r0, r3
    dfc0:	4b19      	ldr	r3, [pc, #100]	; (e028 <xQueueGenericSend+0x1d8>)
    dfc2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    dfc4:	4b19      	ldr	r3, [pc, #100]	; (e02c <xQueueGenericSend+0x1dc>)
    dfc6:	4798      	blx	r3
    dfc8:	1e03      	subs	r3, r0, #0
    dfca:	d000      	beq.n	dfce <xQueueGenericSend+0x17e>
    dfcc:	e77a      	b.n	dec4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    dfce:	4b0e      	ldr	r3, [pc, #56]	; (e008 <xQueueGenericSend+0x1b8>)
    dfd0:	4798      	blx	r3
    dfd2:	e777      	b.n	dec4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    dfd4:	6a3b      	ldr	r3, [r7, #32]
    dfd6:	0018      	movs	r0, r3
    dfd8:	4b13      	ldr	r3, [pc, #76]	; (e028 <xQueueGenericSend+0x1d8>)
    dfda:	4798      	blx	r3
				( void ) xTaskResumeAll();
    dfdc:	4b13      	ldr	r3, [pc, #76]	; (e02c <xQueueGenericSend+0x1dc>)
    dfde:	4798      	blx	r3
    dfe0:	e770      	b.n	dec4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    dfe2:	6a3b      	ldr	r3, [r7, #32]
    dfe4:	0018      	movs	r0, r3
    dfe6:	4b10      	ldr	r3, [pc, #64]	; (e028 <xQueueGenericSend+0x1d8>)
    dfe8:	4798      	blx	r3
			( void ) xTaskResumeAll();
    dfea:	4b10      	ldr	r3, [pc, #64]	; (e02c <xQueueGenericSend+0x1dc>)
    dfec:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    dfee:	2300      	movs	r3, #0
		}
	}
}
    dff0:	0018      	movs	r0, r3
    dff2:	46bd      	mov	sp, r7
    dff4:	b00a      	add	sp, #40	; 0x28
    dff6:	bd80      	pop	{r7, pc}
    dff8:	0000f561 	.word	0x0000f561
    dffc:	0000d9e1 	.word	0x0000d9e1
    e000:	0000e511 	.word	0x0000e511
    e004:	0000e815 	.word	0x0000e815
    e008:	0000d9c1 	.word	0x0000d9c1
    e00c:	0000f229 	.word	0x0000f229
    e010:	0000da05 	.word	0x0000da05
    e014:	0000f2e9 	.word	0x0000f2e9
    e018:	0000ee11 	.word	0x0000ee11
    e01c:	0000f311 	.word	0x0000f311
    e020:	0000e765 	.word	0x0000e765
    e024:	0000f191 	.word	0x0000f191
    e028:	0000e641 	.word	0x0000e641
    e02c:	0000ee29 	.word	0x0000ee29

0000e030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    e030:	b580      	push	{r7, lr}
    e032:	b088      	sub	sp, #32
    e034:	af00      	add	r7, sp, #0
    e036:	60f8      	str	r0, [r7, #12]
    e038:	60b9      	str	r1, [r7, #8]
    e03a:	607a      	str	r2, [r7, #4]
    e03c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e03e:	68fb      	ldr	r3, [r7, #12]
    e040:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    e042:	69bb      	ldr	r3, [r7, #24]
    e044:	2b00      	cmp	r3, #0
    e046:	d101      	bne.n	e04c <xQueueGenericSendFromISR+0x1c>
    e048:	b672      	cpsid	i
    e04a:	e7fe      	b.n	e04a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e04c:	68bb      	ldr	r3, [r7, #8]
    e04e:	2b00      	cmp	r3, #0
    e050:	d103      	bne.n	e05a <xQueueGenericSendFromISR+0x2a>
    e052:	69bb      	ldr	r3, [r7, #24]
    e054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e056:	2b00      	cmp	r3, #0
    e058:	d101      	bne.n	e05e <xQueueGenericSendFromISR+0x2e>
    e05a:	2301      	movs	r3, #1
    e05c:	e000      	b.n	e060 <xQueueGenericSendFromISR+0x30>
    e05e:	2300      	movs	r3, #0
    e060:	2b00      	cmp	r3, #0
    e062:	d101      	bne.n	e068 <xQueueGenericSendFromISR+0x38>
    e064:	b672      	cpsid	i
    e066:	e7fe      	b.n	e066 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e068:	683b      	ldr	r3, [r7, #0]
    e06a:	2b02      	cmp	r3, #2
    e06c:	d103      	bne.n	e076 <xQueueGenericSendFromISR+0x46>
    e06e:	69bb      	ldr	r3, [r7, #24]
    e070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e072:	2b01      	cmp	r3, #1
    e074:	d101      	bne.n	e07a <xQueueGenericSendFromISR+0x4a>
    e076:	2301      	movs	r3, #1
    e078:	e000      	b.n	e07c <xQueueGenericSendFromISR+0x4c>
    e07a:	2300      	movs	r3, #0
    e07c:	2b00      	cmp	r3, #0
    e07e:	d101      	bne.n	e084 <xQueueGenericSendFromISR+0x54>
    e080:	b672      	cpsid	i
    e082:	e7fe      	b.n	e082 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    e084:	4b2d      	ldr	r3, [pc, #180]	; (e13c <xQueueGenericSendFromISR+0x10c>)
    e086:	4798      	blx	r3
    e088:	0003      	movs	r3, r0
    e08a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e08c:	69bb      	ldr	r3, [r7, #24]
    e08e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e090:	69bb      	ldr	r3, [r7, #24]
    e092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e094:	429a      	cmp	r2, r3
    e096:	d302      	bcc.n	e09e <xQueueGenericSendFromISR+0x6e>
    e098:	683b      	ldr	r3, [r7, #0]
    e09a:	2b02      	cmp	r3, #2
    e09c:	d142      	bne.n	e124 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    e09e:	2313      	movs	r3, #19
    e0a0:	18fb      	adds	r3, r7, r3
    e0a2:	69ba      	ldr	r2, [r7, #24]
    e0a4:	2145      	movs	r1, #69	; 0x45
    e0a6:	5c52      	ldrb	r2, [r2, r1]
    e0a8:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e0aa:	683a      	ldr	r2, [r7, #0]
    e0ac:	68b9      	ldr	r1, [r7, #8]
    e0ae:	69bb      	ldr	r3, [r7, #24]
    e0b0:	0018      	movs	r0, r3
    e0b2:	4b23      	ldr	r3, [pc, #140]	; (e140 <xQueueGenericSendFromISR+0x110>)
    e0b4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    e0b6:	2313      	movs	r3, #19
    e0b8:	18fb      	adds	r3, r7, r3
    e0ba:	781b      	ldrb	r3, [r3, #0]
    e0bc:	b25b      	sxtb	r3, r3
    e0be:	3301      	adds	r3, #1
    e0c0:	d124      	bne.n	e10c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e0c2:	69bb      	ldr	r3, [r7, #24]
    e0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d00e      	beq.n	e0e8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e0ca:	683a      	ldr	r2, [r7, #0]
    e0cc:	69bb      	ldr	r3, [r7, #24]
    e0ce:	0011      	movs	r1, r2
    e0d0:	0018      	movs	r0, r3
    e0d2:	4b1c      	ldr	r3, [pc, #112]	; (e144 <xQueueGenericSendFromISR+0x114>)
    e0d4:	4798      	blx	r3
    e0d6:	1e03      	subs	r3, r0, #0
    e0d8:	d021      	beq.n	e11e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	2b00      	cmp	r3, #0
    e0de:	d01e      	beq.n	e11e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    e0e0:	687b      	ldr	r3, [r7, #4]
    e0e2:	2201      	movs	r2, #1
    e0e4:	601a      	str	r2, [r3, #0]
    e0e6:	e01a      	b.n	e11e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e0e8:	69bb      	ldr	r3, [r7, #24]
    e0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d016      	beq.n	e11e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e0f0:	69bb      	ldr	r3, [r7, #24]
    e0f2:	3324      	adds	r3, #36	; 0x24
    e0f4:	0018      	movs	r0, r3
    e0f6:	4b14      	ldr	r3, [pc, #80]	; (e148 <xQueueGenericSendFromISR+0x118>)
    e0f8:	4798      	blx	r3
    e0fa:	1e03      	subs	r3, r0, #0
    e0fc:	d00f      	beq.n	e11e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    e0fe:	687b      	ldr	r3, [r7, #4]
    e100:	2b00      	cmp	r3, #0
    e102:	d00c      	beq.n	e11e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    e104:	687b      	ldr	r3, [r7, #4]
    e106:	2201      	movs	r2, #1
    e108:	601a      	str	r2, [r3, #0]
    e10a:	e008      	b.n	e11e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    e10c:	2313      	movs	r3, #19
    e10e:	18fb      	adds	r3, r7, r3
    e110:	781b      	ldrb	r3, [r3, #0]
    e112:	3301      	adds	r3, #1
    e114:	b2db      	uxtb	r3, r3
    e116:	b259      	sxtb	r1, r3
    e118:	69bb      	ldr	r3, [r7, #24]
    e11a:	2245      	movs	r2, #69	; 0x45
    e11c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    e11e:	2301      	movs	r3, #1
    e120:	61fb      	str	r3, [r7, #28]
		{
    e122:	e001      	b.n	e128 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    e124:	2300      	movs	r3, #0
    e126:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    e128:	697b      	ldr	r3, [r7, #20]
    e12a:	0018      	movs	r0, r3
    e12c:	4b07      	ldr	r3, [pc, #28]	; (e14c <xQueueGenericSendFromISR+0x11c>)
    e12e:	4798      	blx	r3

	return xReturn;
    e130:	69fb      	ldr	r3, [r7, #28]
}
    e132:	0018      	movs	r0, r3
    e134:	46bd      	mov	sp, r7
    e136:	b008      	add	sp, #32
    e138:	bd80      	pop	{r7, pc}
    e13a:	46c0      	nop			; (mov r8, r8)
    e13c:	0000da35 	.word	0x0000da35
    e140:	0000e511 	.word	0x0000e511
    e144:	0000e815 	.word	0x0000e815
    e148:	0000f229 	.word	0x0000f229
    e14c:	0000da41 	.word	0x0000da41

0000e150 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    e150:	b580      	push	{r7, lr}
    e152:	b08a      	sub	sp, #40	; 0x28
    e154:	af00      	add	r7, sp, #0
    e156:	60f8      	str	r0, [r7, #12]
    e158:	60b9      	str	r1, [r7, #8]
    e15a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    e15c:	2300      	movs	r3, #0
    e15e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e160:	68fb      	ldr	r3, [r7, #12]
    e162:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e164:	6a3b      	ldr	r3, [r7, #32]
    e166:	2b00      	cmp	r3, #0
    e168:	d101      	bne.n	e16e <xQueueReceive+0x1e>
    e16a:	b672      	cpsid	i
    e16c:	e7fe      	b.n	e16c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e16e:	68bb      	ldr	r3, [r7, #8]
    e170:	2b00      	cmp	r3, #0
    e172:	d103      	bne.n	e17c <xQueueReceive+0x2c>
    e174:	6a3b      	ldr	r3, [r7, #32]
    e176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e178:	2b00      	cmp	r3, #0
    e17a:	d101      	bne.n	e180 <xQueueReceive+0x30>
    e17c:	2301      	movs	r3, #1
    e17e:	e000      	b.n	e182 <xQueueReceive+0x32>
    e180:	2300      	movs	r3, #0
    e182:	2b00      	cmp	r3, #0
    e184:	d101      	bne.n	e18a <xQueueReceive+0x3a>
    e186:	b672      	cpsid	i
    e188:	e7fe      	b.n	e188 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e18a:	4b4c      	ldr	r3, [pc, #304]	; (e2bc <xQueueReceive+0x16c>)
    e18c:	4798      	blx	r3
    e18e:	1e03      	subs	r3, r0, #0
    e190:	d102      	bne.n	e198 <xQueueReceive+0x48>
    e192:	687b      	ldr	r3, [r7, #4]
    e194:	2b00      	cmp	r3, #0
    e196:	d101      	bne.n	e19c <xQueueReceive+0x4c>
    e198:	2301      	movs	r3, #1
    e19a:	e000      	b.n	e19e <xQueueReceive+0x4e>
    e19c:	2300      	movs	r3, #0
    e19e:	2b00      	cmp	r3, #0
    e1a0:	d101      	bne.n	e1a6 <xQueueReceive+0x56>
    e1a2:	b672      	cpsid	i
    e1a4:	e7fe      	b.n	e1a4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e1a6:	4b46      	ldr	r3, [pc, #280]	; (e2c0 <xQueueReceive+0x170>)
    e1a8:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e1aa:	6a3b      	ldr	r3, [r7, #32]
    e1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e1ae:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e1b0:	69fb      	ldr	r3, [r7, #28]
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	d01a      	beq.n	e1ec <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    e1b6:	68ba      	ldr	r2, [r7, #8]
    e1b8:	6a3b      	ldr	r3, [r7, #32]
    e1ba:	0011      	movs	r1, r2
    e1bc:	0018      	movs	r0, r3
    e1be:	4b41      	ldr	r3, [pc, #260]	; (e2c4 <xQueueReceive+0x174>)
    e1c0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    e1c2:	69fb      	ldr	r3, [r7, #28]
    e1c4:	1e5a      	subs	r2, r3, #1
    e1c6:	6a3b      	ldr	r3, [r7, #32]
    e1c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e1ca:	6a3b      	ldr	r3, [r7, #32]
    e1cc:	691b      	ldr	r3, [r3, #16]
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d008      	beq.n	e1e4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e1d2:	6a3b      	ldr	r3, [r7, #32]
    e1d4:	3310      	adds	r3, #16
    e1d6:	0018      	movs	r0, r3
    e1d8:	4b3b      	ldr	r3, [pc, #236]	; (e2c8 <xQueueReceive+0x178>)
    e1da:	4798      	blx	r3
    e1dc:	1e03      	subs	r3, r0, #0
    e1de:	d001      	beq.n	e1e4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e1e0:	4b3a      	ldr	r3, [pc, #232]	; (e2cc <xQueueReceive+0x17c>)
    e1e2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e1e4:	4b3a      	ldr	r3, [pc, #232]	; (e2d0 <xQueueReceive+0x180>)
    e1e6:	4798      	blx	r3
				return pdPASS;
    e1e8:	2301      	movs	r3, #1
    e1ea:	e062      	b.n	e2b2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e1ec:	687b      	ldr	r3, [r7, #4]
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	d103      	bne.n	e1fa <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e1f2:	4b37      	ldr	r3, [pc, #220]	; (e2d0 <xQueueReceive+0x180>)
    e1f4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e1f6:	2300      	movs	r3, #0
    e1f8:	e05b      	b.n	e2b2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1fc:	2b00      	cmp	r3, #0
    e1fe:	d106      	bne.n	e20e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e200:	2314      	movs	r3, #20
    e202:	18fb      	adds	r3, r7, r3
    e204:	0018      	movs	r0, r3
    e206:	4b33      	ldr	r3, [pc, #204]	; (e2d4 <xQueueReceive+0x184>)
    e208:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e20a:	2301      	movs	r3, #1
    e20c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e20e:	4b30      	ldr	r3, [pc, #192]	; (e2d0 <xQueueReceive+0x180>)
    e210:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e212:	4b31      	ldr	r3, [pc, #196]	; (e2d8 <xQueueReceive+0x188>)
    e214:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e216:	4b2a      	ldr	r3, [pc, #168]	; (e2c0 <xQueueReceive+0x170>)
    e218:	4798      	blx	r3
    e21a:	6a3b      	ldr	r3, [r7, #32]
    e21c:	2244      	movs	r2, #68	; 0x44
    e21e:	5c9b      	ldrb	r3, [r3, r2]
    e220:	b25b      	sxtb	r3, r3
    e222:	3301      	adds	r3, #1
    e224:	d103      	bne.n	e22e <xQueueReceive+0xde>
    e226:	6a3b      	ldr	r3, [r7, #32]
    e228:	2244      	movs	r2, #68	; 0x44
    e22a:	2100      	movs	r1, #0
    e22c:	5499      	strb	r1, [r3, r2]
    e22e:	6a3b      	ldr	r3, [r7, #32]
    e230:	2245      	movs	r2, #69	; 0x45
    e232:	5c9b      	ldrb	r3, [r3, r2]
    e234:	b25b      	sxtb	r3, r3
    e236:	3301      	adds	r3, #1
    e238:	d103      	bne.n	e242 <xQueueReceive+0xf2>
    e23a:	6a3b      	ldr	r3, [r7, #32]
    e23c:	2245      	movs	r2, #69	; 0x45
    e23e:	2100      	movs	r1, #0
    e240:	5499      	strb	r1, [r3, r2]
    e242:	4b23      	ldr	r3, [pc, #140]	; (e2d0 <xQueueReceive+0x180>)
    e244:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e246:	1d3a      	adds	r2, r7, #4
    e248:	2314      	movs	r3, #20
    e24a:	18fb      	adds	r3, r7, r3
    e24c:	0011      	movs	r1, r2
    e24e:	0018      	movs	r0, r3
    e250:	4b22      	ldr	r3, [pc, #136]	; (e2dc <xQueueReceive+0x18c>)
    e252:	4798      	blx	r3
    e254:	1e03      	subs	r3, r0, #0
    e256:	d11e      	bne.n	e296 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e258:	6a3b      	ldr	r3, [r7, #32]
    e25a:	0018      	movs	r0, r3
    e25c:	4b20      	ldr	r3, [pc, #128]	; (e2e0 <xQueueReceive+0x190>)
    e25e:	4798      	blx	r3
    e260:	1e03      	subs	r3, r0, #0
    e262:	d011      	beq.n	e288 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e264:	6a3b      	ldr	r3, [r7, #32]
    e266:	3324      	adds	r3, #36	; 0x24
    e268:	687a      	ldr	r2, [r7, #4]
    e26a:	0011      	movs	r1, r2
    e26c:	0018      	movs	r0, r3
    e26e:	4b1d      	ldr	r3, [pc, #116]	; (e2e4 <xQueueReceive+0x194>)
    e270:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e272:	6a3b      	ldr	r3, [r7, #32]
    e274:	0018      	movs	r0, r3
    e276:	4b1c      	ldr	r3, [pc, #112]	; (e2e8 <xQueueReceive+0x198>)
    e278:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e27a:	4b1c      	ldr	r3, [pc, #112]	; (e2ec <xQueueReceive+0x19c>)
    e27c:	4798      	blx	r3
    e27e:	1e03      	subs	r3, r0, #0
    e280:	d191      	bne.n	e1a6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    e282:	4b12      	ldr	r3, [pc, #72]	; (e2cc <xQueueReceive+0x17c>)
    e284:	4798      	blx	r3
    e286:	e78e      	b.n	e1a6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    e288:	6a3b      	ldr	r3, [r7, #32]
    e28a:	0018      	movs	r0, r3
    e28c:	4b16      	ldr	r3, [pc, #88]	; (e2e8 <xQueueReceive+0x198>)
    e28e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e290:	4b16      	ldr	r3, [pc, #88]	; (e2ec <xQueueReceive+0x19c>)
    e292:	4798      	blx	r3
    e294:	e787      	b.n	e1a6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    e296:	6a3b      	ldr	r3, [r7, #32]
    e298:	0018      	movs	r0, r3
    e29a:	4b13      	ldr	r3, [pc, #76]	; (e2e8 <xQueueReceive+0x198>)
    e29c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e29e:	4b13      	ldr	r3, [pc, #76]	; (e2ec <xQueueReceive+0x19c>)
    e2a0:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e2a2:	6a3b      	ldr	r3, [r7, #32]
    e2a4:	0018      	movs	r0, r3
    e2a6:	4b0e      	ldr	r3, [pc, #56]	; (e2e0 <xQueueReceive+0x190>)
    e2a8:	4798      	blx	r3
    e2aa:	1e03      	subs	r3, r0, #0
    e2ac:	d100      	bne.n	e2b0 <xQueueReceive+0x160>
    e2ae:	e77a      	b.n	e1a6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e2b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e2b2:	0018      	movs	r0, r3
    e2b4:	46bd      	mov	sp, r7
    e2b6:	b00a      	add	sp, #40	; 0x28
    e2b8:	bd80      	pop	{r7, pc}
    e2ba:	46c0      	nop			; (mov r8, r8)
    e2bc:	0000f561 	.word	0x0000f561
    e2c0:	0000d9e1 	.word	0x0000d9e1
    e2c4:	0000e5f1 	.word	0x0000e5f1
    e2c8:	0000f229 	.word	0x0000f229
    e2cc:	0000d9c1 	.word	0x0000d9c1
    e2d0:	0000da05 	.word	0x0000da05
    e2d4:	0000f2e9 	.word	0x0000f2e9
    e2d8:	0000ee11 	.word	0x0000ee11
    e2dc:	0000f311 	.word	0x0000f311
    e2e0:	0000e731 	.word	0x0000e731
    e2e4:	0000f191 	.word	0x0000f191
    e2e8:	0000e641 	.word	0x0000e641
    e2ec:	0000ee29 	.word	0x0000ee29

0000e2f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    e2f0:	b580      	push	{r7, lr}
    e2f2:	b08a      	sub	sp, #40	; 0x28
    e2f4:	af00      	add	r7, sp, #0
    e2f6:	6078      	str	r0, [r7, #4]
    e2f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    e2fa:	2300      	movs	r3, #0
    e2fc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e2fe:	687b      	ldr	r3, [r7, #4]
    e300:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    e302:	2300      	movs	r3, #0
    e304:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e306:	69fb      	ldr	r3, [r7, #28]
    e308:	2b00      	cmp	r3, #0
    e30a:	d101      	bne.n	e310 <xQueueSemaphoreTake+0x20>
    e30c:	b672      	cpsid	i
    e30e:	e7fe      	b.n	e30e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    e310:	69fb      	ldr	r3, [r7, #28]
    e312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e314:	2b00      	cmp	r3, #0
    e316:	d001      	beq.n	e31c <xQueueSemaphoreTake+0x2c>
    e318:	b672      	cpsid	i
    e31a:	e7fe      	b.n	e31a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e31c:	4b61      	ldr	r3, [pc, #388]	; (e4a4 <xQueueSemaphoreTake+0x1b4>)
    e31e:	4798      	blx	r3
    e320:	1e03      	subs	r3, r0, #0
    e322:	d102      	bne.n	e32a <xQueueSemaphoreTake+0x3a>
    e324:	683b      	ldr	r3, [r7, #0]
    e326:	2b00      	cmp	r3, #0
    e328:	d101      	bne.n	e32e <xQueueSemaphoreTake+0x3e>
    e32a:	2301      	movs	r3, #1
    e32c:	e000      	b.n	e330 <xQueueSemaphoreTake+0x40>
    e32e:	2300      	movs	r3, #0
    e330:	2b00      	cmp	r3, #0
    e332:	d101      	bne.n	e338 <xQueueSemaphoreTake+0x48>
    e334:	b672      	cpsid	i
    e336:	e7fe      	b.n	e336 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e338:	4b5b      	ldr	r3, [pc, #364]	; (e4a8 <xQueueSemaphoreTake+0x1b8>)
    e33a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    e33c:	69fb      	ldr	r3, [r7, #28]
    e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e340:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    e342:	69bb      	ldr	r3, [r7, #24]
    e344:	2b00      	cmp	r3, #0
    e346:	d01d      	beq.n	e384 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    e348:	69bb      	ldr	r3, [r7, #24]
    e34a:	1e5a      	subs	r2, r3, #1
    e34c:	69fb      	ldr	r3, [r7, #28]
    e34e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e350:	69fb      	ldr	r3, [r7, #28]
    e352:	681b      	ldr	r3, [r3, #0]
    e354:	2b00      	cmp	r3, #0
    e356:	d104      	bne.n	e362 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    e358:	4b54      	ldr	r3, [pc, #336]	; (e4ac <xQueueSemaphoreTake+0x1bc>)
    e35a:	4798      	blx	r3
    e35c:	0002      	movs	r2, r0
    e35e:	69fb      	ldr	r3, [r7, #28]
    e360:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e362:	69fb      	ldr	r3, [r7, #28]
    e364:	691b      	ldr	r3, [r3, #16]
    e366:	2b00      	cmp	r3, #0
    e368:	d008      	beq.n	e37c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e36a:	69fb      	ldr	r3, [r7, #28]
    e36c:	3310      	adds	r3, #16
    e36e:	0018      	movs	r0, r3
    e370:	4b4f      	ldr	r3, [pc, #316]	; (e4b0 <xQueueSemaphoreTake+0x1c0>)
    e372:	4798      	blx	r3
    e374:	1e03      	subs	r3, r0, #0
    e376:	d001      	beq.n	e37c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e378:	4b4e      	ldr	r3, [pc, #312]	; (e4b4 <xQueueSemaphoreTake+0x1c4>)
    e37a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e37c:	4b4e      	ldr	r3, [pc, #312]	; (e4b8 <xQueueSemaphoreTake+0x1c8>)
    e37e:	4798      	blx	r3
				return pdPASS;
    e380:	2301      	movs	r3, #1
    e382:	e08b      	b.n	e49c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e384:	683b      	ldr	r3, [r7, #0]
    e386:	2b00      	cmp	r3, #0
    e388:	d108      	bne.n	e39c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    e38a:	6a3b      	ldr	r3, [r7, #32]
    e38c:	2b00      	cmp	r3, #0
    e38e:	d001      	beq.n	e394 <xQueueSemaphoreTake+0xa4>
    e390:	b672      	cpsid	i
    e392:	e7fe      	b.n	e392 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    e394:	4b48      	ldr	r3, [pc, #288]	; (e4b8 <xQueueSemaphoreTake+0x1c8>)
    e396:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e398:	2300      	movs	r3, #0
    e39a:	e07f      	b.n	e49c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d106      	bne.n	e3b0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e3a2:	230c      	movs	r3, #12
    e3a4:	18fb      	adds	r3, r7, r3
    e3a6:	0018      	movs	r0, r3
    e3a8:	4b44      	ldr	r3, [pc, #272]	; (e4bc <xQueueSemaphoreTake+0x1cc>)
    e3aa:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e3ac:	2301      	movs	r3, #1
    e3ae:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e3b0:	4b41      	ldr	r3, [pc, #260]	; (e4b8 <xQueueSemaphoreTake+0x1c8>)
    e3b2:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    e3b4:	4b42      	ldr	r3, [pc, #264]	; (e4c0 <xQueueSemaphoreTake+0x1d0>)
    e3b6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e3b8:	4b3b      	ldr	r3, [pc, #236]	; (e4a8 <xQueueSemaphoreTake+0x1b8>)
    e3ba:	4798      	blx	r3
    e3bc:	69fb      	ldr	r3, [r7, #28]
    e3be:	2244      	movs	r2, #68	; 0x44
    e3c0:	5c9b      	ldrb	r3, [r3, r2]
    e3c2:	b25b      	sxtb	r3, r3
    e3c4:	3301      	adds	r3, #1
    e3c6:	d103      	bne.n	e3d0 <xQueueSemaphoreTake+0xe0>
    e3c8:	69fb      	ldr	r3, [r7, #28]
    e3ca:	2244      	movs	r2, #68	; 0x44
    e3cc:	2100      	movs	r1, #0
    e3ce:	5499      	strb	r1, [r3, r2]
    e3d0:	69fb      	ldr	r3, [r7, #28]
    e3d2:	2245      	movs	r2, #69	; 0x45
    e3d4:	5c9b      	ldrb	r3, [r3, r2]
    e3d6:	b25b      	sxtb	r3, r3
    e3d8:	3301      	adds	r3, #1
    e3da:	d103      	bne.n	e3e4 <xQueueSemaphoreTake+0xf4>
    e3dc:	69fb      	ldr	r3, [r7, #28]
    e3de:	2245      	movs	r2, #69	; 0x45
    e3e0:	2100      	movs	r1, #0
    e3e2:	5499      	strb	r1, [r3, r2]
    e3e4:	4b34      	ldr	r3, [pc, #208]	; (e4b8 <xQueueSemaphoreTake+0x1c8>)
    e3e6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e3e8:	003a      	movs	r2, r7
    e3ea:	230c      	movs	r3, #12
    e3ec:	18fb      	adds	r3, r7, r3
    e3ee:	0011      	movs	r1, r2
    e3f0:	0018      	movs	r0, r3
    e3f2:	4b34      	ldr	r3, [pc, #208]	; (e4c4 <xQueueSemaphoreTake+0x1d4>)
    e3f4:	4798      	blx	r3
    e3f6:	1e03      	subs	r3, r0, #0
    e3f8:	d12e      	bne.n	e458 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e3fa:	69fb      	ldr	r3, [r7, #28]
    e3fc:	0018      	movs	r0, r3
    e3fe:	4b32      	ldr	r3, [pc, #200]	; (e4c8 <xQueueSemaphoreTake+0x1d8>)
    e400:	4798      	blx	r3
    e402:	1e03      	subs	r3, r0, #0
    e404:	d021      	beq.n	e44a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e406:	69fb      	ldr	r3, [r7, #28]
    e408:	681b      	ldr	r3, [r3, #0]
    e40a:	2b00      	cmp	r3, #0
    e40c:	d10a      	bne.n	e424 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
    e40e:	4b26      	ldr	r3, [pc, #152]	; (e4a8 <xQueueSemaphoreTake+0x1b8>)
    e410:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    e412:	69fb      	ldr	r3, [r7, #28]
    e414:	685b      	ldr	r3, [r3, #4]
    e416:	0018      	movs	r0, r3
    e418:	4b2c      	ldr	r3, [pc, #176]	; (e4cc <xQueueSemaphoreTake+0x1dc>)
    e41a:	4798      	blx	r3
    e41c:	0003      	movs	r3, r0
    e41e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    e420:	4b25      	ldr	r3, [pc, #148]	; (e4b8 <xQueueSemaphoreTake+0x1c8>)
    e422:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e424:	69fb      	ldr	r3, [r7, #28]
    e426:	3324      	adds	r3, #36	; 0x24
    e428:	683a      	ldr	r2, [r7, #0]
    e42a:	0011      	movs	r1, r2
    e42c:	0018      	movs	r0, r3
    e42e:	4b28      	ldr	r3, [pc, #160]	; (e4d0 <xQueueSemaphoreTake+0x1e0>)
    e430:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e432:	69fb      	ldr	r3, [r7, #28]
    e434:	0018      	movs	r0, r3
    e436:	4b27      	ldr	r3, [pc, #156]	; (e4d4 <xQueueSemaphoreTake+0x1e4>)
    e438:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e43a:	4b27      	ldr	r3, [pc, #156]	; (e4d8 <xQueueSemaphoreTake+0x1e8>)
    e43c:	4798      	blx	r3
    e43e:	1e03      	subs	r3, r0, #0
    e440:	d000      	beq.n	e444 <xQueueSemaphoreTake+0x154>
    e442:	e779      	b.n	e338 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    e444:	4b1b      	ldr	r3, [pc, #108]	; (e4b4 <xQueueSemaphoreTake+0x1c4>)
    e446:	4798      	blx	r3
    e448:	e776      	b.n	e338 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    e44a:	69fb      	ldr	r3, [r7, #28]
    e44c:	0018      	movs	r0, r3
    e44e:	4b21      	ldr	r3, [pc, #132]	; (e4d4 <xQueueSemaphoreTake+0x1e4>)
    e450:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e452:	4b21      	ldr	r3, [pc, #132]	; (e4d8 <xQueueSemaphoreTake+0x1e8>)
    e454:	4798      	blx	r3
    e456:	e76f      	b.n	e338 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    e458:	69fb      	ldr	r3, [r7, #28]
    e45a:	0018      	movs	r0, r3
    e45c:	4b1d      	ldr	r3, [pc, #116]	; (e4d4 <xQueueSemaphoreTake+0x1e4>)
    e45e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e460:	4b1d      	ldr	r3, [pc, #116]	; (e4d8 <xQueueSemaphoreTake+0x1e8>)
    e462:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e464:	69fb      	ldr	r3, [r7, #28]
    e466:	0018      	movs	r0, r3
    e468:	4b17      	ldr	r3, [pc, #92]	; (e4c8 <xQueueSemaphoreTake+0x1d8>)
    e46a:	4798      	blx	r3
    e46c:	1e03      	subs	r3, r0, #0
    e46e:	d100      	bne.n	e472 <xQueueSemaphoreTake+0x182>
    e470:	e762      	b.n	e338 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    e472:	6a3b      	ldr	r3, [r7, #32]
    e474:	2b00      	cmp	r3, #0
    e476:	d010      	beq.n	e49a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
    e478:	4b0b      	ldr	r3, [pc, #44]	; (e4a8 <xQueueSemaphoreTake+0x1b8>)
    e47a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    e47c:	69fb      	ldr	r3, [r7, #28]
    e47e:	0018      	movs	r0, r3
    e480:	4b16      	ldr	r3, [pc, #88]	; (e4dc <xQueueSemaphoreTake+0x1ec>)
    e482:	4798      	blx	r3
    e484:	0003      	movs	r3, r0
    e486:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    e488:	69fb      	ldr	r3, [r7, #28]
    e48a:	685b      	ldr	r3, [r3, #4]
    e48c:	697a      	ldr	r2, [r7, #20]
    e48e:	0011      	movs	r1, r2
    e490:	0018      	movs	r0, r3
    e492:	4b13      	ldr	r3, [pc, #76]	; (e4e0 <xQueueSemaphoreTake+0x1f0>)
    e494:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    e496:	4b08      	ldr	r3, [pc, #32]	; (e4b8 <xQueueSemaphoreTake+0x1c8>)
    e498:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e49a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e49c:	0018      	movs	r0, r3
    e49e:	46bd      	mov	sp, r7
    e4a0:	b00a      	add	sp, #40	; 0x28
    e4a2:	bd80      	pop	{r7, pc}
    e4a4:	0000f561 	.word	0x0000f561
    e4a8:	0000d9e1 	.word	0x0000d9e1
    e4ac:	0000f82d 	.word	0x0000f82d
    e4b0:	0000f229 	.word	0x0000f229
    e4b4:	0000d9c1 	.word	0x0000d9c1
    e4b8:	0000da05 	.word	0x0000da05
    e4bc:	0000f2e9 	.word	0x0000f2e9
    e4c0:	0000ee11 	.word	0x0000ee11
    e4c4:	0000f311 	.word	0x0000f311
    e4c8:	0000e731 	.word	0x0000e731
    e4cc:	0000f599 	.word	0x0000f599
    e4d0:	0000f191 	.word	0x0000f191
    e4d4:	0000e641 	.word	0x0000e641
    e4d8:	0000ee29 	.word	0x0000ee29
    e4dc:	0000e4e5 	.word	0x0000e4e5
    e4e0:	0000f73d 	.word	0x0000f73d

0000e4e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    e4e4:	b580      	push	{r7, lr}
    e4e6:	b084      	sub	sp, #16
    e4e8:	af00      	add	r7, sp, #0
    e4ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    e4ec:	687b      	ldr	r3, [r7, #4]
    e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d006      	beq.n	e502 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e4f8:	681b      	ldr	r3, [r3, #0]
    e4fa:	2205      	movs	r2, #5
    e4fc:	1ad3      	subs	r3, r2, r3
    e4fe:	60fb      	str	r3, [r7, #12]
    e500:	e001      	b.n	e506 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    e502:	2300      	movs	r3, #0
    e504:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    e506:	68fb      	ldr	r3, [r7, #12]
	}
    e508:	0018      	movs	r0, r3
    e50a:	46bd      	mov	sp, r7
    e50c:	b004      	add	sp, #16
    e50e:	bd80      	pop	{r7, pc}

0000e510 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    e510:	b580      	push	{r7, lr}
    e512:	b086      	sub	sp, #24
    e514:	af00      	add	r7, sp, #0
    e516:	60f8      	str	r0, [r7, #12]
    e518:	60b9      	str	r1, [r7, #8]
    e51a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    e51c:	2300      	movs	r3, #0
    e51e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e520:	68fb      	ldr	r3, [r7, #12]
    e522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e524:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    e526:	68fb      	ldr	r3, [r7, #12]
    e528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e52a:	2b00      	cmp	r3, #0
    e52c:	d10e      	bne.n	e54c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e52e:	68fb      	ldr	r3, [r7, #12]
    e530:	681b      	ldr	r3, [r3, #0]
    e532:	2b00      	cmp	r3, #0
    e534:	d14e      	bne.n	e5d4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    e536:	68fb      	ldr	r3, [r7, #12]
    e538:	685b      	ldr	r3, [r3, #4]
    e53a:	0018      	movs	r0, r3
    e53c:	4b2a      	ldr	r3, [pc, #168]	; (e5e8 <prvCopyDataToQueue+0xd8>)
    e53e:	4798      	blx	r3
    e540:	0003      	movs	r3, r0
    e542:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    e544:	68fb      	ldr	r3, [r7, #12]
    e546:	2200      	movs	r2, #0
    e548:	605a      	str	r2, [r3, #4]
    e54a:	e043      	b.n	e5d4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    e54c:	687b      	ldr	r3, [r7, #4]
    e54e:	2b00      	cmp	r3, #0
    e550:	d119      	bne.n	e586 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    e552:	68fb      	ldr	r3, [r7, #12]
    e554:	6898      	ldr	r0, [r3, #8]
    e556:	68fb      	ldr	r3, [r7, #12]
    e558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e55a:	68bb      	ldr	r3, [r7, #8]
    e55c:	0019      	movs	r1, r3
    e55e:	4b23      	ldr	r3, [pc, #140]	; (e5ec <prvCopyDataToQueue+0xdc>)
    e560:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    e562:	68fb      	ldr	r3, [r7, #12]
    e564:	689a      	ldr	r2, [r3, #8]
    e566:	68fb      	ldr	r3, [r7, #12]
    e568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e56a:	18d2      	adds	r2, r2, r3
    e56c:	68fb      	ldr	r3, [r7, #12]
    e56e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    e570:	68fb      	ldr	r3, [r7, #12]
    e572:	689a      	ldr	r2, [r3, #8]
    e574:	68fb      	ldr	r3, [r7, #12]
    e576:	685b      	ldr	r3, [r3, #4]
    e578:	429a      	cmp	r2, r3
    e57a:	d32b      	bcc.n	e5d4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    e57c:	68fb      	ldr	r3, [r7, #12]
    e57e:	681a      	ldr	r2, [r3, #0]
    e580:	68fb      	ldr	r3, [r7, #12]
    e582:	609a      	str	r2, [r3, #8]
    e584:	e026      	b.n	e5d4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e586:	68fb      	ldr	r3, [r7, #12]
    e588:	68d8      	ldr	r0, [r3, #12]
    e58a:	68fb      	ldr	r3, [r7, #12]
    e58c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e58e:	68bb      	ldr	r3, [r7, #8]
    e590:	0019      	movs	r1, r3
    e592:	4b16      	ldr	r3, [pc, #88]	; (e5ec <prvCopyDataToQueue+0xdc>)
    e594:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    e596:	68fb      	ldr	r3, [r7, #12]
    e598:	68da      	ldr	r2, [r3, #12]
    e59a:	68fb      	ldr	r3, [r7, #12]
    e59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e59e:	425b      	negs	r3, r3
    e5a0:	18d2      	adds	r2, r2, r3
    e5a2:	68fb      	ldr	r3, [r7, #12]
    e5a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    e5a6:	68fb      	ldr	r3, [r7, #12]
    e5a8:	68da      	ldr	r2, [r3, #12]
    e5aa:	68fb      	ldr	r3, [r7, #12]
    e5ac:	681b      	ldr	r3, [r3, #0]
    e5ae:	429a      	cmp	r2, r3
    e5b0:	d207      	bcs.n	e5c2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    e5b2:	68fb      	ldr	r3, [r7, #12]
    e5b4:	685a      	ldr	r2, [r3, #4]
    e5b6:	68fb      	ldr	r3, [r7, #12]
    e5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e5ba:	425b      	negs	r3, r3
    e5bc:	18d2      	adds	r2, r2, r3
    e5be:	68fb      	ldr	r3, [r7, #12]
    e5c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	2b02      	cmp	r3, #2
    e5c6:	d105      	bne.n	e5d4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e5c8:	693b      	ldr	r3, [r7, #16]
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	d002      	beq.n	e5d4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    e5ce:	693b      	ldr	r3, [r7, #16]
    e5d0:	3b01      	subs	r3, #1
    e5d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    e5d4:	693b      	ldr	r3, [r7, #16]
    e5d6:	1c5a      	adds	r2, r3, #1
    e5d8:	68fb      	ldr	r3, [r7, #12]
    e5da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    e5dc:	697b      	ldr	r3, [r7, #20]
}
    e5de:	0018      	movs	r0, r3
    e5e0:	46bd      	mov	sp, r7
    e5e2:	b006      	add	sp, #24
    e5e4:	bd80      	pop	{r7, pc}
    e5e6:	46c0      	nop			; (mov r8, r8)
    e5e8:	0000f67d 	.word	0x0000f67d
    e5ec:	00017881 	.word	0x00017881

0000e5f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    e5f0:	b580      	push	{r7, lr}
    e5f2:	b082      	sub	sp, #8
    e5f4:	af00      	add	r7, sp, #0
    e5f6:	6078      	str	r0, [r7, #4]
    e5f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    e5fa:	687b      	ldr	r3, [r7, #4]
    e5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e5fe:	2b00      	cmp	r3, #0
    e600:	d018      	beq.n	e634 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    e602:	687b      	ldr	r3, [r7, #4]
    e604:	68da      	ldr	r2, [r3, #12]
    e606:	687b      	ldr	r3, [r7, #4]
    e608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e60a:	18d2      	adds	r2, r2, r3
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    e610:	687b      	ldr	r3, [r7, #4]
    e612:	68da      	ldr	r2, [r3, #12]
    e614:	687b      	ldr	r3, [r7, #4]
    e616:	685b      	ldr	r3, [r3, #4]
    e618:	429a      	cmp	r2, r3
    e61a:	d303      	bcc.n	e624 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    e61c:	687b      	ldr	r3, [r7, #4]
    e61e:	681a      	ldr	r2, [r3, #0]
    e620:	687b      	ldr	r3, [r7, #4]
    e622:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    e624:	687b      	ldr	r3, [r7, #4]
    e626:	68d9      	ldr	r1, [r3, #12]
    e628:	687b      	ldr	r3, [r7, #4]
    e62a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e62c:	683b      	ldr	r3, [r7, #0]
    e62e:	0018      	movs	r0, r3
    e630:	4b02      	ldr	r3, [pc, #8]	; (e63c <prvCopyDataFromQueue+0x4c>)
    e632:	4798      	blx	r3
	}
}
    e634:	46c0      	nop			; (mov r8, r8)
    e636:	46bd      	mov	sp, r7
    e638:	b002      	add	sp, #8
    e63a:	bd80      	pop	{r7, pc}
    e63c:	00017881 	.word	0x00017881

0000e640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    e640:	b580      	push	{r7, lr}
    e642:	b084      	sub	sp, #16
    e644:	af00      	add	r7, sp, #0
    e646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    e648:	4b34      	ldr	r3, [pc, #208]	; (e71c <prvUnlockQueue+0xdc>)
    e64a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    e64c:	230f      	movs	r3, #15
    e64e:	18fb      	adds	r3, r7, r3
    e650:	687a      	ldr	r2, [r7, #4]
    e652:	2145      	movs	r1, #69	; 0x45
    e654:	5c52      	ldrb	r2, [r2, r1]
    e656:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e658:	e022      	b.n	e6a0 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e65e:	2b00      	cmp	r3, #0
    e660:	d009      	beq.n	e676 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    e662:	687b      	ldr	r3, [r7, #4]
    e664:	2100      	movs	r1, #0
    e666:	0018      	movs	r0, r3
    e668:	4b2d      	ldr	r3, [pc, #180]	; (e720 <prvUnlockQueue+0xe0>)
    e66a:	4798      	blx	r3
    e66c:	1e03      	subs	r3, r0, #0
    e66e:	d00f      	beq.n	e690 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    e670:	4b2c      	ldr	r3, [pc, #176]	; (e724 <prvUnlockQueue+0xe4>)
    e672:	4798      	blx	r3
    e674:	e00c      	b.n	e690 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e67a:	2b00      	cmp	r3, #0
    e67c:	d017      	beq.n	e6ae <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	3324      	adds	r3, #36	; 0x24
    e682:	0018      	movs	r0, r3
    e684:	4b28      	ldr	r3, [pc, #160]	; (e728 <prvUnlockQueue+0xe8>)
    e686:	4798      	blx	r3
    e688:	1e03      	subs	r3, r0, #0
    e68a:	d001      	beq.n	e690 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    e68c:	4b25      	ldr	r3, [pc, #148]	; (e724 <prvUnlockQueue+0xe4>)
    e68e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    e690:	230f      	movs	r3, #15
    e692:	18fb      	adds	r3, r7, r3
    e694:	781b      	ldrb	r3, [r3, #0]
    e696:	3b01      	subs	r3, #1
    e698:	b2da      	uxtb	r2, r3
    e69a:	230f      	movs	r3, #15
    e69c:	18fb      	adds	r3, r7, r3
    e69e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    e6a0:	230f      	movs	r3, #15
    e6a2:	18fb      	adds	r3, r7, r3
    e6a4:	781b      	ldrb	r3, [r3, #0]
    e6a6:	b25b      	sxtb	r3, r3
    e6a8:	2b00      	cmp	r3, #0
    e6aa:	dcd6      	bgt.n	e65a <prvUnlockQueue+0x1a>
    e6ac:	e000      	b.n	e6b0 <prvUnlockQueue+0x70>
						break;
    e6ae:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    e6b0:	687b      	ldr	r3, [r7, #4]
    e6b2:	2245      	movs	r2, #69	; 0x45
    e6b4:	21ff      	movs	r1, #255	; 0xff
    e6b6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    e6b8:	4b1c      	ldr	r3, [pc, #112]	; (e72c <prvUnlockQueue+0xec>)
    e6ba:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    e6bc:	4b17      	ldr	r3, [pc, #92]	; (e71c <prvUnlockQueue+0xdc>)
    e6be:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    e6c0:	230e      	movs	r3, #14
    e6c2:	18fb      	adds	r3, r7, r3
    e6c4:	687a      	ldr	r2, [r7, #4]
    e6c6:	2144      	movs	r1, #68	; 0x44
    e6c8:	5c52      	ldrb	r2, [r2, r1]
    e6ca:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    e6cc:	e014      	b.n	e6f8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e6ce:	687b      	ldr	r3, [r7, #4]
    e6d0:	691b      	ldr	r3, [r3, #16]
    e6d2:	2b00      	cmp	r3, #0
    e6d4:	d017      	beq.n	e706 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e6d6:	687b      	ldr	r3, [r7, #4]
    e6d8:	3310      	adds	r3, #16
    e6da:	0018      	movs	r0, r3
    e6dc:	4b12      	ldr	r3, [pc, #72]	; (e728 <prvUnlockQueue+0xe8>)
    e6de:	4798      	blx	r3
    e6e0:	1e03      	subs	r3, r0, #0
    e6e2:	d001      	beq.n	e6e8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    e6e4:	4b0f      	ldr	r3, [pc, #60]	; (e724 <prvUnlockQueue+0xe4>)
    e6e6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    e6e8:	230e      	movs	r3, #14
    e6ea:	18fb      	adds	r3, r7, r3
    e6ec:	781b      	ldrb	r3, [r3, #0]
    e6ee:	3b01      	subs	r3, #1
    e6f0:	b2da      	uxtb	r2, r3
    e6f2:	230e      	movs	r3, #14
    e6f4:	18fb      	adds	r3, r7, r3
    e6f6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    e6f8:	230e      	movs	r3, #14
    e6fa:	18fb      	adds	r3, r7, r3
    e6fc:	781b      	ldrb	r3, [r3, #0]
    e6fe:	b25b      	sxtb	r3, r3
    e700:	2b00      	cmp	r3, #0
    e702:	dce4      	bgt.n	e6ce <prvUnlockQueue+0x8e>
    e704:	e000      	b.n	e708 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    e706:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    e708:	687b      	ldr	r3, [r7, #4]
    e70a:	2244      	movs	r2, #68	; 0x44
    e70c:	21ff      	movs	r1, #255	; 0xff
    e70e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    e710:	4b06      	ldr	r3, [pc, #24]	; (e72c <prvUnlockQueue+0xec>)
    e712:	4798      	blx	r3
}
    e714:	46c0      	nop			; (mov r8, r8)
    e716:	46bd      	mov	sp, r7
    e718:	b004      	add	sp, #16
    e71a:	bd80      	pop	{r7, pc}
    e71c:	0000d9e1 	.word	0x0000d9e1
    e720:	0000e815 	.word	0x0000e815
    e724:	0000f3bd 	.word	0x0000f3bd
    e728:	0000f229 	.word	0x0000f229
    e72c:	0000da05 	.word	0x0000da05

0000e730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    e730:	b580      	push	{r7, lr}
    e732:	b084      	sub	sp, #16
    e734:	af00      	add	r7, sp, #0
    e736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    e738:	4b08      	ldr	r3, [pc, #32]	; (e75c <prvIsQueueEmpty+0x2c>)
    e73a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e740:	2b00      	cmp	r3, #0
    e742:	d102      	bne.n	e74a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    e744:	2301      	movs	r3, #1
    e746:	60fb      	str	r3, [r7, #12]
    e748:	e001      	b.n	e74e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    e74a:	2300      	movs	r3, #0
    e74c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    e74e:	4b04      	ldr	r3, [pc, #16]	; (e760 <prvIsQueueEmpty+0x30>)
    e750:	4798      	blx	r3

	return xReturn;
    e752:	68fb      	ldr	r3, [r7, #12]
}
    e754:	0018      	movs	r0, r3
    e756:	46bd      	mov	sp, r7
    e758:	b004      	add	sp, #16
    e75a:	bd80      	pop	{r7, pc}
    e75c:	0000d9e1 	.word	0x0000d9e1
    e760:	0000da05 	.word	0x0000da05

0000e764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    e764:	b580      	push	{r7, lr}
    e766:	b084      	sub	sp, #16
    e768:	af00      	add	r7, sp, #0
    e76a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    e76c:	4b09      	ldr	r3, [pc, #36]	; (e794 <prvIsQueueFull+0x30>)
    e76e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    e770:	687b      	ldr	r3, [r7, #4]
    e772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e774:	687b      	ldr	r3, [r7, #4]
    e776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e778:	429a      	cmp	r2, r3
    e77a:	d102      	bne.n	e782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    e77c:	2301      	movs	r3, #1
    e77e:	60fb      	str	r3, [r7, #12]
    e780:	e001      	b.n	e786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    e782:	2300      	movs	r3, #0
    e784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    e786:	4b04      	ldr	r3, [pc, #16]	; (e798 <prvIsQueueFull+0x34>)
    e788:	4798      	blx	r3

	return xReturn;
    e78a:	68fb      	ldr	r3, [r7, #12]
}
    e78c:	0018      	movs	r0, r3
    e78e:	46bd      	mov	sp, r7
    e790:	b004      	add	sp, #16
    e792:	bd80      	pop	{r7, pc}
    e794:	0000d9e1 	.word	0x0000d9e1
    e798:	0000da05 	.word	0x0000da05

0000e79c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    e79c:	b580      	push	{r7, lr}
    e79e:	b086      	sub	sp, #24
    e7a0:	af00      	add	r7, sp, #0
    e7a2:	60f8      	str	r0, [r7, #12]
    e7a4:	60b9      	str	r1, [r7, #8]
    e7a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e7a8:	68fb      	ldr	r3, [r7, #12]
    e7aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    e7ac:	4b15      	ldr	r3, [pc, #84]	; (e804 <vQueueWaitForMessageRestricted+0x68>)
    e7ae:	4798      	blx	r3
    e7b0:	697b      	ldr	r3, [r7, #20]
    e7b2:	2244      	movs	r2, #68	; 0x44
    e7b4:	5c9b      	ldrb	r3, [r3, r2]
    e7b6:	b25b      	sxtb	r3, r3
    e7b8:	3301      	adds	r3, #1
    e7ba:	d103      	bne.n	e7c4 <vQueueWaitForMessageRestricted+0x28>
    e7bc:	697b      	ldr	r3, [r7, #20]
    e7be:	2244      	movs	r2, #68	; 0x44
    e7c0:	2100      	movs	r1, #0
    e7c2:	5499      	strb	r1, [r3, r2]
    e7c4:	697b      	ldr	r3, [r7, #20]
    e7c6:	2245      	movs	r2, #69	; 0x45
    e7c8:	5c9b      	ldrb	r3, [r3, r2]
    e7ca:	b25b      	sxtb	r3, r3
    e7cc:	3301      	adds	r3, #1
    e7ce:	d103      	bne.n	e7d8 <vQueueWaitForMessageRestricted+0x3c>
    e7d0:	697b      	ldr	r3, [r7, #20]
    e7d2:	2245      	movs	r2, #69	; 0x45
    e7d4:	2100      	movs	r1, #0
    e7d6:	5499      	strb	r1, [r3, r2]
    e7d8:	4b0b      	ldr	r3, [pc, #44]	; (e808 <vQueueWaitForMessageRestricted+0x6c>)
    e7da:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    e7dc:	697b      	ldr	r3, [r7, #20]
    e7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e7e0:	2b00      	cmp	r3, #0
    e7e2:	d106      	bne.n	e7f2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    e7e4:	697b      	ldr	r3, [r7, #20]
    e7e6:	3324      	adds	r3, #36	; 0x24
    e7e8:	687a      	ldr	r2, [r7, #4]
    e7ea:	68b9      	ldr	r1, [r7, #8]
    e7ec:	0018      	movs	r0, r3
    e7ee:	4b07      	ldr	r3, [pc, #28]	; (e80c <vQueueWaitForMessageRestricted+0x70>)
    e7f0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    e7f2:	697b      	ldr	r3, [r7, #20]
    e7f4:	0018      	movs	r0, r3
    e7f6:	4b06      	ldr	r3, [pc, #24]	; (e810 <vQueueWaitForMessageRestricted+0x74>)
    e7f8:	4798      	blx	r3
	}
    e7fa:	46c0      	nop			; (mov r8, r8)
    e7fc:	46bd      	mov	sp, r7
    e7fe:	b006      	add	sp, #24
    e800:	bd80      	pop	{r7, pc}
    e802:	46c0      	nop			; (mov r8, r8)
    e804:	0000d9e1 	.word	0x0000d9e1
    e808:	0000da05 	.word	0x0000da05
    e80c:	0000f1d5 	.word	0x0000f1d5
    e810:	0000e641 	.word	0x0000e641

0000e814 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    e814:	b580      	push	{r7, lr}
    e816:	b086      	sub	sp, #24
    e818:	af00      	add	r7, sp, #0
    e81a:	6078      	str	r0, [r7, #4]
    e81c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    e81e:	687b      	ldr	r3, [r7, #4]
    e820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    e824:	2300      	movs	r3, #0
    e826:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    e828:	693b      	ldr	r3, [r7, #16]
    e82a:	2b00      	cmp	r3, #0
    e82c:	d101      	bne.n	e832 <prvNotifyQueueSetContainer+0x1e>
    e82e:	b672      	cpsid	i
    e830:	e7fe      	b.n	e830 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    e832:	693b      	ldr	r3, [r7, #16]
    e834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e836:	693b      	ldr	r3, [r7, #16]
    e838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e83a:	429a      	cmp	r2, r3
    e83c:	d301      	bcc.n	e842 <prvNotifyQueueSetContainer+0x2e>
    e83e:	b672      	cpsid	i
    e840:	e7fe      	b.n	e840 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    e842:	693b      	ldr	r3, [r7, #16]
    e844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e846:	693b      	ldr	r3, [r7, #16]
    e848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e84a:	429a      	cmp	r2, r3
    e84c:	d22a      	bcs.n	e8a4 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    e84e:	230f      	movs	r3, #15
    e850:	18fb      	adds	r3, r7, r3
    e852:	693a      	ldr	r2, [r7, #16]
    e854:	2145      	movs	r1, #69	; 0x45
    e856:	5c52      	ldrb	r2, [r2, r1]
    e858:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    e85a:	683a      	ldr	r2, [r7, #0]
    e85c:	1d39      	adds	r1, r7, #4
    e85e:	693b      	ldr	r3, [r7, #16]
    e860:	0018      	movs	r0, r3
    e862:	4b13      	ldr	r3, [pc, #76]	; (e8b0 <prvNotifyQueueSetContainer+0x9c>)
    e864:	4798      	blx	r3
    e866:	0003      	movs	r3, r0
    e868:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    e86a:	230f      	movs	r3, #15
    e86c:	18fb      	adds	r3, r7, r3
    e86e:	781b      	ldrb	r3, [r3, #0]
    e870:	b25b      	sxtb	r3, r3
    e872:	3301      	adds	r3, #1
    e874:	d10d      	bne.n	e892 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    e876:	693b      	ldr	r3, [r7, #16]
    e878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e87a:	2b00      	cmp	r3, #0
    e87c:	d012      	beq.n	e8a4 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    e87e:	693b      	ldr	r3, [r7, #16]
    e880:	3324      	adds	r3, #36	; 0x24
    e882:	0018      	movs	r0, r3
    e884:	4b0b      	ldr	r3, [pc, #44]	; (e8b4 <prvNotifyQueueSetContainer+0xa0>)
    e886:	4798      	blx	r3
    e888:	1e03      	subs	r3, r0, #0
    e88a:	d00b      	beq.n	e8a4 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    e88c:	2301      	movs	r3, #1
    e88e:	617b      	str	r3, [r7, #20]
    e890:	e008      	b.n	e8a4 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    e892:	230f      	movs	r3, #15
    e894:	18fb      	adds	r3, r7, r3
    e896:	781b      	ldrb	r3, [r3, #0]
    e898:	3301      	adds	r3, #1
    e89a:	b2db      	uxtb	r3, r3
    e89c:	b259      	sxtb	r1, r3
    e89e:	693b      	ldr	r3, [r7, #16]
    e8a0:	2245      	movs	r2, #69	; 0x45
    e8a2:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    e8a4:	697b      	ldr	r3, [r7, #20]
	}
    e8a6:	0018      	movs	r0, r3
    e8a8:	46bd      	mov	sp, r7
    e8aa:	b006      	add	sp, #24
    e8ac:	bd80      	pop	{r7, pc}
    e8ae:	46c0      	nop			; (mov r8, r8)
    e8b0:	0000e511 	.word	0x0000e511
    e8b4:	0000f229 	.word	0x0000f229

0000e8b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    e8b8:	b590      	push	{r4, r7, lr}
    e8ba:	b08d      	sub	sp, #52	; 0x34
    e8bc:	af04      	add	r7, sp, #16
    e8be:	60f8      	str	r0, [r7, #12]
    e8c0:	60b9      	str	r1, [r7, #8]
    e8c2:	603b      	str	r3, [r7, #0]
    e8c4:	1dbb      	adds	r3, r7, #6
    e8c6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e8c8:	1dbb      	adds	r3, r7, #6
    e8ca:	881b      	ldrh	r3, [r3, #0]
    e8cc:	009b      	lsls	r3, r3, #2
    e8ce:	0018      	movs	r0, r3
    e8d0:	4b1d      	ldr	r3, [pc, #116]	; (e948 <xTaskCreate+0x90>)
    e8d2:	4798      	blx	r3
    e8d4:	0003      	movs	r3, r0
    e8d6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    e8d8:	697b      	ldr	r3, [r7, #20]
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d010      	beq.n	e900 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    e8de:	2050      	movs	r0, #80	; 0x50
    e8e0:	4b19      	ldr	r3, [pc, #100]	; (e948 <xTaskCreate+0x90>)
    e8e2:	4798      	blx	r3
    e8e4:	0003      	movs	r3, r0
    e8e6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    e8e8:	69fb      	ldr	r3, [r7, #28]
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	d003      	beq.n	e8f6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    e8ee:	69fb      	ldr	r3, [r7, #28]
    e8f0:	697a      	ldr	r2, [r7, #20]
    e8f2:	631a      	str	r2, [r3, #48]	; 0x30
    e8f4:	e006      	b.n	e904 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    e8f6:	697b      	ldr	r3, [r7, #20]
    e8f8:	0018      	movs	r0, r3
    e8fa:	4b14      	ldr	r3, [pc, #80]	; (e94c <xTaskCreate+0x94>)
    e8fc:	4798      	blx	r3
    e8fe:	e001      	b.n	e904 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    e900:	2300      	movs	r3, #0
    e902:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    e904:	69fb      	ldr	r3, [r7, #28]
    e906:	2b00      	cmp	r3, #0
    e908:	d016      	beq.n	e938 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    e90a:	1dbb      	adds	r3, r7, #6
    e90c:	881a      	ldrh	r2, [r3, #0]
    e90e:	683c      	ldr	r4, [r7, #0]
    e910:	68b9      	ldr	r1, [r7, #8]
    e912:	68f8      	ldr	r0, [r7, #12]
    e914:	2300      	movs	r3, #0
    e916:	9303      	str	r3, [sp, #12]
    e918:	69fb      	ldr	r3, [r7, #28]
    e91a:	9302      	str	r3, [sp, #8]
    e91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e91e:	9301      	str	r3, [sp, #4]
    e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e922:	9300      	str	r3, [sp, #0]
    e924:	0023      	movs	r3, r4
    e926:	4c0a      	ldr	r4, [pc, #40]	; (e950 <xTaskCreate+0x98>)
    e928:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    e92a:	69fb      	ldr	r3, [r7, #28]
    e92c:	0018      	movs	r0, r3
    e92e:	4b09      	ldr	r3, [pc, #36]	; (e954 <xTaskCreate+0x9c>)
    e930:	4798      	blx	r3
			xReturn = pdPASS;
    e932:	2301      	movs	r3, #1
    e934:	61bb      	str	r3, [r7, #24]
    e936:	e002      	b.n	e93e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    e938:	2301      	movs	r3, #1
    e93a:	425b      	negs	r3, r3
    e93c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    e93e:	69bb      	ldr	r3, [r7, #24]
	}
    e940:	0018      	movs	r0, r3
    e942:	46bd      	mov	sp, r7
    e944:	b009      	add	sp, #36	; 0x24
    e946:	bd90      	pop	{r4, r7, pc}
    e948:	0000db1d 	.word	0x0000db1d
    e94c:	0000db51 	.word	0x0000db51
    e950:	0000e959 	.word	0x0000e959
    e954:	0000ea55 	.word	0x0000ea55

0000e958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    e958:	b580      	push	{r7, lr}
    e95a:	b086      	sub	sp, #24
    e95c:	af00      	add	r7, sp, #0
    e95e:	60f8      	str	r0, [r7, #12]
    e960:	60b9      	str	r1, [r7, #8]
    e962:	607a      	str	r2, [r7, #4]
    e964:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e96a:	687b      	ldr	r3, [r7, #4]
    e96c:	4936      	ldr	r1, [pc, #216]	; (ea48 <prvInitialiseNewTask+0xf0>)
    e96e:	468c      	mov	ip, r1
    e970:	4463      	add	r3, ip
    e972:	009b      	lsls	r3, r3, #2
    e974:	18d3      	adds	r3, r2, r3
    e976:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    e978:	693b      	ldr	r3, [r7, #16]
    e97a:	2207      	movs	r2, #7
    e97c:	4393      	bics	r3, r2
    e97e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    e980:	693b      	ldr	r3, [r7, #16]
    e982:	2207      	movs	r2, #7
    e984:	4013      	ands	r3, r2
    e986:	d001      	beq.n	e98c <prvInitialiseNewTask+0x34>
    e988:	b672      	cpsid	i
    e98a:	e7fe      	b.n	e98a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    e98c:	2300      	movs	r3, #0
    e98e:	617b      	str	r3, [r7, #20]
    e990:	e013      	b.n	e9ba <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    e992:	68ba      	ldr	r2, [r7, #8]
    e994:	697b      	ldr	r3, [r7, #20]
    e996:	18d3      	adds	r3, r2, r3
    e998:	7818      	ldrb	r0, [r3, #0]
    e99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e99c:	2134      	movs	r1, #52	; 0x34
    e99e:	697b      	ldr	r3, [r7, #20]
    e9a0:	18d3      	adds	r3, r2, r3
    e9a2:	185b      	adds	r3, r3, r1
    e9a4:	1c02      	adds	r2, r0, #0
    e9a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    e9a8:	68ba      	ldr	r2, [r7, #8]
    e9aa:	697b      	ldr	r3, [r7, #20]
    e9ac:	18d3      	adds	r3, r2, r3
    e9ae:	781b      	ldrb	r3, [r3, #0]
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	d006      	beq.n	e9c2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    e9b4:	697b      	ldr	r3, [r7, #20]
    e9b6:	3301      	adds	r3, #1
    e9b8:	617b      	str	r3, [r7, #20]
    e9ba:	697b      	ldr	r3, [r7, #20]
    e9bc:	2b09      	cmp	r3, #9
    e9be:	d9e8      	bls.n	e992 <prvInitialiseNewTask+0x3a>
    e9c0:	e000      	b.n	e9c4 <prvInitialiseNewTask+0x6c>
		{
			break;
    e9c2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9c6:	223d      	movs	r2, #61	; 0x3d
    e9c8:	2100      	movs	r1, #0
    e9ca:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    e9cc:	6a3b      	ldr	r3, [r7, #32]
    e9ce:	2b04      	cmp	r3, #4
    e9d0:	d901      	bls.n	e9d6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    e9d2:	2304      	movs	r3, #4
    e9d4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9d8:	6a3a      	ldr	r2, [r7, #32]
    e9da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9de:	6a3a      	ldr	r2, [r7, #32]
    e9e0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9e4:	2200      	movs	r2, #0
    e9e6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9ea:	3304      	adds	r3, #4
    e9ec:	0018      	movs	r0, r3
    e9ee:	4b17      	ldr	r3, [pc, #92]	; (ea4c <prvInitialiseNewTask+0xf4>)
    e9f0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9f4:	3318      	adds	r3, #24
    e9f6:	0018      	movs	r0, r3
    e9f8:	4b14      	ldr	r3, [pc, #80]	; (ea4c <prvInitialiseNewTask+0xf4>)
    e9fa:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ea00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ea02:	6a3b      	ldr	r3, [r7, #32]
    ea04:	2205      	movs	r2, #5
    ea06:	1ad2      	subs	r2, r2, r3
    ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ea10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea14:	2200      	movs	r2, #0
    ea16:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea1a:	224c      	movs	r2, #76	; 0x4c
    ea1c:	2100      	movs	r1, #0
    ea1e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    ea20:	683a      	ldr	r2, [r7, #0]
    ea22:	68f9      	ldr	r1, [r7, #12]
    ea24:	693b      	ldr	r3, [r7, #16]
    ea26:	0018      	movs	r0, r3
    ea28:	4b09      	ldr	r3, [pc, #36]	; (ea50 <prvInitialiseNewTask+0xf8>)
    ea2a:	4798      	blx	r3
    ea2c:	0002      	movs	r2, r0
    ea2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea30:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ea34:	2b00      	cmp	r3, #0
    ea36:	d002      	beq.n	ea3e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ea3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ea3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ea3e:	46c0      	nop			; (mov r8, r8)
    ea40:	46bd      	mov	sp, r7
    ea42:	b006      	add	sp, #24
    ea44:	bd80      	pop	{r7, pc}
    ea46:	46c0      	nop			; (mov r8, r8)
    ea48:	3fffffff 	.word	0x3fffffff
    ea4c:	0000dbc1 	.word	0x0000dbc1
    ea50:	0000d89d 	.word	0x0000d89d

0000ea54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    ea54:	b580      	push	{r7, lr}
    ea56:	b082      	sub	sp, #8
    ea58:	af00      	add	r7, sp, #0
    ea5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    ea5c:	4b29      	ldr	r3, [pc, #164]	; (eb04 <prvAddNewTaskToReadyList+0xb0>)
    ea5e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    ea60:	4b29      	ldr	r3, [pc, #164]	; (eb08 <prvAddNewTaskToReadyList+0xb4>)
    ea62:	681b      	ldr	r3, [r3, #0]
    ea64:	1c5a      	adds	r2, r3, #1
    ea66:	4b28      	ldr	r3, [pc, #160]	; (eb08 <prvAddNewTaskToReadyList+0xb4>)
    ea68:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    ea6a:	4b28      	ldr	r3, [pc, #160]	; (eb0c <prvAddNewTaskToReadyList+0xb8>)
    ea6c:	681b      	ldr	r3, [r3, #0]
    ea6e:	2b00      	cmp	r3, #0
    ea70:	d109      	bne.n	ea86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    ea72:	4b26      	ldr	r3, [pc, #152]	; (eb0c <prvAddNewTaskToReadyList+0xb8>)
    ea74:	687a      	ldr	r2, [r7, #4]
    ea76:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    ea78:	4b23      	ldr	r3, [pc, #140]	; (eb08 <prvAddNewTaskToReadyList+0xb4>)
    ea7a:	681b      	ldr	r3, [r3, #0]
    ea7c:	2b01      	cmp	r3, #1
    ea7e:	d110      	bne.n	eaa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    ea80:	4b23      	ldr	r3, [pc, #140]	; (eb10 <prvAddNewTaskToReadyList+0xbc>)
    ea82:	4798      	blx	r3
    ea84:	e00d      	b.n	eaa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    ea86:	4b23      	ldr	r3, [pc, #140]	; (eb14 <prvAddNewTaskToReadyList+0xc0>)
    ea88:	681b      	ldr	r3, [r3, #0]
    ea8a:	2b00      	cmp	r3, #0
    ea8c:	d109      	bne.n	eaa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    ea8e:	4b1f      	ldr	r3, [pc, #124]	; (eb0c <prvAddNewTaskToReadyList+0xb8>)
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ea94:	687b      	ldr	r3, [r7, #4]
    ea96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ea98:	429a      	cmp	r2, r3
    ea9a:	d802      	bhi.n	eaa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    ea9c:	4b1b      	ldr	r3, [pc, #108]	; (eb0c <prvAddNewTaskToReadyList+0xb8>)
    ea9e:	687a      	ldr	r2, [r7, #4]
    eaa0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    eaa2:	4b1d      	ldr	r3, [pc, #116]	; (eb18 <prvAddNewTaskToReadyList+0xc4>)
    eaa4:	681b      	ldr	r3, [r3, #0]
    eaa6:	1c5a      	adds	r2, r3, #1
    eaa8:	4b1b      	ldr	r3, [pc, #108]	; (eb18 <prvAddNewTaskToReadyList+0xc4>)
    eaaa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eab0:	4b1a      	ldr	r3, [pc, #104]	; (eb1c <prvAddNewTaskToReadyList+0xc8>)
    eab2:	681b      	ldr	r3, [r3, #0]
    eab4:	429a      	cmp	r2, r3
    eab6:	d903      	bls.n	eac0 <prvAddNewTaskToReadyList+0x6c>
    eab8:	687b      	ldr	r3, [r7, #4]
    eaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eabc:	4b17      	ldr	r3, [pc, #92]	; (eb1c <prvAddNewTaskToReadyList+0xc8>)
    eabe:	601a      	str	r2, [r3, #0]
    eac0:	687b      	ldr	r3, [r7, #4]
    eac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eac4:	0013      	movs	r3, r2
    eac6:	009b      	lsls	r3, r3, #2
    eac8:	189b      	adds	r3, r3, r2
    eaca:	009b      	lsls	r3, r3, #2
    eacc:	4a14      	ldr	r2, [pc, #80]	; (eb20 <prvAddNewTaskToReadyList+0xcc>)
    eace:	189a      	adds	r2, r3, r2
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	3304      	adds	r3, #4
    ead4:	0019      	movs	r1, r3
    ead6:	0010      	movs	r0, r2
    ead8:	4b12      	ldr	r3, [pc, #72]	; (eb24 <prvAddNewTaskToReadyList+0xd0>)
    eada:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    eadc:	4b12      	ldr	r3, [pc, #72]	; (eb28 <prvAddNewTaskToReadyList+0xd4>)
    eade:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    eae0:	4b0c      	ldr	r3, [pc, #48]	; (eb14 <prvAddNewTaskToReadyList+0xc0>)
    eae2:	681b      	ldr	r3, [r3, #0]
    eae4:	2b00      	cmp	r3, #0
    eae6:	d008      	beq.n	eafa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    eae8:	4b08      	ldr	r3, [pc, #32]	; (eb0c <prvAddNewTaskToReadyList+0xb8>)
    eaea:	681b      	ldr	r3, [r3, #0]
    eaec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eaee:	687b      	ldr	r3, [r7, #4]
    eaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    eaf2:	429a      	cmp	r2, r3
    eaf4:	d201      	bcs.n	eafa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    eaf6:	4b0d      	ldr	r3, [pc, #52]	; (eb2c <prvAddNewTaskToReadyList+0xd8>)
    eaf8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    eafa:	46c0      	nop			; (mov r8, r8)
    eafc:	46bd      	mov	sp, r7
    eafe:	b002      	add	sp, #8
    eb00:	bd80      	pop	{r7, pc}
    eb02:	46c0      	nop			; (mov r8, r8)
    eb04:	0000d9e1 	.word	0x0000d9e1
    eb08:	20000380 	.word	0x20000380
    eb0c:	200002a8 	.word	0x200002a8
    eb10:	0000f3f9 	.word	0x0000f3f9
    eb14:	2000038c 	.word	0x2000038c
    eb18:	2000039c 	.word	0x2000039c
    eb1c:	20000388 	.word	0x20000388
    eb20:	200002ac 	.word	0x200002ac
    eb24:	0000dbd7 	.word	0x0000dbd7
    eb28:	0000da05 	.word	0x0000da05
    eb2c:	0000d9c1 	.word	0x0000d9c1

0000eb30 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    eb30:	b580      	push	{r7, lr}
    eb32:	b086      	sub	sp, #24
    eb34:	af00      	add	r7, sp, #0
    eb36:	6078      	str	r0, [r7, #4]
    eb38:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    eb3a:	2300      	movs	r3, #0
    eb3c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    eb3e:	687b      	ldr	r3, [r7, #4]
    eb40:	2b00      	cmp	r3, #0
    eb42:	d101      	bne.n	eb48 <vTaskDelayUntil+0x18>
    eb44:	b672      	cpsid	i
    eb46:	e7fe      	b.n	eb46 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    eb48:	683b      	ldr	r3, [r7, #0]
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	d101      	bne.n	eb52 <vTaskDelayUntil+0x22>
    eb4e:	b672      	cpsid	i
    eb50:	e7fe      	b.n	eb50 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    eb52:	4b23      	ldr	r3, [pc, #140]	; (ebe0 <vTaskDelayUntil+0xb0>)
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	2b00      	cmp	r3, #0
    eb58:	d001      	beq.n	eb5e <vTaskDelayUntil+0x2e>
    eb5a:	b672      	cpsid	i
    eb5c:	e7fe      	b.n	eb5c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    eb5e:	4b21      	ldr	r3, [pc, #132]	; (ebe4 <vTaskDelayUntil+0xb4>)
    eb60:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    eb62:	4b21      	ldr	r3, [pc, #132]	; (ebe8 <vTaskDelayUntil+0xb8>)
    eb64:	681b      	ldr	r3, [r3, #0]
    eb66:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	681a      	ldr	r2, [r3, #0]
    eb6c:	683b      	ldr	r3, [r7, #0]
    eb6e:	18d3      	adds	r3, r2, r3
    eb70:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    eb72:	687b      	ldr	r3, [r7, #4]
    eb74:	681a      	ldr	r2, [r3, #0]
    eb76:	693b      	ldr	r3, [r7, #16]
    eb78:	429a      	cmp	r2, r3
    eb7a:	d90b      	bls.n	eb94 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    eb7c:	687b      	ldr	r3, [r7, #4]
    eb7e:	681a      	ldr	r2, [r3, #0]
    eb80:	68fb      	ldr	r3, [r7, #12]
    eb82:	429a      	cmp	r2, r3
    eb84:	d911      	bls.n	ebaa <vTaskDelayUntil+0x7a>
    eb86:	68fa      	ldr	r2, [r7, #12]
    eb88:	693b      	ldr	r3, [r7, #16]
    eb8a:	429a      	cmp	r2, r3
    eb8c:	d90d      	bls.n	ebaa <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    eb8e:	2301      	movs	r3, #1
    eb90:	617b      	str	r3, [r7, #20]
    eb92:	e00a      	b.n	ebaa <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    eb94:	687b      	ldr	r3, [r7, #4]
    eb96:	681a      	ldr	r2, [r3, #0]
    eb98:	68fb      	ldr	r3, [r7, #12]
    eb9a:	429a      	cmp	r2, r3
    eb9c:	d803      	bhi.n	eba6 <vTaskDelayUntil+0x76>
    eb9e:	68fa      	ldr	r2, [r7, #12]
    eba0:	693b      	ldr	r3, [r7, #16]
    eba2:	429a      	cmp	r2, r3
    eba4:	d901      	bls.n	ebaa <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    eba6:	2301      	movs	r3, #1
    eba8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    ebaa:	687b      	ldr	r3, [r7, #4]
    ebac:	68fa      	ldr	r2, [r7, #12]
    ebae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    ebb0:	697b      	ldr	r3, [r7, #20]
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d006      	beq.n	ebc4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    ebb6:	68fa      	ldr	r2, [r7, #12]
    ebb8:	693b      	ldr	r3, [r7, #16]
    ebba:	1ad3      	subs	r3, r2, r3
    ebbc:	2100      	movs	r1, #0
    ebbe:	0018      	movs	r0, r3
    ebc0:	4b0a      	ldr	r3, [pc, #40]	; (ebec <vTaskDelayUntil+0xbc>)
    ebc2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    ebc4:	4b0a      	ldr	r3, [pc, #40]	; (ebf0 <vTaskDelayUntil+0xc0>)
    ebc6:	4798      	blx	r3
    ebc8:	0003      	movs	r3, r0
    ebca:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    ebcc:	68bb      	ldr	r3, [r7, #8]
    ebce:	2b00      	cmp	r3, #0
    ebd0:	d101      	bne.n	ebd6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    ebd2:	4b08      	ldr	r3, [pc, #32]	; (ebf4 <vTaskDelayUntil+0xc4>)
    ebd4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ebd6:	46c0      	nop			; (mov r8, r8)
    ebd8:	46bd      	mov	sp, r7
    ebda:	b006      	add	sp, #24
    ebdc:	bd80      	pop	{r7, pc}
    ebde:	46c0      	nop			; (mov r8, r8)
    ebe0:	200003a8 	.word	0x200003a8
    ebe4:	0000ee11 	.word	0x0000ee11
    ebe8:	20000384 	.word	0x20000384
    ebec:	0000f851 	.word	0x0000f851
    ebf0:	0000ee29 	.word	0x0000ee29
    ebf4:	0000d9c1 	.word	0x0000d9c1

0000ebf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    ebf8:	b580      	push	{r7, lr}
    ebfa:	b084      	sub	sp, #16
    ebfc:	af00      	add	r7, sp, #0
    ebfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    ec00:	2300      	movs	r3, #0
    ec02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    ec04:	687b      	ldr	r3, [r7, #4]
    ec06:	2b00      	cmp	r3, #0
    ec08:	d010      	beq.n	ec2c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    ec0a:	4b0d      	ldr	r3, [pc, #52]	; (ec40 <vTaskDelay+0x48>)
    ec0c:	681b      	ldr	r3, [r3, #0]
    ec0e:	2b00      	cmp	r3, #0
    ec10:	d001      	beq.n	ec16 <vTaskDelay+0x1e>
    ec12:	b672      	cpsid	i
    ec14:	e7fe      	b.n	ec14 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    ec16:	4b0b      	ldr	r3, [pc, #44]	; (ec44 <vTaskDelay+0x4c>)
    ec18:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    ec1a:	687b      	ldr	r3, [r7, #4]
    ec1c:	2100      	movs	r1, #0
    ec1e:	0018      	movs	r0, r3
    ec20:	4b09      	ldr	r3, [pc, #36]	; (ec48 <vTaskDelay+0x50>)
    ec22:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    ec24:	4b09      	ldr	r3, [pc, #36]	; (ec4c <vTaskDelay+0x54>)
    ec26:	4798      	blx	r3
    ec28:	0003      	movs	r3, r0
    ec2a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    ec2c:	68fb      	ldr	r3, [r7, #12]
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d101      	bne.n	ec36 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    ec32:	4b07      	ldr	r3, [pc, #28]	; (ec50 <vTaskDelay+0x58>)
    ec34:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ec36:	46c0      	nop			; (mov r8, r8)
    ec38:	46bd      	mov	sp, r7
    ec3a:	b004      	add	sp, #16
    ec3c:	bd80      	pop	{r7, pc}
    ec3e:	46c0      	nop			; (mov r8, r8)
    ec40:	200003a8 	.word	0x200003a8
    ec44:	0000ee11 	.word	0x0000ee11
    ec48:	0000f851 	.word	0x0000f851
    ec4c:	0000ee29 	.word	0x0000ee29
    ec50:	0000d9c1 	.word	0x0000d9c1

0000ec54 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    ec54:	b580      	push	{r7, lr}
    ec56:	b086      	sub	sp, #24
    ec58:	af00      	add	r7, sp, #0
    ec5a:	6078      	str	r0, [r7, #4]
    ec5c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    ec5e:	2300      	movs	r3, #0
    ec60:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
    ec62:	683b      	ldr	r3, [r7, #0]
    ec64:	2b04      	cmp	r3, #4
    ec66:	d901      	bls.n	ec6c <vTaskPrioritySet+0x18>
    ec68:	b672      	cpsid	i
    ec6a:	e7fe      	b.n	ec6a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    ec6c:	683b      	ldr	r3, [r7, #0]
    ec6e:	2b04      	cmp	r3, #4
    ec70:	d901      	bls.n	ec76 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    ec72:	2304      	movs	r3, #4
    ec74:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    ec76:	4b3d      	ldr	r3, [pc, #244]	; (ed6c <vTaskPrioritySet+0x118>)
    ec78:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    ec7a:	687b      	ldr	r3, [r7, #4]
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	d102      	bne.n	ec86 <vTaskPrioritySet+0x32>
    ec80:	4b3b      	ldr	r3, [pc, #236]	; (ed70 <vTaskPrioritySet+0x11c>)
    ec82:	681b      	ldr	r3, [r3, #0]
    ec84:	e000      	b.n	ec88 <vTaskPrioritySet+0x34>
    ec86:	687b      	ldr	r3, [r7, #4]
    ec88:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    ec8a:	693b      	ldr	r3, [r7, #16]
    ec8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ec8e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    ec90:	68fa      	ldr	r2, [r7, #12]
    ec92:	683b      	ldr	r3, [r7, #0]
    ec94:	429a      	cmp	r2, r3
    ec96:	d062      	beq.n	ed5e <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    ec98:	683a      	ldr	r2, [r7, #0]
    ec9a:	68fb      	ldr	r3, [r7, #12]
    ec9c:	429a      	cmp	r2, r3
    ec9e:	d90d      	bls.n	ecbc <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
    eca0:	4b33      	ldr	r3, [pc, #204]	; (ed70 <vTaskPrioritySet+0x11c>)
    eca2:	681b      	ldr	r3, [r3, #0]
    eca4:	693a      	ldr	r2, [r7, #16]
    eca6:	429a      	cmp	r2, r3
    eca8:	d00f      	beq.n	ecca <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    ecaa:	4b31      	ldr	r3, [pc, #196]	; (ed70 <vTaskPrioritySet+0x11c>)
    ecac:	681b      	ldr	r3, [r3, #0]
    ecae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ecb0:	683b      	ldr	r3, [r7, #0]
    ecb2:	429a      	cmp	r2, r3
    ecb4:	d809      	bhi.n	ecca <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
    ecb6:	2301      	movs	r3, #1
    ecb8:	617b      	str	r3, [r7, #20]
    ecba:	e006      	b.n	ecca <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    ecbc:	4b2c      	ldr	r3, [pc, #176]	; (ed70 <vTaskPrioritySet+0x11c>)
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	693a      	ldr	r2, [r7, #16]
    ecc2:	429a      	cmp	r2, r3
    ecc4:	d101      	bne.n	ecca <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    ecc6:	2301      	movs	r3, #1
    ecc8:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    ecca:	693b      	ldr	r3, [r7, #16]
    eccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ecce:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    ecd0:	693b      	ldr	r3, [r7, #16]
    ecd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ecd4:	693b      	ldr	r3, [r7, #16]
    ecd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ecd8:	429a      	cmp	r2, r3
    ecda:	d102      	bne.n	ece2 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    ecdc:	693b      	ldr	r3, [r7, #16]
    ecde:	683a      	ldr	r2, [r7, #0]
    ece0:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    ece2:	693b      	ldr	r3, [r7, #16]
    ece4:	683a      	ldr	r2, [r7, #0]
    ece6:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    ece8:	693b      	ldr	r3, [r7, #16]
    ecea:	699b      	ldr	r3, [r3, #24]
    ecec:	2b00      	cmp	r3, #0
    ecee:	db04      	blt.n	ecfa <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ecf0:	683b      	ldr	r3, [r7, #0]
    ecf2:	2205      	movs	r2, #5
    ecf4:	1ad2      	subs	r2, r2, r3
    ecf6:	693b      	ldr	r3, [r7, #16]
    ecf8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    ecfa:	693b      	ldr	r3, [r7, #16]
    ecfc:	6959      	ldr	r1, [r3, #20]
    ecfe:	68ba      	ldr	r2, [r7, #8]
    ed00:	0013      	movs	r3, r2
    ed02:	009b      	lsls	r3, r3, #2
    ed04:	189b      	adds	r3, r3, r2
    ed06:	009b      	lsls	r3, r3, #2
    ed08:	4a1a      	ldr	r2, [pc, #104]	; (ed74 <vTaskPrioritySet+0x120>)
    ed0a:	189b      	adds	r3, r3, r2
    ed0c:	4299      	cmp	r1, r3
    ed0e:	d101      	bne.n	ed14 <vTaskPrioritySet+0xc0>
    ed10:	2301      	movs	r3, #1
    ed12:	e000      	b.n	ed16 <vTaskPrioritySet+0xc2>
    ed14:	2300      	movs	r3, #0
    ed16:	2b00      	cmp	r3, #0
    ed18:	d01c      	beq.n	ed54 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ed1a:	693b      	ldr	r3, [r7, #16]
    ed1c:	3304      	adds	r3, #4
    ed1e:	0018      	movs	r0, r3
    ed20:	4b15      	ldr	r3, [pc, #84]	; (ed78 <vTaskPrioritySet+0x124>)
    ed22:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    ed24:	693b      	ldr	r3, [r7, #16]
    ed26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed28:	4b14      	ldr	r3, [pc, #80]	; (ed7c <vTaskPrioritySet+0x128>)
    ed2a:	681b      	ldr	r3, [r3, #0]
    ed2c:	429a      	cmp	r2, r3
    ed2e:	d903      	bls.n	ed38 <vTaskPrioritySet+0xe4>
    ed30:	693b      	ldr	r3, [r7, #16]
    ed32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed34:	4b11      	ldr	r3, [pc, #68]	; (ed7c <vTaskPrioritySet+0x128>)
    ed36:	601a      	str	r2, [r3, #0]
    ed38:	693b      	ldr	r3, [r7, #16]
    ed3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed3c:	0013      	movs	r3, r2
    ed3e:	009b      	lsls	r3, r3, #2
    ed40:	189b      	adds	r3, r3, r2
    ed42:	009b      	lsls	r3, r3, #2
    ed44:	4a0b      	ldr	r2, [pc, #44]	; (ed74 <vTaskPrioritySet+0x120>)
    ed46:	189a      	adds	r2, r3, r2
    ed48:	693b      	ldr	r3, [r7, #16]
    ed4a:	3304      	adds	r3, #4
    ed4c:	0019      	movs	r1, r3
    ed4e:	0010      	movs	r0, r2
    ed50:	4b0b      	ldr	r3, [pc, #44]	; (ed80 <vTaskPrioritySet+0x12c>)
    ed52:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    ed54:	697b      	ldr	r3, [r7, #20]
    ed56:	2b00      	cmp	r3, #0
    ed58:	d001      	beq.n	ed5e <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
    ed5a:	4b0a      	ldr	r3, [pc, #40]	; (ed84 <vTaskPrioritySet+0x130>)
    ed5c:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    ed5e:	4b0a      	ldr	r3, [pc, #40]	; (ed88 <vTaskPrioritySet+0x134>)
    ed60:	4798      	blx	r3
	}
    ed62:	46c0      	nop			; (mov r8, r8)
    ed64:	46bd      	mov	sp, r7
    ed66:	b006      	add	sp, #24
    ed68:	bd80      	pop	{r7, pc}
    ed6a:	46c0      	nop			; (mov r8, r8)
    ed6c:	0000d9e1 	.word	0x0000d9e1
    ed70:	200002a8 	.word	0x200002a8
    ed74:	200002ac 	.word	0x200002ac
    ed78:	0000dc87 	.word	0x0000dc87
    ed7c:	20000388 	.word	0x20000388
    ed80:	0000dbd7 	.word	0x0000dbd7
    ed84:	0000d9c1 	.word	0x0000d9c1
    ed88:	0000da05 	.word	0x0000da05

0000ed8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    ed8c:	b590      	push	{r4, r7, lr}
    ed8e:	b085      	sub	sp, #20
    ed90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    ed92:	4916      	ldr	r1, [pc, #88]	; (edec <vTaskStartScheduler+0x60>)
    ed94:	4816      	ldr	r0, [pc, #88]	; (edf0 <vTaskStartScheduler+0x64>)
    ed96:	4b17      	ldr	r3, [pc, #92]	; (edf4 <vTaskStartScheduler+0x68>)
    ed98:	9301      	str	r3, [sp, #4]
    ed9a:	2300      	movs	r3, #0
    ed9c:	9300      	str	r3, [sp, #0]
    ed9e:	2300      	movs	r3, #0
    eda0:	2282      	movs	r2, #130	; 0x82
    eda2:	4c15      	ldr	r4, [pc, #84]	; (edf8 <vTaskStartScheduler+0x6c>)
    eda4:	47a0      	blx	r4
    eda6:	0003      	movs	r3, r0
    eda8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	2b01      	cmp	r3, #1
    edae:	d103      	bne.n	edb8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    edb0:	4b12      	ldr	r3, [pc, #72]	; (edfc <vTaskStartScheduler+0x70>)
    edb2:	4798      	blx	r3
    edb4:	0003      	movs	r3, r0
    edb6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    edb8:	687b      	ldr	r3, [r7, #4]
    edba:	2b01      	cmp	r3, #1
    edbc:	d10d      	bne.n	edda <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    edbe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    edc0:	4b0f      	ldr	r3, [pc, #60]	; (ee00 <vTaskStartScheduler+0x74>)
    edc2:	2201      	movs	r2, #1
    edc4:	4252      	negs	r2, r2
    edc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    edc8:	4b0e      	ldr	r3, [pc, #56]	; (ee04 <vTaskStartScheduler+0x78>)
    edca:	2201      	movs	r2, #1
    edcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    edce:	4b0e      	ldr	r3, [pc, #56]	; (ee08 <vTaskStartScheduler+0x7c>)
    edd0:	2200      	movs	r2, #0
    edd2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    edd4:	4b0d      	ldr	r3, [pc, #52]	; (ee0c <vTaskStartScheduler+0x80>)
    edd6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    edd8:	e004      	b.n	ede4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	3301      	adds	r3, #1
    edde:	d101      	bne.n	ede4 <vTaskStartScheduler+0x58>
    ede0:	b672      	cpsid	i
    ede2:	e7fe      	b.n	ede2 <vTaskStartScheduler+0x56>
}
    ede4:	46c0      	nop			; (mov r8, r8)
    ede6:	46bd      	mov	sp, r7
    ede8:	b003      	add	sp, #12
    edea:	bd90      	pop	{r4, r7, pc}
    edec:	0001942c 	.word	0x0001942c
    edf0:	0000f3d1 	.word	0x0000f3d1
    edf4:	200003a4 	.word	0x200003a4
    edf8:	0000e8b9 	.word	0x0000e8b9
    edfc:	0000f905 	.word	0x0000f905
    ee00:	200003a0 	.word	0x200003a0
    ee04:	2000038c 	.word	0x2000038c
    ee08:	20000384 	.word	0x20000384
    ee0c:	0000d969 	.word	0x0000d969

0000ee10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    ee10:	b580      	push	{r7, lr}
    ee12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    ee14:	4b03      	ldr	r3, [pc, #12]	; (ee24 <vTaskSuspendAll+0x14>)
    ee16:	681b      	ldr	r3, [r3, #0]
    ee18:	1c5a      	adds	r2, r3, #1
    ee1a:	4b02      	ldr	r3, [pc, #8]	; (ee24 <vTaskSuspendAll+0x14>)
    ee1c:	601a      	str	r2, [r3, #0]
}
    ee1e:	46c0      	nop			; (mov r8, r8)
    ee20:	46bd      	mov	sp, r7
    ee22:	bd80      	pop	{r7, pc}
    ee24:	200003a8 	.word	0x200003a8

0000ee28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    ee28:	b580      	push	{r7, lr}
    ee2a:	b084      	sub	sp, #16
    ee2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    ee2e:	2300      	movs	r3, #0
    ee30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    ee32:	2300      	movs	r3, #0
    ee34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    ee36:	4b3a      	ldr	r3, [pc, #232]	; (ef20 <xTaskResumeAll+0xf8>)
    ee38:	681b      	ldr	r3, [r3, #0]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d101      	bne.n	ee42 <xTaskResumeAll+0x1a>
    ee3e:	b672      	cpsid	i
    ee40:	e7fe      	b.n	ee40 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    ee42:	4b38      	ldr	r3, [pc, #224]	; (ef24 <xTaskResumeAll+0xfc>)
    ee44:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    ee46:	4b36      	ldr	r3, [pc, #216]	; (ef20 <xTaskResumeAll+0xf8>)
    ee48:	681b      	ldr	r3, [r3, #0]
    ee4a:	1e5a      	subs	r2, r3, #1
    ee4c:	4b34      	ldr	r3, [pc, #208]	; (ef20 <xTaskResumeAll+0xf8>)
    ee4e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    ee50:	4b33      	ldr	r3, [pc, #204]	; (ef20 <xTaskResumeAll+0xf8>)
    ee52:	681b      	ldr	r3, [r3, #0]
    ee54:	2b00      	cmp	r3, #0
    ee56:	d15b      	bne.n	ef10 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    ee58:	4b33      	ldr	r3, [pc, #204]	; (ef28 <xTaskResumeAll+0x100>)
    ee5a:	681b      	ldr	r3, [r3, #0]
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	d057      	beq.n	ef10 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    ee60:	e02f      	b.n	eec2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    ee62:	4b32      	ldr	r3, [pc, #200]	; (ef2c <xTaskResumeAll+0x104>)
    ee64:	68db      	ldr	r3, [r3, #12]
    ee66:	68db      	ldr	r3, [r3, #12]
    ee68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    ee6a:	68fb      	ldr	r3, [r7, #12]
    ee6c:	3318      	adds	r3, #24
    ee6e:	0018      	movs	r0, r3
    ee70:	4b2f      	ldr	r3, [pc, #188]	; (ef30 <xTaskResumeAll+0x108>)
    ee72:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ee74:	68fb      	ldr	r3, [r7, #12]
    ee76:	3304      	adds	r3, #4
    ee78:	0018      	movs	r0, r3
    ee7a:	4b2d      	ldr	r3, [pc, #180]	; (ef30 <xTaskResumeAll+0x108>)
    ee7c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    ee7e:	68fb      	ldr	r3, [r7, #12]
    ee80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ee82:	4b2c      	ldr	r3, [pc, #176]	; (ef34 <xTaskResumeAll+0x10c>)
    ee84:	681b      	ldr	r3, [r3, #0]
    ee86:	429a      	cmp	r2, r3
    ee88:	d903      	bls.n	ee92 <xTaskResumeAll+0x6a>
    ee8a:	68fb      	ldr	r3, [r7, #12]
    ee8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ee8e:	4b29      	ldr	r3, [pc, #164]	; (ef34 <xTaskResumeAll+0x10c>)
    ee90:	601a      	str	r2, [r3, #0]
    ee92:	68fb      	ldr	r3, [r7, #12]
    ee94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ee96:	0013      	movs	r3, r2
    ee98:	009b      	lsls	r3, r3, #2
    ee9a:	189b      	adds	r3, r3, r2
    ee9c:	009b      	lsls	r3, r3, #2
    ee9e:	4a26      	ldr	r2, [pc, #152]	; (ef38 <xTaskResumeAll+0x110>)
    eea0:	189a      	adds	r2, r3, r2
    eea2:	68fb      	ldr	r3, [r7, #12]
    eea4:	3304      	adds	r3, #4
    eea6:	0019      	movs	r1, r3
    eea8:	0010      	movs	r0, r2
    eeaa:	4b24      	ldr	r3, [pc, #144]	; (ef3c <xTaskResumeAll+0x114>)
    eeac:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    eeae:	68fb      	ldr	r3, [r7, #12]
    eeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eeb2:	4b23      	ldr	r3, [pc, #140]	; (ef40 <xTaskResumeAll+0x118>)
    eeb4:	681b      	ldr	r3, [r3, #0]
    eeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    eeb8:	429a      	cmp	r2, r3
    eeba:	d302      	bcc.n	eec2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    eebc:	4b21      	ldr	r3, [pc, #132]	; (ef44 <xTaskResumeAll+0x11c>)
    eebe:	2201      	movs	r2, #1
    eec0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    eec2:	4b1a      	ldr	r3, [pc, #104]	; (ef2c <xTaskResumeAll+0x104>)
    eec4:	681b      	ldr	r3, [r3, #0]
    eec6:	2b00      	cmp	r3, #0
    eec8:	d1cb      	bne.n	ee62 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    eeca:	68fb      	ldr	r3, [r7, #12]
    eecc:	2b00      	cmp	r3, #0
    eece:	d001      	beq.n	eed4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    eed0:	4b1d      	ldr	r3, [pc, #116]	; (ef48 <xTaskResumeAll+0x120>)
    eed2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    eed4:	4b1d      	ldr	r3, [pc, #116]	; (ef4c <xTaskResumeAll+0x124>)
    eed6:	681b      	ldr	r3, [r3, #0]
    eed8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    eeda:	687b      	ldr	r3, [r7, #4]
    eedc:	2b00      	cmp	r3, #0
    eede:	d00f      	beq.n	ef00 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    eee0:	4b1b      	ldr	r3, [pc, #108]	; (ef50 <xTaskResumeAll+0x128>)
    eee2:	4798      	blx	r3
    eee4:	1e03      	subs	r3, r0, #0
    eee6:	d002      	beq.n	eeee <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    eee8:	4b16      	ldr	r3, [pc, #88]	; (ef44 <xTaskResumeAll+0x11c>)
    eeea:	2201      	movs	r2, #1
    eeec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    eeee:	687b      	ldr	r3, [r7, #4]
    eef0:	3b01      	subs	r3, #1
    eef2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    eef4:	687b      	ldr	r3, [r7, #4]
    eef6:	2b00      	cmp	r3, #0
    eef8:	d1f2      	bne.n	eee0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    eefa:	4b14      	ldr	r3, [pc, #80]	; (ef4c <xTaskResumeAll+0x124>)
    eefc:	2200      	movs	r2, #0
    eefe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    ef00:	4b10      	ldr	r3, [pc, #64]	; (ef44 <xTaskResumeAll+0x11c>)
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	2b00      	cmp	r3, #0
    ef06:	d003      	beq.n	ef10 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    ef08:	2301      	movs	r3, #1
    ef0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    ef0c:	4b11      	ldr	r3, [pc, #68]	; (ef54 <xTaskResumeAll+0x12c>)
    ef0e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    ef10:	4b11      	ldr	r3, [pc, #68]	; (ef58 <xTaskResumeAll+0x130>)
    ef12:	4798      	blx	r3

	return xAlreadyYielded;
    ef14:	68bb      	ldr	r3, [r7, #8]
}
    ef16:	0018      	movs	r0, r3
    ef18:	46bd      	mov	sp, r7
    ef1a:	b004      	add	sp, #16
    ef1c:	bd80      	pop	{r7, pc}
    ef1e:	46c0      	nop			; (mov r8, r8)
    ef20:	200003a8 	.word	0x200003a8
    ef24:	0000d9e1 	.word	0x0000d9e1
    ef28:	20000380 	.word	0x20000380
    ef2c:	20000340 	.word	0x20000340
    ef30:	0000dc87 	.word	0x0000dc87
    ef34:	20000388 	.word	0x20000388
    ef38:	200002ac 	.word	0x200002ac
    ef3c:	0000dbd7 	.word	0x0000dbd7
    ef40:	200002a8 	.word	0x200002a8
    ef44:	20000394 	.word	0x20000394
    ef48:	0000f519 	.word	0x0000f519
    ef4c:	20000390 	.word	0x20000390
    ef50:	0000ef79 	.word	0x0000ef79
    ef54:	0000d9c1 	.word	0x0000d9c1
    ef58:	0000da05 	.word	0x0000da05

0000ef5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    ef5c:	b580      	push	{r7, lr}
    ef5e:	b082      	sub	sp, #8
    ef60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    ef62:	4b04      	ldr	r3, [pc, #16]	; (ef74 <xTaskGetTickCount+0x18>)
    ef64:	681b      	ldr	r3, [r3, #0]
    ef66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    ef68:	687b      	ldr	r3, [r7, #4]
}
    ef6a:	0018      	movs	r0, r3
    ef6c:	46bd      	mov	sp, r7
    ef6e:	b002      	add	sp, #8
    ef70:	bd80      	pop	{r7, pc}
    ef72:	46c0      	nop			; (mov r8, r8)
    ef74:	20000384 	.word	0x20000384

0000ef78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    ef78:	b580      	push	{r7, lr}
    ef7a:	b086      	sub	sp, #24
    ef7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    ef7e:	2300      	movs	r3, #0
    ef80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    ef82:	4b4c      	ldr	r3, [pc, #304]	; (f0b4 <xTaskIncrementTick+0x13c>)
    ef84:	681b      	ldr	r3, [r3, #0]
    ef86:	2b00      	cmp	r3, #0
    ef88:	d000      	beq.n	ef8c <xTaskIncrementTick+0x14>
    ef8a:	e083      	b.n	f094 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    ef8c:	4b4a      	ldr	r3, [pc, #296]	; (f0b8 <xTaskIncrementTick+0x140>)
    ef8e:	681b      	ldr	r3, [r3, #0]
    ef90:	3301      	adds	r3, #1
    ef92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    ef94:	4b48      	ldr	r3, [pc, #288]	; (f0b8 <xTaskIncrementTick+0x140>)
    ef96:	693a      	ldr	r2, [r7, #16]
    ef98:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    ef9a:	693b      	ldr	r3, [r7, #16]
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d117      	bne.n	efd0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    efa0:	4b46      	ldr	r3, [pc, #280]	; (f0bc <xTaskIncrementTick+0x144>)
    efa2:	681b      	ldr	r3, [r3, #0]
    efa4:	681b      	ldr	r3, [r3, #0]
    efa6:	2b00      	cmp	r3, #0
    efa8:	d001      	beq.n	efae <xTaskIncrementTick+0x36>
    efaa:	b672      	cpsid	i
    efac:	e7fe      	b.n	efac <xTaskIncrementTick+0x34>
    efae:	4b43      	ldr	r3, [pc, #268]	; (f0bc <xTaskIncrementTick+0x144>)
    efb0:	681b      	ldr	r3, [r3, #0]
    efb2:	60fb      	str	r3, [r7, #12]
    efb4:	4b42      	ldr	r3, [pc, #264]	; (f0c0 <xTaskIncrementTick+0x148>)
    efb6:	681a      	ldr	r2, [r3, #0]
    efb8:	4b40      	ldr	r3, [pc, #256]	; (f0bc <xTaskIncrementTick+0x144>)
    efba:	601a      	str	r2, [r3, #0]
    efbc:	4b40      	ldr	r3, [pc, #256]	; (f0c0 <xTaskIncrementTick+0x148>)
    efbe:	68fa      	ldr	r2, [r7, #12]
    efc0:	601a      	str	r2, [r3, #0]
    efc2:	4b40      	ldr	r3, [pc, #256]	; (f0c4 <xTaskIncrementTick+0x14c>)
    efc4:	681b      	ldr	r3, [r3, #0]
    efc6:	1c5a      	adds	r2, r3, #1
    efc8:	4b3e      	ldr	r3, [pc, #248]	; (f0c4 <xTaskIncrementTick+0x14c>)
    efca:	601a      	str	r2, [r3, #0]
    efcc:	4b3e      	ldr	r3, [pc, #248]	; (f0c8 <xTaskIncrementTick+0x150>)
    efce:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    efd0:	4b3e      	ldr	r3, [pc, #248]	; (f0cc <xTaskIncrementTick+0x154>)
    efd2:	681b      	ldr	r3, [r3, #0]
    efd4:	693a      	ldr	r2, [r7, #16]
    efd6:	429a      	cmp	r2, r3
    efd8:	d34e      	bcc.n	f078 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    efda:	4b38      	ldr	r3, [pc, #224]	; (f0bc <xTaskIncrementTick+0x144>)
    efdc:	681b      	ldr	r3, [r3, #0]
    efde:	681b      	ldr	r3, [r3, #0]
    efe0:	2b00      	cmp	r3, #0
    efe2:	d101      	bne.n	efe8 <xTaskIncrementTick+0x70>
    efe4:	2301      	movs	r3, #1
    efe6:	e000      	b.n	efea <xTaskIncrementTick+0x72>
    efe8:	2300      	movs	r3, #0
    efea:	2b00      	cmp	r3, #0
    efec:	d004      	beq.n	eff8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    efee:	4b37      	ldr	r3, [pc, #220]	; (f0cc <xTaskIncrementTick+0x154>)
    eff0:	2201      	movs	r2, #1
    eff2:	4252      	negs	r2, r2
    eff4:	601a      	str	r2, [r3, #0]
					break;
    eff6:	e03f      	b.n	f078 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    eff8:	4b30      	ldr	r3, [pc, #192]	; (f0bc <xTaskIncrementTick+0x144>)
    effa:	681b      	ldr	r3, [r3, #0]
    effc:	68db      	ldr	r3, [r3, #12]
    effe:	68db      	ldr	r3, [r3, #12]
    f000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    f002:	68bb      	ldr	r3, [r7, #8]
    f004:	685b      	ldr	r3, [r3, #4]
    f006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    f008:	693a      	ldr	r2, [r7, #16]
    f00a:	687b      	ldr	r3, [r7, #4]
    f00c:	429a      	cmp	r2, r3
    f00e:	d203      	bcs.n	f018 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    f010:	4b2e      	ldr	r3, [pc, #184]	; (f0cc <xTaskIncrementTick+0x154>)
    f012:	687a      	ldr	r2, [r7, #4]
    f014:	601a      	str	r2, [r3, #0]
						break;
    f016:	e02f      	b.n	f078 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f018:	68bb      	ldr	r3, [r7, #8]
    f01a:	3304      	adds	r3, #4
    f01c:	0018      	movs	r0, r3
    f01e:	4b2c      	ldr	r3, [pc, #176]	; (f0d0 <xTaskIncrementTick+0x158>)
    f020:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    f022:	68bb      	ldr	r3, [r7, #8]
    f024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f026:	2b00      	cmp	r3, #0
    f028:	d004      	beq.n	f034 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f02a:	68bb      	ldr	r3, [r7, #8]
    f02c:	3318      	adds	r3, #24
    f02e:	0018      	movs	r0, r3
    f030:	4b27      	ldr	r3, [pc, #156]	; (f0d0 <xTaskIncrementTick+0x158>)
    f032:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    f034:	68bb      	ldr	r3, [r7, #8]
    f036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f038:	4b26      	ldr	r3, [pc, #152]	; (f0d4 <xTaskIncrementTick+0x15c>)
    f03a:	681b      	ldr	r3, [r3, #0]
    f03c:	429a      	cmp	r2, r3
    f03e:	d903      	bls.n	f048 <xTaskIncrementTick+0xd0>
    f040:	68bb      	ldr	r3, [r7, #8]
    f042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f044:	4b23      	ldr	r3, [pc, #140]	; (f0d4 <xTaskIncrementTick+0x15c>)
    f046:	601a      	str	r2, [r3, #0]
    f048:	68bb      	ldr	r3, [r7, #8]
    f04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f04c:	0013      	movs	r3, r2
    f04e:	009b      	lsls	r3, r3, #2
    f050:	189b      	adds	r3, r3, r2
    f052:	009b      	lsls	r3, r3, #2
    f054:	4a20      	ldr	r2, [pc, #128]	; (f0d8 <xTaskIncrementTick+0x160>)
    f056:	189a      	adds	r2, r3, r2
    f058:	68bb      	ldr	r3, [r7, #8]
    f05a:	3304      	adds	r3, #4
    f05c:	0019      	movs	r1, r3
    f05e:	0010      	movs	r0, r2
    f060:	4b1e      	ldr	r3, [pc, #120]	; (f0dc <xTaskIncrementTick+0x164>)
    f062:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f064:	68bb      	ldr	r3, [r7, #8]
    f066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f068:	4b1d      	ldr	r3, [pc, #116]	; (f0e0 <xTaskIncrementTick+0x168>)
    f06a:	681b      	ldr	r3, [r3, #0]
    f06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f06e:	429a      	cmp	r2, r3
    f070:	d3b3      	bcc.n	efda <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    f072:	2301      	movs	r3, #1
    f074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f076:	e7b0      	b.n	efda <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    f078:	4b19      	ldr	r3, [pc, #100]	; (f0e0 <xTaskIncrementTick+0x168>)
    f07a:	681b      	ldr	r3, [r3, #0]
    f07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f07e:	4916      	ldr	r1, [pc, #88]	; (f0d8 <xTaskIncrementTick+0x160>)
    f080:	0013      	movs	r3, r2
    f082:	009b      	lsls	r3, r3, #2
    f084:	189b      	adds	r3, r3, r2
    f086:	009b      	lsls	r3, r3, #2
    f088:	585b      	ldr	r3, [r3, r1]
    f08a:	2b01      	cmp	r3, #1
    f08c:	d907      	bls.n	f09e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    f08e:	2301      	movs	r3, #1
    f090:	617b      	str	r3, [r7, #20]
    f092:	e004      	b.n	f09e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    f094:	4b13      	ldr	r3, [pc, #76]	; (f0e4 <xTaskIncrementTick+0x16c>)
    f096:	681b      	ldr	r3, [r3, #0]
    f098:	1c5a      	adds	r2, r3, #1
    f09a:	4b12      	ldr	r3, [pc, #72]	; (f0e4 <xTaskIncrementTick+0x16c>)
    f09c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    f09e:	4b12      	ldr	r3, [pc, #72]	; (f0e8 <xTaskIncrementTick+0x170>)
    f0a0:	681b      	ldr	r3, [r3, #0]
    f0a2:	2b00      	cmp	r3, #0
    f0a4:	d001      	beq.n	f0aa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    f0a6:	2301      	movs	r3, #1
    f0a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    f0aa:	697b      	ldr	r3, [r7, #20]
}
    f0ac:	0018      	movs	r0, r3
    f0ae:	46bd      	mov	sp, r7
    f0b0:	b006      	add	sp, #24
    f0b2:	bd80      	pop	{r7, pc}
    f0b4:	200003a8 	.word	0x200003a8
    f0b8:	20000384 	.word	0x20000384
    f0bc:	20000338 	.word	0x20000338
    f0c0:	2000033c 	.word	0x2000033c
    f0c4:	20000398 	.word	0x20000398
    f0c8:	0000f519 	.word	0x0000f519
    f0cc:	200003a0 	.word	0x200003a0
    f0d0:	0000dc87 	.word	0x0000dc87
    f0d4:	20000388 	.word	0x20000388
    f0d8:	200002ac 	.word	0x200002ac
    f0dc:	0000dbd7 	.word	0x0000dbd7
    f0e0:	200002a8 	.word	0x200002a8
    f0e4:	20000390 	.word	0x20000390
    f0e8:	20000394 	.word	0x20000394

0000f0ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    f0ec:	b580      	push	{r7, lr}
    f0ee:	b082      	sub	sp, #8
    f0f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    f0f2:	4b22      	ldr	r3, [pc, #136]	; (f17c <vTaskSwitchContext+0x90>)
    f0f4:	681b      	ldr	r3, [r3, #0]
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	d003      	beq.n	f102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    f0fa:	4b21      	ldr	r3, [pc, #132]	; (f180 <vTaskSwitchContext+0x94>)
    f0fc:	2201      	movs	r2, #1
    f0fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    f100:	e037      	b.n	f172 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    f102:	4b1f      	ldr	r3, [pc, #124]	; (f180 <vTaskSwitchContext+0x94>)
    f104:	2200      	movs	r2, #0
    f106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    f108:	4b1e      	ldr	r3, [pc, #120]	; (f184 <vTaskSwitchContext+0x98>)
    f10a:	681b      	ldr	r3, [r3, #0]
    f10c:	607b      	str	r3, [r7, #4]
    f10e:	e007      	b.n	f120 <vTaskSwitchContext+0x34>
    f110:	687b      	ldr	r3, [r7, #4]
    f112:	2b00      	cmp	r3, #0
    f114:	d101      	bne.n	f11a <vTaskSwitchContext+0x2e>
    f116:	b672      	cpsid	i
    f118:	e7fe      	b.n	f118 <vTaskSwitchContext+0x2c>
    f11a:	687b      	ldr	r3, [r7, #4]
    f11c:	3b01      	subs	r3, #1
    f11e:	607b      	str	r3, [r7, #4]
    f120:	4919      	ldr	r1, [pc, #100]	; (f188 <vTaskSwitchContext+0x9c>)
    f122:	687a      	ldr	r2, [r7, #4]
    f124:	0013      	movs	r3, r2
    f126:	009b      	lsls	r3, r3, #2
    f128:	189b      	adds	r3, r3, r2
    f12a:	009b      	lsls	r3, r3, #2
    f12c:	585b      	ldr	r3, [r3, r1]
    f12e:	2b00      	cmp	r3, #0
    f130:	d0ee      	beq.n	f110 <vTaskSwitchContext+0x24>
    f132:	687a      	ldr	r2, [r7, #4]
    f134:	0013      	movs	r3, r2
    f136:	009b      	lsls	r3, r3, #2
    f138:	189b      	adds	r3, r3, r2
    f13a:	009b      	lsls	r3, r3, #2
    f13c:	4a12      	ldr	r2, [pc, #72]	; (f188 <vTaskSwitchContext+0x9c>)
    f13e:	189b      	adds	r3, r3, r2
    f140:	603b      	str	r3, [r7, #0]
    f142:	683b      	ldr	r3, [r7, #0]
    f144:	685b      	ldr	r3, [r3, #4]
    f146:	685a      	ldr	r2, [r3, #4]
    f148:	683b      	ldr	r3, [r7, #0]
    f14a:	605a      	str	r2, [r3, #4]
    f14c:	683b      	ldr	r3, [r7, #0]
    f14e:	685a      	ldr	r2, [r3, #4]
    f150:	683b      	ldr	r3, [r7, #0]
    f152:	3308      	adds	r3, #8
    f154:	429a      	cmp	r2, r3
    f156:	d104      	bne.n	f162 <vTaskSwitchContext+0x76>
    f158:	683b      	ldr	r3, [r7, #0]
    f15a:	685b      	ldr	r3, [r3, #4]
    f15c:	685a      	ldr	r2, [r3, #4]
    f15e:	683b      	ldr	r3, [r7, #0]
    f160:	605a      	str	r2, [r3, #4]
    f162:	683b      	ldr	r3, [r7, #0]
    f164:	685b      	ldr	r3, [r3, #4]
    f166:	68da      	ldr	r2, [r3, #12]
    f168:	4b08      	ldr	r3, [pc, #32]	; (f18c <vTaskSwitchContext+0xa0>)
    f16a:	601a      	str	r2, [r3, #0]
    f16c:	4b05      	ldr	r3, [pc, #20]	; (f184 <vTaskSwitchContext+0x98>)
    f16e:	687a      	ldr	r2, [r7, #4]
    f170:	601a      	str	r2, [r3, #0]
}
    f172:	46c0      	nop			; (mov r8, r8)
    f174:	46bd      	mov	sp, r7
    f176:	b002      	add	sp, #8
    f178:	bd80      	pop	{r7, pc}
    f17a:	46c0      	nop			; (mov r8, r8)
    f17c:	200003a8 	.word	0x200003a8
    f180:	20000394 	.word	0x20000394
    f184:	20000388 	.word	0x20000388
    f188:	200002ac 	.word	0x200002ac
    f18c:	200002a8 	.word	0x200002a8

0000f190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    f190:	b580      	push	{r7, lr}
    f192:	b082      	sub	sp, #8
    f194:	af00      	add	r7, sp, #0
    f196:	6078      	str	r0, [r7, #4]
    f198:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    f19a:	687b      	ldr	r3, [r7, #4]
    f19c:	2b00      	cmp	r3, #0
    f19e:	d101      	bne.n	f1a4 <vTaskPlaceOnEventList+0x14>
    f1a0:	b672      	cpsid	i
    f1a2:	e7fe      	b.n	f1a2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f1a4:	4b08      	ldr	r3, [pc, #32]	; (f1c8 <vTaskPlaceOnEventList+0x38>)
    f1a6:	681b      	ldr	r3, [r3, #0]
    f1a8:	3318      	adds	r3, #24
    f1aa:	001a      	movs	r2, r3
    f1ac:	687b      	ldr	r3, [r7, #4]
    f1ae:	0011      	movs	r1, r2
    f1b0:	0018      	movs	r0, r3
    f1b2:	4b06      	ldr	r3, [pc, #24]	; (f1cc <vTaskPlaceOnEventList+0x3c>)
    f1b4:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    f1b6:	683b      	ldr	r3, [r7, #0]
    f1b8:	2101      	movs	r1, #1
    f1ba:	0018      	movs	r0, r3
    f1bc:	4b04      	ldr	r3, [pc, #16]	; (f1d0 <vTaskPlaceOnEventList+0x40>)
    f1be:	4798      	blx	r3
}
    f1c0:	46c0      	nop			; (mov r8, r8)
    f1c2:	46bd      	mov	sp, r7
    f1c4:	b002      	add	sp, #8
    f1c6:	bd80      	pop	{r7, pc}
    f1c8:	200002a8 	.word	0x200002a8
    f1cc:	0000dc1b 	.word	0x0000dc1b
    f1d0:	0000f851 	.word	0x0000f851

0000f1d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    f1d4:	b580      	push	{r7, lr}
    f1d6:	b084      	sub	sp, #16
    f1d8:	af00      	add	r7, sp, #0
    f1da:	60f8      	str	r0, [r7, #12]
    f1dc:	60b9      	str	r1, [r7, #8]
    f1de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    f1e0:	68fb      	ldr	r3, [r7, #12]
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	d101      	bne.n	f1ea <vTaskPlaceOnEventListRestricted+0x16>
    f1e6:	b672      	cpsid	i
    f1e8:	e7fe      	b.n	f1e8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f1ea:	4b0c      	ldr	r3, [pc, #48]	; (f21c <vTaskPlaceOnEventListRestricted+0x48>)
    f1ec:	681b      	ldr	r3, [r3, #0]
    f1ee:	3318      	adds	r3, #24
    f1f0:	001a      	movs	r2, r3
    f1f2:	68fb      	ldr	r3, [r7, #12]
    f1f4:	0011      	movs	r1, r2
    f1f6:	0018      	movs	r0, r3
    f1f8:	4b09      	ldr	r3, [pc, #36]	; (f220 <vTaskPlaceOnEventListRestricted+0x4c>)
    f1fa:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    f1fc:	687b      	ldr	r3, [r7, #4]
    f1fe:	2b00      	cmp	r3, #0
    f200:	d002      	beq.n	f208 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    f202:	2301      	movs	r3, #1
    f204:	425b      	negs	r3, r3
    f206:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    f208:	687a      	ldr	r2, [r7, #4]
    f20a:	68bb      	ldr	r3, [r7, #8]
    f20c:	0011      	movs	r1, r2
    f20e:	0018      	movs	r0, r3
    f210:	4b04      	ldr	r3, [pc, #16]	; (f224 <vTaskPlaceOnEventListRestricted+0x50>)
    f212:	4798      	blx	r3
	}
    f214:	46c0      	nop			; (mov r8, r8)
    f216:	46bd      	mov	sp, r7
    f218:	b004      	add	sp, #16
    f21a:	bd80      	pop	{r7, pc}
    f21c:	200002a8 	.word	0x200002a8
    f220:	0000dbd7 	.word	0x0000dbd7
    f224:	0000f851 	.word	0x0000f851

0000f228 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    f228:	b580      	push	{r7, lr}
    f22a:	b084      	sub	sp, #16
    f22c:	af00      	add	r7, sp, #0
    f22e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    f230:	687b      	ldr	r3, [r7, #4]
    f232:	68db      	ldr	r3, [r3, #12]
    f234:	68db      	ldr	r3, [r3, #12]
    f236:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    f238:	68bb      	ldr	r3, [r7, #8]
    f23a:	2b00      	cmp	r3, #0
    f23c:	d101      	bne.n	f242 <xTaskRemoveFromEventList+0x1a>
    f23e:	b672      	cpsid	i
    f240:	e7fe      	b.n	f240 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    f242:	68bb      	ldr	r3, [r7, #8]
    f244:	3318      	adds	r3, #24
    f246:	0018      	movs	r0, r3
    f248:	4b1f      	ldr	r3, [pc, #124]	; (f2c8 <xTaskRemoveFromEventList+0xa0>)
    f24a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f24c:	4b1f      	ldr	r3, [pc, #124]	; (f2cc <xTaskRemoveFromEventList+0xa4>)
    f24e:	681b      	ldr	r3, [r3, #0]
    f250:	2b00      	cmp	r3, #0
    f252:	d11d      	bne.n	f290 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f254:	68bb      	ldr	r3, [r7, #8]
    f256:	3304      	adds	r3, #4
    f258:	0018      	movs	r0, r3
    f25a:	4b1b      	ldr	r3, [pc, #108]	; (f2c8 <xTaskRemoveFromEventList+0xa0>)
    f25c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    f25e:	68bb      	ldr	r3, [r7, #8]
    f260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f262:	4b1b      	ldr	r3, [pc, #108]	; (f2d0 <xTaskRemoveFromEventList+0xa8>)
    f264:	681b      	ldr	r3, [r3, #0]
    f266:	429a      	cmp	r2, r3
    f268:	d903      	bls.n	f272 <xTaskRemoveFromEventList+0x4a>
    f26a:	68bb      	ldr	r3, [r7, #8]
    f26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f26e:	4b18      	ldr	r3, [pc, #96]	; (f2d0 <xTaskRemoveFromEventList+0xa8>)
    f270:	601a      	str	r2, [r3, #0]
    f272:	68bb      	ldr	r3, [r7, #8]
    f274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f276:	0013      	movs	r3, r2
    f278:	009b      	lsls	r3, r3, #2
    f27a:	189b      	adds	r3, r3, r2
    f27c:	009b      	lsls	r3, r3, #2
    f27e:	4a15      	ldr	r2, [pc, #84]	; (f2d4 <xTaskRemoveFromEventList+0xac>)
    f280:	189a      	adds	r2, r3, r2
    f282:	68bb      	ldr	r3, [r7, #8]
    f284:	3304      	adds	r3, #4
    f286:	0019      	movs	r1, r3
    f288:	0010      	movs	r0, r2
    f28a:	4b13      	ldr	r3, [pc, #76]	; (f2d8 <xTaskRemoveFromEventList+0xb0>)
    f28c:	4798      	blx	r3
    f28e:	e007      	b.n	f2a0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    f290:	68bb      	ldr	r3, [r7, #8]
    f292:	3318      	adds	r3, #24
    f294:	001a      	movs	r2, r3
    f296:	4b11      	ldr	r3, [pc, #68]	; (f2dc <xTaskRemoveFromEventList+0xb4>)
    f298:	0011      	movs	r1, r2
    f29a:	0018      	movs	r0, r3
    f29c:	4b0e      	ldr	r3, [pc, #56]	; (f2d8 <xTaskRemoveFromEventList+0xb0>)
    f29e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    f2a0:	68bb      	ldr	r3, [r7, #8]
    f2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2a4:	4b0e      	ldr	r3, [pc, #56]	; (f2e0 <xTaskRemoveFromEventList+0xb8>)
    f2a6:	681b      	ldr	r3, [r3, #0]
    f2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f2aa:	429a      	cmp	r2, r3
    f2ac:	d905      	bls.n	f2ba <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    f2ae:	2301      	movs	r3, #1
    f2b0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    f2b2:	4b0c      	ldr	r3, [pc, #48]	; (f2e4 <xTaskRemoveFromEventList+0xbc>)
    f2b4:	2201      	movs	r2, #1
    f2b6:	601a      	str	r2, [r3, #0]
    f2b8:	e001      	b.n	f2be <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    f2ba:	2300      	movs	r3, #0
    f2bc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    f2be:	68fb      	ldr	r3, [r7, #12]
}
    f2c0:	0018      	movs	r0, r3
    f2c2:	46bd      	mov	sp, r7
    f2c4:	b004      	add	sp, #16
    f2c6:	bd80      	pop	{r7, pc}
    f2c8:	0000dc87 	.word	0x0000dc87
    f2cc:	200003a8 	.word	0x200003a8
    f2d0:	20000388 	.word	0x20000388
    f2d4:	200002ac 	.word	0x200002ac
    f2d8:	0000dbd7 	.word	0x0000dbd7
    f2dc:	20000340 	.word	0x20000340
    f2e0:	200002a8 	.word	0x200002a8
    f2e4:	20000394 	.word	0x20000394

0000f2e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    f2e8:	b580      	push	{r7, lr}
    f2ea:	b082      	sub	sp, #8
    f2ec:	af00      	add	r7, sp, #0
    f2ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    f2f0:	4b05      	ldr	r3, [pc, #20]	; (f308 <vTaskInternalSetTimeOutState+0x20>)
    f2f2:	681a      	ldr	r2, [r3, #0]
    f2f4:	687b      	ldr	r3, [r7, #4]
    f2f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    f2f8:	4b04      	ldr	r3, [pc, #16]	; (f30c <vTaskInternalSetTimeOutState+0x24>)
    f2fa:	681a      	ldr	r2, [r3, #0]
    f2fc:	687b      	ldr	r3, [r7, #4]
    f2fe:	605a      	str	r2, [r3, #4]
}
    f300:	46c0      	nop			; (mov r8, r8)
    f302:	46bd      	mov	sp, r7
    f304:	b002      	add	sp, #8
    f306:	bd80      	pop	{r7, pc}
    f308:	20000398 	.word	0x20000398
    f30c:	20000384 	.word	0x20000384

0000f310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    f310:	b580      	push	{r7, lr}
    f312:	b086      	sub	sp, #24
    f314:	af00      	add	r7, sp, #0
    f316:	6078      	str	r0, [r7, #4]
    f318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    f31a:	687b      	ldr	r3, [r7, #4]
    f31c:	2b00      	cmp	r3, #0
    f31e:	d101      	bne.n	f324 <xTaskCheckForTimeOut+0x14>
    f320:	b672      	cpsid	i
    f322:	e7fe      	b.n	f322 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    f324:	683b      	ldr	r3, [r7, #0]
    f326:	2b00      	cmp	r3, #0
    f328:	d101      	bne.n	f32e <xTaskCheckForTimeOut+0x1e>
    f32a:	b672      	cpsid	i
    f32c:	e7fe      	b.n	f32c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    f32e:	4b1e      	ldr	r3, [pc, #120]	; (f3a8 <xTaskCheckForTimeOut+0x98>)
    f330:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    f332:	4b1e      	ldr	r3, [pc, #120]	; (f3ac <xTaskCheckForTimeOut+0x9c>)
    f334:	681b      	ldr	r3, [r3, #0]
    f336:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	685b      	ldr	r3, [r3, #4]
    f33c:	693a      	ldr	r2, [r7, #16]
    f33e:	1ad3      	subs	r3, r2, r3
    f340:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    f342:	683b      	ldr	r3, [r7, #0]
    f344:	681b      	ldr	r3, [r3, #0]
    f346:	3301      	adds	r3, #1
    f348:	d102      	bne.n	f350 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    f34a:	2300      	movs	r3, #0
    f34c:	617b      	str	r3, [r7, #20]
    f34e:	e024      	b.n	f39a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    f350:	687b      	ldr	r3, [r7, #4]
    f352:	681a      	ldr	r2, [r3, #0]
    f354:	4b16      	ldr	r3, [pc, #88]	; (f3b0 <xTaskCheckForTimeOut+0xa0>)
    f356:	681b      	ldr	r3, [r3, #0]
    f358:	429a      	cmp	r2, r3
    f35a:	d007      	beq.n	f36c <xTaskCheckForTimeOut+0x5c>
    f35c:	687b      	ldr	r3, [r7, #4]
    f35e:	685a      	ldr	r2, [r3, #4]
    f360:	693b      	ldr	r3, [r7, #16]
    f362:	429a      	cmp	r2, r3
    f364:	d802      	bhi.n	f36c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    f366:	2301      	movs	r3, #1
    f368:	617b      	str	r3, [r7, #20]
    f36a:	e016      	b.n	f39a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    f36c:	683b      	ldr	r3, [r7, #0]
    f36e:	681a      	ldr	r2, [r3, #0]
    f370:	68fb      	ldr	r3, [r7, #12]
    f372:	429a      	cmp	r2, r3
    f374:	d90c      	bls.n	f390 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    f376:	683b      	ldr	r3, [r7, #0]
    f378:	681a      	ldr	r2, [r3, #0]
    f37a:	68fb      	ldr	r3, [r7, #12]
    f37c:	1ad2      	subs	r2, r2, r3
    f37e:	683b      	ldr	r3, [r7, #0]
    f380:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    f382:	687b      	ldr	r3, [r7, #4]
    f384:	0018      	movs	r0, r3
    f386:	4b0b      	ldr	r3, [pc, #44]	; (f3b4 <xTaskCheckForTimeOut+0xa4>)
    f388:	4798      	blx	r3
			xReturn = pdFALSE;
    f38a:	2300      	movs	r3, #0
    f38c:	617b      	str	r3, [r7, #20]
    f38e:	e004      	b.n	f39a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    f390:	683b      	ldr	r3, [r7, #0]
    f392:	2200      	movs	r2, #0
    f394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    f396:	2301      	movs	r3, #1
    f398:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    f39a:	4b07      	ldr	r3, [pc, #28]	; (f3b8 <xTaskCheckForTimeOut+0xa8>)
    f39c:	4798      	blx	r3

	return xReturn;
    f39e:	697b      	ldr	r3, [r7, #20]
}
    f3a0:	0018      	movs	r0, r3
    f3a2:	46bd      	mov	sp, r7
    f3a4:	b006      	add	sp, #24
    f3a6:	bd80      	pop	{r7, pc}
    f3a8:	0000d9e1 	.word	0x0000d9e1
    f3ac:	20000384 	.word	0x20000384
    f3b0:	20000398 	.word	0x20000398
    f3b4:	0000f2e9 	.word	0x0000f2e9
    f3b8:	0000da05 	.word	0x0000da05

0000f3bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    f3bc:	b580      	push	{r7, lr}
    f3be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    f3c0:	4b02      	ldr	r3, [pc, #8]	; (f3cc <vTaskMissedYield+0x10>)
    f3c2:	2201      	movs	r2, #1
    f3c4:	601a      	str	r2, [r3, #0]
}
    f3c6:	46c0      	nop			; (mov r8, r8)
    f3c8:	46bd      	mov	sp, r7
    f3ca:	bd80      	pop	{r7, pc}
    f3cc:	20000394 	.word	0x20000394

0000f3d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    f3d0:	b580      	push	{r7, lr}
    f3d2:	b082      	sub	sp, #8
    f3d4:	af00      	add	r7, sp, #0
    f3d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    f3d8:	4b04      	ldr	r3, [pc, #16]	; (f3ec <prvIdleTask+0x1c>)
    f3da:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    f3dc:	4b04      	ldr	r3, [pc, #16]	; (f3f0 <prvIdleTask+0x20>)
    f3de:	681b      	ldr	r3, [r3, #0]
    f3e0:	2b01      	cmp	r3, #1
    f3e2:	d9f9      	bls.n	f3d8 <prvIdleTask+0x8>
			{
				taskYIELD();
    f3e4:	4b03      	ldr	r3, [pc, #12]	; (f3f4 <prvIdleTask+0x24>)
    f3e6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    f3e8:	e7f6      	b.n	f3d8 <prvIdleTask+0x8>
    f3ea:	46c0      	nop			; (mov r8, r8)
    f3ec:	0000f485 	.word	0x0000f485
    f3f0:	200002ac 	.word	0x200002ac
    f3f4:	0000d9c1 	.word	0x0000d9c1

0000f3f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b082      	sub	sp, #8
    f3fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f3fe:	2300      	movs	r3, #0
    f400:	607b      	str	r3, [r7, #4]
    f402:	e00c      	b.n	f41e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    f404:	687a      	ldr	r2, [r7, #4]
    f406:	0013      	movs	r3, r2
    f408:	009b      	lsls	r3, r3, #2
    f40a:	189b      	adds	r3, r3, r2
    f40c:	009b      	lsls	r3, r3, #2
    f40e:	4a14      	ldr	r2, [pc, #80]	; (f460 <prvInitialiseTaskLists+0x68>)
    f410:	189b      	adds	r3, r3, r2
    f412:	0018      	movs	r0, r3
    f414:	4b13      	ldr	r3, [pc, #76]	; (f464 <prvInitialiseTaskLists+0x6c>)
    f416:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f418:	687b      	ldr	r3, [r7, #4]
    f41a:	3301      	adds	r3, #1
    f41c:	607b      	str	r3, [r7, #4]
    f41e:	687b      	ldr	r3, [r7, #4]
    f420:	2b04      	cmp	r3, #4
    f422:	d9ef      	bls.n	f404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    f424:	4b10      	ldr	r3, [pc, #64]	; (f468 <prvInitialiseTaskLists+0x70>)
    f426:	0018      	movs	r0, r3
    f428:	4b0e      	ldr	r3, [pc, #56]	; (f464 <prvInitialiseTaskLists+0x6c>)
    f42a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    f42c:	4b0f      	ldr	r3, [pc, #60]	; (f46c <prvInitialiseTaskLists+0x74>)
    f42e:	0018      	movs	r0, r3
    f430:	4b0c      	ldr	r3, [pc, #48]	; (f464 <prvInitialiseTaskLists+0x6c>)
    f432:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    f434:	4b0e      	ldr	r3, [pc, #56]	; (f470 <prvInitialiseTaskLists+0x78>)
    f436:	0018      	movs	r0, r3
    f438:	4b0a      	ldr	r3, [pc, #40]	; (f464 <prvInitialiseTaskLists+0x6c>)
    f43a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    f43c:	4b0d      	ldr	r3, [pc, #52]	; (f474 <prvInitialiseTaskLists+0x7c>)
    f43e:	0018      	movs	r0, r3
    f440:	4b08      	ldr	r3, [pc, #32]	; (f464 <prvInitialiseTaskLists+0x6c>)
    f442:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    f444:	4b0c      	ldr	r3, [pc, #48]	; (f478 <prvInitialiseTaskLists+0x80>)
    f446:	0018      	movs	r0, r3
    f448:	4b06      	ldr	r3, [pc, #24]	; (f464 <prvInitialiseTaskLists+0x6c>)
    f44a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    f44c:	4b0b      	ldr	r3, [pc, #44]	; (f47c <prvInitialiseTaskLists+0x84>)
    f44e:	4a06      	ldr	r2, [pc, #24]	; (f468 <prvInitialiseTaskLists+0x70>)
    f450:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    f452:	4b0b      	ldr	r3, [pc, #44]	; (f480 <prvInitialiseTaskLists+0x88>)
    f454:	4a05      	ldr	r2, [pc, #20]	; (f46c <prvInitialiseTaskLists+0x74>)
    f456:	601a      	str	r2, [r3, #0]
}
    f458:	46c0      	nop			; (mov r8, r8)
    f45a:	46bd      	mov	sp, r7
    f45c:	b002      	add	sp, #8
    f45e:	bd80      	pop	{r7, pc}
    f460:	200002ac 	.word	0x200002ac
    f464:	0000db85 	.word	0x0000db85
    f468:	20000310 	.word	0x20000310
    f46c:	20000324 	.word	0x20000324
    f470:	20000340 	.word	0x20000340
    f474:	20000354 	.word	0x20000354
    f478:	2000036c 	.word	0x2000036c
    f47c:	20000338 	.word	0x20000338
    f480:	2000033c 	.word	0x2000033c

0000f484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    f484:	b580      	push	{r7, lr}
    f486:	b082      	sub	sp, #8
    f488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f48a:	e01a      	b.n	f4c2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    f48c:	4b11      	ldr	r3, [pc, #68]	; (f4d4 <prvCheckTasksWaitingTermination+0x50>)
    f48e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    f490:	4b11      	ldr	r3, [pc, #68]	; (f4d8 <prvCheckTasksWaitingTermination+0x54>)
    f492:	68db      	ldr	r3, [r3, #12]
    f494:	68db      	ldr	r3, [r3, #12]
    f496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f498:	687b      	ldr	r3, [r7, #4]
    f49a:	3304      	adds	r3, #4
    f49c:	0018      	movs	r0, r3
    f49e:	4b0f      	ldr	r3, [pc, #60]	; (f4dc <prvCheckTasksWaitingTermination+0x58>)
    f4a0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    f4a2:	4b0f      	ldr	r3, [pc, #60]	; (f4e0 <prvCheckTasksWaitingTermination+0x5c>)
    f4a4:	681b      	ldr	r3, [r3, #0]
    f4a6:	1e5a      	subs	r2, r3, #1
    f4a8:	4b0d      	ldr	r3, [pc, #52]	; (f4e0 <prvCheckTasksWaitingTermination+0x5c>)
    f4aa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    f4ac:	4b0d      	ldr	r3, [pc, #52]	; (f4e4 <prvCheckTasksWaitingTermination+0x60>)
    f4ae:	681b      	ldr	r3, [r3, #0]
    f4b0:	1e5a      	subs	r2, r3, #1
    f4b2:	4b0c      	ldr	r3, [pc, #48]	; (f4e4 <prvCheckTasksWaitingTermination+0x60>)
    f4b4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    f4b6:	4b0c      	ldr	r3, [pc, #48]	; (f4e8 <prvCheckTasksWaitingTermination+0x64>)
    f4b8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    f4ba:	687b      	ldr	r3, [r7, #4]
    f4bc:	0018      	movs	r0, r3
    f4be:	4b0b      	ldr	r3, [pc, #44]	; (f4ec <prvCheckTasksWaitingTermination+0x68>)
    f4c0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f4c2:	4b08      	ldr	r3, [pc, #32]	; (f4e4 <prvCheckTasksWaitingTermination+0x60>)
    f4c4:	681b      	ldr	r3, [r3, #0]
    f4c6:	2b00      	cmp	r3, #0
    f4c8:	d1e0      	bne.n	f48c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    f4ca:	46c0      	nop			; (mov r8, r8)
    f4cc:	46bd      	mov	sp, r7
    f4ce:	b002      	add	sp, #8
    f4d0:	bd80      	pop	{r7, pc}
    f4d2:	46c0      	nop			; (mov r8, r8)
    f4d4:	0000d9e1 	.word	0x0000d9e1
    f4d8:	20000354 	.word	0x20000354
    f4dc:	0000dc87 	.word	0x0000dc87
    f4e0:	20000380 	.word	0x20000380
    f4e4:	20000368 	.word	0x20000368
    f4e8:	0000da05 	.word	0x0000da05
    f4ec:	0000f4f1 	.word	0x0000f4f1

0000f4f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    f4f0:	b580      	push	{r7, lr}
    f4f2:	b082      	sub	sp, #8
    f4f4:	af00      	add	r7, sp, #0
    f4f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    f4f8:	687b      	ldr	r3, [r7, #4]
    f4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f4fc:	0018      	movs	r0, r3
    f4fe:	4b05      	ldr	r3, [pc, #20]	; (f514 <prvDeleteTCB+0x24>)
    f500:	4798      	blx	r3
			vPortFree( pxTCB );
    f502:	687b      	ldr	r3, [r7, #4]
    f504:	0018      	movs	r0, r3
    f506:	4b03      	ldr	r3, [pc, #12]	; (f514 <prvDeleteTCB+0x24>)
    f508:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    f50a:	46c0      	nop			; (mov r8, r8)
    f50c:	46bd      	mov	sp, r7
    f50e:	b002      	add	sp, #8
    f510:	bd80      	pop	{r7, pc}
    f512:	46c0      	nop			; (mov r8, r8)
    f514:	0000db51 	.word	0x0000db51

0000f518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    f518:	b580      	push	{r7, lr}
    f51a:	b082      	sub	sp, #8
    f51c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f51e:	4b0e      	ldr	r3, [pc, #56]	; (f558 <prvResetNextTaskUnblockTime+0x40>)
    f520:	681b      	ldr	r3, [r3, #0]
    f522:	681b      	ldr	r3, [r3, #0]
    f524:	2b00      	cmp	r3, #0
    f526:	d101      	bne.n	f52c <prvResetNextTaskUnblockTime+0x14>
    f528:	2301      	movs	r3, #1
    f52a:	e000      	b.n	f52e <prvResetNextTaskUnblockTime+0x16>
    f52c:	2300      	movs	r3, #0
    f52e:	2b00      	cmp	r3, #0
    f530:	d004      	beq.n	f53c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    f532:	4b0a      	ldr	r3, [pc, #40]	; (f55c <prvResetNextTaskUnblockTime+0x44>)
    f534:	2201      	movs	r2, #1
    f536:	4252      	negs	r2, r2
    f538:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    f53a:	e008      	b.n	f54e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f53c:	4b06      	ldr	r3, [pc, #24]	; (f558 <prvResetNextTaskUnblockTime+0x40>)
    f53e:	681b      	ldr	r3, [r3, #0]
    f540:	68db      	ldr	r3, [r3, #12]
    f542:	68db      	ldr	r3, [r3, #12]
    f544:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f546:	687b      	ldr	r3, [r7, #4]
    f548:	685a      	ldr	r2, [r3, #4]
    f54a:	4b04      	ldr	r3, [pc, #16]	; (f55c <prvResetNextTaskUnblockTime+0x44>)
    f54c:	601a      	str	r2, [r3, #0]
}
    f54e:	46c0      	nop			; (mov r8, r8)
    f550:	46bd      	mov	sp, r7
    f552:	b002      	add	sp, #8
    f554:	bd80      	pop	{r7, pc}
    f556:	46c0      	nop			; (mov r8, r8)
    f558:	20000338 	.word	0x20000338
    f55c:	200003a0 	.word	0x200003a0

0000f560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    f560:	b580      	push	{r7, lr}
    f562:	b082      	sub	sp, #8
    f564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    f566:	4b0a      	ldr	r3, [pc, #40]	; (f590 <xTaskGetSchedulerState+0x30>)
    f568:	681b      	ldr	r3, [r3, #0]
    f56a:	2b00      	cmp	r3, #0
    f56c:	d102      	bne.n	f574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    f56e:	2301      	movs	r3, #1
    f570:	607b      	str	r3, [r7, #4]
    f572:	e008      	b.n	f586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f574:	4b07      	ldr	r3, [pc, #28]	; (f594 <xTaskGetSchedulerState+0x34>)
    f576:	681b      	ldr	r3, [r3, #0]
    f578:	2b00      	cmp	r3, #0
    f57a:	d102      	bne.n	f582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    f57c:	2302      	movs	r3, #2
    f57e:	607b      	str	r3, [r7, #4]
    f580:	e001      	b.n	f586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    f582:	2300      	movs	r3, #0
    f584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    f586:	687b      	ldr	r3, [r7, #4]
	}
    f588:	0018      	movs	r0, r3
    f58a:	46bd      	mov	sp, r7
    f58c:	b002      	add	sp, #8
    f58e:	bd80      	pop	{r7, pc}
    f590:	2000038c 	.word	0x2000038c
    f594:	200003a8 	.word	0x200003a8

0000f598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    f598:	b580      	push	{r7, lr}
    f59a:	b084      	sub	sp, #16
    f59c:	af00      	add	r7, sp, #0
    f59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    f5a0:	687b      	ldr	r3, [r7, #4]
    f5a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    f5a4:	2300      	movs	r3, #0
    f5a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    f5a8:	687b      	ldr	r3, [r7, #4]
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	d056      	beq.n	f65c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    f5ae:	68bb      	ldr	r3, [r7, #8]
    f5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f5b2:	4b2d      	ldr	r3, [pc, #180]	; (f668 <xTaskPriorityInherit+0xd0>)
    f5b4:	681b      	ldr	r3, [r3, #0]
    f5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f5b8:	429a      	cmp	r2, r3
    f5ba:	d246      	bcs.n	f64a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    f5bc:	68bb      	ldr	r3, [r7, #8]
    f5be:	699b      	ldr	r3, [r3, #24]
    f5c0:	2b00      	cmp	r3, #0
    f5c2:	db06      	blt.n	f5d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f5c4:	4b28      	ldr	r3, [pc, #160]	; (f668 <xTaskPriorityInherit+0xd0>)
    f5c6:	681b      	ldr	r3, [r3, #0]
    f5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f5ca:	2205      	movs	r2, #5
    f5cc:	1ad2      	subs	r2, r2, r3
    f5ce:	68bb      	ldr	r3, [r7, #8]
    f5d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    f5d2:	68bb      	ldr	r3, [r7, #8]
    f5d4:	6959      	ldr	r1, [r3, #20]
    f5d6:	68bb      	ldr	r3, [r7, #8]
    f5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f5da:	0013      	movs	r3, r2
    f5dc:	009b      	lsls	r3, r3, #2
    f5de:	189b      	adds	r3, r3, r2
    f5e0:	009b      	lsls	r3, r3, #2
    f5e2:	4a22      	ldr	r2, [pc, #136]	; (f66c <xTaskPriorityInherit+0xd4>)
    f5e4:	189b      	adds	r3, r3, r2
    f5e6:	4299      	cmp	r1, r3
    f5e8:	d101      	bne.n	f5ee <xTaskPriorityInherit+0x56>
    f5ea:	2301      	movs	r3, #1
    f5ec:	e000      	b.n	f5f0 <xTaskPriorityInherit+0x58>
    f5ee:	2300      	movs	r3, #0
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d022      	beq.n	f63a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f5f4:	68bb      	ldr	r3, [r7, #8]
    f5f6:	3304      	adds	r3, #4
    f5f8:	0018      	movs	r0, r3
    f5fa:	4b1d      	ldr	r3, [pc, #116]	; (f670 <xTaskPriorityInherit+0xd8>)
    f5fc:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    f5fe:	4b1a      	ldr	r3, [pc, #104]	; (f668 <xTaskPriorityInherit+0xd0>)
    f600:	681b      	ldr	r3, [r3, #0]
    f602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f604:	68bb      	ldr	r3, [r7, #8]
    f606:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    f608:	68bb      	ldr	r3, [r7, #8]
    f60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f60c:	4b19      	ldr	r3, [pc, #100]	; (f674 <xTaskPriorityInherit+0xdc>)
    f60e:	681b      	ldr	r3, [r3, #0]
    f610:	429a      	cmp	r2, r3
    f612:	d903      	bls.n	f61c <xTaskPriorityInherit+0x84>
    f614:	68bb      	ldr	r3, [r7, #8]
    f616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f618:	4b16      	ldr	r3, [pc, #88]	; (f674 <xTaskPriorityInherit+0xdc>)
    f61a:	601a      	str	r2, [r3, #0]
    f61c:	68bb      	ldr	r3, [r7, #8]
    f61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f620:	0013      	movs	r3, r2
    f622:	009b      	lsls	r3, r3, #2
    f624:	189b      	adds	r3, r3, r2
    f626:	009b      	lsls	r3, r3, #2
    f628:	4a10      	ldr	r2, [pc, #64]	; (f66c <xTaskPriorityInherit+0xd4>)
    f62a:	189a      	adds	r2, r3, r2
    f62c:	68bb      	ldr	r3, [r7, #8]
    f62e:	3304      	adds	r3, #4
    f630:	0019      	movs	r1, r3
    f632:	0010      	movs	r0, r2
    f634:	4b10      	ldr	r3, [pc, #64]	; (f678 <xTaskPriorityInherit+0xe0>)
    f636:	4798      	blx	r3
    f638:	e004      	b.n	f644 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    f63a:	4b0b      	ldr	r3, [pc, #44]	; (f668 <xTaskPriorityInherit+0xd0>)
    f63c:	681b      	ldr	r3, [r3, #0]
    f63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f640:	68bb      	ldr	r3, [r7, #8]
    f642:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    f644:	2301      	movs	r3, #1
    f646:	60fb      	str	r3, [r7, #12]
    f648:	e008      	b.n	f65c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    f64a:	68bb      	ldr	r3, [r7, #8]
    f64c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f64e:	4b06      	ldr	r3, [pc, #24]	; (f668 <xTaskPriorityInherit+0xd0>)
    f650:	681b      	ldr	r3, [r3, #0]
    f652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f654:	429a      	cmp	r2, r3
    f656:	d201      	bcs.n	f65c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    f658:	2301      	movs	r3, #1
    f65a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    f65c:	68fb      	ldr	r3, [r7, #12]
	}
    f65e:	0018      	movs	r0, r3
    f660:	46bd      	mov	sp, r7
    f662:	b004      	add	sp, #16
    f664:	bd80      	pop	{r7, pc}
    f666:	46c0      	nop			; (mov r8, r8)
    f668:	200002a8 	.word	0x200002a8
    f66c:	200002ac 	.word	0x200002ac
    f670:	0000dc87 	.word	0x0000dc87
    f674:	20000388 	.word	0x20000388
    f678:	0000dbd7 	.word	0x0000dbd7

0000f67c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    f67c:	b580      	push	{r7, lr}
    f67e:	b084      	sub	sp, #16
    f680:	af00      	add	r7, sp, #0
    f682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    f684:	687b      	ldr	r3, [r7, #4]
    f686:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    f688:	2300      	movs	r3, #0
    f68a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    f68c:	687b      	ldr	r3, [r7, #4]
    f68e:	2b00      	cmp	r3, #0
    f690:	d044      	beq.n	f71c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    f692:	4b25      	ldr	r3, [pc, #148]	; (f728 <xTaskPriorityDisinherit+0xac>)
    f694:	681b      	ldr	r3, [r3, #0]
    f696:	68ba      	ldr	r2, [r7, #8]
    f698:	429a      	cmp	r2, r3
    f69a:	d001      	beq.n	f6a0 <xTaskPriorityDisinherit+0x24>
    f69c:	b672      	cpsid	i
    f69e:	e7fe      	b.n	f69e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    f6a0:	68bb      	ldr	r3, [r7, #8]
    f6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f6a4:	2b00      	cmp	r3, #0
    f6a6:	d101      	bne.n	f6ac <xTaskPriorityDisinherit+0x30>
    f6a8:	b672      	cpsid	i
    f6aa:	e7fe      	b.n	f6aa <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    f6ac:	68bb      	ldr	r3, [r7, #8]
    f6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f6b0:	1e5a      	subs	r2, r3, #1
    f6b2:	68bb      	ldr	r3, [r7, #8]
    f6b4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    f6b6:	68bb      	ldr	r3, [r7, #8]
    f6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f6ba:	68bb      	ldr	r3, [r7, #8]
    f6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f6be:	429a      	cmp	r2, r3
    f6c0:	d02c      	beq.n	f71c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    f6c2:	68bb      	ldr	r3, [r7, #8]
    f6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d128      	bne.n	f71c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f6ca:	68bb      	ldr	r3, [r7, #8]
    f6cc:	3304      	adds	r3, #4
    f6ce:	0018      	movs	r0, r3
    f6d0:	4b16      	ldr	r3, [pc, #88]	; (f72c <xTaskPriorityDisinherit+0xb0>)
    f6d2:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    f6d4:	68bb      	ldr	r3, [r7, #8]
    f6d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f6d8:	68bb      	ldr	r3, [r7, #8]
    f6da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f6dc:	68bb      	ldr	r3, [r7, #8]
    f6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f6e0:	2205      	movs	r2, #5
    f6e2:	1ad2      	subs	r2, r2, r3
    f6e4:	68bb      	ldr	r3, [r7, #8]
    f6e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    f6e8:	68bb      	ldr	r3, [r7, #8]
    f6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f6ec:	4b10      	ldr	r3, [pc, #64]	; (f730 <xTaskPriorityDisinherit+0xb4>)
    f6ee:	681b      	ldr	r3, [r3, #0]
    f6f0:	429a      	cmp	r2, r3
    f6f2:	d903      	bls.n	f6fc <xTaskPriorityDisinherit+0x80>
    f6f4:	68bb      	ldr	r3, [r7, #8]
    f6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f6f8:	4b0d      	ldr	r3, [pc, #52]	; (f730 <xTaskPriorityDisinherit+0xb4>)
    f6fa:	601a      	str	r2, [r3, #0]
    f6fc:	68bb      	ldr	r3, [r7, #8]
    f6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f700:	0013      	movs	r3, r2
    f702:	009b      	lsls	r3, r3, #2
    f704:	189b      	adds	r3, r3, r2
    f706:	009b      	lsls	r3, r3, #2
    f708:	4a0a      	ldr	r2, [pc, #40]	; (f734 <xTaskPriorityDisinherit+0xb8>)
    f70a:	189a      	adds	r2, r3, r2
    f70c:	68bb      	ldr	r3, [r7, #8]
    f70e:	3304      	adds	r3, #4
    f710:	0019      	movs	r1, r3
    f712:	0010      	movs	r0, r2
    f714:	4b08      	ldr	r3, [pc, #32]	; (f738 <xTaskPriorityDisinherit+0xbc>)
    f716:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    f718:	2301      	movs	r3, #1
    f71a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    f71c:	68fb      	ldr	r3, [r7, #12]
	}
    f71e:	0018      	movs	r0, r3
    f720:	46bd      	mov	sp, r7
    f722:	b004      	add	sp, #16
    f724:	bd80      	pop	{r7, pc}
    f726:	46c0      	nop			; (mov r8, r8)
    f728:	200002a8 	.word	0x200002a8
    f72c:	0000dc87 	.word	0x0000dc87
    f730:	20000388 	.word	0x20000388
    f734:	200002ac 	.word	0x200002ac
    f738:	0000dbd7 	.word	0x0000dbd7

0000f73c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    f73c:	b580      	push	{r7, lr}
    f73e:	b086      	sub	sp, #24
    f740:	af00      	add	r7, sp, #0
    f742:	6078      	str	r0, [r7, #4]
    f744:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    f74a:	2301      	movs	r3, #1
    f74c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    f74e:	687b      	ldr	r3, [r7, #4]
    f750:	2b00      	cmp	r3, #0
    f752:	d05d      	beq.n	f810 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    f754:	693b      	ldr	r3, [r7, #16]
    f756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f758:	2b00      	cmp	r3, #0
    f75a:	d101      	bne.n	f760 <vTaskPriorityDisinheritAfterTimeout+0x24>
    f75c:	b672      	cpsid	i
    f75e:	e7fe      	b.n	f75e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    f760:	693b      	ldr	r3, [r7, #16]
    f762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f764:	683b      	ldr	r3, [r7, #0]
    f766:	429a      	cmp	r2, r3
    f768:	d202      	bcs.n	f770 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    f76a:	683b      	ldr	r3, [r7, #0]
    f76c:	617b      	str	r3, [r7, #20]
    f76e:	e002      	b.n	f776 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    f770:	693b      	ldr	r3, [r7, #16]
    f772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f774:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    f776:	693b      	ldr	r3, [r7, #16]
    f778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f77a:	697b      	ldr	r3, [r7, #20]
    f77c:	429a      	cmp	r2, r3
    f77e:	d047      	beq.n	f810 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    f780:	693b      	ldr	r3, [r7, #16]
    f782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    f784:	68fb      	ldr	r3, [r7, #12]
    f786:	429a      	cmp	r2, r3
    f788:	d142      	bne.n	f810 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    f78a:	4b23      	ldr	r3, [pc, #140]	; (f818 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    f78c:	681b      	ldr	r3, [r3, #0]
    f78e:	693a      	ldr	r2, [r7, #16]
    f790:	429a      	cmp	r2, r3
    f792:	d101      	bne.n	f798 <vTaskPriorityDisinheritAfterTimeout+0x5c>
    f794:	b672      	cpsid	i
    f796:	e7fe      	b.n	f796 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    f798:	693b      	ldr	r3, [r7, #16]
    f79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f79c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    f79e:	693b      	ldr	r3, [r7, #16]
    f7a0:	697a      	ldr	r2, [r7, #20]
    f7a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    f7a4:	693b      	ldr	r3, [r7, #16]
    f7a6:	699b      	ldr	r3, [r3, #24]
    f7a8:	2b00      	cmp	r3, #0
    f7aa:	db04      	blt.n	f7b6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f7ac:	697b      	ldr	r3, [r7, #20]
    f7ae:	2205      	movs	r2, #5
    f7b0:	1ad2      	subs	r2, r2, r3
    f7b2:	693b      	ldr	r3, [r7, #16]
    f7b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    f7b6:	693b      	ldr	r3, [r7, #16]
    f7b8:	6959      	ldr	r1, [r3, #20]
    f7ba:	68ba      	ldr	r2, [r7, #8]
    f7bc:	0013      	movs	r3, r2
    f7be:	009b      	lsls	r3, r3, #2
    f7c0:	189b      	adds	r3, r3, r2
    f7c2:	009b      	lsls	r3, r3, #2
    f7c4:	4a15      	ldr	r2, [pc, #84]	; (f81c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    f7c6:	189b      	adds	r3, r3, r2
    f7c8:	4299      	cmp	r1, r3
    f7ca:	d101      	bne.n	f7d0 <vTaskPriorityDisinheritAfterTimeout+0x94>
    f7cc:	2301      	movs	r3, #1
    f7ce:	e000      	b.n	f7d2 <vTaskPriorityDisinheritAfterTimeout+0x96>
    f7d0:	2300      	movs	r3, #0
    f7d2:	2b00      	cmp	r3, #0
    f7d4:	d01c      	beq.n	f810 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f7d6:	693b      	ldr	r3, [r7, #16]
    f7d8:	3304      	adds	r3, #4
    f7da:	0018      	movs	r0, r3
    f7dc:	4b10      	ldr	r3, [pc, #64]	; (f820 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    f7de:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    f7e0:	693b      	ldr	r3, [r7, #16]
    f7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f7e4:	4b0f      	ldr	r3, [pc, #60]	; (f824 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    f7e6:	681b      	ldr	r3, [r3, #0]
    f7e8:	429a      	cmp	r2, r3
    f7ea:	d903      	bls.n	f7f4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
    f7ec:	693b      	ldr	r3, [r7, #16]
    f7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f7f0:	4b0c      	ldr	r3, [pc, #48]	; (f824 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    f7f2:	601a      	str	r2, [r3, #0]
    f7f4:	693b      	ldr	r3, [r7, #16]
    f7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f7f8:	0013      	movs	r3, r2
    f7fa:	009b      	lsls	r3, r3, #2
    f7fc:	189b      	adds	r3, r3, r2
    f7fe:	009b      	lsls	r3, r3, #2
    f800:	4a06      	ldr	r2, [pc, #24]	; (f81c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    f802:	189a      	adds	r2, r3, r2
    f804:	693b      	ldr	r3, [r7, #16]
    f806:	3304      	adds	r3, #4
    f808:	0019      	movs	r1, r3
    f80a:	0010      	movs	r0, r2
    f80c:	4b06      	ldr	r3, [pc, #24]	; (f828 <vTaskPriorityDisinheritAfterTimeout+0xec>)
    f80e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    f810:	46c0      	nop			; (mov r8, r8)
    f812:	46bd      	mov	sp, r7
    f814:	b006      	add	sp, #24
    f816:	bd80      	pop	{r7, pc}
    f818:	200002a8 	.word	0x200002a8
    f81c:	200002ac 	.word	0x200002ac
    f820:	0000dc87 	.word	0x0000dc87
    f824:	20000388 	.word	0x20000388
    f828:	0000dbd7 	.word	0x0000dbd7

0000f82c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    f82c:	b580      	push	{r7, lr}
    f82e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    f830:	4b06      	ldr	r3, [pc, #24]	; (f84c <pvTaskIncrementMutexHeldCount+0x20>)
    f832:	681b      	ldr	r3, [r3, #0]
    f834:	2b00      	cmp	r3, #0
    f836:	d004      	beq.n	f842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    f838:	4b04      	ldr	r3, [pc, #16]	; (f84c <pvTaskIncrementMutexHeldCount+0x20>)
    f83a:	681b      	ldr	r3, [r3, #0]
    f83c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    f83e:	3201      	adds	r2, #1
    f840:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    f842:	4b02      	ldr	r3, [pc, #8]	; (f84c <pvTaskIncrementMutexHeldCount+0x20>)
    f844:	681b      	ldr	r3, [r3, #0]
	}
    f846:	0018      	movs	r0, r3
    f848:	46bd      	mov	sp, r7
    f84a:	bd80      	pop	{r7, pc}
    f84c:	200002a8 	.word	0x200002a8

0000f850 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    f850:	b580      	push	{r7, lr}
    f852:	b084      	sub	sp, #16
    f854:	af00      	add	r7, sp, #0
    f856:	6078      	str	r0, [r7, #4]
    f858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    f85a:	4b21      	ldr	r3, [pc, #132]	; (f8e0 <prvAddCurrentTaskToDelayedList+0x90>)
    f85c:	681b      	ldr	r3, [r3, #0]
    f85e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f860:	4b20      	ldr	r3, [pc, #128]	; (f8e4 <prvAddCurrentTaskToDelayedList+0x94>)
    f862:	681b      	ldr	r3, [r3, #0]
    f864:	3304      	adds	r3, #4
    f866:	0018      	movs	r0, r3
    f868:	4b1f      	ldr	r3, [pc, #124]	; (f8e8 <prvAddCurrentTaskToDelayedList+0x98>)
    f86a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    f86c:	687b      	ldr	r3, [r7, #4]
    f86e:	3301      	adds	r3, #1
    f870:	d10b      	bne.n	f88a <prvAddCurrentTaskToDelayedList+0x3a>
    f872:	683b      	ldr	r3, [r7, #0]
    f874:	2b00      	cmp	r3, #0
    f876:	d008      	beq.n	f88a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f878:	4b1a      	ldr	r3, [pc, #104]	; (f8e4 <prvAddCurrentTaskToDelayedList+0x94>)
    f87a:	681b      	ldr	r3, [r3, #0]
    f87c:	1d1a      	adds	r2, r3, #4
    f87e:	4b1b      	ldr	r3, [pc, #108]	; (f8ec <prvAddCurrentTaskToDelayedList+0x9c>)
    f880:	0011      	movs	r1, r2
    f882:	0018      	movs	r0, r3
    f884:	4b1a      	ldr	r3, [pc, #104]	; (f8f0 <prvAddCurrentTaskToDelayedList+0xa0>)
    f886:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    f888:	e026      	b.n	f8d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    f88a:	68fa      	ldr	r2, [r7, #12]
    f88c:	687b      	ldr	r3, [r7, #4]
    f88e:	18d3      	adds	r3, r2, r3
    f890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    f892:	4b14      	ldr	r3, [pc, #80]	; (f8e4 <prvAddCurrentTaskToDelayedList+0x94>)
    f894:	681b      	ldr	r3, [r3, #0]
    f896:	68ba      	ldr	r2, [r7, #8]
    f898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    f89a:	68ba      	ldr	r2, [r7, #8]
    f89c:	68fb      	ldr	r3, [r7, #12]
    f89e:	429a      	cmp	r2, r3
    f8a0:	d209      	bcs.n	f8b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f8a2:	4b14      	ldr	r3, [pc, #80]	; (f8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
    f8a4:	681a      	ldr	r2, [r3, #0]
    f8a6:	4b0f      	ldr	r3, [pc, #60]	; (f8e4 <prvAddCurrentTaskToDelayedList+0x94>)
    f8a8:	681b      	ldr	r3, [r3, #0]
    f8aa:	3304      	adds	r3, #4
    f8ac:	0019      	movs	r1, r3
    f8ae:	0010      	movs	r0, r2
    f8b0:	4b11      	ldr	r3, [pc, #68]	; (f8f8 <prvAddCurrentTaskToDelayedList+0xa8>)
    f8b2:	4798      	blx	r3
}
    f8b4:	e010      	b.n	f8d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    f8b6:	4b11      	ldr	r3, [pc, #68]	; (f8fc <prvAddCurrentTaskToDelayedList+0xac>)
    f8b8:	681a      	ldr	r2, [r3, #0]
    f8ba:	4b0a      	ldr	r3, [pc, #40]	; (f8e4 <prvAddCurrentTaskToDelayedList+0x94>)
    f8bc:	681b      	ldr	r3, [r3, #0]
    f8be:	3304      	adds	r3, #4
    f8c0:	0019      	movs	r1, r3
    f8c2:	0010      	movs	r0, r2
    f8c4:	4b0c      	ldr	r3, [pc, #48]	; (f8f8 <prvAddCurrentTaskToDelayedList+0xa8>)
    f8c6:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    f8c8:	4b0d      	ldr	r3, [pc, #52]	; (f900 <prvAddCurrentTaskToDelayedList+0xb0>)
    f8ca:	681b      	ldr	r3, [r3, #0]
    f8cc:	68ba      	ldr	r2, [r7, #8]
    f8ce:	429a      	cmp	r2, r3
    f8d0:	d202      	bcs.n	f8d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    f8d2:	4b0b      	ldr	r3, [pc, #44]	; (f900 <prvAddCurrentTaskToDelayedList+0xb0>)
    f8d4:	68ba      	ldr	r2, [r7, #8]
    f8d6:	601a      	str	r2, [r3, #0]
}
    f8d8:	46c0      	nop			; (mov r8, r8)
    f8da:	46bd      	mov	sp, r7
    f8dc:	b004      	add	sp, #16
    f8de:	bd80      	pop	{r7, pc}
    f8e0:	20000384 	.word	0x20000384
    f8e4:	200002a8 	.word	0x200002a8
    f8e8:	0000dc87 	.word	0x0000dc87
    f8ec:	2000036c 	.word	0x2000036c
    f8f0:	0000dbd7 	.word	0x0000dbd7
    f8f4:	2000033c 	.word	0x2000033c
    f8f8:	0000dc1b 	.word	0x0000dc1b
    f8fc:	20000338 	.word	0x20000338
    f900:	200003a0 	.word	0x200003a0

0000f904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    f904:	b590      	push	{r4, r7, lr}
    f906:	b085      	sub	sp, #20
    f908:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    f90a:	2300      	movs	r3, #0
    f90c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    f90e:	4b0e      	ldr	r3, [pc, #56]	; (f948 <xTimerCreateTimerTask+0x44>)
    f910:	4798      	blx	r3

	if( xTimerQueue != NULL )
    f912:	4b0e      	ldr	r3, [pc, #56]	; (f94c <xTimerCreateTimerTask+0x48>)
    f914:	681b      	ldr	r3, [r3, #0]
    f916:	2b00      	cmp	r3, #0
    f918:	d00c      	beq.n	f934 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    f91a:	2382      	movs	r3, #130	; 0x82
    f91c:	005a      	lsls	r2, r3, #1
    f91e:	490c      	ldr	r1, [pc, #48]	; (f950 <xTimerCreateTimerTask+0x4c>)
    f920:	480c      	ldr	r0, [pc, #48]	; (f954 <xTimerCreateTimerTask+0x50>)
    f922:	4b0d      	ldr	r3, [pc, #52]	; (f958 <xTimerCreateTimerTask+0x54>)
    f924:	9301      	str	r3, [sp, #4]
    f926:	2304      	movs	r3, #4
    f928:	9300      	str	r3, [sp, #0]
    f92a:	2300      	movs	r3, #0
    f92c:	4c0b      	ldr	r4, [pc, #44]	; (f95c <xTimerCreateTimerTask+0x58>)
    f92e:	47a0      	blx	r4
    f930:	0003      	movs	r3, r0
    f932:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    f934:	687b      	ldr	r3, [r7, #4]
    f936:	2b00      	cmp	r3, #0
    f938:	d101      	bne.n	f93e <xTimerCreateTimerTask+0x3a>
    f93a:	b672      	cpsid	i
    f93c:	e7fe      	b.n	f93c <xTimerCreateTimerTask+0x38>
	return xReturn;
    f93e:	687b      	ldr	r3, [r7, #4]
}
    f940:	0018      	movs	r0, r3
    f942:	46bd      	mov	sp, r7
    f944:	b003      	add	sp, #12
    f946:	bd90      	pop	{r4, r7, pc}
    f948:	0000ff15 	.word	0x0000ff15
    f94c:	200003dc 	.word	0x200003dc
    f950:	00019434 	.word	0x00019434
    f954:	0000fb29 	.word	0x0000fb29
    f958:	200003e0 	.word	0x200003e0
    f95c:	0000e8b9 	.word	0x0000e8b9

0000f960 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    f960:	b590      	push	{r4, r7, lr}
    f962:	b089      	sub	sp, #36	; 0x24
    f964:	af02      	add	r7, sp, #8
    f966:	60f8      	str	r0, [r7, #12]
    f968:	60b9      	str	r1, [r7, #8]
    f96a:	607a      	str	r2, [r7, #4]
    f96c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    f96e:	2028      	movs	r0, #40	; 0x28
    f970:	4b0b      	ldr	r3, [pc, #44]	; (f9a0 <xTimerCreate+0x40>)
    f972:	4798      	blx	r3
    f974:	0003      	movs	r3, r0
    f976:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    f978:	697b      	ldr	r3, [r7, #20]
    f97a:	2b00      	cmp	r3, #0
    f97c:	d00a      	beq.n	f994 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    f97e:	683c      	ldr	r4, [r7, #0]
    f980:	687a      	ldr	r2, [r7, #4]
    f982:	68b9      	ldr	r1, [r7, #8]
    f984:	68f8      	ldr	r0, [r7, #12]
    f986:	697b      	ldr	r3, [r7, #20]
    f988:	9301      	str	r3, [sp, #4]
    f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f98c:	9300      	str	r3, [sp, #0]
    f98e:	0023      	movs	r3, r4
    f990:	4c04      	ldr	r4, [pc, #16]	; (f9a4 <xTimerCreate+0x44>)
    f992:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    f994:	697b      	ldr	r3, [r7, #20]
	}
    f996:	0018      	movs	r0, r3
    f998:	46bd      	mov	sp, r7
    f99a:	b007      	add	sp, #28
    f99c:	bd90      	pop	{r4, r7, pc}
    f99e:	46c0      	nop			; (mov r8, r8)
    f9a0:	0000db1d 	.word	0x0000db1d
    f9a4:	0000f9a9 	.word	0x0000f9a9

0000f9a8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    f9a8:	b580      	push	{r7, lr}
    f9aa:	b084      	sub	sp, #16
    f9ac:	af00      	add	r7, sp, #0
    f9ae:	60f8      	str	r0, [r7, #12]
    f9b0:	60b9      	str	r1, [r7, #8]
    f9b2:	607a      	str	r2, [r7, #4]
    f9b4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    f9b6:	68bb      	ldr	r3, [r7, #8]
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d101      	bne.n	f9c0 <prvInitialiseNewTimer+0x18>
    f9bc:	b672      	cpsid	i
    f9be:	e7fe      	b.n	f9be <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    f9c0:	69fb      	ldr	r3, [r7, #28]
    f9c2:	2b00      	cmp	r3, #0
    f9c4:	d015      	beq.n	f9f2 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    f9c6:	4b0d      	ldr	r3, [pc, #52]	; (f9fc <prvInitialiseNewTimer+0x54>)
    f9c8:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    f9ca:	69fb      	ldr	r3, [r7, #28]
    f9cc:	68fa      	ldr	r2, [r7, #12]
    f9ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    f9d0:	69fb      	ldr	r3, [r7, #28]
    f9d2:	68ba      	ldr	r2, [r7, #8]
    f9d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    f9d6:	69fb      	ldr	r3, [r7, #28]
    f9d8:	687a      	ldr	r2, [r7, #4]
    f9da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    f9dc:	69fb      	ldr	r3, [r7, #28]
    f9de:	683a      	ldr	r2, [r7, #0]
    f9e0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    f9e2:	69fb      	ldr	r3, [r7, #28]
    f9e4:	69ba      	ldr	r2, [r7, #24]
    f9e6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    f9e8:	69fb      	ldr	r3, [r7, #28]
    f9ea:	3304      	adds	r3, #4
    f9ec:	0018      	movs	r0, r3
    f9ee:	4b04      	ldr	r3, [pc, #16]	; (fa00 <prvInitialiseNewTimer+0x58>)
    f9f0:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    f9f2:	46c0      	nop			; (mov r8, r8)
    f9f4:	46bd      	mov	sp, r7
    f9f6:	b004      	add	sp, #16
    f9f8:	bd80      	pop	{r7, pc}
    f9fa:	46c0      	nop			; (mov r8, r8)
    f9fc:	0000ff15 	.word	0x0000ff15
    fa00:	0000dbc1 	.word	0x0000dbc1

0000fa04 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    fa04:	b590      	push	{r4, r7, lr}
    fa06:	b08b      	sub	sp, #44	; 0x2c
    fa08:	af00      	add	r7, sp, #0
    fa0a:	60f8      	str	r0, [r7, #12]
    fa0c:	60b9      	str	r1, [r7, #8]
    fa0e:	607a      	str	r2, [r7, #4]
    fa10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    fa12:	2300      	movs	r3, #0
    fa14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    fa16:	68fb      	ldr	r3, [r7, #12]
    fa18:	2b00      	cmp	r3, #0
    fa1a:	d101      	bne.n	fa20 <xTimerGenericCommand+0x1c>
    fa1c:	b672      	cpsid	i
    fa1e:	e7fe      	b.n	fa1e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    fa20:	4b1e      	ldr	r3, [pc, #120]	; (fa9c <xTimerGenericCommand+0x98>)
    fa22:	681b      	ldr	r3, [r3, #0]
    fa24:	2b00      	cmp	r3, #0
    fa26:	d033      	beq.n	fa90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    fa28:	2314      	movs	r3, #20
    fa2a:	18fb      	adds	r3, r7, r3
    fa2c:	68ba      	ldr	r2, [r7, #8]
    fa2e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    fa30:	2314      	movs	r3, #20
    fa32:	18fb      	adds	r3, r7, r3
    fa34:	687a      	ldr	r2, [r7, #4]
    fa36:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    fa38:	2314      	movs	r3, #20
    fa3a:	18fb      	adds	r3, r7, r3
    fa3c:	68fa      	ldr	r2, [r7, #12]
    fa3e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    fa40:	68bb      	ldr	r3, [r7, #8]
    fa42:	2b05      	cmp	r3, #5
    fa44:	dc1a      	bgt.n	fa7c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    fa46:	4b16      	ldr	r3, [pc, #88]	; (faa0 <xTimerGenericCommand+0x9c>)
    fa48:	4798      	blx	r3
    fa4a:	0003      	movs	r3, r0
    fa4c:	2b02      	cmp	r3, #2
    fa4e:	d10a      	bne.n	fa66 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    fa50:	4b12      	ldr	r3, [pc, #72]	; (fa9c <xTimerGenericCommand+0x98>)
    fa52:	6818      	ldr	r0, [r3, #0]
    fa54:	6bba      	ldr	r2, [r7, #56]	; 0x38
    fa56:	2314      	movs	r3, #20
    fa58:	18f9      	adds	r1, r7, r3
    fa5a:	2300      	movs	r3, #0
    fa5c:	4c11      	ldr	r4, [pc, #68]	; (faa4 <xTimerGenericCommand+0xa0>)
    fa5e:	47a0      	blx	r4
    fa60:	0003      	movs	r3, r0
    fa62:	627b      	str	r3, [r7, #36]	; 0x24
    fa64:	e014      	b.n	fa90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    fa66:	4b0d      	ldr	r3, [pc, #52]	; (fa9c <xTimerGenericCommand+0x98>)
    fa68:	6818      	ldr	r0, [r3, #0]
    fa6a:	2314      	movs	r3, #20
    fa6c:	18f9      	adds	r1, r7, r3
    fa6e:	2300      	movs	r3, #0
    fa70:	2200      	movs	r2, #0
    fa72:	4c0c      	ldr	r4, [pc, #48]	; (faa4 <xTimerGenericCommand+0xa0>)
    fa74:	47a0      	blx	r4
    fa76:	0003      	movs	r3, r0
    fa78:	627b      	str	r3, [r7, #36]	; 0x24
    fa7a:	e009      	b.n	fa90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    fa7c:	4b07      	ldr	r3, [pc, #28]	; (fa9c <xTimerGenericCommand+0x98>)
    fa7e:	6818      	ldr	r0, [r3, #0]
    fa80:	683a      	ldr	r2, [r7, #0]
    fa82:	2314      	movs	r3, #20
    fa84:	18f9      	adds	r1, r7, r3
    fa86:	2300      	movs	r3, #0
    fa88:	4c07      	ldr	r4, [pc, #28]	; (faa8 <xTimerGenericCommand+0xa4>)
    fa8a:	47a0      	blx	r4
    fa8c:	0003      	movs	r3, r0
    fa8e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    fa92:	0018      	movs	r0, r3
    fa94:	46bd      	mov	sp, r7
    fa96:	b00b      	add	sp, #44	; 0x2c
    fa98:	bd90      	pop	{r4, r7, pc}
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	200003dc 	.word	0x200003dc
    faa0:	0000f561 	.word	0x0000f561
    faa4:	0000de51 	.word	0x0000de51
    faa8:	0000e031 	.word	0x0000e031

0000faac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    faac:	b590      	push	{r4, r7, lr}
    faae:	b087      	sub	sp, #28
    fab0:	af02      	add	r7, sp, #8
    fab2:	6078      	str	r0, [r7, #4]
    fab4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    fab6:	4b18      	ldr	r3, [pc, #96]	; (fb18 <prvProcessExpiredTimer+0x6c>)
    fab8:	681b      	ldr	r3, [r3, #0]
    faba:	68db      	ldr	r3, [r3, #12]
    fabc:	68db      	ldr	r3, [r3, #12]
    fabe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fac0:	68fb      	ldr	r3, [r7, #12]
    fac2:	3304      	adds	r3, #4
    fac4:	0018      	movs	r0, r3
    fac6:	4b15      	ldr	r3, [pc, #84]	; (fb1c <prvProcessExpiredTimer+0x70>)
    fac8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    faca:	68fb      	ldr	r3, [r7, #12]
    facc:	69db      	ldr	r3, [r3, #28]
    face:	2b01      	cmp	r3, #1
    fad0:	d119      	bne.n	fb06 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    fad2:	68fb      	ldr	r3, [r7, #12]
    fad4:	699a      	ldr	r2, [r3, #24]
    fad6:	687b      	ldr	r3, [r7, #4]
    fad8:	18d1      	adds	r1, r2, r3
    fada:	687b      	ldr	r3, [r7, #4]
    fadc:	683a      	ldr	r2, [r7, #0]
    fade:	68f8      	ldr	r0, [r7, #12]
    fae0:	4c0f      	ldr	r4, [pc, #60]	; (fb20 <prvProcessExpiredTimer+0x74>)
    fae2:	47a0      	blx	r4
    fae4:	1e03      	subs	r3, r0, #0
    fae6:	d00e      	beq.n	fb06 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    fae8:	687a      	ldr	r2, [r7, #4]
    faea:	68f8      	ldr	r0, [r7, #12]
    faec:	2300      	movs	r3, #0
    faee:	9300      	str	r3, [sp, #0]
    faf0:	2300      	movs	r3, #0
    faf2:	2100      	movs	r1, #0
    faf4:	4c0b      	ldr	r4, [pc, #44]	; (fb24 <prvProcessExpiredTimer+0x78>)
    faf6:	47a0      	blx	r4
    faf8:	0003      	movs	r3, r0
    fafa:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    fafc:	68bb      	ldr	r3, [r7, #8]
    fafe:	2b00      	cmp	r3, #0
    fb00:	d101      	bne.n	fb06 <prvProcessExpiredTimer+0x5a>
    fb02:	b672      	cpsid	i
    fb04:	e7fe      	b.n	fb04 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    fb06:	68fb      	ldr	r3, [r7, #12]
    fb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fb0a:	68fa      	ldr	r2, [r7, #12]
    fb0c:	0010      	movs	r0, r2
    fb0e:	4798      	blx	r3
}
    fb10:	46c0      	nop			; (mov r8, r8)
    fb12:	46bd      	mov	sp, r7
    fb14:	b005      	add	sp, #20
    fb16:	bd90      	pop	{r4, r7, pc}
    fb18:	200003d4 	.word	0x200003d4
    fb1c:	0000dc87 	.word	0x0000dc87
    fb20:	0000fc89 	.word	0x0000fc89
    fb24:	0000fa05 	.word	0x0000fa05

0000fb28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    fb28:	b580      	push	{r7, lr}
    fb2a:	b084      	sub	sp, #16
    fb2c:	af00      	add	r7, sp, #0
    fb2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    fb30:	2308      	movs	r3, #8
    fb32:	18fb      	adds	r3, r7, r3
    fb34:	0018      	movs	r0, r3
    fb36:	4b06      	ldr	r3, [pc, #24]	; (fb50 <prvTimerTask+0x28>)
    fb38:	4798      	blx	r3
    fb3a:	0003      	movs	r3, r0
    fb3c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    fb3e:	68ba      	ldr	r2, [r7, #8]
    fb40:	68fb      	ldr	r3, [r7, #12]
    fb42:	0011      	movs	r1, r2
    fb44:	0018      	movs	r0, r3
    fb46:	4b03      	ldr	r3, [pc, #12]	; (fb54 <prvTimerTask+0x2c>)
    fb48:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    fb4a:	4b03      	ldr	r3, [pc, #12]	; (fb58 <prvTimerTask+0x30>)
    fb4c:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    fb4e:	e7ef      	b.n	fb30 <prvTimerTask+0x8>
    fb50:	0000fc01 	.word	0x0000fc01
    fb54:	0000fb5d 	.word	0x0000fb5d
    fb58:	0000fd11 	.word	0x0000fd11

0000fb5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    fb5c:	b580      	push	{r7, lr}
    fb5e:	b084      	sub	sp, #16
    fb60:	af00      	add	r7, sp, #0
    fb62:	6078      	str	r0, [r7, #4]
    fb64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    fb66:	4b1e      	ldr	r3, [pc, #120]	; (fbe0 <prvProcessTimerOrBlockTask+0x84>)
    fb68:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    fb6a:	2308      	movs	r3, #8
    fb6c:	18fb      	adds	r3, r7, r3
    fb6e:	0018      	movs	r0, r3
    fb70:	4b1c      	ldr	r3, [pc, #112]	; (fbe4 <prvProcessTimerOrBlockTask+0x88>)
    fb72:	4798      	blx	r3
    fb74:	0003      	movs	r3, r0
    fb76:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    fb78:	68bb      	ldr	r3, [r7, #8]
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	d129      	bne.n	fbd2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    fb7e:	683b      	ldr	r3, [r7, #0]
    fb80:	2b00      	cmp	r3, #0
    fb82:	d10c      	bne.n	fb9e <prvProcessTimerOrBlockTask+0x42>
    fb84:	687a      	ldr	r2, [r7, #4]
    fb86:	68fb      	ldr	r3, [r7, #12]
    fb88:	429a      	cmp	r2, r3
    fb8a:	d808      	bhi.n	fb9e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    fb8c:	4b16      	ldr	r3, [pc, #88]	; (fbe8 <prvProcessTimerOrBlockTask+0x8c>)
    fb8e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    fb90:	68fa      	ldr	r2, [r7, #12]
    fb92:	687b      	ldr	r3, [r7, #4]
    fb94:	0011      	movs	r1, r2
    fb96:	0018      	movs	r0, r3
    fb98:	4b14      	ldr	r3, [pc, #80]	; (fbec <prvProcessTimerOrBlockTask+0x90>)
    fb9a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    fb9c:	e01b      	b.n	fbd6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    fb9e:	683b      	ldr	r3, [r7, #0]
    fba0:	2b00      	cmp	r3, #0
    fba2:	d006      	beq.n	fbb2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    fba4:	4b12      	ldr	r3, [pc, #72]	; (fbf0 <prvProcessTimerOrBlockTask+0x94>)
    fba6:	681b      	ldr	r3, [r3, #0]
    fba8:	681b      	ldr	r3, [r3, #0]
    fbaa:	425a      	negs	r2, r3
    fbac:	4153      	adcs	r3, r2
    fbae:	b2db      	uxtb	r3, r3
    fbb0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    fbb2:	4b10      	ldr	r3, [pc, #64]	; (fbf4 <prvProcessTimerOrBlockTask+0x98>)
    fbb4:	6818      	ldr	r0, [r3, #0]
    fbb6:	687a      	ldr	r2, [r7, #4]
    fbb8:	68fb      	ldr	r3, [r7, #12]
    fbba:	1ad3      	subs	r3, r2, r3
    fbbc:	683a      	ldr	r2, [r7, #0]
    fbbe:	0019      	movs	r1, r3
    fbc0:	4b0d      	ldr	r3, [pc, #52]	; (fbf8 <prvProcessTimerOrBlockTask+0x9c>)
    fbc2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    fbc4:	4b08      	ldr	r3, [pc, #32]	; (fbe8 <prvProcessTimerOrBlockTask+0x8c>)
    fbc6:	4798      	blx	r3
    fbc8:	1e03      	subs	r3, r0, #0
    fbca:	d104      	bne.n	fbd6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    fbcc:	4b0b      	ldr	r3, [pc, #44]	; (fbfc <prvProcessTimerOrBlockTask+0xa0>)
    fbce:	4798      	blx	r3
}
    fbd0:	e001      	b.n	fbd6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    fbd2:	4b05      	ldr	r3, [pc, #20]	; (fbe8 <prvProcessTimerOrBlockTask+0x8c>)
    fbd4:	4798      	blx	r3
}
    fbd6:	46c0      	nop			; (mov r8, r8)
    fbd8:	46bd      	mov	sp, r7
    fbda:	b004      	add	sp, #16
    fbdc:	bd80      	pop	{r7, pc}
    fbde:	46c0      	nop			; (mov r8, r8)
    fbe0:	0000ee11 	.word	0x0000ee11
    fbe4:	0000fc41 	.word	0x0000fc41
    fbe8:	0000ee29 	.word	0x0000ee29
    fbec:	0000faad 	.word	0x0000faad
    fbf0:	200003d8 	.word	0x200003d8
    fbf4:	200003dc 	.word	0x200003dc
    fbf8:	0000e79d 	.word	0x0000e79d
    fbfc:	0000d9c1 	.word	0x0000d9c1

0000fc00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    fc00:	b580      	push	{r7, lr}
    fc02:	b084      	sub	sp, #16
    fc04:	af00      	add	r7, sp, #0
    fc06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    fc08:	4b0c      	ldr	r3, [pc, #48]	; (fc3c <prvGetNextExpireTime+0x3c>)
    fc0a:	681b      	ldr	r3, [r3, #0]
    fc0c:	681b      	ldr	r3, [r3, #0]
    fc0e:	425a      	negs	r2, r3
    fc10:	4153      	adcs	r3, r2
    fc12:	b2db      	uxtb	r3, r3
    fc14:	001a      	movs	r2, r3
    fc16:	687b      	ldr	r3, [r7, #4]
    fc18:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    fc1a:	687b      	ldr	r3, [r7, #4]
    fc1c:	681b      	ldr	r3, [r3, #0]
    fc1e:	2b00      	cmp	r3, #0
    fc20:	d105      	bne.n	fc2e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    fc22:	4b06      	ldr	r3, [pc, #24]	; (fc3c <prvGetNextExpireTime+0x3c>)
    fc24:	681b      	ldr	r3, [r3, #0]
    fc26:	68db      	ldr	r3, [r3, #12]
    fc28:	681b      	ldr	r3, [r3, #0]
    fc2a:	60fb      	str	r3, [r7, #12]
    fc2c:	e001      	b.n	fc32 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    fc2e:	2300      	movs	r3, #0
    fc30:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    fc32:	68fb      	ldr	r3, [r7, #12]
}
    fc34:	0018      	movs	r0, r3
    fc36:	46bd      	mov	sp, r7
    fc38:	b004      	add	sp, #16
    fc3a:	bd80      	pop	{r7, pc}
    fc3c:	200003d4 	.word	0x200003d4

0000fc40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    fc40:	b580      	push	{r7, lr}
    fc42:	b084      	sub	sp, #16
    fc44:	af00      	add	r7, sp, #0
    fc46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    fc48:	4b0c      	ldr	r3, [pc, #48]	; (fc7c <prvSampleTimeNow+0x3c>)
    fc4a:	4798      	blx	r3
    fc4c:	0003      	movs	r3, r0
    fc4e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    fc50:	4b0b      	ldr	r3, [pc, #44]	; (fc80 <prvSampleTimeNow+0x40>)
    fc52:	681b      	ldr	r3, [r3, #0]
    fc54:	68fa      	ldr	r2, [r7, #12]
    fc56:	429a      	cmp	r2, r3
    fc58:	d205      	bcs.n	fc66 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    fc5a:	4b0a      	ldr	r3, [pc, #40]	; (fc84 <prvSampleTimeNow+0x44>)
    fc5c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    fc5e:	687b      	ldr	r3, [r7, #4]
    fc60:	2201      	movs	r2, #1
    fc62:	601a      	str	r2, [r3, #0]
    fc64:	e002      	b.n	fc6c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    fc66:	687b      	ldr	r3, [r7, #4]
    fc68:	2200      	movs	r2, #0
    fc6a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    fc6c:	4b04      	ldr	r3, [pc, #16]	; (fc80 <prvSampleTimeNow+0x40>)
    fc6e:	68fa      	ldr	r2, [r7, #12]
    fc70:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    fc72:	68fb      	ldr	r3, [r7, #12]
}
    fc74:	0018      	movs	r0, r3
    fc76:	46bd      	mov	sp, r7
    fc78:	b004      	add	sp, #16
    fc7a:	bd80      	pop	{r7, pc}
    fc7c:	0000ef5d 	.word	0x0000ef5d
    fc80:	200003e4 	.word	0x200003e4
    fc84:	0000fe55 	.word	0x0000fe55

0000fc88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    fc88:	b580      	push	{r7, lr}
    fc8a:	b086      	sub	sp, #24
    fc8c:	af00      	add	r7, sp, #0
    fc8e:	60f8      	str	r0, [r7, #12]
    fc90:	60b9      	str	r1, [r7, #8]
    fc92:	607a      	str	r2, [r7, #4]
    fc94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    fc96:	2300      	movs	r3, #0
    fc98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    fc9a:	68fb      	ldr	r3, [r7, #12]
    fc9c:	68ba      	ldr	r2, [r7, #8]
    fc9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    fca0:	68fb      	ldr	r3, [r7, #12]
    fca2:	68fa      	ldr	r2, [r7, #12]
    fca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    fca6:	68ba      	ldr	r2, [r7, #8]
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	429a      	cmp	r2, r3
    fcac:	d812      	bhi.n	fcd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fcae:	687a      	ldr	r2, [r7, #4]
    fcb0:	683b      	ldr	r3, [r7, #0]
    fcb2:	1ad2      	subs	r2, r2, r3
    fcb4:	68fb      	ldr	r3, [r7, #12]
    fcb6:	699b      	ldr	r3, [r3, #24]
    fcb8:	429a      	cmp	r2, r3
    fcba:	d302      	bcc.n	fcc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    fcbc:	2301      	movs	r3, #1
    fcbe:	617b      	str	r3, [r7, #20]
    fcc0:	e01b      	b.n	fcfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    fcc2:	4b10      	ldr	r3, [pc, #64]	; (fd04 <prvInsertTimerInActiveList+0x7c>)
    fcc4:	681a      	ldr	r2, [r3, #0]
    fcc6:	68fb      	ldr	r3, [r7, #12]
    fcc8:	3304      	adds	r3, #4
    fcca:	0019      	movs	r1, r3
    fccc:	0010      	movs	r0, r2
    fcce:	4b0e      	ldr	r3, [pc, #56]	; (fd08 <prvInsertTimerInActiveList+0x80>)
    fcd0:	4798      	blx	r3
    fcd2:	e012      	b.n	fcfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    fcd4:	687a      	ldr	r2, [r7, #4]
    fcd6:	683b      	ldr	r3, [r7, #0]
    fcd8:	429a      	cmp	r2, r3
    fcda:	d206      	bcs.n	fcea <prvInsertTimerInActiveList+0x62>
    fcdc:	68ba      	ldr	r2, [r7, #8]
    fcde:	683b      	ldr	r3, [r7, #0]
    fce0:	429a      	cmp	r2, r3
    fce2:	d302      	bcc.n	fcea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    fce4:	2301      	movs	r3, #1
    fce6:	617b      	str	r3, [r7, #20]
    fce8:	e007      	b.n	fcfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    fcea:	4b08      	ldr	r3, [pc, #32]	; (fd0c <prvInsertTimerInActiveList+0x84>)
    fcec:	681a      	ldr	r2, [r3, #0]
    fcee:	68fb      	ldr	r3, [r7, #12]
    fcf0:	3304      	adds	r3, #4
    fcf2:	0019      	movs	r1, r3
    fcf4:	0010      	movs	r0, r2
    fcf6:	4b04      	ldr	r3, [pc, #16]	; (fd08 <prvInsertTimerInActiveList+0x80>)
    fcf8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    fcfa:	697b      	ldr	r3, [r7, #20]
}
    fcfc:	0018      	movs	r0, r3
    fcfe:	46bd      	mov	sp, r7
    fd00:	b006      	add	sp, #24
    fd02:	bd80      	pop	{r7, pc}
    fd04:	200003d8 	.word	0x200003d8
    fd08:	0000dc1b 	.word	0x0000dc1b
    fd0c:	200003d4 	.word	0x200003d4

0000fd10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    fd10:	b590      	push	{r4, r7, lr}
    fd12:	b08d      	sub	sp, #52	; 0x34
    fd14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    fd16:	e07e      	b.n	fe16 <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    fd18:	2308      	movs	r3, #8
    fd1a:	18fb      	adds	r3, r7, r3
    fd1c:	681b      	ldr	r3, [r3, #0]
    fd1e:	2b00      	cmp	r3, #0
    fd20:	da10      	bge.n	fd44 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    fd22:	2308      	movs	r3, #8
    fd24:	18fb      	adds	r3, r7, r3
    fd26:	3304      	adds	r3, #4
    fd28:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd2c:	2b00      	cmp	r3, #0
    fd2e:	d101      	bne.n	fd34 <prvProcessReceivedCommands+0x24>
    fd30:	b672      	cpsid	i
    fd32:	e7fe      	b.n	fd32 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd36:	681a      	ldr	r2, [r3, #0]
    fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd3a:	6858      	ldr	r0, [r3, #4]
    fd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fd3e:	689b      	ldr	r3, [r3, #8]
    fd40:	0019      	movs	r1, r3
    fd42:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    fd44:	2308      	movs	r3, #8
    fd46:	18fb      	adds	r3, r7, r3
    fd48:	681b      	ldr	r3, [r3, #0]
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	db63      	blt.n	fe16 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    fd4e:	2308      	movs	r3, #8
    fd50:	18fb      	adds	r3, r7, r3
    fd52:	689b      	ldr	r3, [r3, #8]
    fd54:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    fd56:	6a3b      	ldr	r3, [r7, #32]
    fd58:	695b      	ldr	r3, [r3, #20]
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d004      	beq.n	fd68 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fd5e:	6a3b      	ldr	r3, [r7, #32]
    fd60:	3304      	adds	r3, #4
    fd62:	0018      	movs	r0, r3
    fd64:	4b33      	ldr	r3, [pc, #204]	; (fe34 <prvProcessReceivedCommands+0x124>)
    fd66:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    fd68:	1d3b      	adds	r3, r7, #4
    fd6a:	0018      	movs	r0, r3
    fd6c:	4b32      	ldr	r3, [pc, #200]	; (fe38 <prvProcessReceivedCommands+0x128>)
    fd6e:	4798      	blx	r3
    fd70:	0003      	movs	r3, r0
    fd72:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
    fd74:	2308      	movs	r3, #8
    fd76:	18fb      	adds	r3, r7, r3
    fd78:	681b      	ldr	r3, [r3, #0]
    fd7a:	2b09      	cmp	r3, #9
    fd7c:	d84a      	bhi.n	fe14 <prvProcessReceivedCommands+0x104>
    fd7e:	009a      	lsls	r2, r3, #2
    fd80:	4b2e      	ldr	r3, [pc, #184]	; (fe3c <prvProcessReceivedCommands+0x12c>)
    fd82:	18d3      	adds	r3, r2, r3
    fd84:	681b      	ldr	r3, [r3, #0]
    fd86:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    fd88:	2308      	movs	r3, #8
    fd8a:	18fb      	adds	r3, r7, r3
    fd8c:	685a      	ldr	r2, [r3, #4]
    fd8e:	6a3b      	ldr	r3, [r7, #32]
    fd90:	699b      	ldr	r3, [r3, #24]
    fd92:	18d1      	adds	r1, r2, r3
    fd94:	2308      	movs	r3, #8
    fd96:	18fb      	adds	r3, r7, r3
    fd98:	685b      	ldr	r3, [r3, #4]
    fd9a:	69fa      	ldr	r2, [r7, #28]
    fd9c:	6a38      	ldr	r0, [r7, #32]
    fd9e:	4c28      	ldr	r4, [pc, #160]	; (fe40 <prvProcessReceivedCommands+0x130>)
    fda0:	47a0      	blx	r4
    fda2:	1e03      	subs	r3, r0, #0
    fda4:	d037      	beq.n	fe16 <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    fda6:	6a3b      	ldr	r3, [r7, #32]
    fda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdaa:	6a3a      	ldr	r2, [r7, #32]
    fdac:	0010      	movs	r0, r2
    fdae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    fdb0:	6a3b      	ldr	r3, [r7, #32]
    fdb2:	69db      	ldr	r3, [r3, #28]
    fdb4:	2b01      	cmp	r3, #1
    fdb6:	d12e      	bne.n	fe16 <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    fdb8:	2308      	movs	r3, #8
    fdba:	18fb      	adds	r3, r7, r3
    fdbc:	685a      	ldr	r2, [r3, #4]
    fdbe:	6a3b      	ldr	r3, [r7, #32]
    fdc0:	699b      	ldr	r3, [r3, #24]
    fdc2:	18d2      	adds	r2, r2, r3
    fdc4:	6a38      	ldr	r0, [r7, #32]
    fdc6:	2300      	movs	r3, #0
    fdc8:	9300      	str	r3, [sp, #0]
    fdca:	2300      	movs	r3, #0
    fdcc:	2100      	movs	r1, #0
    fdce:	4c1d      	ldr	r4, [pc, #116]	; (fe44 <prvProcessReceivedCommands+0x134>)
    fdd0:	47a0      	blx	r4
    fdd2:	0003      	movs	r3, r0
    fdd4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
    fdd6:	69bb      	ldr	r3, [r7, #24]
    fdd8:	2b00      	cmp	r3, #0
    fdda:	d11c      	bne.n	fe16 <prvProcessReceivedCommands+0x106>
    fddc:	b672      	cpsid	i
    fdde:	e7fe      	b.n	fdde <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    fde0:	2308      	movs	r3, #8
    fde2:	18fb      	adds	r3, r7, r3
    fde4:	685a      	ldr	r2, [r3, #4]
    fde6:	6a3b      	ldr	r3, [r7, #32]
    fde8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    fdea:	6a3b      	ldr	r3, [r7, #32]
    fdec:	699b      	ldr	r3, [r3, #24]
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d101      	bne.n	fdf6 <prvProcessReceivedCommands+0xe6>
    fdf2:	b672      	cpsid	i
    fdf4:	e7fe      	b.n	fdf4 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    fdf6:	6a3b      	ldr	r3, [r7, #32]
    fdf8:	699a      	ldr	r2, [r3, #24]
    fdfa:	69fb      	ldr	r3, [r7, #28]
    fdfc:	18d1      	adds	r1, r2, r3
    fdfe:	69fb      	ldr	r3, [r7, #28]
    fe00:	69fa      	ldr	r2, [r7, #28]
    fe02:	6a38      	ldr	r0, [r7, #32]
    fe04:	4c0e      	ldr	r4, [pc, #56]	; (fe40 <prvProcessReceivedCommands+0x130>)
    fe06:	47a0      	blx	r4
					break;
    fe08:	e005      	b.n	fe16 <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    fe0a:	6a3b      	ldr	r3, [r7, #32]
    fe0c:	0018      	movs	r0, r3
    fe0e:	4b0e      	ldr	r3, [pc, #56]	; (fe48 <prvProcessReceivedCommands+0x138>)
    fe10:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    fe12:	e000      	b.n	fe16 <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
    fe14:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    fe16:	4b0d      	ldr	r3, [pc, #52]	; (fe4c <prvProcessReceivedCommands+0x13c>)
    fe18:	681b      	ldr	r3, [r3, #0]
    fe1a:	2208      	movs	r2, #8
    fe1c:	18b9      	adds	r1, r7, r2
    fe1e:	2200      	movs	r2, #0
    fe20:	0018      	movs	r0, r3
    fe22:	4b0b      	ldr	r3, [pc, #44]	; (fe50 <prvProcessReceivedCommands+0x140>)
    fe24:	4798      	blx	r3
    fe26:	1e03      	subs	r3, r0, #0
    fe28:	d000      	beq.n	fe2c <prvProcessReceivedCommands+0x11c>
    fe2a:	e775      	b.n	fd18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    fe2c:	46c0      	nop			; (mov r8, r8)
    fe2e:	46bd      	mov	sp, r7
    fe30:	b00b      	add	sp, #44	; 0x2c
    fe32:	bd90      	pop	{r4, r7, pc}
    fe34:	0000dc87 	.word	0x0000dc87
    fe38:	0000fc41 	.word	0x0000fc41
    fe3c:	0001943c 	.word	0x0001943c
    fe40:	0000fc89 	.word	0x0000fc89
    fe44:	0000fa05 	.word	0x0000fa05
    fe48:	0000db51 	.word	0x0000db51
    fe4c:	200003dc 	.word	0x200003dc
    fe50:	0000e151 	.word	0x0000e151

0000fe54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    fe54:	b590      	push	{r4, r7, lr}
    fe56:	b089      	sub	sp, #36	; 0x24
    fe58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    fe5a:	e03e      	b.n	feda <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    fe5c:	4b28      	ldr	r3, [pc, #160]	; (ff00 <prvSwitchTimerLists+0xac>)
    fe5e:	681b      	ldr	r3, [r3, #0]
    fe60:	68db      	ldr	r3, [r3, #12]
    fe62:	681b      	ldr	r3, [r3, #0]
    fe64:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    fe66:	4b26      	ldr	r3, [pc, #152]	; (ff00 <prvSwitchTimerLists+0xac>)
    fe68:	681b      	ldr	r3, [r3, #0]
    fe6a:	68db      	ldr	r3, [r3, #12]
    fe6c:	68db      	ldr	r3, [r3, #12]
    fe6e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fe70:	693b      	ldr	r3, [r7, #16]
    fe72:	3304      	adds	r3, #4
    fe74:	0018      	movs	r0, r3
    fe76:	4b23      	ldr	r3, [pc, #140]	; (ff04 <prvSwitchTimerLists+0xb0>)
    fe78:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    fe7a:	693b      	ldr	r3, [r7, #16]
    fe7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe7e:	693a      	ldr	r2, [r7, #16]
    fe80:	0010      	movs	r0, r2
    fe82:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    fe84:	693b      	ldr	r3, [r7, #16]
    fe86:	69db      	ldr	r3, [r3, #28]
    fe88:	2b01      	cmp	r3, #1
    fe8a:	d126      	bne.n	feda <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    fe8c:	693b      	ldr	r3, [r7, #16]
    fe8e:	699a      	ldr	r2, [r3, #24]
    fe90:	697b      	ldr	r3, [r7, #20]
    fe92:	18d3      	adds	r3, r2, r3
    fe94:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    fe96:	68fa      	ldr	r2, [r7, #12]
    fe98:	697b      	ldr	r3, [r7, #20]
    fe9a:	429a      	cmp	r2, r3
    fe9c:	d90e      	bls.n	febc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    fe9e:	693b      	ldr	r3, [r7, #16]
    fea0:	68fa      	ldr	r2, [r7, #12]
    fea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    fea4:	693b      	ldr	r3, [r7, #16]
    fea6:	693a      	ldr	r2, [r7, #16]
    fea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    feaa:	4b15      	ldr	r3, [pc, #84]	; (ff00 <prvSwitchTimerLists+0xac>)
    feac:	681a      	ldr	r2, [r3, #0]
    feae:	693b      	ldr	r3, [r7, #16]
    feb0:	3304      	adds	r3, #4
    feb2:	0019      	movs	r1, r3
    feb4:	0010      	movs	r0, r2
    feb6:	4b14      	ldr	r3, [pc, #80]	; (ff08 <prvSwitchTimerLists+0xb4>)
    feb8:	4798      	blx	r3
    feba:	e00e      	b.n	feda <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    febc:	697a      	ldr	r2, [r7, #20]
    febe:	6938      	ldr	r0, [r7, #16]
    fec0:	2300      	movs	r3, #0
    fec2:	9300      	str	r3, [sp, #0]
    fec4:	2300      	movs	r3, #0
    fec6:	2100      	movs	r1, #0
    fec8:	4c10      	ldr	r4, [pc, #64]	; (ff0c <prvSwitchTimerLists+0xb8>)
    feca:	47a0      	blx	r4
    fecc:	0003      	movs	r3, r0
    fece:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    fed0:	68bb      	ldr	r3, [r7, #8]
    fed2:	2b00      	cmp	r3, #0
    fed4:	d101      	bne.n	feda <prvSwitchTimerLists+0x86>
    fed6:	b672      	cpsid	i
    fed8:	e7fe      	b.n	fed8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    feda:	4b09      	ldr	r3, [pc, #36]	; (ff00 <prvSwitchTimerLists+0xac>)
    fedc:	681b      	ldr	r3, [r3, #0]
    fede:	681b      	ldr	r3, [r3, #0]
    fee0:	2b00      	cmp	r3, #0
    fee2:	d1bb      	bne.n	fe5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    fee4:	4b06      	ldr	r3, [pc, #24]	; (ff00 <prvSwitchTimerLists+0xac>)
    fee6:	681b      	ldr	r3, [r3, #0]
    fee8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    feea:	4b09      	ldr	r3, [pc, #36]	; (ff10 <prvSwitchTimerLists+0xbc>)
    feec:	681a      	ldr	r2, [r3, #0]
    feee:	4b04      	ldr	r3, [pc, #16]	; (ff00 <prvSwitchTimerLists+0xac>)
    fef0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    fef2:	4b07      	ldr	r3, [pc, #28]	; (ff10 <prvSwitchTimerLists+0xbc>)
    fef4:	687a      	ldr	r2, [r7, #4]
    fef6:	601a      	str	r2, [r3, #0]
}
    fef8:	46c0      	nop			; (mov r8, r8)
    fefa:	46bd      	mov	sp, r7
    fefc:	b007      	add	sp, #28
    fefe:	bd90      	pop	{r4, r7, pc}
    ff00:	200003d4 	.word	0x200003d4
    ff04:	0000dc87 	.word	0x0000dc87
    ff08:	0000dc1b 	.word	0x0000dc1b
    ff0c:	0000fa05 	.word	0x0000fa05
    ff10:	200003d8 	.word	0x200003d8

0000ff14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    ff14:	b580      	push	{r7, lr}
    ff16:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    ff18:	4b10      	ldr	r3, [pc, #64]	; (ff5c <prvCheckForValidListAndQueue+0x48>)
    ff1a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    ff1c:	4b10      	ldr	r3, [pc, #64]	; (ff60 <prvCheckForValidListAndQueue+0x4c>)
    ff1e:	681b      	ldr	r3, [r3, #0]
    ff20:	2b00      	cmp	r3, #0
    ff22:	d115      	bne.n	ff50 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    ff24:	4b0f      	ldr	r3, [pc, #60]	; (ff64 <prvCheckForValidListAndQueue+0x50>)
    ff26:	0018      	movs	r0, r3
    ff28:	4b0f      	ldr	r3, [pc, #60]	; (ff68 <prvCheckForValidListAndQueue+0x54>)
    ff2a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    ff2c:	4b0f      	ldr	r3, [pc, #60]	; (ff6c <prvCheckForValidListAndQueue+0x58>)
    ff2e:	0018      	movs	r0, r3
    ff30:	4b0d      	ldr	r3, [pc, #52]	; (ff68 <prvCheckForValidListAndQueue+0x54>)
    ff32:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    ff34:	4b0e      	ldr	r3, [pc, #56]	; (ff70 <prvCheckForValidListAndQueue+0x5c>)
    ff36:	4a0b      	ldr	r2, [pc, #44]	; (ff64 <prvCheckForValidListAndQueue+0x50>)
    ff38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    ff3a:	4b0e      	ldr	r3, [pc, #56]	; (ff74 <prvCheckForValidListAndQueue+0x60>)
    ff3c:	4a0b      	ldr	r2, [pc, #44]	; (ff6c <prvCheckForValidListAndQueue+0x58>)
    ff3e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    ff40:	2200      	movs	r2, #0
    ff42:	2110      	movs	r1, #16
    ff44:	2005      	movs	r0, #5
    ff46:	4b0c      	ldr	r3, [pc, #48]	; (ff78 <prvCheckForValidListAndQueue+0x64>)
    ff48:	4798      	blx	r3
    ff4a:	0002      	movs	r2, r0
    ff4c:	4b04      	ldr	r3, [pc, #16]	; (ff60 <prvCheckForValidListAndQueue+0x4c>)
    ff4e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    ff50:	4b0a      	ldr	r3, [pc, #40]	; (ff7c <prvCheckForValidListAndQueue+0x68>)
    ff52:	4798      	blx	r3
}
    ff54:	46c0      	nop			; (mov r8, r8)
    ff56:	46bd      	mov	sp, r7
    ff58:	bd80      	pop	{r7, pc}
    ff5a:	46c0      	nop			; (mov r8, r8)
    ff5c:	0000d9e1 	.word	0x0000d9e1
    ff60:	200003dc 	.word	0x200003dc
    ff64:	200003ac 	.word	0x200003ac
    ff68:	0000db85 	.word	0x0000db85
    ff6c:	200003c0 	.word	0x200003c0
    ff70:	200003d4 	.word	0x200003d4
    ff74:	200003d8 	.word	0x200003d8
    ff78:	0000dd95 	.word	0x0000dd95
    ff7c:	0000da05 	.word	0x0000da05

0000ff80 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    ff80:	b580      	push	{r7, lr}
    ff82:	b084      	sub	sp, #16
    ff84:	af00      	add	r7, sp, #0
    ff86:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
    ff88:	687b      	ldr	r3, [r7, #4]
    ff8a:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
    ff8c:	687b      	ldr	r3, [r7, #4]
    ff8e:	2b00      	cmp	r3, #0
    ff90:	d101      	bne.n	ff96 <xTimerIsTimerActive+0x16>
    ff92:	b672      	cpsid	i
    ff94:	e7fe      	b.n	ff94 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    ff96:	4b07      	ldr	r3, [pc, #28]	; (ffb4 <xTimerIsTimerActive+0x34>)
    ff98:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
    ff9a:	68fb      	ldr	r3, [r7, #12]
    ff9c:	695b      	ldr	r3, [r3, #20]
    ff9e:	1e5a      	subs	r2, r3, #1
    ffa0:	4193      	sbcs	r3, r2
    ffa2:	b2db      	uxtb	r3, r3
    ffa4:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
    ffa6:	4b04      	ldr	r3, [pc, #16]	; (ffb8 <xTimerIsTimerActive+0x38>)
    ffa8:	4798      	blx	r3

	return xTimerIsInActiveList;
    ffaa:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
    ffac:	0018      	movs	r0, r3
    ffae:	46bd      	mov	sp, r7
    ffb0:	b004      	add	sp, #16
    ffb2:	bd80      	pop	{r7, pc}
    ffb4:	0000d9e1 	.word	0x0000d9e1
    ffb8:	0000da05 	.word	0x0000da05

0000ffbc <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    ffbc:	b580      	push	{r7, lr}
    ffbe:	b082      	sub	sp, #8
    ffc0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    ffc2:	4b04      	ldr	r3, [pc, #16]	; (ffd4 <wdt_clear_early_warning+0x18>)
    ffc4:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    ffc6:	687b      	ldr	r3, [r7, #4]
    ffc8:	2201      	movs	r2, #1
    ffca:	719a      	strb	r2, [r3, #6]
}
    ffcc:	46c0      	nop			; (mov r8, r8)
    ffce:	46bd      	mov	sp, r7
    ffd0:	b002      	add	sp, #8
    ffd2:	bd80      	pop	{r7, pc}
    ffd4:	40001000 	.word	0x40001000

0000ffd8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    ffd8:	b580      	push	{r7, lr}
    ffda:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    ffdc:	4b05      	ldr	r3, [pc, #20]	; (fff4 <WDT_Handler+0x1c>)
    ffde:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    ffe0:	4b05      	ldr	r3, [pc, #20]	; (fff8 <WDT_Handler+0x20>)
    ffe2:	681b      	ldr	r3, [r3, #0]
    ffe4:	2b00      	cmp	r3, #0
    ffe6:	d002      	beq.n	ffee <WDT_Handler+0x16>
		wdt_early_warning_callback();
    ffe8:	4b03      	ldr	r3, [pc, #12]	; (fff8 <WDT_Handler+0x20>)
    ffea:	681b      	ldr	r3, [r3, #0]
    ffec:	4798      	blx	r3
	}
}
    ffee:	46c0      	nop			; (mov r8, r8)
    fff0:	46bd      	mov	sp, r7
    fff2:	bd80      	pop	{r7, pc}
    fff4:	0000ffbd 	.word	0x0000ffbd
    fff8:	200008e4 	.word	0x200008e4

0000fffc <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    fffc:	b580      	push	{r7, lr}
    fffe:	af00      	add	r7, sp, #0
   10000:	2000      	movs	r0, #0
   10002:	4b02      	ldr	r3, [pc, #8]	; (1000c <TCC0_Handler+0x10>)
   10004:	4798      	blx	r3
   10006:	46c0      	nop			; (mov r8, r8)
   10008:	46bd      	mov	sp, r7
   1000a:	bd80      	pop	{r7, pc}
   1000c:	00010039 	.word	0x00010039

00010010 <TCC1_Handler>:
   10010:	b580      	push	{r7, lr}
   10012:	af00      	add	r7, sp, #0
   10014:	2001      	movs	r0, #1
   10016:	4b02      	ldr	r3, [pc, #8]	; (10020 <TCC1_Handler+0x10>)
   10018:	4798      	blx	r3
   1001a:	46c0      	nop			; (mov r8, r8)
   1001c:	46bd      	mov	sp, r7
   1001e:	bd80      	pop	{r7, pc}
   10020:	00010039 	.word	0x00010039

00010024 <TCC2_Handler>:
   10024:	b580      	push	{r7, lr}
   10026:	af00      	add	r7, sp, #0
   10028:	2002      	movs	r0, #2
   1002a:	4b02      	ldr	r3, [pc, #8]	; (10034 <TCC2_Handler+0x10>)
   1002c:	4798      	blx	r3
   1002e:	46c0      	nop			; (mov r8, r8)
   10030:	46bd      	mov	sp, r7
   10032:	bd80      	pop	{r7, pc}
   10034:	00010039 	.word	0x00010039

00010038 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   10038:	b580      	push	{r7, lr}
   1003a:	b086      	sub	sp, #24
   1003c:	af00      	add	r7, sp, #0
   1003e:	0002      	movs	r2, r0
   10040:	1dfb      	adds	r3, r7, #7
   10042:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   10044:	1dfb      	adds	r3, r7, #7
   10046:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   10048:	4b18      	ldr	r3, [pc, #96]	; (100ac <_tcc_interrupt_handler+0x74>)
   1004a:	0092      	lsls	r2, r2, #2
   1004c:	58d3      	ldr	r3, [r2, r3]
   1004e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10050:	693b      	ldr	r3, [r7, #16]
   10052:	681b      	ldr	r3, [r3, #0]
   10054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   10056:	693b      	ldr	r3, [r7, #16]
   10058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1005a:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1005c:	693b      	ldr	r3, [r7, #16]
   1005e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10060:	4013      	ands	r3, r2
   10062:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10064:	2300      	movs	r3, #0
   10066:	617b      	str	r3, [r7, #20]
   10068:	e019      	b.n	1009e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1006a:	4b11      	ldr	r3, [pc, #68]	; (100b0 <_tcc_interrupt_handler+0x78>)
   1006c:	697a      	ldr	r2, [r7, #20]
   1006e:	0092      	lsls	r2, r2, #2
   10070:	58d3      	ldr	r3, [r2, r3]
   10072:	68fa      	ldr	r2, [r7, #12]
   10074:	4013      	ands	r3, r2
   10076:	d00f      	beq.n	10098 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   10078:	693a      	ldr	r2, [r7, #16]
   1007a:	697b      	ldr	r3, [r7, #20]
   1007c:	009b      	lsls	r3, r3, #2
   1007e:	18d3      	adds	r3, r2, r3
   10080:	3304      	adds	r3, #4
   10082:	681b      	ldr	r3, [r3, #0]
   10084:	693a      	ldr	r2, [r7, #16]
   10086:	0010      	movs	r0, r2
   10088:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1008a:	693b      	ldr	r3, [r7, #16]
   1008c:	681b      	ldr	r3, [r3, #0]
   1008e:	4a08      	ldr	r2, [pc, #32]	; (100b0 <_tcc_interrupt_handler+0x78>)
   10090:	6979      	ldr	r1, [r7, #20]
   10092:	0089      	lsls	r1, r1, #2
   10094:	588a      	ldr	r2, [r1, r2]
   10096:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10098:	697b      	ldr	r3, [r7, #20]
   1009a:	3301      	adds	r3, #1
   1009c:	617b      	str	r3, [r7, #20]
   1009e:	697b      	ldr	r3, [r7, #20]
   100a0:	2b0b      	cmp	r3, #11
   100a2:	dde2      	ble.n	1006a <_tcc_interrupt_handler+0x32>
		}
	}
}
   100a4:	46c0      	nop			; (mov r8, r8)
   100a6:	46bd      	mov	sp, r7
   100a8:	b006      	add	sp, #24
   100aa:	bd80      	pop	{r7, pc}
   100ac:	200008e8 	.word	0x200008e8
   100b0:	00019464 	.word	0x00019464

000100b4 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   100b4:	b580      	push	{r7, lr}
   100b6:	af00      	add	r7, sp, #0
   100b8:	2000      	movs	r0, #0
   100ba:	4b02      	ldr	r3, [pc, #8]	; (100c4 <TC3_Handler+0x10>)
   100bc:	4798      	blx	r3
   100be:	46c0      	nop			; (mov r8, r8)
   100c0:	46bd      	mov	sp, r7
   100c2:	bd80      	pop	{r7, pc}
   100c4:	00010119 	.word	0x00010119

000100c8 <TC4_Handler>:
   100c8:	b580      	push	{r7, lr}
   100ca:	af00      	add	r7, sp, #0
   100cc:	2001      	movs	r0, #1
   100ce:	4b02      	ldr	r3, [pc, #8]	; (100d8 <TC4_Handler+0x10>)
   100d0:	4798      	blx	r3
   100d2:	46c0      	nop			; (mov r8, r8)
   100d4:	46bd      	mov	sp, r7
   100d6:	bd80      	pop	{r7, pc}
   100d8:	00010119 	.word	0x00010119

000100dc <TC5_Handler>:
   100dc:	b580      	push	{r7, lr}
   100de:	af00      	add	r7, sp, #0
   100e0:	2002      	movs	r0, #2
   100e2:	4b02      	ldr	r3, [pc, #8]	; (100ec <TC5_Handler+0x10>)
   100e4:	4798      	blx	r3
   100e6:	46c0      	nop			; (mov r8, r8)
   100e8:	46bd      	mov	sp, r7
   100ea:	bd80      	pop	{r7, pc}
   100ec:	00010119 	.word	0x00010119

000100f0 <TC6_Handler>:
   100f0:	b580      	push	{r7, lr}
   100f2:	af00      	add	r7, sp, #0
   100f4:	2003      	movs	r0, #3
   100f6:	4b02      	ldr	r3, [pc, #8]	; (10100 <TC6_Handler+0x10>)
   100f8:	4798      	blx	r3
   100fa:	46c0      	nop			; (mov r8, r8)
   100fc:	46bd      	mov	sp, r7
   100fe:	bd80      	pop	{r7, pc}
   10100:	00010119 	.word	0x00010119

00010104 <TC7_Handler>:
   10104:	b580      	push	{r7, lr}
   10106:	af00      	add	r7, sp, #0
   10108:	2004      	movs	r0, #4
   1010a:	4b02      	ldr	r3, [pc, #8]	; (10114 <TC7_Handler+0x10>)
   1010c:	4798      	blx	r3
   1010e:	46c0      	nop			; (mov r8, r8)
   10110:	46bd      	mov	sp, r7
   10112:	bd80      	pop	{r7, pc}
   10114:	00010119 	.word	0x00010119

00010118 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   10118:	b580      	push	{r7, lr}
   1011a:	b084      	sub	sp, #16
   1011c:	af00      	add	r7, sp, #0
   1011e:	0002      	movs	r2, r0
   10120:	1dfb      	adds	r3, r7, #7
   10122:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   10128:	4b28      	ldr	r3, [pc, #160]	; (101cc <_tc_interrupt_handler+0xb4>)
   1012a:	0092      	lsls	r2, r2, #2
   1012c:	58d3      	ldr	r3, [r2, r3]
   1012e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   10130:	68fb      	ldr	r3, [r7, #12]
   10132:	681b      	ldr	r3, [r3, #0]
   10134:	7b9b      	ldrb	r3, [r3, #14]
   10136:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   10138:	68fa      	ldr	r2, [r7, #12]
   1013a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1013c:	4013      	ands	r3, r2
   1013e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   10140:	68fb      	ldr	r3, [r7, #12]
   10142:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   10144:	230b      	movs	r3, #11
   10146:	18fb      	adds	r3, r7, r3
   10148:	400a      	ands	r2, r1
   1014a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1014c:	230b      	movs	r3, #11
   1014e:	18fb      	adds	r3, r7, r3
   10150:	781b      	ldrb	r3, [r3, #0]
   10152:	2201      	movs	r2, #1
   10154:	4013      	ands	r3, r2
   10156:	d008      	beq.n	1016a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   10158:	68fb      	ldr	r3, [r7, #12]
   1015a:	689b      	ldr	r3, [r3, #8]
   1015c:	68fa      	ldr	r2, [r7, #12]
   1015e:	0010      	movs	r0, r2
   10160:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   10162:	68fb      	ldr	r3, [r7, #12]
   10164:	681b      	ldr	r3, [r3, #0]
   10166:	2201      	movs	r2, #1
   10168:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1016a:	230b      	movs	r3, #11
   1016c:	18fb      	adds	r3, r7, r3
   1016e:	781b      	ldrb	r3, [r3, #0]
   10170:	2202      	movs	r2, #2
   10172:	4013      	ands	r3, r2
   10174:	d008      	beq.n	10188 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   10176:	68fb      	ldr	r3, [r7, #12]
   10178:	68db      	ldr	r3, [r3, #12]
   1017a:	68fa      	ldr	r2, [r7, #12]
   1017c:	0010      	movs	r0, r2
   1017e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   10180:	68fb      	ldr	r3, [r7, #12]
   10182:	681b      	ldr	r3, [r3, #0]
   10184:	2202      	movs	r2, #2
   10186:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   10188:	230b      	movs	r3, #11
   1018a:	18fb      	adds	r3, r7, r3
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	2210      	movs	r2, #16
   10190:	4013      	ands	r3, r2
   10192:	d008      	beq.n	101a6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   10194:	68fb      	ldr	r3, [r7, #12]
   10196:	691b      	ldr	r3, [r3, #16]
   10198:	68fa      	ldr	r2, [r7, #12]
   1019a:	0010      	movs	r0, r2
   1019c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1019e:	68fb      	ldr	r3, [r7, #12]
   101a0:	681b      	ldr	r3, [r3, #0]
   101a2:	2210      	movs	r2, #16
   101a4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   101a6:	230b      	movs	r3, #11
   101a8:	18fb      	adds	r3, r7, r3
   101aa:	781b      	ldrb	r3, [r3, #0]
   101ac:	2220      	movs	r2, #32
   101ae:	4013      	ands	r3, r2
   101b0:	d008      	beq.n	101c4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   101b2:	68fb      	ldr	r3, [r7, #12]
   101b4:	695b      	ldr	r3, [r3, #20]
   101b6:	68fa      	ldr	r2, [r7, #12]
   101b8:	0010      	movs	r0, r2
   101ba:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   101bc:	68fb      	ldr	r3, [r7, #12]
   101be:	681b      	ldr	r3, [r3, #0]
   101c0:	2220      	movs	r2, #32
   101c2:	739a      	strb	r2, [r3, #14]
	}
}
   101c4:	46c0      	nop			; (mov r8, r8)
   101c6:	46bd      	mov	sp, r7
   101c8:	b004      	add	sp, #16
   101ca:	bd80      	pop	{r7, pc}
   101cc:	200008f4 	.word	0x200008f4

000101d0 <system_gclk_chan_get_config_defaults>:
{
   101d0:	b580      	push	{r7, lr}
   101d2:	b082      	sub	sp, #8
   101d4:	af00      	add	r7, sp, #0
   101d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   101d8:	687b      	ldr	r3, [r7, #4]
   101da:	2200      	movs	r2, #0
   101dc:	701a      	strb	r2, [r3, #0]
}
   101de:	46c0      	nop			; (mov r8, r8)
   101e0:	46bd      	mov	sp, r7
   101e2:	b002      	add	sp, #8
   101e4:	bd80      	pop	{r7, pc}
	...

000101e8 <system_apb_clock_set_mask>:
{
   101e8:	b580      	push	{r7, lr}
   101ea:	b082      	sub	sp, #8
   101ec:	af00      	add	r7, sp, #0
   101ee:	0002      	movs	r2, r0
   101f0:	6039      	str	r1, [r7, #0]
   101f2:	1dfb      	adds	r3, r7, #7
   101f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   101f6:	1dfb      	adds	r3, r7, #7
   101f8:	781b      	ldrb	r3, [r3, #0]
   101fa:	2b01      	cmp	r3, #1
   101fc:	d00a      	beq.n	10214 <system_apb_clock_set_mask+0x2c>
   101fe:	2b02      	cmp	r3, #2
   10200:	d00f      	beq.n	10222 <system_apb_clock_set_mask+0x3a>
   10202:	2b00      	cmp	r3, #0
   10204:	d114      	bne.n	10230 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   10206:	4b0e      	ldr	r3, [pc, #56]	; (10240 <system_apb_clock_set_mask+0x58>)
   10208:	4a0d      	ldr	r2, [pc, #52]	; (10240 <system_apb_clock_set_mask+0x58>)
   1020a:	6991      	ldr	r1, [r2, #24]
   1020c:	683a      	ldr	r2, [r7, #0]
   1020e:	430a      	orrs	r2, r1
   10210:	619a      	str	r2, [r3, #24]
			break;
   10212:	e00f      	b.n	10234 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   10214:	4b0a      	ldr	r3, [pc, #40]	; (10240 <system_apb_clock_set_mask+0x58>)
   10216:	4a0a      	ldr	r2, [pc, #40]	; (10240 <system_apb_clock_set_mask+0x58>)
   10218:	69d1      	ldr	r1, [r2, #28]
   1021a:	683a      	ldr	r2, [r7, #0]
   1021c:	430a      	orrs	r2, r1
   1021e:	61da      	str	r2, [r3, #28]
			break;
   10220:	e008      	b.n	10234 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   10222:	4b07      	ldr	r3, [pc, #28]	; (10240 <system_apb_clock_set_mask+0x58>)
   10224:	4a06      	ldr	r2, [pc, #24]	; (10240 <system_apb_clock_set_mask+0x58>)
   10226:	6a11      	ldr	r1, [r2, #32]
   10228:	683a      	ldr	r2, [r7, #0]
   1022a:	430a      	orrs	r2, r1
   1022c:	621a      	str	r2, [r3, #32]
			break;
   1022e:	e001      	b.n	10234 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   10230:	2317      	movs	r3, #23
   10232:	e000      	b.n	10236 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   10234:	2300      	movs	r3, #0
}
   10236:	0018      	movs	r0, r3
   10238:	46bd      	mov	sp, r7
   1023a:	b002      	add	sp, #8
   1023c:	bd80      	pop	{r7, pc}
   1023e:	46c0      	nop			; (mov r8, r8)
   10240:	40000400 	.word	0x40000400

00010244 <system_pinmux_get_config_defaults>:
{
   10244:	b580      	push	{r7, lr}
   10246:	b082      	sub	sp, #8
   10248:	af00      	add	r7, sp, #0
   1024a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1024c:	687b      	ldr	r3, [r7, #4]
   1024e:	2280      	movs	r2, #128	; 0x80
   10250:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10252:	687b      	ldr	r3, [r7, #4]
   10254:	2200      	movs	r2, #0
   10256:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10258:	687b      	ldr	r3, [r7, #4]
   1025a:	2201      	movs	r2, #1
   1025c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1025e:	687b      	ldr	r3, [r7, #4]
   10260:	2200      	movs	r2, #0
   10262:	70da      	strb	r2, [r3, #3]
}
   10264:	46c0      	nop			; (mov r8, r8)
   10266:	46bd      	mov	sp, r7
   10268:	b002      	add	sp, #8
   1026a:	bd80      	pop	{r7, pc}

0001026c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1026c:	b580      	push	{r7, lr}
   1026e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10270:	4b05      	ldr	r3, [pc, #20]	; (10288 <system_is_debugger_present+0x1c>)
   10272:	789b      	ldrb	r3, [r3, #2]
   10274:	b2db      	uxtb	r3, r3
   10276:	001a      	movs	r2, r3
   10278:	2302      	movs	r3, #2
   1027a:	4013      	ands	r3, r2
   1027c:	1e5a      	subs	r2, r3, #1
   1027e:	4193      	sbcs	r3, r2
   10280:	b2db      	uxtb	r3, r3
}
   10282:	0018      	movs	r0, r3
   10284:	46bd      	mov	sp, r7
   10286:	bd80      	pop	{r7, pc}
   10288:	41002000 	.word	0x41002000

0001028c <usart_is_syncing>:
{
   1028c:	b580      	push	{r7, lr}
   1028e:	b084      	sub	sp, #16
   10290:	af00      	add	r7, sp, #0
   10292:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10294:	687b      	ldr	r3, [r7, #4]
   10296:	681b      	ldr	r3, [r3, #0]
   10298:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1029a:	68fb      	ldr	r3, [r7, #12]
   1029c:	69db      	ldr	r3, [r3, #28]
   1029e:	1e5a      	subs	r2, r3, #1
   102a0:	4193      	sbcs	r3, r2
   102a2:	b2db      	uxtb	r3, r3
}
   102a4:	0018      	movs	r0, r3
   102a6:	46bd      	mov	sp, r7
   102a8:	b004      	add	sp, #16
   102aa:	bd80      	pop	{r7, pc}

000102ac <_usart_wait_for_sync>:
{
   102ac:	b580      	push	{r7, lr}
   102ae:	b082      	sub	sp, #8
   102b0:	af00      	add	r7, sp, #0
   102b2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   102b4:	46c0      	nop			; (mov r8, r8)
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	0018      	movs	r0, r3
   102ba:	4b04      	ldr	r3, [pc, #16]	; (102cc <_usart_wait_for_sync+0x20>)
   102bc:	4798      	blx	r3
   102be:	1e03      	subs	r3, r0, #0
   102c0:	d1f9      	bne.n	102b6 <_usart_wait_for_sync+0xa>
}
   102c2:	46c0      	nop			; (mov r8, r8)
   102c4:	46bd      	mov	sp, r7
   102c6:	b002      	add	sp, #8
   102c8:	bd80      	pop	{r7, pc}
   102ca:	46c0      	nop			; (mov r8, r8)
   102cc:	0001028d 	.word	0x0001028d

000102d0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   102d0:	b5b0      	push	{r4, r5, r7, lr}
   102d2:	b08c      	sub	sp, #48	; 0x30
   102d4:	af02      	add	r7, sp, #8
   102d6:	6078      	str	r0, [r7, #4]
   102d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   102da:	687b      	ldr	r3, [r7, #4]
   102dc:	681b      	ldr	r3, [r3, #0]
   102de:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   102e0:	687b      	ldr	r3, [r7, #4]
   102e2:	681b      	ldr	r3, [r3, #0]
   102e4:	0018      	movs	r0, r3
   102e6:	4bab      	ldr	r3, [pc, #684]	; (10594 <_usart_set_config+0x2c4>)
   102e8:	4798      	blx	r3
   102ea:	0003      	movs	r3, r0
   102ec:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   102ee:	697b      	ldr	r3, [r7, #20]
   102f0:	3314      	adds	r3, #20
   102f2:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   102f4:	2300      	movs	r3, #0
   102f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   102f8:	2300      	movs	r3, #0
   102fa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   102fc:	230a      	movs	r3, #10
   102fe:	18fb      	adds	r3, r7, r3
   10300:	2200      	movs	r2, #0
   10302:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10304:	231f      	movs	r3, #31
   10306:	18fb      	adds	r3, r7, r3
   10308:	2200      	movs	r2, #0
   1030a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1030c:	231e      	movs	r3, #30
   1030e:	18fb      	adds	r3, r7, r3
   10310:	2210      	movs	r2, #16
   10312:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   10314:	683b      	ldr	r3, [r7, #0]
   10316:	8a1b      	ldrh	r3, [r3, #16]
   10318:	2280      	movs	r2, #128	; 0x80
   1031a:	01d2      	lsls	r2, r2, #7
   1031c:	4293      	cmp	r3, r2
   1031e:	d01c      	beq.n	1035a <_usart_set_config+0x8a>
   10320:	2280      	movs	r2, #128	; 0x80
   10322:	01d2      	lsls	r2, r2, #7
   10324:	4293      	cmp	r3, r2
   10326:	dc06      	bgt.n	10336 <_usart_set_config+0x66>
   10328:	2b00      	cmp	r3, #0
   1032a:	d00d      	beq.n	10348 <_usart_set_config+0x78>
   1032c:	2280      	movs	r2, #128	; 0x80
   1032e:	0192      	lsls	r2, r2, #6
   10330:	4293      	cmp	r3, r2
   10332:	d024      	beq.n	1037e <_usart_set_config+0xae>
   10334:	e035      	b.n	103a2 <_usart_set_config+0xd2>
   10336:	22c0      	movs	r2, #192	; 0xc0
   10338:	01d2      	lsls	r2, r2, #7
   1033a:	4293      	cmp	r3, r2
   1033c:	d028      	beq.n	10390 <_usart_set_config+0xc0>
   1033e:	2280      	movs	r2, #128	; 0x80
   10340:	0212      	lsls	r2, r2, #8
   10342:	4293      	cmp	r3, r2
   10344:	d012      	beq.n	1036c <_usart_set_config+0x9c>
   10346:	e02c      	b.n	103a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10348:	231f      	movs	r3, #31
   1034a:	18fb      	adds	r3, r7, r3
   1034c:	2200      	movs	r2, #0
   1034e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10350:	231e      	movs	r3, #30
   10352:	18fb      	adds	r3, r7, r3
   10354:	2210      	movs	r2, #16
   10356:	701a      	strb	r2, [r3, #0]
			break;
   10358:	e023      	b.n	103a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1035a:	231f      	movs	r3, #31
   1035c:	18fb      	adds	r3, r7, r3
   1035e:	2200      	movs	r2, #0
   10360:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10362:	231e      	movs	r3, #30
   10364:	18fb      	adds	r3, r7, r3
   10366:	2208      	movs	r2, #8
   10368:	701a      	strb	r2, [r3, #0]
			break;
   1036a:	e01a      	b.n	103a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1036c:	231f      	movs	r3, #31
   1036e:	18fb      	adds	r3, r7, r3
   10370:	2200      	movs	r2, #0
   10372:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   10374:	231e      	movs	r3, #30
   10376:	18fb      	adds	r3, r7, r3
   10378:	2203      	movs	r2, #3
   1037a:	701a      	strb	r2, [r3, #0]
			break;
   1037c:	e011      	b.n	103a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1037e:	231f      	movs	r3, #31
   10380:	18fb      	adds	r3, r7, r3
   10382:	2201      	movs	r2, #1
   10384:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10386:	231e      	movs	r3, #30
   10388:	18fb      	adds	r3, r7, r3
   1038a:	2210      	movs	r2, #16
   1038c:	701a      	strb	r2, [r3, #0]
			break;
   1038e:	e008      	b.n	103a2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10390:	231f      	movs	r3, #31
   10392:	18fb      	adds	r3, r7, r3
   10394:	2201      	movs	r2, #1
   10396:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10398:	231e      	movs	r3, #30
   1039a:	18fb      	adds	r3, r7, r3
   1039c:	2208      	movs	r2, #8
   1039e:	701a      	strb	r2, [r3, #0]
			break;
   103a0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   103a2:	683b      	ldr	r3, [r7, #0]
   103a4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   103a6:	683b      	ldr	r3, [r7, #0]
   103a8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   103aa:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   103ac:	683b      	ldr	r3, [r7, #0]
   103ae:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   103b0:	4313      	orrs	r3, r2
		config->sample_rate |
   103b2:	683a      	ldr	r2, [r7, #0]
   103b4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   103b6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   103b8:	683a      	ldr	r2, [r7, #0]
   103ba:	7e12      	ldrb	r2, [r2, #24]
   103bc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   103be:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   103c0:	683a      	ldr	r2, [r7, #0]
   103c2:	2126      	movs	r1, #38	; 0x26
   103c4:	5c52      	ldrb	r2, [r2, r1]
   103c6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   103c8:	4313      	orrs	r3, r2
   103ca:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   103cc:	231d      	movs	r3, #29
   103ce:	18fb      	adds	r3, r7, r3
   103d0:	2200      	movs	r2, #0
   103d2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   103d4:	683b      	ldr	r3, [r7, #0]
   103d6:	685b      	ldr	r3, [r3, #4]
   103d8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   103da:	68fb      	ldr	r3, [r7, #12]
   103dc:	2b00      	cmp	r3, #0
   103de:	d01e      	beq.n	1041e <_usart_set_config+0x14e>
   103e0:	2280      	movs	r2, #128	; 0x80
   103e2:	0552      	lsls	r2, r2, #21
   103e4:	4293      	cmp	r3, r2
   103e6:	d14f      	bne.n	10488 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   103e8:	683b      	ldr	r3, [r7, #0]
   103ea:	2227      	movs	r2, #39	; 0x27
   103ec:	5c9b      	ldrb	r3, [r3, r2]
   103ee:	2201      	movs	r2, #1
   103f0:	4053      	eors	r3, r2
   103f2:	b2db      	uxtb	r3, r3
   103f4:	2b00      	cmp	r3, #0
   103f6:	d046      	beq.n	10486 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   103f8:	683b      	ldr	r3, [r7, #0]
   103fa:	6a1d      	ldr	r5, [r3, #32]
   103fc:	693b      	ldr	r3, [r7, #16]
   103fe:	b2db      	uxtb	r3, r3
   10400:	0018      	movs	r0, r3
   10402:	4b65      	ldr	r3, [pc, #404]	; (10598 <_usart_set_config+0x2c8>)
   10404:	4798      	blx	r3
   10406:	0001      	movs	r1, r0
   10408:	231d      	movs	r3, #29
   1040a:	18fc      	adds	r4, r7, r3
   1040c:	230a      	movs	r3, #10
   1040e:	18fb      	adds	r3, r7, r3
   10410:	001a      	movs	r2, r3
   10412:	0028      	movs	r0, r5
   10414:	4b61      	ldr	r3, [pc, #388]	; (1059c <_usart_set_config+0x2cc>)
   10416:	4798      	blx	r3
   10418:	0003      	movs	r3, r0
   1041a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   1041c:	e033      	b.n	10486 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   1041e:	683b      	ldr	r3, [r7, #0]
   10420:	2227      	movs	r2, #39	; 0x27
   10422:	5c9b      	ldrb	r3, [r3, r2]
   10424:	2b00      	cmp	r3, #0
   10426:	d014      	beq.n	10452 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   10428:	683b      	ldr	r3, [r7, #0]
   1042a:	6a18      	ldr	r0, [r3, #32]
   1042c:	683b      	ldr	r3, [r7, #0]
   1042e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   10430:	231d      	movs	r3, #29
   10432:	18fc      	adds	r4, r7, r3
   10434:	231f      	movs	r3, #31
   10436:	18fb      	adds	r3, r7, r3
   10438:	781d      	ldrb	r5, [r3, #0]
   1043a:	230a      	movs	r3, #10
   1043c:	18fa      	adds	r2, r7, r3
   1043e:	231e      	movs	r3, #30
   10440:	18fb      	adds	r3, r7, r3
   10442:	781b      	ldrb	r3, [r3, #0]
   10444:	9300      	str	r3, [sp, #0]
   10446:	002b      	movs	r3, r5
   10448:	4d55      	ldr	r5, [pc, #340]	; (105a0 <_usart_set_config+0x2d0>)
   1044a:	47a8      	blx	r5
   1044c:	0003      	movs	r3, r0
   1044e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   10450:	e01a      	b.n	10488 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   10452:	683b      	ldr	r3, [r7, #0]
   10454:	6a1d      	ldr	r5, [r3, #32]
   10456:	693b      	ldr	r3, [r7, #16]
   10458:	b2db      	uxtb	r3, r3
   1045a:	0018      	movs	r0, r3
   1045c:	4b4e      	ldr	r3, [pc, #312]	; (10598 <_usart_set_config+0x2c8>)
   1045e:	4798      	blx	r3
				status_code =
   10460:	231d      	movs	r3, #29
   10462:	18fc      	adds	r4, r7, r3
   10464:	231f      	movs	r3, #31
   10466:	18fb      	adds	r3, r7, r3
   10468:	7819      	ldrb	r1, [r3, #0]
   1046a:	230a      	movs	r3, #10
   1046c:	18fa      	adds	r2, r7, r3
   1046e:	231e      	movs	r3, #30
   10470:	18fb      	adds	r3, r7, r3
   10472:	781b      	ldrb	r3, [r3, #0]
   10474:	9300      	str	r3, [sp, #0]
   10476:	000b      	movs	r3, r1
   10478:	0001      	movs	r1, r0
   1047a:	0028      	movs	r0, r5
   1047c:	4d48      	ldr	r5, [pc, #288]	; (105a0 <_usart_set_config+0x2d0>)
   1047e:	47a8      	blx	r5
   10480:	0003      	movs	r3, r0
   10482:	7023      	strb	r3, [r4, #0]
			break;
   10484:	e000      	b.n	10488 <_usart_set_config+0x1b8>
			break;
   10486:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   10488:	231d      	movs	r3, #29
   1048a:	18fb      	adds	r3, r7, r3
   1048c:	781b      	ldrb	r3, [r3, #0]
   1048e:	2b00      	cmp	r3, #0
   10490:	d003      	beq.n	1049a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   10492:	231d      	movs	r3, #29
   10494:	18fb      	adds	r3, r7, r3
   10496:	781b      	ldrb	r3, [r3, #0]
   10498:	e077      	b.n	1058a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1049a:	683b      	ldr	r3, [r7, #0]
   1049c:	7e5b      	ldrb	r3, [r3, #25]
   1049e:	2b00      	cmp	r3, #0
   104a0:	d003      	beq.n	104aa <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   104a2:	683b      	ldr	r3, [r7, #0]
   104a4:	7e9a      	ldrb	r2, [r3, #26]
   104a6:	69bb      	ldr	r3, [r7, #24]
   104a8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   104aa:	687b      	ldr	r3, [r7, #4]
   104ac:	0018      	movs	r0, r3
   104ae:	4b3d      	ldr	r3, [pc, #244]	; (105a4 <_usart_set_config+0x2d4>)
   104b0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   104b2:	230a      	movs	r3, #10
   104b4:	18fb      	adds	r3, r7, r3
   104b6:	881a      	ldrh	r2, [r3, #0]
   104b8:	69bb      	ldr	r3, [r7, #24]
   104ba:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   104bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   104be:	68fb      	ldr	r3, [r7, #12]
   104c0:	4313      	orrs	r3, r2
   104c2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   104c4:	683b      	ldr	r3, [r7, #0]
   104c6:	2227      	movs	r2, #39	; 0x27
   104c8:	5c9b      	ldrb	r3, [r3, r2]
   104ca:	2201      	movs	r2, #1
   104cc:	4053      	eors	r3, r2
   104ce:	b2db      	uxtb	r3, r3
   104d0:	2b00      	cmp	r3, #0
   104d2:	d003      	beq.n	104dc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   104d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104d6:	2204      	movs	r2, #4
   104d8:	4313      	orrs	r3, r2
   104da:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   104dc:	683b      	ldr	r3, [r7, #0]
   104de:	7e5b      	ldrb	r3, [r3, #25]
   104e0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   104e2:	683b      	ldr	r3, [r7, #0]
   104e4:	7f1b      	ldrb	r3, [r3, #28]
   104e6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   104e8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   104ea:	683b      	ldr	r3, [r7, #0]
   104ec:	7f5b      	ldrb	r3, [r3, #29]
   104ee:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   104f0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   104f2:	683b      	ldr	r3, [r7, #0]
   104f4:	2124      	movs	r1, #36	; 0x24
   104f6:	5c5b      	ldrb	r3, [r3, r1]
   104f8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   104fa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   104fc:	683b      	ldr	r3, [r7, #0]
   104fe:	2125      	movs	r1, #37	; 0x25
   10500:	5c5b      	ldrb	r3, [r3, r1]
   10502:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10504:	4313      	orrs	r3, r2
	ctrlb =  
   10506:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   10508:	683b      	ldr	r3, [r7, #0]
   1050a:	7a9b      	ldrb	r3, [r3, #10]
   1050c:	001a      	movs	r2, r3
   1050e:	6a3b      	ldr	r3, [r7, #32]
   10510:	4313      	orrs	r3, r2
   10512:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   10514:	683b      	ldr	r3, [r7, #0]
   10516:	7adb      	ldrb	r3, [r3, #11]
   10518:	001a      	movs	r2, r3
   1051a:	6a3b      	ldr	r3, [r7, #32]
   1051c:	4313      	orrs	r3, r2
   1051e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   10520:	683b      	ldr	r3, [r7, #0]
   10522:	891b      	ldrh	r3, [r3, #8]
   10524:	2bff      	cmp	r3, #255	; 0xff
   10526:	d00b      	beq.n	10540 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   10528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1052a:	2280      	movs	r2, #128	; 0x80
   1052c:	0452      	lsls	r2, r2, #17
   1052e:	4313      	orrs	r3, r2
   10530:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   10532:	683b      	ldr	r3, [r7, #0]
   10534:	891b      	ldrh	r3, [r3, #8]
   10536:	001a      	movs	r2, r3
   10538:	6a3b      	ldr	r3, [r7, #32]
   1053a:	4313      	orrs	r3, r2
   1053c:	623b      	str	r3, [r7, #32]
   1053e:	e008      	b.n	10552 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   10540:	683b      	ldr	r3, [r7, #0]
   10542:	7edb      	ldrb	r3, [r3, #27]
   10544:	2b00      	cmp	r3, #0
   10546:	d004      	beq.n	10552 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   10548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1054a:	2280      	movs	r2, #128	; 0x80
   1054c:	04d2      	lsls	r2, r2, #19
   1054e:	4313      	orrs	r3, r2
   10550:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   10552:	683b      	ldr	r3, [r7, #0]
   10554:	222c      	movs	r2, #44	; 0x2c
   10556:	5c9b      	ldrb	r3, [r3, r2]
   10558:	2b00      	cmp	r3, #0
   1055a:	d103      	bne.n	10564 <_usart_set_config+0x294>
   1055c:	4b12      	ldr	r3, [pc, #72]	; (105a8 <_usart_set_config+0x2d8>)
   1055e:	4798      	blx	r3
   10560:	1e03      	subs	r3, r0, #0
   10562:	d003      	beq.n	1056c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10566:	2280      	movs	r2, #128	; 0x80
   10568:	4313      	orrs	r3, r2
   1056a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1056c:	687b      	ldr	r3, [r7, #4]
   1056e:	0018      	movs	r0, r3
   10570:	4b0c      	ldr	r3, [pc, #48]	; (105a4 <_usart_set_config+0x2d4>)
   10572:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   10574:	69bb      	ldr	r3, [r7, #24]
   10576:	6a3a      	ldr	r2, [r7, #32]
   10578:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1057a:	687b      	ldr	r3, [r7, #4]
   1057c:	0018      	movs	r0, r3
   1057e:	4b09      	ldr	r3, [pc, #36]	; (105a4 <_usart_set_config+0x2d4>)
   10580:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   10582:	69bb      	ldr	r3, [r7, #24]
   10584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10586:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   10588:	2300      	movs	r3, #0
}
   1058a:	0018      	movs	r0, r3
   1058c:	46bd      	mov	sp, r7
   1058e:	b00a      	add	sp, #40	; 0x28
   10590:	bdb0      	pop	{r4, r5, r7, pc}
   10592:	46c0      	nop			; (mov r8, r8)
   10594:	0000d829 	.word	0x0000d829
   10598:	00013631 	.word	0x00013631
   1059c:	0000d3a3 	.word	0x0000d3a3
   105a0:	0000d421 	.word	0x0000d421
   105a4:	000102ad 	.word	0x000102ad
   105a8:	0001026d 	.word	0x0001026d

000105ac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   105ac:	b590      	push	{r4, r7, lr}
   105ae:	b093      	sub	sp, #76	; 0x4c
   105b0:	af00      	add	r7, sp, #0
   105b2:	60f8      	str	r0, [r7, #12]
   105b4:	60b9      	str	r1, [r7, #8]
   105b6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   105b8:	233b      	movs	r3, #59	; 0x3b
   105ba:	18fb      	adds	r3, r7, r3
   105bc:	2200      	movs	r2, #0
   105be:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   105c0:	68fb      	ldr	r3, [r7, #12]
   105c2:	68ba      	ldr	r2, [r7, #8]
   105c4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   105c6:	68fb      	ldr	r3, [r7, #12]
   105c8:	681b      	ldr	r3, [r3, #0]
   105ca:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   105cc:	68fb      	ldr	r3, [r7, #12]
   105ce:	681b      	ldr	r3, [r3, #0]
   105d0:	0018      	movs	r0, r3
   105d2:	4b86      	ldr	r3, [pc, #536]	; (107ec <usart_init+0x240>)
   105d4:	4798      	blx	r3
   105d6:	0003      	movs	r3, r0
   105d8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   105da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   105dc:	3302      	adds	r3, #2
   105de:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   105e2:	3314      	adds	r3, #20
   105e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   105e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105e8:	681b      	ldr	r3, [r3, #0]
   105ea:	2201      	movs	r2, #1
   105ec:	4013      	ands	r3, r2
   105ee:	d001      	beq.n	105f4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   105f0:	2305      	movs	r3, #5
   105f2:	e0f6      	b.n	107e2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   105f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105f6:	681b      	ldr	r3, [r3, #0]
   105f8:	2202      	movs	r2, #2
   105fa:	4013      	ands	r3, r2
   105fc:	d001      	beq.n	10602 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   105fe:	231c      	movs	r3, #28
   10600:	e0ef      	b.n	107e2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10602:	2201      	movs	r2, #1
   10604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10606:	409a      	lsls	r2, r3
   10608:	0013      	movs	r3, r2
   1060a:	0019      	movs	r1, r3
   1060c:	2002      	movs	r0, #2
   1060e:	4b78      	ldr	r3, [pc, #480]	; (107f0 <usart_init+0x244>)
   10610:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   10612:	2324      	movs	r3, #36	; 0x24
   10614:	18fb      	adds	r3, r7, r3
   10616:	0018      	movs	r0, r3
   10618:	4b76      	ldr	r3, [pc, #472]	; (107f4 <usart_init+0x248>)
   1061a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1061c:	687b      	ldr	r3, [r7, #4]
   1061e:	222d      	movs	r2, #45	; 0x2d
   10620:	5c9a      	ldrb	r2, [r3, r2]
   10622:	2324      	movs	r3, #36	; 0x24
   10624:	18fb      	adds	r3, r7, r3
   10626:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10628:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1062a:	b2db      	uxtb	r3, r3
   1062c:	2224      	movs	r2, #36	; 0x24
   1062e:	18ba      	adds	r2, r7, r2
   10630:	0011      	movs	r1, r2
   10632:	0018      	movs	r0, r3
   10634:	4b70      	ldr	r3, [pc, #448]	; (107f8 <usart_init+0x24c>)
   10636:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10638:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1063a:	b2db      	uxtb	r3, r3
   1063c:	0018      	movs	r0, r3
   1063e:	4b6f      	ldr	r3, [pc, #444]	; (107fc <usart_init+0x250>)
   10640:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10642:	687b      	ldr	r3, [r7, #4]
   10644:	222d      	movs	r2, #45	; 0x2d
   10646:	5c9b      	ldrb	r3, [r3, r2]
   10648:	2100      	movs	r1, #0
   1064a:	0018      	movs	r0, r3
   1064c:	4b6c      	ldr	r3, [pc, #432]	; (10800 <usart_init+0x254>)
   1064e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   10650:	687b      	ldr	r3, [r7, #4]
   10652:	7ada      	ldrb	r2, [r3, #11]
   10654:	68fb      	ldr	r3, [r7, #12]
   10656:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   10658:	687b      	ldr	r3, [r7, #4]
   1065a:	2224      	movs	r2, #36	; 0x24
   1065c:	5c9a      	ldrb	r2, [r3, r2]
   1065e:	68fb      	ldr	r3, [r7, #12]
   10660:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10662:	687b      	ldr	r3, [r7, #4]
   10664:	2225      	movs	r2, #37	; 0x25
   10666:	5c9a      	ldrb	r2, [r3, r2]
   10668:	68fb      	ldr	r3, [r7, #12]
   1066a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   1066c:	687b      	ldr	r3, [r7, #4]
   1066e:	7eda      	ldrb	r2, [r3, #27]
   10670:	68fb      	ldr	r3, [r7, #12]
   10672:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10674:	687b      	ldr	r3, [r7, #4]
   10676:	7f1a      	ldrb	r2, [r3, #28]
   10678:	68fb      	ldr	r3, [r7, #12]
   1067a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   1067c:	233b      	movs	r3, #59	; 0x3b
   1067e:	18fc      	adds	r4, r7, r3
   10680:	687a      	ldr	r2, [r7, #4]
   10682:	68fb      	ldr	r3, [r7, #12]
   10684:	0011      	movs	r1, r2
   10686:	0018      	movs	r0, r3
   10688:	4b5e      	ldr	r3, [pc, #376]	; (10804 <usart_init+0x258>)
   1068a:	4798      	blx	r3
   1068c:	0003      	movs	r3, r0
   1068e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   10690:	233b      	movs	r3, #59	; 0x3b
   10692:	18fb      	adds	r3, r7, r3
   10694:	781b      	ldrb	r3, [r3, #0]
   10696:	2b00      	cmp	r3, #0
   10698:	d003      	beq.n	106a2 <usart_init+0xf6>
		return status_code;
   1069a:	233b      	movs	r3, #59	; 0x3b
   1069c:	18fb      	adds	r3, r7, r3
   1069e:	781b      	ldrb	r3, [r3, #0]
   106a0:	e09f      	b.n	107e2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   106a2:	2320      	movs	r3, #32
   106a4:	18fb      	adds	r3, r7, r3
   106a6:	0018      	movs	r0, r3
   106a8:	4b57      	ldr	r3, [pc, #348]	; (10808 <usart_init+0x25c>)
   106aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   106ac:	2320      	movs	r3, #32
   106ae:	18fb      	adds	r3, r7, r3
   106b0:	2200      	movs	r2, #0
   106b2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   106b4:	2320      	movs	r3, #32
   106b6:	18fb      	adds	r3, r7, r3
   106b8:	2200      	movs	r2, #0
   106ba:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   106bc:	687b      	ldr	r3, [r7, #4]
   106be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   106c0:	2310      	movs	r3, #16
   106c2:	18fb      	adds	r3, r7, r3
   106c4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   106c6:	687b      	ldr	r3, [r7, #4]
   106c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   106ca:	2310      	movs	r3, #16
   106cc:	18fb      	adds	r3, r7, r3
   106ce:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   106d0:	687b      	ldr	r3, [r7, #4]
   106d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   106d4:	2310      	movs	r3, #16
   106d6:	18fb      	adds	r3, r7, r3
   106d8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   106da:	687b      	ldr	r3, [r7, #4]
   106dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   106de:	2310      	movs	r3, #16
   106e0:	18fb      	adds	r3, r7, r3
   106e2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   106e4:	2347      	movs	r3, #71	; 0x47
   106e6:	18fb      	adds	r3, r7, r3
   106e8:	2200      	movs	r2, #0
   106ea:	701a      	strb	r2, [r3, #0]
   106ec:	e02c      	b.n	10748 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   106ee:	2347      	movs	r3, #71	; 0x47
   106f0:	18fb      	adds	r3, r7, r3
   106f2:	781a      	ldrb	r2, [r3, #0]
   106f4:	2310      	movs	r3, #16
   106f6:	18fb      	adds	r3, r7, r3
   106f8:	0092      	lsls	r2, r2, #2
   106fa:	58d3      	ldr	r3, [r2, r3]
   106fc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   106fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10700:	2b00      	cmp	r3, #0
   10702:	d109      	bne.n	10718 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10704:	2347      	movs	r3, #71	; 0x47
   10706:	18fb      	adds	r3, r7, r3
   10708:	781a      	ldrb	r2, [r3, #0]
   1070a:	68bb      	ldr	r3, [r7, #8]
   1070c:	0011      	movs	r1, r2
   1070e:	0018      	movs	r0, r3
   10710:	4b3e      	ldr	r3, [pc, #248]	; (1080c <usart_init+0x260>)
   10712:	4798      	blx	r3
   10714:	0003      	movs	r3, r0
   10716:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   10718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1071a:	3301      	adds	r3, #1
   1071c:	d00d      	beq.n	1073a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1071e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10720:	b2da      	uxtb	r2, r3
   10722:	2320      	movs	r3, #32
   10724:	18fb      	adds	r3, r7, r3
   10726:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1072a:	0c1b      	lsrs	r3, r3, #16
   1072c:	b2db      	uxtb	r3, r3
   1072e:	2220      	movs	r2, #32
   10730:	18ba      	adds	r2, r7, r2
   10732:	0011      	movs	r1, r2
   10734:	0018      	movs	r0, r3
   10736:	4b36      	ldr	r3, [pc, #216]	; (10810 <usart_init+0x264>)
   10738:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   1073a:	2347      	movs	r3, #71	; 0x47
   1073c:	18fb      	adds	r3, r7, r3
   1073e:	781a      	ldrb	r2, [r3, #0]
   10740:	2347      	movs	r3, #71	; 0x47
   10742:	18fb      	adds	r3, r7, r3
   10744:	3201      	adds	r2, #1
   10746:	701a      	strb	r2, [r3, #0]
   10748:	2347      	movs	r3, #71	; 0x47
   1074a:	18fb      	adds	r3, r7, r3
   1074c:	781b      	ldrb	r3, [r3, #0]
   1074e:	2b03      	cmp	r3, #3
   10750:	d9cd      	bls.n	106ee <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10752:	2300      	movs	r3, #0
   10754:	63fb      	str	r3, [r7, #60]	; 0x3c
   10756:	e00a      	b.n	1076e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   10758:	68fa      	ldr	r2, [r7, #12]
   1075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1075c:	3302      	adds	r3, #2
   1075e:	009b      	lsls	r3, r3, #2
   10760:	18d3      	adds	r3, r2, r3
   10762:	3304      	adds	r3, #4
   10764:	2200      	movs	r2, #0
   10766:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1076a:	3301      	adds	r3, #1
   1076c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1076e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10770:	2b05      	cmp	r3, #5
   10772:	d9f1      	bls.n	10758 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   10774:	68fb      	ldr	r3, [r7, #12]
   10776:	2200      	movs	r2, #0
   10778:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1077a:	68fb      	ldr	r3, [r7, #12]
   1077c:	2200      	movs	r2, #0
   1077e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10780:	68fb      	ldr	r3, [r7, #12]
   10782:	2200      	movs	r2, #0
   10784:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10786:	68fb      	ldr	r3, [r7, #12]
   10788:	2200      	movs	r2, #0
   1078a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1078c:	68fb      	ldr	r3, [r7, #12]
   1078e:	2230      	movs	r2, #48	; 0x30
   10790:	2100      	movs	r1, #0
   10792:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   10794:	68fb      	ldr	r3, [r7, #12]
   10796:	2231      	movs	r2, #49	; 0x31
   10798:	2100      	movs	r1, #0
   1079a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   1079c:	68fb      	ldr	r3, [r7, #12]
   1079e:	2232      	movs	r2, #50	; 0x32
   107a0:	2100      	movs	r1, #0
   107a2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   107a4:	68fb      	ldr	r3, [r7, #12]
   107a6:	2233      	movs	r2, #51	; 0x33
   107a8:	2100      	movs	r1, #0
   107aa:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   107ac:	68fb      	ldr	r3, [r7, #12]
   107ae:	681b      	ldr	r3, [r3, #0]
   107b0:	2227      	movs	r2, #39	; 0x27
   107b2:	18bc      	adds	r4, r7, r2
   107b4:	0018      	movs	r0, r3
   107b6:	4b0d      	ldr	r3, [pc, #52]	; (107ec <usart_init+0x240>)
   107b8:	4798      	blx	r3
   107ba:	0003      	movs	r3, r0
   107bc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   107be:	4a15      	ldr	r2, [pc, #84]	; (10814 <usart_init+0x268>)
   107c0:	2327      	movs	r3, #39	; 0x27
   107c2:	18fb      	adds	r3, r7, r3
   107c4:	781b      	ldrb	r3, [r3, #0]
   107c6:	0011      	movs	r1, r2
   107c8:	0018      	movs	r0, r3
   107ca:	4b13      	ldr	r3, [pc, #76]	; (10818 <usart_init+0x26c>)
   107cc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   107ce:	2327      	movs	r3, #39	; 0x27
   107d0:	18fb      	adds	r3, r7, r3
   107d2:	781a      	ldrb	r2, [r3, #0]
   107d4:	4b11      	ldr	r3, [pc, #68]	; (1081c <usart_init+0x270>)
   107d6:	0092      	lsls	r2, r2, #2
   107d8:	68f9      	ldr	r1, [r7, #12]
   107da:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   107dc:	233b      	movs	r3, #59	; 0x3b
   107de:	18fb      	adds	r3, r7, r3
   107e0:	781b      	ldrb	r3, [r3, #0]
}
   107e2:	0018      	movs	r0, r3
   107e4:	46bd      	mov	sp, r7
   107e6:	b013      	add	sp, #76	; 0x4c
   107e8:	bd90      	pop	{r4, r7, pc}
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	0000d829 	.word	0x0000d829
   107f0:	000101e9 	.word	0x000101e9
   107f4:	000101d1 	.word	0x000101d1
   107f8:	0001350d 	.word	0x0001350d
   107fc:	00013551 	.word	0x00013551
   10800:	0000d5e1 	.word	0x0000d5e1
   10804:	000102d1 	.word	0x000102d1
   10808:	00010245 	.word	0x00010245
   1080c:	0000d66d 	.word	0x0000d66d
   10810:	000137f9 	.word	0x000137f9
   10814:	000109f5 	.word	0x000109f5
   10818:	00010d49 	.word	0x00010d49
   1081c:	20000908 	.word	0x20000908

00010820 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   10820:	b580      	push	{r7, lr}
   10822:	b084      	sub	sp, #16
   10824:	af00      	add	r7, sp, #0
   10826:	6078      	str	r0, [r7, #4]
   10828:	000a      	movs	r2, r1
   1082a:	1cbb      	adds	r3, r7, #2
   1082c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1082e:	687b      	ldr	r3, [r7, #4]
   10830:	681b      	ldr	r3, [r3, #0]
   10832:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10834:	687b      	ldr	r3, [r7, #4]
   10836:	79db      	ldrb	r3, [r3, #7]
   10838:	2201      	movs	r2, #1
   1083a:	4053      	eors	r3, r2
   1083c:	b2db      	uxtb	r3, r3
   1083e:	2b00      	cmp	r3, #0
   10840:	d001      	beq.n	10846 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   10842:	231c      	movs	r3, #28
   10844:	e017      	b.n	10876 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   10846:	687b      	ldr	r3, [r7, #4]
   10848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1084a:	b29b      	uxth	r3, r3
   1084c:	2b00      	cmp	r3, #0
   1084e:	d001      	beq.n	10854 <usart_write_wait+0x34>
		return STATUS_BUSY;
   10850:	2305      	movs	r3, #5
   10852:	e010      	b.n	10876 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10854:	687b      	ldr	r3, [r7, #4]
   10856:	0018      	movs	r0, r3
   10858:	4b09      	ldr	r3, [pc, #36]	; (10880 <usart_write_wait+0x60>)
   1085a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   1085c:	68fb      	ldr	r3, [r7, #12]
   1085e:	1cba      	adds	r2, r7, #2
   10860:	8812      	ldrh	r2, [r2, #0]
   10862:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10864:	46c0      	nop			; (mov r8, r8)
   10866:	68fb      	ldr	r3, [r7, #12]
   10868:	7e1b      	ldrb	r3, [r3, #24]
   1086a:	b2db      	uxtb	r3, r3
   1086c:	001a      	movs	r2, r3
   1086e:	2302      	movs	r3, #2
   10870:	4013      	ands	r3, r2
   10872:	d0f8      	beq.n	10866 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   10874:	2300      	movs	r3, #0
}
   10876:	0018      	movs	r0, r3
   10878:	46bd      	mov	sp, r7
   1087a:	b004      	add	sp, #16
   1087c:	bd80      	pop	{r7, pc}
   1087e:	46c0      	nop			; (mov r8, r8)
   10880:	000102ad 	.word	0x000102ad

00010884 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   10884:	b580      	push	{r7, lr}
   10886:	b08a      	sub	sp, #40	; 0x28
   10888:	af00      	add	r7, sp, #0
   1088a:	60f8      	str	r0, [r7, #12]
   1088c:	60b9      	str	r1, [r7, #8]
   1088e:	1dbb      	adds	r3, r7, #6
   10890:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   10892:	1dbb      	adds	r3, r7, #6
   10894:	881b      	ldrh	r3, [r3, #0]
   10896:	2b00      	cmp	r3, #0
   10898:	d101      	bne.n	1089e <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1089a:	2317      	movs	r3, #23
   1089c:	e07e      	b.n	1099c <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   1089e:	68fb      	ldr	r3, [r7, #12]
   108a0:	79db      	ldrb	r3, [r3, #7]
   108a2:	2201      	movs	r2, #1
   108a4:	4053      	eors	r3, r2
   108a6:	b2db      	uxtb	r3, r3
   108a8:	2b00      	cmp	r3, #0
   108aa:	d001      	beq.n	108b0 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   108ac:	231c      	movs	r3, #28
   108ae:	e075      	b.n	1099c <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   108b0:	68fb      	ldr	r3, [r7, #12]
   108b2:	681b      	ldr	r3, [r3, #0]
   108b4:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   108b6:	68fb      	ldr	r3, [r7, #12]
   108b8:	0018      	movs	r0, r3
   108ba:	4b3a      	ldr	r3, [pc, #232]	; (109a4 <usart_write_buffer_wait+0x120>)
   108bc:	4798      	blx	r3

	uint16_t tx_pos = 0;
   108be:	2326      	movs	r3, #38	; 0x26
   108c0:	18fb      	adds	r3, r7, r3
   108c2:	2200      	movs	r2, #0
   108c4:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   108c6:	e048      	b.n	1095a <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   108c8:	2300      	movs	r3, #0
   108ca:	623b      	str	r3, [r7, #32]
   108cc:	e00f      	b.n	108ee <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   108ce:	697b      	ldr	r3, [r7, #20]
   108d0:	7e1b      	ldrb	r3, [r3, #24]
   108d2:	b2db      	uxtb	r3, r3
   108d4:	001a      	movs	r2, r3
   108d6:	2301      	movs	r3, #1
   108d8:	4013      	ands	r3, r2
   108da:	d10d      	bne.n	108f8 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   108dc:	6a3b      	ldr	r3, [r7, #32]
   108de:	4a32      	ldr	r2, [pc, #200]	; (109a8 <usart_write_buffer_wait+0x124>)
   108e0:	4293      	cmp	r3, r2
   108e2:	d101      	bne.n	108e8 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   108e4:	2312      	movs	r3, #18
   108e6:	e059      	b.n	1099c <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   108e8:	6a3b      	ldr	r3, [r7, #32]
   108ea:	3301      	adds	r3, #1
   108ec:	623b      	str	r3, [r7, #32]
   108ee:	6a3b      	ldr	r3, [r7, #32]
   108f0:	4a2d      	ldr	r2, [pc, #180]	; (109a8 <usart_write_buffer_wait+0x124>)
   108f2:	4293      	cmp	r3, r2
   108f4:	d9eb      	bls.n	108ce <usart_write_buffer_wait+0x4a>
   108f6:	e000      	b.n	108fa <usart_write_buffer_wait+0x76>
				break;
   108f8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   108fa:	2326      	movs	r3, #38	; 0x26
   108fc:	18fb      	adds	r3, r7, r3
   108fe:	881b      	ldrh	r3, [r3, #0]
   10900:	2226      	movs	r2, #38	; 0x26
   10902:	18ba      	adds	r2, r7, r2
   10904:	1c59      	adds	r1, r3, #1
   10906:	8011      	strh	r1, [r2, #0]
   10908:	001a      	movs	r2, r3
   1090a:	68bb      	ldr	r3, [r7, #8]
   1090c:	189b      	adds	r3, r3, r2
   1090e:	781a      	ldrb	r2, [r3, #0]
   10910:	231e      	movs	r3, #30
   10912:	18fb      	adds	r3, r7, r3
   10914:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10916:	68fb      	ldr	r3, [r7, #12]
   10918:	795b      	ldrb	r3, [r3, #5]
   1091a:	2b01      	cmp	r3, #1
   1091c:	d115      	bne.n	1094a <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1091e:	2326      	movs	r3, #38	; 0x26
   10920:	18fb      	adds	r3, r7, r3
   10922:	881b      	ldrh	r3, [r3, #0]
   10924:	2226      	movs	r2, #38	; 0x26
   10926:	18ba      	adds	r2, r7, r2
   10928:	1c59      	adds	r1, r3, #1
   1092a:	8011      	strh	r1, [r2, #0]
   1092c:	001a      	movs	r2, r3
   1092e:	68bb      	ldr	r3, [r7, #8]
   10930:	189b      	adds	r3, r3, r2
   10932:	781b      	ldrb	r3, [r3, #0]
   10934:	021b      	lsls	r3, r3, #8
   10936:	b21a      	sxth	r2, r3
   10938:	231e      	movs	r3, #30
   1093a:	18fb      	adds	r3, r7, r3
   1093c:	2100      	movs	r1, #0
   1093e:	5e5b      	ldrsh	r3, [r3, r1]
   10940:	4313      	orrs	r3, r2
   10942:	b21a      	sxth	r2, r3
   10944:	231e      	movs	r3, #30
   10946:	18fb      	adds	r3, r7, r3
   10948:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   1094a:	231e      	movs	r3, #30
   1094c:	18fb      	adds	r3, r7, r3
   1094e:	881a      	ldrh	r2, [r3, #0]
   10950:	68fb      	ldr	r3, [r7, #12]
   10952:	0011      	movs	r1, r2
   10954:	0018      	movs	r0, r3
   10956:	4b15      	ldr	r3, [pc, #84]	; (109ac <usart_write_buffer_wait+0x128>)
   10958:	4798      	blx	r3
	while (length--) {
   1095a:	1dbb      	adds	r3, r7, #6
   1095c:	881b      	ldrh	r3, [r3, #0]
   1095e:	1dba      	adds	r2, r7, #6
   10960:	1e59      	subs	r1, r3, #1
   10962:	8011      	strh	r1, [r2, #0]
   10964:	2b00      	cmp	r3, #0
   10966:	d1af      	bne.n	108c8 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10968:	2300      	movs	r3, #0
   1096a:	61bb      	str	r3, [r7, #24]
   1096c:	e00f      	b.n	1098e <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   1096e:	697b      	ldr	r3, [r7, #20]
   10970:	7e1b      	ldrb	r3, [r3, #24]
   10972:	b2db      	uxtb	r3, r3
   10974:	001a      	movs	r2, r3
   10976:	2302      	movs	r3, #2
   10978:	4013      	ands	r3, r2
   1097a:	d10d      	bne.n	10998 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   1097c:	69bb      	ldr	r3, [r7, #24]
   1097e:	4a0a      	ldr	r2, [pc, #40]	; (109a8 <usart_write_buffer_wait+0x124>)
   10980:	4293      	cmp	r3, r2
   10982:	d101      	bne.n	10988 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   10984:	2312      	movs	r3, #18
   10986:	e009      	b.n	1099c <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10988:	69bb      	ldr	r3, [r7, #24]
   1098a:	3301      	adds	r3, #1
   1098c:	61bb      	str	r3, [r7, #24]
   1098e:	69bb      	ldr	r3, [r7, #24]
   10990:	4a05      	ldr	r2, [pc, #20]	; (109a8 <usart_write_buffer_wait+0x124>)
   10992:	4293      	cmp	r3, r2
   10994:	d9eb      	bls.n	1096e <usart_write_buffer_wait+0xea>
   10996:	e000      	b.n	1099a <usart_write_buffer_wait+0x116>
			break;
   10998:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   1099a:	2300      	movs	r3, #0
}
   1099c:	0018      	movs	r0, r3
   1099e:	46bd      	mov	sp, r7
   109a0:	b00a      	add	sp, #40	; 0x28
   109a2:	bd80      	pop	{r7, pc}
   109a4:	000102ad 	.word	0x000102ad
   109a8:	0000ffff 	.word	0x0000ffff
   109ac:	00010821 	.word	0x00010821

000109b0 <usart_is_syncing>:
{
   109b0:	b580      	push	{r7, lr}
   109b2:	b084      	sub	sp, #16
   109b4:	af00      	add	r7, sp, #0
   109b6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   109b8:	687b      	ldr	r3, [r7, #4]
   109ba:	681b      	ldr	r3, [r3, #0]
   109bc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   109be:	68fb      	ldr	r3, [r7, #12]
   109c0:	69db      	ldr	r3, [r3, #28]
   109c2:	1e5a      	subs	r2, r3, #1
   109c4:	4193      	sbcs	r3, r2
   109c6:	b2db      	uxtb	r3, r3
}
   109c8:	0018      	movs	r0, r3
   109ca:	46bd      	mov	sp, r7
   109cc:	b004      	add	sp, #16
   109ce:	bd80      	pop	{r7, pc}

000109d0 <_usart_wait_for_sync>:
{
   109d0:	b580      	push	{r7, lr}
   109d2:	b082      	sub	sp, #8
   109d4:	af00      	add	r7, sp, #0
   109d6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   109d8:	46c0      	nop			; (mov r8, r8)
   109da:	687b      	ldr	r3, [r7, #4]
   109dc:	0018      	movs	r0, r3
   109de:	4b04      	ldr	r3, [pc, #16]	; (109f0 <_usart_wait_for_sync+0x20>)
   109e0:	4798      	blx	r3
   109e2:	1e03      	subs	r3, r0, #0
   109e4:	d1f9      	bne.n	109da <_usart_wait_for_sync+0xa>
}
   109e6:	46c0      	nop			; (mov r8, r8)
   109e8:	46bd      	mov	sp, r7
   109ea:	b002      	add	sp, #8
   109ec:	bd80      	pop	{r7, pc}
   109ee:	46c0      	nop			; (mov r8, r8)
   109f0:	000109b1 	.word	0x000109b1

000109f4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   109f4:	b580      	push	{r7, lr}
   109f6:	b088      	sub	sp, #32
   109f8:	af00      	add	r7, sp, #0
   109fa:	0002      	movs	r2, r0
   109fc:	1dfb      	adds	r3, r7, #7
   109fe:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   10a00:	1dfb      	adds	r3, r7, #7
   10a02:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   10a04:	4ba3      	ldr	r3, [pc, #652]	; (10c94 <_usart_interrupt_handler+0x2a0>)
   10a06:	0092      	lsls	r2, r2, #2
   10a08:	58d3      	ldr	r3, [r2, r3]
   10a0a:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10a0c:	69bb      	ldr	r3, [r7, #24]
   10a0e:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   10a10:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   10a12:	69bb      	ldr	r3, [r7, #24]
   10a14:	0018      	movs	r0, r3
   10a16:	4ba0      	ldr	r3, [pc, #640]	; (10c98 <_usart_interrupt_handler+0x2a4>)
   10a18:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10a1a:	697b      	ldr	r3, [r7, #20]
   10a1c:	7e1b      	ldrb	r3, [r3, #24]
   10a1e:	b2da      	uxtb	r2, r3
   10a20:	2312      	movs	r3, #18
   10a22:	18fb      	adds	r3, r7, r3
   10a24:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   10a26:	697b      	ldr	r3, [r7, #20]
   10a28:	7d9b      	ldrb	r3, [r3, #22]
   10a2a:	b2db      	uxtb	r3, r3
   10a2c:	b29a      	uxth	r2, r3
   10a2e:	2312      	movs	r3, #18
   10a30:	18fb      	adds	r3, r7, r3
   10a32:	2112      	movs	r1, #18
   10a34:	1879      	adds	r1, r7, r1
   10a36:	8809      	ldrh	r1, [r1, #0]
   10a38:	400a      	ands	r2, r1
   10a3a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   10a3c:	69bb      	ldr	r3, [r7, #24]
   10a3e:	2230      	movs	r2, #48	; 0x30
   10a40:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   10a42:	69ba      	ldr	r2, [r7, #24]
   10a44:	2131      	movs	r1, #49	; 0x31
   10a46:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   10a48:	4013      	ands	r3, r2
   10a4a:	b2da      	uxtb	r2, r3
   10a4c:	2310      	movs	r3, #16
   10a4e:	18fb      	adds	r3, r7, r3
   10a50:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10a52:	2312      	movs	r3, #18
   10a54:	18fb      	adds	r3, r7, r3
   10a56:	881b      	ldrh	r3, [r3, #0]
   10a58:	2201      	movs	r2, #1
   10a5a:	4013      	ands	r3, r2
   10a5c:	d044      	beq.n	10ae8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   10a5e:	69bb      	ldr	r3, [r7, #24]
   10a60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10a62:	b29b      	uxth	r3, r3
   10a64:	2b00      	cmp	r3, #0
   10a66:	d03c      	beq.n	10ae2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10a68:	69bb      	ldr	r3, [r7, #24]
   10a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a6c:	781b      	ldrb	r3, [r3, #0]
   10a6e:	b2da      	uxtb	r2, r3
   10a70:	231c      	movs	r3, #28
   10a72:	18fb      	adds	r3, r7, r3
   10a74:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10a76:	69bb      	ldr	r3, [r7, #24]
   10a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a7a:	1c5a      	adds	r2, r3, #1
   10a7c:	69bb      	ldr	r3, [r7, #24]
   10a7e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10a80:	69bb      	ldr	r3, [r7, #24]
   10a82:	795b      	ldrb	r3, [r3, #5]
   10a84:	2b01      	cmp	r3, #1
   10a86:	d113      	bne.n	10ab0 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10a88:	69bb      	ldr	r3, [r7, #24]
   10a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a8c:	781b      	ldrb	r3, [r3, #0]
   10a8e:	b2db      	uxtb	r3, r3
   10a90:	021b      	lsls	r3, r3, #8
   10a92:	b21a      	sxth	r2, r3
   10a94:	231c      	movs	r3, #28
   10a96:	18fb      	adds	r3, r7, r3
   10a98:	2100      	movs	r1, #0
   10a9a:	5e5b      	ldrsh	r3, [r3, r1]
   10a9c:	4313      	orrs	r3, r2
   10a9e:	b21a      	sxth	r2, r3
   10aa0:	231c      	movs	r3, #28
   10aa2:	18fb      	adds	r3, r7, r3
   10aa4:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   10aa6:	69bb      	ldr	r3, [r7, #24]
   10aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10aaa:	1c5a      	adds	r2, r3, #1
   10aac:	69bb      	ldr	r3, [r7, #24]
   10aae:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10ab0:	231c      	movs	r3, #28
   10ab2:	18fb      	adds	r3, r7, r3
   10ab4:	881b      	ldrh	r3, [r3, #0]
   10ab6:	05db      	lsls	r3, r3, #23
   10ab8:	0ddb      	lsrs	r3, r3, #23
   10aba:	b29a      	uxth	r2, r3
   10abc:	697b      	ldr	r3, [r7, #20]
   10abe:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10ac0:	69bb      	ldr	r3, [r7, #24]
   10ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10ac4:	b29b      	uxth	r3, r3
   10ac6:	3b01      	subs	r3, #1
   10ac8:	b29b      	uxth	r3, r3
   10aca:	69ba      	ldr	r2, [r7, #24]
   10acc:	1c19      	adds	r1, r3, #0
   10ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
   10ad0:	2b00      	cmp	r3, #0
   10ad2:	d109      	bne.n	10ae8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10ad4:	697b      	ldr	r3, [r7, #20]
   10ad6:	2201      	movs	r2, #1
   10ad8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10ada:	697b      	ldr	r3, [r7, #20]
   10adc:	2202      	movs	r2, #2
   10ade:	759a      	strb	r2, [r3, #22]
   10ae0:	e002      	b.n	10ae8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10ae2:	697b      	ldr	r3, [r7, #20]
   10ae4:	2201      	movs	r2, #1
   10ae6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10ae8:	2312      	movs	r3, #18
   10aea:	18fb      	adds	r3, r7, r3
   10aec:	881b      	ldrh	r3, [r3, #0]
   10aee:	2202      	movs	r2, #2
   10af0:	4013      	ands	r3, r2
   10af2:	d011      	beq.n	10b18 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10af4:	697b      	ldr	r3, [r7, #20]
   10af6:	2202      	movs	r2, #2
   10af8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   10afa:	69bb      	ldr	r3, [r7, #24]
   10afc:	2233      	movs	r2, #51	; 0x33
   10afe:	2100      	movs	r1, #0
   10b00:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10b02:	2310      	movs	r3, #16
   10b04:	18fb      	adds	r3, r7, r3
   10b06:	881b      	ldrh	r3, [r3, #0]
   10b08:	2201      	movs	r2, #1
   10b0a:	4013      	ands	r3, r2
   10b0c:	d004      	beq.n	10b18 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10b0e:	69bb      	ldr	r3, [r7, #24]
   10b10:	68db      	ldr	r3, [r3, #12]
   10b12:	69ba      	ldr	r2, [r7, #24]
   10b14:	0010      	movs	r0, r2
   10b16:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10b18:	2312      	movs	r3, #18
   10b1a:	18fb      	adds	r3, r7, r3
   10b1c:	881b      	ldrh	r3, [r3, #0]
   10b1e:	2204      	movs	r2, #4
   10b20:	4013      	ands	r3, r2
   10b22:	d100      	bne.n	10b26 <_usart_interrupt_handler+0x132>
   10b24:	e0bd      	b.n	10ca2 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   10b26:	69bb      	ldr	r3, [r7, #24]
   10b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10b2a:	b29b      	uxth	r3, r3
   10b2c:	2b00      	cmp	r3, #0
   10b2e:	d100      	bne.n	10b32 <_usart_interrupt_handler+0x13e>
   10b30:	e0b4      	b.n	10c9c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10b32:	697b      	ldr	r3, [r7, #20]
   10b34:	8b5b      	ldrh	r3, [r3, #26]
   10b36:	b29b      	uxth	r3, r3
   10b38:	b2da      	uxtb	r2, r3
   10b3a:	231f      	movs	r3, #31
   10b3c:	18fb      	adds	r3, r7, r3
   10b3e:	213f      	movs	r1, #63	; 0x3f
   10b40:	400a      	ands	r2, r1
   10b42:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10b44:	231f      	movs	r3, #31
   10b46:	18fb      	adds	r3, r7, r3
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	2208      	movs	r2, #8
   10b4c:	4013      	ands	r3, r2
   10b4e:	d007      	beq.n	10b60 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10b50:	231f      	movs	r3, #31
   10b52:	18fb      	adds	r3, r7, r3
   10b54:	221f      	movs	r2, #31
   10b56:	18ba      	adds	r2, r7, r2
   10b58:	7812      	ldrb	r2, [r2, #0]
   10b5a:	2108      	movs	r1, #8
   10b5c:	438a      	bics	r2, r1
   10b5e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10b60:	231f      	movs	r3, #31
   10b62:	18fb      	adds	r3, r7, r3
   10b64:	781b      	ldrb	r3, [r3, #0]
   10b66:	2b00      	cmp	r3, #0
   10b68:	d050      	beq.n	10c0c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10b6a:	231f      	movs	r3, #31
   10b6c:	18fb      	adds	r3, r7, r3
   10b6e:	781b      	ldrb	r3, [r3, #0]
   10b70:	2202      	movs	r2, #2
   10b72:	4013      	ands	r3, r2
   10b74:	d007      	beq.n	10b86 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10b76:	69bb      	ldr	r3, [r7, #24]
   10b78:	2232      	movs	r2, #50	; 0x32
   10b7a:	211a      	movs	r1, #26
   10b7c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10b7e:	697b      	ldr	r3, [r7, #20]
   10b80:	2202      	movs	r2, #2
   10b82:	835a      	strh	r2, [r3, #26]
   10b84:	e036      	b.n	10bf4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10b86:	231f      	movs	r3, #31
   10b88:	18fb      	adds	r3, r7, r3
   10b8a:	781b      	ldrb	r3, [r3, #0]
   10b8c:	2204      	movs	r2, #4
   10b8e:	4013      	ands	r3, r2
   10b90:	d007      	beq.n	10ba2 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   10b92:	69bb      	ldr	r3, [r7, #24]
   10b94:	2232      	movs	r2, #50	; 0x32
   10b96:	211e      	movs	r1, #30
   10b98:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10b9a:	697b      	ldr	r3, [r7, #20]
   10b9c:	2204      	movs	r2, #4
   10b9e:	835a      	strh	r2, [r3, #26]
   10ba0:	e028      	b.n	10bf4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10ba2:	231f      	movs	r3, #31
   10ba4:	18fb      	adds	r3, r7, r3
   10ba6:	781b      	ldrb	r3, [r3, #0]
   10ba8:	2201      	movs	r2, #1
   10baa:	4013      	ands	r3, r2
   10bac:	d007      	beq.n	10bbe <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   10bae:	69bb      	ldr	r3, [r7, #24]
   10bb0:	2232      	movs	r2, #50	; 0x32
   10bb2:	2113      	movs	r1, #19
   10bb4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10bb6:	697b      	ldr	r3, [r7, #20]
   10bb8:	2201      	movs	r2, #1
   10bba:	835a      	strh	r2, [r3, #26]
   10bbc:	e01a      	b.n	10bf4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10bbe:	231f      	movs	r3, #31
   10bc0:	18fb      	adds	r3, r7, r3
   10bc2:	781b      	ldrb	r3, [r3, #0]
   10bc4:	2210      	movs	r2, #16
   10bc6:	4013      	ands	r3, r2
   10bc8:	d007      	beq.n	10bda <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   10bca:	69bb      	ldr	r3, [r7, #24]
   10bcc:	2232      	movs	r2, #50	; 0x32
   10bce:	2142      	movs	r1, #66	; 0x42
   10bd0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10bd2:	697b      	ldr	r3, [r7, #20]
   10bd4:	2210      	movs	r2, #16
   10bd6:	835a      	strh	r2, [r3, #26]
   10bd8:	e00c      	b.n	10bf4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   10bda:	231f      	movs	r3, #31
   10bdc:	18fb      	adds	r3, r7, r3
   10bde:	781b      	ldrb	r3, [r3, #0]
   10be0:	2220      	movs	r2, #32
   10be2:	4013      	ands	r3, r2
   10be4:	d006      	beq.n	10bf4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   10be6:	69bb      	ldr	r3, [r7, #24]
   10be8:	2232      	movs	r2, #50	; 0x32
   10bea:	2141      	movs	r1, #65	; 0x41
   10bec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10bee:	697b      	ldr	r3, [r7, #20]
   10bf0:	2220      	movs	r2, #32
   10bf2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   10bf4:	2310      	movs	r3, #16
   10bf6:	18fb      	adds	r3, r7, r3
   10bf8:	881b      	ldrh	r3, [r3, #0]
   10bfa:	2204      	movs	r2, #4
   10bfc:	4013      	ands	r3, r2
				if (callback_status
   10bfe:	d050      	beq.n	10ca2 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10c00:	69bb      	ldr	r3, [r7, #24]
   10c02:	695b      	ldr	r3, [r3, #20]
   10c04:	69ba      	ldr	r2, [r7, #24]
   10c06:	0010      	movs	r0, r2
   10c08:	4798      	blx	r3
   10c0a:	e04a      	b.n	10ca2 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   10c0c:	697b      	ldr	r3, [r7, #20]
   10c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   10c10:	b29a      	uxth	r2, r3
   10c12:	230e      	movs	r3, #14
   10c14:	18fb      	adds	r3, r7, r3
   10c16:	05d2      	lsls	r2, r2, #23
   10c18:	0dd2      	lsrs	r2, r2, #23
   10c1a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   10c1c:	69bb      	ldr	r3, [r7, #24]
   10c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c20:	220e      	movs	r2, #14
   10c22:	18ba      	adds	r2, r7, r2
   10c24:	8812      	ldrh	r2, [r2, #0]
   10c26:	b2d2      	uxtb	r2, r2
   10c28:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   10c2a:	69bb      	ldr	r3, [r7, #24]
   10c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c2e:	1c5a      	adds	r2, r3, #1
   10c30:	69bb      	ldr	r3, [r7, #24]
   10c32:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10c34:	69bb      	ldr	r3, [r7, #24]
   10c36:	795b      	ldrb	r3, [r3, #5]
   10c38:	2b01      	cmp	r3, #1
   10c3a:	d10d      	bne.n	10c58 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10c3c:	69bb      	ldr	r3, [r7, #24]
   10c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c40:	220e      	movs	r2, #14
   10c42:	18ba      	adds	r2, r7, r2
   10c44:	8812      	ldrh	r2, [r2, #0]
   10c46:	0a12      	lsrs	r2, r2, #8
   10c48:	b292      	uxth	r2, r2
   10c4a:	b2d2      	uxtb	r2, r2
   10c4c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   10c4e:	69bb      	ldr	r3, [r7, #24]
   10c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c52:	1c5a      	adds	r2, r3, #1
   10c54:	69bb      	ldr	r3, [r7, #24]
   10c56:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   10c58:	69bb      	ldr	r3, [r7, #24]
   10c5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10c5c:	b29b      	uxth	r3, r3
   10c5e:	3b01      	subs	r3, #1
   10c60:	b29b      	uxth	r3, r3
   10c62:	69ba      	ldr	r2, [r7, #24]
   10c64:	1c19      	adds	r1, r3, #0
   10c66:	8591      	strh	r1, [r2, #44]	; 0x2c
   10c68:	2b00      	cmp	r3, #0
   10c6a:	d11a      	bne.n	10ca2 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10c6c:	697b      	ldr	r3, [r7, #20]
   10c6e:	2204      	movs	r2, #4
   10c70:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   10c72:	69bb      	ldr	r3, [r7, #24]
   10c74:	2232      	movs	r2, #50	; 0x32
   10c76:	2100      	movs	r1, #0
   10c78:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   10c7a:	2310      	movs	r3, #16
   10c7c:	18fb      	adds	r3, r7, r3
   10c7e:	881b      	ldrh	r3, [r3, #0]
   10c80:	2202      	movs	r2, #2
   10c82:	4013      	ands	r3, r2
					if (callback_status
   10c84:	d00d      	beq.n	10ca2 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   10c86:	69bb      	ldr	r3, [r7, #24]
   10c88:	691b      	ldr	r3, [r3, #16]
   10c8a:	69ba      	ldr	r2, [r7, #24]
   10c8c:	0010      	movs	r0, r2
   10c8e:	4798      	blx	r3
   10c90:	e007      	b.n	10ca2 <_usart_interrupt_handler+0x2ae>
   10c92:	46c0      	nop			; (mov r8, r8)
   10c94:	20000908 	.word	0x20000908
   10c98:	000109d1 	.word	0x000109d1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10c9c:	697b      	ldr	r3, [r7, #20]
   10c9e:	2204      	movs	r2, #4
   10ca0:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10ca2:	2312      	movs	r3, #18
   10ca4:	18fb      	adds	r3, r7, r3
   10ca6:	881b      	ldrh	r3, [r3, #0]
   10ca8:	2210      	movs	r2, #16
   10caa:	4013      	ands	r3, r2
   10cac:	d010      	beq.n	10cd0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10cae:	697b      	ldr	r3, [r7, #20]
   10cb0:	2210      	movs	r2, #16
   10cb2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10cb4:	697b      	ldr	r3, [r7, #20]
   10cb6:	2210      	movs	r2, #16
   10cb8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10cba:	2310      	movs	r3, #16
   10cbc:	18fb      	adds	r3, r7, r3
   10cbe:	881b      	ldrh	r3, [r3, #0]
   10cc0:	2210      	movs	r2, #16
   10cc2:	4013      	ands	r3, r2
   10cc4:	d004      	beq.n	10cd0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   10cc6:	69bb      	ldr	r3, [r7, #24]
   10cc8:	69db      	ldr	r3, [r3, #28]
   10cca:	69ba      	ldr	r2, [r7, #24]
   10ccc:	0010      	movs	r0, r2
   10cce:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10cd0:	2312      	movs	r3, #18
   10cd2:	18fb      	adds	r3, r7, r3
   10cd4:	881b      	ldrh	r3, [r3, #0]
   10cd6:	2220      	movs	r2, #32
   10cd8:	4013      	ands	r3, r2
   10cda:	d010      	beq.n	10cfe <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10cdc:	697b      	ldr	r3, [r7, #20]
   10cde:	2220      	movs	r2, #32
   10ce0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10ce2:	697b      	ldr	r3, [r7, #20]
   10ce4:	2220      	movs	r2, #32
   10ce6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10ce8:	2310      	movs	r3, #16
   10cea:	18fb      	adds	r3, r7, r3
   10cec:	881b      	ldrh	r3, [r3, #0]
   10cee:	2208      	movs	r2, #8
   10cf0:	4013      	ands	r3, r2
   10cf2:	d004      	beq.n	10cfe <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   10cf4:	69bb      	ldr	r3, [r7, #24]
   10cf6:	699b      	ldr	r3, [r3, #24]
   10cf8:	69ba      	ldr	r2, [r7, #24]
   10cfa:	0010      	movs	r0, r2
   10cfc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10cfe:	2312      	movs	r3, #18
   10d00:	18fb      	adds	r3, r7, r3
   10d02:	881b      	ldrh	r3, [r3, #0]
   10d04:	2208      	movs	r2, #8
   10d06:	4013      	ands	r3, r2
   10d08:	d010      	beq.n	10d2c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   10d0a:	697b      	ldr	r3, [r7, #20]
   10d0c:	2208      	movs	r2, #8
   10d0e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   10d10:	697b      	ldr	r3, [r7, #20]
   10d12:	2208      	movs	r2, #8
   10d14:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   10d16:	2310      	movs	r3, #16
   10d18:	18fb      	adds	r3, r7, r3
   10d1a:	881b      	ldrh	r3, [r3, #0]
   10d1c:	2220      	movs	r2, #32
   10d1e:	4013      	ands	r3, r2
   10d20:	d004      	beq.n	10d2c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   10d22:	69bb      	ldr	r3, [r7, #24]
   10d24:	6a1b      	ldr	r3, [r3, #32]
   10d26:	69ba      	ldr	r2, [r7, #24]
   10d28:	0010      	movs	r0, r2
   10d2a:	4798      	blx	r3
		}
	}
#endif
}
   10d2c:	46c0      	nop			; (mov r8, r8)
   10d2e:	46bd      	mov	sp, r7
   10d30:	b008      	add	sp, #32
   10d32:	bd80      	pop	{r7, pc}

00010d34 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   10d34:	b580      	push	{r7, lr}
   10d36:	b082      	sub	sp, #8
   10d38:	af00      	add	r7, sp, #0
   10d3a:	0002      	movs	r2, r0
   10d3c:	1dfb      	adds	r3, r7, #7
   10d3e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   10d40:	46c0      	nop			; (mov r8, r8)
   10d42:	46bd      	mov	sp, r7
   10d44:	b002      	add	sp, #8
   10d46:	bd80      	pop	{r7, pc}

00010d48 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   10d48:	b580      	push	{r7, lr}
   10d4a:	b084      	sub	sp, #16
   10d4c:	af00      	add	r7, sp, #0
   10d4e:	0002      	movs	r2, r0
   10d50:	6039      	str	r1, [r7, #0]
   10d52:	1dfb      	adds	r3, r7, #7
   10d54:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   10d56:	4b13      	ldr	r3, [pc, #76]	; (10da4 <_sercom_set_handler+0x5c>)
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	2201      	movs	r2, #1
   10d5c:	4053      	eors	r3, r2
   10d5e:	b2db      	uxtb	r3, r3
   10d60:	2b00      	cmp	r3, #0
   10d62:	d015      	beq.n	10d90 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10d64:	2300      	movs	r3, #0
   10d66:	60fb      	str	r3, [r7, #12]
   10d68:	e00c      	b.n	10d84 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   10d6a:	4b0f      	ldr	r3, [pc, #60]	; (10da8 <_sercom_set_handler+0x60>)
   10d6c:	68fa      	ldr	r2, [r7, #12]
   10d6e:	0092      	lsls	r2, r2, #2
   10d70:	490e      	ldr	r1, [pc, #56]	; (10dac <_sercom_set_handler+0x64>)
   10d72:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   10d74:	4b0e      	ldr	r3, [pc, #56]	; (10db0 <_sercom_set_handler+0x68>)
   10d76:	68fa      	ldr	r2, [r7, #12]
   10d78:	0092      	lsls	r2, r2, #2
   10d7a:	2100      	movs	r1, #0
   10d7c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10d7e:	68fb      	ldr	r3, [r7, #12]
   10d80:	3301      	adds	r3, #1
   10d82:	60fb      	str	r3, [r7, #12]
   10d84:	68fb      	ldr	r3, [r7, #12]
   10d86:	2b05      	cmp	r3, #5
   10d88:	d9ef      	bls.n	10d6a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   10d8a:	4b06      	ldr	r3, [pc, #24]	; (10da4 <_sercom_set_handler+0x5c>)
   10d8c:	2201      	movs	r2, #1
   10d8e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   10d90:	1dfb      	adds	r3, r7, #7
   10d92:	781a      	ldrb	r2, [r3, #0]
   10d94:	4b04      	ldr	r3, [pc, #16]	; (10da8 <_sercom_set_handler+0x60>)
   10d96:	0092      	lsls	r2, r2, #2
   10d98:	6839      	ldr	r1, [r7, #0]
   10d9a:	50d1      	str	r1, [r2, r3]
}
   10d9c:	46c0      	nop			; (mov r8, r8)
   10d9e:	46bd      	mov	sp, r7
   10da0:	b004      	add	sp, #16
   10da2:	bd80      	pop	{r7, pc}
   10da4:	200003e8 	.word	0x200003e8
   10da8:	200003ec 	.word	0x200003ec
   10dac:	00010d35 	.word	0x00010d35
   10db0:	20000908 	.word	0x20000908

00010db4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   10db4:	b590      	push	{r4, r7, lr}
   10db6:	b085      	sub	sp, #20
   10db8:	af00      	add	r7, sp, #0
   10dba:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   10dbc:	2308      	movs	r3, #8
   10dbe:	18fb      	adds	r3, r7, r3
   10dc0:	4a0b      	ldr	r2, [pc, #44]	; (10df0 <_sercom_get_interrupt_vector+0x3c>)
   10dc2:	6811      	ldr	r1, [r2, #0]
   10dc4:	6019      	str	r1, [r3, #0]
   10dc6:	8892      	ldrh	r2, [r2, #4]
   10dc8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   10dca:	230f      	movs	r3, #15
   10dcc:	18fc      	adds	r4, r7, r3
   10dce:	687b      	ldr	r3, [r7, #4]
   10dd0:	0018      	movs	r0, r3
   10dd2:	4b08      	ldr	r3, [pc, #32]	; (10df4 <_sercom_get_interrupt_vector+0x40>)
   10dd4:	4798      	blx	r3
   10dd6:	0003      	movs	r3, r0
   10dd8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   10dda:	230f      	movs	r3, #15
   10ddc:	18fb      	adds	r3, r7, r3
   10dde:	781b      	ldrb	r3, [r3, #0]
   10de0:	2208      	movs	r2, #8
   10de2:	18ba      	adds	r2, r7, r2
   10de4:	5cd3      	ldrb	r3, [r2, r3]
   10de6:	b25b      	sxtb	r3, r3
}
   10de8:	0018      	movs	r0, r3
   10dea:	46bd      	mov	sp, r7
   10dec:	b005      	add	sp, #20
   10dee:	bd90      	pop	{r4, r7, pc}
   10df0:	00019494 	.word	0x00019494
   10df4:	0000d829 	.word	0x0000d829

00010df8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   10df8:	b580      	push	{r7, lr}
   10dfa:	af00      	add	r7, sp, #0
   10dfc:	4b03      	ldr	r3, [pc, #12]	; (10e0c <SERCOM0_Handler+0x14>)
   10dfe:	681b      	ldr	r3, [r3, #0]
   10e00:	2000      	movs	r0, #0
   10e02:	4798      	blx	r3
   10e04:	46c0      	nop			; (mov r8, r8)
   10e06:	46bd      	mov	sp, r7
   10e08:	bd80      	pop	{r7, pc}
   10e0a:	46c0      	nop			; (mov r8, r8)
   10e0c:	200003ec 	.word	0x200003ec

00010e10 <SERCOM1_Handler>:
   10e10:	b580      	push	{r7, lr}
   10e12:	af00      	add	r7, sp, #0
   10e14:	4b03      	ldr	r3, [pc, #12]	; (10e24 <SERCOM1_Handler+0x14>)
   10e16:	685b      	ldr	r3, [r3, #4]
   10e18:	2001      	movs	r0, #1
   10e1a:	4798      	blx	r3
   10e1c:	46c0      	nop			; (mov r8, r8)
   10e1e:	46bd      	mov	sp, r7
   10e20:	bd80      	pop	{r7, pc}
   10e22:	46c0      	nop			; (mov r8, r8)
   10e24:	200003ec 	.word	0x200003ec

00010e28 <SERCOM2_Handler>:
   10e28:	b580      	push	{r7, lr}
   10e2a:	af00      	add	r7, sp, #0
   10e2c:	4b03      	ldr	r3, [pc, #12]	; (10e3c <SERCOM2_Handler+0x14>)
   10e2e:	689b      	ldr	r3, [r3, #8]
   10e30:	2002      	movs	r0, #2
   10e32:	4798      	blx	r3
   10e34:	46c0      	nop			; (mov r8, r8)
   10e36:	46bd      	mov	sp, r7
   10e38:	bd80      	pop	{r7, pc}
   10e3a:	46c0      	nop			; (mov r8, r8)
   10e3c:	200003ec 	.word	0x200003ec

00010e40 <SERCOM3_Handler>:
   10e40:	b580      	push	{r7, lr}
   10e42:	af00      	add	r7, sp, #0
   10e44:	4b03      	ldr	r3, [pc, #12]	; (10e54 <SERCOM3_Handler+0x14>)
   10e46:	68db      	ldr	r3, [r3, #12]
   10e48:	2003      	movs	r0, #3
   10e4a:	4798      	blx	r3
   10e4c:	46c0      	nop			; (mov r8, r8)
   10e4e:	46bd      	mov	sp, r7
   10e50:	bd80      	pop	{r7, pc}
   10e52:	46c0      	nop			; (mov r8, r8)
   10e54:	200003ec 	.word	0x200003ec

00010e58 <SERCOM4_Handler>:
   10e58:	b580      	push	{r7, lr}
   10e5a:	af00      	add	r7, sp, #0
   10e5c:	4b03      	ldr	r3, [pc, #12]	; (10e6c <SERCOM4_Handler+0x14>)
   10e5e:	691b      	ldr	r3, [r3, #16]
   10e60:	2004      	movs	r0, #4
   10e62:	4798      	blx	r3
   10e64:	46c0      	nop			; (mov r8, r8)
   10e66:	46bd      	mov	sp, r7
   10e68:	bd80      	pop	{r7, pc}
   10e6a:	46c0      	nop			; (mov r8, r8)
   10e6c:	200003ec 	.word	0x200003ec

00010e70 <SERCOM5_Handler>:
   10e70:	b580      	push	{r7, lr}
   10e72:	af00      	add	r7, sp, #0
   10e74:	4b03      	ldr	r3, [pc, #12]	; (10e84 <SERCOM5_Handler+0x14>)
   10e76:	695b      	ldr	r3, [r3, #20]
   10e78:	2005      	movs	r0, #5
   10e7a:	4798      	blx	r3
   10e7c:	46c0      	nop			; (mov r8, r8)
   10e7e:	46bd      	mov	sp, r7
   10e80:	bd80      	pop	{r7, pc}
   10e82:	46c0      	nop			; (mov r8, r8)
   10e84:	200003ec 	.word	0x200003ec

00010e88 <_extint_get_eic_from_channel>:
{
   10e88:	b580      	push	{r7, lr}
   10e8a:	b084      	sub	sp, #16
   10e8c:	af00      	add	r7, sp, #0
   10e8e:	0002      	movs	r2, r0
   10e90:	1dfb      	adds	r3, r7, #7
   10e92:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   10e94:	230f      	movs	r3, #15
   10e96:	18fb      	adds	r3, r7, r3
   10e98:	1dfa      	adds	r2, r7, #7
   10e9a:	7812      	ldrb	r2, [r2, #0]
   10e9c:	0952      	lsrs	r2, r2, #5
   10e9e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   10ea0:	230f      	movs	r3, #15
   10ea2:	18fb      	adds	r3, r7, r3
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	2b00      	cmp	r3, #0
   10ea8:	d10c      	bne.n	10ec4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   10eaa:	4b09      	ldr	r3, [pc, #36]	; (10ed0 <_extint_get_eic_from_channel+0x48>)
   10eac:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   10eae:	230f      	movs	r3, #15
   10eb0:	18fb      	adds	r3, r7, r3
   10eb2:	781b      	ldrb	r3, [r3, #0]
   10eb4:	009b      	lsls	r3, r3, #2
   10eb6:	2210      	movs	r2, #16
   10eb8:	4694      	mov	ip, r2
   10eba:	44bc      	add	ip, r7
   10ebc:	4463      	add	r3, ip
   10ebe:	3b08      	subs	r3, #8
   10ec0:	681b      	ldr	r3, [r3, #0]
   10ec2:	e000      	b.n	10ec6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   10ec4:	2300      	movs	r3, #0
}
   10ec6:	0018      	movs	r0, r3
   10ec8:	46bd      	mov	sp, r7
   10eca:	b004      	add	sp, #16
   10ecc:	bd80      	pop	{r7, pc}
   10ece:	46c0      	nop			; (mov r8, r8)
   10ed0:	40001800 	.word	0x40001800

00010ed4 <extint_chan_is_detected>:
{
   10ed4:	b580      	push	{r7, lr}
   10ed6:	b084      	sub	sp, #16
   10ed8:	af00      	add	r7, sp, #0
   10eda:	0002      	movs	r2, r0
   10edc:	1dfb      	adds	r3, r7, #7
   10ede:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   10ee0:	1dfb      	adds	r3, r7, #7
   10ee2:	781b      	ldrb	r3, [r3, #0]
   10ee4:	0018      	movs	r0, r3
   10ee6:	4b0b      	ldr	r3, [pc, #44]	; (10f14 <extint_chan_is_detected+0x40>)
   10ee8:	4798      	blx	r3
   10eea:	0003      	movs	r3, r0
   10eec:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   10eee:	1dfb      	adds	r3, r7, #7
   10ef0:	781b      	ldrb	r3, [r3, #0]
   10ef2:	221f      	movs	r2, #31
   10ef4:	4013      	ands	r3, r2
   10ef6:	2201      	movs	r2, #1
   10ef8:	409a      	lsls	r2, r3
   10efa:	0013      	movs	r3, r2
   10efc:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   10efe:	68fb      	ldr	r3, [r7, #12]
   10f00:	691b      	ldr	r3, [r3, #16]
   10f02:	68ba      	ldr	r2, [r7, #8]
   10f04:	4013      	ands	r3, r2
   10f06:	1e5a      	subs	r2, r3, #1
   10f08:	4193      	sbcs	r3, r2
   10f0a:	b2db      	uxtb	r3, r3
}
   10f0c:	0018      	movs	r0, r3
   10f0e:	46bd      	mov	sp, r7
   10f10:	b004      	add	sp, #16
   10f12:	bd80      	pop	{r7, pc}
   10f14:	00010e89 	.word	0x00010e89

00010f18 <extint_chan_clear_detected>:
{
   10f18:	b580      	push	{r7, lr}
   10f1a:	b084      	sub	sp, #16
   10f1c:	af00      	add	r7, sp, #0
   10f1e:	0002      	movs	r2, r0
   10f20:	1dfb      	adds	r3, r7, #7
   10f22:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   10f24:	1dfb      	adds	r3, r7, #7
   10f26:	781b      	ldrb	r3, [r3, #0]
   10f28:	0018      	movs	r0, r3
   10f2a:	4b09      	ldr	r3, [pc, #36]	; (10f50 <extint_chan_clear_detected+0x38>)
   10f2c:	4798      	blx	r3
   10f2e:	0003      	movs	r3, r0
   10f30:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   10f32:	1dfb      	adds	r3, r7, #7
   10f34:	781b      	ldrb	r3, [r3, #0]
   10f36:	221f      	movs	r2, #31
   10f38:	4013      	ands	r3, r2
   10f3a:	2201      	movs	r2, #1
   10f3c:	409a      	lsls	r2, r3
   10f3e:	0013      	movs	r3, r2
   10f40:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   10f42:	68fb      	ldr	r3, [r7, #12]
   10f44:	68ba      	ldr	r2, [r7, #8]
   10f46:	611a      	str	r2, [r3, #16]
}
   10f48:	46c0      	nop			; (mov r8, r8)
   10f4a:	46bd      	mov	sp, r7
   10f4c:	b004      	add	sp, #16
   10f4e:	bd80      	pop	{r7, pc}
   10f50:	00010e89 	.word	0x00010e89

00010f54 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   10f54:	b580      	push	{r7, lr}
   10f56:	b082      	sub	sp, #8
   10f58:	af00      	add	r7, sp, #0
   10f5a:	6078      	str	r0, [r7, #4]
   10f5c:	0008      	movs	r0, r1
   10f5e:	0011      	movs	r1, r2
   10f60:	1cfb      	adds	r3, r7, #3
   10f62:	1c02      	adds	r2, r0, #0
   10f64:	701a      	strb	r2, [r3, #0]
   10f66:	1cbb      	adds	r3, r7, #2
   10f68:	1c0a      	adds	r2, r1, #0
   10f6a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   10f6c:	1cbb      	adds	r3, r7, #2
   10f6e:	781b      	ldrb	r3, [r3, #0]
   10f70:	2b00      	cmp	r3, #0
   10f72:	d001      	beq.n	10f78 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   10f74:	2317      	movs	r3, #23
   10f76:	e019      	b.n	10fac <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   10f78:	1cfb      	adds	r3, r7, #3
   10f7a:	781a      	ldrb	r2, [r3, #0]
   10f7c:	4b0d      	ldr	r3, [pc, #52]	; (10fb4 <extint_register_callback+0x60>)
   10f7e:	0092      	lsls	r2, r2, #2
   10f80:	58d3      	ldr	r3, [r2, r3]
   10f82:	2b00      	cmp	r3, #0
   10f84:	d107      	bne.n	10f96 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   10f86:	1cfb      	adds	r3, r7, #3
   10f88:	781a      	ldrb	r2, [r3, #0]
   10f8a:	4b0a      	ldr	r3, [pc, #40]	; (10fb4 <extint_register_callback+0x60>)
   10f8c:	0092      	lsls	r2, r2, #2
   10f8e:	6879      	ldr	r1, [r7, #4]
   10f90:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   10f92:	2300      	movs	r3, #0
   10f94:	e00a      	b.n	10fac <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   10f96:	1cfb      	adds	r3, r7, #3
   10f98:	781a      	ldrb	r2, [r3, #0]
   10f9a:	4b06      	ldr	r3, [pc, #24]	; (10fb4 <extint_register_callback+0x60>)
   10f9c:	0092      	lsls	r2, r2, #2
   10f9e:	58d2      	ldr	r2, [r2, r3]
   10fa0:	687b      	ldr	r3, [r7, #4]
   10fa2:	429a      	cmp	r2, r3
   10fa4:	d101      	bne.n	10faa <extint_register_callback+0x56>
		return STATUS_OK;
   10fa6:	2300      	movs	r3, #0
   10fa8:	e000      	b.n	10fac <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   10faa:	231d      	movs	r3, #29
}
   10fac:	0018      	movs	r0, r3
   10fae:	46bd      	mov	sp, r7
   10fb0:	b002      	add	sp, #8
   10fb2:	bd80      	pop	{r7, pc}
   10fb4:	200008a0 	.word	0x200008a0

00010fb8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   10fb8:	b580      	push	{r7, lr}
   10fba:	b084      	sub	sp, #16
   10fbc:	af00      	add	r7, sp, #0
   10fbe:	0002      	movs	r2, r0
   10fc0:	1dfb      	adds	r3, r7, #7
   10fc2:	701a      	strb	r2, [r3, #0]
   10fc4:	1dbb      	adds	r3, r7, #6
   10fc6:	1c0a      	adds	r2, r1, #0
   10fc8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   10fca:	1dbb      	adds	r3, r7, #6
   10fcc:	781b      	ldrb	r3, [r3, #0]
   10fce:	2b00      	cmp	r3, #0
   10fd0:	d10e      	bne.n	10ff0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   10fd2:	1dfb      	adds	r3, r7, #7
   10fd4:	781b      	ldrb	r3, [r3, #0]
   10fd6:	0018      	movs	r0, r3
   10fd8:	4b08      	ldr	r3, [pc, #32]	; (10ffc <extint_chan_enable_callback+0x44>)
   10fda:	4798      	blx	r3
   10fdc:	0003      	movs	r3, r0
   10fde:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   10fe0:	1dfb      	adds	r3, r7, #7
   10fe2:	781b      	ldrb	r3, [r3, #0]
   10fe4:	2201      	movs	r2, #1
   10fe6:	409a      	lsls	r2, r3
   10fe8:	68fb      	ldr	r3, [r7, #12]
   10fea:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   10fec:	2300      	movs	r3, #0
   10fee:	e000      	b.n	10ff2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   10ff0:	2317      	movs	r3, #23
}
   10ff2:	0018      	movs	r0, r3
   10ff4:	46bd      	mov	sp, r7
   10ff6:	b004      	add	sp, #16
   10ff8:	bd80      	pop	{r7, pc}
   10ffa:	46c0      	nop			; (mov r8, r8)
   10ffc:	00010e89 	.word	0x00010e89

00011000 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   11000:	b580      	push	{r7, lr}
   11002:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   11004:	4b15      	ldr	r3, [pc, #84]	; (1105c <EIC_Handler+0x5c>)
   11006:	2200      	movs	r2, #0
   11008:	701a      	strb	r2, [r3, #0]
   1100a:	e020      	b.n	1104e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   1100c:	4b13      	ldr	r3, [pc, #76]	; (1105c <EIC_Handler+0x5c>)
   1100e:	781b      	ldrb	r3, [r3, #0]
   11010:	0018      	movs	r0, r3
   11012:	4b13      	ldr	r3, [pc, #76]	; (11060 <EIC_Handler+0x60>)
   11014:	4798      	blx	r3
   11016:	1e03      	subs	r3, r0, #0
   11018:	d013      	beq.n	11042 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   1101a:	4b10      	ldr	r3, [pc, #64]	; (1105c <EIC_Handler+0x5c>)
   1101c:	781b      	ldrb	r3, [r3, #0]
   1101e:	0018      	movs	r0, r3
   11020:	4b10      	ldr	r3, [pc, #64]	; (11064 <EIC_Handler+0x64>)
   11022:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   11024:	4b0d      	ldr	r3, [pc, #52]	; (1105c <EIC_Handler+0x5c>)
   11026:	781b      	ldrb	r3, [r3, #0]
   11028:	001a      	movs	r2, r3
   1102a:	4b0f      	ldr	r3, [pc, #60]	; (11068 <EIC_Handler+0x68>)
   1102c:	0092      	lsls	r2, r2, #2
   1102e:	58d3      	ldr	r3, [r2, r3]
   11030:	2b00      	cmp	r3, #0
   11032:	d006      	beq.n	11042 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   11034:	4b09      	ldr	r3, [pc, #36]	; (1105c <EIC_Handler+0x5c>)
   11036:	781b      	ldrb	r3, [r3, #0]
   11038:	001a      	movs	r2, r3
   1103a:	4b0b      	ldr	r3, [pc, #44]	; (11068 <EIC_Handler+0x68>)
   1103c:	0092      	lsls	r2, r2, #2
   1103e:	58d3      	ldr	r3, [r2, r3]
   11040:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   11042:	4b06      	ldr	r3, [pc, #24]	; (1105c <EIC_Handler+0x5c>)
   11044:	781b      	ldrb	r3, [r3, #0]
   11046:	3301      	adds	r3, #1
   11048:	b2da      	uxtb	r2, r3
   1104a:	4b04      	ldr	r3, [pc, #16]	; (1105c <EIC_Handler+0x5c>)
   1104c:	701a      	strb	r2, [r3, #0]
   1104e:	4b03      	ldr	r3, [pc, #12]	; (1105c <EIC_Handler+0x5c>)
   11050:	781b      	ldrb	r3, [r3, #0]
   11052:	2b0f      	cmp	r3, #15
   11054:	d9da      	bls.n	1100c <EIC_Handler+0xc>
			}
		}
	}
}
   11056:	46c0      	nop			; (mov r8, r8)
   11058:	46bd      	mov	sp, r7
   1105a:	bd80      	pop	{r7, pc}
   1105c:	20000920 	.word	0x20000920
   11060:	00010ed5 	.word	0x00010ed5
   11064:	00010f19 	.word	0x00010f19
   11068:	200008a0 	.word	0x200008a0

0001106c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   1106c:	b580      	push	{r7, lr}
   1106e:	b082      	sub	sp, #8
   11070:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   11072:	4b15      	ldr	r3, [pc, #84]	; (110c8 <EVSYS_Handler+0x5c>)
   11074:	691b      	ldr	r3, [r3, #16]
   11076:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   11078:	4b14      	ldr	r3, [pc, #80]	; (110cc <EVSYS_Handler+0x60>)
   1107a:	699b      	ldr	r3, [r3, #24]
   1107c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1107e:	4b12      	ldr	r3, [pc, #72]	; (110c8 <EVSYS_Handler+0x5c>)
   11080:	689a      	ldr	r2, [r3, #8]
   11082:	683b      	ldr	r3, [r7, #0]
   11084:	431a      	orrs	r2, r3
   11086:	4b10      	ldr	r3, [pc, #64]	; (110c8 <EVSYS_Handler+0x5c>)
   11088:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   1108a:	4b10      	ldr	r3, [pc, #64]	; (110cc <EVSYS_Handler+0x60>)
   1108c:	4a10      	ldr	r2, [pc, #64]	; (110d0 <EVSYS_Handler+0x64>)
   1108e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   11090:	e008      	b.n	110a4 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   11092:	687b      	ldr	r3, [r7, #4]
   11094:	685a      	ldr	r2, [r3, #4]
   11096:	687b      	ldr	r3, [r7, #4]
   11098:	681b      	ldr	r3, [r3, #0]
   1109a:	0018      	movs	r0, r3
   1109c:	4790      	blx	r2
		current_hook = current_hook->next;
   1109e:	687b      	ldr	r3, [r7, #4]
   110a0:	689b      	ldr	r3, [r3, #8]
   110a2:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   110a4:	687b      	ldr	r3, [r7, #4]
   110a6:	2b00      	cmp	r3, #0
   110a8:	d1f3      	bne.n	11092 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   110aa:	4b07      	ldr	r3, [pc, #28]	; (110c8 <EVSYS_Handler+0x5c>)
   110ac:	68db      	ldr	r3, [r3, #12]
   110ae:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   110b0:	4b05      	ldr	r3, [pc, #20]	; (110c8 <EVSYS_Handler+0x5c>)
   110b2:	689b      	ldr	r3, [r3, #8]
   110b4:	683a      	ldr	r2, [r7, #0]
   110b6:	43d2      	mvns	r2, r2
   110b8:	401a      	ands	r2, r3
   110ba:	4b03      	ldr	r3, [pc, #12]	; (110c8 <EVSYS_Handler+0x5c>)
   110bc:	609a      	str	r2, [r3, #8]
}
   110be:	46c0      	nop			; (mov r8, r8)
   110c0:	46bd      	mov	sp, r7
   110c2:	b002      	add	sp, #8
   110c4:	bd80      	pop	{r7, pc}
   110c6:	46c0      	nop			; (mov r8, r8)
   110c8:	20000014 	.word	0x20000014
   110cc:	42000400 	.word	0x42000400
   110d0:	0f0fffff 	.word	0x0f0fffff

000110d4 <system_gclk_chan_get_config_defaults>:
{
   110d4:	b580      	push	{r7, lr}
   110d6:	b082      	sub	sp, #8
   110d8:	af00      	add	r7, sp, #0
   110da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   110dc:	687b      	ldr	r3, [r7, #4]
   110de:	2200      	movs	r2, #0
   110e0:	701a      	strb	r2, [r3, #0]
}
   110e2:	46c0      	nop			; (mov r8, r8)
   110e4:	46bd      	mov	sp, r7
   110e6:	b002      	add	sp, #8
   110e8:	bd80      	pop	{r7, pc}
	...

000110ec <system_apb_clock_set_mask>:
{
   110ec:	b580      	push	{r7, lr}
   110ee:	b082      	sub	sp, #8
   110f0:	af00      	add	r7, sp, #0
   110f2:	0002      	movs	r2, r0
   110f4:	6039      	str	r1, [r7, #0]
   110f6:	1dfb      	adds	r3, r7, #7
   110f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   110fa:	1dfb      	adds	r3, r7, #7
   110fc:	781b      	ldrb	r3, [r3, #0]
   110fe:	2b01      	cmp	r3, #1
   11100:	d00a      	beq.n	11118 <system_apb_clock_set_mask+0x2c>
   11102:	2b02      	cmp	r3, #2
   11104:	d00f      	beq.n	11126 <system_apb_clock_set_mask+0x3a>
   11106:	2b00      	cmp	r3, #0
   11108:	d114      	bne.n	11134 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1110a:	4b0e      	ldr	r3, [pc, #56]	; (11144 <system_apb_clock_set_mask+0x58>)
   1110c:	4a0d      	ldr	r2, [pc, #52]	; (11144 <system_apb_clock_set_mask+0x58>)
   1110e:	6991      	ldr	r1, [r2, #24]
   11110:	683a      	ldr	r2, [r7, #0]
   11112:	430a      	orrs	r2, r1
   11114:	619a      	str	r2, [r3, #24]
			break;
   11116:	e00f      	b.n	11138 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   11118:	4b0a      	ldr	r3, [pc, #40]	; (11144 <system_apb_clock_set_mask+0x58>)
   1111a:	4a0a      	ldr	r2, [pc, #40]	; (11144 <system_apb_clock_set_mask+0x58>)
   1111c:	69d1      	ldr	r1, [r2, #28]
   1111e:	683a      	ldr	r2, [r7, #0]
   11120:	430a      	orrs	r2, r1
   11122:	61da      	str	r2, [r3, #28]
			break;
   11124:	e008      	b.n	11138 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   11126:	4b07      	ldr	r3, [pc, #28]	; (11144 <system_apb_clock_set_mask+0x58>)
   11128:	4a06      	ldr	r2, [pc, #24]	; (11144 <system_apb_clock_set_mask+0x58>)
   1112a:	6a11      	ldr	r1, [r2, #32]
   1112c:	683a      	ldr	r2, [r7, #0]
   1112e:	430a      	orrs	r2, r1
   11130:	621a      	str	r2, [r3, #32]
			break;
   11132:	e001      	b.n	11138 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   11134:	2317      	movs	r3, #23
   11136:	e000      	b.n	1113a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   11138:	2300      	movs	r3, #0
}
   1113a:	0018      	movs	r0, r3
   1113c:	46bd      	mov	sp, r7
   1113e:	b002      	add	sp, #8
   11140:	bd80      	pop	{r7, pc}
   11142:	46c0      	nop			; (mov r8, r8)
   11144:	40000400 	.word	0x40000400

00011148 <system_interrupt_enter_critical_section>:
{
   11148:	b580      	push	{r7, lr}
   1114a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1114c:	4b02      	ldr	r3, [pc, #8]	; (11158 <system_interrupt_enter_critical_section+0x10>)
   1114e:	4798      	blx	r3
}
   11150:	46c0      	nop			; (mov r8, r8)
   11152:	46bd      	mov	sp, r7
   11154:	bd80      	pop	{r7, pc}
   11156:	46c0      	nop			; (mov r8, r8)
   11158:	00012755 	.word	0x00012755

0001115c <system_interrupt_leave_critical_section>:
{
   1115c:	b580      	push	{r7, lr}
   1115e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   11160:	4b02      	ldr	r3, [pc, #8]	; (1116c <system_interrupt_leave_critical_section+0x10>)
   11162:	4798      	blx	r3
}
   11164:	46c0      	nop			; (mov r8, r8)
   11166:	46bd      	mov	sp, r7
   11168:	bd80      	pop	{r7, pc}
   1116a:	46c0      	nop			; (mov r8, r8)
   1116c:	000127a9 	.word	0x000127a9

00011170 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   11170:	b580      	push	{r7, lr}
   11172:	b084      	sub	sp, #16
   11174:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   11176:	1dfb      	adds	r3, r7, #7
   11178:	2200      	movs	r2, #0
   1117a:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   1117c:	4b21      	ldr	r3, [pc, #132]	; (11204 <_events_find_first_free_channel_and_allocate+0x94>)
   1117e:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   11180:	4b21      	ldr	r3, [pc, #132]	; (11208 <_events_find_first_free_channel_and_allocate+0x98>)
   11182:	681b      	ldr	r3, [r3, #0]
   11184:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   11186:	230f      	movs	r3, #15
   11188:	18fb      	adds	r3, r7, r3
   1118a:	2200      	movs	r2, #0
   1118c:	701a      	strb	r2, [r3, #0]
   1118e:	e022      	b.n	111d6 <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   11190:	68bb      	ldr	r3, [r7, #8]
   11192:	2201      	movs	r2, #1
   11194:	4013      	ands	r3, r2
   11196:	d114      	bne.n	111c2 <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   11198:	4b1b      	ldr	r3, [pc, #108]	; (11208 <_events_find_first_free_channel_and_allocate+0x98>)
   1119a:	681b      	ldr	r3, [r3, #0]
   1119c:	220f      	movs	r2, #15
   1119e:	18ba      	adds	r2, r7, r2
   111a0:	7812      	ldrb	r2, [r2, #0]
   111a2:	2101      	movs	r1, #1
   111a4:	4091      	lsls	r1, r2
   111a6:	000a      	movs	r2, r1
   111a8:	431a      	orrs	r2, r3
   111aa:	4b17      	ldr	r3, [pc, #92]	; (11208 <_events_find_first_free_channel_and_allocate+0x98>)
   111ac:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   111ae:	4b16      	ldr	r3, [pc, #88]	; (11208 <_events_find_first_free_channel_and_allocate+0x98>)
   111b0:	791b      	ldrb	r3, [r3, #4]
   111b2:	3b01      	subs	r3, #1
   111b4:	b2da      	uxtb	r2, r3
   111b6:	4b14      	ldr	r3, [pc, #80]	; (11208 <_events_find_first_free_channel_and_allocate+0x98>)
   111b8:	711a      	strb	r2, [r3, #4]
			allocated = true;
   111ba:	1dfb      	adds	r3, r7, #7
   111bc:	2201      	movs	r2, #1
   111be:	701a      	strb	r2, [r3, #0]

			break;
   111c0:	e00e      	b.n	111e0 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   111c2:	68bb      	ldr	r3, [r7, #8]
   111c4:	085b      	lsrs	r3, r3, #1
   111c6:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   111c8:	230f      	movs	r3, #15
   111ca:	18fb      	adds	r3, r7, r3
   111cc:	220f      	movs	r2, #15
   111ce:	18ba      	adds	r2, r7, r2
   111d0:	7812      	ldrb	r2, [r2, #0]
   111d2:	3201      	adds	r2, #1
   111d4:	701a      	strb	r2, [r3, #0]
   111d6:	230f      	movs	r3, #15
   111d8:	18fb      	adds	r3, r7, r3
   111da:	781b      	ldrb	r3, [r3, #0]
   111dc:	2b0b      	cmp	r3, #11
   111de:	d9d7      	bls.n	11190 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   111e0:	4b0a      	ldr	r3, [pc, #40]	; (1120c <_events_find_first_free_channel_and_allocate+0x9c>)
   111e2:	4798      	blx	r3

	if(!allocated) {
   111e4:	1dfb      	adds	r3, r7, #7
   111e6:	781b      	ldrb	r3, [r3, #0]
   111e8:	2201      	movs	r2, #1
   111ea:	4053      	eors	r3, r2
   111ec:	b2db      	uxtb	r3, r3
   111ee:	2b00      	cmp	r3, #0
   111f0:	d001      	beq.n	111f6 <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   111f2:	23ff      	movs	r3, #255	; 0xff
   111f4:	e002      	b.n	111fc <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   111f6:	230f      	movs	r3, #15
   111f8:	18fb      	adds	r3, r7, r3
   111fa:	781b      	ldrb	r3, [r3, #0]
	}
}
   111fc:	0018      	movs	r0, r3
   111fe:	46bd      	mov	sp, r7
   11200:	b004      	add	sp, #16
   11202:	bd80      	pop	{r7, pc}
   11204:	00011149 	.word	0x00011149
   11208:	20000014 	.word	0x20000014
   1120c:	0001115d 	.word	0x0001115d

00011210 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   11210:	b580      	push	{r7, lr}
   11212:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   11214:	2102      	movs	r1, #2
   11216:	2002      	movs	r0, #2
   11218:	4b07      	ldr	r3, [pc, #28]	; (11238 <_system_events_init+0x28>)
   1121a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1121c:	4b07      	ldr	r3, [pc, #28]	; (1123c <_system_events_init+0x2c>)
   1121e:	2201      	movs	r2, #1
   11220:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   11222:	46c0      	nop			; (mov r8, r8)
   11224:	4b05      	ldr	r3, [pc, #20]	; (1123c <_system_events_init+0x2c>)
   11226:	781b      	ldrb	r3, [r3, #0]
   11228:	b2db      	uxtb	r3, r3
   1122a:	001a      	movs	r2, r3
   1122c:	2301      	movs	r3, #1
   1122e:	4013      	ands	r3, r2
   11230:	d1f8      	bne.n	11224 <_system_events_init+0x14>
	}
}
   11232:	46c0      	nop			; (mov r8, r8)
   11234:	46bd      	mov	sp, r7
   11236:	bd80      	pop	{r7, pc}
   11238:	000110ed 	.word	0x000110ed
   1123c:	42000400 	.word	0x42000400

00011240 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   11240:	b580      	push	{r7, lr}
   11242:	b082      	sub	sp, #8
   11244:	af00      	add	r7, sp, #0
   11246:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   11248:	687b      	ldr	r3, [r7, #4]
   1124a:	2201      	movs	r2, #1
   1124c:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   1124e:	687b      	ldr	r3, [r7, #4]
   11250:	2200      	movs	r2, #0
   11252:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   11254:	687b      	ldr	r3, [r7, #4]
   11256:	2200      	movs	r2, #0
   11258:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   1125a:	687b      	ldr	r3, [r7, #4]
   1125c:	2200      	movs	r2, #0
   1125e:	70da      	strb	r2, [r3, #3]
}
   11260:	46c0      	nop			; (mov r8, r8)
   11262:	46bd      	mov	sp, r7
   11264:	b002      	add	sp, #8
   11266:	bd80      	pop	{r7, pc}

00011268 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   11268:	b590      	push	{r4, r7, lr}
   1126a:	b085      	sub	sp, #20
   1126c:	af00      	add	r7, sp, #0
   1126e:	6078      	str	r0, [r7, #4]
   11270:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   11272:	230f      	movs	r3, #15
   11274:	18fc      	adds	r4, r7, r3
   11276:	4b2a      	ldr	r3, [pc, #168]	; (11320 <events_allocate+0xb8>)
   11278:	4798      	blx	r3
   1127a:	0003      	movs	r3, r0
   1127c:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   1127e:	230f      	movs	r3, #15
   11280:	18fb      	adds	r3, r7, r3
   11282:	781b      	ldrb	r3, [r3, #0]
   11284:	2bff      	cmp	r3, #255	; 0xff
   11286:	d101      	bne.n	1128c <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   11288:	2314      	movs	r3, #20
   1128a:	e045      	b.n	11318 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   1128c:	687b      	ldr	r3, [r7, #4]
   1128e:	220f      	movs	r2, #15
   11290:	18ba      	adds	r2, r7, r2
   11292:	7812      	ldrb	r2, [r2, #0]
   11294:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   11296:	683b      	ldr	r3, [r7, #0]
   11298:	785b      	ldrb	r3, [r3, #1]
   1129a:	2b02      	cmp	r3, #2
   1129c:	d01c      	beq.n	112d8 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1129e:	230c      	movs	r3, #12
   112a0:	18fb      	adds	r3, r7, r3
   112a2:	0018      	movs	r0, r3
   112a4:	4b1f      	ldr	r3, [pc, #124]	; (11324 <events_allocate+0xbc>)
   112a6:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   112a8:	683b      	ldr	r3, [r7, #0]
   112aa:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   112ac:	230c      	movs	r3, #12
   112ae:	18fb      	adds	r3, r7, r3
   112b0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   112b2:	230f      	movs	r3, #15
   112b4:	18fb      	adds	r3, r7, r3
   112b6:	781b      	ldrb	r3, [r3, #0]
   112b8:	3307      	adds	r3, #7
   112ba:	b2db      	uxtb	r3, r3
   112bc:	220c      	movs	r2, #12
   112be:	18ba      	adds	r2, r7, r2
   112c0:	0011      	movs	r1, r2
   112c2:	0018      	movs	r0, r3
   112c4:	4b18      	ldr	r3, [pc, #96]	; (11328 <events_allocate+0xc0>)
   112c6:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   112c8:	230f      	movs	r3, #15
   112ca:	18fb      	adds	r3, r7, r3
   112cc:	781b      	ldrb	r3, [r3, #0]
   112ce:	3307      	adds	r3, #7
   112d0:	b2db      	uxtb	r3, r3
   112d2:	0018      	movs	r0, r3
   112d4:	4b15      	ldr	r3, [pc, #84]	; (1132c <events_allocate+0xc4>)
   112d6:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   112d8:	230f      	movs	r3, #15
   112da:	18fb      	adds	r3, r7, r3
   112dc:	781b      	ldrb	r3, [r3, #0]
   112de:	220f      	movs	r2, #15
   112e0:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   112e2:	683b      	ldr	r3, [r7, #0]
   112e4:	789b      	ldrb	r3, [r3, #2]
   112e6:	041b      	lsls	r3, r3, #16
   112e8:	0019      	movs	r1, r3
   112ea:	23fe      	movs	r3, #254	; 0xfe
   112ec:	03db      	lsls	r3, r3, #15
   112ee:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   112f0:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   112f2:	683b      	ldr	r3, [r7, #0]
   112f4:	785b      	ldrb	r3, [r3, #1]
   112f6:	061b      	lsls	r3, r3, #24
   112f8:	0019      	movs	r1, r3
   112fa:	23c0      	movs	r3, #192	; 0xc0
   112fc:	049b      	lsls	r3, r3, #18
   112fe:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   11300:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   11302:	683b      	ldr	r3, [r7, #0]
   11304:	781b      	ldrb	r3, [r3, #0]
   11306:	069b      	lsls	r3, r3, #26
   11308:	0019      	movs	r1, r3
   1130a:	23c0      	movs	r3, #192	; 0xc0
   1130c:	051b      	lsls	r3, r3, #20
   1130e:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   11310:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   11312:	687b      	ldr	r3, [r7, #4]
   11314:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   11316:	2300      	movs	r3, #0
}
   11318:	0018      	movs	r0, r3
   1131a:	46bd      	mov	sp, r7
   1131c:	b005      	add	sp, #20
   1131e:	bd90      	pop	{r4, r7, pc}
   11320:	00011171 	.word	0x00011171
   11324:	000110d5 	.word	0x000110d5
   11328:	0001350d 	.word	0x0001350d
   1132c:	00013551 	.word	0x00013551

00011330 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   11330:	b580      	push	{r7, lr}
   11332:	b082      	sub	sp, #8
   11334:	af00      	add	r7, sp, #0
   11336:	6078      	str	r0, [r7, #4]
   11338:	000a      	movs	r2, r1
   1133a:	1cfb      	adds	r3, r7, #3
   1133c:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   1133e:	490f      	ldr	r1, [pc, #60]	; (1137c <events_attach_user+0x4c>)
   11340:	687b      	ldr	r3, [r7, #4]
   11342:	781b      	ldrb	r3, [r3, #0]
   11344:	b29b      	uxth	r3, r3
   11346:	3301      	adds	r3, #1
   11348:	b29b      	uxth	r3, r3
   1134a:	021b      	lsls	r3, r3, #8
   1134c:	b29a      	uxth	r2, r3
   1134e:	23f8      	movs	r3, #248	; 0xf8
   11350:	015b      	lsls	r3, r3, #5
   11352:	4013      	ands	r3, r2
   11354:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   11356:	1cfb      	adds	r3, r7, #3
   11358:	781b      	ldrb	r3, [r3, #0]
   1135a:	b29b      	uxth	r3, r3
   1135c:	201f      	movs	r0, #31
   1135e:	4003      	ands	r3, r0
   11360:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   11362:	4313      	orrs	r3, r2
   11364:	b29b      	uxth	r3, r3
   11366:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   11368:	4a04      	ldr	r2, [pc, #16]	; (1137c <events_attach_user+0x4c>)
   1136a:	687b      	ldr	r3, [r7, #4]
   1136c:	685b      	ldr	r3, [r3, #4]
   1136e:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   11370:	2300      	movs	r3, #0
}
   11372:	0018      	movs	r0, r3
   11374:	46bd      	mov	sp, r7
   11376:	b002      	add	sp, #8
   11378:	bd80      	pop	{r7, pc}
   1137a:	46c0      	nop			; (mov r8, r8)
   1137c:	42000400 	.word	0x42000400

00011380 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   11380:	b580      	push	{r7, lr}
   11382:	b084      	sub	sp, #16
   11384:	af00      	add	r7, sp, #0
   11386:	60f8      	str	r0, [r7, #12]
   11388:	60b9      	str	r1, [r7, #8]
   1138a:	1dfb      	adds	r3, r7, #7
   1138c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1138e:	1dfb      	adds	r3, r7, #7
   11390:	781b      	ldrb	r3, [r3, #0]
   11392:	68fa      	ldr	r2, [r7, #12]
   11394:	009b      	lsls	r3, r3, #2
   11396:	18d3      	adds	r3, r2, r3
   11398:	3304      	adds	r3, #4
   1139a:	68ba      	ldr	r2, [r7, #8]
   1139c:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   1139e:	68fb      	ldr	r3, [r7, #12]
   113a0:	7e1b      	ldrb	r3, [r3, #24]
   113a2:	b25a      	sxtb	r2, r3
   113a4:	1dfb      	adds	r3, r7, #7
   113a6:	781b      	ldrb	r3, [r3, #0]
   113a8:	2101      	movs	r1, #1
   113aa:	4099      	lsls	r1, r3
   113ac:	000b      	movs	r3, r1
   113ae:	b25b      	sxtb	r3, r3
   113b0:	4313      	orrs	r3, r2
   113b2:	b25b      	sxtb	r3, r3
   113b4:	b2da      	uxtb	r2, r3
   113b6:	68fb      	ldr	r3, [r7, #12]
   113b8:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   113ba:	2300      	movs	r3, #0
}
   113bc:	0018      	movs	r0, r3
   113be:	46bd      	mov	sp, r7
   113c0:	b004      	add	sp, #16
   113c2:	bd80      	pop	{r7, pc}

000113c4 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   113c4:	b580      	push	{r7, lr}
   113c6:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   113c8:	2000      	movs	r0, #0
   113ca:	4b02      	ldr	r3, [pc, #8]	; (113d4 <AC_Handler+0x10>)
   113cc:	4798      	blx	r3
}
   113ce:	46c0      	nop			; (mov r8, r8)
   113d0:	46bd      	mov	sp, r7
   113d2:	bd80      	pop	{r7, pc}
   113d4:	000113d9 	.word	0x000113d9

000113d8 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   113d8:	b580      	push	{r7, lr}
   113da:	b084      	sub	sp, #16
   113dc:	af00      	add	r7, sp, #0
   113de:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   113e0:	4b23      	ldr	r3, [pc, #140]	; (11470 <_ac_interrupt_handler+0x98>)
   113e2:	687a      	ldr	r2, [r7, #4]
   113e4:	0092      	lsls	r2, r2, #2
   113e6:	58d3      	ldr	r3, [r2, r3]
   113e8:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   113ea:	4b21      	ldr	r3, [pc, #132]	; (11470 <_ac_interrupt_handler+0x98>)
   113ec:	687a      	ldr	r2, [r7, #4]
   113ee:	0092      	lsls	r2, r2, #2
   113f0:	58d3      	ldr	r3, [r2, r3]
   113f2:	681b      	ldr	r3, [r3, #0]
   113f4:	799b      	ldrb	r3, [r3, #6]
   113f6:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   113f8:	68fb      	ldr	r3, [r7, #12]
   113fa:	7e1b      	ldrb	r3, [r3, #24]
   113fc:	68f9      	ldr	r1, [r7, #12]
   113fe:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   11400:	400b      	ands	r3, r1
   11402:	b2d9      	uxtb	r1, r3
   11404:	230b      	movs	r3, #11
   11406:	18fb      	adds	r3, r7, r3
   11408:	400a      	ands	r2, r1
   1140a:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   1140c:	230b      	movs	r3, #11
   1140e:	18fb      	adds	r3, r7, r3
   11410:	781b      	ldrb	r3, [r3, #0]
   11412:	2201      	movs	r2, #1
   11414:	4013      	ands	r3, r2
   11416:	d008      	beq.n	1142a <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   11418:	68fb      	ldr	r3, [r7, #12]
   1141a:	685b      	ldr	r3, [r3, #4]
   1141c:	68fa      	ldr	r2, [r7, #12]
   1141e:	0010      	movs	r0, r2
   11420:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   11422:	68fb      	ldr	r3, [r7, #12]
   11424:	681b      	ldr	r3, [r3, #0]
   11426:	2201      	movs	r2, #1
   11428:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   1142a:	230b      	movs	r3, #11
   1142c:	18fb      	adds	r3, r7, r3
   1142e:	781b      	ldrb	r3, [r3, #0]
   11430:	2202      	movs	r2, #2
   11432:	4013      	ands	r3, r2
   11434:	d008      	beq.n	11448 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   11436:	68fb      	ldr	r3, [r7, #12]
   11438:	689b      	ldr	r3, [r3, #8]
   1143a:	68fa      	ldr	r2, [r7, #12]
   1143c:	0010      	movs	r0, r2
   1143e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   11440:	68fb      	ldr	r3, [r7, #12]
   11442:	681b      	ldr	r3, [r3, #0]
   11444:	2202      	movs	r2, #2
   11446:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   11448:	230b      	movs	r3, #11
   1144a:	18fb      	adds	r3, r7, r3
   1144c:	781b      	ldrb	r3, [r3, #0]
   1144e:	2210      	movs	r2, #16
   11450:	4013      	ands	r3, r2
   11452:	d008      	beq.n	11466 <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   11454:	68fb      	ldr	r3, [r7, #12]
   11456:	695b      	ldr	r3, [r3, #20]
   11458:	68fa      	ldr	r2, [r7, #12]
   1145a:	0010      	movs	r0, r2
   1145c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   1145e:	68fb      	ldr	r3, [r7, #12]
   11460:	681b      	ldr	r3, [r3, #0]
   11462:	2210      	movs	r2, #16
   11464:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   11466:	46c0      	nop			; (mov r8, r8)
   11468:	46bd      	mov	sp, r7
   1146a:	b004      	add	sp, #16
   1146c:	bd80      	pop	{r7, pc}
   1146e:	46c0      	nop			; (mov r8, r8)
   11470:	20000924 	.word	0x20000924

00011474 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   11474:	b580      	push	{r7, lr}
   11476:	af00      	add	r7, sp, #0
}
   11478:	46c0      	nop			; (mov r8, r8)
   1147a:	46bd      	mov	sp, r7
   1147c:	bd80      	pop	{r7, pc}
	...

00011480 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   11480:	b580      	push	{r7, lr}
   11482:	b082      	sub	sp, #8
   11484:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11486:	4b07      	ldr	r3, [pc, #28]	; (114a4 <nvm_is_ready+0x24>)
   11488:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   1148a:	687b      	ldr	r3, [r7, #4]
   1148c:	7d1b      	ldrb	r3, [r3, #20]
   1148e:	b2db      	uxtb	r3, r3
   11490:	001a      	movs	r2, r3
   11492:	2301      	movs	r3, #1
   11494:	4013      	ands	r3, r2
   11496:	1e5a      	subs	r2, r3, #1
   11498:	4193      	sbcs	r3, r2
   1149a:	b2db      	uxtb	r3, r3
}
   1149c:	0018      	movs	r0, r3
   1149e:	46bd      	mov	sp, r7
   114a0:	b002      	add	sp, #8
   114a2:	bd80      	pop	{r7, pc}
   114a4:	41004000 	.word	0x41004000

000114a8 <system_apb_clock_set_mask>:
{
   114a8:	b580      	push	{r7, lr}
   114aa:	b082      	sub	sp, #8
   114ac:	af00      	add	r7, sp, #0
   114ae:	0002      	movs	r2, r0
   114b0:	6039      	str	r1, [r7, #0]
   114b2:	1dfb      	adds	r3, r7, #7
   114b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   114b6:	1dfb      	adds	r3, r7, #7
   114b8:	781b      	ldrb	r3, [r3, #0]
   114ba:	2b01      	cmp	r3, #1
   114bc:	d00a      	beq.n	114d4 <system_apb_clock_set_mask+0x2c>
   114be:	2b02      	cmp	r3, #2
   114c0:	d00f      	beq.n	114e2 <system_apb_clock_set_mask+0x3a>
   114c2:	2b00      	cmp	r3, #0
   114c4:	d114      	bne.n	114f0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   114c6:	4b0e      	ldr	r3, [pc, #56]	; (11500 <system_apb_clock_set_mask+0x58>)
   114c8:	4a0d      	ldr	r2, [pc, #52]	; (11500 <system_apb_clock_set_mask+0x58>)
   114ca:	6991      	ldr	r1, [r2, #24]
   114cc:	683a      	ldr	r2, [r7, #0]
   114ce:	430a      	orrs	r2, r1
   114d0:	619a      	str	r2, [r3, #24]
			break;
   114d2:	e00f      	b.n	114f4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   114d4:	4b0a      	ldr	r3, [pc, #40]	; (11500 <system_apb_clock_set_mask+0x58>)
   114d6:	4a0a      	ldr	r2, [pc, #40]	; (11500 <system_apb_clock_set_mask+0x58>)
   114d8:	69d1      	ldr	r1, [r2, #28]
   114da:	683a      	ldr	r2, [r7, #0]
   114dc:	430a      	orrs	r2, r1
   114de:	61da      	str	r2, [r3, #28]
			break;
   114e0:	e008      	b.n	114f4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   114e2:	4b07      	ldr	r3, [pc, #28]	; (11500 <system_apb_clock_set_mask+0x58>)
   114e4:	4a06      	ldr	r2, [pc, #24]	; (11500 <system_apb_clock_set_mask+0x58>)
   114e6:	6a11      	ldr	r1, [r2, #32]
   114e8:	683a      	ldr	r2, [r7, #0]
   114ea:	430a      	orrs	r2, r1
   114ec:	621a      	str	r2, [r3, #32]
			break;
   114ee:	e001      	b.n	114f4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   114f0:	2317      	movs	r3, #23
   114f2:	e000      	b.n	114f6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   114f4:	2300      	movs	r3, #0
}
   114f6:	0018      	movs	r0, r3
   114f8:	46bd      	mov	sp, r7
   114fa:	b002      	add	sp, #8
   114fc:	bd80      	pop	{r7, pc}
   114fe:	46c0      	nop			; (mov r8, r8)
   11500:	40000400 	.word	0x40000400

00011504 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   11504:	b580      	push	{r7, lr}
   11506:	b084      	sub	sp, #16
   11508:	af00      	add	r7, sp, #0
   1150a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   1150c:	4b2f      	ldr	r3, [pc, #188]	; (115cc <nvm_set_config+0xc8>)
   1150e:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   11510:	2104      	movs	r1, #4
   11512:	2001      	movs	r0, #1
   11514:	4b2e      	ldr	r3, [pc, #184]	; (115d0 <nvm_set_config+0xcc>)
   11516:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11518:	68fb      	ldr	r3, [r7, #12]
   1151a:	2220      	movs	r2, #32
   1151c:	32ff      	adds	r2, #255	; 0xff
   1151e:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11520:	4b2c      	ldr	r3, [pc, #176]	; (115d4 <nvm_set_config+0xd0>)
   11522:	4798      	blx	r3
   11524:	0003      	movs	r3, r0
   11526:	001a      	movs	r2, r3
   11528:	2301      	movs	r3, #1
   1152a:	4053      	eors	r3, r2
   1152c:	b2db      	uxtb	r3, r3
   1152e:	2b00      	cmp	r3, #0
   11530:	d001      	beq.n	11536 <nvm_set_config+0x32>
		return STATUS_BUSY;
   11532:	2305      	movs	r3, #5
   11534:	e045      	b.n	115c2 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11536:	687b      	ldr	r3, [r7, #4]
   11538:	781b      	ldrb	r3, [r3, #0]
   1153a:	021b      	lsls	r3, r3, #8
   1153c:	001a      	movs	r2, r3
   1153e:	23c0      	movs	r3, #192	; 0xc0
   11540:	009b      	lsls	r3, r3, #2
   11542:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11544:	687b      	ldr	r3, [r7, #4]
   11546:	785b      	ldrb	r3, [r3, #1]
   11548:	01db      	lsls	r3, r3, #7
   1154a:	0019      	movs	r1, r3
   1154c:	23ff      	movs	r3, #255	; 0xff
   1154e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11550:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11552:	687b      	ldr	r3, [r7, #4]
   11554:	789b      	ldrb	r3, [r3, #2]
   11556:	005b      	lsls	r3, r3, #1
   11558:	0019      	movs	r1, r3
   1155a:	231e      	movs	r3, #30
   1155c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   1155e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11560:	687b      	ldr	r3, [r7, #4]
   11562:	78db      	ldrb	r3, [r3, #3]
   11564:	049b      	lsls	r3, r3, #18
   11566:	0019      	movs	r1, r3
   11568:	2380      	movs	r3, #128	; 0x80
   1156a:	02db      	lsls	r3, r3, #11
   1156c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   1156e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11570:	687b      	ldr	r3, [r7, #4]
   11572:	791b      	ldrb	r3, [r3, #4]
   11574:	041b      	lsls	r3, r3, #16
   11576:	0019      	movs	r1, r3
   11578:	23c0      	movs	r3, #192	; 0xc0
   1157a:	029b      	lsls	r3, r3, #10
   1157c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   1157e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   11580:	68fb      	ldr	r3, [r7, #12]
   11582:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11584:	68fb      	ldr	r3, [r7, #12]
   11586:	689b      	ldr	r3, [r3, #8]
   11588:	035b      	lsls	r3, r3, #13
   1158a:	0f5b      	lsrs	r3, r3, #29
   1158c:	b2db      	uxtb	r3, r3
   1158e:	001a      	movs	r2, r3
   11590:	2308      	movs	r3, #8
   11592:	4093      	lsls	r3, r2
   11594:	b29a      	uxth	r2, r3
   11596:	4b10      	ldr	r3, [pc, #64]	; (115d8 <nvm_set_config+0xd4>)
   11598:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   1159a:	68fb      	ldr	r3, [r7, #12]
   1159c:	689b      	ldr	r3, [r3, #8]
   1159e:	b29a      	uxth	r2, r3
   115a0:	4b0d      	ldr	r3, [pc, #52]	; (115d8 <nvm_set_config+0xd4>)
   115a2:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   115a4:	687b      	ldr	r3, [r7, #4]
   115a6:	785a      	ldrb	r2, [r3, #1]
   115a8:	4b0b      	ldr	r3, [pc, #44]	; (115d8 <nvm_set_config+0xd4>)
   115aa:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   115ac:	68fb      	ldr	r3, [r7, #12]
   115ae:	8b1b      	ldrh	r3, [r3, #24]
   115b0:	b29b      	uxth	r3, r3
   115b2:	001a      	movs	r2, r3
   115b4:	2380      	movs	r3, #128	; 0x80
   115b6:	005b      	lsls	r3, r3, #1
   115b8:	4013      	ands	r3, r2
   115ba:	d001      	beq.n	115c0 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   115bc:	2310      	movs	r3, #16
   115be:	e000      	b.n	115c2 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   115c0:	2300      	movs	r3, #0
}
   115c2:	0018      	movs	r0, r3
   115c4:	46bd      	mov	sp, r7
   115c6:	b004      	add	sp, #16
   115c8:	bd80      	pop	{r7, pc}
   115ca:	46c0      	nop			; (mov r8, r8)
   115cc:	41004000 	.word	0x41004000
   115d0:	000114a9 	.word	0x000114a9
   115d4:	00011481 	.word	0x00011481
   115d8:	20000404 	.word	0x20000404

000115dc <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   115dc:	b580      	push	{r7, lr}
   115de:	b086      	sub	sp, #24
   115e0:	af00      	add	r7, sp, #0
   115e2:	60b9      	str	r1, [r7, #8]
   115e4:	607a      	str	r2, [r7, #4]
   115e6:	230f      	movs	r3, #15
   115e8:	18fb      	adds	r3, r7, r3
   115ea:	1c02      	adds	r2, r0, #0
   115ec:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   115ee:	4b3a      	ldr	r3, [pc, #232]	; (116d8 <nvm_execute_command+0xfc>)
   115f0:	881b      	ldrh	r3, [r3, #0]
   115f2:	001a      	movs	r2, r3
   115f4:	4b38      	ldr	r3, [pc, #224]	; (116d8 <nvm_execute_command+0xfc>)
   115f6:	885b      	ldrh	r3, [r3, #2]
   115f8:	435a      	muls	r2, r3
   115fa:	68bb      	ldr	r3, [r7, #8]
   115fc:	429a      	cmp	r2, r3
   115fe:	d209      	bcs.n	11614 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   11600:	68bb      	ldr	r3, [r7, #8]
   11602:	4a36      	ldr	r2, [pc, #216]	; (116dc <nvm_execute_command+0x100>)
   11604:	4293      	cmp	r3, r2
   11606:	d903      	bls.n	11610 <nvm_execute_command+0x34>
   11608:	68bb      	ldr	r3, [r7, #8]
   1160a:	4a35      	ldr	r2, [pc, #212]	; (116e0 <nvm_execute_command+0x104>)
   1160c:	4293      	cmp	r3, r2
   1160e:	d901      	bls.n	11614 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11610:	2318      	movs	r3, #24
   11612:	e05c      	b.n	116ce <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11614:	4b33      	ldr	r3, [pc, #204]	; (116e4 <nvm_execute_command+0x108>)
   11616:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   11618:	697b      	ldr	r3, [r7, #20]
   1161a:	685b      	ldr	r3, [r3, #4]
   1161c:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   1161e:	693b      	ldr	r3, [r7, #16]
   11620:	2280      	movs	r2, #128	; 0x80
   11622:	02d2      	lsls	r2, r2, #11
   11624:	431a      	orrs	r2, r3
   11626:	697b      	ldr	r3, [r7, #20]
   11628:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   1162a:	697b      	ldr	r3, [r7, #20]
   1162c:	2220      	movs	r2, #32
   1162e:	32ff      	adds	r2, #255	; 0xff
   11630:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11632:	4b2d      	ldr	r3, [pc, #180]	; (116e8 <nvm_execute_command+0x10c>)
   11634:	4798      	blx	r3
   11636:	0003      	movs	r3, r0
   11638:	001a      	movs	r2, r3
   1163a:	2301      	movs	r3, #1
   1163c:	4053      	eors	r3, r2
   1163e:	b2db      	uxtb	r3, r3
   11640:	2b00      	cmp	r3, #0
   11642:	d004      	beq.n	1164e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   11644:	697b      	ldr	r3, [r7, #20]
   11646:	693a      	ldr	r2, [r7, #16]
   11648:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   1164a:	2305      	movs	r3, #5
   1164c:	e03f      	b.n	116ce <nvm_execute_command+0xf2>
	}

	switch (command) {
   1164e:	230f      	movs	r3, #15
   11650:	18fb      	adds	r3, r7, r3
   11652:	781b      	ldrb	r3, [r3, #0]
   11654:	2b45      	cmp	r3, #69	; 0x45
   11656:	d81d      	bhi.n	11694 <nvm_execute_command+0xb8>
   11658:	009a      	lsls	r2, r3, #2
   1165a:	4b24      	ldr	r3, [pc, #144]	; (116ec <nvm_execute_command+0x110>)
   1165c:	18d3      	adds	r3, r2, r3
   1165e:	681b      	ldr	r3, [r3, #0]
   11660:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11662:	697b      	ldr	r3, [r7, #20]
   11664:	8b1b      	ldrh	r3, [r3, #24]
   11666:	b29b      	uxth	r3, r3
   11668:	001a      	movs	r2, r3
   1166a:	2380      	movs	r3, #128	; 0x80
   1166c:	005b      	lsls	r3, r3, #1
   1166e:	4013      	ands	r3, r2
   11670:	d004      	beq.n	1167c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11672:	697b      	ldr	r3, [r7, #20]
   11674:	693a      	ldr	r2, [r7, #16]
   11676:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11678:	2310      	movs	r3, #16
   1167a:	e028      	b.n	116ce <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   1167c:	68bb      	ldr	r3, [r7, #8]
   1167e:	089b      	lsrs	r3, r3, #2
   11680:	005a      	lsls	r2, r3, #1
   11682:	697b      	ldr	r3, [r7, #20]
   11684:	61da      	str	r2, [r3, #28]
			break;
   11686:	e00b      	b.n	116a0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11688:	68bb      	ldr	r3, [r7, #8]
   1168a:	089b      	lsrs	r3, r3, #2
   1168c:	005a      	lsls	r2, r3, #1
   1168e:	697b      	ldr	r3, [r7, #20]
   11690:	61da      	str	r2, [r3, #28]
			break;
   11692:	e005      	b.n	116a0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11694:	697b      	ldr	r3, [r7, #20]
   11696:	693a      	ldr	r2, [r7, #16]
   11698:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   1169a:	2317      	movs	r3, #23
   1169c:	e017      	b.n	116ce <nvm_execute_command+0xf2>
			break;
   1169e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   116a0:	230f      	movs	r3, #15
   116a2:	18fb      	adds	r3, r7, r3
   116a4:	781b      	ldrb	r3, [r3, #0]
   116a6:	b29b      	uxth	r3, r3
   116a8:	4a11      	ldr	r2, [pc, #68]	; (116f0 <nvm_execute_command+0x114>)
   116aa:	4313      	orrs	r3, r2
   116ac:	b29a      	uxth	r2, r3
   116ae:	697b      	ldr	r3, [r7, #20]
   116b0:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   116b2:	46c0      	nop			; (mov r8, r8)
   116b4:	4b0c      	ldr	r3, [pc, #48]	; (116e8 <nvm_execute_command+0x10c>)
   116b6:	4798      	blx	r3
   116b8:	0003      	movs	r3, r0
   116ba:	001a      	movs	r2, r3
   116bc:	2301      	movs	r3, #1
   116be:	4053      	eors	r3, r2
   116c0:	b2db      	uxtb	r3, r3
   116c2:	2b00      	cmp	r3, #0
   116c4:	d1f6      	bne.n	116b4 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   116c6:	697b      	ldr	r3, [r7, #20]
   116c8:	693a      	ldr	r2, [r7, #16]
   116ca:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   116cc:	2300      	movs	r3, #0
}
   116ce:	0018      	movs	r0, r3
   116d0:	46bd      	mov	sp, r7
   116d2:	b006      	add	sp, #24
   116d4:	bd80      	pop	{r7, pc}
   116d6:	46c0      	nop			; (mov r8, r8)
   116d8:	20000404 	.word	0x20000404
   116dc:	00803fff 	.word	0x00803fff
   116e0:	00806000 	.word	0x00806000
   116e4:	41004000 	.word	0x41004000
   116e8:	00011481 	.word	0x00011481
   116ec:	0001949c 	.word	0x0001949c
   116f0:	ffffa500 	.word	0xffffa500

000116f4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   116f4:	b580      	push	{r7, lr}
   116f6:	b088      	sub	sp, #32
   116f8:	af00      	add	r7, sp, #0
   116fa:	60f8      	str	r0, [r7, #12]
   116fc:	60b9      	str	r1, [r7, #8]
   116fe:	1dbb      	adds	r3, r7, #6
   11700:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11702:	4b4a      	ldr	r3, [pc, #296]	; (1182c <nvm_write_buffer+0x138>)
   11704:	881b      	ldrh	r3, [r3, #0]
   11706:	001a      	movs	r2, r3
   11708:	4b48      	ldr	r3, [pc, #288]	; (1182c <nvm_write_buffer+0x138>)
   1170a:	885b      	ldrh	r3, [r3, #2]
   1170c:	435a      	muls	r2, r3
	if (destination_address >
   1170e:	68fb      	ldr	r3, [r7, #12]
   11710:	429a      	cmp	r2, r3
   11712:	d201      	bcs.n	11718 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11714:	2318      	movs	r3, #24
   11716:	e084      	b.n	11822 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11718:	4b44      	ldr	r3, [pc, #272]	; (1182c <nvm_write_buffer+0x138>)
   1171a:	881b      	ldrh	r3, [r3, #0]
   1171c:	3b01      	subs	r3, #1
   1171e:	001a      	movs	r2, r3
   11720:	68fb      	ldr	r3, [r7, #12]
   11722:	4013      	ands	r3, r2
   11724:	d001      	beq.n	1172a <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11726:	2318      	movs	r3, #24
   11728:	e07b      	b.n	11822 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   1172a:	4b40      	ldr	r3, [pc, #256]	; (1182c <nvm_write_buffer+0x138>)
   1172c:	881b      	ldrh	r3, [r3, #0]
   1172e:	1dba      	adds	r2, r7, #6
   11730:	8812      	ldrh	r2, [r2, #0]
   11732:	429a      	cmp	r2, r3
   11734:	d901      	bls.n	1173a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11736:	2317      	movs	r3, #23
   11738:	e073      	b.n	11822 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   1173a:	4b3d      	ldr	r3, [pc, #244]	; (11830 <nvm_write_buffer+0x13c>)
   1173c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   1173e:	4b3d      	ldr	r3, [pc, #244]	; (11834 <nvm_write_buffer+0x140>)
   11740:	4798      	blx	r3
   11742:	0003      	movs	r3, r0
   11744:	001a      	movs	r2, r3
   11746:	2301      	movs	r3, #1
   11748:	4053      	eors	r3, r2
   1174a:	b2db      	uxtb	r3, r3
   1174c:	2b00      	cmp	r3, #0
   1174e:	d001      	beq.n	11754 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   11750:	2305      	movs	r3, #5
   11752:	e066      	b.n	11822 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11754:	697b      	ldr	r3, [r7, #20]
   11756:	4a38      	ldr	r2, [pc, #224]	; (11838 <nvm_write_buffer+0x144>)
   11758:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   1175a:	46c0      	nop			; (mov r8, r8)
   1175c:	4b35      	ldr	r3, [pc, #212]	; (11834 <nvm_write_buffer+0x140>)
   1175e:	4798      	blx	r3
   11760:	0003      	movs	r3, r0
   11762:	001a      	movs	r2, r3
   11764:	2301      	movs	r3, #1
   11766:	4053      	eors	r3, r2
   11768:	b2db      	uxtb	r3, r3
   1176a:	2b00      	cmp	r3, #0
   1176c:	d1f6      	bne.n	1175c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   1176e:	697b      	ldr	r3, [r7, #20]
   11770:	2220      	movs	r2, #32
   11772:	32ff      	adds	r2, #255	; 0xff
   11774:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11776:	68fb      	ldr	r3, [r7, #12]
   11778:	085b      	lsrs	r3, r3, #1
   1177a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   1177c:	231a      	movs	r3, #26
   1177e:	18fb      	adds	r3, r7, r3
   11780:	2200      	movs	r2, #0
   11782:	801a      	strh	r2, [r3, #0]
   11784:	e032      	b.n	117ec <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11786:	231a      	movs	r3, #26
   11788:	18fb      	adds	r3, r7, r3
   1178a:	881b      	ldrh	r3, [r3, #0]
   1178c:	68ba      	ldr	r2, [r7, #8]
   1178e:	18d3      	adds	r3, r2, r3
   11790:	781a      	ldrb	r2, [r3, #0]
   11792:	2318      	movs	r3, #24
   11794:	18fb      	adds	r3, r7, r3
   11796:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11798:	231a      	movs	r3, #26
   1179a:	18fb      	adds	r3, r7, r3
   1179c:	881a      	ldrh	r2, [r3, #0]
   1179e:	1dbb      	adds	r3, r7, #6
   117a0:	881b      	ldrh	r3, [r3, #0]
   117a2:	3b01      	subs	r3, #1
   117a4:	429a      	cmp	r2, r3
   117a6:	da11      	bge.n	117cc <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   117a8:	231a      	movs	r3, #26
   117aa:	18fb      	adds	r3, r7, r3
   117ac:	881b      	ldrh	r3, [r3, #0]
   117ae:	3301      	adds	r3, #1
   117b0:	68ba      	ldr	r2, [r7, #8]
   117b2:	18d3      	adds	r3, r2, r3
   117b4:	781b      	ldrb	r3, [r3, #0]
   117b6:	021b      	lsls	r3, r3, #8
   117b8:	b21a      	sxth	r2, r3
   117ba:	2318      	movs	r3, #24
   117bc:	18fb      	adds	r3, r7, r3
   117be:	2100      	movs	r1, #0
   117c0:	5e5b      	ldrsh	r3, [r3, r1]
   117c2:	4313      	orrs	r3, r2
   117c4:	b21a      	sxth	r2, r3
   117c6:	2318      	movs	r3, #24
   117c8:	18fb      	adds	r3, r7, r3
   117ca:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   117cc:	69fb      	ldr	r3, [r7, #28]
   117ce:	1c5a      	adds	r2, r3, #1
   117d0:	61fa      	str	r2, [r7, #28]
   117d2:	005b      	lsls	r3, r3, #1
   117d4:	001a      	movs	r2, r3
   117d6:	2318      	movs	r3, #24
   117d8:	18fb      	adds	r3, r7, r3
   117da:	881b      	ldrh	r3, [r3, #0]
   117dc:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   117de:	231a      	movs	r3, #26
   117e0:	18fb      	adds	r3, r7, r3
   117e2:	221a      	movs	r2, #26
   117e4:	18ba      	adds	r2, r7, r2
   117e6:	8812      	ldrh	r2, [r2, #0]
   117e8:	3202      	adds	r2, #2
   117ea:	801a      	strh	r2, [r3, #0]
   117ec:	231a      	movs	r3, #26
   117ee:	18fa      	adds	r2, r7, r3
   117f0:	1dbb      	adds	r3, r7, #6
   117f2:	8812      	ldrh	r2, [r2, #0]
   117f4:	881b      	ldrh	r3, [r3, #0]
   117f6:	429a      	cmp	r2, r3
   117f8:	d3c5      	bcc.n	11786 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   117fa:	4b0c      	ldr	r3, [pc, #48]	; (1182c <nvm_write_buffer+0x138>)
   117fc:	791b      	ldrb	r3, [r3, #4]
   117fe:	2201      	movs	r2, #1
   11800:	4053      	eors	r3, r2
   11802:	b2db      	uxtb	r3, r3
   11804:	2b00      	cmp	r3, #0
   11806:	d00b      	beq.n	11820 <nvm_write_buffer+0x12c>
   11808:	1dbb      	adds	r3, r7, #6
   1180a:	881b      	ldrh	r3, [r3, #0]
   1180c:	2b3f      	cmp	r3, #63	; 0x3f
   1180e:	d807      	bhi.n	11820 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11810:	68fb      	ldr	r3, [r7, #12]
   11812:	2200      	movs	r2, #0
   11814:	0019      	movs	r1, r3
   11816:	2004      	movs	r0, #4
   11818:	4b08      	ldr	r3, [pc, #32]	; (1183c <nvm_write_buffer+0x148>)
   1181a:	4798      	blx	r3
   1181c:	0003      	movs	r3, r0
   1181e:	e000      	b.n	11822 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11820:	2300      	movs	r3, #0
}
   11822:	0018      	movs	r0, r3
   11824:	46bd      	mov	sp, r7
   11826:	b008      	add	sp, #32
   11828:	bd80      	pop	{r7, pc}
   1182a:	46c0      	nop			; (mov r8, r8)
   1182c:	20000404 	.word	0x20000404
   11830:	41004000 	.word	0x41004000
   11834:	00011481 	.word	0x00011481
   11838:	ffffa544 	.word	0xffffa544
   1183c:	000115dd 	.word	0x000115dd

00011840 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11840:	b580      	push	{r7, lr}
   11842:	b088      	sub	sp, #32
   11844:	af00      	add	r7, sp, #0
   11846:	60f8      	str	r0, [r7, #12]
   11848:	60b9      	str	r1, [r7, #8]
   1184a:	1dbb      	adds	r3, r7, #6
   1184c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   1184e:	4b38      	ldr	r3, [pc, #224]	; (11930 <nvm_read_buffer+0xf0>)
   11850:	881b      	ldrh	r3, [r3, #0]
   11852:	001a      	movs	r2, r3
   11854:	4b36      	ldr	r3, [pc, #216]	; (11930 <nvm_read_buffer+0xf0>)
   11856:	885b      	ldrh	r3, [r3, #2]
   11858:	435a      	muls	r2, r3
	if (source_address >
   1185a:	68fb      	ldr	r3, [r7, #12]
   1185c:	429a      	cmp	r2, r3
   1185e:	d201      	bcs.n	11864 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11860:	2318      	movs	r3, #24
   11862:	e060      	b.n	11926 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11864:	4b32      	ldr	r3, [pc, #200]	; (11930 <nvm_read_buffer+0xf0>)
   11866:	881b      	ldrh	r3, [r3, #0]
   11868:	3b01      	subs	r3, #1
   1186a:	001a      	movs	r2, r3
   1186c:	68fb      	ldr	r3, [r7, #12]
   1186e:	4013      	ands	r3, r2
   11870:	d001      	beq.n	11876 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11872:	2318      	movs	r3, #24
   11874:	e057      	b.n	11926 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11876:	4b2e      	ldr	r3, [pc, #184]	; (11930 <nvm_read_buffer+0xf0>)
   11878:	881b      	ldrh	r3, [r3, #0]
   1187a:	1dba      	adds	r2, r7, #6
   1187c:	8812      	ldrh	r2, [r2, #0]
   1187e:	429a      	cmp	r2, r3
   11880:	d901      	bls.n	11886 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11882:	2317      	movs	r3, #23
   11884:	e04f      	b.n	11926 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11886:	4b2b      	ldr	r3, [pc, #172]	; (11934 <nvm_read_buffer+0xf4>)
   11888:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   1188a:	4b2b      	ldr	r3, [pc, #172]	; (11938 <nvm_read_buffer+0xf8>)
   1188c:	4798      	blx	r3
   1188e:	0003      	movs	r3, r0
   11890:	001a      	movs	r2, r3
   11892:	2301      	movs	r3, #1
   11894:	4053      	eors	r3, r2
   11896:	b2db      	uxtb	r3, r3
   11898:	2b00      	cmp	r3, #0
   1189a:	d001      	beq.n	118a0 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   1189c:	2305      	movs	r3, #5
   1189e:	e042      	b.n	11926 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   118a0:	697b      	ldr	r3, [r7, #20]
   118a2:	2220      	movs	r2, #32
   118a4:	32ff      	adds	r2, #255	; 0xff
   118a6:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   118a8:	68fb      	ldr	r3, [r7, #12]
   118aa:	085b      	lsrs	r3, r3, #1
   118ac:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   118ae:	231a      	movs	r3, #26
   118b0:	18fb      	adds	r3, r7, r3
   118b2:	2200      	movs	r2, #0
   118b4:	801a      	strh	r2, [r3, #0]
   118b6:	e02e      	b.n	11916 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   118b8:	69fb      	ldr	r3, [r7, #28]
   118ba:	1c5a      	adds	r2, r3, #1
   118bc:	61fa      	str	r2, [r7, #28]
   118be:	005b      	lsls	r3, r3, #1
   118c0:	001a      	movs	r2, r3
   118c2:	2312      	movs	r3, #18
   118c4:	18fb      	adds	r3, r7, r3
   118c6:	8812      	ldrh	r2, [r2, #0]
   118c8:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   118ca:	231a      	movs	r3, #26
   118cc:	18fb      	adds	r3, r7, r3
   118ce:	881b      	ldrh	r3, [r3, #0]
   118d0:	68ba      	ldr	r2, [r7, #8]
   118d2:	18d3      	adds	r3, r2, r3
   118d4:	2212      	movs	r2, #18
   118d6:	18ba      	adds	r2, r7, r2
   118d8:	8812      	ldrh	r2, [r2, #0]
   118da:	b2d2      	uxtb	r2, r2
   118dc:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   118de:	231a      	movs	r3, #26
   118e0:	18fb      	adds	r3, r7, r3
   118e2:	881a      	ldrh	r2, [r3, #0]
   118e4:	1dbb      	adds	r3, r7, #6
   118e6:	881b      	ldrh	r3, [r3, #0]
   118e8:	3b01      	subs	r3, #1
   118ea:	429a      	cmp	r2, r3
   118ec:	da0c      	bge.n	11908 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   118ee:	231a      	movs	r3, #26
   118f0:	18fb      	adds	r3, r7, r3
   118f2:	881b      	ldrh	r3, [r3, #0]
   118f4:	3301      	adds	r3, #1
   118f6:	68ba      	ldr	r2, [r7, #8]
   118f8:	18d3      	adds	r3, r2, r3
   118fa:	2212      	movs	r2, #18
   118fc:	18ba      	adds	r2, r7, r2
   118fe:	8812      	ldrh	r2, [r2, #0]
   11900:	0a12      	lsrs	r2, r2, #8
   11902:	b292      	uxth	r2, r2
   11904:	b2d2      	uxtb	r2, r2
   11906:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11908:	231a      	movs	r3, #26
   1190a:	18fb      	adds	r3, r7, r3
   1190c:	221a      	movs	r2, #26
   1190e:	18ba      	adds	r2, r7, r2
   11910:	8812      	ldrh	r2, [r2, #0]
   11912:	3202      	adds	r2, #2
   11914:	801a      	strh	r2, [r3, #0]
   11916:	231a      	movs	r3, #26
   11918:	18fa      	adds	r2, r7, r3
   1191a:	1dbb      	adds	r3, r7, #6
   1191c:	8812      	ldrh	r2, [r2, #0]
   1191e:	881b      	ldrh	r3, [r3, #0]
   11920:	429a      	cmp	r2, r3
   11922:	d3c9      	bcc.n	118b8 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   11924:	2300      	movs	r3, #0
}
   11926:	0018      	movs	r0, r3
   11928:	46bd      	mov	sp, r7
   1192a:	b008      	add	sp, #32
   1192c:	bd80      	pop	{r7, pc}
   1192e:	46c0      	nop			; (mov r8, r8)
   11930:	20000404 	.word	0x20000404
   11934:	41004000 	.word	0x41004000
   11938:	00011481 	.word	0x00011481

0001193c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   1193c:	b580      	push	{r7, lr}
   1193e:	b084      	sub	sp, #16
   11940:	af00      	add	r7, sp, #0
   11942:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11944:	4b23      	ldr	r3, [pc, #140]	; (119d4 <nvm_erase_row+0x98>)
   11946:	881b      	ldrh	r3, [r3, #0]
   11948:	001a      	movs	r2, r3
   1194a:	4b22      	ldr	r3, [pc, #136]	; (119d4 <nvm_erase_row+0x98>)
   1194c:	885b      	ldrh	r3, [r3, #2]
   1194e:	435a      	muls	r2, r3
	if (row_address >
   11950:	687b      	ldr	r3, [r7, #4]
   11952:	429a      	cmp	r2, r3
   11954:	d201      	bcs.n	1195a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11956:	2318      	movs	r3, #24
   11958:	e037      	b.n	119ca <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   1195a:	4b1e      	ldr	r3, [pc, #120]	; (119d4 <nvm_erase_row+0x98>)
   1195c:	881b      	ldrh	r3, [r3, #0]
   1195e:	009b      	lsls	r3, r3, #2
   11960:	3b01      	subs	r3, #1
   11962:	001a      	movs	r2, r3
   11964:	687b      	ldr	r3, [r7, #4]
   11966:	4013      	ands	r3, r2
   11968:	d001      	beq.n	1196e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   1196a:	2318      	movs	r3, #24
   1196c:	e02d      	b.n	119ca <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   1196e:	4b1a      	ldr	r3, [pc, #104]	; (119d8 <nvm_erase_row+0x9c>)
   11970:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11972:	4b1a      	ldr	r3, [pc, #104]	; (119dc <nvm_erase_row+0xa0>)
   11974:	4798      	blx	r3
   11976:	0003      	movs	r3, r0
   11978:	001a      	movs	r2, r3
   1197a:	2301      	movs	r3, #1
   1197c:	4053      	eors	r3, r2
   1197e:	b2db      	uxtb	r3, r3
   11980:	2b00      	cmp	r3, #0
   11982:	d001      	beq.n	11988 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   11984:	2305      	movs	r3, #5
   11986:	e020      	b.n	119ca <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11988:	68fb      	ldr	r3, [r7, #12]
   1198a:	2220      	movs	r2, #32
   1198c:	32ff      	adds	r2, #255	; 0xff
   1198e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   11990:	687b      	ldr	r3, [r7, #4]
   11992:	089b      	lsrs	r3, r3, #2
   11994:	005a      	lsls	r2, r3, #1
   11996:	68fb      	ldr	r3, [r7, #12]
   11998:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   1199a:	68fb      	ldr	r3, [r7, #12]
   1199c:	4a10      	ldr	r2, [pc, #64]	; (119e0 <nvm_erase_row+0xa4>)
   1199e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   119a0:	46c0      	nop			; (mov r8, r8)
   119a2:	4b0e      	ldr	r3, [pc, #56]	; (119dc <nvm_erase_row+0xa0>)
   119a4:	4798      	blx	r3
   119a6:	0003      	movs	r3, r0
   119a8:	001a      	movs	r2, r3
   119aa:	2301      	movs	r3, #1
   119ac:	4053      	eors	r3, r2
   119ae:	b2db      	uxtb	r3, r3
   119b0:	2b00      	cmp	r3, #0
   119b2:	d1f6      	bne.n	119a2 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   119b4:	68fb      	ldr	r3, [r7, #12]
   119b6:	8b1b      	ldrh	r3, [r3, #24]
   119b8:	b29b      	uxth	r3, r3
   119ba:	b2db      	uxtb	r3, r3
   119bc:	001a      	movs	r2, r3
   119be:	231c      	movs	r3, #28
   119c0:	4013      	ands	r3, r2
   119c2:	d001      	beq.n	119c8 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   119c4:	2304      	movs	r3, #4
   119c6:	e000      	b.n	119ca <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   119c8:	2300      	movs	r3, #0
}
   119ca:	0018      	movs	r0, r3
   119cc:	46bd      	mov	sp, r7
   119ce:	b004      	add	sp, #16
   119d0:	bd80      	pop	{r7, pc}
   119d2:	46c0      	nop			; (mov r8, r8)
   119d4:	20000404 	.word	0x20000404
   119d8:	41004000 	.word	0x41004000
   119dc:	00011481 	.word	0x00011481
   119e0:	ffffa502 	.word	0xffffa502

000119e4 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   119e4:	b580      	push	{r7, lr}
   119e6:	b086      	sub	sp, #24
   119e8:	af00      	add	r7, sp, #0
   119ea:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   119ec:	4b2a      	ldr	r3, [pc, #168]	; (11a98 <nvm_get_parameters+0xb4>)
   119ee:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   119f0:	697b      	ldr	r3, [r7, #20]
   119f2:	2220      	movs	r2, #32
   119f4:	32ff      	adds	r2, #255	; 0xff
   119f6:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   119f8:	697b      	ldr	r3, [r7, #20]
   119fa:	689b      	ldr	r3, [r3, #8]
   119fc:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   119fe:	693b      	ldr	r3, [r7, #16]
   11a00:	0c1b      	lsrs	r3, r3, #16
   11a02:	2207      	movs	r2, #7
   11a04:	4013      	ands	r3, r2
   11a06:	2208      	movs	r2, #8
   11a08:	409a      	lsls	r2, r3
   11a0a:	0013      	movs	r3, r2
	parameters->page_size =
   11a0c:	b2da      	uxtb	r2, r3
   11a0e:	687b      	ldr	r3, [r7, #4]
   11a10:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   11a12:	693b      	ldr	r3, [r7, #16]
   11a14:	b29a      	uxth	r2, r3
   11a16:	687b      	ldr	r3, [r7, #4]
   11a18:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   11a1a:	4b20      	ldr	r3, [pc, #128]	; (11a9c <nvm_get_parameters+0xb8>)
   11a1c:	881b      	ldrh	r3, [r3, #0]
   11a1e:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   11a20:	091b      	lsrs	r3, r3, #4
   11a22:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   11a24:	230e      	movs	r3, #14
   11a26:	18fb      	adds	r3, r7, r3
   11a28:	2107      	movs	r1, #7
   11a2a:	400a      	ands	r2, r1
   11a2c:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   11a2e:	230e      	movs	r3, #14
   11a30:	18fb      	adds	r3, r7, r3
   11a32:	881b      	ldrh	r3, [r3, #0]
   11a34:	2b07      	cmp	r3, #7
   11a36:	d103      	bne.n	11a40 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   11a38:	687b      	ldr	r3, [r7, #4]
   11a3a:	2200      	movs	r2, #0
   11a3c:	605a      	str	r2, [r3, #4]
   11a3e:	e00a      	b.n	11a56 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   11a40:	230e      	movs	r3, #14
   11a42:	18fb      	adds	r3, r7, r3
   11a44:	881b      	ldrh	r3, [r3, #0]
   11a46:	2206      	movs	r2, #6
   11a48:	1ad3      	subs	r3, r2, r3
   11a4a:	2204      	movs	r2, #4
   11a4c:	409a      	lsls	r2, r3
   11a4e:	0013      	movs	r3, r2
   11a50:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   11a52:	687b      	ldr	r3, [r7, #4]
   11a54:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   11a56:	4b11      	ldr	r3, [pc, #68]	; (11a9c <nvm_get_parameters+0xb8>)
   11a58:	881b      	ldrh	r3, [r3, #0]
   11a5a:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   11a5c:	230c      	movs	r3, #12
   11a5e:	18fb      	adds	r3, r7, r3
   11a60:	2107      	movs	r1, #7
   11a62:	400a      	ands	r2, r1
   11a64:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   11a66:	230c      	movs	r3, #12
   11a68:	18fb      	adds	r3, r7, r3
   11a6a:	881b      	ldrh	r3, [r3, #0]
   11a6c:	2b07      	cmp	r3, #7
   11a6e:	d103      	bne.n	11a78 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   11a70:	687b      	ldr	r3, [r7, #4]
   11a72:	2200      	movs	r2, #0
   11a74:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   11a76:	e00a      	b.n	11a8e <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   11a78:	230c      	movs	r3, #12
   11a7a:	18fb      	adds	r3, r7, r3
   11a7c:	881b      	ldrh	r3, [r3, #0]
   11a7e:	2207      	movs	r2, #7
   11a80:	1ad3      	subs	r3, r2, r3
   11a82:	2204      	movs	r2, #4
   11a84:	409a      	lsls	r2, r3
   11a86:	0013      	movs	r3, r2
   11a88:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   11a8a:	687b      	ldr	r3, [r7, #4]
   11a8c:	609a      	str	r2, [r3, #8]
}
   11a8e:	46c0      	nop			; (mov r8, r8)
   11a90:	46bd      	mov	sp, r7
   11a92:	b006      	add	sp, #24
   11a94:	bd80      	pop	{r7, pc}
   11a96:	46c0      	nop			; (mov r8, r8)
   11a98:	41004000 	.word	0x41004000
   11a9c:	00804000 	.word	0x00804000

00011aa0 <system_pinmux_get_config_defaults>:
{
   11aa0:	b580      	push	{r7, lr}
   11aa2:	b082      	sub	sp, #8
   11aa4:	af00      	add	r7, sp, #0
   11aa6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11aa8:	687b      	ldr	r3, [r7, #4]
   11aaa:	2280      	movs	r2, #128	; 0x80
   11aac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11aae:	687b      	ldr	r3, [r7, #4]
   11ab0:	2200      	movs	r2, #0
   11ab2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11ab4:	687b      	ldr	r3, [r7, #4]
   11ab6:	2201      	movs	r2, #1
   11ab8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11aba:	687b      	ldr	r3, [r7, #4]
   11abc:	2200      	movs	r2, #0
   11abe:	70da      	strb	r2, [r3, #3]
}
   11ac0:	46c0      	nop			; (mov r8, r8)
   11ac2:	46bd      	mov	sp, r7
   11ac4:	b002      	add	sp, #8
   11ac6:	bd80      	pop	{r7, pc}

00011ac8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11ac8:	b580      	push	{r7, lr}
   11aca:	b084      	sub	sp, #16
   11acc:	af00      	add	r7, sp, #0
   11ace:	0002      	movs	r2, r0
   11ad0:	6039      	str	r1, [r7, #0]
   11ad2:	1dfb      	adds	r3, r7, #7
   11ad4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11ad6:	230c      	movs	r3, #12
   11ad8:	18fb      	adds	r3, r7, r3
   11ada:	0018      	movs	r0, r3
   11adc:	4b10      	ldr	r3, [pc, #64]	; (11b20 <port_pin_set_config+0x58>)
   11ade:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   11ae0:	230c      	movs	r3, #12
   11ae2:	18fb      	adds	r3, r7, r3
   11ae4:	2280      	movs	r2, #128	; 0x80
   11ae6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   11ae8:	683b      	ldr	r3, [r7, #0]
   11aea:	781a      	ldrb	r2, [r3, #0]
   11aec:	230c      	movs	r3, #12
   11aee:	18fb      	adds	r3, r7, r3
   11af0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   11af2:	683b      	ldr	r3, [r7, #0]
   11af4:	785a      	ldrb	r2, [r3, #1]
   11af6:	230c      	movs	r3, #12
   11af8:	18fb      	adds	r3, r7, r3
   11afa:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   11afc:	683b      	ldr	r3, [r7, #0]
   11afe:	789a      	ldrb	r2, [r3, #2]
   11b00:	230c      	movs	r3, #12
   11b02:	18fb      	adds	r3, r7, r3
   11b04:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   11b06:	230c      	movs	r3, #12
   11b08:	18fa      	adds	r2, r7, r3
   11b0a:	1dfb      	adds	r3, r7, #7
   11b0c:	781b      	ldrb	r3, [r3, #0]
   11b0e:	0011      	movs	r1, r2
   11b10:	0018      	movs	r0, r3
   11b12:	4b04      	ldr	r3, [pc, #16]	; (11b24 <port_pin_set_config+0x5c>)
   11b14:	4798      	blx	r3
}
   11b16:	46c0      	nop			; (mov r8, r8)
   11b18:	46bd      	mov	sp, r7
   11b1a:	b004      	add	sp, #16
   11b1c:	bd80      	pop	{r7, pc}
   11b1e:	46c0      	nop			; (mov r8, r8)
   11b20:	00011aa1 	.word	0x00011aa1
   11b24:	000137f9 	.word	0x000137f9

00011b28 <nvm_get_config_defaults>:
{
   11b28:	b580      	push	{r7, lr}
   11b2a:	b082      	sub	sp, #8
   11b2c:	af00      	add	r7, sp, #0
   11b2e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   11b30:	687b      	ldr	r3, [r7, #4]
   11b32:	2200      	movs	r2, #0
   11b34:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   11b36:	687b      	ldr	r3, [r7, #4]
   11b38:	2201      	movs	r2, #1
   11b3a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   11b3c:	4b08      	ldr	r3, [pc, #32]	; (11b60 <nvm_get_config_defaults+0x38>)
   11b3e:	685b      	ldr	r3, [r3, #4]
   11b40:	06db      	lsls	r3, r3, #27
   11b42:	0f1b      	lsrs	r3, r3, #28
   11b44:	b2db      	uxtb	r3, r3
   11b46:	001a      	movs	r2, r3
   11b48:	687b      	ldr	r3, [r7, #4]
   11b4a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	2200      	movs	r2, #0
   11b50:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   11b52:	687b      	ldr	r3, [r7, #4]
   11b54:	2200      	movs	r2, #0
   11b56:	711a      	strb	r2, [r3, #4]
}
   11b58:	46c0      	nop			; (mov r8, r8)
   11b5a:	46bd      	mov	sp, r7
   11b5c:	b002      	add	sp, #8
   11b5e:	bd80      	pop	{r7, pc}
   11b60:	41004000 	.word	0x41004000

00011b64 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   11b64:	b590      	push	{r4, r7, lr}
   11b66:	b085      	sub	sp, #20
   11b68:	af00      	add	r7, sp, #0
   11b6a:	0002      	movs	r2, r0
   11b6c:	1dfb      	adds	r3, r7, #7
   11b6e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11b70:	230f      	movs	r3, #15
   11b72:	18fb      	adds	r3, r7, r3
   11b74:	2200      	movs	r2, #0
   11b76:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   11b78:	4b0a      	ldr	r3, [pc, #40]	; (11ba4 <_eeprom_emulator_nvm_erase_row+0x40>)
   11b7a:	685b      	ldr	r3, [r3, #4]
   11b7c:	1dfa      	adds	r2, r7, #7
   11b7e:	7812      	ldrb	r2, [r2, #0]
   11b80:	0212      	lsls	r2, r2, #8
   11b82:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   11b84:	220f      	movs	r2, #15
   11b86:	18bc      	adds	r4, r7, r2
   11b88:	0018      	movs	r0, r3
   11b8a:	4b07      	ldr	r3, [pc, #28]	; (11ba8 <_eeprom_emulator_nvm_erase_row+0x44>)
   11b8c:	4798      	blx	r3
   11b8e:	0003      	movs	r3, r0
   11b90:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   11b92:	230f      	movs	r3, #15
   11b94:	18fb      	adds	r3, r7, r3
   11b96:	781b      	ldrb	r3, [r3, #0]
   11b98:	2b05      	cmp	r3, #5
   11b9a:	d0ed      	beq.n	11b78 <_eeprom_emulator_nvm_erase_row+0x14>
}
   11b9c:	46c0      	nop			; (mov r8, r8)
   11b9e:	46bd      	mov	sp, r7
   11ba0:	b005      	add	sp, #20
   11ba2:	bd90      	pop	{r4, r7, pc}
   11ba4:	2000040c 	.word	0x2000040c
   11ba8:	0001193d 	.word	0x0001193d

00011bac <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   11bac:	b590      	push	{r4, r7, lr}
   11bae:	b085      	sub	sp, #20
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	0002      	movs	r2, r0
   11bb4:	6039      	str	r1, [r7, #0]
   11bb6:	1dbb      	adds	r3, r7, #6
   11bb8:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11bba:	230f      	movs	r3, #15
   11bbc:	18fb      	adds	r3, r7, r3
   11bbe:	2200      	movs	r2, #0
   11bc0:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   11bc2:	4b0c      	ldr	r3, [pc, #48]	; (11bf4 <_eeprom_emulator_nvm_fill_cache+0x48>)
   11bc4:	685a      	ldr	r2, [r3, #4]
   11bc6:	1dbb      	adds	r3, r7, #6
   11bc8:	881b      	ldrh	r3, [r3, #0]
   11bca:	019b      	lsls	r3, r3, #6
   11bcc:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   11bce:	0018      	movs	r0, r3
   11bd0:	230f      	movs	r3, #15
   11bd2:	18fc      	adds	r4, r7, r3
   11bd4:	683b      	ldr	r3, [r7, #0]
   11bd6:	2240      	movs	r2, #64	; 0x40
   11bd8:	0019      	movs	r1, r3
   11bda:	4b07      	ldr	r3, [pc, #28]	; (11bf8 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   11bdc:	4798      	blx	r3
   11bde:	0003      	movs	r3, r0
   11be0:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   11be2:	230f      	movs	r3, #15
   11be4:	18fb      	adds	r3, r7, r3
   11be6:	781b      	ldrb	r3, [r3, #0]
   11be8:	2b05      	cmp	r3, #5
   11bea:	d0ea      	beq.n	11bc2 <_eeprom_emulator_nvm_fill_cache+0x16>
}
   11bec:	46c0      	nop			; (mov r8, r8)
   11bee:	46bd      	mov	sp, r7
   11bf0:	b005      	add	sp, #20
   11bf2:	bd90      	pop	{r4, r7, pc}
   11bf4:	2000040c 	.word	0x2000040c
   11bf8:	000116f5 	.word	0x000116f5

00011bfc <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   11bfc:	b590      	push	{r4, r7, lr}
   11bfe:	b085      	sub	sp, #20
   11c00:	af00      	add	r7, sp, #0
   11c02:	0002      	movs	r2, r0
   11c04:	1dbb      	adds	r3, r7, #6
   11c06:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11c08:	230f      	movs	r3, #15
   11c0a:	18fb      	adds	r3, r7, r3
   11c0c:	2200      	movs	r2, #0
   11c0e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   11c10:	4b0b      	ldr	r3, [pc, #44]	; (11c40 <_eeprom_emulator_nvm_commit_cache+0x44>)
   11c12:	685a      	ldr	r2, [r3, #4]
   11c14:	1dbb      	adds	r3, r7, #6
   11c16:	881b      	ldrh	r3, [r3, #0]
   11c18:	019b      	lsls	r3, r3, #6
   11c1a:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   11c1c:	220f      	movs	r2, #15
   11c1e:	18bc      	adds	r4, r7, r2
   11c20:	2200      	movs	r2, #0
   11c22:	0019      	movs	r1, r3
   11c24:	2004      	movs	r0, #4
   11c26:	4b07      	ldr	r3, [pc, #28]	; (11c44 <_eeprom_emulator_nvm_commit_cache+0x48>)
   11c28:	4798      	blx	r3
   11c2a:	0003      	movs	r3, r0
   11c2c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   11c2e:	230f      	movs	r3, #15
   11c30:	18fb      	adds	r3, r7, r3
   11c32:	781b      	ldrb	r3, [r3, #0]
   11c34:	2b05      	cmp	r3, #5
   11c36:	d0eb      	beq.n	11c10 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   11c38:	46c0      	nop			; (mov r8, r8)
   11c3a:	46bd      	mov	sp, r7
   11c3c:	b005      	add	sp, #20
   11c3e:	bd90      	pop	{r4, r7, pc}
   11c40:	2000040c 	.word	0x2000040c
   11c44:	000115dd 	.word	0x000115dd

00011c48 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   11c48:	b590      	push	{r4, r7, lr}
   11c4a:	b085      	sub	sp, #20
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	0002      	movs	r2, r0
   11c50:	6039      	str	r1, [r7, #0]
   11c52:	1dbb      	adds	r3, r7, #6
   11c54:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11c56:	230f      	movs	r3, #15
   11c58:	18fb      	adds	r3, r7, r3
   11c5a:	2200      	movs	r2, #0
   11c5c:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   11c5e:	4b0c      	ldr	r3, [pc, #48]	; (11c90 <_eeprom_emulator_nvm_read_page+0x48>)
   11c60:	685a      	ldr	r2, [r3, #4]
   11c62:	1dbb      	adds	r3, r7, #6
   11c64:	881b      	ldrh	r3, [r3, #0]
   11c66:	019b      	lsls	r3, r3, #6
   11c68:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   11c6a:	0018      	movs	r0, r3
   11c6c:	230f      	movs	r3, #15
   11c6e:	18fc      	adds	r4, r7, r3
   11c70:	683b      	ldr	r3, [r7, #0]
   11c72:	2240      	movs	r2, #64	; 0x40
   11c74:	0019      	movs	r1, r3
   11c76:	4b07      	ldr	r3, [pc, #28]	; (11c94 <_eeprom_emulator_nvm_read_page+0x4c>)
   11c78:	4798      	blx	r3
   11c7a:	0003      	movs	r3, r0
   11c7c:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   11c7e:	230f      	movs	r3, #15
   11c80:	18fb      	adds	r3, r7, r3
   11c82:	781b      	ldrb	r3, [r3, #0]
   11c84:	2b05      	cmp	r3, #5
   11c86:	d0ea      	beq.n	11c5e <_eeprom_emulator_nvm_read_page+0x16>
}
   11c88:	46c0      	nop			; (mov r8, r8)
   11c8a:	46bd      	mov	sp, r7
   11c8c:	b005      	add	sp, #20
   11c8e:	bd90      	pop	{r4, r7, pc}
   11c90:	2000040c 	.word	0x2000040c
   11c94:	00011841 	.word	0x00011841

00011c98 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   11c98:	b580      	push	{r7, lr}
   11c9a:	b092      	sub	sp, #72	; 0x48
   11c9c:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   11c9e:	2346      	movs	r3, #70	; 0x46
   11ca0:	18fb      	adds	r3, r7, r3
   11ca2:	2200      	movs	r2, #0
   11ca4:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   11ca6:	4b32      	ldr	r3, [pc, #200]	; (11d70 <_eeprom_emulator_format_memory+0xd8>)
   11ca8:	2287      	movs	r2, #135	; 0x87
   11caa:	2100      	movs	r1, #0
   11cac:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   11cae:	4b30      	ldr	r3, [pc, #192]	; (11d70 <_eeprom_emulator_format_memory+0xd8>)
   11cb0:	2287      	movs	r2, #135	; 0x87
   11cb2:	5c9b      	ldrb	r3, [r3, r2]
   11cb4:	0018      	movs	r0, r3
   11cb6:	4b2f      	ldr	r3, [pc, #188]	; (11d74 <_eeprom_emulator_format_memory+0xdc>)
   11cb8:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   11cba:	2344      	movs	r3, #68	; 0x44
   11cbc:	18fb      	adds	r3, r7, r3
   11cbe:	2204      	movs	r2, #4
   11cc0:	801a      	strh	r2, [r3, #0]
   11cc2:	e04a      	b.n	11d5a <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   11cc4:	2344      	movs	r3, #68	; 0x44
   11cc6:	18fb      	adds	r3, r7, r3
   11cc8:	881a      	ldrh	r2, [r3, #0]
   11cca:	4b29      	ldr	r3, [pc, #164]	; (11d70 <_eeprom_emulator_format_memory+0xd8>)
   11ccc:	891b      	ldrh	r3, [r3, #8]
   11cce:	3b01      	subs	r3, #1
   11cd0:	429a      	cmp	r2, r3
   11cd2:	d03a      	beq.n	11d4a <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   11cd4:	2344      	movs	r3, #68	; 0x44
   11cd6:	18fb      	adds	r3, r7, r3
   11cd8:	881b      	ldrh	r3, [r3, #0]
   11cda:	2203      	movs	r2, #3
   11cdc:	4013      	ands	r3, r2
   11cde:	b29b      	uxth	r3, r3
   11ce0:	2b00      	cmp	r3, #0
   11ce2:	d108      	bne.n	11cf6 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   11ce4:	2344      	movs	r3, #68	; 0x44
   11ce6:	18fb      	adds	r3, r7, r3
   11ce8:	881b      	ldrh	r3, [r3, #0]
   11cea:	089b      	lsrs	r3, r3, #2
   11cec:	b29b      	uxth	r3, r3
   11cee:	b2db      	uxtb	r3, r3
   11cf0:	0018      	movs	r0, r3
   11cf2:	4b20      	ldr	r3, [pc, #128]	; (11d74 <_eeprom_emulator_format_memory+0xdc>)
   11cf4:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   11cf6:	2344      	movs	r3, #68	; 0x44
   11cf8:	18fb      	adds	r3, r7, r3
   11cfa:	881b      	ldrh	r3, [r3, #0]
   11cfc:	2203      	movs	r2, #3
   11cfe:	4013      	ands	r3, r2
   11d00:	b29b      	uxth	r3, r3
   11d02:	2b01      	cmp	r3, #1
   11d04:	d822      	bhi.n	11d4c <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   11d06:	1d3b      	adds	r3, r7, #4
   11d08:	2240      	movs	r2, #64	; 0x40
   11d0a:	21ff      	movs	r1, #255	; 0xff
   11d0c:	0018      	movs	r0, r3
   11d0e:	4b1a      	ldr	r3, [pc, #104]	; (11d78 <_eeprom_emulator_format_memory+0xe0>)
   11d10:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   11d12:	2346      	movs	r3, #70	; 0x46
   11d14:	18fb      	adds	r3, r7, r3
   11d16:	881b      	ldrh	r3, [r3, #0]
   11d18:	b2da      	uxtb	r2, r3
   11d1a:	1d3b      	adds	r3, r7, #4
   11d1c:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   11d1e:	1d3a      	adds	r2, r7, #4
   11d20:	2344      	movs	r3, #68	; 0x44
   11d22:	18fb      	adds	r3, r7, r3
   11d24:	881b      	ldrh	r3, [r3, #0]
   11d26:	0011      	movs	r1, r2
   11d28:	0018      	movs	r0, r3
   11d2a:	4b14      	ldr	r3, [pc, #80]	; (11d7c <_eeprom_emulator_format_memory+0xe4>)
   11d2c:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   11d2e:	2344      	movs	r3, #68	; 0x44
   11d30:	18fb      	adds	r3, r7, r3
   11d32:	881b      	ldrh	r3, [r3, #0]
   11d34:	0018      	movs	r0, r3
   11d36:	4b12      	ldr	r3, [pc, #72]	; (11d80 <_eeprom_emulator_format_memory+0xe8>)
   11d38:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   11d3a:	2346      	movs	r3, #70	; 0x46
   11d3c:	18fb      	adds	r3, r7, r3
   11d3e:	881a      	ldrh	r2, [r3, #0]
   11d40:	2346      	movs	r3, #70	; 0x46
   11d42:	18fb      	adds	r3, r7, r3
   11d44:	3201      	adds	r2, #1
   11d46:	801a      	strh	r2, [r3, #0]
   11d48:	e000      	b.n	11d4c <_eeprom_emulator_format_memory+0xb4>
			continue;
   11d4a:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   11d4c:	2344      	movs	r3, #68	; 0x44
   11d4e:	18fb      	adds	r3, r7, r3
   11d50:	881a      	ldrh	r2, [r3, #0]
   11d52:	2344      	movs	r3, #68	; 0x44
   11d54:	18fb      	adds	r3, r7, r3
   11d56:	3201      	adds	r2, #1
   11d58:	801a      	strh	r2, [r3, #0]
   11d5a:	4b05      	ldr	r3, [pc, #20]	; (11d70 <_eeprom_emulator_format_memory+0xd8>)
   11d5c:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   11d5e:	2244      	movs	r2, #68	; 0x44
   11d60:	18ba      	adds	r2, r7, r2
   11d62:	8812      	ldrh	r2, [r2, #0]
   11d64:	429a      	cmp	r2, r3
   11d66:	d3ad      	bcc.n	11cc4 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   11d68:	46c0      	nop			; (mov r8, r8)
   11d6a:	46bd      	mov	sp, r7
   11d6c:	b012      	add	sp, #72	; 0x48
   11d6e:	bd80      	pop	{r7, pc}
   11d70:	2000040c 	.word	0x2000040c
   11d74:	00011b65 	.word	0x00011b65
   11d78:	000178b7 	.word	0x000178b7
   11d7c:	00011bad 	.word	0x00011bad
   11d80:	00011bfd 	.word	0x00011bfd

00011d84 <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   11d84:	b580      	push	{r7, lr}
   11d86:	b082      	sub	sp, #8
   11d88:	af00      	add	r7, sp, #0
   11d8a:	0002      	movs	r2, r0
   11d8c:	1dbb      	adds	r3, r7, #6
   11d8e:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   11d90:	4b14      	ldr	r3, [pc, #80]	; (11de4 <_eeprom_emulator_is_full_row+0x60>)
   11d92:	685a      	ldr	r2, [r3, #4]
   11d94:	1dbb      	adds	r3, r7, #6
   11d96:	881b      	ldrh	r3, [r3, #0]
   11d98:	019b      	lsls	r3, r3, #6
   11d9a:	18d3      	adds	r3, r2, r3
   11d9c:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   11d9e:	4b11      	ldr	r3, [pc, #68]	; (11de4 <_eeprom_emulator_is_full_row+0x60>)
   11da0:	6859      	ldr	r1, [r3, #4]
   11da2:	1dbb      	adds	r3, r7, #6
   11da4:	881b      	ldrh	r3, [r3, #0]
   11da6:	3302      	adds	r3, #2
   11da8:	019b      	lsls	r3, r3, #6
   11daa:	18cb      	adds	r3, r1, r3
   11dac:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   11dae:	429a      	cmp	r2, r3
   11db0:	d011      	beq.n	11dd6 <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   11db2:	4b0c      	ldr	r3, [pc, #48]	; (11de4 <_eeprom_emulator_is_full_row+0x60>)
   11db4:	685a      	ldr	r2, [r3, #4]
   11db6:	1dbb      	adds	r3, r7, #6
   11db8:	881b      	ldrh	r3, [r3, #0]
   11dba:	3301      	adds	r3, #1
   11dbc:	019b      	lsls	r3, r3, #6
   11dbe:	18d3      	adds	r3, r2, r3
   11dc0:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   11dc2:	4b08      	ldr	r3, [pc, #32]	; (11de4 <_eeprom_emulator_is_full_row+0x60>)
   11dc4:	6859      	ldr	r1, [r3, #4]
   11dc6:	1dbb      	adds	r3, r7, #6
   11dc8:	881b      	ldrh	r3, [r3, #0]
   11dca:	3302      	adds	r3, #2
   11dcc:	019b      	lsls	r3, r3, #6
   11dce:	18cb      	adds	r3, r1, r3
   11dd0:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   11dd2:	429a      	cmp	r2, r3
   11dd4:	d101      	bne.n	11dda <_eeprom_emulator_is_full_row+0x56>
		return true;
   11dd6:	2301      	movs	r3, #1
   11dd8:	e000      	b.n	11ddc <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   11dda:	2300      	movs	r3, #0
	}
}
   11ddc:	0018      	movs	r0, r3
   11dde:	46bd      	mov	sp, r7
   11de0:	b002      	add	sp, #8
   11de2:	bd80      	pop	{r7, pc}
   11de4:	2000040c 	.word	0x2000040c

00011de8 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   11de8:	b580      	push	{r7, lr}
   11dea:	b082      	sub	sp, #8
   11dec:	af00      	add	r7, sp, #0
   11dee:	0002      	movs	r2, r0
   11df0:	1dbb      	adds	r3, r7, #6
   11df2:	801a      	strh	r2, [r3, #0]
   11df4:	1d3b      	adds	r3, r7, #4
   11df6:	1c0a      	adds	r2, r1, #0
   11df8:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   11dfa:	1dbb      	adds	r3, r7, #6
   11dfc:	881b      	ldrh	r3, [r3, #0]
   11dfe:	0018      	movs	r0, r3
   11e00:	4b0c      	ldr	r3, [pc, #48]	; (11e34 <_eeprom_emulator_erase_invalid_page+0x4c>)
   11e02:	4798      	blx	r3
   11e04:	1e03      	subs	r3, r0, #0
   11e06:	d008      	beq.n	11e1a <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   11e08:	1dbb      	adds	r3, r7, #6
   11e0a:	881b      	ldrh	r3, [r3, #0]
   11e0c:	089b      	lsrs	r3, r3, #2
   11e0e:	b29b      	uxth	r3, r3
   11e10:	b2db      	uxtb	r3, r3
   11e12:	0018      	movs	r0, r3
   11e14:	4b08      	ldr	r3, [pc, #32]	; (11e38 <_eeprom_emulator_erase_invalid_page+0x50>)
   11e16:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   11e18:	e007      	b.n	11e2a <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   11e1a:	1d3b      	adds	r3, r7, #4
   11e1c:	881b      	ldrh	r3, [r3, #0]
   11e1e:	089b      	lsrs	r3, r3, #2
   11e20:	b29b      	uxth	r3, r3
   11e22:	b2db      	uxtb	r3, r3
   11e24:	0018      	movs	r0, r3
   11e26:	4b04      	ldr	r3, [pc, #16]	; (11e38 <_eeprom_emulator_erase_invalid_page+0x50>)
   11e28:	4798      	blx	r3
}
   11e2a:	46c0      	nop			; (mov r8, r8)
   11e2c:	46bd      	mov	sp, r7
   11e2e:	b002      	add	sp, #8
   11e30:	bd80      	pop	{r7, pc}
   11e32:	46c0      	nop			; (mov r8, r8)
   11e34:	00011d85 	.word	0x00011d85
   11e38:	00011b65 	.word	0x00011b65

00011e3c <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   11e3c:	b580      	push	{r7, lr}
   11e3e:	b082      	sub	sp, #8
   11e40:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   11e42:	1dbb      	adds	r3, r7, #6
   11e44:	2200      	movs	r2, #0
   11e46:	801a      	strh	r2, [r3, #0]
   11e48:	1d3b      	adds	r3, r7, #4
   11e4a:	2200      	movs	r2, #0
   11e4c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   11e4e:	1dbb      	adds	r3, r7, #6
   11e50:	2200      	movs	r2, #0
   11e52:	801a      	strh	r2, [r3, #0]
   11e54:	e04a      	b.n	11eec <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   11e56:	4b2a      	ldr	r3, [pc, #168]	; (11f00 <_eeprom_emulator_check_logical_page+0xc4>)
   11e58:	685a      	ldr	r2, [r3, #4]
   11e5a:	1dbb      	adds	r3, r7, #6
   11e5c:	881b      	ldrh	r3, [r3, #0]
   11e5e:	019b      	lsls	r3, r3, #6
   11e60:	18d3      	adds	r3, r2, r3
   11e62:	781a      	ldrb	r2, [r3, #0]
   11e64:	1cbb      	adds	r3, r7, #2
   11e66:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   11e68:	1cbb      	adds	r3, r7, #2
   11e6a:	881b      	ldrh	r3, [r3, #0]
   11e6c:	2bff      	cmp	r3, #255	; 0xff
   11e6e:	d037      	beq.n	11ee0 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   11e70:	1d3b      	adds	r3, r7, #4
   11e72:	1dba      	adds	r2, r7, #6
   11e74:	8812      	ldrh	r2, [r2, #0]
   11e76:	3204      	adds	r2, #4
   11e78:	801a      	strh	r2, [r3, #0]
   11e7a:	e02a      	b.n	11ed2 <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   11e7c:	1d3b      	adds	r3, r7, #4
   11e7e:	881a      	ldrh	r2, [r3, #0]
   11e80:	4b1f      	ldr	r3, [pc, #124]	; (11f00 <_eeprom_emulator_check_logical_page+0xc4>)
   11e82:	891b      	ldrh	r3, [r3, #8]
   11e84:	3b01      	subs	r3, #1
   11e86:	429a      	cmp	r2, r3
   11e88:	d01b      	beq.n	11ec2 <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   11e8a:	4b1d      	ldr	r3, [pc, #116]	; (11f00 <_eeprom_emulator_check_logical_page+0xc4>)
   11e8c:	685a      	ldr	r2, [r3, #4]
   11e8e:	1d3b      	adds	r3, r7, #4
   11e90:	881b      	ldrh	r3, [r3, #0]
   11e92:	019b      	lsls	r3, r3, #6
   11e94:	18d3      	adds	r3, r2, r3
   11e96:	781a      	ldrb	r2, [r3, #0]
   11e98:	003b      	movs	r3, r7
   11e9a:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   11e9c:	003b      	movs	r3, r7
   11e9e:	881b      	ldrh	r3, [r3, #0]
   11ea0:	2bff      	cmp	r3, #255	; 0xff
   11ea2:	d010      	beq.n	11ec6 <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   11ea4:	1cba      	adds	r2, r7, #2
   11ea6:	003b      	movs	r3, r7
   11ea8:	8812      	ldrh	r2, [r2, #0]
   11eaa:	881b      	ldrh	r3, [r3, #0]
   11eac:	429a      	cmp	r2, r3
   11eae:	d10b      	bne.n	11ec8 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   11eb0:	1d3b      	adds	r3, r7, #4
   11eb2:	881a      	ldrh	r2, [r3, #0]
   11eb4:	1dbb      	adds	r3, r7, #6
   11eb6:	881b      	ldrh	r3, [r3, #0]
   11eb8:	0011      	movs	r1, r2
   11eba:	0018      	movs	r0, r3
   11ebc:	4b11      	ldr	r3, [pc, #68]	; (11f04 <_eeprom_emulator_check_logical_page+0xc8>)
   11ebe:	4798      	blx	r3
   11ec0:	e002      	b.n	11ec8 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   11ec2:	46c0      	nop			; (mov r8, r8)
   11ec4:	e000      	b.n	11ec8 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   11ec6:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   11ec8:	1d3b      	adds	r3, r7, #4
   11eca:	1d3a      	adds	r2, r7, #4
   11ecc:	8812      	ldrh	r2, [r2, #0]
   11ece:	3204      	adds	r2, #4
   11ed0:	801a      	strh	r2, [r3, #0]
   11ed2:	4b0b      	ldr	r3, [pc, #44]	; (11f00 <_eeprom_emulator_check_logical_page+0xc4>)
   11ed4:	891b      	ldrh	r3, [r3, #8]
   11ed6:	1d3a      	adds	r2, r7, #4
   11ed8:	8812      	ldrh	r2, [r2, #0]
   11eda:	429a      	cmp	r2, r3
   11edc:	d3ce      	bcc.n	11e7c <_eeprom_emulator_check_logical_page+0x40>
   11ede:	e000      	b.n	11ee2 <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   11ee0:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   11ee2:	1dbb      	adds	r3, r7, #6
   11ee4:	1dba      	adds	r2, r7, #6
   11ee6:	8812      	ldrh	r2, [r2, #0]
   11ee8:	3204      	adds	r2, #4
   11eea:	801a      	strh	r2, [r3, #0]
   11eec:	4b04      	ldr	r3, [pc, #16]	; (11f00 <_eeprom_emulator_check_logical_page+0xc4>)
   11eee:	891b      	ldrh	r3, [r3, #8]
   11ef0:	1dba      	adds	r2, r7, #6
   11ef2:	8812      	ldrh	r2, [r2, #0]
   11ef4:	429a      	cmp	r2, r3
   11ef6:	d3ae      	bcc.n	11e56 <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   11ef8:	46c0      	nop			; (mov r8, r8)
   11efa:	46bd      	mov	sp, r7
   11efc:	b002      	add	sp, #8
   11efe:	bd80      	pop	{r7, pc}
   11f00:	2000040c 	.word	0x2000040c
   11f04:	00011de9 	.word	0x00011de9

00011f08 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   11f08:	b580      	push	{r7, lr}
   11f0a:	b084      	sub	sp, #16
   11f0c:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   11f0e:	4b51      	ldr	r3, [pc, #324]	; (12054 <_eeprom_emulator_update_page_mapping+0x14c>)
   11f10:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   11f12:	230e      	movs	r3, #14
   11f14:	18fb      	adds	r3, r7, r3
   11f16:	2200      	movs	r2, #0
   11f18:	801a      	strh	r2, [r3, #0]
   11f1a:	e033      	b.n	11f84 <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   11f1c:	230e      	movs	r3, #14
   11f1e:	18fb      	adds	r3, r7, r3
   11f20:	881a      	ldrh	r2, [r3, #0]
   11f22:	4b4d      	ldr	r3, [pc, #308]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11f24:	891b      	ldrh	r3, [r3, #8]
   11f26:	3b01      	subs	r3, #1
   11f28:	429a      	cmp	r2, r3
   11f2a:	d023      	beq.n	11f74 <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   11f2c:	4b4a      	ldr	r3, [pc, #296]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11f2e:	685a      	ldr	r2, [r3, #4]
   11f30:	230e      	movs	r3, #14
   11f32:	18fb      	adds	r3, r7, r3
   11f34:	881b      	ldrh	r3, [r3, #0]
   11f36:	019b      	lsls	r3, r3, #6
   11f38:	18d3      	adds	r3, r2, r3
   11f3a:	781a      	ldrb	r2, [r3, #0]
   11f3c:	2308      	movs	r3, #8
   11f3e:	18fb      	adds	r3, r7, r3
   11f40:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   11f42:	2308      	movs	r3, #8
   11f44:	18fb      	adds	r3, r7, r3
   11f46:	881b      	ldrh	r3, [r3, #0]
   11f48:	2bff      	cmp	r3, #255	; 0xff
   11f4a:	d014      	beq.n	11f76 <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   11f4c:	4b42      	ldr	r3, [pc, #264]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11f4e:	7a9b      	ldrb	r3, [r3, #10]
   11f50:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   11f52:	2208      	movs	r2, #8
   11f54:	18ba      	adds	r2, r7, r2
   11f56:	8812      	ldrh	r2, [r2, #0]
   11f58:	429a      	cmp	r2, r3
   11f5a:	d20c      	bcs.n	11f76 <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   11f5c:	2308      	movs	r3, #8
   11f5e:	18fb      	adds	r3, r7, r3
   11f60:	881b      	ldrh	r3, [r3, #0]
   11f62:	220e      	movs	r2, #14
   11f64:	18ba      	adds	r2, r7, r2
   11f66:	8812      	ldrh	r2, [r2, #0]
   11f68:	b2d1      	uxtb	r1, r2
   11f6a:	4a3b      	ldr	r2, [pc, #236]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11f6c:	18d3      	adds	r3, r2, r3
   11f6e:	1c0a      	adds	r2, r1, #0
   11f70:	72da      	strb	r2, [r3, #11]
   11f72:	e000      	b.n	11f76 <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   11f74:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   11f76:	230e      	movs	r3, #14
   11f78:	18fb      	adds	r3, r7, r3
   11f7a:	881a      	ldrh	r2, [r3, #0]
   11f7c:	230e      	movs	r3, #14
   11f7e:	18fb      	adds	r3, r7, r3
   11f80:	3201      	adds	r2, #1
   11f82:	801a      	strh	r2, [r3, #0]
   11f84:	4b34      	ldr	r3, [pc, #208]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11f86:	891b      	ldrh	r3, [r3, #8]
   11f88:	220e      	movs	r2, #14
   11f8a:	18ba      	adds	r2, r7, r2
   11f8c:	8812      	ldrh	r2, [r2, #0]
   11f8e:	429a      	cmp	r2, r3
   11f90:	d3c4      	bcc.n	11f1c <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   11f92:	4b31      	ldr	r3, [pc, #196]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11f94:	2287      	movs	r2, #135	; 0x87
   11f96:	213f      	movs	r1, #63	; 0x3f
   11f98:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   11f9a:	230c      	movs	r3, #12
   11f9c:	18fb      	adds	r3, r7, r3
   11f9e:	2200      	movs	r2, #0
   11fa0:	801a      	strh	r2, [r3, #0]
   11fa2:	e04a      	b.n	1203a <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   11fa4:	230b      	movs	r3, #11
   11fa6:	18fb      	adds	r3, r7, r3
   11fa8:	2201      	movs	r2, #1
   11faa:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   11fac:	230a      	movs	r3, #10
   11fae:	18fb      	adds	r3, r7, r3
   11fb0:	2200      	movs	r2, #0
   11fb2:	701a      	strb	r2, [r3, #0]
   11fb4:	e028      	b.n	12008 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   11fb6:	230c      	movs	r3, #12
   11fb8:	18fb      	adds	r3, r7, r3
   11fba:	881b      	ldrh	r3, [r3, #0]
   11fbc:	009b      	lsls	r3, r3, #2
   11fbe:	b299      	uxth	r1, r3
   11fc0:	230a      	movs	r3, #10
   11fc2:	18fb      	adds	r3, r7, r3
   11fc4:	781b      	ldrb	r3, [r3, #0]
   11fc6:	b29a      	uxth	r2, r3
   11fc8:	1dbb      	adds	r3, r7, #6
   11fca:	188a      	adds	r2, r1, r2
   11fcc:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   11fce:	1dbb      	adds	r3, r7, #6
   11fd0:	881a      	ldrh	r2, [r3, #0]
   11fd2:	4b21      	ldr	r3, [pc, #132]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11fd4:	891b      	ldrh	r3, [r3, #8]
   11fd6:	3b01      	subs	r3, #1
   11fd8:	429a      	cmp	r2, r3
   11fda:	d00d      	beq.n	11ff8 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   11fdc:	4b1e      	ldr	r3, [pc, #120]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   11fde:	685a      	ldr	r2, [r3, #4]
   11fe0:	1dbb      	adds	r3, r7, #6
   11fe2:	881b      	ldrh	r3, [r3, #0]
   11fe4:	019b      	lsls	r3, r3, #6
   11fe6:	18d3      	adds	r3, r2, r3
   11fe8:	781b      	ldrb	r3, [r3, #0]
   11fea:	2bff      	cmp	r3, #255	; 0xff
   11fec:	d005      	beq.n	11ffa <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   11fee:	230b      	movs	r3, #11
   11ff0:	18fb      	adds	r3, r7, r3
   11ff2:	2200      	movs	r2, #0
   11ff4:	701a      	strb	r2, [r3, #0]
   11ff6:	e000      	b.n	11ffa <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   11ff8:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   11ffa:	230a      	movs	r3, #10
   11ffc:	18fb      	adds	r3, r7, r3
   11ffe:	781a      	ldrb	r2, [r3, #0]
   12000:	230a      	movs	r3, #10
   12002:	18fb      	adds	r3, r7, r3
   12004:	3201      	adds	r2, #1
   12006:	701a      	strb	r2, [r3, #0]
   12008:	230a      	movs	r3, #10
   1200a:	18fb      	adds	r3, r7, r3
   1200c:	781b      	ldrb	r3, [r3, #0]
   1200e:	2b03      	cmp	r3, #3
   12010:	d9d1      	bls.n	11fb6 <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   12012:	230b      	movs	r3, #11
   12014:	18fb      	adds	r3, r7, r3
   12016:	781b      	ldrb	r3, [r3, #0]
   12018:	2b00      	cmp	r3, #0
   1201a:	d007      	beq.n	1202c <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   1201c:	230c      	movs	r3, #12
   1201e:	18fb      	adds	r3, r7, r3
   12020:	881b      	ldrh	r3, [r3, #0]
   12022:	b2d9      	uxtb	r1, r3
   12024:	4b0c      	ldr	r3, [pc, #48]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   12026:	2287      	movs	r2, #135	; 0x87
   12028:	5499      	strb	r1, [r3, r2]
			break;
   1202a:	e00f      	b.n	1204c <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   1202c:	230c      	movs	r3, #12
   1202e:	18fb      	adds	r3, r7, r3
   12030:	881a      	ldrh	r2, [r3, #0]
   12032:	230c      	movs	r3, #12
   12034:	18fb      	adds	r3, r7, r3
   12036:	3201      	adds	r2, #1
   12038:	801a      	strh	r2, [r3, #0]
   1203a:	4b07      	ldr	r3, [pc, #28]	; (12058 <_eeprom_emulator_update_page_mapping+0x150>)
   1203c:	891b      	ldrh	r3, [r3, #8]
   1203e:	089b      	lsrs	r3, r3, #2
   12040:	b29b      	uxth	r3, r3
   12042:	220c      	movs	r2, #12
   12044:	18ba      	adds	r2, r7, r2
   12046:	8812      	ldrh	r2, [r2, #0]
   12048:	429a      	cmp	r2, r3
   1204a:	d3ab      	bcc.n	11fa4 <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   1204c:	46c0      	nop			; (mov r8, r8)
   1204e:	46bd      	mov	sp, r7
   12050:	b004      	add	sp, #16
   12052:	bd80      	pop	{r7, pc}
   12054:	00011e3d 	.word	0x00011e3d
   12058:	2000040c 	.word	0x2000040c

0001205c <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   1205c:	b580      	push	{r7, lr}
   1205e:	b084      	sub	sp, #16
   12060:	af00      	add	r7, sp, #0
   12062:	0002      	movs	r2, r0
   12064:	6039      	str	r1, [r7, #0]
   12066:	1dfb      	adds	r3, r7, #7
   12068:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   1206a:	230e      	movs	r3, #14
   1206c:	18fb      	adds	r3, r7, r3
   1206e:	1dfa      	adds	r2, r7, #7
   12070:	7812      	ldrb	r2, [r2, #0]
   12072:	0892      	lsrs	r2, r2, #2
   12074:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   12076:	230d      	movs	r3, #13
   12078:	18fb      	adds	r3, r7, r3
   1207a:	1dfa      	adds	r2, r7, #7
   1207c:	7812      	ldrb	r2, [r2, #0]
   1207e:	2103      	movs	r1, #3
   12080:	400a      	ands	r2, r1
   12082:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   12084:	230f      	movs	r3, #15
   12086:	18fb      	adds	r3, r7, r3
   12088:	220d      	movs	r2, #13
   1208a:	18ba      	adds	r2, r7, r2
   1208c:	7812      	ldrb	r2, [r2, #0]
   1208e:	701a      	strb	r2, [r3, #0]
   12090:	e023      	b.n	120da <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   12092:	230e      	movs	r3, #14
   12094:	18fb      	adds	r3, r7, r3
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	009b      	lsls	r3, r3, #2
   1209a:	b2d9      	uxtb	r1, r3
   1209c:	230c      	movs	r3, #12
   1209e:	18fb      	adds	r3, r7, r3
   120a0:	220f      	movs	r2, #15
   120a2:	18ba      	adds	r2, r7, r2
   120a4:	7812      	ldrb	r2, [r2, #0]
   120a6:	188a      	adds	r2, r1, r2
   120a8:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   120aa:	4b11      	ldr	r3, [pc, #68]	; (120f0 <_eeprom_emulator_is_page_free_on_row+0x94>)
   120ac:	685a      	ldr	r2, [r3, #4]
   120ae:	230c      	movs	r3, #12
   120b0:	18fb      	adds	r3, r7, r3
   120b2:	781b      	ldrb	r3, [r3, #0]
   120b4:	019b      	lsls	r3, r3, #6
   120b6:	18d3      	adds	r3, r2, r3
   120b8:	781b      	ldrb	r3, [r3, #0]
   120ba:	2bff      	cmp	r3, #255	; 0xff
   120bc:	d106      	bne.n	120cc <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   120be:	683b      	ldr	r3, [r7, #0]
   120c0:	220c      	movs	r2, #12
   120c2:	18ba      	adds	r2, r7, r2
   120c4:	7812      	ldrb	r2, [r2, #0]
   120c6:	701a      	strb	r2, [r3, #0]
			return true;
   120c8:	2301      	movs	r3, #1
   120ca:	e00c      	b.n	120e6 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   120cc:	230f      	movs	r3, #15
   120ce:	18fb      	adds	r3, r7, r3
   120d0:	781a      	ldrb	r2, [r3, #0]
   120d2:	230f      	movs	r3, #15
   120d4:	18fb      	adds	r3, r7, r3
   120d6:	3201      	adds	r2, #1
   120d8:	701a      	strb	r2, [r3, #0]
   120da:	230f      	movs	r3, #15
   120dc:	18fb      	adds	r3, r7, r3
   120de:	781b      	ldrb	r3, [r3, #0]
   120e0:	2b03      	cmp	r3, #3
   120e2:	d9d6      	bls.n	12092 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   120e4:	2300      	movs	r3, #0
}
   120e6:	0018      	movs	r0, r3
   120e8:	46bd      	mov	sp, r7
   120ea:	b004      	add	sp, #16
   120ec:	bd80      	pop	{r7, pc}
   120ee:	46c0      	nop			; (mov r8, r8)
   120f0:	2000040c 	.word	0x2000040c

000120f4 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   120f4:	b580      	push	{r7, lr}
   120f6:	b086      	sub	sp, #24
   120f8:	af00      	add	r7, sp, #0
   120fa:	603a      	str	r2, [r7, #0]
   120fc:	1dfb      	adds	r3, r7, #7
   120fe:	1c02      	adds	r2, r0, #0
   12100:	701a      	strb	r2, [r3, #0]
   12102:	1dbb      	adds	r3, r7, #6
   12104:	1c0a      	adds	r2, r1, #0
   12106:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   12108:	2314      	movs	r3, #20
   1210a:	18fb      	adds	r3, r7, r3
   1210c:	2200      	movs	r2, #0
   1210e:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   12110:	4b69      	ldr	r3, [pc, #420]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12112:	685b      	ldr	r3, [r3, #4]
   12114:	1dfa      	adds	r2, r7, #7
   12116:	7812      	ldrb	r2, [r2, #0]
   12118:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   1211a:	189b      	adds	r3, r3, r2
   1211c:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   1211e:	693b      	ldr	r3, [r7, #16]
   12120:	781a      	ldrb	r2, [r3, #0]
   12122:	2308      	movs	r3, #8
   12124:	18fb      	adds	r3, r7, r3
   12126:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   12128:	1dfb      	adds	r3, r7, #7
   1212a:	781b      	ldrb	r3, [r3, #0]
   1212c:	009b      	lsls	r3, r3, #2
   1212e:	b2da      	uxtb	r2, r3
   12130:	2308      	movs	r3, #8
   12132:	18fb      	adds	r3, r7, r3
   12134:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   12136:	693b      	ldr	r3, [r7, #16]
   12138:	3340      	adds	r3, #64	; 0x40
   1213a:	781a      	ldrb	r2, [r3, #0]
   1213c:	2308      	movs	r3, #8
   1213e:	18fb      	adds	r3, r7, r3
   12140:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   12142:	1dfb      	adds	r3, r7, #7
   12144:	781b      	ldrb	r3, [r3, #0]
   12146:	009b      	lsls	r3, r3, #2
   12148:	b2db      	uxtb	r3, r3
   1214a:	3301      	adds	r3, #1
   1214c:	b2da      	uxtb	r2, r3
   1214e:	2308      	movs	r3, #8
   12150:	18fb      	adds	r3, r7, r3
   12152:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   12154:	2317      	movs	r3, #23
   12156:	18fb      	adds	r3, r7, r3
   12158:	2200      	movs	r2, #0
   1215a:	701a      	strb	r2, [r3, #0]
   1215c:	e03a      	b.n	121d4 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1215e:	2316      	movs	r3, #22
   12160:	18fb      	adds	r3, r7, r3
   12162:	2202      	movs	r2, #2
   12164:	701a      	strb	r2, [r3, #0]
   12166:	e029      	b.n	121bc <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   12168:	2317      	movs	r3, #23
   1216a:	18fb      	adds	r3, r7, r3
   1216c:	781a      	ldrb	r2, [r3, #0]
   1216e:	2308      	movs	r3, #8
   12170:	18fb      	adds	r3, r7, r3
   12172:	0052      	lsls	r2, r2, #1
   12174:	5cd2      	ldrb	r2, [r2, r3]
   12176:	2316      	movs	r3, #22
   12178:	18fb      	adds	r3, r7, r3
   1217a:	781b      	ldrb	r3, [r3, #0]
   1217c:	019b      	lsls	r3, r3, #6
   1217e:	6939      	ldr	r1, [r7, #16]
   12180:	18cb      	adds	r3, r1, r3
   12182:	781b      	ldrb	r3, [r3, #0]
   12184:	429a      	cmp	r2, r3
   12186:	d112      	bne.n	121ae <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   12188:	2317      	movs	r3, #23
   1218a:	18fb      	adds	r3, r7, r3
   1218c:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   1218e:	1dfa      	adds	r2, r7, #7
   12190:	7812      	ldrb	r2, [r2, #0]
   12192:	0092      	lsls	r2, r2, #2
   12194:	b2d1      	uxtb	r1, r2
   12196:	2216      	movs	r2, #22
   12198:	18ba      	adds	r2, r7, r2
   1219a:	7812      	ldrb	r2, [r2, #0]
   1219c:	188a      	adds	r2, r1, r2
   1219e:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   121a0:	2208      	movs	r2, #8
   121a2:	18ba      	adds	r2, r7, r2
   121a4:	005b      	lsls	r3, r3, #1
   121a6:	18d3      	adds	r3, r2, r3
   121a8:	3301      	adds	r3, #1
   121aa:	1c0a      	adds	r2, r1, #0
   121ac:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   121ae:	2316      	movs	r3, #22
   121b0:	18fb      	adds	r3, r7, r3
   121b2:	781a      	ldrb	r2, [r3, #0]
   121b4:	2316      	movs	r3, #22
   121b6:	18fb      	adds	r3, r7, r3
   121b8:	3201      	adds	r2, #1
   121ba:	701a      	strb	r2, [r3, #0]
   121bc:	2316      	movs	r3, #22
   121be:	18fb      	adds	r3, r7, r3
   121c0:	781b      	ldrb	r3, [r3, #0]
   121c2:	2b03      	cmp	r3, #3
   121c4:	d9d0      	bls.n	12168 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   121c6:	2317      	movs	r3, #23
   121c8:	18fb      	adds	r3, r7, r3
   121ca:	781a      	ldrb	r2, [r3, #0]
   121cc:	2317      	movs	r3, #23
   121ce:	18fb      	adds	r3, r7, r3
   121d0:	3201      	adds	r2, #1
   121d2:	701a      	strb	r2, [r3, #0]
   121d4:	2317      	movs	r3, #23
   121d6:	18fb      	adds	r3, r7, r3
   121d8:	781b      	ldrb	r3, [r3, #0]
   121da:	2b01      	cmp	r3, #1
   121dc:	d9bf      	bls.n	1215e <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   121de:	2315      	movs	r3, #21
   121e0:	18fb      	adds	r3, r7, r3
   121e2:	2200      	movs	r2, #0
   121e4:	701a      	strb	r2, [r3, #0]
   121e6:	e051      	b.n	1228c <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   121e8:	4b33      	ldr	r3, [pc, #204]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   121ea:	2287      	movs	r2, #135	; 0x87
   121ec:	5c9b      	ldrb	r3, [r3, r2]
   121ee:	009a      	lsls	r2, r3, #2
   121f0:	2315      	movs	r3, #21
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	781b      	ldrb	r3, [r3, #0]
   121f6:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   121f8:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   121fa:	4b30      	ldr	r3, [pc, #192]	; (122bc <_eeprom_emulator_move_data_to_spare+0x1c8>)
   121fc:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   121fe:	2315      	movs	r3, #21
   12200:	18fb      	adds	r3, r7, r3
   12202:	781a      	ldrb	r2, [r3, #0]
   12204:	2308      	movs	r3, #8
   12206:	18fb      	adds	r3, r7, r3
   12208:	0052      	lsls	r2, r2, #1
   1220a:	5cd3      	ldrb	r3, [r2, r3]
   1220c:	1dba      	adds	r2, r7, #6
   1220e:	7812      	ldrb	r2, [r2, #0]
   12210:	429a      	cmp	r2, r3
   12212:	d10d      	bne.n	12230 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   12214:	4b28      	ldr	r3, [pc, #160]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12216:	1dba      	adds	r2, r7, #6
   12218:	2188      	movs	r1, #136	; 0x88
   1221a:	7812      	ldrb	r2, [r2, #0]
   1221c:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   1221e:	4b26      	ldr	r3, [pc, #152]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12220:	228c      	movs	r2, #140	; 0x8c
   12222:	6839      	ldr	r1, [r7, #0]
   12224:	189b      	adds	r3, r3, r2
   12226:	223c      	movs	r2, #60	; 0x3c
   12228:	0018      	movs	r0, r3
   1222a:	4b25      	ldr	r3, [pc, #148]	; (122c0 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   1222c:	4798      	blx	r3
   1222e:	e00e      	b.n	1224e <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   12230:	2315      	movs	r3, #21
   12232:	18fb      	adds	r3, r7, r3
   12234:	781b      	ldrb	r3, [r3, #0]
   12236:	2208      	movs	r2, #8
   12238:	18ba      	adds	r2, r7, r2
   1223a:	005b      	lsls	r3, r3, #1
   1223c:	18d3      	adds	r3, r2, r3
   1223e:	3301      	adds	r3, #1
   12240:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   12242:	b29b      	uxth	r3, r3
   12244:	4a1f      	ldr	r2, [pc, #124]	; (122c4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   12246:	0011      	movs	r1, r2
   12248:	0018      	movs	r0, r3
   1224a:	4b1f      	ldr	r3, [pc, #124]	; (122c8 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   1224c:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   1224e:	68fb      	ldr	r3, [r7, #12]
   12250:	b29b      	uxth	r3, r3
   12252:	4a1c      	ldr	r2, [pc, #112]	; (122c4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   12254:	0011      	movs	r1, r2
   12256:	0018      	movs	r0, r3
   12258:	4b1c      	ldr	r3, [pc, #112]	; (122cc <_eeprom_emulator_move_data_to_spare+0x1d8>)
   1225a:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   1225c:	2315      	movs	r3, #21
   1225e:	18fb      	adds	r3, r7, r3
   12260:	781a      	ldrb	r2, [r3, #0]
   12262:	2308      	movs	r3, #8
   12264:	18fb      	adds	r3, r7, r3
   12266:	0052      	lsls	r2, r2, #1
   12268:	5cd3      	ldrb	r3, [r2, r3]
   1226a:	0019      	movs	r1, r3
   1226c:	68fb      	ldr	r3, [r7, #12]
   1226e:	b2da      	uxtb	r2, r3
   12270:	4b11      	ldr	r3, [pc, #68]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12272:	185b      	adds	r3, r3, r1
   12274:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   12276:	4b10      	ldr	r3, [pc, #64]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12278:	22c8      	movs	r2, #200	; 0xc8
   1227a:	2101      	movs	r1, #1
   1227c:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   1227e:	2315      	movs	r3, #21
   12280:	18fb      	adds	r3, r7, r3
   12282:	781a      	ldrb	r2, [r3, #0]
   12284:	2315      	movs	r3, #21
   12286:	18fb      	adds	r3, r7, r3
   12288:	3201      	adds	r2, #1
   1228a:	701a      	strb	r2, [r3, #0]
   1228c:	2315      	movs	r3, #21
   1228e:	18fb      	adds	r3, r7, r3
   12290:	781b      	ldrb	r3, [r3, #0]
   12292:	2b01      	cmp	r3, #1
   12294:	d9a8      	bls.n	121e8 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   12296:	1dfb      	adds	r3, r7, #7
   12298:	781b      	ldrb	r3, [r3, #0]
   1229a:	0018      	movs	r0, r3
   1229c:	4b0c      	ldr	r3, [pc, #48]	; (122d0 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   1229e:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   122a0:	4b05      	ldr	r3, [pc, #20]	; (122b8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   122a2:	1dfa      	adds	r2, r7, #7
   122a4:	2187      	movs	r1, #135	; 0x87
   122a6:	7812      	ldrb	r2, [r2, #0]
   122a8:	545a      	strb	r2, [r3, r1]

	return error_code;
   122aa:	2314      	movs	r3, #20
   122ac:	18fb      	adds	r3, r7, r3
   122ae:	781b      	ldrb	r3, [r3, #0]
}
   122b0:	0018      	movs	r0, r3
   122b2:	46bd      	mov	sp, r7
   122b4:	b006      	add	sp, #24
   122b6:	bd80      	pop	{r7, pc}
   122b8:	2000040c 	.word	0x2000040c
   122bc:	000126f1 	.word	0x000126f1
   122c0:	00017881 	.word	0x00017881
   122c4:	20000494 	.word	0x20000494
   122c8:	00011c49 	.word	0x00011c49
   122cc:	00011bad 	.word	0x00011bad
   122d0:	00011b65 	.word	0x00011b65

000122d4 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   122d4:	b590      	push	{r4, r7, lr}
   122d6:	b095      	sub	sp, #84	; 0x54
   122d8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   122da:	2340      	movs	r3, #64	; 0x40
   122dc:	18fb      	adds	r3, r7, r3
   122de:	4a29      	ldr	r2, [pc, #164]	; (12384 <_eeprom_emulator_create_master_page+0xb0>)
   122e0:	ca13      	ldmia	r2!, {r0, r1, r4}
   122e2:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   122e4:	003b      	movs	r3, r7
   122e6:	2240      	movs	r2, #64	; 0x40
   122e8:	21ff      	movs	r1, #255	; 0xff
   122ea:	0018      	movs	r0, r3
   122ec:	4b26      	ldr	r3, [pc, #152]	; (12388 <_eeprom_emulator_create_master_page+0xb4>)
   122ee:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   122f0:	234f      	movs	r3, #79	; 0x4f
   122f2:	18fb      	adds	r3, r7, r3
   122f4:	2200      	movs	r2, #0
   122f6:	701a      	strb	r2, [r3, #0]
   122f8:	e013      	b.n	12322 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   122fa:	234f      	movs	r3, #79	; 0x4f
   122fc:	18fb      	adds	r3, r7, r3
   122fe:	781a      	ldrb	r2, [r3, #0]
   12300:	234f      	movs	r3, #79	; 0x4f
   12302:	18fb      	adds	r3, r7, r3
   12304:	7819      	ldrb	r1, [r3, #0]
   12306:	2340      	movs	r3, #64	; 0x40
   12308:	18fb      	adds	r3, r7, r3
   1230a:	0089      	lsls	r1, r1, #2
   1230c:	58c9      	ldr	r1, [r1, r3]
   1230e:	003b      	movs	r3, r7
   12310:	0092      	lsls	r2, r2, #2
   12312:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   12314:	234f      	movs	r3, #79	; 0x4f
   12316:	18fb      	adds	r3, r7, r3
   12318:	781a      	ldrb	r2, [r3, #0]
   1231a:	234f      	movs	r3, #79	; 0x4f
   1231c:	18fb      	adds	r3, r7, r3
   1231e:	3201      	adds	r2, #1
   12320:	701a      	strb	r2, [r3, #0]
   12322:	234f      	movs	r3, #79	; 0x4f
   12324:	18fb      	adds	r3, r7, r3
   12326:	781b      	ldrb	r3, [r3, #0]
   12328:	2b02      	cmp	r3, #2
   1232a:	d9e6      	bls.n	122fa <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   1232c:	003b      	movs	r3, r7
   1232e:	2201      	movs	r2, #1
   12330:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   12332:	003b      	movs	r3, r7
   12334:	2201      	movs	r2, #1
   12336:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   12338:	003b      	movs	r3, r7
   1233a:	2200      	movs	r2, #0
   1233c:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   1233e:	003b      	movs	r3, r7
   12340:	2200      	movs	r2, #0
   12342:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   12344:	4b11      	ldr	r3, [pc, #68]	; (1238c <_eeprom_emulator_create_master_page+0xb8>)
   12346:	891b      	ldrh	r3, [r3, #8]
   12348:	3b01      	subs	r3, #1
   1234a:	2b00      	cmp	r3, #0
   1234c:	da00      	bge.n	12350 <_eeprom_emulator_create_master_page+0x7c>
   1234e:	3303      	adds	r3, #3
   12350:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   12352:	b2db      	uxtb	r3, r3
   12354:	0018      	movs	r0, r3
   12356:	4b0e      	ldr	r3, [pc, #56]	; (12390 <_eeprom_emulator_create_master_page+0xbc>)
   12358:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   1235a:	4b0c      	ldr	r3, [pc, #48]	; (1238c <_eeprom_emulator_create_master_page+0xb8>)
   1235c:	891b      	ldrh	r3, [r3, #8]
   1235e:	3b01      	subs	r3, #1
   12360:	b29b      	uxth	r3, r3
   12362:	003a      	movs	r2, r7
   12364:	0011      	movs	r1, r2
   12366:	0018      	movs	r0, r3
   12368:	4b0a      	ldr	r3, [pc, #40]	; (12394 <_eeprom_emulator_create_master_page+0xc0>)
   1236a:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   1236c:	4b07      	ldr	r3, [pc, #28]	; (1238c <_eeprom_emulator_create_master_page+0xb8>)
   1236e:	891b      	ldrh	r3, [r3, #8]
   12370:	3b01      	subs	r3, #1
   12372:	b29b      	uxth	r3, r3
   12374:	0018      	movs	r0, r3
   12376:	4b08      	ldr	r3, [pc, #32]	; (12398 <_eeprom_emulator_create_master_page+0xc4>)
   12378:	4798      	blx	r3
}
   1237a:	46c0      	nop			; (mov r8, r8)
   1237c:	46bd      	mov	sp, r7
   1237e:	b015      	add	sp, #84	; 0x54
   12380:	bd90      	pop	{r4, r7, pc}
   12382:	46c0      	nop			; (mov r8, r8)
   12384:	000195b4 	.word	0x000195b4
   12388:	000178b7 	.word	0x000178b7
   1238c:	2000040c 	.word	0x2000040c
   12390:	00011b65 	.word	0x00011b65
   12394:	00011bad 	.word	0x00011bad
   12398:	00011bfd 	.word	0x00011bfd

0001239c <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   1239c:	b590      	push	{r4, r7, lr}
   1239e:	b095      	sub	sp, #84	; 0x54
   123a0:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   123a2:	2340      	movs	r3, #64	; 0x40
   123a4:	18fb      	adds	r3, r7, r3
   123a6:	4a22      	ldr	r2, [pc, #136]	; (12430 <_eeprom_emulator_verify_master_page+0x94>)
   123a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   123aa:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   123ac:	4b21      	ldr	r3, [pc, #132]	; (12434 <_eeprom_emulator_verify_master_page+0x98>)
   123ae:	891b      	ldrh	r3, [r3, #8]
   123b0:	3b01      	subs	r3, #1
   123b2:	b29b      	uxth	r3, r3
   123b4:	003a      	movs	r2, r7
   123b6:	0011      	movs	r1, r2
   123b8:	0018      	movs	r0, r3
   123ba:	4b1f      	ldr	r3, [pc, #124]	; (12438 <_eeprom_emulator_verify_master_page+0x9c>)
   123bc:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   123be:	234f      	movs	r3, #79	; 0x4f
   123c0:	18fb      	adds	r3, r7, r3
   123c2:	2200      	movs	r2, #0
   123c4:	701a      	strb	r2, [r3, #0]
   123c6:	e017      	b.n	123f8 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   123c8:	234f      	movs	r3, #79	; 0x4f
   123ca:	18fb      	adds	r3, r7, r3
   123cc:	781a      	ldrb	r2, [r3, #0]
   123ce:	003b      	movs	r3, r7
   123d0:	0092      	lsls	r2, r2, #2
   123d2:	58d2      	ldr	r2, [r2, r3]
   123d4:	234f      	movs	r3, #79	; 0x4f
   123d6:	18fb      	adds	r3, r7, r3
   123d8:	7819      	ldrb	r1, [r3, #0]
   123da:	2340      	movs	r3, #64	; 0x40
   123dc:	18fb      	adds	r3, r7, r3
   123de:	0089      	lsls	r1, r1, #2
   123e0:	58cb      	ldr	r3, [r1, r3]
   123e2:	429a      	cmp	r2, r3
   123e4:	d001      	beq.n	123ea <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   123e6:	231a      	movs	r3, #26
   123e8:	e01e      	b.n	12428 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   123ea:	234f      	movs	r3, #79	; 0x4f
   123ec:	18fb      	adds	r3, r7, r3
   123ee:	781a      	ldrb	r2, [r3, #0]
   123f0:	234f      	movs	r3, #79	; 0x4f
   123f2:	18fb      	adds	r3, r7, r3
   123f4:	3201      	adds	r2, #1
   123f6:	701a      	strb	r2, [r3, #0]
   123f8:	234f      	movs	r3, #79	; 0x4f
   123fa:	18fb      	adds	r3, r7, r3
   123fc:	781b      	ldrb	r3, [r3, #0]
   123fe:	2b02      	cmp	r3, #2
   12400:	d9e2      	bls.n	123c8 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   12402:	003b      	movs	r3, r7
   12404:	7bdb      	ldrb	r3, [r3, #15]
   12406:	2b01      	cmp	r3, #1
   12408:	d001      	beq.n	1240e <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   1240a:	2310      	movs	r3, #16
   1240c:	e00c      	b.n	12428 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   1240e:	003b      	movs	r3, r7
   12410:	7b1b      	ldrb	r3, [r3, #12]
   12412:	2b01      	cmp	r3, #1
   12414:	d001      	beq.n	1241a <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   12416:	2310      	movs	r3, #16
   12418:	e006      	b.n	12428 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   1241a:	003b      	movs	r3, r7
   1241c:	7b5b      	ldrb	r3, [r3, #13]
   1241e:	2b00      	cmp	r3, #0
   12420:	d001      	beq.n	12426 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   12422:	2310      	movs	r3, #16
   12424:	e000      	b.n	12428 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   12426:	2300      	movs	r3, #0
}
   12428:	0018      	movs	r0, r3
   1242a:	46bd      	mov	sp, r7
   1242c:	b015      	add	sp, #84	; 0x54
   1242e:	bd90      	pop	{r4, r7, pc}
   12430:	000195b4 	.word	0x000195b4
   12434:	2000040c 	.word	0x2000040c
   12438:	00011c49 	.word	0x00011c49

0001243c <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   1243c:	b590      	push	{r4, r7, lr}
   1243e:	b087      	sub	sp, #28
   12440:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   12442:	2317      	movs	r3, #23
   12444:	18fb      	adds	r3, r7, r3
   12446:	2200      	movs	r2, #0
   12448:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   1244a:	2310      	movs	r3, #16
   1244c:	18fb      	adds	r3, r7, r3
   1244e:	0018      	movs	r0, r3
   12450:	4b2e      	ldr	r3, [pc, #184]	; (1250c <eeprom_emulator_init+0xd0>)
   12452:	4798      	blx	r3
	config.manual_page_write = true;
   12454:	2310      	movs	r3, #16
   12456:	18fb      	adds	r3, r7, r3
   12458:	2201      	movs	r2, #1
   1245a:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   1245c:	2317      	movs	r3, #23
   1245e:	18fc      	adds	r4, r7, r3
   12460:	2310      	movs	r3, #16
   12462:	18fb      	adds	r3, r7, r3
   12464:	0018      	movs	r0, r3
   12466:	4b2a      	ldr	r3, [pc, #168]	; (12510 <eeprom_emulator_init+0xd4>)
   12468:	4798      	blx	r3
   1246a:	0003      	movs	r3, r0
   1246c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1246e:	2317      	movs	r3, #23
   12470:	18fb      	adds	r3, r7, r3
   12472:	781b      	ldrb	r3, [r3, #0]
   12474:	2b05      	cmp	r3, #5
   12476:	d0f1      	beq.n	1245c <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   12478:	1d3b      	adds	r3, r7, #4
   1247a:	0018      	movs	r0, r3
   1247c:	4b25      	ldr	r3, [pc, #148]	; (12514 <eeprom_emulator_init+0xd8>)
   1247e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   12480:	1d3b      	adds	r3, r7, #4
   12482:	685b      	ldr	r3, [r3, #4]
   12484:	2b0b      	cmp	r3, #11
   12486:	d801      	bhi.n	1248c <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   12488:	2316      	movs	r3, #22
   1248a:	e03b      	b.n	12504 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   1248c:	1d3b      	adds	r3, r7, #4
   1248e:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   12490:	b29a      	uxth	r2, r3
   12492:	4b21      	ldr	r3, [pc, #132]	; (12518 <eeprom_emulator_init+0xdc>)
   12494:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   12496:	1d3b      	adds	r3, r7, #4
   12498:	685b      	ldr	r3, [r3, #4]
   1249a:	3b08      	subs	r3, #8
   1249c:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   1249e:	b2da      	uxtb	r2, r3
   124a0:	4b1d      	ldr	r3, [pc, #116]	; (12518 <eeprom_emulator_init+0xdc>)
   124a2:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   124a4:	4b1c      	ldr	r3, [pc, #112]	; (12518 <eeprom_emulator_init+0xdc>)
   124a6:	891b      	ldrh	r3, [r3, #8]
   124a8:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   124aa:	0013      	movs	r3, r2
   124ac:	069b      	lsls	r3, r3, #26
   124ae:	1a9b      	subs	r3, r3, r2
   124b0:	019b      	lsls	r3, r3, #6
   124b2:	2280      	movs	r2, #128	; 0x80
   124b4:	02d2      	lsls	r2, r2, #11
   124b6:	4694      	mov	ip, r2
   124b8:	4463      	add	r3, ip
   124ba:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   124bc:	4b16      	ldr	r3, [pc, #88]	; (12518 <eeprom_emulator_init+0xdc>)
   124be:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   124c0:	4b15      	ldr	r3, [pc, #84]	; (12518 <eeprom_emulator_init+0xdc>)
   124c2:	22c8      	movs	r2, #200	; 0xc8
   124c4:	2100      	movs	r1, #0
   124c6:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   124c8:	4b14      	ldr	r3, [pc, #80]	; (1251c <eeprom_emulator_init+0xe0>)
   124ca:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   124cc:	4b12      	ldr	r3, [pc, #72]	; (12518 <eeprom_emulator_init+0xdc>)
   124ce:	2287      	movs	r2, #135	; 0x87
   124d0:	5c9b      	ldrb	r3, [r3, r2]
   124d2:	2b3f      	cmp	r3, #63	; 0x3f
   124d4:	d101      	bne.n	124da <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   124d6:	231a      	movs	r3, #26
   124d8:	e014      	b.n	12504 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   124da:	2317      	movs	r3, #23
   124dc:	18fc      	adds	r4, r7, r3
   124de:	4b10      	ldr	r3, [pc, #64]	; (12520 <eeprom_emulator_init+0xe4>)
   124e0:	4798      	blx	r3
   124e2:	0003      	movs	r3, r0
   124e4:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   124e6:	2317      	movs	r3, #23
   124e8:	18fb      	adds	r3, r7, r3
   124ea:	781b      	ldrb	r3, [r3, #0]
   124ec:	2b00      	cmp	r3, #0
   124ee:	d003      	beq.n	124f8 <eeprom_emulator_init+0xbc>
		return error_code;
   124f0:	2317      	movs	r3, #23
   124f2:	18fb      	adds	r3, r7, r3
   124f4:	781b      	ldrb	r3, [r3, #0]
   124f6:	e005      	b.n	12504 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   124f8:	4b07      	ldr	r3, [pc, #28]	; (12518 <eeprom_emulator_init+0xdc>)
   124fa:	2201      	movs	r2, #1
   124fc:	701a      	strb	r2, [r3, #0]

	return error_code;
   124fe:	2317      	movs	r3, #23
   12500:	18fb      	adds	r3, r7, r3
   12502:	781b      	ldrb	r3, [r3, #0]
}
   12504:	0018      	movs	r0, r3
   12506:	46bd      	mov	sp, r7
   12508:	b007      	add	sp, #28
   1250a:	bd90      	pop	{r4, r7, pc}
   1250c:	00011b29 	.word	0x00011b29
   12510:	00011505 	.word	0x00011505
   12514:	000119e5 	.word	0x000119e5
   12518:	2000040c 	.word	0x2000040c
   1251c:	00011f09 	.word	0x00011f09
   12520:	0001239d 	.word	0x0001239d

00012524 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   12524:	b580      	push	{r7, lr}
   12526:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   12528:	4b04      	ldr	r3, [pc, #16]	; (1253c <eeprom_emulator_erase_memory+0x18>)
   1252a:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   1252c:	4b04      	ldr	r3, [pc, #16]	; (12540 <eeprom_emulator_erase_memory+0x1c>)
   1252e:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   12530:	4b04      	ldr	r3, [pc, #16]	; (12544 <eeprom_emulator_erase_memory+0x20>)
   12532:	4798      	blx	r3
}
   12534:	46c0      	nop			; (mov r8, r8)
   12536:	46bd      	mov	sp, r7
   12538:	bd80      	pop	{r7, pc}
   1253a:	46c0      	nop			; (mov r8, r8)
   1253c:	00011c99 	.word	0x00011c99
   12540:	000122d5 	.word	0x000122d5
   12544:	00011f09 	.word	0x00011f09

00012548 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b085      	sub	sp, #20
   1254c:	af00      	add	r7, sp, #0
   1254e:	0002      	movs	r2, r0
   12550:	6039      	str	r1, [r7, #0]
   12552:	1dfb      	adds	r3, r7, #7
   12554:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12556:	4b38      	ldr	r3, [pc, #224]	; (12638 <eeprom_emulator_write_page+0xf0>)
   12558:	781b      	ldrb	r3, [r3, #0]
   1255a:	2201      	movs	r2, #1
   1255c:	4053      	eors	r3, r2
   1255e:	b2db      	uxtb	r3, r3
   12560:	2b00      	cmp	r3, #0
   12562:	d001      	beq.n	12568 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12564:	231f      	movs	r3, #31
   12566:	e063      	b.n	12630 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12568:	4b33      	ldr	r3, [pc, #204]	; (12638 <eeprom_emulator_write_page+0xf0>)
   1256a:	7a9b      	ldrb	r3, [r3, #10]
   1256c:	1dfa      	adds	r2, r7, #7
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	429a      	cmp	r2, r3
   12572:	d301      	bcc.n	12578 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12574:	2318      	movs	r3, #24
   12576:	e05b      	b.n	12630 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   12578:	4b2f      	ldr	r3, [pc, #188]	; (12638 <eeprom_emulator_write_page+0xf0>)
   1257a:	22c8      	movs	r2, #200	; 0xc8
   1257c:	5c9b      	ldrb	r3, [r3, r2]
   1257e:	2b00      	cmp	r3, #0
   12580:	d008      	beq.n	12594 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   12582:	4b2d      	ldr	r3, [pc, #180]	; (12638 <eeprom_emulator_write_page+0xf0>)
   12584:	2288      	movs	r2, #136	; 0x88
   12586:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12588:	1dfa      	adds	r2, r7, #7
   1258a:	7812      	ldrb	r2, [r2, #0]
   1258c:	429a      	cmp	r2, r3
   1258e:	d001      	beq.n	12594 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   12590:	4b2a      	ldr	r3, [pc, #168]	; (1263c <eeprom_emulator_write_page+0xf4>)
   12592:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   12594:	230e      	movs	r3, #14
   12596:	18fb      	adds	r3, r7, r3
   12598:	2200      	movs	r2, #0
   1259a:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   1259c:	1dfb      	adds	r3, r7, #7
   1259e:	781b      	ldrb	r3, [r3, #0]
   125a0:	4a25      	ldr	r2, [pc, #148]	; (12638 <eeprom_emulator_write_page+0xf0>)
   125a2:	18d3      	adds	r3, r2, r3
   125a4:	7adb      	ldrb	r3, [r3, #11]
   125a6:	220f      	movs	r2, #15
   125a8:	18bc      	adds	r4, r7, r2
   125aa:	220e      	movs	r2, #14
   125ac:	18ba      	adds	r2, r7, r2
   125ae:	0011      	movs	r1, r2
   125b0:	0018      	movs	r0, r3
   125b2:	4b23      	ldr	r3, [pc, #140]	; (12640 <eeprom_emulator_write_page+0xf8>)
   125b4:	4798      	blx	r3
   125b6:	0003      	movs	r3, r0
   125b8:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   125ba:	230f      	movs	r3, #15
   125bc:	18fb      	adds	r3, r7, r3
   125be:	781b      	ldrb	r3, [r3, #0]
   125c0:	2201      	movs	r2, #1
   125c2:	4053      	eors	r3, r2
   125c4:	b2db      	uxtb	r3, r3
   125c6:	2b00      	cmp	r3, #0
   125c8:	d00e      	beq.n	125e8 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   125ca:	1dfb      	adds	r3, r7, #7
   125cc:	781b      	ldrb	r3, [r3, #0]
   125ce:	4a1a      	ldr	r2, [pc, #104]	; (12638 <eeprom_emulator_write_page+0xf0>)
   125d0:	18d3      	adds	r3, r2, r3
   125d2:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   125d4:	089b      	lsrs	r3, r3, #2
   125d6:	b2d8      	uxtb	r0, r3
   125d8:	683a      	ldr	r2, [r7, #0]
   125da:	1dfb      	adds	r3, r7, #7
   125dc:	781b      	ldrb	r3, [r3, #0]
   125de:	0019      	movs	r1, r3
   125e0:	4b18      	ldr	r3, [pc, #96]	; (12644 <eeprom_emulator_write_page+0xfc>)
   125e2:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   125e4:	2300      	movs	r3, #0
   125e6:	e023      	b.n	12630 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   125e8:	4b13      	ldr	r3, [pc, #76]	; (12638 <eeprom_emulator_write_page+0xf0>)
   125ea:	1dfa      	adds	r2, r7, #7
   125ec:	2188      	movs	r1, #136	; 0x88
   125ee:	7812      	ldrb	r2, [r2, #0]
   125f0:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   125f2:	4b11      	ldr	r3, [pc, #68]	; (12638 <eeprom_emulator_write_page+0xf0>)
   125f4:	228c      	movs	r2, #140	; 0x8c
   125f6:	6839      	ldr	r1, [r7, #0]
   125f8:	189b      	adds	r3, r3, r2
   125fa:	223c      	movs	r2, #60	; 0x3c
   125fc:	0018      	movs	r0, r3
   125fe:	4b12      	ldr	r3, [pc, #72]	; (12648 <eeprom_emulator_write_page+0x100>)
   12600:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   12602:	230e      	movs	r3, #14
   12604:	18fb      	adds	r3, r7, r3
   12606:	781b      	ldrb	r3, [r3, #0]
   12608:	b29b      	uxth	r3, r3
   1260a:	4a10      	ldr	r2, [pc, #64]	; (1264c <eeprom_emulator_write_page+0x104>)
   1260c:	0011      	movs	r1, r2
   1260e:	0018      	movs	r0, r3
   12610:	4b0f      	ldr	r3, [pc, #60]	; (12650 <eeprom_emulator_write_page+0x108>)
   12612:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   12614:	1dfb      	adds	r3, r7, #7
   12616:	781b      	ldrb	r3, [r3, #0]
   12618:	220e      	movs	r2, #14
   1261a:	18ba      	adds	r2, r7, r2
   1261c:	7811      	ldrb	r1, [r2, #0]
   1261e:	4a06      	ldr	r2, [pc, #24]	; (12638 <eeprom_emulator_write_page+0xf0>)
   12620:	18d3      	adds	r3, r2, r3
   12622:	1c0a      	adds	r2, r1, #0
   12624:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   12626:	4b04      	ldr	r3, [pc, #16]	; (12638 <eeprom_emulator_write_page+0xf0>)
   12628:	22c8      	movs	r2, #200	; 0xc8
   1262a:	2101      	movs	r1, #1
   1262c:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   1262e:	2300      	movs	r3, #0
}
   12630:	0018      	movs	r0, r3
   12632:	46bd      	mov	sp, r7
   12634:	b005      	add	sp, #20
   12636:	bd90      	pop	{r4, r7, pc}
   12638:	2000040c 	.word	0x2000040c
   1263c:	000126f1 	.word	0x000126f1
   12640:	0001205d 	.word	0x0001205d
   12644:	000120f5 	.word	0x000120f5
   12648:	00017881 	.word	0x00017881
   1264c:	20000494 	.word	0x20000494
   12650:	00011bad 	.word	0x00011bad

00012654 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   12654:	b580      	push	{r7, lr}
   12656:	b092      	sub	sp, #72	; 0x48
   12658:	af00      	add	r7, sp, #0
   1265a:	0002      	movs	r2, r0
   1265c:	6039      	str	r1, [r7, #0]
   1265e:	1dfb      	adds	r3, r7, #7
   12660:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12662:	4b20      	ldr	r3, [pc, #128]	; (126e4 <eeprom_emulator_read_page+0x90>)
   12664:	781b      	ldrb	r3, [r3, #0]
   12666:	2201      	movs	r2, #1
   12668:	4053      	eors	r3, r2
   1266a:	b2db      	uxtb	r3, r3
   1266c:	2b00      	cmp	r3, #0
   1266e:	d001      	beq.n	12674 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12670:	231f      	movs	r3, #31
   12672:	e033      	b.n	126dc <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12674:	4b1b      	ldr	r3, [pc, #108]	; (126e4 <eeprom_emulator_read_page+0x90>)
   12676:	7a9b      	ldrb	r3, [r3, #10]
   12678:	1dfa      	adds	r2, r7, #7
   1267a:	7812      	ldrb	r2, [r2, #0]
   1267c:	429a      	cmp	r2, r3
   1267e:	d301      	bcc.n	12684 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12680:	2318      	movs	r3, #24
   12682:	e02b      	b.n	126dc <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   12684:	4b17      	ldr	r3, [pc, #92]	; (126e4 <eeprom_emulator_read_page+0x90>)
   12686:	22c8      	movs	r2, #200	; 0xc8
   12688:	5c9b      	ldrb	r3, [r3, r2]
   1268a:	2b00      	cmp	r3, #0
   1268c:	d010      	beq.n	126b0 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   1268e:	4b15      	ldr	r3, [pc, #84]	; (126e4 <eeprom_emulator_read_page+0x90>)
   12690:	2288      	movs	r2, #136	; 0x88
   12692:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12694:	1dfa      	adds	r2, r7, #7
   12696:	7812      	ldrb	r2, [r2, #0]
   12698:	429a      	cmp	r2, r3
   1269a:	d109      	bne.n	126b0 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   1269c:	6839      	ldr	r1, [r7, #0]
   1269e:	4b11      	ldr	r3, [pc, #68]	; (126e4 <eeprom_emulator_read_page+0x90>)
   126a0:	228c      	movs	r2, #140	; 0x8c
   126a2:	0008      	movs	r0, r1
   126a4:	189b      	adds	r3, r3, r2
   126a6:	223c      	movs	r2, #60	; 0x3c
   126a8:	0019      	movs	r1, r3
   126aa:	4b0f      	ldr	r3, [pc, #60]	; (126e8 <eeprom_emulator_read_page+0x94>)
   126ac:	4798      	blx	r3
   126ae:	e014      	b.n	126da <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   126b0:	1dfb      	adds	r3, r7, #7
   126b2:	781b      	ldrb	r3, [r3, #0]
   126b4:	4a0b      	ldr	r2, [pc, #44]	; (126e4 <eeprom_emulator_read_page+0x90>)
   126b6:	18d3      	adds	r3, r2, r3
   126b8:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   126ba:	b29b      	uxth	r3, r3
   126bc:	2208      	movs	r2, #8
   126be:	18ba      	adds	r2, r7, r2
   126c0:	0011      	movs	r1, r2
   126c2:	0018      	movs	r0, r3
   126c4:	4b09      	ldr	r3, [pc, #36]	; (126ec <eeprom_emulator_read_page+0x98>)
   126c6:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   126c8:	683a      	ldr	r2, [r7, #0]
   126ca:	2308      	movs	r3, #8
   126cc:	18fb      	adds	r3, r7, r3
   126ce:	0010      	movs	r0, r2
   126d0:	3304      	adds	r3, #4
   126d2:	223c      	movs	r2, #60	; 0x3c
   126d4:	0019      	movs	r1, r3
   126d6:	4b04      	ldr	r3, [pc, #16]	; (126e8 <eeprom_emulator_read_page+0x94>)
   126d8:	4798      	blx	r3
	}

	return STATUS_OK;
   126da:	2300      	movs	r3, #0
}
   126dc:	0018      	movs	r0, r3
   126de:	46bd      	mov	sp, r7
   126e0:	b012      	add	sp, #72	; 0x48
   126e2:	bd80      	pop	{r7, pc}
   126e4:	2000040c 	.word	0x2000040c
   126e8:	00017881 	.word	0x00017881
   126ec:	00011c49 	.word	0x00011c49

000126f0 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   126f0:	b580      	push	{r7, lr}
   126f2:	b082      	sub	sp, #8
   126f4:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   126f6:	1dfb      	adds	r3, r7, #7
   126f8:	2200      	movs	r2, #0
   126fa:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   126fc:	4b10      	ldr	r3, [pc, #64]	; (12740 <eeprom_emulator_commit_page_buffer+0x50>)
   126fe:	22c8      	movs	r2, #200	; 0xc8
   12700:	5c9b      	ldrb	r3, [r3, r2]
   12702:	2201      	movs	r2, #1
   12704:	4053      	eors	r3, r2
   12706:	b2db      	uxtb	r3, r3
   12708:	2b00      	cmp	r3, #0
   1270a:	d001      	beq.n	12710 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   1270c:	2300      	movs	r3, #0
   1270e:	e013      	b.n	12738 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   12710:	1dbb      	adds	r3, r7, #6
   12712:	4a0b      	ldr	r2, [pc, #44]	; (12740 <eeprom_emulator_commit_page_buffer+0x50>)
   12714:	2188      	movs	r1, #136	; 0x88
   12716:	5c52      	ldrb	r2, [r2, r1]
   12718:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   1271a:	1dbb      	adds	r3, r7, #6
   1271c:	781b      	ldrb	r3, [r3, #0]
   1271e:	4a08      	ldr	r2, [pc, #32]	; (12740 <eeprom_emulator_commit_page_buffer+0x50>)
   12720:	18d3      	adds	r3, r2, r3
   12722:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   12724:	b29b      	uxth	r3, r3
   12726:	0018      	movs	r0, r3
   12728:	4b06      	ldr	r3, [pc, #24]	; (12744 <eeprom_emulator_commit_page_buffer+0x54>)
   1272a:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   1272c:	4b04      	ldr	r3, [pc, #16]	; (12740 <eeprom_emulator_commit_page_buffer+0x50>)
   1272e:	22c8      	movs	r2, #200	; 0xc8
   12730:	2100      	movs	r1, #0
   12732:	5499      	strb	r1, [r3, r2]

	return error_code;
   12734:	1dfb      	adds	r3, r7, #7
   12736:	781b      	ldrb	r3, [r3, #0]
}
   12738:	0018      	movs	r0, r3
   1273a:	46bd      	mov	sp, r7
   1273c:	b002      	add	sp, #8
   1273e:	bd80      	pop	{r7, pc}
   12740:	2000040c 	.word	0x2000040c
   12744:	00011bfd 	.word	0x00011bfd

00012748 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   12748:	b580      	push	{r7, lr}
   1274a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   1274c:	46c0      	nop			; (mov r8, r8)
   1274e:	46bd      	mov	sp, r7
   12750:	bd80      	pop	{r7, pc}
	...

00012754 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   12754:	b580      	push	{r7, lr}
   12756:	b082      	sub	sp, #8
   12758:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   1275a:	4b10      	ldr	r3, [pc, #64]	; (1279c <cpu_irq_enter_critical+0x48>)
   1275c:	681b      	ldr	r3, [r3, #0]
   1275e:	2b00      	cmp	r3, #0
   12760:	d112      	bne.n	12788 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12762:	f3ef 8310 	mrs	r3, PRIMASK
   12766:	607b      	str	r3, [r7, #4]
  return(result);
   12768:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   1276a:	2b00      	cmp	r3, #0
   1276c:	d109      	bne.n	12782 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   1276e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   12770:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   12774:	4b0a      	ldr	r3, [pc, #40]	; (127a0 <cpu_irq_enter_critical+0x4c>)
   12776:	2200      	movs	r2, #0
   12778:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1277a:	4b0a      	ldr	r3, [pc, #40]	; (127a4 <cpu_irq_enter_critical+0x50>)
   1277c:	2201      	movs	r2, #1
   1277e:	701a      	strb	r2, [r3, #0]
   12780:	e002      	b.n	12788 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   12782:	4b08      	ldr	r3, [pc, #32]	; (127a4 <cpu_irq_enter_critical+0x50>)
   12784:	2200      	movs	r2, #0
   12786:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   12788:	4b04      	ldr	r3, [pc, #16]	; (1279c <cpu_irq_enter_critical+0x48>)
   1278a:	681b      	ldr	r3, [r3, #0]
   1278c:	1c5a      	adds	r2, r3, #1
   1278e:	4b03      	ldr	r3, [pc, #12]	; (1279c <cpu_irq_enter_critical+0x48>)
   12790:	601a      	str	r2, [r3, #0]
}
   12792:	46c0      	nop			; (mov r8, r8)
   12794:	46bd      	mov	sp, r7
   12796:	b002      	add	sp, #8
   12798:	bd80      	pop	{r7, pc}
   1279a:	46c0      	nop			; (mov r8, r8)
   1279c:	200004d8 	.word	0x200004d8
   127a0:	20000028 	.word	0x20000028
   127a4:	200004dc 	.word	0x200004dc

000127a8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   127a8:	b580      	push	{r7, lr}
   127aa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   127ac:	4b0b      	ldr	r3, [pc, #44]	; (127dc <cpu_irq_leave_critical+0x34>)
   127ae:	681b      	ldr	r3, [r3, #0]
   127b0:	1e5a      	subs	r2, r3, #1
   127b2:	4b0a      	ldr	r3, [pc, #40]	; (127dc <cpu_irq_leave_critical+0x34>)
   127b4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   127b6:	4b09      	ldr	r3, [pc, #36]	; (127dc <cpu_irq_leave_critical+0x34>)
   127b8:	681b      	ldr	r3, [r3, #0]
   127ba:	2b00      	cmp	r3, #0
   127bc:	d10a      	bne.n	127d4 <cpu_irq_leave_critical+0x2c>
   127be:	4b08      	ldr	r3, [pc, #32]	; (127e0 <cpu_irq_leave_critical+0x38>)
   127c0:	781b      	ldrb	r3, [r3, #0]
   127c2:	b2db      	uxtb	r3, r3
   127c4:	2b00      	cmp	r3, #0
   127c6:	d005      	beq.n	127d4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   127c8:	4b06      	ldr	r3, [pc, #24]	; (127e4 <cpu_irq_leave_critical+0x3c>)
   127ca:	2201      	movs	r2, #1
   127cc:	701a      	strb	r2, [r3, #0]
   127ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   127d2:	b662      	cpsie	i
	}
}
   127d4:	46c0      	nop			; (mov r8, r8)
   127d6:	46bd      	mov	sp, r7
   127d8:	bd80      	pop	{r7, pc}
   127da:	46c0      	nop			; (mov r8, r8)
   127dc:	200004d8 	.word	0x200004d8
   127e0:	200004dc 	.word	0x200004dc
   127e4:	20000028 	.word	0x20000028

000127e8 <system_gclk_gen_get_config_defaults>:
{
   127e8:	b580      	push	{r7, lr}
   127ea:	b082      	sub	sp, #8
   127ec:	af00      	add	r7, sp, #0
   127ee:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   127f0:	687b      	ldr	r3, [r7, #4]
   127f2:	2201      	movs	r2, #1
   127f4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   127f6:	687b      	ldr	r3, [r7, #4]
   127f8:	2200      	movs	r2, #0
   127fa:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   127fc:	687b      	ldr	r3, [r7, #4]
   127fe:	2206      	movs	r2, #6
   12800:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   12802:	687b      	ldr	r3, [r7, #4]
   12804:	2200      	movs	r2, #0
   12806:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   12808:	687b      	ldr	r3, [r7, #4]
   1280a:	2200      	movs	r2, #0
   1280c:	725a      	strb	r2, [r3, #9]
}
   1280e:	46c0      	nop			; (mov r8, r8)
   12810:	46bd      	mov	sp, r7
   12812:	b002      	add	sp, #8
   12814:	bd80      	pop	{r7, pc}

00012816 <system_gclk_chan_get_config_defaults>:
{
   12816:	b580      	push	{r7, lr}
   12818:	b082      	sub	sp, #8
   1281a:	af00      	add	r7, sp, #0
   1281c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	2200      	movs	r2, #0
   12822:	701a      	strb	r2, [r3, #0]
}
   12824:	46c0      	nop			; (mov r8, r8)
   12826:	46bd      	mov	sp, r7
   12828:	b002      	add	sp, #8
   1282a:	bd80      	pop	{r7, pc}

0001282c <system_clock_source_xosc32k_get_config_defaults>:
{
   1282c:	b580      	push	{r7, lr}
   1282e:	b082      	sub	sp, #8
   12830:	af00      	add	r7, sp, #0
   12832:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   12834:	687b      	ldr	r3, [r7, #4]
   12836:	2200      	movs	r2, #0
   12838:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   1283a:	687b      	ldr	r3, [r7, #4]
   1283c:	2204      	movs	r2, #4
   1283e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   12840:	687b      	ldr	r3, [r7, #4]
   12842:	2200      	movs	r2, #0
   12844:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   12846:	687b      	ldr	r3, [r7, #4]
   12848:	2280      	movs	r2, #128	; 0x80
   1284a:	0212      	lsls	r2, r2, #8
   1284c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   1284e:	687b      	ldr	r3, [r7, #4]
   12850:	2200      	movs	r2, #0
   12852:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	2201      	movs	r2, #1
   12858:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   1285a:	687b      	ldr	r3, [r7, #4]
   1285c:	2200      	movs	r2, #0
   1285e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   12860:	687b      	ldr	r3, [r7, #4]
   12862:	2201      	movs	r2, #1
   12864:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   12866:	687b      	ldr	r3, [r7, #4]
   12868:	2200      	movs	r2, #0
   1286a:	739a      	strb	r2, [r3, #14]
}
   1286c:	46c0      	nop			; (mov r8, r8)
   1286e:	46bd      	mov	sp, r7
   12870:	b002      	add	sp, #8
   12872:	bd80      	pop	{r7, pc}

00012874 <system_clock_source_osc8m_get_config_defaults>:
{
   12874:	b580      	push	{r7, lr}
   12876:	b082      	sub	sp, #8
   12878:	af00      	add	r7, sp, #0
   1287a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2203      	movs	r2, #3
   12880:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   12882:	687b      	ldr	r3, [r7, #4]
   12884:	2200      	movs	r2, #0
   12886:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   12888:	687b      	ldr	r3, [r7, #4]
   1288a:	2201      	movs	r2, #1
   1288c:	709a      	strb	r2, [r3, #2]
}
   1288e:	46c0      	nop			; (mov r8, r8)
   12890:	46bd      	mov	sp, r7
   12892:	b002      	add	sp, #8
   12894:	bd80      	pop	{r7, pc}

00012896 <system_clock_source_dfll_get_config_defaults>:
{
   12896:	b580      	push	{r7, lr}
   12898:	b082      	sub	sp, #8
   1289a:	af00      	add	r7, sp, #0
   1289c:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   1289e:	687b      	ldr	r3, [r7, #4]
   128a0:	2200      	movs	r2, #0
   128a2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   128a4:	687b      	ldr	r3, [r7, #4]
   128a6:	2200      	movs	r2, #0
   128a8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	2200      	movs	r2, #0
   128ae:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   128b0:	687b      	ldr	r3, [r7, #4]
   128b2:	2200      	movs	r2, #0
   128b4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   128b6:	687b      	ldr	r3, [r7, #4]
   128b8:	2200      	movs	r2, #0
   128ba:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   128bc:	687b      	ldr	r3, [r7, #4]
   128be:	2201      	movs	r2, #1
   128c0:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   128c2:	687b      	ldr	r3, [r7, #4]
   128c4:	2207      	movs	r2, #7
   128c6:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   128c8:	687b      	ldr	r3, [r7, #4]
   128ca:	223f      	movs	r2, #63	; 0x3f
   128cc:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   128ce:	687b      	ldr	r3, [r7, #4]
   128d0:	2201      	movs	r2, #1
   128d2:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   128d4:	687b      	ldr	r3, [r7, #4]
   128d6:	2201      	movs	r2, #1
   128d8:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   128da:	687b      	ldr	r3, [r7, #4]
   128dc:	2206      	movs	r2, #6
   128de:	821a      	strh	r2, [r3, #16]
}
   128e0:	46c0      	nop			; (mov r8, r8)
   128e2:	46bd      	mov	sp, r7
   128e4:	b002      	add	sp, #8
   128e6:	bd80      	pop	{r7, pc}

000128e8 <system_cpu_clock_set_divider>:
{
   128e8:	b580      	push	{r7, lr}
   128ea:	b082      	sub	sp, #8
   128ec:	af00      	add	r7, sp, #0
   128ee:	0002      	movs	r2, r0
   128f0:	1dfb      	adds	r3, r7, #7
   128f2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   128f4:	4a03      	ldr	r2, [pc, #12]	; (12904 <system_cpu_clock_set_divider+0x1c>)
   128f6:	1dfb      	adds	r3, r7, #7
   128f8:	781b      	ldrb	r3, [r3, #0]
   128fa:	7213      	strb	r3, [r2, #8]
}
   128fc:	46c0      	nop			; (mov r8, r8)
   128fe:	46bd      	mov	sp, r7
   12900:	b002      	add	sp, #8
   12902:	bd80      	pop	{r7, pc}
   12904:	40000400 	.word	0x40000400

00012908 <system_apb_clock_set_divider>:
{
   12908:	b580      	push	{r7, lr}
   1290a:	b082      	sub	sp, #8
   1290c:	af00      	add	r7, sp, #0
   1290e:	0002      	movs	r2, r0
   12910:	1dfb      	adds	r3, r7, #7
   12912:	701a      	strb	r2, [r3, #0]
   12914:	1dbb      	adds	r3, r7, #6
   12916:	1c0a      	adds	r2, r1, #0
   12918:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1291a:	1dfb      	adds	r3, r7, #7
   1291c:	781b      	ldrb	r3, [r3, #0]
   1291e:	2b01      	cmp	r3, #1
   12920:	d008      	beq.n	12934 <system_apb_clock_set_divider+0x2c>
   12922:	2b02      	cmp	r3, #2
   12924:	d00b      	beq.n	1293e <system_apb_clock_set_divider+0x36>
   12926:	2b00      	cmp	r3, #0
   12928:	d10e      	bne.n	12948 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   1292a:	4a0b      	ldr	r2, [pc, #44]	; (12958 <system_apb_clock_set_divider+0x50>)
   1292c:	1dbb      	adds	r3, r7, #6
   1292e:	781b      	ldrb	r3, [r3, #0]
   12930:	7253      	strb	r3, [r2, #9]
			break;
   12932:	e00b      	b.n	1294c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   12934:	4a08      	ldr	r2, [pc, #32]	; (12958 <system_apb_clock_set_divider+0x50>)
   12936:	1dbb      	adds	r3, r7, #6
   12938:	781b      	ldrb	r3, [r3, #0]
   1293a:	7293      	strb	r3, [r2, #10]
			break;
   1293c:	e006      	b.n	1294c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   1293e:	4a06      	ldr	r2, [pc, #24]	; (12958 <system_apb_clock_set_divider+0x50>)
   12940:	1dbb      	adds	r3, r7, #6
   12942:	781b      	ldrb	r3, [r3, #0]
   12944:	72d3      	strb	r3, [r2, #11]
			break;
   12946:	e001      	b.n	1294c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   12948:	2317      	movs	r3, #23
   1294a:	e000      	b.n	1294e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   1294c:	2300      	movs	r3, #0
}
   1294e:	0018      	movs	r0, r3
   12950:	46bd      	mov	sp, r7
   12952:	b002      	add	sp, #8
   12954:	bd80      	pop	{r7, pc}
   12956:	46c0      	nop			; (mov r8, r8)
   12958:	40000400 	.word	0x40000400

0001295c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   1295c:	b580      	push	{r7, lr}
   1295e:	b082      	sub	sp, #8
   12960:	af00      	add	r7, sp, #0
   12962:	0002      	movs	r2, r0
   12964:	1dfb      	adds	r3, r7, #7
   12966:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   12968:	4a08      	ldr	r2, [pc, #32]	; (1298c <system_flash_set_waitstates+0x30>)
   1296a:	1dfb      	adds	r3, r7, #7
   1296c:	781b      	ldrb	r3, [r3, #0]
   1296e:	210f      	movs	r1, #15
   12970:	400b      	ands	r3, r1
   12972:	b2d9      	uxtb	r1, r3
   12974:	6853      	ldr	r3, [r2, #4]
   12976:	200f      	movs	r0, #15
   12978:	4001      	ands	r1, r0
   1297a:	0049      	lsls	r1, r1, #1
   1297c:	201e      	movs	r0, #30
   1297e:	4383      	bics	r3, r0
   12980:	430b      	orrs	r3, r1
   12982:	6053      	str	r3, [r2, #4]
}
   12984:	46c0      	nop			; (mov r8, r8)
   12986:	46bd      	mov	sp, r7
   12988:	b002      	add	sp, #8
   1298a:	bd80      	pop	{r7, pc}
   1298c:	41004000 	.word	0x41004000

00012990 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   12990:	b580      	push	{r7, lr}
   12992:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   12994:	46c0      	nop			; (mov r8, r8)
   12996:	4b04      	ldr	r3, [pc, #16]	; (129a8 <_system_dfll_wait_for_sync+0x18>)
   12998:	68db      	ldr	r3, [r3, #12]
   1299a:	2210      	movs	r2, #16
   1299c:	4013      	ands	r3, r2
   1299e:	d0fa      	beq.n	12996 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   129a0:	46c0      	nop			; (mov r8, r8)
   129a2:	46bd      	mov	sp, r7
   129a4:	bd80      	pop	{r7, pc}
   129a6:	46c0      	nop			; (mov r8, r8)
   129a8:	40000800 	.word	0x40000800

000129ac <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   129ac:	b580      	push	{r7, lr}
   129ae:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   129b0:	4b0c      	ldr	r3, [pc, #48]	; (129e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   129b2:	2202      	movs	r2, #2
   129b4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   129b6:	4b0c      	ldr	r3, [pc, #48]	; (129e8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   129b8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   129ba:	4a0a      	ldr	r2, [pc, #40]	; (129e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   129bc:	4b0b      	ldr	r3, [pc, #44]	; (129ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   129be:	689b      	ldr	r3, [r3, #8]
   129c0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   129c2:	4a08      	ldr	r2, [pc, #32]	; (129e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   129c4:	4b09      	ldr	r3, [pc, #36]	; (129ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   129c6:	685b      	ldr	r3, [r3, #4]
   129c8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   129ca:	4b06      	ldr	r3, [pc, #24]	; (129e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   129cc:	2200      	movs	r2, #0
   129ce:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   129d0:	4b05      	ldr	r3, [pc, #20]	; (129e8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   129d2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   129d4:	4a03      	ldr	r2, [pc, #12]	; (129e4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   129d6:	4b05      	ldr	r3, [pc, #20]	; (129ec <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   129d8:	681b      	ldr	r3, [r3, #0]
   129da:	b29b      	uxth	r3, r3
   129dc:	8493      	strh	r3, [r2, #36]	; 0x24
}
   129de:	46c0      	nop			; (mov r8, r8)
   129e0:	46bd      	mov	sp, r7
   129e2:	bd80      	pop	{r7, pc}
   129e4:	40000800 	.word	0x40000800
   129e8:	00012991 	.word	0x00012991
   129ec:	200004e0 	.word	0x200004e0

000129f0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b082      	sub	sp, #8
   129f4:	af00      	add	r7, sp, #0
   129f6:	0002      	movs	r2, r0
   129f8:	1dfb      	adds	r3, r7, #7
   129fa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   129fc:	1dfb      	adds	r3, r7, #7
   129fe:	781b      	ldrb	r3, [r3, #0]
   12a00:	2b08      	cmp	r3, #8
   12a02:	d841      	bhi.n	12a88 <system_clock_source_get_hz+0x98>
   12a04:	009a      	lsls	r2, r3, #2
   12a06:	4b23      	ldr	r3, [pc, #140]	; (12a94 <system_clock_source_get_hz+0xa4>)
   12a08:	18d3      	adds	r3, r2, r3
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   12a0e:	4b22      	ldr	r3, [pc, #136]	; (12a98 <system_clock_source_get_hz+0xa8>)
   12a10:	691b      	ldr	r3, [r3, #16]
   12a12:	e03a      	b.n	12a8a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   12a14:	4b21      	ldr	r3, [pc, #132]	; (12a9c <system_clock_source_get_hz+0xac>)
   12a16:	6a1b      	ldr	r3, [r3, #32]
   12a18:	059b      	lsls	r3, r3, #22
   12a1a:	0f9b      	lsrs	r3, r3, #30
   12a1c:	b2db      	uxtb	r3, r3
   12a1e:	001a      	movs	r2, r3
   12a20:	4b1f      	ldr	r3, [pc, #124]	; (12aa0 <system_clock_source_get_hz+0xb0>)
   12a22:	40d3      	lsrs	r3, r2
   12a24:	e031      	b.n	12a8a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   12a26:	2380      	movs	r3, #128	; 0x80
   12a28:	021b      	lsls	r3, r3, #8
   12a2a:	e02e      	b.n	12a8a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   12a2c:	2380      	movs	r3, #128	; 0x80
   12a2e:	021b      	lsls	r3, r3, #8
   12a30:	e02b      	b.n	12a8a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   12a32:	4b19      	ldr	r3, [pc, #100]	; (12a98 <system_clock_source_get_hz+0xa8>)
   12a34:	695b      	ldr	r3, [r3, #20]
   12a36:	e028      	b.n	12a8a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   12a38:	4b17      	ldr	r3, [pc, #92]	; (12a98 <system_clock_source_get_hz+0xa8>)
   12a3a:	681b      	ldr	r3, [r3, #0]
   12a3c:	2202      	movs	r2, #2
   12a3e:	4013      	ands	r3, r2
   12a40:	d101      	bne.n	12a46 <system_clock_source_get_hz+0x56>
			return 0;
   12a42:	2300      	movs	r3, #0
   12a44:	e021      	b.n	12a8a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   12a46:	4b17      	ldr	r3, [pc, #92]	; (12aa4 <system_clock_source_get_hz+0xb4>)
   12a48:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   12a4a:	4b13      	ldr	r3, [pc, #76]	; (12a98 <system_clock_source_get_hz+0xa8>)
   12a4c:	681b      	ldr	r3, [r3, #0]
   12a4e:	2224      	movs	r2, #36	; 0x24
   12a50:	4013      	ands	r3, r2
   12a52:	2b04      	cmp	r3, #4
   12a54:	d109      	bne.n	12a6a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12a56:	2000      	movs	r0, #0
   12a58:	4b13      	ldr	r3, [pc, #76]	; (12aa8 <system_clock_source_get_hz+0xb8>)
   12a5a:	4798      	blx	r3
   12a5c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   12a5e:	4b0e      	ldr	r3, [pc, #56]	; (12a98 <system_clock_source_get_hz+0xa8>)
   12a60:	689b      	ldr	r3, [r3, #8]
   12a62:	041b      	lsls	r3, r3, #16
   12a64:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12a66:	4353      	muls	r3, r2
   12a68:	e00f      	b.n	12a8a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   12a6a:	4b10      	ldr	r3, [pc, #64]	; (12aac <system_clock_source_get_hz+0xbc>)
   12a6c:	e00d      	b.n	12a8a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   12a6e:	4a0b      	ldr	r2, [pc, #44]	; (12a9c <system_clock_source_get_hz+0xac>)
   12a70:	2350      	movs	r3, #80	; 0x50
   12a72:	5cd3      	ldrb	r3, [r2, r3]
   12a74:	b2db      	uxtb	r3, r3
   12a76:	001a      	movs	r2, r3
   12a78:	2304      	movs	r3, #4
   12a7a:	4013      	ands	r3, r2
   12a7c:	d101      	bne.n	12a82 <system_clock_source_get_hz+0x92>
			return 0;
   12a7e:	2300      	movs	r3, #0
   12a80:	e003      	b.n	12a8a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   12a82:	4b05      	ldr	r3, [pc, #20]	; (12a98 <system_clock_source_get_hz+0xa8>)
   12a84:	68db      	ldr	r3, [r3, #12]
   12a86:	e000      	b.n	12a8a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   12a88:	2300      	movs	r3, #0
	}
}
   12a8a:	0018      	movs	r0, r3
   12a8c:	46bd      	mov	sp, r7
   12a8e:	b002      	add	sp, #8
   12a90:	bd80      	pop	{r7, pc}
   12a92:	46c0      	nop			; (mov r8, r8)
   12a94:	000195c0 	.word	0x000195c0
   12a98:	200004e0 	.word	0x200004e0
   12a9c:	40000800 	.word	0x40000800
   12aa0:	007a1200 	.word	0x007a1200
   12aa4:	00012991 	.word	0x00012991
   12aa8:	00013631 	.word	0x00013631
   12aac:	02dc6c00 	.word	0x02dc6c00

00012ab0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   12ab0:	b580      	push	{r7, lr}
   12ab2:	b084      	sub	sp, #16
   12ab4:	af00      	add	r7, sp, #0
   12ab6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   12ab8:	4b1a      	ldr	r3, [pc, #104]	; (12b24 <system_clock_source_osc8m_set_config+0x74>)
   12aba:	6a1b      	ldr	r3, [r3, #32]
   12abc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   12abe:	687b      	ldr	r3, [r7, #4]
   12ac0:	781b      	ldrb	r3, [r3, #0]
   12ac2:	1c1a      	adds	r2, r3, #0
   12ac4:	2303      	movs	r3, #3
   12ac6:	4013      	ands	r3, r2
   12ac8:	b2da      	uxtb	r2, r3
   12aca:	230d      	movs	r3, #13
   12acc:	18fb      	adds	r3, r7, r3
   12ace:	2103      	movs	r1, #3
   12ad0:	400a      	ands	r2, r1
   12ad2:	0010      	movs	r0, r2
   12ad4:	781a      	ldrb	r2, [r3, #0]
   12ad6:	2103      	movs	r1, #3
   12ad8:	438a      	bics	r2, r1
   12ada:	1c11      	adds	r1, r2, #0
   12adc:	1c02      	adds	r2, r0, #0
   12ade:	430a      	orrs	r2, r1
   12ae0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   12ae2:	687b      	ldr	r3, [r7, #4]
   12ae4:	789a      	ldrb	r2, [r3, #2]
   12ae6:	230c      	movs	r3, #12
   12ae8:	18fb      	adds	r3, r7, r3
   12aea:	01d0      	lsls	r0, r2, #7
   12aec:	781a      	ldrb	r2, [r3, #0]
   12aee:	217f      	movs	r1, #127	; 0x7f
   12af0:	400a      	ands	r2, r1
   12af2:	1c11      	adds	r1, r2, #0
   12af4:	1c02      	adds	r2, r0, #0
   12af6:	430a      	orrs	r2, r1
   12af8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12afa:	687b      	ldr	r3, [r7, #4]
   12afc:	785a      	ldrb	r2, [r3, #1]
   12afe:	230c      	movs	r3, #12
   12b00:	18fb      	adds	r3, r7, r3
   12b02:	2101      	movs	r1, #1
   12b04:	400a      	ands	r2, r1
   12b06:	0190      	lsls	r0, r2, #6
   12b08:	781a      	ldrb	r2, [r3, #0]
   12b0a:	2140      	movs	r1, #64	; 0x40
   12b0c:	438a      	bics	r2, r1
   12b0e:	1c11      	adds	r1, r2, #0
   12b10:	1c02      	adds	r2, r0, #0
   12b12:	430a      	orrs	r2, r1
   12b14:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   12b16:	4b03      	ldr	r3, [pc, #12]	; (12b24 <system_clock_source_osc8m_set_config+0x74>)
   12b18:	68fa      	ldr	r2, [r7, #12]
   12b1a:	621a      	str	r2, [r3, #32]
}
   12b1c:	46c0      	nop			; (mov r8, r8)
   12b1e:	46bd      	mov	sp, r7
   12b20:	b004      	add	sp, #16
   12b22:	bd80      	pop	{r7, pc}
   12b24:	40000800 	.word	0x40000800

00012b28 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   12b28:	b580      	push	{r7, lr}
   12b2a:	b084      	sub	sp, #16
   12b2c:	af00      	add	r7, sp, #0
   12b2e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   12b30:	4a43      	ldr	r2, [pc, #268]	; (12c40 <system_clock_source_xosc32k_set_config+0x118>)
   12b32:	230c      	movs	r3, #12
   12b34:	18fb      	adds	r3, r7, r3
   12b36:	8a92      	ldrh	r2, [r2, #20]
   12b38:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	785b      	ldrb	r3, [r3, #1]
   12b3e:	1c1a      	adds	r2, r3, #0
   12b40:	2307      	movs	r3, #7
   12b42:	4013      	ands	r3, r2
   12b44:	b2da      	uxtb	r2, r3
   12b46:	230c      	movs	r3, #12
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	2107      	movs	r1, #7
   12b4c:	400a      	ands	r2, r1
   12b4e:	0010      	movs	r0, r2
   12b50:	785a      	ldrb	r2, [r3, #1]
   12b52:	2107      	movs	r1, #7
   12b54:	438a      	bics	r2, r1
   12b56:	1c11      	adds	r1, r2, #0
   12b58:	1c02      	adds	r2, r0, #0
   12b5a:	430a      	orrs	r2, r1
   12b5c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   12b5e:	687b      	ldr	r3, [r7, #4]
   12b60:	781b      	ldrb	r3, [r3, #0]
   12b62:	2b00      	cmp	r3, #0
   12b64:	d106      	bne.n	12b74 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   12b66:	230c      	movs	r3, #12
   12b68:	18fb      	adds	r3, r7, r3
   12b6a:	781a      	ldrb	r2, [r3, #0]
   12b6c:	2104      	movs	r1, #4
   12b6e:	430a      	orrs	r2, r1
   12b70:	701a      	strb	r2, [r3, #0]
   12b72:	e005      	b.n	12b80 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   12b74:	230c      	movs	r3, #12
   12b76:	18fb      	adds	r3, r7, r3
   12b78:	781a      	ldrb	r2, [r3, #0]
   12b7a:	2104      	movs	r1, #4
   12b7c:	438a      	bics	r2, r1
   12b7e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   12b80:	687b      	ldr	r3, [r7, #4]
   12b82:	789a      	ldrb	r2, [r3, #2]
   12b84:	230c      	movs	r3, #12
   12b86:	18fb      	adds	r3, r7, r3
   12b88:	2101      	movs	r1, #1
   12b8a:	400a      	ands	r2, r1
   12b8c:	0150      	lsls	r0, r2, #5
   12b8e:	781a      	ldrb	r2, [r3, #0]
   12b90:	2120      	movs	r1, #32
   12b92:	438a      	bics	r2, r1
   12b94:	1c11      	adds	r1, r2, #0
   12b96:	1c02      	adds	r2, r0, #0
   12b98:	430a      	orrs	r2, r1
   12b9a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   12b9c:	687b      	ldr	r3, [r7, #4]
   12b9e:	78da      	ldrb	r2, [r3, #3]
   12ba0:	230c      	movs	r3, #12
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	2101      	movs	r1, #1
   12ba6:	400a      	ands	r2, r1
   12ba8:	0110      	lsls	r0, r2, #4
   12baa:	781a      	ldrb	r2, [r3, #0]
   12bac:	2110      	movs	r1, #16
   12bae:	438a      	bics	r2, r1
   12bb0:	1c11      	adds	r1, r2, #0
   12bb2:	1c02      	adds	r2, r0, #0
   12bb4:	430a      	orrs	r2, r1
   12bb6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   12bb8:	687b      	ldr	r3, [r7, #4]
   12bba:	791a      	ldrb	r2, [r3, #4]
   12bbc:	230c      	movs	r3, #12
   12bbe:	18fb      	adds	r3, r7, r3
   12bc0:	2101      	movs	r1, #1
   12bc2:	400a      	ands	r2, r1
   12bc4:	00d0      	lsls	r0, r2, #3
   12bc6:	781a      	ldrb	r2, [r3, #0]
   12bc8:	2108      	movs	r1, #8
   12bca:	438a      	bics	r2, r1
   12bcc:	1c11      	adds	r1, r2, #0
   12bce:	1c02      	adds	r2, r0, #0
   12bd0:	430a      	orrs	r2, r1
   12bd2:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   12bd4:	687b      	ldr	r3, [r7, #4]
   12bd6:	7b5a      	ldrb	r2, [r3, #13]
   12bd8:	230c      	movs	r3, #12
   12bda:	18fb      	adds	r3, r7, r3
   12bdc:	01d0      	lsls	r0, r2, #7
   12bde:	781a      	ldrb	r2, [r3, #0]
   12be0:	217f      	movs	r1, #127	; 0x7f
   12be2:	400a      	ands	r2, r1
   12be4:	1c11      	adds	r1, r2, #0
   12be6:	1c02      	adds	r2, r0, #0
   12be8:	430a      	orrs	r2, r1
   12bea:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12bec:	687b      	ldr	r3, [r7, #4]
   12bee:	7b1a      	ldrb	r2, [r3, #12]
   12bf0:	230c      	movs	r3, #12
   12bf2:	18fb      	adds	r3, r7, r3
   12bf4:	2101      	movs	r1, #1
   12bf6:	400a      	ands	r2, r1
   12bf8:	0190      	lsls	r0, r2, #6
   12bfa:	781a      	ldrb	r2, [r3, #0]
   12bfc:	2140      	movs	r1, #64	; 0x40
   12bfe:	438a      	bics	r2, r1
   12c00:	1c11      	adds	r1, r2, #0
   12c02:	1c02      	adds	r2, r0, #0
   12c04:	430a      	orrs	r2, r1
   12c06:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   12c08:	687b      	ldr	r3, [r7, #4]
   12c0a:	7b9a      	ldrb	r2, [r3, #14]
   12c0c:	230c      	movs	r3, #12
   12c0e:	18fb      	adds	r3, r7, r3
   12c10:	2101      	movs	r1, #1
   12c12:	400a      	ands	r2, r1
   12c14:	0110      	lsls	r0, r2, #4
   12c16:	785a      	ldrb	r2, [r3, #1]
   12c18:	2110      	movs	r1, #16
   12c1a:	438a      	bics	r2, r1
   12c1c:	1c11      	adds	r1, r2, #0
   12c1e:	1c02      	adds	r2, r0, #0
   12c20:	430a      	orrs	r2, r1
   12c22:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   12c24:	687b      	ldr	r3, [r7, #4]
   12c26:	689a      	ldr	r2, [r3, #8]
   12c28:	4b06      	ldr	r3, [pc, #24]	; (12c44 <system_clock_source_xosc32k_set_config+0x11c>)
   12c2a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   12c2c:	4a04      	ldr	r2, [pc, #16]	; (12c40 <system_clock_source_xosc32k_set_config+0x118>)
   12c2e:	230c      	movs	r3, #12
   12c30:	18fb      	adds	r3, r7, r3
   12c32:	881b      	ldrh	r3, [r3, #0]
   12c34:	8293      	strh	r3, [r2, #20]
}
   12c36:	46c0      	nop			; (mov r8, r8)
   12c38:	46bd      	mov	sp, r7
   12c3a:	b004      	add	sp, #16
   12c3c:	bd80      	pop	{r7, pc}
   12c3e:	46c0      	nop			; (mov r8, r8)
   12c40:	40000800 	.word	0x40000800
   12c44:	200004e0 	.word	0x200004e0

00012c48 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   12c48:	b580      	push	{r7, lr}
   12c4a:	b082      	sub	sp, #8
   12c4c:	af00      	add	r7, sp, #0
   12c4e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	7a1b      	ldrb	r3, [r3, #8]
   12c54:	029b      	lsls	r3, r3, #10
   12c56:	041b      	lsls	r3, r3, #16
   12c58:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   12c5a:	687b      	ldr	r3, [r7, #4]
   12c5c:	895b      	ldrh	r3, [r3, #10]
   12c5e:	059b      	lsls	r3, r3, #22
   12c60:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   12c62:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   12c64:	4b2a      	ldr	r3, [pc, #168]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12c66:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   12c68:	687b      	ldr	r3, [r7, #4]
   12c6a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   12c6c:	687b      	ldr	r3, [r7, #4]
   12c6e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   12c70:	4313      	orrs	r3, r2
   12c72:	b2db      	uxtb	r3, r3
   12c74:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   12c76:	687b      	ldr	r3, [r7, #4]
   12c78:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   12c7a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   12c7c:	687a      	ldr	r2, [r7, #4]
   12c7e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   12c80:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   12c82:	687b      	ldr	r3, [r7, #4]
   12c84:	785b      	ldrb	r3, [r3, #1]
   12c86:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   12c88:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   12c8a:	4b21      	ldr	r3, [pc, #132]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12c8c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   12c8e:	687b      	ldr	r3, [r7, #4]
   12c90:	781b      	ldrb	r3, [r3, #0]
   12c92:	2b04      	cmp	r3, #4
   12c94:	d116      	bne.n	12cc4 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12c96:	687b      	ldr	r3, [r7, #4]
   12c98:	7b1b      	ldrb	r3, [r3, #12]
   12c9a:	069b      	lsls	r3, r3, #26
   12c9c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12c9e:	687b      	ldr	r3, [r7, #4]
   12ca0:	89db      	ldrh	r3, [r3, #14]
   12ca2:	041b      	lsls	r3, r3, #16
   12ca4:	0019      	movs	r1, r3
   12ca6:	4b1b      	ldr	r3, [pc, #108]	; (12d14 <system_clock_source_dfll_set_config+0xcc>)
   12ca8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12caa:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   12cac:	687a      	ldr	r2, [r7, #4]
   12cae:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12cb0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   12cb2:	4b17      	ldr	r3, [pc, #92]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12cb4:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   12cb6:	4b16      	ldr	r3, [pc, #88]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12cb8:	681b      	ldr	r3, [r3, #0]
   12cba:	687a      	ldr	r2, [r7, #4]
   12cbc:	7812      	ldrb	r2, [r2, #0]
   12cbe:	431a      	orrs	r2, r3
   12cc0:	4b13      	ldr	r3, [pc, #76]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12cc2:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	781b      	ldrb	r3, [r3, #0]
   12cc8:	2b20      	cmp	r3, #32
   12cca:	d11c      	bne.n	12d06 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12ccc:	687b      	ldr	r3, [r7, #4]
   12cce:	7b1b      	ldrb	r3, [r3, #12]
   12cd0:	069b      	lsls	r3, r3, #26
   12cd2:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12cd4:	687b      	ldr	r3, [r7, #4]
   12cd6:	89db      	ldrh	r3, [r3, #14]
   12cd8:	041b      	lsls	r3, r3, #16
   12cda:	0019      	movs	r1, r3
   12cdc:	4b0d      	ldr	r3, [pc, #52]	; (12d14 <system_clock_source_dfll_set_config+0xcc>)
   12cde:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   12ce0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   12ce2:	687a      	ldr	r2, [r7, #4]
   12ce4:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   12ce6:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   12ce8:	4b09      	ldr	r3, [pc, #36]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12cea:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   12cec:	4b08      	ldr	r3, [pc, #32]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	687a      	ldr	r2, [r7, #4]
   12cf2:	7812      	ldrb	r2, [r2, #0]
   12cf4:	2104      	movs	r1, #4
   12cf6:	430a      	orrs	r2, r1
   12cf8:	b2d2      	uxtb	r2, r2
   12cfa:	4313      	orrs	r3, r2
   12cfc:	2280      	movs	r2, #128	; 0x80
   12cfe:	00d2      	lsls	r2, r2, #3
   12d00:	431a      	orrs	r2, r3
   12d02:	4b03      	ldr	r3, [pc, #12]	; (12d10 <system_clock_source_dfll_set_config+0xc8>)
   12d04:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   12d06:	46c0      	nop			; (mov r8, r8)
   12d08:	46bd      	mov	sp, r7
   12d0a:	b002      	add	sp, #8
   12d0c:	bd80      	pop	{r7, pc}
   12d0e:	46c0      	nop			; (mov r8, r8)
   12d10:	200004e0 	.word	0x200004e0
   12d14:	03ff0000 	.word	0x03ff0000

00012d18 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   12d18:	b580      	push	{r7, lr}
   12d1a:	b082      	sub	sp, #8
   12d1c:	af00      	add	r7, sp, #0
   12d1e:	0002      	movs	r2, r0
   12d20:	1dfb      	adds	r3, r7, #7
   12d22:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12d24:	1dfb      	adds	r3, r7, #7
   12d26:	781b      	ldrb	r3, [r3, #0]
   12d28:	2b08      	cmp	r3, #8
   12d2a:	d83b      	bhi.n	12da4 <system_clock_source_enable+0x8c>
   12d2c:	009a      	lsls	r2, r3, #2
   12d2e:	4b21      	ldr	r3, [pc, #132]	; (12db4 <system_clock_source_enable+0x9c>)
   12d30:	18d3      	adds	r3, r2, r3
   12d32:	681b      	ldr	r3, [r3, #0]
   12d34:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   12d36:	4b20      	ldr	r3, [pc, #128]	; (12db8 <system_clock_source_enable+0xa0>)
   12d38:	4a1f      	ldr	r2, [pc, #124]	; (12db8 <system_clock_source_enable+0xa0>)
   12d3a:	6a12      	ldr	r2, [r2, #32]
   12d3c:	2102      	movs	r1, #2
   12d3e:	430a      	orrs	r2, r1
   12d40:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   12d42:	2300      	movs	r3, #0
   12d44:	e031      	b.n	12daa <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   12d46:	4b1c      	ldr	r3, [pc, #112]	; (12db8 <system_clock_source_enable+0xa0>)
   12d48:	4a1b      	ldr	r2, [pc, #108]	; (12db8 <system_clock_source_enable+0xa0>)
   12d4a:	6992      	ldr	r2, [r2, #24]
   12d4c:	2102      	movs	r1, #2
   12d4e:	430a      	orrs	r2, r1
   12d50:	619a      	str	r2, [r3, #24]
		break;
   12d52:	e029      	b.n	12da8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   12d54:	4a18      	ldr	r2, [pc, #96]	; (12db8 <system_clock_source_enable+0xa0>)
   12d56:	4b18      	ldr	r3, [pc, #96]	; (12db8 <system_clock_source_enable+0xa0>)
   12d58:	8a1b      	ldrh	r3, [r3, #16]
   12d5a:	b29b      	uxth	r3, r3
   12d5c:	2102      	movs	r1, #2
   12d5e:	430b      	orrs	r3, r1
   12d60:	b29b      	uxth	r3, r3
   12d62:	8213      	strh	r3, [r2, #16]
		break;
   12d64:	e020      	b.n	12da8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   12d66:	4a14      	ldr	r2, [pc, #80]	; (12db8 <system_clock_source_enable+0xa0>)
   12d68:	4b13      	ldr	r3, [pc, #76]	; (12db8 <system_clock_source_enable+0xa0>)
   12d6a:	8a9b      	ldrh	r3, [r3, #20]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2102      	movs	r1, #2
   12d70:	430b      	orrs	r3, r1
   12d72:	b29b      	uxth	r3, r3
   12d74:	8293      	strh	r3, [r2, #20]
		break;
   12d76:	e017      	b.n	12da8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   12d78:	4b10      	ldr	r3, [pc, #64]	; (12dbc <system_clock_source_enable+0xa4>)
   12d7a:	681b      	ldr	r3, [r3, #0]
   12d7c:	2202      	movs	r2, #2
   12d7e:	431a      	orrs	r2, r3
   12d80:	4b0e      	ldr	r3, [pc, #56]	; (12dbc <system_clock_source_enable+0xa4>)
   12d82:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   12d84:	4b0e      	ldr	r3, [pc, #56]	; (12dc0 <system_clock_source_enable+0xa8>)
   12d86:	4798      	blx	r3
		break;
   12d88:	e00e      	b.n	12da8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   12d8a:	4a0b      	ldr	r2, [pc, #44]	; (12db8 <system_clock_source_enable+0xa0>)
   12d8c:	490a      	ldr	r1, [pc, #40]	; (12db8 <system_clock_source_enable+0xa0>)
   12d8e:	2344      	movs	r3, #68	; 0x44
   12d90:	5ccb      	ldrb	r3, [r1, r3]
   12d92:	b2db      	uxtb	r3, r3
   12d94:	2102      	movs	r1, #2
   12d96:	430b      	orrs	r3, r1
   12d98:	b2d9      	uxtb	r1, r3
   12d9a:	2344      	movs	r3, #68	; 0x44
   12d9c:	54d1      	strb	r1, [r2, r3]
		break;
   12d9e:	e003      	b.n	12da8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   12da0:	2300      	movs	r3, #0
   12da2:	e002      	b.n	12daa <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   12da4:	2317      	movs	r3, #23
   12da6:	e000      	b.n	12daa <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   12da8:	2300      	movs	r3, #0
}
   12daa:	0018      	movs	r0, r3
   12dac:	46bd      	mov	sp, r7
   12dae:	b002      	add	sp, #8
   12db0:	bd80      	pop	{r7, pc}
   12db2:	46c0      	nop			; (mov r8, r8)
   12db4:	000195e4 	.word	0x000195e4
   12db8:	40000800 	.word	0x40000800
   12dbc:	200004e0 	.word	0x200004e0
   12dc0:	000129ad 	.word	0x000129ad

00012dc4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   12dc4:	b580      	push	{r7, lr}
   12dc6:	b084      	sub	sp, #16
   12dc8:	af00      	add	r7, sp, #0
   12dca:	0002      	movs	r2, r0
   12dcc:	1dfb      	adds	r3, r7, #7
   12dce:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   12dd0:	2300      	movs	r3, #0
   12dd2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   12dd4:	1dfb      	adds	r3, r7, #7
   12dd6:	781b      	ldrb	r3, [r3, #0]
   12dd8:	2b08      	cmp	r3, #8
   12dda:	d821      	bhi.n	12e20 <system_clock_source_is_ready+0x5c>
   12ddc:	009a      	lsls	r2, r3, #2
   12dde:	4b18      	ldr	r3, [pc, #96]	; (12e40 <system_clock_source_is_ready+0x7c>)
   12de0:	18d3      	adds	r3, r2, r3
   12de2:	681b      	ldr	r3, [r3, #0]
   12de4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   12de6:	2308      	movs	r3, #8
   12de8:	60fb      	str	r3, [r7, #12]
		break;
   12dea:	e01b      	b.n	12e24 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   12dec:	2304      	movs	r3, #4
   12dee:	60fb      	str	r3, [r7, #12]
		break;
   12df0:	e018      	b.n	12e24 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   12df2:	2301      	movs	r3, #1
   12df4:	60fb      	str	r3, [r7, #12]
		break;
   12df6:	e015      	b.n	12e24 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   12df8:	2302      	movs	r3, #2
   12dfa:	60fb      	str	r3, [r7, #12]
		break;
   12dfc:	e012      	b.n	12e24 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   12dfe:	23d0      	movs	r3, #208	; 0xd0
   12e00:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   12e02:	e00f      	b.n	12e24 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   12e04:	4a0f      	ldr	r2, [pc, #60]	; (12e44 <system_clock_source_is_ready+0x80>)
   12e06:	2350      	movs	r3, #80	; 0x50
   12e08:	5cd3      	ldrb	r3, [r2, r3]
   12e0a:	b2db      	uxtb	r3, r3
   12e0c:	001a      	movs	r2, r3
   12e0e:	2303      	movs	r3, #3
   12e10:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   12e12:	3b03      	subs	r3, #3
   12e14:	425a      	negs	r2, r3
   12e16:	4153      	adcs	r3, r2
   12e18:	b2db      	uxtb	r3, r3
   12e1a:	e00c      	b.n	12e36 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   12e1c:	2301      	movs	r3, #1
   12e1e:	e00a      	b.n	12e36 <system_clock_source_is_ready+0x72>

	default:
		return false;
   12e20:	2300      	movs	r3, #0
   12e22:	e008      	b.n	12e36 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   12e24:	4b07      	ldr	r3, [pc, #28]	; (12e44 <system_clock_source_is_ready+0x80>)
   12e26:	68db      	ldr	r3, [r3, #12]
   12e28:	68fa      	ldr	r2, [r7, #12]
   12e2a:	401a      	ands	r2, r3
   12e2c:	68fb      	ldr	r3, [r7, #12]
   12e2e:	1ad3      	subs	r3, r2, r3
   12e30:	425a      	negs	r2, r3
   12e32:	4153      	adcs	r3, r2
   12e34:	b2db      	uxtb	r3, r3
}
   12e36:	0018      	movs	r0, r3
   12e38:	46bd      	mov	sp, r7
   12e3a:	b004      	add	sp, #16
   12e3c:	bd80      	pop	{r7, pc}
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	00019608 	.word	0x00019608
   12e44:	40000800 	.word	0x40000800

00012e48 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   12e48:	b580      	push	{r7, lr}
   12e4a:	b082      	sub	sp, #8
   12e4c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   12e4e:	003b      	movs	r3, r7
   12e50:	2202      	movs	r2, #2
   12e52:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   12e54:	2300      	movs	r3, #0
   12e56:	607b      	str	r3, [r7, #4]
   12e58:	e009      	b.n	12e6e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   12e5a:	687b      	ldr	r3, [r7, #4]
   12e5c:	b2db      	uxtb	r3, r3
   12e5e:	003a      	movs	r2, r7
   12e60:	0011      	movs	r1, r2
   12e62:	0018      	movs	r0, r3
   12e64:	4b05      	ldr	r3, [pc, #20]	; (12e7c <_switch_peripheral_gclk+0x34>)
   12e66:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	3301      	adds	r3, #1
   12e6c:	607b      	str	r3, [r7, #4]
   12e6e:	687b      	ldr	r3, [r7, #4]
   12e70:	2b24      	cmp	r3, #36	; 0x24
   12e72:	d9f2      	bls.n	12e5a <_switch_peripheral_gclk+0x12>
	}
}
   12e74:	46c0      	nop			; (mov r8, r8)
   12e76:	46bd      	mov	sp, r7
   12e78:	b002      	add	sp, #8
   12e7a:	bd80      	pop	{r7, pc}
   12e7c:	0001350d 	.word	0x0001350d

00012e80 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   12e80:	b580      	push	{r7, lr}
   12e82:	b0aa      	sub	sp, #168	; 0xa8
   12e84:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   12e86:	4bc1      	ldr	r3, [pc, #772]	; (1318c <system_clock_init+0x30c>)
   12e88:	22c2      	movs	r2, #194	; 0xc2
   12e8a:	00d2      	lsls	r2, r2, #3
   12e8c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   12e8e:	2002      	movs	r0, #2
   12e90:	4bbf      	ldr	r3, [pc, #764]	; (13190 <system_clock_init+0x310>)
   12e92:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   12e94:	4bbf      	ldr	r3, [pc, #764]	; (13194 <system_clock_init+0x314>)
   12e96:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   12e98:	2394      	movs	r3, #148	; 0x94
   12e9a:	18fb      	adds	r3, r7, r3
   12e9c:	0018      	movs	r0, r3
   12e9e:	4bbe      	ldr	r3, [pc, #760]	; (13198 <system_clock_init+0x318>)
   12ea0:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   12ea2:	2394      	movs	r3, #148	; 0x94
   12ea4:	18fb      	adds	r3, r7, r3
   12ea6:	2280      	movs	r2, #128	; 0x80
   12ea8:	0212      	lsls	r2, r2, #8
   12eaa:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   12eac:	2394      	movs	r3, #148	; 0x94
   12eae:	18fb      	adds	r3, r7, r3
   12eb0:	2200      	movs	r2, #0
   12eb2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   12eb4:	2394      	movs	r3, #148	; 0x94
   12eb6:	18fb      	adds	r3, r7, r3
   12eb8:	2206      	movs	r2, #6
   12eba:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   12ebc:	2394      	movs	r3, #148	; 0x94
   12ebe:	18fb      	adds	r3, r7, r3
   12ec0:	2200      	movs	r2, #0
   12ec2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   12ec4:	2394      	movs	r3, #148	; 0x94
   12ec6:	18fb      	adds	r3, r7, r3
   12ec8:	2200      	movs	r2, #0
   12eca:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   12ecc:	2394      	movs	r3, #148	; 0x94
   12ece:	18fb      	adds	r3, r7, r3
   12ed0:	2201      	movs	r2, #1
   12ed2:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   12ed4:	2394      	movs	r3, #148	; 0x94
   12ed6:	18fb      	adds	r3, r7, r3
   12ed8:	2200      	movs	r2, #0
   12eda:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   12edc:	2394      	movs	r3, #148	; 0x94
   12ede:	18fb      	adds	r3, r7, r3
   12ee0:	2201      	movs	r2, #1
   12ee2:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   12ee4:	2394      	movs	r3, #148	; 0x94
   12ee6:	18fb      	adds	r3, r7, r3
   12ee8:	0018      	movs	r0, r3
   12eea:	4bac      	ldr	r3, [pc, #688]	; (1319c <system_clock_init+0x31c>)
   12eec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   12eee:	2005      	movs	r0, #5
   12ef0:	4bab      	ldr	r3, [pc, #684]	; (131a0 <system_clock_init+0x320>)
   12ef2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   12ef4:	46c0      	nop			; (mov r8, r8)
   12ef6:	2005      	movs	r0, #5
   12ef8:	4baa      	ldr	r3, [pc, #680]	; (131a4 <system_clock_init+0x324>)
   12efa:	4798      	blx	r3
   12efc:	0003      	movs	r3, r0
   12efe:	001a      	movs	r2, r3
   12f00:	2301      	movs	r3, #1
   12f02:	4053      	eors	r3, r2
   12f04:	b2db      	uxtb	r3, r3
   12f06:	2b00      	cmp	r3, #0
   12f08:	d1f5      	bne.n	12ef6 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   12f0a:	2380      	movs	r3, #128	; 0x80
   12f0c:	18fb      	adds	r3, r7, r3
   12f0e:	0018      	movs	r0, r3
   12f10:	4ba5      	ldr	r3, [pc, #660]	; (131a8 <system_clock_init+0x328>)
   12f12:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   12f14:	2380      	movs	r3, #128	; 0x80
   12f16:	18fb      	adds	r3, r7, r3
   12f18:	2204      	movs	r2, #4
   12f1a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   12f1c:	2380      	movs	r3, #128	; 0x80
   12f1e:	18fb      	adds	r3, r7, r3
   12f20:	2200      	movs	r2, #0
   12f22:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   12f24:	4ba1      	ldr	r3, [pc, #644]	; (131ac <system_clock_init+0x32c>)
   12f26:	681b      	ldr	r3, [r3, #0]
   12f28:	0e9b      	lsrs	r3, r3, #26
   12f2a:	22a4      	movs	r2, #164	; 0xa4
   12f2c:	18ba      	adds	r2, r7, r2
   12f2e:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   12f30:	23a4      	movs	r3, #164	; 0xa4
   12f32:	18fb      	adds	r3, r7, r3
   12f34:	681b      	ldr	r3, [r3, #0]
   12f36:	2b3f      	cmp	r3, #63	; 0x3f
   12f38:	d103      	bne.n	12f42 <system_clock_init+0xc2>
		coarse = 0x1f;
   12f3a:	231f      	movs	r3, #31
   12f3c:	22a4      	movs	r2, #164	; 0xa4
   12f3e:	18ba      	adds	r2, r7, r2
   12f40:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   12f42:	23a4      	movs	r3, #164	; 0xa4
   12f44:	18fb      	adds	r3, r7, r3
   12f46:	681b      	ldr	r3, [r3, #0]
   12f48:	b2da      	uxtb	r2, r3
   12f4a:	2380      	movs	r3, #128	; 0x80
   12f4c:	18fb      	adds	r3, r7, r3
   12f4e:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   12f50:	2380      	movs	r3, #128	; 0x80
   12f52:	18fb      	adds	r3, r7, r3
   12f54:	2200      	movs	r2, #0
   12f56:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   12f58:	2380      	movs	r3, #128	; 0x80
   12f5a:	18fb      	adds	r3, r7, r3
   12f5c:	2200      	movs	r2, #0
   12f5e:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   12f60:	2380      	movs	r3, #128	; 0x80
   12f62:	18fb      	adds	r3, r7, r3
   12f64:	2200      	movs	r2, #0
   12f66:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   12f68:	2380      	movs	r3, #128	; 0x80
   12f6a:	18fb      	adds	r3, r7, r3
   12f6c:	2200      	movs	r2, #0
   12f6e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   12f70:	2380      	movs	r3, #128	; 0x80
   12f72:	18fb      	adds	r3, r7, r3
   12f74:	22b7      	movs	r2, #183	; 0xb7
   12f76:	00d2      	lsls	r2, r2, #3
   12f78:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   12f7a:	2380      	movs	r3, #128	; 0x80
   12f7c:	18fb      	adds	r3, r7, r3
   12f7e:	2203      	movs	r2, #3
   12f80:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   12f82:	2380      	movs	r3, #128	; 0x80
   12f84:	18fb      	adds	r3, r7, r3
   12f86:	221f      	movs	r2, #31
   12f88:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   12f8a:	2380      	movs	r3, #128	; 0x80
   12f8c:	18fb      	adds	r3, r7, r3
   12f8e:	0018      	movs	r0, r3
   12f90:	4b87      	ldr	r3, [pc, #540]	; (131b0 <system_clock_init+0x330>)
   12f92:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   12f94:	237c      	movs	r3, #124	; 0x7c
   12f96:	18fb      	adds	r3, r7, r3
   12f98:	0018      	movs	r0, r3
   12f9a:	4b86      	ldr	r3, [pc, #536]	; (131b4 <system_clock_init+0x334>)
   12f9c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   12f9e:	237c      	movs	r3, #124	; 0x7c
   12fa0:	18fb      	adds	r3, r7, r3
   12fa2:	2200      	movs	r2, #0
   12fa4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   12fa6:	237c      	movs	r3, #124	; 0x7c
   12fa8:	18fb      	adds	r3, r7, r3
   12faa:	2201      	movs	r2, #1
   12fac:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   12fae:	237c      	movs	r3, #124	; 0x7c
   12fb0:	18fb      	adds	r3, r7, r3
   12fb2:	2201      	movs	r2, #1
   12fb4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   12fb6:	237c      	movs	r3, #124	; 0x7c
   12fb8:	18fb      	adds	r3, r7, r3
   12fba:	0018      	movs	r0, r3
   12fbc:	4b7e      	ldr	r3, [pc, #504]	; (131b8 <system_clock_init+0x338>)
   12fbe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   12fc0:	2006      	movs	r0, #6
   12fc2:	4b77      	ldr	r3, [pc, #476]	; (131a0 <system_clock_init+0x320>)
   12fc4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   12fc6:	4b7d      	ldr	r3, [pc, #500]	; (131bc <system_clock_init+0x33c>)
   12fc8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   12fca:	2364      	movs	r3, #100	; 0x64
   12fcc:	18fb      	adds	r3, r7, r3
   12fce:	0018      	movs	r0, r3
   12fd0:	4b7b      	ldr	r3, [pc, #492]	; (131c0 <system_clock_init+0x340>)
   12fd2:	4798      	blx	r3
   12fd4:	2364      	movs	r3, #100	; 0x64
   12fd6:	18fb      	adds	r3, r7, r3
   12fd8:	2205      	movs	r2, #5
   12fda:	701a      	strb	r2, [r3, #0]
   12fdc:	2364      	movs	r3, #100	; 0x64
   12fde:	18fb      	adds	r3, r7, r3
   12fe0:	2201      	movs	r2, #1
   12fe2:	605a      	str	r2, [r3, #4]
   12fe4:	2364      	movs	r3, #100	; 0x64
   12fe6:	18fb      	adds	r3, r7, r3
   12fe8:	2200      	movs	r2, #0
   12fea:	721a      	strb	r2, [r3, #8]
   12fec:	2364      	movs	r3, #100	; 0x64
   12fee:	18fb      	adds	r3, r7, r3
   12ff0:	2200      	movs	r2, #0
   12ff2:	725a      	strb	r2, [r3, #9]
   12ff4:	2364      	movs	r3, #100	; 0x64
   12ff6:	18fb      	adds	r3, r7, r3
   12ff8:	0019      	movs	r1, r3
   12ffa:	2001      	movs	r0, #1
   12ffc:	4b71      	ldr	r3, [pc, #452]	; (131c4 <system_clock_init+0x344>)
   12ffe:	4798      	blx	r3
   13000:	2001      	movs	r0, #1
   13002:	4b71      	ldr	r3, [pc, #452]	; (131c8 <system_clock_init+0x348>)
   13004:	4798      	blx	r3
   13006:	234c      	movs	r3, #76	; 0x4c
   13008:	18fb      	adds	r3, r7, r3
   1300a:	0018      	movs	r0, r3
   1300c:	4b6c      	ldr	r3, [pc, #432]	; (131c0 <system_clock_init+0x340>)
   1300e:	4798      	blx	r3
   13010:	234c      	movs	r3, #76	; 0x4c
   13012:	18fb      	adds	r3, r7, r3
   13014:	2206      	movs	r2, #6
   13016:	701a      	strb	r2, [r3, #0]
   13018:	234c      	movs	r3, #76	; 0x4c
   1301a:	18fb      	adds	r3, r7, r3
   1301c:	2201      	movs	r2, #1
   1301e:	605a      	str	r2, [r3, #4]
   13020:	234c      	movs	r3, #76	; 0x4c
   13022:	18fb      	adds	r3, r7, r3
   13024:	2201      	movs	r2, #1
   13026:	721a      	strb	r2, [r3, #8]
   13028:	234c      	movs	r3, #76	; 0x4c
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	2200      	movs	r2, #0
   1302e:	725a      	strb	r2, [r3, #9]
   13030:	234c      	movs	r3, #76	; 0x4c
   13032:	18fb      	adds	r3, r7, r3
   13034:	0019      	movs	r1, r3
   13036:	2003      	movs	r0, #3
   13038:	4b62      	ldr	r3, [pc, #392]	; (131c4 <system_clock_init+0x344>)
   1303a:	4798      	blx	r3
   1303c:	2003      	movs	r0, #3
   1303e:	4b62      	ldr	r3, [pc, #392]	; (131c8 <system_clock_init+0x348>)
   13040:	4798      	blx	r3
   13042:	2340      	movs	r3, #64	; 0x40
   13044:	18fb      	adds	r3, r7, r3
   13046:	0018      	movs	r0, r3
   13048:	4b5d      	ldr	r3, [pc, #372]	; (131c0 <system_clock_init+0x340>)
   1304a:	4798      	blx	r3
   1304c:	2340      	movs	r3, #64	; 0x40
   1304e:	18fb      	adds	r3, r7, r3
   13050:	2203      	movs	r2, #3
   13052:	701a      	strb	r2, [r3, #0]
   13054:	2340      	movs	r3, #64	; 0x40
   13056:	18fb      	adds	r3, r7, r3
   13058:	2220      	movs	r2, #32
   1305a:	605a      	str	r2, [r3, #4]
   1305c:	2340      	movs	r3, #64	; 0x40
   1305e:	18fb      	adds	r3, r7, r3
   13060:	2200      	movs	r2, #0
   13062:	721a      	strb	r2, [r3, #8]
   13064:	2340      	movs	r3, #64	; 0x40
   13066:	18fb      	adds	r3, r7, r3
   13068:	2200      	movs	r2, #0
   1306a:	725a      	strb	r2, [r3, #9]
   1306c:	2340      	movs	r3, #64	; 0x40
   1306e:	18fb      	adds	r3, r7, r3
   13070:	0019      	movs	r1, r3
   13072:	2004      	movs	r0, #4
   13074:	4b53      	ldr	r3, [pc, #332]	; (131c4 <system_clock_init+0x344>)
   13076:	4798      	blx	r3
   13078:	2004      	movs	r0, #4
   1307a:	4b53      	ldr	r3, [pc, #332]	; (131c8 <system_clock_init+0x348>)
   1307c:	4798      	blx	r3
   1307e:	2334      	movs	r3, #52	; 0x34
   13080:	18fb      	adds	r3, r7, r3
   13082:	0018      	movs	r0, r3
   13084:	4b4e      	ldr	r3, [pc, #312]	; (131c0 <system_clock_init+0x340>)
   13086:	4798      	blx	r3
   13088:	2334      	movs	r3, #52	; 0x34
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	2207      	movs	r2, #7
   1308e:	701a      	strb	r2, [r3, #0]
   13090:	2334      	movs	r3, #52	; 0x34
   13092:	18fb      	adds	r3, r7, r3
   13094:	2201      	movs	r2, #1
   13096:	605a      	str	r2, [r3, #4]
   13098:	2334      	movs	r3, #52	; 0x34
   1309a:	18fb      	adds	r3, r7, r3
   1309c:	2200      	movs	r2, #0
   1309e:	721a      	strb	r2, [r3, #8]
   130a0:	2334      	movs	r3, #52	; 0x34
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	2200      	movs	r2, #0
   130a6:	725a      	strb	r2, [r3, #9]
   130a8:	2334      	movs	r3, #52	; 0x34
   130aa:	18fb      	adds	r3, r7, r3
   130ac:	0019      	movs	r1, r3
   130ae:	2005      	movs	r0, #5
   130b0:	4b44      	ldr	r3, [pc, #272]	; (131c4 <system_clock_init+0x344>)
   130b2:	4798      	blx	r3
   130b4:	2005      	movs	r0, #5
   130b6:	4b44      	ldr	r3, [pc, #272]	; (131c8 <system_clock_init+0x348>)
   130b8:	4798      	blx	r3
   130ba:	2328      	movs	r3, #40	; 0x28
   130bc:	18fb      	adds	r3, r7, r3
   130be:	0018      	movs	r0, r3
   130c0:	4b3f      	ldr	r3, [pc, #252]	; (131c0 <system_clock_init+0x340>)
   130c2:	4798      	blx	r3
   130c4:	2328      	movs	r3, #40	; 0x28
   130c6:	18fb      	adds	r3, r7, r3
   130c8:	2206      	movs	r2, #6
   130ca:	701a      	strb	r2, [r3, #0]
   130cc:	2328      	movs	r3, #40	; 0x28
   130ce:	18fb      	adds	r3, r7, r3
   130d0:	2201      	movs	r2, #1
   130d2:	605a      	str	r2, [r3, #4]
   130d4:	2328      	movs	r3, #40	; 0x28
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	2201      	movs	r2, #1
   130da:	721a      	strb	r2, [r3, #8]
   130dc:	2328      	movs	r3, #40	; 0x28
   130de:	18fb      	adds	r3, r7, r3
   130e0:	2200      	movs	r2, #0
   130e2:	725a      	strb	r2, [r3, #9]
   130e4:	2328      	movs	r3, #40	; 0x28
   130e6:	18fb      	adds	r3, r7, r3
   130e8:	0019      	movs	r1, r3
   130ea:	2006      	movs	r0, #6
   130ec:	4b35      	ldr	r3, [pc, #212]	; (131c4 <system_clock_init+0x344>)
   130ee:	4798      	blx	r3
   130f0:	2006      	movs	r0, #6
   130f2:	4b35      	ldr	r3, [pc, #212]	; (131c8 <system_clock_init+0x348>)
   130f4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   130f6:	230c      	movs	r3, #12
   130f8:	18fb      	adds	r3, r7, r3
   130fa:	0018      	movs	r0, r3
   130fc:	4b33      	ldr	r3, [pc, #204]	; (131cc <system_clock_init+0x34c>)
   130fe:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   13100:	230c      	movs	r3, #12
   13102:	18fb      	adds	r3, r7, r3
   13104:	2201      	movs	r2, #1
   13106:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   13108:	230c      	movs	r3, #12
   1310a:	18fb      	adds	r3, r7, r3
   1310c:	0019      	movs	r1, r3
   1310e:	2000      	movs	r0, #0
   13110:	4b2f      	ldr	r3, [pc, #188]	; (131d0 <system_clock_init+0x350>)
   13112:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   13114:	2000      	movs	r0, #0
   13116:	4b2f      	ldr	r3, [pc, #188]	; (131d4 <system_clock_init+0x354>)
   13118:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   1311a:	2007      	movs	r0, #7
   1311c:	4b20      	ldr	r3, [pc, #128]	; (131a0 <system_clock_init+0x320>)
   1311e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   13120:	46c0      	nop			; (mov r8, r8)
   13122:	2007      	movs	r0, #7
   13124:	4b1f      	ldr	r3, [pc, #124]	; (131a4 <system_clock_init+0x324>)
   13126:	4798      	blx	r3
   13128:	0003      	movs	r3, r0
   1312a:	001a      	movs	r2, r3
   1312c:	2301      	movs	r3, #1
   1312e:	4053      	eors	r3, r2
   13130:	b2db      	uxtb	r3, r3
   13132:	2b00      	cmp	r3, #0
   13134:	d1f5      	bne.n	13122 <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   13136:	2000      	movs	r0, #0
   13138:	4b27      	ldr	r3, [pc, #156]	; (131d8 <system_clock_init+0x358>)
   1313a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   1313c:	2100      	movs	r1, #0
   1313e:	2000      	movs	r0, #0
   13140:	4b26      	ldr	r3, [pc, #152]	; (131dc <system_clock_init+0x35c>)
   13142:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   13144:	2100      	movs	r1, #0
   13146:	2001      	movs	r0, #1
   13148:	4b24      	ldr	r3, [pc, #144]	; (131dc <system_clock_init+0x35c>)
   1314a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   1314c:	2100      	movs	r1, #0
   1314e:	2002      	movs	r0, #2
   13150:	4b22      	ldr	r3, [pc, #136]	; (131dc <system_clock_init+0x35c>)
   13152:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   13154:	003b      	movs	r3, r7
   13156:	0018      	movs	r0, r3
   13158:	4b19      	ldr	r3, [pc, #100]	; (131c0 <system_clock_init+0x340>)
   1315a:	4798      	blx	r3
   1315c:	003b      	movs	r3, r7
   1315e:	2207      	movs	r2, #7
   13160:	701a      	strb	r2, [r3, #0]
   13162:	003b      	movs	r3, r7
   13164:	2201      	movs	r2, #1
   13166:	605a      	str	r2, [r3, #4]
   13168:	003b      	movs	r3, r7
   1316a:	2200      	movs	r2, #0
   1316c:	721a      	strb	r2, [r3, #8]
   1316e:	003b      	movs	r3, r7
   13170:	2200      	movs	r2, #0
   13172:	725a      	strb	r2, [r3, #9]
   13174:	003b      	movs	r3, r7
   13176:	0019      	movs	r1, r3
   13178:	2000      	movs	r0, #0
   1317a:	4b12      	ldr	r3, [pc, #72]	; (131c4 <system_clock_init+0x344>)
   1317c:	4798      	blx	r3
   1317e:	2000      	movs	r0, #0
   13180:	4b11      	ldr	r3, [pc, #68]	; (131c8 <system_clock_init+0x348>)
   13182:	4798      	blx	r3
#endif
}
   13184:	46c0      	nop			; (mov r8, r8)
   13186:	46bd      	mov	sp, r7
   13188:	b02a      	add	sp, #168	; 0xa8
   1318a:	bd80      	pop	{r7, pc}
   1318c:	40000800 	.word	0x40000800
   13190:	0001295d 	.word	0x0001295d
   13194:	00012e49 	.word	0x00012e49
   13198:	0001282d 	.word	0x0001282d
   1319c:	00012b29 	.word	0x00012b29
   131a0:	00012d19 	.word	0x00012d19
   131a4:	00012dc5 	.word	0x00012dc5
   131a8:	00012897 	.word	0x00012897
   131ac:	00806024 	.word	0x00806024
   131b0:	00012c49 	.word	0x00012c49
   131b4:	00012875 	.word	0x00012875
   131b8:	00012ab1 	.word	0x00012ab1
   131bc:	00013285 	.word	0x00013285
   131c0:	000127e9 	.word	0x000127e9
   131c4:	000132b5 	.word	0x000132b5
   131c8:	000133d9 	.word	0x000133d9
   131cc:	00012817 	.word	0x00012817
   131d0:	0001350d 	.word	0x0001350d
   131d4:	00013551 	.word	0x00013551
   131d8:	000128e9 	.word	0x000128e9
   131dc:	00012909 	.word	0x00012909

000131e0 <system_apb_clock_set_mask>:
{
   131e0:	b580      	push	{r7, lr}
   131e2:	b082      	sub	sp, #8
   131e4:	af00      	add	r7, sp, #0
   131e6:	0002      	movs	r2, r0
   131e8:	6039      	str	r1, [r7, #0]
   131ea:	1dfb      	adds	r3, r7, #7
   131ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   131ee:	1dfb      	adds	r3, r7, #7
   131f0:	781b      	ldrb	r3, [r3, #0]
   131f2:	2b01      	cmp	r3, #1
   131f4:	d00a      	beq.n	1320c <system_apb_clock_set_mask+0x2c>
   131f6:	2b02      	cmp	r3, #2
   131f8:	d00f      	beq.n	1321a <system_apb_clock_set_mask+0x3a>
   131fa:	2b00      	cmp	r3, #0
   131fc:	d114      	bne.n	13228 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   131fe:	4b0e      	ldr	r3, [pc, #56]	; (13238 <system_apb_clock_set_mask+0x58>)
   13200:	4a0d      	ldr	r2, [pc, #52]	; (13238 <system_apb_clock_set_mask+0x58>)
   13202:	6991      	ldr	r1, [r2, #24]
   13204:	683a      	ldr	r2, [r7, #0]
   13206:	430a      	orrs	r2, r1
   13208:	619a      	str	r2, [r3, #24]
			break;
   1320a:	e00f      	b.n	1322c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1320c:	4b0a      	ldr	r3, [pc, #40]	; (13238 <system_apb_clock_set_mask+0x58>)
   1320e:	4a0a      	ldr	r2, [pc, #40]	; (13238 <system_apb_clock_set_mask+0x58>)
   13210:	69d1      	ldr	r1, [r2, #28]
   13212:	683a      	ldr	r2, [r7, #0]
   13214:	430a      	orrs	r2, r1
   13216:	61da      	str	r2, [r3, #28]
			break;
   13218:	e008      	b.n	1322c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1321a:	4b07      	ldr	r3, [pc, #28]	; (13238 <system_apb_clock_set_mask+0x58>)
   1321c:	4a06      	ldr	r2, [pc, #24]	; (13238 <system_apb_clock_set_mask+0x58>)
   1321e:	6a11      	ldr	r1, [r2, #32]
   13220:	683a      	ldr	r2, [r7, #0]
   13222:	430a      	orrs	r2, r1
   13224:	621a      	str	r2, [r3, #32]
			break;
   13226:	e001      	b.n	1322c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13228:	2317      	movs	r3, #23
   1322a:	e000      	b.n	1322e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1322c:	2300      	movs	r3, #0
}
   1322e:	0018      	movs	r0, r3
   13230:	46bd      	mov	sp, r7
   13232:	b002      	add	sp, #8
   13234:	bd80      	pop	{r7, pc}
   13236:	46c0      	nop			; (mov r8, r8)
   13238:	40000400 	.word	0x40000400

0001323c <system_interrupt_enter_critical_section>:
{
   1323c:	b580      	push	{r7, lr}
   1323e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13240:	4b02      	ldr	r3, [pc, #8]	; (1324c <system_interrupt_enter_critical_section+0x10>)
   13242:	4798      	blx	r3
}
   13244:	46c0      	nop			; (mov r8, r8)
   13246:	46bd      	mov	sp, r7
   13248:	bd80      	pop	{r7, pc}
   1324a:	46c0      	nop			; (mov r8, r8)
   1324c:	00012755 	.word	0x00012755

00013250 <system_interrupt_leave_critical_section>:
{
   13250:	b580      	push	{r7, lr}
   13252:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13254:	4b02      	ldr	r3, [pc, #8]	; (13260 <system_interrupt_leave_critical_section+0x10>)
   13256:	4798      	blx	r3
}
   13258:	46c0      	nop			; (mov r8, r8)
   1325a:	46bd      	mov	sp, r7
   1325c:	bd80      	pop	{r7, pc}
   1325e:	46c0      	nop			; (mov r8, r8)
   13260:	000127a9 	.word	0x000127a9

00013264 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   13264:	b580      	push	{r7, lr}
   13266:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   13268:	4b05      	ldr	r3, [pc, #20]	; (13280 <system_gclk_is_syncing+0x1c>)
   1326a:	785b      	ldrb	r3, [r3, #1]
   1326c:	b2db      	uxtb	r3, r3
   1326e:	b25b      	sxtb	r3, r3
   13270:	2b00      	cmp	r3, #0
   13272:	da01      	bge.n	13278 <system_gclk_is_syncing+0x14>
		return true;
   13274:	2301      	movs	r3, #1
   13276:	e000      	b.n	1327a <system_gclk_is_syncing+0x16>
	}

	return false;
   13278:	2300      	movs	r3, #0
}
   1327a:	0018      	movs	r0, r3
   1327c:	46bd      	mov	sp, r7
   1327e:	bd80      	pop	{r7, pc}
   13280:	40000c00 	.word	0x40000c00

00013284 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   13284:	b580      	push	{r7, lr}
   13286:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   13288:	2108      	movs	r1, #8
   1328a:	2000      	movs	r0, #0
   1328c:	4b07      	ldr	r3, [pc, #28]	; (132ac <system_gclk_init+0x28>)
   1328e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   13290:	4b07      	ldr	r3, [pc, #28]	; (132b0 <system_gclk_init+0x2c>)
   13292:	2201      	movs	r2, #1
   13294:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   13296:	46c0      	nop			; (mov r8, r8)
   13298:	4b05      	ldr	r3, [pc, #20]	; (132b0 <system_gclk_init+0x2c>)
   1329a:	781b      	ldrb	r3, [r3, #0]
   1329c:	b2db      	uxtb	r3, r3
   1329e:	001a      	movs	r2, r3
   132a0:	2301      	movs	r3, #1
   132a2:	4013      	ands	r3, r2
   132a4:	d1f8      	bne.n	13298 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   132a6:	46c0      	nop			; (mov r8, r8)
   132a8:	46bd      	mov	sp, r7
   132aa:	bd80      	pop	{r7, pc}
   132ac:	000131e1 	.word	0x000131e1
   132b0:	40000c00 	.word	0x40000c00

000132b4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   132b4:	b580      	push	{r7, lr}
   132b6:	b086      	sub	sp, #24
   132b8:	af00      	add	r7, sp, #0
   132ba:	0002      	movs	r2, r0
   132bc:	6039      	str	r1, [r7, #0]
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   132c2:	1dfb      	adds	r3, r7, #7
   132c4:	781b      	ldrb	r3, [r3, #0]
   132c6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   132c8:	1dfb      	adds	r3, r7, #7
   132ca:	781b      	ldrb	r3, [r3, #0]
   132cc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   132ce:	683b      	ldr	r3, [r7, #0]
   132d0:	781b      	ldrb	r3, [r3, #0]
   132d2:	021b      	lsls	r3, r3, #8
   132d4:	001a      	movs	r2, r3
   132d6:	697b      	ldr	r3, [r7, #20]
   132d8:	4313      	orrs	r3, r2
   132da:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   132dc:	683b      	ldr	r3, [r7, #0]
   132de:	785b      	ldrb	r3, [r3, #1]
   132e0:	2b00      	cmp	r3, #0
   132e2:	d004      	beq.n	132ee <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   132e4:	697b      	ldr	r3, [r7, #20]
   132e6:	2280      	movs	r2, #128	; 0x80
   132e8:	02d2      	lsls	r2, r2, #11
   132ea:	4313      	orrs	r3, r2
   132ec:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   132ee:	683b      	ldr	r3, [r7, #0]
   132f0:	7a5b      	ldrb	r3, [r3, #9]
   132f2:	2b00      	cmp	r3, #0
   132f4:	d004      	beq.n	13300 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   132f6:	697b      	ldr	r3, [r7, #20]
   132f8:	2280      	movs	r2, #128	; 0x80
   132fa:	0312      	lsls	r2, r2, #12
   132fc:	4313      	orrs	r3, r2
   132fe:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   13300:	683b      	ldr	r3, [r7, #0]
   13302:	685b      	ldr	r3, [r3, #4]
   13304:	2b01      	cmp	r3, #1
   13306:	d92c      	bls.n	13362 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	683b      	ldr	r3, [r7, #0]
   1330e:	685b      	ldr	r3, [r3, #4]
   13310:	3b01      	subs	r3, #1
   13312:	4013      	ands	r3, r2
   13314:	d11a      	bne.n	1334c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   13316:	2300      	movs	r3, #0
   13318:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1331a:	2302      	movs	r3, #2
   1331c:	60bb      	str	r3, [r7, #8]
   1331e:	e005      	b.n	1332c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   13320:	68fb      	ldr	r3, [r7, #12]
   13322:	3301      	adds	r3, #1
   13324:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   13326:	68bb      	ldr	r3, [r7, #8]
   13328:	005b      	lsls	r3, r3, #1
   1332a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1332c:	683b      	ldr	r3, [r7, #0]
   1332e:	685a      	ldr	r2, [r3, #4]
   13330:	68bb      	ldr	r3, [r7, #8]
   13332:	429a      	cmp	r2, r3
   13334:	d8f4      	bhi.n	13320 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   13336:	68fb      	ldr	r3, [r7, #12]
   13338:	021b      	lsls	r3, r3, #8
   1333a:	693a      	ldr	r2, [r7, #16]
   1333c:	4313      	orrs	r3, r2
   1333e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   13340:	697b      	ldr	r3, [r7, #20]
   13342:	2280      	movs	r2, #128	; 0x80
   13344:	0352      	lsls	r2, r2, #13
   13346:	4313      	orrs	r3, r2
   13348:	617b      	str	r3, [r7, #20]
   1334a:	e00a      	b.n	13362 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1334c:	683b      	ldr	r3, [r7, #0]
   1334e:	685b      	ldr	r3, [r3, #4]
   13350:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   13352:	693a      	ldr	r2, [r7, #16]
   13354:	4313      	orrs	r3, r2
   13356:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   13358:	697b      	ldr	r3, [r7, #20]
   1335a:	2280      	movs	r2, #128	; 0x80
   1335c:	0292      	lsls	r2, r2, #10
   1335e:	4313      	orrs	r3, r2
   13360:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   13362:	683b      	ldr	r3, [r7, #0]
   13364:	7a1b      	ldrb	r3, [r3, #8]
   13366:	2b00      	cmp	r3, #0
   13368:	d004      	beq.n	13374 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1336a:	697b      	ldr	r3, [r7, #20]
   1336c:	2280      	movs	r2, #128	; 0x80
   1336e:	0392      	lsls	r2, r2, #14
   13370:	4313      	orrs	r3, r2
   13372:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   13374:	46c0      	nop			; (mov r8, r8)
   13376:	4b13      	ldr	r3, [pc, #76]	; (133c4 <system_gclk_gen_set_config+0x110>)
   13378:	4798      	blx	r3
   1337a:	1e03      	subs	r3, r0, #0
   1337c:	d1fb      	bne.n	13376 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1337e:	4b12      	ldr	r3, [pc, #72]	; (133c8 <system_gclk_gen_set_config+0x114>)
   13380:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13382:	4a12      	ldr	r2, [pc, #72]	; (133cc <system_gclk_gen_set_config+0x118>)
   13384:	1dfb      	adds	r3, r7, #7
   13386:	781b      	ldrb	r3, [r3, #0]
   13388:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1338a:	46c0      	nop			; (mov r8, r8)
   1338c:	4b0d      	ldr	r3, [pc, #52]	; (133c4 <system_gclk_gen_set_config+0x110>)
   1338e:	4798      	blx	r3
   13390:	1e03      	subs	r3, r0, #0
   13392:	d1fb      	bne.n	1338c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   13394:	4b0e      	ldr	r3, [pc, #56]	; (133d0 <system_gclk_gen_set_config+0x11c>)
   13396:	693a      	ldr	r2, [r7, #16]
   13398:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1339a:	46c0      	nop			; (mov r8, r8)
   1339c:	4b09      	ldr	r3, [pc, #36]	; (133c4 <system_gclk_gen_set_config+0x110>)
   1339e:	4798      	blx	r3
   133a0:	1e03      	subs	r3, r0, #0
   133a2:	d1fb      	bne.n	1339c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   133a4:	4b0a      	ldr	r3, [pc, #40]	; (133d0 <system_gclk_gen_set_config+0x11c>)
   133a6:	4a0a      	ldr	r2, [pc, #40]	; (133d0 <system_gclk_gen_set_config+0x11c>)
   133a8:	6851      	ldr	r1, [r2, #4]
   133aa:	2280      	movs	r2, #128	; 0x80
   133ac:	0252      	lsls	r2, r2, #9
   133ae:	4011      	ands	r1, r2
   133b0:	697a      	ldr	r2, [r7, #20]
   133b2:	430a      	orrs	r2, r1
   133b4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   133b6:	4b07      	ldr	r3, [pc, #28]	; (133d4 <system_gclk_gen_set_config+0x120>)
   133b8:	4798      	blx	r3
}
   133ba:	46c0      	nop			; (mov r8, r8)
   133bc:	46bd      	mov	sp, r7
   133be:	b006      	add	sp, #24
   133c0:	bd80      	pop	{r7, pc}
   133c2:	46c0      	nop			; (mov r8, r8)
   133c4:	00013265 	.word	0x00013265
   133c8:	0001323d 	.word	0x0001323d
   133cc:	40000c08 	.word	0x40000c08
   133d0:	40000c00 	.word	0x40000c00
   133d4:	00013251 	.word	0x00013251

000133d8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   133d8:	b580      	push	{r7, lr}
   133da:	b082      	sub	sp, #8
   133dc:	af00      	add	r7, sp, #0
   133de:	0002      	movs	r2, r0
   133e0:	1dfb      	adds	r3, r7, #7
   133e2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   133e4:	46c0      	nop			; (mov r8, r8)
   133e6:	4b0e      	ldr	r3, [pc, #56]	; (13420 <system_gclk_gen_enable+0x48>)
   133e8:	4798      	blx	r3
   133ea:	1e03      	subs	r3, r0, #0
   133ec:	d1fb      	bne.n	133e6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   133ee:	4b0d      	ldr	r3, [pc, #52]	; (13424 <system_gclk_gen_enable+0x4c>)
   133f0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   133f2:	4a0d      	ldr	r2, [pc, #52]	; (13428 <system_gclk_gen_enable+0x50>)
   133f4:	1dfb      	adds	r3, r7, #7
   133f6:	781b      	ldrb	r3, [r3, #0]
   133f8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   133fa:	46c0      	nop			; (mov r8, r8)
   133fc:	4b08      	ldr	r3, [pc, #32]	; (13420 <system_gclk_gen_enable+0x48>)
   133fe:	4798      	blx	r3
   13400:	1e03      	subs	r3, r0, #0
   13402:	d1fb      	bne.n	133fc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   13404:	4b09      	ldr	r3, [pc, #36]	; (1342c <system_gclk_gen_enable+0x54>)
   13406:	4a09      	ldr	r2, [pc, #36]	; (1342c <system_gclk_gen_enable+0x54>)
   13408:	6852      	ldr	r2, [r2, #4]
   1340a:	2180      	movs	r1, #128	; 0x80
   1340c:	0249      	lsls	r1, r1, #9
   1340e:	430a      	orrs	r2, r1
   13410:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13412:	4b07      	ldr	r3, [pc, #28]	; (13430 <system_gclk_gen_enable+0x58>)
   13414:	4798      	blx	r3
}
   13416:	46c0      	nop			; (mov r8, r8)
   13418:	46bd      	mov	sp, r7
   1341a:	b002      	add	sp, #8
   1341c:	bd80      	pop	{r7, pc}
   1341e:	46c0      	nop			; (mov r8, r8)
   13420:	00013265 	.word	0x00013265
   13424:	0001323d 	.word	0x0001323d
   13428:	40000c04 	.word	0x40000c04
   1342c:	40000c00 	.word	0x40000c00
   13430:	00013251 	.word	0x00013251

00013434 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   13434:	b580      	push	{r7, lr}
   13436:	b086      	sub	sp, #24
   13438:	af00      	add	r7, sp, #0
   1343a:	0002      	movs	r2, r0
   1343c:	1dfb      	adds	r3, r7, #7
   1343e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13440:	46c0      	nop			; (mov r8, r8)
   13442:	4b2a      	ldr	r3, [pc, #168]	; (134ec <system_gclk_gen_get_hz+0xb8>)
   13444:	4798      	blx	r3
   13446:	1e03      	subs	r3, r0, #0
   13448:	d1fb      	bne.n	13442 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1344a:	4b29      	ldr	r3, [pc, #164]	; (134f0 <system_gclk_gen_get_hz+0xbc>)
   1344c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1344e:	4a29      	ldr	r2, [pc, #164]	; (134f4 <system_gclk_gen_get_hz+0xc0>)
   13450:	1dfb      	adds	r3, r7, #7
   13452:	781b      	ldrb	r3, [r3, #0]
   13454:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   13456:	46c0      	nop			; (mov r8, r8)
   13458:	4b24      	ldr	r3, [pc, #144]	; (134ec <system_gclk_gen_get_hz+0xb8>)
   1345a:	4798      	blx	r3
   1345c:	1e03      	subs	r3, r0, #0
   1345e:	d1fb      	bne.n	13458 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   13460:	4b25      	ldr	r3, [pc, #148]	; (134f8 <system_gclk_gen_get_hz+0xc4>)
   13462:	685b      	ldr	r3, [r3, #4]
   13464:	04db      	lsls	r3, r3, #19
   13466:	0edb      	lsrs	r3, r3, #27
   13468:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1346a:	0018      	movs	r0, r3
   1346c:	4b23      	ldr	r3, [pc, #140]	; (134fc <system_gclk_gen_get_hz+0xc8>)
   1346e:	4798      	blx	r3
   13470:	0003      	movs	r3, r0
   13472:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13474:	4a1f      	ldr	r2, [pc, #124]	; (134f4 <system_gclk_gen_get_hz+0xc0>)
   13476:	1dfb      	adds	r3, r7, #7
   13478:	781b      	ldrb	r3, [r3, #0]
   1347a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1347c:	4b1e      	ldr	r3, [pc, #120]	; (134f8 <system_gclk_gen_get_hz+0xc4>)
   1347e:	685b      	ldr	r3, [r3, #4]
   13480:	02db      	lsls	r3, r3, #11
   13482:	0fdb      	lsrs	r3, r3, #31
   13484:	b2da      	uxtb	r2, r3
   13486:	2313      	movs	r3, #19
   13488:	18fb      	adds	r3, r7, r3
   1348a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1348c:	4a1c      	ldr	r2, [pc, #112]	; (13500 <system_gclk_gen_get_hz+0xcc>)
   1348e:	1dfb      	adds	r3, r7, #7
   13490:	781b      	ldrb	r3, [r3, #0]
   13492:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   13494:	46c0      	nop			; (mov r8, r8)
   13496:	4b15      	ldr	r3, [pc, #84]	; (134ec <system_gclk_gen_get_hz+0xb8>)
   13498:	4798      	blx	r3
   1349a:	1e03      	subs	r3, r0, #0
   1349c:	d1fb      	bne.n	13496 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1349e:	4b16      	ldr	r3, [pc, #88]	; (134f8 <system_gclk_gen_get_hz+0xc4>)
   134a0:	689b      	ldr	r3, [r3, #8]
   134a2:	021b      	lsls	r3, r3, #8
   134a4:	0c1b      	lsrs	r3, r3, #16
   134a6:	b29b      	uxth	r3, r3
   134a8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   134aa:	4b16      	ldr	r3, [pc, #88]	; (13504 <system_gclk_gen_get_hz+0xd0>)
   134ac:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   134ae:	2313      	movs	r3, #19
   134b0:	18fb      	adds	r3, r7, r3
   134b2:	781b      	ldrb	r3, [r3, #0]
   134b4:	2b00      	cmp	r3, #0
   134b6:	d109      	bne.n	134cc <system_gclk_gen_get_hz+0x98>
   134b8:	68fb      	ldr	r3, [r7, #12]
   134ba:	2b01      	cmp	r3, #1
   134bc:	d906      	bls.n	134cc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   134be:	4b12      	ldr	r3, [pc, #72]	; (13508 <system_gclk_gen_get_hz+0xd4>)
   134c0:	68f9      	ldr	r1, [r7, #12]
   134c2:	6978      	ldr	r0, [r7, #20]
   134c4:	4798      	blx	r3
   134c6:	0003      	movs	r3, r0
   134c8:	617b      	str	r3, [r7, #20]
   134ca:	e00a      	b.n	134e2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   134cc:	2313      	movs	r3, #19
   134ce:	18fb      	adds	r3, r7, r3
   134d0:	781b      	ldrb	r3, [r3, #0]
   134d2:	2b00      	cmp	r3, #0
   134d4:	d005      	beq.n	134e2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   134d6:	68fb      	ldr	r3, [r7, #12]
   134d8:	3301      	adds	r3, #1
   134da:	697a      	ldr	r2, [r7, #20]
   134dc:	40da      	lsrs	r2, r3
   134de:	0013      	movs	r3, r2
   134e0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   134e2:	697b      	ldr	r3, [r7, #20]
}
   134e4:	0018      	movs	r0, r3
   134e6:	46bd      	mov	sp, r7
   134e8:	b006      	add	sp, #24
   134ea:	bd80      	pop	{r7, pc}
   134ec:	00013265 	.word	0x00013265
   134f0:	0001323d 	.word	0x0001323d
   134f4:	40000c04 	.word	0x40000c04
   134f8:	40000c00 	.word	0x40000c00
   134fc:	000129f1 	.word	0x000129f1
   13500:	40000c08 	.word	0x40000c08
   13504:	00013251 	.word	0x00013251
   13508:	00015041 	.word	0x00015041

0001350c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1350c:	b580      	push	{r7, lr}
   1350e:	b084      	sub	sp, #16
   13510:	af00      	add	r7, sp, #0
   13512:	0002      	movs	r2, r0
   13514:	6039      	str	r1, [r7, #0]
   13516:	1dfb      	adds	r3, r7, #7
   13518:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1351a:	1dfb      	adds	r3, r7, #7
   1351c:	781b      	ldrb	r3, [r3, #0]
   1351e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	781b      	ldrb	r3, [r3, #0]
   13524:	021b      	lsls	r3, r3, #8
   13526:	001a      	movs	r2, r3
   13528:	68fb      	ldr	r3, [r7, #12]
   1352a:	4313      	orrs	r3, r2
   1352c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1352e:	1dfb      	adds	r3, r7, #7
   13530:	781b      	ldrb	r3, [r3, #0]
   13532:	0018      	movs	r0, r3
   13534:	4b04      	ldr	r3, [pc, #16]	; (13548 <system_gclk_chan_set_config+0x3c>)
   13536:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   13538:	4b04      	ldr	r3, [pc, #16]	; (1354c <system_gclk_chan_set_config+0x40>)
   1353a:	68fa      	ldr	r2, [r7, #12]
   1353c:	b292      	uxth	r2, r2
   1353e:	805a      	strh	r2, [r3, #2]
}
   13540:	46c0      	nop			; (mov r8, r8)
   13542:	46bd      	mov	sp, r7
   13544:	b004      	add	sp, #16
   13546:	bd80      	pop	{r7, pc}
   13548:	00013599 	.word	0x00013599
   1354c:	40000c00 	.word	0x40000c00

00013550 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   13550:	b580      	push	{r7, lr}
   13552:	b082      	sub	sp, #8
   13554:	af00      	add	r7, sp, #0
   13556:	0002      	movs	r2, r0
   13558:	1dfb      	adds	r3, r7, #7
   1355a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1355c:	4b0a      	ldr	r3, [pc, #40]	; (13588 <system_gclk_chan_enable+0x38>)
   1355e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13560:	4a0a      	ldr	r2, [pc, #40]	; (1358c <system_gclk_chan_enable+0x3c>)
   13562:	1dfb      	adds	r3, r7, #7
   13564:	781b      	ldrb	r3, [r3, #0]
   13566:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   13568:	4909      	ldr	r1, [pc, #36]	; (13590 <system_gclk_chan_enable+0x40>)
   1356a:	4b09      	ldr	r3, [pc, #36]	; (13590 <system_gclk_chan_enable+0x40>)
   1356c:	885b      	ldrh	r3, [r3, #2]
   1356e:	b29b      	uxth	r3, r3
   13570:	2280      	movs	r2, #128	; 0x80
   13572:	01d2      	lsls	r2, r2, #7
   13574:	4313      	orrs	r3, r2
   13576:	b29b      	uxth	r3, r3
   13578:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1357a:	4b06      	ldr	r3, [pc, #24]	; (13594 <system_gclk_chan_enable+0x44>)
   1357c:	4798      	blx	r3
}
   1357e:	46c0      	nop			; (mov r8, r8)
   13580:	46bd      	mov	sp, r7
   13582:	b002      	add	sp, #8
   13584:	bd80      	pop	{r7, pc}
   13586:	46c0      	nop			; (mov r8, r8)
   13588:	0001323d 	.word	0x0001323d
   1358c:	40000c02 	.word	0x40000c02
   13590:	40000c00 	.word	0x40000c00
   13594:	00013251 	.word	0x00013251

00013598 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   13598:	b580      	push	{r7, lr}
   1359a:	b084      	sub	sp, #16
   1359c:	af00      	add	r7, sp, #0
   1359e:	0002      	movs	r2, r0
   135a0:	1dfb      	adds	r3, r7, #7
   135a2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   135a4:	4b1c      	ldr	r3, [pc, #112]	; (13618 <system_gclk_chan_disable+0x80>)
   135a6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   135a8:	4a1c      	ldr	r2, [pc, #112]	; (1361c <system_gclk_chan_disable+0x84>)
   135aa:	1dfb      	adds	r3, r7, #7
   135ac:	781b      	ldrb	r3, [r3, #0]
   135ae:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   135b0:	4b1b      	ldr	r3, [pc, #108]	; (13620 <system_gclk_chan_disable+0x88>)
   135b2:	885b      	ldrh	r3, [r3, #2]
   135b4:	051b      	lsls	r3, r3, #20
   135b6:	0f1b      	lsrs	r3, r3, #28
   135b8:	b2db      	uxtb	r3, r3
   135ba:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   135bc:	4a18      	ldr	r2, [pc, #96]	; (13620 <system_gclk_chan_disable+0x88>)
   135be:	8853      	ldrh	r3, [r2, #2]
   135c0:	4918      	ldr	r1, [pc, #96]	; (13624 <system_gclk_chan_disable+0x8c>)
   135c2:	400b      	ands	r3, r1
   135c4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   135c6:	4a16      	ldr	r2, [pc, #88]	; (13620 <system_gclk_chan_disable+0x88>)
   135c8:	4b15      	ldr	r3, [pc, #84]	; (13620 <system_gclk_chan_disable+0x88>)
   135ca:	885b      	ldrh	r3, [r3, #2]
   135cc:	b29b      	uxth	r3, r3
   135ce:	4916      	ldr	r1, [pc, #88]	; (13628 <system_gclk_chan_disable+0x90>)
   135d0:	400b      	ands	r3, r1
   135d2:	b29b      	uxth	r3, r3
   135d4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   135d6:	46c0      	nop			; (mov r8, r8)
   135d8:	4b11      	ldr	r3, [pc, #68]	; (13620 <system_gclk_chan_disable+0x88>)
   135da:	885b      	ldrh	r3, [r3, #2]
   135dc:	b29b      	uxth	r3, r3
   135de:	001a      	movs	r2, r3
   135e0:	2380      	movs	r3, #128	; 0x80
   135e2:	01db      	lsls	r3, r3, #7
   135e4:	4013      	ands	r3, r2
   135e6:	d1f7      	bne.n	135d8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   135e8:	4a0d      	ldr	r2, [pc, #52]	; (13620 <system_gclk_chan_disable+0x88>)
   135ea:	68fb      	ldr	r3, [r7, #12]
   135ec:	b2db      	uxtb	r3, r3
   135ee:	1c19      	adds	r1, r3, #0
   135f0:	230f      	movs	r3, #15
   135f2:	400b      	ands	r3, r1
   135f4:	b2d9      	uxtb	r1, r3
   135f6:	8853      	ldrh	r3, [r2, #2]
   135f8:	1c08      	adds	r0, r1, #0
   135fa:	210f      	movs	r1, #15
   135fc:	4001      	ands	r1, r0
   135fe:	0208      	lsls	r0, r1, #8
   13600:	4908      	ldr	r1, [pc, #32]	; (13624 <system_gclk_chan_disable+0x8c>)
   13602:	400b      	ands	r3, r1
   13604:	1c19      	adds	r1, r3, #0
   13606:	1c03      	adds	r3, r0, #0
   13608:	430b      	orrs	r3, r1
   1360a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   1360c:	4b07      	ldr	r3, [pc, #28]	; (1362c <system_gclk_chan_disable+0x94>)
   1360e:	4798      	blx	r3
}
   13610:	46c0      	nop			; (mov r8, r8)
   13612:	46bd      	mov	sp, r7
   13614:	b004      	add	sp, #16
   13616:	bd80      	pop	{r7, pc}
   13618:	0001323d 	.word	0x0001323d
   1361c:	40000c02 	.word	0x40000c02
   13620:	40000c00 	.word	0x40000c00
   13624:	fffff0ff 	.word	0xfffff0ff
   13628:	ffffbfff 	.word	0xffffbfff
   1362c:	00013251 	.word	0x00013251

00013630 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   13630:	b580      	push	{r7, lr}
   13632:	b084      	sub	sp, #16
   13634:	af00      	add	r7, sp, #0
   13636:	0002      	movs	r2, r0
   13638:	1dfb      	adds	r3, r7, #7
   1363a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   1363c:	4b0d      	ldr	r3, [pc, #52]	; (13674 <system_gclk_chan_get_hz+0x44>)
   1363e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13640:	4a0d      	ldr	r2, [pc, #52]	; (13678 <system_gclk_chan_get_hz+0x48>)
   13642:	1dfb      	adds	r3, r7, #7
   13644:	781b      	ldrb	r3, [r3, #0]
   13646:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   13648:	4b0c      	ldr	r3, [pc, #48]	; (1367c <system_gclk_chan_get_hz+0x4c>)
   1364a:	885b      	ldrh	r3, [r3, #2]
   1364c:	051b      	lsls	r3, r3, #20
   1364e:	0f1b      	lsrs	r3, r3, #28
   13650:	b2da      	uxtb	r2, r3
   13652:	230f      	movs	r3, #15
   13654:	18fb      	adds	r3, r7, r3
   13656:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   13658:	4b09      	ldr	r3, [pc, #36]	; (13680 <system_gclk_chan_get_hz+0x50>)
   1365a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1365c:	230f      	movs	r3, #15
   1365e:	18fb      	adds	r3, r7, r3
   13660:	781b      	ldrb	r3, [r3, #0]
   13662:	0018      	movs	r0, r3
   13664:	4b07      	ldr	r3, [pc, #28]	; (13684 <system_gclk_chan_get_hz+0x54>)
   13666:	4798      	blx	r3
   13668:	0003      	movs	r3, r0
}
   1366a:	0018      	movs	r0, r3
   1366c:	46bd      	mov	sp, r7
   1366e:	b004      	add	sp, #16
   13670:	bd80      	pop	{r7, pc}
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	0001323d 	.word	0x0001323d
   13678:	40000c02 	.word	0x40000c02
   1367c:	40000c00 	.word	0x40000c00
   13680:	00013251 	.word	0x00013251
   13684:	00013435 	.word	0x00013435

00013688 <system_pinmux_get_group_from_gpio_pin>:
{
   13688:	b580      	push	{r7, lr}
   1368a:	b084      	sub	sp, #16
   1368c:	af00      	add	r7, sp, #0
   1368e:	0002      	movs	r2, r0
   13690:	1dfb      	adds	r3, r7, #7
   13692:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13694:	230f      	movs	r3, #15
   13696:	18fb      	adds	r3, r7, r3
   13698:	1dfa      	adds	r2, r7, #7
   1369a:	7812      	ldrb	r2, [r2, #0]
   1369c:	09d2      	lsrs	r2, r2, #7
   1369e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   136a0:	230e      	movs	r3, #14
   136a2:	18fb      	adds	r3, r7, r3
   136a4:	1dfa      	adds	r2, r7, #7
   136a6:	7812      	ldrb	r2, [r2, #0]
   136a8:	0952      	lsrs	r2, r2, #5
   136aa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   136ac:	4b0d      	ldr	r3, [pc, #52]	; (136e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   136ae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   136b0:	230f      	movs	r3, #15
   136b2:	18fb      	adds	r3, r7, r3
   136b4:	781b      	ldrb	r3, [r3, #0]
   136b6:	2b00      	cmp	r3, #0
   136b8:	d10f      	bne.n	136da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   136ba:	230f      	movs	r3, #15
   136bc:	18fb      	adds	r3, r7, r3
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	009b      	lsls	r3, r3, #2
   136c2:	2210      	movs	r2, #16
   136c4:	4694      	mov	ip, r2
   136c6:	44bc      	add	ip, r7
   136c8:	4463      	add	r3, ip
   136ca:	3b08      	subs	r3, #8
   136cc:	681a      	ldr	r2, [r3, #0]
   136ce:	230e      	movs	r3, #14
   136d0:	18fb      	adds	r3, r7, r3
   136d2:	781b      	ldrb	r3, [r3, #0]
   136d4:	01db      	lsls	r3, r3, #7
   136d6:	18d3      	adds	r3, r2, r3
   136d8:	e000      	b.n	136dc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   136da:	2300      	movs	r3, #0
}
   136dc:	0018      	movs	r0, r3
   136de:	46bd      	mov	sp, r7
   136e0:	b004      	add	sp, #16
   136e2:	bd80      	pop	{r7, pc}
   136e4:	41004400 	.word	0x41004400

000136e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   136e8:	b580      	push	{r7, lr}
   136ea:	b088      	sub	sp, #32
   136ec:	af00      	add	r7, sp, #0
   136ee:	60f8      	str	r0, [r7, #12]
   136f0:	60b9      	str	r1, [r7, #8]
   136f2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   136f4:	2300      	movs	r3, #0
   136f6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   136f8:	687b      	ldr	r3, [r7, #4]
   136fa:	78db      	ldrb	r3, [r3, #3]
   136fc:	2201      	movs	r2, #1
   136fe:	4053      	eors	r3, r2
   13700:	b2db      	uxtb	r3, r3
   13702:	2b00      	cmp	r3, #0
   13704:	d035      	beq.n	13772 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   13706:	687b      	ldr	r3, [r7, #4]
   13708:	781b      	ldrb	r3, [r3, #0]
   1370a:	2b80      	cmp	r3, #128	; 0x80
   1370c:	d00b      	beq.n	13726 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   1370e:	69fb      	ldr	r3, [r7, #28]
   13710:	2280      	movs	r2, #128	; 0x80
   13712:	0252      	lsls	r2, r2, #9
   13714:	4313      	orrs	r3, r2
   13716:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   13718:	687b      	ldr	r3, [r7, #4]
   1371a:	781b      	ldrb	r3, [r3, #0]
   1371c:	061b      	lsls	r3, r3, #24
   1371e:	001a      	movs	r2, r3
   13720:	69fb      	ldr	r3, [r7, #28]
   13722:	4313      	orrs	r3, r2
   13724:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	785b      	ldrb	r3, [r3, #1]
   1372a:	2b00      	cmp	r3, #0
   1372c:	d003      	beq.n	13736 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1372e:	687b      	ldr	r3, [r7, #4]
   13730:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13732:	2b02      	cmp	r3, #2
   13734:	d110      	bne.n	13758 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   13736:	69fb      	ldr	r3, [r7, #28]
   13738:	2280      	movs	r2, #128	; 0x80
   1373a:	0292      	lsls	r2, r2, #10
   1373c:	4313      	orrs	r3, r2
   1373e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   13740:	687b      	ldr	r3, [r7, #4]
   13742:	789b      	ldrb	r3, [r3, #2]
   13744:	2b00      	cmp	r3, #0
   13746:	d004      	beq.n	13752 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   13748:	69fb      	ldr	r3, [r7, #28]
   1374a:	2280      	movs	r2, #128	; 0x80
   1374c:	02d2      	lsls	r2, r2, #11
   1374e:	4313      	orrs	r3, r2
   13750:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   13752:	68fb      	ldr	r3, [r7, #12]
   13754:	68ba      	ldr	r2, [r7, #8]
   13756:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13758:	687b      	ldr	r3, [r7, #4]
   1375a:	785b      	ldrb	r3, [r3, #1]
   1375c:	2b01      	cmp	r3, #1
   1375e:	d003      	beq.n	13768 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13760:	687b      	ldr	r3, [r7, #4]
   13762:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13764:	2b02      	cmp	r3, #2
   13766:	d107      	bne.n	13778 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   13768:	69fb      	ldr	r3, [r7, #28]
   1376a:	4a22      	ldr	r2, [pc, #136]	; (137f4 <_system_pinmux_config+0x10c>)
   1376c:	4013      	ands	r3, r2
   1376e:	61fb      	str	r3, [r7, #28]
   13770:	e002      	b.n	13778 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   13772:	68fb      	ldr	r3, [r7, #12]
   13774:	68ba      	ldr	r2, [r7, #8]
   13776:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   13778:	68bb      	ldr	r3, [r7, #8]
   1377a:	041b      	lsls	r3, r3, #16
   1377c:	0c1b      	lsrs	r3, r3, #16
   1377e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   13780:	68bb      	ldr	r3, [r7, #8]
   13782:	0c1b      	lsrs	r3, r3, #16
   13784:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13786:	69ba      	ldr	r2, [r7, #24]
   13788:	69fb      	ldr	r3, [r7, #28]
   1378a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1378c:	22a0      	movs	r2, #160	; 0xa0
   1378e:	05d2      	lsls	r2, r2, #23
   13790:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13792:	68fb      	ldr	r3, [r7, #12]
   13794:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13796:	697a      	ldr	r2, [r7, #20]
   13798:	69fb      	ldr	r3, [r7, #28]
   1379a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1379c:	22d0      	movs	r2, #208	; 0xd0
   1379e:	0612      	lsls	r2, r2, #24
   137a0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   137a2:	68fb      	ldr	r3, [r7, #12]
   137a4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   137a6:	687b      	ldr	r3, [r7, #4]
   137a8:	78db      	ldrb	r3, [r3, #3]
   137aa:	2201      	movs	r2, #1
   137ac:	4053      	eors	r3, r2
   137ae:	b2db      	uxtb	r3, r3
   137b0:	2b00      	cmp	r3, #0
   137b2:	d01a      	beq.n	137ea <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   137b4:	69fa      	ldr	r2, [r7, #28]
   137b6:	2380      	movs	r3, #128	; 0x80
   137b8:	02db      	lsls	r3, r3, #11
   137ba:	4013      	ands	r3, r2
   137bc:	d00a      	beq.n	137d4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   137be:	687b      	ldr	r3, [r7, #4]
   137c0:	789b      	ldrb	r3, [r3, #2]
   137c2:	2b01      	cmp	r3, #1
   137c4:	d103      	bne.n	137ce <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   137c6:	68fb      	ldr	r3, [r7, #12]
   137c8:	68ba      	ldr	r2, [r7, #8]
   137ca:	619a      	str	r2, [r3, #24]
   137cc:	e002      	b.n	137d4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   137ce:	68fb      	ldr	r3, [r7, #12]
   137d0:	68ba      	ldr	r2, [r7, #8]
   137d2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   137d4:	687b      	ldr	r3, [r7, #4]
   137d6:	785b      	ldrb	r3, [r3, #1]
   137d8:	2b01      	cmp	r3, #1
   137da:	d003      	beq.n	137e4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   137dc:	687b      	ldr	r3, [r7, #4]
   137de:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   137e0:	2b02      	cmp	r3, #2
   137e2:	d102      	bne.n	137ea <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   137e4:	68fb      	ldr	r3, [r7, #12]
   137e6:	68ba      	ldr	r2, [r7, #8]
   137e8:	609a      	str	r2, [r3, #8]
		}
	}
}
   137ea:	46c0      	nop			; (mov r8, r8)
   137ec:	46bd      	mov	sp, r7
   137ee:	b008      	add	sp, #32
   137f0:	bd80      	pop	{r7, pc}
   137f2:	46c0      	nop			; (mov r8, r8)
   137f4:	fffbffff 	.word	0xfffbffff

000137f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   137f8:	b580      	push	{r7, lr}
   137fa:	b084      	sub	sp, #16
   137fc:	af00      	add	r7, sp, #0
   137fe:	0002      	movs	r2, r0
   13800:	6039      	str	r1, [r7, #0]
   13802:	1dfb      	adds	r3, r7, #7
   13804:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13806:	1dfb      	adds	r3, r7, #7
   13808:	781b      	ldrb	r3, [r3, #0]
   1380a:	0018      	movs	r0, r3
   1380c:	4b0a      	ldr	r3, [pc, #40]	; (13838 <system_pinmux_pin_set_config+0x40>)
   1380e:	4798      	blx	r3
   13810:	0003      	movs	r3, r0
   13812:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   13814:	1dfb      	adds	r3, r7, #7
   13816:	781b      	ldrb	r3, [r3, #0]
   13818:	221f      	movs	r2, #31
   1381a:	4013      	ands	r3, r2
   1381c:	2201      	movs	r2, #1
   1381e:	409a      	lsls	r2, r3
   13820:	0013      	movs	r3, r2
   13822:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   13824:	683a      	ldr	r2, [r7, #0]
   13826:	68b9      	ldr	r1, [r7, #8]
   13828:	68fb      	ldr	r3, [r7, #12]
   1382a:	0018      	movs	r0, r3
   1382c:	4b03      	ldr	r3, [pc, #12]	; (1383c <system_pinmux_pin_set_config+0x44>)
   1382e:	4798      	blx	r3
}
   13830:	46c0      	nop			; (mov r8, r8)
   13832:	46bd      	mov	sp, r7
   13834:	b004      	add	sp, #16
   13836:	bd80      	pop	{r7, pc}
   13838:	00013689 	.word	0x00013689
   1383c:	000136e9 	.word	0x000136e9

00013840 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   13840:	b580      	push	{r7, lr}
   13842:	af00      	add	r7, sp, #0
	return;
   13844:	46c0      	nop			; (mov r8, r8)
}
   13846:	46bd      	mov	sp, r7
   13848:	bd80      	pop	{r7, pc}
	...

0001384c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1384c:	b580      	push	{r7, lr}
   1384e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   13850:	4b06      	ldr	r3, [pc, #24]	; (1386c <system_init+0x20>)
   13852:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   13854:	4b06      	ldr	r3, [pc, #24]	; (13870 <system_init+0x24>)
   13856:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   13858:	4b06      	ldr	r3, [pc, #24]	; (13874 <system_init+0x28>)
   1385a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1385c:	4b06      	ldr	r3, [pc, #24]	; (13878 <system_init+0x2c>)
   1385e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   13860:	4b06      	ldr	r3, [pc, #24]	; (1387c <system_init+0x30>)
   13862:	4798      	blx	r3
}
   13864:	46c0      	nop			; (mov r8, r8)
   13866:	46bd      	mov	sp, r7
   13868:	bd80      	pop	{r7, pc}
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	00012e81 	.word	0x00012e81
   13870:	00012749 	.word	0x00012749
   13874:	00011211 	.word	0x00011211
   13878:	0000cad1 	.word	0x0000cad1
   1387c:	00013841 	.word	0x00013841

00013880 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   13880:	b580      	push	{r7, lr}
   13882:	b082      	sub	sp, #8
   13884:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   13886:	4b2f      	ldr	r3, [pc, #188]	; (13944 <Reset_Handler+0xc4>)
   13888:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1388a:	4b2f      	ldr	r3, [pc, #188]	; (13948 <Reset_Handler+0xc8>)
   1388c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1388e:	687a      	ldr	r2, [r7, #4]
   13890:	683b      	ldr	r3, [r7, #0]
   13892:	429a      	cmp	r2, r3
   13894:	d00c      	beq.n	138b0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   13896:	e007      	b.n	138a8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   13898:	683b      	ldr	r3, [r7, #0]
   1389a:	1d1a      	adds	r2, r3, #4
   1389c:	603a      	str	r2, [r7, #0]
   1389e:	687a      	ldr	r2, [r7, #4]
   138a0:	1d11      	adds	r1, r2, #4
   138a2:	6079      	str	r1, [r7, #4]
   138a4:	6812      	ldr	r2, [r2, #0]
   138a6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   138a8:	683a      	ldr	r2, [r7, #0]
   138aa:	4b28      	ldr	r3, [pc, #160]	; (1394c <Reset_Handler+0xcc>)
   138ac:	429a      	cmp	r2, r3
   138ae:	d3f3      	bcc.n	13898 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   138b0:	4b27      	ldr	r3, [pc, #156]	; (13950 <Reset_Handler+0xd0>)
   138b2:	603b      	str	r3, [r7, #0]
   138b4:	e004      	b.n	138c0 <Reset_Handler+0x40>
                *pDest++ = 0;
   138b6:	683b      	ldr	r3, [r7, #0]
   138b8:	1d1a      	adds	r2, r3, #4
   138ba:	603a      	str	r2, [r7, #0]
   138bc:	2200      	movs	r2, #0
   138be:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   138c0:	683a      	ldr	r2, [r7, #0]
   138c2:	4b24      	ldr	r3, [pc, #144]	; (13954 <Reset_Handler+0xd4>)
   138c4:	429a      	cmp	r2, r3
   138c6:	d3f6      	bcc.n	138b6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   138c8:	4b23      	ldr	r3, [pc, #140]	; (13958 <Reset_Handler+0xd8>)
   138ca:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   138cc:	4b23      	ldr	r3, [pc, #140]	; (1395c <Reset_Handler+0xdc>)
   138ce:	687a      	ldr	r2, [r7, #4]
   138d0:	21ff      	movs	r1, #255	; 0xff
   138d2:	438a      	bics	r2, r1
   138d4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   138d6:	4a22      	ldr	r2, [pc, #136]	; (13960 <Reset_Handler+0xe0>)
   138d8:	2390      	movs	r3, #144	; 0x90
   138da:	005b      	lsls	r3, r3, #1
   138dc:	2102      	movs	r1, #2
   138de:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   138e0:	4a20      	ldr	r2, [pc, #128]	; (13964 <Reset_Handler+0xe4>)
   138e2:	78d3      	ldrb	r3, [r2, #3]
   138e4:	2103      	movs	r1, #3
   138e6:	438b      	bics	r3, r1
   138e8:	1c19      	adds	r1, r3, #0
   138ea:	2302      	movs	r3, #2
   138ec:	430b      	orrs	r3, r1
   138ee:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   138f0:	4a1c      	ldr	r2, [pc, #112]	; (13964 <Reset_Handler+0xe4>)
   138f2:	78d3      	ldrb	r3, [r2, #3]
   138f4:	210c      	movs	r1, #12
   138f6:	438b      	bics	r3, r1
   138f8:	1c19      	adds	r1, r3, #0
   138fa:	2308      	movs	r3, #8
   138fc:	430b      	orrs	r3, r1
   138fe:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   13900:	4a19      	ldr	r2, [pc, #100]	; (13968 <Reset_Handler+0xe8>)
   13902:	7b93      	ldrb	r3, [r2, #14]
   13904:	2130      	movs	r1, #48	; 0x30
   13906:	438b      	bics	r3, r1
   13908:	1c19      	adds	r1, r3, #0
   1390a:	2320      	movs	r3, #32
   1390c:	430b      	orrs	r3, r1
   1390e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   13910:	4a15      	ldr	r2, [pc, #84]	; (13968 <Reset_Handler+0xe8>)
   13912:	7b93      	ldrb	r3, [r2, #14]
   13914:	210c      	movs	r1, #12
   13916:	438b      	bics	r3, r1
   13918:	1c19      	adds	r1, r3, #0
   1391a:	2308      	movs	r3, #8
   1391c:	430b      	orrs	r3, r1
   1391e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   13920:	4a11      	ldr	r2, [pc, #68]	; (13968 <Reset_Handler+0xe8>)
   13922:	7b93      	ldrb	r3, [r2, #14]
   13924:	2103      	movs	r1, #3
   13926:	438b      	bics	r3, r1
   13928:	1c19      	adds	r1, r3, #0
   1392a:	2302      	movs	r3, #2
   1392c:	430b      	orrs	r3, r1
   1392e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   13930:	4a0e      	ldr	r2, [pc, #56]	; (1396c <Reset_Handler+0xec>)
   13932:	6853      	ldr	r3, [r2, #4]
   13934:	2180      	movs	r1, #128	; 0x80
   13936:	430b      	orrs	r3, r1
   13938:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   1393a:	4b0d      	ldr	r3, [pc, #52]	; (13970 <Reset_Handler+0xf0>)
   1393c:	4798      	blx	r3

        /* Branch to main function */
        main();
   1393e:	4b0d      	ldr	r3, [pc, #52]	; (13974 <Reset_Handler+0xf4>)
   13940:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   13942:	e7fe      	b.n	13942 <Reset_Handler+0xc2>
   13944:	00019914 	.word	0x00019914
   13948:	20000000 	.word	0x20000000
   1394c:	200001fc 	.word	0x200001fc
   13950:	20000200 	.word	0x20000200
   13954:	2000092c 	.word	0x2000092c
   13958:	00000000 	.word	0x00000000
   1395c:	e000ed00 	.word	0xe000ed00
   13960:	41007000 	.word	0x41007000
   13964:	41005000 	.word	0x41005000
   13968:	41004800 	.word	0x41004800
   1396c:	41004000 	.word	0x41004000
   13970:	000177c9 	.word	0x000177c9
   13974:	00013ba9 	.word	0x00013ba9

00013978 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   13978:	b580      	push	{r7, lr}
   1397a:	af00      	add	r7, sp, #0
        while (1) {
   1397c:	e7fe      	b.n	1397c <Dummy_Handler+0x4>
	...

00013980 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   13980:	b580      	push	{r7, lr}
   13982:	b084      	sub	sp, #16
   13984:	af00      	add	r7, sp, #0
   13986:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   13988:	4b0a      	ldr	r3, [pc, #40]	; (139b4 <_sbrk+0x34>)
   1398a:	681b      	ldr	r3, [r3, #0]
   1398c:	2b00      	cmp	r3, #0
   1398e:	d102      	bne.n	13996 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   13990:	4b08      	ldr	r3, [pc, #32]	; (139b4 <_sbrk+0x34>)
   13992:	4a09      	ldr	r2, [pc, #36]	; (139b8 <_sbrk+0x38>)
   13994:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   13996:	4b07      	ldr	r3, [pc, #28]	; (139b4 <_sbrk+0x34>)
   13998:	681b      	ldr	r3, [r3, #0]
   1399a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   1399c:	4b05      	ldr	r3, [pc, #20]	; (139b4 <_sbrk+0x34>)
   1399e:	681a      	ldr	r2, [r3, #0]
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	18d2      	adds	r2, r2, r3
   139a4:	4b03      	ldr	r3, [pc, #12]	; (139b4 <_sbrk+0x34>)
   139a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   139a8:	68fb      	ldr	r3, [r7, #12]
}
   139aa:	0018      	movs	r0, r3
   139ac:	46bd      	mov	sp, r7
   139ae:	b004      	add	sp, #16
   139b0:	bd80      	pop	{r7, pc}
   139b2:	46c0      	nop			; (mov r8, r8)
   139b4:	200004f8 	.word	0x200004f8
   139b8:	20002930 	.word	0x20002930

000139bc <system_apb_clock_clear_mask>:
{
   139bc:	b580      	push	{r7, lr}
   139be:	b082      	sub	sp, #8
   139c0:	af00      	add	r7, sp, #0
   139c2:	0002      	movs	r2, r0
   139c4:	6039      	str	r1, [r7, #0]
   139c6:	1dfb      	adds	r3, r7, #7
   139c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   139ca:	1dfb      	adds	r3, r7, #7
   139cc:	781b      	ldrb	r3, [r3, #0]
   139ce:	2b01      	cmp	r3, #1
   139d0:	d00b      	beq.n	139ea <system_apb_clock_clear_mask+0x2e>
   139d2:	2b02      	cmp	r3, #2
   139d4:	d011      	beq.n	139fa <system_apb_clock_clear_mask+0x3e>
   139d6:	2b00      	cmp	r3, #0
   139d8:	d117      	bne.n	13a0a <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   139da:	4b0f      	ldr	r3, [pc, #60]	; (13a18 <system_apb_clock_clear_mask+0x5c>)
   139dc:	4a0e      	ldr	r2, [pc, #56]	; (13a18 <system_apb_clock_clear_mask+0x5c>)
   139de:	6992      	ldr	r2, [r2, #24]
   139e0:	6839      	ldr	r1, [r7, #0]
   139e2:	43c9      	mvns	r1, r1
   139e4:	400a      	ands	r2, r1
   139e6:	619a      	str	r2, [r3, #24]
			break;
   139e8:	e011      	b.n	13a0e <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   139ea:	4b0b      	ldr	r3, [pc, #44]	; (13a18 <system_apb_clock_clear_mask+0x5c>)
   139ec:	4a0a      	ldr	r2, [pc, #40]	; (13a18 <system_apb_clock_clear_mask+0x5c>)
   139ee:	69d2      	ldr	r2, [r2, #28]
   139f0:	6839      	ldr	r1, [r7, #0]
   139f2:	43c9      	mvns	r1, r1
   139f4:	400a      	ands	r2, r1
   139f6:	61da      	str	r2, [r3, #28]
			break;
   139f8:	e009      	b.n	13a0e <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   139fa:	4b07      	ldr	r3, [pc, #28]	; (13a18 <system_apb_clock_clear_mask+0x5c>)
   139fc:	4a06      	ldr	r2, [pc, #24]	; (13a18 <system_apb_clock_clear_mask+0x5c>)
   139fe:	6a12      	ldr	r2, [r2, #32]
   13a00:	6839      	ldr	r1, [r7, #0]
   13a02:	43c9      	mvns	r1, r1
   13a04:	400a      	ands	r2, r1
   13a06:	621a      	str	r2, [r3, #32]
			break;
   13a08:	e001      	b.n	13a0e <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   13a0a:	2317      	movs	r3, #23
   13a0c:	e000      	b.n	13a10 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   13a0e:	2300      	movs	r3, #0
}
   13a10:	0018      	movs	r0, r3
   13a12:	46bd      	mov	sp, r7
   13a14:	b002      	add	sp, #8
   13a16:	bd80      	pop	{r7, pc}
   13a18:	40000400 	.word	0x40000400

00013a1c <system_interrupt_enable_global>:
{
   13a1c:	b580      	push	{r7, lr}
   13a1e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   13a20:	4b04      	ldr	r3, [pc, #16]	; (13a34 <system_interrupt_enable_global+0x18>)
   13a22:	2201      	movs	r2, #1
   13a24:	701a      	strb	r2, [r3, #0]
   13a26:	f3bf 8f5f 	dmb	sy
   13a2a:	b662      	cpsie	i
}
   13a2c:	46c0      	nop			; (mov r8, r8)
   13a2e:	46bd      	mov	sp, r7
   13a30:	bd80      	pop	{r7, pc}
   13a32:	46c0      	nop			; (mov r8, r8)
   13a34:	20000028 	.word	0x20000028

00013a38 <system_pinmux_get_group_from_gpio_pin>:
{
   13a38:	b580      	push	{r7, lr}
   13a3a:	b084      	sub	sp, #16
   13a3c:	af00      	add	r7, sp, #0
   13a3e:	0002      	movs	r2, r0
   13a40:	1dfb      	adds	r3, r7, #7
   13a42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13a44:	230f      	movs	r3, #15
   13a46:	18fb      	adds	r3, r7, r3
   13a48:	1dfa      	adds	r2, r7, #7
   13a4a:	7812      	ldrb	r2, [r2, #0]
   13a4c:	09d2      	lsrs	r2, r2, #7
   13a4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13a50:	230e      	movs	r3, #14
   13a52:	18fb      	adds	r3, r7, r3
   13a54:	1dfa      	adds	r2, r7, #7
   13a56:	7812      	ldrb	r2, [r2, #0]
   13a58:	0952      	lsrs	r2, r2, #5
   13a5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13a5c:	4b0d      	ldr	r3, [pc, #52]	; (13a94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13a5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13a60:	230f      	movs	r3, #15
   13a62:	18fb      	adds	r3, r7, r3
   13a64:	781b      	ldrb	r3, [r3, #0]
   13a66:	2b00      	cmp	r3, #0
   13a68:	d10f      	bne.n	13a8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13a6a:	230f      	movs	r3, #15
   13a6c:	18fb      	adds	r3, r7, r3
   13a6e:	781b      	ldrb	r3, [r3, #0]
   13a70:	009b      	lsls	r3, r3, #2
   13a72:	2210      	movs	r2, #16
   13a74:	4694      	mov	ip, r2
   13a76:	44bc      	add	ip, r7
   13a78:	4463      	add	r3, ip
   13a7a:	3b08      	subs	r3, #8
   13a7c:	681a      	ldr	r2, [r3, #0]
   13a7e:	230e      	movs	r3, #14
   13a80:	18fb      	adds	r3, r7, r3
   13a82:	781b      	ldrb	r3, [r3, #0]
   13a84:	01db      	lsls	r3, r3, #7
   13a86:	18d3      	adds	r3, r2, r3
   13a88:	e000      	b.n	13a8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13a8a:	2300      	movs	r3, #0
}
   13a8c:	0018      	movs	r0, r3
   13a8e:	46bd      	mov	sp, r7
   13a90:	b004      	add	sp, #16
   13a92:	bd80      	pop	{r7, pc}
   13a94:	41004400 	.word	0x41004400

00013a98 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   13a98:	b580      	push	{r7, lr}
   13a9a:	b084      	sub	sp, #16
   13a9c:	af00      	add	r7, sp, #0
   13a9e:	0002      	movs	r2, r0
   13aa0:	1dfb      	adds	r3, r7, #7
   13aa2:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   13aa4:	4b1a      	ldr	r3, [pc, #104]	; (13b10 <system_set_sleepmode+0x78>)
   13aa6:	699b      	ldr	r3, [r3, #24]
   13aa8:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   13aaa:	68fa      	ldr	r2, [r7, #12]
   13aac:	23f0      	movs	r3, #240	; 0xf0
   13aae:	011b      	lsls	r3, r3, #4
   13ab0:	4013      	ands	r3, r2
   13ab2:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   13ab4:	68fb      	ldr	r3, [r7, #12]
   13ab6:	0a1b      	lsrs	r3, r3, #8
   13ab8:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   13aba:	68fb      	ldr	r3, [r7, #12]
   13abc:	2b02      	cmp	r3, #2
   13abe:	d805      	bhi.n	13acc <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13ac0:	4a14      	ldr	r2, [pc, #80]	; (13b14 <system_set_sleepmode+0x7c>)
   13ac2:	6853      	ldr	r3, [r2, #4]
   13ac4:	21c0      	movs	r1, #192	; 0xc0
   13ac6:	0089      	lsls	r1, r1, #2
   13ac8:	430b      	orrs	r3, r1
   13aca:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   13acc:	1dfb      	adds	r3, r7, #7
   13ace:	781b      	ldrb	r3, [r3, #0]
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	db16      	blt.n	13b02 <system_set_sleepmode+0x6a>
   13ad4:	2b02      	cmp	r3, #2
   13ad6:	dd02      	ble.n	13ade <system_set_sleepmode+0x46>
   13ad8:	2b03      	cmp	r3, #3
   13ada:	d00b      	beq.n	13af4 <system_set_sleepmode+0x5c>
   13adc:	e011      	b.n	13b02 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   13ade:	4b0e      	ldr	r3, [pc, #56]	; (13b18 <system_set_sleepmode+0x80>)
   13ae0:	4a0d      	ldr	r2, [pc, #52]	; (13b18 <system_set_sleepmode+0x80>)
   13ae2:	6912      	ldr	r2, [r2, #16]
   13ae4:	2104      	movs	r1, #4
   13ae6:	438a      	bics	r2, r1
   13ae8:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   13aea:	4a0c      	ldr	r2, [pc, #48]	; (13b1c <system_set_sleepmode+0x84>)
   13aec:	1dfb      	adds	r3, r7, #7
   13aee:	781b      	ldrb	r3, [r3, #0]
   13af0:	7053      	strb	r3, [r2, #1]
			break;
   13af2:	e008      	b.n	13b06 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   13af4:	4b08      	ldr	r3, [pc, #32]	; (13b18 <system_set_sleepmode+0x80>)
   13af6:	4a08      	ldr	r2, [pc, #32]	; (13b18 <system_set_sleepmode+0x80>)
   13af8:	6912      	ldr	r2, [r2, #16]
   13afa:	2104      	movs	r1, #4
   13afc:	430a      	orrs	r2, r1
   13afe:	611a      	str	r2, [r3, #16]
			break;
   13b00:	e001      	b.n	13b06 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   13b02:	2317      	movs	r3, #23
   13b04:	e000      	b.n	13b08 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   13b06:	2300      	movs	r3, #0
}
   13b08:	0018      	movs	r0, r3
   13b0a:	46bd      	mov	sp, r7
   13b0c:	b004      	add	sp, #16
   13b0e:	bd80      	pop	{r7, pc}
   13b10:	41002000 	.word	0x41002000
   13b14:	41004000 	.word	0x41004000
   13b18:	e000ed00 	.word	0xe000ed00
   13b1c:	40000400 	.word	0x40000400

00013b20 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   13b20:	b580      	push	{r7, lr}
   13b22:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   13b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   13b28:	bf30      	wfi
	__DSB();
	__WFI();
}
   13b2a:	46c0      	nop			; (mov r8, r8)
   13b2c:	46bd      	mov	sp, r7
   13b2e:	bd80      	pop	{r7, pc}

00013b30 <port_get_group_from_gpio_pin>:
{
   13b30:	b580      	push	{r7, lr}
   13b32:	b082      	sub	sp, #8
   13b34:	af00      	add	r7, sp, #0
   13b36:	0002      	movs	r2, r0
   13b38:	1dfb      	adds	r3, r7, #7
   13b3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13b3c:	1dfb      	adds	r3, r7, #7
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	0018      	movs	r0, r3
   13b42:	4b03      	ldr	r3, [pc, #12]	; (13b50 <port_get_group_from_gpio_pin+0x20>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
}
   13b48:	0018      	movs	r0, r3
   13b4a:	46bd      	mov	sp, r7
   13b4c:	b002      	add	sp, #8
   13b4e:	bd80      	pop	{r7, pc}
   13b50:	00013a39 	.word	0x00013a39

00013b54 <port_pin_set_output_level>:
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b084      	sub	sp, #16
   13b58:	af00      	add	r7, sp, #0
   13b5a:	0002      	movs	r2, r0
   13b5c:	1dfb      	adds	r3, r7, #7
   13b5e:	701a      	strb	r2, [r3, #0]
   13b60:	1dbb      	adds	r3, r7, #6
   13b62:	1c0a      	adds	r2, r1, #0
   13b64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13b66:	1dfb      	adds	r3, r7, #7
   13b68:	781b      	ldrb	r3, [r3, #0]
   13b6a:	0018      	movs	r0, r3
   13b6c:	4b0d      	ldr	r3, [pc, #52]	; (13ba4 <port_pin_set_output_level+0x50>)
   13b6e:	4798      	blx	r3
   13b70:	0003      	movs	r3, r0
   13b72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13b74:	1dfb      	adds	r3, r7, #7
   13b76:	781b      	ldrb	r3, [r3, #0]
   13b78:	221f      	movs	r2, #31
   13b7a:	4013      	ands	r3, r2
   13b7c:	2201      	movs	r2, #1
   13b7e:	409a      	lsls	r2, r3
   13b80:	0013      	movs	r3, r2
   13b82:	60bb      	str	r3, [r7, #8]
	if (level) {
   13b84:	1dbb      	adds	r3, r7, #6
   13b86:	781b      	ldrb	r3, [r3, #0]
   13b88:	2b00      	cmp	r3, #0
   13b8a:	d003      	beq.n	13b94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13b8c:	68fb      	ldr	r3, [r7, #12]
   13b8e:	68ba      	ldr	r2, [r7, #8]
   13b90:	619a      	str	r2, [r3, #24]
}
   13b92:	e002      	b.n	13b9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13b94:	68fb      	ldr	r3, [r7, #12]
   13b96:	68ba      	ldr	r2, [r7, #8]
   13b98:	615a      	str	r2, [r3, #20]
}
   13b9a:	46c0      	nop			; (mov r8, r8)
   13b9c:	46bd      	mov	sp, r7
   13b9e:	b004      	add	sp, #16
   13ba0:	bd80      	pop	{r7, pc}
   13ba2:	46c0      	nop			; (mov r8, r8)
   13ba4:	00013b31 	.word	0x00013b31

00013ba8 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   13ba8:	b590      	push	{r4, r7, lr}
   13baa:	b083      	sub	sp, #12
   13bac:	af02      	add	r7, sp, #8
	system_init();
   13bae:	4b18      	ldr	r3, [pc, #96]	; (13c10 <main+0x68>)
   13bb0:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   13bb2:	2111      	movs	r1, #17
   13bb4:	2000      	movs	r0, #0
   13bb6:	4b17      	ldr	r3, [pc, #92]	; (13c14 <main+0x6c>)
   13bb8:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   13bba:	2103      	movs	r1, #3
   13bbc:	2001      	movs	r0, #1
   13bbe:	4b15      	ldr	r3, [pc, #84]	; (13c14 <main+0x6c>)
   13bc0:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   13bc2:	4b15      	ldr	r3, [pc, #84]	; (13c18 <main+0x70>)
   13bc4:	0019      	movs	r1, r3
   13bc6:	2002      	movs	r0, #2
   13bc8:	4b12      	ldr	r3, [pc, #72]	; (13c14 <main+0x6c>)
   13bca:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13bcc:	4a13      	ldr	r2, [pc, #76]	; (13c1c <main+0x74>)
   13bce:	6853      	ldr	r3, [r2, #4]
   13bd0:	21c0      	movs	r1, #192	; 0xc0
   13bd2:	0089      	lsls	r1, r1, #2
   13bd4:	430b      	orrs	r3, r1
   13bd6:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   13bd8:	2003      	movs	r0, #3
   13bda:	4b11      	ldr	r3, [pc, #68]	; (13c20 <main+0x78>)
   13bdc:	4798      	blx	r3
	
	system_interrupt_enable_global();
   13bde:	4b11      	ldr	r3, [pc, #68]	; (13c24 <main+0x7c>)
   13be0:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   13be2:	4b11      	ldr	r3, [pc, #68]	; (13c28 <main+0x80>)
   13be4:	4798      	blx	r3
	init_eeprom();
   13be6:	4b11      	ldr	r3, [pc, #68]	; (13c2c <main+0x84>)
   13be8:	4798      	blx	r3
	
	
	
	start_lcd_service();
   13bea:	4b11      	ldr	r3, [pc, #68]	; (13c30 <main+0x88>)
   13bec:	4798      	blx	r3
	start_gsm_service();
   13bee:	4b11      	ldr	r3, [pc, #68]	; (13c34 <main+0x8c>)
   13bf0:	4798      	blx	r3
	start_motor_service();
   13bf2:	4b11      	ldr	r3, [pc, #68]	; (13c38 <main+0x90>)
   13bf4:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   13bf6:	4811      	ldr	r0, [pc, #68]	; (13c3c <main+0x94>)
   13bf8:	2300      	movs	r3, #0
   13bfa:	9301      	str	r3, [sp, #4]
   13bfc:	2301      	movs	r3, #1
   13bfe:	9300      	str	r3, [sp, #0]
   13c00:	2300      	movs	r3, #0
   13c02:	2264      	movs	r2, #100	; 0x64
   13c04:	2100      	movs	r1, #0
   13c06:	4c0e      	ldr	r4, [pc, #56]	; (13c40 <main+0x98>)
   13c08:	47a0      	blx	r4
	
	vTaskStartScheduler();
   13c0a:	4b0e      	ldr	r3, [pc, #56]	; (13c44 <main+0x9c>)
   13c0c:	4798      	blx	r3
	
	for (;;)
   13c0e:	e7fe      	b.n	13c0e <main+0x66>
   13c10:	0001384d 	.word	0x0001384d
   13c14:	000139bd 	.word	0x000139bd
   13c18:	00060001 	.word	0x00060001
   13c1c:	41004000 	.word	0x41004000
   13c20:	00013a99 	.word	0x00013a99
   13c24:	00013a1d 	.word	0x00013a1d
   13c28:	00011475 	.word	0x00011475
   13c2c:	00000151 	.word	0x00000151
   13c30:	00007f19 	.word	0x00007f19
   13c34:	00007761 	.word	0x00007761
   13c38:	0000b0cd 	.word	0x0000b0cd
   13c3c:	00013c91 	.word	0x00013c91
   13c40:	0000e8b9 	.word	0x0000e8b9
   13c44:	0000ed8d 	.word	0x0000ed8d

00013c48 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   13c48:	b580      	push	{r7, lr}
   13c4a:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   13c4c:	4b0d      	ldr	r3, [pc, #52]	; (13c84 <checkSleepElligible+0x3c>)
   13c4e:	4798      	blx	r3
   13c50:	0003      	movs	r3, r0
   13c52:	001a      	movs	r2, r3
   13c54:	2301      	movs	r3, #1
   13c56:	4053      	eors	r3, r2
   13c58:	b2db      	uxtb	r3, r3
   13c5a:	2b00      	cmp	r3, #0
   13c5c:	d009      	beq.n	13c72 <checkSleepElligible+0x2a>
   13c5e:	4b0a      	ldr	r3, [pc, #40]	; (13c88 <checkSleepElligible+0x40>)
   13c60:	4798      	blx	r3
   13c62:	1e03      	subs	r3, r0, #0
   13c64:	d005      	beq.n	13c72 <checkSleepElligible+0x2a>
   13c66:	4b09      	ldr	r3, [pc, #36]	; (13c8c <checkSleepElligible+0x44>)
   13c68:	4798      	blx	r3
   13c6a:	1e03      	subs	r3, r0, #0
   13c6c:	d001      	beq.n	13c72 <checkSleepElligible+0x2a>
   13c6e:	2301      	movs	r3, #1
   13c70:	e000      	b.n	13c74 <checkSleepElligible+0x2c>
   13c72:	2300      	movs	r3, #0
   13c74:	1c1a      	adds	r2, r3, #0
   13c76:	2301      	movs	r3, #1
   13c78:	4013      	ands	r3, r2
   13c7a:	b2db      	uxtb	r3, r3
}
   13c7c:	0018      	movs	r0, r3
   13c7e:	46bd      	mov	sp, r7
   13c80:	bd80      	pop	{r7, pc}
   13c82:	46c0      	nop			; (mov r8, r8)
   13c84:	00009bed 	.word	0x00009bed
   13c88:	0000b3c5 	.word	0x0000b3c5
   13c8c:	00007809 	.word	0x00007809

00013c90 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   13c90:	b580      	push	{r7, lr}
   13c92:	b084      	sub	sp, #16
   13c94:	af00      	add	r7, sp, #0
   13c96:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   13c98:	4b34      	ldr	r3, [pc, #208]	; (13d6c <vTask_sleep_manager+0xdc>)
   13c9a:	4798      	blx	r3
   13c9c:	1e03      	subs	r3, r0, #0
   13c9e:	d060      	beq.n	13d62 <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   13ca0:	4b33      	ldr	r3, [pc, #204]	; (13d70 <vTask_sleep_manager+0xe0>)
   13ca2:	781b      	ldrb	r3, [r3, #0]
   13ca4:	2201      	movs	r2, #1
   13ca6:	4053      	eors	r3, r2
   13ca8:	b2db      	uxtb	r3, r3
   13caa:	2b00      	cmp	r3, #0
   13cac:	d008      	beq.n	13cc0 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   13cae:	4b31      	ldr	r3, [pc, #196]	; (13d74 <vTask_sleep_manager+0xe4>)
   13cb0:	4798      	blx	r3
   13cb2:	0002      	movs	r2, r0
   13cb4:	4b30      	ldr	r3, [pc, #192]	; (13d78 <vTask_sleep_manager+0xe8>)
   13cb6:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   13cb8:	4b2d      	ldr	r3, [pc, #180]	; (13d70 <vTask_sleep_manager+0xe0>)
   13cba:	2201      	movs	r2, #1
   13cbc:	701a      	strb	r2, [r3, #0]
   13cbe:	e7eb      	b.n	13c98 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   13cc0:	4b2b      	ldr	r3, [pc, #172]	; (13d70 <vTask_sleep_manager+0xe0>)
   13cc2:	781b      	ldrb	r3, [r3, #0]
   13cc4:	2b00      	cmp	r3, #0
   13cc6:	d0e7      	beq.n	13c98 <vTask_sleep_manager+0x8>
   13cc8:	4b2a      	ldr	r3, [pc, #168]	; (13d74 <vTask_sleep_manager+0xe4>)
   13cca:	4798      	blx	r3
   13ccc:	0002      	movs	r2, r0
   13cce:	4b2a      	ldr	r3, [pc, #168]	; (13d78 <vTask_sleep_manager+0xe8>)
   13cd0:	681b      	ldr	r3, [r3, #0]
   13cd2:	1ad3      	subs	r3, r2, r3
   13cd4:	4a29      	ldr	r2, [pc, #164]	; (13d7c <vTask_sleep_manager+0xec>)
   13cd6:	4293      	cmp	r3, r2
   13cd8:	d9de      	bls.n	13c98 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   13cda:	230f      	movs	r3, #15
   13cdc:	18fb      	adds	r3, r7, r3
   13cde:	220a      	movs	r2, #10
   13ce0:	701a      	strb	r2, [r3, #0]
				bool led=false;
   13ce2:	230e      	movs	r3, #14
   13ce4:	18fb      	adds	r3, r7, r3
   13ce6:	2200      	movs	r2, #0
   13ce8:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   13cea:	230e      	movs	r3, #14
   13cec:	18fb      	adds	r3, r7, r3
   13cee:	781b      	ldrb	r3, [r3, #0]
   13cf0:	1e5a      	subs	r2, r3, #1
   13cf2:	4193      	sbcs	r3, r2
   13cf4:	b2db      	uxtb	r3, r3
   13cf6:	2201      	movs	r2, #1
   13cf8:	4053      	eors	r3, r2
   13cfa:	b2db      	uxtb	r3, r3
   13cfc:	001a      	movs	r2, r3
   13cfe:	230e      	movs	r3, #14
   13d00:	18fb      	adds	r3, r7, r3
   13d02:	701a      	strb	r2, [r3, #0]
   13d04:	781a      	ldrb	r2, [r3, #0]
   13d06:	2101      	movs	r1, #1
   13d08:	400a      	ands	r2, r1
   13d0a:	701a      	strb	r2, [r3, #0]
					if(led)
   13d0c:	230e      	movs	r3, #14
   13d0e:	18fb      	adds	r3, r7, r3
   13d10:	781b      	ldrb	r3, [r3, #0]
   13d12:	2b00      	cmp	r3, #0
   13d14:	d004      	beq.n	13d20 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   13d16:	2100      	movs	r1, #0
   13d18:	2027      	movs	r0, #39	; 0x27
   13d1a:	4b19      	ldr	r3, [pc, #100]	; (13d80 <vTask_sleep_manager+0xf0>)
   13d1c:	4798      	blx	r3
   13d1e:	e003      	b.n	13d28 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   13d20:	2101      	movs	r1, #1
   13d22:	2027      	movs	r0, #39	; 0x27
   13d24:	4b16      	ldr	r3, [pc, #88]	; (13d80 <vTask_sleep_manager+0xf0>)
   13d26:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   13d28:	4b12      	ldr	r3, [pc, #72]	; (13d74 <vTask_sleep_manager+0xe4>)
   13d2a:	4798      	blx	r3
   13d2c:	0002      	movs	r2, r0
   13d2e:	4b12      	ldr	r3, [pc, #72]	; (13d78 <vTask_sleep_manager+0xe8>)
   13d30:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   13d32:	46c0      	nop			; (mov r8, r8)
   13d34:	4b0f      	ldr	r3, [pc, #60]	; (13d74 <vTask_sleep_manager+0xe4>)
   13d36:	4798      	blx	r3
   13d38:	0002      	movs	r2, r0
   13d3a:	4b0f      	ldr	r3, [pc, #60]	; (13d78 <vTask_sleep_manager+0xe8>)
   13d3c:	681b      	ldr	r3, [r3, #0]
   13d3e:	1ad3      	subs	r3, r2, r3
   13d40:	2bc7      	cmp	r3, #199	; 0xc7
   13d42:	d9f7      	bls.n	13d34 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   13d44:	230f      	movs	r3, #15
   13d46:	18fb      	adds	r3, r7, r3
   13d48:	220f      	movs	r2, #15
   13d4a:	18ba      	adds	r2, r7, r2
   13d4c:	7812      	ldrb	r2, [r2, #0]
   13d4e:	3a01      	subs	r2, #1
   13d50:	701a      	strb	r2, [r3, #0]
   13d52:	230f      	movs	r3, #15
   13d54:	18fb      	adds	r3, r7, r3
   13d56:	781b      	ldrb	r3, [r3, #0]
   13d58:	2b00      	cmp	r3, #0
   13d5a:	d1c6      	bne.n	13cea <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   13d5c:	4b09      	ldr	r3, [pc, #36]	; (13d84 <vTask_sleep_manager+0xf4>)
   13d5e:	4798      	blx	r3
   13d60:	e79a      	b.n	13c98 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   13d62:	4b03      	ldr	r3, [pc, #12]	; (13d70 <vTask_sleep_manager+0xe0>)
   13d64:	2200      	movs	r2, #0
   13d66:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   13d68:	e796      	b.n	13c98 <vTask_sleep_manager+0x8>
   13d6a:	46c0      	nop			; (mov r8, r8)
   13d6c:	00013c49 	.word	0x00013c49
   13d70:	200004fc 	.word	0x200004fc
   13d74:	0000ef5d 	.word	0x0000ef5d
   13d78:	20000500 	.word	0x20000500
   13d7c:	00004650 	.word	0x00004650
   13d80:	00013b55 	.word	0x00013b55
   13d84:	00013d89 	.word	0x00013d89

00013d88 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   13d88:	b580      	push	{r7, lr}
   13d8a:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   13d8c:	4b04      	ldr	r3, [pc, #16]	; (13da0 <gotoSleep+0x18>)
   13d8e:	4798      	blx	r3
	
	lcd_in_sleep = true;
   13d90:	4b04      	ldr	r3, [pc, #16]	; (13da4 <gotoSleep+0x1c>)
   13d92:	2201      	movs	r2, #1
   13d94:	701a      	strb	r2, [r3, #0]
	system_sleep();
   13d96:	4b04      	ldr	r3, [pc, #16]	; (13da8 <gotoSleep+0x20>)
   13d98:	4798      	blx	r3
   13d9a:	46c0      	nop			; (mov r8, r8)
   13d9c:	46bd      	mov	sp, r7
   13d9e:	bd80      	pop	{r7, pc}
   13da0:	00003841 	.word	0x00003841
   13da4:	200007ff 	.word	0x200007ff
   13da8:	00013b21 	.word	0x00013b21

00013dac <pow>:
   13dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dae:	4657      	mov	r7, sl
   13db0:	464e      	mov	r6, r9
   13db2:	46de      	mov	lr, fp
   13db4:	4645      	mov	r5, r8
   13db6:	b5e0      	push	{r5, r6, r7, lr}
   13db8:	b08f      	sub	sp, #60	; 0x3c
   13dba:	001d      	movs	r5, r3
   13dbc:	0006      	movs	r6, r0
   13dbe:	000f      	movs	r7, r1
   13dc0:	0014      	movs	r4, r2
   13dc2:	f000 f9ff 	bl	141c4 <__ieee754_pow>
   13dc6:	4bc7      	ldr	r3, [pc, #796]	; (140e4 <pow+0x338>)
   13dc8:	9000      	str	r0, [sp, #0]
   13dca:	9101      	str	r1, [sp, #4]
   13dcc:	469a      	mov	sl, r3
   13dce:	781b      	ldrb	r3, [r3, #0]
   13dd0:	b25b      	sxtb	r3, r3
   13dd2:	4699      	mov	r9, r3
   13dd4:	3301      	adds	r3, #1
   13dd6:	d03e      	beq.n	13e56 <pow+0xaa>
   13dd8:	0022      	movs	r2, r4
   13dda:	002b      	movs	r3, r5
   13ddc:	0020      	movs	r0, r4
   13dde:	0029      	movs	r1, r5
   13de0:	f003 fb92 	bl	17508 <__aeabi_dcmpun>
   13de4:	4683      	mov	fp, r0
   13de6:	2800      	cmp	r0, #0
   13de8:	d135      	bne.n	13e56 <pow+0xaa>
   13dea:	0032      	movs	r2, r6
   13dec:	003b      	movs	r3, r7
   13dee:	0030      	movs	r0, r6
   13df0:	0039      	movs	r1, r7
   13df2:	f003 fb89 	bl	17508 <__aeabi_dcmpun>
   13df6:	2200      	movs	r2, #0
   13df8:	9003      	str	r0, [sp, #12]
   13dfa:	2800      	cmp	r0, #0
   13dfc:	d000      	beq.n	13e00 <pow+0x54>
   13dfe:	e0b6      	b.n	13f6e <pow+0x1c2>
   13e00:	2300      	movs	r3, #0
   13e02:	0030      	movs	r0, r6
   13e04:	0039      	movs	r1, r7
   13e06:	f001 faa1 	bl	1534c <__aeabi_dcmpeq>
   13e0a:	2800      	cmp	r0, #0
   13e0c:	d02c      	beq.n	13e68 <pow+0xbc>
   13e0e:	2200      	movs	r2, #0
   13e10:	2300      	movs	r3, #0
   13e12:	0020      	movs	r0, r4
   13e14:	0029      	movs	r1, r5
   13e16:	f001 fa99 	bl	1534c <__aeabi_dcmpeq>
   13e1a:	4683      	mov	fp, r0
   13e1c:	2800      	cmp	r0, #0
   13e1e:	d100      	bne.n	13e22 <pow+0x76>
   13e20:	e077      	b.n	13f12 <pow+0x166>
   13e22:	ab04      	add	r3, sp, #16
   13e24:	4698      	mov	r8, r3
   13e26:	2301      	movs	r3, #1
   13e28:	4642      	mov	r2, r8
   13e2a:	9304      	str	r3, [sp, #16]
   13e2c:	4bae      	ldr	r3, [pc, #696]	; (140e8 <pow+0x33c>)
   13e2e:	6053      	str	r3, [r2, #4]
   13e30:	4643      	mov	r3, r8
   13e32:	9a03      	ldr	r2, [sp, #12]
   13e34:	611c      	str	r4, [r3, #16]
   13e36:	615d      	str	r5, [r3, #20]
   13e38:	621a      	str	r2, [r3, #32]
   13e3a:	609e      	str	r6, [r3, #8]
   13e3c:	60df      	str	r7, [r3, #12]
   13e3e:	4642      	mov	r2, r8
   13e40:	2300      	movs	r3, #0
   13e42:	2400      	movs	r4, #0
   13e44:	6193      	str	r3, [r2, #24]
   13e46:	61d4      	str	r4, [r2, #28]
   13e48:	464b      	mov	r3, r9
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d04d      	beq.n	13eea <pow+0x13e>
   13e4e:	2300      	movs	r3, #0
   13e50:	4ca6      	ldr	r4, [pc, #664]	; (140ec <pow+0x340>)
   13e52:	9300      	str	r3, [sp, #0]
   13e54:	9401      	str	r4, [sp, #4]
   13e56:	9800      	ldr	r0, [sp, #0]
   13e58:	9901      	ldr	r1, [sp, #4]
   13e5a:	b00f      	add	sp, #60	; 0x3c
   13e5c:	bc3c      	pop	{r2, r3, r4, r5}
   13e5e:	4690      	mov	r8, r2
   13e60:	4699      	mov	r9, r3
   13e62:	46a2      	mov	sl, r4
   13e64:	46ab      	mov	fp, r5
   13e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e68:	9800      	ldr	r0, [sp, #0]
   13e6a:	9901      	ldr	r1, [sp, #4]
   13e6c:	f000 ffc4 	bl	14df8 <finite>
   13e70:	4681      	mov	r9, r0
   13e72:	2800      	cmp	r0, #0
   13e74:	d100      	bne.n	13e78 <pow+0xcc>
   13e76:	e09b      	b.n	13fb0 <pow+0x204>
   13e78:	9800      	ldr	r0, [sp, #0]
   13e7a:	9901      	ldr	r1, [sp, #4]
   13e7c:	2200      	movs	r2, #0
   13e7e:	2300      	movs	r3, #0
   13e80:	f001 fa64 	bl	1534c <__aeabi_dcmpeq>
   13e84:	2800      	cmp	r0, #0
   13e86:	d0e6      	beq.n	13e56 <pow+0xaa>
   13e88:	0030      	movs	r0, r6
   13e8a:	0039      	movs	r1, r7
   13e8c:	f000 ffb4 	bl	14df8 <finite>
   13e90:	2800      	cmp	r0, #0
   13e92:	d0e0      	beq.n	13e56 <pow+0xaa>
   13e94:	0020      	movs	r0, r4
   13e96:	0029      	movs	r1, r5
   13e98:	f000 ffae 	bl	14df8 <finite>
   13e9c:	2800      	cmp	r0, #0
   13e9e:	d0da      	beq.n	13e56 <pow+0xaa>
   13ea0:	ab04      	add	r3, sp, #16
   13ea2:	4698      	mov	r8, r3
   13ea4:	2304      	movs	r3, #4
   13ea6:	4642      	mov	r2, r8
   13ea8:	9304      	str	r3, [sp, #16]
   13eaa:	4b8f      	ldr	r3, [pc, #572]	; (140e8 <pow+0x33c>)
   13eac:	6114      	str	r4, [r2, #16]
   13eae:	6155      	str	r5, [r2, #20]
   13eb0:	6053      	str	r3, [r2, #4]
   13eb2:	2300      	movs	r3, #0
   13eb4:	2400      	movs	r4, #0
   13eb6:	6213      	str	r3, [r2, #32]
   13eb8:	2300      	movs	r3, #0
   13eba:	6193      	str	r3, [r2, #24]
   13ebc:	61d4      	str	r4, [r2, #28]
   13ebe:	4653      	mov	r3, sl
   13ec0:	781b      	ldrb	r3, [r3, #0]
   13ec2:	6096      	str	r6, [r2, #8]
   13ec4:	60d7      	str	r7, [r2, #12]
   13ec6:	b25b      	sxtb	r3, r3
   13ec8:	2b02      	cmp	r3, #2
   13eca:	d004      	beq.n	13ed6 <pow+0x12a>
   13ecc:	4640      	mov	r0, r8
   13ece:	f000 ff9d 	bl	14e0c <matherr>
   13ed2:	2800      	cmp	r0, #0
   13ed4:	d10e      	bne.n	13ef4 <pow+0x148>
   13ed6:	f003 fc71 	bl	177bc <__errno>
   13eda:	2322      	movs	r3, #34	; 0x22
   13edc:	6003      	str	r3, [r0, #0]
   13ede:	e009      	b.n	13ef4 <pow+0x148>
   13ee0:	4642      	mov	r2, r8
   13ee2:	2300      	movs	r3, #0
   13ee4:	2400      	movs	r4, #0
   13ee6:	6193      	str	r3, [r2, #24]
   13ee8:	61d4      	str	r4, [r2, #28]
   13eea:	4640      	mov	r0, r8
   13eec:	f000 ff8e 	bl	14e0c <matherr>
   13ef0:	2800      	cmp	r0, #0
   13ef2:	d037      	beq.n	13f64 <pow+0x1b8>
   13ef4:	4643      	mov	r3, r8
   13ef6:	6a1b      	ldr	r3, [r3, #32]
   13ef8:	2b00      	cmp	r3, #0
   13efa:	d004      	beq.n	13f06 <pow+0x15a>
   13efc:	f003 fc5e 	bl	177bc <__errno>
   13f00:	4643      	mov	r3, r8
   13f02:	6a1b      	ldr	r3, [r3, #32]
   13f04:	6003      	str	r3, [r0, #0]
   13f06:	4643      	mov	r3, r8
   13f08:	69dc      	ldr	r4, [r3, #28]
   13f0a:	699b      	ldr	r3, [r3, #24]
   13f0c:	9300      	str	r3, [sp, #0]
   13f0e:	9401      	str	r4, [sp, #4]
   13f10:	e7a1      	b.n	13e56 <pow+0xaa>
   13f12:	0020      	movs	r0, r4
   13f14:	0029      	movs	r1, r5
   13f16:	f000 ff6f 	bl	14df8 <finite>
   13f1a:	2800      	cmp	r0, #0
   13f1c:	d09b      	beq.n	13e56 <pow+0xaa>
   13f1e:	2200      	movs	r2, #0
   13f20:	2300      	movs	r3, #0
   13f22:	0020      	movs	r0, r4
   13f24:	0029      	movs	r1, r5
   13f26:	f001 fa17 	bl	15358 <__aeabi_dcmplt>
   13f2a:	2800      	cmp	r0, #0
   13f2c:	d100      	bne.n	13f30 <pow+0x184>
   13f2e:	e792      	b.n	13e56 <pow+0xaa>
   13f30:	ab04      	add	r3, sp, #16
   13f32:	4698      	mov	r8, r3
   13f34:	2301      	movs	r3, #1
   13f36:	4642      	mov	r2, r8
   13f38:	9304      	str	r3, [sp, #16]
   13f3a:	4b6b      	ldr	r3, [pc, #428]	; (140e8 <pow+0x33c>)
   13f3c:	6053      	str	r3, [r2, #4]
   13f3e:	4643      	mov	r3, r8
   13f40:	465a      	mov	r2, fp
   13f42:	609e      	str	r6, [r3, #8]
   13f44:	60df      	str	r7, [r3, #12]
   13f46:	621a      	str	r2, [r3, #32]
   13f48:	611c      	str	r4, [r3, #16]
   13f4a:	615d      	str	r5, [r3, #20]
   13f4c:	4653      	mov	r3, sl
   13f4e:	781b      	ldrb	r3, [r3, #0]
   13f50:	b25b      	sxtb	r3, r3
   13f52:	2b00      	cmp	r3, #0
   13f54:	d0c4      	beq.n	13ee0 <pow+0x134>
   13f56:	2000      	movs	r0, #0
   13f58:	4642      	mov	r2, r8
   13f5a:	4965      	ldr	r1, [pc, #404]	; (140f0 <pow+0x344>)
   13f5c:	6190      	str	r0, [r2, #24]
   13f5e:	61d1      	str	r1, [r2, #28]
   13f60:	2b02      	cmp	r3, #2
   13f62:	d1c2      	bne.n	13eea <pow+0x13e>
   13f64:	f003 fc2a 	bl	177bc <__errno>
   13f68:	2321      	movs	r3, #33	; 0x21
   13f6a:	6003      	str	r3, [r0, #0]
   13f6c:	e7c2      	b.n	13ef4 <pow+0x148>
   13f6e:	2300      	movs	r3, #0
   13f70:	0020      	movs	r0, r4
   13f72:	0029      	movs	r1, r5
   13f74:	f001 f9ea 	bl	1534c <__aeabi_dcmpeq>
   13f78:	2800      	cmp	r0, #0
   13f7a:	d100      	bne.n	13f7e <pow+0x1d2>
   13f7c:	e76b      	b.n	13e56 <pow+0xaa>
   13f7e:	ab04      	add	r3, sp, #16
   13f80:	4698      	mov	r8, r3
   13f82:	2301      	movs	r3, #1
   13f84:	4642      	mov	r2, r8
   13f86:	9304      	str	r3, [sp, #16]
   13f88:	4b57      	ldr	r3, [pc, #348]	; (140e8 <pow+0x33c>)
   13f8a:	4641      	mov	r1, r8
   13f8c:	6053      	str	r3, [r2, #4]
   13f8e:	4643      	mov	r3, r8
   13f90:	465a      	mov	r2, fp
   13f92:	621a      	str	r2, [r3, #32]
   13f94:	2200      	movs	r2, #0
   13f96:	609e      	str	r6, [r3, #8]
   13f98:	60df      	str	r7, [r3, #12]
   13f9a:	611c      	str	r4, [r3, #16]
   13f9c:	615d      	str	r5, [r3, #20]
   13f9e:	4b53      	ldr	r3, [pc, #332]	; (140ec <pow+0x340>)
   13fa0:	618a      	str	r2, [r1, #24]
   13fa2:	61cb      	str	r3, [r1, #28]
   13fa4:	9200      	str	r2, [sp, #0]
   13fa6:	9301      	str	r3, [sp, #4]
   13fa8:	464b      	mov	r3, r9
   13faa:	2b02      	cmp	r3, #2
   13fac:	d19d      	bne.n	13eea <pow+0x13e>
   13fae:	e752      	b.n	13e56 <pow+0xaa>
   13fb0:	0030      	movs	r0, r6
   13fb2:	0039      	movs	r1, r7
   13fb4:	f000 ff20 	bl	14df8 <finite>
   13fb8:	2800      	cmp	r0, #0
   13fba:	d100      	bne.n	13fbe <pow+0x212>
   13fbc:	e75c      	b.n	13e78 <pow+0xcc>
   13fbe:	0020      	movs	r0, r4
   13fc0:	0029      	movs	r1, r5
   13fc2:	f000 ff19 	bl	14df8 <finite>
   13fc6:	2800      	cmp	r0, #0
   13fc8:	d100      	bne.n	13fcc <pow+0x220>
   13fca:	e755      	b.n	13e78 <pow+0xcc>
   13fcc:	9800      	ldr	r0, [sp, #0]
   13fce:	9901      	ldr	r1, [sp, #4]
   13fd0:	000b      	movs	r3, r1
   13fd2:	0002      	movs	r2, r0
   13fd4:	f003 fa98 	bl	17508 <__aeabi_dcmpun>
   13fd8:	ab04      	add	r3, sp, #16
   13fda:	4698      	mov	r8, r3
   13fdc:	2800      	cmp	r0, #0
   13fde:	d161      	bne.n	140a4 <pow+0x2f8>
   13fe0:	2303      	movs	r3, #3
   13fe2:	4642      	mov	r2, r8
   13fe4:	9304      	str	r3, [sp, #16]
   13fe6:	4b40      	ldr	r3, [pc, #256]	; (140e8 <pow+0x33c>)
   13fe8:	6210      	str	r0, [r2, #32]
   13fea:	6053      	str	r3, [r2, #4]
   13fec:	4653      	mov	r3, sl
   13fee:	781b      	ldrb	r3, [r3, #0]
   13ff0:	6096      	str	r6, [r2, #8]
   13ff2:	60d7      	str	r7, [r2, #12]
   13ff4:	b25b      	sxtb	r3, r3
   13ff6:	6114      	str	r4, [r2, #16]
   13ff8:	6155      	str	r5, [r2, #20]
   13ffa:	4699      	mov	r9, r3
   13ffc:	2b00      	cmp	r3, #0
   13ffe:	d12f      	bne.n	14060 <pow+0x2b4>
   14000:	22e0      	movs	r2, #224	; 0xe0
   14002:	4641      	mov	r1, r8
   14004:	4b3b      	ldr	r3, [pc, #236]	; (140f4 <pow+0x348>)
   14006:	0612      	lsls	r2, r2, #24
   14008:	618a      	str	r2, [r1, #24]
   1400a:	61cb      	str	r3, [r1, #28]
   1400c:	0030      	movs	r0, r6
   1400e:	2200      	movs	r2, #0
   14010:	2300      	movs	r3, #0
   14012:	0039      	movs	r1, r7
   14014:	f001 f9a0 	bl	15358 <__aeabi_dcmplt>
   14018:	2800      	cmp	r0, #0
   1401a:	d100      	bne.n	1401e <pow+0x272>
   1401c:	e756      	b.n	13ecc <pow+0x120>
   1401e:	2200      	movs	r2, #0
   14020:	4b35      	ldr	r3, [pc, #212]	; (140f8 <pow+0x34c>)
   14022:	0020      	movs	r0, r4
   14024:	0029      	movs	r1, r5
   14026:	f002 fcd9 	bl	169dc <__aeabi_dmul>
   1402a:	0004      	movs	r4, r0
   1402c:	000d      	movs	r5, r1
   1402e:	f000 fef5 	bl	14e1c <rint>
   14032:	0002      	movs	r2, r0
   14034:	000b      	movs	r3, r1
   14036:	0020      	movs	r0, r4
   14038:	0029      	movs	r1, r5
   1403a:	f001 f987 	bl	1534c <__aeabi_dcmpeq>
   1403e:	2800      	cmp	r0, #0
   14040:	d105      	bne.n	1404e <pow+0x2a2>
   14042:	22e0      	movs	r2, #224	; 0xe0
   14044:	4b2d      	ldr	r3, [pc, #180]	; (140fc <pow+0x350>)
   14046:	0612      	lsls	r2, r2, #24
   14048:	4641      	mov	r1, r8
   1404a:	618a      	str	r2, [r1, #24]
   1404c:	61cb      	str	r3, [r1, #28]
   1404e:	4653      	mov	r3, sl
   14050:	781b      	ldrb	r3, [r3, #0]
   14052:	b25b      	sxtb	r3, r3
   14054:	4699      	mov	r9, r3
   14056:	464b      	mov	r3, r9
   14058:	2b02      	cmp	r3, #2
   1405a:	d000      	beq.n	1405e <pow+0x2b2>
   1405c:	e736      	b.n	13ecc <pow+0x120>
   1405e:	e73a      	b.n	13ed6 <pow+0x12a>
   14060:	2200      	movs	r2, #0
   14062:	4641      	mov	r1, r8
   14064:	4b26      	ldr	r3, [pc, #152]	; (14100 <pow+0x354>)
   14066:	0030      	movs	r0, r6
   14068:	618a      	str	r2, [r1, #24]
   1406a:	61cb      	str	r3, [r1, #28]
   1406c:	2200      	movs	r2, #0
   1406e:	2300      	movs	r3, #0
   14070:	0039      	movs	r1, r7
   14072:	f001 f971 	bl	15358 <__aeabi_dcmplt>
   14076:	2800      	cmp	r0, #0
   14078:	d0ed      	beq.n	14056 <pow+0x2aa>
   1407a:	2200      	movs	r2, #0
   1407c:	4b1e      	ldr	r3, [pc, #120]	; (140f8 <pow+0x34c>)
   1407e:	0020      	movs	r0, r4
   14080:	0029      	movs	r1, r5
   14082:	f002 fcab 	bl	169dc <__aeabi_dmul>
   14086:	0004      	movs	r4, r0
   14088:	000d      	movs	r5, r1
   1408a:	f000 fec7 	bl	14e1c <rint>
   1408e:	0002      	movs	r2, r0
   14090:	000b      	movs	r3, r1
   14092:	0020      	movs	r0, r4
   14094:	0029      	movs	r1, r5
   14096:	f001 f959 	bl	1534c <__aeabi_dcmpeq>
   1409a:	2800      	cmp	r0, #0
   1409c:	d1d7      	bne.n	1404e <pow+0x2a2>
   1409e:	2200      	movs	r2, #0
   140a0:	4b13      	ldr	r3, [pc, #76]	; (140f0 <pow+0x344>)
   140a2:	e7d1      	b.n	14048 <pow+0x29c>
   140a4:	2301      	movs	r3, #1
   140a6:	4642      	mov	r2, r8
   140a8:	9304      	str	r3, [sp, #16]
   140aa:	4b0f      	ldr	r3, [pc, #60]	; (140e8 <pow+0x33c>)
   140ac:	6053      	str	r3, [r2, #4]
   140ae:	4643      	mov	r3, r8
   140b0:	464a      	mov	r2, r9
   140b2:	611c      	str	r4, [r3, #16]
   140b4:	615d      	str	r5, [r3, #20]
   140b6:	621a      	str	r2, [r3, #32]
   140b8:	609e      	str	r6, [r3, #8]
   140ba:	60df      	str	r7, [r3, #12]
   140bc:	2400      	movs	r4, #0
   140be:	4653      	mov	r3, sl
   140c0:	571c      	ldrsb	r4, [r3, r4]
   140c2:	2c00      	cmp	r4, #0
   140c4:	d100      	bne.n	140c8 <pow+0x31c>
   140c6:	e70b      	b.n	13ee0 <pow+0x134>
   140c8:	2300      	movs	r3, #0
   140ca:	2200      	movs	r2, #0
   140cc:	0019      	movs	r1, r3
   140ce:	0010      	movs	r0, r2
   140d0:	f002 f850 	bl	16174 <__aeabi_ddiv>
   140d4:	4643      	mov	r3, r8
   140d6:	6198      	str	r0, [r3, #24]
   140d8:	61d9      	str	r1, [r3, #28]
   140da:	2c02      	cmp	r4, #2
   140dc:	d100      	bne.n	140e0 <pow+0x334>
   140de:	e741      	b.n	13f64 <pow+0x1b8>
   140e0:	e703      	b.n	13eea <pow+0x13e>
   140e2:	46c0      	nop			; (mov r8, r8)
   140e4:	20000029 	.word	0x20000029
   140e8:	0001962c 	.word	0x0001962c
   140ec:	3ff00000 	.word	0x3ff00000
   140f0:	fff00000 	.word	0xfff00000
   140f4:	47efffff 	.word	0x47efffff
   140f8:	3fe00000 	.word	0x3fe00000
   140fc:	c7efffff 	.word	0xc7efffff
   14100:	7ff00000 	.word	0x7ff00000

00014104 <sqrt>:
   14104:	b5f0      	push	{r4, r5, r6, r7, lr}
   14106:	4647      	mov	r7, r8
   14108:	46ce      	mov	lr, r9
   1410a:	b580      	push	{r7, lr}
   1410c:	b08d      	sub	sp, #52	; 0x34
   1410e:	0004      	movs	r4, r0
   14110:	000d      	movs	r5, r1
   14112:	f000 fd8d 	bl	14c30 <__ieee754_sqrt>
   14116:	4b29      	ldr	r3, [pc, #164]	; (141bc <sqrt+0xb8>)
   14118:	0006      	movs	r6, r0
   1411a:	781b      	ldrb	r3, [r3, #0]
   1411c:	000f      	movs	r7, r1
   1411e:	b25b      	sxtb	r3, r3
   14120:	4698      	mov	r8, r3
   14122:	3301      	adds	r3, #1
   14124:	d010      	beq.n	14148 <sqrt+0x44>
   14126:	0022      	movs	r2, r4
   14128:	002b      	movs	r3, r5
   1412a:	0020      	movs	r0, r4
   1412c:	0029      	movs	r1, r5
   1412e:	f003 f9eb 	bl	17508 <__aeabi_dcmpun>
   14132:	4681      	mov	r9, r0
   14134:	2800      	cmp	r0, #0
   14136:	d107      	bne.n	14148 <sqrt+0x44>
   14138:	2200      	movs	r2, #0
   1413a:	2300      	movs	r3, #0
   1413c:	0020      	movs	r0, r4
   1413e:	0029      	movs	r1, r5
   14140:	f001 f90a 	bl	15358 <__aeabi_dcmplt>
   14144:	2800      	cmp	r0, #0
   14146:	d106      	bne.n	14156 <sqrt+0x52>
   14148:	0030      	movs	r0, r6
   1414a:	0039      	movs	r1, r7
   1414c:	b00d      	add	sp, #52	; 0x34
   1414e:	bc0c      	pop	{r2, r3}
   14150:	4690      	mov	r8, r2
   14152:	4699      	mov	r9, r3
   14154:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14156:	2301      	movs	r3, #1
   14158:	9302      	str	r3, [sp, #8]
   1415a:	4b19      	ldr	r3, [pc, #100]	; (141c0 <sqrt+0xbc>)
   1415c:	9406      	str	r4, [sp, #24]
   1415e:	9507      	str	r5, [sp, #28]
   14160:	9303      	str	r3, [sp, #12]
   14162:	464b      	mov	r3, r9
   14164:	930a      	str	r3, [sp, #40]	; 0x28
   14166:	4643      	mov	r3, r8
   14168:	9404      	str	r4, [sp, #16]
   1416a:	9505      	str	r5, [sp, #20]
   1416c:	2b00      	cmp	r3, #0
   1416e:	d015      	beq.n	1419c <sqrt+0x98>
   14170:	2300      	movs	r3, #0
   14172:	2200      	movs	r2, #0
   14174:	0019      	movs	r1, r3
   14176:	0010      	movs	r0, r2
   14178:	f001 fffc 	bl	16174 <__aeabi_ddiv>
   1417c:	4643      	mov	r3, r8
   1417e:	9008      	str	r0, [sp, #32]
   14180:	9109      	str	r1, [sp, #36]	; 0x24
   14182:	2b02      	cmp	r3, #2
   14184:	d10e      	bne.n	141a4 <sqrt+0xa0>
   14186:	f003 fb19 	bl	177bc <__errno>
   1418a:	2321      	movs	r3, #33	; 0x21
   1418c:	6003      	str	r3, [r0, #0]
   1418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14190:	9301      	str	r3, [sp, #4]
   14192:	2b00      	cmp	r3, #0
   14194:	d10c      	bne.n	141b0 <sqrt+0xac>
   14196:	9e08      	ldr	r6, [sp, #32]
   14198:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1419a:	e7d5      	b.n	14148 <sqrt+0x44>
   1419c:	2300      	movs	r3, #0
   1419e:	2400      	movs	r4, #0
   141a0:	9308      	str	r3, [sp, #32]
   141a2:	9409      	str	r4, [sp, #36]	; 0x24
   141a4:	a802      	add	r0, sp, #8
   141a6:	f000 fe31 	bl	14e0c <matherr>
   141aa:	2800      	cmp	r0, #0
   141ac:	d1ef      	bne.n	1418e <sqrt+0x8a>
   141ae:	e7ea      	b.n	14186 <sqrt+0x82>
   141b0:	f003 fb04 	bl	177bc <__errno>
   141b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141b6:	9301      	str	r3, [sp, #4]
   141b8:	6003      	str	r3, [r0, #0]
   141ba:	e7ec      	b.n	14196 <sqrt+0x92>
   141bc:	20000029 	.word	0x20000029
   141c0:	00019630 	.word	0x00019630

000141c4 <__ieee754_pow>:
   141c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141c6:	4657      	mov	r7, sl
   141c8:	464e      	mov	r6, r9
   141ca:	4645      	mov	r5, r8
   141cc:	46de      	mov	lr, fp
   141ce:	001c      	movs	r4, r3
   141d0:	0013      	movs	r3, r2
   141d2:	b5e0      	push	{r5, r6, r7, lr}
   141d4:	0065      	lsls	r5, r4, #1
   141d6:	b091      	sub	sp, #68	; 0x44
   141d8:	086d      	lsrs	r5, r5, #1
   141da:	9300      	str	r3, [sp, #0]
   141dc:	9401      	str	r4, [sp, #4]
   141de:	0007      	movs	r7, r0
   141e0:	000e      	movs	r6, r1
   141e2:	4680      	mov	r8, r0
   141e4:	4689      	mov	r9, r1
   141e6:	46a2      	mov	sl, r4
   141e8:	432b      	orrs	r3, r5
   141ea:	d031      	beq.n	14250 <__ieee754_pow+0x8c>
   141ec:	4b67      	ldr	r3, [pc, #412]	; (1438c <__ieee754_pow+0x1c8>)
   141ee:	0074      	lsls	r4, r6, #1
   141f0:	0864      	lsrs	r4, r4, #1
   141f2:	429c      	cmp	r4, r3
   141f4:	dc27      	bgt.n	14246 <__ieee754_pow+0x82>
   141f6:	d024      	beq.n	14242 <__ieee754_pow+0x7e>
   141f8:	429d      	cmp	r5, r3
   141fa:	dc24      	bgt.n	14246 <__ieee754_pow+0x82>
   141fc:	4b63      	ldr	r3, [pc, #396]	; (1438c <__ieee754_pow+0x1c8>)
   141fe:	429d      	cmp	r5, r3
   14200:	d100      	bne.n	14204 <__ieee754_pow+0x40>
   14202:	e081      	b.n	14308 <__ieee754_pow+0x144>
   14204:	2300      	movs	r3, #0
   14206:	469b      	mov	fp, r3
   14208:	464b      	mov	r3, r9
   1420a:	2b00      	cmp	r3, #0
   1420c:	da00      	bge.n	14210 <__ieee754_pow+0x4c>
   1420e:	e07f      	b.n	14310 <__ieee754_pow+0x14c>
   14210:	2a00      	cmp	r2, #0
   14212:	d12c      	bne.n	1426e <__ieee754_pow+0xaa>
   14214:	4b5d      	ldr	r3, [pc, #372]	; (1438c <__ieee754_pow+0x1c8>)
   14216:	429d      	cmp	r5, r3
   14218:	d100      	bne.n	1421c <__ieee754_pow+0x58>
   1421a:	e097      	b.n	1434c <__ieee754_pow+0x188>
   1421c:	4b5c      	ldr	r3, [pc, #368]	; (14390 <__ieee754_pow+0x1cc>)
   1421e:	429d      	cmp	r5, r3
   14220:	d066      	beq.n	142f0 <__ieee754_pow+0x12c>
   14222:	2380      	movs	r3, #128	; 0x80
   14224:	05db      	lsls	r3, r3, #23
   14226:	459a      	cmp	sl, r3
   14228:	d100      	bne.n	1422c <__ieee754_pow+0x68>
   1422a:	e3b9      	b.n	149a0 <__ieee754_pow+0x7dc>
   1422c:	4b59      	ldr	r3, [pc, #356]	; (14394 <__ieee754_pow+0x1d0>)
   1422e:	459a      	cmp	sl, r3
   14230:	d11d      	bne.n	1426e <__ieee754_pow+0xaa>
   14232:	464b      	mov	r3, r9
   14234:	2b00      	cmp	r3, #0
   14236:	db1a      	blt.n	1426e <__ieee754_pow+0xaa>
   14238:	0038      	movs	r0, r7
   1423a:	0031      	movs	r1, r6
   1423c:	f000 fcf8 	bl	14c30 <__ieee754_sqrt>
   14240:	e008      	b.n	14254 <__ieee754_pow+0x90>
   14242:	2800      	cmp	r0, #0
   14244:	d00d      	beq.n	14262 <__ieee754_pow+0x9e>
   14246:	4b54      	ldr	r3, [pc, #336]	; (14398 <__ieee754_pow+0x1d4>)
   14248:	469c      	mov	ip, r3
   1424a:	4464      	add	r4, ip
   1424c:	4327      	orrs	r7, r4
   1424e:	d10a      	bne.n	14266 <__ieee754_pow+0xa2>
   14250:	2000      	movs	r0, #0
   14252:	494f      	ldr	r1, [pc, #316]	; (14390 <__ieee754_pow+0x1cc>)
   14254:	b011      	add	sp, #68	; 0x44
   14256:	bc3c      	pop	{r2, r3, r4, r5}
   14258:	4690      	mov	r8, r2
   1425a:	4699      	mov	r9, r3
   1425c:	46a2      	mov	sl, r4
   1425e:	46ab      	mov	fp, r5
   14260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14262:	42a5      	cmp	r5, r4
   14264:	ddca      	ble.n	141fc <__ieee754_pow+0x38>
   14266:	484d      	ldr	r0, [pc, #308]	; (1439c <__ieee754_pow+0x1d8>)
   14268:	f000 fdd2 	bl	14e10 <nan>
   1426c:	e7f2      	b.n	14254 <__ieee754_pow+0x90>
   1426e:	0038      	movs	r0, r7
   14270:	0031      	movs	r1, r6
   14272:	f000 fdbd 	bl	14df0 <fabs>
   14276:	4643      	mov	r3, r8
   14278:	2b00      	cmp	r3, #0
   1427a:	d11d      	bne.n	142b8 <__ieee754_pow+0xf4>
   1427c:	2c00      	cmp	r4, #0
   1427e:	d004      	beq.n	1428a <__ieee754_pow+0xc6>
   14280:	4a43      	ldr	r2, [pc, #268]	; (14390 <__ieee754_pow+0x1cc>)
   14282:	00b3      	lsls	r3, r6, #2
   14284:	089b      	lsrs	r3, r3, #2
   14286:	4293      	cmp	r3, r2
   14288:	d116      	bne.n	142b8 <__ieee754_pow+0xf4>
   1428a:	4653      	mov	r3, sl
   1428c:	2b00      	cmp	r3, #0
   1428e:	da00      	bge.n	14292 <__ieee754_pow+0xce>
   14290:	e3c5      	b.n	14a1e <__ieee754_pow+0x85a>
   14292:	464b      	mov	r3, r9
   14294:	2b00      	cmp	r3, #0
   14296:	dadd      	bge.n	14254 <__ieee754_pow+0x90>
   14298:	4b3f      	ldr	r3, [pc, #252]	; (14398 <__ieee754_pow+0x1d4>)
   1429a:	469c      	mov	ip, r3
   1429c:	465b      	mov	r3, fp
   1429e:	4464      	add	r4, ip
   142a0:	431c      	orrs	r4, r3
   142a2:	d101      	bne.n	142a8 <__ieee754_pow+0xe4>
   142a4:	f000 fc53 	bl	14b4e <__ieee754_pow+0x98a>
   142a8:	465b      	mov	r3, fp
   142aa:	2b01      	cmp	r3, #1
   142ac:	d1d2      	bne.n	14254 <__ieee754_pow+0x90>
   142ae:	2480      	movs	r4, #128	; 0x80
   142b0:	0624      	lsls	r4, r4, #24
   142b2:	190b      	adds	r3, r1, r4
   142b4:	0019      	movs	r1, r3
   142b6:	e7cd      	b.n	14254 <__ieee754_pow+0x90>
   142b8:	0ff3      	lsrs	r3, r6, #31
   142ba:	3b01      	subs	r3, #1
   142bc:	4698      	mov	r8, r3
   142be:	465b      	mov	r3, fp
   142c0:	4642      	mov	r2, r8
   142c2:	4313      	orrs	r3, r2
   142c4:	d057      	beq.n	14376 <__ieee754_pow+0x1b2>
   142c6:	4b36      	ldr	r3, [pc, #216]	; (143a0 <__ieee754_pow+0x1dc>)
   142c8:	429d      	cmp	r5, r3
   142ca:	dd77      	ble.n	143bc <__ieee754_pow+0x1f8>
   142cc:	4b35      	ldr	r3, [pc, #212]	; (143a4 <__ieee754_pow+0x1e0>)
   142ce:	429d      	cmp	r5, r3
   142d0:	dc00      	bgt.n	142d4 <__ieee754_pow+0x110>
   142d2:	e3b1      	b.n	14a38 <__ieee754_pow+0x874>
   142d4:	4b34      	ldr	r3, [pc, #208]	; (143a8 <__ieee754_pow+0x1e4>)
   142d6:	429c      	cmp	r4, r3
   142d8:	dc00      	bgt.n	142dc <__ieee754_pow+0x118>
   142da:	e3a8      	b.n	14a2e <__ieee754_pow+0x86a>
   142dc:	4653      	mov	r3, sl
   142de:	2b00      	cmp	r3, #0
   142e0:	dd43      	ble.n	1436a <__ieee754_pow+0x1a6>
   142e2:	4a32      	ldr	r2, [pc, #200]	; (143ac <__ieee754_pow+0x1e8>)
   142e4:	4b32      	ldr	r3, [pc, #200]	; (143b0 <__ieee754_pow+0x1ec>)
   142e6:	0010      	movs	r0, r2
   142e8:	0019      	movs	r1, r3
   142ea:	f002 fb77 	bl	169dc <__aeabi_dmul>
   142ee:	e7b1      	b.n	14254 <__ieee754_pow+0x90>
   142f0:	4653      	mov	r3, sl
   142f2:	0038      	movs	r0, r7
   142f4:	0031      	movs	r1, r6
   142f6:	2b00      	cmp	r3, #0
   142f8:	daac      	bge.n	14254 <__ieee754_pow+0x90>
   142fa:	003a      	movs	r2, r7
   142fc:	0033      	movs	r3, r6
   142fe:	2000      	movs	r0, #0
   14300:	4923      	ldr	r1, [pc, #140]	; (14390 <__ieee754_pow+0x1cc>)
   14302:	f001 ff37 	bl	16174 <__aeabi_ddiv>
   14306:	e7a5      	b.n	14254 <__ieee754_pow+0x90>
   14308:	2a00      	cmp	r2, #0
   1430a:	d100      	bne.n	1430e <__ieee754_pow+0x14a>
   1430c:	e77a      	b.n	14204 <__ieee754_pow+0x40>
   1430e:	e79a      	b.n	14246 <__ieee754_pow+0x82>
   14310:	4b28      	ldr	r3, [pc, #160]	; (143b4 <__ieee754_pow+0x1f0>)
   14312:	429d      	cmp	r5, r3
   14314:	dc2c      	bgt.n	14370 <__ieee754_pow+0x1ac>
   14316:	4b24      	ldr	r3, [pc, #144]	; (143a8 <__ieee754_pow+0x1e4>)
   14318:	429d      	cmp	r5, r3
   1431a:	dc00      	bgt.n	1431e <__ieee754_pow+0x15a>
   1431c:	e778      	b.n	14210 <__ieee754_pow+0x4c>
   1431e:	4926      	ldr	r1, [pc, #152]	; (143b8 <__ieee754_pow+0x1f4>)
   14320:	152b      	asrs	r3, r5, #20
   14322:	468c      	mov	ip, r1
   14324:	4463      	add	r3, ip
   14326:	2b14      	cmp	r3, #20
   14328:	dc01      	bgt.n	1432e <__ieee754_pow+0x16a>
   1432a:	f000 fbf3 	bl	14b14 <__ieee754_pow+0x950>
   1432e:	2134      	movs	r1, #52	; 0x34
   14330:	1acb      	subs	r3, r1, r3
   14332:	9900      	ldr	r1, [sp, #0]
   14334:	40d9      	lsrs	r1, r3
   14336:	0008      	movs	r0, r1
   14338:	4098      	lsls	r0, r3
   1433a:	4282      	cmp	r2, r0
   1433c:	d000      	beq.n	14340 <__ieee754_pow+0x17c>
   1433e:	e767      	b.n	14210 <__ieee754_pow+0x4c>
   14340:	2301      	movs	r3, #1
   14342:	4019      	ands	r1, r3
   14344:	3301      	adds	r3, #1
   14346:	1a5b      	subs	r3, r3, r1
   14348:	469b      	mov	fp, r3
   1434a:	e761      	b.n	14210 <__ieee754_pow+0x4c>
   1434c:	4b12      	ldr	r3, [pc, #72]	; (14398 <__ieee754_pow+0x1d4>)
   1434e:	18e3      	adds	r3, r4, r3
   14350:	431f      	orrs	r7, r3
   14352:	d100      	bne.n	14356 <__ieee754_pow+0x192>
   14354:	e77c      	b.n	14250 <__ieee754_pow+0x8c>
   14356:	4b14      	ldr	r3, [pc, #80]	; (143a8 <__ieee754_pow+0x1e4>)
   14358:	429c      	cmp	r4, r3
   1435a:	dc00      	bgt.n	1435e <__ieee754_pow+0x19a>
   1435c:	e327      	b.n	149ae <__ieee754_pow+0x7ea>
   1435e:	9800      	ldr	r0, [sp, #0]
   14360:	9901      	ldr	r1, [sp, #4]
   14362:	4653      	mov	r3, sl
   14364:	2b00      	cmp	r3, #0
   14366:	db00      	blt.n	1436a <__ieee754_pow+0x1a6>
   14368:	e774      	b.n	14254 <__ieee754_pow+0x90>
   1436a:	2000      	movs	r0, #0
   1436c:	2100      	movs	r1, #0
   1436e:	e771      	b.n	14254 <__ieee754_pow+0x90>
   14370:	2302      	movs	r3, #2
   14372:	469b      	mov	fp, r3
   14374:	e74c      	b.n	14210 <__ieee754_pow+0x4c>
   14376:	003a      	movs	r2, r7
   14378:	0033      	movs	r3, r6
   1437a:	0038      	movs	r0, r7
   1437c:	0031      	movs	r1, r6
   1437e:	f002 fdad 	bl	16edc <__aeabi_dsub>
   14382:	0002      	movs	r2, r0
   14384:	000b      	movs	r3, r1
   14386:	f001 fef5 	bl	16174 <__aeabi_ddiv>
   1438a:	e763      	b.n	14254 <__ieee754_pow+0x90>
   1438c:	7ff00000 	.word	0x7ff00000
   14390:	3ff00000 	.word	0x3ff00000
   14394:	3fe00000 	.word	0x3fe00000
   14398:	c0100000 	.word	0xc0100000
   1439c:	00019634 	.word	0x00019634
   143a0:	41e00000 	.word	0x41e00000
   143a4:	43f00000 	.word	0x43f00000
   143a8:	3fefffff 	.word	0x3fefffff
   143ac:	8800759c 	.word	0x8800759c
   143b0:	7e37e43c 	.word	0x7e37e43c
   143b4:	433fffff 	.word	0x433fffff
   143b8:	fffffc01 	.word	0xfffffc01
   143bc:	4be9      	ldr	r3, [pc, #932]	; (14764 <__ieee754_pow+0x5a0>)
   143be:	2200      	movs	r2, #0
   143c0:	429c      	cmp	r4, r3
   143c2:	dc06      	bgt.n	143d2 <__ieee754_pow+0x20e>
   143c4:	2200      	movs	r2, #0
   143c6:	4be8      	ldr	r3, [pc, #928]	; (14768 <__ieee754_pow+0x5a4>)
   143c8:	f002 fb08 	bl	169dc <__aeabi_dmul>
   143cc:	2235      	movs	r2, #53	; 0x35
   143ce:	000c      	movs	r4, r1
   143d0:	4252      	negs	r2, r2
   143d2:	4de6      	ldr	r5, [pc, #920]	; (1476c <__ieee754_pow+0x5a8>)
   143d4:	1523      	asrs	r3, r4, #20
   143d6:	46ac      	mov	ip, r5
   143d8:	4463      	add	r3, ip
   143da:	4699      	mov	r9, r3
   143dc:	0324      	lsls	r4, r4, #12
   143de:	4de4      	ldr	r5, [pc, #912]	; (14770 <__ieee754_pow+0x5ac>)
   143e0:	4be4      	ldr	r3, [pc, #912]	; (14774 <__ieee754_pow+0x5b0>)
   143e2:	0b24      	lsrs	r4, r4, #12
   143e4:	4491      	add	r9, r2
   143e6:	4325      	orrs	r5, r4
   143e8:	429c      	cmp	r4, r3
   143ea:	dd09      	ble.n	14400 <__ieee754_pow+0x23c>
   143ec:	4be2      	ldr	r3, [pc, #904]	; (14778 <__ieee754_pow+0x5b4>)
   143ee:	429c      	cmp	r4, r3
   143f0:	dc00      	bgt.n	143f4 <__ieee754_pow+0x230>
   143f2:	e3b6      	b.n	14b62 <__ieee754_pow+0x99e>
   143f4:	2301      	movs	r3, #1
   143f6:	469c      	mov	ip, r3
   143f8:	4be0      	ldr	r3, [pc, #896]	; (1477c <__ieee754_pow+0x5b8>)
   143fa:	44e1      	add	r9, ip
   143fc:	469c      	mov	ip, r3
   143fe:	4465      	add	r5, ip
   14400:	2300      	movs	r3, #0
   14402:	2400      	movs	r4, #0
   14404:	2200      	movs	r2, #0
   14406:	9308      	str	r3, [sp, #32]
   14408:	9409      	str	r4, [sp, #36]	; 0x24
   1440a:	930c      	str	r3, [sp, #48]	; 0x30
   1440c:	940d      	str	r4, [sp, #52]	; 0x34
   1440e:	2400      	movs	r4, #0
   14410:	4bd7      	ldr	r3, [pc, #860]	; (14770 <__ieee754_pow+0x5ac>)
   14412:	9206      	str	r2, [sp, #24]
   14414:	9307      	str	r3, [sp, #28]
   14416:	9a06      	ldr	r2, [sp, #24]
   14418:	9b07      	ldr	r3, [sp, #28]
   1441a:	0029      	movs	r1, r5
   1441c:	900a      	str	r0, [sp, #40]	; 0x28
   1441e:	910b      	str	r1, [sp, #44]	; 0x2c
   14420:	f002 fd5c 	bl	16edc <__aeabi_dsub>
   14424:	9a06      	ldr	r2, [sp, #24]
   14426:	9b07      	ldr	r3, [sp, #28]
   14428:	0006      	movs	r6, r0
   1442a:	000f      	movs	r7, r1
   1442c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1442e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14430:	f001 fb90 	bl	15b54 <__aeabi_dadd>
   14434:	0002      	movs	r2, r0
   14436:	000b      	movs	r3, r1
   14438:	2000      	movs	r0, #0
   1443a:	49cd      	ldr	r1, [pc, #820]	; (14770 <__ieee754_pow+0x5ac>)
   1443c:	f001 fe9a 	bl	16174 <__aeabi_ddiv>
   14440:	000a      	movs	r2, r1
   14442:	0001      	movs	r1, r0
   14444:	0013      	movs	r3, r2
   14446:	910e      	str	r1, [sp, #56]	; 0x38
   14448:	920f      	str	r2, [sp, #60]	; 0x3c
   1444a:	0002      	movs	r2, r0
   1444c:	0039      	movs	r1, r7
   1444e:	0030      	movs	r0, r6
   14450:	f002 fac4 	bl	169dc <__aeabi_dmul>
   14454:	000a      	movs	r2, r1
   14456:	0001      	movs	r1, r0
   14458:	2080      	movs	r0, #128	; 0x80
   1445a:	9104      	str	r1, [sp, #16]
   1445c:	9205      	str	r2, [sp, #20]
   1445e:	0013      	movs	r3, r2
   14460:	2200      	movs	r2, #0
   14462:	1069      	asrs	r1, r5, #1
   14464:	2580      	movs	r5, #128	; 0x80
   14466:	0300      	lsls	r0, r0, #12
   14468:	4684      	mov	ip, r0
   1446a:	9202      	str	r2, [sp, #8]
   1446c:	9303      	str	r3, [sp, #12]
   1446e:	2200      	movs	r2, #0
   14470:	05ad      	lsls	r5, r5, #22
   14472:	430d      	orrs	r5, r1
   14474:	4465      	add	r5, ip
   14476:	192b      	adds	r3, r5, r4
   14478:	9802      	ldr	r0, [sp, #8]
   1447a:	9903      	ldr	r1, [sp, #12]
   1447c:	0014      	movs	r4, r2
   1447e:	001d      	movs	r5, r3
   14480:	f002 faac 	bl	169dc <__aeabi_dmul>
   14484:	0002      	movs	r2, r0
   14486:	000b      	movs	r3, r1
   14488:	0030      	movs	r0, r6
   1448a:	0039      	movs	r1, r7
   1448c:	f002 fd26 	bl	16edc <__aeabi_dsub>
   14490:	9a06      	ldr	r2, [sp, #24]
   14492:	9b07      	ldr	r3, [sp, #28]
   14494:	0006      	movs	r6, r0
   14496:	000f      	movs	r7, r1
   14498:	0020      	movs	r0, r4
   1449a:	0029      	movs	r1, r5
   1449c:	f002 fd1e 	bl	16edc <__aeabi_dsub>
   144a0:	0002      	movs	r2, r0
   144a2:	000b      	movs	r3, r1
   144a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   144a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   144a8:	f002 fd18 	bl	16edc <__aeabi_dsub>
   144ac:	9a02      	ldr	r2, [sp, #8]
   144ae:	9b03      	ldr	r3, [sp, #12]
   144b0:	f002 fa94 	bl	169dc <__aeabi_dmul>
   144b4:	0002      	movs	r2, r0
   144b6:	000b      	movs	r3, r1
   144b8:	0030      	movs	r0, r6
   144ba:	0039      	movs	r1, r7
   144bc:	f002 fd0e 	bl	16edc <__aeabi_dsub>
   144c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   144c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   144c4:	f002 fa8a 	bl	169dc <__aeabi_dmul>
   144c8:	9d04      	ldr	r5, [sp, #16]
   144ca:	9e05      	ldr	r6, [sp, #20]
   144cc:	9006      	str	r0, [sp, #24]
   144ce:	9107      	str	r1, [sp, #28]
   144d0:	002a      	movs	r2, r5
   144d2:	0033      	movs	r3, r6
   144d4:	0028      	movs	r0, r5
   144d6:	0031      	movs	r1, r6
   144d8:	f002 fa80 	bl	169dc <__aeabi_dmul>
   144dc:	0006      	movs	r6, r0
   144de:	000f      	movs	r7, r1
   144e0:	4aa7      	ldr	r2, [pc, #668]	; (14780 <__ieee754_pow+0x5bc>)
   144e2:	4ba8      	ldr	r3, [pc, #672]	; (14784 <__ieee754_pow+0x5c0>)
   144e4:	f002 fa7a 	bl	169dc <__aeabi_dmul>
   144e8:	4aa7      	ldr	r2, [pc, #668]	; (14788 <__ieee754_pow+0x5c4>)
   144ea:	4ba8      	ldr	r3, [pc, #672]	; (1478c <__ieee754_pow+0x5c8>)
   144ec:	f001 fb32 	bl	15b54 <__aeabi_dadd>
   144f0:	0032      	movs	r2, r6
   144f2:	003b      	movs	r3, r7
   144f4:	f002 fa72 	bl	169dc <__aeabi_dmul>
   144f8:	4aa5      	ldr	r2, [pc, #660]	; (14790 <__ieee754_pow+0x5cc>)
   144fa:	4ba6      	ldr	r3, [pc, #664]	; (14794 <__ieee754_pow+0x5d0>)
   144fc:	f001 fb2a 	bl	15b54 <__aeabi_dadd>
   14500:	0032      	movs	r2, r6
   14502:	003b      	movs	r3, r7
   14504:	f002 fa6a 	bl	169dc <__aeabi_dmul>
   14508:	4aa3      	ldr	r2, [pc, #652]	; (14798 <__ieee754_pow+0x5d4>)
   1450a:	4ba4      	ldr	r3, [pc, #656]	; (1479c <__ieee754_pow+0x5d8>)
   1450c:	f001 fb22 	bl	15b54 <__aeabi_dadd>
   14510:	0032      	movs	r2, r6
   14512:	003b      	movs	r3, r7
   14514:	f002 fa62 	bl	169dc <__aeabi_dmul>
   14518:	4aa1      	ldr	r2, [pc, #644]	; (147a0 <__ieee754_pow+0x5dc>)
   1451a:	4ba2      	ldr	r3, [pc, #648]	; (147a4 <__ieee754_pow+0x5e0>)
   1451c:	f001 fb1a 	bl	15b54 <__aeabi_dadd>
   14520:	0032      	movs	r2, r6
   14522:	003b      	movs	r3, r7
   14524:	f002 fa5a 	bl	169dc <__aeabi_dmul>
   14528:	4a9f      	ldr	r2, [pc, #636]	; (147a8 <__ieee754_pow+0x5e4>)
   1452a:	4ba0      	ldr	r3, [pc, #640]	; (147ac <__ieee754_pow+0x5e8>)
   1452c:	f001 fb12 	bl	15b54 <__aeabi_dadd>
   14530:	0032      	movs	r2, r6
   14532:	0004      	movs	r4, r0
   14534:	000d      	movs	r5, r1
   14536:	003b      	movs	r3, r7
   14538:	0030      	movs	r0, r6
   1453a:	0039      	movs	r1, r7
   1453c:	f002 fa4e 	bl	169dc <__aeabi_dmul>
   14540:	0002      	movs	r2, r0
   14542:	000b      	movs	r3, r1
   14544:	0020      	movs	r0, r4
   14546:	0029      	movs	r1, r5
   14548:	f002 fa48 	bl	169dc <__aeabi_dmul>
   1454c:	9e02      	ldr	r6, [sp, #8]
   1454e:	9f03      	ldr	r7, [sp, #12]
   14550:	0004      	movs	r4, r0
   14552:	000d      	movs	r5, r1
   14554:	9804      	ldr	r0, [sp, #16]
   14556:	9905      	ldr	r1, [sp, #20]
   14558:	0032      	movs	r2, r6
   1455a:	003b      	movs	r3, r7
   1455c:	f001 fafa 	bl	15b54 <__aeabi_dadd>
   14560:	9a06      	ldr	r2, [sp, #24]
   14562:	9b07      	ldr	r3, [sp, #28]
   14564:	f002 fa3a 	bl	169dc <__aeabi_dmul>
   14568:	0022      	movs	r2, r4
   1456a:	002b      	movs	r3, r5
   1456c:	f001 faf2 	bl	15b54 <__aeabi_dadd>
   14570:	0032      	movs	r2, r6
   14572:	900a      	str	r0, [sp, #40]	; 0x28
   14574:	910b      	str	r1, [sp, #44]	; 0x2c
   14576:	003b      	movs	r3, r7
   14578:	0030      	movs	r0, r6
   1457a:	0039      	movs	r1, r7
   1457c:	9602      	str	r6, [sp, #8]
   1457e:	9703      	str	r7, [sp, #12]
   14580:	f002 fa2c 	bl	169dc <__aeabi_dmul>
   14584:	2200      	movs	r2, #0
   14586:	4b8a      	ldr	r3, [pc, #552]	; (147b0 <__ieee754_pow+0x5ec>)
   14588:	0004      	movs	r4, r0
   1458a:	000d      	movs	r5, r1
   1458c:	f001 fae2 	bl	15b54 <__aeabi_dadd>
   14590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14594:	f001 fade 	bl	15b54 <__aeabi_dadd>
   14598:	2600      	movs	r6, #0
   1459a:	000f      	movs	r7, r1
   1459c:	0032      	movs	r2, r6
   1459e:	000b      	movs	r3, r1
   145a0:	9802      	ldr	r0, [sp, #8]
   145a2:	9903      	ldr	r1, [sp, #12]
   145a4:	f002 fa1a 	bl	169dc <__aeabi_dmul>
   145a8:	2200      	movs	r2, #0
   145aa:	9002      	str	r0, [sp, #8]
   145ac:	9103      	str	r1, [sp, #12]
   145ae:	4b80      	ldr	r3, [pc, #512]	; (147b0 <__ieee754_pow+0x5ec>)
   145b0:	0030      	movs	r0, r6
   145b2:	0039      	movs	r1, r7
   145b4:	f002 fc92 	bl	16edc <__aeabi_dsub>
   145b8:	0022      	movs	r2, r4
   145ba:	002b      	movs	r3, r5
   145bc:	f002 fc8e 	bl	16edc <__aeabi_dsub>
   145c0:	0002      	movs	r2, r0
   145c2:	000b      	movs	r3, r1
   145c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   145c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   145c8:	f002 fc88 	bl	16edc <__aeabi_dsub>
   145cc:	9a04      	ldr	r2, [sp, #16]
   145ce:	9b05      	ldr	r3, [sp, #20]
   145d0:	f002 fa04 	bl	169dc <__aeabi_dmul>
   145d4:	0032      	movs	r2, r6
   145d6:	0004      	movs	r4, r0
   145d8:	000d      	movs	r5, r1
   145da:	9806      	ldr	r0, [sp, #24]
   145dc:	9907      	ldr	r1, [sp, #28]
   145de:	003b      	movs	r3, r7
   145e0:	f002 f9fc 	bl	169dc <__aeabi_dmul>
   145e4:	0002      	movs	r2, r0
   145e6:	000b      	movs	r3, r1
   145e8:	0020      	movs	r0, r4
   145ea:	0029      	movs	r1, r5
   145ec:	f001 fab2 	bl	15b54 <__aeabi_dadd>
   145f0:	0004      	movs	r4, r0
   145f2:	000d      	movs	r5, r1
   145f4:	0002      	movs	r2, r0
   145f6:	000b      	movs	r3, r1
   145f8:	9802      	ldr	r0, [sp, #8]
   145fa:	9903      	ldr	r1, [sp, #12]
   145fc:	f001 faaa 	bl	15b54 <__aeabi_dadd>
   14600:	2600      	movs	r6, #0
   14602:	22e0      	movs	r2, #224	; 0xe0
   14604:	4b6b      	ldr	r3, [pc, #428]	; (147b4 <__ieee754_pow+0x5f0>)
   14606:	0612      	lsls	r2, r2, #24
   14608:	0030      	movs	r0, r6
   1460a:	000f      	movs	r7, r1
   1460c:	f002 f9e6 	bl	169dc <__aeabi_dmul>
   14610:	9a02      	ldr	r2, [sp, #8]
   14612:	9b03      	ldr	r3, [sp, #12]
   14614:	9004      	str	r0, [sp, #16]
   14616:	9105      	str	r1, [sp, #20]
   14618:	0030      	movs	r0, r6
   1461a:	0039      	movs	r1, r7
   1461c:	f002 fc5e 	bl	16edc <__aeabi_dsub>
   14620:	0002      	movs	r2, r0
   14622:	000b      	movs	r3, r1
   14624:	0020      	movs	r0, r4
   14626:	0029      	movs	r1, r5
   14628:	f002 fc58 	bl	16edc <__aeabi_dsub>
   1462c:	4a62      	ldr	r2, [pc, #392]	; (147b8 <__ieee754_pow+0x5f4>)
   1462e:	4b61      	ldr	r3, [pc, #388]	; (147b4 <__ieee754_pow+0x5f0>)
   14630:	f002 f9d4 	bl	169dc <__aeabi_dmul>
   14634:	4a61      	ldr	r2, [pc, #388]	; (147bc <__ieee754_pow+0x5f8>)
   14636:	0004      	movs	r4, r0
   14638:	000d      	movs	r5, r1
   1463a:	4b61      	ldr	r3, [pc, #388]	; (147c0 <__ieee754_pow+0x5fc>)
   1463c:	0030      	movs	r0, r6
   1463e:	0039      	movs	r1, r7
   14640:	f002 f9cc 	bl	169dc <__aeabi_dmul>
   14644:	0002      	movs	r2, r0
   14646:	000b      	movs	r3, r1
   14648:	0020      	movs	r0, r4
   1464a:	0029      	movs	r1, r5
   1464c:	f001 fa82 	bl	15b54 <__aeabi_dadd>
   14650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14654:	f001 fa7e 	bl	15b54 <__aeabi_dadd>
   14658:	0006      	movs	r6, r0
   1465a:	4648      	mov	r0, r9
   1465c:	000f      	movs	r7, r1
   1465e:	f002 ffa7 	bl	175b0 <__aeabi_i2d>
   14662:	0004      	movs	r4, r0
   14664:	000d      	movs	r5, r1
   14666:	9804      	ldr	r0, [sp, #16]
   14668:	9905      	ldr	r1, [sp, #20]
   1466a:	0032      	movs	r2, r6
   1466c:	003b      	movs	r3, r7
   1466e:	f001 fa71 	bl	15b54 <__aeabi_dadd>
   14672:	9a08      	ldr	r2, [sp, #32]
   14674:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14676:	f001 fa6d 	bl	15b54 <__aeabi_dadd>
   1467a:	0022      	movs	r2, r4
   1467c:	002b      	movs	r3, r5
   1467e:	f001 fa69 	bl	15b54 <__aeabi_dadd>
   14682:	2000      	movs	r0, #0
   14684:	0022      	movs	r2, r4
   14686:	002b      	movs	r3, r5
   14688:	9002      	str	r0, [sp, #8]
   1468a:	9103      	str	r1, [sp, #12]
   1468c:	f002 fc26 	bl	16edc <__aeabi_dsub>
   14690:	9a08      	ldr	r2, [sp, #32]
   14692:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14694:	f002 fc22 	bl	16edc <__aeabi_dsub>
   14698:	9a04      	ldr	r2, [sp, #16]
   1469a:	9b05      	ldr	r3, [sp, #20]
   1469c:	f002 fc1e 	bl	16edc <__aeabi_dsub>
   146a0:	0002      	movs	r2, r0
   146a2:	000b      	movs	r3, r1
   146a4:	0030      	movs	r0, r6
   146a6:	0039      	movs	r1, r7
   146a8:	f002 fc18 	bl	16edc <__aeabi_dsub>
   146ac:	9004      	str	r0, [sp, #16]
   146ae:	9105      	str	r1, [sp, #20]
   146b0:	465b      	mov	r3, fp
   146b2:	4642      	mov	r2, r8
   146b4:	3b01      	subs	r3, #1
   146b6:	4313      	orrs	r3, r2
   146b8:	d100      	bne.n	146bc <__ieee754_pow+0x4f8>
   146ba:	e1ab      	b.n	14a14 <__ieee754_pow+0x850>
   146bc:	2300      	movs	r3, #0
   146be:	4c2c      	ldr	r4, [pc, #176]	; (14770 <__ieee754_pow+0x5ac>)
   146c0:	9306      	str	r3, [sp, #24]
   146c2:	9407      	str	r4, [sp, #28]
   146c4:	9800      	ldr	r0, [sp, #0]
   146c6:	9901      	ldr	r1, [sp, #4]
   146c8:	2600      	movs	r6, #0
   146ca:	000b      	movs	r3, r1
   146cc:	0032      	movs	r2, r6
   146ce:	000f      	movs	r7, r1
   146d0:	f002 fc04 	bl	16edc <__aeabi_dsub>
   146d4:	9a02      	ldr	r2, [sp, #8]
   146d6:	9b03      	ldr	r3, [sp, #12]
   146d8:	f002 f980 	bl	169dc <__aeabi_dmul>
   146dc:	9a00      	ldr	r2, [sp, #0]
   146de:	9b01      	ldr	r3, [sp, #4]
   146e0:	0004      	movs	r4, r0
   146e2:	000d      	movs	r5, r1
   146e4:	9804      	ldr	r0, [sp, #16]
   146e6:	9905      	ldr	r1, [sp, #20]
   146e8:	f002 f978 	bl	169dc <__aeabi_dmul>
   146ec:	0002      	movs	r2, r0
   146ee:	000b      	movs	r3, r1
   146f0:	0020      	movs	r0, r4
   146f2:	0029      	movs	r1, r5
   146f4:	f001 fa2e 	bl	15b54 <__aeabi_dadd>
   146f8:	0004      	movs	r4, r0
   146fa:	000d      	movs	r5, r1
   146fc:	9802      	ldr	r0, [sp, #8]
   146fe:	9903      	ldr	r1, [sp, #12]
   14700:	0032      	movs	r2, r6
   14702:	003b      	movs	r3, r7
   14704:	9400      	str	r4, [sp, #0]
   14706:	9501      	str	r5, [sp, #4]
   14708:	f002 f968 	bl	169dc <__aeabi_dmul>
   1470c:	0002      	movs	r2, r0
   1470e:	000b      	movs	r3, r1
   14710:	0006      	movs	r6, r0
   14712:	000f      	movs	r7, r1
   14714:	0020      	movs	r0, r4
   14716:	0029      	movs	r1, r5
   14718:	f001 fa1c 	bl	15b54 <__aeabi_dadd>
   1471c:	4b29      	ldr	r3, [pc, #164]	; (147c4 <__ieee754_pow+0x600>)
   1471e:	0004      	movs	r4, r0
   14720:	000d      	movs	r5, r1
   14722:	0002      	movs	r2, r0
   14724:	468b      	mov	fp, r1
   14726:	4299      	cmp	r1, r3
   14728:	dc00      	bgt.n	1472c <__ieee754_pow+0x568>
   1472a:	e14f      	b.n	149cc <__ieee754_pow+0x808>
   1472c:	4b26      	ldr	r3, [pc, #152]	; (147c8 <__ieee754_pow+0x604>)
   1472e:	18cb      	adds	r3, r1, r3
   14730:	4303      	orrs	r3, r0
   14732:	d000      	beq.n	14736 <__ieee754_pow+0x572>
   14734:	e1e2      	b.n	14afc <__ieee754_pow+0x938>
   14736:	9800      	ldr	r0, [sp, #0]
   14738:	9901      	ldr	r1, [sp, #4]
   1473a:	4a24      	ldr	r2, [pc, #144]	; (147cc <__ieee754_pow+0x608>)
   1473c:	4b24      	ldr	r3, [pc, #144]	; (147d0 <__ieee754_pow+0x60c>)
   1473e:	f001 fa09 	bl	15b54 <__aeabi_dadd>
   14742:	0032      	movs	r2, r6
   14744:	9002      	str	r0, [sp, #8]
   14746:	9103      	str	r1, [sp, #12]
   14748:	003b      	movs	r3, r7
   1474a:	0020      	movs	r0, r4
   1474c:	0029      	movs	r1, r5
   1474e:	f002 fbc5 	bl	16edc <__aeabi_dsub>
   14752:	0002      	movs	r2, r0
   14754:	000b      	movs	r3, r1
   14756:	9802      	ldr	r0, [sp, #8]
   14758:	9903      	ldr	r1, [sp, #12]
   1475a:	f000 fe11 	bl	15380 <__aeabi_dcmpgt>
   1475e:	46aa      	mov	sl, r5
   14760:	e038      	b.n	147d4 <__ieee754_pow+0x610>
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	000fffff 	.word	0x000fffff
   14768:	43400000 	.word	0x43400000
   1476c:	fffffc01 	.word	0xfffffc01
   14770:	3ff00000 	.word	0x3ff00000
   14774:	0003988e 	.word	0x0003988e
   14778:	000bb679 	.word	0x000bb679
   1477c:	fff00000 	.word	0xfff00000
   14780:	4a454eef 	.word	0x4a454eef
   14784:	3fca7e28 	.word	0x3fca7e28
   14788:	93c9db65 	.word	0x93c9db65
   1478c:	3fcd864a 	.word	0x3fcd864a
   14790:	a91d4101 	.word	0xa91d4101
   14794:	3fd17460 	.word	0x3fd17460
   14798:	518f264d 	.word	0x518f264d
   1479c:	3fd55555 	.word	0x3fd55555
   147a0:	db6fabff 	.word	0xdb6fabff
   147a4:	3fdb6db6 	.word	0x3fdb6db6
   147a8:	33333303 	.word	0x33333303
   147ac:	3fe33333 	.word	0x3fe33333
   147b0:	40080000 	.word	0x40080000
   147b4:	3feec709 	.word	0x3feec709
   147b8:	dc3a03fd 	.word	0xdc3a03fd
   147bc:	145b01f5 	.word	0x145b01f5
   147c0:	be3e2fe0 	.word	0xbe3e2fe0
   147c4:	408fffff 	.word	0x408fffff
   147c8:	bf700000 	.word	0xbf700000
   147cc:	652b82fe 	.word	0x652b82fe
   147d0:	3c971547 	.word	0x3c971547
   147d4:	2800      	cmp	r0, #0
   147d6:	d000      	beq.n	147da <__ieee754_pow+0x616>
   147d8:	e190      	b.n	14afc <__ieee754_pow+0x938>
   147da:	4aec      	ldr	r2, [pc, #944]	; (14b8c <__ieee754_pow+0x9c8>)
   147dc:	4653      	mov	r3, sl
   147de:	4694      	mov	ip, r2
   147e0:	2280      	movs	r2, #128	; 0x80
   147e2:	0352      	lsls	r2, r2, #13
   147e4:	0011      	movs	r1, r2
   147e6:	151b      	asrs	r3, r3, #20
   147e8:	4463      	add	r3, ip
   147ea:	4119      	asrs	r1, r3
   147ec:	000b      	movs	r3, r1
   147ee:	4690      	mov	r8, r2
   147f0:	4ae7      	ldr	r2, [pc, #924]	; (14b90 <__ieee754_pow+0x9cc>)
   147f2:	445b      	add	r3, fp
   147f4:	4694      	mov	ip, r2
   147f6:	005c      	lsls	r4, r3, #1
   147f8:	0d64      	lsrs	r4, r4, #21
   147fa:	4de6      	ldr	r5, [pc, #920]	; (14b94 <__ieee754_pow+0x9d0>)
   147fc:	4464      	add	r4, ip
   147fe:	4125      	asrs	r5, r4
   14800:	001a      	movs	r2, r3
   14802:	43aa      	bics	r2, r5
   14804:	0011      	movs	r1, r2
   14806:	4642      	mov	r2, r8
   14808:	031b      	lsls	r3, r3, #12
   1480a:	0b1b      	lsrs	r3, r3, #12
   1480c:	4313      	orrs	r3, r2
   1480e:	2214      	movs	r2, #20
   14810:	1b14      	subs	r4, r2, r4
   14812:	4123      	asrs	r3, r4
   14814:	4699      	mov	r9, r3
   14816:	465b      	mov	r3, fp
   14818:	2000      	movs	r0, #0
   1481a:	2b00      	cmp	r3, #0
   1481c:	da00      	bge.n	14820 <__ieee754_pow+0x65c>
   1481e:	e1b0      	b.n	14b82 <__ieee754_pow+0x9be>
   14820:	0002      	movs	r2, r0
   14822:	000b      	movs	r3, r1
   14824:	0030      	movs	r0, r6
   14826:	0039      	movs	r1, r7
   14828:	f002 fb58 	bl	16edc <__aeabi_dsub>
   1482c:	000b      	movs	r3, r1
   1482e:	0002      	movs	r2, r0
   14830:	0006      	movs	r6, r0
   14832:	000f      	movs	r7, r1
   14834:	9800      	ldr	r0, [sp, #0]
   14836:	9901      	ldr	r1, [sp, #4]
   14838:	f001 f98c 	bl	15b54 <__aeabi_dadd>
   1483c:	464b      	mov	r3, r9
   1483e:	051b      	lsls	r3, r3, #20
   14840:	000d      	movs	r5, r1
   14842:	4698      	mov	r8, r3
   14844:	2400      	movs	r4, #0
   14846:	2200      	movs	r2, #0
   14848:	4bd3      	ldr	r3, [pc, #844]	; (14b98 <__ieee754_pow+0x9d4>)
   1484a:	0020      	movs	r0, r4
   1484c:	0029      	movs	r1, r5
   1484e:	f002 f8c5 	bl	169dc <__aeabi_dmul>
   14852:	0032      	movs	r2, r6
   14854:	9002      	str	r0, [sp, #8]
   14856:	9103      	str	r1, [sp, #12]
   14858:	003b      	movs	r3, r7
   1485a:	0020      	movs	r0, r4
   1485c:	0029      	movs	r1, r5
   1485e:	f002 fb3d 	bl	16edc <__aeabi_dsub>
   14862:	0002      	movs	r2, r0
   14864:	000b      	movs	r3, r1
   14866:	9800      	ldr	r0, [sp, #0]
   14868:	9901      	ldr	r1, [sp, #4]
   1486a:	f002 fb37 	bl	16edc <__aeabi_dsub>
   1486e:	4acb      	ldr	r2, [pc, #812]	; (14b9c <__ieee754_pow+0x9d8>)
   14870:	4bcb      	ldr	r3, [pc, #812]	; (14ba0 <__ieee754_pow+0x9dc>)
   14872:	f002 f8b3 	bl	169dc <__aeabi_dmul>
   14876:	4acb      	ldr	r2, [pc, #812]	; (14ba4 <__ieee754_pow+0x9e0>)
   14878:	0006      	movs	r6, r0
   1487a:	000f      	movs	r7, r1
   1487c:	4bca      	ldr	r3, [pc, #808]	; (14ba8 <__ieee754_pow+0x9e4>)
   1487e:	0020      	movs	r0, r4
   14880:	0029      	movs	r1, r5
   14882:	f002 f8ab 	bl	169dc <__aeabi_dmul>
   14886:	0002      	movs	r2, r0
   14888:	000b      	movs	r3, r1
   1488a:	0030      	movs	r0, r6
   1488c:	0039      	movs	r1, r7
   1488e:	f001 f961 	bl	15b54 <__aeabi_dadd>
   14892:	0004      	movs	r4, r0
   14894:	000d      	movs	r5, r1
   14896:	0002      	movs	r2, r0
   14898:	000b      	movs	r3, r1
   1489a:	9802      	ldr	r0, [sp, #8]
   1489c:	9903      	ldr	r1, [sp, #12]
   1489e:	f001 f959 	bl	15b54 <__aeabi_dadd>
   148a2:	9a02      	ldr	r2, [sp, #8]
   148a4:	9b03      	ldr	r3, [sp, #12]
   148a6:	0006      	movs	r6, r0
   148a8:	000f      	movs	r7, r1
   148aa:	f002 fb17 	bl	16edc <__aeabi_dsub>
   148ae:	0002      	movs	r2, r0
   148b0:	000b      	movs	r3, r1
   148b2:	0020      	movs	r0, r4
   148b4:	0029      	movs	r1, r5
   148b6:	f002 fb11 	bl	16edc <__aeabi_dsub>
   148ba:	0032      	movs	r2, r6
   148bc:	9000      	str	r0, [sp, #0]
   148be:	9101      	str	r1, [sp, #4]
   148c0:	003b      	movs	r3, r7
   148c2:	0030      	movs	r0, r6
   148c4:	0039      	movs	r1, r7
   148c6:	f002 f889 	bl	169dc <__aeabi_dmul>
   148ca:	0004      	movs	r4, r0
   148cc:	000d      	movs	r5, r1
   148ce:	4ab7      	ldr	r2, [pc, #732]	; (14bac <__ieee754_pow+0x9e8>)
   148d0:	4bb7      	ldr	r3, [pc, #732]	; (14bb0 <__ieee754_pow+0x9ec>)
   148d2:	f002 f883 	bl	169dc <__aeabi_dmul>
   148d6:	4ab7      	ldr	r2, [pc, #732]	; (14bb4 <__ieee754_pow+0x9f0>)
   148d8:	4bb7      	ldr	r3, [pc, #732]	; (14bb8 <__ieee754_pow+0x9f4>)
   148da:	f002 faff 	bl	16edc <__aeabi_dsub>
   148de:	0022      	movs	r2, r4
   148e0:	002b      	movs	r3, r5
   148e2:	f002 f87b 	bl	169dc <__aeabi_dmul>
   148e6:	4ab5      	ldr	r2, [pc, #724]	; (14bbc <__ieee754_pow+0x9f8>)
   148e8:	4bb5      	ldr	r3, [pc, #724]	; (14bc0 <__ieee754_pow+0x9fc>)
   148ea:	f001 f933 	bl	15b54 <__aeabi_dadd>
   148ee:	0022      	movs	r2, r4
   148f0:	002b      	movs	r3, r5
   148f2:	f002 f873 	bl	169dc <__aeabi_dmul>
   148f6:	4ab3      	ldr	r2, [pc, #716]	; (14bc4 <__ieee754_pow+0xa00>)
   148f8:	4bb3      	ldr	r3, [pc, #716]	; (14bc8 <__ieee754_pow+0xa04>)
   148fa:	f002 faef 	bl	16edc <__aeabi_dsub>
   148fe:	0022      	movs	r2, r4
   14900:	002b      	movs	r3, r5
   14902:	f002 f86b 	bl	169dc <__aeabi_dmul>
   14906:	4ab1      	ldr	r2, [pc, #708]	; (14bcc <__ieee754_pow+0xa08>)
   14908:	4bb1      	ldr	r3, [pc, #708]	; (14bd0 <__ieee754_pow+0xa0c>)
   1490a:	f001 f923 	bl	15b54 <__aeabi_dadd>
   1490e:	0022      	movs	r2, r4
   14910:	002b      	movs	r3, r5
   14912:	f002 f863 	bl	169dc <__aeabi_dmul>
   14916:	0002      	movs	r2, r0
   14918:	000b      	movs	r3, r1
   1491a:	0030      	movs	r0, r6
   1491c:	0039      	movs	r1, r7
   1491e:	f002 fadd 	bl	16edc <__aeabi_dsub>
   14922:	0004      	movs	r4, r0
   14924:	000d      	movs	r5, r1
   14926:	0002      	movs	r2, r0
   14928:	000b      	movs	r3, r1
   1492a:	0030      	movs	r0, r6
   1492c:	0039      	movs	r1, r7
   1492e:	f002 f855 	bl	169dc <__aeabi_dmul>
   14932:	2380      	movs	r3, #128	; 0x80
   14934:	9002      	str	r0, [sp, #8]
   14936:	9103      	str	r1, [sp, #12]
   14938:	2200      	movs	r2, #0
   1493a:	05db      	lsls	r3, r3, #23
   1493c:	0020      	movs	r0, r4
   1493e:	0029      	movs	r1, r5
   14940:	f002 facc 	bl	16edc <__aeabi_dsub>
   14944:	0002      	movs	r2, r0
   14946:	000b      	movs	r3, r1
   14948:	9802      	ldr	r0, [sp, #8]
   1494a:	9903      	ldr	r1, [sp, #12]
   1494c:	f001 fc12 	bl	16174 <__aeabi_ddiv>
   14950:	9a00      	ldr	r2, [sp, #0]
   14952:	9b01      	ldr	r3, [sp, #4]
   14954:	0004      	movs	r4, r0
   14956:	000d      	movs	r5, r1
   14958:	0030      	movs	r0, r6
   1495a:	0039      	movs	r1, r7
   1495c:	f002 f83e 	bl	169dc <__aeabi_dmul>
   14960:	9a00      	ldr	r2, [sp, #0]
   14962:	9b01      	ldr	r3, [sp, #4]
   14964:	f001 f8f6 	bl	15b54 <__aeabi_dadd>
   14968:	0002      	movs	r2, r0
   1496a:	000b      	movs	r3, r1
   1496c:	0020      	movs	r0, r4
   1496e:	0029      	movs	r1, r5
   14970:	f002 fab4 	bl	16edc <__aeabi_dsub>
   14974:	0032      	movs	r2, r6
   14976:	003b      	movs	r3, r7
   14978:	f002 fab0 	bl	16edc <__aeabi_dsub>
   1497c:	0002      	movs	r2, r0
   1497e:	000b      	movs	r3, r1
   14980:	2000      	movs	r0, #0
   14982:	4994      	ldr	r1, [pc, #592]	; (14bd4 <__ieee754_pow+0xa10>)
   14984:	f002 faaa 	bl	16edc <__aeabi_dsub>
   14988:	4643      	mov	r3, r8
   1498a:	185b      	adds	r3, r3, r1
   1498c:	151a      	asrs	r2, r3, #20
   1498e:	2a00      	cmp	r2, #0
   14990:	dc00      	bgt.n	14994 <__ieee754_pow+0x7d0>
   14992:	e149      	b.n	14c28 <__ieee754_pow+0xa64>
   14994:	0019      	movs	r1, r3
   14996:	9a06      	ldr	r2, [sp, #24]
   14998:	9b07      	ldr	r3, [sp, #28]
   1499a:	f002 f81f 	bl	169dc <__aeabi_dmul>
   1499e:	e459      	b.n	14254 <__ieee754_pow+0x90>
   149a0:	003a      	movs	r2, r7
   149a2:	0033      	movs	r3, r6
   149a4:	0038      	movs	r0, r7
   149a6:	0031      	movs	r1, r6
   149a8:	f002 f818 	bl	169dc <__aeabi_dmul>
   149ac:	e452      	b.n	14254 <__ieee754_pow+0x90>
   149ae:	4653      	mov	r3, sl
   149b0:	2b00      	cmp	r3, #0
   149b2:	db00      	blt.n	149b6 <__ieee754_pow+0x7f2>
   149b4:	e4d9      	b.n	1436a <__ieee754_pow+0x1a6>
   149b6:	9c00      	ldr	r4, [sp, #0]
   149b8:	9d01      	ldr	r5, [sp, #4]
   149ba:	2280      	movs	r2, #128	; 0x80
   149bc:	0612      	lsls	r2, r2, #24
   149be:	002b      	movs	r3, r5
   149c0:	4694      	mov	ip, r2
   149c2:	4463      	add	r3, ip
   149c4:	0020      	movs	r0, r4
   149c6:	0019      	movs	r1, r3
   149c8:	f7ff fc44 	bl	14254 <__ieee754_pow+0x90>
   149cc:	004b      	lsls	r3, r1, #1
   149ce:	085b      	lsrs	r3, r3, #1
   149d0:	469a      	mov	sl, r3
   149d2:	4b81      	ldr	r3, [pc, #516]	; (14bd8 <__ieee754_pow+0xa14>)
   149d4:	459a      	cmp	sl, r3
   149d6:	dc00      	bgt.n	149da <__ieee754_pow+0x816>
   149d8:	e0b1      	b.n	14b3e <__ieee754_pow+0x97a>
   149da:	4b80      	ldr	r3, [pc, #512]	; (14bdc <__ieee754_pow+0xa18>)
   149dc:	445b      	add	r3, fp
   149de:	431a      	orrs	r2, r3
   149e0:	d10c      	bne.n	149fc <__ieee754_pow+0x838>
   149e2:	0032      	movs	r2, r6
   149e4:	003b      	movs	r3, r7
   149e6:	f002 fa79 	bl	16edc <__aeabi_dsub>
   149ea:	0002      	movs	r2, r0
   149ec:	000b      	movs	r3, r1
   149ee:	9800      	ldr	r0, [sp, #0]
   149f0:	9901      	ldr	r1, [sp, #4]
   149f2:	f000 fcbb 	bl	1536c <__aeabi_dcmple>
   149f6:	2800      	cmp	r0, #0
   149f8:	d100      	bne.n	149fc <__ieee754_pow+0x838>
   149fa:	e6ee      	b.n	147da <__ieee754_pow+0x616>
   149fc:	9806      	ldr	r0, [sp, #24]
   149fe:	9907      	ldr	r1, [sp, #28]
   14a00:	4a77      	ldr	r2, [pc, #476]	; (14be0 <__ieee754_pow+0xa1c>)
   14a02:	4b78      	ldr	r3, [pc, #480]	; (14be4 <__ieee754_pow+0xa20>)
   14a04:	f001 ffea 	bl	169dc <__aeabi_dmul>
   14a08:	4a75      	ldr	r2, [pc, #468]	; (14be0 <__ieee754_pow+0xa1c>)
   14a0a:	4b76      	ldr	r3, [pc, #472]	; (14be4 <__ieee754_pow+0xa20>)
   14a0c:	f001 ffe6 	bl	169dc <__aeabi_dmul>
   14a10:	f7ff fc20 	bl	14254 <__ieee754_pow+0x90>
   14a14:	2300      	movs	r3, #0
   14a16:	4c74      	ldr	r4, [pc, #464]	; (14be8 <__ieee754_pow+0xa24>)
   14a18:	9306      	str	r3, [sp, #24]
   14a1a:	9407      	str	r4, [sp, #28]
   14a1c:	e652      	b.n	146c4 <__ieee754_pow+0x500>
   14a1e:	0002      	movs	r2, r0
   14a20:	000b      	movs	r3, r1
   14a22:	2000      	movs	r0, #0
   14a24:	496b      	ldr	r1, [pc, #428]	; (14bd4 <__ieee754_pow+0xa10>)
   14a26:	f001 fba5 	bl	16174 <__aeabi_ddiv>
   14a2a:	f7ff fc32 	bl	14292 <__ieee754_pow+0xce>
   14a2e:	4653      	mov	r3, sl
   14a30:	2b00      	cmp	r3, #0
   14a32:	db00      	blt.n	14a36 <__ieee754_pow+0x872>
   14a34:	e499      	b.n	1436a <__ieee754_pow+0x1a6>
   14a36:	e454      	b.n	142e2 <__ieee754_pow+0x11e>
   14a38:	4b6c      	ldr	r3, [pc, #432]	; (14bec <__ieee754_pow+0xa28>)
   14a3a:	429c      	cmp	r4, r3
   14a3c:	ddf7      	ble.n	14a2e <__ieee754_pow+0x86a>
   14a3e:	4b65      	ldr	r3, [pc, #404]	; (14bd4 <__ieee754_pow+0xa10>)
   14a40:	429c      	cmp	r4, r3
   14a42:	dd00      	ble.n	14a46 <__ieee754_pow+0x882>
   14a44:	e44a      	b.n	142dc <__ieee754_pow+0x118>
   14a46:	2200      	movs	r2, #0
   14a48:	4b62      	ldr	r3, [pc, #392]	; (14bd4 <__ieee754_pow+0xa10>)
   14a4a:	f002 fa47 	bl	16edc <__aeabi_dsub>
   14a4e:	22c0      	movs	r2, #192	; 0xc0
   14a50:	4b67      	ldr	r3, [pc, #412]	; (14bf0 <__ieee754_pow+0xa2c>)
   14a52:	05d2      	lsls	r2, r2, #23
   14a54:	0004      	movs	r4, r0
   14a56:	000d      	movs	r5, r1
   14a58:	f001 ffc0 	bl	169dc <__aeabi_dmul>
   14a5c:	4a65      	ldr	r2, [pc, #404]	; (14bf4 <__ieee754_pow+0xa30>)
   14a5e:	0006      	movs	r6, r0
   14a60:	000f      	movs	r7, r1
   14a62:	4b65      	ldr	r3, [pc, #404]	; (14bf8 <__ieee754_pow+0xa34>)
   14a64:	0020      	movs	r0, r4
   14a66:	0029      	movs	r1, r5
   14a68:	f001 ffb8 	bl	169dc <__aeabi_dmul>
   14a6c:	2200      	movs	r2, #0
   14a6e:	9002      	str	r0, [sp, #8]
   14a70:	9103      	str	r1, [sp, #12]
   14a72:	4b62      	ldr	r3, [pc, #392]	; (14bfc <__ieee754_pow+0xa38>)
   14a74:	0020      	movs	r0, r4
   14a76:	0029      	movs	r1, r5
   14a78:	f001 ffb0 	bl	169dc <__aeabi_dmul>
   14a7c:	0002      	movs	r2, r0
   14a7e:	000b      	movs	r3, r1
   14a80:	485f      	ldr	r0, [pc, #380]	; (14c00 <__ieee754_pow+0xa3c>)
   14a82:	4960      	ldr	r1, [pc, #384]	; (14c04 <__ieee754_pow+0xa40>)
   14a84:	f002 fa2a 	bl	16edc <__aeabi_dsub>
   14a88:	0022      	movs	r2, r4
   14a8a:	002b      	movs	r3, r5
   14a8c:	f001 ffa6 	bl	169dc <__aeabi_dmul>
   14a90:	0002      	movs	r2, r0
   14a92:	000b      	movs	r3, r1
   14a94:	2000      	movs	r0, #0
   14a96:	495c      	ldr	r1, [pc, #368]	; (14c08 <__ieee754_pow+0xa44>)
   14a98:	f002 fa20 	bl	16edc <__aeabi_dsub>
   14a9c:	0022      	movs	r2, r4
   14a9e:	9004      	str	r0, [sp, #16]
   14aa0:	9105      	str	r1, [sp, #20]
   14aa2:	002b      	movs	r3, r5
   14aa4:	0020      	movs	r0, r4
   14aa6:	0029      	movs	r1, r5
   14aa8:	f001 ff98 	bl	169dc <__aeabi_dmul>
   14aac:	0002      	movs	r2, r0
   14aae:	000b      	movs	r3, r1
   14ab0:	9804      	ldr	r0, [sp, #16]
   14ab2:	9905      	ldr	r1, [sp, #20]
   14ab4:	f001 ff92 	bl	169dc <__aeabi_dmul>
   14ab8:	4a54      	ldr	r2, [pc, #336]	; (14c0c <__ieee754_pow+0xa48>)
   14aba:	4b4d      	ldr	r3, [pc, #308]	; (14bf0 <__ieee754_pow+0xa2c>)
   14abc:	f001 ff8e 	bl	169dc <__aeabi_dmul>
   14ac0:	0002      	movs	r2, r0
   14ac2:	000b      	movs	r3, r1
   14ac4:	9802      	ldr	r0, [sp, #8]
   14ac6:	9903      	ldr	r1, [sp, #12]
   14ac8:	f002 fa08 	bl	16edc <__aeabi_dsub>
   14acc:	0002      	movs	r2, r0
   14ace:	000b      	movs	r3, r1
   14ad0:	0004      	movs	r4, r0
   14ad2:	000d      	movs	r5, r1
   14ad4:	0030      	movs	r0, r6
   14ad6:	0039      	movs	r1, r7
   14ad8:	f001 f83c 	bl	15b54 <__aeabi_dadd>
   14adc:	2000      	movs	r0, #0
   14ade:	0032      	movs	r2, r6
   14ae0:	003b      	movs	r3, r7
   14ae2:	9002      	str	r0, [sp, #8]
   14ae4:	9103      	str	r1, [sp, #12]
   14ae6:	f002 f9f9 	bl	16edc <__aeabi_dsub>
   14aea:	0002      	movs	r2, r0
   14aec:	000b      	movs	r3, r1
   14aee:	0020      	movs	r0, r4
   14af0:	0029      	movs	r1, r5
   14af2:	f002 f9f3 	bl	16edc <__aeabi_dsub>
   14af6:	9004      	str	r0, [sp, #16]
   14af8:	9105      	str	r1, [sp, #20]
   14afa:	e5d9      	b.n	146b0 <__ieee754_pow+0x4ec>
   14afc:	4a44      	ldr	r2, [pc, #272]	; (14c10 <__ieee754_pow+0xa4c>)
   14afe:	4b45      	ldr	r3, [pc, #276]	; (14c14 <__ieee754_pow+0xa50>)
   14b00:	9806      	ldr	r0, [sp, #24]
   14b02:	9907      	ldr	r1, [sp, #28]
   14b04:	f001 ff6a 	bl	169dc <__aeabi_dmul>
   14b08:	4a41      	ldr	r2, [pc, #260]	; (14c10 <__ieee754_pow+0xa4c>)
   14b0a:	4b42      	ldr	r3, [pc, #264]	; (14c14 <__ieee754_pow+0xa50>)
   14b0c:	f001 ff66 	bl	169dc <__aeabi_dmul>
   14b10:	f7ff fba0 	bl	14254 <__ieee754_pow+0x90>
   14b14:	2a00      	cmp	r2, #0
   14b16:	d001      	beq.n	14b1c <__ieee754_pow+0x958>
   14b18:	f7ff fba9 	bl	1426e <__ieee754_pow+0xaa>
   14b1c:	3214      	adds	r2, #20
   14b1e:	1ad3      	subs	r3, r2, r3
   14b20:	002a      	movs	r2, r5
   14b22:	411a      	asrs	r2, r3
   14b24:	0011      	movs	r1, r2
   14b26:	4099      	lsls	r1, r3
   14b28:	428d      	cmp	r5, r1
   14b2a:	d001      	beq.n	14b30 <__ieee754_pow+0x96c>
   14b2c:	f7ff fb76 	bl	1421c <__ieee754_pow+0x58>
   14b30:	2301      	movs	r3, #1
   14b32:	401a      	ands	r2, r3
   14b34:	18db      	adds	r3, r3, r3
   14b36:	1a9b      	subs	r3, r3, r2
   14b38:	469b      	mov	fp, r3
   14b3a:	f7ff fb6f 	bl	1421c <__ieee754_pow+0x58>
   14b3e:	2200      	movs	r2, #0
   14b40:	4b31      	ldr	r3, [pc, #196]	; (14c08 <__ieee754_pow+0xa44>)
   14b42:	4690      	mov	r8, r2
   14b44:	4691      	mov	r9, r2
   14b46:	459a      	cmp	sl, r3
   14b48:	dc00      	bgt.n	14b4c <__ieee754_pow+0x988>
   14b4a:	e67b      	b.n	14844 <__ieee754_pow+0x680>
   14b4c:	e645      	b.n	147da <__ieee754_pow+0x616>
   14b4e:	0002      	movs	r2, r0
   14b50:	000b      	movs	r3, r1
   14b52:	f002 f9c3 	bl	16edc <__aeabi_dsub>
   14b56:	0002      	movs	r2, r0
   14b58:	000b      	movs	r3, r1
   14b5a:	f001 fb0b 	bl	16174 <__aeabi_ddiv>
   14b5e:	f7ff fb79 	bl	14254 <__ieee754_pow+0x90>
   14b62:	2380      	movs	r3, #128	; 0x80
   14b64:	4c2c      	ldr	r4, [pc, #176]	; (14c18 <__ieee754_pow+0xa54>)
   14b66:	05db      	lsls	r3, r3, #23
   14b68:	9308      	str	r3, [sp, #32]
   14b6a:	9409      	str	r4, [sp, #36]	; 0x24
   14b6c:	4b2b      	ldr	r3, [pc, #172]	; (14c1c <__ieee754_pow+0xa58>)
   14b6e:	4c2c      	ldr	r4, [pc, #176]	; (14c20 <__ieee754_pow+0xa5c>)
   14b70:	2200      	movs	r2, #0
   14b72:	930c      	str	r3, [sp, #48]	; 0x30
   14b74:	940d      	str	r4, [sp, #52]	; 0x34
   14b76:	2480      	movs	r4, #128	; 0x80
   14b78:	4b2a      	ldr	r3, [pc, #168]	; (14c24 <__ieee754_pow+0xa60>)
   14b7a:	02e4      	lsls	r4, r4, #11
   14b7c:	9206      	str	r2, [sp, #24]
   14b7e:	9307      	str	r3, [sp, #28]
   14b80:	e449      	b.n	14416 <__ieee754_pow+0x252>
   14b82:	464b      	mov	r3, r9
   14b84:	425b      	negs	r3, r3
   14b86:	4699      	mov	r9, r3
   14b88:	e64a      	b.n	14820 <__ieee754_pow+0x65c>
   14b8a:	46c0      	nop			; (mov r8, r8)
   14b8c:	fffffc02 	.word	0xfffffc02
   14b90:	fffffc01 	.word	0xfffffc01
   14b94:	000fffff 	.word	0x000fffff
   14b98:	3fe62e43 	.word	0x3fe62e43
   14b9c:	fefa39ef 	.word	0xfefa39ef
   14ba0:	3fe62e42 	.word	0x3fe62e42
   14ba4:	0ca86c39 	.word	0x0ca86c39
   14ba8:	be205c61 	.word	0xbe205c61
   14bac:	72bea4d0 	.word	0x72bea4d0
   14bb0:	3e663769 	.word	0x3e663769
   14bb4:	c5d26bf1 	.word	0xc5d26bf1
   14bb8:	3ebbbd41 	.word	0x3ebbbd41
   14bbc:	af25de2c 	.word	0xaf25de2c
   14bc0:	3f11566a 	.word	0x3f11566a
   14bc4:	16bebd93 	.word	0x16bebd93
   14bc8:	3f66c16c 	.word	0x3f66c16c
   14bcc:	5555553e 	.word	0x5555553e
   14bd0:	3fc55555 	.word	0x3fc55555
   14bd4:	3ff00000 	.word	0x3ff00000
   14bd8:	4090cbff 	.word	0x4090cbff
   14bdc:	3f6f3400 	.word	0x3f6f3400
   14be0:	c2f8f359 	.word	0xc2f8f359
   14be4:	01a56e1f 	.word	0x01a56e1f
   14be8:	bff00000 	.word	0xbff00000
   14bec:	3feffffe 	.word	0x3feffffe
   14bf0:	3ff71547 	.word	0x3ff71547
   14bf4:	f85ddf44 	.word	0xf85ddf44
   14bf8:	3e54ae0b 	.word	0x3e54ae0b
   14bfc:	3fd00000 	.word	0x3fd00000
   14c00:	55555555 	.word	0x55555555
   14c04:	3fd55555 	.word	0x3fd55555
   14c08:	3fe00000 	.word	0x3fe00000
   14c0c:	652b82fe 	.word	0x652b82fe
   14c10:	8800759c 	.word	0x8800759c
   14c14:	7e37e43c 	.word	0x7e37e43c
   14c18:	3fe2b803 	.word	0x3fe2b803
   14c1c:	43cfd006 	.word	0x43cfd006
   14c20:	3e4cfdeb 	.word	0x3e4cfdeb
   14c24:	3ff80000 	.word	0x3ff80000
   14c28:	464a      	mov	r2, r9
   14c2a:	f000 f999 	bl	14f60 <scalbn>
   14c2e:	e6b2      	b.n	14996 <__ieee754_pow+0x7d2>

00014c30 <__ieee754_sqrt>:
   14c30:	4b6c      	ldr	r3, [pc, #432]	; (14de4 <__ieee754_sqrt+0x1b4>)
   14c32:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c34:	000a      	movs	r2, r1
   14c36:	4646      	mov	r6, r8
   14c38:	000d      	movs	r5, r1
   14c3a:	46d6      	mov	lr, sl
   14c3c:	464f      	mov	r7, r9
   14c3e:	0019      	movs	r1, r3
   14c40:	b5c0      	push	{r6, r7, lr}
   14c42:	0004      	movs	r4, r0
   14c44:	0006      	movs	r6, r0
   14c46:	4029      	ands	r1, r5
   14c48:	4299      	cmp	r1, r3
   14c4a:	d100      	bne.n	14c4e <__ieee754_sqrt+0x1e>
   14c4c:	e0a7      	b.n	14d9e <__ieee754_sqrt+0x16e>
   14c4e:	2d00      	cmp	r5, #0
   14c50:	dc00      	bgt.n	14c54 <__ieee754_sqrt+0x24>
   14c52:	e081      	b.n	14d58 <__ieee754_sqrt+0x128>
   14c54:	152f      	asrs	r7, r5, #20
   14c56:	d100      	bne.n	14c5a <__ieee754_sqrt+0x2a>
   14c58:	e08e      	b.n	14d78 <__ieee754_sqrt+0x148>
   14c5a:	4b63      	ldr	r3, [pc, #396]	; (14de8 <__ieee754_sqrt+0x1b8>)
   14c5c:	0312      	lsls	r2, r2, #12
   14c5e:	469c      	mov	ip, r3
   14c60:	2380      	movs	r3, #128	; 0x80
   14c62:	0b12      	lsrs	r2, r2, #12
   14c64:	035b      	lsls	r3, r3, #13
   14c66:	4467      	add	r7, ip
   14c68:	431a      	orrs	r2, r3
   14c6a:	07fb      	lsls	r3, r7, #31
   14c6c:	d468      	bmi.n	14d40 <__ieee754_sqrt+0x110>
   14c6e:	107b      	asrs	r3, r7, #1
   14c70:	469c      	mov	ip, r3
   14c72:	0fe3      	lsrs	r3, r4, #31
   14c74:	189b      	adds	r3, r3, r2
   14c76:	189b      	adds	r3, r3, r2
   14c78:	2280      	movs	r2, #128	; 0x80
   14c7a:	2116      	movs	r1, #22
   14c7c:	2600      	movs	r6, #0
   14c7e:	2500      	movs	r5, #0
   14c80:	0064      	lsls	r4, r4, #1
   14c82:	0392      	lsls	r2, r2, #14
   14c84:	18a8      	adds	r0, r5, r2
   14c86:	4298      	cmp	r0, r3
   14c88:	dc02      	bgt.n	14c90 <__ieee754_sqrt+0x60>
   14c8a:	1885      	adds	r5, r0, r2
   14c8c:	1a1b      	subs	r3, r3, r0
   14c8e:	18b6      	adds	r6, r6, r2
   14c90:	0fe0      	lsrs	r0, r4, #31
   14c92:	005b      	lsls	r3, r3, #1
   14c94:	3901      	subs	r1, #1
   14c96:	181b      	adds	r3, r3, r0
   14c98:	0064      	lsls	r4, r4, #1
   14c9a:	0852      	lsrs	r2, r2, #1
   14c9c:	2900      	cmp	r1, #0
   14c9e:	d1f1      	bne.n	14c84 <__ieee754_sqrt+0x54>
   14ca0:	2200      	movs	r2, #0
   14ca2:	4692      	mov	sl, r2
   14ca4:	4690      	mov	r8, r2
   14ca6:	2280      	movs	r2, #128	; 0x80
   14ca8:	2020      	movs	r0, #32
   14caa:	0612      	lsls	r2, r2, #24
   14cac:	e009      	b.n	14cc2 <__ieee754_sqrt+0x92>
   14cae:	42ab      	cmp	r3, r5
   14cb0:	d038      	beq.n	14d24 <__ieee754_sqrt+0xf4>
   14cb2:	0fe1      	lsrs	r1, r4, #31
   14cb4:	18c9      	adds	r1, r1, r3
   14cb6:	3801      	subs	r0, #1
   14cb8:	18cb      	adds	r3, r1, r3
   14cba:	0064      	lsls	r4, r4, #1
   14cbc:	0852      	lsrs	r2, r2, #1
   14cbe:	2800      	cmp	r0, #0
   14cc0:	d018      	beq.n	14cf4 <__ieee754_sqrt+0xc4>
   14cc2:	4641      	mov	r1, r8
   14cc4:	1851      	adds	r1, r2, r1
   14cc6:	42ab      	cmp	r3, r5
   14cc8:	ddf1      	ble.n	14cae <__ieee754_sqrt+0x7e>
   14cca:	188f      	adds	r7, r1, r2
   14ccc:	46b8      	mov	r8, r7
   14cce:	46a9      	mov	r9, r5
   14cd0:	2900      	cmp	r1, #0
   14cd2:	db30      	blt.n	14d36 <__ieee754_sqrt+0x106>
   14cd4:	1b5b      	subs	r3, r3, r5
   14cd6:	428c      	cmp	r4, r1
   14cd8:	41ad      	sbcs	r5, r5
   14cda:	426d      	negs	r5, r5
   14cdc:	1b5b      	subs	r3, r3, r5
   14cde:	1a64      	subs	r4, r4, r1
   14ce0:	0fe1      	lsrs	r1, r4, #31
   14ce2:	18c9      	adds	r1, r1, r3
   14ce4:	3801      	subs	r0, #1
   14ce6:	4492      	add	sl, r2
   14ce8:	464d      	mov	r5, r9
   14cea:	18cb      	adds	r3, r1, r3
   14cec:	0064      	lsls	r4, r4, #1
   14cee:	0852      	lsrs	r2, r2, #1
   14cf0:	2800      	cmp	r0, #0
   14cf2:	d1e6      	bne.n	14cc2 <__ieee754_sqrt+0x92>
   14cf4:	4323      	orrs	r3, r4
   14cf6:	d128      	bne.n	14d4a <__ieee754_sqrt+0x11a>
   14cf8:	4653      	mov	r3, sl
   14cfa:	085b      	lsrs	r3, r3, #1
   14cfc:	493b      	ldr	r1, [pc, #236]	; (14dec <__ieee754_sqrt+0x1bc>)
   14cfe:	1072      	asrs	r2, r6, #1
   14d00:	4688      	mov	r8, r1
   14d02:	4442      	add	r2, r8
   14d04:	07f1      	lsls	r1, r6, #31
   14d06:	d502      	bpl.n	14d0e <__ieee754_sqrt+0xde>
   14d08:	2180      	movs	r1, #128	; 0x80
   14d0a:	0609      	lsls	r1, r1, #24
   14d0c:	430b      	orrs	r3, r1
   14d0e:	4661      	mov	r1, ip
   14d10:	001e      	movs	r6, r3
   14d12:	050f      	lsls	r7, r1, #20
   14d14:	18bd      	adds	r5, r7, r2
   14d16:	0030      	movs	r0, r6
   14d18:	0029      	movs	r1, r5
   14d1a:	bc1c      	pop	{r2, r3, r4}
   14d1c:	4690      	mov	r8, r2
   14d1e:	4699      	mov	r9, r3
   14d20:	46a2      	mov	sl, r4
   14d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d24:	42a1      	cmp	r1, r4
   14d26:	d8c4      	bhi.n	14cb2 <__ieee754_sqrt+0x82>
   14d28:	188f      	adds	r7, r1, r2
   14d2a:	46b8      	mov	r8, r7
   14d2c:	2900      	cmp	r1, #0
   14d2e:	db42      	blt.n	14db6 <__ieee754_sqrt+0x186>
   14d30:	4699      	mov	r9, r3
   14d32:	2300      	movs	r3, #0
   14d34:	e7d3      	b.n	14cde <__ieee754_sqrt+0xae>
   14d36:	2f00      	cmp	r7, #0
   14d38:	db2f      	blt.n	14d9a <__ieee754_sqrt+0x16a>
   14d3a:	1c6f      	adds	r7, r5, #1
   14d3c:	46b9      	mov	r9, r7
   14d3e:	e7c9      	b.n	14cd4 <__ieee754_sqrt+0xa4>
   14d40:	0fe1      	lsrs	r1, r4, #31
   14d42:	0052      	lsls	r2, r2, #1
   14d44:	188a      	adds	r2, r1, r2
   14d46:	0064      	lsls	r4, r4, #1
   14d48:	e791      	b.n	14c6e <__ieee754_sqrt+0x3e>
   14d4a:	4653      	mov	r3, sl
   14d4c:	3301      	adds	r3, #1
   14d4e:	d035      	beq.n	14dbc <__ieee754_sqrt+0x18c>
   14d50:	4653      	mov	r3, sl
   14d52:	3301      	adds	r3, #1
   14d54:	085b      	lsrs	r3, r3, #1
   14d56:	e7d1      	b.n	14cfc <__ieee754_sqrt+0xcc>
   14d58:	006b      	lsls	r3, r5, #1
   14d5a:	085b      	lsrs	r3, r3, #1
   14d5c:	4303      	orrs	r3, r0
   14d5e:	d0da      	beq.n	14d16 <__ieee754_sqrt+0xe6>
   14d60:	2700      	movs	r7, #0
   14d62:	2d00      	cmp	r5, #0
   14d64:	d132      	bne.n	14dcc <__ieee754_sqrt+0x19c>
   14d66:	0ae2      	lsrs	r2, r4, #11
   14d68:	3f15      	subs	r7, #21
   14d6a:	0564      	lsls	r4, r4, #21
   14d6c:	2a00      	cmp	r2, #0
   14d6e:	d0fa      	beq.n	14d66 <__ieee754_sqrt+0x136>
   14d70:	2380      	movs	r3, #128	; 0x80
   14d72:	035b      	lsls	r3, r3, #13
   14d74:	421a      	tst	r2, r3
   14d76:	d124      	bne.n	14dc2 <__ieee754_sqrt+0x192>
   14d78:	2080      	movs	r0, #128	; 0x80
   14d7a:	2300      	movs	r3, #0
   14d7c:	0340      	lsls	r0, r0, #13
   14d7e:	e000      	b.n	14d82 <__ieee754_sqrt+0x152>
   14d80:	000b      	movs	r3, r1
   14d82:	0052      	lsls	r2, r2, #1
   14d84:	1c59      	adds	r1, r3, #1
   14d86:	4202      	tst	r2, r0
   14d88:	d0fa      	beq.n	14d80 <__ieee754_sqrt+0x150>
   14d8a:	2020      	movs	r0, #32
   14d8c:	1a40      	subs	r0, r0, r1
   14d8e:	1aff      	subs	r7, r7, r3
   14d90:	0023      	movs	r3, r4
   14d92:	40c3      	lsrs	r3, r0
   14d94:	408c      	lsls	r4, r1
   14d96:	431a      	orrs	r2, r3
   14d98:	e75f      	b.n	14c5a <__ieee754_sqrt+0x2a>
   14d9a:	46a9      	mov	r9, r5
   14d9c:	e79a      	b.n	14cd4 <__ieee754_sqrt+0xa4>
   14d9e:	002b      	movs	r3, r5
   14da0:	0002      	movs	r2, r0
   14da2:	0029      	movs	r1, r5
   14da4:	f001 fe1a 	bl	169dc <__aeabi_dmul>
   14da8:	0032      	movs	r2, r6
   14daa:	002b      	movs	r3, r5
   14dac:	f000 fed2 	bl	15b54 <__aeabi_dadd>
   14db0:	0006      	movs	r6, r0
   14db2:	000d      	movs	r5, r1
   14db4:	e7af      	b.n	14d16 <__ieee754_sqrt+0xe6>
   14db6:	2f00      	cmp	r7, #0
   14db8:	dabf      	bge.n	14d3a <__ieee754_sqrt+0x10a>
   14dba:	e7b9      	b.n	14d30 <__ieee754_sqrt+0x100>
   14dbc:	3601      	adds	r6, #1
   14dbe:	2300      	movs	r3, #0
   14dc0:	e79c      	b.n	14cfc <__ieee754_sqrt+0xcc>
   14dc2:	2301      	movs	r3, #1
   14dc4:	2100      	movs	r1, #0
   14dc6:	2020      	movs	r0, #32
   14dc8:	425b      	negs	r3, r3
   14dca:	e7e0      	b.n	14d8e <__ieee754_sqrt+0x15e>
   14dcc:	002b      	movs	r3, r5
   14dce:	0002      	movs	r2, r0
   14dd0:	0029      	movs	r1, r5
   14dd2:	f002 f883 	bl	16edc <__aeabi_dsub>
   14dd6:	0002      	movs	r2, r0
   14dd8:	000b      	movs	r3, r1
   14dda:	f001 f9cb 	bl	16174 <__aeabi_ddiv>
   14dde:	0006      	movs	r6, r0
   14de0:	000d      	movs	r5, r1
   14de2:	e798      	b.n	14d16 <__ieee754_sqrt+0xe6>
   14de4:	7ff00000 	.word	0x7ff00000
   14de8:	fffffc01 	.word	0xfffffc01
   14dec:	3fe00000 	.word	0x3fe00000

00014df0 <fabs>:
   14df0:	0049      	lsls	r1, r1, #1
   14df2:	084b      	lsrs	r3, r1, #1
   14df4:	0019      	movs	r1, r3
   14df6:	4770      	bx	lr

00014df8 <finite>:
   14df8:	4b03      	ldr	r3, [pc, #12]	; (14e08 <finite+0x10>)
   14dfa:	0048      	lsls	r0, r1, #1
   14dfc:	469c      	mov	ip, r3
   14dfe:	0840      	lsrs	r0, r0, #1
   14e00:	4460      	add	r0, ip
   14e02:	0fc0      	lsrs	r0, r0, #31
   14e04:	4770      	bx	lr
   14e06:	46c0      	nop			; (mov r8, r8)
   14e08:	80100000 	.word	0x80100000

00014e0c <matherr>:
   14e0c:	2000      	movs	r0, #0
   14e0e:	4770      	bx	lr

00014e10 <nan>:
   14e10:	2000      	movs	r0, #0
   14e12:	4901      	ldr	r1, [pc, #4]	; (14e18 <nan+0x8>)
   14e14:	4770      	bx	lr
   14e16:	46c0      	nop			; (mov r8, r8)
   14e18:	7ff80000 	.word	0x7ff80000

00014e1c <rint>:
   14e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e1e:	46c6      	mov	lr, r8
   14e20:	b500      	push	{lr}
   14e22:	0fcb      	lsrs	r3, r1, #31
   14e24:	4698      	mov	r8, r3
   14e26:	4c4a      	ldr	r4, [pc, #296]	; (14f50 <rint+0x134>)
   14e28:	004b      	lsls	r3, r1, #1
   14e2a:	0d5b      	lsrs	r3, r3, #21
   14e2c:	191e      	adds	r6, r3, r4
   14e2e:	b082      	sub	sp, #8
   14e30:	0007      	movs	r7, r0
   14e32:	000a      	movs	r2, r1
   14e34:	2e13      	cmp	r6, #19
   14e36:	dc35      	bgt.n	14ea4 <rint+0x88>
   14e38:	2e00      	cmp	r6, #0
   14e3a:	db57      	blt.n	14eec <rint+0xd0>
   14e3c:	4b45      	ldr	r3, [pc, #276]	; (14f54 <rint+0x138>)
   14e3e:	0004      	movs	r4, r0
   14e40:	4133      	asrs	r3, r6
   14e42:	001f      	movs	r7, r3
   14e44:	400f      	ands	r7, r1
   14e46:	4307      	orrs	r7, r0
   14e48:	000d      	movs	r5, r1
   14e4a:	2f00      	cmp	r7, #0
   14e4c:	d024      	beq.n	14e98 <rint+0x7c>
   14e4e:	085b      	lsrs	r3, r3, #1
   14e50:	001c      	movs	r4, r3
   14e52:	400c      	ands	r4, r1
   14e54:	4320      	orrs	r0, r4
   14e56:	2700      	movs	r7, #0
   14e58:	2800      	cmp	r0, #0
   14e5a:	d007      	beq.n	14e6c <rint+0x50>
   14e5c:	2e13      	cmp	r6, #19
   14e5e:	d100      	bne.n	14e62 <rint+0x46>
   14e60:	e073      	b.n	14f4a <rint+0x12e>
   14e62:	2280      	movs	r2, #128	; 0x80
   14e64:	02d2      	lsls	r2, r2, #11
   14e66:	4132      	asrs	r2, r6
   14e68:	4399      	bics	r1, r3
   14e6a:	430a      	orrs	r2, r1
   14e6c:	4643      	mov	r3, r8
   14e6e:	00de      	lsls	r6, r3, #3
   14e70:	4b39      	ldr	r3, [pc, #228]	; (14f58 <rint+0x13c>)
   14e72:	0011      	movs	r1, r2
   14e74:	199e      	adds	r6, r3, r6
   14e76:	6834      	ldr	r4, [r6, #0]
   14e78:	6875      	ldr	r5, [r6, #4]
   14e7a:	0038      	movs	r0, r7
   14e7c:	0022      	movs	r2, r4
   14e7e:	002b      	movs	r3, r5
   14e80:	f000 fe68 	bl	15b54 <__aeabi_dadd>
   14e84:	9000      	str	r0, [sp, #0]
   14e86:	9101      	str	r1, [sp, #4]
   14e88:	9800      	ldr	r0, [sp, #0]
   14e8a:	9901      	ldr	r1, [sp, #4]
   14e8c:	0022      	movs	r2, r4
   14e8e:	002b      	movs	r3, r5
   14e90:	f002 f824 	bl	16edc <__aeabi_dsub>
   14e94:	0004      	movs	r4, r0
   14e96:	000d      	movs	r5, r1
   14e98:	0020      	movs	r0, r4
   14e9a:	0029      	movs	r1, r5
   14e9c:	b002      	add	sp, #8
   14e9e:	bc04      	pop	{r2}
   14ea0:	4690      	mov	r8, r2
   14ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ea4:	2e33      	cmp	r6, #51	; 0x33
   14ea6:	dd0c      	ble.n	14ec2 <rint+0xa6>
   14ea8:	2380      	movs	r3, #128	; 0x80
   14eaa:	0004      	movs	r4, r0
   14eac:	00db      	lsls	r3, r3, #3
   14eae:	000d      	movs	r5, r1
   14eb0:	429e      	cmp	r6, r3
   14eb2:	d1f1      	bne.n	14e98 <rint+0x7c>
   14eb4:	0002      	movs	r2, r0
   14eb6:	000b      	movs	r3, r1
   14eb8:	f000 fe4c 	bl	15b54 <__aeabi_dadd>
   14ebc:	0004      	movs	r4, r0
   14ebe:	000d      	movs	r5, r1
   14ec0:	e7ea      	b.n	14e98 <rint+0x7c>
   14ec2:	4c26      	ldr	r4, [pc, #152]	; (14f5c <rint+0x140>)
   14ec4:	000d      	movs	r5, r1
   14ec6:	46a4      	mov	ip, r4
   14ec8:	2401      	movs	r4, #1
   14eca:	4463      	add	r3, ip
   14ecc:	4264      	negs	r4, r4
   14ece:	40dc      	lsrs	r4, r3
   14ed0:	46a4      	mov	ip, r4
   14ed2:	4661      	mov	r1, ip
   14ed4:	0004      	movs	r4, r0
   14ed6:	4201      	tst	r1, r0
   14ed8:	d0de      	beq.n	14e98 <rint+0x7c>
   14eda:	0849      	lsrs	r1, r1, #1
   14edc:	4201      	tst	r1, r0
   14ede:	d0c5      	beq.n	14e6c <rint+0x50>
   14ee0:	2780      	movs	r7, #128	; 0x80
   14ee2:	05ff      	lsls	r7, r7, #23
   14ee4:	411f      	asrs	r7, r3
   14ee6:	4388      	bics	r0, r1
   14ee8:	4307      	orrs	r7, r0
   14eea:	e7bf      	b.n	14e6c <rint+0x50>
   14eec:	004b      	lsls	r3, r1, #1
   14eee:	085b      	lsrs	r3, r3, #1
   14ef0:	4303      	orrs	r3, r0
   14ef2:	0004      	movs	r4, r0
   14ef4:	000d      	movs	r5, r1
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d0ce      	beq.n	14e98 <rint+0x7c>
   14efa:	030b      	lsls	r3, r1, #12
   14efc:	0b1b      	lsrs	r3, r3, #12
   14efe:	4303      	orrs	r3, r0
   14f00:	001a      	movs	r2, r3
   14f02:	425b      	negs	r3, r3
   14f04:	4313      	orrs	r3, r2
   14f06:	2280      	movs	r2, #128	; 0x80
   14f08:	0b1b      	lsrs	r3, r3, #12
   14f0a:	0312      	lsls	r2, r2, #12
   14f0c:	4013      	ands	r3, r2
   14f0e:	0c4a      	lsrs	r2, r1, #17
   14f10:	0452      	lsls	r2, r2, #17
   14f12:	4313      	orrs	r3, r2
   14f14:	0019      	movs	r1, r3
   14f16:	4643      	mov	r3, r8
   14f18:	00da      	lsls	r2, r3, #3
   14f1a:	4b0f      	ldr	r3, [pc, #60]	; (14f58 <rint+0x13c>)
   14f1c:	189b      	adds	r3, r3, r2
   14f1e:	681c      	ldr	r4, [r3, #0]
   14f20:	685d      	ldr	r5, [r3, #4]
   14f22:	0022      	movs	r2, r4
   14f24:	002b      	movs	r3, r5
   14f26:	f000 fe15 	bl	15b54 <__aeabi_dadd>
   14f2a:	9000      	str	r0, [sp, #0]
   14f2c:	9101      	str	r1, [sp, #4]
   14f2e:	9800      	ldr	r0, [sp, #0]
   14f30:	9901      	ldr	r1, [sp, #4]
   14f32:	0022      	movs	r2, r4
   14f34:	002b      	movs	r3, r5
   14f36:	f001 ffd1 	bl	16edc <__aeabi_dsub>
   14f3a:	4642      	mov	r2, r8
   14f3c:	004b      	lsls	r3, r1, #1
   14f3e:	085b      	lsrs	r3, r3, #1
   14f40:	07d6      	lsls	r6, r2, #31
   14f42:	4333      	orrs	r3, r6
   14f44:	0004      	movs	r4, r0
   14f46:	001d      	movs	r5, r3
   14f48:	e7a6      	b.n	14e98 <rint+0x7c>
   14f4a:	2780      	movs	r7, #128	; 0x80
   14f4c:	063f      	lsls	r7, r7, #24
   14f4e:	e788      	b.n	14e62 <rint+0x46>
   14f50:	fffffc01 	.word	0xfffffc01
   14f54:	000fffff 	.word	0x000fffff
   14f58:	00019638 	.word	0x00019638
   14f5c:	fffffbed 	.word	0xfffffbed

00014f60 <scalbn>:
   14f60:	004b      	lsls	r3, r1, #1
   14f62:	b570      	push	{r4, r5, r6, lr}
   14f64:	0d5b      	lsrs	r3, r3, #21
   14f66:	0014      	movs	r4, r2
   14f68:	000a      	movs	r2, r1
   14f6a:	2b00      	cmp	r3, #0
   14f6c:	d11a      	bne.n	14fa4 <scalbn+0x44>
   14f6e:	004b      	lsls	r3, r1, #1
   14f70:	085b      	lsrs	r3, r3, #1
   14f72:	4303      	orrs	r3, r0
   14f74:	d015      	beq.n	14fa2 <scalbn+0x42>
   14f76:	2200      	movs	r2, #0
   14f78:	4b22      	ldr	r3, [pc, #136]	; (15004 <scalbn+0xa4>)
   14f7a:	f001 fd2f 	bl	169dc <__aeabi_dmul>
   14f7e:	4b22      	ldr	r3, [pc, #136]	; (15008 <scalbn+0xa8>)
   14f80:	000a      	movs	r2, r1
   14f82:	429c      	cmp	r4, r3
   14f84:	db22      	blt.n	14fcc <scalbn+0x6c>
   14f86:	004b      	lsls	r3, r1, #1
   14f88:	0d5b      	lsrs	r3, r3, #21
   14f8a:	3b36      	subs	r3, #54	; 0x36
   14f8c:	4d1f      	ldr	r5, [pc, #124]	; (1500c <scalbn+0xac>)
   14f8e:	18e3      	adds	r3, r4, r3
   14f90:	42ab      	cmp	r3, r5
   14f92:	dc20      	bgt.n	14fd6 <scalbn+0x76>
   14f94:	2b00      	cmp	r3, #0
   14f96:	dd0d      	ble.n	14fb4 <scalbn+0x54>
   14f98:	4c1d      	ldr	r4, [pc, #116]	; (15010 <scalbn+0xb0>)
   14f9a:	051b      	lsls	r3, r3, #20
   14f9c:	4022      	ands	r2, r4
   14f9e:	431a      	orrs	r2, r3
   14fa0:	0011      	movs	r1, r2
   14fa2:	bd70      	pop	{r4, r5, r6, pc}
   14fa4:	4d1b      	ldr	r5, [pc, #108]	; (15014 <scalbn+0xb4>)
   14fa6:	42ab      	cmp	r3, r5
   14fa8:	d1f0      	bne.n	14f8c <scalbn+0x2c>
   14faa:	0002      	movs	r2, r0
   14fac:	000b      	movs	r3, r1
   14fae:	f000 fdd1 	bl	15b54 <__aeabi_dadd>
   14fb2:	e7f6      	b.n	14fa2 <scalbn+0x42>
   14fb4:	001d      	movs	r5, r3
   14fb6:	3535      	adds	r5, #53	; 0x35
   14fb8:	da18      	bge.n	14fec <scalbn+0x8c>
   14fba:	4b17      	ldr	r3, [pc, #92]	; (15018 <scalbn+0xb8>)
   14fbc:	0002      	movs	r2, r0
   14fbe:	429c      	cmp	r4, r3
   14fc0:	dc0a      	bgt.n	14fd8 <scalbn+0x78>
   14fc2:	000b      	movs	r3, r1
   14fc4:	4815      	ldr	r0, [pc, #84]	; (1501c <scalbn+0xbc>)
   14fc6:	4916      	ldr	r1, [pc, #88]	; (15020 <scalbn+0xc0>)
   14fc8:	f000 f832 	bl	15030 <copysign>
   14fcc:	4a13      	ldr	r2, [pc, #76]	; (1501c <scalbn+0xbc>)
   14fce:	4b14      	ldr	r3, [pc, #80]	; (15020 <scalbn+0xc0>)
   14fd0:	f001 fd04 	bl	169dc <__aeabi_dmul>
   14fd4:	e7e5      	b.n	14fa2 <scalbn+0x42>
   14fd6:	0002      	movs	r2, r0
   14fd8:	000b      	movs	r3, r1
   14fda:	4812      	ldr	r0, [pc, #72]	; (15024 <scalbn+0xc4>)
   14fdc:	4912      	ldr	r1, [pc, #72]	; (15028 <scalbn+0xc8>)
   14fde:	f000 f827 	bl	15030 <copysign>
   14fe2:	4a10      	ldr	r2, [pc, #64]	; (15024 <scalbn+0xc4>)
   14fe4:	4b10      	ldr	r3, [pc, #64]	; (15028 <scalbn+0xc8>)
   14fe6:	f001 fcf9 	bl	169dc <__aeabi_dmul>
   14fea:	e7da      	b.n	14fa2 <scalbn+0x42>
   14fec:	4c08      	ldr	r4, [pc, #32]	; (15010 <scalbn+0xb0>)
   14fee:	3336      	adds	r3, #54	; 0x36
   14ff0:	4022      	ands	r2, r4
   14ff2:	051b      	lsls	r3, r3, #20
   14ff4:	4313      	orrs	r3, r2
   14ff6:	0019      	movs	r1, r3
   14ff8:	2200      	movs	r2, #0
   14ffa:	4b0c      	ldr	r3, [pc, #48]	; (1502c <scalbn+0xcc>)
   14ffc:	f001 fcee 	bl	169dc <__aeabi_dmul>
   15000:	e7cf      	b.n	14fa2 <scalbn+0x42>
   15002:	46c0      	nop			; (mov r8, r8)
   15004:	43500000 	.word	0x43500000
   15008:	ffff3cb0 	.word	0xffff3cb0
   1500c:	000007fe 	.word	0x000007fe
   15010:	800fffff 	.word	0x800fffff
   15014:	000007ff 	.word	0x000007ff
   15018:	0000c350 	.word	0x0000c350
   1501c:	c2f8f359 	.word	0xc2f8f359
   15020:	01a56e1f 	.word	0x01a56e1f
   15024:	8800759c 	.word	0x8800759c
   15028:	7e37e43c 	.word	0x7e37e43c
   1502c:	3c900000 	.word	0x3c900000

00015030 <copysign>:
   15030:	b530      	push	{r4, r5, lr}
   15032:	004a      	lsls	r2, r1, #1
   15034:	0fdb      	lsrs	r3, r3, #31
   15036:	07db      	lsls	r3, r3, #31
   15038:	0852      	lsrs	r2, r2, #1
   1503a:	431a      	orrs	r2, r3
   1503c:	0011      	movs	r1, r2
   1503e:	bd30      	pop	{r4, r5, pc}

00015040 <__udivsi3>:
   15040:	2200      	movs	r2, #0
   15042:	0843      	lsrs	r3, r0, #1
   15044:	428b      	cmp	r3, r1
   15046:	d374      	bcc.n	15132 <__udivsi3+0xf2>
   15048:	0903      	lsrs	r3, r0, #4
   1504a:	428b      	cmp	r3, r1
   1504c:	d35f      	bcc.n	1510e <__udivsi3+0xce>
   1504e:	0a03      	lsrs	r3, r0, #8
   15050:	428b      	cmp	r3, r1
   15052:	d344      	bcc.n	150de <__udivsi3+0x9e>
   15054:	0b03      	lsrs	r3, r0, #12
   15056:	428b      	cmp	r3, r1
   15058:	d328      	bcc.n	150ac <__udivsi3+0x6c>
   1505a:	0c03      	lsrs	r3, r0, #16
   1505c:	428b      	cmp	r3, r1
   1505e:	d30d      	bcc.n	1507c <__udivsi3+0x3c>
   15060:	22ff      	movs	r2, #255	; 0xff
   15062:	0209      	lsls	r1, r1, #8
   15064:	ba12      	rev	r2, r2
   15066:	0c03      	lsrs	r3, r0, #16
   15068:	428b      	cmp	r3, r1
   1506a:	d302      	bcc.n	15072 <__udivsi3+0x32>
   1506c:	1212      	asrs	r2, r2, #8
   1506e:	0209      	lsls	r1, r1, #8
   15070:	d065      	beq.n	1513e <__udivsi3+0xfe>
   15072:	0b03      	lsrs	r3, r0, #12
   15074:	428b      	cmp	r3, r1
   15076:	d319      	bcc.n	150ac <__udivsi3+0x6c>
   15078:	e000      	b.n	1507c <__udivsi3+0x3c>
   1507a:	0a09      	lsrs	r1, r1, #8
   1507c:	0bc3      	lsrs	r3, r0, #15
   1507e:	428b      	cmp	r3, r1
   15080:	d301      	bcc.n	15086 <__udivsi3+0x46>
   15082:	03cb      	lsls	r3, r1, #15
   15084:	1ac0      	subs	r0, r0, r3
   15086:	4152      	adcs	r2, r2
   15088:	0b83      	lsrs	r3, r0, #14
   1508a:	428b      	cmp	r3, r1
   1508c:	d301      	bcc.n	15092 <__udivsi3+0x52>
   1508e:	038b      	lsls	r3, r1, #14
   15090:	1ac0      	subs	r0, r0, r3
   15092:	4152      	adcs	r2, r2
   15094:	0b43      	lsrs	r3, r0, #13
   15096:	428b      	cmp	r3, r1
   15098:	d301      	bcc.n	1509e <__udivsi3+0x5e>
   1509a:	034b      	lsls	r3, r1, #13
   1509c:	1ac0      	subs	r0, r0, r3
   1509e:	4152      	adcs	r2, r2
   150a0:	0b03      	lsrs	r3, r0, #12
   150a2:	428b      	cmp	r3, r1
   150a4:	d301      	bcc.n	150aa <__udivsi3+0x6a>
   150a6:	030b      	lsls	r3, r1, #12
   150a8:	1ac0      	subs	r0, r0, r3
   150aa:	4152      	adcs	r2, r2
   150ac:	0ac3      	lsrs	r3, r0, #11
   150ae:	428b      	cmp	r3, r1
   150b0:	d301      	bcc.n	150b6 <__udivsi3+0x76>
   150b2:	02cb      	lsls	r3, r1, #11
   150b4:	1ac0      	subs	r0, r0, r3
   150b6:	4152      	adcs	r2, r2
   150b8:	0a83      	lsrs	r3, r0, #10
   150ba:	428b      	cmp	r3, r1
   150bc:	d301      	bcc.n	150c2 <__udivsi3+0x82>
   150be:	028b      	lsls	r3, r1, #10
   150c0:	1ac0      	subs	r0, r0, r3
   150c2:	4152      	adcs	r2, r2
   150c4:	0a43      	lsrs	r3, r0, #9
   150c6:	428b      	cmp	r3, r1
   150c8:	d301      	bcc.n	150ce <__udivsi3+0x8e>
   150ca:	024b      	lsls	r3, r1, #9
   150cc:	1ac0      	subs	r0, r0, r3
   150ce:	4152      	adcs	r2, r2
   150d0:	0a03      	lsrs	r3, r0, #8
   150d2:	428b      	cmp	r3, r1
   150d4:	d301      	bcc.n	150da <__udivsi3+0x9a>
   150d6:	020b      	lsls	r3, r1, #8
   150d8:	1ac0      	subs	r0, r0, r3
   150da:	4152      	adcs	r2, r2
   150dc:	d2cd      	bcs.n	1507a <__udivsi3+0x3a>
   150de:	09c3      	lsrs	r3, r0, #7
   150e0:	428b      	cmp	r3, r1
   150e2:	d301      	bcc.n	150e8 <__udivsi3+0xa8>
   150e4:	01cb      	lsls	r3, r1, #7
   150e6:	1ac0      	subs	r0, r0, r3
   150e8:	4152      	adcs	r2, r2
   150ea:	0983      	lsrs	r3, r0, #6
   150ec:	428b      	cmp	r3, r1
   150ee:	d301      	bcc.n	150f4 <__udivsi3+0xb4>
   150f0:	018b      	lsls	r3, r1, #6
   150f2:	1ac0      	subs	r0, r0, r3
   150f4:	4152      	adcs	r2, r2
   150f6:	0943      	lsrs	r3, r0, #5
   150f8:	428b      	cmp	r3, r1
   150fa:	d301      	bcc.n	15100 <__udivsi3+0xc0>
   150fc:	014b      	lsls	r3, r1, #5
   150fe:	1ac0      	subs	r0, r0, r3
   15100:	4152      	adcs	r2, r2
   15102:	0903      	lsrs	r3, r0, #4
   15104:	428b      	cmp	r3, r1
   15106:	d301      	bcc.n	1510c <__udivsi3+0xcc>
   15108:	010b      	lsls	r3, r1, #4
   1510a:	1ac0      	subs	r0, r0, r3
   1510c:	4152      	adcs	r2, r2
   1510e:	08c3      	lsrs	r3, r0, #3
   15110:	428b      	cmp	r3, r1
   15112:	d301      	bcc.n	15118 <__udivsi3+0xd8>
   15114:	00cb      	lsls	r3, r1, #3
   15116:	1ac0      	subs	r0, r0, r3
   15118:	4152      	adcs	r2, r2
   1511a:	0883      	lsrs	r3, r0, #2
   1511c:	428b      	cmp	r3, r1
   1511e:	d301      	bcc.n	15124 <__udivsi3+0xe4>
   15120:	008b      	lsls	r3, r1, #2
   15122:	1ac0      	subs	r0, r0, r3
   15124:	4152      	adcs	r2, r2
   15126:	0843      	lsrs	r3, r0, #1
   15128:	428b      	cmp	r3, r1
   1512a:	d301      	bcc.n	15130 <__udivsi3+0xf0>
   1512c:	004b      	lsls	r3, r1, #1
   1512e:	1ac0      	subs	r0, r0, r3
   15130:	4152      	adcs	r2, r2
   15132:	1a41      	subs	r1, r0, r1
   15134:	d200      	bcs.n	15138 <__udivsi3+0xf8>
   15136:	4601      	mov	r1, r0
   15138:	4152      	adcs	r2, r2
   1513a:	4610      	mov	r0, r2
   1513c:	4770      	bx	lr
   1513e:	e7ff      	b.n	15140 <__udivsi3+0x100>
   15140:	b501      	push	{r0, lr}
   15142:	2000      	movs	r0, #0
   15144:	f000 f8f0 	bl	15328 <__aeabi_idiv0>
   15148:	bd02      	pop	{r1, pc}
   1514a:	46c0      	nop			; (mov r8, r8)

0001514c <__aeabi_uidivmod>:
   1514c:	2900      	cmp	r1, #0
   1514e:	d0f7      	beq.n	15140 <__udivsi3+0x100>
   15150:	e776      	b.n	15040 <__udivsi3>
   15152:	4770      	bx	lr

00015154 <__divsi3>:
   15154:	4603      	mov	r3, r0
   15156:	430b      	orrs	r3, r1
   15158:	d47f      	bmi.n	1525a <__divsi3+0x106>
   1515a:	2200      	movs	r2, #0
   1515c:	0843      	lsrs	r3, r0, #1
   1515e:	428b      	cmp	r3, r1
   15160:	d374      	bcc.n	1524c <__divsi3+0xf8>
   15162:	0903      	lsrs	r3, r0, #4
   15164:	428b      	cmp	r3, r1
   15166:	d35f      	bcc.n	15228 <__divsi3+0xd4>
   15168:	0a03      	lsrs	r3, r0, #8
   1516a:	428b      	cmp	r3, r1
   1516c:	d344      	bcc.n	151f8 <__divsi3+0xa4>
   1516e:	0b03      	lsrs	r3, r0, #12
   15170:	428b      	cmp	r3, r1
   15172:	d328      	bcc.n	151c6 <__divsi3+0x72>
   15174:	0c03      	lsrs	r3, r0, #16
   15176:	428b      	cmp	r3, r1
   15178:	d30d      	bcc.n	15196 <__divsi3+0x42>
   1517a:	22ff      	movs	r2, #255	; 0xff
   1517c:	0209      	lsls	r1, r1, #8
   1517e:	ba12      	rev	r2, r2
   15180:	0c03      	lsrs	r3, r0, #16
   15182:	428b      	cmp	r3, r1
   15184:	d302      	bcc.n	1518c <__divsi3+0x38>
   15186:	1212      	asrs	r2, r2, #8
   15188:	0209      	lsls	r1, r1, #8
   1518a:	d065      	beq.n	15258 <__divsi3+0x104>
   1518c:	0b03      	lsrs	r3, r0, #12
   1518e:	428b      	cmp	r3, r1
   15190:	d319      	bcc.n	151c6 <__divsi3+0x72>
   15192:	e000      	b.n	15196 <__divsi3+0x42>
   15194:	0a09      	lsrs	r1, r1, #8
   15196:	0bc3      	lsrs	r3, r0, #15
   15198:	428b      	cmp	r3, r1
   1519a:	d301      	bcc.n	151a0 <__divsi3+0x4c>
   1519c:	03cb      	lsls	r3, r1, #15
   1519e:	1ac0      	subs	r0, r0, r3
   151a0:	4152      	adcs	r2, r2
   151a2:	0b83      	lsrs	r3, r0, #14
   151a4:	428b      	cmp	r3, r1
   151a6:	d301      	bcc.n	151ac <__divsi3+0x58>
   151a8:	038b      	lsls	r3, r1, #14
   151aa:	1ac0      	subs	r0, r0, r3
   151ac:	4152      	adcs	r2, r2
   151ae:	0b43      	lsrs	r3, r0, #13
   151b0:	428b      	cmp	r3, r1
   151b2:	d301      	bcc.n	151b8 <__divsi3+0x64>
   151b4:	034b      	lsls	r3, r1, #13
   151b6:	1ac0      	subs	r0, r0, r3
   151b8:	4152      	adcs	r2, r2
   151ba:	0b03      	lsrs	r3, r0, #12
   151bc:	428b      	cmp	r3, r1
   151be:	d301      	bcc.n	151c4 <__divsi3+0x70>
   151c0:	030b      	lsls	r3, r1, #12
   151c2:	1ac0      	subs	r0, r0, r3
   151c4:	4152      	adcs	r2, r2
   151c6:	0ac3      	lsrs	r3, r0, #11
   151c8:	428b      	cmp	r3, r1
   151ca:	d301      	bcc.n	151d0 <__divsi3+0x7c>
   151cc:	02cb      	lsls	r3, r1, #11
   151ce:	1ac0      	subs	r0, r0, r3
   151d0:	4152      	adcs	r2, r2
   151d2:	0a83      	lsrs	r3, r0, #10
   151d4:	428b      	cmp	r3, r1
   151d6:	d301      	bcc.n	151dc <__divsi3+0x88>
   151d8:	028b      	lsls	r3, r1, #10
   151da:	1ac0      	subs	r0, r0, r3
   151dc:	4152      	adcs	r2, r2
   151de:	0a43      	lsrs	r3, r0, #9
   151e0:	428b      	cmp	r3, r1
   151e2:	d301      	bcc.n	151e8 <__divsi3+0x94>
   151e4:	024b      	lsls	r3, r1, #9
   151e6:	1ac0      	subs	r0, r0, r3
   151e8:	4152      	adcs	r2, r2
   151ea:	0a03      	lsrs	r3, r0, #8
   151ec:	428b      	cmp	r3, r1
   151ee:	d301      	bcc.n	151f4 <__divsi3+0xa0>
   151f0:	020b      	lsls	r3, r1, #8
   151f2:	1ac0      	subs	r0, r0, r3
   151f4:	4152      	adcs	r2, r2
   151f6:	d2cd      	bcs.n	15194 <__divsi3+0x40>
   151f8:	09c3      	lsrs	r3, r0, #7
   151fa:	428b      	cmp	r3, r1
   151fc:	d301      	bcc.n	15202 <__divsi3+0xae>
   151fe:	01cb      	lsls	r3, r1, #7
   15200:	1ac0      	subs	r0, r0, r3
   15202:	4152      	adcs	r2, r2
   15204:	0983      	lsrs	r3, r0, #6
   15206:	428b      	cmp	r3, r1
   15208:	d301      	bcc.n	1520e <__divsi3+0xba>
   1520a:	018b      	lsls	r3, r1, #6
   1520c:	1ac0      	subs	r0, r0, r3
   1520e:	4152      	adcs	r2, r2
   15210:	0943      	lsrs	r3, r0, #5
   15212:	428b      	cmp	r3, r1
   15214:	d301      	bcc.n	1521a <__divsi3+0xc6>
   15216:	014b      	lsls	r3, r1, #5
   15218:	1ac0      	subs	r0, r0, r3
   1521a:	4152      	adcs	r2, r2
   1521c:	0903      	lsrs	r3, r0, #4
   1521e:	428b      	cmp	r3, r1
   15220:	d301      	bcc.n	15226 <__divsi3+0xd2>
   15222:	010b      	lsls	r3, r1, #4
   15224:	1ac0      	subs	r0, r0, r3
   15226:	4152      	adcs	r2, r2
   15228:	08c3      	lsrs	r3, r0, #3
   1522a:	428b      	cmp	r3, r1
   1522c:	d301      	bcc.n	15232 <__divsi3+0xde>
   1522e:	00cb      	lsls	r3, r1, #3
   15230:	1ac0      	subs	r0, r0, r3
   15232:	4152      	adcs	r2, r2
   15234:	0883      	lsrs	r3, r0, #2
   15236:	428b      	cmp	r3, r1
   15238:	d301      	bcc.n	1523e <__divsi3+0xea>
   1523a:	008b      	lsls	r3, r1, #2
   1523c:	1ac0      	subs	r0, r0, r3
   1523e:	4152      	adcs	r2, r2
   15240:	0843      	lsrs	r3, r0, #1
   15242:	428b      	cmp	r3, r1
   15244:	d301      	bcc.n	1524a <__divsi3+0xf6>
   15246:	004b      	lsls	r3, r1, #1
   15248:	1ac0      	subs	r0, r0, r3
   1524a:	4152      	adcs	r2, r2
   1524c:	1a41      	subs	r1, r0, r1
   1524e:	d200      	bcs.n	15252 <__divsi3+0xfe>
   15250:	4601      	mov	r1, r0
   15252:	4152      	adcs	r2, r2
   15254:	4610      	mov	r0, r2
   15256:	4770      	bx	lr
   15258:	e05d      	b.n	15316 <__divsi3+0x1c2>
   1525a:	0fca      	lsrs	r2, r1, #31
   1525c:	d000      	beq.n	15260 <__divsi3+0x10c>
   1525e:	4249      	negs	r1, r1
   15260:	1003      	asrs	r3, r0, #32
   15262:	d300      	bcc.n	15266 <__divsi3+0x112>
   15264:	4240      	negs	r0, r0
   15266:	4053      	eors	r3, r2
   15268:	2200      	movs	r2, #0
   1526a:	469c      	mov	ip, r3
   1526c:	0903      	lsrs	r3, r0, #4
   1526e:	428b      	cmp	r3, r1
   15270:	d32d      	bcc.n	152ce <__divsi3+0x17a>
   15272:	0a03      	lsrs	r3, r0, #8
   15274:	428b      	cmp	r3, r1
   15276:	d312      	bcc.n	1529e <__divsi3+0x14a>
   15278:	22fc      	movs	r2, #252	; 0xfc
   1527a:	0189      	lsls	r1, r1, #6
   1527c:	ba12      	rev	r2, r2
   1527e:	0a03      	lsrs	r3, r0, #8
   15280:	428b      	cmp	r3, r1
   15282:	d30c      	bcc.n	1529e <__divsi3+0x14a>
   15284:	0189      	lsls	r1, r1, #6
   15286:	1192      	asrs	r2, r2, #6
   15288:	428b      	cmp	r3, r1
   1528a:	d308      	bcc.n	1529e <__divsi3+0x14a>
   1528c:	0189      	lsls	r1, r1, #6
   1528e:	1192      	asrs	r2, r2, #6
   15290:	428b      	cmp	r3, r1
   15292:	d304      	bcc.n	1529e <__divsi3+0x14a>
   15294:	0189      	lsls	r1, r1, #6
   15296:	d03a      	beq.n	1530e <__divsi3+0x1ba>
   15298:	1192      	asrs	r2, r2, #6
   1529a:	e000      	b.n	1529e <__divsi3+0x14a>
   1529c:	0989      	lsrs	r1, r1, #6
   1529e:	09c3      	lsrs	r3, r0, #7
   152a0:	428b      	cmp	r3, r1
   152a2:	d301      	bcc.n	152a8 <__divsi3+0x154>
   152a4:	01cb      	lsls	r3, r1, #7
   152a6:	1ac0      	subs	r0, r0, r3
   152a8:	4152      	adcs	r2, r2
   152aa:	0983      	lsrs	r3, r0, #6
   152ac:	428b      	cmp	r3, r1
   152ae:	d301      	bcc.n	152b4 <__divsi3+0x160>
   152b0:	018b      	lsls	r3, r1, #6
   152b2:	1ac0      	subs	r0, r0, r3
   152b4:	4152      	adcs	r2, r2
   152b6:	0943      	lsrs	r3, r0, #5
   152b8:	428b      	cmp	r3, r1
   152ba:	d301      	bcc.n	152c0 <__divsi3+0x16c>
   152bc:	014b      	lsls	r3, r1, #5
   152be:	1ac0      	subs	r0, r0, r3
   152c0:	4152      	adcs	r2, r2
   152c2:	0903      	lsrs	r3, r0, #4
   152c4:	428b      	cmp	r3, r1
   152c6:	d301      	bcc.n	152cc <__divsi3+0x178>
   152c8:	010b      	lsls	r3, r1, #4
   152ca:	1ac0      	subs	r0, r0, r3
   152cc:	4152      	adcs	r2, r2
   152ce:	08c3      	lsrs	r3, r0, #3
   152d0:	428b      	cmp	r3, r1
   152d2:	d301      	bcc.n	152d8 <__divsi3+0x184>
   152d4:	00cb      	lsls	r3, r1, #3
   152d6:	1ac0      	subs	r0, r0, r3
   152d8:	4152      	adcs	r2, r2
   152da:	0883      	lsrs	r3, r0, #2
   152dc:	428b      	cmp	r3, r1
   152de:	d301      	bcc.n	152e4 <__divsi3+0x190>
   152e0:	008b      	lsls	r3, r1, #2
   152e2:	1ac0      	subs	r0, r0, r3
   152e4:	4152      	adcs	r2, r2
   152e6:	d2d9      	bcs.n	1529c <__divsi3+0x148>
   152e8:	0843      	lsrs	r3, r0, #1
   152ea:	428b      	cmp	r3, r1
   152ec:	d301      	bcc.n	152f2 <__divsi3+0x19e>
   152ee:	004b      	lsls	r3, r1, #1
   152f0:	1ac0      	subs	r0, r0, r3
   152f2:	4152      	adcs	r2, r2
   152f4:	1a41      	subs	r1, r0, r1
   152f6:	d200      	bcs.n	152fa <__divsi3+0x1a6>
   152f8:	4601      	mov	r1, r0
   152fa:	4663      	mov	r3, ip
   152fc:	4152      	adcs	r2, r2
   152fe:	105b      	asrs	r3, r3, #1
   15300:	4610      	mov	r0, r2
   15302:	d301      	bcc.n	15308 <__divsi3+0x1b4>
   15304:	4240      	negs	r0, r0
   15306:	2b00      	cmp	r3, #0
   15308:	d500      	bpl.n	1530c <__divsi3+0x1b8>
   1530a:	4249      	negs	r1, r1
   1530c:	4770      	bx	lr
   1530e:	4663      	mov	r3, ip
   15310:	105b      	asrs	r3, r3, #1
   15312:	d300      	bcc.n	15316 <__divsi3+0x1c2>
   15314:	4240      	negs	r0, r0
   15316:	b501      	push	{r0, lr}
   15318:	2000      	movs	r0, #0
   1531a:	f000 f805 	bl	15328 <__aeabi_idiv0>
   1531e:	bd02      	pop	{r1, pc}

00015320 <__aeabi_idivmod>:
   15320:	2900      	cmp	r1, #0
   15322:	d0f8      	beq.n	15316 <__divsi3+0x1c2>
   15324:	e716      	b.n	15154 <__divsi3>
   15326:	4770      	bx	lr

00015328 <__aeabi_idiv0>:
   15328:	4770      	bx	lr
   1532a:	46c0      	nop			; (mov r8, r8)

0001532c <__aeabi_cdrcmple>:
   1532c:	4684      	mov	ip, r0
   1532e:	1c10      	adds	r0, r2, #0
   15330:	4662      	mov	r2, ip
   15332:	468c      	mov	ip, r1
   15334:	1c19      	adds	r1, r3, #0
   15336:	4663      	mov	r3, ip
   15338:	e000      	b.n	1533c <__aeabi_cdcmpeq>
   1533a:	46c0      	nop			; (mov r8, r8)

0001533c <__aeabi_cdcmpeq>:
   1533c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1533e:	f001 faeb 	bl	16918 <__ledf2>
   15342:	2800      	cmp	r0, #0
   15344:	d401      	bmi.n	1534a <__aeabi_cdcmpeq+0xe>
   15346:	2100      	movs	r1, #0
   15348:	42c8      	cmn	r0, r1
   1534a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001534c <__aeabi_dcmpeq>:
   1534c:	b510      	push	{r4, lr}
   1534e:	f001 fa45 	bl	167dc <__eqdf2>
   15352:	4240      	negs	r0, r0
   15354:	3001      	adds	r0, #1
   15356:	bd10      	pop	{r4, pc}

00015358 <__aeabi_dcmplt>:
   15358:	b510      	push	{r4, lr}
   1535a:	f001 fadd 	bl	16918 <__ledf2>
   1535e:	2800      	cmp	r0, #0
   15360:	db01      	blt.n	15366 <__aeabi_dcmplt+0xe>
   15362:	2000      	movs	r0, #0
   15364:	bd10      	pop	{r4, pc}
   15366:	2001      	movs	r0, #1
   15368:	bd10      	pop	{r4, pc}
   1536a:	46c0      	nop			; (mov r8, r8)

0001536c <__aeabi_dcmple>:
   1536c:	b510      	push	{r4, lr}
   1536e:	f001 fad3 	bl	16918 <__ledf2>
   15372:	2800      	cmp	r0, #0
   15374:	dd01      	ble.n	1537a <__aeabi_dcmple+0xe>
   15376:	2000      	movs	r0, #0
   15378:	bd10      	pop	{r4, pc}
   1537a:	2001      	movs	r0, #1
   1537c:	bd10      	pop	{r4, pc}
   1537e:	46c0      	nop			; (mov r8, r8)

00015380 <__aeabi_dcmpgt>:
   15380:	b510      	push	{r4, lr}
   15382:	f001 fa65 	bl	16850 <__gedf2>
   15386:	2800      	cmp	r0, #0
   15388:	dc01      	bgt.n	1538e <__aeabi_dcmpgt+0xe>
   1538a:	2000      	movs	r0, #0
   1538c:	bd10      	pop	{r4, pc}
   1538e:	2001      	movs	r0, #1
   15390:	bd10      	pop	{r4, pc}
   15392:	46c0      	nop			; (mov r8, r8)

00015394 <__aeabi_dcmpge>:
   15394:	b510      	push	{r4, lr}
   15396:	f001 fa5b 	bl	16850 <__gedf2>
   1539a:	2800      	cmp	r0, #0
   1539c:	da01      	bge.n	153a2 <__aeabi_dcmpge+0xe>
   1539e:	2000      	movs	r0, #0
   153a0:	bd10      	pop	{r4, pc}
   153a2:	2001      	movs	r0, #1
   153a4:	bd10      	pop	{r4, pc}
   153a6:	46c0      	nop			; (mov r8, r8)

000153a8 <__aeabi_uldivmod>:
   153a8:	2b00      	cmp	r3, #0
   153aa:	d111      	bne.n	153d0 <__aeabi_uldivmod+0x28>
   153ac:	2a00      	cmp	r2, #0
   153ae:	d10f      	bne.n	153d0 <__aeabi_uldivmod+0x28>
   153b0:	2900      	cmp	r1, #0
   153b2:	d100      	bne.n	153b6 <__aeabi_uldivmod+0xe>
   153b4:	2800      	cmp	r0, #0
   153b6:	d002      	beq.n	153be <__aeabi_uldivmod+0x16>
   153b8:	2100      	movs	r1, #0
   153ba:	43c9      	mvns	r1, r1
   153bc:	1c08      	adds	r0, r1, #0
   153be:	b407      	push	{r0, r1, r2}
   153c0:	4802      	ldr	r0, [pc, #8]	; (153cc <__aeabi_uldivmod+0x24>)
   153c2:	a102      	add	r1, pc, #8	; (adr r1, 153cc <__aeabi_uldivmod+0x24>)
   153c4:	1840      	adds	r0, r0, r1
   153c6:	9002      	str	r0, [sp, #8]
   153c8:	bd03      	pop	{r0, r1, pc}
   153ca:	46c0      	nop			; (mov r8, r8)
   153cc:	ffffff5d 	.word	0xffffff5d
   153d0:	b403      	push	{r0, r1}
   153d2:	4668      	mov	r0, sp
   153d4:	b501      	push	{r0, lr}
   153d6:	9802      	ldr	r0, [sp, #8]
   153d8:	f000 f84e 	bl	15478 <__udivmoddi4>
   153dc:	9b01      	ldr	r3, [sp, #4]
   153de:	469e      	mov	lr, r3
   153e0:	b002      	add	sp, #8
   153e2:	bc0c      	pop	{r2, r3}
   153e4:	4770      	bx	lr
   153e6:	46c0      	nop			; (mov r8, r8)

000153e8 <__aeabi_lmul>:
   153e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   153ea:	46ce      	mov	lr, r9
   153ec:	4647      	mov	r7, r8
   153ee:	0415      	lsls	r5, r2, #16
   153f0:	0c2d      	lsrs	r5, r5, #16
   153f2:	002e      	movs	r6, r5
   153f4:	b580      	push	{r7, lr}
   153f6:	0407      	lsls	r7, r0, #16
   153f8:	0c14      	lsrs	r4, r2, #16
   153fa:	0c3f      	lsrs	r7, r7, #16
   153fc:	4699      	mov	r9, r3
   153fe:	0c03      	lsrs	r3, r0, #16
   15400:	437e      	muls	r6, r7
   15402:	435d      	muls	r5, r3
   15404:	4367      	muls	r7, r4
   15406:	4363      	muls	r3, r4
   15408:	197f      	adds	r7, r7, r5
   1540a:	0c34      	lsrs	r4, r6, #16
   1540c:	19e4      	adds	r4, r4, r7
   1540e:	469c      	mov	ip, r3
   15410:	42a5      	cmp	r5, r4
   15412:	d903      	bls.n	1541c <__aeabi_lmul+0x34>
   15414:	2380      	movs	r3, #128	; 0x80
   15416:	025b      	lsls	r3, r3, #9
   15418:	4698      	mov	r8, r3
   1541a:	44c4      	add	ip, r8
   1541c:	464b      	mov	r3, r9
   1541e:	4351      	muls	r1, r2
   15420:	4343      	muls	r3, r0
   15422:	0436      	lsls	r6, r6, #16
   15424:	0c36      	lsrs	r6, r6, #16
   15426:	0c25      	lsrs	r5, r4, #16
   15428:	0424      	lsls	r4, r4, #16
   1542a:	4465      	add	r5, ip
   1542c:	19a4      	adds	r4, r4, r6
   1542e:	1859      	adds	r1, r3, r1
   15430:	1949      	adds	r1, r1, r5
   15432:	0020      	movs	r0, r4
   15434:	bc0c      	pop	{r2, r3}
   15436:	4690      	mov	r8, r2
   15438:	4699      	mov	r9, r3
   1543a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001543c <__aeabi_d2uiz>:
   1543c:	b570      	push	{r4, r5, r6, lr}
   1543e:	2200      	movs	r2, #0
   15440:	4b0c      	ldr	r3, [pc, #48]	; (15474 <__aeabi_d2uiz+0x38>)
   15442:	0004      	movs	r4, r0
   15444:	000d      	movs	r5, r1
   15446:	f7ff ffa5 	bl	15394 <__aeabi_dcmpge>
   1544a:	2800      	cmp	r0, #0
   1544c:	d104      	bne.n	15458 <__aeabi_d2uiz+0x1c>
   1544e:	0020      	movs	r0, r4
   15450:	0029      	movs	r1, r5
   15452:	f002 f879 	bl	17548 <__aeabi_d2iz>
   15456:	bd70      	pop	{r4, r5, r6, pc}
   15458:	4b06      	ldr	r3, [pc, #24]	; (15474 <__aeabi_d2uiz+0x38>)
   1545a:	2200      	movs	r2, #0
   1545c:	0020      	movs	r0, r4
   1545e:	0029      	movs	r1, r5
   15460:	f001 fd3c 	bl	16edc <__aeabi_dsub>
   15464:	f002 f870 	bl	17548 <__aeabi_d2iz>
   15468:	2380      	movs	r3, #128	; 0x80
   1546a:	061b      	lsls	r3, r3, #24
   1546c:	469c      	mov	ip, r3
   1546e:	4460      	add	r0, ip
   15470:	e7f1      	b.n	15456 <__aeabi_d2uiz+0x1a>
   15472:	46c0      	nop			; (mov r8, r8)
   15474:	41e00000 	.word	0x41e00000

00015478 <__udivmoddi4>:
   15478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1547a:	4657      	mov	r7, sl
   1547c:	464e      	mov	r6, r9
   1547e:	4645      	mov	r5, r8
   15480:	46de      	mov	lr, fp
   15482:	b5e0      	push	{r5, r6, r7, lr}
   15484:	0004      	movs	r4, r0
   15486:	b083      	sub	sp, #12
   15488:	000d      	movs	r5, r1
   1548a:	4692      	mov	sl, r2
   1548c:	4699      	mov	r9, r3
   1548e:	428b      	cmp	r3, r1
   15490:	d82f      	bhi.n	154f2 <__udivmoddi4+0x7a>
   15492:	d02c      	beq.n	154ee <__udivmoddi4+0x76>
   15494:	4649      	mov	r1, r9
   15496:	4650      	mov	r0, sl
   15498:	f002 f974 	bl	17784 <__clzdi2>
   1549c:	0029      	movs	r1, r5
   1549e:	0006      	movs	r6, r0
   154a0:	0020      	movs	r0, r4
   154a2:	f002 f96f 	bl	17784 <__clzdi2>
   154a6:	1a33      	subs	r3, r6, r0
   154a8:	4698      	mov	r8, r3
   154aa:	3b20      	subs	r3, #32
   154ac:	469b      	mov	fp, r3
   154ae:	d500      	bpl.n	154b2 <__udivmoddi4+0x3a>
   154b0:	e074      	b.n	1559c <__udivmoddi4+0x124>
   154b2:	4653      	mov	r3, sl
   154b4:	465a      	mov	r2, fp
   154b6:	4093      	lsls	r3, r2
   154b8:	001f      	movs	r7, r3
   154ba:	4653      	mov	r3, sl
   154bc:	4642      	mov	r2, r8
   154be:	4093      	lsls	r3, r2
   154c0:	001e      	movs	r6, r3
   154c2:	42af      	cmp	r7, r5
   154c4:	d829      	bhi.n	1551a <__udivmoddi4+0xa2>
   154c6:	d026      	beq.n	15516 <__udivmoddi4+0x9e>
   154c8:	465b      	mov	r3, fp
   154ca:	1ba4      	subs	r4, r4, r6
   154cc:	41bd      	sbcs	r5, r7
   154ce:	2b00      	cmp	r3, #0
   154d0:	da00      	bge.n	154d4 <__udivmoddi4+0x5c>
   154d2:	e079      	b.n	155c8 <__udivmoddi4+0x150>
   154d4:	2200      	movs	r2, #0
   154d6:	2300      	movs	r3, #0
   154d8:	9200      	str	r2, [sp, #0]
   154da:	9301      	str	r3, [sp, #4]
   154dc:	2301      	movs	r3, #1
   154de:	465a      	mov	r2, fp
   154e0:	4093      	lsls	r3, r2
   154e2:	9301      	str	r3, [sp, #4]
   154e4:	2301      	movs	r3, #1
   154e6:	4642      	mov	r2, r8
   154e8:	4093      	lsls	r3, r2
   154ea:	9300      	str	r3, [sp, #0]
   154ec:	e019      	b.n	15522 <__udivmoddi4+0xaa>
   154ee:	4282      	cmp	r2, r0
   154f0:	d9d0      	bls.n	15494 <__udivmoddi4+0x1c>
   154f2:	2200      	movs	r2, #0
   154f4:	2300      	movs	r3, #0
   154f6:	9200      	str	r2, [sp, #0]
   154f8:	9301      	str	r3, [sp, #4]
   154fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154fc:	2b00      	cmp	r3, #0
   154fe:	d001      	beq.n	15504 <__udivmoddi4+0x8c>
   15500:	601c      	str	r4, [r3, #0]
   15502:	605d      	str	r5, [r3, #4]
   15504:	9800      	ldr	r0, [sp, #0]
   15506:	9901      	ldr	r1, [sp, #4]
   15508:	b003      	add	sp, #12
   1550a:	bc3c      	pop	{r2, r3, r4, r5}
   1550c:	4690      	mov	r8, r2
   1550e:	4699      	mov	r9, r3
   15510:	46a2      	mov	sl, r4
   15512:	46ab      	mov	fp, r5
   15514:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15516:	42a3      	cmp	r3, r4
   15518:	d9d6      	bls.n	154c8 <__udivmoddi4+0x50>
   1551a:	2200      	movs	r2, #0
   1551c:	2300      	movs	r3, #0
   1551e:	9200      	str	r2, [sp, #0]
   15520:	9301      	str	r3, [sp, #4]
   15522:	4643      	mov	r3, r8
   15524:	2b00      	cmp	r3, #0
   15526:	d0e8      	beq.n	154fa <__udivmoddi4+0x82>
   15528:	07fb      	lsls	r3, r7, #31
   1552a:	0872      	lsrs	r2, r6, #1
   1552c:	431a      	orrs	r2, r3
   1552e:	4646      	mov	r6, r8
   15530:	087b      	lsrs	r3, r7, #1
   15532:	e00e      	b.n	15552 <__udivmoddi4+0xda>
   15534:	42ab      	cmp	r3, r5
   15536:	d101      	bne.n	1553c <__udivmoddi4+0xc4>
   15538:	42a2      	cmp	r2, r4
   1553a:	d80c      	bhi.n	15556 <__udivmoddi4+0xde>
   1553c:	1aa4      	subs	r4, r4, r2
   1553e:	419d      	sbcs	r5, r3
   15540:	2001      	movs	r0, #1
   15542:	1924      	adds	r4, r4, r4
   15544:	416d      	adcs	r5, r5
   15546:	2100      	movs	r1, #0
   15548:	3e01      	subs	r6, #1
   1554a:	1824      	adds	r4, r4, r0
   1554c:	414d      	adcs	r5, r1
   1554e:	2e00      	cmp	r6, #0
   15550:	d006      	beq.n	15560 <__udivmoddi4+0xe8>
   15552:	42ab      	cmp	r3, r5
   15554:	d9ee      	bls.n	15534 <__udivmoddi4+0xbc>
   15556:	3e01      	subs	r6, #1
   15558:	1924      	adds	r4, r4, r4
   1555a:	416d      	adcs	r5, r5
   1555c:	2e00      	cmp	r6, #0
   1555e:	d1f8      	bne.n	15552 <__udivmoddi4+0xda>
   15560:	465b      	mov	r3, fp
   15562:	9800      	ldr	r0, [sp, #0]
   15564:	9901      	ldr	r1, [sp, #4]
   15566:	1900      	adds	r0, r0, r4
   15568:	4169      	adcs	r1, r5
   1556a:	2b00      	cmp	r3, #0
   1556c:	db22      	blt.n	155b4 <__udivmoddi4+0x13c>
   1556e:	002b      	movs	r3, r5
   15570:	465a      	mov	r2, fp
   15572:	40d3      	lsrs	r3, r2
   15574:	002a      	movs	r2, r5
   15576:	4644      	mov	r4, r8
   15578:	40e2      	lsrs	r2, r4
   1557a:	001c      	movs	r4, r3
   1557c:	465b      	mov	r3, fp
   1557e:	0015      	movs	r5, r2
   15580:	2b00      	cmp	r3, #0
   15582:	db2c      	blt.n	155de <__udivmoddi4+0x166>
   15584:	0026      	movs	r6, r4
   15586:	409e      	lsls	r6, r3
   15588:	0033      	movs	r3, r6
   1558a:	0026      	movs	r6, r4
   1558c:	4647      	mov	r7, r8
   1558e:	40be      	lsls	r6, r7
   15590:	0032      	movs	r2, r6
   15592:	1a80      	subs	r0, r0, r2
   15594:	4199      	sbcs	r1, r3
   15596:	9000      	str	r0, [sp, #0]
   15598:	9101      	str	r1, [sp, #4]
   1559a:	e7ae      	b.n	154fa <__udivmoddi4+0x82>
   1559c:	4642      	mov	r2, r8
   1559e:	2320      	movs	r3, #32
   155a0:	1a9b      	subs	r3, r3, r2
   155a2:	4652      	mov	r2, sl
   155a4:	40da      	lsrs	r2, r3
   155a6:	4641      	mov	r1, r8
   155a8:	0013      	movs	r3, r2
   155aa:	464a      	mov	r2, r9
   155ac:	408a      	lsls	r2, r1
   155ae:	0017      	movs	r7, r2
   155b0:	431f      	orrs	r7, r3
   155b2:	e782      	b.n	154ba <__udivmoddi4+0x42>
   155b4:	4642      	mov	r2, r8
   155b6:	2320      	movs	r3, #32
   155b8:	1a9b      	subs	r3, r3, r2
   155ba:	002a      	movs	r2, r5
   155bc:	4646      	mov	r6, r8
   155be:	409a      	lsls	r2, r3
   155c0:	0023      	movs	r3, r4
   155c2:	40f3      	lsrs	r3, r6
   155c4:	4313      	orrs	r3, r2
   155c6:	e7d5      	b.n	15574 <__udivmoddi4+0xfc>
   155c8:	4642      	mov	r2, r8
   155ca:	2320      	movs	r3, #32
   155cc:	2100      	movs	r1, #0
   155ce:	1a9b      	subs	r3, r3, r2
   155d0:	2200      	movs	r2, #0
   155d2:	9100      	str	r1, [sp, #0]
   155d4:	9201      	str	r2, [sp, #4]
   155d6:	2201      	movs	r2, #1
   155d8:	40da      	lsrs	r2, r3
   155da:	9201      	str	r2, [sp, #4]
   155dc:	e782      	b.n	154e4 <__udivmoddi4+0x6c>
   155de:	4642      	mov	r2, r8
   155e0:	2320      	movs	r3, #32
   155e2:	0026      	movs	r6, r4
   155e4:	1a9b      	subs	r3, r3, r2
   155e6:	40de      	lsrs	r6, r3
   155e8:	002f      	movs	r7, r5
   155ea:	46b4      	mov	ip, r6
   155ec:	4097      	lsls	r7, r2
   155ee:	4666      	mov	r6, ip
   155f0:	003b      	movs	r3, r7
   155f2:	4333      	orrs	r3, r6
   155f4:	e7c9      	b.n	1558a <__udivmoddi4+0x112>
   155f6:	46c0      	nop			; (mov r8, r8)

000155f8 <__aeabi_fdiv>:
   155f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   155fa:	4657      	mov	r7, sl
   155fc:	464e      	mov	r6, r9
   155fe:	46de      	mov	lr, fp
   15600:	4645      	mov	r5, r8
   15602:	b5e0      	push	{r5, r6, r7, lr}
   15604:	0244      	lsls	r4, r0, #9
   15606:	0043      	lsls	r3, r0, #1
   15608:	0fc6      	lsrs	r6, r0, #31
   1560a:	b083      	sub	sp, #12
   1560c:	1c0f      	adds	r7, r1, #0
   1560e:	0a64      	lsrs	r4, r4, #9
   15610:	0e1b      	lsrs	r3, r3, #24
   15612:	46b2      	mov	sl, r6
   15614:	d053      	beq.n	156be <__aeabi_fdiv+0xc6>
   15616:	2bff      	cmp	r3, #255	; 0xff
   15618:	d027      	beq.n	1566a <__aeabi_fdiv+0x72>
   1561a:	2280      	movs	r2, #128	; 0x80
   1561c:	00e4      	lsls	r4, r4, #3
   1561e:	04d2      	lsls	r2, r2, #19
   15620:	4314      	orrs	r4, r2
   15622:	227f      	movs	r2, #127	; 0x7f
   15624:	4252      	negs	r2, r2
   15626:	4690      	mov	r8, r2
   15628:	4498      	add	r8, r3
   1562a:	2300      	movs	r3, #0
   1562c:	4699      	mov	r9, r3
   1562e:	469b      	mov	fp, r3
   15630:	027d      	lsls	r5, r7, #9
   15632:	0078      	lsls	r0, r7, #1
   15634:	0ffb      	lsrs	r3, r7, #31
   15636:	0a6d      	lsrs	r5, r5, #9
   15638:	0e00      	lsrs	r0, r0, #24
   1563a:	9300      	str	r3, [sp, #0]
   1563c:	d024      	beq.n	15688 <__aeabi_fdiv+0x90>
   1563e:	28ff      	cmp	r0, #255	; 0xff
   15640:	d046      	beq.n	156d0 <__aeabi_fdiv+0xd8>
   15642:	2380      	movs	r3, #128	; 0x80
   15644:	2100      	movs	r1, #0
   15646:	00ed      	lsls	r5, r5, #3
   15648:	04db      	lsls	r3, r3, #19
   1564a:	431d      	orrs	r5, r3
   1564c:	387f      	subs	r0, #127	; 0x7f
   1564e:	4647      	mov	r7, r8
   15650:	1a38      	subs	r0, r7, r0
   15652:	464f      	mov	r7, r9
   15654:	430f      	orrs	r7, r1
   15656:	00bf      	lsls	r7, r7, #2
   15658:	46b9      	mov	r9, r7
   1565a:	0033      	movs	r3, r6
   1565c:	9a00      	ldr	r2, [sp, #0]
   1565e:	4f87      	ldr	r7, [pc, #540]	; (1587c <__aeabi_fdiv+0x284>)
   15660:	4053      	eors	r3, r2
   15662:	464a      	mov	r2, r9
   15664:	58ba      	ldr	r2, [r7, r2]
   15666:	9301      	str	r3, [sp, #4]
   15668:	4697      	mov	pc, r2
   1566a:	2c00      	cmp	r4, #0
   1566c:	d14e      	bne.n	1570c <__aeabi_fdiv+0x114>
   1566e:	2308      	movs	r3, #8
   15670:	4699      	mov	r9, r3
   15672:	33f7      	adds	r3, #247	; 0xf7
   15674:	4698      	mov	r8, r3
   15676:	3bfd      	subs	r3, #253	; 0xfd
   15678:	469b      	mov	fp, r3
   1567a:	027d      	lsls	r5, r7, #9
   1567c:	0078      	lsls	r0, r7, #1
   1567e:	0ffb      	lsrs	r3, r7, #31
   15680:	0a6d      	lsrs	r5, r5, #9
   15682:	0e00      	lsrs	r0, r0, #24
   15684:	9300      	str	r3, [sp, #0]
   15686:	d1da      	bne.n	1563e <__aeabi_fdiv+0x46>
   15688:	2d00      	cmp	r5, #0
   1568a:	d126      	bne.n	156da <__aeabi_fdiv+0xe2>
   1568c:	2000      	movs	r0, #0
   1568e:	2101      	movs	r1, #1
   15690:	0033      	movs	r3, r6
   15692:	9a00      	ldr	r2, [sp, #0]
   15694:	4f7a      	ldr	r7, [pc, #488]	; (15880 <__aeabi_fdiv+0x288>)
   15696:	4053      	eors	r3, r2
   15698:	4642      	mov	r2, r8
   1569a:	1a10      	subs	r0, r2, r0
   1569c:	464a      	mov	r2, r9
   1569e:	430a      	orrs	r2, r1
   156a0:	0092      	lsls	r2, r2, #2
   156a2:	58ba      	ldr	r2, [r7, r2]
   156a4:	001d      	movs	r5, r3
   156a6:	4697      	mov	pc, r2
   156a8:	9b00      	ldr	r3, [sp, #0]
   156aa:	002c      	movs	r4, r5
   156ac:	469a      	mov	sl, r3
   156ae:	468b      	mov	fp, r1
   156b0:	465b      	mov	r3, fp
   156b2:	2b02      	cmp	r3, #2
   156b4:	d131      	bne.n	1571a <__aeabi_fdiv+0x122>
   156b6:	4653      	mov	r3, sl
   156b8:	21ff      	movs	r1, #255	; 0xff
   156ba:	2400      	movs	r4, #0
   156bc:	e038      	b.n	15730 <__aeabi_fdiv+0x138>
   156be:	2c00      	cmp	r4, #0
   156c0:	d117      	bne.n	156f2 <__aeabi_fdiv+0xfa>
   156c2:	2304      	movs	r3, #4
   156c4:	4699      	mov	r9, r3
   156c6:	2300      	movs	r3, #0
   156c8:	4698      	mov	r8, r3
   156ca:	3301      	adds	r3, #1
   156cc:	469b      	mov	fp, r3
   156ce:	e7af      	b.n	15630 <__aeabi_fdiv+0x38>
   156d0:	20ff      	movs	r0, #255	; 0xff
   156d2:	2d00      	cmp	r5, #0
   156d4:	d10b      	bne.n	156ee <__aeabi_fdiv+0xf6>
   156d6:	2102      	movs	r1, #2
   156d8:	e7da      	b.n	15690 <__aeabi_fdiv+0x98>
   156da:	0028      	movs	r0, r5
   156dc:	f002 f834 	bl	17748 <__clzsi2>
   156e0:	1f43      	subs	r3, r0, #5
   156e2:	409d      	lsls	r5, r3
   156e4:	2376      	movs	r3, #118	; 0x76
   156e6:	425b      	negs	r3, r3
   156e8:	1a18      	subs	r0, r3, r0
   156ea:	2100      	movs	r1, #0
   156ec:	e7af      	b.n	1564e <__aeabi_fdiv+0x56>
   156ee:	2103      	movs	r1, #3
   156f0:	e7ad      	b.n	1564e <__aeabi_fdiv+0x56>
   156f2:	0020      	movs	r0, r4
   156f4:	f002 f828 	bl	17748 <__clzsi2>
   156f8:	1f43      	subs	r3, r0, #5
   156fa:	409c      	lsls	r4, r3
   156fc:	2376      	movs	r3, #118	; 0x76
   156fe:	425b      	negs	r3, r3
   15700:	1a1b      	subs	r3, r3, r0
   15702:	4698      	mov	r8, r3
   15704:	2300      	movs	r3, #0
   15706:	4699      	mov	r9, r3
   15708:	469b      	mov	fp, r3
   1570a:	e791      	b.n	15630 <__aeabi_fdiv+0x38>
   1570c:	230c      	movs	r3, #12
   1570e:	4699      	mov	r9, r3
   15710:	33f3      	adds	r3, #243	; 0xf3
   15712:	4698      	mov	r8, r3
   15714:	3bfc      	subs	r3, #252	; 0xfc
   15716:	469b      	mov	fp, r3
   15718:	e78a      	b.n	15630 <__aeabi_fdiv+0x38>
   1571a:	2b03      	cmp	r3, #3
   1571c:	d100      	bne.n	15720 <__aeabi_fdiv+0x128>
   1571e:	e0a5      	b.n	1586c <__aeabi_fdiv+0x274>
   15720:	4655      	mov	r5, sl
   15722:	2b01      	cmp	r3, #1
   15724:	d000      	beq.n	15728 <__aeabi_fdiv+0x130>
   15726:	e081      	b.n	1582c <__aeabi_fdiv+0x234>
   15728:	2301      	movs	r3, #1
   1572a:	2100      	movs	r1, #0
   1572c:	2400      	movs	r4, #0
   1572e:	402b      	ands	r3, r5
   15730:	0264      	lsls	r4, r4, #9
   15732:	05c9      	lsls	r1, r1, #23
   15734:	0a60      	lsrs	r0, r4, #9
   15736:	07db      	lsls	r3, r3, #31
   15738:	4308      	orrs	r0, r1
   1573a:	4318      	orrs	r0, r3
   1573c:	b003      	add	sp, #12
   1573e:	bc3c      	pop	{r2, r3, r4, r5}
   15740:	4690      	mov	r8, r2
   15742:	4699      	mov	r9, r3
   15744:	46a2      	mov	sl, r4
   15746:	46ab      	mov	fp, r5
   15748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1574a:	2480      	movs	r4, #128	; 0x80
   1574c:	2300      	movs	r3, #0
   1574e:	03e4      	lsls	r4, r4, #15
   15750:	21ff      	movs	r1, #255	; 0xff
   15752:	e7ed      	b.n	15730 <__aeabi_fdiv+0x138>
   15754:	21ff      	movs	r1, #255	; 0xff
   15756:	2400      	movs	r4, #0
   15758:	e7ea      	b.n	15730 <__aeabi_fdiv+0x138>
   1575a:	2301      	movs	r3, #1
   1575c:	1a59      	subs	r1, r3, r1
   1575e:	291b      	cmp	r1, #27
   15760:	dd66      	ble.n	15830 <__aeabi_fdiv+0x238>
   15762:	9a01      	ldr	r2, [sp, #4]
   15764:	4013      	ands	r3, r2
   15766:	2100      	movs	r1, #0
   15768:	2400      	movs	r4, #0
   1576a:	e7e1      	b.n	15730 <__aeabi_fdiv+0x138>
   1576c:	2380      	movs	r3, #128	; 0x80
   1576e:	03db      	lsls	r3, r3, #15
   15770:	421c      	tst	r4, r3
   15772:	d038      	beq.n	157e6 <__aeabi_fdiv+0x1ee>
   15774:	421d      	tst	r5, r3
   15776:	d051      	beq.n	1581c <__aeabi_fdiv+0x224>
   15778:	431c      	orrs	r4, r3
   1577a:	0264      	lsls	r4, r4, #9
   1577c:	0a64      	lsrs	r4, r4, #9
   1577e:	0033      	movs	r3, r6
   15780:	21ff      	movs	r1, #255	; 0xff
   15782:	e7d5      	b.n	15730 <__aeabi_fdiv+0x138>
   15784:	0163      	lsls	r3, r4, #5
   15786:	016c      	lsls	r4, r5, #5
   15788:	42a3      	cmp	r3, r4
   1578a:	d23b      	bcs.n	15804 <__aeabi_fdiv+0x20c>
   1578c:	261b      	movs	r6, #27
   1578e:	2100      	movs	r1, #0
   15790:	3801      	subs	r0, #1
   15792:	2501      	movs	r5, #1
   15794:	001f      	movs	r7, r3
   15796:	0049      	lsls	r1, r1, #1
   15798:	005b      	lsls	r3, r3, #1
   1579a:	2f00      	cmp	r7, #0
   1579c:	db01      	blt.n	157a2 <__aeabi_fdiv+0x1aa>
   1579e:	429c      	cmp	r4, r3
   157a0:	d801      	bhi.n	157a6 <__aeabi_fdiv+0x1ae>
   157a2:	1b1b      	subs	r3, r3, r4
   157a4:	4329      	orrs	r1, r5
   157a6:	3e01      	subs	r6, #1
   157a8:	2e00      	cmp	r6, #0
   157aa:	d1f3      	bne.n	15794 <__aeabi_fdiv+0x19c>
   157ac:	001c      	movs	r4, r3
   157ae:	1e63      	subs	r3, r4, #1
   157b0:	419c      	sbcs	r4, r3
   157b2:	430c      	orrs	r4, r1
   157b4:	0001      	movs	r1, r0
   157b6:	317f      	adds	r1, #127	; 0x7f
   157b8:	2900      	cmp	r1, #0
   157ba:	ddce      	ble.n	1575a <__aeabi_fdiv+0x162>
   157bc:	0763      	lsls	r3, r4, #29
   157be:	d004      	beq.n	157ca <__aeabi_fdiv+0x1d2>
   157c0:	230f      	movs	r3, #15
   157c2:	4023      	ands	r3, r4
   157c4:	2b04      	cmp	r3, #4
   157c6:	d000      	beq.n	157ca <__aeabi_fdiv+0x1d2>
   157c8:	3404      	adds	r4, #4
   157ca:	0123      	lsls	r3, r4, #4
   157cc:	d503      	bpl.n	157d6 <__aeabi_fdiv+0x1de>
   157ce:	0001      	movs	r1, r0
   157d0:	4b2c      	ldr	r3, [pc, #176]	; (15884 <__aeabi_fdiv+0x28c>)
   157d2:	3180      	adds	r1, #128	; 0x80
   157d4:	401c      	ands	r4, r3
   157d6:	29fe      	cmp	r1, #254	; 0xfe
   157d8:	dd0d      	ble.n	157f6 <__aeabi_fdiv+0x1fe>
   157da:	2301      	movs	r3, #1
   157dc:	9a01      	ldr	r2, [sp, #4]
   157de:	21ff      	movs	r1, #255	; 0xff
   157e0:	4013      	ands	r3, r2
   157e2:	2400      	movs	r4, #0
   157e4:	e7a4      	b.n	15730 <__aeabi_fdiv+0x138>
   157e6:	2380      	movs	r3, #128	; 0x80
   157e8:	03db      	lsls	r3, r3, #15
   157ea:	431c      	orrs	r4, r3
   157ec:	0264      	lsls	r4, r4, #9
   157ee:	0a64      	lsrs	r4, r4, #9
   157f0:	0033      	movs	r3, r6
   157f2:	21ff      	movs	r1, #255	; 0xff
   157f4:	e79c      	b.n	15730 <__aeabi_fdiv+0x138>
   157f6:	2301      	movs	r3, #1
   157f8:	9a01      	ldr	r2, [sp, #4]
   157fa:	01a4      	lsls	r4, r4, #6
   157fc:	0a64      	lsrs	r4, r4, #9
   157fe:	b2c9      	uxtb	r1, r1
   15800:	4013      	ands	r3, r2
   15802:	e795      	b.n	15730 <__aeabi_fdiv+0x138>
   15804:	1b1b      	subs	r3, r3, r4
   15806:	261a      	movs	r6, #26
   15808:	2101      	movs	r1, #1
   1580a:	e7c2      	b.n	15792 <__aeabi_fdiv+0x19a>
   1580c:	9b00      	ldr	r3, [sp, #0]
   1580e:	468b      	mov	fp, r1
   15810:	469a      	mov	sl, r3
   15812:	2400      	movs	r4, #0
   15814:	e74c      	b.n	156b0 <__aeabi_fdiv+0xb8>
   15816:	0263      	lsls	r3, r4, #9
   15818:	d5e5      	bpl.n	157e6 <__aeabi_fdiv+0x1ee>
   1581a:	2500      	movs	r5, #0
   1581c:	2480      	movs	r4, #128	; 0x80
   1581e:	03e4      	lsls	r4, r4, #15
   15820:	432c      	orrs	r4, r5
   15822:	0264      	lsls	r4, r4, #9
   15824:	0a64      	lsrs	r4, r4, #9
   15826:	9b00      	ldr	r3, [sp, #0]
   15828:	21ff      	movs	r1, #255	; 0xff
   1582a:	e781      	b.n	15730 <__aeabi_fdiv+0x138>
   1582c:	9501      	str	r5, [sp, #4]
   1582e:	e7c1      	b.n	157b4 <__aeabi_fdiv+0x1bc>
   15830:	0023      	movs	r3, r4
   15832:	2020      	movs	r0, #32
   15834:	40cb      	lsrs	r3, r1
   15836:	1a41      	subs	r1, r0, r1
   15838:	408c      	lsls	r4, r1
   1583a:	1e61      	subs	r1, r4, #1
   1583c:	418c      	sbcs	r4, r1
   1583e:	431c      	orrs	r4, r3
   15840:	0763      	lsls	r3, r4, #29
   15842:	d004      	beq.n	1584e <__aeabi_fdiv+0x256>
   15844:	230f      	movs	r3, #15
   15846:	4023      	ands	r3, r4
   15848:	2b04      	cmp	r3, #4
   1584a:	d000      	beq.n	1584e <__aeabi_fdiv+0x256>
   1584c:	3404      	adds	r4, #4
   1584e:	0163      	lsls	r3, r4, #5
   15850:	d505      	bpl.n	1585e <__aeabi_fdiv+0x266>
   15852:	2301      	movs	r3, #1
   15854:	9a01      	ldr	r2, [sp, #4]
   15856:	2101      	movs	r1, #1
   15858:	4013      	ands	r3, r2
   1585a:	2400      	movs	r4, #0
   1585c:	e768      	b.n	15730 <__aeabi_fdiv+0x138>
   1585e:	2301      	movs	r3, #1
   15860:	9a01      	ldr	r2, [sp, #4]
   15862:	01a4      	lsls	r4, r4, #6
   15864:	0a64      	lsrs	r4, r4, #9
   15866:	4013      	ands	r3, r2
   15868:	2100      	movs	r1, #0
   1586a:	e761      	b.n	15730 <__aeabi_fdiv+0x138>
   1586c:	2380      	movs	r3, #128	; 0x80
   1586e:	03db      	lsls	r3, r3, #15
   15870:	431c      	orrs	r4, r3
   15872:	0264      	lsls	r4, r4, #9
   15874:	0a64      	lsrs	r4, r4, #9
   15876:	4653      	mov	r3, sl
   15878:	21ff      	movs	r1, #255	; 0xff
   1587a:	e759      	b.n	15730 <__aeabi_fdiv+0x138>
   1587c:	00019648 	.word	0x00019648
   15880:	00019688 	.word	0x00019688
   15884:	f7ffffff 	.word	0xf7ffffff

00015888 <__aeabi_fmul>:
   15888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1588a:	4657      	mov	r7, sl
   1588c:	464e      	mov	r6, r9
   1588e:	4645      	mov	r5, r8
   15890:	46de      	mov	lr, fp
   15892:	b5e0      	push	{r5, r6, r7, lr}
   15894:	0247      	lsls	r7, r0, #9
   15896:	0046      	lsls	r6, r0, #1
   15898:	4688      	mov	r8, r1
   1589a:	0a7f      	lsrs	r7, r7, #9
   1589c:	0e36      	lsrs	r6, r6, #24
   1589e:	0fc4      	lsrs	r4, r0, #31
   158a0:	2e00      	cmp	r6, #0
   158a2:	d047      	beq.n	15934 <__aeabi_fmul+0xac>
   158a4:	2eff      	cmp	r6, #255	; 0xff
   158a6:	d024      	beq.n	158f2 <__aeabi_fmul+0x6a>
   158a8:	00fb      	lsls	r3, r7, #3
   158aa:	2780      	movs	r7, #128	; 0x80
   158ac:	04ff      	lsls	r7, r7, #19
   158ae:	431f      	orrs	r7, r3
   158b0:	2300      	movs	r3, #0
   158b2:	4699      	mov	r9, r3
   158b4:	469a      	mov	sl, r3
   158b6:	3e7f      	subs	r6, #127	; 0x7f
   158b8:	4643      	mov	r3, r8
   158ba:	025d      	lsls	r5, r3, #9
   158bc:	0058      	lsls	r0, r3, #1
   158be:	0fdb      	lsrs	r3, r3, #31
   158c0:	0a6d      	lsrs	r5, r5, #9
   158c2:	0e00      	lsrs	r0, r0, #24
   158c4:	4698      	mov	r8, r3
   158c6:	d043      	beq.n	15950 <__aeabi_fmul+0xc8>
   158c8:	28ff      	cmp	r0, #255	; 0xff
   158ca:	d03b      	beq.n	15944 <__aeabi_fmul+0xbc>
   158cc:	00eb      	lsls	r3, r5, #3
   158ce:	2580      	movs	r5, #128	; 0x80
   158d0:	2200      	movs	r2, #0
   158d2:	04ed      	lsls	r5, r5, #19
   158d4:	431d      	orrs	r5, r3
   158d6:	387f      	subs	r0, #127	; 0x7f
   158d8:	1836      	adds	r6, r6, r0
   158da:	1c73      	adds	r3, r6, #1
   158dc:	4641      	mov	r1, r8
   158de:	469b      	mov	fp, r3
   158e0:	464b      	mov	r3, r9
   158e2:	4061      	eors	r1, r4
   158e4:	4313      	orrs	r3, r2
   158e6:	2b0f      	cmp	r3, #15
   158e8:	d864      	bhi.n	159b4 <__aeabi_fmul+0x12c>
   158ea:	4875      	ldr	r0, [pc, #468]	; (15ac0 <__aeabi_fmul+0x238>)
   158ec:	009b      	lsls	r3, r3, #2
   158ee:	58c3      	ldr	r3, [r0, r3]
   158f0:	469f      	mov	pc, r3
   158f2:	2f00      	cmp	r7, #0
   158f4:	d142      	bne.n	1597c <__aeabi_fmul+0xf4>
   158f6:	2308      	movs	r3, #8
   158f8:	4699      	mov	r9, r3
   158fa:	3b06      	subs	r3, #6
   158fc:	26ff      	movs	r6, #255	; 0xff
   158fe:	469a      	mov	sl, r3
   15900:	e7da      	b.n	158b8 <__aeabi_fmul+0x30>
   15902:	4641      	mov	r1, r8
   15904:	2a02      	cmp	r2, #2
   15906:	d028      	beq.n	1595a <__aeabi_fmul+0xd2>
   15908:	2a03      	cmp	r2, #3
   1590a:	d100      	bne.n	1590e <__aeabi_fmul+0x86>
   1590c:	e0ce      	b.n	15aac <__aeabi_fmul+0x224>
   1590e:	2a01      	cmp	r2, #1
   15910:	d000      	beq.n	15914 <__aeabi_fmul+0x8c>
   15912:	e0ac      	b.n	15a6e <__aeabi_fmul+0x1e6>
   15914:	4011      	ands	r1, r2
   15916:	2000      	movs	r0, #0
   15918:	2200      	movs	r2, #0
   1591a:	b2cc      	uxtb	r4, r1
   1591c:	0240      	lsls	r0, r0, #9
   1591e:	05d2      	lsls	r2, r2, #23
   15920:	0a40      	lsrs	r0, r0, #9
   15922:	07e4      	lsls	r4, r4, #31
   15924:	4310      	orrs	r0, r2
   15926:	4320      	orrs	r0, r4
   15928:	bc3c      	pop	{r2, r3, r4, r5}
   1592a:	4690      	mov	r8, r2
   1592c:	4699      	mov	r9, r3
   1592e:	46a2      	mov	sl, r4
   15930:	46ab      	mov	fp, r5
   15932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15934:	2f00      	cmp	r7, #0
   15936:	d115      	bne.n	15964 <__aeabi_fmul+0xdc>
   15938:	2304      	movs	r3, #4
   1593a:	4699      	mov	r9, r3
   1593c:	3b03      	subs	r3, #3
   1593e:	2600      	movs	r6, #0
   15940:	469a      	mov	sl, r3
   15942:	e7b9      	b.n	158b8 <__aeabi_fmul+0x30>
   15944:	20ff      	movs	r0, #255	; 0xff
   15946:	2202      	movs	r2, #2
   15948:	2d00      	cmp	r5, #0
   1594a:	d0c5      	beq.n	158d8 <__aeabi_fmul+0x50>
   1594c:	2203      	movs	r2, #3
   1594e:	e7c3      	b.n	158d8 <__aeabi_fmul+0x50>
   15950:	2d00      	cmp	r5, #0
   15952:	d119      	bne.n	15988 <__aeabi_fmul+0x100>
   15954:	2000      	movs	r0, #0
   15956:	2201      	movs	r2, #1
   15958:	e7be      	b.n	158d8 <__aeabi_fmul+0x50>
   1595a:	2401      	movs	r4, #1
   1595c:	22ff      	movs	r2, #255	; 0xff
   1595e:	400c      	ands	r4, r1
   15960:	2000      	movs	r0, #0
   15962:	e7db      	b.n	1591c <__aeabi_fmul+0x94>
   15964:	0038      	movs	r0, r7
   15966:	f001 feef 	bl	17748 <__clzsi2>
   1596a:	2676      	movs	r6, #118	; 0x76
   1596c:	1f43      	subs	r3, r0, #5
   1596e:	409f      	lsls	r7, r3
   15970:	2300      	movs	r3, #0
   15972:	4276      	negs	r6, r6
   15974:	1a36      	subs	r6, r6, r0
   15976:	4699      	mov	r9, r3
   15978:	469a      	mov	sl, r3
   1597a:	e79d      	b.n	158b8 <__aeabi_fmul+0x30>
   1597c:	230c      	movs	r3, #12
   1597e:	4699      	mov	r9, r3
   15980:	3b09      	subs	r3, #9
   15982:	26ff      	movs	r6, #255	; 0xff
   15984:	469a      	mov	sl, r3
   15986:	e797      	b.n	158b8 <__aeabi_fmul+0x30>
   15988:	0028      	movs	r0, r5
   1598a:	f001 fedd 	bl	17748 <__clzsi2>
   1598e:	1f43      	subs	r3, r0, #5
   15990:	409d      	lsls	r5, r3
   15992:	2376      	movs	r3, #118	; 0x76
   15994:	425b      	negs	r3, r3
   15996:	1a18      	subs	r0, r3, r0
   15998:	2200      	movs	r2, #0
   1599a:	e79d      	b.n	158d8 <__aeabi_fmul+0x50>
   1599c:	2080      	movs	r0, #128	; 0x80
   1599e:	2400      	movs	r4, #0
   159a0:	03c0      	lsls	r0, r0, #15
   159a2:	22ff      	movs	r2, #255	; 0xff
   159a4:	e7ba      	b.n	1591c <__aeabi_fmul+0x94>
   159a6:	003d      	movs	r5, r7
   159a8:	4652      	mov	r2, sl
   159aa:	e7ab      	b.n	15904 <__aeabi_fmul+0x7c>
   159ac:	003d      	movs	r5, r7
   159ae:	0021      	movs	r1, r4
   159b0:	4652      	mov	r2, sl
   159b2:	e7a7      	b.n	15904 <__aeabi_fmul+0x7c>
   159b4:	0c3b      	lsrs	r3, r7, #16
   159b6:	469c      	mov	ip, r3
   159b8:	042a      	lsls	r2, r5, #16
   159ba:	0c12      	lsrs	r2, r2, #16
   159bc:	0c2b      	lsrs	r3, r5, #16
   159be:	0014      	movs	r4, r2
   159c0:	4660      	mov	r0, ip
   159c2:	4665      	mov	r5, ip
   159c4:	043f      	lsls	r7, r7, #16
   159c6:	0c3f      	lsrs	r7, r7, #16
   159c8:	437c      	muls	r4, r7
   159ca:	4342      	muls	r2, r0
   159cc:	435d      	muls	r5, r3
   159ce:	437b      	muls	r3, r7
   159d0:	0c27      	lsrs	r7, r4, #16
   159d2:	189b      	adds	r3, r3, r2
   159d4:	18ff      	adds	r7, r7, r3
   159d6:	42ba      	cmp	r2, r7
   159d8:	d903      	bls.n	159e2 <__aeabi_fmul+0x15a>
   159da:	2380      	movs	r3, #128	; 0x80
   159dc:	025b      	lsls	r3, r3, #9
   159de:	469c      	mov	ip, r3
   159e0:	4465      	add	r5, ip
   159e2:	0424      	lsls	r4, r4, #16
   159e4:	043a      	lsls	r2, r7, #16
   159e6:	0c24      	lsrs	r4, r4, #16
   159e8:	1912      	adds	r2, r2, r4
   159ea:	0193      	lsls	r3, r2, #6
   159ec:	1e5c      	subs	r4, r3, #1
   159ee:	41a3      	sbcs	r3, r4
   159f0:	0c3f      	lsrs	r7, r7, #16
   159f2:	0e92      	lsrs	r2, r2, #26
   159f4:	197d      	adds	r5, r7, r5
   159f6:	431a      	orrs	r2, r3
   159f8:	01ad      	lsls	r5, r5, #6
   159fa:	4315      	orrs	r5, r2
   159fc:	012b      	lsls	r3, r5, #4
   159fe:	d504      	bpl.n	15a0a <__aeabi_fmul+0x182>
   15a00:	2301      	movs	r3, #1
   15a02:	465e      	mov	r6, fp
   15a04:	086a      	lsrs	r2, r5, #1
   15a06:	401d      	ands	r5, r3
   15a08:	4315      	orrs	r5, r2
   15a0a:	0032      	movs	r2, r6
   15a0c:	327f      	adds	r2, #127	; 0x7f
   15a0e:	2a00      	cmp	r2, #0
   15a10:	dd25      	ble.n	15a5e <__aeabi_fmul+0x1d6>
   15a12:	076b      	lsls	r3, r5, #29
   15a14:	d004      	beq.n	15a20 <__aeabi_fmul+0x198>
   15a16:	230f      	movs	r3, #15
   15a18:	402b      	ands	r3, r5
   15a1a:	2b04      	cmp	r3, #4
   15a1c:	d000      	beq.n	15a20 <__aeabi_fmul+0x198>
   15a1e:	3504      	adds	r5, #4
   15a20:	012b      	lsls	r3, r5, #4
   15a22:	d503      	bpl.n	15a2c <__aeabi_fmul+0x1a4>
   15a24:	0032      	movs	r2, r6
   15a26:	4b27      	ldr	r3, [pc, #156]	; (15ac4 <__aeabi_fmul+0x23c>)
   15a28:	3280      	adds	r2, #128	; 0x80
   15a2a:	401d      	ands	r5, r3
   15a2c:	2afe      	cmp	r2, #254	; 0xfe
   15a2e:	dc94      	bgt.n	1595a <__aeabi_fmul+0xd2>
   15a30:	2401      	movs	r4, #1
   15a32:	01a8      	lsls	r0, r5, #6
   15a34:	0a40      	lsrs	r0, r0, #9
   15a36:	b2d2      	uxtb	r2, r2
   15a38:	400c      	ands	r4, r1
   15a3a:	e76f      	b.n	1591c <__aeabi_fmul+0x94>
   15a3c:	2080      	movs	r0, #128	; 0x80
   15a3e:	03c0      	lsls	r0, r0, #15
   15a40:	4207      	tst	r7, r0
   15a42:	d007      	beq.n	15a54 <__aeabi_fmul+0x1cc>
   15a44:	4205      	tst	r5, r0
   15a46:	d105      	bne.n	15a54 <__aeabi_fmul+0x1cc>
   15a48:	4328      	orrs	r0, r5
   15a4a:	0240      	lsls	r0, r0, #9
   15a4c:	0a40      	lsrs	r0, r0, #9
   15a4e:	4644      	mov	r4, r8
   15a50:	22ff      	movs	r2, #255	; 0xff
   15a52:	e763      	b.n	1591c <__aeabi_fmul+0x94>
   15a54:	4338      	orrs	r0, r7
   15a56:	0240      	lsls	r0, r0, #9
   15a58:	0a40      	lsrs	r0, r0, #9
   15a5a:	22ff      	movs	r2, #255	; 0xff
   15a5c:	e75e      	b.n	1591c <__aeabi_fmul+0x94>
   15a5e:	2401      	movs	r4, #1
   15a60:	1aa3      	subs	r3, r4, r2
   15a62:	2b1b      	cmp	r3, #27
   15a64:	dd05      	ble.n	15a72 <__aeabi_fmul+0x1ea>
   15a66:	400c      	ands	r4, r1
   15a68:	2200      	movs	r2, #0
   15a6a:	2000      	movs	r0, #0
   15a6c:	e756      	b.n	1591c <__aeabi_fmul+0x94>
   15a6e:	465e      	mov	r6, fp
   15a70:	e7cb      	b.n	15a0a <__aeabi_fmul+0x182>
   15a72:	002a      	movs	r2, r5
   15a74:	2020      	movs	r0, #32
   15a76:	40da      	lsrs	r2, r3
   15a78:	1ac3      	subs	r3, r0, r3
   15a7a:	409d      	lsls	r5, r3
   15a7c:	002b      	movs	r3, r5
   15a7e:	1e5d      	subs	r5, r3, #1
   15a80:	41ab      	sbcs	r3, r5
   15a82:	4313      	orrs	r3, r2
   15a84:	075a      	lsls	r2, r3, #29
   15a86:	d004      	beq.n	15a92 <__aeabi_fmul+0x20a>
   15a88:	220f      	movs	r2, #15
   15a8a:	401a      	ands	r2, r3
   15a8c:	2a04      	cmp	r2, #4
   15a8e:	d000      	beq.n	15a92 <__aeabi_fmul+0x20a>
   15a90:	3304      	adds	r3, #4
   15a92:	015a      	lsls	r2, r3, #5
   15a94:	d504      	bpl.n	15aa0 <__aeabi_fmul+0x218>
   15a96:	2401      	movs	r4, #1
   15a98:	2201      	movs	r2, #1
   15a9a:	400c      	ands	r4, r1
   15a9c:	2000      	movs	r0, #0
   15a9e:	e73d      	b.n	1591c <__aeabi_fmul+0x94>
   15aa0:	2401      	movs	r4, #1
   15aa2:	019b      	lsls	r3, r3, #6
   15aa4:	0a58      	lsrs	r0, r3, #9
   15aa6:	400c      	ands	r4, r1
   15aa8:	2200      	movs	r2, #0
   15aaa:	e737      	b.n	1591c <__aeabi_fmul+0x94>
   15aac:	2080      	movs	r0, #128	; 0x80
   15aae:	2401      	movs	r4, #1
   15ab0:	03c0      	lsls	r0, r0, #15
   15ab2:	4328      	orrs	r0, r5
   15ab4:	0240      	lsls	r0, r0, #9
   15ab6:	0a40      	lsrs	r0, r0, #9
   15ab8:	400c      	ands	r4, r1
   15aba:	22ff      	movs	r2, #255	; 0xff
   15abc:	e72e      	b.n	1591c <__aeabi_fmul+0x94>
   15abe:	46c0      	nop			; (mov r8, r8)
   15ac0:	000196c8 	.word	0x000196c8
   15ac4:	f7ffffff 	.word	0xf7ffffff

00015ac8 <__aeabi_ui2f>:
   15ac8:	b510      	push	{r4, lr}
   15aca:	1e04      	subs	r4, r0, #0
   15acc:	d027      	beq.n	15b1e <__aeabi_ui2f+0x56>
   15ace:	f001 fe3b 	bl	17748 <__clzsi2>
   15ad2:	239e      	movs	r3, #158	; 0x9e
   15ad4:	1a1b      	subs	r3, r3, r0
   15ad6:	2b96      	cmp	r3, #150	; 0x96
   15ad8:	dc0a      	bgt.n	15af0 <__aeabi_ui2f+0x28>
   15ada:	2296      	movs	r2, #150	; 0x96
   15adc:	1ad2      	subs	r2, r2, r3
   15ade:	4094      	lsls	r4, r2
   15ae0:	0264      	lsls	r4, r4, #9
   15ae2:	0a64      	lsrs	r4, r4, #9
   15ae4:	b2db      	uxtb	r3, r3
   15ae6:	0264      	lsls	r4, r4, #9
   15ae8:	05db      	lsls	r3, r3, #23
   15aea:	0a60      	lsrs	r0, r4, #9
   15aec:	4318      	orrs	r0, r3
   15aee:	bd10      	pop	{r4, pc}
   15af0:	2b99      	cmp	r3, #153	; 0x99
   15af2:	dc17      	bgt.n	15b24 <__aeabi_ui2f+0x5c>
   15af4:	2299      	movs	r2, #153	; 0x99
   15af6:	1ad2      	subs	r2, r2, r3
   15af8:	2a00      	cmp	r2, #0
   15afa:	dd27      	ble.n	15b4c <__aeabi_ui2f+0x84>
   15afc:	4094      	lsls	r4, r2
   15afe:	0022      	movs	r2, r4
   15b00:	4c13      	ldr	r4, [pc, #76]	; (15b50 <__aeabi_ui2f+0x88>)
   15b02:	4014      	ands	r4, r2
   15b04:	0751      	lsls	r1, r2, #29
   15b06:	d004      	beq.n	15b12 <__aeabi_ui2f+0x4a>
   15b08:	210f      	movs	r1, #15
   15b0a:	400a      	ands	r2, r1
   15b0c:	2a04      	cmp	r2, #4
   15b0e:	d000      	beq.n	15b12 <__aeabi_ui2f+0x4a>
   15b10:	3404      	adds	r4, #4
   15b12:	0162      	lsls	r2, r4, #5
   15b14:	d412      	bmi.n	15b3c <__aeabi_ui2f+0x74>
   15b16:	01a4      	lsls	r4, r4, #6
   15b18:	0a64      	lsrs	r4, r4, #9
   15b1a:	b2db      	uxtb	r3, r3
   15b1c:	e7e3      	b.n	15ae6 <__aeabi_ui2f+0x1e>
   15b1e:	2300      	movs	r3, #0
   15b20:	2400      	movs	r4, #0
   15b22:	e7e0      	b.n	15ae6 <__aeabi_ui2f+0x1e>
   15b24:	22b9      	movs	r2, #185	; 0xb9
   15b26:	0021      	movs	r1, r4
   15b28:	1ad2      	subs	r2, r2, r3
   15b2a:	4091      	lsls	r1, r2
   15b2c:	000a      	movs	r2, r1
   15b2e:	1e51      	subs	r1, r2, #1
   15b30:	418a      	sbcs	r2, r1
   15b32:	2105      	movs	r1, #5
   15b34:	1a09      	subs	r1, r1, r0
   15b36:	40cc      	lsrs	r4, r1
   15b38:	4314      	orrs	r4, r2
   15b3a:	e7db      	b.n	15af4 <__aeabi_ui2f+0x2c>
   15b3c:	4b04      	ldr	r3, [pc, #16]	; (15b50 <__aeabi_ui2f+0x88>)
   15b3e:	401c      	ands	r4, r3
   15b40:	239f      	movs	r3, #159	; 0x9f
   15b42:	01a4      	lsls	r4, r4, #6
   15b44:	1a1b      	subs	r3, r3, r0
   15b46:	0a64      	lsrs	r4, r4, #9
   15b48:	b2db      	uxtb	r3, r3
   15b4a:	e7cc      	b.n	15ae6 <__aeabi_ui2f+0x1e>
   15b4c:	0022      	movs	r2, r4
   15b4e:	e7d7      	b.n	15b00 <__aeabi_ui2f+0x38>
   15b50:	fbffffff 	.word	0xfbffffff

00015b54 <__aeabi_dadd>:
   15b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b56:	4645      	mov	r5, r8
   15b58:	46de      	mov	lr, fp
   15b5a:	4657      	mov	r7, sl
   15b5c:	464e      	mov	r6, r9
   15b5e:	030c      	lsls	r4, r1, #12
   15b60:	b5e0      	push	{r5, r6, r7, lr}
   15b62:	004e      	lsls	r6, r1, #1
   15b64:	0fc9      	lsrs	r1, r1, #31
   15b66:	4688      	mov	r8, r1
   15b68:	000d      	movs	r5, r1
   15b6a:	0a61      	lsrs	r1, r4, #9
   15b6c:	0f44      	lsrs	r4, r0, #29
   15b6e:	430c      	orrs	r4, r1
   15b70:	00c7      	lsls	r7, r0, #3
   15b72:	0319      	lsls	r1, r3, #12
   15b74:	0058      	lsls	r0, r3, #1
   15b76:	0fdb      	lsrs	r3, r3, #31
   15b78:	469b      	mov	fp, r3
   15b7a:	0a4b      	lsrs	r3, r1, #9
   15b7c:	0f51      	lsrs	r1, r2, #29
   15b7e:	430b      	orrs	r3, r1
   15b80:	0d76      	lsrs	r6, r6, #21
   15b82:	0d40      	lsrs	r0, r0, #21
   15b84:	0019      	movs	r1, r3
   15b86:	00d2      	lsls	r2, r2, #3
   15b88:	45d8      	cmp	r8, fp
   15b8a:	d100      	bne.n	15b8e <__aeabi_dadd+0x3a>
   15b8c:	e0ae      	b.n	15cec <__aeabi_dadd+0x198>
   15b8e:	1a35      	subs	r5, r6, r0
   15b90:	2d00      	cmp	r5, #0
   15b92:	dc00      	bgt.n	15b96 <__aeabi_dadd+0x42>
   15b94:	e0f6      	b.n	15d84 <__aeabi_dadd+0x230>
   15b96:	2800      	cmp	r0, #0
   15b98:	d10f      	bne.n	15bba <__aeabi_dadd+0x66>
   15b9a:	4313      	orrs	r3, r2
   15b9c:	d100      	bne.n	15ba0 <__aeabi_dadd+0x4c>
   15b9e:	e0db      	b.n	15d58 <__aeabi_dadd+0x204>
   15ba0:	1e6b      	subs	r3, r5, #1
   15ba2:	2b00      	cmp	r3, #0
   15ba4:	d000      	beq.n	15ba8 <__aeabi_dadd+0x54>
   15ba6:	e137      	b.n	15e18 <__aeabi_dadd+0x2c4>
   15ba8:	1aba      	subs	r2, r7, r2
   15baa:	4297      	cmp	r7, r2
   15bac:	41bf      	sbcs	r7, r7
   15bae:	1a64      	subs	r4, r4, r1
   15bb0:	427f      	negs	r7, r7
   15bb2:	1be4      	subs	r4, r4, r7
   15bb4:	2601      	movs	r6, #1
   15bb6:	0017      	movs	r7, r2
   15bb8:	e024      	b.n	15c04 <__aeabi_dadd+0xb0>
   15bba:	4bc6      	ldr	r3, [pc, #792]	; (15ed4 <__aeabi_dadd+0x380>)
   15bbc:	429e      	cmp	r6, r3
   15bbe:	d04d      	beq.n	15c5c <__aeabi_dadd+0x108>
   15bc0:	2380      	movs	r3, #128	; 0x80
   15bc2:	041b      	lsls	r3, r3, #16
   15bc4:	4319      	orrs	r1, r3
   15bc6:	2d38      	cmp	r5, #56	; 0x38
   15bc8:	dd00      	ble.n	15bcc <__aeabi_dadd+0x78>
   15bca:	e107      	b.n	15ddc <__aeabi_dadd+0x288>
   15bcc:	2d1f      	cmp	r5, #31
   15bce:	dd00      	ble.n	15bd2 <__aeabi_dadd+0x7e>
   15bd0:	e138      	b.n	15e44 <__aeabi_dadd+0x2f0>
   15bd2:	2020      	movs	r0, #32
   15bd4:	1b43      	subs	r3, r0, r5
   15bd6:	469a      	mov	sl, r3
   15bd8:	000b      	movs	r3, r1
   15bda:	4650      	mov	r0, sl
   15bdc:	4083      	lsls	r3, r0
   15bde:	4699      	mov	r9, r3
   15be0:	0013      	movs	r3, r2
   15be2:	4648      	mov	r0, r9
   15be4:	40eb      	lsrs	r3, r5
   15be6:	4318      	orrs	r0, r3
   15be8:	0003      	movs	r3, r0
   15bea:	4650      	mov	r0, sl
   15bec:	4082      	lsls	r2, r0
   15bee:	1e50      	subs	r0, r2, #1
   15bf0:	4182      	sbcs	r2, r0
   15bf2:	40e9      	lsrs	r1, r5
   15bf4:	431a      	orrs	r2, r3
   15bf6:	1aba      	subs	r2, r7, r2
   15bf8:	1a61      	subs	r1, r4, r1
   15bfa:	4297      	cmp	r7, r2
   15bfc:	41a4      	sbcs	r4, r4
   15bfe:	0017      	movs	r7, r2
   15c00:	4264      	negs	r4, r4
   15c02:	1b0c      	subs	r4, r1, r4
   15c04:	0223      	lsls	r3, r4, #8
   15c06:	d562      	bpl.n	15cce <__aeabi_dadd+0x17a>
   15c08:	0264      	lsls	r4, r4, #9
   15c0a:	0a65      	lsrs	r5, r4, #9
   15c0c:	2d00      	cmp	r5, #0
   15c0e:	d100      	bne.n	15c12 <__aeabi_dadd+0xbe>
   15c10:	e0df      	b.n	15dd2 <__aeabi_dadd+0x27e>
   15c12:	0028      	movs	r0, r5
   15c14:	f001 fd98 	bl	17748 <__clzsi2>
   15c18:	0003      	movs	r3, r0
   15c1a:	3b08      	subs	r3, #8
   15c1c:	2b1f      	cmp	r3, #31
   15c1e:	dd00      	ble.n	15c22 <__aeabi_dadd+0xce>
   15c20:	e0d2      	b.n	15dc8 <__aeabi_dadd+0x274>
   15c22:	2220      	movs	r2, #32
   15c24:	003c      	movs	r4, r7
   15c26:	1ad2      	subs	r2, r2, r3
   15c28:	409d      	lsls	r5, r3
   15c2a:	40d4      	lsrs	r4, r2
   15c2c:	409f      	lsls	r7, r3
   15c2e:	4325      	orrs	r5, r4
   15c30:	429e      	cmp	r6, r3
   15c32:	dd00      	ble.n	15c36 <__aeabi_dadd+0xe2>
   15c34:	e0c4      	b.n	15dc0 <__aeabi_dadd+0x26c>
   15c36:	1b9e      	subs	r6, r3, r6
   15c38:	1c73      	adds	r3, r6, #1
   15c3a:	2b1f      	cmp	r3, #31
   15c3c:	dd00      	ble.n	15c40 <__aeabi_dadd+0xec>
   15c3e:	e0f1      	b.n	15e24 <__aeabi_dadd+0x2d0>
   15c40:	2220      	movs	r2, #32
   15c42:	0038      	movs	r0, r7
   15c44:	0029      	movs	r1, r5
   15c46:	1ad2      	subs	r2, r2, r3
   15c48:	40d8      	lsrs	r0, r3
   15c4a:	4091      	lsls	r1, r2
   15c4c:	4097      	lsls	r7, r2
   15c4e:	002c      	movs	r4, r5
   15c50:	4301      	orrs	r1, r0
   15c52:	1e78      	subs	r0, r7, #1
   15c54:	4187      	sbcs	r7, r0
   15c56:	40dc      	lsrs	r4, r3
   15c58:	2600      	movs	r6, #0
   15c5a:	430f      	orrs	r7, r1
   15c5c:	077b      	lsls	r3, r7, #29
   15c5e:	d009      	beq.n	15c74 <__aeabi_dadd+0x120>
   15c60:	230f      	movs	r3, #15
   15c62:	403b      	ands	r3, r7
   15c64:	2b04      	cmp	r3, #4
   15c66:	d005      	beq.n	15c74 <__aeabi_dadd+0x120>
   15c68:	1d3b      	adds	r3, r7, #4
   15c6a:	42bb      	cmp	r3, r7
   15c6c:	41bf      	sbcs	r7, r7
   15c6e:	427f      	negs	r7, r7
   15c70:	19e4      	adds	r4, r4, r7
   15c72:	001f      	movs	r7, r3
   15c74:	0223      	lsls	r3, r4, #8
   15c76:	d52c      	bpl.n	15cd2 <__aeabi_dadd+0x17e>
   15c78:	4b96      	ldr	r3, [pc, #600]	; (15ed4 <__aeabi_dadd+0x380>)
   15c7a:	3601      	adds	r6, #1
   15c7c:	429e      	cmp	r6, r3
   15c7e:	d100      	bne.n	15c82 <__aeabi_dadd+0x12e>
   15c80:	e09a      	b.n	15db8 <__aeabi_dadd+0x264>
   15c82:	4645      	mov	r5, r8
   15c84:	4b94      	ldr	r3, [pc, #592]	; (15ed8 <__aeabi_dadd+0x384>)
   15c86:	08ff      	lsrs	r7, r7, #3
   15c88:	401c      	ands	r4, r3
   15c8a:	0760      	lsls	r0, r4, #29
   15c8c:	0576      	lsls	r6, r6, #21
   15c8e:	0264      	lsls	r4, r4, #9
   15c90:	4307      	orrs	r7, r0
   15c92:	0b24      	lsrs	r4, r4, #12
   15c94:	0d76      	lsrs	r6, r6, #21
   15c96:	2100      	movs	r1, #0
   15c98:	0324      	lsls	r4, r4, #12
   15c9a:	0b23      	lsrs	r3, r4, #12
   15c9c:	0d0c      	lsrs	r4, r1, #20
   15c9e:	4a8f      	ldr	r2, [pc, #572]	; (15edc <__aeabi_dadd+0x388>)
   15ca0:	0524      	lsls	r4, r4, #20
   15ca2:	431c      	orrs	r4, r3
   15ca4:	4014      	ands	r4, r2
   15ca6:	0533      	lsls	r3, r6, #20
   15ca8:	4323      	orrs	r3, r4
   15caa:	005b      	lsls	r3, r3, #1
   15cac:	07ed      	lsls	r5, r5, #31
   15cae:	085b      	lsrs	r3, r3, #1
   15cb0:	432b      	orrs	r3, r5
   15cb2:	0038      	movs	r0, r7
   15cb4:	0019      	movs	r1, r3
   15cb6:	bc3c      	pop	{r2, r3, r4, r5}
   15cb8:	4690      	mov	r8, r2
   15cba:	4699      	mov	r9, r3
   15cbc:	46a2      	mov	sl, r4
   15cbe:	46ab      	mov	fp, r5
   15cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15cc2:	4664      	mov	r4, ip
   15cc4:	4304      	orrs	r4, r0
   15cc6:	d100      	bne.n	15cca <__aeabi_dadd+0x176>
   15cc8:	e211      	b.n	160ee <__aeabi_dadd+0x59a>
   15cca:	0004      	movs	r4, r0
   15ccc:	4667      	mov	r7, ip
   15cce:	077b      	lsls	r3, r7, #29
   15cd0:	d1c6      	bne.n	15c60 <__aeabi_dadd+0x10c>
   15cd2:	4645      	mov	r5, r8
   15cd4:	0760      	lsls	r0, r4, #29
   15cd6:	08ff      	lsrs	r7, r7, #3
   15cd8:	4307      	orrs	r7, r0
   15cda:	08e4      	lsrs	r4, r4, #3
   15cdc:	4b7d      	ldr	r3, [pc, #500]	; (15ed4 <__aeabi_dadd+0x380>)
   15cde:	429e      	cmp	r6, r3
   15ce0:	d030      	beq.n	15d44 <__aeabi_dadd+0x1f0>
   15ce2:	0324      	lsls	r4, r4, #12
   15ce4:	0576      	lsls	r6, r6, #21
   15ce6:	0b24      	lsrs	r4, r4, #12
   15ce8:	0d76      	lsrs	r6, r6, #21
   15cea:	e7d4      	b.n	15c96 <__aeabi_dadd+0x142>
   15cec:	1a33      	subs	r3, r6, r0
   15cee:	469a      	mov	sl, r3
   15cf0:	2b00      	cmp	r3, #0
   15cf2:	dd78      	ble.n	15de6 <__aeabi_dadd+0x292>
   15cf4:	2800      	cmp	r0, #0
   15cf6:	d031      	beq.n	15d5c <__aeabi_dadd+0x208>
   15cf8:	4876      	ldr	r0, [pc, #472]	; (15ed4 <__aeabi_dadd+0x380>)
   15cfa:	4286      	cmp	r6, r0
   15cfc:	d0ae      	beq.n	15c5c <__aeabi_dadd+0x108>
   15cfe:	2080      	movs	r0, #128	; 0x80
   15d00:	0400      	lsls	r0, r0, #16
   15d02:	4301      	orrs	r1, r0
   15d04:	4653      	mov	r3, sl
   15d06:	2b38      	cmp	r3, #56	; 0x38
   15d08:	dc00      	bgt.n	15d0c <__aeabi_dadd+0x1b8>
   15d0a:	e0e9      	b.n	15ee0 <__aeabi_dadd+0x38c>
   15d0c:	430a      	orrs	r2, r1
   15d0e:	1e51      	subs	r1, r2, #1
   15d10:	418a      	sbcs	r2, r1
   15d12:	2100      	movs	r1, #0
   15d14:	19d2      	adds	r2, r2, r7
   15d16:	42ba      	cmp	r2, r7
   15d18:	41bf      	sbcs	r7, r7
   15d1a:	1909      	adds	r1, r1, r4
   15d1c:	427c      	negs	r4, r7
   15d1e:	0017      	movs	r7, r2
   15d20:	190c      	adds	r4, r1, r4
   15d22:	0223      	lsls	r3, r4, #8
   15d24:	d5d3      	bpl.n	15cce <__aeabi_dadd+0x17a>
   15d26:	4b6b      	ldr	r3, [pc, #428]	; (15ed4 <__aeabi_dadd+0x380>)
   15d28:	3601      	adds	r6, #1
   15d2a:	429e      	cmp	r6, r3
   15d2c:	d100      	bne.n	15d30 <__aeabi_dadd+0x1dc>
   15d2e:	e13a      	b.n	15fa6 <__aeabi_dadd+0x452>
   15d30:	2001      	movs	r0, #1
   15d32:	4b69      	ldr	r3, [pc, #420]	; (15ed8 <__aeabi_dadd+0x384>)
   15d34:	401c      	ands	r4, r3
   15d36:	087b      	lsrs	r3, r7, #1
   15d38:	4007      	ands	r7, r0
   15d3a:	431f      	orrs	r7, r3
   15d3c:	07e0      	lsls	r0, r4, #31
   15d3e:	4307      	orrs	r7, r0
   15d40:	0864      	lsrs	r4, r4, #1
   15d42:	e78b      	b.n	15c5c <__aeabi_dadd+0x108>
   15d44:	0023      	movs	r3, r4
   15d46:	433b      	orrs	r3, r7
   15d48:	d100      	bne.n	15d4c <__aeabi_dadd+0x1f8>
   15d4a:	e1cb      	b.n	160e4 <__aeabi_dadd+0x590>
   15d4c:	2280      	movs	r2, #128	; 0x80
   15d4e:	0312      	lsls	r2, r2, #12
   15d50:	4314      	orrs	r4, r2
   15d52:	0324      	lsls	r4, r4, #12
   15d54:	0b24      	lsrs	r4, r4, #12
   15d56:	e79e      	b.n	15c96 <__aeabi_dadd+0x142>
   15d58:	002e      	movs	r6, r5
   15d5a:	e77f      	b.n	15c5c <__aeabi_dadd+0x108>
   15d5c:	0008      	movs	r0, r1
   15d5e:	4310      	orrs	r0, r2
   15d60:	d100      	bne.n	15d64 <__aeabi_dadd+0x210>
   15d62:	e0b4      	b.n	15ece <__aeabi_dadd+0x37a>
   15d64:	1e58      	subs	r0, r3, #1
   15d66:	2800      	cmp	r0, #0
   15d68:	d000      	beq.n	15d6c <__aeabi_dadd+0x218>
   15d6a:	e0de      	b.n	15f2a <__aeabi_dadd+0x3d6>
   15d6c:	18ba      	adds	r2, r7, r2
   15d6e:	42ba      	cmp	r2, r7
   15d70:	419b      	sbcs	r3, r3
   15d72:	1864      	adds	r4, r4, r1
   15d74:	425b      	negs	r3, r3
   15d76:	18e4      	adds	r4, r4, r3
   15d78:	0017      	movs	r7, r2
   15d7a:	2601      	movs	r6, #1
   15d7c:	0223      	lsls	r3, r4, #8
   15d7e:	d5a6      	bpl.n	15cce <__aeabi_dadd+0x17a>
   15d80:	2602      	movs	r6, #2
   15d82:	e7d5      	b.n	15d30 <__aeabi_dadd+0x1dc>
   15d84:	2d00      	cmp	r5, #0
   15d86:	d16e      	bne.n	15e66 <__aeabi_dadd+0x312>
   15d88:	1c70      	adds	r0, r6, #1
   15d8a:	0540      	lsls	r0, r0, #21
   15d8c:	0d40      	lsrs	r0, r0, #21
   15d8e:	2801      	cmp	r0, #1
   15d90:	dc00      	bgt.n	15d94 <__aeabi_dadd+0x240>
   15d92:	e0f9      	b.n	15f88 <__aeabi_dadd+0x434>
   15d94:	1ab8      	subs	r0, r7, r2
   15d96:	4684      	mov	ip, r0
   15d98:	4287      	cmp	r7, r0
   15d9a:	4180      	sbcs	r0, r0
   15d9c:	1ae5      	subs	r5, r4, r3
   15d9e:	4240      	negs	r0, r0
   15da0:	1a2d      	subs	r5, r5, r0
   15da2:	0228      	lsls	r0, r5, #8
   15da4:	d400      	bmi.n	15da8 <__aeabi_dadd+0x254>
   15da6:	e089      	b.n	15ebc <__aeabi_dadd+0x368>
   15da8:	1bd7      	subs	r7, r2, r7
   15daa:	42ba      	cmp	r2, r7
   15dac:	4192      	sbcs	r2, r2
   15dae:	1b1c      	subs	r4, r3, r4
   15db0:	4252      	negs	r2, r2
   15db2:	1aa5      	subs	r5, r4, r2
   15db4:	46d8      	mov	r8, fp
   15db6:	e729      	b.n	15c0c <__aeabi_dadd+0xb8>
   15db8:	4645      	mov	r5, r8
   15dba:	2400      	movs	r4, #0
   15dbc:	2700      	movs	r7, #0
   15dbe:	e76a      	b.n	15c96 <__aeabi_dadd+0x142>
   15dc0:	4c45      	ldr	r4, [pc, #276]	; (15ed8 <__aeabi_dadd+0x384>)
   15dc2:	1af6      	subs	r6, r6, r3
   15dc4:	402c      	ands	r4, r5
   15dc6:	e749      	b.n	15c5c <__aeabi_dadd+0x108>
   15dc8:	003d      	movs	r5, r7
   15dca:	3828      	subs	r0, #40	; 0x28
   15dcc:	4085      	lsls	r5, r0
   15dce:	2700      	movs	r7, #0
   15dd0:	e72e      	b.n	15c30 <__aeabi_dadd+0xdc>
   15dd2:	0038      	movs	r0, r7
   15dd4:	f001 fcb8 	bl	17748 <__clzsi2>
   15dd8:	3020      	adds	r0, #32
   15dda:	e71d      	b.n	15c18 <__aeabi_dadd+0xc4>
   15ddc:	430a      	orrs	r2, r1
   15dde:	1e51      	subs	r1, r2, #1
   15de0:	418a      	sbcs	r2, r1
   15de2:	2100      	movs	r1, #0
   15de4:	e707      	b.n	15bf6 <__aeabi_dadd+0xa2>
   15de6:	2b00      	cmp	r3, #0
   15de8:	d000      	beq.n	15dec <__aeabi_dadd+0x298>
   15dea:	e0f3      	b.n	15fd4 <__aeabi_dadd+0x480>
   15dec:	1c70      	adds	r0, r6, #1
   15dee:	0543      	lsls	r3, r0, #21
   15df0:	0d5b      	lsrs	r3, r3, #21
   15df2:	2b01      	cmp	r3, #1
   15df4:	dc00      	bgt.n	15df8 <__aeabi_dadd+0x2a4>
   15df6:	e0ad      	b.n	15f54 <__aeabi_dadd+0x400>
   15df8:	4b36      	ldr	r3, [pc, #216]	; (15ed4 <__aeabi_dadd+0x380>)
   15dfa:	4298      	cmp	r0, r3
   15dfc:	d100      	bne.n	15e00 <__aeabi_dadd+0x2ac>
   15dfe:	e0d1      	b.n	15fa4 <__aeabi_dadd+0x450>
   15e00:	18ba      	adds	r2, r7, r2
   15e02:	42ba      	cmp	r2, r7
   15e04:	41bf      	sbcs	r7, r7
   15e06:	1864      	adds	r4, r4, r1
   15e08:	427f      	negs	r7, r7
   15e0a:	19e4      	adds	r4, r4, r7
   15e0c:	07e7      	lsls	r7, r4, #31
   15e0e:	0852      	lsrs	r2, r2, #1
   15e10:	4317      	orrs	r7, r2
   15e12:	0864      	lsrs	r4, r4, #1
   15e14:	0006      	movs	r6, r0
   15e16:	e721      	b.n	15c5c <__aeabi_dadd+0x108>
   15e18:	482e      	ldr	r0, [pc, #184]	; (15ed4 <__aeabi_dadd+0x380>)
   15e1a:	4285      	cmp	r5, r0
   15e1c:	d100      	bne.n	15e20 <__aeabi_dadd+0x2cc>
   15e1e:	e093      	b.n	15f48 <__aeabi_dadd+0x3f4>
   15e20:	001d      	movs	r5, r3
   15e22:	e6d0      	b.n	15bc6 <__aeabi_dadd+0x72>
   15e24:	0029      	movs	r1, r5
   15e26:	3e1f      	subs	r6, #31
   15e28:	40f1      	lsrs	r1, r6
   15e2a:	2b20      	cmp	r3, #32
   15e2c:	d100      	bne.n	15e30 <__aeabi_dadd+0x2dc>
   15e2e:	e08d      	b.n	15f4c <__aeabi_dadd+0x3f8>
   15e30:	2240      	movs	r2, #64	; 0x40
   15e32:	1ad3      	subs	r3, r2, r3
   15e34:	409d      	lsls	r5, r3
   15e36:	432f      	orrs	r7, r5
   15e38:	1e7d      	subs	r5, r7, #1
   15e3a:	41af      	sbcs	r7, r5
   15e3c:	2400      	movs	r4, #0
   15e3e:	430f      	orrs	r7, r1
   15e40:	2600      	movs	r6, #0
   15e42:	e744      	b.n	15cce <__aeabi_dadd+0x17a>
   15e44:	002b      	movs	r3, r5
   15e46:	0008      	movs	r0, r1
   15e48:	3b20      	subs	r3, #32
   15e4a:	40d8      	lsrs	r0, r3
   15e4c:	0003      	movs	r3, r0
   15e4e:	2d20      	cmp	r5, #32
   15e50:	d100      	bne.n	15e54 <__aeabi_dadd+0x300>
   15e52:	e07d      	b.n	15f50 <__aeabi_dadd+0x3fc>
   15e54:	2040      	movs	r0, #64	; 0x40
   15e56:	1b45      	subs	r5, r0, r5
   15e58:	40a9      	lsls	r1, r5
   15e5a:	430a      	orrs	r2, r1
   15e5c:	1e51      	subs	r1, r2, #1
   15e5e:	418a      	sbcs	r2, r1
   15e60:	2100      	movs	r1, #0
   15e62:	431a      	orrs	r2, r3
   15e64:	e6c7      	b.n	15bf6 <__aeabi_dadd+0xa2>
   15e66:	2e00      	cmp	r6, #0
   15e68:	d050      	beq.n	15f0c <__aeabi_dadd+0x3b8>
   15e6a:	4e1a      	ldr	r6, [pc, #104]	; (15ed4 <__aeabi_dadd+0x380>)
   15e6c:	42b0      	cmp	r0, r6
   15e6e:	d057      	beq.n	15f20 <__aeabi_dadd+0x3cc>
   15e70:	2680      	movs	r6, #128	; 0x80
   15e72:	426b      	negs	r3, r5
   15e74:	4699      	mov	r9, r3
   15e76:	0436      	lsls	r6, r6, #16
   15e78:	4334      	orrs	r4, r6
   15e7a:	464b      	mov	r3, r9
   15e7c:	2b38      	cmp	r3, #56	; 0x38
   15e7e:	dd00      	ble.n	15e82 <__aeabi_dadd+0x32e>
   15e80:	e0d6      	b.n	16030 <__aeabi_dadd+0x4dc>
   15e82:	2b1f      	cmp	r3, #31
   15e84:	dd00      	ble.n	15e88 <__aeabi_dadd+0x334>
   15e86:	e135      	b.n	160f4 <__aeabi_dadd+0x5a0>
   15e88:	2620      	movs	r6, #32
   15e8a:	1af5      	subs	r5, r6, r3
   15e8c:	0026      	movs	r6, r4
   15e8e:	40ae      	lsls	r6, r5
   15e90:	46b2      	mov	sl, r6
   15e92:	003e      	movs	r6, r7
   15e94:	40de      	lsrs	r6, r3
   15e96:	46ac      	mov	ip, r5
   15e98:	0035      	movs	r5, r6
   15e9a:	4656      	mov	r6, sl
   15e9c:	432e      	orrs	r6, r5
   15e9e:	4665      	mov	r5, ip
   15ea0:	40af      	lsls	r7, r5
   15ea2:	1e7d      	subs	r5, r7, #1
   15ea4:	41af      	sbcs	r7, r5
   15ea6:	40dc      	lsrs	r4, r3
   15ea8:	4337      	orrs	r7, r6
   15eaa:	1bd7      	subs	r7, r2, r7
   15eac:	42ba      	cmp	r2, r7
   15eae:	4192      	sbcs	r2, r2
   15eb0:	1b0c      	subs	r4, r1, r4
   15eb2:	4252      	negs	r2, r2
   15eb4:	1aa4      	subs	r4, r4, r2
   15eb6:	0006      	movs	r6, r0
   15eb8:	46d8      	mov	r8, fp
   15eba:	e6a3      	b.n	15c04 <__aeabi_dadd+0xb0>
   15ebc:	4664      	mov	r4, ip
   15ebe:	4667      	mov	r7, ip
   15ec0:	432c      	orrs	r4, r5
   15ec2:	d000      	beq.n	15ec6 <__aeabi_dadd+0x372>
   15ec4:	e6a2      	b.n	15c0c <__aeabi_dadd+0xb8>
   15ec6:	2500      	movs	r5, #0
   15ec8:	2600      	movs	r6, #0
   15eca:	2700      	movs	r7, #0
   15ecc:	e706      	b.n	15cdc <__aeabi_dadd+0x188>
   15ece:	001e      	movs	r6, r3
   15ed0:	e6c4      	b.n	15c5c <__aeabi_dadd+0x108>
   15ed2:	46c0      	nop			; (mov r8, r8)
   15ed4:	000007ff 	.word	0x000007ff
   15ed8:	ff7fffff 	.word	0xff7fffff
   15edc:	800fffff 	.word	0x800fffff
   15ee0:	2b1f      	cmp	r3, #31
   15ee2:	dc63      	bgt.n	15fac <__aeabi_dadd+0x458>
   15ee4:	2020      	movs	r0, #32
   15ee6:	1ac3      	subs	r3, r0, r3
   15ee8:	0008      	movs	r0, r1
   15eea:	4098      	lsls	r0, r3
   15eec:	469c      	mov	ip, r3
   15eee:	4683      	mov	fp, r0
   15ef0:	4653      	mov	r3, sl
   15ef2:	0010      	movs	r0, r2
   15ef4:	40d8      	lsrs	r0, r3
   15ef6:	0003      	movs	r3, r0
   15ef8:	4658      	mov	r0, fp
   15efa:	4318      	orrs	r0, r3
   15efc:	4663      	mov	r3, ip
   15efe:	409a      	lsls	r2, r3
   15f00:	1e53      	subs	r3, r2, #1
   15f02:	419a      	sbcs	r2, r3
   15f04:	4653      	mov	r3, sl
   15f06:	4302      	orrs	r2, r0
   15f08:	40d9      	lsrs	r1, r3
   15f0a:	e703      	b.n	15d14 <__aeabi_dadd+0x1c0>
   15f0c:	0026      	movs	r6, r4
   15f0e:	433e      	orrs	r6, r7
   15f10:	d006      	beq.n	15f20 <__aeabi_dadd+0x3cc>
   15f12:	43eb      	mvns	r3, r5
   15f14:	4699      	mov	r9, r3
   15f16:	2b00      	cmp	r3, #0
   15f18:	d0c7      	beq.n	15eaa <__aeabi_dadd+0x356>
   15f1a:	4e94      	ldr	r6, [pc, #592]	; (1616c <__aeabi_dadd+0x618>)
   15f1c:	42b0      	cmp	r0, r6
   15f1e:	d1ac      	bne.n	15e7a <__aeabi_dadd+0x326>
   15f20:	000c      	movs	r4, r1
   15f22:	0017      	movs	r7, r2
   15f24:	0006      	movs	r6, r0
   15f26:	46d8      	mov	r8, fp
   15f28:	e698      	b.n	15c5c <__aeabi_dadd+0x108>
   15f2a:	4b90      	ldr	r3, [pc, #576]	; (1616c <__aeabi_dadd+0x618>)
   15f2c:	459a      	cmp	sl, r3
   15f2e:	d00b      	beq.n	15f48 <__aeabi_dadd+0x3f4>
   15f30:	4682      	mov	sl, r0
   15f32:	e6e7      	b.n	15d04 <__aeabi_dadd+0x1b0>
   15f34:	2800      	cmp	r0, #0
   15f36:	d000      	beq.n	15f3a <__aeabi_dadd+0x3e6>
   15f38:	e09e      	b.n	16078 <__aeabi_dadd+0x524>
   15f3a:	0018      	movs	r0, r3
   15f3c:	4310      	orrs	r0, r2
   15f3e:	d100      	bne.n	15f42 <__aeabi_dadd+0x3ee>
   15f40:	e0e9      	b.n	16116 <__aeabi_dadd+0x5c2>
   15f42:	001c      	movs	r4, r3
   15f44:	0017      	movs	r7, r2
   15f46:	46d8      	mov	r8, fp
   15f48:	4e88      	ldr	r6, [pc, #544]	; (1616c <__aeabi_dadd+0x618>)
   15f4a:	e687      	b.n	15c5c <__aeabi_dadd+0x108>
   15f4c:	2500      	movs	r5, #0
   15f4e:	e772      	b.n	15e36 <__aeabi_dadd+0x2e2>
   15f50:	2100      	movs	r1, #0
   15f52:	e782      	b.n	15e5a <__aeabi_dadd+0x306>
   15f54:	0023      	movs	r3, r4
   15f56:	433b      	orrs	r3, r7
   15f58:	2e00      	cmp	r6, #0
   15f5a:	d000      	beq.n	15f5e <__aeabi_dadd+0x40a>
   15f5c:	e0ab      	b.n	160b6 <__aeabi_dadd+0x562>
   15f5e:	2b00      	cmp	r3, #0
   15f60:	d100      	bne.n	15f64 <__aeabi_dadd+0x410>
   15f62:	e0e7      	b.n	16134 <__aeabi_dadd+0x5e0>
   15f64:	000b      	movs	r3, r1
   15f66:	4313      	orrs	r3, r2
   15f68:	d100      	bne.n	15f6c <__aeabi_dadd+0x418>
   15f6a:	e677      	b.n	15c5c <__aeabi_dadd+0x108>
   15f6c:	18ba      	adds	r2, r7, r2
   15f6e:	42ba      	cmp	r2, r7
   15f70:	41bf      	sbcs	r7, r7
   15f72:	1864      	adds	r4, r4, r1
   15f74:	427f      	negs	r7, r7
   15f76:	19e4      	adds	r4, r4, r7
   15f78:	0223      	lsls	r3, r4, #8
   15f7a:	d400      	bmi.n	15f7e <__aeabi_dadd+0x42a>
   15f7c:	e0f2      	b.n	16164 <__aeabi_dadd+0x610>
   15f7e:	4b7c      	ldr	r3, [pc, #496]	; (16170 <__aeabi_dadd+0x61c>)
   15f80:	0017      	movs	r7, r2
   15f82:	401c      	ands	r4, r3
   15f84:	0006      	movs	r6, r0
   15f86:	e669      	b.n	15c5c <__aeabi_dadd+0x108>
   15f88:	0020      	movs	r0, r4
   15f8a:	4338      	orrs	r0, r7
   15f8c:	2e00      	cmp	r6, #0
   15f8e:	d1d1      	bne.n	15f34 <__aeabi_dadd+0x3e0>
   15f90:	2800      	cmp	r0, #0
   15f92:	d15b      	bne.n	1604c <__aeabi_dadd+0x4f8>
   15f94:	001c      	movs	r4, r3
   15f96:	4314      	orrs	r4, r2
   15f98:	d100      	bne.n	15f9c <__aeabi_dadd+0x448>
   15f9a:	e0a8      	b.n	160ee <__aeabi_dadd+0x59a>
   15f9c:	001c      	movs	r4, r3
   15f9e:	0017      	movs	r7, r2
   15fa0:	46d8      	mov	r8, fp
   15fa2:	e65b      	b.n	15c5c <__aeabi_dadd+0x108>
   15fa4:	0006      	movs	r6, r0
   15fa6:	2400      	movs	r4, #0
   15fa8:	2700      	movs	r7, #0
   15faa:	e697      	b.n	15cdc <__aeabi_dadd+0x188>
   15fac:	4650      	mov	r0, sl
   15fae:	000b      	movs	r3, r1
   15fb0:	3820      	subs	r0, #32
   15fb2:	40c3      	lsrs	r3, r0
   15fb4:	4699      	mov	r9, r3
   15fb6:	4653      	mov	r3, sl
   15fb8:	2b20      	cmp	r3, #32
   15fba:	d100      	bne.n	15fbe <__aeabi_dadd+0x46a>
   15fbc:	e095      	b.n	160ea <__aeabi_dadd+0x596>
   15fbe:	2340      	movs	r3, #64	; 0x40
   15fc0:	4650      	mov	r0, sl
   15fc2:	1a1b      	subs	r3, r3, r0
   15fc4:	4099      	lsls	r1, r3
   15fc6:	430a      	orrs	r2, r1
   15fc8:	1e51      	subs	r1, r2, #1
   15fca:	418a      	sbcs	r2, r1
   15fcc:	464b      	mov	r3, r9
   15fce:	2100      	movs	r1, #0
   15fd0:	431a      	orrs	r2, r3
   15fd2:	e69f      	b.n	15d14 <__aeabi_dadd+0x1c0>
   15fd4:	2e00      	cmp	r6, #0
   15fd6:	d130      	bne.n	1603a <__aeabi_dadd+0x4e6>
   15fd8:	0026      	movs	r6, r4
   15fda:	433e      	orrs	r6, r7
   15fdc:	d067      	beq.n	160ae <__aeabi_dadd+0x55a>
   15fde:	43db      	mvns	r3, r3
   15fe0:	469a      	mov	sl, r3
   15fe2:	2b00      	cmp	r3, #0
   15fe4:	d01c      	beq.n	16020 <__aeabi_dadd+0x4cc>
   15fe6:	4e61      	ldr	r6, [pc, #388]	; (1616c <__aeabi_dadd+0x618>)
   15fe8:	42b0      	cmp	r0, r6
   15fea:	d060      	beq.n	160ae <__aeabi_dadd+0x55a>
   15fec:	4653      	mov	r3, sl
   15fee:	2b38      	cmp	r3, #56	; 0x38
   15ff0:	dd00      	ble.n	15ff4 <__aeabi_dadd+0x4a0>
   15ff2:	e096      	b.n	16122 <__aeabi_dadd+0x5ce>
   15ff4:	2b1f      	cmp	r3, #31
   15ff6:	dd00      	ble.n	15ffa <__aeabi_dadd+0x4a6>
   15ff8:	e09f      	b.n	1613a <__aeabi_dadd+0x5e6>
   15ffa:	2620      	movs	r6, #32
   15ffc:	1af3      	subs	r3, r6, r3
   15ffe:	0026      	movs	r6, r4
   16000:	409e      	lsls	r6, r3
   16002:	469c      	mov	ip, r3
   16004:	46b3      	mov	fp, r6
   16006:	4653      	mov	r3, sl
   16008:	003e      	movs	r6, r7
   1600a:	40de      	lsrs	r6, r3
   1600c:	0033      	movs	r3, r6
   1600e:	465e      	mov	r6, fp
   16010:	431e      	orrs	r6, r3
   16012:	4663      	mov	r3, ip
   16014:	409f      	lsls	r7, r3
   16016:	1e7b      	subs	r3, r7, #1
   16018:	419f      	sbcs	r7, r3
   1601a:	4653      	mov	r3, sl
   1601c:	40dc      	lsrs	r4, r3
   1601e:	4337      	orrs	r7, r6
   16020:	18bf      	adds	r7, r7, r2
   16022:	4297      	cmp	r7, r2
   16024:	4192      	sbcs	r2, r2
   16026:	1864      	adds	r4, r4, r1
   16028:	4252      	negs	r2, r2
   1602a:	18a4      	adds	r4, r4, r2
   1602c:	0006      	movs	r6, r0
   1602e:	e678      	b.n	15d22 <__aeabi_dadd+0x1ce>
   16030:	4327      	orrs	r7, r4
   16032:	1e7c      	subs	r4, r7, #1
   16034:	41a7      	sbcs	r7, r4
   16036:	2400      	movs	r4, #0
   16038:	e737      	b.n	15eaa <__aeabi_dadd+0x356>
   1603a:	4e4c      	ldr	r6, [pc, #304]	; (1616c <__aeabi_dadd+0x618>)
   1603c:	42b0      	cmp	r0, r6
   1603e:	d036      	beq.n	160ae <__aeabi_dadd+0x55a>
   16040:	2680      	movs	r6, #128	; 0x80
   16042:	425b      	negs	r3, r3
   16044:	0436      	lsls	r6, r6, #16
   16046:	469a      	mov	sl, r3
   16048:	4334      	orrs	r4, r6
   1604a:	e7cf      	b.n	15fec <__aeabi_dadd+0x498>
   1604c:	0018      	movs	r0, r3
   1604e:	4310      	orrs	r0, r2
   16050:	d100      	bne.n	16054 <__aeabi_dadd+0x500>
   16052:	e603      	b.n	15c5c <__aeabi_dadd+0x108>
   16054:	1ab8      	subs	r0, r7, r2
   16056:	4684      	mov	ip, r0
   16058:	4567      	cmp	r7, ip
   1605a:	41ad      	sbcs	r5, r5
   1605c:	1ae0      	subs	r0, r4, r3
   1605e:	426d      	negs	r5, r5
   16060:	1b40      	subs	r0, r0, r5
   16062:	0205      	lsls	r5, r0, #8
   16064:	d400      	bmi.n	16068 <__aeabi_dadd+0x514>
   16066:	e62c      	b.n	15cc2 <__aeabi_dadd+0x16e>
   16068:	1bd7      	subs	r7, r2, r7
   1606a:	42ba      	cmp	r2, r7
   1606c:	4192      	sbcs	r2, r2
   1606e:	1b1c      	subs	r4, r3, r4
   16070:	4252      	negs	r2, r2
   16072:	1aa4      	subs	r4, r4, r2
   16074:	46d8      	mov	r8, fp
   16076:	e5f1      	b.n	15c5c <__aeabi_dadd+0x108>
   16078:	0018      	movs	r0, r3
   1607a:	4310      	orrs	r0, r2
   1607c:	d100      	bne.n	16080 <__aeabi_dadd+0x52c>
   1607e:	e763      	b.n	15f48 <__aeabi_dadd+0x3f4>
   16080:	08f8      	lsrs	r0, r7, #3
   16082:	0767      	lsls	r7, r4, #29
   16084:	4307      	orrs	r7, r0
   16086:	2080      	movs	r0, #128	; 0x80
   16088:	08e4      	lsrs	r4, r4, #3
   1608a:	0300      	lsls	r0, r0, #12
   1608c:	4204      	tst	r4, r0
   1608e:	d008      	beq.n	160a2 <__aeabi_dadd+0x54e>
   16090:	08dd      	lsrs	r5, r3, #3
   16092:	4205      	tst	r5, r0
   16094:	d105      	bne.n	160a2 <__aeabi_dadd+0x54e>
   16096:	08d2      	lsrs	r2, r2, #3
   16098:	0759      	lsls	r1, r3, #29
   1609a:	4311      	orrs	r1, r2
   1609c:	000f      	movs	r7, r1
   1609e:	002c      	movs	r4, r5
   160a0:	46d8      	mov	r8, fp
   160a2:	0f7b      	lsrs	r3, r7, #29
   160a4:	00e4      	lsls	r4, r4, #3
   160a6:	431c      	orrs	r4, r3
   160a8:	00ff      	lsls	r7, r7, #3
   160aa:	4e30      	ldr	r6, [pc, #192]	; (1616c <__aeabi_dadd+0x618>)
   160ac:	e5d6      	b.n	15c5c <__aeabi_dadd+0x108>
   160ae:	000c      	movs	r4, r1
   160b0:	0017      	movs	r7, r2
   160b2:	0006      	movs	r6, r0
   160b4:	e5d2      	b.n	15c5c <__aeabi_dadd+0x108>
   160b6:	2b00      	cmp	r3, #0
   160b8:	d038      	beq.n	1612c <__aeabi_dadd+0x5d8>
   160ba:	000b      	movs	r3, r1
   160bc:	4313      	orrs	r3, r2
   160be:	d100      	bne.n	160c2 <__aeabi_dadd+0x56e>
   160c0:	e742      	b.n	15f48 <__aeabi_dadd+0x3f4>
   160c2:	08f8      	lsrs	r0, r7, #3
   160c4:	0767      	lsls	r7, r4, #29
   160c6:	4307      	orrs	r7, r0
   160c8:	2080      	movs	r0, #128	; 0x80
   160ca:	08e4      	lsrs	r4, r4, #3
   160cc:	0300      	lsls	r0, r0, #12
   160ce:	4204      	tst	r4, r0
   160d0:	d0e7      	beq.n	160a2 <__aeabi_dadd+0x54e>
   160d2:	08cb      	lsrs	r3, r1, #3
   160d4:	4203      	tst	r3, r0
   160d6:	d1e4      	bne.n	160a2 <__aeabi_dadd+0x54e>
   160d8:	08d2      	lsrs	r2, r2, #3
   160da:	0749      	lsls	r1, r1, #29
   160dc:	4311      	orrs	r1, r2
   160de:	000f      	movs	r7, r1
   160e0:	001c      	movs	r4, r3
   160e2:	e7de      	b.n	160a2 <__aeabi_dadd+0x54e>
   160e4:	2700      	movs	r7, #0
   160e6:	2400      	movs	r4, #0
   160e8:	e5d5      	b.n	15c96 <__aeabi_dadd+0x142>
   160ea:	2100      	movs	r1, #0
   160ec:	e76b      	b.n	15fc6 <__aeabi_dadd+0x472>
   160ee:	2500      	movs	r5, #0
   160f0:	2700      	movs	r7, #0
   160f2:	e5f3      	b.n	15cdc <__aeabi_dadd+0x188>
   160f4:	464e      	mov	r6, r9
   160f6:	0025      	movs	r5, r4
   160f8:	3e20      	subs	r6, #32
   160fa:	40f5      	lsrs	r5, r6
   160fc:	464b      	mov	r3, r9
   160fe:	002e      	movs	r6, r5
   16100:	2b20      	cmp	r3, #32
   16102:	d02d      	beq.n	16160 <__aeabi_dadd+0x60c>
   16104:	2540      	movs	r5, #64	; 0x40
   16106:	1aed      	subs	r5, r5, r3
   16108:	40ac      	lsls	r4, r5
   1610a:	4327      	orrs	r7, r4
   1610c:	1e7c      	subs	r4, r7, #1
   1610e:	41a7      	sbcs	r7, r4
   16110:	2400      	movs	r4, #0
   16112:	4337      	orrs	r7, r6
   16114:	e6c9      	b.n	15eaa <__aeabi_dadd+0x356>
   16116:	2480      	movs	r4, #128	; 0x80
   16118:	2500      	movs	r5, #0
   1611a:	0324      	lsls	r4, r4, #12
   1611c:	4e13      	ldr	r6, [pc, #76]	; (1616c <__aeabi_dadd+0x618>)
   1611e:	2700      	movs	r7, #0
   16120:	e5dc      	b.n	15cdc <__aeabi_dadd+0x188>
   16122:	4327      	orrs	r7, r4
   16124:	1e7c      	subs	r4, r7, #1
   16126:	41a7      	sbcs	r7, r4
   16128:	2400      	movs	r4, #0
   1612a:	e779      	b.n	16020 <__aeabi_dadd+0x4cc>
   1612c:	000c      	movs	r4, r1
   1612e:	0017      	movs	r7, r2
   16130:	4e0e      	ldr	r6, [pc, #56]	; (1616c <__aeabi_dadd+0x618>)
   16132:	e593      	b.n	15c5c <__aeabi_dadd+0x108>
   16134:	000c      	movs	r4, r1
   16136:	0017      	movs	r7, r2
   16138:	e590      	b.n	15c5c <__aeabi_dadd+0x108>
   1613a:	4656      	mov	r6, sl
   1613c:	0023      	movs	r3, r4
   1613e:	3e20      	subs	r6, #32
   16140:	40f3      	lsrs	r3, r6
   16142:	4699      	mov	r9, r3
   16144:	4653      	mov	r3, sl
   16146:	2b20      	cmp	r3, #32
   16148:	d00e      	beq.n	16168 <__aeabi_dadd+0x614>
   1614a:	2340      	movs	r3, #64	; 0x40
   1614c:	4656      	mov	r6, sl
   1614e:	1b9b      	subs	r3, r3, r6
   16150:	409c      	lsls	r4, r3
   16152:	4327      	orrs	r7, r4
   16154:	1e7c      	subs	r4, r7, #1
   16156:	41a7      	sbcs	r7, r4
   16158:	464b      	mov	r3, r9
   1615a:	2400      	movs	r4, #0
   1615c:	431f      	orrs	r7, r3
   1615e:	e75f      	b.n	16020 <__aeabi_dadd+0x4cc>
   16160:	2400      	movs	r4, #0
   16162:	e7d2      	b.n	1610a <__aeabi_dadd+0x5b6>
   16164:	0017      	movs	r7, r2
   16166:	e5b2      	b.n	15cce <__aeabi_dadd+0x17a>
   16168:	2400      	movs	r4, #0
   1616a:	e7f2      	b.n	16152 <__aeabi_dadd+0x5fe>
   1616c:	000007ff 	.word	0x000007ff
   16170:	ff7fffff 	.word	0xff7fffff

00016174 <__aeabi_ddiv>:
   16174:	b5f0      	push	{r4, r5, r6, r7, lr}
   16176:	4657      	mov	r7, sl
   16178:	4645      	mov	r5, r8
   1617a:	46de      	mov	lr, fp
   1617c:	464e      	mov	r6, r9
   1617e:	b5e0      	push	{r5, r6, r7, lr}
   16180:	004c      	lsls	r4, r1, #1
   16182:	030e      	lsls	r6, r1, #12
   16184:	b087      	sub	sp, #28
   16186:	4683      	mov	fp, r0
   16188:	4692      	mov	sl, r2
   1618a:	001d      	movs	r5, r3
   1618c:	4680      	mov	r8, r0
   1618e:	0b36      	lsrs	r6, r6, #12
   16190:	0d64      	lsrs	r4, r4, #21
   16192:	0fcf      	lsrs	r7, r1, #31
   16194:	2c00      	cmp	r4, #0
   16196:	d04f      	beq.n	16238 <__aeabi_ddiv+0xc4>
   16198:	4b6f      	ldr	r3, [pc, #444]	; (16358 <__aeabi_ddiv+0x1e4>)
   1619a:	429c      	cmp	r4, r3
   1619c:	d035      	beq.n	1620a <__aeabi_ddiv+0x96>
   1619e:	2380      	movs	r3, #128	; 0x80
   161a0:	0f42      	lsrs	r2, r0, #29
   161a2:	041b      	lsls	r3, r3, #16
   161a4:	00f6      	lsls	r6, r6, #3
   161a6:	4313      	orrs	r3, r2
   161a8:	4333      	orrs	r3, r6
   161aa:	4699      	mov	r9, r3
   161ac:	00c3      	lsls	r3, r0, #3
   161ae:	4698      	mov	r8, r3
   161b0:	4b6a      	ldr	r3, [pc, #424]	; (1635c <__aeabi_ddiv+0x1e8>)
   161b2:	2600      	movs	r6, #0
   161b4:	469c      	mov	ip, r3
   161b6:	2300      	movs	r3, #0
   161b8:	4464      	add	r4, ip
   161ba:	9303      	str	r3, [sp, #12]
   161bc:	032b      	lsls	r3, r5, #12
   161be:	0b1b      	lsrs	r3, r3, #12
   161c0:	469b      	mov	fp, r3
   161c2:	006b      	lsls	r3, r5, #1
   161c4:	0fed      	lsrs	r5, r5, #31
   161c6:	4650      	mov	r0, sl
   161c8:	0d5b      	lsrs	r3, r3, #21
   161ca:	9501      	str	r5, [sp, #4]
   161cc:	d05e      	beq.n	1628c <__aeabi_ddiv+0x118>
   161ce:	4a62      	ldr	r2, [pc, #392]	; (16358 <__aeabi_ddiv+0x1e4>)
   161d0:	4293      	cmp	r3, r2
   161d2:	d053      	beq.n	1627c <__aeabi_ddiv+0x108>
   161d4:	465a      	mov	r2, fp
   161d6:	00d1      	lsls	r1, r2, #3
   161d8:	2280      	movs	r2, #128	; 0x80
   161da:	0f40      	lsrs	r0, r0, #29
   161dc:	0412      	lsls	r2, r2, #16
   161de:	4302      	orrs	r2, r0
   161e0:	430a      	orrs	r2, r1
   161e2:	4693      	mov	fp, r2
   161e4:	4652      	mov	r2, sl
   161e6:	00d1      	lsls	r1, r2, #3
   161e8:	4a5c      	ldr	r2, [pc, #368]	; (1635c <__aeabi_ddiv+0x1e8>)
   161ea:	4694      	mov	ip, r2
   161ec:	2200      	movs	r2, #0
   161ee:	4463      	add	r3, ip
   161f0:	0038      	movs	r0, r7
   161f2:	4068      	eors	r0, r5
   161f4:	4684      	mov	ip, r0
   161f6:	9002      	str	r0, [sp, #8]
   161f8:	1ae4      	subs	r4, r4, r3
   161fa:	4316      	orrs	r6, r2
   161fc:	2e0f      	cmp	r6, #15
   161fe:	d900      	bls.n	16202 <__aeabi_ddiv+0x8e>
   16200:	e0b4      	b.n	1636c <__aeabi_ddiv+0x1f8>
   16202:	4b57      	ldr	r3, [pc, #348]	; (16360 <__aeabi_ddiv+0x1ec>)
   16204:	00b6      	lsls	r6, r6, #2
   16206:	599b      	ldr	r3, [r3, r6]
   16208:	469f      	mov	pc, r3
   1620a:	0003      	movs	r3, r0
   1620c:	4333      	orrs	r3, r6
   1620e:	4699      	mov	r9, r3
   16210:	d16c      	bne.n	162ec <__aeabi_ddiv+0x178>
   16212:	2300      	movs	r3, #0
   16214:	4698      	mov	r8, r3
   16216:	3302      	adds	r3, #2
   16218:	2608      	movs	r6, #8
   1621a:	9303      	str	r3, [sp, #12]
   1621c:	e7ce      	b.n	161bc <__aeabi_ddiv+0x48>
   1621e:	46cb      	mov	fp, r9
   16220:	4641      	mov	r1, r8
   16222:	9a03      	ldr	r2, [sp, #12]
   16224:	9701      	str	r7, [sp, #4]
   16226:	2a02      	cmp	r2, #2
   16228:	d165      	bne.n	162f6 <__aeabi_ddiv+0x182>
   1622a:	9b01      	ldr	r3, [sp, #4]
   1622c:	4c4a      	ldr	r4, [pc, #296]	; (16358 <__aeabi_ddiv+0x1e4>)
   1622e:	469c      	mov	ip, r3
   16230:	2300      	movs	r3, #0
   16232:	2200      	movs	r2, #0
   16234:	4698      	mov	r8, r3
   16236:	e06b      	b.n	16310 <__aeabi_ddiv+0x19c>
   16238:	0003      	movs	r3, r0
   1623a:	4333      	orrs	r3, r6
   1623c:	4699      	mov	r9, r3
   1623e:	d04e      	beq.n	162de <__aeabi_ddiv+0x16a>
   16240:	2e00      	cmp	r6, #0
   16242:	d100      	bne.n	16246 <__aeabi_ddiv+0xd2>
   16244:	e1bc      	b.n	165c0 <__aeabi_ddiv+0x44c>
   16246:	0030      	movs	r0, r6
   16248:	f001 fa7e 	bl	17748 <__clzsi2>
   1624c:	0003      	movs	r3, r0
   1624e:	3b0b      	subs	r3, #11
   16250:	2b1c      	cmp	r3, #28
   16252:	dd00      	ble.n	16256 <__aeabi_ddiv+0xe2>
   16254:	e1ac      	b.n	165b0 <__aeabi_ddiv+0x43c>
   16256:	221d      	movs	r2, #29
   16258:	1ad3      	subs	r3, r2, r3
   1625a:	465a      	mov	r2, fp
   1625c:	0001      	movs	r1, r0
   1625e:	40da      	lsrs	r2, r3
   16260:	3908      	subs	r1, #8
   16262:	408e      	lsls	r6, r1
   16264:	0013      	movs	r3, r2
   16266:	4333      	orrs	r3, r6
   16268:	4699      	mov	r9, r3
   1626a:	465b      	mov	r3, fp
   1626c:	408b      	lsls	r3, r1
   1626e:	4698      	mov	r8, r3
   16270:	2300      	movs	r3, #0
   16272:	4c3c      	ldr	r4, [pc, #240]	; (16364 <__aeabi_ddiv+0x1f0>)
   16274:	2600      	movs	r6, #0
   16276:	1a24      	subs	r4, r4, r0
   16278:	9303      	str	r3, [sp, #12]
   1627a:	e79f      	b.n	161bc <__aeabi_ddiv+0x48>
   1627c:	4651      	mov	r1, sl
   1627e:	465a      	mov	r2, fp
   16280:	4311      	orrs	r1, r2
   16282:	d129      	bne.n	162d8 <__aeabi_ddiv+0x164>
   16284:	2200      	movs	r2, #0
   16286:	4693      	mov	fp, r2
   16288:	3202      	adds	r2, #2
   1628a:	e7b1      	b.n	161f0 <__aeabi_ddiv+0x7c>
   1628c:	4659      	mov	r1, fp
   1628e:	4301      	orrs	r1, r0
   16290:	d01e      	beq.n	162d0 <__aeabi_ddiv+0x15c>
   16292:	465b      	mov	r3, fp
   16294:	2b00      	cmp	r3, #0
   16296:	d100      	bne.n	1629a <__aeabi_ddiv+0x126>
   16298:	e19e      	b.n	165d8 <__aeabi_ddiv+0x464>
   1629a:	4658      	mov	r0, fp
   1629c:	f001 fa54 	bl	17748 <__clzsi2>
   162a0:	0003      	movs	r3, r0
   162a2:	3b0b      	subs	r3, #11
   162a4:	2b1c      	cmp	r3, #28
   162a6:	dd00      	ble.n	162aa <__aeabi_ddiv+0x136>
   162a8:	e18f      	b.n	165ca <__aeabi_ddiv+0x456>
   162aa:	0002      	movs	r2, r0
   162ac:	4659      	mov	r1, fp
   162ae:	3a08      	subs	r2, #8
   162b0:	4091      	lsls	r1, r2
   162b2:	468b      	mov	fp, r1
   162b4:	211d      	movs	r1, #29
   162b6:	1acb      	subs	r3, r1, r3
   162b8:	4651      	mov	r1, sl
   162ba:	40d9      	lsrs	r1, r3
   162bc:	000b      	movs	r3, r1
   162be:	4659      	mov	r1, fp
   162c0:	430b      	orrs	r3, r1
   162c2:	4651      	mov	r1, sl
   162c4:	469b      	mov	fp, r3
   162c6:	4091      	lsls	r1, r2
   162c8:	4b26      	ldr	r3, [pc, #152]	; (16364 <__aeabi_ddiv+0x1f0>)
   162ca:	2200      	movs	r2, #0
   162cc:	1a1b      	subs	r3, r3, r0
   162ce:	e78f      	b.n	161f0 <__aeabi_ddiv+0x7c>
   162d0:	2300      	movs	r3, #0
   162d2:	2201      	movs	r2, #1
   162d4:	469b      	mov	fp, r3
   162d6:	e78b      	b.n	161f0 <__aeabi_ddiv+0x7c>
   162d8:	4651      	mov	r1, sl
   162da:	2203      	movs	r2, #3
   162dc:	e788      	b.n	161f0 <__aeabi_ddiv+0x7c>
   162de:	2300      	movs	r3, #0
   162e0:	4698      	mov	r8, r3
   162e2:	3301      	adds	r3, #1
   162e4:	2604      	movs	r6, #4
   162e6:	2400      	movs	r4, #0
   162e8:	9303      	str	r3, [sp, #12]
   162ea:	e767      	b.n	161bc <__aeabi_ddiv+0x48>
   162ec:	2303      	movs	r3, #3
   162ee:	46b1      	mov	r9, r6
   162f0:	9303      	str	r3, [sp, #12]
   162f2:	260c      	movs	r6, #12
   162f4:	e762      	b.n	161bc <__aeabi_ddiv+0x48>
   162f6:	2a03      	cmp	r2, #3
   162f8:	d100      	bne.n	162fc <__aeabi_ddiv+0x188>
   162fa:	e25c      	b.n	167b6 <__aeabi_ddiv+0x642>
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	2a01      	cmp	r2, #1
   16300:	d000      	beq.n	16304 <__aeabi_ddiv+0x190>
   16302:	e1e4      	b.n	166ce <__aeabi_ddiv+0x55a>
   16304:	4013      	ands	r3, r2
   16306:	469c      	mov	ip, r3
   16308:	2300      	movs	r3, #0
   1630a:	2400      	movs	r4, #0
   1630c:	2200      	movs	r2, #0
   1630e:	4698      	mov	r8, r3
   16310:	2100      	movs	r1, #0
   16312:	0312      	lsls	r2, r2, #12
   16314:	0b13      	lsrs	r3, r2, #12
   16316:	0d0a      	lsrs	r2, r1, #20
   16318:	0512      	lsls	r2, r2, #20
   1631a:	431a      	orrs	r2, r3
   1631c:	0523      	lsls	r3, r4, #20
   1631e:	4c12      	ldr	r4, [pc, #72]	; (16368 <__aeabi_ddiv+0x1f4>)
   16320:	4640      	mov	r0, r8
   16322:	4022      	ands	r2, r4
   16324:	4313      	orrs	r3, r2
   16326:	4662      	mov	r2, ip
   16328:	005b      	lsls	r3, r3, #1
   1632a:	07d2      	lsls	r2, r2, #31
   1632c:	085b      	lsrs	r3, r3, #1
   1632e:	4313      	orrs	r3, r2
   16330:	0019      	movs	r1, r3
   16332:	b007      	add	sp, #28
   16334:	bc3c      	pop	{r2, r3, r4, r5}
   16336:	4690      	mov	r8, r2
   16338:	4699      	mov	r9, r3
   1633a:	46a2      	mov	sl, r4
   1633c:	46ab      	mov	fp, r5
   1633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16340:	2300      	movs	r3, #0
   16342:	2280      	movs	r2, #128	; 0x80
   16344:	469c      	mov	ip, r3
   16346:	0312      	lsls	r2, r2, #12
   16348:	4698      	mov	r8, r3
   1634a:	4c03      	ldr	r4, [pc, #12]	; (16358 <__aeabi_ddiv+0x1e4>)
   1634c:	e7e0      	b.n	16310 <__aeabi_ddiv+0x19c>
   1634e:	2300      	movs	r3, #0
   16350:	4c01      	ldr	r4, [pc, #4]	; (16358 <__aeabi_ddiv+0x1e4>)
   16352:	2200      	movs	r2, #0
   16354:	4698      	mov	r8, r3
   16356:	e7db      	b.n	16310 <__aeabi_ddiv+0x19c>
   16358:	000007ff 	.word	0x000007ff
   1635c:	fffffc01 	.word	0xfffffc01
   16360:	00019708 	.word	0x00019708
   16364:	fffffc0d 	.word	0xfffffc0d
   16368:	800fffff 	.word	0x800fffff
   1636c:	45d9      	cmp	r9, fp
   1636e:	d900      	bls.n	16372 <__aeabi_ddiv+0x1fe>
   16370:	e139      	b.n	165e6 <__aeabi_ddiv+0x472>
   16372:	d100      	bne.n	16376 <__aeabi_ddiv+0x202>
   16374:	e134      	b.n	165e0 <__aeabi_ddiv+0x46c>
   16376:	2300      	movs	r3, #0
   16378:	4646      	mov	r6, r8
   1637a:	464d      	mov	r5, r9
   1637c:	469a      	mov	sl, r3
   1637e:	3c01      	subs	r4, #1
   16380:	465b      	mov	r3, fp
   16382:	0e0a      	lsrs	r2, r1, #24
   16384:	021b      	lsls	r3, r3, #8
   16386:	431a      	orrs	r2, r3
   16388:	020b      	lsls	r3, r1, #8
   1638a:	0c17      	lsrs	r7, r2, #16
   1638c:	9303      	str	r3, [sp, #12]
   1638e:	0413      	lsls	r3, r2, #16
   16390:	0c1b      	lsrs	r3, r3, #16
   16392:	0039      	movs	r1, r7
   16394:	0028      	movs	r0, r5
   16396:	4690      	mov	r8, r2
   16398:	9301      	str	r3, [sp, #4]
   1639a:	f7fe fe51 	bl	15040 <__udivsi3>
   1639e:	0002      	movs	r2, r0
   163a0:	9b01      	ldr	r3, [sp, #4]
   163a2:	4683      	mov	fp, r0
   163a4:	435a      	muls	r2, r3
   163a6:	0028      	movs	r0, r5
   163a8:	0039      	movs	r1, r7
   163aa:	4691      	mov	r9, r2
   163ac:	f7fe fece 	bl	1514c <__aeabi_uidivmod>
   163b0:	0c35      	lsrs	r5, r6, #16
   163b2:	0409      	lsls	r1, r1, #16
   163b4:	430d      	orrs	r5, r1
   163b6:	45a9      	cmp	r9, r5
   163b8:	d90d      	bls.n	163d6 <__aeabi_ddiv+0x262>
   163ba:	465b      	mov	r3, fp
   163bc:	4445      	add	r5, r8
   163be:	3b01      	subs	r3, #1
   163c0:	45a8      	cmp	r8, r5
   163c2:	d900      	bls.n	163c6 <__aeabi_ddiv+0x252>
   163c4:	e13a      	b.n	1663c <__aeabi_ddiv+0x4c8>
   163c6:	45a9      	cmp	r9, r5
   163c8:	d800      	bhi.n	163cc <__aeabi_ddiv+0x258>
   163ca:	e137      	b.n	1663c <__aeabi_ddiv+0x4c8>
   163cc:	2302      	movs	r3, #2
   163ce:	425b      	negs	r3, r3
   163d0:	469c      	mov	ip, r3
   163d2:	4445      	add	r5, r8
   163d4:	44e3      	add	fp, ip
   163d6:	464b      	mov	r3, r9
   163d8:	1aeb      	subs	r3, r5, r3
   163da:	0039      	movs	r1, r7
   163dc:	0018      	movs	r0, r3
   163de:	9304      	str	r3, [sp, #16]
   163e0:	f7fe fe2e 	bl	15040 <__udivsi3>
   163e4:	9b01      	ldr	r3, [sp, #4]
   163e6:	0005      	movs	r5, r0
   163e8:	4343      	muls	r3, r0
   163ea:	0039      	movs	r1, r7
   163ec:	9804      	ldr	r0, [sp, #16]
   163ee:	4699      	mov	r9, r3
   163f0:	f7fe feac 	bl	1514c <__aeabi_uidivmod>
   163f4:	0433      	lsls	r3, r6, #16
   163f6:	0409      	lsls	r1, r1, #16
   163f8:	0c1b      	lsrs	r3, r3, #16
   163fa:	430b      	orrs	r3, r1
   163fc:	4599      	cmp	r9, r3
   163fe:	d909      	bls.n	16414 <__aeabi_ddiv+0x2a0>
   16400:	4443      	add	r3, r8
   16402:	1e6a      	subs	r2, r5, #1
   16404:	4598      	cmp	r8, r3
   16406:	d900      	bls.n	1640a <__aeabi_ddiv+0x296>
   16408:	e11a      	b.n	16640 <__aeabi_ddiv+0x4cc>
   1640a:	4599      	cmp	r9, r3
   1640c:	d800      	bhi.n	16410 <__aeabi_ddiv+0x29c>
   1640e:	e117      	b.n	16640 <__aeabi_ddiv+0x4cc>
   16410:	3d02      	subs	r5, #2
   16412:	4443      	add	r3, r8
   16414:	464a      	mov	r2, r9
   16416:	1a9b      	subs	r3, r3, r2
   16418:	465a      	mov	r2, fp
   1641a:	0412      	lsls	r2, r2, #16
   1641c:	432a      	orrs	r2, r5
   1641e:	9903      	ldr	r1, [sp, #12]
   16420:	4693      	mov	fp, r2
   16422:	0c10      	lsrs	r0, r2, #16
   16424:	0c0a      	lsrs	r2, r1, #16
   16426:	4691      	mov	r9, r2
   16428:	0409      	lsls	r1, r1, #16
   1642a:	465a      	mov	r2, fp
   1642c:	0c09      	lsrs	r1, r1, #16
   1642e:	464e      	mov	r6, r9
   16430:	000d      	movs	r5, r1
   16432:	0412      	lsls	r2, r2, #16
   16434:	0c12      	lsrs	r2, r2, #16
   16436:	4345      	muls	r5, r0
   16438:	9105      	str	r1, [sp, #20]
   1643a:	4351      	muls	r1, r2
   1643c:	4372      	muls	r2, r6
   1643e:	4370      	muls	r0, r6
   16440:	1952      	adds	r2, r2, r5
   16442:	0c0e      	lsrs	r6, r1, #16
   16444:	18b2      	adds	r2, r6, r2
   16446:	4295      	cmp	r5, r2
   16448:	d903      	bls.n	16452 <__aeabi_ddiv+0x2de>
   1644a:	2580      	movs	r5, #128	; 0x80
   1644c:	026d      	lsls	r5, r5, #9
   1644e:	46ac      	mov	ip, r5
   16450:	4460      	add	r0, ip
   16452:	0c15      	lsrs	r5, r2, #16
   16454:	0409      	lsls	r1, r1, #16
   16456:	0412      	lsls	r2, r2, #16
   16458:	0c09      	lsrs	r1, r1, #16
   1645a:	1828      	adds	r0, r5, r0
   1645c:	1852      	adds	r2, r2, r1
   1645e:	4283      	cmp	r3, r0
   16460:	d200      	bcs.n	16464 <__aeabi_ddiv+0x2f0>
   16462:	e0ce      	b.n	16602 <__aeabi_ddiv+0x48e>
   16464:	d100      	bne.n	16468 <__aeabi_ddiv+0x2f4>
   16466:	e0c8      	b.n	165fa <__aeabi_ddiv+0x486>
   16468:	1a1d      	subs	r5, r3, r0
   1646a:	4653      	mov	r3, sl
   1646c:	1a9e      	subs	r6, r3, r2
   1646e:	45b2      	cmp	sl, r6
   16470:	4192      	sbcs	r2, r2
   16472:	4252      	negs	r2, r2
   16474:	1aab      	subs	r3, r5, r2
   16476:	469a      	mov	sl, r3
   16478:	4598      	cmp	r8, r3
   1647a:	d100      	bne.n	1647e <__aeabi_ddiv+0x30a>
   1647c:	e117      	b.n	166ae <__aeabi_ddiv+0x53a>
   1647e:	0039      	movs	r1, r7
   16480:	0018      	movs	r0, r3
   16482:	f7fe fddd 	bl	15040 <__udivsi3>
   16486:	9b01      	ldr	r3, [sp, #4]
   16488:	0005      	movs	r5, r0
   1648a:	4343      	muls	r3, r0
   1648c:	0039      	movs	r1, r7
   1648e:	4650      	mov	r0, sl
   16490:	9304      	str	r3, [sp, #16]
   16492:	f7fe fe5b 	bl	1514c <__aeabi_uidivmod>
   16496:	9804      	ldr	r0, [sp, #16]
   16498:	040b      	lsls	r3, r1, #16
   1649a:	0c31      	lsrs	r1, r6, #16
   1649c:	4319      	orrs	r1, r3
   1649e:	4288      	cmp	r0, r1
   164a0:	d909      	bls.n	164b6 <__aeabi_ddiv+0x342>
   164a2:	4441      	add	r1, r8
   164a4:	1e6b      	subs	r3, r5, #1
   164a6:	4588      	cmp	r8, r1
   164a8:	d900      	bls.n	164ac <__aeabi_ddiv+0x338>
   164aa:	e107      	b.n	166bc <__aeabi_ddiv+0x548>
   164ac:	4288      	cmp	r0, r1
   164ae:	d800      	bhi.n	164b2 <__aeabi_ddiv+0x33e>
   164b0:	e104      	b.n	166bc <__aeabi_ddiv+0x548>
   164b2:	3d02      	subs	r5, #2
   164b4:	4441      	add	r1, r8
   164b6:	9b04      	ldr	r3, [sp, #16]
   164b8:	1acb      	subs	r3, r1, r3
   164ba:	0018      	movs	r0, r3
   164bc:	0039      	movs	r1, r7
   164be:	9304      	str	r3, [sp, #16]
   164c0:	f7fe fdbe 	bl	15040 <__udivsi3>
   164c4:	9b01      	ldr	r3, [sp, #4]
   164c6:	4682      	mov	sl, r0
   164c8:	4343      	muls	r3, r0
   164ca:	0039      	movs	r1, r7
   164cc:	9804      	ldr	r0, [sp, #16]
   164ce:	9301      	str	r3, [sp, #4]
   164d0:	f7fe fe3c 	bl	1514c <__aeabi_uidivmod>
   164d4:	9801      	ldr	r0, [sp, #4]
   164d6:	040b      	lsls	r3, r1, #16
   164d8:	0431      	lsls	r1, r6, #16
   164da:	0c09      	lsrs	r1, r1, #16
   164dc:	4319      	orrs	r1, r3
   164de:	4288      	cmp	r0, r1
   164e0:	d90d      	bls.n	164fe <__aeabi_ddiv+0x38a>
   164e2:	4653      	mov	r3, sl
   164e4:	4441      	add	r1, r8
   164e6:	3b01      	subs	r3, #1
   164e8:	4588      	cmp	r8, r1
   164ea:	d900      	bls.n	164ee <__aeabi_ddiv+0x37a>
   164ec:	e0e8      	b.n	166c0 <__aeabi_ddiv+0x54c>
   164ee:	4288      	cmp	r0, r1
   164f0:	d800      	bhi.n	164f4 <__aeabi_ddiv+0x380>
   164f2:	e0e5      	b.n	166c0 <__aeabi_ddiv+0x54c>
   164f4:	2302      	movs	r3, #2
   164f6:	425b      	negs	r3, r3
   164f8:	469c      	mov	ip, r3
   164fa:	4441      	add	r1, r8
   164fc:	44e2      	add	sl, ip
   164fe:	9b01      	ldr	r3, [sp, #4]
   16500:	042d      	lsls	r5, r5, #16
   16502:	1ace      	subs	r6, r1, r3
   16504:	4651      	mov	r1, sl
   16506:	4329      	orrs	r1, r5
   16508:	9d05      	ldr	r5, [sp, #20]
   1650a:	464f      	mov	r7, r9
   1650c:	002a      	movs	r2, r5
   1650e:	040b      	lsls	r3, r1, #16
   16510:	0c08      	lsrs	r0, r1, #16
   16512:	0c1b      	lsrs	r3, r3, #16
   16514:	435a      	muls	r2, r3
   16516:	4345      	muls	r5, r0
   16518:	437b      	muls	r3, r7
   1651a:	4378      	muls	r0, r7
   1651c:	195b      	adds	r3, r3, r5
   1651e:	0c17      	lsrs	r7, r2, #16
   16520:	18fb      	adds	r3, r7, r3
   16522:	429d      	cmp	r5, r3
   16524:	d903      	bls.n	1652e <__aeabi_ddiv+0x3ba>
   16526:	2580      	movs	r5, #128	; 0x80
   16528:	026d      	lsls	r5, r5, #9
   1652a:	46ac      	mov	ip, r5
   1652c:	4460      	add	r0, ip
   1652e:	0c1d      	lsrs	r5, r3, #16
   16530:	0412      	lsls	r2, r2, #16
   16532:	041b      	lsls	r3, r3, #16
   16534:	0c12      	lsrs	r2, r2, #16
   16536:	1828      	adds	r0, r5, r0
   16538:	189b      	adds	r3, r3, r2
   1653a:	4286      	cmp	r6, r0
   1653c:	d200      	bcs.n	16540 <__aeabi_ddiv+0x3cc>
   1653e:	e093      	b.n	16668 <__aeabi_ddiv+0x4f4>
   16540:	d100      	bne.n	16544 <__aeabi_ddiv+0x3d0>
   16542:	e08e      	b.n	16662 <__aeabi_ddiv+0x4ee>
   16544:	2301      	movs	r3, #1
   16546:	4319      	orrs	r1, r3
   16548:	4ba0      	ldr	r3, [pc, #640]	; (167cc <__aeabi_ddiv+0x658>)
   1654a:	18e3      	adds	r3, r4, r3
   1654c:	2b00      	cmp	r3, #0
   1654e:	dc00      	bgt.n	16552 <__aeabi_ddiv+0x3de>
   16550:	e099      	b.n	16686 <__aeabi_ddiv+0x512>
   16552:	074a      	lsls	r2, r1, #29
   16554:	d000      	beq.n	16558 <__aeabi_ddiv+0x3e4>
   16556:	e09e      	b.n	16696 <__aeabi_ddiv+0x522>
   16558:	465a      	mov	r2, fp
   1655a:	01d2      	lsls	r2, r2, #7
   1655c:	d506      	bpl.n	1656c <__aeabi_ddiv+0x3f8>
   1655e:	465a      	mov	r2, fp
   16560:	4b9b      	ldr	r3, [pc, #620]	; (167d0 <__aeabi_ddiv+0x65c>)
   16562:	401a      	ands	r2, r3
   16564:	2380      	movs	r3, #128	; 0x80
   16566:	4693      	mov	fp, r2
   16568:	00db      	lsls	r3, r3, #3
   1656a:	18e3      	adds	r3, r4, r3
   1656c:	4a99      	ldr	r2, [pc, #612]	; (167d4 <__aeabi_ddiv+0x660>)
   1656e:	4293      	cmp	r3, r2
   16570:	dd68      	ble.n	16644 <__aeabi_ddiv+0x4d0>
   16572:	2301      	movs	r3, #1
   16574:	9a02      	ldr	r2, [sp, #8]
   16576:	4c98      	ldr	r4, [pc, #608]	; (167d8 <__aeabi_ddiv+0x664>)
   16578:	401a      	ands	r2, r3
   1657a:	2300      	movs	r3, #0
   1657c:	4694      	mov	ip, r2
   1657e:	4698      	mov	r8, r3
   16580:	2200      	movs	r2, #0
   16582:	e6c5      	b.n	16310 <__aeabi_ddiv+0x19c>
   16584:	2280      	movs	r2, #128	; 0x80
   16586:	464b      	mov	r3, r9
   16588:	0312      	lsls	r2, r2, #12
   1658a:	4213      	tst	r3, r2
   1658c:	d00a      	beq.n	165a4 <__aeabi_ddiv+0x430>
   1658e:	465b      	mov	r3, fp
   16590:	4213      	tst	r3, r2
   16592:	d106      	bne.n	165a2 <__aeabi_ddiv+0x42e>
   16594:	431a      	orrs	r2, r3
   16596:	0312      	lsls	r2, r2, #12
   16598:	0b12      	lsrs	r2, r2, #12
   1659a:	46ac      	mov	ip, r5
   1659c:	4688      	mov	r8, r1
   1659e:	4c8e      	ldr	r4, [pc, #568]	; (167d8 <__aeabi_ddiv+0x664>)
   165a0:	e6b6      	b.n	16310 <__aeabi_ddiv+0x19c>
   165a2:	464b      	mov	r3, r9
   165a4:	431a      	orrs	r2, r3
   165a6:	0312      	lsls	r2, r2, #12
   165a8:	0b12      	lsrs	r2, r2, #12
   165aa:	46bc      	mov	ip, r7
   165ac:	4c8a      	ldr	r4, [pc, #552]	; (167d8 <__aeabi_ddiv+0x664>)
   165ae:	e6af      	b.n	16310 <__aeabi_ddiv+0x19c>
   165b0:	0003      	movs	r3, r0
   165b2:	465a      	mov	r2, fp
   165b4:	3b28      	subs	r3, #40	; 0x28
   165b6:	409a      	lsls	r2, r3
   165b8:	2300      	movs	r3, #0
   165ba:	4691      	mov	r9, r2
   165bc:	4698      	mov	r8, r3
   165be:	e657      	b.n	16270 <__aeabi_ddiv+0xfc>
   165c0:	4658      	mov	r0, fp
   165c2:	f001 f8c1 	bl	17748 <__clzsi2>
   165c6:	3020      	adds	r0, #32
   165c8:	e640      	b.n	1624c <__aeabi_ddiv+0xd8>
   165ca:	0003      	movs	r3, r0
   165cc:	4652      	mov	r2, sl
   165ce:	3b28      	subs	r3, #40	; 0x28
   165d0:	409a      	lsls	r2, r3
   165d2:	2100      	movs	r1, #0
   165d4:	4693      	mov	fp, r2
   165d6:	e677      	b.n	162c8 <__aeabi_ddiv+0x154>
   165d8:	f001 f8b6 	bl	17748 <__clzsi2>
   165dc:	3020      	adds	r0, #32
   165de:	e65f      	b.n	162a0 <__aeabi_ddiv+0x12c>
   165e0:	4588      	cmp	r8, r1
   165e2:	d200      	bcs.n	165e6 <__aeabi_ddiv+0x472>
   165e4:	e6c7      	b.n	16376 <__aeabi_ddiv+0x202>
   165e6:	464b      	mov	r3, r9
   165e8:	07de      	lsls	r6, r3, #31
   165ea:	085d      	lsrs	r5, r3, #1
   165ec:	4643      	mov	r3, r8
   165ee:	085b      	lsrs	r3, r3, #1
   165f0:	431e      	orrs	r6, r3
   165f2:	4643      	mov	r3, r8
   165f4:	07db      	lsls	r3, r3, #31
   165f6:	469a      	mov	sl, r3
   165f8:	e6c2      	b.n	16380 <__aeabi_ddiv+0x20c>
   165fa:	2500      	movs	r5, #0
   165fc:	4592      	cmp	sl, r2
   165fe:	d300      	bcc.n	16602 <__aeabi_ddiv+0x48e>
   16600:	e733      	b.n	1646a <__aeabi_ddiv+0x2f6>
   16602:	9e03      	ldr	r6, [sp, #12]
   16604:	4659      	mov	r1, fp
   16606:	46b4      	mov	ip, r6
   16608:	44e2      	add	sl, ip
   1660a:	45b2      	cmp	sl, r6
   1660c:	41ad      	sbcs	r5, r5
   1660e:	426d      	negs	r5, r5
   16610:	4445      	add	r5, r8
   16612:	18eb      	adds	r3, r5, r3
   16614:	3901      	subs	r1, #1
   16616:	4598      	cmp	r8, r3
   16618:	d207      	bcs.n	1662a <__aeabi_ddiv+0x4b6>
   1661a:	4298      	cmp	r0, r3
   1661c:	d900      	bls.n	16620 <__aeabi_ddiv+0x4ac>
   1661e:	e07f      	b.n	16720 <__aeabi_ddiv+0x5ac>
   16620:	d100      	bne.n	16624 <__aeabi_ddiv+0x4b0>
   16622:	e0bc      	b.n	1679e <__aeabi_ddiv+0x62a>
   16624:	1a1d      	subs	r5, r3, r0
   16626:	468b      	mov	fp, r1
   16628:	e71f      	b.n	1646a <__aeabi_ddiv+0x2f6>
   1662a:	4598      	cmp	r8, r3
   1662c:	d1fa      	bne.n	16624 <__aeabi_ddiv+0x4b0>
   1662e:	9d03      	ldr	r5, [sp, #12]
   16630:	4555      	cmp	r5, sl
   16632:	d9f2      	bls.n	1661a <__aeabi_ddiv+0x4a6>
   16634:	4643      	mov	r3, r8
   16636:	468b      	mov	fp, r1
   16638:	1a1d      	subs	r5, r3, r0
   1663a:	e716      	b.n	1646a <__aeabi_ddiv+0x2f6>
   1663c:	469b      	mov	fp, r3
   1663e:	e6ca      	b.n	163d6 <__aeabi_ddiv+0x262>
   16640:	0015      	movs	r5, r2
   16642:	e6e7      	b.n	16414 <__aeabi_ddiv+0x2a0>
   16644:	465a      	mov	r2, fp
   16646:	08c9      	lsrs	r1, r1, #3
   16648:	0752      	lsls	r2, r2, #29
   1664a:	430a      	orrs	r2, r1
   1664c:	055b      	lsls	r3, r3, #21
   1664e:	4690      	mov	r8, r2
   16650:	0d5c      	lsrs	r4, r3, #21
   16652:	465a      	mov	r2, fp
   16654:	2301      	movs	r3, #1
   16656:	9902      	ldr	r1, [sp, #8]
   16658:	0252      	lsls	r2, r2, #9
   1665a:	4019      	ands	r1, r3
   1665c:	0b12      	lsrs	r2, r2, #12
   1665e:	468c      	mov	ip, r1
   16660:	e656      	b.n	16310 <__aeabi_ddiv+0x19c>
   16662:	2b00      	cmp	r3, #0
   16664:	d100      	bne.n	16668 <__aeabi_ddiv+0x4f4>
   16666:	e76f      	b.n	16548 <__aeabi_ddiv+0x3d4>
   16668:	4446      	add	r6, r8
   1666a:	1e4a      	subs	r2, r1, #1
   1666c:	45b0      	cmp	r8, r6
   1666e:	d929      	bls.n	166c4 <__aeabi_ddiv+0x550>
   16670:	0011      	movs	r1, r2
   16672:	4286      	cmp	r6, r0
   16674:	d000      	beq.n	16678 <__aeabi_ddiv+0x504>
   16676:	e765      	b.n	16544 <__aeabi_ddiv+0x3d0>
   16678:	9a03      	ldr	r2, [sp, #12]
   1667a:	4293      	cmp	r3, r2
   1667c:	d000      	beq.n	16680 <__aeabi_ddiv+0x50c>
   1667e:	e761      	b.n	16544 <__aeabi_ddiv+0x3d0>
   16680:	e762      	b.n	16548 <__aeabi_ddiv+0x3d4>
   16682:	2101      	movs	r1, #1
   16684:	4249      	negs	r1, r1
   16686:	2001      	movs	r0, #1
   16688:	1ac2      	subs	r2, r0, r3
   1668a:	2a38      	cmp	r2, #56	; 0x38
   1668c:	dd21      	ble.n	166d2 <__aeabi_ddiv+0x55e>
   1668e:	9b02      	ldr	r3, [sp, #8]
   16690:	4003      	ands	r3, r0
   16692:	469c      	mov	ip, r3
   16694:	e638      	b.n	16308 <__aeabi_ddiv+0x194>
   16696:	220f      	movs	r2, #15
   16698:	400a      	ands	r2, r1
   1669a:	2a04      	cmp	r2, #4
   1669c:	d100      	bne.n	166a0 <__aeabi_ddiv+0x52c>
   1669e:	e75b      	b.n	16558 <__aeabi_ddiv+0x3e4>
   166a0:	000a      	movs	r2, r1
   166a2:	1d11      	adds	r1, r2, #4
   166a4:	4291      	cmp	r1, r2
   166a6:	4192      	sbcs	r2, r2
   166a8:	4252      	negs	r2, r2
   166aa:	4493      	add	fp, r2
   166ac:	e754      	b.n	16558 <__aeabi_ddiv+0x3e4>
   166ae:	4b47      	ldr	r3, [pc, #284]	; (167cc <__aeabi_ddiv+0x658>)
   166b0:	18e3      	adds	r3, r4, r3
   166b2:	2b00      	cmp	r3, #0
   166b4:	dde5      	ble.n	16682 <__aeabi_ddiv+0x50e>
   166b6:	2201      	movs	r2, #1
   166b8:	4252      	negs	r2, r2
   166ba:	e7f2      	b.n	166a2 <__aeabi_ddiv+0x52e>
   166bc:	001d      	movs	r5, r3
   166be:	e6fa      	b.n	164b6 <__aeabi_ddiv+0x342>
   166c0:	469a      	mov	sl, r3
   166c2:	e71c      	b.n	164fe <__aeabi_ddiv+0x38a>
   166c4:	42b0      	cmp	r0, r6
   166c6:	d839      	bhi.n	1673c <__aeabi_ddiv+0x5c8>
   166c8:	d06e      	beq.n	167a8 <__aeabi_ddiv+0x634>
   166ca:	0011      	movs	r1, r2
   166cc:	e73a      	b.n	16544 <__aeabi_ddiv+0x3d0>
   166ce:	9302      	str	r3, [sp, #8]
   166d0:	e73a      	b.n	16548 <__aeabi_ddiv+0x3d4>
   166d2:	2a1f      	cmp	r2, #31
   166d4:	dc3c      	bgt.n	16750 <__aeabi_ddiv+0x5dc>
   166d6:	2320      	movs	r3, #32
   166d8:	1a9b      	subs	r3, r3, r2
   166da:	000c      	movs	r4, r1
   166dc:	4658      	mov	r0, fp
   166de:	4099      	lsls	r1, r3
   166e0:	4098      	lsls	r0, r3
   166e2:	1e4b      	subs	r3, r1, #1
   166e4:	4199      	sbcs	r1, r3
   166e6:	465b      	mov	r3, fp
   166e8:	40d4      	lsrs	r4, r2
   166ea:	40d3      	lsrs	r3, r2
   166ec:	4320      	orrs	r0, r4
   166ee:	4308      	orrs	r0, r1
   166f0:	001a      	movs	r2, r3
   166f2:	0743      	lsls	r3, r0, #29
   166f4:	d009      	beq.n	1670a <__aeabi_ddiv+0x596>
   166f6:	230f      	movs	r3, #15
   166f8:	4003      	ands	r3, r0
   166fa:	2b04      	cmp	r3, #4
   166fc:	d005      	beq.n	1670a <__aeabi_ddiv+0x596>
   166fe:	0001      	movs	r1, r0
   16700:	1d08      	adds	r0, r1, #4
   16702:	4288      	cmp	r0, r1
   16704:	419b      	sbcs	r3, r3
   16706:	425b      	negs	r3, r3
   16708:	18d2      	adds	r2, r2, r3
   1670a:	0213      	lsls	r3, r2, #8
   1670c:	d53a      	bpl.n	16784 <__aeabi_ddiv+0x610>
   1670e:	2301      	movs	r3, #1
   16710:	9a02      	ldr	r2, [sp, #8]
   16712:	2401      	movs	r4, #1
   16714:	401a      	ands	r2, r3
   16716:	2300      	movs	r3, #0
   16718:	4694      	mov	ip, r2
   1671a:	4698      	mov	r8, r3
   1671c:	2200      	movs	r2, #0
   1671e:	e5f7      	b.n	16310 <__aeabi_ddiv+0x19c>
   16720:	2102      	movs	r1, #2
   16722:	4249      	negs	r1, r1
   16724:	468c      	mov	ip, r1
   16726:	9d03      	ldr	r5, [sp, #12]
   16728:	44e3      	add	fp, ip
   1672a:	46ac      	mov	ip, r5
   1672c:	44e2      	add	sl, ip
   1672e:	45aa      	cmp	sl, r5
   16730:	41ad      	sbcs	r5, r5
   16732:	426d      	negs	r5, r5
   16734:	4445      	add	r5, r8
   16736:	18ed      	adds	r5, r5, r3
   16738:	1a2d      	subs	r5, r5, r0
   1673a:	e696      	b.n	1646a <__aeabi_ddiv+0x2f6>
   1673c:	1e8a      	subs	r2, r1, #2
   1673e:	9903      	ldr	r1, [sp, #12]
   16740:	004d      	lsls	r5, r1, #1
   16742:	428d      	cmp	r5, r1
   16744:	4189      	sbcs	r1, r1
   16746:	4249      	negs	r1, r1
   16748:	4441      	add	r1, r8
   1674a:	1876      	adds	r6, r6, r1
   1674c:	9503      	str	r5, [sp, #12]
   1674e:	e78f      	b.n	16670 <__aeabi_ddiv+0x4fc>
   16750:	201f      	movs	r0, #31
   16752:	4240      	negs	r0, r0
   16754:	1ac3      	subs	r3, r0, r3
   16756:	4658      	mov	r0, fp
   16758:	40d8      	lsrs	r0, r3
   1675a:	0003      	movs	r3, r0
   1675c:	2a20      	cmp	r2, #32
   1675e:	d028      	beq.n	167b2 <__aeabi_ddiv+0x63e>
   16760:	2040      	movs	r0, #64	; 0x40
   16762:	465d      	mov	r5, fp
   16764:	1a82      	subs	r2, r0, r2
   16766:	4095      	lsls	r5, r2
   16768:	4329      	orrs	r1, r5
   1676a:	1e4a      	subs	r2, r1, #1
   1676c:	4191      	sbcs	r1, r2
   1676e:	4319      	orrs	r1, r3
   16770:	2307      	movs	r3, #7
   16772:	2200      	movs	r2, #0
   16774:	400b      	ands	r3, r1
   16776:	d009      	beq.n	1678c <__aeabi_ddiv+0x618>
   16778:	230f      	movs	r3, #15
   1677a:	2200      	movs	r2, #0
   1677c:	400b      	ands	r3, r1
   1677e:	0008      	movs	r0, r1
   16780:	2b04      	cmp	r3, #4
   16782:	d1bd      	bne.n	16700 <__aeabi_ddiv+0x58c>
   16784:	0001      	movs	r1, r0
   16786:	0753      	lsls	r3, r2, #29
   16788:	0252      	lsls	r2, r2, #9
   1678a:	0b12      	lsrs	r2, r2, #12
   1678c:	08c9      	lsrs	r1, r1, #3
   1678e:	4319      	orrs	r1, r3
   16790:	2301      	movs	r3, #1
   16792:	4688      	mov	r8, r1
   16794:	9902      	ldr	r1, [sp, #8]
   16796:	2400      	movs	r4, #0
   16798:	4019      	ands	r1, r3
   1679a:	468c      	mov	ip, r1
   1679c:	e5b8      	b.n	16310 <__aeabi_ddiv+0x19c>
   1679e:	4552      	cmp	r2, sl
   167a0:	d8be      	bhi.n	16720 <__aeabi_ddiv+0x5ac>
   167a2:	468b      	mov	fp, r1
   167a4:	2500      	movs	r5, #0
   167a6:	e660      	b.n	1646a <__aeabi_ddiv+0x2f6>
   167a8:	9d03      	ldr	r5, [sp, #12]
   167aa:	429d      	cmp	r5, r3
   167ac:	d3c6      	bcc.n	1673c <__aeabi_ddiv+0x5c8>
   167ae:	0011      	movs	r1, r2
   167b0:	e762      	b.n	16678 <__aeabi_ddiv+0x504>
   167b2:	2500      	movs	r5, #0
   167b4:	e7d8      	b.n	16768 <__aeabi_ddiv+0x5f4>
   167b6:	2280      	movs	r2, #128	; 0x80
   167b8:	465b      	mov	r3, fp
   167ba:	0312      	lsls	r2, r2, #12
   167bc:	431a      	orrs	r2, r3
   167be:	9b01      	ldr	r3, [sp, #4]
   167c0:	0312      	lsls	r2, r2, #12
   167c2:	0b12      	lsrs	r2, r2, #12
   167c4:	469c      	mov	ip, r3
   167c6:	4688      	mov	r8, r1
   167c8:	4c03      	ldr	r4, [pc, #12]	; (167d8 <__aeabi_ddiv+0x664>)
   167ca:	e5a1      	b.n	16310 <__aeabi_ddiv+0x19c>
   167cc:	000003ff 	.word	0x000003ff
   167d0:	feffffff 	.word	0xfeffffff
   167d4:	000007fe 	.word	0x000007fe
   167d8:	000007ff 	.word	0x000007ff

000167dc <__eqdf2>:
   167dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   167de:	464f      	mov	r7, r9
   167e0:	4646      	mov	r6, r8
   167e2:	46d6      	mov	lr, sl
   167e4:	005c      	lsls	r4, r3, #1
   167e6:	b5c0      	push	{r6, r7, lr}
   167e8:	031f      	lsls	r7, r3, #12
   167ea:	0fdb      	lsrs	r3, r3, #31
   167ec:	469a      	mov	sl, r3
   167ee:	4b17      	ldr	r3, [pc, #92]	; (1684c <__eqdf2+0x70>)
   167f0:	030e      	lsls	r6, r1, #12
   167f2:	004d      	lsls	r5, r1, #1
   167f4:	4684      	mov	ip, r0
   167f6:	4680      	mov	r8, r0
   167f8:	0b36      	lsrs	r6, r6, #12
   167fa:	0d6d      	lsrs	r5, r5, #21
   167fc:	0fc9      	lsrs	r1, r1, #31
   167fe:	4691      	mov	r9, r2
   16800:	0b3f      	lsrs	r7, r7, #12
   16802:	0d64      	lsrs	r4, r4, #21
   16804:	2001      	movs	r0, #1
   16806:	429d      	cmp	r5, r3
   16808:	d008      	beq.n	1681c <__eqdf2+0x40>
   1680a:	429c      	cmp	r4, r3
   1680c:	d001      	beq.n	16812 <__eqdf2+0x36>
   1680e:	42a5      	cmp	r5, r4
   16810:	d00b      	beq.n	1682a <__eqdf2+0x4e>
   16812:	bc1c      	pop	{r2, r3, r4}
   16814:	4690      	mov	r8, r2
   16816:	4699      	mov	r9, r3
   16818:	46a2      	mov	sl, r4
   1681a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1681c:	4663      	mov	r3, ip
   1681e:	4333      	orrs	r3, r6
   16820:	d1f7      	bne.n	16812 <__eqdf2+0x36>
   16822:	42ac      	cmp	r4, r5
   16824:	d1f5      	bne.n	16812 <__eqdf2+0x36>
   16826:	433a      	orrs	r2, r7
   16828:	d1f3      	bne.n	16812 <__eqdf2+0x36>
   1682a:	2001      	movs	r0, #1
   1682c:	42be      	cmp	r6, r7
   1682e:	d1f0      	bne.n	16812 <__eqdf2+0x36>
   16830:	45c8      	cmp	r8, r9
   16832:	d1ee      	bne.n	16812 <__eqdf2+0x36>
   16834:	4551      	cmp	r1, sl
   16836:	d007      	beq.n	16848 <__eqdf2+0x6c>
   16838:	2d00      	cmp	r5, #0
   1683a:	d1ea      	bne.n	16812 <__eqdf2+0x36>
   1683c:	4663      	mov	r3, ip
   1683e:	431e      	orrs	r6, r3
   16840:	0030      	movs	r0, r6
   16842:	1e46      	subs	r6, r0, #1
   16844:	41b0      	sbcs	r0, r6
   16846:	e7e4      	b.n	16812 <__eqdf2+0x36>
   16848:	2000      	movs	r0, #0
   1684a:	e7e2      	b.n	16812 <__eqdf2+0x36>
   1684c:	000007ff 	.word	0x000007ff

00016850 <__gedf2>:
   16850:	b5f0      	push	{r4, r5, r6, r7, lr}
   16852:	4645      	mov	r5, r8
   16854:	46de      	mov	lr, fp
   16856:	4657      	mov	r7, sl
   16858:	464e      	mov	r6, r9
   1685a:	b5e0      	push	{r5, r6, r7, lr}
   1685c:	031f      	lsls	r7, r3, #12
   1685e:	0b3d      	lsrs	r5, r7, #12
   16860:	4f2c      	ldr	r7, [pc, #176]	; (16914 <__gedf2+0xc4>)
   16862:	030e      	lsls	r6, r1, #12
   16864:	004c      	lsls	r4, r1, #1
   16866:	46ab      	mov	fp, r5
   16868:	005d      	lsls	r5, r3, #1
   1686a:	4684      	mov	ip, r0
   1686c:	0b36      	lsrs	r6, r6, #12
   1686e:	0d64      	lsrs	r4, r4, #21
   16870:	0fc9      	lsrs	r1, r1, #31
   16872:	4690      	mov	r8, r2
   16874:	0d6d      	lsrs	r5, r5, #21
   16876:	0fdb      	lsrs	r3, r3, #31
   16878:	42bc      	cmp	r4, r7
   1687a:	d02a      	beq.n	168d2 <__gedf2+0x82>
   1687c:	4f25      	ldr	r7, [pc, #148]	; (16914 <__gedf2+0xc4>)
   1687e:	42bd      	cmp	r5, r7
   16880:	d02d      	beq.n	168de <__gedf2+0x8e>
   16882:	2c00      	cmp	r4, #0
   16884:	d10f      	bne.n	168a6 <__gedf2+0x56>
   16886:	4330      	orrs	r0, r6
   16888:	0007      	movs	r7, r0
   1688a:	4681      	mov	r9, r0
   1688c:	4278      	negs	r0, r7
   1688e:	4178      	adcs	r0, r7
   16890:	b2c0      	uxtb	r0, r0
   16892:	2d00      	cmp	r5, #0
   16894:	d117      	bne.n	168c6 <__gedf2+0x76>
   16896:	465f      	mov	r7, fp
   16898:	433a      	orrs	r2, r7
   1689a:	d114      	bne.n	168c6 <__gedf2+0x76>
   1689c:	464b      	mov	r3, r9
   1689e:	2000      	movs	r0, #0
   168a0:	2b00      	cmp	r3, #0
   168a2:	d00a      	beq.n	168ba <__gedf2+0x6a>
   168a4:	e006      	b.n	168b4 <__gedf2+0x64>
   168a6:	2d00      	cmp	r5, #0
   168a8:	d102      	bne.n	168b0 <__gedf2+0x60>
   168aa:	4658      	mov	r0, fp
   168ac:	4302      	orrs	r2, r0
   168ae:	d001      	beq.n	168b4 <__gedf2+0x64>
   168b0:	4299      	cmp	r1, r3
   168b2:	d018      	beq.n	168e6 <__gedf2+0x96>
   168b4:	4248      	negs	r0, r1
   168b6:	2101      	movs	r1, #1
   168b8:	4308      	orrs	r0, r1
   168ba:	bc3c      	pop	{r2, r3, r4, r5}
   168bc:	4690      	mov	r8, r2
   168be:	4699      	mov	r9, r3
   168c0:	46a2      	mov	sl, r4
   168c2:	46ab      	mov	fp, r5
   168c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   168c6:	2800      	cmp	r0, #0
   168c8:	d0f2      	beq.n	168b0 <__gedf2+0x60>
   168ca:	2001      	movs	r0, #1
   168cc:	3b01      	subs	r3, #1
   168ce:	4318      	orrs	r0, r3
   168d0:	e7f3      	b.n	168ba <__gedf2+0x6a>
   168d2:	0037      	movs	r7, r6
   168d4:	4307      	orrs	r7, r0
   168d6:	d0d1      	beq.n	1687c <__gedf2+0x2c>
   168d8:	2002      	movs	r0, #2
   168da:	4240      	negs	r0, r0
   168dc:	e7ed      	b.n	168ba <__gedf2+0x6a>
   168de:	465f      	mov	r7, fp
   168e0:	4317      	orrs	r7, r2
   168e2:	d0ce      	beq.n	16882 <__gedf2+0x32>
   168e4:	e7f8      	b.n	168d8 <__gedf2+0x88>
   168e6:	42ac      	cmp	r4, r5
   168e8:	dce4      	bgt.n	168b4 <__gedf2+0x64>
   168ea:	da03      	bge.n	168f4 <__gedf2+0xa4>
   168ec:	1e48      	subs	r0, r1, #1
   168ee:	2101      	movs	r1, #1
   168f0:	4308      	orrs	r0, r1
   168f2:	e7e2      	b.n	168ba <__gedf2+0x6a>
   168f4:	455e      	cmp	r6, fp
   168f6:	d8dd      	bhi.n	168b4 <__gedf2+0x64>
   168f8:	d006      	beq.n	16908 <__gedf2+0xb8>
   168fa:	2000      	movs	r0, #0
   168fc:	455e      	cmp	r6, fp
   168fe:	d2dc      	bcs.n	168ba <__gedf2+0x6a>
   16900:	2301      	movs	r3, #1
   16902:	1e48      	subs	r0, r1, #1
   16904:	4318      	orrs	r0, r3
   16906:	e7d8      	b.n	168ba <__gedf2+0x6a>
   16908:	45c4      	cmp	ip, r8
   1690a:	d8d3      	bhi.n	168b4 <__gedf2+0x64>
   1690c:	2000      	movs	r0, #0
   1690e:	45c4      	cmp	ip, r8
   16910:	d3f6      	bcc.n	16900 <__gedf2+0xb0>
   16912:	e7d2      	b.n	168ba <__gedf2+0x6a>
   16914:	000007ff 	.word	0x000007ff

00016918 <__ledf2>:
   16918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1691a:	464e      	mov	r6, r9
   1691c:	4645      	mov	r5, r8
   1691e:	46de      	mov	lr, fp
   16920:	4657      	mov	r7, sl
   16922:	005c      	lsls	r4, r3, #1
   16924:	b5e0      	push	{r5, r6, r7, lr}
   16926:	031f      	lsls	r7, r3, #12
   16928:	0fdb      	lsrs	r3, r3, #31
   1692a:	4699      	mov	r9, r3
   1692c:	4b2a      	ldr	r3, [pc, #168]	; (169d8 <__ledf2+0xc0>)
   1692e:	030e      	lsls	r6, r1, #12
   16930:	004d      	lsls	r5, r1, #1
   16932:	0fc9      	lsrs	r1, r1, #31
   16934:	4684      	mov	ip, r0
   16936:	0b36      	lsrs	r6, r6, #12
   16938:	0d6d      	lsrs	r5, r5, #21
   1693a:	468b      	mov	fp, r1
   1693c:	4690      	mov	r8, r2
   1693e:	0b3f      	lsrs	r7, r7, #12
   16940:	0d64      	lsrs	r4, r4, #21
   16942:	429d      	cmp	r5, r3
   16944:	d020      	beq.n	16988 <__ledf2+0x70>
   16946:	4b24      	ldr	r3, [pc, #144]	; (169d8 <__ledf2+0xc0>)
   16948:	429c      	cmp	r4, r3
   1694a:	d022      	beq.n	16992 <__ledf2+0x7a>
   1694c:	2d00      	cmp	r5, #0
   1694e:	d112      	bne.n	16976 <__ledf2+0x5e>
   16950:	4330      	orrs	r0, r6
   16952:	4243      	negs	r3, r0
   16954:	4143      	adcs	r3, r0
   16956:	b2db      	uxtb	r3, r3
   16958:	2c00      	cmp	r4, #0
   1695a:	d01f      	beq.n	1699c <__ledf2+0x84>
   1695c:	2b00      	cmp	r3, #0
   1695e:	d00c      	beq.n	1697a <__ledf2+0x62>
   16960:	464b      	mov	r3, r9
   16962:	2001      	movs	r0, #1
   16964:	3b01      	subs	r3, #1
   16966:	4303      	orrs	r3, r0
   16968:	0018      	movs	r0, r3
   1696a:	bc3c      	pop	{r2, r3, r4, r5}
   1696c:	4690      	mov	r8, r2
   1696e:	4699      	mov	r9, r3
   16970:	46a2      	mov	sl, r4
   16972:	46ab      	mov	fp, r5
   16974:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16976:	2c00      	cmp	r4, #0
   16978:	d016      	beq.n	169a8 <__ledf2+0x90>
   1697a:	45cb      	cmp	fp, r9
   1697c:	d017      	beq.n	169ae <__ledf2+0x96>
   1697e:	465b      	mov	r3, fp
   16980:	4259      	negs	r1, r3
   16982:	2301      	movs	r3, #1
   16984:	430b      	orrs	r3, r1
   16986:	e7ef      	b.n	16968 <__ledf2+0x50>
   16988:	0031      	movs	r1, r6
   1698a:	2302      	movs	r3, #2
   1698c:	4301      	orrs	r1, r0
   1698e:	d1eb      	bne.n	16968 <__ledf2+0x50>
   16990:	e7d9      	b.n	16946 <__ledf2+0x2e>
   16992:	0039      	movs	r1, r7
   16994:	2302      	movs	r3, #2
   16996:	4311      	orrs	r1, r2
   16998:	d1e6      	bne.n	16968 <__ledf2+0x50>
   1699a:	e7d7      	b.n	1694c <__ledf2+0x34>
   1699c:	433a      	orrs	r2, r7
   1699e:	d1dd      	bne.n	1695c <__ledf2+0x44>
   169a0:	2300      	movs	r3, #0
   169a2:	2800      	cmp	r0, #0
   169a4:	d0e0      	beq.n	16968 <__ledf2+0x50>
   169a6:	e7ea      	b.n	1697e <__ledf2+0x66>
   169a8:	433a      	orrs	r2, r7
   169aa:	d1e6      	bne.n	1697a <__ledf2+0x62>
   169ac:	e7e7      	b.n	1697e <__ledf2+0x66>
   169ae:	42a5      	cmp	r5, r4
   169b0:	dce5      	bgt.n	1697e <__ledf2+0x66>
   169b2:	db05      	blt.n	169c0 <__ledf2+0xa8>
   169b4:	42be      	cmp	r6, r7
   169b6:	d8e2      	bhi.n	1697e <__ledf2+0x66>
   169b8:	d007      	beq.n	169ca <__ledf2+0xb2>
   169ba:	2300      	movs	r3, #0
   169bc:	42be      	cmp	r6, r7
   169be:	d2d3      	bcs.n	16968 <__ledf2+0x50>
   169c0:	4659      	mov	r1, fp
   169c2:	2301      	movs	r3, #1
   169c4:	3901      	subs	r1, #1
   169c6:	430b      	orrs	r3, r1
   169c8:	e7ce      	b.n	16968 <__ledf2+0x50>
   169ca:	45c4      	cmp	ip, r8
   169cc:	d8d7      	bhi.n	1697e <__ledf2+0x66>
   169ce:	2300      	movs	r3, #0
   169d0:	45c4      	cmp	ip, r8
   169d2:	d3f5      	bcc.n	169c0 <__ledf2+0xa8>
   169d4:	e7c8      	b.n	16968 <__ledf2+0x50>
   169d6:	46c0      	nop			; (mov r8, r8)
   169d8:	000007ff 	.word	0x000007ff

000169dc <__aeabi_dmul>:
   169dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   169de:	4657      	mov	r7, sl
   169e0:	4645      	mov	r5, r8
   169e2:	46de      	mov	lr, fp
   169e4:	464e      	mov	r6, r9
   169e6:	b5e0      	push	{r5, r6, r7, lr}
   169e8:	030c      	lsls	r4, r1, #12
   169ea:	4698      	mov	r8, r3
   169ec:	004e      	lsls	r6, r1, #1
   169ee:	0b23      	lsrs	r3, r4, #12
   169f0:	b087      	sub	sp, #28
   169f2:	0007      	movs	r7, r0
   169f4:	4692      	mov	sl, r2
   169f6:	469b      	mov	fp, r3
   169f8:	0d76      	lsrs	r6, r6, #21
   169fa:	0fcd      	lsrs	r5, r1, #31
   169fc:	2e00      	cmp	r6, #0
   169fe:	d06b      	beq.n	16ad8 <__aeabi_dmul+0xfc>
   16a00:	4b6d      	ldr	r3, [pc, #436]	; (16bb8 <__aeabi_dmul+0x1dc>)
   16a02:	429e      	cmp	r6, r3
   16a04:	d035      	beq.n	16a72 <__aeabi_dmul+0x96>
   16a06:	2480      	movs	r4, #128	; 0x80
   16a08:	465b      	mov	r3, fp
   16a0a:	0f42      	lsrs	r2, r0, #29
   16a0c:	0424      	lsls	r4, r4, #16
   16a0e:	00db      	lsls	r3, r3, #3
   16a10:	4314      	orrs	r4, r2
   16a12:	431c      	orrs	r4, r3
   16a14:	00c3      	lsls	r3, r0, #3
   16a16:	4699      	mov	r9, r3
   16a18:	4b68      	ldr	r3, [pc, #416]	; (16bbc <__aeabi_dmul+0x1e0>)
   16a1a:	46a3      	mov	fp, r4
   16a1c:	469c      	mov	ip, r3
   16a1e:	2300      	movs	r3, #0
   16a20:	2700      	movs	r7, #0
   16a22:	4466      	add	r6, ip
   16a24:	9302      	str	r3, [sp, #8]
   16a26:	4643      	mov	r3, r8
   16a28:	031c      	lsls	r4, r3, #12
   16a2a:	005a      	lsls	r2, r3, #1
   16a2c:	0fdb      	lsrs	r3, r3, #31
   16a2e:	4650      	mov	r0, sl
   16a30:	0b24      	lsrs	r4, r4, #12
   16a32:	0d52      	lsrs	r2, r2, #21
   16a34:	4698      	mov	r8, r3
   16a36:	d100      	bne.n	16a3a <__aeabi_dmul+0x5e>
   16a38:	e076      	b.n	16b28 <__aeabi_dmul+0x14c>
   16a3a:	4b5f      	ldr	r3, [pc, #380]	; (16bb8 <__aeabi_dmul+0x1dc>)
   16a3c:	429a      	cmp	r2, r3
   16a3e:	d06d      	beq.n	16b1c <__aeabi_dmul+0x140>
   16a40:	2380      	movs	r3, #128	; 0x80
   16a42:	0f41      	lsrs	r1, r0, #29
   16a44:	041b      	lsls	r3, r3, #16
   16a46:	430b      	orrs	r3, r1
   16a48:	495c      	ldr	r1, [pc, #368]	; (16bbc <__aeabi_dmul+0x1e0>)
   16a4a:	00e4      	lsls	r4, r4, #3
   16a4c:	468c      	mov	ip, r1
   16a4e:	431c      	orrs	r4, r3
   16a50:	00c3      	lsls	r3, r0, #3
   16a52:	2000      	movs	r0, #0
   16a54:	4462      	add	r2, ip
   16a56:	4641      	mov	r1, r8
   16a58:	18b6      	adds	r6, r6, r2
   16a5a:	4069      	eors	r1, r5
   16a5c:	1c72      	adds	r2, r6, #1
   16a5e:	9101      	str	r1, [sp, #4]
   16a60:	4694      	mov	ip, r2
   16a62:	4307      	orrs	r7, r0
   16a64:	2f0f      	cmp	r7, #15
   16a66:	d900      	bls.n	16a6a <__aeabi_dmul+0x8e>
   16a68:	e0b0      	b.n	16bcc <__aeabi_dmul+0x1f0>
   16a6a:	4a55      	ldr	r2, [pc, #340]	; (16bc0 <__aeabi_dmul+0x1e4>)
   16a6c:	00bf      	lsls	r7, r7, #2
   16a6e:	59d2      	ldr	r2, [r2, r7]
   16a70:	4697      	mov	pc, r2
   16a72:	465b      	mov	r3, fp
   16a74:	4303      	orrs	r3, r0
   16a76:	4699      	mov	r9, r3
   16a78:	d000      	beq.n	16a7c <__aeabi_dmul+0xa0>
   16a7a:	e087      	b.n	16b8c <__aeabi_dmul+0x1b0>
   16a7c:	2300      	movs	r3, #0
   16a7e:	469b      	mov	fp, r3
   16a80:	3302      	adds	r3, #2
   16a82:	2708      	movs	r7, #8
   16a84:	9302      	str	r3, [sp, #8]
   16a86:	e7ce      	b.n	16a26 <__aeabi_dmul+0x4a>
   16a88:	4642      	mov	r2, r8
   16a8a:	9201      	str	r2, [sp, #4]
   16a8c:	2802      	cmp	r0, #2
   16a8e:	d067      	beq.n	16b60 <__aeabi_dmul+0x184>
   16a90:	2803      	cmp	r0, #3
   16a92:	d100      	bne.n	16a96 <__aeabi_dmul+0xba>
   16a94:	e20e      	b.n	16eb4 <__aeabi_dmul+0x4d8>
   16a96:	2801      	cmp	r0, #1
   16a98:	d000      	beq.n	16a9c <__aeabi_dmul+0xc0>
   16a9a:	e162      	b.n	16d62 <__aeabi_dmul+0x386>
   16a9c:	2300      	movs	r3, #0
   16a9e:	2400      	movs	r4, #0
   16aa0:	2200      	movs	r2, #0
   16aa2:	4699      	mov	r9, r3
   16aa4:	9901      	ldr	r1, [sp, #4]
   16aa6:	4001      	ands	r1, r0
   16aa8:	b2cd      	uxtb	r5, r1
   16aaa:	2100      	movs	r1, #0
   16aac:	0312      	lsls	r2, r2, #12
   16aae:	0d0b      	lsrs	r3, r1, #20
   16ab0:	0b12      	lsrs	r2, r2, #12
   16ab2:	051b      	lsls	r3, r3, #20
   16ab4:	4313      	orrs	r3, r2
   16ab6:	4a43      	ldr	r2, [pc, #268]	; (16bc4 <__aeabi_dmul+0x1e8>)
   16ab8:	0524      	lsls	r4, r4, #20
   16aba:	4013      	ands	r3, r2
   16abc:	431c      	orrs	r4, r3
   16abe:	0064      	lsls	r4, r4, #1
   16ac0:	07ed      	lsls	r5, r5, #31
   16ac2:	0864      	lsrs	r4, r4, #1
   16ac4:	432c      	orrs	r4, r5
   16ac6:	4648      	mov	r0, r9
   16ac8:	0021      	movs	r1, r4
   16aca:	b007      	add	sp, #28
   16acc:	bc3c      	pop	{r2, r3, r4, r5}
   16ace:	4690      	mov	r8, r2
   16ad0:	4699      	mov	r9, r3
   16ad2:	46a2      	mov	sl, r4
   16ad4:	46ab      	mov	fp, r5
   16ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ad8:	4303      	orrs	r3, r0
   16ada:	4699      	mov	r9, r3
   16adc:	d04f      	beq.n	16b7e <__aeabi_dmul+0x1a2>
   16ade:	465b      	mov	r3, fp
   16ae0:	2b00      	cmp	r3, #0
   16ae2:	d100      	bne.n	16ae6 <__aeabi_dmul+0x10a>
   16ae4:	e189      	b.n	16dfa <__aeabi_dmul+0x41e>
   16ae6:	4658      	mov	r0, fp
   16ae8:	f000 fe2e 	bl	17748 <__clzsi2>
   16aec:	0003      	movs	r3, r0
   16aee:	3b0b      	subs	r3, #11
   16af0:	2b1c      	cmp	r3, #28
   16af2:	dd00      	ble.n	16af6 <__aeabi_dmul+0x11a>
   16af4:	e17a      	b.n	16dec <__aeabi_dmul+0x410>
   16af6:	221d      	movs	r2, #29
   16af8:	1ad3      	subs	r3, r2, r3
   16afa:	003a      	movs	r2, r7
   16afc:	0001      	movs	r1, r0
   16afe:	465c      	mov	r4, fp
   16b00:	40da      	lsrs	r2, r3
   16b02:	3908      	subs	r1, #8
   16b04:	408c      	lsls	r4, r1
   16b06:	0013      	movs	r3, r2
   16b08:	408f      	lsls	r7, r1
   16b0a:	4323      	orrs	r3, r4
   16b0c:	469b      	mov	fp, r3
   16b0e:	46b9      	mov	r9, r7
   16b10:	2300      	movs	r3, #0
   16b12:	4e2d      	ldr	r6, [pc, #180]	; (16bc8 <__aeabi_dmul+0x1ec>)
   16b14:	2700      	movs	r7, #0
   16b16:	1a36      	subs	r6, r6, r0
   16b18:	9302      	str	r3, [sp, #8]
   16b1a:	e784      	b.n	16a26 <__aeabi_dmul+0x4a>
   16b1c:	4653      	mov	r3, sl
   16b1e:	4323      	orrs	r3, r4
   16b20:	d12a      	bne.n	16b78 <__aeabi_dmul+0x19c>
   16b22:	2400      	movs	r4, #0
   16b24:	2002      	movs	r0, #2
   16b26:	e796      	b.n	16a56 <__aeabi_dmul+0x7a>
   16b28:	4653      	mov	r3, sl
   16b2a:	4323      	orrs	r3, r4
   16b2c:	d020      	beq.n	16b70 <__aeabi_dmul+0x194>
   16b2e:	2c00      	cmp	r4, #0
   16b30:	d100      	bne.n	16b34 <__aeabi_dmul+0x158>
   16b32:	e157      	b.n	16de4 <__aeabi_dmul+0x408>
   16b34:	0020      	movs	r0, r4
   16b36:	f000 fe07 	bl	17748 <__clzsi2>
   16b3a:	0003      	movs	r3, r0
   16b3c:	3b0b      	subs	r3, #11
   16b3e:	2b1c      	cmp	r3, #28
   16b40:	dd00      	ble.n	16b44 <__aeabi_dmul+0x168>
   16b42:	e149      	b.n	16dd8 <__aeabi_dmul+0x3fc>
   16b44:	211d      	movs	r1, #29
   16b46:	1acb      	subs	r3, r1, r3
   16b48:	4651      	mov	r1, sl
   16b4a:	0002      	movs	r2, r0
   16b4c:	40d9      	lsrs	r1, r3
   16b4e:	4653      	mov	r3, sl
   16b50:	3a08      	subs	r2, #8
   16b52:	4094      	lsls	r4, r2
   16b54:	4093      	lsls	r3, r2
   16b56:	430c      	orrs	r4, r1
   16b58:	4a1b      	ldr	r2, [pc, #108]	; (16bc8 <__aeabi_dmul+0x1ec>)
   16b5a:	1a12      	subs	r2, r2, r0
   16b5c:	2000      	movs	r0, #0
   16b5e:	e77a      	b.n	16a56 <__aeabi_dmul+0x7a>
   16b60:	2501      	movs	r5, #1
   16b62:	9b01      	ldr	r3, [sp, #4]
   16b64:	4c14      	ldr	r4, [pc, #80]	; (16bb8 <__aeabi_dmul+0x1dc>)
   16b66:	401d      	ands	r5, r3
   16b68:	2300      	movs	r3, #0
   16b6a:	2200      	movs	r2, #0
   16b6c:	4699      	mov	r9, r3
   16b6e:	e79c      	b.n	16aaa <__aeabi_dmul+0xce>
   16b70:	2400      	movs	r4, #0
   16b72:	2200      	movs	r2, #0
   16b74:	2001      	movs	r0, #1
   16b76:	e76e      	b.n	16a56 <__aeabi_dmul+0x7a>
   16b78:	4653      	mov	r3, sl
   16b7a:	2003      	movs	r0, #3
   16b7c:	e76b      	b.n	16a56 <__aeabi_dmul+0x7a>
   16b7e:	2300      	movs	r3, #0
   16b80:	469b      	mov	fp, r3
   16b82:	3301      	adds	r3, #1
   16b84:	2704      	movs	r7, #4
   16b86:	2600      	movs	r6, #0
   16b88:	9302      	str	r3, [sp, #8]
   16b8a:	e74c      	b.n	16a26 <__aeabi_dmul+0x4a>
   16b8c:	2303      	movs	r3, #3
   16b8e:	4681      	mov	r9, r0
   16b90:	270c      	movs	r7, #12
   16b92:	9302      	str	r3, [sp, #8]
   16b94:	e747      	b.n	16a26 <__aeabi_dmul+0x4a>
   16b96:	2280      	movs	r2, #128	; 0x80
   16b98:	2300      	movs	r3, #0
   16b9a:	2500      	movs	r5, #0
   16b9c:	0312      	lsls	r2, r2, #12
   16b9e:	4699      	mov	r9, r3
   16ba0:	4c05      	ldr	r4, [pc, #20]	; (16bb8 <__aeabi_dmul+0x1dc>)
   16ba2:	e782      	b.n	16aaa <__aeabi_dmul+0xce>
   16ba4:	465c      	mov	r4, fp
   16ba6:	464b      	mov	r3, r9
   16ba8:	9802      	ldr	r0, [sp, #8]
   16baa:	e76f      	b.n	16a8c <__aeabi_dmul+0xb0>
   16bac:	465c      	mov	r4, fp
   16bae:	464b      	mov	r3, r9
   16bb0:	9501      	str	r5, [sp, #4]
   16bb2:	9802      	ldr	r0, [sp, #8]
   16bb4:	e76a      	b.n	16a8c <__aeabi_dmul+0xb0>
   16bb6:	46c0      	nop			; (mov r8, r8)
   16bb8:	000007ff 	.word	0x000007ff
   16bbc:	fffffc01 	.word	0xfffffc01
   16bc0:	00019748 	.word	0x00019748
   16bc4:	800fffff 	.word	0x800fffff
   16bc8:	fffffc0d 	.word	0xfffffc0d
   16bcc:	464a      	mov	r2, r9
   16bce:	4649      	mov	r1, r9
   16bd0:	0c17      	lsrs	r7, r2, #16
   16bd2:	0c1a      	lsrs	r2, r3, #16
   16bd4:	041b      	lsls	r3, r3, #16
   16bd6:	0c1b      	lsrs	r3, r3, #16
   16bd8:	0408      	lsls	r0, r1, #16
   16bda:	0019      	movs	r1, r3
   16bdc:	0c00      	lsrs	r0, r0, #16
   16bde:	4341      	muls	r1, r0
   16be0:	0015      	movs	r5, r2
   16be2:	4688      	mov	r8, r1
   16be4:	0019      	movs	r1, r3
   16be6:	437d      	muls	r5, r7
   16be8:	4379      	muls	r1, r7
   16bea:	9503      	str	r5, [sp, #12]
   16bec:	4689      	mov	r9, r1
   16bee:	0029      	movs	r1, r5
   16bf0:	0015      	movs	r5, r2
   16bf2:	4345      	muls	r5, r0
   16bf4:	444d      	add	r5, r9
   16bf6:	9502      	str	r5, [sp, #8]
   16bf8:	4645      	mov	r5, r8
   16bfa:	0c2d      	lsrs	r5, r5, #16
   16bfc:	46aa      	mov	sl, r5
   16bfe:	9d02      	ldr	r5, [sp, #8]
   16c00:	4455      	add	r5, sl
   16c02:	45a9      	cmp	r9, r5
   16c04:	d906      	bls.n	16c14 <__aeabi_dmul+0x238>
   16c06:	468a      	mov	sl, r1
   16c08:	2180      	movs	r1, #128	; 0x80
   16c0a:	0249      	lsls	r1, r1, #9
   16c0c:	4689      	mov	r9, r1
   16c0e:	44ca      	add	sl, r9
   16c10:	4651      	mov	r1, sl
   16c12:	9103      	str	r1, [sp, #12]
   16c14:	0c29      	lsrs	r1, r5, #16
   16c16:	9104      	str	r1, [sp, #16]
   16c18:	4641      	mov	r1, r8
   16c1a:	0409      	lsls	r1, r1, #16
   16c1c:	042d      	lsls	r5, r5, #16
   16c1e:	0c09      	lsrs	r1, r1, #16
   16c20:	4688      	mov	r8, r1
   16c22:	0029      	movs	r1, r5
   16c24:	0c25      	lsrs	r5, r4, #16
   16c26:	0424      	lsls	r4, r4, #16
   16c28:	4441      	add	r1, r8
   16c2a:	0c24      	lsrs	r4, r4, #16
   16c2c:	9105      	str	r1, [sp, #20]
   16c2e:	0021      	movs	r1, r4
   16c30:	4341      	muls	r1, r0
   16c32:	4688      	mov	r8, r1
   16c34:	0021      	movs	r1, r4
   16c36:	4379      	muls	r1, r7
   16c38:	468a      	mov	sl, r1
   16c3a:	4368      	muls	r0, r5
   16c3c:	4641      	mov	r1, r8
   16c3e:	4450      	add	r0, sl
   16c40:	4681      	mov	r9, r0
   16c42:	0c08      	lsrs	r0, r1, #16
   16c44:	4448      	add	r0, r9
   16c46:	436f      	muls	r7, r5
   16c48:	4582      	cmp	sl, r0
   16c4a:	d903      	bls.n	16c54 <__aeabi_dmul+0x278>
   16c4c:	2180      	movs	r1, #128	; 0x80
   16c4e:	0249      	lsls	r1, r1, #9
   16c50:	4689      	mov	r9, r1
   16c52:	444f      	add	r7, r9
   16c54:	0c01      	lsrs	r1, r0, #16
   16c56:	4689      	mov	r9, r1
   16c58:	0039      	movs	r1, r7
   16c5a:	4449      	add	r1, r9
   16c5c:	9102      	str	r1, [sp, #8]
   16c5e:	4641      	mov	r1, r8
   16c60:	040f      	lsls	r7, r1, #16
   16c62:	9904      	ldr	r1, [sp, #16]
   16c64:	0c3f      	lsrs	r7, r7, #16
   16c66:	4688      	mov	r8, r1
   16c68:	0400      	lsls	r0, r0, #16
   16c6a:	19c0      	adds	r0, r0, r7
   16c6c:	4480      	add	r8, r0
   16c6e:	4641      	mov	r1, r8
   16c70:	9104      	str	r1, [sp, #16]
   16c72:	4659      	mov	r1, fp
   16c74:	0c0f      	lsrs	r7, r1, #16
   16c76:	0409      	lsls	r1, r1, #16
   16c78:	0c09      	lsrs	r1, r1, #16
   16c7a:	4688      	mov	r8, r1
   16c7c:	4359      	muls	r1, r3
   16c7e:	468a      	mov	sl, r1
   16c80:	0039      	movs	r1, r7
   16c82:	4351      	muls	r1, r2
   16c84:	4689      	mov	r9, r1
   16c86:	4641      	mov	r1, r8
   16c88:	434a      	muls	r2, r1
   16c8a:	4651      	mov	r1, sl
   16c8c:	0c09      	lsrs	r1, r1, #16
   16c8e:	468b      	mov	fp, r1
   16c90:	437b      	muls	r3, r7
   16c92:	18d2      	adds	r2, r2, r3
   16c94:	445a      	add	r2, fp
   16c96:	4293      	cmp	r3, r2
   16c98:	d903      	bls.n	16ca2 <__aeabi_dmul+0x2c6>
   16c9a:	2380      	movs	r3, #128	; 0x80
   16c9c:	025b      	lsls	r3, r3, #9
   16c9e:	469b      	mov	fp, r3
   16ca0:	44d9      	add	r9, fp
   16ca2:	4651      	mov	r1, sl
   16ca4:	0409      	lsls	r1, r1, #16
   16ca6:	0c09      	lsrs	r1, r1, #16
   16ca8:	468a      	mov	sl, r1
   16caa:	4641      	mov	r1, r8
   16cac:	4361      	muls	r1, r4
   16cae:	437c      	muls	r4, r7
   16cb0:	0c13      	lsrs	r3, r2, #16
   16cb2:	0412      	lsls	r2, r2, #16
   16cb4:	444b      	add	r3, r9
   16cb6:	4452      	add	r2, sl
   16cb8:	46a1      	mov	r9, r4
   16cba:	468a      	mov	sl, r1
   16cbc:	003c      	movs	r4, r7
   16cbe:	4641      	mov	r1, r8
   16cc0:	436c      	muls	r4, r5
   16cc2:	434d      	muls	r5, r1
   16cc4:	4651      	mov	r1, sl
   16cc6:	444d      	add	r5, r9
   16cc8:	0c0f      	lsrs	r7, r1, #16
   16cca:	197d      	adds	r5, r7, r5
   16ccc:	45a9      	cmp	r9, r5
   16cce:	d903      	bls.n	16cd8 <__aeabi_dmul+0x2fc>
   16cd0:	2180      	movs	r1, #128	; 0x80
   16cd2:	0249      	lsls	r1, r1, #9
   16cd4:	4688      	mov	r8, r1
   16cd6:	4444      	add	r4, r8
   16cd8:	9f04      	ldr	r7, [sp, #16]
   16cda:	9903      	ldr	r1, [sp, #12]
   16cdc:	46b8      	mov	r8, r7
   16cde:	4441      	add	r1, r8
   16ce0:	468b      	mov	fp, r1
   16ce2:	4583      	cmp	fp, r0
   16ce4:	4180      	sbcs	r0, r0
   16ce6:	4241      	negs	r1, r0
   16ce8:	4688      	mov	r8, r1
   16cea:	4651      	mov	r1, sl
   16cec:	0408      	lsls	r0, r1, #16
   16cee:	042f      	lsls	r7, r5, #16
   16cf0:	0c00      	lsrs	r0, r0, #16
   16cf2:	183f      	adds	r7, r7, r0
   16cf4:	4658      	mov	r0, fp
   16cf6:	9902      	ldr	r1, [sp, #8]
   16cf8:	1810      	adds	r0, r2, r0
   16cfa:	4689      	mov	r9, r1
   16cfc:	4290      	cmp	r0, r2
   16cfe:	4192      	sbcs	r2, r2
   16d00:	444f      	add	r7, r9
   16d02:	46ba      	mov	sl, r7
   16d04:	4252      	negs	r2, r2
   16d06:	4699      	mov	r9, r3
   16d08:	4693      	mov	fp, r2
   16d0a:	44c2      	add	sl, r8
   16d0c:	44d1      	add	r9, sl
   16d0e:	44cb      	add	fp, r9
   16d10:	428f      	cmp	r7, r1
   16d12:	41bf      	sbcs	r7, r7
   16d14:	45c2      	cmp	sl, r8
   16d16:	4189      	sbcs	r1, r1
   16d18:	4599      	cmp	r9, r3
   16d1a:	419b      	sbcs	r3, r3
   16d1c:	4593      	cmp	fp, r2
   16d1e:	4192      	sbcs	r2, r2
   16d20:	427f      	negs	r7, r7
   16d22:	4249      	negs	r1, r1
   16d24:	0c2d      	lsrs	r5, r5, #16
   16d26:	4252      	negs	r2, r2
   16d28:	430f      	orrs	r7, r1
   16d2a:	425b      	negs	r3, r3
   16d2c:	4313      	orrs	r3, r2
   16d2e:	197f      	adds	r7, r7, r5
   16d30:	18ff      	adds	r7, r7, r3
   16d32:	465b      	mov	r3, fp
   16d34:	193c      	adds	r4, r7, r4
   16d36:	0ddb      	lsrs	r3, r3, #23
   16d38:	9a05      	ldr	r2, [sp, #20]
   16d3a:	0264      	lsls	r4, r4, #9
   16d3c:	431c      	orrs	r4, r3
   16d3e:	0243      	lsls	r3, r0, #9
   16d40:	4313      	orrs	r3, r2
   16d42:	1e5d      	subs	r5, r3, #1
   16d44:	41ab      	sbcs	r3, r5
   16d46:	465a      	mov	r2, fp
   16d48:	0dc0      	lsrs	r0, r0, #23
   16d4a:	4303      	orrs	r3, r0
   16d4c:	0252      	lsls	r2, r2, #9
   16d4e:	4313      	orrs	r3, r2
   16d50:	01e2      	lsls	r2, r4, #7
   16d52:	d556      	bpl.n	16e02 <__aeabi_dmul+0x426>
   16d54:	2001      	movs	r0, #1
   16d56:	085a      	lsrs	r2, r3, #1
   16d58:	4003      	ands	r3, r0
   16d5a:	4313      	orrs	r3, r2
   16d5c:	07e2      	lsls	r2, r4, #31
   16d5e:	4313      	orrs	r3, r2
   16d60:	0864      	lsrs	r4, r4, #1
   16d62:	485a      	ldr	r0, [pc, #360]	; (16ecc <__aeabi_dmul+0x4f0>)
   16d64:	4460      	add	r0, ip
   16d66:	2800      	cmp	r0, #0
   16d68:	dd4d      	ble.n	16e06 <__aeabi_dmul+0x42a>
   16d6a:	075a      	lsls	r2, r3, #29
   16d6c:	d009      	beq.n	16d82 <__aeabi_dmul+0x3a6>
   16d6e:	220f      	movs	r2, #15
   16d70:	401a      	ands	r2, r3
   16d72:	2a04      	cmp	r2, #4
   16d74:	d005      	beq.n	16d82 <__aeabi_dmul+0x3a6>
   16d76:	1d1a      	adds	r2, r3, #4
   16d78:	429a      	cmp	r2, r3
   16d7a:	419b      	sbcs	r3, r3
   16d7c:	425b      	negs	r3, r3
   16d7e:	18e4      	adds	r4, r4, r3
   16d80:	0013      	movs	r3, r2
   16d82:	01e2      	lsls	r2, r4, #7
   16d84:	d504      	bpl.n	16d90 <__aeabi_dmul+0x3b4>
   16d86:	2080      	movs	r0, #128	; 0x80
   16d88:	4a51      	ldr	r2, [pc, #324]	; (16ed0 <__aeabi_dmul+0x4f4>)
   16d8a:	00c0      	lsls	r0, r0, #3
   16d8c:	4014      	ands	r4, r2
   16d8e:	4460      	add	r0, ip
   16d90:	4a50      	ldr	r2, [pc, #320]	; (16ed4 <__aeabi_dmul+0x4f8>)
   16d92:	4290      	cmp	r0, r2
   16d94:	dd00      	ble.n	16d98 <__aeabi_dmul+0x3bc>
   16d96:	e6e3      	b.n	16b60 <__aeabi_dmul+0x184>
   16d98:	2501      	movs	r5, #1
   16d9a:	08db      	lsrs	r3, r3, #3
   16d9c:	0762      	lsls	r2, r4, #29
   16d9e:	431a      	orrs	r2, r3
   16da0:	0264      	lsls	r4, r4, #9
   16da2:	9b01      	ldr	r3, [sp, #4]
   16da4:	4691      	mov	r9, r2
   16da6:	0b22      	lsrs	r2, r4, #12
   16da8:	0544      	lsls	r4, r0, #21
   16daa:	0d64      	lsrs	r4, r4, #21
   16dac:	401d      	ands	r5, r3
   16dae:	e67c      	b.n	16aaa <__aeabi_dmul+0xce>
   16db0:	2280      	movs	r2, #128	; 0x80
   16db2:	4659      	mov	r1, fp
   16db4:	0312      	lsls	r2, r2, #12
   16db6:	4211      	tst	r1, r2
   16db8:	d008      	beq.n	16dcc <__aeabi_dmul+0x3f0>
   16dba:	4214      	tst	r4, r2
   16dbc:	d106      	bne.n	16dcc <__aeabi_dmul+0x3f0>
   16dbe:	4322      	orrs	r2, r4
   16dc0:	0312      	lsls	r2, r2, #12
   16dc2:	0b12      	lsrs	r2, r2, #12
   16dc4:	4645      	mov	r5, r8
   16dc6:	4699      	mov	r9, r3
   16dc8:	4c43      	ldr	r4, [pc, #268]	; (16ed8 <__aeabi_dmul+0x4fc>)
   16dca:	e66e      	b.n	16aaa <__aeabi_dmul+0xce>
   16dcc:	465b      	mov	r3, fp
   16dce:	431a      	orrs	r2, r3
   16dd0:	0312      	lsls	r2, r2, #12
   16dd2:	0b12      	lsrs	r2, r2, #12
   16dd4:	4c40      	ldr	r4, [pc, #256]	; (16ed8 <__aeabi_dmul+0x4fc>)
   16dd6:	e668      	b.n	16aaa <__aeabi_dmul+0xce>
   16dd8:	0003      	movs	r3, r0
   16dda:	4654      	mov	r4, sl
   16ddc:	3b28      	subs	r3, #40	; 0x28
   16dde:	409c      	lsls	r4, r3
   16de0:	2300      	movs	r3, #0
   16de2:	e6b9      	b.n	16b58 <__aeabi_dmul+0x17c>
   16de4:	f000 fcb0 	bl	17748 <__clzsi2>
   16de8:	3020      	adds	r0, #32
   16dea:	e6a6      	b.n	16b3a <__aeabi_dmul+0x15e>
   16dec:	0003      	movs	r3, r0
   16dee:	3b28      	subs	r3, #40	; 0x28
   16df0:	409f      	lsls	r7, r3
   16df2:	2300      	movs	r3, #0
   16df4:	46bb      	mov	fp, r7
   16df6:	4699      	mov	r9, r3
   16df8:	e68a      	b.n	16b10 <__aeabi_dmul+0x134>
   16dfa:	f000 fca5 	bl	17748 <__clzsi2>
   16dfe:	3020      	adds	r0, #32
   16e00:	e674      	b.n	16aec <__aeabi_dmul+0x110>
   16e02:	46b4      	mov	ip, r6
   16e04:	e7ad      	b.n	16d62 <__aeabi_dmul+0x386>
   16e06:	2501      	movs	r5, #1
   16e08:	1a2a      	subs	r2, r5, r0
   16e0a:	2a38      	cmp	r2, #56	; 0x38
   16e0c:	dd06      	ble.n	16e1c <__aeabi_dmul+0x440>
   16e0e:	9b01      	ldr	r3, [sp, #4]
   16e10:	2400      	movs	r4, #0
   16e12:	401d      	ands	r5, r3
   16e14:	2300      	movs	r3, #0
   16e16:	2200      	movs	r2, #0
   16e18:	4699      	mov	r9, r3
   16e1a:	e646      	b.n	16aaa <__aeabi_dmul+0xce>
   16e1c:	2a1f      	cmp	r2, #31
   16e1e:	dc21      	bgt.n	16e64 <__aeabi_dmul+0x488>
   16e20:	2520      	movs	r5, #32
   16e22:	0020      	movs	r0, r4
   16e24:	1aad      	subs	r5, r5, r2
   16e26:	001e      	movs	r6, r3
   16e28:	40ab      	lsls	r3, r5
   16e2a:	40a8      	lsls	r0, r5
   16e2c:	40d6      	lsrs	r6, r2
   16e2e:	1e5d      	subs	r5, r3, #1
   16e30:	41ab      	sbcs	r3, r5
   16e32:	4330      	orrs	r0, r6
   16e34:	4318      	orrs	r0, r3
   16e36:	40d4      	lsrs	r4, r2
   16e38:	0743      	lsls	r3, r0, #29
   16e3a:	d009      	beq.n	16e50 <__aeabi_dmul+0x474>
   16e3c:	230f      	movs	r3, #15
   16e3e:	4003      	ands	r3, r0
   16e40:	2b04      	cmp	r3, #4
   16e42:	d005      	beq.n	16e50 <__aeabi_dmul+0x474>
   16e44:	0003      	movs	r3, r0
   16e46:	1d18      	adds	r0, r3, #4
   16e48:	4298      	cmp	r0, r3
   16e4a:	419b      	sbcs	r3, r3
   16e4c:	425b      	negs	r3, r3
   16e4e:	18e4      	adds	r4, r4, r3
   16e50:	0223      	lsls	r3, r4, #8
   16e52:	d521      	bpl.n	16e98 <__aeabi_dmul+0x4bc>
   16e54:	2501      	movs	r5, #1
   16e56:	9b01      	ldr	r3, [sp, #4]
   16e58:	2401      	movs	r4, #1
   16e5a:	401d      	ands	r5, r3
   16e5c:	2300      	movs	r3, #0
   16e5e:	2200      	movs	r2, #0
   16e60:	4699      	mov	r9, r3
   16e62:	e622      	b.n	16aaa <__aeabi_dmul+0xce>
   16e64:	251f      	movs	r5, #31
   16e66:	0021      	movs	r1, r4
   16e68:	426d      	negs	r5, r5
   16e6a:	1a28      	subs	r0, r5, r0
   16e6c:	40c1      	lsrs	r1, r0
   16e6e:	0008      	movs	r0, r1
   16e70:	2a20      	cmp	r2, #32
   16e72:	d01d      	beq.n	16eb0 <__aeabi_dmul+0x4d4>
   16e74:	355f      	adds	r5, #95	; 0x5f
   16e76:	1aaa      	subs	r2, r5, r2
   16e78:	4094      	lsls	r4, r2
   16e7a:	4323      	orrs	r3, r4
   16e7c:	1e5c      	subs	r4, r3, #1
   16e7e:	41a3      	sbcs	r3, r4
   16e80:	2507      	movs	r5, #7
   16e82:	4303      	orrs	r3, r0
   16e84:	401d      	ands	r5, r3
   16e86:	2200      	movs	r2, #0
   16e88:	2d00      	cmp	r5, #0
   16e8a:	d009      	beq.n	16ea0 <__aeabi_dmul+0x4c4>
   16e8c:	220f      	movs	r2, #15
   16e8e:	2400      	movs	r4, #0
   16e90:	401a      	ands	r2, r3
   16e92:	0018      	movs	r0, r3
   16e94:	2a04      	cmp	r2, #4
   16e96:	d1d6      	bne.n	16e46 <__aeabi_dmul+0x46a>
   16e98:	0003      	movs	r3, r0
   16e9a:	0765      	lsls	r5, r4, #29
   16e9c:	0264      	lsls	r4, r4, #9
   16e9e:	0b22      	lsrs	r2, r4, #12
   16ea0:	08db      	lsrs	r3, r3, #3
   16ea2:	432b      	orrs	r3, r5
   16ea4:	2501      	movs	r5, #1
   16ea6:	4699      	mov	r9, r3
   16ea8:	9b01      	ldr	r3, [sp, #4]
   16eaa:	2400      	movs	r4, #0
   16eac:	401d      	ands	r5, r3
   16eae:	e5fc      	b.n	16aaa <__aeabi_dmul+0xce>
   16eb0:	2400      	movs	r4, #0
   16eb2:	e7e2      	b.n	16e7a <__aeabi_dmul+0x49e>
   16eb4:	2280      	movs	r2, #128	; 0x80
   16eb6:	2501      	movs	r5, #1
   16eb8:	0312      	lsls	r2, r2, #12
   16eba:	4322      	orrs	r2, r4
   16ebc:	9901      	ldr	r1, [sp, #4]
   16ebe:	0312      	lsls	r2, r2, #12
   16ec0:	0b12      	lsrs	r2, r2, #12
   16ec2:	400d      	ands	r5, r1
   16ec4:	4699      	mov	r9, r3
   16ec6:	4c04      	ldr	r4, [pc, #16]	; (16ed8 <__aeabi_dmul+0x4fc>)
   16ec8:	e5ef      	b.n	16aaa <__aeabi_dmul+0xce>
   16eca:	46c0      	nop			; (mov r8, r8)
   16ecc:	000003ff 	.word	0x000003ff
   16ed0:	feffffff 	.word	0xfeffffff
   16ed4:	000007fe 	.word	0x000007fe
   16ed8:	000007ff 	.word	0x000007ff

00016edc <__aeabi_dsub>:
   16edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ede:	4646      	mov	r6, r8
   16ee0:	46d6      	mov	lr, sl
   16ee2:	464f      	mov	r7, r9
   16ee4:	030c      	lsls	r4, r1, #12
   16ee6:	b5c0      	push	{r6, r7, lr}
   16ee8:	0fcd      	lsrs	r5, r1, #31
   16eea:	004e      	lsls	r6, r1, #1
   16eec:	0a61      	lsrs	r1, r4, #9
   16eee:	0f44      	lsrs	r4, r0, #29
   16ef0:	430c      	orrs	r4, r1
   16ef2:	00c1      	lsls	r1, r0, #3
   16ef4:	0058      	lsls	r0, r3, #1
   16ef6:	0d40      	lsrs	r0, r0, #21
   16ef8:	4684      	mov	ip, r0
   16efa:	468a      	mov	sl, r1
   16efc:	000f      	movs	r7, r1
   16efe:	0319      	lsls	r1, r3, #12
   16f00:	0f50      	lsrs	r0, r2, #29
   16f02:	0a49      	lsrs	r1, r1, #9
   16f04:	4301      	orrs	r1, r0
   16f06:	48c6      	ldr	r0, [pc, #792]	; (17220 <__aeabi_dsub+0x344>)
   16f08:	0d76      	lsrs	r6, r6, #21
   16f0a:	46a8      	mov	r8, r5
   16f0c:	0fdb      	lsrs	r3, r3, #31
   16f0e:	00d2      	lsls	r2, r2, #3
   16f10:	4584      	cmp	ip, r0
   16f12:	d100      	bne.n	16f16 <__aeabi_dsub+0x3a>
   16f14:	e0d8      	b.n	170c8 <__aeabi_dsub+0x1ec>
   16f16:	2001      	movs	r0, #1
   16f18:	4043      	eors	r3, r0
   16f1a:	42ab      	cmp	r3, r5
   16f1c:	d100      	bne.n	16f20 <__aeabi_dsub+0x44>
   16f1e:	e0a6      	b.n	1706e <__aeabi_dsub+0x192>
   16f20:	4660      	mov	r0, ip
   16f22:	1a35      	subs	r5, r6, r0
   16f24:	2d00      	cmp	r5, #0
   16f26:	dc00      	bgt.n	16f2a <__aeabi_dsub+0x4e>
   16f28:	e105      	b.n	17136 <__aeabi_dsub+0x25a>
   16f2a:	2800      	cmp	r0, #0
   16f2c:	d110      	bne.n	16f50 <__aeabi_dsub+0x74>
   16f2e:	000b      	movs	r3, r1
   16f30:	4313      	orrs	r3, r2
   16f32:	d100      	bne.n	16f36 <__aeabi_dsub+0x5a>
   16f34:	e0d7      	b.n	170e6 <__aeabi_dsub+0x20a>
   16f36:	1e6b      	subs	r3, r5, #1
   16f38:	2b00      	cmp	r3, #0
   16f3a:	d000      	beq.n	16f3e <__aeabi_dsub+0x62>
   16f3c:	e14b      	b.n	171d6 <__aeabi_dsub+0x2fa>
   16f3e:	4653      	mov	r3, sl
   16f40:	1a9f      	subs	r7, r3, r2
   16f42:	45ba      	cmp	sl, r7
   16f44:	4180      	sbcs	r0, r0
   16f46:	1a64      	subs	r4, r4, r1
   16f48:	4240      	negs	r0, r0
   16f4a:	1a24      	subs	r4, r4, r0
   16f4c:	2601      	movs	r6, #1
   16f4e:	e01e      	b.n	16f8e <__aeabi_dsub+0xb2>
   16f50:	4bb3      	ldr	r3, [pc, #716]	; (17220 <__aeabi_dsub+0x344>)
   16f52:	429e      	cmp	r6, r3
   16f54:	d048      	beq.n	16fe8 <__aeabi_dsub+0x10c>
   16f56:	2380      	movs	r3, #128	; 0x80
   16f58:	041b      	lsls	r3, r3, #16
   16f5a:	4319      	orrs	r1, r3
   16f5c:	2d38      	cmp	r5, #56	; 0x38
   16f5e:	dd00      	ble.n	16f62 <__aeabi_dsub+0x86>
   16f60:	e119      	b.n	17196 <__aeabi_dsub+0x2ba>
   16f62:	2d1f      	cmp	r5, #31
   16f64:	dd00      	ble.n	16f68 <__aeabi_dsub+0x8c>
   16f66:	e14c      	b.n	17202 <__aeabi_dsub+0x326>
   16f68:	2320      	movs	r3, #32
   16f6a:	000f      	movs	r7, r1
   16f6c:	1b5b      	subs	r3, r3, r5
   16f6e:	0010      	movs	r0, r2
   16f70:	409a      	lsls	r2, r3
   16f72:	409f      	lsls	r7, r3
   16f74:	40e8      	lsrs	r0, r5
   16f76:	1e53      	subs	r3, r2, #1
   16f78:	419a      	sbcs	r2, r3
   16f7a:	40e9      	lsrs	r1, r5
   16f7c:	4307      	orrs	r7, r0
   16f7e:	4317      	orrs	r7, r2
   16f80:	4653      	mov	r3, sl
   16f82:	1bdf      	subs	r7, r3, r7
   16f84:	1a61      	subs	r1, r4, r1
   16f86:	45ba      	cmp	sl, r7
   16f88:	41a4      	sbcs	r4, r4
   16f8a:	4264      	negs	r4, r4
   16f8c:	1b0c      	subs	r4, r1, r4
   16f8e:	0223      	lsls	r3, r4, #8
   16f90:	d400      	bmi.n	16f94 <__aeabi_dsub+0xb8>
   16f92:	e0c5      	b.n	17120 <__aeabi_dsub+0x244>
   16f94:	0264      	lsls	r4, r4, #9
   16f96:	0a65      	lsrs	r5, r4, #9
   16f98:	2d00      	cmp	r5, #0
   16f9a:	d100      	bne.n	16f9e <__aeabi_dsub+0xc2>
   16f9c:	e0f6      	b.n	1718c <__aeabi_dsub+0x2b0>
   16f9e:	0028      	movs	r0, r5
   16fa0:	f000 fbd2 	bl	17748 <__clzsi2>
   16fa4:	0003      	movs	r3, r0
   16fa6:	3b08      	subs	r3, #8
   16fa8:	2b1f      	cmp	r3, #31
   16faa:	dd00      	ble.n	16fae <__aeabi_dsub+0xd2>
   16fac:	e0e9      	b.n	17182 <__aeabi_dsub+0x2a6>
   16fae:	2220      	movs	r2, #32
   16fb0:	003c      	movs	r4, r7
   16fb2:	1ad2      	subs	r2, r2, r3
   16fb4:	409d      	lsls	r5, r3
   16fb6:	40d4      	lsrs	r4, r2
   16fb8:	409f      	lsls	r7, r3
   16fba:	4325      	orrs	r5, r4
   16fbc:	429e      	cmp	r6, r3
   16fbe:	dd00      	ble.n	16fc2 <__aeabi_dsub+0xe6>
   16fc0:	e0db      	b.n	1717a <__aeabi_dsub+0x29e>
   16fc2:	1b9e      	subs	r6, r3, r6
   16fc4:	1c73      	adds	r3, r6, #1
   16fc6:	2b1f      	cmp	r3, #31
   16fc8:	dd00      	ble.n	16fcc <__aeabi_dsub+0xf0>
   16fca:	e10a      	b.n	171e2 <__aeabi_dsub+0x306>
   16fcc:	2220      	movs	r2, #32
   16fce:	0038      	movs	r0, r7
   16fd0:	1ad2      	subs	r2, r2, r3
   16fd2:	0029      	movs	r1, r5
   16fd4:	4097      	lsls	r7, r2
   16fd6:	002c      	movs	r4, r5
   16fd8:	4091      	lsls	r1, r2
   16fda:	40d8      	lsrs	r0, r3
   16fdc:	1e7a      	subs	r2, r7, #1
   16fde:	4197      	sbcs	r7, r2
   16fe0:	40dc      	lsrs	r4, r3
   16fe2:	2600      	movs	r6, #0
   16fe4:	4301      	orrs	r1, r0
   16fe6:	430f      	orrs	r7, r1
   16fe8:	077b      	lsls	r3, r7, #29
   16fea:	d009      	beq.n	17000 <__aeabi_dsub+0x124>
   16fec:	230f      	movs	r3, #15
   16fee:	403b      	ands	r3, r7
   16ff0:	2b04      	cmp	r3, #4
   16ff2:	d005      	beq.n	17000 <__aeabi_dsub+0x124>
   16ff4:	1d3b      	adds	r3, r7, #4
   16ff6:	42bb      	cmp	r3, r7
   16ff8:	41bf      	sbcs	r7, r7
   16ffa:	427f      	negs	r7, r7
   16ffc:	19e4      	adds	r4, r4, r7
   16ffe:	001f      	movs	r7, r3
   17000:	0223      	lsls	r3, r4, #8
   17002:	d525      	bpl.n	17050 <__aeabi_dsub+0x174>
   17004:	4b86      	ldr	r3, [pc, #536]	; (17220 <__aeabi_dsub+0x344>)
   17006:	3601      	adds	r6, #1
   17008:	429e      	cmp	r6, r3
   1700a:	d100      	bne.n	1700e <__aeabi_dsub+0x132>
   1700c:	e0af      	b.n	1716e <__aeabi_dsub+0x292>
   1700e:	4b85      	ldr	r3, [pc, #532]	; (17224 <__aeabi_dsub+0x348>)
   17010:	2501      	movs	r5, #1
   17012:	401c      	ands	r4, r3
   17014:	4643      	mov	r3, r8
   17016:	0762      	lsls	r2, r4, #29
   17018:	08ff      	lsrs	r7, r7, #3
   1701a:	0264      	lsls	r4, r4, #9
   1701c:	0576      	lsls	r6, r6, #21
   1701e:	4317      	orrs	r7, r2
   17020:	0b24      	lsrs	r4, r4, #12
   17022:	0d76      	lsrs	r6, r6, #21
   17024:	401d      	ands	r5, r3
   17026:	2100      	movs	r1, #0
   17028:	0324      	lsls	r4, r4, #12
   1702a:	0b23      	lsrs	r3, r4, #12
   1702c:	0d0c      	lsrs	r4, r1, #20
   1702e:	4a7e      	ldr	r2, [pc, #504]	; (17228 <__aeabi_dsub+0x34c>)
   17030:	0524      	lsls	r4, r4, #20
   17032:	431c      	orrs	r4, r3
   17034:	4014      	ands	r4, r2
   17036:	0533      	lsls	r3, r6, #20
   17038:	4323      	orrs	r3, r4
   1703a:	005b      	lsls	r3, r3, #1
   1703c:	07ed      	lsls	r5, r5, #31
   1703e:	085b      	lsrs	r3, r3, #1
   17040:	432b      	orrs	r3, r5
   17042:	0038      	movs	r0, r7
   17044:	0019      	movs	r1, r3
   17046:	bc1c      	pop	{r2, r3, r4}
   17048:	4690      	mov	r8, r2
   1704a:	4699      	mov	r9, r3
   1704c:	46a2      	mov	sl, r4
   1704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17050:	2501      	movs	r5, #1
   17052:	4643      	mov	r3, r8
   17054:	0762      	lsls	r2, r4, #29
   17056:	08ff      	lsrs	r7, r7, #3
   17058:	4317      	orrs	r7, r2
   1705a:	08e4      	lsrs	r4, r4, #3
   1705c:	401d      	ands	r5, r3
   1705e:	4b70      	ldr	r3, [pc, #448]	; (17220 <__aeabi_dsub+0x344>)
   17060:	429e      	cmp	r6, r3
   17062:	d036      	beq.n	170d2 <__aeabi_dsub+0x1f6>
   17064:	0324      	lsls	r4, r4, #12
   17066:	0576      	lsls	r6, r6, #21
   17068:	0b24      	lsrs	r4, r4, #12
   1706a:	0d76      	lsrs	r6, r6, #21
   1706c:	e7db      	b.n	17026 <__aeabi_dsub+0x14a>
   1706e:	4663      	mov	r3, ip
   17070:	1af3      	subs	r3, r6, r3
   17072:	2b00      	cmp	r3, #0
   17074:	dc00      	bgt.n	17078 <__aeabi_dsub+0x19c>
   17076:	e094      	b.n	171a2 <__aeabi_dsub+0x2c6>
   17078:	4660      	mov	r0, ip
   1707a:	2800      	cmp	r0, #0
   1707c:	d035      	beq.n	170ea <__aeabi_dsub+0x20e>
   1707e:	4868      	ldr	r0, [pc, #416]	; (17220 <__aeabi_dsub+0x344>)
   17080:	4286      	cmp	r6, r0
   17082:	d0b1      	beq.n	16fe8 <__aeabi_dsub+0x10c>
   17084:	2780      	movs	r7, #128	; 0x80
   17086:	043f      	lsls	r7, r7, #16
   17088:	4339      	orrs	r1, r7
   1708a:	2b38      	cmp	r3, #56	; 0x38
   1708c:	dc00      	bgt.n	17090 <__aeabi_dsub+0x1b4>
   1708e:	e0fd      	b.n	1728c <__aeabi_dsub+0x3b0>
   17090:	430a      	orrs	r2, r1
   17092:	0017      	movs	r7, r2
   17094:	2100      	movs	r1, #0
   17096:	1e7a      	subs	r2, r7, #1
   17098:	4197      	sbcs	r7, r2
   1709a:	4457      	add	r7, sl
   1709c:	4557      	cmp	r7, sl
   1709e:	4180      	sbcs	r0, r0
   170a0:	1909      	adds	r1, r1, r4
   170a2:	4244      	negs	r4, r0
   170a4:	190c      	adds	r4, r1, r4
   170a6:	0223      	lsls	r3, r4, #8
   170a8:	d53a      	bpl.n	17120 <__aeabi_dsub+0x244>
   170aa:	4b5d      	ldr	r3, [pc, #372]	; (17220 <__aeabi_dsub+0x344>)
   170ac:	3601      	adds	r6, #1
   170ae:	429e      	cmp	r6, r3
   170b0:	d100      	bne.n	170b4 <__aeabi_dsub+0x1d8>
   170b2:	e14b      	b.n	1734c <__aeabi_dsub+0x470>
   170b4:	2201      	movs	r2, #1
   170b6:	4b5b      	ldr	r3, [pc, #364]	; (17224 <__aeabi_dsub+0x348>)
   170b8:	401c      	ands	r4, r3
   170ba:	087b      	lsrs	r3, r7, #1
   170bc:	4017      	ands	r7, r2
   170be:	431f      	orrs	r7, r3
   170c0:	07e2      	lsls	r2, r4, #31
   170c2:	4317      	orrs	r7, r2
   170c4:	0864      	lsrs	r4, r4, #1
   170c6:	e78f      	b.n	16fe8 <__aeabi_dsub+0x10c>
   170c8:	0008      	movs	r0, r1
   170ca:	4310      	orrs	r0, r2
   170cc:	d000      	beq.n	170d0 <__aeabi_dsub+0x1f4>
   170ce:	e724      	b.n	16f1a <__aeabi_dsub+0x3e>
   170d0:	e721      	b.n	16f16 <__aeabi_dsub+0x3a>
   170d2:	0023      	movs	r3, r4
   170d4:	433b      	orrs	r3, r7
   170d6:	d100      	bne.n	170da <__aeabi_dsub+0x1fe>
   170d8:	e1b9      	b.n	1744e <__aeabi_dsub+0x572>
   170da:	2280      	movs	r2, #128	; 0x80
   170dc:	0312      	lsls	r2, r2, #12
   170de:	4314      	orrs	r4, r2
   170e0:	0324      	lsls	r4, r4, #12
   170e2:	0b24      	lsrs	r4, r4, #12
   170e4:	e79f      	b.n	17026 <__aeabi_dsub+0x14a>
   170e6:	002e      	movs	r6, r5
   170e8:	e77e      	b.n	16fe8 <__aeabi_dsub+0x10c>
   170ea:	0008      	movs	r0, r1
   170ec:	4310      	orrs	r0, r2
   170ee:	d100      	bne.n	170f2 <__aeabi_dsub+0x216>
   170f0:	e0ca      	b.n	17288 <__aeabi_dsub+0x3ac>
   170f2:	1e58      	subs	r0, r3, #1
   170f4:	4684      	mov	ip, r0
   170f6:	2800      	cmp	r0, #0
   170f8:	d000      	beq.n	170fc <__aeabi_dsub+0x220>
   170fa:	e0e7      	b.n	172cc <__aeabi_dsub+0x3f0>
   170fc:	4452      	add	r2, sl
   170fe:	4552      	cmp	r2, sl
   17100:	4180      	sbcs	r0, r0
   17102:	1864      	adds	r4, r4, r1
   17104:	4240      	negs	r0, r0
   17106:	1824      	adds	r4, r4, r0
   17108:	0017      	movs	r7, r2
   1710a:	2601      	movs	r6, #1
   1710c:	0223      	lsls	r3, r4, #8
   1710e:	d507      	bpl.n	17120 <__aeabi_dsub+0x244>
   17110:	2602      	movs	r6, #2
   17112:	e7cf      	b.n	170b4 <__aeabi_dsub+0x1d8>
   17114:	4664      	mov	r4, ip
   17116:	432c      	orrs	r4, r5
   17118:	d100      	bne.n	1711c <__aeabi_dsub+0x240>
   1711a:	e1b3      	b.n	17484 <__aeabi_dsub+0x5a8>
   1711c:	002c      	movs	r4, r5
   1711e:	4667      	mov	r7, ip
   17120:	077b      	lsls	r3, r7, #29
   17122:	d000      	beq.n	17126 <__aeabi_dsub+0x24a>
   17124:	e762      	b.n	16fec <__aeabi_dsub+0x110>
   17126:	0763      	lsls	r3, r4, #29
   17128:	08ff      	lsrs	r7, r7, #3
   1712a:	431f      	orrs	r7, r3
   1712c:	2501      	movs	r5, #1
   1712e:	4643      	mov	r3, r8
   17130:	08e4      	lsrs	r4, r4, #3
   17132:	401d      	ands	r5, r3
   17134:	e793      	b.n	1705e <__aeabi_dsub+0x182>
   17136:	2d00      	cmp	r5, #0
   17138:	d178      	bne.n	1722c <__aeabi_dsub+0x350>
   1713a:	1c75      	adds	r5, r6, #1
   1713c:	056d      	lsls	r5, r5, #21
   1713e:	0d6d      	lsrs	r5, r5, #21
   17140:	2d01      	cmp	r5, #1
   17142:	dc00      	bgt.n	17146 <__aeabi_dsub+0x26a>
   17144:	e0f2      	b.n	1732c <__aeabi_dsub+0x450>
   17146:	4650      	mov	r0, sl
   17148:	1a80      	subs	r0, r0, r2
   1714a:	4582      	cmp	sl, r0
   1714c:	41bf      	sbcs	r7, r7
   1714e:	1a65      	subs	r5, r4, r1
   17150:	427f      	negs	r7, r7
   17152:	1bed      	subs	r5, r5, r7
   17154:	4684      	mov	ip, r0
   17156:	0228      	lsls	r0, r5, #8
   17158:	d400      	bmi.n	1715c <__aeabi_dsub+0x280>
   1715a:	e08c      	b.n	17276 <__aeabi_dsub+0x39a>
   1715c:	4650      	mov	r0, sl
   1715e:	1a17      	subs	r7, r2, r0
   17160:	42ba      	cmp	r2, r7
   17162:	4192      	sbcs	r2, r2
   17164:	1b0c      	subs	r4, r1, r4
   17166:	4255      	negs	r5, r2
   17168:	1b65      	subs	r5, r4, r5
   1716a:	4698      	mov	r8, r3
   1716c:	e714      	b.n	16f98 <__aeabi_dsub+0xbc>
   1716e:	2501      	movs	r5, #1
   17170:	4643      	mov	r3, r8
   17172:	2400      	movs	r4, #0
   17174:	401d      	ands	r5, r3
   17176:	2700      	movs	r7, #0
   17178:	e755      	b.n	17026 <__aeabi_dsub+0x14a>
   1717a:	4c2a      	ldr	r4, [pc, #168]	; (17224 <__aeabi_dsub+0x348>)
   1717c:	1af6      	subs	r6, r6, r3
   1717e:	402c      	ands	r4, r5
   17180:	e732      	b.n	16fe8 <__aeabi_dsub+0x10c>
   17182:	003d      	movs	r5, r7
   17184:	3828      	subs	r0, #40	; 0x28
   17186:	4085      	lsls	r5, r0
   17188:	2700      	movs	r7, #0
   1718a:	e717      	b.n	16fbc <__aeabi_dsub+0xe0>
   1718c:	0038      	movs	r0, r7
   1718e:	f000 fadb 	bl	17748 <__clzsi2>
   17192:	3020      	adds	r0, #32
   17194:	e706      	b.n	16fa4 <__aeabi_dsub+0xc8>
   17196:	430a      	orrs	r2, r1
   17198:	0017      	movs	r7, r2
   1719a:	2100      	movs	r1, #0
   1719c:	1e7a      	subs	r2, r7, #1
   1719e:	4197      	sbcs	r7, r2
   171a0:	e6ee      	b.n	16f80 <__aeabi_dsub+0xa4>
   171a2:	2b00      	cmp	r3, #0
   171a4:	d000      	beq.n	171a8 <__aeabi_dsub+0x2cc>
   171a6:	e0e5      	b.n	17374 <__aeabi_dsub+0x498>
   171a8:	1c73      	adds	r3, r6, #1
   171aa:	469c      	mov	ip, r3
   171ac:	055b      	lsls	r3, r3, #21
   171ae:	0d5b      	lsrs	r3, r3, #21
   171b0:	2b01      	cmp	r3, #1
   171b2:	dc00      	bgt.n	171b6 <__aeabi_dsub+0x2da>
   171b4:	e09f      	b.n	172f6 <__aeabi_dsub+0x41a>
   171b6:	4b1a      	ldr	r3, [pc, #104]	; (17220 <__aeabi_dsub+0x344>)
   171b8:	459c      	cmp	ip, r3
   171ba:	d100      	bne.n	171be <__aeabi_dsub+0x2e2>
   171bc:	e0c5      	b.n	1734a <__aeabi_dsub+0x46e>
   171be:	4452      	add	r2, sl
   171c0:	4552      	cmp	r2, sl
   171c2:	4180      	sbcs	r0, r0
   171c4:	1864      	adds	r4, r4, r1
   171c6:	4240      	negs	r0, r0
   171c8:	1824      	adds	r4, r4, r0
   171ca:	07e7      	lsls	r7, r4, #31
   171cc:	0852      	lsrs	r2, r2, #1
   171ce:	4317      	orrs	r7, r2
   171d0:	0864      	lsrs	r4, r4, #1
   171d2:	4666      	mov	r6, ip
   171d4:	e708      	b.n	16fe8 <__aeabi_dsub+0x10c>
   171d6:	4812      	ldr	r0, [pc, #72]	; (17220 <__aeabi_dsub+0x344>)
   171d8:	4285      	cmp	r5, r0
   171da:	d100      	bne.n	171de <__aeabi_dsub+0x302>
   171dc:	e085      	b.n	172ea <__aeabi_dsub+0x40e>
   171de:	001d      	movs	r5, r3
   171e0:	e6bc      	b.n	16f5c <__aeabi_dsub+0x80>
   171e2:	0029      	movs	r1, r5
   171e4:	3e1f      	subs	r6, #31
   171e6:	40f1      	lsrs	r1, r6
   171e8:	2b20      	cmp	r3, #32
   171ea:	d100      	bne.n	171ee <__aeabi_dsub+0x312>
   171ec:	e07f      	b.n	172ee <__aeabi_dsub+0x412>
   171ee:	2240      	movs	r2, #64	; 0x40
   171f0:	1ad3      	subs	r3, r2, r3
   171f2:	409d      	lsls	r5, r3
   171f4:	432f      	orrs	r7, r5
   171f6:	1e7d      	subs	r5, r7, #1
   171f8:	41af      	sbcs	r7, r5
   171fa:	2400      	movs	r4, #0
   171fc:	430f      	orrs	r7, r1
   171fe:	2600      	movs	r6, #0
   17200:	e78e      	b.n	17120 <__aeabi_dsub+0x244>
   17202:	002b      	movs	r3, r5
   17204:	000f      	movs	r7, r1
   17206:	3b20      	subs	r3, #32
   17208:	40df      	lsrs	r7, r3
   1720a:	2d20      	cmp	r5, #32
   1720c:	d071      	beq.n	172f2 <__aeabi_dsub+0x416>
   1720e:	2340      	movs	r3, #64	; 0x40
   17210:	1b5d      	subs	r5, r3, r5
   17212:	40a9      	lsls	r1, r5
   17214:	430a      	orrs	r2, r1
   17216:	1e51      	subs	r1, r2, #1
   17218:	418a      	sbcs	r2, r1
   1721a:	2100      	movs	r1, #0
   1721c:	4317      	orrs	r7, r2
   1721e:	e6af      	b.n	16f80 <__aeabi_dsub+0xa4>
   17220:	000007ff 	.word	0x000007ff
   17224:	ff7fffff 	.word	0xff7fffff
   17228:	800fffff 	.word	0x800fffff
   1722c:	2e00      	cmp	r6, #0
   1722e:	d03e      	beq.n	172ae <__aeabi_dsub+0x3d2>
   17230:	4eb3      	ldr	r6, [pc, #716]	; (17500 <__aeabi_dsub+0x624>)
   17232:	45b4      	cmp	ip, r6
   17234:	d045      	beq.n	172c2 <__aeabi_dsub+0x3e6>
   17236:	2680      	movs	r6, #128	; 0x80
   17238:	0436      	lsls	r6, r6, #16
   1723a:	426d      	negs	r5, r5
   1723c:	4334      	orrs	r4, r6
   1723e:	2d38      	cmp	r5, #56	; 0x38
   17240:	dd00      	ble.n	17244 <__aeabi_dsub+0x368>
   17242:	e0a8      	b.n	17396 <__aeabi_dsub+0x4ba>
   17244:	2d1f      	cmp	r5, #31
   17246:	dd00      	ble.n	1724a <__aeabi_dsub+0x36e>
   17248:	e11f      	b.n	1748a <__aeabi_dsub+0x5ae>
   1724a:	2620      	movs	r6, #32
   1724c:	0027      	movs	r7, r4
   1724e:	4650      	mov	r0, sl
   17250:	1b76      	subs	r6, r6, r5
   17252:	40b7      	lsls	r7, r6
   17254:	40e8      	lsrs	r0, r5
   17256:	4307      	orrs	r7, r0
   17258:	4650      	mov	r0, sl
   1725a:	40b0      	lsls	r0, r6
   1725c:	1e46      	subs	r6, r0, #1
   1725e:	41b0      	sbcs	r0, r6
   17260:	40ec      	lsrs	r4, r5
   17262:	4338      	orrs	r0, r7
   17264:	1a17      	subs	r7, r2, r0
   17266:	42ba      	cmp	r2, r7
   17268:	4192      	sbcs	r2, r2
   1726a:	1b0c      	subs	r4, r1, r4
   1726c:	4252      	negs	r2, r2
   1726e:	1aa4      	subs	r4, r4, r2
   17270:	4666      	mov	r6, ip
   17272:	4698      	mov	r8, r3
   17274:	e68b      	b.n	16f8e <__aeabi_dsub+0xb2>
   17276:	4664      	mov	r4, ip
   17278:	4667      	mov	r7, ip
   1727a:	432c      	orrs	r4, r5
   1727c:	d000      	beq.n	17280 <__aeabi_dsub+0x3a4>
   1727e:	e68b      	b.n	16f98 <__aeabi_dsub+0xbc>
   17280:	2500      	movs	r5, #0
   17282:	2600      	movs	r6, #0
   17284:	2700      	movs	r7, #0
   17286:	e6ea      	b.n	1705e <__aeabi_dsub+0x182>
   17288:	001e      	movs	r6, r3
   1728a:	e6ad      	b.n	16fe8 <__aeabi_dsub+0x10c>
   1728c:	2b1f      	cmp	r3, #31
   1728e:	dc60      	bgt.n	17352 <__aeabi_dsub+0x476>
   17290:	2720      	movs	r7, #32
   17292:	1af8      	subs	r0, r7, r3
   17294:	000f      	movs	r7, r1
   17296:	4684      	mov	ip, r0
   17298:	4087      	lsls	r7, r0
   1729a:	0010      	movs	r0, r2
   1729c:	40d8      	lsrs	r0, r3
   1729e:	4307      	orrs	r7, r0
   172a0:	4660      	mov	r0, ip
   172a2:	4082      	lsls	r2, r0
   172a4:	1e50      	subs	r0, r2, #1
   172a6:	4182      	sbcs	r2, r0
   172a8:	40d9      	lsrs	r1, r3
   172aa:	4317      	orrs	r7, r2
   172ac:	e6f5      	b.n	1709a <__aeabi_dsub+0x1be>
   172ae:	0026      	movs	r6, r4
   172b0:	4650      	mov	r0, sl
   172b2:	4306      	orrs	r6, r0
   172b4:	d005      	beq.n	172c2 <__aeabi_dsub+0x3e6>
   172b6:	43ed      	mvns	r5, r5
   172b8:	2d00      	cmp	r5, #0
   172ba:	d0d3      	beq.n	17264 <__aeabi_dsub+0x388>
   172bc:	4e90      	ldr	r6, [pc, #576]	; (17500 <__aeabi_dsub+0x624>)
   172be:	45b4      	cmp	ip, r6
   172c0:	d1bd      	bne.n	1723e <__aeabi_dsub+0x362>
   172c2:	000c      	movs	r4, r1
   172c4:	0017      	movs	r7, r2
   172c6:	4666      	mov	r6, ip
   172c8:	4698      	mov	r8, r3
   172ca:	e68d      	b.n	16fe8 <__aeabi_dsub+0x10c>
   172cc:	488c      	ldr	r0, [pc, #560]	; (17500 <__aeabi_dsub+0x624>)
   172ce:	4283      	cmp	r3, r0
   172d0:	d00b      	beq.n	172ea <__aeabi_dsub+0x40e>
   172d2:	4663      	mov	r3, ip
   172d4:	e6d9      	b.n	1708a <__aeabi_dsub+0x1ae>
   172d6:	2d00      	cmp	r5, #0
   172d8:	d000      	beq.n	172dc <__aeabi_dsub+0x400>
   172da:	e096      	b.n	1740a <__aeabi_dsub+0x52e>
   172dc:	0008      	movs	r0, r1
   172de:	4310      	orrs	r0, r2
   172e0:	d100      	bne.n	172e4 <__aeabi_dsub+0x408>
   172e2:	e0e2      	b.n	174aa <__aeabi_dsub+0x5ce>
   172e4:	000c      	movs	r4, r1
   172e6:	0017      	movs	r7, r2
   172e8:	4698      	mov	r8, r3
   172ea:	4e85      	ldr	r6, [pc, #532]	; (17500 <__aeabi_dsub+0x624>)
   172ec:	e67c      	b.n	16fe8 <__aeabi_dsub+0x10c>
   172ee:	2500      	movs	r5, #0
   172f0:	e780      	b.n	171f4 <__aeabi_dsub+0x318>
   172f2:	2100      	movs	r1, #0
   172f4:	e78e      	b.n	17214 <__aeabi_dsub+0x338>
   172f6:	0023      	movs	r3, r4
   172f8:	4650      	mov	r0, sl
   172fa:	4303      	orrs	r3, r0
   172fc:	2e00      	cmp	r6, #0
   172fe:	d000      	beq.n	17302 <__aeabi_dsub+0x426>
   17300:	e0a8      	b.n	17454 <__aeabi_dsub+0x578>
   17302:	2b00      	cmp	r3, #0
   17304:	d100      	bne.n	17308 <__aeabi_dsub+0x42c>
   17306:	e0de      	b.n	174c6 <__aeabi_dsub+0x5ea>
   17308:	000b      	movs	r3, r1
   1730a:	4313      	orrs	r3, r2
   1730c:	d100      	bne.n	17310 <__aeabi_dsub+0x434>
   1730e:	e66b      	b.n	16fe8 <__aeabi_dsub+0x10c>
   17310:	4452      	add	r2, sl
   17312:	4552      	cmp	r2, sl
   17314:	4180      	sbcs	r0, r0
   17316:	1864      	adds	r4, r4, r1
   17318:	4240      	negs	r0, r0
   1731a:	1824      	adds	r4, r4, r0
   1731c:	0017      	movs	r7, r2
   1731e:	0223      	lsls	r3, r4, #8
   17320:	d400      	bmi.n	17324 <__aeabi_dsub+0x448>
   17322:	e6fd      	b.n	17120 <__aeabi_dsub+0x244>
   17324:	4b77      	ldr	r3, [pc, #476]	; (17504 <__aeabi_dsub+0x628>)
   17326:	4666      	mov	r6, ip
   17328:	401c      	ands	r4, r3
   1732a:	e65d      	b.n	16fe8 <__aeabi_dsub+0x10c>
   1732c:	0025      	movs	r5, r4
   1732e:	4650      	mov	r0, sl
   17330:	4305      	orrs	r5, r0
   17332:	2e00      	cmp	r6, #0
   17334:	d1cf      	bne.n	172d6 <__aeabi_dsub+0x3fa>
   17336:	2d00      	cmp	r5, #0
   17338:	d14f      	bne.n	173da <__aeabi_dsub+0x4fe>
   1733a:	000c      	movs	r4, r1
   1733c:	4314      	orrs	r4, r2
   1733e:	d100      	bne.n	17342 <__aeabi_dsub+0x466>
   17340:	e0a0      	b.n	17484 <__aeabi_dsub+0x5a8>
   17342:	000c      	movs	r4, r1
   17344:	0017      	movs	r7, r2
   17346:	4698      	mov	r8, r3
   17348:	e64e      	b.n	16fe8 <__aeabi_dsub+0x10c>
   1734a:	4666      	mov	r6, ip
   1734c:	2400      	movs	r4, #0
   1734e:	2700      	movs	r7, #0
   17350:	e685      	b.n	1705e <__aeabi_dsub+0x182>
   17352:	001f      	movs	r7, r3
   17354:	0008      	movs	r0, r1
   17356:	3f20      	subs	r7, #32
   17358:	40f8      	lsrs	r0, r7
   1735a:	0007      	movs	r7, r0
   1735c:	2b20      	cmp	r3, #32
   1735e:	d100      	bne.n	17362 <__aeabi_dsub+0x486>
   17360:	e08e      	b.n	17480 <__aeabi_dsub+0x5a4>
   17362:	2040      	movs	r0, #64	; 0x40
   17364:	1ac3      	subs	r3, r0, r3
   17366:	4099      	lsls	r1, r3
   17368:	430a      	orrs	r2, r1
   1736a:	1e51      	subs	r1, r2, #1
   1736c:	418a      	sbcs	r2, r1
   1736e:	2100      	movs	r1, #0
   17370:	4317      	orrs	r7, r2
   17372:	e692      	b.n	1709a <__aeabi_dsub+0x1be>
   17374:	2e00      	cmp	r6, #0
   17376:	d114      	bne.n	173a2 <__aeabi_dsub+0x4c6>
   17378:	0026      	movs	r6, r4
   1737a:	4650      	mov	r0, sl
   1737c:	4306      	orrs	r6, r0
   1737e:	d062      	beq.n	17446 <__aeabi_dsub+0x56a>
   17380:	43db      	mvns	r3, r3
   17382:	2b00      	cmp	r3, #0
   17384:	d15c      	bne.n	17440 <__aeabi_dsub+0x564>
   17386:	1887      	adds	r7, r0, r2
   17388:	4297      	cmp	r7, r2
   1738a:	4192      	sbcs	r2, r2
   1738c:	1864      	adds	r4, r4, r1
   1738e:	4252      	negs	r2, r2
   17390:	18a4      	adds	r4, r4, r2
   17392:	4666      	mov	r6, ip
   17394:	e687      	b.n	170a6 <__aeabi_dsub+0x1ca>
   17396:	4650      	mov	r0, sl
   17398:	4320      	orrs	r0, r4
   1739a:	1e44      	subs	r4, r0, #1
   1739c:	41a0      	sbcs	r0, r4
   1739e:	2400      	movs	r4, #0
   173a0:	e760      	b.n	17264 <__aeabi_dsub+0x388>
   173a2:	4e57      	ldr	r6, [pc, #348]	; (17500 <__aeabi_dsub+0x624>)
   173a4:	45b4      	cmp	ip, r6
   173a6:	d04e      	beq.n	17446 <__aeabi_dsub+0x56a>
   173a8:	2680      	movs	r6, #128	; 0x80
   173aa:	0436      	lsls	r6, r6, #16
   173ac:	425b      	negs	r3, r3
   173ae:	4334      	orrs	r4, r6
   173b0:	2b38      	cmp	r3, #56	; 0x38
   173b2:	dd00      	ble.n	173b6 <__aeabi_dsub+0x4da>
   173b4:	e07f      	b.n	174b6 <__aeabi_dsub+0x5da>
   173b6:	2b1f      	cmp	r3, #31
   173b8:	dd00      	ble.n	173bc <__aeabi_dsub+0x4e0>
   173ba:	e08b      	b.n	174d4 <__aeabi_dsub+0x5f8>
   173bc:	2620      	movs	r6, #32
   173be:	0027      	movs	r7, r4
   173c0:	4650      	mov	r0, sl
   173c2:	1af6      	subs	r6, r6, r3
   173c4:	40b7      	lsls	r7, r6
   173c6:	40d8      	lsrs	r0, r3
   173c8:	4307      	orrs	r7, r0
   173ca:	4650      	mov	r0, sl
   173cc:	40b0      	lsls	r0, r6
   173ce:	1e46      	subs	r6, r0, #1
   173d0:	41b0      	sbcs	r0, r6
   173d2:	4307      	orrs	r7, r0
   173d4:	40dc      	lsrs	r4, r3
   173d6:	18bf      	adds	r7, r7, r2
   173d8:	e7d6      	b.n	17388 <__aeabi_dsub+0x4ac>
   173da:	000d      	movs	r5, r1
   173dc:	4315      	orrs	r5, r2
   173de:	d100      	bne.n	173e2 <__aeabi_dsub+0x506>
   173e0:	e602      	b.n	16fe8 <__aeabi_dsub+0x10c>
   173e2:	4650      	mov	r0, sl
   173e4:	1a80      	subs	r0, r0, r2
   173e6:	4582      	cmp	sl, r0
   173e8:	41bf      	sbcs	r7, r7
   173ea:	1a65      	subs	r5, r4, r1
   173ec:	427f      	negs	r7, r7
   173ee:	1bed      	subs	r5, r5, r7
   173f0:	4684      	mov	ip, r0
   173f2:	0228      	lsls	r0, r5, #8
   173f4:	d400      	bmi.n	173f8 <__aeabi_dsub+0x51c>
   173f6:	e68d      	b.n	17114 <__aeabi_dsub+0x238>
   173f8:	4650      	mov	r0, sl
   173fa:	1a17      	subs	r7, r2, r0
   173fc:	42ba      	cmp	r2, r7
   173fe:	4192      	sbcs	r2, r2
   17400:	1b0c      	subs	r4, r1, r4
   17402:	4252      	negs	r2, r2
   17404:	1aa4      	subs	r4, r4, r2
   17406:	4698      	mov	r8, r3
   17408:	e5ee      	b.n	16fe8 <__aeabi_dsub+0x10c>
   1740a:	000d      	movs	r5, r1
   1740c:	4315      	orrs	r5, r2
   1740e:	d100      	bne.n	17412 <__aeabi_dsub+0x536>
   17410:	e76b      	b.n	172ea <__aeabi_dsub+0x40e>
   17412:	4650      	mov	r0, sl
   17414:	0767      	lsls	r7, r4, #29
   17416:	08c0      	lsrs	r0, r0, #3
   17418:	4307      	orrs	r7, r0
   1741a:	2080      	movs	r0, #128	; 0x80
   1741c:	08e4      	lsrs	r4, r4, #3
   1741e:	0300      	lsls	r0, r0, #12
   17420:	4204      	tst	r4, r0
   17422:	d007      	beq.n	17434 <__aeabi_dsub+0x558>
   17424:	08cd      	lsrs	r5, r1, #3
   17426:	4205      	tst	r5, r0
   17428:	d104      	bne.n	17434 <__aeabi_dsub+0x558>
   1742a:	002c      	movs	r4, r5
   1742c:	4698      	mov	r8, r3
   1742e:	08d7      	lsrs	r7, r2, #3
   17430:	0749      	lsls	r1, r1, #29
   17432:	430f      	orrs	r7, r1
   17434:	0f7b      	lsrs	r3, r7, #29
   17436:	00e4      	lsls	r4, r4, #3
   17438:	431c      	orrs	r4, r3
   1743a:	00ff      	lsls	r7, r7, #3
   1743c:	4e30      	ldr	r6, [pc, #192]	; (17500 <__aeabi_dsub+0x624>)
   1743e:	e5d3      	b.n	16fe8 <__aeabi_dsub+0x10c>
   17440:	4e2f      	ldr	r6, [pc, #188]	; (17500 <__aeabi_dsub+0x624>)
   17442:	45b4      	cmp	ip, r6
   17444:	d1b4      	bne.n	173b0 <__aeabi_dsub+0x4d4>
   17446:	000c      	movs	r4, r1
   17448:	0017      	movs	r7, r2
   1744a:	4666      	mov	r6, ip
   1744c:	e5cc      	b.n	16fe8 <__aeabi_dsub+0x10c>
   1744e:	2700      	movs	r7, #0
   17450:	2400      	movs	r4, #0
   17452:	e5e8      	b.n	17026 <__aeabi_dsub+0x14a>
   17454:	2b00      	cmp	r3, #0
   17456:	d039      	beq.n	174cc <__aeabi_dsub+0x5f0>
   17458:	000b      	movs	r3, r1
   1745a:	4313      	orrs	r3, r2
   1745c:	d100      	bne.n	17460 <__aeabi_dsub+0x584>
   1745e:	e744      	b.n	172ea <__aeabi_dsub+0x40e>
   17460:	08c0      	lsrs	r0, r0, #3
   17462:	0767      	lsls	r7, r4, #29
   17464:	4307      	orrs	r7, r0
   17466:	2080      	movs	r0, #128	; 0x80
   17468:	08e4      	lsrs	r4, r4, #3
   1746a:	0300      	lsls	r0, r0, #12
   1746c:	4204      	tst	r4, r0
   1746e:	d0e1      	beq.n	17434 <__aeabi_dsub+0x558>
   17470:	08cb      	lsrs	r3, r1, #3
   17472:	4203      	tst	r3, r0
   17474:	d1de      	bne.n	17434 <__aeabi_dsub+0x558>
   17476:	08d7      	lsrs	r7, r2, #3
   17478:	0749      	lsls	r1, r1, #29
   1747a:	430f      	orrs	r7, r1
   1747c:	001c      	movs	r4, r3
   1747e:	e7d9      	b.n	17434 <__aeabi_dsub+0x558>
   17480:	2100      	movs	r1, #0
   17482:	e771      	b.n	17368 <__aeabi_dsub+0x48c>
   17484:	2500      	movs	r5, #0
   17486:	2700      	movs	r7, #0
   17488:	e5e9      	b.n	1705e <__aeabi_dsub+0x182>
   1748a:	002e      	movs	r6, r5
   1748c:	0027      	movs	r7, r4
   1748e:	3e20      	subs	r6, #32
   17490:	40f7      	lsrs	r7, r6
   17492:	2d20      	cmp	r5, #32
   17494:	d02f      	beq.n	174f6 <__aeabi_dsub+0x61a>
   17496:	2640      	movs	r6, #64	; 0x40
   17498:	1b75      	subs	r5, r6, r5
   1749a:	40ac      	lsls	r4, r5
   1749c:	4650      	mov	r0, sl
   1749e:	4320      	orrs	r0, r4
   174a0:	1e44      	subs	r4, r0, #1
   174a2:	41a0      	sbcs	r0, r4
   174a4:	2400      	movs	r4, #0
   174a6:	4338      	orrs	r0, r7
   174a8:	e6dc      	b.n	17264 <__aeabi_dsub+0x388>
   174aa:	2480      	movs	r4, #128	; 0x80
   174ac:	2500      	movs	r5, #0
   174ae:	0324      	lsls	r4, r4, #12
   174b0:	4e13      	ldr	r6, [pc, #76]	; (17500 <__aeabi_dsub+0x624>)
   174b2:	2700      	movs	r7, #0
   174b4:	e5d3      	b.n	1705e <__aeabi_dsub+0x182>
   174b6:	4650      	mov	r0, sl
   174b8:	4320      	orrs	r0, r4
   174ba:	0007      	movs	r7, r0
   174bc:	1e78      	subs	r0, r7, #1
   174be:	4187      	sbcs	r7, r0
   174c0:	2400      	movs	r4, #0
   174c2:	18bf      	adds	r7, r7, r2
   174c4:	e760      	b.n	17388 <__aeabi_dsub+0x4ac>
   174c6:	000c      	movs	r4, r1
   174c8:	0017      	movs	r7, r2
   174ca:	e58d      	b.n	16fe8 <__aeabi_dsub+0x10c>
   174cc:	000c      	movs	r4, r1
   174ce:	0017      	movs	r7, r2
   174d0:	4e0b      	ldr	r6, [pc, #44]	; (17500 <__aeabi_dsub+0x624>)
   174d2:	e589      	b.n	16fe8 <__aeabi_dsub+0x10c>
   174d4:	001e      	movs	r6, r3
   174d6:	0027      	movs	r7, r4
   174d8:	3e20      	subs	r6, #32
   174da:	40f7      	lsrs	r7, r6
   174dc:	2b20      	cmp	r3, #32
   174de:	d00c      	beq.n	174fa <__aeabi_dsub+0x61e>
   174e0:	2640      	movs	r6, #64	; 0x40
   174e2:	1af3      	subs	r3, r6, r3
   174e4:	409c      	lsls	r4, r3
   174e6:	4650      	mov	r0, sl
   174e8:	4320      	orrs	r0, r4
   174ea:	1e44      	subs	r4, r0, #1
   174ec:	41a0      	sbcs	r0, r4
   174ee:	4307      	orrs	r7, r0
   174f0:	2400      	movs	r4, #0
   174f2:	18bf      	adds	r7, r7, r2
   174f4:	e748      	b.n	17388 <__aeabi_dsub+0x4ac>
   174f6:	2400      	movs	r4, #0
   174f8:	e7d0      	b.n	1749c <__aeabi_dsub+0x5c0>
   174fa:	2400      	movs	r4, #0
   174fc:	e7f3      	b.n	174e6 <__aeabi_dsub+0x60a>
   174fe:	46c0      	nop			; (mov r8, r8)
   17500:	000007ff 	.word	0x000007ff
   17504:	ff7fffff 	.word	0xff7fffff

00017508 <__aeabi_dcmpun>:
   17508:	b570      	push	{r4, r5, r6, lr}
   1750a:	4e0e      	ldr	r6, [pc, #56]	; (17544 <__aeabi_dcmpun+0x3c>)
   1750c:	030d      	lsls	r5, r1, #12
   1750e:	031c      	lsls	r4, r3, #12
   17510:	0049      	lsls	r1, r1, #1
   17512:	005b      	lsls	r3, r3, #1
   17514:	0b2d      	lsrs	r5, r5, #12
   17516:	0d49      	lsrs	r1, r1, #21
   17518:	0b24      	lsrs	r4, r4, #12
   1751a:	0d5b      	lsrs	r3, r3, #21
   1751c:	42b1      	cmp	r1, r6
   1751e:	d004      	beq.n	1752a <__aeabi_dcmpun+0x22>
   17520:	4908      	ldr	r1, [pc, #32]	; (17544 <__aeabi_dcmpun+0x3c>)
   17522:	2000      	movs	r0, #0
   17524:	428b      	cmp	r3, r1
   17526:	d008      	beq.n	1753a <__aeabi_dcmpun+0x32>
   17528:	bd70      	pop	{r4, r5, r6, pc}
   1752a:	4305      	orrs	r5, r0
   1752c:	2001      	movs	r0, #1
   1752e:	2d00      	cmp	r5, #0
   17530:	d1fa      	bne.n	17528 <__aeabi_dcmpun+0x20>
   17532:	4904      	ldr	r1, [pc, #16]	; (17544 <__aeabi_dcmpun+0x3c>)
   17534:	2000      	movs	r0, #0
   17536:	428b      	cmp	r3, r1
   17538:	d1f6      	bne.n	17528 <__aeabi_dcmpun+0x20>
   1753a:	4314      	orrs	r4, r2
   1753c:	0020      	movs	r0, r4
   1753e:	1e44      	subs	r4, r0, #1
   17540:	41a0      	sbcs	r0, r4
   17542:	e7f1      	b.n	17528 <__aeabi_dcmpun+0x20>
   17544:	000007ff 	.word	0x000007ff

00017548 <__aeabi_d2iz>:
   17548:	b530      	push	{r4, r5, lr}
   1754a:	4d13      	ldr	r5, [pc, #76]	; (17598 <__aeabi_d2iz+0x50>)
   1754c:	030a      	lsls	r2, r1, #12
   1754e:	004b      	lsls	r3, r1, #1
   17550:	0b12      	lsrs	r2, r2, #12
   17552:	0d5b      	lsrs	r3, r3, #21
   17554:	0fc9      	lsrs	r1, r1, #31
   17556:	2400      	movs	r4, #0
   17558:	42ab      	cmp	r3, r5
   1755a:	dd10      	ble.n	1757e <__aeabi_d2iz+0x36>
   1755c:	4c0f      	ldr	r4, [pc, #60]	; (1759c <__aeabi_d2iz+0x54>)
   1755e:	42a3      	cmp	r3, r4
   17560:	dc0f      	bgt.n	17582 <__aeabi_d2iz+0x3a>
   17562:	2480      	movs	r4, #128	; 0x80
   17564:	4d0e      	ldr	r5, [pc, #56]	; (175a0 <__aeabi_d2iz+0x58>)
   17566:	0364      	lsls	r4, r4, #13
   17568:	4322      	orrs	r2, r4
   1756a:	1aed      	subs	r5, r5, r3
   1756c:	2d1f      	cmp	r5, #31
   1756e:	dd0b      	ble.n	17588 <__aeabi_d2iz+0x40>
   17570:	480c      	ldr	r0, [pc, #48]	; (175a4 <__aeabi_d2iz+0x5c>)
   17572:	1ac3      	subs	r3, r0, r3
   17574:	40da      	lsrs	r2, r3
   17576:	4254      	negs	r4, r2
   17578:	2900      	cmp	r1, #0
   1757a:	d100      	bne.n	1757e <__aeabi_d2iz+0x36>
   1757c:	0014      	movs	r4, r2
   1757e:	0020      	movs	r0, r4
   17580:	bd30      	pop	{r4, r5, pc}
   17582:	4b09      	ldr	r3, [pc, #36]	; (175a8 <__aeabi_d2iz+0x60>)
   17584:	18cc      	adds	r4, r1, r3
   17586:	e7fa      	b.n	1757e <__aeabi_d2iz+0x36>
   17588:	4c08      	ldr	r4, [pc, #32]	; (175ac <__aeabi_d2iz+0x64>)
   1758a:	40e8      	lsrs	r0, r5
   1758c:	46a4      	mov	ip, r4
   1758e:	4463      	add	r3, ip
   17590:	409a      	lsls	r2, r3
   17592:	4302      	orrs	r2, r0
   17594:	e7ef      	b.n	17576 <__aeabi_d2iz+0x2e>
   17596:	46c0      	nop			; (mov r8, r8)
   17598:	000003fe 	.word	0x000003fe
   1759c:	0000041d 	.word	0x0000041d
   175a0:	00000433 	.word	0x00000433
   175a4:	00000413 	.word	0x00000413
   175a8:	7fffffff 	.word	0x7fffffff
   175ac:	fffffbed 	.word	0xfffffbed

000175b0 <__aeabi_i2d>:
   175b0:	b570      	push	{r4, r5, r6, lr}
   175b2:	2800      	cmp	r0, #0
   175b4:	d030      	beq.n	17618 <__aeabi_i2d+0x68>
   175b6:	17c3      	asrs	r3, r0, #31
   175b8:	18c4      	adds	r4, r0, r3
   175ba:	405c      	eors	r4, r3
   175bc:	0fc5      	lsrs	r5, r0, #31
   175be:	0020      	movs	r0, r4
   175c0:	f000 f8c2 	bl	17748 <__clzsi2>
   175c4:	4b17      	ldr	r3, [pc, #92]	; (17624 <__aeabi_i2d+0x74>)
   175c6:	4a18      	ldr	r2, [pc, #96]	; (17628 <__aeabi_i2d+0x78>)
   175c8:	1a1b      	subs	r3, r3, r0
   175ca:	1ad2      	subs	r2, r2, r3
   175cc:	2a1f      	cmp	r2, #31
   175ce:	dd18      	ble.n	17602 <__aeabi_i2d+0x52>
   175d0:	4a16      	ldr	r2, [pc, #88]	; (1762c <__aeabi_i2d+0x7c>)
   175d2:	1ad2      	subs	r2, r2, r3
   175d4:	4094      	lsls	r4, r2
   175d6:	2200      	movs	r2, #0
   175d8:	0324      	lsls	r4, r4, #12
   175da:	055b      	lsls	r3, r3, #21
   175dc:	0b24      	lsrs	r4, r4, #12
   175de:	0d5b      	lsrs	r3, r3, #21
   175e0:	2100      	movs	r1, #0
   175e2:	0010      	movs	r0, r2
   175e4:	0324      	lsls	r4, r4, #12
   175e6:	0d0a      	lsrs	r2, r1, #20
   175e8:	0b24      	lsrs	r4, r4, #12
   175ea:	0512      	lsls	r2, r2, #20
   175ec:	4322      	orrs	r2, r4
   175ee:	4c10      	ldr	r4, [pc, #64]	; (17630 <__aeabi_i2d+0x80>)
   175f0:	051b      	lsls	r3, r3, #20
   175f2:	4022      	ands	r2, r4
   175f4:	4313      	orrs	r3, r2
   175f6:	005b      	lsls	r3, r3, #1
   175f8:	07ed      	lsls	r5, r5, #31
   175fa:	085b      	lsrs	r3, r3, #1
   175fc:	432b      	orrs	r3, r5
   175fe:	0019      	movs	r1, r3
   17600:	bd70      	pop	{r4, r5, r6, pc}
   17602:	0021      	movs	r1, r4
   17604:	4091      	lsls	r1, r2
   17606:	000a      	movs	r2, r1
   17608:	210b      	movs	r1, #11
   1760a:	1a08      	subs	r0, r1, r0
   1760c:	40c4      	lsrs	r4, r0
   1760e:	055b      	lsls	r3, r3, #21
   17610:	0324      	lsls	r4, r4, #12
   17612:	0b24      	lsrs	r4, r4, #12
   17614:	0d5b      	lsrs	r3, r3, #21
   17616:	e7e3      	b.n	175e0 <__aeabi_i2d+0x30>
   17618:	2500      	movs	r5, #0
   1761a:	2300      	movs	r3, #0
   1761c:	2400      	movs	r4, #0
   1761e:	2200      	movs	r2, #0
   17620:	e7de      	b.n	175e0 <__aeabi_i2d+0x30>
   17622:	46c0      	nop			; (mov r8, r8)
   17624:	0000041e 	.word	0x0000041e
   17628:	00000433 	.word	0x00000433
   1762c:	00000413 	.word	0x00000413
   17630:	800fffff 	.word	0x800fffff

00017634 <__aeabi_ui2d>:
   17634:	b510      	push	{r4, lr}
   17636:	1e04      	subs	r4, r0, #0
   17638:	d028      	beq.n	1768c <__aeabi_ui2d+0x58>
   1763a:	f000 f885 	bl	17748 <__clzsi2>
   1763e:	4b15      	ldr	r3, [pc, #84]	; (17694 <__aeabi_ui2d+0x60>)
   17640:	4a15      	ldr	r2, [pc, #84]	; (17698 <__aeabi_ui2d+0x64>)
   17642:	1a1b      	subs	r3, r3, r0
   17644:	1ad2      	subs	r2, r2, r3
   17646:	2a1f      	cmp	r2, #31
   17648:	dd15      	ble.n	17676 <__aeabi_ui2d+0x42>
   1764a:	4a14      	ldr	r2, [pc, #80]	; (1769c <__aeabi_ui2d+0x68>)
   1764c:	1ad2      	subs	r2, r2, r3
   1764e:	4094      	lsls	r4, r2
   17650:	2200      	movs	r2, #0
   17652:	0324      	lsls	r4, r4, #12
   17654:	055b      	lsls	r3, r3, #21
   17656:	0b24      	lsrs	r4, r4, #12
   17658:	0d5b      	lsrs	r3, r3, #21
   1765a:	2100      	movs	r1, #0
   1765c:	0010      	movs	r0, r2
   1765e:	0324      	lsls	r4, r4, #12
   17660:	0d0a      	lsrs	r2, r1, #20
   17662:	0b24      	lsrs	r4, r4, #12
   17664:	0512      	lsls	r2, r2, #20
   17666:	4322      	orrs	r2, r4
   17668:	4c0d      	ldr	r4, [pc, #52]	; (176a0 <__aeabi_ui2d+0x6c>)
   1766a:	051b      	lsls	r3, r3, #20
   1766c:	4022      	ands	r2, r4
   1766e:	4313      	orrs	r3, r2
   17670:	005b      	lsls	r3, r3, #1
   17672:	0859      	lsrs	r1, r3, #1
   17674:	bd10      	pop	{r4, pc}
   17676:	0021      	movs	r1, r4
   17678:	4091      	lsls	r1, r2
   1767a:	000a      	movs	r2, r1
   1767c:	210b      	movs	r1, #11
   1767e:	1a08      	subs	r0, r1, r0
   17680:	40c4      	lsrs	r4, r0
   17682:	055b      	lsls	r3, r3, #21
   17684:	0324      	lsls	r4, r4, #12
   17686:	0b24      	lsrs	r4, r4, #12
   17688:	0d5b      	lsrs	r3, r3, #21
   1768a:	e7e6      	b.n	1765a <__aeabi_ui2d+0x26>
   1768c:	2300      	movs	r3, #0
   1768e:	2400      	movs	r4, #0
   17690:	2200      	movs	r2, #0
   17692:	e7e2      	b.n	1765a <__aeabi_ui2d+0x26>
   17694:	0000041e 	.word	0x0000041e
   17698:	00000433 	.word	0x00000433
   1769c:	00000413 	.word	0x00000413
   176a0:	800fffff 	.word	0x800fffff

000176a4 <__aeabi_f2d>:
   176a4:	0041      	lsls	r1, r0, #1
   176a6:	0e09      	lsrs	r1, r1, #24
   176a8:	1c4b      	adds	r3, r1, #1
   176aa:	b570      	push	{r4, r5, r6, lr}
   176ac:	b2db      	uxtb	r3, r3
   176ae:	0246      	lsls	r6, r0, #9
   176b0:	0a75      	lsrs	r5, r6, #9
   176b2:	0fc4      	lsrs	r4, r0, #31
   176b4:	2b01      	cmp	r3, #1
   176b6:	dd14      	ble.n	176e2 <__aeabi_f2d+0x3e>
   176b8:	23e0      	movs	r3, #224	; 0xe0
   176ba:	009b      	lsls	r3, r3, #2
   176bc:	076d      	lsls	r5, r5, #29
   176be:	0b36      	lsrs	r6, r6, #12
   176c0:	18cb      	adds	r3, r1, r3
   176c2:	2100      	movs	r1, #0
   176c4:	0d0a      	lsrs	r2, r1, #20
   176c6:	0028      	movs	r0, r5
   176c8:	0512      	lsls	r2, r2, #20
   176ca:	4d1c      	ldr	r5, [pc, #112]	; (1773c <__aeabi_f2d+0x98>)
   176cc:	4332      	orrs	r2, r6
   176ce:	055b      	lsls	r3, r3, #21
   176d0:	402a      	ands	r2, r5
   176d2:	085b      	lsrs	r3, r3, #1
   176d4:	4313      	orrs	r3, r2
   176d6:	005b      	lsls	r3, r3, #1
   176d8:	07e4      	lsls	r4, r4, #31
   176da:	085b      	lsrs	r3, r3, #1
   176dc:	4323      	orrs	r3, r4
   176de:	0019      	movs	r1, r3
   176e0:	bd70      	pop	{r4, r5, r6, pc}
   176e2:	2900      	cmp	r1, #0
   176e4:	d114      	bne.n	17710 <__aeabi_f2d+0x6c>
   176e6:	2d00      	cmp	r5, #0
   176e8:	d01e      	beq.n	17728 <__aeabi_f2d+0x84>
   176ea:	0028      	movs	r0, r5
   176ec:	f000 f82c 	bl	17748 <__clzsi2>
   176f0:	280a      	cmp	r0, #10
   176f2:	dc1c      	bgt.n	1772e <__aeabi_f2d+0x8a>
   176f4:	230b      	movs	r3, #11
   176f6:	002a      	movs	r2, r5
   176f8:	1a1b      	subs	r3, r3, r0
   176fa:	40da      	lsrs	r2, r3
   176fc:	0003      	movs	r3, r0
   176fe:	3315      	adds	r3, #21
   17700:	409d      	lsls	r5, r3
   17702:	4b0f      	ldr	r3, [pc, #60]	; (17740 <__aeabi_f2d+0x9c>)
   17704:	0312      	lsls	r2, r2, #12
   17706:	1a1b      	subs	r3, r3, r0
   17708:	055b      	lsls	r3, r3, #21
   1770a:	0b16      	lsrs	r6, r2, #12
   1770c:	0d5b      	lsrs	r3, r3, #21
   1770e:	e7d8      	b.n	176c2 <__aeabi_f2d+0x1e>
   17710:	2d00      	cmp	r5, #0
   17712:	d006      	beq.n	17722 <__aeabi_f2d+0x7e>
   17714:	0b32      	lsrs	r2, r6, #12
   17716:	2680      	movs	r6, #128	; 0x80
   17718:	0336      	lsls	r6, r6, #12
   1771a:	076d      	lsls	r5, r5, #29
   1771c:	4316      	orrs	r6, r2
   1771e:	4b09      	ldr	r3, [pc, #36]	; (17744 <__aeabi_f2d+0xa0>)
   17720:	e7cf      	b.n	176c2 <__aeabi_f2d+0x1e>
   17722:	4b08      	ldr	r3, [pc, #32]	; (17744 <__aeabi_f2d+0xa0>)
   17724:	2600      	movs	r6, #0
   17726:	e7cc      	b.n	176c2 <__aeabi_f2d+0x1e>
   17728:	2300      	movs	r3, #0
   1772a:	2600      	movs	r6, #0
   1772c:	e7c9      	b.n	176c2 <__aeabi_f2d+0x1e>
   1772e:	0003      	movs	r3, r0
   17730:	002a      	movs	r2, r5
   17732:	3b0b      	subs	r3, #11
   17734:	409a      	lsls	r2, r3
   17736:	2500      	movs	r5, #0
   17738:	e7e3      	b.n	17702 <__aeabi_f2d+0x5e>
   1773a:	46c0      	nop			; (mov r8, r8)
   1773c:	800fffff 	.word	0x800fffff
   17740:	00000389 	.word	0x00000389
   17744:	000007ff 	.word	0x000007ff

00017748 <__clzsi2>:
   17748:	211c      	movs	r1, #28
   1774a:	2301      	movs	r3, #1
   1774c:	041b      	lsls	r3, r3, #16
   1774e:	4298      	cmp	r0, r3
   17750:	d301      	bcc.n	17756 <__clzsi2+0xe>
   17752:	0c00      	lsrs	r0, r0, #16
   17754:	3910      	subs	r1, #16
   17756:	0a1b      	lsrs	r3, r3, #8
   17758:	4298      	cmp	r0, r3
   1775a:	d301      	bcc.n	17760 <__clzsi2+0x18>
   1775c:	0a00      	lsrs	r0, r0, #8
   1775e:	3908      	subs	r1, #8
   17760:	091b      	lsrs	r3, r3, #4
   17762:	4298      	cmp	r0, r3
   17764:	d301      	bcc.n	1776a <__clzsi2+0x22>
   17766:	0900      	lsrs	r0, r0, #4
   17768:	3904      	subs	r1, #4
   1776a:	a202      	add	r2, pc, #8	; (adr r2, 17774 <__clzsi2+0x2c>)
   1776c:	5c10      	ldrb	r0, [r2, r0]
   1776e:	1840      	adds	r0, r0, r1
   17770:	4770      	bx	lr
   17772:	46c0      	nop			; (mov r8, r8)
   17774:	02020304 	.word	0x02020304
   17778:	01010101 	.word	0x01010101
	...

00017784 <__clzdi2>:
   17784:	b510      	push	{r4, lr}
   17786:	2900      	cmp	r1, #0
   17788:	d103      	bne.n	17792 <__clzdi2+0xe>
   1778a:	f7ff ffdd 	bl	17748 <__clzsi2>
   1778e:	3020      	adds	r0, #32
   17790:	e002      	b.n	17798 <__clzdi2+0x14>
   17792:	1c08      	adds	r0, r1, #0
   17794:	f7ff ffd8 	bl	17748 <__clzsi2>
   17798:	bd10      	pop	{r4, pc}
   1779a:	46c0      	nop			; (mov r8, r8)

0001779c <atoi>:
   1779c:	b510      	push	{r4, lr}
   1779e:	220a      	movs	r2, #10
   177a0:	2100      	movs	r1, #0
   177a2:	f000 fadd 	bl	17d60 <strtol>
   177a6:	bd10      	pop	{r4, pc}

000177a8 <calloc>:
   177a8:	b510      	push	{r4, lr}
   177aa:	4b03      	ldr	r3, [pc, #12]	; (177b8 <calloc+0x10>)
   177ac:	000a      	movs	r2, r1
   177ae:	0001      	movs	r1, r0
   177b0:	6818      	ldr	r0, [r3, #0]
   177b2:	f000 f888 	bl	178c6 <_calloc_r>
   177b6:	bd10      	pop	{r4, pc}
   177b8:	2000002c 	.word	0x2000002c

000177bc <__errno>:
   177bc:	4b01      	ldr	r3, [pc, #4]	; (177c4 <__errno+0x8>)
   177be:	6818      	ldr	r0, [r3, #0]
   177c0:	4770      	bx	lr
   177c2:	46c0      	nop			; (mov r8, r8)
   177c4:	2000002c 	.word	0x2000002c

000177c8 <__libc_init_array>:
   177c8:	b570      	push	{r4, r5, r6, lr}
   177ca:	2600      	movs	r6, #0
   177cc:	4d0c      	ldr	r5, [pc, #48]	; (17800 <__libc_init_array+0x38>)
   177ce:	4c0d      	ldr	r4, [pc, #52]	; (17804 <__libc_init_array+0x3c>)
   177d0:	1b64      	subs	r4, r4, r5
   177d2:	10a4      	asrs	r4, r4, #2
   177d4:	42a6      	cmp	r6, r4
   177d6:	d109      	bne.n	177ec <__libc_init_array+0x24>
   177d8:	2600      	movs	r6, #0
   177da:	f002 f887 	bl	198ec <_init>
   177de:	4d0a      	ldr	r5, [pc, #40]	; (17808 <__libc_init_array+0x40>)
   177e0:	4c0a      	ldr	r4, [pc, #40]	; (1780c <__libc_init_array+0x44>)
   177e2:	1b64      	subs	r4, r4, r5
   177e4:	10a4      	asrs	r4, r4, #2
   177e6:	42a6      	cmp	r6, r4
   177e8:	d105      	bne.n	177f6 <__libc_init_array+0x2e>
   177ea:	bd70      	pop	{r4, r5, r6, pc}
   177ec:	00b3      	lsls	r3, r6, #2
   177ee:	58eb      	ldr	r3, [r5, r3]
   177f0:	4798      	blx	r3
   177f2:	3601      	adds	r6, #1
   177f4:	e7ee      	b.n	177d4 <__libc_init_array+0xc>
   177f6:	00b3      	lsls	r3, r6, #2
   177f8:	58eb      	ldr	r3, [r5, r3]
   177fa:	4798      	blx	r3
   177fc:	3601      	adds	r6, #1
   177fe:	e7f2      	b.n	177e6 <__libc_init_array+0x1e>
   17800:	000198f8 	.word	0x000198f8
   17804:	000198f8 	.word	0x000198f8
   17808:	000198f8 	.word	0x000198f8
   1780c:	000198fc 	.word	0x000198fc

00017810 <__locale_ctype_ptr_l>:
   17810:	30ec      	adds	r0, #236	; 0xec
   17812:	6800      	ldr	r0, [r0, #0]
   17814:	4770      	bx	lr
	...

00017818 <__locale_ctype_ptr>:
   17818:	4b04      	ldr	r3, [pc, #16]	; (1782c <__locale_ctype_ptr+0x14>)
   1781a:	681b      	ldr	r3, [r3, #0]
   1781c:	6a1b      	ldr	r3, [r3, #32]
   1781e:	2b00      	cmp	r3, #0
   17820:	d100      	bne.n	17824 <__locale_ctype_ptr+0xc>
   17822:	4b03      	ldr	r3, [pc, #12]	; (17830 <__locale_ctype_ptr+0x18>)
   17824:	33ec      	adds	r3, #236	; 0xec
   17826:	6818      	ldr	r0, [r3, #0]
   17828:	4770      	bx	lr
   1782a:	46c0      	nop			; (mov r8, r8)
   1782c:	2000002c 	.word	0x2000002c
   17830:	20000090 	.word	0x20000090

00017834 <malloc>:
   17834:	b510      	push	{r4, lr}
   17836:	4b03      	ldr	r3, [pc, #12]	; (17844 <malloc+0x10>)
   17838:	0001      	movs	r1, r0
   1783a:	6818      	ldr	r0, [r3, #0]
   1783c:	f000 f89c 	bl	17978 <_malloc_r>
   17840:	bd10      	pop	{r4, pc}
   17842:	46c0      	nop			; (mov r8, r8)
   17844:	2000002c 	.word	0x2000002c

00017848 <free>:
   17848:	b510      	push	{r4, lr}
   1784a:	4b03      	ldr	r3, [pc, #12]	; (17858 <free+0x10>)
   1784c:	0001      	movs	r1, r0
   1784e:	6818      	ldr	r0, [r3, #0]
   17850:	f000 f848 	bl	178e4 <_free_r>
   17854:	bd10      	pop	{r4, pc}
   17856:	46c0      	nop			; (mov r8, r8)
   17858:	2000002c 	.word	0x2000002c

0001785c <__ascii_mbtowc>:
   1785c:	b082      	sub	sp, #8
   1785e:	2900      	cmp	r1, #0
   17860:	d100      	bne.n	17864 <__ascii_mbtowc+0x8>
   17862:	a901      	add	r1, sp, #4
   17864:	1e10      	subs	r0, r2, #0
   17866:	d006      	beq.n	17876 <__ascii_mbtowc+0x1a>
   17868:	2b00      	cmp	r3, #0
   1786a:	d006      	beq.n	1787a <__ascii_mbtowc+0x1e>
   1786c:	7813      	ldrb	r3, [r2, #0]
   1786e:	600b      	str	r3, [r1, #0]
   17870:	7810      	ldrb	r0, [r2, #0]
   17872:	1e43      	subs	r3, r0, #1
   17874:	4198      	sbcs	r0, r3
   17876:	b002      	add	sp, #8
   17878:	4770      	bx	lr
   1787a:	2002      	movs	r0, #2
   1787c:	4240      	negs	r0, r0
   1787e:	e7fa      	b.n	17876 <__ascii_mbtowc+0x1a>

00017880 <memcpy>:
   17880:	2300      	movs	r3, #0
   17882:	b510      	push	{r4, lr}
   17884:	429a      	cmp	r2, r3
   17886:	d100      	bne.n	1788a <memcpy+0xa>
   17888:	bd10      	pop	{r4, pc}
   1788a:	5ccc      	ldrb	r4, [r1, r3]
   1788c:	54c4      	strb	r4, [r0, r3]
   1788e:	3301      	adds	r3, #1
   17890:	e7f8      	b.n	17884 <memcpy+0x4>

00017892 <memmove>:
   17892:	b510      	push	{r4, lr}
   17894:	4288      	cmp	r0, r1
   17896:	d902      	bls.n	1789e <memmove+0xc>
   17898:	188b      	adds	r3, r1, r2
   1789a:	4298      	cmp	r0, r3
   1789c:	d308      	bcc.n	178b0 <memmove+0x1e>
   1789e:	2300      	movs	r3, #0
   178a0:	429a      	cmp	r2, r3
   178a2:	d007      	beq.n	178b4 <memmove+0x22>
   178a4:	5ccc      	ldrb	r4, [r1, r3]
   178a6:	54c4      	strb	r4, [r0, r3]
   178a8:	3301      	adds	r3, #1
   178aa:	e7f9      	b.n	178a0 <memmove+0xe>
   178ac:	5c8b      	ldrb	r3, [r1, r2]
   178ae:	5483      	strb	r3, [r0, r2]
   178b0:	3a01      	subs	r2, #1
   178b2:	d2fb      	bcs.n	178ac <memmove+0x1a>
   178b4:	bd10      	pop	{r4, pc}

000178b6 <memset>:
   178b6:	0003      	movs	r3, r0
   178b8:	1882      	adds	r2, r0, r2
   178ba:	4293      	cmp	r3, r2
   178bc:	d100      	bne.n	178c0 <memset+0xa>
   178be:	4770      	bx	lr
   178c0:	7019      	strb	r1, [r3, #0]
   178c2:	3301      	adds	r3, #1
   178c4:	e7f9      	b.n	178ba <memset+0x4>

000178c6 <_calloc_r>:
   178c6:	434a      	muls	r2, r1
   178c8:	b570      	push	{r4, r5, r6, lr}
   178ca:	0011      	movs	r1, r2
   178cc:	0014      	movs	r4, r2
   178ce:	f000 f853 	bl	17978 <_malloc_r>
   178d2:	1e05      	subs	r5, r0, #0
   178d4:	d003      	beq.n	178de <_calloc_r+0x18>
   178d6:	0022      	movs	r2, r4
   178d8:	2100      	movs	r1, #0
   178da:	f7ff ffec 	bl	178b6 <memset>
   178de:	0028      	movs	r0, r5
   178e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000178e4 <_free_r>:
   178e4:	b570      	push	{r4, r5, r6, lr}
   178e6:	0005      	movs	r5, r0
   178e8:	2900      	cmp	r1, #0
   178ea:	d010      	beq.n	1790e <_free_r+0x2a>
   178ec:	1f0c      	subs	r4, r1, #4
   178ee:	6823      	ldr	r3, [r4, #0]
   178f0:	2b00      	cmp	r3, #0
   178f2:	da00      	bge.n	178f6 <_free_r+0x12>
   178f4:	18e4      	adds	r4, r4, r3
   178f6:	0028      	movs	r0, r5
   178f8:	f000 fab4 	bl	17e64 <__malloc_lock>
   178fc:	4a1d      	ldr	r2, [pc, #116]	; (17974 <_free_r+0x90>)
   178fe:	6813      	ldr	r3, [r2, #0]
   17900:	2b00      	cmp	r3, #0
   17902:	d105      	bne.n	17910 <_free_r+0x2c>
   17904:	6063      	str	r3, [r4, #4]
   17906:	6014      	str	r4, [r2, #0]
   17908:	0028      	movs	r0, r5
   1790a:	f000 faac 	bl	17e66 <__malloc_unlock>
   1790e:	bd70      	pop	{r4, r5, r6, pc}
   17910:	42a3      	cmp	r3, r4
   17912:	d909      	bls.n	17928 <_free_r+0x44>
   17914:	6821      	ldr	r1, [r4, #0]
   17916:	1860      	adds	r0, r4, r1
   17918:	4283      	cmp	r3, r0
   1791a:	d1f3      	bne.n	17904 <_free_r+0x20>
   1791c:	6818      	ldr	r0, [r3, #0]
   1791e:	685b      	ldr	r3, [r3, #4]
   17920:	1841      	adds	r1, r0, r1
   17922:	6021      	str	r1, [r4, #0]
   17924:	e7ee      	b.n	17904 <_free_r+0x20>
   17926:	0013      	movs	r3, r2
   17928:	685a      	ldr	r2, [r3, #4]
   1792a:	2a00      	cmp	r2, #0
   1792c:	d001      	beq.n	17932 <_free_r+0x4e>
   1792e:	42a2      	cmp	r2, r4
   17930:	d9f9      	bls.n	17926 <_free_r+0x42>
   17932:	6819      	ldr	r1, [r3, #0]
   17934:	1858      	adds	r0, r3, r1
   17936:	42a0      	cmp	r0, r4
   17938:	d10b      	bne.n	17952 <_free_r+0x6e>
   1793a:	6820      	ldr	r0, [r4, #0]
   1793c:	1809      	adds	r1, r1, r0
   1793e:	1858      	adds	r0, r3, r1
   17940:	6019      	str	r1, [r3, #0]
   17942:	4282      	cmp	r2, r0
   17944:	d1e0      	bne.n	17908 <_free_r+0x24>
   17946:	6810      	ldr	r0, [r2, #0]
   17948:	6852      	ldr	r2, [r2, #4]
   1794a:	1841      	adds	r1, r0, r1
   1794c:	6019      	str	r1, [r3, #0]
   1794e:	605a      	str	r2, [r3, #4]
   17950:	e7da      	b.n	17908 <_free_r+0x24>
   17952:	42a0      	cmp	r0, r4
   17954:	d902      	bls.n	1795c <_free_r+0x78>
   17956:	230c      	movs	r3, #12
   17958:	602b      	str	r3, [r5, #0]
   1795a:	e7d5      	b.n	17908 <_free_r+0x24>
   1795c:	6821      	ldr	r1, [r4, #0]
   1795e:	1860      	adds	r0, r4, r1
   17960:	4282      	cmp	r2, r0
   17962:	d103      	bne.n	1796c <_free_r+0x88>
   17964:	6810      	ldr	r0, [r2, #0]
   17966:	6852      	ldr	r2, [r2, #4]
   17968:	1841      	adds	r1, r0, r1
   1796a:	6021      	str	r1, [r4, #0]
   1796c:	6062      	str	r2, [r4, #4]
   1796e:	605c      	str	r4, [r3, #4]
   17970:	e7ca      	b.n	17908 <_free_r+0x24>
   17972:	46c0      	nop			; (mov r8, r8)
   17974:	20000504 	.word	0x20000504

00017978 <_malloc_r>:
   17978:	2303      	movs	r3, #3
   1797a:	b570      	push	{r4, r5, r6, lr}
   1797c:	1ccd      	adds	r5, r1, #3
   1797e:	439d      	bics	r5, r3
   17980:	3508      	adds	r5, #8
   17982:	0006      	movs	r6, r0
   17984:	2d0c      	cmp	r5, #12
   17986:	d21e      	bcs.n	179c6 <_malloc_r+0x4e>
   17988:	250c      	movs	r5, #12
   1798a:	42a9      	cmp	r1, r5
   1798c:	d81d      	bhi.n	179ca <_malloc_r+0x52>
   1798e:	0030      	movs	r0, r6
   17990:	f000 fa68 	bl	17e64 <__malloc_lock>
   17994:	4a25      	ldr	r2, [pc, #148]	; (17a2c <_malloc_r+0xb4>)
   17996:	6814      	ldr	r4, [r2, #0]
   17998:	0021      	movs	r1, r4
   1799a:	2900      	cmp	r1, #0
   1799c:	d119      	bne.n	179d2 <_malloc_r+0x5a>
   1799e:	4c24      	ldr	r4, [pc, #144]	; (17a30 <_malloc_r+0xb8>)
   179a0:	6823      	ldr	r3, [r4, #0]
   179a2:	2b00      	cmp	r3, #0
   179a4:	d103      	bne.n	179ae <_malloc_r+0x36>
   179a6:	0030      	movs	r0, r6
   179a8:	f000 f844 	bl	17a34 <_sbrk_r>
   179ac:	6020      	str	r0, [r4, #0]
   179ae:	0029      	movs	r1, r5
   179b0:	0030      	movs	r0, r6
   179b2:	f000 f83f 	bl	17a34 <_sbrk_r>
   179b6:	1c43      	adds	r3, r0, #1
   179b8:	d12c      	bne.n	17a14 <_malloc_r+0x9c>
   179ba:	230c      	movs	r3, #12
   179bc:	0030      	movs	r0, r6
   179be:	6033      	str	r3, [r6, #0]
   179c0:	f000 fa51 	bl	17e66 <__malloc_unlock>
   179c4:	e003      	b.n	179ce <_malloc_r+0x56>
   179c6:	2d00      	cmp	r5, #0
   179c8:	dadf      	bge.n	1798a <_malloc_r+0x12>
   179ca:	230c      	movs	r3, #12
   179cc:	6033      	str	r3, [r6, #0]
   179ce:	2000      	movs	r0, #0
   179d0:	bd70      	pop	{r4, r5, r6, pc}
   179d2:	680b      	ldr	r3, [r1, #0]
   179d4:	1b5b      	subs	r3, r3, r5
   179d6:	d41a      	bmi.n	17a0e <_malloc_r+0x96>
   179d8:	2b0b      	cmp	r3, #11
   179da:	d903      	bls.n	179e4 <_malloc_r+0x6c>
   179dc:	600b      	str	r3, [r1, #0]
   179de:	18cc      	adds	r4, r1, r3
   179e0:	6025      	str	r5, [r4, #0]
   179e2:	e003      	b.n	179ec <_malloc_r+0x74>
   179e4:	428c      	cmp	r4, r1
   179e6:	d10e      	bne.n	17a06 <_malloc_r+0x8e>
   179e8:	6863      	ldr	r3, [r4, #4]
   179ea:	6013      	str	r3, [r2, #0]
   179ec:	0030      	movs	r0, r6
   179ee:	f000 fa3a 	bl	17e66 <__malloc_unlock>
   179f2:	0020      	movs	r0, r4
   179f4:	2207      	movs	r2, #7
   179f6:	300b      	adds	r0, #11
   179f8:	1d23      	adds	r3, r4, #4
   179fa:	4390      	bics	r0, r2
   179fc:	1ac3      	subs	r3, r0, r3
   179fe:	d0e7      	beq.n	179d0 <_malloc_r+0x58>
   17a00:	425a      	negs	r2, r3
   17a02:	50e2      	str	r2, [r4, r3]
   17a04:	e7e4      	b.n	179d0 <_malloc_r+0x58>
   17a06:	684b      	ldr	r3, [r1, #4]
   17a08:	6063      	str	r3, [r4, #4]
   17a0a:	000c      	movs	r4, r1
   17a0c:	e7ee      	b.n	179ec <_malloc_r+0x74>
   17a0e:	000c      	movs	r4, r1
   17a10:	6849      	ldr	r1, [r1, #4]
   17a12:	e7c2      	b.n	1799a <_malloc_r+0x22>
   17a14:	2303      	movs	r3, #3
   17a16:	1cc4      	adds	r4, r0, #3
   17a18:	439c      	bics	r4, r3
   17a1a:	42a0      	cmp	r0, r4
   17a1c:	d0e0      	beq.n	179e0 <_malloc_r+0x68>
   17a1e:	1a21      	subs	r1, r4, r0
   17a20:	0030      	movs	r0, r6
   17a22:	f000 f807 	bl	17a34 <_sbrk_r>
   17a26:	1c43      	adds	r3, r0, #1
   17a28:	d1da      	bne.n	179e0 <_malloc_r+0x68>
   17a2a:	e7c6      	b.n	179ba <_malloc_r+0x42>
   17a2c:	20000504 	.word	0x20000504
   17a30:	20000508 	.word	0x20000508

00017a34 <_sbrk_r>:
   17a34:	2300      	movs	r3, #0
   17a36:	b570      	push	{r4, r5, r6, lr}
   17a38:	4c06      	ldr	r4, [pc, #24]	; (17a54 <_sbrk_r+0x20>)
   17a3a:	0005      	movs	r5, r0
   17a3c:	0008      	movs	r0, r1
   17a3e:	6023      	str	r3, [r4, #0]
   17a40:	f7fb ff9e 	bl	13980 <_sbrk>
   17a44:	1c43      	adds	r3, r0, #1
   17a46:	d103      	bne.n	17a50 <_sbrk_r+0x1c>
   17a48:	6823      	ldr	r3, [r4, #0]
   17a4a:	2b00      	cmp	r3, #0
   17a4c:	d000      	beq.n	17a50 <_sbrk_r+0x1c>
   17a4e:	602b      	str	r3, [r5, #0]
   17a50:	bd70      	pop	{r4, r5, r6, pc}
   17a52:	46c0      	nop			; (mov r8, r8)
   17a54:	20000928 	.word	0x20000928

00017a58 <sniprintf>:
   17a58:	b40c      	push	{r2, r3}
   17a5a:	b530      	push	{r4, r5, lr}
   17a5c:	4b16      	ldr	r3, [pc, #88]	; (17ab8 <sniprintf+0x60>)
   17a5e:	b09d      	sub	sp, #116	; 0x74
   17a60:	1e0c      	subs	r4, r1, #0
   17a62:	681d      	ldr	r5, [r3, #0]
   17a64:	da08      	bge.n	17a78 <sniprintf+0x20>
   17a66:	238b      	movs	r3, #139	; 0x8b
   17a68:	2001      	movs	r0, #1
   17a6a:	602b      	str	r3, [r5, #0]
   17a6c:	4240      	negs	r0, r0
   17a6e:	b01d      	add	sp, #116	; 0x74
   17a70:	bc30      	pop	{r4, r5}
   17a72:	bc08      	pop	{r3}
   17a74:	b002      	add	sp, #8
   17a76:	4718      	bx	r3
   17a78:	2382      	movs	r3, #130	; 0x82
   17a7a:	a902      	add	r1, sp, #8
   17a7c:	009b      	lsls	r3, r3, #2
   17a7e:	818b      	strh	r3, [r1, #12]
   17a80:	2300      	movs	r3, #0
   17a82:	9002      	str	r0, [sp, #8]
   17a84:	6108      	str	r0, [r1, #16]
   17a86:	429c      	cmp	r4, r3
   17a88:	d000      	beq.n	17a8c <sniprintf+0x34>
   17a8a:	1e63      	subs	r3, r4, #1
   17a8c:	608b      	str	r3, [r1, #8]
   17a8e:	614b      	str	r3, [r1, #20]
   17a90:	2301      	movs	r3, #1
   17a92:	425b      	negs	r3, r3
   17a94:	81cb      	strh	r3, [r1, #14]
   17a96:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17a98:	ab21      	add	r3, sp, #132	; 0x84
   17a9a:	0028      	movs	r0, r5
   17a9c:	9301      	str	r3, [sp, #4]
   17a9e:	f000 fa45 	bl	17f2c <_svfiprintf_r>
   17aa2:	1c43      	adds	r3, r0, #1
   17aa4:	da01      	bge.n	17aaa <sniprintf+0x52>
   17aa6:	238b      	movs	r3, #139	; 0x8b
   17aa8:	602b      	str	r3, [r5, #0]
   17aaa:	2c00      	cmp	r4, #0
   17aac:	d0df      	beq.n	17a6e <sniprintf+0x16>
   17aae:	2300      	movs	r3, #0
   17ab0:	9a02      	ldr	r2, [sp, #8]
   17ab2:	7013      	strb	r3, [r2, #0]
   17ab4:	e7db      	b.n	17a6e <sniprintf+0x16>
   17ab6:	46c0      	nop			; (mov r8, r8)
   17ab8:	2000002c 	.word	0x2000002c

00017abc <siprintf>:
   17abc:	b40e      	push	{r1, r2, r3}
   17abe:	b510      	push	{r4, lr}
   17ac0:	b09d      	sub	sp, #116	; 0x74
   17ac2:	a902      	add	r1, sp, #8
   17ac4:	9002      	str	r0, [sp, #8]
   17ac6:	6108      	str	r0, [r1, #16]
   17ac8:	480b      	ldr	r0, [pc, #44]	; (17af8 <siprintf+0x3c>)
   17aca:	2482      	movs	r4, #130	; 0x82
   17acc:	6088      	str	r0, [r1, #8]
   17ace:	6148      	str	r0, [r1, #20]
   17ad0:	2001      	movs	r0, #1
   17ad2:	4240      	negs	r0, r0
   17ad4:	ab1f      	add	r3, sp, #124	; 0x7c
   17ad6:	81c8      	strh	r0, [r1, #14]
   17ad8:	4808      	ldr	r0, [pc, #32]	; (17afc <siprintf+0x40>)
   17ada:	cb04      	ldmia	r3!, {r2}
   17adc:	00a4      	lsls	r4, r4, #2
   17ade:	6800      	ldr	r0, [r0, #0]
   17ae0:	9301      	str	r3, [sp, #4]
   17ae2:	818c      	strh	r4, [r1, #12]
   17ae4:	f000 fa22 	bl	17f2c <_svfiprintf_r>
   17ae8:	2300      	movs	r3, #0
   17aea:	9a02      	ldr	r2, [sp, #8]
   17aec:	7013      	strb	r3, [r2, #0]
   17aee:	b01d      	add	sp, #116	; 0x74
   17af0:	bc10      	pop	{r4}
   17af2:	bc08      	pop	{r3}
   17af4:	b003      	add	sp, #12
   17af6:	4718      	bx	r3
   17af8:	7fffffff 	.word	0x7fffffff
   17afc:	2000002c 	.word	0x2000002c

00017b00 <strcat>:
   17b00:	0002      	movs	r2, r0
   17b02:	b510      	push	{r4, lr}
   17b04:	7813      	ldrb	r3, [r2, #0]
   17b06:	2b00      	cmp	r3, #0
   17b08:	d105      	bne.n	17b16 <strcat+0x16>
   17b0a:	5ccc      	ldrb	r4, [r1, r3]
   17b0c:	54d4      	strb	r4, [r2, r3]
   17b0e:	3301      	adds	r3, #1
   17b10:	2c00      	cmp	r4, #0
   17b12:	d1fa      	bne.n	17b0a <strcat+0xa>
   17b14:	bd10      	pop	{r4, pc}
   17b16:	3201      	adds	r2, #1
   17b18:	e7f4      	b.n	17b04 <strcat+0x4>

00017b1a <strchr>:
   17b1a:	b2c9      	uxtb	r1, r1
   17b1c:	7803      	ldrb	r3, [r0, #0]
   17b1e:	2b00      	cmp	r3, #0
   17b20:	d004      	beq.n	17b2c <strchr+0x12>
   17b22:	4299      	cmp	r1, r3
   17b24:	d100      	bne.n	17b28 <strchr+0xe>
   17b26:	4770      	bx	lr
   17b28:	3001      	adds	r0, #1
   17b2a:	e7f7      	b.n	17b1c <strchr+0x2>
   17b2c:	424b      	negs	r3, r1
   17b2e:	4159      	adcs	r1, r3
   17b30:	4249      	negs	r1, r1
   17b32:	4008      	ands	r0, r1
   17b34:	e7f7      	b.n	17b26 <strchr+0xc>

00017b36 <strcpy>:
   17b36:	1c03      	adds	r3, r0, #0
   17b38:	780a      	ldrb	r2, [r1, #0]
   17b3a:	3101      	adds	r1, #1
   17b3c:	701a      	strb	r2, [r3, #0]
   17b3e:	3301      	adds	r3, #1
   17b40:	2a00      	cmp	r2, #0
   17b42:	d1f9      	bne.n	17b38 <strcpy+0x2>
   17b44:	4770      	bx	lr

00017b46 <strlen>:
   17b46:	2300      	movs	r3, #0
   17b48:	5cc2      	ldrb	r2, [r0, r3]
   17b4a:	3301      	adds	r3, #1
   17b4c:	2a00      	cmp	r2, #0
   17b4e:	d1fb      	bne.n	17b48 <strlen+0x2>
   17b50:	1e58      	subs	r0, r3, #1
   17b52:	4770      	bx	lr

00017b54 <strncmp>:
   17b54:	2300      	movs	r3, #0
   17b56:	b530      	push	{r4, r5, lr}
   17b58:	429a      	cmp	r2, r3
   17b5a:	d00a      	beq.n	17b72 <strncmp+0x1e>
   17b5c:	3a01      	subs	r2, #1
   17b5e:	5cc4      	ldrb	r4, [r0, r3]
   17b60:	5ccd      	ldrb	r5, [r1, r3]
   17b62:	42ac      	cmp	r4, r5
   17b64:	d104      	bne.n	17b70 <strncmp+0x1c>
   17b66:	429a      	cmp	r2, r3
   17b68:	d002      	beq.n	17b70 <strncmp+0x1c>
   17b6a:	3301      	adds	r3, #1
   17b6c:	2c00      	cmp	r4, #0
   17b6e:	d1f6      	bne.n	17b5e <strncmp+0xa>
   17b70:	1b63      	subs	r3, r4, r5
   17b72:	0018      	movs	r0, r3
   17b74:	bd30      	pop	{r4, r5, pc}

00017b76 <strstr>:
   17b76:	b510      	push	{r4, lr}
   17b78:	0002      	movs	r2, r0
   17b7a:	7800      	ldrb	r0, [r0, #0]
   17b7c:	2800      	cmp	r0, #0
   17b7e:	d104      	bne.n	17b8a <strstr+0x14>
   17b80:	7809      	ldrb	r1, [r1, #0]
   17b82:	2900      	cmp	r1, #0
   17b84:	d00d      	beq.n	17ba2 <strstr+0x2c>
   17b86:	bd10      	pop	{r4, pc}
   17b88:	3201      	adds	r2, #1
   17b8a:	7810      	ldrb	r0, [r2, #0]
   17b8c:	2800      	cmp	r0, #0
   17b8e:	d0fa      	beq.n	17b86 <strstr+0x10>
   17b90:	2300      	movs	r3, #0
   17b92:	5cc8      	ldrb	r0, [r1, r3]
   17b94:	2800      	cmp	r0, #0
   17b96:	d004      	beq.n	17ba2 <strstr+0x2c>
   17b98:	5cd4      	ldrb	r4, [r2, r3]
   17b9a:	4284      	cmp	r4, r0
   17b9c:	d1f4      	bne.n	17b88 <strstr+0x12>
   17b9e:	3301      	adds	r3, #1
   17ba0:	e7f7      	b.n	17b92 <strstr+0x1c>
   17ba2:	0010      	movs	r0, r2
   17ba4:	e7ef      	b.n	17b86 <strstr+0x10>
	...

00017ba8 <strtok>:
   17ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17baa:	4b12      	ldr	r3, [pc, #72]	; (17bf4 <strtok+0x4c>)
   17bac:	0006      	movs	r6, r0
   17bae:	681d      	ldr	r5, [r3, #0]
   17bb0:	000f      	movs	r7, r1
   17bb2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   17bb4:	2c00      	cmp	r4, #0
   17bb6:	d116      	bne.n	17be6 <strtok+0x3e>
   17bb8:	2050      	movs	r0, #80	; 0x50
   17bba:	f7ff fe3b 	bl	17834 <malloc>
   17bbe:	65a8      	str	r0, [r5, #88]	; 0x58
   17bc0:	6004      	str	r4, [r0, #0]
   17bc2:	6044      	str	r4, [r0, #4]
   17bc4:	6084      	str	r4, [r0, #8]
   17bc6:	60c4      	str	r4, [r0, #12]
   17bc8:	6104      	str	r4, [r0, #16]
   17bca:	6144      	str	r4, [r0, #20]
   17bcc:	6184      	str	r4, [r0, #24]
   17bce:	6284      	str	r4, [r0, #40]	; 0x28
   17bd0:	62c4      	str	r4, [r0, #44]	; 0x2c
   17bd2:	6304      	str	r4, [r0, #48]	; 0x30
   17bd4:	6344      	str	r4, [r0, #52]	; 0x34
   17bd6:	6384      	str	r4, [r0, #56]	; 0x38
   17bd8:	63c4      	str	r4, [r0, #60]	; 0x3c
   17bda:	6404      	str	r4, [r0, #64]	; 0x40
   17bdc:	6444      	str	r4, [r0, #68]	; 0x44
   17bde:	6484      	str	r4, [r0, #72]	; 0x48
   17be0:	64c4      	str	r4, [r0, #76]	; 0x4c
   17be2:	7704      	strb	r4, [r0, #28]
   17be4:	6244      	str	r4, [r0, #36]	; 0x24
   17be6:	6daa      	ldr	r2, [r5, #88]	; 0x58
   17be8:	0039      	movs	r1, r7
   17bea:	0030      	movs	r0, r6
   17bec:	2301      	movs	r3, #1
   17bee:	f000 f803 	bl	17bf8 <__strtok_r>
   17bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17bf4:	2000002c 	.word	0x2000002c

00017bf8 <__strtok_r>:
   17bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bfa:	2800      	cmp	r0, #0
   17bfc:	d104      	bne.n	17c08 <__strtok_r+0x10>
   17bfe:	6810      	ldr	r0, [r2, #0]
   17c00:	2800      	cmp	r0, #0
   17c02:	d101      	bne.n	17c08 <__strtok_r+0x10>
   17c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c06:	0020      	movs	r0, r4
   17c08:	000e      	movs	r6, r1
   17c0a:	7805      	ldrb	r5, [r0, #0]
   17c0c:	1c44      	adds	r4, r0, #1
   17c0e:	7837      	ldrb	r7, [r6, #0]
   17c10:	2f00      	cmp	r7, #0
   17c12:	d104      	bne.n	17c1e <__strtok_r+0x26>
   17c14:	2d00      	cmp	r5, #0
   17c16:	d110      	bne.n	17c3a <__strtok_r+0x42>
   17c18:	6015      	str	r5, [r2, #0]
   17c1a:	0028      	movs	r0, r5
   17c1c:	e7f2      	b.n	17c04 <__strtok_r+0xc>
   17c1e:	3601      	adds	r6, #1
   17c20:	42bd      	cmp	r5, r7
   17c22:	d1f4      	bne.n	17c0e <__strtok_r+0x16>
   17c24:	2b00      	cmp	r3, #0
   17c26:	d1ee      	bne.n	17c06 <__strtok_r+0xe>
   17c28:	6014      	str	r4, [r2, #0]
   17c2a:	7003      	strb	r3, [r0, #0]
   17c2c:	e7ea      	b.n	17c04 <__strtok_r+0xc>
   17c2e:	0033      	movs	r3, r6
   17c30:	e00e      	b.n	17c50 <__strtok_r+0x58>
   17c32:	3501      	adds	r5, #1
   17c34:	001c      	movs	r4, r3
   17c36:	2f00      	cmp	r7, #0
   17c38:	d102      	bne.n	17c40 <__strtok_r+0x48>
   17c3a:	000d      	movs	r5, r1
   17c3c:	7826      	ldrb	r6, [r4, #0]
   17c3e:	1c63      	adds	r3, r4, #1
   17c40:	782f      	ldrb	r7, [r5, #0]
   17c42:	42be      	cmp	r6, r7
   17c44:	d1f5      	bne.n	17c32 <__strtok_r+0x3a>
   17c46:	2e00      	cmp	r6, #0
   17c48:	d0f1      	beq.n	17c2e <__strtok_r+0x36>
   17c4a:	2400      	movs	r4, #0
   17c4c:	1e59      	subs	r1, r3, #1
   17c4e:	700c      	strb	r4, [r1, #0]
   17c50:	6013      	str	r3, [r2, #0]
   17c52:	e7d7      	b.n	17c04 <__strtok_r+0xc>

00017c54 <_strtol_l.isra.0>:
   17c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c56:	001f      	movs	r7, r3
   17c58:	000e      	movs	r6, r1
   17c5a:	b087      	sub	sp, #28
   17c5c:	9005      	str	r0, [sp, #20]
   17c5e:	9103      	str	r1, [sp, #12]
   17c60:	9202      	str	r2, [sp, #8]
   17c62:	980c      	ldr	r0, [sp, #48]	; 0x30
   17c64:	7834      	ldrb	r4, [r6, #0]
   17c66:	f7ff fdd3 	bl	17810 <__locale_ctype_ptr_l>
   17c6a:	2208      	movs	r2, #8
   17c6c:	1900      	adds	r0, r0, r4
   17c6e:	7843      	ldrb	r3, [r0, #1]
   17c70:	1c75      	adds	r5, r6, #1
   17c72:	4013      	ands	r3, r2
   17c74:	d10c      	bne.n	17c90 <_strtol_l.isra.0+0x3c>
   17c76:	2c2d      	cmp	r4, #45	; 0x2d
   17c78:	d10c      	bne.n	17c94 <_strtol_l.isra.0+0x40>
   17c7a:	3301      	adds	r3, #1
   17c7c:	782c      	ldrb	r4, [r5, #0]
   17c7e:	9301      	str	r3, [sp, #4]
   17c80:	1cb5      	adds	r5, r6, #2
   17c82:	2f00      	cmp	r7, #0
   17c84:	d00c      	beq.n	17ca0 <_strtol_l.isra.0+0x4c>
   17c86:	2f10      	cmp	r7, #16
   17c88:	d114      	bne.n	17cb4 <_strtol_l.isra.0+0x60>
   17c8a:	2c30      	cmp	r4, #48	; 0x30
   17c8c:	d00a      	beq.n	17ca4 <_strtol_l.isra.0+0x50>
   17c8e:	e011      	b.n	17cb4 <_strtol_l.isra.0+0x60>
   17c90:	002e      	movs	r6, r5
   17c92:	e7e6      	b.n	17c62 <_strtol_l.isra.0+0xe>
   17c94:	9301      	str	r3, [sp, #4]
   17c96:	2c2b      	cmp	r4, #43	; 0x2b
   17c98:	d1f3      	bne.n	17c82 <_strtol_l.isra.0+0x2e>
   17c9a:	782c      	ldrb	r4, [r5, #0]
   17c9c:	1cb5      	adds	r5, r6, #2
   17c9e:	e7f0      	b.n	17c82 <_strtol_l.isra.0+0x2e>
   17ca0:	2c30      	cmp	r4, #48	; 0x30
   17ca2:	d12f      	bne.n	17d04 <_strtol_l.isra.0+0xb0>
   17ca4:	2220      	movs	r2, #32
   17ca6:	782b      	ldrb	r3, [r5, #0]
   17ca8:	4393      	bics	r3, r2
   17caa:	2b58      	cmp	r3, #88	; 0x58
   17cac:	d151      	bne.n	17d52 <_strtol_l.isra.0+0xfe>
   17cae:	2710      	movs	r7, #16
   17cb0:	786c      	ldrb	r4, [r5, #1]
   17cb2:	3502      	adds	r5, #2
   17cb4:	9b01      	ldr	r3, [sp, #4]
   17cb6:	4a29      	ldr	r2, [pc, #164]	; (17d5c <_strtol_l.isra.0+0x108>)
   17cb8:	0039      	movs	r1, r7
   17cba:	189e      	adds	r6, r3, r2
   17cbc:	0030      	movs	r0, r6
   17cbe:	f7fd fa45 	bl	1514c <__aeabi_uidivmod>
   17cc2:	0030      	movs	r0, r6
   17cc4:	9104      	str	r1, [sp, #16]
   17cc6:	0039      	movs	r1, r7
   17cc8:	f7fd f9ba 	bl	15040 <__udivsi3>
   17ccc:	2101      	movs	r1, #1
   17cce:	2300      	movs	r3, #0
   17cd0:	4249      	negs	r1, r1
   17cd2:	0002      	movs	r2, r0
   17cd4:	468c      	mov	ip, r1
   17cd6:	0018      	movs	r0, r3
   17cd8:	0021      	movs	r1, r4
   17cda:	3930      	subs	r1, #48	; 0x30
   17cdc:	2909      	cmp	r1, #9
   17cde:	d813      	bhi.n	17d08 <_strtol_l.isra.0+0xb4>
   17ce0:	000c      	movs	r4, r1
   17ce2:	42a7      	cmp	r7, r4
   17ce4:	dd1c      	ble.n	17d20 <_strtol_l.isra.0+0xcc>
   17ce6:	1c59      	adds	r1, r3, #1
   17ce8:	d009      	beq.n	17cfe <_strtol_l.isra.0+0xaa>
   17cea:	4663      	mov	r3, ip
   17cec:	4282      	cmp	r2, r0
   17cee:	d306      	bcc.n	17cfe <_strtol_l.isra.0+0xaa>
   17cf0:	d102      	bne.n	17cf8 <_strtol_l.isra.0+0xa4>
   17cf2:	9904      	ldr	r1, [sp, #16]
   17cf4:	42a1      	cmp	r1, r4
   17cf6:	db02      	blt.n	17cfe <_strtol_l.isra.0+0xaa>
   17cf8:	2301      	movs	r3, #1
   17cfa:	4378      	muls	r0, r7
   17cfc:	1820      	adds	r0, r4, r0
   17cfe:	782c      	ldrb	r4, [r5, #0]
   17d00:	3501      	adds	r5, #1
   17d02:	e7e9      	b.n	17cd8 <_strtol_l.isra.0+0x84>
   17d04:	270a      	movs	r7, #10
   17d06:	e7d5      	b.n	17cb4 <_strtol_l.isra.0+0x60>
   17d08:	0021      	movs	r1, r4
   17d0a:	3941      	subs	r1, #65	; 0x41
   17d0c:	2919      	cmp	r1, #25
   17d0e:	d801      	bhi.n	17d14 <_strtol_l.isra.0+0xc0>
   17d10:	3c37      	subs	r4, #55	; 0x37
   17d12:	e7e6      	b.n	17ce2 <_strtol_l.isra.0+0x8e>
   17d14:	0021      	movs	r1, r4
   17d16:	3961      	subs	r1, #97	; 0x61
   17d18:	2919      	cmp	r1, #25
   17d1a:	d801      	bhi.n	17d20 <_strtol_l.isra.0+0xcc>
   17d1c:	3c57      	subs	r4, #87	; 0x57
   17d1e:	e7e0      	b.n	17ce2 <_strtol_l.isra.0+0x8e>
   17d20:	1c5a      	adds	r2, r3, #1
   17d22:	d108      	bne.n	17d36 <_strtol_l.isra.0+0xe2>
   17d24:	9a05      	ldr	r2, [sp, #20]
   17d26:	3323      	adds	r3, #35	; 0x23
   17d28:	6013      	str	r3, [r2, #0]
   17d2a:	9b02      	ldr	r3, [sp, #8]
   17d2c:	0030      	movs	r0, r6
   17d2e:	2b00      	cmp	r3, #0
   17d30:	d10b      	bne.n	17d4a <_strtol_l.isra.0+0xf6>
   17d32:	b007      	add	sp, #28
   17d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d36:	9a01      	ldr	r2, [sp, #4]
   17d38:	2a00      	cmp	r2, #0
   17d3a:	d000      	beq.n	17d3e <_strtol_l.isra.0+0xea>
   17d3c:	4240      	negs	r0, r0
   17d3e:	9a02      	ldr	r2, [sp, #8]
   17d40:	2a00      	cmp	r2, #0
   17d42:	d0f6      	beq.n	17d32 <_strtol_l.isra.0+0xde>
   17d44:	9a03      	ldr	r2, [sp, #12]
   17d46:	2b00      	cmp	r3, #0
   17d48:	d000      	beq.n	17d4c <_strtol_l.isra.0+0xf8>
   17d4a:	1e6a      	subs	r2, r5, #1
   17d4c:	9b02      	ldr	r3, [sp, #8]
   17d4e:	601a      	str	r2, [r3, #0]
   17d50:	e7ef      	b.n	17d32 <_strtol_l.isra.0+0xde>
   17d52:	2430      	movs	r4, #48	; 0x30
   17d54:	2f00      	cmp	r7, #0
   17d56:	d1ad      	bne.n	17cb4 <_strtol_l.isra.0+0x60>
   17d58:	3708      	adds	r7, #8
   17d5a:	e7ab      	b.n	17cb4 <_strtol_l.isra.0+0x60>
   17d5c:	7fffffff 	.word	0x7fffffff

00017d60 <strtol>:
   17d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17d62:	0013      	movs	r3, r2
   17d64:	4a06      	ldr	r2, [pc, #24]	; (17d80 <strtol+0x20>)
   17d66:	0005      	movs	r5, r0
   17d68:	6810      	ldr	r0, [r2, #0]
   17d6a:	6a04      	ldr	r4, [r0, #32]
   17d6c:	2c00      	cmp	r4, #0
   17d6e:	d100      	bne.n	17d72 <strtol+0x12>
   17d70:	4c04      	ldr	r4, [pc, #16]	; (17d84 <strtol+0x24>)
   17d72:	000a      	movs	r2, r1
   17d74:	9400      	str	r4, [sp, #0]
   17d76:	0029      	movs	r1, r5
   17d78:	f7ff ff6c 	bl	17c54 <_strtol_l.isra.0>
   17d7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17d7e:	46c0      	nop			; (mov r8, r8)
   17d80:	2000002c 	.word	0x2000002c
   17d84:	20000090 	.word	0x20000090

00017d88 <__utoa>:
   17d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d8a:	0017      	movs	r7, r2
   17d8c:	b08f      	sub	sp, #60	; 0x3c
   17d8e:	2225      	movs	r2, #37	; 0x25
   17d90:	0006      	movs	r6, r0
   17d92:	000d      	movs	r5, r1
   17d94:	a804      	add	r0, sp, #16
   17d96:	4918      	ldr	r1, [pc, #96]	; (17df8 <__utoa+0x70>)
   17d98:	f7ff fd72 	bl	17880 <memcpy>
   17d9c:	aa04      	add	r2, sp, #16
   17d9e:	1ebb      	subs	r3, r7, #2
   17da0:	2400      	movs	r4, #0
   17da2:	9203      	str	r2, [sp, #12]
   17da4:	2b22      	cmp	r3, #34	; 0x22
   17da6:	d905      	bls.n	17db4 <__utoa+0x2c>
   17da8:	702c      	strb	r4, [r5, #0]
   17daa:	0025      	movs	r5, r4
   17dac:	0028      	movs	r0, r5
   17dae:	b00f      	add	sp, #60	; 0x3c
   17db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17db2:	9c01      	ldr	r4, [sp, #4]
   17db4:	1c63      	adds	r3, r4, #1
   17db6:	9301      	str	r3, [sp, #4]
   17db8:	18eb      	adds	r3, r5, r3
   17dba:	9300      	str	r3, [sp, #0]
   17dbc:	0030      	movs	r0, r6
   17dbe:	3b01      	subs	r3, #1
   17dc0:	0039      	movs	r1, r7
   17dc2:	9302      	str	r3, [sp, #8]
   17dc4:	f7fd f9c2 	bl	1514c <__aeabi_uidivmod>
   17dc8:	9b03      	ldr	r3, [sp, #12]
   17dca:	9a02      	ldr	r2, [sp, #8]
   17dcc:	5c5b      	ldrb	r3, [r3, r1]
   17dce:	0030      	movs	r0, r6
   17dd0:	7013      	strb	r3, [r2, #0]
   17dd2:	0039      	movs	r1, r7
   17dd4:	f7fd f934 	bl	15040 <__udivsi3>
   17dd8:	1e06      	subs	r6, r0, #0
   17dda:	d1ea      	bne.n	17db2 <__utoa+0x2a>
   17ddc:	9b00      	ldr	r3, [sp, #0]
   17dde:	7018      	strb	r0, [r3, #0]
   17de0:	002b      	movs	r3, r5
   17de2:	1b5a      	subs	r2, r3, r5
   17de4:	4294      	cmp	r4, r2
   17de6:	dde1      	ble.n	17dac <__utoa+0x24>
   17de8:	781a      	ldrb	r2, [r3, #0]
   17dea:	5d29      	ldrb	r1, [r5, r4]
   17dec:	7019      	strb	r1, [r3, #0]
   17dee:	552a      	strb	r2, [r5, r4]
   17df0:	3301      	adds	r3, #1
   17df2:	3c01      	subs	r4, #1
   17df4:	e7f5      	b.n	17de2 <__utoa+0x5a>
   17df6:	46c0      	nop			; (mov r8, r8)
   17df8:	00019792 	.word	0x00019792

00017dfc <utoa>:
   17dfc:	b510      	push	{r4, lr}
   17dfe:	f7ff ffc3 	bl	17d88 <__utoa>
   17e02:	bd10      	pop	{r4, pc}

00017e04 <_vsiprintf_r>:
   17e04:	b530      	push	{r4, r5, lr}
   17e06:	b09b      	sub	sp, #108	; 0x6c
   17e08:	9100      	str	r1, [sp, #0]
   17e0a:	9104      	str	r1, [sp, #16]
   17e0c:	4908      	ldr	r1, [pc, #32]	; (17e30 <_vsiprintf_r+0x2c>)
   17e0e:	466d      	mov	r5, sp
   17e10:	9102      	str	r1, [sp, #8]
   17e12:	9105      	str	r1, [sp, #20]
   17e14:	2101      	movs	r1, #1
   17e16:	2482      	movs	r4, #130	; 0x82
   17e18:	4249      	negs	r1, r1
   17e1a:	81e9      	strh	r1, [r5, #14]
   17e1c:	00a4      	lsls	r4, r4, #2
   17e1e:	4669      	mov	r1, sp
   17e20:	81ac      	strh	r4, [r5, #12]
   17e22:	f000 f883 	bl	17f2c <_svfiprintf_r>
   17e26:	2300      	movs	r3, #0
   17e28:	9a00      	ldr	r2, [sp, #0]
   17e2a:	7013      	strb	r3, [r2, #0]
   17e2c:	b01b      	add	sp, #108	; 0x6c
   17e2e:	bd30      	pop	{r4, r5, pc}
   17e30:	7fffffff 	.word	0x7fffffff

00017e34 <vsiprintf>:
   17e34:	b510      	push	{r4, lr}
   17e36:	0013      	movs	r3, r2
   17e38:	000a      	movs	r2, r1
   17e3a:	0001      	movs	r1, r0
   17e3c:	4802      	ldr	r0, [pc, #8]	; (17e48 <vsiprintf+0x14>)
   17e3e:	6800      	ldr	r0, [r0, #0]
   17e40:	f7ff ffe0 	bl	17e04 <_vsiprintf_r>
   17e44:	bd10      	pop	{r4, pc}
   17e46:	46c0      	nop			; (mov r8, r8)
   17e48:	2000002c 	.word	0x2000002c

00017e4c <__ascii_wctomb>:
   17e4c:	1e0b      	subs	r3, r1, #0
   17e4e:	d004      	beq.n	17e5a <__ascii_wctomb+0xe>
   17e50:	2aff      	cmp	r2, #255	; 0xff
   17e52:	d904      	bls.n	17e5e <__ascii_wctomb+0x12>
   17e54:	238a      	movs	r3, #138	; 0x8a
   17e56:	6003      	str	r3, [r0, #0]
   17e58:	3b8b      	subs	r3, #139	; 0x8b
   17e5a:	0018      	movs	r0, r3
   17e5c:	4770      	bx	lr
   17e5e:	700a      	strb	r2, [r1, #0]
   17e60:	2301      	movs	r3, #1
   17e62:	e7fa      	b.n	17e5a <__ascii_wctomb+0xe>

00017e64 <__malloc_lock>:
   17e64:	4770      	bx	lr

00017e66 <__malloc_unlock>:
   17e66:	4770      	bx	lr

00017e68 <__ssputs_r>:
   17e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e6a:	688e      	ldr	r6, [r1, #8]
   17e6c:	b085      	sub	sp, #20
   17e6e:	0007      	movs	r7, r0
   17e70:	000c      	movs	r4, r1
   17e72:	9203      	str	r2, [sp, #12]
   17e74:	9301      	str	r3, [sp, #4]
   17e76:	429e      	cmp	r6, r3
   17e78:	d839      	bhi.n	17eee <__ssputs_r+0x86>
   17e7a:	2390      	movs	r3, #144	; 0x90
   17e7c:	898a      	ldrh	r2, [r1, #12]
   17e7e:	00db      	lsls	r3, r3, #3
   17e80:	421a      	tst	r2, r3
   17e82:	d034      	beq.n	17eee <__ssputs_r+0x86>
   17e84:	2503      	movs	r5, #3
   17e86:	6909      	ldr	r1, [r1, #16]
   17e88:	6823      	ldr	r3, [r4, #0]
   17e8a:	1a5b      	subs	r3, r3, r1
   17e8c:	9302      	str	r3, [sp, #8]
   17e8e:	6963      	ldr	r3, [r4, #20]
   17e90:	9802      	ldr	r0, [sp, #8]
   17e92:	435d      	muls	r5, r3
   17e94:	0feb      	lsrs	r3, r5, #31
   17e96:	195d      	adds	r5, r3, r5
   17e98:	9b01      	ldr	r3, [sp, #4]
   17e9a:	106d      	asrs	r5, r5, #1
   17e9c:	3301      	adds	r3, #1
   17e9e:	181b      	adds	r3, r3, r0
   17ea0:	42ab      	cmp	r3, r5
   17ea2:	d900      	bls.n	17ea6 <__ssputs_r+0x3e>
   17ea4:	001d      	movs	r5, r3
   17ea6:	0553      	lsls	r3, r2, #21
   17ea8:	d532      	bpl.n	17f10 <__ssputs_r+0xa8>
   17eaa:	0029      	movs	r1, r5
   17eac:	0038      	movs	r0, r7
   17eae:	f7ff fd63 	bl	17978 <_malloc_r>
   17eb2:	1e06      	subs	r6, r0, #0
   17eb4:	d109      	bne.n	17eca <__ssputs_r+0x62>
   17eb6:	230c      	movs	r3, #12
   17eb8:	603b      	str	r3, [r7, #0]
   17eba:	2340      	movs	r3, #64	; 0x40
   17ebc:	2001      	movs	r0, #1
   17ebe:	89a2      	ldrh	r2, [r4, #12]
   17ec0:	4240      	negs	r0, r0
   17ec2:	4313      	orrs	r3, r2
   17ec4:	81a3      	strh	r3, [r4, #12]
   17ec6:	b005      	add	sp, #20
   17ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17eca:	9a02      	ldr	r2, [sp, #8]
   17ecc:	6921      	ldr	r1, [r4, #16]
   17ece:	f7ff fcd7 	bl	17880 <memcpy>
   17ed2:	89a3      	ldrh	r3, [r4, #12]
   17ed4:	4a14      	ldr	r2, [pc, #80]	; (17f28 <__ssputs_r+0xc0>)
   17ed6:	401a      	ands	r2, r3
   17ed8:	2380      	movs	r3, #128	; 0x80
   17eda:	4313      	orrs	r3, r2
   17edc:	81a3      	strh	r3, [r4, #12]
   17ede:	9b02      	ldr	r3, [sp, #8]
   17ee0:	6126      	str	r6, [r4, #16]
   17ee2:	18f6      	adds	r6, r6, r3
   17ee4:	6026      	str	r6, [r4, #0]
   17ee6:	6165      	str	r5, [r4, #20]
   17ee8:	9e01      	ldr	r6, [sp, #4]
   17eea:	1aed      	subs	r5, r5, r3
   17eec:	60a5      	str	r5, [r4, #8]
   17eee:	9b01      	ldr	r3, [sp, #4]
   17ef0:	42b3      	cmp	r3, r6
   17ef2:	d200      	bcs.n	17ef6 <__ssputs_r+0x8e>
   17ef4:	001e      	movs	r6, r3
   17ef6:	0032      	movs	r2, r6
   17ef8:	9903      	ldr	r1, [sp, #12]
   17efa:	6820      	ldr	r0, [r4, #0]
   17efc:	f7ff fcc9 	bl	17892 <memmove>
   17f00:	68a3      	ldr	r3, [r4, #8]
   17f02:	2000      	movs	r0, #0
   17f04:	1b9b      	subs	r3, r3, r6
   17f06:	60a3      	str	r3, [r4, #8]
   17f08:	6823      	ldr	r3, [r4, #0]
   17f0a:	199e      	adds	r6, r3, r6
   17f0c:	6026      	str	r6, [r4, #0]
   17f0e:	e7da      	b.n	17ec6 <__ssputs_r+0x5e>
   17f10:	002a      	movs	r2, r5
   17f12:	0038      	movs	r0, r7
   17f14:	f000 faa1 	bl	1845a <_realloc_r>
   17f18:	1e06      	subs	r6, r0, #0
   17f1a:	d1e0      	bne.n	17ede <__ssputs_r+0x76>
   17f1c:	6921      	ldr	r1, [r4, #16]
   17f1e:	0038      	movs	r0, r7
   17f20:	f7ff fce0 	bl	178e4 <_free_r>
   17f24:	e7c7      	b.n	17eb6 <__ssputs_r+0x4e>
   17f26:	46c0      	nop			; (mov r8, r8)
   17f28:	fffffb7f 	.word	0xfffffb7f

00017f2c <_svfiprintf_r>:
   17f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f2e:	b09f      	sub	sp, #124	; 0x7c
   17f30:	9002      	str	r0, [sp, #8]
   17f32:	9305      	str	r3, [sp, #20]
   17f34:	898b      	ldrh	r3, [r1, #12]
   17f36:	000f      	movs	r7, r1
   17f38:	0016      	movs	r6, r2
   17f3a:	061b      	lsls	r3, r3, #24
   17f3c:	d511      	bpl.n	17f62 <_svfiprintf_r+0x36>
   17f3e:	690b      	ldr	r3, [r1, #16]
   17f40:	2b00      	cmp	r3, #0
   17f42:	d10e      	bne.n	17f62 <_svfiprintf_r+0x36>
   17f44:	2140      	movs	r1, #64	; 0x40
   17f46:	f7ff fd17 	bl	17978 <_malloc_r>
   17f4a:	6038      	str	r0, [r7, #0]
   17f4c:	6138      	str	r0, [r7, #16]
   17f4e:	2800      	cmp	r0, #0
   17f50:	d105      	bne.n	17f5e <_svfiprintf_r+0x32>
   17f52:	230c      	movs	r3, #12
   17f54:	9a02      	ldr	r2, [sp, #8]
   17f56:	3801      	subs	r0, #1
   17f58:	6013      	str	r3, [r2, #0]
   17f5a:	b01f      	add	sp, #124	; 0x7c
   17f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17f5e:	2340      	movs	r3, #64	; 0x40
   17f60:	617b      	str	r3, [r7, #20]
   17f62:	2300      	movs	r3, #0
   17f64:	ad06      	add	r5, sp, #24
   17f66:	616b      	str	r3, [r5, #20]
   17f68:	3320      	adds	r3, #32
   17f6a:	766b      	strb	r3, [r5, #25]
   17f6c:	3310      	adds	r3, #16
   17f6e:	76ab      	strb	r3, [r5, #26]
   17f70:	0034      	movs	r4, r6
   17f72:	7823      	ldrb	r3, [r4, #0]
   17f74:	2b00      	cmp	r3, #0
   17f76:	d147      	bne.n	18008 <_svfiprintf_r+0xdc>
   17f78:	1ba3      	subs	r3, r4, r6
   17f7a:	9304      	str	r3, [sp, #16]
   17f7c:	d00d      	beq.n	17f9a <_svfiprintf_r+0x6e>
   17f7e:	1ba3      	subs	r3, r4, r6
   17f80:	0032      	movs	r2, r6
   17f82:	0039      	movs	r1, r7
   17f84:	9802      	ldr	r0, [sp, #8]
   17f86:	f7ff ff6f 	bl	17e68 <__ssputs_r>
   17f8a:	1c43      	adds	r3, r0, #1
   17f8c:	d100      	bne.n	17f90 <_svfiprintf_r+0x64>
   17f8e:	e0b5      	b.n	180fc <_svfiprintf_r+0x1d0>
   17f90:	696a      	ldr	r2, [r5, #20]
   17f92:	9b04      	ldr	r3, [sp, #16]
   17f94:	4694      	mov	ip, r2
   17f96:	4463      	add	r3, ip
   17f98:	616b      	str	r3, [r5, #20]
   17f9a:	7823      	ldrb	r3, [r4, #0]
   17f9c:	2b00      	cmp	r3, #0
   17f9e:	d100      	bne.n	17fa2 <_svfiprintf_r+0x76>
   17fa0:	e0ac      	b.n	180fc <_svfiprintf_r+0x1d0>
   17fa2:	2201      	movs	r2, #1
   17fa4:	2300      	movs	r3, #0
   17fa6:	4252      	negs	r2, r2
   17fa8:	606a      	str	r2, [r5, #4]
   17faa:	a902      	add	r1, sp, #8
   17fac:	3254      	adds	r2, #84	; 0x54
   17fae:	1852      	adds	r2, r2, r1
   17fb0:	3401      	adds	r4, #1
   17fb2:	602b      	str	r3, [r5, #0]
   17fb4:	60eb      	str	r3, [r5, #12]
   17fb6:	60ab      	str	r3, [r5, #8]
   17fb8:	7013      	strb	r3, [r2, #0]
   17fba:	65ab      	str	r3, [r5, #88]	; 0x58
   17fbc:	4e58      	ldr	r6, [pc, #352]	; (18120 <_svfiprintf_r+0x1f4>)
   17fbe:	2205      	movs	r2, #5
   17fc0:	7821      	ldrb	r1, [r4, #0]
   17fc2:	0030      	movs	r0, r6
   17fc4:	f000 fa3e 	bl	18444 <memchr>
   17fc8:	1c62      	adds	r2, r4, #1
   17fca:	2800      	cmp	r0, #0
   17fcc:	d120      	bne.n	18010 <_svfiprintf_r+0xe4>
   17fce:	6829      	ldr	r1, [r5, #0]
   17fd0:	06cb      	lsls	r3, r1, #27
   17fd2:	d504      	bpl.n	17fde <_svfiprintf_r+0xb2>
   17fd4:	2353      	movs	r3, #83	; 0x53
   17fd6:	ae02      	add	r6, sp, #8
   17fd8:	3020      	adds	r0, #32
   17fda:	199b      	adds	r3, r3, r6
   17fdc:	7018      	strb	r0, [r3, #0]
   17fde:	070b      	lsls	r3, r1, #28
   17fe0:	d504      	bpl.n	17fec <_svfiprintf_r+0xc0>
   17fe2:	2353      	movs	r3, #83	; 0x53
   17fe4:	202b      	movs	r0, #43	; 0x2b
   17fe6:	ae02      	add	r6, sp, #8
   17fe8:	199b      	adds	r3, r3, r6
   17fea:	7018      	strb	r0, [r3, #0]
   17fec:	7823      	ldrb	r3, [r4, #0]
   17fee:	2b2a      	cmp	r3, #42	; 0x2a
   17ff0:	d016      	beq.n	18020 <_svfiprintf_r+0xf4>
   17ff2:	2000      	movs	r0, #0
   17ff4:	210a      	movs	r1, #10
   17ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17ff8:	7822      	ldrb	r2, [r4, #0]
   17ffa:	3a30      	subs	r2, #48	; 0x30
   17ffc:	2a09      	cmp	r2, #9
   17ffe:	d955      	bls.n	180ac <_svfiprintf_r+0x180>
   18000:	2800      	cmp	r0, #0
   18002:	d015      	beq.n	18030 <_svfiprintf_r+0x104>
   18004:	9309      	str	r3, [sp, #36]	; 0x24
   18006:	e013      	b.n	18030 <_svfiprintf_r+0x104>
   18008:	2b25      	cmp	r3, #37	; 0x25
   1800a:	d0b5      	beq.n	17f78 <_svfiprintf_r+0x4c>
   1800c:	3401      	adds	r4, #1
   1800e:	e7b0      	b.n	17f72 <_svfiprintf_r+0x46>
   18010:	2301      	movs	r3, #1
   18012:	1b80      	subs	r0, r0, r6
   18014:	4083      	lsls	r3, r0
   18016:	6829      	ldr	r1, [r5, #0]
   18018:	0014      	movs	r4, r2
   1801a:	430b      	orrs	r3, r1
   1801c:	602b      	str	r3, [r5, #0]
   1801e:	e7cd      	b.n	17fbc <_svfiprintf_r+0x90>
   18020:	9b05      	ldr	r3, [sp, #20]
   18022:	1d18      	adds	r0, r3, #4
   18024:	681b      	ldr	r3, [r3, #0]
   18026:	9005      	str	r0, [sp, #20]
   18028:	2b00      	cmp	r3, #0
   1802a:	db39      	blt.n	180a0 <_svfiprintf_r+0x174>
   1802c:	9309      	str	r3, [sp, #36]	; 0x24
   1802e:	0014      	movs	r4, r2
   18030:	7823      	ldrb	r3, [r4, #0]
   18032:	2b2e      	cmp	r3, #46	; 0x2e
   18034:	d10b      	bne.n	1804e <_svfiprintf_r+0x122>
   18036:	7863      	ldrb	r3, [r4, #1]
   18038:	1c62      	adds	r2, r4, #1
   1803a:	2b2a      	cmp	r3, #42	; 0x2a
   1803c:	d13e      	bne.n	180bc <_svfiprintf_r+0x190>
   1803e:	9b05      	ldr	r3, [sp, #20]
   18040:	3402      	adds	r4, #2
   18042:	1d1a      	adds	r2, r3, #4
   18044:	681b      	ldr	r3, [r3, #0]
   18046:	9205      	str	r2, [sp, #20]
   18048:	2b00      	cmp	r3, #0
   1804a:	db34      	blt.n	180b6 <_svfiprintf_r+0x18a>
   1804c:	9307      	str	r3, [sp, #28]
   1804e:	4e35      	ldr	r6, [pc, #212]	; (18124 <_svfiprintf_r+0x1f8>)
   18050:	7821      	ldrb	r1, [r4, #0]
   18052:	2203      	movs	r2, #3
   18054:	0030      	movs	r0, r6
   18056:	f000 f9f5 	bl	18444 <memchr>
   1805a:	2800      	cmp	r0, #0
   1805c:	d006      	beq.n	1806c <_svfiprintf_r+0x140>
   1805e:	2340      	movs	r3, #64	; 0x40
   18060:	1b80      	subs	r0, r0, r6
   18062:	4083      	lsls	r3, r0
   18064:	682a      	ldr	r2, [r5, #0]
   18066:	3401      	adds	r4, #1
   18068:	4313      	orrs	r3, r2
   1806a:	602b      	str	r3, [r5, #0]
   1806c:	7821      	ldrb	r1, [r4, #0]
   1806e:	2206      	movs	r2, #6
   18070:	482d      	ldr	r0, [pc, #180]	; (18128 <_svfiprintf_r+0x1fc>)
   18072:	1c66      	adds	r6, r4, #1
   18074:	7629      	strb	r1, [r5, #24]
   18076:	f000 f9e5 	bl	18444 <memchr>
   1807a:	2800      	cmp	r0, #0
   1807c:	d046      	beq.n	1810c <_svfiprintf_r+0x1e0>
   1807e:	4b2b      	ldr	r3, [pc, #172]	; (1812c <_svfiprintf_r+0x200>)
   18080:	2b00      	cmp	r3, #0
   18082:	d12f      	bne.n	180e4 <_svfiprintf_r+0x1b8>
   18084:	6829      	ldr	r1, [r5, #0]
   18086:	9b05      	ldr	r3, [sp, #20]
   18088:	2207      	movs	r2, #7
   1808a:	05c9      	lsls	r1, r1, #23
   1808c:	d528      	bpl.n	180e0 <_svfiprintf_r+0x1b4>
   1808e:	189b      	adds	r3, r3, r2
   18090:	4393      	bics	r3, r2
   18092:	3308      	adds	r3, #8
   18094:	9305      	str	r3, [sp, #20]
   18096:	696b      	ldr	r3, [r5, #20]
   18098:	9a03      	ldr	r2, [sp, #12]
   1809a:	189b      	adds	r3, r3, r2
   1809c:	616b      	str	r3, [r5, #20]
   1809e:	e767      	b.n	17f70 <_svfiprintf_r+0x44>
   180a0:	425b      	negs	r3, r3
   180a2:	60eb      	str	r3, [r5, #12]
   180a4:	2302      	movs	r3, #2
   180a6:	430b      	orrs	r3, r1
   180a8:	602b      	str	r3, [r5, #0]
   180aa:	e7c0      	b.n	1802e <_svfiprintf_r+0x102>
   180ac:	434b      	muls	r3, r1
   180ae:	3401      	adds	r4, #1
   180b0:	189b      	adds	r3, r3, r2
   180b2:	2001      	movs	r0, #1
   180b4:	e7a0      	b.n	17ff8 <_svfiprintf_r+0xcc>
   180b6:	2301      	movs	r3, #1
   180b8:	425b      	negs	r3, r3
   180ba:	e7c7      	b.n	1804c <_svfiprintf_r+0x120>
   180bc:	2300      	movs	r3, #0
   180be:	0014      	movs	r4, r2
   180c0:	200a      	movs	r0, #10
   180c2:	001a      	movs	r2, r3
   180c4:	606b      	str	r3, [r5, #4]
   180c6:	7821      	ldrb	r1, [r4, #0]
   180c8:	3930      	subs	r1, #48	; 0x30
   180ca:	2909      	cmp	r1, #9
   180cc:	d903      	bls.n	180d6 <_svfiprintf_r+0x1aa>
   180ce:	2b00      	cmp	r3, #0
   180d0:	d0bd      	beq.n	1804e <_svfiprintf_r+0x122>
   180d2:	9207      	str	r2, [sp, #28]
   180d4:	e7bb      	b.n	1804e <_svfiprintf_r+0x122>
   180d6:	4342      	muls	r2, r0
   180d8:	3401      	adds	r4, #1
   180da:	1852      	adds	r2, r2, r1
   180dc:	2301      	movs	r3, #1
   180de:	e7f2      	b.n	180c6 <_svfiprintf_r+0x19a>
   180e0:	3307      	adds	r3, #7
   180e2:	e7d5      	b.n	18090 <_svfiprintf_r+0x164>
   180e4:	ab05      	add	r3, sp, #20
   180e6:	9300      	str	r3, [sp, #0]
   180e8:	003a      	movs	r2, r7
   180ea:	4b11      	ldr	r3, [pc, #68]	; (18130 <_svfiprintf_r+0x204>)
   180ec:	0029      	movs	r1, r5
   180ee:	9802      	ldr	r0, [sp, #8]
   180f0:	e000      	b.n	180f4 <_svfiprintf_r+0x1c8>
   180f2:	bf00      	nop
   180f4:	9003      	str	r0, [sp, #12]
   180f6:	9b03      	ldr	r3, [sp, #12]
   180f8:	3301      	adds	r3, #1
   180fa:	d1cc      	bne.n	18096 <_svfiprintf_r+0x16a>
   180fc:	89bb      	ldrh	r3, [r7, #12]
   180fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18100:	065b      	lsls	r3, r3, #25
   18102:	d400      	bmi.n	18106 <_svfiprintf_r+0x1da>
   18104:	e729      	b.n	17f5a <_svfiprintf_r+0x2e>
   18106:	2001      	movs	r0, #1
   18108:	4240      	negs	r0, r0
   1810a:	e726      	b.n	17f5a <_svfiprintf_r+0x2e>
   1810c:	ab05      	add	r3, sp, #20
   1810e:	9300      	str	r3, [sp, #0]
   18110:	003a      	movs	r2, r7
   18112:	4b07      	ldr	r3, [pc, #28]	; (18130 <_svfiprintf_r+0x204>)
   18114:	0029      	movs	r1, r5
   18116:	9802      	ldr	r0, [sp, #8]
   18118:	f000 f87a 	bl	18210 <_printf_i>
   1811c:	e7ea      	b.n	180f4 <_svfiprintf_r+0x1c8>
   1811e:	46c0      	nop			; (mov r8, r8)
   18120:	000198b8 	.word	0x000198b8
   18124:	000198be 	.word	0x000198be
   18128:	000198c2 	.word	0x000198c2
   1812c:	00000000 	.word	0x00000000
   18130:	00017e69 	.word	0x00017e69

00018134 <_printf_common>:
   18134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18136:	0015      	movs	r5, r2
   18138:	9301      	str	r3, [sp, #4]
   1813a:	688a      	ldr	r2, [r1, #8]
   1813c:	690b      	ldr	r3, [r1, #16]
   1813e:	9000      	str	r0, [sp, #0]
   18140:	000c      	movs	r4, r1
   18142:	4293      	cmp	r3, r2
   18144:	da00      	bge.n	18148 <_printf_common+0x14>
   18146:	0013      	movs	r3, r2
   18148:	0022      	movs	r2, r4
   1814a:	602b      	str	r3, [r5, #0]
   1814c:	3243      	adds	r2, #67	; 0x43
   1814e:	7812      	ldrb	r2, [r2, #0]
   18150:	2a00      	cmp	r2, #0
   18152:	d001      	beq.n	18158 <_printf_common+0x24>
   18154:	3301      	adds	r3, #1
   18156:	602b      	str	r3, [r5, #0]
   18158:	6823      	ldr	r3, [r4, #0]
   1815a:	069b      	lsls	r3, r3, #26
   1815c:	d502      	bpl.n	18164 <_printf_common+0x30>
   1815e:	682b      	ldr	r3, [r5, #0]
   18160:	3302      	adds	r3, #2
   18162:	602b      	str	r3, [r5, #0]
   18164:	2706      	movs	r7, #6
   18166:	6823      	ldr	r3, [r4, #0]
   18168:	401f      	ands	r7, r3
   1816a:	d027      	beq.n	181bc <_printf_common+0x88>
   1816c:	0023      	movs	r3, r4
   1816e:	3343      	adds	r3, #67	; 0x43
   18170:	781b      	ldrb	r3, [r3, #0]
   18172:	1e5a      	subs	r2, r3, #1
   18174:	4193      	sbcs	r3, r2
   18176:	6822      	ldr	r2, [r4, #0]
   18178:	0692      	lsls	r2, r2, #26
   1817a:	d430      	bmi.n	181de <_printf_common+0xaa>
   1817c:	0022      	movs	r2, r4
   1817e:	9901      	ldr	r1, [sp, #4]
   18180:	3243      	adds	r2, #67	; 0x43
   18182:	9800      	ldr	r0, [sp, #0]
   18184:	9e08      	ldr	r6, [sp, #32]
   18186:	47b0      	blx	r6
   18188:	1c43      	adds	r3, r0, #1
   1818a:	d025      	beq.n	181d8 <_printf_common+0xa4>
   1818c:	2306      	movs	r3, #6
   1818e:	6820      	ldr	r0, [r4, #0]
   18190:	682a      	ldr	r2, [r5, #0]
   18192:	68e1      	ldr	r1, [r4, #12]
   18194:	4003      	ands	r3, r0
   18196:	2500      	movs	r5, #0
   18198:	2b04      	cmp	r3, #4
   1819a:	d103      	bne.n	181a4 <_printf_common+0x70>
   1819c:	1a8d      	subs	r5, r1, r2
   1819e:	43eb      	mvns	r3, r5
   181a0:	17db      	asrs	r3, r3, #31
   181a2:	401d      	ands	r5, r3
   181a4:	68a3      	ldr	r3, [r4, #8]
   181a6:	6922      	ldr	r2, [r4, #16]
   181a8:	4293      	cmp	r3, r2
   181aa:	dd01      	ble.n	181b0 <_printf_common+0x7c>
   181ac:	1a9b      	subs	r3, r3, r2
   181ae:	18ed      	adds	r5, r5, r3
   181b0:	2700      	movs	r7, #0
   181b2:	42bd      	cmp	r5, r7
   181b4:	d120      	bne.n	181f8 <_printf_common+0xc4>
   181b6:	2000      	movs	r0, #0
   181b8:	e010      	b.n	181dc <_printf_common+0xa8>
   181ba:	3701      	adds	r7, #1
   181bc:	68e3      	ldr	r3, [r4, #12]
   181be:	682a      	ldr	r2, [r5, #0]
   181c0:	1a9b      	subs	r3, r3, r2
   181c2:	429f      	cmp	r7, r3
   181c4:	dad2      	bge.n	1816c <_printf_common+0x38>
   181c6:	0022      	movs	r2, r4
   181c8:	2301      	movs	r3, #1
   181ca:	3219      	adds	r2, #25
   181cc:	9901      	ldr	r1, [sp, #4]
   181ce:	9800      	ldr	r0, [sp, #0]
   181d0:	9e08      	ldr	r6, [sp, #32]
   181d2:	47b0      	blx	r6
   181d4:	1c43      	adds	r3, r0, #1
   181d6:	d1f0      	bne.n	181ba <_printf_common+0x86>
   181d8:	2001      	movs	r0, #1
   181da:	4240      	negs	r0, r0
   181dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   181de:	2030      	movs	r0, #48	; 0x30
   181e0:	18e1      	adds	r1, r4, r3
   181e2:	3143      	adds	r1, #67	; 0x43
   181e4:	7008      	strb	r0, [r1, #0]
   181e6:	0021      	movs	r1, r4
   181e8:	1c5a      	adds	r2, r3, #1
   181ea:	3145      	adds	r1, #69	; 0x45
   181ec:	7809      	ldrb	r1, [r1, #0]
   181ee:	18a2      	adds	r2, r4, r2
   181f0:	3243      	adds	r2, #67	; 0x43
   181f2:	3302      	adds	r3, #2
   181f4:	7011      	strb	r1, [r2, #0]
   181f6:	e7c1      	b.n	1817c <_printf_common+0x48>
   181f8:	0022      	movs	r2, r4
   181fa:	2301      	movs	r3, #1
   181fc:	321a      	adds	r2, #26
   181fe:	9901      	ldr	r1, [sp, #4]
   18200:	9800      	ldr	r0, [sp, #0]
   18202:	9e08      	ldr	r6, [sp, #32]
   18204:	47b0      	blx	r6
   18206:	1c43      	adds	r3, r0, #1
   18208:	d0e6      	beq.n	181d8 <_printf_common+0xa4>
   1820a:	3701      	adds	r7, #1
   1820c:	e7d1      	b.n	181b2 <_printf_common+0x7e>
	...

00018210 <_printf_i>:
   18210:	b5f0      	push	{r4, r5, r6, r7, lr}
   18212:	b08b      	sub	sp, #44	; 0x2c
   18214:	9206      	str	r2, [sp, #24]
   18216:	000a      	movs	r2, r1
   18218:	3243      	adds	r2, #67	; 0x43
   1821a:	9307      	str	r3, [sp, #28]
   1821c:	9005      	str	r0, [sp, #20]
   1821e:	9204      	str	r2, [sp, #16]
   18220:	7e0a      	ldrb	r2, [r1, #24]
   18222:	000c      	movs	r4, r1
   18224:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18226:	2a6e      	cmp	r2, #110	; 0x6e
   18228:	d100      	bne.n	1822c <_printf_i+0x1c>
   1822a:	e08f      	b.n	1834c <_printf_i+0x13c>
   1822c:	d817      	bhi.n	1825e <_printf_i+0x4e>
   1822e:	2a63      	cmp	r2, #99	; 0x63
   18230:	d02c      	beq.n	1828c <_printf_i+0x7c>
   18232:	d808      	bhi.n	18246 <_printf_i+0x36>
   18234:	2a00      	cmp	r2, #0
   18236:	d100      	bne.n	1823a <_printf_i+0x2a>
   18238:	e099      	b.n	1836e <_printf_i+0x15e>
   1823a:	2a58      	cmp	r2, #88	; 0x58
   1823c:	d054      	beq.n	182e8 <_printf_i+0xd8>
   1823e:	0026      	movs	r6, r4
   18240:	3642      	adds	r6, #66	; 0x42
   18242:	7032      	strb	r2, [r6, #0]
   18244:	e029      	b.n	1829a <_printf_i+0x8a>
   18246:	2a64      	cmp	r2, #100	; 0x64
   18248:	d001      	beq.n	1824e <_printf_i+0x3e>
   1824a:	2a69      	cmp	r2, #105	; 0x69
   1824c:	d1f7      	bne.n	1823e <_printf_i+0x2e>
   1824e:	6821      	ldr	r1, [r4, #0]
   18250:	681a      	ldr	r2, [r3, #0]
   18252:	0608      	lsls	r0, r1, #24
   18254:	d523      	bpl.n	1829e <_printf_i+0x8e>
   18256:	1d11      	adds	r1, r2, #4
   18258:	6019      	str	r1, [r3, #0]
   1825a:	6815      	ldr	r5, [r2, #0]
   1825c:	e025      	b.n	182aa <_printf_i+0x9a>
   1825e:	2a73      	cmp	r2, #115	; 0x73
   18260:	d100      	bne.n	18264 <_printf_i+0x54>
   18262:	e088      	b.n	18376 <_printf_i+0x166>
   18264:	d808      	bhi.n	18278 <_printf_i+0x68>
   18266:	2a6f      	cmp	r2, #111	; 0x6f
   18268:	d029      	beq.n	182be <_printf_i+0xae>
   1826a:	2a70      	cmp	r2, #112	; 0x70
   1826c:	d1e7      	bne.n	1823e <_printf_i+0x2e>
   1826e:	2220      	movs	r2, #32
   18270:	6809      	ldr	r1, [r1, #0]
   18272:	430a      	orrs	r2, r1
   18274:	6022      	str	r2, [r4, #0]
   18276:	e003      	b.n	18280 <_printf_i+0x70>
   18278:	2a75      	cmp	r2, #117	; 0x75
   1827a:	d020      	beq.n	182be <_printf_i+0xae>
   1827c:	2a78      	cmp	r2, #120	; 0x78
   1827e:	d1de      	bne.n	1823e <_printf_i+0x2e>
   18280:	0022      	movs	r2, r4
   18282:	2178      	movs	r1, #120	; 0x78
   18284:	3245      	adds	r2, #69	; 0x45
   18286:	7011      	strb	r1, [r2, #0]
   18288:	4a6c      	ldr	r2, [pc, #432]	; (1843c <_printf_i+0x22c>)
   1828a:	e030      	b.n	182ee <_printf_i+0xde>
   1828c:	000e      	movs	r6, r1
   1828e:	681a      	ldr	r2, [r3, #0]
   18290:	3642      	adds	r6, #66	; 0x42
   18292:	1d11      	adds	r1, r2, #4
   18294:	6019      	str	r1, [r3, #0]
   18296:	6813      	ldr	r3, [r2, #0]
   18298:	7033      	strb	r3, [r6, #0]
   1829a:	2301      	movs	r3, #1
   1829c:	e079      	b.n	18392 <_printf_i+0x182>
   1829e:	0649      	lsls	r1, r1, #25
   182a0:	d5d9      	bpl.n	18256 <_printf_i+0x46>
   182a2:	1d11      	adds	r1, r2, #4
   182a4:	6019      	str	r1, [r3, #0]
   182a6:	2300      	movs	r3, #0
   182a8:	5ed5      	ldrsh	r5, [r2, r3]
   182aa:	2d00      	cmp	r5, #0
   182ac:	da03      	bge.n	182b6 <_printf_i+0xa6>
   182ae:	232d      	movs	r3, #45	; 0x2d
   182b0:	9a04      	ldr	r2, [sp, #16]
   182b2:	426d      	negs	r5, r5
   182b4:	7013      	strb	r3, [r2, #0]
   182b6:	4b62      	ldr	r3, [pc, #392]	; (18440 <_printf_i+0x230>)
   182b8:	270a      	movs	r7, #10
   182ba:	9303      	str	r3, [sp, #12]
   182bc:	e02f      	b.n	1831e <_printf_i+0x10e>
   182be:	6820      	ldr	r0, [r4, #0]
   182c0:	6819      	ldr	r1, [r3, #0]
   182c2:	0605      	lsls	r5, r0, #24
   182c4:	d503      	bpl.n	182ce <_printf_i+0xbe>
   182c6:	1d08      	adds	r0, r1, #4
   182c8:	6018      	str	r0, [r3, #0]
   182ca:	680d      	ldr	r5, [r1, #0]
   182cc:	e005      	b.n	182da <_printf_i+0xca>
   182ce:	0640      	lsls	r0, r0, #25
   182d0:	d5f9      	bpl.n	182c6 <_printf_i+0xb6>
   182d2:	680d      	ldr	r5, [r1, #0]
   182d4:	1d08      	adds	r0, r1, #4
   182d6:	6018      	str	r0, [r3, #0]
   182d8:	b2ad      	uxth	r5, r5
   182da:	4b59      	ldr	r3, [pc, #356]	; (18440 <_printf_i+0x230>)
   182dc:	2708      	movs	r7, #8
   182de:	9303      	str	r3, [sp, #12]
   182e0:	2a6f      	cmp	r2, #111	; 0x6f
   182e2:	d018      	beq.n	18316 <_printf_i+0x106>
   182e4:	270a      	movs	r7, #10
   182e6:	e016      	b.n	18316 <_printf_i+0x106>
   182e8:	3145      	adds	r1, #69	; 0x45
   182ea:	700a      	strb	r2, [r1, #0]
   182ec:	4a54      	ldr	r2, [pc, #336]	; (18440 <_printf_i+0x230>)
   182ee:	9203      	str	r2, [sp, #12]
   182f0:	681a      	ldr	r2, [r3, #0]
   182f2:	6821      	ldr	r1, [r4, #0]
   182f4:	1d10      	adds	r0, r2, #4
   182f6:	6018      	str	r0, [r3, #0]
   182f8:	6815      	ldr	r5, [r2, #0]
   182fa:	0608      	lsls	r0, r1, #24
   182fc:	d522      	bpl.n	18344 <_printf_i+0x134>
   182fe:	07cb      	lsls	r3, r1, #31
   18300:	d502      	bpl.n	18308 <_printf_i+0xf8>
   18302:	2320      	movs	r3, #32
   18304:	4319      	orrs	r1, r3
   18306:	6021      	str	r1, [r4, #0]
   18308:	2710      	movs	r7, #16
   1830a:	2d00      	cmp	r5, #0
   1830c:	d103      	bne.n	18316 <_printf_i+0x106>
   1830e:	2320      	movs	r3, #32
   18310:	6822      	ldr	r2, [r4, #0]
   18312:	439a      	bics	r2, r3
   18314:	6022      	str	r2, [r4, #0]
   18316:	0023      	movs	r3, r4
   18318:	2200      	movs	r2, #0
   1831a:	3343      	adds	r3, #67	; 0x43
   1831c:	701a      	strb	r2, [r3, #0]
   1831e:	6863      	ldr	r3, [r4, #4]
   18320:	60a3      	str	r3, [r4, #8]
   18322:	2b00      	cmp	r3, #0
   18324:	db5c      	blt.n	183e0 <_printf_i+0x1d0>
   18326:	2204      	movs	r2, #4
   18328:	6821      	ldr	r1, [r4, #0]
   1832a:	4391      	bics	r1, r2
   1832c:	6021      	str	r1, [r4, #0]
   1832e:	2d00      	cmp	r5, #0
   18330:	d158      	bne.n	183e4 <_printf_i+0x1d4>
   18332:	9e04      	ldr	r6, [sp, #16]
   18334:	2b00      	cmp	r3, #0
   18336:	d064      	beq.n	18402 <_printf_i+0x1f2>
   18338:	0026      	movs	r6, r4
   1833a:	9b03      	ldr	r3, [sp, #12]
   1833c:	3642      	adds	r6, #66	; 0x42
   1833e:	781b      	ldrb	r3, [r3, #0]
   18340:	7033      	strb	r3, [r6, #0]
   18342:	e05e      	b.n	18402 <_printf_i+0x1f2>
   18344:	0648      	lsls	r0, r1, #25
   18346:	d5da      	bpl.n	182fe <_printf_i+0xee>
   18348:	b2ad      	uxth	r5, r5
   1834a:	e7d8      	b.n	182fe <_printf_i+0xee>
   1834c:	6809      	ldr	r1, [r1, #0]
   1834e:	681a      	ldr	r2, [r3, #0]
   18350:	0608      	lsls	r0, r1, #24
   18352:	d505      	bpl.n	18360 <_printf_i+0x150>
   18354:	1d11      	adds	r1, r2, #4
   18356:	6019      	str	r1, [r3, #0]
   18358:	6813      	ldr	r3, [r2, #0]
   1835a:	6962      	ldr	r2, [r4, #20]
   1835c:	601a      	str	r2, [r3, #0]
   1835e:	e006      	b.n	1836e <_printf_i+0x15e>
   18360:	0649      	lsls	r1, r1, #25
   18362:	d5f7      	bpl.n	18354 <_printf_i+0x144>
   18364:	1d11      	adds	r1, r2, #4
   18366:	6019      	str	r1, [r3, #0]
   18368:	6813      	ldr	r3, [r2, #0]
   1836a:	8aa2      	ldrh	r2, [r4, #20]
   1836c:	801a      	strh	r2, [r3, #0]
   1836e:	2300      	movs	r3, #0
   18370:	9e04      	ldr	r6, [sp, #16]
   18372:	6123      	str	r3, [r4, #16]
   18374:	e054      	b.n	18420 <_printf_i+0x210>
   18376:	681a      	ldr	r2, [r3, #0]
   18378:	1d11      	adds	r1, r2, #4
   1837a:	6019      	str	r1, [r3, #0]
   1837c:	6816      	ldr	r6, [r2, #0]
   1837e:	2100      	movs	r1, #0
   18380:	6862      	ldr	r2, [r4, #4]
   18382:	0030      	movs	r0, r6
   18384:	f000 f85e 	bl	18444 <memchr>
   18388:	2800      	cmp	r0, #0
   1838a:	d001      	beq.n	18390 <_printf_i+0x180>
   1838c:	1b80      	subs	r0, r0, r6
   1838e:	6060      	str	r0, [r4, #4]
   18390:	6863      	ldr	r3, [r4, #4]
   18392:	6123      	str	r3, [r4, #16]
   18394:	2300      	movs	r3, #0
   18396:	9a04      	ldr	r2, [sp, #16]
   18398:	7013      	strb	r3, [r2, #0]
   1839a:	e041      	b.n	18420 <_printf_i+0x210>
   1839c:	6923      	ldr	r3, [r4, #16]
   1839e:	0032      	movs	r2, r6
   183a0:	9906      	ldr	r1, [sp, #24]
   183a2:	9805      	ldr	r0, [sp, #20]
   183a4:	9d07      	ldr	r5, [sp, #28]
   183a6:	47a8      	blx	r5
   183a8:	1c43      	adds	r3, r0, #1
   183aa:	d043      	beq.n	18434 <_printf_i+0x224>
   183ac:	6823      	ldr	r3, [r4, #0]
   183ae:	2500      	movs	r5, #0
   183b0:	079b      	lsls	r3, r3, #30
   183b2:	d40f      	bmi.n	183d4 <_printf_i+0x1c4>
   183b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183b6:	68e0      	ldr	r0, [r4, #12]
   183b8:	4298      	cmp	r0, r3
   183ba:	da3d      	bge.n	18438 <_printf_i+0x228>
   183bc:	0018      	movs	r0, r3
   183be:	e03b      	b.n	18438 <_printf_i+0x228>
   183c0:	0022      	movs	r2, r4
   183c2:	2301      	movs	r3, #1
   183c4:	3219      	adds	r2, #25
   183c6:	9906      	ldr	r1, [sp, #24]
   183c8:	9805      	ldr	r0, [sp, #20]
   183ca:	9e07      	ldr	r6, [sp, #28]
   183cc:	47b0      	blx	r6
   183ce:	1c43      	adds	r3, r0, #1
   183d0:	d030      	beq.n	18434 <_printf_i+0x224>
   183d2:	3501      	adds	r5, #1
   183d4:	68e3      	ldr	r3, [r4, #12]
   183d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   183d8:	1a9b      	subs	r3, r3, r2
   183da:	429d      	cmp	r5, r3
   183dc:	dbf0      	blt.n	183c0 <_printf_i+0x1b0>
   183de:	e7e9      	b.n	183b4 <_printf_i+0x1a4>
   183e0:	2d00      	cmp	r5, #0
   183e2:	d0a9      	beq.n	18338 <_printf_i+0x128>
   183e4:	9e04      	ldr	r6, [sp, #16]
   183e6:	0028      	movs	r0, r5
   183e8:	0039      	movs	r1, r7
   183ea:	f7fc feaf 	bl	1514c <__aeabi_uidivmod>
   183ee:	9b03      	ldr	r3, [sp, #12]
   183f0:	3e01      	subs	r6, #1
   183f2:	5c5b      	ldrb	r3, [r3, r1]
   183f4:	0028      	movs	r0, r5
   183f6:	7033      	strb	r3, [r6, #0]
   183f8:	0039      	movs	r1, r7
   183fa:	f7fc fe21 	bl	15040 <__udivsi3>
   183fe:	1e05      	subs	r5, r0, #0
   18400:	d1f1      	bne.n	183e6 <_printf_i+0x1d6>
   18402:	2f08      	cmp	r7, #8
   18404:	d109      	bne.n	1841a <_printf_i+0x20a>
   18406:	6823      	ldr	r3, [r4, #0]
   18408:	07db      	lsls	r3, r3, #31
   1840a:	d506      	bpl.n	1841a <_printf_i+0x20a>
   1840c:	6863      	ldr	r3, [r4, #4]
   1840e:	6922      	ldr	r2, [r4, #16]
   18410:	4293      	cmp	r3, r2
   18412:	dc02      	bgt.n	1841a <_printf_i+0x20a>
   18414:	2330      	movs	r3, #48	; 0x30
   18416:	3e01      	subs	r6, #1
   18418:	7033      	strb	r3, [r6, #0]
   1841a:	9b04      	ldr	r3, [sp, #16]
   1841c:	1b9b      	subs	r3, r3, r6
   1841e:	6123      	str	r3, [r4, #16]
   18420:	9b07      	ldr	r3, [sp, #28]
   18422:	aa09      	add	r2, sp, #36	; 0x24
   18424:	9300      	str	r3, [sp, #0]
   18426:	0021      	movs	r1, r4
   18428:	9b06      	ldr	r3, [sp, #24]
   1842a:	9805      	ldr	r0, [sp, #20]
   1842c:	f7ff fe82 	bl	18134 <_printf_common>
   18430:	1c43      	adds	r3, r0, #1
   18432:	d1b3      	bne.n	1839c <_printf_i+0x18c>
   18434:	2001      	movs	r0, #1
   18436:	4240      	negs	r0, r0
   18438:	b00b      	add	sp, #44	; 0x2c
   1843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1843c:	000198da 	.word	0x000198da
   18440:	000198c9 	.word	0x000198c9

00018444 <memchr>:
   18444:	b2c9      	uxtb	r1, r1
   18446:	1882      	adds	r2, r0, r2
   18448:	4290      	cmp	r0, r2
   1844a:	d101      	bne.n	18450 <memchr+0xc>
   1844c:	2000      	movs	r0, #0
   1844e:	4770      	bx	lr
   18450:	7803      	ldrb	r3, [r0, #0]
   18452:	428b      	cmp	r3, r1
   18454:	d0fb      	beq.n	1844e <memchr+0xa>
   18456:	3001      	adds	r0, #1
   18458:	e7f6      	b.n	18448 <memchr+0x4>

0001845a <_realloc_r>:
   1845a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1845c:	0007      	movs	r7, r0
   1845e:	000d      	movs	r5, r1
   18460:	0016      	movs	r6, r2
   18462:	2900      	cmp	r1, #0
   18464:	d105      	bne.n	18472 <_realloc_r+0x18>
   18466:	0011      	movs	r1, r2
   18468:	f7ff fa86 	bl	17978 <_malloc_r>
   1846c:	0004      	movs	r4, r0
   1846e:	0020      	movs	r0, r4
   18470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18472:	2a00      	cmp	r2, #0
   18474:	d103      	bne.n	1847e <_realloc_r+0x24>
   18476:	f7ff fa35 	bl	178e4 <_free_r>
   1847a:	0034      	movs	r4, r6
   1847c:	e7f7      	b.n	1846e <_realloc_r+0x14>
   1847e:	f000 f812 	bl	184a6 <_malloc_usable_size_r>
   18482:	002c      	movs	r4, r5
   18484:	4286      	cmp	r6, r0
   18486:	d9f2      	bls.n	1846e <_realloc_r+0x14>
   18488:	0031      	movs	r1, r6
   1848a:	0038      	movs	r0, r7
   1848c:	f7ff fa74 	bl	17978 <_malloc_r>
   18490:	1e04      	subs	r4, r0, #0
   18492:	d0ec      	beq.n	1846e <_realloc_r+0x14>
   18494:	0029      	movs	r1, r5
   18496:	0032      	movs	r2, r6
   18498:	f7ff f9f2 	bl	17880 <memcpy>
   1849c:	0029      	movs	r1, r5
   1849e:	0038      	movs	r0, r7
   184a0:	f7ff fa20 	bl	178e4 <_free_r>
   184a4:	e7e3      	b.n	1846e <_realloc_r+0x14>

000184a6 <_malloc_usable_size_r>:
   184a6:	1f0b      	subs	r3, r1, #4
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	1f18      	subs	r0, r3, #4
   184ac:	2b00      	cmp	r3, #0
   184ae:	da01      	bge.n	184b4 <_malloc_usable_size_r+0xe>
   184b0:	580b      	ldr	r3, [r1, r0]
   184b2:	18c0      	adds	r0, r0, r3
   184b4:	4770      	bx	lr
   184b6:	0000      	movs	r0, r0
   184b8:	30303030 	.word	0x30303030
   184bc:	30303030 	.word	0x30303030
   184c0:	00003030 	.word	0x00003030
   184c4:	2e707466 	.word	0x2e707466
   184c8:	76697264 	.word	0x76697264
   184cc:	2e716865 	.word	0x2e716865
   184d0:	006d6f63 	.word	0x006d6f63
   184d4:	7269662f 	.word	0x7269662f
   184d8:	7261776d 	.word	0x7261776d
   184dc:	00002f65 	.word	0x00002f65
   184e0:	75686172 	.word	0x75686172
   184e4:	61726e6c 	.word	0x61726e6c
   184e8:	646f6874 	.word	0x646f6874
   184ec:	006c636b 	.word	0x006c636b
   184f0:	34333231 	.word	0x34333231
   184f4:	38373635 	.word	0x38373635
   184f8:	00000039 	.word	0x00000039
   184fc:	6d726966 	.word	0x6d726966
   18500:	65726177 	.word	0x65726177
   18504:	6e69622e 	.word	0x6e69622e
   18508:	00000000 	.word	0x00000000
   1850c:	31343037 	.word	0x31343037
   18510:	39363931 	.word	0x39363931
   18514:	00003935 	.word	0x00003935
   18518:	38393637 	.word	0x38393637
   1851c:	32393334 	.word	0x32393334
   18520:	00003130 	.word	0x00003130
   18524:	33383337 	.word	0x33383337
   18528:	32343136 	.word	0x32343136
   1852c:	00003431 	.word	0x00003431
   18530:	33383337 	.word	0x33383337
   18534:	36323236 	.word	0x36323236
   18538:	00003837 	.word	0x00003837
   1853c:	36383539 	.word	0x36383539
   18540:	39353331 	.word	0x39353331
   18544:	00003837 	.word	0x00003837
   18548:	00003a50 	.word	0x00003a50
   1854c:	00003a53 	.word	0x00003a53
   18550:	0000000a 	.word	0x0000000a
   18554:	204d5347 	.word	0x204d5347
   18558:	656d6954 	.word	0x656d6954
   1855c:	0074756f 	.word	0x0074756f
   18560:	4f525245 	.word	0x4f525245
   18564:	00000052 	.word	0x00000052
   18568:	00004b4f 	.word	0x00004b4f
   1856c:	000d5441 	.word	0x000d5441
   18570:	492b5441 	.word	0x492b5441
   18574:	303d4346 	.word	0x303d4346
   18578:	000d302c 	.word	0x000d302c
   1857c:	4552432b 	.word	0x4552432b
   18580:	30203a47 	.word	0x30203a47
   18584:	0000312c 	.word	0x0000312c
   18588:	432b5441 	.word	0x432b5441
   1858c:	3f474552 	.word	0x3f474552
   18590:	0000000d 	.word	0x0000000d
   18594:	4552432b 	.word	0x4552432b
   18598:	30203a47 	.word	0x30203a47
   1859c:	0000352c 	.word	0x0000352c
   185a0:	492b5441 	.word	0x492b5441
   185a4:	253d5250 	.word	0x253d5250
   185a8:	00000d64 	.word	0x00000d64
   185ac:	492b5441 	.word	0x492b5441
   185b0:	303d5250 	.word	0x303d5250
   185b4:	0000000d 	.word	0x0000000d
   185b8:	432b5441 	.word	0x432b5441
   185bc:	3d474552 	.word	0x3d474552
   185c0:	00000d31 	.word	0x00000d31
   185c4:	432b5441 	.word	0x432b5441
   185c8:	3d4e5546 	.word	0x3d4e5546
   185cc:	00000d31 	.word	0x00000d31
   185d0:	5546432b 	.word	0x5546432b
   185d4:	31203a4e 	.word	0x31203a4e
   185d8:	00000000 	.word	0x00000000
   185dc:	432b5441 	.word	0x432b5441
   185e0:	3f4e5546 	.word	0x3f4e5546
   185e4:	0000000d 	.word	0x0000000d
   185e8:	432b5441 	.word	0x432b5441
   185ec:	3d4e5546 	.word	0x3d4e5546
   185f0:	00000d30 	.word	0x00000d30
   185f4:	5546432b 	.word	0x5546432b
   185f8:	30203a4e 	.word	0x30203a4e
   185fc:	00000000 	.word	0x00000000
   18600:	432b5441 	.word	0x432b5441
   18604:	3d4e5546 	.word	0x3d4e5546
   18608:	0d312c31 	.word	0x0d312c31
   1860c:	00000000 	.word	0x00000000
   18610:	4950432b 	.word	0x4950432b
   18614:	52203a4e 	.word	0x52203a4e
   18618:	59444145 	.word	0x59444145
   1861c:	00000000 	.word	0x00000000
   18620:	432b5441 	.word	0x432b5441
   18624:	3f4e4950 	.word	0x3f4e4950
   18628:	0000000d 	.word	0x0000000d
   1862c:	432b5441 	.word	0x432b5441
   18630:	4144474d 	.word	0x4144474d
   18634:	4544223d 	.word	0x4544223d
   18638:	4c41204c 	.word	0x4c41204c
   1863c:	000d224c 	.word	0x000d224c
   18640:	57265441 	.word	0x57265441
   18644:	0000000d 	.word	0x0000000d
   18648:	432b5441 	.word	0x432b5441
   1864c:	3d50494c 	.word	0x3d50494c
   18650:	00000d31 	.word	0x00000d31
   18654:	432b5441 	.word	0x432b5441
   18658:	3d504c4f 	.word	0x3d504c4f
   1865c:	00000d31 	.word	0x00000d31
   18660:	432b5441 	.word	0x432b5441
   18664:	4b4c4353 	.word	0x4b4c4353
   18668:	000d313d 	.word	0x000d313d
   1866c:	432b5441 	.word	0x432b5441
   18670:	3f504c4f 	.word	0x3f504c4f
   18674:	0000000d 	.word	0x0000000d
   18678:	4c4f432b 	.word	0x4c4f432b
   1867c:	00000050 	.word	0x00000050
   18680:	0000003a 	.word	0x0000003a
   18684:	0000002c 	.word	0x0000002c
   18688:	432b5441 	.word	0x432b5441
   1868c:	3d43434c 	.word	0x3d43434c
   18690:	00000d31 	.word	0x00000d31
   18694:	46265441 	.word	0x46265441
   18698:	0000000d 	.word	0x0000000d
   1869c:	30455441 	.word	0x30455441
   186a0:	0000000d 	.word	0x0000000d
   186a4:	432b5441 	.word	0x432b5441
   186a8:	3d46474d 	.word	0x3d46474d
   186ac:	00000d31 	.word	0x00000d31
   186b0:	432b5441 	.word	0x432b5441
   186b4:	3d504d53 	.word	0x3d504d53
   186b8:	312c3731 	.word	0x312c3731
   186bc:	302c3736 	.word	0x302c3736
   186c0:	000d302c 	.word	0x000d302c
   186c4:	432b5441 	.word	0x432b5441
   186c8:	3d534153 	.word	0x3d534153
   186cc:	00000d30 	.word	0x00000d30
   186d0:	432b5441 	.word	0x432b5441
   186d4:	3d534153 	.word	0x3d534153
   186d8:	00000d31 	.word	0x00000d31
   186dc:	432b5441 	.word	0x432b5441
   186e0:	000d5153 	.word	0x000d5153
   186e4:	00003939 	.word	0x00003939
   186e8:	432b5441 	.word	0x432b5441
   186ec:	3d494d4e 	.word	0x3d494d4e
   186f0:	2c312c32 	.word	0x2c312c32
   186f4:	2c302c30 	.word	0x2c302c30
   186f8:	00000d30 	.word	0x00000d30
   186fc:	432b5441 	.word	0x432b5441
   18700:	3d494d4e 	.word	0x3d494d4e
   18704:	2c302c31 	.word	0x2c302c31
   18708:	2c302c30 	.word	0x2c302c30
   1870c:	00000d30 	.word	0x00000d30
   18710:	432b5441 	.word	0x432b5441
   18714:	3d53474d 	.word	0x3d53474d
   18718:	22732522 	.word	0x22732522
   1871c:	0000000d 	.word	0x0000000d
   18720:	0000003e 	.word	0x0000003e
   18724:	0d1a7325 	.word	0x0d1a7325
   18728:	00000000 	.word	0x00000000
   1872c:	432b5441 	.word	0x432b5441
   18730:	3d4c474d 	.word	0x3d4c474d
   18734:	43455222 	.word	0x43455222
   18738:	524e5520 	.word	0x524e5520
   1873c:	22444145 	.word	0x22444145
   18740:	0000000d 	.word	0x0000000d
   18744:	432b5441 	.word	0x432b5441
   18748:	3d4c474d 	.word	0x3d4c474d
   1874c:	43455222 	.word	0x43455222
   18750:	41455220 	.word	0x41455220
   18754:	000d2244 	.word	0x000d2244
   18758:	432b5441 	.word	0x432b5441
   1875c:	3d4c474d 	.word	0x3d4c474d
   18760:	4c4c4122 	.word	0x4c4c4122
   18764:	00000d22 	.word	0x00000d22
   18768:	4c474d43 	.word	0x4c474d43
   1876c:	00000000 	.word	0x00000000
   18770:	432b5441 	.word	0x432b5441
   18774:	3d52474d 	.word	0x3d52474d
   18778:	000d6425 	.word	0x000d6425
   1877c:	474d432b 	.word	0x474d432b
   18780:	00000052 	.word	0x00000052
   18784:	25445441 	.word	0x25445441
   18788:	000d3b73 	.word	0x000d3b73
   1878c:	0d415441 	.word	0x0d415441
   18790:	00000000 	.word	0x00000000
   18794:	432b5441 	.word	0x432b5441
   18798:	3d53544c 	.word	0x3d53544c
   1879c:	00000d31 	.word	0x00000d31
   187a0:	432b5441 	.word	0x432b5441
   187a4:	3d53544c 	.word	0x3d53544c
   187a8:	00000d30 	.word	0x00000d30
   187ac:	442b5441 	.word	0x442b5441
   187b0:	3d544544 	.word	0x3d544544
   187b4:	00000d31 	.word	0x00000d31
   187b8:	562b5441 	.word	0x562b5441
   187bc:	223d5354 	.word	0x223d5354
   187c0:	0d227325 	.word	0x0d227325
   187c4:	00000000 	.word	0x00000000
   187c8:	432b5441 	.word	0x432b5441
   187cc:	0d505548 	.word	0x0d505548
   187d0:	00000000 	.word	0x00000000
   187d4:	432b5441 	.word	0x432b5441
   187d8:	3d415743 	.word	0x3d415743
   187dc:	0d302c30 	.word	0x0d302c30
   187e0:	00000000 	.word	0x00000000
   187e4:	472b5441 	.word	0x472b5441
   187e8:	55424d53 	.word	0x55424d53
   187ec:	313d5953 	.word	0x313d5953
   187f0:	0000000d 	.word	0x0000000d
   187f4:	472b5441 	.word	0x472b5441
   187f8:	55424d53 	.word	0x55424d53
   187fc:	303d5953 	.word	0x303d5953
   18800:	0000000d 	.word	0x0000000d
   18804:	432b5441 	.word	0x432b5441
   18808:	3d434552 	.word	0x3d434552
   1880c:	00000d35 	.word	0x00000d35
   18810:	432b5441 	.word	0x432b5441
   18814:	3d434552 	.word	0x3d434552
   18818:	43222c34 	.word	0x43222c34
   1881c:	73555c3a 	.word	0x73555c3a
   18820:	255c7265 	.word	0x255c7265
   18824:	6d612e63 	.word	0x6d612e63
   18828:	302c2272 	.word	0x302c2272
   1882c:	2c30392c 	.word	0x2c30392c
   18830:	000d7525 	.word	0x000d7525
   18834:	432b5441 	.word	0x432b5441
   18838:	3f4b4c43 	.word	0x3f4b4c43
   1883c:	0000000d 	.word	0x0000000d
   18840:	00000022 	.word	0x00000022
   18844:	0000002f 	.word	0x0000002f
   18848:	0000002b 	.word	0x0000002b
   1884c:	544d432b 	.word	0x544d432b
   18850:	00003a49 	.word	0x00003a49
   18854:	474e4952 	.word	0x474e4952
   18858:	00000000 	.word	0x00000000
   1885c:	494c432b 	.word	0x494c432b
   18860:	00000050 	.word	0x00000050
   18864:	43204f4e 	.word	0x43204f4e
   18868:	49525241 	.word	0x49525241
   1886c:	00005245 	.word	0x00005245
   18870:	59535542 	.word	0x59535542
   18874:	00000000 	.word	0x00000000
   18878:	41204f4e 	.word	0x41204f4e
   1887c:	4557534e 	.word	0x4557534e
   18880:	00000052 	.word	0x00000052
   18884:	4d54442b 	.word	0x4d54442b
   18888:	00003a46 	.word	0x00003a46
   1888c:	4552432b 	.word	0x4552432b
   18890:	30203a43 	.word	0x30203a43
   18894:	00000000 	.word	0x00000000
   18898:	532b5441 	.word	0x532b5441
   1889c:	52425041 	.word	0x52425041
   188a0:	312c333d 	.word	0x312c333d
   188a4:	4f43222c 	.word	0x4f43222c
   188a8:	5059544e 	.word	0x5059544e
   188ac:	222c2245 	.word	0x222c2245
   188b0:	53525047 	.word	0x53525047
   188b4:	00000d22 	.word	0x00000d22
   188b8:	432b5441 	.word	0x432b5441
   188bc:	3f53504f 	.word	0x3f53504f
   188c0:	0000000d 	.word	0x0000000d
   188c4:	504f432b 	.word	0x504f432b
   188c8:	00003a53 	.word	0x00003a53
   188cc:	41454449 	.word	0x41454449
   188d0:	00000000 	.word	0x00000000
   188d4:	532b5441 	.word	0x532b5441
   188d8:	52425041 	.word	0x52425041
   188dc:	312c333d 	.word	0x312c333d
   188e0:	5041222c 	.word	0x5041222c
   188e4:	222c224e 	.word	0x222c224e
   188e8:	65746e69 	.word	0x65746e69
   188ec:	74656e72 	.word	0x74656e72
   188f0:	00000d22 	.word	0x00000d22
   188f4:	41444f56 	.word	0x41444f56
   188f8:	00000000 	.word	0x00000000
   188fc:	532b5441 	.word	0x532b5441
   18900:	52425041 	.word	0x52425041
   18904:	312c333d 	.word	0x312c333d
   18908:	5041222c 	.word	0x5041222c
   1890c:	222c224e 	.word	0x222c224e
   18910:	22777777 	.word	0x22777777
   18914:	0000000d 	.word	0x0000000d
   18918:	4c4e5342 	.word	0x4c4e5342
   1891c:	00000000 	.word	0x00000000
   18920:	532b5441 	.word	0x532b5441
   18924:	52425041 	.word	0x52425041
   18928:	312c333d 	.word	0x312c333d
   1892c:	5041222c 	.word	0x5041222c
   18930:	222c224e 	.word	0x222c224e
   18934:	6c6e7362 	.word	0x6c6e7362
   18938:	2274656e 	.word	0x2274656e
   1893c:	0000000d 	.word	0x0000000d
   18940:	54524941 	.word	0x54524941
   18944:	00004c45 	.word	0x00004c45
   18948:	532b5441 	.word	0x532b5441
   1894c:	52425041 	.word	0x52425041
   18950:	312c333d 	.word	0x312c333d
   18954:	5041222c 	.word	0x5041222c
   18958:	222c224e 	.word	0x222c224e
   1895c:	74726961 	.word	0x74726961
   18960:	70676c65 	.word	0x70676c65
   18964:	632e7372 	.word	0x632e7372
   18968:	0d226d6f 	.word	0x0d226d6f
   1896c:	00000000 	.word	0x00000000
   18970:	532b5441 	.word	0x532b5441
   18974:	52425041 	.word	0x52425041
   18978:	312c333d 	.word	0x312c333d
   1897c:	5041222c 	.word	0x5041222c
   18980:	222c224e 	.word	0x222c224e
   18984:	00000d22 	.word	0x00000d22
   18988:	532b5441 	.word	0x532b5441
   1898c:	52425041 	.word	0x52425041
   18990:	312c323d 	.word	0x312c323d
   18994:	0000000d 	.word	0x0000000d
   18998:	5041532b 	.word	0x5041532b
   1899c:	203a5242 	.word	0x203a5242
   189a0:	00302c31 	.word	0x00302c31
   189a4:	5041532b 	.word	0x5041532b
   189a8:	203a5242 	.word	0x203a5242
   189ac:	00312c31 	.word	0x00312c31
   189b0:	5041532b 	.word	0x5041532b
   189b4:	203a5242 	.word	0x203a5242
   189b8:	00322c31 	.word	0x00322c31
   189bc:	5041532b 	.word	0x5041532b
   189c0:	203a5242 	.word	0x203a5242
   189c4:	00332c31 	.word	0x00332c31
   189c8:	532b5441 	.word	0x532b5441
   189cc:	52425041 	.word	0x52425041
   189d0:	312c313d 	.word	0x312c313d
   189d4:	0000000d 	.word	0x0000000d
   189d8:	532b5441 	.word	0x532b5441
   189dc:	52425041 	.word	0x52425041
   189e0:	312c303d 	.word	0x312c303d
   189e4:	0000000d 	.word	0x0000000d
   189e8:	462b5441 	.word	0x462b5441
   189ec:	49435054 	.word	0x49435054
   189f0:	0d313d44 	.word	0x0d313d44
   189f4:	00000000 	.word	0x00000000
   189f8:	462b5441 	.word	0x462b5441
   189fc:	45535054 	.word	0x45535054
   18a00:	223d5652 	.word	0x223d5652
   18a04:	0d227325 	.word	0x0d227325
   18a08:	00000000 	.word	0x00000000
   18a0c:	462b5441 	.word	0x462b5441
   18a10:	4e555054 	.word	0x4e555054
   18a14:	7325223d 	.word	0x7325223d
   18a18:	00000d22 	.word	0x00000d22
   18a1c:	462b5441 	.word	0x462b5441
   18a20:	57505054 	.word	0x57505054
   18a24:	7325223d 	.word	0x7325223d
   18a28:	00000d22 	.word	0x00000d22
   18a2c:	462b5441 	.word	0x462b5441
   18a30:	45475054 	.word	0x45475054
   18a34:	4d414e54 	.word	0x4d414e54
   18a38:	25223d45 	.word	0x25223d45
   18a3c:	000d2273 	.word	0x000d2273
   18a40:	462b5441 	.word	0x462b5441
   18a44:	45475054 	.word	0x45475054
   18a48:	54415054 	.word	0x54415054
   18a4c:	25223d48 	.word	0x25223d48
   18a50:	000d2273 	.word	0x000d2273
   18a54:	5054462b 	.word	0x5054462b
   18a58:	455a4953 	.word	0x455a4953
   18a5c:	2c31203a 	.word	0x2c31203a
   18a60:	00000000 	.word	0x00000000
   18a64:	462b5441 	.word	0x462b5441
   18a68:	49535054 	.word	0x49535054
   18a6c:	000d455a 	.word	0x000d455a
   18a70:	5054462b 	.word	0x5054462b
   18a74:	3a544547 	.word	0x3a544547
   18a78:	312c3120 	.word	0x312c3120
   18a7c:	00000000 	.word	0x00000000
   18a80:	462b5441 	.word	0x462b5441
   18a84:	45475054 	.word	0x45475054
   18a88:	0d313d54 	.word	0x0d313d54
   18a8c:	00000000 	.word	0x00000000
   18a90:	462b5441 	.word	0x462b5441
   18a94:	45475054 	.word	0x45475054
   18a98:	2c323d54 	.word	0x2c323d54
   18a9c:	000d6425 	.word	0x000d6425
   18aa0:	5054462b 	.word	0x5054462b
   18aa4:	3a544547 	.word	0x3a544547
   18aa8:	00000020 	.word	0x00000020
   18aac:	434c432b 	.word	0x434c432b
   18ab0:	31203a43 	.word	0x31203a43
   18ab4:	322c302c 	.word	0x322c302c
   18ab8:	00000000 	.word	0x00000000
   18abc:	434c432b 	.word	0x434c432b
   18ac0:	31203a43 	.word	0x31203a43
   18ac4:	332c302c 	.word	0x332c302c
   18ac8:	00000000 	.word	0x00000000
   18acc:	434c432b 	.word	0x434c432b
   18ad0:	31203a43 	.word	0x31203a43
   18ad4:	302c302c 	.word	0x302c302c
   18ad8:	00000000 	.word	0x00000000
   18adc:	434c432b 	.word	0x434c432b
   18ae0:	31203a43 	.word	0x31203a43
   18ae4:	362c302c 	.word	0x362c302c
	...
   18af0:	4e4f4d41 	.word	0x4e4f4d41
   18af4:	00000000 	.word	0x00000000
   18af8:	55475250 	.word	0x55475250
   18afc:	00004450 	.word	0x00004450
   18b00:	54494157 	.word	0x54494157
   18b04:	00000000 	.word	0x00000000
   18b08:	204d5347 	.word	0x204d5347
   18b0c:	4c4c4143 	.word	0x4c4c4143
   18b10:	49415720 	.word	0x49415720
   18b14:	4e495454 	.word	0x4e495454
   18b18:	49442047 	.word	0x49442047
   18b1c:	4c424153 	.word	0x4c424153
   18b20:	203a2045 	.word	0x203a2045
   18b24:	43435553 	.word	0x43435553
   18b28:	00535345 	.word	0x00535345
   18b2c:	204d5347 	.word	0x204d5347
   18b30:	4c4c4143 	.word	0x4c4c4143
   18b34:	49415720 	.word	0x49415720
   18b38:	4e495454 	.word	0x4e495454
   18b3c:	49442047 	.word	0x49442047
   18b40:	4c424153 	.word	0x4c424153
   18b44:	203a2045 	.word	0x203a2045
   18b48:	4c494146 	.word	0x4c494146
   18b4c:	00004445 	.word	0x00004445
   18b50:	41454c43 	.word	0x41454c43
   18b54:	4c4c4152 	.word	0x4c4c4152
   18b58:	00000000 	.word	0x00000000
   18b5c:	204c4c41 	.word	0x204c4c41
   18b60:	52455355 	.word	0x52455355
   18b64:	4d554e20 	.word	0x4d554e20
   18b68:	53524542 	.word	0x53524542
   18b6c:	454c4320 	.word	0x454c4320
   18b70:	44455241 	.word	0x44455241
   18b74:	00000000 	.word	0x00000000
   18b78:	41464544 	.word	0x41464544
   18b7c:	00544c55 	.word	0x00544c55
   18b80:	204c4c41 	.word	0x204c4c41
   18b84:	54544553 	.word	0x54544553
   18b88:	53474e49 	.word	0x53474e49
   18b8c:	45524120 	.word	0x45524120
   18b90:	574f4e20 	.word	0x574f4e20
   18b94:	43414620 	.word	0x43414620
   18b98:	59524f54 	.word	0x59524f54
   18b9c:	46454420 	.word	0x46454420
   18ba0:	544c5541 	.word	0x544c5541
   18ba4:	00000000 	.word	0x00000000
   18ba8:	004d554e 	.word	0x004d554e
   18bac:	4e206f4e 	.word	0x4e206f4e
   18bb0:	65626d75 	.word	0x65626d75
   18bb4:	45207372 	.word	0x45207372
   18bb8:	74736978 	.word	0x74736978
   18bbc:	00000073 	.word	0x00000073
   18bc0:	45534552 	.word	0x45534552
   18bc4:	00000054 	.word	0x00000054
   18bc8:	00444944 	.word	0x00444944
   18bcc:	4f545541 	.word	0x4f545541
   18bd0:	00004e4f 	.word	0x00004e4f
   18bd4:	4f544f4d 	.word	0x4f544f4d
   18bd8:	55412052 	.word	0x55412052
   18bdc:	4e4f4f54 	.word	0x4e4f4f54
   18be0:	004e4f20 	.word	0x004e4f20
   18be4:	4f545541 	.word	0x4f545541
   18be8:	0046464f 	.word	0x0046464f
   18bec:	4f544f4d 	.word	0x4f544f4d
   18bf0:	55412052 	.word	0x55412052
   18bf4:	4e4f4f54 	.word	0x4e4f4f54
   18bf8:	46464f20 	.word	0x46464f20
   18bfc:	00000000 	.word	0x00000000
   18c00:	50594257 	.word	0x50594257
   18c04:	00004e4f 	.word	0x00004e4f
   18c08:	45544157 	.word	0x45544157
   18c0c:	59422052 	.word	0x59422052
   18c10:	53534150 	.word	0x53534150
   18c14:	004e4f20 	.word	0x004e4f20
   18c18:	50594257 	.word	0x50594257
   18c1c:	0046464f 	.word	0x0046464f
   18c20:	45544157 	.word	0x45544157
   18c24:	59422052 	.word	0x59422052
   18c28:	53534150 	.word	0x53534150
   18c2c:	46464f20 	.word	0x46464f20
   18c30:	00000000 	.word	0x00000000
   18c34:	4f505053 	.word	0x4f505053
   18c38:	0000004e 	.word	0x0000004e
   18c3c:	20505053 	.word	0x20505053
   18c40:	00004e4f 	.word	0x00004e4f
   18c44:	4f505053 	.word	0x4f505053
   18c48:	00004646 	.word	0x00004646
   18c4c:	20505053 	.word	0x20505053
   18c50:	0046464f 	.word	0x0046464f
   18c54:	56505053 	.word	0x56505053
   18c58:	00000000 	.word	0x00000000
   18c5c:	20505053 	.word	0x20505053
   18c60:	544c4f56 	.word	0x544c4f56
   18c64:	54455320 	.word	0x54455320
   18c68:	00000000 	.word	0x00000000
   18c6c:	4f514553 	.word	0x4f514553
   18c70:	0000004e 	.word	0x0000004e
   18c74:	50514553 	.word	0x50514553
   18c78:	004e4f20 	.word	0x004e4f20
   18c7c:	4f514553 	.word	0x4f514553
   18c80:	00004646 	.word	0x00004646
   18c84:	50514553 	.word	0x50514553
   18c88:	46464f20 	.word	0x46464f20
   18c8c:	00000000 	.word	0x00000000
   18c90:	00444e44 	.word	0x00444e44
   18c94:	20444e44 	.word	0x20444e44
   18c98:	0000203a 	.word	0x0000203a
   18c9c:	004b4f20 	.word	0x004b4f20
   18ca0:	50534552 	.word	0x50534552
   18ca4:	00000000 	.word	0x00000000
   18ca8:	50534552 	.word	0x50534552
   18cac:	00203a20 	.word	0x00203a20
   18cb0:	0052564f 	.word	0x0052564f
   18cb4:	2052564f 	.word	0x2052564f
   18cb8:	20544553 	.word	0x20544553
   18cbc:	00004b4f 	.word	0x00004b4f
   18cc0:	52444e55 	.word	0x52444e55
   18cc4:	00000000 	.word	0x00000000
   18cc8:	52444e55 	.word	0x52444e55
   18ccc:	54455320 	.word	0x54455320
   18cd0:	004b4f20 	.word	0x004b4f20
   18cd4:	41545341 	.word	0x41545341
   18cd8:	00000054 	.word	0x00000054
   18cdc:	75253a43 	.word	0x75253a43
   18ce0:	0a75252e 	.word	0x0a75252e
   18ce4:	75253a4e 	.word	0x75253a4e
   18ce8:	253a4f0a 	.word	0x253a4f0a
   18cec:	3a550a75 	.word	0x3a550a75
   18cf0:	4f0a7525 	.word	0x4f0a7525
   18cf4:	75253a50 	.word	0x75253a50
   18cf8:	3a50550a 	.word	0x3a50550a
   18cfc:	00007525 	.word	0x00007525
   18d00:	4f46564f 	.word	0x4f46564f
   18d04:	0000004e 	.word	0x0000004e
   18d08:	56455250 	.word	0x56455250
   18d0c:	20544e45 	.word	0x20544e45
   18d10:	5245564f 	.word	0x5245564f
   18d14:	574f4c46 	.word	0x574f4c46
   18d18:	54455320 	.word	0x54455320
   18d1c:	474e4954 	.word	0x474e4954
   18d20:	004e4f20 	.word	0x004e4f20
   18d24:	4f46564f 	.word	0x4f46564f
   18d28:	00004646 	.word	0x00004646
   18d2c:	56455250 	.word	0x56455250
   18d30:	20544e45 	.word	0x20544e45
   18d34:	5245564f 	.word	0x5245564f
   18d38:	574f4c46 	.word	0x574f4c46
   18d3c:	54455320 	.word	0x54455320
   18d40:	474e4954 	.word	0x474e4954
   18d44:	46464f20 	.word	0x46464f20
   18d48:	00000000 	.word	0x00000000
   18d4c:	4f4d324d 	.word	0x4f4d324d
   18d50:	0000004e 	.word	0x0000004e
   18d54:	204d324d 	.word	0x204d324d
   18d58:	6e727554 	.word	0x6e727554
   18d5c:	4f206465 	.word	0x4f206465
   18d60:	52202c6e 	.word	0x52202c6e
   18d64:	746f6d65 	.word	0x746f6d65
   18d68:	754e2065 	.word	0x754e2065
   18d6c:	7265626d 	.word	0x7265626d
   18d70:	726c4120 	.word	0x726c4120
   18d74:	79646165 	.word	0x79646165
   18d78:	72655620 	.word	0x72655620
   18d7c:	65696669 	.word	0x65696669
   18d80:	00000064 	.word	0x00000064
   18d84:	6f727245 	.word	0x6f727245
   18d88:	4d203a72 	.word	0x4d203a72
   18d8c:	52204d32 	.word	0x52204d32
   18d90:	746f6d65 	.word	0x746f6d65
   18d94:	754e2065 	.word	0x754e2065
   18d98:	7265626d 	.word	0x7265626d
   18d9c:	746f4e20 	.word	0x746f4e20
   18da0:	65725020 	.word	0x65725020
   18da4:	746e6573 	.word	0x746e6573
   18da8:	00000000 	.word	0x00000000
   18dac:	4f4d324d 	.word	0x4f4d324d
   18db0:	00004646 	.word	0x00004646
   18db4:	204d324d 	.word	0x204d324d
   18db8:	54544553 	.word	0x54544553
   18dbc:	20474e49 	.word	0x20474e49
   18dc0:	0046464f 	.word	0x0046464f
   18dc4:	54415453 	.word	0x54415453
   18dc8:	00005355 	.word	0x00005355
   18dcc:	45544c41 	.word	0x45544c41
   18dd0:	54414e52 	.word	0x54414e52
   18dd4:	554e2045 	.word	0x554e2045
   18dd8:	5245424d 	.word	0x5245424d
   18ddc:	004e4f20 	.word	0x004e4f20
   18de0:	45544c41 	.word	0x45544c41
   18de4:	54414e52 	.word	0x54414e52
   18de8:	554e2045 	.word	0x554e2045
   18dec:	5245424d 	.word	0x5245424d
   18df0:	544f4e20 	.word	0x544f4e20
   18df4:	45525020 	.word	0x45525020
   18df8:	544e4553 	.word	0x544e4553
   18dfc:	00000000 	.word	0x00000000
   18e00:	464f4d41 	.word	0x464f4d41
   18e04:	00000046 	.word	0x00000046
   18e08:	45544c41 	.word	0x45544c41
   18e0c:	54414e52 	.word	0x54414e52
   18e10:	4f4d2045 	.word	0x4f4d2045
   18e14:	454c4942 	.word	0x454c4942
   18e18:	4d554e20 	.word	0x4d554e20
   18e1c:	20524542 	.word	0x20524542
   18e20:	0046464f 	.word	0x0046464f
   18e24:	464f434e 	.word	0x464f434e
   18e28:	00000046 	.word	0x00000046
   18e2c:	43204f4e 	.word	0x43204f4e
   18e30:	204c4c41 	.word	0x204c4c41
   18e34:	54544553 	.word	0x54544553
   18e38:	20474e49 	.word	0x20474e49
   18e3c:	0046464f 	.word	0x0046464f
   18e40:	54544547 	.word	0x54544547
   18e44:	00454d49 	.word	0x00454d49
   18e48:	454d4954 	.word	0x454d4954
   18e4c:	25203a20 	.word	0x25203a20
   18e50:	75253a75 	.word	0x75253a75
   18e54:	00000000 	.word	0x00000000
   18e58:	54544553 	.word	0x54544553
   18e5c:	00454d49 	.word	0x00454d49
   18e60:	4954434e 	.word	0x4954434e
   18e64:	0000454d 	.word	0x0000454d
   18e68:	0000002d 	.word	0x0000002d
   18e6c:	0000003a 	.word	0x0000003a
   18e70:	43204f4e 	.word	0x43204f4e
   18e74:	204c4c41 	.word	0x204c4c41
   18e78:	494d4954 	.word	0x494d4954
   18e7c:	2053474e 	.word	0x2053474e
   18e80:	00544553 	.word	0x00544553
   18e84:	47415453 	.word	0x47415453
   18e88:	00000045 	.word	0x00000045
   18e8c:	4c4c4143 	.word	0x4c4c4143
   18e90:	41545320 	.word	0x41545320
   18e94:	53204547 	.word	0x53204547
   18e98:	54205445 	.word	0x54205445
   18e9c:	203a204f 	.word	0x203a204f
   18ea0:	00006425 	.word	0x00006425
   18ea4:	52415453 	.word	0x52415453
   18ea8:	454d4954 	.word	0x454d4954
   18eac:	00000000 	.word	0x00000000
   18eb0:	41545320 	.word	0x41545320
   18eb4:	4d495452 	.word	0x4d495452
   18eb8:	45532045 	.word	0x45532045
   18ebc:	4f542054 	.word	0x4f542054
   18ec0:	25203a20 	.word	0x25203a20
   18ec4:	00000064 	.word	0x00000064
   18ec8:	4f545541 	.word	0x4f545541
   18ecc:	454d4954 	.word	0x454d4954
   18ed0:	00000000 	.word	0x00000000
   18ed4:	54554120 	.word	0x54554120
   18ed8:	4d49544f 	.word	0x4d49544f
   18edc:	45532045 	.word	0x45532045
   18ee0:	4f542054 	.word	0x4f542054
   18ee4:	25203a20 	.word	0x25203a20
   18ee8:	00000064 	.word	0x00000064
   18eec:	004c4142 	.word	0x004c4142
   18ef0:	002b504d 	.word	0x002b504d
   18ef4:	4f4e2050 	.word	0x4f4e2050
   18ef8:	44444120 	.word	0x44444120
   18efc:	00444544 	.word	0x00444544
   18f00:	002b534d 	.word	0x002b534d
   18f04:	4f4e2053 	.word	0x4f4e2053
   18f08:	44444120 	.word	0x44444120
   18f0c:	00444544 	.word	0x00444544
   18f10:	00002b4d 	.word	0x00002b4d
   18f14:	49424f4d 	.word	0x49424f4d
   18f18:	4e20454c 	.word	0x4e20454c
   18f1c:	00003a4f 	.word	0x00003a4f
   18f20:	0000000a 	.word	0x0000000a
   18f24:	45444441 	.word	0x45444441
   18f28:	55532044 	.word	0x55532044
   18f2c:	53454343 	.word	0x53454343
   18f30:	4c554653 	.word	0x4c554653
   18f34:	0000594c 	.word	0x0000594c
   18f38:	00002d4d 	.word	0x00002d4d
   18f3c:	4f4d4552 	.word	0x4f4d4552
   18f40:	20444556 	.word	0x20444556
   18f44:	43435553 	.word	0x43435553
   18f48:	46535345 	.word	0x46535345
   18f4c:	594c4c55 	.word	0x594c4c55
   18f50:	00000000 	.word	0x00000000
   18f54:	002b4d41 	.word	0x002b4d41
   18f58:	45544c41 	.word	0x45544c41
   18f5c:	54414e52 	.word	0x54414e52
   18f60:	4f4d2045 	.word	0x4f4d2045
   18f64:	454c4942 	.word	0x454c4942
   18f68:	204f4e20 	.word	0x204f4e20
   18f6c:	20444441 	.word	0x20444441
   18f70:	43435553 	.word	0x43435553
   18f74:	00535345 	.word	0x00535345
   18f78:	002b4d4d 	.word	0x002b4d4d
   18f7c:	204d324d 	.word	0x204d324d
   18f80:	202e4f4e 	.word	0x202e4f4e
   18f84:	45444441 	.word	0x45444441
   18f88:	00000044 	.word	0x00000044
   18f8c:	002b524d 	.word	0x002b524d
   18f90:	204d324d 	.word	0x204d324d
   18f94:	4f4d4552 	.word	0x4f4d4552
   18f98:	4e204554 	.word	0x4e204554
   18f9c:	41202e4f 	.word	0x41202e4f
   18fa0:	44454444 	.word	0x44454444
   18fa4:	00000000 	.word	0x00000000
   18fa8:	4f525245 	.word	0x4f525245
   18fac:	203a2052 	.word	0x203a2052
   18fb0:	00007325 	.word	0x00007325
   18fb4:	00004e4f 	.word	0x00004e4f
   18fb8:	48502032 	.word	0x48502032
   18fbc:	00455341 	.word	0x00455341
   18fc0:	00004b4f 	.word	0x00004b4f
   18fc4:	4f525245 	.word	0x4f525245
   18fc8:	00000052 	.word	0x00000052
   18fcc:	203a5952 	.word	0x203a5952
   18fd0:	59206425 	.word	0x59206425
   18fd4:	25203a42 	.word	0x25203a42
   18fd8:	52422064 	.word	0x52422064
   18fdc:	6425203a 	.word	0x6425203a
   18fe0:	3a43410a 	.word	0x3a43410a
   18fe4:	0a732520 	.word	0x0a732520
   18fe8:	75716553 	.word	0x75716553
   18fec:	65636e65 	.word	0x65636e65
   18ff0:	7325203a 	.word	0x7325203a
   18ff4:	746f4d0a 	.word	0x746f4d0a
   18ff8:	203a726f 	.word	0x203a726f
   18ffc:	430a7325 	.word	0x430a7325
   19000:	65727275 	.word	0x65727275
   19004:	203a746e 	.word	0x203a746e
   19008:	0a416425 	.word	0x0a416425
   1900c:	7774654e 	.word	0x7774654e
   19010:	3a6b726f 	.word	0x3a6b726f
   19014:	00642520 	.word	0x00642520
   19018:	304d4d56 	.word	0x304d4d56
   1901c:	00000031 	.word	0x00000031
   19020:	4f544f4d 	.word	0x4f544f4d
   19024:	00002052 	.word	0x00002052
   19028:	0046464f 	.word	0x0046464f
   1902c:	494d4441 	.word	0x494d4441
   19030:	0000004e 	.word	0x0000004e
   19034:	00000023 	.word	0x00000023
   19038:	30524d56 	.word	0x30524d56
   1903c:	00000032 	.word	0x00000032
   19040:	204d324d 	.word	0x204d324d
   19044:	4e525554 	.word	0x4e525554
   19048:	4f204445 	.word	0x4f204445
   1904c:	0000004e 	.word	0x0000004e
   19050:	0000203a 	.word	0x0000203a
   19054:	00006ad8 	.word	0x00006ad8
   19058:	00006bbe 	.word	0x00006bbe
   1905c:	00006bbe 	.word	0x00006bbe
   19060:	00006ad8 	.word	0x00006ad8
   19064:	00006bbe 	.word	0x00006bbe
   19068:	00006bbe 	.word	0x00006bbe
   1906c:	00006bbe 	.word	0x00006bbe
   19070:	00006bbe 	.word	0x00006bbe
   19074:	00006bbe 	.word	0x00006bbe
   19078:	00006bbe 	.word	0x00006bbe
   1907c:	00006bbe 	.word	0x00006bbe
   19080:	00006bbe 	.word	0x00006bbe
   19084:	00006ad8 	.word	0x00006ad8
   19088:	00006bbe 	.word	0x00006bbe
   1908c:	00006bbe 	.word	0x00006bbe
   19090:	00006bbe 	.word	0x00006bbe
   19094:	00006a9a 	.word	0x00006a9a
   19098:	00006bbe 	.word	0x00006bbe
   1909c:	00006ad8 	.word	0x00006ad8
   190a0:	49524b20 	.word	0x49524b20
   190a4:	414e4853 	.word	0x414e4853
   190a8:	4d532020 	.word	0x4d532020
   190ac:	20545241 	.word	0x20545241
   190b0:	00000000 	.word	0x00000000
   190b4:	54202020 	.word	0x54202020
   190b8:	4e484345 	.word	0x4e484345
   190bc:	474f4c4f 	.word	0x474f4c4f
   190c0:	20202059 	.word	0x20202059
   190c4:	00000000 	.word	0x00000000
   190c8:	4f532020 	.word	0x4f532020
   190cc:	41575446 	.word	0x41575446
   190d0:	56204552 	.word	0x56204552
   190d4:	20205245 	.word	0x20205245
   190d8:	00000000 	.word	0x00000000
   190dc:	31422020 	.word	0x31422020
   190e0:	33302d36 	.word	0x33302d36
   190e4:	2d34302d 	.word	0x2d34302d
   190e8:	20203931 	.word	0x20203931
   190ec:	00000000 	.word	0x00000000
   190f0:	00007325 	.word	0x00007325
   190f4:	20595256 	.word	0x20595256
   190f8:	59562020 	.word	0x59562020
   190fc:	20202042 	.word	0x20202042
   19100:	20524256 	.word	0x20524256
   19104:	00000000 	.word	0x00000000
   19108:	6c333025 	.word	0x6c333025
   1910c:	20202075 	.word	0x20202075
   19110:	00000000 	.word	0x00000000
   19114:	6c333025 	.word	0x6c333025
   19118:	00002075 	.word	0x00002075
   1911c:	4f544f4d 	.word	0x4f544f4d
   19120:	20203a52 	.word	0x20203a52
   19124:	2046464f 	.word	0x2046464f
   19128:	20202020 	.word	0x20202020
   1912c:	00000000 	.word	0x00000000
   19130:	20202020 	.word	0x20202020
   19134:	20202020 	.word	0x20202020
   19138:	20202020 	.word	0x20202020
   1913c:	20202020 	.word	0x20202020
   19140:	00000000 	.word	0x00000000
   19144:	4f544f4d 	.word	0x4f544f4d
   19148:	55432052 	.word	0x55432052
   1914c:	4e455252 	.word	0x4e455252
   19150:	20203a54 	.word	0x20203a54
   19154:	00000000 	.word	0x00000000
   19158:	6c333025 	.word	0x6c333025
   1915c:	30252e75 	.word	0x30252e75
   19160:	20756c32 	.word	0x20756c32
   19164:	20202020 	.word	0x20202020
   19168:	20202020 	.word	0x20202020
   1916c:	00202020 	.word	0x00202020
   19170:	48502033 	.word	0x48502033
   19174:	20455341 	.word	0x20455341
   19178:	3a514553 	.word	0x3a514553
   1917c:	00000000 	.word	0x00000000
   19180:	204b4f20 	.word	0x204b4f20
   19184:	00000000 	.word	0x00000000
   19188:	52524520 	.word	0x52524520
   1918c:	00000000 	.word	0x00000000
   19190:	53414850 	.word	0x53414850
   19194:	54532045 	.word	0x54532045
   19198:	3a455441 	.word	0x3a455441
   1919c:	00000000 	.word	0x00000000
   191a0:	48503320 	.word	0x48503320
   191a4:	00000020 	.word	0x00000020
   191a8:	48503220 	.word	0x48503220
   191ac:	00000020 	.word	0x00000020
   191b0:	46464f20 	.word	0x46464f20
   191b4:	00000000 	.word	0x00000000
   191b8:	454c2d4f 	.word	0x454c2d4f
   191bc:	204c4556 	.word	0x204c4556
   191c0:	0000203a 	.word	0x0000203a
   191c4:	48474948 	.word	0x48474948
   191c8:	00002020 	.word	0x00002020
   191cc:	2044494d 	.word	0x2044494d
   191d0:	00002020 	.word	0x00002020
   191d4:	20574f4c 	.word	0x20574f4c
   191d8:	00002020 	.word	0x00002020
   191dc:	454c2d55 	.word	0x454c2d55
   191e0:	204c4556 	.word	0x204c4556
   191e4:	0000203a 	.word	0x0000203a
   191e8:	43545243 	.word	0x43545243
   191ec:	0000204c 	.word	0x0000204c
   191f0:	74746142 	.word	0x74746142
   191f4:	50797265 	.word	0x50797265
   191f8:	203a7265 	.word	0x203a7265
   191fc:	25257525 	.word	0x25257525
   19200:	00000020 	.word	0x00000020
   19204:	4e474953 	.word	0x4e474953
   19208:	3a204c41 	.word	0x3a204c41
   1920c:	00000020 	.word	0x00000020
   19210:	20202020 	.word	0x20202020
   19214:	00202020 	.word	0x00202020
   19218:	4f434e49 	.word	0x4f434e49
   1921c:	474e494d 	.word	0x474e494d
   19220:	4c414320 	.word	0x4c414320
   19224:	202e2e4c 	.word	0x202e2e4c
   19228:	00000000 	.word	0x00000000
   1922c:	36312d25 	.word	0x36312d25
   19230:	00000073 	.word	0x00000073
   19234:	43204e49 	.word	0x43204e49
   19238:	2e4c4c41 	.word	0x2e4c4c41
   1923c:	20202e2e 	.word	0x20202e2e
   19240:	20202020 	.word	0x20202020
   19244:	00000000 	.word	0x00000000
   19248:	4c414944 	.word	0x4c414944
   1924c:	2e474e49 	.word	0x2e474e49
   19250:	20202e2e 	.word	0x20202e2e
   19254:	20202020 	.word	0x20202020
   19258:	00000000 	.word	0x00000000
   1925c:	4f434e49 	.word	0x4f434e49
   19260:	474e494d 	.word	0x474e494d
   19264:	534d5320 	.word	0x534d5320
   19268:	202e2e2e 	.word	0x202e2e2e
   1926c:	00000000 	.word	0x00000000
   19270:	4754554f 	.word	0x4754554f
   19274:	474e494f 	.word	0x474e494f
   19278:	534d5320 	.word	0x534d5320
   1927c:	202e2e2e 	.word	0x202e2e2e
	...
   19288:	1f1f0000 	.word	0x1f1f0000
   1928c:	00000000 	.word	0x00000000
   19290:	1f1f1f00 	.word	0x1f1f1f00
   19294:	00000000 	.word	0x00000000
   19298:	1f1f1f1f 	.word	0x1f1f1f1f
   1929c:	1f1f0000 	.word	0x1f1f0000
   192a0:	1f1f1f1f 	.word	0x1f1f1f1f
   192a4:	1f1f1f1f 	.word	0x1f1f1f1f
   192a8:	1f1f1f1f 	.word	0x1f1f1f1f
   192ac:	00007e20 	.word	0x00007e20
   192b0:	00007a34 	.word	0x00007a34
   192b4:	00007a78 	.word	0x00007a78
   192b8:	00007ade 	.word	0x00007ade
   192bc:	00007b4c 	.word	0x00007b4c
   192c0:	00007bf0 	.word	0x00007bf0
   192c4:	00007d54 	.word	0x00007d54
   192c8:	00007e1e 	.word	0x00007e1e
   192cc:	00007d6e 	.word	0x00007d6e
   192d0:	00007d8c 	.word	0x00007d8c
   192d4:	00007daa 	.word	0x00007daa
   192d8:	00007dc8 	.word	0x00007dc8
   192dc:	00007df0 	.word	0x00007df0
   192e0:	756c2530 	.word	0x756c2530
   192e4:	756c2530 	.word	0x756c2530
   192e8:	756c2530 	.word	0x756c2530
   192ec:	00000000 	.word	0x00000000
   192f0:	00000002 	.word	0x00000002
   192f4:	00000003 	.word	0x00000003
   192f8:	00000028 	.word	0x00000028
   192fc:	00000029 	.word	0x00000029
   19300:	00000004 	.word	0x00000004
   19304:	00000005 	.word	0x00000005
   19308:	00000006 	.word	0x00000006
   1930c:	00000007 	.word	0x00000007
   19310:	00000020 	.word	0x00000020
   19314:	00000021 	.word	0x00000021
   19318:	00000022 	.word	0x00000022
   1931c:	00000023 	.word	0x00000023
   19320:	00000024 	.word	0x00000024
   19324:	00000025 	.word	0x00000025
   19328:	00000026 	.word	0x00000026
   1932c:	00000027 	.word	0x00000027
   19330:	00000008 	.word	0x00000008
   19334:	00000009 	.word	0x00000009
   19338:	0000000a 	.word	0x0000000a
   1933c:	0000000b 	.word	0x0000000b
   19340:	0000c062 	.word	0x0000c062
   19344:	0000c068 	.word	0x0000c068
   19348:	0000c068 	.word	0x0000c068
   1934c:	0000c068 	.word	0x0000c068
   19350:	0000c068 	.word	0x0000c068
   19354:	0000c068 	.word	0x0000c068
   19358:	0000c068 	.word	0x0000c068
   1935c:	0000c068 	.word	0x0000c068
   19360:	0000c068 	.word	0x0000c068
   19364:	0000c068 	.word	0x0000c068
   19368:	0000c068 	.word	0x0000c068
   1936c:	0000c068 	.word	0x0000c068
   19370:	0000c068 	.word	0x0000c068
   19374:	0000c068 	.word	0x0000c068
   19378:	0000c068 	.word	0x0000c068
   1937c:	0000c068 	.word	0x0000c068
   19380:	0000c040 	.word	0x0000c040
   19384:	0000c068 	.word	0x0000c068
   19388:	0000c068 	.word	0x0000c068
   1938c:	0000c068 	.word	0x0000c068
   19390:	0000c068 	.word	0x0000c068
   19394:	0000c068 	.word	0x0000c068
   19398:	0000c068 	.word	0x0000c068
   1939c:	0000c068 	.word	0x0000c068
   193a0:	0000c068 	.word	0x0000c068
   193a4:	0000c068 	.word	0x0000c068
   193a8:	0000c068 	.word	0x0000c068
   193ac:	0000c068 	.word	0x0000c068
   193b0:	0000c068 	.word	0x0000c068
   193b4:	0000c068 	.word	0x0000c068
   193b8:	0000c068 	.word	0x0000c068
   193bc:	0000c068 	.word	0x0000c068
   193c0:	0000c05c 	.word	0x0000c05c
   193c4:	0000c068 	.word	0x0000c068
   193c8:	0000c068 	.word	0x0000c068
   193cc:	0000c068 	.word	0x0000c068
   193d0:	0000c068 	.word	0x0000c068
   193d4:	0000c068 	.word	0x0000c068
   193d8:	0000c068 	.word	0x0000c068
   193dc:	0000c068 	.word	0x0000c068
   193e0:	0000c068 	.word	0x0000c068
   193e4:	0000c068 	.word	0x0000c068
   193e8:	0000c068 	.word	0x0000c068
   193ec:	0000c068 	.word	0x0000c068
   193f0:	0000c068 	.word	0x0000c068
   193f4:	0000c068 	.word	0x0000c068
   193f8:	0000c068 	.word	0x0000c068
   193fc:	0000c068 	.word	0x0000c068
   19400:	0000c056 	.word	0x0000c056
   19404:	0000bffe 	.word	0x0000bffe
   19408:	0000c014 	.word	0x0000c014
   1940c:	0000c02a 	.word	0x0000c02a
   19410:	0000bfe4 	.word	0x0000bfe4
   19414:	42000800 	.word	0x42000800
   19418:	42000c00 	.word	0x42000c00
   1941c:	42001000 	.word	0x42001000
   19420:	42001400 	.word	0x42001400
   19424:	42001800 	.word	0x42001800
   19428:	42001c00 	.word	0x42001c00
   1942c:	454c4449 	.word	0x454c4449
   19430:	00000000 	.word	0x00000000
   19434:	20726d54 	.word	0x20726d54
   19438:	00637653 	.word	0x00637653
   1943c:	0000fd88 	.word	0x0000fd88
   19440:	0000fd88 	.word	0x0000fd88
   19444:	0000fd88 	.word	0x0000fd88
   19448:	0000fe16 	.word	0x0000fe16
   1944c:	0000fde0 	.word	0x0000fde0
   19450:	0000fe0a 	.word	0x0000fe0a
   19454:	0000fd88 	.word	0x0000fd88
   19458:	0000fd88 	.word	0x0000fd88
   1945c:	0000fe16 	.word	0x0000fe16
   19460:	0000fde0 	.word	0x0000fde0

00019464 <_tcc_intflag>:
   19464:	00000001 00000002 00000004 00000008     ................
   19474:	00001000 00002000 00004000 00008000     ..... ...@......
   19484:	00010000 00020000 00040000 00080000     ................
   19494:	0c0b0a09 00000e0d 00011694 00011694     ................
   194a4:	00011688 00011694 00011688 00011662     ............b...
   194b4:	00011662 00011694 00011694 00011694     b...............
   194c4:	00011694 00011694 00011694 00011694     ................
   194d4:	00011694 00011694 00011694 00011694     ................
   194e4:	00011694 00011694 00011694 00011694     ................
   194f4:	00011694 00011694 00011694 00011694     ................
   19504:	00011694 00011694 00011694 00011694     ................
   19514:	00011694 00011694 00011694 00011694     ................
   19524:	00011694 00011694 00011694 00011694     ................
   19534:	00011694 00011694 00011694 00011694     ................
   19544:	00011694 00011694 00011694 00011694     ................
   19554:	00011694 00011694 00011694 00011694     ................
   19564:	00011694 00011694 00011694 00011694     ................
   19574:	00011694 00011694 00011694 00011694     ................
   19584:	00011694 00011694 00011694 00011694     ................
   19594:	00011694 00011694 00011688 00011688     ................
   195a4:	0001169e 0001169e 0001169e 0001169e     ................
   195b4:	41744545 50524f4d 456d752e 00012a0e     EEtAMORP.umE.*..
   195c4:	00012a88 00012a88 00012a2c 00012a26     .*...*..,*..&*..
   195d4:	00012a32 00012a14 00012a38 00012a6e     2*...*..8*..n*..
   195e4:	00012d54 00012da4 00012da4 00012da0     T-...-...-...-..
   195f4:	00012d46 00012d66 00012d36 00012d78     F-..f-..6-..x-..
   19604:	00012d8a 00012df2 00012e20 00012e20     .-...-.. ... ...
   19614:	00012e1c 00012dec 00012df8 00012de6     .....-...-...-..
   19624:	00012dfe 00012e04 00776f70 74727173     .-......pow.sqrt
   19634:	00000000                                ....

00019638 <TWO52>:
   19638:	00000000 43300000 00000000 c3300000     ......0C......0.
   19648:	00015784 00015754 00015766 000156a8     .W..TW..fW...V..
   19658:	00015766 0001574a 00015766 000156a8     fW..JW..fW...V..
   19668:	00015754 00015754 0001574a 000156a8     TW..TW..JW...V..
   19678:	000156b0 000156b0 000156b0 0001576c     .V...V...V..lW..
   19688:	00015754 00015754 00015728 0001580c     TW..TW..(W...X..
   19698:	00015728 0001574a 00015728 0001580c     (W..JW..(W...X..
   196a8:	00015754 00015754 0001574a 0001580c     TW..TW..JW...X..
   196b8:	000156b0 000156b0 000156b0 00015816     .V...V...V...X..
   196c8:	000159b4 00015904 00015904 00015902     .Y...Y...Y...Y..
   196d8:	000159a6 000159a6 0001599c 00015902     .Y...Y...Y...Y..
   196e8:	000159a6 0001599c 000159a6 00015902     .Y...Y...Y...Y..
   196f8:	000159ac 000159ac 000159ac 00015a3c     .Y...Y...Y..<Z..
   19708:	0001636c 0001634e 00016308 00016226     lc..Nc...c..&b..
   19718:	00016308 00016340 00016308 00016226     .c..@c...c..&b..
   19728:	0001634e 0001634e 00016340 00016226     Nc..Nc..@c..&b..
   19738:	0001621e 0001621e 0001621e 00016584     .b...b...b...e..
   19748:	00016bcc 00016a8c 00016a8c 00016a88     .k...j...j...j..
   19758:	00016ba4 00016ba4 00016b96 00016a88     .k...k...k...j..
   19768:	00016ba4 00016b96 00016ba4 00016a88     .k...k...k...j..
   19778:	00016bac 00016bac 00016bac 00016db0     .k...k...k...m..
   19788:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   19798:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   197a8:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

000197b7 <_ctype_>:
   197b7:	20202000 20202020 28282020 20282828     .         ((((( 
   197c7:	20202020 20202020 20202020 20202020                     
   197d7:	10108820 10101010 10101010 10101010      ...............
   197e7:	04040410 04040404 10040404 10101010     ................
   197f7:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19807:	01010101 01010101 01010101 10101010     ................
   19817:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19827:	02020202 02020202 02020202 10101010     ................
   19837:	00000020 00000000 00000000 00000000      ...............
	...
   198b7:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   198c7:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   198d7:	30004645 34333231 38373635 63626139     EF.0123456789abc
   198e7:	00666564 c0b5f800                                def..

000198ec <_init>:
   198ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198ee:	46c0      	nop			; (mov r8, r8)
   198f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   198f2:	bc08      	pop	{r3}
   198f4:	469e      	mov	lr, r3
   198f6:	4770      	bx	lr

000198f8 <__init_array_start>:
   198f8:	000000dd 	.word	0x000000dd

000198fc <_fini>:
   198fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198fe:	46c0      	nop			; (mov r8, r8)
   19900:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19902:	bc08      	pop	{r3}
   19904:	469e      	mov	lr, r3
   19906:	4770      	bx	lr

00019908 <__fini_array_start>:
   19908:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	7e4d 0001 785d 0001 0000 0000 97b7 0001     M~..]x..........
20000180:	9790 0001 98bd 0001 98bd 0001 98bd 0001     ................
20000190:	98bd 0001 98bd 0001 98bd 0001 98bd 0001     ................
200001a0:	98bd 0001 98bd 0001 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
