
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019dd4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019dd4  00019dd4  00029dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  00019ddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000073c  20000200  00019fe0  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000093c  0001a71c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007ebca  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008a92  00000000  00000000  000aee47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a7f9  00000000  00000000  000b78d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d28  00000000  00000000  000c20d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b30  00000000  00000000  000c3dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028773  00000000  00000000  000c592a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027876  00000000  00000000  000ee09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a235d  00000000  00000000  00115913  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007264  00000000  00000000  001b7c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 29 00 20 31 3d 01 00 29 3e 01 00 29 3e 01 00     @). 1=..)>..)>..
	...
      2c:	d5 dd 00 00 00 00 00 00 00 00 00 00 01 df 00 00     ................
      3c:	49 df 00 00 29 3e 01 00 29 3e 01 00 89 04 01 00     I...)>..)>......
      4c:	51 d7 00 00 b1 14 01 00 29 3e 01 00 e9 cc 00 00     Q.......)>......
      5c:	29 3e 01 00 1d 15 01 00 a9 12 01 00 c1 12 01 00     )>..............
      6c:	d9 12 01 00 f1 12 01 00 09 13 01 00 21 13 01 00     ............!...
      7c:	ad 04 01 00 c1 04 01 00 d5 04 01 00 65 05 01 00     ............e...
      8c:	79 05 01 00 8d 05 01 00 a1 05 01 00 b5 05 01 00     y...............
      9c:	71 cb 00 00 75 18 01 00 ad cc 00 00 29 3e 01 00     q...u.......)>..
      ac:	29 3e 01 00 00 00 00 00                             )>......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
      d8:	00019ddc 	.word	0x00019ddc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
     108:	00019ddc 	.word	0x00019ddc
     10c:	00019ddc 	.word	0x00019ddc
     110:	00000000 	.word	0x00000000

00000114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
     114:	b590      	push	{r4, r7, lr}
     116:	b083      	sub	sp, #12
     118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
     11a:	1dfc      	adds	r4, r7, #7
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <configure_eeprom+0x34>)
     11e:	4798      	blx	r3
     120:	0003      	movs	r3, r0
     122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
     124:	1dfb      	adds	r3, r7, #7
     126:	781b      	ldrb	r3, [r3, #0]
     128:	2b16      	cmp	r3, #22
     12a:	d100      	bne.n	12e <configure_eeprom+0x1a>
	{
		while (true);
     12c:	e7fe      	b.n	12c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
     12e:	1dfb      	adds	r3, r7, #7
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d003      	beq.n	13e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <configure_eeprom+0x38>)
     138:	4798      	blx	r3
		eeprom_emulator_init();
     13a:	4b03      	ldr	r3, [pc, #12]	; (148 <configure_eeprom+0x34>)
     13c:	4798      	blx	r3
	}
}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	b003      	add	sp, #12
     144:	bd90      	pop	{r4, r7, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	000128ed 	.word	0x000128ed
     14c:	000129d5 	.word	0x000129d5

00000150 <init_eeprom>:

void init_eeprom(void)
{
     150:	b580      	push	{r7, lr}
     152:	af00      	add	r7, sp, #0
	configure_eeprom();
     154:	4bf6      	ldr	r3, [pc, #984]	; (530 <init_eeprom+0x3e0>)
     156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     158:	4bf6      	ldr	r3, [pc, #984]	; (534 <init_eeprom+0x3e4>)
     15a:	0019      	movs	r1, r3
     15c:	2000      	movs	r0, #0
     15e:	4bf6      	ldr	r3, [pc, #984]	; (538 <init_eeprom+0x3e8>)
     160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
     162:	49f4      	ldr	r1, [pc, #976]	; (534 <init_eeprom+0x3e4>)
     164:	4bf5      	ldr	r3, [pc, #980]	; (53c <init_eeprom+0x3ec>)
     166:	2218      	movs	r2, #24
     168:	0018      	movs	r0, r3
     16a:	4bf5      	ldr	r3, [pc, #980]	; (540 <init_eeprom+0x3f0>)
     16c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
     16e:	4bf3      	ldr	r3, [pc, #972]	; (53c <init_eeprom+0x3ec>)
     170:	791b      	ldrb	r3, [r3, #4]
     172:	2b55      	cmp	r3, #85	; 0x55
     174:	d029      	beq.n	1ca <init_eeprom+0x7a>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
     176:	4bf1      	ldr	r3, [pc, #964]	; (53c <init_eeprom+0x3ec>)
     178:	2200      	movs	r2, #0
     17a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
     17c:	4bef      	ldr	r3, [pc, #956]	; (53c <init_eeprom+0x3ec>)
     17e:	2255      	movs	r2, #85	; 0x55
     180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
     182:	4bee      	ldr	r3, [pc, #952]	; (53c <init_eeprom+0x3ec>)
     184:	2200      	movs	r2, #0
     186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
     188:	4bec      	ldr	r3, [pc, #944]	; (53c <init_eeprom+0x3ec>)
     18a:	2200      	movs	r2, #0
     18c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
     18e:	4beb      	ldr	r3, [pc, #940]	; (53c <init_eeprom+0x3ec>)
     190:	2200      	movs	r2, #0
     192:	71da      	strb	r2, [r3, #7]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
     194:	4beb      	ldr	r3, [pc, #940]	; (544 <init_eeprom+0x3f4>)
     196:	2210      	movs	r2, #16
     198:	2100      	movs	r1, #0
     19a:	0018      	movs	r0, r3
     19c:	4bea      	ldr	r3, [pc, #936]	; (548 <init_eeprom+0x3f8>)
     19e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
     1a0:	4be8      	ldr	r3, [pc, #928]	; (544 <init_eeprom+0x3f4>)
     1a2:	4aea      	ldr	r2, [pc, #936]	; (54c <init_eeprom+0x3fc>)
     1a4:	ca03      	ldmia	r2!, {r0, r1}
     1a6:	c303      	stmia	r3!, {r0, r1}
     1a8:	8811      	ldrh	r1, [r2, #0]
     1aa:	8019      	strh	r1, [r3, #0]
     1ac:	7892      	ldrb	r2, [r2, #2]
     1ae:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
     1b0:	49e2      	ldr	r1, [pc, #904]	; (53c <init_eeprom+0x3ec>)
     1b2:	4be0      	ldr	r3, [pc, #896]	; (534 <init_eeprom+0x3e4>)
     1b4:	2218      	movs	r2, #24
     1b6:	0018      	movs	r0, r3
     1b8:	4be1      	ldr	r3, [pc, #900]	; (540 <init_eeprom+0x3f0>)
     1ba:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     1bc:	4bdd      	ldr	r3, [pc, #884]	; (534 <init_eeprom+0x3e4>)
     1be:	0019      	movs	r1, r3
     1c0:	2000      	movs	r0, #0
     1c2:	4be3      	ldr	r3, [pc, #908]	; (550 <init_eeprom+0x400>)
     1c4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     1c6:	4be3      	ldr	r3, [pc, #908]	; (554 <init_eeprom+0x404>)
     1c8:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
     1ca:	4bda      	ldr	r3, [pc, #872]	; (534 <init_eeprom+0x3e4>)
     1cc:	0019      	movs	r1, r3
     1ce:	2001      	movs	r0, #1
     1d0:	4bd9      	ldr	r3, [pc, #868]	; (538 <init_eeprom+0x3e8>)
     1d2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
     1d4:	49d7      	ldr	r1, [pc, #860]	; (534 <init_eeprom+0x3e4>)
     1d6:	4be0      	ldr	r3, [pc, #896]	; (558 <init_eeprom+0x408>)
     1d8:	2238      	movs	r2, #56	; 0x38
     1da:	0018      	movs	r0, r3
     1dc:	4bd8      	ldr	r3, [pc, #864]	; (540 <init_eeprom+0x3f0>)
     1de:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
     1e0:	4bdd      	ldr	r3, [pc, #884]	; (558 <init_eeprom+0x408>)
     1e2:	791b      	ldrb	r3, [r3, #4]
     1e4:	2b55      	cmp	r3, #85	; 0x55
     1e6:	d02e      	beq.n	246 <init_eeprom+0xf6>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
     1e8:	4bdb      	ldr	r3, [pc, #876]	; (558 <init_eeprom+0x408>)
     1ea:	2200      	movs	r2, #0
     1ec:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
     1ee:	4bda      	ldr	r3, [pc, #872]	; (558 <init_eeprom+0x408>)
     1f0:	2255      	movs	r2, #85	; 0x55
     1f2:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
     1f4:	4bd9      	ldr	r3, [pc, #868]	; (55c <init_eeprom+0x40c>)
     1f6:	221e      	movs	r2, #30
     1f8:	2100      	movs	r1, #0
     1fa:	0018      	movs	r0, r3
     1fc:	4bd2      	ldr	r3, [pc, #840]	; (548 <init_eeprom+0x3f8>)
     1fe:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
     200:	4ad6      	ldr	r2, [pc, #856]	; (55c <init_eeprom+0x40c>)
     202:	4bd7      	ldr	r3, [pc, #860]	; (560 <init_eeprom+0x410>)
     204:	0010      	movs	r0, r2
     206:	0019      	movs	r1, r3
     208:	2310      	movs	r3, #16
     20a:	001a      	movs	r2, r3
     20c:	4bcc      	ldr	r3, [pc, #816]	; (540 <init_eeprom+0x3f0>)
     20e:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
     210:	4bd4      	ldr	r3, [pc, #848]	; (564 <init_eeprom+0x414>)
     212:	2214      	movs	r2, #20
     214:	2100      	movs	r1, #0
     216:	0018      	movs	r0, r3
     218:	4bcb      	ldr	r3, [pc, #812]	; (548 <init_eeprom+0x3f8>)
     21a:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
     21c:	4ad1      	ldr	r2, [pc, #836]	; (564 <init_eeprom+0x414>)
     21e:	4bd2      	ldr	r3, [pc, #840]	; (568 <init_eeprom+0x418>)
     220:	0010      	movs	r0, r2
     222:	0019      	movs	r1, r3
     224:	230b      	movs	r3, #11
     226:	001a      	movs	r2, r3
     228:	4bc5      	ldr	r3, [pc, #788]	; (540 <init_eeprom+0x3f0>)
     22a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
     22c:	49ca      	ldr	r1, [pc, #808]	; (558 <init_eeprom+0x408>)
     22e:	4bc1      	ldr	r3, [pc, #772]	; (534 <init_eeprom+0x3e4>)
     230:	2238      	movs	r2, #56	; 0x38
     232:	0018      	movs	r0, r3
     234:	4bc2      	ldr	r3, [pc, #776]	; (540 <init_eeprom+0x3f0>)
     236:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
     238:	4bbe      	ldr	r3, [pc, #760]	; (534 <init_eeprom+0x3e4>)
     23a:	0019      	movs	r1, r3
     23c:	2001      	movs	r0, #1
     23e:	4bc4      	ldr	r3, [pc, #784]	; (550 <init_eeprom+0x400>)
     240:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     242:	4bc4      	ldr	r3, [pc, #784]	; (554 <init_eeprom+0x404>)
     244:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
     246:	4bbb      	ldr	r3, [pc, #748]	; (534 <init_eeprom+0x3e4>)
     248:	0019      	movs	r1, r3
     24a:	2002      	movs	r0, #2
     24c:	4bba      	ldr	r3, [pc, #744]	; (538 <init_eeprom+0x3e8>)
     24e:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
     250:	49b8      	ldr	r1, [pc, #736]	; (534 <init_eeprom+0x3e4>)
     252:	4bc6      	ldr	r3, [pc, #792]	; (56c <init_eeprom+0x41c>)
     254:	2238      	movs	r2, #56	; 0x38
     256:	0018      	movs	r0, r3
     258:	4bb9      	ldr	r3, [pc, #740]	; (540 <init_eeprom+0x3f0>)
     25a:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
     25c:	4bc3      	ldr	r3, [pc, #780]	; (56c <init_eeprom+0x41c>)
     25e:	791b      	ldrb	r3, [r3, #4]
     260:	2b55      	cmp	r3, #85	; 0x55
     262:	d03c      	beq.n	2de <init_eeprom+0x18e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
     264:	4bc1      	ldr	r3, [pc, #772]	; (56c <init_eeprom+0x41c>)
     266:	2200      	movs	r2, #0
     268:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
     26a:	4bc0      	ldr	r3, [pc, #768]	; (56c <init_eeprom+0x41c>)
     26c:	2255      	movs	r2, #85	; 0x55
     26e:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
     270:	4bbf      	ldr	r3, [pc, #764]	; (570 <init_eeprom+0x420>)
     272:	2210      	movs	r2, #16
     274:	2100      	movs	r1, #0
     276:	0018      	movs	r0, r3
     278:	4bb3      	ldr	r3, [pc, #716]	; (548 <init_eeprom+0x3f8>)
     27a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
     27c:	4bbb      	ldr	r3, [pc, #748]	; (56c <init_eeprom+0x41c>)
     27e:	2205      	movs	r2, #5
     280:	49bc      	ldr	r1, [pc, #752]	; (574 <init_eeprom+0x424>)
     282:	189b      	adds	r3, r3, r2
     284:	2210      	movs	r2, #16
     286:	0018      	movs	r0, r3
     288:	4bad      	ldr	r3, [pc, #692]	; (540 <init_eeprom+0x3f0>)
     28a:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
     28c:	4bba      	ldr	r3, [pc, #744]	; (578 <init_eeprom+0x428>)
     28e:	2210      	movs	r2, #16
     290:	2100      	movs	r1, #0
     292:	0018      	movs	r0, r3
     294:	4bac      	ldr	r3, [pc, #688]	; (548 <init_eeprom+0x3f8>)
     296:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
     298:	4ab8      	ldr	r2, [pc, #736]	; (57c <init_eeprom+0x42c>)
     29a:	4bb9      	ldr	r3, [pc, #740]	; (580 <init_eeprom+0x430>)
     29c:	0010      	movs	r0, r2
     29e:	0019      	movs	r1, r3
     2a0:	230a      	movs	r3, #10
     2a2:	001a      	movs	r2, r3
     2a4:	4ba6      	ldr	r3, [pc, #664]	; (540 <init_eeprom+0x3f0>)
     2a6:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
     2a8:	4bb3      	ldr	r3, [pc, #716]	; (578 <init_eeprom+0x428>)
     2aa:	2210      	movs	r2, #16
     2ac:	2100      	movs	r1, #0
     2ae:	0018      	movs	r0, r3
     2b0:	4ba5      	ldr	r3, [pc, #660]	; (548 <init_eeprom+0x3f8>)
     2b2:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
     2b4:	4ab0      	ldr	r2, [pc, #704]	; (578 <init_eeprom+0x428>)
     2b6:	4bb3      	ldr	r3, [pc, #716]	; (584 <init_eeprom+0x434>)
     2b8:	0010      	movs	r0, r2
     2ba:	0019      	movs	r1, r3
     2bc:	230d      	movs	r3, #13
     2be:	001a      	movs	r2, r3
     2c0:	4b9f      	ldr	r3, [pc, #636]	; (540 <init_eeprom+0x3f0>)
     2c2:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
     2c4:	49a9      	ldr	r1, [pc, #676]	; (56c <init_eeprom+0x41c>)
     2c6:	4b9b      	ldr	r3, [pc, #620]	; (534 <init_eeprom+0x3e4>)
     2c8:	2238      	movs	r2, #56	; 0x38
     2ca:	0018      	movs	r0, r3
     2cc:	4b9c      	ldr	r3, [pc, #624]	; (540 <init_eeprom+0x3f0>)
     2ce:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
     2d0:	4b98      	ldr	r3, [pc, #608]	; (534 <init_eeprom+0x3e4>)
     2d2:	0019      	movs	r1, r3
     2d4:	2002      	movs	r0, #2
     2d6:	4b9e      	ldr	r3, [pc, #632]	; (550 <init_eeprom+0x400>)
     2d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     2da:	4b9e      	ldr	r3, [pc, #632]	; (554 <init_eeprom+0x404>)
     2dc:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
     2de:	4b95      	ldr	r3, [pc, #596]	; (534 <init_eeprom+0x3e4>)
     2e0:	0019      	movs	r1, r3
     2e2:	2008      	movs	r0, #8
     2e4:	4b94      	ldr	r3, [pc, #592]	; (538 <init_eeprom+0x3e8>)
     2e6:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
     2e8:	4aa7      	ldr	r2, [pc, #668]	; (588 <init_eeprom+0x438>)
     2ea:	4b92      	ldr	r3, [pc, #584]	; (534 <init_eeprom+0x3e4>)
     2ec:	0010      	movs	r0, r2
     2ee:	0019      	movs	r1, r3
     2f0:	2308      	movs	r3, #8
     2f2:	001a      	movs	r2, r3
     2f4:	4b92      	ldr	r3, [pc, #584]	; (540 <init_eeprom+0x3f0>)
     2f6:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
     2f8:	4ba3      	ldr	r3, [pc, #652]	; (588 <init_eeprom+0x438>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	2b55      	cmp	r3, #85	; 0x55
     2fe:	d01d      	beq.n	33c <init_eeprom+0x1ec>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
     300:	4ba1      	ldr	r3, [pc, #644]	; (588 <init_eeprom+0x438>)
     302:	2255      	movs	r2, #85	; 0x55
     304:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
     306:	4ba0      	ldr	r3, [pc, #640]	; (588 <init_eeprom+0x438>)
     308:	220f      	movs	r2, #15
     30a:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
     30c:	4b9e      	ldr	r3, [pc, #632]	; (588 <init_eeprom+0x438>)
     30e:	2200      	movs	r2, #0
     310:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
     312:	4b9d      	ldr	r3, [pc, #628]	; (588 <init_eeprom+0x438>)
     314:	2200      	movs	r2, #0
     316:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
     318:	4b9b      	ldr	r3, [pc, #620]	; (588 <init_eeprom+0x438>)
     31a:	2201      	movs	r2, #1
     31c:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     31e:	4a85      	ldr	r2, [pc, #532]	; (534 <init_eeprom+0x3e4>)
     320:	4b99      	ldr	r3, [pc, #612]	; (588 <init_eeprom+0x438>)
     322:	0010      	movs	r0, r2
     324:	0019      	movs	r1, r3
     326:	2308      	movs	r3, #8
     328:	001a      	movs	r2, r3
     32a:	4b85      	ldr	r3, [pc, #532]	; (540 <init_eeprom+0x3f0>)
     32c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     32e:	4b81      	ldr	r3, [pc, #516]	; (534 <init_eeprom+0x3e4>)
     330:	0019      	movs	r1, r3
     332:	2008      	movs	r0, #8
     334:	4b86      	ldr	r3, [pc, #536]	; (550 <init_eeprom+0x400>)
     336:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     338:	4b86      	ldr	r3, [pc, #536]	; (554 <init_eeprom+0x404>)
     33a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
     33c:	4b93      	ldr	r3, [pc, #588]	; (58c <init_eeprom+0x43c>)
     33e:	0019      	movs	r1, r3
     340:	2003      	movs	r0, #3
     342:	4b93      	ldr	r3, [pc, #588]	; (590 <init_eeprom+0x440>)
     344:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
     346:	4b93      	ldr	r3, [pc, #588]	; (594 <init_eeprom+0x444>)
     348:	0019      	movs	r1, r3
     34a:	2004      	movs	r0, #4
     34c:	4b90      	ldr	r3, [pc, #576]	; (590 <init_eeprom+0x440>)
     34e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
     350:	4b91      	ldr	r3, [pc, #580]	; (598 <init_eeprom+0x448>)
     352:	0019      	movs	r1, r3
     354:	2005      	movs	r0, #5
     356:	4b8e      	ldr	r3, [pc, #568]	; (590 <init_eeprom+0x440>)
     358:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
     35a:	4b90      	ldr	r3, [pc, #576]	; (59c <init_eeprom+0x44c>)
     35c:	0019      	movs	r1, r3
     35e:	2006      	movs	r0, #6
     360:	4b8b      	ldr	r3, [pc, #556]	; (590 <init_eeprom+0x440>)
     362:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
     364:	4b8e      	ldr	r3, [pc, #568]	; (5a0 <init_eeprom+0x450>)
     366:	0019      	movs	r1, r3
     368:	2007      	movs	r0, #7
     36a:	4b89      	ldr	r3, [pc, #548]	; (590 <init_eeprom+0x440>)
     36c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
     36e:	4b77      	ldr	r3, [pc, #476]	; (54c <init_eeprom+0x3fc>)
     370:	0019      	movs	r1, r3
     372:	2009      	movs	r0, #9
     374:	4b86      	ldr	r3, [pc, #536]	; (590 <init_eeprom+0x440>)
     376:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
     378:	4b74      	ldr	r3, [pc, #464]	; (54c <init_eeprom+0x3fc>)
     37a:	0019      	movs	r1, r3
     37c:	200a      	movs	r0, #10
     37e:	4b84      	ldr	r3, [pc, #528]	; (590 <init_eeprom+0x440>)
     380:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
     382:	4b72      	ldr	r3, [pc, #456]	; (54c <init_eeprom+0x3fc>)
     384:	0019      	movs	r1, r3
     386:	200b      	movs	r0, #11
     388:	4b81      	ldr	r3, [pc, #516]	; (590 <init_eeprom+0x440>)
     38a:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
     38c:	4b6f      	ldr	r3, [pc, #444]	; (54c <init_eeprom+0x3fc>)
     38e:	0019      	movs	r1, r3
     390:	200c      	movs	r0, #12
     392:	4b7f      	ldr	r3, [pc, #508]	; (590 <init_eeprom+0x440>)
     394:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
     396:	4b6d      	ldr	r3, [pc, #436]	; (54c <init_eeprom+0x3fc>)
     398:	0019      	movs	r1, r3
     39a:	200d      	movs	r0, #13
     39c:	4b7c      	ldr	r3, [pc, #496]	; (590 <init_eeprom+0x440>)
     39e:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
     3a0:	4b6a      	ldr	r3, [pc, #424]	; (54c <init_eeprom+0x3fc>)
     3a2:	0019      	movs	r1, r3
     3a4:	200e      	movs	r0, #14
     3a6:	4b7a      	ldr	r3, [pc, #488]	; (590 <init_eeprom+0x440>)
     3a8:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
     3aa:	4b68      	ldr	r3, [pc, #416]	; (54c <init_eeprom+0x3fc>)
     3ac:	0019      	movs	r1, r3
     3ae:	200f      	movs	r0, #15
     3b0:	4b77      	ldr	r3, [pc, #476]	; (590 <init_eeprom+0x440>)
     3b2:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
     3b4:	4b65      	ldr	r3, [pc, #404]	; (54c <init_eeprom+0x3fc>)
     3b6:	0019      	movs	r1, r3
     3b8:	2010      	movs	r0, #16
     3ba:	4b75      	ldr	r3, [pc, #468]	; (590 <init_eeprom+0x440>)
     3bc:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
     3be:	4b63      	ldr	r3, [pc, #396]	; (54c <init_eeprom+0x3fc>)
     3c0:	0019      	movs	r1, r3
     3c2:	2011      	movs	r0, #17
     3c4:	4b72      	ldr	r3, [pc, #456]	; (590 <init_eeprom+0x440>)
     3c6:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
     3c8:	4b60      	ldr	r3, [pc, #384]	; (54c <init_eeprom+0x3fc>)
     3ca:	0019      	movs	r1, r3
     3cc:	2012      	movs	r0, #18
     3ce:	4b70      	ldr	r3, [pc, #448]	; (590 <init_eeprom+0x440>)
     3d0:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
     3d2:	4b5e      	ldr	r3, [pc, #376]	; (54c <init_eeprom+0x3fc>)
     3d4:	0019      	movs	r1, r3
     3d6:	2013      	movs	r0, #19
     3d8:	4b6d      	ldr	r3, [pc, #436]	; (590 <init_eeprom+0x440>)
     3da:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
     3dc:	4b5b      	ldr	r3, [pc, #364]	; (54c <init_eeprom+0x3fc>)
     3de:	0019      	movs	r1, r3
     3e0:	2014      	movs	r0, #20
     3e2:	4b6b      	ldr	r3, [pc, #428]	; (590 <init_eeprom+0x440>)
     3e4:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
     3e6:	4b59      	ldr	r3, [pc, #356]	; (54c <init_eeprom+0x3fc>)
     3e8:	0019      	movs	r1, r3
     3ea:	2015      	movs	r0, #21
     3ec:	4b68      	ldr	r3, [pc, #416]	; (590 <init_eeprom+0x440>)
     3ee:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
     3f0:	4b56      	ldr	r3, [pc, #344]	; (54c <init_eeprom+0x3fc>)
     3f2:	0019      	movs	r1, r3
     3f4:	2016      	movs	r0, #22
     3f6:	4b66      	ldr	r3, [pc, #408]	; (590 <init_eeprom+0x440>)
     3f8:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
     3fa:	4b54      	ldr	r3, [pc, #336]	; (54c <init_eeprom+0x3fc>)
     3fc:	0019      	movs	r1, r3
     3fe:	2017      	movs	r0, #23
     400:	4b63      	ldr	r3, [pc, #396]	; (590 <init_eeprom+0x440>)
     402:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
     404:	4b4b      	ldr	r3, [pc, #300]	; (534 <init_eeprom+0x3e4>)
     406:	0019      	movs	r1, r3
     408:	2018      	movs	r0, #24
     40a:	4b4b      	ldr	r3, [pc, #300]	; (538 <init_eeprom+0x3e8>)
     40c:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
     40e:	4a65      	ldr	r2, [pc, #404]	; (5a4 <init_eeprom+0x454>)
     410:	4b48      	ldr	r3, [pc, #288]	; (534 <init_eeprom+0x3e4>)
     412:	0010      	movs	r0, r2
     414:	0019      	movs	r1, r3
     416:	2318      	movs	r3, #24
     418:	001a      	movs	r2, r3
     41a:	4b49      	ldr	r3, [pc, #292]	; (540 <init_eeprom+0x3f0>)
     41c:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
     41e:	4b61      	ldr	r3, [pc, #388]	; (5a4 <init_eeprom+0x454>)
     420:	781b      	ldrb	r3, [r3, #0]
     422:	2b55      	cmp	r3, #85	; 0x55
     424:	d025      	beq.n	472 <init_eeprom+0x322>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
     426:	4b5f      	ldr	r3, [pc, #380]	; (5a4 <init_eeprom+0x454>)
     428:	2255      	movs	r2, #85	; 0x55
     42a:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
     42c:	4b5d      	ldr	r3, [pc, #372]	; (5a4 <init_eeprom+0x454>)
     42e:	2200      	movs	r2, #0
     430:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
     432:	4b5c      	ldr	r3, [pc, #368]	; (5a4 <init_eeprom+0x454>)
     434:	2200      	movs	r2, #0
     436:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     438:	4b5b      	ldr	r3, [pc, #364]	; (5a8 <init_eeprom+0x458>)
     43a:	2214      	movs	r2, #20
     43c:	2100      	movs	r1, #0
     43e:	0018      	movs	r0, r3
     440:	4b41      	ldr	r3, [pc, #260]	; (548 <init_eeprom+0x3f8>)
     442:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
     444:	4a58      	ldr	r2, [pc, #352]	; (5a8 <init_eeprom+0x458>)
     446:	4b41      	ldr	r3, [pc, #260]	; (54c <init_eeprom+0x3fc>)
     448:	0010      	movs	r0, r2
     44a:	0019      	movs	r1, r3
     44c:	230b      	movs	r3, #11
     44e:	001a      	movs	r2, r3
     450:	4b3b      	ldr	r3, [pc, #236]	; (540 <init_eeprom+0x3f0>)
     452:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     454:	4a37      	ldr	r2, [pc, #220]	; (534 <init_eeprom+0x3e4>)
     456:	4b53      	ldr	r3, [pc, #332]	; (5a4 <init_eeprom+0x454>)
     458:	0010      	movs	r0, r2
     45a:	0019      	movs	r1, r3
     45c:	2318      	movs	r3, #24
     45e:	001a      	movs	r2, r3
     460:	4b37      	ldr	r3, [pc, #220]	; (540 <init_eeprom+0x3f0>)
     462:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     464:	4b33      	ldr	r3, [pc, #204]	; (534 <init_eeprom+0x3e4>)
     466:	0019      	movs	r1, r3
     468:	2018      	movs	r0, #24
     46a:	4b39      	ldr	r3, [pc, #228]	; (550 <init_eeprom+0x400>)
     46c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     46e:	4b39      	ldr	r3, [pc, #228]	; (554 <init_eeprom+0x404>)
     470:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
     472:	4b30      	ldr	r3, [pc, #192]	; (534 <init_eeprom+0x3e4>)
     474:	0019      	movs	r1, r3
     476:	2019      	movs	r0, #25
     478:	4b2f      	ldr	r3, [pc, #188]	; (538 <init_eeprom+0x3e8>)
     47a:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
     47c:	4a4b      	ldr	r2, [pc, #300]	; (5ac <init_eeprom+0x45c>)
     47e:	4b2d      	ldr	r3, [pc, #180]	; (534 <init_eeprom+0x3e4>)
     480:	0010      	movs	r0, r2
     482:	0019      	movs	r1, r3
     484:	2330      	movs	r3, #48	; 0x30
     486:	001a      	movs	r2, r3
     488:	4b2d      	ldr	r3, [pc, #180]	; (540 <init_eeprom+0x3f0>)
     48a:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
     48c:	4b47      	ldr	r3, [pc, #284]	; (5ac <init_eeprom+0x45c>)
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	2b55      	cmp	r3, #85	; 0x55
     492:	d03c      	beq.n	50e <init_eeprom+0x3be>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
     494:	4b45      	ldr	r3, [pc, #276]	; (5ac <init_eeprom+0x45c>)
     496:	2255      	movs	r2, #85	; 0x55
     498:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
     49a:	4b45      	ldr	r3, [pc, #276]	; (5b0 <init_eeprom+0x460>)
     49c:	2214      	movs	r2, #20
     49e:	2100      	movs	r1, #0
     4a0:	0018      	movs	r0, r3
     4a2:	4b29      	ldr	r3, [pc, #164]	; (548 <init_eeprom+0x3f8>)
     4a4:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
     4a6:	4a42      	ldr	r2, [pc, #264]	; (5b0 <init_eeprom+0x460>)
     4a8:	4b28      	ldr	r3, [pc, #160]	; (54c <init_eeprom+0x3fc>)
     4aa:	0010      	movs	r0, r2
     4ac:	0019      	movs	r1, r3
     4ae:	230b      	movs	r3, #11
     4b0:	001a      	movs	r2, r3
     4b2:	4b23      	ldr	r3, [pc, #140]	; (540 <init_eeprom+0x3f0>)
     4b4:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
     4b6:	4b3f      	ldr	r3, [pc, #252]	; (5b4 <init_eeprom+0x464>)
     4b8:	2214      	movs	r2, #20
     4ba:	2100      	movs	r1, #0
     4bc:	0018      	movs	r0, r3
     4be:	4b22      	ldr	r3, [pc, #136]	; (548 <init_eeprom+0x3f8>)
     4c0:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
     4c2:	4a3c      	ldr	r2, [pc, #240]	; (5b4 <init_eeprom+0x464>)
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <init_eeprom+0x3fc>)
     4c6:	0010      	movs	r0, r2
     4c8:	0019      	movs	r1, r3
     4ca:	230b      	movs	r3, #11
     4cc:	001a      	movs	r2, r3
     4ce:	4b1c      	ldr	r3, [pc, #112]	; (540 <init_eeprom+0x3f0>)
     4d0:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
     4d2:	4b36      	ldr	r3, [pc, #216]	; (5ac <init_eeprom+0x45c>)
     4d4:	2200      	movs	r2, #0
     4d6:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
     4d8:	4b34      	ldr	r3, [pc, #208]	; (5ac <init_eeprom+0x45c>)
     4da:	2200      	movs	r2, #0
     4dc:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
     4de:	4b33      	ldr	r3, [pc, #204]	; (5ac <init_eeprom+0x45c>)
     4e0:	2200      	movs	r2, #0
     4e2:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
     4e4:	4b31      	ldr	r3, [pc, #196]	; (5ac <init_eeprom+0x45c>)
     4e6:	2200      	movs	r2, #0
     4e8:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
     4ea:	4b30      	ldr	r3, [pc, #192]	; (5ac <init_eeprom+0x45c>)
     4ec:	2200      	movs	r2, #0
     4ee:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     4f0:	4a10      	ldr	r2, [pc, #64]	; (534 <init_eeprom+0x3e4>)
     4f2:	4b2e      	ldr	r3, [pc, #184]	; (5ac <init_eeprom+0x45c>)
     4f4:	0010      	movs	r0, r2
     4f6:	0019      	movs	r1, r3
     4f8:	2330      	movs	r3, #48	; 0x30
     4fa:	001a      	movs	r2, r3
     4fc:	4b10      	ldr	r3, [pc, #64]	; (540 <init_eeprom+0x3f0>)
     4fe:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     500:	4b0c      	ldr	r3, [pc, #48]	; (534 <init_eeprom+0x3e4>)
     502:	0019      	movs	r1, r3
     504:	2019      	movs	r0, #25
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <init_eeprom+0x400>)
     508:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     50a:	4b12      	ldr	r3, [pc, #72]	; (554 <init_eeprom+0x404>)
     50c:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     50e:	4b09      	ldr	r3, [pc, #36]	; (534 <init_eeprom+0x3e4>)
     510:	0019      	movs	r1, r3
     512:	201a      	movs	r0, #26
     514:	4b08      	ldr	r3, [pc, #32]	; (538 <init_eeprom+0x3e8>)
     516:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
     518:	4906      	ldr	r1, [pc, #24]	; (534 <init_eeprom+0x3e4>)
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <init_eeprom+0x468>)
     51c:	222c      	movs	r2, #44	; 0x2c
     51e:	0018      	movs	r0, r3
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <init_eeprom+0x3f0>)
     522:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     524:	4b24      	ldr	r3, [pc, #144]	; (5b8 <init_eeprom+0x468>)
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b55      	cmp	r3, #85	; 0x55
     52a:	d100      	bne.n	52e <init_eeprom+0x3de>
     52c:	e0a1      	b.n	672 <init_eeprom+0x522>
     52e:	e045      	b.n	5bc <init_eeprom+0x46c>
     530:	00000115 	.word	0x00000115
     534:	20000584 	.word	0x20000584
     538:	00012b05 	.word	0x00012b05
     53c:	200005f8 	.word	0x200005f8
     540:	00017d31 	.word	0x00017d31
     544:	20000600 	.word	0x20000600
     548:	00017d67 	.word	0x00017d67
     54c:	00018968 	.word	0x00018968
     550:	000129f9 	.word	0x000129f9
     554:	00012ba1 	.word	0x00012ba1
     558:	2000051c 	.word	0x2000051c
     55c:	20000521 	.word	0x20000521
     560:	00018974 	.word	0x00018974
     564:	2000053f 	.word	0x2000053f
     568:	00018984 	.word	0x00018984
     56c:	200005c0 	.word	0x200005c0
     570:	200005c5 	.word	0x200005c5
     574:	00018990 	.word	0x00018990
     578:	200005e5 	.word	0x200005e5
     57c:	200005d5 	.word	0x200005d5
     580:	000189a0 	.word	0x000189a0
     584:	000189ac 	.word	0x000189ac
     588:	20000610 	.word	0x20000610
     58c:	000189bc 	.word	0x000189bc
     590:	0000072d 	.word	0x0000072d
     594:	000189c8 	.word	0x000189c8
     598:	000189d4 	.word	0x000189d4
     59c:	000189e0 	.word	0x000189e0
     5a0:	000189ec 	.word	0x000189ec
     5a4:	20000644 	.word	0x20000644
     5a8:	20000648 	.word	0x20000648
     5ac:	20000554 	.word	0x20000554
     5b0:	2000055c 	.word	0x2000055c
     5b4:	20000570 	.word	0x20000570
     5b8:	2000065c 	.word	0x2000065c
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
     5bc:	4b51      	ldr	r3, [pc, #324]	; (704 <init_eeprom+0x5b4>)
     5be:	2255      	movs	r2, #85	; 0x55
     5c0:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
     5c2:	4b50      	ldr	r3, [pc, #320]	; (704 <init_eeprom+0x5b4>)
     5c4:	2200      	movs	r2, #0
     5c6:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
     5c8:	4b4e      	ldr	r3, [pc, #312]	; (704 <init_eeprom+0x5b4>)
     5ca:	2232      	movs	r2, #50	; 0x32
     5cc:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
     5ce:	4b4d      	ldr	r3, [pc, #308]	; (704 <init_eeprom+0x5b4>)
     5d0:	224f      	movs	r2, #79	; 0x4f
     5d2:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
     5d4:	4b4b      	ldr	r3, [pc, #300]	; (704 <init_eeprom+0x5b4>)
     5d6:	2254      	movs	r2, #84	; 0x54
     5d8:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
     5da:	4b4a      	ldr	r3, [pc, #296]	; (704 <init_eeprom+0x5b4>)
     5dc:	2202      	movs	r2, #2
     5de:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
     5e0:	4b48      	ldr	r3, [pc, #288]	; (704 <init_eeprom+0x5b4>)
     5e2:	2200      	movs	r2, #0
     5e4:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
     5e6:	4b47      	ldr	r3, [pc, #284]	; (704 <init_eeprom+0x5b4>)
     5e8:	2200      	movs	r2, #0
     5ea:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
     5ec:	4b45      	ldr	r3, [pc, #276]	; (704 <init_eeprom+0x5b4>)
     5ee:	2200      	movs	r2, #0
     5f0:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
     5f2:	4b44      	ldr	r3, [pc, #272]	; (704 <init_eeprom+0x5b4>)
     5f4:	2200      	movs	r2, #0
     5f6:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
     5f8:	4b42      	ldr	r3, [pc, #264]	; (704 <init_eeprom+0x5b4>)
     5fa:	2200      	movs	r2, #0
     5fc:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
     5fe:	4b41      	ldr	r3, [pc, #260]	; (704 <init_eeprom+0x5b4>)
     600:	2200      	movs	r2, #0
     602:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
     604:	4b3f      	ldr	r3, [pc, #252]	; (704 <init_eeprom+0x5b4>)
     606:	2200      	movs	r2, #0
     608:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
     60a:	4b3e      	ldr	r3, [pc, #248]	; (704 <init_eeprom+0x5b4>)
     60c:	2200      	movs	r2, #0
     60e:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
     610:	4b3c      	ldr	r3, [pc, #240]	; (704 <init_eeprom+0x5b4>)
     612:	2200      	movs	r2, #0
     614:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
     616:	4b3b      	ldr	r3, [pc, #236]	; (704 <init_eeprom+0x5b4>)
     618:	2200      	movs	r2, #0
     61a:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
     61c:	4b39      	ldr	r3, [pc, #228]	; (704 <init_eeprom+0x5b4>)
     61e:	2200      	movs	r2, #0
     620:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
     622:	4b38      	ldr	r3, [pc, #224]	; (704 <init_eeprom+0x5b4>)
     624:	2255      	movs	r2, #85	; 0x55
     626:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
     628:	4b36      	ldr	r3, [pc, #216]	; (704 <init_eeprom+0x5b4>)
     62a:	2278      	movs	r2, #120	; 0x78
     62c:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
     62e:	4b35      	ldr	r3, [pc, #212]	; (704 <init_eeprom+0x5b4>)
     630:	2200      	movs	r2, #0
     632:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
     634:	4b33      	ldr	r3, [pc, #204]	; (704 <init_eeprom+0x5b4>)
     636:	2200      	movs	r2, #0
     638:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
     63a:	4b32      	ldr	r3, [pc, #200]	; (704 <init_eeprom+0x5b4>)
     63c:	2220      	movs	r2, #32
     63e:	2101      	movs	r1, #1
     640:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
     642:	4b30      	ldr	r3, [pc, #192]	; (704 <init_eeprom+0x5b4>)
     644:	2250      	movs	r2, #80	; 0x50
     646:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
     648:	4b2e      	ldr	r3, [pc, #184]	; (704 <init_eeprom+0x5b4>)
     64a:	2224      	movs	r2, #36	; 0x24
     64c:	2101      	movs	r1, #1
     64e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_CURRENT;
     650:	4b2c      	ldr	r3, [pc, #176]	; (704 <init_eeprom+0x5b4>)
     652:	2225      	movs	r2, #37	; 0x25
     654:	2101      	movs	r1, #1
     656:	5499      	strb	r1, [r3, r2]
		

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     658:	492a      	ldr	r1, [pc, #168]	; (704 <init_eeprom+0x5b4>)
     65a:	4b2b      	ldr	r3, [pc, #172]	; (708 <init_eeprom+0x5b8>)
     65c:	222c      	movs	r2, #44	; 0x2c
     65e:	0018      	movs	r0, r3
     660:	4b2a      	ldr	r3, [pc, #168]	; (70c <init_eeprom+0x5bc>)
     662:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     664:	4b28      	ldr	r3, [pc, #160]	; (708 <init_eeprom+0x5b8>)
     666:	0019      	movs	r1, r3
     668:	201a      	movs	r0, #26
     66a:	4b29      	ldr	r3, [pc, #164]	; (710 <init_eeprom+0x5c0>)
     66c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     66e:	4b29      	ldr	r3, [pc, #164]	; (714 <init_eeprom+0x5c4>)
     670:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     672:	4b25      	ldr	r3, [pc, #148]	; (708 <init_eeprom+0x5b8>)
     674:	0019      	movs	r1, r3
     676:	201b      	movs	r0, #27
     678:	4b27      	ldr	r3, [pc, #156]	; (718 <init_eeprom+0x5c8>)
     67a:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
     67c:	4a27      	ldr	r2, [pc, #156]	; (71c <init_eeprom+0x5cc>)
     67e:	4b22      	ldr	r3, [pc, #136]	; (708 <init_eeprom+0x5b8>)
     680:	0010      	movs	r0, r2
     682:	0019      	movs	r1, r3
     684:	231c      	movs	r3, #28
     686:	001a      	movs	r2, r3
     688:	4b20      	ldr	r3, [pc, #128]	; (70c <init_eeprom+0x5bc>)
     68a:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     68c:	4b23      	ldr	r3, [pc, #140]	; (71c <init_eeprom+0x5cc>)
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	2b55      	cmp	r3, #85	; 0x55
     692:	d034      	beq.n	6fe <init_eeprom+0x5ae>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
     694:	4b21      	ldr	r3, [pc, #132]	; (71c <init_eeprom+0x5cc>)
     696:	2255      	movs	r2, #85	; 0x55
     698:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
     69a:	4b20      	ldr	r3, [pc, #128]	; (71c <init_eeprom+0x5cc>)
     69c:	2201      	movs	r2, #1
     69e:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
     6a0:	4b1e      	ldr	r3, [pc, #120]	; (71c <init_eeprom+0x5cc>)
     6a2:	2201      	movs	r2, #1
     6a4:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
     6a6:	4b1d      	ldr	r3, [pc, #116]	; (71c <init_eeprom+0x5cc>)
     6a8:	2200      	movs	r2, #0
     6aa:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
     6ac:	4b1b      	ldr	r3, [pc, #108]	; (71c <init_eeprom+0x5cc>)
     6ae:	2200      	movs	r2, #0
     6b0:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
     6b2:	4b1a      	ldr	r3, [pc, #104]	; (71c <init_eeprom+0x5cc>)
     6b4:	2200      	movs	r2, #0
     6b6:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
     6b8:	4b18      	ldr	r3, [pc, #96]	; (71c <init_eeprom+0x5cc>)
     6ba:	2200      	movs	r2, #0
     6bc:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
     6be:	4b17      	ldr	r3, [pc, #92]	; (71c <init_eeprom+0x5cc>)
     6c0:	2200      	movs	r2, #0
     6c2:	71da      	strb	r2, [r3, #7]
		
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     6c4:	4b16      	ldr	r3, [pc, #88]	; (720 <init_eeprom+0x5d0>)
     6c6:	2214      	movs	r2, #20
     6c8:	2100      	movs	r1, #0
     6ca:	0018      	movs	r0, r3
     6cc:	4b15      	ldr	r3, [pc, #84]	; (724 <init_eeprom+0x5d4>)
     6ce:	4798      	blx	r3
		strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
     6d0:	4a13      	ldr	r2, [pc, #76]	; (720 <init_eeprom+0x5d0>)
     6d2:	4b15      	ldr	r3, [pc, #84]	; (728 <init_eeprom+0x5d8>)
     6d4:	0010      	movs	r0, r2
     6d6:	0019      	movs	r1, r3
     6d8:	230b      	movs	r3, #11
     6da:	001a      	movs	r2, r3
     6dc:	4b0b      	ldr	r3, [pc, #44]	; (70c <init_eeprom+0x5bc>)
     6de:	4798      	blx	r3
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
     6e0:	4a09      	ldr	r2, [pc, #36]	; (708 <init_eeprom+0x5b8>)
     6e2:	4b0e      	ldr	r3, [pc, #56]	; (71c <init_eeprom+0x5cc>)
     6e4:	0010      	movs	r0, r2
     6e6:	0019      	movs	r1, r3
     6e8:	231c      	movs	r3, #28
     6ea:	001a      	movs	r2, r3
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <init_eeprom+0x5bc>)
     6ee:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <init_eeprom+0x5b8>)
     6f2:	0019      	movs	r1, r3
     6f4:	201b      	movs	r0, #27
     6f6:	4b06      	ldr	r3, [pc, #24]	; (710 <init_eeprom+0x5c0>)
     6f8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <init_eeprom+0x5c4>)
     6fc:	4798      	blx	r3
	}
}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	46bd      	mov	sp, r7
     702:	bd80      	pop	{r7, pc}
     704:	2000065c 	.word	0x2000065c
     708:	20000584 	.word	0x20000584
     70c:	00017d31 	.word	0x00017d31
     710:	000129f9 	.word	0x000129f9
     714:	00012ba1 	.word	0x00012ba1
     718:	00012b05 	.word	0x00012b05
     71c:	20000628 	.word	0x20000628
     720:	20000630 	.word	0x20000630
     724:	00017d67 	.word	0x00017d67
     728:	00018968 	.word	0x00018968

0000072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
     72c:	b580      	push	{r7, lr}
     72e:	b088      	sub	sp, #32
     730:	af00      	add	r7, sp, #0
     732:	0002      	movs	r2, r0
     734:	6039      	str	r1, [r7, #0]
     736:	1dfb      	adds	r3, r7, #7
     738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
     73a:	4b28      	ldr	r3, [pc, #160]	; (7dc <config_mobile_no_ee+0xb0>)
     73c:	223c      	movs	r2, #60	; 0x3c
     73e:	2100      	movs	r1, #0
     740:	0018      	movs	r0, r3
     742:	4b27      	ldr	r3, [pc, #156]	; (7e0 <config_mobile_no_ee+0xb4>)
     744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
     746:	4a25      	ldr	r2, [pc, #148]	; (7dc <config_mobile_no_ee+0xb0>)
     748:	1dfb      	adds	r3, r7, #7
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	0011      	movs	r1, r2
     74e:	0018      	movs	r0, r3
     750:	4b24      	ldr	r3, [pc, #144]	; (7e4 <config_mobile_no_ee+0xb8>)
     752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
     754:	2308      	movs	r3, #8
     756:	18fa      	adds	r2, r7, r3
     758:	4b20      	ldr	r3, [pc, #128]	; (7dc <config_mobile_no_ee+0xb0>)
     75a:	0010      	movs	r0, r2
     75c:	0019      	movs	r1, r3
     75e:	2318      	movs	r3, #24
     760:	001a      	movs	r2, r3
     762:	4b21      	ldr	r3, [pc, #132]	; (7e8 <config_mobile_no_ee+0xbc>)
     764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
     766:	2308      	movs	r3, #8
     768:	18fb      	adds	r3, r7, r3
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2b55      	cmp	r3, #85	; 0x55
     76e:	d031      	beq.n	7d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
     770:	2308      	movs	r3, #8
     772:	18fb      	adds	r3, r7, r3
     774:	2255      	movs	r2, #85	; 0x55
     776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
     778:	2308      	movs	r3, #8
     77a:	18fb      	adds	r3, r7, r3
     77c:	2200      	movs	r2, #0
     77e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
     780:	2308      	movs	r3, #8
     782:	18fb      	adds	r3, r7, r3
     784:	2200      	movs	r2, #0
     786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
     788:	2308      	movs	r3, #8
     78a:	18fb      	adds	r3, r7, r3
     78c:	2200      	movs	r2, #0
     78e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     790:	2308      	movs	r3, #8
     792:	18fb      	adds	r3, r7, r3
     794:	3304      	adds	r3, #4
     796:	2214      	movs	r2, #20
     798:	2100      	movs	r1, #0
     79a:	0018      	movs	r0, r3
     79c:	4b10      	ldr	r3, [pc, #64]	; (7e0 <config_mobile_no_ee+0xb4>)
     79e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
     7a0:	683a      	ldr	r2, [r7, #0]
     7a2:	2308      	movs	r3, #8
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	3304      	adds	r3, #4
     7a8:	0011      	movs	r1, r2
     7aa:	0018      	movs	r0, r3
     7ac:	4b0f      	ldr	r3, [pc, #60]	; (7ec <config_mobile_no_ee+0xc0>)
     7ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
     7b0:	4a0a      	ldr	r2, [pc, #40]	; (7dc <config_mobile_no_ee+0xb0>)
     7b2:	2308      	movs	r3, #8
     7b4:	18fb      	adds	r3, r7, r3
     7b6:	0010      	movs	r0, r2
     7b8:	0019      	movs	r1, r3
     7ba:	2318      	movs	r3, #24
     7bc:	001a      	movs	r2, r3
     7be:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <config_mobile_no_ee+0xbc>)
     7c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
     7c2:	4a06      	ldr	r2, [pc, #24]	; (7dc <config_mobile_no_ee+0xb0>)
     7c4:	1dfb      	adds	r3, r7, #7
     7c6:	781b      	ldrb	r3, [r3, #0]
     7c8:	0011      	movs	r1, r2
     7ca:	0018      	movs	r0, r3
     7cc:	4b08      	ldr	r3, [pc, #32]	; (7f0 <config_mobile_no_ee+0xc4>)
     7ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <config_mobile_no_ee+0xc8>)
     7d2:	4798      	blx	r3
	}
}
     7d4:	46c0      	nop			; (mov r8, r8)
     7d6:	46bd      	mov	sp, r7
     7d8:	b008      	add	sp, #32
     7da:	bd80      	pop	{r7, pc}
     7dc:	20000584 	.word	0x20000584
     7e0:	00017d67 	.word	0x00017d67
     7e4:	00012b05 	.word	0x00012b05
     7e8:	00017d31 	.word	0x00017d31
     7ec:	00017fe7 	.word	0x00017fe7
     7f0:	000129f9 	.word	0x000129f9
     7f4:	00012ba1 	.word	0x00012ba1

000007f8 <getNumbers>:


void getNumbers(char *string)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b08a      	sub	sp, #40	; 0x28
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
     800:	687b      	ldr	r3, [r7, #4]
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     806:	2327      	movs	r3, #39	; 0x27
     808:	18fb      	adds	r3, r7, r3
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
     80e:	e063      	b.n	8d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     810:	4b37      	ldr	r3, [pc, #220]	; (8f0 <getNumbers+0xf8>)
     812:	223c      	movs	r2, #60	; 0x3c
     814:	2100      	movs	r1, #0
     816:	0018      	movs	r0, r3
     818:	4b36      	ldr	r3, [pc, #216]	; (8f4 <getNumbers+0xfc>)
     81a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     81c:	2327      	movs	r3, #39	; 0x27
     81e:	18fb      	adds	r3, r7, r3
     820:	781b      	ldrb	r3, [r3, #0]
     822:	3309      	adds	r3, #9
     824:	b2db      	uxtb	r3, r3
     826:	4a32      	ldr	r2, [pc, #200]	; (8f0 <getNumbers+0xf8>)
     828:	0011      	movs	r1, r2
     82a:	0018      	movs	r0, r3
     82c:	4b32      	ldr	r3, [pc, #200]	; (8f8 <getNumbers+0x100>)
     82e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     830:	230c      	movs	r3, #12
     832:	18fa      	adds	r2, r7, r3
     834:	4b2e      	ldr	r3, [pc, #184]	; (8f0 <getNumbers+0xf8>)
     836:	0010      	movs	r0, r2
     838:	0019      	movs	r1, r3
     83a:	2318      	movs	r3, #24
     83c:	001a      	movs	r2, r3
     83e:	4b2f      	ldr	r3, [pc, #188]	; (8fc <getNumbers+0x104>)
     840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
     842:	4b2f      	ldr	r3, [pc, #188]	; (900 <getNumbers+0x108>)
     844:	78db      	ldrb	r3, [r3, #3]
     846:	2227      	movs	r2, #39	; 0x27
     848:	18ba      	adds	r2, r7, r2
     84a:	7812      	ldrb	r2, [r2, #0]
     84c:	429a      	cmp	r2, r3
     84e:	d10f      	bne.n	870 <getNumbers+0x78>
		{
			strcat(string,"P:");
     850:	687b      	ldr	r3, [r7, #4]
     852:	0018      	movs	r0, r3
     854:	4b2b      	ldr	r3, [pc, #172]	; (904 <getNumbers+0x10c>)
     856:	4798      	blx	r3
     858:	0003      	movs	r3, r0
     85a:	001a      	movs	r2, r3
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	189a      	adds	r2, r3, r2
     860:	4b29      	ldr	r3, [pc, #164]	; (908 <getNumbers+0x110>)
     862:	0010      	movs	r0, r2
     864:	0019      	movs	r1, r3
     866:	2303      	movs	r3, #3
     868:	001a      	movs	r2, r3
     86a:	4b24      	ldr	r3, [pc, #144]	; (8fc <getNumbers+0x104>)
     86c:	4798      	blx	r3
     86e:	e015      	b.n	89c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
     870:	4b23      	ldr	r3, [pc, #140]	; (900 <getNumbers+0x108>)
     872:	791b      	ldrb	r3, [r3, #4]
     874:	2227      	movs	r2, #39	; 0x27
     876:	18ba      	adds	r2, r7, r2
     878:	7812      	ldrb	r2, [r2, #0]
     87a:	429a      	cmp	r2, r3
     87c:	d10e      	bne.n	89c <getNumbers+0xa4>
		{
			strcat(string,"S:");
     87e:	687b      	ldr	r3, [r7, #4]
     880:	0018      	movs	r0, r3
     882:	4b20      	ldr	r3, [pc, #128]	; (904 <getNumbers+0x10c>)
     884:	4798      	blx	r3
     886:	0003      	movs	r3, r0
     888:	001a      	movs	r2, r3
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	189a      	adds	r2, r3, r2
     88e:	4b1f      	ldr	r3, [pc, #124]	; (90c <getNumbers+0x114>)
     890:	0010      	movs	r0, r2
     892:	0019      	movs	r1, r3
     894:	2303      	movs	r3, #3
     896:	001a      	movs	r2, r3
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <getNumbers+0x104>)
     89a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
     89c:	230c      	movs	r3, #12
     89e:	18fb      	adds	r3, r7, r3
     8a0:	1d1a      	adds	r2, r3, #4
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	0011      	movs	r1, r2
     8a6:	0018      	movs	r0, r3
     8a8:	4b19      	ldr	r3, [pc, #100]	; (910 <getNumbers+0x118>)
     8aa:	4798      	blx	r3
		strcat(string,"\n");
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	0018      	movs	r0, r3
     8b0:	4b14      	ldr	r3, [pc, #80]	; (904 <getNumbers+0x10c>)
     8b2:	4798      	blx	r3
     8b4:	0003      	movs	r3, r0
     8b6:	001a      	movs	r2, r3
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	189a      	adds	r2, r3, r2
     8bc:	4b15      	ldr	r3, [pc, #84]	; (914 <getNumbers+0x11c>)
     8be:	0010      	movs	r0, r2
     8c0:	0019      	movs	r1, r3
     8c2:	2302      	movs	r3, #2
     8c4:	001a      	movs	r2, r3
     8c6:	4b0d      	ldr	r3, [pc, #52]	; (8fc <getNumbers+0x104>)
     8c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     8ca:	2327      	movs	r3, #39	; 0x27
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	2327      	movs	r3, #39	; 0x27
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	3201      	adds	r2, #1
     8d6:	701a      	strb	r2, [r3, #0]
     8d8:	4b09      	ldr	r3, [pc, #36]	; (900 <getNumbers+0x108>)
     8da:	789b      	ldrb	r3, [r3, #2]
     8dc:	2227      	movs	r2, #39	; 0x27
     8de:	18ba      	adds	r2, r7, r2
     8e0:	7812      	ldrb	r2, [r2, #0]
     8e2:	429a      	cmp	r2, r3
     8e4:	d394      	bcc.n	810 <getNumbers+0x18>
	}
}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	46bd      	mov	sp, r7
     8ea:	b00a      	add	sp, #40	; 0x28
     8ec:	bd80      	pop	{r7, pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	20000584 	.word	0x20000584
     8f4:	00017d67 	.word	0x00017d67
     8f8:	00012b05 	.word	0x00012b05
     8fc:	00017d31 	.word	0x00017d31
     900:	20000610 	.word	0x20000610
     904:	00017ff7 	.word	0x00017ff7
     908:	000189f8 	.word	0x000189f8
     90c:	000189fc 	.word	0x000189fc
     910:	00017fb1 	.word	0x00017fb1
     914:	00018a00 	.word	0x00018a00

00000918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
     918:	b580      	push	{r7, lr}
     91a:	b088      	sub	sp, #32
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	000a      	movs	r2, r1
     922:	1cfb      	adds	r3, r7, #3
     924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
     926:	687b      	ldr	r3, [r7, #4]
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
     92c:	4b15      	ldr	r3, [pc, #84]	; (984 <getIndexedNumber+0x6c>)
     92e:	789b      	ldrb	r3, [r3, #2]
     930:	1cfa      	adds	r2, r7, #3
     932:	7812      	ldrb	r2, [r2, #0]
     934:	429a      	cmp	r2, r3
     936:	d21f      	bcs.n	978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     938:	4b13      	ldr	r3, [pc, #76]	; (988 <getIndexedNumber+0x70>)
     93a:	223c      	movs	r2, #60	; 0x3c
     93c:	2100      	movs	r1, #0
     93e:	0018      	movs	r0, r3
     940:	4b12      	ldr	r3, [pc, #72]	; (98c <getIndexedNumber+0x74>)
     942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
     944:	1cfb      	adds	r3, r7, #3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	3309      	adds	r3, #9
     94a:	b2db      	uxtb	r3, r3
     94c:	4a0e      	ldr	r2, [pc, #56]	; (988 <getIndexedNumber+0x70>)
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	4b0f      	ldr	r3, [pc, #60]	; (990 <getIndexedNumber+0x78>)
     954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     956:	2308      	movs	r3, #8
     958:	18fa      	adds	r2, r7, r3
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <getIndexedNumber+0x70>)
     95c:	0010      	movs	r0, r2
     95e:	0019      	movs	r1, r3
     960:	2318      	movs	r3, #24
     962:	001a      	movs	r2, r3
     964:	4b0b      	ldr	r3, [pc, #44]	; (994 <getIndexedNumber+0x7c>)
     966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
     968:	2308      	movs	r3, #8
     96a:	18fb      	adds	r3, r7, r3
     96c:	1d1a      	adds	r2, r3, #4
     96e:	687b      	ldr	r3, [r7, #4]
     970:	0011      	movs	r1, r2
     972:	0018      	movs	r0, r3
     974:	4b08      	ldr	r3, [pc, #32]	; (998 <getIndexedNumber+0x80>)
     976:	4798      	blx	r3
	}
	return IndexNo;
     978:	687b      	ldr	r3, [r7, #4]
}
     97a:	0018      	movs	r0, r3
     97c:	46bd      	mov	sp, r7
     97e:	b008      	add	sp, #32
     980:	bd80      	pop	{r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000610 	.word	0x20000610
     988:	20000584 	.word	0x20000584
     98c:	00017d67 	.word	0x00017d67
     990:	00012b05 	.word	0x00012b05
     994:	00017d31 	.word	0x00017d31
     998:	00017fb1 	.word	0x00017fb1

0000099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
     99c:	b580      	push	{r7, lr}
     99e:	b088      	sub	sp, #32
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     9a4:	4b14      	ldr	r3, [pc, #80]	; (9f8 <isPrimaryNumber+0x5c>)
     9a6:	789b      	ldrb	r3, [r3, #2]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d020      	beq.n	9ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
     9ac:	230c      	movs	r3, #12
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	0018      	movs	r0, r3
     9b2:	2314      	movs	r3, #20
     9b4:	001a      	movs	r2, r3
     9b6:	2100      	movs	r1, #0
     9b8:	4b10      	ldr	r3, [pc, #64]	; (9fc <isPrimaryNumber+0x60>)
     9ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
     9bc:	4b0e      	ldr	r3, [pc, #56]	; (9f8 <isPrimaryNumber+0x5c>)
     9be:	78da      	ldrb	r2, [r3, #3]
     9c0:	230c      	movs	r3, #12
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	0011      	movs	r1, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b0d      	ldr	r3, [pc, #52]	; (a00 <isPrimaryNumber+0x64>)
     9ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
     9cc:	230c      	movs	r3, #12
     9ce:	18fa      	adds	r2, r7, r3
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	0011      	movs	r1, r2
     9d4:	0018      	movs	r0, r3
     9d6:	4b0b      	ldr	r3, [pc, #44]	; (a04 <isPrimaryNumber+0x68>)
     9d8:	4798      	blx	r3
     9da:	1e03      	subs	r3, r0, #0
     9dc:	d001      	beq.n	9e2 <isPrimaryNumber+0x46>
		{
			return true;
     9de:	2301      	movs	r3, #1
     9e0:	e006      	b.n	9f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	0018      	movs	r0, r3
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <isPrimaryNumber+0x6c>)
     9e8:	4798      	blx	r3
     9ea:	0003      	movs	r3, r0
     9ec:	e000      	b.n	9f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
     9ee:	2300      	movs	r3, #0
}
     9f0:	0018      	movs	r0, r3
     9f2:	46bd      	mov	sp, r7
     9f4:	b008      	add	sp, #32
     9f6:	bd80      	pop	{r7, pc}
     9f8:	20000610 	.word	0x20000610
     9fc:	00017d67 	.word	0x00017d67
     a00:	00000919 	.word	0x00000919
     a04:	00018027 	.word	0x00018027
     a08:	00000a0d 	.word	0x00000a0d

00000a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b082      	sub	sp, #8
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     a14:	4b0b      	ldr	r3, [pc, #44]	; (a44 <isAlterNumber+0x38>)
     a16:	789b      	ldrb	r3, [r3, #2]
     a18:	2b00      	cmp	r3, #0
     a1a:	d00d      	beq.n	a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
     a1c:	4b0a      	ldr	r3, [pc, #40]	; (a48 <isAlterNumber+0x3c>)
     a1e:	789b      	ldrb	r3, [r3, #2]
     a20:	2b00      	cmp	r3, #0
     a22:	d009      	beq.n	a38 <isAlterNumber+0x2c>
     a24:	4a09      	ldr	r2, [pc, #36]	; (a4c <isAlterNumber+0x40>)
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	0011      	movs	r1, r2
     a2a:	0018      	movs	r0, r3
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <isAlterNumber+0x44>)
     a2e:	4798      	blx	r3
     a30:	1e03      	subs	r3, r0, #0
     a32:	d001      	beq.n	a38 <isAlterNumber+0x2c>
		{
			return true;
     a34:	2301      	movs	r3, #1
     a36:	e000      	b.n	a3a <isAlterNumber+0x2e>
		}
	}
	return false;
     a38:	2300      	movs	r3, #0
}
     a3a:	0018      	movs	r0, r3
     a3c:	46bd      	mov	sp, r7
     a3e:	b002      	add	sp, #8
     a40:	bd80      	pop	{r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	20000610 	.word	0x20000610
     a48:	20000644 	.word	0x20000644
     a4c:	20000648 	.word	0x20000648
     a50:	00018027 	.word	0x00018027

00000a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
     a54:	b580      	push	{r7, lr}
     a56:	b082      	sub	sp, #8
     a58:	af00      	add	r7, sp, #0
     a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <isM2MNumber+0x30>)
     a5e:	785b      	ldrb	r3, [r3, #1]
     a60:	2b00      	cmp	r3, #0
     a62:	d009      	beq.n	a78 <isM2MNumber+0x24>
     a64:	4a08      	ldr	r2, [pc, #32]	; (a88 <isM2MNumber+0x34>)
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	0011      	movs	r1, r2
     a6a:	0018      	movs	r0, r3
     a6c:	4b07      	ldr	r3, [pc, #28]	; (a8c <isM2MNumber+0x38>)
     a6e:	4798      	blx	r3
     a70:	1e03      	subs	r3, r0, #0
     a72:	d001      	beq.n	a78 <isM2MNumber+0x24>
	{
		return true;
     a74:	2301      	movs	r3, #1
     a76:	e000      	b.n	a7a <isM2MNumber+0x26>
	}
	return false;
     a78:	2300      	movs	r3, #0
}
     a7a:	0018      	movs	r0, r3
     a7c:	46bd      	mov	sp, r7
     a7e:	b002      	add	sp, #8
     a80:	bd80      	pop	{r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	20000554 	.word	0x20000554
     a88:	2000055c 	.word	0x2000055c
     a8c:	00018027 	.word	0x00018027

00000a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
     a98:	4b09      	ldr	r3, [pc, #36]	; (ac0 <isM2MRemoteNumber+0x30>)
     a9a:	78db      	ldrb	r3, [r3, #3]
     a9c:	2b00      	cmp	r3, #0
     a9e:	d009      	beq.n	ab4 <isM2MRemoteNumber+0x24>
     aa0:	4a08      	ldr	r2, [pc, #32]	; (ac4 <isM2MRemoteNumber+0x34>)
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	0011      	movs	r1, r2
     aa6:	0018      	movs	r0, r3
     aa8:	4b07      	ldr	r3, [pc, #28]	; (ac8 <isM2MRemoteNumber+0x38>)
     aaa:	4798      	blx	r3
     aac:	1e03      	subs	r3, r0, #0
     aae:	d001      	beq.n	ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
     ab0:	2301      	movs	r3, #1
     ab2:	e000      	b.n	ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
     ab4:	2300      	movs	r3, #0
}
     ab6:	0018      	movs	r0, r3
     ab8:	46bd      	mov	sp, r7
     aba:	b002      	add	sp, #8
     abc:	bd80      	pop	{r7, pc}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	20000554 	.word	0x20000554
     ac4:	20000570 	.word	0x20000570
     ac8:	00018027 	.word	0x00018027

00000acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
     ad4:	4b09      	ldr	r3, [pc, #36]	; (afc <getM2MNumber+0x30>)
     ad6:	785b      	ldrb	r3, [r3, #1]
     ad8:	2b00      	cmp	r3, #0
     ada:	d006      	beq.n	aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
     adc:	4a08      	ldr	r2, [pc, #32]	; (b00 <getM2MNumber+0x34>)
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	0011      	movs	r1, r2
     ae2:	0018      	movs	r0, r3
     ae4:	4b07      	ldr	r3, [pc, #28]	; (b04 <getM2MNumber+0x38>)
     ae6:	4798      	blx	r3
     ae8:	e002      	b.n	af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	2200      	movs	r2, #0
     aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
     af0:	687b      	ldr	r3, [r7, #4]
}
     af2:	0018      	movs	r0, r3
     af4:	46bd      	mov	sp, r7
     af6:	b002      	add	sp, #8
     af8:	bd80      	pop	{r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	20000554 	.word	0x20000554
     b00:	2000055c 	.word	0x2000055c
     b04:	00017fe7 	.word	0x00017fe7

00000b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
     b10:	4b09      	ldr	r3, [pc, #36]	; (b38 <getM2MRemoteNumber+0x30>)
     b12:	78db      	ldrb	r3, [r3, #3]
     b14:	2b00      	cmp	r3, #0
     b16:	d006      	beq.n	b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
     b18:	4a08      	ldr	r2, [pc, #32]	; (b3c <getM2MRemoteNumber+0x34>)
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	0011      	movs	r1, r2
     b1e:	0018      	movs	r0, r3
     b20:	4b07      	ldr	r3, [pc, #28]	; (b40 <getM2MRemoteNumber+0x38>)
     b22:	4798      	blx	r3
     b24:	e002      	b.n	b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	2200      	movs	r2, #0
     b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
     b2c:	687b      	ldr	r3, [r7, #4]
}
     b2e:	0018      	movs	r0, r3
     b30:	46bd      	mov	sp, r7
     b32:	b002      	add	sp, #8
     b34:	bd80      	pop	{r7, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	20000554 	.word	0x20000554
     b3c:	20000570 	.word	0x20000570
     b40:	00017fe7 	.word	0x00017fe7

00000b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
     b44:	b580      	push	{r7, lr}
     b46:	b082      	sub	sp, #8
     b48:	af00      	add	r7, sp, #0
     b4a:	0002      	movs	r2, r0
     b4c:	1dfb      	adds	r3, r7, #7
     b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
     b50:	1dfb      	adds	r3, r7, #7
     b52:	781a      	ldrb	r2, [r3, #0]
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <setM2MVerify+0x3c>)
     b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     b58:	4a0a      	ldr	r2, [pc, #40]	; (b84 <setM2MVerify+0x40>)
     b5a:	4b09      	ldr	r3, [pc, #36]	; (b80 <setM2MVerify+0x3c>)
     b5c:	0010      	movs	r0, r2
     b5e:	0019      	movs	r1, r3
     b60:	2330      	movs	r3, #48	; 0x30
     b62:	001a      	movs	r2, r3
     b64:	4b08      	ldr	r3, [pc, #32]	; (b88 <setM2MVerify+0x44>)
     b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     b68:	4b06      	ldr	r3, [pc, #24]	; (b84 <setM2MVerify+0x40>)
     b6a:	0019      	movs	r1, r3
     b6c:	2019      	movs	r0, #25
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <setM2MVerify+0x48>)
     b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     b72:	4b07      	ldr	r3, [pc, #28]	; (b90 <setM2MVerify+0x4c>)
     b74:	4798      	blx	r3
}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	46bd      	mov	sp, r7
     b7a:	b002      	add	sp, #8
     b7c:	bd80      	pop	{r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	20000554 	.word	0x20000554
     b84:	20000584 	.word	0x20000584
     b88:	00017d31 	.word	0x00017d31
     b8c:	000129f9 	.word	0x000129f9
     b90:	00012ba1 	.word	0x00012ba1

00000b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
     b94:	b580      	push	{r7, lr}
     b96:	b082      	sub	sp, #8
     b98:	af00      	add	r7, sp, #0
     b9a:	0002      	movs	r2, r0
     b9c:	1dfb      	adds	r3, r7, #7
     b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
     ba0:	1dfb      	adds	r3, r7, #7
     ba2:	781a      	ldrb	r2, [r3, #0]
     ba4:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <setM2MRemoteVerified+0x3c>)
     ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     ba8:	4a0a      	ldr	r2, [pc, #40]	; (bd4 <setM2MRemoteVerified+0x40>)
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <setM2MRemoteVerified+0x3c>)
     bac:	0010      	movs	r0, r2
     bae:	0019      	movs	r1, r3
     bb0:	2330      	movs	r3, #48	; 0x30
     bb2:	001a      	movs	r2, r3
     bb4:	4b08      	ldr	r3, [pc, #32]	; (bd8 <setM2MRemoteVerified+0x44>)
     bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <setM2MRemoteVerified+0x40>)
     bba:	0019      	movs	r1, r3
     bbc:	2019      	movs	r0, #25
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <setM2MRemoteVerified+0x48>)
     bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     bc2:	4b07      	ldr	r3, [pc, #28]	; (be0 <setM2MRemoteVerified+0x4c>)
     bc4:	4798      	blx	r3
}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	46bd      	mov	sp, r7
     bca:	b002      	add	sp, #8
     bcc:	bd80      	pop	{r7, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	20000554 	.word	0x20000554
     bd4:	20000584 	.word	0x20000584
     bd8:	00017d31 	.word	0x00017d31
     bdc:	000129f9 	.word	0x000129f9
     be0:	00012ba1 	.word	0x00012ba1

00000be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
     bea:	0002      	movs	r2, r0
     bec:	1dfb      	adds	r3, r7, #7
     bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	781a      	ldrb	r2, [r3, #0]
     bf4:	4b0f      	ldr	r3, [pc, #60]	; (c34 <saveM2MSettings+0x50>)
     bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
     bf8:	1dfb      	adds	r3, r7, #7
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	2201      	movs	r2, #1
     bfe:	4053      	eors	r3, r2
     c00:	b2db      	uxtb	r3, r3
     c02:	2b00      	cmp	r3, #0
     c04:	d002      	beq.n	c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
     c06:	4b0b      	ldr	r3, [pc, #44]	; (c34 <saveM2MSettings+0x50>)
     c08:	2200      	movs	r2, #0
     c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c0c:	4a0a      	ldr	r2, [pc, #40]	; (c38 <saveM2MSettings+0x54>)
     c0e:	4b09      	ldr	r3, [pc, #36]	; (c34 <saveM2MSettings+0x50>)
     c10:	0010      	movs	r0, r2
     c12:	0019      	movs	r1, r3
     c14:	2330      	movs	r3, #48	; 0x30
     c16:	001a      	movs	r2, r3
     c18:	4b08      	ldr	r3, [pc, #32]	; (c3c <saveM2MSettings+0x58>)
     c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <saveM2MSettings+0x54>)
     c1e:	0019      	movs	r1, r3
     c20:	2019      	movs	r0, #25
     c22:	4b07      	ldr	r3, [pc, #28]	; (c40 <saveM2MSettings+0x5c>)
     c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <saveM2MSettings+0x60>)
     c28:	4798      	blx	r3
}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	46bd      	mov	sp, r7
     c2e:	b002      	add	sp, #8
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	20000554 	.word	0x20000554
     c38:	20000584 	.word	0x20000584
     c3c:	00017d31 	.word	0x00017d31
     c40:	000129f9 	.word	0x000129f9
     c44:	00012ba1 	.word	0x00012ba1

00000c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
     c50:	4b0f      	ldr	r3, [pc, #60]	; (c90 <addM2MNumber+0x48>)
     c52:	2201      	movs	r2, #1
     c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
     c56:	687a      	ldr	r2, [r7, #4]
     c58:	4b0e      	ldr	r3, [pc, #56]	; (c94 <addM2MNumber+0x4c>)
     c5a:	0011      	movs	r1, r2
     c5c:	0018      	movs	r0, r3
     c5e:	4b0e      	ldr	r3, [pc, #56]	; (c98 <addM2MNumber+0x50>)
     c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c62:	4a0e      	ldr	r2, [pc, #56]	; (c9c <addM2MNumber+0x54>)
     c64:	4b0a      	ldr	r3, [pc, #40]	; (c90 <addM2MNumber+0x48>)
     c66:	0010      	movs	r0, r2
     c68:	0019      	movs	r1, r3
     c6a:	2330      	movs	r3, #48	; 0x30
     c6c:	001a      	movs	r2, r3
     c6e:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <addM2MNumber+0x58>)
     c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c72:	4b0a      	ldr	r3, [pc, #40]	; (c9c <addM2MNumber+0x54>)
     c74:	0019      	movs	r1, r3
     c76:	2019      	movs	r0, #25
     c78:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <addM2MNumber+0x5c>)
     c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <addM2MNumber+0x60>)
     c7e:	4798      	blx	r3
	setM2MVerify(false);
     c80:	2000      	movs	r0, #0
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <addM2MNumber+0x64>)
     c84:	4798      	blx	r3
}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	46bd      	mov	sp, r7
     c8a:	b002      	add	sp, #8
     c8c:	bd80      	pop	{r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	20000554 	.word	0x20000554
     c94:	2000055c 	.word	0x2000055c
     c98:	00017fe7 	.word	0x00017fe7
     c9c:	20000584 	.word	0x20000584
     ca0:	00017d31 	.word	0x00017d31
     ca4:	000129f9 	.word	0x000129f9
     ca8:	00012ba1 	.word	0x00012ba1
     cac:	00000b45 	.word	0x00000b45

00000cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
     cb0:	b580      	push	{r7, lr}
     cb2:	b082      	sub	sp, #8
     cb4:	af00      	add	r7, sp, #0
     cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
     cb8:	4b10      	ldr	r3, [pc, #64]	; (cfc <addM2MRemoteNumber+0x4c>)
     cba:	2201      	movs	r2, #1
     cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
     cbe:	687a      	ldr	r2, [r7, #4]
     cc0:	4b0f      	ldr	r3, [pc, #60]	; (d00 <addM2MRemoteNumber+0x50>)
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b0f      	ldr	r3, [pc, #60]	; (d04 <addM2MRemoteNumber+0x54>)
     cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     cca:	4a0f      	ldr	r2, [pc, #60]	; (d08 <addM2MRemoteNumber+0x58>)
     ccc:	4b0b      	ldr	r3, [pc, #44]	; (cfc <addM2MRemoteNumber+0x4c>)
     cce:	0010      	movs	r0, r2
     cd0:	0019      	movs	r1, r3
     cd2:	2330      	movs	r3, #48	; 0x30
     cd4:	001a      	movs	r2, r3
     cd6:	4b0d      	ldr	r3, [pc, #52]	; (d0c <addM2MRemoteNumber+0x5c>)
     cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     cda:	4b0b      	ldr	r3, [pc, #44]	; (d08 <addM2MRemoteNumber+0x58>)
     cdc:	0019      	movs	r1, r3
     cde:	2019      	movs	r0, #25
     ce0:	4b0b      	ldr	r3, [pc, #44]	; (d10 <addM2MRemoteNumber+0x60>)
     ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <addM2MRemoteNumber+0x64>)
     ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
     ce8:	2000      	movs	r0, #0
     cea:	4b0b      	ldr	r3, [pc, #44]	; (d18 <addM2MRemoteNumber+0x68>)
     cec:	4798      	blx	r3
	saveM2MSettings(false);
     cee:	2000      	movs	r0, #0
     cf0:	4b0a      	ldr	r3, [pc, #40]	; (d1c <addM2MRemoteNumber+0x6c>)
     cf2:	4798      	blx	r3
}
     cf4:	46c0      	nop			; (mov r8, r8)
     cf6:	46bd      	mov	sp, r7
     cf8:	b002      	add	sp, #8
     cfa:	bd80      	pop	{r7, pc}
     cfc:	20000554 	.word	0x20000554
     d00:	20000570 	.word	0x20000570
     d04:	00017fe7 	.word	0x00017fe7
     d08:	20000584 	.word	0x20000584
     d0c:	00017d31 	.word	0x00017d31
     d10:	000129f9 	.word	0x000129f9
     d14:	00012ba1 	.word	0x00012ba1
     d18:	00000b95 	.word	0x00000b95
     d1c:	00000be5 	.word	0x00000be5

00000d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
     d20:	b580      	push	{r7, lr}
     d22:	b08e      	sub	sp, #56	; 0x38
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     d28:	4b28      	ldr	r3, [pc, #160]	; (dcc <getActiveNumber+0xac>)
     d2a:	789b      	ldrb	r3, [r3, #2]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d02b      	beq.n	d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
     d30:	4b27      	ldr	r3, [pc, #156]	; (dd0 <getActiveNumber+0xb0>)
     d32:	785b      	ldrb	r3, [r3, #1]
     d34:	2b00      	cmp	r3, #0
     d36:	d006      	beq.n	d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
     d38:	4a26      	ldr	r2, [pc, #152]	; (dd4 <getActiveNumber+0xb4>)
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	0011      	movs	r1, r2
     d3e:	0018      	movs	r0, r3
     d40:	4b25      	ldr	r3, [pc, #148]	; (dd8 <getActiveNumber+0xb8>)
     d42:	4798      	blx	r3
     d44:	e03c      	b.n	dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     d46:	4b25      	ldr	r3, [pc, #148]	; (ddc <getActiveNumber+0xbc>)
     d48:	223c      	movs	r2, #60	; 0x3c
     d4a:	2100      	movs	r1, #0
     d4c:	0018      	movs	r0, r3
     d4e:	4b24      	ldr	r3, [pc, #144]	; (de0 <getActiveNumber+0xc0>)
     d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
     d52:	4b1e      	ldr	r3, [pc, #120]	; (dcc <getActiveNumber+0xac>)
     d54:	78db      	ldrb	r3, [r3, #3]
     d56:	3309      	adds	r3, #9
     d58:	b2db      	uxtb	r3, r3
     d5a:	4a20      	ldr	r2, [pc, #128]	; (ddc <getActiveNumber+0xbc>)
     d5c:	0011      	movs	r1, r2
     d5e:	0018      	movs	r0, r3
     d60:	4b20      	ldr	r3, [pc, #128]	; (de4 <getActiveNumber+0xc4>)
     d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d64:	2320      	movs	r3, #32
     d66:	18fa      	adds	r2, r7, r3
     d68:	4b1c      	ldr	r3, [pc, #112]	; (ddc <getActiveNumber+0xbc>)
     d6a:	0010      	movs	r0, r2
     d6c:	0019      	movs	r1, r3
     d6e:	2318      	movs	r3, #24
     d70:	001a      	movs	r2, r3
     d72:	4b1d      	ldr	r3, [pc, #116]	; (de8 <getActiveNumber+0xc8>)
     d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
     d76:	2320      	movs	r3, #32
     d78:	18fb      	adds	r3, r7, r3
     d7a:	1d1a      	adds	r2, r3, #4
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	0011      	movs	r1, r2
     d80:	0018      	movs	r0, r3
     d82:	4b15      	ldr	r3, [pc, #84]	; (dd8 <getActiveNumber+0xb8>)
     d84:	4798      	blx	r3
     d86:	e01b      	b.n	dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     d88:	4b14      	ldr	r3, [pc, #80]	; (ddc <getActiveNumber+0xbc>)
     d8a:	223c      	movs	r2, #60	; 0x3c
     d8c:	2100      	movs	r1, #0
     d8e:	0018      	movs	r0, r3
     d90:	4b13      	ldr	r3, [pc, #76]	; (de0 <getActiveNumber+0xc0>)
     d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
     d94:	4b11      	ldr	r3, [pc, #68]	; (ddc <getActiveNumber+0xbc>)
     d96:	0019      	movs	r1, r3
     d98:	2003      	movs	r0, #3
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <getActiveNumber+0xc4>)
     d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d9e:	2308      	movs	r3, #8
     da0:	18fa      	adds	r2, r7, r3
     da2:	4b0e      	ldr	r3, [pc, #56]	; (ddc <getActiveNumber+0xbc>)
     da4:	0010      	movs	r0, r2
     da6:	0019      	movs	r1, r3
     da8:	2318      	movs	r3, #24
     daa:	001a      	movs	r2, r3
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <getActiveNumber+0xc8>)
     dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
     db0:	2308      	movs	r3, #8
     db2:	18fb      	adds	r3, r7, r3
     db4:	1d1a      	adds	r2, r3, #4
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	0011      	movs	r1, r2
     dba:	0018      	movs	r0, r3
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <getActiveNumber+0xb8>)
     dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
     dc0:	687b      	ldr	r3, [r7, #4]
}
     dc2:	0018      	movs	r0, r3
     dc4:	46bd      	mov	sp, r7
     dc6:	b00e      	add	sp, #56	; 0x38
     dc8:	bd80      	pop	{r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	20000610 	.word	0x20000610
     dd0:	20000644 	.word	0x20000644
     dd4:	20000648 	.word	0x20000648
     dd8:	00017fe7 	.word	0x00017fe7
     ddc:	20000584 	.word	0x20000584
     de0:	00017d67 	.word	0x00017d67
     de4:	00012b05 	.word	0x00012b05
     de8:	00017d31 	.word	0x00017d31

00000dec <checkExists>:
uint8_t checkExists(char *number)
{
     dec:	b580      	push	{r7, lr}
     dee:	b08a      	sub	sp, #40	; 0x28
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     df4:	4b33      	ldr	r3, [pc, #204]	; (ec4 <checkExists+0xd8>)
     df6:	789b      	ldrb	r3, [r3, #2]
     df8:	2b00      	cmp	r3, #0
     dfa:	d039      	beq.n	e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     dfc:	2327      	movs	r3, #39	; 0x27
     dfe:	18fb      	adds	r3, r7, r3
     e00:	2200      	movs	r2, #0
     e02:	701a      	strb	r2, [r3, #0]
     e04:	e02d      	b.n	e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     e06:	4b30      	ldr	r3, [pc, #192]	; (ec8 <checkExists+0xdc>)
     e08:	223c      	movs	r2, #60	; 0x3c
     e0a:	2100      	movs	r1, #0
     e0c:	0018      	movs	r0, r3
     e0e:	4b2f      	ldr	r3, [pc, #188]	; (ecc <checkExists+0xe0>)
     e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     e12:	2327      	movs	r3, #39	; 0x27
     e14:	18fb      	adds	r3, r7, r3
     e16:	781b      	ldrb	r3, [r3, #0]
     e18:	3309      	adds	r3, #9
     e1a:	b2db      	uxtb	r3, r3
     e1c:	4a2a      	ldr	r2, [pc, #168]	; (ec8 <checkExists+0xdc>)
     e1e:	0011      	movs	r1, r2
     e20:	0018      	movs	r0, r3
     e22:	4b2b      	ldr	r3, [pc, #172]	; (ed0 <checkExists+0xe4>)
     e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     e26:	230c      	movs	r3, #12
     e28:	18fa      	adds	r2, r7, r3
     e2a:	4b27      	ldr	r3, [pc, #156]	; (ec8 <checkExists+0xdc>)
     e2c:	0010      	movs	r0, r2
     e2e:	0019      	movs	r1, r3
     e30:	2318      	movs	r3, #24
     e32:	001a      	movs	r2, r3
     e34:	4b27      	ldr	r3, [pc, #156]	; (ed4 <checkExists+0xe8>)
     e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
     e38:	230c      	movs	r3, #12
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	1d1a      	adds	r2, r3, #4
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	0011      	movs	r1, r2
     e42:	0018      	movs	r0, r3
     e44:	4b24      	ldr	r3, [pc, #144]	; (ed8 <checkExists+0xec>)
     e46:	4798      	blx	r3
     e48:	1e03      	subs	r3, r0, #0
     e4a:	d003      	beq.n	e54 <checkExists+0x68>
			{
				return i;
     e4c:	2327      	movs	r3, #39	; 0x27
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	e032      	b.n	eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     e54:	2327      	movs	r3, #39	; 0x27
     e56:	18fb      	adds	r3, r7, r3
     e58:	781a      	ldrb	r2, [r3, #0]
     e5a:	2327      	movs	r3, #39	; 0x27
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	3201      	adds	r2, #1
     e60:	701a      	strb	r2, [r3, #0]
     e62:	4b18      	ldr	r3, [pc, #96]	; (ec4 <checkExists+0xd8>)
     e64:	789b      	ldrb	r3, [r3, #2]
     e66:	2227      	movs	r2, #39	; 0x27
     e68:	18ba      	adds	r2, r7, r2
     e6a:	7812      	ldrb	r2, [r2, #0]
     e6c:	429a      	cmp	r2, r3
     e6e:	d3ca      	bcc.n	e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	0018      	movs	r0, r3
     e74:	4b19      	ldr	r3, [pc, #100]	; (edc <checkExists+0xf0>)
     e76:	4798      	blx	r3
     e78:	1e03      	subs	r3, r0, #0
     e7a:	d001      	beq.n	e80 <checkExists+0x94>
	{
		return 0xFD;
     e7c:	23fd      	movs	r3, #253	; 0xfd
     e7e:	e01c      	b.n	eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
     e80:	4b17      	ldr	r3, [pc, #92]	; (ee0 <checkExists+0xf4>)
     e82:	789b      	ldrb	r3, [r3, #2]
     e84:	2b00      	cmp	r3, #0
     e86:	d007      	beq.n	e98 <checkExists+0xac>
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	0018      	movs	r0, r3
     e8c:	4b15      	ldr	r3, [pc, #84]	; (ee4 <checkExists+0xf8>)
     e8e:	4798      	blx	r3
     e90:	1e03      	subs	r3, r0, #0
     e92:	d001      	beq.n	e98 <checkExists+0xac>
	{
		return 0xFE;
     e94:	23fe      	movs	r3, #254	; 0xfe
     e96:	e010      	b.n	eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
     e98:	4b13      	ldr	r3, [pc, #76]	; (ee8 <checkExists+0xfc>)
     e9a:	78db      	ldrb	r3, [r3, #3]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d00b      	beq.n	eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
     ea0:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <checkExists+0xf4>)
     ea2:	791b      	ldrb	r3, [r3, #4]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d007      	beq.n	eb8 <checkExists+0xcc>
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	0018      	movs	r0, r3
     eac:	4b0f      	ldr	r3, [pc, #60]	; (eec <checkExists+0x100>)
     eae:	4798      	blx	r3
     eb0:	1e03      	subs	r3, r0, #0
     eb2:	d001      	beq.n	eb8 <checkExists+0xcc>
		{
			return 0xFE;
     eb4:	23fe      	movs	r3, #254	; 0xfe
     eb6:	e000      	b.n	eba <checkExists+0xce>
		}
	}
	return 0xFF;
     eb8:	23ff      	movs	r3, #255	; 0xff
}
     eba:	0018      	movs	r0, r3
     ebc:	46bd      	mov	sp, r7
     ebe:	b00a      	add	sp, #40	; 0x28
     ec0:	bd80      	pop	{r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	20000610 	.word	0x20000610
     ec8:	20000584 	.word	0x20000584
     ecc:	00017d67 	.word	0x00017d67
     ed0:	00012b05 	.word	0x00012b05
     ed4:	00017d31 	.word	0x00017d31
     ed8:	00018027 	.word	0x00018027
     edc:	00000a0d 	.word	0x00000a0d
     ee0:	20000554 	.word	0x20000554
     ee4:	00000a55 	.word	0x00000a55
     ee8:	20000628 	.word	0x20000628
     eec:	00000a91 	.word	0x00000a91

00000ef0 <addNumber>:

bool addNumber(char *number)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	b088      	sub	sp, #32
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     ef8:	4b33      	ldr	r3, [pc, #204]	; (fc8 <addNumber+0xd8>)
     efa:	789a      	ldrb	r2, [r3, #2]
     efc:	4b32      	ldr	r3, [pc, #200]	; (fc8 <addNumber+0xd8>)
     efe:	785b      	ldrb	r3, [r3, #1]
     f00:	429a      	cmp	r2, r3
     f02:	d101      	bne.n	f08 <addNumber+0x18>
	{
		return false;
     f04:	2300      	movs	r3, #0
     f06:	e05a      	b.n	fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	0018      	movs	r0, r3
     f0c:	4b2f      	ldr	r3, [pc, #188]	; (fcc <addNumber+0xdc>)
     f0e:	4798      	blx	r3
     f10:	0003      	movs	r3, r0
     f12:	2bf0      	cmp	r3, #240	; 0xf0
     f14:	d952      	bls.n	fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     f16:	4b2e      	ldr	r3, [pc, #184]	; (fd0 <addNumber+0xe0>)
     f18:	223c      	movs	r2, #60	; 0x3c
     f1a:	2100      	movs	r1, #0
     f1c:	0018      	movs	r0, r3
     f1e:	4b2d      	ldr	r3, [pc, #180]	; (fd4 <addNumber+0xe4>)
     f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f22:	4b29      	ldr	r3, [pc, #164]	; (fc8 <addNumber+0xd8>)
     f24:	789b      	ldrb	r3, [r3, #2]
     f26:	3309      	adds	r3, #9
     f28:	b2db      	uxtb	r3, r3
     f2a:	4a29      	ldr	r2, [pc, #164]	; (fd0 <addNumber+0xe0>)
     f2c:	0011      	movs	r1, r2
     f2e:	0018      	movs	r0, r3
     f30:	4b29      	ldr	r3, [pc, #164]	; (fd8 <addNumber+0xe8>)
     f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     f34:	2308      	movs	r3, #8
     f36:	18fa      	adds	r2, r7, r3
     f38:	4b25      	ldr	r3, [pc, #148]	; (fd0 <addNumber+0xe0>)
     f3a:	0010      	movs	r0, r2
     f3c:	0019      	movs	r1, r3
     f3e:	2318      	movs	r3, #24
     f40:	001a      	movs	r2, r3
     f42:	4b26      	ldr	r3, [pc, #152]	; (fdc <addNumber+0xec>)
     f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     f46:	2308      	movs	r3, #8
     f48:	18fb      	adds	r3, r7, r3
     f4a:	3304      	adds	r3, #4
     f4c:	2214      	movs	r2, #20
     f4e:	2100      	movs	r1, #0
     f50:	0018      	movs	r0, r3
     f52:	4b20      	ldr	r3, [pc, #128]	; (fd4 <addNumber+0xe4>)
     f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
     f56:	687a      	ldr	r2, [r7, #4]
     f58:	2308      	movs	r3, #8
     f5a:	18fb      	adds	r3, r7, r3
     f5c:	3304      	adds	r3, #4
     f5e:	0011      	movs	r1, r2
     f60:	0018      	movs	r0, r3
     f62:	4b1f      	ldr	r3, [pc, #124]	; (fe0 <addNumber+0xf0>)
     f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
     f66:	4a1a      	ldr	r2, [pc, #104]	; (fd0 <addNumber+0xe0>)
     f68:	2308      	movs	r3, #8
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	0010      	movs	r0, r2
     f6e:	0019      	movs	r1, r3
     f70:	2318      	movs	r3, #24
     f72:	001a      	movs	r2, r3
     f74:	4b19      	ldr	r3, [pc, #100]	; (fdc <addNumber+0xec>)
     f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f78:	4b13      	ldr	r3, [pc, #76]	; (fc8 <addNumber+0xd8>)
     f7a:	789b      	ldrb	r3, [r3, #2]
     f7c:	3309      	adds	r3, #9
     f7e:	b2db      	uxtb	r3, r3
     f80:	4a13      	ldr	r2, [pc, #76]	; (fd0 <addNumber+0xe0>)
     f82:	0011      	movs	r1, r2
     f84:	0018      	movs	r0, r3
     f86:	4b17      	ldr	r3, [pc, #92]	; (fe4 <addNumber+0xf4>)
     f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     f8a:	4b17      	ldr	r3, [pc, #92]	; (fe8 <addNumber+0xf8>)
     f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
     f8e:	4b0e      	ldr	r3, [pc, #56]	; (fc8 <addNumber+0xd8>)
     f90:	789b      	ldrb	r3, [r3, #2]
     f92:	3301      	adds	r3, #1
     f94:	b2da      	uxtb	r2, r3
     f96:	4b0c      	ldr	r3, [pc, #48]	; (fc8 <addNumber+0xd8>)
     f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     f9a:	4a0d      	ldr	r2, [pc, #52]	; (fd0 <addNumber+0xe0>)
     f9c:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <addNumber+0xd8>)
     f9e:	0010      	movs	r0, r2
     fa0:	0019      	movs	r1, r3
     fa2:	2308      	movs	r3, #8
     fa4:	001a      	movs	r2, r3
     fa6:	4b0d      	ldr	r3, [pc, #52]	; (fdc <addNumber+0xec>)
     fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     faa:	4b09      	ldr	r3, [pc, #36]	; (fd0 <addNumber+0xe0>)
     fac:	0019      	movs	r1, r3
     fae:	2008      	movs	r0, #8
     fb0:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <addNumber+0xf4>)
     fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     fb4:	4b0c      	ldr	r3, [pc, #48]	; (fe8 <addNumber+0xf8>)
     fb6:	4798      	blx	r3
			
			return true;
     fb8:	2301      	movs	r3, #1
     fba:	e000      	b.n	fbe <addNumber+0xce>
		}
	}
	return false;
     fbc:	2300      	movs	r3, #0
}
     fbe:	0018      	movs	r0, r3
     fc0:	46bd      	mov	sp, r7
     fc2:	b008      	add	sp, #32
     fc4:	bd80      	pop	{r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000610 	.word	0x20000610
     fcc:	00000ded 	.word	0x00000ded
     fd0:	20000584 	.word	0x20000584
     fd4:	00017d67 	.word	0x00017d67
     fd8:	00012b05 	.word	0x00012b05
     fdc:	00017d31 	.word	0x00017d31
     fe0:	00017fe7 	.word	0x00017fe7
     fe4:	000129f9 	.word	0x000129f9
     fe8:	00012ba1 	.word	0x00012ba1

00000fec <removeNumber>:

bool removeNumber(char *numer)
{
     fec:	b590      	push	{r4, r7, lr}
     fee:	b085      	sub	sp, #20
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
     ff4:	4b3d      	ldr	r3, [pc, #244]	; (10ec <removeNumber+0x100>)
     ff6:	789b      	ldrb	r3, [r3, #2]
     ff8:	2b01      	cmp	r3, #1
     ffa:	d801      	bhi.n	1000 <removeNumber+0x14>
	{
		return false;
     ffc:	2300      	movs	r3, #0
     ffe:	e071      	b.n	10e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
    1000:	230e      	movs	r3, #14
    1002:	18fc      	adds	r4, r7, r3
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	0018      	movs	r0, r3
    1008:	4b39      	ldr	r3, [pc, #228]	; (10f0 <removeNumber+0x104>)
    100a:	4798      	blx	r3
    100c:	0003      	movs	r3, r0
    100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
    1010:	4b36      	ldr	r3, [pc, #216]	; (10ec <removeNumber+0x100>)
    1012:	785b      	ldrb	r3, [r3, #1]
    1014:	220e      	movs	r2, #14
    1016:	18ba      	adds	r2, r7, r2
    1018:	7812      	ldrb	r2, [r2, #0]
    101a:	429a      	cmp	r2, r3
    101c:	d261      	bcs.n	10e2 <removeNumber+0xf6>
    101e:	4b33      	ldr	r3, [pc, #204]	; (10ec <removeNumber+0x100>)
    1020:	78db      	ldrb	r3, [r3, #3]
    1022:	220e      	movs	r2, #14
    1024:	18ba      	adds	r2, r7, r2
    1026:	7812      	ldrb	r2, [r2, #0]
    1028:	429a      	cmp	r2, r3
    102a:	d05a      	beq.n	10e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    102c:	230f      	movs	r3, #15
    102e:	18fb      	adds	r3, r7, r3
    1030:	220e      	movs	r2, #14
    1032:	18ba      	adds	r2, r7, r2
    1034:	7812      	ldrb	r2, [r2, #0]
    1036:	701a      	strb	r2, [r3, #0]
    1038:	e022      	b.n	1080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
    103a:	4b2e      	ldr	r3, [pc, #184]	; (10f4 <removeNumber+0x108>)
    103c:	223c      	movs	r2, #60	; 0x3c
    103e:	2100      	movs	r1, #0
    1040:	0018      	movs	r0, r3
    1042:	4b2d      	ldr	r3, [pc, #180]	; (10f8 <removeNumber+0x10c>)
    1044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
    1046:	230f      	movs	r3, #15
    1048:	18fb      	adds	r3, r7, r3
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	330a      	adds	r3, #10
    104e:	b2db      	uxtb	r3, r3
    1050:	4a28      	ldr	r2, [pc, #160]	; (10f4 <removeNumber+0x108>)
    1052:	0011      	movs	r1, r2
    1054:	0018      	movs	r0, r3
    1056:	4b29      	ldr	r3, [pc, #164]	; (10fc <removeNumber+0x110>)
    1058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
    105a:	230f      	movs	r3, #15
    105c:	18fb      	adds	r3, r7, r3
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	3309      	adds	r3, #9
    1062:	b2db      	uxtb	r3, r3
    1064:	4a23      	ldr	r2, [pc, #140]	; (10f4 <removeNumber+0x108>)
    1066:	0011      	movs	r1, r2
    1068:	0018      	movs	r0, r3
    106a:	4b25      	ldr	r3, [pc, #148]	; (1100 <removeNumber+0x114>)
    106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
    106e:	4b25      	ldr	r3, [pc, #148]	; (1104 <removeNumber+0x118>)
    1070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    1072:	230f      	movs	r3, #15
    1074:	18fb      	adds	r3, r7, r3
    1076:	781a      	ldrb	r2, [r3, #0]
    1078:	230f      	movs	r3, #15
    107a:	18fb      	adds	r3, r7, r3
    107c:	3201      	adds	r2, #1
    107e:	701a      	strb	r2, [r3, #0]
    1080:	230f      	movs	r3, #15
    1082:	18fb      	adds	r3, r7, r3
    1084:	781a      	ldrb	r2, [r3, #0]
    1086:	4b19      	ldr	r3, [pc, #100]	; (10ec <removeNumber+0x100>)
    1088:	789b      	ldrb	r3, [r3, #2]
    108a:	3b01      	subs	r3, #1
    108c:	429a      	cmp	r2, r3
    108e:	dbd4      	blt.n	103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
    1090:	4b16      	ldr	r3, [pc, #88]	; (10ec <removeNumber+0x100>)
    1092:	789b      	ldrb	r3, [r3, #2]
    1094:	3b01      	subs	r3, #1
    1096:	b2da      	uxtb	r2, r3
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <removeNumber+0x100>)
    109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
    109c:	4b13      	ldr	r3, [pc, #76]	; (10ec <removeNumber+0x100>)
    109e:	791b      	ldrb	r3, [r3, #4]
    10a0:	220e      	movs	r2, #14
    10a2:	18ba      	adds	r2, r7, r2
    10a4:	7812      	ldrb	r2, [r2, #0]
    10a6:	429a      	cmp	r2, r3
    10a8:	d007      	beq.n	10ba <removeNumber+0xce>
    10aa:	230e      	movs	r3, #14
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	781a      	ldrb	r2, [r3, #0]
    10b0:	4b0e      	ldr	r3, [pc, #56]	; (10ec <removeNumber+0x100>)
    10b2:	789b      	ldrb	r3, [r3, #2]
    10b4:	3b01      	subs	r3, #1
    10b6:	429a      	cmp	r2, r3
    10b8:	dd02      	ble.n	10c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
    10ba:	4b0c      	ldr	r3, [pc, #48]	; (10ec <removeNumber+0x100>)
    10bc:	2201      	movs	r2, #1
    10be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    10c0:	4a0c      	ldr	r2, [pc, #48]	; (10f4 <removeNumber+0x108>)
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <removeNumber+0x100>)
    10c4:	0010      	movs	r0, r2
    10c6:	0019      	movs	r1, r3
    10c8:	2308      	movs	r3, #8
    10ca:	001a      	movs	r2, r3
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <removeNumber+0x11c>)
    10ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    10d0:	4b08      	ldr	r3, [pc, #32]	; (10f4 <removeNumber+0x108>)
    10d2:	0019      	movs	r1, r3
    10d4:	2008      	movs	r0, #8
    10d6:	4b0a      	ldr	r3, [pc, #40]	; (1100 <removeNumber+0x114>)
    10d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <removeNumber+0x118>)
    10dc:	4798      	blx	r3
			return true;
    10de:	2301      	movs	r3, #1
    10e0:	e000      	b.n	10e4 <removeNumber+0xf8>
		}
	}
	return false;
    10e2:	2300      	movs	r3, #0
}
    10e4:	0018      	movs	r0, r3
    10e6:	46bd      	mov	sp, r7
    10e8:	b005      	add	sp, #20
    10ea:	bd90      	pop	{r4, r7, pc}
    10ec:	20000610 	.word	0x20000610
    10f0:	00000ded 	.word	0x00000ded
    10f4:	20000584 	.word	0x20000584
    10f8:	00017d67 	.word	0x00017d67
    10fc:	00012b05 	.word	0x00012b05
    1100:	000129f9 	.word	0x000129f9
    1104:	00012ba1 	.word	0x00012ba1
    1108:	00017d31 	.word	0x00017d31

0000110c <clearNumbers>:

void clearNumbers(bool admin)
{
    110c:	b580      	push	{r7, lr}
    110e:	b082      	sub	sp, #8
    1110:	af00      	add	r7, sp, #0
    1112:	0002      	movs	r2, r0
    1114:	1dfb      	adds	r3, r7, #7
    1116:	701a      	strb	r2, [r3, #0]
	if (admin)
    1118:	1dfb      	adds	r3, r7, #7
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	2b00      	cmp	r3, #0
    111e:	d003      	beq.n	1128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
    1120:	4b28      	ldr	r3, [pc, #160]	; (11c4 <clearNumbers+0xb8>)
    1122:	2200      	movs	r2, #0
    1124:	709a      	strb	r2, [r3, #2]
    1126:	e018      	b.n	115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
    1128:	4b27      	ldr	r3, [pc, #156]	; (11c8 <clearNumbers+0xbc>)
    112a:	223c      	movs	r2, #60	; 0x3c
    112c:	2100      	movs	r1, #0
    112e:	0018      	movs	r0, r3
    1130:	4b26      	ldr	r3, [pc, #152]	; (11cc <clearNumbers+0xc0>)
    1132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
    1134:	4b23      	ldr	r3, [pc, #140]	; (11c4 <clearNumbers+0xb8>)
    1136:	78db      	ldrb	r3, [r3, #3]
    1138:	3309      	adds	r3, #9
    113a:	b2db      	uxtb	r3, r3
    113c:	4a22      	ldr	r2, [pc, #136]	; (11c8 <clearNumbers+0xbc>)
    113e:	0011      	movs	r1, r2
    1140:	0018      	movs	r0, r3
    1142:	4b23      	ldr	r3, [pc, #140]	; (11d0 <clearNumbers+0xc4>)
    1144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
    1146:	4b20      	ldr	r3, [pc, #128]	; (11c8 <clearNumbers+0xbc>)
    1148:	0019      	movs	r1, r3
    114a:	2009      	movs	r0, #9
    114c:	4b21      	ldr	r3, [pc, #132]	; (11d4 <clearNumbers+0xc8>)
    114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1150:	4b21      	ldr	r3, [pc, #132]	; (11d8 <clearNumbers+0xcc>)
    1152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
    1154:	4b1b      	ldr	r3, [pc, #108]	; (11c4 <clearNumbers+0xb8>)
    1156:	2201      	movs	r2, #1
    1158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
    115a:	4b1a      	ldr	r3, [pc, #104]	; (11c4 <clearNumbers+0xb8>)
    115c:	2200      	movs	r2, #0
    115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    1160:	4b18      	ldr	r3, [pc, #96]	; (11c4 <clearNumbers+0xb8>)
    1162:	2201      	movs	r2, #1
    1164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1166:	4a18      	ldr	r2, [pc, #96]	; (11c8 <clearNumbers+0xbc>)
    1168:	4b16      	ldr	r3, [pc, #88]	; (11c4 <clearNumbers+0xb8>)
    116a:	0010      	movs	r0, r2
    116c:	0019      	movs	r1, r3
    116e:	2308      	movs	r3, #8
    1170:	001a      	movs	r2, r3
    1172:	4b1a      	ldr	r3, [pc, #104]	; (11dc <clearNumbers+0xd0>)
    1174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
    1176:	4b13      	ldr	r3, [pc, #76]	; (11c4 <clearNumbers+0xb8>)
    1178:	2200      	movs	r2, #0
    117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    117c:	4b11      	ldr	r3, [pc, #68]	; (11c4 <clearNumbers+0xb8>)
    117e:	2201      	movs	r2, #1
    1180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1182:	4b11      	ldr	r3, [pc, #68]	; (11c8 <clearNumbers+0xbc>)
    1184:	0019      	movs	r1, r3
    1186:	2008      	movs	r0, #8
    1188:	4b12      	ldr	r3, [pc, #72]	; (11d4 <clearNumbers+0xc8>)
    118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    118c:	4b12      	ldr	r3, [pc, #72]	; (11d8 <clearNumbers+0xcc>)
    118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
    1190:	2000      	movs	r0, #0
    1192:	4b13      	ldr	r3, [pc, #76]	; (11e0 <clearNumbers+0xd4>)
    1194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
    1196:	4b13      	ldr	r3, [pc, #76]	; (11e4 <clearNumbers+0xd8>)
    1198:	2200      	movs	r2, #0
    119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    119c:	4a0a      	ldr	r2, [pc, #40]	; (11c8 <clearNumbers+0xbc>)
    119e:	4b11      	ldr	r3, [pc, #68]	; (11e4 <clearNumbers+0xd8>)
    11a0:	0010      	movs	r0, r2
    11a2:	0019      	movs	r1, r3
    11a4:	2318      	movs	r3, #24
    11a6:	001a      	movs	r2, r3
    11a8:	4b0c      	ldr	r3, [pc, #48]	; (11dc <clearNumbers+0xd0>)
    11aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <clearNumbers+0xbc>)
    11ae:	0019      	movs	r1, r3
    11b0:	2018      	movs	r0, #24
    11b2:	4b08      	ldr	r3, [pc, #32]	; (11d4 <clearNumbers+0xc8>)
    11b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    11b6:	4b08      	ldr	r3, [pc, #32]	; (11d8 <clearNumbers+0xcc>)
    11b8:	4798      	blx	r3
}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	46bd      	mov	sp, r7
    11be:	b002      	add	sp, #8
    11c0:	bd80      	pop	{r7, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	20000610 	.word	0x20000610
    11c8:	20000584 	.word	0x20000584
    11cc:	00017d67 	.word	0x00017d67
    11d0:	00012b05 	.word	0x00012b05
    11d4:	000129f9 	.word	0x000129f9
    11d8:	00012ba1 	.word	0x00012ba1
    11dc:	00017d31 	.word	0x00017d31
    11e0:	000011e9 	.word	0x000011e9
    11e4:	20000644 	.word	0x20000644

000011e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	0002      	movs	r2, r0
    11f0:	1dfb      	adds	r3, r7, #7
    11f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
    11f4:	1dfb      	adds	r3, r7, #7
    11f6:	781a      	ldrb	r2, [r3, #0]
    11f8:	4b0a      	ldr	r3, [pc, #40]	; (1224 <saveAlterNumberSetting+0x3c>)
    11fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    11fc:	4a0a      	ldr	r2, [pc, #40]	; (1228 <saveAlterNumberSetting+0x40>)
    11fe:	4b09      	ldr	r3, [pc, #36]	; (1224 <saveAlterNumberSetting+0x3c>)
    1200:	0010      	movs	r0, r2
    1202:	0019      	movs	r1, r3
    1204:	2318      	movs	r3, #24
    1206:	001a      	movs	r2, r3
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <saveAlterNumberSetting+0x44>)
    120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    120c:	4b06      	ldr	r3, [pc, #24]	; (1228 <saveAlterNumberSetting+0x40>)
    120e:	0019      	movs	r1, r3
    1210:	2018      	movs	r0, #24
    1212:	4b07      	ldr	r3, [pc, #28]	; (1230 <saveAlterNumberSetting+0x48>)
    1214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1216:	4b07      	ldr	r3, [pc, #28]	; (1234 <saveAlterNumberSetting+0x4c>)
    1218:	4798      	blx	r3
}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	46bd      	mov	sp, r7
    121e:	b002      	add	sp, #8
    1220:	bd80      	pop	{r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	20000644 	.word	0x20000644
    1228:	20000584 	.word	0x20000584
    122c:	00017d31 	.word	0x00017d31
    1230:	000129f9 	.word	0x000129f9
    1234:	00012ba1 	.word	0x00012ba1

00001238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
    1240:	4b11      	ldr	r3, [pc, #68]	; (1288 <addAlternateNumber+0x50>)
    1242:	789b      	ldrb	r3, [r3, #2]
    1244:	2b00      	cmp	r3, #0
    1246:	d019      	beq.n	127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
    1248:	4b10      	ldr	r3, [pc, #64]	; (128c <addAlternateNumber+0x54>)
    124a:	2201      	movs	r2, #1
    124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
    124e:	687a      	ldr	r2, [r7, #4]
    1250:	4b0f      	ldr	r3, [pc, #60]	; (1290 <addAlternateNumber+0x58>)
    1252:	0011      	movs	r1, r2
    1254:	0018      	movs	r0, r3
    1256:	4b0f      	ldr	r3, [pc, #60]	; (1294 <addAlternateNumber+0x5c>)
    1258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    125a:	4a0f      	ldr	r2, [pc, #60]	; (1298 <addAlternateNumber+0x60>)
    125c:	4b0b      	ldr	r3, [pc, #44]	; (128c <addAlternateNumber+0x54>)
    125e:	0010      	movs	r0, r2
    1260:	0019      	movs	r1, r3
    1262:	2318      	movs	r3, #24
    1264:	001a      	movs	r2, r3
    1266:	4b0d      	ldr	r3, [pc, #52]	; (129c <addAlternateNumber+0x64>)
    1268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <addAlternateNumber+0x60>)
    126c:	0019      	movs	r1, r3
    126e:	2018      	movs	r0, #24
    1270:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <addAlternateNumber+0x68>)
    1272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1274:	4b0b      	ldr	r3, [pc, #44]	; (12a4 <addAlternateNumber+0x6c>)
    1276:	4798      	blx	r3
		
		return true;
    1278:	2301      	movs	r3, #1
    127a:	e000      	b.n	127e <addAlternateNumber+0x46>
	}
	return false;
    127c:	2300      	movs	r3, #0
}
    127e:	0018      	movs	r0, r3
    1280:	46bd      	mov	sp, r7
    1282:	b002      	add	sp, #8
    1284:	bd80      	pop	{r7, pc}
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	20000610 	.word	0x20000610
    128c:	20000644 	.word	0x20000644
    1290:	20000648 	.word	0x20000648
    1294:	00017fe7 	.word	0x00017fe7
    1298:	20000584 	.word	0x20000584
    129c:	00017d31 	.word	0x00017d31
    12a0:	000129f9 	.word	0x000129f9
    12a4:	00012ba1 	.word	0x00012ba1

000012a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
    12a8:	b580      	push	{r7, lr}
    12aa:	b082      	sub	sp, #8
    12ac:	af00      	add	r7, sp, #0
    12ae:	0002      	movs	r2, r0
    12b0:	1dfb      	adds	r3, r7, #7
    12b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
    12b4:	1dfb      	adds	r3, r7, #7
    12b6:	781a      	ldrb	r2, [r3, #0]
    12b8:	4b09      	ldr	r3, [pc, #36]	; (12e0 <saveAutoStartSettings+0x38>)
    12ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    12bc:	4908      	ldr	r1, [pc, #32]	; (12e0 <saveAutoStartSettings+0x38>)
    12be:	4b09      	ldr	r3, [pc, #36]	; (12e4 <saveAutoStartSettings+0x3c>)
    12c0:	222c      	movs	r2, #44	; 0x2c
    12c2:	0018      	movs	r0, r3
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <saveAutoStartSettings+0x40>)
    12c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    12c8:	4b06      	ldr	r3, [pc, #24]	; (12e4 <saveAutoStartSettings+0x3c>)
    12ca:	0019      	movs	r1, r3
    12cc:	201a      	movs	r0, #26
    12ce:	4b07      	ldr	r3, [pc, #28]	; (12ec <saveAutoStartSettings+0x44>)
    12d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    12d2:	4b07      	ldr	r3, [pc, #28]	; (12f0 <saveAutoStartSettings+0x48>)
    12d4:	4798      	blx	r3
}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	b002      	add	sp, #8
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	2000065c 	.word	0x2000065c
    12e4:	20000584 	.word	0x20000584
    12e8:	00017d31 	.word	0x00017d31
    12ec:	000129f9 	.word	0x000129f9
    12f0:	00012ba1 	.word	0x00012ba1

000012f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	af00      	add	r7, sp, #0
    12fa:	0002      	movs	r2, r0
    12fc:	1dbb      	adds	r3, r7, #6
    12fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
    1300:	4b0a      	ldr	r3, [pc, #40]	; (132c <saveAutoStartTimeSettings+0x38>)
    1302:	1dba      	adds	r2, r7, #6
    1304:	8812      	ldrh	r2, [r2, #0]
    1306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1308:	4908      	ldr	r1, [pc, #32]	; (132c <saveAutoStartTimeSettings+0x38>)
    130a:	4b09      	ldr	r3, [pc, #36]	; (1330 <saveAutoStartTimeSettings+0x3c>)
    130c:	222c      	movs	r2, #44	; 0x2c
    130e:	0018      	movs	r0, r3
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <saveAutoStartTimeSettings+0x40>)
    1312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <saveAutoStartTimeSettings+0x3c>)
    1316:	0019      	movs	r1, r3
    1318:	201a      	movs	r0, #26
    131a:	4b07      	ldr	r3, [pc, #28]	; (1338 <saveAutoStartTimeSettings+0x44>)
    131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    131e:	4b07      	ldr	r3, [pc, #28]	; (133c <saveAutoStartTimeSettings+0x48>)
    1320:	4798      	blx	r3
}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	46bd      	mov	sp, r7
    1326:	b002      	add	sp, #8
    1328:	bd80      	pop	{r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	2000065c 	.word	0x2000065c
    1330:	20000584 	.word	0x20000584
    1334:	00017d31 	.word	0x00017d31
    1338:	000129f9 	.word	0x000129f9
    133c:	00012ba1 	.word	0x00012ba1

00001340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
    1346:	0002      	movs	r2, r0
    1348:	1dfb      	adds	r3, r7, #7
    134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <saveDNDSettings+0x38>)
    134e:	1dfa      	adds	r2, r7, #7
    1350:	7812      	ldrb	r2, [r2, #0]
    1352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1354:	4908      	ldr	r1, [pc, #32]	; (1378 <saveDNDSettings+0x38>)
    1356:	4b09      	ldr	r3, [pc, #36]	; (137c <saveDNDSettings+0x3c>)
    1358:	222c      	movs	r2, #44	; 0x2c
    135a:	0018      	movs	r0, r3
    135c:	4b08      	ldr	r3, [pc, #32]	; (1380 <saveDNDSettings+0x40>)
    135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <saveDNDSettings+0x3c>)
    1362:	0019      	movs	r1, r3
    1364:	201a      	movs	r0, #26
    1366:	4b07      	ldr	r3, [pc, #28]	; (1384 <saveDNDSettings+0x44>)
    1368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    136a:	4b07      	ldr	r3, [pc, #28]	; (1388 <saveDNDSettings+0x48>)
    136c:	4798      	blx	r3
}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	46bd      	mov	sp, r7
    1372:	b002      	add	sp, #8
    1374:	bd80      	pop	{r7, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	2000065c 	.word	0x2000065c
    137c:	20000584 	.word	0x20000584
    1380:	00017d31 	.word	0x00017d31
    1384:	000129f9 	.word	0x000129f9
    1388:	00012ba1 	.word	0x00012ba1

0000138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	0002      	movs	r2, r0
    1394:	1dfb      	adds	r3, r7, #7
    1396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
    1398:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <saveResponseSettings+0x38>)
    139a:	1dfa      	adds	r2, r7, #7
    139c:	7812      	ldrb	r2, [r2, #0]
    139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    13a0:	4908      	ldr	r1, [pc, #32]	; (13c4 <saveResponseSettings+0x38>)
    13a2:	4b09      	ldr	r3, [pc, #36]	; (13c8 <saveResponseSettings+0x3c>)
    13a4:	222c      	movs	r2, #44	; 0x2c
    13a6:	0018      	movs	r0, r3
    13a8:	4b08      	ldr	r3, [pc, #32]	; (13cc <saveResponseSettings+0x40>)
    13aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    13ac:	4b06      	ldr	r3, [pc, #24]	; (13c8 <saveResponseSettings+0x3c>)
    13ae:	0019      	movs	r1, r3
    13b0:	201a      	movs	r0, #26
    13b2:	4b07      	ldr	r3, [pc, #28]	; (13d0 <saveResponseSettings+0x44>)
    13b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    13b6:	4b07      	ldr	r3, [pc, #28]	; (13d4 <saveResponseSettings+0x48>)
    13b8:	4798      	blx	r3
}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46bd      	mov	sp, r7
    13be:	b002      	add	sp, #8
    13c0:	bd80      	pop	{r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	2000065c 	.word	0x2000065c
    13c8:	20000584 	.word	0x20000584
    13cc:	00017d31 	.word	0x00017d31
    13d0:	000129f9 	.word	0x000129f9
    13d4:	00012ba1 	.word	0x00012ba1

000013d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
    13d8:	b5b0      	push	{r4, r5, r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	0005      	movs	r5, r0
    13e0:	000c      	movs	r4, r1
    13e2:	0010      	movs	r0, r2
    13e4:	0019      	movs	r1, r3
    13e6:	1dfb      	adds	r3, r7, #7
    13e8:	1c2a      	adds	r2, r5, #0
    13ea:	701a      	strb	r2, [r3, #0]
    13ec:	1dbb      	adds	r3, r7, #6
    13ee:	1c22      	adds	r2, r4, #0
    13f0:	701a      	strb	r2, [r3, #0]
    13f2:	1d7b      	adds	r3, r7, #5
    13f4:	1c02      	adds	r2, r0, #0
    13f6:	701a      	strb	r2, [r3, #0]
    13f8:	1d3b      	adds	r3, r7, #4
    13fa:	1c0a      	adds	r2, r1, #0
    13fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
    13fe:	1dfb      	adds	r3, r7, #7
    1400:	781a      	ldrb	r2, [r3, #0]
    1402:	4b14      	ldr	r3, [pc, #80]	; (1454 <saveNoCallSettings+0x7c>)
    1404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
    1406:	4b13      	ldr	r3, [pc, #76]	; (1454 <saveNoCallSettings+0x7c>)
    1408:	7a5b      	ldrb	r3, [r3, #9]
    140a:	2b00      	cmp	r3, #0
    140c:	d010      	beq.n	1430 <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
    140e:	4b11      	ldr	r3, [pc, #68]	; (1454 <saveNoCallSettings+0x7c>)
    1410:	1dba      	adds	r2, r7, #6
    1412:	7812      	ldrb	r2, [r2, #0]
    1414:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
    1416:	4b0f      	ldr	r3, [pc, #60]	; (1454 <saveNoCallSettings+0x7c>)
    1418:	1d7a      	adds	r2, r7, #5
    141a:	7812      	ldrb	r2, [r2, #0]
    141c:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
    141e:	4b0d      	ldr	r3, [pc, #52]	; (1454 <saveNoCallSettings+0x7c>)
    1420:	1d3a      	adds	r2, r7, #4
    1422:	7812      	ldrb	r2, [r2, #0]
    1424:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <saveNoCallSettings+0x7c>)
    1428:	2218      	movs	r2, #24
    142a:	18ba      	adds	r2, r7, r2
    142c:	7812      	ldrb	r2, [r2, #0]
    142e:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1430:	4908      	ldr	r1, [pc, #32]	; (1454 <saveNoCallSettings+0x7c>)
    1432:	4b09      	ldr	r3, [pc, #36]	; (1458 <saveNoCallSettings+0x80>)
    1434:	222c      	movs	r2, #44	; 0x2c
    1436:	0018      	movs	r0, r3
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <saveNoCallSettings+0x84>)
    143a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <saveNoCallSettings+0x80>)
    143e:	0019      	movs	r1, r3
    1440:	201a      	movs	r0, #26
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <saveNoCallSettings+0x88>)
    1444:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1446:	4b07      	ldr	r3, [pc, #28]	; (1464 <saveNoCallSettings+0x8c>)
    1448:	4798      	blx	r3
}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	46bd      	mov	sp, r7
    144e:	b002      	add	sp, #8
    1450:	bdb0      	pop	{r4, r5, r7, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	2000065c 	.word	0x2000065c
    1458:	20000584 	.word	0x20000584
    145c:	00017d31 	.word	0x00017d31
    1460:	000129f9 	.word	0x000129f9
    1464:	00012ba1 	.word	0x00012ba1

00001468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
    1468:	b580      	push	{r7, lr}
    146a:	b082      	sub	sp, #8
    146c:	af00      	add	r7, sp, #0
    146e:	0002      	movs	r2, r0
    1470:	1dfb      	adds	r3, r7, #7
    1472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
    1474:	1dfb      	adds	r3, r7, #7
    1476:	781a      	ldrb	r2, [r3, #0]
    1478:	4b09      	ldr	r3, [pc, #36]	; (14a0 <saveWaterBypassSettings+0x38>)
    147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    147c:	4908      	ldr	r1, [pc, #32]	; (14a0 <saveWaterBypassSettings+0x38>)
    147e:	4b09      	ldr	r3, [pc, #36]	; (14a4 <saveWaterBypassSettings+0x3c>)
    1480:	222c      	movs	r2, #44	; 0x2c
    1482:	0018      	movs	r0, r3
    1484:	4b08      	ldr	r3, [pc, #32]	; (14a8 <saveWaterBypassSettings+0x40>)
    1486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <saveWaterBypassSettings+0x3c>)
    148a:	0019      	movs	r1, r3
    148c:	201a      	movs	r0, #26
    148e:	4b07      	ldr	r3, [pc, #28]	; (14ac <saveWaterBypassSettings+0x44>)
    1490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1492:	4b07      	ldr	r3, [pc, #28]	; (14b0 <saveWaterBypassSettings+0x48>)
    1494:	4798      	blx	r3
}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	46bd      	mov	sp, r7
    149a:	b002      	add	sp, #8
    149c:	bd80      	pop	{r7, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	2000065c 	.word	0x2000065c
    14a4:	20000584 	.word	0x20000584
    14a8:	00017d31 	.word	0x00017d31
    14ac:	000129f9 	.word	0x000129f9
    14b0:	00012ba1 	.word	0x00012ba1

000014b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	b082      	sub	sp, #8
    14b8:	af00      	add	r7, sp, #0
    14ba:	0002      	movs	r2, r0
    14bc:	1dfb      	adds	r3, r7, #7
    14be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
    14c0:	1dfb      	adds	r3, r7, #7
    14c2:	781a      	ldrb	r2, [r3, #0]
    14c4:	4b09      	ldr	r3, [pc, #36]	; (14ec <savePreventOverFlowSettings+0x38>)
    14c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    14c8:	4908      	ldr	r1, [pc, #32]	; (14ec <savePreventOverFlowSettings+0x38>)
    14ca:	4b09      	ldr	r3, [pc, #36]	; (14f0 <savePreventOverFlowSettings+0x3c>)
    14cc:	222c      	movs	r2, #44	; 0x2c
    14ce:	0018      	movs	r0, r3
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <savePreventOverFlowSettings+0x40>)
    14d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <savePreventOverFlowSettings+0x3c>)
    14d6:	0019      	movs	r1, r3
    14d8:	201a      	movs	r0, #26
    14da:	4b07      	ldr	r3, [pc, #28]	; (14f8 <savePreventOverFlowSettings+0x44>)
    14dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    14de:	4b07      	ldr	r3, [pc, #28]	; (14fc <savePreventOverFlowSettings+0x48>)
    14e0:	4798      	blx	r3
}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	46bd      	mov	sp, r7
    14e6:	b002      	add	sp, #8
    14e8:	bd80      	pop	{r7, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	2000065c 	.word	0x2000065c
    14f0:	20000584 	.word	0x20000584
    14f4:	00017d31 	.word	0x00017d31
    14f8:	000129f9 	.word	0x000129f9
    14fc:	00012ba1 	.word	0x00012ba1

00001500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
    1506:	0002      	movs	r2, r0
    1508:	1dfb      	adds	r3, r7, #7
    150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b64      	cmp	r3, #100	; 0x64
    1512:	d918      	bls.n	1546 <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <setOverloadPer+0x50>)
    1516:	1dfa      	adds	r2, r7, #7
    1518:	7812      	ldrb	r2, [r2, #0]
    151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    151c:	490c      	ldr	r1, [pc, #48]	; (1550 <setOverloadPer+0x50>)
    151e:	4b0d      	ldr	r3, [pc, #52]	; (1554 <setOverloadPer+0x54>)
    1520:	222c      	movs	r2, #44	; 0x2c
    1522:	0018      	movs	r0, r3
    1524:	4b0c      	ldr	r3, [pc, #48]	; (1558 <setOverloadPer+0x58>)
    1526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1528:	4b0a      	ldr	r3, [pc, #40]	; (1554 <setOverloadPer+0x54>)
    152a:	0019      	movs	r1, r3
    152c:	201a      	movs	r0, #26
    152e:	4b0b      	ldr	r3, [pc, #44]	; (155c <setOverloadPer+0x5c>)
    1530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1532:	4b0b      	ldr	r3, [pc, #44]	; (1560 <setOverloadPer+0x60>)
    1534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <setOverloadPer+0x50>)
    1538:	7bdb      	ldrb	r3, [r3, #15]
    153a:	2b00      	cmp	r3, #0
    153c:	d001      	beq.n	1542 <setOverloadPer+0x42>
		{
			calcCurrentValues();
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <setOverloadPer+0x64>)
    1540:	4798      	blx	r3
		}
		return true;
    1542:	2301      	movs	r3, #1
    1544:	e000      	b.n	1548 <setOverloadPer+0x48>
	}
	return false;
    1546:	2300      	movs	r3, #0
}
    1548:	0018      	movs	r0, r3
    154a:	46bd      	mov	sp, r7
    154c:	b002      	add	sp, #8
    154e:	bd80      	pop	{r7, pc}
    1550:	2000065c 	.word	0x2000065c
    1554:	20000584 	.word	0x20000584
    1558:	00017d31 	.word	0x00017d31
    155c:	000129f9 	.word	0x000129f9
    1560:	00012ba1 	.word	0x00012ba1
    1564:	00001709 	.word	0x00001709

00001568 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
    1568:	b580      	push	{r7, lr}
    156a:	b082      	sub	sp, #8
    156c:	af00      	add	r7, sp, #0
    156e:	0002      	movs	r2, r0
    1570:	1dfb      	adds	r3, r7, #7
    1572:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
    1574:	1dfb      	adds	r3, r7, #7
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d01c      	beq.n	15b6 <setUnderloadPer+0x4e>
    157c:	1dfb      	adds	r3, r7, #7
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	2b63      	cmp	r3, #99	; 0x63
    1582:	d818      	bhi.n	15b6 <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
    1584:	4b0e      	ldr	r3, [pc, #56]	; (15c0 <setUnderloadPer+0x58>)
    1586:	1dfa      	adds	r2, r7, #7
    1588:	7812      	ldrb	r2, [r2, #0]
    158a:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    158c:	490c      	ldr	r1, [pc, #48]	; (15c0 <setUnderloadPer+0x58>)
    158e:	4b0d      	ldr	r3, [pc, #52]	; (15c4 <setUnderloadPer+0x5c>)
    1590:	222c      	movs	r2, #44	; 0x2c
    1592:	0018      	movs	r0, r3
    1594:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <setUnderloadPer+0x60>)
    1596:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1598:	4b0a      	ldr	r3, [pc, #40]	; (15c4 <setUnderloadPer+0x5c>)
    159a:	0019      	movs	r1, r3
    159c:	201a      	movs	r0, #26
    159e:	4b0b      	ldr	r3, [pc, #44]	; (15cc <setUnderloadPer+0x64>)
    15a0:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    15a2:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <setUnderloadPer+0x68>)
    15a4:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
    15a6:	4b06      	ldr	r3, [pc, #24]	; (15c0 <setUnderloadPer+0x58>)
    15a8:	7bdb      	ldrb	r3, [r3, #15]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d001      	beq.n	15b2 <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <setUnderloadPer+0x6c>)
    15b0:	4798      	blx	r3
		}
		return true;
    15b2:	2301      	movs	r3, #1
    15b4:	e000      	b.n	15b8 <setUnderloadPer+0x50>
	}
	return false;
    15b6:	2300      	movs	r3, #0
}
    15b8:	0018      	movs	r0, r3
    15ba:	46bd      	mov	sp, r7
    15bc:	b002      	add	sp, #8
    15be:	bd80      	pop	{r7, pc}
    15c0:	2000065c 	.word	0x2000065c
    15c4:	20000584 	.word	0x20000584
    15c8:	00017d31 	.word	0x00017d31
    15cc:	000129f9 	.word	0x000129f9
    15d0:	00012ba1 	.word	0x00012ba1
    15d4:	00001709 	.word	0x00001709

000015d8 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	0002      	movs	r2, r0
    15e0:	1dfb      	adds	r3, r7, #7
    15e2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
    15e4:	1dfb      	adds	r3, r7, #7
    15e6:	7819      	ldrb	r1, [r3, #0]
    15e8:	4b09      	ldr	r3, [pc, #36]	; (1610 <saveSinglePhasingSettings+0x38>)
    15ea:	2220      	movs	r2, #32
    15ec:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    15ee:	4908      	ldr	r1, [pc, #32]	; (1610 <saveSinglePhasingSettings+0x38>)
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <saveSinglePhasingSettings+0x3c>)
    15f2:	222c      	movs	r2, #44	; 0x2c
    15f4:	0018      	movs	r0, r3
    15f6:	4b08      	ldr	r3, [pc, #32]	; (1618 <saveSinglePhasingSettings+0x40>)
    15f8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    15fa:	4b06      	ldr	r3, [pc, #24]	; (1614 <saveSinglePhasingSettings+0x3c>)
    15fc:	0019      	movs	r1, r3
    15fe:	201a      	movs	r0, #26
    1600:	4b06      	ldr	r3, [pc, #24]	; (161c <saveSinglePhasingSettings+0x44>)
    1602:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <saveSinglePhasingSettings+0x48>)
    1606:	4798      	blx	r3
}
    1608:	46c0      	nop			; (mov r8, r8)
    160a:	46bd      	mov	sp, r7
    160c:	b002      	add	sp, #8
    160e:	bd80      	pop	{r7, pc}
    1610:	2000065c 	.word	0x2000065c
    1614:	20000584 	.word	0x20000584
    1618:	00017d31 	.word	0x00017d31
    161c:	000129f9 	.word	0x000129f9
    1620:	00012ba1 	.word	0x00012ba1

00001624 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
    162a:	0002      	movs	r2, r0
    162c:	1dbb      	adds	r3, r7, #6
    162e:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <saveSinglePhasingVoltage+0x38>)
    1632:	1dba      	adds	r2, r7, #6
    1634:	8812      	ldrh	r2, [r2, #0]
    1636:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1638:	4908      	ldr	r1, [pc, #32]	; (165c <saveSinglePhasingVoltage+0x38>)
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <saveSinglePhasingVoltage+0x3c>)
    163c:	222c      	movs	r2, #44	; 0x2c
    163e:	0018      	movs	r0, r3
    1640:	4b08      	ldr	r3, [pc, #32]	; (1664 <saveSinglePhasingVoltage+0x40>)
    1642:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <saveSinglePhasingVoltage+0x3c>)
    1646:	0019      	movs	r1, r3
    1648:	201a      	movs	r0, #26
    164a:	4b07      	ldr	r3, [pc, #28]	; (1668 <saveSinglePhasingVoltage+0x44>)
    164c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    164e:	4b07      	ldr	r3, [pc, #28]	; (166c <saveSinglePhasingVoltage+0x48>)
    1650:	4798      	blx	r3
}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	46bd      	mov	sp, r7
    1656:	b002      	add	sp, #8
    1658:	bd80      	pop	{r7, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	2000065c 	.word	0x2000065c
    1660:	20000584 	.word	0x20000584
    1664:	00017d31 	.word	0x00017d31
    1668:	000129f9 	.word	0x000129f9
    166c:	00012ba1 	.word	0x00012ba1

00001670 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	0002      	movs	r2, r0
    1678:	1dfb      	adds	r3, r7, #7
    167a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
    167c:	1dfb      	adds	r3, r7, #7
    167e:	7819      	ldrb	r1, [r3, #0]
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <savePhaseSequenceProtectionSettings+0x38>)
    1682:	2224      	movs	r2, #36	; 0x24
    1684:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1686:	4908      	ldr	r1, [pc, #32]	; (16a8 <savePhaseSequenceProtectionSettings+0x38>)
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <savePhaseSequenceProtectionSettings+0x3c>)
    168a:	222c      	movs	r2, #44	; 0x2c
    168c:	0018      	movs	r0, r3
    168e:	4b08      	ldr	r3, [pc, #32]	; (16b0 <savePhaseSequenceProtectionSettings+0x40>)
    1690:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <savePhaseSequenceProtectionSettings+0x3c>)
    1694:	0019      	movs	r1, r3
    1696:	201a      	movs	r0, #26
    1698:	4b06      	ldr	r3, [pc, #24]	; (16b4 <savePhaseSequenceProtectionSettings+0x44>)
    169a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    169c:	4b06      	ldr	r3, [pc, #24]	; (16b8 <savePhaseSequenceProtectionSettings+0x48>)
    169e:	4798      	blx	r3
}
    16a0:	46c0      	nop			; (mov r8, r8)
    16a2:	46bd      	mov	sp, r7
    16a4:	b002      	add	sp, #8
    16a6:	bd80      	pop	{r7, pc}
    16a8:	2000065c 	.word	0x2000065c
    16ac:	20000584 	.word	0x20000584
    16b0:	00017d31 	.word	0x00017d31
    16b4:	000129f9 	.word	0x000129f9
    16b8:	00012ba1 	.word	0x00012ba1

000016bc <saveMotorFeedbackDetectionSettings>:


void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b082      	sub	sp, #8
    16c0:	af00      	add	r7, sp, #0
    16c2:	0002      	movs	r2, r0
    16c4:	1dfb      	adds	r3, r7, #7
    16c6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
    16c8:	4b0a      	ldr	r3, [pc, #40]	; (16f4 <saveMotorFeedbackDetectionSettings+0x38>)
    16ca:	1dfa      	adds	r2, r7, #7
    16cc:	2125      	movs	r1, #37	; 0x25
    16ce:	7812      	ldrb	r2, [r2, #0]
    16d0:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    16d2:	4908      	ldr	r1, [pc, #32]	; (16f4 <saveMotorFeedbackDetectionSettings+0x38>)
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <saveMotorFeedbackDetectionSettings+0x3c>)
    16d6:	222c      	movs	r2, #44	; 0x2c
    16d8:	0018      	movs	r0, r3
    16da:	4b08      	ldr	r3, [pc, #32]	; (16fc <saveMotorFeedbackDetectionSettings+0x40>)
    16dc:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    16de:	4b06      	ldr	r3, [pc, #24]	; (16f8 <saveMotorFeedbackDetectionSettings+0x3c>)
    16e0:	0019      	movs	r1, r3
    16e2:	201a      	movs	r0, #26
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <saveMotorFeedbackDetectionSettings+0x44>)
    16e6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <saveMotorFeedbackDetectionSettings+0x48>)
    16ea:	4798      	blx	r3
}
    16ec:	46c0      	nop			; (mov r8, r8)
    16ee:	46bd      	mov	sp, r7
    16f0:	b002      	add	sp, #8
    16f2:	bd80      	pop	{r7, pc}
    16f4:	2000065c 	.word	0x2000065c
    16f8:	20000584 	.word	0x20000584
    16fc:	00017d31 	.word	0x00017d31
    1700:	000129f9 	.word	0x000129f9
    1704:	00012ba1 	.word	0x00012ba1

00001708 <calcCurrentValues>:


void calcCurrentValues(void)
{
    1708:	b590      	push	{r4, r7, lr}
    170a:	b083      	sub	sp, #12
    170c:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
    170e:	4b2b      	ldr	r3, [pc, #172]	; (17bc <calcCurrentValues+0xb4>)
    1710:	691a      	ldr	r2, [r3, #16]
    1712:	4b2b      	ldr	r3, [pc, #172]	; (17c0 <calcCurrentValues+0xb8>)
    1714:	0010      	movs	r0, r2
    1716:	4798      	blx	r3
    1718:	1c04      	adds	r4, r0, #0
    171a:	4b28      	ldr	r3, [pc, #160]	; (17bc <calcCurrentValues+0xb4>)
    171c:	7f1a      	ldrb	r2, [r3, #28]
    171e:	4b28      	ldr	r3, [pc, #160]	; (17c0 <calcCurrentValues+0xb8>)
    1720:	0010      	movs	r0, r2
    1722:	4798      	blx	r3
    1724:	1c02      	adds	r2, r0, #0
    1726:	4b27      	ldr	r3, [pc, #156]	; (17c4 <calcCurrentValues+0xbc>)
    1728:	1c11      	adds	r1, r2, #0
    172a:	1c20      	adds	r0, r4, #0
    172c:	4798      	blx	r3
    172e:	1c03      	adds	r3, r0, #0
    1730:	1c1a      	adds	r2, r3, #0
    1732:	4b25      	ldr	r3, [pc, #148]	; (17c8 <calcCurrentValues+0xc0>)
    1734:	1c10      	adds	r0, r2, #0
    1736:	4798      	blx	r3
    1738:	4c24      	ldr	r4, [pc, #144]	; (17cc <calcCurrentValues+0xc4>)
    173a:	2200      	movs	r2, #0
    173c:	4b24      	ldr	r3, [pc, #144]	; (17d0 <calcCurrentValues+0xc8>)
    173e:	47a0      	blx	r4
    1740:	0003      	movs	r3, r0
    1742:	000c      	movs	r4, r1
    1744:	0019      	movs	r1, r3
    1746:	0022      	movs	r2, r4
    1748:	1dbc      	adds	r4, r7, #6
    174a:	4b22      	ldr	r3, [pc, #136]	; (17d4 <calcCurrentValues+0xcc>)
    174c:	0008      	movs	r0, r1
    174e:	0011      	movs	r1, r2
    1750:	4798      	blx	r3
    1752:	0003      	movs	r3, r0
    1754:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
    1756:	1dbb      	adds	r3, r7, #6
    1758:	881b      	ldrh	r3, [r3, #0]
    175a:	0018      	movs	r0, r3
    175c:	4b1e      	ldr	r3, [pc, #120]	; (17d8 <calcCurrentValues+0xd0>)
    175e:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
    1760:	4b16      	ldr	r3, [pc, #88]	; (17bc <calcCurrentValues+0xb4>)
    1762:	691a      	ldr	r2, [r3, #16]
    1764:	4b16      	ldr	r3, [pc, #88]	; (17c0 <calcCurrentValues+0xb8>)
    1766:	0010      	movs	r0, r2
    1768:	4798      	blx	r3
    176a:	1c04      	adds	r4, r0, #0
    176c:	4b13      	ldr	r3, [pc, #76]	; (17bc <calcCurrentValues+0xb4>)
    176e:	7f5a      	ldrb	r2, [r3, #29]
    1770:	4b13      	ldr	r3, [pc, #76]	; (17c0 <calcCurrentValues+0xb8>)
    1772:	0010      	movs	r0, r2
    1774:	4798      	blx	r3
    1776:	1c02      	adds	r2, r0, #0
    1778:	4b12      	ldr	r3, [pc, #72]	; (17c4 <calcCurrentValues+0xbc>)
    177a:	1c11      	adds	r1, r2, #0
    177c:	1c20      	adds	r0, r4, #0
    177e:	4798      	blx	r3
    1780:	1c03      	adds	r3, r0, #0
    1782:	1c1a      	adds	r2, r3, #0
    1784:	4b10      	ldr	r3, [pc, #64]	; (17c8 <calcCurrentValues+0xc0>)
    1786:	1c10      	adds	r0, r2, #0
    1788:	4798      	blx	r3
    178a:	4c10      	ldr	r4, [pc, #64]	; (17cc <calcCurrentValues+0xc4>)
    178c:	2200      	movs	r2, #0
    178e:	4b10      	ldr	r3, [pc, #64]	; (17d0 <calcCurrentValues+0xc8>)
    1790:	47a0      	blx	r4
    1792:	0003      	movs	r3, r0
    1794:	000c      	movs	r4, r1
    1796:	0019      	movs	r1, r3
    1798:	0022      	movs	r2, r4
    179a:	1dbc      	adds	r4, r7, #6
    179c:	4b0d      	ldr	r3, [pc, #52]	; (17d4 <calcCurrentValues+0xcc>)
    179e:	0008      	movs	r0, r1
    17a0:	0011      	movs	r1, r2
    17a2:	4798      	blx	r3
    17a4:	0003      	movs	r3, r0
    17a6:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
    17a8:	1dbb      	adds	r3, r7, #6
    17aa:	881b      	ldrh	r3, [r3, #0]
    17ac:	0018      	movs	r0, r3
    17ae:	4b0b      	ldr	r3, [pc, #44]	; (17dc <calcCurrentValues+0xd4>)
    17b0:	4798      	blx	r3
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	b003      	add	sp, #12
    17b8:	bd90      	pop	{r4, r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	2000065c 	.word	0x2000065c
    17c0:	00015f79 	.word	0x00015f79
    17c4:	00015d39 	.word	0x00015d39
    17c8:	00017b55 	.word	0x00017b55
    17cc:	00016625 	.word	0x00016625
    17d0:	40590000 	.word	0x40590000
    17d4:	000158ed 	.word	0x000158ed
    17d8:	000017e1 	.word	0x000017e1
    17dc:	00001825 	.word	0x00001825

000017e0 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b082      	sub	sp, #8
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
    17e8:	4b09      	ldr	r3, [pc, #36]	; (1810 <setUnderloadValue+0x30>)
    17ea:	687a      	ldr	r2, [r7, #4]
    17ec:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    17ee:	4908      	ldr	r1, [pc, #32]	; (1810 <setUnderloadValue+0x30>)
    17f0:	4b08      	ldr	r3, [pc, #32]	; (1814 <setUnderloadValue+0x34>)
    17f2:	222c      	movs	r2, #44	; 0x2c
    17f4:	0018      	movs	r0, r3
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <setUnderloadValue+0x38>)
    17f8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <setUnderloadValue+0x34>)
    17fc:	0019      	movs	r1, r3
    17fe:	201a      	movs	r0, #26
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <setUnderloadValue+0x3c>)
    1802:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <setUnderloadValue+0x40>)
    1806:	4798      	blx	r3
}
    1808:	46c0      	nop			; (mov r8, r8)
    180a:	46bd      	mov	sp, r7
    180c:	b002      	add	sp, #8
    180e:	bd80      	pop	{r7, pc}
    1810:	2000065c 	.word	0x2000065c
    1814:	20000584 	.word	0x20000584
    1818:	00017d31 	.word	0x00017d31
    181c:	000129f9 	.word	0x000129f9
    1820:	00012ba1 	.word	0x00012ba1

00001824 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
    1824:	b580      	push	{r7, lr}
    1826:	b082      	sub	sp, #8
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
    182c:	4b09      	ldr	r3, [pc, #36]	; (1854 <setOverloadValue+0x30>)
    182e:	687a      	ldr	r2, [r7, #4]
    1830:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1832:	4908      	ldr	r1, [pc, #32]	; (1854 <setOverloadValue+0x30>)
    1834:	4b08      	ldr	r3, [pc, #32]	; (1858 <setOverloadValue+0x34>)
    1836:	222c      	movs	r2, #44	; 0x2c
    1838:	0018      	movs	r0, r3
    183a:	4b08      	ldr	r3, [pc, #32]	; (185c <setOverloadValue+0x38>)
    183c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    183e:	4b06      	ldr	r3, [pc, #24]	; (1858 <setOverloadValue+0x34>)
    1840:	0019      	movs	r1, r3
    1842:	201a      	movs	r0, #26
    1844:	4b06      	ldr	r3, [pc, #24]	; (1860 <setOverloadValue+0x3c>)
    1846:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <setOverloadValue+0x40>)
    184a:	4798      	blx	r3
}
    184c:	46c0      	nop			; (mov r8, r8)
    184e:	46bd      	mov	sp, r7
    1850:	b002      	add	sp, #8
    1852:	bd80      	pop	{r7, pc}
    1854:	2000065c 	.word	0x2000065c
    1858:	20000584 	.word	0x20000584
    185c:	00017d31 	.word	0x00017d31
    1860:	000129f9 	.word	0x000129f9
    1864:	00012ba1 	.word	0x00012ba1

00001868 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
    1868:	b580      	push	{r7, lr}
    186a:	b082      	sub	sp, #8
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
    1870:	4b09      	ldr	r3, [pc, #36]	; (1898 <setNormalLoadValue+0x30>)
    1872:	687a      	ldr	r2, [r7, #4]
    1874:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1876:	4908      	ldr	r1, [pc, #32]	; (1898 <setNormalLoadValue+0x30>)
    1878:	4b08      	ldr	r3, [pc, #32]	; (189c <setNormalLoadValue+0x34>)
    187a:	222c      	movs	r2, #44	; 0x2c
    187c:	0018      	movs	r0, r3
    187e:	4b08      	ldr	r3, [pc, #32]	; (18a0 <setNormalLoadValue+0x38>)
    1880:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1882:	4b06      	ldr	r3, [pc, #24]	; (189c <setNormalLoadValue+0x34>)
    1884:	0019      	movs	r1, r3
    1886:	201a      	movs	r0, #26
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <setNormalLoadValue+0x3c>)
    188a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <setNormalLoadValue+0x40>)
    188e:	4798      	blx	r3
}
    1890:	46c0      	nop			; (mov r8, r8)
    1892:	46bd      	mov	sp, r7
    1894:	b002      	add	sp, #8
    1896:	bd80      	pop	{r7, pc}
    1898:	2000065c 	.word	0x2000065c
    189c:	20000584 	.word	0x20000584
    18a0:	00017d31 	.word	0x00017d31
    18a4:	000129f9 	.word	0x000129f9
    18a8:	00012ba1 	.word	0x00012ba1

000018ac <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	0002      	movs	r2, r0
    18b4:	1dfb      	adds	r3, r7, #7
    18b6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
    18b8:	1dfb      	adds	r3, r7, #7
    18ba:	781a      	ldrb	r2, [r3, #0]
    18bc:	4b09      	ldr	r3, [pc, #36]	; (18e4 <setCurrentDetection+0x38>)
    18be:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    18c0:	4908      	ldr	r1, [pc, #32]	; (18e4 <setCurrentDetection+0x38>)
    18c2:	4b09      	ldr	r3, [pc, #36]	; (18e8 <setCurrentDetection+0x3c>)
    18c4:	222c      	movs	r2, #44	; 0x2c
    18c6:	0018      	movs	r0, r3
    18c8:	4b08      	ldr	r3, [pc, #32]	; (18ec <setCurrentDetection+0x40>)
    18ca:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <setCurrentDetection+0x3c>)
    18ce:	0019      	movs	r1, r3
    18d0:	201a      	movs	r0, #26
    18d2:	4b07      	ldr	r3, [pc, #28]	; (18f0 <setCurrentDetection+0x44>)
    18d4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    18d6:	4b07      	ldr	r3, [pc, #28]	; (18f4 <setCurrentDetection+0x48>)
    18d8:	4798      	blx	r3
}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	46bd      	mov	sp, r7
    18de:	b002      	add	sp, #8
    18e0:	bd80      	pop	{r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	2000065c 	.word	0x2000065c
    18e8:	20000584 	.word	0x20000584
    18ec:	00017d31 	.word	0x00017d31
    18f0:	000129f9 	.word	0x000129f9
    18f4:	00012ba1 	.word	0x00012ba1

000018f8 <saveStarDeltaTimer>:
	strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
    18f8:	b580      	push	{r7, lr}
    18fa:	b082      	sub	sp, #8
    18fc:	af00      	add	r7, sp, #0
    18fe:	0002      	movs	r2, r0
    1900:	1dbb      	adds	r3, r7, #6
    1902:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
    1904:	4b0a      	ldr	r3, [pc, #40]	; (1930 <saveStarDeltaTimer+0x38>)
    1906:	1dba      	adds	r2, r7, #6
    1908:	8812      	ldrh	r2, [r2, #0]
    190a:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    190c:	4908      	ldr	r1, [pc, #32]	; (1930 <saveStarDeltaTimer+0x38>)
    190e:	4b09      	ldr	r3, [pc, #36]	; (1934 <saveStarDeltaTimer+0x3c>)
    1910:	222c      	movs	r2, #44	; 0x2c
    1912:	0018      	movs	r0, r3
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <saveStarDeltaTimer+0x40>)
    1916:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1918:	4b06      	ldr	r3, [pc, #24]	; (1934 <saveStarDeltaTimer+0x3c>)
    191a:	0019      	movs	r1, r3
    191c:	201a      	movs	r0, #26
    191e:	4b07      	ldr	r3, [pc, #28]	; (193c <saveStarDeltaTimer+0x44>)
    1920:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1922:	4b07      	ldr	r3, [pc, #28]	; (1940 <saveStarDeltaTimer+0x48>)
    1924:	4798      	blx	r3
}
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	46bd      	mov	sp, r7
    192a:	b002      	add	sp, #8
    192c:	bd80      	pop	{r7, pc}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	2000065c 	.word	0x2000065c
    1934:	20000584 	.word	0x20000584
    1938:	00017d31 	.word	0x00017d31
    193c:	000129f9 	.word	0x000129f9
    1940:	00012ba1 	.word	0x00012ba1

00001944 <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	0002      	movs	r2, r0
    194c:	1dfb      	adds	r3, r7, #7
    194e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <saveEventStageSettings+0x38>)
    1952:	1dfa      	adds	r2, r7, #7
    1954:	7812      	ldrb	r2, [r2, #0]
    1956:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1958:	4908      	ldr	r1, [pc, #32]	; (197c <saveEventStageSettings+0x38>)
    195a:	4b09      	ldr	r3, [pc, #36]	; (1980 <saveEventStageSettings+0x3c>)
    195c:	222c      	movs	r2, #44	; 0x2c
    195e:	0018      	movs	r0, r3
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <saveEventStageSettings+0x40>)
    1962:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <saveEventStageSettings+0x3c>)
    1966:	0019      	movs	r1, r3
    1968:	201a      	movs	r0, #26
    196a:	4b07      	ldr	r3, [pc, #28]	; (1988 <saveEventStageSettings+0x44>)
    196c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    196e:	4b07      	ldr	r3, [pc, #28]	; (198c <saveEventStageSettings+0x48>)
    1970:	4798      	blx	r3
}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	46bd      	mov	sp, r7
    1976:	b002      	add	sp, #8
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	2000065c 	.word	0x2000065c
    1980:	20000584 	.word	0x20000584
    1984:	00017d31 	.word	0x00017d31
    1988:	000129f9 	.word	0x000129f9
    198c:	00012ba1 	.word	0x00012ba1

00001990 <isAdmin>:

bool isAdmin(char *number)
{
    1990:	b580      	push	{r7, lr}
    1992:	b08a      	sub	sp, #40	; 0x28
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
    1998:	2327      	movs	r3, #39	; 0x27
    199a:	18fb      	adds	r3, r7, r3
    199c:	2200      	movs	r2, #0
    199e:	701a      	strb	r2, [r3, #0]
    19a0:	e02b      	b.n	19fa <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
    19a2:	4b1b      	ldr	r3, [pc, #108]	; (1a10 <isAdmin+0x80>)
    19a4:	223c      	movs	r2, #60	; 0x3c
    19a6:	2100      	movs	r1, #0
    19a8:	0018      	movs	r0, r3
    19aa:	4b1a      	ldr	r3, [pc, #104]	; (1a14 <isAdmin+0x84>)
    19ac:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
    19ae:	2327      	movs	r3, #39	; 0x27
    19b0:	18fb      	adds	r3, r7, r3
    19b2:	781b      	ldrb	r3, [r3, #0]
    19b4:	3303      	adds	r3, #3
    19b6:	b2db      	uxtb	r3, r3
    19b8:	4a15      	ldr	r2, [pc, #84]	; (1a10 <isAdmin+0x80>)
    19ba:	0011      	movs	r1, r2
    19bc:	0018      	movs	r0, r3
    19be:	4b16      	ldr	r3, [pc, #88]	; (1a18 <isAdmin+0x88>)
    19c0:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
    19c2:	230c      	movs	r3, #12
    19c4:	18fa      	adds	r2, r7, r3
    19c6:	4b12      	ldr	r3, [pc, #72]	; (1a10 <isAdmin+0x80>)
    19c8:	0010      	movs	r0, r2
    19ca:	0019      	movs	r1, r3
    19cc:	2318      	movs	r3, #24
    19ce:	001a      	movs	r2, r3
    19d0:	4b12      	ldr	r3, [pc, #72]	; (1a1c <isAdmin+0x8c>)
    19d2:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
    19d4:	230c      	movs	r3, #12
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	1d1a      	adds	r2, r3, #4
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	0011      	movs	r1, r2
    19de:	0018      	movs	r0, r3
    19e0:	4b0f      	ldr	r3, [pc, #60]	; (1a20 <isAdmin+0x90>)
    19e2:	4798      	blx	r3
    19e4:	1e03      	subs	r3, r0, #0
    19e6:	d001      	beq.n	19ec <isAdmin+0x5c>
		{
			return true;
    19e8:	2301      	movs	r3, #1
    19ea:	e00c      	b.n	1a06 <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
    19ec:	2327      	movs	r3, #39	; 0x27
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	781a      	ldrb	r2, [r3, #0]
    19f2:	2327      	movs	r3, #39	; 0x27
    19f4:	18fb      	adds	r3, r7, r3
    19f6:	3201      	adds	r2, #1
    19f8:	701a      	strb	r2, [r3, #0]
    19fa:	2327      	movs	r3, #39	; 0x27
    19fc:	18fb      	adds	r3, r7, r3
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b04      	cmp	r3, #4
    1a02:	d9ce      	bls.n	19a2 <isAdmin+0x12>
		}
	}
	return false;
    1a04:	2300      	movs	r3, #0
}
    1a06:	0018      	movs	r0, r3
    1a08:	46bd      	mov	sp, r7
    1a0a:	b00a      	add	sp, #40	; 0x28
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	20000584 	.word	0x20000584
    1a14:	00017d67 	.word	0x00017d67
    1a18:	00012b05 	.word	0x00012b05
    1a1c:	00017d31 	.word	0x00017d31
    1a20:	00018027 	.word	0x00018027

00001a24 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	0002      	movs	r2, r0
    1a2c:	1dfb      	adds	r3, r7, #7
    1a2e:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <setPrimaryNumberIndex+0x3c>)
    1a32:	1dfa      	adds	r2, r7, #7
    1a34:	7812      	ldrb	r2, [r2, #0]
    1a36:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a38:	4a0a      	ldr	r2, [pc, #40]	; (1a64 <setPrimaryNumberIndex+0x40>)
    1a3a:	4b09      	ldr	r3, [pc, #36]	; (1a60 <setPrimaryNumberIndex+0x3c>)
    1a3c:	0010      	movs	r0, r2
    1a3e:	0019      	movs	r1, r3
    1a40:	2308      	movs	r3, #8
    1a42:	001a      	movs	r2, r3
    1a44:	4b08      	ldr	r3, [pc, #32]	; (1a68 <setPrimaryNumberIndex+0x44>)
    1a46:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <setPrimaryNumberIndex+0x40>)
    1a4a:	0019      	movs	r1, r3
    1a4c:	2008      	movs	r0, #8
    1a4e:	4b07      	ldr	r3, [pc, #28]	; (1a6c <setPrimaryNumberIndex+0x48>)
    1a50:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1a52:	4b07      	ldr	r3, [pc, #28]	; (1a70 <setPrimaryNumberIndex+0x4c>)
    1a54:	4798      	blx	r3

}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	46bd      	mov	sp, r7
    1a5a:	b002      	add	sp, #8
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	20000610 	.word	0x20000610
    1a64:	20000584 	.word	0x20000584
    1a68:	00017d31 	.word	0x00017d31
    1a6c:	000129f9 	.word	0x000129f9
    1a70:	00012ba1 	.word	0x00012ba1

00001a74 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	0002      	movs	r2, r0
    1a7c:	1dfb      	adds	r3, r7, #7
    1a7e:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
    1a80:	4b0b      	ldr	r3, [pc, #44]	; (1ab0 <setSecondaryNumberIndex+0x3c>)
    1a82:	1dfa      	adds	r2, r7, #7
    1a84:	7812      	ldrb	r2, [r2, #0]
    1a86:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a88:	4a0a      	ldr	r2, [pc, #40]	; (1ab4 <setSecondaryNumberIndex+0x40>)
    1a8a:	4b09      	ldr	r3, [pc, #36]	; (1ab0 <setSecondaryNumberIndex+0x3c>)
    1a8c:	0010      	movs	r0, r2
    1a8e:	0019      	movs	r1, r3
    1a90:	2308      	movs	r3, #8
    1a92:	001a      	movs	r2, r3
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <setSecondaryNumberIndex+0x44>)
    1a96:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a98:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <setSecondaryNumberIndex+0x40>)
    1a9a:	0019      	movs	r1, r3
    1a9c:	2008      	movs	r0, #8
    1a9e:	4b07      	ldr	r3, [pc, #28]	; (1abc <setSecondaryNumberIndex+0x48>)
    1aa0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1aa2:	4b07      	ldr	r3, [pc, #28]	; (1ac0 <setSecondaryNumberIndex+0x4c>)
    1aa4:	4798      	blx	r3
}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	46bd      	mov	sp, r7
    1aaa:	b002      	add	sp, #8
    1aac:	bd80      	pop	{r7, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	20000610 	.word	0x20000610
    1ab4:	20000584 	.word	0x20000584
    1ab8:	00017d31 	.word	0x00017d31
    1abc:	000129f9 	.word	0x000129f9
    1ac0:	00012ba1 	.word	0x00012ba1

00001ac4 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
    1ac4:	b590      	push	{r4, r7, lr}
    1ac6:	b085      	sub	sp, #20
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1acc:	230e      	movs	r3, #14
    1ace:	18fc      	adds	r4, r7, r3
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b21      	ldr	r3, [pc, #132]	; (1b5c <addPrimaryIndexedNumber+0x98>)
    1ad6:	4798      	blx	r3
    1ad8:	0003      	movs	r3, r0
    1ada:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
    1adc:	230f      	movs	r3, #15
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	22ff      	movs	r2, #255	; 0xff
    1ae2:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
    1ae4:	4b1e      	ldr	r3, [pc, #120]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1ae6:	785b      	ldrb	r3, [r3, #1]
    1ae8:	220e      	movs	r2, #14
    1aea:	18ba      	adds	r2, r7, r2
    1aec:	7812      	ldrb	r2, [r2, #0]
    1aee:	429a      	cmp	r2, r3
    1af0:	d309      	bcc.n	1b06 <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
    1af2:	230f      	movs	r3, #15
    1af4:	18fb      	adds	r3, r7, r3
    1af6:	4a1a      	ldr	r2, [pc, #104]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1af8:	7892      	ldrb	r2, [r2, #2]
    1afa:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	0018      	movs	r0, r3
    1b00:	4b18      	ldr	r3, [pc, #96]	; (1b64 <addPrimaryIndexedNumber+0xa0>)
    1b02:	4798      	blx	r3
    1b04:	e00c      	b.n	1b20 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
    1b06:	4b16      	ldr	r3, [pc, #88]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b08:	785b      	ldrb	r3, [r3, #1]
    1b0a:	220e      	movs	r2, #14
    1b0c:	18ba      	adds	r2, r7, r2
    1b0e:	7812      	ldrb	r2, [r2, #0]
    1b10:	429a      	cmp	r2, r3
    1b12:	d205      	bcs.n	1b20 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
    1b14:	230f      	movs	r3, #15
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	220e      	movs	r2, #14
    1b1a:	18ba      	adds	r2, r7, r2
    1b1c:	7812      	ldrb	r2, [r2, #0]
    1b1e:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
    1b20:	4b0f      	ldr	r3, [pc, #60]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b22:	785b      	ldrb	r3, [r3, #1]
    1b24:	220f      	movs	r2, #15
    1b26:	18ba      	adds	r2, r7, r2
    1b28:	7812      	ldrb	r2, [r2, #0]
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d210      	bcs.n	1b50 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
    1b2e:	4b0c      	ldr	r3, [pc, #48]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b30:	789b      	ldrb	r3, [r3, #2]
    1b32:	2b01      	cmp	r3, #1
    1b34:	d904      	bls.n	1b40 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
    1b36:	4b0a      	ldr	r3, [pc, #40]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b38:	78db      	ldrb	r3, [r3, #3]
    1b3a:	0018      	movs	r0, r3
    1b3c:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <addPrimaryIndexedNumber+0xa4>)
    1b3e:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
    1b40:	230f      	movs	r3, #15
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	0018      	movs	r0, r3
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <addPrimaryIndexedNumber+0xa8>)
    1b4a:	4798      	blx	r3
		return true;
    1b4c:	2301      	movs	r3, #1
    1b4e:	e000      	b.n	1b52 <addPrimaryIndexedNumber+0x8e>
	}

	return false;
    1b50:	2300      	movs	r3, #0
}
    1b52:	0018      	movs	r0, r3
    1b54:	46bd      	mov	sp, r7
    1b56:	b005      	add	sp, #20
    1b58:	bd90      	pop	{r4, r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	00000ded 	.word	0x00000ded
    1b60:	20000610 	.word	0x20000610
    1b64:	00000ef1 	.word	0x00000ef1
    1b68:	00001a75 	.word	0x00001a75
    1b6c:	00001a25 	.word	0x00001a25

00001b70 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
    1b70:	b590      	push	{r4, r7, lr}
    1b72:	b085      	sub	sp, #20
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
    1b78:	4b21      	ldr	r3, [pc, #132]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1b7a:	789b      	ldrb	r3, [r3, #2]
    1b7c:	2b01      	cmp	r3, #1
    1b7e:	d801      	bhi.n	1b84 <addSecondaryIndexedNumber+0x14>
	return false;
    1b80:	2300      	movs	r3, #0
    1b82:	e039      	b.n	1bf8 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1b84:	230e      	movs	r3, #14
    1b86:	18fc      	adds	r4, r7, r3
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b1d      	ldr	r3, [pc, #116]	; (1c04 <addSecondaryIndexedNumber+0x94>)
    1b8e:	4798      	blx	r3
    1b90:	0003      	movs	r3, r0
    1b92:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
    1b94:	230f      	movs	r3, #15
    1b96:	18fb      	adds	r3, r7, r3
    1b98:	22ff      	movs	r2, #255	; 0xff
    1b9a:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
    1b9c:	4b18      	ldr	r3, [pc, #96]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1b9e:	785b      	ldrb	r3, [r3, #1]
    1ba0:	220e      	movs	r2, #14
    1ba2:	18ba      	adds	r2, r7, r2
    1ba4:	7812      	ldrb	r2, [r2, #0]
    1ba6:	429a      	cmp	r2, r3
    1ba8:	d309      	bcc.n	1bbe <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
    1baa:	230f      	movs	r3, #15
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	4a14      	ldr	r2, [pc, #80]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bb0:	7892      	ldrb	r2, [r2, #2]
    1bb2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	0018      	movs	r0, r3
    1bb8:	4b13      	ldr	r3, [pc, #76]	; (1c08 <addSecondaryIndexedNumber+0x98>)
    1bba:	4798      	blx	r3
    1bbc:	e00c      	b.n	1bd8 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
    1bbe:	4b10      	ldr	r3, [pc, #64]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bc0:	785b      	ldrb	r3, [r3, #1]
    1bc2:	220e      	movs	r2, #14
    1bc4:	18ba      	adds	r2, r7, r2
    1bc6:	7812      	ldrb	r2, [r2, #0]
    1bc8:	429a      	cmp	r2, r3
    1bca:	d205      	bcs.n	1bd8 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
    1bcc:	230f      	movs	r3, #15
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	220e      	movs	r2, #14
    1bd2:	18ba      	adds	r2, r7, r2
    1bd4:	7812      	ldrb	r2, [r2, #0]
    1bd6:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
    1bd8:	4b09      	ldr	r3, [pc, #36]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bda:	785b      	ldrb	r3, [r3, #1]
    1bdc:	220f      	movs	r2, #15
    1bde:	18ba      	adds	r2, r7, r2
    1be0:	7812      	ldrb	r2, [r2, #0]
    1be2:	429a      	cmp	r2, r3
    1be4:	d207      	bcs.n	1bf6 <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
    1be6:	230f      	movs	r3, #15
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	781b      	ldrb	r3, [r3, #0]
    1bec:	0018      	movs	r0, r3
    1bee:	4b07      	ldr	r3, [pc, #28]	; (1c0c <addSecondaryIndexedNumber+0x9c>)
    1bf0:	4798      	blx	r3
		return true;
    1bf2:	2301      	movs	r3, #1
    1bf4:	e000      	b.n	1bf8 <addSecondaryIndexedNumber+0x88>
	}
	return false;
    1bf6:	2300      	movs	r3, #0
}
    1bf8:	0018      	movs	r0, r3
    1bfa:	46bd      	mov	sp, r7
    1bfc:	b005      	add	sp, #20
    1bfe:	bd90      	pop	{r4, r7, pc}
    1c00:	20000610 	.word	0x20000610
    1c04:	00000ded 	.word	0x00000ded
    1c08:	00000ef1 	.word	0x00000ef1
    1c0c:	00001a75 	.word	0x00001a75

00001c10 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b082      	sub	sp, #8
    1c14:	af00      	add	r7, sp, #0
    1c16:	0002      	movs	r2, r0
    1c18:	1dfb      	adds	r3, r7, #7
    1c1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c1c:	4b06      	ldr	r3, [pc, #24]	; (1c38 <system_interrupt_enable+0x28>)
    1c1e:	1dfa      	adds	r2, r7, #7
    1c20:	7812      	ldrb	r2, [r2, #0]
    1c22:	0011      	movs	r1, r2
    1c24:	221f      	movs	r2, #31
    1c26:	400a      	ands	r2, r1
    1c28:	2101      	movs	r1, #1
    1c2a:	4091      	lsls	r1, r2
    1c2c:	000a      	movs	r2, r1
    1c2e:	601a      	str	r2, [r3, #0]
}
    1c30:	46c0      	nop			; (mov r8, r8)
    1c32:	46bd      	mov	sp, r7
    1c34:	b002      	add	sp, #8
    1c36:	bd80      	pop	{r7, pc}
    1c38:	e000e100 	.word	0xe000e100

00001c3c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1c3c:	b580      	push	{r7, lr}
    1c3e:	b082      	sub	sp, #8
    1c40:	af00      	add	r7, sp, #0
    1c42:	0002      	movs	r2, r0
    1c44:	1dfb      	adds	r3, r7, #7
    1c46:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c48:	4a07      	ldr	r2, [pc, #28]	; (1c68 <system_interrupt_disable+0x2c>)
    1c4a:	1dfb      	adds	r3, r7, #7
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	0019      	movs	r1, r3
    1c50:	231f      	movs	r3, #31
    1c52:	400b      	ands	r3, r1
    1c54:	2101      	movs	r1, #1
    1c56:	4099      	lsls	r1, r3
    1c58:	000b      	movs	r3, r1
    1c5a:	0019      	movs	r1, r3
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	50d1      	str	r1, [r2, r3]
}
    1c60:	46c0      	nop			; (mov r8, r8)
    1c62:	46bd      	mov	sp, r7
    1c64:	b002      	add	sp, #8
    1c66:	bd80      	pop	{r7, pc}
    1c68:	e000e100 	.word	0xe000e100

00001c6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
    1c72:	0002      	movs	r2, r0
    1c74:	1dfb      	adds	r3, r7, #7
    1c76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c78:	230f      	movs	r3, #15
    1c7a:	18fb      	adds	r3, r7, r3
    1c7c:	1dfa      	adds	r2, r7, #7
    1c7e:	7812      	ldrb	r2, [r2, #0]
    1c80:	09d2      	lsrs	r2, r2, #7
    1c82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c84:	230e      	movs	r3, #14
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	1dfa      	adds	r2, r7, #7
    1c8a:	7812      	ldrb	r2, [r2, #0]
    1c8c:	0952      	lsrs	r2, r2, #5
    1c8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c90:	4b0d      	ldr	r3, [pc, #52]	; (1cc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1c94:	230f      	movs	r3, #15
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	781b      	ldrb	r3, [r3, #0]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d10f      	bne.n	1cbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c9e:	230f      	movs	r3, #15
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	009b      	lsls	r3, r3, #2
    1ca6:	2210      	movs	r2, #16
    1ca8:	4694      	mov	ip, r2
    1caa:	44bc      	add	ip, r7
    1cac:	4463      	add	r3, ip
    1cae:	3b08      	subs	r3, #8
    1cb0:	681a      	ldr	r2, [r3, #0]
    1cb2:	230e      	movs	r3, #14
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	01db      	lsls	r3, r3, #7
    1cba:	18d3      	adds	r3, r2, r3
    1cbc:	e000      	b.n	1cc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1cbe:	2300      	movs	r3, #0
	}
}
    1cc0:	0018      	movs	r0, r3
    1cc2:	46bd      	mov	sp, r7
    1cc4:	b004      	add	sp, #16
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	41004400 	.word	0x41004400

00001ccc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b082      	sub	sp, #8
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	0002      	movs	r2, r0
    1cd4:	1dfb      	adds	r3, r7, #7
    1cd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1cd8:	1dfb      	adds	r3, r7, #7
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	0018      	movs	r0, r3
    1cde:	4b03      	ldr	r3, [pc, #12]	; (1cec <port_get_group_from_gpio_pin+0x20>)
    1ce0:	4798      	blx	r3
    1ce2:	0003      	movs	r3, r0
}
    1ce4:	0018      	movs	r0, r3
    1ce6:	46bd      	mov	sp, r7
    1ce8:	b002      	add	sp, #8
    1cea:	bd80      	pop	{r7, pc}
    1cec:	00001c6d 	.word	0x00001c6d

00001cf0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	2200      	movs	r2, #0
    1cfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	2201      	movs	r2, #1
    1d02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	2200      	movs	r2, #0
    1d08:	709a      	strb	r2, [r3, #2]
}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	46bd      	mov	sp, r7
    1d0e:	b002      	add	sp, #8
    1d10:	bd80      	pop	{r7, pc}
	...

00001d14 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b084      	sub	sp, #16
    1d18:	af00      	add	r7, sp, #0
    1d1a:	0002      	movs	r2, r0
    1d1c:	1dfb      	adds	r3, r7, #7
    1d1e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1d20:	1dfb      	adds	r3, r7, #7
    1d22:	781b      	ldrb	r3, [r3, #0]
    1d24:	0018      	movs	r0, r3
    1d26:	4b0b      	ldr	r3, [pc, #44]	; (1d54 <port_pin_get_input_level+0x40>)
    1d28:	4798      	blx	r3
    1d2a:	0003      	movs	r3, r0
    1d2c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d2e:	1dfb      	adds	r3, r7, #7
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	221f      	movs	r2, #31
    1d34:	4013      	ands	r3, r2
    1d36:	2201      	movs	r2, #1
    1d38:	409a      	lsls	r2, r3
    1d3a:	0013      	movs	r3, r2
    1d3c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	6a1b      	ldr	r3, [r3, #32]
    1d42:	68ba      	ldr	r2, [r7, #8]
    1d44:	4013      	ands	r3, r2
    1d46:	1e5a      	subs	r2, r3, #1
    1d48:	4193      	sbcs	r3, r2
    1d4a:	b2db      	uxtb	r3, r3
}
    1d4c:	0018      	movs	r0, r3
    1d4e:	46bd      	mov	sp, r7
    1d50:	b004      	add	sp, #16
    1d52:	bd80      	pop	{r7, pc}
    1d54:	00001ccd 	.word	0x00001ccd

00001d58 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b084      	sub	sp, #16
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	0002      	movs	r2, r0
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	701a      	strb	r2, [r3, #0]
    1d64:	1dbb      	adds	r3, r7, #6
    1d66:	1c0a      	adds	r2, r1, #0
    1d68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1d6a:	1dfb      	adds	r3, r7, #7
    1d6c:	781b      	ldrb	r3, [r3, #0]
    1d6e:	0018      	movs	r0, r3
    1d70:	4b0d      	ldr	r3, [pc, #52]	; (1da8 <port_pin_set_output_level+0x50>)
    1d72:	4798      	blx	r3
    1d74:	0003      	movs	r3, r0
    1d76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d78:	1dfb      	adds	r3, r7, #7
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	221f      	movs	r2, #31
    1d7e:	4013      	ands	r3, r2
    1d80:	2201      	movs	r2, #1
    1d82:	409a      	lsls	r2, r3
    1d84:	0013      	movs	r3, r2
    1d86:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1d88:	1dbb      	adds	r3, r7, #6
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d003      	beq.n	1d98 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1d90:	68fb      	ldr	r3, [r7, #12]
    1d92:	68ba      	ldr	r2, [r7, #8]
    1d94:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1d96:	e002      	b.n	1d9e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1d98:	68fb      	ldr	r3, [r7, #12]
    1d9a:	68ba      	ldr	r2, [r7, #8]
    1d9c:	615a      	str	r2, [r3, #20]
}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	46bd      	mov	sp, r7
    1da2:	b004      	add	sp, #16
    1da4:	bd80      	pop	{r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001ccd 	.word	0x00001ccd

00001dac <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b084      	sub	sp, #16
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1dba:	68fb      	ldr	r3, [r7, #12]
    1dbc:	69db      	ldr	r3, [r3, #28]
    1dbe:	1e5a      	subs	r2, r3, #1
    1dc0:	4193      	sbcs	r3, r2
    1dc2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1dc4:	0018      	movs	r0, r3
    1dc6:	46bd      	mov	sp, r7
    1dc8:	b004      	add	sp, #16
    1dca:	bd80      	pop	{r7, pc}

00001dcc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	b082      	sub	sp, #8
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	0018      	movs	r0, r3
    1dda:	4b04      	ldr	r3, [pc, #16]	; (1dec <_usart_wait_for_sync+0x20>)
    1ddc:	4798      	blx	r3
    1dde:	1e03      	subs	r3, r0, #0
    1de0:	d1f9      	bne.n	1dd6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46bd      	mov	sp, r7
    1de6:	b002      	add	sp, #8
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001dad 	.word	0x00001dad

00001df0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b082      	sub	sp, #8
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	2280      	movs	r2, #128	; 0x80
    1dfc:	05d2      	lsls	r2, r2, #23
    1dfe:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	2200      	movs	r2, #0
    1e04:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	22ff      	movs	r2, #255	; 0xff
    1e0a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	2200      	movs	r2, #0
    1e10:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	2200      	movs	r2, #0
    1e16:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	2296      	movs	r2, #150	; 0x96
    1e1c:	0192      	lsls	r2, r2, #6
    1e1e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	2224      	movs	r2, #36	; 0x24
    1e24:	2101      	movs	r1, #1
    1e26:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	2225      	movs	r2, #37	; 0x25
    1e2c:	2101      	movs	r1, #1
    1e2e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	2226      	movs	r2, #38	; 0x26
    1e34:	2100      	movs	r1, #0
    1e36:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2227      	movs	r2, #39	; 0x27
    1e3c:	2100      	movs	r1, #0
    1e3e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	2200      	movs	r2, #0
    1e44:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	2288      	movs	r2, #136	; 0x88
    1e4a:	0352      	lsls	r2, r2, #13
    1e4c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	222c      	movs	r2, #44	; 0x2c
    1e52:	2100      	movs	r1, #0
    1e54:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	222d      	movs	r2, #45	; 0x2d
    1e5a:	2100      	movs	r1, #0
    1e5c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	2200      	movs	r2, #0
    1e62:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	2200      	movs	r2, #0
    1e68:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	2200      	movs	r2, #0
    1e6e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	2200      	movs	r2, #0
    1e74:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	2200      	movs	r2, #0
    1e7a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	2200      	movs	r2, #0
    1e80:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2200      	movs	r2, #0
    1e86:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	2200      	movs	r2, #0
    1e8c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	2200      	movs	r2, #0
    1e92:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	2200      	movs	r2, #0
    1e98:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	2213      	movs	r2, #19
    1e9e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	2200      	movs	r2, #0
    1ea4:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	46bd      	mov	sp, r7
    1eaa:	b002      	add	sp, #8
    1eac:	bd80      	pop	{r7, pc}
	...

00001eb0 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1eb0:	b580      	push	{r7, lr}
    1eb2:	b084      	sub	sp, #16
    1eb4:	af00      	add	r7, sp, #0
    1eb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	681b      	ldr	r3, [r3, #0]
    1ec2:	0018      	movs	r0, r3
    1ec4:	4b09      	ldr	r3, [pc, #36]	; (1eec <usart_enable+0x3c>)
    1ec6:	4798      	blx	r3
    1ec8:	0003      	movs	r3, r0
    1eca:	0018      	movs	r0, r3
    1ecc:	4b08      	ldr	r3, [pc, #32]	; (1ef0 <usart_enable+0x40>)
    1ece:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	0018      	movs	r0, r3
    1ed4:	4b07      	ldr	r3, [pc, #28]	; (1ef4 <usart_enable+0x44>)
    1ed6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2202      	movs	r2, #2
    1ede:	431a      	orrs	r2, r3
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	601a      	str	r2, [r3, #0]
}
    1ee4:	46c0      	nop			; (mov r8, r8)
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b004      	add	sp, #16
    1eea:	bd80      	pop	{r7, pc}
    1eec:	00011265 	.word	0x00011265
    1ef0:	00001c11 	.word	0x00001c11
    1ef4:	00001dcd 	.word	0x00001dcd

00001ef8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b084      	sub	sp, #16
    1efc:	af00      	add	r7, sp, #0
    1efe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b0a      	ldr	r3, [pc, #40]	; (1f38 <usart_disable+0x40>)
    1f0e:	4798      	blx	r3
    1f10:	0003      	movs	r3, r0
    1f12:	0018      	movs	r0, r3
    1f14:	4b09      	ldr	r3, [pc, #36]	; (1f3c <usart_disable+0x44>)
    1f16:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	0018      	movs	r0, r3
    1f1c:	4b08      	ldr	r3, [pc, #32]	; (1f40 <usart_disable+0x48>)
    1f1e:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1f20:	68fb      	ldr	r3, [r7, #12]
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	2202      	movs	r2, #2
    1f26:	4393      	bics	r3, r2
    1f28:	001a      	movs	r2, r3
    1f2a:	68fb      	ldr	r3, [r7, #12]
    1f2c:	601a      	str	r2, [r3, #0]
}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	46bd      	mov	sp, r7
    1f32:	b004      	add	sp, #16
    1f34:	bd80      	pop	{r7, pc}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	00011265 	.word	0x00011265
    1f3c:	00001c3d 	.word	0x00001c3d
    1f40:	00001dcd 	.word	0x00001dcd

00001f44 <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b084      	sub	sp, #16
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f4c:	687b      	ldr	r3, [r7, #4]
    1f4e:	681b      	ldr	r3, [r3, #0]
    1f50:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
    1f52:	687b      	ldr	r3, [r7, #4]
    1f54:	0018      	movs	r0, r3
    1f56:	4b06      	ldr	r3, [pc, #24]	; (1f70 <usart_reset+0x2c>)
    1f58:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b05      	ldr	r3, [pc, #20]	; (1f74 <usart_reset+0x30>)
    1f60:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    1f62:	68fb      	ldr	r3, [r7, #12]
    1f64:	2201      	movs	r2, #1
    1f66:	601a      	str	r2, [r3, #0]
}
    1f68:	46c0      	nop			; (mov r8, r8)
    1f6a:	46bd      	mov	sp, r7
    1f6c:	b004      	add	sp, #16
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	00001ef9 	.word	0x00001ef9
    1f74:	00001dcd 	.word	0x00001dcd

00001f78 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
}
    1f80:	46c0      	nop			; (mov r8, r8)
    1f82:	46bd      	mov	sp, r7
    1f84:	b002      	add	sp, #8
    1f86:	bd80      	pop	{r7, pc}

00001f88 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	b082      	sub	sp, #8
    1f8c:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1f8e:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <Flush_RX_Buffer+0x2c>)
    1f90:	681b      	ldr	r3, [r3, #0]
    1f92:	1cf9      	adds	r1, r7, #3
    1f94:	2200      	movs	r2, #0
    1f96:	0018      	movs	r0, r3
    1f98:	4b07      	ldr	r3, [pc, #28]	; (1fb8 <Flush_RX_Buffer+0x30>)
    1f9a:	4798      	blx	r3
    1f9c:	0003      	movs	r3, r0
    1f9e:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d000      	beq.n	1fa8 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1fa6:	e7f2      	b.n	1f8e <Flush_RX_Buffer+0x6>
		{
			break;
    1fa8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	46bd      	mov	sp, r7
    1fae:	b002      	add	sp, #8
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	20000224 	.word	0x20000224
    1fb8:	0000e601 	.word	0x0000e601

00001fbc <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
    1fbc:	b590      	push	{r4, r7, lr}
    1fbe:	b085      	sub	sp, #20
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	0002      	movs	r2, r0
    1fc4:	1dfb      	adds	r3, r7, #7
    1fc6:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
    1fc8:	4b18      	ldr	r3, [pc, #96]	; (202c <STACK_SIZE+0x2c>)
    1fca:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
    1fcc:	68fb      	ldr	r3, [r7, #12]
    1fce:	7e1b      	ldrb	r3, [r3, #24]
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	001a      	movs	r2, r3
    1fd4:	2304      	movs	r3, #4
    1fd6:	4013      	ands	r3, r2
    1fd8:	d023      	beq.n	2022 <STACK_SIZE+0x22>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
    1fda:	68fb      	ldr	r3, [r7, #12]
    1fdc:	8b5b      	ldrh	r3, [r3, #26]
    1fde:	b29b      	uxth	r3, r3
    1fe0:	b2da      	uxtb	r2, r3
    1fe2:	230b      	movs	r3, #11
    1fe4:	18fb      	adds	r3, r7, r3
    1fe6:	2106      	movs	r1, #6
    1fe8:	400a      	ands	r2, r1
    1fea:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
    1fec:	230b      	movs	r3, #11
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	781b      	ldrb	r3, [r3, #0]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d006      	beq.n	2004 <STACK_SIZE+0x4>
		{
			usart_hw->STATUS.reg = rx_error;
    1ff6:	230b      	movs	r3, #11
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	b29a      	uxth	r2, r3
    1ffe:	68fb      	ldr	r3, [r7, #12]
    2000:	835a      	strh	r2, [r3, #26]
			//lastGSMCommandTime=xTaskGetTickCountFromISR();
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
		}
	}
}
    2002:	e00e      	b.n	2022 <STACK_SIZE+0x22>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2004:	68fb      	ldr	r3, [r7, #12]
    2006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2008:	b29b      	uxth	r3, r3
    200a:	b2da      	uxtb	r2, r3
    200c:	230a      	movs	r3, #10
    200e:	18fb      	adds	r3, r7, r3
    2010:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
    2012:	4b07      	ldr	r3, [pc, #28]	; (2030 <STACK_SIZE+0x30>)
    2014:	6818      	ldr	r0, [r3, #0]
    2016:	230a      	movs	r3, #10
    2018:	18f9      	adds	r1, r7, r3
    201a:	2300      	movs	r3, #0
    201c:	2200      	movs	r2, #0
    201e:	4c05      	ldr	r4, [pc, #20]	; (2034 <STACK_SIZE+0x34>)
    2020:	47a0      	blx	r4
}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	46bd      	mov	sp, r7
    2026:	b005      	add	sp, #20
    2028:	bd90      	pop	{r4, r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	42001400 	.word	0x42001400
    2030:	20000224 	.word	0x20000224
    2034:	0000e4e1 	.word	0x0000e4e1

00002038 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
    2038:	b580      	push	{r7, lr}
    203a:	af00      	add	r7, sp, #0
	isRinging = port_pin_get_input_level(GSM_RING_PIN);
    203c:	2031      	movs	r0, #49	; 0x31
    203e:	4b04      	ldr	r3, [pc, #16]	; (2050 <gsm_ring_detect_pin_callback+0x18>)
    2040:	4798      	blx	r3
    2042:	0003      	movs	r3, r0
    2044:	001a      	movs	r2, r3
    2046:	4b03      	ldr	r3, [pc, #12]	; (2054 <gsm_ring_detect_pin_callback+0x1c>)
    2048:	701a      	strb	r2, [r3, #0]
}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	46bd      	mov	sp, r7
    204e:	bd80      	pop	{r7, pc}
    2050:	00001d15 	.word	0x00001d15
    2054:	2000021c 	.word	0x2000021c

00002058 <gsm_init>:

void gsm_init(void)
{
    2058:	b590      	push	{r4, r7, lr}
    205a:	b097      	sub	sp, #92	; 0x5c
    205c:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
    205e:	234c      	movs	r3, #76	; 0x4c
    2060:	18fb      	adds	r3, r7, r3
    2062:	0018      	movs	r0, r3
    2064:	4b4d      	ldr	r3, [pc, #308]	; (219c <gsm_init+0x144>)
    2066:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
    2068:	234c      	movs	r3, #76	; 0x4c
    206a:	18fb      	adds	r3, r7, r3
    206c:	2201      	movs	r2, #1
    206e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
    2070:	234c      	movs	r3, #76	; 0x4c
    2072:	18fb      	adds	r3, r7, r3
    2074:	0019      	movs	r1, r3
    2076:	2014      	movs	r0, #20
    2078:	4b49      	ldr	r3, [pc, #292]	; (21a0 <gsm_init+0x148>)
    207a:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
    207c:	2100      	movs	r1, #0
    207e:	2014      	movs	r0, #20
    2080:	4b48      	ldr	r3, [pc, #288]	; (21a4 <gsm_init+0x14c>)
    2082:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    2084:	2340      	movs	r3, #64	; 0x40
    2086:	18fb      	adds	r3, r7, r3
    2088:	0018      	movs	r0, r3
    208a:	4b47      	ldr	r3, [pc, #284]	; (21a8 <gsm_init+0x150>)
    208c:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
    208e:	2340      	movs	r3, #64	; 0x40
    2090:	18fb      	adds	r3, r7, r3
    2092:	2231      	movs	r2, #49	; 0x31
    2094:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
    2096:	2340      	movs	r3, #64	; 0x40
    2098:	18fb      	adds	r3, r7, r3
    209a:	2200      	movs	r2, #0
    209c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    209e:	2340      	movs	r3, #64	; 0x40
    20a0:	18fb      	adds	r3, r7, r3
    20a2:	2201      	movs	r2, #1
    20a4:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    20a6:	2340      	movs	r3, #64	; 0x40
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	2203      	movs	r2, #3
    20ac:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
    20ae:	2340      	movs	r3, #64	; 0x40
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	0019      	movs	r1, r3
    20b4:	2001      	movs	r0, #1
    20b6:	4b3d      	ldr	r3, [pc, #244]	; (21ac <gsm_init+0x154>)
    20b8:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    20ba:	2100      	movs	r1, #0
    20bc:	2001      	movs	r0, #1
    20be:	4b3c      	ldr	r3, [pc, #240]	; (21b0 <gsm_init+0x158>)
    20c0:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    20c2:	4b3c      	ldr	r3, [pc, #240]	; (21b4 <gsm_init+0x15c>)
    20c4:	2200      	movs	r2, #0
    20c6:	2101      	movs	r1, #1
    20c8:	0018      	movs	r0, r3
    20ca:	4b3b      	ldr	r3, [pc, #236]	; (21b8 <gsm_init+0x160>)
    20cc:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
    20ce:	2200      	movs	r2, #0
    20d0:	2101      	movs	r1, #1
    20d2:	20f0      	movs	r0, #240	; 0xf0
    20d4:	4b39      	ldr	r3, [pc, #228]	; (21bc <gsm_init+0x164>)
    20d6:	4798      	blx	r3
    20d8:	0002      	movs	r2, r0
    20da:	4b39      	ldr	r3, [pc, #228]	; (21c0 <gsm_init+0x168>)
    20dc:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    20de:	4939      	ldr	r1, [pc, #228]	; (21c4 <gsm_init+0x16c>)
    20e0:	4839      	ldr	r0, [pc, #228]	; (21c8 <gsm_init+0x170>)
    20e2:	4b3a      	ldr	r3, [pc, #232]	; (21cc <gsm_init+0x174>)
    20e4:	9300      	str	r3, [sp, #0]
    20e6:	2300      	movs	r3, #0
    20e8:	2200      	movs	r2, #0
    20ea:	4c39      	ldr	r4, [pc, #228]	; (21d0 <gsm_init+0x178>)
    20ec:	47a0      	blx	r4
    20ee:	0002      	movs	r2, r0
    20f0:	4b38      	ldr	r3, [pc, #224]	; (21d4 <gsm_init+0x17c>)
    20f2:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
    20f4:	2203      	movs	r2, #3
    20f6:	2100      	movs	r1, #0
    20f8:	2001      	movs	r0, #1
    20fa:	4b30      	ldr	r3, [pc, #192]	; (21bc <gsm_init+0x164>)
    20fc:	4798      	blx	r3
    20fe:	0002      	movs	r2, r0
    2100:	4b35      	ldr	r3, [pc, #212]	; (21d8 <gsm_init+0x180>)
    2102:	601a      	str	r2, [r3, #0]
    2104:	4b34      	ldr	r3, [pc, #208]	; (21d8 <gsm_init+0x180>)
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	2b00      	cmp	r3, #0
    210a:	d006      	beq.n	211a <gsm_init+0xc2>
    210c:	4b32      	ldr	r3, [pc, #200]	; (21d8 <gsm_init+0x180>)
    210e:	6818      	ldr	r0, [r3, #0]
    2110:	2300      	movs	r3, #0
    2112:	2200      	movs	r2, #0
    2114:	2100      	movs	r1, #0
    2116:	4c31      	ldr	r4, [pc, #196]	; (21dc <gsm_init+0x184>)
    2118:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    211a:	003b      	movs	r3, r7
    211c:	0018      	movs	r0, r3
    211e:	4b30      	ldr	r3, [pc, #192]	; (21e0 <gsm_init+0x188>)
    2120:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
    2122:	003b      	movs	r3, r7
    2124:	22e1      	movs	r2, #225	; 0xe1
    2126:	0252      	lsls	r2, r2, #9
    2128:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
    212a:	003b      	movs	r3, r7
    212c:	2280      	movs	r2, #128	; 0x80
    212e:	0352      	lsls	r2, r2, #13
    2130:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
    2132:	003b      	movs	r3, r7
    2134:	4a2b      	ldr	r2, [pc, #172]	; (21e4 <gsm_init+0x18c>)
    2136:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
    2138:	003b      	movs	r3, r7
    213a:	4a2b      	ldr	r2, [pc, #172]	; (21e8 <gsm_init+0x190>)
    213c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
    213e:	003b      	movs	r3, r7
    2140:	2201      	movs	r2, #1
    2142:	4252      	negs	r2, r2
    2144:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
    2146:	003b      	movs	r3, r7
    2148:	2201      	movs	r2, #1
    214a:	4252      	negs	r2, r2
    214c:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
    214e:	003b      	movs	r3, r7
    2150:	222c      	movs	r2, #44	; 0x2c
    2152:	2101      	movs	r1, #1
    2154:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    2156:	e003      	b.n	2160 <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
    2158:	4b24      	ldr	r3, [pc, #144]	; (21ec <gsm_init+0x194>)
    215a:	0018      	movs	r0, r3
    215c:	4b24      	ldr	r3, [pc, #144]	; (21f0 <gsm_init+0x198>)
    215e:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    2160:	003a      	movs	r2, r7
    2162:	4924      	ldr	r1, [pc, #144]	; (21f4 <gsm_init+0x19c>)
    2164:	4b21      	ldr	r3, [pc, #132]	; (21ec <gsm_init+0x194>)
    2166:	0018      	movs	r0, r3
    2168:	4b23      	ldr	r3, [pc, #140]	; (21f8 <gsm_init+0x1a0>)
    216a:	4798      	blx	r3
    216c:	1e03      	subs	r3, r0, #0
    216e:	d1f3      	bne.n	2158 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
    2170:	4b1e      	ldr	r3, [pc, #120]	; (21ec <gsm_init+0x194>)
    2172:	0018      	movs	r0, r3
    2174:	4b21      	ldr	r3, [pc, #132]	; (21fc <gsm_init+0x1a4>)
    2176:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
    2178:	4b1e      	ldr	r3, [pc, #120]	; (21f4 <gsm_init+0x19c>)
    217a:	0018      	movs	r0, r3
    217c:	4b20      	ldr	r3, [pc, #128]	; (2200 <gsm_init+0x1a8>)
    217e:	4798      	blx	r3
    2180:	0003      	movs	r3, r0
    2182:	001a      	movs	r2, r3
    2184:	4b1f      	ldr	r3, [pc, #124]	; (2204 <gsm_init+0x1ac>)
    2186:	0019      	movs	r1, r3
    2188:	0010      	movs	r0, r2
    218a:	4b1f      	ldr	r3, [pc, #124]	; (2208 <gsm_init+0x1b0>)
    218c:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
    218e:	4b19      	ldr	r3, [pc, #100]	; (21f4 <gsm_init+0x19c>)
    2190:	2204      	movs	r2, #4
    2192:	759a      	strb	r2, [r3, #22]
}
    2194:	46c0      	nop			; (mov r8, r8)
    2196:	46bd      	mov	sp, r7
    2198:	b015      	add	sp, #84	; 0x54
    219a:	bd90      	pop	{r4, r7, pc}
    219c:	00001cf1 	.word	0x00001cf1
    21a0:	00011f79 	.word	0x00011f79
    21a4:	00001d59 	.word	0x00001d59
    21a8:	0000d0cd 	.word	0x0000d0cd
    21ac:	0000d101 	.word	0x0000d101
    21b0:	00011469 	.word	0x00011469
    21b4:	00002039 	.word	0x00002039
    21b8:	00011405 	.word	0x00011405
    21bc:	0000e245 	.word	0x0000e245
    21c0:	20000224 	.word	0x20000224
    21c4:	00001388 	.word	0x00001388
    21c8:	00018a04 	.word	0x00018a04
    21cc:	00001f79 	.word	0x00001f79
    21d0:	0000fe11 	.word	0x0000fe11
    21d4:	20000228 	.word	0x20000228
    21d8:	2000022c 	.word	0x2000022c
    21dc:	0000e301 	.word	0x0000e301
    21e0:	00001df1 	.word	0x00001df1
    21e4:	00160002 	.word	0x00160002
    21e8:	00170002 	.word	0x00170002
    21ec:	20000690 	.word	0x20000690
    21f0:	00001f45 	.word	0x00001f45
    21f4:	42001400 	.word	0x42001400
    21f8:	00010a5d 	.word	0x00010a5d
    21fc:	00001eb1 	.word	0x00001eb1
    2200:	0000dce1 	.word	0x0000dce1
    2204:	00001fbd 	.word	0x00001fbd
    2208:	000111f9 	.word	0x000111f9

0000220c <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
    220c:	b580      	push	{r7, lr}
    220e:	b082      	sub	sp, #8
    2210:	af00      	add	r7, sp, #0
    2212:	0002      	movs	r2, r0
    2214:	1dfb      	adds	r3, r7, #7
    2216:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
    2218:	4b10      	ldr	r3, [pc, #64]	; (225c <gsm_module_exit_sleep+0x50>)
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	2201      	movs	r2, #1
    221e:	4053      	eors	r3, r2
    2220:	b2db      	uxtb	r3, r3
    2222:	2b00      	cmp	r3, #0
    2224:	d010      	beq.n	2248 <gsm_module_exit_sleep+0x3c>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
    2226:	2101      	movs	r1, #1
    2228:	2014      	movs	r0, #20
    222a:	4b0d      	ldr	r3, [pc, #52]	; (2260 <gsm_module_exit_sleep+0x54>)
    222c:	4798      	blx	r3
		isGSMModuleAwake = true;
    222e:	4b0b      	ldr	r3, [pc, #44]	; (225c <gsm_module_exit_sleep+0x50>)
    2230:	2201      	movs	r2, #1
    2232:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
    2234:	1dfb      	adds	r3, r7, #7
    2236:	781b      	ldrb	r3, [r3, #0]
    2238:	2201      	movs	r2, #1
    223a:	4053      	eors	r3, r2
    223c:	b2db      	uxtb	r3, r3
    223e:	2b00      	cmp	r3, #0
    2240:	d002      	beq.n	2248 <gsm_module_exit_sleep+0x3c>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
    2242:	2064      	movs	r0, #100	; 0x64
    2244:	4b07      	ldr	r3, [pc, #28]	; (2264 <gsm_module_exit_sleep+0x58>)
    2246:	4798      	blx	r3
		}
	}
	
	lastGSMCommunicationTime=xTaskGetTickCount();
    2248:	4b07      	ldr	r3, [pc, #28]	; (2268 <gsm_module_exit_sleep+0x5c>)
    224a:	4798      	blx	r3
    224c:	0002      	movs	r2, r0
    224e:	4b07      	ldr	r3, [pc, #28]	; (226c <gsm_module_exit_sleep+0x60>)
    2250:	601a      	str	r2, [r3, #0]
}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	46bd      	mov	sp, r7
    2256:	b002      	add	sp, #8
    2258:	bd80      	pop	{r7, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	2000021d 	.word	0x2000021d
    2260:	00001d59 	.word	0x00001d59
    2264:	0000f0a9 	.word	0x0000f0a9
    2268:	0000f40d 	.word	0x0000f40d
    226c:	20000220 	.word	0x20000220

00002270 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
    2270:	b580      	push	{r7, lr}
    2272:	af00      	add	r7, sp, #0
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
    2274:	2100      	movs	r1, #0
    2276:	2014      	movs	r0, #20
    2278:	4b03      	ldr	r3, [pc, #12]	; (2288 <gsm_module_enter_sleep+0x18>)
    227a:	4798      	blx	r3
	isGSMModuleAwake = false;
    227c:	4b03      	ldr	r3, [pc, #12]	; (228c <gsm_module_enter_sleep+0x1c>)
    227e:	2200      	movs	r2, #0
    2280:	701a      	strb	r2, [r3, #0]
}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	46bd      	mov	sp, r7
    2286:	bd80      	pop	{r7, pc}
    2288:	00001d59 	.word	0x00001d59
    228c:	2000021d 	.word	0x2000021d

00002290 <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
    2290:	b580      	push	{r7, lr}
    2292:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
    2294:	4b09      	ldr	r3, [pc, #36]	; (22bc <gsm_module_sleep_elligible+0x2c>)
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	2b00      	cmp	r3, #0
    229a:	d00b      	beq.n	22b4 <gsm_module_sleep_elligible+0x24>
	{
		return ((xTaskGetTickCount() - lastGSMCommunicationTime)>=30000L);
    229c:	4b08      	ldr	r3, [pc, #32]	; (22c0 <gsm_module_sleep_elligible+0x30>)
    229e:	4798      	blx	r3
    22a0:	0002      	movs	r2, r0
    22a2:	4b08      	ldr	r3, [pc, #32]	; (22c4 <gsm_module_sleep_elligible+0x34>)
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	1ad3      	subs	r3, r2, r3
    22a8:	4a07      	ldr	r2, [pc, #28]	; (22c8 <gsm_module_sleep_elligible+0x38>)
    22aa:	429a      	cmp	r2, r3
    22ac:	419b      	sbcs	r3, r3
    22ae:	425b      	negs	r3, r3
    22b0:	b2db      	uxtb	r3, r3
    22b2:	e000      	b.n	22b6 <gsm_module_sleep_elligible+0x26>
	}
	return true;
    22b4:	2301      	movs	r3, #1
}
    22b6:	0018      	movs	r0, r3
    22b8:	46bd      	mov	sp, r7
    22ba:	bd80      	pop	{r7, pc}
    22bc:	2000021d 	.word	0x2000021d
    22c0:	0000f40d 	.word	0x0000f40d
    22c4:	20000220 	.word	0x20000220
    22c8:	0000752f 	.word	0x0000752f

000022cc <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
    22cc:	b590      	push	{r4, r7, lr}
    22ce:	b08b      	sub	sp, #44	; 0x2c
    22d0:	af02      	add	r7, sp, #8
    22d2:	60f8      	str	r0, [r7, #12]
    22d4:	60b9      	str	r1, [r7, #8]
    22d6:	607a      	str	r2, [r7, #4]
    22d8:	001a      	movs	r2, r3
    22da:	1cfb      	adds	r3, r7, #3
    22dc:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
    22de:	4b66      	ldr	r3, [pc, #408]	; (2478 <gsm_send_at_command+0x1ac>)
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	2101      	movs	r1, #1
    22e4:	0018      	movs	r0, r3
    22e6:	4b65      	ldr	r3, [pc, #404]	; (247c <gsm_send_at_command+0x1b0>)
    22e8:	4798      	blx	r3
    22ea:	1e03      	subs	r3, r0, #0
    22ec:	d101      	bne.n	22f2 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
    22ee:	2302      	movs	r3, #2
    22f0:	e0bd      	b.n	246e <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
    22f2:	2000      	movs	r0, #0
    22f4:	4b62      	ldr	r3, [pc, #392]	; (2480 <gsm_send_at_command+0x1b4>)
    22f6:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
    22f8:	4b62      	ldr	r3, [pc, #392]	; (2484 <gsm_send_at_command+0x1b8>)
    22fa:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
    22fc:	231f      	movs	r3, #31
    22fe:	18fb      	adds	r3, r7, r3
    2300:	2200      	movs	r2, #0
    2302:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
    2304:	231e      	movs	r3, #30
    2306:	18fb      	adds	r3, r7, r3
    2308:	2200      	movs	r2, #0
    230a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
    230c:	2313      	movs	r3, #19
    230e:	18fb      	adds	r3, r7, r3
    2310:	2200      	movs	r2, #0
    2312:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
    2314:	2101      	movs	r1, #1
    2316:	20f0      	movs	r0, #240	; 0xf0
    2318:	4b5b      	ldr	r3, [pc, #364]	; (2488 <gsm_send_at_command+0x1bc>)
    231a:	4798      	blx	r3
    231c:	0003      	movs	r3, r0
    231e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
    2320:	69bb      	ldr	r3, [r7, #24]
    2322:	2b00      	cmp	r3, #0
    2324:	d101      	bne.n	232a <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
    2326:	2300      	movs	r3, #0
    2328:	e0a1      	b.n	246e <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
    232a:	69bb      	ldr	r3, [r7, #24]
    232c:	22f0      	movs	r2, #240	; 0xf0
    232e:	2100      	movs	r1, #0
    2330:	0018      	movs	r0, r3
    2332:	4b56      	ldr	r3, [pc, #344]	; (248c <gsm_send_at_command+0x1c0>)
    2334:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
    2336:	68fb      	ldr	r3, [r7, #12]
    2338:	0018      	movs	r0, r3
    233a:	4b55      	ldr	r3, [pc, #340]	; (2490 <gsm_send_at_command+0x1c4>)
    233c:	4798      	blx	r3
    233e:	0003      	movs	r3, r0
    2340:	b29a      	uxth	r2, r3
    2342:	68f9      	ldr	r1, [r7, #12]
    2344:	4b53      	ldr	r3, [pc, #332]	; (2494 <gsm_send_at_command+0x1c8>)
    2346:	0018      	movs	r0, r3
    2348:	4b53      	ldr	r3, [pc, #332]	; (2498 <gsm_send_at_command+0x1cc>)
    234a:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
    234c:	4b53      	ldr	r3, [pc, #332]	; (249c <gsm_send_at_command+0x1d0>)
    234e:	6818      	ldr	r0, [r3, #0]
    2350:	687a      	ldr	r2, [r7, #4]
    2352:	2301      	movs	r3, #1
    2354:	425b      	negs	r3, r3
    2356:	9300      	str	r3, [sp, #0]
    2358:	2300      	movs	r3, #0
    235a:	2104      	movs	r1, #4
    235c:	4c50      	ldr	r4, [pc, #320]	; (24a0 <gsm_send_at_command+0x1d4>)
    235e:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
    2360:	4b4e      	ldr	r3, [pc, #312]	; (249c <gsm_send_at_command+0x1d0>)
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	0018      	movs	r0, r3
    2366:	4b4f      	ldr	r3, [pc, #316]	; (24a4 <gsm_send_at_command+0x1d8>)
    2368:	4798      	blx	r3
    236a:	1e03      	subs	r3, r0, #0
    236c:	d03e      	beq.n	23ec <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
    236e:	231e      	movs	r3, #30
    2370:	18fb      	adds	r3, r7, r3
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	2bef      	cmp	r3, #239	; 0xef
    2376:	d81c      	bhi.n	23b2 <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
    2378:	4b4b      	ldr	r3, [pc, #300]	; (24a8 <gsm_send_at_command+0x1dc>)
    237a:	681b      	ldr	r3, [r3, #0]
    237c:	2213      	movs	r2, #19
    237e:	18b9      	adds	r1, r7, r2
    2380:	2200      	movs	r2, #0
    2382:	0018      	movs	r0, r3
    2384:	4b49      	ldr	r3, [pc, #292]	; (24ac <gsm_send_at_command+0x1e0>)
    2386:	4798      	blx	r3
    2388:	0003      	movs	r3, r0
    238a:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
    238c:	697b      	ldr	r3, [r7, #20]
    238e:	2b00      	cmp	r3, #0
    2390:	d00f      	beq.n	23b2 <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
    2392:	231e      	movs	r3, #30
    2394:	18fb      	adds	r3, r7, r3
    2396:	781b      	ldrb	r3, [r3, #0]
    2398:	69ba      	ldr	r2, [r7, #24]
    239a:	18d3      	adds	r3, r2, r3
    239c:	2213      	movs	r2, #19
    239e:	18ba      	adds	r2, r7, r2
    23a0:	7812      	ldrb	r2, [r2, #0]
    23a2:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
    23a4:	231e      	movs	r3, #30
    23a6:	18fb      	adds	r3, r7, r3
    23a8:	781a      	ldrb	r2, [r3, #0]
    23aa:	231e      	movs	r3, #30
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	3201      	adds	r2, #1
    23b0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
    23b2:	68bb      	ldr	r3, [r7, #8]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d00c      	beq.n	23d2 <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
    23b8:	68ba      	ldr	r2, [r7, #8]
    23ba:	69bb      	ldr	r3, [r7, #24]
    23bc:	0011      	movs	r1, r2
    23be:	0018      	movs	r0, r3
    23c0:	4b3b      	ldr	r3, [pc, #236]	; (24b0 <gsm_send_at_command+0x1e4>)
    23c2:	4798      	blx	r3
    23c4:	1e03      	subs	r3, r0, #0
    23c6:	d004      	beq.n	23d2 <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
    23c8:	231f      	movs	r3, #31
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	2200      	movs	r2, #0
    23ce:	701a      	strb	r2, [r3, #0]
					break;
    23d0:	e024      	b.n	241c <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
    23d2:	4a38      	ldr	r2, [pc, #224]	; (24b4 <gsm_send_at_command+0x1e8>)
    23d4:	69bb      	ldr	r3, [r7, #24]
    23d6:	0011      	movs	r1, r2
    23d8:	0018      	movs	r0, r3
    23da:	4b35      	ldr	r3, [pc, #212]	; (24b0 <gsm_send_at_command+0x1e4>)
    23dc:	4798      	blx	r3
    23de:	1e03      	subs	r3, r0, #0
    23e0:	d0be      	beq.n	2360 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
    23e2:	231f      	movs	r3, #31
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	220b      	movs	r2, #11
    23e8:	701a      	strb	r2, [r3, #0]
				break;
    23ea:	e017      	b.n	241c <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
    23ec:	4b2b      	ldr	r3, [pc, #172]	; (249c <gsm_send_at_command+0x1d0>)
    23ee:	6818      	ldr	r0, [r3, #0]
    23f0:	2301      	movs	r3, #1
    23f2:	425b      	negs	r3, r3
    23f4:	9300      	str	r3, [sp, #0]
    23f6:	2300      	movs	r3, #0
    23f8:	2200      	movs	r2, #0
    23fa:	2103      	movs	r1, #3
    23fc:	4c28      	ldr	r4, [pc, #160]	; (24a0 <gsm_send_at_command+0x1d4>)
    23fe:	47a0      	blx	r4
			if (u8tRx_Index==0)
    2400:	231e      	movs	r3, #30
    2402:	18fb      	adds	r3, r7, r3
    2404:	781b      	ldrb	r3, [r3, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d104      	bne.n	2414 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
    240a:	231f      	movs	r3, #31
    240c:	18fb      	adds	r3, r7, r3
    240e:	2207      	movs	r2, #7
    2410:	701a      	strb	r2, [r3, #0]
				break;
    2412:	e003      	b.n	241c <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
    2414:	231f      	movs	r3, #31
    2416:	18fb      	adds	r3, r7, r3
    2418:	2208      	movs	r2, #8
    241a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
    241c:	1cfb      	adds	r3, r7, #3
    241e:	781b      	ldrb	r3, [r3, #0]
    2420:	2b00      	cmp	r3, #0
    2422:	d016      	beq.n	2452 <gsm_send_at_command+0x186>
    2424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2426:	2b00      	cmp	r3, #0
    2428:	d013      	beq.n	2452 <gsm_send_at_command+0x186>
    242a:	1cfa      	adds	r2, r7, #3
    242c:	231e      	movs	r3, #30
    242e:	18fb      	adds	r3, r7, r3
    2430:	7812      	ldrb	r2, [r2, #0]
    2432:	781b      	ldrb	r3, [r3, #0]
    2434:	429a      	cmp	r2, r3
    2436:	d90c      	bls.n	2452 <gsm_send_at_command+0x186>
    2438:	231f      	movs	r3, #31
    243a:	18fb      	adds	r3, r7, r3
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	2b00      	cmp	r3, #0
    2440:	d107      	bne.n	2452 <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
    2442:	231e      	movs	r3, #30
    2444:	18fb      	adds	r3, r7, r3
    2446:	781a      	ldrb	r2, [r3, #0]
    2448:	69b9      	ldr	r1, [r7, #24]
    244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    244c:	0018      	movs	r0, r3
    244e:	4b1a      	ldr	r3, [pc, #104]	; (24b8 <gsm_send_at_command+0x1ec>)
    2450:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
    2452:	4b09      	ldr	r3, [pc, #36]	; (2478 <gsm_send_at_command+0x1ac>)
    2454:	6818      	ldr	r0, [r3, #0]
    2456:	2300      	movs	r3, #0
    2458:	2200      	movs	r2, #0
    245a:	2100      	movs	r1, #0
    245c:	4c17      	ldr	r4, [pc, #92]	; (24bc <gsm_send_at_command+0x1f0>)
    245e:	47a0      	blx	r4
	free(aDataBuffer);
    2460:	69bb      	ldr	r3, [r7, #24]
    2462:	0018      	movs	r0, r3
    2464:	4b16      	ldr	r3, [pc, #88]	; (24c0 <gsm_send_at_command+0x1f4>)
    2466:	4798      	blx	r3
	return err_no;
    2468:	231f      	movs	r3, #31
    246a:	18fb      	adds	r3, r7, r3
    246c:	781b      	ldrb	r3, [r3, #0]
}
    246e:	0018      	movs	r0, r3
    2470:	46bd      	mov	sp, r7
    2472:	b009      	add	sp, #36	; 0x24
    2474:	bd90      	pop	{r4, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	2000022c 	.word	0x2000022c
    247c:	0000e7a1 	.word	0x0000e7a1
    2480:	0000220d 	.word	0x0000220d
    2484:	00001f89 	.word	0x00001f89
    2488:	00017c59 	.word	0x00017c59
    248c:	00017d67 	.word	0x00017d67
    2490:	00017ff7 	.word	0x00017ff7
    2494:	20000690 	.word	0x20000690
    2498:	00010d35 	.word	0x00010d35
    249c:	20000228 	.word	0x20000228
    24a0:	0000feb5 	.word	0x0000feb5
    24a4:	00010431 	.word	0x00010431
    24a8:	20000224 	.word	0x20000224
    24ac:	0000e601 	.word	0x0000e601
    24b0:	00018027 	.word	0x00018027
    24b4:	00018a10 	.word	0x00018a10
    24b8:	00017d31 	.word	0x00017d31
    24bc:	0000e301 	.word	0x0000e301
    24c0:	00017cf9 	.word	0x00017cf9

000024c4 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
    24c4:	b590      	push	{r4, r7, lr}
    24c6:	b083      	sub	sp, #12
    24c8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
    24ca:	4a06      	ldr	r2, [pc, #24]	; (24e4 <gsm_check_module+0x20>)
    24cc:	4906      	ldr	r1, [pc, #24]	; (24e8 <gsm_check_module+0x24>)
    24ce:	4807      	ldr	r0, [pc, #28]	; (24ec <gsm_check_module+0x28>)
    24d0:	2300      	movs	r3, #0
    24d2:	9300      	str	r3, [sp, #0]
    24d4:	2300      	movs	r3, #0
    24d6:	4c06      	ldr	r4, [pc, #24]	; (24f0 <gsm_check_module+0x2c>)
    24d8:	47a0      	blx	r4
    24da:	0003      	movs	r3, r0
}
    24dc:	0018      	movs	r0, r3
    24de:	46bd      	mov	sp, r7
    24e0:	b001      	add	sp, #4
    24e2:	bd90      	pop	{r4, r7, pc}
    24e4:	00001388 	.word	0x00001388
    24e8:	00018a18 	.word	0x00018a18
    24ec:	00018a1c 	.word	0x00018a1c
    24f0:	000022cd 	.word	0x000022cd

000024f4 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
    24f4:	b5b0      	push	{r4, r5, r7, lr}
    24f6:	b084      	sub	sp, #16
    24f8:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
    24fa:	1dfc      	adds	r4, r7, #7
    24fc:	4a12      	ldr	r2, [pc, #72]	; (2548 <gsm_is_network_registered+0x54>)
    24fe:	4913      	ldr	r1, [pc, #76]	; (254c <gsm_is_network_registered+0x58>)
    2500:	4813      	ldr	r0, [pc, #76]	; (2550 <gsm_is_network_registered+0x5c>)
    2502:	2300      	movs	r3, #0
    2504:	9300      	str	r3, [sp, #0]
    2506:	2300      	movs	r3, #0
    2508:	4d12      	ldr	r5, [pc, #72]	; (2554 <gsm_is_network_registered+0x60>)
    250a:	47a8      	blx	r5
    250c:	0003      	movs	r3, r0
    250e:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
    2510:	1dfb      	adds	r3, r7, #7
    2512:	781b      	ldrb	r3, [r3, #0]
    2514:	2b00      	cmp	r3, #0
    2516:	d101      	bne.n	251c <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
    2518:	2309      	movs	r3, #9
    251a:	e011      	b.n	2540 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
    251c:	1dbc      	adds	r4, r7, #6
    251e:	4a0a      	ldr	r2, [pc, #40]	; (2548 <gsm_is_network_registered+0x54>)
    2520:	490d      	ldr	r1, [pc, #52]	; (2558 <gsm_is_network_registered+0x64>)
    2522:	480b      	ldr	r0, [pc, #44]	; (2550 <gsm_is_network_registered+0x5c>)
    2524:	2300      	movs	r3, #0
    2526:	9300      	str	r3, [sp, #0]
    2528:	2300      	movs	r3, #0
    252a:	4d0a      	ldr	r5, [pc, #40]	; (2554 <gsm_is_network_registered+0x60>)
    252c:	47a8      	blx	r5
    252e:	0003      	movs	r3, r0
    2530:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
    2532:	1dbb      	adds	r3, r7, #6
    2534:	781b      	ldrb	r3, [r3, #0]
    2536:	2b00      	cmp	r3, #0
    2538:	d101      	bne.n	253e <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
    253a:	2309      	movs	r3, #9
    253c:	e000      	b.n	2540 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
    253e:	230a      	movs	r3, #10
			}
		}
	}
}
    2540:	0018      	movs	r0, r3
    2542:	46bd      	mov	sp, r7
    2544:	b002      	add	sp, #8
    2546:	bdb0      	pop	{r4, r5, r7, pc}
    2548:	00001388 	.word	0x00001388
    254c:	00018a2c 	.word	0x00018a2c
    2550:	00018a38 	.word	0x00018a38
    2554:	000022cd 	.word	0x000022cd
    2558:	00018a44 	.word	0x00018a44

0000255c <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
    255c:	b590      	push	{r4, r7, lr}
    255e:	b089      	sub	sp, #36	; 0x24
    2560:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
    2562:	1d3b      	adds	r3, r7, #4
    2564:	0018      	movs	r0, r3
    2566:	2314      	movs	r3, #20
    2568:	001a      	movs	r2, r3
    256a:	2100      	movs	r1, #0
    256c:	4b0a      	ldr	r3, [pc, #40]	; (2598 <gsm_set_baudrate+0x3c>)
    256e:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
    2570:	23e1      	movs	r3, #225	; 0xe1
    2572:	025a      	lsls	r2, r3, #9
    2574:	4909      	ldr	r1, [pc, #36]	; (259c <gsm_set_baudrate+0x40>)
    2576:	1d3b      	adds	r3, r7, #4
    2578:	0018      	movs	r0, r3
    257a:	4b09      	ldr	r3, [pc, #36]	; (25a0 <gsm_set_baudrate+0x44>)
    257c:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
    257e:	4a09      	ldr	r2, [pc, #36]	; (25a4 <gsm_set_baudrate+0x48>)
    2580:	4909      	ldr	r1, [pc, #36]	; (25a8 <gsm_set_baudrate+0x4c>)
    2582:	1d38      	adds	r0, r7, #4
    2584:	2300      	movs	r3, #0
    2586:	9300      	str	r3, [sp, #0]
    2588:	2300      	movs	r3, #0
    258a:	4c08      	ldr	r4, [pc, #32]	; (25ac <gsm_set_baudrate+0x50>)
    258c:	47a0      	blx	r4
    258e:	0003      	movs	r3, r0
}
    2590:	0018      	movs	r0, r3
    2592:	46bd      	mov	sp, r7
    2594:	b007      	add	sp, #28
    2596:	bd90      	pop	{r4, r7, pc}
    2598:	00017d67 	.word	0x00017d67
    259c:	00018a50 	.word	0x00018a50
    25a0:	00017f6d 	.word	0x00017f6d
    25a4:	00001388 	.word	0x00001388
    25a8:	00018a18 	.word	0x00018a18
    25ac:	000022cd 	.word	0x000022cd

000025b0 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
    25b0:	b590      	push	{r4, r7, lr}
    25b2:	b083      	sub	sp, #12
    25b4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
    25b6:	4a06      	ldr	r2, [pc, #24]	; (25d0 <gsm_detect_simcard+0x20>)
    25b8:	4906      	ldr	r1, [pc, #24]	; (25d4 <gsm_detect_simcard+0x24>)
    25ba:	4807      	ldr	r0, [pc, #28]	; (25d8 <gsm_detect_simcard+0x28>)
    25bc:	2300      	movs	r3, #0
    25be:	9300      	str	r3, [sp, #0]
    25c0:	2300      	movs	r3, #0
    25c2:	4c06      	ldr	r4, [pc, #24]	; (25dc <gsm_detect_simcard+0x2c>)
    25c4:	47a0      	blx	r4
    25c6:	0003      	movs	r3, r0
}
    25c8:	0018      	movs	r0, r3
    25ca:	46bd      	mov	sp, r7
    25cc:	b001      	add	sp, #4
    25ce:	bd90      	pop	{r4, r7, pc}
    25d0:	00001388 	.word	0x00001388
    25d4:	00018ac0 	.word	0x00018ac0
    25d8:	00018ad0 	.word	0x00018ad0
    25dc:	000022cd 	.word	0x000022cd

000025e0 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
    25e0:	b590      	push	{r4, r7, lr}
    25e2:	b083      	sub	sp, #12
    25e4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
    25e6:	4a06      	ldr	r2, [pc, #24]	; (2600 <gsm_delete_all_sms+0x20>)
    25e8:	4906      	ldr	r1, [pc, #24]	; (2604 <gsm_delete_all_sms+0x24>)
    25ea:	4807      	ldr	r0, [pc, #28]	; (2608 <gsm_delete_all_sms+0x28>)
    25ec:	2300      	movs	r3, #0
    25ee:	9300      	str	r3, [sp, #0]
    25f0:	2300      	movs	r3, #0
    25f2:	4c06      	ldr	r4, [pc, #24]	; (260c <gsm_delete_all_sms+0x2c>)
    25f4:	47a0      	blx	r4
    25f6:	0003      	movs	r3, r0
}
    25f8:	0018      	movs	r0, r3
    25fa:	46bd      	mov	sp, r7
    25fc:	b001      	add	sp, #4
    25fe:	bd90      	pop	{r4, r7, pc}
    2600:	000061a8 	.word	0x000061a8
    2604:	00018a18 	.word	0x00018a18
    2608:	00018adc 	.word	0x00018adc
    260c:	000022cd 	.word	0x000022cd

00002610 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
    2610:	b590      	push	{r4, r7, lr}
    2612:	b083      	sub	sp, #12
    2614:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2616:	4a06      	ldr	r2, [pc, #24]	; (2630 <gsm_store_active_profile+0x20>)
    2618:	4906      	ldr	r1, [pc, #24]	; (2634 <gsm_store_active_profile+0x24>)
    261a:	4807      	ldr	r0, [pc, #28]	; (2638 <gsm_store_active_profile+0x28>)
    261c:	2300      	movs	r3, #0
    261e:	9300      	str	r3, [sp, #0]
    2620:	2300      	movs	r3, #0
    2622:	4c06      	ldr	r4, [pc, #24]	; (263c <gsm_store_active_profile+0x2c>)
    2624:	47a0      	blx	r4
    2626:	0003      	movs	r3, r0
}
    2628:	0018      	movs	r0, r3
    262a:	46bd      	mov	sp, r7
    262c:	b001      	add	sp, #4
    262e:	bd90      	pop	{r4, r7, pc}
    2630:	00001388 	.word	0x00001388
    2634:	00018a18 	.word	0x00018a18
    2638:	00018af0 	.word	0x00018af0
    263c:	000022cd 	.word	0x000022cd

00002640 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
    2640:	b590      	push	{r4, r7, lr}
    2642:	b083      	sub	sp, #12
    2644:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
    2646:	4a06      	ldr	r2, [pc, #24]	; (2660 <gsm_enable_calling_line_identification+0x20>)
    2648:	4906      	ldr	r1, [pc, #24]	; (2664 <gsm_enable_calling_line_identification+0x24>)
    264a:	4807      	ldr	r0, [pc, #28]	; (2668 <gsm_enable_calling_line_identification+0x28>)
    264c:	2300      	movs	r3, #0
    264e:	9300      	str	r3, [sp, #0]
    2650:	2300      	movs	r3, #0
    2652:	4c06      	ldr	r4, [pc, #24]	; (266c <gsm_enable_calling_line_identification+0x2c>)
    2654:	47a0      	blx	r4
    2656:	0003      	movs	r3, r0
}
    2658:	0018      	movs	r0, r3
    265a:	46bd      	mov	sp, r7
    265c:	b001      	add	sp, #4
    265e:	bd90      	pop	{r4, r7, pc}
    2660:	00003a98 	.word	0x00003a98
    2664:	00018a18 	.word	0x00018a18
    2668:	00018af8 	.word	0x00018af8
    266c:	000022cd 	.word	0x000022cd

00002670 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
    2670:	b590      	push	{r4, r7, lr}
    2672:	b083      	sub	sp, #12
    2674:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2676:	4a06      	ldr	r2, [pc, #24]	; (2690 <gsm_enable_connected_line_identification_presentation+0x20>)
    2678:	4906      	ldr	r1, [pc, #24]	; (2694 <gsm_enable_connected_line_identification_presentation+0x24>)
    267a:	4807      	ldr	r0, [pc, #28]	; (2698 <gsm_enable_connected_line_identification_presentation+0x28>)
    267c:	2300      	movs	r3, #0
    267e:	9300      	str	r3, [sp, #0]
    2680:	2300      	movs	r3, #0
    2682:	4c06      	ldr	r4, [pc, #24]	; (269c <gsm_enable_connected_line_identification_presentation+0x2c>)
    2684:	47a0      	blx	r4
    2686:	0003      	movs	r3, r0
}
    2688:	0018      	movs	r0, r3
    268a:	46bd      	mov	sp, r7
    268c:	b001      	add	sp, #4
    268e:	bd90      	pop	{r4, r7, pc}
    2690:	00001388 	.word	0x00001388
    2694:	00018a18 	.word	0x00018a18
    2698:	00018b04 	.word	0x00018b04
    269c:	000022cd 	.word	0x000022cd

000026a0 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
    26a0:	b590      	push	{r4, r7, lr}
    26a2:	b083      	sub	sp, #12
    26a4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    26a6:	4a06      	ldr	r2, [pc, #24]	; (26c0 <gsm_enable_list_current_calls_of_ME+0x20>)
    26a8:	4906      	ldr	r1, [pc, #24]	; (26c4 <gsm_enable_list_current_calls_of_ME+0x24>)
    26aa:	4807      	ldr	r0, [pc, #28]	; (26c8 <gsm_enable_list_current_calls_of_ME+0x28>)
    26ac:	2300      	movs	r3, #0
    26ae:	9300      	str	r3, [sp, #0]
    26b0:	2300      	movs	r3, #0
    26b2:	4c06      	ldr	r4, [pc, #24]	; (26cc <gsm_enable_list_current_calls_of_ME+0x2c>)
    26b4:	47a0      	blx	r4
    26b6:	0003      	movs	r3, r0
}
    26b8:	0018      	movs	r0, r3
    26ba:	46bd      	mov	sp, r7
    26bc:	b001      	add	sp, #4
    26be:	bd90      	pop	{r4, r7, pc}
    26c0:	00001388 	.word	0x00001388
    26c4:	00018a18 	.word	0x00018a18
    26c8:	00018b38 	.word	0x00018b38
    26cc:	000022cd 	.word	0x000022cd

000026d0 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
    26d0:	b590      	push	{r4, r7, lr}
    26d2:	b083      	sub	sp, #12
    26d4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
    26d6:	4a06      	ldr	r2, [pc, #24]	; (26f0 <gsm_factory_reset+0x20>)
    26d8:	4906      	ldr	r1, [pc, #24]	; (26f4 <gsm_factory_reset+0x24>)
    26da:	4807      	ldr	r0, [pc, #28]	; (26f8 <gsm_factory_reset+0x28>)
    26dc:	2300      	movs	r3, #0
    26de:	9300      	str	r3, [sp, #0]
    26e0:	2300      	movs	r3, #0
    26e2:	4c06      	ldr	r4, [pc, #24]	; (26fc <gsm_factory_reset+0x2c>)
    26e4:	47a0      	blx	r4
    26e6:	0003      	movs	r3, r0
}
    26e8:	0018      	movs	r0, r3
    26ea:	46bd      	mov	sp, r7
    26ec:	b001      	add	sp, #4
    26ee:	bd90      	pop	{r4, r7, pc}
    26f0:	00003a98 	.word	0x00003a98
    26f4:	00018a18 	.word	0x00018a18
    26f8:	00018b44 	.word	0x00018b44
    26fc:	000022cd 	.word	0x000022cd

00002700 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
    2700:	b590      	push	{r4, r7, lr}
    2702:	b083      	sub	sp, #12
    2704:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2706:	4a06      	ldr	r2, [pc, #24]	; (2720 <gsm_echo_off+0x20>)
    2708:	4906      	ldr	r1, [pc, #24]	; (2724 <gsm_echo_off+0x24>)
    270a:	4807      	ldr	r0, [pc, #28]	; (2728 <gsm_echo_off+0x28>)
    270c:	2300      	movs	r3, #0
    270e:	9300      	str	r3, [sp, #0]
    2710:	2300      	movs	r3, #0
    2712:	4c06      	ldr	r4, [pc, #24]	; (272c <gsm_echo_off+0x2c>)
    2714:	47a0      	blx	r4
    2716:	0003      	movs	r3, r0
}
    2718:	0018      	movs	r0, r3
    271a:	46bd      	mov	sp, r7
    271c:	b001      	add	sp, #4
    271e:	bd90      	pop	{r4, r7, pc}
    2720:	00001388 	.word	0x00001388
    2724:	00018a18 	.word	0x00018a18
    2728:	00018b4c 	.word	0x00018b4c
    272c:	000022cd 	.word	0x000022cd

00002730 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
    2730:	b590      	push	{r4, r7, lr}
    2732:	b083      	sub	sp, #12
    2734:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2736:	4a06      	ldr	r2, [pc, #24]	; (2750 <gsm_select_sms_message_formate_text_mode+0x20>)
    2738:	4906      	ldr	r1, [pc, #24]	; (2754 <gsm_select_sms_message_formate_text_mode+0x24>)
    273a:	4807      	ldr	r0, [pc, #28]	; (2758 <gsm_select_sms_message_formate_text_mode+0x28>)
    273c:	2300      	movs	r3, #0
    273e:	9300      	str	r3, [sp, #0]
    2740:	2300      	movs	r3, #0
    2742:	4c06      	ldr	r4, [pc, #24]	; (275c <gsm_select_sms_message_formate_text_mode+0x2c>)
    2744:	47a0      	blx	r4
    2746:	0003      	movs	r3, r0
}
    2748:	0018      	movs	r0, r3
    274a:	46bd      	mov	sp, r7
    274c:	b001      	add	sp, #4
    274e:	bd90      	pop	{r4, r7, pc}
    2750:	00001388 	.word	0x00001388
    2754:	00018a18 	.word	0x00018a18
    2758:	00018b54 	.word	0x00018b54
    275c:	000022cd 	.word	0x000022cd

00002760 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
    2760:	b590      	push	{r4, r7, lr}
    2762:	b083      	sub	sp, #12
    2764:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
    2766:	4a06      	ldr	r2, [pc, #24]	; (2780 <gsm_set_sms_text_mode_parameter+0x20>)
    2768:	4906      	ldr	r1, [pc, #24]	; (2784 <gsm_set_sms_text_mode_parameter+0x24>)
    276a:	4807      	ldr	r0, [pc, #28]	; (2788 <gsm_set_sms_text_mode_parameter+0x28>)
    276c:	2300      	movs	r3, #0
    276e:	9300      	str	r3, [sp, #0]
    2770:	2300      	movs	r3, #0
    2772:	4c06      	ldr	r4, [pc, #24]	; (278c <gsm_set_sms_text_mode_parameter+0x2c>)
    2774:	47a0      	blx	r4
    2776:	0003      	movs	r3, r0
}
    2778:	0018      	movs	r0, r3
    277a:	46bd      	mov	sp, r7
    277c:	b001      	add	sp, #4
    277e:	bd90      	pop	{r4, r7, pc}
    2780:	00001b58 	.word	0x00001b58
    2784:	00018a18 	.word	0x00018a18
    2788:	00018b60 	.word	0x00018b60
    278c:	000022cd 	.word	0x000022cd

00002790 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
    2790:	b5b0      	push	{r4, r5, r7, lr}
    2792:	b088      	sub	sp, #32
    2794:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
    2796:	2316      	movs	r3, #22
    2798:	18fb      	adds	r3, r7, r3
    279a:	2264      	movs	r2, #100	; 0x64
    279c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    279e:	2316      	movs	r3, #22
    27a0:	18fb      	adds	r3, r7, r3
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	2101      	movs	r1, #1
    27a6:	0018      	movs	r0, r3
    27a8:	4b60      	ldr	r3, [pc, #384]	; (292c <gsm_getsignalstrength+0x19c>)
    27aa:	4798      	blx	r3
    27ac:	0003      	movs	r3, r0
    27ae:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
    27b0:	693b      	ldr	r3, [r7, #16]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d105      	bne.n	27c2 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
    27b6:	693b      	ldr	r3, [r7, #16]
    27b8:	0018      	movs	r0, r3
    27ba:	4b5d      	ldr	r3, [pc, #372]	; (2930 <gsm_getsignalstrength+0x1a0>)
    27bc:	4798      	blx	r3
		return 0;
    27be:	2300      	movs	r3, #0
    27c0:	e0af      	b.n	2922 <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    27c2:	2316      	movs	r3, #22
    27c4:	18fb      	adds	r3, r7, r3
    27c6:	781a      	ldrb	r2, [r3, #0]
    27c8:	693b      	ldr	r3, [r7, #16]
    27ca:	2100      	movs	r1, #0
    27cc:	0018      	movs	r0, r3
    27ce:	4b59      	ldr	r3, [pc, #356]	; (2934 <gsm_getsignalstrength+0x1a4>)
    27d0:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
    27d2:	230f      	movs	r3, #15
    27d4:	18fc      	adds	r4, r7, r3
    27d6:	2316      	movs	r3, #22
    27d8:	18fb      	adds	r3, r7, r3
    27da:	781a      	ldrb	r2, [r3, #0]
    27dc:	4d56      	ldr	r5, [pc, #344]	; (2938 <gsm_getsignalstrength+0x1a8>)
    27de:	4957      	ldr	r1, [pc, #348]	; (293c <gsm_getsignalstrength+0x1ac>)
    27e0:	4857      	ldr	r0, [pc, #348]	; (2940 <gsm_getsignalstrength+0x1b0>)
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	9300      	str	r3, [sp, #0]
    27e6:	0013      	movs	r3, r2
    27e8:	002a      	movs	r2, r5
    27ea:	4d56      	ldr	r5, [pc, #344]	; (2944 <gsm_getsignalstrength+0x1b4>)
    27ec:	47a8      	blx	r5
    27ee:	0003      	movs	r3, r0
    27f0:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
    27f2:	230f      	movs	r3, #15
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d000      	beq.n	27fe <gsm_getsignalstrength+0x6e>
    27fc:	e086      	b.n	290c <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
    27fe:	4a52      	ldr	r2, [pc, #328]	; (2948 <gsm_getsignalstrength+0x1b8>)
    2800:	693b      	ldr	r3, [r7, #16]
    2802:	0011      	movs	r1, r2
    2804:	0018      	movs	r0, r3
    2806:	4b51      	ldr	r3, [pc, #324]	; (294c <gsm_getsignalstrength+0x1bc>)
    2808:	4798      	blx	r3
    280a:	1e03      	subs	r3, r0, #0
    280c:	d000      	beq.n	2810 <gsm_getsignalstrength+0x80>
    280e:	e078      	b.n	2902 <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
    2810:	4a4f      	ldr	r2, [pc, #316]	; (2950 <gsm_getsignalstrength+0x1c0>)
    2812:	693b      	ldr	r3, [r7, #16]
    2814:	0011      	movs	r1, r2
    2816:	0018      	movs	r0, r3
    2818:	4b4e      	ldr	r3, [pc, #312]	; (2954 <gsm_getsignalstrength+0x1c4>)
    281a:	4798      	blx	r3
    281c:	0003      	movs	r3, r0
    281e:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
    2820:	4b4b      	ldr	r3, [pc, #300]	; (2950 <gsm_getsignalstrength+0x1c0>)
    2822:	0019      	movs	r1, r3
    2824:	2000      	movs	r0, #0
    2826:	4b4b      	ldr	r3, [pc, #300]	; (2954 <gsm_getsignalstrength+0x1c4>)
    2828:	4798      	blx	r3
    282a:	0003      	movs	r3, r0
    282c:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
    282e:	4a4a      	ldr	r2, [pc, #296]	; (2958 <gsm_getsignalstrength+0x1c8>)
    2830:	68bb      	ldr	r3, [r7, #8]
    2832:	0011      	movs	r1, r2
    2834:	0018      	movs	r0, r3
    2836:	4b47      	ldr	r3, [pc, #284]	; (2954 <gsm_getsignalstrength+0x1c4>)
    2838:	4798      	blx	r3
    283a:	0003      	movs	r3, r0
    283c:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
    283e:	68bb      	ldr	r3, [r7, #8]
    2840:	0018      	movs	r0, r3
    2842:	4b46      	ldr	r3, [pc, #280]	; (295c <gsm_getsignalstrength+0x1cc>)
    2844:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
    2846:	68bb      	ldr	r3, [r7, #8]
    2848:	0018      	movs	r0, r3
    284a:	4b45      	ldr	r3, [pc, #276]	; (2960 <gsm_getsignalstrength+0x1d0>)
    284c:	4798      	blx	r3
    284e:	0002      	movs	r2, r0
    2850:	1dfb      	adds	r3, r7, #7
    2852:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
    2854:	1dfb      	adds	r3, r7, #7
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	d007      	beq.n	286c <gsm_getsignalstrength+0xdc>
    285c:	1dfb      	adds	r3, r7, #7
    285e:	781b      	ldrb	r3, [r3, #0]
    2860:	2b01      	cmp	r3, #1
    2862:	d003      	beq.n	286c <gsm_getsignalstrength+0xdc>
    2864:	1dfb      	adds	r3, r7, #7
    2866:	781b      	ldrb	r3, [r3, #0]
    2868:	2b63      	cmp	r3, #99	; 0x63
    286a:	d104      	bne.n	2876 <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
    286c:	2317      	movs	r3, #23
    286e:	18fb      	adds	r3, r7, r3
    2870:	2200      	movs	r2, #0
    2872:	701a      	strb	r2, [r3, #0]
    2874:	e04e      	b.n	2914 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
    2876:	1dfb      	adds	r3, r7, #7
    2878:	781b      	ldrb	r3, [r3, #0]
    287a:	2b01      	cmp	r3, #1
    287c:	d908      	bls.n	2890 <gsm_getsignalstrength+0x100>
    287e:	1dfb      	adds	r3, r7, #7
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	2b07      	cmp	r3, #7
    2884:	d804      	bhi.n	2890 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
    2886:	2317      	movs	r3, #23
    2888:	18fb      	adds	r3, r7, r3
    288a:	2201      	movs	r2, #1
    288c:	701a      	strb	r2, [r3, #0]
    288e:	e041      	b.n	2914 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
    2890:	1dfb      	adds	r3, r7, #7
    2892:	781b      	ldrb	r3, [r3, #0]
    2894:	2b07      	cmp	r3, #7
    2896:	d908      	bls.n	28aa <gsm_getsignalstrength+0x11a>
    2898:	1dfb      	adds	r3, r7, #7
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	2b0d      	cmp	r3, #13
    289e:	d804      	bhi.n	28aa <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
    28a0:	2317      	movs	r3, #23
    28a2:	18fb      	adds	r3, r7, r3
    28a4:	2202      	movs	r2, #2
    28a6:	701a      	strb	r2, [r3, #0]
    28a8:	e034      	b.n	2914 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
    28aa:	1dfb      	adds	r3, r7, #7
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	2b0d      	cmp	r3, #13
    28b0:	d908      	bls.n	28c4 <gsm_getsignalstrength+0x134>
    28b2:	1dfb      	adds	r3, r7, #7
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	2b13      	cmp	r3, #19
    28b8:	d804      	bhi.n	28c4 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
    28ba:	2317      	movs	r3, #23
    28bc:	18fb      	adds	r3, r7, r3
    28be:	2203      	movs	r2, #3
    28c0:	701a      	strb	r2, [r3, #0]
    28c2:	e027      	b.n	2914 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
    28c4:	1dfb      	adds	r3, r7, #7
    28c6:	781b      	ldrb	r3, [r3, #0]
    28c8:	2b13      	cmp	r3, #19
    28ca:	d908      	bls.n	28de <gsm_getsignalstrength+0x14e>
    28cc:	1dfb      	adds	r3, r7, #7
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	2b19      	cmp	r3, #25
    28d2:	d804      	bhi.n	28de <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
    28d4:	2317      	movs	r3, #23
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	2204      	movs	r2, #4
    28da:	701a      	strb	r2, [r3, #0]
    28dc:	e01a      	b.n	2914 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
    28de:	1dfb      	adds	r3, r7, #7
    28e0:	781b      	ldrb	r3, [r3, #0]
    28e2:	2b19      	cmp	r3, #25
    28e4:	d908      	bls.n	28f8 <gsm_getsignalstrength+0x168>
    28e6:	1dfb      	adds	r3, r7, #7
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	2b1f      	cmp	r3, #31
    28ec:	d804      	bhi.n	28f8 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
    28ee:	2317      	movs	r3, #23
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	2205      	movs	r2, #5
    28f4:	701a      	strb	r2, [r3, #0]
    28f6:	e00d      	b.n	2914 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
    28f8:	2317      	movs	r3, #23
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	2200      	movs	r2, #0
    28fe:	701a      	strb	r2, [r3, #0]
    2900:	e008      	b.n	2914 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
    2902:	2317      	movs	r3, #23
    2904:	18fb      	adds	r3, r7, r3
    2906:	2200      	movs	r2, #0
    2908:	701a      	strb	r2, [r3, #0]
    290a:	e003      	b.n	2914 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
    290c:	2317      	movs	r3, #23
    290e:	18fb      	adds	r3, r7, r3
    2910:	2200      	movs	r2, #0
    2912:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
    2914:	693b      	ldr	r3, [r7, #16]
    2916:	0018      	movs	r0, r3
    2918:	4b05      	ldr	r3, [pc, #20]	; (2930 <gsm_getsignalstrength+0x1a0>)
    291a:	4798      	blx	r3
	
	return sig_strength;
    291c:	2317      	movs	r3, #23
    291e:	18fb      	adds	r3, r7, r3
    2920:	781b      	ldrb	r3, [r3, #0]
}
    2922:	0018      	movs	r0, r3
    2924:	46bd      	mov	sp, r7
    2926:	b006      	add	sp, #24
    2928:	bdb0      	pop	{r4, r5, r7, pc}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	00017c59 	.word	0x00017c59
    2930:	00017cf9 	.word	0x00017cf9
    2934:	00017d67 	.word	0x00017d67
    2938:	00001388 	.word	0x00001388
    293c:	00018a18 	.word	0x00018a18
    2940:	00018b8c 	.word	0x00018b8c
    2944:	000022cd 	.word	0x000022cd
    2948:	00018b94 	.word	0x00018b94
    294c:	00018027 	.word	0x00018027
    2950:	00018b30 	.word	0x00018b30
    2954:	00018059 	.word	0x00018059
    2958:	00018b34 	.word	0x00018b34
    295c:	00002965 	.word	0x00002965
    2960:	00017c4d 	.word	0x00017c4d

00002964 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
    2964:	b580      	push	{r7, lr}
    2966:	b084      	sub	sp, #16
    2968:	af00      	add	r7, sp, #0
    296a:	6078      	str	r0, [r7, #4]
	char* i = source;
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	60fb      	str	r3, [r7, #12]
	char* j = source;
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
    2974:	e00c      	b.n	2990 <RemoveSpaces+0x2c>
	{
		*i = *j++;
    2976:	68bb      	ldr	r3, [r7, #8]
    2978:	1c5a      	adds	r2, r3, #1
    297a:	60ba      	str	r2, [r7, #8]
    297c:	781a      	ldrb	r2, [r3, #0]
    297e:	68fb      	ldr	r3, [r7, #12]
    2980:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
    2982:	68fb      	ldr	r3, [r7, #12]
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2b20      	cmp	r3, #32
    2988:	d002      	beq.n	2990 <RemoveSpaces+0x2c>
		i++;
    298a:	68fb      	ldr	r3, [r7, #12]
    298c:	3301      	adds	r3, #1
    298e:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
    2990:	68bb      	ldr	r3, [r7, #8]
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	2b00      	cmp	r3, #0
    2996:	d1ee      	bne.n	2976 <RemoveSpaces+0x12>
	}
	*i = 0;
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	2200      	movs	r2, #0
    299c:	701a      	strb	r2, [r3, #0]
}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	46bd      	mov	sp, r7
    29a2:	b004      	add	sp, #16
    29a4:	bd80      	pop	{r7, pc}
	...

000029a8 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
    29a8:	b590      	push	{r4, r7, lr}
    29aa:	b083      	sub	sp, #12
    29ac:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
    29ae:	4a06      	ldr	r2, [pc, #24]	; (29c8 <gsm_enable_new_sms_message_indications+0x20>)
    29b0:	4906      	ldr	r1, [pc, #24]	; (29cc <gsm_enable_new_sms_message_indications+0x24>)
    29b2:	4807      	ldr	r0, [pc, #28]	; (29d0 <gsm_enable_new_sms_message_indications+0x28>)
    29b4:	2300      	movs	r3, #0
    29b6:	9300      	str	r3, [sp, #0]
    29b8:	2300      	movs	r3, #0
    29ba:	4c06      	ldr	r4, [pc, #24]	; (29d4 <gsm_enable_new_sms_message_indications+0x2c>)
    29bc:	47a0      	blx	r4
    29be:	0003      	movs	r3, r0
}
    29c0:	0018      	movs	r0, r3
    29c2:	46bd      	mov	sp, r7
    29c4:	b001      	add	sp, #4
    29c6:	bd90      	pop	{r4, r7, pc}
    29c8:	00001388 	.word	0x00001388
    29cc:	00018a18 	.word	0x00018a18
    29d0:	00018b98 	.word	0x00018b98
    29d4:	000022cd 	.word	0x000022cd

000029d8 <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
    29d8:	b5b0      	push	{r4, r5, r7, lr}
    29da:	b088      	sub	sp, #32
    29dc:	af02      	add	r7, sp, #8
    29de:	6078      	str	r0, [r7, #4]
    29e0:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
    29e2:	683b      	ldr	r3, [r7, #0]
    29e4:	0018      	movs	r0, r3
    29e6:	4b3b      	ldr	r3, [pc, #236]	; (2ad4 <gsm_send_sms+0xfc>)
    29e8:	4798      	blx	r3
    29ea:	0003      	movs	r3, r0
    29ec:	2bfa      	cmp	r3, #250	; 0xfa
    29ee:	d901      	bls.n	29f4 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
    29f0:	2303      	movs	r3, #3
    29f2:	e06b      	b.n	2acc <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	0018      	movs	r0, r3
    29f8:	4b36      	ldr	r3, [pc, #216]	; (2ad4 <gsm_send_sms+0xfc>)
    29fa:	4798      	blx	r3
    29fc:	0003      	movs	r3, r0
    29fe:	2b05      	cmp	r3, #5
    2a00:	d801      	bhi.n	2a06 <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
    2a02:	2304      	movs	r3, #4
    2a04:	e062      	b.n	2acc <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
    2a06:	2317      	movs	r3, #23
    2a08:	18fb      	adds	r3, r7, r3
    2a0a:	22fa      	movs	r2, #250	; 0xfa
    2a0c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2a0e:	2317      	movs	r3, #23
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	2101      	movs	r1, #1
    2a16:	0018      	movs	r0, r3
    2a18:	4b2f      	ldr	r3, [pc, #188]	; (2ad8 <gsm_send_sms+0x100>)
    2a1a:	4798      	blx	r3
    2a1c:	0003      	movs	r3, r0
    2a1e:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
    2a20:	693b      	ldr	r3, [r7, #16]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d101      	bne.n	2a2a <gsm_send_sms+0x52>
	{
		return 0;
    2a26:	2300      	movs	r3, #0
    2a28:	e050      	b.n	2acc <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2a2a:	2317      	movs	r3, #23
    2a2c:	18fb      	adds	r3, r7, r3
    2a2e:	781a      	ldrb	r2, [r3, #0]
    2a30:	693b      	ldr	r3, [r7, #16]
    2a32:	2100      	movs	r1, #0
    2a34:	0018      	movs	r0, r3
    2a36:	4b29      	ldr	r3, [pc, #164]	; (2adc <gsm_send_sms+0x104>)
    2a38:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
    2a3a:	2317      	movs	r3, #23
    2a3c:	18fb      	adds	r3, r7, r3
    2a3e:	7819      	ldrb	r1, [r3, #0]
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	4a27      	ldr	r2, [pc, #156]	; (2ae0 <gsm_send_sms+0x108>)
    2a44:	6938      	ldr	r0, [r7, #16]
    2a46:	4c27      	ldr	r4, [pc, #156]	; (2ae4 <gsm_send_sms+0x10c>)
    2a48:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
    2a4a:	4a27      	ldr	r2, [pc, #156]	; (2ae8 <gsm_send_sms+0x110>)
    2a4c:	4927      	ldr	r1, [pc, #156]	; (2aec <gsm_send_sms+0x114>)
    2a4e:	6938      	ldr	r0, [r7, #16]
    2a50:	2300      	movs	r3, #0
    2a52:	9300      	str	r3, [sp, #0]
    2a54:	2300      	movs	r3, #0
    2a56:	4c26      	ldr	r4, [pc, #152]	; (2af0 <gsm_send_sms+0x118>)
    2a58:	47a0      	blx	r4
    2a5a:	1e03      	subs	r3, r0, #0
    2a5c:	d131      	bne.n	2ac2 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
    2a5e:	23fa      	movs	r3, #250	; 0xfa
    2a60:	005b      	lsls	r3, r3, #1
    2a62:	0018      	movs	r0, r3
    2a64:	4b23      	ldr	r3, [pc, #140]	; (2af4 <gsm_send_sms+0x11c>)
    2a66:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
    2a68:	2317      	movs	r3, #23
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	781a      	ldrb	r2, [r3, #0]
    2a6e:	693b      	ldr	r3, [r7, #16]
    2a70:	2100      	movs	r1, #0
    2a72:	0018      	movs	r0, r3
    2a74:	4b19      	ldr	r3, [pc, #100]	; (2adc <gsm_send_sms+0x104>)
    2a76:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
    2a78:	2317      	movs	r3, #23
    2a7a:	18fb      	adds	r3, r7, r3
    2a7c:	7819      	ldrb	r1, [r3, #0]
    2a7e:	683b      	ldr	r3, [r7, #0]
    2a80:	4a1d      	ldr	r2, [pc, #116]	; (2af8 <gsm_send_sms+0x120>)
    2a82:	6938      	ldr	r0, [r7, #16]
    2a84:	4c17      	ldr	r4, [pc, #92]	; (2ae4 <gsm_send_sms+0x10c>)
    2a86:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
    2a88:	230f      	movs	r3, #15
    2a8a:	18fc      	adds	r4, r7, r3
    2a8c:	4a16      	ldr	r2, [pc, #88]	; (2ae8 <gsm_send_sms+0x110>)
    2a8e:	491b      	ldr	r1, [pc, #108]	; (2afc <gsm_send_sms+0x124>)
    2a90:	6938      	ldr	r0, [r7, #16]
    2a92:	2300      	movs	r3, #0
    2a94:	9300      	str	r3, [sp, #0]
    2a96:	2300      	movs	r3, #0
    2a98:	4d15      	ldr	r5, [pc, #84]	; (2af0 <gsm_send_sms+0x118>)
    2a9a:	47a8      	blx	r5
    2a9c:	0003      	movs	r3, r0
    2a9e:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
    2aa0:	230f      	movs	r3, #15
    2aa2:	18fb      	adds	r3, r7, r3
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d105      	bne.n	2ab6 <gsm_send_sms+0xde>
		{
			free(cmdx);
    2aaa:	693b      	ldr	r3, [r7, #16]
    2aac:	0018      	movs	r0, r3
    2aae:	4b14      	ldr	r3, [pc, #80]	; (2b00 <gsm_send_sms+0x128>)
    2ab0:	4798      	blx	r3
			return GSM_ERROR_NONE;
    2ab2:	2300      	movs	r3, #0
    2ab4:	e00a      	b.n	2acc <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
    2ab6:	693b      	ldr	r3, [r7, #16]
    2ab8:	0018      	movs	r0, r3
    2aba:	4b11      	ldr	r3, [pc, #68]	; (2b00 <gsm_send_sms+0x128>)
    2abc:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
    2abe:	2306      	movs	r3, #6
    2ac0:	e004      	b.n	2acc <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
    2ac2:	693b      	ldr	r3, [r7, #16]
    2ac4:	0018      	movs	r0, r3
    2ac6:	4b0e      	ldr	r3, [pc, #56]	; (2b00 <gsm_send_sms+0x128>)
    2ac8:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
    2aca:	2306      	movs	r3, #6
	}
}
    2acc:	0018      	movs	r0, r3
    2ace:	46bd      	mov	sp, r7
    2ad0:	b006      	add	sp, #24
    2ad2:	bdb0      	pop	{r4, r5, r7, pc}
    2ad4:	00017ff7 	.word	0x00017ff7
    2ad8:	00017c59 	.word	0x00017c59
    2adc:	00017d67 	.word	0x00017d67
    2ae0:	00018bc0 	.word	0x00018bc0
    2ae4:	00017f09 	.word	0x00017f09
    2ae8:	0000ea60 	.word	0x0000ea60
    2aec:	00018bd0 	.word	0x00018bd0
    2af0:	000022cd 	.word	0x000022cd
    2af4:	0000f0a9 	.word	0x0000f0a9
    2af8:	00018bd4 	.word	0x00018bd4
    2afc:	00018a18 	.word	0x00018a18
    2b00:	00017cf9 	.word	0x00017cf9

00002b04 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
    2b04:	b590      	push	{r4, r7, lr}
    2b06:	b08f      	sub	sp, #60	; 0x3c
    2b08:	af02      	add	r7, sp, #8
    2b0a:	60b9      	str	r1, [r7, #8]
    2b0c:	0011      	movs	r1, r2
    2b0e:	607b      	str	r3, [r7, #4]
    2b10:	230f      	movs	r3, #15
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	1c02      	adds	r2, r0, #0
    2b16:	701a      	strb	r2, [r3, #0]
    2b18:	230e      	movs	r3, #14
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	1c0a      	adds	r2, r1, #0
    2b1e:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
    2b20:	232f      	movs	r3, #47	; 0x2f
    2b22:	18fb      	adds	r3, r7, r3
    2b24:	22e6      	movs	r2, #230	; 0xe6
    2b26:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2b28:	232f      	movs	r3, #47	; 0x2f
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	2101      	movs	r1, #1
    2b30:	0018      	movs	r0, r3
    2b32:	4b6e      	ldr	r3, [pc, #440]	; (2cec <gsm_read_sms+0x1e8>)
    2b34:	4798      	blx	r3
    2b36:	0003      	movs	r3, r0
    2b38:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
    2b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d105      	bne.n	2b4c <gsm_read_sms+0x48>
	{
		free(cmdx);
    2b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b42:	0018      	movs	r0, r3
    2b44:	4b6a      	ldr	r3, [pc, #424]	; (2cf0 <gsm_read_sms+0x1ec>)
    2b46:	4798      	blx	r3
		return 0;
    2b48:	2300      	movs	r3, #0
    2b4a:	e0ca      	b.n	2ce2 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2b4c:	232f      	movs	r3, #47	; 0x2f
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	781a      	ldrb	r2, [r3, #0]
    2b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b54:	2100      	movs	r1, #0
    2b56:	0018      	movs	r0, r3
    2b58:	4b66      	ldr	r3, [pc, #408]	; (2cf4 <gsm_read_sms+0x1f0>)
    2b5a:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
    2b5c:	2310      	movs	r3, #16
    2b5e:	18fb      	adds	r3, r7, r3
    2b60:	0018      	movs	r0, r3
    2b62:	230a      	movs	r3, #10
    2b64:	001a      	movs	r2, r3
    2b66:	2100      	movs	r1, #0
    2b68:	4b62      	ldr	r3, [pc, #392]	; (2cf4 <gsm_read_sms+0x1f0>)
    2b6a:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
    2b6c:	232f      	movs	r3, #47	; 0x2f
    2b6e:	18fb      	adds	r3, r7, r3
    2b70:	7819      	ldrb	r1, [r3, #0]
    2b72:	230f      	movs	r3, #15
    2b74:	18fb      	adds	r3, r7, r3
    2b76:	781b      	ldrb	r3, [r3, #0]
    2b78:	4a5f      	ldr	r2, [pc, #380]	; (2cf8 <gsm_read_sms+0x1f4>)
    2b7a:	2010      	movs	r0, #16
    2b7c:	1838      	adds	r0, r7, r0
    2b7e:	4c5f      	ldr	r4, [pc, #380]	; (2cfc <gsm_read_sms+0x1f8>)
    2b80:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
    2b82:	232f      	movs	r3, #47	; 0x2f
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	781a      	ldrb	r2, [r3, #0]
    2b88:	4c5d      	ldr	r4, [pc, #372]	; (2d00 <gsm_read_sms+0x1fc>)
    2b8a:	495e      	ldr	r1, [pc, #376]	; (2d04 <gsm_read_sms+0x200>)
    2b8c:	2310      	movs	r3, #16
    2b8e:	18f8      	adds	r0, r7, r3
    2b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b92:	9300      	str	r3, [sp, #0]
    2b94:	0013      	movs	r3, r2
    2b96:	0022      	movs	r2, r4
    2b98:	4c5b      	ldr	r4, [pc, #364]	; (2d08 <gsm_read_sms+0x204>)
    2b9a:	47a0      	blx	r4
    2b9c:	1e03      	subs	r3, r0, #0
    2b9e:	d000      	beq.n	2ba2 <gsm_read_sms+0x9e>
    2ba0:	e094      	b.n	2ccc <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
    2ba2:	4a5a      	ldr	r2, [pc, #360]	; (2d0c <gsm_read_sms+0x208>)
    2ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ba6:	0011      	movs	r1, r2
    2ba8:	0018      	movs	r0, r3
    2baa:	4b59      	ldr	r3, [pc, #356]	; (2d10 <gsm_read_sms+0x20c>)
    2bac:	4798      	blx	r3
    2bae:	0003      	movs	r3, r0
    2bb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
    2bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d100      	bne.n	2bba <gsm_read_sms+0xb6>
    2bb8:	e082      	b.n	2cc0 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
    2bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bbc:	212c      	movs	r1, #44	; 0x2c
    2bbe:	0018      	movs	r0, r3
    2bc0:	4b54      	ldr	r3, [pc, #336]	; (2d14 <gsm_read_sms+0x210>)
    2bc2:	4798      	blx	r3
    2bc4:	0003      	movs	r3, r0
    2bc6:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
    2bc8:	6a3b      	ldr	r3, [r7, #32]
    2bca:	3302      	adds	r3, #2
    2bcc:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
    2bce:	69fb      	ldr	r3, [r7, #28]
    2bd0:	2122      	movs	r1, #34	; 0x22
    2bd2:	0018      	movs	r0, r3
    2bd4:	4b4f      	ldr	r3, [pc, #316]	; (2d14 <gsm_read_sms+0x210>)
    2bd6:	4798      	blx	r3
    2bd8:	0003      	movs	r3, r0
    2bda:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
    2bdc:	6a3b      	ldr	r3, [r7, #32]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d02a      	beq.n	2c38 <gsm_read_sms+0x134>
			{
				*p_char = 0;
    2be2:	6a3b      	ldr	r3, [r7, #32]
    2be4:	2200      	movs	r2, #0
    2be6:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
    2be8:	69fb      	ldr	r3, [r7, #28]
    2bea:	0018      	movs	r0, r3
    2bec:	4b4a      	ldr	r3, [pc, #296]	; (2d18 <gsm_read_sms+0x214>)
    2bee:	4798      	blx	r3
    2bf0:	0002      	movs	r2, r0
    2bf2:	231b      	movs	r3, #27
    2bf4:	18fb      	adds	r3, r7, r3
    2bf6:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
    2bf8:	231b      	movs	r3, #27
    2bfa:	18fa      	adds	r2, r7, r3
    2bfc:	230e      	movs	r3, #14
    2bfe:	18fb      	adds	r3, r7, r3
    2c00:	7812      	ldrb	r2, [r2, #0]
    2c02:	781b      	ldrb	r3, [r3, #0]
    2c04:	429a      	cmp	r2, r3
    2c06:	d206      	bcs.n	2c16 <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
    2c08:	69fa      	ldr	r2, [r7, #28]
    2c0a:	68bb      	ldr	r3, [r7, #8]
    2c0c:	0011      	movs	r1, r2
    2c0e:	0018      	movs	r0, r3
    2c10:	4b42      	ldr	r3, [pc, #264]	; (2d1c <gsm_read_sms+0x218>)
    2c12:	4798      	blx	r3
    2c14:	e010      	b.n	2c38 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
    2c16:	230e      	movs	r3, #14
    2c18:	18fb      	adds	r3, r7, r3
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	3b01      	subs	r3, #1
    2c1e:	001a      	movs	r2, r3
    2c20:	69f9      	ldr	r1, [r7, #28]
    2c22:	68bb      	ldr	r3, [r7, #8]
    2c24:	0018      	movs	r0, r3
    2c26:	4b3e      	ldr	r3, [pc, #248]	; (2d20 <gsm_read_sms+0x21c>)
    2c28:	4798      	blx	r3
					phone_number[max_phone_len]=0;
    2c2a:	230e      	movs	r3, #14
    2c2c:	18fb      	adds	r3, r7, r3
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	68ba      	ldr	r2, [r7, #8]
    2c32:	18d3      	adds	r3, r2, r3
    2c34:	2200      	movs	r2, #0
    2c36:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
    2c38:	6a3b      	ldr	r3, [r7, #32]
    2c3a:	3301      	adds	r3, #1
    2c3c:	210a      	movs	r1, #10
    2c3e:	0018      	movs	r0, r3
    2c40:	4b34      	ldr	r3, [pc, #208]	; (2d14 <gsm_read_sms+0x210>)
    2c42:	4798      	blx	r3
    2c44:	0003      	movs	r3, r0
    2c46:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
    2c48:	6a3b      	ldr	r3, [r7, #32]
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d044      	beq.n	2cd8 <gsm_read_sms+0x1d4>
			{
				p_char++;
    2c4e:	6a3b      	ldr	r3, [r7, #32]
    2c50:	3301      	adds	r3, #1
    2c52:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
    2c54:	6a3b      	ldr	r3, [r7, #32]
    2c56:	210d      	movs	r1, #13
    2c58:	0018      	movs	r0, r3
    2c5a:	4b2e      	ldr	r3, [pc, #184]	; (2d14 <gsm_read_sms+0x210>)
    2c5c:	4798      	blx	r3
    2c5e:	0003      	movs	r3, r0
    2c60:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
    2c62:	69fb      	ldr	r3, [r7, #28]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d002      	beq.n	2c6e <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
    2c68:	69fb      	ldr	r3, [r7, #28]
    2c6a:	2200      	movs	r2, #0
    2c6c:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
    2c6e:	6a3b      	ldr	r3, [r7, #32]
    2c70:	0018      	movs	r0, r3
    2c72:	4b29      	ldr	r3, [pc, #164]	; (2d18 <gsm_read_sms+0x214>)
    2c74:	4798      	blx	r3
    2c76:	0002      	movs	r2, r0
    2c78:	231b      	movs	r3, #27
    2c7a:	18fb      	adds	r3, r7, r3
    2c7c:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
    2c7e:	231b      	movs	r3, #27
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	2240      	movs	r2, #64	; 0x40
    2c84:	18b9      	adds	r1, r7, r2
    2c86:	781a      	ldrb	r2, [r3, #0]
    2c88:	780b      	ldrb	r3, [r1, #0]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	d206      	bcs.n	2c9c <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
    2c8e:	6a3a      	ldr	r2, [r7, #32]
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	0011      	movs	r1, r2
    2c94:	0018      	movs	r0, r3
    2c96:	4b21      	ldr	r3, [pc, #132]	; (2d1c <gsm_read_sms+0x218>)
    2c98:	4798      	blx	r3
    2c9a:	e01d      	b.n	2cd8 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
    2c9c:	2340      	movs	r3, #64	; 0x40
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	781b      	ldrb	r3, [r3, #0]
    2ca2:	3b01      	subs	r3, #1
    2ca4:	001a      	movs	r2, r3
    2ca6:	6a39      	ldr	r1, [r7, #32]
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	0018      	movs	r0, r3
    2cac:	4b1c      	ldr	r3, [pc, #112]	; (2d20 <gsm_read_sms+0x21c>)
    2cae:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
    2cb0:	2340      	movs	r3, #64	; 0x40
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	687a      	ldr	r2, [r7, #4]
    2cb8:	18d3      	adds	r3, r2, r3
    2cba:	2200      	movs	r2, #0
    2cbc:	701a      	strb	r2, [r3, #0]
    2cbe:	e00b      	b.n	2cd8 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
    2cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cc2:	0018      	movs	r0, r3
    2cc4:	4b0a      	ldr	r3, [pc, #40]	; (2cf0 <gsm_read_sms+0x1ec>)
    2cc6:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
    2cc8:	230c      	movs	r3, #12
    2cca:	e00a      	b.n	2ce2 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
    2ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cce:	0018      	movs	r0, r3
    2cd0:	4b07      	ldr	r3, [pc, #28]	; (2cf0 <gsm_read_sms+0x1ec>)
    2cd2:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
    2cd4:	230c      	movs	r3, #12
    2cd6:	e004      	b.n	2ce2 <gsm_read_sms+0x1de>
	}
	free(cmdx);
    2cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cda:	0018      	movs	r0, r3
    2cdc:	4b04      	ldr	r3, [pc, #16]	; (2cf0 <gsm_read_sms+0x1ec>)
    2cde:	4798      	blx	r3
	return GSM_ERROR_NONE;
    2ce0:	2300      	movs	r3, #0
}
    2ce2:	0018      	movs	r0, r3
    2ce4:	46bd      	mov	sp, r7
    2ce6:	b00d      	add	sp, #52	; 0x34
    2ce8:	bd90      	pop	{r4, r7, pc}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	00017c59 	.word	0x00017c59
    2cf0:	00017cf9 	.word	0x00017cf9
    2cf4:	00017d67 	.word	0x00017d67
    2cf8:	00018c20 	.word	0x00018c20
    2cfc:	00017f09 	.word	0x00017f09
    2d00:	00001388 	.word	0x00001388
    2d04:	00018a18 	.word	0x00018a18
    2d08:	000022cd 	.word	0x000022cd
    2d0c:	00018c2c 	.word	0x00018c2c
    2d10:	00018027 	.word	0x00018027
    2d14:	00017fcb 	.word	0x00017fcb
    2d18:	00017ff7 	.word	0x00017ff7
    2d1c:	00017fe7 	.word	0x00017fe7
    2d20:	00017d31 	.word	0x00017d31

00002d24 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
    2d24:	b5b0      	push	{r4, r5, r7, lr}
    2d26:	b088      	sub	sp, #32
    2d28:	af02      	add	r7, sp, #8
    2d2a:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2d2c:	2317      	movs	r3, #23
    2d2e:	18fb      	adds	r3, r7, r3
    2d30:	221e      	movs	r2, #30
    2d32:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2d34:	2317      	movs	r3, #23
    2d36:	18fb      	adds	r3, r7, r3
    2d38:	781b      	ldrb	r3, [r3, #0]
    2d3a:	2101      	movs	r1, #1
    2d3c:	0018      	movs	r0, r3
    2d3e:	4b18      	ldr	r3, [pc, #96]	; (2da0 <gsm_call_to_dial_a_number+0x7c>)
    2d40:	4798      	blx	r3
    2d42:	0003      	movs	r3, r0
    2d44:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2d46:	693b      	ldr	r3, [r7, #16]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d101      	bne.n	2d50 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
    2d4c:	2300      	movs	r3, #0
    2d4e:	e023      	b.n	2d98 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2d50:	2317      	movs	r3, #23
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	781a      	ldrb	r2, [r3, #0]
    2d56:	693b      	ldr	r3, [r7, #16]
    2d58:	2100      	movs	r1, #0
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b11      	ldr	r3, [pc, #68]	; (2da4 <gsm_call_to_dial_a_number+0x80>)
    2d5e:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
    2d60:	2317      	movs	r3, #23
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	7819      	ldrb	r1, [r3, #0]
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	4a0f      	ldr	r2, [pc, #60]	; (2da8 <gsm_call_to_dial_a_number+0x84>)
    2d6a:	6938      	ldr	r0, [r7, #16]
    2d6c:	4c0f      	ldr	r4, [pc, #60]	; (2dac <gsm_call_to_dial_a_number+0x88>)
    2d6e:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
    2d70:	230f      	movs	r3, #15
    2d72:	18fc      	adds	r4, r7, r3
    2d74:	23fa      	movs	r3, #250	; 0xfa
    2d76:	00da      	lsls	r2, r3, #3
    2d78:	490d      	ldr	r1, [pc, #52]	; (2db0 <gsm_call_to_dial_a_number+0x8c>)
    2d7a:	6938      	ldr	r0, [r7, #16]
    2d7c:	2300      	movs	r3, #0
    2d7e:	9300      	str	r3, [sp, #0]
    2d80:	2300      	movs	r3, #0
    2d82:	4d0c      	ldr	r5, [pc, #48]	; (2db4 <gsm_call_to_dial_a_number+0x90>)
    2d84:	47a8      	blx	r5
    2d86:	0003      	movs	r3, r0
    2d88:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2d8a:	693b      	ldr	r3, [r7, #16]
    2d8c:	0018      	movs	r0, r3
    2d8e:	4b0a      	ldr	r3, [pc, #40]	; (2db8 <gsm_call_to_dial_a_number+0x94>)
    2d90:	4798      	blx	r3
	return err;
    2d92:	230f      	movs	r3, #15
    2d94:	18fb      	adds	r3, r7, r3
    2d96:	781b      	ldrb	r3, [r3, #0]
	
}
    2d98:	0018      	movs	r0, r3
    2d9a:	46bd      	mov	sp, r7
    2d9c:	b006      	add	sp, #24
    2d9e:	bdb0      	pop	{r4, r5, r7, pc}
    2da0:	00017c59 	.word	0x00017c59
    2da4:	00017d67 	.word	0x00017d67
    2da8:	00018c34 	.word	0x00018c34
    2dac:	00017f09 	.word	0x00017f09
    2db0:	00018a18 	.word	0x00018a18
    2db4:	000022cd 	.word	0x000022cd
    2db8:	00017cf9 	.word	0x00017cf9

00002dbc <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
    2dbc:	b590      	push	{r4, r7, lr}
    2dbe:	b083      	sub	sp, #12
    2dc0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2dc2:	4a06      	ldr	r2, [pc, #24]	; (2ddc <gsm_answer_an_incomming_call+0x20>)
    2dc4:	4906      	ldr	r1, [pc, #24]	; (2de0 <gsm_answer_an_incomming_call+0x24>)
    2dc6:	4807      	ldr	r0, [pc, #28]	; (2de4 <gsm_answer_an_incomming_call+0x28>)
    2dc8:	2300      	movs	r3, #0
    2dca:	9300      	str	r3, [sp, #0]
    2dcc:	2300      	movs	r3, #0
    2dce:	4c06      	ldr	r4, [pc, #24]	; (2de8 <gsm_answer_an_incomming_call+0x2c>)
    2dd0:	47a0      	blx	r4
    2dd2:	0003      	movs	r3, r0
}
    2dd4:	0018      	movs	r0, r3
    2dd6:	46bd      	mov	sp, r7
    2dd8:	b001      	add	sp, #4
    2dda:	bd90      	pop	{r4, r7, pc}
    2ddc:	00001388 	.word	0x00001388
    2de0:	00018a18 	.word	0x00018a18
    2de4:	00018c3c 	.word	0x00018c3c
    2de8:	000022cd 	.word	0x000022cd

00002dec <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
    2dec:	b590      	push	{r4, r7, lr}
    2dee:	b083      	sub	sp, #12
    2df0:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
    2df2:	4a06      	ldr	r2, [pc, #24]	; (2e0c <gsm_enable_network_time_update+0x20>)
    2df4:	4906      	ldr	r1, [pc, #24]	; (2e10 <gsm_enable_network_time_update+0x24>)
    2df6:	4807      	ldr	r0, [pc, #28]	; (2e14 <gsm_enable_network_time_update+0x28>)
    2df8:	2300      	movs	r3, #0
    2dfa:	9300      	str	r3, [sp, #0]
    2dfc:	2300      	movs	r3, #0
    2dfe:	4c06      	ldr	r4, [pc, #24]	; (2e18 <gsm_enable_network_time_update+0x2c>)
    2e00:	47a0      	blx	r4
    2e02:	0003      	movs	r3, r0
}
    2e04:	0018      	movs	r0, r3
    2e06:	46bd      	mov	sp, r7
    2e08:	b001      	add	sp, #4
    2e0a:	bd90      	pop	{r4, r7, pc}
    2e0c:	00002710 	.word	0x00002710
    2e10:	00018a18 	.word	0x00018a18
    2e14:	00018c44 	.word	0x00018c44
    2e18:	000022cd 	.word	0x000022cd

00002e1c <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
    2e1c:	b590      	push	{r4, r7, lr}
    2e1e:	b083      	sub	sp, #12
    2e20:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2e22:	4a06      	ldr	r2, [pc, #24]	; (2e3c <gsm_enable_DTMF_detection+0x20>)
    2e24:	4906      	ldr	r1, [pc, #24]	; (2e40 <gsm_enable_DTMF_detection+0x24>)
    2e26:	4807      	ldr	r0, [pc, #28]	; (2e44 <gsm_enable_DTMF_detection+0x28>)
    2e28:	2300      	movs	r3, #0
    2e2a:	9300      	str	r3, [sp, #0]
    2e2c:	2300      	movs	r3, #0
    2e2e:	4c06      	ldr	r4, [pc, #24]	; (2e48 <gsm_enable_DTMF_detection+0x2c>)
    2e30:	47a0      	blx	r4
    2e32:	0003      	movs	r3, r0
}
    2e34:	0018      	movs	r0, r3
    2e36:	46bd      	mov	sp, r7
    2e38:	b001      	add	sp, #4
    2e3a:	bd90      	pop	{r4, r7, pc}
    2e3c:	00001388 	.word	0x00001388
    2e40:	00018a18 	.word	0x00018a18
    2e44:	00018c5c 	.word	0x00018c5c
    2e48:	000022cd 	.word	0x000022cd

00002e4c <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
    2e4c:	b5b0      	push	{r4, r5, r7, lr}
    2e4e:	b088      	sub	sp, #32
    2e50:	af02      	add	r7, sp, #8
    2e52:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2e54:	2317      	movs	r3, #23
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	221e      	movs	r2, #30
    2e5a:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2e5c:	2317      	movs	r3, #23
    2e5e:	18fb      	adds	r3, r7, r3
    2e60:	781b      	ldrb	r3, [r3, #0]
    2e62:	2101      	movs	r1, #1
    2e64:	0018      	movs	r0, r3
    2e66:	4b18      	ldr	r3, [pc, #96]	; (2ec8 <gsm_send_DTMF_Tone+0x7c>)
    2e68:	4798      	blx	r3
    2e6a:	0003      	movs	r3, r0
    2e6c:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2e6e:	693b      	ldr	r3, [r7, #16]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d101      	bne.n	2e78 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
    2e74:	2300      	movs	r3, #0
    2e76:	e022      	b.n	2ebe <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2e78:	2317      	movs	r3, #23
    2e7a:	18fb      	adds	r3, r7, r3
    2e7c:	781a      	ldrb	r2, [r3, #0]
    2e7e:	693b      	ldr	r3, [r7, #16]
    2e80:	2100      	movs	r1, #0
    2e82:	0018      	movs	r0, r3
    2e84:	4b11      	ldr	r3, [pc, #68]	; (2ecc <gsm_send_DTMF_Tone+0x80>)
    2e86:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
    2e88:	2317      	movs	r3, #23
    2e8a:	18fb      	adds	r3, r7, r3
    2e8c:	7819      	ldrb	r1, [r3, #0]
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	4a0f      	ldr	r2, [pc, #60]	; (2ed0 <gsm_send_DTMF_Tone+0x84>)
    2e92:	6938      	ldr	r0, [r7, #16]
    2e94:	4c0f      	ldr	r4, [pc, #60]	; (2ed4 <gsm_send_DTMF_Tone+0x88>)
    2e96:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
    2e98:	230f      	movs	r3, #15
    2e9a:	18fc      	adds	r4, r7, r3
    2e9c:	4a0e      	ldr	r2, [pc, #56]	; (2ed8 <gsm_send_DTMF_Tone+0x8c>)
    2e9e:	490f      	ldr	r1, [pc, #60]	; (2edc <gsm_send_DTMF_Tone+0x90>)
    2ea0:	6938      	ldr	r0, [r7, #16]
    2ea2:	2300      	movs	r3, #0
    2ea4:	9300      	str	r3, [sp, #0]
    2ea6:	2300      	movs	r3, #0
    2ea8:	4d0d      	ldr	r5, [pc, #52]	; (2ee0 <gsm_send_DTMF_Tone+0x94>)
    2eaa:	47a8      	blx	r5
    2eac:	0003      	movs	r3, r0
    2eae:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2eb0:	693b      	ldr	r3, [r7, #16]
    2eb2:	0018      	movs	r0, r3
    2eb4:	4b0b      	ldr	r3, [pc, #44]	; (2ee4 <gsm_send_DTMF_Tone+0x98>)
    2eb6:	4798      	blx	r3
	return err;
    2eb8:	230f      	movs	r3, #15
    2eba:	18fb      	adds	r3, r7, r3
    2ebc:	781b      	ldrb	r3, [r3, #0]
}
    2ebe:	0018      	movs	r0, r3
    2ec0:	46bd      	mov	sp, r7
    2ec2:	b006      	add	sp, #24
    2ec4:	bdb0      	pop	{r4, r5, r7, pc}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	00017c59 	.word	0x00017c59
    2ecc:	00017d67 	.word	0x00017d67
    2ed0:	00018c68 	.word	0x00018c68
    2ed4:	00017f09 	.word	0x00017f09
    2ed8:	00001388 	.word	0x00001388
    2edc:	00018a18 	.word	0x00018a18
    2ee0:	000022cd 	.word	0x000022cd
    2ee4:	00017cf9 	.word	0x00017cf9

00002ee8 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
    2ee8:	b590      	push	{r4, r7, lr}
    2eea:	b083      	sub	sp, #12
    2eec:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2eee:	4a06      	ldr	r2, [pc, #24]	; (2f08 <gsm_hangup_call+0x20>)
    2ef0:	4906      	ldr	r1, [pc, #24]	; (2f0c <gsm_hangup_call+0x24>)
    2ef2:	4807      	ldr	r0, [pc, #28]	; (2f10 <gsm_hangup_call+0x28>)
    2ef4:	2300      	movs	r3, #0
    2ef6:	9300      	str	r3, [sp, #0]
    2ef8:	2300      	movs	r3, #0
    2efa:	4c06      	ldr	r4, [pc, #24]	; (2f14 <gsm_hangup_call+0x2c>)
    2efc:	47a0      	blx	r4
    2efe:	0003      	movs	r3, r0
}
    2f00:	0018      	movs	r0, r3
    2f02:	46bd      	mov	sp, r7
    2f04:	b001      	add	sp, #4
    2f06:	bd90      	pop	{r4, r7, pc}
    2f08:	00001388 	.word	0x00001388
    2f0c:	00018a18 	.word	0x00018a18
    2f10:	00018c78 	.word	0x00018c78
    2f14:	000022cd 	.word	0x000022cd

00002f18 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
    2f18:	b590      	push	{r4, r7, lr}
    2f1a:	b083      	sub	sp, #12
    2f1c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
    2f1e:	4a06      	ldr	r2, [pc, #24]	; (2f38 <gsm_disable_call_waiting+0x20>)
    2f20:	4906      	ldr	r1, [pc, #24]	; (2f3c <gsm_disable_call_waiting+0x24>)
    2f22:	4807      	ldr	r0, [pc, #28]	; (2f40 <gsm_disable_call_waiting+0x28>)
    2f24:	2300      	movs	r3, #0
    2f26:	9300      	str	r3, [sp, #0]
    2f28:	2300      	movs	r3, #0
    2f2a:	4c06      	ldr	r4, [pc, #24]	; (2f44 <gsm_disable_call_waiting+0x2c>)
    2f2c:	47a0      	blx	r4
    2f2e:	0003      	movs	r3, r0
}
    2f30:	0018      	movs	r0, r3
    2f32:	46bd      	mov	sp, r7
    2f34:	b001      	add	sp, #4
    2f36:	bd90      	pop	{r4, r7, pc}
    2f38:	00004650 	.word	0x00004650
    2f3c:	00018a18 	.word	0x00018a18
    2f40:	00018c84 	.word	0x00018c84
    2f44:	000022cd 	.word	0x000022cd

00002f48 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
    2f48:	b590      	push	{r4, r7, lr}
    2f4a:	b083      	sub	sp, #12
    2f4c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
    2f4e:	23fa      	movs	r3, #250	; 0xfa
    2f50:	00da      	lsls	r2, r3, #3
    2f52:	4906      	ldr	r1, [pc, #24]	; (2f6c <gsm_stop_play_record_file+0x24>)
    2f54:	4806      	ldr	r0, [pc, #24]	; (2f70 <gsm_stop_play_record_file+0x28>)
    2f56:	2300      	movs	r3, #0
    2f58:	9300      	str	r3, [sp, #0]
    2f5a:	2300      	movs	r3, #0
    2f5c:	4c05      	ldr	r4, [pc, #20]	; (2f74 <gsm_stop_play_record_file+0x2c>)
    2f5e:	47a0      	blx	r4
    2f60:	0003      	movs	r3, r0
}
    2f62:	0018      	movs	r0, r3
    2f64:	46bd      	mov	sp, r7
    2f66:	b001      	add	sp, #4
    2f68:	bd90      	pop	{r4, r7, pc}
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	00018a18 	.word	0x00018a18
    2f70:	00018cb4 	.word	0x00018cb4
    2f74:	000022cd 	.word	0x000022cd

00002f78 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
    2f78:	b590      	push	{r4, r7, lr}
    2f7a:	b087      	sub	sp, #28
    2f7c:	af02      	add	r7, sp, #8
    2f7e:	6078      	str	r0, [r7, #4]
    2f80:	000a      	movs	r2, r1
    2f82:	1cfb      	adds	r3, r7, #3
    2f84:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
    2f86:	230f      	movs	r3, #15
    2f88:	18fb      	adds	r3, r7, r3
    2f8a:	2200      	movs	r2, #0
    2f8c:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
    2f8e:	1cfb      	adds	r3, r7, #3
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	2b00      	cmp	r3, #0
    2f94:	d003      	beq.n	2f9e <gsm_play_record_file+0x26>
	{
		repeat = 1;
    2f96:	230f      	movs	r3, #15
    2f98:	18fb      	adds	r3, r7, r3
    2f9a:	2201      	movs	r2, #1
    2f9c:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
    2f9e:	230e      	movs	r3, #14
    2fa0:	18fb      	adds	r3, r7, r3
    2fa2:	2232      	movs	r2, #50	; 0x32
    2fa4:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2fa6:	230e      	movs	r3, #14
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	2101      	movs	r1, #1
    2fae:	0018      	movs	r0, r3
    2fb0:	4b17      	ldr	r3, [pc, #92]	; (3010 <gsm_play_record_file+0x98>)
    2fb2:	4798      	blx	r3
    2fb4:	0003      	movs	r3, r0
    2fb6:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
    2fb8:	68bb      	ldr	r3, [r7, #8]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d101      	bne.n	2fc2 <gsm_play_record_file+0x4a>
	{
		return 0;
    2fbe:	2300      	movs	r3, #0
    2fc0:	e022      	b.n	3008 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2fc2:	230e      	movs	r3, #14
    2fc4:	18fb      	adds	r3, r7, r3
    2fc6:	781a      	ldrb	r2, [r3, #0]
    2fc8:	68bb      	ldr	r3, [r7, #8]
    2fca:	2100      	movs	r1, #0
    2fcc:	0018      	movs	r0, r3
    2fce:	4b11      	ldr	r3, [pc, #68]	; (3014 <gsm_play_record_file+0x9c>)
    2fd0:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
    2fd2:	230e      	movs	r3, #14
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	7819      	ldrb	r1, [r3, #0]
    2fd8:	230f      	movs	r3, #15
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	781b      	ldrb	r3, [r3, #0]
    2fde:	687c      	ldr	r4, [r7, #4]
    2fe0:	4a0d      	ldr	r2, [pc, #52]	; (3018 <gsm_play_record_file+0xa0>)
    2fe2:	68b8      	ldr	r0, [r7, #8]
    2fe4:	9300      	str	r3, [sp, #0]
    2fe6:	0023      	movs	r3, r4
    2fe8:	4c0c      	ldr	r4, [pc, #48]	; (301c <gsm_play_record_file+0xa4>)
    2fea:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
    2fec:	23fa      	movs	r3, #250	; 0xfa
    2fee:	00da      	lsls	r2, r3, #3
    2ff0:	490b      	ldr	r1, [pc, #44]	; (3020 <gsm_play_record_file+0xa8>)
    2ff2:	68b8      	ldr	r0, [r7, #8]
    2ff4:	2300      	movs	r3, #0
    2ff6:	9300      	str	r3, [sp, #0]
    2ff8:	2300      	movs	r3, #0
    2ffa:	4c0a      	ldr	r4, [pc, #40]	; (3024 <gsm_play_record_file+0xac>)
    2ffc:	47a0      	blx	r4
	free(cmdx);
    2ffe:	68bb      	ldr	r3, [r7, #8]
    3000:	0018      	movs	r0, r3
    3002:	4b09      	ldr	r3, [pc, #36]	; (3028 <gsm_play_record_file+0xb0>)
    3004:	4798      	blx	r3
	return GSM_ERROR_NONE;
    3006:	2300      	movs	r3, #0
	
}
    3008:	0018      	movs	r0, r3
    300a:	46bd      	mov	sp, r7
    300c:	b005      	add	sp, #20
    300e:	bd90      	pop	{r4, r7, pc}
    3010:	00017c59 	.word	0x00017c59
    3014:	00017d67 	.word	0x00017d67
    3018:	00018cc0 	.word	0x00018cc0
    301c:	00017f09 	.word	0x00017f09
    3020:	00018a18 	.word	0x00018a18
    3024:	000022cd 	.word	0x000022cd
    3028:	00017cf9 	.word	0x00017cf9

0000302c <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
    302c:	b5b0      	push	{r4, r5, r7, lr}
    302e:	b086      	sub	sp, #24
    3030:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
    3032:	230f      	movs	r3, #15
    3034:	18fb      	adds	r3, r7, r3
    3036:	2246      	movs	r2, #70	; 0x46
    3038:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    303a:	230f      	movs	r3, #15
    303c:	18fb      	adds	r3, r7, r3
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	2101      	movs	r1, #1
    3042:	0018      	movs	r0, r3
    3044:	4b57      	ldr	r3, [pc, #348]	; (31a4 <gsm_get_internal_rtc_time+0x178>)
    3046:	4798      	blx	r3
    3048:	0003      	movs	r3, r0
    304a:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
    304c:	68bb      	ldr	r3, [r7, #8]
    304e:	2b00      	cmp	r3, #0
    3050:	d105      	bne.n	305e <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
    3052:	68bb      	ldr	r3, [r7, #8]
    3054:	0018      	movs	r0, r3
    3056:	4b54      	ldr	r3, [pc, #336]	; (31a8 <gsm_get_internal_rtc_time+0x17c>)
    3058:	4798      	blx	r3
		return 0;
    305a:	2300      	movs	r3, #0
    305c:	e09d      	b.n	319a <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    305e:	230f      	movs	r3, #15
    3060:	18fb      	adds	r3, r7, r3
    3062:	781a      	ldrb	r2, [r3, #0]
    3064:	68bb      	ldr	r3, [r7, #8]
    3066:	2100      	movs	r1, #0
    3068:	0018      	movs	r0, r3
    306a:	4b50      	ldr	r3, [pc, #320]	; (31ac <gsm_get_internal_rtc_time+0x180>)
    306c:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
    306e:	1dfc      	adds	r4, r7, #7
    3070:	230f      	movs	r3, #15
    3072:	18fb      	adds	r3, r7, r3
    3074:	781a      	ldrb	r2, [r3, #0]
    3076:	4d4e      	ldr	r5, [pc, #312]	; (31b0 <gsm_get_internal_rtc_time+0x184>)
    3078:	494e      	ldr	r1, [pc, #312]	; (31b4 <gsm_get_internal_rtc_time+0x188>)
    307a:	484f      	ldr	r0, [pc, #316]	; (31b8 <gsm_get_internal_rtc_time+0x18c>)
    307c:	68bb      	ldr	r3, [r7, #8]
    307e:	9300      	str	r3, [sp, #0]
    3080:	0013      	movs	r3, r2
    3082:	002a      	movs	r2, r5
    3084:	4d4d      	ldr	r5, [pc, #308]	; (31bc <gsm_get_internal_rtc_time+0x190>)
    3086:	47a8      	blx	r5
    3088:	0003      	movs	r3, r0
    308a:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
    308c:	1dfb      	adds	r3, r7, #7
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	2b00      	cmp	r3, #0
    3092:	d16a      	bne.n	316a <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
    3094:	4a4a      	ldr	r2, [pc, #296]	; (31c0 <gsm_get_internal_rtc_time+0x194>)
    3096:	68bb      	ldr	r3, [r7, #8]
    3098:	0011      	movs	r1, r2
    309a:	0018      	movs	r0, r3
    309c:	4b49      	ldr	r3, [pc, #292]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    309e:	4798      	blx	r3
    30a0:	0003      	movs	r3, r0
    30a2:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
    30a4:	4b46      	ldr	r3, [pc, #280]	; (31c0 <gsm_get_internal_rtc_time+0x194>)
    30a6:	0019      	movs	r1, r3
    30a8:	2000      	movs	r0, #0
    30aa:	4b46      	ldr	r3, [pc, #280]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    30ac:	4798      	blx	r3
    30ae:	0003      	movs	r3, r0
    30b0:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
    30b2:	4a45      	ldr	r2, [pc, #276]	; (31c8 <gsm_get_internal_rtc_time+0x19c>)
    30b4:	683b      	ldr	r3, [r7, #0]
    30b6:	0011      	movs	r1, r2
    30b8:	0018      	movs	r0, r3
    30ba:	4b42      	ldr	r3, [pc, #264]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    30bc:	4798      	blx	r3
    30be:	0003      	movs	r3, r0
    30c0:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
    30c2:	683b      	ldr	r3, [r7, #0]
    30c4:	0018      	movs	r0, r3
    30c6:	4b41      	ldr	r3, [pc, #260]	; (31cc <gsm_get_internal_rtc_time+0x1a0>)
    30c8:	4798      	blx	r3
    30ca:	0003      	movs	r3, r0
    30cc:	b2da      	uxtb	r2, r3
    30ce:	4b40      	ldr	r3, [pc, #256]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    30d0:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
    30d2:	4b3d      	ldr	r3, [pc, #244]	; (31c8 <gsm_get_internal_rtc_time+0x19c>)
    30d4:	0019      	movs	r1, r3
    30d6:	2000      	movs	r0, #0
    30d8:	4b3a      	ldr	r3, [pc, #232]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    30da:	4798      	blx	r3
    30dc:	0003      	movs	r3, r0
    30de:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
    30e0:	683b      	ldr	r3, [r7, #0]
    30e2:	0018      	movs	r0, r3
    30e4:	4b39      	ldr	r3, [pc, #228]	; (31cc <gsm_get_internal_rtc_time+0x1a0>)
    30e6:	4798      	blx	r3
    30e8:	0003      	movs	r3, r0
    30ea:	b2da      	uxtb	r2, r3
    30ec:	4b38      	ldr	r3, [pc, #224]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    30ee:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
    30f0:	4b38      	ldr	r3, [pc, #224]	; (31d4 <gsm_get_internal_rtc_time+0x1a8>)
    30f2:	0019      	movs	r1, r3
    30f4:	2000      	movs	r0, #0
    30f6:	4b33      	ldr	r3, [pc, #204]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    30f8:	4798      	blx	r3
    30fa:	0003      	movs	r3, r0
    30fc:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
    30fe:	683b      	ldr	r3, [r7, #0]
    3100:	0018      	movs	r0, r3
    3102:	4b32      	ldr	r3, [pc, #200]	; (31cc <gsm_get_internal_rtc_time+0x1a0>)
    3104:	4798      	blx	r3
    3106:	0003      	movs	r3, r0
    3108:	b2da      	uxtb	r2, r3
    310a:	4b31      	ldr	r3, [pc, #196]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    310c:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
    310e:	4b32      	ldr	r3, [pc, #200]	; (31d8 <gsm_get_internal_rtc_time+0x1ac>)
    3110:	0019      	movs	r1, r3
    3112:	2000      	movs	r0, #0
    3114:	4b2b      	ldr	r3, [pc, #172]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    3116:	4798      	blx	r3
    3118:	0003      	movs	r3, r0
    311a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
    311c:	683b      	ldr	r3, [r7, #0]
    311e:	0018      	movs	r0, r3
    3120:	4b2a      	ldr	r3, [pc, #168]	; (31cc <gsm_get_internal_rtc_time+0x1a0>)
    3122:	4798      	blx	r3
    3124:	0003      	movs	r3, r0
    3126:	b2da      	uxtb	r2, r3
    3128:	4b29      	ldr	r3, [pc, #164]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    312a:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
    312c:	4b2a      	ldr	r3, [pc, #168]	; (31d8 <gsm_get_internal_rtc_time+0x1ac>)
    312e:	0019      	movs	r1, r3
    3130:	2000      	movs	r0, #0
    3132:	4b24      	ldr	r3, [pc, #144]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    3134:	4798      	blx	r3
    3136:	0003      	movs	r3, r0
    3138:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
    313a:	683b      	ldr	r3, [r7, #0]
    313c:	0018      	movs	r0, r3
    313e:	4b23      	ldr	r3, [pc, #140]	; (31cc <gsm_get_internal_rtc_time+0x1a0>)
    3140:	4798      	blx	r3
    3142:	0003      	movs	r3, r0
    3144:	b2da      	uxtb	r2, r3
    3146:	4b22      	ldr	r3, [pc, #136]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    3148:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
    314a:	4b24      	ldr	r3, [pc, #144]	; (31dc <gsm_get_internal_rtc_time+0x1b0>)
    314c:	0019      	movs	r1, r3
    314e:	2000      	movs	r0, #0
    3150:	4b1c      	ldr	r3, [pc, #112]	; (31c4 <gsm_get_internal_rtc_time+0x198>)
    3152:	4798      	blx	r3
    3154:	0003      	movs	r3, r0
    3156:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
    3158:	683b      	ldr	r3, [r7, #0]
    315a:	0018      	movs	r0, r3
    315c:	4b1b      	ldr	r3, [pc, #108]	; (31cc <gsm_get_internal_rtc_time+0x1a0>)
    315e:	4798      	blx	r3
    3160:	0003      	movs	r3, r0
    3162:	b2da      	uxtb	r2, r3
    3164:	4b1a      	ldr	r3, [pc, #104]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    3166:	715a      	strb	r2, [r3, #5]
    3168:	e011      	b.n	318e <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
    316a:	4b19      	ldr	r3, [pc, #100]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    316c:	2200      	movs	r2, #0
    316e:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
    3170:	4b17      	ldr	r3, [pc, #92]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    3172:	2200      	movs	r2, #0
    3174:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
    3176:	4b16      	ldr	r3, [pc, #88]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    3178:	2200      	movs	r2, #0
    317a:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
    317c:	4b14      	ldr	r3, [pc, #80]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    317e:	2200      	movs	r2, #0
    3180:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
    3182:	4b13      	ldr	r3, [pc, #76]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    3184:	2200      	movs	r2, #0
    3186:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
    3188:	4b11      	ldr	r3, [pc, #68]	; (31d0 <gsm_get_internal_rtc_time+0x1a4>)
    318a:	2200      	movs	r2, #0
    318c:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
    318e:	68bb      	ldr	r3, [r7, #8]
    3190:	0018      	movs	r0, r3
    3192:	4b05      	ldr	r3, [pc, #20]	; (31a8 <gsm_get_internal_rtc_time+0x17c>)
    3194:	4798      	blx	r3
	return err;
    3196:	1dfb      	adds	r3, r7, #7
    3198:	781b      	ldrb	r3, [r3, #0]
}
    319a:	0018      	movs	r0, r3
    319c:	46bd      	mov	sp, r7
    319e:	b004      	add	sp, #16
    31a0:	bdb0      	pop	{r4, r5, r7, pc}
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	00017c59 	.word	0x00017c59
    31a8:	00017cf9 	.word	0x00017cf9
    31ac:	00017d67 	.word	0x00017d67
    31b0:	00001388 	.word	0x00001388
    31b4:	00018a18 	.word	0x00018a18
    31b8:	00018ce4 	.word	0x00018ce4
    31bc:	000022cd 	.word	0x000022cd
    31c0:	00018cf0 	.word	0x00018cf0
    31c4:	00018059 	.word	0x00018059
    31c8:	00018cf4 	.word	0x00018cf4
    31cc:	00017c4d 	.word	0x00017c4d
    31d0:	20000688 	.word	0x20000688
    31d4:	00018b34 	.word	0x00018b34
    31d8:	00018b30 	.word	0x00018b30
    31dc:	00018cf8 	.word	0x00018cf8

000031e0 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
    31e4:	4b31      	ldr	r3, [pc, #196]	; (32ac <gsm_config_module+0xcc>)
    31e6:	4798      	blx	r3
    31e8:	1e03      	subs	r3, r0, #0
    31ea:	d000      	beq.n	31ee <gsm_config_module+0xe>
    31ec:	e058      	b.n	32a0 <gsm_config_module+0xc0>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
    31ee:	4b30      	ldr	r3, [pc, #192]	; (32b0 <gsm_config_module+0xd0>)
    31f0:	4798      	blx	r3
    31f2:	1e03      	subs	r3, r0, #0
    31f4:	d000      	beq.n	31f8 <gsm_config_module+0x18>
    31f6:	e051      	b.n	329c <gsm_config_module+0xbc>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
    31f8:	23fa      	movs	r3, #250	; 0xfa
    31fa:	00db      	lsls	r3, r3, #3
    31fc:	0018      	movs	r0, r3
    31fe:	4b2d      	ldr	r3, [pc, #180]	; (32b4 <gsm_config_module+0xd4>)
    3200:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
    3202:	4b2d      	ldr	r3, [pc, #180]	; (32b8 <gsm_config_module+0xd8>)
    3204:	4798      	blx	r3
    3206:	1e03      	subs	r3, r0, #0
    3208:	d146      	bne.n	3298 <gsm_config_module+0xb8>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
    320a:	4b2c      	ldr	r3, [pc, #176]	; (32bc <gsm_config_module+0xdc>)
    320c:	4798      	blx	r3
    320e:	1e03      	subs	r3, r0, #0
    3210:	d148      	bne.n	32a4 <gsm_config_module+0xc4>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
    3212:	4b2b      	ldr	r3, [pc, #172]	; (32c0 <gsm_config_module+0xe0>)
    3214:	4798      	blx	r3
    3216:	1e03      	subs	r3, r0, #0
    3218:	d13c      	bne.n	3294 <gsm_config_module+0xb4>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
    321a:	23fa      	movs	r3, #250	; 0xfa
    321c:	00db      	lsls	r3, r3, #3
    321e:	0018      	movs	r0, r3
    3220:	4b24      	ldr	r3, [pc, #144]	; (32b4 <gsm_config_module+0xd4>)
    3222:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
    3224:	4b27      	ldr	r3, [pc, #156]	; (32c4 <gsm_config_module+0xe4>)
    3226:	4798      	blx	r3
    3228:	1e03      	subs	r3, r0, #0
    322a:	d131      	bne.n	3290 <gsm_config_module+0xb0>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
    322c:	4b26      	ldr	r3, [pc, #152]	; (32c8 <gsm_config_module+0xe8>)
    322e:	4798      	blx	r3
    3230:	1e03      	subs	r3, r0, #0
    3232:	d12b      	bne.n	328c <gsm_config_module+0xac>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
    3234:	4b25      	ldr	r3, [pc, #148]	; (32cc <gsm_config_module+0xec>)
    3236:	4798      	blx	r3
    3238:	1e03      	subs	r3, r0, #0
    323a:	d125      	bne.n	3288 <gsm_config_module+0xa8>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
    323c:	4b24      	ldr	r3, [pc, #144]	; (32d0 <gsm_config_module+0xf0>)
    323e:	4798      	blx	r3
    3240:	1e03      	subs	r3, r0, #0
    3242:	d11f      	bne.n	3284 <gsm_config_module+0xa4>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
    3244:	4b23      	ldr	r3, [pc, #140]	; (32d4 <gsm_config_module+0xf4>)
    3246:	4798      	blx	r3
    3248:	1e03      	subs	r3, r0, #0
    324a:	d119      	bne.n	3280 <gsm_config_module+0xa0>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
    324c:	4b22      	ldr	r3, [pc, #136]	; (32d8 <gsm_config_module+0xf8>)
    324e:	4798      	blx	r3
    3250:	1e03      	subs	r3, r0, #0
    3252:	d113      	bne.n	327c <gsm_config_module+0x9c>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
    3254:	4b21      	ldr	r3, [pc, #132]	; (32dc <gsm_config_module+0xfc>)
    3256:	4798      	blx	r3
    3258:	1e03      	subs	r3, r0, #0
    325a:	d10d      	bne.n	3278 <gsm_config_module+0x98>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
    325c:	4b20      	ldr	r3, [pc, #128]	; (32e0 <gsm_config_module+0x100>)
    325e:	4798      	blx	r3
    3260:	1e03      	subs	r3, r0, #0
    3262:	d107      	bne.n	3274 <gsm_config_module+0x94>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
    3264:	4b1f      	ldr	r3, [pc, #124]	; (32e4 <gsm_config_module+0x104>)
    3266:	4798      	blx	r3
    3268:	1e03      	subs	r3, r0, #0
    326a:	d101      	bne.n	3270 <gsm_config_module+0x90>
															{
																return GSM_ERROR_NONE;
    326c:	2300      	movs	r3, #0
    326e:	e01a      	b.n	32a6 <gsm_config_module+0xc6>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
    3270:	2310      	movs	r3, #16
    3272:	e018      	b.n	32a6 <gsm_config_module+0xc6>
															//	return GSM_ERROR_CONFIG_FAILED;
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
    3274:	2310      	movs	r3, #16
    3276:	e016      	b.n	32a6 <gsm_config_module+0xc6>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
    3278:	2310      	movs	r3, #16
    327a:	e014      	b.n	32a6 <gsm_config_module+0xc6>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
    327c:	2310      	movs	r3, #16
    327e:	e012      	b.n	32a6 <gsm_config_module+0xc6>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
    3280:	2310      	movs	r3, #16
    3282:	e010      	b.n	32a6 <gsm_config_module+0xc6>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
    3284:	2310      	movs	r3, #16
    3286:	e00e      	b.n	32a6 <gsm_config_module+0xc6>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
    3288:	2310      	movs	r3, #16
    328a:	e00c      	b.n	32a6 <gsm_config_module+0xc6>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
    328c:	2310      	movs	r3, #16
    328e:	e00a      	b.n	32a6 <gsm_config_module+0xc6>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
    3290:	2310      	movs	r3, #16
    3292:	e008      	b.n	32a6 <gsm_config_module+0xc6>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
    3294:	2310      	movs	r3, #16
    3296:	e006      	b.n	32a6 <gsm_config_module+0xc6>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
    3298:	2310      	movs	r3, #16
    329a:	e004      	b.n	32a6 <gsm_config_module+0xc6>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
    329c:	2310      	movs	r3, #16
    329e:	e002      	b.n	32a6 <gsm_config_module+0xc6>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
    32a0:	2310      	movs	r3, #16
    32a2:	e000      	b.n	32a6 <gsm_config_module+0xc6>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
    32a4:	2310      	movs	r3, #16
}
    32a6:	0018      	movs	r0, r3
    32a8:	46bd      	mov	sp, r7
    32aa:	bd80      	pop	{r7, pc}
    32ac:	000024c5 	.word	0x000024c5
    32b0:	000026d1 	.word	0x000026d1
    32b4:	0000f0a9 	.word	0x0000f0a9
    32b8:	000025b1 	.word	0x000025b1
    32bc:	00002701 	.word	0x00002701
    32c0:	0000255d 	.word	0x0000255d
    32c4:	00002641 	.word	0x00002641
    32c8:	00002671 	.word	0x00002671
    32cc:	000026a1 	.word	0x000026a1
    32d0:	00002731 	.word	0x00002731
    32d4:	00002761 	.word	0x00002761
    32d8:	000029a9 	.word	0x000029a9
    32dc:	00002ded 	.word	0x00002ded
    32e0:	00002e1d 	.word	0x00002e1d
    32e4:	00002611 	.word	0x00002611

000032e8 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b084      	sub	sp, #16
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	000a      	movs	r2, r1
    32f2:	1cfb      	adds	r3, r7, #3
    32f4:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
    32f6:	230f      	movs	r3, #15
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	2200      	movs	r2, #0
    32fc:	701a      	strb	r2, [r3, #0]
	while (length > 1)
    32fe:	e029      	b.n	3354 <gsm_read_response_line+0x6c>
	{
		gsm_module_exit_sleep(true);
    3300:	2001      	movs	r0, #1
    3302:	4b1c      	ldr	r3, [pc, #112]	; (3374 <gsm_read_response_line+0x8c>)
    3304:	4798      	blx	r3
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
    3306:	4b1c      	ldr	r3, [pc, #112]	; (3378 <gsm_read_response_line+0x90>)
    3308:	6818      	ldr	r0, [r3, #0]
    330a:	23fa      	movs	r3, #250	; 0xfa
    330c:	005a      	lsls	r2, r3, #1
    330e:	230e      	movs	r3, #14
    3310:	18fb      	adds	r3, r7, r3
    3312:	0019      	movs	r1, r3
    3314:	4b19      	ldr	r3, [pc, #100]	; (337c <gsm_read_response_line+0x94>)
    3316:	4798      	blx	r3
    3318:	1e03      	subs	r3, r0, #0
    331a:	d101      	bne.n	3320 <gsm_read_response_line+0x38>
		{
			return false;
    331c:	2300      	movs	r3, #0
    331e:	e025      	b.n	336c <gsm_read_response_line+0x84>
		}

		if (curr_rx == '\n')
    3320:	230e      	movs	r3, #14
    3322:	18fb      	adds	r3, r7, r3
    3324:	781b      	ldrb	r3, [r3, #0]
    3326:	2b0a      	cmp	r3, #10
    3328:	d014      	beq.n	3354 <gsm_read_response_line+0x6c>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
    332a:	230e      	movs	r3, #14
    332c:	18fb      	adds	r3, r7, r3
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	2b0d      	cmp	r3, #13
    3332:	d014      	beq.n	335e <gsm_read_response_line+0x76>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	1c5a      	adds	r2, r3, #1
    3338:	607a      	str	r2, [r7, #4]
    333a:	220e      	movs	r2, #14
    333c:	18ba      	adds	r2, r7, r2
    333e:	7812      	ldrb	r2, [r2, #0]
    3340:	701a      	strb	r2, [r3, #0]
			length--;
    3342:	1cfb      	adds	r3, r7, #3
    3344:	781a      	ldrb	r2, [r3, #0]
    3346:	1cfb      	adds	r3, r7, #3
    3348:	3a01      	subs	r2, #1
    334a:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
    334c:	230f      	movs	r3, #15
    334e:	18fb      	adds	r3, r7, r3
    3350:	2201      	movs	r2, #1
    3352:	701a      	strb	r2, [r3, #0]
	while (length > 1)
    3354:	1cfb      	adds	r3, r7, #3
    3356:	781b      	ldrb	r3, [r3, #0]
    3358:	2b01      	cmp	r3, #1
    335a:	d8d1      	bhi.n	3300 <gsm_read_response_line+0x18>
    335c:	e000      	b.n	3360 <gsm_read_response_line+0x78>
		}
		else
		{
			/* End of command, finished reading line */
			break;
    335e:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
    3360:	687b      	ldr	r3, [r7, #4]
    3362:	2200      	movs	r2, #0
    3364:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
    3366:	230f      	movs	r3, #15
    3368:	18fb      	adds	r3, r7, r3
    336a:	781b      	ldrb	r3, [r3, #0]
}
    336c:	0018      	movs	r0, r3
    336e:	46bd      	mov	sp, r7
    3370:	b004      	add	sp, #16
    3372:	bd80      	pop	{r7, pc}
    3374:	0000220d 	.word	0x0000220d
    3378:	20000224 	.word	0x20000224
    337c:	0000e601 	.word	0x0000e601

00003380 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
    3380:	b580      	push	{r7, lr}
    3382:	b084      	sub	sp, #16
    3384:	af00      	add	r7, sp, #0
    3386:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
    3388:	230f      	movs	r3, #15
    338a:	18fb      	adds	r3, r7, r3
    338c:	2200      	movs	r2, #0
    338e:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
    3390:	4a17      	ldr	r2, [pc, #92]	; (33f0 <gsm_responseLine_isNew_SMS_Received+0x70>)
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	0011      	movs	r1, r2
    3396:	0018      	movs	r0, r3
    3398:	4b16      	ldr	r3, [pc, #88]	; (33f4 <gsm_responseLine_isNew_SMS_Received+0x74>)
    339a:	4798      	blx	r3
    339c:	1e03      	subs	r3, r0, #0
    339e:	d01b      	beq.n	33d8 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
    33a0:	4a15      	ldr	r2, [pc, #84]	; (33f8 <gsm_responseLine_isNew_SMS_Received+0x78>)
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	0011      	movs	r1, r2
    33a6:	0018      	movs	r0, r3
    33a8:	4b14      	ldr	r3, [pc, #80]	; (33fc <gsm_responseLine_isNew_SMS_Received+0x7c>)
    33aa:	4798      	blx	r3
    33ac:	0003      	movs	r3, r0
    33ae:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
    33b0:	4b11      	ldr	r3, [pc, #68]	; (33f8 <gsm_responseLine_isNew_SMS_Received+0x78>)
    33b2:	0019      	movs	r1, r3
    33b4:	2000      	movs	r0, #0
    33b6:	4b11      	ldr	r3, [pc, #68]	; (33fc <gsm_responseLine_isNew_SMS_Received+0x7c>)
    33b8:	4798      	blx	r3
    33ba:	0003      	movs	r3, r0
    33bc:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
    33be:	68bb      	ldr	r3, [r7, #8]
    33c0:	0018      	movs	r0, r3
    33c2:	4b0f      	ldr	r3, [pc, #60]	; (3400 <gsm_responseLine_isNew_SMS_Received+0x80>)
    33c4:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
    33c6:	68bb      	ldr	r3, [r7, #8]
    33c8:	0018      	movs	r0, r3
    33ca:	4b0e      	ldr	r3, [pc, #56]	; (3404 <gsm_responseLine_isNew_SMS_Received+0x84>)
    33cc:	4798      	blx	r3
    33ce:	0002      	movs	r2, r0
    33d0:	230f      	movs	r3, #15
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	701a      	strb	r2, [r3, #0]
    33d6:	e003      	b.n	33e0 <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
    33d8:	230f      	movs	r3, #15
    33da:	18fb      	adds	r3, r7, r3
    33dc:	2200      	movs	r2, #0
    33de:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
    33e0:	230f      	movs	r3, #15
    33e2:	18fb      	adds	r3, r7, r3
    33e4:	781b      	ldrb	r3, [r3, #0]
}
    33e6:	0018      	movs	r0, r3
    33e8:	46bd      	mov	sp, r7
    33ea:	b004      	add	sp, #16
    33ec:	bd80      	pop	{r7, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	00018cfc 	.word	0x00018cfc
    33f4:	00018027 	.word	0x00018027
    33f8:	00018b34 	.word	0x00018b34
    33fc:	00018059 	.word	0x00018059
    3400:	00002965 	.word	0x00002965
    3404:	00017c4d 	.word	0x00017c4d

00003408 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
    3408:	b580      	push	{r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
    3410:	4a07      	ldr	r2, [pc, #28]	; (3430 <gsm_responseLine_isRinging+0x28>)
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	0011      	movs	r1, r2
    3416:	0018      	movs	r0, r3
    3418:	4b06      	ldr	r3, [pc, #24]	; (3434 <gsm_responseLine_isRinging+0x2c>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d001      	beq.n	3424 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
    3420:	2301      	movs	r3, #1
    3422:	e000      	b.n	3426 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
    3424:	2300      	movs	r3, #0
	}
}
    3426:	0018      	movs	r0, r3
    3428:	46bd      	mov	sp, r7
    342a:	b002      	add	sp, #8
    342c:	bd80      	pop	{r7, pc}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	00018d04 	.word	0x00018d04
    3434:	00018027 	.word	0x00018027

00003438 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
    3438:	b580      	push	{r7, lr}
    343a:	b084      	sub	sp, #16
    343c:	af00      	add	r7, sp, #0
    343e:	6078      	str	r0, [r7, #4]
    3440:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
    3442:	4a1e      	ldr	r2, [pc, #120]	; (34bc <gsm_responseLine_get_IncommingCallNo+0x84>)
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	0011      	movs	r1, r2
    3448:	0018      	movs	r0, r3
    344a:	4b1d      	ldr	r3, [pc, #116]	; (34c0 <gsm_responseLine_get_IncommingCallNo+0x88>)
    344c:	4798      	blx	r3
    344e:	1e03      	subs	r3, r0, #0
    3450:	d02e      	beq.n	34b0 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
    3452:	4a1c      	ldr	r2, [pc, #112]	; (34c4 <gsm_responseLine_get_IncommingCallNo+0x8c>)
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	0011      	movs	r1, r2
    3458:	0018      	movs	r0, r3
    345a:	4b1b      	ldr	r3, [pc, #108]	; (34c8 <gsm_responseLine_get_IncommingCallNo+0x90>)
    345c:	4798      	blx	r3
    345e:	0003      	movs	r3, r0
    3460:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
    3462:	4b1a      	ldr	r3, [pc, #104]	; (34cc <gsm_responseLine_get_IncommingCallNo+0x94>)
    3464:	0019      	movs	r1, r3
    3466:	2000      	movs	r0, #0
    3468:	4b17      	ldr	r3, [pc, #92]	; (34c8 <gsm_responseLine_get_IncommingCallNo+0x90>)
    346a:	4798      	blx	r3
    346c:	0003      	movs	r3, r0
    346e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
    3470:	4a17      	ldr	r2, [pc, #92]	; (34d0 <gsm_responseLine_get_IncommingCallNo+0x98>)
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	0011      	movs	r1, r2
    3476:	0018      	movs	r0, r3
    3478:	4b13      	ldr	r3, [pc, #76]	; (34c8 <gsm_responseLine_get_IncommingCallNo+0x90>)
    347a:	4798      	blx	r3
    347c:	0003      	movs	r3, r0
    347e:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
    3480:	4b13      	ldr	r3, [pc, #76]	; (34d0 <gsm_responseLine_get_IncommingCallNo+0x98>)
    3482:	0019      	movs	r1, r3
    3484:	2000      	movs	r0, #0
    3486:	4b10      	ldr	r3, [pc, #64]	; (34c8 <gsm_responseLine_get_IncommingCallNo+0x90>)
    3488:	4798      	blx	r3
    348a:	0003      	movs	r3, r0
    348c:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	212b      	movs	r1, #43	; 0x2b
    3492:	0018      	movs	r0, r3
    3494:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <gsm_responseLine_get_IncommingCallNo+0x9c>)
    3496:	4798      	blx	r3
    3498:	1e03      	subs	r3, r0, #0
    349a:	d101      	bne.n	34a0 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
    349c:	2300      	movs	r3, #0
    349e:	e008      	b.n	34b2 <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	683b      	ldr	r3, [r7, #0]
    34a4:	0011      	movs	r1, r2
    34a6:	0018      	movs	r0, r3
    34a8:	4b0b      	ldr	r3, [pc, #44]	; (34d8 <gsm_responseLine_get_IncommingCallNo+0xa0>)
    34aa:	4798      	blx	r3
		return true;
    34ac:	2301      	movs	r3, #1
    34ae:	e000      	b.n	34b2 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
    34b0:	2300      	movs	r3, #0
	}
}
    34b2:	0018      	movs	r0, r3
    34b4:	46bd      	mov	sp, r7
    34b6:	b004      	add	sp, #16
    34b8:	bd80      	pop	{r7, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	00018d0c 	.word	0x00018d0c
    34c0:	00018027 	.word	0x00018027
    34c4:	00018b30 	.word	0x00018b30
    34c8:	00018059 	.word	0x00018059
    34cc:	00018b34 	.word	0x00018b34
    34d0:	00018cf0 	.word	0x00018cf0
    34d4:	00017fcb 	.word	0x00017fcb
    34d8:	00017fe7 	.word	0x00017fe7

000034dc <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
    34dc:	b580      	push	{r7, lr}
    34de:	b082      	sub	sp, #8
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
    34e4:	4a16      	ldr	r2, [pc, #88]	; (3540 <gsm_responseLine_isCallCut+0x64>)
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	0011      	movs	r1, r2
    34ea:	0018      	movs	r0, r3
    34ec:	4b15      	ldr	r3, [pc, #84]	; (3544 <gsm_responseLine_isCallCut+0x68>)
    34ee:	4798      	blx	r3
    34f0:	1e03      	subs	r3, r0, #0
    34f2:	d001      	beq.n	34f8 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
    34f4:	2301      	movs	r3, #1
    34f6:	e01e      	b.n	3536 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
    34f8:	4a13      	ldr	r2, [pc, #76]	; (3548 <gsm_responseLine_isCallCut+0x6c>)
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	0011      	movs	r1, r2
    34fe:	0018      	movs	r0, r3
    3500:	4b10      	ldr	r3, [pc, #64]	; (3544 <gsm_responseLine_isCallCut+0x68>)
    3502:	4798      	blx	r3
    3504:	1e03      	subs	r3, r0, #0
    3506:	d001      	beq.n	350c <gsm_responseLine_isCallCut+0x30>
	{
		return true;
    3508:	2301      	movs	r3, #1
    350a:	e014      	b.n	3536 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
    350c:	4a0f      	ldr	r2, [pc, #60]	; (354c <gsm_responseLine_isCallCut+0x70>)
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	0011      	movs	r1, r2
    3512:	0018      	movs	r0, r3
    3514:	4b0b      	ldr	r3, [pc, #44]	; (3544 <gsm_responseLine_isCallCut+0x68>)
    3516:	4798      	blx	r3
    3518:	1e03      	subs	r3, r0, #0
    351a:	d001      	beq.n	3520 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
    351c:	2301      	movs	r3, #1
    351e:	e00a      	b.n	3536 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
    3520:	4a0b      	ldr	r2, [pc, #44]	; (3550 <gsm_responseLine_isCallCut+0x74>)
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	0011      	movs	r1, r2
    3526:	0018      	movs	r0, r3
    3528:	4b06      	ldr	r3, [pc, #24]	; (3544 <gsm_responseLine_isCallCut+0x68>)
    352a:	4798      	blx	r3
    352c:	1e03      	subs	r3, r0, #0
    352e:	d001      	beq.n	3534 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
    3530:	2301      	movs	r3, #1
    3532:	e000      	b.n	3536 <gsm_responseLine_isCallCut+0x5a>
	}
	else
	{
		return false;
    3534:	2300      	movs	r3, #0
	}
}
    3536:	0018      	movs	r0, r3
    3538:	46bd      	mov	sp, r7
    353a:	b002      	add	sp, #8
    353c:	bd80      	pop	{r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	00018d14 	.word	0x00018d14
    3544:	00018027 	.word	0x00018027
    3548:	00018d20 	.word	0x00018d20
    354c:	00018d28 	.word	0x00018d28
    3550:	00018a10 	.word	0x00018a10

00003554 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
    355a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
    355c:	4a07      	ldr	r2, [pc, #28]	; (357c <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	0011      	movs	r1, r2
    3562:	0018      	movs	r0, r3
    3564:	4b06      	ldr	r3, [pc, #24]	; (3580 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
    3566:	4798      	blx	r3
    3568:	1e03      	subs	r3, r0, #0
    356a:	d001      	beq.n	3570 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
    356c:	2301      	movs	r3, #1
    356e:	e000      	b.n	3572 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
    3570:	2300      	movs	r3, #0
	}
}
    3572:	0018      	movs	r0, r3
    3574:	46bd      	mov	sp, r7
    3576:	b002      	add	sp, #8
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	00018d34 	.word	0x00018d34
    3580:	00018027 	.word	0x00018027

00003584 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
    3584:	b580      	push	{r7, lr}
    3586:	b082      	sub	sp, #8
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
    358c:	4a07      	ldr	r2, [pc, #28]	; (35ac <gsm_responseLine_is_StopSound_Received+0x28>)
    358e:	687b      	ldr	r3, [r7, #4]
    3590:	0011      	movs	r1, r2
    3592:	0018      	movs	r0, r3
    3594:	4b06      	ldr	r3, [pc, #24]	; (35b0 <gsm_responseLine_is_StopSound_Received+0x2c>)
    3596:	4798      	blx	r3
    3598:	1e03      	subs	r3, r0, #0
    359a:	d001      	beq.n	35a0 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
    359c:	2301      	movs	r3, #1
    359e:	e000      	b.n	35a2 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
    35a0:	2300      	movs	r3, #0
	}
}
    35a2:	0018      	movs	r0, r3
    35a4:	46bd      	mov	sp, r7
    35a6:	b002      	add	sp, #8
    35a8:	bd80      	pop	{r7, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	00018d3c 	.word	0x00018d3c
    35b0:	00018027 	.word	0x00018027

000035b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b084      	sub	sp, #16
    35b8:	af00      	add	r7, sp, #0
    35ba:	0002      	movs	r2, r0
    35bc:	1dfb      	adds	r3, r7, #7
    35be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    35c0:	230f      	movs	r3, #15
    35c2:	18fb      	adds	r3, r7, r3
    35c4:	1dfa      	adds	r2, r7, #7
    35c6:	7812      	ldrb	r2, [r2, #0]
    35c8:	09d2      	lsrs	r2, r2, #7
    35ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    35cc:	230e      	movs	r3, #14
    35ce:	18fb      	adds	r3, r7, r3
    35d0:	1dfa      	adds	r2, r7, #7
    35d2:	7812      	ldrb	r2, [r2, #0]
    35d4:	0952      	lsrs	r2, r2, #5
    35d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    35d8:	4b0d      	ldr	r3, [pc, #52]	; (3610 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    35da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    35dc:	230f      	movs	r3, #15
    35de:	18fb      	adds	r3, r7, r3
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d10f      	bne.n	3606 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    35e6:	230f      	movs	r3, #15
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	781b      	ldrb	r3, [r3, #0]
    35ec:	009b      	lsls	r3, r3, #2
    35ee:	2210      	movs	r2, #16
    35f0:	4694      	mov	ip, r2
    35f2:	44bc      	add	ip, r7
    35f4:	4463      	add	r3, ip
    35f6:	3b08      	subs	r3, #8
    35f8:	681a      	ldr	r2, [r3, #0]
    35fa:	230e      	movs	r3, #14
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	01db      	lsls	r3, r3, #7
    3602:	18d3      	adds	r3, r2, r3
    3604:	e000      	b.n	3608 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3606:	2300      	movs	r3, #0
	}
}
    3608:	0018      	movs	r0, r3
    360a:	46bd      	mov	sp, r7
    360c:	b004      	add	sp, #16
    360e:	bd80      	pop	{r7, pc}
    3610:	41004400 	.word	0x41004400

00003614 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3614:	b580      	push	{r7, lr}
    3616:	b082      	sub	sp, #8
    3618:	af00      	add	r7, sp, #0
    361a:	0002      	movs	r2, r0
    361c:	1dfb      	adds	r3, r7, #7
    361e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3620:	1dfb      	adds	r3, r7, #7
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	0018      	movs	r0, r3
    3626:	4b03      	ldr	r3, [pc, #12]	; (3634 <port_get_group_from_gpio_pin+0x20>)
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
}
    362c:	0018      	movs	r0, r3
    362e:	46bd      	mov	sp, r7
    3630:	b002      	add	sp, #8
    3632:	bd80      	pop	{r7, pc}
    3634:	000035b5 	.word	0x000035b5

00003638 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3638:	b580      	push	{r7, lr}
    363a:	b082      	sub	sp, #8
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	2200      	movs	r2, #0
    3644:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	2201      	movs	r2, #1
    364a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	2200      	movs	r2, #0
    3650:	709a      	strb	r2, [r3, #2]
}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	46bd      	mov	sp, r7
    3656:	b002      	add	sp, #8
    3658:	bd80      	pop	{r7, pc}
	...

0000365c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    365c:	b580      	push	{r7, lr}
    365e:	b084      	sub	sp, #16
    3660:	af00      	add	r7, sp, #0
    3662:	0002      	movs	r2, r0
    3664:	1dfb      	adds	r3, r7, #7
    3666:	701a      	strb	r2, [r3, #0]
    3668:	1dbb      	adds	r3, r7, #6
    366a:	1c0a      	adds	r2, r1, #0
    366c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    366e:	1dfb      	adds	r3, r7, #7
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	0018      	movs	r0, r3
    3674:	4b0d      	ldr	r3, [pc, #52]	; (36ac <port_pin_set_output_level+0x50>)
    3676:	4798      	blx	r3
    3678:	0003      	movs	r3, r0
    367a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    367c:	1dfb      	adds	r3, r7, #7
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	221f      	movs	r2, #31
    3682:	4013      	ands	r3, r2
    3684:	2201      	movs	r2, #1
    3686:	409a      	lsls	r2, r3
    3688:	0013      	movs	r3, r2
    368a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    368c:	1dbb      	adds	r3, r7, #6
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	2b00      	cmp	r3, #0
    3692:	d003      	beq.n	369c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3694:	68fb      	ldr	r3, [r7, #12]
    3696:	68ba      	ldr	r2, [r7, #8]
    3698:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    369a:	e002      	b.n	36a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	68ba      	ldr	r2, [r7, #8]
    36a0:	615a      	str	r2, [r3, #20]
}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	46bd      	mov	sp, r7
    36a6:	b004      	add	sp, #16
    36a8:	bd80      	pop	{r7, pc}
    36aa:	46c0      	nop			; (mov r8, r8)
    36ac:	00003615 	.word	0x00003615

000036b0 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
    36b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b2:	b08b      	sub	sp, #44	; 0x2c
    36b4:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
    36b6:	230b      	movs	r3, #11
    36b8:	2218      	movs	r2, #24
    36ba:	4694      	mov	ip, r2
    36bc:	44bc      	add	ip, r7
    36be:	4463      	add	r3, ip
    36c0:	2210      	movs	r2, #16
    36c2:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
    36c4:	230a      	movs	r3, #10
    36c6:	2218      	movs	r2, #24
    36c8:	4694      	mov	ip, r2
    36ca:	44bc      	add	ip, r7
    36cc:	4463      	add	r3, ip
    36ce:	2202      	movs	r2, #2
    36d0:	701a      	strb	r2, [r3, #0]
	delay_init();
    36d2:	4b90      	ldr	r3, [pc, #576]	; (3914 <LCD_init+0x264>)
    36d4:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
    36d6:	4b90      	ldr	r3, [pc, #576]	; (3918 <LCD_init+0x268>)
    36d8:	223f      	movs	r2, #63	; 0x3f
    36da:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
    36dc:	4b8f      	ldr	r3, [pc, #572]	; (391c <LCD_init+0x26c>)
    36de:	223e      	movs	r2, #62	; 0x3e
    36e0:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
    36e2:	4b8f      	ldr	r3, [pc, #572]	; (3920 <LCD_init+0x270>)
    36e4:	2221      	movs	r2, #33	; 0x21
    36e6:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
    36e8:	4b8d      	ldr	r3, [pc, #564]	; (3920 <LCD_init+0x270>)
    36ea:	2220      	movs	r2, #32
    36ec:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
    36ee:	4b8c      	ldr	r3, [pc, #560]	; (3920 <LCD_init+0x270>)
    36f0:	2223      	movs	r2, #35	; 0x23
    36f2:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
    36f4:	4b8a      	ldr	r3, [pc, #552]	; (3920 <LCD_init+0x270>)
    36f6:	2222      	movs	r2, #34	; 0x22
    36f8:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    36fa:	4b8a      	ldr	r3, [pc, #552]	; (3924 <LCD_init+0x274>)
    36fc:	2200      	movs	r2, #0
    36fe:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
    3700:	230a      	movs	r3, #10
    3702:	2218      	movs	r2, #24
    3704:	4694      	mov	ip, r2
    3706:	44bc      	add	ip, r7
    3708:	4463      	add	r3, ip
    370a:	781b      	ldrb	r3, [r3, #0]
    370c:	2b01      	cmp	r3, #1
    370e:	d906      	bls.n	371e <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
    3710:	4b84      	ldr	r3, [pc, #528]	; (3924 <LCD_init+0x274>)
    3712:	781b      	ldrb	r3, [r3, #0]
    3714:	2208      	movs	r2, #8
    3716:	4313      	orrs	r3, r2
    3718:	b2da      	uxtb	r2, r3
    371a:	4b82      	ldr	r3, [pc, #520]	; (3924 <LCD_init+0x274>)
    371c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
    371e:	4b82      	ldr	r3, [pc, #520]	; (3928 <LCD_init+0x278>)
    3720:	220a      	movs	r2, #10
    3722:	2118      	movs	r1, #24
    3724:	468c      	mov	ip, r1
    3726:	44bc      	add	ip, r7
    3728:	4462      	add	r2, ip
    372a:	7812      	ldrb	r2, [r2, #0]
    372c:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
    372e:	230b      	movs	r3, #11
    3730:	2218      	movs	r2, #24
    3732:	4694      	mov	ip, r2
    3734:	44bc      	add	ip, r7
    3736:	4463      	add	r3, ip
    3738:	781a      	ldrb	r2, [r3, #0]
    373a:	230b      	movs	r3, #11
    373c:	2118      	movs	r1, #24
    373e:	468c      	mov	ip, r1
    3740:	44bc      	add	ip, r7
    3742:	4463      	add	r3, ip
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	3340      	adds	r3, #64	; 0x40
    3748:	2140      	movs	r1, #64	; 0x40
    374a:	2000      	movs	r0, #0
    374c:	4c77      	ldr	r4, [pc, #476]	; (392c <LCD_init+0x27c>)
    374e:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3750:	231c      	movs	r3, #28
    3752:	18fb      	adds	r3, r7, r3
    3754:	0018      	movs	r0, r3
    3756:	4b76      	ldr	r3, [pc, #472]	; (3930 <LCD_init+0x280>)
    3758:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    375a:	231c      	movs	r3, #28
    375c:	18fb      	adds	r3, r7, r3
    375e:	2201      	movs	r2, #1
    3760:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
    3762:	4b6d      	ldr	r3, [pc, #436]	; (3918 <LCD_init+0x268>)
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	221c      	movs	r2, #28
    3768:	18ba      	adds	r2, r7, r2
    376a:	0011      	movs	r1, r2
    376c:	0018      	movs	r0, r3
    376e:	4b71      	ldr	r3, [pc, #452]	; (3934 <LCD_init+0x284>)
    3770:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
    3772:	4b6a      	ldr	r3, [pc, #424]	; (391c <LCD_init+0x26c>)
    3774:	781b      	ldrb	r3, [r3, #0]
    3776:	221c      	movs	r2, #28
    3778:	18ba      	adds	r2, r7, r2
    377a:	0011      	movs	r1, r2
    377c:	0018      	movs	r0, r3
    377e:	4b6d      	ldr	r3, [pc, #436]	; (3934 <LCD_init+0x284>)
    3780:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
    3782:	2300      	movs	r3, #0
    3784:	627b      	str	r3, [r7, #36]	; 0x24
    3786:	e00c      	b.n	37a2 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
    3788:	4a65      	ldr	r2, [pc, #404]	; (3920 <LCD_init+0x270>)
    378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    378c:	18d3      	adds	r3, r2, r3
    378e:	781b      	ldrb	r3, [r3, #0]
    3790:	221c      	movs	r2, #28
    3792:	18ba      	adds	r2, r7, r2
    3794:	0011      	movs	r1, r2
    3796:	0018      	movs	r0, r3
    3798:	4b66      	ldr	r3, [pc, #408]	; (3934 <LCD_init+0x284>)
    379a:	4798      	blx	r3
	for (int i=0; i<4; ++i)
    379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    379e:	3301      	adds	r3, #1
    37a0:	627b      	str	r3, [r7, #36]	; 0x24
    37a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37a4:	2b03      	cmp	r3, #3
    37a6:	ddef      	ble.n	3788 <LCD_init+0xd8>
	}
	delay_us(50000);
    37a8:	2000      	movs	r0, #0
    37aa:	4b63      	ldr	r3, [pc, #396]	; (3938 <LCD_init+0x288>)
    37ac:	4798      	blx	r3
    37ae:	0003      	movs	r3, r0
    37b0:	613b      	str	r3, [r7, #16]
    37b2:	2300      	movs	r3, #0
    37b4:	617b      	str	r3, [r7, #20]
    37b6:	4c61      	ldr	r4, [pc, #388]	; (393c <LCD_init+0x28c>)
    37b8:	4a61      	ldr	r2, [pc, #388]	; (3940 <LCD_init+0x290>)
    37ba:	2300      	movs	r3, #0
    37bc:	6938      	ldr	r0, [r7, #16]
    37be:	6979      	ldr	r1, [r7, #20]
    37c0:	47a0      	blx	r4
    37c2:	0003      	movs	r3, r0
    37c4:	000c      	movs	r4, r1
    37c6:	0019      	movs	r1, r3
    37c8:	0022      	movs	r2, r4
    37ca:	4b5e      	ldr	r3, [pc, #376]	; (3944 <LCD_init+0x294>)
    37cc:	2400      	movs	r4, #0
    37ce:	18c9      	adds	r1, r1, r3
    37d0:	4162      	adcs	r2, r4
    37d2:	0008      	movs	r0, r1
    37d4:	0011      	movs	r1, r2
    37d6:	4c5c      	ldr	r4, [pc, #368]	; (3948 <LCD_init+0x298>)
    37d8:	4a5c      	ldr	r2, [pc, #368]	; (394c <LCD_init+0x29c>)
    37da:	2300      	movs	r3, #0
    37dc:	47a0      	blx	r4
    37de:	0003      	movs	r3, r0
    37e0:	000c      	movs	r4, r1
    37e2:	0018      	movs	r0, r3
    37e4:	4b5a      	ldr	r3, [pc, #360]	; (3950 <LCD_init+0x2a0>)
    37e6:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
    37e8:	4b4b      	ldr	r3, [pc, #300]	; (3918 <LCD_init+0x268>)
    37ea:	781b      	ldrb	r3, [r3, #0]
    37ec:	2100      	movs	r1, #0
    37ee:	0018      	movs	r0, r3
    37f0:	4b58      	ldr	r3, [pc, #352]	; (3954 <LCD_init+0x2a4>)
    37f2:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
    37f4:	4b49      	ldr	r3, [pc, #292]	; (391c <LCD_init+0x26c>)
    37f6:	781b      	ldrb	r3, [r3, #0]
    37f8:	2100      	movs	r1, #0
    37fa:	0018      	movs	r0, r3
    37fc:	4b55      	ldr	r3, [pc, #340]	; (3954 <LCD_init+0x2a4>)
    37fe:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
    3800:	2003      	movs	r0, #3
    3802:	4b55      	ldr	r3, [pc, #340]	; (3958 <LCD_init+0x2a8>)
    3804:	4798      	blx	r3
	 delay_us(4500); 
    3806:	2000      	movs	r0, #0
    3808:	4b4b      	ldr	r3, [pc, #300]	; (3938 <LCD_init+0x288>)
    380a:	4798      	blx	r3
    380c:	0003      	movs	r3, r0
    380e:	60bb      	str	r3, [r7, #8]
    3810:	2300      	movs	r3, #0
    3812:	60fb      	str	r3, [r7, #12]
    3814:	4c49      	ldr	r4, [pc, #292]	; (393c <LCD_init+0x28c>)
    3816:	4a51      	ldr	r2, [pc, #324]	; (395c <LCD_init+0x2ac>)
    3818:	2300      	movs	r3, #0
    381a:	68b8      	ldr	r0, [r7, #8]
    381c:	68f9      	ldr	r1, [r7, #12]
    381e:	47a0      	blx	r4
    3820:	0003      	movs	r3, r0
    3822:	000c      	movs	r4, r1
    3824:	0019      	movs	r1, r3
    3826:	0022      	movs	r2, r4
    3828:	4b46      	ldr	r3, [pc, #280]	; (3944 <LCD_init+0x294>)
    382a:	2400      	movs	r4, #0
    382c:	18c9      	adds	r1, r1, r3
    382e:	4162      	adcs	r2, r4
    3830:	0008      	movs	r0, r1
    3832:	0011      	movs	r1, r2
    3834:	4c44      	ldr	r4, [pc, #272]	; (3948 <LCD_init+0x298>)
    3836:	4a45      	ldr	r2, [pc, #276]	; (394c <LCD_init+0x29c>)
    3838:	2300      	movs	r3, #0
    383a:	47a0      	blx	r4
    383c:	0003      	movs	r3, r0
    383e:	000c      	movs	r4, r1
    3840:	0018      	movs	r0, r3
    3842:	4b43      	ldr	r3, [pc, #268]	; (3950 <LCD_init+0x2a0>)
    3844:	4798      	blx	r3
	 
	 write4bits(0x03);
    3846:	2003      	movs	r0, #3
    3848:	4b43      	ldr	r3, [pc, #268]	; (3958 <LCD_init+0x2a8>)
    384a:	4798      	blx	r3
	 delay_us(4500); 
    384c:	2000      	movs	r0, #0
    384e:	4b3a      	ldr	r3, [pc, #232]	; (3938 <LCD_init+0x288>)
    3850:	4798      	blx	r3
    3852:	0003      	movs	r3, r0
    3854:	603b      	str	r3, [r7, #0]
    3856:	2300      	movs	r3, #0
    3858:	607b      	str	r3, [r7, #4]
    385a:	4c38      	ldr	r4, [pc, #224]	; (393c <LCD_init+0x28c>)
    385c:	4a3f      	ldr	r2, [pc, #252]	; (395c <LCD_init+0x2ac>)
    385e:	2300      	movs	r3, #0
    3860:	6838      	ldr	r0, [r7, #0]
    3862:	6879      	ldr	r1, [r7, #4]
    3864:	47a0      	blx	r4
    3866:	0003      	movs	r3, r0
    3868:	000c      	movs	r4, r1
    386a:	0019      	movs	r1, r3
    386c:	0022      	movs	r2, r4
    386e:	4b35      	ldr	r3, [pc, #212]	; (3944 <LCD_init+0x294>)
    3870:	2400      	movs	r4, #0
    3872:	18c9      	adds	r1, r1, r3
    3874:	4162      	adcs	r2, r4
    3876:	0008      	movs	r0, r1
    3878:	0011      	movs	r1, r2
    387a:	4c33      	ldr	r4, [pc, #204]	; (3948 <LCD_init+0x298>)
    387c:	4a33      	ldr	r2, [pc, #204]	; (394c <LCD_init+0x29c>)
    387e:	2300      	movs	r3, #0
    3880:	47a0      	blx	r4
    3882:	0003      	movs	r3, r0
    3884:	000c      	movs	r4, r1
    3886:	0018      	movs	r0, r3
    3888:	4b31      	ldr	r3, [pc, #196]	; (3950 <LCD_init+0x2a0>)
    388a:	4798      	blx	r3
	
	 write4bits(0x03);
    388c:	2003      	movs	r0, #3
    388e:	4b32      	ldr	r3, [pc, #200]	; (3958 <LCD_init+0x2a8>)
    3890:	4798      	blx	r3
	 delay_us(150);
    3892:	2000      	movs	r0, #0
    3894:	4b28      	ldr	r3, [pc, #160]	; (3938 <LCD_init+0x288>)
    3896:	4798      	blx	r3
    3898:	0003      	movs	r3, r0
    389a:	001d      	movs	r5, r3
    389c:	2300      	movs	r3, #0
    389e:	001e      	movs	r6, r3
    38a0:	4c26      	ldr	r4, [pc, #152]	; (393c <LCD_init+0x28c>)
    38a2:	2296      	movs	r2, #150	; 0x96
    38a4:	2300      	movs	r3, #0
    38a6:	0028      	movs	r0, r5
    38a8:	0031      	movs	r1, r6
    38aa:	47a0      	blx	r4
    38ac:	0003      	movs	r3, r0
    38ae:	000c      	movs	r4, r1
    38b0:	0019      	movs	r1, r3
    38b2:	0022      	movs	r2, r4
    38b4:	4b23      	ldr	r3, [pc, #140]	; (3944 <LCD_init+0x294>)
    38b6:	2400      	movs	r4, #0
    38b8:	18c9      	adds	r1, r1, r3
    38ba:	4162      	adcs	r2, r4
    38bc:	0008      	movs	r0, r1
    38be:	0011      	movs	r1, r2
    38c0:	4c21      	ldr	r4, [pc, #132]	; (3948 <LCD_init+0x298>)
    38c2:	4a22      	ldr	r2, [pc, #136]	; (394c <LCD_init+0x29c>)
    38c4:	2300      	movs	r3, #0
    38c6:	47a0      	blx	r4
    38c8:	0003      	movs	r3, r0
    38ca:	000c      	movs	r4, r1
    38cc:	0018      	movs	r0, r3
    38ce:	4b20      	ldr	r3, [pc, #128]	; (3950 <LCD_init+0x2a0>)
    38d0:	4798      	blx	r3

	 write4bits(0x02);
    38d2:	2002      	movs	r0, #2
    38d4:	4b20      	ldr	r3, [pc, #128]	; (3958 <LCD_init+0x2a8>)
    38d6:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
    38d8:	4b12      	ldr	r3, [pc, #72]	; (3924 <LCD_init+0x274>)
    38da:	781b      	ldrb	r3, [r3, #0]
    38dc:	2220      	movs	r2, #32
    38de:	4313      	orrs	r3, r2
    38e0:	b2db      	uxtb	r3, r3
    38e2:	0018      	movs	r0, r3
    38e4:	4b1e      	ldr	r3, [pc, #120]	; (3960 <LCD_init+0x2b0>)
    38e6:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    38e8:	4b1e      	ldr	r3, [pc, #120]	; (3964 <LCD_init+0x2b4>)
    38ea:	2204      	movs	r2, #4
    38ec:	701a      	strb	r2, [r3, #0]
	LCD_display();
    38ee:	4b1e      	ldr	r3, [pc, #120]	; (3968 <LCD_init+0x2b8>)
    38f0:	4798      	blx	r3
	LCD_clear();
    38f2:	4b1e      	ldr	r3, [pc, #120]	; (396c <LCD_init+0x2bc>)
    38f4:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    38f6:	4b1e      	ldr	r3, [pc, #120]	; (3970 <LCD_init+0x2c0>)
    38f8:	2202      	movs	r2, #2
    38fa:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
    38fc:	4b1c      	ldr	r3, [pc, #112]	; (3970 <LCD_init+0x2c0>)
    38fe:	781b      	ldrb	r3, [r3, #0]
    3900:	2204      	movs	r2, #4
    3902:	4313      	orrs	r3, r2
    3904:	b2db      	uxtb	r3, r3
    3906:	0018      	movs	r0, r3
    3908:	4b15      	ldr	r3, [pc, #84]	; (3960 <LCD_init+0x2b0>)
    390a:	4798      	blx	r3
}
    390c:	46c0      	nop			; (mov r8, r8)
    390e:	46bd      	mov	sp, r7
    3910:	b00b      	add	sp, #44	; 0x2c
    3912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3914:	00011925 	.word	0x00011925
    3918:	200006d3 	.word	0x200006d3
    391c:	200006d2 	.word	0x200006d2
    3920:	200006cc 	.word	0x200006cc
    3924:	200006d1 	.word	0x200006d1
    3928:	200006ca 	.word	0x200006ca
    392c:	00003a21 	.word	0x00003a21
    3930:	00003639 	.word	0x00003639
    3934:	00011f79 	.word	0x00011f79
    3938:	000138e5 	.word	0x000138e5
    393c:	00015899 	.word	0x00015899
    3940:	0000c350 	.word	0x0000c350
    3944:	006acfbf 	.word	0x006acfbf
    3948:	00015859 	.word	0x00015859
    394c:	006acfc0 	.word	0x006acfc0
    3950:	20000001 	.word	0x20000001
    3954:	0000365d 	.word	0x0000365d
    3958:	00003a5d 	.word	0x00003a5d
    395c:	00001194 	.word	0x00001194
    3960:	00003ba1 	.word	0x00003ba1
    3964:	200006c9 	.word	0x200006c9
    3968:	00003d89 	.word	0x00003d89
    396c:	00003c41 	.word	0x00003c41
    3970:	200006d0 	.word	0x200006d0

00003974 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
    3974:	b580      	push	{r7, lr}
    3976:	b082      	sub	sp, #8
    3978:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    397a:	1d3b      	adds	r3, r7, #4
    397c:	0018      	movs	r0, r3
    397e:	4b08      	ldr	r3, [pc, #32]	; (39a0 <LCD_PWR_CONFIG+0x2c>)
    3980:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    3982:	1d3b      	adds	r3, r7, #4
    3984:	2201      	movs	r2, #1
    3986:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    3988:	1d3b      	adds	r3, r7, #4
    398a:	2200      	movs	r2, #0
    398c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    398e:	1d3b      	adds	r3, r7, #4
    3990:	0019      	movs	r1, r3
    3992:	2024      	movs	r0, #36	; 0x24
    3994:	4b03      	ldr	r3, [pc, #12]	; (39a4 <LCD_PWR_CONFIG+0x30>)
    3996:	4798      	blx	r3
}
    3998:	46c0      	nop			; (mov r8, r8)
    399a:	46bd      	mov	sp, r7
    399c:	b002      	add	sp, #8
    399e:	bd80      	pop	{r7, pc}
    39a0:	00003639 	.word	0x00003639
    39a4:	00011f79 	.word	0x00011f79

000039a8 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
    39a8:	b580      	push	{r7, lr}
    39aa:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
    39ac:	2101      	movs	r1, #1
    39ae:	2024      	movs	r0, #36	; 0x24
    39b0:	4b02      	ldr	r3, [pc, #8]	; (39bc <LCD_PWR_EN+0x14>)
    39b2:	4798      	blx	r3
}
    39b4:	46c0      	nop			; (mov r8, r8)
    39b6:	46bd      	mov	sp, r7
    39b8:	bd80      	pop	{r7, pc}
    39ba:	46c0      	nop			; (mov r8, r8)
    39bc:	0000365d 	.word	0x0000365d

000039c0 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
    39c0:	b580      	push	{r7, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
    39c6:	2100      	movs	r1, #0
    39c8:	2024      	movs	r0, #36	; 0x24
    39ca:	4b11      	ldr	r3, [pc, #68]	; (3a10 <LCD_PWR_DIS+0x50>)
    39cc:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
    39ce:	2300      	movs	r3, #0
    39d0:	607b      	str	r3, [r7, #4]
    39d2:	e00a      	b.n	39ea <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
    39d4:	4a0f      	ldr	r2, [pc, #60]	; (3a14 <LCD_PWR_DIS+0x54>)
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	18d3      	adds	r3, r2, r3
    39da:	781b      	ldrb	r3, [r3, #0]
    39dc:	2100      	movs	r1, #0
    39de:	0018      	movs	r0, r3
    39e0:	4b0b      	ldr	r3, [pc, #44]	; (3a10 <LCD_PWR_DIS+0x50>)
    39e2:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
    39e4:	687b      	ldr	r3, [r7, #4]
    39e6:	3301      	adds	r3, #1
    39e8:	607b      	str	r3, [r7, #4]
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	2b03      	cmp	r3, #3
    39ee:	ddf1      	ble.n	39d4 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
    39f0:	4b09      	ldr	r3, [pc, #36]	; (3a18 <LCD_PWR_DIS+0x58>)
    39f2:	781b      	ldrb	r3, [r3, #0]
    39f4:	2100      	movs	r1, #0
    39f6:	0018      	movs	r0, r3
    39f8:	4b05      	ldr	r3, [pc, #20]	; (3a10 <LCD_PWR_DIS+0x50>)
    39fa:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
    39fc:	4b07      	ldr	r3, [pc, #28]	; (3a1c <LCD_PWR_DIS+0x5c>)
    39fe:	781b      	ldrb	r3, [r3, #0]
    3a00:	2100      	movs	r1, #0
    3a02:	0018      	movs	r0, r3
    3a04:	4b02      	ldr	r3, [pc, #8]	; (3a10 <LCD_PWR_DIS+0x50>)
    3a06:	4798      	blx	r3
	
}
    3a08:	46c0      	nop			; (mov r8, r8)
    3a0a:	46bd      	mov	sp, r7
    3a0c:	b002      	add	sp, #8
    3a0e:	bd80      	pop	{r7, pc}
    3a10:	0000365d 	.word	0x0000365d
    3a14:	200006cc 	.word	0x200006cc
    3a18:	200006d2 	.word	0x200006d2
    3a1c:	200006d3 	.word	0x200006d3

00003a20 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
    3a20:	b580      	push	{r7, lr}
    3a22:	b084      	sub	sp, #16
    3a24:	af00      	add	r7, sp, #0
    3a26:	60f8      	str	r0, [r7, #12]
    3a28:	60b9      	str	r1, [r7, #8]
    3a2a:	607a      	str	r2, [r7, #4]
    3a2c:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
    3a2e:	68fb      	ldr	r3, [r7, #12]
    3a30:	b2da      	uxtb	r2, r3
    3a32:	4b09      	ldr	r3, [pc, #36]	; (3a58 <LCD_setRowOffsets+0x38>)
    3a34:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
    3a36:	68bb      	ldr	r3, [r7, #8]
    3a38:	b2da      	uxtb	r2, r3
    3a3a:	4b07      	ldr	r3, [pc, #28]	; (3a58 <LCD_setRowOffsets+0x38>)
    3a3c:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	b2da      	uxtb	r2, r3
    3a42:	4b05      	ldr	r3, [pc, #20]	; (3a58 <LCD_setRowOffsets+0x38>)
    3a44:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
    3a46:	683b      	ldr	r3, [r7, #0]
    3a48:	b2da      	uxtb	r2, r3
    3a4a:	4b03      	ldr	r3, [pc, #12]	; (3a58 <LCD_setRowOffsets+0x38>)
    3a4c:	70da      	strb	r2, [r3, #3]
}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	46bd      	mov	sp, r7
    3a52:	b004      	add	sp, #16
    3a54:	bd80      	pop	{r7, pc}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	200006c4 	.word	0x200006c4

00003a5c <write4bits>:

void write4bits(uint8_t value)
{
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b084      	sub	sp, #16
    3a60:	af00      	add	r7, sp, #0
    3a62:	0002      	movs	r2, r0
    3a64:	1dfb      	adds	r3, r7, #7
    3a66:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
    3a68:	2300      	movs	r3, #0
    3a6a:	60fb      	str	r3, [r7, #12]
    3a6c:	e013      	b.n	3a96 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    3a6e:	4a0e      	ldr	r2, [pc, #56]	; (3aa8 <write4bits+0x4c>)
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	18d3      	adds	r3, r2, r3
    3a74:	7818      	ldrb	r0, [r3, #0]
    3a76:	1dfb      	adds	r3, r7, #7
    3a78:	781a      	ldrb	r2, [r3, #0]
    3a7a:	68fb      	ldr	r3, [r7, #12]
    3a7c:	411a      	asrs	r2, r3
    3a7e:	0013      	movs	r3, r2
    3a80:	2201      	movs	r2, #1
    3a82:	4013      	ands	r3, r2
    3a84:	1e5a      	subs	r2, r3, #1
    3a86:	4193      	sbcs	r3, r2
    3a88:	b2db      	uxtb	r3, r3
    3a8a:	0019      	movs	r1, r3
    3a8c:	4b07      	ldr	r3, [pc, #28]	; (3aac <write4bits+0x50>)
    3a8e:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
    3a90:	68fb      	ldr	r3, [r7, #12]
    3a92:	3301      	adds	r3, #1
    3a94:	60fb      	str	r3, [r7, #12]
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	2b03      	cmp	r3, #3
    3a9a:	dde8      	ble.n	3a6e <write4bits+0x12>
	}
	pulseEnable();
    3a9c:	4b04      	ldr	r3, [pc, #16]	; (3ab0 <write4bits+0x54>)
    3a9e:	4798      	blx	r3
}
    3aa0:	46c0      	nop			; (mov r8, r8)
    3aa2:	46bd      	mov	sp, r7
    3aa4:	b004      	add	sp, #16
    3aa6:	bd80      	pop	{r7, pc}
    3aa8:	200006cc 	.word	0x200006cc
    3aac:	0000365d 	.word	0x0000365d
    3ab0:	00003ab5 	.word	0x00003ab5

00003ab4 <pulseEnable>:



void pulseEnable(void)
{
    3ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ab6:	b085      	sub	sp, #20
    3ab8:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
    3aba:	4b31      	ldr	r3, [pc, #196]	; (3b80 <pulseEnable+0xcc>)
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2100      	movs	r1, #0
    3ac0:	0018      	movs	r0, r3
    3ac2:	4b30      	ldr	r3, [pc, #192]	; (3b84 <pulseEnable+0xd0>)
    3ac4:	4798      	blx	r3
 	delay_us(1);
    3ac6:	2000      	movs	r0, #0
    3ac8:	4b2f      	ldr	r3, [pc, #188]	; (3b88 <pulseEnable+0xd4>)
    3aca:	4798      	blx	r3
    3acc:	0003      	movs	r3, r0
    3ace:	60bb      	str	r3, [r7, #8]
    3ad0:	2300      	movs	r3, #0
    3ad2:	60fb      	str	r3, [r7, #12]
    3ad4:	4b2d      	ldr	r3, [pc, #180]	; (3b8c <pulseEnable+0xd8>)
    3ad6:	2400      	movs	r4, #0
    3ad8:	68b8      	ldr	r0, [r7, #8]
    3ada:	68f9      	ldr	r1, [r7, #12]
    3adc:	18c0      	adds	r0, r0, r3
    3ade:	4161      	adcs	r1, r4
    3ae0:	4c2b      	ldr	r4, [pc, #172]	; (3b90 <pulseEnable+0xdc>)
    3ae2:	4a2c      	ldr	r2, [pc, #176]	; (3b94 <pulseEnable+0xe0>)
    3ae4:	2300      	movs	r3, #0
    3ae6:	47a0      	blx	r4
    3ae8:	0003      	movs	r3, r0
    3aea:	000c      	movs	r4, r1
    3aec:	0018      	movs	r0, r3
    3aee:	4b2a      	ldr	r3, [pc, #168]	; (3b98 <pulseEnable+0xe4>)
    3af0:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
    3af2:	4b23      	ldr	r3, [pc, #140]	; (3b80 <pulseEnable+0xcc>)
    3af4:	781b      	ldrb	r3, [r3, #0]
    3af6:	2101      	movs	r1, #1
    3af8:	0018      	movs	r0, r3
    3afa:	4b22      	ldr	r3, [pc, #136]	; (3b84 <pulseEnable+0xd0>)
    3afc:	4798      	blx	r3
 	delay_us(1);
    3afe:	2000      	movs	r0, #0
    3b00:	4b21      	ldr	r3, [pc, #132]	; (3b88 <pulseEnable+0xd4>)
    3b02:	4798      	blx	r3
    3b04:	0003      	movs	r3, r0
    3b06:	001d      	movs	r5, r3
    3b08:	2300      	movs	r3, #0
    3b0a:	001e      	movs	r6, r3
    3b0c:	4b1f      	ldr	r3, [pc, #124]	; (3b8c <pulseEnable+0xd8>)
    3b0e:	2400      	movs	r4, #0
    3b10:	0028      	movs	r0, r5
    3b12:	0031      	movs	r1, r6
    3b14:	18c0      	adds	r0, r0, r3
    3b16:	4161      	adcs	r1, r4
    3b18:	4c1d      	ldr	r4, [pc, #116]	; (3b90 <pulseEnable+0xdc>)
    3b1a:	4a1e      	ldr	r2, [pc, #120]	; (3b94 <pulseEnable+0xe0>)
    3b1c:	2300      	movs	r3, #0
    3b1e:	47a0      	blx	r4
    3b20:	0003      	movs	r3, r0
    3b22:	000c      	movs	r4, r1
    3b24:	0018      	movs	r0, r3
    3b26:	4b1c      	ldr	r3, [pc, #112]	; (3b98 <pulseEnable+0xe4>)
    3b28:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
    3b2a:	4b15      	ldr	r3, [pc, #84]	; (3b80 <pulseEnable+0xcc>)
    3b2c:	781b      	ldrb	r3, [r3, #0]
    3b2e:	2100      	movs	r1, #0
    3b30:	0018      	movs	r0, r3
    3b32:	4b14      	ldr	r3, [pc, #80]	; (3b84 <pulseEnable+0xd0>)
    3b34:	4798      	blx	r3
 	delay_us(100);
    3b36:	2000      	movs	r0, #0
    3b38:	4b13      	ldr	r3, [pc, #76]	; (3b88 <pulseEnable+0xd4>)
    3b3a:	4798      	blx	r3
    3b3c:	0003      	movs	r3, r0
    3b3e:	603b      	str	r3, [r7, #0]
    3b40:	2300      	movs	r3, #0
    3b42:	607b      	str	r3, [r7, #4]
    3b44:	4c15      	ldr	r4, [pc, #84]	; (3b9c <pulseEnable+0xe8>)
    3b46:	2264      	movs	r2, #100	; 0x64
    3b48:	2300      	movs	r3, #0
    3b4a:	6838      	ldr	r0, [r7, #0]
    3b4c:	6879      	ldr	r1, [r7, #4]
    3b4e:	47a0      	blx	r4
    3b50:	0003      	movs	r3, r0
    3b52:	000c      	movs	r4, r1
    3b54:	0019      	movs	r1, r3
    3b56:	0022      	movs	r2, r4
    3b58:	4b0c      	ldr	r3, [pc, #48]	; (3b8c <pulseEnable+0xd8>)
    3b5a:	2400      	movs	r4, #0
    3b5c:	18c9      	adds	r1, r1, r3
    3b5e:	4162      	adcs	r2, r4
    3b60:	0008      	movs	r0, r1
    3b62:	0011      	movs	r1, r2
    3b64:	4c0a      	ldr	r4, [pc, #40]	; (3b90 <pulseEnable+0xdc>)
    3b66:	4a0b      	ldr	r2, [pc, #44]	; (3b94 <pulseEnable+0xe0>)
    3b68:	2300      	movs	r3, #0
    3b6a:	47a0      	blx	r4
    3b6c:	0003      	movs	r3, r0
    3b6e:	000c      	movs	r4, r1
    3b70:	0018      	movs	r0, r3
    3b72:	4b09      	ldr	r3, [pc, #36]	; (3b98 <pulseEnable+0xe4>)
    3b74:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	46bd      	mov	sp, r7
    3b7a:	b005      	add	sp, #20
    3b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	200006d2 	.word	0x200006d2
    3b84:	0000365d 	.word	0x0000365d
    3b88:	000138e5 	.word	0x000138e5
    3b8c:	006acfbf 	.word	0x006acfbf
    3b90:	00015859 	.word	0x00015859
    3b94:	006acfc0 	.word	0x006acfc0
    3b98:	20000001 	.word	0x20000001
    3b9c:	00015899 	.word	0x00015899

00003ba0 <command>:

inline void command(uint8_t value) 
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	b082      	sub	sp, #8
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	0002      	movs	r2, r0
    3ba8:	1dfb      	adds	r3, r7, #7
    3baa:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
    3bac:	1dfb      	adds	r3, r7, #7
    3bae:	781b      	ldrb	r3, [r3, #0]
    3bb0:	2100      	movs	r1, #0
    3bb2:	0018      	movs	r0, r3
    3bb4:	4b02      	ldr	r3, [pc, #8]	; (3bc0 <command+0x20>)
    3bb6:	4798      	blx	r3
}
    3bb8:	46c0      	nop			; (mov r8, r8)
    3bba:	46bd      	mov	sp, r7
    3bbc:	b002      	add	sp, #8
    3bbe:	bd80      	pop	{r7, pc}
    3bc0:	00003bed 	.word	0x00003bed

00003bc4 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
    3bc4:	b580      	push	{r7, lr}
    3bc6:	b082      	sub	sp, #8
    3bc8:	af00      	add	r7, sp, #0
    3bca:	0002      	movs	r2, r0
    3bcc:	1dfb      	adds	r3, r7, #7
    3bce:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
    3bd0:	1dfb      	adds	r3, r7, #7
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	2101      	movs	r1, #1
    3bd6:	0018      	movs	r0, r3
    3bd8:	4b03      	ldr	r3, [pc, #12]	; (3be8 <LCD_write+0x24>)
    3bda:	4798      	blx	r3
	return 1;
    3bdc:	2301      	movs	r3, #1
}
    3bde:	0018      	movs	r0, r3
    3be0:	46bd      	mov	sp, r7
    3be2:	b002      	add	sp, #8
    3be4:	bd80      	pop	{r7, pc}
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	00003bed 	.word	0x00003bed

00003bec <send>:

void send(uint8_t value, uint8_t mode) 
{
    3bec:	b580      	push	{r7, lr}
    3bee:	b082      	sub	sp, #8
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	0002      	movs	r2, r0
    3bf4:	1dfb      	adds	r3, r7, #7
    3bf6:	701a      	strb	r2, [r3, #0]
    3bf8:	1dbb      	adds	r3, r7, #6
    3bfa:	1c0a      	adds	r2, r1, #0
    3bfc:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
    3bfe:	4b0d      	ldr	r3, [pc, #52]	; (3c34 <send+0x48>)
    3c00:	781a      	ldrb	r2, [r3, #0]
    3c02:	1dbb      	adds	r3, r7, #6
    3c04:	781b      	ldrb	r3, [r3, #0]
    3c06:	1e59      	subs	r1, r3, #1
    3c08:	418b      	sbcs	r3, r1
    3c0a:	b2db      	uxtb	r3, r3
    3c0c:	0019      	movs	r1, r3
    3c0e:	0010      	movs	r0, r2
    3c10:	4b09      	ldr	r3, [pc, #36]	; (3c38 <send+0x4c>)
    3c12:	4798      	blx	r3
	
	{
		write4bits(value>>4);
    3c14:	1dfb      	adds	r3, r7, #7
    3c16:	781b      	ldrb	r3, [r3, #0]
    3c18:	091b      	lsrs	r3, r3, #4
    3c1a:	b2db      	uxtb	r3, r3
    3c1c:	0018      	movs	r0, r3
    3c1e:	4b07      	ldr	r3, [pc, #28]	; (3c3c <send+0x50>)
    3c20:	4798      	blx	r3
		write4bits(value);
    3c22:	1dfb      	adds	r3, r7, #7
    3c24:	781b      	ldrb	r3, [r3, #0]
    3c26:	0018      	movs	r0, r3
    3c28:	4b04      	ldr	r3, [pc, #16]	; (3c3c <send+0x50>)
    3c2a:	4798      	blx	r3
	}
}
    3c2c:	46c0      	nop			; (mov r8, r8)
    3c2e:	46bd      	mov	sp, r7
    3c30:	b002      	add	sp, #8
    3c32:	bd80      	pop	{r7, pc}
    3c34:	200006d3 	.word	0x200006d3
    3c38:	0000365d 	.word	0x0000365d
    3c3c:	00003a5d 	.word	0x00003a5d

00003c40 <LCD_clear>:

void LCD_clear(void)
{
    3c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c42:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
    3c44:	2001      	movs	r0, #1
    3c46:	4b13      	ldr	r3, [pc, #76]	; (3c94 <LCD_clear+0x54>)
    3c48:	4798      	blx	r3
	delay_us(2000);
    3c4a:	2000      	movs	r0, #0
    3c4c:	4b12      	ldr	r3, [pc, #72]	; (3c98 <LCD_clear+0x58>)
    3c4e:	4798      	blx	r3
    3c50:	0003      	movs	r3, r0
    3c52:	001d      	movs	r5, r3
    3c54:	2300      	movs	r3, #0
    3c56:	001e      	movs	r6, r3
    3c58:	4c10      	ldr	r4, [pc, #64]	; (3c9c <LCD_clear+0x5c>)
    3c5a:	22fa      	movs	r2, #250	; 0xfa
    3c5c:	00d2      	lsls	r2, r2, #3
    3c5e:	2300      	movs	r3, #0
    3c60:	0028      	movs	r0, r5
    3c62:	0031      	movs	r1, r6
    3c64:	47a0      	blx	r4
    3c66:	0003      	movs	r3, r0
    3c68:	000c      	movs	r4, r1
    3c6a:	0019      	movs	r1, r3
    3c6c:	0022      	movs	r2, r4
    3c6e:	4b0c      	ldr	r3, [pc, #48]	; (3ca0 <LCD_clear+0x60>)
    3c70:	2400      	movs	r4, #0
    3c72:	18c9      	adds	r1, r1, r3
    3c74:	4162      	adcs	r2, r4
    3c76:	0008      	movs	r0, r1
    3c78:	0011      	movs	r1, r2
    3c7a:	4c0a      	ldr	r4, [pc, #40]	; (3ca4 <LCD_clear+0x64>)
    3c7c:	4a0a      	ldr	r2, [pc, #40]	; (3ca8 <LCD_clear+0x68>)
    3c7e:	2300      	movs	r3, #0
    3c80:	47a0      	blx	r4
    3c82:	0003      	movs	r3, r0
    3c84:	000c      	movs	r4, r1
    3c86:	0018      	movs	r0, r3
    3c88:	4b08      	ldr	r3, [pc, #32]	; (3cac <LCD_clear+0x6c>)
    3c8a:	4798      	blx	r3
}
    3c8c:	46c0      	nop			; (mov r8, r8)
    3c8e:	46bd      	mov	sp, r7
    3c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	00003ba1 	.word	0x00003ba1
    3c98:	000138e5 	.word	0x000138e5
    3c9c:	00015899 	.word	0x00015899
    3ca0:	006acfbf 	.word	0x006acfbf
    3ca4:	00015859 	.word	0x00015859
    3ca8:	006acfc0 	.word	0x006acfc0
    3cac:	20000001 	.word	0x20000001

00003cb0 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b084      	sub	sp, #16
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	0002      	movs	r2, r0
    3cb8:	6039      	str	r1, [r7, #0]
    3cba:	1dfb      	adds	r3, r7, #7
    3cbc:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
    3cbe:	1dfb      	adds	r3, r7, #7
    3cc0:	1dfa      	adds	r2, r7, #7
    3cc2:	7812      	ldrb	r2, [r2, #0]
    3cc4:	2107      	movs	r1, #7
    3cc6:	400a      	ands	r2, r1
    3cc8:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
    3cca:	1dfb      	adds	r3, r7, #7
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	00db      	lsls	r3, r3, #3
    3cd0:	b25b      	sxtb	r3, r3
    3cd2:	2240      	movs	r2, #64	; 0x40
    3cd4:	4313      	orrs	r3, r2
    3cd6:	b25b      	sxtb	r3, r3
    3cd8:	b2db      	uxtb	r3, r3
    3cda:	0018      	movs	r0, r3
    3cdc:	4b0a      	ldr	r3, [pc, #40]	; (3d08 <LCD_Create_Custom_createChar+0x58>)
    3cde:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3ce0:	2300      	movs	r3, #0
    3ce2:	60fb      	str	r3, [r7, #12]
    3ce4:	e009      	b.n	3cfa <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
    3ce6:	68fb      	ldr	r3, [r7, #12]
    3ce8:	683a      	ldr	r2, [r7, #0]
    3cea:	18d3      	adds	r3, r2, r3
    3cec:	781b      	ldrb	r3, [r3, #0]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b06      	ldr	r3, [pc, #24]	; (3d0c <LCD_Create_Custom_createChar+0x5c>)
    3cf2:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3cf4:	68fb      	ldr	r3, [r7, #12]
    3cf6:	3301      	adds	r3, #1
    3cf8:	60fb      	str	r3, [r7, #12]
    3cfa:	68fb      	ldr	r3, [r7, #12]
    3cfc:	2b07      	cmp	r3, #7
    3cfe:	ddf2      	ble.n	3ce6 <LCD_Create_Custom_createChar+0x36>
	}
}
    3d00:	46c0      	nop			; (mov r8, r8)
    3d02:	46bd      	mov	sp, r7
    3d04:	b004      	add	sp, #16
    3d06:	bd80      	pop	{r7, pc}
    3d08:	00003ba1 	.word	0x00003ba1
    3d0c:	00003bc5 	.word	0x00003bc5

00003d10 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b084      	sub	sp, #16
    3d14:	af00      	add	r7, sp, #0
    3d16:	0002      	movs	r2, r0
    3d18:	1dfb      	adds	r3, r7, #7
    3d1a:	701a      	strb	r2, [r3, #0]
    3d1c:	1dbb      	adds	r3, r7, #6
    3d1e:	1c0a      	adds	r2, r1, #0
    3d20:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
    3d22:	2304      	movs	r3, #4
    3d24:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
    3d26:	1dbb      	adds	r3, r7, #6
    3d28:	781a      	ldrb	r2, [r3, #0]
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	429a      	cmp	r2, r3
    3d2e:	d304      	bcc.n	3d3a <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
    3d30:	68fb      	ldr	r3, [r7, #12]
    3d32:	b2da      	uxtb	r2, r3
    3d34:	1dbb      	adds	r3, r7, #6
    3d36:	3a01      	subs	r2, #1
    3d38:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
    3d3a:	4b10      	ldr	r3, [pc, #64]	; (3d7c <LCD_setCursor+0x6c>)
    3d3c:	781b      	ldrb	r3, [r3, #0]
    3d3e:	1dba      	adds	r2, r7, #6
    3d40:	7812      	ldrb	r2, [r2, #0]
    3d42:	429a      	cmp	r2, r3
    3d44:	d304      	bcc.n	3d50 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
    3d46:	4b0d      	ldr	r3, [pc, #52]	; (3d7c <LCD_setCursor+0x6c>)
    3d48:	781a      	ldrb	r2, [r3, #0]
    3d4a:	1dbb      	adds	r3, r7, #6
    3d4c:	3a01      	subs	r2, #1
    3d4e:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    3d50:	1dbb      	adds	r3, r7, #6
    3d52:	781b      	ldrb	r3, [r3, #0]
    3d54:	4a0a      	ldr	r2, [pc, #40]	; (3d80 <LCD_setCursor+0x70>)
    3d56:	5cd2      	ldrb	r2, [r2, r3]
    3d58:	1dfb      	adds	r3, r7, #7
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	18d3      	adds	r3, r2, r3
    3d5e:	b2db      	uxtb	r3, r3
    3d60:	b25b      	sxtb	r3, r3
    3d62:	2280      	movs	r2, #128	; 0x80
    3d64:	4252      	negs	r2, r2
    3d66:	4313      	orrs	r3, r2
    3d68:	b25b      	sxtb	r3, r3
    3d6a:	b2db      	uxtb	r3, r3
    3d6c:	0018      	movs	r0, r3
    3d6e:	4b05      	ldr	r3, [pc, #20]	; (3d84 <LCD_setCursor+0x74>)
    3d70:	4798      	blx	r3
}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	46bd      	mov	sp, r7
    3d76:	b004      	add	sp, #16
    3d78:	bd80      	pop	{r7, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	200006ca 	.word	0x200006ca
    3d80:	200006c4 	.word	0x200006c4
    3d84:	00003ba1 	.word	0x00003ba1

00003d88 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
    3d8c:	4b08      	ldr	r3, [pc, #32]	; (3db0 <LCD_display+0x28>)
    3d8e:	781b      	ldrb	r3, [r3, #0]
    3d90:	2204      	movs	r2, #4
    3d92:	4313      	orrs	r3, r2
    3d94:	b2da      	uxtb	r2, r3
    3d96:	4b06      	ldr	r3, [pc, #24]	; (3db0 <LCD_display+0x28>)
    3d98:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    3d9a:	4b05      	ldr	r3, [pc, #20]	; (3db0 <LCD_display+0x28>)
    3d9c:	781b      	ldrb	r3, [r3, #0]
    3d9e:	2208      	movs	r2, #8
    3da0:	4313      	orrs	r3, r2
    3da2:	b2db      	uxtb	r3, r3
    3da4:	0018      	movs	r0, r3
    3da6:	4b03      	ldr	r3, [pc, #12]	; (3db4 <LCD_display+0x2c>)
    3da8:	4798      	blx	r3
}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	46bd      	mov	sp, r7
    3dae:	bd80      	pop	{r7, pc}
    3db0:	200006c9 	.word	0x200006c9
    3db4:	00003ba1 	.word	0x00003ba1

00003db8 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b084      	sub	sp, #16
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	0018      	movs	r0, r3
    3dc4:	4b0f      	ldr	r3, [pc, #60]	; (3e04 <Buffer_writer+0x4c>)
    3dc6:	4798      	blx	r3
    3dc8:	0003      	movs	r3, r0
    3dca:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
    3dcc:	2300      	movs	r3, #0
    3dce:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3dd0:	e00b      	b.n	3dea <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
    3dd2:	687b      	ldr	r3, [r7, #4]
    3dd4:	1c5a      	adds	r2, r3, #1
    3dd6:	607a      	str	r2, [r7, #4]
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	0018      	movs	r0, r3
    3ddc:	4b0a      	ldr	r3, [pc, #40]	; (3e08 <Buffer_writer+0x50>)
    3dde:	4798      	blx	r3
    3de0:	1e03      	subs	r3, r0, #0
    3de2:	d008      	beq.n	3df6 <Buffer_writer+0x3e>
    3de4:	68bb      	ldr	r3, [r7, #8]
    3de6:	3301      	adds	r3, #1
    3de8:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	1e5a      	subs	r2, r3, #1
    3dee:	60fa      	str	r2, [r7, #12]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d1ee      	bne.n	3dd2 <Buffer_writer+0x1a>
    3df4:	e000      	b.n	3df8 <Buffer_writer+0x40>
		else break;
    3df6:	46c0      	nop			; (mov r8, r8)
	}
	return n;
    3df8:	68bb      	ldr	r3, [r7, #8]
}
    3dfa:	0018      	movs	r0, r3
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b004      	add	sp, #16
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	00017ff7 	.word	0x00017ff7
    3e08:	00003bc5 	.word	0x00003bc5

00003e0c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
    3e0c:	b40f      	push	{r0, r1, r2, r3}
    3e0e:	b580      	push	{r7, lr}
    3e10:	b084      	sub	sp, #16
    3e12:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
    3e14:	69bb      	ldr	r3, [r7, #24]
    3e16:	0018      	movs	r0, r3
    3e18:	4b11      	ldr	r3, [pc, #68]	; (3e60 <lcd_printf+0x54>)
    3e1a:	4798      	blx	r3
    3e1c:	0003      	movs	r3, r0
    3e1e:	3303      	adds	r3, #3
    3e20:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    3e22:	68fb      	ldr	r3, [r7, #12]
    3e24:	0018      	movs	r0, r3
    3e26:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <lcd_printf+0x58>)
    3e28:	4798      	blx	r3
    3e2a:	0003      	movs	r3, r0
    3e2c:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
    3e2e:	231c      	movs	r3, #28
    3e30:	18fb      	adds	r3, r7, r3
    3e32:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
    3e34:	687a      	ldr	r2, [r7, #4]
    3e36:	69b9      	ldr	r1, [r7, #24]
    3e38:	68bb      	ldr	r3, [r7, #8]
    3e3a:	0018      	movs	r0, r3
    3e3c:	4b0a      	ldr	r3, [pc, #40]	; (3e68 <lcd_printf+0x5c>)
    3e3e:	4798      	blx	r3
	Buffer_writer(lcd_buff);
    3e40:	68bb      	ldr	r3, [r7, #8]
    3e42:	0018      	movs	r0, r3
    3e44:	4b09      	ldr	r3, [pc, #36]	; (3e6c <lcd_printf+0x60>)
    3e46:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
    3e48:	68bb      	ldr	r3, [r7, #8]
    3e4a:	0018      	movs	r0, r3
    3e4c:	4b08      	ldr	r3, [pc, #32]	; (3e70 <lcd_printf+0x64>)
    3e4e:	4798      	blx	r3
}
    3e50:	46c0      	nop			; (mov r8, r8)
    3e52:	46bd      	mov	sp, r7
    3e54:	b004      	add	sp, #16
    3e56:	bc80      	pop	{r7}
    3e58:	bc08      	pop	{r3}
    3e5a:	b004      	add	sp, #16
    3e5c:	4718      	bx	r3
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	00017ff7 	.word	0x00017ff7
    3e64:	00017ce5 	.word	0x00017ce5
    3e68:	000182e5 	.word	0x000182e5
    3e6c:	00003db9 	.word	0x00003db9
    3e70:	00017cf9 	.word	0x00017cf9

00003e74 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b084      	sub	sp, #16
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
	if (!str) return;
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d028      	beq.n	3ed4 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	60fb      	str	r3, [r7, #12]
    3e86:	e020      	b.n	3eca <StringtoUpperCase+0x56>
		*p = toupper(*p);
    3e88:	230b      	movs	r3, #11
    3e8a:	18fb      	adds	r3, r7, r3
    3e8c:	68fa      	ldr	r2, [r7, #12]
    3e8e:	7812      	ldrb	r2, [r2, #0]
    3e90:	701a      	strb	r2, [r3, #0]
    3e92:	4b12      	ldr	r3, [pc, #72]	; (3edc <StringtoUpperCase+0x68>)
    3e94:	4798      	blx	r3
    3e96:	0002      	movs	r2, r0
    3e98:	230b      	movs	r3, #11
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	781b      	ldrb	r3, [r3, #0]
    3e9e:	3301      	adds	r3, #1
    3ea0:	18d3      	adds	r3, r2, r3
    3ea2:	781b      	ldrb	r3, [r3, #0]
    3ea4:	001a      	movs	r2, r3
    3ea6:	2303      	movs	r3, #3
    3ea8:	4013      	ands	r3, r2
    3eaa:	2b02      	cmp	r3, #2
    3eac:	d104      	bne.n	3eb8 <StringtoUpperCase+0x44>
    3eae:	230b      	movs	r3, #11
    3eb0:	18fb      	adds	r3, r7, r3
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	3b20      	subs	r3, #32
    3eb6:	e002      	b.n	3ebe <StringtoUpperCase+0x4a>
    3eb8:	230b      	movs	r3, #11
    3eba:	18fb      	adds	r3, r7, r3
    3ebc:	781b      	ldrb	r3, [r3, #0]
    3ebe:	b2da      	uxtb	r2, r3
    3ec0:	68fb      	ldr	r3, [r7, #12]
    3ec2:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
    3ec4:	68fb      	ldr	r3, [r7, #12]
    3ec6:	3301      	adds	r3, #1
    3ec8:	60fb      	str	r3, [r7, #12]
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	781b      	ldrb	r3, [r3, #0]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d1da      	bne.n	3e88 <StringtoUpperCase+0x14>
    3ed2:	e000      	b.n	3ed6 <StringtoUpperCase+0x62>
	if (!str) return;
    3ed4:	46c0      	nop			; (mov r8, r8)
	}
}
    3ed6:	46bd      	mov	sp, r7
    3ed8:	b004      	add	sp, #16
    3eda:	bd80      	pop	{r7, pc}
    3edc:	00017cc9 	.word	0x00017cc9

00003ee0 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
    3ee0:	b580      	push	{r7, lr}
    3ee2:	b084      	sub	sp, #16
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
    3eea:	683b      	ldr	r3, [r7, #0]
    3eec:	0018      	movs	r0, r3
    3eee:	4b10      	ldr	r3, [pc, #64]	; (3f30 <StringstartsWith+0x50>)
    3ef0:	4798      	blx	r3
    3ef2:	0003      	movs	r3, r0
    3ef4:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	0018      	movs	r0, r3
    3efa:	4b0d      	ldr	r3, [pc, #52]	; (3f30 <StringstartsWith+0x50>)
    3efc:	4798      	blx	r3
    3efe:	0003      	movs	r3, r0
    3f00:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    3f02:	68ba      	ldr	r2, [r7, #8]
    3f04:	68fb      	ldr	r3, [r7, #12]
    3f06:	429a      	cmp	r2, r3
    3f08:	d309      	bcc.n	3f1e <StringstartsWith+0x3e>
    3f0a:	68fa      	ldr	r2, [r7, #12]
    3f0c:	6879      	ldr	r1, [r7, #4]
    3f0e:	683b      	ldr	r3, [r7, #0]
    3f10:	0018      	movs	r0, r3
    3f12:	4b08      	ldr	r3, [pc, #32]	; (3f34 <StringstartsWith+0x54>)
    3f14:	4798      	blx	r3
    3f16:	1e03      	subs	r3, r0, #0
    3f18:	d101      	bne.n	3f1e <StringstartsWith+0x3e>
    3f1a:	2301      	movs	r3, #1
    3f1c:	e000      	b.n	3f20 <StringstartsWith+0x40>
    3f1e:	2300      	movs	r3, #0
    3f20:	1c1a      	adds	r2, r3, #0
    3f22:	2301      	movs	r3, #1
    3f24:	4013      	ands	r3, r2
    3f26:	b2db      	uxtb	r3, r3
}
    3f28:	0018      	movs	r0, r3
    3f2a:	46bd      	mov	sp, r7
    3f2c:	b004      	add	sp, #16
    3f2e:	bd80      	pop	{r7, pc}
    3f30:	00017ff7 	.word	0x00017ff7
    3f34:	00018005 	.word	0x00018005

00003f38 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    3f3c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    3f40:	4b02      	ldr	r3, [pc, #8]	; (3f4c <NVIC_SystemReset+0x14>)
    3f42:	4a03      	ldr	r2, [pc, #12]	; (3f50 <NVIC_SystemReset+0x18>)
    3f44:	60da      	str	r2, [r3, #12]
    3f46:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    3f4a:	e7fe      	b.n	3f4a <NVIC_SystemReset+0x12>
    3f4c:	e000ed00 	.word	0xe000ed00
    3f50:	05fa0004 	.word	0x05fa0004

00003f54 <system_pinmux_get_group_from_gpio_pin>:
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b084      	sub	sp, #16
    3f58:	af00      	add	r7, sp, #0
    3f5a:	0002      	movs	r2, r0
    3f5c:	1dfb      	adds	r3, r7, #7
    3f5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3f60:	230f      	movs	r3, #15
    3f62:	18fb      	adds	r3, r7, r3
    3f64:	1dfa      	adds	r2, r7, #7
    3f66:	7812      	ldrb	r2, [r2, #0]
    3f68:	09d2      	lsrs	r2, r2, #7
    3f6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3f6c:	230e      	movs	r3, #14
    3f6e:	18fb      	adds	r3, r7, r3
    3f70:	1dfa      	adds	r2, r7, #7
    3f72:	7812      	ldrb	r2, [r2, #0]
    3f74:	0952      	lsrs	r2, r2, #5
    3f76:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3f78:	4b0d      	ldr	r3, [pc, #52]	; (3fb0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3f7a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3f7c:	230f      	movs	r3, #15
    3f7e:	18fb      	adds	r3, r7, r3
    3f80:	781b      	ldrb	r3, [r3, #0]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d10f      	bne.n	3fa6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3f86:	230f      	movs	r3, #15
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	009b      	lsls	r3, r3, #2
    3f8e:	2210      	movs	r2, #16
    3f90:	4694      	mov	ip, r2
    3f92:	44bc      	add	ip, r7
    3f94:	4463      	add	r3, ip
    3f96:	3b08      	subs	r3, #8
    3f98:	681a      	ldr	r2, [r3, #0]
    3f9a:	230e      	movs	r3, #14
    3f9c:	18fb      	adds	r3, r7, r3
    3f9e:	781b      	ldrb	r3, [r3, #0]
    3fa0:	01db      	lsls	r3, r3, #7
    3fa2:	18d3      	adds	r3, r2, r3
    3fa4:	e000      	b.n	3fa8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3fa6:	2300      	movs	r3, #0
}
    3fa8:	0018      	movs	r0, r3
    3faa:	46bd      	mov	sp, r7
    3fac:	b004      	add	sp, #16
    3fae:	bd80      	pop	{r7, pc}
    3fb0:	41004400 	.word	0x41004400

00003fb4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    3fb8:	4b02      	ldr	r3, [pc, #8]	; (3fc4 <system_reset+0x10>)
    3fba:	4798      	blx	r3
}
    3fbc:	46c0      	nop			; (mov r8, r8)
    3fbe:	46bd      	mov	sp, r7
    3fc0:	bd80      	pop	{r7, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	00003f39 	.word	0x00003f39

00003fc8 <port_get_group_from_gpio_pin>:
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b082      	sub	sp, #8
    3fcc:	af00      	add	r7, sp, #0
    3fce:	0002      	movs	r2, r0
    3fd0:	1dfb      	adds	r3, r7, #7
    3fd2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3fd4:	1dfb      	adds	r3, r7, #7
    3fd6:	781b      	ldrb	r3, [r3, #0]
    3fd8:	0018      	movs	r0, r3
    3fda:	4b03      	ldr	r3, [pc, #12]	; (3fe8 <port_get_group_from_gpio_pin+0x20>)
    3fdc:	4798      	blx	r3
    3fde:	0003      	movs	r3, r0
}
    3fe0:	0018      	movs	r0, r3
    3fe2:	46bd      	mov	sp, r7
    3fe4:	b002      	add	sp, #8
    3fe6:	bd80      	pop	{r7, pc}
    3fe8:	00003f55 	.word	0x00003f55

00003fec <port_get_config_defaults>:
{
    3fec:	b580      	push	{r7, lr}
    3fee:	b082      	sub	sp, #8
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	2200      	movs	r2, #0
    3ff8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	2201      	movs	r2, #1
    3ffe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	2200      	movs	r2, #0
    4004:	709a      	strb	r2, [r3, #2]
}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	46bd      	mov	sp, r7
    400a:	b002      	add	sp, #8
    400c:	bd80      	pop	{r7, pc}
	...

00004010 <port_pin_get_input_level>:
{
    4010:	b580      	push	{r7, lr}
    4012:	b084      	sub	sp, #16
    4014:	af00      	add	r7, sp, #0
    4016:	0002      	movs	r2, r0
    4018:	1dfb      	adds	r3, r7, #7
    401a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    401c:	1dfb      	adds	r3, r7, #7
    401e:	781b      	ldrb	r3, [r3, #0]
    4020:	0018      	movs	r0, r3
    4022:	4b0b      	ldr	r3, [pc, #44]	; (4050 <port_pin_get_input_level+0x40>)
    4024:	4798      	blx	r3
    4026:	0003      	movs	r3, r0
    4028:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    402a:	1dfb      	adds	r3, r7, #7
    402c:	781b      	ldrb	r3, [r3, #0]
    402e:	221f      	movs	r2, #31
    4030:	4013      	ands	r3, r2
    4032:	2201      	movs	r2, #1
    4034:	409a      	lsls	r2, r3
    4036:	0013      	movs	r3, r2
    4038:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    403a:	68fb      	ldr	r3, [r7, #12]
    403c:	6a1b      	ldr	r3, [r3, #32]
    403e:	68ba      	ldr	r2, [r7, #8]
    4040:	4013      	ands	r3, r2
    4042:	1e5a      	subs	r2, r3, #1
    4044:	4193      	sbcs	r3, r2
    4046:	b2db      	uxtb	r3, r3
}
    4048:	0018      	movs	r0, r3
    404a:	46bd      	mov	sp, r7
    404c:	b004      	add	sp, #16
    404e:	bd80      	pop	{r7, pc}
    4050:	00003fc9 	.word	0x00003fc9

00004054 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
    4054:	b580      	push	{r7, lr}
    4056:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
    4058:	4b0b      	ldr	r3, [pc, #44]	; (4088 <setObtainEvent+0x34>)
    405a:	781b      	ldrb	r3, [r3, #0]
    405c:	2201      	movs	r2, #1
    405e:	4053      	eors	r3, r2
    4060:	b2db      	uxtb	r3, r3
    4062:	2b00      	cmp	r3, #0
    4064:	d00c      	beq.n	4080 <setObtainEvent+0x2c>
    4066:	4b09      	ldr	r3, [pc, #36]	; (408c <setObtainEvent+0x38>)
    4068:	4798      	blx	r3
    406a:	0002      	movs	r2, r0
    406c:	4b08      	ldr	r3, [pc, #32]	; (4090 <setObtainEvent+0x3c>)
    406e:	681b      	ldr	r3, [r3, #0]
    4070:	1ad2      	subs	r2, r2, r3
    4072:	23fa      	movs	r3, #250	; 0xfa
    4074:	009b      	lsls	r3, r3, #2
    4076:	429a      	cmp	r2, r3
    4078:	d902      	bls.n	4080 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
    407a:	4b03      	ldr	r3, [pc, #12]	; (4088 <setObtainEvent+0x34>)
    407c:	2201      	movs	r2, #1
    407e:	701a      	strb	r2, [r3, #0]
	}
}
    4080:	46c0      	nop			; (mov r8, r8)
    4082:	46bd      	mov	sp, r7
    4084:	bd80      	pop	{r7, pc}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	2000074a 	.word	0x2000074a
    408c:	0000f40d 	.word	0x0000f40d
    4090:	200007cc 	.word	0x200007cc

00004094 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
    4094:	b580      	push	{r7, lr}
    4096:	b082      	sub	sp, #8
    4098:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
    409a:	1dfb      	adds	r3, r7, #7
    409c:	2201      	movs	r2, #1
    409e:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
    40a0:	4b23      	ldr	r3, [pc, #140]	; (4130 <operateOnStagedEvent+0x9c>)
    40a2:	781b      	ldrb	r3, [r3, #0]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d003      	beq.n	40b0 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
    40a8:	1dfb      	adds	r3, r7, #7
    40aa:	4a22      	ldr	r2, [pc, #136]	; (4134 <operateOnStagedEvent+0xa0>)
    40ac:	7a12      	ldrb	r2, [r2, #8]
    40ae:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
    40b0:	4b21      	ldr	r3, [pc, #132]	; (4138 <operateOnStagedEvent+0xa4>)
    40b2:	781b      	ldrb	r3, [r3, #0]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d037      	beq.n	4128 <operateOnStagedEvent+0x94>
    40b8:	4b20      	ldr	r3, [pc, #128]	; (413c <operateOnStagedEvent+0xa8>)
    40ba:	781b      	ldrb	r3, [r3, #0]
    40bc:	2b01      	cmp	r3, #1
    40be:	d00b      	beq.n	40d8 <operateOnStagedEvent+0x44>
    40c0:	4b1f      	ldr	r3, [pc, #124]	; (4140 <operateOnStagedEvent+0xac>)
    40c2:	4798      	blx	r3
    40c4:	0002      	movs	r2, r0
    40c6:	4b1f      	ldr	r3, [pc, #124]	; (4144 <operateOnStagedEvent+0xb0>)
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	1ad2      	subs	r2, r2, r3
    40cc:	1dfb      	adds	r3, r7, #7
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	491d      	ldr	r1, [pc, #116]	; (4148 <operateOnStagedEvent+0xb4>)
    40d2:	434b      	muls	r3, r1
    40d4:	429a      	cmp	r2, r3
    40d6:	d927      	bls.n	4128 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    40d8:	4b1c      	ldr	r3, [pc, #112]	; (414c <operateOnStagedEvent+0xb8>)
    40da:	78db      	ldrb	r3, [r3, #3]
    40dc:	2b00      	cmp	r3, #0
    40de:	d01a      	beq.n	4116 <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
    40e0:	4b13      	ldr	r3, [pc, #76]	; (4130 <operateOnStagedEvent+0x9c>)
    40e2:	781b      	ldrb	r3, [r3, #0]
    40e4:	2b00      	cmp	r3, #0
    40e6:	d007      	beq.n	40f8 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
    40e8:	4b19      	ldr	r3, [pc, #100]	; (4150 <operateOnStagedEvent+0xbc>)
    40ea:	781a      	ldrb	r2, [r3, #0]
    40ec:	4b19      	ldr	r3, [pc, #100]	; (4154 <operateOnStagedEvent+0xc0>)
    40ee:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
    40f0:	4b0f      	ldr	r3, [pc, #60]	; (4130 <operateOnStagedEvent+0x9c>)
    40f2:	2200      	movs	r2, #0
    40f4:	701a      	strb	r2, [r3, #0]
    40f6:	e015      	b.n	4124 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
    40f8:	4b17      	ldr	r3, [pc, #92]	; (4158 <operateOnStagedEvent+0xc4>)
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2b00      	cmp	r3, #0
    40fe:	d011      	beq.n	4124 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
    4100:	4b13      	ldr	r3, [pc, #76]	; (4150 <operateOnStagedEvent+0xbc>)
    4102:	781a      	ldrb	r2, [r3, #0]
    4104:	4b15      	ldr	r3, [pc, #84]	; (415c <operateOnStagedEvent+0xc8>)
    4106:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
    4108:	4b15      	ldr	r3, [pc, #84]	; (4160 <operateOnStagedEvent+0xcc>)
    410a:	2201      	movs	r2, #1
    410c:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
    410e:	4b12      	ldr	r3, [pc, #72]	; (4158 <operateOnStagedEvent+0xc4>)
    4110:	2200      	movs	r2, #0
    4112:	701a      	strb	r2, [r3, #0]
    4114:	e006      	b.n	4124 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
    4116:	4b0e      	ldr	r3, [pc, #56]	; (4150 <operateOnStagedEvent+0xbc>)
    4118:	781a      	ldrb	r2, [r3, #0]
    411a:	4b0e      	ldr	r3, [pc, #56]	; (4154 <operateOnStagedEvent+0xc0>)
    411c:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
    411e:	4b04      	ldr	r3, [pc, #16]	; (4130 <operateOnStagedEvent+0x9c>)
    4120:	2200      	movs	r2, #0
    4122:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
    4124:	4b0f      	ldr	r3, [pc, #60]	; (4164 <operateOnStagedEvent+0xd0>)
    4126:	4798      	blx	r3
	}
}
    4128:	46c0      	nop			; (mov r8, r8)
    412a:	46bd      	mov	sp, r7
    412c:	b002      	add	sp, #8
    412e:	bd80      	pop	{r7, pc}
    4130:	2000079a 	.word	0x2000079a
    4134:	2000065c 	.word	0x2000065c
    4138:	2000074a 	.word	0x2000074a
    413c:	200006d9 	.word	0x200006d9
    4140:	0000f40d 	.word	0x0000f40d
    4144:	200007ac 	.word	0x200007ac
    4148:	0000ea60 	.word	0x0000ea60
    414c:	20000628 	.word	0x20000628
    4150:	2000074c 	.word	0x2000074c
    4154:	2000073b 	.word	0x2000073b
    4158:	20000766 	.word	0x20000766
    415c:	20000715 	.word	0x20000715
    4160:	2000071b 	.word	0x2000071b
    4164:	00004169 	.word	0x00004169

00004168 <makeResponseAction>:

void makeResponseAction(void)
{
    4168:	b580      	push	{r7, lr}
    416a:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
    416c:	4b07      	ldr	r3, [pc, #28]	; (418c <makeResponseAction+0x24>)
    416e:	795b      	ldrb	r3, [r3, #5]
    4170:	2b4e      	cmp	r3, #78	; 0x4e
    4172:	d103      	bne.n	417c <makeResponseAction+0x14>
    4174:	4b06      	ldr	r3, [pc, #24]	; (4190 <makeResponseAction+0x28>)
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	2b00      	cmp	r3, #0
    417a:	d004      	beq.n	4186 <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
    417c:	4b05      	ldr	r3, [pc, #20]	; (4194 <makeResponseAction+0x2c>)
    417e:	2201      	movs	r2, #1
    4180:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
    4182:	4b05      	ldr	r3, [pc, #20]	; (4198 <makeResponseAction+0x30>)
    4184:	4798      	blx	r3
	}
}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	46bd      	mov	sp, r7
    418a:	bd80      	pop	{r7, pc}
    418c:	2000065c 	.word	0x2000065c
    4190:	2000071b 	.word	0x2000071b
    4194:	2000071c 	.word	0x2000071c
    4198:	000043d1 	.word	0x000043d1

0000419c <endCall>:

void endCall(void)
{
    419c:	b580      	push	{r7, lr}
    419e:	af00      	add	r7, sp, #0
	nr  = 0;
    41a0:	4b6d      	ldr	r3, [pc, #436]	; (4358 <endCall+0x1bc>)
    41a2:	2200      	movs	r2, #0
    41a4:	701a      	strb	r2, [r3, #0]
	inCall=false;
    41a6:	4b6d      	ldr	r3, [pc, #436]	; (435c <endCall+0x1c0>)
    41a8:	2200      	movs	r2, #0
    41aa:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
    41ac:	4b6c      	ldr	r3, [pc, #432]	; (4360 <endCall+0x1c4>)
    41ae:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    41b0:	2200      	movs	r2, #0
    41b2:	2100      	movs	r1, #0
    41b4:	2000      	movs	r0, #0
    41b6:	4b6b      	ldr	r3, [pc, #428]	; (4364 <endCall+0x1c8>)
    41b8:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
    41ba:	23fa      	movs	r3, #250	; 0xfa
    41bc:	009b      	lsls	r3, r3, #2
    41be:	0018      	movs	r0, r3
    41c0:	4b69      	ldr	r3, [pc, #420]	; (4368 <endCall+0x1cc>)
    41c2:	4798      	blx	r3
	freezeIncomingCalls = false;
    41c4:	4b69      	ldr	r3, [pc, #420]	; (436c <endCall+0x1d0>)
    41c6:	2200      	movs	r2, #0
    41c8:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    41ca:	4b69      	ldr	r3, [pc, #420]	; (4370 <endCall+0x1d4>)
    41cc:	785b      	ldrb	r3, [r3, #1]
    41ce:	2b00      	cmp	r3, #0
    41d0:	d002      	beq.n	41d8 <endCall+0x3c>
	{
		zeroPressed=false;
    41d2:	4b68      	ldr	r3, [pc, #416]	; (4374 <endCall+0x1d8>)
    41d4:	2200      	movs	r2, #0
    41d6:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    41d8:	4b65      	ldr	r3, [pc, #404]	; (4370 <endCall+0x1d4>)
    41da:	78db      	ldrb	r3, [r3, #3]
    41dc:	2b01      	cmp	r3, #1
    41de:	d11d      	bne.n	421c <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
    41e0:	4b65      	ldr	r3, [pc, #404]	; (4378 <endCall+0x1dc>)
    41e2:	781b      	ldrb	r3, [r3, #0]
    41e4:	b2db      	uxtb	r3, r3
    41e6:	2b4e      	cmp	r3, #78	; 0x4e
    41e8:	d004      	beq.n	41f4 <endCall+0x58>
    41ea:	4b63      	ldr	r3, [pc, #396]	; (4378 <endCall+0x1dc>)
    41ec:	781b      	ldrb	r3, [r3, #0]
    41ee:	b2db      	uxtb	r3, r3
    41f0:	2b52      	cmp	r3, #82	; 0x52
    41f2:	d10d      	bne.n	4210 <endCall+0x74>
    41f4:	4b61      	ldr	r3, [pc, #388]	; (437c <endCall+0x1e0>)
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	b2db      	uxtb	r3, r3
    41fa:	2b4f      	cmp	r3, #79	; 0x4f
    41fc:	d108      	bne.n	4210 <endCall+0x74>
    41fe:	4b60      	ldr	r3, [pc, #384]	; (4380 <endCall+0x1e4>)
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	2201      	movs	r2, #1
    4204:	4053      	eors	r3, r2
    4206:	b2db      	uxtb	r3, r3
    4208:	2b00      	cmp	r3, #0
    420a:	d001      	beq.n	4210 <endCall+0x74>
    420c:	2301      	movs	r3, #1
    420e:	e000      	b.n	4212 <endCall+0x76>
    4210:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    4212:	1c1a      	adds	r2, r3, #0
    4214:	2301      	movs	r3, #1
    4216:	4013      	ands	r3, r2
    4218:	b2db      	uxtb	r3, r3
    421a:	e015      	b.n	4248 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
    421c:	4b56      	ldr	r3, [pc, #344]	; (4378 <endCall+0x1dc>)
    421e:	781b      	ldrb	r3, [r3, #0]
    4220:	b2db      	uxtb	r3, r3
    4222:	2b4e      	cmp	r3, #78	; 0x4e
    4224:	d004      	beq.n	4230 <endCall+0x94>
    4226:	4b54      	ldr	r3, [pc, #336]	; (4378 <endCall+0x1dc>)
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	b2db      	uxtb	r3, r3
    422c:	2b52      	cmp	r3, #82	; 0x52
    422e:	d106      	bne.n	423e <endCall+0xa2>
    4230:	4b52      	ldr	r3, [pc, #328]	; (437c <endCall+0x1e0>)
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	b2db      	uxtb	r3, r3
    4236:	2b4f      	cmp	r3, #79	; 0x4f
    4238:	d101      	bne.n	423e <endCall+0xa2>
    423a:	2301      	movs	r3, #1
    423c:	e000      	b.n	4240 <endCall+0xa4>
    423e:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    4240:	1c1a      	adds	r2, r3, #0
    4242:	2301      	movs	r3, #1
    4244:	4013      	ands	r3, r2
    4246:	b2db      	uxtb	r3, r3
    4248:	2b00      	cmp	r3, #0
    424a:	d021      	beq.n	4290 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
    424c:	4b4d      	ldr	r3, [pc, #308]	; (4384 <endCall+0x1e8>)
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	2b00      	cmp	r3, #0
    4252:	d11d      	bne.n	4290 <endCall+0xf4>
    4254:	4b4c      	ldr	r3, [pc, #304]	; (4388 <endCall+0x1ec>)
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	2201      	movs	r2, #1
    425a:	4053      	eors	r3, r2
    425c:	b2db      	uxtb	r3, r3
    425e:	2b00      	cmp	r3, #0
    4260:	d016      	beq.n	4290 <endCall+0xf4>
    4262:	4b4a      	ldr	r3, [pc, #296]	; (438c <endCall+0x1f0>)
    4264:	795b      	ldrb	r3, [r3, #5]
    4266:	2b54      	cmp	r3, #84	; 0x54
    4268:	d112      	bne.n	4290 <endCall+0xf4>
    426a:	4b49      	ldr	r3, [pc, #292]	; (4390 <endCall+0x1f4>)
    426c:	789b      	ldrb	r3, [r3, #2]
    426e:	2b01      	cmp	r3, #1
    4270:	d90e      	bls.n	4290 <endCall+0xf4>
		{
			retries=1;
    4272:	4b44      	ldr	r3, [pc, #272]	; (4384 <endCall+0x1e8>)
    4274:	2201      	movs	r2, #1
    4276:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    4278:	4b46      	ldr	r3, [pc, #280]	; (4394 <endCall+0x1f8>)
    427a:	2201      	movs	r2, #1
    427c:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
    427e:	4b46      	ldr	r3, [pc, #280]	; (4398 <endCall+0x1fc>)
    4280:	4798      	blx	r3
    4282:	0002      	movs	r2, r0
    4284:	4b45      	ldr	r3, [pc, #276]	; (439c <endCall+0x200>)
    4286:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
    4288:	4b45      	ldr	r3, [pc, #276]	; (43a0 <endCall+0x204>)
    428a:	781a      	ldrb	r2, [r3, #0]
    428c:	4b45      	ldr	r3, [pc, #276]	; (43a4 <endCall+0x208>)
    428e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
    4290:	4b37      	ldr	r3, [pc, #220]	; (4370 <endCall+0x1d4>)
    4292:	78db      	ldrb	r3, [r3, #3]
    4294:	2b00      	cmp	r3, #0
    4296:	d047      	beq.n	4328 <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
    4298:	4b37      	ldr	r3, [pc, #220]	; (4378 <endCall+0x1dc>)
    429a:	781b      	ldrb	r3, [r3, #0]
    429c:	b2db      	uxtb	r3, r3
    429e:	2b49      	cmp	r3, #73	; 0x49
    42a0:	d004      	beq.n	42ac <endCall+0x110>
    42a2:	4b35      	ldr	r3, [pc, #212]	; (4378 <endCall+0x1dc>)
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	b2db      	uxtb	r3, r3
    42a8:	2b52      	cmp	r3, #82	; 0x52
    42aa:	d137      	bne.n	431c <endCall+0x180>
    42ac:	4b33      	ldr	r3, [pc, #204]	; (437c <endCall+0x1e0>)
    42ae:	781b      	ldrb	r3, [r3, #0]
    42b0:	b2db      	uxtb	r3, r3
    42b2:	2b4f      	cmp	r3, #79	; 0x4f
    42b4:	d132      	bne.n	431c <endCall+0x180>
    42b6:	4b32      	ldr	r3, [pc, #200]	; (4380 <endCall+0x1e4>)
    42b8:	781b      	ldrb	r3, [r3, #0]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d02e      	beq.n	431c <endCall+0x180>
    42be:	4b3a      	ldr	r3, [pc, #232]	; (43a8 <endCall+0x20c>)
    42c0:	795b      	ldrb	r3, [r3, #5]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d02a      	beq.n	431c <endCall+0x180>
		{
			m2mEventCalls++;
    42c6:	4b39      	ldr	r3, [pc, #228]	; (43ac <endCall+0x210>)
    42c8:	781b      	ldrb	r3, [r3, #0]
    42ca:	3301      	adds	r3, #1
    42cc:	b2da      	uxtb	r2, r3
    42ce:	4b37      	ldr	r3, [pc, #220]	; (43ac <endCall+0x210>)
    42d0:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
    42d2:	4b37      	ldr	r3, [pc, #220]	; (43b0 <endCall+0x214>)
    42d4:	781b      	ldrb	r3, [r3, #0]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d006      	beq.n	42e8 <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
    42da:	4b36      	ldr	r3, [pc, #216]	; (43b4 <endCall+0x218>)
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	2100      	movs	r1, #0
    42e0:	0018      	movs	r0, r3
    42e2:	4b35      	ldr	r3, [pc, #212]	; (43b8 <endCall+0x21c>)
    42e4:	4798      	blx	r3
    42e6:	e016      	b.n	4316 <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
    42e8:	4b30      	ldr	r3, [pc, #192]	; (43ac <endCall+0x210>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	2b01      	cmp	r3, #1
    42ee:	d80c      	bhi.n	430a <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
    42f0:	4b29      	ldr	r3, [pc, #164]	; (4398 <endCall+0x1fc>)
    42f2:	4798      	blx	r3
    42f4:	0002      	movs	r2, r0
    42f6:	4b29      	ldr	r3, [pc, #164]	; (439c <endCall+0x200>)
    42f8:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
    42fa:	4b2e      	ldr	r3, [pc, #184]	; (43b4 <endCall+0x218>)
    42fc:	781a      	ldrb	r2, [r3, #0]
    42fe:	4b29      	ldr	r3, [pc, #164]	; (43a4 <endCall+0x208>)
    4300:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
    4302:	4b2e      	ldr	r3, [pc, #184]	; (43bc <endCall+0x220>)
    4304:	2201      	movs	r2, #1
    4306:	701a      	strb	r2, [r3, #0]
    4308:	e005      	b.n	4316 <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
    430a:	4b2a      	ldr	r3, [pc, #168]	; (43b4 <endCall+0x218>)
    430c:	781b      	ldrb	r3, [r3, #0]
    430e:	2103      	movs	r1, #3
    4310:	0018      	movs	r0, r3
    4312:	4b29      	ldr	r3, [pc, #164]	; (43b8 <endCall+0x21c>)
    4314:	4798      	blx	r3
				}
			}
			m2mEvent = false;
    4316:	4b1a      	ldr	r3, [pc, #104]	; (4380 <endCall+0x1e4>)
    4318:	2200      	movs	r2, #0
    431a:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
    431c:	4b28      	ldr	r3, [pc, #160]	; (43c0 <endCall+0x224>)
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
    4322:	4b23      	ldr	r3, [pc, #140]	; (43b0 <endCall+0x214>)
    4324:	2200      	movs	r2, #0
    4326:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
    4328:	4b17      	ldr	r3, [pc, #92]	; (4388 <endCall+0x1ec>)
    432a:	2200      	movs	r2, #0
    432c:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    432e:	4b12      	ldr	r3, [pc, #72]	; (4378 <endCall+0x1dc>)
    4330:	224e      	movs	r2, #78	; 0x4e
    4332:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    4334:	4b11      	ldr	r3, [pc, #68]	; (437c <endCall+0x1e0>)
    4336:	224e      	movs	r2, #78	; 0x4e
    4338:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
    433a:	4b22      	ldr	r3, [pc, #136]	; (43c4 <endCall+0x228>)
    433c:	2200      	movs	r2, #0
    433e:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
    4340:	4b15      	ldr	r3, [pc, #84]	; (4398 <endCall+0x1fc>)
    4342:	4798      	blx	r3
    4344:	0002      	movs	r2, r0
    4346:	4b20      	ldr	r3, [pc, #128]	; (43c8 <endCall+0x22c>)
    4348:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
    434a:	4b20      	ldr	r3, [pc, #128]	; (43cc <endCall+0x230>)
    434c:	2200      	movs	r2, #0
    434e:	701a      	strb	r2, [r3, #0]
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	bd80      	pop	{r7, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	200006d8 	.word	0x200006d8
    435c:	20000774 	.word	0x20000774
    4360:	00002ee9 	.word	0x00002ee9
    4364:	0000bdf5 	.word	0x0000bdf5
    4368:	0000f0a9 	.word	0x0000f0a9
    436c:	2000071c 	.word	0x2000071c
    4370:	20000628 	.word	0x20000628
    4374:	200007c7 	.word	0x200007c7
    4378:	200007a8 	.word	0x200007a8
    437c:	20000767 	.word	0x20000767
    4380:	2000071b 	.word	0x2000071b
    4384:	200006d9 	.word	0x200006d9
    4388:	20000776 	.word	0x20000776
    438c:	2000065c 	.word	0x2000065c
    4390:	20000610 	.word	0x20000610
    4394:	2000079a 	.word	0x2000079a
    4398:	0000f40d 	.word	0x0000f40d
    439c:	200007ac 	.word	0x200007ac
    43a0:	2000073b 	.word	0x2000073b
    43a4:	2000074c 	.word	0x2000074c
    43a8:	20000554 	.word	0x20000554
    43ac:	2000079b 	.word	0x2000079b
    43b0:	20000714 	.word	0x20000714
    43b4:	20000715 	.word	0x20000715
    43b8:	0000ae1d 	.word	0x0000ae1d
    43bc:	20000766 	.word	0x20000766
    43c0:	20000798 	.word	0x20000798
    43c4:	20000770 	.word	0x20000770
    43c8:	200007cc 	.word	0x200007cc
    43cc:	2000074a 	.word	0x2000074a

000043d0 <makeCall>:


void makeCall(void)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b086      	sub	sp, #24
    43d4:	af00      	add	r7, sp, #0
	inCall=true;
    43d6:	4b20      	ldr	r3, [pc, #128]	; (4458 <makeCall+0x88>)
    43d8:	2201      	movs	r2, #1
    43da:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
    43dc:	1d3b      	adds	r3, r7, #4
    43de:	0018      	movs	r0, r3
    43e0:	2314      	movs	r3, #20
    43e2:	001a      	movs	r2, r3
    43e4:	2100      	movs	r1, #0
    43e6:	4b1d      	ldr	r3, [pc, #116]	; (445c <makeCall+0x8c>)
    43e8:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
    43ea:	4b1d      	ldr	r3, [pc, #116]	; (4460 <makeCall+0x90>)
    43ec:	795b      	ldrb	r3, [r3, #5]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d008      	beq.n	4404 <makeCall+0x34>
    43f2:	4b1c      	ldr	r3, [pc, #112]	; (4464 <makeCall+0x94>)
    43f4:	781b      	ldrb	r3, [r3, #0]
    43f6:	2b00      	cmp	r3, #0
    43f8:	d004      	beq.n	4404 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
    43fa:	1d3b      	adds	r3, r7, #4
    43fc:	0018      	movs	r0, r3
    43fe:	4b1a      	ldr	r3, [pc, #104]	; (4468 <makeCall+0x98>)
    4400:	4798      	blx	r3
    4402:	e00f      	b.n	4424 <makeCall+0x54>
	}
	else
	{
		if(retries)
    4404:	4b19      	ldr	r3, [pc, #100]	; (446c <makeCall+0x9c>)
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	2b00      	cmp	r3, #0
    440a:	d007      	beq.n	441c <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
    440c:	4b18      	ldr	r3, [pc, #96]	; (4470 <makeCall+0xa0>)
    440e:	791a      	ldrb	r2, [r3, #4]
    4410:	1d3b      	adds	r3, r7, #4
    4412:	0011      	movs	r1, r2
    4414:	0018      	movs	r0, r3
    4416:	4b17      	ldr	r3, [pc, #92]	; (4474 <makeCall+0xa4>)
    4418:	4798      	blx	r3
    441a:	e003      	b.n	4424 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
    441c:	1d3b      	adds	r3, r7, #4
    441e:	0018      	movs	r0, r3
    4420:	4b15      	ldr	r3, [pc, #84]	; (4478 <makeCall+0xa8>)
    4422:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
    4424:	1d3b      	adds	r3, r7, #4
    4426:	0018      	movs	r0, r3
    4428:	4b14      	ldr	r3, [pc, #80]	; (447c <makeCall+0xac>)
    442a:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
    442c:	1d3b      	adds	r3, r7, #4
    442e:	2200      	movs	r2, #0
    4430:	0019      	movs	r1, r3
    4432:	2003      	movs	r0, #3
    4434:	4b12      	ldr	r3, [pc, #72]	; (4480 <makeCall+0xb0>)
    4436:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    4438:	4b12      	ldr	r3, [pc, #72]	; (4484 <makeCall+0xb4>)
    443a:	4798      	blx	r3
    443c:	0002      	movs	r2, r0
    443e:	4b12      	ldr	r3, [pc, #72]	; (4488 <makeCall+0xb8>)
    4440:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
    4442:	4b12      	ldr	r3, [pc, #72]	; (448c <makeCall+0xbc>)
    4444:	2252      	movs	r2, #82	; 0x52
    4446:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
    4448:	4b11      	ldr	r3, [pc, #68]	; (4490 <makeCall+0xc0>)
    444a:	224f      	movs	r2, #79	; 0x4f
    444c:	701a      	strb	r2, [r3, #0]
}
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	46bd      	mov	sp, r7
    4452:	b006      	add	sp, #24
    4454:	bd80      	pop	{r7, pc}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	20000774 	.word	0x20000774
    445c:	00017d67 	.word	0x00017d67
    4460:	20000554 	.word	0x20000554
    4464:	2000071b 	.word	0x2000071b
    4468:	00000b09 	.word	0x00000b09
    446c:	200006d9 	.word	0x200006d9
    4470:	20000610 	.word	0x20000610
    4474:	00000919 	.word	0x00000919
    4478:	00000d21 	.word	0x00000d21
    447c:	00002d25 	.word	0x00002d25
    4480:	0000bdf5 	.word	0x0000bdf5
    4484:	0000f40d 	.word	0x0000f40d
    4488:	200007d0 	.word	0x200007d0
    448c:	200007a8 	.word	0x200007a8
    4490:	20000767 	.word	0x20000767

00004494 <acceptCall>:

void acceptCall(void)
{
    4494:	b580      	push	{r7, lr}
    4496:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
    4498:	4b0a      	ldr	r3, [pc, #40]	; (44c4 <acceptCall+0x30>)
    449a:	2200      	movs	r2, #0
    449c:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
    449e:	4b0a      	ldr	r3, [pc, #40]	; (44c8 <acceptCall+0x34>)
    44a0:	2201      	movs	r2, #1
    44a2:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
    44a4:	4b09      	ldr	r3, [pc, #36]	; (44cc <acceptCall+0x38>)
    44a6:	4798      	blx	r3
	currentStatus = 'I';
    44a8:	4b09      	ldr	r3, [pc, #36]	; (44d0 <acceptCall+0x3c>)
    44aa:	2249      	movs	r2, #73	; 0x49
    44ac:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
    44ae:	4b09      	ldr	r3, [pc, #36]	; (44d4 <acceptCall+0x40>)
    44b0:	2249      	movs	r2, #73	; 0x49
    44b2:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
    44b4:	2101      	movs	r1, #1
    44b6:	204d      	movs	r0, #77	; 0x4d
    44b8:	4b07      	ldr	r3, [pc, #28]	; (44d8 <acceptCall+0x44>)
    44ba:	4798      	blx	r3
	//displayInIncomingCall
}
    44bc:	46c0      	nop			; (mov r8, r8)
    44be:	46bd      	mov	sp, r7
    44c0:	bd80      	pop	{r7, pc}
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	20000770 	.word	0x20000770
    44c8:	20000776 	.word	0x20000776
    44cc:	00002dbd 	.word	0x00002dbd
    44d0:	200007a8 	.word	0x200007a8
    44d4:	20000767 	.word	0x20000767
    44d8:	000044dd 	.word	0x000044dd

000044dc <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
    44dc:	b580      	push	{r7, lr}
    44de:	b082      	sub	sp, #8
    44e0:	af00      	add	r7, sp, #0
    44e2:	0002      	movs	r2, r0
    44e4:	1dfb      	adds	r3, r7, #7
    44e6:	701a      	strb	r2, [r3, #0]
    44e8:	1dbb      	adds	r3, r7, #6
    44ea:	1c0a      	adds	r2, r1, #0
    44ec:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
    44ee:	4b14      	ldr	r3, [pc, #80]	; (4540 <playSound+0x64>)
    44f0:	4798      	blx	r3
	bplaySound = true;
    44f2:	4b14      	ldr	r3, [pc, #80]	; (4544 <playSound+0x68>)
    44f4:	2201      	movs	r2, #1
    44f6:	701a      	strb	r2, [r3, #0]
	if (newAction)
    44f8:	1dbb      	adds	r3, r7, #6
    44fa:	781b      	ldrb	r3, [r3, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d016      	beq.n	452e <playSound+0x52>
	{
		maxPlayingFiles=1;
    4500:	4b11      	ldr	r3, [pc, #68]	; (4548 <playSound+0x6c>)
    4502:	2201      	movs	r2, #1
    4504:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
    4506:	4b11      	ldr	r3, [pc, #68]	; (454c <playSound+0x70>)
    4508:	2200      	movs	r2, #0
    450a:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
    450c:	4b0f      	ldr	r3, [pc, #60]	; (454c <playSound+0x70>)
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	0019      	movs	r1, r3
    4512:	4b0f      	ldr	r3, [pc, #60]	; (4550 <playSound+0x74>)
    4514:	1dfa      	adds	r2, r7, #7
    4516:	7812      	ldrb	r2, [r2, #0]
    4518:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
    451a:	4b0c      	ldr	r3, [pc, #48]	; (454c <playSound+0x70>)
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	3301      	adds	r3, #1
    4520:	4a0b      	ldr	r2, [pc, #44]	; (4550 <playSound+0x74>)
    4522:	2100      	movs	r1, #0
    4524:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
    4526:	4b0b      	ldr	r3, [pc, #44]	; (4554 <playSound+0x78>)
    4528:	1dfa      	adds	r2, r7, #7
    452a:	7812      	ldrb	r2, [r2, #0]
    452c:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
    452e:	4b0a      	ldr	r3, [pc, #40]	; (4558 <playSound+0x7c>)
    4530:	1dfa      	adds	r2, r7, #7
    4532:	7812      	ldrb	r2, [r2, #0]
    4534:	701a      	strb	r2, [r3, #0]
}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	46bd      	mov	sp, r7
    453a:	b002      	add	sp, #8
    453c:	bd80      	pop	{r7, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	00002f49 	.word	0x00002f49
    4544:	20000816 	.word	0x20000816
    4548:	2000079c 	.word	0x2000079c
    454c:	2000078c 	.word	0x2000078c
    4550:	20000724 	.word	0x20000724
    4554:	2000073b 	.word	0x2000073b
    4558:	2000078b 	.word	0x2000078b

0000455c <playSoundElligible>:

bool playSoundElligible(void)
{
    455c:	b580      	push	{r7, lr}
    455e:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
    4560:	4b0d      	ldr	r3, [pc, #52]	; (4598 <playSoundElligible+0x3c>)
    4562:	781b      	ldrb	r3, [r3, #0]
    4564:	2b00      	cmp	r3, #0
    4566:	d00e      	beq.n	4586 <playSoundElligible+0x2a>
    4568:	4b0c      	ldr	r3, [pc, #48]	; (459c <playSoundElligible+0x40>)
    456a:	4798      	blx	r3
    456c:	0002      	movs	r2, r0
    456e:	4b0c      	ldr	r3, [pc, #48]	; (45a0 <playSoundElligible+0x44>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	1ad3      	subs	r3, r2, r3
    4574:	4a0b      	ldr	r2, [pc, #44]	; (45a4 <playSoundElligible+0x48>)
    4576:	7812      	ldrb	r2, [r2, #0]
    4578:	0011      	movs	r1, r2
    457a:	2264      	movs	r2, #100	; 0x64
    457c:	434a      	muls	r2, r1
    457e:	4293      	cmp	r3, r2
    4580:	d901      	bls.n	4586 <playSoundElligible+0x2a>
    4582:	2301      	movs	r3, #1
    4584:	e000      	b.n	4588 <playSoundElligible+0x2c>
    4586:	2300      	movs	r3, #0
    4588:	1c1a      	adds	r2, r3, #0
    458a:	2301      	movs	r3, #1
    458c:	4013      	ands	r3, r2
    458e:	b2db      	uxtb	r3, r3
}
    4590:	0018      	movs	r0, r3
    4592:	46bd      	mov	sp, r7
    4594:	bd80      	pop	{r7, pc}
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	20000816 	.word	0x20000816
    459c:	0000f40d 	.word	0x0000f40d
    45a0:	200007f8 	.word	0x200007f8
    45a4:	2000079d 	.word	0x2000079d

000045a8 <triggerPlaySound>:

void triggerPlaySound(void)
{
    45a8:	b580      	push	{r7, lr}
    45aa:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
    45ac:	4b0b      	ldr	r3, [pc, #44]	; (45dc <triggerPlaySound+0x34>)
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	2b01      	cmp	r3, #1
    45b2:	d906      	bls.n	45c2 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
    45b4:	4b0a      	ldr	r3, [pc, #40]	; (45e0 <triggerPlaySound+0x38>)
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	2100      	movs	r1, #0
    45ba:	0018      	movs	r0, r3
    45bc:	4b09      	ldr	r3, [pc, #36]	; (45e4 <triggerPlaySound+0x3c>)
    45be:	4798      	blx	r3
    45c0:	e005      	b.n	45ce <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
    45c2:	4b07      	ldr	r3, [pc, #28]	; (45e0 <triggerPlaySound+0x38>)
    45c4:	781b      	ldrb	r3, [r3, #0]
    45c6:	2101      	movs	r1, #1
    45c8:	0018      	movs	r0, r3
    45ca:	4b06      	ldr	r3, [pc, #24]	; (45e4 <triggerPlaySound+0x3c>)
    45cc:	4798      	blx	r3
	}
	bplaySound = false;
    45ce:	4b06      	ldr	r3, [pc, #24]	; (45e8 <triggerPlaySound+0x40>)
    45d0:	2200      	movs	r2, #0
    45d2:	701a      	strb	r2, [r3, #0]
}
    45d4:	46c0      	nop			; (mov r8, r8)
    45d6:	46bd      	mov	sp, r7
    45d8:	bd80      	pop	{r7, pc}
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	2000079c 	.word	0x2000079c
    45e0:	2000078b 	.word	0x2000078b
    45e4:	00002f79 	.word	0x00002f79
    45e8:	20000816 	.word	0x20000816

000045ec <playSoundAgain>:

void playSoundAgain(char *string)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b082      	sub	sp, #8
    45f0:	af00      	add	r7, sp, #0
    45f2:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
    45f4:	4b18      	ldr	r3, [pc, #96]	; (4658 <playSoundAgain+0x6c>)
    45f6:	781b      	ldrb	r3, [r3, #0]
    45f8:	2201      	movs	r2, #1
    45fa:	4053      	eors	r3, r2
    45fc:	b2db      	uxtb	r3, r3
    45fe:	2b00      	cmp	r3, #0
    4600:	d025      	beq.n	464e <playSoundAgain+0x62>
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	0018      	movs	r0, r3
    4606:	4b15      	ldr	r3, [pc, #84]	; (465c <playSoundAgain+0x70>)
    4608:	4798      	blx	r3
    460a:	1e03      	subs	r3, r0, #0
    460c:	d01f      	beq.n	464e <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
    460e:	4b14      	ldr	r3, [pc, #80]	; (4660 <playSoundAgain+0x74>)
    4610:	781b      	ldrb	r3, [r3, #0]
    4612:	2b01      	cmp	r3, #1
    4614:	d91b      	bls.n	464e <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
    4616:	4b13      	ldr	r3, [pc, #76]	; (4664 <playSoundAgain+0x78>)
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	001a      	movs	r2, r3
    461c:	4b10      	ldr	r3, [pc, #64]	; (4660 <playSoundAgain+0x74>)
    461e:	781b      	ldrb	r3, [r3, #0]
    4620:	3b01      	subs	r3, #1
    4622:	429a      	cmp	r2, r3
    4624:	da0f      	bge.n	4646 <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
    4626:	4b0f      	ldr	r3, [pc, #60]	; (4664 <playSoundAgain+0x78>)
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	3301      	adds	r3, #1
    462c:	b2da      	uxtb	r2, r3
    462e:	4b0d      	ldr	r3, [pc, #52]	; (4664 <playSoundAgain+0x78>)
    4630:	701a      	strb	r2, [r3, #0]
    4632:	4b0c      	ldr	r3, [pc, #48]	; (4664 <playSoundAgain+0x78>)
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	001a      	movs	r2, r3
    4638:	4b0b      	ldr	r3, [pc, #44]	; (4668 <playSoundAgain+0x7c>)
    463a:	5c9b      	ldrb	r3, [r3, r2]
    463c:	2100      	movs	r1, #0
    463e:	0018      	movs	r0, r3
    4640:	4b0a      	ldr	r3, [pc, #40]	; (466c <playSoundAgain+0x80>)
    4642:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
    4644:	e003      	b.n	464e <playSoundAgain+0x62>
				playSound('M',true);
    4646:	2101      	movs	r1, #1
    4648:	204d      	movs	r0, #77	; 0x4d
    464a:	4b08      	ldr	r3, [pc, #32]	; (466c <playSoundAgain+0x80>)
    464c:	4798      	blx	r3
}
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	46bd      	mov	sp, r7
    4652:	b002      	add	sp, #8
    4654:	bd80      	pop	{r7, pc}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	20000816 	.word	0x20000816
    465c:	00003585 	.word	0x00003585
    4660:	2000079c 	.word	0x2000079c
    4664:	2000078c 	.word	0x2000078c
    4668:	20000724 	.word	0x20000724
    466c:	000044dd 	.word	0x000044dd

00004670 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
    4670:	b580      	push	{r7, lr}
    4672:	b082      	sub	sp, #8
    4674:	af00      	add	r7, sp, #0
    4676:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	0018      	movs	r0, r3
    467c:	4b14      	ldr	r3, [pc, #80]	; (46d0 <playRepeatedFiles+0x60>)
    467e:	4798      	blx	r3
    4680:	0003      	movs	r3, r0
    4682:	2b0e      	cmp	r3, #14
    4684:	d81f      	bhi.n	46c6 <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
    4686:	4b13      	ldr	r3, [pc, #76]	; (46d4 <playRepeatedFiles+0x64>)
    4688:	2200      	movs	r2, #0
    468a:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	0018      	movs	r0, r3
    4690:	4b0f      	ldr	r3, [pc, #60]	; (46d0 <playRepeatedFiles+0x60>)
    4692:	4798      	blx	r3
    4694:	0003      	movs	r3, r0
    4696:	b2da      	uxtb	r2, r3
    4698:	4b0f      	ldr	r3, [pc, #60]	; (46d8 <playRepeatedFiles+0x68>)
    469a:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
    469c:	687a      	ldr	r2, [r7, #4]
    469e:	4b0f      	ldr	r3, [pc, #60]	; (46dc <playRepeatedFiles+0x6c>)
    46a0:	0011      	movs	r1, r2
    46a2:	0018      	movs	r0, r3
    46a4:	4b0e      	ldr	r3, [pc, #56]	; (46e0 <playRepeatedFiles+0x70>)
    46a6:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
    46a8:	4b0e      	ldr	r3, [pc, #56]	; (46e4 <playRepeatedFiles+0x74>)
    46aa:	4798      	blx	r3
    46ac:	0002      	movs	r2, r0
    46ae:	4b0e      	ldr	r3, [pc, #56]	; (46e8 <playRepeatedFiles+0x78>)
    46b0:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
    46b2:	4b08      	ldr	r3, [pc, #32]	; (46d4 <playRepeatedFiles+0x64>)
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	001a      	movs	r2, r3
    46b8:	4b08      	ldr	r3, [pc, #32]	; (46dc <playRepeatedFiles+0x6c>)
    46ba:	5c9a      	ldrb	r2, [r3, r2]
    46bc:	4b0b      	ldr	r3, [pc, #44]	; (46ec <playRepeatedFiles+0x7c>)
    46be:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
    46c0:	4b0b      	ldr	r3, [pc, #44]	; (46f0 <playRepeatedFiles+0x80>)
    46c2:	2201      	movs	r2, #1
    46c4:	701a      	strb	r2, [r3, #0]
	}
}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	46bd      	mov	sp, r7
    46ca:	b002      	add	sp, #8
    46cc:	bd80      	pop	{r7, pc}
    46ce:	46c0      	nop			; (mov r8, r8)
    46d0:	00017ff7 	.word	0x00017ff7
    46d4:	2000078c 	.word	0x2000078c
    46d8:	2000079c 	.word	0x2000079c
    46dc:	20000724 	.word	0x20000724
    46e0:	00017fe7 	.word	0x00017fe7
    46e4:	0000f40d 	.word	0x0000f40d
    46e8:	200007f8 	.word	0x200007f8
    46ec:	2000078b 	.word	0x2000078b
    46f0:	20000816 	.word	0x20000816

000046f4 <callTimerExpire>:

bool callTimerExpire(void)
{
    46f4:	b580      	push	{r7, lr}
    46f6:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
    46f8:	4b09      	ldr	r3, [pc, #36]	; (4720 <callTimerExpire+0x2c>)
    46fa:	4798      	blx	r3
    46fc:	0002      	movs	r2, r0
    46fe:	4b09      	ldr	r3, [pc, #36]	; (4724 <callTimerExpire+0x30>)
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	1ad2      	subs	r2, r2, r3
    4704:	4b08      	ldr	r3, [pc, #32]	; (4728 <callTimerExpire+0x34>)
    4706:	881b      	ldrh	r3, [r3, #0]
    4708:	0019      	movs	r1, r3
    470a:	2364      	movs	r3, #100	; 0x64
    470c:	434b      	muls	r3, r1
    470e:	0019      	movs	r1, r3
    4710:	2300      	movs	r3, #0
    4712:	428a      	cmp	r2, r1
    4714:	415b      	adcs	r3, r3
    4716:	b2db      	uxtb	r3, r3
}
    4718:	0018      	movs	r0, r3
    471a:	46bd      	mov	sp, r7
    471c:	bd80      	pop	{r7, pc}
    471e:	46c0      	nop			; (mov r8, r8)
    4720:	0000f40d 	.word	0x0000f40d
    4724:	200007d0 	.word	0x200007d0
    4728:	2000073c 	.word	0x2000073c

0000472c <OutGoingcallState>:

char OutGoingcallState(char *response)
{
    472c:	b580      	push	{r7, lr}
    472e:	b082      	sub	sp, #8
    4730:	af00      	add	r7, sp, #0
    4732:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
    4734:	4a16      	ldr	r2, [pc, #88]	; (4790 <OutGoingcallState+0x64>)
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	0011      	movs	r1, r2
    473a:	0018      	movs	r0, r3
    473c:	4b15      	ldr	r3, [pc, #84]	; (4794 <OutGoingcallState+0x68>)
    473e:	4798      	blx	r3
    4740:	1e03      	subs	r3, r0, #0
    4742:	d001      	beq.n	4748 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
    4744:	2344      	movs	r3, #68	; 0x44
    4746:	e01e      	b.n	4786 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
    4748:	4a13      	ldr	r2, [pc, #76]	; (4798 <OutGoingcallState+0x6c>)
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	0011      	movs	r1, r2
    474e:	0018      	movs	r0, r3
    4750:	4b10      	ldr	r3, [pc, #64]	; (4794 <OutGoingcallState+0x68>)
    4752:	4798      	blx	r3
    4754:	1e03      	subs	r3, r0, #0
    4756:	d001      	beq.n	475c <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
    4758:	2352      	movs	r3, #82	; 0x52
    475a:	e014      	b.n	4786 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
    475c:	4a0f      	ldr	r2, [pc, #60]	; (479c <OutGoingcallState+0x70>)
    475e:	687b      	ldr	r3, [r7, #4]
    4760:	0011      	movs	r1, r2
    4762:	0018      	movs	r0, r3
    4764:	4b0b      	ldr	r3, [pc, #44]	; (4794 <OutGoingcallState+0x68>)
    4766:	4798      	blx	r3
    4768:	1e03      	subs	r3, r0, #0
    476a:	d001      	beq.n	4770 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
    476c:	2349      	movs	r3, #73	; 0x49
    476e:	e00a      	b.n	4786 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
    4770:	4a0b      	ldr	r2, [pc, #44]	; (47a0 <OutGoingcallState+0x74>)
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	0011      	movs	r1, r2
    4776:	0018      	movs	r0, r3
    4778:	4b06      	ldr	r3, [pc, #24]	; (4794 <OutGoingcallState+0x68>)
    477a:	4798      	blx	r3
    477c:	1e03      	subs	r3, r0, #0
    477e:	d001      	beq.n	4784 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
    4780:	2345      	movs	r3, #69	; 0x45
    4782:	e000      	b.n	4786 <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
    4784:	234e      	movs	r3, #78	; 0x4e
	}
}
    4786:	0018      	movs	r0, r3
    4788:	46bd      	mov	sp, r7
    478a:	b002      	add	sp, #8
    478c:	bd80      	pop	{r7, pc}
    478e:	46c0      	nop			; (mov r8, r8)
    4790:	00018f5c 	.word	0x00018f5c
    4794:	00018027 	.word	0x00018027
    4798:	00018f6c 	.word	0x00018f6c
    479c:	00018f7c 	.word	0x00018f7c
    47a0:	00018f8c 	.word	0x00018f8c

000047a4 <registerEvent>:

bool registerEvent(char eventType)
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b082      	sub	sp, #8
    47a8:	af00      	add	r7, sp, #0
    47aa:	0002      	movs	r2, r0
    47ac:	1dfb      	adds	r3, r7, #7
    47ae:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    47b0:	4b34      	ldr	r3, [pc, #208]	; (4884 <registerEvent+0xe0>)
    47b2:	789b      	ldrb	r3, [r3, #2]
    47b4:	2b00      	cmp	r3, #0
    47b6:	d003      	beq.n	47c0 <registerEvent+0x1c>
    47b8:	4b33      	ldr	r3, [pc, #204]	; (4888 <registerEvent+0xe4>)
    47ba:	795b      	ldrb	r3, [r3, #5]
    47bc:	2b4e      	cmp	r3, #78	; 0x4e
    47be:	d101      	bne.n	47c4 <registerEvent+0x20>
	{
		return true;
    47c0:	2301      	movs	r3, #1
    47c2:	e05b      	b.n	487c <registerEvent+0xd8>
	}
	if (!initialized)
    47c4:	4b31      	ldr	r3, [pc, #196]	; (488c <registerEvent+0xe8>)
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	b2db      	uxtb	r3, r3
    47ca:	2201      	movs	r2, #1
    47cc:	4053      	eors	r3, r2
    47ce:	b2db      	uxtb	r3, r3
    47d0:	2b00      	cmp	r3, #0
    47d2:	d001      	beq.n	47d8 <registerEvent+0x34>
	{
		return true;
    47d4:	2301      	movs	r3, #1
    47d6:	e051      	b.n	487c <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
    47d8:	4b2d      	ldr	r3, [pc, #180]	; (4890 <registerEvent+0xec>)
    47da:	781b      	ldrb	r3, [r3, #0]
    47dc:	2201      	movs	r2, #1
    47de:	4053      	eors	r3, r2
    47e0:	b2db      	uxtb	r3, r3
    47e2:	2b00      	cmp	r3, #0
    47e4:	d007      	beq.n	47f6 <registerEvent+0x52>
    47e6:	4b2b      	ldr	r3, [pc, #172]	; (4894 <registerEvent+0xf0>)
    47e8:	781b      	ldrb	r3, [r3, #0]
    47ea:	1dfa      	adds	r2, r7, #7
    47ec:	7812      	ldrb	r2, [r2, #0]
    47ee:	429a      	cmp	r2, r3
    47f0:	d101      	bne.n	47f6 <registerEvent+0x52>
	{
		return true;
    47f2:	2301      	movs	r3, #1
    47f4:	e042      	b.n	487c <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    47f6:	4b28      	ldr	r3, [pc, #160]	; (4898 <registerEvent+0xf4>)
    47f8:	781b      	ldrb	r3, [r3, #0]
    47fa:	b2db      	uxtb	r3, r3
    47fc:	2b4e      	cmp	r3, #78	; 0x4e
    47fe:	d13c      	bne.n	487a <registerEvent+0xd6>
    4800:	4b26      	ldr	r3, [pc, #152]	; (489c <registerEvent+0xf8>)
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	b2db      	uxtb	r3, r3
    4806:	2b4e      	cmp	r3, #78	; 0x4e
    4808:	d137      	bne.n	487a <registerEvent+0xd6>
    480a:	4b25      	ldr	r3, [pc, #148]	; (48a0 <registerEvent+0xfc>)
    480c:	781b      	ldrb	r3, [r3, #0]
    480e:	2b00      	cmp	r3, #0
    4810:	d033      	beq.n	487a <registerEvent+0xd6>
    4812:	4b1f      	ldr	r3, [pc, #124]	; (4890 <registerEvent+0xec>)
    4814:	781b      	ldrb	r3, [r3, #0]
    4816:	2201      	movs	r2, #1
    4818:	4053      	eors	r3, r2
    481a:	b2db      	uxtb	r3, r3
    481c:	2b00      	cmp	r3, #0
    481e:	d02c      	beq.n	487a <registerEvent+0xd6>
    4820:	4b20      	ldr	r3, [pc, #128]	; (48a4 <registerEvent+0x100>)
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2201      	movs	r2, #1
    4826:	4053      	eors	r3, r2
    4828:	b2db      	uxtb	r3, r3
    482a:	2b00      	cmp	r3, #0
    482c:	d025      	beq.n	487a <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
    482e:	4b16      	ldr	r3, [pc, #88]	; (4888 <registerEvent+0xe4>)
    4830:	7a5b      	ldrb	r3, [r3, #9]
    4832:	2b00      	cmp	r3, #0
    4834:	d005      	beq.n	4842 <registerEvent+0x9e>
    4836:	4b1c      	ldr	r3, [pc, #112]	; (48a8 <registerEvent+0x104>)
    4838:	4798      	blx	r3
    483a:	1e03      	subs	r3, r0, #0
    483c:	d001      	beq.n	4842 <registerEvent+0x9e>
		{
			return true;
    483e:	2301      	movs	r3, #1
    4840:	e01c      	b.n	487c <registerEvent+0xd8>
		}
		retries=0;
    4842:	4b1a      	ldr	r3, [pc, #104]	; (48ac <registerEvent+0x108>)
    4844:	2200      	movs	r2, #0
    4846:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
    4848:	4b0f      	ldr	r3, [pc, #60]	; (4888 <registerEvent+0xe4>)
    484a:	7a1b      	ldrb	r3, [r3, #8]
    484c:	2b00      	cmp	r3, #0
    484e:	d00c      	beq.n	486a <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
    4850:	4b17      	ldr	r3, [pc, #92]	; (48b0 <registerEvent+0x10c>)
    4852:	4798      	blx	r3
    4854:	0002      	movs	r2, r0
    4856:	4b17      	ldr	r3, [pc, #92]	; (48b4 <registerEvent+0x110>)
    4858:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
    485a:	4b17      	ldr	r3, [pc, #92]	; (48b8 <registerEvent+0x114>)
    485c:	1dfa      	adds	r2, r7, #7
    485e:	7812      	ldrb	r2, [r2, #0]
    4860:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    4862:	4b0b      	ldr	r3, [pc, #44]	; (4890 <registerEvent+0xec>)
    4864:	2201      	movs	r2, #1
    4866:	701a      	strb	r2, [r3, #0]
    4868:	e005      	b.n	4876 <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
    486a:	4b0a      	ldr	r3, [pc, #40]	; (4894 <registerEvent+0xf0>)
    486c:	1dfa      	adds	r2, r7, #7
    486e:	7812      	ldrb	r2, [r2, #0]
    4870:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
    4872:	4b12      	ldr	r3, [pc, #72]	; (48bc <registerEvent+0x118>)
    4874:	4798      	blx	r3
		}
		return true;
    4876:	2301      	movs	r3, #1
    4878:	e000      	b.n	487c <registerEvent+0xd8>
	}
	else
	{
		return false;
    487a:	2300      	movs	r3, #0
	}
}
    487c:	0018      	movs	r0, r3
    487e:	46bd      	mov	sp, r7
    4880:	b002      	add	sp, #8
    4882:	bd80      	pop	{r7, pc}
    4884:	20000610 	.word	0x20000610
    4888:	2000065c 	.word	0x2000065c
    488c:	20000775 	.word	0x20000775
    4890:	2000079a 	.word	0x2000079a
    4894:	2000073b 	.word	0x2000073b
    4898:	200007a8 	.word	0x200007a8
    489c:	20000767 	.word	0x20000767
    48a0:	2000074a 	.word	0x2000074a
    48a4:	20000766 	.word	0x20000766
    48a8:	00006c35 	.word	0x00006c35
    48ac:	200006d9 	.word	0x200006d9
    48b0:	0000f40d 	.word	0x0000f40d
    48b4:	200007ac 	.word	0x200007ac
    48b8:	2000074c 	.word	0x2000074c
    48bc:	00004169 	.word	0x00004169

000048c0 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
    48c0:	b580      	push	{r7, lr}
    48c2:	b082      	sub	sp, #8
    48c4:	af00      	add	r7, sp, #0
    48c6:	0002      	movs	r2, r0
    48c8:	1dfb      	adds	r3, r7, #7
    48ca:	701a      	strb	r2, [r3, #0]
	if (!initialized)
    48cc:	4b20      	ldr	r3, [pc, #128]	; (4950 <registerM2MEvent+0x90>)
    48ce:	781b      	ldrb	r3, [r3, #0]
    48d0:	b2db      	uxtb	r3, r3
    48d2:	2201      	movs	r2, #1
    48d4:	4053      	eors	r3, r2
    48d6:	b2db      	uxtb	r3, r3
    48d8:	2b00      	cmp	r3, #0
    48da:	d006      	beq.n	48ea <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
    48dc:	1dfb      	adds	r3, r7, #7
    48de:	781b      	ldrb	r3, [r3, #0]
    48e0:	2100      	movs	r1, #0
    48e2:	0018      	movs	r0, r3
    48e4:	4b1b      	ldr	r3, [pc, #108]	; (4954 <registerM2MEvent+0x94>)
    48e6:	4798      	blx	r3
		return;
    48e8:	e02e      	b.n	4948 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    48ea:	4b1b      	ldr	r3, [pc, #108]	; (4958 <registerM2MEvent+0x98>)
    48ec:	781b      	ldrb	r3, [r3, #0]
    48ee:	b2db      	uxtb	r3, r3
    48f0:	2b4e      	cmp	r3, #78	; 0x4e
    48f2:	d129      	bne.n	4948 <registerM2MEvent+0x88>
    48f4:	4b19      	ldr	r3, [pc, #100]	; (495c <registerM2MEvent+0x9c>)
    48f6:	781b      	ldrb	r3, [r3, #0]
    48f8:	b2db      	uxtb	r3, r3
    48fa:	2b4e      	cmp	r3, #78	; 0x4e
    48fc:	d124      	bne.n	4948 <registerM2MEvent+0x88>
    48fe:	4b18      	ldr	r3, [pc, #96]	; (4960 <registerM2MEvent+0xa0>)
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	2b00      	cmp	r3, #0
    4904:	d020      	beq.n	4948 <registerM2MEvent+0x88>
    4906:	4b17      	ldr	r3, [pc, #92]	; (4964 <registerM2MEvent+0xa4>)
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2201      	movs	r2, #1
    490c:	4053      	eors	r3, r2
    490e:	b2db      	uxtb	r3, r3
    4910:	2b00      	cmp	r3, #0
    4912:	d019      	beq.n	4948 <registerM2MEvent+0x88>
    4914:	4b14      	ldr	r3, [pc, #80]	; (4968 <registerM2MEvent+0xa8>)
    4916:	781b      	ldrb	r3, [r3, #0]
    4918:	2201      	movs	r2, #1
    491a:	4053      	eors	r3, r2
    491c:	b2db      	uxtb	r3, r3
    491e:	2b00      	cmp	r3, #0
    4920:	d012      	beq.n	4948 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
    4922:	1dfb      	adds	r3, r7, #7
    4924:	781b      	ldrb	r3, [r3, #0]
    4926:	2102      	movs	r1, #2
    4928:	0018      	movs	r0, r3
    492a:	4b0a      	ldr	r3, [pc, #40]	; (4954 <registerM2MEvent+0x94>)
    492c:	4798      	blx	r3
		m2mEvent=true;
    492e:	4b0f      	ldr	r3, [pc, #60]	; (496c <registerM2MEvent+0xac>)
    4930:	2201      	movs	r2, #1
    4932:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
    4934:	4b0e      	ldr	r3, [pc, #56]	; (4970 <registerM2MEvent+0xb0>)
    4936:	1dfa      	adds	r2, r7, #7
    4938:	7812      	ldrb	r2, [r2, #0]
    493a:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
    493c:	4b0d      	ldr	r3, [pc, #52]	; (4974 <registerM2MEvent+0xb4>)
    493e:	2200      	movs	r2, #0
    4940:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
    4942:	4b0d      	ldr	r3, [pc, #52]	; (4978 <registerM2MEvent+0xb8>)
    4944:	4798      	blx	r3
		return;
    4946:	46c0      	nop			; (mov r8, r8)
	}
}
    4948:	46bd      	mov	sp, r7
    494a:	b002      	add	sp, #8
    494c:	bd80      	pop	{r7, pc}
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	20000775 	.word	0x20000775
    4954:	0000ae1d 	.word	0x0000ae1d
    4958:	200007a8 	.word	0x200007a8
    495c:	20000767 	.word	0x20000767
    4960:	2000074a 	.word	0x2000074a
    4964:	2000079a 	.word	0x2000079a
    4968:	20000766 	.word	0x20000766
    496c:	2000071b 	.word	0x2000071b
    4970:	20000715 	.word	0x20000715
    4974:	2000079b 	.word	0x2000079b
    4978:	00004169 	.word	0x00004169

0000497c <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
    497c:	b580      	push	{r7, lr}
    497e:	b082      	sub	sp, #8
    4980:	af00      	add	r7, sp, #0
    4982:	0002      	movs	r2, r0
    4984:	1dfb      	adds	r3, r7, #7
    4986:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
    4988:	4b07      	ldr	r3, [pc, #28]	; (49a8 <setMotorMGRResponse+0x2c>)
    498a:	781b      	ldrb	r3, [r3, #0]
    498c:	b2db      	uxtb	r3, r3
    498e:	2b49      	cmp	r3, #73	; 0x49
    4990:	d106      	bne.n	49a0 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
    4992:	1dfb      	adds	r3, r7, #7
    4994:	781b      	ldrb	r3, [r3, #0]
    4996:	2101      	movs	r1, #1
    4998:	0018      	movs	r0, r3
    499a:	4b04      	ldr	r3, [pc, #16]	; (49ac <setMotorMGRResponse+0x30>)
    499c:	4798      	blx	r3
    499e:	e000      	b.n	49a2 <setMotorMGRResponse+0x26>
		return;
    49a0:	46c0      	nop			; (mov r8, r8)
}
    49a2:	46bd      	mov	sp, r7
    49a4:	b002      	add	sp, #8
    49a6:	bd80      	pop	{r7, pc}
    49a8:	200007a8 	.word	0x200007a8
    49ac:	000044dd 	.word	0x000044dd

000049b0 <checkRespSMS>:

void checkRespSMS(char t1)
{
    49b0:	b580      	push	{r7, lr}
    49b2:	b082      	sub	sp, #8
    49b4:	af00      	add	r7, sp, #0
    49b6:	0002      	movs	r2, r0
    49b8:	1dfb      	adds	r3, r7, #7
    49ba:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
    49bc:	4b0c      	ldr	r3, [pc, #48]	; (49f0 <checkRespSMS+0x40>)
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	2201      	movs	r2, #1
    49c2:	4053      	eors	r3, r2
    49c4:	b2db      	uxtb	r3, r3
    49c6:	2b00      	cmp	r3, #0
    49c8:	d00d      	beq.n	49e6 <checkRespSMS+0x36>
    49ca:	4b0a      	ldr	r3, [pc, #40]	; (49f4 <checkRespSMS+0x44>)
    49cc:	795b      	ldrb	r3, [r3, #5]
    49ce:	2b41      	cmp	r3, #65	; 0x41
    49d0:	d109      	bne.n	49e6 <checkRespSMS+0x36>
	{
		actionType = t1;
    49d2:	4b09      	ldr	r3, [pc, #36]	; (49f8 <checkRespSMS+0x48>)
    49d4:	1dfa      	adds	r2, r7, #7
    49d6:	7812      	ldrb	r2, [r2, #0]
    49d8:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
    49da:	4b08      	ldr	r3, [pc, #32]	; (49fc <checkRespSMS+0x4c>)
    49dc:	2200      	movs	r2, #0
    49de:	2100      	movs	r1, #0
    49e0:	0018      	movs	r0, r3
    49e2:	4b07      	ldr	r3, [pc, #28]	; (4a00 <checkRespSMS+0x50>)
    49e4:	4798      	blx	r3
	}
}
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	46bd      	mov	sp, r7
    49ea:	b002      	add	sp, #8
    49ec:	bd80      	pop	{r7, pc}
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	20000776 	.word	0x20000776
    49f4:	2000065c 	.word	0x2000065c
    49f8:	2000073b 	.word	0x2000073b
    49fc:	00018f9c 	.word	0x00018f9c
    4a00:	00006d19 	.word	0x00006d19

00004a04 <subDTMF>:

void subDTMF(void)
{
    4a04:	b580      	push	{r7, lr}
    4a06:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
    4a08:	4b04      	ldr	r3, [pc, #16]	; (4a1c <subDTMF+0x18>)
    4a0a:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    4a0c:	4b04      	ldr	r3, [pc, #16]	; (4a20 <subDTMF+0x1c>)
    4a0e:	4798      	blx	r3
    4a10:	0002      	movs	r2, r0
    4a12:	4b04      	ldr	r3, [pc, #16]	; (4a24 <subDTMF+0x20>)
    4a14:	601a      	str	r2, [r3, #0]
}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	46bd      	mov	sp, r7
    4a1a:	bd80      	pop	{r7, pc}
    4a1c:	00002f49 	.word	0x00002f49
    4a20:	0000f40d 	.word	0x0000f40d
    4a24:	200007d0 	.word	0x200007d0

00004a28 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b084      	sub	sp, #16
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
    4a30:	230f      	movs	r3, #15
    4a32:	18fb      	adds	r3, r7, r3
    4a34:	687a      	ldr	r2, [r7, #4]
    4a36:	7812      	ldrb	r2, [r2, #0]
    4a38:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
    4a3a:	4b6a      	ldr	r3, [pc, #424]	; (4be4 <processOnDTMF+0x1bc>)
    4a3c:	78db      	ldrb	r3, [r3, #3]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d010      	beq.n	4a64 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
    4a42:	4b69      	ldr	r3, [pc, #420]	; (4be8 <processOnDTMF+0x1c0>)
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	2b00      	cmp	r3, #0
    4a48:	d100      	bne.n	4a4c <processOnDTMF+0x24>
    4a4a:	e0c7      	b.n	4bdc <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
    4a4c:	230f      	movs	r3, #15
    4a4e:	18fb      	adds	r3, r7, r3
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	2b41      	cmp	r3, #65	; 0x41
    4a54:	d000      	beq.n	4a58 <processOnDTMF+0x30>
    4a56:	e0c1      	b.n	4bdc <processOnDTMF+0x1b4>
			{
				m2mAck=true;
    4a58:	4b64      	ldr	r3, [pc, #400]	; (4bec <processOnDTMF+0x1c4>)
    4a5a:	2201      	movs	r2, #1
    4a5c:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
    4a5e:	4b64      	ldr	r3, [pc, #400]	; (4bf0 <processOnDTMF+0x1c8>)
    4a60:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
    4a62:	e0bb      	b.n	4bdc <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
    4a64:	230f      	movs	r3, #15
    4a66:	18fb      	adds	r3, r7, r3
    4a68:	781b      	ldrb	r3, [r3, #0]
    4a6a:	2b31      	cmp	r3, #49	; 0x31
    4a6c:	d106      	bne.n	4a7c <processOnDTMF+0x54>
			subDTMF();
    4a6e:	4b61      	ldr	r3, [pc, #388]	; (4bf4 <processOnDTMF+0x1cc>)
    4a70:	4798      	blx	r3
			startMotor(true,false);
    4a72:	2100      	movs	r1, #0
    4a74:	2001      	movs	r0, #1
    4a76:	4b60      	ldr	r3, [pc, #384]	; (4bf8 <processOnDTMF+0x1d0>)
    4a78:	4798      	blx	r3
}
    4a7a:	e0af      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
    4a7c:	230f      	movs	r3, #15
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	781b      	ldrb	r3, [r3, #0]
    4a82:	2b32      	cmp	r3, #50	; 0x32
    4a84:	d107      	bne.n	4a96 <processOnDTMF+0x6e>
			subDTMF();
    4a86:	4b5b      	ldr	r3, [pc, #364]	; (4bf4 <processOnDTMF+0x1cc>)
    4a88:	4798      	blx	r3
			stopMotor(true,false,false);
    4a8a:	2200      	movs	r2, #0
    4a8c:	2100      	movs	r1, #0
    4a8e:	2001      	movs	r0, #1
    4a90:	4b5a      	ldr	r3, [pc, #360]	; (4bfc <processOnDTMF+0x1d4>)
    4a92:	4798      	blx	r3
}
    4a94:	e0a2      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
    4a96:	230f      	movs	r3, #15
    4a98:	18fb      	adds	r3, r7, r3
    4a9a:	781b      	ldrb	r3, [r3, #0]
    4a9c:	2b33      	cmp	r3, #51	; 0x33
    4a9e:	d104      	bne.n	4aaa <processOnDTMF+0x82>
			subDTMF();
    4aa0:	4b54      	ldr	r3, [pc, #336]	; (4bf4 <processOnDTMF+0x1cc>)
    4aa2:	4798      	blx	r3
			statusOnCall();
    4aa4:	4b56      	ldr	r3, [pc, #344]	; (4c00 <processOnDTMF+0x1d8>)
    4aa6:	4798      	blx	r3
}
    4aa8:	e098      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
    4aaa:	230f      	movs	r3, #15
    4aac:	18fb      	adds	r3, r7, r3
    4aae:	781b      	ldrb	r3, [r3, #0]
    4ab0:	2b34      	cmp	r3, #52	; 0x34
    4ab2:	d10a      	bne.n	4aca <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
    4ab4:	4b4b      	ldr	r3, [pc, #300]	; (4be4 <processOnDTMF+0x1bc>)
    4ab6:	795b      	ldrb	r3, [r3, #5]
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d100      	bne.n	4abe <processOnDTMF+0x96>
    4abc:	e08e      	b.n	4bdc <processOnDTMF+0x1b4>
				subDTMF();
    4abe:	4b4d      	ldr	r3, [pc, #308]	; (4bf4 <processOnDTMF+0x1cc>)
    4ac0:	4798      	blx	r3
				waterStatusOnCall(false);
    4ac2:	2000      	movs	r0, #0
    4ac4:	4b4f      	ldr	r3, [pc, #316]	; (4c04 <processOnDTMF+0x1dc>)
    4ac6:	4798      	blx	r3
}
    4ac8:	e088      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
    4aca:	230f      	movs	r3, #15
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	2b35      	cmp	r3, #53	; 0x35
    4ad2:	d10a      	bne.n	4aea <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
    4ad4:	4b43      	ldr	r3, [pc, #268]	; (4be4 <processOnDTMF+0x1bc>)
    4ad6:	791b      	ldrb	r3, [r3, #4]
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d100      	bne.n	4ade <processOnDTMF+0xb6>
    4adc:	e07e      	b.n	4bdc <processOnDTMF+0x1b4>
				subDTMF();
    4ade:	4b45      	ldr	r3, [pc, #276]	; (4bf4 <processOnDTMF+0x1cc>)
    4ae0:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
    4ae2:	2000      	movs	r0, #0
    4ae4:	4b48      	ldr	r3, [pc, #288]	; (4c08 <processOnDTMF+0x1e0>)
    4ae6:	4798      	blx	r3
}
    4ae8:	e078      	b.n	4bdc <processOnDTMF+0x1b4>
		else if(dtmf == '0')
    4aea:	230f      	movs	r3, #15
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	781b      	ldrb	r3, [r3, #0]
    4af0:	2b30      	cmp	r3, #48	; 0x30
    4af2:	d114      	bne.n	4b1e <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4af4:	4b3b      	ldr	r3, [pc, #236]	; (4be4 <processOnDTMF+0x1bc>)
    4af6:	785b      	ldrb	r3, [r3, #1]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d100      	bne.n	4afe <processOnDTMF+0xd6>
    4afc:	e06e      	b.n	4bdc <processOnDTMF+0x1b4>
				if(zeroPressed)
    4afe:	4b43      	ldr	r3, [pc, #268]	; (4c0c <processOnDTMF+0x1e4>)
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d007      	beq.n	4b16 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
    4b06:	4b42      	ldr	r3, [pc, #264]	; (4c10 <processOnDTMF+0x1e8>)
    4b08:	4798      	blx	r3
					subDTMF();
    4b0a:	4b3a      	ldr	r3, [pc, #232]	; (4bf4 <processOnDTMF+0x1cc>)
    4b0c:	4798      	blx	r3
					zeroPressed=false;
    4b0e:	4b3f      	ldr	r3, [pc, #252]	; (4c0c <processOnDTMF+0x1e4>)
    4b10:	2200      	movs	r2, #0
    4b12:	701a      	strb	r2, [r3, #0]
}
    4b14:	e062      	b.n	4bdc <processOnDTMF+0x1b4>
					zeroPressed=true;
    4b16:	4b3d      	ldr	r3, [pc, #244]	; (4c0c <processOnDTMF+0x1e4>)
    4b18:	2201      	movs	r2, #1
    4b1a:	701a      	strb	r2, [r3, #0]
}
    4b1c:	e05e      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
    4b1e:	230f      	movs	r3, #15
    4b20:	18fb      	adds	r3, r7, r3
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	2b37      	cmp	r3, #55	; 0x37
    4b26:	d108      	bne.n	4b3a <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
    4b28:	4b2e      	ldr	r3, [pc, #184]	; (4be4 <processOnDTMF+0x1bc>)
    4b2a:	789b      	ldrb	r3, [r3, #2]
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d055      	beq.n	4bdc <processOnDTMF+0x1b4>
				subDTMF();
    4b30:	4b30      	ldr	r3, [pc, #192]	; (4bf4 <processOnDTMF+0x1cc>)
    4b32:	4798      	blx	r3
				speakAmpere();
    4b34:	4b37      	ldr	r3, [pc, #220]	; (4c14 <processOnDTMF+0x1ec>)
    4b36:	4798      	blx	r3
}
    4b38:	e050      	b.n	4bdc <processOnDTMF+0x1b4>
		else if(dtmf=='D')
    4b3a:	230f      	movs	r3, #15
    4b3c:	18fb      	adds	r3, r7, r3
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	2b44      	cmp	r3, #68	; 0x44
    4b42:	d10d      	bne.n	4b60 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    4b44:	2001      	movs	r0, #1
    4b46:	4b34      	ldr	r3, [pc, #208]	; (4c18 <processOnDTMF+0x1f0>)
    4b48:	4798      	blx	r3
			resetAutoStart(true);
    4b4a:	2001      	movs	r0, #1
    4b4c:	4b33      	ldr	r3, [pc, #204]	; (4c1c <processOnDTMF+0x1f4>)
    4b4e:	4798      	blx	r3
			startMotor(false,false);
    4b50:	2100      	movs	r1, #0
    4b52:	2000      	movs	r0, #0
    4b54:	4b28      	ldr	r3, [pc, #160]	; (4bf8 <processOnDTMF+0x1d0>)
    4b56:	4798      	blx	r3
			sendDTMFTone(0xFF);
    4b58:	20ff      	movs	r0, #255	; 0xff
    4b5a:	4b31      	ldr	r3, [pc, #196]	; (4c20 <processOnDTMF+0x1f8>)
    4b5c:	4798      	blx	r3
}
    4b5e:	e03d      	b.n	4bdc <processOnDTMF+0x1b4>
		else if(dtmf=='C')
    4b60:	230f      	movs	r3, #15
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	781b      	ldrb	r3, [r3, #0]
    4b66:	2b43      	cmp	r3, #67	; 0x43
    4b68:	d10b      	bne.n	4b82 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
    4b6a:	2000      	movs	r0, #0
    4b6c:	4b2a      	ldr	r3, [pc, #168]	; (4c18 <processOnDTMF+0x1f0>)
    4b6e:	4798      	blx	r3
			stopMotor(false,false,true);
    4b70:	2201      	movs	r2, #1
    4b72:	2100      	movs	r1, #0
    4b74:	2000      	movs	r0, #0
    4b76:	4b21      	ldr	r3, [pc, #132]	; (4bfc <processOnDTMF+0x1d4>)
    4b78:	4798      	blx	r3
			sendDTMFTone(0xFF);
    4b7a:	20ff      	movs	r0, #255	; 0xff
    4b7c:	4b28      	ldr	r3, [pc, #160]	; (4c20 <processOnDTMF+0x1f8>)
    4b7e:	4798      	blx	r3
}
    4b80:	e02c      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
    4b82:	230f      	movs	r3, #15
    4b84:	18fb      	adds	r3, r7, r3
    4b86:	781b      	ldrb	r3, [r3, #0]
    4b88:	2b38      	cmp	r3, #56	; 0x38
    4b8a:	d10c      	bne.n	4ba6 <processOnDTMF+0x17e>
			subDTMF();
    4b8c:	4b19      	ldr	r3, [pc, #100]	; (4bf4 <processOnDTMF+0x1cc>)
    4b8e:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    4b90:	2001      	movs	r0, #1
    4b92:	4b21      	ldr	r3, [pc, #132]	; (4c18 <processOnDTMF+0x1f0>)
    4b94:	4798      	blx	r3
			resetAutoStart(true);
    4b96:	2001      	movs	r0, #1
    4b98:	4b20      	ldr	r3, [pc, #128]	; (4c1c <processOnDTMF+0x1f4>)
    4b9a:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
    4b9c:	2101      	movs	r1, #1
    4b9e:	2029      	movs	r0, #41	; 0x29
    4ba0:	4b20      	ldr	r3, [pc, #128]	; (4c24 <processOnDTMF+0x1fc>)
    4ba2:	4798      	blx	r3
}
    4ba4:	e01a      	b.n	4bdc <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
    4ba6:	230f      	movs	r3, #15
    4ba8:	18fb      	adds	r3, r7, r3
    4baa:	781b      	ldrb	r3, [r3, #0]
    4bac:	2b39      	cmp	r3, #57	; 0x39
    4bae:	d10c      	bne.n	4bca <processOnDTMF+0x1a2>
			subDTMF();
    4bb0:	4b10      	ldr	r3, [pc, #64]	; (4bf4 <processOnDTMF+0x1cc>)
    4bb2:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
    4bb4:	2000      	movs	r0, #0
    4bb6:	4b18      	ldr	r3, [pc, #96]	; (4c18 <processOnDTMF+0x1f0>)
    4bb8:	4798      	blx	r3
			resetAutoStart(true);
    4bba:	2001      	movs	r0, #1
    4bbc:	4b17      	ldr	r3, [pc, #92]	; (4c1c <processOnDTMF+0x1f4>)
    4bbe:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
    4bc0:	2101      	movs	r1, #1
    4bc2:	205b      	movs	r0, #91	; 0x5b
    4bc4:	4b17      	ldr	r3, [pc, #92]	; (4c24 <processOnDTMF+0x1fc>)
    4bc6:	4798      	blx	r3
}
    4bc8:	e008      	b.n	4bdc <processOnDTMF+0x1b4>
		else if(dtmf == '*')
    4bca:	230f      	movs	r3, #15
    4bcc:	18fb      	adds	r3, r7, r3
    4bce:	781b      	ldrb	r3, [r3, #0]
    4bd0:	2b2a      	cmp	r3, #42	; 0x2a
    4bd2:	d103      	bne.n	4bdc <processOnDTMF+0x1b4>
			subDTMF();
    4bd4:	4b07      	ldr	r3, [pc, #28]	; (4bf4 <processOnDTMF+0x1cc>)
    4bd6:	4798      	blx	r3
			voltageOnCall();
    4bd8:	4b13      	ldr	r3, [pc, #76]	; (4c28 <processOnDTMF+0x200>)
    4bda:	4798      	blx	r3
}
    4bdc:	46c0      	nop			; (mov r8, r8)
    4bde:	46bd      	mov	sp, r7
    4be0:	b004      	add	sp, #16
    4be2:	bd80      	pop	{r7, pc}
    4be4:	20000628 	.word	0x20000628
    4be8:	2000071b 	.word	0x2000071b
    4bec:	20000714 	.word	0x20000714
    4bf0:	00002ee9 	.word	0x00002ee9
    4bf4:	00004a05 	.word	0x00004a05
    4bf8:	0000a6d1 	.word	0x0000a6d1
    4bfc:	0000a895 	.word	0x0000a895
    4c00:	0000accd 	.word	0x0000accd
    4c04:	00008d29 	.word	0x00008d29
    4c08:	00008be1 	.word	0x00008be1
    4c0c:	200007c7 	.word	0x200007c7
    4c10:	000096c5 	.word	0x000096c5
    4c14:	000097b9 	.word	0x000097b9
    4c18:	000012a9 	.word	0x000012a9
    4c1c:	0000a29d 	.word	0x0000a29d
    4c20:	00006ed5 	.word	0x00006ed5
    4c24:	000044dd 	.word	0x000044dd
    4c28:	0000addd 	.word	0x0000addd

00004c2c <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
    4c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c2e:	46c6      	mov	lr, r8
    4c30:	b500      	push	{lr}
    4c32:	b0d2      	sub	sp, #328	; 0x148
    4c34:	af06      	add	r7, sp, #24
    4c36:	60f8      	str	r0, [r7, #12]
    4c38:	000c      	movs	r4, r1
    4c3a:	0010      	movs	r0, r2
    4c3c:	0019      	movs	r1, r3
    4c3e:	4bea      	ldr	r3, [pc, #936]	; (4fe8 <processOnSMS+0x3bc>)
    4c40:	2294      	movs	r2, #148	; 0x94
    4c42:	0052      	lsls	r2, r2, #1
    4c44:	4694      	mov	ip, r2
    4c46:	2208      	movs	r2, #8
    4c48:	4690      	mov	r8, r2
    4c4a:	44b8      	add	r8, r7
    4c4c:	44c4      	add	ip, r8
    4c4e:	4463      	add	r3, ip
    4c50:	1c22      	adds	r2, r4, #0
    4c52:	701a      	strb	r2, [r3, #0]
    4c54:	4be5      	ldr	r3, [pc, #916]	; (4fec <processOnSMS+0x3c0>)
    4c56:	2294      	movs	r2, #148	; 0x94
    4c58:	0052      	lsls	r2, r2, #1
    4c5a:	4694      	mov	ip, r2
    4c5c:	2208      	movs	r2, #8
    4c5e:	4690      	mov	r8, r2
    4c60:	44b8      	add	r8, r7
    4c62:	44c4      	add	ip, r8
    4c64:	4463      	add	r3, ip
    4c66:	1c02      	adds	r2, r0, #0
    4c68:	701a      	strb	r2, [r3, #0]
    4c6a:	4be1      	ldr	r3, [pc, #900]	; (4ff0 <processOnSMS+0x3c4>)
    4c6c:	2294      	movs	r2, #148	; 0x94
    4c6e:	0052      	lsls	r2, r2, #1
    4c70:	4694      	mov	ip, r2
    4c72:	2208      	movs	r2, #8
    4c74:	4690      	mov	r8, r2
    4c76:	44b8      	add	r8, r7
    4c78:	44c4      	add	ip, r8
    4c7a:	4463      	add	r3, ip
    4c7c:	1c0a      	adds	r2, r1, #0
    4c7e:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
    4c80:	2328      	movs	r3, #40	; 0x28
    4c82:	33ff      	adds	r3, #255	; 0xff
    4c84:	2208      	movs	r2, #8
    4c86:	4694      	mov	ip, r2
    4c88:	44bc      	add	ip, r7
    4c8a:	4463      	add	r3, ip
    4c8c:	2200      	movs	r2, #0
    4c8e:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
    4c90:	68fb      	ldr	r3, [r7, #12]
    4c92:	228c      	movs	r2, #140	; 0x8c
    4c94:	0052      	lsls	r2, r2, #1
    4c96:	2108      	movs	r1, #8
    4c98:	468c      	mov	ip, r1
    4c9a:	44bc      	add	ip, r7
    4c9c:	4462      	add	r2, ip
    4c9e:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
    4ca0:	4bd3      	ldr	r3, [pc, #844]	; (4ff0 <processOnSMS+0x3c4>)
    4ca2:	2294      	movs	r2, #148	; 0x94
    4ca4:	0052      	lsls	r2, r2, #1
    4ca6:	4694      	mov	ip, r2
    4ca8:	2208      	movs	r2, #8
    4caa:	4690      	mov	r8, r2
    4cac:	44b8      	add	r8, r7
    4cae:	44c4      	add	ip, r8
    4cb0:	4463      	add	r3, ip
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	d00e      	beq.n	4cd6 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
    4cb8:	4ace      	ldr	r2, [pc, #824]	; (4ff4 <processOnSMS+0x3c8>)
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	0011      	movs	r1, r2
    4cbe:	0018      	movs	r0, r3
    4cc0:	4bcd      	ldr	r3, [pc, #820]	; (4ff8 <processOnSMS+0x3cc>)
    4cc2:	4798      	blx	r3
    4cc4:	0003      	movs	r3, r0
    4cc6:	001a      	movs	r2, r3
    4cc8:	2301      	movs	r3, #1
    4cca:	4053      	eors	r3, r2
    4ccc:	b2db      	uxtb	r3, r3
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d001      	beq.n	4cd6 <processOnSMS+0xaa>
    4cd2:	f001 feed 	bl	6ab0 <processOnSMS+0x1e84>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
    4cd6:	4ac9      	ldr	r2, [pc, #804]	; (4ffc <processOnSMS+0x3d0>)
    4cd8:	68fb      	ldr	r3, [r7, #12]
    4cda:	0011      	movs	r1, r2
    4cdc:	0018      	movs	r0, r3
    4cde:	4bc6      	ldr	r3, [pc, #792]	; (4ff8 <processOnSMS+0x3cc>)
    4ce0:	4798      	blx	r3
    4ce2:	1e03      	subs	r3, r0, #0
    4ce4:	d014      	beq.n	4d10 <processOnSMS+0xe4>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
    4ce6:	4bc6      	ldr	r3, [pc, #792]	; (5000 <processOnSMS+0x3d4>)
    4ce8:	2201      	movs	r2, #1
    4cea:	715a      	strb	r2, [r3, #5]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    4cec:	49c4      	ldr	r1, [pc, #784]	; (5000 <processOnSMS+0x3d4>)
    4cee:	4bc5      	ldr	r3, [pc, #788]	; (5004 <processOnSMS+0x3d8>)
    4cf0:	2218      	movs	r2, #24
    4cf2:	0018      	movs	r0, r3
    4cf4:	4bc4      	ldr	r3, [pc, #784]	; (5008 <processOnSMS+0x3dc>)
    4cf6:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    4cf8:	4bc2      	ldr	r3, [pc, #776]	; (5004 <processOnSMS+0x3d8>)
    4cfa:	0019      	movs	r1, r3
    4cfc:	2000      	movs	r0, #0
    4cfe:	4bc3      	ldr	r3, [pc, #780]	; (500c <processOnSMS+0x3e0>)
    4d00:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    4d02:	4bc3      	ldr	r3, [pc, #780]	; (5010 <processOnSMS+0x3e4>)
    4d04:	4798      	blx	r3
			vTaskDelay(100);
    4d06:	2064      	movs	r0, #100	; 0x64
    4d08:	4bc2      	ldr	r3, [pc, #776]	; (5014 <processOnSMS+0x3e8>)
    4d0a:	4798      	blx	r3
			system_reset();
    4d0c:	4bc2      	ldr	r3, [pc, #776]	; (5018 <processOnSMS+0x3ec>)
    4d0e:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
    4d10:	4ac2      	ldr	r2, [pc, #776]	; (501c <processOnSMS+0x3f0>)
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	0011      	movs	r1, r2
    4d16:	0018      	movs	r0, r3
    4d18:	4bb7      	ldr	r3, [pc, #732]	; (4ff8 <processOnSMS+0x3cc>)
    4d1a:	4798      	blx	r3
    4d1c:	1e03      	subs	r3, r0, #0
    4d1e:	d047      	beq.n	4db0 <processOnSMS+0x184>
	{
		enum gsm_error err = gsm_disable_call_waiting();
    4d20:	2318      	movs	r3, #24
    4d22:	33ff      	adds	r3, #255	; 0xff
    4d24:	2208      	movs	r2, #8
    4d26:	18ba      	adds	r2, r7, r2
    4d28:	18d4      	adds	r4, r2, r3
    4d2a:	4bbd      	ldr	r3, [pc, #756]	; (5020 <processOnSMS+0x3f4>)
    4d2c:	4798      	blx	r3
    4d2e:	0003      	movs	r3, r0
    4d30:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
    4d32:	2328      	movs	r3, #40	; 0x28
    4d34:	33ff      	adds	r3, #255	; 0xff
    4d36:	2208      	movs	r2, #8
    4d38:	4694      	mov	ip, r2
    4d3a:	44bc      	add	ip, r7
    4d3c:	4463      	add	r3, ip
    4d3e:	2201      	movs	r2, #1
    4d40:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4d42:	4baa      	ldr	r3, [pc, #680]	; (4fec <processOnSMS+0x3c0>)
    4d44:	2294      	movs	r2, #148	; 0x94
    4d46:	0052      	lsls	r2, r2, #1
    4d48:	4694      	mov	ip, r2
    4d4a:	2208      	movs	r2, #8
    4d4c:	4690      	mov	r8, r2
    4d4e:	44b8      	add	r8, r7
    4d50:	44c4      	add	ip, r8
    4d52:	4463      	add	r3, ip
    4d54:	781b      	ldrb	r3, [r3, #0]
    4d56:	2b00      	cmp	r3, #0
    4d58:	d101      	bne.n	4d5e <processOnSMS+0x132>
    4d5a:	f001 fe63 	bl	6a24 <processOnSMS+0x1df8>
		{
			if (err == GSM_ERROR_NONE)
    4d5e:	2318      	movs	r3, #24
    4d60:	33ff      	adds	r3, #255	; 0xff
    4d62:	2208      	movs	r2, #8
    4d64:	4694      	mov	ip, r2
    4d66:	44bc      	add	ip, r7
    4d68:	4463      	add	r3, ip
    4d6a:	781b      	ldrb	r3, [r3, #0]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d10d      	bne.n	4d8c <processOnSMS+0x160>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
    4d70:	230c      	movs	r3, #12
    4d72:	2208      	movs	r2, #8
    4d74:	4694      	mov	ip, r2
    4d76:	44bc      	add	ip, r7
    4d78:	4463      	add	r3, ip
    4d7a:	4aaa      	ldr	r2, [pc, #680]	; (5024 <processOnSMS+0x3f8>)
    4d7c:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d7e:	c313      	stmia	r3!, {r0, r1, r4}
    4d80:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d82:	c313      	stmia	r3!, {r0, r1, r4}
    4d84:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d86:	c313      	stmia	r3!, {r0, r1, r4}
    4d88:	f001 fe4c 	bl	6a24 <processOnSMS+0x1df8>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
    4d8c:	230c      	movs	r3, #12
    4d8e:	2208      	movs	r2, #8
    4d90:	4694      	mov	ip, r2
    4d92:	44bc      	add	ip, r7
    4d94:	4463      	add	r3, ip
    4d96:	4aa4      	ldr	r2, [pc, #656]	; (5028 <processOnSMS+0x3fc>)
    4d98:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d9a:	c313      	stmia	r3!, {r0, r1, r4}
    4d9c:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d9e:	c313      	stmia	r3!, {r0, r1, r4}
    4da0:	ca03      	ldmia	r2!, {r0, r1}
    4da2:	c303      	stmia	r3!, {r0, r1}
    4da4:	8811      	ldrh	r1, [r2, #0]
    4da6:	8019      	strh	r1, [r3, #0]
    4da8:	7892      	ldrb	r2, [r2, #2]
    4daa:	709a      	strb	r2, [r3, #2]
    4dac:	f001 fe3a 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
    4db0:	4a9e      	ldr	r2, [pc, #632]	; (502c <processOnSMS+0x400>)
    4db2:	68fb      	ldr	r3, [r7, #12]
    4db4:	0011      	movs	r1, r2
    4db6:	0018      	movs	r0, r3
    4db8:	4b8f      	ldr	r3, [pc, #572]	; (4ff8 <processOnSMS+0x3cc>)
    4dba:	4798      	blx	r3
    4dbc:	1e03      	subs	r3, r0, #0
    4dbe:	d030      	beq.n	4e22 <processOnSMS+0x1f6>
	{
		clearNumbers(admin);
    4dc0:	4b89      	ldr	r3, [pc, #548]	; (4fe8 <processOnSMS+0x3bc>)
    4dc2:	2294      	movs	r2, #148	; 0x94
    4dc4:	0052      	lsls	r2, r2, #1
    4dc6:	4694      	mov	ip, r2
    4dc8:	2208      	movs	r2, #8
    4dca:	4690      	mov	r8, r2
    4dcc:	44b8      	add	r8, r7
    4dce:	44c4      	add	ip, r8
    4dd0:	4463      	add	r3, ip
    4dd2:	781b      	ldrb	r3, [r3, #0]
    4dd4:	0018      	movs	r0, r3
    4dd6:	4b96      	ldr	r3, [pc, #600]	; (5030 <processOnSMS+0x404>)
    4dd8:	4798      	blx	r3
		incomingSMSProcessed=true;
    4dda:	2328      	movs	r3, #40	; 0x28
    4ddc:	33ff      	adds	r3, #255	; 0xff
    4dde:	2208      	movs	r2, #8
    4de0:	4694      	mov	ip, r2
    4de2:	44bc      	add	ip, r7
    4de4:	4463      	add	r3, ip
    4de6:	2201      	movs	r2, #1
    4de8:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4dea:	4b80      	ldr	r3, [pc, #512]	; (4fec <processOnSMS+0x3c0>)
    4dec:	2294      	movs	r2, #148	; 0x94
    4dee:	0052      	lsls	r2, r2, #1
    4df0:	4694      	mov	ip, r2
    4df2:	2208      	movs	r2, #8
    4df4:	4690      	mov	r8, r2
    4df6:	44b8      	add	r8, r7
    4df8:	44c4      	add	ip, r8
    4dfa:	4463      	add	r3, ip
    4dfc:	781b      	ldrb	r3, [r3, #0]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d101      	bne.n	4e06 <processOnSMS+0x1da>
    4e02:	f001 fe0f 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
    4e06:	230c      	movs	r3, #12
    4e08:	2208      	movs	r2, #8
    4e0a:	4694      	mov	ip, r2
    4e0c:	44bc      	add	ip, r7
    4e0e:	4463      	add	r3, ip
    4e10:	4a88      	ldr	r2, [pc, #544]	; (5034 <processOnSMS+0x408>)
    4e12:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e14:	c313      	stmia	r3!, {r0, r1, r4}
    4e16:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e18:	c313      	stmia	r3!, {r0, r1, r4}
    4e1a:	7812      	ldrb	r2, [r2, #0]
    4e1c:	701a      	strb	r2, [r3, #0]
    4e1e:	f001 fe01 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
    4e22:	4a85      	ldr	r2, [pc, #532]	; (5038 <processOnSMS+0x40c>)
    4e24:	68fb      	ldr	r3, [r7, #12]
    4e26:	0011      	movs	r1, r2
    4e28:	0018      	movs	r0, r3
    4e2a:	4b73      	ldr	r3, [pc, #460]	; (4ff8 <processOnSMS+0x3cc>)
    4e2c:	4798      	blx	r3
    4e2e:	1e03      	subs	r3, r0, #0
    4e30:	d065      	beq.n	4efe <processOnSMS+0x2d2>
	{
		saveAutoStartSettings(false);
    4e32:	2000      	movs	r0, #0
    4e34:	4b81      	ldr	r3, [pc, #516]	; (503c <processOnSMS+0x410>)
    4e36:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
    4e38:	4b81      	ldr	r3, [pc, #516]	; (5040 <processOnSMS+0x414>)
    4e3a:	795b      	ldrb	r3, [r3, #5]
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d00d      	beq.n	4e5c <processOnSMS+0x230>
		{
			saveWaterBypassSettings(false);
    4e40:	2000      	movs	r0, #0
    4e42:	4b80      	ldr	r3, [pc, #512]	; (5044 <processOnSMS+0x418>)
    4e44:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
    4e46:	4b7e      	ldr	r3, [pc, #504]	; (5040 <processOnSMS+0x414>)
    4e48:	78db      	ldrb	r3, [r3, #3]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d003      	beq.n	4e56 <processOnSMS+0x22a>
			{
				saveM2MSettings(false);
    4e4e:	2000      	movs	r0, #0
    4e50:	4b7d      	ldr	r3, [pc, #500]	; (5048 <processOnSMS+0x41c>)
    4e52:	4798      	blx	r3
    4e54:	e002      	b.n	4e5c <processOnSMS+0x230>
			}
			else
			{
				savePreventOverFlowSettings(false);
    4e56:	2000      	movs	r0, #0
    4e58:	4b7c      	ldr	r3, [pc, #496]	; (504c <processOnSMS+0x420>)
    4e5a:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4e5c:	4b78      	ldr	r3, [pc, #480]	; (5040 <processOnSMS+0x414>)
    4e5e:	785b      	ldrb	r3, [r3, #1]
    4e60:	2b00      	cmp	r3, #0
    4e62:	d008      	beq.n	4e76 <processOnSMS+0x24a>
		{
			setOverloadPer(120);
    4e64:	2078      	movs	r0, #120	; 0x78
    4e66:	4b7a      	ldr	r3, [pc, #488]	; (5050 <processOnSMS+0x424>)
    4e68:	4798      	blx	r3
			setUnderloadPer(85);
    4e6a:	2055      	movs	r0, #85	; 0x55
    4e6c:	4b79      	ldr	r3, [pc, #484]	; (5054 <processOnSMS+0x428>)
    4e6e:	4798      	blx	r3
			setCurrentDetection(false);
    4e70:	2000      	movs	r0, #0
    4e72:	4b79      	ldr	r3, [pc, #484]	; (5058 <processOnSMS+0x42c>)
    4e74:	4798      	blx	r3
		}
		saveEventStageSettings(0);
    4e76:	2000      	movs	r0, #0
    4e78:	4b78      	ldr	r3, [pc, #480]	; (505c <processOnSMS+0x430>)
    4e7a:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
    4e7c:	2000      	movs	r0, #0
    4e7e:	4b78      	ldr	r3, [pc, #480]	; (5060 <processOnSMS+0x434>)
    4e80:	4798      	blx	r3
		saveResponseSettings('C');
    4e82:	2043      	movs	r0, #67	; 0x43
    4e84:	4b77      	ldr	r3, [pc, #476]	; (5064 <processOnSMS+0x438>)
    4e86:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
    4e88:	2032      	movs	r0, #50	; 0x32
    4e8a:	4b77      	ldr	r3, [pc, #476]	; (5068 <processOnSMS+0x43c>)
    4e8c:	4798      	blx	r3
		saveStarDeltaTimer(2);
    4e8e:	2002      	movs	r0, #2
    4e90:	4b76      	ldr	r3, [pc, #472]	; (506c <processOnSMS+0x440>)
    4e92:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
    4e94:	2001      	movs	r0, #1
    4e96:	4b76      	ldr	r3, [pc, #472]	; (5070 <processOnSMS+0x444>)
    4e98:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
    4e9a:	2050      	movs	r0, #80	; 0x50
    4e9c:	4b75      	ldr	r3, [pc, #468]	; (5074 <processOnSMS+0x448>)
    4e9e:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
    4ea0:	2001      	movs	r0, #1
    4ea2:	4b75      	ldr	r3, [pc, #468]	; (5078 <processOnSMS+0x44c>)
    4ea4:	4798      	blx	r3
		setPrimaryNumberIndex(0);
    4ea6:	2000      	movs	r0, #0
    4ea8:	4b74      	ldr	r3, [pc, #464]	; (507c <processOnSMS+0x450>)
    4eaa:	4798      	blx	r3
		setSecondaryNumberIndex(1);
    4eac:	2001      	movs	r0, #1
    4eae:	4b74      	ldr	r3, [pc, #464]	; (5080 <processOnSMS+0x454>)
    4eb0:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4eb2:	2328      	movs	r3, #40	; 0x28
    4eb4:	33ff      	adds	r3, #255	; 0xff
    4eb6:	2208      	movs	r2, #8
    4eb8:	4694      	mov	ip, r2
    4eba:	44bc      	add	ip, r7
    4ebc:	4463      	add	r3, ip
    4ebe:	2201      	movs	r2, #1
    4ec0:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4ec2:	4b4a      	ldr	r3, [pc, #296]	; (4fec <processOnSMS+0x3c0>)
    4ec4:	2294      	movs	r2, #148	; 0x94
    4ec6:	0052      	lsls	r2, r2, #1
    4ec8:	4694      	mov	ip, r2
    4eca:	2208      	movs	r2, #8
    4ecc:	4690      	mov	r8, r2
    4ece:	44b8      	add	r8, r7
    4ed0:	44c4      	add	ip, r8
    4ed2:	4463      	add	r3, ip
    4ed4:	781b      	ldrb	r3, [r3, #0]
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d101      	bne.n	4ede <processOnSMS+0x2b2>
    4eda:	f001 fda3 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
    4ede:	230c      	movs	r3, #12
    4ee0:	2208      	movs	r2, #8
    4ee2:	4694      	mov	ip, r2
    4ee4:	44bc      	add	ip, r7
    4ee6:	4463      	add	r3, ip
    4ee8:	4a66      	ldr	r2, [pc, #408]	; (5084 <processOnSMS+0x458>)
    4eea:	ca13      	ldmia	r2!, {r0, r1, r4}
    4eec:	c313      	stmia	r3!, {r0, r1, r4}
    4eee:	ca13      	ldmia	r2!, {r0, r1, r4}
    4ef0:	c313      	stmia	r3!, {r0, r1, r4}
    4ef2:	ca13      	ldmia	r2!, {r0, r1, r4}
    4ef4:	c313      	stmia	r3!, {r0, r1, r4}
    4ef6:	7812      	ldrb	r2, [r2, #0]
    4ef8:	701a      	strb	r2, [r3, #0]
    4efa:	f001 fd93 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
    4efe:	4a62      	ldr	r2, [pc, #392]	; (5088 <processOnSMS+0x45c>)
    4f00:	68fb      	ldr	r3, [r7, #12]
    4f02:	0011      	movs	r1, r2
    4f04:	0018      	movs	r0, r3
    4f06:	4b3c      	ldr	r3, [pc, #240]	; (4ff8 <processOnSMS+0x3cc>)
    4f08:	4798      	blx	r3
    4f0a:	1e03      	subs	r3, r0, #0
    4f0c:	d038      	beq.n	4f80 <processOnSMS+0x354>
	{
		response_sms_processed_cmd = true;
    4f0e:	4b37      	ldr	r3, [pc, #220]	; (4fec <processOnSMS+0x3c0>)
    4f10:	2294      	movs	r2, #148	; 0x94
    4f12:	0052      	lsls	r2, r2, #1
    4f14:	4694      	mov	ip, r2
    4f16:	2208      	movs	r2, #8
    4f18:	4690      	mov	r8, r2
    4f1a:	44b8      	add	r8, r7
    4f1c:	44c4      	add	ip, r8
    4f1e:	4463      	add	r3, ip
    4f20:	2201      	movs	r2, #1
    4f22:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4f24:	2328      	movs	r3, #40	; 0x28
    4f26:	33ff      	adds	r3, #255	; 0xff
    4f28:	2208      	movs	r2, #8
    4f2a:	4694      	mov	ip, r2
    4f2c:	44bc      	add	ip, r7
    4f2e:	4463      	add	r3, ip
    4f30:	2201      	movs	r2, #1
    4f32:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
    4f34:	230c      	movs	r3, #12
    4f36:	2208      	movs	r2, #8
    4f38:	4694      	mov	ip, r2
    4f3a:	44bc      	add	ip, r7
    4f3c:	4463      	add	r3, ip
    4f3e:	22fa      	movs	r2, #250	; 0xfa
    4f40:	2100      	movs	r1, #0
    4f42:	0018      	movs	r0, r3
    4f44:	4b51      	ldr	r3, [pc, #324]	; (508c <processOnSMS+0x460>)
    4f46:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
    4f48:	4b51      	ldr	r3, [pc, #324]	; (5090 <processOnSMS+0x464>)
    4f4a:	789b      	ldrb	r3, [r3, #2]
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d10d      	bne.n	4f6c <processOnSMS+0x340>
		{
			strcpy(resep_msg,"No Numbers Exists");
    4f50:	230c      	movs	r3, #12
    4f52:	2208      	movs	r2, #8
    4f54:	4694      	mov	ip, r2
    4f56:	44bc      	add	ip, r7
    4f58:	4463      	add	r3, ip
    4f5a:	4a4e      	ldr	r2, [pc, #312]	; (5094 <processOnSMS+0x468>)
    4f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
    4f5e:	c313      	stmia	r3!, {r0, r1, r4}
    4f60:	6811      	ldr	r1, [r2, #0]
    4f62:	6019      	str	r1, [r3, #0]
    4f64:	8892      	ldrh	r2, [r2, #4]
    4f66:	809a      	strh	r2, [r3, #4]
    4f68:	f001 fd5c 	bl	6a24 <processOnSMS+0x1df8>
		}
		else
		{
			getNumbers(resep_msg);
    4f6c:	230c      	movs	r3, #12
    4f6e:	2208      	movs	r2, #8
    4f70:	4694      	mov	ip, r2
    4f72:	44bc      	add	ip, r7
    4f74:	4463      	add	r3, ip
    4f76:	0018      	movs	r0, r3
    4f78:	4b47      	ldr	r3, [pc, #284]	; (5098 <processOnSMS+0x46c>)
    4f7a:	4798      	blx	r3
    4f7c:	f001 fd52 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
    4f80:	4a46      	ldr	r2, [pc, #280]	; (509c <processOnSMS+0x470>)
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	0011      	movs	r1, r2
    4f86:	0018      	movs	r0, r3
    4f88:	4b1b      	ldr	r3, [pc, #108]	; (4ff8 <processOnSMS+0x3cc>)
    4f8a:	4798      	blx	r3
    4f8c:	1e03      	subs	r3, r0, #0
    4f8e:	d003      	beq.n	4f98 <processOnSMS+0x36c>
	{
		system_reset();
    4f90:	4b21      	ldr	r3, [pc, #132]	; (5018 <processOnSMS+0x3ec>)
    4f92:	4798      	blx	r3
    4f94:	f001 fd46 	bl	6a24 <processOnSMS+0x1df8>
	}
	else if (StringstartsWith(received_command,"DID"))
    4f98:	4a41      	ldr	r2, [pc, #260]	; (50a0 <processOnSMS+0x474>)
    4f9a:	68fb      	ldr	r3, [r7, #12]
    4f9c:	0011      	movs	r1, r2
    4f9e:	0018      	movs	r0, r3
    4fa0:	4b15      	ldr	r3, [pc, #84]	; (4ff8 <processOnSMS+0x3cc>)
    4fa2:	4798      	blx	r3
    4fa4:	1e03      	subs	r3, r0, #0
    4fa6:	d100      	bne.n	4faa <processOnSMS+0x37e>
    4fa8:	e080      	b.n	50ac <processOnSMS+0x480>
	{
		response_sms_processed_cmd=true;
    4faa:	4b10      	ldr	r3, [pc, #64]	; (4fec <processOnSMS+0x3c0>)
    4fac:	2294      	movs	r2, #148	; 0x94
    4fae:	0052      	lsls	r2, r2, #1
    4fb0:	4694      	mov	ip, r2
    4fb2:	2208      	movs	r2, #8
    4fb4:	4690      	mov	r8, r2
    4fb6:	44b8      	add	r8, r7
    4fb8:	44c4      	add	ip, r8
    4fba:	4463      	add	r3, ip
    4fbc:	2201      	movs	r2, #1
    4fbe:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4fc0:	2328      	movs	r3, #40	; 0x28
    4fc2:	33ff      	adds	r3, #255	; 0xff
    4fc4:	2208      	movs	r2, #8
    4fc6:	4694      	mov	ip, r2
    4fc8:	44bc      	add	ip, r7
    4fca:	4463      	add	r3, ip
    4fcc:	2201      	movs	r2, #1
    4fce:	701a      	strb	r2, [r3, #0]
		
		strcpy(resep_msg,factory_settings_parameter_struct.DeviceID_ee);
    4fd0:	4a34      	ldr	r2, [pc, #208]	; (50a4 <processOnSMS+0x478>)
    4fd2:	230c      	movs	r3, #12
    4fd4:	2108      	movs	r1, #8
    4fd6:	468c      	mov	ip, r1
    4fd8:	44bc      	add	ip, r7
    4fda:	4463      	add	r3, ip
    4fdc:	0011      	movs	r1, r2
    4fde:	0018      	movs	r0, r3
    4fe0:	4b31      	ldr	r3, [pc, #196]	; (50a8 <processOnSMS+0x47c>)
    4fe2:	4798      	blx	r3
    4fe4:	f001 fd1e 	bl	6a24 <processOnSMS+0x1df8>
    4fe8:	fffffedb 	.word	0xfffffedb
    4fec:	fffffeda 	.word	0xfffffeda
    4ff0:	fffffed9 	.word	0xfffffed9
    4ff4:	00018fa0 	.word	0x00018fa0
    4ff8:	00003ee1 	.word	0x00003ee1
    4ffc:	00018fa8 	.word	0x00018fa8
    5000:	200005f8 	.word	0x200005f8
    5004:	20000584 	.word	0x20000584
    5008:	00017d31 	.word	0x00017d31
    500c:	000129f9 	.word	0x000129f9
    5010:	00012ba1 	.word	0x00012ba1
    5014:	0000f0a9 	.word	0x0000f0a9
    5018:	00003fb5 	.word	0x00003fb5
    501c:	00018fb0 	.word	0x00018fb0
    5020:	00002f19 	.word	0x00002f19
    5024:	00018fb8 	.word	0x00018fb8
    5028:	00018fdc 	.word	0x00018fdc
    502c:	00019000 	.word	0x00019000
    5030:	0000110d 	.word	0x0000110d
    5034:	0001900c 	.word	0x0001900c
    5038:	00019028 	.word	0x00019028
    503c:	000012a9 	.word	0x000012a9
    5040:	20000628 	.word	0x20000628
    5044:	00001469 	.word	0x00001469
    5048:	00000be5 	.word	0x00000be5
    504c:	000014b5 	.word	0x000014b5
    5050:	00001501 	.word	0x00001501
    5054:	00001569 	.word	0x00001569
    5058:	000018ad 	.word	0x000018ad
    505c:	00001945 	.word	0x00001945
    5060:	00001341 	.word	0x00001341
    5064:	0000138d 	.word	0x0000138d
    5068:	000012f5 	.word	0x000012f5
    506c:	000018f9 	.word	0x000018f9
    5070:	000015d9 	.word	0x000015d9
    5074:	00001625 	.word	0x00001625
    5078:	00001671 	.word	0x00001671
    507c:	00001a25 	.word	0x00001a25
    5080:	00001a75 	.word	0x00001a75
    5084:	00019030 	.word	0x00019030
    5088:	00019058 	.word	0x00019058
    508c:	00017d67 	.word	0x00017d67
    5090:	20000610 	.word	0x20000610
    5094:	0001905c 	.word	0x0001905c
    5098:	000007f9 	.word	0x000007f9
    509c:	00019070 	.word	0x00019070
    50a0:	00019078 	.word	0x00019078
    50a4:	20000630 	.word	0x20000630
    50a8:	00017fe7 	.word	0x00017fe7
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
    50ac:	4aec      	ldr	r2, [pc, #944]	; (5460 <processOnSMS+0x834>)
    50ae:	68fb      	ldr	r3, [r7, #12]
    50b0:	0011      	movs	r1, r2
    50b2:	0018      	movs	r0, r3
    50b4:	4beb      	ldr	r3, [pc, #940]	; (5464 <processOnSMS+0x838>)
    50b6:	4798      	blx	r3
    50b8:	1e03      	subs	r3, r0, #0
    50ba:	d027      	beq.n	510c <processOnSMS+0x4e0>
	{
		saveAutoStartSettings(true);
    50bc:	2001      	movs	r0, #1
    50be:	4bea      	ldr	r3, [pc, #936]	; (5468 <processOnSMS+0x83c>)
    50c0:	4798      	blx	r3
		resetAutoStart(true);
    50c2:	2001      	movs	r0, #1
    50c4:	4be9      	ldr	r3, [pc, #932]	; (546c <processOnSMS+0x840>)
    50c6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    50c8:	2328      	movs	r3, #40	; 0x28
    50ca:	33ff      	adds	r3, #255	; 0xff
    50cc:	2208      	movs	r2, #8
    50ce:	4694      	mov	ip, r2
    50d0:	44bc      	add	ip, r7
    50d2:	4463      	add	r3, ip
    50d4:	2201      	movs	r2, #1
    50d6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    50d8:	4be5      	ldr	r3, [pc, #916]	; (5470 <processOnSMS+0x844>)
    50da:	2294      	movs	r2, #148	; 0x94
    50dc:	0052      	lsls	r2, r2, #1
    50de:	4694      	mov	ip, r2
    50e0:	2208      	movs	r2, #8
    50e2:	4690      	mov	r8, r2
    50e4:	44b8      	add	r8, r7
    50e6:	44c4      	add	ip, r8
    50e8:	4463      	add	r3, ip
    50ea:	781b      	ldrb	r3, [r3, #0]
    50ec:	2b00      	cmp	r3, #0
    50ee:	d101      	bne.n	50f4 <processOnSMS+0x4c8>
    50f0:	f001 fc98 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
    50f4:	230c      	movs	r3, #12
    50f6:	2208      	movs	r2, #8
    50f8:	4694      	mov	ip, r2
    50fa:	44bc      	add	ip, r7
    50fc:	4463      	add	r3, ip
    50fe:	4add      	ldr	r2, [pc, #884]	; (5474 <processOnSMS+0x848>)
    5100:	ca13      	ldmia	r2!, {r0, r1, r4}
    5102:	c313      	stmia	r3!, {r0, r1, r4}
    5104:	6812      	ldr	r2, [r2, #0]
    5106:	601a      	str	r2, [r3, #0]
    5108:	f001 fc8c 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
    510c:	4ada      	ldr	r2, [pc, #872]	; (5478 <processOnSMS+0x84c>)
    510e:	68fb      	ldr	r3, [r7, #12]
    5110:	0011      	movs	r1, r2
    5112:	0018      	movs	r0, r3
    5114:	4bd3      	ldr	r3, [pc, #844]	; (5464 <processOnSMS+0x838>)
    5116:	4798      	blx	r3
    5118:	1e03      	subs	r3, r0, #0
    511a:	d029      	beq.n	5170 <processOnSMS+0x544>
	{
		saveAutoStartSettings(false);
    511c:	2000      	movs	r0, #0
    511e:	4bd2      	ldr	r3, [pc, #840]	; (5468 <processOnSMS+0x83c>)
    5120:	4798      	blx	r3
		resetAutoStart(true);
    5122:	2001      	movs	r0, #1
    5124:	4bd1      	ldr	r3, [pc, #836]	; (546c <processOnSMS+0x840>)
    5126:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    5128:	2328      	movs	r3, #40	; 0x28
    512a:	33ff      	adds	r3, #255	; 0xff
    512c:	2208      	movs	r2, #8
    512e:	4694      	mov	ip, r2
    5130:	44bc      	add	ip, r7
    5132:	4463      	add	r3, ip
    5134:	2201      	movs	r2, #1
    5136:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5138:	4bcd      	ldr	r3, [pc, #820]	; (5470 <processOnSMS+0x844>)
    513a:	2294      	movs	r2, #148	; 0x94
    513c:	0052      	lsls	r2, r2, #1
    513e:	4694      	mov	ip, r2
    5140:	2208      	movs	r2, #8
    5142:	4690      	mov	r8, r2
    5144:	44b8      	add	r8, r7
    5146:	44c4      	add	ip, r8
    5148:	4463      	add	r3, ip
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d101      	bne.n	5154 <processOnSMS+0x528>
    5150:	f001 fc68 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
    5154:	230c      	movs	r3, #12
    5156:	2208      	movs	r2, #8
    5158:	4694      	mov	ip, r2
    515a:	44bc      	add	ip, r7
    515c:	4463      	add	r3, ip
    515e:	4ac7      	ldr	r2, [pc, #796]	; (547c <processOnSMS+0x850>)
    5160:	ca13      	ldmia	r2!, {r0, r1, r4}
    5162:	c313      	stmia	r3!, {r0, r1, r4}
    5164:	6811      	ldr	r1, [r2, #0]
    5166:	6019      	str	r1, [r3, #0]
    5168:	7912      	ldrb	r2, [r2, #4]
    516a:	711a      	strb	r2, [r3, #4]
    516c:	f001 fc5a 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
    5170:	4ac3      	ldr	r2, [pc, #780]	; (5480 <processOnSMS+0x854>)
    5172:	68fb      	ldr	r3, [r7, #12]
    5174:	0011      	movs	r1, r2
    5176:	0018      	movs	r0, r3
    5178:	4bba      	ldr	r3, [pc, #744]	; (5464 <processOnSMS+0x838>)
    517a:	4798      	blx	r3
    517c:	1e03      	subs	r3, r0, #0
    517e:	d02a      	beq.n	51d6 <processOnSMS+0x5aa>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
    5180:	4bc0      	ldr	r3, [pc, #768]	; (5484 <processOnSMS+0x858>)
    5182:	795b      	ldrb	r3, [r3, #5]
    5184:	2b00      	cmp	r3, #0
    5186:	d101      	bne.n	518c <processOnSMS+0x560>
    5188:	f001 fc4c 	bl	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    518c:	2328      	movs	r3, #40	; 0x28
    518e:	33ff      	adds	r3, #255	; 0xff
    5190:	2208      	movs	r2, #8
    5192:	4694      	mov	ip, r2
    5194:	44bc      	add	ip, r7
    5196:	4463      	add	r3, ip
    5198:	2201      	movs	r2, #1
    519a:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
    519c:	2001      	movs	r0, #1
    519e:	4bba      	ldr	r3, [pc, #744]	; (5488 <processOnSMS+0x85c>)
    51a0:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    51a2:	4bb3      	ldr	r3, [pc, #716]	; (5470 <processOnSMS+0x844>)
    51a4:	2294      	movs	r2, #148	; 0x94
    51a6:	0052      	lsls	r2, r2, #1
    51a8:	4694      	mov	ip, r2
    51aa:	2208      	movs	r2, #8
    51ac:	4690      	mov	r8, r2
    51ae:	44b8      	add	r8, r7
    51b0:	44c4      	add	ip, r8
    51b2:	4463      	add	r3, ip
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d101      	bne.n	51be <processOnSMS+0x592>
    51ba:	f001 fc33 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
    51be:	230c      	movs	r3, #12
    51c0:	2208      	movs	r2, #8
    51c2:	4694      	mov	ip, r2
    51c4:	44bc      	add	ip, r7
    51c6:	4463      	add	r3, ip
    51c8:	4ab0      	ldr	r2, [pc, #704]	; (548c <processOnSMS+0x860>)
    51ca:	ca13      	ldmia	r2!, {r0, r1, r4}
    51cc:	c313      	stmia	r3!, {r0, r1, r4}
    51ce:	6812      	ldr	r2, [r2, #0]
    51d0:	601a      	str	r2, [r3, #0]
    51d2:	f001 fc27 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
    51d6:	4aae      	ldr	r2, [pc, #696]	; (5490 <processOnSMS+0x864>)
    51d8:	68fb      	ldr	r3, [r7, #12]
    51da:	0011      	movs	r1, r2
    51dc:	0018      	movs	r0, r3
    51de:	4ba1      	ldr	r3, [pc, #644]	; (5464 <processOnSMS+0x838>)
    51e0:	4798      	blx	r3
    51e2:	1e03      	subs	r3, r0, #0
    51e4:	d02c      	beq.n	5240 <processOnSMS+0x614>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
    51e6:	4ba7      	ldr	r3, [pc, #668]	; (5484 <processOnSMS+0x858>)
    51e8:	795b      	ldrb	r3, [r3, #5]
    51ea:	2b00      	cmp	r3, #0
    51ec:	d101      	bne.n	51f2 <processOnSMS+0x5c6>
    51ee:	f001 fc19 	bl	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    51f2:	2328      	movs	r3, #40	; 0x28
    51f4:	33ff      	adds	r3, #255	; 0xff
    51f6:	2208      	movs	r2, #8
    51f8:	4694      	mov	ip, r2
    51fa:	44bc      	add	ip, r7
    51fc:	4463      	add	r3, ip
    51fe:	2201      	movs	r2, #1
    5200:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
    5202:	2000      	movs	r0, #0
    5204:	4ba0      	ldr	r3, [pc, #640]	; (5488 <processOnSMS+0x85c>)
    5206:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    5208:	4b99      	ldr	r3, [pc, #612]	; (5470 <processOnSMS+0x844>)
    520a:	2294      	movs	r2, #148	; 0x94
    520c:	0052      	lsls	r2, r2, #1
    520e:	4694      	mov	ip, r2
    5210:	2208      	movs	r2, #8
    5212:	4690      	mov	r8, r2
    5214:	44b8      	add	r8, r7
    5216:	44c4      	add	ip, r8
    5218:	4463      	add	r3, ip
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	2b00      	cmp	r3, #0
    521e:	d101      	bne.n	5224 <processOnSMS+0x5f8>
    5220:	f001 fc00 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
    5224:	230c      	movs	r3, #12
    5226:	2208      	movs	r2, #8
    5228:	4694      	mov	ip, r2
    522a:	44bc      	add	ip, r7
    522c:	4463      	add	r3, ip
    522e:	4a99      	ldr	r2, [pc, #612]	; (5494 <processOnSMS+0x868>)
    5230:	ca13      	ldmia	r2!, {r0, r1, r4}
    5232:	c313      	stmia	r3!, {r0, r1, r4}
    5234:	6811      	ldr	r1, [r2, #0]
    5236:	6019      	str	r1, [r3, #0]
    5238:	7912      	ldrb	r2, [r2, #4]
    523a:	711a      	strb	r2, [r3, #4]
    523c:	f001 fbf2 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
    5240:	4a95      	ldr	r2, [pc, #596]	; (5498 <processOnSMS+0x86c>)
    5242:	68fb      	ldr	r3, [r7, #12]
    5244:	0011      	movs	r1, r2
    5246:	0018      	movs	r0, r3
    5248:	4b86      	ldr	r3, [pc, #536]	; (5464 <processOnSMS+0x838>)
    524a:	4798      	blx	r3
    524c:	1e03      	subs	r3, r0, #0
    524e:	d026      	beq.n	529e <processOnSMS+0x672>
	{
		saveSinglePhasingSettings(true);
    5250:	2001      	movs	r0, #1
    5252:	4b92      	ldr	r3, [pc, #584]	; (549c <processOnSMS+0x870>)
    5254:	4798      	blx	r3
		incomingSMSProcessed=true;
    5256:	2328      	movs	r3, #40	; 0x28
    5258:	33ff      	adds	r3, #255	; 0xff
    525a:	2208      	movs	r2, #8
    525c:	4694      	mov	ip, r2
    525e:	44bc      	add	ip, r7
    5260:	4463      	add	r3, ip
    5262:	2201      	movs	r2, #1
    5264:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5266:	4b82      	ldr	r3, [pc, #520]	; (5470 <processOnSMS+0x844>)
    5268:	2294      	movs	r2, #148	; 0x94
    526a:	0052      	lsls	r2, r2, #1
    526c:	4694      	mov	ip, r2
    526e:	2208      	movs	r2, #8
    5270:	4690      	mov	r8, r2
    5272:	44b8      	add	r8, r7
    5274:	44c4      	add	ip, r8
    5276:	4463      	add	r3, ip
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	2b00      	cmp	r3, #0
    527c:	d101      	bne.n	5282 <processOnSMS+0x656>
    527e:	f001 fbd1 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP ON");
    5282:	230c      	movs	r3, #12
    5284:	2208      	movs	r2, #8
    5286:	4694      	mov	ip, r2
    5288:	44bc      	add	ip, r7
    528a:	4463      	add	r3, ip
    528c:	4a84      	ldr	r2, [pc, #528]	; (54a0 <processOnSMS+0x874>)
    528e:	6811      	ldr	r1, [r2, #0]
    5290:	6019      	str	r1, [r3, #0]
    5292:	8891      	ldrh	r1, [r2, #4]
    5294:	8099      	strh	r1, [r3, #4]
    5296:	7992      	ldrb	r2, [r2, #6]
    5298:	719a      	strb	r2, [r3, #6]
    529a:	f001 fbc3 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
    529e:	4a81      	ldr	r2, [pc, #516]	; (54a4 <processOnSMS+0x878>)
    52a0:	68fb      	ldr	r3, [r7, #12]
    52a2:	0011      	movs	r1, r2
    52a4:	0018      	movs	r0, r3
    52a6:	4b6f      	ldr	r3, [pc, #444]	; (5464 <processOnSMS+0x838>)
    52a8:	4798      	blx	r3
    52aa:	1e03      	subs	r3, r0, #0
    52ac:	d022      	beq.n	52f4 <processOnSMS+0x6c8>
	{
		saveSinglePhasingSettings(false);
    52ae:	2000      	movs	r0, #0
    52b0:	4b7a      	ldr	r3, [pc, #488]	; (549c <processOnSMS+0x870>)
    52b2:	4798      	blx	r3
		incomingSMSProcessed=true;
    52b4:	2328      	movs	r3, #40	; 0x28
    52b6:	33ff      	adds	r3, #255	; 0xff
    52b8:	2208      	movs	r2, #8
    52ba:	4694      	mov	ip, r2
    52bc:	44bc      	add	ip, r7
    52be:	4463      	add	r3, ip
    52c0:	2201      	movs	r2, #1
    52c2:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    52c4:	4b6a      	ldr	r3, [pc, #424]	; (5470 <processOnSMS+0x844>)
    52c6:	2294      	movs	r2, #148	; 0x94
    52c8:	0052      	lsls	r2, r2, #1
    52ca:	4694      	mov	ip, r2
    52cc:	2208      	movs	r2, #8
    52ce:	4690      	mov	r8, r2
    52d0:	44b8      	add	r8, r7
    52d2:	44c4      	add	ip, r8
    52d4:	4463      	add	r3, ip
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	2b00      	cmp	r3, #0
    52da:	d101      	bne.n	52e0 <processOnSMS+0x6b4>
    52dc:	f001 fba2 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP OFF");
    52e0:	230c      	movs	r3, #12
    52e2:	2208      	movs	r2, #8
    52e4:	4694      	mov	ip, r2
    52e6:	44bc      	add	ip, r7
    52e8:	4463      	add	r3, ip
    52ea:	4a6f      	ldr	r2, [pc, #444]	; (54a8 <processOnSMS+0x87c>)
    52ec:	ca03      	ldmia	r2!, {r0, r1}
    52ee:	c303      	stmia	r3!, {r0, r1}
    52f0:	f001 fb98 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
    52f4:	4a6d      	ldr	r2, [pc, #436]	; (54ac <processOnSMS+0x880>)
    52f6:	68fb      	ldr	r3, [r7, #12]
    52f8:	0011      	movs	r1, r2
    52fa:	0018      	movs	r0, r3
    52fc:	4b59      	ldr	r3, [pc, #356]	; (5464 <processOnSMS+0x838>)
    52fe:	4798      	blx	r3
    5300:	1e03      	subs	r3, r0, #0
    5302:	d055      	beq.n	53b0 <processOnSMS+0x784>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    5304:	68fb      	ldr	r3, [r7, #12]
    5306:	1d1c      	adds	r4, r3, #4
    5308:	68fb      	ldr	r3, [r7, #12]
    530a:	0018      	movs	r0, r3
    530c:	4b68      	ldr	r3, [pc, #416]	; (54b0 <processOnSMS+0x884>)
    530e:	4798      	blx	r3
    5310:	0002      	movs	r2, r0
    5312:	68fb      	ldr	r3, [r7, #12]
    5314:	0021      	movs	r1, r4
    5316:	0018      	movs	r0, r3
    5318:	4b66      	ldr	r3, [pc, #408]	; (54b4 <processOnSMS+0x888>)
    531a:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
    531c:	68fb      	ldr	r3, [r7, #12]
    531e:	0018      	movs	r0, r3
    5320:	4b65      	ldr	r3, [pc, #404]	; (54b8 <processOnSMS+0x88c>)
    5322:	4798      	blx	r3
    5324:	0002      	movs	r2, r0
    5326:	2393      	movs	r3, #147	; 0x93
    5328:	005b      	lsls	r3, r3, #1
    532a:	2108      	movs	r1, #8
    532c:	468c      	mov	ip, r1
    532e:	44bc      	add	ip, r7
    5330:	4463      	add	r3, ip
    5332:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
    5334:	2393      	movs	r3, #147	; 0x93
    5336:	005b      	lsls	r3, r3, #1
    5338:	2208      	movs	r2, #8
    533a:	4694      	mov	ip, r2
    533c:	44bc      	add	ip, r7
    533e:	4463      	add	r3, ip
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	2b13      	cmp	r3, #19
    5344:	d807      	bhi.n	5356 <processOnSMS+0x72a>
    5346:	2393      	movs	r3, #147	; 0x93
    5348:	005b      	lsls	r3, r3, #1
    534a:	2208      	movs	r2, #8
    534c:	4694      	mov	ip, r2
    534e:	44bc      	add	ip, r7
    5350:	4463      	add	r3, ip
    5352:	2214      	movs	r2, #20
    5354:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
    5356:	2393      	movs	r3, #147	; 0x93
    5358:	005b      	lsls	r3, r3, #1
    535a:	2208      	movs	r2, #8
    535c:	4694      	mov	ip, r2
    535e:	44bc      	add	ip, r7
    5360:	4463      	add	r3, ip
    5362:	781b      	ldrb	r3, [r3, #0]
    5364:	b29b      	uxth	r3, r3
    5366:	0018      	movs	r0, r3
    5368:	4b54      	ldr	r3, [pc, #336]	; (54bc <processOnSMS+0x890>)
    536a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    536c:	2328      	movs	r3, #40	; 0x28
    536e:	33ff      	adds	r3, #255	; 0xff
    5370:	2208      	movs	r2, #8
    5372:	4694      	mov	ip, r2
    5374:	44bc      	add	ip, r7
    5376:	4463      	add	r3, ip
    5378:	2201      	movs	r2, #1
    537a:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
    537c:	4b3c      	ldr	r3, [pc, #240]	; (5470 <processOnSMS+0x844>)
    537e:	2294      	movs	r2, #148	; 0x94
    5380:	0052      	lsls	r2, r2, #1
    5382:	4694      	mov	ip, r2
    5384:	2208      	movs	r2, #8
    5386:	4690      	mov	r8, r2
    5388:	44b8      	add	r8, r7
    538a:	44c4      	add	ip, r8
    538c:	4463      	add	r3, ip
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	2b00      	cmp	r3, #0
    5392:	d101      	bne.n	5398 <processOnSMS+0x76c>
    5394:	f001 fb46 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP VOLT SET");
    5398:	230c      	movs	r3, #12
    539a:	2208      	movs	r2, #8
    539c:	4694      	mov	ip, r2
    539e:	44bc      	add	ip, r7
    53a0:	4463      	add	r3, ip
    53a2:	4a47      	ldr	r2, [pc, #284]	; (54c0 <processOnSMS+0x894>)
    53a4:	ca13      	ldmia	r2!, {r0, r1, r4}
    53a6:	c313      	stmia	r3!, {r0, r1, r4}
    53a8:	7812      	ldrb	r2, [r2, #0]
    53aa:	701a      	strb	r2, [r3, #0]
    53ac:	f001 fb3a 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
    53b0:	4a44      	ldr	r2, [pc, #272]	; (54c4 <processOnSMS+0x898>)
    53b2:	68fb      	ldr	r3, [r7, #12]
    53b4:	0011      	movs	r1, r2
    53b6:	0018      	movs	r0, r3
    53b8:	4b2a      	ldr	r3, [pc, #168]	; (5464 <processOnSMS+0x838>)
    53ba:	4798      	blx	r3
    53bc:	1e03      	subs	r3, r0, #0
    53be:	d022      	beq.n	5406 <processOnSMS+0x7da>
	{
		savePhaseSequenceProtectionSettings(true);
    53c0:	2001      	movs	r0, #1
    53c2:	4b41      	ldr	r3, [pc, #260]	; (54c8 <processOnSMS+0x89c>)
    53c4:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    53c6:	2328      	movs	r3, #40	; 0x28
    53c8:	33ff      	adds	r3, #255	; 0xff
    53ca:	2208      	movs	r2, #8
    53cc:	4694      	mov	ip, r2
    53ce:	44bc      	add	ip, r7
    53d0:	4463      	add	r3, ip
    53d2:	2201      	movs	r2, #1
    53d4:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    53d6:	4b26      	ldr	r3, [pc, #152]	; (5470 <processOnSMS+0x844>)
    53d8:	2294      	movs	r2, #148	; 0x94
    53da:	0052      	lsls	r2, r2, #1
    53dc:	4694      	mov	ip, r2
    53de:	2208      	movs	r2, #8
    53e0:	4690      	mov	r8, r2
    53e2:	44b8      	add	r8, r7
    53e4:	44c4      	add	ip, r8
    53e6:	4463      	add	r3, ip
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	2b00      	cmp	r3, #0
    53ec:	d101      	bne.n	53f2 <processOnSMS+0x7c6>
    53ee:	f001 fb19 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SEQP ON");
    53f2:	230c      	movs	r3, #12
    53f4:	2208      	movs	r2, #8
    53f6:	4694      	mov	ip, r2
    53f8:	44bc      	add	ip, r7
    53fa:	4463      	add	r3, ip
    53fc:	4a33      	ldr	r2, [pc, #204]	; (54cc <processOnSMS+0x8a0>)
    53fe:	ca03      	ldmia	r2!, {r0, r1}
    5400:	c303      	stmia	r3!, {r0, r1}
    5402:	f001 fb0f 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
    5406:	4a32      	ldr	r2, [pc, #200]	; (54d0 <processOnSMS+0x8a4>)
    5408:	68fb      	ldr	r3, [r7, #12]
    540a:	0011      	movs	r1, r2
    540c:	0018      	movs	r0, r3
    540e:	4b15      	ldr	r3, [pc, #84]	; (5464 <processOnSMS+0x838>)
    5410:	4798      	blx	r3
    5412:	1e03      	subs	r3, r0, #0
    5414:	d060      	beq.n	54d8 <processOnSMS+0x8ac>
	{
		savePhaseSequenceProtectionSettings(false);
    5416:	2000      	movs	r0, #0
    5418:	4b2b      	ldr	r3, [pc, #172]	; (54c8 <processOnSMS+0x89c>)
    541a:	4798      	blx	r3

		incomingSMSProcessed=true;
    541c:	2328      	movs	r3, #40	; 0x28
    541e:	33ff      	adds	r3, #255	; 0xff
    5420:	2208      	movs	r2, #8
    5422:	4694      	mov	ip, r2
    5424:	44bc      	add	ip, r7
    5426:	4463      	add	r3, ip
    5428:	2201      	movs	r2, #1
    542a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    542c:	4b10      	ldr	r3, [pc, #64]	; (5470 <processOnSMS+0x844>)
    542e:	2294      	movs	r2, #148	; 0x94
    5430:	0052      	lsls	r2, r2, #1
    5432:	4694      	mov	ip, r2
    5434:	2208      	movs	r2, #8
    5436:	4690      	mov	r8, r2
    5438:	44b8      	add	r8, r7
    543a:	44c4      	add	ip, r8
    543c:	4463      	add	r3, ip
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	2b00      	cmp	r3, #0
    5442:	d101      	bne.n	5448 <processOnSMS+0x81c>
    5444:	f001 faee 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SEQP OFF");
    5448:	230c      	movs	r3, #12
    544a:	2208      	movs	r2, #8
    544c:	4694      	mov	ip, r2
    544e:	44bc      	add	ip, r7
    5450:	4463      	add	r3, ip
    5452:	4a20      	ldr	r2, [pc, #128]	; (54d4 <processOnSMS+0x8a8>)
    5454:	ca03      	ldmia	r2!, {r0, r1}
    5456:	c303      	stmia	r3!, {r0, r1}
    5458:	7812      	ldrb	r2, [r2, #0]
    545a:	701a      	strb	r2, [r3, #0]
    545c:	f001 fae2 	bl	6a24 <processOnSMS+0x1df8>
    5460:	0001907c 	.word	0x0001907c
    5464:	00003ee1 	.word	0x00003ee1
    5468:	000012a9 	.word	0x000012a9
    546c:	0000a29d 	.word	0x0000a29d
    5470:	fffffeda 	.word	0xfffffeda
    5474:	00019084 	.word	0x00019084
    5478:	00019094 	.word	0x00019094
    547c:	0001909c 	.word	0x0001909c
    5480:	000190b0 	.word	0x000190b0
    5484:	20000628 	.word	0x20000628
    5488:	00001469 	.word	0x00001469
    548c:	000190b8 	.word	0x000190b8
    5490:	000190c8 	.word	0x000190c8
    5494:	000190d0 	.word	0x000190d0
    5498:	000190e4 	.word	0x000190e4
    549c:	000015d9 	.word	0x000015d9
    54a0:	000190ec 	.word	0x000190ec
    54a4:	000190f4 	.word	0x000190f4
    54a8:	000190fc 	.word	0x000190fc
    54ac:	00019104 	.word	0x00019104
    54b0:	00017ff7 	.word	0x00017ff7
    54b4:	00017d43 	.word	0x00017d43
    54b8:	00017c4d 	.word	0x00017c4d
    54bc:	00001625 	.word	0x00001625
    54c0:	0001910c 	.word	0x0001910c
    54c4:	0001911c 	.word	0x0001911c
    54c8:	00001671 	.word	0x00001671
    54cc:	00019124 	.word	0x00019124
    54d0:	0001912c 	.word	0x0001912c
    54d4:	00019134 	.word	0x00019134
		}
	}
	else if (StringstartsWith(received_command,"DND"))
    54d8:	4adf      	ldr	r2, [pc, #892]	; (5858 <processOnSMS+0xc2c>)
    54da:	68fb      	ldr	r3, [r7, #12]
    54dc:	0011      	movs	r1, r2
    54de:	0018      	movs	r0, r3
    54e0:	4bde      	ldr	r3, [pc, #888]	; (585c <processOnSMS+0xc30>)
    54e2:	4798      	blx	r3
    54e4:	1e03      	subs	r3, r0, #0
    54e6:	d06c      	beq.n	55c2 <processOnSMS+0x996>
	{
		if (strlen(received_command)>3)
    54e8:	68fb      	ldr	r3, [r7, #12]
    54ea:	0018      	movs	r0, r3
    54ec:	4bdc      	ldr	r3, [pc, #880]	; (5860 <processOnSMS+0xc34>)
    54ee:	4798      	blx	r3
    54f0:	0003      	movs	r3, r0
    54f2:	2b03      	cmp	r3, #3
    54f4:	d801      	bhi.n	54fa <processOnSMS+0x8ce>
    54f6:	f001 fa95 	bl	6a24 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    54fa:	68fb      	ldr	r3, [r7, #12]
    54fc:	1cdc      	adds	r4, r3, #3
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	0018      	movs	r0, r3
    5502:	4bd7      	ldr	r3, [pc, #860]	; (5860 <processOnSMS+0xc34>)
    5504:	4798      	blx	r3
    5506:	0002      	movs	r2, r0
    5508:	68fb      	ldr	r3, [r7, #12]
    550a:	0021      	movs	r1, r4
    550c:	0018      	movs	r0, r3
    550e:	4bd5      	ldr	r3, [pc, #852]	; (5864 <processOnSMS+0xc38>)
    5510:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
    5512:	68fb      	ldr	r3, [r7, #12]
    5514:	781b      	ldrb	r3, [r3, #0]
    5516:	2b4c      	cmp	r3, #76	; 0x4c
    5518:	d009      	beq.n	552e <processOnSMS+0x902>
    551a:	68fb      	ldr	r3, [r7, #12]
    551c:	781b      	ldrb	r3, [r3, #0]
    551e:	2b53      	cmp	r3, #83	; 0x53
    5520:	d005      	beq.n	552e <processOnSMS+0x902>
    5522:	68fb      	ldr	r3, [r7, #12]
    5524:	781b      	ldrb	r3, [r3, #0]
    5526:	2b4f      	cmp	r3, #79	; 0x4f
    5528:	d001      	beq.n	552e <processOnSMS+0x902>
    552a:	f001 fa7b 	bl	6a24 <processOnSMS+0x1df8>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
    552e:	68fb      	ldr	r3, [r7, #12]
    5530:	b2db      	uxtb	r3, r3
    5532:	0018      	movs	r0, r3
    5534:	4bcc      	ldr	r3, [pc, #816]	; (5868 <processOnSMS+0xc3c>)
    5536:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    5538:	2328      	movs	r3, #40	; 0x28
    553a:	33ff      	adds	r3, #255	; 0xff
    553c:	2208      	movs	r2, #8
    553e:	4694      	mov	ip, r2
    5540:	44bc      	add	ip, r7
    5542:	4463      	add	r3, ip
    5544:	2201      	movs	r2, #1
    5546:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    5548:	4bc8      	ldr	r3, [pc, #800]	; (586c <processOnSMS+0xc40>)
    554a:	2294      	movs	r2, #148	; 0x94
    554c:	0052      	lsls	r2, r2, #1
    554e:	4694      	mov	ip, r2
    5550:	2208      	movs	r2, #8
    5552:	4690      	mov	r8, r2
    5554:	44b8      	add	r8, r7
    5556:	44c4      	add	ip, r8
    5558:	4463      	add	r3, ip
    555a:	781b      	ldrb	r3, [r3, #0]
    555c:	2b00      	cmp	r3, #0
    555e:	d101      	bne.n	5564 <processOnSMS+0x938>
    5560:	f001 fa60 	bl	6a24 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"DND : ");
    5564:	230c      	movs	r3, #12
    5566:	2208      	movs	r2, #8
    5568:	4694      	mov	ip, r2
    556a:	44bc      	add	ip, r7
    556c:	4463      	add	r3, ip
    556e:	4ac0      	ldr	r2, [pc, #768]	; (5870 <processOnSMS+0xc44>)
    5570:	6811      	ldr	r1, [r2, #0]
    5572:	6019      	str	r1, [r3, #0]
    5574:	8891      	ldrh	r1, [r2, #4]
    5576:	8099      	strh	r1, [r3, #4]
    5578:	7992      	ldrb	r2, [r2, #6]
    557a:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
    557c:	68fa      	ldr	r2, [r7, #12]
    557e:	230c      	movs	r3, #12
    5580:	2108      	movs	r1, #8
    5582:	468c      	mov	ip, r1
    5584:	44bc      	add	ip, r7
    5586:	4463      	add	r3, ip
    5588:	0011      	movs	r1, r2
    558a:	0018      	movs	r0, r3
    558c:	4bb9      	ldr	r3, [pc, #740]	; (5874 <processOnSMS+0xc48>)
    558e:	4798      	blx	r3
					strcat(resep_msg," OK");
    5590:	230c      	movs	r3, #12
    5592:	2208      	movs	r2, #8
    5594:	4694      	mov	ip, r2
    5596:	44bc      	add	ip, r7
    5598:	4463      	add	r3, ip
    559a:	0018      	movs	r0, r3
    559c:	4bb0      	ldr	r3, [pc, #704]	; (5860 <processOnSMS+0xc34>)
    559e:	4798      	blx	r3
    55a0:	0003      	movs	r3, r0
    55a2:	001a      	movs	r2, r3
    55a4:	230c      	movs	r3, #12
    55a6:	2108      	movs	r1, #8
    55a8:	468c      	mov	ip, r1
    55aa:	44bc      	add	ip, r7
    55ac:	4463      	add	r3, ip
    55ae:	189a      	adds	r2, r3, r2
    55b0:	4bb1      	ldr	r3, [pc, #708]	; (5878 <processOnSMS+0xc4c>)
    55b2:	0010      	movs	r0, r2
    55b4:	0019      	movs	r1, r3
    55b6:	2304      	movs	r3, #4
    55b8:	001a      	movs	r2, r3
    55ba:	4bb0      	ldr	r3, [pc, #704]	; (587c <processOnSMS+0xc50>)
    55bc:	4798      	blx	r3
    55be:	f001 fa31 	bl	6a24 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
    55c2:	4aaf      	ldr	r2, [pc, #700]	; (5880 <processOnSMS+0xc54>)
    55c4:	68fb      	ldr	r3, [r7, #12]
    55c6:	0011      	movs	r1, r2
    55c8:	0018      	movs	r0, r3
    55ca:	4ba4      	ldr	r3, [pc, #656]	; (585c <processOnSMS+0xc30>)
    55cc:	4798      	blx	r3
    55ce:	1e03      	subs	r3, r0, #0
    55d0:	d072      	beq.n	56b8 <processOnSMS+0xa8c>
	{
		if (strlen(received_command)>4)
    55d2:	68fb      	ldr	r3, [r7, #12]
    55d4:	0018      	movs	r0, r3
    55d6:	4ba2      	ldr	r3, [pc, #648]	; (5860 <processOnSMS+0xc34>)
    55d8:	4798      	blx	r3
    55da:	0003      	movs	r3, r0
    55dc:	2b04      	cmp	r3, #4
    55de:	d801      	bhi.n	55e4 <processOnSMS+0x9b8>
    55e0:	f001 fa20 	bl	6a24 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    55e4:	68fb      	ldr	r3, [r7, #12]
    55e6:	1d1c      	adds	r4, r3, #4
    55e8:	68fb      	ldr	r3, [r7, #12]
    55ea:	0018      	movs	r0, r3
    55ec:	4b9c      	ldr	r3, [pc, #624]	; (5860 <processOnSMS+0xc34>)
    55ee:	4798      	blx	r3
    55f0:	0002      	movs	r2, r0
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	0021      	movs	r1, r4
    55f6:	0018      	movs	r0, r3
    55f8:	4b9a      	ldr	r3, [pc, #616]	; (5864 <processOnSMS+0xc38>)
    55fa:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	0018      	movs	r0, r3
    5600:	4ba0      	ldr	r3, [pc, #640]	; (5884 <processOnSMS+0xc58>)
    5602:	4798      	blx	r3
    5604:	0002      	movs	r2, r0
    5606:	2326      	movs	r3, #38	; 0x26
    5608:	33ff      	adds	r3, #255	; 0xff
    560a:	2108      	movs	r1, #8
    560c:	468c      	mov	ip, r1
    560e:	44bc      	add	ip, r7
    5610:	4463      	add	r3, ip
    5612:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
    5614:	2326      	movs	r3, #38	; 0x26
    5616:	33ff      	adds	r3, #255	; 0xff
    5618:	2208      	movs	r2, #8
    561a:	4694      	mov	ip, r2
    561c:	44bc      	add	ip, r7
    561e:	4463      	add	r3, ip
    5620:	781b      	ldrb	r3, [r3, #0]
    5622:	2b02      	cmp	r3, #2
    5624:	d901      	bls.n	562a <processOnSMS+0x9fe>
    5626:	f001 f9fd 	bl	6a24 <processOnSMS+0x1df8>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
    562a:	2326      	movs	r3, #38	; 0x26
    562c:	33ff      	adds	r3, #255	; 0xff
    562e:	2208      	movs	r2, #8
    5630:	4694      	mov	ip, r2
    5632:	44bc      	add	ip, r7
    5634:	4463      	add	r3, ip
    5636:	781b      	ldrb	r3, [r3, #0]
    5638:	2b01      	cmp	r3, #1
    563a:	d10b      	bne.n	5654 <processOnSMS+0xa28>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
    563c:	4b92      	ldr	r3, [pc, #584]	; (5888 <processOnSMS+0xc5c>)
    563e:	785b      	ldrb	r3, [r3, #1]
    5640:	2b00      	cmp	r3, #0
    5642:	d107      	bne.n	5654 <processOnSMS+0xa28>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
    5644:	2326      	movs	r3, #38	; 0x26
    5646:	33ff      	adds	r3, #255	; 0xff
    5648:	2208      	movs	r2, #8
    564a:	4694      	mov	ip, r2
    564c:	44bc      	add	ip, r7
    564e:	4463      	add	r3, ip
    5650:	2200      	movs	r2, #0
    5652:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
    5654:	2326      	movs	r3, #38	; 0x26
    5656:	33ff      	adds	r3, #255	; 0xff
    5658:	2208      	movs	r2, #8
    565a:	4694      	mov	ip, r2
    565c:	44bc      	add	ip, r7
    565e:	4463      	add	r3, ip
    5660:	781b      	ldrb	r3, [r3, #0]
    5662:	0018      	movs	r0, r3
    5664:	4b89      	ldr	r3, [pc, #548]	; (588c <processOnSMS+0xc60>)
    5666:	4798      	blx	r3
				incomingSMSProcessed=true;
    5668:	2328      	movs	r3, #40	; 0x28
    566a:	33ff      	adds	r3, #255	; 0xff
    566c:	2208      	movs	r2, #8
    566e:	4694      	mov	ip, r2
    5670:	44bc      	add	ip, r7
    5672:	4463      	add	r3, ip
    5674:	2201      	movs	r2, #1
    5676:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    5678:	4b7c      	ldr	r3, [pc, #496]	; (586c <processOnSMS+0xc40>)
    567a:	2294      	movs	r2, #148	; 0x94
    567c:	0052      	lsls	r2, r2, #1
    567e:	4694      	mov	ip, r2
    5680:	2208      	movs	r2, #8
    5682:	4690      	mov	r8, r2
    5684:	44b8      	add	r8, r7
    5686:	44c4      	add	ip, r8
    5688:	4463      	add	r3, ip
    568a:	781b      	ldrb	r3, [r3, #0]
    568c:	2b00      	cmp	r3, #0
    568e:	d101      	bne.n	5694 <processOnSMS+0xa68>
    5690:	f001 f9c8 	bl	6a24 <processOnSMS+0x1df8>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
    5694:	2326      	movs	r3, #38	; 0x26
    5696:	33ff      	adds	r3, #255	; 0xff
    5698:	2208      	movs	r2, #8
    569a:	4694      	mov	ip, r2
    569c:	44bc      	add	ip, r7
    569e:	4463      	add	r3, ip
    56a0:	781a      	ldrb	r2, [r3, #0]
    56a2:	497b      	ldr	r1, [pc, #492]	; (5890 <processOnSMS+0xc64>)
    56a4:	230c      	movs	r3, #12
    56a6:	2008      	movs	r0, #8
    56a8:	4684      	mov	ip, r0
    56aa:	44bc      	add	ip, r7
    56ac:	4463      	add	r3, ip
    56ae:	0018      	movs	r0, r3
    56b0:	4b78      	ldr	r3, [pc, #480]	; (5894 <processOnSMS+0xc68>)
    56b2:	4798      	blx	r3
    56b4:	f001 f9b6 	bl	6a24 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
    56b8:	4a77      	ldr	r2, [pc, #476]	; (5898 <processOnSMS+0xc6c>)
    56ba:	68fb      	ldr	r3, [r7, #12]
    56bc:	0011      	movs	r1, r2
    56be:	0018      	movs	r0, r3
    56c0:	4b66      	ldr	r3, [pc, #408]	; (585c <processOnSMS+0xc30>)
    56c2:	4798      	blx	r3
    56c4:	1e03      	subs	r3, r0, #0
    56c6:	d06c      	beq.n	57a2 <processOnSMS+0xb76>
	{
		if (strlen(received_command)>4)
    56c8:	68fb      	ldr	r3, [r7, #12]
    56ca:	0018      	movs	r0, r3
    56cc:	4b64      	ldr	r3, [pc, #400]	; (5860 <processOnSMS+0xc34>)
    56ce:	4798      	blx	r3
    56d0:	0003      	movs	r3, r0
    56d2:	2b04      	cmp	r3, #4
    56d4:	d801      	bhi.n	56da <processOnSMS+0xaae>
    56d6:	f001 f9a5 	bl	6a24 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	1d1c      	adds	r4, r3, #4
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	0018      	movs	r0, r3
    56e2:	4b5f      	ldr	r3, [pc, #380]	; (5860 <processOnSMS+0xc34>)
    56e4:	4798      	blx	r3
    56e6:	0002      	movs	r2, r0
    56e8:	68fb      	ldr	r3, [r7, #12]
    56ea:	0021      	movs	r1, r4
    56ec:	0018      	movs	r0, r3
    56ee:	4b5d      	ldr	r3, [pc, #372]	; (5864 <processOnSMS+0xc38>)
    56f0:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
    56f2:	68fb      	ldr	r3, [r7, #12]
    56f4:	781b      	ldrb	r3, [r3, #0]
    56f6:	2b43      	cmp	r3, #67	; 0x43
    56f8:	d00d      	beq.n	5716 <processOnSMS+0xaea>
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	2b41      	cmp	r3, #65	; 0x41
    5700:	d009      	beq.n	5716 <processOnSMS+0xaea>
    5702:	68fb      	ldr	r3, [r7, #12]
    5704:	781b      	ldrb	r3, [r3, #0]
    5706:	2b54      	cmp	r3, #84	; 0x54
    5708:	d005      	beq.n	5716 <processOnSMS+0xaea>
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	781b      	ldrb	r3, [r3, #0]
    570e:	2b4e      	cmp	r3, #78	; 0x4e
    5710:	d001      	beq.n	5716 <processOnSMS+0xaea>
    5712:	f001 f987 	bl	6a24 <processOnSMS+0x1df8>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	b2db      	uxtb	r3, r3
    571a:	0018      	movs	r0, r3
    571c:	4b5f      	ldr	r3, [pc, #380]	; (589c <processOnSMS+0xc70>)
    571e:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    5720:	2328      	movs	r3, #40	; 0x28
    5722:	33ff      	adds	r3, #255	; 0xff
    5724:	2208      	movs	r2, #8
    5726:	4694      	mov	ip, r2
    5728:	44bc      	add	ip, r7
    572a:	4463      	add	r3, ip
    572c:	2201      	movs	r2, #1
    572e:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    5730:	4b4e      	ldr	r3, [pc, #312]	; (586c <processOnSMS+0xc40>)
    5732:	2294      	movs	r2, #148	; 0x94
    5734:	0052      	lsls	r2, r2, #1
    5736:	4694      	mov	ip, r2
    5738:	2208      	movs	r2, #8
    573a:	4690      	mov	r8, r2
    573c:	44b8      	add	r8, r7
    573e:	44c4      	add	ip, r8
    5740:	4463      	add	r3, ip
    5742:	781b      	ldrb	r3, [r3, #0]
    5744:	2b00      	cmp	r3, #0
    5746:	d101      	bne.n	574c <processOnSMS+0xb20>
    5748:	f001 f96c 	bl	6a24 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"RESP : ");
    574c:	230c      	movs	r3, #12
    574e:	2208      	movs	r2, #8
    5750:	4694      	mov	ip, r2
    5752:	44bc      	add	ip, r7
    5754:	4463      	add	r3, ip
    5756:	4a52      	ldr	r2, [pc, #328]	; (58a0 <processOnSMS+0xc74>)
    5758:	ca03      	ldmia	r2!, {r0, r1}
    575a:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
    575c:	68fa      	ldr	r2, [r7, #12]
    575e:	230c      	movs	r3, #12
    5760:	2108      	movs	r1, #8
    5762:	468c      	mov	ip, r1
    5764:	44bc      	add	ip, r7
    5766:	4463      	add	r3, ip
    5768:	0011      	movs	r1, r2
    576a:	0018      	movs	r0, r3
    576c:	4b41      	ldr	r3, [pc, #260]	; (5874 <processOnSMS+0xc48>)
    576e:	4798      	blx	r3
					strcat(resep_msg," OK");
    5770:	230c      	movs	r3, #12
    5772:	2208      	movs	r2, #8
    5774:	4694      	mov	ip, r2
    5776:	44bc      	add	ip, r7
    5778:	4463      	add	r3, ip
    577a:	0018      	movs	r0, r3
    577c:	4b38      	ldr	r3, [pc, #224]	; (5860 <processOnSMS+0xc34>)
    577e:	4798      	blx	r3
    5780:	0003      	movs	r3, r0
    5782:	001a      	movs	r2, r3
    5784:	230c      	movs	r3, #12
    5786:	2108      	movs	r1, #8
    5788:	468c      	mov	ip, r1
    578a:	44bc      	add	ip, r7
    578c:	4463      	add	r3, ip
    578e:	189a      	adds	r2, r3, r2
    5790:	4b39      	ldr	r3, [pc, #228]	; (5878 <processOnSMS+0xc4c>)
    5792:	0010      	movs	r0, r2
    5794:	0019      	movs	r1, r3
    5796:	2304      	movs	r3, #4
    5798:	001a      	movs	r2, r3
    579a:	4b38      	ldr	r3, [pc, #224]	; (587c <processOnSMS+0xc50>)
    579c:	4798      	blx	r3
    579e:	f001 f941 	bl	6a24 <processOnSMS+0x1df8>
	}
	//else if (StringstartsWith(received_command,"SJMP"))
	//{
	//strcpy(resep_msg,"New hardware does not required Jumper Setting");
	//}
	else if (StringstartsWith(received_command,"OVR"))
    57a2:	4a40      	ldr	r2, [pc, #256]	; (58a4 <processOnSMS+0xc78>)
    57a4:	68fb      	ldr	r3, [r7, #12]
    57a6:	0011      	movs	r1, r2
    57a8:	0018      	movs	r0, r3
    57aa:	4b2c      	ldr	r3, [pc, #176]	; (585c <processOnSMS+0xc30>)
    57ac:	4798      	blx	r3
    57ae:	1e03      	subs	r3, r0, #0
    57b0:	d100      	bne.n	57b4 <processOnSMS+0xb88>
    57b2:	e07d      	b.n	58b0 <processOnSMS+0xc84>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    57b4:	68fb      	ldr	r3, [r7, #12]
    57b6:	1cdc      	adds	r4, r3, #3
    57b8:	68fb      	ldr	r3, [r7, #12]
    57ba:	0018      	movs	r0, r3
    57bc:	4b28      	ldr	r3, [pc, #160]	; (5860 <processOnSMS+0xc34>)
    57be:	4798      	blx	r3
    57c0:	0002      	movs	r2, r0
    57c2:	68fb      	ldr	r3, [r7, #12]
    57c4:	0021      	movs	r1, r4
    57c6:	0018      	movs	r0, r3
    57c8:	4b26      	ldr	r3, [pc, #152]	; (5864 <processOnSMS+0xc38>)
    57ca:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
    57cc:	68fb      	ldr	r3, [r7, #12]
    57ce:	0018      	movs	r0, r3
    57d0:	4b2c      	ldr	r3, [pc, #176]	; (5884 <processOnSMS+0xc58>)
    57d2:	4798      	blx	r3
    57d4:	0002      	movs	r2, r0
    57d6:	238b      	movs	r3, #139	; 0x8b
    57d8:	005b      	lsls	r3, r3, #1
    57da:	2108      	movs	r1, #8
    57dc:	468c      	mov	ip, r1
    57de:	44bc      	add	ip, r7
    57e0:	4463      	add	r3, ip
    57e2:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
    57e4:	238b      	movs	r3, #139	; 0x8b
    57e6:	005b      	lsls	r3, r3, #1
    57e8:	2208      	movs	r2, #8
    57ea:	4694      	mov	ip, r2
    57ec:	44bc      	add	ip, r7
    57ee:	4463      	add	r3, ip
    57f0:	781b      	ldrb	r3, [r3, #0]
    57f2:	2b68      	cmp	r3, #104	; 0x68
    57f4:	d801      	bhi.n	57fa <processOnSMS+0xbce>
    57f6:	f001 f915 	bl	6a24 <processOnSMS+0x1df8>
		{
			setOverloadPer(ovr_per);
    57fa:	238b      	movs	r3, #139	; 0x8b
    57fc:	005b      	lsls	r3, r3, #1
    57fe:	2208      	movs	r2, #8
    5800:	4694      	mov	ip, r2
    5802:	44bc      	add	ip, r7
    5804:	4463      	add	r3, ip
    5806:	781b      	ldrb	r3, [r3, #0]
    5808:	0018      	movs	r0, r3
    580a:	4b27      	ldr	r3, [pc, #156]	; (58a8 <processOnSMS+0xc7c>)
    580c:	4798      	blx	r3
			incomingSMSProcessed=true;
    580e:	2328      	movs	r3, #40	; 0x28
    5810:	33ff      	adds	r3, #255	; 0xff
    5812:	2208      	movs	r2, #8
    5814:	4694      	mov	ip, r2
    5816:	44bc      	add	ip, r7
    5818:	4463      	add	r3, ip
    581a:	2201      	movs	r2, #1
    581c:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    581e:	4b13      	ldr	r3, [pc, #76]	; (586c <processOnSMS+0xc40>)
    5820:	2294      	movs	r2, #148	; 0x94
    5822:	0052      	lsls	r2, r2, #1
    5824:	4694      	mov	ip, r2
    5826:	2208      	movs	r2, #8
    5828:	4690      	mov	r8, r2
    582a:	44b8      	add	r8, r7
    582c:	44c4      	add	ip, r8
    582e:	4463      	add	r3, ip
    5830:	781b      	ldrb	r3, [r3, #0]
    5832:	2b00      	cmp	r3, #0
    5834:	d101      	bne.n	583a <processOnSMS+0xc0e>
    5836:	f001 f8f5 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"OVR SET OK");
    583a:	230c      	movs	r3, #12
    583c:	2208      	movs	r2, #8
    583e:	4694      	mov	ip, r2
    5840:	44bc      	add	ip, r7
    5842:	4463      	add	r3, ip
    5844:	4a19      	ldr	r2, [pc, #100]	; (58ac <processOnSMS+0xc80>)
    5846:	ca03      	ldmia	r2!, {r0, r1}
    5848:	c303      	stmia	r3!, {r0, r1}
    584a:	8811      	ldrh	r1, [r2, #0]
    584c:	8019      	strh	r1, [r3, #0]
    584e:	7892      	ldrb	r2, [r2, #2]
    5850:	709a      	strb	r2, [r3, #2]
    5852:	f001 f8e7 	bl	6a24 <processOnSMS+0x1df8>
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	00019140 	.word	0x00019140
    585c:	00003ee1 	.word	0x00003ee1
    5860:	00017ff7 	.word	0x00017ff7
    5864:	00017d43 	.word	0x00017d43
    5868:	00001341 	.word	0x00001341
    586c:	fffffeda 	.word	0xfffffeda
    5870:	00019144 	.word	0x00019144
    5874:	00017fb1 	.word	0x00017fb1
    5878:	0001914c 	.word	0x0001914c
    587c:	00017d31 	.word	0x00017d31
    5880:	00019150 	.word	0x00019150
    5884:	00017c4d 	.word	0x00017c4d
    5888:	20000628 	.word	0x20000628
    588c:	000016bd 	.word	0x000016bd
    5890:	00019158 	.word	0x00019158
    5894:	00017f6d 	.word	0x00017f6d
    5898:	00019164 	.word	0x00019164
    589c:	0000138d 	.word	0x0000138d
    58a0:	0001916c 	.word	0x0001916c
    58a4:	00019174 	.word	0x00019174
    58a8:	00001501 	.word	0x00001501
    58ac:	00019178 	.word	0x00019178
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
    58b0:	4aee      	ldr	r2, [pc, #952]	; (5c6c <processOnSMS+0x1040>)
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	0011      	movs	r1, r2
    58b6:	0018      	movs	r0, r3
    58b8:	4bed      	ldr	r3, [pc, #948]	; (5c70 <processOnSMS+0x1044>)
    58ba:	4798      	blx	r3
    58bc:	1e03      	subs	r3, r0, #0
    58be:	d057      	beq.n	5970 <processOnSMS+0xd44>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    58c0:	68fb      	ldr	r3, [r7, #12]
    58c2:	1d1c      	adds	r4, r3, #4
    58c4:	68fb      	ldr	r3, [r7, #12]
    58c6:	0018      	movs	r0, r3
    58c8:	4bea      	ldr	r3, [pc, #936]	; (5c74 <processOnSMS+0x1048>)
    58ca:	4798      	blx	r3
    58cc:	0002      	movs	r2, r0
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	0021      	movs	r1, r4
    58d2:	0018      	movs	r0, r3
    58d4:	4be8      	ldr	r3, [pc, #928]	; (5c78 <processOnSMS+0x104c>)
    58d6:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	0018      	movs	r0, r3
    58dc:	4be7      	ldr	r3, [pc, #924]	; (5c7c <processOnSMS+0x1050>)
    58de:	4798      	blx	r3
    58e0:	0002      	movs	r2, r0
    58e2:	2316      	movs	r3, #22
    58e4:	33ff      	adds	r3, #255	; 0xff
    58e6:	2108      	movs	r1, #8
    58e8:	468c      	mov	ip, r1
    58ea:	44bc      	add	ip, r7
    58ec:	4463      	add	r3, ip
    58ee:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
    58f0:	2316      	movs	r3, #22
    58f2:	33ff      	adds	r3, #255	; 0xff
    58f4:	2208      	movs	r2, #8
    58f6:	4694      	mov	ip, r2
    58f8:	44bc      	add	ip, r7
    58fa:	4463      	add	r3, ip
    58fc:	781b      	ldrb	r3, [r3, #0]
    58fe:	2b61      	cmp	r3, #97	; 0x61
    5900:	d901      	bls.n	5906 <processOnSMS+0xcda>
    5902:	f001 f88f 	bl	6a24 <processOnSMS+0x1df8>
    5906:	2316      	movs	r3, #22
    5908:	33ff      	adds	r3, #255	; 0xff
    590a:	2208      	movs	r2, #8
    590c:	4694      	mov	ip, r2
    590e:	44bc      	add	ip, r7
    5910:	4463      	add	r3, ip
    5912:	781b      	ldrb	r3, [r3, #0]
    5914:	2b00      	cmp	r3, #0
    5916:	d101      	bne.n	591c <processOnSMS+0xcf0>
    5918:	f001 f884 	bl	6a24 <processOnSMS+0x1df8>
		{

			setUnderloadPer(undr_per);
    591c:	2316      	movs	r3, #22
    591e:	33ff      	adds	r3, #255	; 0xff
    5920:	2208      	movs	r2, #8
    5922:	4694      	mov	ip, r2
    5924:	44bc      	add	ip, r7
    5926:	4463      	add	r3, ip
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	0018      	movs	r0, r3
    592c:	4bd4      	ldr	r3, [pc, #848]	; (5c80 <processOnSMS+0x1054>)
    592e:	4798      	blx	r3

			incomingSMSProcessed=true;
    5930:	2328      	movs	r3, #40	; 0x28
    5932:	33ff      	adds	r3, #255	; 0xff
    5934:	2208      	movs	r2, #8
    5936:	4694      	mov	ip, r2
    5938:	44bc      	add	ip, r7
    593a:	4463      	add	r3, ip
    593c:	2201      	movs	r2, #1
    593e:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    5940:	4bd0      	ldr	r3, [pc, #832]	; (5c84 <processOnSMS+0x1058>)
    5942:	2294      	movs	r2, #148	; 0x94
    5944:	0052      	lsls	r2, r2, #1
    5946:	4694      	mov	ip, r2
    5948:	2208      	movs	r2, #8
    594a:	4690      	mov	r8, r2
    594c:	44b8      	add	r8, r7
    594e:	44c4      	add	ip, r8
    5950:	4463      	add	r3, ip
    5952:	781b      	ldrb	r3, [r3, #0]
    5954:	2b00      	cmp	r3, #0
    5956:	d101      	bne.n	595c <processOnSMS+0xd30>
    5958:	f001 f864 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"UNDR SET OK");
    595c:	230c      	movs	r3, #12
    595e:	2208      	movs	r2, #8
    5960:	4694      	mov	ip, r2
    5962:	44bc      	add	ip, r7
    5964:	4463      	add	r3, ip
    5966:	4ac8      	ldr	r2, [pc, #800]	; (5c88 <processOnSMS+0x105c>)
    5968:	ca13      	ldmia	r2!, {r0, r1, r4}
    596a:	c313      	stmia	r3!, {r0, r1, r4}
    596c:	f001 f85a 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
    5970:	4ac6      	ldr	r2, [pc, #792]	; (5c8c <processOnSMS+0x1060>)
    5972:	68fb      	ldr	r3, [r7, #12]
    5974:	0011      	movs	r1, r2
    5976:	0018      	movs	r0, r3
    5978:	4bbd      	ldr	r3, [pc, #756]	; (5c70 <processOnSMS+0x1044>)
    597a:	4798      	blx	r3
    597c:	1e03      	subs	r3, r0, #0
    597e:	d040      	beq.n	5a02 <processOnSMS+0xdd6>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
    5980:	4bc3      	ldr	r3, [pc, #780]	; (5c90 <processOnSMS+0x1064>)
    5982:	785b      	ldrb	r3, [r3, #1]
    5984:	2b00      	cmp	r3, #0
    5986:	d101      	bne.n	598c <processOnSMS+0xd60>
    5988:	f001 f84c 	bl	6a24 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
    598c:	4bc1      	ldr	r3, [pc, #772]	; (5c94 <processOnSMS+0x1068>)
    598e:	8a9b      	ldrh	r3, [r3, #20]
    5990:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    5992:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
    5994:	4bbf      	ldr	r3, [pc, #764]	; (5c94 <processOnSMS+0x1068>)
    5996:	8adb      	ldrh	r3, [r3, #22]
    5998:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    599a:	603b      	str	r3, [r7, #0]
    599c:	4bbe      	ldr	r3, [pc, #760]	; (5c98 <processOnSMS+0x106c>)
    599e:	691a      	ldr	r2, [r3, #16]
    59a0:	4bbd      	ldr	r3, [pc, #756]	; (5c98 <processOnSMS+0x106c>)
    59a2:	6959      	ldr	r1, [r3, #20]
    59a4:	4bbc      	ldr	r3, [pc, #752]	; (5c98 <processOnSMS+0x106c>)
    59a6:	699b      	ldr	r3, [r3, #24]
    59a8:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
    59aa:	48bb      	ldr	r0, [pc, #748]	; (5c98 <processOnSMS+0x106c>)
    59ac:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    59ae:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
    59b0:	48b9      	ldr	r0, [pc, #740]	; (5c98 <processOnSMS+0x106c>)
    59b2:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    59b4:	0006      	movs	r6, r0
    59b6:	4cb9      	ldr	r4, [pc, #740]	; (5c9c <processOnSMS+0x1070>)
    59b8:	200c      	movs	r0, #12
    59ba:	2308      	movs	r3, #8
    59bc:	469c      	mov	ip, r3
    59be:	44bc      	add	ip, r7
    59c0:	4460      	add	r0, ip
    59c2:	9604      	str	r6, [sp, #16]
    59c4:	9503      	str	r5, [sp, #12]
    59c6:	4643      	mov	r3, r8
    59c8:	9302      	str	r3, [sp, #8]
    59ca:	9101      	str	r1, [sp, #4]
    59cc:	9200      	str	r2, [sp, #0]
    59ce:	683b      	ldr	r3, [r7, #0]
    59d0:	687a      	ldr	r2, [r7, #4]
    59d2:	0021      	movs	r1, r4
    59d4:	4cb2      	ldr	r4, [pc, #712]	; (5ca0 <processOnSMS+0x1074>)
    59d6:	47a0      	blx	r4
			response_sms_processed_cmd = true;
    59d8:	4baa      	ldr	r3, [pc, #680]	; (5c84 <processOnSMS+0x1058>)
    59da:	2294      	movs	r2, #148	; 0x94
    59dc:	0052      	lsls	r2, r2, #1
    59de:	4694      	mov	ip, r2
    59e0:	2208      	movs	r2, #8
    59e2:	4690      	mov	r8, r2
    59e4:	44b8      	add	r8, r7
    59e6:	44c4      	add	ip, r8
    59e8:	4463      	add	r3, ip
    59ea:	2201      	movs	r2, #1
    59ec:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
    59ee:	2328      	movs	r3, #40	; 0x28
    59f0:	33ff      	adds	r3, #255	; 0xff
    59f2:	2208      	movs	r2, #8
    59f4:	4694      	mov	ip, r2
    59f6:	44bc      	add	ip, r7
    59f8:	4463      	add	r3, ip
    59fa:	2201      	movs	r2, #1
    59fc:	701a      	strb	r2, [r3, #0]
    59fe:	f001 f811 	bl	6a24 <processOnSMS+0x1df8>

		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
    5a02:	4aa8      	ldr	r2, [pc, #672]	; (5ca4 <processOnSMS+0x1078>)
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	0011      	movs	r1, r2
    5a08:	0018      	movs	r0, r3
    5a0a:	4b99      	ldr	r3, [pc, #612]	; (5c70 <processOnSMS+0x1044>)
    5a0c:	4798      	blx	r3
    5a0e:	1e03      	subs	r3, r0, #0
    5a10:	d032      	beq.n	5a78 <processOnSMS+0xe4c>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    5a12:	4b9f      	ldr	r3, [pc, #636]	; (5c90 <processOnSMS+0x1064>)
    5a14:	795b      	ldrb	r3, [r3, #5]
    5a16:	2b00      	cmp	r3, #0
    5a18:	d101      	bne.n	5a1e <processOnSMS+0xdf2>
    5a1a:	f001 f803 	bl	6a24 <processOnSMS+0x1df8>
    5a1e:	4b9c      	ldr	r3, [pc, #624]	; (5c90 <processOnSMS+0x1064>)
    5a20:	78db      	ldrb	r3, [r3, #3]
    5a22:	2b00      	cmp	r3, #0
    5a24:	d001      	beq.n	5a2a <processOnSMS+0xdfe>
    5a26:	f000 fffd 	bl	6a24 <processOnSMS+0x1df8>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
    5a2a:	2001      	movs	r0, #1
    5a2c:	4b9e      	ldr	r3, [pc, #632]	; (5ca8 <processOnSMS+0x107c>)
    5a2e:	4798      	blx	r3
			
			incomingSMSProcessed=true;
    5a30:	2328      	movs	r3, #40	; 0x28
    5a32:	33ff      	adds	r3, #255	; 0xff
    5a34:	2208      	movs	r2, #8
    5a36:	4694      	mov	ip, r2
    5a38:	44bc      	add	ip, r7
    5a3a:	4463      	add	r3, ip
    5a3c:	2201      	movs	r2, #1
    5a3e:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
    5a40:	4b90      	ldr	r3, [pc, #576]	; (5c84 <processOnSMS+0x1058>)
    5a42:	2294      	movs	r2, #148	; 0x94
    5a44:	0052      	lsls	r2, r2, #1
    5a46:	4694      	mov	ip, r2
    5a48:	2208      	movs	r2, #8
    5a4a:	4690      	mov	r8, r2
    5a4c:	44b8      	add	r8, r7
    5a4e:	44c4      	add	ip, r8
    5a50:	4463      	add	r3, ip
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d101      	bne.n	5a5c <processOnSMS+0xe30>
    5a58:	f000 ffe4 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
    5a5c:	230c      	movs	r3, #12
    5a5e:	2208      	movs	r2, #8
    5a60:	4694      	mov	ip, r2
    5a62:	44bc      	add	ip, r7
    5a64:	4463      	add	r3, ip
    5a66:	4a91      	ldr	r2, [pc, #580]	; (5cac <processOnSMS+0x1080>)
    5a68:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a6a:	c313      	stmia	r3!, {r0, r1, r4}
    5a6c:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a6e:	c313      	stmia	r3!, {r0, r1, r4}
    5a70:	6812      	ldr	r2, [r2, #0]
    5a72:	601a      	str	r2, [r3, #0]
    5a74:	f000 ffd6 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
    5a78:	4a8d      	ldr	r2, [pc, #564]	; (5cb0 <processOnSMS+0x1084>)
    5a7a:	68fb      	ldr	r3, [r7, #12]
    5a7c:	0011      	movs	r1, r2
    5a7e:	0018      	movs	r0, r3
    5a80:	4b7b      	ldr	r3, [pc, #492]	; (5c70 <processOnSMS+0x1044>)
    5a82:	4798      	blx	r3
    5a84:	1e03      	subs	r3, r0, #0
    5a86:	d034      	beq.n	5af2 <processOnSMS+0xec6>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    5a88:	4b81      	ldr	r3, [pc, #516]	; (5c90 <processOnSMS+0x1064>)
    5a8a:	795b      	ldrb	r3, [r3, #5]
    5a8c:	2b00      	cmp	r3, #0
    5a8e:	d101      	bne.n	5a94 <processOnSMS+0xe68>
    5a90:	f000 ffc8 	bl	6a24 <processOnSMS+0x1df8>
    5a94:	4b7e      	ldr	r3, [pc, #504]	; (5c90 <processOnSMS+0x1064>)
    5a96:	78db      	ldrb	r3, [r3, #3]
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d001      	beq.n	5aa0 <processOnSMS+0xe74>
    5a9c:	f000 ffc2 	bl	6a24 <processOnSMS+0x1df8>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
    5aa0:	2000      	movs	r0, #0
    5aa2:	4b81      	ldr	r3, [pc, #516]	; (5ca8 <processOnSMS+0x107c>)
    5aa4:	4798      	blx	r3

			incomingSMSProcessed=true;
    5aa6:	2328      	movs	r3, #40	; 0x28
    5aa8:	33ff      	adds	r3, #255	; 0xff
    5aaa:	2208      	movs	r2, #8
    5aac:	4694      	mov	ip, r2
    5aae:	44bc      	add	ip, r7
    5ab0:	4463      	add	r3, ip
    5ab2:	2201      	movs	r2, #1
    5ab4:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
    5ab6:	4b73      	ldr	r3, [pc, #460]	; (5c84 <processOnSMS+0x1058>)
    5ab8:	2294      	movs	r2, #148	; 0x94
    5aba:	0052      	lsls	r2, r2, #1
    5abc:	4694      	mov	ip, r2
    5abe:	2208      	movs	r2, #8
    5ac0:	4690      	mov	r8, r2
    5ac2:	44b8      	add	r8, r7
    5ac4:	44c4      	add	ip, r8
    5ac6:	4463      	add	r3, ip
    5ac8:	781b      	ldrb	r3, [r3, #0]
    5aca:	2b00      	cmp	r3, #0
    5acc:	d101      	bne.n	5ad2 <processOnSMS+0xea6>
    5ace:	f000 ffa9 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
    5ad2:	230c      	movs	r3, #12
    5ad4:	2208      	movs	r2, #8
    5ad6:	4694      	mov	ip, r2
    5ad8:	44bc      	add	ip, r7
    5ada:	4463      	add	r3, ip
    5adc:	4a75      	ldr	r2, [pc, #468]	; (5cb4 <processOnSMS+0x1088>)
    5ade:	ca13      	ldmia	r2!, {r0, r1, r4}
    5ae0:	c313      	stmia	r3!, {r0, r1, r4}
    5ae2:	ca13      	ldmia	r2!, {r0, r1, r4}
    5ae4:	c313      	stmia	r3!, {r0, r1, r4}
    5ae6:	6811      	ldr	r1, [r2, #0]
    5ae8:	6019      	str	r1, [r3, #0]
    5aea:	7912      	ldrb	r2, [r2, #4]
    5aec:	711a      	strb	r2, [r3, #4]
    5aee:	f000 ff99 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
    5af2:	4a71      	ldr	r2, [pc, #452]	; (5cb8 <processOnSMS+0x108c>)
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	0011      	movs	r1, r2
    5af8:	0018      	movs	r0, r3
    5afa:	4b5d      	ldr	r3, [pc, #372]	; (5c70 <processOnSMS+0x1044>)
    5afc:	4798      	blx	r3
    5afe:	1e03      	subs	r3, r0, #0
    5b00:	d05c      	beq.n	5bbc <processOnSMS+0xf90>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    5b02:	4b63      	ldr	r3, [pc, #396]	; (5c90 <processOnSMS+0x1064>)
    5b04:	78db      	ldrb	r3, [r3, #3]
    5b06:	2b00      	cmp	r3, #0
    5b08:	d101      	bne.n	5b0e <processOnSMS+0xee2>
    5b0a:	f000 ff8b 	bl	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    5b0e:	2328      	movs	r3, #40	; 0x28
    5b10:	33ff      	adds	r3, #255	; 0xff
    5b12:	2208      	movs	r2, #8
    5b14:	4694      	mov	ip, r2
    5b16:	44bc      	add	ip, r7
    5b18:	4463      	add	r3, ip
    5b1a:	2201      	movs	r2, #1
    5b1c:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
    5b1e:	4b67      	ldr	r3, [pc, #412]	; (5cbc <processOnSMS+0x1090>)
    5b20:	78db      	ldrb	r3, [r3, #3]
    5b22:	2b00      	cmp	r3, #0
    5b24:	d02f      	beq.n	5b86 <processOnSMS+0xf5a>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
    5b26:	4b65      	ldr	r3, [pc, #404]	; (5cbc <processOnSMS+0x1090>)
    5b28:	791b      	ldrb	r3, [r3, #4]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d10e      	bne.n	5b4c <processOnSMS+0xf20>
				{
					response_sms_processed_cmd = false;
    5b2e:	4b55      	ldr	r3, [pc, #340]	; (5c84 <processOnSMS+0x1058>)
    5b30:	2294      	movs	r2, #148	; 0x94
    5b32:	0052      	lsls	r2, r2, #1
    5b34:	4694      	mov	ip, r2
    5b36:	2208      	movs	r2, #8
    5b38:	4690      	mov	r8, r2
    5b3a:	44b8      	add	r8, r7
    5b3c:	44c4      	add	ip, r8
    5b3e:	4463      	add	r3, ip
    5b40:	2200      	movs	r2, #0
    5b42:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
    5b44:	4b5e      	ldr	r3, [pc, #376]	; (5cc0 <processOnSMS+0x1094>)
    5b46:	4798      	blx	r3
    5b48:	f000 ff6c 	bl	6a24 <processOnSMS+0x1df8>
				}
				else
				{
					response_sms_processed_cmd = true;
    5b4c:	4b4d      	ldr	r3, [pc, #308]	; (5c84 <processOnSMS+0x1058>)
    5b4e:	2294      	movs	r2, #148	; 0x94
    5b50:	0052      	lsls	r2, r2, #1
    5b52:	4694      	mov	ip, r2
    5b54:	2208      	movs	r2, #8
    5b56:	4690      	mov	r8, r2
    5b58:	44b8      	add	r8, r7
    5b5a:	44c4      	add	ip, r8
    5b5c:	4463      	add	r3, ip
    5b5e:	2201      	movs	r2, #1
    5b60:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
    5b62:	230c      	movs	r3, #12
    5b64:	2208      	movs	r2, #8
    5b66:	4694      	mov	ip, r2
    5b68:	44bc      	add	ip, r7
    5b6a:	4463      	add	r3, ip
    5b6c:	4a55      	ldr	r2, [pc, #340]	; (5cc4 <processOnSMS+0x1098>)
    5b6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b70:	c313      	stmia	r3!, {r0, r1, r4}
    5b72:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b74:	c313      	stmia	r3!, {r0, r1, r4}
    5b76:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b78:	c313      	stmia	r3!, {r0, r1, r4}
    5b7a:	ca03      	ldmia	r2!, {r0, r1}
    5b7c:	c303      	stmia	r3!, {r0, r1}
    5b7e:	8812      	ldrh	r2, [r2, #0]
    5b80:	801a      	strh	r2, [r3, #0]
    5b82:	f000 ff4f 	bl	6a24 <processOnSMS+0x1df8>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
    5b86:	4b3f      	ldr	r3, [pc, #252]	; (5c84 <processOnSMS+0x1058>)
    5b88:	2294      	movs	r2, #148	; 0x94
    5b8a:	0052      	lsls	r2, r2, #1
    5b8c:	4694      	mov	ip, r2
    5b8e:	2208      	movs	r2, #8
    5b90:	4690      	mov	r8, r2
    5b92:	44b8      	add	r8, r7
    5b94:	44c4      	add	ip, r8
    5b96:	4463      	add	r3, ip
    5b98:	2201      	movs	r2, #1
    5b9a:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
    5b9c:	230c      	movs	r3, #12
    5b9e:	2208      	movs	r2, #8
    5ba0:	4694      	mov	ip, r2
    5ba2:	44bc      	add	ip, r7
    5ba4:	4463      	add	r3, ip
    5ba6:	4a48      	ldr	r2, [pc, #288]	; (5cc8 <processOnSMS+0x109c>)
    5ba8:	ca13      	ldmia	r2!, {r0, r1, r4}
    5baa:	c313      	stmia	r3!, {r0, r1, r4}
    5bac:	ca13      	ldmia	r2!, {r0, r1, r4}
    5bae:	c313      	stmia	r3!, {r0, r1, r4}
    5bb0:	ca13      	ldmia	r2!, {r0, r1, r4}
    5bb2:	c313      	stmia	r3!, {r0, r1, r4}
    5bb4:	7812      	ldrb	r2, [r2, #0]
    5bb6:	701a      	strb	r2, [r3, #0]
    5bb8:	f000 ff34 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
    5bbc:	4a43      	ldr	r2, [pc, #268]	; (5ccc <processOnSMS+0x10a0>)
    5bbe:	68fb      	ldr	r3, [r7, #12]
    5bc0:	0011      	movs	r1, r2
    5bc2:	0018      	movs	r0, r3
    5bc4:	4b2a      	ldr	r3, [pc, #168]	; (5c70 <processOnSMS+0x1044>)
    5bc6:	4798      	blx	r3
    5bc8:	1e03      	subs	r3, r0, #0
    5bca:	d02a      	beq.n	5c22 <processOnSMS+0xff6>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    5bcc:	4b30      	ldr	r3, [pc, #192]	; (5c90 <processOnSMS+0x1064>)
    5bce:	78db      	ldrb	r3, [r3, #3]
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d101      	bne.n	5bd8 <processOnSMS+0xfac>
    5bd4:	f000 ff26 	bl	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    5bd8:	2328      	movs	r3, #40	; 0x28
    5bda:	33ff      	adds	r3, #255	; 0xff
    5bdc:	2208      	movs	r2, #8
    5bde:	4694      	mov	ip, r2
    5be0:	44bc      	add	ip, r7
    5be2:	4463      	add	r3, ip
    5be4:	2201      	movs	r2, #1
    5be6:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
    5be8:	2000      	movs	r0, #0
    5bea:	4b39      	ldr	r3, [pc, #228]	; (5cd0 <processOnSMS+0x10a4>)
    5bec:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5bee:	4b25      	ldr	r3, [pc, #148]	; (5c84 <processOnSMS+0x1058>)
    5bf0:	2294      	movs	r2, #148	; 0x94
    5bf2:	0052      	lsls	r2, r2, #1
    5bf4:	4694      	mov	ip, r2
    5bf6:	2208      	movs	r2, #8
    5bf8:	4690      	mov	r8, r2
    5bfa:	44b8      	add	r8, r7
    5bfc:	44c4      	add	ip, r8
    5bfe:	4463      	add	r3, ip
    5c00:	781b      	ldrb	r3, [r3, #0]
    5c02:	2b00      	cmp	r3, #0
    5c04:	d101      	bne.n	5c0a <processOnSMS+0xfde>
    5c06:	f000 ff0d 	bl	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
    5c0a:	230c      	movs	r3, #12
    5c0c:	2208      	movs	r2, #8
    5c0e:	4694      	mov	ip, r2
    5c10:	44bc      	add	ip, r7
    5c12:	4463      	add	r3, ip
    5c14:	4a2f      	ldr	r2, [pc, #188]	; (5cd4 <processOnSMS+0x10a8>)
    5c16:	ca13      	ldmia	r2!, {r0, r1, r4}
    5c18:	c313      	stmia	r3!, {r0, r1, r4}
    5c1a:	6812      	ldr	r2, [r2, #0]
    5c1c:	601a      	str	r2, [r3, #0]
    5c1e:	f000 ff01 	bl	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
    5c22:	4a2d      	ldr	r2, [pc, #180]	; (5cd8 <processOnSMS+0x10ac>)
    5c24:	68fb      	ldr	r3, [r7, #12]
    5c26:	0011      	movs	r1, r2
    5c28:	0018      	movs	r0, r3
    5c2a:	4b11      	ldr	r3, [pc, #68]	; (5c70 <processOnSMS+0x1044>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d056      	beq.n	5ce0 <processOnSMS+0x10b4>
	{
		incomingSMSProcessed=true;
    5c32:	2328      	movs	r3, #40	; 0x28
    5c34:	33ff      	adds	r3, #255	; 0xff
    5c36:	2208      	movs	r2, #8
    5c38:	4694      	mov	ip, r2
    5c3a:	44bc      	add	ip, r7
    5c3c:	4463      	add	r3, ip
    5c3e:	2201      	movs	r2, #1
    5c40:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
    5c42:	4b10      	ldr	r3, [pc, #64]	; (5c84 <processOnSMS+0x1058>)
    5c44:	2294      	movs	r2, #148	; 0x94
    5c46:	0052      	lsls	r2, r2, #1
    5c48:	4694      	mov	ip, r2
    5c4a:	2208      	movs	r2, #8
    5c4c:	4690      	mov	r8, r2
    5c4e:	44b8      	add	r8, r7
    5c50:	44c4      	add	ip, r8
    5c52:	4463      	add	r3, ip
    5c54:	2201      	movs	r2, #1
    5c56:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
    5c58:	230c      	movs	r3, #12
    5c5a:	2208      	movs	r2, #8
    5c5c:	4694      	mov	ip, r2
    5c5e:	44bc      	add	ip, r7
    5c60:	4463      	add	r3, ip
    5c62:	0018      	movs	r0, r3
    5c64:	4b1d      	ldr	r3, [pc, #116]	; (5cdc <processOnSMS+0x10b0>)
    5c66:	4798      	blx	r3
    5c68:	f000 fedc 	bl	6a24 <processOnSMS+0x1df8>
    5c6c:	00019184 	.word	0x00019184
    5c70:	00003ee1 	.word	0x00003ee1
    5c74:	00017ff7 	.word	0x00017ff7
    5c78:	00017d43 	.word	0x00017d43
    5c7c:	00017c4d 	.word	0x00017c4d
    5c80:	00001569 	.word	0x00001569
    5c84:	fffffeda 	.word	0xfffffeda
    5c88:	0001918c 	.word	0x0001918c
    5c8c:	00019198 	.word	0x00019198
    5c90:	20000628 	.word	0x20000628
    5c94:	200006dc 	.word	0x200006dc
    5c98:	2000065c 	.word	0x2000065c
    5c9c:	000191a0 	.word	0x000191a0
    5ca0:	00017f6d 	.word	0x00017f6d
    5ca4:	000191c4 	.word	0x000191c4
    5ca8:	000014b5 	.word	0x000014b5
    5cac:	000191cc 	.word	0x000191cc
    5cb0:	000191e8 	.word	0x000191e8
    5cb4:	000191f0 	.word	0x000191f0
    5cb8:	00019210 	.word	0x00019210
    5cbc:	20000554 	.word	0x20000554
    5cc0:	00006cf9 	.word	0x00006cf9
    5cc4:	00019218 	.word	0x00019218
    5cc8:	00019248 	.word	0x00019248
    5ccc:	00019270 	.word	0x00019270
    5cd0:	00000be5 	.word	0x00000be5
    5cd4:	00019278 	.word	0x00019278
    5cd8:	00019288 	.word	0x00019288
    5cdc:	00006aed 	.word	0x00006aed
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
    5ce0:	4a87      	ldr	r2, [pc, #540]	; (5f00 <processOnSMS+0x12d4>)
    5ce2:	68fb      	ldr	r3, [r7, #12]
    5ce4:	0011      	movs	r1, r2
    5ce6:	0018      	movs	r0, r3
    5ce8:	4b86      	ldr	r3, [pc, #536]	; (5f04 <processOnSMS+0x12d8>)
    5cea:	4798      	blx	r3
    5cec:	1e03      	subs	r3, r0, #0
    5cee:	d05e      	beq.n	5dae <processOnSMS+0x1182>
    5cf0:	4b85      	ldr	r3, [pc, #532]	; (5f08 <processOnSMS+0x12dc>)
    5cf2:	2294      	movs	r2, #148	; 0x94
    5cf4:	0052      	lsls	r2, r2, #1
    5cf6:	4694      	mov	ip, r2
    5cf8:	2208      	movs	r2, #8
    5cfa:	4690      	mov	r8, r2
    5cfc:	44b8      	add	r8, r7
    5cfe:	44c4      	add	ip, r8
    5d00:	4463      	add	r3, ip
    5d02:	781b      	ldrb	r3, [r3, #0]
    5d04:	2b00      	cmp	r3, #0
    5d06:	d10b      	bne.n	5d20 <processOnSMS+0x10f4>
    5d08:	4b80      	ldr	r3, [pc, #512]	; (5f0c <processOnSMS+0x12e0>)
    5d0a:	2294      	movs	r2, #148	; 0x94
    5d0c:	0052      	lsls	r2, r2, #1
    5d0e:	4694      	mov	ip, r2
    5d10:	2208      	movs	r2, #8
    5d12:	4690      	mov	r8, r2
    5d14:	44b8      	add	r8, r7
    5d16:	44c4      	add	ip, r8
    5d18:	4463      	add	r3, ip
    5d1a:	781b      	ldrb	r3, [r3, #0]
    5d1c:	2b00      	cmp	r3, #0
    5d1e:	d046      	beq.n	5dae <processOnSMS+0x1182>
	{
		incomingSMSProcessed=true;
    5d20:	2328      	movs	r3, #40	; 0x28
    5d22:	33ff      	adds	r3, #255	; 0xff
    5d24:	2208      	movs	r2, #8
    5d26:	4694      	mov	ip, r2
    5d28:	44bc      	add	ip, r7
    5d2a:	4463      	add	r3, ip
    5d2c:	2201      	movs	r2, #1
    5d2e:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
    5d30:	4b77      	ldr	r3, [pc, #476]	; (5f10 <processOnSMS+0x12e4>)
    5d32:	789b      	ldrb	r3, [r3, #2]
    5d34:	2b00      	cmp	r3, #0
    5d36:	d01c      	beq.n	5d72 <processOnSMS+0x1146>
		{
			saveAlterNumberSetting(true);
    5d38:	2001      	movs	r0, #1
    5d3a:	4b76      	ldr	r3, [pc, #472]	; (5f14 <processOnSMS+0x12e8>)
    5d3c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5d3e:	4b76      	ldr	r3, [pc, #472]	; (5f18 <processOnSMS+0x12ec>)
    5d40:	2294      	movs	r2, #148	; 0x94
    5d42:	0052      	lsls	r2, r2, #1
    5d44:	4694      	mov	ip, r2
    5d46:	2208      	movs	r2, #8
    5d48:	4690      	mov	r8, r2
    5d4a:	44b8      	add	r8, r7
    5d4c:	44c4      	add	ip, r8
    5d4e:	4463      	add	r3, ip
    5d50:	781b      	ldrb	r3, [r3, #0]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d101      	bne.n	5d5a <processOnSMS+0x112e>
    5d56:	f000 fe64 	bl	6a22 <processOnSMS+0x1df6>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
    5d5a:	230c      	movs	r3, #12
    5d5c:	2208      	movs	r2, #8
    5d5e:	4694      	mov	ip, r2
    5d60:	44bc      	add	ip, r7
    5d62:	4463      	add	r3, ip
    5d64:	4a6d      	ldr	r2, [pc, #436]	; (5f1c <processOnSMS+0x12f0>)
    5d66:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d68:	c313      	stmia	r3!, {r0, r1, r4}
    5d6a:	ca03      	ldmia	r2!, {r0, r1}
    5d6c:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
    5d6e:	f000 fe58 	bl	6a22 <processOnSMS+0x1df6>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
    5d72:	4b69      	ldr	r3, [pc, #420]	; (5f18 <processOnSMS+0x12ec>)
    5d74:	2294      	movs	r2, #148	; 0x94
    5d76:	0052      	lsls	r2, r2, #1
    5d78:	4694      	mov	ip, r2
    5d7a:	2208      	movs	r2, #8
    5d7c:	4690      	mov	r8, r2
    5d7e:	44b8      	add	r8, r7
    5d80:	44c4      	add	ip, r8
    5d82:	4463      	add	r3, ip
    5d84:	781b      	ldrb	r3, [r3, #0]
    5d86:	2b00      	cmp	r3, #0
    5d88:	d101      	bne.n	5d8e <processOnSMS+0x1162>
    5d8a:	f000 fe4a 	bl	6a22 <processOnSMS+0x1df6>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
    5d8e:	230c      	movs	r3, #12
    5d90:	2208      	movs	r2, #8
    5d92:	4694      	mov	ip, r2
    5d94:	44bc      	add	ip, r7
    5d96:	4463      	add	r3, ip
    5d98:	4a61      	ldr	r2, [pc, #388]	; (5f20 <processOnSMS+0x12f4>)
    5d9a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d9c:	c313      	stmia	r3!, {r0, r1, r4}
    5d9e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5da0:	c313      	stmia	r3!, {r0, r1, r4}
    5da2:	6811      	ldr	r1, [r2, #0]
    5da4:	6019      	str	r1, [r3, #0]
    5da6:	7912      	ldrb	r2, [r2, #4]
    5da8:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
    5daa:	f000 fe3a 	bl	6a22 <processOnSMS+0x1df6>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
    5dae:	4a5d      	ldr	r2, [pc, #372]	; (5f24 <processOnSMS+0x12f8>)
    5db0:	68fb      	ldr	r3, [r7, #12]
    5db2:	0011      	movs	r1, r2
    5db4:	0018      	movs	r0, r3
    5db6:	4b53      	ldr	r3, [pc, #332]	; (5f04 <processOnSMS+0x12d8>)
    5db8:	4798      	blx	r3
    5dba:	1e03      	subs	r3, r0, #0
    5dbc:	d026      	beq.n	5e0c <processOnSMS+0x11e0>
	{
		saveAlterNumberSetting(false);
    5dbe:	2000      	movs	r0, #0
    5dc0:	4b54      	ldr	r3, [pc, #336]	; (5f14 <processOnSMS+0x12e8>)
    5dc2:	4798      	blx	r3
		incomingSMSProcessed=true;
    5dc4:	2328      	movs	r3, #40	; 0x28
    5dc6:	33ff      	adds	r3, #255	; 0xff
    5dc8:	2208      	movs	r2, #8
    5dca:	4694      	mov	ip, r2
    5dcc:	44bc      	add	ip, r7
    5dce:	4463      	add	r3, ip
    5dd0:	2201      	movs	r2, #1
    5dd2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5dd4:	4b50      	ldr	r3, [pc, #320]	; (5f18 <processOnSMS+0x12ec>)
    5dd6:	2294      	movs	r2, #148	; 0x94
    5dd8:	0052      	lsls	r2, r2, #1
    5dda:	4694      	mov	ip, r2
    5ddc:	2208      	movs	r2, #8
    5dde:	4690      	mov	r8, r2
    5de0:	44b8      	add	r8, r7
    5de2:	44c4      	add	ip, r8
    5de4:	4463      	add	r3, ip
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d101      	bne.n	5df0 <processOnSMS+0x11c4>
    5dec:	f000 fe1a 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
    5df0:	230c      	movs	r3, #12
    5df2:	2208      	movs	r2, #8
    5df4:	4694      	mov	ip, r2
    5df6:	44bc      	add	ip, r7
    5df8:	4463      	add	r3, ip
    5dfa:	4a4b      	ldr	r2, [pc, #300]	; (5f28 <processOnSMS+0x12fc>)
    5dfc:	ca13      	ldmia	r2!, {r0, r1, r4}
    5dfe:	c313      	stmia	r3!, {r0, r1, r4}
    5e00:	ca13      	ldmia	r2!, {r0, r1, r4}
    5e02:	c313      	stmia	r3!, {r0, r1, r4}
    5e04:	6812      	ldr	r2, [r2, #0]
    5e06:	601a      	str	r2, [r3, #0]
    5e08:	f000 fe0c 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
    5e0c:	4a47      	ldr	r2, [pc, #284]	; (5f2c <processOnSMS+0x1300>)
    5e0e:	68fb      	ldr	r3, [r7, #12]
    5e10:	0011      	movs	r1, r2
    5e12:	0018      	movs	r0, r3
    5e14:	4b3b      	ldr	r3, [pc, #236]	; (5f04 <processOnSMS+0x12d8>)
    5e16:	4798      	blx	r3
    5e18:	1e03      	subs	r3, r0, #0
    5e1a:	d029      	beq.n	5e70 <processOnSMS+0x1244>
	{
		saveNoCallSettings(false,0,0,0,0);
    5e1c:	2300      	movs	r3, #0
    5e1e:	9300      	str	r3, [sp, #0]
    5e20:	2300      	movs	r3, #0
    5e22:	2200      	movs	r2, #0
    5e24:	2100      	movs	r1, #0
    5e26:	2000      	movs	r0, #0
    5e28:	4c41      	ldr	r4, [pc, #260]	; (5f30 <processOnSMS+0x1304>)
    5e2a:	47a0      	blx	r4
		incomingSMSProcessed=true;
    5e2c:	2328      	movs	r3, #40	; 0x28
    5e2e:	33ff      	adds	r3, #255	; 0xff
    5e30:	2208      	movs	r2, #8
    5e32:	4694      	mov	ip, r2
    5e34:	44bc      	add	ip, r7
    5e36:	4463      	add	r3, ip
    5e38:	2201      	movs	r2, #1
    5e3a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5e3c:	4b36      	ldr	r3, [pc, #216]	; (5f18 <processOnSMS+0x12ec>)
    5e3e:	2294      	movs	r2, #148	; 0x94
    5e40:	0052      	lsls	r2, r2, #1
    5e42:	4694      	mov	ip, r2
    5e44:	2208      	movs	r2, #8
    5e46:	4690      	mov	r8, r2
    5e48:	44b8      	add	r8, r7
    5e4a:	44c4      	add	ip, r8
    5e4c:	4463      	add	r3, ip
    5e4e:	781b      	ldrb	r3, [r3, #0]
    5e50:	2b00      	cmp	r3, #0
    5e52:	d101      	bne.n	5e58 <processOnSMS+0x122c>
    5e54:	f000 fde6 	bl	6a24 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
    5e58:	230c      	movs	r3, #12
    5e5a:	2208      	movs	r2, #8
    5e5c:	4694      	mov	ip, r2
    5e5e:	44bc      	add	ip, r7
    5e60:	4463      	add	r3, ip
    5e62:	4a34      	ldr	r2, [pc, #208]	; (5f34 <processOnSMS+0x1308>)
    5e64:	ca13      	ldmia	r2!, {r0, r1, r4}
    5e66:	c313      	stmia	r3!, {r0, r1, r4}
    5e68:	ca03      	ldmia	r2!, {r0, r1}
    5e6a:	c303      	stmia	r3!, {r0, r1}
    5e6c:	f000 fdda 	bl	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
    5e70:	4a31      	ldr	r2, [pc, #196]	; (5f38 <processOnSMS+0x130c>)
    5e72:	68fb      	ldr	r3, [r7, #12]
    5e74:	0011      	movs	r1, r2
    5e76:	0018      	movs	r0, r3
    5e78:	4b22      	ldr	r3, [pc, #136]	; (5f04 <processOnSMS+0x12d8>)
    5e7a:	4798      	blx	r3
    5e7c:	1e03      	subs	r3, r0, #0
    5e7e:	d067      	beq.n	5f50 <processOnSMS+0x1324>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
    5e80:	230a      	movs	r3, #10
    5e82:	2208      	movs	r2, #8
    5e84:	18ba      	adds	r2, r7, r2
    5e86:	18d2      	adds	r2, r2, r3
    5e88:	230b      	movs	r3, #11
    5e8a:	2108      	movs	r1, #8
    5e8c:	468c      	mov	ip, r1
    5e8e:	44bc      	add	ip, r7
    5e90:	4463      	add	r3, ip
    5e92:	0011      	movs	r1, r2
    5e94:	0018      	movs	r0, r3
    5e96:	4b29      	ldr	r3, [pc, #164]	; (5f3c <processOnSMS+0x1310>)
    5e98:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
    5e9a:	4b29      	ldr	r3, [pc, #164]	; (5f40 <processOnSMS+0x1314>)
    5e9c:	2294      	movs	r2, #148	; 0x94
    5e9e:	0052      	lsls	r2, r2, #1
    5ea0:	4694      	mov	ip, r2
    5ea2:	2208      	movs	r2, #8
    5ea4:	4690      	mov	r8, r2
    5ea6:	44b8      	add	r8, r7
    5ea8:	44c4      	add	ip, r8
    5eaa:	4463      	add	r3, ip
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	001a      	movs	r2, r3
    5eb0:	4b24      	ldr	r3, [pc, #144]	; (5f44 <processOnSMS+0x1318>)
    5eb2:	2194      	movs	r1, #148	; 0x94
    5eb4:	0049      	lsls	r1, r1, #1
    5eb6:	468c      	mov	ip, r1
    5eb8:	2108      	movs	r1, #8
    5eba:	4688      	mov	r8, r1
    5ebc:	44b8      	add	r8, r7
    5ebe:	44c4      	add	ip, r8
    5ec0:	4463      	add	r3, ip
    5ec2:	781b      	ldrb	r3, [r3, #0]
    5ec4:	4920      	ldr	r1, [pc, #128]	; (5f48 <processOnSMS+0x131c>)
    5ec6:	200c      	movs	r0, #12
    5ec8:	2408      	movs	r4, #8
    5eca:	46a4      	mov	ip, r4
    5ecc:	44bc      	add	ip, r7
    5ece:	4460      	add	r0, ip
    5ed0:	4c1e      	ldr	r4, [pc, #120]	; (5f4c <processOnSMS+0x1320>)
    5ed2:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
    5ed4:	2328      	movs	r3, #40	; 0x28
    5ed6:	33ff      	adds	r3, #255	; 0xff
    5ed8:	2208      	movs	r2, #8
    5eda:	4694      	mov	ip, r2
    5edc:	44bc      	add	ip, r7
    5ede:	4463      	add	r3, ip
    5ee0:	2201      	movs	r2, #1
    5ee2:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
    5ee4:	4b0c      	ldr	r3, [pc, #48]	; (5f18 <processOnSMS+0x12ec>)
    5ee6:	2294      	movs	r2, #148	; 0x94
    5ee8:	0052      	lsls	r2, r2, #1
    5eea:	4694      	mov	ip, r2
    5eec:	2208      	movs	r2, #8
    5eee:	4690      	mov	r8, r2
    5ef0:	44b8      	add	r8, r7
    5ef2:	44c4      	add	ip, r8
    5ef4:	4463      	add	r3, ip
    5ef6:	2201      	movs	r2, #1
    5ef8:	701a      	strb	r2, [r3, #0]
    5efa:	f000 fd93 	bl	6a24 <processOnSMS+0x1df8>
    5efe:	46c0      	nop			; (mov r8, r8)
    5f00:	00018fa0 	.word	0x00018fa0
    5f04:	00003ee1 	.word	0x00003ee1
    5f08:	fffffedb 	.word	0xfffffedb
    5f0c:	fffffed9 	.word	0xfffffed9
    5f10:	20000644 	.word	0x20000644
    5f14:	000011e9 	.word	0x000011e9
    5f18:	fffffeda 	.word	0xfffffeda
    5f1c:	00019290 	.word	0x00019290
    5f20:	000192a4 	.word	0x000192a4
    5f24:	000192c4 	.word	0x000192c4
    5f28:	000192cc 	.word	0x000192cc
    5f2c:	000192e8 	.word	0x000192e8
    5f30:	000013d9 	.word	0x000013d9
    5f34:	000192f0 	.word	0x000192f0
    5f38:	00019304 	.word	0x00019304
    5f3c:	00006f31 	.word	0x00006f31
    5f40:	fffffee3 	.word	0xfffffee3
    5f44:	fffffee2 	.word	0xfffffee2
    5f48:	0001930c 	.word	0x0001930c
    5f4c:	00017f6d 	.word	0x00017f6d
	}
	else if (StringstartsWith(received_command,"SETTIME"))
    5f50:	4ada      	ldr	r2, [pc, #872]	; (62bc <processOnSMS+0x1690>)
    5f52:	68fb      	ldr	r3, [r7, #12]
    5f54:	0011      	movs	r1, r2
    5f56:	0018      	movs	r0, r3
    5f58:	4bd9      	ldr	r3, [pc, #868]	; (62c0 <processOnSMS+0x1694>)
    5f5a:	4798      	blx	r3
    5f5c:	1e03      	subs	r3, r0, #0
    5f5e:	d001      	beq.n	5f64 <processOnSMS+0x1338>
    5f60:	f000 fd60 	bl	6a24 <processOnSMS+0x1df8>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
    5f64:	4ad7      	ldr	r2, [pc, #860]	; (62c4 <processOnSMS+0x1698>)
    5f66:	68fb      	ldr	r3, [r7, #12]
    5f68:	0011      	movs	r1, r2
    5f6a:	0018      	movs	r0, r3
    5f6c:	4bd4      	ldr	r3, [pc, #848]	; (62c0 <processOnSMS+0x1694>)
    5f6e:	4798      	blx	r3
    5f70:	1e03      	subs	r3, r0, #0
    5f72:	d100      	bne.n	5f76 <processOnSMS+0x134a>
    5f74:	e13c      	b.n	61f0 <processOnSMS+0x15c4>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
    5f76:	4ad4      	ldr	r2, [pc, #848]	; (62c8 <processOnSMS+0x169c>)
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	0011      	movs	r1, r2
    5f7c:	0018      	movs	r0, r3
    5f7e:	4bd3      	ldr	r3, [pc, #844]	; (62cc <processOnSMS+0x16a0>)
    5f80:	4798      	blx	r3
    5f82:	0003      	movs	r3, r0
    5f84:	2288      	movs	r2, #136	; 0x88
    5f86:	0052      	lsls	r2, r2, #1
    5f88:	2108      	movs	r1, #8
    5f8a:	468c      	mov	ip, r1
    5f8c:	44bc      	add	ip, r7
    5f8e:	4462      	add	r2, ip
    5f90:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
    5f92:	4bcf      	ldr	r3, [pc, #828]	; (62d0 <processOnSMS+0x16a4>)
    5f94:	0019      	movs	r1, r3
    5f96:	2000      	movs	r0, #0
    5f98:	4bcc      	ldr	r3, [pc, #816]	; (62cc <processOnSMS+0x16a0>)
    5f9a:	4798      	blx	r3
    5f9c:	0003      	movs	r3, r0
    5f9e:	2288      	movs	r2, #136	; 0x88
    5fa0:	0052      	lsls	r2, r2, #1
    5fa2:	2108      	movs	r1, #8
    5fa4:	468c      	mov	ip, r1
    5fa6:	44bc      	add	ip, r7
    5fa8:	4462      	add	r2, ip
    5faa:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
    5fac:	2388      	movs	r3, #136	; 0x88
    5fae:	005b      	lsls	r3, r3, #1
    5fb0:	2208      	movs	r2, #8
    5fb2:	4694      	mov	ip, r2
    5fb4:	44bc      	add	ip, r7
    5fb6:	4463      	add	r3, ip
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	781b      	ldrb	r3, [r3, #0]
    5fbc:	0018      	movs	r0, r3
    5fbe:	4bc5      	ldr	r3, [pc, #788]	; (62d4 <processOnSMS+0x16a8>)
    5fc0:	4798      	blx	r3
    5fc2:	0002      	movs	r2, r0
    5fc4:	2310      	movs	r3, #16
    5fc6:	33ff      	adds	r3, #255	; 0xff
    5fc8:	2108      	movs	r1, #8
    5fca:	468c      	mov	ip, r1
    5fcc:	44bc      	add	ip, r7
    5fce:	4463      	add	r3, ip
    5fd0:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
    5fd2:	4bbd      	ldr	r3, [pc, #756]	; (62c8 <processOnSMS+0x169c>)
    5fd4:	0019      	movs	r1, r3
    5fd6:	2000      	movs	r0, #0
    5fd8:	4bbc      	ldr	r3, [pc, #752]	; (62cc <processOnSMS+0x16a0>)
    5fda:	4798      	blx	r3
    5fdc:	0003      	movs	r3, r0
    5fde:	2288      	movs	r2, #136	; 0x88
    5fe0:	0052      	lsls	r2, r2, #1
    5fe2:	2108      	movs	r1, #8
    5fe4:	468c      	mov	ip, r1
    5fe6:	44bc      	add	ip, r7
    5fe8:	4462      	add	r2, ip
    5fea:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
    5fec:	2388      	movs	r3, #136	; 0x88
    5fee:	005b      	lsls	r3, r3, #1
    5ff0:	2208      	movs	r2, #8
    5ff2:	4694      	mov	ip, r2
    5ff4:	44bc      	add	ip, r7
    5ff6:	4463      	add	r3, ip
    5ff8:	681b      	ldr	r3, [r3, #0]
    5ffa:	781b      	ldrb	r3, [r3, #0]
    5ffc:	0018      	movs	r0, r3
    5ffe:	4bb5      	ldr	r3, [pc, #724]	; (62d4 <processOnSMS+0x16a8>)
    6000:	4798      	blx	r3
    6002:	0002      	movs	r2, r0
    6004:	2387      	movs	r3, #135	; 0x87
    6006:	005b      	lsls	r3, r3, #1
    6008:	2108      	movs	r1, #8
    600a:	468c      	mov	ip, r1
    600c:	44bc      	add	ip, r7
    600e:	4463      	add	r3, ip
    6010:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    6012:	4baf      	ldr	r3, [pc, #700]	; (62d0 <processOnSMS+0x16a4>)
    6014:	0019      	movs	r1, r3
    6016:	2000      	movs	r0, #0
    6018:	4bac      	ldr	r3, [pc, #688]	; (62cc <processOnSMS+0x16a0>)
    601a:	4798      	blx	r3
    601c:	0003      	movs	r3, r0
    601e:	2288      	movs	r2, #136	; 0x88
    6020:	0052      	lsls	r2, r2, #1
    6022:	2108      	movs	r1, #8
    6024:	468c      	mov	ip, r1
    6026:	44bc      	add	ip, r7
    6028:	4462      	add	r2, ip
    602a:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
    602c:	2388      	movs	r3, #136	; 0x88
    602e:	005b      	lsls	r3, r3, #1
    6030:	2208      	movs	r2, #8
    6032:	4694      	mov	ip, r2
    6034:	44bc      	add	ip, r7
    6036:	4463      	add	r3, ip
    6038:	681b      	ldr	r3, [r3, #0]
    603a:	781b      	ldrb	r3, [r3, #0]
    603c:	0018      	movs	r0, r3
    603e:	4ba5      	ldr	r3, [pc, #660]	; (62d4 <processOnSMS+0x16a8>)
    6040:	4798      	blx	r3
    6042:	0002      	movs	r2, r0
    6044:	230e      	movs	r3, #14
    6046:	33ff      	adds	r3, #255	; 0xff
    6048:	2108      	movs	r1, #8
    604a:	468c      	mov	ip, r1
    604c:	44bc      	add	ip, r7
    604e:	4463      	add	r3, ip
    6050:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    6052:	4b9f      	ldr	r3, [pc, #636]	; (62d0 <processOnSMS+0x16a4>)
    6054:	0019      	movs	r1, r3
    6056:	2000      	movs	r0, #0
    6058:	4b9c      	ldr	r3, [pc, #624]	; (62cc <processOnSMS+0x16a0>)
    605a:	4798      	blx	r3
    605c:	0003      	movs	r3, r0
    605e:	2288      	movs	r2, #136	; 0x88
    6060:	0052      	lsls	r2, r2, #1
    6062:	2108      	movs	r1, #8
    6064:	468c      	mov	ip, r1
    6066:	44bc      	add	ip, r7
    6068:	4462      	add	r2, ip
    606a:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
    606c:	2388      	movs	r3, #136	; 0x88
    606e:	005b      	lsls	r3, r3, #1
    6070:	2208      	movs	r2, #8
    6072:	4694      	mov	ip, r2
    6074:	44bc      	add	ip, r7
    6076:	4463      	add	r3, ip
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	0018      	movs	r0, r3
    607e:	4b95      	ldr	r3, [pc, #596]	; (62d4 <processOnSMS+0x16a8>)
    6080:	4798      	blx	r3
    6082:	0002      	movs	r2, r0
    6084:	2386      	movs	r3, #134	; 0x86
    6086:	005b      	lsls	r3, r3, #1
    6088:	2108      	movs	r1, #8
    608a:	468c      	mov	ip, r1
    608c:	44bc      	add	ip, r7
    608e:	4463      	add	r3, ip
    6090:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
    6092:	2310      	movs	r3, #16
    6094:	33ff      	adds	r3, #255	; 0xff
    6096:	2208      	movs	r2, #8
    6098:	4694      	mov	ip, r2
    609a:	44bc      	add	ip, r7
    609c:	4463      	add	r3, ip
    609e:	781b      	ldrb	r3, [r3, #0]
    60a0:	2b17      	cmp	r3, #23
    60a2:	d901      	bls.n	60a8 <processOnSMS+0x147c>
    60a4:	f000 fcbe 	bl	6a24 <processOnSMS+0x1df8>
    60a8:	2387      	movs	r3, #135	; 0x87
    60aa:	005b      	lsls	r3, r3, #1
    60ac:	2208      	movs	r2, #8
    60ae:	4694      	mov	ip, r2
    60b0:	44bc      	add	ip, r7
    60b2:	4463      	add	r3, ip
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	2b3b      	cmp	r3, #59	; 0x3b
    60b8:	d901      	bls.n	60be <processOnSMS+0x1492>
    60ba:	f000 fcb3 	bl	6a24 <processOnSMS+0x1df8>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
    60be:	230e      	movs	r3, #14
    60c0:	33ff      	adds	r3, #255	; 0xff
    60c2:	2208      	movs	r2, #8
    60c4:	4694      	mov	ip, r2
    60c6:	44bc      	add	ip, r7
    60c8:	4463      	add	r3, ip
    60ca:	781b      	ldrb	r3, [r3, #0]
    60cc:	2b17      	cmp	r3, #23
    60ce:	d901      	bls.n	60d4 <processOnSMS+0x14a8>
    60d0:	f000 fca8 	bl	6a24 <processOnSMS+0x1df8>
    60d4:	2386      	movs	r3, #134	; 0x86
    60d6:	005b      	lsls	r3, r3, #1
    60d8:	2208      	movs	r2, #8
    60da:	4694      	mov	ip, r2
    60dc:	44bc      	add	ip, r7
    60de:	4463      	add	r3, ip
    60e0:	781b      	ldrb	r3, [r3, #0]
    60e2:	2b3b      	cmp	r3, #59	; 0x3b
    60e4:	d901      	bls.n	60ea <processOnSMS+0x14be>
    60e6:	f000 fc9d 	bl	6a24 <processOnSMS+0x1df8>
			{
				incomingSMSProcessed=true;
    60ea:	2328      	movs	r3, #40	; 0x28
    60ec:	33ff      	adds	r3, #255	; 0xff
    60ee:	2208      	movs	r2, #8
    60f0:	4694      	mov	ip, r2
    60f2:	44bc      	add	ip, r7
    60f4:	4463      	add	r3, ip
    60f6:	2201      	movs	r2, #1
    60f8:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
    60fa:	2310      	movs	r3, #16
    60fc:	33ff      	adds	r3, #255	; 0xff
    60fe:	2208      	movs	r2, #8
    6100:	18ba      	adds	r2, r7, r2
    6102:	18d2      	adds	r2, r2, r3
    6104:	230e      	movs	r3, #14
    6106:	33ff      	adds	r3, #255	; 0xff
    6108:	2108      	movs	r1, #8
    610a:	468c      	mov	ip, r1
    610c:	44bc      	add	ip, r7
    610e:	4463      	add	r3, ip
    6110:	7812      	ldrb	r2, [r2, #0]
    6112:	781b      	ldrb	r3, [r3, #0]
    6114:	429a      	cmp	r2, r3
    6116:	d130      	bne.n	617a <processOnSMS+0x154e>
    6118:	2387      	movs	r3, #135	; 0x87
    611a:	005b      	lsls	r3, r3, #1
    611c:	2208      	movs	r2, #8
    611e:	18ba      	adds	r2, r7, r2
    6120:	18d2      	adds	r2, r2, r3
    6122:	2386      	movs	r3, #134	; 0x86
    6124:	005b      	lsls	r3, r3, #1
    6126:	2108      	movs	r1, #8
    6128:	468c      	mov	ip, r1
    612a:	44bc      	add	ip, r7
    612c:	4463      	add	r3, ip
    612e:	7812      	ldrb	r2, [r2, #0]
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	429a      	cmp	r2, r3
    6134:	d121      	bne.n	617a <processOnSMS+0x154e>
				{
					saveNoCallSettings(false,0,0,0,0);
    6136:	2300      	movs	r3, #0
    6138:	9300      	str	r3, [sp, #0]
    613a:	2300      	movs	r3, #0
    613c:	2200      	movs	r2, #0
    613e:	2100      	movs	r1, #0
    6140:	2000      	movs	r0, #0
    6142:	4c65      	ldr	r4, [pc, #404]	; (62d8 <processOnSMS+0x16ac>)
    6144:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    6146:	4b65      	ldr	r3, [pc, #404]	; (62dc <processOnSMS+0x16b0>)
    6148:	2294      	movs	r2, #148	; 0x94
    614a:	0052      	lsls	r2, r2, #1
    614c:	4694      	mov	ip, r2
    614e:	2208      	movs	r2, #8
    6150:	4690      	mov	r8, r2
    6152:	44b8      	add	r8, r7
    6154:	44c4      	add	ip, r8
    6156:	4463      	add	r3, ip
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	2b00      	cmp	r3, #0
    615c:	d101      	bne.n	6162 <processOnSMS+0x1536>
    615e:	f000 fc61 	bl	6a24 <processOnSMS+0x1df8>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
    6162:	230c      	movs	r3, #12
    6164:	2208      	movs	r2, #8
    6166:	4694      	mov	ip, r2
    6168:	44bc      	add	ip, r7
    616a:	4463      	add	r3, ip
    616c:	4a5c      	ldr	r2, [pc, #368]	; (62e0 <processOnSMS+0x16b4>)
    616e:	ca13      	ldmia	r2!, {r0, r1, r4}
    6170:	c313      	stmia	r3!, {r0, r1, r4}
    6172:	ca03      	ldmia	r2!, {r0, r1}
    6174:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
    6176:	f000 fc55 	bl	6a24 <processOnSMS+0x1df8>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
    617a:	230e      	movs	r3, #14
    617c:	33ff      	adds	r3, #255	; 0xff
    617e:	2208      	movs	r2, #8
    6180:	4694      	mov	ip, r2
    6182:	44bc      	add	ip, r7
    6184:	4463      	add	r3, ip
    6186:	7818      	ldrb	r0, [r3, #0]
    6188:	2387      	movs	r3, #135	; 0x87
    618a:	005b      	lsls	r3, r3, #1
    618c:	2208      	movs	r2, #8
    618e:	4694      	mov	ip, r2
    6190:	44bc      	add	ip, r7
    6192:	4463      	add	r3, ip
    6194:	781a      	ldrb	r2, [r3, #0]
    6196:	2310      	movs	r3, #16
    6198:	33ff      	adds	r3, #255	; 0xff
    619a:	2108      	movs	r1, #8
    619c:	468c      	mov	ip, r1
    619e:	44bc      	add	ip, r7
    61a0:	4463      	add	r3, ip
    61a2:	7819      	ldrb	r1, [r3, #0]
    61a4:	2386      	movs	r3, #134	; 0x86
    61a6:	005b      	lsls	r3, r3, #1
    61a8:	2408      	movs	r4, #8
    61aa:	46a4      	mov	ip, r4
    61ac:	44bc      	add	ip, r7
    61ae:	4463      	add	r3, ip
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	9300      	str	r3, [sp, #0]
    61b4:	0003      	movs	r3, r0
    61b6:	2001      	movs	r0, #1
    61b8:	4c47      	ldr	r4, [pc, #284]	; (62d8 <processOnSMS+0x16ac>)
    61ba:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    61bc:	4b47      	ldr	r3, [pc, #284]	; (62dc <processOnSMS+0x16b0>)
    61be:	2294      	movs	r2, #148	; 0x94
    61c0:	0052      	lsls	r2, r2, #1
    61c2:	4694      	mov	ip, r2
    61c4:	2208      	movs	r2, #8
    61c6:	4690      	mov	r8, r2
    61c8:	44b8      	add	r8, r7
    61ca:	44c4      	add	ip, r8
    61cc:	4463      	add	r3, ip
    61ce:	781b      	ldrb	r3, [r3, #0]
    61d0:	2b00      	cmp	r3, #0
    61d2:	d101      	bne.n	61d8 <processOnSMS+0x15ac>
    61d4:	f000 fc26 	bl	6a24 <processOnSMS+0x1df8>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
    61d8:	230c      	movs	r3, #12
    61da:	2208      	movs	r2, #8
    61dc:	4694      	mov	ip, r2
    61de:	44bc      	add	ip, r7
    61e0:	4463      	add	r3, ip
    61e2:	4a40      	ldr	r2, [pc, #256]	; (62e4 <processOnSMS+0x16b8>)
    61e4:	ca13      	ldmia	r2!, {r0, r1, r4}
    61e6:	c313      	stmia	r3!, {r0, r1, r4}
    61e8:	ca03      	ldmia	r2!, {r0, r1}
    61ea:	c303      	stmia	r3!, {r0, r1}
    61ec:	f000 fc1a 	bl	6a24 <processOnSMS+0x1df8>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
    61f0:	4a3d      	ldr	r2, [pc, #244]	; (62e8 <processOnSMS+0x16bc>)
    61f2:	68fb      	ldr	r3, [r7, #12]
    61f4:	0011      	movs	r1, r2
    61f6:	0018      	movs	r0, r3
    61f8:	4b31      	ldr	r3, [pc, #196]	; (62c0 <processOnSMS+0x1694>)
    61fa:	4798      	blx	r3
    61fc:	1e03      	subs	r3, r0, #0
    61fe:	d100      	bne.n	6202 <processOnSMS+0x15d6>
    6200:	e07e      	b.n	6300 <processOnSMS+0x16d4>
	{
		memmove(received_command,received_command+5,strlen(received_command));
    6202:	68fb      	ldr	r3, [r7, #12]
    6204:	1d5c      	adds	r4, r3, #5
    6206:	68fb      	ldr	r3, [r7, #12]
    6208:	0018      	movs	r0, r3
    620a:	4b38      	ldr	r3, [pc, #224]	; (62ec <processOnSMS+0x16c0>)
    620c:	4798      	blx	r3
    620e:	0002      	movs	r2, r0
    6210:	68fb      	ldr	r3, [r7, #12]
    6212:	0021      	movs	r1, r4
    6214:	0018      	movs	r0, r3
    6216:	4b36      	ldr	r3, [pc, #216]	; (62f0 <processOnSMS+0x16c4>)
    6218:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
    621a:	68fb      	ldr	r3, [r7, #12]
    621c:	0018      	movs	r0, r3
    621e:	4b2d      	ldr	r3, [pc, #180]	; (62d4 <processOnSMS+0x16a8>)
    6220:	4798      	blx	r3
    6222:	0002      	movs	r2, r0
    6224:	2391      	movs	r3, #145	; 0x91
    6226:	005b      	lsls	r3, r3, #1
    6228:	2108      	movs	r1, #8
    622a:	468c      	mov	ip, r1
    622c:	44bc      	add	ip, r7
    622e:	4463      	add	r3, ip
    6230:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
    6232:	2391      	movs	r3, #145	; 0x91
    6234:	005b      	lsls	r3, r3, #1
    6236:	2208      	movs	r2, #8
    6238:	4694      	mov	ip, r2
    623a:	44bc      	add	ip, r7
    623c:	4463      	add	r3, ip
    623e:	881b      	ldrh	r3, [r3, #0]
    6240:	2b05      	cmp	r3, #5
    6242:	d907      	bls.n	6254 <processOnSMS+0x1628>
    6244:	2391      	movs	r3, #145	; 0x91
    6246:	005b      	lsls	r3, r3, #1
    6248:	2208      	movs	r2, #8
    624a:	4694      	mov	ip, r2
    624c:	44bc      	add	ip, r7
    624e:	4463      	add	r3, ip
    6250:	2205      	movs	r2, #5
    6252:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
    6254:	2391      	movs	r3, #145	; 0x91
    6256:	005b      	lsls	r3, r3, #1
    6258:	2208      	movs	r2, #8
    625a:	4694      	mov	ip, r2
    625c:	44bc      	add	ip, r7
    625e:	4463      	add	r3, ip
    6260:	881b      	ldrh	r3, [r3, #0]
    6262:	b2db      	uxtb	r3, r3
    6264:	0018      	movs	r0, r3
    6266:	4b23      	ldr	r3, [pc, #140]	; (62f4 <processOnSMS+0x16c8>)
    6268:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    626a:	2328      	movs	r3, #40	; 0x28
    626c:	33ff      	adds	r3, #255	; 0xff
    626e:	2208      	movs	r2, #8
    6270:	4694      	mov	ip, r2
    6272:	44bc      	add	ip, r7
    6274:	4463      	add	r3, ip
    6276:	2201      	movs	r2, #1
    6278:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
    627a:	4b18      	ldr	r3, [pc, #96]	; (62dc <processOnSMS+0x16b0>)
    627c:	2294      	movs	r2, #148	; 0x94
    627e:	0052      	lsls	r2, r2, #1
    6280:	4694      	mov	ip, r2
    6282:	2208      	movs	r2, #8
    6284:	4690      	mov	r8, r2
    6286:	44b8      	add	r8, r7
    6288:	44c4      	add	ip, r8
    628a:	4463      	add	r3, ip
    628c:	781b      	ldrb	r3, [r3, #0]
    628e:	2b00      	cmp	r3, #0
    6290:	d101      	bne.n	6296 <processOnSMS+0x166a>
    6292:	f000 fbc7 	bl	6a24 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
    6296:	2391      	movs	r3, #145	; 0x91
    6298:	005b      	lsls	r3, r3, #1
    629a:	2208      	movs	r2, #8
    629c:	4694      	mov	ip, r2
    629e:	44bc      	add	ip, r7
    62a0:	4463      	add	r3, ip
    62a2:	881a      	ldrh	r2, [r3, #0]
    62a4:	4914      	ldr	r1, [pc, #80]	; (62f8 <processOnSMS+0x16cc>)
    62a6:	230c      	movs	r3, #12
    62a8:	2008      	movs	r0, #8
    62aa:	4684      	mov	ip, r0
    62ac:	44bc      	add	ip, r7
    62ae:	4463      	add	r3, ip
    62b0:	0018      	movs	r0, r3
    62b2:	4b12      	ldr	r3, [pc, #72]	; (62fc <processOnSMS+0x16d0>)
    62b4:	4798      	blx	r3
    62b6:	f000 fbb5 	bl	6a24 <processOnSMS+0x1df8>
    62ba:	46c0      	nop			; (mov r8, r8)
    62bc:	0001931c 	.word	0x0001931c
    62c0:	00003ee1 	.word	0x00003ee1
    62c4:	00019324 	.word	0x00019324
    62c8:	0001932c 	.word	0x0001932c
    62cc:	00018059 	.word	0x00018059
    62d0:	00019330 	.word	0x00019330
    62d4:	00017c4d 	.word	0x00017c4d
    62d8:	000013d9 	.word	0x000013d9
    62dc:	fffffeda 	.word	0xfffffeda
    62e0:	000192f0 	.word	0x000192f0
    62e4:	00019334 	.word	0x00019334
    62e8:	00019348 	.word	0x00019348
    62ec:	00017ff7 	.word	0x00017ff7
    62f0:	00017d43 	.word	0x00017d43
    62f4:	00001945 	.word	0x00001945
    62f8:	00019350 	.word	0x00019350
    62fc:	00017f6d 	.word	0x00017f6d
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
    6300:	4aa6      	ldr	r2, [pc, #664]	; (659c <processOnSMS+0x1970>)
    6302:	68fb      	ldr	r3, [r7, #12]
    6304:	0011      	movs	r1, r2
    6306:	0018      	movs	r0, r3
    6308:	4ba5      	ldr	r3, [pc, #660]	; (65a0 <processOnSMS+0x1974>)
    630a:	4798      	blx	r3
    630c:	1e03      	subs	r3, r0, #0
    630e:	d06d      	beq.n	63ec <processOnSMS+0x17c0>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    6310:	68fb      	ldr	r3, [r7, #12]
    6312:	3308      	adds	r3, #8
    6314:	001c      	movs	r4, r3
    6316:	68fb      	ldr	r3, [r7, #12]
    6318:	0018      	movs	r0, r3
    631a:	4ba2      	ldr	r3, [pc, #648]	; (65a4 <processOnSMS+0x1978>)
    631c:	4798      	blx	r3
    631e:	0002      	movs	r2, r0
    6320:	68fb      	ldr	r3, [r7, #12]
    6322:	0021      	movs	r1, r4
    6324:	0018      	movs	r0, r3
    6326:	4ba0      	ldr	r3, [pc, #640]	; (65a8 <processOnSMS+0x197c>)
    6328:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
    632a:	68fb      	ldr	r3, [r7, #12]
    632c:	0018      	movs	r0, r3
    632e:	4b9f      	ldr	r3, [pc, #636]	; (65ac <processOnSMS+0x1980>)
    6330:	4798      	blx	r3
    6332:	0002      	movs	r2, r0
    6334:	2390      	movs	r3, #144	; 0x90
    6336:	005b      	lsls	r3, r3, #1
    6338:	2108      	movs	r1, #8
    633a:	468c      	mov	ip, r1
    633c:	44bc      	add	ip, r7
    633e:	4463      	add	r3, ip
    6340:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
    6342:	2390      	movs	r3, #144	; 0x90
    6344:	005b      	lsls	r3, r3, #1
    6346:	2208      	movs	r2, #8
    6348:	4694      	mov	ip, r2
    634a:	44bc      	add	ip, r7
    634c:	4463      	add	r3, ip
    634e:	881b      	ldrh	r3, [r3, #0]
    6350:	2b01      	cmp	r3, #1
    6352:	d807      	bhi.n	6364 <processOnSMS+0x1738>
		{
			STARTIME = 2;
    6354:	2390      	movs	r3, #144	; 0x90
    6356:	005b      	lsls	r3, r3, #1
    6358:	2208      	movs	r2, #8
    635a:	4694      	mov	ip, r2
    635c:	44bc      	add	ip, r7
    635e:	4463      	add	r3, ip
    6360:	2202      	movs	r2, #2
    6362:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
    6364:	2390      	movs	r3, #144	; 0x90
    6366:	005b      	lsls	r3, r3, #1
    6368:	2208      	movs	r2, #8
    636a:	4694      	mov	ip, r2
    636c:	44bc      	add	ip, r7
    636e:	4463      	add	r3, ip
    6370:	881a      	ldrh	r2, [r3, #0]
    6372:	2396      	movs	r3, #150	; 0x96
    6374:	00db      	lsls	r3, r3, #3
    6376:	429a      	cmp	r2, r3
    6378:	d908      	bls.n	638c <processOnSMS+0x1760>
		{
			STARTIME = 1200;
    637a:	2390      	movs	r3, #144	; 0x90
    637c:	005b      	lsls	r3, r3, #1
    637e:	2208      	movs	r2, #8
    6380:	4694      	mov	ip, r2
    6382:	44bc      	add	ip, r7
    6384:	4463      	add	r3, ip
    6386:	2296      	movs	r2, #150	; 0x96
    6388:	00d2      	lsls	r2, r2, #3
    638a:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
    638c:	2390      	movs	r3, #144	; 0x90
    638e:	005b      	lsls	r3, r3, #1
    6390:	2208      	movs	r2, #8
    6392:	4694      	mov	ip, r2
    6394:	44bc      	add	ip, r7
    6396:	4463      	add	r3, ip
    6398:	881b      	ldrh	r3, [r3, #0]
    639a:	0018      	movs	r0, r3
    639c:	4b84      	ldr	r3, [pc, #528]	; (65b0 <processOnSMS+0x1984>)
    639e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    63a0:	2328      	movs	r3, #40	; 0x28
    63a2:	33ff      	adds	r3, #255	; 0xff
    63a4:	2208      	movs	r2, #8
    63a6:	4694      	mov	ip, r2
    63a8:	44bc      	add	ip, r7
    63aa:	4463      	add	r3, ip
    63ac:	2201      	movs	r2, #1
    63ae:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    63b0:	4b80      	ldr	r3, [pc, #512]	; (65b4 <processOnSMS+0x1988>)
    63b2:	2294      	movs	r2, #148	; 0x94
    63b4:	0052      	lsls	r2, r2, #1
    63b6:	4694      	mov	ip, r2
    63b8:	2208      	movs	r2, #8
    63ba:	4690      	mov	r8, r2
    63bc:	44b8      	add	r8, r7
    63be:	44c4      	add	ip, r8
    63c0:	4463      	add	r3, ip
    63c2:	781b      	ldrb	r3, [r3, #0]
    63c4:	2b00      	cmp	r3, #0
    63c6:	d100      	bne.n	63ca <processOnSMS+0x179e>
    63c8:	e32c      	b.n	6a24 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
    63ca:	2390      	movs	r3, #144	; 0x90
    63cc:	005b      	lsls	r3, r3, #1
    63ce:	2208      	movs	r2, #8
    63d0:	4694      	mov	ip, r2
    63d2:	44bc      	add	ip, r7
    63d4:	4463      	add	r3, ip
    63d6:	881a      	ldrh	r2, [r3, #0]
    63d8:	4977      	ldr	r1, [pc, #476]	; (65b8 <processOnSMS+0x198c>)
    63da:	230c      	movs	r3, #12
    63dc:	2008      	movs	r0, #8
    63de:	4684      	mov	ip, r0
    63e0:	44bc      	add	ip, r7
    63e2:	4463      	add	r3, ip
    63e4:	0018      	movs	r0, r3
    63e6:	4b75      	ldr	r3, [pc, #468]	; (65bc <processOnSMS+0x1990>)
    63e8:	4798      	blx	r3
    63ea:	e31b      	b.n	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
    63ec:	4a74      	ldr	r2, [pc, #464]	; (65c0 <processOnSMS+0x1994>)
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	0011      	movs	r1, r2
    63f2:	0018      	movs	r0, r3
    63f4:	4b6a      	ldr	r3, [pc, #424]	; (65a0 <processOnSMS+0x1974>)
    63f6:	4798      	blx	r3
    63f8:	1e03      	subs	r3, r0, #0
    63fa:	d06d      	beq.n	64d8 <processOnSMS+0x18ac>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    63fc:	68fb      	ldr	r3, [r7, #12]
    63fe:	3308      	adds	r3, #8
    6400:	001c      	movs	r4, r3
    6402:	68fb      	ldr	r3, [r7, #12]
    6404:	0018      	movs	r0, r3
    6406:	4b67      	ldr	r3, [pc, #412]	; (65a4 <processOnSMS+0x1978>)
    6408:	4798      	blx	r3
    640a:	0002      	movs	r2, r0
    640c:	68fb      	ldr	r3, [r7, #12]
    640e:	0021      	movs	r1, r4
    6410:	0018      	movs	r0, r3
    6412:	4b65      	ldr	r3, [pc, #404]	; (65a8 <processOnSMS+0x197c>)
    6414:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
    6416:	68fb      	ldr	r3, [r7, #12]
    6418:	0018      	movs	r0, r3
    641a:	4b64      	ldr	r3, [pc, #400]	; (65ac <processOnSMS+0x1980>)
    641c:	4798      	blx	r3
    641e:	0002      	movs	r2, r0
    6420:	238f      	movs	r3, #143	; 0x8f
    6422:	005b      	lsls	r3, r3, #1
    6424:	2108      	movs	r1, #8
    6426:	468c      	mov	ip, r1
    6428:	44bc      	add	ip, r7
    642a:	4463      	add	r3, ip
    642c:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
    642e:	238f      	movs	r3, #143	; 0x8f
    6430:	005b      	lsls	r3, r3, #1
    6432:	2208      	movs	r2, #8
    6434:	4694      	mov	ip, r2
    6436:	44bc      	add	ip, r7
    6438:	4463      	add	r3, ip
    643a:	881b      	ldrh	r3, [r3, #0]
    643c:	2b31      	cmp	r3, #49	; 0x31
    643e:	d807      	bhi.n	6450 <processOnSMS+0x1824>
		{
			AUTOTIME = 50;
    6440:	238f      	movs	r3, #143	; 0x8f
    6442:	005b      	lsls	r3, r3, #1
    6444:	2208      	movs	r2, #8
    6446:	4694      	mov	ip, r2
    6448:	44bc      	add	ip, r7
    644a:	4463      	add	r3, ip
    644c:	2232      	movs	r2, #50	; 0x32
    644e:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
    6450:	238f      	movs	r3, #143	; 0x8f
    6452:	005b      	lsls	r3, r3, #1
    6454:	2208      	movs	r2, #8
    6456:	4694      	mov	ip, r2
    6458:	44bc      	add	ip, r7
    645a:	4463      	add	r3, ip
    645c:	881a      	ldrh	r2, [r3, #0]
    645e:	23e1      	movs	r3, #225	; 0xe1
    6460:	01db      	lsls	r3, r3, #7
    6462:	429a      	cmp	r2, r3
    6464:	d908      	bls.n	6478 <processOnSMS+0x184c>
		{
			AUTOTIME = 28800;
    6466:	238f      	movs	r3, #143	; 0x8f
    6468:	005b      	lsls	r3, r3, #1
    646a:	2208      	movs	r2, #8
    646c:	4694      	mov	ip, r2
    646e:	44bc      	add	ip, r7
    6470:	4463      	add	r3, ip
    6472:	22e1      	movs	r2, #225	; 0xe1
    6474:	01d2      	lsls	r2, r2, #7
    6476:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
    6478:	238f      	movs	r3, #143	; 0x8f
    647a:	005b      	lsls	r3, r3, #1
    647c:	2208      	movs	r2, #8
    647e:	4694      	mov	ip, r2
    6480:	44bc      	add	ip, r7
    6482:	4463      	add	r3, ip
    6484:	881b      	ldrh	r3, [r3, #0]
    6486:	0018      	movs	r0, r3
    6488:	4b4e      	ldr	r3, [pc, #312]	; (65c4 <processOnSMS+0x1998>)
    648a:	4798      	blx	r3
		incomingSMSProcessed=true;
    648c:	2328      	movs	r3, #40	; 0x28
    648e:	33ff      	adds	r3, #255	; 0xff
    6490:	2208      	movs	r2, #8
    6492:	4694      	mov	ip, r2
    6494:	44bc      	add	ip, r7
    6496:	4463      	add	r3, ip
    6498:	2201      	movs	r2, #1
    649a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    649c:	4b45      	ldr	r3, [pc, #276]	; (65b4 <processOnSMS+0x1988>)
    649e:	2294      	movs	r2, #148	; 0x94
    64a0:	0052      	lsls	r2, r2, #1
    64a2:	4694      	mov	ip, r2
    64a4:	2208      	movs	r2, #8
    64a6:	4690      	mov	r8, r2
    64a8:	44b8      	add	r8, r7
    64aa:	44c4      	add	ip, r8
    64ac:	4463      	add	r3, ip
    64ae:	781b      	ldrb	r3, [r3, #0]
    64b0:	2b00      	cmp	r3, #0
    64b2:	d100      	bne.n	64b6 <processOnSMS+0x188a>
    64b4:	e2b6      	b.n	6a24 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
    64b6:	238f      	movs	r3, #143	; 0x8f
    64b8:	005b      	lsls	r3, r3, #1
    64ba:	2208      	movs	r2, #8
    64bc:	4694      	mov	ip, r2
    64be:	44bc      	add	ip, r7
    64c0:	4463      	add	r3, ip
    64c2:	881a      	ldrh	r2, [r3, #0]
    64c4:	4940      	ldr	r1, [pc, #256]	; (65c8 <processOnSMS+0x199c>)
    64c6:	230c      	movs	r3, #12
    64c8:	2008      	movs	r0, #8
    64ca:	4684      	mov	ip, r0
    64cc:	44bc      	add	ip, r7
    64ce:	4463      	add	r3, ip
    64d0:	0018      	movs	r0, r3
    64d2:	4b3a      	ldr	r3, [pc, #232]	; (65bc <processOnSMS+0x1990>)
    64d4:	4798      	blx	r3
    64d6:	e2a5      	b.n	6a24 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
    64d8:	4a3c      	ldr	r2, [pc, #240]	; (65cc <processOnSMS+0x19a0>)
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	0011      	movs	r1, r2
    64de:	0018      	movs	r0, r3
    64e0:	4b2f      	ldr	r3, [pc, #188]	; (65a0 <processOnSMS+0x1974>)
    64e2:	4798      	blx	r3
    64e4:	1e03      	subs	r3, r0, #0
    64e6:	d000      	beq.n	64ea <processOnSMS+0x18be>
    64e8:	e29c      	b.n	6a24 <processOnSMS+0x1df8>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
    64ea:	4a39      	ldr	r2, [pc, #228]	; (65d0 <processOnSMS+0x19a4>)
    64ec:	68fb      	ldr	r3, [r7, #12]
    64ee:	0011      	movs	r1, r2
    64f0:	0018      	movs	r0, r3
    64f2:	4b2b      	ldr	r3, [pc, #172]	; (65a0 <processOnSMS+0x1974>)
    64f4:	4798      	blx	r3
    64f6:	1e03      	subs	r3, r0, #0
    64f8:	d023      	beq.n	6542 <processOnSMS+0x1916>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    64fa:	68fb      	ldr	r3, [r7, #12]
    64fc:	1cdc      	adds	r4, r3, #3
    64fe:	68fb      	ldr	r3, [r7, #12]
    6500:	0018      	movs	r0, r3
    6502:	4b28      	ldr	r3, [pc, #160]	; (65a4 <processOnSMS+0x1978>)
    6504:	4798      	blx	r3
    6506:	0002      	movs	r2, r0
    6508:	68fb      	ldr	r3, [r7, #12]
    650a:	0021      	movs	r1, r4
    650c:	0018      	movs	r0, r3
    650e:	4b26      	ldr	r3, [pc, #152]	; (65a8 <processOnSMS+0x197c>)
    6510:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
    6512:	68fb      	ldr	r3, [r7, #12]
    6514:	0018      	movs	r0, r3
    6516:	4b2f      	ldr	r3, [pc, #188]	; (65d4 <processOnSMS+0x19a8>)
    6518:	4798      	blx	r3
    651a:	1e03      	subs	r3, r0, #0
    651c:	d100      	bne.n	6520 <processOnSMS+0x18f4>
    651e:	e281      	b.n	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    6520:	2328      	movs	r3, #40	; 0x28
    6522:	33ff      	adds	r3, #255	; 0xff
    6524:	2208      	movs	r2, #8
    6526:	4694      	mov	ip, r2
    6528:	44bc      	add	ip, r7
    652a:	4463      	add	r3, ip
    652c:	2201      	movs	r2, #1
    652e:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
    6530:	230c      	movs	r3, #12
    6532:	2208      	movs	r2, #8
    6534:	4694      	mov	ip, r2
    6536:	44bc      	add	ip, r7
    6538:	4463      	add	r3, ip
    653a:	4a27      	ldr	r2, [pc, #156]	; (65d8 <processOnSMS+0x19ac>)
    653c:	ca13      	ldmia	r2!, {r0, r1, r4}
    653e:	c313      	stmia	r3!, {r0, r1, r4}
    6540:	e270      	b.n	6a24 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
    6542:	4a26      	ldr	r2, [pc, #152]	; (65dc <processOnSMS+0x19b0>)
    6544:	68fb      	ldr	r3, [r7, #12]
    6546:	0011      	movs	r1, r2
    6548:	0018      	movs	r0, r3
    654a:	4b15      	ldr	r3, [pc, #84]	; (65a0 <processOnSMS+0x1974>)
    654c:	4798      	blx	r3
    654e:	1e03      	subs	r3, r0, #0
    6550:	d04a      	beq.n	65e8 <processOnSMS+0x19bc>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    6552:	68fb      	ldr	r3, [r7, #12]
    6554:	1cdc      	adds	r4, r3, #3
    6556:	68fb      	ldr	r3, [r7, #12]
    6558:	0018      	movs	r0, r3
    655a:	4b12      	ldr	r3, [pc, #72]	; (65a4 <processOnSMS+0x1978>)
    655c:	4798      	blx	r3
    655e:	0002      	movs	r2, r0
    6560:	68fb      	ldr	r3, [r7, #12]
    6562:	0021      	movs	r1, r4
    6564:	0018      	movs	r0, r3
    6566:	4b10      	ldr	r3, [pc, #64]	; (65a8 <processOnSMS+0x197c>)
    6568:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
    656a:	68fb      	ldr	r3, [r7, #12]
    656c:	0018      	movs	r0, r3
    656e:	4b1c      	ldr	r3, [pc, #112]	; (65e0 <processOnSMS+0x19b4>)
    6570:	4798      	blx	r3
    6572:	1e03      	subs	r3, r0, #0
    6574:	d100      	bne.n	6578 <processOnSMS+0x194c>
    6576:	e255      	b.n	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    6578:	2328      	movs	r3, #40	; 0x28
    657a:	33ff      	adds	r3, #255	; 0xff
    657c:	2208      	movs	r2, #8
    657e:	4694      	mov	ip, r2
    6580:	44bc      	add	ip, r7
    6582:	4463      	add	r3, ip
    6584:	2201      	movs	r2, #1
    6586:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
    6588:	230c      	movs	r3, #12
    658a:	2208      	movs	r2, #8
    658c:	4694      	mov	ip, r2
    658e:	44bc      	add	ip, r7
    6590:	4463      	add	r3, ip
    6592:	4a14      	ldr	r2, [pc, #80]	; (65e4 <processOnSMS+0x19b8>)
    6594:	ca13      	ldmia	r2!, {r0, r1, r4}
    6596:	c313      	stmia	r3!, {r0, r1, r4}
    6598:	e244      	b.n	6a24 <processOnSMS+0x1df8>
    659a:	46c0      	nop			; (mov r8, r8)
    659c:	00019368 	.word	0x00019368
    65a0:	00003ee1 	.word	0x00003ee1
    65a4:	00017ff7 	.word	0x00017ff7
    65a8:	00017d43 	.word	0x00017d43
    65ac:	00017c4d 	.word	0x00017c4d
    65b0:	000018f9 	.word	0x000018f9
    65b4:	fffffeda 	.word	0xfffffeda
    65b8:	00019374 	.word	0x00019374
    65bc:	00017f6d 	.word	0x00017f6d
    65c0:	0001938c 	.word	0x0001938c
    65c4:	000012f5 	.word	0x000012f5
    65c8:	00019398 	.word	0x00019398
    65cc:	000193b0 	.word	0x000193b0
    65d0:	000193b4 	.word	0x000193b4
    65d4:	00001ac5 	.word	0x00001ac5
    65d8:	000193b8 	.word	0x000193b8
    65dc:	000193c4 	.word	0x000193c4
    65e0:	00001b71 	.word	0x00001b71
    65e4:	000193c8 	.word	0x000193c8
		}
	}
	else if (StringstartsWith(received_command,"M+"))
    65e8:	4adb      	ldr	r2, [pc, #876]	; (6958 <processOnSMS+0x1d2c>)
    65ea:	68fb      	ldr	r3, [r7, #12]
    65ec:	0011      	movs	r1, r2
    65ee:	0018      	movs	r0, r3
    65f0:	4bda      	ldr	r3, [pc, #872]	; (695c <processOnSMS+0x1d30>)
    65f2:	4798      	blx	r3
    65f4:	1e03      	subs	r3, r0, #0
    65f6:	d100      	bne.n	65fa <processOnSMS+0x19ce>
    65f8:	e091      	b.n	671e <processOnSMS+0x1af2>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    65fa:	68fb      	ldr	r3, [r7, #12]
    65fc:	1c9c      	adds	r4, r3, #2
    65fe:	68fb      	ldr	r3, [r7, #12]
    6600:	0018      	movs	r0, r3
    6602:	4bd7      	ldr	r3, [pc, #860]	; (6960 <processOnSMS+0x1d34>)
    6604:	4798      	blx	r3
    6606:	0002      	movs	r2, r0
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	0021      	movs	r1, r4
    660c:	0018      	movs	r0, r3
    660e:	4bd5      	ldr	r3, [pc, #852]	; (6964 <processOnSMS+0x1d38>)
    6610:	4798      	blx	r3
		bool result = addNumber(received_command);
    6612:	230c      	movs	r3, #12
    6614:	33ff      	adds	r3, #255	; 0xff
    6616:	2208      	movs	r2, #8
    6618:	18ba      	adds	r2, r7, r2
    661a:	18d4      	adds	r4, r2, r3
    661c:	68fb      	ldr	r3, [r7, #12]
    661e:	0018      	movs	r0, r3
    6620:	4bd1      	ldr	r3, [pc, #836]	; (6968 <processOnSMS+0x1d3c>)
    6622:	4798      	blx	r3
    6624:	0003      	movs	r3, r0
    6626:	7023      	strb	r3, [r4, #0]
		if(result)
    6628:	230c      	movs	r3, #12
    662a:	33ff      	adds	r3, #255	; 0xff
    662c:	2208      	movs	r2, #8
    662e:	4694      	mov	ip, r2
    6630:	44bc      	add	ip, r7
    6632:	4463      	add	r3, ip
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	2b00      	cmp	r3, #0
    6638:	d100      	bne.n	663c <processOnSMS+0x1a10>
    663a:	e1f3      	b.n	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    663c:	2328      	movs	r3, #40	; 0x28
    663e:	33ff      	adds	r3, #255	; 0xff
    6640:	2208      	movs	r2, #8
    6642:	4694      	mov	ip, r2
    6644:	44bc      	add	ip, r7
    6646:	4463      	add	r3, ip
    6648:	2201      	movs	r2, #1
    664a:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
    664c:	4bc7      	ldr	r3, [pc, #796]	; (696c <processOnSMS+0x1d40>)
    664e:	2294      	movs	r2, #148	; 0x94
    6650:	0052      	lsls	r2, r2, #1
    6652:	4694      	mov	ip, r2
    6654:	2208      	movs	r2, #8
    6656:	4690      	mov	r8, r2
    6658:	44b8      	add	r8, r7
    665a:	44c4      	add	ip, r8
    665c:	4463      	add	r3, ip
    665e:	781b      	ldrb	r3, [r3, #0]
    6660:	2b00      	cmp	r3, #0
    6662:	d100      	bne.n	6666 <processOnSMS+0x1a3a>
    6664:	e1de      	b.n	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"MOBILE NO:");
    6666:	230c      	movs	r3, #12
    6668:	2208      	movs	r2, #8
    666a:	4694      	mov	ip, r2
    666c:	44bc      	add	ip, r7
    666e:	4463      	add	r3, ip
    6670:	4abf      	ldr	r2, [pc, #764]	; (6970 <processOnSMS+0x1d44>)
    6672:	ca03      	ldmia	r2!, {r0, r1}
    6674:	c303      	stmia	r3!, {r0, r1}
    6676:	8811      	ldrh	r1, [r2, #0]
    6678:	8019      	strh	r1, [r3, #0]
    667a:	7892      	ldrb	r2, [r2, #2]
    667c:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    667e:	230c      	movs	r3, #12
    6680:	2208      	movs	r2, #8
    6682:	4694      	mov	ip, r2
    6684:	44bc      	add	ip, r7
    6686:	4463      	add	r3, ip
    6688:	0018      	movs	r0, r3
    668a:	4bb5      	ldr	r3, [pc, #724]	; (6960 <processOnSMS+0x1d34>)
    668c:	4798      	blx	r3
    668e:	0003      	movs	r3, r0
    6690:	001a      	movs	r2, r3
    6692:	230c      	movs	r3, #12
    6694:	2108      	movs	r1, #8
    6696:	468c      	mov	ip, r1
    6698:	44bc      	add	ip, r7
    669a:	4463      	add	r3, ip
    669c:	189a      	adds	r2, r3, r2
    669e:	4bb5      	ldr	r3, [pc, #724]	; (6974 <processOnSMS+0x1d48>)
    66a0:	0010      	movs	r0, r2
    66a2:	0019      	movs	r1, r3
    66a4:	2302      	movs	r3, #2
    66a6:	001a      	movs	r2, r3
    66a8:	4bb3      	ldr	r3, [pc, #716]	; (6978 <processOnSMS+0x1d4c>)
    66aa:	4798      	blx	r3
				strcat(resep_msg,received_command);
    66ac:	68fa      	ldr	r2, [r7, #12]
    66ae:	230c      	movs	r3, #12
    66b0:	2108      	movs	r1, #8
    66b2:	468c      	mov	ip, r1
    66b4:	44bc      	add	ip, r7
    66b6:	4463      	add	r3, ip
    66b8:	0011      	movs	r1, r2
    66ba:	0018      	movs	r0, r3
    66bc:	4baf      	ldr	r3, [pc, #700]	; (697c <processOnSMS+0x1d50>)
    66be:	4798      	blx	r3
				strcat(resep_msg,"\n");
    66c0:	230c      	movs	r3, #12
    66c2:	2208      	movs	r2, #8
    66c4:	4694      	mov	ip, r2
    66c6:	44bc      	add	ip, r7
    66c8:	4463      	add	r3, ip
    66ca:	0018      	movs	r0, r3
    66cc:	4ba4      	ldr	r3, [pc, #656]	; (6960 <processOnSMS+0x1d34>)
    66ce:	4798      	blx	r3
    66d0:	0003      	movs	r3, r0
    66d2:	001a      	movs	r2, r3
    66d4:	230c      	movs	r3, #12
    66d6:	2108      	movs	r1, #8
    66d8:	468c      	mov	ip, r1
    66da:	44bc      	add	ip, r7
    66dc:	4463      	add	r3, ip
    66de:	189a      	adds	r2, r3, r2
    66e0:	4ba4      	ldr	r3, [pc, #656]	; (6974 <processOnSMS+0x1d48>)
    66e2:	0010      	movs	r0, r2
    66e4:	0019      	movs	r1, r3
    66e6:	2302      	movs	r3, #2
    66e8:	001a      	movs	r2, r3
    66ea:	4ba3      	ldr	r3, [pc, #652]	; (6978 <processOnSMS+0x1d4c>)
    66ec:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
    66ee:	230c      	movs	r3, #12
    66f0:	2208      	movs	r2, #8
    66f2:	4694      	mov	ip, r2
    66f4:	44bc      	add	ip, r7
    66f6:	4463      	add	r3, ip
    66f8:	0018      	movs	r0, r3
    66fa:	4b99      	ldr	r3, [pc, #612]	; (6960 <processOnSMS+0x1d34>)
    66fc:	4798      	blx	r3
    66fe:	0003      	movs	r3, r0
    6700:	001a      	movs	r2, r3
    6702:	230c      	movs	r3, #12
    6704:	2108      	movs	r1, #8
    6706:	468c      	mov	ip, r1
    6708:	44bc      	add	ip, r7
    670a:	4463      	add	r3, ip
    670c:	189a      	adds	r2, r3, r2
    670e:	4b9c      	ldr	r3, [pc, #624]	; (6980 <processOnSMS+0x1d54>)
    6710:	0010      	movs	r0, r2
    6712:	0019      	movs	r1, r3
    6714:	2313      	movs	r3, #19
    6716:	001a      	movs	r2, r3
    6718:	4b97      	ldr	r3, [pc, #604]	; (6978 <processOnSMS+0x1d4c>)
    671a:	4798      	blx	r3
    671c:	e182      	b.n	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
    671e:	4a99      	ldr	r2, [pc, #612]	; (6984 <processOnSMS+0x1d58>)
    6720:	68fb      	ldr	r3, [r7, #12]
    6722:	0011      	movs	r1, r2
    6724:	0018      	movs	r0, r3
    6726:	4b8d      	ldr	r3, [pc, #564]	; (695c <processOnSMS+0x1d30>)
    6728:	4798      	blx	r3
    672a:	1e03      	subs	r3, r0, #0
    672c:	d100      	bne.n	6730 <processOnSMS+0x1b04>
    672e:	e091      	b.n	6854 <processOnSMS+0x1c28>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    6730:	68fb      	ldr	r3, [r7, #12]
    6732:	1c9c      	adds	r4, r3, #2
    6734:	68fb      	ldr	r3, [r7, #12]
    6736:	0018      	movs	r0, r3
    6738:	4b89      	ldr	r3, [pc, #548]	; (6960 <processOnSMS+0x1d34>)
    673a:	4798      	blx	r3
    673c:	0002      	movs	r2, r0
    673e:	68fb      	ldr	r3, [r7, #12]
    6740:	0021      	movs	r1, r4
    6742:	0018      	movs	r0, r3
    6744:	4b87      	ldr	r3, [pc, #540]	; (6964 <processOnSMS+0x1d38>)
    6746:	4798      	blx	r3
		bool result = removeNumber(received_command);
    6748:	2385      	movs	r3, #133	; 0x85
    674a:	005b      	lsls	r3, r3, #1
    674c:	2208      	movs	r2, #8
    674e:	18ba      	adds	r2, r7, r2
    6750:	18d4      	adds	r4, r2, r3
    6752:	68fb      	ldr	r3, [r7, #12]
    6754:	0018      	movs	r0, r3
    6756:	4b8c      	ldr	r3, [pc, #560]	; (6988 <processOnSMS+0x1d5c>)
    6758:	4798      	blx	r3
    675a:	0003      	movs	r3, r0
    675c:	7023      	strb	r3, [r4, #0]
		if(result)
    675e:	2385      	movs	r3, #133	; 0x85
    6760:	005b      	lsls	r3, r3, #1
    6762:	2208      	movs	r2, #8
    6764:	4694      	mov	ip, r2
    6766:	44bc      	add	ip, r7
    6768:	4463      	add	r3, ip
    676a:	781b      	ldrb	r3, [r3, #0]
    676c:	2b00      	cmp	r3, #0
    676e:	d100      	bne.n	6772 <processOnSMS+0x1b46>
    6770:	e158      	b.n	6a24 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    6772:	2328      	movs	r3, #40	; 0x28
    6774:	33ff      	adds	r3, #255	; 0xff
    6776:	2208      	movs	r2, #8
    6778:	4694      	mov	ip, r2
    677a:	44bc      	add	ip, r7
    677c:	4463      	add	r3, ip
    677e:	2201      	movs	r2, #1
    6780:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    6782:	4b7a      	ldr	r3, [pc, #488]	; (696c <processOnSMS+0x1d40>)
    6784:	2294      	movs	r2, #148	; 0x94
    6786:	0052      	lsls	r2, r2, #1
    6788:	4694      	mov	ip, r2
    678a:	2208      	movs	r2, #8
    678c:	4690      	mov	r8, r2
    678e:	44b8      	add	r8, r7
    6790:	44c4      	add	ip, r8
    6792:	4463      	add	r3, ip
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	2b00      	cmp	r3, #0
    6798:	d100      	bne.n	679c <processOnSMS+0x1b70>
    679a:	e143      	b.n	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"MOBILE NO:");
    679c:	230c      	movs	r3, #12
    679e:	2208      	movs	r2, #8
    67a0:	4694      	mov	ip, r2
    67a2:	44bc      	add	ip, r7
    67a4:	4463      	add	r3, ip
    67a6:	4a72      	ldr	r2, [pc, #456]	; (6970 <processOnSMS+0x1d44>)
    67a8:	ca03      	ldmia	r2!, {r0, r1}
    67aa:	c303      	stmia	r3!, {r0, r1}
    67ac:	8811      	ldrh	r1, [r2, #0]
    67ae:	8019      	strh	r1, [r3, #0]
    67b0:	7892      	ldrb	r2, [r2, #2]
    67b2:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    67b4:	230c      	movs	r3, #12
    67b6:	2208      	movs	r2, #8
    67b8:	4694      	mov	ip, r2
    67ba:	44bc      	add	ip, r7
    67bc:	4463      	add	r3, ip
    67be:	0018      	movs	r0, r3
    67c0:	4b67      	ldr	r3, [pc, #412]	; (6960 <processOnSMS+0x1d34>)
    67c2:	4798      	blx	r3
    67c4:	0003      	movs	r3, r0
    67c6:	001a      	movs	r2, r3
    67c8:	230c      	movs	r3, #12
    67ca:	2108      	movs	r1, #8
    67cc:	468c      	mov	ip, r1
    67ce:	44bc      	add	ip, r7
    67d0:	4463      	add	r3, ip
    67d2:	189a      	adds	r2, r3, r2
    67d4:	4b67      	ldr	r3, [pc, #412]	; (6974 <processOnSMS+0x1d48>)
    67d6:	0010      	movs	r0, r2
    67d8:	0019      	movs	r1, r3
    67da:	2302      	movs	r3, #2
    67dc:	001a      	movs	r2, r3
    67de:	4b66      	ldr	r3, [pc, #408]	; (6978 <processOnSMS+0x1d4c>)
    67e0:	4798      	blx	r3
				strcat(resep_msg,received_command);
    67e2:	68fa      	ldr	r2, [r7, #12]
    67e4:	230c      	movs	r3, #12
    67e6:	2108      	movs	r1, #8
    67e8:	468c      	mov	ip, r1
    67ea:	44bc      	add	ip, r7
    67ec:	4463      	add	r3, ip
    67ee:	0011      	movs	r1, r2
    67f0:	0018      	movs	r0, r3
    67f2:	4b62      	ldr	r3, [pc, #392]	; (697c <processOnSMS+0x1d50>)
    67f4:	4798      	blx	r3
				strcat(resep_msg,"\n");
    67f6:	230c      	movs	r3, #12
    67f8:	2208      	movs	r2, #8
    67fa:	4694      	mov	ip, r2
    67fc:	44bc      	add	ip, r7
    67fe:	4463      	add	r3, ip
    6800:	0018      	movs	r0, r3
    6802:	4b57      	ldr	r3, [pc, #348]	; (6960 <processOnSMS+0x1d34>)
    6804:	4798      	blx	r3
    6806:	0003      	movs	r3, r0
    6808:	001a      	movs	r2, r3
    680a:	230c      	movs	r3, #12
    680c:	2108      	movs	r1, #8
    680e:	468c      	mov	ip, r1
    6810:	44bc      	add	ip, r7
    6812:	4463      	add	r3, ip
    6814:	189a      	adds	r2, r3, r2
    6816:	4b57      	ldr	r3, [pc, #348]	; (6974 <processOnSMS+0x1d48>)
    6818:	0010      	movs	r0, r2
    681a:	0019      	movs	r1, r3
    681c:	2302      	movs	r3, #2
    681e:	001a      	movs	r2, r3
    6820:	4b55      	ldr	r3, [pc, #340]	; (6978 <processOnSMS+0x1d4c>)
    6822:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
    6824:	230c      	movs	r3, #12
    6826:	2208      	movs	r2, #8
    6828:	4694      	mov	ip, r2
    682a:	44bc      	add	ip, r7
    682c:	4463      	add	r3, ip
    682e:	0018      	movs	r0, r3
    6830:	4b4b      	ldr	r3, [pc, #300]	; (6960 <processOnSMS+0x1d34>)
    6832:	4798      	blx	r3
    6834:	0003      	movs	r3, r0
    6836:	001a      	movs	r2, r3
    6838:	230c      	movs	r3, #12
    683a:	2108      	movs	r1, #8
    683c:	468c      	mov	ip, r1
    683e:	44bc      	add	ip, r7
    6840:	4463      	add	r3, ip
    6842:	189a      	adds	r2, r3, r2
    6844:	4b51      	ldr	r3, [pc, #324]	; (698c <processOnSMS+0x1d60>)
    6846:	0010      	movs	r0, r2
    6848:	0019      	movs	r1, r3
    684a:	2315      	movs	r3, #21
    684c:	001a      	movs	r2, r3
    684e:	4b4a      	ldr	r3, [pc, #296]	; (6978 <processOnSMS+0x1d4c>)
    6850:	4798      	blx	r3
    6852:	e0e7      	b.n	6a24 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
    6854:	4a4e      	ldr	r2, [pc, #312]	; (6990 <processOnSMS+0x1d64>)
    6856:	68fb      	ldr	r3, [r7, #12]
    6858:	0011      	movs	r1, r2
    685a:	0018      	movs	r0, r3
    685c:	4b3f      	ldr	r3, [pc, #252]	; (695c <processOnSMS+0x1d30>)
    685e:	4798      	blx	r3
    6860:	1e03      	subs	r3, r0, #0
    6862:	d042      	beq.n	68ea <processOnSMS+0x1cbe>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    6864:	68fb      	ldr	r3, [r7, #12]
    6866:	1cdc      	adds	r4, r3, #3
    6868:	68fb      	ldr	r3, [r7, #12]
    686a:	0018      	movs	r0, r3
    686c:	4b3c      	ldr	r3, [pc, #240]	; (6960 <processOnSMS+0x1d34>)
    686e:	4798      	blx	r3
    6870:	0002      	movs	r2, r0
    6872:	68fb      	ldr	r3, [r7, #12]
    6874:	0021      	movs	r1, r4
    6876:	0018      	movs	r0, r3
    6878:	4b3a      	ldr	r3, [pc, #232]	; (6964 <processOnSMS+0x1d38>)
    687a:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
    687c:	230a      	movs	r3, #10
    687e:	33ff      	adds	r3, #255	; 0xff
    6880:	2208      	movs	r2, #8
    6882:	18ba      	adds	r2, r7, r2
    6884:	18d4      	adds	r4, r2, r3
    6886:	68fb      	ldr	r3, [r7, #12]
    6888:	0018      	movs	r0, r3
    688a:	4b42      	ldr	r3, [pc, #264]	; (6994 <processOnSMS+0x1d68>)
    688c:	4798      	blx	r3
    688e:	0003      	movs	r3, r0
    6890:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
    6892:	2328      	movs	r3, #40	; 0x28
    6894:	33ff      	adds	r3, #255	; 0xff
    6896:	2208      	movs	r2, #8
    6898:	4694      	mov	ip, r2
    689a:	44bc      	add	ip, r7
    689c:	4463      	add	r3, ip
    689e:	2201      	movs	r2, #1
    68a0:	701a      	strb	r2, [r3, #0]
			if(result)
    68a2:	230a      	movs	r3, #10
    68a4:	33ff      	adds	r3, #255	; 0xff
    68a6:	2208      	movs	r2, #8
    68a8:	4694      	mov	ip, r2
    68aa:	44bc      	add	ip, r7
    68ac:	4463      	add	r3, ip
    68ae:	781b      	ldrb	r3, [r3, #0]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d100      	bne.n	68b6 <processOnSMS+0x1c8a>
    68b4:	e0b6      	b.n	6a24 <processOnSMS+0x1df8>
			{
				if (response_sms_processed_cmd == true)
    68b6:	4b2d      	ldr	r3, [pc, #180]	; (696c <processOnSMS+0x1d40>)
    68b8:	2294      	movs	r2, #148	; 0x94
    68ba:	0052      	lsls	r2, r2, #1
    68bc:	4694      	mov	ip, r2
    68be:	2208      	movs	r2, #8
    68c0:	4690      	mov	r8, r2
    68c2:	44b8      	add	r8, r7
    68c4:	44c4      	add	ip, r8
    68c6:	4463      	add	r3, ip
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d100      	bne.n	68d0 <processOnSMS+0x1ca4>
    68ce:	e0a9      	b.n	6a24 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
    68d0:	230c      	movs	r3, #12
    68d2:	2208      	movs	r2, #8
    68d4:	4694      	mov	ip, r2
    68d6:	44bc      	add	ip, r7
    68d8:	4463      	add	r3, ip
    68da:	4a2f      	ldr	r2, [pc, #188]	; (6998 <processOnSMS+0x1d6c>)
    68dc:	ca13      	ldmia	r2!, {r0, r1, r4}
    68de:	c313      	stmia	r3!, {r0, r1, r4}
    68e0:	ca13      	ldmia	r2!, {r0, r1, r4}
    68e2:	c313      	stmia	r3!, {r0, r1, r4}
    68e4:	ca03      	ldmia	r2!, {r0, r1}
    68e6:	c303      	stmia	r3!, {r0, r1}
    68e8:	e09c      	b.n	6a24 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
    68ea:	4a2c      	ldr	r2, [pc, #176]	; (699c <processOnSMS+0x1d70>)
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	0011      	movs	r1, r2
    68f0:	0018      	movs	r0, r3
    68f2:	4b1a      	ldr	r3, [pc, #104]	; (695c <processOnSMS+0x1d30>)
    68f4:	4798      	blx	r3
    68f6:	1e03      	subs	r3, r0, #0
    68f8:	d056      	beq.n	69a8 <processOnSMS+0x1d7c>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	1cdc      	adds	r4, r3, #3
    68fe:	68fb      	ldr	r3, [r7, #12]
    6900:	0018      	movs	r0, r3
    6902:	4b17      	ldr	r3, [pc, #92]	; (6960 <processOnSMS+0x1d34>)
    6904:	4798      	blx	r3
    6906:	0002      	movs	r2, r0
    6908:	68fb      	ldr	r3, [r7, #12]
    690a:	0021      	movs	r1, r4
    690c:	0018      	movs	r0, r3
    690e:	4b15      	ldr	r3, [pc, #84]	; (6964 <processOnSMS+0x1d38>)
    6910:	4798      	blx	r3
			addM2MNumber(received_command);
    6912:	68fb      	ldr	r3, [r7, #12]
    6914:	0018      	movs	r0, r3
    6916:	4b22      	ldr	r3, [pc, #136]	; (69a0 <processOnSMS+0x1d74>)
    6918:	4798      	blx	r3
			incomingSMSProcessed=true;
    691a:	2328      	movs	r3, #40	; 0x28
    691c:	33ff      	adds	r3, #255	; 0xff
    691e:	2208      	movs	r2, #8
    6920:	4694      	mov	ip, r2
    6922:	44bc      	add	ip, r7
    6924:	4463      	add	r3, ip
    6926:	2201      	movs	r2, #1
    6928:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    692a:	4b10      	ldr	r3, [pc, #64]	; (696c <processOnSMS+0x1d40>)
    692c:	2294      	movs	r2, #148	; 0x94
    692e:	0052      	lsls	r2, r2, #1
    6930:	4694      	mov	ip, r2
    6932:	2208      	movs	r2, #8
    6934:	4690      	mov	r8, r2
    6936:	44b8      	add	r8, r7
    6938:	44c4      	add	ip, r8
    693a:	4463      	add	r3, ip
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	2b00      	cmp	r3, #0
    6940:	d070      	beq.n	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
    6942:	230c      	movs	r3, #12
    6944:	2208      	movs	r2, #8
    6946:	4694      	mov	ip, r2
    6948:	44bc      	add	ip, r7
    694a:	4463      	add	r3, ip
    694c:	4a15      	ldr	r2, [pc, #84]	; (69a4 <processOnSMS+0x1d78>)
    694e:	ca13      	ldmia	r2!, {r0, r1, r4}
    6950:	c313      	stmia	r3!, {r0, r1, r4}
    6952:	8812      	ldrh	r2, [r2, #0]
    6954:	801a      	strh	r2, [r3, #0]
    6956:	e065      	b.n	6a24 <processOnSMS+0x1df8>
    6958:	000193d4 	.word	0x000193d4
    695c:	00003ee1 	.word	0x00003ee1
    6960:	00017ff7 	.word	0x00017ff7
    6964:	00017d43 	.word	0x00017d43
    6968:	00000ef1 	.word	0x00000ef1
    696c:	fffffeda 	.word	0xfffffeda
    6970:	000193d8 	.word	0x000193d8
    6974:	000193e4 	.word	0x000193e4
    6978:	00017d31 	.word	0x00017d31
    697c:	00017fb1 	.word	0x00017fb1
    6980:	000193e8 	.word	0x000193e8
    6984:	000193fc 	.word	0x000193fc
    6988:	00000fed 	.word	0x00000fed
    698c:	00019400 	.word	0x00019400
    6990:	00019418 	.word	0x00019418
    6994:	00001239 	.word	0x00001239
    6998:	0001941c 	.word	0x0001941c
    699c:	0001943c 	.word	0x0001943c
    69a0:	00000c49 	.word	0x00000c49
    69a4:	00019440 	.word	0x00019440
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
    69a8:	4a44      	ldr	r2, [pc, #272]	; (6abc <processOnSMS+0x1e90>)
    69aa:	68fb      	ldr	r3, [r7, #12]
    69ac:	0011      	movs	r1, r2
    69ae:	0018      	movs	r0, r3
    69b0:	4b43      	ldr	r3, [pc, #268]	; (6ac0 <processOnSMS+0x1e94>)
    69b2:	4798      	blx	r3
    69b4:	1e03      	subs	r3, r0, #0
    69b6:	d035      	beq.n	6a24 <processOnSMS+0x1df8>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
    69b8:	4b42      	ldr	r3, [pc, #264]	; (6ac4 <processOnSMS+0x1e98>)
    69ba:	78db      	ldrb	r3, [r3, #3]
    69bc:	2b00      	cmp	r3, #0
    69be:	d031      	beq.n	6a24 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    69c0:	68fb      	ldr	r3, [r7, #12]
    69c2:	1cdc      	adds	r4, r3, #3
    69c4:	68fb      	ldr	r3, [r7, #12]
    69c6:	0018      	movs	r0, r3
    69c8:	4b3f      	ldr	r3, [pc, #252]	; (6ac8 <processOnSMS+0x1e9c>)
    69ca:	4798      	blx	r3
    69cc:	0002      	movs	r2, r0
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	0021      	movs	r1, r4
    69d2:	0018      	movs	r0, r3
    69d4:	4b3d      	ldr	r3, [pc, #244]	; (6acc <processOnSMS+0x1ea0>)
    69d6:	4798      	blx	r3
			incomingSMSProcessed=true;
    69d8:	2328      	movs	r3, #40	; 0x28
    69da:	33ff      	adds	r3, #255	; 0xff
    69dc:	2208      	movs	r2, #8
    69de:	4694      	mov	ip, r2
    69e0:	44bc      	add	ip, r7
    69e2:	4463      	add	r3, ip
    69e4:	2201      	movs	r2, #1
    69e6:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
    69e8:	68fb      	ldr	r3, [r7, #12]
    69ea:	0018      	movs	r0, r3
    69ec:	4b38      	ldr	r3, [pc, #224]	; (6ad0 <processOnSMS+0x1ea4>)
    69ee:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    69f0:	4b38      	ldr	r3, [pc, #224]	; (6ad4 <processOnSMS+0x1ea8>)
    69f2:	2294      	movs	r2, #148	; 0x94
    69f4:	0052      	lsls	r2, r2, #1
    69f6:	4694      	mov	ip, r2
    69f8:	2208      	movs	r2, #8
    69fa:	4690      	mov	r8, r2
    69fc:	44b8      	add	r8, r7
    69fe:	44c4      	add	ip, r8
    6a00:	4463      	add	r3, ip
    6a02:	781b      	ldrb	r3, [r3, #0]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d00d      	beq.n	6a24 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
    6a08:	230c      	movs	r3, #12
    6a0a:	2208      	movs	r2, #8
    6a0c:	4694      	mov	ip, r2
    6a0e:	44bc      	add	ip, r7
    6a10:	4463      	add	r3, ip
    6a12:	4a31      	ldr	r2, [pc, #196]	; (6ad8 <processOnSMS+0x1eac>)
    6a14:	ca13      	ldmia	r2!, {r0, r1, r4}
    6a16:	c313      	stmia	r3!, {r0, r1, r4}
    6a18:	ca03      	ldmia	r2!, {r0, r1}
    6a1a:	c303      	stmia	r3!, {r0, r1}
    6a1c:	7812      	ldrb	r2, [r2, #0]
    6a1e:	701a      	strb	r2, [r3, #0]
    6a20:	e000      	b.n	6a24 <processOnSMS+0x1df8>
		if (alternateNumber_struct.alterNumberPresent)
    6a22:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
    6a24:	4b2b      	ldr	r3, [pc, #172]	; (6ad4 <processOnSMS+0x1ea8>)
    6a26:	2294      	movs	r2, #148	; 0x94
    6a28:	0052      	lsls	r2, r2, #1
    6a2a:	4694      	mov	ip, r2
    6a2c:	2208      	movs	r2, #8
    6a2e:	4690      	mov	r8, r2
    6a30:	44b8      	add	r8, r7
    6a32:	44c4      	add	ip, r8
    6a34:	4463      	add	r3, ip
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d03a      	beq.n	6ab2 <processOnSMS+0x1e86>
	{
		if(!incomingSMSProcessed)
    6a3c:	2328      	movs	r3, #40	; 0x28
    6a3e:	33ff      	adds	r3, #255	; 0xff
    6a40:	2208      	movs	r2, #8
    6a42:	4694      	mov	ip, r2
    6a44:	44bc      	add	ip, r7
    6a46:	4463      	add	r3, ip
    6a48:	781b      	ldrb	r3, [r3, #0]
    6a4a:	2201      	movs	r2, #1
    6a4c:	4053      	eors	r3, r2
    6a4e:	b2db      	uxtb	r3, r3
    6a50:	2b00      	cmp	r3, #0
    6a52:	d011      	beq.n	6a78 <processOnSMS+0x1e4c>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
    6a54:	238c      	movs	r3, #140	; 0x8c
    6a56:	005b      	lsls	r3, r3, #1
    6a58:	2208      	movs	r2, #8
    6a5a:	4694      	mov	ip, r2
    6a5c:	44bc      	add	ip, r7
    6a5e:	4463      	add	r3, ip
    6a60:	681b      	ldr	r3, [r3, #0]
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	001a      	movs	r2, r3
    6a66:	491d      	ldr	r1, [pc, #116]	; (6adc <processOnSMS+0x1eb0>)
    6a68:	230c      	movs	r3, #12
    6a6a:	2008      	movs	r0, #8
    6a6c:	4684      	mov	ip, r0
    6a6e:	44bc      	add	ip, r7
    6a70:	4463      	add	r3, ip
    6a72:	0018      	movs	r0, r3
    6a74:	4b1a      	ldr	r3, [pc, #104]	; (6ae0 <processOnSMS+0x1eb4>)
    6a76:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    6a78:	23a0      	movs	r3, #160	; 0xa0
    6a7a:	005b      	lsls	r3, r3, #1
    6a7c:	2208      	movs	r2, #8
    6a7e:	4694      	mov	ip, r2
    6a80:	44bc      	add	ip, r7
    6a82:	4463      	add	r3, ip
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	2200      	movs	r2, #0
    6a88:	0019      	movs	r1, r3
    6a8a:	2005      	movs	r0, #5
    6a8c:	4b15      	ldr	r3, [pc, #84]	; (6ae4 <processOnSMS+0x1eb8>)
    6a8e:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
    6a90:	230c      	movs	r3, #12
    6a92:	2208      	movs	r2, #8
    6a94:	18ba      	adds	r2, r7, r2
    6a96:	18d2      	adds	r2, r2, r3
    6a98:	23a0      	movs	r3, #160	; 0xa0
    6a9a:	005b      	lsls	r3, r3, #1
    6a9c:	2108      	movs	r1, #8
    6a9e:	468c      	mov	ip, r1
    6aa0:	44bc      	add	ip, r7
    6aa2:	4463      	add	r3, ip
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	0011      	movs	r1, r2
    6aa8:	0018      	movs	r0, r3
    6aaa:	4b0f      	ldr	r3, [pc, #60]	; (6ae8 <processOnSMS+0x1ebc>)
    6aac:	4798      	blx	r3
    6aae:	e000      	b.n	6ab2 <processOnSMS+0x1e86>
		return;
    6ab0:	46c0      	nop			; (mov r8, r8)
	}
}
    6ab2:	46bd      	mov	sp, r7
    6ab4:	b04c      	add	sp, #304	; 0x130
    6ab6:	bc04      	pop	{r2}
    6ab8:	4690      	mov	r8, r2
    6aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6abc:	00019450 	.word	0x00019450
    6ac0:	00003ee1 	.word	0x00003ee1
    6ac4:	20000628 	.word	0x20000628
    6ac8:	00017ff7 	.word	0x00017ff7
    6acc:	00017d43 	.word	0x00017d43
    6ad0:	00000cb1 	.word	0x00000cb1
    6ad4:	fffffeda 	.word	0xfffffeda
    6ad8:	00019454 	.word	0x00019454
    6adc:	0001946c 	.word	0x0001946c
    6ae0:	00017f6d 	.word	0x00017f6d
    6ae4:	0000bdf5 	.word	0x0000bdf5
    6ae8:	000029d9 	.word	0x000029d9

00006aec <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
    6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aee:	b091      	sub	sp, #68	; 0x44
    6af0:	af06      	add	r7, sp, #24
    6af2:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
    6af4:	2327      	movs	r3, #39	; 0x27
    6af6:	18fc      	adds	r4, r7, r3
    6af8:	4b32      	ldr	r3, [pc, #200]	; (6bc4 <buildStatusMessage+0xd8>)
    6afa:	4798      	blx	r3
    6afc:	0003      	movs	r3, r0
    6afe:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
    6b00:	4b31      	ldr	r3, [pc, #196]	; (6bc8 <buildStatusMessage+0xdc>)
    6b02:	785b      	ldrb	r3, [r3, #1]
    6b04:	b2db      	uxtb	r3, r3
    6b06:	2b02      	cmp	r3, #2
    6b08:	d009      	beq.n	6b1e <buildStatusMessage+0x32>
    6b0a:	2b03      	cmp	r3, #3
    6b0c:	d10d      	bne.n	6b2a <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
    6b0e:	231c      	movs	r3, #28
    6b10:	18fb      	adds	r3, r7, r3
    6b12:	4a2e      	ldr	r2, [pc, #184]	; (6bcc <buildStatusMessage+0xe0>)
    6b14:	8811      	ldrh	r1, [r2, #0]
    6b16:	8019      	strh	r1, [r3, #0]
    6b18:	7892      	ldrb	r2, [r2, #2]
    6b1a:	709a      	strb	r2, [r3, #2]
		break;
    6b1c:	e00a      	b.n	6b34 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
    6b1e:	231c      	movs	r3, #28
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	4a2b      	ldr	r2, [pc, #172]	; (6bd0 <buildStatusMessage+0xe4>)
    6b24:	ca03      	ldmia	r2!, {r0, r1}
    6b26:	c303      	stmia	r3!, {r0, r1}
		break;
    6b28:	e004      	b.n	6b34 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
    6b2a:	231c      	movs	r3, #28
    6b2c:	18fb      	adds	r3, r7, r3
    6b2e:	4a29      	ldr	r2, [pc, #164]	; (6bd4 <buildStatusMessage+0xe8>)
    6b30:	601a      	str	r2, [r3, #0]
		break;
    6b32:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    6b34:	4b24      	ldr	r3, [pc, #144]	; (6bc8 <buildStatusMessage+0xdc>)
    6b36:	781b      	ldrb	r3, [r3, #0]
    6b38:	b2db      	uxtb	r3, r3
    6b3a:	2b02      	cmp	r3, #2
    6b3c:	d107      	bne.n	6b4e <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
    6b3e:	2314      	movs	r3, #20
    6b40:	18fb      	adds	r3, r7, r3
    6b42:	4a25      	ldr	r2, [pc, #148]	; (6bd8 <buildStatusMessage+0xec>)
    6b44:	8811      	ldrh	r1, [r2, #0]
    6b46:	8019      	strh	r1, [r3, #0]
    6b48:	7892      	ldrb	r2, [r2, #2]
    6b4a:	709a      	strb	r2, [r3, #2]
    6b4c:	e006      	b.n	6b5c <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
    6b4e:	2314      	movs	r3, #20
    6b50:	18fb      	adds	r3, r7, r3
    6b52:	4a22      	ldr	r2, [pc, #136]	; (6bdc <buildStatusMessage+0xf0>)
    6b54:	6811      	ldr	r1, [r2, #0]
    6b56:	6019      	str	r1, [r3, #0]
    6b58:	8892      	ldrh	r2, [r2, #4]
    6b5a:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
    6b5c:	4b20      	ldr	r3, [pc, #128]	; (6be0 <buildStatusMessage+0xf4>)
    6b5e:	4798      	blx	r3
    6b60:	1e03      	subs	r3, r0, #0
    6b62:	d007      	beq.n	6b74 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
    6b64:	230c      	movs	r3, #12
    6b66:	18fb      	adds	r3, r7, r3
    6b68:	4a18      	ldr	r2, [pc, #96]	; (6bcc <buildStatusMessage+0xe0>)
    6b6a:	8811      	ldrh	r1, [r2, #0]
    6b6c:	8019      	strh	r1, [r3, #0]
    6b6e:	7892      	ldrb	r2, [r2, #2]
    6b70:	709a      	strb	r2, [r3, #2]
    6b72:	e003      	b.n	6b7c <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
    6b74:	230c      	movs	r3, #12
    6b76:	18fb      	adds	r3, r7, r3
    6b78:	4a16      	ldr	r2, [pc, #88]	; (6bd4 <buildStatusMessage+0xe8>)
    6b7a:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    6b7c:	4b19      	ldr	r3, [pc, #100]	; (6be4 <buildStatusMessage+0xf8>)
    6b7e:	681c      	ldr	r4, [r3, #0]
    6b80:	4b18      	ldr	r3, [pc, #96]	; (6be4 <buildStatusMessage+0xf8>)
    6b82:	685d      	ldr	r5, [r3, #4]
    6b84:	4b17      	ldr	r3, [pc, #92]	; (6be4 <buildStatusMessage+0xf8>)
    6b86:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
    6b88:	4a16      	ldr	r2, [pc, #88]	; (6be4 <buildStatusMessage+0xf8>)
    6b8a:	8a92      	ldrh	r2, [r2, #20]
    6b8c:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    6b8e:	0016      	movs	r6, r2
    6b90:	2227      	movs	r2, #39	; 0x27
    6b92:	18ba      	adds	r2, r7, r2
    6b94:	7812      	ldrb	r2, [r2, #0]
    6b96:	4914      	ldr	r1, [pc, #80]	; (6be8 <buildStatusMessage+0xfc>)
    6b98:	6878      	ldr	r0, [r7, #4]
    6b9a:	9205      	str	r2, [sp, #20]
    6b9c:	9604      	str	r6, [sp, #16]
    6b9e:	220c      	movs	r2, #12
    6ba0:	18ba      	adds	r2, r7, r2
    6ba2:	9203      	str	r2, [sp, #12]
    6ba4:	2214      	movs	r2, #20
    6ba6:	18ba      	adds	r2, r7, r2
    6ba8:	9202      	str	r2, [sp, #8]
    6baa:	221c      	movs	r2, #28
    6bac:	18ba      	adds	r2, r7, r2
    6bae:	9201      	str	r2, [sp, #4]
    6bb0:	9300      	str	r3, [sp, #0]
    6bb2:	002b      	movs	r3, r5
    6bb4:	0022      	movs	r2, r4
    6bb6:	4c0d      	ldr	r4, [pc, #52]	; (6bec <buildStatusMessage+0x100>)
    6bb8:	47a0      	blx	r4
}
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	46bd      	mov	sp, r7
    6bbe:	b00b      	add	sp, #44	; 0x2c
    6bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bc2:	46c0      	nop			; (mov r8, r8)
    6bc4:	00002791 	.word	0x00002791
    6bc8:	20000720 	.word	0x20000720
    6bcc:	00019478 	.word	0x00019478
    6bd0:	0001947c 	.word	0x0001947c
    6bd4:	0046464f 	.word	0x0046464f
    6bd8:	00019484 	.word	0x00019484
    6bdc:	00019488 	.word	0x00019488
    6be0:	00009f95 	.word	0x00009f95
    6be4:	200006dc 	.word	0x200006dc
    6be8:	00019490 	.word	0x00019490
    6bec:	00017f6d 	.word	0x00017f6d

00006bf0 <checkNumber>:


bool checkNumber(char *number)
{
    6bf0:	b580      	push	{r7, lr}
    6bf2:	b082      	sub	sp, #8
    6bf4:	af00      	add	r7, sp, #0
    6bf6:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	0018      	movs	r0, r3
    6bfc:	4b0a      	ldr	r3, [pc, #40]	; (6c28 <checkNumber+0x38>)
    6bfe:	4798      	blx	r3
    6c00:	1e03      	subs	r3, r0, #0
    6c02:	d109      	bne.n	6c18 <checkNumber+0x28>
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	0018      	movs	r0, r3
    6c08:	4b08      	ldr	r3, [pc, #32]	; (6c2c <checkNumber+0x3c>)
    6c0a:	4798      	blx	r3
    6c0c:	0003      	movs	r3, r0
    6c0e:	001a      	movs	r2, r3
    6c10:	4b07      	ldr	r3, [pc, #28]	; (6c30 <checkNumber+0x40>)
    6c12:	785b      	ldrb	r3, [r3, #1]
    6c14:	429a      	cmp	r2, r3
    6c16:	d201      	bcs.n	6c1c <checkNumber+0x2c>
	{
		return true;
    6c18:	2301      	movs	r3, #1
    6c1a:	e000      	b.n	6c1e <checkNumber+0x2e>
	}
	else
	{
		return false;
    6c1c:	2300      	movs	r3, #0
	}
}
    6c1e:	0018      	movs	r0, r3
    6c20:	46bd      	mov	sp, r7
    6c22:	b002      	add	sp, #8
    6c24:	bd80      	pop	{r7, pc}
    6c26:	46c0      	nop			; (mov r8, r8)
    6c28:	00001991 	.word	0x00001991
    6c2c:	00000ded 	.word	0x00000ded
    6c30:	20000610 	.word	0x20000610

00006c34 <checkNoCallTime>:

bool checkNoCallTime(void)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b082      	sub	sp, #8
    6c38:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
    6c3a:	1dba      	adds	r2, r7, #6
    6c3c:	1dfb      	adds	r3, r7, #7
    6c3e:	0011      	movs	r1, r2
    6c40:	0018      	movs	r0, r3
    6c42:	4b2b      	ldr	r3, [pc, #172]	; (6cf0 <checkNoCallTime+0xbc>)
    6c44:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
    6c46:	4b2b      	ldr	r3, [pc, #172]	; (6cf4 <checkNoCallTime+0xc0>)
    6c48:	7a9a      	ldrb	r2, [r3, #10]
    6c4a:	1dfb      	adds	r3, r7, #7
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	429a      	cmp	r2, r3
    6c50:	d849      	bhi.n	6ce6 <checkNoCallTime+0xb2>
    6c52:	4b28      	ldr	r3, [pc, #160]	; (6cf4 <checkNoCallTime+0xc0>)
    6c54:	7b1a      	ldrb	r2, [r3, #12]
    6c56:	1dfb      	adds	r3, r7, #7
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	429a      	cmp	r2, r3
    6c5c:	d343      	bcc.n	6ce6 <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
    6c5e:	4b25      	ldr	r3, [pc, #148]	; (6cf4 <checkNoCallTime+0xc0>)
    6c60:	7a9a      	ldrb	r2, [r3, #10]
    6c62:	4b24      	ldr	r3, [pc, #144]	; (6cf4 <checkNoCallTime+0xc0>)
    6c64:	7b1b      	ldrb	r3, [r3, #12]
    6c66:	429a      	cmp	r2, r3
    6c68:	d10f      	bne.n	6c8a <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    6c6a:	4b22      	ldr	r3, [pc, #136]	; (6cf4 <checkNoCallTime+0xc0>)
    6c6c:	7ada      	ldrb	r2, [r3, #11]
    6c6e:	1dbb      	adds	r3, r7, #6
    6c70:	781b      	ldrb	r3, [r3, #0]
    6c72:	429a      	cmp	r2, r3
    6c74:	d807      	bhi.n	6c86 <checkNoCallTime+0x52>
    6c76:	4b1f      	ldr	r3, [pc, #124]	; (6cf4 <checkNoCallTime+0xc0>)
    6c78:	7b5a      	ldrb	r2, [r3, #13]
    6c7a:	1dbb      	adds	r3, r7, #6
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	429a      	cmp	r2, r3
    6c80:	d301      	bcc.n	6c86 <checkNoCallTime+0x52>
			return true;
    6c82:	2301      	movs	r3, #1
    6c84:	e030      	b.n	6ce8 <checkNoCallTime+0xb4>
			else
			return false;
    6c86:	2300      	movs	r3, #0
    6c88:	e02e      	b.n	6ce8 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
    6c8a:	4b1a      	ldr	r3, [pc, #104]	; (6cf4 <checkNoCallTime+0xc0>)
    6c8c:	7a9a      	ldrb	r2, [r3, #10]
    6c8e:	1dfb      	adds	r3, r7, #7
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	429a      	cmp	r2, r3
    6c94:	d109      	bne.n	6caa <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
    6c96:	4b17      	ldr	r3, [pc, #92]	; (6cf4 <checkNoCallTime+0xc0>)
    6c98:	7ada      	ldrb	r2, [r3, #11]
    6c9a:	1dbb      	adds	r3, r7, #6
    6c9c:	781b      	ldrb	r3, [r3, #0]
    6c9e:	429a      	cmp	r2, r3
    6ca0:	d801      	bhi.n	6ca6 <checkNoCallTime+0x72>
			return true;
    6ca2:	2301      	movs	r3, #1
    6ca4:	e020      	b.n	6ce8 <checkNoCallTime+0xb4>
			else
			return false;
    6ca6:	2300      	movs	r3, #0
    6ca8:	e01e      	b.n	6ce8 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
    6caa:	4b12      	ldr	r3, [pc, #72]	; (6cf4 <checkNoCallTime+0xc0>)
    6cac:	7b1a      	ldrb	r2, [r3, #12]
    6cae:	1dfb      	adds	r3, r7, #7
    6cb0:	781b      	ldrb	r3, [r3, #0]
    6cb2:	429a      	cmp	r2, r3
    6cb4:	d109      	bne.n	6cca <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    6cb6:	4b0f      	ldr	r3, [pc, #60]	; (6cf4 <checkNoCallTime+0xc0>)
    6cb8:	7b5a      	ldrb	r2, [r3, #13]
    6cba:	1dbb      	adds	r3, r7, #6
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	429a      	cmp	r2, r3
    6cc0:	d301      	bcc.n	6cc6 <checkNoCallTime+0x92>
			return true;
    6cc2:	2301      	movs	r3, #1
    6cc4:	e010      	b.n	6ce8 <checkNoCallTime+0xb4>
			else
			return false;
    6cc6:	2300      	movs	r3, #0
    6cc8:	e00e      	b.n	6ce8 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
    6cca:	4b0a      	ldr	r3, [pc, #40]	; (6cf4 <checkNoCallTime+0xc0>)
    6ccc:	7a9a      	ldrb	r2, [r3, #10]
    6cce:	1dfb      	adds	r3, r7, #7
    6cd0:	781b      	ldrb	r3, [r3, #0]
    6cd2:	429a      	cmp	r2, r3
    6cd4:	d207      	bcs.n	6ce6 <checkNoCallTime+0xb2>
    6cd6:	4b07      	ldr	r3, [pc, #28]	; (6cf4 <checkNoCallTime+0xc0>)
    6cd8:	7b1a      	ldrb	r2, [r3, #12]
    6cda:	1dfb      	adds	r3, r7, #7
    6cdc:	781b      	ldrb	r3, [r3, #0]
    6cde:	429a      	cmp	r2, r3
    6ce0:	d901      	bls.n	6ce6 <checkNoCallTime+0xb2>
		return true;
    6ce2:	2301      	movs	r3, #1
    6ce4:	e000      	b.n	6ce8 <checkNoCallTime+0xb4>
	}
	return false;
    6ce6:	2300      	movs	r3, #0
}
    6ce8:	0018      	movs	r0, r3
    6cea:	46bd      	mov	sp, r7
    6cec:	b002      	add	sp, #8
    6cee:	bd80      	pop	{r7, pc}
    6cf0:	00006f31 	.word	0x00006f31
    6cf4:	2000065c 	.word	0x2000065c

00006cf8 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
    6cfc:	4b04      	ldr	r3, [pc, #16]	; (6d10 <verifyRemoteNumber+0x18>)
    6cfe:	2201      	movs	r2, #1
    6d00:	2101      	movs	r1, #1
    6d02:	0018      	movs	r0, r3
    6d04:	4b03      	ldr	r3, [pc, #12]	; (6d14 <verifyRemoteNumber+0x1c>)
    6d06:	4798      	blx	r3
}
    6d08:	46c0      	nop			; (mov r8, r8)
    6d0a:	46bd      	mov	sp, r7
    6d0c:	bd80      	pop	{r7, pc}
    6d0e:	46c0      	nop			; (mov r8, r8)
    6d10:	000194dc 	.word	0x000194dc
    6d14:	00006d19 	.word	0x00006d19

00006d18 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
    6d18:	b580      	push	{r7, lr}
    6d1a:	b08e      	sub	sp, #56	; 0x38
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	6078      	str	r0, [r7, #4]
    6d20:	0008      	movs	r0, r1
    6d22:	0011      	movs	r1, r2
    6d24:	1cfb      	adds	r3, r7, #3
    6d26:	1c02      	adds	r2, r0, #0
    6d28:	701a      	strb	r2, [r3, #0]
    6d2a:	1cbb      	adds	r3, r7, #2
    6d2c:	1c0a      	adds	r2, r1, #0
    6d2e:	701a      	strb	r2, [r3, #0]
	inCall=true;
    6d30:	4b55      	ldr	r3, [pc, #340]	; (6e88 <sendSMS+0x170>)
    6d32:	2201      	movs	r2, #1
    6d34:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
    6d36:	1cfb      	adds	r3, r7, #3
    6d38:	781b      	ldrb	r3, [r3, #0]
    6d3a:	2201      	movs	r2, #1
    6d3c:	4053      	eors	r3, r2
    6d3e:	b2db      	uxtb	r3, r3
    6d40:	2b00      	cmp	r3, #0
    6d42:	d048      	beq.n	6dd6 <sendSMS+0xbe>
	{
		switch(actionType)
    6d44:	4b51      	ldr	r3, [pc, #324]	; (6e8c <sendSMS+0x174>)
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	3b43      	subs	r3, #67	; 0x43
    6d4a:	2b12      	cmp	r3, #18
    6d4c:	d900      	bls.n	6d50 <sendSMS+0x38>
    6d4e:	e096      	b.n	6e7e <sendSMS+0x166>
    6d50:	009a      	lsls	r2, r3, #2
    6d52:	4b4f      	ldr	r3, [pc, #316]	; (6e90 <sendSMS+0x178>)
    6d54:	18d3      	adds	r3, r2, r3
    6d56:	681b      	ldr	r3, [r3, #0]
    6d58:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	0018      	movs	r0, r3
    6d5e:	4b4d      	ldr	r3, [pc, #308]	; (6e94 <sendSMS+0x17c>)
    6d60:	4798      	blx	r3
    6d62:	0003      	movs	r3, r0
    6d64:	001a      	movs	r2, r3
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	189a      	adds	r2, r3, r2
    6d6a:	4b4b      	ldr	r3, [pc, #300]	; (6e98 <sendSMS+0x180>)
    6d6c:	0010      	movs	r0, r2
    6d6e:	0019      	movs	r1, r3
    6d70:	2307      	movs	r3, #7
    6d72:	001a      	movs	r2, r3
    6d74:	4b49      	ldr	r3, [pc, #292]	; (6e9c <sendSMS+0x184>)
    6d76:	4798      	blx	r3
			strcat(msg,STR_ON);
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	0018      	movs	r0, r3
    6d7c:	4b45      	ldr	r3, [pc, #276]	; (6e94 <sendSMS+0x17c>)
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
    6d82:	001a      	movs	r2, r3
    6d84:	687b      	ldr	r3, [r7, #4]
    6d86:	189a      	adds	r2, r3, r2
    6d88:	4b45      	ldr	r3, [pc, #276]	; (6ea0 <sendSMS+0x188>)
    6d8a:	0010      	movs	r0, r2
    6d8c:	0019      	movs	r1, r3
    6d8e:	2303      	movs	r3, #3
    6d90:	001a      	movs	r2, r3
    6d92:	4b42      	ldr	r3, [pc, #264]	; (6e9c <sendSMS+0x184>)
    6d94:	4798      	blx	r3
			break;
    6d96:	e01e      	b.n	6dd6 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	0018      	movs	r0, r3
    6d9c:	4b3d      	ldr	r3, [pc, #244]	; (6e94 <sendSMS+0x17c>)
    6d9e:	4798      	blx	r3
    6da0:	0003      	movs	r3, r0
    6da2:	001a      	movs	r2, r3
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	189a      	adds	r2, r3, r2
    6da8:	4b3b      	ldr	r3, [pc, #236]	; (6e98 <sendSMS+0x180>)
    6daa:	0010      	movs	r0, r2
    6dac:	0019      	movs	r1, r3
    6dae:	2307      	movs	r3, #7
    6db0:	001a      	movs	r2, r3
    6db2:	4b3a      	ldr	r3, [pc, #232]	; (6e9c <sendSMS+0x184>)
    6db4:	4798      	blx	r3
			strcat(msg,STR_OFF);
    6db6:	687b      	ldr	r3, [r7, #4]
    6db8:	0018      	movs	r0, r3
    6dba:	4b36      	ldr	r3, [pc, #216]	; (6e94 <sendSMS+0x17c>)
    6dbc:	4798      	blx	r3
    6dbe:	0003      	movs	r3, r0
    6dc0:	001a      	movs	r2, r3
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	189a      	adds	r2, r3, r2
    6dc6:	4b37      	ldr	r3, [pc, #220]	; (6ea4 <sendSMS+0x18c>)
    6dc8:	0010      	movs	r0, r2
    6dca:	0019      	movs	r1, r3
    6dcc:	2304      	movs	r3, #4
    6dce:	001a      	movs	r2, r3
    6dd0:	4b32      	ldr	r3, [pc, #200]	; (6e9c <sendSMS+0x184>)
    6dd2:	4798      	blx	r3
			break;
    6dd4:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
    6dd6:	1cbb      	adds	r3, r7, #2
    6dd8:	781b      	ldrb	r3, [r3, #0]
    6dda:	2b02      	cmp	r3, #2
    6ddc:	d105      	bne.n	6dea <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
    6dde:	2324      	movs	r3, #36	; 0x24
    6de0:	18fb      	adds	r3, r7, r3
    6de2:	0018      	movs	r0, r3
    6de4:	4b30      	ldr	r3, [pc, #192]	; (6ea8 <sendSMS+0x190>)
    6de6:	4798      	blx	r3
    6de8:	e034      	b.n	6e54 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
    6dea:	1cbb      	adds	r3, r7, #2
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	2b01      	cmp	r3, #1
    6df0:	d109      	bne.n	6e06 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    6df2:	4b2e      	ldr	r3, [pc, #184]	; (6eac <sendSMS+0x194>)
    6df4:	78db      	ldrb	r3, [r3, #3]
    6df6:	2b00      	cmp	r3, #0
    6df8:	d02c      	beq.n	6e54 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
    6dfa:	2324      	movs	r3, #36	; 0x24
    6dfc:	18fb      	adds	r3, r7, r3
    6dfe:	0018      	movs	r0, r3
    6e00:	4b2b      	ldr	r3, [pc, #172]	; (6eb0 <sendSMS+0x198>)
    6e02:	4798      	blx	r3
    6e04:	e026      	b.n	6e54 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
    6e06:	4b2b      	ldr	r3, [pc, #172]	; (6eb4 <sendSMS+0x19c>)
    6e08:	781b      	ldrb	r3, [r3, #0]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d01d      	beq.n	6e4a <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
    6e0e:	4b2a      	ldr	r3, [pc, #168]	; (6eb8 <sendSMS+0x1a0>)
    6e10:	223c      	movs	r2, #60	; 0x3c
    6e12:	2100      	movs	r1, #0
    6e14:	0018      	movs	r0, r3
    6e16:	4b29      	ldr	r3, [pc, #164]	; (6ebc <sendSMS+0x1a4>)
    6e18:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
    6e1a:	4b27      	ldr	r3, [pc, #156]	; (6eb8 <sendSMS+0x1a0>)
    6e1c:	0019      	movs	r1, r3
    6e1e:	2003      	movs	r0, #3
    6e20:	4b27      	ldr	r3, [pc, #156]	; (6ec0 <sendSMS+0x1a8>)
    6e22:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
    6e24:	230c      	movs	r3, #12
    6e26:	18fa      	adds	r2, r7, r3
    6e28:	4b23      	ldr	r3, [pc, #140]	; (6eb8 <sendSMS+0x1a0>)
    6e2a:	0010      	movs	r0, r2
    6e2c:	0019      	movs	r1, r3
    6e2e:	2318      	movs	r3, #24
    6e30:	001a      	movs	r2, r3
    6e32:	4b1a      	ldr	r3, [pc, #104]	; (6e9c <sendSMS+0x184>)
    6e34:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
    6e36:	230c      	movs	r3, #12
    6e38:	18fb      	adds	r3, r7, r3
    6e3a:	1d1a      	adds	r2, r3, #4
    6e3c:	2324      	movs	r3, #36	; 0x24
    6e3e:	18fb      	adds	r3, r7, r3
    6e40:	0011      	movs	r1, r2
    6e42:	0018      	movs	r0, r3
    6e44:	4b1f      	ldr	r3, [pc, #124]	; (6ec4 <sendSMS+0x1ac>)
    6e46:	4798      	blx	r3
    6e48:	e004      	b.n	6e54 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
    6e4a:	2324      	movs	r3, #36	; 0x24
    6e4c:	18fb      	adds	r3, r7, r3
    6e4e:	0018      	movs	r0, r3
    6e50:	4b1d      	ldr	r3, [pc, #116]	; (6ec8 <sendSMS+0x1b0>)
    6e52:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    6e54:	2324      	movs	r3, #36	; 0x24
    6e56:	18fb      	adds	r3, r7, r3
    6e58:	2200      	movs	r2, #0
    6e5a:	0019      	movs	r1, r3
    6e5c:	2005      	movs	r0, #5
    6e5e:	4b1b      	ldr	r3, [pc, #108]	; (6ecc <sendSMS+0x1b4>)
    6e60:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
    6e62:	687a      	ldr	r2, [r7, #4]
    6e64:	2324      	movs	r3, #36	; 0x24
    6e66:	18fb      	adds	r3, r7, r3
    6e68:	0011      	movs	r1, r2
    6e6a:	0018      	movs	r0, r3
    6e6c:	4b18      	ldr	r3, [pc, #96]	; (6ed0 <sendSMS+0x1b8>)
    6e6e:	4798      	blx	r3
	isMsgFromAdmin = false;
    6e70:	4b10      	ldr	r3, [pc, #64]	; (6eb4 <sendSMS+0x19c>)
    6e72:	2200      	movs	r2, #0
    6e74:	701a      	strb	r2, [r3, #0]
	inCall=false;
    6e76:	4b04      	ldr	r3, [pc, #16]	; (6e88 <sendSMS+0x170>)
    6e78:	2200      	movs	r2, #0
    6e7a:	701a      	strb	r2, [r3, #0]
    6e7c:	e000      	b.n	6e80 <sendSMS+0x168>
			return;
    6e7e:	46c0      	nop			; (mov r8, r8)
}
    6e80:	46bd      	mov	sp, r7
    6e82:	b00e      	add	sp, #56	; 0x38
    6e84:	bd80      	pop	{r7, pc}
    6e86:	46c0      	nop			; (mov r8, r8)
    6e88:	20000774 	.word	0x20000774
    6e8c:	2000073b 	.word	0x2000073b
    6e90:	00019518 	.word	0x00019518
    6e94:	00017ff7 	.word	0x00017ff7
    6e98:	000194e4 	.word	0x000194e4
    6e9c:	00017d31 	.word	0x00017d31
    6ea0:	00019478 	.word	0x00019478
    6ea4:	000194ec 	.word	0x000194ec
    6ea8:	00000acd 	.word	0x00000acd
    6eac:	20000628 	.word	0x20000628
    6eb0:	00000b09 	.word	0x00000b09
    6eb4:	20000755 	.word	0x20000755
    6eb8:	20000584 	.word	0x20000584
    6ebc:	00017d67 	.word	0x00017d67
    6ec0:	00012b05 	.word	0x00012b05
    6ec4:	00017fe7 	.word	0x00017fe7
    6ec8:	00000d21 	.word	0x00000d21
    6ecc:	0000bdf5 	.word	0x0000bdf5
    6ed0:	000029d9 	.word	0x000029d9

00006ed4 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b082      	sub	sp, #8
    6ed8:	af00      	add	r7, sp, #0
    6eda:	0002      	movs	r2, r0
    6edc:	1dfb      	adds	r3, r7, #7
    6ede:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
    6ee0:	1dfb      	adds	r3, r7, #7
    6ee2:	781b      	ldrb	r3, [r3, #0]
    6ee4:	2bff      	cmp	r3, #255	; 0xff
    6ee6:	d103      	bne.n	6ef0 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
    6ee8:	2041      	movs	r0, #65	; 0x41
    6eea:	4b0f      	ldr	r3, [pc, #60]	; (6f28 <sendDTMFTone+0x54>)
    6eec:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
    6eee:	e016      	b.n	6f1e <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
    6ef0:	1dfb      	adds	r3, r7, #7
    6ef2:	781b      	ldrb	r3, [r3, #0]
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d107      	bne.n	6f08 <sendDTMFTone+0x34>
    6ef8:	4b0c      	ldr	r3, [pc, #48]	; (6f2c <sendDTMFTone+0x58>)
    6efa:	78db      	ldrb	r3, [r3, #3]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d003      	beq.n	6f08 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
    6f00:	2044      	movs	r0, #68	; 0x44
    6f02:	4b09      	ldr	r3, [pc, #36]	; (6f28 <sendDTMFTone+0x54>)
    6f04:	4798      	blx	r3
}
    6f06:	e00a      	b.n	6f1e <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
    6f08:	1dfb      	adds	r3, r7, #7
    6f0a:	781b      	ldrb	r3, [r3, #0]
    6f0c:	2b01      	cmp	r3, #1
    6f0e:	d106      	bne.n	6f1e <sendDTMFTone+0x4a>
    6f10:	4b06      	ldr	r3, [pc, #24]	; (6f2c <sendDTMFTone+0x58>)
    6f12:	78db      	ldrb	r3, [r3, #3]
    6f14:	2b00      	cmp	r3, #0
    6f16:	d002      	beq.n	6f1e <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
    6f18:	2043      	movs	r0, #67	; 0x43
    6f1a:	4b03      	ldr	r3, [pc, #12]	; (6f28 <sendDTMFTone+0x54>)
    6f1c:	4798      	blx	r3
}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	46bd      	mov	sp, r7
    6f22:	b002      	add	sp, #8
    6f24:	bd80      	pop	{r7, pc}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	00002e4d 	.word	0x00002e4d
    6f2c:	20000628 	.word	0x20000628

00006f30 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
    6f30:	b580      	push	{r7, lr}
    6f32:	b082      	sub	sp, #8
    6f34:	af00      	add	r7, sp, #0
    6f36:	6078      	str	r0, [r7, #4]
    6f38:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
    6f3a:	4b09      	ldr	r3, [pc, #36]	; (6f60 <getSystemTime+0x30>)
    6f3c:	4798      	blx	r3
    6f3e:	1e03      	subs	r3, r0, #0
    6f40:	d109      	bne.n	6f56 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
    6f42:	4b08      	ldr	r3, [pc, #32]	; (6f64 <getSystemTime+0x34>)
    6f44:	78db      	ldrb	r3, [r3, #3]
    6f46:	b2da      	uxtb	r2, r3
    6f48:	687b      	ldr	r3, [r7, #4]
    6f4a:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
    6f4c:	4b05      	ldr	r3, [pc, #20]	; (6f64 <getSystemTime+0x34>)
    6f4e:	791b      	ldrb	r3, [r3, #4]
    6f50:	b2da      	uxtb	r2, r3
    6f52:	683b      	ldr	r3, [r7, #0]
    6f54:	701a      	strb	r2, [r3, #0]
	}
}
    6f56:	46c0      	nop			; (mov r8, r8)
    6f58:	46bd      	mov	sp, r7
    6f5a:	b002      	add	sp, #8
    6f5c:	bd80      	pop	{r7, pc}
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	0000302d 	.word	0x0000302d
    6f64:	20000688 	.word	0x20000688

00006f68 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
    6f68:	b590      	push	{r4, r7, lr}
    6f6a:	b0cf      	sub	sp, #316	; 0x13c
    6f6c:	af02      	add	r7, sp, #8
    6f6e:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
    6f70:	2300      	movs	r3, #0
    6f72:	2296      	movs	r2, #150	; 0x96
    6f74:	0052      	lsls	r2, r2, #1
    6f76:	18ba      	adds	r2, r7, r2
    6f78:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
    6f7a:	4bce      	ldr	r3, [pc, #824]	; (72b4 <vTask_GSM_service+0x34c>)
    6f7c:	4acd      	ldr	r2, [pc, #820]	; (72b4 <vTask_GSM_service+0x34c>)
    6f7e:	6812      	ldr	r2, [r2, #0]
    6f80:	2180      	movs	r1, #128	; 0x80
    6f82:	0249      	lsls	r1, r1, #9
    6f84:	430a      	orrs	r2, r1
    6f86:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    6f88:	2388      	movs	r3, #136	; 0x88
    6f8a:	005b      	lsls	r3, r3, #1
    6f8c:	18fb      	adds	r3, r7, r3
    6f8e:	0018      	movs	r0, r3
    6f90:	4bc9      	ldr	r3, [pc, #804]	; (72b8 <vTask_GSM_service+0x350>)
    6f92:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
    6f94:	2388      	movs	r3, #136	; 0x88
    6f96:	005b      	lsls	r3, r3, #1
    6f98:	18fb      	adds	r3, r7, r3
    6f9a:	2200      	movs	r2, #0
    6f9c:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    6f9e:	2388      	movs	r3, #136	; 0x88
    6fa0:	005b      	lsls	r3, r3, #1
    6fa2:	18fb      	adds	r3, r7, r3
    6fa4:	2200      	movs	r2, #0
    6fa6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    6fa8:	2388      	movs	r3, #136	; 0x88
    6faa:	005b      	lsls	r3, r3, #1
    6fac:	18fb      	adds	r3, r7, r3
    6fae:	0019      	movs	r1, r3
    6fb0:	201b      	movs	r0, #27
    6fb2:	4bc2      	ldr	r3, [pc, #776]	; (72bc <vTask_GSM_service+0x354>)
    6fb4:	4798      	blx	r3
	
	gsm_init();
    6fb6:	4bc2      	ldr	r3, [pc, #776]	; (72c0 <vTask_GSM_service+0x358>)
    6fb8:	4798      	blx	r3
	
	initialized = false;
    6fba:	4bc2      	ldr	r3, [pc, #776]	; (72c4 <vTask_GSM_service+0x35c>)
    6fbc:	2200      	movs	r2, #0
    6fbe:	701a      	strb	r2, [r3, #0]
	
	inCall=false;
    6fc0:	4bc1      	ldr	r3, [pc, #772]	; (72c8 <vTask_GSM_service+0x360>)
    6fc2:	2200      	movs	r2, #0
    6fc4:	701a      	strb	r2, [r3, #0]
	simReInit=false;
    6fc6:	4bc1      	ldr	r3, [pc, #772]	; (72cc <vTask_GSM_service+0x364>)
    6fc8:	2200      	movs	r2, #0
    6fca:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
    6fcc:	232c      	movs	r3, #44	; 0x2c
    6fce:	33ff      	adds	r3, #255	; 0xff
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	2200      	movs	r2, #0
    6fd4:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
    6fd6:	2395      	movs	r3, #149	; 0x95
    6fd8:	005b      	lsls	r3, r3, #1
    6fda:	18fb      	adds	r3, r7, r3
    6fdc:	2200      	movs	r2, #0
    6fde:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
    6fe0:	4bbb      	ldr	r3, [pc, #748]	; (72d0 <vTask_GSM_service+0x368>)
    6fe2:	2200      	movs	r2, #0
    6fe4:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
    6fe6:	4bbb      	ldr	r3, [pc, #748]	; (72d4 <vTask_GSM_service+0x36c>)
    6fe8:	2205      	movs	r2, #5
    6fea:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
    6fec:	4bba      	ldr	r3, [pc, #744]	; (72d8 <vTask_GSM_service+0x370>)
    6fee:	2200      	movs	r2, #0
    6ff0:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
    6ff2:	4bba      	ldr	r3, [pc, #744]	; (72dc <vTask_GSM_service+0x374>)
    6ff4:	2291      	movs	r2, #145	; 0x91
    6ff6:	0092      	lsls	r2, r2, #2
    6ff8:	801a      	strh	r2, [r3, #0]
	nr = 0;
    6ffa:	4bb9      	ldr	r3, [pc, #740]	; (72e0 <vTask_GSM_service+0x378>)
    6ffc:	2200      	movs	r2, #0
    6ffe:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    7000:	4bb8      	ldr	r3, [pc, #736]	; (72e4 <vTask_GSM_service+0x37c>)
    7002:	224e      	movs	r2, #78	; 0x4e
    7004:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    7006:	4bb8      	ldr	r3, [pc, #736]	; (72e8 <vTask_GSM_service+0x380>)
    7008:	224e      	movs	r2, #78	; 0x4e
    700a:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
    700c:	4bb7      	ldr	r3, [pc, #732]	; (72ec <vTask_GSM_service+0x384>)
    700e:	2200      	movs	r2, #0
    7010:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
    7012:	4bb7      	ldr	r3, [pc, #732]	; (72f0 <vTask_GSM_service+0x388>)
    7014:	2200      	movs	r2, #0
    7016:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
    7018:	4bb6      	ldr	r3, [pc, #728]	; (72f4 <vTask_GSM_service+0x38c>)
    701a:	2201      	movs	r2, #1
    701c:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
    701e:	4bb6      	ldr	r3, [pc, #728]	; (72f8 <vTask_GSM_service+0x390>)
    7020:	2200      	movs	r2, #0
    7022:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
    7024:	4bb5      	ldr	r3, [pc, #724]	; (72fc <vTask_GSM_service+0x394>)
    7026:	2200      	movs	r2, #0
    7028:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
    702a:	4bb5      	ldr	r3, [pc, #724]	; (7300 <vTask_GSM_service+0x398>)
    702c:	224e      	movs	r2, #78	; 0x4e
    702e:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
    7030:	4bb4      	ldr	r3, [pc, #720]	; (7304 <vTask_GSM_service+0x39c>)
    7032:	2200      	movs	r2, #0
    7034:	701a      	strb	r2, [r3, #0]
	retries=0;
    7036:	4bb4      	ldr	r3, [pc, #720]	; (7308 <vTask_GSM_service+0x3a0>)
    7038:	2200      	movs	r2, #0
    703a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    703c:	4bb3      	ldr	r3, [pc, #716]	; (730c <vTask_GSM_service+0x3a4>)
    703e:	785b      	ldrb	r3, [r3, #1]
    7040:	2b00      	cmp	r3, #0
    7042:	d002      	beq.n	704a <vTask_GSM_service+0xe2>
	{
		zeroPressed=false;
    7044:	4bb2      	ldr	r3, [pc, #712]	; (7310 <vTask_GSM_service+0x3a8>)
    7046:	2200      	movs	r2, #0
    7048:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    704a:	4bb0      	ldr	r3, [pc, #704]	; (730c <vTask_GSM_service+0x3a4>)
    704c:	78db      	ldrb	r3, [r3, #3]
    704e:	2b00      	cmp	r3, #0
    7050:	d012      	beq.n	7078 <vTask_GSM_service+0x110>
	{
		m2mAck=false;
    7052:	4bb0      	ldr	r3, [pc, #704]	; (7314 <vTask_GSM_service+0x3ac>)
    7054:	2200      	movs	r2, #0
    7056:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
    7058:	4baf      	ldr	r3, [pc, #700]	; (7318 <vTask_GSM_service+0x3b0>)
    705a:	2200      	movs	r2, #0
    705c:	701a      	strb	r2, [r3, #0]
    705e:	4bae      	ldr	r3, [pc, #696]	; (7318 <vTask_GSM_service+0x3b0>)
    7060:	781a      	ldrb	r2, [r3, #0]
    7062:	4bae      	ldr	r3, [pc, #696]	; (731c <vTask_GSM_service+0x3b4>)
    7064:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
    7066:	4bae      	ldr	r3, [pc, #696]	; (7320 <vTask_GSM_service+0x3b8>)
    7068:	2200      	movs	r2, #0
    706a:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
    706c:	4bad      	ldr	r3, [pc, #692]	; (7324 <vTask_GSM_service+0x3bc>)
    706e:	2200      	movs	r2, #0
    7070:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
    7072:	4bad      	ldr	r3, [pc, #692]	; (7328 <vTask_GSM_service+0x3c0>)
    7074:	2200      	movs	r2, #0
    7076:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
    7078:	201b      	movs	r0, #27
    707a:	4bac      	ldr	r3, [pc, #688]	; (732c <vTask_GSM_service+0x3c4>)
    707c:	4798      	blx	r3
    707e:	1e03      	subs	r3, r0, #0
    7080:	d01e      	beq.n	70c0 <vTask_GSM_service+0x158>
	{
		boolGsm_config_flag			=false;
    7082:	232c      	movs	r3, #44	; 0x2c
    7084:	33ff      	adds	r3, #255	; 0xff
    7086:	18fb      	adds	r3, r7, r3
    7088:	2200      	movs	r2, #0
    708a:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
    708c:	2395      	movs	r3, #149	; 0x95
    708e:	005b      	lsls	r3, r3, #1
    7090:	18fb      	adds	r3, r7, r3
    7092:	2200      	movs	r2, #0
    7094:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
    7096:	4ba6      	ldr	r3, [pc, #664]	; (7330 <vTask_GSM_service+0x3c8>)
    7098:	4aa5      	ldr	r2, [pc, #660]	; (7330 <vTask_GSM_service+0x3c8>)
    709a:	6812      	ldr	r2, [r2, #0]
    709c:	2180      	movs	r1, #128	; 0x80
    709e:	0249      	lsls	r1, r1, #9
    70a0:	430a      	orrs	r2, r1
    70a2:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
    70a4:	4ba3      	ldr	r3, [pc, #652]	; (7334 <vTask_GSM_service+0x3cc>)
    70a6:	0018      	movs	r0, r3
    70a8:	4ba3      	ldr	r3, [pc, #652]	; (7338 <vTask_GSM_service+0x3d0>)
    70aa:	4798      	blx	r3
		GSM_PWR_OFF;
    70ac:	4ba0      	ldr	r3, [pc, #640]	; (7330 <vTask_GSM_service+0x3c8>)
    70ae:	4aa0      	ldr	r2, [pc, #640]	; (7330 <vTask_GSM_service+0x3c8>)
    70b0:	6812      	ldr	r2, [r2, #0]
    70b2:	49a2      	ldr	r1, [pc, #648]	; (733c <vTask_GSM_service+0x3d4>)
    70b4:	400a      	ands	r2, r1
    70b6:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
    70b8:	4ba1      	ldr	r3, [pc, #644]	; (7340 <vTask_GSM_service+0x3d8>)
    70ba:	0018      	movs	r0, r3
    70bc:	4b9e      	ldr	r3, [pc, #632]	; (7338 <vTask_GSM_service+0x3d0>)
    70be:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
    70c0:	201b      	movs	r0, #27
    70c2:	4b9a      	ldr	r3, [pc, #616]	; (732c <vTask_GSM_service+0x3c4>)
    70c4:	4798      	blx	r3
    70c6:	1e03      	subs	r3, r0, #0
    70c8:	d101      	bne.n	70ce <vTask_GSM_service+0x166>
    70ca:	f000 fc69 	bl	79a0 <vTask_GSM_service+0xa38>
		{
			if (boolGsm_config_flag == false)
    70ce:	232c      	movs	r3, #44	; 0x2c
    70d0:	33ff      	adds	r3, #255	; 0xff
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	2201      	movs	r2, #1
    70d8:	4053      	eors	r3, r2
    70da:	b2db      	uxtb	r3, r3
    70dc:	2b00      	cmp	r3, #0
    70de:	d038      	beq.n	7152 <vTask_GSM_service+0x1ea>
			{
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
    70e0:	4b98      	ldr	r3, [pc, #608]	; (7344 <vTask_GSM_service+0x3dc>)
    70e2:	4798      	blx	r3
    70e4:	0003      	movs	r3, r0
    70e6:	2b09      	cmp	r3, #9
    70e8:	d12d      	bne.n	7146 <vTask_GSM_service+0x1de>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
    70ea:	4b97      	ldr	r3, [pc, #604]	; (7348 <vTask_GSM_service+0x3e0>)
    70ec:	4798      	blx	r3
    70ee:	1e03      	subs	r3, r0, #0
    70f0:	d123      	bne.n	713a <vTask_GSM_service+0x1d2>
					{
						for (uint8_t i=0;i<20;i++)
    70f2:	232a      	movs	r3, #42	; 0x2a
    70f4:	33ff      	adds	r3, #255	; 0xff
    70f6:	18fb      	adds	r3, r7, r3
    70f8:	2200      	movs	r2, #0
    70fa:	701a      	strb	r2, [r3, #0]
    70fc:	e011      	b.n	7122 <vTask_GSM_service+0x1ba>
						{
							Signal_Strength = gsm_getsignalstrength();
    70fe:	4b93      	ldr	r3, [pc, #588]	; (734c <vTask_GSM_service+0x3e4>)
    7100:	4798      	blx	r3
    7102:	0003      	movs	r3, r0
    7104:	001a      	movs	r2, r3
    7106:	4b72      	ldr	r3, [pc, #456]	; (72d0 <vTask_GSM_service+0x368>)
    7108:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
    710a:	2032      	movs	r0, #50	; 0x32
    710c:	4b8a      	ldr	r3, [pc, #552]	; (7338 <vTask_GSM_service+0x3d0>)
    710e:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
    7110:	232a      	movs	r3, #42	; 0x2a
    7112:	33ff      	adds	r3, #255	; 0xff
    7114:	18fb      	adds	r3, r7, r3
    7116:	781a      	ldrb	r2, [r3, #0]
    7118:	232a      	movs	r3, #42	; 0x2a
    711a:	33ff      	adds	r3, #255	; 0xff
    711c:	18fb      	adds	r3, r7, r3
    711e:	3201      	adds	r2, #1
    7120:	701a      	strb	r2, [r3, #0]
    7122:	232a      	movs	r3, #42	; 0x2a
    7124:	33ff      	adds	r3, #255	; 0xff
    7126:	18fb      	adds	r3, r7, r3
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	2b13      	cmp	r3, #19
    712c:	d9e7      	bls.n	70fe <vTask_GSM_service+0x196>
						}
						boolGsm_config_flag = true;
    712e:	232c      	movs	r3, #44	; 0x2c
    7130:	33ff      	adds	r3, #255	; 0xff
    7132:	18fb      	adds	r3, r7, r3
    7134:	2201      	movs	r2, #1
    7136:	701a      	strb	r2, [r3, #0]
    7138:	e7c2      	b.n	70c0 <vTask_GSM_service+0x158>
					}
					else
					{
						boolGsm_config_flag = false;
    713a:	232c      	movs	r3, #44	; 0x2c
    713c:	33ff      	adds	r3, #255	; 0xff
    713e:	18fb      	adds	r3, r7, r3
    7140:	2200      	movs	r2, #0
    7142:	701a      	strb	r2, [r3, #0]
    7144:	e7bc      	b.n	70c0 <vTask_GSM_service+0x158>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
    7146:	23fa      	movs	r3, #250	; 0xfa
    7148:	00db      	lsls	r3, r3, #3
    714a:	0018      	movs	r0, r3
    714c:	4b7a      	ldr	r3, [pc, #488]	; (7338 <vTask_GSM_service+0x3d0>)
    714e:	4798      	blx	r3
    7150:	e7b6      	b.n	70c0 <vTask_GSM_service+0x158>
				}
			}
			else
			{
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
    7152:	2395      	movs	r3, #149	; 0x95
    7154:	005b      	lsls	r3, r3, #1
    7156:	18fb      	adds	r3, r7, r3
    7158:	781b      	ldrb	r3, [r3, #0]
    715a:	2201      	movs	r2, #1
    715c:	4053      	eors	r3, r2
    715e:	b2db      	uxtb	r3, r3
    7160:	2b00      	cmp	r3, #0
    7162:	d01a      	beq.n	719a <vTask_GSM_service+0x232>
    7164:	232c      	movs	r3, #44	; 0x2c
    7166:	33ff      	adds	r3, #255	; 0xff
    7168:	18fb      	adds	r3, r7, r3
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	2b00      	cmp	r3, #0
    716e:	d014      	beq.n	719a <vTask_GSM_service+0x232>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    7170:	4b77      	ldr	r3, [pc, #476]	; (7350 <vTask_GSM_service+0x3e8>)
    7172:	4798      	blx	r3
    7174:	1e03      	subs	r3, r0, #0
    7176:	d109      	bne.n	718c <vTask_GSM_service+0x224>
					{
						boolOne_Time_Msg_Delete_Flag = true;
    7178:	2395      	movs	r3, #149	; 0x95
    717a:	005b      	lsls	r3, r3, #1
    717c:	18fb      	adds	r3, r7, r3
    717e:	2201      	movs	r2, #1
    7180:	701a      	strb	r2, [r3, #0]
						initialized = true;
    7182:	4b50      	ldr	r3, [pc, #320]	; (72c4 <vTask_GSM_service+0x35c>)
    7184:	2201      	movs	r2, #1
    7186:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    7188:	f000 fc2f 	bl	79ea <vTask_GSM_service+0xa82>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
    718c:	2395      	movs	r3, #149	; 0x95
    718e:	005b      	lsls	r3, r3, #1
    7190:	18fb      	adds	r3, r7, r3
    7192:	2200      	movs	r2, #0
    7194:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    7196:	f000 fc28 	bl	79ea <vTask_GSM_service+0xa82>
					}
				}
				else
				{
					if(!getACPowerState() &&  gsm_module_sleep_elligible())
    719a:	4b6e      	ldr	r3, [pc, #440]	; (7354 <vTask_GSM_service+0x3ec>)
    719c:	4798      	blx	r3
    719e:	0003      	movs	r3, r0
    71a0:	001a      	movs	r2, r3
    71a2:	2301      	movs	r3, #1
    71a4:	4053      	eors	r3, r2
    71a6:	b2db      	uxtb	r3, r3
    71a8:	2b00      	cmp	r3, #0
    71aa:	d005      	beq.n	71b8 <vTask_GSM_service+0x250>
    71ac:	4b6a      	ldr	r3, [pc, #424]	; (7358 <vTask_GSM_service+0x3f0>)
    71ae:	4798      	blx	r3
    71b0:	1e03      	subs	r3, r0, #0
    71b2:	d001      	beq.n	71b8 <vTask_GSM_service+0x250>
					{
						gsm_module_enter_sleep();
    71b4:	4b69      	ldr	r3, [pc, #420]	; (735c <vTask_GSM_service+0x3f4>)
    71b6:	4798      	blx	r3
					}
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
    71b8:	4b4a      	ldr	r3, [pc, #296]	; (72e4 <vTask_GSM_service+0x37c>)
    71ba:	781b      	ldrb	r3, [r3, #0]
    71bc:	b2db      	uxtb	r3, r3
    71be:	2b4e      	cmp	r3, #78	; 0x4e
    71c0:	d12e      	bne.n	7220 <vTask_GSM_service+0x2b8>
    71c2:	4b49      	ldr	r3, [pc, #292]	; (72e8 <vTask_GSM_service+0x380>)
    71c4:	781b      	ldrb	r3, [r3, #0]
    71c6:	b2db      	uxtb	r3, r3
    71c8:	2b4e      	cmp	r3, #78	; 0x4e
    71ca:	d129      	bne.n	7220 <vTask_GSM_service+0x2b8>
					{
						if(isGSMModuleAwake)
    71cc:	4b64      	ldr	r3, [pc, #400]	; (7360 <vTask_GSM_service+0x3f8>)
    71ce:	781b      	ldrb	r3, [r3, #0]
    71d0:	2b00      	cmp	r3, #0
    71d2:	d017      	beq.n	7204 <vTask_GSM_service+0x29c>
						{
							////Update network
							if (xTaskGetTickCount() - network_update_time>= (1*30*1000))
    71d4:	4b63      	ldr	r3, [pc, #396]	; (7364 <vTask_GSM_service+0x3fc>)
    71d6:	4798      	blx	r3
    71d8:	0002      	movs	r2, r0
    71da:	2396      	movs	r3, #150	; 0x96
    71dc:	005b      	lsls	r3, r3, #1
    71de:	18fb      	adds	r3, r7, r3
    71e0:	681b      	ldr	r3, [r3, #0]
    71e2:	1ad3      	subs	r3, r2, r3
    71e4:	4a60      	ldr	r2, [pc, #384]	; (7368 <vTask_GSM_service+0x400>)
    71e6:	4293      	cmp	r3, r2
    71e8:	d90c      	bls.n	7204 <vTask_GSM_service+0x29c>
							{
								network_update_time = xTaskGetTickCount();
    71ea:	4b5e      	ldr	r3, [pc, #376]	; (7364 <vTask_GSM_service+0x3fc>)
    71ec:	4798      	blx	r3
    71ee:	0003      	movs	r3, r0
    71f0:	2296      	movs	r2, #150	; 0x96
    71f2:	0052      	lsls	r2, r2, #1
    71f4:	18ba      	adds	r2, r7, r2
    71f6:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
    71f8:	4b54      	ldr	r3, [pc, #336]	; (734c <vTask_GSM_service+0x3e4>)
    71fa:	4798      	blx	r3
    71fc:	0003      	movs	r3, r0
    71fe:	001a      	movs	r2, r3
    7200:	4b33      	ldr	r3, [pc, #204]	; (72d0 <vTask_GSM_service+0x368>)
    7202:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
    7204:	4b59      	ldr	r3, [pc, #356]	; (736c <vTask_GSM_service+0x404>)
    7206:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    7208:	4b3c      	ldr	r3, [pc, #240]	; (72fc <vTask_GSM_service+0x394>)
    720a:	781b      	ldrb	r3, [r3, #0]
    720c:	2b00      	cmp	r3, #0
    720e:	d104      	bne.n	721a <vTask_GSM_service+0x2b2>
    7210:	4b43      	ldr	r3, [pc, #268]	; (7320 <vTask_GSM_service+0x3b8>)
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	2b00      	cmp	r3, #0
    7216:	d100      	bne.n	721a <vTask_GSM_service+0x2b2>
    7218:	e0bc      	b.n	7394 <vTask_GSM_service+0x42c>
						{
							operateOnStagedEvent();
    721a:	4b55      	ldr	r3, [pc, #340]	; (7370 <vTask_GSM_service+0x408>)
    721c:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    721e:	e0b9      	b.n	7394 <vTask_GSM_service+0x42c>
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
    7220:	4b30      	ldr	r3, [pc, #192]	; (72e4 <vTask_GSM_service+0x37c>)
    7222:	781b      	ldrb	r3, [r3, #0]
    7224:	b2db      	uxtb	r3, r3
    7226:	2b49      	cmp	r3, #73	; 0x49
    7228:	d005      	beq.n	7236 <vTask_GSM_service+0x2ce>
    722a:	4b2e      	ldr	r3, [pc, #184]	; (72e4 <vTask_GSM_service+0x37c>)
    722c:	781b      	ldrb	r3, [r3, #0]
    722e:	b2db      	uxtb	r3, r3
    7230:	2b52      	cmp	r3, #82	; 0x52
    7232:	d000      	beq.n	7236 <vTask_GSM_service+0x2ce>
    7234:	e0af      	b.n	7396 <vTask_GSM_service+0x42e>
					{
						if (callTimerExpire())
    7236:	4b4f      	ldr	r3, [pc, #316]	; (7374 <vTask_GSM_service+0x40c>)
    7238:	4798      	blx	r3
    723a:	1e03      	subs	r3, r0, #0
    723c:	d00e      	beq.n	725c <vTask_GSM_service+0x2f4>
						{
							char t1 = actionType;
    723e:	2326      	movs	r3, #38	; 0x26
    7240:	33ff      	adds	r3, #255	; 0xff
    7242:	18fb      	adds	r3, r7, r3
    7244:	4a4c      	ldr	r2, [pc, #304]	; (7378 <vTask_GSM_service+0x410>)
    7246:	7812      	ldrb	r2, [r2, #0]
    7248:	701a      	strb	r2, [r3, #0]
							endCall();
    724a:	4b4c      	ldr	r3, [pc, #304]	; (737c <vTask_GSM_service+0x414>)
    724c:	4798      	blx	r3
							checkRespSMS(t1);
    724e:	2326      	movs	r3, #38	; 0x26
    7250:	33ff      	adds	r3, #255	; 0xff
    7252:	18fb      	adds	r3, r7, r3
    7254:	781b      	ldrb	r3, [r3, #0]
    7256:	0018      	movs	r0, r3
    7258:	4b49      	ldr	r3, [pc, #292]	; (7380 <vTask_GSM_service+0x418>)
    725a:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
    725c:	4b2b      	ldr	r3, [pc, #172]	; (730c <vTask_GSM_service+0x3a4>)
    725e:	78db      	ldrb	r3, [r3, #3]
    7260:	2b00      	cmp	r3, #0
    7262:	d020      	beq.n	72a6 <vTask_GSM_service+0x33e>
						{
							if(m2mEvent && callAccepted)
    7264:	4b2f      	ldr	r3, [pc, #188]	; (7324 <vTask_GSM_service+0x3bc>)
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	2b00      	cmp	r3, #0
    726a:	d01c      	beq.n	72a6 <vTask_GSM_service+0x33e>
    726c:	4b1f      	ldr	r3, [pc, #124]	; (72ec <vTask_GSM_service+0x384>)
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	2b00      	cmp	r3, #0
    7272:	d018      	beq.n	72a6 <vTask_GSM_service+0x33e>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
    7274:	4b2c      	ldr	r3, [pc, #176]	; (7328 <vTask_GSM_service+0x3c0>)
    7276:	781b      	ldrb	r3, [r3, #0]
    7278:	2201      	movs	r2, #1
    727a:	4053      	eors	r3, r2
    727c:	b2db      	uxtb	r3, r3
    727e:	2b00      	cmp	r3, #0
    7280:	d011      	beq.n	72a6 <vTask_GSM_service+0x33e>
    7282:	4b38      	ldr	r3, [pc, #224]	; (7364 <vTask_GSM_service+0x3fc>)
    7284:	4798      	blx	r3
    7286:	0002      	movs	r2, r0
    7288:	4b3e      	ldr	r3, [pc, #248]	; (7384 <vTask_GSM_service+0x41c>)
    728a:	681b      	ldr	r3, [r3, #0]
    728c:	1ad2      	subs	r2, r2, r3
    728e:	23fa      	movs	r3, #250	; 0xfa
    7290:	00db      	lsls	r3, r3, #3
    7292:	429a      	cmp	r2, r3
    7294:	d907      	bls.n	72a6 <vTask_GSM_service+0x33e>
								{
									keyPressed=true;
    7296:	4b24      	ldr	r3, [pc, #144]	; (7328 <vTask_GSM_service+0x3c0>)
    7298:	2201      	movs	r2, #1
    729a:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
    729c:	4b1e      	ldr	r3, [pc, #120]	; (7318 <vTask_GSM_service+0x3b0>)
    729e:	781b      	ldrb	r3, [r3, #0]
    72a0:	0018      	movs	r0, r3
    72a2:	4b39      	ldr	r3, [pc, #228]	; (7388 <vTask_GSM_service+0x420>)
    72a4:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
    72a6:	4b39      	ldr	r3, [pc, #228]	; (738c <vTask_GSM_service+0x424>)
    72a8:	4798      	blx	r3
    72aa:	1e03      	subs	r3, r0, #0
    72ac:	d073      	beq.n	7396 <vTask_GSM_service+0x42e>
						{
							triggerPlaySound();
    72ae:	4b38      	ldr	r3, [pc, #224]	; (7390 <vTask_GSM_service+0x428>)
    72b0:	4798      	blx	r3
    72b2:	e070      	b.n	7396 <vTask_GSM_service+0x42e>
    72b4:	41004480 	.word	0x41004480
    72b8:	00003fed 	.word	0x00003fed
    72bc:	00011f79 	.word	0x00011f79
    72c0:	00002059 	.word	0x00002059
    72c4:	20000775 	.word	0x20000775
    72c8:	20000774 	.word	0x20000774
    72cc:	2000075f 	.word	0x2000075f
    72d0:	20000762 	.word	0x20000762
    72d4:	2000079d 	.word	0x2000079d
    72d8:	20000816 	.word	0x20000816
    72dc:	2000073c 	.word	0x2000073c
    72e0:	200006d8 	.word	0x200006d8
    72e4:	200007a8 	.word	0x200007a8
    72e8:	20000767 	.word	0x20000767
    72ec:	20000776 	.word	0x20000776
    72f0:	2000071c 	.word	0x2000071c
    72f4:	2000074a 	.word	0x2000074a
    72f8:	20000755 	.word	0x20000755
    72fc:	2000079a 	.word	0x2000079a
    7300:	2000074c 	.word	0x2000074c
    7304:	20000770 	.word	0x20000770
    7308:	200006d9 	.word	0x200006d9
    730c:	20000628 	.word	0x20000628
    7310:	200007c7 	.word	0x200007c7
    7314:	20000714 	.word	0x20000714
    7318:	20000715 	.word	0x20000715
    731c:	2000079b 	.word	0x2000079b
    7320:	20000766 	.word	0x20000766
    7324:	2000071b 	.word	0x2000071b
    7328:	20000798 	.word	0x20000798
    732c:	00004011 	.word	0x00004011
    7330:	41004490 	.word	0x41004490
    7334:	00000bb8 	.word	0x00000bb8
    7338:	0000f0a9 	.word	0x0000f0a9
    733c:	fffeffff 	.word	0xfffeffff
    7340:	00001388 	.word	0x00001388
    7344:	000024f5 	.word	0x000024f5
    7348:	000031e1 	.word	0x000031e1
    734c:	00002791 	.word	0x00002791
    7350:	000025e1 	.word	0x000025e1
    7354:	00009ef9 	.word	0x00009ef9
    7358:	00002291 	.word	0x00002291
    735c:	00002271 	.word	0x00002271
    7360:	20000231 	.word	0x20000231
    7364:	0000f40d 	.word	0x0000f40d
    7368:	0000752f 	.word	0x0000752f
    736c:	00004055 	.word	0x00004055
    7370:	00004095 	.word	0x00004095
    7374:	000046f5 	.word	0x000046f5
    7378:	2000073b 	.word	0x2000073b
    737c:	0000419d 	.word	0x0000419d
    7380:	000049b1 	.word	0x000049b1
    7384:	200007d0 	.word	0x200007d0
    7388:	00006ed5 	.word	0x00006ed5
    738c:	0000455d 	.word	0x0000455d
    7390:	000045a9 	.word	0x000045a9
						if (eventStaged || m2mEventStaged)
    7394:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
    7396:	4bde      	ldr	r3, [pc, #888]	; (7710 <vTask_GSM_service+0x7a8>)
    7398:	2298      	movs	r2, #152	; 0x98
    739a:	0052      	lsls	r2, r2, #1
    739c:	4694      	mov	ip, r2
    739e:	44bc      	add	ip, r7
    73a0:	4463      	add	r3, ip
    73a2:	0018      	movs	r0, r3
    73a4:	2340      	movs	r3, #64	; 0x40
    73a6:	001a      	movs	r2, r3
    73a8:	2100      	movs	r1, #0
    73aa:	4bda      	ldr	r3, [pc, #872]	; (7714 <vTask_GSM_service+0x7ac>)
    73ac:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
    73ae:	230c      	movs	r3, #12
    73b0:	18fb      	adds	r3, r7, r3
    73b2:	2140      	movs	r1, #64	; 0x40
    73b4:	0018      	movs	r0, r3
    73b6:	4bd8      	ldr	r3, [pc, #864]	; (7718 <vTask_GSM_service+0x7b0>)
    73b8:	4798      	blx	r3
    73ba:	1e03      	subs	r3, r0, #0
    73bc:	d100      	bne.n	73c0 <vTask_GSM_service+0x458>
    73be:	e67f      	b.n	70c0 <vTask_GSM_service+0x158>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
    73c0:	2392      	movs	r3, #146	; 0x92
    73c2:	005b      	lsls	r3, r3, #1
    73c4:	18fc      	adds	r4, r7, r3
    73c6:	230c      	movs	r3, #12
    73c8:	18fb      	adds	r3, r7, r3
    73ca:	0018      	movs	r0, r3
    73cc:	4bd3      	ldr	r3, [pc, #844]	; (771c <vTask_GSM_service+0x7b4>)
    73ce:	4798      	blx	r3
    73d0:	0003      	movs	r3, r0
    73d2:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
    73d4:	2392      	movs	r3, #146	; 0x92
    73d6:	005b      	lsls	r3, r3, #1
    73d8:	18fb      	adds	r3, r7, r3
    73da:	781b      	ldrb	r3, [r3, #0]
    73dc:	2b00      	cmp	r3, #0
    73de:	d100      	bne.n	73e2 <vTask_GSM_service+0x47a>
    73e0:	e0d5      	b.n	758e <vTask_GSM_service+0x626>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
    73e2:	234c      	movs	r3, #76	; 0x4c
    73e4:	18fa      	adds	r2, r7, r3
    73e6:	1c79      	adds	r1, r7, #1
    73e8:	31ff      	adds	r1, #255	; 0xff
    73ea:	2392      	movs	r3, #146	; 0x92
    73ec:	005b      	lsls	r3, r3, #1
    73ee:	18fb      	adds	r3, r7, r3
    73f0:	7818      	ldrb	r0, [r3, #0]
    73f2:	23a0      	movs	r3, #160	; 0xa0
    73f4:	9300      	str	r3, [sp, #0]
    73f6:	0013      	movs	r3, r2
    73f8:	220f      	movs	r2, #15
    73fa:	4cc9      	ldr	r4, [pc, #804]	; (7720 <vTask_GSM_service+0x7b8>)
    73fc:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
    73fe:	2324      	movs	r3, #36	; 0x24
    7400:	33ff      	adds	r3, #255	; 0xff
    7402:	18fc      	adds	r4, r7, r3
    7404:	1c7b      	adds	r3, r7, #1
    7406:	33ff      	adds	r3, #255	; 0xff
    7408:	0018      	movs	r0, r3
    740a:	4bc6      	ldr	r3, [pc, #792]	; (7724 <vTask_GSM_service+0x7bc>)
    740c:	4798      	blx	r3
    740e:	0003      	movs	r3, r0
    7410:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
    7412:	2391      	movs	r3, #145	; 0x91
    7414:	005b      	lsls	r3, r3, #1
    7416:	18fc      	adds	r4, r7, r3
    7418:	1c7b      	adds	r3, r7, #1
    741a:	33ff      	adds	r3, #255	; 0xff
    741c:	0018      	movs	r0, r3
    741e:	4bc2      	ldr	r3, [pc, #776]	; (7728 <vTask_GSM_service+0x7c0>)
    7420:	4798      	blx	r3
    7422:	0003      	movs	r3, r0
    7424:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
    7426:	2322      	movs	r3, #34	; 0x22
    7428:	33ff      	adds	r3, #255	; 0xff
    742a:	18fc      	adds	r4, r7, r3
    742c:	1c7b      	adds	r3, r7, #1
    742e:	33ff      	adds	r3, #255	; 0xff
    7430:	0018      	movs	r0, r3
    7432:	4bbe      	ldr	r3, [pc, #760]	; (772c <vTask_GSM_service+0x7c4>)
    7434:	4798      	blx	r3
    7436:	0003      	movs	r3, r0
    7438:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
    743a:	2394      	movs	r3, #148	; 0x94
    743c:	005b      	lsls	r3, r3, #1
    743e:	18fb      	adds	r3, r7, r3
    7440:	2201      	movs	r2, #1
    7442:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
    7444:	4bba      	ldr	r3, [pc, #744]	; (7730 <vTask_GSM_service+0x7c8>)
    7446:	2200      	movs	r2, #0
    7448:	0019      	movs	r1, r3
    744a:	2004      	movs	r0, #4
    744c:	4bb9      	ldr	r3, [pc, #740]	; (7734 <vTask_GSM_service+0x7cc>)
    744e:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
    7450:	234c      	movs	r3, #76	; 0x4c
    7452:	18fb      	adds	r3, r7, r3
    7454:	0018      	movs	r0, r3
    7456:	4bb8      	ldr	r3, [pc, #736]	; (7738 <vTask_GSM_service+0x7d0>)
    7458:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+17,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
    745a:	2324      	movs	r3, #36	; 0x24
    745c:	33ff      	adds	r3, #255	; 0xff
    745e:	18fb      	adds	r3, r7, r3
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	2b00      	cmp	r3, #0
    7464:	d10b      	bne.n	747e <vTask_GSM_service+0x516>
    7466:	2391      	movs	r3, #145	; 0x91
    7468:	005b      	lsls	r3, r3, #1
    746a:	18fb      	adds	r3, r7, r3
    746c:	781b      	ldrb	r3, [r3, #0]
    746e:	2b00      	cmp	r3, #0
    7470:	d105      	bne.n	747e <vTask_GSM_service+0x516>
    7472:	2322      	movs	r3, #34	; 0x22
    7474:	33ff      	adds	r3, #255	; 0xff
    7476:	18fb      	adds	r3, r7, r3
    7478:	781b      	ldrb	r3, [r3, #0]
    747a:	2b00      	cmp	r3, #0
    747c:	d031      	beq.n	74e2 <vTask_GSM_service+0x57a>
							{
								if(StringstartsWith(Received_SMS,"#"))
    747e:	4aaf      	ldr	r2, [pc, #700]	; (773c <vTask_GSM_service+0x7d4>)
    7480:	234c      	movs	r3, #76	; 0x4c
    7482:	18fb      	adds	r3, r7, r3
    7484:	0011      	movs	r1, r2
    7486:	0018      	movs	r0, r3
    7488:	4bad      	ldr	r3, [pc, #692]	; (7740 <vTask_GSM_service+0x7d8>)
    748a:	4798      	blx	r3
    748c:	1e03      	subs	r3, r0, #0
    748e:	d013      	beq.n	74b8 <vTask_GSM_service+0x550>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
    7490:	234c      	movs	r3, #76	; 0x4c
    7492:	18fc      	adds	r4, r7, r3
    7494:	3401      	adds	r4, #1
    7496:	234c      	movs	r3, #76	; 0x4c
    7498:	18fb      	adds	r3, r7, r3
    749a:	0018      	movs	r0, r3
    749c:	4ba9      	ldr	r3, [pc, #676]	; (7744 <vTask_GSM_service+0x7dc>)
    749e:	4798      	blx	r3
    74a0:	0002      	movs	r2, r0
    74a2:	234c      	movs	r3, #76	; 0x4c
    74a4:	18fb      	adds	r3, r7, r3
    74a6:	0021      	movs	r1, r4
    74a8:	0018      	movs	r0, r3
    74aa:	4ba7      	ldr	r3, [pc, #668]	; (7748 <vTask_GSM_service+0x7e0>)
    74ac:	4798      	blx	r3
									response_sms_processed_cmd=false;
    74ae:	2394      	movs	r3, #148	; 0x94
    74b0:	005b      	lsls	r3, r3, #1
    74b2:	18fb      	adds	r3, r7, r3
    74b4:	2200      	movs	r2, #0
    74b6:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
    74b8:	2322      	movs	r3, #34	; 0x22
    74ba:	33ff      	adds	r3, #255	; 0xff
    74bc:	18fb      	adds	r3, r7, r3
    74be:	781c      	ldrb	r4, [r3, #0]
    74c0:	2394      	movs	r3, #148	; 0x94
    74c2:	005b      	lsls	r3, r3, #1
    74c4:	18fb      	adds	r3, r7, r3
    74c6:	781a      	ldrb	r2, [r3, #0]
    74c8:	2324      	movs	r3, #36	; 0x24
    74ca:	33ff      	adds	r3, #255	; 0xff
    74cc:	18fb      	adds	r3, r7, r3
    74ce:	7819      	ldrb	r1, [r3, #0]
    74d0:	234c      	movs	r3, #76	; 0x4c
    74d2:	18f8      	adds	r0, r7, r3
    74d4:	1c7b      	adds	r3, r7, #1
    74d6:	33ff      	adds	r3, #255	; 0xff
    74d8:	9300      	str	r3, [sp, #0]
    74da:	0023      	movs	r3, r4
    74dc:	4c9b      	ldr	r4, [pc, #620]	; (774c <vTask_GSM_service+0x7e4>)
    74de:	47a0      	blx	r4
    74e0:	e053      	b.n	758a <vTask_GSM_service+0x622>
							}
							else if(isM2MNumber(phone_number))
    74e2:	1c7b      	adds	r3, r7, #1
    74e4:	33ff      	adds	r3, #255	; 0xff
    74e6:	0018      	movs	r0, r3
    74e8:	4b99      	ldr	r3, [pc, #612]	; (7750 <vTask_GSM_service+0x7e8>)
    74ea:	4798      	blx	r3
    74ec:	1e03      	subs	r3, r0, #0
    74ee:	d01f      	beq.n	7530 <vTask_GSM_service+0x5c8>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
    74f0:	4a98      	ldr	r2, [pc, #608]	; (7754 <vTask_GSM_service+0x7ec>)
    74f2:	234c      	movs	r3, #76	; 0x4c
    74f4:	18fb      	adds	r3, r7, r3
    74f6:	0011      	movs	r1, r2
    74f8:	0018      	movs	r0, r3
    74fa:	4b91      	ldr	r3, [pc, #580]	; (7740 <vTask_GSM_service+0x7d8>)
    74fc:	4798      	blx	r3
    74fe:	1e03      	subs	r3, r0, #0
    7500:	d043      	beq.n	758a <vTask_GSM_service+0x622>
								{
									setM2MVerify(true);
    7502:	2001      	movs	r0, #1
    7504:	4b94      	ldr	r3, [pc, #592]	; (7758 <vTask_GSM_service+0x7f0>)
    7506:	4798      	blx	r3
									getM2MNumber(phone_number);
    7508:	1c7b      	adds	r3, r7, #1
    750a:	33ff      	adds	r3, #255	; 0xff
    750c:	0018      	movs	r0, r3
    750e:	4b93      	ldr	r3, [pc, #588]	; (775c <vTask_GSM_service+0x7f4>)
    7510:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    7512:	1c7b      	adds	r3, r7, #1
    7514:	33ff      	adds	r3, #255	; 0xff
    7516:	2200      	movs	r2, #0
    7518:	0019      	movs	r1, r3
    751a:	2005      	movs	r0, #5
    751c:	4b85      	ldr	r3, [pc, #532]	; (7734 <vTask_GSM_service+0x7cc>)
    751e:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
    7520:	4a8f      	ldr	r2, [pc, #572]	; (7760 <vTask_GSM_service+0x7f8>)
    7522:	1c7b      	adds	r3, r7, #1
    7524:	33ff      	adds	r3, #255	; 0xff
    7526:	0011      	movs	r1, r2
    7528:	0018      	movs	r0, r3
    752a:	4b8e      	ldr	r3, [pc, #568]	; (7764 <vTask_GSM_service+0x7fc>)
    752c:	4798      	blx	r3
    752e:	e02c      	b.n	758a <vTask_GSM_service+0x622>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
    7530:	4b8d      	ldr	r3, [pc, #564]	; (7768 <vTask_GSM_service+0x800>)
    7532:	78db      	ldrb	r3, [r3, #3]
    7534:	2b00      	cmp	r3, #0
    7536:	d028      	beq.n	758a <vTask_GSM_service+0x622>
    7538:	1c7b      	adds	r3, r7, #1
    753a:	33ff      	adds	r3, #255	; 0xff
    753c:	0018      	movs	r0, r3
    753e:	4b8b      	ldr	r3, [pc, #556]	; (776c <vTask_GSM_service+0x804>)
    7540:	4798      	blx	r3
    7542:	1e03      	subs	r3, r0, #0
    7544:	d021      	beq.n	758a <vTask_GSM_service+0x622>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
    7546:	4a86      	ldr	r2, [pc, #536]	; (7760 <vTask_GSM_service+0x7f8>)
    7548:	234c      	movs	r3, #76	; 0x4c
    754a:	18fb      	adds	r3, r7, r3
    754c:	0011      	movs	r1, r2
    754e:	0018      	movs	r0, r3
    7550:	4b7b      	ldr	r3, [pc, #492]	; (7740 <vTask_GSM_service+0x7d8>)
    7552:	4798      	blx	r3
    7554:	1e03      	subs	r3, r0, #0
    7556:	d018      	beq.n	758a <vTask_GSM_service+0x622>
								{
									setM2MRemoteVerified(true);
    7558:	2001      	movs	r0, #1
    755a:	4b85      	ldr	r3, [pc, #532]	; (7770 <vTask_GSM_service+0x808>)
    755c:	4798      	blx	r3
									saveM2MSettings(true);
    755e:	2001      	movs	r0, #1
    7560:	4b84      	ldr	r3, [pc, #528]	; (7774 <vTask_GSM_service+0x80c>)
    7562:	4798      	blx	r3
									getActiveNumber(phone_number);
    7564:	1c7b      	adds	r3, r7, #1
    7566:	33ff      	adds	r3, #255	; 0xff
    7568:	0018      	movs	r0, r3
    756a:	4b83      	ldr	r3, [pc, #524]	; (7778 <vTask_GSM_service+0x810>)
    756c:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    756e:	1c7b      	adds	r3, r7, #1
    7570:	33ff      	adds	r3, #255	; 0xff
    7572:	2200      	movs	r2, #0
    7574:	0019      	movs	r1, r3
    7576:	2005      	movs	r0, #5
    7578:	4b6e      	ldr	r3, [pc, #440]	; (7734 <vTask_GSM_service+0x7cc>)
    757a:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
    757c:	4a7f      	ldr	r2, [pc, #508]	; (777c <vTask_GSM_service+0x814>)
    757e:	1c7b      	adds	r3, r7, #1
    7580:	33ff      	adds	r3, #255	; 0xff
    7582:	0011      	movs	r1, r2
    7584:	0018      	movs	r0, r3
    7586:	4b77      	ldr	r3, [pc, #476]	; (7764 <vTask_GSM_service+0x7fc>)
    7588:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
    758a:	4b7d      	ldr	r3, [pc, #500]	; (7780 <vTask_GSM_service+0x818>)
    758c:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
    758e:	4b7d      	ldr	r3, [pc, #500]	; (7784 <vTask_GSM_service+0x81c>)
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	2201      	movs	r2, #1
    7594:	4053      	eors	r3, r2
    7596:	b2db      	uxtb	r3, r3
    7598:	2b00      	cmp	r3, #0
    759a:	d100      	bne.n	759e <vTask_GSM_service+0x636>
    759c:	e099      	b.n	76d2 <vTask_GSM_service+0x76a>
    759e:	4b7a      	ldr	r3, [pc, #488]	; (7788 <vTask_GSM_service+0x820>)
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	b2db      	uxtb	r3, r3
    75a4:	2b4e      	cmp	r3, #78	; 0x4e
    75a6:	d005      	beq.n	75b4 <vTask_GSM_service+0x64c>
    75a8:	4b77      	ldr	r3, [pc, #476]	; (7788 <vTask_GSM_service+0x820>)
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	b2db      	uxtb	r3, r3
    75ae:	2b52      	cmp	r3, #82	; 0x52
    75b0:	d000      	beq.n	75b4 <vTask_GSM_service+0x64c>
    75b2:	e08e      	b.n	76d2 <vTask_GSM_service+0x76a>
    75b4:	4b75      	ldr	r3, [pc, #468]	; (778c <vTask_GSM_service+0x824>)
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	b2db      	uxtb	r3, r3
    75ba:	2b4e      	cmp	r3, #78	; 0x4e
    75bc:	d005      	beq.n	75ca <vTask_GSM_service+0x662>
    75be:	4b73      	ldr	r3, [pc, #460]	; (778c <vTask_GSM_service+0x824>)
    75c0:	781b      	ldrb	r3, [r3, #0]
    75c2:	b2db      	uxtb	r3, r3
    75c4:	2b49      	cmp	r3, #73	; 0x49
    75c6:	d000      	beq.n	75ca <vTask_GSM_service+0x662>
    75c8:	e083      	b.n	76d2 <vTask_GSM_service+0x76a>
						{
							if (gsm_responseLine_isRinging(response))
    75ca:	230c      	movs	r3, #12
    75cc:	18fb      	adds	r3, r7, r3
    75ce:	0018      	movs	r0, r3
    75d0:	4b6f      	ldr	r3, [pc, #444]	; (7790 <vTask_GSM_service+0x828>)
    75d2:	4798      	blx	r3
    75d4:	1e03      	subs	r3, r0, #0
    75d6:	d071      	beq.n	76bc <vTask_GSM_service+0x754>
							{
								currentStatus = 'R';
    75d8:	4b6b      	ldr	r3, [pc, #428]	; (7788 <vTask_GSM_service+0x820>)
    75da:	2252      	movs	r2, #82	; 0x52
    75dc:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
    75de:	4b6b      	ldr	r3, [pc, #428]	; (778c <vTask_GSM_service+0x824>)
    75e0:	2249      	movs	r2, #73	; 0x49
    75e2:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
    75e4:	23ec      	movs	r3, #236	; 0xec
    75e6:	18fb      	adds	r3, r7, r3
    75e8:	0018      	movs	r0, r3
    75ea:	2314      	movs	r3, #20
    75ec:	001a      	movs	r2, r3
    75ee:	2100      	movs	r1, #0
    75f0:	4b48      	ldr	r3, [pc, #288]	; (7714 <vTask_GSM_service+0x7ac>)
    75f2:	4798      	blx	r3
								inCall = true;
    75f4:	4b67      	ldr	r3, [pc, #412]	; (7794 <vTask_GSM_service+0x82c>)
    75f6:	2201      	movs	r2, #1
    75f8:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
    75fa:	2328      	movs	r3, #40	; 0x28
    75fc:	33ff      	adds	r3, #255	; 0xff
    75fe:	18fb      	adds	r3, r7, r3
    7600:	2200      	movs	r2, #0
    7602:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
    7604:	2393      	movs	r3, #147	; 0x93
    7606:	005b      	lsls	r3, r3, #1
    7608:	18fb      	adds	r3, r7, r3
    760a:	2200      	movs	r2, #0
    760c:	701a      	strb	r2, [r3, #0]
    760e:	e02f      	b.n	7670 <vTask_GSM_service+0x708>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
    7610:	23fa      	movs	r3, #250	; 0xfa
    7612:	005b      	lsls	r3, r3, #1
    7614:	0018      	movs	r0, r3
    7616:	4b60      	ldr	r3, [pc, #384]	; (7798 <vTask_GSM_service+0x830>)
    7618:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
    761a:	230c      	movs	r3, #12
    761c:	18fb      	adds	r3, r7, r3
    761e:	2140      	movs	r1, #64	; 0x40
    7620:	0018      	movs	r0, r3
    7622:	4b3d      	ldr	r3, [pc, #244]	; (7718 <vTask_GSM_service+0x7b0>)
    7624:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
    7626:	23ec      	movs	r3, #236	; 0xec
    7628:	18fa      	adds	r2, r7, r3
    762a:	230c      	movs	r3, #12
    762c:	18fb      	adds	r3, r7, r3
    762e:	0011      	movs	r1, r2
    7630:	0018      	movs	r0, r3
    7632:	4b5a      	ldr	r3, [pc, #360]	; (779c <vTask_GSM_service+0x834>)
    7634:	4798      	blx	r3
    7636:	1e03      	subs	r3, r0, #0
    7638:	d011      	beq.n	765e <vTask_GSM_service+0x6f6>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
    763a:	23ec      	movs	r3, #236	; 0xec
    763c:	18fb      	adds	r3, r7, r3
    763e:	2200      	movs	r2, #0
    7640:	0019      	movs	r1, r3
    7642:	2001      	movs	r0, #1
    7644:	4b3b      	ldr	r3, [pc, #236]	; (7734 <vTask_GSM_service+0x7cc>)
    7646:	4798      	blx	r3
										new_call = true;
    7648:	2328      	movs	r3, #40	; 0x28
    764a:	33ff      	adds	r3, #255	; 0xff
    764c:	18fb      	adds	r3, r7, r3
    764e:	2201      	movs	r2, #1
    7650:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
    7652:	4b53      	ldr	r3, [pc, #332]	; (77a0 <vTask_GSM_service+0x838>)
    7654:	4798      	blx	r3
    7656:	0002      	movs	r2, r0
    7658:	4b52      	ldr	r3, [pc, #328]	; (77a4 <vTask_GSM_service+0x83c>)
    765a:	601a      	str	r2, [r3, #0]
										break;
    765c:	e00e      	b.n	767c <vTask_GSM_service+0x714>
								for (uint8_t i=0;i<4;i++)
    765e:	2393      	movs	r3, #147	; 0x93
    7660:	005b      	lsls	r3, r3, #1
    7662:	18fb      	adds	r3, r7, r3
    7664:	781a      	ldrb	r2, [r3, #0]
    7666:	2393      	movs	r3, #147	; 0x93
    7668:	005b      	lsls	r3, r3, #1
    766a:	18fb      	adds	r3, r7, r3
    766c:	3201      	adds	r2, #1
    766e:	701a      	strb	r2, [r3, #0]
    7670:	2393      	movs	r3, #147	; 0x93
    7672:	005b      	lsls	r3, r3, #1
    7674:	18fb      	adds	r3, r7, r3
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	2b03      	cmp	r3, #3
    767a:	d9c9      	bls.n	7610 <vTask_GSM_service+0x6a8>
									}
								}
								if (new_call)
    767c:	2328      	movs	r3, #40	; 0x28
    767e:	33ff      	adds	r3, #255	; 0xff
    7680:	18fb      	adds	r3, r7, r3
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	2b00      	cmp	r3, #0
    7686:	d100      	bne.n	768a <vTask_GSM_service+0x722>
    7688:	e1ab      	b.n	79e2 <vTask_GSM_service+0xa7a>
								{
									new_call = false;
    768a:	2328      	movs	r3, #40	; 0x28
    768c:	33ff      	adds	r3, #255	; 0xff
    768e:	18fb      	adds	r3, r7, r3
    7690:	2200      	movs	r2, #0
    7692:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
    7694:	23ec      	movs	r3, #236	; 0xec
    7696:	18fb      	adds	r3, r7, r3
    7698:	0018      	movs	r0, r3
    769a:	4b43      	ldr	r3, [pc, #268]	; (77a8 <vTask_GSM_service+0x840>)
    769c:	4798      	blx	r3
    769e:	1e03      	subs	r3, r0, #0
    76a0:	d009      	beq.n	76b6 <vTask_GSM_service+0x74e>
									{
										acceptCall();
    76a2:	4b42      	ldr	r3, [pc, #264]	; (77ac <vTask_GSM_service+0x844>)
    76a4:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
    76a6:	23ec      	movs	r3, #236	; 0xec
    76a8:	18fb      	adds	r3, r7, r3
    76aa:	2200      	movs	r2, #0
    76ac:	0019      	movs	r1, r3
    76ae:	2002      	movs	r0, #2
    76b0:	4b20      	ldr	r3, [pc, #128]	; (7734 <vTask_GSM_service+0x7cc>)
    76b2:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    76b4:	e195      	b.n	79e2 <vTask_GSM_service+0xa7a>
									}
									else
									{
										endCall();
    76b6:	4b3e      	ldr	r3, [pc, #248]	; (77b0 <vTask_GSM_service+0x848>)
    76b8:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    76ba:	e192      	b.n	79e2 <vTask_GSM_service+0xa7a>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
    76bc:	230c      	movs	r3, #12
    76be:	18fb      	adds	r3, r7, r3
    76c0:	0018      	movs	r0, r3
    76c2:	4b3c      	ldr	r3, [pc, #240]	; (77b4 <vTask_GSM_service+0x84c>)
    76c4:	4798      	blx	r3
    76c6:	1e03      	subs	r3, r0, #0
    76c8:	d100      	bne.n	76cc <vTask_GSM_service+0x764>
    76ca:	e18a      	b.n	79e2 <vTask_GSM_service+0xa7a>
							{
								endCall();
    76cc:	4b38      	ldr	r3, [pc, #224]	; (77b0 <vTask_GSM_service+0x848>)
    76ce:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    76d0:	e187      	b.n	79e2 <vTask_GSM_service+0xa7a>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
    76d2:	4b2c      	ldr	r3, [pc, #176]	; (7784 <vTask_GSM_service+0x81c>)
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	2201      	movs	r2, #1
    76d8:	4053      	eors	r3, r2
    76da:	b2db      	uxtb	r3, r3
    76dc:	2b00      	cmp	r3, #0
    76de:	d100      	bne.n	76e2 <vTask_GSM_service+0x77a>
    76e0:	e09c      	b.n	781c <vTask_GSM_service+0x8b4>
    76e2:	4b29      	ldr	r3, [pc, #164]	; (7788 <vTask_GSM_service+0x820>)
    76e4:	781b      	ldrb	r3, [r3, #0]
    76e6:	b2db      	uxtb	r3, r3
    76e8:	2b49      	cmp	r3, #73	; 0x49
    76ea:	d000      	beq.n	76ee <vTask_GSM_service+0x786>
    76ec:	e096      	b.n	781c <vTask_GSM_service+0x8b4>
    76ee:	4b27      	ldr	r3, [pc, #156]	; (778c <vTask_GSM_service+0x824>)
    76f0:	781b      	ldrb	r3, [r3, #0]
    76f2:	b2db      	uxtb	r3, r3
    76f4:	2b49      	cmp	r3, #73	; 0x49
    76f6:	d000      	beq.n	76fa <vTask_GSM_service+0x792>
    76f8:	e090      	b.n	781c <vTask_GSM_service+0x8b4>
						{
							if (gsm_responseLine_isCallCut(response))
    76fa:	230c      	movs	r3, #12
    76fc:	18fb      	adds	r3, r7, r3
    76fe:	0018      	movs	r0, r3
    7700:	4b2c      	ldr	r3, [pc, #176]	; (77b4 <vTask_GSM_service+0x84c>)
    7702:	4798      	blx	r3
    7704:	1e03      	subs	r3, r0, #0
    7706:	d057      	beq.n	77b8 <vTask_GSM_service+0x850>
							{
								endCall();
    7708:	4b29      	ldr	r3, [pc, #164]	; (77b0 <vTask_GSM_service+0x848>)
    770a:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    770c:	e16d      	b.n	79ea <vTask_GSM_service+0xa82>
    770e:	46c0      	nop			; (mov r8, r8)
    7710:	fffffedc 	.word	0xfffffedc
    7714:	00017d67 	.word	0x00017d67
    7718:	000032e9 	.word	0x000032e9
    771c:	00003381 	.word	0x00003381
    7720:	00002b05 	.word	0x00002b05
    7724:	00001991 	.word	0x00001991
    7728:	0000099d 	.word	0x0000099d
    772c:	00000a0d 	.word	0x00000a0d
    7730:	000194f0 	.word	0x000194f0
    7734:	0000bdf5 	.word	0x0000bdf5
    7738:	00003e75 	.word	0x00003e75
    773c:	000194f8 	.word	0x000194f8
    7740:	00003ee1 	.word	0x00003ee1
    7744:	00017ff7 	.word	0x00017ff7
    7748:	00017d43 	.word	0x00017d43
    774c:	00004c2d 	.word	0x00004c2d
    7750:	00000a55 	.word	0x00000a55
    7754:	000194dc 	.word	0x000194dc
    7758:	00000b45 	.word	0x00000b45
    775c:	00000acd 	.word	0x00000acd
    7760:	000194fc 	.word	0x000194fc
    7764:	000029d9 	.word	0x000029d9
    7768:	20000628 	.word	0x20000628
    776c:	00000a91 	.word	0x00000a91
    7770:	00000b95 	.word	0x00000b95
    7774:	00000be5 	.word	0x00000be5
    7778:	00000d21 	.word	0x00000d21
    777c:	00019504 	.word	0x00019504
    7780:	000025e1 	.word	0x000025e1
    7784:	2000071c 	.word	0x2000071c
    7788:	200007a8 	.word	0x200007a8
    778c:	20000767 	.word	0x20000767
    7790:	00003409 	.word	0x00003409
    7794:	20000774 	.word	0x20000774
    7798:	0000f0a9 	.word	0x0000f0a9
    779c:	00003439 	.word	0x00003439
    77a0:	0000f40d 	.word	0x0000f40d
    77a4:	200007d0 	.word	0x200007d0
    77a8:	00006bf1 	.word	0x00006bf1
    77ac:	00004495 	.word	0x00004495
    77b0:	0000419d 	.word	0x0000419d
    77b4:	000034dd 	.word	0x000034dd
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
    77b8:	230c      	movs	r3, #12
    77ba:	18fb      	adds	r3, r7, r3
    77bc:	0018      	movs	r0, r3
    77be:	4b8c      	ldr	r3, [pc, #560]	; (79f0 <vTask_GSM_service+0xa88>)
    77c0:	4798      	blx	r3
    77c2:	1e03      	subs	r3, r0, #0
    77c4:	d024      	beq.n	7810 <vTask_GSM_service+0x8a8>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    77c6:	4a8b      	ldr	r2, [pc, #556]	; (79f4 <vTask_GSM_service+0xa8c>)
    77c8:	230c      	movs	r3, #12
    77ca:	18fb      	adds	r3, r7, r3
    77cc:	0011      	movs	r1, r2
    77ce:	0018      	movs	r0, r3
    77d0:	4b89      	ldr	r3, [pc, #548]	; (79f8 <vTask_GSM_service+0xa90>)
    77d2:	4798      	blx	r3
    77d4:	0003      	movs	r3, r0
    77d6:	228e      	movs	r2, #142	; 0x8e
    77d8:	0052      	lsls	r2, r2, #1
    77da:	18ba      	adds	r2, r7, r2
    77dc:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    77de:	4b85      	ldr	r3, [pc, #532]	; (79f4 <vTask_GSM_service+0xa8c>)
    77e0:	0019      	movs	r1, r3
    77e2:	2000      	movs	r0, #0
    77e4:	4b84      	ldr	r3, [pc, #528]	; (79f8 <vTask_GSM_service+0xa90>)
    77e6:	4798      	blx	r3
    77e8:	0003      	movs	r3, r0
    77ea:	228e      	movs	r2, #142	; 0x8e
    77ec:	0052      	lsls	r2, r2, #1
    77ee:	18ba      	adds	r2, r7, r2
    77f0:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    77f2:	238e      	movs	r3, #142	; 0x8e
    77f4:	005b      	lsls	r3, r3, #1
    77f6:	18fb      	adds	r3, r7, r3
    77f8:	681b      	ldr	r3, [r3, #0]
    77fa:	0018      	movs	r0, r3
    77fc:	4b7f      	ldr	r3, [pc, #508]	; (79fc <vTask_GSM_service+0xa94>)
    77fe:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    7800:	238e      	movs	r3, #142	; 0x8e
    7802:	005b      	lsls	r3, r3, #1
    7804:	18fb      	adds	r3, r7, r3
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	0018      	movs	r0, r3
    780a:	4b7d      	ldr	r3, [pc, #500]	; (7a00 <vTask_GSM_service+0xa98>)
    780c:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    780e:	e0ec      	b.n	79ea <vTask_GSM_service+0xa82>
							}
							else
							{
								playSoundAgain(response);
    7810:	230c      	movs	r3, #12
    7812:	18fb      	adds	r3, r7, r3
    7814:	0018      	movs	r0, r3
    7816:	4b7b      	ldr	r3, [pc, #492]	; (7a04 <vTask_GSM_service+0xa9c>)
    7818:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    781a:	e0e6      	b.n	79ea <vTask_GSM_service+0xa82>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
    781c:	4b7a      	ldr	r3, [pc, #488]	; (7a08 <vTask_GSM_service+0xaa0>)
    781e:	781b      	ldrb	r3, [r3, #0]
    7820:	b2db      	uxtb	r3, r3
    7822:	2b4e      	cmp	r3, #78	; 0x4e
    7824:	d004      	beq.n	7830 <vTask_GSM_service+0x8c8>
    7826:	4b78      	ldr	r3, [pc, #480]	; (7a08 <vTask_GSM_service+0xaa0>)
    7828:	781b      	ldrb	r3, [r3, #0]
    782a:	b2db      	uxtb	r3, r3
    782c:	2b52      	cmp	r3, #82	; 0x52
    782e:	d163      	bne.n	78f8 <vTask_GSM_service+0x990>
    7830:	4b76      	ldr	r3, [pc, #472]	; (7a0c <vTask_GSM_service+0xaa4>)
    7832:	781b      	ldrb	r3, [r3, #0]
    7834:	b2db      	uxtb	r3, r3
    7836:	2b4f      	cmp	r3, #79	; 0x4f
    7838:	d15e      	bne.n	78f8 <vTask_GSM_service+0x990>
						{
							if (OutGoingcallState(response) == 'R')
    783a:	230c      	movs	r3, #12
    783c:	18fb      	adds	r3, r7, r3
    783e:	0018      	movs	r0, r3
    7840:	4b73      	ldr	r3, [pc, #460]	; (7a10 <vTask_GSM_service+0xaa8>)
    7842:	4798      	blx	r3
    7844:	0003      	movs	r3, r0
    7846:	2b52      	cmp	r3, #82	; 0x52
    7848:	d10b      	bne.n	7862 <vTask_GSM_service+0x8fa>
							{
								callCutWait = xTaskGetTickCount();
    784a:	4b72      	ldr	r3, [pc, #456]	; (7a14 <vTask_GSM_service+0xaac>)
    784c:	4798      	blx	r3
    784e:	0002      	movs	r2, r0
    7850:	4b71      	ldr	r3, [pc, #452]	; (7a18 <vTask_GSM_service+0xab0>)
    7852:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
    7854:	4b6c      	ldr	r3, [pc, #432]	; (7a08 <vTask_GSM_service+0xaa0>)
    7856:	2252      	movs	r2, #82	; 0x52
    7858:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    785a:	4b6c      	ldr	r3, [pc, #432]	; (7a0c <vTask_GSM_service+0xaa4>)
    785c:	224f      	movs	r2, #79	; 0x4f
    785e:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
    7860:	e0c2      	b.n	79e8 <vTask_GSM_service+0xa80>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
    7862:	230c      	movs	r3, #12
    7864:	18fb      	adds	r3, r7, r3
    7866:	0018      	movs	r0, r3
    7868:	4b6c      	ldr	r3, [pc, #432]	; (7a1c <vTask_GSM_service+0xab4>)
    786a:	4798      	blx	r3
    786c:	1e03      	subs	r3, r0, #0
    786e:	d107      	bne.n	7880 <vTask_GSM_service+0x918>
    7870:	230c      	movs	r3, #12
    7872:	18fb      	adds	r3, r7, r3
    7874:	0018      	movs	r0, r3
    7876:	4b66      	ldr	r3, [pc, #408]	; (7a10 <vTask_GSM_service+0xaa8>)
    7878:	4798      	blx	r3
    787a:	0003      	movs	r3, r0
    787c:	2b45      	cmp	r3, #69	; 0x45
    787e:	d110      	bne.n	78a2 <vTask_GSM_service+0x93a>
							{
								char t1 = actionType;
    7880:	231c      	movs	r3, #28
    7882:	33ff      	adds	r3, #255	; 0xff
    7884:	18fb      	adds	r3, r7, r3
    7886:	4a66      	ldr	r2, [pc, #408]	; (7a20 <vTask_GSM_service+0xab8>)
    7888:	7812      	ldrb	r2, [r2, #0]
    788a:	701a      	strb	r2, [r3, #0]
								endCall();
    788c:	4b65      	ldr	r3, [pc, #404]	; (7a24 <vTask_GSM_service+0xabc>)
    788e:	4798      	blx	r3
								checkRespSMS(t1);
    7890:	231c      	movs	r3, #28
    7892:	33ff      	adds	r3, #255	; 0xff
    7894:	18fb      	adds	r3, r7, r3
    7896:	781b      	ldrb	r3, [r3, #0]
    7898:	0018      	movs	r0, r3
    789a:	4b63      	ldr	r3, [pc, #396]	; (7a28 <vTask_GSM_service+0xac0>)
    789c:	4798      	blx	r3
							{
    789e:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
    78a0:	e0a2      	b.n	79e8 <vTask_GSM_service+0xa80>
							}
							else if (OutGoingcallState(response) == 'I')
    78a2:	230c      	movs	r3, #12
    78a4:	18fb      	adds	r3, r7, r3
    78a6:	0018      	movs	r0, r3
    78a8:	4b59      	ldr	r3, [pc, #356]	; (7a10 <vTask_GSM_service+0xaa8>)
    78aa:	4798      	blx	r3
    78ac:	0003      	movs	r3, r0
    78ae:	2b49      	cmp	r3, #73	; 0x49
    78b0:	d000      	beq.n	78b4 <vTask_GSM_service+0x94c>
    78b2:	e099      	b.n	79e8 <vTask_GSM_service+0xa80>
							{
								callCutWait = xTaskGetTickCount();
    78b4:	4b57      	ldr	r3, [pc, #348]	; (7a14 <vTask_GSM_service+0xaac>)
    78b6:	4798      	blx	r3
    78b8:	0002      	movs	r2, r0
    78ba:	4b57      	ldr	r3, [pc, #348]	; (7a18 <vTask_GSM_service+0xab0>)
    78bc:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
    78be:	4b52      	ldr	r3, [pc, #328]	; (7a08 <vTask_GSM_service+0xaa0>)
    78c0:	2249      	movs	r2, #73	; 0x49
    78c2:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    78c4:	4b51      	ldr	r3, [pc, #324]	; (7a0c <vTask_GSM_service+0xaa4>)
    78c6:	224f      	movs	r2, #79	; 0x4f
    78c8:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
    78ca:	4b58      	ldr	r3, [pc, #352]	; (7a2c <vTask_GSM_service+0xac4>)
    78cc:	2201      	movs	r2, #1
    78ce:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
    78d0:	2201      	movs	r2, #1
    78d2:	2100      	movs	r1, #0
    78d4:	2002      	movs	r0, #2
    78d6:	4b56      	ldr	r3, [pc, #344]	; (7a30 <vTask_GSM_service+0xac8>)
    78d8:	4798      	blx	r3
								if (!m2mEvent)
    78da:	4b56      	ldr	r3, [pc, #344]	; (7a34 <vTask_GSM_service+0xacc>)
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	2201      	movs	r2, #1
    78e0:	4053      	eors	r3, r2
    78e2:	b2db      	uxtb	r3, r3
    78e4:	2b00      	cmp	r3, #0
    78e6:	d100      	bne.n	78ea <vTask_GSM_service+0x982>
    78e8:	e07e      	b.n	79e8 <vTask_GSM_service+0xa80>
								{
									playSound(actionType,true);
    78ea:	4b4d      	ldr	r3, [pc, #308]	; (7a20 <vTask_GSM_service+0xab8>)
    78ec:	781b      	ldrb	r3, [r3, #0]
    78ee:	2101      	movs	r1, #1
    78f0:	0018      	movs	r0, r3
    78f2:	4b51      	ldr	r3, [pc, #324]	; (7a38 <vTask_GSM_service+0xad0>)
    78f4:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
    78f6:	e077      	b.n	79e8 <vTask_GSM_service+0xa80>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
    78f8:	4b43      	ldr	r3, [pc, #268]	; (7a08 <vTask_GSM_service+0xaa0>)
    78fa:	781b      	ldrb	r3, [r3, #0]
    78fc:	b2db      	uxtb	r3, r3
    78fe:	2b49      	cmp	r3, #73	; 0x49
    7900:	d001      	beq.n	7906 <vTask_GSM_service+0x99e>
    7902:	f7ff fbdd 	bl	70c0 <vTask_GSM_service+0x158>
    7906:	4b41      	ldr	r3, [pc, #260]	; (7a0c <vTask_GSM_service+0xaa4>)
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	b2db      	uxtb	r3, r3
    790c:	2b4f      	cmp	r3, #79	; 0x4f
    790e:	d001      	beq.n	7914 <vTask_GSM_service+0x9ac>
    7910:	f7ff fbd6 	bl	70c0 <vTask_GSM_service+0x158>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
    7914:	230c      	movs	r3, #12
    7916:	18fb      	adds	r3, r7, r3
    7918:	0018      	movs	r0, r3
    791a:	4b40      	ldr	r3, [pc, #256]	; (7a1c <vTask_GSM_service+0xab4>)
    791c:	4798      	blx	r3
    791e:	1e03      	subs	r3, r0, #0
    7920:	d107      	bne.n	7932 <vTask_GSM_service+0x9ca>
    7922:	230c      	movs	r3, #12
    7924:	18fb      	adds	r3, r7, r3
    7926:	0018      	movs	r0, r3
    7928:	4b39      	ldr	r3, [pc, #228]	; (7a10 <vTask_GSM_service+0xaa8>)
    792a:	4798      	blx	r3
    792c:	0003      	movs	r3, r0
    792e:	2b45      	cmp	r3, #69	; 0x45
    7930:	d102      	bne.n	7938 <vTask_GSM_service+0x9d0>
							{
								endCall();
    7932:	4b3c      	ldr	r3, [pc, #240]	; (7a24 <vTask_GSM_service+0xabc>)
    7934:	4798      	blx	r3
    7936:	e058      	b.n	79ea <vTask_GSM_service+0xa82>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
    7938:	230c      	movs	r3, #12
    793a:	18fb      	adds	r3, r7, r3
    793c:	0018      	movs	r0, r3
    793e:	4b2c      	ldr	r3, [pc, #176]	; (79f0 <vTask_GSM_service+0xa88>)
    7940:	4798      	blx	r3
    7942:	1e03      	subs	r3, r0, #0
    7944:	d025      	beq.n	7992 <vTask_GSM_service+0xa2a>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    7946:	4a2b      	ldr	r2, [pc, #172]	; (79f4 <vTask_GSM_service+0xa8c>)
    7948:	230c      	movs	r3, #12
    794a:	18fb      	adds	r3, r7, r3
    794c:	0011      	movs	r1, r2
    794e:	0018      	movs	r0, r3
    7950:	4b29      	ldr	r3, [pc, #164]	; (79f8 <vTask_GSM_service+0xa90>)
    7952:	4798      	blx	r3
    7954:	0003      	movs	r3, r0
    7956:	228a      	movs	r2, #138	; 0x8a
    7958:	0052      	lsls	r2, r2, #1
    795a:	18ba      	adds	r2, r7, r2
    795c:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    795e:	4b25      	ldr	r3, [pc, #148]	; (79f4 <vTask_GSM_service+0xa8c>)
    7960:	0019      	movs	r1, r3
    7962:	2000      	movs	r0, #0
    7964:	4b24      	ldr	r3, [pc, #144]	; (79f8 <vTask_GSM_service+0xa90>)
    7966:	4798      	blx	r3
    7968:	0003      	movs	r3, r0
    796a:	228a      	movs	r2, #138	; 0x8a
    796c:	0052      	lsls	r2, r2, #1
    796e:	18ba      	adds	r2, r7, r2
    7970:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    7972:	238a      	movs	r3, #138	; 0x8a
    7974:	005b      	lsls	r3, r3, #1
    7976:	18fb      	adds	r3, r7, r3
    7978:	681b      	ldr	r3, [r3, #0]
    797a:	0018      	movs	r0, r3
    797c:	4b1f      	ldr	r3, [pc, #124]	; (79fc <vTask_GSM_service+0xa94>)
    797e:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    7980:	238a      	movs	r3, #138	; 0x8a
    7982:	005b      	lsls	r3, r3, #1
    7984:	18fb      	adds	r3, r7, r3
    7986:	681b      	ldr	r3, [r3, #0]
    7988:	0018      	movs	r0, r3
    798a:	4b1d      	ldr	r3, [pc, #116]	; (7a00 <vTask_GSM_service+0xa98>)
    798c:	4798      	blx	r3
    798e:	f7ff fb97 	bl	70c0 <vTask_GSM_service+0x158>
							}
							else
							{
								playSoundAgain(response);
    7992:	230c      	movs	r3, #12
    7994:	18fb      	adds	r3, r7, r3
    7996:	0018      	movs	r0, r3
    7998:	4b1a      	ldr	r3, [pc, #104]	; (7a04 <vTask_GSM_service+0xa9c>)
    799a:	4798      	blx	r3
    799c:	f7ff fb90 	bl	70c0 <vTask_GSM_service+0x158>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
    79a0:	232c      	movs	r3, #44	; 0x2c
    79a2:	33ff      	adds	r3, #255	; 0xff
    79a4:	18fb      	adds	r3, r7, r3
    79a6:	2200      	movs	r2, #0
    79a8:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
    79aa:	2395      	movs	r3, #149	; 0x95
    79ac:	005b      	lsls	r3, r3, #1
    79ae:	18fb      	adds	r3, r7, r3
    79b0:	2200      	movs	r2, #0
    79b2:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
    79b4:	4b21      	ldr	r3, [pc, #132]	; (7a3c <vTask_GSM_service+0xad4>)
    79b6:	4a21      	ldr	r2, [pc, #132]	; (7a3c <vTask_GSM_service+0xad4>)
    79b8:	6812      	ldr	r2, [r2, #0]
    79ba:	2180      	movs	r1, #128	; 0x80
    79bc:	0249      	lsls	r1, r1, #9
    79be:	430a      	orrs	r2, r1
    79c0:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
    79c2:	4b1f      	ldr	r3, [pc, #124]	; (7a40 <vTask_GSM_service+0xad8>)
    79c4:	0018      	movs	r0, r3
    79c6:	4b1f      	ldr	r3, [pc, #124]	; (7a44 <vTask_GSM_service+0xadc>)
    79c8:	4798      	blx	r3
			GSM_PWR_OFF;
    79ca:	4b1c      	ldr	r3, [pc, #112]	; (7a3c <vTask_GSM_service+0xad4>)
    79cc:	4a1b      	ldr	r2, [pc, #108]	; (7a3c <vTask_GSM_service+0xad4>)
    79ce:	6812      	ldr	r2, [r2, #0]
    79d0:	491d      	ldr	r1, [pc, #116]	; (7a48 <vTask_GSM_service+0xae0>)
    79d2:	400a      	ands	r2, r1
    79d4:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
    79d6:	4b1d      	ldr	r3, [pc, #116]	; (7a4c <vTask_GSM_service+0xae4>)
    79d8:	0018      	movs	r0, r3
    79da:	4b1a      	ldr	r3, [pc, #104]	; (7a44 <vTask_GSM_service+0xadc>)
    79dc:	4798      	blx	r3
    79de:	f7ff fb6f 	bl	70c0 <vTask_GSM_service+0x158>
							if (gsm_responseLine_isRinging(response))
    79e2:	46c0      	nop			; (mov r8, r8)
    79e4:	f7ff fb6c 	bl	70c0 <vTask_GSM_service+0x158>
							if (OutGoingcallState(response) == 'R')
    79e8:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
    79ea:	f7ff fb69 	bl	70c0 <vTask_GSM_service+0x158>
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	00003555 	.word	0x00003555
    79f4:	00019514 	.word	0x00019514
    79f8:	00018059 	.word	0x00018059
    79fc:	00002965 	.word	0x00002965
    7a00:	00004a29 	.word	0x00004a29
    7a04:	000045ed 	.word	0x000045ed
    7a08:	200007a8 	.word	0x200007a8
    7a0c:	20000767 	.word	0x20000767
    7a10:	0000472d 	.word	0x0000472d
    7a14:	0000f40d 	.word	0x0000f40d
    7a18:	200007d0 	.word	0x200007d0
    7a1c:	000034dd 	.word	0x000034dd
    7a20:	2000073b 	.word	0x2000073b
    7a24:	0000419d 	.word	0x0000419d
    7a28:	000049b1 	.word	0x000049b1
    7a2c:	20000776 	.word	0x20000776
    7a30:	0000bdf5 	.word	0x0000bdf5
    7a34:	2000071b 	.word	0x2000071b
    7a38:	000044dd 	.word	0x000044dd
    7a3c:	41004490 	.word	0x41004490
    7a40:	00000bb8 	.word	0x00000bb8
    7a44:	0000f0a9 	.word	0x0000f0a9
    7a48:	fffeffff 	.word	0xfffeffff
    7a4c:	00001388 	.word	0x00001388

00007a50 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
    7a50:	b590      	push	{r4, r7, lr}
    7a52:	b083      	sub	sp, #12
    7a54:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
    7a56:	23eb      	movs	r3, #235	; 0xeb
    7a58:	009a      	lsls	r2, r3, #2
    7a5a:	4806      	ldr	r0, [pc, #24]	; (7a74 <start_gsm_service+0x24>)
    7a5c:	2300      	movs	r3, #0
    7a5e:	9301      	str	r3, [sp, #4]
    7a60:	2301      	movs	r3, #1
    7a62:	9300      	str	r3, [sp, #0]
    7a64:	2300      	movs	r3, #0
    7a66:	2100      	movs	r1, #0
    7a68:	4c03      	ldr	r4, [pc, #12]	; (7a78 <start_gsm_service+0x28>)
    7a6a:	47a0      	blx	r4
}
    7a6c:	46c0      	nop			; (mov r8, r8)
    7a6e:	46bd      	mov	sp, r7
    7a70:	b001      	add	sp, #4
    7a72:	bd90      	pop	{r4, r7, pc}
    7a74:	00006f69 	.word	0x00006f69
    7a78:	0000ed69 	.word	0x0000ed69

00007a7c <busy>:

bool busy(void)
{
    7a7c:	b580      	push	{r7, lr}
    7a7e:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
    7a80:	4b08      	ldr	r3, [pc, #32]	; (7aa4 <busy+0x28>)
    7a82:	781b      	ldrb	r3, [r3, #0]
    7a84:	2b00      	cmp	r3, #0
    7a86:	d103      	bne.n	7a90 <busy+0x14>
    7a88:	4b07      	ldr	r3, [pc, #28]	; (7aa8 <busy+0x2c>)
    7a8a:	781b      	ldrb	r3, [r3, #0]
    7a8c:	2b00      	cmp	r3, #0
    7a8e:	d001      	beq.n	7a94 <busy+0x18>
    7a90:	2301      	movs	r3, #1
    7a92:	e000      	b.n	7a96 <busy+0x1a>
    7a94:	2300      	movs	r3, #0
    7a96:	1c1a      	adds	r2, r3, #0
    7a98:	2301      	movs	r3, #1
    7a9a:	4013      	ands	r3, r2
    7a9c:	b2db      	uxtb	r3, r3
}
    7a9e:	0018      	movs	r0, r3
    7aa0:	46bd      	mov	sp, r7
    7aa2:	bd80      	pop	{r7, pc}
    7aa4:	20000774 	.word	0x20000774
    7aa8:	20000230 	.word	0x20000230

00007aac <checkNotInCall>:

bool checkNotInCall(void)
{
    7aac:	b580      	push	{r7, lr}
    7aae:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
    7ab0:	4b13      	ldr	r3, [pc, #76]	; (7b00 <checkNotInCall+0x54>)
    7ab2:	781b      	ldrb	r3, [r3, #0]
    7ab4:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
    7ab6:	2b4e      	cmp	r3, #78	; 0x4e
    7ab8:	d11a      	bne.n	7af0 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
    7aba:	4b12      	ldr	r3, [pc, #72]	; (7b04 <checkNotInCall+0x58>)
    7abc:	781b      	ldrb	r3, [r3, #0]
    7abe:	b2db      	uxtb	r3, r3
    7ac0:	2b4e      	cmp	r3, #78	; 0x4e
    7ac2:	d115      	bne.n	7af0 <checkNotInCall+0x44>
    7ac4:	4b10      	ldr	r3, [pc, #64]	; (7b08 <checkNotInCall+0x5c>)
    7ac6:	781b      	ldrb	r3, [r3, #0]
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d011      	beq.n	7af0 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
    7acc:	4b0f      	ldr	r3, [pc, #60]	; (7b0c <checkNotInCall+0x60>)
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	2201      	movs	r2, #1
    7ad2:	4053      	eors	r3, r2
    7ad4:	b2db      	uxtb	r3, r3
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d00a      	beq.n	7af0 <checkNotInCall+0x44>
    7ada:	4b0d      	ldr	r3, [pc, #52]	; (7b10 <checkNotInCall+0x64>)
    7adc:	4798      	blx	r3
    7ade:	0003      	movs	r3, r0
    7ae0:	001a      	movs	r2, r3
    7ae2:	2301      	movs	r3, #1
    7ae4:	4053      	eors	r3, r2
    7ae6:	b2db      	uxtb	r3, r3
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d001      	beq.n	7af0 <checkNotInCall+0x44>
    7aec:	2301      	movs	r3, #1
    7aee:	e000      	b.n	7af2 <checkNotInCall+0x46>
    7af0:	2300      	movs	r3, #0
    7af2:	1c1a      	adds	r2, r3, #0
    7af4:	2301      	movs	r3, #1
    7af6:	4013      	ands	r3, r2
    7af8:	b2db      	uxtb	r3, r3
}
    7afa:	0018      	movs	r0, r3
    7afc:	46bd      	mov	sp, r7
    7afe:	bd80      	pop	{r7, pc}
    7b00:	200007a8 	.word	0x200007a8
    7b04:	20000767 	.word	0x20000767
    7b08:	2000074a 	.word	0x2000074a
    7b0c:	2000071c 	.word	0x2000071c
    7b10:	00007a7d 	.word	0x00007a7d

00007b14 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
    7b14:	b580      	push	{r7, lr}
    7b16:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
    7b18:	4b20      	ldr	r3, [pc, #128]	; (7b9c <gsm_checkSleepElligible+0x88>)
    7b1a:	78db      	ldrb	r3, [r3, #3]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	d020      	beq.n	7b62 <gsm_checkSleepElligible+0x4e>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    7b20:	4b1f      	ldr	r3, [pc, #124]	; (7ba0 <gsm_checkSleepElligible+0x8c>)
    7b22:	781b      	ldrb	r3, [r3, #0]
    7b24:	2201      	movs	r2, #1
    7b26:	4053      	eors	r3, r2
    7b28:	b2db      	uxtb	r3, r3
    7b2a:	2b00      	cmp	r3, #0
    7b2c:	d013      	beq.n	7b56 <gsm_checkSleepElligible+0x42>
    7b2e:	4b1d      	ldr	r3, [pc, #116]	; (7ba4 <gsm_checkSleepElligible+0x90>)
    7b30:	4798      	blx	r3
    7b32:	1e03      	subs	r3, r0, #0
    7b34:	d00f      	beq.n	7b56 <gsm_checkSleepElligible+0x42>
    7b36:	4b1c      	ldr	r3, [pc, #112]	; (7ba8 <gsm_checkSleepElligible+0x94>)
    7b38:	781b      	ldrb	r3, [r3, #0]
    7b3a:	2201      	movs	r2, #1
    7b3c:	4053      	eors	r3, r2
    7b3e:	b2db      	uxtb	r3, r3
    7b40:	2b00      	cmp	r3, #0
    7b42:	d008      	beq.n	7b56 <gsm_checkSleepElligible+0x42>
    7b44:	4b19      	ldr	r3, [pc, #100]	; (7bac <gsm_checkSleepElligible+0x98>)
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	2201      	movs	r2, #1
    7b4a:	4053      	eors	r3, r2
    7b4c:	b2db      	uxtb	r3, r3
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d001      	beq.n	7b56 <gsm_checkSleepElligible+0x42>
    7b52:	2301      	movs	r3, #1
    7b54:	e000      	b.n	7b58 <gsm_checkSleepElligible+0x44>
    7b56:	2300      	movs	r3, #0
    7b58:	1c1a      	adds	r2, r3, #0
    7b5a:	2301      	movs	r3, #1
    7b5c:	4013      	ands	r3, r2
    7b5e:	b2db      	uxtb	r3, r3
    7b60:	e018      	b.n	7b94 <gsm_checkSleepElligible+0x80>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
    7b62:	4b0f      	ldr	r3, [pc, #60]	; (7ba0 <gsm_checkSleepElligible+0x8c>)
    7b64:	781b      	ldrb	r3, [r3, #0]
    7b66:	2201      	movs	r2, #1
    7b68:	4053      	eors	r3, r2
    7b6a:	b2db      	uxtb	r3, r3
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d00c      	beq.n	7b8a <gsm_checkSleepElligible+0x76>
    7b70:	4b0c      	ldr	r3, [pc, #48]	; (7ba4 <gsm_checkSleepElligible+0x90>)
    7b72:	4798      	blx	r3
    7b74:	1e03      	subs	r3, r0, #0
    7b76:	d008      	beq.n	7b8a <gsm_checkSleepElligible+0x76>
    7b78:	4b0c      	ldr	r3, [pc, #48]	; (7bac <gsm_checkSleepElligible+0x98>)
    7b7a:	781b      	ldrb	r3, [r3, #0]
    7b7c:	2201      	movs	r2, #1
    7b7e:	4053      	eors	r3, r2
    7b80:	b2db      	uxtb	r3, r3
    7b82:	2b00      	cmp	r3, #0
    7b84:	d001      	beq.n	7b8a <gsm_checkSleepElligible+0x76>
    7b86:	2301      	movs	r3, #1
    7b88:	e000      	b.n	7b8c <gsm_checkSleepElligible+0x78>
    7b8a:	2300      	movs	r3, #0
    7b8c:	1c1a      	adds	r2, r3, #0
    7b8e:	2301      	movs	r3, #1
    7b90:	4013      	ands	r3, r2
    7b92:	b2db      	uxtb	r3, r3
	}
    7b94:	0018      	movs	r0, r3
    7b96:	46bd      	mov	sp, r7
    7b98:	bd80      	pop	{r7, pc}
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	20000628 	.word	0x20000628
    7ba0:	20000231 	.word	0x20000231
    7ba4:	00007aad 	.word	0x00007aad
    7ba8:	20000766 	.word	0x20000766
    7bac:	2000079a 	.word	0x2000079a

00007bb0 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
    7bb0:	b590      	push	{r4, r7, lr}
    7bb2:	b093      	sub	sp, #76	; 0x4c
    7bb4:	af02      	add	r7, sp, #8
    7bb6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
    7bb8:	4be6      	ldr	r3, [pc, #920]	; (7f54 <lcd_displaying_task+0x3a4>)
    7bba:	2200      	movs	r2, #0
    7bbc:	701a      	strb	r2, [r3, #0]
	
	LCD_PWR_CONFIG();
    7bbe:	4be6      	ldr	r3, [pc, #920]	; (7f58 <lcd_displaying_task+0x3a8>)
    7bc0:	4798      	blx	r3
	LCD_PWR_EN();
    7bc2:	4be6      	ldr	r3, [pc, #920]	; (7f5c <lcd_displaying_task+0x3ac>)
    7bc4:	4798      	blx	r3
	vTaskDelay(500);
    7bc6:	23fa      	movs	r3, #250	; 0xfa
    7bc8:	005b      	lsls	r3, r3, #1
    7bca:	0018      	movs	r0, r3
    7bcc:	4be4      	ldr	r3, [pc, #912]	; (7f60 <lcd_displaying_task+0x3b0>)
    7bce:	4798      	blx	r3
	
	LCD_init();
    7bd0:	4be4      	ldr	r3, [pc, #912]	; (7f64 <lcd_displaying_task+0x3b4>)
    7bd2:	4798      	blx	r3
	
	uint8_t screen=1;
    7bd4:	233f      	movs	r3, #63	; 0x3f
    7bd6:	18fb      	adds	r3, r7, r3
    7bd8:	2201      	movs	r2, #1
    7bda:	701a      	strb	r2, [r3, #0]
	
	bool four_sec_timer_is_active = true;
    7bdc:	233d      	movs	r3, #61	; 0x3d
    7bde:	18fb      	adds	r3, r7, r3
    7be0:	2201      	movs	r2, #1
    7be2:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
    7be4:	233c      	movs	r3, #60	; 0x3c
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	2200      	movs	r2, #0
    7bea:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
    7bec:	233a      	movs	r3, #58	; 0x3a
    7bee:	18fb      	adds	r3, r7, r3
    7bf0:	2200      	movs	r2, #0
    7bf2:	701a      	strb	r2, [r3, #0]
	
	byte Network_0[8]={
    7bf4:	2330      	movs	r3, #48	; 0x30
    7bf6:	18fb      	adds	r3, r7, r3
    7bf8:	0018      	movs	r0, r3
    7bfa:	2308      	movs	r3, #8
    7bfc:	001a      	movs	r2, r3
    7bfe:	2100      	movs	r1, #0
    7c00:	4bd9      	ldr	r3, [pc, #868]	; (7f68 <lcd_displaying_task+0x3b8>)
    7c02:	4798      	blx	r3
		0B00000,
		0B00000,
		0B00000
	};
	
	byte Network_1[8]={
    7c04:	2328      	movs	r3, #40	; 0x28
    7c06:	18fb      	adds	r3, r7, r3
    7c08:	4ad8      	ldr	r2, [pc, #864]	; (7f6c <lcd_displaying_task+0x3bc>)
    7c0a:	ca03      	ldmia	r2!, {r0, r1}
    7c0c:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B00000,
		0B11111,
		0B11111
	};
	byte Network_2[8]={
    7c0e:	2320      	movs	r3, #32
    7c10:	18fb      	adds	r3, r7, r3
    7c12:	4ad7      	ldr	r2, [pc, #860]	; (7f70 <lcd_displaying_task+0x3c0>)
    7c14:	ca03      	ldmia	r2!, {r0, r1}
    7c16:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_3[8]={
    7c18:	2318      	movs	r3, #24
    7c1a:	18fb      	adds	r3, r7, r3
    7c1c:	4ad5      	ldr	r2, [pc, #852]	; (7f74 <lcd_displaying_task+0x3c4>)
    7c1e:	ca03      	ldmia	r2!, {r0, r1}
    7c20:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_4[8]={
    7c22:	2310      	movs	r3, #16
    7c24:	18fb      	adds	r3, r7, r3
    7c26:	4ad4      	ldr	r2, [pc, #848]	; (7f78 <lcd_displaying_task+0x3c8>)
    7c28:	ca03      	ldmia	r2!, {r0, r1}
    7c2a:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};

	byte Network_5[8]={
    7c2c:	2308      	movs	r3, #8
    7c2e:	18fb      	adds	r3, r7, r3
    7c30:	4ad2      	ldr	r2, [pc, #840]	; (7f7c <lcd_displaying_task+0x3cc>)
    7c32:	ca03      	ldmia	r2!, {r0, r1}
    7c34:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};
	
	LCD_Create_Custom_createChar(0,Network_0);
    7c36:	2330      	movs	r3, #48	; 0x30
    7c38:	18fb      	adds	r3, r7, r3
    7c3a:	0019      	movs	r1, r3
    7c3c:	2000      	movs	r0, #0
    7c3e:	4bd0      	ldr	r3, [pc, #832]	; (7f80 <lcd_displaying_task+0x3d0>)
    7c40:	4798      	blx	r3
	LCD_Create_Custom_createChar(1,Network_1);
    7c42:	2328      	movs	r3, #40	; 0x28
    7c44:	18fb      	adds	r3, r7, r3
    7c46:	0019      	movs	r1, r3
    7c48:	2001      	movs	r0, #1
    7c4a:	4bcd      	ldr	r3, [pc, #820]	; (7f80 <lcd_displaying_task+0x3d0>)
    7c4c:	4798      	blx	r3
	LCD_Create_Custom_createChar(2,Network_2);
    7c4e:	2320      	movs	r3, #32
    7c50:	18fb      	adds	r3, r7, r3
    7c52:	0019      	movs	r1, r3
    7c54:	2002      	movs	r0, #2
    7c56:	4bca      	ldr	r3, [pc, #808]	; (7f80 <lcd_displaying_task+0x3d0>)
    7c58:	4798      	blx	r3
	LCD_Create_Custom_createChar(3,Network_3);
    7c5a:	2318      	movs	r3, #24
    7c5c:	18fb      	adds	r3, r7, r3
    7c5e:	0019      	movs	r1, r3
    7c60:	2003      	movs	r0, #3
    7c62:	4bc7      	ldr	r3, [pc, #796]	; (7f80 <lcd_displaying_task+0x3d0>)
    7c64:	4798      	blx	r3
	LCD_Create_Custom_createChar(4,Network_4);
    7c66:	2310      	movs	r3, #16
    7c68:	18fb      	adds	r3, r7, r3
    7c6a:	0019      	movs	r1, r3
    7c6c:	2004      	movs	r0, #4
    7c6e:	4bc4      	ldr	r3, [pc, #784]	; (7f80 <lcd_displaying_task+0x3d0>)
    7c70:	4798      	blx	r3
	LCD_Create_Custom_createChar(5,Network_5);
    7c72:	2308      	movs	r3, #8
    7c74:	18fb      	adds	r3, r7, r3
    7c76:	0019      	movs	r1, r3
    7c78:	2005      	movs	r0, #5
    7c7a:	4bc1      	ldr	r3, [pc, #772]	; (7f80 <lcd_displaying_task+0x3d0>)
    7c7c:	4798      	blx	r3
	
	LCD_clear();
    7c7e:	4bc1      	ldr	r3, [pc, #772]	; (7f84 <lcd_displaying_task+0x3d4>)
    7c80:	4798      	blx	r3
	LCD_setCursor(0,0);
    7c82:	2100      	movs	r1, #0
    7c84:	2000      	movs	r0, #0
    7c86:	4bc0      	ldr	r3, [pc, #768]	; (7f88 <lcd_displaying_task+0x3d8>)
    7c88:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
    7c8a:	4bc0      	ldr	r3, [pc, #768]	; (7f8c <lcd_displaying_task+0x3dc>)
    7c8c:	0018      	movs	r0, r3
    7c8e:	4bc0      	ldr	r3, [pc, #768]	; (7f90 <lcd_displaying_task+0x3e0>)
    7c90:	4798      	blx	r3
	LCD_setCursor(0,1);
    7c92:	2101      	movs	r1, #1
    7c94:	2000      	movs	r0, #0
    7c96:	4bbc      	ldr	r3, [pc, #752]	; (7f88 <lcd_displaying_task+0x3d8>)
    7c98:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
    7c9a:	4bbe      	ldr	r3, [pc, #760]	; (7f94 <lcd_displaying_task+0x3e4>)
    7c9c:	0018      	movs	r0, r3
    7c9e:	4bbc      	ldr	r3, [pc, #752]	; (7f90 <lcd_displaying_task+0x3e0>)
    7ca0:	4798      	blx	r3
	vTaskDelay(3000);
    7ca2:	4bbd      	ldr	r3, [pc, #756]	; (7f98 <lcd_displaying_task+0x3e8>)
    7ca4:	0018      	movs	r0, r3
    7ca6:	4bae      	ldr	r3, [pc, #696]	; (7f60 <lcd_displaying_task+0x3b0>)
    7ca8:	4798      	blx	r3
	
	LCD_clear();
    7caa:	4bb6      	ldr	r3, [pc, #728]	; (7f84 <lcd_displaying_task+0x3d4>)
    7cac:	4798      	blx	r3
	LCD_setCursor(0,0);
    7cae:	2100      	movs	r1, #0
    7cb0:	2000      	movs	r0, #0
    7cb2:	4bb5      	ldr	r3, [pc, #724]	; (7f88 <lcd_displaying_task+0x3d8>)
    7cb4:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
    7cb6:	4bb9      	ldr	r3, [pc, #740]	; (7f9c <lcd_displaying_task+0x3ec>)
    7cb8:	0018      	movs	r0, r3
    7cba:	4bb5      	ldr	r3, [pc, #724]	; (7f90 <lcd_displaying_task+0x3e0>)
    7cbc:	4798      	blx	r3
	LCD_setCursor(0,1);
    7cbe:	2101      	movs	r1, #1
    7cc0:	2000      	movs	r0, #0
    7cc2:	4bb1      	ldr	r3, [pc, #708]	; (7f88 <lcd_displaying_task+0x3d8>)
    7cc4:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
    7cc6:	4ab6      	ldr	r2, [pc, #728]	; (7fa0 <lcd_displaying_task+0x3f0>)
    7cc8:	4bb6      	ldr	r3, [pc, #728]	; (7fa4 <lcd_displaying_task+0x3f4>)
    7cca:	0011      	movs	r1, r2
    7ccc:	0018      	movs	r0, r3
    7cce:	4bb0      	ldr	r3, [pc, #704]	; (7f90 <lcd_displaying_task+0x3e0>)
    7cd0:	4798      	blx	r3
	vTaskDelay(2000);
    7cd2:	23fa      	movs	r3, #250	; 0xfa
    7cd4:	00db      	lsls	r3, r3, #3
    7cd6:	0018      	movs	r0, r3
    7cd8:	4ba1      	ldr	r3, [pc, #644]	; (7f60 <lcd_displaying_task+0x3b0>)
    7cda:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
    7cdc:	23fa      	movs	r3, #250	; 0xfa
    7cde:	0119      	lsls	r1, r3, #4
    7ce0:	4bb1      	ldr	r3, [pc, #708]	; (7fa8 <lcd_displaying_task+0x3f8>)
    7ce2:	9300      	str	r3, [sp, #0]
    7ce4:	2300      	movs	r3, #0
    7ce6:	2201      	movs	r2, #1
    7ce8:	2000      	movs	r0, #0
    7cea:	4cb0      	ldr	r4, [pc, #704]	; (7fac <lcd_displaying_task+0x3fc>)
    7cec:	47a0      	blx	r4
    7cee:	0002      	movs	r2, r0
    7cf0:	4baf      	ldr	r3, [pc, #700]	; (7fb0 <lcd_displaying_task+0x400>)
    7cf2:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
    7cf4:	4bae      	ldr	r3, [pc, #696]	; (7fb0 <lcd_displaying_task+0x400>)
    7cf6:	681c      	ldr	r4, [r3, #0]
    7cf8:	4bae      	ldr	r3, [pc, #696]	; (7fb4 <lcd_displaying_task+0x404>)
    7cfa:	4798      	blx	r3
    7cfc:	0002      	movs	r2, r0
    7cfe:	2300      	movs	r3, #0
    7d00:	9300      	str	r3, [sp, #0]
    7d02:	2300      	movs	r3, #0
    7d04:	2101      	movs	r1, #1
    7d06:	0020      	movs	r0, r4
    7d08:	4cab      	ldr	r4, [pc, #684]	; (7fb8 <lcd_displaying_task+0x408>)
    7d0a:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
    7d0c:	4b91      	ldr	r3, [pc, #580]	; (7f54 <lcd_displaying_task+0x3a4>)
    7d0e:	781b      	ldrb	r3, [r3, #0]
    7d10:	b2db      	uxtb	r3, r3
    7d12:	2b00      	cmp	r3, #0
    7d14:	d009      	beq.n	7d2a <lcd_displaying_task+0x17a>
		{
			lcd_in_sleep = false;
    7d16:	4b8f      	ldr	r3, [pc, #572]	; (7f54 <lcd_displaying_task+0x3a4>)
    7d18:	2200      	movs	r2, #0
    7d1a:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
    7d1c:	4b8f      	ldr	r3, [pc, #572]	; (7f5c <lcd_displaying_task+0x3ac>)
    7d1e:	4798      	blx	r3
			vTaskDelay(100);
    7d20:	2064      	movs	r0, #100	; 0x64
    7d22:	4b8f      	ldr	r3, [pc, #572]	; (7f60 <lcd_displaying_task+0x3b0>)
    7d24:	4798      	blx	r3
			LCD_init();
    7d26:	4b8f      	ldr	r3, [pc, #572]	; (7f64 <lcd_displaying_task+0x3b4>)
    7d28:	4798      	blx	r3
		}
		
		switch(screen)
    7d2a:	233f      	movs	r3, #63	; 0x3f
    7d2c:	18fb      	adds	r3, r7, r3
    7d2e:	781b      	ldrb	r3, [r3, #0]
    7d30:	2b06      	cmp	r3, #6
    7d32:	d900      	bls.n	7d36 <lcd_displaying_task+0x186>
    7d34:	e1fa      	b.n	812c <lcd_displaying_task+0x57c>
    7d36:	009a      	lsls	r2, r3, #2
    7d38:	4ba0      	ldr	r3, [pc, #640]	; (7fbc <lcd_displaying_task+0x40c>)
    7d3a:	18d3      	adds	r3, r2, r3
    7d3c:	681b      	ldr	r3, [r3, #0]
    7d3e:	469f      	mov	pc, r3
		{
			case  1:
			{
				LCD_setCursor(0,0);
    7d40:	2100      	movs	r1, #0
    7d42:	2000      	movs	r0, #0
    7d44:	4b90      	ldr	r3, [pc, #576]	; (7f88 <lcd_displaying_task+0x3d8>)
    7d46:	4798      	blx	r3
				lcd_printf("VRY   VYB   VBR ");
    7d48:	4b9d      	ldr	r3, [pc, #628]	; (7fc0 <lcd_displaying_task+0x410>)
    7d4a:	0018      	movs	r0, r3
    7d4c:	4b90      	ldr	r3, [pc, #576]	; (7f90 <lcd_displaying_task+0x3e0>)
    7d4e:	4798      	blx	r3
				LCD_setCursor(0,1);
    7d50:	2101      	movs	r1, #1
    7d52:	2000      	movs	r0, #0
    7d54:	4b8c      	ldr	r3, [pc, #560]	; (7f88 <lcd_displaying_task+0x3d8>)
    7d56:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
    7d58:	4b9a      	ldr	r3, [pc, #616]	; (7fc4 <lcd_displaying_task+0x414>)
    7d5a:	681a      	ldr	r2, [r3, #0]
    7d5c:	4b9a      	ldr	r3, [pc, #616]	; (7fc8 <lcd_displaying_task+0x418>)
    7d5e:	0011      	movs	r1, r2
    7d60:	0018      	movs	r0, r3
    7d62:	4b8b      	ldr	r3, [pc, #556]	; (7f90 <lcd_displaying_task+0x3e0>)
    7d64:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
    7d66:	4b97      	ldr	r3, [pc, #604]	; (7fc4 <lcd_displaying_task+0x414>)
    7d68:	685a      	ldr	r2, [r3, #4]
    7d6a:	4b97      	ldr	r3, [pc, #604]	; (7fc8 <lcd_displaying_task+0x418>)
    7d6c:	0011      	movs	r1, r2
    7d6e:	0018      	movs	r0, r3
    7d70:	4b87      	ldr	r3, [pc, #540]	; (7f90 <lcd_displaying_task+0x3e0>)
    7d72:	4798      	blx	r3
				lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
    7d74:	4b93      	ldr	r3, [pc, #588]	; (7fc4 <lcd_displaying_task+0x414>)
    7d76:	689a      	ldr	r2, [r3, #8]
    7d78:	4b94      	ldr	r3, [pc, #592]	; (7fcc <lcd_displaying_task+0x41c>)
    7d7a:	0011      	movs	r1, r2
    7d7c:	0018      	movs	r0, r3
    7d7e:	4b84      	ldr	r3, [pc, #528]	; (7f90 <lcd_displaying_task+0x3e0>)
    7d80:	4798      	blx	r3
				break;
    7d82:	e1d3      	b.n	812c <lcd_displaying_task+0x57c>
			}
			case  2:
			{
				if(!getMotorState())
    7d84:	4b92      	ldr	r3, [pc, #584]	; (7fd0 <lcd_displaying_task+0x420>)
    7d86:	4798      	blx	r3
    7d88:	0003      	movs	r3, r0
    7d8a:	001a      	movs	r2, r3
    7d8c:	2301      	movs	r3, #1
    7d8e:	4053      	eors	r3, r2
    7d90:	b2db      	uxtb	r3, r3
    7d92:	2b00      	cmp	r3, #0
    7d94:	d010      	beq.n	7db8 <lcd_displaying_task+0x208>
				{
					LCD_setCursor(0,0);
    7d96:	2100      	movs	r1, #0
    7d98:	2000      	movs	r0, #0
    7d9a:	4b7b      	ldr	r3, [pc, #492]	; (7f88 <lcd_displaying_task+0x3d8>)
    7d9c:	4798      	blx	r3
					lcd_printf("MOTOR:  OFF     ");
    7d9e:	4b8d      	ldr	r3, [pc, #564]	; (7fd4 <lcd_displaying_task+0x424>)
    7da0:	0018      	movs	r0, r3
    7da2:	4b7b      	ldr	r3, [pc, #492]	; (7f90 <lcd_displaying_task+0x3e0>)
    7da4:	4798      	blx	r3
					LCD_setCursor(0,1);
    7da6:	2101      	movs	r1, #1
    7da8:	2000      	movs	r0, #0
    7daa:	4b77      	ldr	r3, [pc, #476]	; (7f88 <lcd_displaying_task+0x3d8>)
    7dac:	4798      	blx	r3
					lcd_printf("                ");
    7dae:	4b8a      	ldr	r3, [pc, #552]	; (7fd8 <lcd_displaying_task+0x428>)
    7db0:	0018      	movs	r0, r3
    7db2:	4b77      	ldr	r3, [pc, #476]	; (7f90 <lcd_displaying_task+0x3e0>)
    7db4:	4798      	blx	r3
					LCD_setCursor(0,0);
					lcd_printf("MOTOR CURRENT:  ");
					LCD_setCursor(0,1);
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
				}
				break;
    7db6:	e1b9      	b.n	812c <lcd_displaying_task+0x57c>
					LCD_setCursor(0,0);
    7db8:	2100      	movs	r1, #0
    7dba:	2000      	movs	r0, #0
    7dbc:	4b72      	ldr	r3, [pc, #456]	; (7f88 <lcd_displaying_task+0x3d8>)
    7dbe:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
    7dc0:	4b86      	ldr	r3, [pc, #536]	; (7fdc <lcd_displaying_task+0x42c>)
    7dc2:	0018      	movs	r0, r3
    7dc4:	4b72      	ldr	r3, [pc, #456]	; (7f90 <lcd_displaying_task+0x3e0>)
    7dc6:	4798      	blx	r3
					LCD_setCursor(0,1);
    7dc8:	2101      	movs	r1, #1
    7dca:	2000      	movs	r0, #0
    7dcc:	4b6e      	ldr	r3, [pc, #440]	; (7f88 <lcd_displaying_task+0x3d8>)
    7dce:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
    7dd0:	4b7c      	ldr	r3, [pc, #496]	; (7fc4 <lcd_displaying_task+0x414>)
    7dd2:	8a9b      	ldrh	r3, [r3, #20]
    7dd4:	b29b      	uxth	r3, r3
    7dd6:	0019      	movs	r1, r3
    7dd8:	4b7a      	ldr	r3, [pc, #488]	; (7fc4 <lcd_displaying_task+0x414>)
    7dda:	8adb      	ldrh	r3, [r3, #22]
    7ddc:	b29b      	uxth	r3, r3
    7dde:	001a      	movs	r2, r3
    7de0:	4b7f      	ldr	r3, [pc, #508]	; (7fe0 <lcd_displaying_task+0x430>)
    7de2:	0018      	movs	r0, r3
    7de4:	4b6a      	ldr	r3, [pc, #424]	; (7f90 <lcd_displaying_task+0x3e0>)
    7de6:	4798      	blx	r3
				break;
    7de8:	e1a0      	b.n	812c <lcd_displaying_task+0x57c>
			}
			
			case 3:
			{
				LCD_setCursor(0,0);
    7dea:	2100      	movs	r1, #0
    7dec:	2000      	movs	r0, #0
    7dee:	4b66      	ldr	r3, [pc, #408]	; (7f88 <lcd_displaying_task+0x3d8>)
    7df0:	4798      	blx	r3
				lcd_printf("3 PHASE SEQ:");
    7df2:	4b7c      	ldr	r3, [pc, #496]	; (7fe4 <lcd_displaying_task+0x434>)
    7df4:	0018      	movs	r0, r3
    7df6:	4b66      	ldr	r3, [pc, #408]	; (7f90 <lcd_displaying_task+0x3e0>)
    7df8:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    7dfa:	4b7b      	ldr	r3, [pc, #492]	; (7fe8 <lcd_displaying_task+0x438>)
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	b2db      	uxtb	r3, r3
    7e00:	2b02      	cmp	r3, #2
    7e02:	d104      	bne.n	7e0e <lcd_displaying_task+0x25e>
				{
					lcd_printf(" OK ");
    7e04:	4b79      	ldr	r3, [pc, #484]	; (7fec <lcd_displaying_task+0x43c>)
    7e06:	0018      	movs	r0, r3
    7e08:	4b61      	ldr	r3, [pc, #388]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e0a:	4798      	blx	r3
    7e0c:	e003      	b.n	7e16 <lcd_displaying_task+0x266>
				}
				else
				{
					lcd_printf(" ERR");
    7e0e:	4b78      	ldr	r3, [pc, #480]	; (7ff0 <lcd_displaying_task+0x440>)
    7e10:	0018      	movs	r0, r3
    7e12:	4b5f      	ldr	r3, [pc, #380]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e14:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7e16:	2101      	movs	r1, #1
    7e18:	2000      	movs	r0, #0
    7e1a:	4b5b      	ldr	r3, [pc, #364]	; (7f88 <lcd_displaying_task+0x3d8>)
    7e1c:	4798      	blx	r3
				lcd_printf("PHASE STATE:");
    7e1e:	4b75      	ldr	r3, [pc, #468]	; (7ff4 <lcd_displaying_task+0x444>)
    7e20:	0018      	movs	r0, r3
    7e22:	4b5b      	ldr	r3, [pc, #364]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e24:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
    7e26:	4b70      	ldr	r3, [pc, #448]	; (7fe8 <lcd_displaying_task+0x438>)
    7e28:	785b      	ldrb	r3, [r3, #1]
    7e2a:	b2db      	uxtb	r3, r3
    7e2c:	2b03      	cmp	r3, #3
    7e2e:	d104      	bne.n	7e3a <lcd_displaying_task+0x28a>
				{
					lcd_printf(" 3PH ");
    7e30:	4b71      	ldr	r3, [pc, #452]	; (7ff8 <lcd_displaying_task+0x448>)
    7e32:	0018      	movs	r0, r3
    7e34:	4b56      	ldr	r3, [pc, #344]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e36:	4798      	blx	r3
				}
				else
				{
					lcd_printf(" OFF");
				}
				break;
    7e38:	e178      	b.n	812c <lcd_displaying_task+0x57c>
				else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
    7e3a:	4b6b      	ldr	r3, [pc, #428]	; (7fe8 <lcd_displaying_task+0x438>)
    7e3c:	785b      	ldrb	r3, [r3, #1]
    7e3e:	b2db      	uxtb	r3, r3
    7e40:	2b02      	cmp	r3, #2
    7e42:	d104      	bne.n	7e4e <lcd_displaying_task+0x29e>
					lcd_printf(" 2PH ");
    7e44:	4b6d      	ldr	r3, [pc, #436]	; (7ffc <lcd_displaying_task+0x44c>)
    7e46:	0018      	movs	r0, r3
    7e48:	4b51      	ldr	r3, [pc, #324]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e4a:	4798      	blx	r3
				break;
    7e4c:	e16e      	b.n	812c <lcd_displaying_task+0x57c>
					lcd_printf(" OFF");
    7e4e:	4b6c      	ldr	r3, [pc, #432]	; (8000 <lcd_displaying_task+0x450>)
    7e50:	0018      	movs	r0, r3
    7e52:	4b4f      	ldr	r3, [pc, #316]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e54:	4798      	blx	r3
				break;
    7e56:	e169      	b.n	812c <lcd_displaying_task+0x57c>
			}
			case 4:
			{
				LCD_setCursor(0,0);
    7e58:	2100      	movs	r1, #0
    7e5a:	2000      	movs	r0, #0
    7e5c:	4b4a      	ldr	r3, [pc, #296]	; (7f88 <lcd_displaying_task+0x3d8>)
    7e5e:	4798      	blx	r3
				lcd_printf("O-LEVEL : ");
    7e60:	4b68      	ldr	r3, [pc, #416]	; (8004 <lcd_displaying_task+0x454>)
    7e62:	0018      	movs	r0, r3
    7e64:	4b4a      	ldr	r3, [pc, #296]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e66:	4798      	blx	r3
				if (overheadLevel == OVERHEADHIGHLEVEL)
    7e68:	4b67      	ldr	r3, [pc, #412]	; (8008 <lcd_displaying_task+0x458>)
    7e6a:	781b      	ldrb	r3, [r3, #0]
    7e6c:	b2db      	uxtb	r3, r3
    7e6e:	2b02      	cmp	r3, #2
    7e70:	d104      	bne.n	7e7c <lcd_displaying_task+0x2cc>
				{
					lcd_printf("HIGH  ");
    7e72:	4b66      	ldr	r3, [pc, #408]	; (800c <lcd_displaying_task+0x45c>)
    7e74:	0018      	movs	r0, r3
    7e76:	4b46      	ldr	r3, [pc, #280]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e78:	4798      	blx	r3
    7e7a:	e012      	b.n	7ea2 <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADMIDLEVEL)
    7e7c:	4b62      	ldr	r3, [pc, #392]	; (8008 <lcd_displaying_task+0x458>)
    7e7e:	781b      	ldrb	r3, [r3, #0]
    7e80:	b2db      	uxtb	r3, r3
    7e82:	2b01      	cmp	r3, #1
    7e84:	d104      	bne.n	7e90 <lcd_displaying_task+0x2e0>
				{
					lcd_printf("MID   ");
    7e86:	4b62      	ldr	r3, [pc, #392]	; (8010 <lcd_displaying_task+0x460>)
    7e88:	0018      	movs	r0, r3
    7e8a:	4b41      	ldr	r3, [pc, #260]	; (7f90 <lcd_displaying_task+0x3e0>)
    7e8c:	4798      	blx	r3
    7e8e:	e008      	b.n	7ea2 <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADCRITICALLEVEL)
    7e90:	4b5d      	ldr	r3, [pc, #372]	; (8008 <lcd_displaying_task+0x458>)
    7e92:	781b      	ldrb	r3, [r3, #0]
    7e94:	b2db      	uxtb	r3, r3
    7e96:	2b00      	cmp	r3, #0
    7e98:	d103      	bne.n	7ea2 <lcd_displaying_task+0x2f2>
				{
					lcd_printf("LOW   ");
    7e9a:	4b5e      	ldr	r3, [pc, #376]	; (8014 <lcd_displaying_task+0x464>)
    7e9c:	0018      	movs	r0, r3
    7e9e:	4b3c      	ldr	r3, [pc, #240]	; (7f90 <lcd_displaying_task+0x3e0>)
    7ea0:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7ea2:	2101      	movs	r1, #1
    7ea4:	2000      	movs	r0, #0
    7ea6:	4b38      	ldr	r3, [pc, #224]	; (7f88 <lcd_displaying_task+0x3d8>)
    7ea8:	4798      	blx	r3
				lcd_printf("U-LEVEL : ");
    7eaa:	4b5b      	ldr	r3, [pc, #364]	; (8018 <lcd_displaying_task+0x468>)
    7eac:	0018      	movs	r0, r3
    7eae:	4b38      	ldr	r3, [pc, #224]	; (7f90 <lcd_displaying_task+0x3e0>)
    7eb0:	4798      	blx	r3
				if (undergroundLevel == CRITICALLEVEL)
    7eb2:	4b5a      	ldr	r3, [pc, #360]	; (801c <lcd_displaying_task+0x46c>)
    7eb4:	781b      	ldrb	r3, [r3, #0]
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	d104      	bne.n	7ec4 <lcd_displaying_task+0x314>
				{
					lcd_printf("CRTCL ");
    7eba:	4b59      	ldr	r3, [pc, #356]	; (8020 <lcd_displaying_task+0x470>)
    7ebc:	0018      	movs	r0, r3
    7ebe:	4b34      	ldr	r3, [pc, #208]	; (7f90 <lcd_displaying_task+0x3e0>)
    7ec0:	4798      	blx	r3
				}
				else if (undergroundLevel == HIGHLEVEL)
				{
					lcd_printf("HIGH  ");
				}
				break;
    7ec2:	e130      	b.n	8126 <lcd_displaying_task+0x576>
				else if (undergroundLevel == LOWLEVEL)
    7ec4:	4b55      	ldr	r3, [pc, #340]	; (801c <lcd_displaying_task+0x46c>)
    7ec6:	781b      	ldrb	r3, [r3, #0]
    7ec8:	2b01      	cmp	r3, #1
    7eca:	d104      	bne.n	7ed6 <lcd_displaying_task+0x326>
					lcd_printf("LOW   ");
    7ecc:	4b51      	ldr	r3, [pc, #324]	; (8014 <lcd_displaying_task+0x464>)
    7ece:	0018      	movs	r0, r3
    7ed0:	4b2f      	ldr	r3, [pc, #188]	; (7f90 <lcd_displaying_task+0x3e0>)
    7ed2:	4798      	blx	r3
				break;
    7ed4:	e127      	b.n	8126 <lcd_displaying_task+0x576>
				else if (undergroundLevel == MIDLEVEL)
    7ed6:	4b51      	ldr	r3, [pc, #324]	; (801c <lcd_displaying_task+0x46c>)
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	2b02      	cmp	r3, #2
    7edc:	d104      	bne.n	7ee8 <lcd_displaying_task+0x338>
					lcd_printf("MID   ");
    7ede:	4b4c      	ldr	r3, [pc, #304]	; (8010 <lcd_displaying_task+0x460>)
    7ee0:	0018      	movs	r0, r3
    7ee2:	4b2b      	ldr	r3, [pc, #172]	; (7f90 <lcd_displaying_task+0x3e0>)
    7ee4:	4798      	blx	r3
				break;
    7ee6:	e11e      	b.n	8126 <lcd_displaying_task+0x576>
				else if (undergroundLevel == HIGHLEVEL)
    7ee8:	4b4c      	ldr	r3, [pc, #304]	; (801c <lcd_displaying_task+0x46c>)
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	2b03      	cmp	r3, #3
    7eee:	d000      	beq.n	7ef2 <lcd_displaying_task+0x342>
    7ef0:	e119      	b.n	8126 <lcd_displaying_task+0x576>
					lcd_printf("HIGH  ");
    7ef2:	4b46      	ldr	r3, [pc, #280]	; (800c <lcd_displaying_task+0x45c>)
    7ef4:	0018      	movs	r0, r3
    7ef6:	4b26      	ldr	r3, [pc, #152]	; (7f90 <lcd_displaying_task+0x3e0>)
    7ef8:	4798      	blx	r3
				break;
    7efa:	e114      	b.n	8126 <lcd_displaying_task+0x576>
			}
			case 5:
			{
				LCD_setCursor(0,0);
    7efc:	2100      	movs	r1, #0
    7efe:	2000      	movs	r0, #0
    7f00:	4b21      	ldr	r3, [pc, #132]	; (7f88 <lcd_displaying_task+0x3d8>)
    7f02:	4798      	blx	r3
				lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
    7f04:	4b2f      	ldr	r3, [pc, #188]	; (7fc4 <lcd_displaying_task+0x414>)
    7f06:	7f1b      	ldrb	r3, [r3, #28]
    7f08:	b2db      	uxtb	r3, r3
    7f0a:	001a      	movs	r2, r3
    7f0c:	4b45      	ldr	r3, [pc, #276]	; (8024 <lcd_displaying_task+0x474>)
    7f0e:	0011      	movs	r1, r2
    7f10:	0018      	movs	r0, r3
    7f12:	4b1f      	ldr	r3, [pc, #124]	; (7f90 <lcd_displaying_task+0x3e0>)
    7f14:	4798      	blx	r3
				LCD_setCursor(0,1);
    7f16:	2101      	movs	r1, #1
    7f18:	2000      	movs	r0, #0
    7f1a:	4b1b      	ldr	r3, [pc, #108]	; (7f88 <lcd_displaying_task+0x3d8>)
    7f1c:	4798      	blx	r3
				lcd_printf("SIGNAL : ");
    7f1e:	4b42      	ldr	r3, [pc, #264]	; (8028 <lcd_displaying_task+0x478>)
    7f20:	0018      	movs	r0, r3
    7f22:	4b1b      	ldr	r3, [pc, #108]	; (7f90 <lcd_displaying_task+0x3e0>)
    7f24:	4798      	blx	r3
				LCD_setCursor(9,1);
    7f26:	2101      	movs	r1, #1
    7f28:	2009      	movs	r0, #9
    7f2a:	4b17      	ldr	r3, [pc, #92]	; (7f88 <lcd_displaying_task+0x3d8>)
    7f2c:	4798      	blx	r3
				lcd_printf("       ");
    7f2e:	4b3f      	ldr	r3, [pc, #252]	; (802c <lcd_displaying_task+0x47c>)
    7f30:	0018      	movs	r0, r3
    7f32:	4b17      	ldr	r3, [pc, #92]	; (7f90 <lcd_displaying_task+0x3e0>)
    7f34:	4798      	blx	r3
				LCD_setCursor(9,1);
    7f36:	2101      	movs	r1, #1
    7f38:	2009      	movs	r0, #9
    7f3a:	4b13      	ldr	r3, [pc, #76]	; (7f88 <lcd_displaying_task+0x3d8>)
    7f3c:	4798      	blx	r3
				
				uint8_t tempSignal = Signal_Strength;
    7f3e:	233b      	movs	r3, #59	; 0x3b
    7f40:	18fb      	adds	r3, r7, r3
    7f42:	4a3b      	ldr	r2, [pc, #236]	; (8030 <lcd_displaying_task+0x480>)
    7f44:	7812      	ldrb	r2, [r2, #0]
    7f46:	701a      	strb	r2, [r3, #0]
				for (uint8_t i=0;i<=tempSignal;i++)
    7f48:	233e      	movs	r3, #62	; 0x3e
    7f4a:	18fb      	adds	r3, r7, r3
    7f4c:	2200      	movs	r2, #0
    7f4e:	701a      	strb	r2, [r3, #0]
    7f50:	e07d      	b.n	804e <lcd_displaying_task+0x49e>
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	20000818 	.word	0x20000818
    7f58:	00003975 	.word	0x00003975
    7f5c:	000039a9 	.word	0x000039a9
    7f60:	0000f0a9 	.word	0x0000f0a9
    7f64:	000036b1 	.word	0x000036b1
    7f68:	00017d67 	.word	0x00017d67
    7f6c:	00019748 	.word	0x00019748
    7f70:	00019750 	.word	0x00019750
    7f74:	00019758 	.word	0x00019758
    7f78:	00019760 	.word	0x00019760
    7f7c:	00019768 	.word	0x00019768
    7f80:	00003cb1 	.word	0x00003cb1
    7f84:	00003c41 	.word	0x00003c41
    7f88:	00003d11 	.word	0x00003d11
    7f8c:	00019564 	.word	0x00019564
    7f90:	00003e0d 	.word	0x00003e0d
    7f94:	00019578 	.word	0x00019578
    7f98:	00000bb8 	.word	0x00000bb8
    7f9c:	0001958c 	.word	0x0001958c
    7fa0:	000195a0 	.word	0x000195a0
    7fa4:	000195b4 	.word	0x000195b4
    7fa8:	00008269 	.word	0x00008269
    7fac:	0000fe11 	.word	0x0000fe11
    7fb0:	20000238 	.word	0x20000238
    7fb4:	0000f40d 	.word	0x0000f40d
    7fb8:	0000feb5 	.word	0x0000feb5
    7fbc:	00019770 	.word	0x00019770
    7fc0:	000195b8 	.word	0x000195b8
    7fc4:	200006dc 	.word	0x200006dc
    7fc8:	000195cc 	.word	0x000195cc
    7fcc:	000195d8 	.word	0x000195d8
    7fd0:	00009f95 	.word	0x00009f95
    7fd4:	000195e0 	.word	0x000195e0
    7fd8:	000195f4 	.word	0x000195f4
    7fdc:	00019608 	.word	0x00019608
    7fe0:	0001961c 	.word	0x0001961c
    7fe4:	00019634 	.word	0x00019634
    7fe8:	20000720 	.word	0x20000720
    7fec:	00019644 	.word	0x00019644
    7ff0:	0001964c 	.word	0x0001964c
    7ff4:	00019654 	.word	0x00019654
    7ff8:	00019664 	.word	0x00019664
    7ffc:	0001966c 	.word	0x0001966c
    8000:	00019674 	.word	0x00019674
    8004:	0001967c 	.word	0x0001967c
    8008:	20000768 	.word	0x20000768
    800c:	00019688 	.word	0x00019688
    8010:	00019690 	.word	0x00019690
    8014:	00019698 	.word	0x00019698
    8018:	000196a0 	.word	0x000196a0
    801c:	20000814 	.word	0x20000814
    8020:	000196ac 	.word	0x000196ac
    8024:	000196b4 	.word	0x000196b4
    8028:	000196c8 	.word	0x000196c8
    802c:	000196d4 	.word	0x000196d4
    8030:	20000762 	.word	0x20000762
				{
					LCD_write(i);
    8034:	233e      	movs	r3, #62	; 0x3e
    8036:	18fb      	adds	r3, r7, r3
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	0018      	movs	r0, r3
    803c:	4b65      	ldr	r3, [pc, #404]	; (81d4 <lcd_displaying_task+0x624>)
    803e:	4798      	blx	r3
				for (uint8_t i=0;i<=tempSignal;i++)
    8040:	233e      	movs	r3, #62	; 0x3e
    8042:	18fb      	adds	r3, r7, r3
    8044:	781a      	ldrb	r2, [r3, #0]
    8046:	233e      	movs	r3, #62	; 0x3e
    8048:	18fb      	adds	r3, r7, r3
    804a:	3201      	adds	r2, #1
    804c:	701a      	strb	r2, [r3, #0]
    804e:	233e      	movs	r3, #62	; 0x3e
    8050:	18fa      	adds	r2, r7, r3
    8052:	233b      	movs	r3, #59	; 0x3b
    8054:	18fb      	adds	r3, r7, r3
    8056:	7812      	ldrb	r2, [r2, #0]
    8058:	781b      	ldrb	r3, [r3, #0]
    805a:	429a      	cmp	r2, r3
    805c:	d9ea      	bls.n	8034 <lcd_displaying_task+0x484>
				}
				
				break;
    805e:	e065      	b.n	812c <lcd_displaying_task+0x57c>
			}
			case 6:
			{
				LCD_setCursor(0,0);
    8060:	2100      	movs	r1, #0
    8062:	2000      	movs	r0, #0
    8064:	4b5c      	ldr	r3, [pc, #368]	; (81d8 <lcd_displaying_task+0x628>)
    8066:	4798      	blx	r3
				switch(callStateOnLCD)
    8068:	4b5c      	ldr	r3, [pc, #368]	; (81dc <lcd_displaying_task+0x62c>)
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	2b05      	cmp	r3, #5
    806e:	d85c      	bhi.n	812a <lcd_displaying_task+0x57a>
    8070:	009a      	lsls	r2, r3, #2
    8072:	4b5b      	ldr	r3, [pc, #364]	; (81e0 <lcd_displaying_task+0x630>)
    8074:	18d3      	adds	r3, r2, r3
    8076:	681b      	ldr	r3, [r3, #0]
    8078:	469f      	mov	pc, r3
				{
					case LCDCALLSTATE_RINGING:
					{
						lcd_printf("INCOMING CALL.. ");
    807a:	4b5a      	ldr	r3, [pc, #360]	; (81e4 <lcd_displaying_task+0x634>)
    807c:	0018      	movs	r0, r3
    807e:	4b5a      	ldr	r3, [pc, #360]	; (81e8 <lcd_displaying_task+0x638>)
    8080:	4798      	blx	r3
						LCD_setCursor(0,1);
    8082:	2101      	movs	r1, #1
    8084:	2000      	movs	r0, #0
    8086:	4b54      	ldr	r3, [pc, #336]	; (81d8 <lcd_displaying_task+0x628>)
    8088:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    808a:	4a58      	ldr	r2, [pc, #352]	; (81ec <lcd_displaying_task+0x63c>)
    808c:	4b58      	ldr	r3, [pc, #352]	; (81f0 <lcd_displaying_task+0x640>)
    808e:	0011      	movs	r1, r2
    8090:	0018      	movs	r0, r3
    8092:	4b55      	ldr	r3, [pc, #340]	; (81e8 <lcd_displaying_task+0x638>)
    8094:	4798      	blx	r3
						break;
    8096:	e045      	b.n	8124 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCALL:
					{
						lcd_printf("IN CALL...      ");
    8098:	4b56      	ldr	r3, [pc, #344]	; (81f4 <lcd_displaying_task+0x644>)
    809a:	0018      	movs	r0, r3
    809c:	4b52      	ldr	r3, [pc, #328]	; (81e8 <lcd_displaying_task+0x638>)
    809e:	4798      	blx	r3
						LCD_setCursor(0,1);
    80a0:	2101      	movs	r1, #1
    80a2:	2000      	movs	r0, #0
    80a4:	4b4c      	ldr	r3, [pc, #304]	; (81d8 <lcd_displaying_task+0x628>)
    80a6:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    80a8:	4a50      	ldr	r2, [pc, #320]	; (81ec <lcd_displaying_task+0x63c>)
    80aa:	4b51      	ldr	r3, [pc, #324]	; (81f0 <lcd_displaying_task+0x640>)
    80ac:	0011      	movs	r1, r2
    80ae:	0018      	movs	r0, r3
    80b0:	4b4d      	ldr	r3, [pc, #308]	; (81e8 <lcd_displaying_task+0x638>)
    80b2:	4798      	blx	r3
						break;
    80b4:	e036      	b.n	8124 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOING:
					{
						lcd_printf("DIALING...      ");
    80b6:	4b50      	ldr	r3, [pc, #320]	; (81f8 <lcd_displaying_task+0x648>)
    80b8:	0018      	movs	r0, r3
    80ba:	4b4b      	ldr	r3, [pc, #300]	; (81e8 <lcd_displaying_task+0x638>)
    80bc:	4798      	blx	r3
						LCD_setCursor(0,1);
    80be:	2101      	movs	r1, #1
    80c0:	2000      	movs	r0, #0
    80c2:	4b45      	ldr	r3, [pc, #276]	; (81d8 <lcd_displaying_task+0x628>)
    80c4:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    80c6:	4a49      	ldr	r2, [pc, #292]	; (81ec <lcd_displaying_task+0x63c>)
    80c8:	4b49      	ldr	r3, [pc, #292]	; (81f0 <lcd_displaying_task+0x640>)
    80ca:	0011      	movs	r1, r2
    80cc:	0018      	movs	r0, r3
    80ce:	4b46      	ldr	r3, [pc, #280]	; (81e8 <lcd_displaying_task+0x638>)
    80d0:	4798      	blx	r3
						break;
    80d2:	e027      	b.n	8124 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCOMINGSMS:
					{
						lcd_printf("INCOMING SMS... ");
    80d4:	4b49      	ldr	r3, [pc, #292]	; (81fc <lcd_displaying_task+0x64c>)
    80d6:	0018      	movs	r0, r3
    80d8:	4b43      	ldr	r3, [pc, #268]	; (81e8 <lcd_displaying_task+0x638>)
    80da:	4798      	blx	r3
						LCD_setCursor(0,1);
    80dc:	2101      	movs	r1, #1
    80de:	2000      	movs	r0, #0
    80e0:	4b3d      	ldr	r3, [pc, #244]	; (81d8 <lcd_displaying_task+0x628>)
    80e2:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    80e4:	4a41      	ldr	r2, [pc, #260]	; (81ec <lcd_displaying_task+0x63c>)
    80e6:	4b42      	ldr	r3, [pc, #264]	; (81f0 <lcd_displaying_task+0x640>)
    80e8:	0011      	movs	r1, r2
    80ea:	0018      	movs	r0, r3
    80ec:	4b3e      	ldr	r3, [pc, #248]	; (81e8 <lcd_displaying_task+0x638>)
    80ee:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    80f0:	2200      	movs	r2, #0
    80f2:	2100      	movs	r1, #0
    80f4:	2000      	movs	r0, #0
    80f6:	4b42      	ldr	r3, [pc, #264]	; (8200 <lcd_displaying_task+0x650>)
    80f8:	4798      	blx	r3
						break;
    80fa:	e013      	b.n	8124 <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOINGSMS:
					{
						lcd_printf("OUTGOING SMS... ");
    80fc:	4b41      	ldr	r3, [pc, #260]	; (8204 <lcd_displaying_task+0x654>)
    80fe:	0018      	movs	r0, r3
    8100:	4b39      	ldr	r3, [pc, #228]	; (81e8 <lcd_displaying_task+0x638>)
    8102:	4798      	blx	r3
						LCD_setCursor(0,1);
    8104:	2101      	movs	r1, #1
    8106:	2000      	movs	r0, #0
    8108:	4b33      	ldr	r3, [pc, #204]	; (81d8 <lcd_displaying_task+0x628>)
    810a:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    810c:	4a37      	ldr	r2, [pc, #220]	; (81ec <lcd_displaying_task+0x63c>)
    810e:	4b38      	ldr	r3, [pc, #224]	; (81f0 <lcd_displaying_task+0x640>)
    8110:	0011      	movs	r1, r2
    8112:	0018      	movs	r0, r3
    8114:	4b34      	ldr	r3, [pc, #208]	; (81e8 <lcd_displaying_task+0x638>)
    8116:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    8118:	2200      	movs	r2, #0
    811a:	2100      	movs	r1, #0
    811c:	2000      	movs	r0, #0
    811e:	4b38      	ldr	r3, [pc, #224]	; (8200 <lcd_displaying_task+0x650>)
    8120:	4798      	blx	r3
						break;
    8122:	46c0      	nop			; (mov r8, r8)
					}
				}
				break;
    8124:	e001      	b.n	812a <lcd_displaying_task+0x57a>
				break;
    8126:	46c0      	nop			; (mov r8, r8)
    8128:	e000      	b.n	812c <lcd_displaying_task+0x57c>
				break;
    812a:	46c0      	nop			; (mov r8, r8)
			}
		}
		if (xQueueReceive(xfour_Second_Queue,&time,0))
    812c:	4b36      	ldr	r3, [pc, #216]	; (8208 <lcd_displaying_task+0x658>)
    812e:	681b      	ldr	r3, [r3, #0]
    8130:	223a      	movs	r2, #58	; 0x3a
    8132:	18b9      	adds	r1, r7, r2
    8134:	2200      	movs	r2, #0
    8136:	0018      	movs	r0, r3
    8138:	4b34      	ldr	r3, [pc, #208]	; (820c <lcd_displaying_task+0x65c>)
    813a:	4798      	blx	r3
    813c:	1e03      	subs	r3, r0, #0
    813e:	d039      	beq.n	81b4 <lcd_displaying_task+0x604>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
    8140:	4b33      	ldr	r3, [pc, #204]	; (8210 <lcd_displaying_task+0x660>)
    8142:	6818      	ldr	r0, [r3, #0]
    8144:	23fa      	movs	r3, #250	; 0xfa
    8146:	011a      	lsls	r2, r3, #4
    8148:	2301      	movs	r3, #1
    814a:	425b      	negs	r3, r3
    814c:	9300      	str	r3, [sp, #0]
    814e:	2300      	movs	r3, #0
    8150:	2104      	movs	r1, #4
    8152:	4c30      	ldr	r4, [pc, #192]	; (8214 <lcd_displaying_task+0x664>)
    8154:	47a0      	blx	r4
			if(varPauseDisplay==false)
    8156:	4b30      	ldr	r3, [pc, #192]	; (8218 <lcd_displaying_task+0x668>)
    8158:	781b      	ldrb	r3, [r3, #0]
    815a:	b2db      	uxtb	r3, r3
    815c:	2201      	movs	r2, #1
    815e:	4053      	eors	r3, r2
    8160:	b2db      	uxtb	r3, r3
    8162:	2b00      	cmp	r3, #0
    8164:	d026      	beq.n	81b4 <lcd_displaying_task+0x604>
			{
				screen++;
    8166:	233f      	movs	r3, #63	; 0x3f
    8168:	18fb      	adds	r3, r7, r3
    816a:	781a      	ldrb	r2, [r3, #0]
    816c:	233f      	movs	r3, #63	; 0x3f
    816e:	18fb      	adds	r3, r7, r3
    8170:	3201      	adds	r2, #1
    8172:	701a      	strb	r2, [r3, #0]
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==4)
    8174:	4b29      	ldr	r3, [pc, #164]	; (821c <lcd_displaying_task+0x66c>)
    8176:	795b      	ldrb	r3, [r3, #5]
    8178:	2b00      	cmp	r3, #0
    817a:	d10b      	bne.n	8194 <lcd_displaying_task+0x5e4>
    817c:	233f      	movs	r3, #63	; 0x3f
    817e:	18fb      	adds	r3, r7, r3
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	2b04      	cmp	r3, #4
    8184:	d106      	bne.n	8194 <lcd_displaying_task+0x5e4>
				{
					screen++;
    8186:	233f      	movs	r3, #63	; 0x3f
    8188:	18fb      	adds	r3, r7, r3
    818a:	781a      	ldrb	r2, [r3, #0]
    818c:	233f      	movs	r3, #63	; 0x3f
    818e:	18fb      	adds	r3, r7, r3
    8190:	3201      	adds	r2, #1
    8192:	701a      	strb	r2, [r3, #0]
				}
				if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==6)
    8194:	4b11      	ldr	r3, [pc, #68]	; (81dc <lcd_displaying_task+0x62c>)
    8196:	781b      	ldrb	r3, [r3, #0]
    8198:	2b00      	cmp	r3, #0
    819a:	d10b      	bne.n	81b4 <lcd_displaying_task+0x604>
    819c:	233f      	movs	r3, #63	; 0x3f
    819e:	18fb      	adds	r3, r7, r3
    81a0:	781b      	ldrb	r3, [r3, #0]
    81a2:	2b06      	cmp	r3, #6
    81a4:	d106      	bne.n	81b4 <lcd_displaying_task+0x604>
				{
					screen++;
    81a6:	233f      	movs	r3, #63	; 0x3f
    81a8:	18fb      	adds	r3, r7, r3
    81aa:	781a      	ldrb	r2, [r3, #0]
    81ac:	233f      	movs	r3, #63	; 0x3f
    81ae:	18fb      	adds	r3, r7, r3
    81b0:	3201      	adds	r2, #1
    81b2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		if (screen>6)
    81b4:	233f      	movs	r3, #63	; 0x3f
    81b6:	18fb      	adds	r3, r7, r3
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	2b06      	cmp	r3, #6
    81bc:	d903      	bls.n	81c6 <lcd_displaying_task+0x616>
		{
			screen=1;
    81be:	233f      	movs	r3, #63	; 0x3f
    81c0:	18fb      	adds	r3, r7, r3
    81c2:	2201      	movs	r2, #1
    81c4:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
    81c6:	23fa      	movs	r3, #250	; 0xfa
    81c8:	005b      	lsls	r3, r3, #1
    81ca:	0018      	movs	r0, r3
    81cc:	4b14      	ldr	r3, [pc, #80]	; (8220 <lcd_displaying_task+0x670>)
    81ce:	4798      	blx	r3
		if (lcd_in_sleep)
    81d0:	e59c      	b.n	7d0c <lcd_displaying_task+0x15c>
    81d2:	46c0      	nop			; (mov r8, r8)
    81d4:	00003bc5 	.word	0x00003bc5
    81d8:	00003d11 	.word	0x00003d11
    81dc:	20000799 	.word	0x20000799
    81e0:	0001978c 	.word	0x0001978c
    81e4:	000196dc 	.word	0x000196dc
    81e8:	00003e0d 	.word	0x00003e0d
    81ec:	20000800 	.word	0x20000800
    81f0:	000196f0 	.word	0x000196f0
    81f4:	000196f8 	.word	0x000196f8
    81f8:	0001970c 	.word	0x0001970c
    81fc:	00019720 	.word	0x00019720
    8200:	0000bdf5 	.word	0x0000bdf5
    8204:	00019734 	.word	0x00019734
    8208:	20000234 	.word	0x20000234
    820c:	0000e601 	.word	0x0000e601
    8210:	20000238 	.word	0x20000238
    8214:	0000feb5 	.word	0x0000feb5
    8218:	20000784 	.word	0x20000784
    821c:	20000628 	.word	0x20000628
    8220:	0000f0a9 	.word	0x0000f0a9

00008224 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
    8224:	b590      	push	{r4, r7, lr}
    8226:	b083      	sub	sp, #12
    8228:	af02      	add	r7, sp, #8
	
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
    822a:	2200      	movs	r2, #0
    822c:	2101      	movs	r1, #1
    822e:	2001      	movs	r0, #1
    8230:	4b09      	ldr	r3, [pc, #36]	; (8258 <start_lcd_service+0x34>)
    8232:	4798      	blx	r3
    8234:	0002      	movs	r2, r0
    8236:	4b09      	ldr	r3, [pc, #36]	; (825c <start_lcd_service+0x38>)
    8238:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
    823a:	23c8      	movs	r3, #200	; 0xc8
    823c:	005a      	lsls	r2, r3, #1
    823e:	4808      	ldr	r0, [pc, #32]	; (8260 <start_lcd_service+0x3c>)
    8240:	2300      	movs	r3, #0
    8242:	9301      	str	r3, [sp, #4]
    8244:	2301      	movs	r3, #1
    8246:	9300      	str	r3, [sp, #0]
    8248:	2300      	movs	r3, #0
    824a:	2100      	movs	r1, #0
    824c:	4c05      	ldr	r4, [pc, #20]	; (8264 <start_lcd_service+0x40>)
    824e:	47a0      	blx	r4
	
}
    8250:	46c0      	nop			; (mov r8, r8)
    8252:	46bd      	mov	sp, r7
    8254:	b001      	add	sp, #4
    8256:	bd90      	pop	{r4, r7, pc}
    8258:	0000e245 	.word	0x0000e245
    825c:	20000234 	.word	0x20000234
    8260:	00007bb1 	.word	0x00007bb1
    8264:	0000ed69 	.word	0x0000ed69

00008268 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
    8268:	b590      	push	{r4, r7, lr}
    826a:	b085      	sub	sp, #20
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
    8270:	230f      	movs	r3, #15
    8272:	18fb      	adds	r3, r7, r3
    8274:	2201      	movs	r2, #1
    8276:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
    8278:	4b05      	ldr	r3, [pc, #20]	; (8290 <four_second_timer_callback+0x28>)
    827a:	6818      	ldr	r0, [r3, #0]
    827c:	230f      	movs	r3, #15
    827e:	18f9      	adds	r1, r7, r3
    8280:	2300      	movs	r3, #0
    8282:	2200      	movs	r2, #0
    8284:	4c03      	ldr	r4, [pc, #12]	; (8294 <four_second_timer_callback+0x2c>)
    8286:	47a0      	blx	r4
}
    8288:	46c0      	nop			; (mov r8, r8)
    828a:	46bd      	mov	sp, r7
    828c:	b005      	add	sp, #20
    828e:	bd90      	pop	{r4, r7, pc}
    8290:	20000234 	.word	0x20000234
    8294:	0000e4e1 	.word	0x0000e4e1

00008298 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    8298:	b580      	push	{r7, lr}
    829a:	b084      	sub	sp, #16
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    82a0:	687b      	ldr	r3, [r7, #4]
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    82a6:	68fb      	ldr	r3, [r7, #12]
    82a8:	7a5b      	ldrb	r3, [r3, #9]
    82aa:	b2db      	uxtb	r3, r3
    82ac:	b25b      	sxtb	r3, r3
    82ae:	2b00      	cmp	r3, #0
    82b0:	da01      	bge.n	82b6 <ac_is_syncing+0x1e>
		return true;
    82b2:	2301      	movs	r3, #1
    82b4:	e000      	b.n	82b8 <ac_is_syncing+0x20>
	}

	return false;
    82b6:	2300      	movs	r3, #0
#endif
}
    82b8:	0018      	movs	r0, r3
    82ba:	46bd      	mov	sp, r7
    82bc:	b004      	add	sp, #16
    82be:	bd80      	pop	{r7, pc}

000082c0 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b084      	sub	sp, #16
    82c4:	af00      	add	r7, sp, #0
    82c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    82c8:	2300      	movs	r3, #0
    82ca:	60fb      	str	r3, [r7, #12]
    82cc:	e007      	b.n	82de <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
    82ce:	687a      	ldr	r2, [r7, #4]
    82d0:	68fb      	ldr	r3, [r7, #12]
    82d2:	18d3      	adds	r3, r2, r3
    82d4:	2200      	movs	r2, #0
    82d6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    82d8:	68fb      	ldr	r3, [r7, #12]
    82da:	3301      	adds	r3, #1
    82dc:	60fb      	str	r3, [r7, #12]
    82de:	68fb      	ldr	r3, [r7, #12]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d0f4      	beq.n	82ce <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	2200      	movs	r2, #0
    82e8:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
    82ea:	687b      	ldr	r3, [r7, #4]
    82ec:	2203      	movs	r2, #3
    82ee:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
    82f0:	46c0      	nop			; (mov r8, r8)
    82f2:	46bd      	mov	sp, r7
    82f4:	b004      	add	sp, #16
    82f6:	bd80      	pop	{r7, pc}

000082f8 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b084      	sub	sp, #16
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	0018      	movs	r0, r3
    830c:	4b07      	ldr	r3, [pc, #28]	; (832c <ac_enable+0x34>)
    830e:	4798      	blx	r3
    8310:	1e03      	subs	r3, r0, #0
    8312:	d1f9      	bne.n	8308 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
    8314:	68fb      	ldr	r3, [r7, #12]
    8316:	781b      	ldrb	r3, [r3, #0]
    8318:	b2db      	uxtb	r3, r3
    831a:	2202      	movs	r2, #2
    831c:	4313      	orrs	r3, r2
    831e:	b2da      	uxtb	r2, r3
    8320:	68fb      	ldr	r3, [r7, #12]
    8322:	701a      	strb	r2, [r3, #0]
}
    8324:	46c0      	nop			; (mov r8, r8)
    8326:	46bd      	mov	sp, r7
    8328:	b004      	add	sp, #16
    832a:	bd80      	pop	{r7, pc}
    832c:	00008299 	.word	0x00008299

00008330 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
    8330:	b580      	push	{r7, lr}
    8332:	b086      	sub	sp, #24
    8334:	af00      	add	r7, sp, #0
    8336:	6078      	str	r0, [r7, #4]
    8338:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	681b      	ldr	r3, [r3, #0]
    833e:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    8340:	2300      	movs	r3, #0
    8342:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    8344:	2313      	movs	r3, #19
    8346:	18fb      	adds	r3, r7, r3
    8348:	2200      	movs	r2, #0
    834a:	701a      	strb	r2, [r3, #0]
    834c:	e017      	b.n	837e <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
    834e:	2313      	movs	r3, #19
    8350:	18fb      	adds	r3, r7, r3
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	683a      	ldr	r2, [r7, #0]
    8356:	5cd3      	ldrb	r3, [r2, r3]
    8358:	2b00      	cmp	r3, #0
    835a:	d009      	beq.n	8370 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
    835c:	2313      	movs	r3, #19
    835e:	18fb      	adds	r3, r7, r3
    8360:	781b      	ldrb	r3, [r3, #0]
    8362:	2210      	movs	r2, #16
    8364:	409a      	lsls	r2, r3
    8366:	0013      	movs	r3, r2
    8368:	001a      	movs	r2, r3
    836a:	697b      	ldr	r3, [r7, #20]
    836c:	4313      	orrs	r3, r2
    836e:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    8370:	2313      	movs	r3, #19
    8372:	18fb      	adds	r3, r7, r3
    8374:	781a      	ldrb	r2, [r3, #0]
    8376:	2313      	movs	r3, #19
    8378:	18fb      	adds	r3, r7, r3
    837a:	3201      	adds	r2, #1
    837c:	701a      	strb	r2, [r3, #0]
    837e:	2313      	movs	r3, #19
    8380:	18fb      	adds	r3, r7, r3
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	2b00      	cmp	r3, #0
    8386:	d0e2      	beq.n	834e <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    8388:	2312      	movs	r3, #18
    838a:	18fb      	adds	r3, r7, r3
    838c:	2200      	movs	r2, #0
    838e:	701a      	strb	r2, [r3, #0]
    8390:	e02b      	b.n	83ea <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
    8392:	2312      	movs	r3, #18
    8394:	18fb      	adds	r3, r7, r3
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	683a      	ldr	r2, [r7, #0]
    839a:	18d3      	adds	r3, r2, r3
    839c:	78db      	ldrb	r3, [r3, #3]
    839e:	2b00      	cmp	r3, #0
    83a0:	d00a      	beq.n	83b8 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
    83a2:	2312      	movs	r3, #18
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	781b      	ldrb	r3, [r3, #0]
    83a8:	2280      	movs	r2, #128	; 0x80
    83aa:	0052      	lsls	r2, r2, #1
    83ac:	409a      	lsls	r2, r3
    83ae:	0013      	movs	r3, r2
    83b0:	001a      	movs	r2, r3
    83b2:	697b      	ldr	r3, [r7, #20]
    83b4:	4313      	orrs	r3, r2
    83b6:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
    83b8:	2312      	movs	r3, #18
    83ba:	18fb      	adds	r3, r7, r3
    83bc:	781b      	ldrb	r3, [r3, #0]
    83be:	683a      	ldr	r2, [r7, #0]
    83c0:	18d3      	adds	r3, r2, r3
    83c2:	785b      	ldrb	r3, [r3, #1]
    83c4:	2b00      	cmp	r3, #0
    83c6:	d009      	beq.n	83dc <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
    83c8:	2312      	movs	r3, #18
    83ca:	18fb      	adds	r3, r7, r3
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	2201      	movs	r2, #1
    83d0:	409a      	lsls	r2, r3
    83d2:	0013      	movs	r3, r2
    83d4:	001a      	movs	r2, r3
    83d6:	697b      	ldr	r3, [r7, #20]
    83d8:	4313      	orrs	r3, r2
    83da:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    83dc:	2312      	movs	r3, #18
    83de:	18fb      	adds	r3, r7, r3
    83e0:	781a      	ldrb	r2, [r3, #0]
    83e2:	2312      	movs	r3, #18
    83e4:	18fb      	adds	r3, r7, r3
    83e6:	3201      	adds	r2, #1
    83e8:	701a      	strb	r2, [r3, #0]
    83ea:	2312      	movs	r3, #18
    83ec:	18fb      	adds	r3, r7, r3
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	2b01      	cmp	r3, #1
    83f2:	d9ce      	bls.n	8392 <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
    83f4:	68fb      	ldr	r3, [r7, #12]
    83f6:	885b      	ldrh	r3, [r3, #2]
    83f8:	b29a      	uxth	r2, r3
    83fa:	697b      	ldr	r3, [r7, #20]
    83fc:	b29b      	uxth	r3, r3
    83fe:	4313      	orrs	r3, r2
    8400:	b29a      	uxth	r2, r3
    8402:	68fb      	ldr	r3, [r7, #12]
    8404:	805a      	strh	r2, [r3, #2]
}
    8406:	46c0      	nop			; (mov r8, r8)
    8408:	46bd      	mov	sp, r7
    840a:	b006      	add	sp, #24
    840c:	bd80      	pop	{r7, pc}
	...

00008410 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8410:	b580      	push	{r7, lr}
    8412:	b084      	sub	sp, #16
    8414:	af00      	add	r7, sp, #0
    8416:	6078      	str	r0, [r7, #4]
    8418:	000a      	movs	r2, r1
    841a:	1cfb      	adds	r3, r7, #3
    841c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    841e:	687b      	ldr	r3, [r7, #4]
    8420:	681b      	ldr	r3, [r3, #0]
    8422:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    8424:	46c0      	nop			; (mov r8, r8)
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	0018      	movs	r0, r3
    842a:	4b0b      	ldr	r3, [pc, #44]	; (8458 <ac_chan_enable+0x48>)
    842c:	4798      	blx	r3
    842e:	1e03      	subs	r3, r0, #0
    8430:	d1f9      	bne.n	8426 <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
    8432:	1cfb      	adds	r3, r7, #3
    8434:	781a      	ldrb	r2, [r3, #0]
    8436:	1cfb      	adds	r3, r7, #3
    8438:	7819      	ldrb	r1, [r3, #0]
    843a:	68fb      	ldr	r3, [r7, #12]
    843c:	3104      	adds	r1, #4
    843e:	0089      	lsls	r1, r1, #2
    8440:	58cb      	ldr	r3, [r1, r3]
    8442:	2101      	movs	r1, #1
    8444:	4319      	orrs	r1, r3
    8446:	68fb      	ldr	r3, [r7, #12]
    8448:	3204      	adds	r2, #4
    844a:	0092      	lsls	r2, r2, #2
    844c:	50d1      	str	r1, [r2, r3]
}
    844e:	46c0      	nop			; (mov r8, r8)
    8450:	46bd      	mov	sp, r7
    8452:	b004      	add	sp, #16
    8454:	bd80      	pop	{r7, pc}
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	00008299 	.word	0x00008299

0000845c <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    845c:	b580      	push	{r7, lr}
    845e:	b084      	sub	sp, #16
    8460:	af00      	add	r7, sp, #0
    8462:	6078      	str	r0, [r7, #4]
    8464:	000a      	movs	r2, r1
    8466:	1cfb      	adds	r3, r7, #3
    8468:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    846a:	687b      	ldr	r3, [r7, #4]
    846c:	681b      	ldr	r3, [r3, #0]
    846e:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
    8470:	68fb      	ldr	r3, [r7, #12]
    8472:	7a5b      	ldrb	r3, [r3, #9]
    8474:	b2db      	uxtb	r3, r3
    8476:	0019      	movs	r1, r3
    8478:	1cfb      	adds	r3, r7, #3
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	2201      	movs	r2, #1
    847e:	409a      	lsls	r2, r3
    8480:	0013      	movs	r3, r2
    8482:	400b      	ands	r3, r1
    8484:	1e5a      	subs	r2, r3, #1
    8486:	4193      	sbcs	r3, r2
    8488:	b2db      	uxtb	r3, r3
}
    848a:	0018      	movs	r0, r3
    848c:	46bd      	mov	sp, r7
    848e:	b004      	add	sp, #16
    8490:	bd80      	pop	{r7, pc}
	...

00008494 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8494:	b580      	push	{r7, lr}
    8496:	b084      	sub	sp, #16
    8498:	af00      	add	r7, sp, #0
    849a:	6078      	str	r0, [r7, #4]
    849c:	000a      	movs	r2, r1
    849e:	1cfb      	adds	r3, r7, #3
    84a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    84a2:	687b      	ldr	r3, [r7, #4]
    84a4:	681b      	ldr	r3, [r3, #0]
    84a6:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
    84a8:	230f      	movs	r3, #15
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	2200      	movs	r2, #0
    84ae:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
    84b0:	68bb      	ldr	r3, [r7, #8]
    84b2:	799b      	ldrb	r3, [r3, #6]
    84b4:	b2db      	uxtb	r3, r3
    84b6:	001a      	movs	r2, r3
    84b8:	1cfb      	adds	r3, r7, #3
    84ba:	781b      	ldrb	r3, [r3, #0]
    84bc:	411a      	asrs	r2, r3
    84be:	0013      	movs	r3, r2
    84c0:	2201      	movs	r2, #1
    84c2:	4013      	ands	r3, r2
    84c4:	d003      	beq.n	84ce <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
    84c6:	230f      	movs	r3, #15
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	2208      	movs	r2, #8
    84cc:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
    84ce:	1cfb      	adds	r3, r7, #3
    84d0:	781a      	ldrb	r2, [r3, #0]
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	0011      	movs	r1, r2
    84d6:	0018      	movs	r0, r3
    84d8:	4b1b      	ldr	r3, [pc, #108]	; (8548 <ac_chan_get_status+0xb4>)
    84da:	4798      	blx	r3
    84dc:	0003      	movs	r3, r0
    84de:	001a      	movs	r2, r3
    84e0:	2301      	movs	r3, #1
    84e2:	4053      	eors	r3, r2
    84e4:	b2db      	uxtb	r3, r3
    84e6:	2b00      	cmp	r3, #0
    84e8:	d00b      	beq.n	8502 <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
    84ea:	230f      	movs	r3, #15
    84ec:	18fb      	adds	r3, r7, r3
    84ee:	220f      	movs	r2, #15
    84f0:	18ba      	adds	r2, r7, r2
    84f2:	7812      	ldrb	r2, [r2, #0]
    84f4:	2101      	movs	r1, #1
    84f6:	430a      	orrs	r2, r1
    84f8:	701a      	strb	r2, [r3, #0]
		return status_mask;
    84fa:	230f      	movs	r3, #15
    84fc:	18fb      	adds	r3, r7, r3
    84fe:	781b      	ldrb	r3, [r3, #0]
    8500:	e01e      	b.n	8540 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
    8502:	68bb      	ldr	r3, [r7, #8]
    8504:	7a1b      	ldrb	r3, [r3, #8]
    8506:	b2db      	uxtb	r3, r3
    8508:	001a      	movs	r2, r3
    850a:	1cfb      	adds	r3, r7, #3
    850c:	781b      	ldrb	r3, [r3, #0]
    850e:	411a      	asrs	r2, r3
    8510:	0013      	movs	r3, r2
    8512:	2201      	movs	r2, #1
    8514:	4013      	ands	r3, r2
    8516:	d008      	beq.n	852a <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
    8518:	230f      	movs	r3, #15
    851a:	18fb      	adds	r3, r7, r3
    851c:	220f      	movs	r2, #15
    851e:	18ba      	adds	r2, r7, r2
    8520:	7812      	ldrb	r2, [r2, #0]
    8522:	2104      	movs	r1, #4
    8524:	430a      	orrs	r2, r1
    8526:	701a      	strb	r2, [r3, #0]
    8528:	e007      	b.n	853a <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
    852a:	230f      	movs	r3, #15
    852c:	18fb      	adds	r3, r7, r3
    852e:	220f      	movs	r2, #15
    8530:	18ba      	adds	r2, r7, r2
    8532:	7812      	ldrb	r2, [r2, #0]
    8534:	2102      	movs	r1, #2
    8536:	430a      	orrs	r2, r1
    8538:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
    853a:	230f      	movs	r3, #15
    853c:	18fb      	adds	r3, r7, r3
    853e:	781b      	ldrb	r3, [r3, #0]
}
    8540:	0018      	movs	r0, r3
    8542:	46bd      	mov	sp, r7
    8544:	b004      	add	sp, #16
    8546:	bd80      	pop	{r7, pc}
    8548:	0000845d 	.word	0x0000845d

0000854c <system_interrupt_enable>:
{
    854c:	b580      	push	{r7, lr}
    854e:	b082      	sub	sp, #8
    8550:	af00      	add	r7, sp, #0
    8552:	0002      	movs	r2, r0
    8554:	1dfb      	adds	r3, r7, #7
    8556:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8558:	4b06      	ldr	r3, [pc, #24]	; (8574 <system_interrupt_enable+0x28>)
    855a:	1dfa      	adds	r2, r7, #7
    855c:	7812      	ldrb	r2, [r2, #0]
    855e:	0011      	movs	r1, r2
    8560:	221f      	movs	r2, #31
    8562:	400a      	ands	r2, r1
    8564:	2101      	movs	r1, #1
    8566:	4091      	lsls	r1, r2
    8568:	000a      	movs	r2, r1
    856a:	601a      	str	r2, [r3, #0]
}
    856c:	46c0      	nop			; (mov r8, r8)
    856e:	46bd      	mov	sp, r7
    8570:	b002      	add	sp, #8
    8572:	bd80      	pop	{r7, pc}
    8574:	e000e100 	.word	0xe000e100

00008578 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
    8578:	b580      	push	{r7, lr}
    857a:	b084      	sub	sp, #16
    857c:	af00      	add	r7, sp, #0
    857e:	6078      	str	r0, [r7, #4]
    8580:	000a      	movs	r2, r1
    8582:	1cfb      	adds	r3, r7, #3
    8584:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
    8586:	687b      	ldr	r3, [r7, #4]
    8588:	7e5b      	ldrb	r3, [r3, #25]
    858a:	b25a      	sxtb	r2, r3
    858c:	1cfb      	adds	r3, r7, #3
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	2101      	movs	r1, #1
    8592:	4099      	lsls	r1, r3
    8594:	000b      	movs	r3, r1
    8596:	b25b      	sxtb	r3, r3
    8598:	4313      	orrs	r3, r2
    859a:	b25b      	sxtb	r3, r3
    859c:	b2da      	uxtb	r2, r3
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
    85a2:	2300      	movs	r3, #0
    85a4:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
    85a6:	1cfb      	adds	r3, r7, #3
    85a8:	781b      	ldrb	r3, [r3, #0]
    85aa:	2b01      	cmp	r3, #1
    85ac:	d009      	beq.n	85c2 <ac_enable_callback+0x4a>
    85ae:	2b04      	cmp	r3, #4
    85b0:	d00c      	beq.n	85cc <ac_enable_callback+0x54>
    85b2:	2b00      	cmp	r3, #0
    85b4:	d000      	beq.n	85b8 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
    85b6:	e00e      	b.n	85d6 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
    85b8:	68fb      	ldr	r3, [r7, #12]
    85ba:	2201      	movs	r2, #1
    85bc:	4313      	orrs	r3, r2
    85be:	60fb      	str	r3, [r7, #12]
			break;
    85c0:	e009      	b.n	85d6 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
    85c2:	68fb      	ldr	r3, [r7, #12]
    85c4:	2202      	movs	r2, #2
    85c6:	4313      	orrs	r3, r2
    85c8:	60fb      	str	r3, [r7, #12]
			break;
    85ca:	e004      	b.n	85d6 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
    85cc:	68fb      	ldr	r3, [r7, #12]
    85ce:	2210      	movs	r2, #16
    85d0:	4313      	orrs	r3, r2
    85d2:	60fb      	str	r3, [r7, #12]
			break;
    85d4:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
    85d6:	687b      	ldr	r3, [r7, #4]
    85d8:	681b      	ldr	r3, [r3, #0]
    85da:	68fa      	ldr	r2, [r7, #12]
    85dc:	b2d2      	uxtb	r2, r2
    85de:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
    85e0:	2018      	movs	r0, #24
    85e2:	4b03      	ldr	r3, [pc, #12]	; (85f0 <ac_enable_callback+0x78>)
    85e4:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
    85e6:	46c0      	nop			; (mov r8, r8)
    85e8:	46bd      	mov	sp, r7
    85ea:	b004      	add	sp, #16
    85ec:	bd80      	pop	{r7, pc}
    85ee:	46c0      	nop			; (mov r8, r8)
    85f0:	0000854d 	.word	0x0000854d

000085f4 <system_pinmux_get_group_from_gpio_pin>:
{
    85f4:	b580      	push	{r7, lr}
    85f6:	b084      	sub	sp, #16
    85f8:	af00      	add	r7, sp, #0
    85fa:	0002      	movs	r2, r0
    85fc:	1dfb      	adds	r3, r7, #7
    85fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8600:	230f      	movs	r3, #15
    8602:	18fb      	adds	r3, r7, r3
    8604:	1dfa      	adds	r2, r7, #7
    8606:	7812      	ldrb	r2, [r2, #0]
    8608:	09d2      	lsrs	r2, r2, #7
    860a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    860c:	230e      	movs	r3, #14
    860e:	18fb      	adds	r3, r7, r3
    8610:	1dfa      	adds	r2, r7, #7
    8612:	7812      	ldrb	r2, [r2, #0]
    8614:	0952      	lsrs	r2, r2, #5
    8616:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8618:	4b0d      	ldr	r3, [pc, #52]	; (8650 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    861a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    861c:	230f      	movs	r3, #15
    861e:	18fb      	adds	r3, r7, r3
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	2b00      	cmp	r3, #0
    8624:	d10f      	bne.n	8646 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8626:	230f      	movs	r3, #15
    8628:	18fb      	adds	r3, r7, r3
    862a:	781b      	ldrb	r3, [r3, #0]
    862c:	009b      	lsls	r3, r3, #2
    862e:	2210      	movs	r2, #16
    8630:	4694      	mov	ip, r2
    8632:	44bc      	add	ip, r7
    8634:	4463      	add	r3, ip
    8636:	3b08      	subs	r3, #8
    8638:	681a      	ldr	r2, [r3, #0]
    863a:	230e      	movs	r3, #14
    863c:	18fb      	adds	r3, r7, r3
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	01db      	lsls	r3, r3, #7
    8642:	18d3      	adds	r3, r2, r3
    8644:	e000      	b.n	8648 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8646:	2300      	movs	r3, #0
}
    8648:	0018      	movs	r0, r3
    864a:	46bd      	mov	sp, r7
    864c:	b004      	add	sp, #16
    864e:	bd80      	pop	{r7, pc}
    8650:	41004400 	.word	0x41004400

00008654 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    8654:	b580      	push	{r7, lr}
    8656:	b084      	sub	sp, #16
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	681b      	ldr	r3, [r3, #0]
    8660:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8662:	68fb      	ldr	r3, [r7, #12]
    8664:	7e5b      	ldrb	r3, [r3, #25]
    8666:	b2db      	uxtb	r3, r3
    8668:	b25b      	sxtb	r3, r3
    866a:	2b00      	cmp	r3, #0
    866c:	da01      	bge.n	8672 <adc_is_syncing+0x1e>
		return true;
    866e:	2301      	movs	r3, #1
    8670:	e000      	b.n	8674 <adc_is_syncing+0x20>
	}

	return false;
    8672:	2300      	movs	r3, #0
}
    8674:	0018      	movs	r0, r3
    8676:	46bd      	mov	sp, r7
    8678:	b004      	add	sp, #16
    867a:	bd80      	pop	{r7, pc}

0000867c <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    867c:	b580      	push	{r7, lr}
    867e:	b086      	sub	sp, #24
    8680:	af00      	add	r7, sp, #0
    8682:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8684:	687b      	ldr	r3, [r7, #4]
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    868a:	693b      	ldr	r3, [r7, #16]
    868c:	7e1b      	ldrb	r3, [r3, #24]
    868e:	b2db      	uxtb	r3, r3
    8690:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    8692:	2300      	movs	r3, #0
    8694:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    8696:	68fb      	ldr	r3, [r7, #12]
    8698:	2201      	movs	r2, #1
    869a:	4013      	ands	r3, r2
    869c:	d003      	beq.n	86a6 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    869e:	697b      	ldr	r3, [r7, #20]
    86a0:	2201      	movs	r2, #1
    86a2:	4313      	orrs	r3, r2
    86a4:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    86a6:	68fb      	ldr	r3, [r7, #12]
    86a8:	2204      	movs	r2, #4
    86aa:	4013      	ands	r3, r2
    86ac:	d003      	beq.n	86b6 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    86ae:	697b      	ldr	r3, [r7, #20]
    86b0:	2202      	movs	r2, #2
    86b2:	4313      	orrs	r3, r2
    86b4:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    86b6:	68fb      	ldr	r3, [r7, #12]
    86b8:	2202      	movs	r2, #2
    86ba:	4013      	ands	r3, r2
    86bc:	d003      	beq.n	86c6 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    86be:	697b      	ldr	r3, [r7, #20]
    86c0:	2204      	movs	r2, #4
    86c2:	4313      	orrs	r3, r2
    86c4:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    86c6:	697b      	ldr	r3, [r7, #20]
}
    86c8:	0018      	movs	r0, r3
    86ca:	46bd      	mov	sp, r7
    86cc:	b006      	add	sp, #24
    86ce:	bd80      	pop	{r7, pc}

000086d0 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    86d0:	b580      	push	{r7, lr}
    86d2:	b084      	sub	sp, #16
    86d4:	af00      	add	r7, sp, #0
    86d6:	6078      	str	r0, [r7, #4]
    86d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    86da:	687b      	ldr	r3, [r7, #4]
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    86e0:	2300      	movs	r3, #0
    86e2:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    86e4:	683b      	ldr	r3, [r7, #0]
    86e6:	2201      	movs	r2, #1
    86e8:	4013      	ands	r3, r2
    86ea:	d003      	beq.n	86f4 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    86ec:	68fb      	ldr	r3, [r7, #12]
    86ee:	2201      	movs	r2, #1
    86f0:	4313      	orrs	r3, r2
    86f2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    86f4:	683b      	ldr	r3, [r7, #0]
    86f6:	2202      	movs	r2, #2
    86f8:	4013      	ands	r3, r2
    86fa:	d003      	beq.n	8704 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    86fc:	68fb      	ldr	r3, [r7, #12]
    86fe:	2204      	movs	r2, #4
    8700:	4313      	orrs	r3, r2
    8702:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    8704:	683b      	ldr	r3, [r7, #0]
    8706:	2204      	movs	r2, #4
    8708:	4013      	ands	r3, r2
    870a:	d003      	beq.n	8714 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    870c:	68fb      	ldr	r3, [r7, #12]
    870e:	2202      	movs	r2, #2
    8710:	4313      	orrs	r3, r2
    8712:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    8714:	68fb      	ldr	r3, [r7, #12]
    8716:	b2da      	uxtb	r2, r3
    8718:	68bb      	ldr	r3, [r7, #8]
    871a:	761a      	strb	r2, [r3, #24]
}
    871c:	46c0      	nop			; (mov r8, r8)
    871e:	46bd      	mov	sp, r7
    8720:	b004      	add	sp, #16
    8722:	bd80      	pop	{r7, pc}

00008724 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    8724:	b580      	push	{r7, lr}
    8726:	b084      	sub	sp, #16
    8728:	af00      	add	r7, sp, #0
    872a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	681b      	ldr	r3, [r3, #0]
    8730:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8732:	46c0      	nop			; (mov r8, r8)
    8734:	687b      	ldr	r3, [r7, #4]
    8736:	0018      	movs	r0, r3
    8738:	4b10      	ldr	r3, [pc, #64]	; (877c <adc_enable+0x58>)
    873a:	4798      	blx	r3
    873c:	1e03      	subs	r3, r0, #0
    873e:	d1f9      	bne.n	8734 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    8740:	2017      	movs	r0, #23
    8742:	4b0f      	ldr	r3, [pc, #60]	; (8780 <adc_enable+0x5c>)
    8744:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    8746:	68fb      	ldr	r3, [r7, #12]
    8748:	220f      	movs	r2, #15
    874a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    874c:	68fb      	ldr	r3, [r7, #12]
    874e:	220f      	movs	r2, #15
    8750:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    8752:	68fb      	ldr	r3, [r7, #12]
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	b2db      	uxtb	r3, r3
    8758:	2202      	movs	r2, #2
    875a:	4313      	orrs	r3, r2
    875c:	b2da      	uxtb	r2, r3
    875e:	68fb      	ldr	r3, [r7, #12]
    8760:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    8762:	46c0      	nop			; (mov r8, r8)
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	0018      	movs	r0, r3
    8768:	4b04      	ldr	r3, [pc, #16]	; (877c <adc_enable+0x58>)
    876a:	4798      	blx	r3
    876c:	1e03      	subs	r3, r0, #0
    876e:	d1f9      	bne.n	8764 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    8770:	2300      	movs	r3, #0
}
    8772:	0018      	movs	r0, r3
    8774:	46bd      	mov	sp, r7
    8776:	b004      	add	sp, #16
    8778:	bd80      	pop	{r7, pc}
    877a:	46c0      	nop			; (mov r8, r8)
    877c:	00008655 	.word	0x00008655
    8780:	0000854d 	.word	0x0000854d

00008784 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    8784:	b580      	push	{r7, lr}
    8786:	b084      	sub	sp, #16
    8788:	af00      	add	r7, sp, #0
    878a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    878c:	687b      	ldr	r3, [r7, #4]
    878e:	681b      	ldr	r3, [r3, #0]
    8790:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8792:	46c0      	nop			; (mov r8, r8)
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	0018      	movs	r0, r3
    8798:	4b0b      	ldr	r3, [pc, #44]	; (87c8 <adc_start_conversion+0x44>)
    879a:	4798      	blx	r3
    879c:	1e03      	subs	r3, r0, #0
    879e:	d1f9      	bne.n	8794 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    87a0:	68fb      	ldr	r3, [r7, #12]
    87a2:	7b1b      	ldrb	r3, [r3, #12]
    87a4:	b2db      	uxtb	r3, r3
    87a6:	2202      	movs	r2, #2
    87a8:	4313      	orrs	r3, r2
    87aa:	b2da      	uxtb	r2, r3
    87ac:	68fb      	ldr	r3, [r7, #12]
    87ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    87b0:	46c0      	nop			; (mov r8, r8)
    87b2:	687b      	ldr	r3, [r7, #4]
    87b4:	0018      	movs	r0, r3
    87b6:	4b04      	ldr	r3, [pc, #16]	; (87c8 <adc_start_conversion+0x44>)
    87b8:	4798      	blx	r3
    87ba:	1e03      	subs	r3, r0, #0
    87bc:	d1f9      	bne.n	87b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    87be:	46c0      	nop			; (mov r8, r8)
    87c0:	46bd      	mov	sp, r7
    87c2:	b004      	add	sp, #16
    87c4:	bd80      	pop	{r7, pc}
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	00008655 	.word	0x00008655

000087cc <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    87cc:	b580      	push	{r7, lr}
    87ce:	b084      	sub	sp, #16
    87d0:	af00      	add	r7, sp, #0
    87d2:	6078      	str	r0, [r7, #4]
    87d4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    87d6:	687b      	ldr	r3, [r7, #4]
    87d8:	0018      	movs	r0, r3
    87da:	4b18      	ldr	r3, [pc, #96]	; (883c <adc_read+0x70>)
    87dc:	4798      	blx	r3
    87de:	0002      	movs	r2, r0
    87e0:	2301      	movs	r3, #1
    87e2:	4013      	ands	r3, r2
    87e4:	d101      	bne.n	87ea <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    87e6:	2305      	movs	r3, #5
    87e8:	e023      	b.n	8832 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    87ea:	687b      	ldr	r3, [r7, #4]
    87ec:	681b      	ldr	r3, [r3, #0]
    87ee:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    87f0:	46c0      	nop			; (mov r8, r8)
    87f2:	687b      	ldr	r3, [r7, #4]
    87f4:	0018      	movs	r0, r3
    87f6:	4b12      	ldr	r3, [pc, #72]	; (8840 <adc_read+0x74>)
    87f8:	4798      	blx	r3
    87fa:	1e03      	subs	r3, r0, #0
    87fc:	d1f9      	bne.n	87f2 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    87fe:	68fb      	ldr	r3, [r7, #12]
    8800:	8b5b      	ldrh	r3, [r3, #26]
    8802:	b29a      	uxth	r2, r3
    8804:	683b      	ldr	r3, [r7, #0]
    8806:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	2101      	movs	r1, #1
    880c:	0018      	movs	r0, r3
    880e:	4b0d      	ldr	r3, [pc, #52]	; (8844 <adc_read+0x78>)
    8810:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    8812:	687b      	ldr	r3, [r7, #4]
    8814:	0018      	movs	r0, r3
    8816:	4b09      	ldr	r3, [pc, #36]	; (883c <adc_read+0x70>)
    8818:	4798      	blx	r3
    881a:	0002      	movs	r2, r0
    881c:	2304      	movs	r3, #4
    881e:	4013      	ands	r3, r2
    8820:	d006      	beq.n	8830 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	2104      	movs	r1, #4
    8826:	0018      	movs	r0, r3
    8828:	4b06      	ldr	r3, [pc, #24]	; (8844 <adc_read+0x78>)
    882a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    882c:	231e      	movs	r3, #30
    882e:	e000      	b.n	8832 <adc_read+0x66>
	}

	return STATUS_OK;
    8830:	2300      	movs	r3, #0
}
    8832:	0018      	movs	r0, r3
    8834:	46bd      	mov	sp, r7
    8836:	b004      	add	sp, #16
    8838:	bd80      	pop	{r7, pc}
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	0000867d 	.word	0x0000867d
    8840:	00008655 	.word	0x00008655
    8844:	000086d1 	.word	0x000086d1

00008848 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    8848:	b580      	push	{r7, lr}
    884a:	b084      	sub	sp, #16
    884c:	af00      	add	r7, sp, #0
    884e:	6078      	str	r0, [r7, #4]
    8850:	000a      	movs	r2, r1
    8852:	1cfb      	adds	r3, r7, #3
    8854:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8856:	687b      	ldr	r3, [r7, #4]
    8858:	681b      	ldr	r3, [r3, #0]
    885a:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    885c:	46c0      	nop			; (mov r8, r8)
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	0018      	movs	r0, r3
    8862:	4b0c      	ldr	r3, [pc, #48]	; (8894 <adc_set_positive_input+0x4c>)
    8864:	4798      	blx	r3
    8866:	1e03      	subs	r3, r0, #0
    8868:	d1f9      	bne.n	885e <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    886a:	68fb      	ldr	r3, [r7, #12]
    886c:	691b      	ldr	r3, [r3, #16]
    886e:	221f      	movs	r2, #31
    8870:	4393      	bics	r3, r2
    8872:	001a      	movs	r2, r3
    8874:	1cfb      	adds	r3, r7, #3
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    887a:	68fb      	ldr	r3, [r7, #12]
    887c:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    887e:	46c0      	nop			; (mov r8, r8)
    8880:	687b      	ldr	r3, [r7, #4]
    8882:	0018      	movs	r0, r3
    8884:	4b03      	ldr	r3, [pc, #12]	; (8894 <adc_set_positive_input+0x4c>)
    8886:	4798      	blx	r3
    8888:	1e03      	subs	r3, r0, #0
    888a:	d1f9      	bne.n	8880 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
    888c:	46c0      	nop			; (mov r8, r8)
    888e:	46bd      	mov	sp, r7
    8890:	b004      	add	sp, #16
    8892:	bd80      	pop	{r7, pc}
    8894:	00008655 	.word	0x00008655

00008898 <port_get_group_from_gpio_pin>:
{
    8898:	b580      	push	{r7, lr}
    889a:	b082      	sub	sp, #8
    889c:	af00      	add	r7, sp, #0
    889e:	0002      	movs	r2, r0
    88a0:	1dfb      	adds	r3, r7, #7
    88a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    88a4:	1dfb      	adds	r3, r7, #7
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	0018      	movs	r0, r3
    88aa:	4b03      	ldr	r3, [pc, #12]	; (88b8 <port_get_group_from_gpio_pin+0x20>)
    88ac:	4798      	blx	r3
    88ae:	0003      	movs	r3, r0
}
    88b0:	0018      	movs	r0, r3
    88b2:	46bd      	mov	sp, r7
    88b4:	b002      	add	sp, #8
    88b6:	bd80      	pop	{r7, pc}
    88b8:	000085f5 	.word	0x000085f5

000088bc <port_get_config_defaults>:
{
    88bc:	b580      	push	{r7, lr}
    88be:	b082      	sub	sp, #8
    88c0:	af00      	add	r7, sp, #0
    88c2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    88c4:	687b      	ldr	r3, [r7, #4]
    88c6:	2200      	movs	r2, #0
    88c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	2201      	movs	r2, #1
    88ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    88d0:	687b      	ldr	r3, [r7, #4]
    88d2:	2200      	movs	r2, #0
    88d4:	709a      	strb	r2, [r3, #2]
}
    88d6:	46c0      	nop			; (mov r8, r8)
    88d8:	46bd      	mov	sp, r7
    88da:	b002      	add	sp, #8
    88dc:	bd80      	pop	{r7, pc}
	...

000088e0 <port_pin_get_input_level>:
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b084      	sub	sp, #16
    88e4:	af00      	add	r7, sp, #0
    88e6:	0002      	movs	r2, r0
    88e8:	1dfb      	adds	r3, r7, #7
    88ea:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    88ec:	1dfb      	adds	r3, r7, #7
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	0018      	movs	r0, r3
    88f2:	4b0b      	ldr	r3, [pc, #44]	; (8920 <port_pin_get_input_level+0x40>)
    88f4:	4798      	blx	r3
    88f6:	0003      	movs	r3, r0
    88f8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    88fa:	1dfb      	adds	r3, r7, #7
    88fc:	781b      	ldrb	r3, [r3, #0]
    88fe:	221f      	movs	r2, #31
    8900:	4013      	ands	r3, r2
    8902:	2201      	movs	r2, #1
    8904:	409a      	lsls	r2, r3
    8906:	0013      	movs	r3, r2
    8908:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    890a:	68fb      	ldr	r3, [r7, #12]
    890c:	6a1b      	ldr	r3, [r3, #32]
    890e:	68ba      	ldr	r2, [r7, #8]
    8910:	4013      	ands	r3, r2
    8912:	1e5a      	subs	r2, r3, #1
    8914:	4193      	sbcs	r3, r2
    8916:	b2db      	uxtb	r3, r3
}
    8918:	0018      	movs	r0, r3
    891a:	46bd      	mov	sp, r7
    891c:	b004      	add	sp, #16
    891e:	bd80      	pop	{r7, pc}
    8920:	00008899 	.word	0x00008899

00008924 <port_pin_set_output_level>:
{
    8924:	b580      	push	{r7, lr}
    8926:	b084      	sub	sp, #16
    8928:	af00      	add	r7, sp, #0
    892a:	0002      	movs	r2, r0
    892c:	1dfb      	adds	r3, r7, #7
    892e:	701a      	strb	r2, [r3, #0]
    8930:	1dbb      	adds	r3, r7, #6
    8932:	1c0a      	adds	r2, r1, #0
    8934:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8936:	1dfb      	adds	r3, r7, #7
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	0018      	movs	r0, r3
    893c:	4b0d      	ldr	r3, [pc, #52]	; (8974 <port_pin_set_output_level+0x50>)
    893e:	4798      	blx	r3
    8940:	0003      	movs	r3, r0
    8942:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8944:	1dfb      	adds	r3, r7, #7
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	221f      	movs	r2, #31
    894a:	4013      	ands	r3, r2
    894c:	2201      	movs	r2, #1
    894e:	409a      	lsls	r2, r3
    8950:	0013      	movs	r3, r2
    8952:	60bb      	str	r3, [r7, #8]
	if (level) {
    8954:	1dbb      	adds	r3, r7, #6
    8956:	781b      	ldrb	r3, [r3, #0]
    8958:	2b00      	cmp	r3, #0
    895a:	d003      	beq.n	8964 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    895c:	68fb      	ldr	r3, [r7, #12]
    895e:	68ba      	ldr	r2, [r7, #8]
    8960:	619a      	str	r2, [r3, #24]
}
    8962:	e002      	b.n	896a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8964:	68fb      	ldr	r3, [r7, #12]
    8966:	68ba      	ldr	r2, [r7, #8]
    8968:	615a      	str	r2, [r3, #20]
}
    896a:	46c0      	nop			; (mov r8, r8)
    896c:	46bd      	mov	sp, r7
    896e:	b004      	add	sp, #16
    8970:	bd80      	pop	{r7, pc}
    8972:	46c0      	nop			; (mov r8, r8)
    8974:	00008899 	.word	0x00008899

00008978 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    8978:	b580      	push	{r7, lr}
    897a:	b084      	sub	sp, #16
    897c:	af00      	add	r7, sp, #0
    897e:	0002      	movs	r2, r0
    8980:	1dfb      	adds	r3, r7, #7
    8982:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    8984:	230f      	movs	r3, #15
    8986:	18fb      	adds	r3, r7, r3
    8988:	1dfa      	adds	r2, r7, #7
    898a:	7812      	ldrb	r2, [r2, #0]
    898c:	0952      	lsrs	r2, r2, #5
    898e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8990:	230f      	movs	r3, #15
    8992:	18fb      	adds	r3, r7, r3
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	2b00      	cmp	r3, #0
    8998:	d10c      	bne.n	89b4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    899a:	4b09      	ldr	r3, [pc, #36]	; (89c0 <_extint_get_eic_from_channel+0x48>)
    899c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    899e:	230f      	movs	r3, #15
    89a0:	18fb      	adds	r3, r7, r3
    89a2:	781b      	ldrb	r3, [r3, #0]
    89a4:	009b      	lsls	r3, r3, #2
    89a6:	2210      	movs	r2, #16
    89a8:	4694      	mov	ip, r2
    89aa:	44bc      	add	ip, r7
    89ac:	4463      	add	r3, ip
    89ae:	3b08      	subs	r3, #8
    89b0:	681b      	ldr	r3, [r3, #0]
    89b2:	e000      	b.n	89b6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    89b4:	2300      	movs	r3, #0
	}
}
    89b6:	0018      	movs	r0, r3
    89b8:	46bd      	mov	sp, r7
    89ba:	b004      	add	sp, #16
    89bc:	bd80      	pop	{r7, pc}
    89be:	46c0      	nop			; (mov r8, r8)
    89c0:	40001800 	.word	0x40001800

000089c4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    89c4:	b580      	push	{r7, lr}
    89c6:	b084      	sub	sp, #16
    89c8:	af00      	add	r7, sp, #0
    89ca:	0002      	movs	r2, r0
    89cc:	1dfb      	adds	r3, r7, #7
    89ce:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    89d0:	1dfb      	adds	r3, r7, #7
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	0018      	movs	r0, r3
    89d6:	4b09      	ldr	r3, [pc, #36]	; (89fc <extint_chan_clear_detected+0x38>)
    89d8:	4798      	blx	r3
    89da:	0003      	movs	r3, r0
    89dc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    89de:	1dfb      	adds	r3, r7, #7
    89e0:	781b      	ldrb	r3, [r3, #0]
    89e2:	221f      	movs	r2, #31
    89e4:	4013      	ands	r3, r2
    89e6:	2201      	movs	r2, #1
    89e8:	409a      	lsls	r2, r3
    89ea:	0013      	movs	r3, r2
    89ec:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    89ee:	68fb      	ldr	r3, [r7, #12]
    89f0:	68ba      	ldr	r2, [r7, #8]
    89f2:	611a      	str	r2, [r3, #16]
}
    89f4:	46c0      	nop			; (mov r8, r8)
    89f6:	46bd      	mov	sp, r7
    89f8:	b004      	add	sp, #16
    89fa:	bd80      	pop	{r7, pc}
    89fc:	00008979 	.word	0x00008979

00008a00 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    8a00:	b580      	push	{r7, lr}
    8a02:	b084      	sub	sp, #16
    8a04:	af00      	add	r7, sp, #0
    8a06:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    8a08:	687b      	ldr	r3, [r7, #4]
    8a0a:	22a0      	movs	r2, #160	; 0xa0
    8a0c:	0112      	lsls	r2, r2, #4
    8a0e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    8a10:	687b      	ldr	r3, [r7, #4]
    8a12:	2201      	movs	r2, #1
    8a14:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	2200      	movs	r2, #0
    8a1a:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	2200      	movs	r2, #0
    8a20:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8a22:	230f      	movs	r3, #15
    8a24:	18fb      	adds	r3, r7, r3
    8a26:	2200      	movs	r2, #0
    8a28:	701a      	strb	r2, [r3, #0]
    8a2a:	e00e      	b.n	8a4a <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    8a2c:	230f      	movs	r3, #15
    8a2e:	18fb      	adds	r3, r7, r3
    8a30:	781a      	ldrb	r2, [r3, #0]
    8a32:	687b      	ldr	r3, [r7, #4]
    8a34:	3202      	adds	r2, #2
    8a36:	0092      	lsls	r2, r2, #2
    8a38:	2100      	movs	r1, #0
    8a3a:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8a3c:	230f      	movs	r3, #15
    8a3e:	18fb      	adds	r3, r7, r3
    8a40:	781a      	ldrb	r2, [r3, #0]
    8a42:	230f      	movs	r3, #15
    8a44:	18fb      	adds	r3, r7, r3
    8a46:	3201      	adds	r2, #1
    8a48:	701a      	strb	r2, [r3, #0]
    8a4a:	230f      	movs	r3, #15
    8a4c:	18fb      	adds	r3, r7, r3
    8a4e:	781b      	ldrb	r3, [r3, #0]
    8a50:	2b01      	cmp	r3, #1
    8a52:	d9eb      	bls.n	8a2c <rtc_count_get_config_defaults+0x2c>
	}
}
    8a54:	46c0      	nop			; (mov r8, r8)
    8a56:	46bd      	mov	sp, r7
    8a58:	b004      	add	sp, #16
    8a5a:	bd80      	pop	{r7, pc}

00008a5c <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
    8a5c:	b580      	push	{r7, lr}
    8a5e:	b086      	sub	sp, #24
    8a60:	af00      	add	r7, sp, #0
    8a62:	6078      	str	r0, [r7, #4]
    8a64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	681b      	ldr	r3, [r3, #0]
    8a6a:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    8a6c:	2300      	movs	r3, #0
    8a6e:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    8a70:	683b      	ldr	r3, [r7, #0]
    8a72:	781b      	ldrb	r3, [r3, #0]
    8a74:	2b00      	cmp	r3, #0
    8a76:	d004      	beq.n	8a82 <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
    8a78:	697b      	ldr	r3, [r7, #20]
    8a7a:	2280      	movs	r2, #128	; 0x80
    8a7c:	0212      	lsls	r2, r2, #8
    8a7e:	4313      	orrs	r3, r2
    8a80:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8a82:	2313      	movs	r3, #19
    8a84:	18fb      	adds	r3, r7, r3
    8a86:	2200      	movs	r2, #0
    8a88:	701a      	strb	r2, [r3, #0]
    8a8a:	e01c      	b.n	8ac6 <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
    8a8c:	2313      	movs	r3, #19
    8a8e:	18fb      	adds	r3, r7, r3
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	683a      	ldr	r2, [r7, #0]
    8a94:	18d3      	adds	r3, r2, r3
    8a96:	785b      	ldrb	r3, [r3, #1]
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d00d      	beq.n	8ab8 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
    8a9c:	2313      	movs	r3, #19
    8a9e:	18fb      	adds	r3, r7, r3
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	2201      	movs	r2, #1
    8aa4:	409a      	lsls	r2, r3
    8aa6:	0013      	movs	r3, r2
    8aa8:	021b      	lsls	r3, r3, #8
    8aaa:	001a      	movs	r2, r3
    8aac:	2380      	movs	r3, #128	; 0x80
    8aae:	005b      	lsls	r3, r3, #1
    8ab0:	4013      	ands	r3, r2
    8ab2:	697a      	ldr	r2, [r7, #20]
    8ab4:	4313      	orrs	r3, r2
    8ab6:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8ab8:	2313      	movs	r3, #19
    8aba:	18fb      	adds	r3, r7, r3
    8abc:	781a      	ldrb	r2, [r3, #0]
    8abe:	2313      	movs	r3, #19
    8ac0:	18fb      	adds	r3, r7, r3
    8ac2:	3201      	adds	r2, #1
    8ac4:	701a      	strb	r2, [r3, #0]
    8ac6:	2313      	movs	r3, #19
    8ac8:	18fb      	adds	r3, r7, r3
    8aca:	781b      	ldrb	r3, [r3, #0]
    8acc:	2b01      	cmp	r3, #1
    8ace:	d9dd      	bls.n	8a8c <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
    8ad0:	2312      	movs	r3, #18
    8ad2:	18fb      	adds	r3, r7, r3
    8ad4:	2200      	movs	r2, #0
    8ad6:	701a      	strb	r2, [r3, #0]
    8ad8:	e01a      	b.n	8b10 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
    8ada:	2312      	movs	r3, #18
    8adc:	18fb      	adds	r3, r7, r3
    8ade:	781b      	ldrb	r3, [r3, #0]
    8ae0:	683a      	ldr	r2, [r7, #0]
    8ae2:	18d3      	adds	r3, r2, r3
    8ae4:	78db      	ldrb	r3, [r3, #3]
    8ae6:	2b00      	cmp	r3, #0
    8ae8:	d00b      	beq.n	8b02 <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
    8aea:	2312      	movs	r3, #18
    8aec:	18fb      	adds	r3, r7, r3
    8aee:	781b      	ldrb	r3, [r3, #0]
    8af0:	2201      	movs	r2, #1
    8af2:	409a      	lsls	r2, r3
    8af4:	0013      	movs	r3, r2
    8af6:	001a      	movs	r2, r3
    8af8:	23ff      	movs	r3, #255	; 0xff
    8afa:	4013      	ands	r3, r2
    8afc:	697a      	ldr	r2, [r7, #20]
    8afe:	4313      	orrs	r3, r2
    8b00:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
    8b02:	2312      	movs	r3, #18
    8b04:	18fb      	adds	r3, r7, r3
    8b06:	781a      	ldrb	r2, [r3, #0]
    8b08:	2312      	movs	r3, #18
    8b0a:	18fb      	adds	r3, r7, r3
    8b0c:	3201      	adds	r2, #1
    8b0e:	701a      	strb	r2, [r3, #0]
    8b10:	2312      	movs	r3, #18
    8b12:	18fb      	adds	r3, r7, r3
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	2b07      	cmp	r3, #7
    8b18:	d9df      	bls.n	8ada <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    8b1a:	68fb      	ldr	r3, [r7, #12]
    8b1c:	889b      	ldrh	r3, [r3, #4]
    8b1e:	b29a      	uxth	r2, r3
    8b20:	697b      	ldr	r3, [r7, #20]
    8b22:	b29b      	uxth	r3, r3
    8b24:	4313      	orrs	r3, r2
    8b26:	b29a      	uxth	r2, r3
    8b28:	68fb      	ldr	r3, [r7, #12]
    8b2a:	809a      	strh	r2, [r3, #4]
}
    8b2c:	46c0      	nop			; (mov r8, r8)
    8b2e:	46bd      	mov	sp, r7
    8b30:	b006      	add	sp, #24
    8b32:	bd80      	pop	{r7, pc}

00008b34 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
    8b34:	b580      	push	{r7, lr}
    8b36:	b082      	sub	sp, #8
    8b38:	af00      	add	r7, sp, #0
    8b3a:	6078      	str	r0, [r7, #4]
    8b3c:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
    8b3e:	200d      	movs	r0, #13
    8b40:	4b08      	ldr	r3, [pc, #32]	; (8b64 <readOverHeadWaterSensorState+0x30>)
    8b42:	4798      	blx	r3
    8b44:	0003      	movs	r3, r0
    8b46:	001a      	movs	r2, r3
    8b48:	687b      	ldr	r3, [r7, #4]
    8b4a:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
    8b4c:	202f      	movs	r0, #47	; 0x2f
    8b4e:	4b05      	ldr	r3, [pc, #20]	; (8b64 <readOverHeadWaterSensorState+0x30>)
    8b50:	4798      	blx	r3
    8b52:	0003      	movs	r3, r0
    8b54:	001a      	movs	r2, r3
    8b56:	683b      	ldr	r3, [r7, #0]
    8b58:	701a      	strb	r2, [r3, #0]
}
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	46bd      	mov	sp, r7
    8b5e:	b002      	add	sp, #8
    8b60:	bd80      	pop	{r7, pc}
    8b62:	46c0      	nop			; (mov r8, r8)
    8b64:	000088e1 	.word	0x000088e1

00008b68 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
    8b68:	b580      	push	{r7, lr}
    8b6a:	b082      	sub	sp, #8
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	0002      	movs	r2, r0
    8b70:	1dfb      	adds	r3, r7, #7
    8b72:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
    8b74:	4b03      	ldr	r3, [pc, #12]	; (8b84 <updateOverheadLevel+0x1c>)
    8b76:	1dfa      	adds	r2, r7, #7
    8b78:	7812      	ldrb	r2, [r2, #0]
    8b7a:	701a      	strb	r2, [r3, #0]
}
    8b7c:	46c0      	nop			; (mov r8, r8)
    8b7e:	46bd      	mov	sp, r7
    8b80:	b002      	add	sp, #8
    8b82:	bd80      	pop	{r7, pc}
    8b84:	20000768 	.word	0x20000768

00008b88 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b082      	sub	sp, #8
    8b8c:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
    8b8e:	1d7a      	adds	r2, r7, #5
    8b90:	1dbb      	adds	r3, r7, #6
    8b92:	0011      	movs	r1, r2
    8b94:	0018      	movs	r0, r3
    8b96:	4b11      	ldr	r3, [pc, #68]	; (8bdc <getOverHeadWaterSensorState+0x54>)
    8b98:	4798      	blx	r3
	uint8_t ans=0;
    8b9a:	1dfb      	adds	r3, r7, #7
    8b9c:	2200      	movs	r2, #0
    8b9e:	701a      	strb	r2, [r3, #0]
	if(!olow)
    8ba0:	1dbb      	adds	r3, r7, #6
    8ba2:	781b      	ldrb	r3, [r3, #0]
    8ba4:	2201      	movs	r2, #1
    8ba6:	4053      	eors	r3, r2
    8ba8:	b2db      	uxtb	r3, r3
    8baa:	2b00      	cmp	r3, #0
    8bac:	d010      	beq.n	8bd0 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
    8bae:	1dfb      	adds	r3, r7, #7
    8bb0:	781a      	ldrb	r2, [r3, #0]
    8bb2:	1dfb      	adds	r3, r7, #7
    8bb4:	3201      	adds	r2, #1
    8bb6:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
    8bb8:	1d7b      	adds	r3, r7, #5
    8bba:	781b      	ldrb	r3, [r3, #0]
    8bbc:	2201      	movs	r2, #1
    8bbe:	4053      	eors	r3, r2
    8bc0:	b2db      	uxtb	r3, r3
    8bc2:	2b00      	cmp	r3, #0
    8bc4:	d004      	beq.n	8bd0 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
    8bc6:	1dfb      	adds	r3, r7, #7
    8bc8:	781a      	ldrb	r2, [r3, #0]
    8bca:	1dfb      	adds	r3, r7, #7
    8bcc:	3201      	adds	r2, #1
    8bce:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8bd0:	1dfb      	adds	r3, r7, #7
    8bd2:	781b      	ldrb	r3, [r3, #0]
}
    8bd4:	0018      	movs	r0, r3
    8bd6:	46bd      	mov	sp, r7
    8bd8:	b002      	add	sp, #8
    8bda:	bd80      	pop	{r7, pc}
    8bdc:	00008b35 	.word	0x00008b35

00008be0 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
    8be0:	b590      	push	{r4, r7, lr}
    8be2:	b085      	sub	sp, #20
    8be4:	af00      	add	r7, sp, #0
    8be6:	0002      	movs	r2, r0
    8be8:	1dfb      	adds	r3, r7, #7
    8bea:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
    8bec:	230f      	movs	r3, #15
    8bee:	18fc      	adds	r4, r7, r3
    8bf0:	4b15      	ldr	r3, [pc, #84]	; (8c48 <overHeadWaterStatusOnCall+0x68>)
    8bf2:	4798      	blx	r3
    8bf4:	0003      	movs	r3, r0
    8bf6:	7023      	strb	r3, [r4, #0]
	if(current)
    8bf8:	1dfb      	adds	r3, r7, #7
    8bfa:	781b      	ldrb	r3, [r3, #0]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d004      	beq.n	8c0a <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
    8c00:	230f      	movs	r3, #15
    8c02:	18fb      	adds	r3, r7, r3
    8c04:	4a11      	ldr	r2, [pc, #68]	; (8c4c <overHeadWaterStatusOnCall+0x6c>)
    8c06:	7812      	ldrb	r2, [r2, #0]
    8c08:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
    8c0a:	230f      	movs	r3, #15
    8c0c:	18fb      	adds	r3, r7, r3
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	2b02      	cmp	r3, #2
    8c12:	d103      	bne.n	8c1c <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
    8c14:	2056      	movs	r0, #86	; 0x56
    8c16:	4b0e      	ldr	r3, [pc, #56]	; (8c50 <overHeadWaterStatusOnCall+0x70>)
    8c18:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
    8c1a:	e010      	b.n	8c3e <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
    8c1c:	230f      	movs	r3, #15
    8c1e:	18fb      	adds	r3, r7, r3
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	2b01      	cmp	r3, #1
    8c24:	d103      	bne.n	8c2e <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
    8c26:	2058      	movs	r0, #88	; 0x58
    8c28:	4b09      	ldr	r3, [pc, #36]	; (8c50 <overHeadWaterStatusOnCall+0x70>)
    8c2a:	4798      	blx	r3
}
    8c2c:	e007      	b.n	8c3e <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
    8c2e:	230f      	movs	r3, #15
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	781b      	ldrb	r3, [r3, #0]
    8c34:	2b00      	cmp	r3, #0
    8c36:	d102      	bne.n	8c3e <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
    8c38:	2057      	movs	r0, #87	; 0x57
    8c3a:	4b05      	ldr	r3, [pc, #20]	; (8c50 <overHeadWaterStatusOnCall+0x70>)
    8c3c:	4798      	blx	r3
}
    8c3e:	46c0      	nop			; (mov r8, r8)
    8c40:	46bd      	mov	sp, r7
    8c42:	b005      	add	sp, #20
    8c44:	bd90      	pop	{r4, r7, pc}
    8c46:	46c0      	nop			; (mov r8, r8)
    8c48:	00008b89 	.word	0x00008b89
    8c4c:	20000768 	.word	0x20000768
    8c50:	0000497d 	.word	0x0000497d

00008c54 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
    8c54:	b580      	push	{r7, lr}
    8c56:	b084      	sub	sp, #16
    8c58:	af00      	add	r7, sp, #0
    8c5a:	60f8      	str	r0, [r7, #12]
    8c5c:	60b9      	str	r1, [r7, #8]
    8c5e:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
    8c60:	2037      	movs	r0, #55	; 0x37
    8c62:	4b0c      	ldr	r3, [pc, #48]	; (8c94 <readWaterSensorState+0x40>)
    8c64:	4798      	blx	r3
    8c66:	0003      	movs	r3, r0
    8c68:	001a      	movs	r2, r3
    8c6a:	68fb      	ldr	r3, [r7, #12]
    8c6c:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
    8c6e:	200f      	movs	r0, #15
    8c70:	4b08      	ldr	r3, [pc, #32]	; (8c94 <readWaterSensorState+0x40>)
    8c72:	4798      	blx	r3
    8c74:	0003      	movs	r3, r0
    8c76:	001a      	movs	r2, r3
    8c78:	68bb      	ldr	r3, [r7, #8]
    8c7a:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
    8c7c:	200e      	movs	r0, #14
    8c7e:	4b05      	ldr	r3, [pc, #20]	; (8c94 <readWaterSensorState+0x40>)
    8c80:	4798      	blx	r3
    8c82:	0003      	movs	r3, r0
    8c84:	001a      	movs	r2, r3
    8c86:	687b      	ldr	r3, [r7, #4]
    8c88:	701a      	strb	r2, [r3, #0]
}
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	46bd      	mov	sp, r7
    8c8e:	b004      	add	sp, #16
    8c90:	bd80      	pop	{r7, pc}
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	000088e1 	.word	0x000088e1

00008c98 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
    8c98:	b580      	push	{r7, lr}
    8c9a:	b082      	sub	sp, #8
    8c9c:	af00      	add	r7, sp, #0
    8c9e:	0002      	movs	r2, r0
    8ca0:	1dfb      	adds	r3, r7, #7
    8ca2:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
    8ca4:	4b03      	ldr	r3, [pc, #12]	; (8cb4 <updateUndergroundLevel+0x1c>)
    8ca6:	1dfa      	adds	r2, r7, #7
    8ca8:	7812      	ldrb	r2, [r2, #0]
    8caa:	701a      	strb	r2, [r3, #0]
}
    8cac:	46c0      	nop			; (mov r8, r8)
    8cae:	46bd      	mov	sp, r7
    8cb0:	b002      	add	sp, #8
    8cb2:	bd80      	pop	{r7, pc}
    8cb4:	20000814 	.word	0x20000814

00008cb8 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
    8cb8:	b580      	push	{r7, lr}
    8cba:	b082      	sub	sp, #8
    8cbc:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
    8cbe:	1d3a      	adds	r2, r7, #4
    8cc0:	1d79      	adds	r1, r7, #5
    8cc2:	1dbb      	adds	r3, r7, #6
    8cc4:	0018      	movs	r0, r3
    8cc6:	4b17      	ldr	r3, [pc, #92]	; (8d24 <getWaterSensorState+0x6c>)
    8cc8:	4798      	blx	r3
	uint8_t ans=0;
    8cca:	1dfb      	adds	r3, r7, #7
    8ccc:	2200      	movs	r2, #0
    8cce:	701a      	strb	r2, [r3, #0]

	if(!l)
    8cd0:	1dbb      	adds	r3, r7, #6
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	2201      	movs	r2, #1
    8cd6:	4053      	eors	r3, r2
    8cd8:	b2db      	uxtb	r3, r3
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d01c      	beq.n	8d18 <getWaterSensorState+0x60>
	{
		ans++;
    8cde:	1dfb      	adds	r3, r7, #7
    8ce0:	781a      	ldrb	r2, [r3, #0]
    8ce2:	1dfb      	adds	r3, r7, #7
    8ce4:	3201      	adds	r2, #1
    8ce6:	701a      	strb	r2, [r3, #0]
		if(!m)
    8ce8:	1d7b      	adds	r3, r7, #5
    8cea:	781b      	ldrb	r3, [r3, #0]
    8cec:	2201      	movs	r2, #1
    8cee:	4053      	eors	r3, r2
    8cf0:	b2db      	uxtb	r3, r3
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d010      	beq.n	8d18 <getWaterSensorState+0x60>
		{
			ans++;
    8cf6:	1dfb      	adds	r3, r7, #7
    8cf8:	781a      	ldrb	r2, [r3, #0]
    8cfa:	1dfb      	adds	r3, r7, #7
    8cfc:	3201      	adds	r2, #1
    8cfe:	701a      	strb	r2, [r3, #0]
			if(!h)
    8d00:	1d3b      	adds	r3, r7, #4
    8d02:	781b      	ldrb	r3, [r3, #0]
    8d04:	2201      	movs	r2, #1
    8d06:	4053      	eors	r3, r2
    8d08:	b2db      	uxtb	r3, r3
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d004      	beq.n	8d18 <getWaterSensorState+0x60>
			{
				ans++;
    8d0e:	1dfb      	adds	r3, r7, #7
    8d10:	781a      	ldrb	r2, [r3, #0]
    8d12:	1dfb      	adds	r3, r7, #7
    8d14:	3201      	adds	r2, #1
    8d16:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8d18:	1dfb      	adds	r3, r7, #7
    8d1a:	781b      	ldrb	r3, [r3, #0]
}
    8d1c:	0018      	movs	r0, r3
    8d1e:	46bd      	mov	sp, r7
    8d20:	b002      	add	sp, #8
    8d22:	bd80      	pop	{r7, pc}
    8d24:	00008c55 	.word	0x00008c55

00008d28 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
    8d28:	b590      	push	{r4, r7, lr}
    8d2a:	b085      	sub	sp, #20
    8d2c:	af00      	add	r7, sp, #0
    8d2e:	0002      	movs	r2, r0
    8d30:	1dfb      	adds	r3, r7, #7
    8d32:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
    8d34:	230f      	movs	r3, #15
    8d36:	18fc      	adds	r4, r7, r3
    8d38:	4b19      	ldr	r3, [pc, #100]	; (8da0 <waterStatusOnCall+0x78>)
    8d3a:	4798      	blx	r3
    8d3c:	0003      	movs	r3, r0
    8d3e:	7023      	strb	r3, [r4, #0]
	if(current)
    8d40:	1dfb      	adds	r3, r7, #7
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	2b00      	cmp	r3, #0
    8d46:	d004      	beq.n	8d52 <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
    8d48:	230f      	movs	r3, #15
    8d4a:	18fb      	adds	r3, r7, r3
    8d4c:	4a15      	ldr	r2, [pc, #84]	; (8da4 <waterStatusOnCall+0x7c>)
    8d4e:	7812      	ldrb	r2, [r2, #0]
    8d50:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
    8d52:	230f      	movs	r3, #15
    8d54:	18fb      	adds	r3, r7, r3
    8d56:	781b      	ldrb	r3, [r3, #0]
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d103      	bne.n	8d64 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
    8d5c:	2054      	movs	r0, #84	; 0x54
    8d5e:	4b12      	ldr	r3, [pc, #72]	; (8da8 <waterStatusOnCall+0x80>)
    8d60:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
    8d62:	e019      	b.n	8d98 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
    8d64:	230f      	movs	r3, #15
    8d66:	18fb      	adds	r3, r7, r3
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	2b01      	cmp	r3, #1
    8d6c:	d103      	bne.n	8d76 <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
    8d6e:	2051      	movs	r0, #81	; 0x51
    8d70:	4b0d      	ldr	r3, [pc, #52]	; (8da8 <waterStatusOnCall+0x80>)
    8d72:	4798      	blx	r3
}
    8d74:	e010      	b.n	8d98 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
    8d76:	230f      	movs	r3, #15
    8d78:	18fb      	adds	r3, r7, r3
    8d7a:	781b      	ldrb	r3, [r3, #0]
    8d7c:	2b02      	cmp	r3, #2
    8d7e:	d103      	bne.n	8d88 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
    8d80:	2052      	movs	r0, #82	; 0x52
    8d82:	4b09      	ldr	r3, [pc, #36]	; (8da8 <waterStatusOnCall+0x80>)
    8d84:	4798      	blx	r3
}
    8d86:	e007      	b.n	8d98 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
    8d88:	230f      	movs	r3, #15
    8d8a:	18fb      	adds	r3, r7, r3
    8d8c:	781b      	ldrb	r3, [r3, #0]
    8d8e:	2b03      	cmp	r3, #3
    8d90:	d102      	bne.n	8d98 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
    8d92:	2045      	movs	r0, #69	; 0x45
    8d94:	4b04      	ldr	r3, [pc, #16]	; (8da8 <waterStatusOnCall+0x80>)
    8d96:	4798      	blx	r3
}
    8d98:	46c0      	nop			; (mov r8, r8)
    8d9a:	46bd      	mov	sp, r7
    8d9c:	b005      	add	sp, #20
    8d9e:	bd90      	pop	{r4, r7, pc}
    8da0:	00008cb9 	.word	0x00008cb9
    8da4:	20000814 	.word	0x20000814
    8da8:	0000497d 	.word	0x0000497d

00008dac <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
    8dac:	b590      	push	{r4, r7, lr}
    8dae:	b085      	sub	sp, #20
    8db0:	af00      	add	r7, sp, #0
    8db2:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
    8db4:	2308      	movs	r3, #8
    8db6:	18fb      	adds	r3, r7, r3
    8db8:	0018      	movs	r0, r3
    8dba:	4b8b      	ldr	r3, [pc, #556]	; (8fe8 <Water_Level_Task+0x23c>)
    8dbc:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
    8dbe:	2308      	movs	r3, #8
    8dc0:	18fb      	adds	r3, r7, r3
    8dc2:	2200      	movs	r2, #0
    8dc4:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
    8dc6:	2308      	movs	r3, #8
    8dc8:	18fb      	adds	r3, r7, r3
    8dca:	2201      	movs	r2, #1
    8dcc:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
    8dce:	2308      	movs	r3, #8
    8dd0:	18fb      	adds	r3, r7, r3
    8dd2:	0019      	movs	r1, r3
    8dd4:	202f      	movs	r0, #47	; 0x2f
    8dd6:	4b85      	ldr	r3, [pc, #532]	; (8fec <Water_Level_Task+0x240>)
    8dd8:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
    8dda:	2308      	movs	r3, #8
    8ddc:	18fb      	adds	r3, r7, r3
    8dde:	0019      	movs	r1, r3
    8de0:	200c      	movs	r0, #12
    8de2:	4b82      	ldr	r3, [pc, #520]	; (8fec <Water_Level_Task+0x240>)
    8de4:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
    8de6:	2308      	movs	r3, #8
    8de8:	18fb      	adds	r3, r7, r3
    8dea:	0019      	movs	r1, r3
    8dec:	200d      	movs	r0, #13
    8dee:	4b7f      	ldr	r3, [pc, #508]	; (8fec <Water_Level_Task+0x240>)
    8df0:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
    8df2:	2308      	movs	r3, #8
    8df4:	18fb      	adds	r3, r7, r3
    8df6:	0019      	movs	r1, r3
    8df8:	200e      	movs	r0, #14
    8dfa:	4b7c      	ldr	r3, [pc, #496]	; (8fec <Water_Level_Task+0x240>)
    8dfc:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
    8dfe:	2308      	movs	r3, #8
    8e00:	18fb      	adds	r3, r7, r3
    8e02:	0019      	movs	r1, r3
    8e04:	200f      	movs	r0, #15
    8e06:	4b79      	ldr	r3, [pc, #484]	; (8fec <Water_Level_Task+0x240>)
    8e08:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
    8e0a:	2308      	movs	r3, #8
    8e0c:	18fb      	adds	r3, r7, r3
    8e0e:	0019      	movs	r1, r3
    8e10:	2037      	movs	r0, #55	; 0x37
    8e12:	4b76      	ldr	r3, [pc, #472]	; (8fec <Water_Level_Task+0x240>)
    8e14:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
    8e16:	4b76      	ldr	r3, [pc, #472]	; (8ff0 <Water_Level_Task+0x244>)
    8e18:	2202      	movs	r2, #2
    8e1a:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
    8e1c:	4b75      	ldr	r3, [pc, #468]	; (8ff4 <Water_Level_Task+0x248>)
    8e1e:	2202      	movs	r2, #2
    8e20:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
    8e22:	4b75      	ldr	r3, [pc, #468]	; (8ff8 <Water_Level_Task+0x24c>)
    8e24:	2201      	movs	r2, #1
    8e26:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
    8e28:	4b74      	ldr	r3, [pc, #464]	; (8ffc <Water_Level_Task+0x250>)
    8e2a:	2201      	movs	r2, #1
    8e2c:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
    8e2e:	4b74      	ldr	r3, [pc, #464]	; (9000 <Water_Level_Task+0x254>)
    8e30:	2200      	movs	r2, #0
    8e32:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
    8e34:	230f      	movs	r3, #15
    8e36:	18fb      	adds	r3, r7, r3
    8e38:	2200      	movs	r2, #0
    8e3a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8e3c:	4b71      	ldr	r3, [pc, #452]	; (9004 <Water_Level_Task+0x258>)
    8e3e:	791b      	ldrb	r3, [r3, #4]
    8e40:	2b00      	cmp	r3, #0
    8e42:	d004      	beq.n	8e4e <Water_Level_Task+0xa2>
	{
		j = 19;
    8e44:	230f      	movs	r3, #15
    8e46:	18fb      	adds	r3, r7, r3
    8e48:	2213      	movs	r2, #19
    8e4a:	701a      	strb	r2, [r3, #0]
    8e4c:	e003      	b.n	8e56 <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
    8e4e:	230f      	movs	r3, #15
    8e50:	18fb      	adds	r3, r7, r3
    8e52:	2211      	movs	r2, #17
    8e54:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
    8e56:	230e      	movs	r3, #14
    8e58:	18fb      	adds	r3, r7, r3
    8e5a:	220c      	movs	r2, #12
    8e5c:	701a      	strb	r2, [r3, #0]
    8e5e:	e00c      	b.n	8e7a <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
    8e60:	230e      	movs	r3, #14
    8e62:	18fb      	adds	r3, r7, r3
    8e64:	781b      	ldrb	r3, [r3, #0]
    8e66:	4a68      	ldr	r2, [pc, #416]	; (9008 <Water_Level_Task+0x25c>)
    8e68:	2101      	movs	r1, #1
    8e6a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
    8e6c:	230e      	movs	r3, #14
    8e6e:	18fb      	adds	r3, r7, r3
    8e70:	781a      	ldrb	r2, [r3, #0]
    8e72:	230e      	movs	r3, #14
    8e74:	18fb      	adds	r3, r7, r3
    8e76:	3201      	adds	r2, #1
    8e78:	701a      	strb	r2, [r3, #0]
    8e7a:	230e      	movs	r3, #14
    8e7c:	18fa      	adds	r2, r7, r3
    8e7e:	230f      	movs	r3, #15
    8e80:	18fb      	adds	r3, r7, r3
    8e82:	7812      	ldrb	r2, [r2, #0]
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	429a      	cmp	r2, r3
    8e88:	d3ea      	bcc.n	8e60 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
    8e8a:	4b60      	ldr	r3, [pc, #384]	; (900c <Water_Level_Task+0x260>)
    8e8c:	2249      	movs	r2, #73	; 0x49
    8e8e:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
    8e90:	4b5e      	ldr	r3, [pc, #376]	; (900c <Water_Level_Task+0x260>)
    8e92:	2244      	movs	r2, #68	; 0x44
    8e94:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
    8e96:	4b5d      	ldr	r3, [pc, #372]	; (900c <Water_Level_Task+0x260>)
    8e98:	2248      	movs	r2, #72	; 0x48
    8e9a:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
    8e9c:	4b5b      	ldr	r3, [pc, #364]	; (900c <Water_Level_Task+0x260>)
    8e9e:	2245      	movs	r2, #69	; 0x45
    8ea0:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
    8ea2:	4b5a      	ldr	r3, [pc, #360]	; (900c <Water_Level_Task+0x260>)
    8ea4:	225a      	movs	r2, #90	; 0x5a
    8ea6:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8ea8:	4b56      	ldr	r3, [pc, #344]	; (9004 <Water_Level_Task+0x258>)
    8eaa:	791b      	ldrb	r3, [r3, #4]
    8eac:	2b00      	cmp	r3, #0
    8eae:	d005      	beq.n	8ebc <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
    8eb0:	4b56      	ldr	r3, [pc, #344]	; (900c <Water_Level_Task+0x260>)
    8eb2:	2256      	movs	r2, #86	; 0x56
    8eb4:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
    8eb6:	4b55      	ldr	r3, [pc, #340]	; (900c <Water_Level_Task+0x260>)
    8eb8:	2257      	movs	r2, #87	; 0x57
    8eba:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    8ebc:	4b51      	ldr	r3, [pc, #324]	; (9004 <Water_Level_Task+0x258>)
    8ebe:	78db      	ldrb	r3, [r3, #3]
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d00b      	beq.n	8edc <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
    8ec4:	4b52      	ldr	r3, [pc, #328]	; (9010 <Water_Level_Task+0x264>)
    8ec6:	2200      	movs	r2, #0
    8ec8:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
    8eca:	4b51      	ldr	r3, [pc, #324]	; (9010 <Water_Level_Task+0x264>)
    8ecc:	2200      	movs	r2, #0
    8ece:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
    8ed0:	4b50      	ldr	r3, [pc, #320]	; (9014 <Water_Level_Task+0x268>)
    8ed2:	220d      	movs	r2, #13
    8ed4:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
    8ed6:	4b4f      	ldr	r3, [pc, #316]	; (9014 <Water_Level_Task+0x268>)
    8ed8:	220f      	movs	r2, #15
    8eda:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
    8edc:	230c      	movs	r3, #12
    8ede:	18fb      	adds	r3, r7, r3
    8ee0:	2200      	movs	r2, #0
    8ee2:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
    8ee4:	4b4c      	ldr	r3, [pc, #304]	; (9018 <Water_Level_Task+0x26c>)
    8ee6:	7fdb      	ldrb	r3, [r3, #31]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d000      	beq.n	8eee <Water_Level_Task+0x142>
    8eec:	e073      	b.n	8fd6 <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
    8eee:	230b      	movs	r3, #11
    8ef0:	18fc      	adds	r4, r7, r3
    8ef2:	4b4a      	ldr	r3, [pc, #296]	; (901c <Water_Level_Task+0x270>)
    8ef4:	4798      	blx	r3
    8ef6:	0003      	movs	r3, r0
    8ef8:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
    8efa:	4b42      	ldr	r3, [pc, #264]	; (9004 <Water_Level_Task+0x258>)
    8efc:	791b      	ldrb	r3, [r3, #4]
    8efe:	2b00      	cmp	r3, #0
    8f00:	d005      	beq.n	8f0e <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
    8f02:	230d      	movs	r3, #13
    8f04:	18fc      	adds	r4, r7, r3
    8f06:	4b46      	ldr	r3, [pc, #280]	; (9020 <Water_Level_Task+0x274>)
    8f08:	4798      	blx	r3
    8f0a:	0003      	movs	r3, r0
    8f0c:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8f0e:	4b3d      	ldr	r3, [pc, #244]	; (9004 <Water_Level_Task+0x258>)
    8f10:	791b      	ldrb	r3, [r3, #4]
    8f12:	2b01      	cmp	r3, #1
    8f14:	d125      	bne.n	8f62 <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
    8f16:	4b36      	ldr	r3, [pc, #216]	; (8ff0 <Water_Level_Task+0x244>)
    8f18:	781b      	ldrb	r3, [r3, #0]
    8f1a:	220b      	movs	r2, #11
    8f1c:	18ba      	adds	r2, r7, r2
    8f1e:	7812      	ldrb	r2, [r2, #0]
    8f20:	429a      	cmp	r2, r3
    8f22:	d006      	beq.n	8f32 <Water_Level_Task+0x186>
    8f24:	4b33      	ldr	r3, [pc, #204]	; (8ff4 <Water_Level_Task+0x248>)
    8f26:	781b      	ldrb	r3, [r3, #0]
    8f28:	220b      	movs	r2, #11
    8f2a:	18ba      	adds	r2, r7, r2
    8f2c:	7812      	ldrb	r2, [r2, #0]
    8f2e:	429a      	cmp	r2, r3
    8f30:	d00f      	beq.n	8f52 <Water_Level_Task+0x1a6>
    8f32:	4b31      	ldr	r3, [pc, #196]	; (8ff8 <Water_Level_Task+0x24c>)
    8f34:	781b      	ldrb	r3, [r3, #0]
    8f36:	b2db      	uxtb	r3, r3
    8f38:	220d      	movs	r2, #13
    8f3a:	18ba      	adds	r2, r7, r2
    8f3c:	7812      	ldrb	r2, [r2, #0]
    8f3e:	429a      	cmp	r2, r3
    8f40:	d009      	beq.n	8f56 <Water_Level_Task+0x1aa>
    8f42:	4b2e      	ldr	r3, [pc, #184]	; (8ffc <Water_Level_Task+0x250>)
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	b2db      	uxtb	r3, r3
    8f48:	220d      	movs	r2, #13
    8f4a:	18ba      	adds	r2, r7, r2
    8f4c:	7812      	ldrb	r2, [r2, #0]
    8f4e:	429a      	cmp	r2, r3
    8f50:	d101      	bne.n	8f56 <Water_Level_Task+0x1aa>
    8f52:	2301      	movs	r3, #1
    8f54:	e000      	b.n	8f58 <Water_Level_Task+0x1ac>
    8f56:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8f58:	1c1a      	adds	r2, r3, #0
    8f5a:	2301      	movs	r3, #1
    8f5c:	4013      	ands	r3, r2
    8f5e:	b2db      	uxtb	r3, r3
    8f60:	e014      	b.n	8f8c <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
    8f62:	4b23      	ldr	r3, [pc, #140]	; (8ff0 <Water_Level_Task+0x244>)
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	220b      	movs	r2, #11
    8f68:	18ba      	adds	r2, r7, r2
    8f6a:	7812      	ldrb	r2, [r2, #0]
    8f6c:	429a      	cmp	r2, r3
    8f6e:	d008      	beq.n	8f82 <Water_Level_Task+0x1d6>
    8f70:	4b20      	ldr	r3, [pc, #128]	; (8ff4 <Water_Level_Task+0x248>)
    8f72:	781b      	ldrb	r3, [r3, #0]
    8f74:	220b      	movs	r2, #11
    8f76:	18ba      	adds	r2, r7, r2
    8f78:	7812      	ldrb	r2, [r2, #0]
    8f7a:	429a      	cmp	r2, r3
    8f7c:	d101      	bne.n	8f82 <Water_Level_Task+0x1d6>
    8f7e:	2301      	movs	r3, #1
    8f80:	e000      	b.n	8f84 <Water_Level_Task+0x1d8>
    8f82:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8f84:	1c1a      	adds	r2, r3, #0
    8f86:	2301      	movs	r3, #1
    8f88:	4013      	ands	r3, r2
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d010      	beq.n	8fb2 <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
    8f90:	4b1b      	ldr	r3, [pc, #108]	; (9000 <Water_Level_Task+0x254>)
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	3301      	adds	r3, #1
    8f96:	b2da      	uxtb	r2, r3
    8f98:	4b19      	ldr	r3, [pc, #100]	; (9000 <Water_Level_Task+0x254>)
    8f9a:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
    8f9c:	4b18      	ldr	r3, [pc, #96]	; (9000 <Water_Level_Task+0x254>)
    8f9e:	781b      	ldrb	r3, [r3, #0]
    8fa0:	2b09      	cmp	r3, #9
    8fa2:	d909      	bls.n	8fb8 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
    8fa4:	4b1f      	ldr	r3, [pc, #124]	; (9024 <Water_Level_Task+0x278>)
    8fa6:	4798      	blx	r3
					result=true;
    8fa8:	230c      	movs	r3, #12
    8faa:	18fb      	adds	r3, r7, r3
    8fac:	2201      	movs	r2, #1
    8fae:	701a      	strb	r2, [r3, #0]
    8fb0:	e002      	b.n	8fb8 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
    8fb2:	4b13      	ldr	r3, [pc, #76]	; (9000 <Water_Level_Task+0x254>)
    8fb4:	2200      	movs	r2, #0
    8fb6:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
    8fb8:	4b0e      	ldr	r3, [pc, #56]	; (8ff4 <Water_Level_Task+0x248>)
    8fba:	220b      	movs	r2, #11
    8fbc:	18ba      	adds	r2, r7, r2
    8fbe:	7812      	ldrb	r2, [r2, #0]
    8fc0:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
    8fc2:	4b10      	ldr	r3, [pc, #64]	; (9004 <Water_Level_Task+0x258>)
    8fc4:	791b      	ldrb	r3, [r3, #4]
    8fc6:	2b00      	cmp	r3, #0
    8fc8:	d009      	beq.n	8fde <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
    8fca:	4b0c      	ldr	r3, [pc, #48]	; (8ffc <Water_Level_Task+0x250>)
    8fcc:	220d      	movs	r2, #13
    8fce:	18ba      	adds	r2, r7, r2
    8fd0:	7812      	ldrb	r2, [r2, #0]
    8fd2:	701a      	strb	r2, [r3, #0]
    8fd4:	e003      	b.n	8fde <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
    8fd6:	4b14      	ldr	r3, [pc, #80]	; (9028 <Water_Level_Task+0x27c>)
    8fd8:	0018      	movs	r0, r3
    8fda:	4b14      	ldr	r3, [pc, #80]	; (902c <Water_Level_Task+0x280>)
    8fdc:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
    8fde:	2064      	movs	r0, #100	; 0x64
    8fe0:	4b12      	ldr	r3, [pc, #72]	; (902c <Water_Level_Task+0x280>)
    8fe2:	4798      	blx	r3
	{
    8fe4:	e77a      	b.n	8edc <Water_Level_Task+0x130>
    8fe6:	46c0      	nop			; (mov r8, r8)
    8fe8:	000088bd 	.word	0x000088bd
    8fec:	00011f79 	.word	0x00011f79
    8ff0:	20000814 	.word	0x20000814
    8ff4:	20000749 	.word	0x20000749
    8ff8:	20000768 	.word	0x20000768
    8ffc:	2000073a 	.word	0x2000073a
    9000:	20000764 	.word	0x20000764
    9004:	20000628 	.word	0x20000628
    9008:	20000700 	.word	0x20000700
    900c:	200007b4 	.word	0x200007b4
    9010:	20000788 	.word	0x20000788
    9014:	20000718 	.word	0x20000718
    9018:	2000065c 	.word	0x2000065c
    901c:	00008cb9 	.word	0x00008cb9
    9020:	00008b89 	.word	0x00008b89
    9024:	00009031 	.word	0x00009031
    9028:	00001388 	.word	0x00001388
    902c:	0000f0a9 	.word	0x0000f0a9

00009030 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
    9030:	b580      	push	{r7, lr}
    9032:	b082      	sub	sp, #8
    9034:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
    9036:	1dfb      	adds	r3, r7, #7
    9038:	4abb      	ldr	r2, [pc, #748]	; (9328 <operateOnWaterEvent+0x2f8>)
    903a:	7812      	ldrb	r2, [r2, #0]
    903c:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
    903e:	1dbb      	adds	r3, r7, #6
    9040:	4aba      	ldr	r2, [pc, #744]	; (932c <operateOnWaterEvent+0x2fc>)
    9042:	7812      	ldrb	r2, [r2, #0]
    9044:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
    9046:	4bba      	ldr	r3, [pc, #744]	; (9330 <operateOnWaterEvent+0x300>)
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	1dfa      	adds	r2, r7, #7
    904c:	7812      	ldrb	r2, [r2, #0]
    904e:	429a      	cmp	r2, r3
    9050:	d10c      	bne.n	906c <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    9052:	4bb8      	ldr	r3, [pc, #736]	; (9334 <operateOnWaterEvent+0x304>)
    9054:	791b      	ldrb	r3, [r3, #4]
    9056:	2b00      	cmp	r3, #0
    9058:	d000      	beq.n	905c <operateOnWaterEvent+0x2c>
    905a:	e15e      	b.n	931a <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
    905c:	4bb6      	ldr	r3, [pc, #728]	; (9338 <operateOnWaterEvent+0x308>)
    905e:	781b      	ldrb	r3, [r3, #0]
    9060:	b2db      	uxtb	r3, r3
    9062:	1dba      	adds	r2, r7, #6
    9064:	7812      	ldrb	r2, [r2, #0]
    9066:	429a      	cmp	r2, r3
    9068:	d100      	bne.n	906c <operateOnWaterEvent+0x3c>
    906a:	e158      	b.n	931e <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
    906c:	4bb3      	ldr	r3, [pc, #716]	; (933c <operateOnWaterEvent+0x30c>)
    906e:	4798      	blx	r3
    9070:	1e03      	subs	r3, r0, #0
    9072:	d100      	bne.n	9076 <operateOnWaterEvent+0x46>
    9074:	e0c3      	b.n	91fe <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
    9076:	1dfb      	adds	r3, r7, #7
    9078:	781b      	ldrb	r3, [r3, #0]
    907a:	2b00      	cmp	r3, #0
    907c:	d122      	bne.n	90c4 <operateOnWaterEvent+0x94>
    907e:	4bac      	ldr	r3, [pc, #688]	; (9330 <operateOnWaterEvent+0x300>)
    9080:	781b      	ldrb	r3, [r3, #0]
    9082:	2b00      	cmp	r3, #0
    9084:	d01e      	beq.n	90c4 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
    9086:	2200      	movs	r2, #0
    9088:	2101      	movs	r1, #1
    908a:	2000      	movs	r0, #0
    908c:	4bac      	ldr	r3, [pc, #688]	; (9340 <operateOnWaterEvent+0x310>)
    908e:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
    9090:	2049      	movs	r0, #73	; 0x49
    9092:	4bac      	ldr	r3, [pc, #688]	; (9344 <operateOnWaterEvent+0x314>)
    9094:	4798      	blx	r3
    9096:	0003      	movs	r3, r0
    9098:	001a      	movs	r2, r3
    909a:	4bab      	ldr	r3, [pc, #684]	; (9348 <operateOnWaterEvent+0x318>)
    909c:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    909e:	4ba5      	ldr	r3, [pc, #660]	; (9334 <operateOnWaterEvent+0x304>)
    90a0:	78db      	ldrb	r3, [r3, #3]
    90a2:	2b00      	cmp	r3, #0
    90a4:	d100      	bne.n	90a8 <operateOnWaterEvent+0x78>
    90a6:	e071      	b.n	918c <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
    90a8:	4ba8      	ldr	r3, [pc, #672]	; (934c <operateOnWaterEvent+0x31c>)
    90aa:	795b      	ldrb	r3, [r3, #5]
    90ac:	2b00      	cmp	r3, #0
    90ae:	d100      	bne.n	90b2 <operateOnWaterEvent+0x82>
    90b0:	e06c      	b.n	918c <operateOnWaterEvent+0x15c>
    90b2:	4b9f      	ldr	r3, [pc, #636]	; (9330 <operateOnWaterEvent+0x300>)
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	2b01      	cmp	r3, #1
    90b8:	d800      	bhi.n	90bc <operateOnWaterEvent+0x8c>
    90ba:	e067      	b.n	918c <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    90bc:	4ba4      	ldr	r3, [pc, #656]	; (9350 <operateOnWaterEvent+0x320>)
    90be:	2201      	movs	r2, #1
    90c0:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    90c2:	e063      	b.n	918c <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
    90c4:	1dfb      	adds	r3, r7, #7
    90c6:	781b      	ldrb	r3, [r3, #0]
    90c8:	2b03      	cmp	r3, #3
    90ca:	d12f      	bne.n	912c <operateOnWaterEvent+0xfc>
    90cc:	4b98      	ldr	r3, [pc, #608]	; (9330 <operateOnWaterEvent+0x300>)
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	2b02      	cmp	r3, #2
    90d2:	d82b      	bhi.n	912c <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    90d4:	4b97      	ldr	r3, [pc, #604]	; (9334 <operateOnWaterEvent+0x304>)
    90d6:	78db      	ldrb	r3, [r3, #3]
    90d8:	2b00      	cmp	r3, #0
    90da:	d05a      	beq.n	9192 <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
    90dc:	4b9b      	ldr	r3, [pc, #620]	; (934c <operateOnWaterEvent+0x31c>)
    90de:	795b      	ldrb	r3, [r3, #5]
    90e0:	2b00      	cmp	r3, #0
    90e2:	d003      	beq.n	90ec <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    90e4:	4b9a      	ldr	r3, [pc, #616]	; (9350 <operateOnWaterEvent+0x320>)
    90e6:	2201      	movs	r2, #1
    90e8:	705a      	strb	r2, [r3, #1]
    90ea:	e006      	b.n	90fa <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
    90ec:	2045      	movs	r0, #69	; 0x45
    90ee:	4b95      	ldr	r3, [pc, #596]	; (9344 <operateOnWaterEvent+0x314>)
    90f0:	4798      	blx	r3
    90f2:	0003      	movs	r3, r0
    90f4:	001a      	movs	r2, r3
    90f6:	4b94      	ldr	r3, [pc, #592]	; (9348 <operateOnWaterEvent+0x318>)
    90f8:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
    90fa:	4b96      	ldr	r3, [pc, #600]	; (9354 <operateOnWaterEvent+0x324>)
    90fc:	7f9b      	ldrb	r3, [r3, #30]
    90fe:	2b00      	cmp	r3, #0
    9100:	d00c      	beq.n	911c <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
    9102:	2200      	movs	r2, #0
    9104:	2101      	movs	r1, #1
    9106:	2000      	movs	r0, #0
    9108:	4b8d      	ldr	r3, [pc, #564]	; (9340 <operateOnWaterEvent+0x310>)
    910a:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
    910c:	2048      	movs	r0, #72	; 0x48
    910e:	4b8d      	ldr	r3, [pc, #564]	; (9344 <operateOnWaterEvent+0x314>)
    9110:	4798      	blx	r3
    9112:	0003      	movs	r3, r0
    9114:	001a      	movs	r2, r3
    9116:	4b8c      	ldr	r3, [pc, #560]	; (9348 <operateOnWaterEvent+0x318>)
    9118:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    911a:	e03a      	b.n	9192 <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    911c:	2045      	movs	r0, #69	; 0x45
    911e:	4b89      	ldr	r3, [pc, #548]	; (9344 <operateOnWaterEvent+0x314>)
    9120:	4798      	blx	r3
    9122:	0003      	movs	r3, r0
    9124:	001a      	movs	r2, r3
    9126:	4b88      	ldr	r3, [pc, #544]	; (9348 <operateOnWaterEvent+0x318>)
    9128:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    912a:	e032      	b.n	9192 <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
    912c:	1dfb      	adds	r3, r7, #7
    912e:	781b      	ldrb	r3, [r3, #0]
    9130:	2b01      	cmp	r3, #1
    9132:	d11b      	bne.n	916c <operateOnWaterEvent+0x13c>
    9134:	4b7e      	ldr	r3, [pc, #504]	; (9330 <operateOnWaterEvent+0x300>)
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	2b01      	cmp	r3, #1
    913a:	d917      	bls.n	916c <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    913c:	4b7d      	ldr	r3, [pc, #500]	; (9334 <operateOnWaterEvent+0x304>)
    913e:	78db      	ldrb	r3, [r3, #3]
    9140:	2b00      	cmp	r3, #0
    9142:	d007      	beq.n	9154 <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
    9144:	4b81      	ldr	r3, [pc, #516]	; (934c <operateOnWaterEvent+0x31c>)
    9146:	795b      	ldrb	r3, [r3, #5]
    9148:	2b00      	cmp	r3, #0
    914a:	d021      	beq.n	9190 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    914c:	4b80      	ldr	r3, [pc, #512]	; (9350 <operateOnWaterEvent+0x320>)
    914e:	2201      	movs	r2, #1
    9150:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9152:	e01d      	b.n	9190 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
    9154:	4b77      	ldr	r3, [pc, #476]	; (9334 <operateOnWaterEvent+0x304>)
    9156:	79db      	ldrb	r3, [r3, #7]
    9158:	2b00      	cmp	r3, #0
    915a:	d019      	beq.n	9190 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
    915c:	2044      	movs	r0, #68	; 0x44
    915e:	4b79      	ldr	r3, [pc, #484]	; (9344 <operateOnWaterEvent+0x314>)
    9160:	4798      	blx	r3
    9162:	0003      	movs	r3, r0
    9164:	001a      	movs	r2, r3
    9166:	4b78      	ldr	r3, [pc, #480]	; (9348 <operateOnWaterEvent+0x318>)
    9168:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    916a:	e011      	b.n	9190 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
    916c:	1dfb      	adds	r3, r7, #7
    916e:	781b      	ldrb	r3, [r3, #0]
    9170:	2b02      	cmp	r3, #2
    9172:	d10e      	bne.n	9192 <operateOnWaterEvent+0x162>
    9174:	4b6e      	ldr	r3, [pc, #440]	; (9330 <operateOnWaterEvent+0x300>)
    9176:	781b      	ldrb	r3, [r3, #0]
    9178:	2b01      	cmp	r3, #1
    917a:	d80a      	bhi.n	9192 <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
    917c:	205a      	movs	r0, #90	; 0x5a
    917e:	4b71      	ldr	r3, [pc, #452]	; (9344 <operateOnWaterEvent+0x314>)
    9180:	4798      	blx	r3
    9182:	0003      	movs	r3, r0
    9184:	001a      	movs	r2, r3
    9186:	4b70      	ldr	r3, [pc, #448]	; (9348 <operateOnWaterEvent+0x318>)
    9188:	741a      	strb	r2, [r3, #16]
    918a:	e002      	b.n	9192 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    918c:	46c0      	nop			; (mov r8, r8)
    918e:	e000      	b.n	9192 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9190:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    9192:	4b68      	ldr	r3, [pc, #416]	; (9334 <operateOnWaterEvent+0x304>)
    9194:	791b      	ldrb	r3, [r3, #4]
    9196:	2b00      	cmp	r3, #0
    9198:	d100      	bne.n	919c <operateOnWaterEvent+0x16c>
    919a:	e0af      	b.n	92fc <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
    919c:	4b66      	ldr	r3, [pc, #408]	; (9338 <operateOnWaterEvent+0x308>)
    919e:	781b      	ldrb	r3, [r3, #0]
    91a0:	b2db      	uxtb	r3, r3
    91a2:	1dba      	adds	r2, r7, #6
    91a4:	7812      	ldrb	r2, [r2, #0]
    91a6:	429a      	cmp	r2, r3
    91a8:	d100      	bne.n	91ac <operateOnWaterEvent+0x17c>
    91aa:	e0a7      	b.n	92fc <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
    91ac:	1dbb      	adds	r3, r7, #6
    91ae:	781b      	ldrb	r3, [r3, #0]
    91b0:	2b02      	cmp	r3, #2
    91b2:	d111      	bne.n	91d8 <operateOnWaterEvent+0x1a8>
    91b4:	4b60      	ldr	r3, [pc, #384]	; (9338 <operateOnWaterEvent+0x308>)
    91b6:	781b      	ldrb	r3, [r3, #0]
    91b8:	b2db      	uxtb	r3, r3
    91ba:	2b01      	cmp	r3, #1
    91bc:	d80c      	bhi.n	91d8 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
    91be:	2200      	movs	r2, #0
    91c0:	2101      	movs	r1, #1
    91c2:	2000      	movs	r0, #0
    91c4:	4b5e      	ldr	r3, [pc, #376]	; (9340 <operateOnWaterEvent+0x310>)
    91c6:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
    91c8:	2056      	movs	r0, #86	; 0x56
    91ca:	4b5e      	ldr	r3, [pc, #376]	; (9344 <operateOnWaterEvent+0x314>)
    91cc:	4798      	blx	r3
    91ce:	0003      	movs	r3, r0
    91d0:	001a      	movs	r2, r3
    91d2:	4b5d      	ldr	r3, [pc, #372]	; (9348 <operateOnWaterEvent+0x318>)
    91d4:	745a      	strb	r2, [r3, #17]
    91d6:	e091      	b.n	92fc <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
    91d8:	1dbb      	adds	r3, r7, #6
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	2b00      	cmp	r3, #0
    91de:	d000      	beq.n	91e2 <operateOnWaterEvent+0x1b2>
    91e0:	e08c      	b.n	92fc <operateOnWaterEvent+0x2cc>
    91e2:	4b55      	ldr	r3, [pc, #340]	; (9338 <operateOnWaterEvent+0x308>)
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	b2db      	uxtb	r3, r3
    91e8:	2b00      	cmp	r3, #0
    91ea:	d100      	bne.n	91ee <operateOnWaterEvent+0x1be>
    91ec:	e086      	b.n	92fc <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
    91ee:	2057      	movs	r0, #87	; 0x57
    91f0:	4b54      	ldr	r3, [pc, #336]	; (9344 <operateOnWaterEvent+0x314>)
    91f2:	4798      	blx	r3
    91f4:	0003      	movs	r3, r0
    91f6:	001a      	movs	r2, r3
    91f8:	4b53      	ldr	r3, [pc, #332]	; (9348 <operateOnWaterEvent+0x318>)
    91fa:	749a      	strb	r2, [r3, #18]
    91fc:	e07e      	b.n	92fc <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    91fe:	4b4d      	ldr	r3, [pc, #308]	; (9334 <operateOnWaterEvent+0x304>)
    9200:	78db      	ldrb	r3, [r3, #3]
    9202:	2b00      	cmp	r3, #0
    9204:	d027      	beq.n	9256 <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
    9206:	4b51      	ldr	r3, [pc, #324]	; (934c <operateOnWaterEvent+0x31c>)
    9208:	795b      	ldrb	r3, [r3, #5]
    920a:	2b00      	cmp	r3, #0
    920c:	d00b      	beq.n	9226 <operateOnWaterEvent+0x1f6>
    920e:	1dfb      	adds	r3, r7, #7
    9210:	781b      	ldrb	r3, [r3, #0]
    9212:	2b01      	cmp	r3, #1
    9214:	d807      	bhi.n	9226 <operateOnWaterEvent+0x1f6>
    9216:	4b46      	ldr	r3, [pc, #280]	; (9330 <operateOnWaterEvent+0x300>)
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	2b01      	cmp	r3, #1
    921c:	d903      	bls.n	9226 <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
    921e:	4b4c      	ldr	r3, [pc, #304]	; (9350 <operateOnWaterEvent+0x320>)
    9220:	2201      	movs	r2, #1
    9222:	701a      	strb	r2, [r3, #0]
    9224:	e04b      	b.n	92be <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
    9226:	1dfb      	adds	r3, r7, #7
    9228:	781b      	ldrb	r3, [r3, #0]
    922a:	2b03      	cmp	r3, #3
    922c:	d147      	bne.n	92be <operateOnWaterEvent+0x28e>
    922e:	4b40      	ldr	r3, [pc, #256]	; (9330 <operateOnWaterEvent+0x300>)
    9230:	781b      	ldrb	r3, [r3, #0]
    9232:	2b02      	cmp	r3, #2
    9234:	d843      	bhi.n	92be <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
    9236:	4b45      	ldr	r3, [pc, #276]	; (934c <operateOnWaterEvent+0x31c>)
    9238:	795b      	ldrb	r3, [r3, #5]
    923a:	2b00      	cmp	r3, #0
    923c:	d003      	beq.n	9246 <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    923e:	4b44      	ldr	r3, [pc, #272]	; (9350 <operateOnWaterEvent+0x320>)
    9240:	2201      	movs	r2, #1
    9242:	705a      	strb	r2, [r3, #1]
    9244:	e03b      	b.n	92be <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    9246:	2045      	movs	r0, #69	; 0x45
    9248:	4b3e      	ldr	r3, [pc, #248]	; (9344 <operateOnWaterEvent+0x314>)
    924a:	4798      	blx	r3
    924c:	0003      	movs	r3, r0
    924e:	001a      	movs	r2, r3
    9250:	4b3d      	ldr	r3, [pc, #244]	; (9348 <operateOnWaterEvent+0x318>)
    9252:	73da      	strb	r2, [r3, #15]
    9254:	e033      	b.n	92be <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
    9256:	1dfb      	adds	r3, r7, #7
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	2b03      	cmp	r3, #3
    925c:	d10b      	bne.n	9276 <operateOnWaterEvent+0x246>
    925e:	4b34      	ldr	r3, [pc, #208]	; (9330 <operateOnWaterEvent+0x300>)
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2b02      	cmp	r3, #2
    9264:	d807      	bhi.n	9276 <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    9266:	2045      	movs	r0, #69	; 0x45
    9268:	4b36      	ldr	r3, [pc, #216]	; (9344 <operateOnWaterEvent+0x314>)
    926a:	4798      	blx	r3
    926c:	0003      	movs	r3, r0
    926e:	001a      	movs	r2, r3
    9270:	4b35      	ldr	r3, [pc, #212]	; (9348 <operateOnWaterEvent+0x318>)
    9272:	73da      	strb	r2, [r3, #15]
    9274:	e023      	b.n	92be <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
    9276:	1dfb      	adds	r3, r7, #7
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	2b02      	cmp	r3, #2
    927c:	d11f      	bne.n	92be <operateOnWaterEvent+0x28e>
    927e:	4b2c      	ldr	r3, [pc, #176]	; (9330 <operateOnWaterEvent+0x300>)
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	2b01      	cmp	r3, #1
    9284:	d81b      	bhi.n	92be <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
    9286:	4b2b      	ldr	r3, [pc, #172]	; (9334 <operateOnWaterEvent+0x304>)
    9288:	791b      	ldrb	r3, [r3, #4]
    928a:	2b00      	cmp	r3, #0
    928c:	d00d      	beq.n	92aa <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
    928e:	4b29      	ldr	r3, [pc, #164]	; (9334 <operateOnWaterEvent+0x304>)
    9290:	799b      	ldrb	r3, [r3, #6]
    9292:	2b00      	cmp	r3, #0
    9294:	d009      	beq.n	92aa <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
    9296:	1dbb      	adds	r3, r7, #6
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	2b01      	cmp	r3, #1
    929c:	d805      	bhi.n	92aa <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    929e:	4b2d      	ldr	r3, [pc, #180]	; (9354 <operateOnWaterEvent+0x324>)
    92a0:	785b      	ldrb	r3, [r3, #1]
    92a2:	2b00      	cmp	r3, #0
    92a4:	d001      	beq.n	92aa <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
    92a6:	4b2c      	ldr	r3, [pc, #176]	; (9358 <operateOnWaterEvent+0x328>)
    92a8:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
    92aa:	4b22      	ldr	r3, [pc, #136]	; (9334 <operateOnWaterEvent+0x304>)
    92ac:	799b      	ldrb	r3, [r3, #6]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d005      	beq.n	92be <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    92b2:	4b28      	ldr	r3, [pc, #160]	; (9354 <operateOnWaterEvent+0x324>)
    92b4:	785b      	ldrb	r3, [r3, #1]
    92b6:	2b00      	cmp	r3, #0
    92b8:	d001      	beq.n	92be <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
    92ba:	4b27      	ldr	r3, [pc, #156]	; (9358 <operateOnWaterEvent+0x328>)
    92bc:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    92be:	4b1d      	ldr	r3, [pc, #116]	; (9334 <operateOnWaterEvent+0x304>)
    92c0:	791b      	ldrb	r3, [r3, #4]
    92c2:	2b00      	cmp	r3, #0
    92c4:	d01a      	beq.n	92fc <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
    92c6:	1dbb      	adds	r3, r7, #6
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	2b00      	cmp	r3, #0
    92cc:	d116      	bne.n	92fc <operateOnWaterEvent+0x2cc>
    92ce:	4b1a      	ldr	r3, [pc, #104]	; (9338 <operateOnWaterEvent+0x308>)
    92d0:	781b      	ldrb	r3, [r3, #0]
    92d2:	b2db      	uxtb	r3, r3
    92d4:	2b00      	cmp	r3, #0
    92d6:	d011      	beq.n	92fc <operateOnWaterEvent+0x2cc>
    92d8:	1dfb      	adds	r3, r7, #7
    92da:	781b      	ldrb	r3, [r3, #0]
    92dc:	2b00      	cmp	r3, #0
    92de:	d00d      	beq.n	92fc <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
    92e0:	4b1c      	ldr	r3, [pc, #112]	; (9354 <operateOnWaterEvent+0x324>)
    92e2:	785b      	ldrb	r3, [r3, #1]
    92e4:	2b00      	cmp	r3, #0
    92e6:	d002      	beq.n	92ee <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
    92e8:	4b1b      	ldr	r3, [pc, #108]	; (9358 <operateOnWaterEvent+0x328>)
    92ea:	4798      	blx	r3
    92ec:	e006      	b.n	92fc <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
    92ee:	2057      	movs	r0, #87	; 0x57
    92f0:	4b14      	ldr	r3, [pc, #80]	; (9344 <operateOnWaterEvent+0x314>)
    92f2:	4798      	blx	r3
    92f4:	0003      	movs	r3, r0
    92f6:	001a      	movs	r2, r3
    92f8:	4b13      	ldr	r3, [pc, #76]	; (9348 <operateOnWaterEvent+0x318>)
    92fa:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
    92fc:	4b0d      	ldr	r3, [pc, #52]	; (9334 <operateOnWaterEvent+0x304>)
    92fe:	791b      	ldrb	r3, [r3, #4]
    9300:	2b00      	cmp	r3, #0
    9302:	d004      	beq.n	930e <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
    9304:	1dbb      	adds	r3, r7, #6
    9306:	781b      	ldrb	r3, [r3, #0]
    9308:	0018      	movs	r0, r3
    930a:	4b14      	ldr	r3, [pc, #80]	; (935c <operateOnWaterEvent+0x32c>)
    930c:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
    930e:	1dfb      	adds	r3, r7, #7
    9310:	781b      	ldrb	r3, [r3, #0]
    9312:	0018      	movs	r0, r3
    9314:	4b12      	ldr	r3, [pc, #72]	; (9360 <operateOnWaterEvent+0x330>)
    9316:	4798      	blx	r3
    9318:	e002      	b.n	9320 <operateOnWaterEvent+0x2f0>
			return;
    931a:	46c0      	nop			; (mov r8, r8)
    931c:	e000      	b.n	9320 <operateOnWaterEvent+0x2f0>
				return;
    931e:	46c0      	nop			; (mov r8, r8)
}
    9320:	46bd      	mov	sp, r7
    9322:	b002      	add	sp, #8
    9324:	bd80      	pop	{r7, pc}
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	20000749 	.word	0x20000749
    932c:	2000073a 	.word	0x2000073a
    9330:	20000814 	.word	0x20000814
    9334:	20000628 	.word	0x20000628
    9338:	20000768 	.word	0x20000768
    933c:	00009f95 	.word	0x00009f95
    9340:	0000a895 	.word	0x0000a895
    9344:	000047a5 	.word	0x000047a5
    9348:	20000700 	.word	0x20000700
    934c:	20000554 	.word	0x20000554
    9350:	20000788 	.word	0x20000788
    9354:	2000065c 	.word	0x2000065c
    9358:	0000a2f5 	.word	0x0000a2f5
    935c:	00008b69 	.word	0x00008b69
    9360:	00008c99 	.word	0x00008c99

00009364 <Configure_ADC0>:

void Configure_ADC0(void)
{
    9364:	b580      	push	{r7, lr}
    9366:	b08c      	sub	sp, #48	; 0x30
    9368:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
    936a:	003b      	movs	r3, r7
    936c:	0018      	movs	r0, r3
    936e:	4b15      	ldr	r3, [pc, #84]	; (93c4 <Configure_ADC0+0x60>)
    9370:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
    9372:	003b      	movs	r3, r7
    9374:	2213      	movs	r2, #19
    9376:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    9378:	003b      	movs	r3, r7
    937a:	22c0      	movs	r2, #192	; 0xc0
    937c:	0152      	lsls	r2, r2, #5
    937e:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
    9380:	003b      	movs	r3, r7
    9382:	2203      	movs	r2, #3
    9384:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
    9386:	003b      	movs	r3, r7
    9388:	2203      	movs	r2, #3
    938a:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
    938c:	003b      	movs	r3, r7
    938e:	2200      	movs	r2, #0
    9390:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
    9392:	003b      	movs	r3, r7
    9394:	2200      	movs	r2, #0
    9396:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
    9398:	003b      	movs	r3, r7
    939a:	2280      	movs	r2, #128	; 0x80
    939c:	00d2      	lsls	r2, r2, #3
    939e:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
    93a0:	003b      	movs	r3, r7
    93a2:	2201      	movs	r2, #1
    93a4:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
    93a6:	003a      	movs	r2, r7
    93a8:	4907      	ldr	r1, [pc, #28]	; (93c8 <Configure_ADC0+0x64>)
    93aa:	4b08      	ldr	r3, [pc, #32]	; (93cc <Configure_ADC0+0x68>)
    93ac:	0018      	movs	r0, r3
    93ae:	4b08      	ldr	r3, [pc, #32]	; (93d0 <Configure_ADC0+0x6c>)
    93b0:	4798      	blx	r3
	adc_enable(&adc_inst);
    93b2:	4b06      	ldr	r3, [pc, #24]	; (93cc <Configure_ADC0+0x68>)
    93b4:	0018      	movs	r0, r3
    93b6:	4b07      	ldr	r3, [pc, #28]	; (93d4 <Configure_ADC0+0x70>)
    93b8:	4798      	blx	r3
}
    93ba:	46c0      	nop			; (mov r8, r8)
    93bc:	46bd      	mov	sp, r7
    93be:	b00c      	add	sp, #48	; 0x30
    93c0:	bd80      	pop	{r7, pc}
    93c2:	46c0      	nop			; (mov r8, r8)
    93c4:	0000c259 	.word	0x0000c259
    93c8:	42004000 	.word	0x42004000
    93cc:	200007d8 	.word	0x200007d8
    93d0:	0000c8a9 	.word	0x0000c8a9
    93d4:	00008725 	.word	0x00008725

000093d8 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
    93d8:	b580      	push	{r7, lr}
    93da:	b084      	sub	sp, #16
    93dc:	af00      	add	r7, sp, #0
    93de:	6078      	str	r0, [r7, #4]
    93e0:	000a      	movs	r2, r1
    93e2:	1cbb      	adds	r3, r7, #2
    93e4:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	b2da      	uxtb	r2, r3
    93ea:	4b24      	ldr	r3, [pc, #144]	; (947c <Read_ADC0+0xa4>)
    93ec:	0011      	movs	r1, r2
    93ee:	0018      	movs	r0, r3
    93f0:	4b23      	ldr	r3, [pc, #140]	; (9480 <Read_ADC0+0xa8>)
    93f2:	4798      	blx	r3
	uint16_t current_value = 0;
    93f4:	2308      	movs	r3, #8
    93f6:	18fb      	adds	r3, r7, r3
    93f8:	2200      	movs	r2, #0
    93fa:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
    93fc:	2300      	movs	r3, #0
    93fe:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    9400:	230a      	movs	r3, #10
    9402:	18fb      	adds	r3, r7, r3
    9404:	2200      	movs	r2, #0
    9406:	801a      	strh	r2, [r3, #0]
    9408:	e026      	b.n	9458 <Read_ADC0+0x80>
	{
		current_value = 0;
    940a:	2308      	movs	r3, #8
    940c:	18fb      	adds	r3, r7, r3
    940e:	2200      	movs	r2, #0
    9410:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
    9412:	4b1a      	ldr	r3, [pc, #104]	; (947c <Read_ADC0+0xa4>)
    9414:	0018      	movs	r0, r3
    9416:	4b1b      	ldr	r3, [pc, #108]	; (9484 <Read_ADC0+0xac>)
    9418:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
    941a:	46c0      	nop			; (mov r8, r8)
    941c:	4b17      	ldr	r3, [pc, #92]	; (947c <Read_ADC0+0xa4>)
    941e:	0018      	movs	r0, r3
    9420:	4b19      	ldr	r3, [pc, #100]	; (9488 <Read_ADC0+0xb0>)
    9422:	4798      	blx	r3
    9424:	0002      	movs	r2, r0
    9426:	2301      	movs	r3, #1
    9428:	4013      	ands	r3, r2
    942a:	2b01      	cmp	r3, #1
    942c:	d1f6      	bne.n	941c <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
    942e:	2308      	movs	r3, #8
    9430:	18fa      	adds	r2, r7, r3
    9432:	4b12      	ldr	r3, [pc, #72]	; (947c <Read_ADC0+0xa4>)
    9434:	0011      	movs	r1, r2
    9436:	0018      	movs	r0, r3
    9438:	4b14      	ldr	r3, [pc, #80]	; (948c <Read_ADC0+0xb4>)
    943a:	4798      	blx	r3
		total_value+=current_value;
    943c:	2308      	movs	r3, #8
    943e:	18fb      	adds	r3, r7, r3
    9440:	881b      	ldrh	r3, [r3, #0]
    9442:	001a      	movs	r2, r3
    9444:	68fb      	ldr	r3, [r7, #12]
    9446:	189b      	adds	r3, r3, r2
    9448:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    944a:	230a      	movs	r3, #10
    944c:	18fb      	adds	r3, r7, r3
    944e:	881a      	ldrh	r2, [r3, #0]
    9450:	230a      	movs	r3, #10
    9452:	18fb      	adds	r3, r7, r3
    9454:	3201      	adds	r2, #1
    9456:	801a      	strh	r2, [r3, #0]
    9458:	230a      	movs	r3, #10
    945a:	18fa      	adds	r2, r7, r3
    945c:	1cbb      	adds	r3, r7, #2
    945e:	8812      	ldrh	r2, [r2, #0]
    9460:	881b      	ldrh	r3, [r3, #0]
    9462:	429a      	cmp	r2, r3
    9464:	d3d1      	bcc.n	940a <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
    9466:	1cbb      	adds	r3, r7, #2
    9468:	881a      	ldrh	r2, [r3, #0]
    946a:	4b09      	ldr	r3, [pc, #36]	; (9490 <Read_ADC0+0xb8>)
    946c:	0011      	movs	r1, r2
    946e:	68f8      	ldr	r0, [r7, #12]
    9470:	4798      	blx	r3
    9472:	0003      	movs	r3, r0
}
    9474:	0018      	movs	r0, r3
    9476:	46bd      	mov	sp, r7
    9478:	b004      	add	sp, #16
    947a:	bd80      	pop	{r7, pc}
    947c:	200007d8 	.word	0x200007d8
    9480:	00008849 	.word	0x00008849
    9484:	00008785 	.word	0x00008785
    9488:	0000867d 	.word	0x0000867d
    948c:	000087cd 	.word	0x000087cd
    9490:	000154f1 	.word	0x000154f1

00009494 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
    9494:	b5f0      	push	{r4, r5, r6, r7, lr}
    9496:	b093      	sub	sp, #76	; 0x4c
    9498:	af00      	add	r7, sp, #0
    949a:	61f8      	str	r0, [r7, #28]
    949c:	466b      	mov	r3, sp
    949e:	61bb      	str	r3, [r7, #24]
	adc_set_positive_input(&adc_inst, adc_pin);
    94a0:	69fb      	ldr	r3, [r7, #28]
    94a2:	b2da      	uxtb	r2, r3
    94a4:	4b7b      	ldr	r3, [pc, #492]	; (9694 <Read_Voltage_ADC0+0x200>)
    94a6:	0011      	movs	r1, r2
    94a8:	0018      	movs	r0, r3
    94aa:	4b7b      	ldr	r3, [pc, #492]	; (9698 <Read_Voltage_ADC0+0x204>)
    94ac:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
    94ae:	2324      	movs	r3, #36	; 0x24
    94b0:	2218      	movs	r2, #24
    94b2:	4694      	mov	ip, r2
    94b4:	44bc      	add	ip, r7
    94b6:	4463      	add	r3, ip
    94b8:	2288      	movs	r2, #136	; 0x88
    94ba:	0092      	lsls	r2, r2, #2
    94bc:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
    94be:	2324      	movs	r3, #36	; 0x24
    94c0:	2218      	movs	r2, #24
    94c2:	4694      	mov	ip, r2
    94c4:	44bc      	add	ip, r7
    94c6:	4463      	add	r3, ip
    94c8:	881b      	ldrh	r3, [r3, #0]
    94ca:	001a      	movs	r2, r3
    94cc:	3a01      	subs	r2, #1
    94ce:	63ba      	str	r2, [r7, #56]	; 0x38
    94d0:	60bb      	str	r3, [r7, #8]
    94d2:	2200      	movs	r2, #0
    94d4:	60fa      	str	r2, [r7, #12]
    94d6:	68b8      	ldr	r0, [r7, #8]
    94d8:	68f9      	ldr	r1, [r7, #12]
    94da:	0002      	movs	r2, r0
    94dc:	0f12      	lsrs	r2, r2, #28
    94de:	000e      	movs	r6, r1
    94e0:	0136      	lsls	r6, r6, #4
    94e2:	617e      	str	r6, [r7, #20]
    94e4:	697e      	ldr	r6, [r7, #20]
    94e6:	4316      	orrs	r6, r2
    94e8:	617e      	str	r6, [r7, #20]
    94ea:	0002      	movs	r2, r0
    94ec:	0112      	lsls	r2, r2, #4
    94ee:	613a      	str	r2, [r7, #16]
    94f0:	603b      	str	r3, [r7, #0]
    94f2:	2200      	movs	r2, #0
    94f4:	607a      	str	r2, [r7, #4]
    94f6:	6838      	ldr	r0, [r7, #0]
    94f8:	6879      	ldr	r1, [r7, #4]
    94fa:	0002      	movs	r2, r0
    94fc:	0f12      	lsrs	r2, r2, #28
    94fe:	000e      	movs	r6, r1
    9500:	0135      	lsls	r5, r6, #4
    9502:	4315      	orrs	r5, r2
    9504:	0002      	movs	r2, r0
    9506:	0114      	lsls	r4, r2, #4
    9508:	005b      	lsls	r3, r3, #1
    950a:	3301      	adds	r3, #1
    950c:	3307      	adds	r3, #7
    950e:	08db      	lsrs	r3, r3, #3
    9510:	00db      	lsls	r3, r3, #3
    9512:	466a      	mov	r2, sp
    9514:	1ad3      	subs	r3, r2, r3
    9516:	469d      	mov	sp, r3
    9518:	466b      	mov	r3, sp
    951a:	3301      	adds	r3, #1
    951c:	085b      	lsrs	r3, r3, #1
    951e:	005b      	lsls	r3, r3, #1
    9520:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint16_t i=0;i<no_of_samples;i++)
    9522:	232e      	movs	r3, #46	; 0x2e
    9524:	2218      	movs	r2, #24
    9526:	4694      	mov	ip, r2
    9528:	44bc      	add	ip, r7
    952a:	4463      	add	r3, ip
    952c:	2200      	movs	r2, #0
    952e:	801a      	strh	r2, [r3, #0]
    9530:	e021      	b.n	9576 <Read_Voltage_ADC0+0xe2>
	{
		adc_start_conversion(&adc_inst);
    9532:	4b58      	ldr	r3, [pc, #352]	; (9694 <Read_Voltage_ADC0+0x200>)
    9534:	0018      	movs	r0, r3
    9536:	4b59      	ldr	r3, [pc, #356]	; (969c <Read_Voltage_ADC0+0x208>)
    9538:	4798      	blx	r3
		while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
    953a:	46c0      	nop			; (mov r8, r8)
    953c:	232e      	movs	r3, #46	; 0x2e
    953e:	2218      	movs	r2, #24
    9540:	4694      	mov	ip, r2
    9542:	44bc      	add	ip, r7
    9544:	4463      	add	r3, ip
    9546:	881b      	ldrh	r3, [r3, #0]
    9548:	005b      	lsls	r3, r3, #1
    954a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    954c:	18d2      	adds	r2, r2, r3
    954e:	4b51      	ldr	r3, [pc, #324]	; (9694 <Read_Voltage_ADC0+0x200>)
    9550:	0011      	movs	r1, r2
    9552:	0018      	movs	r0, r3
    9554:	4b52      	ldr	r3, [pc, #328]	; (96a0 <Read_Voltage_ADC0+0x20c>)
    9556:	4798      	blx	r3
    9558:	1e03      	subs	r3, r0, #0
    955a:	d1ef      	bne.n	953c <Read_Voltage_ADC0+0xa8>
	for (uint16_t i=0;i<no_of_samples;i++)
    955c:	232e      	movs	r3, #46	; 0x2e
    955e:	2218      	movs	r2, #24
    9560:	4694      	mov	ip, r2
    9562:	44bc      	add	ip, r7
    9564:	4463      	add	r3, ip
    9566:	881a      	ldrh	r2, [r3, #0]
    9568:	232e      	movs	r3, #46	; 0x2e
    956a:	2118      	movs	r1, #24
    956c:	468c      	mov	ip, r1
    956e:	44bc      	add	ip, r7
    9570:	4463      	add	r3, ip
    9572:	3201      	adds	r2, #1
    9574:	801a      	strh	r2, [r3, #0]
    9576:	232e      	movs	r3, #46	; 0x2e
    9578:	2218      	movs	r2, #24
    957a:	18ba      	adds	r2, r7, r2
    957c:	18d2      	adds	r2, r2, r3
    957e:	2324      	movs	r3, #36	; 0x24
    9580:	2118      	movs	r1, #24
    9582:	468c      	mov	ip, r1
    9584:	44bc      	add	ip, r7
    9586:	4463      	add	r3, ip
    9588:	8812      	ldrh	r2, [r2, #0]
    958a:	881b      	ldrh	r3, [r3, #0]
    958c:	429a      	cmp	r2, r3
    958e:	d3d0      	bcc.n	9532 <Read_Voltage_ADC0+0x9e>
		}
	}
	
	uint32_t square = 0;
    9590:	2300      	movs	r3, #0
    9592:	643b      	str	r3, [r7, #64]	; 0x40
	
	double  mean = 0.0;
    9594:	2300      	movs	r3, #0
    9596:	2400      	movs	r4, #0
    9598:	62bb      	str	r3, [r7, #40]	; 0x28
    959a:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	double  root = 0.0;
    959c:	2300      	movs	r3, #0
    959e:	2400      	movs	r4, #0
    95a0:	623b      	str	r3, [r7, #32]
    95a2:	627c      	str	r4, [r7, #36]	; 0x24
	
	for (uint16_t i = 0; i < no_of_samples; i++)
    95a4:	2326      	movs	r3, #38	; 0x26
    95a6:	2218      	movs	r2, #24
    95a8:	4694      	mov	ip, r2
    95aa:	44bc      	add	ip, r7
    95ac:	4463      	add	r3, ip
    95ae:	2200      	movs	r2, #0
    95b0:	801a      	strh	r2, [r3, #0]
    95b2:	e032      	b.n	961a <Read_Voltage_ADC0+0x186>
	{
		square += pow(samples_buffer[i], 2);
    95b4:	2326      	movs	r3, #38	; 0x26
    95b6:	2218      	movs	r2, #24
    95b8:	4694      	mov	ip, r2
    95ba:	44bc      	add	ip, r7
    95bc:	4463      	add	r3, ip
    95be:	881a      	ldrh	r2, [r3, #0]
    95c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95c2:	0052      	lsls	r2, r2, #1
    95c4:	5ad2      	ldrh	r2, [r2, r3]
    95c6:	4b37      	ldr	r3, [pc, #220]	; (96a4 <Read_Voltage_ADC0+0x210>)
    95c8:	0010      	movs	r0, r2
    95ca:	4798      	blx	r3
    95cc:	2300      	movs	r3, #0
    95ce:	2480      	movs	r4, #128	; 0x80
    95d0:	05e4      	lsls	r4, r4, #23
    95d2:	001a      	movs	r2, r3
    95d4:	0023      	movs	r3, r4
    95d6:	4c34      	ldr	r4, [pc, #208]	; (96a8 <Read_Voltage_ADC0+0x214>)
    95d8:	47a0      	blx	r4
    95da:	0005      	movs	r5, r0
    95dc:	000e      	movs	r6, r1
    95de:	4b31      	ldr	r3, [pc, #196]	; (96a4 <Read_Voltage_ADC0+0x210>)
    95e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    95e2:	4798      	blx	r3
    95e4:	4c31      	ldr	r4, [pc, #196]	; (96ac <Read_Voltage_ADC0+0x218>)
    95e6:	002a      	movs	r2, r5
    95e8:	0033      	movs	r3, r6
    95ea:	47a0      	blx	r4
    95ec:	0003      	movs	r3, r0
    95ee:	000c      	movs	r4, r1
    95f0:	0019      	movs	r1, r3
    95f2:	0022      	movs	r2, r4
    95f4:	4b2e      	ldr	r3, [pc, #184]	; (96b0 <Read_Voltage_ADC0+0x21c>)
    95f6:	0008      	movs	r0, r1
    95f8:	0011      	movs	r1, r2
    95fa:	4798      	blx	r3
    95fc:	0003      	movs	r3, r0
    95fe:	643b      	str	r3, [r7, #64]	; 0x40
	for (uint16_t i = 0; i < no_of_samples; i++)
    9600:	2326      	movs	r3, #38	; 0x26
    9602:	2218      	movs	r2, #24
    9604:	4694      	mov	ip, r2
    9606:	44bc      	add	ip, r7
    9608:	4463      	add	r3, ip
    960a:	881a      	ldrh	r2, [r3, #0]
    960c:	2326      	movs	r3, #38	; 0x26
    960e:	2118      	movs	r1, #24
    9610:	468c      	mov	ip, r1
    9612:	44bc      	add	ip, r7
    9614:	4463      	add	r3, ip
    9616:	3201      	adds	r2, #1
    9618:	801a      	strh	r2, [r3, #0]
    961a:	2326      	movs	r3, #38	; 0x26
    961c:	2218      	movs	r2, #24
    961e:	18ba      	adds	r2, r7, r2
    9620:	18d2      	adds	r2, r2, r3
    9622:	2324      	movs	r3, #36	; 0x24
    9624:	2118      	movs	r1, #24
    9626:	468c      	mov	ip, r1
    9628:	44bc      	add	ip, r7
    962a:	4463      	add	r3, ip
    962c:	8812      	ldrh	r2, [r2, #0]
    962e:	881b      	ldrh	r3, [r3, #0]
    9630:	429a      	cmp	r2, r3
    9632:	d3bf      	bcc.n	95b4 <Read_Voltage_ADC0+0x120>
	}
	
	mean = (square / (float)(no_of_samples));
    9634:	4b1f      	ldr	r3, [pc, #124]	; (96b4 <Read_Voltage_ADC0+0x220>)
    9636:	6c38      	ldr	r0, [r7, #64]	; 0x40
    9638:	4798      	blx	r3
    963a:	1c04      	adds	r4, r0, #0
    963c:	2324      	movs	r3, #36	; 0x24
    963e:	2218      	movs	r2, #24
    9640:	4694      	mov	ip, r2
    9642:	44bc      	add	ip, r7
    9644:	4463      	add	r3, ip
    9646:	881a      	ldrh	r2, [r3, #0]
    9648:	4b1a      	ldr	r3, [pc, #104]	; (96b4 <Read_Voltage_ADC0+0x220>)
    964a:	0010      	movs	r0, r2
    964c:	4798      	blx	r3
    964e:	1c02      	adds	r2, r0, #0
    9650:	4b19      	ldr	r3, [pc, #100]	; (96b8 <Read_Voltage_ADC0+0x224>)
    9652:	1c11      	adds	r1, r2, #0
    9654:	1c20      	adds	r0, r4, #0
    9656:	4798      	blx	r3
    9658:	1c03      	adds	r3, r0, #0
    965a:	1c1a      	adds	r2, r3, #0
    965c:	4b17      	ldr	r3, [pc, #92]	; (96bc <Read_Voltage_ADC0+0x228>)
    965e:	1c10      	adds	r0, r2, #0
    9660:	4798      	blx	r3
    9662:	0003      	movs	r3, r0
    9664:	000c      	movs	r4, r1
    9666:	62bb      	str	r3, [r7, #40]	; 0x28
    9668:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	// Calculate Root.
	root = sqrt(mean);
    966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    966c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    966e:	0018      	movs	r0, r3
    9670:	0021      	movs	r1, r4
    9672:	4b13      	ldr	r3, [pc, #76]	; (96c0 <Read_Voltage_ADC0+0x22c>)
    9674:	4798      	blx	r3
    9676:	0003      	movs	r3, r0
    9678:	000c      	movs	r4, r1
    967a:	623b      	str	r3, [r7, #32]
    967c:	627c      	str	r4, [r7, #36]	; 0x24
	
	return (uint32_t)root;
    967e:	4b0c      	ldr	r3, [pc, #48]	; (96b0 <Read_Voltage_ADC0+0x21c>)
    9680:	6a38      	ldr	r0, [r7, #32]
    9682:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9684:	4798      	blx	r3
    9686:	0003      	movs	r3, r0
    9688:	69ba      	ldr	r2, [r7, #24]
    968a:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
    968c:	0018      	movs	r0, r3
    968e:	46bd      	mov	sp, r7
    9690:	b013      	add	sp, #76	; 0x4c
    9692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9694:	200007d8 	.word	0x200007d8
    9698:	00008849 	.word	0x00008849
    969c:	00008785 	.word	0x00008785
    96a0:	000087cd 	.word	0x000087cd
    96a4:	00017ae5 	.word	0x00017ae5
    96a8:	0001425d 	.word	0x0001425d
    96ac:	00016005 	.word	0x00016005
    96b0:	000158ed 	.word	0x000158ed
    96b4:	00015f79 	.word	0x00015f79
    96b8:	00015aa9 	.word	0x00015aa9
    96bc:	00017b55 	.word	0x00017b55
    96c0:	000145b5 	.word	0x000145b5

000096c4 <autoSetCurrent>:

void autoSetCurrent(void)
{
    96c4:	b580      	push	{r7, lr}
    96c6:	b084      	sub	sp, #16
    96c8:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
    96ca:	4b2e      	ldr	r3, [pc, #184]	; (9784 <autoSetCurrent+0xc0>)
    96cc:	4798      	blx	r3
    96ce:	1e03      	subs	r3, r0, #0
    96d0:	d04e      	beq.n	9770 <autoSetCurrent+0xac>
    96d2:	4b2d      	ldr	r3, [pc, #180]	; (9788 <autoSetCurrent+0xc4>)
    96d4:	781b      	ldrb	r3, [r3, #0]
    96d6:	2201      	movs	r2, #1
    96d8:	4053      	eors	r3, r2
    96da:	b2db      	uxtb	r3, r3
    96dc:	2b00      	cmp	r3, #0
    96de:	d047      	beq.n	9770 <autoSetCurrent+0xac>
    96e0:	4b2a      	ldr	r3, [pc, #168]	; (978c <autoSetCurrent+0xc8>)
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	2201      	movs	r2, #1
    96e6:	4053      	eors	r3, r2
    96e8:	b2db      	uxtb	r3, r3
    96ea:	2b00      	cmp	r3, #0
    96ec:	d040      	beq.n	9770 <autoSetCurrent+0xac>
    96ee:	4b28      	ldr	r3, [pc, #160]	; (9790 <autoSetCurrent+0xcc>)
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	2201      	movs	r2, #1
    96f4:	4053      	eors	r3, r2
    96f6:	b2db      	uxtb	r3, r3
    96f8:	2b00      	cmp	r3, #0
    96fa:	d039      	beq.n	9770 <autoSetCurrent+0xac>
    96fc:	4b25      	ldr	r3, [pc, #148]	; (9794 <autoSetCurrent+0xd0>)
    96fe:	4798      	blx	r3
    9700:	1e03      	subs	r3, r0, #0
    9702:	d035      	beq.n	9770 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    9704:	4b24      	ldr	r3, [pc, #144]	; (9798 <autoSetCurrent+0xd4>)
    9706:	691b      	ldr	r3, [r3, #16]
    9708:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
    970a:	68fb      	ldr	r3, [r7, #12]
    970c:	2bf9      	cmp	r3, #249	; 0xf9
    970e:	d806      	bhi.n	971e <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
    9710:	2000      	movs	r0, #0
    9712:	4b22      	ldr	r3, [pc, #136]	; (979c <autoSetCurrent+0xd8>)
    9714:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
    9716:	2059      	movs	r0, #89	; 0x59
    9718:	4b21      	ldr	r3, [pc, #132]	; (97a0 <autoSetCurrent+0xdc>)
    971a:	4798      	blx	r3
			return;
    971c:	e02e      	b.n	977c <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
    971e:	4b21      	ldr	r3, [pc, #132]	; (97a4 <autoSetCurrent+0xe0>)
    9720:	7f1b      	ldrb	r3, [r3, #28]
    9722:	001a      	movs	r2, r3
    9724:	68fb      	ldr	r3, [r7, #12]
    9726:	435a      	muls	r2, r3
    9728:	4b1f      	ldr	r3, [pc, #124]	; (97a8 <autoSetCurrent+0xe4>)
    972a:	2164      	movs	r1, #100	; 0x64
    972c:	0010      	movs	r0, r2
    972e:	4798      	blx	r3
    9730:	0003      	movs	r3, r0
    9732:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
    9734:	4b1b      	ldr	r3, [pc, #108]	; (97a4 <autoSetCurrent+0xe0>)
    9736:	7f5b      	ldrb	r3, [r3, #29]
    9738:	001a      	movs	r2, r3
    973a:	68fb      	ldr	r3, [r7, #12]
    973c:	435a      	muls	r2, r3
    973e:	4b1a      	ldr	r3, [pc, #104]	; (97a8 <autoSetCurrent+0xe4>)
    9740:	2164      	movs	r1, #100	; 0x64
    9742:	0010      	movs	r0, r2
    9744:	4798      	blx	r3
    9746:	0003      	movs	r3, r0
    9748:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
    974a:	68fb      	ldr	r3, [r7, #12]
    974c:	0018      	movs	r0, r3
    974e:	4b17      	ldr	r3, [pc, #92]	; (97ac <autoSetCurrent+0xe8>)
    9750:	4798      	blx	r3
		setUnderloadValue(tempUnder);
    9752:	68bb      	ldr	r3, [r7, #8]
    9754:	0018      	movs	r0, r3
    9756:	4b16      	ldr	r3, [pc, #88]	; (97b0 <autoSetCurrent+0xec>)
    9758:	4798      	blx	r3
		setOverloadValue(tempOver);
    975a:	687b      	ldr	r3, [r7, #4]
    975c:	0018      	movs	r0, r3
    975e:	4b15      	ldr	r3, [pc, #84]	; (97b4 <autoSetCurrent+0xf0>)
    9760:	4798      	blx	r3
		setCurrentDetection(true);
    9762:	2001      	movs	r0, #1
    9764:	4b0d      	ldr	r3, [pc, #52]	; (979c <autoSetCurrent+0xd8>)
    9766:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
    9768:	204b      	movs	r0, #75	; 0x4b
    976a:	4b0d      	ldr	r3, [pc, #52]	; (97a0 <autoSetCurrent+0xdc>)
    976c:	4798      	blx	r3
	{
    976e:	e005      	b.n	977c <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
    9770:	2000      	movs	r0, #0
    9772:	4b0a      	ldr	r3, [pc, #40]	; (979c <autoSetCurrent+0xd8>)
    9774:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
    9776:	2059      	movs	r0, #89	; 0x59
    9778:	4b09      	ldr	r3, [pc, #36]	; (97a0 <autoSetCurrent+0xdc>)
    977a:	4798      	blx	r3
	}
}
    977c:	46bd      	mov	sp, r7
    977e:	b004      	add	sp, #16
    9780:	bd80      	pop	{r7, pc}
    9782:	46c0      	nop			; (mov r8, r8)
    9784:	00009f95 	.word	0x00009f95
    9788:	20000771 	.word	0x20000771
    978c:	20000773 	.word	0x20000773
    9790:	20000761 	.word	0x20000761
    9794:	00009f2d 	.word	0x00009f2d
    9798:	200006dc 	.word	0x200006dc
    979c:	000018ad 	.word	0x000018ad
    97a0:	0000497d 	.word	0x0000497d
    97a4:	2000065c 	.word	0x2000065c
    97a8:	000154f1 	.word	0x000154f1
    97ac:	00001869 	.word	0x00001869
    97b0:	000017e1 	.word	0x000017e1
    97b4:	00001825 	.word	0x00001825

000097b8 <speakAmpere>:

void speakAmpere(void)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b084      	sub	sp, #16
    97bc:	af00      	add	r7, sp, #0
	if(getMotorState())
    97be:	4b0d      	ldr	r3, [pc, #52]	; (97f4 <speakAmpere+0x3c>)
    97c0:	4798      	blx	r3
    97c2:	1e03      	subs	r3, r0, #0
    97c4:	d00f      	beq.n	97e6 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    97c6:	4b0c      	ldr	r3, [pc, #48]	; (97f8 <speakAmpere+0x40>)
    97c8:	8a9b      	ldrh	r3, [r3, #20]
    97ca:	b29b      	uxth	r3, r3
    97cc:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
    97ce:	1d39      	adds	r1, r7, #4
    97d0:	68fb      	ldr	r3, [r7, #12]
    97d2:	220a      	movs	r2, #10
    97d4:	0018      	movs	r0, r3
    97d6:	4b09      	ldr	r3, [pc, #36]	; (97fc <speakAmpere+0x44>)
    97d8:	4798      	blx	r3
		playRepeatedFiles(cTemp);
    97da:	1d3b      	adds	r3, r7, #4
    97dc:	0018      	movs	r0, r3
    97de:	4b08      	ldr	r3, [pc, #32]	; (9800 <speakAmpere+0x48>)
    97e0:	4798      	blx	r3
		return;
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	e002      	b.n	97ec <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
    97e6:	202d      	movs	r0, #45	; 0x2d
    97e8:	4b06      	ldr	r3, [pc, #24]	; (9804 <speakAmpere+0x4c>)
    97ea:	4798      	blx	r3
}
    97ec:	46bd      	mov	sp, r7
    97ee:	b004      	add	sp, #16
    97f0:	bd80      	pop	{r7, pc}
    97f2:	46c0      	nop			; (mov r8, r8)
    97f4:	00009f95 	.word	0x00009f95
    97f8:	200006dc 	.word	0x200006dc
    97fc:	000182ad 	.word	0x000182ad
    9800:	00004671 	.word	0x00004671
    9804:	0000497d 	.word	0x0000497d

00009808 <PR2_ISR>:

void PR2_ISR(void)
{
    9808:	b5f0      	push	{r4, r5, r6, r7, lr}
    980a:	b08b      	sub	sp, #44	; 0x2c
    980c:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
    980e:	4b77      	ldr	r3, [pc, #476]	; (99ec <PR2_ISR+0x1e4>)
    9810:	781b      	ldrb	r3, [r3, #0]
    9812:	b2db      	uxtb	r3, r3
    9814:	2b01      	cmp	r3, #1
    9816:	d000      	beq.n	981a <PR2_ISR+0x12>
    9818:	e0e3      	b.n	99e2 <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
    981a:	4b75      	ldr	r3, [pc, #468]	; (99f0 <PR2_ISR+0x1e8>)
    981c:	2200      	movs	r2, #0
    981e:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
    9820:	2000      	movs	r0, #0
    9822:	4b74      	ldr	r3, [pc, #464]	; (99f4 <PR2_ISR+0x1ec>)
    9824:	4798      	blx	r3
    9826:	0003      	movs	r3, r0
    9828:	60bb      	str	r3, [r7, #8]
    982a:	2300      	movs	r3, #0
    982c:	60fb      	str	r3, [r7, #12]
    982e:	68bb      	ldr	r3, [r7, #8]
    9830:	68fc      	ldr	r4, [r7, #12]
    9832:	0f9a      	lsrs	r2, r3, #30
    9834:	00a0      	lsls	r0, r4, #2
    9836:	61f8      	str	r0, [r7, #28]
    9838:	69f8      	ldr	r0, [r7, #28]
    983a:	4310      	orrs	r0, r2
    983c:	61f8      	str	r0, [r7, #28]
    983e:	009b      	lsls	r3, r3, #2
    9840:	61bb      	str	r3, [r7, #24]
    9842:	69bb      	ldr	r3, [r7, #24]
    9844:	69fc      	ldr	r4, [r7, #28]
    9846:	68b9      	ldr	r1, [r7, #8]
    9848:	68fa      	ldr	r2, [r7, #12]
    984a:	185b      	adds	r3, r3, r1
    984c:	4154      	adcs	r4, r2
    984e:	496a      	ldr	r1, [pc, #424]	; (99f8 <PR2_ISR+0x1f0>)
    9850:	2200      	movs	r2, #0
    9852:	185b      	adds	r3, r3, r1
    9854:	4154      	adcs	r4, r2
    9856:	0018      	movs	r0, r3
    9858:	0021      	movs	r1, r4
    985a:	4c68      	ldr	r4, [pc, #416]	; (99fc <PR2_ISR+0x1f4>)
    985c:	4a68      	ldr	r2, [pc, #416]	; (9a00 <PR2_ISR+0x1f8>)
    985e:	2300      	movs	r3, #0
    9860:	47a0      	blx	r4
    9862:	0003      	movs	r3, r0
    9864:	000c      	movs	r4, r1
    9866:	0018      	movs	r0, r3
    9868:	4b66      	ldr	r3, [pc, #408]	; (9a04 <PR2_ISR+0x1fc>)
    986a:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
    986c:	2323      	movs	r3, #35	; 0x23
    986e:	18fb      	adds	r3, r7, r3
    9870:	2200      	movs	r2, #0
    9872:	701a      	strb	r2, [r3, #0]
    9874:	2322      	movs	r3, #34	; 0x22
    9876:	18fb      	adds	r3, r7, r3
    9878:	2200      	movs	r2, #0
    987a:	701a      	strb	r2, [r3, #0]
    987c:	2321      	movs	r3, #33	; 0x21
    987e:	18fb      	adds	r3, r7, r3
    9880:	2200      	movs	r2, #0
    9882:	701a      	strb	r2, [r3, #0]
    9884:	2320      	movs	r3, #32
    9886:	18fb      	adds	r3, r7, r3
    9888:	2200      	movs	r2, #0
    988a:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
    988c:	202b      	movs	r0, #43	; 0x2b
    988e:	4b5e      	ldr	r3, [pc, #376]	; (9a08 <PR2_ISR+0x200>)
    9890:	4798      	blx	r3
    9892:	1e03      	subs	r3, r0, #0
    9894:	d100      	bne.n	9898 <PR2_ISR+0x90>
    9896:	e08e      	b.n	99b6 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    9898:	2300      	movs	r3, #0
    989a:	627b      	str	r3, [r7, #36]	; 0x24
    989c:	e085      	b.n	99aa <PR2_ISR+0x1a2>
			{
				delay_us(25);
    989e:	2000      	movs	r0, #0
    98a0:	4b54      	ldr	r3, [pc, #336]	; (99f4 <PR2_ISR+0x1ec>)
    98a2:	4798      	blx	r3
    98a4:	0003      	movs	r3, r0
    98a6:	603b      	str	r3, [r7, #0]
    98a8:	2300      	movs	r3, #0
    98aa:	607b      	str	r3, [r7, #4]
    98ac:	6838      	ldr	r0, [r7, #0]
    98ae:	6879      	ldr	r1, [r7, #4]
    98b0:	0003      	movs	r3, r0
    98b2:	000c      	movs	r4, r1
    98b4:	0f9a      	lsrs	r2, r3, #30
    98b6:	00a6      	lsls	r6, r4, #2
    98b8:	4316      	orrs	r6, r2
    98ba:	009d      	lsls	r5, r3, #2
    98bc:	0003      	movs	r3, r0
    98be:	000c      	movs	r4, r1
    98c0:	195b      	adds	r3, r3, r5
    98c2:	4174      	adcs	r4, r6
    98c4:	0f9a      	lsrs	r2, r3, #30
    98c6:	00a1      	lsls	r1, r4, #2
    98c8:	6179      	str	r1, [r7, #20]
    98ca:	6979      	ldr	r1, [r7, #20]
    98cc:	4311      	orrs	r1, r2
    98ce:	6179      	str	r1, [r7, #20]
    98d0:	009a      	lsls	r2, r3, #2
    98d2:	613a      	str	r2, [r7, #16]
    98d4:	6939      	ldr	r1, [r7, #16]
    98d6:	697a      	ldr	r2, [r7, #20]
    98d8:	185b      	adds	r3, r3, r1
    98da:	4154      	adcs	r4, r2
    98dc:	494b      	ldr	r1, [pc, #300]	; (9a0c <PR2_ISR+0x204>)
    98de:	2200      	movs	r2, #0
    98e0:	185b      	adds	r3, r3, r1
    98e2:	4154      	adcs	r4, r2
    98e4:	0018      	movs	r0, r3
    98e6:	0021      	movs	r1, r4
    98e8:	4c44      	ldr	r4, [pc, #272]	; (99fc <PR2_ISR+0x1f4>)
    98ea:	4a49      	ldr	r2, [pc, #292]	; (9a10 <PR2_ISR+0x208>)
    98ec:	2300      	movs	r3, #0
    98ee:	47a0      	blx	r4
    98f0:	0003      	movs	r3, r0
    98f2:	000c      	movs	r4, r1
    98f4:	0018      	movs	r0, r3
    98f6:	4b43      	ldr	r3, [pc, #268]	; (9a04 <PR2_ISR+0x1fc>)
    98f8:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
    98fa:	202a      	movs	r0, #42	; 0x2a
    98fc:	4b42      	ldr	r3, [pc, #264]	; (9a08 <PR2_ISR+0x200>)
    98fe:	4798      	blx	r3
    9900:	1e03      	subs	r3, r0, #0
    9902:	d014      	beq.n	992e <PR2_ISR+0x126>
    9904:	2323      	movs	r3, #35	; 0x23
    9906:	18fb      	adds	r3, r7, r3
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	b2db      	uxtb	r3, r3
    990c:	2b00      	cmp	r3, #0
    990e:	d10e      	bne.n	992e <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
    9910:	2323      	movs	r3, #35	; 0x23
    9912:	18fb      	adds	r3, r7, r3
    9914:	2201      	movs	r2, #1
    9916:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
    9918:	2322      	movs	r3, #34	; 0x22
    991a:	18fb      	adds	r3, r7, r3
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	b2db      	uxtb	r3, r3
    9920:	2b01      	cmp	r3, #1
    9922:	d104      	bne.n	992e <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
    9924:	2320      	movs	r3, #32
    9926:	18fb      	adds	r3, r7, r3
    9928:	2201      	movs	r2, #1
    992a:	701a      	strb	r2, [r3, #0]
						break;
    992c:	e043      	b.n	99b6 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
    992e:	202a      	movs	r0, #42	; 0x2a
    9930:	4b35      	ldr	r3, [pc, #212]	; (9a08 <PR2_ISR+0x200>)
    9932:	4798      	blx	r3
    9934:	0003      	movs	r3, r0
    9936:	001a      	movs	r2, r3
    9938:	2301      	movs	r3, #1
    993a:	4053      	eors	r3, r2
    993c:	b2db      	uxtb	r3, r3
    993e:	2b00      	cmp	r3, #0
    9940:	d013      	beq.n	996a <PR2_ISR+0x162>
    9942:	2322      	movs	r3, #34	; 0x22
    9944:	18fb      	adds	r3, r7, r3
    9946:	781b      	ldrb	r3, [r3, #0]
    9948:	b2db      	uxtb	r3, r3
    994a:	2b00      	cmp	r3, #0
    994c:	d10d      	bne.n	996a <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
    994e:	2322      	movs	r3, #34	; 0x22
    9950:	18fb      	adds	r3, r7, r3
    9952:	2201      	movs	r2, #1
    9954:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
    9956:	2323      	movs	r3, #35	; 0x23
    9958:	18fb      	adds	r3, r7, r3
    995a:	781b      	ldrb	r3, [r3, #0]
    995c:	b2db      	uxtb	r3, r3
    995e:	2b01      	cmp	r3, #1
    9960:	d103      	bne.n	996a <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
    9962:	2321      	movs	r3, #33	; 0x21
    9964:	18fb      	adds	r3, r7, r3
    9966:	2201      	movs	r2, #1
    9968:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
    996a:	2321      	movs	r3, #33	; 0x21
    996c:	18fb      	adds	r3, r7, r3
    996e:	781b      	ldrb	r3, [r3, #0]
    9970:	b2db      	uxtb	r3, r3
    9972:	2b01      	cmp	r3, #1
    9974:	d10c      	bne.n	9990 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
    9976:	4b27      	ldr	r3, [pc, #156]	; (9a14 <PR2_ISR+0x20c>)
    9978:	2202      	movs	r2, #2
    997a:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
    997c:	4b26      	ldr	r3, [pc, #152]	; (9a18 <PR2_ISR+0x210>)
    997e:	2202      	movs	r2, #2
    9980:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
    9982:	4b26      	ldr	r3, [pc, #152]	; (9a1c <PR2_ISR+0x214>)
    9984:	2200      	movs	r2, #0
    9986:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
    9988:	4b18      	ldr	r3, [pc, #96]	; (99ec <PR2_ISR+0x1e4>)
    998a:	2200      	movs	r2, #0
    998c:	701a      	strb	r2, [r3, #0]
					break;
    998e:	e012      	b.n	99b6 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
    9990:	202b      	movs	r0, #43	; 0x2b
    9992:	4b1d      	ldr	r3, [pc, #116]	; (9a08 <PR2_ISR+0x200>)
    9994:	4798      	blx	r3
    9996:	0003      	movs	r3, r0
    9998:	001a      	movs	r2, r3
    999a:	2301      	movs	r3, #1
    999c:	4053      	eors	r3, r2
    999e:	b2db      	uxtb	r3, r3
    99a0:	2b00      	cmp	r3, #0
    99a2:	d107      	bne.n	99b4 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    99a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    99a6:	3301      	adds	r3, #1
    99a8:	627b      	str	r3, [r7, #36]	; 0x24
    99aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    99ac:	2b77      	cmp	r3, #119	; 0x77
    99ae:	d800      	bhi.n	99b2 <PR2_ISR+0x1aa>
    99b0:	e775      	b.n	989e <PR2_ISR+0x96>
    99b2:	e000      	b.n	99b6 <PR2_ISR+0x1ae>
				{
					break;
    99b4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
    99b6:	4b19      	ldr	r3, [pc, #100]	; (9a1c <PR2_ISR+0x214>)
    99b8:	781b      	ldrb	r3, [r3, #0]
    99ba:	b2db      	uxtb	r3, r3
    99bc:	3301      	adds	r3, #1
    99be:	b2db      	uxtb	r3, r3
    99c0:	4a16      	ldr	r2, [pc, #88]	; (9a1c <PR2_ISR+0x214>)
    99c2:	1c19      	adds	r1, r3, #0
    99c4:	7011      	strb	r1, [r2, #0]
    99c6:	2b02      	cmp	r3, #2
    99c8:	d90b      	bls.n	99e2 <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
    99ca:	4b14      	ldr	r3, [pc, #80]	; (9a1c <PR2_ISR+0x214>)
    99cc:	2200      	movs	r2, #0
    99ce:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    99d0:	4b10      	ldr	r3, [pc, #64]	; (9a14 <PR2_ISR+0x20c>)
    99d2:	2201      	movs	r2, #1
    99d4:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    99d6:	4b10      	ldr	r3, [pc, #64]	; (9a18 <PR2_ISR+0x210>)
    99d8:	2201      	movs	r2, #1
    99da:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
    99dc:	4b03      	ldr	r3, [pc, #12]	; (99ec <PR2_ISR+0x1e4>)
    99de:	2200      	movs	r2, #0
    99e0:	701a      	strb	r2, [r3, #0]
		}
	}
}
    99e2:	46c0      	nop			; (mov r8, r8)
    99e4:	46bd      	mov	sp, r7
    99e6:	b00b      	add	sp, #44	; 0x2c
    99e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99ea:	46c0      	nop			; (mov r8, r8)
    99ec:	2000000c 	.word	0x2000000c
    99f0:	20000244 	.word	0x20000244
    99f4:	000138e5 	.word	0x000138e5
    99f8:	00001b57 	.word	0x00001b57
    99fc:	00015859 	.word	0x00015859
    9a00:	00001b58 	.word	0x00001b58
    9a04:	20000001 	.word	0x20000001
    9a08:	000088e1 	.word	0x000088e1
    9a0c:	006acfbf 	.word	0x006acfbf
    9a10:	006acfc0 	.word	0x006acfc0
    9a14:	20000720 	.word	0x20000720
    9a18:	20000240 	.word	0x20000240
    9a1c:	20000241 	.word	0x20000241

00009a20 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b084      	sub	sp, #16
    9a24:	af00      	add	r7, sp, #0
    9a26:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    9a28:	4b12      	ldr	r3, [pc, #72]	; (9a74 <vTask_10ms_Timer+0x54>)
    9a2a:	4798      	blx	r3
    9a2c:	0003      	movs	r3, r0
    9a2e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    9a30:	230c      	movs	r3, #12
    9a32:	18fb      	adds	r3, r7, r3
    9a34:	210a      	movs	r1, #10
    9a36:	0018      	movs	r0, r3
    9a38:	4b0f      	ldr	r3, [pc, #60]	; (9a78 <vTask_10ms_Timer+0x58>)
    9a3a:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
    9a3c:	4b0f      	ldr	r3, [pc, #60]	; (9a7c <vTask_10ms_Timer+0x5c>)
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	b2db      	uxtb	r3, r3
    9a42:	2b01      	cmp	r3, #1
    9a44:	d1f4      	bne.n	9a30 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
    9a46:	4b0e      	ldr	r3, [pc, #56]	; (9a80 <vTask_10ms_Timer+0x60>)
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	3301      	adds	r3, #1
    9a4c:	b2da      	uxtb	r2, r3
    9a4e:	4b0c      	ldr	r3, [pc, #48]	; (9a80 <vTask_10ms_Timer+0x60>)
    9a50:	701a      	strb	r2, [r3, #0]
    9a52:	4b0b      	ldr	r3, [pc, #44]	; (9a80 <vTask_10ms_Timer+0x60>)
    9a54:	781b      	ldrb	r3, [r3, #0]
    9a56:	2b13      	cmp	r3, #19
    9a58:	d9ea      	bls.n	9a30 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
    9a5a:	4b09      	ldr	r3, [pc, #36]	; (9a80 <vTask_10ms_Timer+0x60>)
    9a5c:	2200      	movs	r2, #0
    9a5e:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    9a60:	4b08      	ldr	r3, [pc, #32]	; (9a84 <vTask_10ms_Timer+0x64>)
    9a62:	2201      	movs	r2, #1
    9a64:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    9a66:	4b08      	ldr	r3, [pc, #32]	; (9a88 <vTask_10ms_Timer+0x68>)
    9a68:	2201      	movs	r2, #1
    9a6a:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
    9a6c:	4b03      	ldr	r3, [pc, #12]	; (9a7c <vTask_10ms_Timer+0x5c>)
    9a6e:	2200      	movs	r2, #0
    9a70:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    9a72:	e7dd      	b.n	9a30 <vTask_10ms_Timer+0x10>
    9a74:	0000f40d 	.word	0x0000f40d
    9a78:	0000efe1 	.word	0x0000efe1
    9a7c:	2000000c 	.word	0x2000000c
    9a80:	20000244 	.word	0x20000244
    9a84:	20000720 	.word	0x20000720
    9a88:	20000240 	.word	0x20000240

00009a8c <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
    9a8c:	b580      	push	{r7, lr}
    9a8e:	b084      	sub	sp, #16
    9a90:	af00      	add	r7, sp, #0
    9a92:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    9a94:	4b17      	ldr	r3, [pc, #92]	; (9af4 <vTask_100ms_Timer+0x68>)
    9a96:	4798      	blx	r3
    9a98:	0003      	movs	r3, r0
    9a9a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    9a9c:	230c      	movs	r3, #12
    9a9e:	18fb      	adds	r3, r7, r3
    9aa0:	2164      	movs	r1, #100	; 0x64
    9aa2:	0018      	movs	r0, r3
    9aa4:	4b14      	ldr	r3, [pc, #80]	; (9af8 <vTask_100ms_Timer+0x6c>)
    9aa6:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
    9aa8:	4b14      	ldr	r3, [pc, #80]	; (9afc <vTask_100ms_Timer+0x70>)
    9aaa:	781b      	ldrb	r3, [r3, #0]
    9aac:	b2db      	uxtb	r3, r3
    9aae:	1c5a      	adds	r2, r3, #1
    9ab0:	b2d1      	uxtb	r1, r2
    9ab2:	4a12      	ldr	r2, [pc, #72]	; (9afc <vTask_100ms_Timer+0x70>)
    9ab4:	7011      	strb	r1, [r2, #0]
    9ab6:	2b04      	cmp	r3, #4
    9ab8:	d905      	bls.n	9ac6 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
    9aba:	4b10      	ldr	r3, [pc, #64]	; (9afc <vTask_100ms_Timer+0x70>)
    9abc:	2200      	movs	r2, #0
    9abe:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
    9ac0:	4b0f      	ldr	r3, [pc, #60]	; (9b00 <vTask_100ms_Timer+0x74>)
    9ac2:	2201      	movs	r2, #1
    9ac4:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
    9ac6:	4b0f      	ldr	r3, [pc, #60]	; (9b04 <vTask_100ms_Timer+0x78>)
    9ac8:	781b      	ldrb	r3, [r3, #0]
    9aca:	b2db      	uxtb	r3, r3
    9acc:	1c5a      	adds	r2, r3, #1
    9ace:	b2d1      	uxtb	r1, r2
    9ad0:	4a0c      	ldr	r2, [pc, #48]	; (9b04 <vTask_100ms_Timer+0x78>)
    9ad2:	7011      	strb	r1, [r2, #0]
    9ad4:	2b04      	cmp	r3, #4
    9ad6:	d9e1      	bls.n	9a9c <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
    9ad8:	4b0a      	ldr	r3, [pc, #40]	; (9b04 <vTask_100ms_Timer+0x78>)
    9ada:	2200      	movs	r2, #0
    9adc:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
    9ade:	4b0a      	ldr	r3, [pc, #40]	; (9b08 <vTask_100ms_Timer+0x7c>)
    9ae0:	2201      	movs	r2, #1
    9ae2:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
    9ae4:	4b09      	ldr	r3, [pc, #36]	; (9b0c <vTask_100ms_Timer+0x80>)
    9ae6:	2200      	movs	r2, #0
    9ae8:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
    9aea:	200b      	movs	r0, #11
    9aec:	4b08      	ldr	r3, [pc, #32]	; (9b10 <vTask_100ms_Timer+0x84>)
    9aee:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    9af0:	e7d4      	b.n	9a9c <vTask_100ms_Timer+0x10>
    9af2:	46c0      	nop			; (mov r8, r8)
    9af4:	0000f40d 	.word	0x0000f40d
    9af8:	0000efe1 	.word	0x0000efe1
    9afc:	2000000d 	.word	0x2000000d
    9b00:	20000243 	.word	0x20000243
    9b04:	20000242 	.word	0x20000242
    9b08:	2000000c 	.word	0x2000000c
    9b0c:	20000244 	.word	0x20000244
    9b10:	000089c5 	.word	0x000089c5

00009b14 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
    9b14:	b580      	push	{r7, lr}
    9b16:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
    9b18:	4b04      	ldr	r3, [pc, #16]	; (9b2c <should_Detect_New_Voltage+0x18>)
    9b1a:	781b      	ldrb	r3, [r3, #0]
    9b1c:	b2db      	uxtb	r3, r3
    9b1e:	425a      	negs	r2, r3
    9b20:	4153      	adcs	r3, r2
    9b22:	b2db      	uxtb	r3, r3
}
    9b24:	0018      	movs	r0, r3
    9b26:	46bd      	mov	sp, r7
    9b28:	bd80      	pop	{r7, pc}
    9b2a:	46c0      	nop			; (mov r8, r8)
    9b2c:	2000000d 	.word	0x2000000d

00009b30 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
    9b30:	b590      	push	{r4, r7, lr}
    9b32:	b083      	sub	sp, #12
    9b34:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9b36:	4b25      	ldr	r3, [pc, #148]	; (9bcc <detect_battery_voltage_and_percentage+0x9c>)
    9b38:	681a      	ldr	r2, [r3, #0]
    9b3a:	2301      	movs	r3, #1
    9b3c:	425b      	negs	r3, r3
    9b3e:	0019      	movs	r1, r3
    9b40:	0010      	movs	r0, r2
    9b42:	4b23      	ldr	r3, [pc, #140]	; (9bd0 <detect_battery_voltage_and_percentage+0xa0>)
    9b44:	4798      	blx	r3
    9b46:	0003      	movs	r3, r0
    9b48:	2b01      	cmp	r3, #1
    9b4a:	d13b      	bne.n	9bc4 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
    9b4c:	21c8      	movs	r1, #200	; 0xc8
    9b4e:	2007      	movs	r0, #7
    9b50:	4b20      	ldr	r3, [pc, #128]	; (9bd4 <detect_battery_voltage_and_percentage+0xa4>)
    9b52:	4798      	blx	r3
    9b54:	0003      	movs	r3, r0
    9b56:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
    9b58:	683b      	ldr	r3, [r7, #0]
    9b5a:	4a1f      	ldr	r2, [pc, #124]	; (9bd8 <detect_battery_voltage_and_percentage+0xa8>)
    9b5c:	435a      	muls	r2, r3
    9b5e:	0010      	movs	r0, r2
    9b60:	4b1e      	ldr	r3, [pc, #120]	; (9bdc <detect_battery_voltage_and_percentage+0xac>)
    9b62:	22fa      	movs	r2, #250	; 0xfa
    9b64:	0091      	lsls	r1, r2, #2
    9b66:	4798      	blx	r3
    9b68:	0003      	movs	r3, r0
    9b6a:	001a      	movs	r2, r3
    9b6c:	4b1c      	ldr	r3, [pc, #112]	; (9be0 <detect_battery_voltage_and_percentage+0xb0>)
    9b6e:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
    9b70:	1dfb      	adds	r3, r7, #7
    9b72:	2200      	movs	r2, #0
    9b74:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    9b76:	4b1a      	ldr	r3, [pc, #104]	; (9be0 <detect_battery_voltage_and_percentage+0xb0>)
    9b78:	699b      	ldr	r3, [r3, #24]
    9b7a:	4a1a      	ldr	r2, [pc, #104]	; (9be4 <detect_battery_voltage_and_percentage+0xb4>)
    9b7c:	4293      	cmp	r3, r2
    9b7e:	d803      	bhi.n	9b88 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
    9b80:	1dfb      	adds	r3, r7, #7
    9b82:	2200      	movs	r2, #0
    9b84:	701a      	strb	r2, [r3, #0]
    9b86:	e012      	b.n	9bae <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
    9b88:	4b15      	ldr	r3, [pc, #84]	; (9be0 <detect_battery_voltage_and_percentage+0xb0>)
    9b8a:	699b      	ldr	r3, [r3, #24]
    9b8c:	4a16      	ldr	r2, [pc, #88]	; (9be8 <detect_battery_voltage_and_percentage+0xb8>)
    9b8e:	189a      	adds	r2, r3, r2
    9b90:	4b12      	ldr	r3, [pc, #72]	; (9bdc <detect_battery_voltage_and_percentage+0xac>)
    9b92:	2109      	movs	r1, #9
    9b94:	0010      	movs	r0, r2
    9b96:	4798      	blx	r3
    9b98:	0003      	movs	r3, r0
    9b9a:	001a      	movs	r2, r3
    9b9c:	1dfb      	adds	r3, r7, #7
    9b9e:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
    9ba0:	1dfb      	adds	r3, r7, #7
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	2b64      	cmp	r3, #100	; 0x64
    9ba6:	d902      	bls.n	9bae <detect_battery_voltage_and_percentage+0x7e>
    9ba8:	1dfb      	adds	r3, r7, #7
    9baa:	2264      	movs	r2, #100	; 0x64
    9bac:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
    9bae:	4b0c      	ldr	r3, [pc, #48]	; (9be0 <detect_battery_voltage_and_percentage+0xb0>)
    9bb0:	1dfa      	adds	r2, r7, #7
    9bb2:	7812      	ldrb	r2, [r2, #0]
    9bb4:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
    9bb6:	4b05      	ldr	r3, [pc, #20]	; (9bcc <detect_battery_voltage_and_percentage+0x9c>)
    9bb8:	6818      	ldr	r0, [r3, #0]
    9bba:	2300      	movs	r3, #0
    9bbc:	2200      	movs	r2, #0
    9bbe:	2100      	movs	r1, #0
    9bc0:	4c0a      	ldr	r4, [pc, #40]	; (9bec <detect_battery_voltage_and_percentage+0xbc>)
    9bc2:	47a0      	blx	r4
	}
}
    9bc4:	46c0      	nop			; (mov r8, r8)
    9bc6:	46bd      	mov	sp, r7
    9bc8:	b003      	add	sp, #12
    9bca:	bd90      	pop	{r4, r7, pc}
    9bcc:	2000023c 	.word	0x2000023c
    9bd0:	0000e7a1 	.word	0x0000e7a1
    9bd4:	000093d9 	.word	0x000093d9
    9bd8:	000005b1 	.word	0x000005b1
    9bdc:	000154f1 	.word	0x000154f1
    9be0:	200006dc 	.word	0x200006dc
    9be4:	00000ce4 	.word	0x00000ce4
    9be8:	fffff31c 	.word	0xfffff31c
    9bec:	0000e301 	.word	0x0000e301

00009bf0 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
    9bf0:	b590      	push	{r4, r7, lr}
    9bf2:	b085      	sub	sp, #20
    9bf4:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9bf6:	4b3d      	ldr	r3, [pc, #244]	; (9cec <detect_Three_Phase_Voltage+0xfc>)
    9bf8:	681a      	ldr	r2, [r3, #0]
    9bfa:	2301      	movs	r3, #1
    9bfc:	425b      	negs	r3, r3
    9bfe:	0019      	movs	r1, r3
    9c00:	0010      	movs	r0, r2
    9c02:	4b3b      	ldr	r3, [pc, #236]	; (9cf0 <detect_Three_Phase_Voltage+0x100>)
    9c04:	4798      	blx	r3
    9c06:	0003      	movs	r3, r0
    9c08:	2b01      	cmp	r3, #1
    9c0a:	d16b      	bne.n	9ce4 <detect_Three_Phase_Voltage+0xf4>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
    9c0c:	2013      	movs	r0, #19
    9c0e:	4b39      	ldr	r3, [pc, #228]	; (9cf4 <detect_Three_Phase_Voltage+0x104>)
    9c10:	4798      	blx	r3
    9c12:	0003      	movs	r3, r0
    9c14:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
    9c16:	68fb      	ldr	r3, [r7, #12]
    9c18:	3b0a      	subs	r3, #10
    9c1a:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
    9c1c:	68fb      	ldr	r3, [r7, #12]
    9c1e:	2b00      	cmp	r3, #0
    9c20:	da02      	bge.n	9c28 <detect_Three_Phase_Voltage+0x38>
		{
			adcRY = 0;
    9c22:	2300      	movs	r3, #0
    9c24:	60fb      	str	r3, [r7, #12]
    9c26:	e00f      	b.n	9c48 <detect_Three_Phase_Voltage+0x58>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
    9c28:	68fb      	ldr	r3, [r7, #12]
    9c2a:	3b0a      	subs	r3, #10
    9c2c:	4a32      	ldr	r2, [pc, #200]	; (9cf8 <detect_Three_Phase_Voltage+0x108>)
    9c2e:	435a      	muls	r2, r3
    9c30:	0010      	movs	r0, r2
    9c32:	4b32      	ldr	r3, [pc, #200]	; (9cfc <detect_Three_Phase_Voltage+0x10c>)
    9c34:	22fa      	movs	r2, #250	; 0xfa
    9c36:	0091      	lsls	r1, r2, #2
    9c38:	4798      	blx	r3
    9c3a:	0003      	movs	r3, r0
    9c3c:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
    9c3e:	68fb      	ldr	r3, [r7, #12]
    9c40:	2b00      	cmp	r3, #0
    9c42:	da01      	bge.n	9c48 <detect_Three_Phase_Voltage+0x58>
			{
				adcRY = 0;
    9c44:	2300      	movs	r3, #0
    9c46:	60fb      	str	r3, [r7, #12]
			}
		}
		
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
    9c48:	2012      	movs	r0, #18
    9c4a:	4b2a      	ldr	r3, [pc, #168]	; (9cf4 <detect_Three_Phase_Voltage+0x104>)
    9c4c:	4798      	blx	r3
    9c4e:	0003      	movs	r3, r0
    9c50:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
    9c52:	68bb      	ldr	r3, [r7, #8]
    9c54:	3b0a      	subs	r3, #10
    9c56:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
    9c58:	68bb      	ldr	r3, [r7, #8]
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	da02      	bge.n	9c64 <detect_Three_Phase_Voltage+0x74>
		{
			adcYB = 0;
    9c5e:	2300      	movs	r3, #0
    9c60:	60bb      	str	r3, [r7, #8]
    9c62:	e00f      	b.n	9c84 <detect_Three_Phase_Voltage+0x94>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
    9c64:	68bb      	ldr	r3, [r7, #8]
    9c66:	3b0a      	subs	r3, #10
    9c68:	4a23      	ldr	r2, [pc, #140]	; (9cf8 <detect_Three_Phase_Voltage+0x108>)
    9c6a:	435a      	muls	r2, r3
    9c6c:	0010      	movs	r0, r2
    9c6e:	4b23      	ldr	r3, [pc, #140]	; (9cfc <detect_Three_Phase_Voltage+0x10c>)
    9c70:	22fa      	movs	r2, #250	; 0xfa
    9c72:	0091      	lsls	r1, r2, #2
    9c74:	4798      	blx	r3
    9c76:	0003      	movs	r3, r0
    9c78:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
    9c7a:	68bb      	ldr	r3, [r7, #8]
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	da01      	bge.n	9c84 <detect_Three_Phase_Voltage+0x94>
			{
				adcYB = 0;
    9c80:	2300      	movs	r3, #0
    9c82:	60bb      	str	r3, [r7, #8]
			}
		}
		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
    9c84:	2011      	movs	r0, #17
    9c86:	4b1b      	ldr	r3, [pc, #108]	; (9cf4 <detect_Three_Phase_Voltage+0x104>)
    9c88:	4798      	blx	r3
    9c8a:	0003      	movs	r3, r0
    9c8c:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
    9c8e:	687b      	ldr	r3, [r7, #4]
    9c90:	3b0c      	subs	r3, #12
    9c92:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
    9c94:	687b      	ldr	r3, [r7, #4]
    9c96:	2b00      	cmp	r3, #0
    9c98:	da02      	bge.n	9ca0 <detect_Three_Phase_Voltage+0xb0>
		{
			adcBR = 0;
    9c9a:	2300      	movs	r3, #0
    9c9c:	607b      	str	r3, [r7, #4]
    9c9e:	e00f      	b.n	9cc0 <detect_Three_Phase_Voltage+0xd0>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
    9ca0:	687b      	ldr	r3, [r7, #4]
    9ca2:	3b0c      	subs	r3, #12
    9ca4:	4a16      	ldr	r2, [pc, #88]	; (9d00 <detect_Three_Phase_Voltage+0x110>)
    9ca6:	435a      	muls	r2, r3
    9ca8:	0010      	movs	r0, r2
    9caa:	4b14      	ldr	r3, [pc, #80]	; (9cfc <detect_Three_Phase_Voltage+0x10c>)
    9cac:	22fa      	movs	r2, #250	; 0xfa
    9cae:	0091      	lsls	r1, r2, #2
    9cb0:	4798      	blx	r3
    9cb2:	0003      	movs	r3, r0
    9cb4:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	da01      	bge.n	9cc0 <detect_Three_Phase_Voltage+0xd0>
			{
				adcBR = 0;
    9cbc:	2300      	movs	r3, #0
    9cbe:	607b      	str	r3, [r7, #4]
			}
		}
		
		
		Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
    9cc0:	68fa      	ldr	r2, [r7, #12]
    9cc2:	4b10      	ldr	r3, [pc, #64]	; (9d04 <detect_Three_Phase_Voltage+0x114>)
    9cc4:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
    9cc6:	68ba      	ldr	r2, [r7, #8]
    9cc8:	4b0e      	ldr	r3, [pc, #56]	; (9d04 <detect_Three_Phase_Voltage+0x114>)
    9cca:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
    9ccc:	687a      	ldr	r2, [r7, #4]
    9cce:	4b0d      	ldr	r3, [pc, #52]	; (9d04 <detect_Three_Phase_Voltage+0x114>)
    9cd0:	609a      	str	r2, [r3, #8]
		
		set_Three_Phase_State_From_Voltage();
    9cd2:	4b0d      	ldr	r3, [pc, #52]	; (9d08 <detect_Three_Phase_Voltage+0x118>)
    9cd4:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
    9cd6:	4b05      	ldr	r3, [pc, #20]	; (9cec <detect_Three_Phase_Voltage+0xfc>)
    9cd8:	6818      	ldr	r0, [r3, #0]
    9cda:	2300      	movs	r3, #0
    9cdc:	2200      	movs	r2, #0
    9cde:	2100      	movs	r1, #0
    9ce0:	4c0a      	ldr	r4, [pc, #40]	; (9d0c <detect_Three_Phase_Voltage+0x11c>)
    9ce2:	47a0      	blx	r4
	}
}
    9ce4:	46c0      	nop			; (mov r8, r8)
    9ce6:	46bd      	mov	sp, r7
    9ce8:	b005      	add	sp, #20
    9cea:	bd90      	pop	{r4, r7, pc}
    9cec:	2000023c 	.word	0x2000023c
    9cf0:	0000e7a1 	.word	0x0000e7a1
    9cf4:	00009495 	.word	0x00009495
    9cf8:	0000028f 	.word	0x0000028f
    9cfc:	00015605 	.word	0x00015605
    9d00:	0000029e 	.word	0x0000029e
    9d04:	200006dc 	.word	0x200006dc
    9d08:	00009d11 	.word	0x00009d11
    9d0c:	0000e301 	.word	0x0000e301

00009d10 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
    9d10:	b580      	push	{r7, lr}
    9d12:	b082      	sub	sp, #8
    9d14:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    9d16:	1dfb      	adds	r3, r7, #7
    9d18:	4a2a      	ldr	r2, [pc, #168]	; (9dc4 <set_Three_Phase_State_From_Voltage+0xb4>)
    9d1a:	7852      	ldrb	r2, [r2, #1]
    9d1c:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9d1e:	4b2a      	ldr	r3, [pc, #168]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d20:	681b      	ldr	r3, [r3, #0]
    9d22:	2b27      	cmp	r3, #39	; 0x27
    9d24:	d80b      	bhi.n	9d3e <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9d26:	4b28      	ldr	r3, [pc, #160]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d28:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9d2a:	2b27      	cmp	r3, #39	; 0x27
    9d2c:	d807      	bhi.n	9d3e <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
    9d2e:	4b26      	ldr	r3, [pc, #152]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d30:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9d32:	2b27      	cmp	r3, #39	; 0x27
    9d34:	d803      	bhi.n	9d3e <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
    9d36:	4b23      	ldr	r3, [pc, #140]	; (9dc4 <set_Three_Phase_State_From_Voltage+0xb4>)
    9d38:	2200      	movs	r2, #0
    9d3a:	705a      	strb	r2, [r3, #1]
    9d3c:	e02a      	b.n	9d94 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9d3e:	4b22      	ldr	r3, [pc, #136]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d40:	681a      	ldr	r2, [r3, #0]
    9d42:	4b21      	ldr	r3, [pc, #132]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d44:	685b      	ldr	r3, [r3, #4]
    9d46:	1ad3      	subs	r3, r2, r3
    9d48:	17da      	asrs	r2, r3, #31
    9d4a:	189b      	adds	r3, r3, r2
    9d4c:	4053      	eors	r3, r2
    9d4e:	4a1f      	ldr	r2, [pc, #124]	; (9dcc <set_Three_Phase_State_From_Voltage+0xbc>)
    9d50:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9d52:	4293      	cmp	r3, r2
    9d54:	dc17      	bgt.n	9d86 <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9d56:	4b1c      	ldr	r3, [pc, #112]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d58:	685a      	ldr	r2, [r3, #4]
    9d5a:	4b1b      	ldr	r3, [pc, #108]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d5c:	689b      	ldr	r3, [r3, #8]
    9d5e:	1ad3      	subs	r3, r2, r3
    9d60:	17da      	asrs	r2, r3, #31
    9d62:	189b      	adds	r3, r3, r2
    9d64:	4053      	eors	r3, r2
    9d66:	4a19      	ldr	r2, [pc, #100]	; (9dcc <set_Three_Phase_State_From_Voltage+0xbc>)
    9d68:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9d6a:	4293      	cmp	r3, r2
    9d6c:	dc0b      	bgt.n	9d86 <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
    9d6e:	4b16      	ldr	r3, [pc, #88]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d70:	689a      	ldr	r2, [r3, #8]
    9d72:	4b15      	ldr	r3, [pc, #84]	; (9dc8 <set_Three_Phase_State_From_Voltage+0xb8>)
    9d74:	681b      	ldr	r3, [r3, #0]
    9d76:	1ad3      	subs	r3, r2, r3
    9d78:	17da      	asrs	r2, r3, #31
    9d7a:	189b      	adds	r3, r3, r2
    9d7c:	4053      	eors	r3, r2
    9d7e:	4a13      	ldr	r2, [pc, #76]	; (9dcc <set_Three_Phase_State_From_Voltage+0xbc>)
    9d80:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9d82:	4293      	cmp	r3, r2
    9d84:	dd03      	ble.n	9d8e <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
    9d86:	4b0f      	ldr	r3, [pc, #60]	; (9dc4 <set_Three_Phase_State_From_Voltage+0xb4>)
    9d88:	2202      	movs	r2, #2
    9d8a:	705a      	strb	r2, [r3, #1]
    9d8c:	e002      	b.n	9d94 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
    9d8e:	4b0d      	ldr	r3, [pc, #52]	; (9dc4 <set_Three_Phase_State_From_Voltage+0xb4>)
    9d90:	2203      	movs	r2, #3
    9d92:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
    9d94:	4b0b      	ldr	r3, [pc, #44]	; (9dc4 <set_Three_Phase_State_From_Voltage+0xb4>)
    9d96:	785b      	ldrb	r3, [r3, #1]
    9d98:	b2da      	uxtb	r2, r3
    9d9a:	4b0d      	ldr	r3, [pc, #52]	; (9dd0 <set_Three_Phase_State_From_Voltage+0xc0>)
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	b2db      	uxtb	r3, r3
    9da0:	429a      	cmp	r2, r3
    9da2:	d00b      	beq.n	9dbc <set_Three_Phase_State_From_Voltage+0xac>
	{
		last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
    9da4:	4b0b      	ldr	r3, [pc, #44]	; (9dd4 <set_Three_Phase_State_From_Voltage+0xc4>)
    9da6:	1dfa      	adds	r2, r7, #7
    9da8:	7812      	ldrb	r2, [r2, #0]
    9daa:	701a      	strb	r2, [r3, #0]
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
    9dac:	4b05      	ldr	r3, [pc, #20]	; (9dc4 <set_Three_Phase_State_From_Voltage+0xb4>)
    9dae:	785b      	ldrb	r3, [r3, #1]
    9db0:	b2da      	uxtb	r2, r3
    9db2:	4b07      	ldr	r3, [pc, #28]	; (9dd0 <set_Three_Phase_State_From_Voltage+0xc0>)
    9db4:	701a      	strb	r2, [r3, #0]
		eventOccured = true;
    9db6:	4b08      	ldr	r3, [pc, #32]	; (9dd8 <set_Three_Phase_State_From_Voltage+0xc8>)
    9db8:	2201      	movs	r2, #1
    9dba:	701a      	strb	r2, [r3, #0]
	}
}
    9dbc:	46c0      	nop			; (mov r8, r8)
    9dbe:	46bd      	mov	sp, r7
    9dc0:	b002      	add	sp, #8
    9dc2:	bd80      	pop	{r7, pc}
    9dc4:	20000720 	.word	0x20000720
    9dc8:	200006dc 	.word	0x200006dc
    9dcc:	2000065c 	.word	0x2000065c
    9dd0:	200007fc 	.word	0x200007fc
    9dd4:	20000713 	.word	0x20000713
    9dd8:	20000717 	.word	0x20000717

00009ddc <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
    9ddc:	b590      	push	{r4, r7, lr}
    9dde:	b083      	sub	sp, #12
    9de0:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9de2:	4b32      	ldr	r3, [pc, #200]	; (9eac <detect_Motor_Current+0xd0>)
    9de4:	681a      	ldr	r2, [r3, #0]
    9de6:	2301      	movs	r3, #1
    9de8:	425b      	negs	r3, r3
    9dea:	0019      	movs	r1, r3
    9dec:	0010      	movs	r0, r2
    9dee:	4b30      	ldr	r3, [pc, #192]	; (9eb0 <detect_Motor_Current+0xd4>)
    9df0:	4798      	blx	r3
    9df2:	0003      	movs	r3, r0
    9df4:	2b01      	cmp	r3, #1
    9df6:	d155      	bne.n	9ea4 <detect_Motor_Current+0xc8>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
    9df8:	21c8      	movs	r1, #200	; 0xc8
    9dfa:	2010      	movs	r0, #16
    9dfc:	4b2d      	ldr	r3, [pc, #180]	; (9eb4 <detect_Motor_Current+0xd8>)
    9dfe:	4798      	blx	r3
    9e00:	0003      	movs	r3, r0
    9e02:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
    9e04:	687b      	ldr	r3, [r7, #4]
    9e06:	2b0f      	cmp	r3, #15
    9e08:	d906      	bls.n	9e18 <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	3b0f      	subs	r3, #15
    9e0e:	17da      	asrs	r2, r3, #31
    9e10:	189b      	adds	r3, r3, r2
    9e12:	4053      	eors	r3, r2
    9e14:	607b      	str	r3, [r7, #4]
    9e16:	e004      	b.n	9e22 <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
    9e18:	687b      	ldr	r3, [r7, #4]
    9e1a:	2b0f      	cmp	r3, #15
    9e1c:	d801      	bhi.n	9e22 <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
    9e1e:	2300      	movs	r3, #0
    9e20:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
    9e22:	4b22      	ldr	r3, [pc, #136]	; (9eac <detect_Motor_Current+0xd0>)
    9e24:	6818      	ldr	r0, [r3, #0]
    9e26:	2300      	movs	r3, #0
    9e28:	2200      	movs	r2, #0
    9e2a:	2100      	movs	r1, #0
    9e2c:	4c22      	ldr	r4, [pc, #136]	; (9eb8 <detect_Motor_Current+0xdc>)
    9e2e:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
    9e30:	4b22      	ldr	r3, [pc, #136]	; (9ebc <detect_Motor_Current+0xe0>)
    9e32:	687a      	ldr	r2, [r7, #4]
    9e34:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	4a21      	ldr	r2, [pc, #132]	; (9ec0 <detect_Motor_Current+0xe4>)
    9e3a:	435a      	muls	r2, r3
    9e3c:	0010      	movs	r0, r2
    9e3e:	4b21      	ldr	r3, [pc, #132]	; (9ec4 <detect_Motor_Current+0xe8>)
    9e40:	22fa      	movs	r2, #250	; 0xfa
    9e42:	0091      	lsls	r1, r2, #2
    9e44:	4798      	blx	r3
    9e46:	0003      	movs	r3, r0
    9e48:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
    9e4a:	687b      	ldr	r3, [r7, #4]
    9e4c:	4a1e      	ldr	r2, [pc, #120]	; (9ec8 <detect_Motor_Current+0xec>)
    9e4e:	4293      	cmp	r3, r2
    9e50:	d810      	bhi.n	9e74 <detect_Motor_Current+0x98>
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	2b00      	cmp	r3, #0
    9e56:	d00d      	beq.n	9e74 <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
    9e58:	687b      	ldr	r3, [r7, #4]
    9e5a:	4a1c      	ldr	r2, [pc, #112]	; (9ecc <detect_Motor_Current+0xf0>)
    9e5c:	4353      	muls	r3, r2
    9e5e:	4a1c      	ldr	r2, [pc, #112]	; (9ed0 <detect_Motor_Current+0xf4>)
    9e60:	1898      	adds	r0, r3, r2
    9e62:	4b18      	ldr	r3, [pc, #96]	; (9ec4 <detect_Motor_Current+0xe8>)
    9e64:	22fa      	movs	r2, #250	; 0xfa
    9e66:	0091      	lsls	r1, r2, #2
    9e68:	4798      	blx	r3
    9e6a:	0003      	movs	r3, r0
    9e6c:	001a      	movs	r2, r3
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	189b      	adds	r3, r3, r2
    9e72:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
    9e74:	4b11      	ldr	r3, [pc, #68]	; (9ebc <detect_Motor_Current+0xe0>)
    9e76:	687a      	ldr	r2, [r7, #4]
    9e78:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
    9e7a:	687a      	ldr	r2, [r7, #4]
    9e7c:	4b11      	ldr	r3, [pc, #68]	; (9ec4 <detect_Motor_Current+0xe8>)
    9e7e:	2164      	movs	r1, #100	; 0x64
    9e80:	0010      	movs	r0, r2
    9e82:	4798      	blx	r3
    9e84:	0003      	movs	r3, r0
    9e86:	b29a      	uxth	r2, r3
    9e88:	4b0c      	ldr	r3, [pc, #48]	; (9ebc <detect_Motor_Current+0xe0>)
    9e8a:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
    9e8c:	687a      	ldr	r2, [r7, #4]
    9e8e:	4b11      	ldr	r3, [pc, #68]	; (9ed4 <detect_Motor_Current+0xf8>)
    9e90:	2164      	movs	r1, #100	; 0x64
    9e92:	0010      	movs	r0, r2
    9e94:	4798      	blx	r3
    9e96:	000b      	movs	r3, r1
    9e98:	b29a      	uxth	r2, r3
    9e9a:	4b08      	ldr	r3, [pc, #32]	; (9ebc <detect_Motor_Current+0xe0>)
    9e9c:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
    9e9e:	4b0e      	ldr	r3, [pc, #56]	; (9ed8 <detect_Motor_Current+0xfc>)
    9ea0:	2200      	movs	r2, #0
    9ea2:	701a      	strb	r2, [r3, #0]
	}
}
    9ea4:	46c0      	nop			; (mov r8, r8)
    9ea6:	46bd      	mov	sp, r7
    9ea8:	b003      	add	sp, #12
    9eaa:	bd90      	pop	{r4, r7, pc}
    9eac:	2000023c 	.word	0x2000023c
    9eb0:	0000e7a1 	.word	0x0000e7a1
    9eb4:	000093d9 	.word	0x000093d9
    9eb8:	0000e301 	.word	0x0000e301
    9ebc:	200006dc 	.word	0x200006dc
    9ec0:	00000d61 	.word	0x00000d61
    9ec4:	000154f1 	.word	0x000154f1
    9ec8:	000004af 	.word	0x000004af
    9ecc:	fffffef0 	.word	0xfffffef0
    9ed0:	0004fb00 	.word	0x0004fb00
    9ed4:	000155fd 	.word	0x000155fd
    9ed8:	20000243 	.word	0x20000243

00009edc <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
    9edc:	b580      	push	{r7, lr}
    9ede:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
    9ee0:	4b04      	ldr	r3, [pc, #16]	; (9ef4 <should_Detect_New_Current+0x18>)
    9ee2:	781b      	ldrb	r3, [r3, #0]
    9ee4:	b2db      	uxtb	r3, r3
    9ee6:	3b01      	subs	r3, #1
    9ee8:	425a      	negs	r2, r3
    9eea:	4153      	adcs	r3, r2
    9eec:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
    9eee:	0018      	movs	r0, r3
    9ef0:	46bd      	mov	sp, r7
    9ef2:	bd80      	pop	{r7, pc}
    9ef4:	20000243 	.word	0x20000243

00009ef8 <getACPowerState>:


bool getACPowerState(void)
{
    9ef8:	b580      	push	{r7, lr}
    9efa:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
    9efc:	4b02      	ldr	r3, [pc, #8]	; (9f08 <getACPowerState+0x10>)
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	b2db      	uxtb	r3, r3
}
    9f02:	0018      	movs	r0, r3
    9f04:	46bd      	mov	sp, r7
    9f06:	bd80      	pop	{r7, pc}
    9f08:	2000078a 	.word	0x2000078a

00009f0c <setACPowerState>:

void setACPowerState(bool state)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b082      	sub	sp, #8
    9f10:	af00      	add	r7, sp, #0
    9f12:	0002      	movs	r2, r0
    9f14:	1dfb      	adds	r3, r7, #7
    9f16:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
    9f18:	4b03      	ldr	r3, [pc, #12]	; (9f28 <setACPowerState+0x1c>)
    9f1a:	1dfa      	adds	r2, r7, #7
    9f1c:	7812      	ldrb	r2, [r2, #0]
    9f1e:	701a      	strb	r2, [r3, #0]
}
    9f20:	46c0      	nop			; (mov r8, r8)
    9f22:	46bd      	mov	sp, r7
    9f24:	b002      	add	sp, #8
    9f26:	bd80      	pop	{r7, pc}
    9f28:	2000078a 	.word	0x2000078a

00009f2c <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
    9f2c:	b580      	push	{r7, lr}
    9f2e:	af00      	add	r7, sp, #0
	return allPhase;
    9f30:	4b02      	ldr	r3, [pc, #8]	; (9f3c <getAllPhaseState+0x10>)
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
    9f36:	0018      	movs	r0, r3
    9f38:	46bd      	mov	sp, r7
    9f3a:	bd80      	pop	{r7, pc}
    9f3c:	20000739 	.word	0x20000739

00009f40 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
    9f40:	b580      	push	{r7, lr}
    9f42:	b082      	sub	sp, #8
    9f44:	af00      	add	r7, sp, #0
    9f46:	0002      	movs	r2, r0
    9f48:	1dfb      	adds	r3, r7, #7
    9f4a:	701a      	strb	r2, [r3, #0]
	allPhase = state;
    9f4c:	4b03      	ldr	r3, [pc, #12]	; (9f5c <setAllPhaseState+0x1c>)
    9f4e:	1dfa      	adds	r2, r7, #7
    9f50:	7812      	ldrb	r2, [r2, #0]
    9f52:	701a      	strb	r2, [r3, #0]
}
    9f54:	46c0      	nop			; (mov r8, r8)
    9f56:	46bd      	mov	sp, r7
    9f58:	b002      	add	sp, #8
    9f5a:	bd80      	pop	{r7, pc}
    9f5c:	20000739 	.word	0x20000739

00009f60 <getPhaseSequence>:

bool getPhaseSequence()
{
    9f60:	b580      	push	{r7, lr}
    9f62:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
    9f64:	4b02      	ldr	r3, [pc, #8]	; (9f70 <getPhaseSequence+0x10>)
    9f66:	781b      	ldrb	r3, [r3, #0]
    9f68:	b2db      	uxtb	r3, r3
}
    9f6a:	0018      	movs	r0, r3
    9f6c:	46bd      	mov	sp, r7
    9f6e:	bd80      	pop	{r7, pc}
    9f70:	2000074b 	.word	0x2000074b

00009f74 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
    9f74:	b580      	push	{r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
    9f7a:	0002      	movs	r2, r0
    9f7c:	1dfb      	adds	r3, r7, #7
    9f7e:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
    9f80:	4b03      	ldr	r3, [pc, #12]	; (9f90 <setPhaseSequence+0x1c>)
    9f82:	1dfa      	adds	r2, r7, #7
    9f84:	7812      	ldrb	r2, [r2, #0]
    9f86:	701a      	strb	r2, [r3, #0]
}
    9f88:	46c0      	nop			; (mov r8, r8)
    9f8a:	46bd      	mov	sp, r7
    9f8c:	b002      	add	sp, #8
    9f8e:	bd80      	pop	{r7, pc}
    9f90:	2000074b 	.word	0x2000074b

00009f94 <getMotorState>:


bool getMotorState(void)
{
    9f94:	b580      	push	{r7, lr}
    9f96:	af00      	add	r7, sp, #0
	return mFeedback;
    9f98:	4b02      	ldr	r3, [pc, #8]	; (9fa4 <getMotorState+0x10>)
    9f9a:	781b      	ldrb	r3, [r3, #0]
    9f9c:	b2db      	uxtb	r3, r3
}
    9f9e:	0018      	movs	r0, r3
    9fa0:	46bd      	mov	sp, r7
    9fa2:	bd80      	pop	{r7, pc}
    9fa4:	2000071a 	.word	0x2000071a

00009fa8 <setMotorState>:

void setMotorState(bool state)
{
    9fa8:	b580      	push	{r7, lr}
    9faa:	b082      	sub	sp, #8
    9fac:	af00      	add	r7, sp, #0
    9fae:	0002      	movs	r2, r0
    9fb0:	1dfb      	adds	r3, r7, #7
    9fb2:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
    9fb4:	4b0a      	ldr	r3, [pc, #40]	; (9fe0 <setMotorState+0x38>)
    9fb6:	1dfa      	adds	r2, r7, #7
    9fb8:	7812      	ldrb	r2, [r2, #0]
    9fba:	701a      	strb	r2, [r3, #0]
	if (state)
    9fbc:	1dfb      	adds	r3, r7, #7
    9fbe:	781b      	ldrb	r3, [r3, #0]
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d004      	beq.n	9fce <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
    9fc4:	2100      	movs	r1, #0
    9fc6:	2005      	movs	r0, #5
    9fc8:	4b06      	ldr	r3, [pc, #24]	; (9fe4 <setMotorState+0x3c>)
    9fca:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
    9fcc:	e003      	b.n	9fd6 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
    9fce:	2101      	movs	r1, #1
    9fd0:	2005      	movs	r0, #5
    9fd2:	4b04      	ldr	r3, [pc, #16]	; (9fe4 <setMotorState+0x3c>)
    9fd4:	4798      	blx	r3
}
    9fd6:	46c0      	nop			; (mov r8, r8)
    9fd8:	46bd      	mov	sp, r7
    9fda:	b002      	add	sp, #8
    9fdc:	bd80      	pop	{r7, pc}
    9fde:	46c0      	nop			; (mov r8, r8)
    9fe0:	2000071a 	.word	0x2000071a
    9fe4:	00008925 	.word	0x00008925

00009fe8 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
    9fe8:	b590      	push	{r4, r7, lr}
    9fea:	b083      	sub	sp, #12
    9fec:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
    9fee:	1d3b      	adds	r3, r7, #4
    9ff0:	1d7a      	adds	r2, r7, #5
    9ff2:	1db9      	adds	r1, r7, #6
    9ff4:	1df8      	adds	r0, r7, #7
    9ff6:	4c06      	ldr	r4, [pc, #24]	; (a010 <getMotorState_from_pin+0x28>)
    9ff8:	47a0      	blx	r4
	setMotorState(p3);
    9ffa:	1d7b      	adds	r3, r7, #5
    9ffc:	781b      	ldrb	r3, [r3, #0]
    9ffe:	0018      	movs	r0, r3
    a000:	4b04      	ldr	r3, [pc, #16]	; (a014 <getMotorState_from_pin+0x2c>)
    a002:	4798      	blx	r3
	return p3;
    a004:	1d7b      	adds	r3, r7, #5
    a006:	781b      	ldrb	r3, [r3, #0]
}
    a008:	0018      	movs	r0, r3
    a00a:	46bd      	mov	sp, r7
    a00c:	b003      	add	sp, #12
    a00e:	bd90      	pop	{r4, r7, pc}
    a010:	0000a019 	.word	0x0000a019
    a014:	00009fa9 	.word	0x00009fa9

0000a018 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
    a018:	b590      	push	{r4, r7, lr}
    a01a:	b087      	sub	sp, #28
    a01c:	af00      	add	r7, sp, #0
    a01e:	60f8      	str	r0, [r7, #12]
    a020:	60b9      	str	r1, [r7, #8]
    a022:	607a      	str	r2, [r7, #4]
    a024:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
    a026:	4b37      	ldr	r3, [pc, #220]	; (a104 <readSensorState+0xec>)
    a028:	785b      	ldrb	r3, [r3, #1]
    a02a:	b2da      	uxtb	r2, r3
    a02c:	68fb      	ldr	r3, [r7, #12]
    a02e:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    a030:	4b34      	ldr	r3, [pc, #208]	; (a104 <readSensorState+0xec>)
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	b2db      	uxtb	r3, r3
    a036:	2b02      	cmp	r3, #2
    a038:	d103      	bne.n	a042 <readSensorState+0x2a>
	{
		*phaseSeq=true;
    a03a:	68bb      	ldr	r3, [r7, #8]
    a03c:	2201      	movs	r2, #1
    a03e:	701a      	strb	r2, [r3, #0]
    a040:	e002      	b.n	a048 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
    a042:	68bb      	ldr	r3, [r7, #8]
    a044:	2200      	movs	r2, #0
    a046:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
    a048:	4b2f      	ldr	r3, [pc, #188]	; (a108 <readSensorState+0xf0>)
    a04a:	2225      	movs	r2, #37	; 0x25
    a04c:	5c9b      	ldrb	r3, [r3, r2]
    a04e:	2b00      	cmp	r3, #0
    a050:	d106      	bne.n	a060 <readSensorState+0x48>
	{
		*motor  = getMotorState();
    a052:	4b2e      	ldr	r3, [pc, #184]	; (a10c <readSensorState+0xf4>)
    a054:	4798      	blx	r3
    a056:	0003      	movs	r3, r0
    a058:	001a      	movs	r2, r3
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	701a      	strb	r2, [r3, #0]
    a05e:	e020      	b.n	a0a2 <readSensorState+0x8a>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
    a060:	4b29      	ldr	r3, [pc, #164]	; (a108 <readSensorState+0xf0>)
    a062:	2225      	movs	r2, #37	; 0x25
    a064:	5c9b      	ldrb	r3, [r3, r2]
    a066:	2b01      	cmp	r3, #1
    a068:	d106      	bne.n	a078 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
    a06a:	4b29      	ldr	r3, [pc, #164]	; (a110 <readSensorState+0xf8>)
    a06c:	4798      	blx	r3
    a06e:	0003      	movs	r3, r0
    a070:	001a      	movs	r2, r3
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	701a      	strb	r2, [r3, #0]
    a076:	e014      	b.n	a0a2 <readSensorState+0x8a>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
    a078:	4b23      	ldr	r3, [pc, #140]	; (a108 <readSensorState+0xf0>)
    a07a:	2225      	movs	r2, #37	; 0x25
    a07c:	5c9b      	ldrb	r3, [r3, r2]
    a07e:	2b02      	cmp	r3, #2
    a080:	d10f      	bne.n	a0a2 <readSensorState+0x8a>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    a082:	202e      	movs	r0, #46	; 0x2e
    a084:	4b23      	ldr	r3, [pc, #140]	; (a114 <readSensorState+0xfc>)
    a086:	4798      	blx	r3
    a088:	0003      	movs	r3, r0
    a08a:	1e5a      	subs	r2, r3, #1
    a08c:	4193      	sbcs	r3, r2
    a08e:	b2db      	uxtb	r3, r3
    a090:	2201      	movs	r2, #1
    a092:	4053      	eors	r3, r2
    a094:	b2db      	uxtb	r3, r3
    a096:	1c1a      	adds	r2, r3, #0
    a098:	2301      	movs	r3, #1
    a09a:	4013      	ands	r3, r2
    a09c:	b2da      	uxtb	r2, r3
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    a0a2:	2317      	movs	r3, #23
    a0a4:	18fb      	adds	r3, r7, r3
    a0a6:	2201      	movs	r2, #1
    a0a8:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    a0aa:	2317      	movs	r3, #23
    a0ac:	18fc      	adds	r4, r7, r3
    a0ae:	4b1a      	ldr	r3, [pc, #104]	; (a118 <readSensorState+0x100>)
    a0b0:	2100      	movs	r1, #0
    a0b2:	0018      	movs	r0, r3
    a0b4:	4b19      	ldr	r3, [pc, #100]	; (a11c <readSensorState+0x104>)
    a0b6:	4798      	blx	r3
    a0b8:	0003      	movs	r3, r0
    a0ba:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    a0bc:	23fa      	movs	r3, #250	; 0xfa
    a0be:	005b      	lsls	r3, r3, #1
    a0c0:	0018      	movs	r0, r3
    a0c2:	4b17      	ldr	r3, [pc, #92]	; (a120 <readSensorState+0x108>)
    a0c4:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    a0c6:	2317      	movs	r3, #23
    a0c8:	18fc      	adds	r4, r7, r3
    a0ca:	4b13      	ldr	r3, [pc, #76]	; (a118 <readSensorState+0x100>)
    a0cc:	2100      	movs	r1, #0
    a0ce:	0018      	movs	r0, r3
    a0d0:	4b12      	ldr	r3, [pc, #72]	; (a11c <readSensorState+0x104>)
    a0d2:	4798      	blx	r3
    a0d4:	0003      	movs	r3, r0
    a0d6:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    a0d8:	2317      	movs	r3, #23
    a0da:	18fb      	adds	r3, r7, r3
    a0dc:	781b      	ldrb	r3, [r3, #0]
    a0de:	2204      	movs	r2, #4
    a0e0:	4013      	ands	r3, r2
    a0e2:	d003      	beq.n	a0ec <readSensorState+0xd4>
	{
		isACpowerAvailable = true;
    a0e4:	4b0f      	ldr	r3, [pc, #60]	; (a124 <readSensorState+0x10c>)
    a0e6:	2201      	movs	r2, #1
    a0e8:	701a      	strb	r2, [r3, #0]
    a0ea:	e002      	b.n	a0f2 <readSensorState+0xda>
	}
	else
	{
		isACpowerAvailable = false;
    a0ec:	4b0d      	ldr	r3, [pc, #52]	; (a124 <readSensorState+0x10c>)
    a0ee:	2200      	movs	r2, #0
    a0f0:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
    a0f2:	4b0c      	ldr	r3, [pc, #48]	; (a124 <readSensorState+0x10c>)
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	b2da      	uxtb	r2, r3
    a0f8:	683b      	ldr	r3, [r7, #0]
    a0fa:	701a      	strb	r2, [r3, #0]
}
    a0fc:	46c0      	nop			; (mov r8, r8)
    a0fe:	46bd      	mov	sp, r7
    a100:	b007      	add	sp, #28
    a102:	bd90      	pop	{r4, r7, pc}
    a104:	20000720 	.word	0x20000720
    a108:	2000065c 	.word	0x2000065c
    a10c:	00009f95 	.word	0x00009f95
    a110:	0000a129 	.word	0x0000a129
    a114:	000088e1 	.word	0x000088e1
    a118:	2000083c 	.word	0x2000083c
    a11c:	00008495 	.word	0x00008495
    a120:	0000f0a9 	.word	0x0000f0a9
    a124:	20000765 	.word	0x20000765

0000a128 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
    a128:	b580      	push	{r7, lr}
    a12a:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
    a12c:	4b0e      	ldr	r3, [pc, #56]	; (a168 <checkMotorStatusUsingCurrent+0x40>)
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	2b00      	cmp	r3, #0
    a132:	d00d      	beq.n	a150 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
    a134:	4b0d      	ldr	r3, [pc, #52]	; (a16c <checkMotorStatusUsingCurrent+0x44>)
    a136:	8a9b      	ldrh	r3, [r3, #20]
    a138:	b29a      	uxth	r2, r3
    a13a:	4b0d      	ldr	r3, [pc, #52]	; (a170 <checkMotorStatusUsingCurrent+0x48>)
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	085b      	lsrs	r3, r3, #1
    a140:	b2db      	uxtb	r3, r3
    a142:	b29b      	uxth	r3, r3
    a144:	429a      	cmp	r2, r3
    a146:	d801      	bhi.n	a14c <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
    a148:	2300      	movs	r3, #0
    a14a:	e009      	b.n	a160 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
    a14c:	2301      	movs	r3, #1
    a14e:	e007      	b.n	a160 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
    a150:	4b06      	ldr	r3, [pc, #24]	; (a16c <checkMotorStatusUsingCurrent+0x44>)
    a152:	8a9b      	ldrh	r3, [r3, #20]
    a154:	b29b      	uxth	r3, r3
    a156:	2b04      	cmp	r3, #4
    a158:	d901      	bls.n	a15e <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
    a15a:	2301      	movs	r3, #1
    a15c:	e000      	b.n	a160 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
    a15e:	2300      	movs	r3, #0
		}
	}
}
    a160:	0018      	movs	r0, r3
    a162:	46bd      	mov	sp, r7
    a164:	bd80      	pop	{r7, pc}
    a166:	46c0      	nop			; (mov r8, r8)
    a168:	20000815 	.word	0x20000815
    a16c:	200006dc 	.word	0x200006dc
    a170:	200007b0 	.word	0x200007b0

0000a174 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
    a174:	b5b0      	push	{r4, r5, r7, lr}
    a176:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
    a178:	4b07      	ldr	r3, [pc, #28]	; (a198 <detectMotorStateChangeUsingCurrent+0x24>)
    a17a:	4798      	blx	r3
    a17c:	0003      	movs	r3, r0
    a17e:	001c      	movs	r4, r3
    a180:	4b06      	ldr	r3, [pc, #24]	; (a19c <detectMotorStateChangeUsingCurrent+0x28>)
    a182:	4798      	blx	r3
    a184:	0003      	movs	r3, r0
    a186:	429c      	cmp	r4, r3
    a188:	d001      	beq.n	a18e <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
    a18a:	2301      	movs	r3, #1
    a18c:	e000      	b.n	a190 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
    a18e:	2300      	movs	r3, #0
	}
}
    a190:	0018      	movs	r0, r3
    a192:	46bd      	mov	sp, r7
    a194:	bdb0      	pop	{r4, r5, r7, pc}
    a196:	46c0      	nop			; (mov r8, r8)
    a198:	00009f95 	.word	0x00009f95
    a19c:	0000a129 	.word	0x0000a129

0000a1a0 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
    a1a0:	b5b0      	push	{r4, r5, r7, lr}
    a1a2:	b084      	sub	sp, #16
    a1a4:	af00      	add	r7, sp, #0
    a1a6:	0005      	movs	r5, r0
    a1a8:	000c      	movs	r4, r1
    a1aa:	0010      	movs	r0, r2
    a1ac:	0019      	movs	r1, r3
    a1ae:	1dfb      	adds	r3, r7, #7
    a1b0:	1c2a      	adds	r2, r5, #0
    a1b2:	701a      	strb	r2, [r3, #0]
    a1b4:	1dbb      	adds	r3, r7, #6
    a1b6:	1c22      	adds	r2, r4, #0
    a1b8:	701a      	strb	r2, [r3, #0]
    a1ba:	1d7b      	adds	r3, r7, #5
    a1bc:	1c02      	adds	r2, r0, #0
    a1be:	701a      	strb	r2, [r3, #0]
    a1c0:	1d3b      	adds	r3, r7, #4
    a1c2:	1c0a      	adds	r2, r1, #0
    a1c4:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
    a1c6:	1dfb      	adds	r3, r7, #7
    a1c8:	781b      	ldrb	r3, [r3, #0]
    a1ca:	0018      	movs	r0, r3
    a1cc:	4b29      	ldr	r3, [pc, #164]	; (a274 <updateSensorState+0xd4>)
    a1ce:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
    a1d0:	1dbb      	adds	r3, r7, #6
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	0018      	movs	r0, r3
    a1d6:	4b28      	ldr	r3, [pc, #160]	; (a278 <updateSensorState+0xd8>)
    a1d8:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
    a1da:	1d7b      	adds	r3, r7, #5
    a1dc:	781b      	ldrb	r3, [r3, #0]
    a1de:	0018      	movs	r0, r3
    a1e0:	4b26      	ldr	r3, [pc, #152]	; (a27c <updateSensorState+0xdc>)
    a1e2:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
    a1e4:	1d3b      	adds	r3, r7, #4
    a1e6:	781b      	ldrb	r3, [r3, #0]
    a1e8:	0018      	movs	r0, r3
    a1ea:	4b25      	ldr	r3, [pc, #148]	; (a280 <updateSensorState+0xe0>)
    a1ec:	4798      	blx	r3
	
	if(getAllPhaseState()==AC_3PH && getACPowerState())
    a1ee:	4b25      	ldr	r3, [pc, #148]	; (a284 <updateSensorState+0xe4>)
    a1f0:	4798      	blx	r3
    a1f2:	0003      	movs	r3, r0
    a1f4:	2b03      	cmp	r3, #3
    a1f6:	d12e      	bne.n	a256 <updateSensorState+0xb6>
    a1f8:	4b23      	ldr	r3, [pc, #140]	; (a288 <updateSensorState+0xe8>)
    a1fa:	4798      	blx	r3
    a1fc:	1e03      	subs	r3, r0, #0
    a1fe:	d02a      	beq.n	a256 <updateSensorState+0xb6>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
    a200:	230f      	movs	r3, #15
    a202:	18fb      	adds	r3, r7, r3
    a204:	2201      	movs	r2, #1
    a206:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
    a208:	4b20      	ldr	r3, [pc, #128]	; (a28c <updateSensorState+0xec>)
    a20a:	2224      	movs	r2, #36	; 0x24
    a20c:	5c9b      	ldrb	r3, [r3, r2]
    a20e:	2b00      	cmp	r3, #0
    a210:	d005      	beq.n	a21e <updateSensorState+0x7e>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
    a212:	230f      	movs	r3, #15
    a214:	18fc      	adds	r4, r7, r3
    a216:	4b1e      	ldr	r3, [pc, #120]	; (a290 <updateSensorState+0xf0>)
    a218:	4798      	blx	r3
    a21a:	0003      	movs	r3, r0
    a21c:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
    a21e:	230f      	movs	r3, #15
    a220:	18fb      	adds	r3, r7, r3
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	2b00      	cmp	r3, #0
    a226:	d004      	beq.n	a232 <updateSensorState+0x92>
		{
			THREEPHASE_OK_LED_ON;
    a228:	2100      	movs	r1, #0
    a22a:	2027      	movs	r0, #39	; 0x27
    a22c:	4b19      	ldr	r3, [pc, #100]	; (a294 <updateSensorState+0xf4>)
    a22e:	4798      	blx	r3
    a230:	e003      	b.n	a23a <updateSensorState+0x9a>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
    a232:	2101      	movs	r1, #1
    a234:	2027      	movs	r0, #39	; 0x27
    a236:	4b17      	ldr	r3, [pc, #92]	; (a294 <updateSensorState+0xf4>)
    a238:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
    a23a:	4b14      	ldr	r3, [pc, #80]	; (a28c <updateSensorState+0xec>)
    a23c:	785b      	ldrb	r3, [r3, #1]
    a23e:	2b00      	cmp	r3, #0
    a240:	d004      	beq.n	a24c <updateSensorState+0xac>
		{
			AUTO_ON_LED_ON;
    a242:	2100      	movs	r1, #0
    a244:	2028      	movs	r0, #40	; 0x28
    a246:	4b13      	ldr	r3, [pc, #76]	; (a294 <updateSensorState+0xf4>)
    a248:	4798      	blx	r3
	{
    a24a:	e00f      	b.n	a26c <updateSensorState+0xcc>
		}
		else
		{
			AUTO_ON_LED_OFF;
    a24c:	2101      	movs	r1, #1
    a24e:	2028      	movs	r0, #40	; 0x28
    a250:	4b10      	ldr	r3, [pc, #64]	; (a294 <updateSensorState+0xf4>)
    a252:	4798      	blx	r3
	{
    a254:	e00a      	b.n	a26c <updateSensorState+0xcc>
		}
	}
	else
	{
		THREEPHASE_OK_LED_OFF;
    a256:	2101      	movs	r1, #1
    a258:	2027      	movs	r0, #39	; 0x27
    a25a:	4b0e      	ldr	r3, [pc, #56]	; (a294 <updateSensorState+0xf4>)
    a25c:	4798      	blx	r3
		AUTO_ON_LED_OFF;
    a25e:	2101      	movs	r1, #1
    a260:	2028      	movs	r0, #40	; 0x28
    a262:	4b0c      	ldr	r3, [pc, #48]	; (a294 <updateSensorState+0xf4>)
    a264:	4798      	blx	r3
		startTimerOn=false;
    a266:	4b0c      	ldr	r3, [pc, #48]	; (a298 <updateSensorState+0xf8>)
    a268:	2200      	movs	r2, #0
    a26a:	701a      	strb	r2, [r3, #0]
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
    a26c:	46c0      	nop			; (mov r8, r8)
    a26e:	46bd      	mov	sp, r7
    a270:	b004      	add	sp, #16
    a272:	bdb0      	pop	{r4, r5, r7, pc}
    a274:	00009f41 	.word	0x00009f41
    a278:	00009f75 	.word	0x00009f75
    a27c:	00009fa9 	.word	0x00009fa9
    a280:	00009f0d 	.word	0x00009f0d
    a284:	00009f2d 	.word	0x00009f2d
    a288:	00009ef9 	.word	0x00009ef9
    a28c:	2000065c 	.word	0x2000065c
    a290:	00009f61 	.word	0x00009f61
    a294:	00008925 	.word	0x00008925
    a298:	20000772 	.word	0x20000772

0000a29c <resetAutoStart>:

void resetAutoStart(bool setChange)
{
    a29c:	b580      	push	{r7, lr}
    a29e:	b082      	sub	sp, #8
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	0002      	movs	r2, r0
    a2a4:	1dfb      	adds	r3, r7, #7
    a2a6:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
    a2a8:	4b0e      	ldr	r3, [pc, #56]	; (a2e4 <resetAutoStart+0x48>)
    a2aa:	785b      	ldrb	r3, [r3, #1]
    a2ac:	2b00      	cmp	r3, #0
    a2ae:	d107      	bne.n	a2c0 <resetAutoStart+0x24>
	{
		startTimerOn=false;
    a2b0:	4b0d      	ldr	r3, [pc, #52]	; (a2e8 <resetAutoStart+0x4c>)
    a2b2:	2200      	movs	r2, #0
    a2b4:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
    a2b6:	2101      	movs	r1, #1
    a2b8:	2028      	movs	r0, #40	; 0x28
    a2ba:	4b0c      	ldr	r3, [pc, #48]	; (a2ec <resetAutoStart+0x50>)
    a2bc:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
    a2be:	e00d      	b.n	a2dc <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
    a2c0:	4b08      	ldr	r3, [pc, #32]	; (a2e4 <resetAutoStart+0x48>)
    a2c2:	785b      	ldrb	r3, [r3, #1]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d009      	beq.n	a2dc <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
    a2c8:	2100      	movs	r1, #0
    a2ca:	2028      	movs	r0, #40	; 0x28
    a2cc:	4b07      	ldr	r3, [pc, #28]	; (a2ec <resetAutoStart+0x50>)
    a2ce:	4798      	blx	r3
		if (setChange)
    a2d0:	1dfb      	adds	r3, r7, #7
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d001      	beq.n	a2dc <resetAutoStart+0x40>
			triggerAutoStart();
    a2d8:	4b05      	ldr	r3, [pc, #20]	; (a2f0 <resetAutoStart+0x54>)
    a2da:	4798      	blx	r3
}
    a2dc:	46c0      	nop			; (mov r8, r8)
    a2de:	46bd      	mov	sp, r7
    a2e0:	b002      	add	sp, #8
    a2e2:	bd80      	pop	{r7, pc}
    a2e4:	2000065c 	.word	0x2000065c
    a2e8:	20000772 	.word	0x20000772
    a2ec:	00008925 	.word	0x00008925
    a2f0:	0000a2f5 	.word	0x0000a2f5

0000a2f4 <triggerAutoStart>:

void triggerAutoStart(void)
{
    a2f4:	b580      	push	{r7, lr}
    a2f6:	af00      	add	r7, sp, #0
	if (!getMotorState())
    a2f8:	4b0d      	ldr	r3, [pc, #52]	; (a330 <triggerAutoStart+0x3c>)
    a2fa:	4798      	blx	r3
    a2fc:	0003      	movs	r3, r0
    a2fe:	001a      	movs	r2, r3
    a300:	2301      	movs	r3, #1
    a302:	4053      	eors	r3, r2
    a304:	b2db      	uxtb	r3, r3
    a306:	2b00      	cmp	r3, #0
    a308:	d00f      	beq.n	a32a <triggerAutoStart+0x36>
	{
		if (getAllPhaseState() && getACPowerState())
    a30a:	4b0a      	ldr	r3, [pc, #40]	; (a334 <triggerAutoStart+0x40>)
    a30c:	4798      	blx	r3
    a30e:	1e03      	subs	r3, r0, #0
    a310:	d00b      	beq.n	a32a <triggerAutoStart+0x36>
    a312:	4b09      	ldr	r3, [pc, #36]	; (a338 <triggerAutoStart+0x44>)
    a314:	4798      	blx	r3
    a316:	1e03      	subs	r3, r0, #0
    a318:	d007      	beq.n	a32a <triggerAutoStart+0x36>
		{
			startTimerOn = true;
    a31a:	4b08      	ldr	r3, [pc, #32]	; (a33c <triggerAutoStart+0x48>)
    a31c:	2201      	movs	r2, #1
    a31e:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
    a320:	4b07      	ldr	r3, [pc, #28]	; (a340 <triggerAutoStart+0x4c>)
    a322:	4798      	blx	r3
    a324:	0002      	movs	r2, r0
    a326:	4b07      	ldr	r3, [pc, #28]	; (a344 <triggerAutoStart+0x50>)
    a328:	601a      	str	r2, [r3, #0]
		}
	}
}
    a32a:	46c0      	nop			; (mov r8, r8)
    a32c:	46bd      	mov	sp, r7
    a32e:	bd80      	pop	{r7, pc}
    a330:	00009f95 	.word	0x00009f95
    a334:	00009f2d 	.word	0x00009f2d
    a338:	00009ef9 	.word	0x00009ef9
    a33c:	20000772 	.word	0x20000772
    a340:	0000f40d 	.word	0x0000f40d
    a344:	20000778 	.word	0x20000778

0000a348 <operateOnEvent>:

void operateOnEvent(void)
{
    a348:	b590      	push	{r4, r7, lr}
    a34a:	b083      	sub	sp, #12
    a34c:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
    a34e:	1d3b      	adds	r3, r7, #4
    a350:	1d7a      	adds	r2, r7, #5
    a352:	1db9      	adds	r1, r7, #6
    a354:	1df8      	adds	r0, r7, #7
    a356:	4c67      	ldr	r4, [pc, #412]	; (a4f4 <operateOnEvent+0x1ac>)
    a358:	47a0      	blx	r4
	eventOccured = false;
    a35a:	4b67      	ldr	r3, [pc, #412]	; (a4f8 <operateOnEvent+0x1b0>)
    a35c:	2200      	movs	r2, #0
    a35e:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    a360:	4b66      	ldr	r3, [pc, #408]	; (a4fc <operateOnEvent+0x1b4>)
    a362:	4798      	blx	r3
    a364:	0003      	movs	r3, r0
    a366:	001a      	movs	r2, r3
    a368:	1dfb      	adds	r3, r7, #7
    a36a:	781b      	ldrb	r3, [r3, #0]
    a36c:	429a      	cmp	r2, r3
    a36e:	d110      	bne.n	a392 <operateOnEvent+0x4a>
    a370:	4b63      	ldr	r3, [pc, #396]	; (a500 <operateOnEvent+0x1b8>)
    a372:	4798      	blx	r3
    a374:	0003      	movs	r3, r0
    a376:	001a      	movs	r2, r3
    a378:	1d7b      	adds	r3, r7, #5
    a37a:	781b      	ldrb	r3, [r3, #0]
    a37c:	429a      	cmp	r2, r3
    a37e:	d108      	bne.n	a392 <operateOnEvent+0x4a>
    a380:	4b60      	ldr	r3, [pc, #384]	; (a504 <operateOnEvent+0x1bc>)
    a382:	4798      	blx	r3
    a384:	0003      	movs	r3, r0
    a386:	001a      	movs	r2, r3
    a388:	1d3b      	adds	r3, r7, #4
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	429a      	cmp	r2, r3
    a38e:	d100      	bne.n	a392 <operateOnEvent+0x4a>
    a390:	e0ab      	b.n	a4ea <operateOnEvent+0x1a2>
	{
		return;
	}
	if (getMotorState())	//motorOn
    a392:	4b5b      	ldr	r3, [pc, #364]	; (a500 <operateOnEvent+0x1b8>)
    a394:	4798      	blx	r3
    a396:	1e03      	subs	r3, r0, #0
    a398:	d100      	bne.n	a39c <operateOnEvent+0x54>
    a39a:	e066      	b.n	a46a <operateOnEvent+0x122>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
    a39c:	1dfb      	adds	r3, r7, #7
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	d11e      	bne.n	a3e2 <operateOnEvent+0x9a>
    a3a4:	1d7b      	adds	r3, r7, #5
    a3a6:	781b      	ldrb	r3, [r3, #0]
    a3a8:	2201      	movs	r2, #1
    a3aa:	4053      	eors	r3, r2
    a3ac:	b2db      	uxtb	r3, r3
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d017      	beq.n	a3e2 <operateOnEvent+0x9a>
    a3b2:	1d3b      	adds	r3, r7, #4
    a3b4:	781b      	ldrb	r3, [r3, #0]
    a3b6:	2201      	movs	r2, #1
    a3b8:	4053      	eors	r3, r2
    a3ba:	b2db      	uxtb	r3, r3
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d010      	beq.n	a3e2 <operateOnEvent+0x9a>
		{
			stopMotor(false,true,false);
    a3c0:	2200      	movs	r2, #0
    a3c2:	2101      	movs	r1, #1
    a3c4:	2000      	movs	r0, #0
    a3c6:	4b50      	ldr	r3, [pc, #320]	; (a508 <operateOnEvent+0x1c0>)
    a3c8:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
    a3ca:	2101      	movs	r1, #1
    a3cc:	2027      	movs	r0, #39	; 0x27
    a3ce:	4b4f      	ldr	r3, [pc, #316]	; (a50c <operateOnEvent+0x1c4>)
    a3d0:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
    a3d2:	2043      	movs	r0, #67	; 0x43
    a3d4:	4b4e      	ldr	r3, [pc, #312]	; (a510 <operateOnEvent+0x1c8>)
    a3d6:	4798      	blx	r3
    a3d8:	0003      	movs	r3, r0
    a3da:	001a      	movs	r2, r3
    a3dc:	4b4d      	ldr	r3, [pc, #308]	; (a514 <operateOnEvent+0x1cc>)
    a3de:	719a      	strb	r2, [r3, #6]
    a3e0:	e078      	b.n	a4d4 <operateOnEvent+0x18c>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a3e2:	1d3b      	adds	r3, r7, #4
    a3e4:	781b      	ldrb	r3, [r3, #0]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d029      	beq.n	a43e <operateOnEvent+0xf6>
    a3ea:	4b46      	ldr	r3, [pc, #280]	; (a504 <operateOnEvent+0x1bc>)
    a3ec:	4798      	blx	r3
    a3ee:	1e03      	subs	r3, r0, #0
    a3f0:	d025      	beq.n	a43e <operateOnEvent+0xf6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a3f2:	4b49      	ldr	r3, [pc, #292]	; (a518 <operateOnEvent+0x1d0>)
    a3f4:	2220      	movs	r2, #32
    a3f6:	5c9b      	ldrb	r3, [r3, r2]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d008      	beq.n	a40e <operateOnEvent+0xc6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a3fc:	1dfb      	adds	r3, r7, #7
    a3fe:	781b      	ldrb	r3, [r3, #0]
    a400:	2b03      	cmp	r3, #3
    a402:	d104      	bne.n	a40e <operateOnEvent+0xc6>
    a404:	4b3d      	ldr	r3, [pc, #244]	; (a4fc <operateOnEvent+0x1b4>)
    a406:	4798      	blx	r3
    a408:	0003      	movs	r3, r0
    a40a:	2b03      	cmp	r3, #3
    a40c:	d00d      	beq.n	a42a <operateOnEvent+0xe2>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a40e:	4b42      	ldr	r3, [pc, #264]	; (a518 <operateOnEvent+0x1d0>)
    a410:	2220      	movs	r2, #32
    a412:	5c9b      	ldrb	r3, [r3, r2]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a414:	2b00      	cmp	r3, #0
    a416:	d112      	bne.n	a43e <operateOnEvent+0xf6>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a418:	1dfb      	adds	r3, r7, #7
    a41a:	781b      	ldrb	r3, [r3, #0]
    a41c:	2b01      	cmp	r3, #1
    a41e:	d90e      	bls.n	a43e <operateOnEvent+0xf6>
    a420:	4b36      	ldr	r3, [pc, #216]	; (a4fc <operateOnEvent+0x1b4>)
    a422:	4798      	blx	r3
    a424:	0003      	movs	r3, r0
    a426:	2b01      	cmp	r3, #1
    a428:	d909      	bls.n	a43e <operateOnEvent+0xf6>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
    a42a:	1d7b      	adds	r3, r7, #5
    a42c:	781b      	ldrb	r3, [r3, #0]
    a42e:	2201      	movs	r2, #1
    a430:	4053      	eors	r3, r2
    a432:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a434:	2b00      	cmp	r3, #0
    a436:	d002      	beq.n	a43e <operateOnEvent+0xf6>
		{
			unknownMotorOff();
    a438:	4b38      	ldr	r3, [pc, #224]	; (a51c <operateOnEvent+0x1d4>)
    a43a:	4798      	blx	r3
    a43c:	e04a      	b.n	a4d4 <operateOnEvent+0x18c>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a43e:	4b36      	ldr	r3, [pc, #216]	; (a518 <operateOnEvent+0x1d0>)
    a440:	2220      	movs	r2, #32
    a442:	5c9b      	ldrb	r3, [r3, r2]
    a444:	2b00      	cmp	r3, #0
    a446:	d045      	beq.n	a4d4 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a448:	1dfb      	adds	r3, r7, #7
    a44a:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a44c:	2b02      	cmp	r3, #2
    a44e:	d141      	bne.n	a4d4 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a450:	1d3b      	adds	r3, r7, #4
    a452:	781b      	ldrb	r3, [r3, #0]
    a454:	2b00      	cmp	r3, #0
    a456:	d03d      	beq.n	a4d4 <operateOnEvent+0x18c>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
    a458:	4b31      	ldr	r3, [pc, #196]	; (a520 <operateOnEvent+0x1d8>)
    a45a:	4798      	blx	r3
    a45c:	0002      	movs	r2, r0
    a45e:	4b31      	ldr	r3, [pc, #196]	; (a524 <operateOnEvent+0x1dc>)
    a460:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
    a462:	4b31      	ldr	r3, [pc, #196]	; (a528 <operateOnEvent+0x1e0>)
    a464:	2201      	movs	r2, #1
    a466:	701a      	strb	r2, [r3, #0]
    a468:	e034      	b.n	a4d4 <operateOnEvent+0x18c>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
    a46a:	1d7b      	adds	r3, r7, #5
    a46c:	781b      	ldrb	r3, [r3, #0]
    a46e:	2b00      	cmp	r3, #0
    a470:	d028      	beq.n	a4c4 <operateOnEvent+0x17c>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
    a472:	1dfb      	adds	r3, r7, #7
    a474:	781b      	ldrb	r3, [r3, #0]
    a476:	2b03      	cmp	r3, #3
    a478:	d11e      	bne.n	a4b8 <operateOnEvent+0x170>
    a47a:	1dbb      	adds	r3, r7, #6
    a47c:	781b      	ldrb	r3, [r3, #0]
    a47e:	2b00      	cmp	r3, #0
    a480:	d01a      	beq.n	a4b8 <operateOnEvent+0x170>
    a482:	1d3b      	adds	r3, r7, #4
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	2b00      	cmp	r3, #0
    a488:	d016      	beq.n	a4b8 <operateOnEvent+0x170>
			{
				if (startTimerOn)
    a48a:	4b28      	ldr	r3, [pc, #160]	; (a52c <operateOnEvent+0x1e4>)
    a48c:	781b      	ldrb	r3, [r3, #0]
    a48e:	2b00      	cmp	r3, #0
    a490:	d002      	beq.n	a498 <operateOnEvent+0x150>
				{
					startTimerOn = false;
    a492:	4b26      	ldr	r3, [pc, #152]	; (a52c <operateOnEvent+0x1e4>)
    a494:	2200      	movs	r2, #0
    a496:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
    a498:	2100      	movs	r1, #0
    a49a:	2027      	movs	r0, #39	; 0x27
    a49c:	4b1b      	ldr	r3, [pc, #108]	; (a50c <operateOnEvent+0x1c4>)
    a49e:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
    a4a0:	2053      	movs	r0, #83	; 0x53
    a4a2:	4b1b      	ldr	r3, [pc, #108]	; (a510 <operateOnEvent+0x1c8>)
    a4a4:	4798      	blx	r3
    a4a6:	0003      	movs	r3, r0
    a4a8:	001a      	movs	r2, r3
    a4aa:	4b1a      	ldr	r3, [pc, #104]	; (a514 <operateOnEvent+0x1cc>)
    a4ac:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
    a4ae:	2101      	movs	r1, #1
    a4b0:	2001      	movs	r0, #1
    a4b2:	4b1f      	ldr	r3, [pc, #124]	; (a530 <operateOnEvent+0x1e8>)
    a4b4:	4798      	blx	r3
    a4b6:	e00d      	b.n	a4d4 <operateOnEvent+0x18c>
			}
			else
			{
				stopMotor(false,true,false);
    a4b8:	2200      	movs	r2, #0
    a4ba:	2101      	movs	r1, #1
    a4bc:	2000      	movs	r0, #0
    a4be:	4b12      	ldr	r3, [pc, #72]	; (a508 <operateOnEvent+0x1c0>)
    a4c0:	4798      	blx	r3
    a4c2:	e007      	b.n	a4d4 <operateOnEvent+0x18c>
			}
		}
		else
		{
			waitStableLineOn = true;
    a4c4:	4b1b      	ldr	r3, [pc, #108]	; (a534 <operateOnEvent+0x1ec>)
    a4c6:	2201      	movs	r2, #1
    a4c8:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
    a4ca:	4b15      	ldr	r3, [pc, #84]	; (a520 <operateOnEvent+0x1d8>)
    a4cc:	4798      	blx	r3
    a4ce:	0002      	movs	r2, r0
    a4d0:	4b19      	ldr	r3, [pc, #100]	; (a538 <operateOnEvent+0x1f0>)
    a4d2:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
    a4d4:	1dfb      	adds	r3, r7, #7
    a4d6:	7818      	ldrb	r0, [r3, #0]
    a4d8:	1dbb      	adds	r3, r7, #6
    a4da:	7819      	ldrb	r1, [r3, #0]
    a4dc:	1d7b      	adds	r3, r7, #5
    a4de:	781a      	ldrb	r2, [r3, #0]
    a4e0:	1d3b      	adds	r3, r7, #4
    a4e2:	781b      	ldrb	r3, [r3, #0]
    a4e4:	4c15      	ldr	r4, [pc, #84]	; (a53c <operateOnEvent+0x1f4>)
    a4e6:	47a0      	blx	r4
    a4e8:	e000      	b.n	a4ec <operateOnEvent+0x1a4>
		return;
    a4ea:	46c0      	nop			; (mov r8, r8)
}
    a4ec:	46bd      	mov	sp, r7
    a4ee:	b003      	add	sp, #12
    a4f0:	bd90      	pop	{r4, r7, pc}
    a4f2:	46c0      	nop			; (mov r8, r8)
    a4f4:	0000a019 	.word	0x0000a019
    a4f8:	20000717 	.word	0x20000717
    a4fc:	00009f2d 	.word	0x00009f2d
    a500:	00009f95 	.word	0x00009f95
    a504:	00009ef9 	.word	0x00009ef9
    a508:	0000a895 	.word	0x0000a895
    a50c:	00008925 	.word	0x00008925
    a510:	000047a5 	.word	0x000047a5
    a514:	20000700 	.word	0x20000700
    a518:	2000065c 	.word	0x2000065c
    a51c:	0000a9b5 	.word	0x0000a9b5
    a520:	0000f40d 	.word	0x0000f40d
    a524:	20000758 	.word	0x20000758
    a528:	20000769 	.word	0x20000769
    a52c:	20000772 	.word	0x20000772
    a530:	0000a6d1 	.word	0x0000a6d1
    a534:	200007c9 	.word	0x200007c9
    a538:	20000794 	.word	0x20000794
    a53c:	0000a1a1 	.word	0x0000a1a1

0000a540 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
    a540:	b580      	push	{r7, lr}
    a542:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
    a544:	4b02      	ldr	r3, [pc, #8]	; (a550 <checkLineSensors+0x10>)
    a546:	785b      	ldrb	r3, [r3, #1]
    a548:	b2db      	uxtb	r3, r3
}
    a54a:	0018      	movs	r0, r3
    a54c:	46bd      	mov	sp, r7
    a54e:	bd80      	pop	{r7, pc}
    a550:	20000720 	.word	0x20000720

0000a554 <operateOnStableLine>:

void operateOnStableLine(void)
{
    a554:	b590      	push	{r4, r7, lr}
    a556:	b083      	sub	sp, #12
    a558:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
    a55a:	4b41      	ldr	r3, [pc, #260]	; (a660 <operateOnStableLine+0x10c>)
    a55c:	2200      	movs	r2, #0
    a55e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
    a560:	1dbc      	adds	r4, r7, #6
    a562:	4b40      	ldr	r3, [pc, #256]	; (a664 <operateOnStableLine+0x110>)
    a564:	4798      	blx	r3
    a566:	0003      	movs	r3, r0
    a568:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
    a56a:	1dbb      	adds	r3, r7, #6
    a56c:	781b      	ldrb	r3, [r3, #0]
    a56e:	2b03      	cmp	r3, #3
    a570:	d133      	bne.n	a5da <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
    a572:	1dfb      	adds	r3, r7, #7
    a574:	2201      	movs	r2, #1
    a576:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
    a578:	4b3b      	ldr	r3, [pc, #236]	; (a668 <operateOnStableLine+0x114>)
    a57a:	2224      	movs	r2, #36	; 0x24
    a57c:	5c9b      	ldrb	r3, [r3, r2]
    a57e:	2b00      	cmp	r3, #0
    a580:	d004      	beq.n	a58c <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
    a582:	1dfc      	adds	r4, r7, #7
    a584:	4b39      	ldr	r3, [pc, #228]	; (a66c <operateOnStableLine+0x118>)
    a586:	4798      	blx	r3
    a588:	0003      	movs	r3, r0
    a58a:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
    a58c:	1dfb      	adds	r3, r7, #7
    a58e:	781b      	ldrb	r3, [r3, #0]
    a590:	2b00      	cmp	r3, #0
    a592:	d016      	beq.n	a5c2 <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
    a594:	2100      	movs	r1, #0
    a596:	2027      	movs	r0, #39	; 0x27
    a598:	4b35      	ldr	r3, [pc, #212]	; (a670 <operateOnStableLine+0x11c>)
    a59a:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
    a59c:	4b32      	ldr	r3, [pc, #200]	; (a668 <operateOnStableLine+0x114>)
    a59e:	785b      	ldrb	r3, [r3, #1]
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	d002      	beq.n	a5aa <operateOnStableLine+0x56>
			{
				triggerAutoStart();
    a5a4:	4b33      	ldr	r3, [pc, #204]	; (a674 <operateOnStableLine+0x120>)
    a5a6:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
    a5a8:	e055      	b.n	a656 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
    a5aa:	4b2f      	ldr	r3, [pc, #188]	; (a668 <operateOnStableLine+0x114>)
    a5ac:	791b      	ldrb	r3, [r3, #4]
    a5ae:	2b4c      	cmp	r3, #76	; 0x4c
    a5b0:	d051      	beq.n	a656 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
    a5b2:	2047      	movs	r0, #71	; 0x47
    a5b4:	4b30      	ldr	r3, [pc, #192]	; (a678 <operateOnStableLine+0x124>)
    a5b6:	4798      	blx	r3
    a5b8:	0003      	movs	r3, r0
    a5ba:	001a      	movs	r2, r3
    a5bc:	4b2f      	ldr	r3, [pc, #188]	; (a67c <operateOnStableLine+0x128>)
    a5be:	711a      	strb	r2, [r3, #4]
}
    a5c0:	e049      	b.n	a656 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
    a5c2:	2101      	movs	r1, #1
    a5c4:	2027      	movs	r0, #39	; 0x27
    a5c6:	4b2a      	ldr	r3, [pc, #168]	; (a670 <operateOnStableLine+0x11c>)
    a5c8:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
    a5ca:	2041      	movs	r0, #65	; 0x41
    a5cc:	4b2a      	ldr	r3, [pc, #168]	; (a678 <operateOnStableLine+0x124>)
    a5ce:	4798      	blx	r3
    a5d0:	0003      	movs	r3, r0
    a5d2:	001a      	movs	r2, r3
    a5d4:	4b29      	ldr	r3, [pc, #164]	; (a67c <operateOnStableLine+0x128>)
    a5d6:	725a      	strb	r2, [r3, #9]
}
    a5d8:	e03d      	b.n	a656 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
    a5da:	1dbb      	adds	r3, r7, #6
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	2b02      	cmp	r3, #2
    a5e0:	d114      	bne.n	a60c <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
    a5e2:	2101      	movs	r1, #1
    a5e4:	2027      	movs	r0, #39	; 0x27
    a5e6:	4b22      	ldr	r3, [pc, #136]	; (a670 <operateOnStableLine+0x11c>)
    a5e8:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a5ea:	4b1f      	ldr	r3, [pc, #124]	; (a668 <operateOnStableLine+0x114>)
    a5ec:	791b      	ldrb	r3, [r3, #4]
    a5ee:	2b4f      	cmp	r3, #79	; 0x4f
    a5f0:	d131      	bne.n	a656 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
    a5f2:	4b1d      	ldr	r3, [pc, #116]	; (a668 <operateOnStableLine+0x114>)
    a5f4:	2220      	movs	r2, #32
    a5f6:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	d12c      	bne.n	a656 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
    a5fc:	2041      	movs	r0, #65	; 0x41
    a5fe:	4b1e      	ldr	r3, [pc, #120]	; (a678 <operateOnStableLine+0x124>)
    a600:	4798      	blx	r3
    a602:	0003      	movs	r3, r0
    a604:	001a      	movs	r2, r3
    a606:	4b1d      	ldr	r3, [pc, #116]	; (a67c <operateOnStableLine+0x128>)
    a608:	725a      	strb	r2, [r3, #9]
}
    a60a:	e024      	b.n	a656 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
    a60c:	1dbb      	adds	r3, r7, #6
    a60e:	781b      	ldrb	r3, [r3, #0]
    a610:	2b00      	cmp	r3, #0
    a612:	d120      	bne.n	a656 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
    a614:	2101      	movs	r1, #1
    a616:	2027      	movs	r0, #39	; 0x27
    a618:	4b15      	ldr	r3, [pc, #84]	; (a670 <operateOnStableLine+0x11c>)
    a61a:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a61c:	4b12      	ldr	r3, [pc, #72]	; (a668 <operateOnStableLine+0x114>)
    a61e:	791b      	ldrb	r3, [r3, #4]
    a620:	2b4f      	cmp	r3, #79	; 0x4f
    a622:	d011      	beq.n	a648 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a624:	4b16      	ldr	r3, [pc, #88]	; (a680 <operateOnStableLine+0x12c>)
    a626:	781b      	ldrb	r3, [r3, #0]
    a628:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a62a:	2b02      	cmp	r3, #2
    a62c:	d103      	bne.n	a636 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a62e:	4b0e      	ldr	r3, [pc, #56]	; (a668 <operateOnStableLine+0x114>)
    a630:	791b      	ldrb	r3, [r3, #4]
    a632:	2b4f      	cmp	r3, #79	; 0x4f
    a634:	d008      	beq.n	a648 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a636:	4b12      	ldr	r3, [pc, #72]	; (a680 <operateOnStableLine+0x12c>)
    a638:	781b      	ldrb	r3, [r3, #0]
    a63a:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a63c:	2b03      	cmp	r3, #3
    a63e:	d10a      	bne.n	a656 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a640:	4b09      	ldr	r3, [pc, #36]	; (a668 <operateOnStableLine+0x114>)
    a642:	791b      	ldrb	r3, [r3, #4]
    a644:	2b4c      	cmp	r3, #76	; 0x4c
    a646:	d006      	beq.n	a656 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
    a648:	204c      	movs	r0, #76	; 0x4c
    a64a:	4b0b      	ldr	r3, [pc, #44]	; (a678 <operateOnStableLine+0x124>)
    a64c:	4798      	blx	r3
    a64e:	0003      	movs	r3, r0
    a650:	001a      	movs	r2, r3
    a652:	4b0a      	ldr	r3, [pc, #40]	; (a67c <operateOnStableLine+0x128>)
    a654:	715a      	strb	r2, [r3, #5]
}
    a656:	46c0      	nop			; (mov r8, r8)
    a658:	46bd      	mov	sp, r7
    a65a:	b003      	add	sp, #12
    a65c:	bd90      	pop	{r4, r7, pc}
    a65e:	46c0      	nop			; (mov r8, r8)
    a660:	200007c9 	.word	0x200007c9
    a664:	0000a541 	.word	0x0000a541
    a668:	2000065c 	.word	0x2000065c
    a66c:	00009f61 	.word	0x00009f61
    a670:	00008925 	.word	0x00008925
    a674:	0000a2f5 	.word	0x0000a2f5
    a678:	000047a5 	.word	0x000047a5
    a67c:	20000700 	.word	0x20000700
    a680:	20000713 	.word	0x20000713

0000a684 <waitStableLineOver>:

bool waitStableLineOver(void)
{
    a684:	b580      	push	{r7, lr}
    a686:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
    a688:	4b0d      	ldr	r3, [pc, #52]	; (a6c0 <waitStableLineOver+0x3c>)
    a68a:	781b      	ldrb	r3, [r3, #0]
    a68c:	2b00      	cmp	r3, #0
    a68e:	d00e      	beq.n	a6ae <waitStableLineOver+0x2a>
    a690:	4b0c      	ldr	r3, [pc, #48]	; (a6c4 <waitStableLineOver+0x40>)
    a692:	4798      	blx	r3
    a694:	0002      	movs	r2, r0
    a696:	4b0c      	ldr	r3, [pc, #48]	; (a6c8 <waitStableLineOver+0x44>)
    a698:	681b      	ldr	r3, [r3, #0]
    a69a:	1ad3      	subs	r3, r2, r3
    a69c:	4a0b      	ldr	r2, [pc, #44]	; (a6cc <waitStableLineOver+0x48>)
    a69e:	7812      	ldrb	r2, [r2, #0]
    a6a0:	0011      	movs	r1, r2
    a6a2:	2264      	movs	r2, #100	; 0x64
    a6a4:	434a      	muls	r2, r1
    a6a6:	4293      	cmp	r3, r2
    a6a8:	d301      	bcc.n	a6ae <waitStableLineOver+0x2a>
    a6aa:	2301      	movs	r3, #1
    a6ac:	e000      	b.n	a6b0 <waitStableLineOver+0x2c>
    a6ae:	2300      	movs	r3, #0
    a6b0:	1c1a      	adds	r2, r3, #0
    a6b2:	2301      	movs	r3, #1
    a6b4:	4013      	ands	r3, r2
    a6b6:	b2db      	uxtb	r3, r3
}
    a6b8:	0018      	movs	r0, r3
    a6ba:	46bd      	mov	sp, r7
    a6bc:	bd80      	pop	{r7, pc}
    a6be:	46c0      	nop			; (mov r8, r8)
    a6c0:	200007c9 	.word	0x200007c9
    a6c4:	0000f40d 	.word	0x0000f40d
    a6c8:	20000794 	.word	0x20000794
    a6cc:	200007a9 	.word	0x200007a9

0000a6d0 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
    a6d0:	b580      	push	{r7, lr}
    a6d2:	b082      	sub	sp, #8
    a6d4:	af00      	add	r7, sp, #0
    a6d6:	0002      	movs	r2, r0
    a6d8:	1dfb      	adds	r3, r7, #7
    a6da:	701a      	strb	r2, [r3, #0]
    a6dc:	1dbb      	adds	r3, r7, #6
    a6de:	1c0a      	adds	r2, r1, #0
    a6e0:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
    a6e2:	4b57      	ldr	r3, [pc, #348]	; (a840 <startMotor+0x170>)
    a6e4:	2200      	movs	r2, #0
    a6e6:	701a      	strb	r2, [r3, #0]
	
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
    a6e8:	1dbb      	adds	r3, r7, #6
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d124      	bne.n	a73a <startMotor+0x6a>
    a6f0:	4b54      	ldr	r3, [pc, #336]	; (a844 <startMotor+0x174>)
    a6f2:	4798      	blx	r3
    a6f4:	1e03      	subs	r3, r0, #0
    a6f6:	d100      	bne.n	a6fa <startMotor+0x2a>
    a6f8:	e08e      	b.n	a818 <startMotor+0x148>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a6fa:	4b53      	ldr	r3, [pc, #332]	; (a848 <startMotor+0x178>)
    a6fc:	4798      	blx	r3
    a6fe:	0003      	movs	r3, r0
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
    a700:	2b03      	cmp	r3, #3
    a702:	d00b      	beq.n	a71c <startMotor+0x4c>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a704:	4b50      	ldr	r3, [pc, #320]	; (a848 <startMotor+0x178>)
    a706:	4798      	blx	r3
    a708:	0003      	movs	r3, r0
    a70a:	2b02      	cmp	r3, #2
    a70c:	d000      	beq.n	a710 <startMotor+0x40>
    a70e:	e083      	b.n	a818 <startMotor+0x148>
    a710:	4b4e      	ldr	r3, [pc, #312]	; (a84c <startMotor+0x17c>)
    a712:	2220      	movs	r2, #32
    a714:	5c9b      	ldrb	r3, [r3, r2]
    a716:	2b00      	cmp	r3, #0
    a718:	d000      	beq.n	a71c <startMotor+0x4c>
    a71a:	e07d      	b.n	a818 <startMotor+0x148>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a71c:	4b4b      	ldr	r3, [pc, #300]	; (a84c <startMotor+0x17c>)
    a71e:	2224      	movs	r2, #36	; 0x24
    a720:	5c9b      	ldrb	r3, [r3, r2]
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a722:	2b00      	cmp	r3, #0
    a724:	d003      	beq.n	a72e <startMotor+0x5e>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a726:	4b4a      	ldr	r3, [pc, #296]	; (a850 <startMotor+0x180>)
    a728:	4798      	blx	r3
    a72a:	1e03      	subs	r3, r0, #0
    a72c:	d105      	bne.n	a73a <startMotor+0x6a>
    a72e:	4b47      	ldr	r3, [pc, #284]	; (a84c <startMotor+0x17c>)
    a730:	2224      	movs	r2, #36	; 0x24
    a732:	5c9b      	ldrb	r3, [r3, r2]
    a734:	2b00      	cmp	r3, #0
    a736:	d000      	beq.n	a73a <startMotor+0x6a>
    a738:	e06e      	b.n	a818 <startMotor+0x148>
	{
		if (!getMotorState())
    a73a:	4b46      	ldr	r3, [pc, #280]	; (a854 <startMotor+0x184>)
    a73c:	4798      	blx	r3
    a73e:	0003      	movs	r3, r0
    a740:	001a      	movs	r2, r3
    a742:	2301      	movs	r3, #1
    a744:	4053      	eors	r3, r2
    a746:	b2db      	uxtb	r3, r3
    a748:	2b00      	cmp	r3, #0
    a74a:	d05d      	beq.n	a808 <startMotor+0x138>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
    a74c:	4b42      	ldr	r3, [pc, #264]	; (a858 <startMotor+0x188>)
    a74e:	795b      	ldrb	r3, [r3, #5]
    a750:	2b00      	cmp	r3, #0
    a752:	d034      	beq.n	a7be <startMotor+0xee>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
    a754:	4b3d      	ldr	r3, [pc, #244]	; (a84c <startMotor+0x17c>)
    a756:	7fdb      	ldrb	r3, [r3, #31]
    a758:	2b00      	cmp	r3, #0
    a75a:	d113      	bne.n	a784 <startMotor+0xb4>
    a75c:	4b3f      	ldr	r3, [pc, #252]	; (a85c <startMotor+0x18c>)
    a75e:	4798      	blx	r3
    a760:	1e03      	subs	r3, r0, #0
    a762:	d10f      	bne.n	a784 <startMotor+0xb4>
				{
					if (commanded)
    a764:	1dfb      	adds	r3, r7, #7
    a766:	781b      	ldrb	r3, [r3, #0]
    a768:	2b00      	cmp	r3, #0
    a76a:	d003      	beq.n	a774 <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
    a76c:	2054      	movs	r0, #84	; 0x54
    a76e:	4b3c      	ldr	r3, [pc, #240]	; (a860 <startMotor+0x190>)
    a770:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
    a772:	e062      	b.n	a83a <startMotor+0x16a>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a774:	204e      	movs	r0, #78	; 0x4e
    a776:	4b3b      	ldr	r3, [pc, #236]	; (a864 <startMotor+0x194>)
    a778:	4798      	blx	r3
    a77a:	0003      	movs	r3, r0
    a77c:	001a      	movs	r2, r3
    a77e:	4b3a      	ldr	r3, [pc, #232]	; (a868 <startMotor+0x198>)
    a780:	701a      	strb	r2, [r3, #0]
					return;
    a782:	e05a      	b.n	a83a <startMotor+0x16a>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
    a784:	4b34      	ldr	r3, [pc, #208]	; (a858 <startMotor+0x188>)
    a786:	791b      	ldrb	r3, [r3, #4]
    a788:	2b00      	cmp	r3, #0
    a78a:	d018      	beq.n	a7be <startMotor+0xee>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
    a78c:	4b2f      	ldr	r3, [pc, #188]	; (a84c <startMotor+0x17c>)
    a78e:	7fdb      	ldrb	r3, [r3, #31]
    a790:	2b00      	cmp	r3, #0
    a792:	d114      	bne.n	a7be <startMotor+0xee>
    a794:	4b35      	ldr	r3, [pc, #212]	; (a86c <startMotor+0x19c>)
    a796:	4798      	blx	r3
    a798:	0003      	movs	r3, r0
    a79a:	2b02      	cmp	r3, #2
    a79c:	d10f      	bne.n	a7be <startMotor+0xee>
					{
						if(commanded)
    a79e:	1dfb      	adds	r3, r7, #7
    a7a0:	781b      	ldrb	r3, [r3, #0]
    a7a2:	2b00      	cmp	r3, #0
    a7a4:	d003      	beq.n	a7ae <startMotor+0xde>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
    a7a6:	2056      	movs	r0, #86	; 0x56
    a7a8:	4b2d      	ldr	r3, [pc, #180]	; (a860 <startMotor+0x190>)
    a7aa:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
    a7ac:	e045      	b.n	a83a <startMotor+0x16a>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
    a7ae:	2056      	movs	r0, #86	; 0x56
    a7b0:	4b2c      	ldr	r3, [pc, #176]	; (a864 <startMotor+0x194>)
    a7b2:	4798      	blx	r3
    a7b4:	0003      	movs	r3, r0
    a7b6:	001a      	movs	r2, r3
    a7b8:	4b2b      	ldr	r3, [pc, #172]	; (a868 <startMotor+0x198>)
    a7ba:	745a      	strb	r2, [r3, #17]
						return;
    a7bc:	e03d      	b.n	a83a <startMotor+0x16a>
					}
				}
			}

			STOP_RELAY_ON;
    a7be:	2101      	movs	r1, #1
    a7c0:	202c      	movs	r0, #44	; 0x2c
    a7c2:	4b2b      	ldr	r3, [pc, #172]	; (a870 <startMotor+0x1a0>)
    a7c4:	4798      	blx	r3
			START_RELAY_ON;
    a7c6:	2101      	movs	r1, #1
    a7c8:	202d      	movs	r0, #45	; 0x2d
    a7ca:	4b29      	ldr	r3, [pc, #164]	; (a870 <startMotor+0x1a0>)
    a7cc:	4798      	blx	r3
			stopMotorCommandGiven=false;
    a7ce:	4b29      	ldr	r3, [pc, #164]	; (a874 <startMotor+0x1a4>)
    a7d0:	2200      	movs	r2, #0
    a7d2:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
    a7d4:	4b28      	ldr	r3, [pc, #160]	; (a878 <startMotor+0x1a8>)
    a7d6:	4798      	blx	r3
    a7d8:	0002      	movs	r2, r0
    a7da:	4b28      	ldr	r3, [pc, #160]	; (a87c <startMotor+0x1ac>)
    a7dc:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
    a7de:	4b28      	ldr	r3, [pc, #160]	; (a880 <startMotor+0x1b0>)
    a7e0:	2201      	movs	r2, #1
    a7e2:	701a      	strb	r2, [r3, #0]
			setMotorState(true);
    a7e4:	2001      	movs	r0, #1
    a7e6:	4b27      	ldr	r3, [pc, #156]	; (a884 <startMotor+0x1b4>)
    a7e8:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a7ea:	4b1b      	ldr	r3, [pc, #108]	; (a858 <startMotor+0x188>)
    a7ec:	785b      	ldrb	r3, [r3, #1]
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d005      	beq.n	a7fe <startMotor+0x12e>
			{
				enableCurrentBuffer=false;
    a7f2:	4b25      	ldr	r3, [pc, #148]	; (a888 <startMotor+0x1b8>)
    a7f4:	2200      	movs	r2, #0
    a7f6:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
    a7f8:	4b24      	ldr	r3, [pc, #144]	; (a88c <startMotor+0x1bc>)
    a7fa:	2200      	movs	r2, #0
    a7fc:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
    a7fe:	4b24      	ldr	r3, [pc, #144]	; (a890 <startMotor+0x1c0>)
    a800:	1dfa      	adds	r2, r7, #7
    a802:	7812      	ldrb	r2, [r2, #0]
    a804:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
    a806:	e017      	b.n	a838 <startMotor+0x168>
		}
		else
		{
			if (commanded)
    a808:	1dfb      	adds	r3, r7, #7
    a80a:	781b      	ldrb	r3, [r3, #0]
    a80c:	2b00      	cmp	r3, #0
    a80e:	d013      	beq.n	a838 <startMotor+0x168>
			{
				setMotorMGRResponse('+');		//motor is already on
    a810:	202b      	movs	r0, #43	; 0x2b
    a812:	4b13      	ldr	r3, [pc, #76]	; (a860 <startMotor+0x190>)
    a814:	4798      	blx	r3
		if (!getMotorState())
    a816:	e00f      	b.n	a838 <startMotor+0x168>
			}
		}
	}
	else
	{
		if (commanded)
    a818:	1dfb      	adds	r3, r7, #7
    a81a:	781b      	ldrb	r3, [r3, #0]
    a81c:	2b00      	cmp	r3, #0
    a81e:	d003      	beq.n	a828 <startMotor+0x158>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
    a820:	204e      	movs	r0, #78	; 0x4e
    a822:	4b0f      	ldr	r3, [pc, #60]	; (a860 <startMotor+0x190>)
    a824:	4798      	blx	r3
    a826:	e008      	b.n	a83a <startMotor+0x16a>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a828:	204e      	movs	r0, #78	; 0x4e
    a82a:	4b0e      	ldr	r3, [pc, #56]	; (a864 <startMotor+0x194>)
    a82c:	4798      	blx	r3
    a82e:	0003      	movs	r3, r0
    a830:	001a      	movs	r2, r3
    a832:	4b0d      	ldr	r3, [pc, #52]	; (a868 <startMotor+0x198>)
    a834:	701a      	strb	r2, [r3, #0]
    a836:	e000      	b.n	a83a <startMotor+0x16a>
		if (!getMotorState())
    a838:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    a83a:	46bd      	mov	sp, r7
    a83c:	b002      	add	sp, #8
    a83e:	bd80      	pop	{r7, pc}
    a840:	20000772 	.word	0x20000772
    a844:	00009ef9 	.word	0x00009ef9
    a848:	00009f2d 	.word	0x00009f2d
    a84c:	2000065c 	.word	0x2000065c
    a850:	00009f61 	.word	0x00009f61
    a854:	00009f95 	.word	0x00009f95
    a858:	20000628 	.word	0x20000628
    a85c:	00008cb9 	.word	0x00008cb9
    a860:	0000497d 	.word	0x0000497d
    a864:	000047a5 	.word	0x000047a5
    a868:	20000700 	.word	0x20000700
    a86c:	00008b89 	.word	0x00008b89
    a870:	00008925 	.word	0x00008925
    a874:	20000815 	.word	0x20000815
    a878:	0000f40d 	.word	0x0000f40d
    a87c:	2000076c 	.word	0x2000076c
    a880:	20000771 	.word	0x20000771
    a884:	00009fa9 	.word	0x00009fa9
    a888:	20000738 	.word	0x20000738
    a88c:	2000075e 	.word	0x2000075e
    a890:	200006fc 	.word	0x200006fc

0000a894 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
    a894:	b590      	push	{r4, r7, lr}
    a896:	b083      	sub	sp, #12
    a898:	af00      	add	r7, sp, #0
    a89a:	0004      	movs	r4, r0
    a89c:	0008      	movs	r0, r1
    a89e:	0011      	movs	r1, r2
    a8a0:	1dfb      	adds	r3, r7, #7
    a8a2:	1c22      	adds	r2, r4, #0
    a8a4:	701a      	strb	r2, [r3, #0]
    a8a6:	1dbb      	adds	r3, r7, #6
    a8a8:	1c02      	adds	r2, r0, #0
    a8aa:	701a      	strb	r2, [r3, #0]
    a8ac:	1d7b      	adds	r3, r7, #5
    a8ae:	1c0a      	adds	r2, r1, #0
    a8b0:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
    a8b2:	1dbb      	adds	r3, r7, #6
    a8b4:	781b      	ldrb	r3, [r3, #0]
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d103      	bne.n	a8c2 <stopMotor+0x2e>
    a8ba:	4b20      	ldr	r3, [pc, #128]	; (a93c <stopMotor+0xa8>)
    a8bc:	4798      	blx	r3
    a8be:	1e03      	subs	r3, r0, #0
    a8c0:	d02f      	beq.n	a922 <stopMotor+0x8e>
	{
		singlePhasingTimerOn = false;
    a8c2:	4b1f      	ldr	r3, [pc, #124]	; (a940 <stopMotor+0xac>)
    a8c4:	2200      	movs	r2, #0
    a8c6:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
    a8c8:	4b1e      	ldr	r3, [pc, #120]	; (a944 <stopMotor+0xb0>)
    a8ca:	2225      	movs	r2, #37	; 0x25
    a8cc:	5c9b      	ldrb	r3, [r3, r2]
    a8ce:	2b01      	cmp	r3, #1
    a8d0:	d105      	bne.n	a8de <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    a8d2:	4b1d      	ldr	r3, [pc, #116]	; (a948 <stopMotor+0xb4>)
    a8d4:	8a9b      	ldrh	r3, [r3, #20]
    a8d6:	b29b      	uxth	r3, r3
    a8d8:	b2da      	uxtb	r2, r3
    a8da:	4b1c      	ldr	r3, [pc, #112]	; (a94c <stopMotor+0xb8>)
    a8dc:	701a      	strb	r2, [r3, #0]
		}
		STOP_RELAY_OFF;
    a8de:	2100      	movs	r1, #0
    a8e0:	202c      	movs	r0, #44	; 0x2c
    a8e2:	4b1b      	ldr	r3, [pc, #108]	; (a950 <stopMotor+0xbc>)
    a8e4:	4798      	blx	r3
		stopMotorCommandGiven=true;
    a8e6:	4b1b      	ldr	r3, [pc, #108]	; (a954 <stopMotor+0xc0>)
    a8e8:	2201      	movs	r2, #1
    a8ea:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
    a8ec:	4b1a      	ldr	r3, [pc, #104]	; (a958 <stopMotor+0xc4>)
    a8ee:	4798      	blx	r3
    a8f0:	0002      	movs	r2, r0
    a8f2:	4b1a      	ldr	r3, [pc, #104]	; (a95c <stopMotor+0xc8>)
    a8f4:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
    a8f6:	4b1a      	ldr	r3, [pc, #104]	; (a960 <stopMotor+0xcc>)
    a8f8:	2201      	movs	r2, #1
    a8fa:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
    a8fc:	2000      	movs	r0, #0
    a8fe:	4b19      	ldr	r3, [pc, #100]	; (a964 <stopMotor+0xd0>)
    a900:	4798      	blx	r3
		gotOffCommand = commanded;
    a902:	4b19      	ldr	r3, [pc, #100]	; (a968 <stopMotor+0xd4>)
    a904:	1dfa      	adds	r2, r7, #7
    a906:	7812      	ldrb	r2, [r2, #0]
    a908:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
    a90a:	4b18      	ldr	r3, [pc, #96]	; (a96c <stopMotor+0xd8>)
    a90c:	1d7a      	adds	r2, r7, #5
    a90e:	7812      	ldrb	r2, [r2, #0]
    a910:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a912:	4b17      	ldr	r3, [pc, #92]	; (a970 <stopMotor+0xdc>)
    a914:	785b      	ldrb	r3, [r3, #1]
    a916:	2b00      	cmp	r3, #0
    a918:	d00b      	beq.n	a932 <stopMotor+0x9e>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
    a91a:	4b16      	ldr	r3, [pc, #88]	; (a974 <stopMotor+0xe0>)
    a91c:	2200      	movs	r2, #0
    a91e:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a920:	e007      	b.n	a932 <stopMotor+0x9e>
		}
	}
	else
	{
		if (commanded)
    a922:	1dfb      	adds	r3, r7, #7
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	2b00      	cmp	r3, #0
    a928:	d003      	beq.n	a932 <stopMotor+0x9e>
		{
			setMotorMGRResponse('-');	//motor is already off
    a92a:	202d      	movs	r0, #45	; 0x2d
    a92c:	4b12      	ldr	r3, [pc, #72]	; (a978 <stopMotor+0xe4>)
    a92e:	4798      	blx	r3
		}
	}
}
    a930:	e7ff      	b.n	a932 <stopMotor+0x9e>
    a932:	46c0      	nop			; (mov r8, r8)
    a934:	46bd      	mov	sp, r7
    a936:	b003      	add	sp, #12
    a938:	bd90      	pop	{r4, r7, pc}
    a93a:	46c0      	nop			; (mov r8, r8)
    a93c:	00009f95 	.word	0x00009f95
    a940:	20000769 	.word	0x20000769
    a944:	2000065c 	.word	0x2000065c
    a948:	200006dc 	.word	0x200006dc
    a94c:	200007b0 	.word	0x200007b0
    a950:	00008925 	.word	0x00008925
    a954:	20000815 	.word	0x20000815
    a958:	0000f40d 	.word	0x0000f40d
    a95c:	20000780 	.word	0x20000780
    a960:	20000761 	.word	0x20000761
    a964:	00009fa9 	.word	0x00009fa9
    a968:	200007c8 	.word	0x200007c8
    a96c:	2000077c 	.word	0x2000077c
    a970:	20000628 	.word	0x20000628
    a974:	2000075e 	.word	0x2000075e
    a978:	0000497d 	.word	0x0000497d

0000a97c <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
    a97c:	b580      	push	{r7, lr}
    a97e:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
    a980:	4b09      	ldr	r3, [pc, #36]	; (a9a8 <startMotorTimerOver+0x2c>)
    a982:	4798      	blx	r3
    a984:	0002      	movs	r2, r0
    a986:	4b09      	ldr	r3, [pc, #36]	; (a9ac <startMotorTimerOver+0x30>)
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	1ad1      	subs	r1, r2, r3
    a98c:	4b08      	ldr	r3, [pc, #32]	; (a9b0 <startMotorTimerOver+0x34>)
    a98e:	885b      	ldrh	r3, [r3, #2]
    a990:	001a      	movs	r2, r3
    a992:	23fa      	movs	r3, #250	; 0xfa
    a994:	009b      	lsls	r3, r3, #2
    a996:	435a      	muls	r2, r3
    a998:	2300      	movs	r3, #0
    a99a:	4291      	cmp	r1, r2
    a99c:	415b      	adcs	r3, r3
    a99e:	b2db      	uxtb	r3, r3
}
    a9a0:	0018      	movs	r0, r3
    a9a2:	46bd      	mov	sp, r7
    a9a4:	bd80      	pop	{r7, pc}
    a9a6:	46c0      	nop			; (mov r8, r8)
    a9a8:	0000f40d 	.word	0x0000f40d
    a9ac:	20000778 	.word	0x20000778
    a9b0:	2000065c 	.word	0x2000065c

0000a9b4 <unknownMotorOff>:

void unknownMotorOff(void)
{
    a9b4:	b580      	push	{r7, lr}
    a9b6:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
    a9b8:	2200      	movs	r2, #0
    a9ba:	2101      	movs	r1, #1
    a9bc:	2000      	movs	r0, #0
    a9be:	4b06      	ldr	r3, [pc, #24]	; (a9d8 <unknownMotorOff+0x24>)
    a9c0:	4798      	blx	r3
	simEventTemp[2] = registerEvent('U');
    a9c2:	2055      	movs	r0, #85	; 0x55
    a9c4:	4b05      	ldr	r3, [pc, #20]	; (a9dc <unknownMotorOff+0x28>)
    a9c6:	4798      	blx	r3
    a9c8:	0003      	movs	r3, r0
    a9ca:	001a      	movs	r2, r3
    a9cc:	4b04      	ldr	r3, [pc, #16]	; (a9e0 <unknownMotorOff+0x2c>)
    a9ce:	709a      	strb	r2, [r3, #2]
}
    a9d0:	46c0      	nop			; (mov r8, r8)
    a9d2:	46bd      	mov	sp, r7
    a9d4:	bd80      	pop	{r7, pc}
    a9d6:	46c0      	nop			; (mov r8, r8)
    a9d8:	0000a895 	.word	0x0000a895
    a9dc:	000047a5 	.word	0x000047a5
    a9e0:	20000700 	.word	0x20000700

0000a9e4 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
    a9e8:	4b0d      	ldr	r3, [pc, #52]	; (aa20 <singlePhasingTimerOver+0x3c>)
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d00e      	beq.n	aa0e <singlePhasingTimerOver+0x2a>
    a9f0:	4b0c      	ldr	r3, [pc, #48]	; (aa24 <singlePhasingTimerOver+0x40>)
    a9f2:	4798      	blx	r3
    a9f4:	0002      	movs	r2, r0
    a9f6:	4b0c      	ldr	r3, [pc, #48]	; (aa28 <singlePhasingTimerOver+0x44>)
    a9f8:	681b      	ldr	r3, [r3, #0]
    a9fa:	1ad2      	subs	r2, r2, r3
    a9fc:	4b0b      	ldr	r3, [pc, #44]	; (aa2c <singlePhasingTimerOver+0x48>)
    a9fe:	781b      	ldrb	r3, [r3, #0]
    aa00:	0019      	movs	r1, r3
    aa02:	2364      	movs	r3, #100	; 0x64
    aa04:	434b      	muls	r3, r1
    aa06:	429a      	cmp	r2, r3
    aa08:	d901      	bls.n	aa0e <singlePhasingTimerOver+0x2a>
    aa0a:	2301      	movs	r3, #1
    aa0c:	e000      	b.n	aa10 <singlePhasingTimerOver+0x2c>
    aa0e:	2300      	movs	r3, #0
    aa10:	1c1a      	adds	r2, r3, #0
    aa12:	2301      	movs	r3, #1
    aa14:	4013      	ands	r3, r2
    aa16:	b2db      	uxtb	r3, r3
}
    aa18:	0018      	movs	r0, r3
    aa1a:	46bd      	mov	sp, r7
    aa1c:	bd80      	pop	{r7, pc}
    aa1e:	46c0      	nop			; (mov r8, r8)
    aa20:	20000769 	.word	0x20000769
    aa24:	0000f40d 	.word	0x0000f40d
    aa28:	20000758 	.word	0x20000758
    aa2c:	20000748 	.word	0x20000748

0000aa30 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
    aa30:	b580      	push	{r7, lr}
    aa32:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
    aa34:	2101      	movs	r1, #1
    aa36:	2027      	movs	r0, #39	; 0x27
    aa38:	4b08      	ldr	r3, [pc, #32]	; (aa5c <operateOnSinglePhasing+0x2c>)
    aa3a:	4798      	blx	r3
	stopMotor(false,true,false);
    aa3c:	2200      	movs	r2, #0
    aa3e:	2101      	movs	r1, #1
    aa40:	2000      	movs	r0, #0
    aa42:	4b07      	ldr	r3, [pc, #28]	; (aa60 <operateOnSinglePhasing+0x30>)
    aa44:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
    aa46:	2046      	movs	r0, #70	; 0x46
    aa48:	4b06      	ldr	r3, [pc, #24]	; (aa64 <operateOnSinglePhasing+0x34>)
    aa4a:	4798      	blx	r3
    aa4c:	0003      	movs	r3, r0
    aa4e:	001a      	movs	r2, r3
    aa50:	4b05      	ldr	r3, [pc, #20]	; (aa68 <operateOnSinglePhasing+0x38>)
    aa52:	70da      	strb	r2, [r3, #3]
}
    aa54:	46c0      	nop			; (mov r8, r8)
    aa56:	46bd      	mov	sp, r7
    aa58:	bd80      	pop	{r7, pc}
    aa5a:	46c0      	nop			; (mov r8, r8)
    aa5c:	00008925 	.word	0x00008925
    aa60:	0000a895 	.word	0x0000a895
    aa64:	000047a5 	.word	0x000047a5
    aa68:	20000700 	.word	0x20000700

0000aa6c <terminateStopRelay>:

void terminateStopRelay(void)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
    aa70:	4b28      	ldr	r3, [pc, #160]	; (ab14 <terminateStopRelay+0xa8>)
    aa72:	781b      	ldrb	r3, [r3, #0]
    aa74:	2b00      	cmp	r3, #0
    aa76:	d04a      	beq.n	ab0e <terminateStopRelay+0xa2>
    aa78:	4b27      	ldr	r3, [pc, #156]	; (ab18 <terminateStopRelay+0xac>)
    aa7a:	4798      	blx	r3
    aa7c:	0002      	movs	r2, r0
    aa7e:	4b27      	ldr	r3, [pc, #156]	; (ab1c <terminateStopRelay+0xb0>)
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	1ad3      	subs	r3, r2, r3
    aa84:	4a26      	ldr	r2, [pc, #152]	; (ab20 <terminateStopRelay+0xb4>)
    aa86:	7812      	ldrb	r2, [r2, #0]
    aa88:	0011      	movs	r1, r2
    aa8a:	2264      	movs	r2, #100	; 0x64
    aa8c:	434a      	muls	r2, r1
    aa8e:	4293      	cmp	r3, r2
    aa90:	d93d      	bls.n	ab0e <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
    aa92:	4b20      	ldr	r3, [pc, #128]	; (ab14 <terminateStopRelay+0xa8>)
    aa94:	2200      	movs	r2, #0
    aa96:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
    aa98:	4b22      	ldr	r3, [pc, #136]	; (ab24 <terminateStopRelay+0xb8>)
    aa9a:	2201      	movs	r2, #1
    aa9c:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
    aa9e:	4b22      	ldr	r3, [pc, #136]	; (ab28 <terminateStopRelay+0xbc>)
    aaa0:	4798      	blx	r3
    aaa2:	0003      	movs	r3, r0
    aaa4:	001a      	movs	r2, r3
    aaa6:	2301      	movs	r3, #1
    aaa8:	4053      	eors	r3, r2
    aaaa:	b2db      	uxtb	r3, r3
    aaac:	2b00      	cmp	r3, #0
    aaae:	d019      	beq.n	aae4 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
    aab0:	4b1e      	ldr	r3, [pc, #120]	; (ab2c <terminateStopRelay+0xc0>)
    aab2:	781b      	ldrb	r3, [r3, #0]
    aab4:	2b00      	cmp	r3, #0
    aab6:	d006      	beq.n	aac6 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
    aab8:	4b1c      	ldr	r3, [pc, #112]	; (ab2c <terminateStopRelay+0xc0>)
    aaba:	2200      	movs	r2, #0
    aabc:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
    aabe:	204f      	movs	r0, #79	; 0x4f
    aac0:	4b1b      	ldr	r3, [pc, #108]	; (ab30 <terminateStopRelay+0xc4>)
    aac2:	4798      	blx	r3
    aac4:	e020      	b.n	ab08 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
    aac6:	4b1b      	ldr	r3, [pc, #108]	; (ab34 <terminateStopRelay+0xc8>)
    aac8:	781b      	ldrb	r3, [r3, #0]
    aaca:	2b00      	cmp	r3, #0
    aacc:	d01c      	beq.n	ab08 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
    aace:	4b19      	ldr	r3, [pc, #100]	; (ab34 <terminateStopRelay+0xc8>)
    aad0:	2200      	movs	r2, #0
    aad2:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
    aad4:	204f      	movs	r0, #79	; 0x4f
    aad6:	4b18      	ldr	r3, [pc, #96]	; (ab38 <terminateStopRelay+0xcc>)
    aad8:	4798      	blx	r3
    aada:	0003      	movs	r3, r0
    aadc:	001a      	movs	r2, r3
    aade:	4b17      	ldr	r3, [pc, #92]	; (ab3c <terminateStopRelay+0xd0>)
    aae0:	721a      	strb	r2, [r3, #8]
    aae2:	e011      	b.n	ab08 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
    aae4:	4b11      	ldr	r3, [pc, #68]	; (ab2c <terminateStopRelay+0xc0>)
    aae6:	781b      	ldrb	r3, [r3, #0]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d006      	beq.n	aafa <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
    aaec:	4b0f      	ldr	r3, [pc, #60]	; (ab2c <terminateStopRelay+0xc0>)
    aaee:	2200      	movs	r2, #0
    aaf0:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
    aaf2:	2050      	movs	r0, #80	; 0x50
    aaf4:	4b0e      	ldr	r3, [pc, #56]	; (ab30 <terminateStopRelay+0xc4>)
    aaf6:	4798      	blx	r3
    aaf8:	e006      	b.n	ab08 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
    aafa:	2050      	movs	r0, #80	; 0x50
    aafc:	4b0e      	ldr	r3, [pc, #56]	; (ab38 <terminateStopRelay+0xcc>)
    aafe:	4798      	blx	r3
    ab00:	0003      	movs	r3, r0
    ab02:	001a      	movs	r2, r3
    ab04:	4b0d      	ldr	r3, [pc, #52]	; (ab3c <terminateStopRelay+0xd0>)
    ab06:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
    ab08:	4b0a      	ldr	r3, [pc, #40]	; (ab34 <terminateStopRelay+0xc8>)
    ab0a:	2200      	movs	r2, #0
    ab0c:	701a      	strb	r2, [r3, #0]
	}
}
    ab0e:	46c0      	nop			; (mov r8, r8)
    ab10:	46bd      	mov	sp, r7
    ab12:	bd80      	pop	{r7, pc}
    ab14:	20000761 	.word	0x20000761
    ab18:	0000f40d 	.word	0x0000f40d
    ab1c:	20000780 	.word	0x20000780
    ab20:	20000817 	.word	0x20000817
    ab24:	20000815 	.word	0x20000815
    ab28:	00009fe9 	.word	0x00009fe9
    ab2c:	200007c8 	.word	0x200007c8
    ab30:	0000497d 	.word	0x0000497d
    ab34:	2000077c 	.word	0x2000077c
    ab38:	000047a5 	.word	0x000047a5
    ab3c:	20000700 	.word	0x20000700

0000ab40 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
    ab40:	b580      	push	{r7, lr}
    ab42:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
    ab44:	4b13      	ldr	r3, [pc, #76]	; (ab94 <terminateStarDeltaTimer+0x54>)
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d020      	beq.n	ab8e <terminateStarDeltaTimer+0x4e>
    ab4c:	4b12      	ldr	r3, [pc, #72]	; (ab98 <terminateStarDeltaTimer+0x58>)
    ab4e:	4798      	blx	r3
    ab50:	0002      	movs	r2, r0
    ab52:	4b12      	ldr	r3, [pc, #72]	; (ab9c <terminateStarDeltaTimer+0x5c>)
    ab54:	681b      	ldr	r3, [r3, #0]
    ab56:	1ad2      	subs	r2, r2, r3
    ab58:	4b11      	ldr	r3, [pc, #68]	; (aba0 <terminateStarDeltaTimer+0x60>)
    ab5a:	88db      	ldrh	r3, [r3, #6]
    ab5c:	0019      	movs	r1, r3
    ab5e:	23fa      	movs	r3, #250	; 0xfa
    ab60:	009b      	lsls	r3, r3, #2
    ab62:	434b      	muls	r3, r1
    ab64:	429a      	cmp	r2, r3
    ab66:	d912      	bls.n	ab8e <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
    ab68:	2100      	movs	r1, #0
    ab6a:	202d      	movs	r0, #45	; 0x2d
    ab6c:	4b0d      	ldr	r3, [pc, #52]	; (aba4 <terminateStarDeltaTimer+0x64>)
    ab6e:	4798      	blx	r3
		starDeltaTimerOn=false;
    ab70:	4b08      	ldr	r3, [pc, #32]	; (ab94 <terminateStarDeltaTimer+0x54>)
    ab72:	2200      	movs	r2, #0
    ab74:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    ab76:	4b0c      	ldr	r3, [pc, #48]	; (aba8 <terminateStarDeltaTimer+0x68>)
    ab78:	785b      	ldrb	r3, [r3, #1]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d007      	beq.n	ab8e <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
    ab7e:	4b0b      	ldr	r3, [pc, #44]	; (abac <terminateStarDeltaTimer+0x6c>)
    ab80:	2201      	movs	r2, #1
    ab82:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
    ab84:	4b04      	ldr	r3, [pc, #16]	; (ab98 <terminateStarDeltaTimer+0x58>)
    ab86:	4798      	blx	r3
    ab88:	0002      	movs	r2, r0
    ab8a:	4b04      	ldr	r3, [pc, #16]	; (ab9c <terminateStarDeltaTimer+0x5c>)
    ab8c:	601a      	str	r2, [r3, #0]
		}
	}
}
    ab8e:	46c0      	nop			; (mov r8, r8)
    ab90:	46bd      	mov	sp, r7
    ab92:	bd80      	pop	{r7, pc}
    ab94:	20000773 	.word	0x20000773
    ab98:	0000f40d 	.word	0x0000f40d
    ab9c:	2000076c 	.word	0x2000076c
    aba0:	2000065c 	.word	0x2000065c
    aba4:	00008925 	.word	0x00008925
    aba8:	20000628 	.word	0x20000628
    abac:	20000738 	.word	0x20000738

0000abb0 <terminateStartRelay>:

void terminateStartRelay(void)
{
    abb0:	b590      	push	{r4, r7, lr}
    abb2:	b083      	sub	sp, #12
    abb4:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
    abb6:	4b36      	ldr	r3, [pc, #216]	; (ac90 <terminateStartRelay+0xe0>)
    abb8:	781b      	ldrb	r3, [r3, #0]
    abba:	2b00      	cmp	r3, #0
    abbc:	d064      	beq.n	ac88 <terminateStartRelay+0xd8>
    abbe:	4b35      	ldr	r3, [pc, #212]	; (ac94 <terminateStartRelay+0xe4>)
    abc0:	4798      	blx	r3
    abc2:	0002      	movs	r2, r0
    abc4:	4b34      	ldr	r3, [pc, #208]	; (ac98 <terminateStartRelay+0xe8>)
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	1ad3      	subs	r3, r2, r3
    abca:	4a34      	ldr	r2, [pc, #208]	; (ac9c <terminateStartRelay+0xec>)
    abcc:	7812      	ldrb	r2, [r2, #0]
    abce:	0011      	movs	r1, r2
    abd0:	2264      	movs	r2, #100	; 0x64
    abd2:	434a      	muls	r2, r1
    abd4:	4293      	cmp	r3, r2
    abd6:	d957      	bls.n	ac88 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
    abd8:	4b31      	ldr	r3, [pc, #196]	; (aca0 <terminateStartRelay+0xf0>)
    abda:	88db      	ldrh	r3, [r3, #6]
    abdc:	001a      	movs	r2, r3
    abde:	0013      	movs	r3, r2
    abe0:	009b      	lsls	r3, r3, #2
    abe2:	189b      	adds	r3, r3, r2
    abe4:	005b      	lsls	r3, r3, #1
    abe6:	001a      	movs	r2, r3
    abe8:	4b2c      	ldr	r3, [pc, #176]	; (ac9c <terminateStartRelay+0xec>)
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	429a      	cmp	r2, r3
    abee:	d810      	bhi.n	ac12 <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
    abf0:	2100      	movs	r1, #0
    abf2:	202d      	movs	r0, #45	; 0x2d
    abf4:	4b2b      	ldr	r3, [pc, #172]	; (aca4 <terminateStartRelay+0xf4>)
    abf6:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
    abf8:	4b26      	ldr	r3, [pc, #152]	; (ac94 <terminateStartRelay+0xe4>)
    abfa:	4798      	blx	r3
    abfc:	0002      	movs	r2, r0
    abfe:	4b26      	ldr	r3, [pc, #152]	; (ac98 <terminateStartRelay+0xe8>)
    ac00:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    ac02:	4b29      	ldr	r3, [pc, #164]	; (aca8 <terminateStartRelay+0xf8>)
    ac04:	785b      	ldrb	r3, [r3, #1]
    ac06:	2b00      	cmp	r3, #0
    ac08:	d006      	beq.n	ac18 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
    ac0a:	4b28      	ldr	r3, [pc, #160]	; (acac <terminateStartRelay+0xfc>)
    ac0c:	2201      	movs	r2, #1
    ac0e:	701a      	strb	r2, [r3, #0]
    ac10:	e002      	b.n	ac18 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
    ac12:	4b27      	ldr	r3, [pc, #156]	; (acb0 <terminateStartRelay+0x100>)
    ac14:	2201      	movs	r2, #1
    ac16:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
    ac18:	4b1d      	ldr	r3, [pc, #116]	; (ac90 <terminateStartRelay+0xe0>)
    ac1a:	2200      	movs	r2, #0
    ac1c:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
    ac1e:	1dfc      	adds	r4, r7, #7
    ac20:	4b24      	ldr	r3, [pc, #144]	; (acb4 <terminateStartRelay+0x104>)
    ac22:	4798      	blx	r3
    ac24:	0003      	movs	r3, r0
    ac26:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
    ac28:	4b23      	ldr	r3, [pc, #140]	; (acb8 <terminateStartRelay+0x108>)
    ac2a:	781b      	ldrb	r3, [r3, #0]
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d013      	beq.n	ac58 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
    ac30:	4b21      	ldr	r3, [pc, #132]	; (acb8 <terminateStartRelay+0x108>)
    ac32:	2200      	movs	r2, #0
    ac34:	701a      	strb	r2, [r3, #0]
			if (motor)
    ac36:	1dfb      	adds	r3, r7, #7
    ac38:	781b      	ldrb	r3, [r3, #0]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d003      	beq.n	ac46 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
    ac3e:	2053      	movs	r0, #83	; 0x53
    ac40:	4b1e      	ldr	r3, [pc, #120]	; (acbc <terminateStartRelay+0x10c>)
    ac42:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
    ac44:	e020      	b.n	ac88 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    ac46:	2200      	movs	r2, #0
    ac48:	2101      	movs	r1, #1
    ac4a:	2000      	movs	r0, #0
    ac4c:	4b1c      	ldr	r3, [pc, #112]	; (acc0 <terminateStartRelay+0x110>)
    ac4e:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
    ac50:	204e      	movs	r0, #78	; 0x4e
    ac52:	4b1a      	ldr	r3, [pc, #104]	; (acbc <terminateStartRelay+0x10c>)
    ac54:	4798      	blx	r3
}
    ac56:	e017      	b.n	ac88 <terminateStartRelay+0xd8>
			if (motor)
    ac58:	1dfb      	adds	r3, r7, #7
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d007      	beq.n	ac70 <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
    ac60:	2053      	movs	r0, #83	; 0x53
    ac62:	4b18      	ldr	r3, [pc, #96]	; (acc4 <terminateStartRelay+0x114>)
    ac64:	4798      	blx	r3
    ac66:	0003      	movs	r3, r0
    ac68:	001a      	movs	r2, r3
    ac6a:	4b17      	ldr	r3, [pc, #92]	; (acc8 <terminateStartRelay+0x118>)
    ac6c:	71da      	strb	r2, [r3, #7]
}
    ac6e:	e00b      	b.n	ac88 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    ac70:	2200      	movs	r2, #0
    ac72:	2101      	movs	r1, #1
    ac74:	2000      	movs	r0, #0
    ac76:	4b12      	ldr	r3, [pc, #72]	; (acc0 <terminateStartRelay+0x110>)
    ac78:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    ac7a:	204e      	movs	r0, #78	; 0x4e
    ac7c:	4b11      	ldr	r3, [pc, #68]	; (acc4 <terminateStartRelay+0x114>)
    ac7e:	4798      	blx	r3
    ac80:	0003      	movs	r3, r0
    ac82:	001a      	movs	r2, r3
    ac84:	4b10      	ldr	r3, [pc, #64]	; (acc8 <terminateStartRelay+0x118>)
    ac86:	701a      	strb	r2, [r3, #0]
}
    ac88:	46c0      	nop			; (mov r8, r8)
    ac8a:	46bd      	mov	sp, r7
    ac8c:	b003      	add	sp, #12
    ac8e:	bd90      	pop	{r4, r7, pc}
    ac90:	20000771 	.word	0x20000771
    ac94:	0000f40d 	.word	0x0000f40d
    ac98:	2000076c 	.word	0x2000076c
    ac9c:	200007d4 	.word	0x200007d4
    aca0:	2000065c 	.word	0x2000065c
    aca4:	00008925 	.word	0x00008925
    aca8:	20000628 	.word	0x20000628
    acac:	20000738 	.word	0x20000738
    acb0:	20000773 	.word	0x20000773
    acb4:	00009fe9 	.word	0x00009fe9
    acb8:	200006fc 	.word	0x200006fc
    acbc:	0000497d 	.word	0x0000497d
    acc0:	0000a895 	.word	0x0000a895
    acc4:	000047a5 	.word	0x000047a5
    acc8:	20000700 	.word	0x20000700

0000accc <statusOnCall>:

void statusOnCall(void)
{
    accc:	b590      	push	{r4, r7, lr}
    acce:	b083      	sub	sp, #12
    acd0:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
    acd2:	1dfb      	adds	r3, r7, #7
    acd4:	2200      	movs	r2, #0
    acd6:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
    acd8:	1dbc      	adds	r4, r7, #6
    acda:	4b3b      	ldr	r3, [pc, #236]	; (adc8 <statusOnCall+0xfc>)
    acdc:	4798      	blx	r3
    acde:	0003      	movs	r3, r0
    ace0:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
    ace2:	1dbb      	adds	r3, r7, #6
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	2b00      	cmp	r3, #0
    ace8:	d109      	bne.n	acfe <statusOnCall+0x32>
	{
		status[index++]='L';
    acea:	1dfb      	adds	r3, r7, #7
    acec:	781b      	ldrb	r3, [r3, #0]
    acee:	1dfa      	adds	r2, r7, #7
    acf0:	1c59      	adds	r1, r3, #1
    acf2:	7011      	strb	r1, [r2, #0]
    acf4:	001a      	movs	r2, r3
    acf6:	003b      	movs	r3, r7
    acf8:	214c      	movs	r1, #76	; 0x4c
    acfa:	5499      	strb	r1, [r3, r2]
    acfc:	e03b      	b.n	ad76 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
    acfe:	1dbb      	adds	r3, r7, #6
    ad00:	781b      	ldrb	r3, [r3, #0]
    ad02:	2b02      	cmp	r3, #2
    ad04:	d109      	bne.n	ad1a <statusOnCall+0x4e>
	{
		status[index++]='A';
    ad06:	1dfb      	adds	r3, r7, #7
    ad08:	781b      	ldrb	r3, [r3, #0]
    ad0a:	1dfa      	adds	r2, r7, #7
    ad0c:	1c59      	adds	r1, r3, #1
    ad0e:	7011      	strb	r1, [r2, #0]
    ad10:	001a      	movs	r2, r3
    ad12:	003b      	movs	r3, r7
    ad14:	2141      	movs	r1, #65	; 0x41
    ad16:	5499      	strb	r1, [r3, r2]
    ad18:	e02d      	b.n	ad76 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
    ad1a:	1dbb      	adds	r3, r7, #6
    ad1c:	781b      	ldrb	r3, [r3, #0]
    ad1e:	2b03      	cmp	r3, #3
    ad20:	d129      	bne.n	ad76 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
    ad22:	1d7c      	adds	r4, r7, #5
    ad24:	4b29      	ldr	r3, [pc, #164]	; (adcc <statusOnCall+0x100>)
    ad26:	4798      	blx	r3
    ad28:	0003      	movs	r3, r0
    ad2a:	7023      	strb	r3, [r4, #0]
		if (temp)
    ad2c:	1d7b      	adds	r3, r7, #5
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	2b00      	cmp	r3, #0
    ad32:	d009      	beq.n	ad48 <statusOnCall+0x7c>
		{
			status[index++]='+';
    ad34:	1dfb      	adds	r3, r7, #7
    ad36:	781b      	ldrb	r3, [r3, #0]
    ad38:	1dfa      	adds	r2, r7, #7
    ad3a:	1c59      	adds	r1, r3, #1
    ad3c:	7011      	strb	r1, [r2, #0]
    ad3e:	001a      	movs	r2, r3
    ad40:	003b      	movs	r3, r7
    ad42:	212b      	movs	r1, #43	; 0x2b
    ad44:	5499      	strb	r1, [r3, r2]
    ad46:	e016      	b.n	ad76 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
    ad48:	1dfb      	adds	r3, r7, #7
    ad4a:	781b      	ldrb	r3, [r3, #0]
    ad4c:	1dfa      	adds	r2, r7, #7
    ad4e:	1c59      	adds	r1, r3, #1
    ad50:	7011      	strb	r1, [r2, #0]
    ad52:	001a      	movs	r2, r3
    ad54:	003b      	movs	r3, r7
    ad56:	215f      	movs	r1, #95	; 0x5f
    ad58:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
    ad5a:	4b1d      	ldr	r3, [pc, #116]	; (add0 <statusOnCall+0x104>)
    ad5c:	781b      	ldrb	r3, [r3, #0]
    ad5e:	b2db      	uxtb	r3, r3
    ad60:	2b02      	cmp	r3, #2
    ad62:	d008      	beq.n	ad76 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
    ad64:	1dfb      	adds	r3, r7, #7
    ad66:	781b      	ldrb	r3, [r3, #0]
    ad68:	1dfa      	adds	r2, r7, #7
    ad6a:	1c59      	adds	r1, r3, #1
    ad6c:	7011      	strb	r1, [r2, #0]
    ad6e:	001a      	movs	r2, r3
    ad70:	003b      	movs	r3, r7
    ad72:	2141      	movs	r1, #65	; 0x41
    ad74:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
    ad76:	4b17      	ldr	r3, [pc, #92]	; (add4 <statusOnCall+0x108>)
    ad78:	785b      	ldrb	r3, [r3, #1]
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d009      	beq.n	ad92 <statusOnCall+0xc6>
	{
		status[index++]=')';
    ad7e:	1dfb      	adds	r3, r7, #7
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	1dfa      	adds	r2, r7, #7
    ad84:	1c59      	adds	r1, r3, #1
    ad86:	7011      	strb	r1, [r2, #0]
    ad88:	001a      	movs	r2, r3
    ad8a:	003b      	movs	r3, r7
    ad8c:	2129      	movs	r1, #41	; 0x29
    ad8e:	5499      	strb	r1, [r3, r2]
    ad90:	e008      	b.n	ada4 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
    ad92:	1dfb      	adds	r3, r7, #7
    ad94:	781b      	ldrb	r3, [r3, #0]
    ad96:	1dfa      	adds	r2, r7, #7
    ad98:	1c59      	adds	r1, r3, #1
    ad9a:	7011      	strb	r1, [r2, #0]
    ad9c:	001a      	movs	r2, r3
    ad9e:	003b      	movs	r3, r7
    ada0:	215b      	movs	r1, #91	; 0x5b
    ada2:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
    ada4:	1dfb      	adds	r3, r7, #7
    ada6:	781b      	ldrb	r3, [r3, #0]
    ada8:	1dfa      	adds	r2, r7, #7
    adaa:	1c59      	adds	r1, r3, #1
    adac:	7011      	strb	r1, [r2, #0]
    adae:	001a      	movs	r2, r3
    adb0:	003b      	movs	r3, r7
    adb2:	2100      	movs	r1, #0
    adb4:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
    adb6:	003b      	movs	r3, r7
    adb8:	0018      	movs	r0, r3
    adba:	4b07      	ldr	r3, [pc, #28]	; (add8 <statusOnCall+0x10c>)
    adbc:	4798      	blx	r3
}
    adbe:	46c0      	nop			; (mov r8, r8)
    adc0:	46bd      	mov	sp, r7
    adc2:	b003      	add	sp, #12
    adc4:	bd90      	pop	{r4, r7, pc}
    adc6:	46c0      	nop			; (mov r8, r8)
    adc8:	0000a541 	.word	0x0000a541
    adcc:	00009fe9 	.word	0x00009fe9
    add0:	20000720 	.word	0x20000720
    add4:	2000065c 	.word	0x2000065c
    add8:	00004671 	.word	0x00004671

0000addc <voltageOnCall>:

void voltageOnCall(void)
{
    addc:	b590      	push	{r4, r7, lr}
    adde:	b087      	sub	sp, #28
    ade0:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"0%lu0%lu0%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
    ade2:	4b0a      	ldr	r3, [pc, #40]	; (ae0c <voltageOnCall+0x30>)
    ade4:	681a      	ldr	r2, [r3, #0]
    ade6:	4b09      	ldr	r3, [pc, #36]	; (ae0c <voltageOnCall+0x30>)
    ade8:	685c      	ldr	r4, [r3, #4]
    adea:	4b08      	ldr	r3, [pc, #32]	; (ae0c <voltageOnCall+0x30>)
    adec:	689b      	ldr	r3, [r3, #8]
    adee:	4908      	ldr	r1, [pc, #32]	; (ae10 <voltageOnCall+0x34>)
    adf0:	0038      	movs	r0, r7
    adf2:	9300      	str	r3, [sp, #0]
    adf4:	0023      	movs	r3, r4
    adf6:	4c07      	ldr	r4, [pc, #28]	; (ae14 <voltageOnCall+0x38>)
    adf8:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
    adfa:	003b      	movs	r3, r7
    adfc:	0018      	movs	r0, r3
    adfe:	4b06      	ldr	r3, [pc, #24]	; (ae18 <voltageOnCall+0x3c>)
    ae00:	4798      	blx	r3
}
    ae02:	46c0      	nop			; (mov r8, r8)
    ae04:	46bd      	mov	sp, r7
    ae06:	b005      	add	sp, #20
    ae08:	bd90      	pop	{r4, r7, pc}
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	200006dc 	.word	0x200006dc
    ae10:	000197a4 	.word	0x000197a4
    ae14:	00017f6d 	.word	0x00017f6d
    ae18:	00004671 	.word	0x00004671

0000ae1c <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
    ae1c:	b580      	push	{r7, lr}
    ae1e:	b082      	sub	sp, #8
    ae20:	af00      	add	r7, sp, #0
    ae22:	0002      	movs	r2, r0
    ae24:	1dfb      	adds	r3, r7, #7
    ae26:	701a      	strb	r2, [r3, #0]
    ae28:	1dbb      	adds	r3, r7, #6
    ae2a:	1c0a      	adds	r2, r1, #0
    ae2c:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
    ae2e:	1dfb      	adds	r3, r7, #7
    ae30:	781b      	ldrb	r3, [r3, #0]
    ae32:	4a0e      	ldr	r2, [pc, #56]	; (ae6c <setM2MEventState+0x50>)
    ae34:	5cd3      	ldrb	r3, [r2, r3]
    ae36:	2b02      	cmp	r3, #2
    ae38:	d10e      	bne.n	ae58 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
    ae3a:	1dbb      	adds	r3, r7, #6
    ae3c:	781b      	ldrb	r3, [r3, #0]
    ae3e:	2b03      	cmp	r3, #3
    ae40:	d10a      	bne.n	ae58 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
    ae42:	1dbb      	adds	r3, r7, #6
    ae44:	2200      	movs	r2, #0
    ae46:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
    ae48:	1dfb      	adds	r3, r7, #7
    ae4a:	781b      	ldrb	r3, [r3, #0]
    ae4c:	4a08      	ldr	r2, [pc, #32]	; (ae70 <setM2MEventState+0x54>)
    ae4e:	5cd3      	ldrb	r3, [r2, r3]
    ae50:	001a      	movs	r2, r3
    ae52:	4b08      	ldr	r3, [pc, #32]	; (ae74 <setM2MEventState+0x58>)
    ae54:	2100      	movs	r1, #0
    ae56:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
    ae58:	1dfb      	adds	r3, r7, #7
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	4a03      	ldr	r2, [pc, #12]	; (ae6c <setM2MEventState+0x50>)
    ae5e:	1db9      	adds	r1, r7, #6
    ae60:	7809      	ldrb	r1, [r1, #0]
    ae62:	54d1      	strb	r1, [r2, r3]
}
    ae64:	46c0      	nop			; (mov r8, r8)
    ae66:	46bd      	mov	sp, r7
    ae68:	b002      	add	sp, #8
    ae6a:	bd80      	pop	{r7, pc}
    ae6c:	20000788 	.word	0x20000788
    ae70:	20000718 	.word	0x20000718
    ae74:	20000700 	.word	0x20000700

0000ae78 <M2MEventManager>:

void M2MEventManager(void)
{
    ae78:	b580      	push	{r7, lr}
    ae7a:	b082      	sub	sp, #8
    ae7c:	af00      	add	r7, sp, #0
	uint8_t j=2;
    ae7e:	1dfb      	adds	r3, r7, #7
    ae80:	2202      	movs	r2, #2
    ae82:	701a      	strb	r2, [r3, #0]
	while(j--)
    ae84:	e00a      	b.n	ae9c <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
    ae86:	1dfb      	adds	r3, r7, #7
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	4a0a      	ldr	r2, [pc, #40]	; (aeb4 <M2MEventManager+0x3c>)
    ae8c:	5cd3      	ldrb	r3, [r2, r3]
    ae8e:	2b01      	cmp	r3, #1
    ae90:	d104      	bne.n	ae9c <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
    ae92:	1dfb      	adds	r3, r7, #7
    ae94:	781b      	ldrb	r3, [r3, #0]
    ae96:	0018      	movs	r0, r3
    ae98:	4b07      	ldr	r3, [pc, #28]	; (aeb8 <M2MEventManager+0x40>)
    ae9a:	4798      	blx	r3
	while(j--)
    ae9c:	1dfb      	adds	r3, r7, #7
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	1dfa      	adds	r2, r7, #7
    aea2:	1e59      	subs	r1, r3, #1
    aea4:	7011      	strb	r1, [r2, #0]
    aea6:	2b00      	cmp	r3, #0
    aea8:	d1ed      	bne.n	ae86 <M2MEventManager+0xe>
		}
	}
}
    aeaa:	46c0      	nop			; (mov r8, r8)
    aeac:	46bd      	mov	sp, r7
    aeae:	b002      	add	sp, #8
    aeb0:	bd80      	pop	{r7, pc}
    aeb2:	46c0      	nop			; (mov r8, r8)
    aeb4:	20000788 	.word	0x20000788
    aeb8:	000048c1 	.word	0x000048c1

0000aebc <SIMEventManager>:

void SIMEventManager(void)
{
    aebc:	b590      	push	{r4, r7, lr}
    aebe:	b083      	sub	sp, #12
    aec0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
    aec2:	1dfb      	adds	r3, r7, #7
    aec4:	2200      	movs	r2, #0
    aec6:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    aec8:	4b1e      	ldr	r3, [pc, #120]	; (af44 <SIMEventManager+0x88>)
    aeca:	795b      	ldrb	r3, [r3, #5]
    aecc:	2b00      	cmp	r3, #0
    aece:	d00b      	beq.n	aee8 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    aed0:	4b1c      	ldr	r3, [pc, #112]	; (af44 <SIMEventManager+0x88>)
    aed2:	791b      	ldrb	r3, [r3, #4]
    aed4:	2b00      	cmp	r3, #0
    aed6:	d003      	beq.n	aee0 <SIMEventManager+0x24>
		{
			i = 19;
    aed8:	1dfb      	adds	r3, r7, #7
    aeda:	2213      	movs	r2, #19
    aedc:	701a      	strb	r2, [r3, #0]
    aede:	e025      	b.n	af2c <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
    aee0:	1dfb      	adds	r3, r7, #7
    aee2:	2211      	movs	r2, #17
    aee4:	701a      	strb	r2, [r3, #0]
    aee6:	e021      	b.n	af2c <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    aee8:	4b16      	ldr	r3, [pc, #88]	; (af44 <SIMEventManager+0x88>)
    aeea:	785b      	ldrb	r3, [r3, #1]
    aeec:	2b00      	cmp	r3, #0
    aeee:	d003      	beq.n	aef8 <SIMEventManager+0x3c>
		{
			i = 14;
    aef0:	1dfb      	adds	r3, r7, #7
    aef2:	220e      	movs	r2, #14
    aef4:	701a      	strb	r2, [r3, #0]
    aef6:	e019      	b.n	af2c <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
    aef8:	1dfb      	adds	r3, r7, #7
    aefa:	220c      	movs	r2, #12
    aefc:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
    aefe:	e015      	b.n	af2c <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
    af00:	1dfb      	adds	r3, r7, #7
    af02:	781b      	ldrb	r3, [r3, #0]
    af04:	4a10      	ldr	r2, [pc, #64]	; (af48 <SIMEventManager+0x8c>)
    af06:	5cd3      	ldrb	r3, [r2, r3]
    af08:	2201      	movs	r2, #1
    af0a:	4053      	eors	r3, r2
    af0c:	b2db      	uxtb	r3, r3
    af0e:	2b00      	cmp	r3, #0
    af10:	d00c      	beq.n	af2c <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
    af12:	1dfb      	adds	r3, r7, #7
    af14:	781c      	ldrb	r4, [r3, #0]
    af16:	1dfb      	adds	r3, r7, #7
    af18:	781b      	ldrb	r3, [r3, #0]
    af1a:	4a0c      	ldr	r2, [pc, #48]	; (af4c <SIMEventManager+0x90>)
    af1c:	5cd3      	ldrb	r3, [r2, r3]
    af1e:	0018      	movs	r0, r3
    af20:	4b0b      	ldr	r3, [pc, #44]	; (af50 <SIMEventManager+0x94>)
    af22:	4798      	blx	r3
    af24:	0003      	movs	r3, r0
    af26:	001a      	movs	r2, r3
    af28:	4b07      	ldr	r3, [pc, #28]	; (af48 <SIMEventManager+0x8c>)
    af2a:	551a      	strb	r2, [r3, r4]
	while(i--)
    af2c:	1dfb      	adds	r3, r7, #7
    af2e:	781b      	ldrb	r3, [r3, #0]
    af30:	1dfa      	adds	r2, r7, #7
    af32:	1e59      	subs	r1, r3, #1
    af34:	7011      	strb	r1, [r2, #0]
    af36:	2b00      	cmp	r3, #0
    af38:	d1e2      	bne.n	af00 <SIMEventManager+0x44>
	}
}
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	46bd      	mov	sp, r7
    af3e:	b003      	add	sp, #12
    af40:	bd90      	pop	{r4, r7, pc}
    af42:	46c0      	nop			; (mov r8, r8)
    af44:	20000628 	.word	0x20000628
    af48:	20000700 	.word	0x20000700
    af4c:	200007b4 	.word	0x200007b4
    af50:	000047a5 	.word	0x000047a5

0000af54 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
    af54:	b580      	push	{r7, lr}
    af56:	b084      	sub	sp, #16
    af58:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
    af5a:	4b6f      	ldr	r3, [pc, #444]	; (b118 <checkCurrentConsumption+0x1c4>)
    af5c:	781b      	ldrb	r3, [r3, #0]
    af5e:	2b00      	cmp	r3, #0
    af60:	d000      	beq.n	af64 <checkCurrentConsumption+0x10>
    af62:	e0d5      	b.n	b110 <checkCurrentConsumption+0x1bc>
    af64:	4b6d      	ldr	r3, [pc, #436]	; (b11c <checkCurrentConsumption+0x1c8>)
    af66:	781b      	ldrb	r3, [r3, #0]
    af68:	2b00      	cmp	r3, #0
    af6a:	d000      	beq.n	af6e <checkCurrentConsumption+0x1a>
    af6c:	e0d0      	b.n	b110 <checkCurrentConsumption+0x1bc>
    af6e:	4b6c      	ldr	r3, [pc, #432]	; (b120 <checkCurrentConsumption+0x1cc>)
    af70:	4798      	blx	r3
    af72:	0003      	movs	r3, r0
    af74:	001a      	movs	r2, r3
    af76:	2301      	movs	r3, #1
    af78:	4053      	eors	r3, r2
    af7a:	b2db      	uxtb	r3, r3
    af7c:	2b00      	cmp	r3, #0
    af7e:	d000      	beq.n	af82 <checkCurrentConsumption+0x2e>
    af80:	e0c6      	b.n	b110 <checkCurrentConsumption+0x1bc>
    af82:	4b68      	ldr	r3, [pc, #416]	; (b124 <checkCurrentConsumption+0x1d0>)
    af84:	7bdb      	ldrb	r3, [r3, #15]
    af86:	2b00      	cmp	r3, #0
    af88:	d100      	bne.n	af8c <checkCurrentConsumption+0x38>
    af8a:	e0c1      	b.n	b110 <checkCurrentConsumption+0x1bc>
    af8c:	4b66      	ldr	r3, [pc, #408]	; (b128 <checkCurrentConsumption+0x1d4>)
    af8e:	781b      	ldrb	r3, [r3, #0]
    af90:	2b00      	cmp	r3, #0
    af92:	d000      	beq.n	af96 <checkCurrentConsumption+0x42>
    af94:	e0bc      	b.n	b110 <checkCurrentConsumption+0x1bc>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
    af96:	4b65      	ldr	r3, [pc, #404]	; (b12c <checkCurrentConsumption+0x1d8>)
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	2b00      	cmp	r3, #0
    af9c:	d00b      	beq.n	afb6 <checkCurrentConsumption+0x62>
    af9e:	4b64      	ldr	r3, [pc, #400]	; (b130 <checkCurrentConsumption+0x1dc>)
    afa0:	4798      	blx	r3
    afa2:	0002      	movs	r2, r0
    afa4:	4b63      	ldr	r3, [pc, #396]	; (b134 <checkCurrentConsumption+0x1e0>)
    afa6:	681b      	ldr	r3, [r3, #0]
    afa8:	1ad3      	subs	r3, r2, r3
    afaa:	4a63      	ldr	r2, [pc, #396]	; (b138 <checkCurrentConsumption+0x1e4>)
    afac:	4293      	cmp	r3, r2
    afae:	d902      	bls.n	afb6 <checkCurrentConsumption+0x62>
	{
		enableCurrentBuffer=false;
    afb0:	4b5e      	ldr	r3, [pc, #376]	; (b12c <checkCurrentConsumption+0x1d8>)
    afb2:	2200      	movs	r2, #0
    afb4:	701a      	strb	r2, [r3, #0]
	}
	
	//lastCurrentReadingTime=xTaskGetTickCount();
	
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    afb6:	4b61      	ldr	r3, [pc, #388]	; (b13c <checkCurrentConsumption+0x1e8>)
    afb8:	691b      	ldr	r3, [r3, #16]
    afba:	607b      	str	r3, [r7, #4]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp = ADCcurrent;
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	603b      	str	r3, [r7, #0]
	
	uint32_t overLoadDetectValue=12000;
    afc0:	4b5f      	ldr	r3, [pc, #380]	; (b140 <checkCurrentConsumption+0x1ec>)
    afc2:	60fb      	str	r3, [r7, #12]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
    afc4:	4b59      	ldr	r3, [pc, #356]	; (b12c <checkCurrentConsumption+0x1d8>)
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2b00      	cmp	r3, #0
    afca:	d00c      	beq.n	afe6 <checkCurrentConsumption+0x92>
    afcc:	4b55      	ldr	r3, [pc, #340]	; (b124 <checkCurrentConsumption+0x1d0>)
    afce:	691b      	ldr	r3, [r3, #16]
    afd0:	005a      	lsls	r2, r3, #1
    afd2:	683b      	ldr	r3, [r7, #0]
    afd4:	429a      	cmp	r2, r3
    afd6:	d206      	bcs.n	afe6 <checkCurrentConsumption+0x92>
	{
		temp2 = CR_OVER2;
    afd8:	230b      	movs	r3, #11
    afda:	18fb      	adds	r3, r7, r3
    afdc:	2202      	movs	r2, #2
    afde:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
    afe0:	4b58      	ldr	r3, [pc, #352]	; (b144 <checkCurrentConsumption+0x1f0>)
    afe2:	60fb      	str	r3, [r7, #12]
    afe4:	e055      	b.n	b092 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
    afe6:	4b51      	ldr	r3, [pc, #324]	; (b12c <checkCurrentConsumption+0x1d8>)
    afe8:	781b      	ldrb	r3, [r3, #0]
    afea:	2201      	movs	r2, #1
    afec:	4053      	eors	r3, r2
    afee:	b2db      	uxtb	r3, r3
    aff0:	2b00      	cmp	r3, #0
    aff2:	d00d      	beq.n	b010 <checkCurrentConsumption+0xbc>
    aff4:	4b4b      	ldr	r3, [pc, #300]	; (b124 <checkCurrentConsumption+0x1d0>)
    aff6:	691b      	ldr	r3, [r3, #16]
    aff8:	005a      	lsls	r2, r3, #1
    affa:	683b      	ldr	r3, [r7, #0]
    affc:	429a      	cmp	r2, r3
    affe:	d207      	bcs.n	b010 <checkCurrentConsumption+0xbc>
	{
		temp2 = CR_OVER;
    b000:	230b      	movs	r3, #11
    b002:	18fb      	adds	r3, r7, r3
    b004:	2201      	movs	r2, #1
    b006:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    b008:	68fb      	ldr	r3, [r7, #12]
    b00a:	089b      	lsrs	r3, r3, #2
    b00c:	60fb      	str	r3, [r7, #12]
    b00e:	e040      	b.n	b092 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
    b010:	4b46      	ldr	r3, [pc, #280]	; (b12c <checkCurrentConsumption+0x1d8>)
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	2201      	movs	r2, #1
    b016:	4053      	eors	r3, r2
    b018:	b2db      	uxtb	r3, r3
    b01a:	2b00      	cmp	r3, #0
    b01c:	d010      	beq.n	b040 <checkCurrentConsumption+0xec>
    b01e:	4b41      	ldr	r3, [pc, #260]	; (b124 <checkCurrentConsumption+0x1d0>)
    b020:	691a      	ldr	r2, [r3, #16]
    b022:	4b40      	ldr	r3, [pc, #256]	; (b124 <checkCurrentConsumption+0x1d0>)
    b024:	691b      	ldr	r3, [r3, #16]
    b026:	085b      	lsrs	r3, r3, #1
    b028:	18d2      	adds	r2, r2, r3
    b02a:	683b      	ldr	r3, [r7, #0]
    b02c:	429a      	cmp	r2, r3
    b02e:	d207      	bcs.n	b040 <checkCurrentConsumption+0xec>
	{
		temp2 = CR_OVER;
    b030:	230b      	movs	r3, #11
    b032:	18fb      	adds	r3, r7, r3
    b034:	2201      	movs	r2, #1
    b036:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
    b038:	68fb      	ldr	r3, [r7, #12]
    b03a:	085b      	lsrs	r3, r3, #1
    b03c:	60fb      	str	r3, [r7, #12]
    b03e:	e028      	b.n	b092 <checkCurrentConsumption+0x13e>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
    b040:	4b3a      	ldr	r3, [pc, #232]	; (b12c <checkCurrentConsumption+0x1d8>)
    b042:	781b      	ldrb	r3, [r3, #0]
    b044:	2201      	movs	r2, #1
    b046:	4053      	eors	r3, r2
    b048:	b2db      	uxtb	r3, r3
    b04a:	2b00      	cmp	r3, #0
    b04c:	d009      	beq.n	b062 <checkCurrentConsumption+0x10e>
    b04e:	4b35      	ldr	r3, [pc, #212]	; (b124 <checkCurrentConsumption+0x1d0>)
    b050:	695a      	ldr	r2, [r3, #20]
    b052:	683b      	ldr	r3, [r7, #0]
    b054:	429a      	cmp	r2, r3
    b056:	d204      	bcs.n	b062 <checkCurrentConsumption+0x10e>
	{
		temp2 = CR_OVER;
    b058:	230b      	movs	r3, #11
    b05a:	18fb      	adds	r3, r7, r3
    b05c:	2201      	movs	r2, #1
    b05e:	701a      	strb	r2, [r3, #0]
    b060:	e017      	b.n	b092 <checkCurrentConsumption+0x13e>
	}
	else if(temp < user_settings_parameter_struct.underloadAddress && !enableCurrentBuffer)		// only consider noLoad after 30 secs
    b062:	4b30      	ldr	r3, [pc, #192]	; (b124 <checkCurrentConsumption+0x1d0>)
    b064:	699a      	ldr	r2, [r3, #24]
    b066:	683b      	ldr	r3, [r7, #0]
    b068:	429a      	cmp	r2, r3
    b06a:	d90e      	bls.n	b08a <checkCurrentConsumption+0x136>
    b06c:	4b2f      	ldr	r3, [pc, #188]	; (b12c <checkCurrentConsumption+0x1d8>)
    b06e:	781b      	ldrb	r3, [r3, #0]
    b070:	2201      	movs	r2, #1
    b072:	4053      	eors	r3, r2
    b074:	b2db      	uxtb	r3, r3
    b076:	2b00      	cmp	r3, #0
    b078:	d007      	beq.n	b08a <checkCurrentConsumption+0x136>
	{
		temp2 = CR_UNDER;
    b07a:	230b      	movs	r3, #11
    b07c:	18fb      	adds	r3, r7, r3
    b07e:	2202      	movs	r2, #2
    b080:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    b082:	68fb      	ldr	r3, [r7, #12]
    b084:	089b      	lsrs	r3, r3, #2
    b086:	60fb      	str	r3, [r7, #12]
    b088:	e003      	b.n	b092 <checkCurrentConsumption+0x13e>
	}
	else
	{
		temp2= CR_NORMAL;
    b08a:	230b      	movs	r3, #11
    b08c:	18fb      	adds	r3, r7, r3
    b08e:	2200      	movs	r2, #0
    b090:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
    b092:	4b2d      	ldr	r3, [pc, #180]	; (b148 <checkCurrentConsumption+0x1f4>)
    b094:	781b      	ldrb	r3, [r3, #0]
    b096:	220b      	movs	r2, #11
    b098:	18ba      	adds	r2, r7, r2
    b09a:	7812      	ldrb	r2, [r2, #0]
    b09c:	429a      	cmp	r2, r3
    b09e:	d12c      	bne.n	b0fa <checkCurrentConsumption+0x1a6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
    b0a0:	4b23      	ldr	r3, [pc, #140]	; (b130 <checkCurrentConsumption+0x1dc>)
    b0a2:	4798      	blx	r3
    b0a4:	0002      	movs	r2, r0
    b0a6:	4b29      	ldr	r3, [pc, #164]	; (b14c <checkCurrentConsumption+0x1f8>)
    b0a8:	681b      	ldr	r3, [r3, #0]
    b0aa:	1ad2      	subs	r2, r2, r3
    b0ac:	68fb      	ldr	r3, [r7, #12]
    b0ae:	429a      	cmp	r2, r3
    b0b0:	d92f      	bls.n	b112 <checkCurrentConsumption+0x1be>
		{
			if(temp2==CR_OVER)
    b0b2:	230b      	movs	r3, #11
    b0b4:	18fb      	adds	r3, r7, r3
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	2b01      	cmp	r3, #1
    b0ba:	d10c      	bne.n	b0d6 <checkCurrentConsumption+0x182>
			{
				stopMotor(false,true,false);
    b0bc:	2200      	movs	r2, #0
    b0be:	2101      	movs	r1, #1
    b0c0:	2000      	movs	r0, #0
    b0c2:	4b23      	ldr	r3, [pc, #140]	; (b150 <checkCurrentConsumption+0x1fc>)
    b0c4:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
    b0c6:	2042      	movs	r0, #66	; 0x42
    b0c8:	4b22      	ldr	r3, [pc, #136]	; (b154 <checkCurrentConsumption+0x200>)
    b0ca:	4798      	blx	r3
    b0cc:	0003      	movs	r3, r0
    b0ce:	001a      	movs	r2, r3
    b0d0:	4b21      	ldr	r3, [pc, #132]	; (b158 <checkCurrentConsumption+0x204>)
    b0d2:	731a      	strb	r2, [r3, #12]
    b0d4:	e01d      	b.n	b112 <checkCurrentConsumption+0x1be>
			}
			else if(temp2==CR_UNDER)
    b0d6:	230b      	movs	r3, #11
    b0d8:	18fb      	adds	r3, r7, r3
    b0da:	781b      	ldrb	r3, [r3, #0]
    b0dc:	2b02      	cmp	r3, #2
    b0de:	d118      	bne.n	b112 <checkCurrentConsumption+0x1be>
			{
				stopMotor(false,true,false);
    b0e0:	2200      	movs	r2, #0
    b0e2:	2101      	movs	r1, #1
    b0e4:	2000      	movs	r0, #0
    b0e6:	4b1a      	ldr	r3, [pc, #104]	; (b150 <checkCurrentConsumption+0x1fc>)
    b0e8:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
    b0ea:	204a      	movs	r0, #74	; 0x4a
    b0ec:	4b19      	ldr	r3, [pc, #100]	; (b154 <checkCurrentConsumption+0x200>)
    b0ee:	4798      	blx	r3
    b0f0:	0003      	movs	r3, r0
    b0f2:	001a      	movs	r2, r3
    b0f4:	4b18      	ldr	r3, [pc, #96]	; (b158 <checkCurrentConsumption+0x204>)
    b0f6:	735a      	strb	r2, [r3, #13]
    b0f8:	e00b      	b.n	b112 <checkCurrentConsumption+0x1be>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
    b0fa:	4b0d      	ldr	r3, [pc, #52]	; (b130 <checkCurrentConsumption+0x1dc>)
    b0fc:	4798      	blx	r3
    b0fe:	0002      	movs	r2, r0
    b100:	4b12      	ldr	r3, [pc, #72]	; (b14c <checkCurrentConsumption+0x1f8>)
    b102:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
    b104:	4b10      	ldr	r3, [pc, #64]	; (b148 <checkCurrentConsumption+0x1f4>)
    b106:	220b      	movs	r2, #11
    b108:	18ba      	adds	r2, r7, r2
    b10a:	7812      	ldrb	r2, [r2, #0]
    b10c:	701a      	strb	r2, [r3, #0]
    b10e:	e000      	b.n	b112 <checkCurrentConsumption+0x1be>
		return;
    b110:	46c0      	nop			; (mov r8, r8)
	}
}
    b112:	46bd      	mov	sp, r7
    b114:	b004      	add	sp, #16
    b116:	bd80      	pop	{r7, pc}
    b118:	20000771 	.word	0x20000771
    b11c:	20000761 	.word	0x20000761
    b120:	00009f95 	.word	0x00009f95
    b124:	2000065c 	.word	0x2000065c
    b128:	20000773 	.word	0x20000773
    b12c:	20000738 	.word	0x20000738
    b130:	0000f40d 	.word	0x0000f40d
    b134:	2000076c 	.word	0x2000076c
    b138:	00007530 	.word	0x00007530
    b13c:	200006dc 	.word	0x200006dc
    b140:	00002ee0 	.word	0x00002ee0
    b144:	00004650 	.word	0x00004650
    b148:	2000075e 	.word	0x2000075e
    b14c:	20000744 	.word	0x20000744
    b150:	0000a895 	.word	0x0000a895
    b154:	000047a5 	.word	0x000047a5
    b158:	20000700 	.word	0x20000700

0000b15c <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
    b15c:	b580      	push	{r7, lr}
    b15e:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
    b160:	4b02      	ldr	r3, [pc, #8]	; (b16c <button_detect_pin_callback+0x10>)
    b162:	2201      	movs	r2, #1
    b164:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	46bd      	mov	sp, r7
    b16a:	bd80      	pop	{r7, pc}
    b16c:	20000777 	.word	0x20000777

0000b170 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
    b170:	b590      	push	{r4, r7, lr}
    b172:	b087      	sub	sp, #28
    b174:	af00      	add	r7, sp, #0
    b176:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
    b178:	4bc1      	ldr	r3, [pc, #772]	; (b480 <vTask_MOTORCONTROL+0x310>)
    b17a:	4798      	blx	r3
	
	configure_ac();
    b17c:	4bc1      	ldr	r3, [pc, #772]	; (b484 <vTask_MOTORCONTROL+0x314>)
    b17e:	4798      	blx	r3
	configure_rtc();
    b180:	4bc1      	ldr	r3, [pc, #772]	; (b488 <vTask_MOTORCONTROL+0x318>)
    b182:	4798      	blx	r3
	configure_event();
    b184:	4bc1      	ldr	r3, [pc, #772]	; (b48c <vTask_MOTORCONTROL+0x31c>)
    b186:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
    b188:	4bc1      	ldr	r3, [pc, #772]	; (b490 <vTask_MOTORCONTROL+0x320>)
    b18a:	2200      	movs	r2, #0
    b18c:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
    b18e:	4bc1      	ldr	r3, [pc, #772]	; (b494 <vTask_MOTORCONTROL+0x324>)
    b190:	2200      	movs	r2, #0
    b192:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
    b194:	4bc0      	ldr	r3, [pc, #768]	; (b498 <vTask_MOTORCONTROL+0x328>)
    b196:	2200      	movs	r2, #0
    b198:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    b19a:	2315      	movs	r3, #21
    b19c:	18fb      	adds	r3, r7, r3
    b19e:	2201      	movs	r2, #1
    b1a0:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
    b1a2:	4bbe      	ldr	r3, [pc, #760]	; (b49c <vTask_MOTORCONTROL+0x32c>)
    b1a4:	4798      	blx	r3
    b1a6:	0003      	movs	r3, r0
    b1a8:	613b      	str	r3, [r7, #16]
	firstEvent = true;
    b1aa:	4bbd      	ldr	r3, [pc, #756]	; (b4a0 <vTask_MOTORCONTROL+0x330>)
    b1ac:	2201      	movs	r2, #1
    b1ae:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    b1b0:	2315      	movs	r3, #21
    b1b2:	18fc      	adds	r4, r7, r3
    b1b4:	4bbb      	ldr	r3, [pc, #748]	; (b4a4 <vTask_MOTORCONTROL+0x334>)
    b1b6:	2100      	movs	r1, #0
    b1b8:	0018      	movs	r0, r3
    b1ba:	4bbb      	ldr	r3, [pc, #748]	; (b4a8 <vTask_MOTORCONTROL+0x338>)
    b1bc:	4798      	blx	r3
    b1be:	0003      	movs	r3, r0
    b1c0:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    b1c2:	23fa      	movs	r3, #250	; 0xfa
    b1c4:	005b      	lsls	r3, r3, #1
    b1c6:	0018      	movs	r0, r3
    b1c8:	4bb8      	ldr	r3, [pc, #736]	; (b4ac <vTask_MOTORCONTROL+0x33c>)
    b1ca:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    b1cc:	2315      	movs	r3, #21
    b1ce:	18fc      	adds	r4, r7, r3
    b1d0:	4bb4      	ldr	r3, [pc, #720]	; (b4a4 <vTask_MOTORCONTROL+0x334>)
    b1d2:	2100      	movs	r1, #0
    b1d4:	0018      	movs	r0, r3
    b1d6:	4bb4      	ldr	r3, [pc, #720]	; (b4a8 <vTask_MOTORCONTROL+0x338>)
    b1d8:	4798      	blx	r3
    b1da:	0003      	movs	r3, r0
    b1dc:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    b1de:	2315      	movs	r3, #21
    b1e0:	18fb      	adds	r3, r7, r3
    b1e2:	781b      	ldrb	r3, [r3, #0]
    b1e4:	2204      	movs	r2, #4
    b1e6:	4013      	ands	r3, r2
    b1e8:	d003      	beq.n	b1f2 <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
    b1ea:	4bb1      	ldr	r3, [pc, #708]	; (b4b0 <vTask_MOTORCONTROL+0x340>)
    b1ec:	2201      	movs	r2, #1
    b1ee:	701a      	strb	r2, [r3, #0]
    b1f0:	e002      	b.n	b1f8 <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
    b1f2:	4baf      	ldr	r3, [pc, #700]	; (b4b0 <vTask_MOTORCONTROL+0x340>)
    b1f4:	2200      	movs	r2, #0
    b1f6:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
    b1f8:	4bae      	ldr	r3, [pc, #696]	; (b4b4 <vTask_MOTORCONTROL+0x344>)
    b1fa:	2200      	movs	r2, #0
    b1fc:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
    b1fe:	4bae      	ldr	r3, [pc, #696]	; (b4b8 <vTask_MOTORCONTROL+0x348>)
    b200:	2200      	movs	r2, #0
    b202:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
    b204:	4bad      	ldr	r3, [pc, #692]	; (b4bc <vTask_MOTORCONTROL+0x34c>)
    b206:	220a      	movs	r2, #10
    b208:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
    b20a:	4bad      	ldr	r3, [pc, #692]	; (b4c0 <vTask_MOTORCONTROL+0x350>)
    b20c:	2200      	movs	r2, #0
    b20e:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
    b210:	4bac      	ldr	r3, [pc, #688]	; (b4c4 <vTask_MOTORCONTROL+0x354>)
    b212:	2214      	movs	r2, #20
    b214:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
    b216:	4bac      	ldr	r3, [pc, #688]	; (b4c8 <vTask_MOTORCONTROL+0x358>)
    b218:	2200      	movs	r2, #0
    b21a:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
    b21c:	4bab      	ldr	r3, [pc, #684]	; (b4cc <vTask_MOTORCONTROL+0x35c>)
    b21e:	2200      	movs	r2, #0
    b220:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
    b222:	4bab      	ldr	r3, [pc, #684]	; (b4d0 <vTask_MOTORCONTROL+0x360>)
    b224:	2214      	movs	r2, #20
    b226:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
    b228:	4baa      	ldr	r3, [pc, #680]	; (b4d4 <vTask_MOTORCONTROL+0x364>)
    b22a:	2200      	movs	r2, #0
    b22c:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
    b22e:	2000      	movs	r0, #0
    b230:	4ba9      	ldr	r3, [pc, #676]	; (b4d8 <vTask_MOTORCONTROL+0x368>)
    b232:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
    b234:	2000      	movs	r0, #0
    b236:	4ba9      	ldr	r3, [pc, #676]	; (b4dc <vTask_MOTORCONTROL+0x36c>)
    b238:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
    b23a:	2000      	movs	r0, #0
    b23c:	4ba8      	ldr	r3, [pc, #672]	; (b4e0 <vTask_MOTORCONTROL+0x370>)
    b23e:	4798      	blx	r3
	
	lastPressTime=0;
    b240:	4ba8      	ldr	r3, [pc, #672]	; (b4e4 <vTask_MOTORCONTROL+0x374>)
    b242:	2200      	movs	r2, #0
    b244:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
    b246:	4ba8      	ldr	r3, [pc, #672]	; (b4e8 <vTask_MOTORCONTROL+0x378>)
    b248:	2200      	movs	r2, #0
    b24a:	701a      	strb	r2, [r3, #0]
	
	uint8_t i= 0;
    b24c:	2317      	movs	r3, #23
    b24e:	18fb      	adds	r3, r7, r3
    b250:	2200      	movs	r2, #0
    b252:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b254:	4ba5      	ldr	r3, [pc, #660]	; (b4ec <vTask_MOTORCONTROL+0x37c>)
    b256:	785b      	ldrb	r3, [r3, #1]
    b258:	2b00      	cmp	r3, #0
    b25a:	d004      	beq.n	b266 <vTask_MOTORCONTROL+0xf6>
	{
		i=14;
    b25c:	2317      	movs	r3, #23
    b25e:	18fb      	adds	r3, r7, r3
    b260:	220e      	movs	r2, #14
    b262:	701a      	strb	r2, [r3, #0]
    b264:	e00a      	b.n	b27c <vTask_MOTORCONTROL+0x10c>
	}
	else
	{
		i = 12;
    b266:	2317      	movs	r3, #23
    b268:	18fb      	adds	r3, r7, r3
    b26a:	220c      	movs	r2, #12
    b26c:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
    b26e:	e005      	b.n	b27c <vTask_MOTORCONTROL+0x10c>
	{
		simEventTemp[i] = true;
    b270:	2317      	movs	r3, #23
    b272:	18fb      	adds	r3, r7, r3
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	4a9e      	ldr	r2, [pc, #632]	; (b4f0 <vTask_MOTORCONTROL+0x380>)
    b278:	2101      	movs	r1, #1
    b27a:	54d1      	strb	r1, [r2, r3]
	while(i--)
    b27c:	2317      	movs	r3, #23
    b27e:	18fb      	adds	r3, r7, r3
    b280:	781b      	ldrb	r3, [r3, #0]
    b282:	2217      	movs	r2, #23
    b284:	18ba      	adds	r2, r7, r2
    b286:	1e59      	subs	r1, r3, #1
    b288:	7011      	strb	r1, [r2, #0]
    b28a:	2b00      	cmp	r3, #0
    b28c:	d1f0      	bne.n	b270 <vTask_MOTORCONTROL+0x100>
	}
	simEvent[0] = 'N';
    b28e:	4b99      	ldr	r3, [pc, #612]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b290:	224e      	movs	r2, #78	; 0x4e
    b292:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
    b294:	4b97      	ldr	r3, [pc, #604]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b296:	2250      	movs	r2, #80	; 0x50
    b298:	705a      	strb	r2, [r3, #1]
	simEvent[2] = 'U';
    b29a:	4b96      	ldr	r3, [pc, #600]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b29c:	2255      	movs	r2, #85	; 0x55
    b29e:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
    b2a0:	4b94      	ldr	r3, [pc, #592]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2a2:	2246      	movs	r2, #70	; 0x46
    b2a4:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
    b2a6:	4b93      	ldr	r3, [pc, #588]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2a8:	2247      	movs	r2, #71	; 0x47
    b2aa:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
    b2ac:	4b91      	ldr	r3, [pc, #580]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2ae:	224c      	movs	r2, #76	; 0x4c
    b2b0:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
    b2b2:	4b90      	ldr	r3, [pc, #576]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2b4:	2243      	movs	r2, #67	; 0x43
    b2b6:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
    b2b8:	4b8e      	ldr	r3, [pc, #568]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2ba:	2253      	movs	r2, #83	; 0x53
    b2bc:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
    b2be:	4b8d      	ldr	r3, [pc, #564]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2c0:	224f      	movs	r2, #79	; 0x4f
    b2c2:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
    b2c4:	4b8b      	ldr	r3, [pc, #556]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2c6:	2241      	movs	r2, #65	; 0x41
    b2c8:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
    b2ca:	4b8a      	ldr	r3, [pc, #552]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2cc:	2229      	movs	r2, #41	; 0x29
    b2ce:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
    b2d0:	4b88      	ldr	r3, [pc, #544]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2d2:	225b      	movs	r2, #91	; 0x5b
    b2d4:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b2d6:	4b85      	ldr	r3, [pc, #532]	; (b4ec <vTask_MOTORCONTROL+0x37c>)
    b2d8:	785b      	ldrb	r3, [r3, #1]
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d005      	beq.n	b2ea <vTask_MOTORCONTROL+0x17a>
	{
		simEvent[12] = 'B';		//Overload Event
    b2de:	4b85      	ldr	r3, [pc, #532]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2e0:	2242      	movs	r2, #66	; 0x42
    b2e2:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
    b2e4:	4b83      	ldr	r3, [pc, #524]	; (b4f4 <vTask_MOTORCONTROL+0x384>)
    b2e6:	224a      	movs	r2, #74	; 0x4a
    b2e8:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
    b2ea:	2001      	movs	r0, #1
    b2ec:	4b82      	ldr	r3, [pc, #520]	; (b4f8 <vTask_MOTORCONTROL+0x388>)
    b2ee:	4798      	blx	r3
	eventOccured=true;
    b2f0:	4b69      	ldr	r3, [pc, #420]	; (b498 <vTask_MOTORCONTROL+0x328>)
    b2f2:	2201      	movs	r2, #1
    b2f4:	701a      	strb	r2, [r3, #0]

	
	for (;;)
	{
		
		if(taskPSet)
    b2f6:	4b81      	ldr	r3, [pc, #516]	; (b4fc <vTask_MOTORCONTROL+0x38c>)
    b2f8:	781b      	ldrb	r3, [r3, #0]
    b2fa:	b2db      	uxtb	r3, r3
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d006      	beq.n	b30e <vTask_MOTORCONTROL+0x19e>
		{
			vTaskPrioritySet(NULL,1);
    b300:	2101      	movs	r1, #1
    b302:	2000      	movs	r0, #0
    b304:	4b7e      	ldr	r3, [pc, #504]	; (b500 <vTask_MOTORCONTROL+0x390>)
    b306:	4798      	blx	r3
			taskPSet=false;
    b308:	4b7c      	ldr	r3, [pc, #496]	; (b4fc <vTask_MOTORCONTROL+0x38c>)
    b30a:	2200      	movs	r2, #0
    b30c:	701a      	strb	r2, [r3, #0]
		}
		
		if(!startSequenceOn && !stopSequenceOn)
    b30e:	4b6f      	ldr	r3, [pc, #444]	; (b4cc <vTask_MOTORCONTROL+0x35c>)
    b310:	781b      	ldrb	r3, [r3, #0]
    b312:	2201      	movs	r2, #1
    b314:	4053      	eors	r3, r2
    b316:	b2db      	uxtb	r3, r3
    b318:	2b00      	cmp	r3, #0
    b31a:	d030      	beq.n	b37e <vTask_MOTORCONTROL+0x20e>
    b31c:	4b6d      	ldr	r3, [pc, #436]	; (b4d4 <vTask_MOTORCONTROL+0x364>)
    b31e:	781b      	ldrb	r3, [r3, #0]
    b320:	2201      	movs	r2, #1
    b322:	4053      	eors	r3, r2
    b324:	b2db      	uxtb	r3, r3
    b326:	2b00      	cmp	r3, #0
    b328:	d029      	beq.n	b37e <vTask_MOTORCONTROL+0x20e>
		{
			uint8_t tempEventOccured=eventOccured;
    b32a:	4b5b      	ldr	r3, [pc, #364]	; (b498 <vTask_MOTORCONTROL+0x328>)
    b32c:	781b      	ldrb	r3, [r3, #0]
    b32e:	b2da      	uxtb	r2, r3
    b330:	230f      	movs	r3, #15
    b332:	18fb      	adds	r3, r7, r3
    b334:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
    b336:	4b73      	ldr	r3, [pc, #460]	; (b504 <vTask_MOTORCONTROL+0x394>)
    b338:	781b      	ldrb	r3, [r3, #0]
    b33a:	b2da      	uxtb	r2, r3
    b33c:	230e      	movs	r3, #14
    b33e:	18fb      	adds	r3, r7, r3
    b340:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
    b342:	230f      	movs	r3, #15
    b344:	18fb      	adds	r3, r7, r3
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	2b00      	cmp	r3, #0
    b34a:	d011      	beq.n	b370 <vTask_MOTORCONTROL+0x200>
			{
				if(firstEvent)
    b34c:	4b54      	ldr	r3, [pc, #336]	; (b4a0 <vTask_MOTORCONTROL+0x330>)
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	2b00      	cmp	r3, #0
    b352:	d00b      	beq.n	b36c <vTask_MOTORCONTROL+0x1fc>
				{
					if(xTaskGetTickCount()-delayForFirstEvent>35000L)
    b354:	4b51      	ldr	r3, [pc, #324]	; (b49c <vTask_MOTORCONTROL+0x32c>)
    b356:	4798      	blx	r3
    b358:	0002      	movs	r2, r0
    b35a:	693b      	ldr	r3, [r7, #16]
    b35c:	1ad3      	subs	r3, r2, r3
    b35e:	4a6a      	ldr	r2, [pc, #424]	; (b508 <vTask_MOTORCONTROL+0x398>)
    b360:	4293      	cmp	r3, r2
    b362:	d905      	bls.n	b370 <vTask_MOTORCONTROL+0x200>
					{
						firstEvent = false;
    b364:	4b4e      	ldr	r3, [pc, #312]	; (b4a0 <vTask_MOTORCONTROL+0x330>)
    b366:	2200      	movs	r2, #0
    b368:	701a      	strb	r2, [r3, #0]
    b36a:	e001      	b.n	b370 <vTask_MOTORCONTROL+0x200>
					}
				}
				else
				{
					operateOnEvent();
    b36c:	4b67      	ldr	r3, [pc, #412]	; (b50c <vTask_MOTORCONTROL+0x39c>)
    b36e:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
    b370:	4b5d      	ldr	r3, [pc, #372]	; (b4e8 <vTask_MOTORCONTROL+0x378>)
    b372:	781b      	ldrb	r3, [r3, #0]
    b374:	b2db      	uxtb	r3, r3
    b376:	2b00      	cmp	r3, #0
    b378:	d001      	beq.n	b37e <vTask_MOTORCONTROL+0x20e>
			{
				buttonFilter();
    b37a:	4b65      	ldr	r3, [pc, #404]	; (b510 <vTask_MOTORCONTROL+0x3a0>)
    b37c:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
    b37e:	4b65      	ldr	r3, [pc, #404]	; (b514 <vTask_MOTORCONTROL+0x3a4>)
    b380:	4798      	blx	r3
    b382:	1e03      	subs	r3, r0, #0
    b384:	d003      	beq.n	b38e <vTask_MOTORCONTROL+0x21e>
			detect_battery_voltage_and_percentage();
    b386:	4b64      	ldr	r3, [pc, #400]	; (b518 <vTask_MOTORCONTROL+0x3a8>)
    b388:	4798      	blx	r3
			detect_Three_Phase_Voltage();
    b38a:	4b64      	ldr	r3, [pc, #400]	; (b51c <vTask_MOTORCONTROL+0x3ac>)
    b38c:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b38e:	4b57      	ldr	r3, [pc, #348]	; (b4ec <vTask_MOTORCONTROL+0x37c>)
    b390:	785b      	ldrb	r3, [r3, #1]
    b392:	2b00      	cmp	r3, #0
    b394:	d013      	beq.n	b3be <vTask_MOTORCONTROL+0x24e>
		{
			if(should_Detect_New_Current()) {
    b396:	4b62      	ldr	r3, [pc, #392]	; (b520 <vTask_MOTORCONTROL+0x3b0>)
    b398:	4798      	blx	r3
    b39a:	1e03      	subs	r3, r0, #0
    b39c:	d00f      	beq.n	b3be <vTask_MOTORCONTROL+0x24e>
				detect_Motor_Current();
    b39e:	4b61      	ldr	r3, [pc, #388]	; (b524 <vTask_MOTORCONTROL+0x3b4>)
    b3a0:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
    b3a2:	4b61      	ldr	r3, [pc, #388]	; (b528 <vTask_MOTORCONTROL+0x3b8>)
    b3a4:	2225      	movs	r2, #37	; 0x25
    b3a6:	5c9b      	ldrb	r3, [r3, r2]
    b3a8:	2b01      	cmp	r3, #1
    b3aa:	d106      	bne.n	b3ba <vTask_MOTORCONTROL+0x24a>
				{
					if(detectMotorStateChangeUsingCurrent())
    b3ac:	4b5f      	ldr	r3, [pc, #380]	; (b52c <vTask_MOTORCONTROL+0x3bc>)
    b3ae:	4798      	blx	r3
    b3b0:	1e03      	subs	r3, r0, #0
    b3b2:	d002      	beq.n	b3ba <vTask_MOTORCONTROL+0x24a>
					{
						eventOccured=true;
    b3b4:	4b38      	ldr	r3, [pc, #224]	; (b498 <vTask_MOTORCONTROL+0x328>)
    b3b6:	2201      	movs	r2, #1
    b3b8:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
    b3ba:	4b5d      	ldr	r3, [pc, #372]	; (b530 <vTask_MOTORCONTROL+0x3c0>)
    b3bc:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
    b3be:	4b5d      	ldr	r3, [pc, #372]	; (b534 <vTask_MOTORCONTROL+0x3c4>)
    b3c0:	781b      	ldrb	r3, [r3, #0]
    b3c2:	2b00      	cmp	r3, #0
    b3c4:	d005      	beq.n	b3d2 <vTask_MOTORCONTROL+0x262>
    b3c6:	4b5c      	ldr	r3, [pc, #368]	; (b538 <vTask_MOTORCONTROL+0x3c8>)
    b3c8:	4798      	blx	r3
    b3ca:	1e03      	subs	r3, r0, #0
    b3cc:	d001      	beq.n	b3d2 <vTask_MOTORCONTROL+0x262>
		{
			operateOnStableLine();
    b3ce:	4b5b      	ldr	r3, [pc, #364]	; (b53c <vTask_MOTORCONTROL+0x3cc>)
    b3d0:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
    b3d2:	4b5b      	ldr	r3, [pc, #364]	; (b540 <vTask_MOTORCONTROL+0x3d0>)
    b3d4:	781b      	ldrb	r3, [r3, #0]
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d00b      	beq.n	b3f2 <vTask_MOTORCONTROL+0x282>
    b3da:	4b30      	ldr	r3, [pc, #192]	; (b49c <vTask_MOTORCONTROL+0x32c>)
    b3dc:	4798      	blx	r3
    b3de:	0002      	movs	r2, r0
    b3e0:	4b58      	ldr	r3, [pc, #352]	; (b544 <vTask_MOTORCONTROL+0x3d4>)
    b3e2:	681b      	ldr	r3, [r3, #0]
    b3e4:	1ad3      	subs	r3, r2, r3
    b3e6:	4a58      	ldr	r2, [pc, #352]	; (b548 <vTask_MOTORCONTROL+0x3d8>)
    b3e8:	4293      	cmp	r3, r2
    b3ea:	d902      	bls.n	b3f2 <vTask_MOTORCONTROL+0x282>
		{
			stopMotorCommandGiven=false;
    b3ec:	4b54      	ldr	r3, [pc, #336]	; (b540 <vTask_MOTORCONTROL+0x3d0>)
    b3ee:	2200      	movs	r2, #0
    b3f0:	701a      	strb	r2, [r3, #0]
		}
		
		if(singlePhasingTimerOn)
    b3f2:	4b33      	ldr	r3, [pc, #204]	; (b4c0 <vTask_MOTORCONTROL+0x350>)
    b3f4:	781b      	ldrb	r3, [r3, #0]
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d01a      	beq.n	b430 <vTask_MOTORCONTROL+0x2c0>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
    b3fa:	4b54      	ldr	r3, [pc, #336]	; (b54c <vTask_MOTORCONTROL+0x3dc>)
    b3fc:	785b      	ldrb	r3, [r3, #1]
    b3fe:	b2db      	uxtb	r3, r3
    b400:	2b03      	cmp	r3, #3
    b402:	d003      	beq.n	b40c <vTask_MOTORCONTROL+0x29c>
			{
				b = false;
    b404:	2316      	movs	r3, #22
    b406:	18fb      	adds	r3, r7, r3
    b408:	2200      	movs	r2, #0
    b40a:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
    b40c:	2316      	movs	r3, #22
    b40e:	18fb      	adds	r3, r7, r3
    b410:	781b      	ldrb	r3, [r3, #0]
    b412:	2201      	movs	r2, #1
    b414:	4053      	eors	r3, r2
    b416:	b2db      	uxtb	r3, r3
    b418:	2b00      	cmp	r3, #0
    b41a:	d006      	beq.n	b42a <vTask_MOTORCONTROL+0x2ba>
			{
				if(singlePhasingTimerOver())
    b41c:	4b4c      	ldr	r3, [pc, #304]	; (b550 <vTask_MOTORCONTROL+0x3e0>)
    b41e:	4798      	blx	r3
    b420:	1e03      	subs	r3, r0, #0
    b422:	d005      	beq.n	b430 <vTask_MOTORCONTROL+0x2c0>
				{
					operateOnSinglePhasing();
    b424:	4b4b      	ldr	r3, [pc, #300]	; (b554 <vTask_MOTORCONTROL+0x3e4>)
    b426:	4798      	blx	r3
    b428:	e002      	b.n	b430 <vTask_MOTORCONTROL+0x2c0>
				}
			}
			else
			{
				singlePhasingTimerOn=false;
    b42a:	4b25      	ldr	r3, [pc, #148]	; (b4c0 <vTask_MOTORCONTROL+0x350>)
    b42c:	2200      	movs	r2, #0
    b42e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
    b430:	4b21      	ldr	r3, [pc, #132]	; (b4b8 <vTask_MOTORCONTROL+0x348>)
    b432:	781b      	ldrb	r3, [r3, #0]
    b434:	2b00      	cmp	r3, #0
    b436:	d007      	beq.n	b448 <vTask_MOTORCONTROL+0x2d8>
		{
			if (startMotorTimerOver())
    b438:	4b47      	ldr	r3, [pc, #284]	; (b558 <vTask_MOTORCONTROL+0x3e8>)
    b43a:	4798      	blx	r3
    b43c:	1e03      	subs	r3, r0, #0
    b43e:	d003      	beq.n	b448 <vTask_MOTORCONTROL+0x2d8>
			{
				startMotor(false,false);
    b440:	2100      	movs	r1, #0
    b442:	2000      	movs	r0, #0
    b444:	4b45      	ldr	r3, [pc, #276]	; (b55c <vTask_MOTORCONTROL+0x3ec>)
    b446:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
    b448:	4b20      	ldr	r3, [pc, #128]	; (b4cc <vTask_MOTORCONTROL+0x35c>)
    b44a:	781b      	ldrb	r3, [r3, #0]
    b44c:	2b00      	cmp	r3, #0
    b44e:	d001      	beq.n	b454 <vTask_MOTORCONTROL+0x2e4>
		{
			terminateStartRelay();
    b450:	4b43      	ldr	r3, [pc, #268]	; (b560 <vTask_MOTORCONTROL+0x3f0>)
    b452:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
    b454:	4b1c      	ldr	r3, [pc, #112]	; (b4c8 <vTask_MOTORCONTROL+0x358>)
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	2b00      	cmp	r3, #0
    b45a:	d001      	beq.n	b460 <vTask_MOTORCONTROL+0x2f0>
		{
			terminateStarDeltaTimer();
    b45c:	4b41      	ldr	r3, [pc, #260]	; (b564 <vTask_MOTORCONTROL+0x3f4>)
    b45e:	4798      	blx	r3
		}
		if(stopSequenceOn)
    b460:	4b1c      	ldr	r3, [pc, #112]	; (b4d4 <vTask_MOTORCONTROL+0x364>)
    b462:	781b      	ldrb	r3, [r3, #0]
    b464:	2b00      	cmp	r3, #0
    b466:	d001      	beq.n	b46c <vTask_MOTORCONTROL+0x2fc>
		{
			terminateStopRelay();
    b468:	4b3f      	ldr	r3, [pc, #252]	; (b568 <vTask_MOTORCONTROL+0x3f8>)
    b46a:	4798      	blx	r3
		}
		
		SIMEventManager();
    b46c:	4b3f      	ldr	r3, [pc, #252]	; (b56c <vTask_MOTORCONTROL+0x3fc>)
    b46e:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
    b470:	4b1e      	ldr	r3, [pc, #120]	; (b4ec <vTask_MOTORCONTROL+0x37c>)
    b472:	78db      	ldrb	r3, [r3, #3]
    b474:	2b00      	cmp	r3, #0
    b476:	d100      	bne.n	b47a <vTask_MOTORCONTROL+0x30a>
    b478:	e73d      	b.n	b2f6 <vTask_MOTORCONTROL+0x186>
		{
			M2MEventManager();
    b47a:	4b3d      	ldr	r3, [pc, #244]	; (b570 <vTask_MOTORCONTROL+0x400>)
    b47c:	4798      	blx	r3
		if(taskPSet)
    b47e:	e73a      	b.n	b2f6 <vTask_MOTORCONTROL+0x186>
    b480:	00009365 	.word	0x00009365
    b484:	0000b9c5 	.word	0x0000b9c5
    b488:	0000bab9 	.word	0x0000bab9
    b48c:	0000bb79 	.word	0x0000bb79
    b490:	200007c8 	.word	0x200007c8
    b494:	200006fc 	.word	0x200006fc
    b498:	20000717 	.word	0x20000717
    b49c:	0000f40d 	.word	0x0000f40d
    b4a0:	20000754 	.word	0x20000754
    b4a4:	2000083c 	.word	0x2000083c
    b4a8:	00008495 	.word	0x00008495
    b4ac:	0000f0a9 	.word	0x0000f0a9
    b4b0:	20000765 	.word	0x20000765
    b4b4:	200007fc 	.word	0x200007fc
    b4b8:	20000772 	.word	0x20000772
    b4bc:	20000748 	.word	0x20000748
    b4c0:	20000769 	.word	0x20000769
    b4c4:	200007d4 	.word	0x200007d4
    b4c8:	20000773 	.word	0x20000773
    b4cc:	20000771 	.word	0x20000771
    b4d0:	20000817 	.word	0x20000817
    b4d4:	20000761 	.word	0x20000761
    b4d8:	00009f41 	.word	0x00009f41
    b4dc:	00009fa9 	.word	0x00009fa9
    b4e0:	00009f0d 	.word	0x00009f0d
    b4e4:	20000740 	.word	0x20000740
    b4e8:	20000760 	.word	0x20000760
    b4ec:	20000628 	.word	0x20000628
    b4f0:	20000700 	.word	0x20000700
    b4f4:	200007b4 	.word	0x200007b4
    b4f8:	0000a29d 	.word	0x0000a29d
    b4fc:	20000716 	.word	0x20000716
    b500:	0000f105 	.word	0x0000f105
    b504:	20000777 	.word	0x20000777
    b508:	000088b8 	.word	0x000088b8
    b50c:	0000a349 	.word	0x0000a349
    b510:	0000bc85 	.word	0x0000bc85
    b514:	00009b15 	.word	0x00009b15
    b518:	00009b31 	.word	0x00009b31
    b51c:	00009bf1 	.word	0x00009bf1
    b520:	00009edd 	.word	0x00009edd
    b524:	00009ddd 	.word	0x00009ddd
    b528:	2000065c 	.word	0x2000065c
    b52c:	0000a175 	.word	0x0000a175
    b530:	0000af55 	.word	0x0000af55
    b534:	200007c9 	.word	0x200007c9
    b538:	0000a685 	.word	0x0000a685
    b53c:	0000a555 	.word	0x0000a555
    b540:	20000815 	.word	0x20000815
    b544:	20000780 	.word	0x20000780
    b548:	00001388 	.word	0x00001388
    b54c:	20000720 	.word	0x20000720
    b550:	0000a9e5 	.word	0x0000a9e5
    b554:	0000aa31 	.word	0x0000aa31
    b558:	0000a97d 	.word	0x0000a97d
    b55c:	0000a6d1 	.word	0x0000a6d1
    b560:	0000abb1 	.word	0x0000abb1
    b564:	0000ab41 	.word	0x0000ab41
    b568:	0000aa6d 	.word	0x0000aa6d
    b56c:	0000aebd 	.word	0x0000aebd
    b570:	0000ae79 	.word	0x0000ae79

0000b574 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
    b574:	b590      	push	{r4, r7, lr}
    b576:	b08b      	sub	sp, #44	; 0x2c
    b578:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
    b57a:	2314      	movs	r3, #20
    b57c:	18fb      	adds	r3, r7, r3
    b57e:	0018      	movs	r0, r3
    b580:	4ba4      	ldr	r3, [pc, #656]	; (b814 <start_motor_service+0x2a0>)
    b582:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
    b584:	2314      	movs	r3, #20
    b586:	18fb      	adds	r3, r7, r3
    b588:	222b      	movs	r2, #43	; 0x2b
    b58a:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
    b58c:	2314      	movs	r3, #20
    b58e:	18fb      	adds	r3, r7, r3
    b590:	2200      	movs	r2, #0
    b592:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
    b594:	2314      	movs	r3, #20
    b596:	18fb      	adds	r3, r7, r3
    b598:	2201      	movs	r2, #1
    b59a:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
    b59c:	2314      	movs	r3, #20
    b59e:	18fb      	adds	r3, r7, r3
    b5a0:	2201      	movs	r2, #1
    b5a2:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
    b5a4:	2314      	movs	r3, #20
    b5a6:	18fb      	adds	r3, r7, r3
    b5a8:	2200      	movs	r2, #0
    b5aa:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
    b5ac:	2314      	movs	r3, #20
    b5ae:	18fb      	adds	r3, r7, r3
    b5b0:	0019      	movs	r1, r3
    b5b2:	200b      	movs	r0, #11
    b5b4:	4b98      	ldr	r3, [pc, #608]	; (b818 <start_motor_service+0x2a4>)
    b5b6:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
    b5b8:	4b98      	ldr	r3, [pc, #608]	; (b81c <start_motor_service+0x2a8>)
    b5ba:	2200      	movs	r2, #0
    b5bc:	210b      	movs	r1, #11
    b5be:	0018      	movs	r0, r3
    b5c0:	4b97      	ldr	r3, [pc, #604]	; (b820 <start_motor_service+0x2ac>)
    b5c2:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    b5c4:	2100      	movs	r1, #0
    b5c6:	200b      	movs	r0, #11
    b5c8:	4b96      	ldr	r3, [pc, #600]	; (b824 <start_motor_service+0x2b0>)
    b5ca:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
    b5cc:	2310      	movs	r3, #16
    b5ce:	18fb      	adds	r3, r7, r3
    b5d0:	0018      	movs	r0, r3
    b5d2:	4b95      	ldr	r3, [pc, #596]	; (b828 <start_motor_service+0x2b4>)
    b5d4:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
    b5d6:	2310      	movs	r3, #16
    b5d8:	18fb      	adds	r3, r7, r3
    b5da:	2200      	movs	r2, #0
    b5dc:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
    b5de:	2310      	movs	r3, #16
    b5e0:	18fb      	adds	r3, r7, r3
    b5e2:	2201      	movs	r2, #1
    b5e4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
    b5e6:	2310      	movs	r3, #16
    b5e8:	18fb      	adds	r3, r7, r3
    b5ea:	0019      	movs	r1, r3
    b5ec:	202a      	movs	r0, #42	; 0x2a
    b5ee:	4b8f      	ldr	r3, [pc, #572]	; (b82c <start_motor_service+0x2b8>)
    b5f0:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
    b5f2:	2203      	movs	r2, #3
    b5f4:	2100      	movs	r1, #0
    b5f6:	2001      	movs	r0, #1
    b5f8:	4b8d      	ldr	r3, [pc, #564]	; (b830 <start_motor_service+0x2bc>)
    b5fa:	4798      	blx	r3
    b5fc:	0002      	movs	r2, r0
    b5fe:	4b8d      	ldr	r3, [pc, #564]	; (b834 <start_motor_service+0x2c0>)
    b600:	601a      	str	r2, [r3, #0]
    b602:	4b8c      	ldr	r3, [pc, #560]	; (b834 <start_motor_service+0x2c0>)
    b604:	681b      	ldr	r3, [r3, #0]
    b606:	2b00      	cmp	r3, #0
    b608:	d006      	beq.n	b618 <start_motor_service+0xa4>
    b60a:	4b8a      	ldr	r3, [pc, #552]	; (b834 <start_motor_service+0x2c0>)
    b60c:	6818      	ldr	r0, [r3, #0]
    b60e:	2300      	movs	r3, #0
    b610:	2200      	movs	r2, #0
    b612:	2100      	movs	r1, #0
    b614:	4c88      	ldr	r4, [pc, #544]	; (b838 <start_motor_service+0x2c4>)
    b616:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
    b618:	230c      	movs	r3, #12
    b61a:	18fb      	adds	r3, r7, r3
    b61c:	0018      	movs	r0, r3
    b61e:	4b82      	ldr	r3, [pc, #520]	; (b828 <start_motor_service+0x2b4>)
    b620:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
    b622:	230c      	movs	r3, #12
    b624:	18fb      	adds	r3, r7, r3
    b626:	2201      	movs	r2, #1
    b628:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
    b62a:	230c      	movs	r3, #12
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	2200      	movs	r2, #0
    b630:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
    b632:	230c      	movs	r3, #12
    b634:	18fb      	adds	r3, r7, r3
    b636:	0019      	movs	r1, r3
    b638:	202d      	movs	r0, #45	; 0x2d
    b63a:	4b7c      	ldr	r3, [pc, #496]	; (b82c <start_motor_service+0x2b8>)
    b63c:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
    b63e:	230c      	movs	r3, #12
    b640:	18fb      	adds	r3, r7, r3
    b642:	0019      	movs	r1, r3
    b644:	202c      	movs	r0, #44	; 0x2c
    b646:	4b79      	ldr	r3, [pc, #484]	; (b82c <start_motor_service+0x2b8>)
    b648:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
    b64a:	230c      	movs	r3, #12
    b64c:	18fb      	adds	r3, r7, r3
    b64e:	0019      	movs	r1, r3
    b650:	2028      	movs	r0, #40	; 0x28
    b652:	4b76      	ldr	r3, [pc, #472]	; (b82c <start_motor_service+0x2b8>)
    b654:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
    b656:	230c      	movs	r3, #12
    b658:	18fb      	adds	r3, r7, r3
    b65a:	0019      	movs	r1, r3
    b65c:	2027      	movs	r0, #39	; 0x27
    b65e:	4b73      	ldr	r3, [pc, #460]	; (b82c <start_motor_service+0x2b8>)
    b660:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
    b662:	230c      	movs	r3, #12
    b664:	18fb      	adds	r3, r7, r3
    b666:	0019      	movs	r1, r3
    b668:	2005      	movs	r0, #5
    b66a:	4b70      	ldr	r3, [pc, #448]	; (b82c <start_motor_service+0x2b8>)
    b66c:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
    b66e:	2101      	movs	r1, #1
    b670:	2028      	movs	r0, #40	; 0x28
    b672:	4b72      	ldr	r3, [pc, #456]	; (b83c <start_motor_service+0x2c8>)
    b674:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
    b676:	2101      	movs	r1, #1
    b678:	2005      	movs	r0, #5
    b67a:	4b70      	ldr	r3, [pc, #448]	; (b83c <start_motor_service+0x2c8>)
    b67c:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
    b67e:	2101      	movs	r1, #1
    b680:	2027      	movs	r0, #39	; 0x27
    b682:	4b6e      	ldr	r3, [pc, #440]	; (b83c <start_motor_service+0x2c8>)
    b684:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    b686:	003b      	movs	r3, r7
    b688:	0018      	movs	r0, r3
    b68a:	4b62      	ldr	r3, [pc, #392]	; (b814 <start_motor_service+0x2a0>)
    b68c:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
    b68e:	003b      	movs	r3, r7
    b690:	222e      	movs	r2, #46	; 0x2e
    b692:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
    b694:	003b      	movs	r3, r7
    b696:	2200      	movs	r2, #0
    b698:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b69a:	003b      	movs	r3, r7
    b69c:	2201      	movs	r2, #1
    b69e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    b6a0:	003b      	movs	r3, r7
    b6a2:	2203      	movs	r2, #3
    b6a4:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
    b6a6:	003b      	movs	r3, r7
    b6a8:	0019      	movs	r1, r3
    b6aa:	200e      	movs	r0, #14
    b6ac:	4b5a      	ldr	r3, [pc, #360]	; (b818 <start_motor_service+0x2a4>)
    b6ae:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b6b0:	2100      	movs	r1, #0
    b6b2:	200e      	movs	r0, #14
    b6b4:	4b5b      	ldr	r3, [pc, #364]	; (b824 <start_motor_service+0x2b0>)
    b6b6:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b6b8:	4b61      	ldr	r3, [pc, #388]	; (b840 <start_motor_service+0x2cc>)
    b6ba:	2200      	movs	r2, #0
    b6bc:	210e      	movs	r1, #14
    b6be:	0018      	movs	r0, r3
    b6c0:	4b57      	ldr	r3, [pc, #348]	; (b820 <start_motor_service+0x2ac>)
    b6c2:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
    b6c4:	003b      	movs	r3, r7
    b6c6:	2226      	movs	r2, #38	; 0x26
    b6c8:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
    b6ca:	003b      	movs	r3, r7
    b6cc:	2200      	movs	r2, #0
    b6ce:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b6d0:	003b      	movs	r3, r7
    b6d2:	2201      	movs	r2, #1
    b6d4:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b6d6:	003b      	movs	r3, r7
    b6d8:	2202      	movs	r2, #2
    b6da:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
    b6dc:	003b      	movs	r3, r7
    b6de:	0019      	movs	r1, r3
    b6e0:	2006      	movs	r0, #6
    b6e2:	4b4d      	ldr	r3, [pc, #308]	; (b818 <start_motor_service+0x2a4>)
    b6e4:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b6e6:	2100      	movs	r1, #0
    b6e8:	2006      	movs	r0, #6
    b6ea:	4b4e      	ldr	r3, [pc, #312]	; (b824 <start_motor_service+0x2b0>)
    b6ec:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b6ee:	4b55      	ldr	r3, [pc, #340]	; (b844 <start_motor_service+0x2d0>)
    b6f0:	2200      	movs	r2, #0
    b6f2:	2106      	movs	r1, #6
    b6f4:	0018      	movs	r0, r3
    b6f6:	4b4a      	ldr	r3, [pc, #296]	; (b820 <start_motor_service+0x2ac>)
    b6f8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
    b6fa:	003b      	movs	r3, r7
    b6fc:	2225      	movs	r2, #37	; 0x25
    b6fe:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
    b700:	003b      	movs	r3, r7
    b702:	2200      	movs	r2, #0
    b704:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b706:	003b      	movs	r3, r7
    b708:	2201      	movs	r2, #1
    b70a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b70c:	003b      	movs	r3, r7
    b70e:	2202      	movs	r2, #2
    b710:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
    b712:	003b      	movs	r3, r7
    b714:	0019      	movs	r1, r3
    b716:	2005      	movs	r0, #5
    b718:	4b3f      	ldr	r3, [pc, #252]	; (b818 <start_motor_service+0x2a4>)
    b71a:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b71c:	2100      	movs	r1, #0
    b71e:	2005      	movs	r0, #5
    b720:	4b40      	ldr	r3, [pc, #256]	; (b824 <start_motor_service+0x2b0>)
    b722:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b724:	4b47      	ldr	r3, [pc, #284]	; (b844 <start_motor_service+0x2d0>)
    b726:	2200      	movs	r2, #0
    b728:	2105      	movs	r1, #5
    b72a:	0018      	movs	r0, r3
    b72c:	4b3c      	ldr	r3, [pc, #240]	; (b820 <start_motor_service+0x2ac>)
    b72e:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
    b730:	003b      	movs	r3, r7
    b732:	221c      	movs	r2, #28
    b734:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
    b736:	003b      	movs	r3, r7
    b738:	2200      	movs	r2, #0
    b73a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b73c:	003b      	movs	r3, r7
    b73e:	2201      	movs	r2, #1
    b740:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b742:	003b      	movs	r3, r7
    b744:	2202      	movs	r2, #2
    b746:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
    b748:	003b      	movs	r3, r7
    b74a:	0019      	movs	r1, r3
    b74c:	2008      	movs	r0, #8
    b74e:	4b32      	ldr	r3, [pc, #200]	; (b818 <start_motor_service+0x2a4>)
    b750:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b752:	2100      	movs	r1, #0
    b754:	2008      	movs	r0, #8
    b756:	4b33      	ldr	r3, [pc, #204]	; (b824 <start_motor_service+0x2b0>)
    b758:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b75a:	4b3a      	ldr	r3, [pc, #232]	; (b844 <start_motor_service+0x2d0>)
    b75c:	2200      	movs	r2, #0
    b75e:	2108      	movs	r1, #8
    b760:	0018      	movs	r0, r3
    b762:	4b2f      	ldr	r3, [pc, #188]	; (b820 <start_motor_service+0x2ac>)
    b764:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
    b766:	003b      	movs	r3, r7
    b768:	2229      	movs	r2, #41	; 0x29
    b76a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
    b76c:	003b      	movs	r3, r7
    b76e:	2200      	movs	r2, #0
    b770:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b772:	003b      	movs	r3, r7
    b774:	2201      	movs	r2, #1
    b776:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b778:	003b      	movs	r3, r7
    b77a:	2202      	movs	r2, #2
    b77c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
    b77e:	003b      	movs	r3, r7
    b780:	0019      	movs	r1, r3
    b782:	2009      	movs	r0, #9
    b784:	4b24      	ldr	r3, [pc, #144]	; (b818 <start_motor_service+0x2a4>)
    b786:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b788:	2100      	movs	r1, #0
    b78a:	2009      	movs	r0, #9
    b78c:	4b25      	ldr	r3, [pc, #148]	; (b824 <start_motor_service+0x2b0>)
    b78e:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b790:	4b2c      	ldr	r3, [pc, #176]	; (b844 <start_motor_service+0x2d0>)
    b792:	2200      	movs	r2, #0
    b794:	2109      	movs	r1, #9
    b796:	0018      	movs	r0, r3
    b798:	4b21      	ldr	r3, [pc, #132]	; (b820 <start_motor_service+0x2ac>)
    b79a:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b79c:	482a      	ldr	r0, [pc, #168]	; (b848 <start_motor_service+0x2d4>)
    b79e:	2300      	movs	r3, #0
    b7a0:	9301      	str	r3, [sp, #4]
    b7a2:	2301      	movs	r3, #1
    b7a4:	9300      	str	r3, [sp, #0]
    b7a6:	2300      	movs	r3, #0
    b7a8:	2282      	movs	r2, #130	; 0x82
    b7aa:	2100      	movs	r1, #0
    b7ac:	4c27      	ldr	r4, [pc, #156]	; (b84c <start_motor_service+0x2d8>)
    b7ae:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b7b0:	4827      	ldr	r0, [pc, #156]	; (b850 <start_motor_service+0x2dc>)
    b7b2:	2300      	movs	r3, #0
    b7b4:	9301      	str	r3, [sp, #4]
    b7b6:	2301      	movs	r3, #1
    b7b8:	9300      	str	r3, [sp, #0]
    b7ba:	2300      	movs	r3, #0
    b7bc:	2282      	movs	r2, #130	; 0x82
    b7be:	2100      	movs	r1, #0
    b7c0:	4c22      	ldr	r4, [pc, #136]	; (b84c <start_motor_service+0x2d8>)
    b7c2:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
    b7c4:	4823      	ldr	r0, [pc, #140]	; (b854 <start_motor_service+0x2e0>)
    b7c6:	4b24      	ldr	r3, [pc, #144]	; (b858 <start_motor_service+0x2e4>)
    b7c8:	9301      	str	r3, [sp, #4]
    b7ca:	2301      	movs	r3, #1
    b7cc:	9300      	str	r3, [sp, #0]
    b7ce:	2300      	movs	r3, #0
    b7d0:	2282      	movs	r2, #130	; 0x82
    b7d2:	2100      	movs	r1, #0
    b7d4:	4c1d      	ldr	r4, [pc, #116]	; (b84c <start_motor_service+0x2d8>)
    b7d6:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
    b7d8:	4b20      	ldr	r3, [pc, #128]	; (b85c <start_motor_service+0x2e8>)
    b7da:	795b      	ldrb	r3, [r3, #5]
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d00a      	beq.n	b7f6 <start_motor_service+0x282>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
    b7e0:	23af      	movs	r3, #175	; 0xaf
    b7e2:	009a      	lsls	r2, r3, #2
    b7e4:	481e      	ldr	r0, [pc, #120]	; (b860 <start_motor_service+0x2ec>)
    b7e6:	2300      	movs	r3, #0
    b7e8:	9301      	str	r3, [sp, #4]
    b7ea:	2301      	movs	r3, #1
    b7ec:	9300      	str	r3, [sp, #0]
    b7ee:	2300      	movs	r3, #0
    b7f0:	2100      	movs	r1, #0
    b7f2:	4c16      	ldr	r4, [pc, #88]	; (b84c <start_motor_service+0x2d8>)
    b7f4:	47a0      	blx	r4
	}
	

	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)720,NULL,1, &motorTask);
    b7f6:	23b4      	movs	r3, #180	; 0xb4
    b7f8:	009a      	lsls	r2, r3, #2
    b7fa:	481a      	ldr	r0, [pc, #104]	; (b864 <start_motor_service+0x2f0>)
    b7fc:	4b1a      	ldr	r3, [pc, #104]	; (b868 <start_motor_service+0x2f4>)
    b7fe:	9301      	str	r3, [sp, #4]
    b800:	2301      	movs	r3, #1
    b802:	9300      	str	r3, [sp, #0]
    b804:	2300      	movs	r3, #0
    b806:	2100      	movs	r1, #0
    b808:	4c10      	ldr	r4, [pc, #64]	; (b84c <start_motor_service+0x2d8>)
    b80a:	47a0      	blx	r4

}
    b80c:	46c0      	nop			; (mov r8, r8)
    b80e:	46bd      	mov	sp, r7
    b810:	b009      	add	sp, #36	; 0x24
    b812:	bd90      	pop	{r4, r7, pc}
    b814:	0000d0cd 	.word	0x0000d0cd
    b818:	0000d101 	.word	0x0000d101
    b81c:	00009809 	.word	0x00009809
    b820:	00011405 	.word	0x00011405
    b824:	00011469 	.word	0x00011469
    b828:	000088bd 	.word	0x000088bd
    b82c:	00011f79 	.word	0x00011f79
    b830:	0000e245 	.word	0x0000e245
    b834:	2000023c 	.word	0x2000023c
    b838:	0000e301 	.word	0x0000e301
    b83c:	00008925 	.word	0x00008925
    b840:	0000bb65 	.word	0x0000bb65
    b844:	0000b15d 	.word	0x0000b15d
    b848:	00009a21 	.word	0x00009a21
    b84c:	0000ed69 	.word	0x0000ed69
    b850:	00009a8d 	.word	0x00009a8d
    b854:	0000be59 	.word	0x0000be59
    b858:	20000750 	.word	0x20000750
    b85c:	20000628 	.word	0x20000628
    b860:	00008dad 	.word	0x00008dad
    b864:	0000b171 	.word	0x0000b171
    b868:	200007a4 	.word	0x200007a4

0000b86c <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
    b86c:	b580      	push	{r7, lr}
    b86e:	b082      	sub	sp, #8
    b870:	af00      	add	r7, sp, #0
	uint8_t j = 0;
    b872:	1dfb      	adds	r3, r7, #7
    b874:	2200      	movs	r2, #0
    b876:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    b878:	4b47      	ldr	r3, [pc, #284]	; (b998 <motor_checkSleepElligible+0x12c>)
    b87a:	795b      	ldrb	r3, [r3, #5]
    b87c:	2b00      	cmp	r3, #0
    b87e:	d00b      	beq.n	b898 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    b880:	4b45      	ldr	r3, [pc, #276]	; (b998 <motor_checkSleepElligible+0x12c>)
    b882:	791b      	ldrb	r3, [r3, #4]
    b884:	2b00      	cmp	r3, #0
    b886:	d003      	beq.n	b890 <motor_checkSleepElligible+0x24>
		{
			j = 19;
    b888:	1dfb      	adds	r3, r7, #7
    b88a:	2213      	movs	r2, #19
    b88c:	701a      	strb	r2, [r3, #0]
    b88e:	e00e      	b.n	b8ae <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
    b890:	1dfb      	adds	r3, r7, #7
    b892:	2211      	movs	r2, #17
    b894:	701a      	strb	r2, [r3, #0]
    b896:	e00a      	b.n	b8ae <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b898:	4b3f      	ldr	r3, [pc, #252]	; (b998 <motor_checkSleepElligible+0x12c>)
    b89a:	785b      	ldrb	r3, [r3, #1]
    b89c:	2b00      	cmp	r3, #0
    b89e:	d003      	beq.n	b8a8 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
    b8a0:	1dfb      	adds	r3, r7, #7
    b8a2:	220e      	movs	r2, #14
    b8a4:	701a      	strb	r2, [r3, #0]
    b8a6:	e002      	b.n	b8ae <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
    b8a8:	1dfb      	adds	r3, r7, #7
    b8aa:	220c      	movs	r2, #12
    b8ac:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
    b8ae:	1dbb      	adds	r3, r7, #6
    b8b0:	2201      	movs	r2, #1
    b8b2:	701a      	strb	r2, [r3, #0]
	while(j--)
    b8b4:	e00c      	b.n	b8d0 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
    b8b6:	1dfb      	adds	r3, r7, #7
    b8b8:	781b      	ldrb	r3, [r3, #0]
    b8ba:	4a38      	ldr	r2, [pc, #224]	; (b99c <motor_checkSleepElligible+0x130>)
    b8bc:	5cd3      	ldrb	r3, [r2, r3]
    b8be:	2201      	movs	r2, #1
    b8c0:	4053      	eors	r3, r2
    b8c2:	b2db      	uxtb	r3, r3
    b8c4:	2b00      	cmp	r3, #0
    b8c6:	d003      	beq.n	b8d0 <motor_checkSleepElligible+0x64>
		{
			event=false;
    b8c8:	1dbb      	adds	r3, r7, #6
    b8ca:	2200      	movs	r2, #0
    b8cc:	701a      	strb	r2, [r3, #0]
			break;
    b8ce:	e006      	b.n	b8de <motor_checkSleepElligible+0x72>
	while(j--)
    b8d0:	1dfb      	adds	r3, r7, #7
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	1dfa      	adds	r2, r7, #7
    b8d6:	1e59      	subs	r1, r3, #1
    b8d8:	7011      	strb	r1, [r2, #0]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d1eb      	bne.n	b8b6 <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    b8de:	4b2e      	ldr	r3, [pc, #184]	; (b998 <motor_checkSleepElligible+0x12c>)
    b8e0:	78db      	ldrb	r3, [r3, #3]
    b8e2:	2b00      	cmp	r3, #0
    b8e4:	d00e      	beq.n	b904 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
    b8e6:	1dbb      	adds	r3, r7, #6
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	2b00      	cmp	r3, #0
    b8ec:	d003      	beq.n	b8f6 <motor_checkSleepElligible+0x8a>
    b8ee:	4b2c      	ldr	r3, [pc, #176]	; (b9a0 <motor_checkSleepElligible+0x134>)
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	2b01      	cmp	r3, #1
    b8f4:	d003      	beq.n	b8fe <motor_checkSleepElligible+0x92>
    b8f6:	4b2a      	ldr	r3, [pc, #168]	; (b9a0 <motor_checkSleepElligible+0x134>)
    b8f8:	785b      	ldrb	r3, [r3, #1]
    b8fa:	2b01      	cmp	r3, #1
    b8fc:	d102      	bne.n	b904 <motor_checkSleepElligible+0x98>
		{
			event = false;
    b8fe:	1dbb      	adds	r3, r7, #6
    b900:	2200      	movs	r2, #0
    b902:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b904:	4b27      	ldr	r3, [pc, #156]	; (b9a4 <motor_checkSleepElligible+0x138>)
    b906:	4798      	blx	r3
    b908:	0003      	movs	r3, r0
    b90a:	001a      	movs	r2, r3
    b90c:	2301      	movs	r3, #1
    b90e:	4053      	eors	r3, r2
    b910:	b2db      	uxtb	r3, r3
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent);
    b912:	2b00      	cmp	r3, #0
    b914:	d037      	beq.n	b986 <motor_checkSleepElligible+0x11a>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b916:	4b24      	ldr	r3, [pc, #144]	; (b9a8 <motor_checkSleepElligible+0x13c>)
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	b2db      	uxtb	r3, r3
    b91c:	2201      	movs	r2, #1
    b91e:	4053      	eors	r3, r2
    b920:	b2db      	uxtb	r3, r3
    b922:	2b00      	cmp	r3, #0
    b924:	d02f      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b926:	1dbb      	adds	r3, r7, #6
    b928:	781b      	ldrb	r3, [r3, #0]
    b92a:	2b00      	cmp	r3, #0
    b92c:	d02b      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b92e:	4b1f      	ldr	r3, [pc, #124]	; (b9ac <motor_checkSleepElligible+0x140>)
    b930:	781b      	ldrb	r3, [r3, #0]
    b932:	2201      	movs	r2, #1
    b934:	4053      	eors	r3, r2
    b936:	b2db      	uxtb	r3, r3
    b938:	2b00      	cmp	r3, #0
    b93a:	d024      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b93c:	4b1c      	ldr	r3, [pc, #112]	; (b9b0 <motor_checkSleepElligible+0x144>)
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	2201      	movs	r2, #1
    b942:	4053      	eors	r3, r2
    b944:	b2db      	uxtb	r3, r3
    b946:	2b00      	cmp	r3, #0
    b948:	d01d      	beq.n	b986 <motor_checkSleepElligible+0x11a>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent);
    b94a:	4b1a      	ldr	r3, [pc, #104]	; (b9b4 <motor_checkSleepElligible+0x148>)
    b94c:	781b      	ldrb	r3, [r3, #0]
    b94e:	2201      	movs	r2, #1
    b950:	4053      	eors	r3, r2
    b952:	b2db      	uxtb	r3, r3
    b954:	2b00      	cmp	r3, #0
    b956:	d016      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b958:	4b17      	ldr	r3, [pc, #92]	; (b9b8 <motor_checkSleepElligible+0x14c>)
    b95a:	781b      	ldrb	r3, [r3, #0]
    b95c:	2201      	movs	r2, #1
    b95e:	4053      	eors	r3, r2
    b960:	b2db      	uxtb	r3, r3
    b962:	2b00      	cmp	r3, #0
    b964:	d00f      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b966:	4b15      	ldr	r3, [pc, #84]	; (b9bc <motor_checkSleepElligible+0x150>)
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	2201      	movs	r2, #1
    b96c:	4053      	eors	r3, r2
    b96e:	b2db      	uxtb	r3, r3
    b970:	2b00      	cmp	r3, #0
    b972:	d008      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b974:	4b12      	ldr	r3, [pc, #72]	; (b9c0 <motor_checkSleepElligible+0x154>)
    b976:	781b      	ldrb	r3, [r3, #0]
    b978:	2201      	movs	r2, #1
    b97a:	4053      	eors	r3, r2
    b97c:	b2db      	uxtb	r3, r3
    b97e:	2b00      	cmp	r3, #0
    b980:	d001      	beq.n	b986 <motor_checkSleepElligible+0x11a>
    b982:	2301      	movs	r3, #1
    b984:	e000      	b.n	b988 <motor_checkSleepElligible+0x11c>
    b986:	2300      	movs	r3, #0
    b988:	1c1a      	adds	r2, r3, #0
    b98a:	2301      	movs	r3, #1
    b98c:	4013      	ands	r3, r2
    b98e:	b2db      	uxtb	r3, r3
	
}
    b990:	0018      	movs	r0, r3
    b992:	46bd      	mov	sp, r7
    b994:	b002      	add	sp, #8
    b996:	bd80      	pop	{r7, pc}
    b998:	20000628 	.word	0x20000628
    b99c:	20000700 	.word	0x20000700
    b9a0:	20000788 	.word	0x20000788
    b9a4:	00009ef9 	.word	0x00009ef9
    b9a8:	20000717 	.word	0x20000717
    b9ac:	200007c9 	.word	0x200007c9
    b9b0:	20000769 	.word	0x20000769
    b9b4:	20000772 	.word	0x20000772
    b9b8:	20000771 	.word	0x20000771
    b9bc:	20000761 	.word	0x20000761
    b9c0:	20000754 	.word	0x20000754

0000b9c4 <configure_ac>:


void configure_ac(void)
{
    b9c4:	b580      	push	{r7, lr}
    b9c6:	b08a      	sub	sp, #40	; 0x28
    b9c8:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
    b9ca:	231c      	movs	r3, #28
    b9cc:	18fb      	adds	r3, r7, r3
    b9ce:	0018      	movs	r0, r3
    b9d0:	2305      	movs	r3, #5
    b9d2:	001a      	movs	r2, r3
    b9d4:	2100      	movs	r1, #0
    b9d6:	4b2c      	ldr	r3, [pc, #176]	; (ba88 <configure_ac+0xc4>)
    b9d8:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
    b9da:	2324      	movs	r3, #36	; 0x24
    b9dc:	18fb      	adds	r3, r7, r3
    b9de:	0018      	movs	r0, r3
    b9e0:	4b2a      	ldr	r3, [pc, #168]	; (ba8c <configure_ac+0xc8>)
    b9e2:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
    b9e4:	2324      	movs	r3, #36	; 0x24
    b9e6:	18fb      	adds	r3, r7, r3
    b9e8:	2201      	movs	r2, #1
    b9ea:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
    b9ec:	2324      	movs	r3, #36	; 0x24
    b9ee:	18fb      	adds	r3, r7, r3
    b9f0:	2206      	movs	r2, #6
    b9f2:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
    b9f4:	2324      	movs	r3, #36	; 0x24
    b9f6:	18fa      	adds	r2, r7, r3
    b9f8:	4925      	ldr	r1, [pc, #148]	; (ba90 <configure_ac+0xcc>)
    b9fa:	4b26      	ldr	r3, [pc, #152]	; (ba94 <configure_ac+0xd0>)
    b9fc:	0018      	movs	r0, r3
    b9fe:	4b26      	ldr	r3, [pc, #152]	; (ba98 <configure_ac+0xd4>)
    ba00:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    ba02:	1d3b      	adds	r3, r7, #4
    ba04:	2200      	movs	r2, #0
    ba06:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
    ba08:	1d3b      	adds	r3, r7, #4
    ba0a:	2200      	movs	r2, #0
    ba0c:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
    ba0e:	1d3b      	adds	r3, r7, #4
    ba10:	2200      	movs	r2, #0
    ba12:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
    ba14:	1d3b      	adds	r3, r7, #4
    ba16:	2200      	movs	r2, #0
    ba18:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
    ba1a:	1d3b      	adds	r3, r7, #4
    ba1c:	2200      	movs	r2, #0
    ba1e:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
    ba20:	1d3b      	adds	r3, r7, #4
    ba22:	22a0      	movs	r2, #160	; 0xa0
    ba24:	00d2      	lsls	r2, r2, #3
    ba26:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
    ba28:	1d3b      	adds	r3, r7, #4
    ba2a:	222d      	movs	r2, #45	; 0x2d
    ba2c:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
    ba2e:	1d3b      	adds	r3, r7, #4
    ba30:	2200      	movs	r2, #0
    ba32:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
    ba34:	1d3a      	adds	r2, r7, #4
    ba36:	4b17      	ldr	r3, [pc, #92]	; (ba94 <configure_ac+0xd0>)
    ba38:	2100      	movs	r1, #0
    ba3a:	0018      	movs	r0, r3
    ba3c:	4b17      	ldr	r3, [pc, #92]	; (ba9c <configure_ac+0xd8>)
    ba3e:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
    ba40:	4b14      	ldr	r3, [pc, #80]	; (ba94 <configure_ac+0xd0>)
    ba42:	2100      	movs	r1, #0
    ba44:	0018      	movs	r0, r3
    ba46:	4b16      	ldr	r3, [pc, #88]	; (baa0 <configure_ac+0xdc>)
    ba48:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
    ba4a:	231c      	movs	r3, #28
    ba4c:	18fb      	adds	r3, r7, r3
    ba4e:	2201      	movs	r2, #1
    ba50:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
    ba52:	231c      	movs	r3, #28
    ba54:	18fa      	adds	r2, r7, r3
    ba56:	4b0f      	ldr	r3, [pc, #60]	; (ba94 <configure_ac+0xd0>)
    ba58:	0011      	movs	r1, r2
    ba5a:	0018      	movs	r0, r3
    ba5c:	4b11      	ldr	r3, [pc, #68]	; (baa4 <configure_ac+0xe0>)
    ba5e:	4798      	blx	r3
	
	ac_enable(&ac_instance);
    ba60:	4b0c      	ldr	r3, [pc, #48]	; (ba94 <configure_ac+0xd0>)
    ba62:	0018      	movs	r0, r3
    ba64:	4b10      	ldr	r3, [pc, #64]	; (baa8 <configure_ac+0xe4>)
    ba66:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
    ba68:	4910      	ldr	r1, [pc, #64]	; (baac <configure_ac+0xe8>)
    ba6a:	4b0a      	ldr	r3, [pc, #40]	; (ba94 <configure_ac+0xd0>)
    ba6c:	2200      	movs	r2, #0
    ba6e:	0018      	movs	r0, r3
    ba70:	4b0f      	ldr	r3, [pc, #60]	; (bab0 <configure_ac+0xec>)
    ba72:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
    ba74:	4b07      	ldr	r3, [pc, #28]	; (ba94 <configure_ac+0xd0>)
    ba76:	2100      	movs	r1, #0
    ba78:	0018      	movs	r0, r3
    ba7a:	4b0e      	ldr	r3, [pc, #56]	; (bab4 <configure_ac+0xf0>)
    ba7c:	4798      	blx	r3
}
    ba7e:	46c0      	nop			; (mov r8, r8)
    ba80:	46bd      	mov	sp, r7
    ba82:	b00a      	add	sp, #40	; 0x28
    ba84:	bd80      	pop	{r7, pc}
    ba86:	46c0      	nop			; (mov r8, r8)
    ba88:	00017d67 	.word	0x00017d67
    ba8c:	000082c1 	.word	0x000082c1
    ba90:	42004400 	.word	0x42004400
    ba94:	2000083c 	.word	0x2000083c
    ba98:	0000bfc1 	.word	0x0000bfc1
    ba9c:	0000c0a1 	.word	0x0000c0a1
    baa0:	00008411 	.word	0x00008411
    baa4:	00008331 	.word	0x00008331
    baa8:	000082f9 	.word	0x000082f9
    baac:	0000bb49 	.word	0x0000bb49
    bab0:	00011831 	.word	0x00011831
    bab4:	00008579 	.word	0x00008579

0000bab8 <configure_rtc>:

void configure_rtc(void)
{
    bab8:	b580      	push	{r7, lr}
    baba:	b088      	sub	sp, #32
    babc:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
    babe:	1d3b      	adds	r3, r7, #4
    bac0:	0018      	movs	r0, r3
    bac2:	230b      	movs	r3, #11
    bac4:	001a      	movs	r2, r3
    bac6:	2100      	movs	r1, #0
    bac8:	4b17      	ldr	r3, [pc, #92]	; (bb28 <configure_rtc+0x70>)
    baca:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
    bacc:	2310      	movs	r3, #16
    bace:	18fb      	adds	r3, r7, r3
    bad0:	0018      	movs	r0, r3
    bad2:	4b16      	ldr	r3, [pc, #88]	; (bb2c <configure_rtc+0x74>)
    bad4:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
    bad6:	2310      	movs	r3, #16
    bad8:	18fb      	adds	r3, r7, r3
    bada:	2200      	movs	r2, #0
    badc:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
    bade:	2310      	movs	r3, #16
    bae0:	18fb      	adds	r3, r7, r3
    bae2:	2200      	movs	r2, #0
    bae4:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
    bae6:	2310      	movs	r3, #16
    bae8:	18fb      	adds	r3, r7, r3
    baea:	2201      	movs	r2, #1
    baec:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
    baee:	2310      	movs	r3, #16
    baf0:	18fa      	adds	r2, r7, r3
    baf2:	490f      	ldr	r1, [pc, #60]	; (bb30 <configure_rtc+0x78>)
    baf4:	4b0f      	ldr	r3, [pc, #60]	; (bb34 <configure_rtc+0x7c>)
    baf6:	0018      	movs	r0, r3
    baf8:	4b0f      	ldr	r3, [pc, #60]	; (bb38 <configure_rtc+0x80>)
    bafa:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
    bafc:	4b0d      	ldr	r3, [pc, #52]	; (bb34 <configure_rtc+0x7c>)
    bafe:	210a      	movs	r1, #10
    bb00:	0018      	movs	r0, r3
    bb02:	4b0e      	ldr	r3, [pc, #56]	; (bb3c <configure_rtc+0x84>)
    bb04:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
    bb06:	1d3b      	adds	r3, r7, #4
    bb08:	2201      	movs	r2, #1
    bb0a:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
    bb0c:	1d3a      	adds	r2, r7, #4
    bb0e:	4b09      	ldr	r3, [pc, #36]	; (bb34 <configure_rtc+0x7c>)
    bb10:	0011      	movs	r1, r2
    bb12:	0018      	movs	r0, r3
    bb14:	4b0a      	ldr	r3, [pc, #40]	; (bb40 <configure_rtc+0x88>)
    bb16:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    bb18:	4b06      	ldr	r3, [pc, #24]	; (bb34 <configure_rtc+0x7c>)
    bb1a:	0018      	movs	r0, r3
    bb1c:	4b09      	ldr	r3, [pc, #36]	; (bb44 <configure_rtc+0x8c>)
    bb1e:	4798      	blx	r3
}
    bb20:	46c0      	nop			; (mov r8, r8)
    bb22:	46bd      	mov	sp, r7
    bb24:	b008      	add	sp, #32
    bb26:	bd80      	pop	{r7, pc}
    bb28:	00017d67 	.word	0x00017d67
    bb2c:	00008a01 	.word	0x00008a01
    bb30:	40001400 	.word	0x40001400
    bb34:	2000081c 	.word	0x2000081c
    bb38:	0000d51d 	.word	0x0000d51d
    bb3c:	0000d639 	.word	0x0000d639
    bb40:	00008a5d 	.word	0x00008a5d
    bb44:	0000d2f5 	.word	0x0000d2f5

0000bb48 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
    bb48:	b580      	push	{r7, lr}
    bb4a:	b082      	sub	sp, #8
    bb4c:	af00      	add	r7, sp, #0
    bb4e:	6078      	str	r0, [r7, #4]
	eventOccured = true;
    bb50:	4b03      	ldr	r3, [pc, #12]	; (bb60 <ac_detect_callback+0x18>)
    bb52:	2201      	movs	r2, #1
    bb54:	701a      	strb	r2, [r3, #0]
}
    bb56:	46c0      	nop			; (mov r8, r8)
    bb58:	46bd      	mov	sp, r7
    bb5a:	b002      	add	sp, #8
    bb5c:	bd80      	pop	{r7, pc}
    bb5e:	46c0      	nop			; (mov r8, r8)
    bb60:	20000717 	.word	0x20000717

0000bb64 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
    bb64:	b580      	push	{r7, lr}
    bb66:	af00      	add	r7, sp, #0
	eventOccured = true;
    bb68:	4b02      	ldr	r3, [pc, #8]	; (bb74 <motor_feedback_callback+0x10>)
    bb6a:	2201      	movs	r2, #1
    bb6c:	701a      	strb	r2, [r3, #0]
}
    bb6e:	46c0      	nop			; (mov r8, r8)
    bb70:	46bd      	mov	sp, r7
    bb72:	bd80      	pop	{r7, pc}
    bb74:	20000717 	.word	0x20000717

0000bb78 <configure_event>:

void configure_event(void)
{
    bb78:	b580      	push	{r7, lr}
    bb7a:	b082      	sub	sp, #8
    bb7c:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
    bb7e:	1d3b      	adds	r3, r7, #4
    bb80:	0018      	movs	r0, r3
    bb82:	4b0d      	ldr	r3, [pc, #52]	; (bbb8 <configure_event+0x40>)
    bb84:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
    bb86:	1d3b      	adds	r3, r7, #4
    bb88:	2203      	movs	r2, #3
    bb8a:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
    bb8c:	1d3b      	adds	r3, r7, #4
    bb8e:	2200      	movs	r2, #0
    bb90:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
    bb92:	1d3b      	adds	r3, r7, #4
    bb94:	2202      	movs	r2, #2
    bb96:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
    bb98:	1d3a      	adds	r2, r7, #4
    bb9a:	4b08      	ldr	r3, [pc, #32]	; (bbbc <configure_event+0x44>)
    bb9c:	0011      	movs	r1, r2
    bb9e:	0018      	movs	r0, r3
    bba0:	4b07      	ldr	r3, [pc, #28]	; (bbc0 <configure_event+0x48>)
    bba2:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
    bba4:	4b05      	ldr	r3, [pc, #20]	; (bbbc <configure_event+0x44>)
    bba6:	2119      	movs	r1, #25
    bba8:	0018      	movs	r0, r3
    bbaa:	4b06      	ldr	r3, [pc, #24]	; (bbc4 <configure_event+0x4c>)
    bbac:	4798      	blx	r3
}
    bbae:	46c0      	nop			; (mov r8, r8)
    bbb0:	46bd      	mov	sp, r7
    bbb2:	b002      	add	sp, #8
    bbb4:	bd80      	pop	{r7, pc}
    bbb6:	46c0      	nop			; (mov r8, r8)
    bbb8:	000116f1 	.word	0x000116f1
    bbbc:	20000834 	.word	0x20000834
    bbc0:	00011719 	.word	0x00011719
    bbc4:	000117e1 	.word	0x000117e1

0000bbc8 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
    bbc8:	b580      	push	{r7, lr}
    bbca:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
    bbcc:	4b28      	ldr	r3, [pc, #160]	; (bc70 <operateOnButtonEvent+0xa8>)
    bbce:	2200      	movs	r2, #0
    bbd0:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
    bbd2:	2026      	movs	r0, #38	; 0x26
    bbd4:	4b27      	ldr	r3, [pc, #156]	; (bc74 <operateOnButtonEvent+0xac>)
    bbd6:	4798      	blx	r3
    bbd8:	0003      	movs	r3, r0
    bbda:	001a      	movs	r2, r3
    bbdc:	2301      	movs	r3, #1
    bbde:	4053      	eors	r3, r2
    bbe0:	b2db      	uxtb	r3, r3
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d008      	beq.n	bbf8 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
    bbe6:	4b24      	ldr	r3, [pc, #144]	; (bc78 <operateOnButtonEvent+0xb0>)
    bbe8:	4798      	blx	r3
    bbea:	0002      	movs	r2, r0
    bbec:	4b23      	ldr	r3, [pc, #140]	; (bc7c <operateOnButtonEvent+0xb4>)
    bbee:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
    bbf0:	4b23      	ldr	r3, [pc, #140]	; (bc80 <operateOnButtonEvent+0xb8>)
    bbf2:	2201      	movs	r2, #1
    bbf4:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
    bbf6:	e037      	b.n	bc68 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
    bbf8:	2025      	movs	r0, #37	; 0x25
    bbfa:	4b1e      	ldr	r3, [pc, #120]	; (bc74 <operateOnButtonEvent+0xac>)
    bbfc:	4798      	blx	r3
    bbfe:	0003      	movs	r3, r0
    bc00:	001a      	movs	r2, r3
    bc02:	2301      	movs	r3, #1
    bc04:	4053      	eors	r3, r2
    bc06:	b2db      	uxtb	r3, r3
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d008      	beq.n	bc1e <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
    bc0c:	4b1a      	ldr	r3, [pc, #104]	; (bc78 <operateOnButtonEvent+0xb0>)
    bc0e:	4798      	blx	r3
    bc10:	0002      	movs	r2, r0
    bc12:	4b1a      	ldr	r3, [pc, #104]	; (bc7c <operateOnButtonEvent+0xb4>)
    bc14:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
    bc16:	4b1a      	ldr	r3, [pc, #104]	; (bc80 <operateOnButtonEvent+0xb8>)
    bc18:	2202      	movs	r2, #2
    bc1a:	701a      	strb	r2, [r3, #0]
}
    bc1c:	e024      	b.n	bc68 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
    bc1e:	201c      	movs	r0, #28
    bc20:	4b14      	ldr	r3, [pc, #80]	; (bc74 <operateOnButtonEvent+0xac>)
    bc22:	4798      	blx	r3
    bc24:	0003      	movs	r3, r0
    bc26:	001a      	movs	r2, r3
    bc28:	2301      	movs	r3, #1
    bc2a:	4053      	eors	r3, r2
    bc2c:	b2db      	uxtb	r3, r3
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d008      	beq.n	bc44 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
    bc32:	4b11      	ldr	r3, [pc, #68]	; (bc78 <operateOnButtonEvent+0xb0>)
    bc34:	4798      	blx	r3
    bc36:	0002      	movs	r2, r0
    bc38:	4b10      	ldr	r3, [pc, #64]	; (bc7c <operateOnButtonEvent+0xb4>)
    bc3a:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
    bc3c:	4b10      	ldr	r3, [pc, #64]	; (bc80 <operateOnButtonEvent+0xb8>)
    bc3e:	2203      	movs	r2, #3
    bc40:	701a      	strb	r2, [r3, #0]
}
    bc42:	e011      	b.n	bc68 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
    bc44:	2029      	movs	r0, #41	; 0x29
    bc46:	4b0b      	ldr	r3, [pc, #44]	; (bc74 <operateOnButtonEvent+0xac>)
    bc48:	4798      	blx	r3
    bc4a:	0003      	movs	r3, r0
    bc4c:	001a      	movs	r2, r3
    bc4e:	2301      	movs	r3, #1
    bc50:	4053      	eors	r3, r2
    bc52:	b2db      	uxtb	r3, r3
    bc54:	2b00      	cmp	r3, #0
    bc56:	d007      	beq.n	bc68 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
    bc58:	4b07      	ldr	r3, [pc, #28]	; (bc78 <operateOnButtonEvent+0xb0>)
    bc5a:	4798      	blx	r3
    bc5c:	0002      	movs	r2, r0
    bc5e:	4b07      	ldr	r3, [pc, #28]	; (bc7c <operateOnButtonEvent+0xb4>)
    bc60:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
    bc62:	4b07      	ldr	r3, [pc, #28]	; (bc80 <operateOnButtonEvent+0xb8>)
    bc64:	2204      	movs	r2, #4
    bc66:	701a      	strb	r2, [r3, #0]
}
    bc68:	46c0      	nop			; (mov r8, r8)
    bc6a:	46bd      	mov	sp, r7
    bc6c:	bd80      	pop	{r7, pc}
    bc6e:	46c0      	nop			; (mov r8, r8)
    bc70:	20000777 	.word	0x20000777
    bc74:	000088e1 	.word	0x000088e1
    bc78:	0000f40d 	.word	0x0000f40d
    bc7c:	20000740 	.word	0x20000740
    bc80:	20000760 	.word	0x20000760

0000bc84 <buttonFilter>:

void buttonFilter(void)
{
    bc84:	b580      	push	{r7, lr}
    bc86:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
    bc88:	4b47      	ldr	r3, [pc, #284]	; (bda8 <buttonFilter+0x124>)
    bc8a:	781b      	ldrb	r3, [r3, #0]
    bc8c:	b2db      	uxtb	r3, r3
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d100      	bne.n	bc94 <buttonFilter+0x10>
    bc92:	e086      	b.n	bda2 <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
    bc94:	4b44      	ldr	r3, [pc, #272]	; (bda8 <buttonFilter+0x124>)
    bc96:	781b      	ldrb	r3, [r3, #0]
    bc98:	b2db      	uxtb	r3, r3
    bc9a:	2b01      	cmp	r3, #1
    bc9c:	d111      	bne.n	bcc2 <buttonFilter+0x3e>
    bc9e:	2026      	movs	r0, #38	; 0x26
    bca0:	4b42      	ldr	r3, [pc, #264]	; (bdac <buttonFilter+0x128>)
    bca2:	4798      	blx	r3
    bca4:	0003      	movs	r3, r0
    bca6:	001a      	movs	r2, r3
    bca8:	2301      	movs	r3, #1
    bcaa:	4053      	eors	r3, r2
    bcac:	b2db      	uxtb	r3, r3
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d007      	beq.n	bcc2 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
    bcb2:	4b3d      	ldr	r3, [pc, #244]	; (bda8 <buttonFilter+0x124>)
    bcb4:	2200      	movs	r2, #0
    bcb6:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
    bcb8:	2100      	movs	r1, #0
    bcba:	2000      	movs	r0, #0
    bcbc:	4b3c      	ldr	r3, [pc, #240]	; (bdb0 <buttonFilter+0x12c>)
    bcbe:	4798      	blx	r3
    bcc0:	e06f      	b.n	bda2 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
    bcc2:	4b39      	ldr	r3, [pc, #228]	; (bda8 <buttonFilter+0x124>)
    bcc4:	781b      	ldrb	r3, [r3, #0]
    bcc6:	b2db      	uxtb	r3, r3
    bcc8:	2b02      	cmp	r3, #2
    bcca:	d112      	bne.n	bcf2 <buttonFilter+0x6e>
    bccc:	2025      	movs	r0, #37	; 0x25
    bcce:	4b37      	ldr	r3, [pc, #220]	; (bdac <buttonFilter+0x128>)
    bcd0:	4798      	blx	r3
    bcd2:	0003      	movs	r3, r0
    bcd4:	001a      	movs	r2, r3
    bcd6:	2301      	movs	r3, #1
    bcd8:	4053      	eors	r3, r2
    bcda:	b2db      	uxtb	r3, r3
    bcdc:	2b00      	cmp	r3, #0
    bcde:	d008      	beq.n	bcf2 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
    bce0:	4b31      	ldr	r3, [pc, #196]	; (bda8 <buttonFilter+0x124>)
    bce2:	2200      	movs	r2, #0
    bce4:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
    bce6:	2201      	movs	r2, #1
    bce8:	2100      	movs	r1, #0
    bcea:	2000      	movs	r0, #0
    bcec:	4b31      	ldr	r3, [pc, #196]	; (bdb4 <buttonFilter+0x130>)
    bcee:	4798      	blx	r3
    bcf0:	e057      	b.n	bda2 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
    bcf2:	4b2d      	ldr	r3, [pc, #180]	; (bda8 <buttonFilter+0x124>)
    bcf4:	781b      	ldrb	r3, [r3, #0]
    bcf6:	b2db      	uxtb	r3, r3
    bcf8:	2b03      	cmp	r3, #3
    bcfa:	d12b      	bne.n	bd54 <buttonFilter+0xd0>
    bcfc:	201c      	movs	r0, #28
    bcfe:	4b2b      	ldr	r3, [pc, #172]	; (bdac <buttonFilter+0x128>)
    bd00:	4798      	blx	r3
    bd02:	0003      	movs	r3, r0
    bd04:	001a      	movs	r2, r3
    bd06:	2301      	movs	r3, #1
    bd08:	4053      	eors	r3, r2
    bd0a:	b2db      	uxtb	r3, r3
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	d021      	beq.n	bd54 <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
    bd10:	4b25      	ldr	r3, [pc, #148]	; (bda8 <buttonFilter+0x124>)
    bd12:	2200      	movs	r2, #0
    bd14:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
    bd16:	4b28      	ldr	r3, [pc, #160]	; (bdb8 <buttonFilter+0x134>)
    bd18:	785b      	ldrb	r3, [r3, #1]
    bd1a:	425a      	negs	r2, r3
    bd1c:	4153      	adcs	r3, r2
    bd1e:	b2db      	uxtb	r3, r3
    bd20:	0018      	movs	r0, r3
    bd22:	4b26      	ldr	r3, [pc, #152]	; (bdbc <buttonFilter+0x138>)
    bd24:	4798      	blx	r3
			resetAutoStart(true);
    bd26:	2001      	movs	r0, #1
    bd28:	4b25      	ldr	r3, [pc, #148]	; (bdc0 <buttonFilter+0x13c>)
    bd2a:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
    bd2c:	4b22      	ldr	r3, [pc, #136]	; (bdb8 <buttonFilter+0x134>)
    bd2e:	785b      	ldrb	r3, [r3, #1]
    bd30:	2b00      	cmp	r3, #0
    bd32:	d007      	beq.n	bd44 <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
    bd34:	2029      	movs	r0, #41	; 0x29
    bd36:	4b23      	ldr	r3, [pc, #140]	; (bdc4 <buttonFilter+0x140>)
    bd38:	4798      	blx	r3
    bd3a:	0003      	movs	r3, r0
    bd3c:	001a      	movs	r2, r3
    bd3e:	4b22      	ldr	r3, [pc, #136]	; (bdc8 <buttonFilter+0x144>)
    bd40:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
    bd42:	e02e      	b.n	bda2 <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
    bd44:	205b      	movs	r0, #91	; 0x5b
    bd46:	4b1f      	ldr	r3, [pc, #124]	; (bdc4 <buttonFilter+0x140>)
    bd48:	4798      	blx	r3
    bd4a:	0003      	movs	r3, r0
    bd4c:	001a      	movs	r2, r3
    bd4e:	4b1e      	ldr	r3, [pc, #120]	; (bdc8 <buttonFilter+0x144>)
    bd50:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
    bd52:	e026      	b.n	bda2 <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
    bd54:	4b14      	ldr	r3, [pc, #80]	; (bda8 <buttonFilter+0x124>)
    bd56:	781b      	ldrb	r3, [r3, #0]
    bd58:	b2db      	uxtb	r3, r3
    bd5a:	2b04      	cmp	r3, #4
    bd5c:	d11d      	bne.n	bd9a <buttonFilter+0x116>
    bd5e:	2029      	movs	r0, #41	; 0x29
    bd60:	4b12      	ldr	r3, [pc, #72]	; (bdac <buttonFilter+0x128>)
    bd62:	4798      	blx	r3
    bd64:	0003      	movs	r3, r0
    bd66:	001a      	movs	r2, r3
    bd68:	2301      	movs	r3, #1
    bd6a:	4053      	eors	r3, r2
    bd6c:	b2db      	uxtb	r3, r3
    bd6e:	2b00      	cmp	r3, #0
    bd70:	d013      	beq.n	bd9a <buttonFilter+0x116>
		{
			lastButtonEvent=0;
    bd72:	4b0d      	ldr	r3, [pc, #52]	; (bda8 <buttonFilter+0x124>)
    bd74:	2200      	movs	r2, #0
    bd76:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
    bd78:	4b14      	ldr	r3, [pc, #80]	; (bdcc <buttonFilter+0x148>)
    bd7a:	781b      	ldrb	r3, [r3, #0]
    bd7c:	b2db      	uxtb	r3, r3
    bd7e:	1e5a      	subs	r2, r3, #1
    bd80:	4193      	sbcs	r3, r2
    bd82:	b2db      	uxtb	r3, r3
    bd84:	2201      	movs	r2, #1
    bd86:	4053      	eors	r3, r2
    bd88:	b2db      	uxtb	r3, r3
    bd8a:	1c1a      	adds	r2, r3, #0
    bd8c:	2301      	movs	r3, #1
    bd8e:	4013      	ands	r3, r2
    bd90:	b2db      	uxtb	r3, r3
    bd92:	0018      	movs	r0, r3
    bd94:	4b0e      	ldr	r3, [pc, #56]	; (bdd0 <buttonFilter+0x14c>)
    bd96:	4798      	blx	r3
    bd98:	e003      	b.n	bda2 <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
    bd9a:	4b03      	ldr	r3, [pc, #12]	; (bda8 <buttonFilter+0x124>)
    bd9c:	2200      	movs	r2, #0
    bd9e:	701a      	strb	r2, [r3, #0]
		}
	}
}
    bda0:	e7ff      	b.n	bda2 <buttonFilter+0x11e>
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	46bd      	mov	sp, r7
    bda6:	bd80      	pop	{r7, pc}
    bda8:	20000760 	.word	0x20000760
    bdac:	000088e1 	.word	0x000088e1
    bdb0:	0000a6d1 	.word	0x0000a6d1
    bdb4:	0000a895 	.word	0x0000a895
    bdb8:	2000065c 	.word	0x2000065c
    bdbc:	000012a9 	.word	0x000012a9
    bdc0:	0000a29d 	.word	0x0000a29d
    bdc4:	000047a5 	.word	0x000047a5
    bdc8:	20000700 	.word	0x20000700
    bdcc:	20000784 	.word	0x20000784
    bdd0:	0000bdd5 	.word	0x0000bdd5

0000bdd4 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
    bdd4:	b580      	push	{r7, lr}
    bdd6:	b082      	sub	sp, #8
    bdd8:	af00      	add	r7, sp, #0
    bdda:	0002      	movs	r2, r0
    bddc:	1dfb      	adds	r3, r7, #7
    bdde:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
    bde0:	4b03      	ldr	r3, [pc, #12]	; (bdf0 <setDisplayPause+0x1c>)
    bde2:	1dfa      	adds	r2, r7, #7
    bde4:	7812      	ldrb	r2, [r2, #0]
    bde6:	701a      	strb	r2, [r3, #0]
}
    bde8:	46c0      	nop			; (mov r8, r8)
    bdea:	46bd      	mov	sp, r7
    bdec:	b002      	add	sp, #8
    bdee:	bd80      	pop	{r7, pc}
    bdf0:	20000784 	.word	0x20000784

0000bdf4 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
    bdf4:	b580      	push	{r7, lr}
    bdf6:	b082      	sub	sp, #8
    bdf8:	af00      	add	r7, sp, #0
    bdfa:	6039      	str	r1, [r7, #0]
    bdfc:	0011      	movs	r1, r2
    bdfe:	1dfb      	adds	r3, r7, #7
    be00:	1c02      	adds	r2, r0, #0
    be02:	701a      	strb	r2, [r3, #0]
    be04:	1dbb      	adds	r3, r7, #6
    be06:	1c0a      	adds	r2, r1, #0
    be08:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
    be0a:	4b0f      	ldr	r3, [pc, #60]	; (be48 <setCallStateOnLCD+0x54>)
    be0c:	1dfa      	adds	r2, r7, #7
    be0e:	7812      	ldrb	r2, [r2, #0]
    be10:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
    be12:	1dbb      	adds	r3, r7, #6
    be14:	781b      	ldrb	r3, [r3, #0]
    be16:	2201      	movs	r2, #1
    be18:	4053      	eors	r3, r2
    be1a:	b2db      	uxtb	r3, r3
    be1c:	2b00      	cmp	r3, #0
    be1e:	d00f      	beq.n	be40 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
    be20:	4b0a      	ldr	r3, [pc, #40]	; (be4c <setCallStateOnLCD+0x58>)
    be22:	2214      	movs	r2, #20
    be24:	2100      	movs	r1, #0
    be26:	0018      	movs	r0, r3
    be28:	4b09      	ldr	r3, [pc, #36]	; (be50 <setCallStateOnLCD+0x5c>)
    be2a:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
    be2c:	4b06      	ldr	r3, [pc, #24]	; (be48 <setCallStateOnLCD+0x54>)
    be2e:	781b      	ldrb	r3, [r3, #0]
    be30:	2b00      	cmp	r3, #0
    be32:	d005      	beq.n	be40 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
    be34:	683a      	ldr	r2, [r7, #0]
    be36:	4b05      	ldr	r3, [pc, #20]	; (be4c <setCallStateOnLCD+0x58>)
    be38:	0011      	movs	r1, r2
    be3a:	0018      	movs	r0, r3
    be3c:	4b05      	ldr	r3, [pc, #20]	; (be54 <setCallStateOnLCD+0x60>)
    be3e:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
    be40:	46c0      	nop			; (mov r8, r8)
    be42:	46bd      	mov	sp, r7
    be44:	b002      	add	sp, #8
    be46:	bd80      	pop	{r7, pc}
    be48:	20000799 	.word	0x20000799
    be4c:	20000800 	.word	0x20000800
    be50:	00017d67 	.word	0x00017d67
    be54:	00017fe7 	.word	0x00017fe7

0000be58 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
    be58:	b580      	push	{r7, lr}
    be5a:	b084      	sub	sp, #16
    be5c:	af00      	add	r7, sp, #0
    be5e:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    be60:	4b0f      	ldr	r3, [pc, #60]	; (bea0 <vTask_50ms_Timer+0x48>)
    be62:	4798      	blx	r3
    be64:	0003      	movs	r3, r0
    be66:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    be68:	230c      	movs	r3, #12
    be6a:	18fb      	adds	r3, r7, r3
    be6c:	2119      	movs	r1, #25
    be6e:	0018      	movs	r0, r3
    be70:	4b0c      	ldr	r3, [pc, #48]	; (bea4 <vTask_50ms_Timer+0x4c>)
    be72:	4798      	blx	r3
		if(buttonEventOccured)
    be74:	4b0c      	ldr	r3, [pc, #48]	; (bea8 <vTask_50ms_Timer+0x50>)
    be76:	781b      	ldrb	r3, [r3, #0]
    be78:	b2db      	uxtb	r3, r3
    be7a:	2b00      	cmp	r3, #0
    be7c:	d001      	beq.n	be82 <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
    be7e:	4b0b      	ldr	r3, [pc, #44]	; (beac <vTask_50ms_Timer+0x54>)
    be80:	4798      	blx	r3
		}
		if(lastButtonEvent>0)
    be82:	4b0b      	ldr	r3, [pc, #44]	; (beb0 <vTask_50ms_Timer+0x58>)
    be84:	781b      	ldrb	r3, [r3, #0]
    be86:	b2db      	uxtb	r3, r3
    be88:	2b00      	cmp	r3, #0
    be8a:	d0ed      	beq.n	be68 <vTask_50ms_Timer+0x10>
		{
			taskPSet=true;
    be8c:	4b09      	ldr	r3, [pc, #36]	; (beb4 <vTask_50ms_Timer+0x5c>)
    be8e:	2201      	movs	r2, #1
    be90:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
    be92:	4b09      	ldr	r3, [pc, #36]	; (beb8 <vTask_50ms_Timer+0x60>)
    be94:	681b      	ldr	r3, [r3, #0]
    be96:	2102      	movs	r1, #2
    be98:	0018      	movs	r0, r3
    be9a:	4b08      	ldr	r3, [pc, #32]	; (bebc <vTask_50ms_Timer+0x64>)
    be9c:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    be9e:	e7e3      	b.n	be68 <vTask_50ms_Timer+0x10>
    bea0:	0000f40d 	.word	0x0000f40d
    bea4:	0000efe1 	.word	0x0000efe1
    bea8:	20000777 	.word	0x20000777
    beac:	0000bbc9 	.word	0x0000bbc9
    beb0:	20000760 	.word	0x20000760
    beb4:	20000716 	.word	0x20000716
    beb8:	200007a4 	.word	0x200007a4
    bebc:	0000f105 	.word	0x0000f105

0000bec0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    bec0:	b580      	push	{r7, lr}
    bec2:	b082      	sub	sp, #8
    bec4:	af00      	add	r7, sp, #0
    bec6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    bec8:	687b      	ldr	r3, [r7, #4]
    beca:	2200      	movs	r2, #0
    becc:	701a      	strb	r2, [r3, #0]
}
    bece:	46c0      	nop			; (mov r8, r8)
    bed0:	46bd      	mov	sp, r7
    bed2:	b002      	add	sp, #8
    bed4:	bd80      	pop	{r7, pc}
	...

0000bed8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    bed8:	b580      	push	{r7, lr}
    beda:	b082      	sub	sp, #8
    bedc:	af00      	add	r7, sp, #0
    bede:	0002      	movs	r2, r0
    bee0:	6039      	str	r1, [r7, #0]
    bee2:	1dfb      	adds	r3, r7, #7
    bee4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bee6:	1dfb      	adds	r3, r7, #7
    bee8:	781b      	ldrb	r3, [r3, #0]
    beea:	2b01      	cmp	r3, #1
    beec:	d00a      	beq.n	bf04 <system_apb_clock_set_mask+0x2c>
    beee:	2b02      	cmp	r3, #2
    bef0:	d00f      	beq.n	bf12 <system_apb_clock_set_mask+0x3a>
    bef2:	2b00      	cmp	r3, #0
    bef4:	d114      	bne.n	bf20 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    bef6:	4b0e      	ldr	r3, [pc, #56]	; (bf30 <system_apb_clock_set_mask+0x58>)
    bef8:	4a0d      	ldr	r2, [pc, #52]	; (bf30 <system_apb_clock_set_mask+0x58>)
    befa:	6991      	ldr	r1, [r2, #24]
    befc:	683a      	ldr	r2, [r7, #0]
    befe:	430a      	orrs	r2, r1
    bf00:	619a      	str	r2, [r3, #24]
			break;
    bf02:	e00f      	b.n	bf24 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    bf04:	4b0a      	ldr	r3, [pc, #40]	; (bf30 <system_apb_clock_set_mask+0x58>)
    bf06:	4a0a      	ldr	r2, [pc, #40]	; (bf30 <system_apb_clock_set_mask+0x58>)
    bf08:	69d1      	ldr	r1, [r2, #28]
    bf0a:	683a      	ldr	r2, [r7, #0]
    bf0c:	430a      	orrs	r2, r1
    bf0e:	61da      	str	r2, [r3, #28]
			break;
    bf10:	e008      	b.n	bf24 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    bf12:	4b07      	ldr	r3, [pc, #28]	; (bf30 <system_apb_clock_set_mask+0x58>)
    bf14:	4a06      	ldr	r2, [pc, #24]	; (bf30 <system_apb_clock_set_mask+0x58>)
    bf16:	6a11      	ldr	r1, [r2, #32]
    bf18:	683a      	ldr	r2, [r7, #0]
    bf1a:	430a      	orrs	r2, r1
    bf1c:	621a      	str	r2, [r3, #32]
			break;
    bf1e:	e001      	b.n	bf24 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    bf20:	2317      	movs	r3, #23
    bf22:	e000      	b.n	bf26 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    bf24:	2300      	movs	r3, #0
}
    bf26:	0018      	movs	r0, r3
    bf28:	46bd      	mov	sp, r7
    bf2a:	b002      	add	sp, #8
    bf2c:	bd80      	pop	{r7, pc}
    bf2e:	46c0      	nop			; (mov r8, r8)
    bf30:	40000400 	.word	0x40000400

0000bf34 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    bf34:	b580      	push	{r7, lr}
    bf36:	b084      	sub	sp, #16
    bf38:	af00      	add	r7, sp, #0
    bf3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    bf3c:	687b      	ldr	r3, [r7, #4]
    bf3e:	681b      	ldr	r3, [r3, #0]
    bf40:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    bf42:	68fb      	ldr	r3, [r7, #12]
    bf44:	7a5b      	ldrb	r3, [r3, #9]
    bf46:	b2db      	uxtb	r3, r3
    bf48:	b25b      	sxtb	r3, r3
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	da01      	bge.n	bf52 <ac_is_syncing+0x1e>
		return true;
    bf4e:	2301      	movs	r3, #1
    bf50:	e000      	b.n	bf54 <ac_is_syncing+0x20>
	}

	return false;
    bf52:	2300      	movs	r3, #0
#endif
}
    bf54:	0018      	movs	r0, r3
    bf56:	46bd      	mov	sp, r7
    bf58:	b004      	add	sp, #16
    bf5a:	bd80      	pop	{r7, pc}

0000bf5c <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
    bf5c:	b580      	push	{r7, lr}
    bf5e:	b086      	sub	sp, #24
    bf60:	af00      	add	r7, sp, #0
    bf62:	6078      	str	r0, [r7, #4]
    bf64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    bf66:	687b      	ldr	r3, [r7, #4]
    bf68:	681b      	ldr	r3, [r3, #0]
    bf6a:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
    bf6c:	2300      	movs	r3, #0
    bf6e:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bf70:	2300      	movs	r3, #0
    bf72:	613b      	str	r3, [r7, #16]
    bf74:	e00f      	b.n	bf96 <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
    bf76:	683a      	ldr	r2, [r7, #0]
    bf78:	693b      	ldr	r3, [r7, #16]
    bf7a:	18d3      	adds	r3, r2, r3
    bf7c:	781b      	ldrb	r3, [r3, #0]
    bf7e:	2b00      	cmp	r3, #0
    bf80:	d006      	beq.n	bf90 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
    bf82:	2204      	movs	r2, #4
    bf84:	693b      	ldr	r3, [r7, #16]
    bf86:	409a      	lsls	r2, r3
    bf88:	0013      	movs	r3, r2
    bf8a:	697a      	ldr	r2, [r7, #20]
    bf8c:	4313      	orrs	r3, r2
    bf8e:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bf90:	693b      	ldr	r3, [r7, #16]
    bf92:	3301      	adds	r3, #1
    bf94:	613b      	str	r3, [r7, #16]
    bf96:	693b      	ldr	r3, [r7, #16]
    bf98:	2b00      	cmp	r3, #0
    bf9a:	d0ec      	beq.n	bf76 <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
    bf9c:	46c0      	nop			; (mov r8, r8)
    bf9e:	687b      	ldr	r3, [r7, #4]
    bfa0:	0018      	movs	r0, r3
    bfa2:	4b06      	ldr	r3, [pc, #24]	; (bfbc <_ac_set_config+0x60>)
    bfa4:	4798      	blx	r3
    bfa6:	1e03      	subs	r3, r0, #0
    bfa8:	d1f9      	bne.n	bf9e <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
    bfaa:	697b      	ldr	r3, [r7, #20]
    bfac:	b2da      	uxtb	r2, r3
    bfae:	68fb      	ldr	r3, [r7, #12]
    bfb0:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bfb2:	2300      	movs	r3, #0
}
    bfb4:	0018      	movs	r0, r3
    bfb6:	46bd      	mov	sp, r7
    bfb8:	b006      	add	sp, #24
    bfba:	bd80      	pop	{r7, pc}
    bfbc:	0000bf35 	.word	0x0000bf35

0000bfc0 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
    bfc0:	b580      	push	{r7, lr}
    bfc2:	b086      	sub	sp, #24
    bfc4:	af00      	add	r7, sp, #0
    bfc6:	60f8      	str	r0, [r7, #12]
    bfc8:	60b9      	str	r1, [r7, #8]
    bfca:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
    bfcc:	68fb      	ldr	r3, [r7, #12]
    bfce:	68ba      	ldr	r2, [r7, #8]
    bfd0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    bfd2:	2314      	movs	r3, #20
    bfd4:	18fb      	adds	r3, r7, r3
    bfd6:	0018      	movs	r0, r3
    bfd8:	4b2a      	ldr	r3, [pc, #168]	; (c084 <ac_init+0xc4>)
    bfda:	4798      	blx	r3

	if (hw == AC) {
    bfdc:	68bb      	ldr	r3, [r7, #8]
    bfde:	4a2a      	ldr	r2, [pc, #168]	; (c088 <ac_init+0xc8>)
    bfe0:	4293      	cmp	r3, r2
    bfe2:	d121      	bne.n	c028 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
    bfe4:	2380      	movs	r3, #128	; 0x80
    bfe6:	029b      	lsls	r3, r3, #10
    bfe8:	0019      	movs	r1, r3
    bfea:	2002      	movs	r0, #2
    bfec:	4b27      	ldr	r3, [pc, #156]	; (c08c <ac_init+0xcc>)
    bfee:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
    bff0:	687b      	ldr	r3, [r7, #4]
    bff2:	785a      	ldrb	r2, [r3, #1]
    bff4:	2314      	movs	r3, #20
    bff6:	18fb      	adds	r3, r7, r3
    bff8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    bffa:	2314      	movs	r3, #20
    bffc:	18fb      	adds	r3, r7, r3
    bffe:	0019      	movs	r1, r3
    c000:	201f      	movs	r0, #31
    c002:	4b23      	ldr	r3, [pc, #140]	; (c090 <ac_init+0xd0>)
    c004:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
    c006:	201f      	movs	r0, #31
    c008:	4b22      	ldr	r3, [pc, #136]	; (c094 <ac_init+0xd4>)
    c00a:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
    c00c:	687b      	ldr	r3, [r7, #4]
    c00e:	789a      	ldrb	r2, [r3, #2]
    c010:	2314      	movs	r3, #20
    c012:	18fb      	adds	r3, r7, r3
    c014:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
    c016:	2314      	movs	r3, #20
    c018:	18fb      	adds	r3, r7, r3
    c01a:	0019      	movs	r1, r3
    c01c:	2020      	movs	r0, #32
    c01e:	4b1c      	ldr	r3, [pc, #112]	; (c090 <ac_init+0xd0>)
    c020:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
    c022:	2020      	movs	r0, #32
    c024:	4b1b      	ldr	r3, [pc, #108]	; (c094 <ac_init+0xd4>)
    c026:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    c028:	2317      	movs	r3, #23
    c02a:	18fb      	adds	r3, r7, r3
    c02c:	2200      	movs	r2, #0
    c02e:	701a      	strb	r2, [r3, #0]
    c030:	e00f      	b.n	c052 <ac_init+0x92>
		module_inst->callback[i]        = NULL;
    c032:	2317      	movs	r3, #23
    c034:	18fb      	adds	r3, r7, r3
    c036:	781b      	ldrb	r3, [r3, #0]
    c038:	68fa      	ldr	r2, [r7, #12]
    c03a:	009b      	lsls	r3, r3, #2
    c03c:	18d3      	adds	r3, r2, r3
    c03e:	3304      	adds	r3, #4
    c040:	2200      	movs	r2, #0
    c042:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    c044:	2317      	movs	r3, #23
    c046:	18fb      	adds	r3, r7, r3
    c048:	781a      	ldrb	r2, [r3, #0]
    c04a:	2317      	movs	r3, #23
    c04c:	18fb      	adds	r3, r7, r3
    c04e:	3201      	adds	r2, #1
    c050:	701a      	strb	r2, [r3, #0]
    c052:	2317      	movs	r3, #23
    c054:	18fb      	adds	r3, r7, r3
    c056:	781b      	ldrb	r3, [r3, #0]
    c058:	2b04      	cmp	r3, #4
    c05a:	d9ea      	bls.n	c032 <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
    c05c:	68fb      	ldr	r3, [r7, #12]
    c05e:	2200      	movs	r2, #0
    c060:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
    c062:	68fb      	ldr	r3, [r7, #12]
    c064:	2200      	movs	r2, #0
    c066:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
    c068:	4b0b      	ldr	r3, [pc, #44]	; (c098 <ac_init+0xd8>)
    c06a:	68fa      	ldr	r2, [r7, #12]
    c06c:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
    c06e:	687a      	ldr	r2, [r7, #4]
    c070:	68fb      	ldr	r3, [r7, #12]
    c072:	0011      	movs	r1, r2
    c074:	0018      	movs	r0, r3
    c076:	4b09      	ldr	r3, [pc, #36]	; (c09c <ac_init+0xdc>)
    c078:	4798      	blx	r3
    c07a:	0003      	movs	r3, r0
}
    c07c:	0018      	movs	r0, r3
    c07e:	46bd      	mov	sp, r7
    c080:	b006      	add	sp, #24
    c082:	bd80      	pop	{r7, pc}
    c084:	0000bec1 	.word	0x0000bec1
    c088:	42004400 	.word	0x42004400
    c08c:	0000bed9 	.word	0x0000bed9
    c090:	000139bd 	.word	0x000139bd
    c094:	00013a01 	.word	0x00013a01
    c098:	20000934 	.word	0x20000934
    c09c:	0000bf5d 	.word	0x0000bf5d

0000c0a0 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
    c0a0:	b580      	push	{r7, lr}
    c0a2:	b086      	sub	sp, #24
    c0a4:	af00      	add	r7, sp, #0
    c0a6:	60f8      	str	r0, [r7, #12]
    c0a8:	607a      	str	r2, [r7, #4]
    c0aa:	230b      	movs	r3, #11
    c0ac:	18fb      	adds	r3, r7, r3
    c0ae:	1c0a      	adds	r2, r1, #0
    c0b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    c0b2:	68fb      	ldr	r3, [r7, #12]
    c0b4:	681b      	ldr	r3, [r3, #0]
    c0b6:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
    c0b8:	2300      	movs	r3, #0
    c0ba:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
    c0bc:	687b      	ldr	r3, [r7, #4]
    c0be:	685b      	ldr	r3, [r3, #4]
    c0c0:	697a      	ldr	r2, [r7, #20]
    c0c2:	4313      	orrs	r3, r2
    c0c4:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
    c0c6:	687b      	ldr	r3, [r7, #4]
    c0c8:	7a1b      	ldrb	r3, [r3, #8]
    c0ca:	2b00      	cmp	r3, #0
    c0cc:	d004      	beq.n	c0d8 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
    c0ce:	697b      	ldr	r3, [r7, #20]
    c0d0:	2280      	movs	r2, #128	; 0x80
    c0d2:	0312      	lsls	r2, r2, #12
    c0d4:	4313      	orrs	r3, r2
    c0d6:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
    c0d8:	687b      	ldr	r3, [r7, #4]
    c0da:	68db      	ldr	r3, [r3, #12]
    c0dc:	697a      	ldr	r2, [r7, #20]
    c0de:	4313      	orrs	r3, r2
    c0e0:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
    c0e2:	687b      	ldr	r3, [r7, #4]
    c0e4:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
    c0e6:	687b      	ldr	r3, [r7, #4]
    c0e8:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
    c0ea:	4313      	orrs	r3, r2
    c0ec:	b29b      	uxth	r3, r3
    c0ee:	001a      	movs	r2, r3
	compctrl_temp |=
    c0f0:	697b      	ldr	r3, [r7, #20]
    c0f2:	4313      	orrs	r3, r2
    c0f4:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
    c0f6:	687b      	ldr	r3, [r7, #4]
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	001a      	movs	r2, r3
    c0fc:	697b      	ldr	r3, [r7, #20]
    c0fe:	4313      	orrs	r3, r2
    c100:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
    c102:	687b      	ldr	r3, [r7, #4]
    c104:	7d5b      	ldrb	r3, [r3, #21]
    c106:	001a      	movs	r2, r3
    c108:	697b      	ldr	r3, [r7, #20]
    c10a:	4313      	orrs	r3, r2
    c10c:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
    c10e:	46c0      	nop			; (mov r8, r8)
    c110:	68fb      	ldr	r3, [r7, #12]
    c112:	0018      	movs	r0, r3
    c114:	4b0e      	ldr	r3, [pc, #56]	; (c150 <ac_chan_set_config+0xb0>)
    c116:	4798      	blx	r3
    c118:	1e03      	subs	r3, r0, #0
    c11a:	d1f9      	bne.n	c110 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
    c11c:	230b      	movs	r3, #11
    c11e:	18fb      	adds	r3, r7, r3
    c120:	781a      	ldrb	r2, [r3, #0]
    c122:	693b      	ldr	r3, [r7, #16]
    c124:	3204      	adds	r2, #4
    c126:	0092      	lsls	r2, r2, #2
    c128:	6979      	ldr	r1, [r7, #20]
    c12a:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
    c12c:	230b      	movs	r3, #11
    c12e:	18fb      	adds	r3, r7, r3
    c130:	781b      	ldrb	r3, [r3, #0]
    c132:	687a      	ldr	r2, [r7, #4]
    c134:	7d12      	ldrb	r2, [r2, #20]
    c136:	3a01      	subs	r2, #1
    c138:	b2d0      	uxtb	r0, r2
    c13a:	693a      	ldr	r2, [r7, #16]
    c13c:	2120      	movs	r1, #32
    c13e:	18d3      	adds	r3, r2, r3
    c140:	185b      	adds	r3, r3, r1
    c142:	1c02      	adds	r2, r0, #0
    c144:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    c146:	2300      	movs	r3, #0
}
    c148:	0018      	movs	r0, r3
    c14a:	46bd      	mov	sp, r7
    c14c:	b006      	add	sp, #24
    c14e:	bd80      	pop	{r7, pc}
    c150:	0000bf35 	.word	0x0000bf35

0000c154 <system_gclk_chan_get_config_defaults>:
{
    c154:	b580      	push	{r7, lr}
    c156:	b082      	sub	sp, #8
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c15c:	687b      	ldr	r3, [r7, #4]
    c15e:	2200      	movs	r2, #0
    c160:	701a      	strb	r2, [r3, #0]
}
    c162:	46c0      	nop			; (mov r8, r8)
    c164:	46bd      	mov	sp, r7
    c166:	b002      	add	sp, #8
    c168:	bd80      	pop	{r7, pc}
	...

0000c16c <system_apb_clock_set_mask>:
{
    c16c:	b580      	push	{r7, lr}
    c16e:	b082      	sub	sp, #8
    c170:	af00      	add	r7, sp, #0
    c172:	0002      	movs	r2, r0
    c174:	6039      	str	r1, [r7, #0]
    c176:	1dfb      	adds	r3, r7, #7
    c178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c17a:	1dfb      	adds	r3, r7, #7
    c17c:	781b      	ldrb	r3, [r3, #0]
    c17e:	2b01      	cmp	r3, #1
    c180:	d00a      	beq.n	c198 <system_apb_clock_set_mask+0x2c>
    c182:	2b02      	cmp	r3, #2
    c184:	d00f      	beq.n	c1a6 <system_apb_clock_set_mask+0x3a>
    c186:	2b00      	cmp	r3, #0
    c188:	d114      	bne.n	c1b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c18a:	4b0e      	ldr	r3, [pc, #56]	; (c1c4 <system_apb_clock_set_mask+0x58>)
    c18c:	4a0d      	ldr	r2, [pc, #52]	; (c1c4 <system_apb_clock_set_mask+0x58>)
    c18e:	6991      	ldr	r1, [r2, #24]
    c190:	683a      	ldr	r2, [r7, #0]
    c192:	430a      	orrs	r2, r1
    c194:	619a      	str	r2, [r3, #24]
			break;
    c196:	e00f      	b.n	c1b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c198:	4b0a      	ldr	r3, [pc, #40]	; (c1c4 <system_apb_clock_set_mask+0x58>)
    c19a:	4a0a      	ldr	r2, [pc, #40]	; (c1c4 <system_apb_clock_set_mask+0x58>)
    c19c:	69d1      	ldr	r1, [r2, #28]
    c19e:	683a      	ldr	r2, [r7, #0]
    c1a0:	430a      	orrs	r2, r1
    c1a2:	61da      	str	r2, [r3, #28]
			break;
    c1a4:	e008      	b.n	c1b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c1a6:	4b07      	ldr	r3, [pc, #28]	; (c1c4 <system_apb_clock_set_mask+0x58>)
    c1a8:	4a06      	ldr	r2, [pc, #24]	; (c1c4 <system_apb_clock_set_mask+0x58>)
    c1aa:	6a11      	ldr	r1, [r2, #32]
    c1ac:	683a      	ldr	r2, [r7, #0]
    c1ae:	430a      	orrs	r2, r1
    c1b0:	621a      	str	r2, [r3, #32]
			break;
    c1b2:	e001      	b.n	c1b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c1b4:	2317      	movs	r3, #23
    c1b6:	e000      	b.n	c1ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c1b8:	2300      	movs	r3, #0
}
    c1ba:	0018      	movs	r0, r3
    c1bc:	46bd      	mov	sp, r7
    c1be:	b002      	add	sp, #8
    c1c0:	bd80      	pop	{r7, pc}
    c1c2:	46c0      	nop			; (mov r8, r8)
    c1c4:	40000400 	.word	0x40000400

0000c1c8 <system_pinmux_get_config_defaults>:
{
    c1c8:	b580      	push	{r7, lr}
    c1ca:	b082      	sub	sp, #8
    c1cc:	af00      	add	r7, sp, #0
    c1ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	2280      	movs	r2, #128	; 0x80
    c1d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c1d6:	687b      	ldr	r3, [r7, #4]
    c1d8:	2200      	movs	r2, #0
    c1da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	2201      	movs	r2, #1
    c1e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c1e2:	687b      	ldr	r3, [r7, #4]
    c1e4:	2200      	movs	r2, #0
    c1e6:	70da      	strb	r2, [r3, #3]
}
    c1e8:	46c0      	nop			; (mov r8, r8)
    c1ea:	46bd      	mov	sp, r7
    c1ec:	b002      	add	sp, #8
    c1ee:	bd80      	pop	{r7, pc}

0000c1f0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    c1f0:	b580      	push	{r7, lr}
    c1f2:	b082      	sub	sp, #8
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	0002      	movs	r2, r0
    c1f8:	1dfb      	adds	r3, r7, #7
    c1fa:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    c1fc:	1dfb      	adds	r3, r7, #7
    c1fe:	781b      	ldrb	r3, [r3, #0]
    c200:	2b00      	cmp	r3, #0
    c202:	d002      	beq.n	c20a <system_voltage_reference_enable+0x1a>
    c204:	2b01      	cmp	r3, #1
    c206:	d007      	beq.n	c218 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    c208:	e00d      	b.n	c226 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    c20a:	4b08      	ldr	r3, [pc, #32]	; (c22c <system_voltage_reference_enable+0x3c>)
    c20c:	4a07      	ldr	r2, [pc, #28]	; (c22c <system_voltage_reference_enable+0x3c>)
    c20e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    c210:	2102      	movs	r1, #2
    c212:	430a      	orrs	r2, r1
    c214:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    c216:	e006      	b.n	c226 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    c218:	4b04      	ldr	r3, [pc, #16]	; (c22c <system_voltage_reference_enable+0x3c>)
    c21a:	4a04      	ldr	r2, [pc, #16]	; (c22c <system_voltage_reference_enable+0x3c>)
    c21c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    c21e:	2104      	movs	r1, #4
    c220:	430a      	orrs	r2, r1
    c222:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    c224:	46c0      	nop			; (mov r8, r8)
	}
}
    c226:	46bd      	mov	sp, r7
    c228:	b002      	add	sp, #8
    c22a:	bd80      	pop	{r7, pc}
    c22c:	40000800 	.word	0x40000800

0000c230 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    c230:	b580      	push	{r7, lr}
    c232:	b084      	sub	sp, #16
    c234:	af00      	add	r7, sp, #0
    c236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    c238:	687b      	ldr	r3, [r7, #4]
    c23a:	681b      	ldr	r3, [r3, #0]
    c23c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c23e:	68fb      	ldr	r3, [r7, #12]
    c240:	7e5b      	ldrb	r3, [r3, #25]
    c242:	b2db      	uxtb	r3, r3
    c244:	b25b      	sxtb	r3, r3
    c246:	2b00      	cmp	r3, #0
    c248:	da01      	bge.n	c24e <adc_is_syncing+0x1e>
		return true;
    c24a:	2301      	movs	r3, #1
    c24c:	e000      	b.n	c250 <adc_is_syncing+0x20>
	}

	return false;
    c24e:	2300      	movs	r3, #0
}
    c250:	0018      	movs	r0, r3
    c252:	46bd      	mov	sp, r7
    c254:	b004      	add	sp, #16
    c256:	bd80      	pop	{r7, pc}

0000c258 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    c258:	b580      	push	{r7, lr}
    c25a:	b082      	sub	sp, #8
    c25c:	af00      	add	r7, sp, #0
    c25e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    c260:	687b      	ldr	r3, [r7, #4]
    c262:	2200      	movs	r2, #0
    c264:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    c266:	687b      	ldr	r3, [r7, #4]
    c268:	2200      	movs	r2, #0
    c26a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    c26c:	687b      	ldr	r3, [r7, #4]
    c26e:	2200      	movs	r2, #0
    c270:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    c272:	687b      	ldr	r3, [r7, #4]
    c274:	2200      	movs	r2, #0
    c276:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    c278:	687b      	ldr	r3, [r7, #4]
    c27a:	2200      	movs	r2, #0
    c27c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    c27e:	687b      	ldr	r3, [r7, #4]
    c280:	2200      	movs	r2, #0
    c282:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    c284:	687b      	ldr	r3, [r7, #4]
    c286:	2200      	movs	r2, #0
    c288:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    c28a:	687b      	ldr	r3, [r7, #4]
    c28c:	2200      	movs	r2, #0
    c28e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    c290:	687b      	ldr	r3, [r7, #4]
    c292:	2200      	movs	r2, #0
    c294:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    c296:	687b      	ldr	r3, [r7, #4]
    c298:	22c0      	movs	r2, #192	; 0xc0
    c29a:	0152      	lsls	r2, r2, #5
    c29c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	2200      	movs	r2, #0
    c2a2:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    c2a4:	687b      	ldr	r3, [r7, #4]
    c2a6:	2200      	movs	r2, #0
    c2a8:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    c2aa:	687b      	ldr	r3, [r7, #4]
    c2ac:	2200      	movs	r2, #0
    c2ae:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    c2b0:	687b      	ldr	r3, [r7, #4]
    c2b2:	2200      	movs	r2, #0
    c2b4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	2200      	movs	r2, #0
    c2ba:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    c2bc:	687b      	ldr	r3, [r7, #4]
    c2be:	222a      	movs	r2, #42	; 0x2a
    c2c0:	2100      	movs	r1, #0
    c2c2:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    c2c4:	687b      	ldr	r3, [r7, #4]
    c2c6:	2200      	movs	r2, #0
    c2c8:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    c2ca:	687b      	ldr	r3, [r7, #4]
    c2cc:	2200      	movs	r2, #0
    c2ce:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    c2d0:	687b      	ldr	r3, [r7, #4]
    c2d2:	2224      	movs	r2, #36	; 0x24
    c2d4:	2100      	movs	r1, #0
    c2d6:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    c2d8:	687b      	ldr	r3, [r7, #4]
    c2da:	2200      	movs	r2, #0
    c2dc:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    c2de:	687b      	ldr	r3, [r7, #4]
    c2e0:	2200      	movs	r2, #0
    c2e2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    c2e4:	687b      	ldr	r3, [r7, #4]
    c2e6:	2200      	movs	r2, #0
    c2e8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	222b      	movs	r2, #43	; 0x2b
    c2ee:	2100      	movs	r1, #0
    c2f0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    c2f2:	687b      	ldr	r3, [r7, #4]
    c2f4:	222c      	movs	r2, #44	; 0x2c
    c2f6:	2100      	movs	r1, #0
    c2f8:	5499      	strb	r1, [r3, r2]
}
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	46bd      	mov	sp, r7
    c2fe:	b002      	add	sp, #8
    c300:	bd80      	pop	{r7, pc}
	...

0000c304 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    c304:	b580      	push	{r7, lr}
    c306:	b098      	sub	sp, #96	; 0x60
    c308:	af00      	add	r7, sp, #0
    c30a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    c30c:	230c      	movs	r3, #12
    c30e:	18fa      	adds	r2, r7, r3
    c310:	4b15      	ldr	r3, [pc, #84]	; (c368 <_adc_configure_ain_pin+0x64>)
    c312:	0010      	movs	r0, r2
    c314:	0019      	movs	r1, r3
    c316:	2350      	movs	r3, #80	; 0x50
    c318:	001a      	movs	r2, r3
    c31a:	4b14      	ldr	r3, [pc, #80]	; (c36c <_adc_configure_ain_pin+0x68>)
    c31c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    c31e:	4b14      	ldr	r3, [pc, #80]	; (c370 <_adc_configure_ain_pin+0x6c>)
    c320:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    c322:	687b      	ldr	r3, [r7, #4]
    c324:	2b13      	cmp	r3, #19
    c326:	d81a      	bhi.n	c35e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    c328:	230c      	movs	r3, #12
    c32a:	18fb      	adds	r3, r7, r3
    c32c:	687a      	ldr	r2, [r7, #4]
    c32e:	0092      	lsls	r2, r2, #2
    c330:	58d3      	ldr	r3, [r2, r3]
    c332:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    c334:	2308      	movs	r3, #8
    c336:	18fb      	adds	r3, r7, r3
    c338:	0018      	movs	r0, r3
    c33a:	4b0e      	ldr	r3, [pc, #56]	; (c374 <_adc_configure_ain_pin+0x70>)
    c33c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    c33e:	2308      	movs	r3, #8
    c340:	18fb      	adds	r3, r7, r3
    c342:	2200      	movs	r2, #0
    c344:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    c346:	2308      	movs	r3, #8
    c348:	18fb      	adds	r3, r7, r3
    c34a:	2201      	movs	r2, #1
    c34c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    c34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c350:	b2db      	uxtb	r3, r3
    c352:	2208      	movs	r2, #8
    c354:	18ba      	adds	r2, r7, r2
    c356:	0011      	movs	r1, r2
    c358:	0018      	movs	r0, r3
    c35a:	4b07      	ldr	r3, [pc, #28]	; (c378 <_adc_configure_ain_pin+0x74>)
    c35c:	4798      	blx	r3
	}
}
    c35e:	46c0      	nop			; (mov r8, r8)
    c360:	46bd      	mov	sp, r7
    c362:	b018      	add	sp, #96	; 0x60
    c364:	bd80      	pop	{r7, pc}
    c366:	46c0      	nop			; (mov r8, r8)
    c368:	000197b4 	.word	0x000197b4
    c36c:	00017d31 	.word	0x00017d31
    c370:	0000ffff 	.word	0x0000ffff
    c374:	0000c1c9 	.word	0x0000c1c9
    c378:	00013ca9 	.word	0x00013ca9

0000c37c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    c37c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c37e:	b089      	sub	sp, #36	; 0x24
    c380:	af00      	add	r7, sp, #0
    c382:	6078      	str	r0, [r7, #4]
    c384:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    c386:	231f      	movs	r3, #31
    c388:	18fb      	adds	r3, r7, r3
    c38a:	2200      	movs	r2, #0
    c38c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    c38e:	2310      	movs	r3, #16
    c390:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    c392:	2317      	movs	r3, #23
    c394:	18fb      	adds	r3, r7, r3
    c396:	2200      	movs	r2, #0
    c398:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    c39a:	687b      	ldr	r3, [r7, #4]
    c39c:	681b      	ldr	r3, [r3, #0]
    c39e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    c3a0:	230c      	movs	r3, #12
    c3a2:	18fb      	adds	r3, r7, r3
    c3a4:	0018      	movs	r0, r3
    c3a6:	4bce      	ldr	r3, [pc, #824]	; (c6e0 <_adc_set_config+0x364>)
    c3a8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    c3aa:	683b      	ldr	r3, [r7, #0]
    c3ac:	781a      	ldrb	r2, [r3, #0]
    c3ae:	230c      	movs	r3, #12
    c3b0:	18fb      	adds	r3, r7, r3
    c3b2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    c3b4:	230c      	movs	r3, #12
    c3b6:	18fb      	adds	r3, r7, r3
    c3b8:	0019      	movs	r1, r3
    c3ba:	201e      	movs	r0, #30
    c3bc:	4bc9      	ldr	r3, [pc, #804]	; (c6e4 <_adc_set_config+0x368>)
    c3be:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    c3c0:	201e      	movs	r0, #30
    c3c2:	4bc9      	ldr	r3, [pc, #804]	; (c6e8 <_adc_set_config+0x36c>)
    c3c4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    c3c6:	683b      	ldr	r3, [r7, #0]
    c3c8:	222c      	movs	r2, #44	; 0x2c
    c3ca:	5c9b      	ldrb	r3, [r3, r2]
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d040      	beq.n	c452 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    c3d0:	2316      	movs	r3, #22
    c3d2:	18fb      	adds	r3, r7, r3
    c3d4:	683a      	ldr	r2, [r7, #0]
    c3d6:	212b      	movs	r1, #43	; 0x2b
    c3d8:	5c52      	ldrb	r2, [r2, r1]
    c3da:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    c3dc:	683b      	ldr	r3, [r7, #0]
    c3de:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    c3e0:	2315      	movs	r3, #21
    c3e2:	18fb      	adds	r3, r7, r3
    c3e4:	2216      	movs	r2, #22
    c3e6:	18ba      	adds	r2, r7, r2
    c3e8:	7812      	ldrb	r2, [r2, #0]
    c3ea:	188a      	adds	r2, r1, r2
    c3ec:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    c3ee:	683b      	ldr	r3, [r7, #0]
    c3f0:	222c      	movs	r2, #44	; 0x2c
    c3f2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    c3f4:	230f      	movs	r3, #15
    c3f6:	18fb      	adds	r3, r7, r3
    c3f8:	2215      	movs	r2, #21
    c3fa:	18ba      	adds	r2, r7, r2
    c3fc:	7812      	ldrb	r2, [r2, #0]
    c3fe:	188a      	adds	r2, r1, r2
    c400:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    c402:	e018      	b.n	c436 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    c404:	2316      	movs	r3, #22
    c406:	18fb      	adds	r3, r7, r3
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	220f      	movs	r2, #15
    c40c:	4013      	ands	r3, r2
    c40e:	683a      	ldr	r2, [r7, #0]
    c410:	7b12      	ldrb	r2, [r2, #12]
    c412:	189b      	adds	r3, r3, r2
    c414:	0018      	movs	r0, r3
    c416:	4bb5      	ldr	r3, [pc, #724]	; (c6ec <_adc_set_config+0x370>)
    c418:	4798      	blx	r3
			start_pin++;
    c41a:	2315      	movs	r3, #21
    c41c:	18fb      	adds	r3, r7, r3
    c41e:	781a      	ldrb	r2, [r3, #0]
    c420:	2315      	movs	r3, #21
    c422:	18fb      	adds	r3, r7, r3
    c424:	3201      	adds	r2, #1
    c426:	701a      	strb	r2, [r3, #0]
			offset++;
    c428:	2316      	movs	r3, #22
    c42a:	18fb      	adds	r3, r7, r3
    c42c:	781a      	ldrb	r2, [r3, #0]
    c42e:	2316      	movs	r3, #22
    c430:	18fb      	adds	r3, r7, r3
    c432:	3201      	adds	r2, #1
    c434:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    c436:	2315      	movs	r3, #21
    c438:	18fa      	adds	r2, r7, r3
    c43a:	230f      	movs	r3, #15
    c43c:	18fb      	adds	r3, r7, r3
    c43e:	7812      	ldrb	r2, [r2, #0]
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	429a      	cmp	r2, r3
    c444:	d3de      	bcc.n	c404 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    c446:	683b      	ldr	r3, [r7, #0]
    c448:	89db      	ldrh	r3, [r3, #14]
    c44a:	0018      	movs	r0, r3
    c44c:	4ba7      	ldr	r3, [pc, #668]	; (c6ec <_adc_set_config+0x370>)
    c44e:	4798      	blx	r3
    c450:	e009      	b.n	c466 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    c452:	683b      	ldr	r3, [r7, #0]
    c454:	7b1b      	ldrb	r3, [r3, #12]
    c456:	0018      	movs	r0, r3
    c458:	4ba4      	ldr	r3, [pc, #656]	; (c6ec <_adc_set_config+0x370>)
    c45a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    c45c:	683b      	ldr	r3, [r7, #0]
    c45e:	89db      	ldrh	r3, [r3, #14]
    c460:	0018      	movs	r0, r3
    c462:	4ba2      	ldr	r3, [pc, #648]	; (c6ec <_adc_set_config+0x370>)
    c464:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    c466:	683b      	ldr	r3, [r7, #0]
    c468:	7d5b      	ldrb	r3, [r3, #21]
    c46a:	009b      	lsls	r3, r3, #2
    c46c:	b2da      	uxtb	r2, r3
    c46e:	693b      	ldr	r3, [r7, #16]
    c470:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    c472:	683b      	ldr	r3, [r7, #0]
    c474:	7d9b      	ldrb	r3, [r3, #22]
    c476:	01db      	lsls	r3, r3, #7
    c478:	b25a      	sxtb	r2, r3
			(config->reference);
    c47a:	683b      	ldr	r3, [r7, #0]
    c47c:	785b      	ldrb	r3, [r3, #1]
    c47e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    c480:	4313      	orrs	r3, r2
    c482:	b25b      	sxtb	r3, r3
    c484:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    c486:	693b      	ldr	r3, [r7, #16]
    c488:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    c48a:	683b      	ldr	r3, [r7, #0]
    c48c:	791b      	ldrb	r3, [r3, #4]
    c48e:	2b34      	cmp	r3, #52	; 0x34
    c490:	d846      	bhi.n	c520 <_adc_set_config+0x1a4>
    c492:	009a      	lsls	r2, r3, #2
    c494:	4b96      	ldr	r3, [pc, #600]	; (c6f0 <_adc_set_config+0x374>)
    c496:	18d3      	adds	r3, r2, r3
    c498:	681b      	ldr	r3, [r3, #0]
    c49a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    c49c:	231f      	movs	r3, #31
    c49e:	18fb      	adds	r3, r7, r3
    c4a0:	683a      	ldr	r2, [r7, #0]
    c4a2:	7c52      	ldrb	r2, [r2, #17]
    c4a4:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    c4a6:	2317      	movs	r3, #23
    c4a8:	18fb      	adds	r3, r7, r3
    c4aa:	683a      	ldr	r2, [r7, #0]
    c4ac:	7c12      	ldrb	r2, [r2, #16]
    c4ae:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c4b0:	2310      	movs	r3, #16
    c4b2:	61bb      	str	r3, [r7, #24]
		break;
    c4b4:	e036      	b.n	c524 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c4b6:	231f      	movs	r3, #31
    c4b8:	18fb      	adds	r3, r7, r3
    c4ba:	2201      	movs	r2, #1
    c4bc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    c4be:	2317      	movs	r3, #23
    c4c0:	18fb      	adds	r3, r7, r3
    c4c2:	2202      	movs	r2, #2
    c4c4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c4c6:	2310      	movs	r3, #16
    c4c8:	61bb      	str	r3, [r7, #24]
		break;
    c4ca:	e02b      	b.n	c524 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    c4cc:	231f      	movs	r3, #31
    c4ce:	18fb      	adds	r3, r7, r3
    c4d0:	2202      	movs	r2, #2
    c4d2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    c4d4:	2317      	movs	r3, #23
    c4d6:	18fb      	adds	r3, r7, r3
    c4d8:	2204      	movs	r2, #4
    c4da:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c4dc:	2310      	movs	r3, #16
    c4de:	61bb      	str	r3, [r7, #24]
		break;
    c4e0:	e020      	b.n	c524 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c4e2:	231f      	movs	r3, #31
    c4e4:	18fb      	adds	r3, r7, r3
    c4e6:	2201      	movs	r2, #1
    c4e8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    c4ea:	2317      	movs	r3, #23
    c4ec:	18fb      	adds	r3, r7, r3
    c4ee:	2206      	movs	r2, #6
    c4f0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c4f2:	2310      	movs	r3, #16
    c4f4:	61bb      	str	r3, [r7, #24]
		break;
    c4f6:	e015      	b.n	c524 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    c4f8:	231f      	movs	r3, #31
    c4fa:	18fb      	adds	r3, r7, r3
    c4fc:	2200      	movs	r2, #0
    c4fe:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    c500:	2317      	movs	r3, #23
    c502:	18fb      	adds	r3, r7, r3
    c504:	2208      	movs	r2, #8
    c506:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c508:	2310      	movs	r3, #16
    c50a:	61bb      	str	r3, [r7, #24]
		break;
    c50c:	e00a      	b.n	c524 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    c50e:	2330      	movs	r3, #48	; 0x30
    c510:	61bb      	str	r3, [r7, #24]
		break;
    c512:	e007      	b.n	c524 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    c514:	2320      	movs	r3, #32
    c516:	61bb      	str	r3, [r7, #24]
		break;
    c518:	e004      	b.n	c524 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    c51a:	2300      	movs	r3, #0
    c51c:	61bb      	str	r3, [r7, #24]
		break;
    c51e:	e001      	b.n	c524 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    c520:	2317      	movs	r3, #23
    c522:	e1ae      	b.n	c882 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    c524:	231f      	movs	r3, #31
    c526:	18fb      	adds	r3, r7, r3
    c528:	781b      	ldrb	r3, [r3, #0]
    c52a:	011b      	lsls	r3, r3, #4
    c52c:	b2db      	uxtb	r3, r3
    c52e:	2270      	movs	r2, #112	; 0x70
    c530:	4013      	ands	r3, r2
    c532:	b2da      	uxtb	r2, r3
    c534:	2317      	movs	r3, #23
    c536:	18fb      	adds	r3, r7, r3
    c538:	781b      	ldrb	r3, [r3, #0]
    c53a:	4313      	orrs	r3, r2
    c53c:	b2da      	uxtb	r2, r3
    c53e:	693b      	ldr	r3, [r7, #16]
    c540:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    c542:	683b      	ldr	r3, [r7, #0]
    c544:	7ddb      	ldrb	r3, [r3, #23]
    c546:	2b3f      	cmp	r3, #63	; 0x3f
    c548:	d901      	bls.n	c54e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    c54a:	2317      	movs	r3, #23
    c54c:	e199      	b.n	c882 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    c54e:	683b      	ldr	r3, [r7, #0]
    c550:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    c552:	693b      	ldr	r3, [r7, #16]
    c554:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    c556:	46c0      	nop			; (mov r8, r8)
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	0018      	movs	r0, r3
    c55c:	4b65      	ldr	r3, [pc, #404]	; (c6f4 <_adc_set_config+0x378>)
    c55e:	4798      	blx	r3
    c560:	1e03      	subs	r3, r0, #0
    c562:	d1f9      	bne.n	c558 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    c564:	683b      	ldr	r3, [r7, #0]
    c566:	885a      	ldrh	r2, [r3, #2]
    c568:	69bb      	ldr	r3, [r7, #24]
    c56a:	b29b      	uxth	r3, r3
    c56c:	4313      	orrs	r3, r2
    c56e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c570:	683b      	ldr	r3, [r7, #0]
    c572:	2124      	movs	r1, #36	; 0x24
    c574:	5c5b      	ldrb	r3, [r3, r1]
    c576:	b29b      	uxth	r3, r3
    c578:	00db      	lsls	r3, r3, #3
    c57a:	b29b      	uxth	r3, r3
			resolution |
    c57c:	4313      	orrs	r3, r2
    c57e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c580:	683b      	ldr	r3, [r7, #0]
    c582:	7d1b      	ldrb	r3, [r3, #20]
    c584:	b29b      	uxth	r3, r3
    c586:	009b      	lsls	r3, r3, #2
    c588:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c58a:	4313      	orrs	r3, r2
    c58c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c58e:	683b      	ldr	r3, [r7, #0]
    c590:	7c9b      	ldrb	r3, [r3, #18]
    c592:	b29b      	uxth	r3, r3
    c594:	18db      	adds	r3, r3, r3
    c596:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c598:	4313      	orrs	r3, r2
    c59a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    c59c:	683b      	ldr	r3, [r7, #0]
    c59e:	7cdb      	ldrb	r3, [r3, #19]
    c5a0:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c5a2:	4313      	orrs	r3, r2
    c5a4:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    c5a6:	693b      	ldr	r3, [r7, #16]
    c5a8:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    c5aa:	683b      	ldr	r3, [r7, #0]
    c5ac:	7e1b      	ldrb	r3, [r3, #24]
    c5ae:	2b00      	cmp	r3, #0
    c5b0:	d100      	bne.n	c5b4 <_adc_set_config+0x238>
    c5b2:	e0c4      	b.n	c73e <_adc_set_config+0x3c2>
		switch (resolution) {
    c5b4:	69bb      	ldr	r3, [r7, #24]
    c5b6:	2b10      	cmp	r3, #16
    c5b8:	d100      	bne.n	c5bc <_adc_set_config+0x240>
    c5ba:	e076      	b.n	c6aa <_adc_set_config+0x32e>
    c5bc:	d802      	bhi.n	c5c4 <_adc_set_config+0x248>
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d04d      	beq.n	c65e <_adc_set_config+0x2e2>
    c5c2:	e0bc      	b.n	c73e <_adc_set_config+0x3c2>
    c5c4:	2b20      	cmp	r3, #32
    c5c6:	d023      	beq.n	c610 <_adc_set_config+0x294>
    c5c8:	2b30      	cmp	r3, #48	; 0x30
    c5ca:	d000      	beq.n	c5ce <_adc_set_config+0x252>
    c5cc:	e0b7      	b.n	c73e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    c5ce:	683b      	ldr	r3, [r7, #0]
    c5d0:	7cdb      	ldrb	r3, [r3, #19]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d011      	beq.n	c5fa <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    c5d6:	683b      	ldr	r3, [r7, #0]
    c5d8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c5da:	2b7f      	cmp	r3, #127	; 0x7f
    c5dc:	dc0b      	bgt.n	c5f6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    c5de:	683b      	ldr	r3, [r7, #0]
    c5e0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    c5e2:	3380      	adds	r3, #128	; 0x80
    c5e4:	db07      	blt.n	c5f6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    c5e6:	683b      	ldr	r3, [r7, #0]
    c5e8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    c5ea:	2b7f      	cmp	r3, #127	; 0x7f
    c5ec:	dc03      	bgt.n	c5f6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    c5ee:	683b      	ldr	r3, [r7, #0]
    c5f0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    c5f2:	3380      	adds	r3, #128	; 0x80
    c5f4:	da01      	bge.n	c5fa <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c5f6:	2317      	movs	r3, #23
    c5f8:	e143      	b.n	c882 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    c5fa:	683b      	ldr	r3, [r7, #0]
    c5fc:	69db      	ldr	r3, [r3, #28]
    c5fe:	2bff      	cmp	r3, #255	; 0xff
    c600:	dc04      	bgt.n	c60c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    c602:	683b      	ldr	r3, [r7, #0]
    c604:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    c606:	2bff      	cmp	r3, #255	; 0xff
    c608:	dc00      	bgt.n	c60c <_adc_set_config+0x290>
    c60a:	e091      	b.n	c730 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c60c:	2317      	movs	r3, #23
    c60e:	e138      	b.n	c882 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    c610:	683b      	ldr	r3, [r7, #0]
    c612:	7cdb      	ldrb	r3, [r3, #19]
    c614:	2b00      	cmp	r3, #0
    c616:	d015      	beq.n	c644 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    c618:	683b      	ldr	r3, [r7, #0]
    c61a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c61c:	4a36      	ldr	r2, [pc, #216]	; (c6f8 <_adc_set_config+0x37c>)
    c61e:	4293      	cmp	r3, r2
    c620:	dc0e      	bgt.n	c640 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    c622:	683b      	ldr	r3, [r7, #0]
    c624:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    c626:	4a35      	ldr	r2, [pc, #212]	; (c6fc <_adc_set_config+0x380>)
    c628:	4293      	cmp	r3, r2
    c62a:	db09      	blt.n	c640 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    c62c:	683b      	ldr	r3, [r7, #0]
    c62e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    c630:	4a31      	ldr	r2, [pc, #196]	; (c6f8 <_adc_set_config+0x37c>)
    c632:	4293      	cmp	r3, r2
    c634:	dc04      	bgt.n	c640 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    c636:	683b      	ldr	r3, [r7, #0]
    c638:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    c63a:	4a30      	ldr	r2, [pc, #192]	; (c6fc <_adc_set_config+0x380>)
    c63c:	4293      	cmp	r3, r2
    c63e:	da01      	bge.n	c644 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c640:	2317      	movs	r3, #23
    c642:	e11e      	b.n	c882 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    c644:	683b      	ldr	r3, [r7, #0]
    c646:	69db      	ldr	r3, [r3, #28]
    c648:	4a2d      	ldr	r2, [pc, #180]	; (c700 <_adc_set_config+0x384>)
    c64a:	4293      	cmp	r3, r2
    c64c:	dc05      	bgt.n	c65a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    c64e:	683b      	ldr	r3, [r7, #0]
    c650:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    c652:	4a2b      	ldr	r2, [pc, #172]	; (c700 <_adc_set_config+0x384>)
    c654:	4293      	cmp	r3, r2
    c656:	dc00      	bgt.n	c65a <_adc_set_config+0x2de>
    c658:	e06c      	b.n	c734 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c65a:	2317      	movs	r3, #23
    c65c:	e111      	b.n	c882 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    c65e:	683b      	ldr	r3, [r7, #0]
    c660:	7cdb      	ldrb	r3, [r3, #19]
    c662:	2b00      	cmp	r3, #0
    c664:	d015      	beq.n	c692 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    c666:	683b      	ldr	r3, [r7, #0]
    c668:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c66a:	4a26      	ldr	r2, [pc, #152]	; (c704 <_adc_set_config+0x388>)
    c66c:	4293      	cmp	r3, r2
    c66e:	dc0e      	bgt.n	c68e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    c670:	683b      	ldr	r3, [r7, #0]
    c672:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    c674:	4a24      	ldr	r2, [pc, #144]	; (c708 <_adc_set_config+0x38c>)
    c676:	4293      	cmp	r3, r2
    c678:	db09      	blt.n	c68e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    c67a:	683b      	ldr	r3, [r7, #0]
    c67c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    c67e:	4a21      	ldr	r2, [pc, #132]	; (c704 <_adc_set_config+0x388>)
    c680:	4293      	cmp	r3, r2
    c682:	dc04      	bgt.n	c68e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    c684:	683b      	ldr	r3, [r7, #0]
    c686:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    c688:	4a1f      	ldr	r2, [pc, #124]	; (c708 <_adc_set_config+0x38c>)
    c68a:	4293      	cmp	r3, r2
    c68c:	da01      	bge.n	c692 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c68e:	2317      	movs	r3, #23
    c690:	e0f7      	b.n	c882 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    c692:	683b      	ldr	r3, [r7, #0]
    c694:	69db      	ldr	r3, [r3, #28]
    c696:	4a1d      	ldr	r2, [pc, #116]	; (c70c <_adc_set_config+0x390>)
    c698:	4293      	cmp	r3, r2
    c69a:	dc04      	bgt.n	c6a6 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    c69c:	683b      	ldr	r3, [r7, #0]
    c69e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    c6a0:	4a1a      	ldr	r2, [pc, #104]	; (c70c <_adc_set_config+0x390>)
    c6a2:	4293      	cmp	r3, r2
    c6a4:	dd48      	ble.n	c738 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c6a6:	2317      	movs	r3, #23
    c6a8:	e0eb      	b.n	c882 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    c6aa:	683b      	ldr	r3, [r7, #0]
    c6ac:	7cdb      	ldrb	r3, [r3, #19]
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d032      	beq.n	c718 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    c6b2:	683b      	ldr	r3, [r7, #0]
    c6b4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c6b6:	4a16      	ldr	r2, [pc, #88]	; (c710 <_adc_set_config+0x394>)
    c6b8:	4293      	cmp	r3, r2
    c6ba:	dc0e      	bgt.n	c6da <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    c6bc:	683b      	ldr	r3, [r7, #0]
    c6be:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    c6c0:	4a14      	ldr	r2, [pc, #80]	; (c714 <_adc_set_config+0x398>)
    c6c2:	4293      	cmp	r3, r2
    c6c4:	db09      	blt.n	c6da <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    c6c6:	683b      	ldr	r3, [r7, #0]
    c6c8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    c6ca:	4a11      	ldr	r2, [pc, #68]	; (c710 <_adc_set_config+0x394>)
    c6cc:	4293      	cmp	r3, r2
    c6ce:	dc04      	bgt.n	c6da <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    c6d0:	683b      	ldr	r3, [r7, #0]
    c6d2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    c6d4:	4a0f      	ldr	r2, [pc, #60]	; (c714 <_adc_set_config+0x398>)
    c6d6:	4293      	cmp	r3, r2
    c6d8:	da1e      	bge.n	c718 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c6da:	2317      	movs	r3, #23
    c6dc:	e0d1      	b.n	c882 <_adc_set_config+0x506>
    c6de:	46c0      	nop			; (mov r8, r8)
    c6e0:	0000c155 	.word	0x0000c155
    c6e4:	000139bd 	.word	0x000139bd
    c6e8:	00013a01 	.word	0x00013a01
    c6ec:	0000c305 	.word	0x0000c305
    c6f0:	00019804 	.word	0x00019804
    c6f4:	0000c231 	.word	0x0000c231
    c6f8:	000001ff 	.word	0x000001ff
    c6fc:	fffffe00 	.word	0xfffffe00
    c700:	000003ff 	.word	0x000003ff
    c704:	000007ff 	.word	0x000007ff
    c708:	fffff800 	.word	0xfffff800
    c70c:	00000fff 	.word	0x00000fff
    c710:	00007fff 	.word	0x00007fff
    c714:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    c718:	683b      	ldr	r3, [r7, #0]
    c71a:	69db      	ldr	r3, [r3, #28]
    c71c:	4a5b      	ldr	r2, [pc, #364]	; (c88c <_adc_set_config+0x510>)
    c71e:	4293      	cmp	r3, r2
    c720:	dc04      	bgt.n	c72c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    c722:	683b      	ldr	r3, [r7, #0]
    c724:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    c726:	4a59      	ldr	r2, [pc, #356]	; (c88c <_adc_set_config+0x510>)
    c728:	4293      	cmp	r3, r2
    c72a:	dd07      	ble.n	c73c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c72c:	2317      	movs	r3, #23
    c72e:	e0a8      	b.n	c882 <_adc_set_config+0x506>
			break;
    c730:	46c0      	nop			; (mov r8, r8)
    c732:	e004      	b.n	c73e <_adc_set_config+0x3c2>
			break;
    c734:	46c0      	nop			; (mov r8, r8)
    c736:	e002      	b.n	c73e <_adc_set_config+0x3c2>
			break;
    c738:	46c0      	nop			; (mov r8, r8)
    c73a:	e000      	b.n	c73e <_adc_set_config+0x3c2>
			}
			break;
    c73c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    c73e:	46c0      	nop			; (mov r8, r8)
    c740:	687b      	ldr	r3, [r7, #4]
    c742:	0018      	movs	r0, r3
    c744:	4b52      	ldr	r3, [pc, #328]	; (c890 <_adc_set_config+0x514>)
    c746:	4798      	blx	r3
    c748:	1e03      	subs	r3, r0, #0
    c74a:	d1f9      	bne.n	c740 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    c74c:	683b      	ldr	r3, [r7, #0]
    c74e:	7e1a      	ldrb	r2, [r3, #24]
    c750:	693b      	ldr	r3, [r7, #16]
    c752:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    c754:	46c0      	nop			; (mov r8, r8)
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	0018      	movs	r0, r3
    c75a:	4b4d      	ldr	r3, [pc, #308]	; (c890 <_adc_set_config+0x514>)
    c75c:	4798      	blx	r3
    c75e:	1e03      	subs	r3, r0, #0
    c760:	d1f9      	bne.n	c756 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    c762:	683b      	ldr	r3, [r7, #0]
    c764:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    c766:	b29a      	uxth	r2, r3
    c768:	693b      	ldr	r3, [r7, #16]
    c76a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    c76c:	46c0      	nop			; (mov r8, r8)
    c76e:	687b      	ldr	r3, [r7, #4]
    c770:	0018      	movs	r0, r3
    c772:	4b47      	ldr	r3, [pc, #284]	; (c890 <_adc_set_config+0x514>)
    c774:	4798      	blx	r3
    c776:	1e03      	subs	r3, r0, #0
    c778:	d1f9      	bne.n	c76e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    c77a:	683b      	ldr	r3, [r7, #0]
    c77c:	6a1b      	ldr	r3, [r3, #32]
    c77e:	b29a      	uxth	r2, r3
    c780:	693b      	ldr	r3, [r7, #16]
    c782:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    c784:	2314      	movs	r3, #20
    c786:	18fb      	adds	r3, r7, r3
    c788:	683a      	ldr	r2, [r7, #0]
    c78a:	212c      	movs	r1, #44	; 0x2c
    c78c:	5c52      	ldrb	r2, [r2, r1]
    c78e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    c790:	2314      	movs	r3, #20
    c792:	18fb      	adds	r3, r7, r3
    c794:	781b      	ldrb	r3, [r3, #0]
    c796:	2b00      	cmp	r3, #0
    c798:	d006      	beq.n	c7a8 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    c79a:	2314      	movs	r3, #20
    c79c:	18fb      	adds	r3, r7, r3
    c79e:	781a      	ldrb	r2, [r3, #0]
    c7a0:	2314      	movs	r3, #20
    c7a2:	18fb      	adds	r3, r7, r3
    c7a4:	3a01      	subs	r2, #1
    c7a6:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c7a8:	2314      	movs	r3, #20
    c7aa:	18fb      	adds	r3, r7, r3
    c7ac:	781b      	ldrb	r3, [r3, #0]
    c7ae:	2b0f      	cmp	r3, #15
    c7b0:	d804      	bhi.n	c7bc <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    c7b2:	683b      	ldr	r3, [r7, #0]
    c7b4:	222b      	movs	r2, #43	; 0x2b
    c7b6:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c7b8:	2b0f      	cmp	r3, #15
    c7ba:	d901      	bls.n	c7c0 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    c7bc:	2317      	movs	r3, #23
    c7be:	e060      	b.n	c882 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    c7c0:	46c0      	nop			; (mov r8, r8)
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	0018      	movs	r0, r3
    c7c6:	4b32      	ldr	r3, [pc, #200]	; (c890 <_adc_set_config+0x514>)
    c7c8:	4798      	blx	r3
    c7ca:	1e03      	subs	r3, r0, #0
    c7cc:	d1f9      	bne.n	c7c2 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    c7ce:	683b      	ldr	r3, [r7, #0]
    c7d0:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    c7d2:	683a      	ldr	r2, [r7, #0]
    c7d4:	212b      	movs	r1, #43	; 0x2b
    c7d6:	5c52      	ldrb	r2, [r2, r1]
    c7d8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    c7da:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c7dc:	2214      	movs	r2, #20
    c7de:	18ba      	adds	r2, r7, r2
    c7e0:	7812      	ldrb	r2, [r2, #0]
    c7e2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    c7e4:	4313      	orrs	r3, r2
			config->negative_input |
    c7e6:	683a      	ldr	r2, [r7, #0]
    c7e8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c7ea:	4313      	orrs	r3, r2
			config->positive_input;
    c7ec:	683a      	ldr	r2, [r7, #0]
    c7ee:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    c7f0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    c7f2:	693b      	ldr	r3, [r7, #16]
    c7f4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    c7f6:	683b      	ldr	r3, [r7, #0]
    c7f8:	222a      	movs	r2, #42	; 0x2a
    c7fa:	5c9a      	ldrb	r2, [r3, r2]
    c7fc:	693b      	ldr	r3, [r7, #16]
    c7fe:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    c800:	693b      	ldr	r3, [r7, #16]
    c802:	220f      	movs	r2, #15
    c804:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    c806:	683b      	ldr	r3, [r7, #0]
    c808:	2224      	movs	r2, #36	; 0x24
    c80a:	5c9b      	ldrb	r3, [r3, r2]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d01e      	beq.n	c84e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    c810:	683b      	ldr	r3, [r7, #0]
    c812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    c814:	4a1f      	ldr	r2, [pc, #124]	; (c894 <_adc_set_config+0x518>)
    c816:	4293      	cmp	r3, r2
    c818:	d901      	bls.n	c81e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    c81a:	2317      	movs	r3, #23
    c81c:	e031      	b.n	c882 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    c81e:	683b      	ldr	r3, [r7, #0]
    c820:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    c822:	693b      	ldr	r3, [r7, #16]
    c824:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    c826:	683b      	ldr	r3, [r7, #0]
    c828:	2228      	movs	r2, #40	; 0x28
    c82a:	5e9b      	ldrsh	r3, [r3, r2]
    c82c:	4a1a      	ldr	r2, [pc, #104]	; (c898 <_adc_set_config+0x51c>)
    c82e:	4293      	cmp	r3, r2
    c830:	dc05      	bgt.n	c83e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    c832:	683b      	ldr	r3, [r7, #0]
    c834:	2228      	movs	r2, #40	; 0x28
    c836:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    c838:	4a18      	ldr	r2, [pc, #96]	; (c89c <_adc_set_config+0x520>)
    c83a:	4293      	cmp	r3, r2
    c83c:	da01      	bge.n	c842 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    c83e:	2317      	movs	r3, #23
    c840:	e01f      	b.n	c882 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    c842:	683b      	ldr	r3, [r7, #0]
    c844:	2228      	movs	r2, #40	; 0x28
    c846:	5e9b      	ldrsh	r3, [r3, r2]
    c848:	b29a      	uxth	r2, r3
    c84a:	693b      	ldr	r3, [r7, #16]
    c84c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    c84e:	4b14      	ldr	r3, [pc, #80]	; (c8a0 <_adc_set_config+0x524>)
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	08db      	lsrs	r3, r3, #3
    c854:	b29b      	uxth	r3, r3
    c856:	021b      	lsls	r3, r3, #8
    c858:	b29a      	uxth	r2, r3
    c85a:	23e0      	movs	r3, #224	; 0xe0
    c85c:	00db      	lsls	r3, r3, #3
    c85e:	4013      	ands	r3, r2
    c860:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    c862:	4b10      	ldr	r3, [pc, #64]	; (c8a4 <_adc_set_config+0x528>)
    c864:	685c      	ldr	r4, [r3, #4]
    c866:	681b      	ldr	r3, [r3, #0]
    c868:	0161      	lsls	r1, r4, #5
    c86a:	0edd      	lsrs	r5, r3, #27
    c86c:	430d      	orrs	r5, r1
    c86e:	0ee6      	lsrs	r6, r4, #27
    c870:	b2ab      	uxth	r3, r5
    c872:	21ff      	movs	r1, #255	; 0xff
    c874:	400b      	ands	r3, r1
    c876:	b29b      	uxth	r3, r3
			) |
    c878:	4313      	orrs	r3, r2
    c87a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    c87c:	693b      	ldr	r3, [r7, #16]
    c87e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    c880:	2300      	movs	r3, #0
}
    c882:	0018      	movs	r0, r3
    c884:	46bd      	mov	sp, r7
    c886:	b009      	add	sp, #36	; 0x24
    c888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c88a:	46c0      	nop			; (mov r8, r8)
    c88c:	0000ffff 	.word	0x0000ffff
    c890:	0000c231 	.word	0x0000c231
    c894:	00000fff 	.word	0x00000fff
    c898:	000007ff 	.word	0x000007ff
    c89c:	fffff800 	.word	0xfffff800
    c8a0:	00806024 	.word	0x00806024
    c8a4:	00806020 	.word	0x00806020

0000c8a8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    c8a8:	b580      	push	{r7, lr}
    c8aa:	b086      	sub	sp, #24
    c8ac:	af00      	add	r7, sp, #0
    c8ae:	60f8      	str	r0, [r7, #12]
    c8b0:	60b9      	str	r1, [r7, #8]
    c8b2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    c8b4:	68fb      	ldr	r3, [r7, #12]
    c8b6:	68ba      	ldr	r2, [r7, #8]
    c8b8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    c8ba:	2380      	movs	r3, #128	; 0x80
    c8bc:	025b      	lsls	r3, r3, #9
    c8be:	0019      	movs	r1, r3
    c8c0:	2002      	movs	r0, #2
    c8c2:	4b32      	ldr	r3, [pc, #200]	; (c98c <adc_init+0xe4>)
    c8c4:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    c8c6:	68bb      	ldr	r3, [r7, #8]
    c8c8:	781b      	ldrb	r3, [r3, #0]
    c8ca:	b2db      	uxtb	r3, r3
    c8cc:	001a      	movs	r2, r3
    c8ce:	2301      	movs	r3, #1
    c8d0:	4013      	ands	r3, r2
    c8d2:	d001      	beq.n	c8d8 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    c8d4:	2305      	movs	r3, #5
    c8d6:	e055      	b.n	c984 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    c8d8:	68bb      	ldr	r3, [r7, #8]
    c8da:	781b      	ldrb	r3, [r3, #0]
    c8dc:	b2db      	uxtb	r3, r3
    c8de:	001a      	movs	r2, r3
    c8e0:	2302      	movs	r3, #2
    c8e2:	4013      	ands	r3, r2
    c8e4:	d001      	beq.n	c8ea <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    c8e6:	231c      	movs	r3, #28
    c8e8:	e04c      	b.n	c984 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    c8ea:	687b      	ldr	r3, [r7, #4]
    c8ec:	785a      	ldrb	r2, [r3, #1]
    c8ee:	68fb      	ldr	r3, [r7, #12]
    c8f0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    c8f2:	68fb      	ldr	r3, [r7, #12]
    c8f4:	791b      	ldrb	r3, [r3, #4]
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d102      	bne.n	c900 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    c8fa:	2001      	movs	r0, #1
    c8fc:	4b24      	ldr	r3, [pc, #144]	; (c990 <adc_init+0xe8>)
    c8fe:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c900:	2317      	movs	r3, #23
    c902:	18fb      	adds	r3, r7, r3
    c904:	2200      	movs	r2, #0
    c906:	701a      	strb	r2, [r3, #0]
    c908:	e00e      	b.n	c928 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    c90a:	2317      	movs	r3, #23
    c90c:	18fb      	adds	r3, r7, r3
    c90e:	781a      	ldrb	r2, [r3, #0]
    c910:	68fb      	ldr	r3, [r7, #12]
    c912:	3202      	adds	r2, #2
    c914:	0092      	lsls	r2, r2, #2
    c916:	2100      	movs	r1, #0
    c918:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c91a:	2317      	movs	r3, #23
    c91c:	18fb      	adds	r3, r7, r3
    c91e:	781a      	ldrb	r2, [r3, #0]
    c920:	2317      	movs	r3, #23
    c922:	18fb      	adds	r3, r7, r3
    c924:	3201      	adds	r2, #1
    c926:	701a      	strb	r2, [r3, #0]
    c928:	2317      	movs	r3, #23
    c92a:	18fb      	adds	r3, r7, r3
    c92c:	781b      	ldrb	r3, [r3, #0]
    c92e:	2b02      	cmp	r3, #2
    c930:	d9eb      	bls.n	c90a <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    c932:	68fb      	ldr	r3, [r7, #12]
    c934:	2200      	movs	r2, #0
    c936:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    c938:	68fb      	ldr	r3, [r7, #12]
    c93a:	2200      	movs	r2, #0
    c93c:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    c93e:	68fb      	ldr	r3, [r7, #12]
    c940:	2200      	movs	r2, #0
    c942:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    c944:	68fb      	ldr	r3, [r7, #12]
    c946:	2200      	movs	r2, #0
    c948:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    c94a:	4b12      	ldr	r3, [pc, #72]	; (c994 <adc_init+0xec>)
    c94c:	68fa      	ldr	r2, [r7, #12]
    c94e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c950:	687b      	ldr	r3, [r7, #4]
    c952:	222a      	movs	r2, #42	; 0x2a
    c954:	5c9b      	ldrb	r3, [r3, r2]
    c956:	2b00      	cmp	r3, #0
    c958:	d10a      	bne.n	c970 <adc_init+0xc8>
			!config->freerunning) {
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	7d1b      	ldrb	r3, [r3, #20]
    c95e:	2201      	movs	r2, #1
    c960:	4053      	eors	r3, r2
    c962:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c964:	2b00      	cmp	r3, #0
    c966:	d003      	beq.n	c970 <adc_init+0xc8>
		module_inst->software_trigger = true;
    c968:	68fb      	ldr	r3, [r7, #12]
    c96a:	2201      	movs	r2, #1
    c96c:	775a      	strb	r2, [r3, #29]
    c96e:	e002      	b.n	c976 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    c970:	68fb      	ldr	r3, [r7, #12]
    c972:	2200      	movs	r2, #0
    c974:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    c976:	687a      	ldr	r2, [r7, #4]
    c978:	68fb      	ldr	r3, [r7, #12]
    c97a:	0011      	movs	r1, r2
    c97c:	0018      	movs	r0, r3
    c97e:	4b06      	ldr	r3, [pc, #24]	; (c998 <adc_init+0xf0>)
    c980:	4798      	blx	r3
    c982:	0003      	movs	r3, r0
}
    c984:	0018      	movs	r0, r3
    c986:	46bd      	mov	sp, r7
    c988:	b006      	add	sp, #24
    c98a:	bd80      	pop	{r7, pc}
    c98c:	0000c16d 	.word	0x0000c16d
    c990:	0000c1f1 	.word	0x0000c1f1
    c994:	20000858 	.word	0x20000858
    c998:	0000c37d 	.word	0x0000c37d

0000c99c <adc_is_syncing>:
{
    c99c:	b580      	push	{r7, lr}
    c99e:	b084      	sub	sp, #16
    c9a0:	af00      	add	r7, sp, #0
    c9a2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    c9a4:	687b      	ldr	r3, [r7, #4]
    c9a6:	681b      	ldr	r3, [r3, #0]
    c9a8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	7e5b      	ldrb	r3, [r3, #25]
    c9ae:	b2db      	uxtb	r3, r3
    c9b0:	b25b      	sxtb	r3, r3
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	da01      	bge.n	c9ba <adc_is_syncing+0x1e>
		return true;
    c9b6:	2301      	movs	r3, #1
    c9b8:	e000      	b.n	c9bc <adc_is_syncing+0x20>
	return false;
    c9ba:	2300      	movs	r3, #0
}
    c9bc:	0018      	movs	r0, r3
    c9be:	46bd      	mov	sp, r7
    c9c0:	b004      	add	sp, #16
    c9c2:	bd80      	pop	{r7, pc}

0000c9c4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    c9c4:	b580      	push	{r7, lr}
    c9c6:	b084      	sub	sp, #16
    c9c8:	af00      	add	r7, sp, #0
    c9ca:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    c9d2:	46c0      	nop			; (mov r8, r8)
    c9d4:	687b      	ldr	r3, [r7, #4]
    c9d6:	0018      	movs	r0, r3
    c9d8:	4b0b      	ldr	r3, [pc, #44]	; (ca08 <adc_start_conversion+0x44>)
    c9da:	4798      	blx	r3
    c9dc:	1e03      	subs	r3, r0, #0
    c9de:	d1f9      	bne.n	c9d4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    c9e0:	68fb      	ldr	r3, [r7, #12]
    c9e2:	7b1b      	ldrb	r3, [r3, #12]
    c9e4:	b2db      	uxtb	r3, r3
    c9e6:	2202      	movs	r2, #2
    c9e8:	4313      	orrs	r3, r2
    c9ea:	b2da      	uxtb	r2, r3
    c9ec:	68fb      	ldr	r3, [r7, #12]
    c9ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    c9f0:	46c0      	nop			; (mov r8, r8)
    c9f2:	687b      	ldr	r3, [r7, #4]
    c9f4:	0018      	movs	r0, r3
    c9f6:	4b04      	ldr	r3, [pc, #16]	; (ca08 <adc_start_conversion+0x44>)
    c9f8:	4798      	blx	r3
    c9fa:	1e03      	subs	r3, r0, #0
    c9fc:	d1f9      	bne.n	c9f2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    c9fe:	46c0      	nop			; (mov r8, r8)
    ca00:	46bd      	mov	sp, r7
    ca02:	b004      	add	sp, #16
    ca04:	bd80      	pop	{r7, pc}
    ca06:	46c0      	nop			; (mov r8, r8)
    ca08:	0000c99d 	.word	0x0000c99d

0000ca0c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    ca0c:	b580      	push	{r7, lr}
    ca0e:	b084      	sub	sp, #16
    ca10:	af00      	add	r7, sp, #0
    ca12:	6078      	str	r0, [r7, #4]
    ca14:	000a      	movs	r2, r1
    ca16:	1cfb      	adds	r3, r7, #3
    ca18:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ca1a:	687b      	ldr	r3, [r7, #4]
    ca1c:	681b      	ldr	r3, [r3, #0]
    ca1e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    ca20:	68fb      	ldr	r3, [r7, #12]
    ca22:	1cfa      	adds	r2, r7, #3
    ca24:	7812      	ldrb	r2, [r2, #0]
    ca26:	759a      	strb	r2, [r3, #22]
}
    ca28:	46c0      	nop			; (mov r8, r8)
    ca2a:	46bd      	mov	sp, r7
    ca2c:	b004      	add	sp, #16
    ca2e:	bd80      	pop	{r7, pc}

0000ca30 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    ca30:	b580      	push	{r7, lr}
    ca32:	b084      	sub	sp, #16
    ca34:	af00      	add	r7, sp, #0
    ca36:	0002      	movs	r2, r0
    ca38:	1dfb      	adds	r3, r7, #7
    ca3a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    ca3c:	1dfb      	adds	r3, r7, #7
    ca3e:	781a      	ldrb	r2, [r3, #0]
    ca40:	4b47      	ldr	r3, [pc, #284]	; (cb60 <_adc_interrupt_handler+0x130>)
    ca42:	0092      	lsls	r2, r2, #2
    ca44:	58d3      	ldr	r3, [r2, r3]
    ca46:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    ca48:	68fb      	ldr	r3, [r7, #12]
    ca4a:	681b      	ldr	r3, [r3, #0]
    ca4c:	7e1b      	ldrb	r3, [r3, #24]
    ca4e:	b2da      	uxtb	r2, r3
    ca50:	68fb      	ldr	r3, [r7, #12]
    ca52:	681b      	ldr	r3, [r3, #0]
    ca54:	7ddb      	ldrb	r3, [r3, #23]
    ca56:	b2db      	uxtb	r3, r3
    ca58:	4013      	ands	r3, r2
    ca5a:	b2db      	uxtb	r3, r3
    ca5c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    ca5e:	68bb      	ldr	r3, [r7, #8]
    ca60:	2201      	movs	r2, #1
    ca62:	4013      	ands	r3, r2
    ca64:	d045      	beq.n	caf2 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    ca66:	68fb      	ldr	r3, [r7, #12]
    ca68:	681b      	ldr	r3, [r3, #0]
    ca6a:	2201      	movs	r2, #1
    ca6c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    ca6e:	46c0      	nop			; (mov r8, r8)
    ca70:	68fb      	ldr	r3, [r7, #12]
    ca72:	0018      	movs	r0, r3
    ca74:	4b3b      	ldr	r3, [pc, #236]	; (cb64 <_adc_interrupt_handler+0x134>)
    ca76:	4798      	blx	r3
    ca78:	1e03      	subs	r3, r0, #0
    ca7a:	d1f9      	bne.n	ca70 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    ca7c:	68fb      	ldr	r3, [r7, #12]
    ca7e:	695b      	ldr	r3, [r3, #20]
    ca80:	1c99      	adds	r1, r3, #2
    ca82:	68fa      	ldr	r2, [r7, #12]
    ca84:	6151      	str	r1, [r2, #20]
    ca86:	68fa      	ldr	r2, [r7, #12]
    ca88:	6812      	ldr	r2, [r2, #0]
    ca8a:	8b52      	ldrh	r2, [r2, #26]
    ca8c:	b292      	uxth	r2, r2
    ca8e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    ca90:	68fb      	ldr	r3, [r7, #12]
    ca92:	8b1b      	ldrh	r3, [r3, #24]
    ca94:	b29b      	uxth	r3, r3
    ca96:	3b01      	subs	r3, #1
    ca98:	b29b      	uxth	r3, r3
    ca9a:	68fa      	ldr	r2, [r7, #12]
    ca9c:	1c19      	adds	r1, r3, #0
    ca9e:	8311      	strh	r1, [r2, #24]
    caa0:	2b00      	cmp	r3, #0
    caa2:	d008      	beq.n	cab6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    caa4:	68fb      	ldr	r3, [r7, #12]
    caa6:	7f5b      	ldrb	r3, [r3, #29]
    caa8:	2b00      	cmp	r3, #0
    caaa:	d022      	beq.n	caf2 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    caac:	68fb      	ldr	r3, [r7, #12]
    caae:	0018      	movs	r0, r3
    cab0:	4b2d      	ldr	r3, [pc, #180]	; (cb68 <_adc_interrupt_handler+0x138>)
    cab2:	4798      	blx	r3
    cab4:	e01d      	b.n	caf2 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    cab6:	68fb      	ldr	r3, [r7, #12]
    cab8:	2101      	movs	r1, #1
    caba:	0018      	movs	r0, r3
    cabc:	4b2b      	ldr	r3, [pc, #172]	; (cb6c <_adc_interrupt_handler+0x13c>)
    cabe:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    cac0:	68fb      	ldr	r3, [r7, #12]
    cac2:	7f1b      	ldrb	r3, [r3, #28]
    cac4:	b2db      	uxtb	r3, r3
    cac6:	2b05      	cmp	r3, #5
    cac8:	d113      	bne.n	caf2 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    caca:	68fb      	ldr	r3, [r7, #12]
    cacc:	2200      	movs	r2, #0
    cace:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    cad0:	68fb      	ldr	r3, [r7, #12]
    cad2:	7edb      	ldrb	r3, [r3, #27]
    cad4:	001a      	movs	r2, r3
    cad6:	2301      	movs	r3, #1
    cad8:	4013      	ands	r3, r2
    cada:	d00a      	beq.n	caf2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    cadc:	68fb      	ldr	r3, [r7, #12]
    cade:	7e9b      	ldrb	r3, [r3, #26]
    cae0:	001a      	movs	r2, r3
    cae2:	2301      	movs	r3, #1
    cae4:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    cae6:	d004      	beq.n	caf2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    cae8:	68fb      	ldr	r3, [r7, #12]
    caea:	689b      	ldr	r3, [r3, #8]
    caec:	68fa      	ldr	r2, [r7, #12]
    caee:	0010      	movs	r0, r2
    caf0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    caf2:	68bb      	ldr	r3, [r7, #8]
    caf4:	2204      	movs	r2, #4
    caf6:	4013      	ands	r3, r2
    caf8:	d014      	beq.n	cb24 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    cafa:	68fb      	ldr	r3, [r7, #12]
    cafc:	681b      	ldr	r3, [r3, #0]
    cafe:	2204      	movs	r2, #4
    cb00:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    cb02:	68fb      	ldr	r3, [r7, #12]
    cb04:	7edb      	ldrb	r3, [r3, #27]
    cb06:	001a      	movs	r2, r3
    cb08:	2302      	movs	r3, #2
    cb0a:	4013      	ands	r3, r2
    cb0c:	d00a      	beq.n	cb24 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    cb0e:	68fb      	ldr	r3, [r7, #12]
    cb10:	7e9b      	ldrb	r3, [r3, #26]
    cb12:	001a      	movs	r2, r3
    cb14:	2302      	movs	r3, #2
    cb16:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    cb18:	d004      	beq.n	cb24 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    cb1a:	68fb      	ldr	r3, [r7, #12]
    cb1c:	68db      	ldr	r3, [r3, #12]
    cb1e:	68fa      	ldr	r2, [r7, #12]
    cb20:	0010      	movs	r0, r2
    cb22:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    cb24:	68bb      	ldr	r3, [r7, #8]
    cb26:	2202      	movs	r2, #2
    cb28:	4013      	ands	r3, r2
    cb2a:	d014      	beq.n	cb56 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    cb2c:	68fb      	ldr	r3, [r7, #12]
    cb2e:	681b      	ldr	r3, [r3, #0]
    cb30:	2202      	movs	r2, #2
    cb32:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    cb34:	68fb      	ldr	r3, [r7, #12]
    cb36:	7edb      	ldrb	r3, [r3, #27]
    cb38:	001a      	movs	r2, r3
    cb3a:	2304      	movs	r3, #4
    cb3c:	4013      	ands	r3, r2
    cb3e:	d00a      	beq.n	cb56 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	7e9b      	ldrb	r3, [r3, #26]
    cb44:	001a      	movs	r2, r3
    cb46:	2304      	movs	r3, #4
    cb48:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    cb4a:	d004      	beq.n	cb56 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    cb4c:	68fb      	ldr	r3, [r7, #12]
    cb4e:	691b      	ldr	r3, [r3, #16]
    cb50:	68fa      	ldr	r2, [r7, #12]
    cb52:	0010      	movs	r0, r2
    cb54:	4798      	blx	r3
		}
	}
}
    cb56:	46c0      	nop			; (mov r8, r8)
    cb58:	46bd      	mov	sp, r7
    cb5a:	b004      	add	sp, #16
    cb5c:	bd80      	pop	{r7, pc}
    cb5e:	46c0      	nop			; (mov r8, r8)
    cb60:	20000858 	.word	0x20000858
    cb64:	0000c99d 	.word	0x0000c99d
    cb68:	0000c9c5 	.word	0x0000c9c5
    cb6c:	0000ca0d 	.word	0x0000ca0d

0000cb70 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    cb70:	b580      	push	{r7, lr}
    cb72:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    cb74:	2000      	movs	r0, #0
    cb76:	4b02      	ldr	r3, [pc, #8]	; (cb80 <ADC_Handler+0x10>)
    cb78:	4798      	blx	r3
}
    cb7a:	46c0      	nop			; (mov r8, r8)
    cb7c:	46bd      	mov	sp, r7
    cb7e:	bd80      	pop	{r7, pc}
    cb80:	0000ca31 	.word	0x0000ca31

0000cb84 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    cb84:	b580      	push	{r7, lr}
    cb86:	b082      	sub	sp, #8
    cb88:	af00      	add	r7, sp, #0
    cb8a:	0002      	movs	r2, r0
    cb8c:	1dfb      	adds	r3, r7, #7
    cb8e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cb90:	4a07      	ldr	r2, [pc, #28]	; (cbb0 <system_interrupt_disable+0x2c>)
    cb92:	1dfb      	adds	r3, r7, #7
    cb94:	781b      	ldrb	r3, [r3, #0]
    cb96:	0019      	movs	r1, r3
    cb98:	231f      	movs	r3, #31
    cb9a:	400b      	ands	r3, r1
    cb9c:	2101      	movs	r1, #1
    cb9e:	4099      	lsls	r1, r3
    cba0:	000b      	movs	r3, r1
    cba2:	0019      	movs	r1, r3
    cba4:	2380      	movs	r3, #128	; 0x80
    cba6:	50d1      	str	r1, [r2, r3]
}
    cba8:	46c0      	nop			; (mov r8, r8)
    cbaa:	46bd      	mov	sp, r7
    cbac:	b002      	add	sp, #8
    cbae:	bd80      	pop	{r7, pc}
    cbb0:	e000e100 	.word	0xe000e100

0000cbb4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b084      	sub	sp, #16
    cbb8:	af00      	add	r7, sp, #0
    cbba:	0002      	movs	r2, r0
    cbbc:	1dfb      	adds	r3, r7, #7
    cbbe:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    cbc0:	1dfb      	adds	r3, r7, #7
    cbc2:	781a      	ldrb	r2, [r3, #0]
    cbc4:	4b37      	ldr	r3, [pc, #220]	; (cca4 <_dac_interrupt_handler+0xf0>)
    cbc6:	0092      	lsls	r2, r2, #2
    cbc8:	58d3      	ldr	r3, [r2, r3]
    cbca:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    cbcc:	68fb      	ldr	r3, [r7, #12]
    cbce:	681b      	ldr	r3, [r3, #0]
    cbd0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    cbd2:	68bb      	ldr	r3, [r7, #8]
    cbd4:	799b      	ldrb	r3, [r3, #6]
    cbd6:	b2db      	uxtb	r3, r3
    cbd8:	001a      	movs	r2, r3
    cbda:	2301      	movs	r3, #1
    cbdc:	4013      	ands	r3, r2
    cbde:	d00e      	beq.n	cbfe <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    cbe0:	68bb      	ldr	r3, [r7, #8]
    cbe2:	2201      	movs	r2, #1
    cbe4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    cbe6:	68fb      	ldr	r3, [r7, #12]
    cbe8:	3314      	adds	r3, #20
    cbea:	2b00      	cmp	r3, #0
    cbec:	d007      	beq.n	cbfe <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    cbee:	68fb      	ldr	r3, [r7, #12]
    cbf0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d003      	beq.n	cbfe <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    cbf6:	68fb      	ldr	r3, [r7, #12]
    cbf8:	699b      	ldr	r3, [r3, #24]
    cbfa:	2000      	movs	r0, #0
    cbfc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    cbfe:	68bb      	ldr	r3, [r7, #8]
    cc00:	799b      	ldrb	r3, [r3, #6]
    cc02:	b2db      	uxtb	r3, r3
    cc04:	001a      	movs	r2, r3
    cc06:	2302      	movs	r3, #2
    cc08:	4013      	ands	r3, r2
    cc0a:	d047      	beq.n	cc9c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    cc0c:	68bb      	ldr	r3, [r7, #8]
    cc0e:	2202      	movs	r2, #2
    cc10:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    cc12:	68fb      	ldr	r3, [r7, #12]
    cc14:	899b      	ldrh	r3, [r3, #12]
    cc16:	b29b      	uxth	r3, r3
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d033      	beq.n	cc84 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    cc1c:	68fb      	ldr	r3, [r7, #12]
    cc1e:	689a      	ldr	r2, [r3, #8]
    cc20:	68fb      	ldr	r3, [r7, #12]
    cc22:	89db      	ldrh	r3, [r3, #14]
    cc24:	b29b      	uxth	r3, r3
    cc26:	1c59      	adds	r1, r3, #1
    cc28:	b288      	uxth	r0, r1
    cc2a:	68f9      	ldr	r1, [r7, #12]
    cc2c:	81c8      	strh	r0, [r1, #14]
    cc2e:	005b      	lsls	r3, r3, #1
    cc30:	18d3      	adds	r3, r2, r3
    cc32:	881b      	ldrh	r3, [r3, #0]
    cc34:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    cc36:	68bb      	ldr	r3, [r7, #8]
    cc38:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    cc3a:	68fb      	ldr	r3, [r7, #12]
    cc3c:	899b      	ldrh	r3, [r3, #12]
    cc3e:	b29b      	uxth	r3, r3
    cc40:	3b01      	subs	r3, #1
    cc42:	b29a      	uxth	r2, r3
    cc44:	68fb      	ldr	r3, [r7, #12]
    cc46:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    cc48:	68fb      	ldr	r3, [r7, #12]
    cc4a:	899b      	ldrh	r3, [r3, #12]
    cc4c:	b29b      	uxth	r3, r3
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d118      	bne.n	cc84 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    cc52:	68fb      	ldr	r3, [r7, #12]
    cc54:	2220      	movs	r2, #32
    cc56:	2100      	movs	r1, #0
    cc58:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    cc5a:	68bb      	ldr	r3, [r7, #8]
    cc5c:	2202      	movs	r2, #2
    cc5e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    cc60:	68bb      	ldr	r3, [r7, #8]
    cc62:	2202      	movs	r2, #2
    cc64:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    cc66:	2019      	movs	r0, #25
    cc68:	4b0f      	ldr	r3, [pc, #60]	; (cca8 <_dac_interrupt_handler+0xf4>)
    cc6a:	4798      	blx	r3

				if ((module->callback) &&
    cc6c:	68fb      	ldr	r3, [r7, #12]
    cc6e:	3314      	adds	r3, #20
    cc70:	2b00      	cmp	r3, #0
    cc72:	d007      	beq.n	cc84 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d003      	beq.n	cc84 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    cc7c:	68fb      	ldr	r3, [r7, #12]
    cc7e:	69db      	ldr	r3, [r3, #28]
    cc80:	2000      	movs	r0, #0
    cc82:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    cc84:	68fb      	ldr	r3, [r7, #12]
    cc86:	3314      	adds	r3, #20
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d007      	beq.n	cc9c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    cc8c:	68fb      	ldr	r3, [r7, #12]
    cc8e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    cc90:	2b00      	cmp	r3, #0
    cc92:	d003      	beq.n	cc9c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    cc94:	68fb      	ldr	r3, [r7, #12]
    cc96:	695b      	ldr	r3, [r3, #20]
    cc98:	2000      	movs	r0, #0
    cc9a:	4798      	blx	r3
		}
	}
}
    cc9c:	46c0      	nop			; (mov r8, r8)
    cc9e:	46bd      	mov	sp, r7
    cca0:	b004      	add	sp, #16
    cca2:	bd80      	pop	{r7, pc}
    cca4:	2000085c 	.word	0x2000085c
    cca8:	0000cb85 	.word	0x0000cb85

0000ccac <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    ccac:	b580      	push	{r7, lr}
    ccae:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    ccb0:	2000      	movs	r0, #0
    ccb2:	4b02      	ldr	r3, [pc, #8]	; (ccbc <DAC_Handler+0x10>)
    ccb4:	4798      	blx	r3
}
    ccb6:	46c0      	nop			; (mov r8, r8)
    ccb8:	46bd      	mov	sp, r7
    ccba:	bd80      	pop	{r7, pc}
    ccbc:	0000cbb5 	.word	0x0000cbb5

0000ccc0 <system_interrupt_enter_critical_section>:
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    ccc4:	4b02      	ldr	r3, [pc, #8]	; (ccd0 <system_interrupt_enter_critical_section+0x10>)
    ccc6:	4798      	blx	r3
}
    ccc8:	46c0      	nop			; (mov r8, r8)
    ccca:	46bd      	mov	sp, r7
    cccc:	bd80      	pop	{r7, pc}
    ccce:	46c0      	nop			; (mov r8, r8)
    ccd0:	00012c05 	.word	0x00012c05

0000ccd4 <system_interrupt_leave_critical_section>:
{
    ccd4:	b580      	push	{r7, lr}
    ccd6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    ccd8:	4b02      	ldr	r3, [pc, #8]	; (cce4 <system_interrupt_leave_critical_section+0x10>)
    ccda:	4798      	blx	r3
}
    ccdc:	46c0      	nop			; (mov r8, r8)
    ccde:	46bd      	mov	sp, r7
    cce0:	bd80      	pop	{r7, pc}
    cce2:	46c0      	nop			; (mov r8, r8)
    cce4:	00012c59 	.word	0x00012c59

0000cce8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    cce8:	b580      	push	{r7, lr}
    ccea:	b086      	sub	sp, #24
    ccec:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    ccee:	4b49      	ldr	r3, [pc, #292]	; (ce14 <DMAC_Handler+0x12c>)
    ccf0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    ccf2:	4b49      	ldr	r3, [pc, #292]	; (ce18 <DMAC_Handler+0x130>)
    ccf4:	8c1b      	ldrh	r3, [r3, #32]
    ccf6:	b29b      	uxth	r3, r3
    ccf8:	b2da      	uxtb	r2, r3
    ccfa:	2317      	movs	r3, #23
    ccfc:	18fb      	adds	r3, r7, r3
    ccfe:	210f      	movs	r1, #15
    cd00:	400a      	ands	r2, r1
    cd02:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    cd04:	2317      	movs	r3, #23
    cd06:	18fb      	adds	r3, r7, r3
    cd08:	781a      	ldrb	r2, [r3, #0]
    cd0a:	4b44      	ldr	r3, [pc, #272]	; (ce1c <DMAC_Handler+0x134>)
    cd0c:	0092      	lsls	r2, r2, #2
    cd0e:	58d3      	ldr	r3, [r2, r3]
    cd10:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    cd12:	4a41      	ldr	r2, [pc, #260]	; (ce18 <DMAC_Handler+0x130>)
    cd14:	693b      	ldr	r3, [r7, #16]
    cd16:	781b      	ldrb	r3, [r3, #0]
    cd18:	210f      	movs	r1, #15
    cd1a:	400b      	ands	r3, r1
    cd1c:	b2d9      	uxtb	r1, r3
    cd1e:	233f      	movs	r3, #63	; 0x3f
    cd20:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    cd22:	493d      	ldr	r1, [pc, #244]	; (ce18 <DMAC_Handler+0x130>)
    cd24:	230f      	movs	r3, #15
    cd26:	18fb      	adds	r3, r7, r3
    cd28:	224e      	movs	r2, #78	; 0x4e
    cd2a:	5c8a      	ldrb	r2, [r1, r2]
    cd2c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    cd2e:	693b      	ldr	r3, [r7, #16]
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	4a3b      	ldr	r2, [pc, #236]	; (ce20 <DMAC_Handler+0x138>)
    cd34:	011b      	lsls	r3, r3, #4
    cd36:	18d3      	adds	r3, r2, r3
    cd38:	3302      	adds	r3, #2
    cd3a:	881b      	ldrh	r3, [r3, #0]
    cd3c:	b29b      	uxth	r3, r3
    cd3e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    cd40:	693b      	ldr	r3, [r7, #16]
    cd42:	781b      	ldrb	r3, [r3, #0]
    cd44:	4a37      	ldr	r2, [pc, #220]	; (ce24 <DMAC_Handler+0x13c>)
    cd46:	011b      	lsls	r3, r3, #4
    cd48:	18d3      	adds	r3, r2, r3
    cd4a:	3302      	adds	r3, #2
    cd4c:	881b      	ldrh	r3, [r3, #0]
    cd4e:	b29b      	uxth	r3, r3
    cd50:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    cd52:	68ba      	ldr	r2, [r7, #8]
    cd54:	687b      	ldr	r3, [r7, #4]
    cd56:	1ad2      	subs	r2, r2, r3
    cd58:	693b      	ldr	r3, [r7, #16]
    cd5a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    cd5c:	230f      	movs	r3, #15
    cd5e:	18fb      	adds	r3, r7, r3
    cd60:	781b      	ldrb	r3, [r3, #0]
    cd62:	2201      	movs	r2, #1
    cd64:	4013      	ands	r3, r2
    cd66:	d016      	beq.n	cd96 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    cd68:	4a2b      	ldr	r2, [pc, #172]	; (ce18 <DMAC_Handler+0x130>)
    cd6a:	234e      	movs	r3, #78	; 0x4e
    cd6c:	2101      	movs	r1, #1
    cd6e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    cd70:	693b      	ldr	r3, [r7, #16]
    cd72:	2210      	movs	r2, #16
    cd74:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    cd76:	693b      	ldr	r3, [r7, #16]
    cd78:	7c1b      	ldrb	r3, [r3, #16]
    cd7a:	001a      	movs	r2, r3
    cd7c:	2301      	movs	r3, #1
    cd7e:	4013      	ands	r3, r2
    cd80:	d042      	beq.n	ce08 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    cd82:	693b      	ldr	r3, [r7, #16]
    cd84:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    cd86:	2b00      	cmp	r3, #0
    cd88:	d03e      	beq.n	ce08 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    cd8a:	693b      	ldr	r3, [r7, #16]
    cd8c:	685b      	ldr	r3, [r3, #4]
    cd8e:	693a      	ldr	r2, [r7, #16]
    cd90:	0010      	movs	r0, r2
    cd92:	4798      	blx	r3
    cd94:	e038      	b.n	ce08 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    cd96:	230f      	movs	r3, #15
    cd98:	18fb      	adds	r3, r7, r3
    cd9a:	781b      	ldrb	r3, [r3, #0]
    cd9c:	2202      	movs	r2, #2
    cd9e:	4013      	ands	r3, r2
    cda0:	d016      	beq.n	cdd0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    cda2:	4a1d      	ldr	r2, [pc, #116]	; (ce18 <DMAC_Handler+0x130>)
    cda4:	234e      	movs	r3, #78	; 0x4e
    cda6:	2102      	movs	r1, #2
    cda8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    cdaa:	693b      	ldr	r3, [r7, #16]
    cdac:	2200      	movs	r2, #0
    cdae:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    cdb0:	693b      	ldr	r3, [r7, #16]
    cdb2:	7c1b      	ldrb	r3, [r3, #16]
    cdb4:	001a      	movs	r2, r3
    cdb6:	2302      	movs	r3, #2
    cdb8:	4013      	ands	r3, r2
    cdba:	d025      	beq.n	ce08 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    cdbc:	693b      	ldr	r3, [r7, #16]
    cdbe:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d021      	beq.n	ce08 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    cdc4:	693b      	ldr	r3, [r7, #16]
    cdc6:	689b      	ldr	r3, [r3, #8]
    cdc8:	693a      	ldr	r2, [r7, #16]
    cdca:	0010      	movs	r0, r2
    cdcc:	4798      	blx	r3
    cdce:	e01b      	b.n	ce08 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    cdd0:	230f      	movs	r3, #15
    cdd2:	18fb      	adds	r3, r7, r3
    cdd4:	781b      	ldrb	r3, [r3, #0]
    cdd6:	2204      	movs	r2, #4
    cdd8:	4013      	ands	r3, r2
    cdda:	d015      	beq.n	ce08 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    cddc:	4a0e      	ldr	r2, [pc, #56]	; (ce18 <DMAC_Handler+0x130>)
    cdde:	234e      	movs	r3, #78	; 0x4e
    cde0:	2104      	movs	r1, #4
    cde2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    cde4:	693b      	ldr	r3, [r7, #16]
    cde6:	2206      	movs	r2, #6
    cde8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    cdea:	693b      	ldr	r3, [r7, #16]
    cdec:	7c1b      	ldrb	r3, [r3, #16]
    cdee:	001a      	movs	r2, r3
    cdf0:	2304      	movs	r3, #4
    cdf2:	4013      	ands	r3, r2
    cdf4:	d008      	beq.n	ce08 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    cdf6:	693b      	ldr	r3, [r7, #16]
    cdf8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	d004      	beq.n	ce08 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    cdfe:	693b      	ldr	r3, [r7, #16]
    ce00:	68db      	ldr	r3, [r3, #12]
    ce02:	693a      	ldr	r2, [r7, #16]
    ce04:	0010      	movs	r0, r2
    ce06:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    ce08:	4b07      	ldr	r3, [pc, #28]	; (ce28 <DMAC_Handler+0x140>)
    ce0a:	4798      	blx	r3
}
    ce0c:	46c0      	nop			; (mov r8, r8)
    ce0e:	46bd      	mov	sp, r7
    ce10:	b006      	add	sp, #24
    ce12:	bd80      	pop	{r7, pc}
    ce14:	0000ccc1 	.word	0x0000ccc1
    ce18:	41004800 	.word	0x41004800
    ce1c:	200002a0 	.word	0x200002a0
    ce20:	20000860 	.word	0x20000860
    ce24:	20000250 	.word	0x20000250
    ce28:	0000ccd5 	.word	0x0000ccd5

0000ce2c <system_gclk_chan_get_config_defaults>:
{
    ce2c:	b580      	push	{r7, lr}
    ce2e:	b082      	sub	sp, #8
    ce30:	af00      	add	r7, sp, #0
    ce32:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    ce34:	687b      	ldr	r3, [r7, #4]
    ce36:	2200      	movs	r2, #0
    ce38:	701a      	strb	r2, [r3, #0]
}
    ce3a:	46c0      	nop			; (mov r8, r8)
    ce3c:	46bd      	mov	sp, r7
    ce3e:	b002      	add	sp, #8
    ce40:	bd80      	pop	{r7, pc}
	...

0000ce44 <system_apb_clock_set_mask>:
{
    ce44:	b580      	push	{r7, lr}
    ce46:	b082      	sub	sp, #8
    ce48:	af00      	add	r7, sp, #0
    ce4a:	0002      	movs	r2, r0
    ce4c:	6039      	str	r1, [r7, #0]
    ce4e:	1dfb      	adds	r3, r7, #7
    ce50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ce52:	1dfb      	adds	r3, r7, #7
    ce54:	781b      	ldrb	r3, [r3, #0]
    ce56:	2b01      	cmp	r3, #1
    ce58:	d00a      	beq.n	ce70 <system_apb_clock_set_mask+0x2c>
    ce5a:	2b02      	cmp	r3, #2
    ce5c:	d00f      	beq.n	ce7e <system_apb_clock_set_mask+0x3a>
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d114      	bne.n	ce8c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ce62:	4b0e      	ldr	r3, [pc, #56]	; (ce9c <system_apb_clock_set_mask+0x58>)
    ce64:	4a0d      	ldr	r2, [pc, #52]	; (ce9c <system_apb_clock_set_mask+0x58>)
    ce66:	6991      	ldr	r1, [r2, #24]
    ce68:	683a      	ldr	r2, [r7, #0]
    ce6a:	430a      	orrs	r2, r1
    ce6c:	619a      	str	r2, [r3, #24]
			break;
    ce6e:	e00f      	b.n	ce90 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ce70:	4b0a      	ldr	r3, [pc, #40]	; (ce9c <system_apb_clock_set_mask+0x58>)
    ce72:	4a0a      	ldr	r2, [pc, #40]	; (ce9c <system_apb_clock_set_mask+0x58>)
    ce74:	69d1      	ldr	r1, [r2, #28]
    ce76:	683a      	ldr	r2, [r7, #0]
    ce78:	430a      	orrs	r2, r1
    ce7a:	61da      	str	r2, [r3, #28]
			break;
    ce7c:	e008      	b.n	ce90 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ce7e:	4b07      	ldr	r3, [pc, #28]	; (ce9c <system_apb_clock_set_mask+0x58>)
    ce80:	4a06      	ldr	r2, [pc, #24]	; (ce9c <system_apb_clock_set_mask+0x58>)
    ce82:	6a11      	ldr	r1, [r2, #32]
    ce84:	683a      	ldr	r2, [r7, #0]
    ce86:	430a      	orrs	r2, r1
    ce88:	621a      	str	r2, [r3, #32]
			break;
    ce8a:	e001      	b.n	ce90 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ce8c:	2317      	movs	r3, #23
    ce8e:	e000      	b.n	ce92 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ce90:	2300      	movs	r3, #0
}
    ce92:	0018      	movs	r0, r3
    ce94:	46bd      	mov	sp, r7
    ce96:	b002      	add	sp, #8
    ce98:	bd80      	pop	{r7, pc}
    ce9a:	46c0      	nop			; (mov r8, r8)
    ce9c:	40000400 	.word	0x40000400

0000cea0 <system_pinmux_get_config_defaults>:
{
    cea0:	b580      	push	{r7, lr}
    cea2:	b082      	sub	sp, #8
    cea4:	af00      	add	r7, sp, #0
    cea6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	2280      	movs	r2, #128	; 0x80
    ceac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	2200      	movs	r2, #0
    ceb2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	2201      	movs	r2, #1
    ceb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ceba:	687b      	ldr	r3, [r7, #4]
    cebc:	2200      	movs	r2, #0
    cebe:	70da      	strb	r2, [r3, #3]
}
    cec0:	46c0      	nop			; (mov r8, r8)
    cec2:	46bd      	mov	sp, r7
    cec4:	b002      	add	sp, #8
    cec6:	bd80      	pop	{r7, pc}

0000cec8 <system_interrupt_enable>:
{
    cec8:	b580      	push	{r7, lr}
    ceca:	b082      	sub	sp, #8
    cecc:	af00      	add	r7, sp, #0
    cece:	0002      	movs	r2, r0
    ced0:	1dfb      	adds	r3, r7, #7
    ced2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ced4:	4b06      	ldr	r3, [pc, #24]	; (cef0 <system_interrupt_enable+0x28>)
    ced6:	1dfa      	adds	r2, r7, #7
    ced8:	7812      	ldrb	r2, [r2, #0]
    ceda:	0011      	movs	r1, r2
    cedc:	221f      	movs	r2, #31
    cede:	400a      	ands	r2, r1
    cee0:	2101      	movs	r1, #1
    cee2:	4091      	lsls	r1, r2
    cee4:	000a      	movs	r2, r1
    cee6:	601a      	str	r2, [r3, #0]
}
    cee8:	46c0      	nop			; (mov r8, r8)
    ceea:	46bd      	mov	sp, r7
    ceec:	b002      	add	sp, #8
    ceee:	bd80      	pop	{r7, pc}
    cef0:	e000e100 	.word	0xe000e100

0000cef4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    cef4:	b580      	push	{r7, lr}
    cef6:	b084      	sub	sp, #16
    cef8:	af00      	add	r7, sp, #0
    cefa:	0002      	movs	r2, r0
    cefc:	1dfb      	adds	r3, r7, #7
    cefe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    cf00:	230f      	movs	r3, #15
    cf02:	18fb      	adds	r3, r7, r3
    cf04:	1dfa      	adds	r2, r7, #7
    cf06:	7812      	ldrb	r2, [r2, #0]
    cf08:	0952      	lsrs	r2, r2, #5
    cf0a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    cf0c:	230f      	movs	r3, #15
    cf0e:	18fb      	adds	r3, r7, r3
    cf10:	781b      	ldrb	r3, [r3, #0]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d10c      	bne.n	cf30 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cf16:	4b09      	ldr	r3, [pc, #36]	; (cf3c <_extint_get_eic_from_channel+0x48>)
    cf18:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    cf1a:	230f      	movs	r3, #15
    cf1c:	18fb      	adds	r3, r7, r3
    cf1e:	781b      	ldrb	r3, [r3, #0]
    cf20:	009b      	lsls	r3, r3, #2
    cf22:	2210      	movs	r2, #16
    cf24:	4694      	mov	ip, r2
    cf26:	44bc      	add	ip, r7
    cf28:	4463      	add	r3, ip
    cf2a:	3b08      	subs	r3, #8
    cf2c:	681b      	ldr	r3, [r3, #0]
    cf2e:	e000      	b.n	cf32 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    cf30:	2300      	movs	r3, #0
	}
}
    cf32:	0018      	movs	r0, r3
    cf34:	46bd      	mov	sp, r7
    cf36:	b004      	add	sp, #16
    cf38:	bd80      	pop	{r7, pc}
    cf3a:	46c0      	nop			; (mov r8, r8)
    cf3c:	40001800 	.word	0x40001800

0000cf40 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	b082      	sub	sp, #8
    cf44:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cf46:	4b0f      	ldr	r3, [pc, #60]	; (cf84 <extint_is_syncing+0x44>)
    cf48:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cf4a:	2300      	movs	r3, #0
    cf4c:	607b      	str	r3, [r7, #4]
    cf4e:	e011      	b.n	cf74 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    cf50:	687b      	ldr	r3, [r7, #4]
    cf52:	009b      	lsls	r3, r3, #2
    cf54:	2208      	movs	r2, #8
    cf56:	4694      	mov	ip, r2
    cf58:	44bc      	add	ip, r7
    cf5a:	4463      	add	r3, ip
    cf5c:	3b08      	subs	r3, #8
    cf5e:	681b      	ldr	r3, [r3, #0]
    cf60:	785b      	ldrb	r3, [r3, #1]
    cf62:	b2db      	uxtb	r3, r3
    cf64:	b25b      	sxtb	r3, r3
    cf66:	2b00      	cmp	r3, #0
    cf68:	da01      	bge.n	cf6e <extint_is_syncing+0x2e>
			return true;
    cf6a:	2301      	movs	r3, #1
    cf6c:	e006      	b.n	cf7c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cf6e:	687b      	ldr	r3, [r7, #4]
    cf70:	3301      	adds	r3, #1
    cf72:	607b      	str	r3, [r7, #4]
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d0ea      	beq.n	cf50 <extint_is_syncing+0x10>
		}
	}
	return false;
    cf7a:	2300      	movs	r3, #0
}
    cf7c:	0018      	movs	r0, r3
    cf7e:	46bd      	mov	sp, r7
    cf80:	b002      	add	sp, #8
    cf82:	bd80      	pop	{r7, pc}
    cf84:	40001800 	.word	0x40001800

0000cf88 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	b084      	sub	sp, #16
    cf8c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cf8e:	4b2d      	ldr	r3, [pc, #180]	; (d044 <_system_extint_init+0xbc>)
    cf90:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    cf92:	2140      	movs	r1, #64	; 0x40
    cf94:	2000      	movs	r0, #0
    cf96:	4b2c      	ldr	r3, [pc, #176]	; (d048 <_system_extint_init+0xc0>)
    cf98:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    cf9a:	003b      	movs	r3, r7
    cf9c:	0018      	movs	r0, r3
    cf9e:	4b2b      	ldr	r3, [pc, #172]	; (d04c <_system_extint_init+0xc4>)
    cfa0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    cfa2:	003b      	movs	r3, r7
    cfa4:	2206      	movs	r2, #6
    cfa6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    cfa8:	003b      	movs	r3, r7
    cfaa:	0019      	movs	r1, r3
    cfac:	2005      	movs	r0, #5
    cfae:	4b28      	ldr	r3, [pc, #160]	; (d050 <_system_extint_init+0xc8>)
    cfb0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    cfb2:	2005      	movs	r0, #5
    cfb4:	4b27      	ldr	r3, [pc, #156]	; (d054 <_system_extint_init+0xcc>)
    cfb6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cfb8:	2300      	movs	r3, #0
    cfba:	60fb      	str	r3, [r7, #12]
    cfbc:	e018      	b.n	cff0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    cfbe:	68fb      	ldr	r3, [r7, #12]
    cfc0:	009b      	lsls	r3, r3, #2
    cfc2:	2210      	movs	r2, #16
    cfc4:	4694      	mov	ip, r2
    cfc6:	44bc      	add	ip, r7
    cfc8:	4463      	add	r3, ip
    cfca:	3b0c      	subs	r3, #12
    cfcc:	681a      	ldr	r2, [r3, #0]
    cfce:	68fb      	ldr	r3, [r7, #12]
    cfd0:	009b      	lsls	r3, r3, #2
    cfd2:	2110      	movs	r1, #16
    cfd4:	468c      	mov	ip, r1
    cfd6:	44bc      	add	ip, r7
    cfd8:	4463      	add	r3, ip
    cfda:	3b0c      	subs	r3, #12
    cfdc:	681b      	ldr	r3, [r3, #0]
    cfde:	781b      	ldrb	r3, [r3, #0]
    cfe0:	b2db      	uxtb	r3, r3
    cfe2:	2101      	movs	r1, #1
    cfe4:	430b      	orrs	r3, r1
    cfe6:	b2db      	uxtb	r3, r3
    cfe8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cfea:	68fb      	ldr	r3, [r7, #12]
    cfec:	3301      	adds	r3, #1
    cfee:	60fb      	str	r3, [r7, #12]
    cff0:	68fb      	ldr	r3, [r7, #12]
    cff2:	2b00      	cmp	r3, #0
    cff4:	d0e3      	beq.n	cfbe <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    cff6:	46c0      	nop			; (mov r8, r8)
    cff8:	4b17      	ldr	r3, [pc, #92]	; (d058 <_system_extint_init+0xd0>)
    cffa:	4798      	blx	r3
    cffc:	1e03      	subs	r3, r0, #0
    cffe:	d1fb      	bne.n	cff8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    d000:	230b      	movs	r3, #11
    d002:	18fb      	adds	r3, r7, r3
    d004:	2200      	movs	r2, #0
    d006:	701a      	strb	r2, [r3, #0]
    d008:	e00d      	b.n	d026 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    d00a:	230b      	movs	r3, #11
    d00c:	18fb      	adds	r3, r7, r3
    d00e:	781a      	ldrb	r2, [r3, #0]
    d010:	4b12      	ldr	r3, [pc, #72]	; (d05c <_system_extint_init+0xd4>)
    d012:	0092      	lsls	r2, r2, #2
    d014:	2100      	movs	r1, #0
    d016:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    d018:	230b      	movs	r3, #11
    d01a:	18fb      	adds	r3, r7, r3
    d01c:	781a      	ldrb	r2, [r3, #0]
    d01e:	230b      	movs	r3, #11
    d020:	18fb      	adds	r3, r7, r3
    d022:	3201      	adds	r2, #1
    d024:	701a      	strb	r2, [r3, #0]
    d026:	230b      	movs	r3, #11
    d028:	18fb      	adds	r3, r7, r3
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	2b0f      	cmp	r3, #15
    d02e:	d9ec      	bls.n	d00a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    d030:	2004      	movs	r0, #4
    d032:	4b0b      	ldr	r3, [pc, #44]	; (d060 <_system_extint_init+0xd8>)
    d034:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    d036:	4b0b      	ldr	r3, [pc, #44]	; (d064 <_system_extint_init+0xdc>)
    d038:	4798      	blx	r3
}
    d03a:	46c0      	nop			; (mov r8, r8)
    d03c:	46bd      	mov	sp, r7
    d03e:	b004      	add	sp, #16
    d040:	bd80      	pop	{r7, pc}
    d042:	46c0      	nop			; (mov r8, r8)
    d044:	40001800 	.word	0x40001800
    d048:	0000ce45 	.word	0x0000ce45
    d04c:	0000ce2d 	.word	0x0000ce2d
    d050:	000139bd 	.word	0x000139bd
    d054:	00013a01 	.word	0x00013a01
    d058:	0000cf41 	.word	0x0000cf41
    d05c:	200008b0 	.word	0x200008b0
    d060:	0000cec9 	.word	0x0000cec9
    d064:	0000d069 	.word	0x0000d069

0000d068 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    d068:	b580      	push	{r7, lr}
    d06a:	b082      	sub	sp, #8
    d06c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    d06e:	4b15      	ldr	r3, [pc, #84]	; (d0c4 <_extint_enable+0x5c>)
    d070:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    d072:	2300      	movs	r3, #0
    d074:	607b      	str	r3, [r7, #4]
    d076:	e018      	b.n	d0aa <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    d078:	687b      	ldr	r3, [r7, #4]
    d07a:	009b      	lsls	r3, r3, #2
    d07c:	2208      	movs	r2, #8
    d07e:	4694      	mov	ip, r2
    d080:	44bc      	add	ip, r7
    d082:	4463      	add	r3, ip
    d084:	3b08      	subs	r3, #8
    d086:	681a      	ldr	r2, [r3, #0]
    d088:	687b      	ldr	r3, [r7, #4]
    d08a:	009b      	lsls	r3, r3, #2
    d08c:	2108      	movs	r1, #8
    d08e:	468c      	mov	ip, r1
    d090:	44bc      	add	ip, r7
    d092:	4463      	add	r3, ip
    d094:	3b08      	subs	r3, #8
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	781b      	ldrb	r3, [r3, #0]
    d09a:	b2db      	uxtb	r3, r3
    d09c:	2102      	movs	r1, #2
    d09e:	430b      	orrs	r3, r1
    d0a0:	b2db      	uxtb	r3, r3
    d0a2:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    d0a4:	687b      	ldr	r3, [r7, #4]
    d0a6:	3301      	adds	r3, #1
    d0a8:	607b      	str	r3, [r7, #4]
    d0aa:	687b      	ldr	r3, [r7, #4]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d0e3      	beq.n	d078 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    d0b0:	46c0      	nop			; (mov r8, r8)
    d0b2:	4b05      	ldr	r3, [pc, #20]	; (d0c8 <_extint_enable+0x60>)
    d0b4:	4798      	blx	r3
    d0b6:	1e03      	subs	r3, r0, #0
    d0b8:	d1fb      	bne.n	d0b2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    d0ba:	46c0      	nop			; (mov r8, r8)
    d0bc:	46bd      	mov	sp, r7
    d0be:	b002      	add	sp, #8
    d0c0:	bd80      	pop	{r7, pc}
    d0c2:	46c0      	nop			; (mov r8, r8)
    d0c4:	40001800 	.word	0x40001800
    d0c8:	0000cf41 	.word	0x0000cf41

0000d0cc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    d0cc:	b580      	push	{r7, lr}
    d0ce:	b082      	sub	sp, #8
    d0d0:	af00      	add	r7, sp, #0
    d0d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    d0d4:	687b      	ldr	r3, [r7, #4]
    d0d6:	2200      	movs	r2, #0
    d0d8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    d0da:	687b      	ldr	r3, [r7, #4]
    d0dc:	2200      	movs	r2, #0
    d0de:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    d0e0:	687b      	ldr	r3, [r7, #4]
    d0e2:	2201      	movs	r2, #1
    d0e4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    d0e6:	687b      	ldr	r3, [r7, #4]
    d0e8:	2201      	movs	r2, #1
    d0ea:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    d0ec:	687b      	ldr	r3, [r7, #4]
    d0ee:	2200      	movs	r2, #0
    d0f0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    d0f2:	687b      	ldr	r3, [r7, #4]
    d0f4:	2202      	movs	r2, #2
    d0f6:	72da      	strb	r2, [r3, #11]
}
    d0f8:	46c0      	nop			; (mov r8, r8)
    d0fa:	46bd      	mov	sp, r7
    d0fc:	b002      	add	sp, #8
    d0fe:	bd80      	pop	{r7, pc}

0000d100 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    d100:	b580      	push	{r7, lr}
    d102:	b086      	sub	sp, #24
    d104:	af00      	add	r7, sp, #0
    d106:	0002      	movs	r2, r0
    d108:	6039      	str	r1, [r7, #0]
    d10a:	1dfb      	adds	r3, r7, #7
    d10c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    d10e:	2308      	movs	r3, #8
    d110:	18fb      	adds	r3, r7, r3
    d112:	0018      	movs	r0, r3
    d114:	4b36      	ldr	r3, [pc, #216]	; (d1f0 <extint_chan_set_config+0xf0>)
    d116:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    d118:	683b      	ldr	r3, [r7, #0]
    d11a:	685b      	ldr	r3, [r3, #4]
    d11c:	b2da      	uxtb	r2, r3
    d11e:	2308      	movs	r3, #8
    d120:	18fb      	adds	r3, r7, r3
    d122:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d124:	2308      	movs	r3, #8
    d126:	18fb      	adds	r3, r7, r3
    d128:	2200      	movs	r2, #0
    d12a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    d12c:	683b      	ldr	r3, [r7, #0]
    d12e:	7a1a      	ldrb	r2, [r3, #8]
    d130:	2308      	movs	r3, #8
    d132:	18fb      	adds	r3, r7, r3
    d134:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    d136:	683b      	ldr	r3, [r7, #0]
    d138:	681b      	ldr	r3, [r3, #0]
    d13a:	b2db      	uxtb	r3, r3
    d13c:	2208      	movs	r2, #8
    d13e:	18ba      	adds	r2, r7, r2
    d140:	0011      	movs	r1, r2
    d142:	0018      	movs	r0, r3
    d144:	4b2b      	ldr	r3, [pc, #172]	; (d1f4 <extint_chan_set_config+0xf4>)
    d146:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    d148:	1dfb      	adds	r3, r7, #7
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	0018      	movs	r0, r3
    d14e:	4b2a      	ldr	r3, [pc, #168]	; (d1f8 <extint_chan_set_config+0xf8>)
    d150:	4798      	blx	r3
    d152:	0003      	movs	r3, r0
    d154:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    d156:	1dfb      	adds	r3, r7, #7
    d158:	781b      	ldrb	r3, [r3, #0]
    d15a:	2207      	movs	r2, #7
    d15c:	4013      	ands	r3, r2
    d15e:	009b      	lsls	r3, r3, #2
    d160:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    d162:	683b      	ldr	r3, [r7, #0]
    d164:	7adb      	ldrb	r3, [r3, #11]
    d166:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    d168:	683b      	ldr	r3, [r7, #0]
    d16a:	7a9b      	ldrb	r3, [r3, #10]
    d16c:	2b00      	cmp	r3, #0
    d16e:	d003      	beq.n	d178 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    d170:	697b      	ldr	r3, [r7, #20]
    d172:	2208      	movs	r2, #8
    d174:	4313      	orrs	r3, r2
    d176:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    d178:	1dfb      	adds	r3, r7, #7
    d17a:	781b      	ldrb	r3, [r3, #0]
    d17c:	08db      	lsrs	r3, r3, #3
    d17e:	b2db      	uxtb	r3, r3
    d180:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    d182:	1dfb      	adds	r3, r7, #7
    d184:	781b      	ldrb	r3, [r3, #0]
    d186:	08db      	lsrs	r3, r3, #3
    d188:	b2db      	uxtb	r3, r3
    d18a:	001a      	movs	r2, r3
    d18c:	693b      	ldr	r3, [r7, #16]
    d18e:	3206      	adds	r2, #6
    d190:	0092      	lsls	r2, r2, #2
    d192:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d194:	210f      	movs	r1, #15
    d196:	68fa      	ldr	r2, [r7, #12]
    d198:	4091      	lsls	r1, r2
    d19a:	000a      	movs	r2, r1
    d19c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    d19e:	401a      	ands	r2, r3
			(new_config << config_pos);
    d1a0:	6979      	ldr	r1, [r7, #20]
    d1a2:	68fb      	ldr	r3, [r7, #12]
    d1a4:	4099      	lsls	r1, r3
    d1a6:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d1a8:	431a      	orrs	r2, r3
    d1aa:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    d1ac:	693b      	ldr	r3, [r7, #16]
    d1ae:	1d82      	adds	r2, r0, #6
    d1b0:	0092      	lsls	r2, r2, #2
    d1b2:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    d1b4:	683b      	ldr	r3, [r7, #0]
    d1b6:	7a5b      	ldrb	r3, [r3, #9]
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d00a      	beq.n	d1d2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    d1bc:	693b      	ldr	r3, [r7, #16]
    d1be:	695a      	ldr	r2, [r3, #20]
    d1c0:	1dfb      	adds	r3, r7, #7
    d1c2:	781b      	ldrb	r3, [r3, #0]
    d1c4:	2101      	movs	r1, #1
    d1c6:	4099      	lsls	r1, r3
    d1c8:	000b      	movs	r3, r1
    d1ca:	431a      	orrs	r2, r3
    d1cc:	693b      	ldr	r3, [r7, #16]
    d1ce:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    d1d0:	e00a      	b.n	d1e8 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    d1d2:	693b      	ldr	r3, [r7, #16]
    d1d4:	695b      	ldr	r3, [r3, #20]
    d1d6:	1dfa      	adds	r2, r7, #7
    d1d8:	7812      	ldrb	r2, [r2, #0]
    d1da:	2101      	movs	r1, #1
    d1dc:	4091      	lsls	r1, r2
    d1de:	000a      	movs	r2, r1
    d1e0:	43d2      	mvns	r2, r2
    d1e2:	401a      	ands	r2, r3
    d1e4:	693b      	ldr	r3, [r7, #16]
    d1e6:	615a      	str	r2, [r3, #20]
}
    d1e8:	46c0      	nop			; (mov r8, r8)
    d1ea:	46bd      	mov	sp, r7
    d1ec:	b006      	add	sp, #24
    d1ee:	bd80      	pop	{r7, pc}
    d1f0:	0000cea1 	.word	0x0000cea1
    d1f4:	00013ca9 	.word	0x00013ca9
    d1f8:	0000cef5 	.word	0x0000cef5

0000d1fc <system_gclk_chan_get_config_defaults>:
{
    d1fc:	b580      	push	{r7, lr}
    d1fe:	b082      	sub	sp, #8
    d200:	af00      	add	r7, sp, #0
    d202:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d204:	687b      	ldr	r3, [r7, #4]
    d206:	2200      	movs	r2, #0
    d208:	701a      	strb	r2, [r3, #0]
}
    d20a:	46c0      	nop			; (mov r8, r8)
    d20c:	46bd      	mov	sp, r7
    d20e:	b002      	add	sp, #8
    d210:	bd80      	pop	{r7, pc}
	...

0000d214 <system_apb_clock_set_mask>:
{
    d214:	b580      	push	{r7, lr}
    d216:	b082      	sub	sp, #8
    d218:	af00      	add	r7, sp, #0
    d21a:	0002      	movs	r2, r0
    d21c:	6039      	str	r1, [r7, #0]
    d21e:	1dfb      	adds	r3, r7, #7
    d220:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d222:	1dfb      	adds	r3, r7, #7
    d224:	781b      	ldrb	r3, [r3, #0]
    d226:	2b01      	cmp	r3, #1
    d228:	d00a      	beq.n	d240 <system_apb_clock_set_mask+0x2c>
    d22a:	2b02      	cmp	r3, #2
    d22c:	d00f      	beq.n	d24e <system_apb_clock_set_mask+0x3a>
    d22e:	2b00      	cmp	r3, #0
    d230:	d114      	bne.n	d25c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d232:	4b0e      	ldr	r3, [pc, #56]	; (d26c <system_apb_clock_set_mask+0x58>)
    d234:	4a0d      	ldr	r2, [pc, #52]	; (d26c <system_apb_clock_set_mask+0x58>)
    d236:	6991      	ldr	r1, [r2, #24]
    d238:	683a      	ldr	r2, [r7, #0]
    d23a:	430a      	orrs	r2, r1
    d23c:	619a      	str	r2, [r3, #24]
			break;
    d23e:	e00f      	b.n	d260 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d240:	4b0a      	ldr	r3, [pc, #40]	; (d26c <system_apb_clock_set_mask+0x58>)
    d242:	4a0a      	ldr	r2, [pc, #40]	; (d26c <system_apb_clock_set_mask+0x58>)
    d244:	69d1      	ldr	r1, [r2, #28]
    d246:	683a      	ldr	r2, [r7, #0]
    d248:	430a      	orrs	r2, r1
    d24a:	61da      	str	r2, [r3, #28]
			break;
    d24c:	e008      	b.n	d260 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d24e:	4b07      	ldr	r3, [pc, #28]	; (d26c <system_apb_clock_set_mask+0x58>)
    d250:	4a06      	ldr	r2, [pc, #24]	; (d26c <system_apb_clock_set_mask+0x58>)
    d252:	6a11      	ldr	r1, [r2, #32]
    d254:	683a      	ldr	r2, [r7, #0]
    d256:	430a      	orrs	r2, r1
    d258:	621a      	str	r2, [r3, #32]
			break;
    d25a:	e001      	b.n	d260 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d25c:	2317      	movs	r3, #23
    d25e:	e000      	b.n	d262 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d260:	2300      	movs	r3, #0
}
    d262:	0018      	movs	r0, r3
    d264:	46bd      	mov	sp, r7
    d266:	b002      	add	sp, #8
    d268:	bd80      	pop	{r7, pc}
    d26a:	46c0      	nop			; (mov r8, r8)
    d26c:	40000400 	.word	0x40000400

0000d270 <system_interrupt_enable>:
{
    d270:	b580      	push	{r7, lr}
    d272:	b082      	sub	sp, #8
    d274:	af00      	add	r7, sp, #0
    d276:	0002      	movs	r2, r0
    d278:	1dfb      	adds	r3, r7, #7
    d27a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d27c:	4b06      	ldr	r3, [pc, #24]	; (d298 <system_interrupt_enable+0x28>)
    d27e:	1dfa      	adds	r2, r7, #7
    d280:	7812      	ldrb	r2, [r2, #0]
    d282:	0011      	movs	r1, r2
    d284:	221f      	movs	r2, #31
    d286:	400a      	ands	r2, r1
    d288:	2101      	movs	r1, #1
    d28a:	4091      	lsls	r1, r2
    d28c:	000a      	movs	r2, r1
    d28e:	601a      	str	r2, [r3, #0]
}
    d290:	46c0      	nop			; (mov r8, r8)
    d292:	46bd      	mov	sp, r7
    d294:	b002      	add	sp, #8
    d296:	bd80      	pop	{r7, pc}
    d298:	e000e100 	.word	0xe000e100

0000d29c <system_interrupt_disable>:
{
    d29c:	b580      	push	{r7, lr}
    d29e:	b082      	sub	sp, #8
    d2a0:	af00      	add	r7, sp, #0
    d2a2:	0002      	movs	r2, r0
    d2a4:	1dfb      	adds	r3, r7, #7
    d2a6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d2a8:	4a07      	ldr	r2, [pc, #28]	; (d2c8 <system_interrupt_disable+0x2c>)
    d2aa:	1dfb      	adds	r3, r7, #7
    d2ac:	781b      	ldrb	r3, [r3, #0]
    d2ae:	0019      	movs	r1, r3
    d2b0:	231f      	movs	r3, #31
    d2b2:	400b      	ands	r3, r1
    d2b4:	2101      	movs	r1, #1
    d2b6:	4099      	lsls	r1, r3
    d2b8:	000b      	movs	r3, r1
    d2ba:	0019      	movs	r1, r3
    d2bc:	2380      	movs	r3, #128	; 0x80
    d2be:	50d1      	str	r1, [r2, r3]
}
    d2c0:	46c0      	nop			; (mov r8, r8)
    d2c2:	46bd      	mov	sp, r7
    d2c4:	b002      	add	sp, #8
    d2c6:	bd80      	pop	{r7, pc}
    d2c8:	e000e100 	.word	0xe000e100

0000d2cc <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    d2cc:	b580      	push	{r7, lr}
    d2ce:	b084      	sub	sp, #16
    d2d0:	af00      	add	r7, sp, #0
    d2d2:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d2d4:	687b      	ldr	r3, [r7, #4]
    d2d6:	681b      	ldr	r3, [r3, #0]
    d2d8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d2da:	68fb      	ldr	r3, [r7, #12]
    d2dc:	7a9b      	ldrb	r3, [r3, #10]
    d2de:	b2db      	uxtb	r3, r3
    d2e0:	b25b      	sxtb	r3, r3
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	da01      	bge.n	d2ea <rtc_count_is_syncing+0x1e>
                return true;
    d2e6:	2301      	movs	r3, #1
    d2e8:	e000      	b.n	d2ec <rtc_count_is_syncing+0x20>
        }

        return false;
    d2ea:	2300      	movs	r3, #0
}
    d2ec:	0018      	movs	r0, r3
    d2ee:	46bd      	mov	sp, r7
    d2f0:	b004      	add	sp, #16
    d2f2:	bd80      	pop	{r7, pc}

0000d2f4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    d2f4:	b580      	push	{r7, lr}
    d2f6:	b084      	sub	sp, #16
    d2f8:	af00      	add	r7, sp, #0
    d2fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d2fc:	687b      	ldr	r3, [r7, #4]
    d2fe:	681b      	ldr	r3, [r3, #0]
    d300:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    d302:	2003      	movs	r0, #3
    d304:	4b0a      	ldr	r3, [pc, #40]	; (d330 <rtc_count_enable+0x3c>)
    d306:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    d308:	46c0      	nop			; (mov r8, r8)
    d30a:	687b      	ldr	r3, [r7, #4]
    d30c:	0018      	movs	r0, r3
    d30e:	4b09      	ldr	r3, [pc, #36]	; (d334 <rtc_count_enable+0x40>)
    d310:	4798      	blx	r3
    d312:	1e03      	subs	r3, r0, #0
    d314:	d1f9      	bne.n	d30a <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    d316:	68fb      	ldr	r3, [r7, #12]
    d318:	881b      	ldrh	r3, [r3, #0]
    d31a:	b29b      	uxth	r3, r3
    d31c:	2202      	movs	r2, #2
    d31e:	4313      	orrs	r3, r2
    d320:	b29a      	uxth	r2, r3
    d322:	68fb      	ldr	r3, [r7, #12]
    d324:	801a      	strh	r2, [r3, #0]
}
    d326:	46c0      	nop			; (mov r8, r8)
    d328:	46bd      	mov	sp, r7
    d32a:	b004      	add	sp, #16
    d32c:	bd80      	pop	{r7, pc}
    d32e:	46c0      	nop			; (mov r8, r8)
    d330:	0000d271 	.word	0x0000d271
    d334:	0000d2cd 	.word	0x0000d2cd

0000d338 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    d338:	b580      	push	{r7, lr}
    d33a:	b084      	sub	sp, #16
    d33c:	af00      	add	r7, sp, #0
    d33e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    d346:	2003      	movs	r0, #3
    d348:	4b0d      	ldr	r3, [pc, #52]	; (d380 <rtc_count_disable+0x48>)
    d34a:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    d34c:	46c0      	nop			; (mov r8, r8)
    d34e:	687b      	ldr	r3, [r7, #4]
    d350:	0018      	movs	r0, r3
    d352:	4b0c      	ldr	r3, [pc, #48]	; (d384 <rtc_count_disable+0x4c>)
    d354:	4798      	blx	r3
    d356:	1e03      	subs	r3, r0, #0
    d358:	d1f9      	bne.n	d34e <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    d35a:	68fb      	ldr	r3, [r7, #12]
    d35c:	22c1      	movs	r2, #193	; 0xc1
    d35e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    d360:	68fb      	ldr	r3, [r7, #12]
    d362:	22c1      	movs	r2, #193	; 0xc1
    d364:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    d366:	68fb      	ldr	r3, [r7, #12]
    d368:	881b      	ldrh	r3, [r3, #0]
    d36a:	b29b      	uxth	r3, r3
    d36c:	2202      	movs	r2, #2
    d36e:	4393      	bics	r3, r2
    d370:	b29a      	uxth	r2, r3
    d372:	68fb      	ldr	r3, [r7, #12]
    d374:	801a      	strh	r2, [r3, #0]
}
    d376:	46c0      	nop			; (mov r8, r8)
    d378:	46bd      	mov	sp, r7
    d37a:	b004      	add	sp, #16
    d37c:	bd80      	pop	{r7, pc}
    d37e:	46c0      	nop			; (mov r8, r8)
    d380:	0000d29d 	.word	0x0000d29d
    d384:	0000d2cd 	.word	0x0000d2cd

0000d388 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    d388:	b580      	push	{r7, lr}
    d38a:	b084      	sub	sp, #16
    d38c:	af00      	add	r7, sp, #0
    d38e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d390:	687b      	ldr	r3, [r7, #4]
    d392:	681b      	ldr	r3, [r3, #0]
    d394:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    d396:	687b      	ldr	r3, [r7, #4]
    d398:	0018      	movs	r0, r3
    d39a:	4b0d      	ldr	r3, [pc, #52]	; (d3d0 <rtc_count_reset+0x48>)
    d39c:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    d39e:	687b      	ldr	r3, [r7, #4]
    d3a0:	2200      	movs	r2, #0
    d3a2:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
    d3a4:	687b      	ldr	r3, [r7, #4]
    d3a6:	2200      	movs	r2, #0
    d3a8:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
    d3aa:	46c0      	nop			; (mov r8, r8)
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	0018      	movs	r0, r3
    d3b0:	4b08      	ldr	r3, [pc, #32]	; (d3d4 <rtc_count_reset+0x4c>)
    d3b2:	4798      	blx	r3
    d3b4:	1e03      	subs	r3, r0, #0
    d3b6:	d1f9      	bne.n	d3ac <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    d3b8:	68fb      	ldr	r3, [r7, #12]
    d3ba:	881b      	ldrh	r3, [r3, #0]
    d3bc:	b29b      	uxth	r3, r3
    d3be:	2201      	movs	r2, #1
    d3c0:	4313      	orrs	r3, r2
    d3c2:	b29a      	uxth	r2, r3
    d3c4:	68fb      	ldr	r3, [r7, #12]
    d3c6:	801a      	strh	r2, [r3, #0]
}
    d3c8:	46c0      	nop			; (mov r8, r8)
    d3ca:	46bd      	mov	sp, r7
    d3cc:	b004      	add	sp, #16
    d3ce:	bd80      	pop	{r7, pc}
    d3d0:	0000d339 	.word	0x0000d339
    d3d4:	0000d2cd 	.word	0x0000d2cd

0000d3d8 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    d3d8:	b580      	push	{r7, lr}
    d3da:	b084      	sub	sp, #16
    d3dc:	af00      	add	r7, sp, #0
    d3de:	6078      	str	r0, [r7, #4]
    d3e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d3e2:	687b      	ldr	r3, [r7, #4]
    d3e4:	681b      	ldr	r3, [r3, #0]
    d3e6:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    d3e8:	683b      	ldr	r3, [r7, #0]
    d3ea:	881a      	ldrh	r2, [r3, #0]
    d3ec:	68bb      	ldr	r3, [r7, #8]
    d3ee:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    d3f0:	683b      	ldr	r3, [r7, #0]
    d3f2:	789b      	ldrb	r3, [r3, #2]
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	d03a      	beq.n	d46e <_rtc_count_set_config+0x96>
    d3f8:	2b01      	cmp	r3, #1
    d3fa:	d000      	beq.n	d3fe <_rtc_count_set_config+0x26>
    d3fc:	e06c      	b.n	d4d8 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    d3fe:	68bb      	ldr	r3, [r7, #8]
    d400:	881b      	ldrh	r3, [r3, #0]
    d402:	b29a      	uxth	r2, r3
    d404:	68bb      	ldr	r3, [r7, #8]
    d406:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    d408:	683b      	ldr	r3, [r7, #0]
    d40a:	78db      	ldrb	r3, [r3, #3]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d007      	beq.n	d420 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    d410:	68bb      	ldr	r3, [r7, #8]
    d412:	881b      	ldrh	r3, [r3, #0]
    d414:	b29b      	uxth	r3, r3
    d416:	2280      	movs	r2, #128	; 0x80
    d418:	4313      	orrs	r3, r2
    d41a:	b29a      	uxth	r2, r3
    d41c:	68bb      	ldr	r3, [r7, #8]
    d41e:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    d420:	230f      	movs	r3, #15
    d422:	18fb      	adds	r3, r7, r3
    d424:	2200      	movs	r2, #0
    d426:	701a      	strb	r2, [r3, #0]
    d428:	e01b      	b.n	d462 <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
    d42a:	46c0      	nop			; (mov r8, r8)
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	0018      	movs	r0, r3
    d430:	4b37      	ldr	r3, [pc, #220]	; (d510 <_rtc_count_set_config+0x138>)
    d432:	4798      	blx	r3
    d434:	1e03      	subs	r3, r0, #0
    d436:	d1f9      	bne.n	d42c <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    d438:	230f      	movs	r3, #15
    d43a:	18fb      	adds	r3, r7, r3
    d43c:	781a      	ldrb	r2, [r3, #0]
    d43e:	683b      	ldr	r3, [r7, #0]
    d440:	3202      	adds	r2, #2
    d442:	0092      	lsls	r2, r2, #2
    d444:	58d1      	ldr	r1, [r2, r3]
    d446:	230f      	movs	r3, #15
    d448:	18fb      	adds	r3, r7, r3
    d44a:	781a      	ldrb	r2, [r3, #0]
    d44c:	687b      	ldr	r3, [r7, #4]
    d44e:	0018      	movs	r0, r3
    d450:	4b30      	ldr	r3, [pc, #192]	; (d514 <_rtc_count_set_config+0x13c>)
    d452:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    d454:	230f      	movs	r3, #15
    d456:	18fb      	adds	r3, r7, r3
    d458:	781a      	ldrb	r2, [r3, #0]
    d45a:	230f      	movs	r3, #15
    d45c:	18fb      	adds	r3, r7, r3
    d45e:	3201      	adds	r2, #1
    d460:	701a      	strb	r2, [r3, #0]
    d462:	230f      	movs	r3, #15
    d464:	18fb      	adds	r3, r7, r3
    d466:	781b      	ldrb	r3, [r3, #0]
    d468:	2b00      	cmp	r3, #0
    d46a:	d0de      	beq.n	d42a <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
    d46c:	e036      	b.n	d4dc <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    d46e:	68bb      	ldr	r3, [r7, #8]
    d470:	881b      	ldrh	r3, [r3, #0]
    d472:	b29b      	uxth	r3, r3
    d474:	2204      	movs	r2, #4
    d476:	4313      	orrs	r3, r2
    d478:	b29a      	uxth	r2, r3
    d47a:	68bb      	ldr	r3, [r7, #8]
    d47c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    d47e:	683b      	ldr	r3, [r7, #0]
    d480:	78db      	ldrb	r3, [r3, #3]
    d482:	2b00      	cmp	r3, #0
    d484:	d001      	beq.n	d48a <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d486:	2317      	movs	r3, #23
    d488:	e03e      	b.n	d508 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d48a:	230e      	movs	r3, #14
    d48c:	18fb      	adds	r3, r7, r3
    d48e:	2200      	movs	r2, #0
    d490:	701a      	strb	r2, [r3, #0]
    d492:	e01b      	b.n	d4cc <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
    d494:	46c0      	nop			; (mov r8, r8)
    d496:	687b      	ldr	r3, [r7, #4]
    d498:	0018      	movs	r0, r3
    d49a:	4b1d      	ldr	r3, [pc, #116]	; (d510 <_rtc_count_set_config+0x138>)
    d49c:	4798      	blx	r3
    d49e:	1e03      	subs	r3, r0, #0
    d4a0:	d1f9      	bne.n	d496 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    d4a2:	230e      	movs	r3, #14
    d4a4:	18fb      	adds	r3, r7, r3
    d4a6:	781a      	ldrb	r2, [r3, #0]
    d4a8:	683b      	ldr	r3, [r7, #0]
    d4aa:	3202      	adds	r2, #2
    d4ac:	0092      	lsls	r2, r2, #2
    d4ae:	58d1      	ldr	r1, [r2, r3]
    d4b0:	230e      	movs	r3, #14
    d4b2:	18fb      	adds	r3, r7, r3
    d4b4:	781a      	ldrb	r2, [r3, #0]
    d4b6:	687b      	ldr	r3, [r7, #4]
    d4b8:	0018      	movs	r0, r3
    d4ba:	4b16      	ldr	r3, [pc, #88]	; (d514 <_rtc_count_set_config+0x13c>)
    d4bc:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d4be:	230e      	movs	r3, #14
    d4c0:	18fb      	adds	r3, r7, r3
    d4c2:	781a      	ldrb	r2, [r3, #0]
    d4c4:	230e      	movs	r3, #14
    d4c6:	18fb      	adds	r3, r7, r3
    d4c8:	3201      	adds	r2, #1
    d4ca:	701a      	strb	r2, [r3, #0]
    d4cc:	230e      	movs	r3, #14
    d4ce:	18fb      	adds	r3, r7, r3
    d4d0:	781b      	ldrb	r3, [r3, #0]
    d4d2:	2b01      	cmp	r3, #1
    d4d4:	d9de      	bls.n	d494 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
    d4d6:	e001      	b.n	d4dc <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    d4d8:	2317      	movs	r3, #23
    d4da:	e015      	b.n	d508 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    d4dc:	683b      	ldr	r3, [r7, #0]
    d4de:	791b      	ldrb	r3, [r3, #4]
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d010      	beq.n	d506 <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    d4e4:	68bb      	ldr	r3, [r7, #8]
    d4e6:	885b      	ldrh	r3, [r3, #2]
    d4e8:	b29b      	uxth	r3, r3
    d4ea:	2280      	movs	r2, #128	; 0x80
    d4ec:	01d2      	lsls	r2, r2, #7
    d4ee:	4313      	orrs	r3, r2
    d4f0:	b29a      	uxth	r2, r3
    d4f2:	68bb      	ldr	r3, [r7, #8]
    d4f4:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    d4f6:	68bb      	ldr	r3, [r7, #8]
    d4f8:	885b      	ldrh	r3, [r3, #2]
    d4fa:	b29b      	uxth	r3, r3
    d4fc:	4a06      	ldr	r2, [pc, #24]	; (d518 <_rtc_count_set_config+0x140>)
    d4fe:	4313      	orrs	r3, r2
    d500:	b29a      	uxth	r2, r3
    d502:	68bb      	ldr	r3, [r7, #8]
    d504:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    d506:	2300      	movs	r3, #0
}
    d508:	0018      	movs	r0, r3
    d50a:	46bd      	mov	sp, r7
    d50c:	b004      	add	sp, #16
    d50e:	bd80      	pop	{r7, pc}
    d510:	0000d2cd 	.word	0x0000d2cd
    d514:	0000d5ad 	.word	0x0000d5ad
    d518:	ffff8000 	.word	0xffff8000

0000d51c <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    d51c:	b580      	push	{r7, lr}
    d51e:	b086      	sub	sp, #24
    d520:	af00      	add	r7, sp, #0
    d522:	60f8      	str	r0, [r7, #12]
    d524:	60b9      	str	r1, [r7, #8]
    d526:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	68ba      	ldr	r2, [r7, #8]
    d52c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    d52e:	2120      	movs	r1, #32
    d530:	2000      	movs	r0, #0
    d532:	4b17      	ldr	r3, [pc, #92]	; (d590 <rtc_count_init+0x74>)
    d534:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d536:	2314      	movs	r3, #20
    d538:	18fb      	adds	r3, r7, r3
    d53a:	0018      	movs	r0, r3
    d53c:	4b15      	ldr	r3, [pc, #84]	; (d594 <rtc_count_init+0x78>)
    d53e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    d540:	2314      	movs	r3, #20
    d542:	18fb      	adds	r3, r7, r3
    d544:	2202      	movs	r2, #2
    d546:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    d548:	2314      	movs	r3, #20
    d54a:	18fb      	adds	r3, r7, r3
    d54c:	0019      	movs	r1, r3
    d54e:	2004      	movs	r0, #4
    d550:	4b11      	ldr	r3, [pc, #68]	; (d598 <rtc_count_init+0x7c>)
    d552:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    d554:	2004      	movs	r0, #4
    d556:	4b11      	ldr	r3, [pc, #68]	; (d59c <rtc_count_init+0x80>)
    d558:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    d55a:	68fb      	ldr	r3, [r7, #12]
    d55c:	0018      	movs	r0, r3
    d55e:	4b10      	ldr	r3, [pc, #64]	; (d5a0 <rtc_count_init+0x84>)
    d560:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    d562:	687b      	ldr	r3, [r7, #4]
    d564:	789a      	ldrb	r2, [r3, #2]
    d566:	68fb      	ldr	r3, [r7, #12]
    d568:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    d56a:	687b      	ldr	r3, [r7, #4]
    d56c:	791a      	ldrb	r2, [r3, #4]
    d56e:	68fb      	ldr	r3, [r7, #12]
    d570:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    d572:	4b0c      	ldr	r3, [pc, #48]	; (d5a4 <rtc_count_init+0x88>)
    d574:	68fa      	ldr	r2, [r7, #12]
    d576:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    d578:	687a      	ldr	r2, [r7, #4]
    d57a:	68fb      	ldr	r3, [r7, #12]
    d57c:	0011      	movs	r1, r2
    d57e:	0018      	movs	r0, r3
    d580:	4b09      	ldr	r3, [pc, #36]	; (d5a8 <rtc_count_init+0x8c>)
    d582:	4798      	blx	r3
    d584:	0003      	movs	r3, r0
}
    d586:	0018      	movs	r0, r3
    d588:	46bd      	mov	sp, r7
    d58a:	b006      	add	sp, #24
    d58c:	bd80      	pop	{r7, pc}
    d58e:	46c0      	nop			; (mov r8, r8)
    d590:	0000d215 	.word	0x0000d215
    d594:	0000d1fd 	.word	0x0000d1fd
    d598:	000139bd 	.word	0x000139bd
    d59c:	00013a01 	.word	0x00013a01
    d5a0:	0000d389 	.word	0x0000d389
    d5a4:	200008f0 	.word	0x200008f0
    d5a8:	0000d3d9 	.word	0x0000d3d9

0000d5ac <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    d5ac:	b580      	push	{r7, lr}
    d5ae:	b086      	sub	sp, #24
    d5b0:	af00      	add	r7, sp, #0
    d5b2:	60f8      	str	r0, [r7, #12]
    d5b4:	60b9      	str	r1, [r7, #8]
    d5b6:	1dfb      	adds	r3, r7, #7
    d5b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d5ba:	68fb      	ldr	r3, [r7, #12]
    d5bc:	681b      	ldr	r3, [r3, #0]
    d5be:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    d5c0:	46c0      	nop			; (mov r8, r8)
    d5c2:	68fb      	ldr	r3, [r7, #12]
    d5c4:	0018      	movs	r0, r3
    d5c6:	4b1a      	ldr	r3, [pc, #104]	; (d630 <rtc_count_set_compare+0x84>)
    d5c8:	4798      	blx	r3
    d5ca:	1e03      	subs	r3, r0, #0
    d5cc:	d1f9      	bne.n	d5c2 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    d5ce:	68fb      	ldr	r3, [r7, #12]
    d5d0:	791b      	ldrb	r3, [r3, #4]
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d00f      	beq.n	d5f6 <rtc_count_set_compare+0x4a>
    d5d6:	2b01      	cmp	r3, #1
    d5d8:	d122      	bne.n	d620 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    d5da:	1dfb      	adds	r3, r7, #7
    d5dc:	781b      	ldrb	r3, [r3, #0]
    d5de:	2b01      	cmp	r3, #1
    d5e0:	d901      	bls.n	d5e6 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    d5e2:	2317      	movs	r3, #23
    d5e4:	e01f      	b.n	d626 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    d5e6:	1dfb      	adds	r3, r7, #7
    d5e8:	781a      	ldrb	r2, [r3, #0]
    d5ea:	697b      	ldr	r3, [r7, #20]
    d5ec:	3206      	adds	r2, #6
    d5ee:	0092      	lsls	r2, r2, #2
    d5f0:	68b9      	ldr	r1, [r7, #8]
    d5f2:	50d1      	str	r1, [r2, r3]

			break;
    d5f4:	e016      	b.n	d624 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    d5f6:	1dfb      	adds	r3, r7, #7
    d5f8:	781b      	ldrb	r3, [r3, #0]
    d5fa:	2b02      	cmp	r3, #2
    d5fc:	d901      	bls.n	d602 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    d5fe:	2317      	movs	r3, #23
    d600:	e011      	b.n	d626 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    d602:	68bb      	ldr	r3, [r7, #8]
    d604:	4a0b      	ldr	r2, [pc, #44]	; (d634 <rtc_count_set_compare+0x88>)
    d606:	4293      	cmp	r3, r2
    d608:	d901      	bls.n	d60e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d60a:	2317      	movs	r3, #23
    d60c:	e00b      	b.n	d626 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    d60e:	1dfb      	adds	r3, r7, #7
    d610:	781a      	ldrb	r2, [r3, #0]
    d612:	68bb      	ldr	r3, [r7, #8]
    d614:	b299      	uxth	r1, r3
    d616:	697b      	ldr	r3, [r7, #20]
    d618:	320c      	adds	r2, #12
    d61a:	0052      	lsls	r2, r2, #1
    d61c:	52d1      	strh	r1, [r2, r3]

			break;
    d61e:	e001      	b.n	d624 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    d620:	231a      	movs	r3, #26
    d622:	e000      	b.n	d626 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    d624:	2300      	movs	r3, #0
}
    d626:	0018      	movs	r0, r3
    d628:	46bd      	mov	sp, r7
    d62a:	b006      	add	sp, #24
    d62c:	bd80      	pop	{r7, pc}
    d62e:	46c0      	nop			; (mov r8, r8)
    d630:	0000d2cd 	.word	0x0000d2cd
    d634:	0000ffff 	.word	0x0000ffff

0000d638 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    d638:	b580      	push	{r7, lr}
    d63a:	b084      	sub	sp, #16
    d63c:	af00      	add	r7, sp, #0
    d63e:	6078      	str	r0, [r7, #4]
    d640:	000a      	movs	r2, r1
    d642:	1cbb      	adds	r3, r7, #2
    d644:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d646:	687b      	ldr	r3, [r7, #4]
    d648:	681b      	ldr	r3, [r3, #0]
    d64a:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    d64c:	687b      	ldr	r3, [r7, #4]
    d64e:	791b      	ldrb	r3, [r3, #4]
    d650:	2b00      	cmp	r3, #0
    d652:	d001      	beq.n	d658 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d654:	2315      	movs	r3, #21
    d656:	e00b      	b.n	d670 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
    d658:	46c0      	nop			; (mov r8, r8)
    d65a:	687b      	ldr	r3, [r7, #4]
    d65c:	0018      	movs	r0, r3
    d65e:	4b06      	ldr	r3, [pc, #24]	; (d678 <rtc_count_set_period+0x40>)
    d660:	4798      	blx	r3
    d662:	1e03      	subs	r3, r0, #0
    d664:	d1f9      	bne.n	d65a <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
    d666:	68fb      	ldr	r3, [r7, #12]
    d668:	1cba      	adds	r2, r7, #2
    d66a:	8812      	ldrh	r2, [r2, #0]
    d66c:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    d66e:	2300      	movs	r3, #0
}
    d670:	0018      	movs	r0, r3
    d672:	46bd      	mov	sp, r7
    d674:	b004      	add	sp, #16
    d676:	bd80      	pop	{r7, pc}
    d678:	0000d2cd 	.word	0x0000d2cd

0000d67c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    d67c:	b580      	push	{r7, lr}
    d67e:	b086      	sub	sp, #24
    d680:	af00      	add	r7, sp, #0
    d682:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    d684:	4b31      	ldr	r3, [pc, #196]	; (d74c <_rtc_interrupt_handler+0xd0>)
    d686:	687a      	ldr	r2, [r7, #4]
    d688:	0092      	lsls	r2, r2, #2
    d68a:	58d3      	ldr	r3, [r2, r3]
    d68c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    d68e:	697b      	ldr	r3, [r7, #20]
    d690:	681b      	ldr	r3, [r3, #0]
    d692:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    d694:	230e      	movs	r3, #14
    d696:	18fb      	adds	r3, r7, r3
    d698:	697a      	ldr	r2, [r7, #20]
    d69a:	8ad2      	ldrh	r2, [r2, #22]
    d69c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    d69e:	697b      	ldr	r3, [r7, #20]
    d6a0:	8a9b      	ldrh	r3, [r3, #20]
    d6a2:	b29a      	uxth	r2, r3
    d6a4:	230e      	movs	r3, #14
    d6a6:	18fb      	adds	r3, r7, r3
    d6a8:	210e      	movs	r1, #14
    d6aa:	1879      	adds	r1, r7, r1
    d6ac:	8809      	ldrh	r1, [r1, #0]
    d6ae:	400a      	ands	r2, r1
    d6b0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    d6b2:	693b      	ldr	r3, [r7, #16]
    d6b4:	7a1b      	ldrb	r3, [r3, #8]
    d6b6:	b2da      	uxtb	r2, r3
    d6b8:	230c      	movs	r3, #12
    d6ba:	18fb      	adds	r3, r7, r3
    d6bc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    d6be:	693b      	ldr	r3, [r7, #16]
    d6c0:	79db      	ldrb	r3, [r3, #7]
    d6c2:	b2db      	uxtb	r3, r3
    d6c4:	b29a      	uxth	r2, r3
    d6c6:	230c      	movs	r3, #12
    d6c8:	18fb      	adds	r3, r7, r3
    d6ca:	210c      	movs	r1, #12
    d6cc:	1879      	adds	r1, r7, r1
    d6ce:	8809      	ldrh	r1, [r1, #0]
    d6d0:	400a      	ands	r2, r1
    d6d2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    d6d4:	230c      	movs	r3, #12
    d6d6:	18fb      	adds	r3, r7, r3
    d6d8:	881b      	ldrh	r3, [r3, #0]
    d6da:	2280      	movs	r2, #128	; 0x80
    d6dc:	4013      	ands	r3, r2
    d6de:	d00c      	beq.n	d6fa <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    d6e0:	230e      	movs	r3, #14
    d6e2:	18fb      	adds	r3, r7, r3
    d6e4:	881b      	ldrh	r3, [r3, #0]
    d6e6:	2204      	movs	r2, #4
    d6e8:	4013      	ands	r3, r2
    d6ea:	d002      	beq.n	d6f2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    d6ec:	697b      	ldr	r3, [r7, #20]
    d6ee:	691b      	ldr	r3, [r3, #16]
    d6f0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    d6f2:	693b      	ldr	r3, [r7, #16]
    d6f4:	2280      	movs	r2, #128	; 0x80
    d6f6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    d6f8:	e024      	b.n	d744 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    d6fa:	230c      	movs	r3, #12
    d6fc:	18fb      	adds	r3, r7, r3
    d6fe:	881b      	ldrh	r3, [r3, #0]
    d700:	2201      	movs	r2, #1
    d702:	4013      	ands	r3, r2
    d704:	d00c      	beq.n	d720 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    d706:	230e      	movs	r3, #14
    d708:	18fb      	adds	r3, r7, r3
    d70a:	881b      	ldrh	r3, [r3, #0]
    d70c:	2201      	movs	r2, #1
    d70e:	4013      	ands	r3, r2
    d710:	d002      	beq.n	d718 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    d712:	697b      	ldr	r3, [r7, #20]
    d714:	689b      	ldr	r3, [r3, #8]
    d716:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    d718:	693b      	ldr	r3, [r7, #16]
    d71a:	2201      	movs	r2, #1
    d71c:	721a      	strb	r2, [r3, #8]
}
    d71e:	e011      	b.n	d744 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    d720:	230c      	movs	r3, #12
    d722:	18fb      	adds	r3, r7, r3
    d724:	881b      	ldrh	r3, [r3, #0]
    d726:	2202      	movs	r2, #2
    d728:	4013      	ands	r3, r2
    d72a:	d00b      	beq.n	d744 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    d72c:	230e      	movs	r3, #14
    d72e:	18fb      	adds	r3, r7, r3
    d730:	881b      	ldrh	r3, [r3, #0]
    d732:	2202      	movs	r2, #2
    d734:	4013      	ands	r3, r2
    d736:	d002      	beq.n	d73e <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    d738:	697b      	ldr	r3, [r7, #20]
    d73a:	68db      	ldr	r3, [r3, #12]
    d73c:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    d73e:	693b      	ldr	r3, [r7, #16]
    d740:	2202      	movs	r2, #2
    d742:	721a      	strb	r2, [r3, #8]
}
    d744:	46c0      	nop			; (mov r8, r8)
    d746:	46bd      	mov	sp, r7
    d748:	b006      	add	sp, #24
    d74a:	bd80      	pop	{r7, pc}
    d74c:	200008f0 	.word	0x200008f0

0000d750 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    d750:	b580      	push	{r7, lr}
    d752:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    d754:	2000      	movs	r0, #0
    d756:	4b02      	ldr	r3, [pc, #8]	; (d760 <RTC_Handler+0x10>)
    d758:	4798      	blx	r3
}
    d75a:	46c0      	nop			; (mov r8, r8)
    d75c:	46bd      	mov	sp, r7
    d75e:	bd80      	pop	{r7, pc}
    d760:	0000d67d 	.word	0x0000d67d

0000d764 <system_gclk_chan_get_config_defaults>:
{
    d764:	b580      	push	{r7, lr}
    d766:	b082      	sub	sp, #8
    d768:	af00      	add	r7, sp, #0
    d76a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d76c:	687b      	ldr	r3, [r7, #4]
    d76e:	2200      	movs	r2, #0
    d770:	701a      	strb	r2, [r3, #0]
}
    d772:	46c0      	nop			; (mov r8, r8)
    d774:	46bd      	mov	sp, r7
    d776:	b002      	add	sp, #8
    d778:	bd80      	pop	{r7, pc}

0000d77a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d77a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d77c:	b08d      	sub	sp, #52	; 0x34
    d77e:	af00      	add	r7, sp, #0
    d780:	60b8      	str	r0, [r7, #8]
    d782:	60f9      	str	r1, [r7, #12]
    d784:	603a      	str	r2, [r7, #0]
    d786:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d788:	2300      	movs	r3, #0
    d78a:	2400      	movs	r4, #0
    d78c:	623b      	str	r3, [r7, #32]
    d78e:	627c      	str	r4, [r7, #36]	; 0x24
    d790:	2300      	movs	r3, #0
    d792:	2400      	movs	r4, #0
    d794:	61bb      	str	r3, [r7, #24]
    d796:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    d798:	233f      	movs	r3, #63	; 0x3f
    d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
    d79c:	e053      	b.n	d846 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7a0:	3b20      	subs	r3, #32
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	db04      	blt.n	d7b0 <long_division+0x36>
    d7a6:	2201      	movs	r2, #1
    d7a8:	409a      	lsls	r2, r3
    d7aa:	0013      	movs	r3, r2
    d7ac:	617b      	str	r3, [r7, #20]
    d7ae:	e00b      	b.n	d7c8 <long_division+0x4e>
    d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7b2:	2220      	movs	r2, #32
    d7b4:	1ad3      	subs	r3, r2, r3
    d7b6:	2201      	movs	r2, #1
    d7b8:	40da      	lsrs	r2, r3
    d7ba:	0013      	movs	r3, r2
    d7bc:	2100      	movs	r1, #0
    d7be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d7c0:	4091      	lsls	r1, r2
    d7c2:	000a      	movs	r2, r1
    d7c4:	4313      	orrs	r3, r2
    d7c6:	617b      	str	r3, [r7, #20]
    d7c8:	2201      	movs	r2, #1
    d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7cc:	409a      	lsls	r2, r3
    d7ce:	0013      	movs	r3, r2
    d7d0:	613b      	str	r3, [r7, #16]

		r = r << 1;
    d7d2:	69bb      	ldr	r3, [r7, #24]
    d7d4:	69fc      	ldr	r4, [r7, #28]
    d7d6:	18db      	adds	r3, r3, r3
    d7d8:	4164      	adcs	r4, r4
    d7da:	61bb      	str	r3, [r7, #24]
    d7dc:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    d7de:	68bb      	ldr	r3, [r7, #8]
    d7e0:	693a      	ldr	r2, [r7, #16]
    d7e2:	401a      	ands	r2, r3
    d7e4:	0015      	movs	r5, r2
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	697a      	ldr	r2, [r7, #20]
    d7ea:	401a      	ands	r2, r3
    d7ec:	0016      	movs	r6, r2
    d7ee:	002b      	movs	r3, r5
    d7f0:	4333      	orrs	r3, r6
    d7f2:	d007      	beq.n	d804 <long_division+0x8a>
			r |= 0x01;
    d7f4:	69bb      	ldr	r3, [r7, #24]
    d7f6:	2201      	movs	r2, #1
    d7f8:	4313      	orrs	r3, r2
    d7fa:	61bb      	str	r3, [r7, #24]
    d7fc:	69fb      	ldr	r3, [r7, #28]
    d7fe:	2200      	movs	r2, #0
    d800:	4313      	orrs	r3, r2
    d802:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    d804:	687a      	ldr	r2, [r7, #4]
    d806:	69fb      	ldr	r3, [r7, #28]
    d808:	429a      	cmp	r2, r3
    d80a:	d819      	bhi.n	d840 <long_division+0xc6>
    d80c:	687a      	ldr	r2, [r7, #4]
    d80e:	69fb      	ldr	r3, [r7, #28]
    d810:	429a      	cmp	r2, r3
    d812:	d103      	bne.n	d81c <long_division+0xa2>
    d814:	683a      	ldr	r2, [r7, #0]
    d816:	69bb      	ldr	r3, [r7, #24]
    d818:	429a      	cmp	r2, r3
    d81a:	d811      	bhi.n	d840 <long_division+0xc6>
			r = r - d;
    d81c:	69b9      	ldr	r1, [r7, #24]
    d81e:	69fa      	ldr	r2, [r7, #28]
    d820:	683b      	ldr	r3, [r7, #0]
    d822:	687c      	ldr	r4, [r7, #4]
    d824:	1ac9      	subs	r1, r1, r3
    d826:	41a2      	sbcs	r2, r4
    d828:	000b      	movs	r3, r1
    d82a:	0014      	movs	r4, r2
    d82c:	61bb      	str	r3, [r7, #24]
    d82e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    d830:	6a3a      	ldr	r2, [r7, #32]
    d832:	693b      	ldr	r3, [r7, #16]
    d834:	4313      	orrs	r3, r2
    d836:	623b      	str	r3, [r7, #32]
    d838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d83a:	697b      	ldr	r3, [r7, #20]
    d83c:	4313      	orrs	r3, r2
    d83e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d842:	3b01      	subs	r3, #1
    d844:	62fb      	str	r3, [r7, #44]	; 0x2c
    d846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d848:	2b00      	cmp	r3, #0
    d84a:	daa8      	bge.n	d79e <long_division+0x24>
		}
	}

	return q;
    d84c:	6a3b      	ldr	r3, [r7, #32]
    d84e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    d850:	0018      	movs	r0, r3
    d852:	0021      	movs	r1, r4
    d854:	46bd      	mov	sp, r7
    d856:	b00d      	add	sp, #52	; 0x34
    d858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d85a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d85a:	b580      	push	{r7, lr}
    d85c:	b086      	sub	sp, #24
    d85e:	af00      	add	r7, sp, #0
    d860:	60f8      	str	r0, [r7, #12]
    d862:	60b9      	str	r1, [r7, #8]
    d864:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    d866:	2316      	movs	r3, #22
    d868:	18fb      	adds	r3, r7, r3
    d86a:	2200      	movs	r2, #0
    d86c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    d86e:	68bb      	ldr	r3, [r7, #8]
    d870:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d872:	68bb      	ldr	r3, [r7, #8]
    d874:	085a      	lsrs	r2, r3, #1
    d876:	68fb      	ldr	r3, [r7, #12]
    d878:	429a      	cmp	r2, r3
    d87a:	d201      	bcs.n	d880 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d87c:	2340      	movs	r3, #64	; 0x40
    d87e:	e026      	b.n	d8ce <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    d880:	68bb      	ldr	r3, [r7, #8]
    d882:	085b      	lsrs	r3, r3, #1
    d884:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    d886:	e00a      	b.n	d89e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    d888:	693a      	ldr	r2, [r7, #16]
    d88a:	68fb      	ldr	r3, [r7, #12]
    d88c:	1ad3      	subs	r3, r2, r3
    d88e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    d890:	2316      	movs	r3, #22
    d892:	18fb      	adds	r3, r7, r3
    d894:	881a      	ldrh	r2, [r3, #0]
    d896:	2316      	movs	r3, #22
    d898:	18fb      	adds	r3, r7, r3
    d89a:	3201      	adds	r2, #1
    d89c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    d89e:	693a      	ldr	r2, [r7, #16]
    d8a0:	68fb      	ldr	r3, [r7, #12]
    d8a2:	429a      	cmp	r2, r3
    d8a4:	d2f0      	bcs.n	d888 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    d8a6:	2316      	movs	r3, #22
    d8a8:	18fb      	adds	r3, r7, r3
    d8aa:	2216      	movs	r2, #22
    d8ac:	18ba      	adds	r2, r7, r2
    d8ae:	8812      	ldrh	r2, [r2, #0]
    d8b0:	3a01      	subs	r2, #1
    d8b2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    d8b4:	2316      	movs	r3, #22
    d8b6:	18fb      	adds	r3, r7, r3
    d8b8:	881b      	ldrh	r3, [r3, #0]
    d8ba:	2bff      	cmp	r3, #255	; 0xff
    d8bc:	d901      	bls.n	d8c2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d8be:	2340      	movs	r3, #64	; 0x40
    d8c0:	e005      	b.n	d8ce <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    d8c2:	687b      	ldr	r3, [r7, #4]
    d8c4:	2216      	movs	r2, #22
    d8c6:	18ba      	adds	r2, r7, r2
    d8c8:	8812      	ldrh	r2, [r2, #0]
    d8ca:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    d8cc:	2300      	movs	r3, #0
	}
}
    d8ce:	0018      	movs	r0, r3
    d8d0:	46bd      	mov	sp, r7
    d8d2:	b006      	add	sp, #24
    d8d4:	bd80      	pop	{r7, pc}
	...

0000d8d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8da:	b0a1      	sub	sp, #132	; 0x84
    d8dc:	af00      	add	r7, sp, #0
    d8de:	64f8      	str	r0, [r7, #76]	; 0x4c
    d8e0:	64b9      	str	r1, [r7, #72]	; 0x48
    d8e2:	647a      	str	r2, [r7, #68]	; 0x44
    d8e4:	2243      	movs	r2, #67	; 0x43
    d8e6:	18ba      	adds	r2, r7, r2
    d8e8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    d8ea:	2300      	movs	r3, #0
    d8ec:	2400      	movs	r4, #0
    d8ee:	673b      	str	r3, [r7, #112]	; 0x70
    d8f0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    d8f2:	2300      	movs	r3, #0
    d8f4:	2400      	movs	r4, #0
    d8f6:	66bb      	str	r3, [r7, #104]	; 0x68
    d8f8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    d8fa:	2300      	movs	r3, #0
    d8fc:	2400      	movs	r4, #0
    d8fe:	67bb      	str	r3, [r7, #120]	; 0x78
    d900:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    d902:	2300      	movs	r3, #0
    d904:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d906:	2358      	movs	r3, #88	; 0x58
    d908:	2240      	movs	r2, #64	; 0x40
    d90a:	4694      	mov	ip, r2
    d90c:	44bc      	add	ip, r7
    d90e:	4463      	add	r3, ip
    d910:	781a      	ldrb	r2, [r3, #0]
    d912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d914:	435a      	muls	r2, r3
    d916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d918:	429a      	cmp	r2, r3
    d91a:	d901      	bls.n	d920 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d91c:	2340      	movs	r3, #64	; 0x40
    d91e:	e0b3      	b.n	da88 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d920:	2343      	movs	r3, #67	; 0x43
    d922:	18fb      	adds	r3, r7, r3
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	2b00      	cmp	r3, #0
    d928:	d13d      	bne.n	d9a6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d92a:	2358      	movs	r3, #88	; 0x58
    d92c:	2240      	movs	r2, #64	; 0x40
    d92e:	4694      	mov	ip, r2
    d930:	44bc      	add	ip, r7
    d932:	4463      	add	r3, ip
    d934:	781b      	ldrb	r3, [r3, #0]
    d936:	b2db      	uxtb	r3, r3
    d938:	613b      	str	r3, [r7, #16]
    d93a:	2300      	movs	r3, #0
    d93c:	617b      	str	r3, [r7, #20]
    d93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d940:	60bb      	str	r3, [r7, #8]
    d942:	2300      	movs	r3, #0
    d944:	60fb      	str	r3, [r7, #12]
    d946:	4c52      	ldr	r4, [pc, #328]	; (da90 <_sercom_get_async_baud_val+0x1b8>)
    d948:	68ba      	ldr	r2, [r7, #8]
    d94a:	68fb      	ldr	r3, [r7, #12]
    d94c:	6938      	ldr	r0, [r7, #16]
    d94e:	6979      	ldr	r1, [r7, #20]
    d950:	47a0      	blx	r4
    d952:	0003      	movs	r3, r0
    d954:	000c      	movs	r4, r1
    d956:	001b      	movs	r3, r3
    d958:	65fb      	str	r3, [r7, #92]	; 0x5c
    d95a:	2300      	movs	r3, #0
    d95c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    d95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d960:	603b      	str	r3, [r7, #0]
    d962:	2300      	movs	r3, #0
    d964:	607b      	str	r3, [r7, #4]
    d966:	6db8      	ldr	r0, [r7, #88]	; 0x58
    d968:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    d96a:	683a      	ldr	r2, [r7, #0]
    d96c:	687b      	ldr	r3, [r7, #4]
    d96e:	4c49      	ldr	r4, [pc, #292]	; (da94 <_sercom_get_async_baud_val+0x1bc>)
    d970:	47a0      	blx	r4
    d972:	0003      	movs	r3, r0
    d974:	000c      	movs	r4, r1
    d976:	673b      	str	r3, [r7, #112]	; 0x70
    d978:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d97a:	2100      	movs	r1, #0
    d97c:	2201      	movs	r2, #1
    d97e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    d980:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    d982:	1ac9      	subs	r1, r1, r3
    d984:	41a2      	sbcs	r2, r4
    d986:	000b      	movs	r3, r1
    d988:	0014      	movs	r4, r2
    d98a:	66bb      	str	r3, [r7, #104]	; 0x68
    d98c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    d98e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d990:	0c1b      	lsrs	r3, r3, #16
    d992:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    d994:	0416      	lsls	r6, r2, #16
    d996:	431e      	orrs	r6, r3
    d998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d99a:	041d      	lsls	r5, r3, #16
    d99c:	0033      	movs	r3, r6
    d99e:	67bb      	str	r3, [r7, #120]	; 0x78
    d9a0:	2300      	movs	r3, #0
    d9a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    d9a4:	e06a      	b.n	da7c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d9a6:	2343      	movs	r3, #67	; 0x43
    d9a8:	18fb      	adds	r3, r7, r3
    d9aa:	781b      	ldrb	r3, [r3, #0]
    d9ac:	2b01      	cmp	r3, #1
    d9ae:	d165      	bne.n	da7c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    d9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d9b2:	633b      	str	r3, [r7, #48]	; 0x30
    d9b4:	2300      	movs	r3, #0
    d9b6:	637b      	str	r3, [r7, #52]	; 0x34
    d9b8:	2358      	movs	r3, #88	; 0x58
    d9ba:	2240      	movs	r2, #64	; 0x40
    d9bc:	4694      	mov	ip, r2
    d9be:	44bc      	add	ip, r7
    d9c0:	4463      	add	r3, ip
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	b2db      	uxtb	r3, r3
    d9c6:	62bb      	str	r3, [r7, #40]	; 0x28
    d9c8:	2300      	movs	r3, #0
    d9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    d9cc:	4c30      	ldr	r4, [pc, #192]	; (da90 <_sercom_get_async_baud_val+0x1b8>)
    d9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d9d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d9d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d9d6:	47a0      	blx	r4
    d9d8:	0003      	movs	r3, r0
    d9da:	000c      	movs	r4, r1
    d9dc:	65bb      	str	r3, [r7, #88]	; 0x58
    d9de:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    d9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d9e2:	623b      	str	r3, [r7, #32]
    d9e4:	2300      	movs	r3, #0
    d9e6:	627b      	str	r3, [r7, #36]	; 0x24
    d9e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d9ea:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d9ec:	001a      	movs	r2, r3
    d9ee:	0023      	movs	r3, r4
    d9f0:	6a38      	ldr	r0, [r7, #32]
    d9f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d9f4:	4c27      	ldr	r4, [pc, #156]	; (da94 <_sercom_get_async_baud_val+0x1bc>)
    d9f6:	47a0      	blx	r4
    d9f8:	0003      	movs	r3, r0
    d9fa:	000c      	movs	r4, r1
    d9fc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    d9fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    da00:	2380      	movs	r3, #128	; 0x80
    da02:	019b      	lsls	r3, r3, #6
    da04:	429a      	cmp	r2, r3
    da06:	d901      	bls.n	da0c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    da08:	2340      	movs	r3, #64	; 0x40
    da0a:	e03d      	b.n	da88 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    da0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    da0e:	61bb      	str	r3, [r7, #24]
    da10:	2300      	movs	r3, #0
    da12:	61fb      	str	r3, [r7, #28]
    da14:	69b9      	ldr	r1, [r7, #24]
    da16:	69fa      	ldr	r2, [r7, #28]
    da18:	000b      	movs	r3, r1
    da1a:	0f5b      	lsrs	r3, r3, #29
    da1c:	0010      	movs	r0, r2
    da1e:	00c0      	lsls	r0, r0, #3
    da20:	63f8      	str	r0, [r7, #60]	; 0x3c
    da22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    da24:	4318      	orrs	r0, r3
    da26:	63f8      	str	r0, [r7, #60]	; 0x3c
    da28:	000b      	movs	r3, r1
    da2a:	00db      	lsls	r3, r3, #3
    da2c:	63bb      	str	r3, [r7, #56]	; 0x38
    da2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    da30:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    da32:	001a      	movs	r2, r3
    da34:	0023      	movs	r3, r4
    da36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    da38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    da3a:	4c16      	ldr	r4, [pc, #88]	; (da94 <_sercom_get_async_baud_val+0x1bc>)
    da3c:	47a0      	blx	r4
    da3e:	0003      	movs	r3, r0
    da40:	000c      	movs	r4, r1
    da42:	65bb      	str	r3, [r7, #88]	; 0x58
    da44:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    da46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    da48:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    da4a:	b2d9      	uxtb	r1, r3
    da4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    da4e:	b2db      	uxtb	r3, r3
    da50:	00db      	lsls	r3, r3, #3
    da52:	b2da      	uxtb	r2, r3
    da54:	2317      	movs	r3, #23
    da56:	2040      	movs	r0, #64	; 0x40
    da58:	4684      	mov	ip, r0
    da5a:	44bc      	add	ip, r7
    da5c:	4463      	add	r3, ip
    da5e:	1a8a      	subs	r2, r1, r2
    da60:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    da62:	2317      	movs	r3, #23
    da64:	2240      	movs	r2, #64	; 0x40
    da66:	4694      	mov	ip, r2
    da68:	44bc      	add	ip, r7
    da6a:	4463      	add	r3, ip
    da6c:	781b      	ldrb	r3, [r3, #0]
    da6e:	035b      	lsls	r3, r3, #13
    da70:	001a      	movs	r2, r3
    da72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    da74:	4313      	orrs	r3, r2
    da76:	67bb      	str	r3, [r7, #120]	; 0x78
    da78:	2300      	movs	r3, #0
    da7a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    da7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    da7e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    da80:	b29a      	uxth	r2, r3
    da82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    da84:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    da86:	2300      	movs	r3, #0
}
    da88:	0018      	movs	r0, r3
    da8a:	46bd      	mov	sp, r7
    da8c:	b021      	add	sp, #132	; 0x84
    da8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da90:	00015899 	.word	0x00015899
    da94:	0000d77b 	.word	0x0000d77b

0000da98 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    da98:	b580      	push	{r7, lr}
    da9a:	b084      	sub	sp, #16
    da9c:	af00      	add	r7, sp, #0
    da9e:	0002      	movs	r2, r0
    daa0:	1dfb      	adds	r3, r7, #7
    daa2:	701a      	strb	r2, [r3, #0]
    daa4:	1dbb      	adds	r3, r7, #6
    daa6:	1c0a      	adds	r2, r1, #0
    daa8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    daaa:	4b1a      	ldr	r3, [pc, #104]	; (db14 <sercom_set_gclk_generator+0x7c>)
    daac:	781b      	ldrb	r3, [r3, #0]
    daae:	2201      	movs	r2, #1
    dab0:	4053      	eors	r3, r2
    dab2:	b2db      	uxtb	r3, r3
    dab4:	2b00      	cmp	r3, #0
    dab6:	d103      	bne.n	dac0 <sercom_set_gclk_generator+0x28>
    dab8:	1dbb      	adds	r3, r7, #6
    daba:	781b      	ldrb	r3, [r3, #0]
    dabc:	2b00      	cmp	r3, #0
    dabe:	d01b      	beq.n	daf8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    dac0:	230c      	movs	r3, #12
    dac2:	18fb      	adds	r3, r7, r3
    dac4:	0018      	movs	r0, r3
    dac6:	4b14      	ldr	r3, [pc, #80]	; (db18 <sercom_set_gclk_generator+0x80>)
    dac8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    daca:	230c      	movs	r3, #12
    dacc:	18fb      	adds	r3, r7, r3
    dace:	1dfa      	adds	r2, r7, #7
    dad0:	7812      	ldrb	r2, [r2, #0]
    dad2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    dad4:	230c      	movs	r3, #12
    dad6:	18fb      	adds	r3, r7, r3
    dad8:	0019      	movs	r1, r3
    dada:	2013      	movs	r0, #19
    dadc:	4b0f      	ldr	r3, [pc, #60]	; (db1c <sercom_set_gclk_generator+0x84>)
    dade:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    dae0:	2013      	movs	r0, #19
    dae2:	4b0f      	ldr	r3, [pc, #60]	; (db20 <sercom_set_gclk_generator+0x88>)
    dae4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    dae6:	4b0b      	ldr	r3, [pc, #44]	; (db14 <sercom_set_gclk_generator+0x7c>)
    dae8:	1dfa      	adds	r2, r7, #7
    daea:	7812      	ldrb	r2, [r2, #0]
    daec:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    daee:	4b09      	ldr	r3, [pc, #36]	; (db14 <sercom_set_gclk_generator+0x7c>)
    daf0:	2201      	movs	r2, #1
    daf2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    daf4:	2300      	movs	r3, #0
    daf6:	e008      	b.n	db0a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    daf8:	4b06      	ldr	r3, [pc, #24]	; (db14 <sercom_set_gclk_generator+0x7c>)
    dafa:	785b      	ldrb	r3, [r3, #1]
    dafc:	1dfa      	adds	r2, r7, #7
    dafe:	7812      	ldrb	r2, [r2, #0]
    db00:	429a      	cmp	r2, r3
    db02:	d101      	bne.n	db08 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    db04:	2300      	movs	r3, #0
    db06:	e000      	b.n	db0a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    db08:	231d      	movs	r3, #29
}
    db0a:	0018      	movs	r0, r3
    db0c:	46bd      	mov	sp, r7
    db0e:	b004      	add	sp, #16
    db10:	bd80      	pop	{r7, pc}
    db12:	46c0      	nop			; (mov r8, r8)
    db14:	200002b4 	.word	0x200002b4
    db18:	0000d765 	.word	0x0000d765
    db1c:	000139bd 	.word	0x000139bd
    db20:	00013a01 	.word	0x00013a01

0000db24 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    db24:	b580      	push	{r7, lr}
    db26:	b082      	sub	sp, #8
    db28:	af00      	add	r7, sp, #0
    db2a:	6078      	str	r0, [r7, #4]
    db2c:	000a      	movs	r2, r1
    db2e:	1cfb      	adds	r3, r7, #3
    db30:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    db32:	687b      	ldr	r3, [r7, #4]
    db34:	4a4d      	ldr	r2, [pc, #308]	; (dc6c <_sercom_get_default_pad+0x148>)
    db36:	4293      	cmp	r3, r2
    db38:	d03f      	beq.n	dbba <_sercom_get_default_pad+0x96>
    db3a:	4a4c      	ldr	r2, [pc, #304]	; (dc6c <_sercom_get_default_pad+0x148>)
    db3c:	4293      	cmp	r3, r2
    db3e:	d806      	bhi.n	db4e <_sercom_get_default_pad+0x2a>
    db40:	4a4b      	ldr	r2, [pc, #300]	; (dc70 <_sercom_get_default_pad+0x14c>)
    db42:	4293      	cmp	r3, r2
    db44:	d00f      	beq.n	db66 <_sercom_get_default_pad+0x42>
    db46:	4a4b      	ldr	r2, [pc, #300]	; (dc74 <_sercom_get_default_pad+0x150>)
    db48:	4293      	cmp	r3, r2
    db4a:	d021      	beq.n	db90 <_sercom_get_default_pad+0x6c>
    db4c:	e089      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    db4e:	4a4a      	ldr	r2, [pc, #296]	; (dc78 <_sercom_get_default_pad+0x154>)
    db50:	4293      	cmp	r3, r2
    db52:	d100      	bne.n	db56 <_sercom_get_default_pad+0x32>
    db54:	e05b      	b.n	dc0e <_sercom_get_default_pad+0xea>
    db56:	4a49      	ldr	r2, [pc, #292]	; (dc7c <_sercom_get_default_pad+0x158>)
    db58:	4293      	cmp	r3, r2
    db5a:	d100      	bne.n	db5e <_sercom_get_default_pad+0x3a>
    db5c:	e06c      	b.n	dc38 <_sercom_get_default_pad+0x114>
    db5e:	4a48      	ldr	r2, [pc, #288]	; (dc80 <_sercom_get_default_pad+0x15c>)
    db60:	4293      	cmp	r3, r2
    db62:	d03f      	beq.n	dbe4 <_sercom_get_default_pad+0xc0>
    db64:	e07d      	b.n	dc62 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    db66:	1cfb      	adds	r3, r7, #3
    db68:	781b      	ldrb	r3, [r3, #0]
    db6a:	2b01      	cmp	r3, #1
    db6c:	d00a      	beq.n	db84 <_sercom_get_default_pad+0x60>
    db6e:	dc02      	bgt.n	db76 <_sercom_get_default_pad+0x52>
    db70:	2b00      	cmp	r3, #0
    db72:	d005      	beq.n	db80 <_sercom_get_default_pad+0x5c>
    db74:	e075      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    db76:	2b02      	cmp	r3, #2
    db78:	d006      	beq.n	db88 <_sercom_get_default_pad+0x64>
    db7a:	2b03      	cmp	r3, #3
    db7c:	d006      	beq.n	db8c <_sercom_get_default_pad+0x68>
    db7e:	e070      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    db80:	4b40      	ldr	r3, [pc, #256]	; (dc84 <_sercom_get_default_pad+0x160>)
    db82:	e06f      	b.n	dc64 <_sercom_get_default_pad+0x140>
    db84:	4b40      	ldr	r3, [pc, #256]	; (dc88 <_sercom_get_default_pad+0x164>)
    db86:	e06d      	b.n	dc64 <_sercom_get_default_pad+0x140>
    db88:	4b40      	ldr	r3, [pc, #256]	; (dc8c <_sercom_get_default_pad+0x168>)
    db8a:	e06b      	b.n	dc64 <_sercom_get_default_pad+0x140>
    db8c:	4b40      	ldr	r3, [pc, #256]	; (dc90 <_sercom_get_default_pad+0x16c>)
    db8e:	e069      	b.n	dc64 <_sercom_get_default_pad+0x140>
    db90:	1cfb      	adds	r3, r7, #3
    db92:	781b      	ldrb	r3, [r3, #0]
    db94:	2b01      	cmp	r3, #1
    db96:	d00a      	beq.n	dbae <_sercom_get_default_pad+0x8a>
    db98:	dc02      	bgt.n	dba0 <_sercom_get_default_pad+0x7c>
    db9a:	2b00      	cmp	r3, #0
    db9c:	d005      	beq.n	dbaa <_sercom_get_default_pad+0x86>
    db9e:	e060      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dba0:	2b02      	cmp	r3, #2
    dba2:	d006      	beq.n	dbb2 <_sercom_get_default_pad+0x8e>
    dba4:	2b03      	cmp	r3, #3
    dba6:	d006      	beq.n	dbb6 <_sercom_get_default_pad+0x92>
    dba8:	e05b      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dbaa:	2303      	movs	r3, #3
    dbac:	e05a      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbae:	4b39      	ldr	r3, [pc, #228]	; (dc94 <_sercom_get_default_pad+0x170>)
    dbb0:	e058      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbb2:	4b39      	ldr	r3, [pc, #228]	; (dc98 <_sercom_get_default_pad+0x174>)
    dbb4:	e056      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbb6:	4b39      	ldr	r3, [pc, #228]	; (dc9c <_sercom_get_default_pad+0x178>)
    dbb8:	e054      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbba:	1cfb      	adds	r3, r7, #3
    dbbc:	781b      	ldrb	r3, [r3, #0]
    dbbe:	2b01      	cmp	r3, #1
    dbc0:	d00a      	beq.n	dbd8 <_sercom_get_default_pad+0xb4>
    dbc2:	dc02      	bgt.n	dbca <_sercom_get_default_pad+0xa6>
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d005      	beq.n	dbd4 <_sercom_get_default_pad+0xb0>
    dbc8:	e04b      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dbca:	2b02      	cmp	r3, #2
    dbcc:	d006      	beq.n	dbdc <_sercom_get_default_pad+0xb8>
    dbce:	2b03      	cmp	r3, #3
    dbd0:	d006      	beq.n	dbe0 <_sercom_get_default_pad+0xbc>
    dbd2:	e046      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dbd4:	4b32      	ldr	r3, [pc, #200]	; (dca0 <_sercom_get_default_pad+0x17c>)
    dbd6:	e045      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbd8:	4b32      	ldr	r3, [pc, #200]	; (dca4 <_sercom_get_default_pad+0x180>)
    dbda:	e043      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbdc:	4b32      	ldr	r3, [pc, #200]	; (dca8 <_sercom_get_default_pad+0x184>)
    dbde:	e041      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbe0:	4b32      	ldr	r3, [pc, #200]	; (dcac <_sercom_get_default_pad+0x188>)
    dbe2:	e03f      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dbe4:	1cfb      	adds	r3, r7, #3
    dbe6:	781b      	ldrb	r3, [r3, #0]
    dbe8:	2b01      	cmp	r3, #1
    dbea:	d00a      	beq.n	dc02 <_sercom_get_default_pad+0xde>
    dbec:	dc02      	bgt.n	dbf4 <_sercom_get_default_pad+0xd0>
    dbee:	2b00      	cmp	r3, #0
    dbf0:	d005      	beq.n	dbfe <_sercom_get_default_pad+0xda>
    dbf2:	e036      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dbf4:	2b02      	cmp	r3, #2
    dbf6:	d006      	beq.n	dc06 <_sercom_get_default_pad+0xe2>
    dbf8:	2b03      	cmp	r3, #3
    dbfa:	d006      	beq.n	dc0a <_sercom_get_default_pad+0xe6>
    dbfc:	e031      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dbfe:	4b2c      	ldr	r3, [pc, #176]	; (dcb0 <_sercom_get_default_pad+0x18c>)
    dc00:	e030      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc02:	4b2c      	ldr	r3, [pc, #176]	; (dcb4 <_sercom_get_default_pad+0x190>)
    dc04:	e02e      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc06:	4b2c      	ldr	r3, [pc, #176]	; (dcb8 <_sercom_get_default_pad+0x194>)
    dc08:	e02c      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc0a:	4b2c      	ldr	r3, [pc, #176]	; (dcbc <_sercom_get_default_pad+0x198>)
    dc0c:	e02a      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc0e:	1cfb      	adds	r3, r7, #3
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	2b01      	cmp	r3, #1
    dc14:	d00a      	beq.n	dc2c <_sercom_get_default_pad+0x108>
    dc16:	dc02      	bgt.n	dc1e <_sercom_get_default_pad+0xfa>
    dc18:	2b00      	cmp	r3, #0
    dc1a:	d005      	beq.n	dc28 <_sercom_get_default_pad+0x104>
    dc1c:	e021      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dc1e:	2b02      	cmp	r3, #2
    dc20:	d006      	beq.n	dc30 <_sercom_get_default_pad+0x10c>
    dc22:	2b03      	cmp	r3, #3
    dc24:	d006      	beq.n	dc34 <_sercom_get_default_pad+0x110>
    dc26:	e01c      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dc28:	4b25      	ldr	r3, [pc, #148]	; (dcc0 <_sercom_get_default_pad+0x19c>)
    dc2a:	e01b      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc2c:	4b25      	ldr	r3, [pc, #148]	; (dcc4 <_sercom_get_default_pad+0x1a0>)
    dc2e:	e019      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc30:	4b25      	ldr	r3, [pc, #148]	; (dcc8 <_sercom_get_default_pad+0x1a4>)
    dc32:	e017      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc34:	4b25      	ldr	r3, [pc, #148]	; (dccc <_sercom_get_default_pad+0x1a8>)
    dc36:	e015      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc38:	1cfb      	adds	r3, r7, #3
    dc3a:	781b      	ldrb	r3, [r3, #0]
    dc3c:	2b01      	cmp	r3, #1
    dc3e:	d00a      	beq.n	dc56 <_sercom_get_default_pad+0x132>
    dc40:	dc02      	bgt.n	dc48 <_sercom_get_default_pad+0x124>
    dc42:	2b00      	cmp	r3, #0
    dc44:	d005      	beq.n	dc52 <_sercom_get_default_pad+0x12e>
    dc46:	e00c      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dc48:	2b02      	cmp	r3, #2
    dc4a:	d006      	beq.n	dc5a <_sercom_get_default_pad+0x136>
    dc4c:	2b03      	cmp	r3, #3
    dc4e:	d006      	beq.n	dc5e <_sercom_get_default_pad+0x13a>
    dc50:	e007      	b.n	dc62 <_sercom_get_default_pad+0x13e>
    dc52:	4b1f      	ldr	r3, [pc, #124]	; (dcd0 <_sercom_get_default_pad+0x1ac>)
    dc54:	e006      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc56:	4b1f      	ldr	r3, [pc, #124]	; (dcd4 <_sercom_get_default_pad+0x1b0>)
    dc58:	e004      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc5a:	4b1f      	ldr	r3, [pc, #124]	; (dcd8 <_sercom_get_default_pad+0x1b4>)
    dc5c:	e002      	b.n	dc64 <_sercom_get_default_pad+0x140>
    dc5e:	4b1f      	ldr	r3, [pc, #124]	; (dcdc <_sercom_get_default_pad+0x1b8>)
    dc60:	e000      	b.n	dc64 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    dc62:	2300      	movs	r3, #0
}
    dc64:	0018      	movs	r0, r3
    dc66:	46bd      	mov	sp, r7
    dc68:	b002      	add	sp, #8
    dc6a:	bd80      	pop	{r7, pc}
    dc6c:	42001000 	.word	0x42001000
    dc70:	42000800 	.word	0x42000800
    dc74:	42000c00 	.word	0x42000c00
    dc78:	42001800 	.word	0x42001800
    dc7c:	42001c00 	.word	0x42001c00
    dc80:	42001400 	.word	0x42001400
    dc84:	00040003 	.word	0x00040003
    dc88:	00050003 	.word	0x00050003
    dc8c:	00060003 	.word	0x00060003
    dc90:	00070003 	.word	0x00070003
    dc94:	00010003 	.word	0x00010003
    dc98:	001e0003 	.word	0x001e0003
    dc9c:	001f0003 	.word	0x001f0003
    dca0:	00080003 	.word	0x00080003
    dca4:	00090003 	.word	0x00090003
    dca8:	000a0003 	.word	0x000a0003
    dcac:	000b0003 	.word	0x000b0003
    dcb0:	00100003 	.word	0x00100003
    dcb4:	00110003 	.word	0x00110003
    dcb8:	00120003 	.word	0x00120003
    dcbc:	00130003 	.word	0x00130003
    dcc0:	000c0003 	.word	0x000c0003
    dcc4:	000d0003 	.word	0x000d0003
    dcc8:	000e0003 	.word	0x000e0003
    dccc:	000f0003 	.word	0x000f0003
    dcd0:	00160003 	.word	0x00160003
    dcd4:	00170003 	.word	0x00170003
    dcd8:	00180003 	.word	0x00180003
    dcdc:	00190003 	.word	0x00190003

0000dce0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    dce0:	b590      	push	{r4, r7, lr}
    dce2:	b08b      	sub	sp, #44	; 0x2c
    dce4:	af00      	add	r7, sp, #0
    dce6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    dce8:	230c      	movs	r3, #12
    dcea:	18fb      	adds	r3, r7, r3
    dcec:	4a0f      	ldr	r2, [pc, #60]	; (dd2c <_sercom_get_sercom_inst_index+0x4c>)
    dcee:	ca13      	ldmia	r2!, {r0, r1, r4}
    dcf0:	c313      	stmia	r3!, {r0, r1, r4}
    dcf2:	ca13      	ldmia	r2!, {r0, r1, r4}
    dcf4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dcf6:	2300      	movs	r3, #0
    dcf8:	627b      	str	r3, [r7, #36]	; 0x24
    dcfa:	e00e      	b.n	dd1a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    dcfc:	230c      	movs	r3, #12
    dcfe:	18fb      	adds	r3, r7, r3
    dd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dd02:	0092      	lsls	r2, r2, #2
    dd04:	58d3      	ldr	r3, [r2, r3]
    dd06:	001a      	movs	r2, r3
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	429a      	cmp	r2, r3
    dd0c:	d102      	bne.n	dd14 <_sercom_get_sercom_inst_index+0x34>
			return i;
    dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dd10:	b2db      	uxtb	r3, r3
    dd12:	e006      	b.n	dd22 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dd16:	3301      	adds	r3, #1
    dd18:	627b      	str	r3, [r7, #36]	; 0x24
    dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dd1c:	2b05      	cmp	r3, #5
    dd1e:	d9ed      	bls.n	dcfc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    dd20:	2300      	movs	r3, #0
}
    dd22:	0018      	movs	r0, r3
    dd24:	46bd      	mov	sp, r7
    dd26:	b00b      	add	sp, #44	; 0x2c
    dd28:	bd90      	pop	{r4, r7, pc}
    dd2a:	46c0      	nop			; (mov r8, r8)
    dd2c:	000198d8 	.word	0x000198d8

0000dd30 <system_cpu_clock_get_hz>:
{
    dd30:	b580      	push	{r7, lr}
    dd32:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    dd34:	2000      	movs	r0, #0
    dd36:	4b05      	ldr	r3, [pc, #20]	; (dd4c <system_cpu_clock_get_hz+0x1c>)
    dd38:	4798      	blx	r3
    dd3a:	0002      	movs	r2, r0
    dd3c:	4b04      	ldr	r3, [pc, #16]	; (dd50 <system_cpu_clock_get_hz+0x20>)
    dd3e:	7a1b      	ldrb	r3, [r3, #8]
    dd40:	b2db      	uxtb	r3, r3
    dd42:	40da      	lsrs	r2, r3
    dd44:	0013      	movs	r3, r2
}
    dd46:	0018      	movs	r0, r3
    dd48:	46bd      	mov	sp, r7
    dd4a:	bd80      	pop	{r7, pc}
    dd4c:	000138e5 	.word	0x000138e5
    dd50:	40000400 	.word	0x40000400

0000dd54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    dd54:	b580      	push	{r7, lr}
    dd56:	b084      	sub	sp, #16
    dd58:	af00      	add	r7, sp, #0
    dd5a:	60f8      	str	r0, [r7, #12]
    dd5c:	60b9      	str	r1, [r7, #8]
    dd5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    dd60:	68fb      	ldr	r3, [r7, #12]
    dd62:	3b04      	subs	r3, #4
    dd64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    dd66:	68fb      	ldr	r3, [r7, #12]
    dd68:	2280      	movs	r2, #128	; 0x80
    dd6a:	0452      	lsls	r2, r2, #17
    dd6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    dd6e:	68fb      	ldr	r3, [r7, #12]
    dd70:	3b04      	subs	r3, #4
    dd72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    dd74:	68ba      	ldr	r2, [r7, #8]
    dd76:	68fb      	ldr	r3, [r7, #12]
    dd78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    dd7a:	68fb      	ldr	r3, [r7, #12]
    dd7c:	3b04      	subs	r3, #4
    dd7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    dd80:	4a08      	ldr	r2, [pc, #32]	; (dda4 <pxPortInitialiseStack+0x50>)
    dd82:	68fb      	ldr	r3, [r7, #12]
    dd84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    dd86:	68fb      	ldr	r3, [r7, #12]
    dd88:	3b14      	subs	r3, #20
    dd8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    dd8c:	687a      	ldr	r2, [r7, #4]
    dd8e:	68fb      	ldr	r3, [r7, #12]
    dd90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    dd92:	68fb      	ldr	r3, [r7, #12]
    dd94:	3b20      	subs	r3, #32
    dd96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    dd98:	68fb      	ldr	r3, [r7, #12]
}
    dd9a:	0018      	movs	r0, r3
    dd9c:	46bd      	mov	sp, r7
    dd9e:	b004      	add	sp, #16
    dda0:	bd80      	pop	{r7, pc}
    dda2:	46c0      	nop			; (mov r8, r8)
    dda4:	0000dda9 	.word	0x0000dda9

0000dda8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    dda8:	b580      	push	{r7, lr}
    ddaa:	b082      	sub	sp, #8
    ddac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    ddae:	2300      	movs	r3, #0
    ddb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    ddb2:	4b07      	ldr	r3, [pc, #28]	; (ddd0 <prvTaskExitError+0x28>)
    ddb4:	681b      	ldr	r3, [r3, #0]
    ddb6:	3301      	adds	r3, #1
    ddb8:	d001      	beq.n	ddbe <prvTaskExitError+0x16>
    ddba:	b672      	cpsid	i
    ddbc:	e7fe      	b.n	ddbc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    ddbe:	b672      	cpsid	i
	while( ulDummy == 0 )
    ddc0:	46c0      	nop			; (mov r8, r8)
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d0fc      	beq.n	ddc2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    ddc8:	46c0      	nop			; (mov r8, r8)
    ddca:	46bd      	mov	sp, r7
    ddcc:	b002      	add	sp, #8
    ddce:	bd80      	pop	{r7, pc}
    ddd0:	20000010 	.word	0x20000010

0000ddd4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    ddd4:	b580      	push	{r7, lr}
    ddd6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    ddd8:	46c0      	nop			; (mov r8, r8)
    ddda:	46bd      	mov	sp, r7
    dddc:	bd80      	pop	{r7, pc}
	...

0000dde0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    dde0:	4a0b      	ldr	r2, [pc, #44]	; (de10 <pxCurrentTCBConst2>)
    dde2:	6813      	ldr	r3, [r2, #0]
    dde4:	6818      	ldr	r0, [r3, #0]
    dde6:	3020      	adds	r0, #32
    dde8:	f380 8809 	msr	PSP, r0
    ddec:	2002      	movs	r0, #2
    ddee:	f380 8814 	msr	CONTROL, r0
    ddf2:	f3bf 8f6f 	isb	sy
    ddf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    ddf8:	46ae      	mov	lr, r5
    ddfa:	bc08      	pop	{r3}
    ddfc:	bc04      	pop	{r2}
    ddfe:	b662      	cpsie	i
    de00:	4718      	bx	r3
    de02:	46c0      	nop			; (mov r8, r8)
    de04:	46c0      	nop			; (mov r8, r8)
    de06:	46c0      	nop			; (mov r8, r8)
    de08:	46c0      	nop			; (mov r8, r8)
    de0a:	46c0      	nop			; (mov r8, r8)
    de0c:	46c0      	nop			; (mov r8, r8)
    de0e:	46c0      	nop			; (mov r8, r8)

0000de10 <pxCurrentTCBConst2>:
    de10:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    de14:	46c0      	nop			; (mov r8, r8)
    de16:	46c0      	nop			; (mov r8, r8)

0000de18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    de18:	b580      	push	{r7, lr}
    de1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    de1c:	4b0e      	ldr	r3, [pc, #56]	; (de58 <xPortStartScheduler+0x40>)
    de1e:	4a0e      	ldr	r2, [pc, #56]	; (de58 <xPortStartScheduler+0x40>)
    de20:	6812      	ldr	r2, [r2, #0]
    de22:	21ff      	movs	r1, #255	; 0xff
    de24:	0409      	lsls	r1, r1, #16
    de26:	430a      	orrs	r2, r1
    de28:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    de2a:	4b0b      	ldr	r3, [pc, #44]	; (de58 <xPortStartScheduler+0x40>)
    de2c:	4a0a      	ldr	r2, [pc, #40]	; (de58 <xPortStartScheduler+0x40>)
    de2e:	6812      	ldr	r2, [r2, #0]
    de30:	21ff      	movs	r1, #255	; 0xff
    de32:	0609      	lsls	r1, r1, #24
    de34:	430a      	orrs	r2, r1
    de36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    de38:	4b08      	ldr	r3, [pc, #32]	; (de5c <xPortStartScheduler+0x44>)
    de3a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    de3c:	4b08      	ldr	r3, [pc, #32]	; (de60 <xPortStartScheduler+0x48>)
    de3e:	2200      	movs	r2, #0
    de40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    de42:	4b08      	ldr	r3, [pc, #32]	; (de64 <xPortStartScheduler+0x4c>)
    de44:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    de46:	4b08      	ldr	r3, [pc, #32]	; (de68 <xPortStartScheduler+0x50>)
    de48:	4798      	blx	r3
	prvTaskExitError();
    de4a:	4b08      	ldr	r3, [pc, #32]	; (de6c <xPortStartScheduler+0x54>)
    de4c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    de4e:	2300      	movs	r3, #0
}
    de50:	0018      	movs	r0, r3
    de52:	46bd      	mov	sp, r7
    de54:	bd80      	pop	{r7, pc}
    de56:	46c0      	nop			; (mov r8, r8)
    de58:	e000ed20 	.word	0xe000ed20
    de5c:	0000df89 	.word	0x0000df89
    de60:	20000010 	.word	0x20000010
    de64:	0000dde1 	.word	0x0000dde1
    de68:	0000f59d 	.word	0x0000f59d
    de6c:	0000dda9 	.word	0x0000dda9

0000de70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    de70:	b580      	push	{r7, lr}
    de72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    de74:	4b05      	ldr	r3, [pc, #20]	; (de8c <vPortYield+0x1c>)
    de76:	2280      	movs	r2, #128	; 0x80
    de78:	0552      	lsls	r2, r2, #21
    de7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    de7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    de80:	f3bf 8f6f 	isb	sy
}
    de84:	46c0      	nop			; (mov r8, r8)
    de86:	46bd      	mov	sp, r7
    de88:	bd80      	pop	{r7, pc}
    de8a:	46c0      	nop			; (mov r8, r8)
    de8c:	e000ed04 	.word	0xe000ed04

0000de90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    de90:	b580      	push	{r7, lr}
    de92:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    de94:	b672      	cpsid	i
    uxCriticalNesting++;
    de96:	4b06      	ldr	r3, [pc, #24]	; (deb0 <vPortEnterCritical+0x20>)
    de98:	681b      	ldr	r3, [r3, #0]
    de9a:	1c5a      	adds	r2, r3, #1
    de9c:	4b04      	ldr	r3, [pc, #16]	; (deb0 <vPortEnterCritical+0x20>)
    de9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    dea0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    dea4:	f3bf 8f6f 	isb	sy
}
    dea8:	46c0      	nop			; (mov r8, r8)
    deaa:	46bd      	mov	sp, r7
    deac:	bd80      	pop	{r7, pc}
    deae:	46c0      	nop			; (mov r8, r8)
    deb0:	20000010 	.word	0x20000010

0000deb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    deb4:	b580      	push	{r7, lr}
    deb6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    deb8:	4b09      	ldr	r3, [pc, #36]	; (dee0 <vPortExitCritical+0x2c>)
    deba:	681b      	ldr	r3, [r3, #0]
    debc:	2b00      	cmp	r3, #0
    debe:	d101      	bne.n	dec4 <vPortExitCritical+0x10>
    dec0:	b672      	cpsid	i
    dec2:	e7fe      	b.n	dec2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    dec4:	4b06      	ldr	r3, [pc, #24]	; (dee0 <vPortExitCritical+0x2c>)
    dec6:	681b      	ldr	r3, [r3, #0]
    dec8:	1e5a      	subs	r2, r3, #1
    deca:	4b05      	ldr	r3, [pc, #20]	; (dee0 <vPortExitCritical+0x2c>)
    decc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    dece:	4b04      	ldr	r3, [pc, #16]	; (dee0 <vPortExitCritical+0x2c>)
    ded0:	681b      	ldr	r3, [r3, #0]
    ded2:	2b00      	cmp	r3, #0
    ded4:	d100      	bne.n	ded8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    ded6:	b662      	cpsie	i
    }
}
    ded8:	46c0      	nop			; (mov r8, r8)
    deda:	46bd      	mov	sp, r7
    dedc:	bd80      	pop	{r7, pc}
    dede:	46c0      	nop			; (mov r8, r8)
    dee0:	20000010 	.word	0x20000010

0000dee4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    dee4:	f3ef 8010 	mrs	r0, PRIMASK
    dee8:	b672      	cpsid	i
    deea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    deec:	46c0      	nop			; (mov r8, r8)
    deee:	0018      	movs	r0, r3

0000def0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    def0:	f380 8810 	msr	PRIMASK, r0
    def4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    def6:	46c0      	nop			; (mov r8, r8)
	...

0000df00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    df00:	f3ef 8009 	mrs	r0, PSP
    df04:	4b0e      	ldr	r3, [pc, #56]	; (df40 <pxCurrentTCBConst>)
    df06:	681a      	ldr	r2, [r3, #0]
    df08:	3820      	subs	r0, #32
    df0a:	6010      	str	r0, [r2, #0]
    df0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    df0e:	4644      	mov	r4, r8
    df10:	464d      	mov	r5, r9
    df12:	4656      	mov	r6, sl
    df14:	465f      	mov	r7, fp
    df16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    df18:	b508      	push	{r3, lr}
    df1a:	b672      	cpsid	i
    df1c:	f001 fb3e 	bl	f59c <vTaskSwitchContext>
    df20:	b662      	cpsie	i
    df22:	bc0c      	pop	{r2, r3}
    df24:	6811      	ldr	r1, [r2, #0]
    df26:	6808      	ldr	r0, [r1, #0]
    df28:	3010      	adds	r0, #16
    df2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    df2c:	46a0      	mov	r8, r4
    df2e:	46a9      	mov	r9, r5
    df30:	46b2      	mov	sl, r6
    df32:	46bb      	mov	fp, r7
    df34:	f380 8809 	msr	PSP, r0
    df38:	3820      	subs	r0, #32
    df3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    df3c:	4718      	bx	r3
    df3e:	46c0      	nop			; (mov r8, r8)

0000df40 <pxCurrentTCBConst>:
    df40:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    df44:	46c0      	nop			; (mov r8, r8)
    df46:	46c0      	nop			; (mov r8, r8)

0000df48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    df48:	b580      	push	{r7, lr}
    df4a:	b082      	sub	sp, #8
    df4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    df4e:	4b0a      	ldr	r3, [pc, #40]	; (df78 <SysTick_Handler+0x30>)
    df50:	4798      	blx	r3
    df52:	0003      	movs	r3, r0
    df54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    df56:	4b09      	ldr	r3, [pc, #36]	; (df7c <SysTick_Handler+0x34>)
    df58:	4798      	blx	r3
    df5a:	1e03      	subs	r3, r0, #0
    df5c:	d003      	beq.n	df66 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    df5e:	4b08      	ldr	r3, [pc, #32]	; (df80 <SysTick_Handler+0x38>)
    df60:	2280      	movs	r2, #128	; 0x80
    df62:	0552      	lsls	r2, r2, #21
    df64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    df66:	687b      	ldr	r3, [r7, #4]
    df68:	0018      	movs	r0, r3
    df6a:	4b06      	ldr	r3, [pc, #24]	; (df84 <SysTick_Handler+0x3c>)
    df6c:	4798      	blx	r3
}
    df6e:	46c0      	nop			; (mov r8, r8)
    df70:	46bd      	mov	sp, r7
    df72:	b002      	add	sp, #8
    df74:	bd80      	pop	{r7, pc}
    df76:	46c0      	nop			; (mov r8, r8)
    df78:	0000dee5 	.word	0x0000dee5
    df7c:	0000f429 	.word	0x0000f429
    df80:	e000ed04 	.word	0xe000ed04
    df84:	0000def1 	.word	0x0000def1

0000df88 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    df88:	b5b0      	push	{r4, r5, r7, lr}
    df8a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    df8c:	4b0a      	ldr	r3, [pc, #40]	; (dfb8 <prvSetupTimerInterrupt+0x30>)
    df8e:	2200      	movs	r2, #0
    df90:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    df92:	4b0a      	ldr	r3, [pc, #40]	; (dfbc <prvSetupTimerInterrupt+0x34>)
    df94:	2200      	movs	r2, #0
    df96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    df98:	4c09      	ldr	r4, [pc, #36]	; (dfc0 <prvSetupTimerInterrupt+0x38>)
    df9a:	4b0a      	ldr	r3, [pc, #40]	; (dfc4 <prvSetupTimerInterrupt+0x3c>)
    df9c:	4798      	blx	r3
    df9e:	4b0a      	ldr	r3, [pc, #40]	; (dfc8 <prvSetupTimerInterrupt+0x40>)
    dfa0:	22fa      	movs	r2, #250	; 0xfa
    dfa2:	0091      	lsls	r1, r2, #2
    dfa4:	4798      	blx	r3
    dfa6:	0003      	movs	r3, r0
    dfa8:	3b01      	subs	r3, #1
    dfaa:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    dfac:	4b02      	ldr	r3, [pc, #8]	; (dfb8 <prvSetupTimerInterrupt+0x30>)
    dfae:	2207      	movs	r2, #7
    dfb0:	601a      	str	r2, [r3, #0]
}
    dfb2:	46c0      	nop			; (mov r8, r8)
    dfb4:	46bd      	mov	sp, r7
    dfb6:	bdb0      	pop	{r4, r5, r7, pc}
    dfb8:	e000e010 	.word	0xe000e010
    dfbc:	e000e018 	.word	0xe000e018
    dfc0:	e000e014 	.word	0xe000e014
    dfc4:	0000dd31 	.word	0x0000dd31
    dfc8:	000154f1 	.word	0x000154f1

0000dfcc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    dfcc:	b580      	push	{r7, lr}
    dfce:	b084      	sub	sp, #16
    dfd0:	af00      	add	r7, sp, #0
    dfd2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    dfd4:	4b07      	ldr	r3, [pc, #28]	; (dff4 <pvPortMalloc+0x28>)
    dfd6:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
    dfd8:	687b      	ldr	r3, [r7, #4]
    dfda:	0018      	movs	r0, r3
    dfdc:	4b06      	ldr	r3, [pc, #24]	; (dff8 <pvPortMalloc+0x2c>)
    dfde:	4798      	blx	r3
    dfe0:	0003      	movs	r3, r0
    dfe2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    dfe4:	4b05      	ldr	r3, [pc, #20]	; (dffc <pvPortMalloc+0x30>)
    dfe6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    dfe8:	68fb      	ldr	r3, [r7, #12]
}
    dfea:	0018      	movs	r0, r3
    dfec:	46bd      	mov	sp, r7
    dfee:	b004      	add	sp, #16
    dff0:	bd80      	pop	{r7, pc}
    dff2:	46c0      	nop			; (mov r8, r8)
    dff4:	0000f2c1 	.word	0x0000f2c1
    dff8:	00017ce5 	.word	0x00017ce5
    dffc:	0000f2d9 	.word	0x0000f2d9

0000e000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    e000:	b580      	push	{r7, lr}
    e002:	b082      	sub	sp, #8
    e004:	af00      	add	r7, sp, #0
    e006:	6078      	str	r0, [r7, #4]
	if( pv )
    e008:	687b      	ldr	r3, [r7, #4]
    e00a:	2b00      	cmp	r3, #0
    e00c:	d007      	beq.n	e01e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
    e00e:	4b06      	ldr	r3, [pc, #24]	; (e028 <vPortFree+0x28>)
    e010:	4798      	blx	r3
		{
			free( pv );
    e012:	687b      	ldr	r3, [r7, #4]
    e014:	0018      	movs	r0, r3
    e016:	4b05      	ldr	r3, [pc, #20]	; (e02c <vPortFree+0x2c>)
    e018:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    e01a:	4b05      	ldr	r3, [pc, #20]	; (e030 <vPortFree+0x30>)
    e01c:	4798      	blx	r3
	}
}
    e01e:	46c0      	nop			; (mov r8, r8)
    e020:	46bd      	mov	sp, r7
    e022:	b002      	add	sp, #8
    e024:	bd80      	pop	{r7, pc}
    e026:	46c0      	nop			; (mov r8, r8)
    e028:	0000f2c1 	.word	0x0000f2c1
    e02c:	00017cf9 	.word	0x00017cf9
    e030:	0000f2d9 	.word	0x0000f2d9

0000e034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    e034:	b580      	push	{r7, lr}
    e036:	b082      	sub	sp, #8
    e038:	af00      	add	r7, sp, #0
    e03a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	3308      	adds	r3, #8
    e040:	001a      	movs	r2, r3
    e042:	687b      	ldr	r3, [r7, #4]
    e044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    e046:	687b      	ldr	r3, [r7, #4]
    e048:	2201      	movs	r2, #1
    e04a:	4252      	negs	r2, r2
    e04c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    e04e:	687b      	ldr	r3, [r7, #4]
    e050:	3308      	adds	r3, #8
    e052:	001a      	movs	r2, r3
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    e058:	687b      	ldr	r3, [r7, #4]
    e05a:	3308      	adds	r3, #8
    e05c:	001a      	movs	r2, r3
    e05e:	687b      	ldr	r3, [r7, #4]
    e060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    e062:	687b      	ldr	r3, [r7, #4]
    e064:	2200      	movs	r2, #0
    e066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    e068:	46c0      	nop			; (mov r8, r8)
    e06a:	46bd      	mov	sp, r7
    e06c:	b002      	add	sp, #8
    e06e:	bd80      	pop	{r7, pc}

0000e070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    e070:	b580      	push	{r7, lr}
    e072:	b082      	sub	sp, #8
    e074:	af00      	add	r7, sp, #0
    e076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    e078:	687b      	ldr	r3, [r7, #4]
    e07a:	2200      	movs	r2, #0
    e07c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    e07e:	46c0      	nop			; (mov r8, r8)
    e080:	46bd      	mov	sp, r7
    e082:	b002      	add	sp, #8
    e084:	bd80      	pop	{r7, pc}

0000e086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    e086:	b580      	push	{r7, lr}
    e088:	b084      	sub	sp, #16
    e08a:	af00      	add	r7, sp, #0
    e08c:	6078      	str	r0, [r7, #4]
    e08e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	685b      	ldr	r3, [r3, #4]
    e094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    e096:	683b      	ldr	r3, [r7, #0]
    e098:	68fa      	ldr	r2, [r7, #12]
    e09a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    e09c:	68fb      	ldr	r3, [r7, #12]
    e09e:	689a      	ldr	r2, [r3, #8]
    e0a0:	683b      	ldr	r3, [r7, #0]
    e0a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    e0a4:	68fb      	ldr	r3, [r7, #12]
    e0a6:	689b      	ldr	r3, [r3, #8]
    e0a8:	683a      	ldr	r2, [r7, #0]
    e0aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    e0ac:	68fb      	ldr	r3, [r7, #12]
    e0ae:	683a      	ldr	r2, [r7, #0]
    e0b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    e0b2:	683b      	ldr	r3, [r7, #0]
    e0b4:	687a      	ldr	r2, [r7, #4]
    e0b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    e0b8:	687b      	ldr	r3, [r7, #4]
    e0ba:	681b      	ldr	r3, [r3, #0]
    e0bc:	1c5a      	adds	r2, r3, #1
    e0be:	687b      	ldr	r3, [r7, #4]
    e0c0:	601a      	str	r2, [r3, #0]
}
    e0c2:	46c0      	nop			; (mov r8, r8)
    e0c4:	46bd      	mov	sp, r7
    e0c6:	b004      	add	sp, #16
    e0c8:	bd80      	pop	{r7, pc}

0000e0ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    e0ca:	b580      	push	{r7, lr}
    e0cc:	b084      	sub	sp, #16
    e0ce:	af00      	add	r7, sp, #0
    e0d0:	6078      	str	r0, [r7, #4]
    e0d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    e0d4:	683b      	ldr	r3, [r7, #0]
    e0d6:	681b      	ldr	r3, [r3, #0]
    e0d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    e0da:	68bb      	ldr	r3, [r7, #8]
    e0dc:	3301      	adds	r3, #1
    e0de:	d103      	bne.n	e0e8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    e0e0:	687b      	ldr	r3, [r7, #4]
    e0e2:	691b      	ldr	r3, [r3, #16]
    e0e4:	60fb      	str	r3, [r7, #12]
    e0e6:	e00c      	b.n	e102 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    e0e8:	687b      	ldr	r3, [r7, #4]
    e0ea:	3308      	adds	r3, #8
    e0ec:	60fb      	str	r3, [r7, #12]
    e0ee:	e002      	b.n	e0f6 <vListInsert+0x2c>
    e0f0:	68fb      	ldr	r3, [r7, #12]
    e0f2:	685b      	ldr	r3, [r3, #4]
    e0f4:	60fb      	str	r3, [r7, #12]
    e0f6:	68fb      	ldr	r3, [r7, #12]
    e0f8:	685b      	ldr	r3, [r3, #4]
    e0fa:	681a      	ldr	r2, [r3, #0]
    e0fc:	68bb      	ldr	r3, [r7, #8]
    e0fe:	429a      	cmp	r2, r3
    e100:	d9f6      	bls.n	e0f0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    e102:	68fb      	ldr	r3, [r7, #12]
    e104:	685a      	ldr	r2, [r3, #4]
    e106:	683b      	ldr	r3, [r7, #0]
    e108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    e10a:	683b      	ldr	r3, [r7, #0]
    e10c:	685b      	ldr	r3, [r3, #4]
    e10e:	683a      	ldr	r2, [r7, #0]
    e110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    e112:	683b      	ldr	r3, [r7, #0]
    e114:	68fa      	ldr	r2, [r7, #12]
    e116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    e118:	68fb      	ldr	r3, [r7, #12]
    e11a:	683a      	ldr	r2, [r7, #0]
    e11c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    e11e:	683b      	ldr	r3, [r7, #0]
    e120:	687a      	ldr	r2, [r7, #4]
    e122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	681b      	ldr	r3, [r3, #0]
    e128:	1c5a      	adds	r2, r3, #1
    e12a:	687b      	ldr	r3, [r7, #4]
    e12c:	601a      	str	r2, [r3, #0]
}
    e12e:	46c0      	nop			; (mov r8, r8)
    e130:	46bd      	mov	sp, r7
    e132:	b004      	add	sp, #16
    e134:	bd80      	pop	{r7, pc}

0000e136 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    e136:	b580      	push	{r7, lr}
    e138:	b084      	sub	sp, #16
    e13a:	af00      	add	r7, sp, #0
    e13c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    e13e:	687b      	ldr	r3, [r7, #4]
    e140:	691b      	ldr	r3, [r3, #16]
    e142:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	685b      	ldr	r3, [r3, #4]
    e148:	687a      	ldr	r2, [r7, #4]
    e14a:	6892      	ldr	r2, [r2, #8]
    e14c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    e14e:	687b      	ldr	r3, [r7, #4]
    e150:	689b      	ldr	r3, [r3, #8]
    e152:	687a      	ldr	r2, [r7, #4]
    e154:	6852      	ldr	r2, [r2, #4]
    e156:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    e158:	68fb      	ldr	r3, [r7, #12]
    e15a:	685a      	ldr	r2, [r3, #4]
    e15c:	687b      	ldr	r3, [r7, #4]
    e15e:	429a      	cmp	r2, r3
    e160:	d103      	bne.n	e16a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    e162:	687b      	ldr	r3, [r7, #4]
    e164:	689a      	ldr	r2, [r3, #8]
    e166:	68fb      	ldr	r3, [r7, #12]
    e168:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    e16a:	687b      	ldr	r3, [r7, #4]
    e16c:	2200      	movs	r2, #0
    e16e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    e170:	68fb      	ldr	r3, [r7, #12]
    e172:	681b      	ldr	r3, [r3, #0]
    e174:	1e5a      	subs	r2, r3, #1
    e176:	68fb      	ldr	r3, [r7, #12]
    e178:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    e17a:	68fb      	ldr	r3, [r7, #12]
    e17c:	681b      	ldr	r3, [r3, #0]
}
    e17e:	0018      	movs	r0, r3
    e180:	46bd      	mov	sp, r7
    e182:	b004      	add	sp, #16
    e184:	bd80      	pop	{r7, pc}
	...

0000e188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    e188:	b580      	push	{r7, lr}
    e18a:	b084      	sub	sp, #16
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
    e190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e192:	687b      	ldr	r3, [r7, #4]
    e194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    e196:	68fb      	ldr	r3, [r7, #12]
    e198:	2b00      	cmp	r3, #0
    e19a:	d101      	bne.n	e1a0 <xQueueGenericReset+0x18>
    e19c:	b672      	cpsid	i
    e19e:	e7fe      	b.n	e19e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    e1a0:	4b23      	ldr	r3, [pc, #140]	; (e230 <xQueueGenericReset+0xa8>)
    e1a2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    e1a4:	68fb      	ldr	r3, [r7, #12]
    e1a6:	681a      	ldr	r2, [r3, #0]
    e1a8:	68fb      	ldr	r3, [r7, #12]
    e1aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    e1ac:	68fb      	ldr	r3, [r7, #12]
    e1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e1b0:	434b      	muls	r3, r1
    e1b2:	18d2      	adds	r2, r2, r3
    e1b4:	68fb      	ldr	r3, [r7, #12]
    e1b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    e1b8:	68fb      	ldr	r3, [r7, #12]
    e1ba:	2200      	movs	r2, #0
    e1bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    e1be:	68fb      	ldr	r3, [r7, #12]
    e1c0:	681a      	ldr	r2, [r3, #0]
    e1c2:	68fb      	ldr	r3, [r7, #12]
    e1c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    e1c6:	68fb      	ldr	r3, [r7, #12]
    e1c8:	681a      	ldr	r2, [r3, #0]
    e1ca:	68fb      	ldr	r3, [r7, #12]
    e1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e1ce:	1e59      	subs	r1, r3, #1
    e1d0:	68fb      	ldr	r3, [r7, #12]
    e1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e1d4:	434b      	muls	r3, r1
    e1d6:	18d2      	adds	r2, r2, r3
    e1d8:	68fb      	ldr	r3, [r7, #12]
    e1da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    e1dc:	68fb      	ldr	r3, [r7, #12]
    e1de:	2244      	movs	r2, #68	; 0x44
    e1e0:	21ff      	movs	r1, #255	; 0xff
    e1e2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    e1e4:	68fb      	ldr	r3, [r7, #12]
    e1e6:	2245      	movs	r2, #69	; 0x45
    e1e8:	21ff      	movs	r1, #255	; 0xff
    e1ea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    e1ec:	683b      	ldr	r3, [r7, #0]
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	d10d      	bne.n	e20e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e1f2:	68fb      	ldr	r3, [r7, #12]
    e1f4:	691b      	ldr	r3, [r3, #16]
    e1f6:	2b00      	cmp	r3, #0
    e1f8:	d013      	beq.n	e222 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e1fa:	68fb      	ldr	r3, [r7, #12]
    e1fc:	3310      	adds	r3, #16
    e1fe:	0018      	movs	r0, r3
    e200:	4b0c      	ldr	r3, [pc, #48]	; (e234 <xQueueGenericReset+0xac>)
    e202:	4798      	blx	r3
    e204:	1e03      	subs	r3, r0, #0
    e206:	d00c      	beq.n	e222 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    e208:	4b0b      	ldr	r3, [pc, #44]	; (e238 <xQueueGenericReset+0xb0>)
    e20a:	4798      	blx	r3
    e20c:	e009      	b.n	e222 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    e20e:	68fb      	ldr	r3, [r7, #12]
    e210:	3310      	adds	r3, #16
    e212:	0018      	movs	r0, r3
    e214:	4b09      	ldr	r3, [pc, #36]	; (e23c <xQueueGenericReset+0xb4>)
    e216:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	3324      	adds	r3, #36	; 0x24
    e21c:	0018      	movs	r0, r3
    e21e:	4b07      	ldr	r3, [pc, #28]	; (e23c <xQueueGenericReset+0xb4>)
    e220:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    e222:	4b07      	ldr	r3, [pc, #28]	; (e240 <xQueueGenericReset+0xb8>)
    e224:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    e226:	2301      	movs	r3, #1
}
    e228:	0018      	movs	r0, r3
    e22a:	46bd      	mov	sp, r7
    e22c:	b004      	add	sp, #16
    e22e:	bd80      	pop	{r7, pc}
    e230:	0000de91 	.word	0x0000de91
    e234:	0000f6d9 	.word	0x0000f6d9
    e238:	0000de71 	.word	0x0000de71
    e23c:	0000e035 	.word	0x0000e035
    e240:	0000deb5 	.word	0x0000deb5

0000e244 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    e244:	b590      	push	{r4, r7, lr}
    e246:	b08b      	sub	sp, #44	; 0x2c
    e248:	af02      	add	r7, sp, #8
    e24a:	60f8      	str	r0, [r7, #12]
    e24c:	60b9      	str	r1, [r7, #8]
    e24e:	1dfb      	adds	r3, r7, #7
    e250:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    e252:	68fb      	ldr	r3, [r7, #12]
    e254:	2b00      	cmp	r3, #0
    e256:	d101      	bne.n	e25c <xQueueGenericCreate+0x18>
    e258:	b672      	cpsid	i
    e25a:	e7fe      	b.n	e25a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    e25c:	68bb      	ldr	r3, [r7, #8]
    e25e:	2b00      	cmp	r3, #0
    e260:	d102      	bne.n	e268 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    e262:	2300      	movs	r3, #0
    e264:	61fb      	str	r3, [r7, #28]
    e266:	e003      	b.n	e270 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e268:	68fb      	ldr	r3, [r7, #12]
    e26a:	68ba      	ldr	r2, [r7, #8]
    e26c:	4353      	muls	r3, r2
    e26e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    e270:	69fb      	ldr	r3, [r7, #28]
    e272:	334c      	adds	r3, #76	; 0x4c
    e274:	0018      	movs	r0, r3
    e276:	4b0c      	ldr	r3, [pc, #48]	; (e2a8 <xQueueGenericCreate+0x64>)
    e278:	4798      	blx	r3
    e27a:	0003      	movs	r3, r0
    e27c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    e27e:	69bb      	ldr	r3, [r7, #24]
    e280:	2b00      	cmp	r3, #0
    e282:	d00c      	beq.n	e29e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    e284:	69bb      	ldr	r3, [r7, #24]
    e286:	334c      	adds	r3, #76	; 0x4c
    e288:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    e28a:	1dfb      	adds	r3, r7, #7
    e28c:	781c      	ldrb	r4, [r3, #0]
    e28e:	697a      	ldr	r2, [r7, #20]
    e290:	68b9      	ldr	r1, [r7, #8]
    e292:	68f8      	ldr	r0, [r7, #12]
    e294:	69bb      	ldr	r3, [r7, #24]
    e296:	9300      	str	r3, [sp, #0]
    e298:	0023      	movs	r3, r4
    e29a:	4c04      	ldr	r4, [pc, #16]	; (e2ac <xQueueGenericCreate+0x68>)
    e29c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    e29e:	69bb      	ldr	r3, [r7, #24]
	}
    e2a0:	0018      	movs	r0, r3
    e2a2:	46bd      	mov	sp, r7
    e2a4:	b009      	add	sp, #36	; 0x24
    e2a6:	bd90      	pop	{r4, r7, pc}
    e2a8:	0000dfcd 	.word	0x0000dfcd
    e2ac:	0000e2b1 	.word	0x0000e2b1

0000e2b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    e2b0:	b580      	push	{r7, lr}
    e2b2:	b084      	sub	sp, #16
    e2b4:	af00      	add	r7, sp, #0
    e2b6:	60f8      	str	r0, [r7, #12]
    e2b8:	60b9      	str	r1, [r7, #8]
    e2ba:	607a      	str	r2, [r7, #4]
    e2bc:	001a      	movs	r2, r3
    e2be:	1cfb      	adds	r3, r7, #3
    e2c0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    e2c2:	68bb      	ldr	r3, [r7, #8]
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d103      	bne.n	e2d0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    e2c8:	69bb      	ldr	r3, [r7, #24]
    e2ca:	69ba      	ldr	r2, [r7, #24]
    e2cc:	601a      	str	r2, [r3, #0]
    e2ce:	e002      	b.n	e2d6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    e2d0:	69bb      	ldr	r3, [r7, #24]
    e2d2:	687a      	ldr	r2, [r7, #4]
    e2d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    e2d6:	69bb      	ldr	r3, [r7, #24]
    e2d8:	68fa      	ldr	r2, [r7, #12]
    e2da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    e2dc:	69bb      	ldr	r3, [r7, #24]
    e2de:	68ba      	ldr	r2, [r7, #8]
    e2e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    e2e2:	69bb      	ldr	r3, [r7, #24]
    e2e4:	2101      	movs	r1, #1
    e2e6:	0018      	movs	r0, r3
    e2e8:	4b04      	ldr	r3, [pc, #16]	; (e2fc <prvInitialiseNewQueue+0x4c>)
    e2ea:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    e2ec:	69bb      	ldr	r3, [r7, #24]
    e2ee:	2200      	movs	r2, #0
    e2f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    e2f2:	46c0      	nop			; (mov r8, r8)
    e2f4:	46bd      	mov	sp, r7
    e2f6:	b004      	add	sp, #16
    e2f8:	bd80      	pop	{r7, pc}
    e2fa:	46c0      	nop			; (mov r8, r8)
    e2fc:	0000e189 	.word	0x0000e189

0000e300 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    e300:	b580      	push	{r7, lr}
    e302:	b08a      	sub	sp, #40	; 0x28
    e304:	af00      	add	r7, sp, #0
    e306:	60f8      	str	r0, [r7, #12]
    e308:	60b9      	str	r1, [r7, #8]
    e30a:	607a      	str	r2, [r7, #4]
    e30c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    e30e:	2300      	movs	r3, #0
    e310:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e312:	68fb      	ldr	r3, [r7, #12]
    e314:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    e316:	6a3b      	ldr	r3, [r7, #32]
    e318:	2b00      	cmp	r3, #0
    e31a:	d101      	bne.n	e320 <xQueueGenericSend+0x20>
    e31c:	b672      	cpsid	i
    e31e:	e7fe      	b.n	e31e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e320:	68bb      	ldr	r3, [r7, #8]
    e322:	2b00      	cmp	r3, #0
    e324:	d103      	bne.n	e32e <xQueueGenericSend+0x2e>
    e326:	6a3b      	ldr	r3, [r7, #32]
    e328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e32a:	2b00      	cmp	r3, #0
    e32c:	d101      	bne.n	e332 <xQueueGenericSend+0x32>
    e32e:	2301      	movs	r3, #1
    e330:	e000      	b.n	e334 <xQueueGenericSend+0x34>
    e332:	2300      	movs	r3, #0
    e334:	2b00      	cmp	r3, #0
    e336:	d101      	bne.n	e33c <xQueueGenericSend+0x3c>
    e338:	b672      	cpsid	i
    e33a:	e7fe      	b.n	e33a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e33c:	683b      	ldr	r3, [r7, #0]
    e33e:	2b02      	cmp	r3, #2
    e340:	d103      	bne.n	e34a <xQueueGenericSend+0x4a>
    e342:	6a3b      	ldr	r3, [r7, #32]
    e344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e346:	2b01      	cmp	r3, #1
    e348:	d101      	bne.n	e34e <xQueueGenericSend+0x4e>
    e34a:	2301      	movs	r3, #1
    e34c:	e000      	b.n	e350 <xQueueGenericSend+0x50>
    e34e:	2300      	movs	r3, #0
    e350:	2b00      	cmp	r3, #0
    e352:	d101      	bne.n	e358 <xQueueGenericSend+0x58>
    e354:	b672      	cpsid	i
    e356:	e7fe      	b.n	e356 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e358:	4b53      	ldr	r3, [pc, #332]	; (e4a8 <xQueueGenericSend+0x1a8>)
    e35a:	4798      	blx	r3
    e35c:	1e03      	subs	r3, r0, #0
    e35e:	d102      	bne.n	e366 <xQueueGenericSend+0x66>
    e360:	687b      	ldr	r3, [r7, #4]
    e362:	2b00      	cmp	r3, #0
    e364:	d101      	bne.n	e36a <xQueueGenericSend+0x6a>
    e366:	2301      	movs	r3, #1
    e368:	e000      	b.n	e36c <xQueueGenericSend+0x6c>
    e36a:	2300      	movs	r3, #0
    e36c:	2b00      	cmp	r3, #0
    e36e:	d101      	bne.n	e374 <xQueueGenericSend+0x74>
    e370:	b672      	cpsid	i
    e372:	e7fe      	b.n	e372 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    e374:	4b4d      	ldr	r3, [pc, #308]	; (e4ac <xQueueGenericSend+0x1ac>)
    e376:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e378:	6a3b      	ldr	r3, [r7, #32]
    e37a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e37c:	6a3b      	ldr	r3, [r7, #32]
    e37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e380:	429a      	cmp	r2, r3
    e382:	d302      	bcc.n	e38a <xQueueGenericSend+0x8a>
    e384:	683b      	ldr	r3, [r7, #0]
    e386:	2b02      	cmp	r3, #2
    e388:	d12d      	bne.n	e3e6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e38a:	683a      	ldr	r2, [r7, #0]
    e38c:	68b9      	ldr	r1, [r7, #8]
    e38e:	6a3b      	ldr	r3, [r7, #32]
    e390:	0018      	movs	r0, r3
    e392:	4b47      	ldr	r3, [pc, #284]	; (e4b0 <xQueueGenericSend+0x1b0>)
    e394:	4798      	blx	r3
    e396:	0003      	movs	r3, r0
    e398:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e39a:	6a3b      	ldr	r3, [r7, #32]
    e39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d00a      	beq.n	e3b8 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e3a2:	683a      	ldr	r2, [r7, #0]
    e3a4:	6a3b      	ldr	r3, [r7, #32]
    e3a6:	0011      	movs	r1, r2
    e3a8:	0018      	movs	r0, r3
    e3aa:	4b42      	ldr	r3, [pc, #264]	; (e4b4 <xQueueGenericSend+0x1b4>)
    e3ac:	4798      	blx	r3
    e3ae:	1e03      	subs	r3, r0, #0
    e3b0:	d015      	beq.n	e3de <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    e3b2:	4b41      	ldr	r3, [pc, #260]	; (e4b8 <xQueueGenericSend+0x1b8>)
    e3b4:	4798      	blx	r3
    e3b6:	e012      	b.n	e3de <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e3b8:	6a3b      	ldr	r3, [r7, #32]
    e3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e3bc:	2b00      	cmp	r3, #0
    e3be:	d009      	beq.n	e3d4 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e3c0:	6a3b      	ldr	r3, [r7, #32]
    e3c2:	3324      	adds	r3, #36	; 0x24
    e3c4:	0018      	movs	r0, r3
    e3c6:	4b3d      	ldr	r3, [pc, #244]	; (e4bc <xQueueGenericSend+0x1bc>)
    e3c8:	4798      	blx	r3
    e3ca:	1e03      	subs	r3, r0, #0
    e3cc:	d007      	beq.n	e3de <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    e3ce:	4b3a      	ldr	r3, [pc, #232]	; (e4b8 <xQueueGenericSend+0x1b8>)
    e3d0:	4798      	blx	r3
    e3d2:	e004      	b.n	e3de <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    e3d4:	69fb      	ldr	r3, [r7, #28]
    e3d6:	2b00      	cmp	r3, #0
    e3d8:	d001      	beq.n	e3de <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    e3da:	4b37      	ldr	r3, [pc, #220]	; (e4b8 <xQueueGenericSend+0x1b8>)
    e3dc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    e3de:	4b38      	ldr	r3, [pc, #224]	; (e4c0 <xQueueGenericSend+0x1c0>)
    e3e0:	4798      	blx	r3
				return pdPASS;
    e3e2:	2301      	movs	r3, #1
    e3e4:	e05c      	b.n	e4a0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e3e6:	687b      	ldr	r3, [r7, #4]
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d103      	bne.n	e3f4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e3ec:	4b34      	ldr	r3, [pc, #208]	; (e4c0 <xQueueGenericSend+0x1c0>)
    e3ee:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    e3f0:	2300      	movs	r3, #0
    e3f2:	e055      	b.n	e4a0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d106      	bne.n	e408 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e3fa:	2314      	movs	r3, #20
    e3fc:	18fb      	adds	r3, r7, r3
    e3fe:	0018      	movs	r0, r3
    e400:	4b30      	ldr	r3, [pc, #192]	; (e4c4 <xQueueGenericSend+0x1c4>)
    e402:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e404:	2301      	movs	r3, #1
    e406:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e408:	4b2d      	ldr	r3, [pc, #180]	; (e4c0 <xQueueGenericSend+0x1c0>)
    e40a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e40c:	4b2e      	ldr	r3, [pc, #184]	; (e4c8 <xQueueGenericSend+0x1c8>)
    e40e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e410:	4b26      	ldr	r3, [pc, #152]	; (e4ac <xQueueGenericSend+0x1ac>)
    e412:	4798      	blx	r3
    e414:	6a3b      	ldr	r3, [r7, #32]
    e416:	2244      	movs	r2, #68	; 0x44
    e418:	5c9b      	ldrb	r3, [r3, r2]
    e41a:	b25b      	sxtb	r3, r3
    e41c:	3301      	adds	r3, #1
    e41e:	d103      	bne.n	e428 <xQueueGenericSend+0x128>
    e420:	6a3b      	ldr	r3, [r7, #32]
    e422:	2244      	movs	r2, #68	; 0x44
    e424:	2100      	movs	r1, #0
    e426:	5499      	strb	r1, [r3, r2]
    e428:	6a3b      	ldr	r3, [r7, #32]
    e42a:	2245      	movs	r2, #69	; 0x45
    e42c:	5c9b      	ldrb	r3, [r3, r2]
    e42e:	b25b      	sxtb	r3, r3
    e430:	3301      	adds	r3, #1
    e432:	d103      	bne.n	e43c <xQueueGenericSend+0x13c>
    e434:	6a3b      	ldr	r3, [r7, #32]
    e436:	2245      	movs	r2, #69	; 0x45
    e438:	2100      	movs	r1, #0
    e43a:	5499      	strb	r1, [r3, r2]
    e43c:	4b20      	ldr	r3, [pc, #128]	; (e4c0 <xQueueGenericSend+0x1c0>)
    e43e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e440:	1d3a      	adds	r2, r7, #4
    e442:	2314      	movs	r3, #20
    e444:	18fb      	adds	r3, r7, r3
    e446:	0011      	movs	r1, r2
    e448:	0018      	movs	r0, r3
    e44a:	4b20      	ldr	r3, [pc, #128]	; (e4cc <xQueueGenericSend+0x1cc>)
    e44c:	4798      	blx	r3
    e44e:	1e03      	subs	r3, r0, #0
    e450:	d11f      	bne.n	e492 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    e452:	6a3b      	ldr	r3, [r7, #32]
    e454:	0018      	movs	r0, r3
    e456:	4b1e      	ldr	r3, [pc, #120]	; (e4d0 <xQueueGenericSend+0x1d0>)
    e458:	4798      	blx	r3
    e45a:	1e03      	subs	r3, r0, #0
    e45c:	d012      	beq.n	e484 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    e45e:	6a3b      	ldr	r3, [r7, #32]
    e460:	3310      	adds	r3, #16
    e462:	687a      	ldr	r2, [r7, #4]
    e464:	0011      	movs	r1, r2
    e466:	0018      	movs	r0, r3
    e468:	4b1a      	ldr	r3, [pc, #104]	; (e4d4 <xQueueGenericSend+0x1d4>)
    e46a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    e46c:	6a3b      	ldr	r3, [r7, #32]
    e46e:	0018      	movs	r0, r3
    e470:	4b19      	ldr	r3, [pc, #100]	; (e4d8 <xQueueGenericSend+0x1d8>)
    e472:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    e474:	4b19      	ldr	r3, [pc, #100]	; (e4dc <xQueueGenericSend+0x1dc>)
    e476:	4798      	blx	r3
    e478:	1e03      	subs	r3, r0, #0
    e47a:	d000      	beq.n	e47e <xQueueGenericSend+0x17e>
    e47c:	e77a      	b.n	e374 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    e47e:	4b0e      	ldr	r3, [pc, #56]	; (e4b8 <xQueueGenericSend+0x1b8>)
    e480:	4798      	blx	r3
    e482:	e777      	b.n	e374 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    e484:	6a3b      	ldr	r3, [r7, #32]
    e486:	0018      	movs	r0, r3
    e488:	4b13      	ldr	r3, [pc, #76]	; (e4d8 <xQueueGenericSend+0x1d8>)
    e48a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e48c:	4b13      	ldr	r3, [pc, #76]	; (e4dc <xQueueGenericSend+0x1dc>)
    e48e:	4798      	blx	r3
    e490:	e770      	b.n	e374 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    e492:	6a3b      	ldr	r3, [r7, #32]
    e494:	0018      	movs	r0, r3
    e496:	4b10      	ldr	r3, [pc, #64]	; (e4d8 <xQueueGenericSend+0x1d8>)
    e498:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e49a:	4b10      	ldr	r3, [pc, #64]	; (e4dc <xQueueGenericSend+0x1dc>)
    e49c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    e49e:	2300      	movs	r3, #0
		}
	}
}
    e4a0:	0018      	movs	r0, r3
    e4a2:	46bd      	mov	sp, r7
    e4a4:	b00a      	add	sp, #40	; 0x28
    e4a6:	bd80      	pop	{r7, pc}
    e4a8:	0000fa11 	.word	0x0000fa11
    e4ac:	0000de91 	.word	0x0000de91
    e4b0:	0000e9c1 	.word	0x0000e9c1
    e4b4:	0000ecc5 	.word	0x0000ecc5
    e4b8:	0000de71 	.word	0x0000de71
    e4bc:	0000f6d9 	.word	0x0000f6d9
    e4c0:	0000deb5 	.word	0x0000deb5
    e4c4:	0000f799 	.word	0x0000f799
    e4c8:	0000f2c1 	.word	0x0000f2c1
    e4cc:	0000f7c1 	.word	0x0000f7c1
    e4d0:	0000ec15 	.word	0x0000ec15
    e4d4:	0000f641 	.word	0x0000f641
    e4d8:	0000eaf1 	.word	0x0000eaf1
    e4dc:	0000f2d9 	.word	0x0000f2d9

0000e4e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    e4e0:	b580      	push	{r7, lr}
    e4e2:	b088      	sub	sp, #32
    e4e4:	af00      	add	r7, sp, #0
    e4e6:	60f8      	str	r0, [r7, #12]
    e4e8:	60b9      	str	r1, [r7, #8]
    e4ea:	607a      	str	r2, [r7, #4]
    e4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e4ee:	68fb      	ldr	r3, [r7, #12]
    e4f0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    e4f2:	69bb      	ldr	r3, [r7, #24]
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d101      	bne.n	e4fc <xQueueGenericSendFromISR+0x1c>
    e4f8:	b672      	cpsid	i
    e4fa:	e7fe      	b.n	e4fa <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e4fc:	68bb      	ldr	r3, [r7, #8]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d103      	bne.n	e50a <xQueueGenericSendFromISR+0x2a>
    e502:	69bb      	ldr	r3, [r7, #24]
    e504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e506:	2b00      	cmp	r3, #0
    e508:	d101      	bne.n	e50e <xQueueGenericSendFromISR+0x2e>
    e50a:	2301      	movs	r3, #1
    e50c:	e000      	b.n	e510 <xQueueGenericSendFromISR+0x30>
    e50e:	2300      	movs	r3, #0
    e510:	2b00      	cmp	r3, #0
    e512:	d101      	bne.n	e518 <xQueueGenericSendFromISR+0x38>
    e514:	b672      	cpsid	i
    e516:	e7fe      	b.n	e516 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e518:	683b      	ldr	r3, [r7, #0]
    e51a:	2b02      	cmp	r3, #2
    e51c:	d103      	bne.n	e526 <xQueueGenericSendFromISR+0x46>
    e51e:	69bb      	ldr	r3, [r7, #24]
    e520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e522:	2b01      	cmp	r3, #1
    e524:	d101      	bne.n	e52a <xQueueGenericSendFromISR+0x4a>
    e526:	2301      	movs	r3, #1
    e528:	e000      	b.n	e52c <xQueueGenericSendFromISR+0x4c>
    e52a:	2300      	movs	r3, #0
    e52c:	2b00      	cmp	r3, #0
    e52e:	d101      	bne.n	e534 <xQueueGenericSendFromISR+0x54>
    e530:	b672      	cpsid	i
    e532:	e7fe      	b.n	e532 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    e534:	4b2d      	ldr	r3, [pc, #180]	; (e5ec <xQueueGenericSendFromISR+0x10c>)
    e536:	4798      	blx	r3
    e538:	0003      	movs	r3, r0
    e53a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e53c:	69bb      	ldr	r3, [r7, #24]
    e53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e540:	69bb      	ldr	r3, [r7, #24]
    e542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e544:	429a      	cmp	r2, r3
    e546:	d302      	bcc.n	e54e <xQueueGenericSendFromISR+0x6e>
    e548:	683b      	ldr	r3, [r7, #0]
    e54a:	2b02      	cmp	r3, #2
    e54c:	d142      	bne.n	e5d4 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    e54e:	2313      	movs	r3, #19
    e550:	18fb      	adds	r3, r7, r3
    e552:	69ba      	ldr	r2, [r7, #24]
    e554:	2145      	movs	r1, #69	; 0x45
    e556:	5c52      	ldrb	r2, [r2, r1]
    e558:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e55a:	683a      	ldr	r2, [r7, #0]
    e55c:	68b9      	ldr	r1, [r7, #8]
    e55e:	69bb      	ldr	r3, [r7, #24]
    e560:	0018      	movs	r0, r3
    e562:	4b23      	ldr	r3, [pc, #140]	; (e5f0 <xQueueGenericSendFromISR+0x110>)
    e564:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    e566:	2313      	movs	r3, #19
    e568:	18fb      	adds	r3, r7, r3
    e56a:	781b      	ldrb	r3, [r3, #0]
    e56c:	b25b      	sxtb	r3, r3
    e56e:	3301      	adds	r3, #1
    e570:	d124      	bne.n	e5bc <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e572:	69bb      	ldr	r3, [r7, #24]
    e574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e576:	2b00      	cmp	r3, #0
    e578:	d00e      	beq.n	e598 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e57a:	683a      	ldr	r2, [r7, #0]
    e57c:	69bb      	ldr	r3, [r7, #24]
    e57e:	0011      	movs	r1, r2
    e580:	0018      	movs	r0, r3
    e582:	4b1c      	ldr	r3, [pc, #112]	; (e5f4 <xQueueGenericSendFromISR+0x114>)
    e584:	4798      	blx	r3
    e586:	1e03      	subs	r3, r0, #0
    e588:	d021      	beq.n	e5ce <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    e58a:	687b      	ldr	r3, [r7, #4]
    e58c:	2b00      	cmp	r3, #0
    e58e:	d01e      	beq.n	e5ce <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    e590:	687b      	ldr	r3, [r7, #4]
    e592:	2201      	movs	r2, #1
    e594:	601a      	str	r2, [r3, #0]
    e596:	e01a      	b.n	e5ce <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e598:	69bb      	ldr	r3, [r7, #24]
    e59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e59c:	2b00      	cmp	r3, #0
    e59e:	d016      	beq.n	e5ce <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e5a0:	69bb      	ldr	r3, [r7, #24]
    e5a2:	3324      	adds	r3, #36	; 0x24
    e5a4:	0018      	movs	r0, r3
    e5a6:	4b14      	ldr	r3, [pc, #80]	; (e5f8 <xQueueGenericSendFromISR+0x118>)
    e5a8:	4798      	blx	r3
    e5aa:	1e03      	subs	r3, r0, #0
    e5ac:	d00f      	beq.n	e5ce <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d00c      	beq.n	e5ce <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	2201      	movs	r2, #1
    e5b8:	601a      	str	r2, [r3, #0]
    e5ba:	e008      	b.n	e5ce <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    e5bc:	2313      	movs	r3, #19
    e5be:	18fb      	adds	r3, r7, r3
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	3301      	adds	r3, #1
    e5c4:	b2db      	uxtb	r3, r3
    e5c6:	b259      	sxtb	r1, r3
    e5c8:	69bb      	ldr	r3, [r7, #24]
    e5ca:	2245      	movs	r2, #69	; 0x45
    e5cc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    e5ce:	2301      	movs	r3, #1
    e5d0:	61fb      	str	r3, [r7, #28]
		{
    e5d2:	e001      	b.n	e5d8 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    e5d4:	2300      	movs	r3, #0
    e5d6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    e5d8:	697b      	ldr	r3, [r7, #20]
    e5da:	0018      	movs	r0, r3
    e5dc:	4b07      	ldr	r3, [pc, #28]	; (e5fc <xQueueGenericSendFromISR+0x11c>)
    e5de:	4798      	blx	r3

	return xReturn;
    e5e0:	69fb      	ldr	r3, [r7, #28]
}
    e5e2:	0018      	movs	r0, r3
    e5e4:	46bd      	mov	sp, r7
    e5e6:	b008      	add	sp, #32
    e5e8:	bd80      	pop	{r7, pc}
    e5ea:	46c0      	nop			; (mov r8, r8)
    e5ec:	0000dee5 	.word	0x0000dee5
    e5f0:	0000e9c1 	.word	0x0000e9c1
    e5f4:	0000ecc5 	.word	0x0000ecc5
    e5f8:	0000f6d9 	.word	0x0000f6d9
    e5fc:	0000def1 	.word	0x0000def1

0000e600 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    e600:	b580      	push	{r7, lr}
    e602:	b08a      	sub	sp, #40	; 0x28
    e604:	af00      	add	r7, sp, #0
    e606:	60f8      	str	r0, [r7, #12]
    e608:	60b9      	str	r1, [r7, #8]
    e60a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    e60c:	2300      	movs	r3, #0
    e60e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e610:	68fb      	ldr	r3, [r7, #12]
    e612:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e614:	6a3b      	ldr	r3, [r7, #32]
    e616:	2b00      	cmp	r3, #0
    e618:	d101      	bne.n	e61e <xQueueReceive+0x1e>
    e61a:	b672      	cpsid	i
    e61c:	e7fe      	b.n	e61c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e61e:	68bb      	ldr	r3, [r7, #8]
    e620:	2b00      	cmp	r3, #0
    e622:	d103      	bne.n	e62c <xQueueReceive+0x2c>
    e624:	6a3b      	ldr	r3, [r7, #32]
    e626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e628:	2b00      	cmp	r3, #0
    e62a:	d101      	bne.n	e630 <xQueueReceive+0x30>
    e62c:	2301      	movs	r3, #1
    e62e:	e000      	b.n	e632 <xQueueReceive+0x32>
    e630:	2300      	movs	r3, #0
    e632:	2b00      	cmp	r3, #0
    e634:	d101      	bne.n	e63a <xQueueReceive+0x3a>
    e636:	b672      	cpsid	i
    e638:	e7fe      	b.n	e638 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e63a:	4b4c      	ldr	r3, [pc, #304]	; (e76c <xQueueReceive+0x16c>)
    e63c:	4798      	blx	r3
    e63e:	1e03      	subs	r3, r0, #0
    e640:	d102      	bne.n	e648 <xQueueReceive+0x48>
    e642:	687b      	ldr	r3, [r7, #4]
    e644:	2b00      	cmp	r3, #0
    e646:	d101      	bne.n	e64c <xQueueReceive+0x4c>
    e648:	2301      	movs	r3, #1
    e64a:	e000      	b.n	e64e <xQueueReceive+0x4e>
    e64c:	2300      	movs	r3, #0
    e64e:	2b00      	cmp	r3, #0
    e650:	d101      	bne.n	e656 <xQueueReceive+0x56>
    e652:	b672      	cpsid	i
    e654:	e7fe      	b.n	e654 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e656:	4b46      	ldr	r3, [pc, #280]	; (e770 <xQueueReceive+0x170>)
    e658:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e65a:	6a3b      	ldr	r3, [r7, #32]
    e65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e65e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e660:	69fb      	ldr	r3, [r7, #28]
    e662:	2b00      	cmp	r3, #0
    e664:	d01a      	beq.n	e69c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    e666:	68ba      	ldr	r2, [r7, #8]
    e668:	6a3b      	ldr	r3, [r7, #32]
    e66a:	0011      	movs	r1, r2
    e66c:	0018      	movs	r0, r3
    e66e:	4b41      	ldr	r3, [pc, #260]	; (e774 <xQueueReceive+0x174>)
    e670:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    e672:	69fb      	ldr	r3, [r7, #28]
    e674:	1e5a      	subs	r2, r3, #1
    e676:	6a3b      	ldr	r3, [r7, #32]
    e678:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e67a:	6a3b      	ldr	r3, [r7, #32]
    e67c:	691b      	ldr	r3, [r3, #16]
    e67e:	2b00      	cmp	r3, #0
    e680:	d008      	beq.n	e694 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e682:	6a3b      	ldr	r3, [r7, #32]
    e684:	3310      	adds	r3, #16
    e686:	0018      	movs	r0, r3
    e688:	4b3b      	ldr	r3, [pc, #236]	; (e778 <xQueueReceive+0x178>)
    e68a:	4798      	blx	r3
    e68c:	1e03      	subs	r3, r0, #0
    e68e:	d001      	beq.n	e694 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e690:	4b3a      	ldr	r3, [pc, #232]	; (e77c <xQueueReceive+0x17c>)
    e692:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e694:	4b3a      	ldr	r3, [pc, #232]	; (e780 <xQueueReceive+0x180>)
    e696:	4798      	blx	r3
				return pdPASS;
    e698:	2301      	movs	r3, #1
    e69a:	e062      	b.n	e762 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e69c:	687b      	ldr	r3, [r7, #4]
    e69e:	2b00      	cmp	r3, #0
    e6a0:	d103      	bne.n	e6aa <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e6a2:	4b37      	ldr	r3, [pc, #220]	; (e780 <xQueueReceive+0x180>)
    e6a4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e6a6:	2300      	movs	r3, #0
    e6a8:	e05b      	b.n	e762 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d106      	bne.n	e6be <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e6b0:	2314      	movs	r3, #20
    e6b2:	18fb      	adds	r3, r7, r3
    e6b4:	0018      	movs	r0, r3
    e6b6:	4b33      	ldr	r3, [pc, #204]	; (e784 <xQueueReceive+0x184>)
    e6b8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e6ba:	2301      	movs	r3, #1
    e6bc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e6be:	4b30      	ldr	r3, [pc, #192]	; (e780 <xQueueReceive+0x180>)
    e6c0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e6c2:	4b31      	ldr	r3, [pc, #196]	; (e788 <xQueueReceive+0x188>)
    e6c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e6c6:	4b2a      	ldr	r3, [pc, #168]	; (e770 <xQueueReceive+0x170>)
    e6c8:	4798      	blx	r3
    e6ca:	6a3b      	ldr	r3, [r7, #32]
    e6cc:	2244      	movs	r2, #68	; 0x44
    e6ce:	5c9b      	ldrb	r3, [r3, r2]
    e6d0:	b25b      	sxtb	r3, r3
    e6d2:	3301      	adds	r3, #1
    e6d4:	d103      	bne.n	e6de <xQueueReceive+0xde>
    e6d6:	6a3b      	ldr	r3, [r7, #32]
    e6d8:	2244      	movs	r2, #68	; 0x44
    e6da:	2100      	movs	r1, #0
    e6dc:	5499      	strb	r1, [r3, r2]
    e6de:	6a3b      	ldr	r3, [r7, #32]
    e6e0:	2245      	movs	r2, #69	; 0x45
    e6e2:	5c9b      	ldrb	r3, [r3, r2]
    e6e4:	b25b      	sxtb	r3, r3
    e6e6:	3301      	adds	r3, #1
    e6e8:	d103      	bne.n	e6f2 <xQueueReceive+0xf2>
    e6ea:	6a3b      	ldr	r3, [r7, #32]
    e6ec:	2245      	movs	r2, #69	; 0x45
    e6ee:	2100      	movs	r1, #0
    e6f0:	5499      	strb	r1, [r3, r2]
    e6f2:	4b23      	ldr	r3, [pc, #140]	; (e780 <xQueueReceive+0x180>)
    e6f4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e6f6:	1d3a      	adds	r2, r7, #4
    e6f8:	2314      	movs	r3, #20
    e6fa:	18fb      	adds	r3, r7, r3
    e6fc:	0011      	movs	r1, r2
    e6fe:	0018      	movs	r0, r3
    e700:	4b22      	ldr	r3, [pc, #136]	; (e78c <xQueueReceive+0x18c>)
    e702:	4798      	blx	r3
    e704:	1e03      	subs	r3, r0, #0
    e706:	d11e      	bne.n	e746 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e708:	6a3b      	ldr	r3, [r7, #32]
    e70a:	0018      	movs	r0, r3
    e70c:	4b20      	ldr	r3, [pc, #128]	; (e790 <xQueueReceive+0x190>)
    e70e:	4798      	blx	r3
    e710:	1e03      	subs	r3, r0, #0
    e712:	d011      	beq.n	e738 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e714:	6a3b      	ldr	r3, [r7, #32]
    e716:	3324      	adds	r3, #36	; 0x24
    e718:	687a      	ldr	r2, [r7, #4]
    e71a:	0011      	movs	r1, r2
    e71c:	0018      	movs	r0, r3
    e71e:	4b1d      	ldr	r3, [pc, #116]	; (e794 <xQueueReceive+0x194>)
    e720:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e722:	6a3b      	ldr	r3, [r7, #32]
    e724:	0018      	movs	r0, r3
    e726:	4b1c      	ldr	r3, [pc, #112]	; (e798 <xQueueReceive+0x198>)
    e728:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e72a:	4b1c      	ldr	r3, [pc, #112]	; (e79c <xQueueReceive+0x19c>)
    e72c:	4798      	blx	r3
    e72e:	1e03      	subs	r3, r0, #0
    e730:	d191      	bne.n	e656 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    e732:	4b12      	ldr	r3, [pc, #72]	; (e77c <xQueueReceive+0x17c>)
    e734:	4798      	blx	r3
    e736:	e78e      	b.n	e656 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    e738:	6a3b      	ldr	r3, [r7, #32]
    e73a:	0018      	movs	r0, r3
    e73c:	4b16      	ldr	r3, [pc, #88]	; (e798 <xQueueReceive+0x198>)
    e73e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e740:	4b16      	ldr	r3, [pc, #88]	; (e79c <xQueueReceive+0x19c>)
    e742:	4798      	blx	r3
    e744:	e787      	b.n	e656 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    e746:	6a3b      	ldr	r3, [r7, #32]
    e748:	0018      	movs	r0, r3
    e74a:	4b13      	ldr	r3, [pc, #76]	; (e798 <xQueueReceive+0x198>)
    e74c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e74e:	4b13      	ldr	r3, [pc, #76]	; (e79c <xQueueReceive+0x19c>)
    e750:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e752:	6a3b      	ldr	r3, [r7, #32]
    e754:	0018      	movs	r0, r3
    e756:	4b0e      	ldr	r3, [pc, #56]	; (e790 <xQueueReceive+0x190>)
    e758:	4798      	blx	r3
    e75a:	1e03      	subs	r3, r0, #0
    e75c:	d100      	bne.n	e760 <xQueueReceive+0x160>
    e75e:	e77a      	b.n	e656 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e762:	0018      	movs	r0, r3
    e764:	46bd      	mov	sp, r7
    e766:	b00a      	add	sp, #40	; 0x28
    e768:	bd80      	pop	{r7, pc}
    e76a:	46c0      	nop			; (mov r8, r8)
    e76c:	0000fa11 	.word	0x0000fa11
    e770:	0000de91 	.word	0x0000de91
    e774:	0000eaa1 	.word	0x0000eaa1
    e778:	0000f6d9 	.word	0x0000f6d9
    e77c:	0000de71 	.word	0x0000de71
    e780:	0000deb5 	.word	0x0000deb5
    e784:	0000f799 	.word	0x0000f799
    e788:	0000f2c1 	.word	0x0000f2c1
    e78c:	0000f7c1 	.word	0x0000f7c1
    e790:	0000ebe1 	.word	0x0000ebe1
    e794:	0000f641 	.word	0x0000f641
    e798:	0000eaf1 	.word	0x0000eaf1
    e79c:	0000f2d9 	.word	0x0000f2d9

0000e7a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    e7a0:	b580      	push	{r7, lr}
    e7a2:	b08a      	sub	sp, #40	; 0x28
    e7a4:	af00      	add	r7, sp, #0
    e7a6:	6078      	str	r0, [r7, #4]
    e7a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    e7aa:	2300      	movs	r3, #0
    e7ac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e7ae:	687b      	ldr	r3, [r7, #4]
    e7b0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    e7b2:	2300      	movs	r3, #0
    e7b4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e7b6:	69fb      	ldr	r3, [r7, #28]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d101      	bne.n	e7c0 <xQueueSemaphoreTake+0x20>
    e7bc:	b672      	cpsid	i
    e7be:	e7fe      	b.n	e7be <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    e7c0:	69fb      	ldr	r3, [r7, #28]
    e7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d001      	beq.n	e7cc <xQueueSemaphoreTake+0x2c>
    e7c8:	b672      	cpsid	i
    e7ca:	e7fe      	b.n	e7ca <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e7cc:	4b61      	ldr	r3, [pc, #388]	; (e954 <xQueueSemaphoreTake+0x1b4>)
    e7ce:	4798      	blx	r3
    e7d0:	1e03      	subs	r3, r0, #0
    e7d2:	d102      	bne.n	e7da <xQueueSemaphoreTake+0x3a>
    e7d4:	683b      	ldr	r3, [r7, #0]
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d101      	bne.n	e7de <xQueueSemaphoreTake+0x3e>
    e7da:	2301      	movs	r3, #1
    e7dc:	e000      	b.n	e7e0 <xQueueSemaphoreTake+0x40>
    e7de:	2300      	movs	r3, #0
    e7e0:	2b00      	cmp	r3, #0
    e7e2:	d101      	bne.n	e7e8 <xQueueSemaphoreTake+0x48>
    e7e4:	b672      	cpsid	i
    e7e6:	e7fe      	b.n	e7e6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e7e8:	4b5b      	ldr	r3, [pc, #364]	; (e958 <xQueueSemaphoreTake+0x1b8>)
    e7ea:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    e7ec:	69fb      	ldr	r3, [r7, #28]
    e7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e7f0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    e7f2:	69bb      	ldr	r3, [r7, #24]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d01d      	beq.n	e834 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    e7f8:	69bb      	ldr	r3, [r7, #24]
    e7fa:	1e5a      	subs	r2, r3, #1
    e7fc:	69fb      	ldr	r3, [r7, #28]
    e7fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e800:	69fb      	ldr	r3, [r7, #28]
    e802:	681b      	ldr	r3, [r3, #0]
    e804:	2b00      	cmp	r3, #0
    e806:	d104      	bne.n	e812 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    e808:	4b54      	ldr	r3, [pc, #336]	; (e95c <xQueueSemaphoreTake+0x1bc>)
    e80a:	4798      	blx	r3
    e80c:	0002      	movs	r2, r0
    e80e:	69fb      	ldr	r3, [r7, #28]
    e810:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e812:	69fb      	ldr	r3, [r7, #28]
    e814:	691b      	ldr	r3, [r3, #16]
    e816:	2b00      	cmp	r3, #0
    e818:	d008      	beq.n	e82c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e81a:	69fb      	ldr	r3, [r7, #28]
    e81c:	3310      	adds	r3, #16
    e81e:	0018      	movs	r0, r3
    e820:	4b4f      	ldr	r3, [pc, #316]	; (e960 <xQueueSemaphoreTake+0x1c0>)
    e822:	4798      	blx	r3
    e824:	1e03      	subs	r3, r0, #0
    e826:	d001      	beq.n	e82c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e828:	4b4e      	ldr	r3, [pc, #312]	; (e964 <xQueueSemaphoreTake+0x1c4>)
    e82a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e82c:	4b4e      	ldr	r3, [pc, #312]	; (e968 <xQueueSemaphoreTake+0x1c8>)
    e82e:	4798      	blx	r3
				return pdPASS;
    e830:	2301      	movs	r3, #1
    e832:	e08b      	b.n	e94c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e834:	683b      	ldr	r3, [r7, #0]
    e836:	2b00      	cmp	r3, #0
    e838:	d108      	bne.n	e84c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    e83a:	6a3b      	ldr	r3, [r7, #32]
    e83c:	2b00      	cmp	r3, #0
    e83e:	d001      	beq.n	e844 <xQueueSemaphoreTake+0xa4>
    e840:	b672      	cpsid	i
    e842:	e7fe      	b.n	e842 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    e844:	4b48      	ldr	r3, [pc, #288]	; (e968 <xQueueSemaphoreTake+0x1c8>)
    e846:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e848:	2300      	movs	r3, #0
    e84a:	e07f      	b.n	e94c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e84e:	2b00      	cmp	r3, #0
    e850:	d106      	bne.n	e860 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e852:	230c      	movs	r3, #12
    e854:	18fb      	adds	r3, r7, r3
    e856:	0018      	movs	r0, r3
    e858:	4b44      	ldr	r3, [pc, #272]	; (e96c <xQueueSemaphoreTake+0x1cc>)
    e85a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e85c:	2301      	movs	r3, #1
    e85e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e860:	4b41      	ldr	r3, [pc, #260]	; (e968 <xQueueSemaphoreTake+0x1c8>)
    e862:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    e864:	4b42      	ldr	r3, [pc, #264]	; (e970 <xQueueSemaphoreTake+0x1d0>)
    e866:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e868:	4b3b      	ldr	r3, [pc, #236]	; (e958 <xQueueSemaphoreTake+0x1b8>)
    e86a:	4798      	blx	r3
    e86c:	69fb      	ldr	r3, [r7, #28]
    e86e:	2244      	movs	r2, #68	; 0x44
    e870:	5c9b      	ldrb	r3, [r3, r2]
    e872:	b25b      	sxtb	r3, r3
    e874:	3301      	adds	r3, #1
    e876:	d103      	bne.n	e880 <xQueueSemaphoreTake+0xe0>
    e878:	69fb      	ldr	r3, [r7, #28]
    e87a:	2244      	movs	r2, #68	; 0x44
    e87c:	2100      	movs	r1, #0
    e87e:	5499      	strb	r1, [r3, r2]
    e880:	69fb      	ldr	r3, [r7, #28]
    e882:	2245      	movs	r2, #69	; 0x45
    e884:	5c9b      	ldrb	r3, [r3, r2]
    e886:	b25b      	sxtb	r3, r3
    e888:	3301      	adds	r3, #1
    e88a:	d103      	bne.n	e894 <xQueueSemaphoreTake+0xf4>
    e88c:	69fb      	ldr	r3, [r7, #28]
    e88e:	2245      	movs	r2, #69	; 0x45
    e890:	2100      	movs	r1, #0
    e892:	5499      	strb	r1, [r3, r2]
    e894:	4b34      	ldr	r3, [pc, #208]	; (e968 <xQueueSemaphoreTake+0x1c8>)
    e896:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e898:	003a      	movs	r2, r7
    e89a:	230c      	movs	r3, #12
    e89c:	18fb      	adds	r3, r7, r3
    e89e:	0011      	movs	r1, r2
    e8a0:	0018      	movs	r0, r3
    e8a2:	4b34      	ldr	r3, [pc, #208]	; (e974 <xQueueSemaphoreTake+0x1d4>)
    e8a4:	4798      	blx	r3
    e8a6:	1e03      	subs	r3, r0, #0
    e8a8:	d12e      	bne.n	e908 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e8aa:	69fb      	ldr	r3, [r7, #28]
    e8ac:	0018      	movs	r0, r3
    e8ae:	4b32      	ldr	r3, [pc, #200]	; (e978 <xQueueSemaphoreTake+0x1d8>)
    e8b0:	4798      	blx	r3
    e8b2:	1e03      	subs	r3, r0, #0
    e8b4:	d021      	beq.n	e8fa <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e8b6:	69fb      	ldr	r3, [r7, #28]
    e8b8:	681b      	ldr	r3, [r3, #0]
    e8ba:	2b00      	cmp	r3, #0
    e8bc:	d10a      	bne.n	e8d4 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
    e8be:	4b26      	ldr	r3, [pc, #152]	; (e958 <xQueueSemaphoreTake+0x1b8>)
    e8c0:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    e8c2:	69fb      	ldr	r3, [r7, #28]
    e8c4:	685b      	ldr	r3, [r3, #4]
    e8c6:	0018      	movs	r0, r3
    e8c8:	4b2c      	ldr	r3, [pc, #176]	; (e97c <xQueueSemaphoreTake+0x1dc>)
    e8ca:	4798      	blx	r3
    e8cc:	0003      	movs	r3, r0
    e8ce:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    e8d0:	4b25      	ldr	r3, [pc, #148]	; (e968 <xQueueSemaphoreTake+0x1c8>)
    e8d2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e8d4:	69fb      	ldr	r3, [r7, #28]
    e8d6:	3324      	adds	r3, #36	; 0x24
    e8d8:	683a      	ldr	r2, [r7, #0]
    e8da:	0011      	movs	r1, r2
    e8dc:	0018      	movs	r0, r3
    e8de:	4b28      	ldr	r3, [pc, #160]	; (e980 <xQueueSemaphoreTake+0x1e0>)
    e8e0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e8e2:	69fb      	ldr	r3, [r7, #28]
    e8e4:	0018      	movs	r0, r3
    e8e6:	4b27      	ldr	r3, [pc, #156]	; (e984 <xQueueSemaphoreTake+0x1e4>)
    e8e8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e8ea:	4b27      	ldr	r3, [pc, #156]	; (e988 <xQueueSemaphoreTake+0x1e8>)
    e8ec:	4798      	blx	r3
    e8ee:	1e03      	subs	r3, r0, #0
    e8f0:	d000      	beq.n	e8f4 <xQueueSemaphoreTake+0x154>
    e8f2:	e779      	b.n	e7e8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    e8f4:	4b1b      	ldr	r3, [pc, #108]	; (e964 <xQueueSemaphoreTake+0x1c4>)
    e8f6:	4798      	blx	r3
    e8f8:	e776      	b.n	e7e8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    e8fa:	69fb      	ldr	r3, [r7, #28]
    e8fc:	0018      	movs	r0, r3
    e8fe:	4b21      	ldr	r3, [pc, #132]	; (e984 <xQueueSemaphoreTake+0x1e4>)
    e900:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e902:	4b21      	ldr	r3, [pc, #132]	; (e988 <xQueueSemaphoreTake+0x1e8>)
    e904:	4798      	blx	r3
    e906:	e76f      	b.n	e7e8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    e908:	69fb      	ldr	r3, [r7, #28]
    e90a:	0018      	movs	r0, r3
    e90c:	4b1d      	ldr	r3, [pc, #116]	; (e984 <xQueueSemaphoreTake+0x1e4>)
    e90e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e910:	4b1d      	ldr	r3, [pc, #116]	; (e988 <xQueueSemaphoreTake+0x1e8>)
    e912:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e914:	69fb      	ldr	r3, [r7, #28]
    e916:	0018      	movs	r0, r3
    e918:	4b17      	ldr	r3, [pc, #92]	; (e978 <xQueueSemaphoreTake+0x1d8>)
    e91a:	4798      	blx	r3
    e91c:	1e03      	subs	r3, r0, #0
    e91e:	d100      	bne.n	e922 <xQueueSemaphoreTake+0x182>
    e920:	e762      	b.n	e7e8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    e922:	6a3b      	ldr	r3, [r7, #32]
    e924:	2b00      	cmp	r3, #0
    e926:	d010      	beq.n	e94a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
    e928:	4b0b      	ldr	r3, [pc, #44]	; (e958 <xQueueSemaphoreTake+0x1b8>)
    e92a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    e92c:	69fb      	ldr	r3, [r7, #28]
    e92e:	0018      	movs	r0, r3
    e930:	4b16      	ldr	r3, [pc, #88]	; (e98c <xQueueSemaphoreTake+0x1ec>)
    e932:	4798      	blx	r3
    e934:	0003      	movs	r3, r0
    e936:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    e938:	69fb      	ldr	r3, [r7, #28]
    e93a:	685b      	ldr	r3, [r3, #4]
    e93c:	697a      	ldr	r2, [r7, #20]
    e93e:	0011      	movs	r1, r2
    e940:	0018      	movs	r0, r3
    e942:	4b13      	ldr	r3, [pc, #76]	; (e990 <xQueueSemaphoreTake+0x1f0>)
    e944:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    e946:	4b08      	ldr	r3, [pc, #32]	; (e968 <xQueueSemaphoreTake+0x1c8>)
    e948:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e94a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e94c:	0018      	movs	r0, r3
    e94e:	46bd      	mov	sp, r7
    e950:	b00a      	add	sp, #40	; 0x28
    e952:	bd80      	pop	{r7, pc}
    e954:	0000fa11 	.word	0x0000fa11
    e958:	0000de91 	.word	0x0000de91
    e95c:	0000fcdd 	.word	0x0000fcdd
    e960:	0000f6d9 	.word	0x0000f6d9
    e964:	0000de71 	.word	0x0000de71
    e968:	0000deb5 	.word	0x0000deb5
    e96c:	0000f799 	.word	0x0000f799
    e970:	0000f2c1 	.word	0x0000f2c1
    e974:	0000f7c1 	.word	0x0000f7c1
    e978:	0000ebe1 	.word	0x0000ebe1
    e97c:	0000fa49 	.word	0x0000fa49
    e980:	0000f641 	.word	0x0000f641
    e984:	0000eaf1 	.word	0x0000eaf1
    e988:	0000f2d9 	.word	0x0000f2d9
    e98c:	0000e995 	.word	0x0000e995
    e990:	0000fbed 	.word	0x0000fbed

0000e994 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    e994:	b580      	push	{r7, lr}
    e996:	b084      	sub	sp, #16
    e998:	af00      	add	r7, sp, #0
    e99a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    e99c:	687b      	ldr	r3, [r7, #4]
    e99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d006      	beq.n	e9b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e9a8:	681b      	ldr	r3, [r3, #0]
    e9aa:	2205      	movs	r2, #5
    e9ac:	1ad3      	subs	r3, r2, r3
    e9ae:	60fb      	str	r3, [r7, #12]
    e9b0:	e001      	b.n	e9b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    e9b2:	2300      	movs	r3, #0
    e9b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    e9b6:	68fb      	ldr	r3, [r7, #12]
	}
    e9b8:	0018      	movs	r0, r3
    e9ba:	46bd      	mov	sp, r7
    e9bc:	b004      	add	sp, #16
    e9be:	bd80      	pop	{r7, pc}

0000e9c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    e9c0:	b580      	push	{r7, lr}
    e9c2:	b086      	sub	sp, #24
    e9c4:	af00      	add	r7, sp, #0
    e9c6:	60f8      	str	r0, [r7, #12]
    e9c8:	60b9      	str	r1, [r7, #8]
    e9ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    e9cc:	2300      	movs	r3, #0
    e9ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e9d0:	68fb      	ldr	r3, [r7, #12]
    e9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e9d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    e9d6:	68fb      	ldr	r3, [r7, #12]
    e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e9da:	2b00      	cmp	r3, #0
    e9dc:	d10e      	bne.n	e9fc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e9de:	68fb      	ldr	r3, [r7, #12]
    e9e0:	681b      	ldr	r3, [r3, #0]
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	d14e      	bne.n	ea84 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    e9e6:	68fb      	ldr	r3, [r7, #12]
    e9e8:	685b      	ldr	r3, [r3, #4]
    e9ea:	0018      	movs	r0, r3
    e9ec:	4b2a      	ldr	r3, [pc, #168]	; (ea98 <prvCopyDataToQueue+0xd8>)
    e9ee:	4798      	blx	r3
    e9f0:	0003      	movs	r3, r0
    e9f2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    e9f4:	68fb      	ldr	r3, [r7, #12]
    e9f6:	2200      	movs	r2, #0
    e9f8:	605a      	str	r2, [r3, #4]
    e9fa:	e043      	b.n	ea84 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    e9fc:	687b      	ldr	r3, [r7, #4]
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d119      	bne.n	ea36 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    ea02:	68fb      	ldr	r3, [r7, #12]
    ea04:	6898      	ldr	r0, [r3, #8]
    ea06:	68fb      	ldr	r3, [r7, #12]
    ea08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ea0a:	68bb      	ldr	r3, [r7, #8]
    ea0c:	0019      	movs	r1, r3
    ea0e:	4b23      	ldr	r3, [pc, #140]	; (ea9c <prvCopyDataToQueue+0xdc>)
    ea10:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    ea12:	68fb      	ldr	r3, [r7, #12]
    ea14:	689a      	ldr	r2, [r3, #8]
    ea16:	68fb      	ldr	r3, [r7, #12]
    ea18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea1a:	18d2      	adds	r2, r2, r3
    ea1c:	68fb      	ldr	r3, [r7, #12]
    ea1e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    ea20:	68fb      	ldr	r3, [r7, #12]
    ea22:	689a      	ldr	r2, [r3, #8]
    ea24:	68fb      	ldr	r3, [r7, #12]
    ea26:	685b      	ldr	r3, [r3, #4]
    ea28:	429a      	cmp	r2, r3
    ea2a:	d32b      	bcc.n	ea84 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    ea2c:	68fb      	ldr	r3, [r7, #12]
    ea2e:	681a      	ldr	r2, [r3, #0]
    ea30:	68fb      	ldr	r3, [r7, #12]
    ea32:	609a      	str	r2, [r3, #8]
    ea34:	e026      	b.n	ea84 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ea36:	68fb      	ldr	r3, [r7, #12]
    ea38:	68d8      	ldr	r0, [r3, #12]
    ea3a:	68fb      	ldr	r3, [r7, #12]
    ea3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ea3e:	68bb      	ldr	r3, [r7, #8]
    ea40:	0019      	movs	r1, r3
    ea42:	4b16      	ldr	r3, [pc, #88]	; (ea9c <prvCopyDataToQueue+0xdc>)
    ea44:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    ea46:	68fb      	ldr	r3, [r7, #12]
    ea48:	68da      	ldr	r2, [r3, #12]
    ea4a:	68fb      	ldr	r3, [r7, #12]
    ea4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea4e:	425b      	negs	r3, r3
    ea50:	18d2      	adds	r2, r2, r3
    ea52:	68fb      	ldr	r3, [r7, #12]
    ea54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    ea56:	68fb      	ldr	r3, [r7, #12]
    ea58:	68da      	ldr	r2, [r3, #12]
    ea5a:	68fb      	ldr	r3, [r7, #12]
    ea5c:	681b      	ldr	r3, [r3, #0]
    ea5e:	429a      	cmp	r2, r3
    ea60:	d207      	bcs.n	ea72 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    ea62:	68fb      	ldr	r3, [r7, #12]
    ea64:	685a      	ldr	r2, [r3, #4]
    ea66:	68fb      	ldr	r3, [r7, #12]
    ea68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea6a:	425b      	negs	r3, r3
    ea6c:	18d2      	adds	r2, r2, r3
    ea6e:	68fb      	ldr	r3, [r7, #12]
    ea70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    ea72:	687b      	ldr	r3, [r7, #4]
    ea74:	2b02      	cmp	r3, #2
    ea76:	d105      	bne.n	ea84 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    ea78:	693b      	ldr	r3, [r7, #16]
    ea7a:	2b00      	cmp	r3, #0
    ea7c:	d002      	beq.n	ea84 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    ea7e:	693b      	ldr	r3, [r7, #16]
    ea80:	3b01      	subs	r3, #1
    ea82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    ea84:	693b      	ldr	r3, [r7, #16]
    ea86:	1c5a      	adds	r2, r3, #1
    ea88:	68fb      	ldr	r3, [r7, #12]
    ea8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    ea8c:	697b      	ldr	r3, [r7, #20]
}
    ea8e:	0018      	movs	r0, r3
    ea90:	46bd      	mov	sp, r7
    ea92:	b006      	add	sp, #24
    ea94:	bd80      	pop	{r7, pc}
    ea96:	46c0      	nop			; (mov r8, r8)
    ea98:	0000fb2d 	.word	0x0000fb2d
    ea9c:	00017d31 	.word	0x00017d31

0000eaa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    eaa0:	b580      	push	{r7, lr}
    eaa2:	b082      	sub	sp, #8
    eaa4:	af00      	add	r7, sp, #0
    eaa6:	6078      	str	r0, [r7, #4]
    eaa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    eaaa:	687b      	ldr	r3, [r7, #4]
    eaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eaae:	2b00      	cmp	r3, #0
    eab0:	d018      	beq.n	eae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    eab2:	687b      	ldr	r3, [r7, #4]
    eab4:	68da      	ldr	r2, [r3, #12]
    eab6:	687b      	ldr	r3, [r7, #4]
    eab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eaba:	18d2      	adds	r2, r2, r3
    eabc:	687b      	ldr	r3, [r7, #4]
    eabe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    eac0:	687b      	ldr	r3, [r7, #4]
    eac2:	68da      	ldr	r2, [r3, #12]
    eac4:	687b      	ldr	r3, [r7, #4]
    eac6:	685b      	ldr	r3, [r3, #4]
    eac8:	429a      	cmp	r2, r3
    eaca:	d303      	bcc.n	ead4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    eacc:	687b      	ldr	r3, [r7, #4]
    eace:	681a      	ldr	r2, [r3, #0]
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    ead4:	687b      	ldr	r3, [r7, #4]
    ead6:	68d9      	ldr	r1, [r3, #12]
    ead8:	687b      	ldr	r3, [r7, #4]
    eada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    eadc:	683b      	ldr	r3, [r7, #0]
    eade:	0018      	movs	r0, r3
    eae0:	4b02      	ldr	r3, [pc, #8]	; (eaec <prvCopyDataFromQueue+0x4c>)
    eae2:	4798      	blx	r3
	}
}
    eae4:	46c0      	nop			; (mov r8, r8)
    eae6:	46bd      	mov	sp, r7
    eae8:	b002      	add	sp, #8
    eaea:	bd80      	pop	{r7, pc}
    eaec:	00017d31 	.word	0x00017d31

0000eaf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    eaf0:	b580      	push	{r7, lr}
    eaf2:	b084      	sub	sp, #16
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    eaf8:	4b34      	ldr	r3, [pc, #208]	; (ebcc <prvUnlockQueue+0xdc>)
    eafa:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    eafc:	230f      	movs	r3, #15
    eafe:	18fb      	adds	r3, r7, r3
    eb00:	687a      	ldr	r2, [r7, #4]
    eb02:	2145      	movs	r1, #69	; 0x45
    eb04:	5c52      	ldrb	r2, [r2, r1]
    eb06:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    eb08:	e022      	b.n	eb50 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    eb0a:	687b      	ldr	r3, [r7, #4]
    eb0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    eb0e:	2b00      	cmp	r3, #0
    eb10:	d009      	beq.n	eb26 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    eb12:	687b      	ldr	r3, [r7, #4]
    eb14:	2100      	movs	r1, #0
    eb16:	0018      	movs	r0, r3
    eb18:	4b2d      	ldr	r3, [pc, #180]	; (ebd0 <prvUnlockQueue+0xe0>)
    eb1a:	4798      	blx	r3
    eb1c:	1e03      	subs	r3, r0, #0
    eb1e:	d00f      	beq.n	eb40 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    eb20:	4b2c      	ldr	r3, [pc, #176]	; (ebd4 <prvUnlockQueue+0xe4>)
    eb22:	4798      	blx	r3
    eb24:	e00c      	b.n	eb40 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    eb26:	687b      	ldr	r3, [r7, #4]
    eb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d017      	beq.n	eb5e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    eb2e:	687b      	ldr	r3, [r7, #4]
    eb30:	3324      	adds	r3, #36	; 0x24
    eb32:	0018      	movs	r0, r3
    eb34:	4b28      	ldr	r3, [pc, #160]	; (ebd8 <prvUnlockQueue+0xe8>)
    eb36:	4798      	blx	r3
    eb38:	1e03      	subs	r3, r0, #0
    eb3a:	d001      	beq.n	eb40 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    eb3c:	4b25      	ldr	r3, [pc, #148]	; (ebd4 <prvUnlockQueue+0xe4>)
    eb3e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    eb40:	230f      	movs	r3, #15
    eb42:	18fb      	adds	r3, r7, r3
    eb44:	781b      	ldrb	r3, [r3, #0]
    eb46:	3b01      	subs	r3, #1
    eb48:	b2da      	uxtb	r2, r3
    eb4a:	230f      	movs	r3, #15
    eb4c:	18fb      	adds	r3, r7, r3
    eb4e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    eb50:	230f      	movs	r3, #15
    eb52:	18fb      	adds	r3, r7, r3
    eb54:	781b      	ldrb	r3, [r3, #0]
    eb56:	b25b      	sxtb	r3, r3
    eb58:	2b00      	cmp	r3, #0
    eb5a:	dcd6      	bgt.n	eb0a <prvUnlockQueue+0x1a>
    eb5c:	e000      	b.n	eb60 <prvUnlockQueue+0x70>
						break;
    eb5e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    eb60:	687b      	ldr	r3, [r7, #4]
    eb62:	2245      	movs	r2, #69	; 0x45
    eb64:	21ff      	movs	r1, #255	; 0xff
    eb66:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    eb68:	4b1c      	ldr	r3, [pc, #112]	; (ebdc <prvUnlockQueue+0xec>)
    eb6a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    eb6c:	4b17      	ldr	r3, [pc, #92]	; (ebcc <prvUnlockQueue+0xdc>)
    eb6e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    eb70:	230e      	movs	r3, #14
    eb72:	18fb      	adds	r3, r7, r3
    eb74:	687a      	ldr	r2, [r7, #4]
    eb76:	2144      	movs	r1, #68	; 0x44
    eb78:	5c52      	ldrb	r2, [r2, r1]
    eb7a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    eb7c:	e014      	b.n	eba8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    eb7e:	687b      	ldr	r3, [r7, #4]
    eb80:	691b      	ldr	r3, [r3, #16]
    eb82:	2b00      	cmp	r3, #0
    eb84:	d017      	beq.n	ebb6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    eb86:	687b      	ldr	r3, [r7, #4]
    eb88:	3310      	adds	r3, #16
    eb8a:	0018      	movs	r0, r3
    eb8c:	4b12      	ldr	r3, [pc, #72]	; (ebd8 <prvUnlockQueue+0xe8>)
    eb8e:	4798      	blx	r3
    eb90:	1e03      	subs	r3, r0, #0
    eb92:	d001      	beq.n	eb98 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    eb94:	4b0f      	ldr	r3, [pc, #60]	; (ebd4 <prvUnlockQueue+0xe4>)
    eb96:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    eb98:	230e      	movs	r3, #14
    eb9a:	18fb      	adds	r3, r7, r3
    eb9c:	781b      	ldrb	r3, [r3, #0]
    eb9e:	3b01      	subs	r3, #1
    eba0:	b2da      	uxtb	r2, r3
    eba2:	230e      	movs	r3, #14
    eba4:	18fb      	adds	r3, r7, r3
    eba6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    eba8:	230e      	movs	r3, #14
    ebaa:	18fb      	adds	r3, r7, r3
    ebac:	781b      	ldrb	r3, [r3, #0]
    ebae:	b25b      	sxtb	r3, r3
    ebb0:	2b00      	cmp	r3, #0
    ebb2:	dce4      	bgt.n	eb7e <prvUnlockQueue+0x8e>
    ebb4:	e000      	b.n	ebb8 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    ebb6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    ebb8:	687b      	ldr	r3, [r7, #4]
    ebba:	2244      	movs	r2, #68	; 0x44
    ebbc:	21ff      	movs	r1, #255	; 0xff
    ebbe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    ebc0:	4b06      	ldr	r3, [pc, #24]	; (ebdc <prvUnlockQueue+0xec>)
    ebc2:	4798      	blx	r3
}
    ebc4:	46c0      	nop			; (mov r8, r8)
    ebc6:	46bd      	mov	sp, r7
    ebc8:	b004      	add	sp, #16
    ebca:	bd80      	pop	{r7, pc}
    ebcc:	0000de91 	.word	0x0000de91
    ebd0:	0000ecc5 	.word	0x0000ecc5
    ebd4:	0000f86d 	.word	0x0000f86d
    ebd8:	0000f6d9 	.word	0x0000f6d9
    ebdc:	0000deb5 	.word	0x0000deb5

0000ebe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    ebe0:	b580      	push	{r7, lr}
    ebe2:	b084      	sub	sp, #16
    ebe4:	af00      	add	r7, sp, #0
    ebe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ebe8:	4b08      	ldr	r3, [pc, #32]	; (ec0c <prvIsQueueEmpty+0x2c>)
    ebea:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    ebec:	687b      	ldr	r3, [r7, #4]
    ebee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ebf0:	2b00      	cmp	r3, #0
    ebf2:	d102      	bne.n	ebfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    ebf4:	2301      	movs	r3, #1
    ebf6:	60fb      	str	r3, [r7, #12]
    ebf8:	e001      	b.n	ebfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    ebfa:	2300      	movs	r3, #0
    ebfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ebfe:	4b04      	ldr	r3, [pc, #16]	; (ec10 <prvIsQueueEmpty+0x30>)
    ec00:	4798      	blx	r3

	return xReturn;
    ec02:	68fb      	ldr	r3, [r7, #12]
}
    ec04:	0018      	movs	r0, r3
    ec06:	46bd      	mov	sp, r7
    ec08:	b004      	add	sp, #16
    ec0a:	bd80      	pop	{r7, pc}
    ec0c:	0000de91 	.word	0x0000de91
    ec10:	0000deb5 	.word	0x0000deb5

0000ec14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    ec14:	b580      	push	{r7, lr}
    ec16:	b084      	sub	sp, #16
    ec18:	af00      	add	r7, sp, #0
    ec1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ec1c:	4b09      	ldr	r3, [pc, #36]	; (ec44 <prvIsQueueFull+0x30>)
    ec1e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    ec20:	687b      	ldr	r3, [r7, #4]
    ec22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec24:	687b      	ldr	r3, [r7, #4]
    ec26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ec28:	429a      	cmp	r2, r3
    ec2a:	d102      	bne.n	ec32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    ec2c:	2301      	movs	r3, #1
    ec2e:	60fb      	str	r3, [r7, #12]
    ec30:	e001      	b.n	ec36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    ec32:	2300      	movs	r3, #0
    ec34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ec36:	4b04      	ldr	r3, [pc, #16]	; (ec48 <prvIsQueueFull+0x34>)
    ec38:	4798      	blx	r3

	return xReturn;
    ec3a:	68fb      	ldr	r3, [r7, #12]
}
    ec3c:	0018      	movs	r0, r3
    ec3e:	46bd      	mov	sp, r7
    ec40:	b004      	add	sp, #16
    ec42:	bd80      	pop	{r7, pc}
    ec44:	0000de91 	.word	0x0000de91
    ec48:	0000deb5 	.word	0x0000deb5

0000ec4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    ec4c:	b580      	push	{r7, lr}
    ec4e:	b086      	sub	sp, #24
    ec50:	af00      	add	r7, sp, #0
    ec52:	60f8      	str	r0, [r7, #12]
    ec54:	60b9      	str	r1, [r7, #8]
    ec56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    ec58:	68fb      	ldr	r3, [r7, #12]
    ec5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    ec5c:	4b15      	ldr	r3, [pc, #84]	; (ecb4 <vQueueWaitForMessageRestricted+0x68>)
    ec5e:	4798      	blx	r3
    ec60:	697b      	ldr	r3, [r7, #20]
    ec62:	2244      	movs	r2, #68	; 0x44
    ec64:	5c9b      	ldrb	r3, [r3, r2]
    ec66:	b25b      	sxtb	r3, r3
    ec68:	3301      	adds	r3, #1
    ec6a:	d103      	bne.n	ec74 <vQueueWaitForMessageRestricted+0x28>
    ec6c:	697b      	ldr	r3, [r7, #20]
    ec6e:	2244      	movs	r2, #68	; 0x44
    ec70:	2100      	movs	r1, #0
    ec72:	5499      	strb	r1, [r3, r2]
    ec74:	697b      	ldr	r3, [r7, #20]
    ec76:	2245      	movs	r2, #69	; 0x45
    ec78:	5c9b      	ldrb	r3, [r3, r2]
    ec7a:	b25b      	sxtb	r3, r3
    ec7c:	3301      	adds	r3, #1
    ec7e:	d103      	bne.n	ec88 <vQueueWaitForMessageRestricted+0x3c>
    ec80:	697b      	ldr	r3, [r7, #20]
    ec82:	2245      	movs	r2, #69	; 0x45
    ec84:	2100      	movs	r1, #0
    ec86:	5499      	strb	r1, [r3, r2]
    ec88:	4b0b      	ldr	r3, [pc, #44]	; (ecb8 <vQueueWaitForMessageRestricted+0x6c>)
    ec8a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    ec8c:	697b      	ldr	r3, [r7, #20]
    ec8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ec90:	2b00      	cmp	r3, #0
    ec92:	d106      	bne.n	eca2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    ec94:	697b      	ldr	r3, [r7, #20]
    ec96:	3324      	adds	r3, #36	; 0x24
    ec98:	687a      	ldr	r2, [r7, #4]
    ec9a:	68b9      	ldr	r1, [r7, #8]
    ec9c:	0018      	movs	r0, r3
    ec9e:	4b07      	ldr	r3, [pc, #28]	; (ecbc <vQueueWaitForMessageRestricted+0x70>)
    eca0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    eca2:	697b      	ldr	r3, [r7, #20]
    eca4:	0018      	movs	r0, r3
    eca6:	4b06      	ldr	r3, [pc, #24]	; (ecc0 <vQueueWaitForMessageRestricted+0x74>)
    eca8:	4798      	blx	r3
	}
    ecaa:	46c0      	nop			; (mov r8, r8)
    ecac:	46bd      	mov	sp, r7
    ecae:	b006      	add	sp, #24
    ecb0:	bd80      	pop	{r7, pc}
    ecb2:	46c0      	nop			; (mov r8, r8)
    ecb4:	0000de91 	.word	0x0000de91
    ecb8:	0000deb5 	.word	0x0000deb5
    ecbc:	0000f685 	.word	0x0000f685
    ecc0:	0000eaf1 	.word	0x0000eaf1

0000ecc4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    ecc4:	b580      	push	{r7, lr}
    ecc6:	b086      	sub	sp, #24
    ecc8:	af00      	add	r7, sp, #0
    ecca:	6078      	str	r0, [r7, #4]
    eccc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    ecce:	687b      	ldr	r3, [r7, #4]
    ecd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ecd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    ecd4:	2300      	movs	r3, #0
    ecd6:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    ecd8:	693b      	ldr	r3, [r7, #16]
    ecda:	2b00      	cmp	r3, #0
    ecdc:	d101      	bne.n	ece2 <prvNotifyQueueSetContainer+0x1e>
    ecde:	b672      	cpsid	i
    ece0:	e7fe      	b.n	ece0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    ece2:	693b      	ldr	r3, [r7, #16]
    ece4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ece6:	693b      	ldr	r3, [r7, #16]
    ece8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ecea:	429a      	cmp	r2, r3
    ecec:	d301      	bcc.n	ecf2 <prvNotifyQueueSetContainer+0x2e>
    ecee:	b672      	cpsid	i
    ecf0:	e7fe      	b.n	ecf0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    ecf2:	693b      	ldr	r3, [r7, #16]
    ecf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ecf6:	693b      	ldr	r3, [r7, #16]
    ecf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ecfa:	429a      	cmp	r2, r3
    ecfc:	d22a      	bcs.n	ed54 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    ecfe:	230f      	movs	r3, #15
    ed00:	18fb      	adds	r3, r7, r3
    ed02:	693a      	ldr	r2, [r7, #16]
    ed04:	2145      	movs	r1, #69	; 0x45
    ed06:	5c52      	ldrb	r2, [r2, r1]
    ed08:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    ed0a:	683a      	ldr	r2, [r7, #0]
    ed0c:	1d39      	adds	r1, r7, #4
    ed0e:	693b      	ldr	r3, [r7, #16]
    ed10:	0018      	movs	r0, r3
    ed12:	4b13      	ldr	r3, [pc, #76]	; (ed60 <prvNotifyQueueSetContainer+0x9c>)
    ed14:	4798      	blx	r3
    ed16:	0003      	movs	r3, r0
    ed18:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    ed1a:	230f      	movs	r3, #15
    ed1c:	18fb      	adds	r3, r7, r3
    ed1e:	781b      	ldrb	r3, [r3, #0]
    ed20:	b25b      	sxtb	r3, r3
    ed22:	3301      	adds	r3, #1
    ed24:	d10d      	bne.n	ed42 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    ed26:	693b      	ldr	r3, [r7, #16]
    ed28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d012      	beq.n	ed54 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    ed2e:	693b      	ldr	r3, [r7, #16]
    ed30:	3324      	adds	r3, #36	; 0x24
    ed32:	0018      	movs	r0, r3
    ed34:	4b0b      	ldr	r3, [pc, #44]	; (ed64 <prvNotifyQueueSetContainer+0xa0>)
    ed36:	4798      	blx	r3
    ed38:	1e03      	subs	r3, r0, #0
    ed3a:	d00b      	beq.n	ed54 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    ed3c:	2301      	movs	r3, #1
    ed3e:	617b      	str	r3, [r7, #20]
    ed40:	e008      	b.n	ed54 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    ed42:	230f      	movs	r3, #15
    ed44:	18fb      	adds	r3, r7, r3
    ed46:	781b      	ldrb	r3, [r3, #0]
    ed48:	3301      	adds	r3, #1
    ed4a:	b2db      	uxtb	r3, r3
    ed4c:	b259      	sxtb	r1, r3
    ed4e:	693b      	ldr	r3, [r7, #16]
    ed50:	2245      	movs	r2, #69	; 0x45
    ed52:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    ed54:	697b      	ldr	r3, [r7, #20]
	}
    ed56:	0018      	movs	r0, r3
    ed58:	46bd      	mov	sp, r7
    ed5a:	b006      	add	sp, #24
    ed5c:	bd80      	pop	{r7, pc}
    ed5e:	46c0      	nop			; (mov r8, r8)
    ed60:	0000e9c1 	.word	0x0000e9c1
    ed64:	0000f6d9 	.word	0x0000f6d9

0000ed68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    ed68:	b590      	push	{r4, r7, lr}
    ed6a:	b08d      	sub	sp, #52	; 0x34
    ed6c:	af04      	add	r7, sp, #16
    ed6e:	60f8      	str	r0, [r7, #12]
    ed70:	60b9      	str	r1, [r7, #8]
    ed72:	603b      	str	r3, [r7, #0]
    ed74:	1dbb      	adds	r3, r7, #6
    ed76:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ed78:	1dbb      	adds	r3, r7, #6
    ed7a:	881b      	ldrh	r3, [r3, #0]
    ed7c:	009b      	lsls	r3, r3, #2
    ed7e:	0018      	movs	r0, r3
    ed80:	4b1d      	ldr	r3, [pc, #116]	; (edf8 <xTaskCreate+0x90>)
    ed82:	4798      	blx	r3
    ed84:	0003      	movs	r3, r0
    ed86:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    ed88:	697b      	ldr	r3, [r7, #20]
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	d010      	beq.n	edb0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    ed8e:	2050      	movs	r0, #80	; 0x50
    ed90:	4b19      	ldr	r3, [pc, #100]	; (edf8 <xTaskCreate+0x90>)
    ed92:	4798      	blx	r3
    ed94:	0003      	movs	r3, r0
    ed96:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    ed98:	69fb      	ldr	r3, [r7, #28]
    ed9a:	2b00      	cmp	r3, #0
    ed9c:	d003      	beq.n	eda6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    ed9e:	69fb      	ldr	r3, [r7, #28]
    eda0:	697a      	ldr	r2, [r7, #20]
    eda2:	631a      	str	r2, [r3, #48]	; 0x30
    eda4:	e006      	b.n	edb4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    eda6:	697b      	ldr	r3, [r7, #20]
    eda8:	0018      	movs	r0, r3
    edaa:	4b14      	ldr	r3, [pc, #80]	; (edfc <xTaskCreate+0x94>)
    edac:	4798      	blx	r3
    edae:	e001      	b.n	edb4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    edb0:	2300      	movs	r3, #0
    edb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    edb4:	69fb      	ldr	r3, [r7, #28]
    edb6:	2b00      	cmp	r3, #0
    edb8:	d016      	beq.n	ede8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    edba:	1dbb      	adds	r3, r7, #6
    edbc:	881a      	ldrh	r2, [r3, #0]
    edbe:	683c      	ldr	r4, [r7, #0]
    edc0:	68b9      	ldr	r1, [r7, #8]
    edc2:	68f8      	ldr	r0, [r7, #12]
    edc4:	2300      	movs	r3, #0
    edc6:	9303      	str	r3, [sp, #12]
    edc8:	69fb      	ldr	r3, [r7, #28]
    edca:	9302      	str	r3, [sp, #8]
    edcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    edce:	9301      	str	r3, [sp, #4]
    edd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    edd2:	9300      	str	r3, [sp, #0]
    edd4:	0023      	movs	r3, r4
    edd6:	4c0a      	ldr	r4, [pc, #40]	; (ee00 <xTaskCreate+0x98>)
    edd8:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    edda:	69fb      	ldr	r3, [r7, #28]
    eddc:	0018      	movs	r0, r3
    edde:	4b09      	ldr	r3, [pc, #36]	; (ee04 <xTaskCreate+0x9c>)
    ede0:	4798      	blx	r3
			xReturn = pdPASS;
    ede2:	2301      	movs	r3, #1
    ede4:	61bb      	str	r3, [r7, #24]
    ede6:	e002      	b.n	edee <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    ede8:	2301      	movs	r3, #1
    edea:	425b      	negs	r3, r3
    edec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    edee:	69bb      	ldr	r3, [r7, #24]
	}
    edf0:	0018      	movs	r0, r3
    edf2:	46bd      	mov	sp, r7
    edf4:	b009      	add	sp, #36	; 0x24
    edf6:	bd90      	pop	{r4, r7, pc}
    edf8:	0000dfcd 	.word	0x0000dfcd
    edfc:	0000e001 	.word	0x0000e001
    ee00:	0000ee09 	.word	0x0000ee09
    ee04:	0000ef05 	.word	0x0000ef05

0000ee08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    ee08:	b580      	push	{r7, lr}
    ee0a:	b086      	sub	sp, #24
    ee0c:	af00      	add	r7, sp, #0
    ee0e:	60f8      	str	r0, [r7, #12]
    ee10:	60b9      	str	r1, [r7, #8]
    ee12:	607a      	str	r2, [r7, #4]
    ee14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ee1a:	687b      	ldr	r3, [r7, #4]
    ee1c:	4936      	ldr	r1, [pc, #216]	; (eef8 <prvInitialiseNewTask+0xf0>)
    ee1e:	468c      	mov	ip, r1
    ee20:	4463      	add	r3, ip
    ee22:	009b      	lsls	r3, r3, #2
    ee24:	18d3      	adds	r3, r2, r3
    ee26:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    ee28:	693b      	ldr	r3, [r7, #16]
    ee2a:	2207      	movs	r2, #7
    ee2c:	4393      	bics	r3, r2
    ee2e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    ee30:	693b      	ldr	r3, [r7, #16]
    ee32:	2207      	movs	r2, #7
    ee34:	4013      	ands	r3, r2
    ee36:	d001      	beq.n	ee3c <prvInitialiseNewTask+0x34>
    ee38:	b672      	cpsid	i
    ee3a:	e7fe      	b.n	ee3a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    ee3c:	2300      	movs	r3, #0
    ee3e:	617b      	str	r3, [r7, #20]
    ee40:	e013      	b.n	ee6a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    ee42:	68ba      	ldr	r2, [r7, #8]
    ee44:	697b      	ldr	r3, [r7, #20]
    ee46:	18d3      	adds	r3, r2, r3
    ee48:	7818      	ldrb	r0, [r3, #0]
    ee4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ee4c:	2134      	movs	r1, #52	; 0x34
    ee4e:	697b      	ldr	r3, [r7, #20]
    ee50:	18d3      	adds	r3, r2, r3
    ee52:	185b      	adds	r3, r3, r1
    ee54:	1c02      	adds	r2, r0, #0
    ee56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    ee58:	68ba      	ldr	r2, [r7, #8]
    ee5a:	697b      	ldr	r3, [r7, #20]
    ee5c:	18d3      	adds	r3, r2, r3
    ee5e:	781b      	ldrb	r3, [r3, #0]
    ee60:	2b00      	cmp	r3, #0
    ee62:	d006      	beq.n	ee72 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    ee64:	697b      	ldr	r3, [r7, #20]
    ee66:	3301      	adds	r3, #1
    ee68:	617b      	str	r3, [r7, #20]
    ee6a:	697b      	ldr	r3, [r7, #20]
    ee6c:	2b09      	cmp	r3, #9
    ee6e:	d9e8      	bls.n	ee42 <prvInitialiseNewTask+0x3a>
    ee70:	e000      	b.n	ee74 <prvInitialiseNewTask+0x6c>
		{
			break;
    ee72:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee76:	223d      	movs	r2, #61	; 0x3d
    ee78:	2100      	movs	r1, #0
    ee7a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    ee7c:	6a3b      	ldr	r3, [r7, #32]
    ee7e:	2b04      	cmp	r3, #4
    ee80:	d901      	bls.n	ee86 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    ee82:	2304      	movs	r3, #4
    ee84:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    ee86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee88:	6a3a      	ldr	r2, [r7, #32]
    ee8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee8e:	6a3a      	ldr	r2, [r7, #32]
    ee90:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee94:	2200      	movs	r2, #0
    ee96:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee9a:	3304      	adds	r3, #4
    ee9c:	0018      	movs	r0, r3
    ee9e:	4b17      	ldr	r3, [pc, #92]	; (eefc <prvInitialiseNewTask+0xf4>)
    eea0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eea4:	3318      	adds	r3, #24
    eea6:	0018      	movs	r0, r3
    eea8:	4b14      	ldr	r3, [pc, #80]	; (eefc <prvInitialiseNewTask+0xf4>)
    eeaa:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eeae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    eeb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    eeb2:	6a3b      	ldr	r3, [r7, #32]
    eeb4:	2205      	movs	r2, #5
    eeb6:	1ad2      	subs	r2, r2, r3
    eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eeba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    eec0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    eec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eec4:	2200      	movs	r2, #0
    eec6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eeca:	224c      	movs	r2, #76	; 0x4c
    eecc:	2100      	movs	r1, #0
    eece:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    eed0:	683a      	ldr	r2, [r7, #0]
    eed2:	68f9      	ldr	r1, [r7, #12]
    eed4:	693b      	ldr	r3, [r7, #16]
    eed6:	0018      	movs	r0, r3
    eed8:	4b09      	ldr	r3, [pc, #36]	; (ef00 <prvInitialiseNewTask+0xf8>)
    eeda:	4798      	blx	r3
    eedc:	0002      	movs	r2, r0
    eede:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eee0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eee4:	2b00      	cmp	r3, #0
    eee6:	d002      	beq.n	eeee <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eeea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    eeec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    eeee:	46c0      	nop			; (mov r8, r8)
    eef0:	46bd      	mov	sp, r7
    eef2:	b006      	add	sp, #24
    eef4:	bd80      	pop	{r7, pc}
    eef6:	46c0      	nop			; (mov r8, r8)
    eef8:	3fffffff 	.word	0x3fffffff
    eefc:	0000e071 	.word	0x0000e071
    ef00:	0000dd55 	.word	0x0000dd55

0000ef04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    ef04:	b580      	push	{r7, lr}
    ef06:	b082      	sub	sp, #8
    ef08:	af00      	add	r7, sp, #0
    ef0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    ef0c:	4b29      	ldr	r3, [pc, #164]	; (efb4 <prvAddNewTaskToReadyList+0xb0>)
    ef0e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    ef10:	4b29      	ldr	r3, [pc, #164]	; (efb8 <prvAddNewTaskToReadyList+0xb4>)
    ef12:	681b      	ldr	r3, [r3, #0]
    ef14:	1c5a      	adds	r2, r3, #1
    ef16:	4b28      	ldr	r3, [pc, #160]	; (efb8 <prvAddNewTaskToReadyList+0xb4>)
    ef18:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    ef1a:	4b28      	ldr	r3, [pc, #160]	; (efbc <prvAddNewTaskToReadyList+0xb8>)
    ef1c:	681b      	ldr	r3, [r3, #0]
    ef1e:	2b00      	cmp	r3, #0
    ef20:	d109      	bne.n	ef36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    ef22:	4b26      	ldr	r3, [pc, #152]	; (efbc <prvAddNewTaskToReadyList+0xb8>)
    ef24:	687a      	ldr	r2, [r7, #4]
    ef26:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    ef28:	4b23      	ldr	r3, [pc, #140]	; (efb8 <prvAddNewTaskToReadyList+0xb4>)
    ef2a:	681b      	ldr	r3, [r3, #0]
    ef2c:	2b01      	cmp	r3, #1
    ef2e:	d110      	bne.n	ef52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    ef30:	4b23      	ldr	r3, [pc, #140]	; (efc0 <prvAddNewTaskToReadyList+0xbc>)
    ef32:	4798      	blx	r3
    ef34:	e00d      	b.n	ef52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    ef36:	4b23      	ldr	r3, [pc, #140]	; (efc4 <prvAddNewTaskToReadyList+0xc0>)
    ef38:	681b      	ldr	r3, [r3, #0]
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d109      	bne.n	ef52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    ef3e:	4b1f      	ldr	r3, [pc, #124]	; (efbc <prvAddNewTaskToReadyList+0xb8>)
    ef40:	681b      	ldr	r3, [r3, #0]
    ef42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef44:	687b      	ldr	r3, [r7, #4]
    ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef48:	429a      	cmp	r2, r3
    ef4a:	d802      	bhi.n	ef52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    ef4c:	4b1b      	ldr	r3, [pc, #108]	; (efbc <prvAddNewTaskToReadyList+0xb8>)
    ef4e:	687a      	ldr	r2, [r7, #4]
    ef50:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    ef52:	4b1d      	ldr	r3, [pc, #116]	; (efc8 <prvAddNewTaskToReadyList+0xc4>)
    ef54:	681b      	ldr	r3, [r3, #0]
    ef56:	1c5a      	adds	r2, r3, #1
    ef58:	4b1b      	ldr	r3, [pc, #108]	; (efc8 <prvAddNewTaskToReadyList+0xc4>)
    ef5a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    ef5c:	687b      	ldr	r3, [r7, #4]
    ef5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef60:	4b1a      	ldr	r3, [pc, #104]	; (efcc <prvAddNewTaskToReadyList+0xc8>)
    ef62:	681b      	ldr	r3, [r3, #0]
    ef64:	429a      	cmp	r2, r3
    ef66:	d903      	bls.n	ef70 <prvAddNewTaskToReadyList+0x6c>
    ef68:	687b      	ldr	r3, [r7, #4]
    ef6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef6c:	4b17      	ldr	r3, [pc, #92]	; (efcc <prvAddNewTaskToReadyList+0xc8>)
    ef6e:	601a      	str	r2, [r3, #0]
    ef70:	687b      	ldr	r3, [r7, #4]
    ef72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef74:	0013      	movs	r3, r2
    ef76:	009b      	lsls	r3, r3, #2
    ef78:	189b      	adds	r3, r3, r2
    ef7a:	009b      	lsls	r3, r3, #2
    ef7c:	4a14      	ldr	r2, [pc, #80]	; (efd0 <prvAddNewTaskToReadyList+0xcc>)
    ef7e:	189a      	adds	r2, r3, r2
    ef80:	687b      	ldr	r3, [r7, #4]
    ef82:	3304      	adds	r3, #4
    ef84:	0019      	movs	r1, r3
    ef86:	0010      	movs	r0, r2
    ef88:	4b12      	ldr	r3, [pc, #72]	; (efd4 <prvAddNewTaskToReadyList+0xd0>)
    ef8a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    ef8c:	4b12      	ldr	r3, [pc, #72]	; (efd8 <prvAddNewTaskToReadyList+0xd4>)
    ef8e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    ef90:	4b0c      	ldr	r3, [pc, #48]	; (efc4 <prvAddNewTaskToReadyList+0xc0>)
    ef92:	681b      	ldr	r3, [r3, #0]
    ef94:	2b00      	cmp	r3, #0
    ef96:	d008      	beq.n	efaa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    ef98:	4b08      	ldr	r3, [pc, #32]	; (efbc <prvAddNewTaskToReadyList+0xb8>)
    ef9a:	681b      	ldr	r3, [r3, #0]
    ef9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef9e:	687b      	ldr	r3, [r7, #4]
    efa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    efa2:	429a      	cmp	r2, r3
    efa4:	d201      	bcs.n	efaa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    efa6:	4b0d      	ldr	r3, [pc, #52]	; (efdc <prvAddNewTaskToReadyList+0xd8>)
    efa8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    efaa:	46c0      	nop			; (mov r8, r8)
    efac:	46bd      	mov	sp, r7
    efae:	b002      	add	sp, #8
    efb0:	bd80      	pop	{r7, pc}
    efb2:	46c0      	nop			; (mov r8, r8)
    efb4:	0000de91 	.word	0x0000de91
    efb8:	20000390 	.word	0x20000390
    efbc:	200002b8 	.word	0x200002b8
    efc0:	0000f8a9 	.word	0x0000f8a9
    efc4:	2000039c 	.word	0x2000039c
    efc8:	200003ac 	.word	0x200003ac
    efcc:	20000398 	.word	0x20000398
    efd0:	200002bc 	.word	0x200002bc
    efd4:	0000e087 	.word	0x0000e087
    efd8:	0000deb5 	.word	0x0000deb5
    efdc:	0000de71 	.word	0x0000de71

0000efe0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    efe0:	b580      	push	{r7, lr}
    efe2:	b086      	sub	sp, #24
    efe4:	af00      	add	r7, sp, #0
    efe6:	6078      	str	r0, [r7, #4]
    efe8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    efea:	2300      	movs	r3, #0
    efec:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    efee:	687b      	ldr	r3, [r7, #4]
    eff0:	2b00      	cmp	r3, #0
    eff2:	d101      	bne.n	eff8 <vTaskDelayUntil+0x18>
    eff4:	b672      	cpsid	i
    eff6:	e7fe      	b.n	eff6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    eff8:	683b      	ldr	r3, [r7, #0]
    effa:	2b00      	cmp	r3, #0
    effc:	d101      	bne.n	f002 <vTaskDelayUntil+0x22>
    effe:	b672      	cpsid	i
    f000:	e7fe      	b.n	f000 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    f002:	4b23      	ldr	r3, [pc, #140]	; (f090 <vTaskDelayUntil+0xb0>)
    f004:	681b      	ldr	r3, [r3, #0]
    f006:	2b00      	cmp	r3, #0
    f008:	d001      	beq.n	f00e <vTaskDelayUntil+0x2e>
    f00a:	b672      	cpsid	i
    f00c:	e7fe      	b.n	f00c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    f00e:	4b21      	ldr	r3, [pc, #132]	; (f094 <vTaskDelayUntil+0xb4>)
    f010:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    f012:	4b21      	ldr	r3, [pc, #132]	; (f098 <vTaskDelayUntil+0xb8>)
    f014:	681b      	ldr	r3, [r3, #0]
    f016:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    f018:	687b      	ldr	r3, [r7, #4]
    f01a:	681a      	ldr	r2, [r3, #0]
    f01c:	683b      	ldr	r3, [r7, #0]
    f01e:	18d3      	adds	r3, r2, r3
    f020:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    f022:	687b      	ldr	r3, [r7, #4]
    f024:	681a      	ldr	r2, [r3, #0]
    f026:	693b      	ldr	r3, [r7, #16]
    f028:	429a      	cmp	r2, r3
    f02a:	d90b      	bls.n	f044 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    f02c:	687b      	ldr	r3, [r7, #4]
    f02e:	681a      	ldr	r2, [r3, #0]
    f030:	68fb      	ldr	r3, [r7, #12]
    f032:	429a      	cmp	r2, r3
    f034:	d911      	bls.n	f05a <vTaskDelayUntil+0x7a>
    f036:	68fa      	ldr	r2, [r7, #12]
    f038:	693b      	ldr	r3, [r7, #16]
    f03a:	429a      	cmp	r2, r3
    f03c:	d90d      	bls.n	f05a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    f03e:	2301      	movs	r3, #1
    f040:	617b      	str	r3, [r7, #20]
    f042:	e00a      	b.n	f05a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    f044:	687b      	ldr	r3, [r7, #4]
    f046:	681a      	ldr	r2, [r3, #0]
    f048:	68fb      	ldr	r3, [r7, #12]
    f04a:	429a      	cmp	r2, r3
    f04c:	d803      	bhi.n	f056 <vTaskDelayUntil+0x76>
    f04e:	68fa      	ldr	r2, [r7, #12]
    f050:	693b      	ldr	r3, [r7, #16]
    f052:	429a      	cmp	r2, r3
    f054:	d901      	bls.n	f05a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    f056:	2301      	movs	r3, #1
    f058:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    f05a:	687b      	ldr	r3, [r7, #4]
    f05c:	68fa      	ldr	r2, [r7, #12]
    f05e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    f060:	697b      	ldr	r3, [r7, #20]
    f062:	2b00      	cmp	r3, #0
    f064:	d006      	beq.n	f074 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    f066:	68fa      	ldr	r2, [r7, #12]
    f068:	693b      	ldr	r3, [r7, #16]
    f06a:	1ad3      	subs	r3, r2, r3
    f06c:	2100      	movs	r1, #0
    f06e:	0018      	movs	r0, r3
    f070:	4b0a      	ldr	r3, [pc, #40]	; (f09c <vTaskDelayUntil+0xbc>)
    f072:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    f074:	4b0a      	ldr	r3, [pc, #40]	; (f0a0 <vTaskDelayUntil+0xc0>)
    f076:	4798      	blx	r3
    f078:	0003      	movs	r3, r0
    f07a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    f07c:	68bb      	ldr	r3, [r7, #8]
    f07e:	2b00      	cmp	r3, #0
    f080:	d101      	bne.n	f086 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    f082:	4b08      	ldr	r3, [pc, #32]	; (f0a4 <vTaskDelayUntil+0xc4>)
    f084:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    f086:	46c0      	nop			; (mov r8, r8)
    f088:	46bd      	mov	sp, r7
    f08a:	b006      	add	sp, #24
    f08c:	bd80      	pop	{r7, pc}
    f08e:	46c0      	nop			; (mov r8, r8)
    f090:	200003b8 	.word	0x200003b8
    f094:	0000f2c1 	.word	0x0000f2c1
    f098:	20000394 	.word	0x20000394
    f09c:	0000fd01 	.word	0x0000fd01
    f0a0:	0000f2d9 	.word	0x0000f2d9
    f0a4:	0000de71 	.word	0x0000de71

0000f0a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    f0a8:	b580      	push	{r7, lr}
    f0aa:	b084      	sub	sp, #16
    f0ac:	af00      	add	r7, sp, #0
    f0ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    f0b0:	2300      	movs	r3, #0
    f0b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    f0b4:	687b      	ldr	r3, [r7, #4]
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d010      	beq.n	f0dc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    f0ba:	4b0d      	ldr	r3, [pc, #52]	; (f0f0 <vTaskDelay+0x48>)
    f0bc:	681b      	ldr	r3, [r3, #0]
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d001      	beq.n	f0c6 <vTaskDelay+0x1e>
    f0c2:	b672      	cpsid	i
    f0c4:	e7fe      	b.n	f0c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    f0c6:	4b0b      	ldr	r3, [pc, #44]	; (f0f4 <vTaskDelay+0x4c>)
    f0c8:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    f0ca:	687b      	ldr	r3, [r7, #4]
    f0cc:	2100      	movs	r1, #0
    f0ce:	0018      	movs	r0, r3
    f0d0:	4b09      	ldr	r3, [pc, #36]	; (f0f8 <vTaskDelay+0x50>)
    f0d2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    f0d4:	4b09      	ldr	r3, [pc, #36]	; (f0fc <vTaskDelay+0x54>)
    f0d6:	4798      	blx	r3
    f0d8:	0003      	movs	r3, r0
    f0da:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    f0dc:	68fb      	ldr	r3, [r7, #12]
    f0de:	2b00      	cmp	r3, #0
    f0e0:	d101      	bne.n	f0e6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    f0e2:	4b07      	ldr	r3, [pc, #28]	; (f100 <vTaskDelay+0x58>)
    f0e4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    f0e6:	46c0      	nop			; (mov r8, r8)
    f0e8:	46bd      	mov	sp, r7
    f0ea:	b004      	add	sp, #16
    f0ec:	bd80      	pop	{r7, pc}
    f0ee:	46c0      	nop			; (mov r8, r8)
    f0f0:	200003b8 	.word	0x200003b8
    f0f4:	0000f2c1 	.word	0x0000f2c1
    f0f8:	0000fd01 	.word	0x0000fd01
    f0fc:	0000f2d9 	.word	0x0000f2d9
    f100:	0000de71 	.word	0x0000de71

0000f104 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    f104:	b580      	push	{r7, lr}
    f106:	b086      	sub	sp, #24
    f108:	af00      	add	r7, sp, #0
    f10a:	6078      	str	r0, [r7, #4]
    f10c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    f10e:	2300      	movs	r3, #0
    f110:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
    f112:	683b      	ldr	r3, [r7, #0]
    f114:	2b04      	cmp	r3, #4
    f116:	d901      	bls.n	f11c <vTaskPrioritySet+0x18>
    f118:	b672      	cpsid	i
    f11a:	e7fe      	b.n	f11a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    f11c:	683b      	ldr	r3, [r7, #0]
    f11e:	2b04      	cmp	r3, #4
    f120:	d901      	bls.n	f126 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    f122:	2304      	movs	r3, #4
    f124:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    f126:	4b3d      	ldr	r3, [pc, #244]	; (f21c <vTaskPrioritySet+0x118>)
    f128:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    f12a:	687b      	ldr	r3, [r7, #4]
    f12c:	2b00      	cmp	r3, #0
    f12e:	d102      	bne.n	f136 <vTaskPrioritySet+0x32>
    f130:	4b3b      	ldr	r3, [pc, #236]	; (f220 <vTaskPrioritySet+0x11c>)
    f132:	681b      	ldr	r3, [r3, #0]
    f134:	e000      	b.n	f138 <vTaskPrioritySet+0x34>
    f136:	687b      	ldr	r3, [r7, #4]
    f138:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    f13a:	693b      	ldr	r3, [r7, #16]
    f13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f13e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    f140:	68fa      	ldr	r2, [r7, #12]
    f142:	683b      	ldr	r3, [r7, #0]
    f144:	429a      	cmp	r2, r3
    f146:	d062      	beq.n	f20e <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    f148:	683a      	ldr	r2, [r7, #0]
    f14a:	68fb      	ldr	r3, [r7, #12]
    f14c:	429a      	cmp	r2, r3
    f14e:	d90d      	bls.n	f16c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
    f150:	4b33      	ldr	r3, [pc, #204]	; (f220 <vTaskPrioritySet+0x11c>)
    f152:	681b      	ldr	r3, [r3, #0]
    f154:	693a      	ldr	r2, [r7, #16]
    f156:	429a      	cmp	r2, r3
    f158:	d00f      	beq.n	f17a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    f15a:	4b31      	ldr	r3, [pc, #196]	; (f220 <vTaskPrioritySet+0x11c>)
    f15c:	681b      	ldr	r3, [r3, #0]
    f15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f160:	683b      	ldr	r3, [r7, #0]
    f162:	429a      	cmp	r2, r3
    f164:	d809      	bhi.n	f17a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
    f166:	2301      	movs	r3, #1
    f168:	617b      	str	r3, [r7, #20]
    f16a:	e006      	b.n	f17a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    f16c:	4b2c      	ldr	r3, [pc, #176]	; (f220 <vTaskPrioritySet+0x11c>)
    f16e:	681b      	ldr	r3, [r3, #0]
    f170:	693a      	ldr	r2, [r7, #16]
    f172:	429a      	cmp	r2, r3
    f174:	d101      	bne.n	f17a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    f176:	2301      	movs	r3, #1
    f178:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    f17a:	693b      	ldr	r3, [r7, #16]
    f17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f17e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    f180:	693b      	ldr	r3, [r7, #16]
    f182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f184:	693b      	ldr	r3, [r7, #16]
    f186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f188:	429a      	cmp	r2, r3
    f18a:	d102      	bne.n	f192 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    f18c:	693b      	ldr	r3, [r7, #16]
    f18e:	683a      	ldr	r2, [r7, #0]
    f190:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    f192:	693b      	ldr	r3, [r7, #16]
    f194:	683a      	ldr	r2, [r7, #0]
    f196:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    f198:	693b      	ldr	r3, [r7, #16]
    f19a:	699b      	ldr	r3, [r3, #24]
    f19c:	2b00      	cmp	r3, #0
    f19e:	db04      	blt.n	f1aa <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f1a0:	683b      	ldr	r3, [r7, #0]
    f1a2:	2205      	movs	r2, #5
    f1a4:	1ad2      	subs	r2, r2, r3
    f1a6:	693b      	ldr	r3, [r7, #16]
    f1a8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    f1aa:	693b      	ldr	r3, [r7, #16]
    f1ac:	6959      	ldr	r1, [r3, #20]
    f1ae:	68ba      	ldr	r2, [r7, #8]
    f1b0:	0013      	movs	r3, r2
    f1b2:	009b      	lsls	r3, r3, #2
    f1b4:	189b      	adds	r3, r3, r2
    f1b6:	009b      	lsls	r3, r3, #2
    f1b8:	4a1a      	ldr	r2, [pc, #104]	; (f224 <vTaskPrioritySet+0x120>)
    f1ba:	189b      	adds	r3, r3, r2
    f1bc:	4299      	cmp	r1, r3
    f1be:	d101      	bne.n	f1c4 <vTaskPrioritySet+0xc0>
    f1c0:	2301      	movs	r3, #1
    f1c2:	e000      	b.n	f1c6 <vTaskPrioritySet+0xc2>
    f1c4:	2300      	movs	r3, #0
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d01c      	beq.n	f204 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f1ca:	693b      	ldr	r3, [r7, #16]
    f1cc:	3304      	adds	r3, #4
    f1ce:	0018      	movs	r0, r3
    f1d0:	4b15      	ldr	r3, [pc, #84]	; (f228 <vTaskPrioritySet+0x124>)
    f1d2:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    f1d4:	693b      	ldr	r3, [r7, #16]
    f1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f1d8:	4b14      	ldr	r3, [pc, #80]	; (f22c <vTaskPrioritySet+0x128>)
    f1da:	681b      	ldr	r3, [r3, #0]
    f1dc:	429a      	cmp	r2, r3
    f1de:	d903      	bls.n	f1e8 <vTaskPrioritySet+0xe4>
    f1e0:	693b      	ldr	r3, [r7, #16]
    f1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f1e4:	4b11      	ldr	r3, [pc, #68]	; (f22c <vTaskPrioritySet+0x128>)
    f1e6:	601a      	str	r2, [r3, #0]
    f1e8:	693b      	ldr	r3, [r7, #16]
    f1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f1ec:	0013      	movs	r3, r2
    f1ee:	009b      	lsls	r3, r3, #2
    f1f0:	189b      	adds	r3, r3, r2
    f1f2:	009b      	lsls	r3, r3, #2
    f1f4:	4a0b      	ldr	r2, [pc, #44]	; (f224 <vTaskPrioritySet+0x120>)
    f1f6:	189a      	adds	r2, r3, r2
    f1f8:	693b      	ldr	r3, [r7, #16]
    f1fa:	3304      	adds	r3, #4
    f1fc:	0019      	movs	r1, r3
    f1fe:	0010      	movs	r0, r2
    f200:	4b0b      	ldr	r3, [pc, #44]	; (f230 <vTaskPrioritySet+0x12c>)
    f202:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    f204:	697b      	ldr	r3, [r7, #20]
    f206:	2b00      	cmp	r3, #0
    f208:	d001      	beq.n	f20e <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
    f20a:	4b0a      	ldr	r3, [pc, #40]	; (f234 <vTaskPrioritySet+0x130>)
    f20c:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    f20e:	4b0a      	ldr	r3, [pc, #40]	; (f238 <vTaskPrioritySet+0x134>)
    f210:	4798      	blx	r3
	}
    f212:	46c0      	nop			; (mov r8, r8)
    f214:	46bd      	mov	sp, r7
    f216:	b006      	add	sp, #24
    f218:	bd80      	pop	{r7, pc}
    f21a:	46c0      	nop			; (mov r8, r8)
    f21c:	0000de91 	.word	0x0000de91
    f220:	200002b8 	.word	0x200002b8
    f224:	200002bc 	.word	0x200002bc
    f228:	0000e137 	.word	0x0000e137
    f22c:	20000398 	.word	0x20000398
    f230:	0000e087 	.word	0x0000e087
    f234:	0000de71 	.word	0x0000de71
    f238:	0000deb5 	.word	0x0000deb5

0000f23c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    f23c:	b590      	push	{r4, r7, lr}
    f23e:	b085      	sub	sp, #20
    f240:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    f242:	4916      	ldr	r1, [pc, #88]	; (f29c <vTaskStartScheduler+0x60>)
    f244:	4816      	ldr	r0, [pc, #88]	; (f2a0 <vTaskStartScheduler+0x64>)
    f246:	4b17      	ldr	r3, [pc, #92]	; (f2a4 <vTaskStartScheduler+0x68>)
    f248:	9301      	str	r3, [sp, #4]
    f24a:	2300      	movs	r3, #0
    f24c:	9300      	str	r3, [sp, #0]
    f24e:	2300      	movs	r3, #0
    f250:	2282      	movs	r2, #130	; 0x82
    f252:	4c15      	ldr	r4, [pc, #84]	; (f2a8 <vTaskStartScheduler+0x6c>)
    f254:	47a0      	blx	r4
    f256:	0003      	movs	r3, r0
    f258:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    f25a:	687b      	ldr	r3, [r7, #4]
    f25c:	2b01      	cmp	r3, #1
    f25e:	d103      	bne.n	f268 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    f260:	4b12      	ldr	r3, [pc, #72]	; (f2ac <vTaskStartScheduler+0x70>)
    f262:	4798      	blx	r3
    f264:	0003      	movs	r3, r0
    f266:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    f268:	687b      	ldr	r3, [r7, #4]
    f26a:	2b01      	cmp	r3, #1
    f26c:	d10d      	bne.n	f28a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    f26e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    f270:	4b0f      	ldr	r3, [pc, #60]	; (f2b0 <vTaskStartScheduler+0x74>)
    f272:	2201      	movs	r2, #1
    f274:	4252      	negs	r2, r2
    f276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    f278:	4b0e      	ldr	r3, [pc, #56]	; (f2b4 <vTaskStartScheduler+0x78>)
    f27a:	2201      	movs	r2, #1
    f27c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    f27e:	4b0e      	ldr	r3, [pc, #56]	; (f2b8 <vTaskStartScheduler+0x7c>)
    f280:	2200      	movs	r2, #0
    f282:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    f284:	4b0d      	ldr	r3, [pc, #52]	; (f2bc <vTaskStartScheduler+0x80>)
    f286:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    f288:	e004      	b.n	f294 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    f28a:	687b      	ldr	r3, [r7, #4]
    f28c:	3301      	adds	r3, #1
    f28e:	d101      	bne.n	f294 <vTaskStartScheduler+0x58>
    f290:	b672      	cpsid	i
    f292:	e7fe      	b.n	f292 <vTaskStartScheduler+0x56>
}
    f294:	46c0      	nop			; (mov r8, r8)
    f296:	46bd      	mov	sp, r7
    f298:	b003      	add	sp, #12
    f29a:	bd90      	pop	{r4, r7, pc}
    f29c:	000198f0 	.word	0x000198f0
    f2a0:	0000f881 	.word	0x0000f881
    f2a4:	200003b4 	.word	0x200003b4
    f2a8:	0000ed69 	.word	0x0000ed69
    f2ac:	0000fdb5 	.word	0x0000fdb5
    f2b0:	200003b0 	.word	0x200003b0
    f2b4:	2000039c 	.word	0x2000039c
    f2b8:	20000394 	.word	0x20000394
    f2bc:	0000de19 	.word	0x0000de19

0000f2c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    f2c0:	b580      	push	{r7, lr}
    f2c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    f2c4:	4b03      	ldr	r3, [pc, #12]	; (f2d4 <vTaskSuspendAll+0x14>)
    f2c6:	681b      	ldr	r3, [r3, #0]
    f2c8:	1c5a      	adds	r2, r3, #1
    f2ca:	4b02      	ldr	r3, [pc, #8]	; (f2d4 <vTaskSuspendAll+0x14>)
    f2cc:	601a      	str	r2, [r3, #0]
}
    f2ce:	46c0      	nop			; (mov r8, r8)
    f2d0:	46bd      	mov	sp, r7
    f2d2:	bd80      	pop	{r7, pc}
    f2d4:	200003b8 	.word	0x200003b8

0000f2d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    f2d8:	b580      	push	{r7, lr}
    f2da:	b084      	sub	sp, #16
    f2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    f2de:	2300      	movs	r3, #0
    f2e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    f2e2:	2300      	movs	r3, #0
    f2e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    f2e6:	4b3a      	ldr	r3, [pc, #232]	; (f3d0 <xTaskResumeAll+0xf8>)
    f2e8:	681b      	ldr	r3, [r3, #0]
    f2ea:	2b00      	cmp	r3, #0
    f2ec:	d101      	bne.n	f2f2 <xTaskResumeAll+0x1a>
    f2ee:	b672      	cpsid	i
    f2f0:	e7fe      	b.n	f2f0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    f2f2:	4b38      	ldr	r3, [pc, #224]	; (f3d4 <xTaskResumeAll+0xfc>)
    f2f4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    f2f6:	4b36      	ldr	r3, [pc, #216]	; (f3d0 <xTaskResumeAll+0xf8>)
    f2f8:	681b      	ldr	r3, [r3, #0]
    f2fa:	1e5a      	subs	r2, r3, #1
    f2fc:	4b34      	ldr	r3, [pc, #208]	; (f3d0 <xTaskResumeAll+0xf8>)
    f2fe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f300:	4b33      	ldr	r3, [pc, #204]	; (f3d0 <xTaskResumeAll+0xf8>)
    f302:	681b      	ldr	r3, [r3, #0]
    f304:	2b00      	cmp	r3, #0
    f306:	d15b      	bne.n	f3c0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    f308:	4b33      	ldr	r3, [pc, #204]	; (f3d8 <xTaskResumeAll+0x100>)
    f30a:	681b      	ldr	r3, [r3, #0]
    f30c:	2b00      	cmp	r3, #0
    f30e:	d057      	beq.n	f3c0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f310:	e02f      	b.n	f372 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    f312:	4b32      	ldr	r3, [pc, #200]	; (f3dc <xTaskResumeAll+0x104>)
    f314:	68db      	ldr	r3, [r3, #12]
    f316:	68db      	ldr	r3, [r3, #12]
    f318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f31a:	68fb      	ldr	r3, [r7, #12]
    f31c:	3318      	adds	r3, #24
    f31e:	0018      	movs	r0, r3
    f320:	4b2f      	ldr	r3, [pc, #188]	; (f3e0 <xTaskResumeAll+0x108>)
    f322:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f324:	68fb      	ldr	r3, [r7, #12]
    f326:	3304      	adds	r3, #4
    f328:	0018      	movs	r0, r3
    f32a:	4b2d      	ldr	r3, [pc, #180]	; (f3e0 <xTaskResumeAll+0x108>)
    f32c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    f32e:	68fb      	ldr	r3, [r7, #12]
    f330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f332:	4b2c      	ldr	r3, [pc, #176]	; (f3e4 <xTaskResumeAll+0x10c>)
    f334:	681b      	ldr	r3, [r3, #0]
    f336:	429a      	cmp	r2, r3
    f338:	d903      	bls.n	f342 <xTaskResumeAll+0x6a>
    f33a:	68fb      	ldr	r3, [r7, #12]
    f33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f33e:	4b29      	ldr	r3, [pc, #164]	; (f3e4 <xTaskResumeAll+0x10c>)
    f340:	601a      	str	r2, [r3, #0]
    f342:	68fb      	ldr	r3, [r7, #12]
    f344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f346:	0013      	movs	r3, r2
    f348:	009b      	lsls	r3, r3, #2
    f34a:	189b      	adds	r3, r3, r2
    f34c:	009b      	lsls	r3, r3, #2
    f34e:	4a26      	ldr	r2, [pc, #152]	; (f3e8 <xTaskResumeAll+0x110>)
    f350:	189a      	adds	r2, r3, r2
    f352:	68fb      	ldr	r3, [r7, #12]
    f354:	3304      	adds	r3, #4
    f356:	0019      	movs	r1, r3
    f358:	0010      	movs	r0, r2
    f35a:	4b24      	ldr	r3, [pc, #144]	; (f3ec <xTaskResumeAll+0x114>)
    f35c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f35e:	68fb      	ldr	r3, [r7, #12]
    f360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f362:	4b23      	ldr	r3, [pc, #140]	; (f3f0 <xTaskResumeAll+0x118>)
    f364:	681b      	ldr	r3, [r3, #0]
    f366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f368:	429a      	cmp	r2, r3
    f36a:	d302      	bcc.n	f372 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    f36c:	4b21      	ldr	r3, [pc, #132]	; (f3f4 <xTaskResumeAll+0x11c>)
    f36e:	2201      	movs	r2, #1
    f370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f372:	4b1a      	ldr	r3, [pc, #104]	; (f3dc <xTaskResumeAll+0x104>)
    f374:	681b      	ldr	r3, [r3, #0]
    f376:	2b00      	cmp	r3, #0
    f378:	d1cb      	bne.n	f312 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    f37a:	68fb      	ldr	r3, [r7, #12]
    f37c:	2b00      	cmp	r3, #0
    f37e:	d001      	beq.n	f384 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    f380:	4b1d      	ldr	r3, [pc, #116]	; (f3f8 <xTaskResumeAll+0x120>)
    f382:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    f384:	4b1d      	ldr	r3, [pc, #116]	; (f3fc <xTaskResumeAll+0x124>)
    f386:	681b      	ldr	r3, [r3, #0]
    f388:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    f38a:	687b      	ldr	r3, [r7, #4]
    f38c:	2b00      	cmp	r3, #0
    f38e:	d00f      	beq.n	f3b0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    f390:	4b1b      	ldr	r3, [pc, #108]	; (f400 <xTaskResumeAll+0x128>)
    f392:	4798      	blx	r3
    f394:	1e03      	subs	r3, r0, #0
    f396:	d002      	beq.n	f39e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    f398:	4b16      	ldr	r3, [pc, #88]	; (f3f4 <xTaskResumeAll+0x11c>)
    f39a:	2201      	movs	r2, #1
    f39c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	3b01      	subs	r3, #1
    f3a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    f3a4:	687b      	ldr	r3, [r7, #4]
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d1f2      	bne.n	f390 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    f3aa:	4b14      	ldr	r3, [pc, #80]	; (f3fc <xTaskResumeAll+0x124>)
    f3ac:	2200      	movs	r2, #0
    f3ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    f3b0:	4b10      	ldr	r3, [pc, #64]	; (f3f4 <xTaskResumeAll+0x11c>)
    f3b2:	681b      	ldr	r3, [r3, #0]
    f3b4:	2b00      	cmp	r3, #0
    f3b6:	d003      	beq.n	f3c0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    f3b8:	2301      	movs	r3, #1
    f3ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    f3bc:	4b11      	ldr	r3, [pc, #68]	; (f404 <xTaskResumeAll+0x12c>)
    f3be:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    f3c0:	4b11      	ldr	r3, [pc, #68]	; (f408 <xTaskResumeAll+0x130>)
    f3c2:	4798      	blx	r3

	return xAlreadyYielded;
    f3c4:	68bb      	ldr	r3, [r7, #8]
}
    f3c6:	0018      	movs	r0, r3
    f3c8:	46bd      	mov	sp, r7
    f3ca:	b004      	add	sp, #16
    f3cc:	bd80      	pop	{r7, pc}
    f3ce:	46c0      	nop			; (mov r8, r8)
    f3d0:	200003b8 	.word	0x200003b8
    f3d4:	0000de91 	.word	0x0000de91
    f3d8:	20000390 	.word	0x20000390
    f3dc:	20000350 	.word	0x20000350
    f3e0:	0000e137 	.word	0x0000e137
    f3e4:	20000398 	.word	0x20000398
    f3e8:	200002bc 	.word	0x200002bc
    f3ec:	0000e087 	.word	0x0000e087
    f3f0:	200002b8 	.word	0x200002b8
    f3f4:	200003a4 	.word	0x200003a4
    f3f8:	0000f9c9 	.word	0x0000f9c9
    f3fc:	200003a0 	.word	0x200003a0
    f400:	0000f429 	.word	0x0000f429
    f404:	0000de71 	.word	0x0000de71
    f408:	0000deb5 	.word	0x0000deb5

0000f40c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    f40c:	b580      	push	{r7, lr}
    f40e:	b082      	sub	sp, #8
    f410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    f412:	4b04      	ldr	r3, [pc, #16]	; (f424 <xTaskGetTickCount+0x18>)
    f414:	681b      	ldr	r3, [r3, #0]
    f416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    f418:	687b      	ldr	r3, [r7, #4]
}
    f41a:	0018      	movs	r0, r3
    f41c:	46bd      	mov	sp, r7
    f41e:	b002      	add	sp, #8
    f420:	bd80      	pop	{r7, pc}
    f422:	46c0      	nop			; (mov r8, r8)
    f424:	20000394 	.word	0x20000394

0000f428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    f428:	b580      	push	{r7, lr}
    f42a:	b086      	sub	sp, #24
    f42c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    f42e:	2300      	movs	r3, #0
    f430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f432:	4b4c      	ldr	r3, [pc, #304]	; (f564 <xTaskIncrementTick+0x13c>)
    f434:	681b      	ldr	r3, [r3, #0]
    f436:	2b00      	cmp	r3, #0
    f438:	d000      	beq.n	f43c <xTaskIncrementTick+0x14>
    f43a:	e083      	b.n	f544 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    f43c:	4b4a      	ldr	r3, [pc, #296]	; (f568 <xTaskIncrementTick+0x140>)
    f43e:	681b      	ldr	r3, [r3, #0]
    f440:	3301      	adds	r3, #1
    f442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    f444:	4b48      	ldr	r3, [pc, #288]	; (f568 <xTaskIncrementTick+0x140>)
    f446:	693a      	ldr	r2, [r7, #16]
    f448:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    f44a:	693b      	ldr	r3, [r7, #16]
    f44c:	2b00      	cmp	r3, #0
    f44e:	d117      	bne.n	f480 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    f450:	4b46      	ldr	r3, [pc, #280]	; (f56c <xTaskIncrementTick+0x144>)
    f452:	681b      	ldr	r3, [r3, #0]
    f454:	681b      	ldr	r3, [r3, #0]
    f456:	2b00      	cmp	r3, #0
    f458:	d001      	beq.n	f45e <xTaskIncrementTick+0x36>
    f45a:	b672      	cpsid	i
    f45c:	e7fe      	b.n	f45c <xTaskIncrementTick+0x34>
    f45e:	4b43      	ldr	r3, [pc, #268]	; (f56c <xTaskIncrementTick+0x144>)
    f460:	681b      	ldr	r3, [r3, #0]
    f462:	60fb      	str	r3, [r7, #12]
    f464:	4b42      	ldr	r3, [pc, #264]	; (f570 <xTaskIncrementTick+0x148>)
    f466:	681a      	ldr	r2, [r3, #0]
    f468:	4b40      	ldr	r3, [pc, #256]	; (f56c <xTaskIncrementTick+0x144>)
    f46a:	601a      	str	r2, [r3, #0]
    f46c:	4b40      	ldr	r3, [pc, #256]	; (f570 <xTaskIncrementTick+0x148>)
    f46e:	68fa      	ldr	r2, [r7, #12]
    f470:	601a      	str	r2, [r3, #0]
    f472:	4b40      	ldr	r3, [pc, #256]	; (f574 <xTaskIncrementTick+0x14c>)
    f474:	681b      	ldr	r3, [r3, #0]
    f476:	1c5a      	adds	r2, r3, #1
    f478:	4b3e      	ldr	r3, [pc, #248]	; (f574 <xTaskIncrementTick+0x14c>)
    f47a:	601a      	str	r2, [r3, #0]
    f47c:	4b3e      	ldr	r3, [pc, #248]	; (f578 <xTaskIncrementTick+0x150>)
    f47e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    f480:	4b3e      	ldr	r3, [pc, #248]	; (f57c <xTaskIncrementTick+0x154>)
    f482:	681b      	ldr	r3, [r3, #0]
    f484:	693a      	ldr	r2, [r7, #16]
    f486:	429a      	cmp	r2, r3
    f488:	d34e      	bcc.n	f528 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f48a:	4b38      	ldr	r3, [pc, #224]	; (f56c <xTaskIncrementTick+0x144>)
    f48c:	681b      	ldr	r3, [r3, #0]
    f48e:	681b      	ldr	r3, [r3, #0]
    f490:	2b00      	cmp	r3, #0
    f492:	d101      	bne.n	f498 <xTaskIncrementTick+0x70>
    f494:	2301      	movs	r3, #1
    f496:	e000      	b.n	f49a <xTaskIncrementTick+0x72>
    f498:	2300      	movs	r3, #0
    f49a:	2b00      	cmp	r3, #0
    f49c:	d004      	beq.n	f4a8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f49e:	4b37      	ldr	r3, [pc, #220]	; (f57c <xTaskIncrementTick+0x154>)
    f4a0:	2201      	movs	r2, #1
    f4a2:	4252      	negs	r2, r2
    f4a4:	601a      	str	r2, [r3, #0]
					break;
    f4a6:	e03f      	b.n	f528 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f4a8:	4b30      	ldr	r3, [pc, #192]	; (f56c <xTaskIncrementTick+0x144>)
    f4aa:	681b      	ldr	r3, [r3, #0]
    f4ac:	68db      	ldr	r3, [r3, #12]
    f4ae:	68db      	ldr	r3, [r3, #12]
    f4b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    f4b2:	68bb      	ldr	r3, [r7, #8]
    f4b4:	685b      	ldr	r3, [r3, #4]
    f4b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    f4b8:	693a      	ldr	r2, [r7, #16]
    f4ba:	687b      	ldr	r3, [r7, #4]
    f4bc:	429a      	cmp	r2, r3
    f4be:	d203      	bcs.n	f4c8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    f4c0:	4b2e      	ldr	r3, [pc, #184]	; (f57c <xTaskIncrementTick+0x154>)
    f4c2:	687a      	ldr	r2, [r7, #4]
    f4c4:	601a      	str	r2, [r3, #0]
						break;
    f4c6:	e02f      	b.n	f528 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f4c8:	68bb      	ldr	r3, [r7, #8]
    f4ca:	3304      	adds	r3, #4
    f4cc:	0018      	movs	r0, r3
    f4ce:	4b2c      	ldr	r3, [pc, #176]	; (f580 <xTaskIncrementTick+0x158>)
    f4d0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    f4d2:	68bb      	ldr	r3, [r7, #8]
    f4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d004      	beq.n	f4e4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f4da:	68bb      	ldr	r3, [r7, #8]
    f4dc:	3318      	adds	r3, #24
    f4de:	0018      	movs	r0, r3
    f4e0:	4b27      	ldr	r3, [pc, #156]	; (f580 <xTaskIncrementTick+0x158>)
    f4e2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    f4e4:	68bb      	ldr	r3, [r7, #8]
    f4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f4e8:	4b26      	ldr	r3, [pc, #152]	; (f584 <xTaskIncrementTick+0x15c>)
    f4ea:	681b      	ldr	r3, [r3, #0]
    f4ec:	429a      	cmp	r2, r3
    f4ee:	d903      	bls.n	f4f8 <xTaskIncrementTick+0xd0>
    f4f0:	68bb      	ldr	r3, [r7, #8]
    f4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f4f4:	4b23      	ldr	r3, [pc, #140]	; (f584 <xTaskIncrementTick+0x15c>)
    f4f6:	601a      	str	r2, [r3, #0]
    f4f8:	68bb      	ldr	r3, [r7, #8]
    f4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f4fc:	0013      	movs	r3, r2
    f4fe:	009b      	lsls	r3, r3, #2
    f500:	189b      	adds	r3, r3, r2
    f502:	009b      	lsls	r3, r3, #2
    f504:	4a20      	ldr	r2, [pc, #128]	; (f588 <xTaskIncrementTick+0x160>)
    f506:	189a      	adds	r2, r3, r2
    f508:	68bb      	ldr	r3, [r7, #8]
    f50a:	3304      	adds	r3, #4
    f50c:	0019      	movs	r1, r3
    f50e:	0010      	movs	r0, r2
    f510:	4b1e      	ldr	r3, [pc, #120]	; (f58c <xTaskIncrementTick+0x164>)
    f512:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f514:	68bb      	ldr	r3, [r7, #8]
    f516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f518:	4b1d      	ldr	r3, [pc, #116]	; (f590 <xTaskIncrementTick+0x168>)
    f51a:	681b      	ldr	r3, [r3, #0]
    f51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f51e:	429a      	cmp	r2, r3
    f520:	d3b3      	bcc.n	f48a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    f522:	2301      	movs	r3, #1
    f524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f526:	e7b0      	b.n	f48a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    f528:	4b19      	ldr	r3, [pc, #100]	; (f590 <xTaskIncrementTick+0x168>)
    f52a:	681b      	ldr	r3, [r3, #0]
    f52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f52e:	4916      	ldr	r1, [pc, #88]	; (f588 <xTaskIncrementTick+0x160>)
    f530:	0013      	movs	r3, r2
    f532:	009b      	lsls	r3, r3, #2
    f534:	189b      	adds	r3, r3, r2
    f536:	009b      	lsls	r3, r3, #2
    f538:	585b      	ldr	r3, [r3, r1]
    f53a:	2b01      	cmp	r3, #1
    f53c:	d907      	bls.n	f54e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    f53e:	2301      	movs	r3, #1
    f540:	617b      	str	r3, [r7, #20]
    f542:	e004      	b.n	f54e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    f544:	4b13      	ldr	r3, [pc, #76]	; (f594 <xTaskIncrementTick+0x16c>)
    f546:	681b      	ldr	r3, [r3, #0]
    f548:	1c5a      	adds	r2, r3, #1
    f54a:	4b12      	ldr	r3, [pc, #72]	; (f594 <xTaskIncrementTick+0x16c>)
    f54c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    f54e:	4b12      	ldr	r3, [pc, #72]	; (f598 <xTaskIncrementTick+0x170>)
    f550:	681b      	ldr	r3, [r3, #0]
    f552:	2b00      	cmp	r3, #0
    f554:	d001      	beq.n	f55a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    f556:	2301      	movs	r3, #1
    f558:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    f55a:	697b      	ldr	r3, [r7, #20]
}
    f55c:	0018      	movs	r0, r3
    f55e:	46bd      	mov	sp, r7
    f560:	b006      	add	sp, #24
    f562:	bd80      	pop	{r7, pc}
    f564:	200003b8 	.word	0x200003b8
    f568:	20000394 	.word	0x20000394
    f56c:	20000348 	.word	0x20000348
    f570:	2000034c 	.word	0x2000034c
    f574:	200003a8 	.word	0x200003a8
    f578:	0000f9c9 	.word	0x0000f9c9
    f57c:	200003b0 	.word	0x200003b0
    f580:	0000e137 	.word	0x0000e137
    f584:	20000398 	.word	0x20000398
    f588:	200002bc 	.word	0x200002bc
    f58c:	0000e087 	.word	0x0000e087
    f590:	200002b8 	.word	0x200002b8
    f594:	200003a0 	.word	0x200003a0
    f598:	200003a4 	.word	0x200003a4

0000f59c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    f59c:	b580      	push	{r7, lr}
    f59e:	b082      	sub	sp, #8
    f5a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    f5a2:	4b22      	ldr	r3, [pc, #136]	; (f62c <vTaskSwitchContext+0x90>)
    f5a4:	681b      	ldr	r3, [r3, #0]
    f5a6:	2b00      	cmp	r3, #0
    f5a8:	d003      	beq.n	f5b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    f5aa:	4b21      	ldr	r3, [pc, #132]	; (f630 <vTaskSwitchContext+0x94>)
    f5ac:	2201      	movs	r2, #1
    f5ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    f5b0:	e037      	b.n	f622 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    f5b2:	4b1f      	ldr	r3, [pc, #124]	; (f630 <vTaskSwitchContext+0x94>)
    f5b4:	2200      	movs	r2, #0
    f5b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    f5b8:	4b1e      	ldr	r3, [pc, #120]	; (f634 <vTaskSwitchContext+0x98>)
    f5ba:	681b      	ldr	r3, [r3, #0]
    f5bc:	607b      	str	r3, [r7, #4]
    f5be:	e007      	b.n	f5d0 <vTaskSwitchContext+0x34>
    f5c0:	687b      	ldr	r3, [r7, #4]
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	d101      	bne.n	f5ca <vTaskSwitchContext+0x2e>
    f5c6:	b672      	cpsid	i
    f5c8:	e7fe      	b.n	f5c8 <vTaskSwitchContext+0x2c>
    f5ca:	687b      	ldr	r3, [r7, #4]
    f5cc:	3b01      	subs	r3, #1
    f5ce:	607b      	str	r3, [r7, #4]
    f5d0:	4919      	ldr	r1, [pc, #100]	; (f638 <vTaskSwitchContext+0x9c>)
    f5d2:	687a      	ldr	r2, [r7, #4]
    f5d4:	0013      	movs	r3, r2
    f5d6:	009b      	lsls	r3, r3, #2
    f5d8:	189b      	adds	r3, r3, r2
    f5da:	009b      	lsls	r3, r3, #2
    f5dc:	585b      	ldr	r3, [r3, r1]
    f5de:	2b00      	cmp	r3, #0
    f5e0:	d0ee      	beq.n	f5c0 <vTaskSwitchContext+0x24>
    f5e2:	687a      	ldr	r2, [r7, #4]
    f5e4:	0013      	movs	r3, r2
    f5e6:	009b      	lsls	r3, r3, #2
    f5e8:	189b      	adds	r3, r3, r2
    f5ea:	009b      	lsls	r3, r3, #2
    f5ec:	4a12      	ldr	r2, [pc, #72]	; (f638 <vTaskSwitchContext+0x9c>)
    f5ee:	189b      	adds	r3, r3, r2
    f5f0:	603b      	str	r3, [r7, #0]
    f5f2:	683b      	ldr	r3, [r7, #0]
    f5f4:	685b      	ldr	r3, [r3, #4]
    f5f6:	685a      	ldr	r2, [r3, #4]
    f5f8:	683b      	ldr	r3, [r7, #0]
    f5fa:	605a      	str	r2, [r3, #4]
    f5fc:	683b      	ldr	r3, [r7, #0]
    f5fe:	685a      	ldr	r2, [r3, #4]
    f600:	683b      	ldr	r3, [r7, #0]
    f602:	3308      	adds	r3, #8
    f604:	429a      	cmp	r2, r3
    f606:	d104      	bne.n	f612 <vTaskSwitchContext+0x76>
    f608:	683b      	ldr	r3, [r7, #0]
    f60a:	685b      	ldr	r3, [r3, #4]
    f60c:	685a      	ldr	r2, [r3, #4]
    f60e:	683b      	ldr	r3, [r7, #0]
    f610:	605a      	str	r2, [r3, #4]
    f612:	683b      	ldr	r3, [r7, #0]
    f614:	685b      	ldr	r3, [r3, #4]
    f616:	68da      	ldr	r2, [r3, #12]
    f618:	4b08      	ldr	r3, [pc, #32]	; (f63c <vTaskSwitchContext+0xa0>)
    f61a:	601a      	str	r2, [r3, #0]
    f61c:	4b05      	ldr	r3, [pc, #20]	; (f634 <vTaskSwitchContext+0x98>)
    f61e:	687a      	ldr	r2, [r7, #4]
    f620:	601a      	str	r2, [r3, #0]
}
    f622:	46c0      	nop			; (mov r8, r8)
    f624:	46bd      	mov	sp, r7
    f626:	b002      	add	sp, #8
    f628:	bd80      	pop	{r7, pc}
    f62a:	46c0      	nop			; (mov r8, r8)
    f62c:	200003b8 	.word	0x200003b8
    f630:	200003a4 	.word	0x200003a4
    f634:	20000398 	.word	0x20000398
    f638:	200002bc 	.word	0x200002bc
    f63c:	200002b8 	.word	0x200002b8

0000f640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    f640:	b580      	push	{r7, lr}
    f642:	b082      	sub	sp, #8
    f644:	af00      	add	r7, sp, #0
    f646:	6078      	str	r0, [r7, #4]
    f648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    f64a:	687b      	ldr	r3, [r7, #4]
    f64c:	2b00      	cmp	r3, #0
    f64e:	d101      	bne.n	f654 <vTaskPlaceOnEventList+0x14>
    f650:	b672      	cpsid	i
    f652:	e7fe      	b.n	f652 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f654:	4b08      	ldr	r3, [pc, #32]	; (f678 <vTaskPlaceOnEventList+0x38>)
    f656:	681b      	ldr	r3, [r3, #0]
    f658:	3318      	adds	r3, #24
    f65a:	001a      	movs	r2, r3
    f65c:	687b      	ldr	r3, [r7, #4]
    f65e:	0011      	movs	r1, r2
    f660:	0018      	movs	r0, r3
    f662:	4b06      	ldr	r3, [pc, #24]	; (f67c <vTaskPlaceOnEventList+0x3c>)
    f664:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    f666:	683b      	ldr	r3, [r7, #0]
    f668:	2101      	movs	r1, #1
    f66a:	0018      	movs	r0, r3
    f66c:	4b04      	ldr	r3, [pc, #16]	; (f680 <vTaskPlaceOnEventList+0x40>)
    f66e:	4798      	blx	r3
}
    f670:	46c0      	nop			; (mov r8, r8)
    f672:	46bd      	mov	sp, r7
    f674:	b002      	add	sp, #8
    f676:	bd80      	pop	{r7, pc}
    f678:	200002b8 	.word	0x200002b8
    f67c:	0000e0cb 	.word	0x0000e0cb
    f680:	0000fd01 	.word	0x0000fd01

0000f684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    f684:	b580      	push	{r7, lr}
    f686:	b084      	sub	sp, #16
    f688:	af00      	add	r7, sp, #0
    f68a:	60f8      	str	r0, [r7, #12]
    f68c:	60b9      	str	r1, [r7, #8]
    f68e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    f690:	68fb      	ldr	r3, [r7, #12]
    f692:	2b00      	cmp	r3, #0
    f694:	d101      	bne.n	f69a <vTaskPlaceOnEventListRestricted+0x16>
    f696:	b672      	cpsid	i
    f698:	e7fe      	b.n	f698 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f69a:	4b0c      	ldr	r3, [pc, #48]	; (f6cc <vTaskPlaceOnEventListRestricted+0x48>)
    f69c:	681b      	ldr	r3, [r3, #0]
    f69e:	3318      	adds	r3, #24
    f6a0:	001a      	movs	r2, r3
    f6a2:	68fb      	ldr	r3, [r7, #12]
    f6a4:	0011      	movs	r1, r2
    f6a6:	0018      	movs	r0, r3
    f6a8:	4b09      	ldr	r3, [pc, #36]	; (f6d0 <vTaskPlaceOnEventListRestricted+0x4c>)
    f6aa:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    f6ac:	687b      	ldr	r3, [r7, #4]
    f6ae:	2b00      	cmp	r3, #0
    f6b0:	d002      	beq.n	f6b8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    f6b2:	2301      	movs	r3, #1
    f6b4:	425b      	negs	r3, r3
    f6b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    f6b8:	687a      	ldr	r2, [r7, #4]
    f6ba:	68bb      	ldr	r3, [r7, #8]
    f6bc:	0011      	movs	r1, r2
    f6be:	0018      	movs	r0, r3
    f6c0:	4b04      	ldr	r3, [pc, #16]	; (f6d4 <vTaskPlaceOnEventListRestricted+0x50>)
    f6c2:	4798      	blx	r3
	}
    f6c4:	46c0      	nop			; (mov r8, r8)
    f6c6:	46bd      	mov	sp, r7
    f6c8:	b004      	add	sp, #16
    f6ca:	bd80      	pop	{r7, pc}
    f6cc:	200002b8 	.word	0x200002b8
    f6d0:	0000e087 	.word	0x0000e087
    f6d4:	0000fd01 	.word	0x0000fd01

0000f6d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    f6d8:	b580      	push	{r7, lr}
    f6da:	b084      	sub	sp, #16
    f6dc:	af00      	add	r7, sp, #0
    f6de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    f6e0:	687b      	ldr	r3, [r7, #4]
    f6e2:	68db      	ldr	r3, [r3, #12]
    f6e4:	68db      	ldr	r3, [r3, #12]
    f6e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    f6e8:	68bb      	ldr	r3, [r7, #8]
    f6ea:	2b00      	cmp	r3, #0
    f6ec:	d101      	bne.n	f6f2 <xTaskRemoveFromEventList+0x1a>
    f6ee:	b672      	cpsid	i
    f6f0:	e7fe      	b.n	f6f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    f6f2:	68bb      	ldr	r3, [r7, #8]
    f6f4:	3318      	adds	r3, #24
    f6f6:	0018      	movs	r0, r3
    f6f8:	4b1f      	ldr	r3, [pc, #124]	; (f778 <xTaskRemoveFromEventList+0xa0>)
    f6fa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f6fc:	4b1f      	ldr	r3, [pc, #124]	; (f77c <xTaskRemoveFromEventList+0xa4>)
    f6fe:	681b      	ldr	r3, [r3, #0]
    f700:	2b00      	cmp	r3, #0
    f702:	d11d      	bne.n	f740 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f704:	68bb      	ldr	r3, [r7, #8]
    f706:	3304      	adds	r3, #4
    f708:	0018      	movs	r0, r3
    f70a:	4b1b      	ldr	r3, [pc, #108]	; (f778 <xTaskRemoveFromEventList+0xa0>)
    f70c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    f70e:	68bb      	ldr	r3, [r7, #8]
    f710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f712:	4b1b      	ldr	r3, [pc, #108]	; (f780 <xTaskRemoveFromEventList+0xa8>)
    f714:	681b      	ldr	r3, [r3, #0]
    f716:	429a      	cmp	r2, r3
    f718:	d903      	bls.n	f722 <xTaskRemoveFromEventList+0x4a>
    f71a:	68bb      	ldr	r3, [r7, #8]
    f71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f71e:	4b18      	ldr	r3, [pc, #96]	; (f780 <xTaskRemoveFromEventList+0xa8>)
    f720:	601a      	str	r2, [r3, #0]
    f722:	68bb      	ldr	r3, [r7, #8]
    f724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f726:	0013      	movs	r3, r2
    f728:	009b      	lsls	r3, r3, #2
    f72a:	189b      	adds	r3, r3, r2
    f72c:	009b      	lsls	r3, r3, #2
    f72e:	4a15      	ldr	r2, [pc, #84]	; (f784 <xTaskRemoveFromEventList+0xac>)
    f730:	189a      	adds	r2, r3, r2
    f732:	68bb      	ldr	r3, [r7, #8]
    f734:	3304      	adds	r3, #4
    f736:	0019      	movs	r1, r3
    f738:	0010      	movs	r0, r2
    f73a:	4b13      	ldr	r3, [pc, #76]	; (f788 <xTaskRemoveFromEventList+0xb0>)
    f73c:	4798      	blx	r3
    f73e:	e007      	b.n	f750 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    f740:	68bb      	ldr	r3, [r7, #8]
    f742:	3318      	adds	r3, #24
    f744:	001a      	movs	r2, r3
    f746:	4b11      	ldr	r3, [pc, #68]	; (f78c <xTaskRemoveFromEventList+0xb4>)
    f748:	0011      	movs	r1, r2
    f74a:	0018      	movs	r0, r3
    f74c:	4b0e      	ldr	r3, [pc, #56]	; (f788 <xTaskRemoveFromEventList+0xb0>)
    f74e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    f750:	68bb      	ldr	r3, [r7, #8]
    f752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f754:	4b0e      	ldr	r3, [pc, #56]	; (f790 <xTaskRemoveFromEventList+0xb8>)
    f756:	681b      	ldr	r3, [r3, #0]
    f758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f75a:	429a      	cmp	r2, r3
    f75c:	d905      	bls.n	f76a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    f75e:	2301      	movs	r3, #1
    f760:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    f762:	4b0c      	ldr	r3, [pc, #48]	; (f794 <xTaskRemoveFromEventList+0xbc>)
    f764:	2201      	movs	r2, #1
    f766:	601a      	str	r2, [r3, #0]
    f768:	e001      	b.n	f76e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    f76a:	2300      	movs	r3, #0
    f76c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    f76e:	68fb      	ldr	r3, [r7, #12]
}
    f770:	0018      	movs	r0, r3
    f772:	46bd      	mov	sp, r7
    f774:	b004      	add	sp, #16
    f776:	bd80      	pop	{r7, pc}
    f778:	0000e137 	.word	0x0000e137
    f77c:	200003b8 	.word	0x200003b8
    f780:	20000398 	.word	0x20000398
    f784:	200002bc 	.word	0x200002bc
    f788:	0000e087 	.word	0x0000e087
    f78c:	20000350 	.word	0x20000350
    f790:	200002b8 	.word	0x200002b8
    f794:	200003a4 	.word	0x200003a4

0000f798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    f798:	b580      	push	{r7, lr}
    f79a:	b082      	sub	sp, #8
    f79c:	af00      	add	r7, sp, #0
    f79e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    f7a0:	4b05      	ldr	r3, [pc, #20]	; (f7b8 <vTaskInternalSetTimeOutState+0x20>)
    f7a2:	681a      	ldr	r2, [r3, #0]
    f7a4:	687b      	ldr	r3, [r7, #4]
    f7a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    f7a8:	4b04      	ldr	r3, [pc, #16]	; (f7bc <vTaskInternalSetTimeOutState+0x24>)
    f7aa:	681a      	ldr	r2, [r3, #0]
    f7ac:	687b      	ldr	r3, [r7, #4]
    f7ae:	605a      	str	r2, [r3, #4]
}
    f7b0:	46c0      	nop			; (mov r8, r8)
    f7b2:	46bd      	mov	sp, r7
    f7b4:	b002      	add	sp, #8
    f7b6:	bd80      	pop	{r7, pc}
    f7b8:	200003a8 	.word	0x200003a8
    f7bc:	20000394 	.word	0x20000394

0000f7c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    f7c0:	b580      	push	{r7, lr}
    f7c2:	b086      	sub	sp, #24
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	6078      	str	r0, [r7, #4]
    f7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    f7ca:	687b      	ldr	r3, [r7, #4]
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d101      	bne.n	f7d4 <xTaskCheckForTimeOut+0x14>
    f7d0:	b672      	cpsid	i
    f7d2:	e7fe      	b.n	f7d2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    f7d4:	683b      	ldr	r3, [r7, #0]
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d101      	bne.n	f7de <xTaskCheckForTimeOut+0x1e>
    f7da:	b672      	cpsid	i
    f7dc:	e7fe      	b.n	f7dc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    f7de:	4b1e      	ldr	r3, [pc, #120]	; (f858 <xTaskCheckForTimeOut+0x98>)
    f7e0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    f7e2:	4b1e      	ldr	r3, [pc, #120]	; (f85c <xTaskCheckForTimeOut+0x9c>)
    f7e4:	681b      	ldr	r3, [r3, #0]
    f7e6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    f7e8:	687b      	ldr	r3, [r7, #4]
    f7ea:	685b      	ldr	r3, [r3, #4]
    f7ec:	693a      	ldr	r2, [r7, #16]
    f7ee:	1ad3      	subs	r3, r2, r3
    f7f0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    f7f2:	683b      	ldr	r3, [r7, #0]
    f7f4:	681b      	ldr	r3, [r3, #0]
    f7f6:	3301      	adds	r3, #1
    f7f8:	d102      	bne.n	f800 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    f7fa:	2300      	movs	r3, #0
    f7fc:	617b      	str	r3, [r7, #20]
    f7fe:	e024      	b.n	f84a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    f800:	687b      	ldr	r3, [r7, #4]
    f802:	681a      	ldr	r2, [r3, #0]
    f804:	4b16      	ldr	r3, [pc, #88]	; (f860 <xTaskCheckForTimeOut+0xa0>)
    f806:	681b      	ldr	r3, [r3, #0]
    f808:	429a      	cmp	r2, r3
    f80a:	d007      	beq.n	f81c <xTaskCheckForTimeOut+0x5c>
    f80c:	687b      	ldr	r3, [r7, #4]
    f80e:	685a      	ldr	r2, [r3, #4]
    f810:	693b      	ldr	r3, [r7, #16]
    f812:	429a      	cmp	r2, r3
    f814:	d802      	bhi.n	f81c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    f816:	2301      	movs	r3, #1
    f818:	617b      	str	r3, [r7, #20]
    f81a:	e016      	b.n	f84a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    f81c:	683b      	ldr	r3, [r7, #0]
    f81e:	681a      	ldr	r2, [r3, #0]
    f820:	68fb      	ldr	r3, [r7, #12]
    f822:	429a      	cmp	r2, r3
    f824:	d90c      	bls.n	f840 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    f826:	683b      	ldr	r3, [r7, #0]
    f828:	681a      	ldr	r2, [r3, #0]
    f82a:	68fb      	ldr	r3, [r7, #12]
    f82c:	1ad2      	subs	r2, r2, r3
    f82e:	683b      	ldr	r3, [r7, #0]
    f830:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	0018      	movs	r0, r3
    f836:	4b0b      	ldr	r3, [pc, #44]	; (f864 <xTaskCheckForTimeOut+0xa4>)
    f838:	4798      	blx	r3
			xReturn = pdFALSE;
    f83a:	2300      	movs	r3, #0
    f83c:	617b      	str	r3, [r7, #20]
    f83e:	e004      	b.n	f84a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    f840:	683b      	ldr	r3, [r7, #0]
    f842:	2200      	movs	r2, #0
    f844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    f846:	2301      	movs	r3, #1
    f848:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    f84a:	4b07      	ldr	r3, [pc, #28]	; (f868 <xTaskCheckForTimeOut+0xa8>)
    f84c:	4798      	blx	r3

	return xReturn;
    f84e:	697b      	ldr	r3, [r7, #20]
}
    f850:	0018      	movs	r0, r3
    f852:	46bd      	mov	sp, r7
    f854:	b006      	add	sp, #24
    f856:	bd80      	pop	{r7, pc}
    f858:	0000de91 	.word	0x0000de91
    f85c:	20000394 	.word	0x20000394
    f860:	200003a8 	.word	0x200003a8
    f864:	0000f799 	.word	0x0000f799
    f868:	0000deb5 	.word	0x0000deb5

0000f86c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    f86c:	b580      	push	{r7, lr}
    f86e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    f870:	4b02      	ldr	r3, [pc, #8]	; (f87c <vTaskMissedYield+0x10>)
    f872:	2201      	movs	r2, #1
    f874:	601a      	str	r2, [r3, #0]
}
    f876:	46c0      	nop			; (mov r8, r8)
    f878:	46bd      	mov	sp, r7
    f87a:	bd80      	pop	{r7, pc}
    f87c:	200003a4 	.word	0x200003a4

0000f880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    f880:	b580      	push	{r7, lr}
    f882:	b082      	sub	sp, #8
    f884:	af00      	add	r7, sp, #0
    f886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    f888:	4b04      	ldr	r3, [pc, #16]	; (f89c <prvIdleTask+0x1c>)
    f88a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    f88c:	4b04      	ldr	r3, [pc, #16]	; (f8a0 <prvIdleTask+0x20>)
    f88e:	681b      	ldr	r3, [r3, #0]
    f890:	2b01      	cmp	r3, #1
    f892:	d9f9      	bls.n	f888 <prvIdleTask+0x8>
			{
				taskYIELD();
    f894:	4b03      	ldr	r3, [pc, #12]	; (f8a4 <prvIdleTask+0x24>)
    f896:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    f898:	e7f6      	b.n	f888 <prvIdleTask+0x8>
    f89a:	46c0      	nop			; (mov r8, r8)
    f89c:	0000f935 	.word	0x0000f935
    f8a0:	200002bc 	.word	0x200002bc
    f8a4:	0000de71 	.word	0x0000de71

0000f8a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    f8a8:	b580      	push	{r7, lr}
    f8aa:	b082      	sub	sp, #8
    f8ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f8ae:	2300      	movs	r3, #0
    f8b0:	607b      	str	r3, [r7, #4]
    f8b2:	e00c      	b.n	f8ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    f8b4:	687a      	ldr	r2, [r7, #4]
    f8b6:	0013      	movs	r3, r2
    f8b8:	009b      	lsls	r3, r3, #2
    f8ba:	189b      	adds	r3, r3, r2
    f8bc:	009b      	lsls	r3, r3, #2
    f8be:	4a14      	ldr	r2, [pc, #80]	; (f910 <prvInitialiseTaskLists+0x68>)
    f8c0:	189b      	adds	r3, r3, r2
    f8c2:	0018      	movs	r0, r3
    f8c4:	4b13      	ldr	r3, [pc, #76]	; (f914 <prvInitialiseTaskLists+0x6c>)
    f8c6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f8c8:	687b      	ldr	r3, [r7, #4]
    f8ca:	3301      	adds	r3, #1
    f8cc:	607b      	str	r3, [r7, #4]
    f8ce:	687b      	ldr	r3, [r7, #4]
    f8d0:	2b04      	cmp	r3, #4
    f8d2:	d9ef      	bls.n	f8b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    f8d4:	4b10      	ldr	r3, [pc, #64]	; (f918 <prvInitialiseTaskLists+0x70>)
    f8d6:	0018      	movs	r0, r3
    f8d8:	4b0e      	ldr	r3, [pc, #56]	; (f914 <prvInitialiseTaskLists+0x6c>)
    f8da:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    f8dc:	4b0f      	ldr	r3, [pc, #60]	; (f91c <prvInitialiseTaskLists+0x74>)
    f8de:	0018      	movs	r0, r3
    f8e0:	4b0c      	ldr	r3, [pc, #48]	; (f914 <prvInitialiseTaskLists+0x6c>)
    f8e2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    f8e4:	4b0e      	ldr	r3, [pc, #56]	; (f920 <prvInitialiseTaskLists+0x78>)
    f8e6:	0018      	movs	r0, r3
    f8e8:	4b0a      	ldr	r3, [pc, #40]	; (f914 <prvInitialiseTaskLists+0x6c>)
    f8ea:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    f8ec:	4b0d      	ldr	r3, [pc, #52]	; (f924 <prvInitialiseTaskLists+0x7c>)
    f8ee:	0018      	movs	r0, r3
    f8f0:	4b08      	ldr	r3, [pc, #32]	; (f914 <prvInitialiseTaskLists+0x6c>)
    f8f2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    f8f4:	4b0c      	ldr	r3, [pc, #48]	; (f928 <prvInitialiseTaskLists+0x80>)
    f8f6:	0018      	movs	r0, r3
    f8f8:	4b06      	ldr	r3, [pc, #24]	; (f914 <prvInitialiseTaskLists+0x6c>)
    f8fa:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    f8fc:	4b0b      	ldr	r3, [pc, #44]	; (f92c <prvInitialiseTaskLists+0x84>)
    f8fe:	4a06      	ldr	r2, [pc, #24]	; (f918 <prvInitialiseTaskLists+0x70>)
    f900:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    f902:	4b0b      	ldr	r3, [pc, #44]	; (f930 <prvInitialiseTaskLists+0x88>)
    f904:	4a05      	ldr	r2, [pc, #20]	; (f91c <prvInitialiseTaskLists+0x74>)
    f906:	601a      	str	r2, [r3, #0]
}
    f908:	46c0      	nop			; (mov r8, r8)
    f90a:	46bd      	mov	sp, r7
    f90c:	b002      	add	sp, #8
    f90e:	bd80      	pop	{r7, pc}
    f910:	200002bc 	.word	0x200002bc
    f914:	0000e035 	.word	0x0000e035
    f918:	20000320 	.word	0x20000320
    f91c:	20000334 	.word	0x20000334
    f920:	20000350 	.word	0x20000350
    f924:	20000364 	.word	0x20000364
    f928:	2000037c 	.word	0x2000037c
    f92c:	20000348 	.word	0x20000348
    f930:	2000034c 	.word	0x2000034c

0000f934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    f934:	b580      	push	{r7, lr}
    f936:	b082      	sub	sp, #8
    f938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f93a:	e01a      	b.n	f972 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    f93c:	4b11      	ldr	r3, [pc, #68]	; (f984 <prvCheckTasksWaitingTermination+0x50>)
    f93e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    f940:	4b11      	ldr	r3, [pc, #68]	; (f988 <prvCheckTasksWaitingTermination+0x54>)
    f942:	68db      	ldr	r3, [r3, #12]
    f944:	68db      	ldr	r3, [r3, #12]
    f946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f948:	687b      	ldr	r3, [r7, #4]
    f94a:	3304      	adds	r3, #4
    f94c:	0018      	movs	r0, r3
    f94e:	4b0f      	ldr	r3, [pc, #60]	; (f98c <prvCheckTasksWaitingTermination+0x58>)
    f950:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    f952:	4b0f      	ldr	r3, [pc, #60]	; (f990 <prvCheckTasksWaitingTermination+0x5c>)
    f954:	681b      	ldr	r3, [r3, #0]
    f956:	1e5a      	subs	r2, r3, #1
    f958:	4b0d      	ldr	r3, [pc, #52]	; (f990 <prvCheckTasksWaitingTermination+0x5c>)
    f95a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    f95c:	4b0d      	ldr	r3, [pc, #52]	; (f994 <prvCheckTasksWaitingTermination+0x60>)
    f95e:	681b      	ldr	r3, [r3, #0]
    f960:	1e5a      	subs	r2, r3, #1
    f962:	4b0c      	ldr	r3, [pc, #48]	; (f994 <prvCheckTasksWaitingTermination+0x60>)
    f964:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    f966:	4b0c      	ldr	r3, [pc, #48]	; (f998 <prvCheckTasksWaitingTermination+0x64>)
    f968:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    f96a:	687b      	ldr	r3, [r7, #4]
    f96c:	0018      	movs	r0, r3
    f96e:	4b0b      	ldr	r3, [pc, #44]	; (f99c <prvCheckTasksWaitingTermination+0x68>)
    f970:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f972:	4b08      	ldr	r3, [pc, #32]	; (f994 <prvCheckTasksWaitingTermination+0x60>)
    f974:	681b      	ldr	r3, [r3, #0]
    f976:	2b00      	cmp	r3, #0
    f978:	d1e0      	bne.n	f93c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    f97a:	46c0      	nop			; (mov r8, r8)
    f97c:	46bd      	mov	sp, r7
    f97e:	b002      	add	sp, #8
    f980:	bd80      	pop	{r7, pc}
    f982:	46c0      	nop			; (mov r8, r8)
    f984:	0000de91 	.word	0x0000de91
    f988:	20000364 	.word	0x20000364
    f98c:	0000e137 	.word	0x0000e137
    f990:	20000390 	.word	0x20000390
    f994:	20000378 	.word	0x20000378
    f998:	0000deb5 	.word	0x0000deb5
    f99c:	0000f9a1 	.word	0x0000f9a1

0000f9a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    f9a0:	b580      	push	{r7, lr}
    f9a2:	b082      	sub	sp, #8
    f9a4:	af00      	add	r7, sp, #0
    f9a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    f9a8:	687b      	ldr	r3, [r7, #4]
    f9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f9ac:	0018      	movs	r0, r3
    f9ae:	4b05      	ldr	r3, [pc, #20]	; (f9c4 <prvDeleteTCB+0x24>)
    f9b0:	4798      	blx	r3
			vPortFree( pxTCB );
    f9b2:	687b      	ldr	r3, [r7, #4]
    f9b4:	0018      	movs	r0, r3
    f9b6:	4b03      	ldr	r3, [pc, #12]	; (f9c4 <prvDeleteTCB+0x24>)
    f9b8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	46bd      	mov	sp, r7
    f9be:	b002      	add	sp, #8
    f9c0:	bd80      	pop	{r7, pc}
    f9c2:	46c0      	nop			; (mov r8, r8)
    f9c4:	0000e001 	.word	0x0000e001

0000f9c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    f9c8:	b580      	push	{r7, lr}
    f9ca:	b082      	sub	sp, #8
    f9cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f9ce:	4b0e      	ldr	r3, [pc, #56]	; (fa08 <prvResetNextTaskUnblockTime+0x40>)
    f9d0:	681b      	ldr	r3, [r3, #0]
    f9d2:	681b      	ldr	r3, [r3, #0]
    f9d4:	2b00      	cmp	r3, #0
    f9d6:	d101      	bne.n	f9dc <prvResetNextTaskUnblockTime+0x14>
    f9d8:	2301      	movs	r3, #1
    f9da:	e000      	b.n	f9de <prvResetNextTaskUnblockTime+0x16>
    f9dc:	2300      	movs	r3, #0
    f9de:	2b00      	cmp	r3, #0
    f9e0:	d004      	beq.n	f9ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    f9e2:	4b0a      	ldr	r3, [pc, #40]	; (fa0c <prvResetNextTaskUnblockTime+0x44>)
    f9e4:	2201      	movs	r2, #1
    f9e6:	4252      	negs	r2, r2
    f9e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    f9ea:	e008      	b.n	f9fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f9ec:	4b06      	ldr	r3, [pc, #24]	; (fa08 <prvResetNextTaskUnblockTime+0x40>)
    f9ee:	681b      	ldr	r3, [r3, #0]
    f9f0:	68db      	ldr	r3, [r3, #12]
    f9f2:	68db      	ldr	r3, [r3, #12]
    f9f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f9f6:	687b      	ldr	r3, [r7, #4]
    f9f8:	685a      	ldr	r2, [r3, #4]
    f9fa:	4b04      	ldr	r3, [pc, #16]	; (fa0c <prvResetNextTaskUnblockTime+0x44>)
    f9fc:	601a      	str	r2, [r3, #0]
}
    f9fe:	46c0      	nop			; (mov r8, r8)
    fa00:	46bd      	mov	sp, r7
    fa02:	b002      	add	sp, #8
    fa04:	bd80      	pop	{r7, pc}
    fa06:	46c0      	nop			; (mov r8, r8)
    fa08:	20000348 	.word	0x20000348
    fa0c:	200003b0 	.word	0x200003b0

0000fa10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    fa10:	b580      	push	{r7, lr}
    fa12:	b082      	sub	sp, #8
    fa14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    fa16:	4b0a      	ldr	r3, [pc, #40]	; (fa40 <xTaskGetSchedulerState+0x30>)
    fa18:	681b      	ldr	r3, [r3, #0]
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d102      	bne.n	fa24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    fa1e:	2301      	movs	r3, #1
    fa20:	607b      	str	r3, [r7, #4]
    fa22:	e008      	b.n	fa36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    fa24:	4b07      	ldr	r3, [pc, #28]	; (fa44 <xTaskGetSchedulerState+0x34>)
    fa26:	681b      	ldr	r3, [r3, #0]
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d102      	bne.n	fa32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    fa2c:	2302      	movs	r3, #2
    fa2e:	607b      	str	r3, [r7, #4]
    fa30:	e001      	b.n	fa36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    fa32:	2300      	movs	r3, #0
    fa34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    fa36:	687b      	ldr	r3, [r7, #4]
	}
    fa38:	0018      	movs	r0, r3
    fa3a:	46bd      	mov	sp, r7
    fa3c:	b002      	add	sp, #8
    fa3e:	bd80      	pop	{r7, pc}
    fa40:	2000039c 	.word	0x2000039c
    fa44:	200003b8 	.word	0x200003b8

0000fa48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    fa48:	b580      	push	{r7, lr}
    fa4a:	b084      	sub	sp, #16
    fa4c:	af00      	add	r7, sp, #0
    fa4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    fa50:	687b      	ldr	r3, [r7, #4]
    fa52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    fa54:	2300      	movs	r3, #0
    fa56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    fa58:	687b      	ldr	r3, [r7, #4]
    fa5a:	2b00      	cmp	r3, #0
    fa5c:	d056      	beq.n	fb0c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    fa5e:	68bb      	ldr	r3, [r7, #8]
    fa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa62:	4b2d      	ldr	r3, [pc, #180]	; (fb18 <xTaskPriorityInherit+0xd0>)
    fa64:	681b      	ldr	r3, [r3, #0]
    fa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fa68:	429a      	cmp	r2, r3
    fa6a:	d246      	bcs.n	fafa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fa6c:	68bb      	ldr	r3, [r7, #8]
    fa6e:	699b      	ldr	r3, [r3, #24]
    fa70:	2b00      	cmp	r3, #0
    fa72:	db06      	blt.n	fa82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fa74:	4b28      	ldr	r3, [pc, #160]	; (fb18 <xTaskPriorityInherit+0xd0>)
    fa76:	681b      	ldr	r3, [r3, #0]
    fa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fa7a:	2205      	movs	r2, #5
    fa7c:	1ad2      	subs	r2, r2, r3
    fa7e:	68bb      	ldr	r3, [r7, #8]
    fa80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    fa82:	68bb      	ldr	r3, [r7, #8]
    fa84:	6959      	ldr	r1, [r3, #20]
    fa86:	68bb      	ldr	r3, [r7, #8]
    fa88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa8a:	0013      	movs	r3, r2
    fa8c:	009b      	lsls	r3, r3, #2
    fa8e:	189b      	adds	r3, r3, r2
    fa90:	009b      	lsls	r3, r3, #2
    fa92:	4a22      	ldr	r2, [pc, #136]	; (fb1c <xTaskPriorityInherit+0xd4>)
    fa94:	189b      	adds	r3, r3, r2
    fa96:	4299      	cmp	r1, r3
    fa98:	d101      	bne.n	fa9e <xTaskPriorityInherit+0x56>
    fa9a:	2301      	movs	r3, #1
    fa9c:	e000      	b.n	faa0 <xTaskPriorityInherit+0x58>
    fa9e:	2300      	movs	r3, #0
    faa0:	2b00      	cmp	r3, #0
    faa2:	d022      	beq.n	faea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    faa4:	68bb      	ldr	r3, [r7, #8]
    faa6:	3304      	adds	r3, #4
    faa8:	0018      	movs	r0, r3
    faaa:	4b1d      	ldr	r3, [pc, #116]	; (fb20 <xTaskPriorityInherit+0xd8>)
    faac:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    faae:	4b1a      	ldr	r3, [pc, #104]	; (fb18 <xTaskPriorityInherit+0xd0>)
    fab0:	681b      	ldr	r3, [r3, #0]
    fab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fab4:	68bb      	ldr	r3, [r7, #8]
    fab6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    fab8:	68bb      	ldr	r3, [r7, #8]
    faba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fabc:	4b19      	ldr	r3, [pc, #100]	; (fb24 <xTaskPriorityInherit+0xdc>)
    fabe:	681b      	ldr	r3, [r3, #0]
    fac0:	429a      	cmp	r2, r3
    fac2:	d903      	bls.n	facc <xTaskPriorityInherit+0x84>
    fac4:	68bb      	ldr	r3, [r7, #8]
    fac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fac8:	4b16      	ldr	r3, [pc, #88]	; (fb24 <xTaskPriorityInherit+0xdc>)
    faca:	601a      	str	r2, [r3, #0]
    facc:	68bb      	ldr	r3, [r7, #8]
    face:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fad0:	0013      	movs	r3, r2
    fad2:	009b      	lsls	r3, r3, #2
    fad4:	189b      	adds	r3, r3, r2
    fad6:	009b      	lsls	r3, r3, #2
    fad8:	4a10      	ldr	r2, [pc, #64]	; (fb1c <xTaskPriorityInherit+0xd4>)
    fada:	189a      	adds	r2, r3, r2
    fadc:	68bb      	ldr	r3, [r7, #8]
    fade:	3304      	adds	r3, #4
    fae0:	0019      	movs	r1, r3
    fae2:	0010      	movs	r0, r2
    fae4:	4b10      	ldr	r3, [pc, #64]	; (fb28 <xTaskPriorityInherit+0xe0>)
    fae6:	4798      	blx	r3
    fae8:	e004      	b.n	faf4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    faea:	4b0b      	ldr	r3, [pc, #44]	; (fb18 <xTaskPriorityInherit+0xd0>)
    faec:	681b      	ldr	r3, [r3, #0]
    faee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    faf0:	68bb      	ldr	r3, [r7, #8]
    faf2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    faf4:	2301      	movs	r3, #1
    faf6:	60fb      	str	r3, [r7, #12]
    faf8:	e008      	b.n	fb0c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    fafa:	68bb      	ldr	r3, [r7, #8]
    fafc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    fafe:	4b06      	ldr	r3, [pc, #24]	; (fb18 <xTaskPriorityInherit+0xd0>)
    fb00:	681b      	ldr	r3, [r3, #0]
    fb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fb04:	429a      	cmp	r2, r3
    fb06:	d201      	bcs.n	fb0c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    fb08:	2301      	movs	r3, #1
    fb0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    fb0c:	68fb      	ldr	r3, [r7, #12]
	}
    fb0e:	0018      	movs	r0, r3
    fb10:	46bd      	mov	sp, r7
    fb12:	b004      	add	sp, #16
    fb14:	bd80      	pop	{r7, pc}
    fb16:	46c0      	nop			; (mov r8, r8)
    fb18:	200002b8 	.word	0x200002b8
    fb1c:	200002bc 	.word	0x200002bc
    fb20:	0000e137 	.word	0x0000e137
    fb24:	20000398 	.word	0x20000398
    fb28:	0000e087 	.word	0x0000e087

0000fb2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    fb2c:	b580      	push	{r7, lr}
    fb2e:	b084      	sub	sp, #16
    fb30:	af00      	add	r7, sp, #0
    fb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    fb34:	687b      	ldr	r3, [r7, #4]
    fb36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    fb38:	2300      	movs	r3, #0
    fb3a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    fb3c:	687b      	ldr	r3, [r7, #4]
    fb3e:	2b00      	cmp	r3, #0
    fb40:	d044      	beq.n	fbcc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    fb42:	4b25      	ldr	r3, [pc, #148]	; (fbd8 <xTaskPriorityDisinherit+0xac>)
    fb44:	681b      	ldr	r3, [r3, #0]
    fb46:	68ba      	ldr	r2, [r7, #8]
    fb48:	429a      	cmp	r2, r3
    fb4a:	d001      	beq.n	fb50 <xTaskPriorityDisinherit+0x24>
    fb4c:	b672      	cpsid	i
    fb4e:	e7fe      	b.n	fb4e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    fb50:	68bb      	ldr	r3, [r7, #8]
    fb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fb54:	2b00      	cmp	r3, #0
    fb56:	d101      	bne.n	fb5c <xTaskPriorityDisinherit+0x30>
    fb58:	b672      	cpsid	i
    fb5a:	e7fe      	b.n	fb5a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    fb5c:	68bb      	ldr	r3, [r7, #8]
    fb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fb60:	1e5a      	subs	r2, r3, #1
    fb62:	68bb      	ldr	r3, [r7, #8]
    fb64:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    fb66:	68bb      	ldr	r3, [r7, #8]
    fb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb6a:	68bb      	ldr	r3, [r7, #8]
    fb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fb6e:	429a      	cmp	r2, r3
    fb70:	d02c      	beq.n	fbcc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    fb72:	68bb      	ldr	r3, [r7, #8]
    fb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fb76:	2b00      	cmp	r3, #0
    fb78:	d128      	bne.n	fbcc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fb7a:	68bb      	ldr	r3, [r7, #8]
    fb7c:	3304      	adds	r3, #4
    fb7e:	0018      	movs	r0, r3
    fb80:	4b16      	ldr	r3, [pc, #88]	; (fbdc <xTaskPriorityDisinherit+0xb0>)
    fb82:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    fb84:	68bb      	ldr	r3, [r7, #8]
    fb86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    fb88:	68bb      	ldr	r3, [r7, #8]
    fb8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fb8c:	68bb      	ldr	r3, [r7, #8]
    fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fb90:	2205      	movs	r2, #5
    fb92:	1ad2      	subs	r2, r2, r3
    fb94:	68bb      	ldr	r3, [r7, #8]
    fb96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    fb98:	68bb      	ldr	r3, [r7, #8]
    fb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb9c:	4b10      	ldr	r3, [pc, #64]	; (fbe0 <xTaskPriorityDisinherit+0xb4>)
    fb9e:	681b      	ldr	r3, [r3, #0]
    fba0:	429a      	cmp	r2, r3
    fba2:	d903      	bls.n	fbac <xTaskPriorityDisinherit+0x80>
    fba4:	68bb      	ldr	r3, [r7, #8]
    fba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fba8:	4b0d      	ldr	r3, [pc, #52]	; (fbe0 <xTaskPriorityDisinherit+0xb4>)
    fbaa:	601a      	str	r2, [r3, #0]
    fbac:	68bb      	ldr	r3, [r7, #8]
    fbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fbb0:	0013      	movs	r3, r2
    fbb2:	009b      	lsls	r3, r3, #2
    fbb4:	189b      	adds	r3, r3, r2
    fbb6:	009b      	lsls	r3, r3, #2
    fbb8:	4a0a      	ldr	r2, [pc, #40]	; (fbe4 <xTaskPriorityDisinherit+0xb8>)
    fbba:	189a      	adds	r2, r3, r2
    fbbc:	68bb      	ldr	r3, [r7, #8]
    fbbe:	3304      	adds	r3, #4
    fbc0:	0019      	movs	r1, r3
    fbc2:	0010      	movs	r0, r2
    fbc4:	4b08      	ldr	r3, [pc, #32]	; (fbe8 <xTaskPriorityDisinherit+0xbc>)
    fbc6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    fbc8:	2301      	movs	r3, #1
    fbca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    fbcc:	68fb      	ldr	r3, [r7, #12]
	}
    fbce:	0018      	movs	r0, r3
    fbd0:	46bd      	mov	sp, r7
    fbd2:	b004      	add	sp, #16
    fbd4:	bd80      	pop	{r7, pc}
    fbd6:	46c0      	nop			; (mov r8, r8)
    fbd8:	200002b8 	.word	0x200002b8
    fbdc:	0000e137 	.word	0x0000e137
    fbe0:	20000398 	.word	0x20000398
    fbe4:	200002bc 	.word	0x200002bc
    fbe8:	0000e087 	.word	0x0000e087

0000fbec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    fbec:	b580      	push	{r7, lr}
    fbee:	b086      	sub	sp, #24
    fbf0:	af00      	add	r7, sp, #0
    fbf2:	6078      	str	r0, [r7, #4]
    fbf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    fbf6:	687b      	ldr	r3, [r7, #4]
    fbf8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    fbfa:	2301      	movs	r3, #1
    fbfc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    fbfe:	687b      	ldr	r3, [r7, #4]
    fc00:	2b00      	cmp	r3, #0
    fc02:	d05d      	beq.n	fcc0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    fc04:	693b      	ldr	r3, [r7, #16]
    fc06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fc08:	2b00      	cmp	r3, #0
    fc0a:	d101      	bne.n	fc10 <vTaskPriorityDisinheritAfterTimeout+0x24>
    fc0c:	b672      	cpsid	i
    fc0e:	e7fe      	b.n	fc0e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    fc10:	693b      	ldr	r3, [r7, #16]
    fc12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    fc14:	683b      	ldr	r3, [r7, #0]
    fc16:	429a      	cmp	r2, r3
    fc18:	d202      	bcs.n	fc20 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    fc1a:	683b      	ldr	r3, [r7, #0]
    fc1c:	617b      	str	r3, [r7, #20]
    fc1e:	e002      	b.n	fc26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    fc20:	693b      	ldr	r3, [r7, #16]
    fc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fc24:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    fc26:	693b      	ldr	r3, [r7, #16]
    fc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fc2a:	697b      	ldr	r3, [r7, #20]
    fc2c:	429a      	cmp	r2, r3
    fc2e:	d047      	beq.n	fcc0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    fc30:	693b      	ldr	r3, [r7, #16]
    fc32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fc34:	68fb      	ldr	r3, [r7, #12]
    fc36:	429a      	cmp	r2, r3
    fc38:	d142      	bne.n	fcc0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    fc3a:	4b23      	ldr	r3, [pc, #140]	; (fcc8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    fc3c:	681b      	ldr	r3, [r3, #0]
    fc3e:	693a      	ldr	r2, [r7, #16]
    fc40:	429a      	cmp	r2, r3
    fc42:	d101      	bne.n	fc48 <vTaskPriorityDisinheritAfterTimeout+0x5c>
    fc44:	b672      	cpsid	i
    fc46:	e7fe      	b.n	fc46 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    fc48:	693b      	ldr	r3, [r7, #16]
    fc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fc4c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    fc4e:	693b      	ldr	r3, [r7, #16]
    fc50:	697a      	ldr	r2, [r7, #20]
    fc52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fc54:	693b      	ldr	r3, [r7, #16]
    fc56:	699b      	ldr	r3, [r3, #24]
    fc58:	2b00      	cmp	r3, #0
    fc5a:	db04      	blt.n	fc66 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fc5c:	697b      	ldr	r3, [r7, #20]
    fc5e:	2205      	movs	r2, #5
    fc60:	1ad2      	subs	r2, r2, r3
    fc62:	693b      	ldr	r3, [r7, #16]
    fc64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    fc66:	693b      	ldr	r3, [r7, #16]
    fc68:	6959      	ldr	r1, [r3, #20]
    fc6a:	68ba      	ldr	r2, [r7, #8]
    fc6c:	0013      	movs	r3, r2
    fc6e:	009b      	lsls	r3, r3, #2
    fc70:	189b      	adds	r3, r3, r2
    fc72:	009b      	lsls	r3, r3, #2
    fc74:	4a15      	ldr	r2, [pc, #84]	; (fccc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    fc76:	189b      	adds	r3, r3, r2
    fc78:	4299      	cmp	r1, r3
    fc7a:	d101      	bne.n	fc80 <vTaskPriorityDisinheritAfterTimeout+0x94>
    fc7c:	2301      	movs	r3, #1
    fc7e:	e000      	b.n	fc82 <vTaskPriorityDisinheritAfterTimeout+0x96>
    fc80:	2300      	movs	r3, #0
    fc82:	2b00      	cmp	r3, #0
    fc84:	d01c      	beq.n	fcc0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fc86:	693b      	ldr	r3, [r7, #16]
    fc88:	3304      	adds	r3, #4
    fc8a:	0018      	movs	r0, r3
    fc8c:	4b10      	ldr	r3, [pc, #64]	; (fcd0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    fc8e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    fc90:	693b      	ldr	r3, [r7, #16]
    fc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fc94:	4b0f      	ldr	r3, [pc, #60]	; (fcd4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    fc96:	681b      	ldr	r3, [r3, #0]
    fc98:	429a      	cmp	r2, r3
    fc9a:	d903      	bls.n	fca4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
    fc9c:	693b      	ldr	r3, [r7, #16]
    fc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fca0:	4b0c      	ldr	r3, [pc, #48]	; (fcd4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    fca2:	601a      	str	r2, [r3, #0]
    fca4:	693b      	ldr	r3, [r7, #16]
    fca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fca8:	0013      	movs	r3, r2
    fcaa:	009b      	lsls	r3, r3, #2
    fcac:	189b      	adds	r3, r3, r2
    fcae:	009b      	lsls	r3, r3, #2
    fcb0:	4a06      	ldr	r2, [pc, #24]	; (fccc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    fcb2:	189a      	adds	r2, r3, r2
    fcb4:	693b      	ldr	r3, [r7, #16]
    fcb6:	3304      	adds	r3, #4
    fcb8:	0019      	movs	r1, r3
    fcba:	0010      	movs	r0, r2
    fcbc:	4b06      	ldr	r3, [pc, #24]	; (fcd8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
    fcbe:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    fcc0:	46c0      	nop			; (mov r8, r8)
    fcc2:	46bd      	mov	sp, r7
    fcc4:	b006      	add	sp, #24
    fcc6:	bd80      	pop	{r7, pc}
    fcc8:	200002b8 	.word	0x200002b8
    fccc:	200002bc 	.word	0x200002bc
    fcd0:	0000e137 	.word	0x0000e137
    fcd4:	20000398 	.word	0x20000398
    fcd8:	0000e087 	.word	0x0000e087

0000fcdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    fcdc:	b580      	push	{r7, lr}
    fcde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    fce0:	4b06      	ldr	r3, [pc, #24]	; (fcfc <pvTaskIncrementMutexHeldCount+0x20>)
    fce2:	681b      	ldr	r3, [r3, #0]
    fce4:	2b00      	cmp	r3, #0
    fce6:	d004      	beq.n	fcf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    fce8:	4b04      	ldr	r3, [pc, #16]	; (fcfc <pvTaskIncrementMutexHeldCount+0x20>)
    fcea:	681b      	ldr	r3, [r3, #0]
    fcec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fcee:	3201      	adds	r2, #1
    fcf0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    fcf2:	4b02      	ldr	r3, [pc, #8]	; (fcfc <pvTaskIncrementMutexHeldCount+0x20>)
    fcf4:	681b      	ldr	r3, [r3, #0]
	}
    fcf6:	0018      	movs	r0, r3
    fcf8:	46bd      	mov	sp, r7
    fcfa:	bd80      	pop	{r7, pc}
    fcfc:	200002b8 	.word	0x200002b8

0000fd00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    fd00:	b580      	push	{r7, lr}
    fd02:	b084      	sub	sp, #16
    fd04:	af00      	add	r7, sp, #0
    fd06:	6078      	str	r0, [r7, #4]
    fd08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    fd0a:	4b21      	ldr	r3, [pc, #132]	; (fd90 <prvAddCurrentTaskToDelayedList+0x90>)
    fd0c:	681b      	ldr	r3, [r3, #0]
    fd0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fd10:	4b20      	ldr	r3, [pc, #128]	; (fd94 <prvAddCurrentTaskToDelayedList+0x94>)
    fd12:	681b      	ldr	r3, [r3, #0]
    fd14:	3304      	adds	r3, #4
    fd16:	0018      	movs	r0, r3
    fd18:	4b1f      	ldr	r3, [pc, #124]	; (fd98 <prvAddCurrentTaskToDelayedList+0x98>)
    fd1a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    fd1c:	687b      	ldr	r3, [r7, #4]
    fd1e:	3301      	adds	r3, #1
    fd20:	d10b      	bne.n	fd3a <prvAddCurrentTaskToDelayedList+0x3a>
    fd22:	683b      	ldr	r3, [r7, #0]
    fd24:	2b00      	cmp	r3, #0
    fd26:	d008      	beq.n	fd3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fd28:	4b1a      	ldr	r3, [pc, #104]	; (fd94 <prvAddCurrentTaskToDelayedList+0x94>)
    fd2a:	681b      	ldr	r3, [r3, #0]
    fd2c:	1d1a      	adds	r2, r3, #4
    fd2e:	4b1b      	ldr	r3, [pc, #108]	; (fd9c <prvAddCurrentTaskToDelayedList+0x9c>)
    fd30:	0011      	movs	r1, r2
    fd32:	0018      	movs	r0, r3
    fd34:	4b1a      	ldr	r3, [pc, #104]	; (fda0 <prvAddCurrentTaskToDelayedList+0xa0>)
    fd36:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    fd38:	e026      	b.n	fd88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    fd3a:	68fa      	ldr	r2, [r7, #12]
    fd3c:	687b      	ldr	r3, [r7, #4]
    fd3e:	18d3      	adds	r3, r2, r3
    fd40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    fd42:	4b14      	ldr	r3, [pc, #80]	; (fd94 <prvAddCurrentTaskToDelayedList+0x94>)
    fd44:	681b      	ldr	r3, [r3, #0]
    fd46:	68ba      	ldr	r2, [r7, #8]
    fd48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    fd4a:	68ba      	ldr	r2, [r7, #8]
    fd4c:	68fb      	ldr	r3, [r7, #12]
    fd4e:	429a      	cmp	r2, r3
    fd50:	d209      	bcs.n	fd66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fd52:	4b14      	ldr	r3, [pc, #80]	; (fda4 <prvAddCurrentTaskToDelayedList+0xa4>)
    fd54:	681a      	ldr	r2, [r3, #0]
    fd56:	4b0f      	ldr	r3, [pc, #60]	; (fd94 <prvAddCurrentTaskToDelayedList+0x94>)
    fd58:	681b      	ldr	r3, [r3, #0]
    fd5a:	3304      	adds	r3, #4
    fd5c:	0019      	movs	r1, r3
    fd5e:	0010      	movs	r0, r2
    fd60:	4b11      	ldr	r3, [pc, #68]	; (fda8 <prvAddCurrentTaskToDelayedList+0xa8>)
    fd62:	4798      	blx	r3
}
    fd64:	e010      	b.n	fd88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fd66:	4b11      	ldr	r3, [pc, #68]	; (fdac <prvAddCurrentTaskToDelayedList+0xac>)
    fd68:	681a      	ldr	r2, [r3, #0]
    fd6a:	4b0a      	ldr	r3, [pc, #40]	; (fd94 <prvAddCurrentTaskToDelayedList+0x94>)
    fd6c:	681b      	ldr	r3, [r3, #0]
    fd6e:	3304      	adds	r3, #4
    fd70:	0019      	movs	r1, r3
    fd72:	0010      	movs	r0, r2
    fd74:	4b0c      	ldr	r3, [pc, #48]	; (fda8 <prvAddCurrentTaskToDelayedList+0xa8>)
    fd76:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    fd78:	4b0d      	ldr	r3, [pc, #52]	; (fdb0 <prvAddCurrentTaskToDelayedList+0xb0>)
    fd7a:	681b      	ldr	r3, [r3, #0]
    fd7c:	68ba      	ldr	r2, [r7, #8]
    fd7e:	429a      	cmp	r2, r3
    fd80:	d202      	bcs.n	fd88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    fd82:	4b0b      	ldr	r3, [pc, #44]	; (fdb0 <prvAddCurrentTaskToDelayedList+0xb0>)
    fd84:	68ba      	ldr	r2, [r7, #8]
    fd86:	601a      	str	r2, [r3, #0]
}
    fd88:	46c0      	nop			; (mov r8, r8)
    fd8a:	46bd      	mov	sp, r7
    fd8c:	b004      	add	sp, #16
    fd8e:	bd80      	pop	{r7, pc}
    fd90:	20000394 	.word	0x20000394
    fd94:	200002b8 	.word	0x200002b8
    fd98:	0000e137 	.word	0x0000e137
    fd9c:	2000037c 	.word	0x2000037c
    fda0:	0000e087 	.word	0x0000e087
    fda4:	2000034c 	.word	0x2000034c
    fda8:	0000e0cb 	.word	0x0000e0cb
    fdac:	20000348 	.word	0x20000348
    fdb0:	200003b0 	.word	0x200003b0

0000fdb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    fdb4:	b590      	push	{r4, r7, lr}
    fdb6:	b085      	sub	sp, #20
    fdb8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    fdba:	2300      	movs	r3, #0
    fdbc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    fdbe:	4b0e      	ldr	r3, [pc, #56]	; (fdf8 <xTimerCreateTimerTask+0x44>)
    fdc0:	4798      	blx	r3

	if( xTimerQueue != NULL )
    fdc2:	4b0e      	ldr	r3, [pc, #56]	; (fdfc <xTimerCreateTimerTask+0x48>)
    fdc4:	681b      	ldr	r3, [r3, #0]
    fdc6:	2b00      	cmp	r3, #0
    fdc8:	d00c      	beq.n	fde4 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    fdca:	2382      	movs	r3, #130	; 0x82
    fdcc:	005a      	lsls	r2, r3, #1
    fdce:	490c      	ldr	r1, [pc, #48]	; (fe00 <xTimerCreateTimerTask+0x4c>)
    fdd0:	480c      	ldr	r0, [pc, #48]	; (fe04 <xTimerCreateTimerTask+0x50>)
    fdd2:	4b0d      	ldr	r3, [pc, #52]	; (fe08 <xTimerCreateTimerTask+0x54>)
    fdd4:	9301      	str	r3, [sp, #4]
    fdd6:	2304      	movs	r3, #4
    fdd8:	9300      	str	r3, [sp, #0]
    fdda:	2300      	movs	r3, #0
    fddc:	4c0b      	ldr	r4, [pc, #44]	; (fe0c <xTimerCreateTimerTask+0x58>)
    fdde:	47a0      	blx	r4
    fde0:	0003      	movs	r3, r0
    fde2:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	2b00      	cmp	r3, #0
    fde8:	d101      	bne.n	fdee <xTimerCreateTimerTask+0x3a>
    fdea:	b672      	cpsid	i
    fdec:	e7fe      	b.n	fdec <xTimerCreateTimerTask+0x38>
	return xReturn;
    fdee:	687b      	ldr	r3, [r7, #4]
}
    fdf0:	0018      	movs	r0, r3
    fdf2:	46bd      	mov	sp, r7
    fdf4:	b003      	add	sp, #12
    fdf6:	bd90      	pop	{r4, r7, pc}
    fdf8:	000103c5 	.word	0x000103c5
    fdfc:	200003ec 	.word	0x200003ec
    fe00:	000198f8 	.word	0x000198f8
    fe04:	0000ffd9 	.word	0x0000ffd9
    fe08:	200003f0 	.word	0x200003f0
    fe0c:	0000ed69 	.word	0x0000ed69

0000fe10 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    fe10:	b590      	push	{r4, r7, lr}
    fe12:	b089      	sub	sp, #36	; 0x24
    fe14:	af02      	add	r7, sp, #8
    fe16:	60f8      	str	r0, [r7, #12]
    fe18:	60b9      	str	r1, [r7, #8]
    fe1a:	607a      	str	r2, [r7, #4]
    fe1c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    fe1e:	2028      	movs	r0, #40	; 0x28
    fe20:	4b0b      	ldr	r3, [pc, #44]	; (fe50 <xTimerCreate+0x40>)
    fe22:	4798      	blx	r3
    fe24:	0003      	movs	r3, r0
    fe26:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    fe28:	697b      	ldr	r3, [r7, #20]
    fe2a:	2b00      	cmp	r3, #0
    fe2c:	d00a      	beq.n	fe44 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    fe2e:	683c      	ldr	r4, [r7, #0]
    fe30:	687a      	ldr	r2, [r7, #4]
    fe32:	68b9      	ldr	r1, [r7, #8]
    fe34:	68f8      	ldr	r0, [r7, #12]
    fe36:	697b      	ldr	r3, [r7, #20]
    fe38:	9301      	str	r3, [sp, #4]
    fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe3c:	9300      	str	r3, [sp, #0]
    fe3e:	0023      	movs	r3, r4
    fe40:	4c04      	ldr	r4, [pc, #16]	; (fe54 <xTimerCreate+0x44>)
    fe42:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    fe44:	697b      	ldr	r3, [r7, #20]
	}
    fe46:	0018      	movs	r0, r3
    fe48:	46bd      	mov	sp, r7
    fe4a:	b007      	add	sp, #28
    fe4c:	bd90      	pop	{r4, r7, pc}
    fe4e:	46c0      	nop			; (mov r8, r8)
    fe50:	0000dfcd 	.word	0x0000dfcd
    fe54:	0000fe59 	.word	0x0000fe59

0000fe58 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    fe58:	b580      	push	{r7, lr}
    fe5a:	b084      	sub	sp, #16
    fe5c:	af00      	add	r7, sp, #0
    fe5e:	60f8      	str	r0, [r7, #12]
    fe60:	60b9      	str	r1, [r7, #8]
    fe62:	607a      	str	r2, [r7, #4]
    fe64:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    fe66:	68bb      	ldr	r3, [r7, #8]
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d101      	bne.n	fe70 <prvInitialiseNewTimer+0x18>
    fe6c:	b672      	cpsid	i
    fe6e:	e7fe      	b.n	fe6e <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    fe70:	69fb      	ldr	r3, [r7, #28]
    fe72:	2b00      	cmp	r3, #0
    fe74:	d015      	beq.n	fea2 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    fe76:	4b0d      	ldr	r3, [pc, #52]	; (feac <prvInitialiseNewTimer+0x54>)
    fe78:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    fe7a:	69fb      	ldr	r3, [r7, #28]
    fe7c:	68fa      	ldr	r2, [r7, #12]
    fe7e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    fe80:	69fb      	ldr	r3, [r7, #28]
    fe82:	68ba      	ldr	r2, [r7, #8]
    fe84:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    fe86:	69fb      	ldr	r3, [r7, #28]
    fe88:	687a      	ldr	r2, [r7, #4]
    fe8a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    fe8c:	69fb      	ldr	r3, [r7, #28]
    fe8e:	683a      	ldr	r2, [r7, #0]
    fe90:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    fe92:	69fb      	ldr	r3, [r7, #28]
    fe94:	69ba      	ldr	r2, [r7, #24]
    fe96:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    fe98:	69fb      	ldr	r3, [r7, #28]
    fe9a:	3304      	adds	r3, #4
    fe9c:	0018      	movs	r0, r3
    fe9e:	4b04      	ldr	r3, [pc, #16]	; (feb0 <prvInitialiseNewTimer+0x58>)
    fea0:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    fea2:	46c0      	nop			; (mov r8, r8)
    fea4:	46bd      	mov	sp, r7
    fea6:	b004      	add	sp, #16
    fea8:	bd80      	pop	{r7, pc}
    feaa:	46c0      	nop			; (mov r8, r8)
    feac:	000103c5 	.word	0x000103c5
    feb0:	0000e071 	.word	0x0000e071

0000feb4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    feb4:	b590      	push	{r4, r7, lr}
    feb6:	b08b      	sub	sp, #44	; 0x2c
    feb8:	af00      	add	r7, sp, #0
    feba:	60f8      	str	r0, [r7, #12]
    febc:	60b9      	str	r1, [r7, #8]
    febe:	607a      	str	r2, [r7, #4]
    fec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    fec2:	2300      	movs	r3, #0
    fec4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    fec6:	68fb      	ldr	r3, [r7, #12]
    fec8:	2b00      	cmp	r3, #0
    feca:	d101      	bne.n	fed0 <xTimerGenericCommand+0x1c>
    fecc:	b672      	cpsid	i
    fece:	e7fe      	b.n	fece <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    fed0:	4b1e      	ldr	r3, [pc, #120]	; (ff4c <xTimerGenericCommand+0x98>)
    fed2:	681b      	ldr	r3, [r3, #0]
    fed4:	2b00      	cmp	r3, #0
    fed6:	d033      	beq.n	ff40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    fed8:	2314      	movs	r3, #20
    feda:	18fb      	adds	r3, r7, r3
    fedc:	68ba      	ldr	r2, [r7, #8]
    fede:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    fee0:	2314      	movs	r3, #20
    fee2:	18fb      	adds	r3, r7, r3
    fee4:	687a      	ldr	r2, [r7, #4]
    fee6:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    fee8:	2314      	movs	r3, #20
    feea:	18fb      	adds	r3, r7, r3
    feec:	68fa      	ldr	r2, [r7, #12]
    feee:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    fef0:	68bb      	ldr	r3, [r7, #8]
    fef2:	2b05      	cmp	r3, #5
    fef4:	dc1a      	bgt.n	ff2c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    fef6:	4b16      	ldr	r3, [pc, #88]	; (ff50 <xTimerGenericCommand+0x9c>)
    fef8:	4798      	blx	r3
    fefa:	0003      	movs	r3, r0
    fefc:	2b02      	cmp	r3, #2
    fefe:	d10a      	bne.n	ff16 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    ff00:	4b12      	ldr	r3, [pc, #72]	; (ff4c <xTimerGenericCommand+0x98>)
    ff02:	6818      	ldr	r0, [r3, #0]
    ff04:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ff06:	2314      	movs	r3, #20
    ff08:	18f9      	adds	r1, r7, r3
    ff0a:	2300      	movs	r3, #0
    ff0c:	4c11      	ldr	r4, [pc, #68]	; (ff54 <xTimerGenericCommand+0xa0>)
    ff0e:	47a0      	blx	r4
    ff10:	0003      	movs	r3, r0
    ff12:	627b      	str	r3, [r7, #36]	; 0x24
    ff14:	e014      	b.n	ff40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    ff16:	4b0d      	ldr	r3, [pc, #52]	; (ff4c <xTimerGenericCommand+0x98>)
    ff18:	6818      	ldr	r0, [r3, #0]
    ff1a:	2314      	movs	r3, #20
    ff1c:	18f9      	adds	r1, r7, r3
    ff1e:	2300      	movs	r3, #0
    ff20:	2200      	movs	r2, #0
    ff22:	4c0c      	ldr	r4, [pc, #48]	; (ff54 <xTimerGenericCommand+0xa0>)
    ff24:	47a0      	blx	r4
    ff26:	0003      	movs	r3, r0
    ff28:	627b      	str	r3, [r7, #36]	; 0x24
    ff2a:	e009      	b.n	ff40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    ff2c:	4b07      	ldr	r3, [pc, #28]	; (ff4c <xTimerGenericCommand+0x98>)
    ff2e:	6818      	ldr	r0, [r3, #0]
    ff30:	683a      	ldr	r2, [r7, #0]
    ff32:	2314      	movs	r3, #20
    ff34:	18f9      	adds	r1, r7, r3
    ff36:	2300      	movs	r3, #0
    ff38:	4c07      	ldr	r4, [pc, #28]	; (ff58 <xTimerGenericCommand+0xa4>)
    ff3a:	47a0      	blx	r4
    ff3c:	0003      	movs	r3, r0
    ff3e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ff42:	0018      	movs	r0, r3
    ff44:	46bd      	mov	sp, r7
    ff46:	b00b      	add	sp, #44	; 0x2c
    ff48:	bd90      	pop	{r4, r7, pc}
    ff4a:	46c0      	nop			; (mov r8, r8)
    ff4c:	200003ec 	.word	0x200003ec
    ff50:	0000fa11 	.word	0x0000fa11
    ff54:	0000e301 	.word	0x0000e301
    ff58:	0000e4e1 	.word	0x0000e4e1

0000ff5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    ff5c:	b590      	push	{r4, r7, lr}
    ff5e:	b087      	sub	sp, #28
    ff60:	af02      	add	r7, sp, #8
    ff62:	6078      	str	r0, [r7, #4]
    ff64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    ff66:	4b18      	ldr	r3, [pc, #96]	; (ffc8 <prvProcessExpiredTimer+0x6c>)
    ff68:	681b      	ldr	r3, [r3, #0]
    ff6a:	68db      	ldr	r3, [r3, #12]
    ff6c:	68db      	ldr	r3, [r3, #12]
    ff6e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ff70:	68fb      	ldr	r3, [r7, #12]
    ff72:	3304      	adds	r3, #4
    ff74:	0018      	movs	r0, r3
    ff76:	4b15      	ldr	r3, [pc, #84]	; (ffcc <prvProcessExpiredTimer+0x70>)
    ff78:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ff7a:	68fb      	ldr	r3, [r7, #12]
    ff7c:	69db      	ldr	r3, [r3, #28]
    ff7e:	2b01      	cmp	r3, #1
    ff80:	d119      	bne.n	ffb6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    ff82:	68fb      	ldr	r3, [r7, #12]
    ff84:	699a      	ldr	r2, [r3, #24]
    ff86:	687b      	ldr	r3, [r7, #4]
    ff88:	18d1      	adds	r1, r2, r3
    ff8a:	687b      	ldr	r3, [r7, #4]
    ff8c:	683a      	ldr	r2, [r7, #0]
    ff8e:	68f8      	ldr	r0, [r7, #12]
    ff90:	4c0f      	ldr	r4, [pc, #60]	; (ffd0 <prvProcessExpiredTimer+0x74>)
    ff92:	47a0      	blx	r4
    ff94:	1e03      	subs	r3, r0, #0
    ff96:	d00e      	beq.n	ffb6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ff98:	687a      	ldr	r2, [r7, #4]
    ff9a:	68f8      	ldr	r0, [r7, #12]
    ff9c:	2300      	movs	r3, #0
    ff9e:	9300      	str	r3, [sp, #0]
    ffa0:	2300      	movs	r3, #0
    ffa2:	2100      	movs	r1, #0
    ffa4:	4c0b      	ldr	r4, [pc, #44]	; (ffd4 <prvProcessExpiredTimer+0x78>)
    ffa6:	47a0      	blx	r4
    ffa8:	0003      	movs	r3, r0
    ffaa:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    ffac:	68bb      	ldr	r3, [r7, #8]
    ffae:	2b00      	cmp	r3, #0
    ffb0:	d101      	bne.n	ffb6 <prvProcessExpiredTimer+0x5a>
    ffb2:	b672      	cpsid	i
    ffb4:	e7fe      	b.n	ffb4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ffb6:	68fb      	ldr	r3, [r7, #12]
    ffb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ffba:	68fa      	ldr	r2, [r7, #12]
    ffbc:	0010      	movs	r0, r2
    ffbe:	4798      	blx	r3
}
    ffc0:	46c0      	nop			; (mov r8, r8)
    ffc2:	46bd      	mov	sp, r7
    ffc4:	b005      	add	sp, #20
    ffc6:	bd90      	pop	{r4, r7, pc}
    ffc8:	200003e4 	.word	0x200003e4
    ffcc:	0000e137 	.word	0x0000e137
    ffd0:	00010139 	.word	0x00010139
    ffd4:	0000feb5 	.word	0x0000feb5

0000ffd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    ffd8:	b580      	push	{r7, lr}
    ffda:	b084      	sub	sp, #16
    ffdc:	af00      	add	r7, sp, #0
    ffde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    ffe0:	2308      	movs	r3, #8
    ffe2:	18fb      	adds	r3, r7, r3
    ffe4:	0018      	movs	r0, r3
    ffe6:	4b06      	ldr	r3, [pc, #24]	; (10000 <prvTimerTask+0x28>)
    ffe8:	4798      	blx	r3
    ffea:	0003      	movs	r3, r0
    ffec:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    ffee:	68ba      	ldr	r2, [r7, #8]
    fff0:	68fb      	ldr	r3, [r7, #12]
    fff2:	0011      	movs	r1, r2
    fff4:	0018      	movs	r0, r3
    fff6:	4b03      	ldr	r3, [pc, #12]	; (10004 <prvTimerTask+0x2c>)
    fff8:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    fffa:	4b03      	ldr	r3, [pc, #12]	; (10008 <prvTimerTask+0x30>)
    fffc:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    fffe:	e7ef      	b.n	ffe0 <prvTimerTask+0x8>
   10000:	000100b1 	.word	0x000100b1
   10004:	0001000d 	.word	0x0001000d
   10008:	000101c1 	.word	0x000101c1

0001000c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1000c:	b580      	push	{r7, lr}
   1000e:	b084      	sub	sp, #16
   10010:	af00      	add	r7, sp, #0
   10012:	6078      	str	r0, [r7, #4]
   10014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   10016:	4b1e      	ldr	r3, [pc, #120]	; (10090 <prvProcessTimerOrBlockTask+0x84>)
   10018:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1001a:	2308      	movs	r3, #8
   1001c:	18fb      	adds	r3, r7, r3
   1001e:	0018      	movs	r0, r3
   10020:	4b1c      	ldr	r3, [pc, #112]	; (10094 <prvProcessTimerOrBlockTask+0x88>)
   10022:	4798      	blx	r3
   10024:	0003      	movs	r3, r0
   10026:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   10028:	68bb      	ldr	r3, [r7, #8]
   1002a:	2b00      	cmp	r3, #0
   1002c:	d129      	bne.n	10082 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1002e:	683b      	ldr	r3, [r7, #0]
   10030:	2b00      	cmp	r3, #0
   10032:	d10c      	bne.n	1004e <prvProcessTimerOrBlockTask+0x42>
   10034:	687a      	ldr	r2, [r7, #4]
   10036:	68fb      	ldr	r3, [r7, #12]
   10038:	429a      	cmp	r2, r3
   1003a:	d808      	bhi.n	1004e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1003c:	4b16      	ldr	r3, [pc, #88]	; (10098 <prvProcessTimerOrBlockTask+0x8c>)
   1003e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   10040:	68fa      	ldr	r2, [r7, #12]
   10042:	687b      	ldr	r3, [r7, #4]
   10044:	0011      	movs	r1, r2
   10046:	0018      	movs	r0, r3
   10048:	4b14      	ldr	r3, [pc, #80]	; (1009c <prvProcessTimerOrBlockTask+0x90>)
   1004a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1004c:	e01b      	b.n	10086 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1004e:	683b      	ldr	r3, [r7, #0]
   10050:	2b00      	cmp	r3, #0
   10052:	d006      	beq.n	10062 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   10054:	4b12      	ldr	r3, [pc, #72]	; (100a0 <prvProcessTimerOrBlockTask+0x94>)
   10056:	681b      	ldr	r3, [r3, #0]
   10058:	681b      	ldr	r3, [r3, #0]
   1005a:	425a      	negs	r2, r3
   1005c:	4153      	adcs	r3, r2
   1005e:	b2db      	uxtb	r3, r3
   10060:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   10062:	4b10      	ldr	r3, [pc, #64]	; (100a4 <prvProcessTimerOrBlockTask+0x98>)
   10064:	6818      	ldr	r0, [r3, #0]
   10066:	687a      	ldr	r2, [r7, #4]
   10068:	68fb      	ldr	r3, [r7, #12]
   1006a:	1ad3      	subs	r3, r2, r3
   1006c:	683a      	ldr	r2, [r7, #0]
   1006e:	0019      	movs	r1, r3
   10070:	4b0d      	ldr	r3, [pc, #52]	; (100a8 <prvProcessTimerOrBlockTask+0x9c>)
   10072:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   10074:	4b08      	ldr	r3, [pc, #32]	; (10098 <prvProcessTimerOrBlockTask+0x8c>)
   10076:	4798      	blx	r3
   10078:	1e03      	subs	r3, r0, #0
   1007a:	d104      	bne.n	10086 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1007c:	4b0b      	ldr	r3, [pc, #44]	; (100ac <prvProcessTimerOrBlockTask+0xa0>)
   1007e:	4798      	blx	r3
}
   10080:	e001      	b.n	10086 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   10082:	4b05      	ldr	r3, [pc, #20]	; (10098 <prvProcessTimerOrBlockTask+0x8c>)
   10084:	4798      	blx	r3
}
   10086:	46c0      	nop			; (mov r8, r8)
   10088:	46bd      	mov	sp, r7
   1008a:	b004      	add	sp, #16
   1008c:	bd80      	pop	{r7, pc}
   1008e:	46c0      	nop			; (mov r8, r8)
   10090:	0000f2c1 	.word	0x0000f2c1
   10094:	000100f1 	.word	0x000100f1
   10098:	0000f2d9 	.word	0x0000f2d9
   1009c:	0000ff5d 	.word	0x0000ff5d
   100a0:	200003e8 	.word	0x200003e8
   100a4:	200003ec 	.word	0x200003ec
   100a8:	0000ec4d 	.word	0x0000ec4d
   100ac:	0000de71 	.word	0x0000de71

000100b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   100b0:	b580      	push	{r7, lr}
   100b2:	b084      	sub	sp, #16
   100b4:	af00      	add	r7, sp, #0
   100b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   100b8:	4b0c      	ldr	r3, [pc, #48]	; (100ec <prvGetNextExpireTime+0x3c>)
   100ba:	681b      	ldr	r3, [r3, #0]
   100bc:	681b      	ldr	r3, [r3, #0]
   100be:	425a      	negs	r2, r3
   100c0:	4153      	adcs	r3, r2
   100c2:	b2db      	uxtb	r3, r3
   100c4:	001a      	movs	r2, r3
   100c6:	687b      	ldr	r3, [r7, #4]
   100c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   100ca:	687b      	ldr	r3, [r7, #4]
   100cc:	681b      	ldr	r3, [r3, #0]
   100ce:	2b00      	cmp	r3, #0
   100d0:	d105      	bne.n	100de <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   100d2:	4b06      	ldr	r3, [pc, #24]	; (100ec <prvGetNextExpireTime+0x3c>)
   100d4:	681b      	ldr	r3, [r3, #0]
   100d6:	68db      	ldr	r3, [r3, #12]
   100d8:	681b      	ldr	r3, [r3, #0]
   100da:	60fb      	str	r3, [r7, #12]
   100dc:	e001      	b.n	100e2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   100de:	2300      	movs	r3, #0
   100e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   100e2:	68fb      	ldr	r3, [r7, #12]
}
   100e4:	0018      	movs	r0, r3
   100e6:	46bd      	mov	sp, r7
   100e8:	b004      	add	sp, #16
   100ea:	bd80      	pop	{r7, pc}
   100ec:	200003e4 	.word	0x200003e4

000100f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   100f0:	b580      	push	{r7, lr}
   100f2:	b084      	sub	sp, #16
   100f4:	af00      	add	r7, sp, #0
   100f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   100f8:	4b0c      	ldr	r3, [pc, #48]	; (1012c <prvSampleTimeNow+0x3c>)
   100fa:	4798      	blx	r3
   100fc:	0003      	movs	r3, r0
   100fe:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   10100:	4b0b      	ldr	r3, [pc, #44]	; (10130 <prvSampleTimeNow+0x40>)
   10102:	681b      	ldr	r3, [r3, #0]
   10104:	68fa      	ldr	r2, [r7, #12]
   10106:	429a      	cmp	r2, r3
   10108:	d205      	bcs.n	10116 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1010a:	4b0a      	ldr	r3, [pc, #40]	; (10134 <prvSampleTimeNow+0x44>)
   1010c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1010e:	687b      	ldr	r3, [r7, #4]
   10110:	2201      	movs	r2, #1
   10112:	601a      	str	r2, [r3, #0]
   10114:	e002      	b.n	1011c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   10116:	687b      	ldr	r3, [r7, #4]
   10118:	2200      	movs	r2, #0
   1011a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1011c:	4b04      	ldr	r3, [pc, #16]	; (10130 <prvSampleTimeNow+0x40>)
   1011e:	68fa      	ldr	r2, [r7, #12]
   10120:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   10122:	68fb      	ldr	r3, [r7, #12]
}
   10124:	0018      	movs	r0, r3
   10126:	46bd      	mov	sp, r7
   10128:	b004      	add	sp, #16
   1012a:	bd80      	pop	{r7, pc}
   1012c:	0000f40d 	.word	0x0000f40d
   10130:	200003f4 	.word	0x200003f4
   10134:	00010305 	.word	0x00010305

00010138 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   10138:	b580      	push	{r7, lr}
   1013a:	b086      	sub	sp, #24
   1013c:	af00      	add	r7, sp, #0
   1013e:	60f8      	str	r0, [r7, #12]
   10140:	60b9      	str	r1, [r7, #8]
   10142:	607a      	str	r2, [r7, #4]
   10144:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   10146:	2300      	movs	r3, #0
   10148:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1014a:	68fb      	ldr	r3, [r7, #12]
   1014c:	68ba      	ldr	r2, [r7, #8]
   1014e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   10150:	68fb      	ldr	r3, [r7, #12]
   10152:	68fa      	ldr	r2, [r7, #12]
   10154:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   10156:	68ba      	ldr	r2, [r7, #8]
   10158:	687b      	ldr	r3, [r7, #4]
   1015a:	429a      	cmp	r2, r3
   1015c:	d812      	bhi.n	10184 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1015e:	687a      	ldr	r2, [r7, #4]
   10160:	683b      	ldr	r3, [r7, #0]
   10162:	1ad2      	subs	r2, r2, r3
   10164:	68fb      	ldr	r3, [r7, #12]
   10166:	699b      	ldr	r3, [r3, #24]
   10168:	429a      	cmp	r2, r3
   1016a:	d302      	bcc.n	10172 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1016c:	2301      	movs	r3, #1
   1016e:	617b      	str	r3, [r7, #20]
   10170:	e01b      	b.n	101aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   10172:	4b10      	ldr	r3, [pc, #64]	; (101b4 <prvInsertTimerInActiveList+0x7c>)
   10174:	681a      	ldr	r2, [r3, #0]
   10176:	68fb      	ldr	r3, [r7, #12]
   10178:	3304      	adds	r3, #4
   1017a:	0019      	movs	r1, r3
   1017c:	0010      	movs	r0, r2
   1017e:	4b0e      	ldr	r3, [pc, #56]	; (101b8 <prvInsertTimerInActiveList+0x80>)
   10180:	4798      	blx	r3
   10182:	e012      	b.n	101aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   10184:	687a      	ldr	r2, [r7, #4]
   10186:	683b      	ldr	r3, [r7, #0]
   10188:	429a      	cmp	r2, r3
   1018a:	d206      	bcs.n	1019a <prvInsertTimerInActiveList+0x62>
   1018c:	68ba      	ldr	r2, [r7, #8]
   1018e:	683b      	ldr	r3, [r7, #0]
   10190:	429a      	cmp	r2, r3
   10192:	d302      	bcc.n	1019a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   10194:	2301      	movs	r3, #1
   10196:	617b      	str	r3, [r7, #20]
   10198:	e007      	b.n	101aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1019a:	4b08      	ldr	r3, [pc, #32]	; (101bc <prvInsertTimerInActiveList+0x84>)
   1019c:	681a      	ldr	r2, [r3, #0]
   1019e:	68fb      	ldr	r3, [r7, #12]
   101a0:	3304      	adds	r3, #4
   101a2:	0019      	movs	r1, r3
   101a4:	0010      	movs	r0, r2
   101a6:	4b04      	ldr	r3, [pc, #16]	; (101b8 <prvInsertTimerInActiveList+0x80>)
   101a8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   101aa:	697b      	ldr	r3, [r7, #20]
}
   101ac:	0018      	movs	r0, r3
   101ae:	46bd      	mov	sp, r7
   101b0:	b006      	add	sp, #24
   101b2:	bd80      	pop	{r7, pc}
   101b4:	200003e8 	.word	0x200003e8
   101b8:	0000e0cb 	.word	0x0000e0cb
   101bc:	200003e4 	.word	0x200003e4

000101c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   101c0:	b590      	push	{r4, r7, lr}
   101c2:	b08d      	sub	sp, #52	; 0x34
   101c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   101c6:	e07e      	b.n	102c6 <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   101c8:	2308      	movs	r3, #8
   101ca:	18fb      	adds	r3, r7, r3
   101cc:	681b      	ldr	r3, [r3, #0]
   101ce:	2b00      	cmp	r3, #0
   101d0:	da10      	bge.n	101f4 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   101d2:	2308      	movs	r3, #8
   101d4:	18fb      	adds	r3, r7, r3
   101d6:	3304      	adds	r3, #4
   101d8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101dc:	2b00      	cmp	r3, #0
   101de:	d101      	bne.n	101e4 <prvProcessReceivedCommands+0x24>
   101e0:	b672      	cpsid	i
   101e2:	e7fe      	b.n	101e2 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101e6:	681a      	ldr	r2, [r3, #0]
   101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101ea:	6858      	ldr	r0, [r3, #4]
   101ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101ee:	689b      	ldr	r3, [r3, #8]
   101f0:	0019      	movs	r1, r3
   101f2:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   101f4:	2308      	movs	r3, #8
   101f6:	18fb      	adds	r3, r7, r3
   101f8:	681b      	ldr	r3, [r3, #0]
   101fa:	2b00      	cmp	r3, #0
   101fc:	db63      	blt.n	102c6 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   101fe:	2308      	movs	r3, #8
   10200:	18fb      	adds	r3, r7, r3
   10202:	689b      	ldr	r3, [r3, #8]
   10204:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   10206:	6a3b      	ldr	r3, [r7, #32]
   10208:	695b      	ldr	r3, [r3, #20]
   1020a:	2b00      	cmp	r3, #0
   1020c:	d004      	beq.n	10218 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1020e:	6a3b      	ldr	r3, [r7, #32]
   10210:	3304      	adds	r3, #4
   10212:	0018      	movs	r0, r3
   10214:	4b33      	ldr	r3, [pc, #204]	; (102e4 <prvProcessReceivedCommands+0x124>)
   10216:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   10218:	1d3b      	adds	r3, r7, #4
   1021a:	0018      	movs	r0, r3
   1021c:	4b32      	ldr	r3, [pc, #200]	; (102e8 <prvProcessReceivedCommands+0x128>)
   1021e:	4798      	blx	r3
   10220:	0003      	movs	r3, r0
   10222:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   10224:	2308      	movs	r3, #8
   10226:	18fb      	adds	r3, r7, r3
   10228:	681b      	ldr	r3, [r3, #0]
   1022a:	2b09      	cmp	r3, #9
   1022c:	d84a      	bhi.n	102c4 <prvProcessReceivedCommands+0x104>
   1022e:	009a      	lsls	r2, r3, #2
   10230:	4b2e      	ldr	r3, [pc, #184]	; (102ec <prvProcessReceivedCommands+0x12c>)
   10232:	18d3      	adds	r3, r2, r3
   10234:	681b      	ldr	r3, [r3, #0]
   10236:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   10238:	2308      	movs	r3, #8
   1023a:	18fb      	adds	r3, r7, r3
   1023c:	685a      	ldr	r2, [r3, #4]
   1023e:	6a3b      	ldr	r3, [r7, #32]
   10240:	699b      	ldr	r3, [r3, #24]
   10242:	18d1      	adds	r1, r2, r3
   10244:	2308      	movs	r3, #8
   10246:	18fb      	adds	r3, r7, r3
   10248:	685b      	ldr	r3, [r3, #4]
   1024a:	69fa      	ldr	r2, [r7, #28]
   1024c:	6a38      	ldr	r0, [r7, #32]
   1024e:	4c28      	ldr	r4, [pc, #160]	; (102f0 <prvProcessReceivedCommands+0x130>)
   10250:	47a0      	blx	r4
   10252:	1e03      	subs	r3, r0, #0
   10254:	d037      	beq.n	102c6 <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   10256:	6a3b      	ldr	r3, [r7, #32]
   10258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1025a:	6a3a      	ldr	r2, [r7, #32]
   1025c:	0010      	movs	r0, r2
   1025e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   10260:	6a3b      	ldr	r3, [r7, #32]
   10262:	69db      	ldr	r3, [r3, #28]
   10264:	2b01      	cmp	r3, #1
   10266:	d12e      	bne.n	102c6 <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   10268:	2308      	movs	r3, #8
   1026a:	18fb      	adds	r3, r7, r3
   1026c:	685a      	ldr	r2, [r3, #4]
   1026e:	6a3b      	ldr	r3, [r7, #32]
   10270:	699b      	ldr	r3, [r3, #24]
   10272:	18d2      	adds	r2, r2, r3
   10274:	6a38      	ldr	r0, [r7, #32]
   10276:	2300      	movs	r3, #0
   10278:	9300      	str	r3, [sp, #0]
   1027a:	2300      	movs	r3, #0
   1027c:	2100      	movs	r1, #0
   1027e:	4c1d      	ldr	r4, [pc, #116]	; (102f4 <prvProcessReceivedCommands+0x134>)
   10280:	47a0      	blx	r4
   10282:	0003      	movs	r3, r0
   10284:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   10286:	69bb      	ldr	r3, [r7, #24]
   10288:	2b00      	cmp	r3, #0
   1028a:	d11c      	bne.n	102c6 <prvProcessReceivedCommands+0x106>
   1028c:	b672      	cpsid	i
   1028e:	e7fe      	b.n	1028e <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   10290:	2308      	movs	r3, #8
   10292:	18fb      	adds	r3, r7, r3
   10294:	685a      	ldr	r2, [r3, #4]
   10296:	6a3b      	ldr	r3, [r7, #32]
   10298:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1029a:	6a3b      	ldr	r3, [r7, #32]
   1029c:	699b      	ldr	r3, [r3, #24]
   1029e:	2b00      	cmp	r3, #0
   102a0:	d101      	bne.n	102a6 <prvProcessReceivedCommands+0xe6>
   102a2:	b672      	cpsid	i
   102a4:	e7fe      	b.n	102a4 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   102a6:	6a3b      	ldr	r3, [r7, #32]
   102a8:	699a      	ldr	r2, [r3, #24]
   102aa:	69fb      	ldr	r3, [r7, #28]
   102ac:	18d1      	adds	r1, r2, r3
   102ae:	69fb      	ldr	r3, [r7, #28]
   102b0:	69fa      	ldr	r2, [r7, #28]
   102b2:	6a38      	ldr	r0, [r7, #32]
   102b4:	4c0e      	ldr	r4, [pc, #56]	; (102f0 <prvProcessReceivedCommands+0x130>)
   102b6:	47a0      	blx	r4
					break;
   102b8:	e005      	b.n	102c6 <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   102ba:	6a3b      	ldr	r3, [r7, #32]
   102bc:	0018      	movs	r0, r3
   102be:	4b0e      	ldr	r3, [pc, #56]	; (102f8 <prvProcessReceivedCommands+0x138>)
   102c0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   102c2:	e000      	b.n	102c6 <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   102c4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   102c6:	4b0d      	ldr	r3, [pc, #52]	; (102fc <prvProcessReceivedCommands+0x13c>)
   102c8:	681b      	ldr	r3, [r3, #0]
   102ca:	2208      	movs	r2, #8
   102cc:	18b9      	adds	r1, r7, r2
   102ce:	2200      	movs	r2, #0
   102d0:	0018      	movs	r0, r3
   102d2:	4b0b      	ldr	r3, [pc, #44]	; (10300 <prvProcessReceivedCommands+0x140>)
   102d4:	4798      	blx	r3
   102d6:	1e03      	subs	r3, r0, #0
   102d8:	d000      	beq.n	102dc <prvProcessReceivedCommands+0x11c>
   102da:	e775      	b.n	101c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   102dc:	46c0      	nop			; (mov r8, r8)
   102de:	46bd      	mov	sp, r7
   102e0:	b00b      	add	sp, #44	; 0x2c
   102e2:	bd90      	pop	{r4, r7, pc}
   102e4:	0000e137 	.word	0x0000e137
   102e8:	000100f1 	.word	0x000100f1
   102ec:	00019900 	.word	0x00019900
   102f0:	00010139 	.word	0x00010139
   102f4:	0000feb5 	.word	0x0000feb5
   102f8:	0000e001 	.word	0x0000e001
   102fc:	200003ec 	.word	0x200003ec
   10300:	0000e601 	.word	0x0000e601

00010304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   10304:	b590      	push	{r4, r7, lr}
   10306:	b089      	sub	sp, #36	; 0x24
   10308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1030a:	e03e      	b.n	1038a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1030c:	4b28      	ldr	r3, [pc, #160]	; (103b0 <prvSwitchTimerLists+0xac>)
   1030e:	681b      	ldr	r3, [r3, #0]
   10310:	68db      	ldr	r3, [r3, #12]
   10312:	681b      	ldr	r3, [r3, #0]
   10314:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   10316:	4b26      	ldr	r3, [pc, #152]	; (103b0 <prvSwitchTimerLists+0xac>)
   10318:	681b      	ldr	r3, [r3, #0]
   1031a:	68db      	ldr	r3, [r3, #12]
   1031c:	68db      	ldr	r3, [r3, #12]
   1031e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   10320:	693b      	ldr	r3, [r7, #16]
   10322:	3304      	adds	r3, #4
   10324:	0018      	movs	r0, r3
   10326:	4b23      	ldr	r3, [pc, #140]	; (103b4 <prvSwitchTimerLists+0xb0>)
   10328:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1032a:	693b      	ldr	r3, [r7, #16]
   1032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1032e:	693a      	ldr	r2, [r7, #16]
   10330:	0010      	movs	r0, r2
   10332:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   10334:	693b      	ldr	r3, [r7, #16]
   10336:	69db      	ldr	r3, [r3, #28]
   10338:	2b01      	cmp	r3, #1
   1033a:	d126      	bne.n	1038a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1033c:	693b      	ldr	r3, [r7, #16]
   1033e:	699a      	ldr	r2, [r3, #24]
   10340:	697b      	ldr	r3, [r7, #20]
   10342:	18d3      	adds	r3, r2, r3
   10344:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   10346:	68fa      	ldr	r2, [r7, #12]
   10348:	697b      	ldr	r3, [r7, #20]
   1034a:	429a      	cmp	r2, r3
   1034c:	d90e      	bls.n	1036c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1034e:	693b      	ldr	r3, [r7, #16]
   10350:	68fa      	ldr	r2, [r7, #12]
   10352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   10354:	693b      	ldr	r3, [r7, #16]
   10356:	693a      	ldr	r2, [r7, #16]
   10358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1035a:	4b15      	ldr	r3, [pc, #84]	; (103b0 <prvSwitchTimerLists+0xac>)
   1035c:	681a      	ldr	r2, [r3, #0]
   1035e:	693b      	ldr	r3, [r7, #16]
   10360:	3304      	adds	r3, #4
   10362:	0019      	movs	r1, r3
   10364:	0010      	movs	r0, r2
   10366:	4b14      	ldr	r3, [pc, #80]	; (103b8 <prvSwitchTimerLists+0xb4>)
   10368:	4798      	blx	r3
   1036a:	e00e      	b.n	1038a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1036c:	697a      	ldr	r2, [r7, #20]
   1036e:	6938      	ldr	r0, [r7, #16]
   10370:	2300      	movs	r3, #0
   10372:	9300      	str	r3, [sp, #0]
   10374:	2300      	movs	r3, #0
   10376:	2100      	movs	r1, #0
   10378:	4c10      	ldr	r4, [pc, #64]	; (103bc <prvSwitchTimerLists+0xb8>)
   1037a:	47a0      	blx	r4
   1037c:	0003      	movs	r3, r0
   1037e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   10380:	68bb      	ldr	r3, [r7, #8]
   10382:	2b00      	cmp	r3, #0
   10384:	d101      	bne.n	1038a <prvSwitchTimerLists+0x86>
   10386:	b672      	cpsid	i
   10388:	e7fe      	b.n	10388 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1038a:	4b09      	ldr	r3, [pc, #36]	; (103b0 <prvSwitchTimerLists+0xac>)
   1038c:	681b      	ldr	r3, [r3, #0]
   1038e:	681b      	ldr	r3, [r3, #0]
   10390:	2b00      	cmp	r3, #0
   10392:	d1bb      	bne.n	1030c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   10394:	4b06      	ldr	r3, [pc, #24]	; (103b0 <prvSwitchTimerLists+0xac>)
   10396:	681b      	ldr	r3, [r3, #0]
   10398:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1039a:	4b09      	ldr	r3, [pc, #36]	; (103c0 <prvSwitchTimerLists+0xbc>)
   1039c:	681a      	ldr	r2, [r3, #0]
   1039e:	4b04      	ldr	r3, [pc, #16]	; (103b0 <prvSwitchTimerLists+0xac>)
   103a0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   103a2:	4b07      	ldr	r3, [pc, #28]	; (103c0 <prvSwitchTimerLists+0xbc>)
   103a4:	687a      	ldr	r2, [r7, #4]
   103a6:	601a      	str	r2, [r3, #0]
}
   103a8:	46c0      	nop			; (mov r8, r8)
   103aa:	46bd      	mov	sp, r7
   103ac:	b007      	add	sp, #28
   103ae:	bd90      	pop	{r4, r7, pc}
   103b0:	200003e4 	.word	0x200003e4
   103b4:	0000e137 	.word	0x0000e137
   103b8:	0000e0cb 	.word	0x0000e0cb
   103bc:	0000feb5 	.word	0x0000feb5
   103c0:	200003e8 	.word	0x200003e8

000103c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   103c4:	b580      	push	{r7, lr}
   103c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   103c8:	4b10      	ldr	r3, [pc, #64]	; (1040c <prvCheckForValidListAndQueue+0x48>)
   103ca:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   103cc:	4b10      	ldr	r3, [pc, #64]	; (10410 <prvCheckForValidListAndQueue+0x4c>)
   103ce:	681b      	ldr	r3, [r3, #0]
   103d0:	2b00      	cmp	r3, #0
   103d2:	d115      	bne.n	10400 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   103d4:	4b0f      	ldr	r3, [pc, #60]	; (10414 <prvCheckForValidListAndQueue+0x50>)
   103d6:	0018      	movs	r0, r3
   103d8:	4b0f      	ldr	r3, [pc, #60]	; (10418 <prvCheckForValidListAndQueue+0x54>)
   103da:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   103dc:	4b0f      	ldr	r3, [pc, #60]	; (1041c <prvCheckForValidListAndQueue+0x58>)
   103de:	0018      	movs	r0, r3
   103e0:	4b0d      	ldr	r3, [pc, #52]	; (10418 <prvCheckForValidListAndQueue+0x54>)
   103e2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   103e4:	4b0e      	ldr	r3, [pc, #56]	; (10420 <prvCheckForValidListAndQueue+0x5c>)
   103e6:	4a0b      	ldr	r2, [pc, #44]	; (10414 <prvCheckForValidListAndQueue+0x50>)
   103e8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   103ea:	4b0e      	ldr	r3, [pc, #56]	; (10424 <prvCheckForValidListAndQueue+0x60>)
   103ec:	4a0b      	ldr	r2, [pc, #44]	; (1041c <prvCheckForValidListAndQueue+0x58>)
   103ee:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   103f0:	2200      	movs	r2, #0
   103f2:	2110      	movs	r1, #16
   103f4:	2005      	movs	r0, #5
   103f6:	4b0c      	ldr	r3, [pc, #48]	; (10428 <prvCheckForValidListAndQueue+0x64>)
   103f8:	4798      	blx	r3
   103fa:	0002      	movs	r2, r0
   103fc:	4b04      	ldr	r3, [pc, #16]	; (10410 <prvCheckForValidListAndQueue+0x4c>)
   103fe:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   10400:	4b0a      	ldr	r3, [pc, #40]	; (1042c <prvCheckForValidListAndQueue+0x68>)
   10402:	4798      	blx	r3
}
   10404:	46c0      	nop			; (mov r8, r8)
   10406:	46bd      	mov	sp, r7
   10408:	bd80      	pop	{r7, pc}
   1040a:	46c0      	nop			; (mov r8, r8)
   1040c:	0000de91 	.word	0x0000de91
   10410:	200003ec 	.word	0x200003ec
   10414:	200003bc 	.word	0x200003bc
   10418:	0000e035 	.word	0x0000e035
   1041c:	200003d0 	.word	0x200003d0
   10420:	200003e4 	.word	0x200003e4
   10424:	200003e8 	.word	0x200003e8
   10428:	0000e245 	.word	0x0000e245
   1042c:	0000deb5 	.word	0x0000deb5

00010430 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   10430:	b580      	push	{r7, lr}
   10432:	b084      	sub	sp, #16
   10434:	af00      	add	r7, sp, #0
   10436:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   10438:	687b      	ldr	r3, [r7, #4]
   1043a:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   1043c:	687b      	ldr	r3, [r7, #4]
   1043e:	2b00      	cmp	r3, #0
   10440:	d101      	bne.n	10446 <xTimerIsTimerActive+0x16>
   10442:	b672      	cpsid	i
   10444:	e7fe      	b.n	10444 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   10446:	4b07      	ldr	r3, [pc, #28]	; (10464 <xTimerIsTimerActive+0x34>)
   10448:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   1044a:	68fb      	ldr	r3, [r7, #12]
   1044c:	695b      	ldr	r3, [r3, #20]
   1044e:	1e5a      	subs	r2, r3, #1
   10450:	4193      	sbcs	r3, r2
   10452:	b2db      	uxtb	r3, r3
   10454:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   10456:	4b04      	ldr	r3, [pc, #16]	; (10468 <xTimerIsTimerActive+0x38>)
   10458:	4798      	blx	r3

	return xTimerIsInActiveList;
   1045a:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   1045c:	0018      	movs	r0, r3
   1045e:	46bd      	mov	sp, r7
   10460:	b004      	add	sp, #16
   10462:	bd80      	pop	{r7, pc}
   10464:	0000de91 	.word	0x0000de91
   10468:	0000deb5 	.word	0x0000deb5

0001046c <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   1046c:	b580      	push	{r7, lr}
   1046e:	b082      	sub	sp, #8
   10470:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   10472:	4b04      	ldr	r3, [pc, #16]	; (10484 <wdt_clear_early_warning+0x18>)
   10474:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   10476:	687b      	ldr	r3, [r7, #4]
   10478:	2201      	movs	r2, #1
   1047a:	719a      	strb	r2, [r3, #6]
}
   1047c:	46c0      	nop			; (mov r8, r8)
   1047e:	46bd      	mov	sp, r7
   10480:	b002      	add	sp, #8
   10482:	bd80      	pop	{r7, pc}
   10484:	40001000 	.word	0x40001000

00010488 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   10488:	b580      	push	{r7, lr}
   1048a:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   1048c:	4b05      	ldr	r3, [pc, #20]	; (104a4 <WDT_Handler+0x1c>)
   1048e:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   10490:	4b05      	ldr	r3, [pc, #20]	; (104a8 <WDT_Handler+0x20>)
   10492:	681b      	ldr	r3, [r3, #0]
   10494:	2b00      	cmp	r3, #0
   10496:	d002      	beq.n	1049e <WDT_Handler+0x16>
		wdt_early_warning_callback();
   10498:	4b03      	ldr	r3, [pc, #12]	; (104a8 <WDT_Handler+0x20>)
   1049a:	681b      	ldr	r3, [r3, #0]
   1049c:	4798      	blx	r3
	}
}
   1049e:	46c0      	nop			; (mov r8, r8)
   104a0:	46bd      	mov	sp, r7
   104a2:	bd80      	pop	{r7, pc}
   104a4:	0001046d 	.word	0x0001046d
   104a8:	200008f4 	.word	0x200008f4

000104ac <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   104ac:	b580      	push	{r7, lr}
   104ae:	af00      	add	r7, sp, #0
   104b0:	2000      	movs	r0, #0
   104b2:	4b02      	ldr	r3, [pc, #8]	; (104bc <TCC0_Handler+0x10>)
   104b4:	4798      	blx	r3
   104b6:	46c0      	nop			; (mov r8, r8)
   104b8:	46bd      	mov	sp, r7
   104ba:	bd80      	pop	{r7, pc}
   104bc:	000104e9 	.word	0x000104e9

000104c0 <TCC1_Handler>:
   104c0:	b580      	push	{r7, lr}
   104c2:	af00      	add	r7, sp, #0
   104c4:	2001      	movs	r0, #1
   104c6:	4b02      	ldr	r3, [pc, #8]	; (104d0 <TCC1_Handler+0x10>)
   104c8:	4798      	blx	r3
   104ca:	46c0      	nop			; (mov r8, r8)
   104cc:	46bd      	mov	sp, r7
   104ce:	bd80      	pop	{r7, pc}
   104d0:	000104e9 	.word	0x000104e9

000104d4 <TCC2_Handler>:
   104d4:	b580      	push	{r7, lr}
   104d6:	af00      	add	r7, sp, #0
   104d8:	2002      	movs	r0, #2
   104da:	4b02      	ldr	r3, [pc, #8]	; (104e4 <TCC2_Handler+0x10>)
   104dc:	4798      	blx	r3
   104de:	46c0      	nop			; (mov r8, r8)
   104e0:	46bd      	mov	sp, r7
   104e2:	bd80      	pop	{r7, pc}
   104e4:	000104e9 	.word	0x000104e9

000104e8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   104e8:	b580      	push	{r7, lr}
   104ea:	b086      	sub	sp, #24
   104ec:	af00      	add	r7, sp, #0
   104ee:	0002      	movs	r2, r0
   104f0:	1dfb      	adds	r3, r7, #7
   104f2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   104f4:	1dfb      	adds	r3, r7, #7
   104f6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   104f8:	4b18      	ldr	r3, [pc, #96]	; (1055c <_tcc_interrupt_handler+0x74>)
   104fa:	0092      	lsls	r2, r2, #2
   104fc:	58d3      	ldr	r3, [r2, r3]
   104fe:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10500:	693b      	ldr	r3, [r7, #16]
   10502:	681b      	ldr	r3, [r3, #0]
   10504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   10506:	693b      	ldr	r3, [r7, #16]
   10508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1050a:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1050c:	693b      	ldr	r3, [r7, #16]
   1050e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10510:	4013      	ands	r3, r2
   10512:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10514:	2300      	movs	r3, #0
   10516:	617b      	str	r3, [r7, #20]
   10518:	e019      	b.n	1054e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1051a:	4b11      	ldr	r3, [pc, #68]	; (10560 <_tcc_interrupt_handler+0x78>)
   1051c:	697a      	ldr	r2, [r7, #20]
   1051e:	0092      	lsls	r2, r2, #2
   10520:	58d3      	ldr	r3, [r2, r3]
   10522:	68fa      	ldr	r2, [r7, #12]
   10524:	4013      	ands	r3, r2
   10526:	d00f      	beq.n	10548 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   10528:	693a      	ldr	r2, [r7, #16]
   1052a:	697b      	ldr	r3, [r7, #20]
   1052c:	009b      	lsls	r3, r3, #2
   1052e:	18d3      	adds	r3, r2, r3
   10530:	3304      	adds	r3, #4
   10532:	681b      	ldr	r3, [r3, #0]
   10534:	693a      	ldr	r2, [r7, #16]
   10536:	0010      	movs	r0, r2
   10538:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1053a:	693b      	ldr	r3, [r7, #16]
   1053c:	681b      	ldr	r3, [r3, #0]
   1053e:	4a08      	ldr	r2, [pc, #32]	; (10560 <_tcc_interrupt_handler+0x78>)
   10540:	6979      	ldr	r1, [r7, #20]
   10542:	0089      	lsls	r1, r1, #2
   10544:	588a      	ldr	r2, [r1, r2]
   10546:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10548:	697b      	ldr	r3, [r7, #20]
   1054a:	3301      	adds	r3, #1
   1054c:	617b      	str	r3, [r7, #20]
   1054e:	697b      	ldr	r3, [r7, #20]
   10550:	2b0b      	cmp	r3, #11
   10552:	dde2      	ble.n	1051a <_tcc_interrupt_handler+0x32>
		}
	}
}
   10554:	46c0      	nop			; (mov r8, r8)
   10556:	46bd      	mov	sp, r7
   10558:	b006      	add	sp, #24
   1055a:	bd80      	pop	{r7, pc}
   1055c:	200008f8 	.word	0x200008f8
   10560:	00019928 	.word	0x00019928

00010564 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   10564:	b580      	push	{r7, lr}
   10566:	af00      	add	r7, sp, #0
   10568:	2000      	movs	r0, #0
   1056a:	4b02      	ldr	r3, [pc, #8]	; (10574 <TC3_Handler+0x10>)
   1056c:	4798      	blx	r3
   1056e:	46c0      	nop			; (mov r8, r8)
   10570:	46bd      	mov	sp, r7
   10572:	bd80      	pop	{r7, pc}
   10574:	000105c9 	.word	0x000105c9

00010578 <TC4_Handler>:
   10578:	b580      	push	{r7, lr}
   1057a:	af00      	add	r7, sp, #0
   1057c:	2001      	movs	r0, #1
   1057e:	4b02      	ldr	r3, [pc, #8]	; (10588 <TC4_Handler+0x10>)
   10580:	4798      	blx	r3
   10582:	46c0      	nop			; (mov r8, r8)
   10584:	46bd      	mov	sp, r7
   10586:	bd80      	pop	{r7, pc}
   10588:	000105c9 	.word	0x000105c9

0001058c <TC5_Handler>:
   1058c:	b580      	push	{r7, lr}
   1058e:	af00      	add	r7, sp, #0
   10590:	2002      	movs	r0, #2
   10592:	4b02      	ldr	r3, [pc, #8]	; (1059c <TC5_Handler+0x10>)
   10594:	4798      	blx	r3
   10596:	46c0      	nop			; (mov r8, r8)
   10598:	46bd      	mov	sp, r7
   1059a:	bd80      	pop	{r7, pc}
   1059c:	000105c9 	.word	0x000105c9

000105a0 <TC6_Handler>:
   105a0:	b580      	push	{r7, lr}
   105a2:	af00      	add	r7, sp, #0
   105a4:	2003      	movs	r0, #3
   105a6:	4b02      	ldr	r3, [pc, #8]	; (105b0 <TC6_Handler+0x10>)
   105a8:	4798      	blx	r3
   105aa:	46c0      	nop			; (mov r8, r8)
   105ac:	46bd      	mov	sp, r7
   105ae:	bd80      	pop	{r7, pc}
   105b0:	000105c9 	.word	0x000105c9

000105b4 <TC7_Handler>:
   105b4:	b580      	push	{r7, lr}
   105b6:	af00      	add	r7, sp, #0
   105b8:	2004      	movs	r0, #4
   105ba:	4b02      	ldr	r3, [pc, #8]	; (105c4 <TC7_Handler+0x10>)
   105bc:	4798      	blx	r3
   105be:	46c0      	nop			; (mov r8, r8)
   105c0:	46bd      	mov	sp, r7
   105c2:	bd80      	pop	{r7, pc}
   105c4:	000105c9 	.word	0x000105c9

000105c8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   105c8:	b580      	push	{r7, lr}
   105ca:	b084      	sub	sp, #16
   105cc:	af00      	add	r7, sp, #0
   105ce:	0002      	movs	r2, r0
   105d0:	1dfb      	adds	r3, r7, #7
   105d2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   105d4:	1dfb      	adds	r3, r7, #7
   105d6:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   105d8:	4b28      	ldr	r3, [pc, #160]	; (1067c <_tc_interrupt_handler+0xb4>)
   105da:	0092      	lsls	r2, r2, #2
   105dc:	58d3      	ldr	r3, [r2, r3]
   105de:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   105e0:	68fb      	ldr	r3, [r7, #12]
   105e2:	681b      	ldr	r3, [r3, #0]
   105e4:	7b9b      	ldrb	r3, [r3, #14]
   105e6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   105e8:	68fa      	ldr	r2, [r7, #12]
   105ea:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   105ec:	4013      	ands	r3, r2
   105ee:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   105f0:	68fb      	ldr	r3, [r7, #12]
   105f2:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   105f4:	230b      	movs	r3, #11
   105f6:	18fb      	adds	r3, r7, r3
   105f8:	400a      	ands	r2, r1
   105fa:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   105fc:	230b      	movs	r3, #11
   105fe:	18fb      	adds	r3, r7, r3
   10600:	781b      	ldrb	r3, [r3, #0]
   10602:	2201      	movs	r2, #1
   10604:	4013      	ands	r3, r2
   10606:	d008      	beq.n	1061a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   10608:	68fb      	ldr	r3, [r7, #12]
   1060a:	689b      	ldr	r3, [r3, #8]
   1060c:	68fa      	ldr	r2, [r7, #12]
   1060e:	0010      	movs	r0, r2
   10610:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   10612:	68fb      	ldr	r3, [r7, #12]
   10614:	681b      	ldr	r3, [r3, #0]
   10616:	2201      	movs	r2, #1
   10618:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1061a:	230b      	movs	r3, #11
   1061c:	18fb      	adds	r3, r7, r3
   1061e:	781b      	ldrb	r3, [r3, #0]
   10620:	2202      	movs	r2, #2
   10622:	4013      	ands	r3, r2
   10624:	d008      	beq.n	10638 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   10626:	68fb      	ldr	r3, [r7, #12]
   10628:	68db      	ldr	r3, [r3, #12]
   1062a:	68fa      	ldr	r2, [r7, #12]
   1062c:	0010      	movs	r0, r2
   1062e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   10630:	68fb      	ldr	r3, [r7, #12]
   10632:	681b      	ldr	r3, [r3, #0]
   10634:	2202      	movs	r2, #2
   10636:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   10638:	230b      	movs	r3, #11
   1063a:	18fb      	adds	r3, r7, r3
   1063c:	781b      	ldrb	r3, [r3, #0]
   1063e:	2210      	movs	r2, #16
   10640:	4013      	ands	r3, r2
   10642:	d008      	beq.n	10656 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   10644:	68fb      	ldr	r3, [r7, #12]
   10646:	691b      	ldr	r3, [r3, #16]
   10648:	68fa      	ldr	r2, [r7, #12]
   1064a:	0010      	movs	r0, r2
   1064c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1064e:	68fb      	ldr	r3, [r7, #12]
   10650:	681b      	ldr	r3, [r3, #0]
   10652:	2210      	movs	r2, #16
   10654:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   10656:	230b      	movs	r3, #11
   10658:	18fb      	adds	r3, r7, r3
   1065a:	781b      	ldrb	r3, [r3, #0]
   1065c:	2220      	movs	r2, #32
   1065e:	4013      	ands	r3, r2
   10660:	d008      	beq.n	10674 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   10662:	68fb      	ldr	r3, [r7, #12]
   10664:	695b      	ldr	r3, [r3, #20]
   10666:	68fa      	ldr	r2, [r7, #12]
   10668:	0010      	movs	r0, r2
   1066a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1066c:	68fb      	ldr	r3, [r7, #12]
   1066e:	681b      	ldr	r3, [r3, #0]
   10670:	2220      	movs	r2, #32
   10672:	739a      	strb	r2, [r3, #14]
	}
}
   10674:	46c0      	nop			; (mov r8, r8)
   10676:	46bd      	mov	sp, r7
   10678:	b004      	add	sp, #16
   1067a:	bd80      	pop	{r7, pc}
   1067c:	20000904 	.word	0x20000904

00010680 <system_gclk_chan_get_config_defaults>:
{
   10680:	b580      	push	{r7, lr}
   10682:	b082      	sub	sp, #8
   10684:	af00      	add	r7, sp, #0
   10686:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   10688:	687b      	ldr	r3, [r7, #4]
   1068a:	2200      	movs	r2, #0
   1068c:	701a      	strb	r2, [r3, #0]
}
   1068e:	46c0      	nop			; (mov r8, r8)
   10690:	46bd      	mov	sp, r7
   10692:	b002      	add	sp, #8
   10694:	bd80      	pop	{r7, pc}
	...

00010698 <system_apb_clock_set_mask>:
{
   10698:	b580      	push	{r7, lr}
   1069a:	b082      	sub	sp, #8
   1069c:	af00      	add	r7, sp, #0
   1069e:	0002      	movs	r2, r0
   106a0:	6039      	str	r1, [r7, #0]
   106a2:	1dfb      	adds	r3, r7, #7
   106a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   106a6:	1dfb      	adds	r3, r7, #7
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	2b01      	cmp	r3, #1
   106ac:	d00a      	beq.n	106c4 <system_apb_clock_set_mask+0x2c>
   106ae:	2b02      	cmp	r3, #2
   106b0:	d00f      	beq.n	106d2 <system_apb_clock_set_mask+0x3a>
   106b2:	2b00      	cmp	r3, #0
   106b4:	d114      	bne.n	106e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   106b6:	4b0e      	ldr	r3, [pc, #56]	; (106f0 <system_apb_clock_set_mask+0x58>)
   106b8:	4a0d      	ldr	r2, [pc, #52]	; (106f0 <system_apb_clock_set_mask+0x58>)
   106ba:	6991      	ldr	r1, [r2, #24]
   106bc:	683a      	ldr	r2, [r7, #0]
   106be:	430a      	orrs	r2, r1
   106c0:	619a      	str	r2, [r3, #24]
			break;
   106c2:	e00f      	b.n	106e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   106c4:	4b0a      	ldr	r3, [pc, #40]	; (106f0 <system_apb_clock_set_mask+0x58>)
   106c6:	4a0a      	ldr	r2, [pc, #40]	; (106f0 <system_apb_clock_set_mask+0x58>)
   106c8:	69d1      	ldr	r1, [r2, #28]
   106ca:	683a      	ldr	r2, [r7, #0]
   106cc:	430a      	orrs	r2, r1
   106ce:	61da      	str	r2, [r3, #28]
			break;
   106d0:	e008      	b.n	106e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   106d2:	4b07      	ldr	r3, [pc, #28]	; (106f0 <system_apb_clock_set_mask+0x58>)
   106d4:	4a06      	ldr	r2, [pc, #24]	; (106f0 <system_apb_clock_set_mask+0x58>)
   106d6:	6a11      	ldr	r1, [r2, #32]
   106d8:	683a      	ldr	r2, [r7, #0]
   106da:	430a      	orrs	r2, r1
   106dc:	621a      	str	r2, [r3, #32]
			break;
   106de:	e001      	b.n	106e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   106e0:	2317      	movs	r3, #23
   106e2:	e000      	b.n	106e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   106e4:	2300      	movs	r3, #0
}
   106e6:	0018      	movs	r0, r3
   106e8:	46bd      	mov	sp, r7
   106ea:	b002      	add	sp, #8
   106ec:	bd80      	pop	{r7, pc}
   106ee:	46c0      	nop			; (mov r8, r8)
   106f0:	40000400 	.word	0x40000400

000106f4 <system_pinmux_get_config_defaults>:
{
   106f4:	b580      	push	{r7, lr}
   106f6:	b082      	sub	sp, #8
   106f8:	af00      	add	r7, sp, #0
   106fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   106fc:	687b      	ldr	r3, [r7, #4]
   106fe:	2280      	movs	r2, #128	; 0x80
   10700:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10702:	687b      	ldr	r3, [r7, #4]
   10704:	2200      	movs	r2, #0
   10706:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10708:	687b      	ldr	r3, [r7, #4]
   1070a:	2201      	movs	r2, #1
   1070c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1070e:	687b      	ldr	r3, [r7, #4]
   10710:	2200      	movs	r2, #0
   10712:	70da      	strb	r2, [r3, #3]
}
   10714:	46c0      	nop			; (mov r8, r8)
   10716:	46bd      	mov	sp, r7
   10718:	b002      	add	sp, #8
   1071a:	bd80      	pop	{r7, pc}

0001071c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1071c:	b580      	push	{r7, lr}
   1071e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10720:	4b05      	ldr	r3, [pc, #20]	; (10738 <system_is_debugger_present+0x1c>)
   10722:	789b      	ldrb	r3, [r3, #2]
   10724:	b2db      	uxtb	r3, r3
   10726:	001a      	movs	r2, r3
   10728:	2302      	movs	r3, #2
   1072a:	4013      	ands	r3, r2
   1072c:	1e5a      	subs	r2, r3, #1
   1072e:	4193      	sbcs	r3, r2
   10730:	b2db      	uxtb	r3, r3
}
   10732:	0018      	movs	r0, r3
   10734:	46bd      	mov	sp, r7
   10736:	bd80      	pop	{r7, pc}
   10738:	41002000 	.word	0x41002000

0001073c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1073c:	b580      	push	{r7, lr}
   1073e:	b084      	sub	sp, #16
   10740:	af00      	add	r7, sp, #0
   10742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   10744:	687b      	ldr	r3, [r7, #4]
   10746:	681b      	ldr	r3, [r3, #0]
   10748:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1074a:	68fb      	ldr	r3, [r7, #12]
   1074c:	69db      	ldr	r3, [r3, #28]
   1074e:	1e5a      	subs	r2, r3, #1
   10750:	4193      	sbcs	r3, r2
   10752:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   10754:	0018      	movs	r0, r3
   10756:	46bd      	mov	sp, r7
   10758:	b004      	add	sp, #16
   1075a:	bd80      	pop	{r7, pc}

0001075c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1075c:	b580      	push	{r7, lr}
   1075e:	b082      	sub	sp, #8
   10760:	af00      	add	r7, sp, #0
   10762:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   10764:	46c0      	nop			; (mov r8, r8)
   10766:	687b      	ldr	r3, [r7, #4]
   10768:	0018      	movs	r0, r3
   1076a:	4b04      	ldr	r3, [pc, #16]	; (1077c <_usart_wait_for_sync+0x20>)
   1076c:	4798      	blx	r3
   1076e:	1e03      	subs	r3, r0, #0
   10770:	d1f9      	bne.n	10766 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   10772:	46c0      	nop			; (mov r8, r8)
   10774:	46bd      	mov	sp, r7
   10776:	b002      	add	sp, #8
   10778:	bd80      	pop	{r7, pc}
   1077a:	46c0      	nop			; (mov r8, r8)
   1077c:	0001073d 	.word	0x0001073d

00010780 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   10780:	b5b0      	push	{r4, r5, r7, lr}
   10782:	b08c      	sub	sp, #48	; 0x30
   10784:	af02      	add	r7, sp, #8
   10786:	6078      	str	r0, [r7, #4]
   10788:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1078a:	687b      	ldr	r3, [r7, #4]
   1078c:	681b      	ldr	r3, [r3, #0]
   1078e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10790:	687b      	ldr	r3, [r7, #4]
   10792:	681b      	ldr	r3, [r3, #0]
   10794:	0018      	movs	r0, r3
   10796:	4bab      	ldr	r3, [pc, #684]	; (10a44 <_usart_set_config+0x2c4>)
   10798:	4798      	blx	r3
   1079a:	0003      	movs	r3, r0
   1079c:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1079e:	697b      	ldr	r3, [r7, #20]
   107a0:	3314      	adds	r3, #20
   107a2:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   107a4:	2300      	movs	r3, #0
   107a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   107a8:	2300      	movs	r3, #0
   107aa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   107ac:	230a      	movs	r3, #10
   107ae:	18fb      	adds	r3, r7, r3
   107b0:	2200      	movs	r2, #0
   107b2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   107b4:	231f      	movs	r3, #31
   107b6:	18fb      	adds	r3, r7, r3
   107b8:	2200      	movs	r2, #0
   107ba:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   107bc:	231e      	movs	r3, #30
   107be:	18fb      	adds	r3, r7, r3
   107c0:	2210      	movs	r2, #16
   107c2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   107c4:	683b      	ldr	r3, [r7, #0]
   107c6:	8a1b      	ldrh	r3, [r3, #16]
   107c8:	2280      	movs	r2, #128	; 0x80
   107ca:	01d2      	lsls	r2, r2, #7
   107cc:	4293      	cmp	r3, r2
   107ce:	d01c      	beq.n	1080a <_usart_set_config+0x8a>
   107d0:	2280      	movs	r2, #128	; 0x80
   107d2:	01d2      	lsls	r2, r2, #7
   107d4:	4293      	cmp	r3, r2
   107d6:	dc06      	bgt.n	107e6 <_usart_set_config+0x66>
   107d8:	2b00      	cmp	r3, #0
   107da:	d00d      	beq.n	107f8 <_usart_set_config+0x78>
   107dc:	2280      	movs	r2, #128	; 0x80
   107de:	0192      	lsls	r2, r2, #6
   107e0:	4293      	cmp	r3, r2
   107e2:	d024      	beq.n	1082e <_usart_set_config+0xae>
   107e4:	e035      	b.n	10852 <_usart_set_config+0xd2>
   107e6:	22c0      	movs	r2, #192	; 0xc0
   107e8:	01d2      	lsls	r2, r2, #7
   107ea:	4293      	cmp	r3, r2
   107ec:	d028      	beq.n	10840 <_usart_set_config+0xc0>
   107ee:	2280      	movs	r2, #128	; 0x80
   107f0:	0212      	lsls	r2, r2, #8
   107f2:	4293      	cmp	r3, r2
   107f4:	d012      	beq.n	1081c <_usart_set_config+0x9c>
   107f6:	e02c      	b.n	10852 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   107f8:	231f      	movs	r3, #31
   107fa:	18fb      	adds	r3, r7, r3
   107fc:	2200      	movs	r2, #0
   107fe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10800:	231e      	movs	r3, #30
   10802:	18fb      	adds	r3, r7, r3
   10804:	2210      	movs	r2, #16
   10806:	701a      	strb	r2, [r3, #0]
			break;
   10808:	e023      	b.n	10852 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1080a:	231f      	movs	r3, #31
   1080c:	18fb      	adds	r3, r7, r3
   1080e:	2200      	movs	r2, #0
   10810:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10812:	231e      	movs	r3, #30
   10814:	18fb      	adds	r3, r7, r3
   10816:	2208      	movs	r2, #8
   10818:	701a      	strb	r2, [r3, #0]
			break;
   1081a:	e01a      	b.n	10852 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1081c:	231f      	movs	r3, #31
   1081e:	18fb      	adds	r3, r7, r3
   10820:	2200      	movs	r2, #0
   10822:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   10824:	231e      	movs	r3, #30
   10826:	18fb      	adds	r3, r7, r3
   10828:	2203      	movs	r2, #3
   1082a:	701a      	strb	r2, [r3, #0]
			break;
   1082c:	e011      	b.n	10852 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1082e:	231f      	movs	r3, #31
   10830:	18fb      	adds	r3, r7, r3
   10832:	2201      	movs	r2, #1
   10834:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10836:	231e      	movs	r3, #30
   10838:	18fb      	adds	r3, r7, r3
   1083a:	2210      	movs	r2, #16
   1083c:	701a      	strb	r2, [r3, #0]
			break;
   1083e:	e008      	b.n	10852 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10840:	231f      	movs	r3, #31
   10842:	18fb      	adds	r3, r7, r3
   10844:	2201      	movs	r2, #1
   10846:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10848:	231e      	movs	r3, #30
   1084a:	18fb      	adds	r3, r7, r3
   1084c:	2208      	movs	r2, #8
   1084e:	701a      	strb	r2, [r3, #0]
			break;
   10850:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   10852:	683b      	ldr	r3, [r7, #0]
   10854:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   10856:	683b      	ldr	r3, [r7, #0]
   10858:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1085a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   1085c:	683b      	ldr	r3, [r7, #0]
   1085e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   10860:	4313      	orrs	r3, r2
		config->sample_rate |
   10862:	683a      	ldr	r2, [r7, #0]
   10864:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   10866:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10868:	683a      	ldr	r2, [r7, #0]
   1086a:	7e12      	ldrb	r2, [r2, #24]
   1086c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   1086e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10870:	683a      	ldr	r2, [r7, #0]
   10872:	2126      	movs	r1, #38	; 0x26
   10874:	5c52      	ldrb	r2, [r2, r1]
   10876:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   10878:	4313      	orrs	r3, r2
   1087a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   1087c:	231d      	movs	r3, #29
   1087e:	18fb      	adds	r3, r7, r3
   10880:	2200      	movs	r2, #0
   10882:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   10884:	683b      	ldr	r3, [r7, #0]
   10886:	685b      	ldr	r3, [r3, #4]
   10888:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   1088a:	68fb      	ldr	r3, [r7, #12]
   1088c:	2b00      	cmp	r3, #0
   1088e:	d01e      	beq.n	108ce <_usart_set_config+0x14e>
   10890:	2280      	movs	r2, #128	; 0x80
   10892:	0552      	lsls	r2, r2, #21
   10894:	4293      	cmp	r3, r2
   10896:	d14f      	bne.n	10938 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   10898:	683b      	ldr	r3, [r7, #0]
   1089a:	2227      	movs	r2, #39	; 0x27
   1089c:	5c9b      	ldrb	r3, [r3, r2]
   1089e:	2201      	movs	r2, #1
   108a0:	4053      	eors	r3, r2
   108a2:	b2db      	uxtb	r3, r3
   108a4:	2b00      	cmp	r3, #0
   108a6:	d046      	beq.n	10936 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   108a8:	683b      	ldr	r3, [r7, #0]
   108aa:	6a1d      	ldr	r5, [r3, #32]
   108ac:	693b      	ldr	r3, [r7, #16]
   108ae:	b2db      	uxtb	r3, r3
   108b0:	0018      	movs	r0, r3
   108b2:	4b65      	ldr	r3, [pc, #404]	; (10a48 <_usart_set_config+0x2c8>)
   108b4:	4798      	blx	r3
   108b6:	0001      	movs	r1, r0
   108b8:	231d      	movs	r3, #29
   108ba:	18fc      	adds	r4, r7, r3
   108bc:	230a      	movs	r3, #10
   108be:	18fb      	adds	r3, r7, r3
   108c0:	001a      	movs	r2, r3
   108c2:	0028      	movs	r0, r5
   108c4:	4b61      	ldr	r3, [pc, #388]	; (10a4c <_usart_set_config+0x2cc>)
   108c6:	4798      	blx	r3
   108c8:	0003      	movs	r3, r0
   108ca:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   108cc:	e033      	b.n	10936 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   108ce:	683b      	ldr	r3, [r7, #0]
   108d0:	2227      	movs	r2, #39	; 0x27
   108d2:	5c9b      	ldrb	r3, [r3, r2]
   108d4:	2b00      	cmp	r3, #0
   108d6:	d014      	beq.n	10902 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   108d8:	683b      	ldr	r3, [r7, #0]
   108da:	6a18      	ldr	r0, [r3, #32]
   108dc:	683b      	ldr	r3, [r7, #0]
   108de:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   108e0:	231d      	movs	r3, #29
   108e2:	18fc      	adds	r4, r7, r3
   108e4:	231f      	movs	r3, #31
   108e6:	18fb      	adds	r3, r7, r3
   108e8:	781d      	ldrb	r5, [r3, #0]
   108ea:	230a      	movs	r3, #10
   108ec:	18fa      	adds	r2, r7, r3
   108ee:	231e      	movs	r3, #30
   108f0:	18fb      	adds	r3, r7, r3
   108f2:	781b      	ldrb	r3, [r3, #0]
   108f4:	9300      	str	r3, [sp, #0]
   108f6:	002b      	movs	r3, r5
   108f8:	4d55      	ldr	r5, [pc, #340]	; (10a50 <_usart_set_config+0x2d0>)
   108fa:	47a8      	blx	r5
   108fc:	0003      	movs	r3, r0
   108fe:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   10900:	e01a      	b.n	10938 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   10902:	683b      	ldr	r3, [r7, #0]
   10904:	6a1d      	ldr	r5, [r3, #32]
   10906:	693b      	ldr	r3, [r7, #16]
   10908:	b2db      	uxtb	r3, r3
   1090a:	0018      	movs	r0, r3
   1090c:	4b4e      	ldr	r3, [pc, #312]	; (10a48 <_usart_set_config+0x2c8>)
   1090e:	4798      	blx	r3
				status_code =
   10910:	231d      	movs	r3, #29
   10912:	18fc      	adds	r4, r7, r3
   10914:	231f      	movs	r3, #31
   10916:	18fb      	adds	r3, r7, r3
   10918:	7819      	ldrb	r1, [r3, #0]
   1091a:	230a      	movs	r3, #10
   1091c:	18fa      	adds	r2, r7, r3
   1091e:	231e      	movs	r3, #30
   10920:	18fb      	adds	r3, r7, r3
   10922:	781b      	ldrb	r3, [r3, #0]
   10924:	9300      	str	r3, [sp, #0]
   10926:	000b      	movs	r3, r1
   10928:	0001      	movs	r1, r0
   1092a:	0028      	movs	r0, r5
   1092c:	4d48      	ldr	r5, [pc, #288]	; (10a50 <_usart_set_config+0x2d0>)
   1092e:	47a8      	blx	r5
   10930:	0003      	movs	r3, r0
   10932:	7023      	strb	r3, [r4, #0]
			break;
   10934:	e000      	b.n	10938 <_usart_set_config+0x1b8>
			break;
   10936:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   10938:	231d      	movs	r3, #29
   1093a:	18fb      	adds	r3, r7, r3
   1093c:	781b      	ldrb	r3, [r3, #0]
   1093e:	2b00      	cmp	r3, #0
   10940:	d003      	beq.n	1094a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   10942:	231d      	movs	r3, #29
   10944:	18fb      	adds	r3, r7, r3
   10946:	781b      	ldrb	r3, [r3, #0]
   10948:	e077      	b.n	10a3a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1094a:	683b      	ldr	r3, [r7, #0]
   1094c:	7e5b      	ldrb	r3, [r3, #25]
   1094e:	2b00      	cmp	r3, #0
   10950:	d003      	beq.n	1095a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   10952:	683b      	ldr	r3, [r7, #0]
   10954:	7e9a      	ldrb	r2, [r3, #26]
   10956:	69bb      	ldr	r3, [r7, #24]
   10958:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1095a:	687b      	ldr	r3, [r7, #4]
   1095c:	0018      	movs	r0, r3
   1095e:	4b3d      	ldr	r3, [pc, #244]	; (10a54 <_usart_set_config+0x2d4>)
   10960:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   10962:	230a      	movs	r3, #10
   10964:	18fb      	adds	r3, r7, r3
   10966:	881a      	ldrh	r2, [r3, #0]
   10968:	69bb      	ldr	r3, [r7, #24]
   1096a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   1096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1096e:	68fb      	ldr	r3, [r7, #12]
   10970:	4313      	orrs	r3, r2
   10972:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   10974:	683b      	ldr	r3, [r7, #0]
   10976:	2227      	movs	r2, #39	; 0x27
   10978:	5c9b      	ldrb	r3, [r3, r2]
   1097a:	2201      	movs	r2, #1
   1097c:	4053      	eors	r3, r2
   1097e:	b2db      	uxtb	r3, r3
   10980:	2b00      	cmp	r3, #0
   10982:	d003      	beq.n	1098c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   10984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10986:	2204      	movs	r2, #4
   10988:	4313      	orrs	r3, r2
   1098a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1098c:	683b      	ldr	r3, [r7, #0]
   1098e:	7e5b      	ldrb	r3, [r3, #25]
   10990:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10992:	683b      	ldr	r3, [r7, #0]
   10994:	7f1b      	ldrb	r3, [r3, #28]
   10996:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10998:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1099a:	683b      	ldr	r3, [r7, #0]
   1099c:	7f5b      	ldrb	r3, [r3, #29]
   1099e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   109a0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   109a2:	683b      	ldr	r3, [r7, #0]
   109a4:	2124      	movs	r1, #36	; 0x24
   109a6:	5c5b      	ldrb	r3, [r3, r1]
   109a8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   109aa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   109ac:	683b      	ldr	r3, [r7, #0]
   109ae:	2125      	movs	r1, #37	; 0x25
   109b0:	5c5b      	ldrb	r3, [r3, r1]
   109b2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   109b4:	4313      	orrs	r3, r2
	ctrlb =  
   109b6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   109b8:	683b      	ldr	r3, [r7, #0]
   109ba:	7a9b      	ldrb	r3, [r3, #10]
   109bc:	001a      	movs	r2, r3
   109be:	6a3b      	ldr	r3, [r7, #32]
   109c0:	4313      	orrs	r3, r2
   109c2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   109c4:	683b      	ldr	r3, [r7, #0]
   109c6:	7adb      	ldrb	r3, [r3, #11]
   109c8:	001a      	movs	r2, r3
   109ca:	6a3b      	ldr	r3, [r7, #32]
   109cc:	4313      	orrs	r3, r2
   109ce:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   109d0:	683b      	ldr	r3, [r7, #0]
   109d2:	891b      	ldrh	r3, [r3, #8]
   109d4:	2bff      	cmp	r3, #255	; 0xff
   109d6:	d00b      	beq.n	109f0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   109d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109da:	2280      	movs	r2, #128	; 0x80
   109dc:	0452      	lsls	r2, r2, #17
   109de:	4313      	orrs	r3, r2
   109e0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   109e2:	683b      	ldr	r3, [r7, #0]
   109e4:	891b      	ldrh	r3, [r3, #8]
   109e6:	001a      	movs	r2, r3
   109e8:	6a3b      	ldr	r3, [r7, #32]
   109ea:	4313      	orrs	r3, r2
   109ec:	623b      	str	r3, [r7, #32]
   109ee:	e008      	b.n	10a02 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   109f0:	683b      	ldr	r3, [r7, #0]
   109f2:	7edb      	ldrb	r3, [r3, #27]
   109f4:	2b00      	cmp	r3, #0
   109f6:	d004      	beq.n	10a02 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109fa:	2280      	movs	r2, #128	; 0x80
   109fc:	04d2      	lsls	r2, r2, #19
   109fe:	4313      	orrs	r3, r2
   10a00:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   10a02:	683b      	ldr	r3, [r7, #0]
   10a04:	222c      	movs	r2, #44	; 0x2c
   10a06:	5c9b      	ldrb	r3, [r3, r2]
   10a08:	2b00      	cmp	r3, #0
   10a0a:	d103      	bne.n	10a14 <_usart_set_config+0x294>
   10a0c:	4b12      	ldr	r3, [pc, #72]	; (10a58 <_usart_set_config+0x2d8>)
   10a0e:	4798      	blx	r3
   10a10:	1e03      	subs	r3, r0, #0
   10a12:	d003      	beq.n	10a1c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10a16:	2280      	movs	r2, #128	; 0x80
   10a18:	4313      	orrs	r3, r2
   10a1a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10a1c:	687b      	ldr	r3, [r7, #4]
   10a1e:	0018      	movs	r0, r3
   10a20:	4b0c      	ldr	r3, [pc, #48]	; (10a54 <_usart_set_config+0x2d4>)
   10a22:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   10a24:	69bb      	ldr	r3, [r7, #24]
   10a26:	6a3a      	ldr	r2, [r7, #32]
   10a28:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10a2a:	687b      	ldr	r3, [r7, #4]
   10a2c:	0018      	movs	r0, r3
   10a2e:	4b09      	ldr	r3, [pc, #36]	; (10a54 <_usart_set_config+0x2d4>)
   10a30:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   10a32:	69bb      	ldr	r3, [r7, #24]
   10a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10a36:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   10a38:	2300      	movs	r3, #0
}
   10a3a:	0018      	movs	r0, r3
   10a3c:	46bd      	mov	sp, r7
   10a3e:	b00a      	add	sp, #40	; 0x28
   10a40:	bdb0      	pop	{r4, r5, r7, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	0000dce1 	.word	0x0000dce1
   10a48:	00013ae1 	.word	0x00013ae1
   10a4c:	0000d85b 	.word	0x0000d85b
   10a50:	0000d8d9 	.word	0x0000d8d9
   10a54:	0001075d 	.word	0x0001075d
   10a58:	0001071d 	.word	0x0001071d

00010a5c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   10a5c:	b590      	push	{r4, r7, lr}
   10a5e:	b093      	sub	sp, #76	; 0x4c
   10a60:	af00      	add	r7, sp, #0
   10a62:	60f8      	str	r0, [r7, #12]
   10a64:	60b9      	str	r1, [r7, #8]
   10a66:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   10a68:	233b      	movs	r3, #59	; 0x3b
   10a6a:	18fb      	adds	r3, r7, r3
   10a6c:	2200      	movs	r2, #0
   10a6e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10a70:	68fb      	ldr	r3, [r7, #12]
   10a72:	68ba      	ldr	r2, [r7, #8]
   10a74:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10a76:	68fb      	ldr	r3, [r7, #12]
   10a78:	681b      	ldr	r3, [r3, #0]
   10a7a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10a7c:	68fb      	ldr	r3, [r7, #12]
   10a7e:	681b      	ldr	r3, [r3, #0]
   10a80:	0018      	movs	r0, r3
   10a82:	4b86      	ldr	r3, [pc, #536]	; (10c9c <usart_init+0x240>)
   10a84:	4798      	blx	r3
   10a86:	0003      	movs	r3, r0
   10a88:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   10a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10a8c:	3302      	adds	r3, #2
   10a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10a92:	3314      	adds	r3, #20
   10a94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a98:	681b      	ldr	r3, [r3, #0]
   10a9a:	2201      	movs	r2, #1
   10a9c:	4013      	ands	r3, r2
   10a9e:	d001      	beq.n	10aa4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   10aa0:	2305      	movs	r3, #5
   10aa2:	e0f6      	b.n	10c92 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10aa6:	681b      	ldr	r3, [r3, #0]
   10aa8:	2202      	movs	r2, #2
   10aaa:	4013      	ands	r3, r2
   10aac:	d001      	beq.n	10ab2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   10aae:	231c      	movs	r3, #28
   10ab0:	e0ef      	b.n	10c92 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10ab2:	2201      	movs	r2, #1
   10ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ab6:	409a      	lsls	r2, r3
   10ab8:	0013      	movs	r3, r2
   10aba:	0019      	movs	r1, r3
   10abc:	2002      	movs	r0, #2
   10abe:	4b78      	ldr	r3, [pc, #480]	; (10ca0 <usart_init+0x244>)
   10ac0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   10ac2:	2324      	movs	r3, #36	; 0x24
   10ac4:	18fb      	adds	r3, r7, r3
   10ac6:	0018      	movs	r0, r3
   10ac8:	4b76      	ldr	r3, [pc, #472]	; (10ca4 <usart_init+0x248>)
   10aca:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   10acc:	687b      	ldr	r3, [r7, #4]
   10ace:	222d      	movs	r2, #45	; 0x2d
   10ad0:	5c9a      	ldrb	r2, [r3, r2]
   10ad2:	2324      	movs	r3, #36	; 0x24
   10ad4:	18fb      	adds	r3, r7, r3
   10ad6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ada:	b2db      	uxtb	r3, r3
   10adc:	2224      	movs	r2, #36	; 0x24
   10ade:	18ba      	adds	r2, r7, r2
   10ae0:	0011      	movs	r1, r2
   10ae2:	0018      	movs	r0, r3
   10ae4:	4b70      	ldr	r3, [pc, #448]	; (10ca8 <usart_init+0x24c>)
   10ae6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10aea:	b2db      	uxtb	r3, r3
   10aec:	0018      	movs	r0, r3
   10aee:	4b6f      	ldr	r3, [pc, #444]	; (10cac <usart_init+0x250>)
   10af0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10af2:	687b      	ldr	r3, [r7, #4]
   10af4:	222d      	movs	r2, #45	; 0x2d
   10af6:	5c9b      	ldrb	r3, [r3, r2]
   10af8:	2100      	movs	r1, #0
   10afa:	0018      	movs	r0, r3
   10afc:	4b6c      	ldr	r3, [pc, #432]	; (10cb0 <usart_init+0x254>)
   10afe:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   10b00:	687b      	ldr	r3, [r7, #4]
   10b02:	7ada      	ldrb	r2, [r3, #11]
   10b04:	68fb      	ldr	r3, [r7, #12]
   10b06:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   10b08:	687b      	ldr	r3, [r7, #4]
   10b0a:	2224      	movs	r2, #36	; 0x24
   10b0c:	5c9a      	ldrb	r2, [r3, r2]
   10b0e:	68fb      	ldr	r3, [r7, #12]
   10b10:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10b12:	687b      	ldr	r3, [r7, #4]
   10b14:	2225      	movs	r2, #37	; 0x25
   10b16:	5c9a      	ldrb	r2, [r3, r2]
   10b18:	68fb      	ldr	r3, [r7, #12]
   10b1a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   10b1c:	687b      	ldr	r3, [r7, #4]
   10b1e:	7eda      	ldrb	r2, [r3, #27]
   10b20:	68fb      	ldr	r3, [r7, #12]
   10b22:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10b24:	687b      	ldr	r3, [r7, #4]
   10b26:	7f1a      	ldrb	r2, [r3, #28]
   10b28:	68fb      	ldr	r3, [r7, #12]
   10b2a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   10b2c:	233b      	movs	r3, #59	; 0x3b
   10b2e:	18fc      	adds	r4, r7, r3
   10b30:	687a      	ldr	r2, [r7, #4]
   10b32:	68fb      	ldr	r3, [r7, #12]
   10b34:	0011      	movs	r1, r2
   10b36:	0018      	movs	r0, r3
   10b38:	4b5e      	ldr	r3, [pc, #376]	; (10cb4 <usart_init+0x258>)
   10b3a:	4798      	blx	r3
   10b3c:	0003      	movs	r3, r0
   10b3e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   10b40:	233b      	movs	r3, #59	; 0x3b
   10b42:	18fb      	adds	r3, r7, r3
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	2b00      	cmp	r3, #0
   10b48:	d003      	beq.n	10b52 <usart_init+0xf6>
		return status_code;
   10b4a:	233b      	movs	r3, #59	; 0x3b
   10b4c:	18fb      	adds	r3, r7, r3
   10b4e:	781b      	ldrb	r3, [r3, #0]
   10b50:	e09f      	b.n	10c92 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   10b52:	2320      	movs	r3, #32
   10b54:	18fb      	adds	r3, r7, r3
   10b56:	0018      	movs	r0, r3
   10b58:	4b57      	ldr	r3, [pc, #348]	; (10cb8 <usart_init+0x25c>)
   10b5a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10b5c:	2320      	movs	r3, #32
   10b5e:	18fb      	adds	r3, r7, r3
   10b60:	2200      	movs	r2, #0
   10b62:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10b64:	2320      	movs	r3, #32
   10b66:	18fb      	adds	r3, r7, r3
   10b68:	2200      	movs	r2, #0
   10b6a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   10b6c:	687b      	ldr	r3, [r7, #4]
   10b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   10b70:	2310      	movs	r3, #16
   10b72:	18fb      	adds	r3, r7, r3
   10b74:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   10b76:	687b      	ldr	r3, [r7, #4]
   10b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   10b7a:	2310      	movs	r3, #16
   10b7c:	18fb      	adds	r3, r7, r3
   10b7e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   10b80:	687b      	ldr	r3, [r7, #4]
   10b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   10b84:	2310      	movs	r3, #16
   10b86:	18fb      	adds	r3, r7, r3
   10b88:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   10b8a:	687b      	ldr	r3, [r7, #4]
   10b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   10b8e:	2310      	movs	r3, #16
   10b90:	18fb      	adds	r3, r7, r3
   10b92:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   10b94:	2347      	movs	r3, #71	; 0x47
   10b96:	18fb      	adds	r3, r7, r3
   10b98:	2200      	movs	r2, #0
   10b9a:	701a      	strb	r2, [r3, #0]
   10b9c:	e02c      	b.n	10bf8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10b9e:	2347      	movs	r3, #71	; 0x47
   10ba0:	18fb      	adds	r3, r7, r3
   10ba2:	781a      	ldrb	r2, [r3, #0]
   10ba4:	2310      	movs	r3, #16
   10ba6:	18fb      	adds	r3, r7, r3
   10ba8:	0092      	lsls	r2, r2, #2
   10baa:	58d3      	ldr	r3, [r2, r3]
   10bac:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   10bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10bb0:	2b00      	cmp	r3, #0
   10bb2:	d109      	bne.n	10bc8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10bb4:	2347      	movs	r3, #71	; 0x47
   10bb6:	18fb      	adds	r3, r7, r3
   10bb8:	781a      	ldrb	r2, [r3, #0]
   10bba:	68bb      	ldr	r3, [r7, #8]
   10bbc:	0011      	movs	r1, r2
   10bbe:	0018      	movs	r0, r3
   10bc0:	4b3e      	ldr	r3, [pc, #248]	; (10cbc <usart_init+0x260>)
   10bc2:	4798      	blx	r3
   10bc4:	0003      	movs	r3, r0
   10bc6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   10bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10bca:	3301      	adds	r3, #1
   10bcc:	d00d      	beq.n	10bea <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10bd0:	b2da      	uxtb	r2, r3
   10bd2:	2320      	movs	r3, #32
   10bd4:	18fb      	adds	r3, r7, r3
   10bd6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10bda:	0c1b      	lsrs	r3, r3, #16
   10bdc:	b2db      	uxtb	r3, r3
   10bde:	2220      	movs	r2, #32
   10be0:	18ba      	adds	r2, r7, r2
   10be2:	0011      	movs	r1, r2
   10be4:	0018      	movs	r0, r3
   10be6:	4b36      	ldr	r3, [pc, #216]	; (10cc0 <usart_init+0x264>)
   10be8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   10bea:	2347      	movs	r3, #71	; 0x47
   10bec:	18fb      	adds	r3, r7, r3
   10bee:	781a      	ldrb	r2, [r3, #0]
   10bf0:	2347      	movs	r3, #71	; 0x47
   10bf2:	18fb      	adds	r3, r7, r3
   10bf4:	3201      	adds	r2, #1
   10bf6:	701a      	strb	r2, [r3, #0]
   10bf8:	2347      	movs	r3, #71	; 0x47
   10bfa:	18fb      	adds	r3, r7, r3
   10bfc:	781b      	ldrb	r3, [r3, #0]
   10bfe:	2b03      	cmp	r3, #3
   10c00:	d9cd      	bls.n	10b9e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10c02:	2300      	movs	r3, #0
   10c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   10c06:	e00a      	b.n	10c1e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   10c08:	68fa      	ldr	r2, [r7, #12]
   10c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c0c:	3302      	adds	r3, #2
   10c0e:	009b      	lsls	r3, r3, #2
   10c10:	18d3      	adds	r3, r2, r3
   10c12:	3304      	adds	r3, #4
   10c14:	2200      	movs	r2, #0
   10c16:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c1a:	3301      	adds	r3, #1
   10c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   10c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c20:	2b05      	cmp	r3, #5
   10c22:	d9f1      	bls.n	10c08 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   10c24:	68fb      	ldr	r3, [r7, #12]
   10c26:	2200      	movs	r2, #0
   10c28:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10c2a:	68fb      	ldr	r3, [r7, #12]
   10c2c:	2200      	movs	r2, #0
   10c2e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10c30:	68fb      	ldr	r3, [r7, #12]
   10c32:	2200      	movs	r2, #0
   10c34:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10c36:	68fb      	ldr	r3, [r7, #12]
   10c38:	2200      	movs	r2, #0
   10c3a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10c3c:	68fb      	ldr	r3, [r7, #12]
   10c3e:	2230      	movs	r2, #48	; 0x30
   10c40:	2100      	movs	r1, #0
   10c42:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   10c44:	68fb      	ldr	r3, [r7, #12]
   10c46:	2231      	movs	r2, #49	; 0x31
   10c48:	2100      	movs	r1, #0
   10c4a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   10c4c:	68fb      	ldr	r3, [r7, #12]
   10c4e:	2232      	movs	r2, #50	; 0x32
   10c50:	2100      	movs	r1, #0
   10c52:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   10c54:	68fb      	ldr	r3, [r7, #12]
   10c56:	2233      	movs	r2, #51	; 0x33
   10c58:	2100      	movs	r1, #0
   10c5a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10c5c:	68fb      	ldr	r3, [r7, #12]
   10c5e:	681b      	ldr	r3, [r3, #0]
   10c60:	2227      	movs	r2, #39	; 0x27
   10c62:	18bc      	adds	r4, r7, r2
   10c64:	0018      	movs	r0, r3
   10c66:	4b0d      	ldr	r3, [pc, #52]	; (10c9c <usart_init+0x240>)
   10c68:	4798      	blx	r3
   10c6a:	0003      	movs	r3, r0
   10c6c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10c6e:	4a15      	ldr	r2, [pc, #84]	; (10cc4 <usart_init+0x268>)
   10c70:	2327      	movs	r3, #39	; 0x27
   10c72:	18fb      	adds	r3, r7, r3
   10c74:	781b      	ldrb	r3, [r3, #0]
   10c76:	0011      	movs	r1, r2
   10c78:	0018      	movs	r0, r3
   10c7a:	4b13      	ldr	r3, [pc, #76]	; (10cc8 <usart_init+0x26c>)
   10c7c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10c7e:	2327      	movs	r3, #39	; 0x27
   10c80:	18fb      	adds	r3, r7, r3
   10c82:	781a      	ldrb	r2, [r3, #0]
   10c84:	4b11      	ldr	r3, [pc, #68]	; (10ccc <usart_init+0x270>)
   10c86:	0092      	lsls	r2, r2, #2
   10c88:	68f9      	ldr	r1, [r7, #12]
   10c8a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   10c8c:	233b      	movs	r3, #59	; 0x3b
   10c8e:	18fb      	adds	r3, r7, r3
   10c90:	781b      	ldrb	r3, [r3, #0]
}
   10c92:	0018      	movs	r0, r3
   10c94:	46bd      	mov	sp, r7
   10c96:	b013      	add	sp, #76	; 0x4c
   10c98:	bd90      	pop	{r4, r7, pc}
   10c9a:	46c0      	nop			; (mov r8, r8)
   10c9c:	0000dce1 	.word	0x0000dce1
   10ca0:	00010699 	.word	0x00010699
   10ca4:	00010681 	.word	0x00010681
   10ca8:	000139bd 	.word	0x000139bd
   10cac:	00013a01 	.word	0x00013a01
   10cb0:	0000da99 	.word	0x0000da99
   10cb4:	00010781 	.word	0x00010781
   10cb8:	000106f5 	.word	0x000106f5
   10cbc:	0000db25 	.word	0x0000db25
   10cc0:	00013ca9 	.word	0x00013ca9
   10cc4:	00010ea5 	.word	0x00010ea5
   10cc8:	000111f9 	.word	0x000111f9
   10ccc:	20000918 	.word	0x20000918

00010cd0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   10cd0:	b580      	push	{r7, lr}
   10cd2:	b084      	sub	sp, #16
   10cd4:	af00      	add	r7, sp, #0
   10cd6:	6078      	str	r0, [r7, #4]
   10cd8:	000a      	movs	r2, r1
   10cda:	1cbb      	adds	r3, r7, #2
   10cdc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10cde:	687b      	ldr	r3, [r7, #4]
   10ce0:	681b      	ldr	r3, [r3, #0]
   10ce2:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10ce4:	687b      	ldr	r3, [r7, #4]
   10ce6:	79db      	ldrb	r3, [r3, #7]
   10ce8:	2201      	movs	r2, #1
   10cea:	4053      	eors	r3, r2
   10cec:	b2db      	uxtb	r3, r3
   10cee:	2b00      	cmp	r3, #0
   10cf0:	d001      	beq.n	10cf6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   10cf2:	231c      	movs	r3, #28
   10cf4:	e017      	b.n	10d26 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   10cf6:	687b      	ldr	r3, [r7, #4]
   10cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10cfa:	b29b      	uxth	r3, r3
   10cfc:	2b00      	cmp	r3, #0
   10cfe:	d001      	beq.n	10d04 <usart_write_wait+0x34>
		return STATUS_BUSY;
   10d00:	2305      	movs	r3, #5
   10d02:	e010      	b.n	10d26 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10d04:	687b      	ldr	r3, [r7, #4]
   10d06:	0018      	movs	r0, r3
   10d08:	4b09      	ldr	r3, [pc, #36]	; (10d30 <usart_write_wait+0x60>)
   10d0a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   10d0c:	68fb      	ldr	r3, [r7, #12]
   10d0e:	1cba      	adds	r2, r7, #2
   10d10:	8812      	ldrh	r2, [r2, #0]
   10d12:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10d14:	46c0      	nop			; (mov r8, r8)
   10d16:	68fb      	ldr	r3, [r7, #12]
   10d18:	7e1b      	ldrb	r3, [r3, #24]
   10d1a:	b2db      	uxtb	r3, r3
   10d1c:	001a      	movs	r2, r3
   10d1e:	2302      	movs	r3, #2
   10d20:	4013      	ands	r3, r2
   10d22:	d0f8      	beq.n	10d16 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   10d24:	2300      	movs	r3, #0
}
   10d26:	0018      	movs	r0, r3
   10d28:	46bd      	mov	sp, r7
   10d2a:	b004      	add	sp, #16
   10d2c:	bd80      	pop	{r7, pc}
   10d2e:	46c0      	nop			; (mov r8, r8)
   10d30:	0001075d 	.word	0x0001075d

00010d34 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   10d34:	b580      	push	{r7, lr}
   10d36:	b08a      	sub	sp, #40	; 0x28
   10d38:	af00      	add	r7, sp, #0
   10d3a:	60f8      	str	r0, [r7, #12]
   10d3c:	60b9      	str	r1, [r7, #8]
   10d3e:	1dbb      	adds	r3, r7, #6
   10d40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   10d42:	1dbb      	adds	r3, r7, #6
   10d44:	881b      	ldrh	r3, [r3, #0]
   10d46:	2b00      	cmp	r3, #0
   10d48:	d101      	bne.n	10d4e <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   10d4a:	2317      	movs	r3, #23
   10d4c:	e07e      	b.n	10e4c <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10d4e:	68fb      	ldr	r3, [r7, #12]
   10d50:	79db      	ldrb	r3, [r3, #7]
   10d52:	2201      	movs	r2, #1
   10d54:	4053      	eors	r3, r2
   10d56:	b2db      	uxtb	r3, r3
   10d58:	2b00      	cmp	r3, #0
   10d5a:	d001      	beq.n	10d60 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   10d5c:	231c      	movs	r3, #28
   10d5e:	e075      	b.n	10e4c <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10d60:	68fb      	ldr	r3, [r7, #12]
   10d62:	681b      	ldr	r3, [r3, #0]
   10d64:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10d66:	68fb      	ldr	r3, [r7, #12]
   10d68:	0018      	movs	r0, r3
   10d6a:	4b3a      	ldr	r3, [pc, #232]	; (10e54 <usart_write_buffer_wait+0x120>)
   10d6c:	4798      	blx	r3

	uint16_t tx_pos = 0;
   10d6e:	2326      	movs	r3, #38	; 0x26
   10d70:	18fb      	adds	r3, r7, r3
   10d72:	2200      	movs	r2, #0
   10d74:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   10d76:	e048      	b.n	10e0a <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10d78:	2300      	movs	r3, #0
   10d7a:	623b      	str	r3, [r7, #32]
   10d7c:	e00f      	b.n	10d9e <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   10d7e:	697b      	ldr	r3, [r7, #20]
   10d80:	7e1b      	ldrb	r3, [r3, #24]
   10d82:	b2db      	uxtb	r3, r3
   10d84:	001a      	movs	r2, r3
   10d86:	2301      	movs	r3, #1
   10d88:	4013      	ands	r3, r2
   10d8a:	d10d      	bne.n	10da8 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   10d8c:	6a3b      	ldr	r3, [r7, #32]
   10d8e:	4a32      	ldr	r2, [pc, #200]	; (10e58 <usart_write_buffer_wait+0x124>)
   10d90:	4293      	cmp	r3, r2
   10d92:	d101      	bne.n	10d98 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   10d94:	2312      	movs	r3, #18
   10d96:	e059      	b.n	10e4c <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10d98:	6a3b      	ldr	r3, [r7, #32]
   10d9a:	3301      	adds	r3, #1
   10d9c:	623b      	str	r3, [r7, #32]
   10d9e:	6a3b      	ldr	r3, [r7, #32]
   10da0:	4a2d      	ldr	r2, [pc, #180]	; (10e58 <usart_write_buffer_wait+0x124>)
   10da2:	4293      	cmp	r3, r2
   10da4:	d9eb      	bls.n	10d7e <usart_write_buffer_wait+0x4a>
   10da6:	e000      	b.n	10daa <usart_write_buffer_wait+0x76>
				break;
   10da8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   10daa:	2326      	movs	r3, #38	; 0x26
   10dac:	18fb      	adds	r3, r7, r3
   10dae:	881b      	ldrh	r3, [r3, #0]
   10db0:	2226      	movs	r2, #38	; 0x26
   10db2:	18ba      	adds	r2, r7, r2
   10db4:	1c59      	adds	r1, r3, #1
   10db6:	8011      	strh	r1, [r2, #0]
   10db8:	001a      	movs	r2, r3
   10dba:	68bb      	ldr	r3, [r7, #8]
   10dbc:	189b      	adds	r3, r3, r2
   10dbe:	781a      	ldrb	r2, [r3, #0]
   10dc0:	231e      	movs	r3, #30
   10dc2:	18fb      	adds	r3, r7, r3
   10dc4:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10dc6:	68fb      	ldr	r3, [r7, #12]
   10dc8:	795b      	ldrb	r3, [r3, #5]
   10dca:	2b01      	cmp	r3, #1
   10dcc:	d115      	bne.n	10dfa <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   10dce:	2326      	movs	r3, #38	; 0x26
   10dd0:	18fb      	adds	r3, r7, r3
   10dd2:	881b      	ldrh	r3, [r3, #0]
   10dd4:	2226      	movs	r2, #38	; 0x26
   10dd6:	18ba      	adds	r2, r7, r2
   10dd8:	1c59      	adds	r1, r3, #1
   10dda:	8011      	strh	r1, [r2, #0]
   10ddc:	001a      	movs	r2, r3
   10dde:	68bb      	ldr	r3, [r7, #8]
   10de0:	189b      	adds	r3, r3, r2
   10de2:	781b      	ldrb	r3, [r3, #0]
   10de4:	021b      	lsls	r3, r3, #8
   10de6:	b21a      	sxth	r2, r3
   10de8:	231e      	movs	r3, #30
   10dea:	18fb      	adds	r3, r7, r3
   10dec:	2100      	movs	r1, #0
   10dee:	5e5b      	ldrsh	r3, [r3, r1]
   10df0:	4313      	orrs	r3, r2
   10df2:	b21a      	sxth	r2, r3
   10df4:	231e      	movs	r3, #30
   10df6:	18fb      	adds	r3, r7, r3
   10df8:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   10dfa:	231e      	movs	r3, #30
   10dfc:	18fb      	adds	r3, r7, r3
   10dfe:	881a      	ldrh	r2, [r3, #0]
   10e00:	68fb      	ldr	r3, [r7, #12]
   10e02:	0011      	movs	r1, r2
   10e04:	0018      	movs	r0, r3
   10e06:	4b15      	ldr	r3, [pc, #84]	; (10e5c <usart_write_buffer_wait+0x128>)
   10e08:	4798      	blx	r3
	while (length--) {
   10e0a:	1dbb      	adds	r3, r7, #6
   10e0c:	881b      	ldrh	r3, [r3, #0]
   10e0e:	1dba      	adds	r2, r7, #6
   10e10:	1e59      	subs	r1, r3, #1
   10e12:	8011      	strh	r1, [r2, #0]
   10e14:	2b00      	cmp	r3, #0
   10e16:	d1af      	bne.n	10d78 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10e18:	2300      	movs	r3, #0
   10e1a:	61bb      	str	r3, [r7, #24]
   10e1c:	e00f      	b.n	10e3e <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   10e1e:	697b      	ldr	r3, [r7, #20]
   10e20:	7e1b      	ldrb	r3, [r3, #24]
   10e22:	b2db      	uxtb	r3, r3
   10e24:	001a      	movs	r2, r3
   10e26:	2302      	movs	r3, #2
   10e28:	4013      	ands	r3, r2
   10e2a:	d10d      	bne.n	10e48 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   10e2c:	69bb      	ldr	r3, [r7, #24]
   10e2e:	4a0a      	ldr	r2, [pc, #40]	; (10e58 <usart_write_buffer_wait+0x124>)
   10e30:	4293      	cmp	r3, r2
   10e32:	d101      	bne.n	10e38 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   10e34:	2312      	movs	r3, #18
   10e36:	e009      	b.n	10e4c <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10e38:	69bb      	ldr	r3, [r7, #24]
   10e3a:	3301      	adds	r3, #1
   10e3c:	61bb      	str	r3, [r7, #24]
   10e3e:	69bb      	ldr	r3, [r7, #24]
   10e40:	4a05      	ldr	r2, [pc, #20]	; (10e58 <usart_write_buffer_wait+0x124>)
   10e42:	4293      	cmp	r3, r2
   10e44:	d9eb      	bls.n	10e1e <usart_write_buffer_wait+0xea>
   10e46:	e000      	b.n	10e4a <usart_write_buffer_wait+0x116>
			break;
   10e48:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   10e4a:	2300      	movs	r3, #0
}
   10e4c:	0018      	movs	r0, r3
   10e4e:	46bd      	mov	sp, r7
   10e50:	b00a      	add	sp, #40	; 0x28
   10e52:	bd80      	pop	{r7, pc}
   10e54:	0001075d 	.word	0x0001075d
   10e58:	0000ffff 	.word	0x0000ffff
   10e5c:	00010cd1 	.word	0x00010cd1

00010e60 <usart_is_syncing>:
{
   10e60:	b580      	push	{r7, lr}
   10e62:	b084      	sub	sp, #16
   10e64:	af00      	add	r7, sp, #0
   10e66:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10e68:	687b      	ldr	r3, [r7, #4]
   10e6a:	681b      	ldr	r3, [r3, #0]
   10e6c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   10e6e:	68fb      	ldr	r3, [r7, #12]
   10e70:	69db      	ldr	r3, [r3, #28]
   10e72:	1e5a      	subs	r2, r3, #1
   10e74:	4193      	sbcs	r3, r2
   10e76:	b2db      	uxtb	r3, r3
}
   10e78:	0018      	movs	r0, r3
   10e7a:	46bd      	mov	sp, r7
   10e7c:	b004      	add	sp, #16
   10e7e:	bd80      	pop	{r7, pc}

00010e80 <_usart_wait_for_sync>:
{
   10e80:	b580      	push	{r7, lr}
   10e82:	b082      	sub	sp, #8
   10e84:	af00      	add	r7, sp, #0
   10e86:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   10e88:	46c0      	nop			; (mov r8, r8)
   10e8a:	687b      	ldr	r3, [r7, #4]
   10e8c:	0018      	movs	r0, r3
   10e8e:	4b04      	ldr	r3, [pc, #16]	; (10ea0 <_usart_wait_for_sync+0x20>)
   10e90:	4798      	blx	r3
   10e92:	1e03      	subs	r3, r0, #0
   10e94:	d1f9      	bne.n	10e8a <_usart_wait_for_sync+0xa>
}
   10e96:	46c0      	nop			; (mov r8, r8)
   10e98:	46bd      	mov	sp, r7
   10e9a:	b002      	add	sp, #8
   10e9c:	bd80      	pop	{r7, pc}
   10e9e:	46c0      	nop			; (mov r8, r8)
   10ea0:	00010e61 	.word	0x00010e61

00010ea4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10ea4:	b580      	push	{r7, lr}
   10ea6:	b088      	sub	sp, #32
   10ea8:	af00      	add	r7, sp, #0
   10eaa:	0002      	movs	r2, r0
   10eac:	1dfb      	adds	r3, r7, #7
   10eae:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   10eb0:	1dfb      	adds	r3, r7, #7
   10eb2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   10eb4:	4ba3      	ldr	r3, [pc, #652]	; (11144 <_usart_interrupt_handler+0x2a0>)
   10eb6:	0092      	lsls	r2, r2, #2
   10eb8:	58d3      	ldr	r3, [r2, r3]
   10eba:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10ebc:	69bb      	ldr	r3, [r7, #24]
   10ebe:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   10ec0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   10ec2:	69bb      	ldr	r3, [r7, #24]
   10ec4:	0018      	movs	r0, r3
   10ec6:	4ba0      	ldr	r3, [pc, #640]	; (11148 <_usart_interrupt_handler+0x2a4>)
   10ec8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10eca:	697b      	ldr	r3, [r7, #20]
   10ecc:	7e1b      	ldrb	r3, [r3, #24]
   10ece:	b2da      	uxtb	r2, r3
   10ed0:	2312      	movs	r3, #18
   10ed2:	18fb      	adds	r3, r7, r3
   10ed4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   10ed6:	697b      	ldr	r3, [r7, #20]
   10ed8:	7d9b      	ldrb	r3, [r3, #22]
   10eda:	b2db      	uxtb	r3, r3
   10edc:	b29a      	uxth	r2, r3
   10ede:	2312      	movs	r3, #18
   10ee0:	18fb      	adds	r3, r7, r3
   10ee2:	2112      	movs	r1, #18
   10ee4:	1879      	adds	r1, r7, r1
   10ee6:	8809      	ldrh	r1, [r1, #0]
   10ee8:	400a      	ands	r2, r1
   10eea:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   10eec:	69bb      	ldr	r3, [r7, #24]
   10eee:	2230      	movs	r2, #48	; 0x30
   10ef0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   10ef2:	69ba      	ldr	r2, [r7, #24]
   10ef4:	2131      	movs	r1, #49	; 0x31
   10ef6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   10ef8:	4013      	ands	r3, r2
   10efa:	b2da      	uxtb	r2, r3
   10efc:	2310      	movs	r3, #16
   10efe:	18fb      	adds	r3, r7, r3
   10f00:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10f02:	2312      	movs	r3, #18
   10f04:	18fb      	adds	r3, r7, r3
   10f06:	881b      	ldrh	r3, [r3, #0]
   10f08:	2201      	movs	r2, #1
   10f0a:	4013      	ands	r3, r2
   10f0c:	d044      	beq.n	10f98 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   10f0e:	69bb      	ldr	r3, [r7, #24]
   10f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10f12:	b29b      	uxth	r3, r3
   10f14:	2b00      	cmp	r3, #0
   10f16:	d03c      	beq.n	10f92 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10f18:	69bb      	ldr	r3, [r7, #24]
   10f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f1c:	781b      	ldrb	r3, [r3, #0]
   10f1e:	b2da      	uxtb	r2, r3
   10f20:	231c      	movs	r3, #28
   10f22:	18fb      	adds	r3, r7, r3
   10f24:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10f26:	69bb      	ldr	r3, [r7, #24]
   10f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f2a:	1c5a      	adds	r2, r3, #1
   10f2c:	69bb      	ldr	r3, [r7, #24]
   10f2e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10f30:	69bb      	ldr	r3, [r7, #24]
   10f32:	795b      	ldrb	r3, [r3, #5]
   10f34:	2b01      	cmp	r3, #1
   10f36:	d113      	bne.n	10f60 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10f38:	69bb      	ldr	r3, [r7, #24]
   10f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f3c:	781b      	ldrb	r3, [r3, #0]
   10f3e:	b2db      	uxtb	r3, r3
   10f40:	021b      	lsls	r3, r3, #8
   10f42:	b21a      	sxth	r2, r3
   10f44:	231c      	movs	r3, #28
   10f46:	18fb      	adds	r3, r7, r3
   10f48:	2100      	movs	r1, #0
   10f4a:	5e5b      	ldrsh	r3, [r3, r1]
   10f4c:	4313      	orrs	r3, r2
   10f4e:	b21a      	sxth	r2, r3
   10f50:	231c      	movs	r3, #28
   10f52:	18fb      	adds	r3, r7, r3
   10f54:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   10f56:	69bb      	ldr	r3, [r7, #24]
   10f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f5a:	1c5a      	adds	r2, r3, #1
   10f5c:	69bb      	ldr	r3, [r7, #24]
   10f5e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10f60:	231c      	movs	r3, #28
   10f62:	18fb      	adds	r3, r7, r3
   10f64:	881b      	ldrh	r3, [r3, #0]
   10f66:	05db      	lsls	r3, r3, #23
   10f68:	0ddb      	lsrs	r3, r3, #23
   10f6a:	b29a      	uxth	r2, r3
   10f6c:	697b      	ldr	r3, [r7, #20]
   10f6e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10f70:	69bb      	ldr	r3, [r7, #24]
   10f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10f74:	b29b      	uxth	r3, r3
   10f76:	3b01      	subs	r3, #1
   10f78:	b29b      	uxth	r3, r3
   10f7a:	69ba      	ldr	r2, [r7, #24]
   10f7c:	1c19      	adds	r1, r3, #0
   10f7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
   10f80:	2b00      	cmp	r3, #0
   10f82:	d109      	bne.n	10f98 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10f84:	697b      	ldr	r3, [r7, #20]
   10f86:	2201      	movs	r2, #1
   10f88:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10f8a:	697b      	ldr	r3, [r7, #20]
   10f8c:	2202      	movs	r2, #2
   10f8e:	759a      	strb	r2, [r3, #22]
   10f90:	e002      	b.n	10f98 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10f92:	697b      	ldr	r3, [r7, #20]
   10f94:	2201      	movs	r2, #1
   10f96:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10f98:	2312      	movs	r3, #18
   10f9a:	18fb      	adds	r3, r7, r3
   10f9c:	881b      	ldrh	r3, [r3, #0]
   10f9e:	2202      	movs	r2, #2
   10fa0:	4013      	ands	r3, r2
   10fa2:	d011      	beq.n	10fc8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10fa4:	697b      	ldr	r3, [r7, #20]
   10fa6:	2202      	movs	r2, #2
   10fa8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   10faa:	69bb      	ldr	r3, [r7, #24]
   10fac:	2233      	movs	r2, #51	; 0x33
   10fae:	2100      	movs	r1, #0
   10fb0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10fb2:	2310      	movs	r3, #16
   10fb4:	18fb      	adds	r3, r7, r3
   10fb6:	881b      	ldrh	r3, [r3, #0]
   10fb8:	2201      	movs	r2, #1
   10fba:	4013      	ands	r3, r2
   10fbc:	d004      	beq.n	10fc8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10fbe:	69bb      	ldr	r3, [r7, #24]
   10fc0:	68db      	ldr	r3, [r3, #12]
   10fc2:	69ba      	ldr	r2, [r7, #24]
   10fc4:	0010      	movs	r0, r2
   10fc6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10fc8:	2312      	movs	r3, #18
   10fca:	18fb      	adds	r3, r7, r3
   10fcc:	881b      	ldrh	r3, [r3, #0]
   10fce:	2204      	movs	r2, #4
   10fd0:	4013      	ands	r3, r2
   10fd2:	d100      	bne.n	10fd6 <_usart_interrupt_handler+0x132>
   10fd4:	e0bd      	b.n	11152 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   10fd6:	69bb      	ldr	r3, [r7, #24]
   10fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10fda:	b29b      	uxth	r3, r3
   10fdc:	2b00      	cmp	r3, #0
   10fde:	d100      	bne.n	10fe2 <_usart_interrupt_handler+0x13e>
   10fe0:	e0b4      	b.n	1114c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10fe2:	697b      	ldr	r3, [r7, #20]
   10fe4:	8b5b      	ldrh	r3, [r3, #26]
   10fe6:	b29b      	uxth	r3, r3
   10fe8:	b2da      	uxtb	r2, r3
   10fea:	231f      	movs	r3, #31
   10fec:	18fb      	adds	r3, r7, r3
   10fee:	213f      	movs	r1, #63	; 0x3f
   10ff0:	400a      	ands	r2, r1
   10ff2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10ff4:	231f      	movs	r3, #31
   10ff6:	18fb      	adds	r3, r7, r3
   10ff8:	781b      	ldrb	r3, [r3, #0]
   10ffa:	2208      	movs	r2, #8
   10ffc:	4013      	ands	r3, r2
   10ffe:	d007      	beq.n	11010 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   11000:	231f      	movs	r3, #31
   11002:	18fb      	adds	r3, r7, r3
   11004:	221f      	movs	r2, #31
   11006:	18ba      	adds	r2, r7, r2
   11008:	7812      	ldrb	r2, [r2, #0]
   1100a:	2108      	movs	r1, #8
   1100c:	438a      	bics	r2, r1
   1100e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   11010:	231f      	movs	r3, #31
   11012:	18fb      	adds	r3, r7, r3
   11014:	781b      	ldrb	r3, [r3, #0]
   11016:	2b00      	cmp	r3, #0
   11018:	d050      	beq.n	110bc <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1101a:	231f      	movs	r3, #31
   1101c:	18fb      	adds	r3, r7, r3
   1101e:	781b      	ldrb	r3, [r3, #0]
   11020:	2202      	movs	r2, #2
   11022:	4013      	ands	r3, r2
   11024:	d007      	beq.n	11036 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   11026:	69bb      	ldr	r3, [r7, #24]
   11028:	2232      	movs	r2, #50	; 0x32
   1102a:	211a      	movs	r1, #26
   1102c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1102e:	697b      	ldr	r3, [r7, #20]
   11030:	2202      	movs	r2, #2
   11032:	835a      	strh	r2, [r3, #26]
   11034:	e036      	b.n	110a4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   11036:	231f      	movs	r3, #31
   11038:	18fb      	adds	r3, r7, r3
   1103a:	781b      	ldrb	r3, [r3, #0]
   1103c:	2204      	movs	r2, #4
   1103e:	4013      	ands	r3, r2
   11040:	d007      	beq.n	11052 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   11042:	69bb      	ldr	r3, [r7, #24]
   11044:	2232      	movs	r2, #50	; 0x32
   11046:	211e      	movs	r1, #30
   11048:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1104a:	697b      	ldr	r3, [r7, #20]
   1104c:	2204      	movs	r2, #4
   1104e:	835a      	strh	r2, [r3, #26]
   11050:	e028      	b.n	110a4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   11052:	231f      	movs	r3, #31
   11054:	18fb      	adds	r3, r7, r3
   11056:	781b      	ldrb	r3, [r3, #0]
   11058:	2201      	movs	r2, #1
   1105a:	4013      	ands	r3, r2
   1105c:	d007      	beq.n	1106e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   1105e:	69bb      	ldr	r3, [r7, #24]
   11060:	2232      	movs	r2, #50	; 0x32
   11062:	2113      	movs	r1, #19
   11064:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   11066:	697b      	ldr	r3, [r7, #20]
   11068:	2201      	movs	r2, #1
   1106a:	835a      	strh	r2, [r3, #26]
   1106c:	e01a      	b.n	110a4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1106e:	231f      	movs	r3, #31
   11070:	18fb      	adds	r3, r7, r3
   11072:	781b      	ldrb	r3, [r3, #0]
   11074:	2210      	movs	r2, #16
   11076:	4013      	ands	r3, r2
   11078:	d007      	beq.n	1108a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   1107a:	69bb      	ldr	r3, [r7, #24]
   1107c:	2232      	movs	r2, #50	; 0x32
   1107e:	2142      	movs	r1, #66	; 0x42
   11080:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   11082:	697b      	ldr	r3, [r7, #20]
   11084:	2210      	movs	r2, #16
   11086:	835a      	strh	r2, [r3, #26]
   11088:	e00c      	b.n	110a4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1108a:	231f      	movs	r3, #31
   1108c:	18fb      	adds	r3, r7, r3
   1108e:	781b      	ldrb	r3, [r3, #0]
   11090:	2220      	movs	r2, #32
   11092:	4013      	ands	r3, r2
   11094:	d006      	beq.n	110a4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   11096:	69bb      	ldr	r3, [r7, #24]
   11098:	2232      	movs	r2, #50	; 0x32
   1109a:	2141      	movs	r1, #65	; 0x41
   1109c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1109e:	697b      	ldr	r3, [r7, #20]
   110a0:	2220      	movs	r2, #32
   110a2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   110a4:	2310      	movs	r3, #16
   110a6:	18fb      	adds	r3, r7, r3
   110a8:	881b      	ldrh	r3, [r3, #0]
   110aa:	2204      	movs	r2, #4
   110ac:	4013      	ands	r3, r2
				if (callback_status
   110ae:	d050      	beq.n	11152 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   110b0:	69bb      	ldr	r3, [r7, #24]
   110b2:	695b      	ldr	r3, [r3, #20]
   110b4:	69ba      	ldr	r2, [r7, #24]
   110b6:	0010      	movs	r0, r2
   110b8:	4798      	blx	r3
   110ba:	e04a      	b.n	11152 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   110bc:	697b      	ldr	r3, [r7, #20]
   110be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   110c0:	b29a      	uxth	r2, r3
   110c2:	230e      	movs	r3, #14
   110c4:	18fb      	adds	r3, r7, r3
   110c6:	05d2      	lsls	r2, r2, #23
   110c8:	0dd2      	lsrs	r2, r2, #23
   110ca:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   110cc:	69bb      	ldr	r3, [r7, #24]
   110ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110d0:	220e      	movs	r2, #14
   110d2:	18ba      	adds	r2, r7, r2
   110d4:	8812      	ldrh	r2, [r2, #0]
   110d6:	b2d2      	uxtb	r2, r2
   110d8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   110da:	69bb      	ldr	r3, [r7, #24]
   110dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110de:	1c5a      	adds	r2, r3, #1
   110e0:	69bb      	ldr	r3, [r7, #24]
   110e2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   110e4:	69bb      	ldr	r3, [r7, #24]
   110e6:	795b      	ldrb	r3, [r3, #5]
   110e8:	2b01      	cmp	r3, #1
   110ea:	d10d      	bne.n	11108 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   110ec:	69bb      	ldr	r3, [r7, #24]
   110ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110f0:	220e      	movs	r2, #14
   110f2:	18ba      	adds	r2, r7, r2
   110f4:	8812      	ldrh	r2, [r2, #0]
   110f6:	0a12      	lsrs	r2, r2, #8
   110f8:	b292      	uxth	r2, r2
   110fa:	b2d2      	uxtb	r2, r2
   110fc:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   110fe:	69bb      	ldr	r3, [r7, #24]
   11100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11102:	1c5a      	adds	r2, r3, #1
   11104:	69bb      	ldr	r3, [r7, #24]
   11106:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   11108:	69bb      	ldr	r3, [r7, #24]
   1110a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1110c:	b29b      	uxth	r3, r3
   1110e:	3b01      	subs	r3, #1
   11110:	b29b      	uxth	r3, r3
   11112:	69ba      	ldr	r2, [r7, #24]
   11114:	1c19      	adds	r1, r3, #0
   11116:	8591      	strh	r1, [r2, #44]	; 0x2c
   11118:	2b00      	cmp	r3, #0
   1111a:	d11a      	bne.n	11152 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1111c:	697b      	ldr	r3, [r7, #20]
   1111e:	2204      	movs	r2, #4
   11120:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   11122:	69bb      	ldr	r3, [r7, #24]
   11124:	2232      	movs	r2, #50	; 0x32
   11126:	2100      	movs	r1, #0
   11128:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   1112a:	2310      	movs	r3, #16
   1112c:	18fb      	adds	r3, r7, r3
   1112e:	881b      	ldrh	r3, [r3, #0]
   11130:	2202      	movs	r2, #2
   11132:	4013      	ands	r3, r2
					if (callback_status
   11134:	d00d      	beq.n	11152 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   11136:	69bb      	ldr	r3, [r7, #24]
   11138:	691b      	ldr	r3, [r3, #16]
   1113a:	69ba      	ldr	r2, [r7, #24]
   1113c:	0010      	movs	r0, r2
   1113e:	4798      	blx	r3
   11140:	e007      	b.n	11152 <_usart_interrupt_handler+0x2ae>
   11142:	46c0      	nop			; (mov r8, r8)
   11144:	20000918 	.word	0x20000918
   11148:	00010e81 	.word	0x00010e81
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1114c:	697b      	ldr	r3, [r7, #20]
   1114e:	2204      	movs	r2, #4
   11150:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   11152:	2312      	movs	r3, #18
   11154:	18fb      	adds	r3, r7, r3
   11156:	881b      	ldrh	r3, [r3, #0]
   11158:	2210      	movs	r2, #16
   1115a:	4013      	ands	r3, r2
   1115c:	d010      	beq.n	11180 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1115e:	697b      	ldr	r3, [r7, #20]
   11160:	2210      	movs	r2, #16
   11162:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   11164:	697b      	ldr	r3, [r7, #20]
   11166:	2210      	movs	r2, #16
   11168:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1116a:	2310      	movs	r3, #16
   1116c:	18fb      	adds	r3, r7, r3
   1116e:	881b      	ldrh	r3, [r3, #0]
   11170:	2210      	movs	r2, #16
   11172:	4013      	ands	r3, r2
   11174:	d004      	beq.n	11180 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   11176:	69bb      	ldr	r3, [r7, #24]
   11178:	69db      	ldr	r3, [r3, #28]
   1117a:	69ba      	ldr	r2, [r7, #24]
   1117c:	0010      	movs	r0, r2
   1117e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   11180:	2312      	movs	r3, #18
   11182:	18fb      	adds	r3, r7, r3
   11184:	881b      	ldrh	r3, [r3, #0]
   11186:	2220      	movs	r2, #32
   11188:	4013      	ands	r3, r2
   1118a:	d010      	beq.n	111ae <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1118c:	697b      	ldr	r3, [r7, #20]
   1118e:	2220      	movs	r2, #32
   11190:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   11192:	697b      	ldr	r3, [r7, #20]
   11194:	2220      	movs	r2, #32
   11196:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   11198:	2310      	movs	r3, #16
   1119a:	18fb      	adds	r3, r7, r3
   1119c:	881b      	ldrh	r3, [r3, #0]
   1119e:	2208      	movs	r2, #8
   111a0:	4013      	ands	r3, r2
   111a2:	d004      	beq.n	111ae <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   111a4:	69bb      	ldr	r3, [r7, #24]
   111a6:	699b      	ldr	r3, [r3, #24]
   111a8:	69ba      	ldr	r2, [r7, #24]
   111aa:	0010      	movs	r0, r2
   111ac:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   111ae:	2312      	movs	r3, #18
   111b0:	18fb      	adds	r3, r7, r3
   111b2:	881b      	ldrh	r3, [r3, #0]
   111b4:	2208      	movs	r2, #8
   111b6:	4013      	ands	r3, r2
   111b8:	d010      	beq.n	111dc <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   111ba:	697b      	ldr	r3, [r7, #20]
   111bc:	2208      	movs	r2, #8
   111be:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   111c0:	697b      	ldr	r3, [r7, #20]
   111c2:	2208      	movs	r2, #8
   111c4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   111c6:	2310      	movs	r3, #16
   111c8:	18fb      	adds	r3, r7, r3
   111ca:	881b      	ldrh	r3, [r3, #0]
   111cc:	2220      	movs	r2, #32
   111ce:	4013      	ands	r3, r2
   111d0:	d004      	beq.n	111dc <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   111d2:	69bb      	ldr	r3, [r7, #24]
   111d4:	6a1b      	ldr	r3, [r3, #32]
   111d6:	69ba      	ldr	r2, [r7, #24]
   111d8:	0010      	movs	r0, r2
   111da:	4798      	blx	r3
		}
	}
#endif
}
   111dc:	46c0      	nop			; (mov r8, r8)
   111de:	46bd      	mov	sp, r7
   111e0:	b008      	add	sp, #32
   111e2:	bd80      	pop	{r7, pc}

000111e4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   111e4:	b580      	push	{r7, lr}
   111e6:	b082      	sub	sp, #8
   111e8:	af00      	add	r7, sp, #0
   111ea:	0002      	movs	r2, r0
   111ec:	1dfb      	adds	r3, r7, #7
   111ee:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   111f0:	46c0      	nop			; (mov r8, r8)
   111f2:	46bd      	mov	sp, r7
   111f4:	b002      	add	sp, #8
   111f6:	bd80      	pop	{r7, pc}

000111f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   111f8:	b580      	push	{r7, lr}
   111fa:	b084      	sub	sp, #16
   111fc:	af00      	add	r7, sp, #0
   111fe:	0002      	movs	r2, r0
   11200:	6039      	str	r1, [r7, #0]
   11202:	1dfb      	adds	r3, r7, #7
   11204:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   11206:	4b13      	ldr	r3, [pc, #76]	; (11254 <_sercom_set_handler+0x5c>)
   11208:	781b      	ldrb	r3, [r3, #0]
   1120a:	2201      	movs	r2, #1
   1120c:	4053      	eors	r3, r2
   1120e:	b2db      	uxtb	r3, r3
   11210:	2b00      	cmp	r3, #0
   11212:	d015      	beq.n	11240 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   11214:	2300      	movs	r3, #0
   11216:	60fb      	str	r3, [r7, #12]
   11218:	e00c      	b.n	11234 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1121a:	4b0f      	ldr	r3, [pc, #60]	; (11258 <_sercom_set_handler+0x60>)
   1121c:	68fa      	ldr	r2, [r7, #12]
   1121e:	0092      	lsls	r2, r2, #2
   11220:	490e      	ldr	r1, [pc, #56]	; (1125c <_sercom_set_handler+0x64>)
   11222:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   11224:	4b0e      	ldr	r3, [pc, #56]	; (11260 <_sercom_set_handler+0x68>)
   11226:	68fa      	ldr	r2, [r7, #12]
   11228:	0092      	lsls	r2, r2, #2
   1122a:	2100      	movs	r1, #0
   1122c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1122e:	68fb      	ldr	r3, [r7, #12]
   11230:	3301      	adds	r3, #1
   11232:	60fb      	str	r3, [r7, #12]
   11234:	68fb      	ldr	r3, [r7, #12]
   11236:	2b05      	cmp	r3, #5
   11238:	d9ef      	bls.n	1121a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   1123a:	4b06      	ldr	r3, [pc, #24]	; (11254 <_sercom_set_handler+0x5c>)
   1123c:	2201      	movs	r2, #1
   1123e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   11240:	1dfb      	adds	r3, r7, #7
   11242:	781a      	ldrb	r2, [r3, #0]
   11244:	4b04      	ldr	r3, [pc, #16]	; (11258 <_sercom_set_handler+0x60>)
   11246:	0092      	lsls	r2, r2, #2
   11248:	6839      	ldr	r1, [r7, #0]
   1124a:	50d1      	str	r1, [r2, r3]
}
   1124c:	46c0      	nop			; (mov r8, r8)
   1124e:	46bd      	mov	sp, r7
   11250:	b004      	add	sp, #16
   11252:	bd80      	pop	{r7, pc}
   11254:	200003f8 	.word	0x200003f8
   11258:	200003fc 	.word	0x200003fc
   1125c:	000111e5 	.word	0x000111e5
   11260:	20000918 	.word	0x20000918

00011264 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   11264:	b590      	push	{r4, r7, lr}
   11266:	b085      	sub	sp, #20
   11268:	af00      	add	r7, sp, #0
   1126a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1126c:	2308      	movs	r3, #8
   1126e:	18fb      	adds	r3, r7, r3
   11270:	4a0b      	ldr	r2, [pc, #44]	; (112a0 <_sercom_get_interrupt_vector+0x3c>)
   11272:	6811      	ldr	r1, [r2, #0]
   11274:	6019      	str	r1, [r3, #0]
   11276:	8892      	ldrh	r2, [r2, #4]
   11278:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1127a:	230f      	movs	r3, #15
   1127c:	18fc      	adds	r4, r7, r3
   1127e:	687b      	ldr	r3, [r7, #4]
   11280:	0018      	movs	r0, r3
   11282:	4b08      	ldr	r3, [pc, #32]	; (112a4 <_sercom_get_interrupt_vector+0x40>)
   11284:	4798      	blx	r3
   11286:	0003      	movs	r3, r0
   11288:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1128a:	230f      	movs	r3, #15
   1128c:	18fb      	adds	r3, r7, r3
   1128e:	781b      	ldrb	r3, [r3, #0]
   11290:	2208      	movs	r2, #8
   11292:	18ba      	adds	r2, r7, r2
   11294:	5cd3      	ldrb	r3, [r2, r3]
   11296:	b25b      	sxtb	r3, r3
}
   11298:	0018      	movs	r0, r3
   1129a:	46bd      	mov	sp, r7
   1129c:	b005      	add	sp, #20
   1129e:	bd90      	pop	{r4, r7, pc}
   112a0:	00019958 	.word	0x00019958
   112a4:	0000dce1 	.word	0x0000dce1

000112a8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   112a8:	b580      	push	{r7, lr}
   112aa:	af00      	add	r7, sp, #0
   112ac:	4b03      	ldr	r3, [pc, #12]	; (112bc <SERCOM0_Handler+0x14>)
   112ae:	681b      	ldr	r3, [r3, #0]
   112b0:	2000      	movs	r0, #0
   112b2:	4798      	blx	r3
   112b4:	46c0      	nop			; (mov r8, r8)
   112b6:	46bd      	mov	sp, r7
   112b8:	bd80      	pop	{r7, pc}
   112ba:	46c0      	nop			; (mov r8, r8)
   112bc:	200003fc 	.word	0x200003fc

000112c0 <SERCOM1_Handler>:
   112c0:	b580      	push	{r7, lr}
   112c2:	af00      	add	r7, sp, #0
   112c4:	4b03      	ldr	r3, [pc, #12]	; (112d4 <SERCOM1_Handler+0x14>)
   112c6:	685b      	ldr	r3, [r3, #4]
   112c8:	2001      	movs	r0, #1
   112ca:	4798      	blx	r3
   112cc:	46c0      	nop			; (mov r8, r8)
   112ce:	46bd      	mov	sp, r7
   112d0:	bd80      	pop	{r7, pc}
   112d2:	46c0      	nop			; (mov r8, r8)
   112d4:	200003fc 	.word	0x200003fc

000112d8 <SERCOM2_Handler>:
   112d8:	b580      	push	{r7, lr}
   112da:	af00      	add	r7, sp, #0
   112dc:	4b03      	ldr	r3, [pc, #12]	; (112ec <SERCOM2_Handler+0x14>)
   112de:	689b      	ldr	r3, [r3, #8]
   112e0:	2002      	movs	r0, #2
   112e2:	4798      	blx	r3
   112e4:	46c0      	nop			; (mov r8, r8)
   112e6:	46bd      	mov	sp, r7
   112e8:	bd80      	pop	{r7, pc}
   112ea:	46c0      	nop			; (mov r8, r8)
   112ec:	200003fc 	.word	0x200003fc

000112f0 <SERCOM3_Handler>:
   112f0:	b580      	push	{r7, lr}
   112f2:	af00      	add	r7, sp, #0
   112f4:	4b03      	ldr	r3, [pc, #12]	; (11304 <SERCOM3_Handler+0x14>)
   112f6:	68db      	ldr	r3, [r3, #12]
   112f8:	2003      	movs	r0, #3
   112fa:	4798      	blx	r3
   112fc:	46c0      	nop			; (mov r8, r8)
   112fe:	46bd      	mov	sp, r7
   11300:	bd80      	pop	{r7, pc}
   11302:	46c0      	nop			; (mov r8, r8)
   11304:	200003fc 	.word	0x200003fc

00011308 <SERCOM4_Handler>:
   11308:	b580      	push	{r7, lr}
   1130a:	af00      	add	r7, sp, #0
   1130c:	4b03      	ldr	r3, [pc, #12]	; (1131c <SERCOM4_Handler+0x14>)
   1130e:	691b      	ldr	r3, [r3, #16]
   11310:	2004      	movs	r0, #4
   11312:	4798      	blx	r3
   11314:	46c0      	nop			; (mov r8, r8)
   11316:	46bd      	mov	sp, r7
   11318:	bd80      	pop	{r7, pc}
   1131a:	46c0      	nop			; (mov r8, r8)
   1131c:	200003fc 	.word	0x200003fc

00011320 <SERCOM5_Handler>:
   11320:	b580      	push	{r7, lr}
   11322:	af00      	add	r7, sp, #0
   11324:	4b03      	ldr	r3, [pc, #12]	; (11334 <SERCOM5_Handler+0x14>)
   11326:	695b      	ldr	r3, [r3, #20]
   11328:	2005      	movs	r0, #5
   1132a:	4798      	blx	r3
   1132c:	46c0      	nop			; (mov r8, r8)
   1132e:	46bd      	mov	sp, r7
   11330:	bd80      	pop	{r7, pc}
   11332:	46c0      	nop			; (mov r8, r8)
   11334:	200003fc 	.word	0x200003fc

00011338 <_extint_get_eic_from_channel>:
{
   11338:	b580      	push	{r7, lr}
   1133a:	b084      	sub	sp, #16
   1133c:	af00      	add	r7, sp, #0
   1133e:	0002      	movs	r2, r0
   11340:	1dfb      	adds	r3, r7, #7
   11342:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   11344:	230f      	movs	r3, #15
   11346:	18fb      	adds	r3, r7, r3
   11348:	1dfa      	adds	r2, r7, #7
   1134a:	7812      	ldrb	r2, [r2, #0]
   1134c:	0952      	lsrs	r2, r2, #5
   1134e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   11350:	230f      	movs	r3, #15
   11352:	18fb      	adds	r3, r7, r3
   11354:	781b      	ldrb	r3, [r3, #0]
   11356:	2b00      	cmp	r3, #0
   11358:	d10c      	bne.n	11374 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1135a:	4b09      	ldr	r3, [pc, #36]	; (11380 <_extint_get_eic_from_channel+0x48>)
   1135c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1135e:	230f      	movs	r3, #15
   11360:	18fb      	adds	r3, r7, r3
   11362:	781b      	ldrb	r3, [r3, #0]
   11364:	009b      	lsls	r3, r3, #2
   11366:	2210      	movs	r2, #16
   11368:	4694      	mov	ip, r2
   1136a:	44bc      	add	ip, r7
   1136c:	4463      	add	r3, ip
   1136e:	3b08      	subs	r3, #8
   11370:	681b      	ldr	r3, [r3, #0]
   11372:	e000      	b.n	11376 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   11374:	2300      	movs	r3, #0
}
   11376:	0018      	movs	r0, r3
   11378:	46bd      	mov	sp, r7
   1137a:	b004      	add	sp, #16
   1137c:	bd80      	pop	{r7, pc}
   1137e:	46c0      	nop			; (mov r8, r8)
   11380:	40001800 	.word	0x40001800

00011384 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   11384:	b580      	push	{r7, lr}
   11386:	b084      	sub	sp, #16
   11388:	af00      	add	r7, sp, #0
   1138a:	0002      	movs	r2, r0
   1138c:	1dfb      	adds	r3, r7, #7
   1138e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11390:	1dfb      	adds	r3, r7, #7
   11392:	781b      	ldrb	r3, [r3, #0]
   11394:	0018      	movs	r0, r3
   11396:	4b0b      	ldr	r3, [pc, #44]	; (113c4 <extint_chan_is_detected+0x40>)
   11398:	4798      	blx	r3
   1139a:	0003      	movs	r3, r0
   1139c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1139e:	1dfb      	adds	r3, r7, #7
   113a0:	781b      	ldrb	r3, [r3, #0]
   113a2:	221f      	movs	r2, #31
   113a4:	4013      	ands	r3, r2
   113a6:	2201      	movs	r2, #1
   113a8:	409a      	lsls	r2, r3
   113aa:	0013      	movs	r3, r2
   113ac:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   113ae:	68fb      	ldr	r3, [r7, #12]
   113b0:	691b      	ldr	r3, [r3, #16]
   113b2:	68ba      	ldr	r2, [r7, #8]
   113b4:	4013      	ands	r3, r2
   113b6:	1e5a      	subs	r2, r3, #1
   113b8:	4193      	sbcs	r3, r2
   113ba:	b2db      	uxtb	r3, r3
}
   113bc:	0018      	movs	r0, r3
   113be:	46bd      	mov	sp, r7
   113c0:	b004      	add	sp, #16
   113c2:	bd80      	pop	{r7, pc}
   113c4:	00011339 	.word	0x00011339

000113c8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   113c8:	b580      	push	{r7, lr}
   113ca:	b084      	sub	sp, #16
   113cc:	af00      	add	r7, sp, #0
   113ce:	0002      	movs	r2, r0
   113d0:	1dfb      	adds	r3, r7, #7
   113d2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   113d4:	1dfb      	adds	r3, r7, #7
   113d6:	781b      	ldrb	r3, [r3, #0]
   113d8:	0018      	movs	r0, r3
   113da:	4b09      	ldr	r3, [pc, #36]	; (11400 <extint_chan_clear_detected+0x38>)
   113dc:	4798      	blx	r3
   113de:	0003      	movs	r3, r0
   113e0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   113e2:	1dfb      	adds	r3, r7, #7
   113e4:	781b      	ldrb	r3, [r3, #0]
   113e6:	221f      	movs	r2, #31
   113e8:	4013      	ands	r3, r2
   113ea:	2201      	movs	r2, #1
   113ec:	409a      	lsls	r2, r3
   113ee:	0013      	movs	r3, r2
   113f0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   113f2:	68fb      	ldr	r3, [r7, #12]
   113f4:	68ba      	ldr	r2, [r7, #8]
   113f6:	611a      	str	r2, [r3, #16]
}
   113f8:	46c0      	nop			; (mov r8, r8)
   113fa:	46bd      	mov	sp, r7
   113fc:	b004      	add	sp, #16
   113fe:	bd80      	pop	{r7, pc}
   11400:	00011339 	.word	0x00011339

00011404 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   11404:	b580      	push	{r7, lr}
   11406:	b082      	sub	sp, #8
   11408:	af00      	add	r7, sp, #0
   1140a:	6078      	str	r0, [r7, #4]
   1140c:	0008      	movs	r0, r1
   1140e:	0011      	movs	r1, r2
   11410:	1cfb      	adds	r3, r7, #3
   11412:	1c02      	adds	r2, r0, #0
   11414:	701a      	strb	r2, [r3, #0]
   11416:	1cbb      	adds	r3, r7, #2
   11418:	1c0a      	adds	r2, r1, #0
   1141a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1141c:	1cbb      	adds	r3, r7, #2
   1141e:	781b      	ldrb	r3, [r3, #0]
   11420:	2b00      	cmp	r3, #0
   11422:	d001      	beq.n	11428 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   11424:	2317      	movs	r3, #23
   11426:	e019      	b.n	1145c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   11428:	1cfb      	adds	r3, r7, #3
   1142a:	781a      	ldrb	r2, [r3, #0]
   1142c:	4b0d      	ldr	r3, [pc, #52]	; (11464 <extint_register_callback+0x60>)
   1142e:	0092      	lsls	r2, r2, #2
   11430:	58d3      	ldr	r3, [r2, r3]
   11432:	2b00      	cmp	r3, #0
   11434:	d107      	bne.n	11446 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   11436:	1cfb      	adds	r3, r7, #3
   11438:	781a      	ldrb	r2, [r3, #0]
   1143a:	4b0a      	ldr	r3, [pc, #40]	; (11464 <extint_register_callback+0x60>)
   1143c:	0092      	lsls	r2, r2, #2
   1143e:	6879      	ldr	r1, [r7, #4]
   11440:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   11442:	2300      	movs	r3, #0
   11444:	e00a      	b.n	1145c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   11446:	1cfb      	adds	r3, r7, #3
   11448:	781a      	ldrb	r2, [r3, #0]
   1144a:	4b06      	ldr	r3, [pc, #24]	; (11464 <extint_register_callback+0x60>)
   1144c:	0092      	lsls	r2, r2, #2
   1144e:	58d2      	ldr	r2, [r2, r3]
   11450:	687b      	ldr	r3, [r7, #4]
   11452:	429a      	cmp	r2, r3
   11454:	d101      	bne.n	1145a <extint_register_callback+0x56>
		return STATUS_OK;
   11456:	2300      	movs	r3, #0
   11458:	e000      	b.n	1145c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   1145a:	231d      	movs	r3, #29
}
   1145c:	0018      	movs	r0, r3
   1145e:	46bd      	mov	sp, r7
   11460:	b002      	add	sp, #8
   11462:	bd80      	pop	{r7, pc}
   11464:	200008b0 	.word	0x200008b0

00011468 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   11468:	b580      	push	{r7, lr}
   1146a:	b084      	sub	sp, #16
   1146c:	af00      	add	r7, sp, #0
   1146e:	0002      	movs	r2, r0
   11470:	1dfb      	adds	r3, r7, #7
   11472:	701a      	strb	r2, [r3, #0]
   11474:	1dbb      	adds	r3, r7, #6
   11476:	1c0a      	adds	r2, r1, #0
   11478:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1147a:	1dbb      	adds	r3, r7, #6
   1147c:	781b      	ldrb	r3, [r3, #0]
   1147e:	2b00      	cmp	r3, #0
   11480:	d10e      	bne.n	114a0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   11482:	1dfb      	adds	r3, r7, #7
   11484:	781b      	ldrb	r3, [r3, #0]
   11486:	0018      	movs	r0, r3
   11488:	4b08      	ldr	r3, [pc, #32]	; (114ac <extint_chan_enable_callback+0x44>)
   1148a:	4798      	blx	r3
   1148c:	0003      	movs	r3, r0
   1148e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   11490:	1dfb      	adds	r3, r7, #7
   11492:	781b      	ldrb	r3, [r3, #0]
   11494:	2201      	movs	r2, #1
   11496:	409a      	lsls	r2, r3
   11498:	68fb      	ldr	r3, [r7, #12]
   1149a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   1149c:	2300      	movs	r3, #0
   1149e:	e000      	b.n	114a2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   114a0:	2317      	movs	r3, #23
}
   114a2:	0018      	movs	r0, r3
   114a4:	46bd      	mov	sp, r7
   114a6:	b004      	add	sp, #16
   114a8:	bd80      	pop	{r7, pc}
   114aa:	46c0      	nop			; (mov r8, r8)
   114ac:	00011339 	.word	0x00011339

000114b0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   114b0:	b580      	push	{r7, lr}
   114b2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   114b4:	4b15      	ldr	r3, [pc, #84]	; (1150c <EIC_Handler+0x5c>)
   114b6:	2200      	movs	r2, #0
   114b8:	701a      	strb	r2, [r3, #0]
   114ba:	e020      	b.n	114fe <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   114bc:	4b13      	ldr	r3, [pc, #76]	; (1150c <EIC_Handler+0x5c>)
   114be:	781b      	ldrb	r3, [r3, #0]
   114c0:	0018      	movs	r0, r3
   114c2:	4b13      	ldr	r3, [pc, #76]	; (11510 <EIC_Handler+0x60>)
   114c4:	4798      	blx	r3
   114c6:	1e03      	subs	r3, r0, #0
   114c8:	d013      	beq.n	114f2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   114ca:	4b10      	ldr	r3, [pc, #64]	; (1150c <EIC_Handler+0x5c>)
   114cc:	781b      	ldrb	r3, [r3, #0]
   114ce:	0018      	movs	r0, r3
   114d0:	4b10      	ldr	r3, [pc, #64]	; (11514 <EIC_Handler+0x64>)
   114d2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   114d4:	4b0d      	ldr	r3, [pc, #52]	; (1150c <EIC_Handler+0x5c>)
   114d6:	781b      	ldrb	r3, [r3, #0]
   114d8:	001a      	movs	r2, r3
   114da:	4b0f      	ldr	r3, [pc, #60]	; (11518 <EIC_Handler+0x68>)
   114dc:	0092      	lsls	r2, r2, #2
   114de:	58d3      	ldr	r3, [r2, r3]
   114e0:	2b00      	cmp	r3, #0
   114e2:	d006      	beq.n	114f2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   114e4:	4b09      	ldr	r3, [pc, #36]	; (1150c <EIC_Handler+0x5c>)
   114e6:	781b      	ldrb	r3, [r3, #0]
   114e8:	001a      	movs	r2, r3
   114ea:	4b0b      	ldr	r3, [pc, #44]	; (11518 <EIC_Handler+0x68>)
   114ec:	0092      	lsls	r2, r2, #2
   114ee:	58d3      	ldr	r3, [r2, r3]
   114f0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   114f2:	4b06      	ldr	r3, [pc, #24]	; (1150c <EIC_Handler+0x5c>)
   114f4:	781b      	ldrb	r3, [r3, #0]
   114f6:	3301      	adds	r3, #1
   114f8:	b2da      	uxtb	r2, r3
   114fa:	4b04      	ldr	r3, [pc, #16]	; (1150c <EIC_Handler+0x5c>)
   114fc:	701a      	strb	r2, [r3, #0]
   114fe:	4b03      	ldr	r3, [pc, #12]	; (1150c <EIC_Handler+0x5c>)
   11500:	781b      	ldrb	r3, [r3, #0]
   11502:	2b0f      	cmp	r3, #15
   11504:	d9da      	bls.n	114bc <EIC_Handler+0xc>
			}
		}
	}
}
   11506:	46c0      	nop			; (mov r8, r8)
   11508:	46bd      	mov	sp, r7
   1150a:	bd80      	pop	{r7, pc}
   1150c:	20000930 	.word	0x20000930
   11510:	00011385 	.word	0x00011385
   11514:	000113c9 	.word	0x000113c9
   11518:	200008b0 	.word	0x200008b0

0001151c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   1151c:	b580      	push	{r7, lr}
   1151e:	b082      	sub	sp, #8
   11520:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   11522:	4b15      	ldr	r3, [pc, #84]	; (11578 <EVSYS_Handler+0x5c>)
   11524:	691b      	ldr	r3, [r3, #16]
   11526:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   11528:	4b14      	ldr	r3, [pc, #80]	; (1157c <EVSYS_Handler+0x60>)
   1152a:	699b      	ldr	r3, [r3, #24]
   1152c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1152e:	4b12      	ldr	r3, [pc, #72]	; (11578 <EVSYS_Handler+0x5c>)
   11530:	689a      	ldr	r2, [r3, #8]
   11532:	683b      	ldr	r3, [r7, #0]
   11534:	431a      	orrs	r2, r3
   11536:	4b10      	ldr	r3, [pc, #64]	; (11578 <EVSYS_Handler+0x5c>)
   11538:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   1153a:	4b10      	ldr	r3, [pc, #64]	; (1157c <EVSYS_Handler+0x60>)
   1153c:	4a10      	ldr	r2, [pc, #64]	; (11580 <EVSYS_Handler+0x64>)
   1153e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   11540:	e008      	b.n	11554 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   11542:	687b      	ldr	r3, [r7, #4]
   11544:	685a      	ldr	r2, [r3, #4]
   11546:	687b      	ldr	r3, [r7, #4]
   11548:	681b      	ldr	r3, [r3, #0]
   1154a:	0018      	movs	r0, r3
   1154c:	4790      	blx	r2
		current_hook = current_hook->next;
   1154e:	687b      	ldr	r3, [r7, #4]
   11550:	689b      	ldr	r3, [r3, #8]
   11552:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   11554:	687b      	ldr	r3, [r7, #4]
   11556:	2b00      	cmp	r3, #0
   11558:	d1f3      	bne.n	11542 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   1155a:	4b07      	ldr	r3, [pc, #28]	; (11578 <EVSYS_Handler+0x5c>)
   1155c:	68db      	ldr	r3, [r3, #12]
   1155e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   11560:	4b05      	ldr	r3, [pc, #20]	; (11578 <EVSYS_Handler+0x5c>)
   11562:	689b      	ldr	r3, [r3, #8]
   11564:	683a      	ldr	r2, [r7, #0]
   11566:	43d2      	mvns	r2, r2
   11568:	401a      	ands	r2, r3
   1156a:	4b03      	ldr	r3, [pc, #12]	; (11578 <EVSYS_Handler+0x5c>)
   1156c:	609a      	str	r2, [r3, #8]
}
   1156e:	46c0      	nop			; (mov r8, r8)
   11570:	46bd      	mov	sp, r7
   11572:	b002      	add	sp, #8
   11574:	bd80      	pop	{r7, pc}
   11576:	46c0      	nop			; (mov r8, r8)
   11578:	20000014 	.word	0x20000014
   1157c:	42000400 	.word	0x42000400
   11580:	0f0fffff 	.word	0x0f0fffff

00011584 <system_gclk_chan_get_config_defaults>:
{
   11584:	b580      	push	{r7, lr}
   11586:	b082      	sub	sp, #8
   11588:	af00      	add	r7, sp, #0
   1158a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1158c:	687b      	ldr	r3, [r7, #4]
   1158e:	2200      	movs	r2, #0
   11590:	701a      	strb	r2, [r3, #0]
}
   11592:	46c0      	nop			; (mov r8, r8)
   11594:	46bd      	mov	sp, r7
   11596:	b002      	add	sp, #8
   11598:	bd80      	pop	{r7, pc}
	...

0001159c <system_apb_clock_set_mask>:
{
   1159c:	b580      	push	{r7, lr}
   1159e:	b082      	sub	sp, #8
   115a0:	af00      	add	r7, sp, #0
   115a2:	0002      	movs	r2, r0
   115a4:	6039      	str	r1, [r7, #0]
   115a6:	1dfb      	adds	r3, r7, #7
   115a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   115aa:	1dfb      	adds	r3, r7, #7
   115ac:	781b      	ldrb	r3, [r3, #0]
   115ae:	2b01      	cmp	r3, #1
   115b0:	d00a      	beq.n	115c8 <system_apb_clock_set_mask+0x2c>
   115b2:	2b02      	cmp	r3, #2
   115b4:	d00f      	beq.n	115d6 <system_apb_clock_set_mask+0x3a>
   115b6:	2b00      	cmp	r3, #0
   115b8:	d114      	bne.n	115e4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   115ba:	4b0e      	ldr	r3, [pc, #56]	; (115f4 <system_apb_clock_set_mask+0x58>)
   115bc:	4a0d      	ldr	r2, [pc, #52]	; (115f4 <system_apb_clock_set_mask+0x58>)
   115be:	6991      	ldr	r1, [r2, #24]
   115c0:	683a      	ldr	r2, [r7, #0]
   115c2:	430a      	orrs	r2, r1
   115c4:	619a      	str	r2, [r3, #24]
			break;
   115c6:	e00f      	b.n	115e8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   115c8:	4b0a      	ldr	r3, [pc, #40]	; (115f4 <system_apb_clock_set_mask+0x58>)
   115ca:	4a0a      	ldr	r2, [pc, #40]	; (115f4 <system_apb_clock_set_mask+0x58>)
   115cc:	69d1      	ldr	r1, [r2, #28]
   115ce:	683a      	ldr	r2, [r7, #0]
   115d0:	430a      	orrs	r2, r1
   115d2:	61da      	str	r2, [r3, #28]
			break;
   115d4:	e008      	b.n	115e8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   115d6:	4b07      	ldr	r3, [pc, #28]	; (115f4 <system_apb_clock_set_mask+0x58>)
   115d8:	4a06      	ldr	r2, [pc, #24]	; (115f4 <system_apb_clock_set_mask+0x58>)
   115da:	6a11      	ldr	r1, [r2, #32]
   115dc:	683a      	ldr	r2, [r7, #0]
   115de:	430a      	orrs	r2, r1
   115e0:	621a      	str	r2, [r3, #32]
			break;
   115e2:	e001      	b.n	115e8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   115e4:	2317      	movs	r3, #23
   115e6:	e000      	b.n	115ea <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   115e8:	2300      	movs	r3, #0
}
   115ea:	0018      	movs	r0, r3
   115ec:	46bd      	mov	sp, r7
   115ee:	b002      	add	sp, #8
   115f0:	bd80      	pop	{r7, pc}
   115f2:	46c0      	nop			; (mov r8, r8)
   115f4:	40000400 	.word	0x40000400

000115f8 <system_interrupt_enter_critical_section>:
{
   115f8:	b580      	push	{r7, lr}
   115fa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   115fc:	4b02      	ldr	r3, [pc, #8]	; (11608 <system_interrupt_enter_critical_section+0x10>)
   115fe:	4798      	blx	r3
}
   11600:	46c0      	nop			; (mov r8, r8)
   11602:	46bd      	mov	sp, r7
   11604:	bd80      	pop	{r7, pc}
   11606:	46c0      	nop			; (mov r8, r8)
   11608:	00012c05 	.word	0x00012c05

0001160c <system_interrupt_leave_critical_section>:
{
   1160c:	b580      	push	{r7, lr}
   1160e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   11610:	4b02      	ldr	r3, [pc, #8]	; (1161c <system_interrupt_leave_critical_section+0x10>)
   11612:	4798      	blx	r3
}
   11614:	46c0      	nop			; (mov r8, r8)
   11616:	46bd      	mov	sp, r7
   11618:	bd80      	pop	{r7, pc}
   1161a:	46c0      	nop			; (mov r8, r8)
   1161c:	00012c59 	.word	0x00012c59

00011620 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   11620:	b580      	push	{r7, lr}
   11622:	b084      	sub	sp, #16
   11624:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   11626:	1dfb      	adds	r3, r7, #7
   11628:	2200      	movs	r2, #0
   1162a:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   1162c:	4b21      	ldr	r3, [pc, #132]	; (116b4 <_events_find_first_free_channel_and_allocate+0x94>)
   1162e:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   11630:	4b21      	ldr	r3, [pc, #132]	; (116b8 <_events_find_first_free_channel_and_allocate+0x98>)
   11632:	681b      	ldr	r3, [r3, #0]
   11634:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   11636:	230f      	movs	r3, #15
   11638:	18fb      	adds	r3, r7, r3
   1163a:	2200      	movs	r2, #0
   1163c:	701a      	strb	r2, [r3, #0]
   1163e:	e022      	b.n	11686 <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   11640:	68bb      	ldr	r3, [r7, #8]
   11642:	2201      	movs	r2, #1
   11644:	4013      	ands	r3, r2
   11646:	d114      	bne.n	11672 <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   11648:	4b1b      	ldr	r3, [pc, #108]	; (116b8 <_events_find_first_free_channel_and_allocate+0x98>)
   1164a:	681b      	ldr	r3, [r3, #0]
   1164c:	220f      	movs	r2, #15
   1164e:	18ba      	adds	r2, r7, r2
   11650:	7812      	ldrb	r2, [r2, #0]
   11652:	2101      	movs	r1, #1
   11654:	4091      	lsls	r1, r2
   11656:	000a      	movs	r2, r1
   11658:	431a      	orrs	r2, r3
   1165a:	4b17      	ldr	r3, [pc, #92]	; (116b8 <_events_find_first_free_channel_and_allocate+0x98>)
   1165c:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   1165e:	4b16      	ldr	r3, [pc, #88]	; (116b8 <_events_find_first_free_channel_and_allocate+0x98>)
   11660:	791b      	ldrb	r3, [r3, #4]
   11662:	3b01      	subs	r3, #1
   11664:	b2da      	uxtb	r2, r3
   11666:	4b14      	ldr	r3, [pc, #80]	; (116b8 <_events_find_first_free_channel_and_allocate+0x98>)
   11668:	711a      	strb	r2, [r3, #4]
			allocated = true;
   1166a:	1dfb      	adds	r3, r7, #7
   1166c:	2201      	movs	r2, #1
   1166e:	701a      	strb	r2, [r3, #0]

			break;
   11670:	e00e      	b.n	11690 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   11672:	68bb      	ldr	r3, [r7, #8]
   11674:	085b      	lsrs	r3, r3, #1
   11676:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   11678:	230f      	movs	r3, #15
   1167a:	18fb      	adds	r3, r7, r3
   1167c:	220f      	movs	r2, #15
   1167e:	18ba      	adds	r2, r7, r2
   11680:	7812      	ldrb	r2, [r2, #0]
   11682:	3201      	adds	r2, #1
   11684:	701a      	strb	r2, [r3, #0]
   11686:	230f      	movs	r3, #15
   11688:	18fb      	adds	r3, r7, r3
   1168a:	781b      	ldrb	r3, [r3, #0]
   1168c:	2b0b      	cmp	r3, #11
   1168e:	d9d7      	bls.n	11640 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   11690:	4b0a      	ldr	r3, [pc, #40]	; (116bc <_events_find_first_free_channel_and_allocate+0x9c>)
   11692:	4798      	blx	r3

	if(!allocated) {
   11694:	1dfb      	adds	r3, r7, #7
   11696:	781b      	ldrb	r3, [r3, #0]
   11698:	2201      	movs	r2, #1
   1169a:	4053      	eors	r3, r2
   1169c:	b2db      	uxtb	r3, r3
   1169e:	2b00      	cmp	r3, #0
   116a0:	d001      	beq.n	116a6 <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   116a2:	23ff      	movs	r3, #255	; 0xff
   116a4:	e002      	b.n	116ac <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   116a6:	230f      	movs	r3, #15
   116a8:	18fb      	adds	r3, r7, r3
   116aa:	781b      	ldrb	r3, [r3, #0]
	}
}
   116ac:	0018      	movs	r0, r3
   116ae:	46bd      	mov	sp, r7
   116b0:	b004      	add	sp, #16
   116b2:	bd80      	pop	{r7, pc}
   116b4:	000115f9 	.word	0x000115f9
   116b8:	20000014 	.word	0x20000014
   116bc:	0001160d 	.word	0x0001160d

000116c0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   116c0:	b580      	push	{r7, lr}
   116c2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   116c4:	2102      	movs	r1, #2
   116c6:	2002      	movs	r0, #2
   116c8:	4b07      	ldr	r3, [pc, #28]	; (116e8 <_system_events_init+0x28>)
   116ca:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   116cc:	4b07      	ldr	r3, [pc, #28]	; (116ec <_system_events_init+0x2c>)
   116ce:	2201      	movs	r2, #1
   116d0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   116d2:	46c0      	nop			; (mov r8, r8)
   116d4:	4b05      	ldr	r3, [pc, #20]	; (116ec <_system_events_init+0x2c>)
   116d6:	781b      	ldrb	r3, [r3, #0]
   116d8:	b2db      	uxtb	r3, r3
   116da:	001a      	movs	r2, r3
   116dc:	2301      	movs	r3, #1
   116de:	4013      	ands	r3, r2
   116e0:	d1f8      	bne.n	116d4 <_system_events_init+0x14>
	}
}
   116e2:	46c0      	nop			; (mov r8, r8)
   116e4:	46bd      	mov	sp, r7
   116e6:	bd80      	pop	{r7, pc}
   116e8:	0001159d 	.word	0x0001159d
   116ec:	42000400 	.word	0x42000400

000116f0 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   116f0:	b580      	push	{r7, lr}
   116f2:	b082      	sub	sp, #8
   116f4:	af00      	add	r7, sp, #0
   116f6:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   116f8:	687b      	ldr	r3, [r7, #4]
   116fa:	2201      	movs	r2, #1
   116fc:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   116fe:	687b      	ldr	r3, [r7, #4]
   11700:	2200      	movs	r2, #0
   11702:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   11704:	687b      	ldr	r3, [r7, #4]
   11706:	2200      	movs	r2, #0
   11708:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   1170a:	687b      	ldr	r3, [r7, #4]
   1170c:	2200      	movs	r2, #0
   1170e:	70da      	strb	r2, [r3, #3]
}
   11710:	46c0      	nop			; (mov r8, r8)
   11712:	46bd      	mov	sp, r7
   11714:	b002      	add	sp, #8
   11716:	bd80      	pop	{r7, pc}

00011718 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   11718:	b590      	push	{r4, r7, lr}
   1171a:	b085      	sub	sp, #20
   1171c:	af00      	add	r7, sp, #0
   1171e:	6078      	str	r0, [r7, #4]
   11720:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   11722:	230f      	movs	r3, #15
   11724:	18fc      	adds	r4, r7, r3
   11726:	4b2a      	ldr	r3, [pc, #168]	; (117d0 <events_allocate+0xb8>)
   11728:	4798      	blx	r3
   1172a:	0003      	movs	r3, r0
   1172c:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   1172e:	230f      	movs	r3, #15
   11730:	18fb      	adds	r3, r7, r3
   11732:	781b      	ldrb	r3, [r3, #0]
   11734:	2bff      	cmp	r3, #255	; 0xff
   11736:	d101      	bne.n	1173c <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   11738:	2314      	movs	r3, #20
   1173a:	e045      	b.n	117c8 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   1173c:	687b      	ldr	r3, [r7, #4]
   1173e:	220f      	movs	r2, #15
   11740:	18ba      	adds	r2, r7, r2
   11742:	7812      	ldrb	r2, [r2, #0]
   11744:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   11746:	683b      	ldr	r3, [r7, #0]
   11748:	785b      	ldrb	r3, [r3, #1]
   1174a:	2b02      	cmp	r3, #2
   1174c:	d01c      	beq.n	11788 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1174e:	230c      	movs	r3, #12
   11750:	18fb      	adds	r3, r7, r3
   11752:	0018      	movs	r0, r3
   11754:	4b1f      	ldr	r3, [pc, #124]	; (117d4 <events_allocate+0xbc>)
   11756:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   11758:	683b      	ldr	r3, [r7, #0]
   1175a:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   1175c:	230c      	movs	r3, #12
   1175e:	18fb      	adds	r3, r7, r3
   11760:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   11762:	230f      	movs	r3, #15
   11764:	18fb      	adds	r3, r7, r3
   11766:	781b      	ldrb	r3, [r3, #0]
   11768:	3307      	adds	r3, #7
   1176a:	b2db      	uxtb	r3, r3
   1176c:	220c      	movs	r2, #12
   1176e:	18ba      	adds	r2, r7, r2
   11770:	0011      	movs	r1, r2
   11772:	0018      	movs	r0, r3
   11774:	4b18      	ldr	r3, [pc, #96]	; (117d8 <events_allocate+0xc0>)
   11776:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   11778:	230f      	movs	r3, #15
   1177a:	18fb      	adds	r3, r7, r3
   1177c:	781b      	ldrb	r3, [r3, #0]
   1177e:	3307      	adds	r3, #7
   11780:	b2db      	uxtb	r3, r3
   11782:	0018      	movs	r0, r3
   11784:	4b15      	ldr	r3, [pc, #84]	; (117dc <events_allocate+0xc4>)
   11786:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   11788:	230f      	movs	r3, #15
   1178a:	18fb      	adds	r3, r7, r3
   1178c:	781b      	ldrb	r3, [r3, #0]
   1178e:	220f      	movs	r2, #15
   11790:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   11792:	683b      	ldr	r3, [r7, #0]
   11794:	789b      	ldrb	r3, [r3, #2]
   11796:	041b      	lsls	r3, r3, #16
   11798:	0019      	movs	r1, r3
   1179a:	23fe      	movs	r3, #254	; 0xfe
   1179c:	03db      	lsls	r3, r3, #15
   1179e:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   117a0:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   117a2:	683b      	ldr	r3, [r7, #0]
   117a4:	785b      	ldrb	r3, [r3, #1]
   117a6:	061b      	lsls	r3, r3, #24
   117a8:	0019      	movs	r1, r3
   117aa:	23c0      	movs	r3, #192	; 0xc0
   117ac:	049b      	lsls	r3, r3, #18
   117ae:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   117b0:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   117b2:	683b      	ldr	r3, [r7, #0]
   117b4:	781b      	ldrb	r3, [r3, #0]
   117b6:	069b      	lsls	r3, r3, #26
   117b8:	0019      	movs	r1, r3
   117ba:	23c0      	movs	r3, #192	; 0xc0
   117bc:	051b      	lsls	r3, r3, #20
   117be:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   117c0:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   117c2:	687b      	ldr	r3, [r7, #4]
   117c4:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   117c6:	2300      	movs	r3, #0
}
   117c8:	0018      	movs	r0, r3
   117ca:	46bd      	mov	sp, r7
   117cc:	b005      	add	sp, #20
   117ce:	bd90      	pop	{r4, r7, pc}
   117d0:	00011621 	.word	0x00011621
   117d4:	00011585 	.word	0x00011585
   117d8:	000139bd 	.word	0x000139bd
   117dc:	00013a01 	.word	0x00013a01

000117e0 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   117e0:	b580      	push	{r7, lr}
   117e2:	b082      	sub	sp, #8
   117e4:	af00      	add	r7, sp, #0
   117e6:	6078      	str	r0, [r7, #4]
   117e8:	000a      	movs	r2, r1
   117ea:	1cfb      	adds	r3, r7, #3
   117ec:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   117ee:	490f      	ldr	r1, [pc, #60]	; (1182c <events_attach_user+0x4c>)
   117f0:	687b      	ldr	r3, [r7, #4]
   117f2:	781b      	ldrb	r3, [r3, #0]
   117f4:	b29b      	uxth	r3, r3
   117f6:	3301      	adds	r3, #1
   117f8:	b29b      	uxth	r3, r3
   117fa:	021b      	lsls	r3, r3, #8
   117fc:	b29a      	uxth	r2, r3
   117fe:	23f8      	movs	r3, #248	; 0xf8
   11800:	015b      	lsls	r3, r3, #5
   11802:	4013      	ands	r3, r2
   11804:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   11806:	1cfb      	adds	r3, r7, #3
   11808:	781b      	ldrb	r3, [r3, #0]
   1180a:	b29b      	uxth	r3, r3
   1180c:	201f      	movs	r0, #31
   1180e:	4003      	ands	r3, r0
   11810:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   11812:	4313      	orrs	r3, r2
   11814:	b29b      	uxth	r3, r3
   11816:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   11818:	4a04      	ldr	r2, [pc, #16]	; (1182c <events_attach_user+0x4c>)
   1181a:	687b      	ldr	r3, [r7, #4]
   1181c:	685b      	ldr	r3, [r3, #4]
   1181e:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   11820:	2300      	movs	r3, #0
}
   11822:	0018      	movs	r0, r3
   11824:	46bd      	mov	sp, r7
   11826:	b002      	add	sp, #8
   11828:	bd80      	pop	{r7, pc}
   1182a:	46c0      	nop			; (mov r8, r8)
   1182c:	42000400 	.word	0x42000400

00011830 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   11830:	b580      	push	{r7, lr}
   11832:	b084      	sub	sp, #16
   11834:	af00      	add	r7, sp, #0
   11836:	60f8      	str	r0, [r7, #12]
   11838:	60b9      	str	r1, [r7, #8]
   1183a:	1dfb      	adds	r3, r7, #7
   1183c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1183e:	1dfb      	adds	r3, r7, #7
   11840:	781b      	ldrb	r3, [r3, #0]
   11842:	68fa      	ldr	r2, [r7, #12]
   11844:	009b      	lsls	r3, r3, #2
   11846:	18d3      	adds	r3, r2, r3
   11848:	3304      	adds	r3, #4
   1184a:	68ba      	ldr	r2, [r7, #8]
   1184c:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   1184e:	68fb      	ldr	r3, [r7, #12]
   11850:	7e1b      	ldrb	r3, [r3, #24]
   11852:	b25a      	sxtb	r2, r3
   11854:	1dfb      	adds	r3, r7, #7
   11856:	781b      	ldrb	r3, [r3, #0]
   11858:	2101      	movs	r1, #1
   1185a:	4099      	lsls	r1, r3
   1185c:	000b      	movs	r3, r1
   1185e:	b25b      	sxtb	r3, r3
   11860:	4313      	orrs	r3, r2
   11862:	b25b      	sxtb	r3, r3
   11864:	b2da      	uxtb	r2, r3
   11866:	68fb      	ldr	r3, [r7, #12]
   11868:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   1186a:	2300      	movs	r3, #0
}
   1186c:	0018      	movs	r0, r3
   1186e:	46bd      	mov	sp, r7
   11870:	b004      	add	sp, #16
   11872:	bd80      	pop	{r7, pc}

00011874 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   11874:	b580      	push	{r7, lr}
   11876:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   11878:	2000      	movs	r0, #0
   1187a:	4b02      	ldr	r3, [pc, #8]	; (11884 <AC_Handler+0x10>)
   1187c:	4798      	blx	r3
}
   1187e:	46c0      	nop			; (mov r8, r8)
   11880:	46bd      	mov	sp, r7
   11882:	bd80      	pop	{r7, pc}
   11884:	00011889 	.word	0x00011889

00011888 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   11888:	b580      	push	{r7, lr}
   1188a:	b084      	sub	sp, #16
   1188c:	af00      	add	r7, sp, #0
   1188e:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   11890:	4b23      	ldr	r3, [pc, #140]	; (11920 <_ac_interrupt_handler+0x98>)
   11892:	687a      	ldr	r2, [r7, #4]
   11894:	0092      	lsls	r2, r2, #2
   11896:	58d3      	ldr	r3, [r2, r3]
   11898:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   1189a:	4b21      	ldr	r3, [pc, #132]	; (11920 <_ac_interrupt_handler+0x98>)
   1189c:	687a      	ldr	r2, [r7, #4]
   1189e:	0092      	lsls	r2, r2, #2
   118a0:	58d3      	ldr	r3, [r2, r3]
   118a2:	681b      	ldr	r3, [r3, #0]
   118a4:	799b      	ldrb	r3, [r3, #6]
   118a6:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   118a8:	68fb      	ldr	r3, [r7, #12]
   118aa:	7e1b      	ldrb	r3, [r3, #24]
   118ac:	68f9      	ldr	r1, [r7, #12]
   118ae:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   118b0:	400b      	ands	r3, r1
   118b2:	b2d9      	uxtb	r1, r3
   118b4:	230b      	movs	r3, #11
   118b6:	18fb      	adds	r3, r7, r3
   118b8:	400a      	ands	r2, r1
   118ba:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   118bc:	230b      	movs	r3, #11
   118be:	18fb      	adds	r3, r7, r3
   118c0:	781b      	ldrb	r3, [r3, #0]
   118c2:	2201      	movs	r2, #1
   118c4:	4013      	ands	r3, r2
   118c6:	d008      	beq.n	118da <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   118c8:	68fb      	ldr	r3, [r7, #12]
   118ca:	685b      	ldr	r3, [r3, #4]
   118cc:	68fa      	ldr	r2, [r7, #12]
   118ce:	0010      	movs	r0, r2
   118d0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   118d2:	68fb      	ldr	r3, [r7, #12]
   118d4:	681b      	ldr	r3, [r3, #0]
   118d6:	2201      	movs	r2, #1
   118d8:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   118da:	230b      	movs	r3, #11
   118dc:	18fb      	adds	r3, r7, r3
   118de:	781b      	ldrb	r3, [r3, #0]
   118e0:	2202      	movs	r2, #2
   118e2:	4013      	ands	r3, r2
   118e4:	d008      	beq.n	118f8 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   118e6:	68fb      	ldr	r3, [r7, #12]
   118e8:	689b      	ldr	r3, [r3, #8]
   118ea:	68fa      	ldr	r2, [r7, #12]
   118ec:	0010      	movs	r0, r2
   118ee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   118f0:	68fb      	ldr	r3, [r7, #12]
   118f2:	681b      	ldr	r3, [r3, #0]
   118f4:	2202      	movs	r2, #2
   118f6:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   118f8:	230b      	movs	r3, #11
   118fa:	18fb      	adds	r3, r7, r3
   118fc:	781b      	ldrb	r3, [r3, #0]
   118fe:	2210      	movs	r2, #16
   11900:	4013      	ands	r3, r2
   11902:	d008      	beq.n	11916 <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   11904:	68fb      	ldr	r3, [r7, #12]
   11906:	695b      	ldr	r3, [r3, #20]
   11908:	68fa      	ldr	r2, [r7, #12]
   1190a:	0010      	movs	r0, r2
   1190c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   1190e:	68fb      	ldr	r3, [r7, #12]
   11910:	681b      	ldr	r3, [r3, #0]
   11912:	2210      	movs	r2, #16
   11914:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   11916:	46c0      	nop			; (mov r8, r8)
   11918:	46bd      	mov	sp, r7
   1191a:	b004      	add	sp, #16
   1191c:	bd80      	pop	{r7, pc}
   1191e:	46c0      	nop			; (mov r8, r8)
   11920:	20000934 	.word	0x20000934

00011924 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   11924:	b580      	push	{r7, lr}
   11926:	af00      	add	r7, sp, #0
}
   11928:	46c0      	nop			; (mov r8, r8)
   1192a:	46bd      	mov	sp, r7
   1192c:	bd80      	pop	{r7, pc}
	...

00011930 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   11930:	b580      	push	{r7, lr}
   11932:	b082      	sub	sp, #8
   11934:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11936:	4b07      	ldr	r3, [pc, #28]	; (11954 <nvm_is_ready+0x24>)
   11938:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   1193a:	687b      	ldr	r3, [r7, #4]
   1193c:	7d1b      	ldrb	r3, [r3, #20]
   1193e:	b2db      	uxtb	r3, r3
   11940:	001a      	movs	r2, r3
   11942:	2301      	movs	r3, #1
   11944:	4013      	ands	r3, r2
   11946:	1e5a      	subs	r2, r3, #1
   11948:	4193      	sbcs	r3, r2
   1194a:	b2db      	uxtb	r3, r3
}
   1194c:	0018      	movs	r0, r3
   1194e:	46bd      	mov	sp, r7
   11950:	b002      	add	sp, #8
   11952:	bd80      	pop	{r7, pc}
   11954:	41004000 	.word	0x41004000

00011958 <system_apb_clock_set_mask>:
{
   11958:	b580      	push	{r7, lr}
   1195a:	b082      	sub	sp, #8
   1195c:	af00      	add	r7, sp, #0
   1195e:	0002      	movs	r2, r0
   11960:	6039      	str	r1, [r7, #0]
   11962:	1dfb      	adds	r3, r7, #7
   11964:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11966:	1dfb      	adds	r3, r7, #7
   11968:	781b      	ldrb	r3, [r3, #0]
   1196a:	2b01      	cmp	r3, #1
   1196c:	d00a      	beq.n	11984 <system_apb_clock_set_mask+0x2c>
   1196e:	2b02      	cmp	r3, #2
   11970:	d00f      	beq.n	11992 <system_apb_clock_set_mask+0x3a>
   11972:	2b00      	cmp	r3, #0
   11974:	d114      	bne.n	119a0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   11976:	4b0e      	ldr	r3, [pc, #56]	; (119b0 <system_apb_clock_set_mask+0x58>)
   11978:	4a0d      	ldr	r2, [pc, #52]	; (119b0 <system_apb_clock_set_mask+0x58>)
   1197a:	6991      	ldr	r1, [r2, #24]
   1197c:	683a      	ldr	r2, [r7, #0]
   1197e:	430a      	orrs	r2, r1
   11980:	619a      	str	r2, [r3, #24]
			break;
   11982:	e00f      	b.n	119a4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   11984:	4b0a      	ldr	r3, [pc, #40]	; (119b0 <system_apb_clock_set_mask+0x58>)
   11986:	4a0a      	ldr	r2, [pc, #40]	; (119b0 <system_apb_clock_set_mask+0x58>)
   11988:	69d1      	ldr	r1, [r2, #28]
   1198a:	683a      	ldr	r2, [r7, #0]
   1198c:	430a      	orrs	r2, r1
   1198e:	61da      	str	r2, [r3, #28]
			break;
   11990:	e008      	b.n	119a4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   11992:	4b07      	ldr	r3, [pc, #28]	; (119b0 <system_apb_clock_set_mask+0x58>)
   11994:	4a06      	ldr	r2, [pc, #24]	; (119b0 <system_apb_clock_set_mask+0x58>)
   11996:	6a11      	ldr	r1, [r2, #32]
   11998:	683a      	ldr	r2, [r7, #0]
   1199a:	430a      	orrs	r2, r1
   1199c:	621a      	str	r2, [r3, #32]
			break;
   1199e:	e001      	b.n	119a4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   119a0:	2317      	movs	r3, #23
   119a2:	e000      	b.n	119a6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   119a4:	2300      	movs	r3, #0
}
   119a6:	0018      	movs	r0, r3
   119a8:	46bd      	mov	sp, r7
   119aa:	b002      	add	sp, #8
   119ac:	bd80      	pop	{r7, pc}
   119ae:	46c0      	nop			; (mov r8, r8)
   119b0:	40000400 	.word	0x40000400

000119b4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   119b4:	b580      	push	{r7, lr}
   119b6:	b084      	sub	sp, #16
   119b8:	af00      	add	r7, sp, #0
   119ba:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   119bc:	4b2f      	ldr	r3, [pc, #188]	; (11a7c <nvm_set_config+0xc8>)
   119be:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   119c0:	2104      	movs	r1, #4
   119c2:	2001      	movs	r0, #1
   119c4:	4b2e      	ldr	r3, [pc, #184]	; (11a80 <nvm_set_config+0xcc>)
   119c6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   119c8:	68fb      	ldr	r3, [r7, #12]
   119ca:	2220      	movs	r2, #32
   119cc:	32ff      	adds	r2, #255	; 0xff
   119ce:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   119d0:	4b2c      	ldr	r3, [pc, #176]	; (11a84 <nvm_set_config+0xd0>)
   119d2:	4798      	blx	r3
   119d4:	0003      	movs	r3, r0
   119d6:	001a      	movs	r2, r3
   119d8:	2301      	movs	r3, #1
   119da:	4053      	eors	r3, r2
   119dc:	b2db      	uxtb	r3, r3
   119de:	2b00      	cmp	r3, #0
   119e0:	d001      	beq.n	119e6 <nvm_set_config+0x32>
		return STATUS_BUSY;
   119e2:	2305      	movs	r3, #5
   119e4:	e045      	b.n	11a72 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   119e6:	687b      	ldr	r3, [r7, #4]
   119e8:	781b      	ldrb	r3, [r3, #0]
   119ea:	021b      	lsls	r3, r3, #8
   119ec:	001a      	movs	r2, r3
   119ee:	23c0      	movs	r3, #192	; 0xc0
   119f0:	009b      	lsls	r3, r3, #2
   119f2:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   119f4:	687b      	ldr	r3, [r7, #4]
   119f6:	785b      	ldrb	r3, [r3, #1]
   119f8:	01db      	lsls	r3, r3, #7
   119fa:	0019      	movs	r1, r3
   119fc:	23ff      	movs	r3, #255	; 0xff
   119fe:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11a00:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11a02:	687b      	ldr	r3, [r7, #4]
   11a04:	789b      	ldrb	r3, [r3, #2]
   11a06:	005b      	lsls	r3, r3, #1
   11a08:	0019      	movs	r1, r3
   11a0a:	231e      	movs	r3, #30
   11a0c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11a0e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11a10:	687b      	ldr	r3, [r7, #4]
   11a12:	78db      	ldrb	r3, [r3, #3]
   11a14:	049b      	lsls	r3, r3, #18
   11a16:	0019      	movs	r1, r3
   11a18:	2380      	movs	r3, #128	; 0x80
   11a1a:	02db      	lsls	r3, r3, #11
   11a1c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11a1e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11a20:	687b      	ldr	r3, [r7, #4]
   11a22:	791b      	ldrb	r3, [r3, #4]
   11a24:	041b      	lsls	r3, r3, #16
   11a26:	0019      	movs	r1, r3
   11a28:	23c0      	movs	r3, #192	; 0xc0
   11a2a:	029b      	lsls	r3, r3, #10
   11a2c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11a2e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   11a30:	68fb      	ldr	r3, [r7, #12]
   11a32:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11a34:	68fb      	ldr	r3, [r7, #12]
   11a36:	689b      	ldr	r3, [r3, #8]
   11a38:	035b      	lsls	r3, r3, #13
   11a3a:	0f5b      	lsrs	r3, r3, #29
   11a3c:	b2db      	uxtb	r3, r3
   11a3e:	001a      	movs	r2, r3
   11a40:	2308      	movs	r3, #8
   11a42:	4093      	lsls	r3, r2
   11a44:	b29a      	uxth	r2, r3
   11a46:	4b10      	ldr	r3, [pc, #64]	; (11a88 <nvm_set_config+0xd4>)
   11a48:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   11a4a:	68fb      	ldr	r3, [r7, #12]
   11a4c:	689b      	ldr	r3, [r3, #8]
   11a4e:	b29a      	uxth	r2, r3
   11a50:	4b0d      	ldr	r3, [pc, #52]	; (11a88 <nvm_set_config+0xd4>)
   11a52:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   11a54:	687b      	ldr	r3, [r7, #4]
   11a56:	785a      	ldrb	r2, [r3, #1]
   11a58:	4b0b      	ldr	r3, [pc, #44]	; (11a88 <nvm_set_config+0xd4>)
   11a5a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11a5c:	68fb      	ldr	r3, [r7, #12]
   11a5e:	8b1b      	ldrh	r3, [r3, #24]
   11a60:	b29b      	uxth	r3, r3
   11a62:	001a      	movs	r2, r3
   11a64:	2380      	movs	r3, #128	; 0x80
   11a66:	005b      	lsls	r3, r3, #1
   11a68:	4013      	ands	r3, r2
   11a6a:	d001      	beq.n	11a70 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   11a6c:	2310      	movs	r3, #16
   11a6e:	e000      	b.n	11a72 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   11a70:	2300      	movs	r3, #0
}
   11a72:	0018      	movs	r0, r3
   11a74:	46bd      	mov	sp, r7
   11a76:	b004      	add	sp, #16
   11a78:	bd80      	pop	{r7, pc}
   11a7a:	46c0      	nop			; (mov r8, r8)
   11a7c:	41004000 	.word	0x41004000
   11a80:	00011959 	.word	0x00011959
   11a84:	00011931 	.word	0x00011931
   11a88:	20000414 	.word	0x20000414

00011a8c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   11a8c:	b580      	push	{r7, lr}
   11a8e:	b086      	sub	sp, #24
   11a90:	af00      	add	r7, sp, #0
   11a92:	60b9      	str	r1, [r7, #8]
   11a94:	607a      	str	r2, [r7, #4]
   11a96:	230f      	movs	r3, #15
   11a98:	18fb      	adds	r3, r7, r3
   11a9a:	1c02      	adds	r2, r0, #0
   11a9c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   11a9e:	4b3a      	ldr	r3, [pc, #232]	; (11b88 <nvm_execute_command+0xfc>)
   11aa0:	881b      	ldrh	r3, [r3, #0]
   11aa2:	001a      	movs	r2, r3
   11aa4:	4b38      	ldr	r3, [pc, #224]	; (11b88 <nvm_execute_command+0xfc>)
   11aa6:	885b      	ldrh	r3, [r3, #2]
   11aa8:	435a      	muls	r2, r3
   11aaa:	68bb      	ldr	r3, [r7, #8]
   11aac:	429a      	cmp	r2, r3
   11aae:	d209      	bcs.n	11ac4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   11ab0:	68bb      	ldr	r3, [r7, #8]
   11ab2:	4a36      	ldr	r2, [pc, #216]	; (11b8c <nvm_execute_command+0x100>)
   11ab4:	4293      	cmp	r3, r2
   11ab6:	d903      	bls.n	11ac0 <nvm_execute_command+0x34>
   11ab8:	68bb      	ldr	r3, [r7, #8]
   11aba:	4a35      	ldr	r2, [pc, #212]	; (11b90 <nvm_execute_command+0x104>)
   11abc:	4293      	cmp	r3, r2
   11abe:	d901      	bls.n	11ac4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11ac0:	2318      	movs	r3, #24
   11ac2:	e05c      	b.n	11b7e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ac4:	4b33      	ldr	r3, [pc, #204]	; (11b94 <nvm_execute_command+0x108>)
   11ac6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   11ac8:	697b      	ldr	r3, [r7, #20]
   11aca:	685b      	ldr	r3, [r3, #4]
   11acc:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   11ace:	693b      	ldr	r3, [r7, #16]
   11ad0:	2280      	movs	r2, #128	; 0x80
   11ad2:	02d2      	lsls	r2, r2, #11
   11ad4:	431a      	orrs	r2, r3
   11ad6:	697b      	ldr	r3, [r7, #20]
   11ad8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11ada:	697b      	ldr	r3, [r7, #20]
   11adc:	2220      	movs	r2, #32
   11ade:	32ff      	adds	r2, #255	; 0xff
   11ae0:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11ae2:	4b2d      	ldr	r3, [pc, #180]	; (11b98 <nvm_execute_command+0x10c>)
   11ae4:	4798      	blx	r3
   11ae6:	0003      	movs	r3, r0
   11ae8:	001a      	movs	r2, r3
   11aea:	2301      	movs	r3, #1
   11aec:	4053      	eors	r3, r2
   11aee:	b2db      	uxtb	r3, r3
   11af0:	2b00      	cmp	r3, #0
   11af2:	d004      	beq.n	11afe <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   11af4:	697b      	ldr	r3, [r7, #20]
   11af6:	693a      	ldr	r2, [r7, #16]
   11af8:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   11afa:	2305      	movs	r3, #5
   11afc:	e03f      	b.n	11b7e <nvm_execute_command+0xf2>
	}

	switch (command) {
   11afe:	230f      	movs	r3, #15
   11b00:	18fb      	adds	r3, r7, r3
   11b02:	781b      	ldrb	r3, [r3, #0]
   11b04:	2b45      	cmp	r3, #69	; 0x45
   11b06:	d81d      	bhi.n	11b44 <nvm_execute_command+0xb8>
   11b08:	009a      	lsls	r2, r3, #2
   11b0a:	4b24      	ldr	r3, [pc, #144]	; (11b9c <nvm_execute_command+0x110>)
   11b0c:	18d3      	adds	r3, r2, r3
   11b0e:	681b      	ldr	r3, [r3, #0]
   11b10:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11b12:	697b      	ldr	r3, [r7, #20]
   11b14:	8b1b      	ldrh	r3, [r3, #24]
   11b16:	b29b      	uxth	r3, r3
   11b18:	001a      	movs	r2, r3
   11b1a:	2380      	movs	r3, #128	; 0x80
   11b1c:	005b      	lsls	r3, r3, #1
   11b1e:	4013      	ands	r3, r2
   11b20:	d004      	beq.n	11b2c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11b22:	697b      	ldr	r3, [r7, #20]
   11b24:	693a      	ldr	r2, [r7, #16]
   11b26:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11b28:	2310      	movs	r3, #16
   11b2a:	e028      	b.n	11b7e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11b2c:	68bb      	ldr	r3, [r7, #8]
   11b2e:	089b      	lsrs	r3, r3, #2
   11b30:	005a      	lsls	r2, r3, #1
   11b32:	697b      	ldr	r3, [r7, #20]
   11b34:	61da      	str	r2, [r3, #28]
			break;
   11b36:	e00b      	b.n	11b50 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11b38:	68bb      	ldr	r3, [r7, #8]
   11b3a:	089b      	lsrs	r3, r3, #2
   11b3c:	005a      	lsls	r2, r3, #1
   11b3e:	697b      	ldr	r3, [r7, #20]
   11b40:	61da      	str	r2, [r3, #28]
			break;
   11b42:	e005      	b.n	11b50 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11b44:	697b      	ldr	r3, [r7, #20]
   11b46:	693a      	ldr	r2, [r7, #16]
   11b48:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   11b4a:	2317      	movs	r3, #23
   11b4c:	e017      	b.n	11b7e <nvm_execute_command+0xf2>
			break;
   11b4e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11b50:	230f      	movs	r3, #15
   11b52:	18fb      	adds	r3, r7, r3
   11b54:	781b      	ldrb	r3, [r3, #0]
   11b56:	b29b      	uxth	r3, r3
   11b58:	4a11      	ldr	r2, [pc, #68]	; (11ba0 <nvm_execute_command+0x114>)
   11b5a:	4313      	orrs	r3, r2
   11b5c:	b29a      	uxth	r2, r3
   11b5e:	697b      	ldr	r3, [r7, #20]
   11b60:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   11b62:	46c0      	nop			; (mov r8, r8)
   11b64:	4b0c      	ldr	r3, [pc, #48]	; (11b98 <nvm_execute_command+0x10c>)
   11b66:	4798      	blx	r3
   11b68:	0003      	movs	r3, r0
   11b6a:	001a      	movs	r2, r3
   11b6c:	2301      	movs	r3, #1
   11b6e:	4053      	eors	r3, r2
   11b70:	b2db      	uxtb	r3, r3
   11b72:	2b00      	cmp	r3, #0
   11b74:	d1f6      	bne.n	11b64 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   11b76:	697b      	ldr	r3, [r7, #20]
   11b78:	693a      	ldr	r2, [r7, #16]
   11b7a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   11b7c:	2300      	movs	r3, #0
}
   11b7e:	0018      	movs	r0, r3
   11b80:	46bd      	mov	sp, r7
   11b82:	b006      	add	sp, #24
   11b84:	bd80      	pop	{r7, pc}
   11b86:	46c0      	nop			; (mov r8, r8)
   11b88:	20000414 	.word	0x20000414
   11b8c:	00803fff 	.word	0x00803fff
   11b90:	00806000 	.word	0x00806000
   11b94:	41004000 	.word	0x41004000
   11b98:	00011931 	.word	0x00011931
   11b9c:	00019960 	.word	0x00019960
   11ba0:	ffffa500 	.word	0xffffa500

00011ba4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11ba4:	b580      	push	{r7, lr}
   11ba6:	b088      	sub	sp, #32
   11ba8:	af00      	add	r7, sp, #0
   11baa:	60f8      	str	r0, [r7, #12]
   11bac:	60b9      	str	r1, [r7, #8]
   11bae:	1dbb      	adds	r3, r7, #6
   11bb0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11bb2:	4b4a      	ldr	r3, [pc, #296]	; (11cdc <nvm_write_buffer+0x138>)
   11bb4:	881b      	ldrh	r3, [r3, #0]
   11bb6:	001a      	movs	r2, r3
   11bb8:	4b48      	ldr	r3, [pc, #288]	; (11cdc <nvm_write_buffer+0x138>)
   11bba:	885b      	ldrh	r3, [r3, #2]
   11bbc:	435a      	muls	r2, r3
	if (destination_address >
   11bbe:	68fb      	ldr	r3, [r7, #12]
   11bc0:	429a      	cmp	r2, r3
   11bc2:	d201      	bcs.n	11bc8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11bc4:	2318      	movs	r3, #24
   11bc6:	e084      	b.n	11cd2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11bc8:	4b44      	ldr	r3, [pc, #272]	; (11cdc <nvm_write_buffer+0x138>)
   11bca:	881b      	ldrh	r3, [r3, #0]
   11bcc:	3b01      	subs	r3, #1
   11bce:	001a      	movs	r2, r3
   11bd0:	68fb      	ldr	r3, [r7, #12]
   11bd2:	4013      	ands	r3, r2
   11bd4:	d001      	beq.n	11bda <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11bd6:	2318      	movs	r3, #24
   11bd8:	e07b      	b.n	11cd2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11bda:	4b40      	ldr	r3, [pc, #256]	; (11cdc <nvm_write_buffer+0x138>)
   11bdc:	881b      	ldrh	r3, [r3, #0]
   11bde:	1dba      	adds	r2, r7, #6
   11be0:	8812      	ldrh	r2, [r2, #0]
   11be2:	429a      	cmp	r2, r3
   11be4:	d901      	bls.n	11bea <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11be6:	2317      	movs	r3, #23
   11be8:	e073      	b.n	11cd2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11bea:	4b3d      	ldr	r3, [pc, #244]	; (11ce0 <nvm_write_buffer+0x13c>)
   11bec:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11bee:	4b3d      	ldr	r3, [pc, #244]	; (11ce4 <nvm_write_buffer+0x140>)
   11bf0:	4798      	blx	r3
   11bf2:	0003      	movs	r3, r0
   11bf4:	001a      	movs	r2, r3
   11bf6:	2301      	movs	r3, #1
   11bf8:	4053      	eors	r3, r2
   11bfa:	b2db      	uxtb	r3, r3
   11bfc:	2b00      	cmp	r3, #0
   11bfe:	d001      	beq.n	11c04 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   11c00:	2305      	movs	r3, #5
   11c02:	e066      	b.n	11cd2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11c04:	697b      	ldr	r3, [r7, #20]
   11c06:	4a38      	ldr	r2, [pc, #224]	; (11ce8 <nvm_write_buffer+0x144>)
   11c08:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   11c0a:	46c0      	nop			; (mov r8, r8)
   11c0c:	4b35      	ldr	r3, [pc, #212]	; (11ce4 <nvm_write_buffer+0x140>)
   11c0e:	4798      	blx	r3
   11c10:	0003      	movs	r3, r0
   11c12:	001a      	movs	r2, r3
   11c14:	2301      	movs	r3, #1
   11c16:	4053      	eors	r3, r2
   11c18:	b2db      	uxtb	r3, r3
   11c1a:	2b00      	cmp	r3, #0
   11c1c:	d1f6      	bne.n	11c0c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11c1e:	697b      	ldr	r3, [r7, #20]
   11c20:	2220      	movs	r2, #32
   11c22:	32ff      	adds	r2, #255	; 0xff
   11c24:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11c26:	68fb      	ldr	r3, [r7, #12]
   11c28:	085b      	lsrs	r3, r3, #1
   11c2a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11c2c:	231a      	movs	r3, #26
   11c2e:	18fb      	adds	r3, r7, r3
   11c30:	2200      	movs	r2, #0
   11c32:	801a      	strh	r2, [r3, #0]
   11c34:	e032      	b.n	11c9c <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11c36:	231a      	movs	r3, #26
   11c38:	18fb      	adds	r3, r7, r3
   11c3a:	881b      	ldrh	r3, [r3, #0]
   11c3c:	68ba      	ldr	r2, [r7, #8]
   11c3e:	18d3      	adds	r3, r2, r3
   11c40:	781a      	ldrb	r2, [r3, #0]
   11c42:	2318      	movs	r3, #24
   11c44:	18fb      	adds	r3, r7, r3
   11c46:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11c48:	231a      	movs	r3, #26
   11c4a:	18fb      	adds	r3, r7, r3
   11c4c:	881a      	ldrh	r2, [r3, #0]
   11c4e:	1dbb      	adds	r3, r7, #6
   11c50:	881b      	ldrh	r3, [r3, #0]
   11c52:	3b01      	subs	r3, #1
   11c54:	429a      	cmp	r2, r3
   11c56:	da11      	bge.n	11c7c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   11c58:	231a      	movs	r3, #26
   11c5a:	18fb      	adds	r3, r7, r3
   11c5c:	881b      	ldrh	r3, [r3, #0]
   11c5e:	3301      	adds	r3, #1
   11c60:	68ba      	ldr	r2, [r7, #8]
   11c62:	18d3      	adds	r3, r2, r3
   11c64:	781b      	ldrb	r3, [r3, #0]
   11c66:	021b      	lsls	r3, r3, #8
   11c68:	b21a      	sxth	r2, r3
   11c6a:	2318      	movs	r3, #24
   11c6c:	18fb      	adds	r3, r7, r3
   11c6e:	2100      	movs	r1, #0
   11c70:	5e5b      	ldrsh	r3, [r3, r1]
   11c72:	4313      	orrs	r3, r2
   11c74:	b21a      	sxth	r2, r3
   11c76:	2318      	movs	r3, #24
   11c78:	18fb      	adds	r3, r7, r3
   11c7a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11c7c:	69fb      	ldr	r3, [r7, #28]
   11c7e:	1c5a      	adds	r2, r3, #1
   11c80:	61fa      	str	r2, [r7, #28]
   11c82:	005b      	lsls	r3, r3, #1
   11c84:	001a      	movs	r2, r3
   11c86:	2318      	movs	r3, #24
   11c88:	18fb      	adds	r3, r7, r3
   11c8a:	881b      	ldrh	r3, [r3, #0]
   11c8c:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11c8e:	231a      	movs	r3, #26
   11c90:	18fb      	adds	r3, r7, r3
   11c92:	221a      	movs	r2, #26
   11c94:	18ba      	adds	r2, r7, r2
   11c96:	8812      	ldrh	r2, [r2, #0]
   11c98:	3202      	adds	r2, #2
   11c9a:	801a      	strh	r2, [r3, #0]
   11c9c:	231a      	movs	r3, #26
   11c9e:	18fa      	adds	r2, r7, r3
   11ca0:	1dbb      	adds	r3, r7, #6
   11ca2:	8812      	ldrh	r2, [r2, #0]
   11ca4:	881b      	ldrh	r3, [r3, #0]
   11ca6:	429a      	cmp	r2, r3
   11ca8:	d3c5      	bcc.n	11c36 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   11caa:	4b0c      	ldr	r3, [pc, #48]	; (11cdc <nvm_write_buffer+0x138>)
   11cac:	791b      	ldrb	r3, [r3, #4]
   11cae:	2201      	movs	r2, #1
   11cb0:	4053      	eors	r3, r2
   11cb2:	b2db      	uxtb	r3, r3
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	d00b      	beq.n	11cd0 <nvm_write_buffer+0x12c>
   11cb8:	1dbb      	adds	r3, r7, #6
   11cba:	881b      	ldrh	r3, [r3, #0]
   11cbc:	2b3f      	cmp	r3, #63	; 0x3f
   11cbe:	d807      	bhi.n	11cd0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11cc0:	68fb      	ldr	r3, [r7, #12]
   11cc2:	2200      	movs	r2, #0
   11cc4:	0019      	movs	r1, r3
   11cc6:	2004      	movs	r0, #4
   11cc8:	4b08      	ldr	r3, [pc, #32]	; (11cec <nvm_write_buffer+0x148>)
   11cca:	4798      	blx	r3
   11ccc:	0003      	movs	r3, r0
   11cce:	e000      	b.n	11cd2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11cd0:	2300      	movs	r3, #0
}
   11cd2:	0018      	movs	r0, r3
   11cd4:	46bd      	mov	sp, r7
   11cd6:	b008      	add	sp, #32
   11cd8:	bd80      	pop	{r7, pc}
   11cda:	46c0      	nop			; (mov r8, r8)
   11cdc:	20000414 	.word	0x20000414
   11ce0:	41004000 	.word	0x41004000
   11ce4:	00011931 	.word	0x00011931
   11ce8:	ffffa544 	.word	0xffffa544
   11cec:	00011a8d 	.word	0x00011a8d

00011cf0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11cf0:	b580      	push	{r7, lr}
   11cf2:	b088      	sub	sp, #32
   11cf4:	af00      	add	r7, sp, #0
   11cf6:	60f8      	str	r0, [r7, #12]
   11cf8:	60b9      	str	r1, [r7, #8]
   11cfa:	1dbb      	adds	r3, r7, #6
   11cfc:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11cfe:	4b38      	ldr	r3, [pc, #224]	; (11de0 <nvm_read_buffer+0xf0>)
   11d00:	881b      	ldrh	r3, [r3, #0]
   11d02:	001a      	movs	r2, r3
   11d04:	4b36      	ldr	r3, [pc, #216]	; (11de0 <nvm_read_buffer+0xf0>)
   11d06:	885b      	ldrh	r3, [r3, #2]
   11d08:	435a      	muls	r2, r3
	if (source_address >
   11d0a:	68fb      	ldr	r3, [r7, #12]
   11d0c:	429a      	cmp	r2, r3
   11d0e:	d201      	bcs.n	11d14 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11d10:	2318      	movs	r3, #24
   11d12:	e060      	b.n	11dd6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11d14:	4b32      	ldr	r3, [pc, #200]	; (11de0 <nvm_read_buffer+0xf0>)
   11d16:	881b      	ldrh	r3, [r3, #0]
   11d18:	3b01      	subs	r3, #1
   11d1a:	001a      	movs	r2, r3
   11d1c:	68fb      	ldr	r3, [r7, #12]
   11d1e:	4013      	ands	r3, r2
   11d20:	d001      	beq.n	11d26 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11d22:	2318      	movs	r3, #24
   11d24:	e057      	b.n	11dd6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11d26:	4b2e      	ldr	r3, [pc, #184]	; (11de0 <nvm_read_buffer+0xf0>)
   11d28:	881b      	ldrh	r3, [r3, #0]
   11d2a:	1dba      	adds	r2, r7, #6
   11d2c:	8812      	ldrh	r2, [r2, #0]
   11d2e:	429a      	cmp	r2, r3
   11d30:	d901      	bls.n	11d36 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11d32:	2317      	movs	r3, #23
   11d34:	e04f      	b.n	11dd6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11d36:	4b2b      	ldr	r3, [pc, #172]	; (11de4 <nvm_read_buffer+0xf4>)
   11d38:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11d3a:	4b2b      	ldr	r3, [pc, #172]	; (11de8 <nvm_read_buffer+0xf8>)
   11d3c:	4798      	blx	r3
   11d3e:	0003      	movs	r3, r0
   11d40:	001a      	movs	r2, r3
   11d42:	2301      	movs	r3, #1
   11d44:	4053      	eors	r3, r2
   11d46:	b2db      	uxtb	r3, r3
   11d48:	2b00      	cmp	r3, #0
   11d4a:	d001      	beq.n	11d50 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   11d4c:	2305      	movs	r3, #5
   11d4e:	e042      	b.n	11dd6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11d50:	697b      	ldr	r3, [r7, #20]
   11d52:	2220      	movs	r2, #32
   11d54:	32ff      	adds	r2, #255	; 0xff
   11d56:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11d58:	68fb      	ldr	r3, [r7, #12]
   11d5a:	085b      	lsrs	r3, r3, #1
   11d5c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11d5e:	231a      	movs	r3, #26
   11d60:	18fb      	adds	r3, r7, r3
   11d62:	2200      	movs	r2, #0
   11d64:	801a      	strh	r2, [r3, #0]
   11d66:	e02e      	b.n	11dc6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11d68:	69fb      	ldr	r3, [r7, #28]
   11d6a:	1c5a      	adds	r2, r3, #1
   11d6c:	61fa      	str	r2, [r7, #28]
   11d6e:	005b      	lsls	r3, r3, #1
   11d70:	001a      	movs	r2, r3
   11d72:	2312      	movs	r3, #18
   11d74:	18fb      	adds	r3, r7, r3
   11d76:	8812      	ldrh	r2, [r2, #0]
   11d78:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   11d7a:	231a      	movs	r3, #26
   11d7c:	18fb      	adds	r3, r7, r3
   11d7e:	881b      	ldrh	r3, [r3, #0]
   11d80:	68ba      	ldr	r2, [r7, #8]
   11d82:	18d3      	adds	r3, r2, r3
   11d84:	2212      	movs	r2, #18
   11d86:	18ba      	adds	r2, r7, r2
   11d88:	8812      	ldrh	r2, [r2, #0]
   11d8a:	b2d2      	uxtb	r2, r2
   11d8c:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11d8e:	231a      	movs	r3, #26
   11d90:	18fb      	adds	r3, r7, r3
   11d92:	881a      	ldrh	r2, [r3, #0]
   11d94:	1dbb      	adds	r3, r7, #6
   11d96:	881b      	ldrh	r3, [r3, #0]
   11d98:	3b01      	subs	r3, #1
   11d9a:	429a      	cmp	r2, r3
   11d9c:	da0c      	bge.n	11db8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   11d9e:	231a      	movs	r3, #26
   11da0:	18fb      	adds	r3, r7, r3
   11da2:	881b      	ldrh	r3, [r3, #0]
   11da4:	3301      	adds	r3, #1
   11da6:	68ba      	ldr	r2, [r7, #8]
   11da8:	18d3      	adds	r3, r2, r3
   11daa:	2212      	movs	r2, #18
   11dac:	18ba      	adds	r2, r7, r2
   11dae:	8812      	ldrh	r2, [r2, #0]
   11db0:	0a12      	lsrs	r2, r2, #8
   11db2:	b292      	uxth	r2, r2
   11db4:	b2d2      	uxtb	r2, r2
   11db6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11db8:	231a      	movs	r3, #26
   11dba:	18fb      	adds	r3, r7, r3
   11dbc:	221a      	movs	r2, #26
   11dbe:	18ba      	adds	r2, r7, r2
   11dc0:	8812      	ldrh	r2, [r2, #0]
   11dc2:	3202      	adds	r2, #2
   11dc4:	801a      	strh	r2, [r3, #0]
   11dc6:	231a      	movs	r3, #26
   11dc8:	18fa      	adds	r2, r7, r3
   11dca:	1dbb      	adds	r3, r7, #6
   11dcc:	8812      	ldrh	r2, [r2, #0]
   11dce:	881b      	ldrh	r3, [r3, #0]
   11dd0:	429a      	cmp	r2, r3
   11dd2:	d3c9      	bcc.n	11d68 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   11dd4:	2300      	movs	r3, #0
}
   11dd6:	0018      	movs	r0, r3
   11dd8:	46bd      	mov	sp, r7
   11dda:	b008      	add	sp, #32
   11ddc:	bd80      	pop	{r7, pc}
   11dde:	46c0      	nop			; (mov r8, r8)
   11de0:	20000414 	.word	0x20000414
   11de4:	41004000 	.word	0x41004000
   11de8:	00011931 	.word	0x00011931

00011dec <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   11dec:	b580      	push	{r7, lr}
   11dee:	b084      	sub	sp, #16
   11df0:	af00      	add	r7, sp, #0
   11df2:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11df4:	4b23      	ldr	r3, [pc, #140]	; (11e84 <nvm_erase_row+0x98>)
   11df6:	881b      	ldrh	r3, [r3, #0]
   11df8:	001a      	movs	r2, r3
   11dfa:	4b22      	ldr	r3, [pc, #136]	; (11e84 <nvm_erase_row+0x98>)
   11dfc:	885b      	ldrh	r3, [r3, #2]
   11dfe:	435a      	muls	r2, r3
	if (row_address >
   11e00:	687b      	ldr	r3, [r7, #4]
   11e02:	429a      	cmp	r2, r3
   11e04:	d201      	bcs.n	11e0a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11e06:	2318      	movs	r3, #24
   11e08:	e037      	b.n	11e7a <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   11e0a:	4b1e      	ldr	r3, [pc, #120]	; (11e84 <nvm_erase_row+0x98>)
   11e0c:	881b      	ldrh	r3, [r3, #0]
   11e0e:	009b      	lsls	r3, r3, #2
   11e10:	3b01      	subs	r3, #1
   11e12:	001a      	movs	r2, r3
   11e14:	687b      	ldr	r3, [r7, #4]
   11e16:	4013      	ands	r3, r2
   11e18:	d001      	beq.n	11e1e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   11e1a:	2318      	movs	r3, #24
   11e1c:	e02d      	b.n	11e7a <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11e1e:	4b1a      	ldr	r3, [pc, #104]	; (11e88 <nvm_erase_row+0x9c>)
   11e20:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11e22:	4b1a      	ldr	r3, [pc, #104]	; (11e8c <nvm_erase_row+0xa0>)
   11e24:	4798      	blx	r3
   11e26:	0003      	movs	r3, r0
   11e28:	001a      	movs	r2, r3
   11e2a:	2301      	movs	r3, #1
   11e2c:	4053      	eors	r3, r2
   11e2e:	b2db      	uxtb	r3, r3
   11e30:	2b00      	cmp	r3, #0
   11e32:	d001      	beq.n	11e38 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   11e34:	2305      	movs	r3, #5
   11e36:	e020      	b.n	11e7a <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11e38:	68fb      	ldr	r3, [r7, #12]
   11e3a:	2220      	movs	r2, #32
   11e3c:	32ff      	adds	r2, #255	; 0xff
   11e3e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   11e40:	687b      	ldr	r3, [r7, #4]
   11e42:	089b      	lsrs	r3, r3, #2
   11e44:	005a      	lsls	r2, r3, #1
   11e46:	68fb      	ldr	r3, [r7, #12]
   11e48:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   11e4a:	68fb      	ldr	r3, [r7, #12]
   11e4c:	4a10      	ldr	r2, [pc, #64]	; (11e90 <nvm_erase_row+0xa4>)
   11e4e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   11e50:	46c0      	nop			; (mov r8, r8)
   11e52:	4b0e      	ldr	r3, [pc, #56]	; (11e8c <nvm_erase_row+0xa0>)
   11e54:	4798      	blx	r3
   11e56:	0003      	movs	r3, r0
   11e58:	001a      	movs	r2, r3
   11e5a:	2301      	movs	r3, #1
   11e5c:	4053      	eors	r3, r2
   11e5e:	b2db      	uxtb	r3, r3
   11e60:	2b00      	cmp	r3, #0
   11e62:	d1f6      	bne.n	11e52 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   11e64:	68fb      	ldr	r3, [r7, #12]
   11e66:	8b1b      	ldrh	r3, [r3, #24]
   11e68:	b29b      	uxth	r3, r3
   11e6a:	b2db      	uxtb	r3, r3
   11e6c:	001a      	movs	r2, r3
   11e6e:	231c      	movs	r3, #28
   11e70:	4013      	ands	r3, r2
   11e72:	d001      	beq.n	11e78 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   11e74:	2304      	movs	r3, #4
   11e76:	e000      	b.n	11e7a <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   11e78:	2300      	movs	r3, #0
}
   11e7a:	0018      	movs	r0, r3
   11e7c:	46bd      	mov	sp, r7
   11e7e:	b004      	add	sp, #16
   11e80:	bd80      	pop	{r7, pc}
   11e82:	46c0      	nop			; (mov r8, r8)
   11e84:	20000414 	.word	0x20000414
   11e88:	41004000 	.word	0x41004000
   11e8c:	00011931 	.word	0x00011931
   11e90:	ffffa502 	.word	0xffffa502

00011e94 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b086      	sub	sp, #24
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11e9c:	4b2a      	ldr	r3, [pc, #168]	; (11f48 <nvm_get_parameters+0xb4>)
   11e9e:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11ea0:	697b      	ldr	r3, [r7, #20]
   11ea2:	2220      	movs	r2, #32
   11ea4:	32ff      	adds	r2, #255	; 0xff
   11ea6:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   11ea8:	697b      	ldr	r3, [r7, #20]
   11eaa:	689b      	ldr	r3, [r3, #8]
   11eac:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   11eae:	693b      	ldr	r3, [r7, #16]
   11eb0:	0c1b      	lsrs	r3, r3, #16
   11eb2:	2207      	movs	r2, #7
   11eb4:	4013      	ands	r3, r2
   11eb6:	2208      	movs	r2, #8
   11eb8:	409a      	lsls	r2, r3
   11eba:	0013      	movs	r3, r2
	parameters->page_size =
   11ebc:	b2da      	uxtb	r2, r3
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   11ec2:	693b      	ldr	r3, [r7, #16]
   11ec4:	b29a      	uxth	r2, r3
   11ec6:	687b      	ldr	r3, [r7, #4]
   11ec8:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   11eca:	4b20      	ldr	r3, [pc, #128]	; (11f4c <nvm_get_parameters+0xb8>)
   11ecc:	881b      	ldrh	r3, [r3, #0]
   11ece:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   11ed0:	091b      	lsrs	r3, r3, #4
   11ed2:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   11ed4:	230e      	movs	r3, #14
   11ed6:	18fb      	adds	r3, r7, r3
   11ed8:	2107      	movs	r1, #7
   11eda:	400a      	ands	r2, r1
   11edc:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   11ede:	230e      	movs	r3, #14
   11ee0:	18fb      	adds	r3, r7, r3
   11ee2:	881b      	ldrh	r3, [r3, #0]
   11ee4:	2b07      	cmp	r3, #7
   11ee6:	d103      	bne.n	11ef0 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2200      	movs	r2, #0
   11eec:	605a      	str	r2, [r3, #4]
   11eee:	e00a      	b.n	11f06 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   11ef0:	230e      	movs	r3, #14
   11ef2:	18fb      	adds	r3, r7, r3
   11ef4:	881b      	ldrh	r3, [r3, #0]
   11ef6:	2206      	movs	r2, #6
   11ef8:	1ad3      	subs	r3, r2, r3
   11efa:	2204      	movs	r2, #4
   11efc:	409a      	lsls	r2, r3
   11efe:	0013      	movs	r3, r2
   11f00:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   11f02:	687b      	ldr	r3, [r7, #4]
   11f04:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   11f06:	4b11      	ldr	r3, [pc, #68]	; (11f4c <nvm_get_parameters+0xb8>)
   11f08:	881b      	ldrh	r3, [r3, #0]
   11f0a:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   11f0c:	230c      	movs	r3, #12
   11f0e:	18fb      	adds	r3, r7, r3
   11f10:	2107      	movs	r1, #7
   11f12:	400a      	ands	r2, r1
   11f14:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   11f16:	230c      	movs	r3, #12
   11f18:	18fb      	adds	r3, r7, r3
   11f1a:	881b      	ldrh	r3, [r3, #0]
   11f1c:	2b07      	cmp	r3, #7
   11f1e:	d103      	bne.n	11f28 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	2200      	movs	r2, #0
   11f24:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   11f26:	e00a      	b.n	11f3e <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   11f28:	230c      	movs	r3, #12
   11f2a:	18fb      	adds	r3, r7, r3
   11f2c:	881b      	ldrh	r3, [r3, #0]
   11f2e:	2207      	movs	r2, #7
   11f30:	1ad3      	subs	r3, r2, r3
   11f32:	2204      	movs	r2, #4
   11f34:	409a      	lsls	r2, r3
   11f36:	0013      	movs	r3, r2
   11f38:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   11f3a:	687b      	ldr	r3, [r7, #4]
   11f3c:	609a      	str	r2, [r3, #8]
}
   11f3e:	46c0      	nop			; (mov r8, r8)
   11f40:	46bd      	mov	sp, r7
   11f42:	b006      	add	sp, #24
   11f44:	bd80      	pop	{r7, pc}
   11f46:	46c0      	nop			; (mov r8, r8)
   11f48:	41004000 	.word	0x41004000
   11f4c:	00804000 	.word	0x00804000

00011f50 <system_pinmux_get_config_defaults>:
{
   11f50:	b580      	push	{r7, lr}
   11f52:	b082      	sub	sp, #8
   11f54:	af00      	add	r7, sp, #0
   11f56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11f58:	687b      	ldr	r3, [r7, #4]
   11f5a:	2280      	movs	r2, #128	; 0x80
   11f5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	2200      	movs	r2, #0
   11f62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	2201      	movs	r2, #1
   11f68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2200      	movs	r2, #0
   11f6e:	70da      	strb	r2, [r3, #3]
}
   11f70:	46c0      	nop			; (mov r8, r8)
   11f72:	46bd      	mov	sp, r7
   11f74:	b002      	add	sp, #8
   11f76:	bd80      	pop	{r7, pc}

00011f78 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11f78:	b580      	push	{r7, lr}
   11f7a:	b084      	sub	sp, #16
   11f7c:	af00      	add	r7, sp, #0
   11f7e:	0002      	movs	r2, r0
   11f80:	6039      	str	r1, [r7, #0]
   11f82:	1dfb      	adds	r3, r7, #7
   11f84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11f86:	230c      	movs	r3, #12
   11f88:	18fb      	adds	r3, r7, r3
   11f8a:	0018      	movs	r0, r3
   11f8c:	4b10      	ldr	r3, [pc, #64]	; (11fd0 <port_pin_set_config+0x58>)
   11f8e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   11f90:	230c      	movs	r3, #12
   11f92:	18fb      	adds	r3, r7, r3
   11f94:	2280      	movs	r2, #128	; 0x80
   11f96:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   11f98:	683b      	ldr	r3, [r7, #0]
   11f9a:	781a      	ldrb	r2, [r3, #0]
   11f9c:	230c      	movs	r3, #12
   11f9e:	18fb      	adds	r3, r7, r3
   11fa0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   11fa2:	683b      	ldr	r3, [r7, #0]
   11fa4:	785a      	ldrb	r2, [r3, #1]
   11fa6:	230c      	movs	r3, #12
   11fa8:	18fb      	adds	r3, r7, r3
   11faa:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   11fac:	683b      	ldr	r3, [r7, #0]
   11fae:	789a      	ldrb	r2, [r3, #2]
   11fb0:	230c      	movs	r3, #12
   11fb2:	18fb      	adds	r3, r7, r3
   11fb4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   11fb6:	230c      	movs	r3, #12
   11fb8:	18fa      	adds	r2, r7, r3
   11fba:	1dfb      	adds	r3, r7, #7
   11fbc:	781b      	ldrb	r3, [r3, #0]
   11fbe:	0011      	movs	r1, r2
   11fc0:	0018      	movs	r0, r3
   11fc2:	4b04      	ldr	r3, [pc, #16]	; (11fd4 <port_pin_set_config+0x5c>)
   11fc4:	4798      	blx	r3
}
   11fc6:	46c0      	nop			; (mov r8, r8)
   11fc8:	46bd      	mov	sp, r7
   11fca:	b004      	add	sp, #16
   11fcc:	bd80      	pop	{r7, pc}
   11fce:	46c0      	nop			; (mov r8, r8)
   11fd0:	00011f51 	.word	0x00011f51
   11fd4:	00013ca9 	.word	0x00013ca9

00011fd8 <nvm_get_config_defaults>:
{
   11fd8:	b580      	push	{r7, lr}
   11fda:	b082      	sub	sp, #8
   11fdc:	af00      	add	r7, sp, #0
   11fde:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   11fe0:	687b      	ldr	r3, [r7, #4]
   11fe2:	2200      	movs	r2, #0
   11fe4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   11fe6:	687b      	ldr	r3, [r7, #4]
   11fe8:	2201      	movs	r2, #1
   11fea:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   11fec:	4b08      	ldr	r3, [pc, #32]	; (12010 <nvm_get_config_defaults+0x38>)
   11fee:	685b      	ldr	r3, [r3, #4]
   11ff0:	06db      	lsls	r3, r3, #27
   11ff2:	0f1b      	lsrs	r3, r3, #28
   11ff4:	b2db      	uxtb	r3, r3
   11ff6:	001a      	movs	r2, r3
   11ff8:	687b      	ldr	r3, [r7, #4]
   11ffa:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   11ffc:	687b      	ldr	r3, [r7, #4]
   11ffe:	2200      	movs	r2, #0
   12000:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   12002:	687b      	ldr	r3, [r7, #4]
   12004:	2200      	movs	r2, #0
   12006:	711a      	strb	r2, [r3, #4]
}
   12008:	46c0      	nop			; (mov r8, r8)
   1200a:	46bd      	mov	sp, r7
   1200c:	b002      	add	sp, #8
   1200e:	bd80      	pop	{r7, pc}
   12010:	41004000 	.word	0x41004000

00012014 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   12014:	b590      	push	{r4, r7, lr}
   12016:	b085      	sub	sp, #20
   12018:	af00      	add	r7, sp, #0
   1201a:	0002      	movs	r2, r0
   1201c:	1dfb      	adds	r3, r7, #7
   1201e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   12020:	230f      	movs	r3, #15
   12022:	18fb      	adds	r3, r7, r3
   12024:	2200      	movs	r2, #0
   12026:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   12028:	4b0a      	ldr	r3, [pc, #40]	; (12054 <_eeprom_emulator_nvm_erase_row+0x40>)
   1202a:	685b      	ldr	r3, [r3, #4]
   1202c:	1dfa      	adds	r2, r7, #7
   1202e:	7812      	ldrb	r2, [r2, #0]
   12030:	0212      	lsls	r2, r2, #8
   12032:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   12034:	220f      	movs	r2, #15
   12036:	18bc      	adds	r4, r7, r2
   12038:	0018      	movs	r0, r3
   1203a:	4b07      	ldr	r3, [pc, #28]	; (12058 <_eeprom_emulator_nvm_erase_row+0x44>)
   1203c:	4798      	blx	r3
   1203e:	0003      	movs	r3, r0
   12040:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   12042:	230f      	movs	r3, #15
   12044:	18fb      	adds	r3, r7, r3
   12046:	781b      	ldrb	r3, [r3, #0]
   12048:	2b05      	cmp	r3, #5
   1204a:	d0ed      	beq.n	12028 <_eeprom_emulator_nvm_erase_row+0x14>
}
   1204c:	46c0      	nop			; (mov r8, r8)
   1204e:	46bd      	mov	sp, r7
   12050:	b005      	add	sp, #20
   12052:	bd90      	pop	{r4, r7, pc}
   12054:	2000041c 	.word	0x2000041c
   12058:	00011ded 	.word	0x00011ded

0001205c <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   1205c:	b590      	push	{r4, r7, lr}
   1205e:	b085      	sub	sp, #20
   12060:	af00      	add	r7, sp, #0
   12062:	0002      	movs	r2, r0
   12064:	6039      	str	r1, [r7, #0]
   12066:	1dbb      	adds	r3, r7, #6
   12068:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   1206a:	230f      	movs	r3, #15
   1206c:	18fb      	adds	r3, r7, r3
   1206e:	2200      	movs	r2, #0
   12070:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   12072:	4b0c      	ldr	r3, [pc, #48]	; (120a4 <_eeprom_emulator_nvm_fill_cache+0x48>)
   12074:	685a      	ldr	r2, [r3, #4]
   12076:	1dbb      	adds	r3, r7, #6
   12078:	881b      	ldrh	r3, [r3, #0]
   1207a:	019b      	lsls	r3, r3, #6
   1207c:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   1207e:	0018      	movs	r0, r3
   12080:	230f      	movs	r3, #15
   12082:	18fc      	adds	r4, r7, r3
   12084:	683b      	ldr	r3, [r7, #0]
   12086:	2240      	movs	r2, #64	; 0x40
   12088:	0019      	movs	r1, r3
   1208a:	4b07      	ldr	r3, [pc, #28]	; (120a8 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   1208c:	4798      	blx	r3
   1208e:	0003      	movs	r3, r0
   12090:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   12092:	230f      	movs	r3, #15
   12094:	18fb      	adds	r3, r7, r3
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	2b05      	cmp	r3, #5
   1209a:	d0ea      	beq.n	12072 <_eeprom_emulator_nvm_fill_cache+0x16>
}
   1209c:	46c0      	nop			; (mov r8, r8)
   1209e:	46bd      	mov	sp, r7
   120a0:	b005      	add	sp, #20
   120a2:	bd90      	pop	{r4, r7, pc}
   120a4:	2000041c 	.word	0x2000041c
   120a8:	00011ba5 	.word	0x00011ba5

000120ac <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   120ac:	b590      	push	{r4, r7, lr}
   120ae:	b085      	sub	sp, #20
   120b0:	af00      	add	r7, sp, #0
   120b2:	0002      	movs	r2, r0
   120b4:	1dbb      	adds	r3, r7, #6
   120b6:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   120b8:	230f      	movs	r3, #15
   120ba:	18fb      	adds	r3, r7, r3
   120bc:	2200      	movs	r2, #0
   120be:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   120c0:	4b0b      	ldr	r3, [pc, #44]	; (120f0 <_eeprom_emulator_nvm_commit_cache+0x44>)
   120c2:	685a      	ldr	r2, [r3, #4]
   120c4:	1dbb      	adds	r3, r7, #6
   120c6:	881b      	ldrh	r3, [r3, #0]
   120c8:	019b      	lsls	r3, r3, #6
   120ca:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   120cc:	220f      	movs	r2, #15
   120ce:	18bc      	adds	r4, r7, r2
   120d0:	2200      	movs	r2, #0
   120d2:	0019      	movs	r1, r3
   120d4:	2004      	movs	r0, #4
   120d6:	4b07      	ldr	r3, [pc, #28]	; (120f4 <_eeprom_emulator_nvm_commit_cache+0x48>)
   120d8:	4798      	blx	r3
   120da:	0003      	movs	r3, r0
   120dc:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   120de:	230f      	movs	r3, #15
   120e0:	18fb      	adds	r3, r7, r3
   120e2:	781b      	ldrb	r3, [r3, #0]
   120e4:	2b05      	cmp	r3, #5
   120e6:	d0eb      	beq.n	120c0 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   120e8:	46c0      	nop			; (mov r8, r8)
   120ea:	46bd      	mov	sp, r7
   120ec:	b005      	add	sp, #20
   120ee:	bd90      	pop	{r4, r7, pc}
   120f0:	2000041c 	.word	0x2000041c
   120f4:	00011a8d 	.word	0x00011a8d

000120f8 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   120f8:	b590      	push	{r4, r7, lr}
   120fa:	b085      	sub	sp, #20
   120fc:	af00      	add	r7, sp, #0
   120fe:	0002      	movs	r2, r0
   12100:	6039      	str	r1, [r7, #0]
   12102:	1dbb      	adds	r3, r7, #6
   12104:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   12106:	230f      	movs	r3, #15
   12108:	18fb      	adds	r3, r7, r3
   1210a:	2200      	movs	r2, #0
   1210c:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   1210e:	4b0c      	ldr	r3, [pc, #48]	; (12140 <_eeprom_emulator_nvm_read_page+0x48>)
   12110:	685a      	ldr	r2, [r3, #4]
   12112:	1dbb      	adds	r3, r7, #6
   12114:	881b      	ldrh	r3, [r3, #0]
   12116:	019b      	lsls	r3, r3, #6
   12118:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   1211a:	0018      	movs	r0, r3
   1211c:	230f      	movs	r3, #15
   1211e:	18fc      	adds	r4, r7, r3
   12120:	683b      	ldr	r3, [r7, #0]
   12122:	2240      	movs	r2, #64	; 0x40
   12124:	0019      	movs	r1, r3
   12126:	4b07      	ldr	r3, [pc, #28]	; (12144 <_eeprom_emulator_nvm_read_page+0x4c>)
   12128:	4798      	blx	r3
   1212a:	0003      	movs	r3, r0
   1212c:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   1212e:	230f      	movs	r3, #15
   12130:	18fb      	adds	r3, r7, r3
   12132:	781b      	ldrb	r3, [r3, #0]
   12134:	2b05      	cmp	r3, #5
   12136:	d0ea      	beq.n	1210e <_eeprom_emulator_nvm_read_page+0x16>
}
   12138:	46c0      	nop			; (mov r8, r8)
   1213a:	46bd      	mov	sp, r7
   1213c:	b005      	add	sp, #20
   1213e:	bd90      	pop	{r4, r7, pc}
   12140:	2000041c 	.word	0x2000041c
   12144:	00011cf1 	.word	0x00011cf1

00012148 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   12148:	b580      	push	{r7, lr}
   1214a:	b092      	sub	sp, #72	; 0x48
   1214c:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   1214e:	2346      	movs	r3, #70	; 0x46
   12150:	18fb      	adds	r3, r7, r3
   12152:	2200      	movs	r2, #0
   12154:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   12156:	4b32      	ldr	r3, [pc, #200]	; (12220 <_eeprom_emulator_format_memory+0xd8>)
   12158:	2287      	movs	r2, #135	; 0x87
   1215a:	2100      	movs	r1, #0
   1215c:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   1215e:	4b30      	ldr	r3, [pc, #192]	; (12220 <_eeprom_emulator_format_memory+0xd8>)
   12160:	2287      	movs	r2, #135	; 0x87
   12162:	5c9b      	ldrb	r3, [r3, r2]
   12164:	0018      	movs	r0, r3
   12166:	4b2f      	ldr	r3, [pc, #188]	; (12224 <_eeprom_emulator_format_memory+0xdc>)
   12168:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   1216a:	2344      	movs	r3, #68	; 0x44
   1216c:	18fb      	adds	r3, r7, r3
   1216e:	2204      	movs	r2, #4
   12170:	801a      	strh	r2, [r3, #0]
   12172:	e04a      	b.n	1220a <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   12174:	2344      	movs	r3, #68	; 0x44
   12176:	18fb      	adds	r3, r7, r3
   12178:	881a      	ldrh	r2, [r3, #0]
   1217a:	4b29      	ldr	r3, [pc, #164]	; (12220 <_eeprom_emulator_format_memory+0xd8>)
   1217c:	891b      	ldrh	r3, [r3, #8]
   1217e:	3b01      	subs	r3, #1
   12180:	429a      	cmp	r2, r3
   12182:	d03a      	beq.n	121fa <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   12184:	2344      	movs	r3, #68	; 0x44
   12186:	18fb      	adds	r3, r7, r3
   12188:	881b      	ldrh	r3, [r3, #0]
   1218a:	2203      	movs	r2, #3
   1218c:	4013      	ands	r3, r2
   1218e:	b29b      	uxth	r3, r3
   12190:	2b00      	cmp	r3, #0
   12192:	d108      	bne.n	121a6 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   12194:	2344      	movs	r3, #68	; 0x44
   12196:	18fb      	adds	r3, r7, r3
   12198:	881b      	ldrh	r3, [r3, #0]
   1219a:	089b      	lsrs	r3, r3, #2
   1219c:	b29b      	uxth	r3, r3
   1219e:	b2db      	uxtb	r3, r3
   121a0:	0018      	movs	r0, r3
   121a2:	4b20      	ldr	r3, [pc, #128]	; (12224 <_eeprom_emulator_format_memory+0xdc>)
   121a4:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   121a6:	2344      	movs	r3, #68	; 0x44
   121a8:	18fb      	adds	r3, r7, r3
   121aa:	881b      	ldrh	r3, [r3, #0]
   121ac:	2203      	movs	r2, #3
   121ae:	4013      	ands	r3, r2
   121b0:	b29b      	uxth	r3, r3
   121b2:	2b01      	cmp	r3, #1
   121b4:	d822      	bhi.n	121fc <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   121b6:	1d3b      	adds	r3, r7, #4
   121b8:	2240      	movs	r2, #64	; 0x40
   121ba:	21ff      	movs	r1, #255	; 0xff
   121bc:	0018      	movs	r0, r3
   121be:	4b1a      	ldr	r3, [pc, #104]	; (12228 <_eeprom_emulator_format_memory+0xe0>)
   121c0:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   121c2:	2346      	movs	r3, #70	; 0x46
   121c4:	18fb      	adds	r3, r7, r3
   121c6:	881b      	ldrh	r3, [r3, #0]
   121c8:	b2da      	uxtb	r2, r3
   121ca:	1d3b      	adds	r3, r7, #4
   121cc:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   121ce:	1d3a      	adds	r2, r7, #4
   121d0:	2344      	movs	r3, #68	; 0x44
   121d2:	18fb      	adds	r3, r7, r3
   121d4:	881b      	ldrh	r3, [r3, #0]
   121d6:	0011      	movs	r1, r2
   121d8:	0018      	movs	r0, r3
   121da:	4b14      	ldr	r3, [pc, #80]	; (1222c <_eeprom_emulator_format_memory+0xe4>)
   121dc:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   121de:	2344      	movs	r3, #68	; 0x44
   121e0:	18fb      	adds	r3, r7, r3
   121e2:	881b      	ldrh	r3, [r3, #0]
   121e4:	0018      	movs	r0, r3
   121e6:	4b12      	ldr	r3, [pc, #72]	; (12230 <_eeprom_emulator_format_memory+0xe8>)
   121e8:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   121ea:	2346      	movs	r3, #70	; 0x46
   121ec:	18fb      	adds	r3, r7, r3
   121ee:	881a      	ldrh	r2, [r3, #0]
   121f0:	2346      	movs	r3, #70	; 0x46
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	3201      	adds	r2, #1
   121f6:	801a      	strh	r2, [r3, #0]
   121f8:	e000      	b.n	121fc <_eeprom_emulator_format_memory+0xb4>
			continue;
   121fa:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   121fc:	2344      	movs	r3, #68	; 0x44
   121fe:	18fb      	adds	r3, r7, r3
   12200:	881a      	ldrh	r2, [r3, #0]
   12202:	2344      	movs	r3, #68	; 0x44
   12204:	18fb      	adds	r3, r7, r3
   12206:	3201      	adds	r2, #1
   12208:	801a      	strh	r2, [r3, #0]
   1220a:	4b05      	ldr	r3, [pc, #20]	; (12220 <_eeprom_emulator_format_memory+0xd8>)
   1220c:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   1220e:	2244      	movs	r2, #68	; 0x44
   12210:	18ba      	adds	r2, r7, r2
   12212:	8812      	ldrh	r2, [r2, #0]
   12214:	429a      	cmp	r2, r3
   12216:	d3ad      	bcc.n	12174 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b012      	add	sp, #72	; 0x48
   1221e:	bd80      	pop	{r7, pc}
   12220:	2000041c 	.word	0x2000041c
   12224:	00012015 	.word	0x00012015
   12228:	00017d67 	.word	0x00017d67
   1222c:	0001205d 	.word	0x0001205d
   12230:	000120ad 	.word	0x000120ad

00012234 <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   12234:	b580      	push	{r7, lr}
   12236:	b082      	sub	sp, #8
   12238:	af00      	add	r7, sp, #0
   1223a:	0002      	movs	r2, r0
   1223c:	1dbb      	adds	r3, r7, #6
   1223e:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   12240:	4b14      	ldr	r3, [pc, #80]	; (12294 <_eeprom_emulator_is_full_row+0x60>)
   12242:	685a      	ldr	r2, [r3, #4]
   12244:	1dbb      	adds	r3, r7, #6
   12246:	881b      	ldrh	r3, [r3, #0]
   12248:	019b      	lsls	r3, r3, #6
   1224a:	18d3      	adds	r3, r2, r3
   1224c:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   1224e:	4b11      	ldr	r3, [pc, #68]	; (12294 <_eeprom_emulator_is_full_row+0x60>)
   12250:	6859      	ldr	r1, [r3, #4]
   12252:	1dbb      	adds	r3, r7, #6
   12254:	881b      	ldrh	r3, [r3, #0]
   12256:	3302      	adds	r3, #2
   12258:	019b      	lsls	r3, r3, #6
   1225a:	18cb      	adds	r3, r1, r3
   1225c:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   1225e:	429a      	cmp	r2, r3
   12260:	d011      	beq.n	12286 <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   12262:	4b0c      	ldr	r3, [pc, #48]	; (12294 <_eeprom_emulator_is_full_row+0x60>)
   12264:	685a      	ldr	r2, [r3, #4]
   12266:	1dbb      	adds	r3, r7, #6
   12268:	881b      	ldrh	r3, [r3, #0]
   1226a:	3301      	adds	r3, #1
   1226c:	019b      	lsls	r3, r3, #6
   1226e:	18d3      	adds	r3, r2, r3
   12270:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   12272:	4b08      	ldr	r3, [pc, #32]	; (12294 <_eeprom_emulator_is_full_row+0x60>)
   12274:	6859      	ldr	r1, [r3, #4]
   12276:	1dbb      	adds	r3, r7, #6
   12278:	881b      	ldrh	r3, [r3, #0]
   1227a:	3302      	adds	r3, #2
   1227c:	019b      	lsls	r3, r3, #6
   1227e:	18cb      	adds	r3, r1, r3
   12280:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   12282:	429a      	cmp	r2, r3
   12284:	d101      	bne.n	1228a <_eeprom_emulator_is_full_row+0x56>
		return true;
   12286:	2301      	movs	r3, #1
   12288:	e000      	b.n	1228c <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   1228a:	2300      	movs	r3, #0
	}
}
   1228c:	0018      	movs	r0, r3
   1228e:	46bd      	mov	sp, r7
   12290:	b002      	add	sp, #8
   12292:	bd80      	pop	{r7, pc}
   12294:	2000041c 	.word	0x2000041c

00012298 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   12298:	b580      	push	{r7, lr}
   1229a:	b082      	sub	sp, #8
   1229c:	af00      	add	r7, sp, #0
   1229e:	0002      	movs	r2, r0
   122a0:	1dbb      	adds	r3, r7, #6
   122a2:	801a      	strh	r2, [r3, #0]
   122a4:	1d3b      	adds	r3, r7, #4
   122a6:	1c0a      	adds	r2, r1, #0
   122a8:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   122aa:	1dbb      	adds	r3, r7, #6
   122ac:	881b      	ldrh	r3, [r3, #0]
   122ae:	0018      	movs	r0, r3
   122b0:	4b0c      	ldr	r3, [pc, #48]	; (122e4 <_eeprom_emulator_erase_invalid_page+0x4c>)
   122b2:	4798      	blx	r3
   122b4:	1e03      	subs	r3, r0, #0
   122b6:	d008      	beq.n	122ca <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   122b8:	1dbb      	adds	r3, r7, #6
   122ba:	881b      	ldrh	r3, [r3, #0]
   122bc:	089b      	lsrs	r3, r3, #2
   122be:	b29b      	uxth	r3, r3
   122c0:	b2db      	uxtb	r3, r3
   122c2:	0018      	movs	r0, r3
   122c4:	4b08      	ldr	r3, [pc, #32]	; (122e8 <_eeprom_emulator_erase_invalid_page+0x50>)
   122c6:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   122c8:	e007      	b.n	122da <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   122ca:	1d3b      	adds	r3, r7, #4
   122cc:	881b      	ldrh	r3, [r3, #0]
   122ce:	089b      	lsrs	r3, r3, #2
   122d0:	b29b      	uxth	r3, r3
   122d2:	b2db      	uxtb	r3, r3
   122d4:	0018      	movs	r0, r3
   122d6:	4b04      	ldr	r3, [pc, #16]	; (122e8 <_eeprom_emulator_erase_invalid_page+0x50>)
   122d8:	4798      	blx	r3
}
   122da:	46c0      	nop			; (mov r8, r8)
   122dc:	46bd      	mov	sp, r7
   122de:	b002      	add	sp, #8
   122e0:	bd80      	pop	{r7, pc}
   122e2:	46c0      	nop			; (mov r8, r8)
   122e4:	00012235 	.word	0x00012235
   122e8:	00012015 	.word	0x00012015

000122ec <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   122ec:	b580      	push	{r7, lr}
   122ee:	b082      	sub	sp, #8
   122f0:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   122f2:	1dbb      	adds	r3, r7, #6
   122f4:	2200      	movs	r2, #0
   122f6:	801a      	strh	r2, [r3, #0]
   122f8:	1d3b      	adds	r3, r7, #4
   122fa:	2200      	movs	r2, #0
   122fc:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	2200      	movs	r2, #0
   12302:	801a      	strh	r2, [r3, #0]
   12304:	e04a      	b.n	1239c <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   12306:	4b2a      	ldr	r3, [pc, #168]	; (123b0 <_eeprom_emulator_check_logical_page+0xc4>)
   12308:	685a      	ldr	r2, [r3, #4]
   1230a:	1dbb      	adds	r3, r7, #6
   1230c:	881b      	ldrh	r3, [r3, #0]
   1230e:	019b      	lsls	r3, r3, #6
   12310:	18d3      	adds	r3, r2, r3
   12312:	781a      	ldrb	r2, [r3, #0]
   12314:	1cbb      	adds	r3, r7, #2
   12316:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   12318:	1cbb      	adds	r3, r7, #2
   1231a:	881b      	ldrh	r3, [r3, #0]
   1231c:	2bff      	cmp	r3, #255	; 0xff
   1231e:	d037      	beq.n	12390 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   12320:	1d3b      	adds	r3, r7, #4
   12322:	1dba      	adds	r2, r7, #6
   12324:	8812      	ldrh	r2, [r2, #0]
   12326:	3204      	adds	r2, #4
   12328:	801a      	strh	r2, [r3, #0]
   1232a:	e02a      	b.n	12382 <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   1232c:	1d3b      	adds	r3, r7, #4
   1232e:	881a      	ldrh	r2, [r3, #0]
   12330:	4b1f      	ldr	r3, [pc, #124]	; (123b0 <_eeprom_emulator_check_logical_page+0xc4>)
   12332:	891b      	ldrh	r3, [r3, #8]
   12334:	3b01      	subs	r3, #1
   12336:	429a      	cmp	r2, r3
   12338:	d01b      	beq.n	12372 <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   1233a:	4b1d      	ldr	r3, [pc, #116]	; (123b0 <_eeprom_emulator_check_logical_page+0xc4>)
   1233c:	685a      	ldr	r2, [r3, #4]
   1233e:	1d3b      	adds	r3, r7, #4
   12340:	881b      	ldrh	r3, [r3, #0]
   12342:	019b      	lsls	r3, r3, #6
   12344:	18d3      	adds	r3, r2, r3
   12346:	781a      	ldrb	r2, [r3, #0]
   12348:	003b      	movs	r3, r7
   1234a:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   1234c:	003b      	movs	r3, r7
   1234e:	881b      	ldrh	r3, [r3, #0]
   12350:	2bff      	cmp	r3, #255	; 0xff
   12352:	d010      	beq.n	12376 <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   12354:	1cba      	adds	r2, r7, #2
   12356:	003b      	movs	r3, r7
   12358:	8812      	ldrh	r2, [r2, #0]
   1235a:	881b      	ldrh	r3, [r3, #0]
   1235c:	429a      	cmp	r2, r3
   1235e:	d10b      	bne.n	12378 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   12360:	1d3b      	adds	r3, r7, #4
   12362:	881a      	ldrh	r2, [r3, #0]
   12364:	1dbb      	adds	r3, r7, #6
   12366:	881b      	ldrh	r3, [r3, #0]
   12368:	0011      	movs	r1, r2
   1236a:	0018      	movs	r0, r3
   1236c:	4b11      	ldr	r3, [pc, #68]	; (123b4 <_eeprom_emulator_check_logical_page+0xc8>)
   1236e:	4798      	blx	r3
   12370:	e002      	b.n	12378 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   12372:	46c0      	nop			; (mov r8, r8)
   12374:	e000      	b.n	12378 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   12376:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   12378:	1d3b      	adds	r3, r7, #4
   1237a:	1d3a      	adds	r2, r7, #4
   1237c:	8812      	ldrh	r2, [r2, #0]
   1237e:	3204      	adds	r2, #4
   12380:	801a      	strh	r2, [r3, #0]
   12382:	4b0b      	ldr	r3, [pc, #44]	; (123b0 <_eeprom_emulator_check_logical_page+0xc4>)
   12384:	891b      	ldrh	r3, [r3, #8]
   12386:	1d3a      	adds	r2, r7, #4
   12388:	8812      	ldrh	r2, [r2, #0]
   1238a:	429a      	cmp	r2, r3
   1238c:	d3ce      	bcc.n	1232c <_eeprom_emulator_check_logical_page+0x40>
   1238e:	e000      	b.n	12392 <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   12390:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   12392:	1dbb      	adds	r3, r7, #6
   12394:	1dba      	adds	r2, r7, #6
   12396:	8812      	ldrh	r2, [r2, #0]
   12398:	3204      	adds	r2, #4
   1239a:	801a      	strh	r2, [r3, #0]
   1239c:	4b04      	ldr	r3, [pc, #16]	; (123b0 <_eeprom_emulator_check_logical_page+0xc4>)
   1239e:	891b      	ldrh	r3, [r3, #8]
   123a0:	1dba      	adds	r2, r7, #6
   123a2:	8812      	ldrh	r2, [r2, #0]
   123a4:	429a      	cmp	r2, r3
   123a6:	d3ae      	bcc.n	12306 <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   123a8:	46c0      	nop			; (mov r8, r8)
   123aa:	46bd      	mov	sp, r7
   123ac:	b002      	add	sp, #8
   123ae:	bd80      	pop	{r7, pc}
   123b0:	2000041c 	.word	0x2000041c
   123b4:	00012299 	.word	0x00012299

000123b8 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   123b8:	b580      	push	{r7, lr}
   123ba:	b084      	sub	sp, #16
   123bc:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   123be:	4b51      	ldr	r3, [pc, #324]	; (12504 <_eeprom_emulator_update_page_mapping+0x14c>)
   123c0:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   123c2:	230e      	movs	r3, #14
   123c4:	18fb      	adds	r3, r7, r3
   123c6:	2200      	movs	r2, #0
   123c8:	801a      	strh	r2, [r3, #0]
   123ca:	e033      	b.n	12434 <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   123cc:	230e      	movs	r3, #14
   123ce:	18fb      	adds	r3, r7, r3
   123d0:	881a      	ldrh	r2, [r3, #0]
   123d2:	4b4d      	ldr	r3, [pc, #308]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   123d4:	891b      	ldrh	r3, [r3, #8]
   123d6:	3b01      	subs	r3, #1
   123d8:	429a      	cmp	r2, r3
   123da:	d023      	beq.n	12424 <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   123dc:	4b4a      	ldr	r3, [pc, #296]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   123de:	685a      	ldr	r2, [r3, #4]
   123e0:	230e      	movs	r3, #14
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	881b      	ldrh	r3, [r3, #0]
   123e6:	019b      	lsls	r3, r3, #6
   123e8:	18d3      	adds	r3, r2, r3
   123ea:	781a      	ldrb	r2, [r3, #0]
   123ec:	2308      	movs	r3, #8
   123ee:	18fb      	adds	r3, r7, r3
   123f0:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   123f2:	2308      	movs	r3, #8
   123f4:	18fb      	adds	r3, r7, r3
   123f6:	881b      	ldrh	r3, [r3, #0]
   123f8:	2bff      	cmp	r3, #255	; 0xff
   123fa:	d014      	beq.n	12426 <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   123fc:	4b42      	ldr	r3, [pc, #264]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   123fe:	7a9b      	ldrb	r3, [r3, #10]
   12400:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   12402:	2208      	movs	r2, #8
   12404:	18ba      	adds	r2, r7, r2
   12406:	8812      	ldrh	r2, [r2, #0]
   12408:	429a      	cmp	r2, r3
   1240a:	d20c      	bcs.n	12426 <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   1240c:	2308      	movs	r3, #8
   1240e:	18fb      	adds	r3, r7, r3
   12410:	881b      	ldrh	r3, [r3, #0]
   12412:	220e      	movs	r2, #14
   12414:	18ba      	adds	r2, r7, r2
   12416:	8812      	ldrh	r2, [r2, #0]
   12418:	b2d1      	uxtb	r1, r2
   1241a:	4a3b      	ldr	r2, [pc, #236]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   1241c:	18d3      	adds	r3, r2, r3
   1241e:	1c0a      	adds	r2, r1, #0
   12420:	72da      	strb	r2, [r3, #11]
   12422:	e000      	b.n	12426 <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   12424:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   12426:	230e      	movs	r3, #14
   12428:	18fb      	adds	r3, r7, r3
   1242a:	881a      	ldrh	r2, [r3, #0]
   1242c:	230e      	movs	r3, #14
   1242e:	18fb      	adds	r3, r7, r3
   12430:	3201      	adds	r2, #1
   12432:	801a      	strh	r2, [r3, #0]
   12434:	4b34      	ldr	r3, [pc, #208]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   12436:	891b      	ldrh	r3, [r3, #8]
   12438:	220e      	movs	r2, #14
   1243a:	18ba      	adds	r2, r7, r2
   1243c:	8812      	ldrh	r2, [r2, #0]
   1243e:	429a      	cmp	r2, r3
   12440:	d3c4      	bcc.n	123cc <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   12442:	4b31      	ldr	r3, [pc, #196]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   12444:	2287      	movs	r2, #135	; 0x87
   12446:	213f      	movs	r1, #63	; 0x3f
   12448:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   1244a:	230c      	movs	r3, #12
   1244c:	18fb      	adds	r3, r7, r3
   1244e:	2200      	movs	r2, #0
   12450:	801a      	strh	r2, [r3, #0]
   12452:	e04a      	b.n	124ea <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   12454:	230b      	movs	r3, #11
   12456:	18fb      	adds	r3, r7, r3
   12458:	2201      	movs	r2, #1
   1245a:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1245c:	230a      	movs	r3, #10
   1245e:	18fb      	adds	r3, r7, r3
   12460:	2200      	movs	r2, #0
   12462:	701a      	strb	r2, [r3, #0]
   12464:	e028      	b.n	124b8 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   12466:	230c      	movs	r3, #12
   12468:	18fb      	adds	r3, r7, r3
   1246a:	881b      	ldrh	r3, [r3, #0]
   1246c:	009b      	lsls	r3, r3, #2
   1246e:	b299      	uxth	r1, r3
   12470:	230a      	movs	r3, #10
   12472:	18fb      	adds	r3, r7, r3
   12474:	781b      	ldrb	r3, [r3, #0]
   12476:	b29a      	uxth	r2, r3
   12478:	1dbb      	adds	r3, r7, #6
   1247a:	188a      	adds	r2, r1, r2
   1247c:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   1247e:	1dbb      	adds	r3, r7, #6
   12480:	881a      	ldrh	r2, [r3, #0]
   12482:	4b21      	ldr	r3, [pc, #132]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   12484:	891b      	ldrh	r3, [r3, #8]
   12486:	3b01      	subs	r3, #1
   12488:	429a      	cmp	r2, r3
   1248a:	d00d      	beq.n	124a8 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   1248c:	4b1e      	ldr	r3, [pc, #120]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   1248e:	685a      	ldr	r2, [r3, #4]
   12490:	1dbb      	adds	r3, r7, #6
   12492:	881b      	ldrh	r3, [r3, #0]
   12494:	019b      	lsls	r3, r3, #6
   12496:	18d3      	adds	r3, r2, r3
   12498:	781b      	ldrb	r3, [r3, #0]
   1249a:	2bff      	cmp	r3, #255	; 0xff
   1249c:	d005      	beq.n	124aa <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   1249e:	230b      	movs	r3, #11
   124a0:	18fb      	adds	r3, r7, r3
   124a2:	2200      	movs	r2, #0
   124a4:	701a      	strb	r2, [r3, #0]
   124a6:	e000      	b.n	124aa <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   124a8:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   124aa:	230a      	movs	r3, #10
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230a      	movs	r3, #10
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	3201      	adds	r2, #1
   124b6:	701a      	strb	r2, [r3, #0]
   124b8:	230a      	movs	r3, #10
   124ba:	18fb      	adds	r3, r7, r3
   124bc:	781b      	ldrb	r3, [r3, #0]
   124be:	2b03      	cmp	r3, #3
   124c0:	d9d1      	bls.n	12466 <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   124c2:	230b      	movs	r3, #11
   124c4:	18fb      	adds	r3, r7, r3
   124c6:	781b      	ldrb	r3, [r3, #0]
   124c8:	2b00      	cmp	r3, #0
   124ca:	d007      	beq.n	124dc <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   124cc:	230c      	movs	r3, #12
   124ce:	18fb      	adds	r3, r7, r3
   124d0:	881b      	ldrh	r3, [r3, #0]
   124d2:	b2d9      	uxtb	r1, r3
   124d4:	4b0c      	ldr	r3, [pc, #48]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   124d6:	2287      	movs	r2, #135	; 0x87
   124d8:	5499      	strb	r1, [r3, r2]
			break;
   124da:	e00f      	b.n	124fc <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   124dc:	230c      	movs	r3, #12
   124de:	18fb      	adds	r3, r7, r3
   124e0:	881a      	ldrh	r2, [r3, #0]
   124e2:	230c      	movs	r3, #12
   124e4:	18fb      	adds	r3, r7, r3
   124e6:	3201      	adds	r2, #1
   124e8:	801a      	strh	r2, [r3, #0]
   124ea:	4b07      	ldr	r3, [pc, #28]	; (12508 <_eeprom_emulator_update_page_mapping+0x150>)
   124ec:	891b      	ldrh	r3, [r3, #8]
   124ee:	089b      	lsrs	r3, r3, #2
   124f0:	b29b      	uxth	r3, r3
   124f2:	220c      	movs	r2, #12
   124f4:	18ba      	adds	r2, r7, r2
   124f6:	8812      	ldrh	r2, [r2, #0]
   124f8:	429a      	cmp	r2, r3
   124fa:	d3ab      	bcc.n	12454 <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   124fc:	46c0      	nop			; (mov r8, r8)
   124fe:	46bd      	mov	sp, r7
   12500:	b004      	add	sp, #16
   12502:	bd80      	pop	{r7, pc}
   12504:	000122ed 	.word	0x000122ed
   12508:	2000041c 	.word	0x2000041c

0001250c <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   1250c:	b580      	push	{r7, lr}
   1250e:	b084      	sub	sp, #16
   12510:	af00      	add	r7, sp, #0
   12512:	0002      	movs	r2, r0
   12514:	6039      	str	r1, [r7, #0]
   12516:	1dfb      	adds	r3, r7, #7
   12518:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   1251a:	230e      	movs	r3, #14
   1251c:	18fb      	adds	r3, r7, r3
   1251e:	1dfa      	adds	r2, r7, #7
   12520:	7812      	ldrb	r2, [r2, #0]
   12522:	0892      	lsrs	r2, r2, #2
   12524:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   12526:	230d      	movs	r3, #13
   12528:	18fb      	adds	r3, r7, r3
   1252a:	1dfa      	adds	r2, r7, #7
   1252c:	7812      	ldrb	r2, [r2, #0]
   1252e:	2103      	movs	r1, #3
   12530:	400a      	ands	r2, r1
   12532:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   12534:	230f      	movs	r3, #15
   12536:	18fb      	adds	r3, r7, r3
   12538:	220d      	movs	r2, #13
   1253a:	18ba      	adds	r2, r7, r2
   1253c:	7812      	ldrb	r2, [r2, #0]
   1253e:	701a      	strb	r2, [r3, #0]
   12540:	e023      	b.n	1258a <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   12542:	230e      	movs	r3, #14
   12544:	18fb      	adds	r3, r7, r3
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	009b      	lsls	r3, r3, #2
   1254a:	b2d9      	uxtb	r1, r3
   1254c:	230c      	movs	r3, #12
   1254e:	18fb      	adds	r3, r7, r3
   12550:	220f      	movs	r2, #15
   12552:	18ba      	adds	r2, r7, r2
   12554:	7812      	ldrb	r2, [r2, #0]
   12556:	188a      	adds	r2, r1, r2
   12558:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   1255a:	4b11      	ldr	r3, [pc, #68]	; (125a0 <_eeprom_emulator_is_page_free_on_row+0x94>)
   1255c:	685a      	ldr	r2, [r3, #4]
   1255e:	230c      	movs	r3, #12
   12560:	18fb      	adds	r3, r7, r3
   12562:	781b      	ldrb	r3, [r3, #0]
   12564:	019b      	lsls	r3, r3, #6
   12566:	18d3      	adds	r3, r2, r3
   12568:	781b      	ldrb	r3, [r3, #0]
   1256a:	2bff      	cmp	r3, #255	; 0xff
   1256c:	d106      	bne.n	1257c <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   1256e:	683b      	ldr	r3, [r7, #0]
   12570:	220c      	movs	r2, #12
   12572:	18ba      	adds	r2, r7, r2
   12574:	7812      	ldrb	r2, [r2, #0]
   12576:	701a      	strb	r2, [r3, #0]
			return true;
   12578:	2301      	movs	r3, #1
   1257a:	e00c      	b.n	12596 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   1257c:	230f      	movs	r3, #15
   1257e:	18fb      	adds	r3, r7, r3
   12580:	781a      	ldrb	r2, [r3, #0]
   12582:	230f      	movs	r3, #15
   12584:	18fb      	adds	r3, r7, r3
   12586:	3201      	adds	r2, #1
   12588:	701a      	strb	r2, [r3, #0]
   1258a:	230f      	movs	r3, #15
   1258c:	18fb      	adds	r3, r7, r3
   1258e:	781b      	ldrb	r3, [r3, #0]
   12590:	2b03      	cmp	r3, #3
   12592:	d9d6      	bls.n	12542 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   12594:	2300      	movs	r3, #0
}
   12596:	0018      	movs	r0, r3
   12598:	46bd      	mov	sp, r7
   1259a:	b004      	add	sp, #16
   1259c:	bd80      	pop	{r7, pc}
   1259e:	46c0      	nop			; (mov r8, r8)
   125a0:	2000041c 	.word	0x2000041c

000125a4 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b086      	sub	sp, #24
   125a8:	af00      	add	r7, sp, #0
   125aa:	603a      	str	r2, [r7, #0]
   125ac:	1dfb      	adds	r3, r7, #7
   125ae:	1c02      	adds	r2, r0, #0
   125b0:	701a      	strb	r2, [r3, #0]
   125b2:	1dbb      	adds	r3, r7, #6
   125b4:	1c0a      	adds	r2, r1, #0
   125b6:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   125b8:	2314      	movs	r3, #20
   125ba:	18fb      	adds	r3, r7, r3
   125bc:	2200      	movs	r2, #0
   125be:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   125c0:	4b69      	ldr	r3, [pc, #420]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   125c2:	685b      	ldr	r3, [r3, #4]
   125c4:	1dfa      	adds	r2, r7, #7
   125c6:	7812      	ldrb	r2, [r2, #0]
   125c8:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   125ca:	189b      	adds	r3, r3, r2
   125cc:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   125ce:	693b      	ldr	r3, [r7, #16]
   125d0:	781a      	ldrb	r2, [r3, #0]
   125d2:	2308      	movs	r3, #8
   125d4:	18fb      	adds	r3, r7, r3
   125d6:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   125d8:	1dfb      	adds	r3, r7, #7
   125da:	781b      	ldrb	r3, [r3, #0]
   125dc:	009b      	lsls	r3, r3, #2
   125de:	b2da      	uxtb	r2, r3
   125e0:	2308      	movs	r3, #8
   125e2:	18fb      	adds	r3, r7, r3
   125e4:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   125e6:	693b      	ldr	r3, [r7, #16]
   125e8:	3340      	adds	r3, #64	; 0x40
   125ea:	781a      	ldrb	r2, [r3, #0]
   125ec:	2308      	movs	r3, #8
   125ee:	18fb      	adds	r3, r7, r3
   125f0:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   125f2:	1dfb      	adds	r3, r7, #7
   125f4:	781b      	ldrb	r3, [r3, #0]
   125f6:	009b      	lsls	r3, r3, #2
   125f8:	b2db      	uxtb	r3, r3
   125fa:	3301      	adds	r3, #1
   125fc:	b2da      	uxtb	r2, r3
   125fe:	2308      	movs	r3, #8
   12600:	18fb      	adds	r3, r7, r3
   12602:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   12604:	2317      	movs	r3, #23
   12606:	18fb      	adds	r3, r7, r3
   12608:	2200      	movs	r2, #0
   1260a:	701a      	strb	r2, [r3, #0]
   1260c:	e03a      	b.n	12684 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1260e:	2316      	movs	r3, #22
   12610:	18fb      	adds	r3, r7, r3
   12612:	2202      	movs	r2, #2
   12614:	701a      	strb	r2, [r3, #0]
   12616:	e029      	b.n	1266c <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   12618:	2317      	movs	r3, #23
   1261a:	18fb      	adds	r3, r7, r3
   1261c:	781a      	ldrb	r2, [r3, #0]
   1261e:	2308      	movs	r3, #8
   12620:	18fb      	adds	r3, r7, r3
   12622:	0052      	lsls	r2, r2, #1
   12624:	5cd2      	ldrb	r2, [r2, r3]
   12626:	2316      	movs	r3, #22
   12628:	18fb      	adds	r3, r7, r3
   1262a:	781b      	ldrb	r3, [r3, #0]
   1262c:	019b      	lsls	r3, r3, #6
   1262e:	6939      	ldr	r1, [r7, #16]
   12630:	18cb      	adds	r3, r1, r3
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	429a      	cmp	r2, r3
   12636:	d112      	bne.n	1265e <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   12638:	2317      	movs	r3, #23
   1263a:	18fb      	adds	r3, r7, r3
   1263c:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   1263e:	1dfa      	adds	r2, r7, #7
   12640:	7812      	ldrb	r2, [r2, #0]
   12642:	0092      	lsls	r2, r2, #2
   12644:	b2d1      	uxtb	r1, r2
   12646:	2216      	movs	r2, #22
   12648:	18ba      	adds	r2, r7, r2
   1264a:	7812      	ldrb	r2, [r2, #0]
   1264c:	188a      	adds	r2, r1, r2
   1264e:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   12650:	2208      	movs	r2, #8
   12652:	18ba      	adds	r2, r7, r2
   12654:	005b      	lsls	r3, r3, #1
   12656:	18d3      	adds	r3, r2, r3
   12658:	3301      	adds	r3, #1
   1265a:	1c0a      	adds	r2, r1, #0
   1265c:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1265e:	2316      	movs	r3, #22
   12660:	18fb      	adds	r3, r7, r3
   12662:	781a      	ldrb	r2, [r3, #0]
   12664:	2316      	movs	r3, #22
   12666:	18fb      	adds	r3, r7, r3
   12668:	3201      	adds	r2, #1
   1266a:	701a      	strb	r2, [r3, #0]
   1266c:	2316      	movs	r3, #22
   1266e:	18fb      	adds	r3, r7, r3
   12670:	781b      	ldrb	r3, [r3, #0]
   12672:	2b03      	cmp	r3, #3
   12674:	d9d0      	bls.n	12618 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   12676:	2317      	movs	r3, #23
   12678:	18fb      	adds	r3, r7, r3
   1267a:	781a      	ldrb	r2, [r3, #0]
   1267c:	2317      	movs	r3, #23
   1267e:	18fb      	adds	r3, r7, r3
   12680:	3201      	adds	r2, #1
   12682:	701a      	strb	r2, [r3, #0]
   12684:	2317      	movs	r3, #23
   12686:	18fb      	adds	r3, r7, r3
   12688:	781b      	ldrb	r3, [r3, #0]
   1268a:	2b01      	cmp	r3, #1
   1268c:	d9bf      	bls.n	1260e <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   1268e:	2315      	movs	r3, #21
   12690:	18fb      	adds	r3, r7, r3
   12692:	2200      	movs	r2, #0
   12694:	701a      	strb	r2, [r3, #0]
   12696:	e051      	b.n	1273c <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   12698:	4b33      	ldr	r3, [pc, #204]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   1269a:	2287      	movs	r2, #135	; 0x87
   1269c:	5c9b      	ldrb	r3, [r3, r2]
   1269e:	009a      	lsls	r2, r3, #2
   126a0:	2315      	movs	r3, #21
   126a2:	18fb      	adds	r3, r7, r3
   126a4:	781b      	ldrb	r3, [r3, #0]
   126a6:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   126a8:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   126aa:	4b30      	ldr	r3, [pc, #192]	; (1276c <_eeprom_emulator_move_data_to_spare+0x1c8>)
   126ac:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   126ae:	2315      	movs	r3, #21
   126b0:	18fb      	adds	r3, r7, r3
   126b2:	781a      	ldrb	r2, [r3, #0]
   126b4:	2308      	movs	r3, #8
   126b6:	18fb      	adds	r3, r7, r3
   126b8:	0052      	lsls	r2, r2, #1
   126ba:	5cd3      	ldrb	r3, [r2, r3]
   126bc:	1dba      	adds	r2, r7, #6
   126be:	7812      	ldrb	r2, [r2, #0]
   126c0:	429a      	cmp	r2, r3
   126c2:	d10d      	bne.n	126e0 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   126c4:	4b28      	ldr	r3, [pc, #160]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   126c6:	1dba      	adds	r2, r7, #6
   126c8:	2188      	movs	r1, #136	; 0x88
   126ca:	7812      	ldrb	r2, [r2, #0]
   126cc:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   126ce:	4b26      	ldr	r3, [pc, #152]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   126d0:	228c      	movs	r2, #140	; 0x8c
   126d2:	6839      	ldr	r1, [r7, #0]
   126d4:	189b      	adds	r3, r3, r2
   126d6:	223c      	movs	r2, #60	; 0x3c
   126d8:	0018      	movs	r0, r3
   126da:	4b25      	ldr	r3, [pc, #148]	; (12770 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   126dc:	4798      	blx	r3
   126de:	e00e      	b.n	126fe <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   126e0:	2315      	movs	r3, #21
   126e2:	18fb      	adds	r3, r7, r3
   126e4:	781b      	ldrb	r3, [r3, #0]
   126e6:	2208      	movs	r2, #8
   126e8:	18ba      	adds	r2, r7, r2
   126ea:	005b      	lsls	r3, r3, #1
   126ec:	18d3      	adds	r3, r2, r3
   126ee:	3301      	adds	r3, #1
   126f0:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   126f2:	b29b      	uxth	r3, r3
   126f4:	4a1f      	ldr	r2, [pc, #124]	; (12774 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   126f6:	0011      	movs	r1, r2
   126f8:	0018      	movs	r0, r3
   126fa:	4b1f      	ldr	r3, [pc, #124]	; (12778 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   126fc:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   126fe:	68fb      	ldr	r3, [r7, #12]
   12700:	b29b      	uxth	r3, r3
   12702:	4a1c      	ldr	r2, [pc, #112]	; (12774 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   12704:	0011      	movs	r1, r2
   12706:	0018      	movs	r0, r3
   12708:	4b1c      	ldr	r3, [pc, #112]	; (1277c <_eeprom_emulator_move_data_to_spare+0x1d8>)
   1270a:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   1270c:	2315      	movs	r3, #21
   1270e:	18fb      	adds	r3, r7, r3
   12710:	781a      	ldrb	r2, [r3, #0]
   12712:	2308      	movs	r3, #8
   12714:	18fb      	adds	r3, r7, r3
   12716:	0052      	lsls	r2, r2, #1
   12718:	5cd3      	ldrb	r3, [r2, r3]
   1271a:	0019      	movs	r1, r3
   1271c:	68fb      	ldr	r3, [r7, #12]
   1271e:	b2da      	uxtb	r2, r3
   12720:	4b11      	ldr	r3, [pc, #68]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12722:	185b      	adds	r3, r3, r1
   12724:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   12726:	4b10      	ldr	r3, [pc, #64]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12728:	22c8      	movs	r2, #200	; 0xc8
   1272a:	2101      	movs	r1, #1
   1272c:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   1272e:	2315      	movs	r3, #21
   12730:	18fb      	adds	r3, r7, r3
   12732:	781a      	ldrb	r2, [r3, #0]
   12734:	2315      	movs	r3, #21
   12736:	18fb      	adds	r3, r7, r3
   12738:	3201      	adds	r2, #1
   1273a:	701a      	strb	r2, [r3, #0]
   1273c:	2315      	movs	r3, #21
   1273e:	18fb      	adds	r3, r7, r3
   12740:	781b      	ldrb	r3, [r3, #0]
   12742:	2b01      	cmp	r3, #1
   12744:	d9a8      	bls.n	12698 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   12746:	1dfb      	adds	r3, r7, #7
   12748:	781b      	ldrb	r3, [r3, #0]
   1274a:	0018      	movs	r0, r3
   1274c:	4b0c      	ldr	r3, [pc, #48]	; (12780 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   1274e:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   12750:	4b05      	ldr	r3, [pc, #20]	; (12768 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12752:	1dfa      	adds	r2, r7, #7
   12754:	2187      	movs	r1, #135	; 0x87
   12756:	7812      	ldrb	r2, [r2, #0]
   12758:	545a      	strb	r2, [r3, r1]

	return error_code;
   1275a:	2314      	movs	r3, #20
   1275c:	18fb      	adds	r3, r7, r3
   1275e:	781b      	ldrb	r3, [r3, #0]
}
   12760:	0018      	movs	r0, r3
   12762:	46bd      	mov	sp, r7
   12764:	b006      	add	sp, #24
   12766:	bd80      	pop	{r7, pc}
   12768:	2000041c 	.word	0x2000041c
   1276c:	00012ba1 	.word	0x00012ba1
   12770:	00017d31 	.word	0x00017d31
   12774:	200004a4 	.word	0x200004a4
   12778:	000120f9 	.word	0x000120f9
   1277c:	0001205d 	.word	0x0001205d
   12780:	00012015 	.word	0x00012015

00012784 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   12784:	b590      	push	{r4, r7, lr}
   12786:	b095      	sub	sp, #84	; 0x54
   12788:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   1278a:	2340      	movs	r3, #64	; 0x40
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	4a29      	ldr	r2, [pc, #164]	; (12834 <_eeprom_emulator_create_master_page+0xb0>)
   12790:	ca13      	ldmia	r2!, {r0, r1, r4}
   12792:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   12794:	003b      	movs	r3, r7
   12796:	2240      	movs	r2, #64	; 0x40
   12798:	21ff      	movs	r1, #255	; 0xff
   1279a:	0018      	movs	r0, r3
   1279c:	4b26      	ldr	r3, [pc, #152]	; (12838 <_eeprom_emulator_create_master_page+0xb4>)
   1279e:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   127a0:	234f      	movs	r3, #79	; 0x4f
   127a2:	18fb      	adds	r3, r7, r3
   127a4:	2200      	movs	r2, #0
   127a6:	701a      	strb	r2, [r3, #0]
   127a8:	e013      	b.n	127d2 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   127aa:	234f      	movs	r3, #79	; 0x4f
   127ac:	18fb      	adds	r3, r7, r3
   127ae:	781a      	ldrb	r2, [r3, #0]
   127b0:	234f      	movs	r3, #79	; 0x4f
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	7819      	ldrb	r1, [r3, #0]
   127b6:	2340      	movs	r3, #64	; 0x40
   127b8:	18fb      	adds	r3, r7, r3
   127ba:	0089      	lsls	r1, r1, #2
   127bc:	58c9      	ldr	r1, [r1, r3]
   127be:	003b      	movs	r3, r7
   127c0:	0092      	lsls	r2, r2, #2
   127c2:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   127c4:	234f      	movs	r3, #79	; 0x4f
   127c6:	18fb      	adds	r3, r7, r3
   127c8:	781a      	ldrb	r2, [r3, #0]
   127ca:	234f      	movs	r3, #79	; 0x4f
   127cc:	18fb      	adds	r3, r7, r3
   127ce:	3201      	adds	r2, #1
   127d0:	701a      	strb	r2, [r3, #0]
   127d2:	234f      	movs	r3, #79	; 0x4f
   127d4:	18fb      	adds	r3, r7, r3
   127d6:	781b      	ldrb	r3, [r3, #0]
   127d8:	2b02      	cmp	r3, #2
   127da:	d9e6      	bls.n	127aa <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   127dc:	003b      	movs	r3, r7
   127de:	2201      	movs	r2, #1
   127e0:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   127e2:	003b      	movs	r3, r7
   127e4:	2201      	movs	r2, #1
   127e6:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   127e8:	003b      	movs	r3, r7
   127ea:	2200      	movs	r2, #0
   127ec:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   127ee:	003b      	movs	r3, r7
   127f0:	2200      	movs	r2, #0
   127f2:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   127f4:	4b11      	ldr	r3, [pc, #68]	; (1283c <_eeprom_emulator_create_master_page+0xb8>)
   127f6:	891b      	ldrh	r3, [r3, #8]
   127f8:	3b01      	subs	r3, #1
   127fa:	2b00      	cmp	r3, #0
   127fc:	da00      	bge.n	12800 <_eeprom_emulator_create_master_page+0x7c>
   127fe:	3303      	adds	r3, #3
   12800:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   12802:	b2db      	uxtb	r3, r3
   12804:	0018      	movs	r0, r3
   12806:	4b0e      	ldr	r3, [pc, #56]	; (12840 <_eeprom_emulator_create_master_page+0xbc>)
   12808:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   1280a:	4b0c      	ldr	r3, [pc, #48]	; (1283c <_eeprom_emulator_create_master_page+0xb8>)
   1280c:	891b      	ldrh	r3, [r3, #8]
   1280e:	3b01      	subs	r3, #1
   12810:	b29b      	uxth	r3, r3
   12812:	003a      	movs	r2, r7
   12814:	0011      	movs	r1, r2
   12816:	0018      	movs	r0, r3
   12818:	4b0a      	ldr	r3, [pc, #40]	; (12844 <_eeprom_emulator_create_master_page+0xc0>)
   1281a:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   1281c:	4b07      	ldr	r3, [pc, #28]	; (1283c <_eeprom_emulator_create_master_page+0xb8>)
   1281e:	891b      	ldrh	r3, [r3, #8]
   12820:	3b01      	subs	r3, #1
   12822:	b29b      	uxth	r3, r3
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_eeprom_emulator_create_master_page+0xc4>)
   12828:	4798      	blx	r3
}
   1282a:	46c0      	nop			; (mov r8, r8)
   1282c:	46bd      	mov	sp, r7
   1282e:	b015      	add	sp, #84	; 0x54
   12830:	bd90      	pop	{r4, r7, pc}
   12832:	46c0      	nop			; (mov r8, r8)
   12834:	00019a78 	.word	0x00019a78
   12838:	00017d67 	.word	0x00017d67
   1283c:	2000041c 	.word	0x2000041c
   12840:	00012015 	.word	0x00012015
   12844:	0001205d 	.word	0x0001205d
   12848:	000120ad 	.word	0x000120ad

0001284c <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   1284c:	b590      	push	{r4, r7, lr}
   1284e:	b095      	sub	sp, #84	; 0x54
   12850:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   12852:	2340      	movs	r3, #64	; 0x40
   12854:	18fb      	adds	r3, r7, r3
   12856:	4a22      	ldr	r2, [pc, #136]	; (128e0 <_eeprom_emulator_verify_master_page+0x94>)
   12858:	ca13      	ldmia	r2!, {r0, r1, r4}
   1285a:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   1285c:	4b21      	ldr	r3, [pc, #132]	; (128e4 <_eeprom_emulator_verify_master_page+0x98>)
   1285e:	891b      	ldrh	r3, [r3, #8]
   12860:	3b01      	subs	r3, #1
   12862:	b29b      	uxth	r3, r3
   12864:	003a      	movs	r2, r7
   12866:	0011      	movs	r1, r2
   12868:	0018      	movs	r0, r3
   1286a:	4b1f      	ldr	r3, [pc, #124]	; (128e8 <_eeprom_emulator_verify_master_page+0x9c>)
   1286c:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   1286e:	234f      	movs	r3, #79	; 0x4f
   12870:	18fb      	adds	r3, r7, r3
   12872:	2200      	movs	r2, #0
   12874:	701a      	strb	r2, [r3, #0]
   12876:	e017      	b.n	128a8 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   12878:	234f      	movs	r3, #79	; 0x4f
   1287a:	18fb      	adds	r3, r7, r3
   1287c:	781a      	ldrb	r2, [r3, #0]
   1287e:	003b      	movs	r3, r7
   12880:	0092      	lsls	r2, r2, #2
   12882:	58d2      	ldr	r2, [r2, r3]
   12884:	234f      	movs	r3, #79	; 0x4f
   12886:	18fb      	adds	r3, r7, r3
   12888:	7819      	ldrb	r1, [r3, #0]
   1288a:	2340      	movs	r3, #64	; 0x40
   1288c:	18fb      	adds	r3, r7, r3
   1288e:	0089      	lsls	r1, r1, #2
   12890:	58cb      	ldr	r3, [r1, r3]
   12892:	429a      	cmp	r2, r3
   12894:	d001      	beq.n	1289a <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   12896:	231a      	movs	r3, #26
   12898:	e01e      	b.n	128d8 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   1289a:	234f      	movs	r3, #79	; 0x4f
   1289c:	18fb      	adds	r3, r7, r3
   1289e:	781a      	ldrb	r2, [r3, #0]
   128a0:	234f      	movs	r3, #79	; 0x4f
   128a2:	18fb      	adds	r3, r7, r3
   128a4:	3201      	adds	r2, #1
   128a6:	701a      	strb	r2, [r3, #0]
   128a8:	234f      	movs	r3, #79	; 0x4f
   128aa:	18fb      	adds	r3, r7, r3
   128ac:	781b      	ldrb	r3, [r3, #0]
   128ae:	2b02      	cmp	r3, #2
   128b0:	d9e2      	bls.n	12878 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   128b2:	003b      	movs	r3, r7
   128b4:	7bdb      	ldrb	r3, [r3, #15]
   128b6:	2b01      	cmp	r3, #1
   128b8:	d001      	beq.n	128be <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   128ba:	2310      	movs	r3, #16
   128bc:	e00c      	b.n	128d8 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   128be:	003b      	movs	r3, r7
   128c0:	7b1b      	ldrb	r3, [r3, #12]
   128c2:	2b01      	cmp	r3, #1
   128c4:	d001      	beq.n	128ca <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   128c6:	2310      	movs	r3, #16
   128c8:	e006      	b.n	128d8 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   128ca:	003b      	movs	r3, r7
   128cc:	7b5b      	ldrb	r3, [r3, #13]
   128ce:	2b00      	cmp	r3, #0
   128d0:	d001      	beq.n	128d6 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   128d2:	2310      	movs	r3, #16
   128d4:	e000      	b.n	128d8 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   128d6:	2300      	movs	r3, #0
}
   128d8:	0018      	movs	r0, r3
   128da:	46bd      	mov	sp, r7
   128dc:	b015      	add	sp, #84	; 0x54
   128de:	bd90      	pop	{r4, r7, pc}
   128e0:	00019a78 	.word	0x00019a78
   128e4:	2000041c 	.word	0x2000041c
   128e8:	000120f9 	.word	0x000120f9

000128ec <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   128ec:	b590      	push	{r4, r7, lr}
   128ee:	b087      	sub	sp, #28
   128f0:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   128f2:	2317      	movs	r3, #23
   128f4:	18fb      	adds	r3, r7, r3
   128f6:	2200      	movs	r2, #0
   128f8:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   128fa:	2310      	movs	r3, #16
   128fc:	18fb      	adds	r3, r7, r3
   128fe:	0018      	movs	r0, r3
   12900:	4b2e      	ldr	r3, [pc, #184]	; (129bc <eeprom_emulator_init+0xd0>)
   12902:	4798      	blx	r3
	config.manual_page_write = true;
   12904:	2310      	movs	r3, #16
   12906:	18fb      	adds	r3, r7, r3
   12908:	2201      	movs	r2, #1
   1290a:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   1290c:	2317      	movs	r3, #23
   1290e:	18fc      	adds	r4, r7, r3
   12910:	2310      	movs	r3, #16
   12912:	18fb      	adds	r3, r7, r3
   12914:	0018      	movs	r0, r3
   12916:	4b2a      	ldr	r3, [pc, #168]	; (129c0 <eeprom_emulator_init+0xd4>)
   12918:	4798      	blx	r3
   1291a:	0003      	movs	r3, r0
   1291c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1291e:	2317      	movs	r3, #23
   12920:	18fb      	adds	r3, r7, r3
   12922:	781b      	ldrb	r3, [r3, #0]
   12924:	2b05      	cmp	r3, #5
   12926:	d0f1      	beq.n	1290c <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   12928:	1d3b      	adds	r3, r7, #4
   1292a:	0018      	movs	r0, r3
   1292c:	4b25      	ldr	r3, [pc, #148]	; (129c4 <eeprom_emulator_init+0xd8>)
   1292e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   12930:	1d3b      	adds	r3, r7, #4
   12932:	685b      	ldr	r3, [r3, #4]
   12934:	2b0b      	cmp	r3, #11
   12936:	d801      	bhi.n	1293c <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   12938:	2316      	movs	r3, #22
   1293a:	e03b      	b.n	129b4 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   1293c:	1d3b      	adds	r3, r7, #4
   1293e:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   12940:	b29a      	uxth	r2, r3
   12942:	4b21      	ldr	r3, [pc, #132]	; (129c8 <eeprom_emulator_init+0xdc>)
   12944:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   12946:	1d3b      	adds	r3, r7, #4
   12948:	685b      	ldr	r3, [r3, #4]
   1294a:	3b08      	subs	r3, #8
   1294c:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   1294e:	b2da      	uxtb	r2, r3
   12950:	4b1d      	ldr	r3, [pc, #116]	; (129c8 <eeprom_emulator_init+0xdc>)
   12952:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   12954:	4b1c      	ldr	r3, [pc, #112]	; (129c8 <eeprom_emulator_init+0xdc>)
   12956:	891b      	ldrh	r3, [r3, #8]
   12958:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   1295a:	0013      	movs	r3, r2
   1295c:	069b      	lsls	r3, r3, #26
   1295e:	1a9b      	subs	r3, r3, r2
   12960:	019b      	lsls	r3, r3, #6
   12962:	2280      	movs	r2, #128	; 0x80
   12964:	02d2      	lsls	r2, r2, #11
   12966:	4694      	mov	ip, r2
   12968:	4463      	add	r3, ip
   1296a:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   1296c:	4b16      	ldr	r3, [pc, #88]	; (129c8 <eeprom_emulator_init+0xdc>)
   1296e:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   12970:	4b15      	ldr	r3, [pc, #84]	; (129c8 <eeprom_emulator_init+0xdc>)
   12972:	22c8      	movs	r2, #200	; 0xc8
   12974:	2100      	movs	r1, #0
   12976:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   12978:	4b14      	ldr	r3, [pc, #80]	; (129cc <eeprom_emulator_init+0xe0>)
   1297a:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   1297c:	4b12      	ldr	r3, [pc, #72]	; (129c8 <eeprom_emulator_init+0xdc>)
   1297e:	2287      	movs	r2, #135	; 0x87
   12980:	5c9b      	ldrb	r3, [r3, r2]
   12982:	2b3f      	cmp	r3, #63	; 0x3f
   12984:	d101      	bne.n	1298a <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   12986:	231a      	movs	r3, #26
   12988:	e014      	b.n	129b4 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   1298a:	2317      	movs	r3, #23
   1298c:	18fc      	adds	r4, r7, r3
   1298e:	4b10      	ldr	r3, [pc, #64]	; (129d0 <eeprom_emulator_init+0xe4>)
   12990:	4798      	blx	r3
   12992:	0003      	movs	r3, r0
   12994:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   12996:	2317      	movs	r3, #23
   12998:	18fb      	adds	r3, r7, r3
   1299a:	781b      	ldrb	r3, [r3, #0]
   1299c:	2b00      	cmp	r3, #0
   1299e:	d003      	beq.n	129a8 <eeprom_emulator_init+0xbc>
		return error_code;
   129a0:	2317      	movs	r3, #23
   129a2:	18fb      	adds	r3, r7, r3
   129a4:	781b      	ldrb	r3, [r3, #0]
   129a6:	e005      	b.n	129b4 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   129a8:	4b07      	ldr	r3, [pc, #28]	; (129c8 <eeprom_emulator_init+0xdc>)
   129aa:	2201      	movs	r2, #1
   129ac:	701a      	strb	r2, [r3, #0]

	return error_code;
   129ae:	2317      	movs	r3, #23
   129b0:	18fb      	adds	r3, r7, r3
   129b2:	781b      	ldrb	r3, [r3, #0]
}
   129b4:	0018      	movs	r0, r3
   129b6:	46bd      	mov	sp, r7
   129b8:	b007      	add	sp, #28
   129ba:	bd90      	pop	{r4, r7, pc}
   129bc:	00011fd9 	.word	0x00011fd9
   129c0:	000119b5 	.word	0x000119b5
   129c4:	00011e95 	.word	0x00011e95
   129c8:	2000041c 	.word	0x2000041c
   129cc:	000123b9 	.word	0x000123b9
   129d0:	0001284d 	.word	0x0001284d

000129d4 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   129d4:	b580      	push	{r7, lr}
   129d6:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   129d8:	4b04      	ldr	r3, [pc, #16]	; (129ec <eeprom_emulator_erase_memory+0x18>)
   129da:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   129dc:	4b04      	ldr	r3, [pc, #16]	; (129f0 <eeprom_emulator_erase_memory+0x1c>)
   129de:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   129e0:	4b04      	ldr	r3, [pc, #16]	; (129f4 <eeprom_emulator_erase_memory+0x20>)
   129e2:	4798      	blx	r3
}
   129e4:	46c0      	nop			; (mov r8, r8)
   129e6:	46bd      	mov	sp, r7
   129e8:	bd80      	pop	{r7, pc}
   129ea:	46c0      	nop			; (mov r8, r8)
   129ec:	00012149 	.word	0x00012149
   129f0:	00012785 	.word	0x00012785
   129f4:	000123b9 	.word	0x000123b9

000129f8 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   129f8:	b590      	push	{r4, r7, lr}
   129fa:	b085      	sub	sp, #20
   129fc:	af00      	add	r7, sp, #0
   129fe:	0002      	movs	r2, r0
   12a00:	6039      	str	r1, [r7, #0]
   12a02:	1dfb      	adds	r3, r7, #7
   12a04:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12a06:	4b38      	ldr	r3, [pc, #224]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a08:	781b      	ldrb	r3, [r3, #0]
   12a0a:	2201      	movs	r2, #1
   12a0c:	4053      	eors	r3, r2
   12a0e:	b2db      	uxtb	r3, r3
   12a10:	2b00      	cmp	r3, #0
   12a12:	d001      	beq.n	12a18 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12a14:	231f      	movs	r3, #31
   12a16:	e063      	b.n	12ae0 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12a18:	4b33      	ldr	r3, [pc, #204]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a1a:	7a9b      	ldrb	r3, [r3, #10]
   12a1c:	1dfa      	adds	r2, r7, #7
   12a1e:	7812      	ldrb	r2, [r2, #0]
   12a20:	429a      	cmp	r2, r3
   12a22:	d301      	bcc.n	12a28 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12a24:	2318      	movs	r3, #24
   12a26:	e05b      	b.n	12ae0 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   12a28:	4b2f      	ldr	r3, [pc, #188]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a2a:	22c8      	movs	r2, #200	; 0xc8
   12a2c:	5c9b      	ldrb	r3, [r3, r2]
   12a2e:	2b00      	cmp	r3, #0
   12a30:	d008      	beq.n	12a44 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   12a32:	4b2d      	ldr	r3, [pc, #180]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a34:	2288      	movs	r2, #136	; 0x88
   12a36:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12a38:	1dfa      	adds	r2, r7, #7
   12a3a:	7812      	ldrb	r2, [r2, #0]
   12a3c:	429a      	cmp	r2, r3
   12a3e:	d001      	beq.n	12a44 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   12a40:	4b2a      	ldr	r3, [pc, #168]	; (12aec <eeprom_emulator_write_page+0xf4>)
   12a42:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   12a44:	230e      	movs	r3, #14
   12a46:	18fb      	adds	r3, r7, r3
   12a48:	2200      	movs	r2, #0
   12a4a:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   12a4c:	1dfb      	adds	r3, r7, #7
   12a4e:	781b      	ldrb	r3, [r3, #0]
   12a50:	4a25      	ldr	r2, [pc, #148]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a52:	18d3      	adds	r3, r2, r3
   12a54:	7adb      	ldrb	r3, [r3, #11]
   12a56:	220f      	movs	r2, #15
   12a58:	18bc      	adds	r4, r7, r2
   12a5a:	220e      	movs	r2, #14
   12a5c:	18ba      	adds	r2, r7, r2
   12a5e:	0011      	movs	r1, r2
   12a60:	0018      	movs	r0, r3
   12a62:	4b23      	ldr	r3, [pc, #140]	; (12af0 <eeprom_emulator_write_page+0xf8>)
   12a64:	4798      	blx	r3
   12a66:	0003      	movs	r3, r0
   12a68:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   12a6a:	230f      	movs	r3, #15
   12a6c:	18fb      	adds	r3, r7, r3
   12a6e:	781b      	ldrb	r3, [r3, #0]
   12a70:	2201      	movs	r2, #1
   12a72:	4053      	eors	r3, r2
   12a74:	b2db      	uxtb	r3, r3
   12a76:	2b00      	cmp	r3, #0
   12a78:	d00e      	beq.n	12a98 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   12a7a:	1dfb      	adds	r3, r7, #7
   12a7c:	781b      	ldrb	r3, [r3, #0]
   12a7e:	4a1a      	ldr	r2, [pc, #104]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a80:	18d3      	adds	r3, r2, r3
   12a82:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   12a84:	089b      	lsrs	r3, r3, #2
   12a86:	b2d8      	uxtb	r0, r3
   12a88:	683a      	ldr	r2, [r7, #0]
   12a8a:	1dfb      	adds	r3, r7, #7
   12a8c:	781b      	ldrb	r3, [r3, #0]
   12a8e:	0019      	movs	r1, r3
   12a90:	4b18      	ldr	r3, [pc, #96]	; (12af4 <eeprom_emulator_write_page+0xfc>)
   12a92:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   12a94:	2300      	movs	r3, #0
   12a96:	e023      	b.n	12ae0 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   12a98:	4b13      	ldr	r3, [pc, #76]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12a9a:	1dfa      	adds	r2, r7, #7
   12a9c:	2188      	movs	r1, #136	; 0x88
   12a9e:	7812      	ldrb	r2, [r2, #0]
   12aa0:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   12aa2:	4b11      	ldr	r3, [pc, #68]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12aa4:	228c      	movs	r2, #140	; 0x8c
   12aa6:	6839      	ldr	r1, [r7, #0]
   12aa8:	189b      	adds	r3, r3, r2
   12aaa:	223c      	movs	r2, #60	; 0x3c
   12aac:	0018      	movs	r0, r3
   12aae:	4b12      	ldr	r3, [pc, #72]	; (12af8 <eeprom_emulator_write_page+0x100>)
   12ab0:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   12ab2:	230e      	movs	r3, #14
   12ab4:	18fb      	adds	r3, r7, r3
   12ab6:	781b      	ldrb	r3, [r3, #0]
   12ab8:	b29b      	uxth	r3, r3
   12aba:	4a10      	ldr	r2, [pc, #64]	; (12afc <eeprom_emulator_write_page+0x104>)
   12abc:	0011      	movs	r1, r2
   12abe:	0018      	movs	r0, r3
   12ac0:	4b0f      	ldr	r3, [pc, #60]	; (12b00 <eeprom_emulator_write_page+0x108>)
   12ac2:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   12ac4:	1dfb      	adds	r3, r7, #7
   12ac6:	781b      	ldrb	r3, [r3, #0]
   12ac8:	220e      	movs	r2, #14
   12aca:	18ba      	adds	r2, r7, r2
   12acc:	7811      	ldrb	r1, [r2, #0]
   12ace:	4a06      	ldr	r2, [pc, #24]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12ad0:	18d3      	adds	r3, r2, r3
   12ad2:	1c0a      	adds	r2, r1, #0
   12ad4:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   12ad6:	4b04      	ldr	r3, [pc, #16]	; (12ae8 <eeprom_emulator_write_page+0xf0>)
   12ad8:	22c8      	movs	r2, #200	; 0xc8
   12ada:	2101      	movs	r1, #1
   12adc:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   12ade:	2300      	movs	r3, #0
}
   12ae0:	0018      	movs	r0, r3
   12ae2:	46bd      	mov	sp, r7
   12ae4:	b005      	add	sp, #20
   12ae6:	bd90      	pop	{r4, r7, pc}
   12ae8:	2000041c 	.word	0x2000041c
   12aec:	00012ba1 	.word	0x00012ba1
   12af0:	0001250d 	.word	0x0001250d
   12af4:	000125a5 	.word	0x000125a5
   12af8:	00017d31 	.word	0x00017d31
   12afc:	200004a4 	.word	0x200004a4
   12b00:	0001205d 	.word	0x0001205d

00012b04 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   12b04:	b580      	push	{r7, lr}
   12b06:	b092      	sub	sp, #72	; 0x48
   12b08:	af00      	add	r7, sp, #0
   12b0a:	0002      	movs	r2, r0
   12b0c:	6039      	str	r1, [r7, #0]
   12b0e:	1dfb      	adds	r3, r7, #7
   12b10:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12b12:	4b20      	ldr	r3, [pc, #128]	; (12b94 <eeprom_emulator_read_page+0x90>)
   12b14:	781b      	ldrb	r3, [r3, #0]
   12b16:	2201      	movs	r2, #1
   12b18:	4053      	eors	r3, r2
   12b1a:	b2db      	uxtb	r3, r3
   12b1c:	2b00      	cmp	r3, #0
   12b1e:	d001      	beq.n	12b24 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12b20:	231f      	movs	r3, #31
   12b22:	e033      	b.n	12b8c <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12b24:	4b1b      	ldr	r3, [pc, #108]	; (12b94 <eeprom_emulator_read_page+0x90>)
   12b26:	7a9b      	ldrb	r3, [r3, #10]
   12b28:	1dfa      	adds	r2, r7, #7
   12b2a:	7812      	ldrb	r2, [r2, #0]
   12b2c:	429a      	cmp	r2, r3
   12b2e:	d301      	bcc.n	12b34 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12b30:	2318      	movs	r3, #24
   12b32:	e02b      	b.n	12b8c <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   12b34:	4b17      	ldr	r3, [pc, #92]	; (12b94 <eeprom_emulator_read_page+0x90>)
   12b36:	22c8      	movs	r2, #200	; 0xc8
   12b38:	5c9b      	ldrb	r3, [r3, r2]
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d010      	beq.n	12b60 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   12b3e:	4b15      	ldr	r3, [pc, #84]	; (12b94 <eeprom_emulator_read_page+0x90>)
   12b40:	2288      	movs	r2, #136	; 0x88
   12b42:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12b44:	1dfa      	adds	r2, r7, #7
   12b46:	7812      	ldrb	r2, [r2, #0]
   12b48:	429a      	cmp	r2, r3
   12b4a:	d109      	bne.n	12b60 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   12b4c:	6839      	ldr	r1, [r7, #0]
   12b4e:	4b11      	ldr	r3, [pc, #68]	; (12b94 <eeprom_emulator_read_page+0x90>)
   12b50:	228c      	movs	r2, #140	; 0x8c
   12b52:	0008      	movs	r0, r1
   12b54:	189b      	adds	r3, r3, r2
   12b56:	223c      	movs	r2, #60	; 0x3c
   12b58:	0019      	movs	r1, r3
   12b5a:	4b0f      	ldr	r3, [pc, #60]	; (12b98 <eeprom_emulator_read_page+0x94>)
   12b5c:	4798      	blx	r3
   12b5e:	e014      	b.n	12b8a <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   12b60:	1dfb      	adds	r3, r7, #7
   12b62:	781b      	ldrb	r3, [r3, #0]
   12b64:	4a0b      	ldr	r2, [pc, #44]	; (12b94 <eeprom_emulator_read_page+0x90>)
   12b66:	18d3      	adds	r3, r2, r3
   12b68:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   12b6a:	b29b      	uxth	r3, r3
   12b6c:	2208      	movs	r2, #8
   12b6e:	18ba      	adds	r2, r7, r2
   12b70:	0011      	movs	r1, r2
   12b72:	0018      	movs	r0, r3
   12b74:	4b09      	ldr	r3, [pc, #36]	; (12b9c <eeprom_emulator_read_page+0x98>)
   12b76:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   12b78:	683a      	ldr	r2, [r7, #0]
   12b7a:	2308      	movs	r3, #8
   12b7c:	18fb      	adds	r3, r7, r3
   12b7e:	0010      	movs	r0, r2
   12b80:	3304      	adds	r3, #4
   12b82:	223c      	movs	r2, #60	; 0x3c
   12b84:	0019      	movs	r1, r3
   12b86:	4b04      	ldr	r3, [pc, #16]	; (12b98 <eeprom_emulator_read_page+0x94>)
   12b88:	4798      	blx	r3
	}

	return STATUS_OK;
   12b8a:	2300      	movs	r3, #0
}
   12b8c:	0018      	movs	r0, r3
   12b8e:	46bd      	mov	sp, r7
   12b90:	b012      	add	sp, #72	; 0x48
   12b92:	bd80      	pop	{r7, pc}
   12b94:	2000041c 	.word	0x2000041c
   12b98:	00017d31 	.word	0x00017d31
   12b9c:	000120f9 	.word	0x000120f9

00012ba0 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   12ba0:	b580      	push	{r7, lr}
   12ba2:	b082      	sub	sp, #8
   12ba4:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   12ba6:	1dfb      	adds	r3, r7, #7
   12ba8:	2200      	movs	r2, #0
   12baa:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   12bac:	4b10      	ldr	r3, [pc, #64]	; (12bf0 <eeprom_emulator_commit_page_buffer+0x50>)
   12bae:	22c8      	movs	r2, #200	; 0xc8
   12bb0:	5c9b      	ldrb	r3, [r3, r2]
   12bb2:	2201      	movs	r2, #1
   12bb4:	4053      	eors	r3, r2
   12bb6:	b2db      	uxtb	r3, r3
   12bb8:	2b00      	cmp	r3, #0
   12bba:	d001      	beq.n	12bc0 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   12bbc:	2300      	movs	r3, #0
   12bbe:	e013      	b.n	12be8 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   12bc0:	1dbb      	adds	r3, r7, #6
   12bc2:	4a0b      	ldr	r2, [pc, #44]	; (12bf0 <eeprom_emulator_commit_page_buffer+0x50>)
   12bc4:	2188      	movs	r1, #136	; 0x88
   12bc6:	5c52      	ldrb	r2, [r2, r1]
   12bc8:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   12bca:	1dbb      	adds	r3, r7, #6
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	4a08      	ldr	r2, [pc, #32]	; (12bf0 <eeprom_emulator_commit_page_buffer+0x50>)
   12bd0:	18d3      	adds	r3, r2, r3
   12bd2:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   12bd4:	b29b      	uxth	r3, r3
   12bd6:	0018      	movs	r0, r3
   12bd8:	4b06      	ldr	r3, [pc, #24]	; (12bf4 <eeprom_emulator_commit_page_buffer+0x54>)
   12bda:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   12bdc:	4b04      	ldr	r3, [pc, #16]	; (12bf0 <eeprom_emulator_commit_page_buffer+0x50>)
   12bde:	22c8      	movs	r2, #200	; 0xc8
   12be0:	2100      	movs	r1, #0
   12be2:	5499      	strb	r1, [r3, r2]

	return error_code;
   12be4:	1dfb      	adds	r3, r7, #7
   12be6:	781b      	ldrb	r3, [r3, #0]
}
   12be8:	0018      	movs	r0, r3
   12bea:	46bd      	mov	sp, r7
   12bec:	b002      	add	sp, #8
   12bee:	bd80      	pop	{r7, pc}
   12bf0:	2000041c 	.word	0x2000041c
   12bf4:	000120ad 	.word	0x000120ad

00012bf8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   12bf8:	b580      	push	{r7, lr}
   12bfa:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   12bfc:	46c0      	nop			; (mov r8, r8)
   12bfe:	46bd      	mov	sp, r7
   12c00:	bd80      	pop	{r7, pc}
	...

00012c04 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   12c04:	b580      	push	{r7, lr}
   12c06:	b082      	sub	sp, #8
   12c08:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   12c0a:	4b10      	ldr	r3, [pc, #64]	; (12c4c <cpu_irq_enter_critical+0x48>)
   12c0c:	681b      	ldr	r3, [r3, #0]
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d112      	bne.n	12c38 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12c12:	f3ef 8310 	mrs	r3, PRIMASK
   12c16:	607b      	str	r3, [r7, #4]
  return(result);
   12c18:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   12c1a:	2b00      	cmp	r3, #0
   12c1c:	d109      	bne.n	12c32 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   12c1e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   12c20:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   12c24:	4b0a      	ldr	r3, [pc, #40]	; (12c50 <cpu_irq_enter_critical+0x4c>)
   12c26:	2200      	movs	r2, #0
   12c28:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   12c2a:	4b0a      	ldr	r3, [pc, #40]	; (12c54 <cpu_irq_enter_critical+0x50>)
   12c2c:	2201      	movs	r2, #1
   12c2e:	701a      	strb	r2, [r3, #0]
   12c30:	e002      	b.n	12c38 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   12c32:	4b08      	ldr	r3, [pc, #32]	; (12c54 <cpu_irq_enter_critical+0x50>)
   12c34:	2200      	movs	r2, #0
   12c36:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   12c38:	4b04      	ldr	r3, [pc, #16]	; (12c4c <cpu_irq_enter_critical+0x48>)
   12c3a:	681b      	ldr	r3, [r3, #0]
   12c3c:	1c5a      	adds	r2, r3, #1
   12c3e:	4b03      	ldr	r3, [pc, #12]	; (12c4c <cpu_irq_enter_critical+0x48>)
   12c40:	601a      	str	r2, [r3, #0]
}
   12c42:	46c0      	nop			; (mov r8, r8)
   12c44:	46bd      	mov	sp, r7
   12c46:	b002      	add	sp, #8
   12c48:	bd80      	pop	{r7, pc}
   12c4a:	46c0      	nop			; (mov r8, r8)
   12c4c:	200004e8 	.word	0x200004e8
   12c50:	20000028 	.word	0x20000028
   12c54:	200004ec 	.word	0x200004ec

00012c58 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   12c58:	b580      	push	{r7, lr}
   12c5a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   12c5c:	4b0b      	ldr	r3, [pc, #44]	; (12c8c <cpu_irq_leave_critical+0x34>)
   12c5e:	681b      	ldr	r3, [r3, #0]
   12c60:	1e5a      	subs	r2, r3, #1
   12c62:	4b0a      	ldr	r3, [pc, #40]	; (12c8c <cpu_irq_leave_critical+0x34>)
   12c64:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   12c66:	4b09      	ldr	r3, [pc, #36]	; (12c8c <cpu_irq_leave_critical+0x34>)
   12c68:	681b      	ldr	r3, [r3, #0]
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d10a      	bne.n	12c84 <cpu_irq_leave_critical+0x2c>
   12c6e:	4b08      	ldr	r3, [pc, #32]	; (12c90 <cpu_irq_leave_critical+0x38>)
   12c70:	781b      	ldrb	r3, [r3, #0]
   12c72:	b2db      	uxtb	r3, r3
   12c74:	2b00      	cmp	r3, #0
   12c76:	d005      	beq.n	12c84 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   12c78:	4b06      	ldr	r3, [pc, #24]	; (12c94 <cpu_irq_leave_critical+0x3c>)
   12c7a:	2201      	movs	r2, #1
   12c7c:	701a      	strb	r2, [r3, #0]
   12c7e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12c82:	b662      	cpsie	i
	}
}
   12c84:	46c0      	nop			; (mov r8, r8)
   12c86:	46bd      	mov	sp, r7
   12c88:	bd80      	pop	{r7, pc}
   12c8a:	46c0      	nop			; (mov r8, r8)
   12c8c:	200004e8 	.word	0x200004e8
   12c90:	200004ec 	.word	0x200004ec
   12c94:	20000028 	.word	0x20000028

00012c98 <system_gclk_gen_get_config_defaults>:
{
   12c98:	b580      	push	{r7, lr}
   12c9a:	b082      	sub	sp, #8
   12c9c:	af00      	add	r7, sp, #0
   12c9e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   12ca0:	687b      	ldr	r3, [r7, #4]
   12ca2:	2201      	movs	r2, #1
   12ca4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   12ca6:	687b      	ldr	r3, [r7, #4]
   12ca8:	2200      	movs	r2, #0
   12caa:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   12cac:	687b      	ldr	r3, [r7, #4]
   12cae:	2206      	movs	r2, #6
   12cb0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   12cb2:	687b      	ldr	r3, [r7, #4]
   12cb4:	2200      	movs	r2, #0
   12cb6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   12cb8:	687b      	ldr	r3, [r7, #4]
   12cba:	2200      	movs	r2, #0
   12cbc:	725a      	strb	r2, [r3, #9]
}
   12cbe:	46c0      	nop			; (mov r8, r8)
   12cc0:	46bd      	mov	sp, r7
   12cc2:	b002      	add	sp, #8
   12cc4:	bd80      	pop	{r7, pc}

00012cc6 <system_gclk_chan_get_config_defaults>:
{
   12cc6:	b580      	push	{r7, lr}
   12cc8:	b082      	sub	sp, #8
   12cca:	af00      	add	r7, sp, #0
   12ccc:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12cce:	687b      	ldr	r3, [r7, #4]
   12cd0:	2200      	movs	r2, #0
   12cd2:	701a      	strb	r2, [r3, #0]
}
   12cd4:	46c0      	nop			; (mov r8, r8)
   12cd6:	46bd      	mov	sp, r7
   12cd8:	b002      	add	sp, #8
   12cda:	bd80      	pop	{r7, pc}

00012cdc <system_clock_source_xosc32k_get_config_defaults>:
{
   12cdc:	b580      	push	{r7, lr}
   12cde:	b082      	sub	sp, #8
   12ce0:	af00      	add	r7, sp, #0
   12ce2:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   12ce4:	687b      	ldr	r3, [r7, #4]
   12ce6:	2200      	movs	r2, #0
   12ce8:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   12cea:	687b      	ldr	r3, [r7, #4]
   12cec:	2204      	movs	r2, #4
   12cee:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   12cf0:	687b      	ldr	r3, [r7, #4]
   12cf2:	2200      	movs	r2, #0
   12cf4:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   12cf6:	687b      	ldr	r3, [r7, #4]
   12cf8:	2280      	movs	r2, #128	; 0x80
   12cfa:	0212      	lsls	r2, r2, #8
   12cfc:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   12cfe:	687b      	ldr	r3, [r7, #4]
   12d00:	2200      	movs	r2, #0
   12d02:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   12d04:	687b      	ldr	r3, [r7, #4]
   12d06:	2201      	movs	r2, #1
   12d08:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   12d0a:	687b      	ldr	r3, [r7, #4]
   12d0c:	2200      	movs	r2, #0
   12d0e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   12d10:	687b      	ldr	r3, [r7, #4]
   12d12:	2201      	movs	r2, #1
   12d14:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   12d16:	687b      	ldr	r3, [r7, #4]
   12d18:	2200      	movs	r2, #0
   12d1a:	739a      	strb	r2, [r3, #14]
}
   12d1c:	46c0      	nop			; (mov r8, r8)
   12d1e:	46bd      	mov	sp, r7
   12d20:	b002      	add	sp, #8
   12d22:	bd80      	pop	{r7, pc}

00012d24 <system_clock_source_osc8m_get_config_defaults>:
{
   12d24:	b580      	push	{r7, lr}
   12d26:	b082      	sub	sp, #8
   12d28:	af00      	add	r7, sp, #0
   12d2a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   12d2c:	687b      	ldr	r3, [r7, #4]
   12d2e:	2203      	movs	r2, #3
   12d30:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   12d32:	687b      	ldr	r3, [r7, #4]
   12d34:	2200      	movs	r2, #0
   12d36:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   12d38:	687b      	ldr	r3, [r7, #4]
   12d3a:	2201      	movs	r2, #1
   12d3c:	709a      	strb	r2, [r3, #2]
}
   12d3e:	46c0      	nop			; (mov r8, r8)
   12d40:	46bd      	mov	sp, r7
   12d42:	b002      	add	sp, #8
   12d44:	bd80      	pop	{r7, pc}

00012d46 <system_clock_source_dfll_get_config_defaults>:
{
   12d46:	b580      	push	{r7, lr}
   12d48:	b082      	sub	sp, #8
   12d4a:	af00      	add	r7, sp, #0
   12d4c:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   12d4e:	687b      	ldr	r3, [r7, #4]
   12d50:	2200      	movs	r2, #0
   12d52:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   12d54:	687b      	ldr	r3, [r7, #4]
   12d56:	2200      	movs	r2, #0
   12d58:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   12d5a:	687b      	ldr	r3, [r7, #4]
   12d5c:	2200      	movs	r2, #0
   12d5e:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   12d60:	687b      	ldr	r3, [r7, #4]
   12d62:	2200      	movs	r2, #0
   12d64:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   12d66:	687b      	ldr	r3, [r7, #4]
   12d68:	2200      	movs	r2, #0
   12d6a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   12d6c:	687b      	ldr	r3, [r7, #4]
   12d6e:	2201      	movs	r2, #1
   12d70:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   12d72:	687b      	ldr	r3, [r7, #4]
   12d74:	2207      	movs	r2, #7
   12d76:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   12d78:	687b      	ldr	r3, [r7, #4]
   12d7a:	223f      	movs	r2, #63	; 0x3f
   12d7c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   12d7e:	687b      	ldr	r3, [r7, #4]
   12d80:	2201      	movs	r2, #1
   12d82:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   12d84:	687b      	ldr	r3, [r7, #4]
   12d86:	2201      	movs	r2, #1
   12d88:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   12d8a:	687b      	ldr	r3, [r7, #4]
   12d8c:	2206      	movs	r2, #6
   12d8e:	821a      	strh	r2, [r3, #16]
}
   12d90:	46c0      	nop			; (mov r8, r8)
   12d92:	46bd      	mov	sp, r7
   12d94:	b002      	add	sp, #8
   12d96:	bd80      	pop	{r7, pc}

00012d98 <system_cpu_clock_set_divider>:
{
   12d98:	b580      	push	{r7, lr}
   12d9a:	b082      	sub	sp, #8
   12d9c:	af00      	add	r7, sp, #0
   12d9e:	0002      	movs	r2, r0
   12da0:	1dfb      	adds	r3, r7, #7
   12da2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   12da4:	4a03      	ldr	r2, [pc, #12]	; (12db4 <system_cpu_clock_set_divider+0x1c>)
   12da6:	1dfb      	adds	r3, r7, #7
   12da8:	781b      	ldrb	r3, [r3, #0]
   12daa:	7213      	strb	r3, [r2, #8]
}
   12dac:	46c0      	nop			; (mov r8, r8)
   12dae:	46bd      	mov	sp, r7
   12db0:	b002      	add	sp, #8
   12db2:	bd80      	pop	{r7, pc}
   12db4:	40000400 	.word	0x40000400

00012db8 <system_apb_clock_set_divider>:
{
   12db8:	b580      	push	{r7, lr}
   12dba:	b082      	sub	sp, #8
   12dbc:	af00      	add	r7, sp, #0
   12dbe:	0002      	movs	r2, r0
   12dc0:	1dfb      	adds	r3, r7, #7
   12dc2:	701a      	strb	r2, [r3, #0]
   12dc4:	1dbb      	adds	r3, r7, #6
   12dc6:	1c0a      	adds	r2, r1, #0
   12dc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12dca:	1dfb      	adds	r3, r7, #7
   12dcc:	781b      	ldrb	r3, [r3, #0]
   12dce:	2b01      	cmp	r3, #1
   12dd0:	d008      	beq.n	12de4 <system_apb_clock_set_divider+0x2c>
   12dd2:	2b02      	cmp	r3, #2
   12dd4:	d00b      	beq.n	12dee <system_apb_clock_set_divider+0x36>
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d10e      	bne.n	12df8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   12dda:	4a0b      	ldr	r2, [pc, #44]	; (12e08 <system_apb_clock_set_divider+0x50>)
   12ddc:	1dbb      	adds	r3, r7, #6
   12dde:	781b      	ldrb	r3, [r3, #0]
   12de0:	7253      	strb	r3, [r2, #9]
			break;
   12de2:	e00b      	b.n	12dfc <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   12de4:	4a08      	ldr	r2, [pc, #32]	; (12e08 <system_apb_clock_set_divider+0x50>)
   12de6:	1dbb      	adds	r3, r7, #6
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	7293      	strb	r3, [r2, #10]
			break;
   12dec:	e006      	b.n	12dfc <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   12dee:	4a06      	ldr	r2, [pc, #24]	; (12e08 <system_apb_clock_set_divider+0x50>)
   12df0:	1dbb      	adds	r3, r7, #6
   12df2:	781b      	ldrb	r3, [r3, #0]
   12df4:	72d3      	strb	r3, [r2, #11]
			break;
   12df6:	e001      	b.n	12dfc <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   12df8:	2317      	movs	r3, #23
   12dfa:	e000      	b.n	12dfe <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   12dfc:	2300      	movs	r3, #0
}
   12dfe:	0018      	movs	r0, r3
   12e00:	46bd      	mov	sp, r7
   12e02:	b002      	add	sp, #8
   12e04:	bd80      	pop	{r7, pc}
   12e06:	46c0      	nop			; (mov r8, r8)
   12e08:	40000400 	.word	0x40000400

00012e0c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   12e0c:	b580      	push	{r7, lr}
   12e0e:	b082      	sub	sp, #8
   12e10:	af00      	add	r7, sp, #0
   12e12:	0002      	movs	r2, r0
   12e14:	1dfb      	adds	r3, r7, #7
   12e16:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   12e18:	4a08      	ldr	r2, [pc, #32]	; (12e3c <system_flash_set_waitstates+0x30>)
   12e1a:	1dfb      	adds	r3, r7, #7
   12e1c:	781b      	ldrb	r3, [r3, #0]
   12e1e:	210f      	movs	r1, #15
   12e20:	400b      	ands	r3, r1
   12e22:	b2d9      	uxtb	r1, r3
   12e24:	6853      	ldr	r3, [r2, #4]
   12e26:	200f      	movs	r0, #15
   12e28:	4001      	ands	r1, r0
   12e2a:	0049      	lsls	r1, r1, #1
   12e2c:	201e      	movs	r0, #30
   12e2e:	4383      	bics	r3, r0
   12e30:	430b      	orrs	r3, r1
   12e32:	6053      	str	r3, [r2, #4]
}
   12e34:	46c0      	nop			; (mov r8, r8)
   12e36:	46bd      	mov	sp, r7
   12e38:	b002      	add	sp, #8
   12e3a:	bd80      	pop	{r7, pc}
   12e3c:	41004000 	.word	0x41004000

00012e40 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   12e44:	46c0      	nop			; (mov r8, r8)
   12e46:	4b04      	ldr	r3, [pc, #16]	; (12e58 <_system_dfll_wait_for_sync+0x18>)
   12e48:	68db      	ldr	r3, [r3, #12]
   12e4a:	2210      	movs	r2, #16
   12e4c:	4013      	ands	r3, r2
   12e4e:	d0fa      	beq.n	12e46 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   12e50:	46c0      	nop			; (mov r8, r8)
   12e52:	46bd      	mov	sp, r7
   12e54:	bd80      	pop	{r7, pc}
   12e56:	46c0      	nop			; (mov r8, r8)
   12e58:	40000800 	.word	0x40000800

00012e5c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   12e60:	4b0c      	ldr	r3, [pc, #48]	; (12e94 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12e62:	2202      	movs	r2, #2
   12e64:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   12e66:	4b0c      	ldr	r3, [pc, #48]	; (12e98 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12e68:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   12e6a:	4a0a      	ldr	r2, [pc, #40]	; (12e94 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12e6c:	4b0b      	ldr	r3, [pc, #44]	; (12e9c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12e6e:	689b      	ldr	r3, [r3, #8]
   12e70:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   12e72:	4a08      	ldr	r2, [pc, #32]	; (12e94 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12e74:	4b09      	ldr	r3, [pc, #36]	; (12e9c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12e76:	685b      	ldr	r3, [r3, #4]
   12e78:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   12e7a:	4b06      	ldr	r3, [pc, #24]	; (12e94 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12e7c:	2200      	movs	r2, #0
   12e7e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   12e80:	4b05      	ldr	r3, [pc, #20]	; (12e98 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12e82:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   12e84:	4a03      	ldr	r2, [pc, #12]	; (12e94 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12e86:	4b05      	ldr	r3, [pc, #20]	; (12e9c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12e88:	681b      	ldr	r3, [r3, #0]
   12e8a:	b29b      	uxth	r3, r3
   12e8c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   12e8e:	46c0      	nop			; (mov r8, r8)
   12e90:	46bd      	mov	sp, r7
   12e92:	bd80      	pop	{r7, pc}
   12e94:	40000800 	.word	0x40000800
   12e98:	00012e41 	.word	0x00012e41
   12e9c:	200004f0 	.word	0x200004f0

00012ea0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   12ea0:	b580      	push	{r7, lr}
   12ea2:	b082      	sub	sp, #8
   12ea4:	af00      	add	r7, sp, #0
   12ea6:	0002      	movs	r2, r0
   12ea8:	1dfb      	adds	r3, r7, #7
   12eaa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12eac:	1dfb      	adds	r3, r7, #7
   12eae:	781b      	ldrb	r3, [r3, #0]
   12eb0:	2b08      	cmp	r3, #8
   12eb2:	d841      	bhi.n	12f38 <system_clock_source_get_hz+0x98>
   12eb4:	009a      	lsls	r2, r3, #2
   12eb6:	4b23      	ldr	r3, [pc, #140]	; (12f44 <system_clock_source_get_hz+0xa4>)
   12eb8:	18d3      	adds	r3, r2, r3
   12eba:	681b      	ldr	r3, [r3, #0]
   12ebc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   12ebe:	4b22      	ldr	r3, [pc, #136]	; (12f48 <system_clock_source_get_hz+0xa8>)
   12ec0:	691b      	ldr	r3, [r3, #16]
   12ec2:	e03a      	b.n	12f3a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   12ec4:	4b21      	ldr	r3, [pc, #132]	; (12f4c <system_clock_source_get_hz+0xac>)
   12ec6:	6a1b      	ldr	r3, [r3, #32]
   12ec8:	059b      	lsls	r3, r3, #22
   12eca:	0f9b      	lsrs	r3, r3, #30
   12ecc:	b2db      	uxtb	r3, r3
   12ece:	001a      	movs	r2, r3
   12ed0:	4b1f      	ldr	r3, [pc, #124]	; (12f50 <system_clock_source_get_hz+0xb0>)
   12ed2:	40d3      	lsrs	r3, r2
   12ed4:	e031      	b.n	12f3a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   12ed6:	2380      	movs	r3, #128	; 0x80
   12ed8:	021b      	lsls	r3, r3, #8
   12eda:	e02e      	b.n	12f3a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   12edc:	2380      	movs	r3, #128	; 0x80
   12ede:	021b      	lsls	r3, r3, #8
   12ee0:	e02b      	b.n	12f3a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   12ee2:	4b19      	ldr	r3, [pc, #100]	; (12f48 <system_clock_source_get_hz+0xa8>)
   12ee4:	695b      	ldr	r3, [r3, #20]
   12ee6:	e028      	b.n	12f3a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   12ee8:	4b17      	ldr	r3, [pc, #92]	; (12f48 <system_clock_source_get_hz+0xa8>)
   12eea:	681b      	ldr	r3, [r3, #0]
   12eec:	2202      	movs	r2, #2
   12eee:	4013      	ands	r3, r2
   12ef0:	d101      	bne.n	12ef6 <system_clock_source_get_hz+0x56>
			return 0;
   12ef2:	2300      	movs	r3, #0
   12ef4:	e021      	b.n	12f3a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   12ef6:	4b17      	ldr	r3, [pc, #92]	; (12f54 <system_clock_source_get_hz+0xb4>)
   12ef8:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   12efa:	4b13      	ldr	r3, [pc, #76]	; (12f48 <system_clock_source_get_hz+0xa8>)
   12efc:	681b      	ldr	r3, [r3, #0]
   12efe:	2224      	movs	r2, #36	; 0x24
   12f00:	4013      	ands	r3, r2
   12f02:	2b04      	cmp	r3, #4
   12f04:	d109      	bne.n	12f1a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12f06:	2000      	movs	r0, #0
   12f08:	4b13      	ldr	r3, [pc, #76]	; (12f58 <system_clock_source_get_hz+0xb8>)
   12f0a:	4798      	blx	r3
   12f0c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   12f0e:	4b0e      	ldr	r3, [pc, #56]	; (12f48 <system_clock_source_get_hz+0xa8>)
   12f10:	689b      	ldr	r3, [r3, #8]
   12f12:	041b      	lsls	r3, r3, #16
   12f14:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12f16:	4353      	muls	r3, r2
   12f18:	e00f      	b.n	12f3a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   12f1a:	4b10      	ldr	r3, [pc, #64]	; (12f5c <system_clock_source_get_hz+0xbc>)
   12f1c:	e00d      	b.n	12f3a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   12f1e:	4a0b      	ldr	r2, [pc, #44]	; (12f4c <system_clock_source_get_hz+0xac>)
   12f20:	2350      	movs	r3, #80	; 0x50
   12f22:	5cd3      	ldrb	r3, [r2, r3]
   12f24:	b2db      	uxtb	r3, r3
   12f26:	001a      	movs	r2, r3
   12f28:	2304      	movs	r3, #4
   12f2a:	4013      	ands	r3, r2
   12f2c:	d101      	bne.n	12f32 <system_clock_source_get_hz+0x92>
			return 0;
   12f2e:	2300      	movs	r3, #0
   12f30:	e003      	b.n	12f3a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   12f32:	4b05      	ldr	r3, [pc, #20]	; (12f48 <system_clock_source_get_hz+0xa8>)
   12f34:	68db      	ldr	r3, [r3, #12]
   12f36:	e000      	b.n	12f3a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   12f38:	2300      	movs	r3, #0
	}
}
   12f3a:	0018      	movs	r0, r3
   12f3c:	46bd      	mov	sp, r7
   12f3e:	b002      	add	sp, #8
   12f40:	bd80      	pop	{r7, pc}
   12f42:	46c0      	nop			; (mov r8, r8)
   12f44:	00019a84 	.word	0x00019a84
   12f48:	200004f0 	.word	0x200004f0
   12f4c:	40000800 	.word	0x40000800
   12f50:	007a1200 	.word	0x007a1200
   12f54:	00012e41 	.word	0x00012e41
   12f58:	00013ae1 	.word	0x00013ae1
   12f5c:	02dc6c00 	.word	0x02dc6c00

00012f60 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   12f60:	b580      	push	{r7, lr}
   12f62:	b084      	sub	sp, #16
   12f64:	af00      	add	r7, sp, #0
   12f66:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   12f68:	4b1a      	ldr	r3, [pc, #104]	; (12fd4 <system_clock_source_osc8m_set_config+0x74>)
   12f6a:	6a1b      	ldr	r3, [r3, #32]
   12f6c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   12f6e:	687b      	ldr	r3, [r7, #4]
   12f70:	781b      	ldrb	r3, [r3, #0]
   12f72:	1c1a      	adds	r2, r3, #0
   12f74:	2303      	movs	r3, #3
   12f76:	4013      	ands	r3, r2
   12f78:	b2da      	uxtb	r2, r3
   12f7a:	230d      	movs	r3, #13
   12f7c:	18fb      	adds	r3, r7, r3
   12f7e:	2103      	movs	r1, #3
   12f80:	400a      	ands	r2, r1
   12f82:	0010      	movs	r0, r2
   12f84:	781a      	ldrb	r2, [r3, #0]
   12f86:	2103      	movs	r1, #3
   12f88:	438a      	bics	r2, r1
   12f8a:	1c11      	adds	r1, r2, #0
   12f8c:	1c02      	adds	r2, r0, #0
   12f8e:	430a      	orrs	r2, r1
   12f90:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   12f92:	687b      	ldr	r3, [r7, #4]
   12f94:	789a      	ldrb	r2, [r3, #2]
   12f96:	230c      	movs	r3, #12
   12f98:	18fb      	adds	r3, r7, r3
   12f9a:	01d0      	lsls	r0, r2, #7
   12f9c:	781a      	ldrb	r2, [r3, #0]
   12f9e:	217f      	movs	r1, #127	; 0x7f
   12fa0:	400a      	ands	r2, r1
   12fa2:	1c11      	adds	r1, r2, #0
   12fa4:	1c02      	adds	r2, r0, #0
   12fa6:	430a      	orrs	r2, r1
   12fa8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12faa:	687b      	ldr	r3, [r7, #4]
   12fac:	785a      	ldrb	r2, [r3, #1]
   12fae:	230c      	movs	r3, #12
   12fb0:	18fb      	adds	r3, r7, r3
   12fb2:	2101      	movs	r1, #1
   12fb4:	400a      	ands	r2, r1
   12fb6:	0190      	lsls	r0, r2, #6
   12fb8:	781a      	ldrb	r2, [r3, #0]
   12fba:	2140      	movs	r1, #64	; 0x40
   12fbc:	438a      	bics	r2, r1
   12fbe:	1c11      	adds	r1, r2, #0
   12fc0:	1c02      	adds	r2, r0, #0
   12fc2:	430a      	orrs	r2, r1
   12fc4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   12fc6:	4b03      	ldr	r3, [pc, #12]	; (12fd4 <system_clock_source_osc8m_set_config+0x74>)
   12fc8:	68fa      	ldr	r2, [r7, #12]
   12fca:	621a      	str	r2, [r3, #32]
}
   12fcc:	46c0      	nop			; (mov r8, r8)
   12fce:	46bd      	mov	sp, r7
   12fd0:	b004      	add	sp, #16
   12fd2:	bd80      	pop	{r7, pc}
   12fd4:	40000800 	.word	0x40000800

00012fd8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   12fd8:	b580      	push	{r7, lr}
   12fda:	b084      	sub	sp, #16
   12fdc:	af00      	add	r7, sp, #0
   12fde:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   12fe0:	4a43      	ldr	r2, [pc, #268]	; (130f0 <system_clock_source_xosc32k_set_config+0x118>)
   12fe2:	230c      	movs	r3, #12
   12fe4:	18fb      	adds	r3, r7, r3
   12fe6:	8a92      	ldrh	r2, [r2, #20]
   12fe8:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   12fea:	687b      	ldr	r3, [r7, #4]
   12fec:	785b      	ldrb	r3, [r3, #1]
   12fee:	1c1a      	adds	r2, r3, #0
   12ff0:	2307      	movs	r3, #7
   12ff2:	4013      	ands	r3, r2
   12ff4:	b2da      	uxtb	r2, r3
   12ff6:	230c      	movs	r3, #12
   12ff8:	18fb      	adds	r3, r7, r3
   12ffa:	2107      	movs	r1, #7
   12ffc:	400a      	ands	r2, r1
   12ffe:	0010      	movs	r0, r2
   13000:	785a      	ldrb	r2, [r3, #1]
   13002:	2107      	movs	r1, #7
   13004:	438a      	bics	r2, r1
   13006:	1c11      	adds	r1, r2, #0
   13008:	1c02      	adds	r2, r0, #0
   1300a:	430a      	orrs	r2, r1
   1300c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1300e:	687b      	ldr	r3, [r7, #4]
   13010:	781b      	ldrb	r3, [r3, #0]
   13012:	2b00      	cmp	r3, #0
   13014:	d106      	bne.n	13024 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   13016:	230c      	movs	r3, #12
   13018:	18fb      	adds	r3, r7, r3
   1301a:	781a      	ldrb	r2, [r3, #0]
   1301c:	2104      	movs	r1, #4
   1301e:	430a      	orrs	r2, r1
   13020:	701a      	strb	r2, [r3, #0]
   13022:	e005      	b.n	13030 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   13024:	230c      	movs	r3, #12
   13026:	18fb      	adds	r3, r7, r3
   13028:	781a      	ldrb	r2, [r3, #0]
   1302a:	2104      	movs	r1, #4
   1302c:	438a      	bics	r2, r1
   1302e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   13030:	687b      	ldr	r3, [r7, #4]
   13032:	789a      	ldrb	r2, [r3, #2]
   13034:	230c      	movs	r3, #12
   13036:	18fb      	adds	r3, r7, r3
   13038:	2101      	movs	r1, #1
   1303a:	400a      	ands	r2, r1
   1303c:	0150      	lsls	r0, r2, #5
   1303e:	781a      	ldrb	r2, [r3, #0]
   13040:	2120      	movs	r1, #32
   13042:	438a      	bics	r2, r1
   13044:	1c11      	adds	r1, r2, #0
   13046:	1c02      	adds	r2, r0, #0
   13048:	430a      	orrs	r2, r1
   1304a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   1304c:	687b      	ldr	r3, [r7, #4]
   1304e:	78da      	ldrb	r2, [r3, #3]
   13050:	230c      	movs	r3, #12
   13052:	18fb      	adds	r3, r7, r3
   13054:	2101      	movs	r1, #1
   13056:	400a      	ands	r2, r1
   13058:	0110      	lsls	r0, r2, #4
   1305a:	781a      	ldrb	r2, [r3, #0]
   1305c:	2110      	movs	r1, #16
   1305e:	438a      	bics	r2, r1
   13060:	1c11      	adds	r1, r2, #0
   13062:	1c02      	adds	r2, r0, #0
   13064:	430a      	orrs	r2, r1
   13066:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   13068:	687b      	ldr	r3, [r7, #4]
   1306a:	791a      	ldrb	r2, [r3, #4]
   1306c:	230c      	movs	r3, #12
   1306e:	18fb      	adds	r3, r7, r3
   13070:	2101      	movs	r1, #1
   13072:	400a      	ands	r2, r1
   13074:	00d0      	lsls	r0, r2, #3
   13076:	781a      	ldrb	r2, [r3, #0]
   13078:	2108      	movs	r1, #8
   1307a:	438a      	bics	r2, r1
   1307c:	1c11      	adds	r1, r2, #0
   1307e:	1c02      	adds	r2, r0, #0
   13080:	430a      	orrs	r2, r1
   13082:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   13084:	687b      	ldr	r3, [r7, #4]
   13086:	7b5a      	ldrb	r2, [r3, #13]
   13088:	230c      	movs	r3, #12
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	01d0      	lsls	r0, r2, #7
   1308e:	781a      	ldrb	r2, [r3, #0]
   13090:	217f      	movs	r1, #127	; 0x7f
   13092:	400a      	ands	r2, r1
   13094:	1c11      	adds	r1, r2, #0
   13096:	1c02      	adds	r2, r0, #0
   13098:	430a      	orrs	r2, r1
   1309a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	7b1a      	ldrb	r2, [r3, #12]
   130a0:	230c      	movs	r3, #12
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	2101      	movs	r1, #1
   130a6:	400a      	ands	r2, r1
   130a8:	0190      	lsls	r0, r2, #6
   130aa:	781a      	ldrb	r2, [r3, #0]
   130ac:	2140      	movs	r1, #64	; 0x40
   130ae:	438a      	bics	r2, r1
   130b0:	1c11      	adds	r1, r2, #0
   130b2:	1c02      	adds	r2, r0, #0
   130b4:	430a      	orrs	r2, r1
   130b6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   130b8:	687b      	ldr	r3, [r7, #4]
   130ba:	7b9a      	ldrb	r2, [r3, #14]
   130bc:	230c      	movs	r3, #12
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2101      	movs	r1, #1
   130c2:	400a      	ands	r2, r1
   130c4:	0110      	lsls	r0, r2, #4
   130c6:	785a      	ldrb	r2, [r3, #1]
   130c8:	2110      	movs	r1, #16
   130ca:	438a      	bics	r2, r1
   130cc:	1c11      	adds	r1, r2, #0
   130ce:	1c02      	adds	r2, r0, #0
   130d0:	430a      	orrs	r2, r1
   130d2:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	689a      	ldr	r2, [r3, #8]
   130d8:	4b06      	ldr	r3, [pc, #24]	; (130f4 <system_clock_source_xosc32k_set_config+0x11c>)
   130da:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   130dc:	4a04      	ldr	r2, [pc, #16]	; (130f0 <system_clock_source_xosc32k_set_config+0x118>)
   130de:	230c      	movs	r3, #12
   130e0:	18fb      	adds	r3, r7, r3
   130e2:	881b      	ldrh	r3, [r3, #0]
   130e4:	8293      	strh	r3, [r2, #20]
}
   130e6:	46c0      	nop			; (mov r8, r8)
   130e8:	46bd      	mov	sp, r7
   130ea:	b004      	add	sp, #16
   130ec:	bd80      	pop	{r7, pc}
   130ee:	46c0      	nop			; (mov r8, r8)
   130f0:	40000800 	.word	0x40000800
   130f4:	200004f0 	.word	0x200004f0

000130f8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   130f8:	b580      	push	{r7, lr}
   130fa:	b082      	sub	sp, #8
   130fc:	af00      	add	r7, sp, #0
   130fe:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   13100:	687b      	ldr	r3, [r7, #4]
   13102:	7a1b      	ldrb	r3, [r3, #8]
   13104:	029b      	lsls	r3, r3, #10
   13106:	041b      	lsls	r3, r3, #16
   13108:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   1310a:	687b      	ldr	r3, [r7, #4]
   1310c:	895b      	ldrh	r3, [r3, #10]
   1310e:	059b      	lsls	r3, r3, #22
   13110:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   13112:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   13114:	4b2a      	ldr	r3, [pc, #168]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   13116:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   13118:	687b      	ldr	r3, [r7, #4]
   1311a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   1311c:	687b      	ldr	r3, [r7, #4]
   1311e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   13120:	4313      	orrs	r3, r2
   13122:	b2db      	uxtb	r3, r3
   13124:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   13126:	687b      	ldr	r3, [r7, #4]
   13128:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   1312a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   1312c:	687a      	ldr	r2, [r7, #4]
   1312e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   13130:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   13132:	687b      	ldr	r3, [r7, #4]
   13134:	785b      	ldrb	r3, [r3, #1]
   13136:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   13138:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   1313a:	4b21      	ldr	r3, [pc, #132]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   1313c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   1313e:	687b      	ldr	r3, [r7, #4]
   13140:	781b      	ldrb	r3, [r3, #0]
   13142:	2b04      	cmp	r3, #4
   13144:	d116      	bne.n	13174 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   13146:	687b      	ldr	r3, [r7, #4]
   13148:	7b1b      	ldrb	r3, [r3, #12]
   1314a:	069b      	lsls	r3, r3, #26
   1314c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   1314e:	687b      	ldr	r3, [r7, #4]
   13150:	89db      	ldrh	r3, [r3, #14]
   13152:	041b      	lsls	r3, r3, #16
   13154:	0019      	movs	r1, r3
   13156:	4b1b      	ldr	r3, [pc, #108]	; (131c4 <system_clock_source_dfll_set_config+0xcc>)
   13158:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1315a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   1315c:	687a      	ldr	r2, [r7, #4]
   1315e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   13160:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   13162:	4b17      	ldr	r3, [pc, #92]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   13164:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   13166:	4b16      	ldr	r3, [pc, #88]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   13168:	681b      	ldr	r3, [r3, #0]
   1316a:	687a      	ldr	r2, [r7, #4]
   1316c:	7812      	ldrb	r2, [r2, #0]
   1316e:	431a      	orrs	r2, r3
   13170:	4b13      	ldr	r3, [pc, #76]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   13172:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	781b      	ldrb	r3, [r3, #0]
   13178:	2b20      	cmp	r3, #32
   1317a:	d11c      	bne.n	131b6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1317c:	687b      	ldr	r3, [r7, #4]
   1317e:	7b1b      	ldrb	r3, [r3, #12]
   13180:	069b      	lsls	r3, r3, #26
   13182:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	89db      	ldrh	r3, [r3, #14]
   13188:	041b      	lsls	r3, r3, #16
   1318a:	0019      	movs	r1, r3
   1318c:	4b0d      	ldr	r3, [pc, #52]	; (131c4 <system_clock_source_dfll_set_config+0xcc>)
   1318e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   13190:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   13192:	687a      	ldr	r2, [r7, #4]
   13194:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   13196:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   13198:	4b09      	ldr	r3, [pc, #36]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   1319a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   1319c:	4b08      	ldr	r3, [pc, #32]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   1319e:	681b      	ldr	r3, [r3, #0]
   131a0:	687a      	ldr	r2, [r7, #4]
   131a2:	7812      	ldrb	r2, [r2, #0]
   131a4:	2104      	movs	r1, #4
   131a6:	430a      	orrs	r2, r1
   131a8:	b2d2      	uxtb	r2, r2
   131aa:	4313      	orrs	r3, r2
   131ac:	2280      	movs	r2, #128	; 0x80
   131ae:	00d2      	lsls	r2, r2, #3
   131b0:	431a      	orrs	r2, r3
   131b2:	4b03      	ldr	r3, [pc, #12]	; (131c0 <system_clock_source_dfll_set_config+0xc8>)
   131b4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   131b6:	46c0      	nop			; (mov r8, r8)
   131b8:	46bd      	mov	sp, r7
   131ba:	b002      	add	sp, #8
   131bc:	bd80      	pop	{r7, pc}
   131be:	46c0      	nop			; (mov r8, r8)
   131c0:	200004f0 	.word	0x200004f0
   131c4:	03ff0000 	.word	0x03ff0000

000131c8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   131c8:	b580      	push	{r7, lr}
   131ca:	b082      	sub	sp, #8
   131cc:	af00      	add	r7, sp, #0
   131ce:	0002      	movs	r2, r0
   131d0:	1dfb      	adds	r3, r7, #7
   131d2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   131d4:	1dfb      	adds	r3, r7, #7
   131d6:	781b      	ldrb	r3, [r3, #0]
   131d8:	2b08      	cmp	r3, #8
   131da:	d83b      	bhi.n	13254 <system_clock_source_enable+0x8c>
   131dc:	009a      	lsls	r2, r3, #2
   131de:	4b21      	ldr	r3, [pc, #132]	; (13264 <system_clock_source_enable+0x9c>)
   131e0:	18d3      	adds	r3, r2, r3
   131e2:	681b      	ldr	r3, [r3, #0]
   131e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   131e6:	4b20      	ldr	r3, [pc, #128]	; (13268 <system_clock_source_enable+0xa0>)
   131e8:	4a1f      	ldr	r2, [pc, #124]	; (13268 <system_clock_source_enable+0xa0>)
   131ea:	6a12      	ldr	r2, [r2, #32]
   131ec:	2102      	movs	r1, #2
   131ee:	430a      	orrs	r2, r1
   131f0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   131f2:	2300      	movs	r3, #0
   131f4:	e031      	b.n	1325a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   131f6:	4b1c      	ldr	r3, [pc, #112]	; (13268 <system_clock_source_enable+0xa0>)
   131f8:	4a1b      	ldr	r2, [pc, #108]	; (13268 <system_clock_source_enable+0xa0>)
   131fa:	6992      	ldr	r2, [r2, #24]
   131fc:	2102      	movs	r1, #2
   131fe:	430a      	orrs	r2, r1
   13200:	619a      	str	r2, [r3, #24]
		break;
   13202:	e029      	b.n	13258 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   13204:	4a18      	ldr	r2, [pc, #96]	; (13268 <system_clock_source_enable+0xa0>)
   13206:	4b18      	ldr	r3, [pc, #96]	; (13268 <system_clock_source_enable+0xa0>)
   13208:	8a1b      	ldrh	r3, [r3, #16]
   1320a:	b29b      	uxth	r3, r3
   1320c:	2102      	movs	r1, #2
   1320e:	430b      	orrs	r3, r1
   13210:	b29b      	uxth	r3, r3
   13212:	8213      	strh	r3, [r2, #16]
		break;
   13214:	e020      	b.n	13258 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   13216:	4a14      	ldr	r2, [pc, #80]	; (13268 <system_clock_source_enable+0xa0>)
   13218:	4b13      	ldr	r3, [pc, #76]	; (13268 <system_clock_source_enable+0xa0>)
   1321a:	8a9b      	ldrh	r3, [r3, #20]
   1321c:	b29b      	uxth	r3, r3
   1321e:	2102      	movs	r1, #2
   13220:	430b      	orrs	r3, r1
   13222:	b29b      	uxth	r3, r3
   13224:	8293      	strh	r3, [r2, #20]
		break;
   13226:	e017      	b.n	13258 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   13228:	4b10      	ldr	r3, [pc, #64]	; (1326c <system_clock_source_enable+0xa4>)
   1322a:	681b      	ldr	r3, [r3, #0]
   1322c:	2202      	movs	r2, #2
   1322e:	431a      	orrs	r2, r3
   13230:	4b0e      	ldr	r3, [pc, #56]	; (1326c <system_clock_source_enable+0xa4>)
   13232:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   13234:	4b0e      	ldr	r3, [pc, #56]	; (13270 <system_clock_source_enable+0xa8>)
   13236:	4798      	blx	r3
		break;
   13238:	e00e      	b.n	13258 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1323a:	4a0b      	ldr	r2, [pc, #44]	; (13268 <system_clock_source_enable+0xa0>)
   1323c:	490a      	ldr	r1, [pc, #40]	; (13268 <system_clock_source_enable+0xa0>)
   1323e:	2344      	movs	r3, #68	; 0x44
   13240:	5ccb      	ldrb	r3, [r1, r3]
   13242:	b2db      	uxtb	r3, r3
   13244:	2102      	movs	r1, #2
   13246:	430b      	orrs	r3, r1
   13248:	b2d9      	uxtb	r1, r3
   1324a:	2344      	movs	r3, #68	; 0x44
   1324c:	54d1      	strb	r1, [r2, r3]
		break;
   1324e:	e003      	b.n	13258 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   13250:	2300      	movs	r3, #0
   13252:	e002      	b.n	1325a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   13254:	2317      	movs	r3, #23
   13256:	e000      	b.n	1325a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   13258:	2300      	movs	r3, #0
}
   1325a:	0018      	movs	r0, r3
   1325c:	46bd      	mov	sp, r7
   1325e:	b002      	add	sp, #8
   13260:	bd80      	pop	{r7, pc}
   13262:	46c0      	nop			; (mov r8, r8)
   13264:	00019aa8 	.word	0x00019aa8
   13268:	40000800 	.word	0x40000800
   1326c:	200004f0 	.word	0x200004f0
   13270:	00012e5d 	.word	0x00012e5d

00013274 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   13274:	b580      	push	{r7, lr}
   13276:	b084      	sub	sp, #16
   13278:	af00      	add	r7, sp, #0
   1327a:	0002      	movs	r2, r0
   1327c:	1dfb      	adds	r3, r7, #7
   1327e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   13280:	2300      	movs	r3, #0
   13282:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   13284:	1dfb      	adds	r3, r7, #7
   13286:	781b      	ldrb	r3, [r3, #0]
   13288:	2b08      	cmp	r3, #8
   1328a:	d821      	bhi.n	132d0 <system_clock_source_is_ready+0x5c>
   1328c:	009a      	lsls	r2, r3, #2
   1328e:	4b18      	ldr	r3, [pc, #96]	; (132f0 <system_clock_source_is_ready+0x7c>)
   13290:	18d3      	adds	r3, r2, r3
   13292:	681b      	ldr	r3, [r3, #0]
   13294:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   13296:	2308      	movs	r3, #8
   13298:	60fb      	str	r3, [r7, #12]
		break;
   1329a:	e01b      	b.n	132d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1329c:	2304      	movs	r3, #4
   1329e:	60fb      	str	r3, [r7, #12]
		break;
   132a0:	e018      	b.n	132d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   132a2:	2301      	movs	r3, #1
   132a4:	60fb      	str	r3, [r7, #12]
		break;
   132a6:	e015      	b.n	132d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   132a8:	2302      	movs	r3, #2
   132aa:	60fb      	str	r3, [r7, #12]
		break;
   132ac:	e012      	b.n	132d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   132ae:	23d0      	movs	r3, #208	; 0xd0
   132b0:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   132b2:	e00f      	b.n	132d4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   132b4:	4a0f      	ldr	r2, [pc, #60]	; (132f4 <system_clock_source_is_ready+0x80>)
   132b6:	2350      	movs	r3, #80	; 0x50
   132b8:	5cd3      	ldrb	r3, [r2, r3]
   132ba:	b2db      	uxtb	r3, r3
   132bc:	001a      	movs	r2, r3
   132be:	2303      	movs	r3, #3
   132c0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   132c2:	3b03      	subs	r3, #3
   132c4:	425a      	negs	r2, r3
   132c6:	4153      	adcs	r3, r2
   132c8:	b2db      	uxtb	r3, r3
   132ca:	e00c      	b.n	132e6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   132cc:	2301      	movs	r3, #1
   132ce:	e00a      	b.n	132e6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   132d0:	2300      	movs	r3, #0
   132d2:	e008      	b.n	132e6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   132d4:	4b07      	ldr	r3, [pc, #28]	; (132f4 <system_clock_source_is_ready+0x80>)
   132d6:	68db      	ldr	r3, [r3, #12]
   132d8:	68fa      	ldr	r2, [r7, #12]
   132da:	401a      	ands	r2, r3
   132dc:	68fb      	ldr	r3, [r7, #12]
   132de:	1ad3      	subs	r3, r2, r3
   132e0:	425a      	negs	r2, r3
   132e2:	4153      	adcs	r3, r2
   132e4:	b2db      	uxtb	r3, r3
}
   132e6:	0018      	movs	r0, r3
   132e8:	46bd      	mov	sp, r7
   132ea:	b004      	add	sp, #16
   132ec:	bd80      	pop	{r7, pc}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	00019acc 	.word	0x00019acc
   132f4:	40000800 	.word	0x40000800

000132f8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   132f8:	b580      	push	{r7, lr}
   132fa:	b082      	sub	sp, #8
   132fc:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   132fe:	003b      	movs	r3, r7
   13300:	2202      	movs	r2, #2
   13302:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   13304:	2300      	movs	r3, #0
   13306:	607b      	str	r3, [r7, #4]
   13308:	e009      	b.n	1331e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1330a:	687b      	ldr	r3, [r7, #4]
   1330c:	b2db      	uxtb	r3, r3
   1330e:	003a      	movs	r2, r7
   13310:	0011      	movs	r1, r2
   13312:	0018      	movs	r0, r3
   13314:	4b05      	ldr	r3, [pc, #20]	; (1332c <_switch_peripheral_gclk+0x34>)
   13316:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	3301      	adds	r3, #1
   1331c:	607b      	str	r3, [r7, #4]
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	2b24      	cmp	r3, #36	; 0x24
   13322:	d9f2      	bls.n	1330a <_switch_peripheral_gclk+0x12>
	}
}
   13324:	46c0      	nop			; (mov r8, r8)
   13326:	46bd      	mov	sp, r7
   13328:	b002      	add	sp, #8
   1332a:	bd80      	pop	{r7, pc}
   1332c:	000139bd 	.word	0x000139bd

00013330 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   13330:	b580      	push	{r7, lr}
   13332:	b0aa      	sub	sp, #168	; 0xa8
   13334:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   13336:	4bc1      	ldr	r3, [pc, #772]	; (1363c <system_clock_init+0x30c>)
   13338:	22c2      	movs	r2, #194	; 0xc2
   1333a:	00d2      	lsls	r2, r2, #3
   1333c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   1333e:	2002      	movs	r0, #2
   13340:	4bbf      	ldr	r3, [pc, #764]	; (13640 <system_clock_init+0x310>)
   13342:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   13344:	4bbf      	ldr	r3, [pc, #764]	; (13644 <system_clock_init+0x314>)
   13346:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   13348:	2394      	movs	r3, #148	; 0x94
   1334a:	18fb      	adds	r3, r7, r3
   1334c:	0018      	movs	r0, r3
   1334e:	4bbe      	ldr	r3, [pc, #760]	; (13648 <system_clock_init+0x318>)
   13350:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   13352:	2394      	movs	r3, #148	; 0x94
   13354:	18fb      	adds	r3, r7, r3
   13356:	2280      	movs	r2, #128	; 0x80
   13358:	0212      	lsls	r2, r2, #8
   1335a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   1335c:	2394      	movs	r3, #148	; 0x94
   1335e:	18fb      	adds	r3, r7, r3
   13360:	2200      	movs	r2, #0
   13362:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   13364:	2394      	movs	r3, #148	; 0x94
   13366:	18fb      	adds	r3, r7, r3
   13368:	2206      	movs	r2, #6
   1336a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   1336c:	2394      	movs	r3, #148	; 0x94
   1336e:	18fb      	adds	r3, r7, r3
   13370:	2200      	movs	r2, #0
   13372:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   13374:	2394      	movs	r3, #148	; 0x94
   13376:	18fb      	adds	r3, r7, r3
   13378:	2200      	movs	r2, #0
   1337a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   1337c:	2394      	movs	r3, #148	; 0x94
   1337e:	18fb      	adds	r3, r7, r3
   13380:	2201      	movs	r2, #1
   13382:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   13384:	2394      	movs	r3, #148	; 0x94
   13386:	18fb      	adds	r3, r7, r3
   13388:	2200      	movs	r2, #0
   1338a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   1338c:	2394      	movs	r3, #148	; 0x94
   1338e:	18fb      	adds	r3, r7, r3
   13390:	2201      	movs	r2, #1
   13392:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   13394:	2394      	movs	r3, #148	; 0x94
   13396:	18fb      	adds	r3, r7, r3
   13398:	0018      	movs	r0, r3
   1339a:	4bac      	ldr	r3, [pc, #688]	; (1364c <system_clock_init+0x31c>)
   1339c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1339e:	2005      	movs	r0, #5
   133a0:	4bab      	ldr	r3, [pc, #684]	; (13650 <system_clock_init+0x320>)
   133a2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   133a4:	46c0      	nop			; (mov r8, r8)
   133a6:	2005      	movs	r0, #5
   133a8:	4baa      	ldr	r3, [pc, #680]	; (13654 <system_clock_init+0x324>)
   133aa:	4798      	blx	r3
   133ac:	0003      	movs	r3, r0
   133ae:	001a      	movs	r2, r3
   133b0:	2301      	movs	r3, #1
   133b2:	4053      	eors	r3, r2
   133b4:	b2db      	uxtb	r3, r3
   133b6:	2b00      	cmp	r3, #0
   133b8:	d1f5      	bne.n	133a6 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   133ba:	2380      	movs	r3, #128	; 0x80
   133bc:	18fb      	adds	r3, r7, r3
   133be:	0018      	movs	r0, r3
   133c0:	4ba5      	ldr	r3, [pc, #660]	; (13658 <system_clock_init+0x328>)
   133c2:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   133c4:	2380      	movs	r3, #128	; 0x80
   133c6:	18fb      	adds	r3, r7, r3
   133c8:	2204      	movs	r2, #4
   133ca:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   133cc:	2380      	movs	r3, #128	; 0x80
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	2200      	movs	r2, #0
   133d2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   133d4:	4ba1      	ldr	r3, [pc, #644]	; (1365c <system_clock_init+0x32c>)
   133d6:	681b      	ldr	r3, [r3, #0]
   133d8:	0e9b      	lsrs	r3, r3, #26
   133da:	22a4      	movs	r2, #164	; 0xa4
   133dc:	18ba      	adds	r2, r7, r2
   133de:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   133e0:	23a4      	movs	r3, #164	; 0xa4
   133e2:	18fb      	adds	r3, r7, r3
   133e4:	681b      	ldr	r3, [r3, #0]
   133e6:	2b3f      	cmp	r3, #63	; 0x3f
   133e8:	d103      	bne.n	133f2 <system_clock_init+0xc2>
		coarse = 0x1f;
   133ea:	231f      	movs	r3, #31
   133ec:	22a4      	movs	r2, #164	; 0xa4
   133ee:	18ba      	adds	r2, r7, r2
   133f0:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   133f2:	23a4      	movs	r3, #164	; 0xa4
   133f4:	18fb      	adds	r3, r7, r3
   133f6:	681b      	ldr	r3, [r3, #0]
   133f8:	b2da      	uxtb	r2, r3
   133fa:	2380      	movs	r3, #128	; 0x80
   133fc:	18fb      	adds	r3, r7, r3
   133fe:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   13400:	2380      	movs	r3, #128	; 0x80
   13402:	18fb      	adds	r3, r7, r3
   13404:	2200      	movs	r2, #0
   13406:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   13408:	2380      	movs	r3, #128	; 0x80
   1340a:	18fb      	adds	r3, r7, r3
   1340c:	2200      	movs	r2, #0
   1340e:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   13410:	2380      	movs	r3, #128	; 0x80
   13412:	18fb      	adds	r3, r7, r3
   13414:	2200      	movs	r2, #0
   13416:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   13418:	2380      	movs	r3, #128	; 0x80
   1341a:	18fb      	adds	r3, r7, r3
   1341c:	2200      	movs	r2, #0
   1341e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   13420:	2380      	movs	r3, #128	; 0x80
   13422:	18fb      	adds	r3, r7, r3
   13424:	22b7      	movs	r2, #183	; 0xb7
   13426:	00d2      	lsls	r2, r2, #3
   13428:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1342a:	2380      	movs	r3, #128	; 0x80
   1342c:	18fb      	adds	r3, r7, r3
   1342e:	2203      	movs	r2, #3
   13430:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   13432:	2380      	movs	r3, #128	; 0x80
   13434:	18fb      	adds	r3, r7, r3
   13436:	221f      	movs	r2, #31
   13438:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1343a:	2380      	movs	r3, #128	; 0x80
   1343c:	18fb      	adds	r3, r7, r3
   1343e:	0018      	movs	r0, r3
   13440:	4b87      	ldr	r3, [pc, #540]	; (13660 <system_clock_init+0x330>)
   13442:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   13444:	237c      	movs	r3, #124	; 0x7c
   13446:	18fb      	adds	r3, r7, r3
   13448:	0018      	movs	r0, r3
   1344a:	4b86      	ldr	r3, [pc, #536]	; (13664 <system_clock_init+0x334>)
   1344c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1344e:	237c      	movs	r3, #124	; 0x7c
   13450:	18fb      	adds	r3, r7, r3
   13452:	2200      	movs	r2, #0
   13454:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   13456:	237c      	movs	r3, #124	; 0x7c
   13458:	18fb      	adds	r3, r7, r3
   1345a:	2201      	movs	r2, #1
   1345c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   1345e:	237c      	movs	r3, #124	; 0x7c
   13460:	18fb      	adds	r3, r7, r3
   13462:	2201      	movs	r2, #1
   13464:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   13466:	237c      	movs	r3, #124	; 0x7c
   13468:	18fb      	adds	r3, r7, r3
   1346a:	0018      	movs	r0, r3
   1346c:	4b7e      	ldr	r3, [pc, #504]	; (13668 <system_clock_init+0x338>)
   1346e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   13470:	2006      	movs	r0, #6
   13472:	4b77      	ldr	r3, [pc, #476]	; (13650 <system_clock_init+0x320>)
   13474:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   13476:	4b7d      	ldr	r3, [pc, #500]	; (1366c <system_clock_init+0x33c>)
   13478:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1347a:	2364      	movs	r3, #100	; 0x64
   1347c:	18fb      	adds	r3, r7, r3
   1347e:	0018      	movs	r0, r3
   13480:	4b7b      	ldr	r3, [pc, #492]	; (13670 <system_clock_init+0x340>)
   13482:	4798      	blx	r3
   13484:	2364      	movs	r3, #100	; 0x64
   13486:	18fb      	adds	r3, r7, r3
   13488:	2205      	movs	r2, #5
   1348a:	701a      	strb	r2, [r3, #0]
   1348c:	2364      	movs	r3, #100	; 0x64
   1348e:	18fb      	adds	r3, r7, r3
   13490:	2201      	movs	r2, #1
   13492:	605a      	str	r2, [r3, #4]
   13494:	2364      	movs	r3, #100	; 0x64
   13496:	18fb      	adds	r3, r7, r3
   13498:	2200      	movs	r2, #0
   1349a:	721a      	strb	r2, [r3, #8]
   1349c:	2364      	movs	r3, #100	; 0x64
   1349e:	18fb      	adds	r3, r7, r3
   134a0:	2200      	movs	r2, #0
   134a2:	725a      	strb	r2, [r3, #9]
   134a4:	2364      	movs	r3, #100	; 0x64
   134a6:	18fb      	adds	r3, r7, r3
   134a8:	0019      	movs	r1, r3
   134aa:	2001      	movs	r0, #1
   134ac:	4b71      	ldr	r3, [pc, #452]	; (13674 <system_clock_init+0x344>)
   134ae:	4798      	blx	r3
   134b0:	2001      	movs	r0, #1
   134b2:	4b71      	ldr	r3, [pc, #452]	; (13678 <system_clock_init+0x348>)
   134b4:	4798      	blx	r3
   134b6:	234c      	movs	r3, #76	; 0x4c
   134b8:	18fb      	adds	r3, r7, r3
   134ba:	0018      	movs	r0, r3
   134bc:	4b6c      	ldr	r3, [pc, #432]	; (13670 <system_clock_init+0x340>)
   134be:	4798      	blx	r3
   134c0:	234c      	movs	r3, #76	; 0x4c
   134c2:	18fb      	adds	r3, r7, r3
   134c4:	2206      	movs	r2, #6
   134c6:	701a      	strb	r2, [r3, #0]
   134c8:	234c      	movs	r3, #76	; 0x4c
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	2201      	movs	r2, #1
   134ce:	605a      	str	r2, [r3, #4]
   134d0:	234c      	movs	r3, #76	; 0x4c
   134d2:	18fb      	adds	r3, r7, r3
   134d4:	2201      	movs	r2, #1
   134d6:	721a      	strb	r2, [r3, #8]
   134d8:	234c      	movs	r3, #76	; 0x4c
   134da:	18fb      	adds	r3, r7, r3
   134dc:	2200      	movs	r2, #0
   134de:	725a      	strb	r2, [r3, #9]
   134e0:	234c      	movs	r3, #76	; 0x4c
   134e2:	18fb      	adds	r3, r7, r3
   134e4:	0019      	movs	r1, r3
   134e6:	2003      	movs	r0, #3
   134e8:	4b62      	ldr	r3, [pc, #392]	; (13674 <system_clock_init+0x344>)
   134ea:	4798      	blx	r3
   134ec:	2003      	movs	r0, #3
   134ee:	4b62      	ldr	r3, [pc, #392]	; (13678 <system_clock_init+0x348>)
   134f0:	4798      	blx	r3
   134f2:	2340      	movs	r3, #64	; 0x40
   134f4:	18fb      	adds	r3, r7, r3
   134f6:	0018      	movs	r0, r3
   134f8:	4b5d      	ldr	r3, [pc, #372]	; (13670 <system_clock_init+0x340>)
   134fa:	4798      	blx	r3
   134fc:	2340      	movs	r3, #64	; 0x40
   134fe:	18fb      	adds	r3, r7, r3
   13500:	2203      	movs	r2, #3
   13502:	701a      	strb	r2, [r3, #0]
   13504:	2340      	movs	r3, #64	; 0x40
   13506:	18fb      	adds	r3, r7, r3
   13508:	2220      	movs	r2, #32
   1350a:	605a      	str	r2, [r3, #4]
   1350c:	2340      	movs	r3, #64	; 0x40
   1350e:	18fb      	adds	r3, r7, r3
   13510:	2200      	movs	r2, #0
   13512:	721a      	strb	r2, [r3, #8]
   13514:	2340      	movs	r3, #64	; 0x40
   13516:	18fb      	adds	r3, r7, r3
   13518:	2200      	movs	r2, #0
   1351a:	725a      	strb	r2, [r3, #9]
   1351c:	2340      	movs	r3, #64	; 0x40
   1351e:	18fb      	adds	r3, r7, r3
   13520:	0019      	movs	r1, r3
   13522:	2004      	movs	r0, #4
   13524:	4b53      	ldr	r3, [pc, #332]	; (13674 <system_clock_init+0x344>)
   13526:	4798      	blx	r3
   13528:	2004      	movs	r0, #4
   1352a:	4b53      	ldr	r3, [pc, #332]	; (13678 <system_clock_init+0x348>)
   1352c:	4798      	blx	r3
   1352e:	2334      	movs	r3, #52	; 0x34
   13530:	18fb      	adds	r3, r7, r3
   13532:	0018      	movs	r0, r3
   13534:	4b4e      	ldr	r3, [pc, #312]	; (13670 <system_clock_init+0x340>)
   13536:	4798      	blx	r3
   13538:	2334      	movs	r3, #52	; 0x34
   1353a:	18fb      	adds	r3, r7, r3
   1353c:	2207      	movs	r2, #7
   1353e:	701a      	strb	r2, [r3, #0]
   13540:	2334      	movs	r3, #52	; 0x34
   13542:	18fb      	adds	r3, r7, r3
   13544:	2201      	movs	r2, #1
   13546:	605a      	str	r2, [r3, #4]
   13548:	2334      	movs	r3, #52	; 0x34
   1354a:	18fb      	adds	r3, r7, r3
   1354c:	2200      	movs	r2, #0
   1354e:	721a      	strb	r2, [r3, #8]
   13550:	2334      	movs	r3, #52	; 0x34
   13552:	18fb      	adds	r3, r7, r3
   13554:	2200      	movs	r2, #0
   13556:	725a      	strb	r2, [r3, #9]
   13558:	2334      	movs	r3, #52	; 0x34
   1355a:	18fb      	adds	r3, r7, r3
   1355c:	0019      	movs	r1, r3
   1355e:	2005      	movs	r0, #5
   13560:	4b44      	ldr	r3, [pc, #272]	; (13674 <system_clock_init+0x344>)
   13562:	4798      	blx	r3
   13564:	2005      	movs	r0, #5
   13566:	4b44      	ldr	r3, [pc, #272]	; (13678 <system_clock_init+0x348>)
   13568:	4798      	blx	r3
   1356a:	2328      	movs	r3, #40	; 0x28
   1356c:	18fb      	adds	r3, r7, r3
   1356e:	0018      	movs	r0, r3
   13570:	4b3f      	ldr	r3, [pc, #252]	; (13670 <system_clock_init+0x340>)
   13572:	4798      	blx	r3
   13574:	2328      	movs	r3, #40	; 0x28
   13576:	18fb      	adds	r3, r7, r3
   13578:	2206      	movs	r2, #6
   1357a:	701a      	strb	r2, [r3, #0]
   1357c:	2328      	movs	r3, #40	; 0x28
   1357e:	18fb      	adds	r3, r7, r3
   13580:	2201      	movs	r2, #1
   13582:	605a      	str	r2, [r3, #4]
   13584:	2328      	movs	r3, #40	; 0x28
   13586:	18fb      	adds	r3, r7, r3
   13588:	2201      	movs	r2, #1
   1358a:	721a      	strb	r2, [r3, #8]
   1358c:	2328      	movs	r3, #40	; 0x28
   1358e:	18fb      	adds	r3, r7, r3
   13590:	2200      	movs	r2, #0
   13592:	725a      	strb	r2, [r3, #9]
   13594:	2328      	movs	r3, #40	; 0x28
   13596:	18fb      	adds	r3, r7, r3
   13598:	0019      	movs	r1, r3
   1359a:	2006      	movs	r0, #6
   1359c:	4b35      	ldr	r3, [pc, #212]	; (13674 <system_clock_init+0x344>)
   1359e:	4798      	blx	r3
   135a0:	2006      	movs	r0, #6
   135a2:	4b35      	ldr	r3, [pc, #212]	; (13678 <system_clock_init+0x348>)
   135a4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   135a6:	230c      	movs	r3, #12
   135a8:	18fb      	adds	r3, r7, r3
   135aa:	0018      	movs	r0, r3
   135ac:	4b33      	ldr	r3, [pc, #204]	; (1367c <system_clock_init+0x34c>)
   135ae:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   135b0:	230c      	movs	r3, #12
   135b2:	18fb      	adds	r3, r7, r3
   135b4:	2201      	movs	r2, #1
   135b6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   135b8:	230c      	movs	r3, #12
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	0019      	movs	r1, r3
   135be:	2000      	movs	r0, #0
   135c0:	4b2f      	ldr	r3, [pc, #188]	; (13680 <system_clock_init+0x350>)
   135c2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   135c4:	2000      	movs	r0, #0
   135c6:	4b2f      	ldr	r3, [pc, #188]	; (13684 <system_clock_init+0x354>)
   135c8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   135ca:	2007      	movs	r0, #7
   135cc:	4b20      	ldr	r3, [pc, #128]	; (13650 <system_clock_init+0x320>)
   135ce:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   135d0:	46c0      	nop			; (mov r8, r8)
   135d2:	2007      	movs	r0, #7
   135d4:	4b1f      	ldr	r3, [pc, #124]	; (13654 <system_clock_init+0x324>)
   135d6:	4798      	blx	r3
   135d8:	0003      	movs	r3, r0
   135da:	001a      	movs	r2, r3
   135dc:	2301      	movs	r3, #1
   135de:	4053      	eors	r3, r2
   135e0:	b2db      	uxtb	r3, r3
   135e2:	2b00      	cmp	r3, #0
   135e4:	d1f5      	bne.n	135d2 <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   135e6:	2000      	movs	r0, #0
   135e8:	4b27      	ldr	r3, [pc, #156]	; (13688 <system_clock_init+0x358>)
   135ea:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   135ec:	2100      	movs	r1, #0
   135ee:	2000      	movs	r0, #0
   135f0:	4b26      	ldr	r3, [pc, #152]	; (1368c <system_clock_init+0x35c>)
   135f2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   135f4:	2100      	movs	r1, #0
   135f6:	2001      	movs	r0, #1
   135f8:	4b24      	ldr	r3, [pc, #144]	; (1368c <system_clock_init+0x35c>)
   135fa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   135fc:	2100      	movs	r1, #0
   135fe:	2002      	movs	r0, #2
   13600:	4b22      	ldr	r3, [pc, #136]	; (1368c <system_clock_init+0x35c>)
   13602:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   13604:	003b      	movs	r3, r7
   13606:	0018      	movs	r0, r3
   13608:	4b19      	ldr	r3, [pc, #100]	; (13670 <system_clock_init+0x340>)
   1360a:	4798      	blx	r3
   1360c:	003b      	movs	r3, r7
   1360e:	2207      	movs	r2, #7
   13610:	701a      	strb	r2, [r3, #0]
   13612:	003b      	movs	r3, r7
   13614:	2201      	movs	r2, #1
   13616:	605a      	str	r2, [r3, #4]
   13618:	003b      	movs	r3, r7
   1361a:	2200      	movs	r2, #0
   1361c:	721a      	strb	r2, [r3, #8]
   1361e:	003b      	movs	r3, r7
   13620:	2200      	movs	r2, #0
   13622:	725a      	strb	r2, [r3, #9]
   13624:	003b      	movs	r3, r7
   13626:	0019      	movs	r1, r3
   13628:	2000      	movs	r0, #0
   1362a:	4b12      	ldr	r3, [pc, #72]	; (13674 <system_clock_init+0x344>)
   1362c:	4798      	blx	r3
   1362e:	2000      	movs	r0, #0
   13630:	4b11      	ldr	r3, [pc, #68]	; (13678 <system_clock_init+0x348>)
   13632:	4798      	blx	r3
#endif
}
   13634:	46c0      	nop			; (mov r8, r8)
   13636:	46bd      	mov	sp, r7
   13638:	b02a      	add	sp, #168	; 0xa8
   1363a:	bd80      	pop	{r7, pc}
   1363c:	40000800 	.word	0x40000800
   13640:	00012e0d 	.word	0x00012e0d
   13644:	000132f9 	.word	0x000132f9
   13648:	00012cdd 	.word	0x00012cdd
   1364c:	00012fd9 	.word	0x00012fd9
   13650:	000131c9 	.word	0x000131c9
   13654:	00013275 	.word	0x00013275
   13658:	00012d47 	.word	0x00012d47
   1365c:	00806024 	.word	0x00806024
   13660:	000130f9 	.word	0x000130f9
   13664:	00012d25 	.word	0x00012d25
   13668:	00012f61 	.word	0x00012f61
   1366c:	00013735 	.word	0x00013735
   13670:	00012c99 	.word	0x00012c99
   13674:	00013765 	.word	0x00013765
   13678:	00013889 	.word	0x00013889
   1367c:	00012cc7 	.word	0x00012cc7
   13680:	000139bd 	.word	0x000139bd
   13684:	00013a01 	.word	0x00013a01
   13688:	00012d99 	.word	0x00012d99
   1368c:	00012db9 	.word	0x00012db9

00013690 <system_apb_clock_set_mask>:
{
   13690:	b580      	push	{r7, lr}
   13692:	b082      	sub	sp, #8
   13694:	af00      	add	r7, sp, #0
   13696:	0002      	movs	r2, r0
   13698:	6039      	str	r1, [r7, #0]
   1369a:	1dfb      	adds	r3, r7, #7
   1369c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1369e:	1dfb      	adds	r3, r7, #7
   136a0:	781b      	ldrb	r3, [r3, #0]
   136a2:	2b01      	cmp	r3, #1
   136a4:	d00a      	beq.n	136bc <system_apb_clock_set_mask+0x2c>
   136a6:	2b02      	cmp	r3, #2
   136a8:	d00f      	beq.n	136ca <system_apb_clock_set_mask+0x3a>
   136aa:	2b00      	cmp	r3, #0
   136ac:	d114      	bne.n	136d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   136ae:	4b0e      	ldr	r3, [pc, #56]	; (136e8 <system_apb_clock_set_mask+0x58>)
   136b0:	4a0d      	ldr	r2, [pc, #52]	; (136e8 <system_apb_clock_set_mask+0x58>)
   136b2:	6991      	ldr	r1, [r2, #24]
   136b4:	683a      	ldr	r2, [r7, #0]
   136b6:	430a      	orrs	r2, r1
   136b8:	619a      	str	r2, [r3, #24]
			break;
   136ba:	e00f      	b.n	136dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   136bc:	4b0a      	ldr	r3, [pc, #40]	; (136e8 <system_apb_clock_set_mask+0x58>)
   136be:	4a0a      	ldr	r2, [pc, #40]	; (136e8 <system_apb_clock_set_mask+0x58>)
   136c0:	69d1      	ldr	r1, [r2, #28]
   136c2:	683a      	ldr	r2, [r7, #0]
   136c4:	430a      	orrs	r2, r1
   136c6:	61da      	str	r2, [r3, #28]
			break;
   136c8:	e008      	b.n	136dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   136ca:	4b07      	ldr	r3, [pc, #28]	; (136e8 <system_apb_clock_set_mask+0x58>)
   136cc:	4a06      	ldr	r2, [pc, #24]	; (136e8 <system_apb_clock_set_mask+0x58>)
   136ce:	6a11      	ldr	r1, [r2, #32]
   136d0:	683a      	ldr	r2, [r7, #0]
   136d2:	430a      	orrs	r2, r1
   136d4:	621a      	str	r2, [r3, #32]
			break;
   136d6:	e001      	b.n	136dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   136d8:	2317      	movs	r3, #23
   136da:	e000      	b.n	136de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   136dc:	2300      	movs	r3, #0
}
   136de:	0018      	movs	r0, r3
   136e0:	46bd      	mov	sp, r7
   136e2:	b002      	add	sp, #8
   136e4:	bd80      	pop	{r7, pc}
   136e6:	46c0      	nop			; (mov r8, r8)
   136e8:	40000400 	.word	0x40000400

000136ec <system_interrupt_enter_critical_section>:
{
   136ec:	b580      	push	{r7, lr}
   136ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   136f0:	4b02      	ldr	r3, [pc, #8]	; (136fc <system_interrupt_enter_critical_section+0x10>)
   136f2:	4798      	blx	r3
}
   136f4:	46c0      	nop			; (mov r8, r8)
   136f6:	46bd      	mov	sp, r7
   136f8:	bd80      	pop	{r7, pc}
   136fa:	46c0      	nop			; (mov r8, r8)
   136fc:	00012c05 	.word	0x00012c05

00013700 <system_interrupt_leave_critical_section>:
{
   13700:	b580      	push	{r7, lr}
   13702:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13704:	4b02      	ldr	r3, [pc, #8]	; (13710 <system_interrupt_leave_critical_section+0x10>)
   13706:	4798      	blx	r3
}
   13708:	46c0      	nop			; (mov r8, r8)
   1370a:	46bd      	mov	sp, r7
   1370c:	bd80      	pop	{r7, pc}
   1370e:	46c0      	nop			; (mov r8, r8)
   13710:	00012c59 	.word	0x00012c59

00013714 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   13714:	b580      	push	{r7, lr}
   13716:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   13718:	4b05      	ldr	r3, [pc, #20]	; (13730 <system_gclk_is_syncing+0x1c>)
   1371a:	785b      	ldrb	r3, [r3, #1]
   1371c:	b2db      	uxtb	r3, r3
   1371e:	b25b      	sxtb	r3, r3
   13720:	2b00      	cmp	r3, #0
   13722:	da01      	bge.n	13728 <system_gclk_is_syncing+0x14>
		return true;
   13724:	2301      	movs	r3, #1
   13726:	e000      	b.n	1372a <system_gclk_is_syncing+0x16>
	}

	return false;
   13728:	2300      	movs	r3, #0
}
   1372a:	0018      	movs	r0, r3
   1372c:	46bd      	mov	sp, r7
   1372e:	bd80      	pop	{r7, pc}
   13730:	40000c00 	.word	0x40000c00

00013734 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   13734:	b580      	push	{r7, lr}
   13736:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   13738:	2108      	movs	r1, #8
   1373a:	2000      	movs	r0, #0
   1373c:	4b07      	ldr	r3, [pc, #28]	; (1375c <system_gclk_init+0x28>)
   1373e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   13740:	4b07      	ldr	r3, [pc, #28]	; (13760 <system_gclk_init+0x2c>)
   13742:	2201      	movs	r2, #1
   13744:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   13746:	46c0      	nop			; (mov r8, r8)
   13748:	4b05      	ldr	r3, [pc, #20]	; (13760 <system_gclk_init+0x2c>)
   1374a:	781b      	ldrb	r3, [r3, #0]
   1374c:	b2db      	uxtb	r3, r3
   1374e:	001a      	movs	r2, r3
   13750:	2301      	movs	r3, #1
   13752:	4013      	ands	r3, r2
   13754:	d1f8      	bne.n	13748 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   13756:	46c0      	nop			; (mov r8, r8)
   13758:	46bd      	mov	sp, r7
   1375a:	bd80      	pop	{r7, pc}
   1375c:	00013691 	.word	0x00013691
   13760:	40000c00 	.word	0x40000c00

00013764 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   13764:	b580      	push	{r7, lr}
   13766:	b086      	sub	sp, #24
   13768:	af00      	add	r7, sp, #0
   1376a:	0002      	movs	r2, r0
   1376c:	6039      	str	r1, [r7, #0]
   1376e:	1dfb      	adds	r3, r7, #7
   13770:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   13772:	1dfb      	adds	r3, r7, #7
   13774:	781b      	ldrb	r3, [r3, #0]
   13776:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   13778:	1dfb      	adds	r3, r7, #7
   1377a:	781b      	ldrb	r3, [r3, #0]
   1377c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1377e:	683b      	ldr	r3, [r7, #0]
   13780:	781b      	ldrb	r3, [r3, #0]
   13782:	021b      	lsls	r3, r3, #8
   13784:	001a      	movs	r2, r3
   13786:	697b      	ldr	r3, [r7, #20]
   13788:	4313      	orrs	r3, r2
   1378a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1378c:	683b      	ldr	r3, [r7, #0]
   1378e:	785b      	ldrb	r3, [r3, #1]
   13790:	2b00      	cmp	r3, #0
   13792:	d004      	beq.n	1379e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   13794:	697b      	ldr	r3, [r7, #20]
   13796:	2280      	movs	r2, #128	; 0x80
   13798:	02d2      	lsls	r2, r2, #11
   1379a:	4313      	orrs	r3, r2
   1379c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1379e:	683b      	ldr	r3, [r7, #0]
   137a0:	7a5b      	ldrb	r3, [r3, #9]
   137a2:	2b00      	cmp	r3, #0
   137a4:	d004      	beq.n	137b0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   137a6:	697b      	ldr	r3, [r7, #20]
   137a8:	2280      	movs	r2, #128	; 0x80
   137aa:	0312      	lsls	r2, r2, #12
   137ac:	4313      	orrs	r3, r2
   137ae:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   137b0:	683b      	ldr	r3, [r7, #0]
   137b2:	685b      	ldr	r3, [r3, #4]
   137b4:	2b01      	cmp	r3, #1
   137b6:	d92c      	bls.n	13812 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   137b8:	683b      	ldr	r3, [r7, #0]
   137ba:	685a      	ldr	r2, [r3, #4]
   137bc:	683b      	ldr	r3, [r7, #0]
   137be:	685b      	ldr	r3, [r3, #4]
   137c0:	3b01      	subs	r3, #1
   137c2:	4013      	ands	r3, r2
   137c4:	d11a      	bne.n	137fc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   137c6:	2300      	movs	r3, #0
   137c8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   137ca:	2302      	movs	r3, #2
   137cc:	60bb      	str	r3, [r7, #8]
   137ce:	e005      	b.n	137dc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   137d0:	68fb      	ldr	r3, [r7, #12]
   137d2:	3301      	adds	r3, #1
   137d4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   137d6:	68bb      	ldr	r3, [r7, #8]
   137d8:	005b      	lsls	r3, r3, #1
   137da:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   137dc:	683b      	ldr	r3, [r7, #0]
   137de:	685a      	ldr	r2, [r3, #4]
   137e0:	68bb      	ldr	r3, [r7, #8]
   137e2:	429a      	cmp	r2, r3
   137e4:	d8f4      	bhi.n	137d0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   137e6:	68fb      	ldr	r3, [r7, #12]
   137e8:	021b      	lsls	r3, r3, #8
   137ea:	693a      	ldr	r2, [r7, #16]
   137ec:	4313      	orrs	r3, r2
   137ee:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   137f0:	697b      	ldr	r3, [r7, #20]
   137f2:	2280      	movs	r2, #128	; 0x80
   137f4:	0352      	lsls	r2, r2, #13
   137f6:	4313      	orrs	r3, r2
   137f8:	617b      	str	r3, [r7, #20]
   137fa:	e00a      	b.n	13812 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   137fc:	683b      	ldr	r3, [r7, #0]
   137fe:	685b      	ldr	r3, [r3, #4]
   13800:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   13802:	693a      	ldr	r2, [r7, #16]
   13804:	4313      	orrs	r3, r2
   13806:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   13808:	697b      	ldr	r3, [r7, #20]
   1380a:	2280      	movs	r2, #128	; 0x80
   1380c:	0292      	lsls	r2, r2, #10
   1380e:	4313      	orrs	r3, r2
   13810:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   13812:	683b      	ldr	r3, [r7, #0]
   13814:	7a1b      	ldrb	r3, [r3, #8]
   13816:	2b00      	cmp	r3, #0
   13818:	d004      	beq.n	13824 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1381a:	697b      	ldr	r3, [r7, #20]
   1381c:	2280      	movs	r2, #128	; 0x80
   1381e:	0392      	lsls	r2, r2, #14
   13820:	4313      	orrs	r3, r2
   13822:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   13824:	46c0      	nop			; (mov r8, r8)
   13826:	4b13      	ldr	r3, [pc, #76]	; (13874 <system_gclk_gen_set_config+0x110>)
   13828:	4798      	blx	r3
   1382a:	1e03      	subs	r3, r0, #0
   1382c:	d1fb      	bne.n	13826 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1382e:	4b12      	ldr	r3, [pc, #72]	; (13878 <system_gclk_gen_set_config+0x114>)
   13830:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   13832:	4a12      	ldr	r2, [pc, #72]	; (1387c <system_gclk_gen_set_config+0x118>)
   13834:	1dfb      	adds	r3, r7, #7
   13836:	781b      	ldrb	r3, [r3, #0]
   13838:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1383a:	46c0      	nop			; (mov r8, r8)
   1383c:	4b0d      	ldr	r3, [pc, #52]	; (13874 <system_gclk_gen_set_config+0x110>)
   1383e:	4798      	blx	r3
   13840:	1e03      	subs	r3, r0, #0
   13842:	d1fb      	bne.n	1383c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   13844:	4b0e      	ldr	r3, [pc, #56]	; (13880 <system_gclk_gen_set_config+0x11c>)
   13846:	693a      	ldr	r2, [r7, #16]
   13848:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1384a:	46c0      	nop			; (mov r8, r8)
   1384c:	4b09      	ldr	r3, [pc, #36]	; (13874 <system_gclk_gen_set_config+0x110>)
   1384e:	4798      	blx	r3
   13850:	1e03      	subs	r3, r0, #0
   13852:	d1fb      	bne.n	1384c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   13854:	4b0a      	ldr	r3, [pc, #40]	; (13880 <system_gclk_gen_set_config+0x11c>)
   13856:	4a0a      	ldr	r2, [pc, #40]	; (13880 <system_gclk_gen_set_config+0x11c>)
   13858:	6851      	ldr	r1, [r2, #4]
   1385a:	2280      	movs	r2, #128	; 0x80
   1385c:	0252      	lsls	r2, r2, #9
   1385e:	4011      	ands	r1, r2
   13860:	697a      	ldr	r2, [r7, #20]
   13862:	430a      	orrs	r2, r1
   13864:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13866:	4b07      	ldr	r3, [pc, #28]	; (13884 <system_gclk_gen_set_config+0x120>)
   13868:	4798      	blx	r3
}
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	46bd      	mov	sp, r7
   1386e:	b006      	add	sp, #24
   13870:	bd80      	pop	{r7, pc}
   13872:	46c0      	nop			; (mov r8, r8)
   13874:	00013715 	.word	0x00013715
   13878:	000136ed 	.word	0x000136ed
   1387c:	40000c08 	.word	0x40000c08
   13880:	40000c00 	.word	0x40000c00
   13884:	00013701 	.word	0x00013701

00013888 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   13888:	b580      	push	{r7, lr}
   1388a:	b082      	sub	sp, #8
   1388c:	af00      	add	r7, sp, #0
   1388e:	0002      	movs	r2, r0
   13890:	1dfb      	adds	r3, r7, #7
   13892:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13894:	46c0      	nop			; (mov r8, r8)
   13896:	4b0e      	ldr	r3, [pc, #56]	; (138d0 <system_gclk_gen_enable+0x48>)
   13898:	4798      	blx	r3
   1389a:	1e03      	subs	r3, r0, #0
   1389c:	d1fb      	bne.n	13896 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1389e:	4b0d      	ldr	r3, [pc, #52]	; (138d4 <system_gclk_gen_enable+0x4c>)
   138a0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   138a2:	4a0d      	ldr	r2, [pc, #52]	; (138d8 <system_gclk_gen_enable+0x50>)
   138a4:	1dfb      	adds	r3, r7, #7
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   138aa:	46c0      	nop			; (mov r8, r8)
   138ac:	4b08      	ldr	r3, [pc, #32]	; (138d0 <system_gclk_gen_enable+0x48>)
   138ae:	4798      	blx	r3
   138b0:	1e03      	subs	r3, r0, #0
   138b2:	d1fb      	bne.n	138ac <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   138b4:	4b09      	ldr	r3, [pc, #36]	; (138dc <system_gclk_gen_enable+0x54>)
   138b6:	4a09      	ldr	r2, [pc, #36]	; (138dc <system_gclk_gen_enable+0x54>)
   138b8:	6852      	ldr	r2, [r2, #4]
   138ba:	2180      	movs	r1, #128	; 0x80
   138bc:	0249      	lsls	r1, r1, #9
   138be:	430a      	orrs	r2, r1
   138c0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   138c2:	4b07      	ldr	r3, [pc, #28]	; (138e0 <system_gclk_gen_enable+0x58>)
   138c4:	4798      	blx	r3
}
   138c6:	46c0      	nop			; (mov r8, r8)
   138c8:	46bd      	mov	sp, r7
   138ca:	b002      	add	sp, #8
   138cc:	bd80      	pop	{r7, pc}
   138ce:	46c0      	nop			; (mov r8, r8)
   138d0:	00013715 	.word	0x00013715
   138d4:	000136ed 	.word	0x000136ed
   138d8:	40000c04 	.word	0x40000c04
   138dc:	40000c00 	.word	0x40000c00
   138e0:	00013701 	.word	0x00013701

000138e4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   138e4:	b580      	push	{r7, lr}
   138e6:	b086      	sub	sp, #24
   138e8:	af00      	add	r7, sp, #0
   138ea:	0002      	movs	r2, r0
   138ec:	1dfb      	adds	r3, r7, #7
   138ee:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   138f0:	46c0      	nop			; (mov r8, r8)
   138f2:	4b2a      	ldr	r3, [pc, #168]	; (1399c <system_gclk_gen_get_hz+0xb8>)
   138f4:	4798      	blx	r3
   138f6:	1e03      	subs	r3, r0, #0
   138f8:	d1fb      	bne.n	138f2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   138fa:	4b29      	ldr	r3, [pc, #164]	; (139a0 <system_gclk_gen_get_hz+0xbc>)
   138fc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   138fe:	4a29      	ldr	r2, [pc, #164]	; (139a4 <system_gclk_gen_get_hz+0xc0>)
   13900:	1dfb      	adds	r3, r7, #7
   13902:	781b      	ldrb	r3, [r3, #0]
   13904:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   13906:	46c0      	nop			; (mov r8, r8)
   13908:	4b24      	ldr	r3, [pc, #144]	; (1399c <system_gclk_gen_get_hz+0xb8>)
   1390a:	4798      	blx	r3
   1390c:	1e03      	subs	r3, r0, #0
   1390e:	d1fb      	bne.n	13908 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   13910:	4b25      	ldr	r3, [pc, #148]	; (139a8 <system_gclk_gen_get_hz+0xc4>)
   13912:	685b      	ldr	r3, [r3, #4]
   13914:	04db      	lsls	r3, r3, #19
   13916:	0edb      	lsrs	r3, r3, #27
   13918:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1391a:	0018      	movs	r0, r3
   1391c:	4b23      	ldr	r3, [pc, #140]	; (139ac <system_gclk_gen_get_hz+0xc8>)
   1391e:	4798      	blx	r3
   13920:	0003      	movs	r3, r0
   13922:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13924:	4a1f      	ldr	r2, [pc, #124]	; (139a4 <system_gclk_gen_get_hz+0xc0>)
   13926:	1dfb      	adds	r3, r7, #7
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1392c:	4b1e      	ldr	r3, [pc, #120]	; (139a8 <system_gclk_gen_get_hz+0xc4>)
   1392e:	685b      	ldr	r3, [r3, #4]
   13930:	02db      	lsls	r3, r3, #11
   13932:	0fdb      	lsrs	r3, r3, #31
   13934:	b2da      	uxtb	r2, r3
   13936:	2313      	movs	r3, #19
   13938:	18fb      	adds	r3, r7, r3
   1393a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1393c:	4a1c      	ldr	r2, [pc, #112]	; (139b0 <system_gclk_gen_get_hz+0xcc>)
   1393e:	1dfb      	adds	r3, r7, #7
   13940:	781b      	ldrb	r3, [r3, #0]
   13942:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   13944:	46c0      	nop			; (mov r8, r8)
   13946:	4b15      	ldr	r3, [pc, #84]	; (1399c <system_gclk_gen_get_hz+0xb8>)
   13948:	4798      	blx	r3
   1394a:	1e03      	subs	r3, r0, #0
   1394c:	d1fb      	bne.n	13946 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1394e:	4b16      	ldr	r3, [pc, #88]	; (139a8 <system_gclk_gen_get_hz+0xc4>)
   13950:	689b      	ldr	r3, [r3, #8]
   13952:	021b      	lsls	r3, r3, #8
   13954:	0c1b      	lsrs	r3, r3, #16
   13956:	b29b      	uxth	r3, r3
   13958:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1395a:	4b16      	ldr	r3, [pc, #88]	; (139b4 <system_gclk_gen_get_hz+0xd0>)
   1395c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1395e:	2313      	movs	r3, #19
   13960:	18fb      	adds	r3, r7, r3
   13962:	781b      	ldrb	r3, [r3, #0]
   13964:	2b00      	cmp	r3, #0
   13966:	d109      	bne.n	1397c <system_gclk_gen_get_hz+0x98>
   13968:	68fb      	ldr	r3, [r7, #12]
   1396a:	2b01      	cmp	r3, #1
   1396c:	d906      	bls.n	1397c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1396e:	4b12      	ldr	r3, [pc, #72]	; (139b8 <system_gclk_gen_get_hz+0xd4>)
   13970:	68f9      	ldr	r1, [r7, #12]
   13972:	6978      	ldr	r0, [r7, #20]
   13974:	4798      	blx	r3
   13976:	0003      	movs	r3, r0
   13978:	617b      	str	r3, [r7, #20]
   1397a:	e00a      	b.n	13992 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1397c:	2313      	movs	r3, #19
   1397e:	18fb      	adds	r3, r7, r3
   13980:	781b      	ldrb	r3, [r3, #0]
   13982:	2b00      	cmp	r3, #0
   13984:	d005      	beq.n	13992 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   13986:	68fb      	ldr	r3, [r7, #12]
   13988:	3301      	adds	r3, #1
   1398a:	697a      	ldr	r2, [r7, #20]
   1398c:	40da      	lsrs	r2, r3
   1398e:	0013      	movs	r3, r2
   13990:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   13992:	697b      	ldr	r3, [r7, #20]
}
   13994:	0018      	movs	r0, r3
   13996:	46bd      	mov	sp, r7
   13998:	b006      	add	sp, #24
   1399a:	bd80      	pop	{r7, pc}
   1399c:	00013715 	.word	0x00013715
   139a0:	000136ed 	.word	0x000136ed
   139a4:	40000c04 	.word	0x40000c04
   139a8:	40000c00 	.word	0x40000c00
   139ac:	00012ea1 	.word	0x00012ea1
   139b0:	40000c08 	.word	0x40000c08
   139b4:	00013701 	.word	0x00013701
   139b8:	000154f1 	.word	0x000154f1

000139bc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   139bc:	b580      	push	{r7, lr}
   139be:	b084      	sub	sp, #16
   139c0:	af00      	add	r7, sp, #0
   139c2:	0002      	movs	r2, r0
   139c4:	6039      	str	r1, [r7, #0]
   139c6:	1dfb      	adds	r3, r7, #7
   139c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   139ca:	1dfb      	adds	r3, r7, #7
   139cc:	781b      	ldrb	r3, [r3, #0]
   139ce:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   139d0:	683b      	ldr	r3, [r7, #0]
   139d2:	781b      	ldrb	r3, [r3, #0]
   139d4:	021b      	lsls	r3, r3, #8
   139d6:	001a      	movs	r2, r3
   139d8:	68fb      	ldr	r3, [r7, #12]
   139da:	4313      	orrs	r3, r2
   139dc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   139de:	1dfb      	adds	r3, r7, #7
   139e0:	781b      	ldrb	r3, [r3, #0]
   139e2:	0018      	movs	r0, r3
   139e4:	4b04      	ldr	r3, [pc, #16]	; (139f8 <system_gclk_chan_set_config+0x3c>)
   139e6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   139e8:	4b04      	ldr	r3, [pc, #16]	; (139fc <system_gclk_chan_set_config+0x40>)
   139ea:	68fa      	ldr	r2, [r7, #12]
   139ec:	b292      	uxth	r2, r2
   139ee:	805a      	strh	r2, [r3, #2]
}
   139f0:	46c0      	nop			; (mov r8, r8)
   139f2:	46bd      	mov	sp, r7
   139f4:	b004      	add	sp, #16
   139f6:	bd80      	pop	{r7, pc}
   139f8:	00013a49 	.word	0x00013a49
   139fc:	40000c00 	.word	0x40000c00

00013a00 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   13a00:	b580      	push	{r7, lr}
   13a02:	b082      	sub	sp, #8
   13a04:	af00      	add	r7, sp, #0
   13a06:	0002      	movs	r2, r0
   13a08:	1dfb      	adds	r3, r7, #7
   13a0a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   13a0c:	4b0a      	ldr	r3, [pc, #40]	; (13a38 <system_gclk_chan_enable+0x38>)
   13a0e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13a10:	4a0a      	ldr	r2, [pc, #40]	; (13a3c <system_gclk_chan_enable+0x3c>)
   13a12:	1dfb      	adds	r3, r7, #7
   13a14:	781b      	ldrb	r3, [r3, #0]
   13a16:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   13a18:	4909      	ldr	r1, [pc, #36]	; (13a40 <system_gclk_chan_enable+0x40>)
   13a1a:	4b09      	ldr	r3, [pc, #36]	; (13a40 <system_gclk_chan_enable+0x40>)
   13a1c:	885b      	ldrh	r3, [r3, #2]
   13a1e:	b29b      	uxth	r3, r3
   13a20:	2280      	movs	r2, #128	; 0x80
   13a22:	01d2      	lsls	r2, r2, #7
   13a24:	4313      	orrs	r3, r2
   13a26:	b29b      	uxth	r3, r3
   13a28:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   13a2a:	4b06      	ldr	r3, [pc, #24]	; (13a44 <system_gclk_chan_enable+0x44>)
   13a2c:	4798      	blx	r3
}
   13a2e:	46c0      	nop			; (mov r8, r8)
   13a30:	46bd      	mov	sp, r7
   13a32:	b002      	add	sp, #8
   13a34:	bd80      	pop	{r7, pc}
   13a36:	46c0      	nop			; (mov r8, r8)
   13a38:	000136ed 	.word	0x000136ed
   13a3c:	40000c02 	.word	0x40000c02
   13a40:	40000c00 	.word	0x40000c00
   13a44:	00013701 	.word	0x00013701

00013a48 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   13a48:	b580      	push	{r7, lr}
   13a4a:	b084      	sub	sp, #16
   13a4c:	af00      	add	r7, sp, #0
   13a4e:	0002      	movs	r2, r0
   13a50:	1dfb      	adds	r3, r7, #7
   13a52:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   13a54:	4b1c      	ldr	r3, [pc, #112]	; (13ac8 <system_gclk_chan_disable+0x80>)
   13a56:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13a58:	4a1c      	ldr	r2, [pc, #112]	; (13acc <system_gclk_chan_disable+0x84>)
   13a5a:	1dfb      	adds	r3, r7, #7
   13a5c:	781b      	ldrb	r3, [r3, #0]
   13a5e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   13a60:	4b1b      	ldr	r3, [pc, #108]	; (13ad0 <system_gclk_chan_disable+0x88>)
   13a62:	885b      	ldrh	r3, [r3, #2]
   13a64:	051b      	lsls	r3, r3, #20
   13a66:	0f1b      	lsrs	r3, r3, #28
   13a68:	b2db      	uxtb	r3, r3
   13a6a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   13a6c:	4a18      	ldr	r2, [pc, #96]	; (13ad0 <system_gclk_chan_disable+0x88>)
   13a6e:	8853      	ldrh	r3, [r2, #2]
   13a70:	4918      	ldr	r1, [pc, #96]	; (13ad4 <system_gclk_chan_disable+0x8c>)
   13a72:	400b      	ands	r3, r1
   13a74:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   13a76:	4a16      	ldr	r2, [pc, #88]	; (13ad0 <system_gclk_chan_disable+0x88>)
   13a78:	4b15      	ldr	r3, [pc, #84]	; (13ad0 <system_gclk_chan_disable+0x88>)
   13a7a:	885b      	ldrh	r3, [r3, #2]
   13a7c:	b29b      	uxth	r3, r3
   13a7e:	4916      	ldr	r1, [pc, #88]	; (13ad8 <system_gclk_chan_disable+0x90>)
   13a80:	400b      	ands	r3, r1
   13a82:	b29b      	uxth	r3, r3
   13a84:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   13a86:	46c0      	nop			; (mov r8, r8)
   13a88:	4b11      	ldr	r3, [pc, #68]	; (13ad0 <system_gclk_chan_disable+0x88>)
   13a8a:	885b      	ldrh	r3, [r3, #2]
   13a8c:	b29b      	uxth	r3, r3
   13a8e:	001a      	movs	r2, r3
   13a90:	2380      	movs	r3, #128	; 0x80
   13a92:	01db      	lsls	r3, r3, #7
   13a94:	4013      	ands	r3, r2
   13a96:	d1f7      	bne.n	13a88 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   13a98:	4a0d      	ldr	r2, [pc, #52]	; (13ad0 <system_gclk_chan_disable+0x88>)
   13a9a:	68fb      	ldr	r3, [r7, #12]
   13a9c:	b2db      	uxtb	r3, r3
   13a9e:	1c19      	adds	r1, r3, #0
   13aa0:	230f      	movs	r3, #15
   13aa2:	400b      	ands	r3, r1
   13aa4:	b2d9      	uxtb	r1, r3
   13aa6:	8853      	ldrh	r3, [r2, #2]
   13aa8:	1c08      	adds	r0, r1, #0
   13aaa:	210f      	movs	r1, #15
   13aac:	4001      	ands	r1, r0
   13aae:	0208      	lsls	r0, r1, #8
   13ab0:	4908      	ldr	r1, [pc, #32]	; (13ad4 <system_gclk_chan_disable+0x8c>)
   13ab2:	400b      	ands	r3, r1
   13ab4:	1c19      	adds	r1, r3, #0
   13ab6:	1c03      	adds	r3, r0, #0
   13ab8:	430b      	orrs	r3, r1
   13aba:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   13abc:	4b07      	ldr	r3, [pc, #28]	; (13adc <system_gclk_chan_disable+0x94>)
   13abe:	4798      	blx	r3
}
   13ac0:	46c0      	nop			; (mov r8, r8)
   13ac2:	46bd      	mov	sp, r7
   13ac4:	b004      	add	sp, #16
   13ac6:	bd80      	pop	{r7, pc}
   13ac8:	000136ed 	.word	0x000136ed
   13acc:	40000c02 	.word	0x40000c02
   13ad0:	40000c00 	.word	0x40000c00
   13ad4:	fffff0ff 	.word	0xfffff0ff
   13ad8:	ffffbfff 	.word	0xffffbfff
   13adc:	00013701 	.word	0x00013701

00013ae0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   13ae0:	b580      	push	{r7, lr}
   13ae2:	b084      	sub	sp, #16
   13ae4:	af00      	add	r7, sp, #0
   13ae6:	0002      	movs	r2, r0
   13ae8:	1dfb      	adds	r3, r7, #7
   13aea:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   13aec:	4b0d      	ldr	r3, [pc, #52]	; (13b24 <system_gclk_chan_get_hz+0x44>)
   13aee:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13af0:	4a0d      	ldr	r2, [pc, #52]	; (13b28 <system_gclk_chan_get_hz+0x48>)
   13af2:	1dfb      	adds	r3, r7, #7
   13af4:	781b      	ldrb	r3, [r3, #0]
   13af6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   13af8:	4b0c      	ldr	r3, [pc, #48]	; (13b2c <system_gclk_chan_get_hz+0x4c>)
   13afa:	885b      	ldrh	r3, [r3, #2]
   13afc:	051b      	lsls	r3, r3, #20
   13afe:	0f1b      	lsrs	r3, r3, #28
   13b00:	b2da      	uxtb	r2, r3
   13b02:	230f      	movs	r3, #15
   13b04:	18fb      	adds	r3, r7, r3
   13b06:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   13b08:	4b09      	ldr	r3, [pc, #36]	; (13b30 <system_gclk_chan_get_hz+0x50>)
   13b0a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   13b0c:	230f      	movs	r3, #15
   13b0e:	18fb      	adds	r3, r7, r3
   13b10:	781b      	ldrb	r3, [r3, #0]
   13b12:	0018      	movs	r0, r3
   13b14:	4b07      	ldr	r3, [pc, #28]	; (13b34 <system_gclk_chan_get_hz+0x54>)
   13b16:	4798      	blx	r3
   13b18:	0003      	movs	r3, r0
}
   13b1a:	0018      	movs	r0, r3
   13b1c:	46bd      	mov	sp, r7
   13b1e:	b004      	add	sp, #16
   13b20:	bd80      	pop	{r7, pc}
   13b22:	46c0      	nop			; (mov r8, r8)
   13b24:	000136ed 	.word	0x000136ed
   13b28:	40000c02 	.word	0x40000c02
   13b2c:	40000c00 	.word	0x40000c00
   13b30:	00013701 	.word	0x00013701
   13b34:	000138e5 	.word	0x000138e5

00013b38 <system_pinmux_get_group_from_gpio_pin>:
{
   13b38:	b580      	push	{r7, lr}
   13b3a:	b084      	sub	sp, #16
   13b3c:	af00      	add	r7, sp, #0
   13b3e:	0002      	movs	r2, r0
   13b40:	1dfb      	adds	r3, r7, #7
   13b42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13b44:	230f      	movs	r3, #15
   13b46:	18fb      	adds	r3, r7, r3
   13b48:	1dfa      	adds	r2, r7, #7
   13b4a:	7812      	ldrb	r2, [r2, #0]
   13b4c:	09d2      	lsrs	r2, r2, #7
   13b4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13b50:	230e      	movs	r3, #14
   13b52:	18fb      	adds	r3, r7, r3
   13b54:	1dfa      	adds	r2, r7, #7
   13b56:	7812      	ldrb	r2, [r2, #0]
   13b58:	0952      	lsrs	r2, r2, #5
   13b5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13b5c:	4b0d      	ldr	r3, [pc, #52]	; (13b94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13b5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13b60:	230f      	movs	r3, #15
   13b62:	18fb      	adds	r3, r7, r3
   13b64:	781b      	ldrb	r3, [r3, #0]
   13b66:	2b00      	cmp	r3, #0
   13b68:	d10f      	bne.n	13b8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13b6a:	230f      	movs	r3, #15
   13b6c:	18fb      	adds	r3, r7, r3
   13b6e:	781b      	ldrb	r3, [r3, #0]
   13b70:	009b      	lsls	r3, r3, #2
   13b72:	2210      	movs	r2, #16
   13b74:	4694      	mov	ip, r2
   13b76:	44bc      	add	ip, r7
   13b78:	4463      	add	r3, ip
   13b7a:	3b08      	subs	r3, #8
   13b7c:	681a      	ldr	r2, [r3, #0]
   13b7e:	230e      	movs	r3, #14
   13b80:	18fb      	adds	r3, r7, r3
   13b82:	781b      	ldrb	r3, [r3, #0]
   13b84:	01db      	lsls	r3, r3, #7
   13b86:	18d3      	adds	r3, r2, r3
   13b88:	e000      	b.n	13b8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13b8a:	2300      	movs	r3, #0
}
   13b8c:	0018      	movs	r0, r3
   13b8e:	46bd      	mov	sp, r7
   13b90:	b004      	add	sp, #16
   13b92:	bd80      	pop	{r7, pc}
   13b94:	41004400 	.word	0x41004400

00013b98 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   13b98:	b580      	push	{r7, lr}
   13b9a:	b088      	sub	sp, #32
   13b9c:	af00      	add	r7, sp, #0
   13b9e:	60f8      	str	r0, [r7, #12]
   13ba0:	60b9      	str	r1, [r7, #8]
   13ba2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   13ba4:	2300      	movs	r3, #0
   13ba6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   13ba8:	687b      	ldr	r3, [r7, #4]
   13baa:	78db      	ldrb	r3, [r3, #3]
   13bac:	2201      	movs	r2, #1
   13bae:	4053      	eors	r3, r2
   13bb0:	b2db      	uxtb	r3, r3
   13bb2:	2b00      	cmp	r3, #0
   13bb4:	d035      	beq.n	13c22 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   13bb6:	687b      	ldr	r3, [r7, #4]
   13bb8:	781b      	ldrb	r3, [r3, #0]
   13bba:	2b80      	cmp	r3, #128	; 0x80
   13bbc:	d00b      	beq.n	13bd6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   13bbe:	69fb      	ldr	r3, [r7, #28]
   13bc0:	2280      	movs	r2, #128	; 0x80
   13bc2:	0252      	lsls	r2, r2, #9
   13bc4:	4313      	orrs	r3, r2
   13bc6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	781b      	ldrb	r3, [r3, #0]
   13bcc:	061b      	lsls	r3, r3, #24
   13bce:	001a      	movs	r2, r3
   13bd0:	69fb      	ldr	r3, [r7, #28]
   13bd2:	4313      	orrs	r3, r2
   13bd4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13bd6:	687b      	ldr	r3, [r7, #4]
   13bd8:	785b      	ldrb	r3, [r3, #1]
   13bda:	2b00      	cmp	r3, #0
   13bdc:	d003      	beq.n	13be6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13bde:	687b      	ldr	r3, [r7, #4]
   13be0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13be2:	2b02      	cmp	r3, #2
   13be4:	d110      	bne.n	13c08 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   13be6:	69fb      	ldr	r3, [r7, #28]
   13be8:	2280      	movs	r2, #128	; 0x80
   13bea:	0292      	lsls	r2, r2, #10
   13bec:	4313      	orrs	r3, r2
   13bee:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   13bf0:	687b      	ldr	r3, [r7, #4]
   13bf2:	789b      	ldrb	r3, [r3, #2]
   13bf4:	2b00      	cmp	r3, #0
   13bf6:	d004      	beq.n	13c02 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   13bf8:	69fb      	ldr	r3, [r7, #28]
   13bfa:	2280      	movs	r2, #128	; 0x80
   13bfc:	02d2      	lsls	r2, r2, #11
   13bfe:	4313      	orrs	r3, r2
   13c00:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   13c02:	68fb      	ldr	r3, [r7, #12]
   13c04:	68ba      	ldr	r2, [r7, #8]
   13c06:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13c08:	687b      	ldr	r3, [r7, #4]
   13c0a:	785b      	ldrb	r3, [r3, #1]
   13c0c:	2b01      	cmp	r3, #1
   13c0e:	d003      	beq.n	13c18 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13c10:	687b      	ldr	r3, [r7, #4]
   13c12:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13c14:	2b02      	cmp	r3, #2
   13c16:	d107      	bne.n	13c28 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   13c18:	69fb      	ldr	r3, [r7, #28]
   13c1a:	4a22      	ldr	r2, [pc, #136]	; (13ca4 <_system_pinmux_config+0x10c>)
   13c1c:	4013      	ands	r3, r2
   13c1e:	61fb      	str	r3, [r7, #28]
   13c20:	e002      	b.n	13c28 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   13c22:	68fb      	ldr	r3, [r7, #12]
   13c24:	68ba      	ldr	r2, [r7, #8]
   13c26:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   13c28:	68bb      	ldr	r3, [r7, #8]
   13c2a:	041b      	lsls	r3, r3, #16
   13c2c:	0c1b      	lsrs	r3, r3, #16
   13c2e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   13c30:	68bb      	ldr	r3, [r7, #8]
   13c32:	0c1b      	lsrs	r3, r3, #16
   13c34:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13c36:	69ba      	ldr	r2, [r7, #24]
   13c38:	69fb      	ldr	r3, [r7, #28]
   13c3a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   13c3c:	22a0      	movs	r2, #160	; 0xa0
   13c3e:	05d2      	lsls	r2, r2, #23
   13c40:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13c42:	68fb      	ldr	r3, [r7, #12]
   13c44:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13c46:	697a      	ldr	r2, [r7, #20]
   13c48:	69fb      	ldr	r3, [r7, #28]
   13c4a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   13c4c:	22d0      	movs	r2, #208	; 0xd0
   13c4e:	0612      	lsls	r2, r2, #24
   13c50:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13c52:	68fb      	ldr	r3, [r7, #12]
   13c54:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   13c56:	687b      	ldr	r3, [r7, #4]
   13c58:	78db      	ldrb	r3, [r3, #3]
   13c5a:	2201      	movs	r2, #1
   13c5c:	4053      	eors	r3, r2
   13c5e:	b2db      	uxtb	r3, r3
   13c60:	2b00      	cmp	r3, #0
   13c62:	d01a      	beq.n	13c9a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   13c64:	69fa      	ldr	r2, [r7, #28]
   13c66:	2380      	movs	r3, #128	; 0x80
   13c68:	02db      	lsls	r3, r3, #11
   13c6a:	4013      	ands	r3, r2
   13c6c:	d00a      	beq.n	13c84 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   13c6e:	687b      	ldr	r3, [r7, #4]
   13c70:	789b      	ldrb	r3, [r3, #2]
   13c72:	2b01      	cmp	r3, #1
   13c74:	d103      	bne.n	13c7e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   13c76:	68fb      	ldr	r3, [r7, #12]
   13c78:	68ba      	ldr	r2, [r7, #8]
   13c7a:	619a      	str	r2, [r3, #24]
   13c7c:	e002      	b.n	13c84 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   13c7e:	68fb      	ldr	r3, [r7, #12]
   13c80:	68ba      	ldr	r2, [r7, #8]
   13c82:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13c84:	687b      	ldr	r3, [r7, #4]
   13c86:	785b      	ldrb	r3, [r3, #1]
   13c88:	2b01      	cmp	r3, #1
   13c8a:	d003      	beq.n	13c94 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13c8c:	687b      	ldr	r3, [r7, #4]
   13c8e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13c90:	2b02      	cmp	r3, #2
   13c92:	d102      	bne.n	13c9a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   13c94:	68fb      	ldr	r3, [r7, #12]
   13c96:	68ba      	ldr	r2, [r7, #8]
   13c98:	609a      	str	r2, [r3, #8]
		}
	}
}
   13c9a:	46c0      	nop			; (mov r8, r8)
   13c9c:	46bd      	mov	sp, r7
   13c9e:	b008      	add	sp, #32
   13ca0:	bd80      	pop	{r7, pc}
   13ca2:	46c0      	nop			; (mov r8, r8)
   13ca4:	fffbffff 	.word	0xfffbffff

00013ca8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   13ca8:	b580      	push	{r7, lr}
   13caa:	b084      	sub	sp, #16
   13cac:	af00      	add	r7, sp, #0
   13cae:	0002      	movs	r2, r0
   13cb0:	6039      	str	r1, [r7, #0]
   13cb2:	1dfb      	adds	r3, r7, #7
   13cb4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13cb6:	1dfb      	adds	r3, r7, #7
   13cb8:	781b      	ldrb	r3, [r3, #0]
   13cba:	0018      	movs	r0, r3
   13cbc:	4b0a      	ldr	r3, [pc, #40]	; (13ce8 <system_pinmux_pin_set_config+0x40>)
   13cbe:	4798      	blx	r3
   13cc0:	0003      	movs	r3, r0
   13cc2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   13cc4:	1dfb      	adds	r3, r7, #7
   13cc6:	781b      	ldrb	r3, [r3, #0]
   13cc8:	221f      	movs	r2, #31
   13cca:	4013      	ands	r3, r2
   13ccc:	2201      	movs	r2, #1
   13cce:	409a      	lsls	r2, r3
   13cd0:	0013      	movs	r3, r2
   13cd2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   13cd4:	683a      	ldr	r2, [r7, #0]
   13cd6:	68b9      	ldr	r1, [r7, #8]
   13cd8:	68fb      	ldr	r3, [r7, #12]
   13cda:	0018      	movs	r0, r3
   13cdc:	4b03      	ldr	r3, [pc, #12]	; (13cec <system_pinmux_pin_set_config+0x44>)
   13cde:	4798      	blx	r3
}
   13ce0:	46c0      	nop			; (mov r8, r8)
   13ce2:	46bd      	mov	sp, r7
   13ce4:	b004      	add	sp, #16
   13ce6:	bd80      	pop	{r7, pc}
   13ce8:	00013b39 	.word	0x00013b39
   13cec:	00013b99 	.word	0x00013b99

00013cf0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   13cf0:	b580      	push	{r7, lr}
   13cf2:	af00      	add	r7, sp, #0
	return;
   13cf4:	46c0      	nop			; (mov r8, r8)
}
   13cf6:	46bd      	mov	sp, r7
   13cf8:	bd80      	pop	{r7, pc}
	...

00013cfc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   13cfc:	b580      	push	{r7, lr}
   13cfe:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   13d00:	4b06      	ldr	r3, [pc, #24]	; (13d1c <system_init+0x20>)
   13d02:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   13d04:	4b06      	ldr	r3, [pc, #24]	; (13d20 <system_init+0x24>)
   13d06:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   13d08:	4b06      	ldr	r3, [pc, #24]	; (13d24 <system_init+0x28>)
   13d0a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   13d0c:	4b06      	ldr	r3, [pc, #24]	; (13d28 <system_init+0x2c>)
   13d0e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   13d10:	4b06      	ldr	r3, [pc, #24]	; (13d2c <system_init+0x30>)
   13d12:	4798      	blx	r3
}
   13d14:	46c0      	nop			; (mov r8, r8)
   13d16:	46bd      	mov	sp, r7
   13d18:	bd80      	pop	{r7, pc}
   13d1a:	46c0      	nop			; (mov r8, r8)
   13d1c:	00013331 	.word	0x00013331
   13d20:	00012bf9 	.word	0x00012bf9
   13d24:	000116c1 	.word	0x000116c1
   13d28:	0000cf89 	.word	0x0000cf89
   13d2c:	00013cf1 	.word	0x00013cf1

00013d30 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   13d30:	b580      	push	{r7, lr}
   13d32:	b082      	sub	sp, #8
   13d34:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   13d36:	4b2f      	ldr	r3, [pc, #188]	; (13df4 <Reset_Handler+0xc4>)
   13d38:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   13d3a:	4b2f      	ldr	r3, [pc, #188]	; (13df8 <Reset_Handler+0xc8>)
   13d3c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   13d3e:	687a      	ldr	r2, [r7, #4]
   13d40:	683b      	ldr	r3, [r7, #0]
   13d42:	429a      	cmp	r2, r3
   13d44:	d00c      	beq.n	13d60 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   13d46:	e007      	b.n	13d58 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   13d48:	683b      	ldr	r3, [r7, #0]
   13d4a:	1d1a      	adds	r2, r3, #4
   13d4c:	603a      	str	r2, [r7, #0]
   13d4e:	687a      	ldr	r2, [r7, #4]
   13d50:	1d11      	adds	r1, r2, #4
   13d52:	6079      	str	r1, [r7, #4]
   13d54:	6812      	ldr	r2, [r2, #0]
   13d56:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   13d58:	683a      	ldr	r2, [r7, #0]
   13d5a:	4b28      	ldr	r3, [pc, #160]	; (13dfc <Reset_Handler+0xcc>)
   13d5c:	429a      	cmp	r2, r3
   13d5e:	d3f3      	bcc.n	13d48 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   13d60:	4b27      	ldr	r3, [pc, #156]	; (13e00 <Reset_Handler+0xd0>)
   13d62:	603b      	str	r3, [r7, #0]
   13d64:	e004      	b.n	13d70 <Reset_Handler+0x40>
                *pDest++ = 0;
   13d66:	683b      	ldr	r3, [r7, #0]
   13d68:	1d1a      	adds	r2, r3, #4
   13d6a:	603a      	str	r2, [r7, #0]
   13d6c:	2200      	movs	r2, #0
   13d6e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   13d70:	683a      	ldr	r2, [r7, #0]
   13d72:	4b24      	ldr	r3, [pc, #144]	; (13e04 <Reset_Handler+0xd4>)
   13d74:	429a      	cmp	r2, r3
   13d76:	d3f6      	bcc.n	13d66 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   13d78:	4b23      	ldr	r3, [pc, #140]	; (13e08 <Reset_Handler+0xd8>)
   13d7a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   13d7c:	4b23      	ldr	r3, [pc, #140]	; (13e0c <Reset_Handler+0xdc>)
   13d7e:	687a      	ldr	r2, [r7, #4]
   13d80:	21ff      	movs	r1, #255	; 0xff
   13d82:	438a      	bics	r2, r1
   13d84:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   13d86:	4a22      	ldr	r2, [pc, #136]	; (13e10 <Reset_Handler+0xe0>)
   13d88:	2390      	movs	r3, #144	; 0x90
   13d8a:	005b      	lsls	r3, r3, #1
   13d8c:	2102      	movs	r1, #2
   13d8e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   13d90:	4a20      	ldr	r2, [pc, #128]	; (13e14 <Reset_Handler+0xe4>)
   13d92:	78d3      	ldrb	r3, [r2, #3]
   13d94:	2103      	movs	r1, #3
   13d96:	438b      	bics	r3, r1
   13d98:	1c19      	adds	r1, r3, #0
   13d9a:	2302      	movs	r3, #2
   13d9c:	430b      	orrs	r3, r1
   13d9e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   13da0:	4a1c      	ldr	r2, [pc, #112]	; (13e14 <Reset_Handler+0xe4>)
   13da2:	78d3      	ldrb	r3, [r2, #3]
   13da4:	210c      	movs	r1, #12
   13da6:	438b      	bics	r3, r1
   13da8:	1c19      	adds	r1, r3, #0
   13daa:	2308      	movs	r3, #8
   13dac:	430b      	orrs	r3, r1
   13dae:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   13db0:	4a19      	ldr	r2, [pc, #100]	; (13e18 <Reset_Handler+0xe8>)
   13db2:	7b93      	ldrb	r3, [r2, #14]
   13db4:	2130      	movs	r1, #48	; 0x30
   13db6:	438b      	bics	r3, r1
   13db8:	1c19      	adds	r1, r3, #0
   13dba:	2320      	movs	r3, #32
   13dbc:	430b      	orrs	r3, r1
   13dbe:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   13dc0:	4a15      	ldr	r2, [pc, #84]	; (13e18 <Reset_Handler+0xe8>)
   13dc2:	7b93      	ldrb	r3, [r2, #14]
   13dc4:	210c      	movs	r1, #12
   13dc6:	438b      	bics	r3, r1
   13dc8:	1c19      	adds	r1, r3, #0
   13dca:	2308      	movs	r3, #8
   13dcc:	430b      	orrs	r3, r1
   13dce:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   13dd0:	4a11      	ldr	r2, [pc, #68]	; (13e18 <Reset_Handler+0xe8>)
   13dd2:	7b93      	ldrb	r3, [r2, #14]
   13dd4:	2103      	movs	r1, #3
   13dd6:	438b      	bics	r3, r1
   13dd8:	1c19      	adds	r1, r3, #0
   13dda:	2302      	movs	r3, #2
   13ddc:	430b      	orrs	r3, r1
   13dde:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   13de0:	4a0e      	ldr	r2, [pc, #56]	; (13e1c <Reset_Handler+0xec>)
   13de2:	6853      	ldr	r3, [r2, #4]
   13de4:	2180      	movs	r1, #128	; 0x80
   13de6:	430b      	orrs	r3, r1
   13de8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   13dea:	4b0d      	ldr	r3, [pc, #52]	; (13e20 <Reset_Handler+0xf0>)
   13dec:	4798      	blx	r3

        /* Branch to main function */
        main();
   13dee:	4b0d      	ldr	r3, [pc, #52]	; (13e24 <Reset_Handler+0xf4>)
   13df0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   13df2:	e7fe      	b.n	13df2 <Reset_Handler+0xc2>
   13df4:	00019ddc 	.word	0x00019ddc
   13df8:	20000000 	.word	0x20000000
   13dfc:	200001fc 	.word	0x200001fc
   13e00:	20000200 	.word	0x20000200
   13e04:	2000093c 	.word	0x2000093c
   13e08:	00000000 	.word	0x00000000
   13e0c:	e000ed00 	.word	0xe000ed00
   13e10:	41007000 	.word	0x41007000
   13e14:	41005000 	.word	0x41005000
   13e18:	41004800 	.word	0x41004800
   13e1c:	41004000 	.word	0x41004000
   13e20:	00017c79 	.word	0x00017c79
   13e24:	00014059 	.word	0x00014059

00013e28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   13e28:	b580      	push	{r7, lr}
   13e2a:	af00      	add	r7, sp, #0
        while (1) {
   13e2c:	e7fe      	b.n	13e2c <Dummy_Handler+0x4>
	...

00013e30 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   13e30:	b580      	push	{r7, lr}
   13e32:	b084      	sub	sp, #16
   13e34:	af00      	add	r7, sp, #0
   13e36:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   13e38:	4b0a      	ldr	r3, [pc, #40]	; (13e64 <_sbrk+0x34>)
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	d102      	bne.n	13e46 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   13e40:	4b08      	ldr	r3, [pc, #32]	; (13e64 <_sbrk+0x34>)
   13e42:	4a09      	ldr	r2, [pc, #36]	; (13e68 <_sbrk+0x38>)
   13e44:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   13e46:	4b07      	ldr	r3, [pc, #28]	; (13e64 <_sbrk+0x34>)
   13e48:	681b      	ldr	r3, [r3, #0]
   13e4a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   13e4c:	4b05      	ldr	r3, [pc, #20]	; (13e64 <_sbrk+0x34>)
   13e4e:	681a      	ldr	r2, [r3, #0]
   13e50:	687b      	ldr	r3, [r7, #4]
   13e52:	18d2      	adds	r2, r2, r3
   13e54:	4b03      	ldr	r3, [pc, #12]	; (13e64 <_sbrk+0x34>)
   13e56:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   13e58:	68fb      	ldr	r3, [r7, #12]
}
   13e5a:	0018      	movs	r0, r3
   13e5c:	46bd      	mov	sp, r7
   13e5e:	b004      	add	sp, #16
   13e60:	bd80      	pop	{r7, pc}
   13e62:	46c0      	nop			; (mov r8, r8)
   13e64:	20000508 	.word	0x20000508
   13e68:	20002940 	.word	0x20002940

00013e6c <system_apb_clock_clear_mask>:
 * \retval STATUS_OK               The clock mask was changed successfully
 */
static inline enum status_code system_apb_clock_clear_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13e6c:	b580      	push	{r7, lr}
   13e6e:	b082      	sub	sp, #8
   13e70:	af00      	add	r7, sp, #0
   13e72:	0002      	movs	r2, r0
   13e74:	6039      	str	r1, [r7, #0]
   13e76:	1dfb      	adds	r3, r7, #7
   13e78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13e7a:	1dfb      	adds	r3, r7, #7
   13e7c:	781b      	ldrb	r3, [r3, #0]
   13e7e:	2b01      	cmp	r3, #1
   13e80:	d00b      	beq.n	13e9a <system_apb_clock_clear_mask+0x2e>
   13e82:	2b02      	cmp	r3, #2
   13e84:	d011      	beq.n	13eaa <system_apb_clock_clear_mask+0x3e>
   13e86:	2b00      	cmp	r3, #0
   13e88:	d117      	bne.n	13eba <system_apb_clock_clear_mask+0x4e>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg &= ~mask;
   13e8a:	4b0f      	ldr	r3, [pc, #60]	; (13ec8 <system_apb_clock_clear_mask+0x5c>)
   13e8c:	4a0e      	ldr	r2, [pc, #56]	; (13ec8 <system_apb_clock_clear_mask+0x5c>)
   13e8e:	6992      	ldr	r2, [r2, #24]
   13e90:	6839      	ldr	r1, [r7, #0]
   13e92:	43c9      	mvns	r1, r1
   13e94:	400a      	ands	r2, r1
   13e96:	619a      	str	r2, [r3, #24]
			break;
   13e98:	e011      	b.n	13ebe <system_apb_clock_clear_mask+0x52>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg &= ~mask;
   13e9a:	4b0b      	ldr	r3, [pc, #44]	; (13ec8 <system_apb_clock_clear_mask+0x5c>)
   13e9c:	4a0a      	ldr	r2, [pc, #40]	; (13ec8 <system_apb_clock_clear_mask+0x5c>)
   13e9e:	69d2      	ldr	r2, [r2, #28]
   13ea0:	6839      	ldr	r1, [r7, #0]
   13ea2:	43c9      	mvns	r1, r1
   13ea4:	400a      	ands	r2, r1
   13ea6:	61da      	str	r2, [r3, #28]
			break;
   13ea8:	e009      	b.n	13ebe <system_apb_clock_clear_mask+0x52>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg &= ~mask;
   13eaa:	4b07      	ldr	r3, [pc, #28]	; (13ec8 <system_apb_clock_clear_mask+0x5c>)
   13eac:	4a06      	ldr	r2, [pc, #24]	; (13ec8 <system_apb_clock_clear_mask+0x5c>)
   13eae:	6a12      	ldr	r2, [r2, #32]
   13eb0:	6839      	ldr	r1, [r7, #0]
   13eb2:	43c9      	mvns	r1, r1
   13eb4:	400a      	ands	r2, r1
   13eb6:	621a      	str	r2, [r3, #32]
			break;
   13eb8:	e001      	b.n	13ebe <system_apb_clock_clear_mask+0x52>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13eba:	2317      	movs	r3, #23
   13ebc:	e000      	b.n	13ec0 <system_apb_clock_clear_mask+0x54>
	}

	return STATUS_OK;
   13ebe:	2300      	movs	r3, #0
}
   13ec0:	0018      	movs	r0, r3
   13ec2:	46bd      	mov	sp, r7
   13ec4:	b002      	add	sp, #8
   13ec6:	bd80      	pop	{r7, pc}
   13ec8:	40000400 	.word	0x40000400

00013ecc <system_interrupt_enable_global>:
{
   13ecc:	b580      	push	{r7, lr}
   13ece:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   13ed0:	4b04      	ldr	r3, [pc, #16]	; (13ee4 <system_interrupt_enable_global+0x18>)
   13ed2:	2201      	movs	r2, #1
   13ed4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   13ed6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   13eda:	b662      	cpsie	i
}
   13edc:	46c0      	nop			; (mov r8, r8)
   13ede:	46bd      	mov	sp, r7
   13ee0:	bd80      	pop	{r7, pc}
   13ee2:	46c0      	nop			; (mov r8, r8)
   13ee4:	20000028 	.word	0x20000028

00013ee8 <system_pinmux_get_group_from_gpio_pin>:
{
   13ee8:	b580      	push	{r7, lr}
   13eea:	b084      	sub	sp, #16
   13eec:	af00      	add	r7, sp, #0
   13eee:	0002      	movs	r2, r0
   13ef0:	1dfb      	adds	r3, r7, #7
   13ef2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13ef4:	230f      	movs	r3, #15
   13ef6:	18fb      	adds	r3, r7, r3
   13ef8:	1dfa      	adds	r2, r7, #7
   13efa:	7812      	ldrb	r2, [r2, #0]
   13efc:	09d2      	lsrs	r2, r2, #7
   13efe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13f00:	230e      	movs	r3, #14
   13f02:	18fb      	adds	r3, r7, r3
   13f04:	1dfa      	adds	r2, r7, #7
   13f06:	7812      	ldrb	r2, [r2, #0]
   13f08:	0952      	lsrs	r2, r2, #5
   13f0a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13f0c:	4b0d      	ldr	r3, [pc, #52]	; (13f44 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13f0e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13f10:	230f      	movs	r3, #15
   13f12:	18fb      	adds	r3, r7, r3
   13f14:	781b      	ldrb	r3, [r3, #0]
   13f16:	2b00      	cmp	r3, #0
   13f18:	d10f      	bne.n	13f3a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13f1a:	230f      	movs	r3, #15
   13f1c:	18fb      	adds	r3, r7, r3
   13f1e:	781b      	ldrb	r3, [r3, #0]
   13f20:	009b      	lsls	r3, r3, #2
   13f22:	2210      	movs	r2, #16
   13f24:	4694      	mov	ip, r2
   13f26:	44bc      	add	ip, r7
   13f28:	4463      	add	r3, ip
   13f2a:	3b08      	subs	r3, #8
   13f2c:	681a      	ldr	r2, [r3, #0]
   13f2e:	230e      	movs	r3, #14
   13f30:	18fb      	adds	r3, r7, r3
   13f32:	781b      	ldrb	r3, [r3, #0]
   13f34:	01db      	lsls	r3, r3, #7
   13f36:	18d3      	adds	r3, r2, r3
   13f38:	e000      	b.n	13f3c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13f3a:	2300      	movs	r3, #0
}
   13f3c:	0018      	movs	r0, r3
   13f3e:	46bd      	mov	sp, r7
   13f40:	b004      	add	sp, #16
   13f42:	bd80      	pop	{r7, pc}
   13f44:	41004400 	.word	0x41004400

00013f48 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   13f48:	b580      	push	{r7, lr}
   13f4a:	b084      	sub	sp, #16
   13f4c:	af00      	add	r7, sp, #0
   13f4e:	0002      	movs	r2, r0
   13f50:	1dfb      	adds	r3, r7, #7
   13f52:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   13f54:	4b1a      	ldr	r3, [pc, #104]	; (13fc0 <system_set_sleepmode+0x78>)
   13f56:	699b      	ldr	r3, [r3, #24]
   13f58:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   13f5a:	68fa      	ldr	r2, [r7, #12]
   13f5c:	23f0      	movs	r3, #240	; 0xf0
   13f5e:	011b      	lsls	r3, r3, #4
   13f60:	4013      	ands	r3, r2
   13f62:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   13f64:	68fb      	ldr	r3, [r7, #12]
   13f66:	0a1b      	lsrs	r3, r3, #8
   13f68:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   13f6a:	68fb      	ldr	r3, [r7, #12]
   13f6c:	2b02      	cmp	r3, #2
   13f6e:	d805      	bhi.n	13f7c <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13f70:	4a14      	ldr	r2, [pc, #80]	; (13fc4 <system_set_sleepmode+0x7c>)
   13f72:	6853      	ldr	r3, [r2, #4]
   13f74:	21c0      	movs	r1, #192	; 0xc0
   13f76:	0089      	lsls	r1, r1, #2
   13f78:	430b      	orrs	r3, r1
   13f7a:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   13f7c:	1dfb      	adds	r3, r7, #7
   13f7e:	781b      	ldrb	r3, [r3, #0]
   13f80:	2b00      	cmp	r3, #0
   13f82:	db16      	blt.n	13fb2 <system_set_sleepmode+0x6a>
   13f84:	2b02      	cmp	r3, #2
   13f86:	dd02      	ble.n	13f8e <system_set_sleepmode+0x46>
   13f88:	2b03      	cmp	r3, #3
   13f8a:	d00b      	beq.n	13fa4 <system_set_sleepmode+0x5c>
   13f8c:	e011      	b.n	13fb2 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   13f8e:	4b0e      	ldr	r3, [pc, #56]	; (13fc8 <system_set_sleepmode+0x80>)
   13f90:	4a0d      	ldr	r2, [pc, #52]	; (13fc8 <system_set_sleepmode+0x80>)
   13f92:	6912      	ldr	r2, [r2, #16]
   13f94:	2104      	movs	r1, #4
   13f96:	438a      	bics	r2, r1
   13f98:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   13f9a:	4a0c      	ldr	r2, [pc, #48]	; (13fcc <system_set_sleepmode+0x84>)
   13f9c:	1dfb      	adds	r3, r7, #7
   13f9e:	781b      	ldrb	r3, [r3, #0]
   13fa0:	7053      	strb	r3, [r2, #1]
			break;
   13fa2:	e008      	b.n	13fb6 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   13fa4:	4b08      	ldr	r3, [pc, #32]	; (13fc8 <system_set_sleepmode+0x80>)
   13fa6:	4a08      	ldr	r2, [pc, #32]	; (13fc8 <system_set_sleepmode+0x80>)
   13fa8:	6912      	ldr	r2, [r2, #16]
   13faa:	2104      	movs	r1, #4
   13fac:	430a      	orrs	r2, r1
   13fae:	611a      	str	r2, [r3, #16]
			break;
   13fb0:	e001      	b.n	13fb6 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   13fb2:	2317      	movs	r3, #23
   13fb4:	e000      	b.n	13fb8 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   13fb6:	2300      	movs	r3, #0
}
   13fb8:	0018      	movs	r0, r3
   13fba:	46bd      	mov	sp, r7
   13fbc:	b004      	add	sp, #16
   13fbe:	bd80      	pop	{r7, pc}
   13fc0:	41002000 	.word	0x41002000
   13fc4:	41004000 	.word	0x41004000
   13fc8:	e000ed00 	.word	0xe000ed00
   13fcc:	40000400 	.word	0x40000400

00013fd0 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   13fd0:	b580      	push	{r7, lr}
   13fd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   13fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   13fd8:	bf30      	wfi
	__DSB();
	__WFI();
}
   13fda:	46c0      	nop			; (mov r8, r8)
   13fdc:	46bd      	mov	sp, r7
   13fde:	bd80      	pop	{r7, pc}

00013fe0 <port_get_group_from_gpio_pin>:
{
   13fe0:	b580      	push	{r7, lr}
   13fe2:	b082      	sub	sp, #8
   13fe4:	af00      	add	r7, sp, #0
   13fe6:	0002      	movs	r2, r0
   13fe8:	1dfb      	adds	r3, r7, #7
   13fea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13fec:	1dfb      	adds	r3, r7, #7
   13fee:	781b      	ldrb	r3, [r3, #0]
   13ff0:	0018      	movs	r0, r3
   13ff2:	4b03      	ldr	r3, [pc, #12]	; (14000 <port_get_group_from_gpio_pin+0x20>)
   13ff4:	4798      	blx	r3
   13ff6:	0003      	movs	r3, r0
}
   13ff8:	0018      	movs	r0, r3
   13ffa:	46bd      	mov	sp, r7
   13ffc:	b002      	add	sp, #8
   13ffe:	bd80      	pop	{r7, pc}
   14000:	00013ee9 	.word	0x00013ee9

00014004 <port_pin_set_output_level>:
{
   14004:	b580      	push	{r7, lr}
   14006:	b084      	sub	sp, #16
   14008:	af00      	add	r7, sp, #0
   1400a:	0002      	movs	r2, r0
   1400c:	1dfb      	adds	r3, r7, #7
   1400e:	701a      	strb	r2, [r3, #0]
   14010:	1dbb      	adds	r3, r7, #6
   14012:	1c0a      	adds	r2, r1, #0
   14014:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14016:	1dfb      	adds	r3, r7, #7
   14018:	781b      	ldrb	r3, [r3, #0]
   1401a:	0018      	movs	r0, r3
   1401c:	4b0d      	ldr	r3, [pc, #52]	; (14054 <port_pin_set_output_level+0x50>)
   1401e:	4798      	blx	r3
   14020:	0003      	movs	r3, r0
   14022:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14024:	1dfb      	adds	r3, r7, #7
   14026:	781b      	ldrb	r3, [r3, #0]
   14028:	221f      	movs	r2, #31
   1402a:	4013      	ands	r3, r2
   1402c:	2201      	movs	r2, #1
   1402e:	409a      	lsls	r2, r3
   14030:	0013      	movs	r3, r2
   14032:	60bb      	str	r3, [r7, #8]
	if (level) {
   14034:	1dbb      	adds	r3, r7, #6
   14036:	781b      	ldrb	r3, [r3, #0]
   14038:	2b00      	cmp	r3, #0
   1403a:	d003      	beq.n	14044 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1403c:	68fb      	ldr	r3, [r7, #12]
   1403e:	68ba      	ldr	r2, [r7, #8]
   14040:	619a      	str	r2, [r3, #24]
}
   14042:	e002      	b.n	1404a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   14044:	68fb      	ldr	r3, [r7, #12]
   14046:	68ba      	ldr	r2, [r7, #8]
   14048:	615a      	str	r2, [r3, #20]
}
   1404a:	46c0      	nop			; (mov r8, r8)
   1404c:	46bd      	mov	sp, r7
   1404e:	b004      	add	sp, #16
   14050:	bd80      	pop	{r7, pc}
   14052:	46c0      	nop			; (mov r8, r8)
   14054:	00013fe1 	.word	0x00013fe1

00014058 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   14058:	b590      	push	{r4, r7, lr}
   1405a:	b083      	sub	sp, #12
   1405c:	af02      	add	r7, sp, #8
	system_init();
   1405e:	4b18      	ldr	r3, [pc, #96]	; (140c0 <main+0x68>)
   14060:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   14062:	2111      	movs	r1, #17
   14064:	2000      	movs	r0, #0
   14066:	4b17      	ldr	r3, [pc, #92]	; (140c4 <main+0x6c>)
   14068:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   1406a:	2103      	movs	r1, #3
   1406c:	2001      	movs	r0, #1
   1406e:	4b15      	ldr	r3, [pc, #84]	; (140c4 <main+0x6c>)
   14070:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   14072:	4b15      	ldr	r3, [pc, #84]	; (140c8 <main+0x70>)
   14074:	0019      	movs	r1, r3
   14076:	2002      	movs	r0, #2
   14078:	4b12      	ldr	r3, [pc, #72]	; (140c4 <main+0x6c>)
   1407a:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   1407c:	4a13      	ldr	r2, [pc, #76]	; (140cc <main+0x74>)
   1407e:	6853      	ldr	r3, [r2, #4]
   14080:	21c0      	movs	r1, #192	; 0xc0
   14082:	0089      	lsls	r1, r1, #2
   14084:	430b      	orrs	r3, r1
   14086:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   14088:	2003      	movs	r0, #3
   1408a:	4b11      	ldr	r3, [pc, #68]	; (140d0 <main+0x78>)
   1408c:	4798      	blx	r3
	
	system_interrupt_enable_global();
   1408e:	4b11      	ldr	r3, [pc, #68]	; (140d4 <main+0x7c>)
   14090:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   14092:	4b11      	ldr	r3, [pc, #68]	; (140d8 <main+0x80>)
   14094:	4798      	blx	r3
	init_eeprom();
   14096:	4b11      	ldr	r3, [pc, #68]	; (140dc <main+0x84>)
   14098:	4798      	blx	r3
	
	
	
	start_lcd_service();
   1409a:	4b11      	ldr	r3, [pc, #68]	; (140e0 <main+0x88>)
   1409c:	4798      	blx	r3
	start_gsm_service();
   1409e:	4b11      	ldr	r3, [pc, #68]	; (140e4 <main+0x8c>)
   140a0:	4798      	blx	r3
	start_motor_service();
   140a2:	4b11      	ldr	r3, [pc, #68]	; (140e8 <main+0x90>)
   140a4:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   140a6:	4811      	ldr	r0, [pc, #68]	; (140ec <main+0x94>)
   140a8:	2300      	movs	r3, #0
   140aa:	9301      	str	r3, [sp, #4]
   140ac:	2301      	movs	r3, #1
   140ae:	9300      	str	r3, [sp, #0]
   140b0:	2300      	movs	r3, #0
   140b2:	2264      	movs	r2, #100	; 0x64
   140b4:	2100      	movs	r1, #0
   140b6:	4c0e      	ldr	r4, [pc, #56]	; (140f0 <main+0x98>)
   140b8:	47a0      	blx	r4
	
	vTaskStartScheduler();
   140ba:	4b0e      	ldr	r3, [pc, #56]	; (140f4 <main+0x9c>)
   140bc:	4798      	blx	r3
	
	for (;;)
   140be:	e7fe      	b.n	140be <main+0x66>
   140c0:	00013cfd 	.word	0x00013cfd
   140c4:	00013e6d 	.word	0x00013e6d
   140c8:	00060001 	.word	0x00060001
   140cc:	41004000 	.word	0x41004000
   140d0:	00013f49 	.word	0x00013f49
   140d4:	00013ecd 	.word	0x00013ecd
   140d8:	00011925 	.word	0x00011925
   140dc:	00000151 	.word	0x00000151
   140e0:	00008225 	.word	0x00008225
   140e4:	00007a51 	.word	0x00007a51
   140e8:	0000b575 	.word	0x0000b575
   140ec:	00014141 	.word	0x00014141
   140f0:	0000ed69 	.word	0x0000ed69
   140f4:	0000f23d 	.word	0x0000f23d

000140f8 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   140f8:	b580      	push	{r7, lr}
   140fa:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   140fc:	4b0d      	ldr	r3, [pc, #52]	; (14134 <checkSleepElligible+0x3c>)
   140fe:	4798      	blx	r3
   14100:	0003      	movs	r3, r0
   14102:	001a      	movs	r2, r3
   14104:	2301      	movs	r3, #1
   14106:	4053      	eors	r3, r2
   14108:	b2db      	uxtb	r3, r3
   1410a:	2b00      	cmp	r3, #0
   1410c:	d009      	beq.n	14122 <checkSleepElligible+0x2a>
   1410e:	4b0a      	ldr	r3, [pc, #40]	; (14138 <checkSleepElligible+0x40>)
   14110:	4798      	blx	r3
   14112:	1e03      	subs	r3, r0, #0
   14114:	d005      	beq.n	14122 <checkSleepElligible+0x2a>
   14116:	4b09      	ldr	r3, [pc, #36]	; (1413c <checkSleepElligible+0x44>)
   14118:	4798      	blx	r3
   1411a:	1e03      	subs	r3, r0, #0
   1411c:	d001      	beq.n	14122 <checkSleepElligible+0x2a>
   1411e:	2301      	movs	r3, #1
   14120:	e000      	b.n	14124 <checkSleepElligible+0x2c>
   14122:	2300      	movs	r3, #0
   14124:	1c1a      	adds	r2, r3, #0
   14126:	2301      	movs	r3, #1
   14128:	4013      	ands	r3, r2
   1412a:	b2db      	uxtb	r3, r3
}
   1412c:	0018      	movs	r0, r3
   1412e:	46bd      	mov	sp, r7
   14130:	bd80      	pop	{r7, pc}
   14132:	46c0      	nop			; (mov r8, r8)
   14134:	00009ef9 	.word	0x00009ef9
   14138:	0000b86d 	.word	0x0000b86d
   1413c:	00007b15 	.word	0x00007b15

00014140 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   14140:	b580      	push	{r7, lr}
   14142:	b084      	sub	sp, #16
   14144:	af00      	add	r7, sp, #0
   14146:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   14148:	4b34      	ldr	r3, [pc, #208]	; (1421c <vTask_sleep_manager+0xdc>)
   1414a:	4798      	blx	r3
   1414c:	1e03      	subs	r3, r0, #0
   1414e:	d060      	beq.n	14212 <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   14150:	4b33      	ldr	r3, [pc, #204]	; (14220 <vTask_sleep_manager+0xe0>)
   14152:	781b      	ldrb	r3, [r3, #0]
   14154:	2201      	movs	r2, #1
   14156:	4053      	eors	r3, r2
   14158:	b2db      	uxtb	r3, r3
   1415a:	2b00      	cmp	r3, #0
   1415c:	d008      	beq.n	14170 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   1415e:	4b31      	ldr	r3, [pc, #196]	; (14224 <vTask_sleep_manager+0xe4>)
   14160:	4798      	blx	r3
   14162:	0002      	movs	r2, r0
   14164:	4b30      	ldr	r3, [pc, #192]	; (14228 <vTask_sleep_manager+0xe8>)
   14166:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   14168:	4b2d      	ldr	r3, [pc, #180]	; (14220 <vTask_sleep_manager+0xe0>)
   1416a:	2201      	movs	r2, #1
   1416c:	701a      	strb	r2, [r3, #0]
   1416e:	e7eb      	b.n	14148 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   14170:	4b2b      	ldr	r3, [pc, #172]	; (14220 <vTask_sleep_manager+0xe0>)
   14172:	781b      	ldrb	r3, [r3, #0]
   14174:	2b00      	cmp	r3, #0
   14176:	d0e7      	beq.n	14148 <vTask_sleep_manager+0x8>
   14178:	4b2a      	ldr	r3, [pc, #168]	; (14224 <vTask_sleep_manager+0xe4>)
   1417a:	4798      	blx	r3
   1417c:	0002      	movs	r2, r0
   1417e:	4b2a      	ldr	r3, [pc, #168]	; (14228 <vTask_sleep_manager+0xe8>)
   14180:	681b      	ldr	r3, [r3, #0]
   14182:	1ad3      	subs	r3, r2, r3
   14184:	4a29      	ldr	r2, [pc, #164]	; (1422c <vTask_sleep_manager+0xec>)
   14186:	4293      	cmp	r3, r2
   14188:	d9de      	bls.n	14148 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   1418a:	230f      	movs	r3, #15
   1418c:	18fb      	adds	r3, r7, r3
   1418e:	220a      	movs	r2, #10
   14190:	701a      	strb	r2, [r3, #0]
				bool led=false;
   14192:	230e      	movs	r3, #14
   14194:	18fb      	adds	r3, r7, r3
   14196:	2200      	movs	r2, #0
   14198:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   1419a:	230e      	movs	r3, #14
   1419c:	18fb      	adds	r3, r7, r3
   1419e:	781b      	ldrb	r3, [r3, #0]
   141a0:	1e5a      	subs	r2, r3, #1
   141a2:	4193      	sbcs	r3, r2
   141a4:	b2db      	uxtb	r3, r3
   141a6:	2201      	movs	r2, #1
   141a8:	4053      	eors	r3, r2
   141aa:	b2db      	uxtb	r3, r3
   141ac:	001a      	movs	r2, r3
   141ae:	230e      	movs	r3, #14
   141b0:	18fb      	adds	r3, r7, r3
   141b2:	701a      	strb	r2, [r3, #0]
   141b4:	781a      	ldrb	r2, [r3, #0]
   141b6:	2101      	movs	r1, #1
   141b8:	400a      	ands	r2, r1
   141ba:	701a      	strb	r2, [r3, #0]
					if(led)
   141bc:	230e      	movs	r3, #14
   141be:	18fb      	adds	r3, r7, r3
   141c0:	781b      	ldrb	r3, [r3, #0]
   141c2:	2b00      	cmp	r3, #0
   141c4:	d004      	beq.n	141d0 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   141c6:	2100      	movs	r1, #0
   141c8:	2027      	movs	r0, #39	; 0x27
   141ca:	4b19      	ldr	r3, [pc, #100]	; (14230 <vTask_sleep_manager+0xf0>)
   141cc:	4798      	blx	r3
   141ce:	e003      	b.n	141d8 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   141d0:	2101      	movs	r1, #1
   141d2:	2027      	movs	r0, #39	; 0x27
   141d4:	4b16      	ldr	r3, [pc, #88]	; (14230 <vTask_sleep_manager+0xf0>)
   141d6:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   141d8:	4b12      	ldr	r3, [pc, #72]	; (14224 <vTask_sleep_manager+0xe4>)
   141da:	4798      	blx	r3
   141dc:	0002      	movs	r2, r0
   141de:	4b12      	ldr	r3, [pc, #72]	; (14228 <vTask_sleep_manager+0xe8>)
   141e0:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   141e2:	46c0      	nop			; (mov r8, r8)
   141e4:	4b0f      	ldr	r3, [pc, #60]	; (14224 <vTask_sleep_manager+0xe4>)
   141e6:	4798      	blx	r3
   141e8:	0002      	movs	r2, r0
   141ea:	4b0f      	ldr	r3, [pc, #60]	; (14228 <vTask_sleep_manager+0xe8>)
   141ec:	681b      	ldr	r3, [r3, #0]
   141ee:	1ad3      	subs	r3, r2, r3
   141f0:	2bc7      	cmp	r3, #199	; 0xc7
   141f2:	d9f7      	bls.n	141e4 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   141f4:	230f      	movs	r3, #15
   141f6:	18fb      	adds	r3, r7, r3
   141f8:	220f      	movs	r2, #15
   141fa:	18ba      	adds	r2, r7, r2
   141fc:	7812      	ldrb	r2, [r2, #0]
   141fe:	3a01      	subs	r2, #1
   14200:	701a      	strb	r2, [r3, #0]
   14202:	230f      	movs	r3, #15
   14204:	18fb      	adds	r3, r7, r3
   14206:	781b      	ldrb	r3, [r3, #0]
   14208:	2b00      	cmp	r3, #0
   1420a:	d1c6      	bne.n	1419a <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   1420c:	4b09      	ldr	r3, [pc, #36]	; (14234 <vTask_sleep_manager+0xf4>)
   1420e:	4798      	blx	r3
   14210:	e79a      	b.n	14148 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   14212:	4b03      	ldr	r3, [pc, #12]	; (14220 <vTask_sleep_manager+0xe0>)
   14214:	2200      	movs	r2, #0
   14216:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   14218:	e796      	b.n	14148 <vTask_sleep_manager+0x8>
   1421a:	46c0      	nop			; (mov r8, r8)
   1421c:	000140f9 	.word	0x000140f9
   14220:	2000050c 	.word	0x2000050c
   14224:	0000f40d 	.word	0x0000f40d
   14228:	20000510 	.word	0x20000510
   1422c:	00004650 	.word	0x00004650
   14230:	00014005 	.word	0x00014005
   14234:	00014239 	.word	0x00014239

00014238 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   14238:	b580      	push	{r7, lr}
   1423a:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   1423c:	4b04      	ldr	r3, [pc, #16]	; (14250 <gotoSleep+0x18>)
   1423e:	4798      	blx	r3
	
	lcd_in_sleep = true;
   14240:	4b04      	ldr	r3, [pc, #16]	; (14254 <gotoSleep+0x1c>)
   14242:	2201      	movs	r2, #1
   14244:	701a      	strb	r2, [r3, #0]
	system_sleep();
   14246:	4b04      	ldr	r3, [pc, #16]	; (14258 <gotoSleep+0x20>)
   14248:	4798      	blx	r3
   1424a:	46c0      	nop			; (mov r8, r8)
   1424c:	46bd      	mov	sp, r7
   1424e:	bd80      	pop	{r7, pc}
   14250:	000039c1 	.word	0x000039c1
   14254:	20000818 	.word	0x20000818
   14258:	00013fd1 	.word	0x00013fd1

0001425c <pow>:
   1425c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1425e:	4657      	mov	r7, sl
   14260:	464e      	mov	r6, r9
   14262:	46de      	mov	lr, fp
   14264:	4645      	mov	r5, r8
   14266:	b5e0      	push	{r5, r6, r7, lr}
   14268:	b08f      	sub	sp, #60	; 0x3c
   1426a:	001d      	movs	r5, r3
   1426c:	0006      	movs	r6, r0
   1426e:	000f      	movs	r7, r1
   14270:	0014      	movs	r4, r2
   14272:	f000 f9ff 	bl	14674 <__ieee754_pow>
   14276:	4bc7      	ldr	r3, [pc, #796]	; (14594 <pow+0x338>)
   14278:	9000      	str	r0, [sp, #0]
   1427a:	9101      	str	r1, [sp, #4]
   1427c:	469a      	mov	sl, r3
   1427e:	781b      	ldrb	r3, [r3, #0]
   14280:	b25b      	sxtb	r3, r3
   14282:	4699      	mov	r9, r3
   14284:	3301      	adds	r3, #1
   14286:	d03e      	beq.n	14306 <pow+0xaa>
   14288:	0022      	movs	r2, r4
   1428a:	002b      	movs	r3, r5
   1428c:	0020      	movs	r0, r4
   1428e:	0029      	movs	r1, r5
   14290:	f003 fb92 	bl	179b8 <__aeabi_dcmpun>
   14294:	4683      	mov	fp, r0
   14296:	2800      	cmp	r0, #0
   14298:	d135      	bne.n	14306 <pow+0xaa>
   1429a:	0032      	movs	r2, r6
   1429c:	003b      	movs	r3, r7
   1429e:	0030      	movs	r0, r6
   142a0:	0039      	movs	r1, r7
   142a2:	f003 fb89 	bl	179b8 <__aeabi_dcmpun>
   142a6:	2200      	movs	r2, #0
   142a8:	9003      	str	r0, [sp, #12]
   142aa:	2800      	cmp	r0, #0
   142ac:	d000      	beq.n	142b0 <pow+0x54>
   142ae:	e0b6      	b.n	1441e <pow+0x1c2>
   142b0:	2300      	movs	r3, #0
   142b2:	0030      	movs	r0, r6
   142b4:	0039      	movs	r1, r7
   142b6:	f001 faa1 	bl	157fc <__aeabi_dcmpeq>
   142ba:	2800      	cmp	r0, #0
   142bc:	d02c      	beq.n	14318 <pow+0xbc>
   142be:	2200      	movs	r2, #0
   142c0:	2300      	movs	r3, #0
   142c2:	0020      	movs	r0, r4
   142c4:	0029      	movs	r1, r5
   142c6:	f001 fa99 	bl	157fc <__aeabi_dcmpeq>
   142ca:	4683      	mov	fp, r0
   142cc:	2800      	cmp	r0, #0
   142ce:	d100      	bne.n	142d2 <pow+0x76>
   142d0:	e077      	b.n	143c2 <pow+0x166>
   142d2:	ab04      	add	r3, sp, #16
   142d4:	4698      	mov	r8, r3
   142d6:	2301      	movs	r3, #1
   142d8:	4642      	mov	r2, r8
   142da:	9304      	str	r3, [sp, #16]
   142dc:	4bae      	ldr	r3, [pc, #696]	; (14598 <pow+0x33c>)
   142de:	6053      	str	r3, [r2, #4]
   142e0:	4643      	mov	r3, r8
   142e2:	9a03      	ldr	r2, [sp, #12]
   142e4:	611c      	str	r4, [r3, #16]
   142e6:	615d      	str	r5, [r3, #20]
   142e8:	621a      	str	r2, [r3, #32]
   142ea:	609e      	str	r6, [r3, #8]
   142ec:	60df      	str	r7, [r3, #12]
   142ee:	4642      	mov	r2, r8
   142f0:	2300      	movs	r3, #0
   142f2:	2400      	movs	r4, #0
   142f4:	6193      	str	r3, [r2, #24]
   142f6:	61d4      	str	r4, [r2, #28]
   142f8:	464b      	mov	r3, r9
   142fa:	2b00      	cmp	r3, #0
   142fc:	d04d      	beq.n	1439a <pow+0x13e>
   142fe:	2300      	movs	r3, #0
   14300:	4ca6      	ldr	r4, [pc, #664]	; (1459c <pow+0x340>)
   14302:	9300      	str	r3, [sp, #0]
   14304:	9401      	str	r4, [sp, #4]
   14306:	9800      	ldr	r0, [sp, #0]
   14308:	9901      	ldr	r1, [sp, #4]
   1430a:	b00f      	add	sp, #60	; 0x3c
   1430c:	bc3c      	pop	{r2, r3, r4, r5}
   1430e:	4690      	mov	r8, r2
   14310:	4699      	mov	r9, r3
   14312:	46a2      	mov	sl, r4
   14314:	46ab      	mov	fp, r5
   14316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14318:	9800      	ldr	r0, [sp, #0]
   1431a:	9901      	ldr	r1, [sp, #4]
   1431c:	f000 ffc4 	bl	152a8 <finite>
   14320:	4681      	mov	r9, r0
   14322:	2800      	cmp	r0, #0
   14324:	d100      	bne.n	14328 <pow+0xcc>
   14326:	e09b      	b.n	14460 <pow+0x204>
   14328:	9800      	ldr	r0, [sp, #0]
   1432a:	9901      	ldr	r1, [sp, #4]
   1432c:	2200      	movs	r2, #0
   1432e:	2300      	movs	r3, #0
   14330:	f001 fa64 	bl	157fc <__aeabi_dcmpeq>
   14334:	2800      	cmp	r0, #0
   14336:	d0e6      	beq.n	14306 <pow+0xaa>
   14338:	0030      	movs	r0, r6
   1433a:	0039      	movs	r1, r7
   1433c:	f000 ffb4 	bl	152a8 <finite>
   14340:	2800      	cmp	r0, #0
   14342:	d0e0      	beq.n	14306 <pow+0xaa>
   14344:	0020      	movs	r0, r4
   14346:	0029      	movs	r1, r5
   14348:	f000 ffae 	bl	152a8 <finite>
   1434c:	2800      	cmp	r0, #0
   1434e:	d0da      	beq.n	14306 <pow+0xaa>
   14350:	ab04      	add	r3, sp, #16
   14352:	4698      	mov	r8, r3
   14354:	2304      	movs	r3, #4
   14356:	4642      	mov	r2, r8
   14358:	9304      	str	r3, [sp, #16]
   1435a:	4b8f      	ldr	r3, [pc, #572]	; (14598 <pow+0x33c>)
   1435c:	6114      	str	r4, [r2, #16]
   1435e:	6155      	str	r5, [r2, #20]
   14360:	6053      	str	r3, [r2, #4]
   14362:	2300      	movs	r3, #0
   14364:	2400      	movs	r4, #0
   14366:	6213      	str	r3, [r2, #32]
   14368:	2300      	movs	r3, #0
   1436a:	6193      	str	r3, [r2, #24]
   1436c:	61d4      	str	r4, [r2, #28]
   1436e:	4653      	mov	r3, sl
   14370:	781b      	ldrb	r3, [r3, #0]
   14372:	6096      	str	r6, [r2, #8]
   14374:	60d7      	str	r7, [r2, #12]
   14376:	b25b      	sxtb	r3, r3
   14378:	2b02      	cmp	r3, #2
   1437a:	d004      	beq.n	14386 <pow+0x12a>
   1437c:	4640      	mov	r0, r8
   1437e:	f000 ff9d 	bl	152bc <matherr>
   14382:	2800      	cmp	r0, #0
   14384:	d10e      	bne.n	143a4 <pow+0x148>
   14386:	f003 fc71 	bl	17c6c <__errno>
   1438a:	2322      	movs	r3, #34	; 0x22
   1438c:	6003      	str	r3, [r0, #0]
   1438e:	e009      	b.n	143a4 <pow+0x148>
   14390:	4642      	mov	r2, r8
   14392:	2300      	movs	r3, #0
   14394:	2400      	movs	r4, #0
   14396:	6193      	str	r3, [r2, #24]
   14398:	61d4      	str	r4, [r2, #28]
   1439a:	4640      	mov	r0, r8
   1439c:	f000 ff8e 	bl	152bc <matherr>
   143a0:	2800      	cmp	r0, #0
   143a2:	d037      	beq.n	14414 <pow+0x1b8>
   143a4:	4643      	mov	r3, r8
   143a6:	6a1b      	ldr	r3, [r3, #32]
   143a8:	2b00      	cmp	r3, #0
   143aa:	d004      	beq.n	143b6 <pow+0x15a>
   143ac:	f003 fc5e 	bl	17c6c <__errno>
   143b0:	4643      	mov	r3, r8
   143b2:	6a1b      	ldr	r3, [r3, #32]
   143b4:	6003      	str	r3, [r0, #0]
   143b6:	4643      	mov	r3, r8
   143b8:	69dc      	ldr	r4, [r3, #28]
   143ba:	699b      	ldr	r3, [r3, #24]
   143bc:	9300      	str	r3, [sp, #0]
   143be:	9401      	str	r4, [sp, #4]
   143c0:	e7a1      	b.n	14306 <pow+0xaa>
   143c2:	0020      	movs	r0, r4
   143c4:	0029      	movs	r1, r5
   143c6:	f000 ff6f 	bl	152a8 <finite>
   143ca:	2800      	cmp	r0, #0
   143cc:	d09b      	beq.n	14306 <pow+0xaa>
   143ce:	2200      	movs	r2, #0
   143d0:	2300      	movs	r3, #0
   143d2:	0020      	movs	r0, r4
   143d4:	0029      	movs	r1, r5
   143d6:	f001 fa17 	bl	15808 <__aeabi_dcmplt>
   143da:	2800      	cmp	r0, #0
   143dc:	d100      	bne.n	143e0 <pow+0x184>
   143de:	e792      	b.n	14306 <pow+0xaa>
   143e0:	ab04      	add	r3, sp, #16
   143e2:	4698      	mov	r8, r3
   143e4:	2301      	movs	r3, #1
   143e6:	4642      	mov	r2, r8
   143e8:	9304      	str	r3, [sp, #16]
   143ea:	4b6b      	ldr	r3, [pc, #428]	; (14598 <pow+0x33c>)
   143ec:	6053      	str	r3, [r2, #4]
   143ee:	4643      	mov	r3, r8
   143f0:	465a      	mov	r2, fp
   143f2:	609e      	str	r6, [r3, #8]
   143f4:	60df      	str	r7, [r3, #12]
   143f6:	621a      	str	r2, [r3, #32]
   143f8:	611c      	str	r4, [r3, #16]
   143fa:	615d      	str	r5, [r3, #20]
   143fc:	4653      	mov	r3, sl
   143fe:	781b      	ldrb	r3, [r3, #0]
   14400:	b25b      	sxtb	r3, r3
   14402:	2b00      	cmp	r3, #0
   14404:	d0c4      	beq.n	14390 <pow+0x134>
   14406:	2000      	movs	r0, #0
   14408:	4642      	mov	r2, r8
   1440a:	4965      	ldr	r1, [pc, #404]	; (145a0 <pow+0x344>)
   1440c:	6190      	str	r0, [r2, #24]
   1440e:	61d1      	str	r1, [r2, #28]
   14410:	2b02      	cmp	r3, #2
   14412:	d1c2      	bne.n	1439a <pow+0x13e>
   14414:	f003 fc2a 	bl	17c6c <__errno>
   14418:	2321      	movs	r3, #33	; 0x21
   1441a:	6003      	str	r3, [r0, #0]
   1441c:	e7c2      	b.n	143a4 <pow+0x148>
   1441e:	2300      	movs	r3, #0
   14420:	0020      	movs	r0, r4
   14422:	0029      	movs	r1, r5
   14424:	f001 f9ea 	bl	157fc <__aeabi_dcmpeq>
   14428:	2800      	cmp	r0, #0
   1442a:	d100      	bne.n	1442e <pow+0x1d2>
   1442c:	e76b      	b.n	14306 <pow+0xaa>
   1442e:	ab04      	add	r3, sp, #16
   14430:	4698      	mov	r8, r3
   14432:	2301      	movs	r3, #1
   14434:	4642      	mov	r2, r8
   14436:	9304      	str	r3, [sp, #16]
   14438:	4b57      	ldr	r3, [pc, #348]	; (14598 <pow+0x33c>)
   1443a:	4641      	mov	r1, r8
   1443c:	6053      	str	r3, [r2, #4]
   1443e:	4643      	mov	r3, r8
   14440:	465a      	mov	r2, fp
   14442:	621a      	str	r2, [r3, #32]
   14444:	2200      	movs	r2, #0
   14446:	609e      	str	r6, [r3, #8]
   14448:	60df      	str	r7, [r3, #12]
   1444a:	611c      	str	r4, [r3, #16]
   1444c:	615d      	str	r5, [r3, #20]
   1444e:	4b53      	ldr	r3, [pc, #332]	; (1459c <pow+0x340>)
   14450:	618a      	str	r2, [r1, #24]
   14452:	61cb      	str	r3, [r1, #28]
   14454:	9200      	str	r2, [sp, #0]
   14456:	9301      	str	r3, [sp, #4]
   14458:	464b      	mov	r3, r9
   1445a:	2b02      	cmp	r3, #2
   1445c:	d19d      	bne.n	1439a <pow+0x13e>
   1445e:	e752      	b.n	14306 <pow+0xaa>
   14460:	0030      	movs	r0, r6
   14462:	0039      	movs	r1, r7
   14464:	f000 ff20 	bl	152a8 <finite>
   14468:	2800      	cmp	r0, #0
   1446a:	d100      	bne.n	1446e <pow+0x212>
   1446c:	e75c      	b.n	14328 <pow+0xcc>
   1446e:	0020      	movs	r0, r4
   14470:	0029      	movs	r1, r5
   14472:	f000 ff19 	bl	152a8 <finite>
   14476:	2800      	cmp	r0, #0
   14478:	d100      	bne.n	1447c <pow+0x220>
   1447a:	e755      	b.n	14328 <pow+0xcc>
   1447c:	9800      	ldr	r0, [sp, #0]
   1447e:	9901      	ldr	r1, [sp, #4]
   14480:	000b      	movs	r3, r1
   14482:	0002      	movs	r2, r0
   14484:	f003 fa98 	bl	179b8 <__aeabi_dcmpun>
   14488:	ab04      	add	r3, sp, #16
   1448a:	4698      	mov	r8, r3
   1448c:	2800      	cmp	r0, #0
   1448e:	d161      	bne.n	14554 <pow+0x2f8>
   14490:	2303      	movs	r3, #3
   14492:	4642      	mov	r2, r8
   14494:	9304      	str	r3, [sp, #16]
   14496:	4b40      	ldr	r3, [pc, #256]	; (14598 <pow+0x33c>)
   14498:	6210      	str	r0, [r2, #32]
   1449a:	6053      	str	r3, [r2, #4]
   1449c:	4653      	mov	r3, sl
   1449e:	781b      	ldrb	r3, [r3, #0]
   144a0:	6096      	str	r6, [r2, #8]
   144a2:	60d7      	str	r7, [r2, #12]
   144a4:	b25b      	sxtb	r3, r3
   144a6:	6114      	str	r4, [r2, #16]
   144a8:	6155      	str	r5, [r2, #20]
   144aa:	4699      	mov	r9, r3
   144ac:	2b00      	cmp	r3, #0
   144ae:	d12f      	bne.n	14510 <pow+0x2b4>
   144b0:	22e0      	movs	r2, #224	; 0xe0
   144b2:	4641      	mov	r1, r8
   144b4:	4b3b      	ldr	r3, [pc, #236]	; (145a4 <pow+0x348>)
   144b6:	0612      	lsls	r2, r2, #24
   144b8:	618a      	str	r2, [r1, #24]
   144ba:	61cb      	str	r3, [r1, #28]
   144bc:	0030      	movs	r0, r6
   144be:	2200      	movs	r2, #0
   144c0:	2300      	movs	r3, #0
   144c2:	0039      	movs	r1, r7
   144c4:	f001 f9a0 	bl	15808 <__aeabi_dcmplt>
   144c8:	2800      	cmp	r0, #0
   144ca:	d100      	bne.n	144ce <pow+0x272>
   144cc:	e756      	b.n	1437c <pow+0x120>
   144ce:	2200      	movs	r2, #0
   144d0:	4b35      	ldr	r3, [pc, #212]	; (145a8 <pow+0x34c>)
   144d2:	0020      	movs	r0, r4
   144d4:	0029      	movs	r1, r5
   144d6:	f002 fcd9 	bl	16e8c <__aeabi_dmul>
   144da:	0004      	movs	r4, r0
   144dc:	000d      	movs	r5, r1
   144de:	f000 fef5 	bl	152cc <rint>
   144e2:	0002      	movs	r2, r0
   144e4:	000b      	movs	r3, r1
   144e6:	0020      	movs	r0, r4
   144e8:	0029      	movs	r1, r5
   144ea:	f001 f987 	bl	157fc <__aeabi_dcmpeq>
   144ee:	2800      	cmp	r0, #0
   144f0:	d105      	bne.n	144fe <pow+0x2a2>
   144f2:	22e0      	movs	r2, #224	; 0xe0
   144f4:	4b2d      	ldr	r3, [pc, #180]	; (145ac <pow+0x350>)
   144f6:	0612      	lsls	r2, r2, #24
   144f8:	4641      	mov	r1, r8
   144fa:	618a      	str	r2, [r1, #24]
   144fc:	61cb      	str	r3, [r1, #28]
   144fe:	4653      	mov	r3, sl
   14500:	781b      	ldrb	r3, [r3, #0]
   14502:	b25b      	sxtb	r3, r3
   14504:	4699      	mov	r9, r3
   14506:	464b      	mov	r3, r9
   14508:	2b02      	cmp	r3, #2
   1450a:	d000      	beq.n	1450e <pow+0x2b2>
   1450c:	e736      	b.n	1437c <pow+0x120>
   1450e:	e73a      	b.n	14386 <pow+0x12a>
   14510:	2200      	movs	r2, #0
   14512:	4641      	mov	r1, r8
   14514:	4b26      	ldr	r3, [pc, #152]	; (145b0 <pow+0x354>)
   14516:	0030      	movs	r0, r6
   14518:	618a      	str	r2, [r1, #24]
   1451a:	61cb      	str	r3, [r1, #28]
   1451c:	2200      	movs	r2, #0
   1451e:	2300      	movs	r3, #0
   14520:	0039      	movs	r1, r7
   14522:	f001 f971 	bl	15808 <__aeabi_dcmplt>
   14526:	2800      	cmp	r0, #0
   14528:	d0ed      	beq.n	14506 <pow+0x2aa>
   1452a:	2200      	movs	r2, #0
   1452c:	4b1e      	ldr	r3, [pc, #120]	; (145a8 <pow+0x34c>)
   1452e:	0020      	movs	r0, r4
   14530:	0029      	movs	r1, r5
   14532:	f002 fcab 	bl	16e8c <__aeabi_dmul>
   14536:	0004      	movs	r4, r0
   14538:	000d      	movs	r5, r1
   1453a:	f000 fec7 	bl	152cc <rint>
   1453e:	0002      	movs	r2, r0
   14540:	000b      	movs	r3, r1
   14542:	0020      	movs	r0, r4
   14544:	0029      	movs	r1, r5
   14546:	f001 f959 	bl	157fc <__aeabi_dcmpeq>
   1454a:	2800      	cmp	r0, #0
   1454c:	d1d7      	bne.n	144fe <pow+0x2a2>
   1454e:	2200      	movs	r2, #0
   14550:	4b13      	ldr	r3, [pc, #76]	; (145a0 <pow+0x344>)
   14552:	e7d1      	b.n	144f8 <pow+0x29c>
   14554:	2301      	movs	r3, #1
   14556:	4642      	mov	r2, r8
   14558:	9304      	str	r3, [sp, #16]
   1455a:	4b0f      	ldr	r3, [pc, #60]	; (14598 <pow+0x33c>)
   1455c:	6053      	str	r3, [r2, #4]
   1455e:	4643      	mov	r3, r8
   14560:	464a      	mov	r2, r9
   14562:	611c      	str	r4, [r3, #16]
   14564:	615d      	str	r5, [r3, #20]
   14566:	621a      	str	r2, [r3, #32]
   14568:	609e      	str	r6, [r3, #8]
   1456a:	60df      	str	r7, [r3, #12]
   1456c:	2400      	movs	r4, #0
   1456e:	4653      	mov	r3, sl
   14570:	571c      	ldrsb	r4, [r3, r4]
   14572:	2c00      	cmp	r4, #0
   14574:	d100      	bne.n	14578 <pow+0x31c>
   14576:	e70b      	b.n	14390 <pow+0x134>
   14578:	2300      	movs	r3, #0
   1457a:	2200      	movs	r2, #0
   1457c:	0019      	movs	r1, r3
   1457e:	0010      	movs	r0, r2
   14580:	f002 f850 	bl	16624 <__aeabi_ddiv>
   14584:	4643      	mov	r3, r8
   14586:	6198      	str	r0, [r3, #24]
   14588:	61d9      	str	r1, [r3, #28]
   1458a:	2c02      	cmp	r4, #2
   1458c:	d100      	bne.n	14590 <pow+0x334>
   1458e:	e741      	b.n	14414 <pow+0x1b8>
   14590:	e703      	b.n	1439a <pow+0x13e>
   14592:	46c0      	nop			; (mov r8, r8)
   14594:	20000029 	.word	0x20000029
   14598:	00019af0 	.word	0x00019af0
   1459c:	3ff00000 	.word	0x3ff00000
   145a0:	fff00000 	.word	0xfff00000
   145a4:	47efffff 	.word	0x47efffff
   145a8:	3fe00000 	.word	0x3fe00000
   145ac:	c7efffff 	.word	0xc7efffff
   145b0:	7ff00000 	.word	0x7ff00000

000145b4 <sqrt>:
   145b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   145b6:	4647      	mov	r7, r8
   145b8:	46ce      	mov	lr, r9
   145ba:	b580      	push	{r7, lr}
   145bc:	b08d      	sub	sp, #52	; 0x34
   145be:	0004      	movs	r4, r0
   145c0:	000d      	movs	r5, r1
   145c2:	f000 fd8d 	bl	150e0 <__ieee754_sqrt>
   145c6:	4b29      	ldr	r3, [pc, #164]	; (1466c <sqrt+0xb8>)
   145c8:	0006      	movs	r6, r0
   145ca:	781b      	ldrb	r3, [r3, #0]
   145cc:	000f      	movs	r7, r1
   145ce:	b25b      	sxtb	r3, r3
   145d0:	4698      	mov	r8, r3
   145d2:	3301      	adds	r3, #1
   145d4:	d010      	beq.n	145f8 <sqrt+0x44>
   145d6:	0022      	movs	r2, r4
   145d8:	002b      	movs	r3, r5
   145da:	0020      	movs	r0, r4
   145dc:	0029      	movs	r1, r5
   145de:	f003 f9eb 	bl	179b8 <__aeabi_dcmpun>
   145e2:	4681      	mov	r9, r0
   145e4:	2800      	cmp	r0, #0
   145e6:	d107      	bne.n	145f8 <sqrt+0x44>
   145e8:	2200      	movs	r2, #0
   145ea:	2300      	movs	r3, #0
   145ec:	0020      	movs	r0, r4
   145ee:	0029      	movs	r1, r5
   145f0:	f001 f90a 	bl	15808 <__aeabi_dcmplt>
   145f4:	2800      	cmp	r0, #0
   145f6:	d106      	bne.n	14606 <sqrt+0x52>
   145f8:	0030      	movs	r0, r6
   145fa:	0039      	movs	r1, r7
   145fc:	b00d      	add	sp, #52	; 0x34
   145fe:	bc0c      	pop	{r2, r3}
   14600:	4690      	mov	r8, r2
   14602:	4699      	mov	r9, r3
   14604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14606:	2301      	movs	r3, #1
   14608:	9302      	str	r3, [sp, #8]
   1460a:	4b19      	ldr	r3, [pc, #100]	; (14670 <sqrt+0xbc>)
   1460c:	9406      	str	r4, [sp, #24]
   1460e:	9507      	str	r5, [sp, #28]
   14610:	9303      	str	r3, [sp, #12]
   14612:	464b      	mov	r3, r9
   14614:	930a      	str	r3, [sp, #40]	; 0x28
   14616:	4643      	mov	r3, r8
   14618:	9404      	str	r4, [sp, #16]
   1461a:	9505      	str	r5, [sp, #20]
   1461c:	2b00      	cmp	r3, #0
   1461e:	d015      	beq.n	1464c <sqrt+0x98>
   14620:	2300      	movs	r3, #0
   14622:	2200      	movs	r2, #0
   14624:	0019      	movs	r1, r3
   14626:	0010      	movs	r0, r2
   14628:	f001 fffc 	bl	16624 <__aeabi_ddiv>
   1462c:	4643      	mov	r3, r8
   1462e:	9008      	str	r0, [sp, #32]
   14630:	9109      	str	r1, [sp, #36]	; 0x24
   14632:	2b02      	cmp	r3, #2
   14634:	d10e      	bne.n	14654 <sqrt+0xa0>
   14636:	f003 fb19 	bl	17c6c <__errno>
   1463a:	2321      	movs	r3, #33	; 0x21
   1463c:	6003      	str	r3, [r0, #0]
   1463e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14640:	9301      	str	r3, [sp, #4]
   14642:	2b00      	cmp	r3, #0
   14644:	d10c      	bne.n	14660 <sqrt+0xac>
   14646:	9e08      	ldr	r6, [sp, #32]
   14648:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1464a:	e7d5      	b.n	145f8 <sqrt+0x44>
   1464c:	2300      	movs	r3, #0
   1464e:	2400      	movs	r4, #0
   14650:	9308      	str	r3, [sp, #32]
   14652:	9409      	str	r4, [sp, #36]	; 0x24
   14654:	a802      	add	r0, sp, #8
   14656:	f000 fe31 	bl	152bc <matherr>
   1465a:	2800      	cmp	r0, #0
   1465c:	d1ef      	bne.n	1463e <sqrt+0x8a>
   1465e:	e7ea      	b.n	14636 <sqrt+0x82>
   14660:	f003 fb04 	bl	17c6c <__errno>
   14664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14666:	9301      	str	r3, [sp, #4]
   14668:	6003      	str	r3, [r0, #0]
   1466a:	e7ec      	b.n	14646 <sqrt+0x92>
   1466c:	20000029 	.word	0x20000029
   14670:	00019af4 	.word	0x00019af4

00014674 <__ieee754_pow>:
   14674:	b5f0      	push	{r4, r5, r6, r7, lr}
   14676:	4657      	mov	r7, sl
   14678:	464e      	mov	r6, r9
   1467a:	4645      	mov	r5, r8
   1467c:	46de      	mov	lr, fp
   1467e:	001c      	movs	r4, r3
   14680:	0013      	movs	r3, r2
   14682:	b5e0      	push	{r5, r6, r7, lr}
   14684:	0065      	lsls	r5, r4, #1
   14686:	b091      	sub	sp, #68	; 0x44
   14688:	086d      	lsrs	r5, r5, #1
   1468a:	9300      	str	r3, [sp, #0]
   1468c:	9401      	str	r4, [sp, #4]
   1468e:	0007      	movs	r7, r0
   14690:	000e      	movs	r6, r1
   14692:	4680      	mov	r8, r0
   14694:	4689      	mov	r9, r1
   14696:	46a2      	mov	sl, r4
   14698:	432b      	orrs	r3, r5
   1469a:	d031      	beq.n	14700 <__ieee754_pow+0x8c>
   1469c:	4b67      	ldr	r3, [pc, #412]	; (1483c <__ieee754_pow+0x1c8>)
   1469e:	0074      	lsls	r4, r6, #1
   146a0:	0864      	lsrs	r4, r4, #1
   146a2:	429c      	cmp	r4, r3
   146a4:	dc27      	bgt.n	146f6 <__ieee754_pow+0x82>
   146a6:	d024      	beq.n	146f2 <__ieee754_pow+0x7e>
   146a8:	429d      	cmp	r5, r3
   146aa:	dc24      	bgt.n	146f6 <__ieee754_pow+0x82>
   146ac:	4b63      	ldr	r3, [pc, #396]	; (1483c <__ieee754_pow+0x1c8>)
   146ae:	429d      	cmp	r5, r3
   146b0:	d100      	bne.n	146b4 <__ieee754_pow+0x40>
   146b2:	e081      	b.n	147b8 <__ieee754_pow+0x144>
   146b4:	2300      	movs	r3, #0
   146b6:	469b      	mov	fp, r3
   146b8:	464b      	mov	r3, r9
   146ba:	2b00      	cmp	r3, #0
   146bc:	da00      	bge.n	146c0 <__ieee754_pow+0x4c>
   146be:	e07f      	b.n	147c0 <__ieee754_pow+0x14c>
   146c0:	2a00      	cmp	r2, #0
   146c2:	d12c      	bne.n	1471e <__ieee754_pow+0xaa>
   146c4:	4b5d      	ldr	r3, [pc, #372]	; (1483c <__ieee754_pow+0x1c8>)
   146c6:	429d      	cmp	r5, r3
   146c8:	d100      	bne.n	146cc <__ieee754_pow+0x58>
   146ca:	e097      	b.n	147fc <__ieee754_pow+0x188>
   146cc:	4b5c      	ldr	r3, [pc, #368]	; (14840 <__ieee754_pow+0x1cc>)
   146ce:	429d      	cmp	r5, r3
   146d0:	d066      	beq.n	147a0 <__ieee754_pow+0x12c>
   146d2:	2380      	movs	r3, #128	; 0x80
   146d4:	05db      	lsls	r3, r3, #23
   146d6:	459a      	cmp	sl, r3
   146d8:	d100      	bne.n	146dc <__ieee754_pow+0x68>
   146da:	e3b9      	b.n	14e50 <__ieee754_pow+0x7dc>
   146dc:	4b59      	ldr	r3, [pc, #356]	; (14844 <__ieee754_pow+0x1d0>)
   146de:	459a      	cmp	sl, r3
   146e0:	d11d      	bne.n	1471e <__ieee754_pow+0xaa>
   146e2:	464b      	mov	r3, r9
   146e4:	2b00      	cmp	r3, #0
   146e6:	db1a      	blt.n	1471e <__ieee754_pow+0xaa>
   146e8:	0038      	movs	r0, r7
   146ea:	0031      	movs	r1, r6
   146ec:	f000 fcf8 	bl	150e0 <__ieee754_sqrt>
   146f0:	e008      	b.n	14704 <__ieee754_pow+0x90>
   146f2:	2800      	cmp	r0, #0
   146f4:	d00d      	beq.n	14712 <__ieee754_pow+0x9e>
   146f6:	4b54      	ldr	r3, [pc, #336]	; (14848 <__ieee754_pow+0x1d4>)
   146f8:	469c      	mov	ip, r3
   146fa:	4464      	add	r4, ip
   146fc:	4327      	orrs	r7, r4
   146fe:	d10a      	bne.n	14716 <__ieee754_pow+0xa2>
   14700:	2000      	movs	r0, #0
   14702:	494f      	ldr	r1, [pc, #316]	; (14840 <__ieee754_pow+0x1cc>)
   14704:	b011      	add	sp, #68	; 0x44
   14706:	bc3c      	pop	{r2, r3, r4, r5}
   14708:	4690      	mov	r8, r2
   1470a:	4699      	mov	r9, r3
   1470c:	46a2      	mov	sl, r4
   1470e:	46ab      	mov	fp, r5
   14710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14712:	42a5      	cmp	r5, r4
   14714:	ddca      	ble.n	146ac <__ieee754_pow+0x38>
   14716:	484d      	ldr	r0, [pc, #308]	; (1484c <__ieee754_pow+0x1d8>)
   14718:	f000 fdd2 	bl	152c0 <nan>
   1471c:	e7f2      	b.n	14704 <__ieee754_pow+0x90>
   1471e:	0038      	movs	r0, r7
   14720:	0031      	movs	r1, r6
   14722:	f000 fdbd 	bl	152a0 <fabs>
   14726:	4643      	mov	r3, r8
   14728:	2b00      	cmp	r3, #0
   1472a:	d11d      	bne.n	14768 <__ieee754_pow+0xf4>
   1472c:	2c00      	cmp	r4, #0
   1472e:	d004      	beq.n	1473a <__ieee754_pow+0xc6>
   14730:	4a43      	ldr	r2, [pc, #268]	; (14840 <__ieee754_pow+0x1cc>)
   14732:	00b3      	lsls	r3, r6, #2
   14734:	089b      	lsrs	r3, r3, #2
   14736:	4293      	cmp	r3, r2
   14738:	d116      	bne.n	14768 <__ieee754_pow+0xf4>
   1473a:	4653      	mov	r3, sl
   1473c:	2b00      	cmp	r3, #0
   1473e:	da00      	bge.n	14742 <__ieee754_pow+0xce>
   14740:	e3c5      	b.n	14ece <__ieee754_pow+0x85a>
   14742:	464b      	mov	r3, r9
   14744:	2b00      	cmp	r3, #0
   14746:	dadd      	bge.n	14704 <__ieee754_pow+0x90>
   14748:	4b3f      	ldr	r3, [pc, #252]	; (14848 <__ieee754_pow+0x1d4>)
   1474a:	469c      	mov	ip, r3
   1474c:	465b      	mov	r3, fp
   1474e:	4464      	add	r4, ip
   14750:	431c      	orrs	r4, r3
   14752:	d101      	bne.n	14758 <__ieee754_pow+0xe4>
   14754:	f000 fc53 	bl	14ffe <__ieee754_pow+0x98a>
   14758:	465b      	mov	r3, fp
   1475a:	2b01      	cmp	r3, #1
   1475c:	d1d2      	bne.n	14704 <__ieee754_pow+0x90>
   1475e:	2480      	movs	r4, #128	; 0x80
   14760:	0624      	lsls	r4, r4, #24
   14762:	190b      	adds	r3, r1, r4
   14764:	0019      	movs	r1, r3
   14766:	e7cd      	b.n	14704 <__ieee754_pow+0x90>
   14768:	0ff3      	lsrs	r3, r6, #31
   1476a:	3b01      	subs	r3, #1
   1476c:	4698      	mov	r8, r3
   1476e:	465b      	mov	r3, fp
   14770:	4642      	mov	r2, r8
   14772:	4313      	orrs	r3, r2
   14774:	d057      	beq.n	14826 <__ieee754_pow+0x1b2>
   14776:	4b36      	ldr	r3, [pc, #216]	; (14850 <__ieee754_pow+0x1dc>)
   14778:	429d      	cmp	r5, r3
   1477a:	dd77      	ble.n	1486c <__ieee754_pow+0x1f8>
   1477c:	4b35      	ldr	r3, [pc, #212]	; (14854 <__ieee754_pow+0x1e0>)
   1477e:	429d      	cmp	r5, r3
   14780:	dc00      	bgt.n	14784 <__ieee754_pow+0x110>
   14782:	e3b1      	b.n	14ee8 <__ieee754_pow+0x874>
   14784:	4b34      	ldr	r3, [pc, #208]	; (14858 <__ieee754_pow+0x1e4>)
   14786:	429c      	cmp	r4, r3
   14788:	dc00      	bgt.n	1478c <__ieee754_pow+0x118>
   1478a:	e3a8      	b.n	14ede <__ieee754_pow+0x86a>
   1478c:	4653      	mov	r3, sl
   1478e:	2b00      	cmp	r3, #0
   14790:	dd43      	ble.n	1481a <__ieee754_pow+0x1a6>
   14792:	4a32      	ldr	r2, [pc, #200]	; (1485c <__ieee754_pow+0x1e8>)
   14794:	4b32      	ldr	r3, [pc, #200]	; (14860 <__ieee754_pow+0x1ec>)
   14796:	0010      	movs	r0, r2
   14798:	0019      	movs	r1, r3
   1479a:	f002 fb77 	bl	16e8c <__aeabi_dmul>
   1479e:	e7b1      	b.n	14704 <__ieee754_pow+0x90>
   147a0:	4653      	mov	r3, sl
   147a2:	0038      	movs	r0, r7
   147a4:	0031      	movs	r1, r6
   147a6:	2b00      	cmp	r3, #0
   147a8:	daac      	bge.n	14704 <__ieee754_pow+0x90>
   147aa:	003a      	movs	r2, r7
   147ac:	0033      	movs	r3, r6
   147ae:	2000      	movs	r0, #0
   147b0:	4923      	ldr	r1, [pc, #140]	; (14840 <__ieee754_pow+0x1cc>)
   147b2:	f001 ff37 	bl	16624 <__aeabi_ddiv>
   147b6:	e7a5      	b.n	14704 <__ieee754_pow+0x90>
   147b8:	2a00      	cmp	r2, #0
   147ba:	d100      	bne.n	147be <__ieee754_pow+0x14a>
   147bc:	e77a      	b.n	146b4 <__ieee754_pow+0x40>
   147be:	e79a      	b.n	146f6 <__ieee754_pow+0x82>
   147c0:	4b28      	ldr	r3, [pc, #160]	; (14864 <__ieee754_pow+0x1f0>)
   147c2:	429d      	cmp	r5, r3
   147c4:	dc2c      	bgt.n	14820 <__ieee754_pow+0x1ac>
   147c6:	4b24      	ldr	r3, [pc, #144]	; (14858 <__ieee754_pow+0x1e4>)
   147c8:	429d      	cmp	r5, r3
   147ca:	dc00      	bgt.n	147ce <__ieee754_pow+0x15a>
   147cc:	e778      	b.n	146c0 <__ieee754_pow+0x4c>
   147ce:	4926      	ldr	r1, [pc, #152]	; (14868 <__ieee754_pow+0x1f4>)
   147d0:	152b      	asrs	r3, r5, #20
   147d2:	468c      	mov	ip, r1
   147d4:	4463      	add	r3, ip
   147d6:	2b14      	cmp	r3, #20
   147d8:	dc01      	bgt.n	147de <__ieee754_pow+0x16a>
   147da:	f000 fbf3 	bl	14fc4 <__ieee754_pow+0x950>
   147de:	2134      	movs	r1, #52	; 0x34
   147e0:	1acb      	subs	r3, r1, r3
   147e2:	9900      	ldr	r1, [sp, #0]
   147e4:	40d9      	lsrs	r1, r3
   147e6:	0008      	movs	r0, r1
   147e8:	4098      	lsls	r0, r3
   147ea:	4282      	cmp	r2, r0
   147ec:	d000      	beq.n	147f0 <__ieee754_pow+0x17c>
   147ee:	e767      	b.n	146c0 <__ieee754_pow+0x4c>
   147f0:	2301      	movs	r3, #1
   147f2:	4019      	ands	r1, r3
   147f4:	3301      	adds	r3, #1
   147f6:	1a5b      	subs	r3, r3, r1
   147f8:	469b      	mov	fp, r3
   147fa:	e761      	b.n	146c0 <__ieee754_pow+0x4c>
   147fc:	4b12      	ldr	r3, [pc, #72]	; (14848 <__ieee754_pow+0x1d4>)
   147fe:	18e3      	adds	r3, r4, r3
   14800:	431f      	orrs	r7, r3
   14802:	d100      	bne.n	14806 <__ieee754_pow+0x192>
   14804:	e77c      	b.n	14700 <__ieee754_pow+0x8c>
   14806:	4b14      	ldr	r3, [pc, #80]	; (14858 <__ieee754_pow+0x1e4>)
   14808:	429c      	cmp	r4, r3
   1480a:	dc00      	bgt.n	1480e <__ieee754_pow+0x19a>
   1480c:	e327      	b.n	14e5e <__ieee754_pow+0x7ea>
   1480e:	9800      	ldr	r0, [sp, #0]
   14810:	9901      	ldr	r1, [sp, #4]
   14812:	4653      	mov	r3, sl
   14814:	2b00      	cmp	r3, #0
   14816:	db00      	blt.n	1481a <__ieee754_pow+0x1a6>
   14818:	e774      	b.n	14704 <__ieee754_pow+0x90>
   1481a:	2000      	movs	r0, #0
   1481c:	2100      	movs	r1, #0
   1481e:	e771      	b.n	14704 <__ieee754_pow+0x90>
   14820:	2302      	movs	r3, #2
   14822:	469b      	mov	fp, r3
   14824:	e74c      	b.n	146c0 <__ieee754_pow+0x4c>
   14826:	003a      	movs	r2, r7
   14828:	0033      	movs	r3, r6
   1482a:	0038      	movs	r0, r7
   1482c:	0031      	movs	r1, r6
   1482e:	f002 fdad 	bl	1738c <__aeabi_dsub>
   14832:	0002      	movs	r2, r0
   14834:	000b      	movs	r3, r1
   14836:	f001 fef5 	bl	16624 <__aeabi_ddiv>
   1483a:	e763      	b.n	14704 <__ieee754_pow+0x90>
   1483c:	7ff00000 	.word	0x7ff00000
   14840:	3ff00000 	.word	0x3ff00000
   14844:	3fe00000 	.word	0x3fe00000
   14848:	c0100000 	.word	0xc0100000
   1484c:	00019af8 	.word	0x00019af8
   14850:	41e00000 	.word	0x41e00000
   14854:	43f00000 	.word	0x43f00000
   14858:	3fefffff 	.word	0x3fefffff
   1485c:	8800759c 	.word	0x8800759c
   14860:	7e37e43c 	.word	0x7e37e43c
   14864:	433fffff 	.word	0x433fffff
   14868:	fffffc01 	.word	0xfffffc01
   1486c:	4be9      	ldr	r3, [pc, #932]	; (14c14 <__ieee754_pow+0x5a0>)
   1486e:	2200      	movs	r2, #0
   14870:	429c      	cmp	r4, r3
   14872:	dc06      	bgt.n	14882 <__ieee754_pow+0x20e>
   14874:	2200      	movs	r2, #0
   14876:	4be8      	ldr	r3, [pc, #928]	; (14c18 <__ieee754_pow+0x5a4>)
   14878:	f002 fb08 	bl	16e8c <__aeabi_dmul>
   1487c:	2235      	movs	r2, #53	; 0x35
   1487e:	000c      	movs	r4, r1
   14880:	4252      	negs	r2, r2
   14882:	4de6      	ldr	r5, [pc, #920]	; (14c1c <__ieee754_pow+0x5a8>)
   14884:	1523      	asrs	r3, r4, #20
   14886:	46ac      	mov	ip, r5
   14888:	4463      	add	r3, ip
   1488a:	4699      	mov	r9, r3
   1488c:	0324      	lsls	r4, r4, #12
   1488e:	4de4      	ldr	r5, [pc, #912]	; (14c20 <__ieee754_pow+0x5ac>)
   14890:	4be4      	ldr	r3, [pc, #912]	; (14c24 <__ieee754_pow+0x5b0>)
   14892:	0b24      	lsrs	r4, r4, #12
   14894:	4491      	add	r9, r2
   14896:	4325      	orrs	r5, r4
   14898:	429c      	cmp	r4, r3
   1489a:	dd09      	ble.n	148b0 <__ieee754_pow+0x23c>
   1489c:	4be2      	ldr	r3, [pc, #904]	; (14c28 <__ieee754_pow+0x5b4>)
   1489e:	429c      	cmp	r4, r3
   148a0:	dc00      	bgt.n	148a4 <__ieee754_pow+0x230>
   148a2:	e3b6      	b.n	15012 <__ieee754_pow+0x99e>
   148a4:	2301      	movs	r3, #1
   148a6:	469c      	mov	ip, r3
   148a8:	4be0      	ldr	r3, [pc, #896]	; (14c2c <__ieee754_pow+0x5b8>)
   148aa:	44e1      	add	r9, ip
   148ac:	469c      	mov	ip, r3
   148ae:	4465      	add	r5, ip
   148b0:	2300      	movs	r3, #0
   148b2:	2400      	movs	r4, #0
   148b4:	2200      	movs	r2, #0
   148b6:	9308      	str	r3, [sp, #32]
   148b8:	9409      	str	r4, [sp, #36]	; 0x24
   148ba:	930c      	str	r3, [sp, #48]	; 0x30
   148bc:	940d      	str	r4, [sp, #52]	; 0x34
   148be:	2400      	movs	r4, #0
   148c0:	4bd7      	ldr	r3, [pc, #860]	; (14c20 <__ieee754_pow+0x5ac>)
   148c2:	9206      	str	r2, [sp, #24]
   148c4:	9307      	str	r3, [sp, #28]
   148c6:	9a06      	ldr	r2, [sp, #24]
   148c8:	9b07      	ldr	r3, [sp, #28]
   148ca:	0029      	movs	r1, r5
   148cc:	900a      	str	r0, [sp, #40]	; 0x28
   148ce:	910b      	str	r1, [sp, #44]	; 0x2c
   148d0:	f002 fd5c 	bl	1738c <__aeabi_dsub>
   148d4:	9a06      	ldr	r2, [sp, #24]
   148d6:	9b07      	ldr	r3, [sp, #28]
   148d8:	0006      	movs	r6, r0
   148da:	000f      	movs	r7, r1
   148dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   148de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   148e0:	f001 fb90 	bl	16004 <__aeabi_dadd>
   148e4:	0002      	movs	r2, r0
   148e6:	000b      	movs	r3, r1
   148e8:	2000      	movs	r0, #0
   148ea:	49cd      	ldr	r1, [pc, #820]	; (14c20 <__ieee754_pow+0x5ac>)
   148ec:	f001 fe9a 	bl	16624 <__aeabi_ddiv>
   148f0:	000a      	movs	r2, r1
   148f2:	0001      	movs	r1, r0
   148f4:	0013      	movs	r3, r2
   148f6:	910e      	str	r1, [sp, #56]	; 0x38
   148f8:	920f      	str	r2, [sp, #60]	; 0x3c
   148fa:	0002      	movs	r2, r0
   148fc:	0039      	movs	r1, r7
   148fe:	0030      	movs	r0, r6
   14900:	f002 fac4 	bl	16e8c <__aeabi_dmul>
   14904:	000a      	movs	r2, r1
   14906:	0001      	movs	r1, r0
   14908:	2080      	movs	r0, #128	; 0x80
   1490a:	9104      	str	r1, [sp, #16]
   1490c:	9205      	str	r2, [sp, #20]
   1490e:	0013      	movs	r3, r2
   14910:	2200      	movs	r2, #0
   14912:	1069      	asrs	r1, r5, #1
   14914:	2580      	movs	r5, #128	; 0x80
   14916:	0300      	lsls	r0, r0, #12
   14918:	4684      	mov	ip, r0
   1491a:	9202      	str	r2, [sp, #8]
   1491c:	9303      	str	r3, [sp, #12]
   1491e:	2200      	movs	r2, #0
   14920:	05ad      	lsls	r5, r5, #22
   14922:	430d      	orrs	r5, r1
   14924:	4465      	add	r5, ip
   14926:	192b      	adds	r3, r5, r4
   14928:	9802      	ldr	r0, [sp, #8]
   1492a:	9903      	ldr	r1, [sp, #12]
   1492c:	0014      	movs	r4, r2
   1492e:	001d      	movs	r5, r3
   14930:	f002 faac 	bl	16e8c <__aeabi_dmul>
   14934:	0002      	movs	r2, r0
   14936:	000b      	movs	r3, r1
   14938:	0030      	movs	r0, r6
   1493a:	0039      	movs	r1, r7
   1493c:	f002 fd26 	bl	1738c <__aeabi_dsub>
   14940:	9a06      	ldr	r2, [sp, #24]
   14942:	9b07      	ldr	r3, [sp, #28]
   14944:	0006      	movs	r6, r0
   14946:	000f      	movs	r7, r1
   14948:	0020      	movs	r0, r4
   1494a:	0029      	movs	r1, r5
   1494c:	f002 fd1e 	bl	1738c <__aeabi_dsub>
   14950:	0002      	movs	r2, r0
   14952:	000b      	movs	r3, r1
   14954:	980a      	ldr	r0, [sp, #40]	; 0x28
   14956:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14958:	f002 fd18 	bl	1738c <__aeabi_dsub>
   1495c:	9a02      	ldr	r2, [sp, #8]
   1495e:	9b03      	ldr	r3, [sp, #12]
   14960:	f002 fa94 	bl	16e8c <__aeabi_dmul>
   14964:	0002      	movs	r2, r0
   14966:	000b      	movs	r3, r1
   14968:	0030      	movs	r0, r6
   1496a:	0039      	movs	r1, r7
   1496c:	f002 fd0e 	bl	1738c <__aeabi_dsub>
   14970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14974:	f002 fa8a 	bl	16e8c <__aeabi_dmul>
   14978:	9d04      	ldr	r5, [sp, #16]
   1497a:	9e05      	ldr	r6, [sp, #20]
   1497c:	9006      	str	r0, [sp, #24]
   1497e:	9107      	str	r1, [sp, #28]
   14980:	002a      	movs	r2, r5
   14982:	0033      	movs	r3, r6
   14984:	0028      	movs	r0, r5
   14986:	0031      	movs	r1, r6
   14988:	f002 fa80 	bl	16e8c <__aeabi_dmul>
   1498c:	0006      	movs	r6, r0
   1498e:	000f      	movs	r7, r1
   14990:	4aa7      	ldr	r2, [pc, #668]	; (14c30 <__ieee754_pow+0x5bc>)
   14992:	4ba8      	ldr	r3, [pc, #672]	; (14c34 <__ieee754_pow+0x5c0>)
   14994:	f002 fa7a 	bl	16e8c <__aeabi_dmul>
   14998:	4aa7      	ldr	r2, [pc, #668]	; (14c38 <__ieee754_pow+0x5c4>)
   1499a:	4ba8      	ldr	r3, [pc, #672]	; (14c3c <__ieee754_pow+0x5c8>)
   1499c:	f001 fb32 	bl	16004 <__aeabi_dadd>
   149a0:	0032      	movs	r2, r6
   149a2:	003b      	movs	r3, r7
   149a4:	f002 fa72 	bl	16e8c <__aeabi_dmul>
   149a8:	4aa5      	ldr	r2, [pc, #660]	; (14c40 <__ieee754_pow+0x5cc>)
   149aa:	4ba6      	ldr	r3, [pc, #664]	; (14c44 <__ieee754_pow+0x5d0>)
   149ac:	f001 fb2a 	bl	16004 <__aeabi_dadd>
   149b0:	0032      	movs	r2, r6
   149b2:	003b      	movs	r3, r7
   149b4:	f002 fa6a 	bl	16e8c <__aeabi_dmul>
   149b8:	4aa3      	ldr	r2, [pc, #652]	; (14c48 <__ieee754_pow+0x5d4>)
   149ba:	4ba4      	ldr	r3, [pc, #656]	; (14c4c <__ieee754_pow+0x5d8>)
   149bc:	f001 fb22 	bl	16004 <__aeabi_dadd>
   149c0:	0032      	movs	r2, r6
   149c2:	003b      	movs	r3, r7
   149c4:	f002 fa62 	bl	16e8c <__aeabi_dmul>
   149c8:	4aa1      	ldr	r2, [pc, #644]	; (14c50 <__ieee754_pow+0x5dc>)
   149ca:	4ba2      	ldr	r3, [pc, #648]	; (14c54 <__ieee754_pow+0x5e0>)
   149cc:	f001 fb1a 	bl	16004 <__aeabi_dadd>
   149d0:	0032      	movs	r2, r6
   149d2:	003b      	movs	r3, r7
   149d4:	f002 fa5a 	bl	16e8c <__aeabi_dmul>
   149d8:	4a9f      	ldr	r2, [pc, #636]	; (14c58 <__ieee754_pow+0x5e4>)
   149da:	4ba0      	ldr	r3, [pc, #640]	; (14c5c <__ieee754_pow+0x5e8>)
   149dc:	f001 fb12 	bl	16004 <__aeabi_dadd>
   149e0:	0032      	movs	r2, r6
   149e2:	0004      	movs	r4, r0
   149e4:	000d      	movs	r5, r1
   149e6:	003b      	movs	r3, r7
   149e8:	0030      	movs	r0, r6
   149ea:	0039      	movs	r1, r7
   149ec:	f002 fa4e 	bl	16e8c <__aeabi_dmul>
   149f0:	0002      	movs	r2, r0
   149f2:	000b      	movs	r3, r1
   149f4:	0020      	movs	r0, r4
   149f6:	0029      	movs	r1, r5
   149f8:	f002 fa48 	bl	16e8c <__aeabi_dmul>
   149fc:	9e02      	ldr	r6, [sp, #8]
   149fe:	9f03      	ldr	r7, [sp, #12]
   14a00:	0004      	movs	r4, r0
   14a02:	000d      	movs	r5, r1
   14a04:	9804      	ldr	r0, [sp, #16]
   14a06:	9905      	ldr	r1, [sp, #20]
   14a08:	0032      	movs	r2, r6
   14a0a:	003b      	movs	r3, r7
   14a0c:	f001 fafa 	bl	16004 <__aeabi_dadd>
   14a10:	9a06      	ldr	r2, [sp, #24]
   14a12:	9b07      	ldr	r3, [sp, #28]
   14a14:	f002 fa3a 	bl	16e8c <__aeabi_dmul>
   14a18:	0022      	movs	r2, r4
   14a1a:	002b      	movs	r3, r5
   14a1c:	f001 faf2 	bl	16004 <__aeabi_dadd>
   14a20:	0032      	movs	r2, r6
   14a22:	900a      	str	r0, [sp, #40]	; 0x28
   14a24:	910b      	str	r1, [sp, #44]	; 0x2c
   14a26:	003b      	movs	r3, r7
   14a28:	0030      	movs	r0, r6
   14a2a:	0039      	movs	r1, r7
   14a2c:	9602      	str	r6, [sp, #8]
   14a2e:	9703      	str	r7, [sp, #12]
   14a30:	f002 fa2c 	bl	16e8c <__aeabi_dmul>
   14a34:	2200      	movs	r2, #0
   14a36:	4b8a      	ldr	r3, [pc, #552]	; (14c60 <__ieee754_pow+0x5ec>)
   14a38:	0004      	movs	r4, r0
   14a3a:	000d      	movs	r5, r1
   14a3c:	f001 fae2 	bl	16004 <__aeabi_dadd>
   14a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a44:	f001 fade 	bl	16004 <__aeabi_dadd>
   14a48:	2600      	movs	r6, #0
   14a4a:	000f      	movs	r7, r1
   14a4c:	0032      	movs	r2, r6
   14a4e:	000b      	movs	r3, r1
   14a50:	9802      	ldr	r0, [sp, #8]
   14a52:	9903      	ldr	r1, [sp, #12]
   14a54:	f002 fa1a 	bl	16e8c <__aeabi_dmul>
   14a58:	2200      	movs	r2, #0
   14a5a:	9002      	str	r0, [sp, #8]
   14a5c:	9103      	str	r1, [sp, #12]
   14a5e:	4b80      	ldr	r3, [pc, #512]	; (14c60 <__ieee754_pow+0x5ec>)
   14a60:	0030      	movs	r0, r6
   14a62:	0039      	movs	r1, r7
   14a64:	f002 fc92 	bl	1738c <__aeabi_dsub>
   14a68:	0022      	movs	r2, r4
   14a6a:	002b      	movs	r3, r5
   14a6c:	f002 fc8e 	bl	1738c <__aeabi_dsub>
   14a70:	0002      	movs	r2, r0
   14a72:	000b      	movs	r3, r1
   14a74:	980a      	ldr	r0, [sp, #40]	; 0x28
   14a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14a78:	f002 fc88 	bl	1738c <__aeabi_dsub>
   14a7c:	9a04      	ldr	r2, [sp, #16]
   14a7e:	9b05      	ldr	r3, [sp, #20]
   14a80:	f002 fa04 	bl	16e8c <__aeabi_dmul>
   14a84:	0032      	movs	r2, r6
   14a86:	0004      	movs	r4, r0
   14a88:	000d      	movs	r5, r1
   14a8a:	9806      	ldr	r0, [sp, #24]
   14a8c:	9907      	ldr	r1, [sp, #28]
   14a8e:	003b      	movs	r3, r7
   14a90:	f002 f9fc 	bl	16e8c <__aeabi_dmul>
   14a94:	0002      	movs	r2, r0
   14a96:	000b      	movs	r3, r1
   14a98:	0020      	movs	r0, r4
   14a9a:	0029      	movs	r1, r5
   14a9c:	f001 fab2 	bl	16004 <__aeabi_dadd>
   14aa0:	0004      	movs	r4, r0
   14aa2:	000d      	movs	r5, r1
   14aa4:	0002      	movs	r2, r0
   14aa6:	000b      	movs	r3, r1
   14aa8:	9802      	ldr	r0, [sp, #8]
   14aaa:	9903      	ldr	r1, [sp, #12]
   14aac:	f001 faaa 	bl	16004 <__aeabi_dadd>
   14ab0:	2600      	movs	r6, #0
   14ab2:	22e0      	movs	r2, #224	; 0xe0
   14ab4:	4b6b      	ldr	r3, [pc, #428]	; (14c64 <__ieee754_pow+0x5f0>)
   14ab6:	0612      	lsls	r2, r2, #24
   14ab8:	0030      	movs	r0, r6
   14aba:	000f      	movs	r7, r1
   14abc:	f002 f9e6 	bl	16e8c <__aeabi_dmul>
   14ac0:	9a02      	ldr	r2, [sp, #8]
   14ac2:	9b03      	ldr	r3, [sp, #12]
   14ac4:	9004      	str	r0, [sp, #16]
   14ac6:	9105      	str	r1, [sp, #20]
   14ac8:	0030      	movs	r0, r6
   14aca:	0039      	movs	r1, r7
   14acc:	f002 fc5e 	bl	1738c <__aeabi_dsub>
   14ad0:	0002      	movs	r2, r0
   14ad2:	000b      	movs	r3, r1
   14ad4:	0020      	movs	r0, r4
   14ad6:	0029      	movs	r1, r5
   14ad8:	f002 fc58 	bl	1738c <__aeabi_dsub>
   14adc:	4a62      	ldr	r2, [pc, #392]	; (14c68 <__ieee754_pow+0x5f4>)
   14ade:	4b61      	ldr	r3, [pc, #388]	; (14c64 <__ieee754_pow+0x5f0>)
   14ae0:	f002 f9d4 	bl	16e8c <__aeabi_dmul>
   14ae4:	4a61      	ldr	r2, [pc, #388]	; (14c6c <__ieee754_pow+0x5f8>)
   14ae6:	0004      	movs	r4, r0
   14ae8:	000d      	movs	r5, r1
   14aea:	4b61      	ldr	r3, [pc, #388]	; (14c70 <__ieee754_pow+0x5fc>)
   14aec:	0030      	movs	r0, r6
   14aee:	0039      	movs	r1, r7
   14af0:	f002 f9cc 	bl	16e8c <__aeabi_dmul>
   14af4:	0002      	movs	r2, r0
   14af6:	000b      	movs	r3, r1
   14af8:	0020      	movs	r0, r4
   14afa:	0029      	movs	r1, r5
   14afc:	f001 fa82 	bl	16004 <__aeabi_dadd>
   14b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14b04:	f001 fa7e 	bl	16004 <__aeabi_dadd>
   14b08:	0006      	movs	r6, r0
   14b0a:	4648      	mov	r0, r9
   14b0c:	000f      	movs	r7, r1
   14b0e:	f002 ffa7 	bl	17a60 <__aeabi_i2d>
   14b12:	0004      	movs	r4, r0
   14b14:	000d      	movs	r5, r1
   14b16:	9804      	ldr	r0, [sp, #16]
   14b18:	9905      	ldr	r1, [sp, #20]
   14b1a:	0032      	movs	r2, r6
   14b1c:	003b      	movs	r3, r7
   14b1e:	f001 fa71 	bl	16004 <__aeabi_dadd>
   14b22:	9a08      	ldr	r2, [sp, #32]
   14b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14b26:	f001 fa6d 	bl	16004 <__aeabi_dadd>
   14b2a:	0022      	movs	r2, r4
   14b2c:	002b      	movs	r3, r5
   14b2e:	f001 fa69 	bl	16004 <__aeabi_dadd>
   14b32:	2000      	movs	r0, #0
   14b34:	0022      	movs	r2, r4
   14b36:	002b      	movs	r3, r5
   14b38:	9002      	str	r0, [sp, #8]
   14b3a:	9103      	str	r1, [sp, #12]
   14b3c:	f002 fc26 	bl	1738c <__aeabi_dsub>
   14b40:	9a08      	ldr	r2, [sp, #32]
   14b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14b44:	f002 fc22 	bl	1738c <__aeabi_dsub>
   14b48:	9a04      	ldr	r2, [sp, #16]
   14b4a:	9b05      	ldr	r3, [sp, #20]
   14b4c:	f002 fc1e 	bl	1738c <__aeabi_dsub>
   14b50:	0002      	movs	r2, r0
   14b52:	000b      	movs	r3, r1
   14b54:	0030      	movs	r0, r6
   14b56:	0039      	movs	r1, r7
   14b58:	f002 fc18 	bl	1738c <__aeabi_dsub>
   14b5c:	9004      	str	r0, [sp, #16]
   14b5e:	9105      	str	r1, [sp, #20]
   14b60:	465b      	mov	r3, fp
   14b62:	4642      	mov	r2, r8
   14b64:	3b01      	subs	r3, #1
   14b66:	4313      	orrs	r3, r2
   14b68:	d100      	bne.n	14b6c <__ieee754_pow+0x4f8>
   14b6a:	e1ab      	b.n	14ec4 <__ieee754_pow+0x850>
   14b6c:	2300      	movs	r3, #0
   14b6e:	4c2c      	ldr	r4, [pc, #176]	; (14c20 <__ieee754_pow+0x5ac>)
   14b70:	9306      	str	r3, [sp, #24]
   14b72:	9407      	str	r4, [sp, #28]
   14b74:	9800      	ldr	r0, [sp, #0]
   14b76:	9901      	ldr	r1, [sp, #4]
   14b78:	2600      	movs	r6, #0
   14b7a:	000b      	movs	r3, r1
   14b7c:	0032      	movs	r2, r6
   14b7e:	000f      	movs	r7, r1
   14b80:	f002 fc04 	bl	1738c <__aeabi_dsub>
   14b84:	9a02      	ldr	r2, [sp, #8]
   14b86:	9b03      	ldr	r3, [sp, #12]
   14b88:	f002 f980 	bl	16e8c <__aeabi_dmul>
   14b8c:	9a00      	ldr	r2, [sp, #0]
   14b8e:	9b01      	ldr	r3, [sp, #4]
   14b90:	0004      	movs	r4, r0
   14b92:	000d      	movs	r5, r1
   14b94:	9804      	ldr	r0, [sp, #16]
   14b96:	9905      	ldr	r1, [sp, #20]
   14b98:	f002 f978 	bl	16e8c <__aeabi_dmul>
   14b9c:	0002      	movs	r2, r0
   14b9e:	000b      	movs	r3, r1
   14ba0:	0020      	movs	r0, r4
   14ba2:	0029      	movs	r1, r5
   14ba4:	f001 fa2e 	bl	16004 <__aeabi_dadd>
   14ba8:	0004      	movs	r4, r0
   14baa:	000d      	movs	r5, r1
   14bac:	9802      	ldr	r0, [sp, #8]
   14bae:	9903      	ldr	r1, [sp, #12]
   14bb0:	0032      	movs	r2, r6
   14bb2:	003b      	movs	r3, r7
   14bb4:	9400      	str	r4, [sp, #0]
   14bb6:	9501      	str	r5, [sp, #4]
   14bb8:	f002 f968 	bl	16e8c <__aeabi_dmul>
   14bbc:	0002      	movs	r2, r0
   14bbe:	000b      	movs	r3, r1
   14bc0:	0006      	movs	r6, r0
   14bc2:	000f      	movs	r7, r1
   14bc4:	0020      	movs	r0, r4
   14bc6:	0029      	movs	r1, r5
   14bc8:	f001 fa1c 	bl	16004 <__aeabi_dadd>
   14bcc:	4b29      	ldr	r3, [pc, #164]	; (14c74 <__ieee754_pow+0x600>)
   14bce:	0004      	movs	r4, r0
   14bd0:	000d      	movs	r5, r1
   14bd2:	0002      	movs	r2, r0
   14bd4:	468b      	mov	fp, r1
   14bd6:	4299      	cmp	r1, r3
   14bd8:	dc00      	bgt.n	14bdc <__ieee754_pow+0x568>
   14bda:	e14f      	b.n	14e7c <__ieee754_pow+0x808>
   14bdc:	4b26      	ldr	r3, [pc, #152]	; (14c78 <__ieee754_pow+0x604>)
   14bde:	18cb      	adds	r3, r1, r3
   14be0:	4303      	orrs	r3, r0
   14be2:	d000      	beq.n	14be6 <__ieee754_pow+0x572>
   14be4:	e1e2      	b.n	14fac <__ieee754_pow+0x938>
   14be6:	9800      	ldr	r0, [sp, #0]
   14be8:	9901      	ldr	r1, [sp, #4]
   14bea:	4a24      	ldr	r2, [pc, #144]	; (14c7c <__ieee754_pow+0x608>)
   14bec:	4b24      	ldr	r3, [pc, #144]	; (14c80 <__ieee754_pow+0x60c>)
   14bee:	f001 fa09 	bl	16004 <__aeabi_dadd>
   14bf2:	0032      	movs	r2, r6
   14bf4:	9002      	str	r0, [sp, #8]
   14bf6:	9103      	str	r1, [sp, #12]
   14bf8:	003b      	movs	r3, r7
   14bfa:	0020      	movs	r0, r4
   14bfc:	0029      	movs	r1, r5
   14bfe:	f002 fbc5 	bl	1738c <__aeabi_dsub>
   14c02:	0002      	movs	r2, r0
   14c04:	000b      	movs	r3, r1
   14c06:	9802      	ldr	r0, [sp, #8]
   14c08:	9903      	ldr	r1, [sp, #12]
   14c0a:	f000 fe11 	bl	15830 <__aeabi_dcmpgt>
   14c0e:	46aa      	mov	sl, r5
   14c10:	e038      	b.n	14c84 <__ieee754_pow+0x610>
   14c12:	46c0      	nop			; (mov r8, r8)
   14c14:	000fffff 	.word	0x000fffff
   14c18:	43400000 	.word	0x43400000
   14c1c:	fffffc01 	.word	0xfffffc01
   14c20:	3ff00000 	.word	0x3ff00000
   14c24:	0003988e 	.word	0x0003988e
   14c28:	000bb679 	.word	0x000bb679
   14c2c:	fff00000 	.word	0xfff00000
   14c30:	4a454eef 	.word	0x4a454eef
   14c34:	3fca7e28 	.word	0x3fca7e28
   14c38:	93c9db65 	.word	0x93c9db65
   14c3c:	3fcd864a 	.word	0x3fcd864a
   14c40:	a91d4101 	.word	0xa91d4101
   14c44:	3fd17460 	.word	0x3fd17460
   14c48:	518f264d 	.word	0x518f264d
   14c4c:	3fd55555 	.word	0x3fd55555
   14c50:	db6fabff 	.word	0xdb6fabff
   14c54:	3fdb6db6 	.word	0x3fdb6db6
   14c58:	33333303 	.word	0x33333303
   14c5c:	3fe33333 	.word	0x3fe33333
   14c60:	40080000 	.word	0x40080000
   14c64:	3feec709 	.word	0x3feec709
   14c68:	dc3a03fd 	.word	0xdc3a03fd
   14c6c:	145b01f5 	.word	0x145b01f5
   14c70:	be3e2fe0 	.word	0xbe3e2fe0
   14c74:	408fffff 	.word	0x408fffff
   14c78:	bf700000 	.word	0xbf700000
   14c7c:	652b82fe 	.word	0x652b82fe
   14c80:	3c971547 	.word	0x3c971547
   14c84:	2800      	cmp	r0, #0
   14c86:	d000      	beq.n	14c8a <__ieee754_pow+0x616>
   14c88:	e190      	b.n	14fac <__ieee754_pow+0x938>
   14c8a:	4aec      	ldr	r2, [pc, #944]	; (1503c <__ieee754_pow+0x9c8>)
   14c8c:	4653      	mov	r3, sl
   14c8e:	4694      	mov	ip, r2
   14c90:	2280      	movs	r2, #128	; 0x80
   14c92:	0352      	lsls	r2, r2, #13
   14c94:	0011      	movs	r1, r2
   14c96:	151b      	asrs	r3, r3, #20
   14c98:	4463      	add	r3, ip
   14c9a:	4119      	asrs	r1, r3
   14c9c:	000b      	movs	r3, r1
   14c9e:	4690      	mov	r8, r2
   14ca0:	4ae7      	ldr	r2, [pc, #924]	; (15040 <__ieee754_pow+0x9cc>)
   14ca2:	445b      	add	r3, fp
   14ca4:	4694      	mov	ip, r2
   14ca6:	005c      	lsls	r4, r3, #1
   14ca8:	0d64      	lsrs	r4, r4, #21
   14caa:	4de6      	ldr	r5, [pc, #920]	; (15044 <__ieee754_pow+0x9d0>)
   14cac:	4464      	add	r4, ip
   14cae:	4125      	asrs	r5, r4
   14cb0:	001a      	movs	r2, r3
   14cb2:	43aa      	bics	r2, r5
   14cb4:	0011      	movs	r1, r2
   14cb6:	4642      	mov	r2, r8
   14cb8:	031b      	lsls	r3, r3, #12
   14cba:	0b1b      	lsrs	r3, r3, #12
   14cbc:	4313      	orrs	r3, r2
   14cbe:	2214      	movs	r2, #20
   14cc0:	1b14      	subs	r4, r2, r4
   14cc2:	4123      	asrs	r3, r4
   14cc4:	4699      	mov	r9, r3
   14cc6:	465b      	mov	r3, fp
   14cc8:	2000      	movs	r0, #0
   14cca:	2b00      	cmp	r3, #0
   14ccc:	da00      	bge.n	14cd0 <__ieee754_pow+0x65c>
   14cce:	e1b0      	b.n	15032 <__ieee754_pow+0x9be>
   14cd0:	0002      	movs	r2, r0
   14cd2:	000b      	movs	r3, r1
   14cd4:	0030      	movs	r0, r6
   14cd6:	0039      	movs	r1, r7
   14cd8:	f002 fb58 	bl	1738c <__aeabi_dsub>
   14cdc:	000b      	movs	r3, r1
   14cde:	0002      	movs	r2, r0
   14ce0:	0006      	movs	r6, r0
   14ce2:	000f      	movs	r7, r1
   14ce4:	9800      	ldr	r0, [sp, #0]
   14ce6:	9901      	ldr	r1, [sp, #4]
   14ce8:	f001 f98c 	bl	16004 <__aeabi_dadd>
   14cec:	464b      	mov	r3, r9
   14cee:	051b      	lsls	r3, r3, #20
   14cf0:	000d      	movs	r5, r1
   14cf2:	4698      	mov	r8, r3
   14cf4:	2400      	movs	r4, #0
   14cf6:	2200      	movs	r2, #0
   14cf8:	4bd3      	ldr	r3, [pc, #844]	; (15048 <__ieee754_pow+0x9d4>)
   14cfa:	0020      	movs	r0, r4
   14cfc:	0029      	movs	r1, r5
   14cfe:	f002 f8c5 	bl	16e8c <__aeabi_dmul>
   14d02:	0032      	movs	r2, r6
   14d04:	9002      	str	r0, [sp, #8]
   14d06:	9103      	str	r1, [sp, #12]
   14d08:	003b      	movs	r3, r7
   14d0a:	0020      	movs	r0, r4
   14d0c:	0029      	movs	r1, r5
   14d0e:	f002 fb3d 	bl	1738c <__aeabi_dsub>
   14d12:	0002      	movs	r2, r0
   14d14:	000b      	movs	r3, r1
   14d16:	9800      	ldr	r0, [sp, #0]
   14d18:	9901      	ldr	r1, [sp, #4]
   14d1a:	f002 fb37 	bl	1738c <__aeabi_dsub>
   14d1e:	4acb      	ldr	r2, [pc, #812]	; (1504c <__ieee754_pow+0x9d8>)
   14d20:	4bcb      	ldr	r3, [pc, #812]	; (15050 <__ieee754_pow+0x9dc>)
   14d22:	f002 f8b3 	bl	16e8c <__aeabi_dmul>
   14d26:	4acb      	ldr	r2, [pc, #812]	; (15054 <__ieee754_pow+0x9e0>)
   14d28:	0006      	movs	r6, r0
   14d2a:	000f      	movs	r7, r1
   14d2c:	4bca      	ldr	r3, [pc, #808]	; (15058 <__ieee754_pow+0x9e4>)
   14d2e:	0020      	movs	r0, r4
   14d30:	0029      	movs	r1, r5
   14d32:	f002 f8ab 	bl	16e8c <__aeabi_dmul>
   14d36:	0002      	movs	r2, r0
   14d38:	000b      	movs	r3, r1
   14d3a:	0030      	movs	r0, r6
   14d3c:	0039      	movs	r1, r7
   14d3e:	f001 f961 	bl	16004 <__aeabi_dadd>
   14d42:	0004      	movs	r4, r0
   14d44:	000d      	movs	r5, r1
   14d46:	0002      	movs	r2, r0
   14d48:	000b      	movs	r3, r1
   14d4a:	9802      	ldr	r0, [sp, #8]
   14d4c:	9903      	ldr	r1, [sp, #12]
   14d4e:	f001 f959 	bl	16004 <__aeabi_dadd>
   14d52:	9a02      	ldr	r2, [sp, #8]
   14d54:	9b03      	ldr	r3, [sp, #12]
   14d56:	0006      	movs	r6, r0
   14d58:	000f      	movs	r7, r1
   14d5a:	f002 fb17 	bl	1738c <__aeabi_dsub>
   14d5e:	0002      	movs	r2, r0
   14d60:	000b      	movs	r3, r1
   14d62:	0020      	movs	r0, r4
   14d64:	0029      	movs	r1, r5
   14d66:	f002 fb11 	bl	1738c <__aeabi_dsub>
   14d6a:	0032      	movs	r2, r6
   14d6c:	9000      	str	r0, [sp, #0]
   14d6e:	9101      	str	r1, [sp, #4]
   14d70:	003b      	movs	r3, r7
   14d72:	0030      	movs	r0, r6
   14d74:	0039      	movs	r1, r7
   14d76:	f002 f889 	bl	16e8c <__aeabi_dmul>
   14d7a:	0004      	movs	r4, r0
   14d7c:	000d      	movs	r5, r1
   14d7e:	4ab7      	ldr	r2, [pc, #732]	; (1505c <__ieee754_pow+0x9e8>)
   14d80:	4bb7      	ldr	r3, [pc, #732]	; (15060 <__ieee754_pow+0x9ec>)
   14d82:	f002 f883 	bl	16e8c <__aeabi_dmul>
   14d86:	4ab7      	ldr	r2, [pc, #732]	; (15064 <__ieee754_pow+0x9f0>)
   14d88:	4bb7      	ldr	r3, [pc, #732]	; (15068 <__ieee754_pow+0x9f4>)
   14d8a:	f002 faff 	bl	1738c <__aeabi_dsub>
   14d8e:	0022      	movs	r2, r4
   14d90:	002b      	movs	r3, r5
   14d92:	f002 f87b 	bl	16e8c <__aeabi_dmul>
   14d96:	4ab5      	ldr	r2, [pc, #724]	; (1506c <__ieee754_pow+0x9f8>)
   14d98:	4bb5      	ldr	r3, [pc, #724]	; (15070 <__ieee754_pow+0x9fc>)
   14d9a:	f001 f933 	bl	16004 <__aeabi_dadd>
   14d9e:	0022      	movs	r2, r4
   14da0:	002b      	movs	r3, r5
   14da2:	f002 f873 	bl	16e8c <__aeabi_dmul>
   14da6:	4ab3      	ldr	r2, [pc, #716]	; (15074 <__ieee754_pow+0xa00>)
   14da8:	4bb3      	ldr	r3, [pc, #716]	; (15078 <__ieee754_pow+0xa04>)
   14daa:	f002 faef 	bl	1738c <__aeabi_dsub>
   14dae:	0022      	movs	r2, r4
   14db0:	002b      	movs	r3, r5
   14db2:	f002 f86b 	bl	16e8c <__aeabi_dmul>
   14db6:	4ab1      	ldr	r2, [pc, #708]	; (1507c <__ieee754_pow+0xa08>)
   14db8:	4bb1      	ldr	r3, [pc, #708]	; (15080 <__ieee754_pow+0xa0c>)
   14dba:	f001 f923 	bl	16004 <__aeabi_dadd>
   14dbe:	0022      	movs	r2, r4
   14dc0:	002b      	movs	r3, r5
   14dc2:	f002 f863 	bl	16e8c <__aeabi_dmul>
   14dc6:	0002      	movs	r2, r0
   14dc8:	000b      	movs	r3, r1
   14dca:	0030      	movs	r0, r6
   14dcc:	0039      	movs	r1, r7
   14dce:	f002 fadd 	bl	1738c <__aeabi_dsub>
   14dd2:	0004      	movs	r4, r0
   14dd4:	000d      	movs	r5, r1
   14dd6:	0002      	movs	r2, r0
   14dd8:	000b      	movs	r3, r1
   14dda:	0030      	movs	r0, r6
   14ddc:	0039      	movs	r1, r7
   14dde:	f002 f855 	bl	16e8c <__aeabi_dmul>
   14de2:	2380      	movs	r3, #128	; 0x80
   14de4:	9002      	str	r0, [sp, #8]
   14de6:	9103      	str	r1, [sp, #12]
   14de8:	2200      	movs	r2, #0
   14dea:	05db      	lsls	r3, r3, #23
   14dec:	0020      	movs	r0, r4
   14dee:	0029      	movs	r1, r5
   14df0:	f002 facc 	bl	1738c <__aeabi_dsub>
   14df4:	0002      	movs	r2, r0
   14df6:	000b      	movs	r3, r1
   14df8:	9802      	ldr	r0, [sp, #8]
   14dfa:	9903      	ldr	r1, [sp, #12]
   14dfc:	f001 fc12 	bl	16624 <__aeabi_ddiv>
   14e00:	9a00      	ldr	r2, [sp, #0]
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	0004      	movs	r4, r0
   14e06:	000d      	movs	r5, r1
   14e08:	0030      	movs	r0, r6
   14e0a:	0039      	movs	r1, r7
   14e0c:	f002 f83e 	bl	16e8c <__aeabi_dmul>
   14e10:	9a00      	ldr	r2, [sp, #0]
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	f001 f8f6 	bl	16004 <__aeabi_dadd>
   14e18:	0002      	movs	r2, r0
   14e1a:	000b      	movs	r3, r1
   14e1c:	0020      	movs	r0, r4
   14e1e:	0029      	movs	r1, r5
   14e20:	f002 fab4 	bl	1738c <__aeabi_dsub>
   14e24:	0032      	movs	r2, r6
   14e26:	003b      	movs	r3, r7
   14e28:	f002 fab0 	bl	1738c <__aeabi_dsub>
   14e2c:	0002      	movs	r2, r0
   14e2e:	000b      	movs	r3, r1
   14e30:	2000      	movs	r0, #0
   14e32:	4994      	ldr	r1, [pc, #592]	; (15084 <__ieee754_pow+0xa10>)
   14e34:	f002 faaa 	bl	1738c <__aeabi_dsub>
   14e38:	4643      	mov	r3, r8
   14e3a:	185b      	adds	r3, r3, r1
   14e3c:	151a      	asrs	r2, r3, #20
   14e3e:	2a00      	cmp	r2, #0
   14e40:	dc00      	bgt.n	14e44 <__ieee754_pow+0x7d0>
   14e42:	e149      	b.n	150d8 <__ieee754_pow+0xa64>
   14e44:	0019      	movs	r1, r3
   14e46:	9a06      	ldr	r2, [sp, #24]
   14e48:	9b07      	ldr	r3, [sp, #28]
   14e4a:	f002 f81f 	bl	16e8c <__aeabi_dmul>
   14e4e:	e459      	b.n	14704 <__ieee754_pow+0x90>
   14e50:	003a      	movs	r2, r7
   14e52:	0033      	movs	r3, r6
   14e54:	0038      	movs	r0, r7
   14e56:	0031      	movs	r1, r6
   14e58:	f002 f818 	bl	16e8c <__aeabi_dmul>
   14e5c:	e452      	b.n	14704 <__ieee754_pow+0x90>
   14e5e:	4653      	mov	r3, sl
   14e60:	2b00      	cmp	r3, #0
   14e62:	db00      	blt.n	14e66 <__ieee754_pow+0x7f2>
   14e64:	e4d9      	b.n	1481a <__ieee754_pow+0x1a6>
   14e66:	9c00      	ldr	r4, [sp, #0]
   14e68:	9d01      	ldr	r5, [sp, #4]
   14e6a:	2280      	movs	r2, #128	; 0x80
   14e6c:	0612      	lsls	r2, r2, #24
   14e6e:	002b      	movs	r3, r5
   14e70:	4694      	mov	ip, r2
   14e72:	4463      	add	r3, ip
   14e74:	0020      	movs	r0, r4
   14e76:	0019      	movs	r1, r3
   14e78:	f7ff fc44 	bl	14704 <__ieee754_pow+0x90>
   14e7c:	004b      	lsls	r3, r1, #1
   14e7e:	085b      	lsrs	r3, r3, #1
   14e80:	469a      	mov	sl, r3
   14e82:	4b81      	ldr	r3, [pc, #516]	; (15088 <__ieee754_pow+0xa14>)
   14e84:	459a      	cmp	sl, r3
   14e86:	dc00      	bgt.n	14e8a <__ieee754_pow+0x816>
   14e88:	e0b1      	b.n	14fee <__ieee754_pow+0x97a>
   14e8a:	4b80      	ldr	r3, [pc, #512]	; (1508c <__ieee754_pow+0xa18>)
   14e8c:	445b      	add	r3, fp
   14e8e:	431a      	orrs	r2, r3
   14e90:	d10c      	bne.n	14eac <__ieee754_pow+0x838>
   14e92:	0032      	movs	r2, r6
   14e94:	003b      	movs	r3, r7
   14e96:	f002 fa79 	bl	1738c <__aeabi_dsub>
   14e9a:	0002      	movs	r2, r0
   14e9c:	000b      	movs	r3, r1
   14e9e:	9800      	ldr	r0, [sp, #0]
   14ea0:	9901      	ldr	r1, [sp, #4]
   14ea2:	f000 fcbb 	bl	1581c <__aeabi_dcmple>
   14ea6:	2800      	cmp	r0, #0
   14ea8:	d100      	bne.n	14eac <__ieee754_pow+0x838>
   14eaa:	e6ee      	b.n	14c8a <__ieee754_pow+0x616>
   14eac:	9806      	ldr	r0, [sp, #24]
   14eae:	9907      	ldr	r1, [sp, #28]
   14eb0:	4a77      	ldr	r2, [pc, #476]	; (15090 <__ieee754_pow+0xa1c>)
   14eb2:	4b78      	ldr	r3, [pc, #480]	; (15094 <__ieee754_pow+0xa20>)
   14eb4:	f001 ffea 	bl	16e8c <__aeabi_dmul>
   14eb8:	4a75      	ldr	r2, [pc, #468]	; (15090 <__ieee754_pow+0xa1c>)
   14eba:	4b76      	ldr	r3, [pc, #472]	; (15094 <__ieee754_pow+0xa20>)
   14ebc:	f001 ffe6 	bl	16e8c <__aeabi_dmul>
   14ec0:	f7ff fc20 	bl	14704 <__ieee754_pow+0x90>
   14ec4:	2300      	movs	r3, #0
   14ec6:	4c74      	ldr	r4, [pc, #464]	; (15098 <__ieee754_pow+0xa24>)
   14ec8:	9306      	str	r3, [sp, #24]
   14eca:	9407      	str	r4, [sp, #28]
   14ecc:	e652      	b.n	14b74 <__ieee754_pow+0x500>
   14ece:	0002      	movs	r2, r0
   14ed0:	000b      	movs	r3, r1
   14ed2:	2000      	movs	r0, #0
   14ed4:	496b      	ldr	r1, [pc, #428]	; (15084 <__ieee754_pow+0xa10>)
   14ed6:	f001 fba5 	bl	16624 <__aeabi_ddiv>
   14eda:	f7ff fc32 	bl	14742 <__ieee754_pow+0xce>
   14ede:	4653      	mov	r3, sl
   14ee0:	2b00      	cmp	r3, #0
   14ee2:	db00      	blt.n	14ee6 <__ieee754_pow+0x872>
   14ee4:	e499      	b.n	1481a <__ieee754_pow+0x1a6>
   14ee6:	e454      	b.n	14792 <__ieee754_pow+0x11e>
   14ee8:	4b6c      	ldr	r3, [pc, #432]	; (1509c <__ieee754_pow+0xa28>)
   14eea:	429c      	cmp	r4, r3
   14eec:	ddf7      	ble.n	14ede <__ieee754_pow+0x86a>
   14eee:	4b65      	ldr	r3, [pc, #404]	; (15084 <__ieee754_pow+0xa10>)
   14ef0:	429c      	cmp	r4, r3
   14ef2:	dd00      	ble.n	14ef6 <__ieee754_pow+0x882>
   14ef4:	e44a      	b.n	1478c <__ieee754_pow+0x118>
   14ef6:	2200      	movs	r2, #0
   14ef8:	4b62      	ldr	r3, [pc, #392]	; (15084 <__ieee754_pow+0xa10>)
   14efa:	f002 fa47 	bl	1738c <__aeabi_dsub>
   14efe:	22c0      	movs	r2, #192	; 0xc0
   14f00:	4b67      	ldr	r3, [pc, #412]	; (150a0 <__ieee754_pow+0xa2c>)
   14f02:	05d2      	lsls	r2, r2, #23
   14f04:	0004      	movs	r4, r0
   14f06:	000d      	movs	r5, r1
   14f08:	f001 ffc0 	bl	16e8c <__aeabi_dmul>
   14f0c:	4a65      	ldr	r2, [pc, #404]	; (150a4 <__ieee754_pow+0xa30>)
   14f0e:	0006      	movs	r6, r0
   14f10:	000f      	movs	r7, r1
   14f12:	4b65      	ldr	r3, [pc, #404]	; (150a8 <__ieee754_pow+0xa34>)
   14f14:	0020      	movs	r0, r4
   14f16:	0029      	movs	r1, r5
   14f18:	f001 ffb8 	bl	16e8c <__aeabi_dmul>
   14f1c:	2200      	movs	r2, #0
   14f1e:	9002      	str	r0, [sp, #8]
   14f20:	9103      	str	r1, [sp, #12]
   14f22:	4b62      	ldr	r3, [pc, #392]	; (150ac <__ieee754_pow+0xa38>)
   14f24:	0020      	movs	r0, r4
   14f26:	0029      	movs	r1, r5
   14f28:	f001 ffb0 	bl	16e8c <__aeabi_dmul>
   14f2c:	0002      	movs	r2, r0
   14f2e:	000b      	movs	r3, r1
   14f30:	485f      	ldr	r0, [pc, #380]	; (150b0 <__ieee754_pow+0xa3c>)
   14f32:	4960      	ldr	r1, [pc, #384]	; (150b4 <__ieee754_pow+0xa40>)
   14f34:	f002 fa2a 	bl	1738c <__aeabi_dsub>
   14f38:	0022      	movs	r2, r4
   14f3a:	002b      	movs	r3, r5
   14f3c:	f001 ffa6 	bl	16e8c <__aeabi_dmul>
   14f40:	0002      	movs	r2, r0
   14f42:	000b      	movs	r3, r1
   14f44:	2000      	movs	r0, #0
   14f46:	495c      	ldr	r1, [pc, #368]	; (150b8 <__ieee754_pow+0xa44>)
   14f48:	f002 fa20 	bl	1738c <__aeabi_dsub>
   14f4c:	0022      	movs	r2, r4
   14f4e:	9004      	str	r0, [sp, #16]
   14f50:	9105      	str	r1, [sp, #20]
   14f52:	002b      	movs	r3, r5
   14f54:	0020      	movs	r0, r4
   14f56:	0029      	movs	r1, r5
   14f58:	f001 ff98 	bl	16e8c <__aeabi_dmul>
   14f5c:	0002      	movs	r2, r0
   14f5e:	000b      	movs	r3, r1
   14f60:	9804      	ldr	r0, [sp, #16]
   14f62:	9905      	ldr	r1, [sp, #20]
   14f64:	f001 ff92 	bl	16e8c <__aeabi_dmul>
   14f68:	4a54      	ldr	r2, [pc, #336]	; (150bc <__ieee754_pow+0xa48>)
   14f6a:	4b4d      	ldr	r3, [pc, #308]	; (150a0 <__ieee754_pow+0xa2c>)
   14f6c:	f001 ff8e 	bl	16e8c <__aeabi_dmul>
   14f70:	0002      	movs	r2, r0
   14f72:	000b      	movs	r3, r1
   14f74:	9802      	ldr	r0, [sp, #8]
   14f76:	9903      	ldr	r1, [sp, #12]
   14f78:	f002 fa08 	bl	1738c <__aeabi_dsub>
   14f7c:	0002      	movs	r2, r0
   14f7e:	000b      	movs	r3, r1
   14f80:	0004      	movs	r4, r0
   14f82:	000d      	movs	r5, r1
   14f84:	0030      	movs	r0, r6
   14f86:	0039      	movs	r1, r7
   14f88:	f001 f83c 	bl	16004 <__aeabi_dadd>
   14f8c:	2000      	movs	r0, #0
   14f8e:	0032      	movs	r2, r6
   14f90:	003b      	movs	r3, r7
   14f92:	9002      	str	r0, [sp, #8]
   14f94:	9103      	str	r1, [sp, #12]
   14f96:	f002 f9f9 	bl	1738c <__aeabi_dsub>
   14f9a:	0002      	movs	r2, r0
   14f9c:	000b      	movs	r3, r1
   14f9e:	0020      	movs	r0, r4
   14fa0:	0029      	movs	r1, r5
   14fa2:	f002 f9f3 	bl	1738c <__aeabi_dsub>
   14fa6:	9004      	str	r0, [sp, #16]
   14fa8:	9105      	str	r1, [sp, #20]
   14faa:	e5d9      	b.n	14b60 <__ieee754_pow+0x4ec>
   14fac:	4a44      	ldr	r2, [pc, #272]	; (150c0 <__ieee754_pow+0xa4c>)
   14fae:	4b45      	ldr	r3, [pc, #276]	; (150c4 <__ieee754_pow+0xa50>)
   14fb0:	9806      	ldr	r0, [sp, #24]
   14fb2:	9907      	ldr	r1, [sp, #28]
   14fb4:	f001 ff6a 	bl	16e8c <__aeabi_dmul>
   14fb8:	4a41      	ldr	r2, [pc, #260]	; (150c0 <__ieee754_pow+0xa4c>)
   14fba:	4b42      	ldr	r3, [pc, #264]	; (150c4 <__ieee754_pow+0xa50>)
   14fbc:	f001 ff66 	bl	16e8c <__aeabi_dmul>
   14fc0:	f7ff fba0 	bl	14704 <__ieee754_pow+0x90>
   14fc4:	2a00      	cmp	r2, #0
   14fc6:	d001      	beq.n	14fcc <__ieee754_pow+0x958>
   14fc8:	f7ff fba9 	bl	1471e <__ieee754_pow+0xaa>
   14fcc:	3214      	adds	r2, #20
   14fce:	1ad3      	subs	r3, r2, r3
   14fd0:	002a      	movs	r2, r5
   14fd2:	411a      	asrs	r2, r3
   14fd4:	0011      	movs	r1, r2
   14fd6:	4099      	lsls	r1, r3
   14fd8:	428d      	cmp	r5, r1
   14fda:	d001      	beq.n	14fe0 <__ieee754_pow+0x96c>
   14fdc:	f7ff fb76 	bl	146cc <__ieee754_pow+0x58>
   14fe0:	2301      	movs	r3, #1
   14fe2:	401a      	ands	r2, r3
   14fe4:	18db      	adds	r3, r3, r3
   14fe6:	1a9b      	subs	r3, r3, r2
   14fe8:	469b      	mov	fp, r3
   14fea:	f7ff fb6f 	bl	146cc <__ieee754_pow+0x58>
   14fee:	2200      	movs	r2, #0
   14ff0:	4b31      	ldr	r3, [pc, #196]	; (150b8 <__ieee754_pow+0xa44>)
   14ff2:	4690      	mov	r8, r2
   14ff4:	4691      	mov	r9, r2
   14ff6:	459a      	cmp	sl, r3
   14ff8:	dc00      	bgt.n	14ffc <__ieee754_pow+0x988>
   14ffa:	e67b      	b.n	14cf4 <__ieee754_pow+0x680>
   14ffc:	e645      	b.n	14c8a <__ieee754_pow+0x616>
   14ffe:	0002      	movs	r2, r0
   15000:	000b      	movs	r3, r1
   15002:	f002 f9c3 	bl	1738c <__aeabi_dsub>
   15006:	0002      	movs	r2, r0
   15008:	000b      	movs	r3, r1
   1500a:	f001 fb0b 	bl	16624 <__aeabi_ddiv>
   1500e:	f7ff fb79 	bl	14704 <__ieee754_pow+0x90>
   15012:	2380      	movs	r3, #128	; 0x80
   15014:	4c2c      	ldr	r4, [pc, #176]	; (150c8 <__ieee754_pow+0xa54>)
   15016:	05db      	lsls	r3, r3, #23
   15018:	9308      	str	r3, [sp, #32]
   1501a:	9409      	str	r4, [sp, #36]	; 0x24
   1501c:	4b2b      	ldr	r3, [pc, #172]	; (150cc <__ieee754_pow+0xa58>)
   1501e:	4c2c      	ldr	r4, [pc, #176]	; (150d0 <__ieee754_pow+0xa5c>)
   15020:	2200      	movs	r2, #0
   15022:	930c      	str	r3, [sp, #48]	; 0x30
   15024:	940d      	str	r4, [sp, #52]	; 0x34
   15026:	2480      	movs	r4, #128	; 0x80
   15028:	4b2a      	ldr	r3, [pc, #168]	; (150d4 <__ieee754_pow+0xa60>)
   1502a:	02e4      	lsls	r4, r4, #11
   1502c:	9206      	str	r2, [sp, #24]
   1502e:	9307      	str	r3, [sp, #28]
   15030:	e449      	b.n	148c6 <__ieee754_pow+0x252>
   15032:	464b      	mov	r3, r9
   15034:	425b      	negs	r3, r3
   15036:	4699      	mov	r9, r3
   15038:	e64a      	b.n	14cd0 <__ieee754_pow+0x65c>
   1503a:	46c0      	nop			; (mov r8, r8)
   1503c:	fffffc02 	.word	0xfffffc02
   15040:	fffffc01 	.word	0xfffffc01
   15044:	000fffff 	.word	0x000fffff
   15048:	3fe62e43 	.word	0x3fe62e43
   1504c:	fefa39ef 	.word	0xfefa39ef
   15050:	3fe62e42 	.word	0x3fe62e42
   15054:	0ca86c39 	.word	0x0ca86c39
   15058:	be205c61 	.word	0xbe205c61
   1505c:	72bea4d0 	.word	0x72bea4d0
   15060:	3e663769 	.word	0x3e663769
   15064:	c5d26bf1 	.word	0xc5d26bf1
   15068:	3ebbbd41 	.word	0x3ebbbd41
   1506c:	af25de2c 	.word	0xaf25de2c
   15070:	3f11566a 	.word	0x3f11566a
   15074:	16bebd93 	.word	0x16bebd93
   15078:	3f66c16c 	.word	0x3f66c16c
   1507c:	5555553e 	.word	0x5555553e
   15080:	3fc55555 	.word	0x3fc55555
   15084:	3ff00000 	.word	0x3ff00000
   15088:	4090cbff 	.word	0x4090cbff
   1508c:	3f6f3400 	.word	0x3f6f3400
   15090:	c2f8f359 	.word	0xc2f8f359
   15094:	01a56e1f 	.word	0x01a56e1f
   15098:	bff00000 	.word	0xbff00000
   1509c:	3feffffe 	.word	0x3feffffe
   150a0:	3ff71547 	.word	0x3ff71547
   150a4:	f85ddf44 	.word	0xf85ddf44
   150a8:	3e54ae0b 	.word	0x3e54ae0b
   150ac:	3fd00000 	.word	0x3fd00000
   150b0:	55555555 	.word	0x55555555
   150b4:	3fd55555 	.word	0x3fd55555
   150b8:	3fe00000 	.word	0x3fe00000
   150bc:	652b82fe 	.word	0x652b82fe
   150c0:	8800759c 	.word	0x8800759c
   150c4:	7e37e43c 	.word	0x7e37e43c
   150c8:	3fe2b803 	.word	0x3fe2b803
   150cc:	43cfd006 	.word	0x43cfd006
   150d0:	3e4cfdeb 	.word	0x3e4cfdeb
   150d4:	3ff80000 	.word	0x3ff80000
   150d8:	464a      	mov	r2, r9
   150da:	f000 f999 	bl	15410 <scalbn>
   150de:	e6b2      	b.n	14e46 <__ieee754_pow+0x7d2>

000150e0 <__ieee754_sqrt>:
   150e0:	4b6c      	ldr	r3, [pc, #432]	; (15294 <__ieee754_sqrt+0x1b4>)
   150e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   150e4:	000a      	movs	r2, r1
   150e6:	4646      	mov	r6, r8
   150e8:	000d      	movs	r5, r1
   150ea:	46d6      	mov	lr, sl
   150ec:	464f      	mov	r7, r9
   150ee:	0019      	movs	r1, r3
   150f0:	b5c0      	push	{r6, r7, lr}
   150f2:	0004      	movs	r4, r0
   150f4:	0006      	movs	r6, r0
   150f6:	4029      	ands	r1, r5
   150f8:	4299      	cmp	r1, r3
   150fa:	d100      	bne.n	150fe <__ieee754_sqrt+0x1e>
   150fc:	e0a7      	b.n	1524e <__ieee754_sqrt+0x16e>
   150fe:	2d00      	cmp	r5, #0
   15100:	dc00      	bgt.n	15104 <__ieee754_sqrt+0x24>
   15102:	e081      	b.n	15208 <__ieee754_sqrt+0x128>
   15104:	152f      	asrs	r7, r5, #20
   15106:	d100      	bne.n	1510a <__ieee754_sqrt+0x2a>
   15108:	e08e      	b.n	15228 <__ieee754_sqrt+0x148>
   1510a:	4b63      	ldr	r3, [pc, #396]	; (15298 <__ieee754_sqrt+0x1b8>)
   1510c:	0312      	lsls	r2, r2, #12
   1510e:	469c      	mov	ip, r3
   15110:	2380      	movs	r3, #128	; 0x80
   15112:	0b12      	lsrs	r2, r2, #12
   15114:	035b      	lsls	r3, r3, #13
   15116:	4467      	add	r7, ip
   15118:	431a      	orrs	r2, r3
   1511a:	07fb      	lsls	r3, r7, #31
   1511c:	d468      	bmi.n	151f0 <__ieee754_sqrt+0x110>
   1511e:	107b      	asrs	r3, r7, #1
   15120:	469c      	mov	ip, r3
   15122:	0fe3      	lsrs	r3, r4, #31
   15124:	189b      	adds	r3, r3, r2
   15126:	189b      	adds	r3, r3, r2
   15128:	2280      	movs	r2, #128	; 0x80
   1512a:	2116      	movs	r1, #22
   1512c:	2600      	movs	r6, #0
   1512e:	2500      	movs	r5, #0
   15130:	0064      	lsls	r4, r4, #1
   15132:	0392      	lsls	r2, r2, #14
   15134:	18a8      	adds	r0, r5, r2
   15136:	4298      	cmp	r0, r3
   15138:	dc02      	bgt.n	15140 <__ieee754_sqrt+0x60>
   1513a:	1885      	adds	r5, r0, r2
   1513c:	1a1b      	subs	r3, r3, r0
   1513e:	18b6      	adds	r6, r6, r2
   15140:	0fe0      	lsrs	r0, r4, #31
   15142:	005b      	lsls	r3, r3, #1
   15144:	3901      	subs	r1, #1
   15146:	181b      	adds	r3, r3, r0
   15148:	0064      	lsls	r4, r4, #1
   1514a:	0852      	lsrs	r2, r2, #1
   1514c:	2900      	cmp	r1, #0
   1514e:	d1f1      	bne.n	15134 <__ieee754_sqrt+0x54>
   15150:	2200      	movs	r2, #0
   15152:	4692      	mov	sl, r2
   15154:	4690      	mov	r8, r2
   15156:	2280      	movs	r2, #128	; 0x80
   15158:	2020      	movs	r0, #32
   1515a:	0612      	lsls	r2, r2, #24
   1515c:	e009      	b.n	15172 <__ieee754_sqrt+0x92>
   1515e:	42ab      	cmp	r3, r5
   15160:	d038      	beq.n	151d4 <__ieee754_sqrt+0xf4>
   15162:	0fe1      	lsrs	r1, r4, #31
   15164:	18c9      	adds	r1, r1, r3
   15166:	3801      	subs	r0, #1
   15168:	18cb      	adds	r3, r1, r3
   1516a:	0064      	lsls	r4, r4, #1
   1516c:	0852      	lsrs	r2, r2, #1
   1516e:	2800      	cmp	r0, #0
   15170:	d018      	beq.n	151a4 <__ieee754_sqrt+0xc4>
   15172:	4641      	mov	r1, r8
   15174:	1851      	adds	r1, r2, r1
   15176:	42ab      	cmp	r3, r5
   15178:	ddf1      	ble.n	1515e <__ieee754_sqrt+0x7e>
   1517a:	188f      	adds	r7, r1, r2
   1517c:	46b8      	mov	r8, r7
   1517e:	46a9      	mov	r9, r5
   15180:	2900      	cmp	r1, #0
   15182:	db30      	blt.n	151e6 <__ieee754_sqrt+0x106>
   15184:	1b5b      	subs	r3, r3, r5
   15186:	428c      	cmp	r4, r1
   15188:	41ad      	sbcs	r5, r5
   1518a:	426d      	negs	r5, r5
   1518c:	1b5b      	subs	r3, r3, r5
   1518e:	1a64      	subs	r4, r4, r1
   15190:	0fe1      	lsrs	r1, r4, #31
   15192:	18c9      	adds	r1, r1, r3
   15194:	3801      	subs	r0, #1
   15196:	4492      	add	sl, r2
   15198:	464d      	mov	r5, r9
   1519a:	18cb      	adds	r3, r1, r3
   1519c:	0064      	lsls	r4, r4, #1
   1519e:	0852      	lsrs	r2, r2, #1
   151a0:	2800      	cmp	r0, #0
   151a2:	d1e6      	bne.n	15172 <__ieee754_sqrt+0x92>
   151a4:	4323      	orrs	r3, r4
   151a6:	d128      	bne.n	151fa <__ieee754_sqrt+0x11a>
   151a8:	4653      	mov	r3, sl
   151aa:	085b      	lsrs	r3, r3, #1
   151ac:	493b      	ldr	r1, [pc, #236]	; (1529c <__ieee754_sqrt+0x1bc>)
   151ae:	1072      	asrs	r2, r6, #1
   151b0:	4688      	mov	r8, r1
   151b2:	4442      	add	r2, r8
   151b4:	07f1      	lsls	r1, r6, #31
   151b6:	d502      	bpl.n	151be <__ieee754_sqrt+0xde>
   151b8:	2180      	movs	r1, #128	; 0x80
   151ba:	0609      	lsls	r1, r1, #24
   151bc:	430b      	orrs	r3, r1
   151be:	4661      	mov	r1, ip
   151c0:	001e      	movs	r6, r3
   151c2:	050f      	lsls	r7, r1, #20
   151c4:	18bd      	adds	r5, r7, r2
   151c6:	0030      	movs	r0, r6
   151c8:	0029      	movs	r1, r5
   151ca:	bc1c      	pop	{r2, r3, r4}
   151cc:	4690      	mov	r8, r2
   151ce:	4699      	mov	r9, r3
   151d0:	46a2      	mov	sl, r4
   151d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151d4:	42a1      	cmp	r1, r4
   151d6:	d8c4      	bhi.n	15162 <__ieee754_sqrt+0x82>
   151d8:	188f      	adds	r7, r1, r2
   151da:	46b8      	mov	r8, r7
   151dc:	2900      	cmp	r1, #0
   151de:	db42      	blt.n	15266 <__ieee754_sqrt+0x186>
   151e0:	4699      	mov	r9, r3
   151e2:	2300      	movs	r3, #0
   151e4:	e7d3      	b.n	1518e <__ieee754_sqrt+0xae>
   151e6:	2f00      	cmp	r7, #0
   151e8:	db2f      	blt.n	1524a <__ieee754_sqrt+0x16a>
   151ea:	1c6f      	adds	r7, r5, #1
   151ec:	46b9      	mov	r9, r7
   151ee:	e7c9      	b.n	15184 <__ieee754_sqrt+0xa4>
   151f0:	0fe1      	lsrs	r1, r4, #31
   151f2:	0052      	lsls	r2, r2, #1
   151f4:	188a      	adds	r2, r1, r2
   151f6:	0064      	lsls	r4, r4, #1
   151f8:	e791      	b.n	1511e <__ieee754_sqrt+0x3e>
   151fa:	4653      	mov	r3, sl
   151fc:	3301      	adds	r3, #1
   151fe:	d035      	beq.n	1526c <__ieee754_sqrt+0x18c>
   15200:	4653      	mov	r3, sl
   15202:	3301      	adds	r3, #1
   15204:	085b      	lsrs	r3, r3, #1
   15206:	e7d1      	b.n	151ac <__ieee754_sqrt+0xcc>
   15208:	006b      	lsls	r3, r5, #1
   1520a:	085b      	lsrs	r3, r3, #1
   1520c:	4303      	orrs	r3, r0
   1520e:	d0da      	beq.n	151c6 <__ieee754_sqrt+0xe6>
   15210:	2700      	movs	r7, #0
   15212:	2d00      	cmp	r5, #0
   15214:	d132      	bne.n	1527c <__ieee754_sqrt+0x19c>
   15216:	0ae2      	lsrs	r2, r4, #11
   15218:	3f15      	subs	r7, #21
   1521a:	0564      	lsls	r4, r4, #21
   1521c:	2a00      	cmp	r2, #0
   1521e:	d0fa      	beq.n	15216 <__ieee754_sqrt+0x136>
   15220:	2380      	movs	r3, #128	; 0x80
   15222:	035b      	lsls	r3, r3, #13
   15224:	421a      	tst	r2, r3
   15226:	d124      	bne.n	15272 <__ieee754_sqrt+0x192>
   15228:	2080      	movs	r0, #128	; 0x80
   1522a:	2300      	movs	r3, #0
   1522c:	0340      	lsls	r0, r0, #13
   1522e:	e000      	b.n	15232 <__ieee754_sqrt+0x152>
   15230:	000b      	movs	r3, r1
   15232:	0052      	lsls	r2, r2, #1
   15234:	1c59      	adds	r1, r3, #1
   15236:	4202      	tst	r2, r0
   15238:	d0fa      	beq.n	15230 <__ieee754_sqrt+0x150>
   1523a:	2020      	movs	r0, #32
   1523c:	1a40      	subs	r0, r0, r1
   1523e:	1aff      	subs	r7, r7, r3
   15240:	0023      	movs	r3, r4
   15242:	40c3      	lsrs	r3, r0
   15244:	408c      	lsls	r4, r1
   15246:	431a      	orrs	r2, r3
   15248:	e75f      	b.n	1510a <__ieee754_sqrt+0x2a>
   1524a:	46a9      	mov	r9, r5
   1524c:	e79a      	b.n	15184 <__ieee754_sqrt+0xa4>
   1524e:	002b      	movs	r3, r5
   15250:	0002      	movs	r2, r0
   15252:	0029      	movs	r1, r5
   15254:	f001 fe1a 	bl	16e8c <__aeabi_dmul>
   15258:	0032      	movs	r2, r6
   1525a:	002b      	movs	r3, r5
   1525c:	f000 fed2 	bl	16004 <__aeabi_dadd>
   15260:	0006      	movs	r6, r0
   15262:	000d      	movs	r5, r1
   15264:	e7af      	b.n	151c6 <__ieee754_sqrt+0xe6>
   15266:	2f00      	cmp	r7, #0
   15268:	dabf      	bge.n	151ea <__ieee754_sqrt+0x10a>
   1526a:	e7b9      	b.n	151e0 <__ieee754_sqrt+0x100>
   1526c:	3601      	adds	r6, #1
   1526e:	2300      	movs	r3, #0
   15270:	e79c      	b.n	151ac <__ieee754_sqrt+0xcc>
   15272:	2301      	movs	r3, #1
   15274:	2100      	movs	r1, #0
   15276:	2020      	movs	r0, #32
   15278:	425b      	negs	r3, r3
   1527a:	e7e0      	b.n	1523e <__ieee754_sqrt+0x15e>
   1527c:	002b      	movs	r3, r5
   1527e:	0002      	movs	r2, r0
   15280:	0029      	movs	r1, r5
   15282:	f002 f883 	bl	1738c <__aeabi_dsub>
   15286:	0002      	movs	r2, r0
   15288:	000b      	movs	r3, r1
   1528a:	f001 f9cb 	bl	16624 <__aeabi_ddiv>
   1528e:	0006      	movs	r6, r0
   15290:	000d      	movs	r5, r1
   15292:	e798      	b.n	151c6 <__ieee754_sqrt+0xe6>
   15294:	7ff00000 	.word	0x7ff00000
   15298:	fffffc01 	.word	0xfffffc01
   1529c:	3fe00000 	.word	0x3fe00000

000152a0 <fabs>:
   152a0:	0049      	lsls	r1, r1, #1
   152a2:	084b      	lsrs	r3, r1, #1
   152a4:	0019      	movs	r1, r3
   152a6:	4770      	bx	lr

000152a8 <finite>:
   152a8:	4b03      	ldr	r3, [pc, #12]	; (152b8 <finite+0x10>)
   152aa:	0048      	lsls	r0, r1, #1
   152ac:	469c      	mov	ip, r3
   152ae:	0840      	lsrs	r0, r0, #1
   152b0:	4460      	add	r0, ip
   152b2:	0fc0      	lsrs	r0, r0, #31
   152b4:	4770      	bx	lr
   152b6:	46c0      	nop			; (mov r8, r8)
   152b8:	80100000 	.word	0x80100000

000152bc <matherr>:
   152bc:	2000      	movs	r0, #0
   152be:	4770      	bx	lr

000152c0 <nan>:
   152c0:	2000      	movs	r0, #0
   152c2:	4901      	ldr	r1, [pc, #4]	; (152c8 <nan+0x8>)
   152c4:	4770      	bx	lr
   152c6:	46c0      	nop			; (mov r8, r8)
   152c8:	7ff80000 	.word	0x7ff80000

000152cc <rint>:
   152cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   152ce:	46c6      	mov	lr, r8
   152d0:	b500      	push	{lr}
   152d2:	0fcb      	lsrs	r3, r1, #31
   152d4:	4698      	mov	r8, r3
   152d6:	4c4a      	ldr	r4, [pc, #296]	; (15400 <rint+0x134>)
   152d8:	004b      	lsls	r3, r1, #1
   152da:	0d5b      	lsrs	r3, r3, #21
   152dc:	191e      	adds	r6, r3, r4
   152de:	b082      	sub	sp, #8
   152e0:	0007      	movs	r7, r0
   152e2:	000a      	movs	r2, r1
   152e4:	2e13      	cmp	r6, #19
   152e6:	dc35      	bgt.n	15354 <rint+0x88>
   152e8:	2e00      	cmp	r6, #0
   152ea:	db57      	blt.n	1539c <rint+0xd0>
   152ec:	4b45      	ldr	r3, [pc, #276]	; (15404 <rint+0x138>)
   152ee:	0004      	movs	r4, r0
   152f0:	4133      	asrs	r3, r6
   152f2:	001f      	movs	r7, r3
   152f4:	400f      	ands	r7, r1
   152f6:	4307      	orrs	r7, r0
   152f8:	000d      	movs	r5, r1
   152fa:	2f00      	cmp	r7, #0
   152fc:	d024      	beq.n	15348 <rint+0x7c>
   152fe:	085b      	lsrs	r3, r3, #1
   15300:	001c      	movs	r4, r3
   15302:	400c      	ands	r4, r1
   15304:	4320      	orrs	r0, r4
   15306:	2700      	movs	r7, #0
   15308:	2800      	cmp	r0, #0
   1530a:	d007      	beq.n	1531c <rint+0x50>
   1530c:	2e13      	cmp	r6, #19
   1530e:	d100      	bne.n	15312 <rint+0x46>
   15310:	e073      	b.n	153fa <rint+0x12e>
   15312:	2280      	movs	r2, #128	; 0x80
   15314:	02d2      	lsls	r2, r2, #11
   15316:	4132      	asrs	r2, r6
   15318:	4399      	bics	r1, r3
   1531a:	430a      	orrs	r2, r1
   1531c:	4643      	mov	r3, r8
   1531e:	00de      	lsls	r6, r3, #3
   15320:	4b39      	ldr	r3, [pc, #228]	; (15408 <rint+0x13c>)
   15322:	0011      	movs	r1, r2
   15324:	199e      	adds	r6, r3, r6
   15326:	6834      	ldr	r4, [r6, #0]
   15328:	6875      	ldr	r5, [r6, #4]
   1532a:	0038      	movs	r0, r7
   1532c:	0022      	movs	r2, r4
   1532e:	002b      	movs	r3, r5
   15330:	f000 fe68 	bl	16004 <__aeabi_dadd>
   15334:	9000      	str	r0, [sp, #0]
   15336:	9101      	str	r1, [sp, #4]
   15338:	9800      	ldr	r0, [sp, #0]
   1533a:	9901      	ldr	r1, [sp, #4]
   1533c:	0022      	movs	r2, r4
   1533e:	002b      	movs	r3, r5
   15340:	f002 f824 	bl	1738c <__aeabi_dsub>
   15344:	0004      	movs	r4, r0
   15346:	000d      	movs	r5, r1
   15348:	0020      	movs	r0, r4
   1534a:	0029      	movs	r1, r5
   1534c:	b002      	add	sp, #8
   1534e:	bc04      	pop	{r2}
   15350:	4690      	mov	r8, r2
   15352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15354:	2e33      	cmp	r6, #51	; 0x33
   15356:	dd0c      	ble.n	15372 <rint+0xa6>
   15358:	2380      	movs	r3, #128	; 0x80
   1535a:	0004      	movs	r4, r0
   1535c:	00db      	lsls	r3, r3, #3
   1535e:	000d      	movs	r5, r1
   15360:	429e      	cmp	r6, r3
   15362:	d1f1      	bne.n	15348 <rint+0x7c>
   15364:	0002      	movs	r2, r0
   15366:	000b      	movs	r3, r1
   15368:	f000 fe4c 	bl	16004 <__aeabi_dadd>
   1536c:	0004      	movs	r4, r0
   1536e:	000d      	movs	r5, r1
   15370:	e7ea      	b.n	15348 <rint+0x7c>
   15372:	4c26      	ldr	r4, [pc, #152]	; (1540c <rint+0x140>)
   15374:	000d      	movs	r5, r1
   15376:	46a4      	mov	ip, r4
   15378:	2401      	movs	r4, #1
   1537a:	4463      	add	r3, ip
   1537c:	4264      	negs	r4, r4
   1537e:	40dc      	lsrs	r4, r3
   15380:	46a4      	mov	ip, r4
   15382:	4661      	mov	r1, ip
   15384:	0004      	movs	r4, r0
   15386:	4201      	tst	r1, r0
   15388:	d0de      	beq.n	15348 <rint+0x7c>
   1538a:	0849      	lsrs	r1, r1, #1
   1538c:	4201      	tst	r1, r0
   1538e:	d0c5      	beq.n	1531c <rint+0x50>
   15390:	2780      	movs	r7, #128	; 0x80
   15392:	05ff      	lsls	r7, r7, #23
   15394:	411f      	asrs	r7, r3
   15396:	4388      	bics	r0, r1
   15398:	4307      	orrs	r7, r0
   1539a:	e7bf      	b.n	1531c <rint+0x50>
   1539c:	004b      	lsls	r3, r1, #1
   1539e:	085b      	lsrs	r3, r3, #1
   153a0:	4303      	orrs	r3, r0
   153a2:	0004      	movs	r4, r0
   153a4:	000d      	movs	r5, r1
   153a6:	2b00      	cmp	r3, #0
   153a8:	d0ce      	beq.n	15348 <rint+0x7c>
   153aa:	030b      	lsls	r3, r1, #12
   153ac:	0b1b      	lsrs	r3, r3, #12
   153ae:	4303      	orrs	r3, r0
   153b0:	001a      	movs	r2, r3
   153b2:	425b      	negs	r3, r3
   153b4:	4313      	orrs	r3, r2
   153b6:	2280      	movs	r2, #128	; 0x80
   153b8:	0b1b      	lsrs	r3, r3, #12
   153ba:	0312      	lsls	r2, r2, #12
   153bc:	4013      	ands	r3, r2
   153be:	0c4a      	lsrs	r2, r1, #17
   153c0:	0452      	lsls	r2, r2, #17
   153c2:	4313      	orrs	r3, r2
   153c4:	0019      	movs	r1, r3
   153c6:	4643      	mov	r3, r8
   153c8:	00da      	lsls	r2, r3, #3
   153ca:	4b0f      	ldr	r3, [pc, #60]	; (15408 <rint+0x13c>)
   153cc:	189b      	adds	r3, r3, r2
   153ce:	681c      	ldr	r4, [r3, #0]
   153d0:	685d      	ldr	r5, [r3, #4]
   153d2:	0022      	movs	r2, r4
   153d4:	002b      	movs	r3, r5
   153d6:	f000 fe15 	bl	16004 <__aeabi_dadd>
   153da:	9000      	str	r0, [sp, #0]
   153dc:	9101      	str	r1, [sp, #4]
   153de:	9800      	ldr	r0, [sp, #0]
   153e0:	9901      	ldr	r1, [sp, #4]
   153e2:	0022      	movs	r2, r4
   153e4:	002b      	movs	r3, r5
   153e6:	f001 ffd1 	bl	1738c <__aeabi_dsub>
   153ea:	4642      	mov	r2, r8
   153ec:	004b      	lsls	r3, r1, #1
   153ee:	085b      	lsrs	r3, r3, #1
   153f0:	07d6      	lsls	r6, r2, #31
   153f2:	4333      	orrs	r3, r6
   153f4:	0004      	movs	r4, r0
   153f6:	001d      	movs	r5, r3
   153f8:	e7a6      	b.n	15348 <rint+0x7c>
   153fa:	2780      	movs	r7, #128	; 0x80
   153fc:	063f      	lsls	r7, r7, #24
   153fe:	e788      	b.n	15312 <rint+0x46>
   15400:	fffffc01 	.word	0xfffffc01
   15404:	000fffff 	.word	0x000fffff
   15408:	00019b00 	.word	0x00019b00
   1540c:	fffffbed 	.word	0xfffffbed

00015410 <scalbn>:
   15410:	004b      	lsls	r3, r1, #1
   15412:	b570      	push	{r4, r5, r6, lr}
   15414:	0d5b      	lsrs	r3, r3, #21
   15416:	0014      	movs	r4, r2
   15418:	000a      	movs	r2, r1
   1541a:	2b00      	cmp	r3, #0
   1541c:	d11a      	bne.n	15454 <scalbn+0x44>
   1541e:	004b      	lsls	r3, r1, #1
   15420:	085b      	lsrs	r3, r3, #1
   15422:	4303      	orrs	r3, r0
   15424:	d015      	beq.n	15452 <scalbn+0x42>
   15426:	2200      	movs	r2, #0
   15428:	4b22      	ldr	r3, [pc, #136]	; (154b4 <scalbn+0xa4>)
   1542a:	f001 fd2f 	bl	16e8c <__aeabi_dmul>
   1542e:	4b22      	ldr	r3, [pc, #136]	; (154b8 <scalbn+0xa8>)
   15430:	000a      	movs	r2, r1
   15432:	429c      	cmp	r4, r3
   15434:	db22      	blt.n	1547c <scalbn+0x6c>
   15436:	004b      	lsls	r3, r1, #1
   15438:	0d5b      	lsrs	r3, r3, #21
   1543a:	3b36      	subs	r3, #54	; 0x36
   1543c:	4d1f      	ldr	r5, [pc, #124]	; (154bc <scalbn+0xac>)
   1543e:	18e3      	adds	r3, r4, r3
   15440:	42ab      	cmp	r3, r5
   15442:	dc20      	bgt.n	15486 <scalbn+0x76>
   15444:	2b00      	cmp	r3, #0
   15446:	dd0d      	ble.n	15464 <scalbn+0x54>
   15448:	4c1d      	ldr	r4, [pc, #116]	; (154c0 <scalbn+0xb0>)
   1544a:	051b      	lsls	r3, r3, #20
   1544c:	4022      	ands	r2, r4
   1544e:	431a      	orrs	r2, r3
   15450:	0011      	movs	r1, r2
   15452:	bd70      	pop	{r4, r5, r6, pc}
   15454:	4d1b      	ldr	r5, [pc, #108]	; (154c4 <scalbn+0xb4>)
   15456:	42ab      	cmp	r3, r5
   15458:	d1f0      	bne.n	1543c <scalbn+0x2c>
   1545a:	0002      	movs	r2, r0
   1545c:	000b      	movs	r3, r1
   1545e:	f000 fdd1 	bl	16004 <__aeabi_dadd>
   15462:	e7f6      	b.n	15452 <scalbn+0x42>
   15464:	001d      	movs	r5, r3
   15466:	3535      	adds	r5, #53	; 0x35
   15468:	da18      	bge.n	1549c <scalbn+0x8c>
   1546a:	4b17      	ldr	r3, [pc, #92]	; (154c8 <scalbn+0xb8>)
   1546c:	0002      	movs	r2, r0
   1546e:	429c      	cmp	r4, r3
   15470:	dc0a      	bgt.n	15488 <scalbn+0x78>
   15472:	000b      	movs	r3, r1
   15474:	4815      	ldr	r0, [pc, #84]	; (154cc <scalbn+0xbc>)
   15476:	4916      	ldr	r1, [pc, #88]	; (154d0 <scalbn+0xc0>)
   15478:	f000 f832 	bl	154e0 <copysign>
   1547c:	4a13      	ldr	r2, [pc, #76]	; (154cc <scalbn+0xbc>)
   1547e:	4b14      	ldr	r3, [pc, #80]	; (154d0 <scalbn+0xc0>)
   15480:	f001 fd04 	bl	16e8c <__aeabi_dmul>
   15484:	e7e5      	b.n	15452 <scalbn+0x42>
   15486:	0002      	movs	r2, r0
   15488:	000b      	movs	r3, r1
   1548a:	4812      	ldr	r0, [pc, #72]	; (154d4 <scalbn+0xc4>)
   1548c:	4912      	ldr	r1, [pc, #72]	; (154d8 <scalbn+0xc8>)
   1548e:	f000 f827 	bl	154e0 <copysign>
   15492:	4a10      	ldr	r2, [pc, #64]	; (154d4 <scalbn+0xc4>)
   15494:	4b10      	ldr	r3, [pc, #64]	; (154d8 <scalbn+0xc8>)
   15496:	f001 fcf9 	bl	16e8c <__aeabi_dmul>
   1549a:	e7da      	b.n	15452 <scalbn+0x42>
   1549c:	4c08      	ldr	r4, [pc, #32]	; (154c0 <scalbn+0xb0>)
   1549e:	3336      	adds	r3, #54	; 0x36
   154a0:	4022      	ands	r2, r4
   154a2:	051b      	lsls	r3, r3, #20
   154a4:	4313      	orrs	r3, r2
   154a6:	0019      	movs	r1, r3
   154a8:	2200      	movs	r2, #0
   154aa:	4b0c      	ldr	r3, [pc, #48]	; (154dc <scalbn+0xcc>)
   154ac:	f001 fcee 	bl	16e8c <__aeabi_dmul>
   154b0:	e7cf      	b.n	15452 <scalbn+0x42>
   154b2:	46c0      	nop			; (mov r8, r8)
   154b4:	43500000 	.word	0x43500000
   154b8:	ffff3cb0 	.word	0xffff3cb0
   154bc:	000007fe 	.word	0x000007fe
   154c0:	800fffff 	.word	0x800fffff
   154c4:	000007ff 	.word	0x000007ff
   154c8:	0000c350 	.word	0x0000c350
   154cc:	c2f8f359 	.word	0xc2f8f359
   154d0:	01a56e1f 	.word	0x01a56e1f
   154d4:	8800759c 	.word	0x8800759c
   154d8:	7e37e43c 	.word	0x7e37e43c
   154dc:	3c900000 	.word	0x3c900000

000154e0 <copysign>:
   154e0:	b530      	push	{r4, r5, lr}
   154e2:	004a      	lsls	r2, r1, #1
   154e4:	0fdb      	lsrs	r3, r3, #31
   154e6:	07db      	lsls	r3, r3, #31
   154e8:	0852      	lsrs	r2, r2, #1
   154ea:	431a      	orrs	r2, r3
   154ec:	0011      	movs	r1, r2
   154ee:	bd30      	pop	{r4, r5, pc}

000154f0 <__udivsi3>:
   154f0:	2200      	movs	r2, #0
   154f2:	0843      	lsrs	r3, r0, #1
   154f4:	428b      	cmp	r3, r1
   154f6:	d374      	bcc.n	155e2 <__udivsi3+0xf2>
   154f8:	0903      	lsrs	r3, r0, #4
   154fa:	428b      	cmp	r3, r1
   154fc:	d35f      	bcc.n	155be <__udivsi3+0xce>
   154fe:	0a03      	lsrs	r3, r0, #8
   15500:	428b      	cmp	r3, r1
   15502:	d344      	bcc.n	1558e <__udivsi3+0x9e>
   15504:	0b03      	lsrs	r3, r0, #12
   15506:	428b      	cmp	r3, r1
   15508:	d328      	bcc.n	1555c <__udivsi3+0x6c>
   1550a:	0c03      	lsrs	r3, r0, #16
   1550c:	428b      	cmp	r3, r1
   1550e:	d30d      	bcc.n	1552c <__udivsi3+0x3c>
   15510:	22ff      	movs	r2, #255	; 0xff
   15512:	0209      	lsls	r1, r1, #8
   15514:	ba12      	rev	r2, r2
   15516:	0c03      	lsrs	r3, r0, #16
   15518:	428b      	cmp	r3, r1
   1551a:	d302      	bcc.n	15522 <__udivsi3+0x32>
   1551c:	1212      	asrs	r2, r2, #8
   1551e:	0209      	lsls	r1, r1, #8
   15520:	d065      	beq.n	155ee <__udivsi3+0xfe>
   15522:	0b03      	lsrs	r3, r0, #12
   15524:	428b      	cmp	r3, r1
   15526:	d319      	bcc.n	1555c <__udivsi3+0x6c>
   15528:	e000      	b.n	1552c <__udivsi3+0x3c>
   1552a:	0a09      	lsrs	r1, r1, #8
   1552c:	0bc3      	lsrs	r3, r0, #15
   1552e:	428b      	cmp	r3, r1
   15530:	d301      	bcc.n	15536 <__udivsi3+0x46>
   15532:	03cb      	lsls	r3, r1, #15
   15534:	1ac0      	subs	r0, r0, r3
   15536:	4152      	adcs	r2, r2
   15538:	0b83      	lsrs	r3, r0, #14
   1553a:	428b      	cmp	r3, r1
   1553c:	d301      	bcc.n	15542 <__udivsi3+0x52>
   1553e:	038b      	lsls	r3, r1, #14
   15540:	1ac0      	subs	r0, r0, r3
   15542:	4152      	adcs	r2, r2
   15544:	0b43      	lsrs	r3, r0, #13
   15546:	428b      	cmp	r3, r1
   15548:	d301      	bcc.n	1554e <__udivsi3+0x5e>
   1554a:	034b      	lsls	r3, r1, #13
   1554c:	1ac0      	subs	r0, r0, r3
   1554e:	4152      	adcs	r2, r2
   15550:	0b03      	lsrs	r3, r0, #12
   15552:	428b      	cmp	r3, r1
   15554:	d301      	bcc.n	1555a <__udivsi3+0x6a>
   15556:	030b      	lsls	r3, r1, #12
   15558:	1ac0      	subs	r0, r0, r3
   1555a:	4152      	adcs	r2, r2
   1555c:	0ac3      	lsrs	r3, r0, #11
   1555e:	428b      	cmp	r3, r1
   15560:	d301      	bcc.n	15566 <__udivsi3+0x76>
   15562:	02cb      	lsls	r3, r1, #11
   15564:	1ac0      	subs	r0, r0, r3
   15566:	4152      	adcs	r2, r2
   15568:	0a83      	lsrs	r3, r0, #10
   1556a:	428b      	cmp	r3, r1
   1556c:	d301      	bcc.n	15572 <__udivsi3+0x82>
   1556e:	028b      	lsls	r3, r1, #10
   15570:	1ac0      	subs	r0, r0, r3
   15572:	4152      	adcs	r2, r2
   15574:	0a43      	lsrs	r3, r0, #9
   15576:	428b      	cmp	r3, r1
   15578:	d301      	bcc.n	1557e <__udivsi3+0x8e>
   1557a:	024b      	lsls	r3, r1, #9
   1557c:	1ac0      	subs	r0, r0, r3
   1557e:	4152      	adcs	r2, r2
   15580:	0a03      	lsrs	r3, r0, #8
   15582:	428b      	cmp	r3, r1
   15584:	d301      	bcc.n	1558a <__udivsi3+0x9a>
   15586:	020b      	lsls	r3, r1, #8
   15588:	1ac0      	subs	r0, r0, r3
   1558a:	4152      	adcs	r2, r2
   1558c:	d2cd      	bcs.n	1552a <__udivsi3+0x3a>
   1558e:	09c3      	lsrs	r3, r0, #7
   15590:	428b      	cmp	r3, r1
   15592:	d301      	bcc.n	15598 <__udivsi3+0xa8>
   15594:	01cb      	lsls	r3, r1, #7
   15596:	1ac0      	subs	r0, r0, r3
   15598:	4152      	adcs	r2, r2
   1559a:	0983      	lsrs	r3, r0, #6
   1559c:	428b      	cmp	r3, r1
   1559e:	d301      	bcc.n	155a4 <__udivsi3+0xb4>
   155a0:	018b      	lsls	r3, r1, #6
   155a2:	1ac0      	subs	r0, r0, r3
   155a4:	4152      	adcs	r2, r2
   155a6:	0943      	lsrs	r3, r0, #5
   155a8:	428b      	cmp	r3, r1
   155aa:	d301      	bcc.n	155b0 <__udivsi3+0xc0>
   155ac:	014b      	lsls	r3, r1, #5
   155ae:	1ac0      	subs	r0, r0, r3
   155b0:	4152      	adcs	r2, r2
   155b2:	0903      	lsrs	r3, r0, #4
   155b4:	428b      	cmp	r3, r1
   155b6:	d301      	bcc.n	155bc <__udivsi3+0xcc>
   155b8:	010b      	lsls	r3, r1, #4
   155ba:	1ac0      	subs	r0, r0, r3
   155bc:	4152      	adcs	r2, r2
   155be:	08c3      	lsrs	r3, r0, #3
   155c0:	428b      	cmp	r3, r1
   155c2:	d301      	bcc.n	155c8 <__udivsi3+0xd8>
   155c4:	00cb      	lsls	r3, r1, #3
   155c6:	1ac0      	subs	r0, r0, r3
   155c8:	4152      	adcs	r2, r2
   155ca:	0883      	lsrs	r3, r0, #2
   155cc:	428b      	cmp	r3, r1
   155ce:	d301      	bcc.n	155d4 <__udivsi3+0xe4>
   155d0:	008b      	lsls	r3, r1, #2
   155d2:	1ac0      	subs	r0, r0, r3
   155d4:	4152      	adcs	r2, r2
   155d6:	0843      	lsrs	r3, r0, #1
   155d8:	428b      	cmp	r3, r1
   155da:	d301      	bcc.n	155e0 <__udivsi3+0xf0>
   155dc:	004b      	lsls	r3, r1, #1
   155de:	1ac0      	subs	r0, r0, r3
   155e0:	4152      	adcs	r2, r2
   155e2:	1a41      	subs	r1, r0, r1
   155e4:	d200      	bcs.n	155e8 <__udivsi3+0xf8>
   155e6:	4601      	mov	r1, r0
   155e8:	4152      	adcs	r2, r2
   155ea:	4610      	mov	r0, r2
   155ec:	4770      	bx	lr
   155ee:	e7ff      	b.n	155f0 <__udivsi3+0x100>
   155f0:	b501      	push	{r0, lr}
   155f2:	2000      	movs	r0, #0
   155f4:	f000 f8f0 	bl	157d8 <__aeabi_idiv0>
   155f8:	bd02      	pop	{r1, pc}
   155fa:	46c0      	nop			; (mov r8, r8)

000155fc <__aeabi_uidivmod>:
   155fc:	2900      	cmp	r1, #0
   155fe:	d0f7      	beq.n	155f0 <__udivsi3+0x100>
   15600:	e776      	b.n	154f0 <__udivsi3>
   15602:	4770      	bx	lr

00015604 <__divsi3>:
   15604:	4603      	mov	r3, r0
   15606:	430b      	orrs	r3, r1
   15608:	d47f      	bmi.n	1570a <__divsi3+0x106>
   1560a:	2200      	movs	r2, #0
   1560c:	0843      	lsrs	r3, r0, #1
   1560e:	428b      	cmp	r3, r1
   15610:	d374      	bcc.n	156fc <__divsi3+0xf8>
   15612:	0903      	lsrs	r3, r0, #4
   15614:	428b      	cmp	r3, r1
   15616:	d35f      	bcc.n	156d8 <__divsi3+0xd4>
   15618:	0a03      	lsrs	r3, r0, #8
   1561a:	428b      	cmp	r3, r1
   1561c:	d344      	bcc.n	156a8 <__divsi3+0xa4>
   1561e:	0b03      	lsrs	r3, r0, #12
   15620:	428b      	cmp	r3, r1
   15622:	d328      	bcc.n	15676 <__divsi3+0x72>
   15624:	0c03      	lsrs	r3, r0, #16
   15626:	428b      	cmp	r3, r1
   15628:	d30d      	bcc.n	15646 <__divsi3+0x42>
   1562a:	22ff      	movs	r2, #255	; 0xff
   1562c:	0209      	lsls	r1, r1, #8
   1562e:	ba12      	rev	r2, r2
   15630:	0c03      	lsrs	r3, r0, #16
   15632:	428b      	cmp	r3, r1
   15634:	d302      	bcc.n	1563c <__divsi3+0x38>
   15636:	1212      	asrs	r2, r2, #8
   15638:	0209      	lsls	r1, r1, #8
   1563a:	d065      	beq.n	15708 <__divsi3+0x104>
   1563c:	0b03      	lsrs	r3, r0, #12
   1563e:	428b      	cmp	r3, r1
   15640:	d319      	bcc.n	15676 <__divsi3+0x72>
   15642:	e000      	b.n	15646 <__divsi3+0x42>
   15644:	0a09      	lsrs	r1, r1, #8
   15646:	0bc3      	lsrs	r3, r0, #15
   15648:	428b      	cmp	r3, r1
   1564a:	d301      	bcc.n	15650 <__divsi3+0x4c>
   1564c:	03cb      	lsls	r3, r1, #15
   1564e:	1ac0      	subs	r0, r0, r3
   15650:	4152      	adcs	r2, r2
   15652:	0b83      	lsrs	r3, r0, #14
   15654:	428b      	cmp	r3, r1
   15656:	d301      	bcc.n	1565c <__divsi3+0x58>
   15658:	038b      	lsls	r3, r1, #14
   1565a:	1ac0      	subs	r0, r0, r3
   1565c:	4152      	adcs	r2, r2
   1565e:	0b43      	lsrs	r3, r0, #13
   15660:	428b      	cmp	r3, r1
   15662:	d301      	bcc.n	15668 <__divsi3+0x64>
   15664:	034b      	lsls	r3, r1, #13
   15666:	1ac0      	subs	r0, r0, r3
   15668:	4152      	adcs	r2, r2
   1566a:	0b03      	lsrs	r3, r0, #12
   1566c:	428b      	cmp	r3, r1
   1566e:	d301      	bcc.n	15674 <__divsi3+0x70>
   15670:	030b      	lsls	r3, r1, #12
   15672:	1ac0      	subs	r0, r0, r3
   15674:	4152      	adcs	r2, r2
   15676:	0ac3      	lsrs	r3, r0, #11
   15678:	428b      	cmp	r3, r1
   1567a:	d301      	bcc.n	15680 <__divsi3+0x7c>
   1567c:	02cb      	lsls	r3, r1, #11
   1567e:	1ac0      	subs	r0, r0, r3
   15680:	4152      	adcs	r2, r2
   15682:	0a83      	lsrs	r3, r0, #10
   15684:	428b      	cmp	r3, r1
   15686:	d301      	bcc.n	1568c <__divsi3+0x88>
   15688:	028b      	lsls	r3, r1, #10
   1568a:	1ac0      	subs	r0, r0, r3
   1568c:	4152      	adcs	r2, r2
   1568e:	0a43      	lsrs	r3, r0, #9
   15690:	428b      	cmp	r3, r1
   15692:	d301      	bcc.n	15698 <__divsi3+0x94>
   15694:	024b      	lsls	r3, r1, #9
   15696:	1ac0      	subs	r0, r0, r3
   15698:	4152      	adcs	r2, r2
   1569a:	0a03      	lsrs	r3, r0, #8
   1569c:	428b      	cmp	r3, r1
   1569e:	d301      	bcc.n	156a4 <__divsi3+0xa0>
   156a0:	020b      	lsls	r3, r1, #8
   156a2:	1ac0      	subs	r0, r0, r3
   156a4:	4152      	adcs	r2, r2
   156a6:	d2cd      	bcs.n	15644 <__divsi3+0x40>
   156a8:	09c3      	lsrs	r3, r0, #7
   156aa:	428b      	cmp	r3, r1
   156ac:	d301      	bcc.n	156b2 <__divsi3+0xae>
   156ae:	01cb      	lsls	r3, r1, #7
   156b0:	1ac0      	subs	r0, r0, r3
   156b2:	4152      	adcs	r2, r2
   156b4:	0983      	lsrs	r3, r0, #6
   156b6:	428b      	cmp	r3, r1
   156b8:	d301      	bcc.n	156be <__divsi3+0xba>
   156ba:	018b      	lsls	r3, r1, #6
   156bc:	1ac0      	subs	r0, r0, r3
   156be:	4152      	adcs	r2, r2
   156c0:	0943      	lsrs	r3, r0, #5
   156c2:	428b      	cmp	r3, r1
   156c4:	d301      	bcc.n	156ca <__divsi3+0xc6>
   156c6:	014b      	lsls	r3, r1, #5
   156c8:	1ac0      	subs	r0, r0, r3
   156ca:	4152      	adcs	r2, r2
   156cc:	0903      	lsrs	r3, r0, #4
   156ce:	428b      	cmp	r3, r1
   156d0:	d301      	bcc.n	156d6 <__divsi3+0xd2>
   156d2:	010b      	lsls	r3, r1, #4
   156d4:	1ac0      	subs	r0, r0, r3
   156d6:	4152      	adcs	r2, r2
   156d8:	08c3      	lsrs	r3, r0, #3
   156da:	428b      	cmp	r3, r1
   156dc:	d301      	bcc.n	156e2 <__divsi3+0xde>
   156de:	00cb      	lsls	r3, r1, #3
   156e0:	1ac0      	subs	r0, r0, r3
   156e2:	4152      	adcs	r2, r2
   156e4:	0883      	lsrs	r3, r0, #2
   156e6:	428b      	cmp	r3, r1
   156e8:	d301      	bcc.n	156ee <__divsi3+0xea>
   156ea:	008b      	lsls	r3, r1, #2
   156ec:	1ac0      	subs	r0, r0, r3
   156ee:	4152      	adcs	r2, r2
   156f0:	0843      	lsrs	r3, r0, #1
   156f2:	428b      	cmp	r3, r1
   156f4:	d301      	bcc.n	156fa <__divsi3+0xf6>
   156f6:	004b      	lsls	r3, r1, #1
   156f8:	1ac0      	subs	r0, r0, r3
   156fa:	4152      	adcs	r2, r2
   156fc:	1a41      	subs	r1, r0, r1
   156fe:	d200      	bcs.n	15702 <__divsi3+0xfe>
   15700:	4601      	mov	r1, r0
   15702:	4152      	adcs	r2, r2
   15704:	4610      	mov	r0, r2
   15706:	4770      	bx	lr
   15708:	e05d      	b.n	157c6 <__divsi3+0x1c2>
   1570a:	0fca      	lsrs	r2, r1, #31
   1570c:	d000      	beq.n	15710 <__divsi3+0x10c>
   1570e:	4249      	negs	r1, r1
   15710:	1003      	asrs	r3, r0, #32
   15712:	d300      	bcc.n	15716 <__divsi3+0x112>
   15714:	4240      	negs	r0, r0
   15716:	4053      	eors	r3, r2
   15718:	2200      	movs	r2, #0
   1571a:	469c      	mov	ip, r3
   1571c:	0903      	lsrs	r3, r0, #4
   1571e:	428b      	cmp	r3, r1
   15720:	d32d      	bcc.n	1577e <__divsi3+0x17a>
   15722:	0a03      	lsrs	r3, r0, #8
   15724:	428b      	cmp	r3, r1
   15726:	d312      	bcc.n	1574e <__divsi3+0x14a>
   15728:	22fc      	movs	r2, #252	; 0xfc
   1572a:	0189      	lsls	r1, r1, #6
   1572c:	ba12      	rev	r2, r2
   1572e:	0a03      	lsrs	r3, r0, #8
   15730:	428b      	cmp	r3, r1
   15732:	d30c      	bcc.n	1574e <__divsi3+0x14a>
   15734:	0189      	lsls	r1, r1, #6
   15736:	1192      	asrs	r2, r2, #6
   15738:	428b      	cmp	r3, r1
   1573a:	d308      	bcc.n	1574e <__divsi3+0x14a>
   1573c:	0189      	lsls	r1, r1, #6
   1573e:	1192      	asrs	r2, r2, #6
   15740:	428b      	cmp	r3, r1
   15742:	d304      	bcc.n	1574e <__divsi3+0x14a>
   15744:	0189      	lsls	r1, r1, #6
   15746:	d03a      	beq.n	157be <__divsi3+0x1ba>
   15748:	1192      	asrs	r2, r2, #6
   1574a:	e000      	b.n	1574e <__divsi3+0x14a>
   1574c:	0989      	lsrs	r1, r1, #6
   1574e:	09c3      	lsrs	r3, r0, #7
   15750:	428b      	cmp	r3, r1
   15752:	d301      	bcc.n	15758 <__divsi3+0x154>
   15754:	01cb      	lsls	r3, r1, #7
   15756:	1ac0      	subs	r0, r0, r3
   15758:	4152      	adcs	r2, r2
   1575a:	0983      	lsrs	r3, r0, #6
   1575c:	428b      	cmp	r3, r1
   1575e:	d301      	bcc.n	15764 <__divsi3+0x160>
   15760:	018b      	lsls	r3, r1, #6
   15762:	1ac0      	subs	r0, r0, r3
   15764:	4152      	adcs	r2, r2
   15766:	0943      	lsrs	r3, r0, #5
   15768:	428b      	cmp	r3, r1
   1576a:	d301      	bcc.n	15770 <__divsi3+0x16c>
   1576c:	014b      	lsls	r3, r1, #5
   1576e:	1ac0      	subs	r0, r0, r3
   15770:	4152      	adcs	r2, r2
   15772:	0903      	lsrs	r3, r0, #4
   15774:	428b      	cmp	r3, r1
   15776:	d301      	bcc.n	1577c <__divsi3+0x178>
   15778:	010b      	lsls	r3, r1, #4
   1577a:	1ac0      	subs	r0, r0, r3
   1577c:	4152      	adcs	r2, r2
   1577e:	08c3      	lsrs	r3, r0, #3
   15780:	428b      	cmp	r3, r1
   15782:	d301      	bcc.n	15788 <__divsi3+0x184>
   15784:	00cb      	lsls	r3, r1, #3
   15786:	1ac0      	subs	r0, r0, r3
   15788:	4152      	adcs	r2, r2
   1578a:	0883      	lsrs	r3, r0, #2
   1578c:	428b      	cmp	r3, r1
   1578e:	d301      	bcc.n	15794 <__divsi3+0x190>
   15790:	008b      	lsls	r3, r1, #2
   15792:	1ac0      	subs	r0, r0, r3
   15794:	4152      	adcs	r2, r2
   15796:	d2d9      	bcs.n	1574c <__divsi3+0x148>
   15798:	0843      	lsrs	r3, r0, #1
   1579a:	428b      	cmp	r3, r1
   1579c:	d301      	bcc.n	157a2 <__divsi3+0x19e>
   1579e:	004b      	lsls	r3, r1, #1
   157a0:	1ac0      	subs	r0, r0, r3
   157a2:	4152      	adcs	r2, r2
   157a4:	1a41      	subs	r1, r0, r1
   157a6:	d200      	bcs.n	157aa <__divsi3+0x1a6>
   157a8:	4601      	mov	r1, r0
   157aa:	4663      	mov	r3, ip
   157ac:	4152      	adcs	r2, r2
   157ae:	105b      	asrs	r3, r3, #1
   157b0:	4610      	mov	r0, r2
   157b2:	d301      	bcc.n	157b8 <__divsi3+0x1b4>
   157b4:	4240      	negs	r0, r0
   157b6:	2b00      	cmp	r3, #0
   157b8:	d500      	bpl.n	157bc <__divsi3+0x1b8>
   157ba:	4249      	negs	r1, r1
   157bc:	4770      	bx	lr
   157be:	4663      	mov	r3, ip
   157c0:	105b      	asrs	r3, r3, #1
   157c2:	d300      	bcc.n	157c6 <__divsi3+0x1c2>
   157c4:	4240      	negs	r0, r0
   157c6:	b501      	push	{r0, lr}
   157c8:	2000      	movs	r0, #0
   157ca:	f000 f805 	bl	157d8 <__aeabi_idiv0>
   157ce:	bd02      	pop	{r1, pc}

000157d0 <__aeabi_idivmod>:
   157d0:	2900      	cmp	r1, #0
   157d2:	d0f8      	beq.n	157c6 <__divsi3+0x1c2>
   157d4:	e716      	b.n	15604 <__divsi3>
   157d6:	4770      	bx	lr

000157d8 <__aeabi_idiv0>:
   157d8:	4770      	bx	lr
   157da:	46c0      	nop			; (mov r8, r8)

000157dc <__aeabi_cdrcmple>:
   157dc:	4684      	mov	ip, r0
   157de:	1c10      	adds	r0, r2, #0
   157e0:	4662      	mov	r2, ip
   157e2:	468c      	mov	ip, r1
   157e4:	1c19      	adds	r1, r3, #0
   157e6:	4663      	mov	r3, ip
   157e8:	e000      	b.n	157ec <__aeabi_cdcmpeq>
   157ea:	46c0      	nop			; (mov r8, r8)

000157ec <__aeabi_cdcmpeq>:
   157ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   157ee:	f001 faeb 	bl	16dc8 <__ledf2>
   157f2:	2800      	cmp	r0, #0
   157f4:	d401      	bmi.n	157fa <__aeabi_cdcmpeq+0xe>
   157f6:	2100      	movs	r1, #0
   157f8:	42c8      	cmn	r0, r1
   157fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000157fc <__aeabi_dcmpeq>:
   157fc:	b510      	push	{r4, lr}
   157fe:	f001 fa45 	bl	16c8c <__eqdf2>
   15802:	4240      	negs	r0, r0
   15804:	3001      	adds	r0, #1
   15806:	bd10      	pop	{r4, pc}

00015808 <__aeabi_dcmplt>:
   15808:	b510      	push	{r4, lr}
   1580a:	f001 fadd 	bl	16dc8 <__ledf2>
   1580e:	2800      	cmp	r0, #0
   15810:	db01      	blt.n	15816 <__aeabi_dcmplt+0xe>
   15812:	2000      	movs	r0, #0
   15814:	bd10      	pop	{r4, pc}
   15816:	2001      	movs	r0, #1
   15818:	bd10      	pop	{r4, pc}
   1581a:	46c0      	nop			; (mov r8, r8)

0001581c <__aeabi_dcmple>:
   1581c:	b510      	push	{r4, lr}
   1581e:	f001 fad3 	bl	16dc8 <__ledf2>
   15822:	2800      	cmp	r0, #0
   15824:	dd01      	ble.n	1582a <__aeabi_dcmple+0xe>
   15826:	2000      	movs	r0, #0
   15828:	bd10      	pop	{r4, pc}
   1582a:	2001      	movs	r0, #1
   1582c:	bd10      	pop	{r4, pc}
   1582e:	46c0      	nop			; (mov r8, r8)

00015830 <__aeabi_dcmpgt>:
   15830:	b510      	push	{r4, lr}
   15832:	f001 fa65 	bl	16d00 <__gedf2>
   15836:	2800      	cmp	r0, #0
   15838:	dc01      	bgt.n	1583e <__aeabi_dcmpgt+0xe>
   1583a:	2000      	movs	r0, #0
   1583c:	bd10      	pop	{r4, pc}
   1583e:	2001      	movs	r0, #1
   15840:	bd10      	pop	{r4, pc}
   15842:	46c0      	nop			; (mov r8, r8)

00015844 <__aeabi_dcmpge>:
   15844:	b510      	push	{r4, lr}
   15846:	f001 fa5b 	bl	16d00 <__gedf2>
   1584a:	2800      	cmp	r0, #0
   1584c:	da01      	bge.n	15852 <__aeabi_dcmpge+0xe>
   1584e:	2000      	movs	r0, #0
   15850:	bd10      	pop	{r4, pc}
   15852:	2001      	movs	r0, #1
   15854:	bd10      	pop	{r4, pc}
   15856:	46c0      	nop			; (mov r8, r8)

00015858 <__aeabi_uldivmod>:
   15858:	2b00      	cmp	r3, #0
   1585a:	d111      	bne.n	15880 <__aeabi_uldivmod+0x28>
   1585c:	2a00      	cmp	r2, #0
   1585e:	d10f      	bne.n	15880 <__aeabi_uldivmod+0x28>
   15860:	2900      	cmp	r1, #0
   15862:	d100      	bne.n	15866 <__aeabi_uldivmod+0xe>
   15864:	2800      	cmp	r0, #0
   15866:	d002      	beq.n	1586e <__aeabi_uldivmod+0x16>
   15868:	2100      	movs	r1, #0
   1586a:	43c9      	mvns	r1, r1
   1586c:	1c08      	adds	r0, r1, #0
   1586e:	b407      	push	{r0, r1, r2}
   15870:	4802      	ldr	r0, [pc, #8]	; (1587c <__aeabi_uldivmod+0x24>)
   15872:	a102      	add	r1, pc, #8	; (adr r1, 1587c <__aeabi_uldivmod+0x24>)
   15874:	1840      	adds	r0, r0, r1
   15876:	9002      	str	r0, [sp, #8]
   15878:	bd03      	pop	{r0, r1, pc}
   1587a:	46c0      	nop			; (mov r8, r8)
   1587c:	ffffff5d 	.word	0xffffff5d
   15880:	b403      	push	{r0, r1}
   15882:	4668      	mov	r0, sp
   15884:	b501      	push	{r0, lr}
   15886:	9802      	ldr	r0, [sp, #8]
   15888:	f000 f84e 	bl	15928 <__udivmoddi4>
   1588c:	9b01      	ldr	r3, [sp, #4]
   1588e:	469e      	mov	lr, r3
   15890:	b002      	add	sp, #8
   15892:	bc0c      	pop	{r2, r3}
   15894:	4770      	bx	lr
   15896:	46c0      	nop			; (mov r8, r8)

00015898 <__aeabi_lmul>:
   15898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1589a:	46ce      	mov	lr, r9
   1589c:	4647      	mov	r7, r8
   1589e:	0415      	lsls	r5, r2, #16
   158a0:	0c2d      	lsrs	r5, r5, #16
   158a2:	002e      	movs	r6, r5
   158a4:	b580      	push	{r7, lr}
   158a6:	0407      	lsls	r7, r0, #16
   158a8:	0c14      	lsrs	r4, r2, #16
   158aa:	0c3f      	lsrs	r7, r7, #16
   158ac:	4699      	mov	r9, r3
   158ae:	0c03      	lsrs	r3, r0, #16
   158b0:	437e      	muls	r6, r7
   158b2:	435d      	muls	r5, r3
   158b4:	4367      	muls	r7, r4
   158b6:	4363      	muls	r3, r4
   158b8:	197f      	adds	r7, r7, r5
   158ba:	0c34      	lsrs	r4, r6, #16
   158bc:	19e4      	adds	r4, r4, r7
   158be:	469c      	mov	ip, r3
   158c0:	42a5      	cmp	r5, r4
   158c2:	d903      	bls.n	158cc <__aeabi_lmul+0x34>
   158c4:	2380      	movs	r3, #128	; 0x80
   158c6:	025b      	lsls	r3, r3, #9
   158c8:	4698      	mov	r8, r3
   158ca:	44c4      	add	ip, r8
   158cc:	464b      	mov	r3, r9
   158ce:	4351      	muls	r1, r2
   158d0:	4343      	muls	r3, r0
   158d2:	0436      	lsls	r6, r6, #16
   158d4:	0c36      	lsrs	r6, r6, #16
   158d6:	0c25      	lsrs	r5, r4, #16
   158d8:	0424      	lsls	r4, r4, #16
   158da:	4465      	add	r5, ip
   158dc:	19a4      	adds	r4, r4, r6
   158de:	1859      	adds	r1, r3, r1
   158e0:	1949      	adds	r1, r1, r5
   158e2:	0020      	movs	r0, r4
   158e4:	bc0c      	pop	{r2, r3}
   158e6:	4690      	mov	r8, r2
   158e8:	4699      	mov	r9, r3
   158ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000158ec <__aeabi_d2uiz>:
   158ec:	b570      	push	{r4, r5, r6, lr}
   158ee:	2200      	movs	r2, #0
   158f0:	4b0c      	ldr	r3, [pc, #48]	; (15924 <__aeabi_d2uiz+0x38>)
   158f2:	0004      	movs	r4, r0
   158f4:	000d      	movs	r5, r1
   158f6:	f7ff ffa5 	bl	15844 <__aeabi_dcmpge>
   158fa:	2800      	cmp	r0, #0
   158fc:	d104      	bne.n	15908 <__aeabi_d2uiz+0x1c>
   158fe:	0020      	movs	r0, r4
   15900:	0029      	movs	r1, r5
   15902:	f002 f879 	bl	179f8 <__aeabi_d2iz>
   15906:	bd70      	pop	{r4, r5, r6, pc}
   15908:	4b06      	ldr	r3, [pc, #24]	; (15924 <__aeabi_d2uiz+0x38>)
   1590a:	2200      	movs	r2, #0
   1590c:	0020      	movs	r0, r4
   1590e:	0029      	movs	r1, r5
   15910:	f001 fd3c 	bl	1738c <__aeabi_dsub>
   15914:	f002 f870 	bl	179f8 <__aeabi_d2iz>
   15918:	2380      	movs	r3, #128	; 0x80
   1591a:	061b      	lsls	r3, r3, #24
   1591c:	469c      	mov	ip, r3
   1591e:	4460      	add	r0, ip
   15920:	e7f1      	b.n	15906 <__aeabi_d2uiz+0x1a>
   15922:	46c0      	nop			; (mov r8, r8)
   15924:	41e00000 	.word	0x41e00000

00015928 <__udivmoddi4>:
   15928:	b5f0      	push	{r4, r5, r6, r7, lr}
   1592a:	4657      	mov	r7, sl
   1592c:	464e      	mov	r6, r9
   1592e:	4645      	mov	r5, r8
   15930:	46de      	mov	lr, fp
   15932:	b5e0      	push	{r5, r6, r7, lr}
   15934:	0004      	movs	r4, r0
   15936:	b083      	sub	sp, #12
   15938:	000d      	movs	r5, r1
   1593a:	4692      	mov	sl, r2
   1593c:	4699      	mov	r9, r3
   1593e:	428b      	cmp	r3, r1
   15940:	d82f      	bhi.n	159a2 <__udivmoddi4+0x7a>
   15942:	d02c      	beq.n	1599e <__udivmoddi4+0x76>
   15944:	4649      	mov	r1, r9
   15946:	4650      	mov	r0, sl
   15948:	f002 f974 	bl	17c34 <__clzdi2>
   1594c:	0029      	movs	r1, r5
   1594e:	0006      	movs	r6, r0
   15950:	0020      	movs	r0, r4
   15952:	f002 f96f 	bl	17c34 <__clzdi2>
   15956:	1a33      	subs	r3, r6, r0
   15958:	4698      	mov	r8, r3
   1595a:	3b20      	subs	r3, #32
   1595c:	469b      	mov	fp, r3
   1595e:	d500      	bpl.n	15962 <__udivmoddi4+0x3a>
   15960:	e074      	b.n	15a4c <__udivmoddi4+0x124>
   15962:	4653      	mov	r3, sl
   15964:	465a      	mov	r2, fp
   15966:	4093      	lsls	r3, r2
   15968:	001f      	movs	r7, r3
   1596a:	4653      	mov	r3, sl
   1596c:	4642      	mov	r2, r8
   1596e:	4093      	lsls	r3, r2
   15970:	001e      	movs	r6, r3
   15972:	42af      	cmp	r7, r5
   15974:	d829      	bhi.n	159ca <__udivmoddi4+0xa2>
   15976:	d026      	beq.n	159c6 <__udivmoddi4+0x9e>
   15978:	465b      	mov	r3, fp
   1597a:	1ba4      	subs	r4, r4, r6
   1597c:	41bd      	sbcs	r5, r7
   1597e:	2b00      	cmp	r3, #0
   15980:	da00      	bge.n	15984 <__udivmoddi4+0x5c>
   15982:	e079      	b.n	15a78 <__udivmoddi4+0x150>
   15984:	2200      	movs	r2, #0
   15986:	2300      	movs	r3, #0
   15988:	9200      	str	r2, [sp, #0]
   1598a:	9301      	str	r3, [sp, #4]
   1598c:	2301      	movs	r3, #1
   1598e:	465a      	mov	r2, fp
   15990:	4093      	lsls	r3, r2
   15992:	9301      	str	r3, [sp, #4]
   15994:	2301      	movs	r3, #1
   15996:	4642      	mov	r2, r8
   15998:	4093      	lsls	r3, r2
   1599a:	9300      	str	r3, [sp, #0]
   1599c:	e019      	b.n	159d2 <__udivmoddi4+0xaa>
   1599e:	4282      	cmp	r2, r0
   159a0:	d9d0      	bls.n	15944 <__udivmoddi4+0x1c>
   159a2:	2200      	movs	r2, #0
   159a4:	2300      	movs	r3, #0
   159a6:	9200      	str	r2, [sp, #0]
   159a8:	9301      	str	r3, [sp, #4]
   159aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   159ac:	2b00      	cmp	r3, #0
   159ae:	d001      	beq.n	159b4 <__udivmoddi4+0x8c>
   159b0:	601c      	str	r4, [r3, #0]
   159b2:	605d      	str	r5, [r3, #4]
   159b4:	9800      	ldr	r0, [sp, #0]
   159b6:	9901      	ldr	r1, [sp, #4]
   159b8:	b003      	add	sp, #12
   159ba:	bc3c      	pop	{r2, r3, r4, r5}
   159bc:	4690      	mov	r8, r2
   159be:	4699      	mov	r9, r3
   159c0:	46a2      	mov	sl, r4
   159c2:	46ab      	mov	fp, r5
   159c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159c6:	42a3      	cmp	r3, r4
   159c8:	d9d6      	bls.n	15978 <__udivmoddi4+0x50>
   159ca:	2200      	movs	r2, #0
   159cc:	2300      	movs	r3, #0
   159ce:	9200      	str	r2, [sp, #0]
   159d0:	9301      	str	r3, [sp, #4]
   159d2:	4643      	mov	r3, r8
   159d4:	2b00      	cmp	r3, #0
   159d6:	d0e8      	beq.n	159aa <__udivmoddi4+0x82>
   159d8:	07fb      	lsls	r3, r7, #31
   159da:	0872      	lsrs	r2, r6, #1
   159dc:	431a      	orrs	r2, r3
   159de:	4646      	mov	r6, r8
   159e0:	087b      	lsrs	r3, r7, #1
   159e2:	e00e      	b.n	15a02 <__udivmoddi4+0xda>
   159e4:	42ab      	cmp	r3, r5
   159e6:	d101      	bne.n	159ec <__udivmoddi4+0xc4>
   159e8:	42a2      	cmp	r2, r4
   159ea:	d80c      	bhi.n	15a06 <__udivmoddi4+0xde>
   159ec:	1aa4      	subs	r4, r4, r2
   159ee:	419d      	sbcs	r5, r3
   159f0:	2001      	movs	r0, #1
   159f2:	1924      	adds	r4, r4, r4
   159f4:	416d      	adcs	r5, r5
   159f6:	2100      	movs	r1, #0
   159f8:	3e01      	subs	r6, #1
   159fa:	1824      	adds	r4, r4, r0
   159fc:	414d      	adcs	r5, r1
   159fe:	2e00      	cmp	r6, #0
   15a00:	d006      	beq.n	15a10 <__udivmoddi4+0xe8>
   15a02:	42ab      	cmp	r3, r5
   15a04:	d9ee      	bls.n	159e4 <__udivmoddi4+0xbc>
   15a06:	3e01      	subs	r6, #1
   15a08:	1924      	adds	r4, r4, r4
   15a0a:	416d      	adcs	r5, r5
   15a0c:	2e00      	cmp	r6, #0
   15a0e:	d1f8      	bne.n	15a02 <__udivmoddi4+0xda>
   15a10:	465b      	mov	r3, fp
   15a12:	9800      	ldr	r0, [sp, #0]
   15a14:	9901      	ldr	r1, [sp, #4]
   15a16:	1900      	adds	r0, r0, r4
   15a18:	4169      	adcs	r1, r5
   15a1a:	2b00      	cmp	r3, #0
   15a1c:	db22      	blt.n	15a64 <__udivmoddi4+0x13c>
   15a1e:	002b      	movs	r3, r5
   15a20:	465a      	mov	r2, fp
   15a22:	40d3      	lsrs	r3, r2
   15a24:	002a      	movs	r2, r5
   15a26:	4644      	mov	r4, r8
   15a28:	40e2      	lsrs	r2, r4
   15a2a:	001c      	movs	r4, r3
   15a2c:	465b      	mov	r3, fp
   15a2e:	0015      	movs	r5, r2
   15a30:	2b00      	cmp	r3, #0
   15a32:	db2c      	blt.n	15a8e <__udivmoddi4+0x166>
   15a34:	0026      	movs	r6, r4
   15a36:	409e      	lsls	r6, r3
   15a38:	0033      	movs	r3, r6
   15a3a:	0026      	movs	r6, r4
   15a3c:	4647      	mov	r7, r8
   15a3e:	40be      	lsls	r6, r7
   15a40:	0032      	movs	r2, r6
   15a42:	1a80      	subs	r0, r0, r2
   15a44:	4199      	sbcs	r1, r3
   15a46:	9000      	str	r0, [sp, #0]
   15a48:	9101      	str	r1, [sp, #4]
   15a4a:	e7ae      	b.n	159aa <__udivmoddi4+0x82>
   15a4c:	4642      	mov	r2, r8
   15a4e:	2320      	movs	r3, #32
   15a50:	1a9b      	subs	r3, r3, r2
   15a52:	4652      	mov	r2, sl
   15a54:	40da      	lsrs	r2, r3
   15a56:	4641      	mov	r1, r8
   15a58:	0013      	movs	r3, r2
   15a5a:	464a      	mov	r2, r9
   15a5c:	408a      	lsls	r2, r1
   15a5e:	0017      	movs	r7, r2
   15a60:	431f      	orrs	r7, r3
   15a62:	e782      	b.n	1596a <__udivmoddi4+0x42>
   15a64:	4642      	mov	r2, r8
   15a66:	2320      	movs	r3, #32
   15a68:	1a9b      	subs	r3, r3, r2
   15a6a:	002a      	movs	r2, r5
   15a6c:	4646      	mov	r6, r8
   15a6e:	409a      	lsls	r2, r3
   15a70:	0023      	movs	r3, r4
   15a72:	40f3      	lsrs	r3, r6
   15a74:	4313      	orrs	r3, r2
   15a76:	e7d5      	b.n	15a24 <__udivmoddi4+0xfc>
   15a78:	4642      	mov	r2, r8
   15a7a:	2320      	movs	r3, #32
   15a7c:	2100      	movs	r1, #0
   15a7e:	1a9b      	subs	r3, r3, r2
   15a80:	2200      	movs	r2, #0
   15a82:	9100      	str	r1, [sp, #0]
   15a84:	9201      	str	r2, [sp, #4]
   15a86:	2201      	movs	r2, #1
   15a88:	40da      	lsrs	r2, r3
   15a8a:	9201      	str	r2, [sp, #4]
   15a8c:	e782      	b.n	15994 <__udivmoddi4+0x6c>
   15a8e:	4642      	mov	r2, r8
   15a90:	2320      	movs	r3, #32
   15a92:	0026      	movs	r6, r4
   15a94:	1a9b      	subs	r3, r3, r2
   15a96:	40de      	lsrs	r6, r3
   15a98:	002f      	movs	r7, r5
   15a9a:	46b4      	mov	ip, r6
   15a9c:	4097      	lsls	r7, r2
   15a9e:	4666      	mov	r6, ip
   15aa0:	003b      	movs	r3, r7
   15aa2:	4333      	orrs	r3, r6
   15aa4:	e7c9      	b.n	15a3a <__udivmoddi4+0x112>
   15aa6:	46c0      	nop			; (mov r8, r8)

00015aa8 <__aeabi_fdiv>:
   15aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15aaa:	4657      	mov	r7, sl
   15aac:	464e      	mov	r6, r9
   15aae:	46de      	mov	lr, fp
   15ab0:	4645      	mov	r5, r8
   15ab2:	b5e0      	push	{r5, r6, r7, lr}
   15ab4:	0244      	lsls	r4, r0, #9
   15ab6:	0043      	lsls	r3, r0, #1
   15ab8:	0fc6      	lsrs	r6, r0, #31
   15aba:	b083      	sub	sp, #12
   15abc:	1c0f      	adds	r7, r1, #0
   15abe:	0a64      	lsrs	r4, r4, #9
   15ac0:	0e1b      	lsrs	r3, r3, #24
   15ac2:	46b2      	mov	sl, r6
   15ac4:	d053      	beq.n	15b6e <__aeabi_fdiv+0xc6>
   15ac6:	2bff      	cmp	r3, #255	; 0xff
   15ac8:	d027      	beq.n	15b1a <__aeabi_fdiv+0x72>
   15aca:	2280      	movs	r2, #128	; 0x80
   15acc:	00e4      	lsls	r4, r4, #3
   15ace:	04d2      	lsls	r2, r2, #19
   15ad0:	4314      	orrs	r4, r2
   15ad2:	227f      	movs	r2, #127	; 0x7f
   15ad4:	4252      	negs	r2, r2
   15ad6:	4690      	mov	r8, r2
   15ad8:	4498      	add	r8, r3
   15ada:	2300      	movs	r3, #0
   15adc:	4699      	mov	r9, r3
   15ade:	469b      	mov	fp, r3
   15ae0:	027d      	lsls	r5, r7, #9
   15ae2:	0078      	lsls	r0, r7, #1
   15ae4:	0ffb      	lsrs	r3, r7, #31
   15ae6:	0a6d      	lsrs	r5, r5, #9
   15ae8:	0e00      	lsrs	r0, r0, #24
   15aea:	9300      	str	r3, [sp, #0]
   15aec:	d024      	beq.n	15b38 <__aeabi_fdiv+0x90>
   15aee:	28ff      	cmp	r0, #255	; 0xff
   15af0:	d046      	beq.n	15b80 <__aeabi_fdiv+0xd8>
   15af2:	2380      	movs	r3, #128	; 0x80
   15af4:	2100      	movs	r1, #0
   15af6:	00ed      	lsls	r5, r5, #3
   15af8:	04db      	lsls	r3, r3, #19
   15afa:	431d      	orrs	r5, r3
   15afc:	387f      	subs	r0, #127	; 0x7f
   15afe:	4647      	mov	r7, r8
   15b00:	1a38      	subs	r0, r7, r0
   15b02:	464f      	mov	r7, r9
   15b04:	430f      	orrs	r7, r1
   15b06:	00bf      	lsls	r7, r7, #2
   15b08:	46b9      	mov	r9, r7
   15b0a:	0033      	movs	r3, r6
   15b0c:	9a00      	ldr	r2, [sp, #0]
   15b0e:	4f87      	ldr	r7, [pc, #540]	; (15d2c <__aeabi_fdiv+0x284>)
   15b10:	4053      	eors	r3, r2
   15b12:	464a      	mov	r2, r9
   15b14:	58ba      	ldr	r2, [r7, r2]
   15b16:	9301      	str	r3, [sp, #4]
   15b18:	4697      	mov	pc, r2
   15b1a:	2c00      	cmp	r4, #0
   15b1c:	d14e      	bne.n	15bbc <__aeabi_fdiv+0x114>
   15b1e:	2308      	movs	r3, #8
   15b20:	4699      	mov	r9, r3
   15b22:	33f7      	adds	r3, #247	; 0xf7
   15b24:	4698      	mov	r8, r3
   15b26:	3bfd      	subs	r3, #253	; 0xfd
   15b28:	469b      	mov	fp, r3
   15b2a:	027d      	lsls	r5, r7, #9
   15b2c:	0078      	lsls	r0, r7, #1
   15b2e:	0ffb      	lsrs	r3, r7, #31
   15b30:	0a6d      	lsrs	r5, r5, #9
   15b32:	0e00      	lsrs	r0, r0, #24
   15b34:	9300      	str	r3, [sp, #0]
   15b36:	d1da      	bne.n	15aee <__aeabi_fdiv+0x46>
   15b38:	2d00      	cmp	r5, #0
   15b3a:	d126      	bne.n	15b8a <__aeabi_fdiv+0xe2>
   15b3c:	2000      	movs	r0, #0
   15b3e:	2101      	movs	r1, #1
   15b40:	0033      	movs	r3, r6
   15b42:	9a00      	ldr	r2, [sp, #0]
   15b44:	4f7a      	ldr	r7, [pc, #488]	; (15d30 <__aeabi_fdiv+0x288>)
   15b46:	4053      	eors	r3, r2
   15b48:	4642      	mov	r2, r8
   15b4a:	1a10      	subs	r0, r2, r0
   15b4c:	464a      	mov	r2, r9
   15b4e:	430a      	orrs	r2, r1
   15b50:	0092      	lsls	r2, r2, #2
   15b52:	58ba      	ldr	r2, [r7, r2]
   15b54:	001d      	movs	r5, r3
   15b56:	4697      	mov	pc, r2
   15b58:	9b00      	ldr	r3, [sp, #0]
   15b5a:	002c      	movs	r4, r5
   15b5c:	469a      	mov	sl, r3
   15b5e:	468b      	mov	fp, r1
   15b60:	465b      	mov	r3, fp
   15b62:	2b02      	cmp	r3, #2
   15b64:	d131      	bne.n	15bca <__aeabi_fdiv+0x122>
   15b66:	4653      	mov	r3, sl
   15b68:	21ff      	movs	r1, #255	; 0xff
   15b6a:	2400      	movs	r4, #0
   15b6c:	e038      	b.n	15be0 <__aeabi_fdiv+0x138>
   15b6e:	2c00      	cmp	r4, #0
   15b70:	d117      	bne.n	15ba2 <__aeabi_fdiv+0xfa>
   15b72:	2304      	movs	r3, #4
   15b74:	4699      	mov	r9, r3
   15b76:	2300      	movs	r3, #0
   15b78:	4698      	mov	r8, r3
   15b7a:	3301      	adds	r3, #1
   15b7c:	469b      	mov	fp, r3
   15b7e:	e7af      	b.n	15ae0 <__aeabi_fdiv+0x38>
   15b80:	20ff      	movs	r0, #255	; 0xff
   15b82:	2d00      	cmp	r5, #0
   15b84:	d10b      	bne.n	15b9e <__aeabi_fdiv+0xf6>
   15b86:	2102      	movs	r1, #2
   15b88:	e7da      	b.n	15b40 <__aeabi_fdiv+0x98>
   15b8a:	0028      	movs	r0, r5
   15b8c:	f002 f834 	bl	17bf8 <__clzsi2>
   15b90:	1f43      	subs	r3, r0, #5
   15b92:	409d      	lsls	r5, r3
   15b94:	2376      	movs	r3, #118	; 0x76
   15b96:	425b      	negs	r3, r3
   15b98:	1a18      	subs	r0, r3, r0
   15b9a:	2100      	movs	r1, #0
   15b9c:	e7af      	b.n	15afe <__aeabi_fdiv+0x56>
   15b9e:	2103      	movs	r1, #3
   15ba0:	e7ad      	b.n	15afe <__aeabi_fdiv+0x56>
   15ba2:	0020      	movs	r0, r4
   15ba4:	f002 f828 	bl	17bf8 <__clzsi2>
   15ba8:	1f43      	subs	r3, r0, #5
   15baa:	409c      	lsls	r4, r3
   15bac:	2376      	movs	r3, #118	; 0x76
   15bae:	425b      	negs	r3, r3
   15bb0:	1a1b      	subs	r3, r3, r0
   15bb2:	4698      	mov	r8, r3
   15bb4:	2300      	movs	r3, #0
   15bb6:	4699      	mov	r9, r3
   15bb8:	469b      	mov	fp, r3
   15bba:	e791      	b.n	15ae0 <__aeabi_fdiv+0x38>
   15bbc:	230c      	movs	r3, #12
   15bbe:	4699      	mov	r9, r3
   15bc0:	33f3      	adds	r3, #243	; 0xf3
   15bc2:	4698      	mov	r8, r3
   15bc4:	3bfc      	subs	r3, #252	; 0xfc
   15bc6:	469b      	mov	fp, r3
   15bc8:	e78a      	b.n	15ae0 <__aeabi_fdiv+0x38>
   15bca:	2b03      	cmp	r3, #3
   15bcc:	d100      	bne.n	15bd0 <__aeabi_fdiv+0x128>
   15bce:	e0a5      	b.n	15d1c <__aeabi_fdiv+0x274>
   15bd0:	4655      	mov	r5, sl
   15bd2:	2b01      	cmp	r3, #1
   15bd4:	d000      	beq.n	15bd8 <__aeabi_fdiv+0x130>
   15bd6:	e081      	b.n	15cdc <__aeabi_fdiv+0x234>
   15bd8:	2301      	movs	r3, #1
   15bda:	2100      	movs	r1, #0
   15bdc:	2400      	movs	r4, #0
   15bde:	402b      	ands	r3, r5
   15be0:	0264      	lsls	r4, r4, #9
   15be2:	05c9      	lsls	r1, r1, #23
   15be4:	0a60      	lsrs	r0, r4, #9
   15be6:	07db      	lsls	r3, r3, #31
   15be8:	4308      	orrs	r0, r1
   15bea:	4318      	orrs	r0, r3
   15bec:	b003      	add	sp, #12
   15bee:	bc3c      	pop	{r2, r3, r4, r5}
   15bf0:	4690      	mov	r8, r2
   15bf2:	4699      	mov	r9, r3
   15bf4:	46a2      	mov	sl, r4
   15bf6:	46ab      	mov	fp, r5
   15bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15bfa:	2480      	movs	r4, #128	; 0x80
   15bfc:	2300      	movs	r3, #0
   15bfe:	03e4      	lsls	r4, r4, #15
   15c00:	21ff      	movs	r1, #255	; 0xff
   15c02:	e7ed      	b.n	15be0 <__aeabi_fdiv+0x138>
   15c04:	21ff      	movs	r1, #255	; 0xff
   15c06:	2400      	movs	r4, #0
   15c08:	e7ea      	b.n	15be0 <__aeabi_fdiv+0x138>
   15c0a:	2301      	movs	r3, #1
   15c0c:	1a59      	subs	r1, r3, r1
   15c0e:	291b      	cmp	r1, #27
   15c10:	dd66      	ble.n	15ce0 <__aeabi_fdiv+0x238>
   15c12:	9a01      	ldr	r2, [sp, #4]
   15c14:	4013      	ands	r3, r2
   15c16:	2100      	movs	r1, #0
   15c18:	2400      	movs	r4, #0
   15c1a:	e7e1      	b.n	15be0 <__aeabi_fdiv+0x138>
   15c1c:	2380      	movs	r3, #128	; 0x80
   15c1e:	03db      	lsls	r3, r3, #15
   15c20:	421c      	tst	r4, r3
   15c22:	d038      	beq.n	15c96 <__aeabi_fdiv+0x1ee>
   15c24:	421d      	tst	r5, r3
   15c26:	d051      	beq.n	15ccc <__aeabi_fdiv+0x224>
   15c28:	431c      	orrs	r4, r3
   15c2a:	0264      	lsls	r4, r4, #9
   15c2c:	0a64      	lsrs	r4, r4, #9
   15c2e:	0033      	movs	r3, r6
   15c30:	21ff      	movs	r1, #255	; 0xff
   15c32:	e7d5      	b.n	15be0 <__aeabi_fdiv+0x138>
   15c34:	0163      	lsls	r3, r4, #5
   15c36:	016c      	lsls	r4, r5, #5
   15c38:	42a3      	cmp	r3, r4
   15c3a:	d23b      	bcs.n	15cb4 <__aeabi_fdiv+0x20c>
   15c3c:	261b      	movs	r6, #27
   15c3e:	2100      	movs	r1, #0
   15c40:	3801      	subs	r0, #1
   15c42:	2501      	movs	r5, #1
   15c44:	001f      	movs	r7, r3
   15c46:	0049      	lsls	r1, r1, #1
   15c48:	005b      	lsls	r3, r3, #1
   15c4a:	2f00      	cmp	r7, #0
   15c4c:	db01      	blt.n	15c52 <__aeabi_fdiv+0x1aa>
   15c4e:	429c      	cmp	r4, r3
   15c50:	d801      	bhi.n	15c56 <__aeabi_fdiv+0x1ae>
   15c52:	1b1b      	subs	r3, r3, r4
   15c54:	4329      	orrs	r1, r5
   15c56:	3e01      	subs	r6, #1
   15c58:	2e00      	cmp	r6, #0
   15c5a:	d1f3      	bne.n	15c44 <__aeabi_fdiv+0x19c>
   15c5c:	001c      	movs	r4, r3
   15c5e:	1e63      	subs	r3, r4, #1
   15c60:	419c      	sbcs	r4, r3
   15c62:	430c      	orrs	r4, r1
   15c64:	0001      	movs	r1, r0
   15c66:	317f      	adds	r1, #127	; 0x7f
   15c68:	2900      	cmp	r1, #0
   15c6a:	ddce      	ble.n	15c0a <__aeabi_fdiv+0x162>
   15c6c:	0763      	lsls	r3, r4, #29
   15c6e:	d004      	beq.n	15c7a <__aeabi_fdiv+0x1d2>
   15c70:	230f      	movs	r3, #15
   15c72:	4023      	ands	r3, r4
   15c74:	2b04      	cmp	r3, #4
   15c76:	d000      	beq.n	15c7a <__aeabi_fdiv+0x1d2>
   15c78:	3404      	adds	r4, #4
   15c7a:	0123      	lsls	r3, r4, #4
   15c7c:	d503      	bpl.n	15c86 <__aeabi_fdiv+0x1de>
   15c7e:	0001      	movs	r1, r0
   15c80:	4b2c      	ldr	r3, [pc, #176]	; (15d34 <__aeabi_fdiv+0x28c>)
   15c82:	3180      	adds	r1, #128	; 0x80
   15c84:	401c      	ands	r4, r3
   15c86:	29fe      	cmp	r1, #254	; 0xfe
   15c88:	dd0d      	ble.n	15ca6 <__aeabi_fdiv+0x1fe>
   15c8a:	2301      	movs	r3, #1
   15c8c:	9a01      	ldr	r2, [sp, #4]
   15c8e:	21ff      	movs	r1, #255	; 0xff
   15c90:	4013      	ands	r3, r2
   15c92:	2400      	movs	r4, #0
   15c94:	e7a4      	b.n	15be0 <__aeabi_fdiv+0x138>
   15c96:	2380      	movs	r3, #128	; 0x80
   15c98:	03db      	lsls	r3, r3, #15
   15c9a:	431c      	orrs	r4, r3
   15c9c:	0264      	lsls	r4, r4, #9
   15c9e:	0a64      	lsrs	r4, r4, #9
   15ca0:	0033      	movs	r3, r6
   15ca2:	21ff      	movs	r1, #255	; 0xff
   15ca4:	e79c      	b.n	15be0 <__aeabi_fdiv+0x138>
   15ca6:	2301      	movs	r3, #1
   15ca8:	9a01      	ldr	r2, [sp, #4]
   15caa:	01a4      	lsls	r4, r4, #6
   15cac:	0a64      	lsrs	r4, r4, #9
   15cae:	b2c9      	uxtb	r1, r1
   15cb0:	4013      	ands	r3, r2
   15cb2:	e795      	b.n	15be0 <__aeabi_fdiv+0x138>
   15cb4:	1b1b      	subs	r3, r3, r4
   15cb6:	261a      	movs	r6, #26
   15cb8:	2101      	movs	r1, #1
   15cba:	e7c2      	b.n	15c42 <__aeabi_fdiv+0x19a>
   15cbc:	9b00      	ldr	r3, [sp, #0]
   15cbe:	468b      	mov	fp, r1
   15cc0:	469a      	mov	sl, r3
   15cc2:	2400      	movs	r4, #0
   15cc4:	e74c      	b.n	15b60 <__aeabi_fdiv+0xb8>
   15cc6:	0263      	lsls	r3, r4, #9
   15cc8:	d5e5      	bpl.n	15c96 <__aeabi_fdiv+0x1ee>
   15cca:	2500      	movs	r5, #0
   15ccc:	2480      	movs	r4, #128	; 0x80
   15cce:	03e4      	lsls	r4, r4, #15
   15cd0:	432c      	orrs	r4, r5
   15cd2:	0264      	lsls	r4, r4, #9
   15cd4:	0a64      	lsrs	r4, r4, #9
   15cd6:	9b00      	ldr	r3, [sp, #0]
   15cd8:	21ff      	movs	r1, #255	; 0xff
   15cda:	e781      	b.n	15be0 <__aeabi_fdiv+0x138>
   15cdc:	9501      	str	r5, [sp, #4]
   15cde:	e7c1      	b.n	15c64 <__aeabi_fdiv+0x1bc>
   15ce0:	0023      	movs	r3, r4
   15ce2:	2020      	movs	r0, #32
   15ce4:	40cb      	lsrs	r3, r1
   15ce6:	1a41      	subs	r1, r0, r1
   15ce8:	408c      	lsls	r4, r1
   15cea:	1e61      	subs	r1, r4, #1
   15cec:	418c      	sbcs	r4, r1
   15cee:	431c      	orrs	r4, r3
   15cf0:	0763      	lsls	r3, r4, #29
   15cf2:	d004      	beq.n	15cfe <__aeabi_fdiv+0x256>
   15cf4:	230f      	movs	r3, #15
   15cf6:	4023      	ands	r3, r4
   15cf8:	2b04      	cmp	r3, #4
   15cfa:	d000      	beq.n	15cfe <__aeabi_fdiv+0x256>
   15cfc:	3404      	adds	r4, #4
   15cfe:	0163      	lsls	r3, r4, #5
   15d00:	d505      	bpl.n	15d0e <__aeabi_fdiv+0x266>
   15d02:	2301      	movs	r3, #1
   15d04:	9a01      	ldr	r2, [sp, #4]
   15d06:	2101      	movs	r1, #1
   15d08:	4013      	ands	r3, r2
   15d0a:	2400      	movs	r4, #0
   15d0c:	e768      	b.n	15be0 <__aeabi_fdiv+0x138>
   15d0e:	2301      	movs	r3, #1
   15d10:	9a01      	ldr	r2, [sp, #4]
   15d12:	01a4      	lsls	r4, r4, #6
   15d14:	0a64      	lsrs	r4, r4, #9
   15d16:	4013      	ands	r3, r2
   15d18:	2100      	movs	r1, #0
   15d1a:	e761      	b.n	15be0 <__aeabi_fdiv+0x138>
   15d1c:	2380      	movs	r3, #128	; 0x80
   15d1e:	03db      	lsls	r3, r3, #15
   15d20:	431c      	orrs	r4, r3
   15d22:	0264      	lsls	r4, r4, #9
   15d24:	0a64      	lsrs	r4, r4, #9
   15d26:	4653      	mov	r3, sl
   15d28:	21ff      	movs	r1, #255	; 0xff
   15d2a:	e759      	b.n	15be0 <__aeabi_fdiv+0x138>
   15d2c:	00019b10 	.word	0x00019b10
   15d30:	00019b50 	.word	0x00019b50
   15d34:	f7ffffff 	.word	0xf7ffffff

00015d38 <__aeabi_fmul>:
   15d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d3a:	4657      	mov	r7, sl
   15d3c:	464e      	mov	r6, r9
   15d3e:	4645      	mov	r5, r8
   15d40:	46de      	mov	lr, fp
   15d42:	b5e0      	push	{r5, r6, r7, lr}
   15d44:	0247      	lsls	r7, r0, #9
   15d46:	0046      	lsls	r6, r0, #1
   15d48:	4688      	mov	r8, r1
   15d4a:	0a7f      	lsrs	r7, r7, #9
   15d4c:	0e36      	lsrs	r6, r6, #24
   15d4e:	0fc4      	lsrs	r4, r0, #31
   15d50:	2e00      	cmp	r6, #0
   15d52:	d047      	beq.n	15de4 <__aeabi_fmul+0xac>
   15d54:	2eff      	cmp	r6, #255	; 0xff
   15d56:	d024      	beq.n	15da2 <__aeabi_fmul+0x6a>
   15d58:	00fb      	lsls	r3, r7, #3
   15d5a:	2780      	movs	r7, #128	; 0x80
   15d5c:	04ff      	lsls	r7, r7, #19
   15d5e:	431f      	orrs	r7, r3
   15d60:	2300      	movs	r3, #0
   15d62:	4699      	mov	r9, r3
   15d64:	469a      	mov	sl, r3
   15d66:	3e7f      	subs	r6, #127	; 0x7f
   15d68:	4643      	mov	r3, r8
   15d6a:	025d      	lsls	r5, r3, #9
   15d6c:	0058      	lsls	r0, r3, #1
   15d6e:	0fdb      	lsrs	r3, r3, #31
   15d70:	0a6d      	lsrs	r5, r5, #9
   15d72:	0e00      	lsrs	r0, r0, #24
   15d74:	4698      	mov	r8, r3
   15d76:	d043      	beq.n	15e00 <__aeabi_fmul+0xc8>
   15d78:	28ff      	cmp	r0, #255	; 0xff
   15d7a:	d03b      	beq.n	15df4 <__aeabi_fmul+0xbc>
   15d7c:	00eb      	lsls	r3, r5, #3
   15d7e:	2580      	movs	r5, #128	; 0x80
   15d80:	2200      	movs	r2, #0
   15d82:	04ed      	lsls	r5, r5, #19
   15d84:	431d      	orrs	r5, r3
   15d86:	387f      	subs	r0, #127	; 0x7f
   15d88:	1836      	adds	r6, r6, r0
   15d8a:	1c73      	adds	r3, r6, #1
   15d8c:	4641      	mov	r1, r8
   15d8e:	469b      	mov	fp, r3
   15d90:	464b      	mov	r3, r9
   15d92:	4061      	eors	r1, r4
   15d94:	4313      	orrs	r3, r2
   15d96:	2b0f      	cmp	r3, #15
   15d98:	d864      	bhi.n	15e64 <__aeabi_fmul+0x12c>
   15d9a:	4875      	ldr	r0, [pc, #468]	; (15f70 <__aeabi_fmul+0x238>)
   15d9c:	009b      	lsls	r3, r3, #2
   15d9e:	58c3      	ldr	r3, [r0, r3]
   15da0:	469f      	mov	pc, r3
   15da2:	2f00      	cmp	r7, #0
   15da4:	d142      	bne.n	15e2c <__aeabi_fmul+0xf4>
   15da6:	2308      	movs	r3, #8
   15da8:	4699      	mov	r9, r3
   15daa:	3b06      	subs	r3, #6
   15dac:	26ff      	movs	r6, #255	; 0xff
   15dae:	469a      	mov	sl, r3
   15db0:	e7da      	b.n	15d68 <__aeabi_fmul+0x30>
   15db2:	4641      	mov	r1, r8
   15db4:	2a02      	cmp	r2, #2
   15db6:	d028      	beq.n	15e0a <__aeabi_fmul+0xd2>
   15db8:	2a03      	cmp	r2, #3
   15dba:	d100      	bne.n	15dbe <__aeabi_fmul+0x86>
   15dbc:	e0ce      	b.n	15f5c <__aeabi_fmul+0x224>
   15dbe:	2a01      	cmp	r2, #1
   15dc0:	d000      	beq.n	15dc4 <__aeabi_fmul+0x8c>
   15dc2:	e0ac      	b.n	15f1e <__aeabi_fmul+0x1e6>
   15dc4:	4011      	ands	r1, r2
   15dc6:	2000      	movs	r0, #0
   15dc8:	2200      	movs	r2, #0
   15dca:	b2cc      	uxtb	r4, r1
   15dcc:	0240      	lsls	r0, r0, #9
   15dce:	05d2      	lsls	r2, r2, #23
   15dd0:	0a40      	lsrs	r0, r0, #9
   15dd2:	07e4      	lsls	r4, r4, #31
   15dd4:	4310      	orrs	r0, r2
   15dd6:	4320      	orrs	r0, r4
   15dd8:	bc3c      	pop	{r2, r3, r4, r5}
   15dda:	4690      	mov	r8, r2
   15ddc:	4699      	mov	r9, r3
   15dde:	46a2      	mov	sl, r4
   15de0:	46ab      	mov	fp, r5
   15de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15de4:	2f00      	cmp	r7, #0
   15de6:	d115      	bne.n	15e14 <__aeabi_fmul+0xdc>
   15de8:	2304      	movs	r3, #4
   15dea:	4699      	mov	r9, r3
   15dec:	3b03      	subs	r3, #3
   15dee:	2600      	movs	r6, #0
   15df0:	469a      	mov	sl, r3
   15df2:	e7b9      	b.n	15d68 <__aeabi_fmul+0x30>
   15df4:	20ff      	movs	r0, #255	; 0xff
   15df6:	2202      	movs	r2, #2
   15df8:	2d00      	cmp	r5, #0
   15dfa:	d0c5      	beq.n	15d88 <__aeabi_fmul+0x50>
   15dfc:	2203      	movs	r2, #3
   15dfe:	e7c3      	b.n	15d88 <__aeabi_fmul+0x50>
   15e00:	2d00      	cmp	r5, #0
   15e02:	d119      	bne.n	15e38 <__aeabi_fmul+0x100>
   15e04:	2000      	movs	r0, #0
   15e06:	2201      	movs	r2, #1
   15e08:	e7be      	b.n	15d88 <__aeabi_fmul+0x50>
   15e0a:	2401      	movs	r4, #1
   15e0c:	22ff      	movs	r2, #255	; 0xff
   15e0e:	400c      	ands	r4, r1
   15e10:	2000      	movs	r0, #0
   15e12:	e7db      	b.n	15dcc <__aeabi_fmul+0x94>
   15e14:	0038      	movs	r0, r7
   15e16:	f001 feef 	bl	17bf8 <__clzsi2>
   15e1a:	2676      	movs	r6, #118	; 0x76
   15e1c:	1f43      	subs	r3, r0, #5
   15e1e:	409f      	lsls	r7, r3
   15e20:	2300      	movs	r3, #0
   15e22:	4276      	negs	r6, r6
   15e24:	1a36      	subs	r6, r6, r0
   15e26:	4699      	mov	r9, r3
   15e28:	469a      	mov	sl, r3
   15e2a:	e79d      	b.n	15d68 <__aeabi_fmul+0x30>
   15e2c:	230c      	movs	r3, #12
   15e2e:	4699      	mov	r9, r3
   15e30:	3b09      	subs	r3, #9
   15e32:	26ff      	movs	r6, #255	; 0xff
   15e34:	469a      	mov	sl, r3
   15e36:	e797      	b.n	15d68 <__aeabi_fmul+0x30>
   15e38:	0028      	movs	r0, r5
   15e3a:	f001 fedd 	bl	17bf8 <__clzsi2>
   15e3e:	1f43      	subs	r3, r0, #5
   15e40:	409d      	lsls	r5, r3
   15e42:	2376      	movs	r3, #118	; 0x76
   15e44:	425b      	negs	r3, r3
   15e46:	1a18      	subs	r0, r3, r0
   15e48:	2200      	movs	r2, #0
   15e4a:	e79d      	b.n	15d88 <__aeabi_fmul+0x50>
   15e4c:	2080      	movs	r0, #128	; 0x80
   15e4e:	2400      	movs	r4, #0
   15e50:	03c0      	lsls	r0, r0, #15
   15e52:	22ff      	movs	r2, #255	; 0xff
   15e54:	e7ba      	b.n	15dcc <__aeabi_fmul+0x94>
   15e56:	003d      	movs	r5, r7
   15e58:	4652      	mov	r2, sl
   15e5a:	e7ab      	b.n	15db4 <__aeabi_fmul+0x7c>
   15e5c:	003d      	movs	r5, r7
   15e5e:	0021      	movs	r1, r4
   15e60:	4652      	mov	r2, sl
   15e62:	e7a7      	b.n	15db4 <__aeabi_fmul+0x7c>
   15e64:	0c3b      	lsrs	r3, r7, #16
   15e66:	469c      	mov	ip, r3
   15e68:	042a      	lsls	r2, r5, #16
   15e6a:	0c12      	lsrs	r2, r2, #16
   15e6c:	0c2b      	lsrs	r3, r5, #16
   15e6e:	0014      	movs	r4, r2
   15e70:	4660      	mov	r0, ip
   15e72:	4665      	mov	r5, ip
   15e74:	043f      	lsls	r7, r7, #16
   15e76:	0c3f      	lsrs	r7, r7, #16
   15e78:	437c      	muls	r4, r7
   15e7a:	4342      	muls	r2, r0
   15e7c:	435d      	muls	r5, r3
   15e7e:	437b      	muls	r3, r7
   15e80:	0c27      	lsrs	r7, r4, #16
   15e82:	189b      	adds	r3, r3, r2
   15e84:	18ff      	adds	r7, r7, r3
   15e86:	42ba      	cmp	r2, r7
   15e88:	d903      	bls.n	15e92 <__aeabi_fmul+0x15a>
   15e8a:	2380      	movs	r3, #128	; 0x80
   15e8c:	025b      	lsls	r3, r3, #9
   15e8e:	469c      	mov	ip, r3
   15e90:	4465      	add	r5, ip
   15e92:	0424      	lsls	r4, r4, #16
   15e94:	043a      	lsls	r2, r7, #16
   15e96:	0c24      	lsrs	r4, r4, #16
   15e98:	1912      	adds	r2, r2, r4
   15e9a:	0193      	lsls	r3, r2, #6
   15e9c:	1e5c      	subs	r4, r3, #1
   15e9e:	41a3      	sbcs	r3, r4
   15ea0:	0c3f      	lsrs	r7, r7, #16
   15ea2:	0e92      	lsrs	r2, r2, #26
   15ea4:	197d      	adds	r5, r7, r5
   15ea6:	431a      	orrs	r2, r3
   15ea8:	01ad      	lsls	r5, r5, #6
   15eaa:	4315      	orrs	r5, r2
   15eac:	012b      	lsls	r3, r5, #4
   15eae:	d504      	bpl.n	15eba <__aeabi_fmul+0x182>
   15eb0:	2301      	movs	r3, #1
   15eb2:	465e      	mov	r6, fp
   15eb4:	086a      	lsrs	r2, r5, #1
   15eb6:	401d      	ands	r5, r3
   15eb8:	4315      	orrs	r5, r2
   15eba:	0032      	movs	r2, r6
   15ebc:	327f      	adds	r2, #127	; 0x7f
   15ebe:	2a00      	cmp	r2, #0
   15ec0:	dd25      	ble.n	15f0e <__aeabi_fmul+0x1d6>
   15ec2:	076b      	lsls	r3, r5, #29
   15ec4:	d004      	beq.n	15ed0 <__aeabi_fmul+0x198>
   15ec6:	230f      	movs	r3, #15
   15ec8:	402b      	ands	r3, r5
   15eca:	2b04      	cmp	r3, #4
   15ecc:	d000      	beq.n	15ed0 <__aeabi_fmul+0x198>
   15ece:	3504      	adds	r5, #4
   15ed0:	012b      	lsls	r3, r5, #4
   15ed2:	d503      	bpl.n	15edc <__aeabi_fmul+0x1a4>
   15ed4:	0032      	movs	r2, r6
   15ed6:	4b27      	ldr	r3, [pc, #156]	; (15f74 <__aeabi_fmul+0x23c>)
   15ed8:	3280      	adds	r2, #128	; 0x80
   15eda:	401d      	ands	r5, r3
   15edc:	2afe      	cmp	r2, #254	; 0xfe
   15ede:	dc94      	bgt.n	15e0a <__aeabi_fmul+0xd2>
   15ee0:	2401      	movs	r4, #1
   15ee2:	01a8      	lsls	r0, r5, #6
   15ee4:	0a40      	lsrs	r0, r0, #9
   15ee6:	b2d2      	uxtb	r2, r2
   15ee8:	400c      	ands	r4, r1
   15eea:	e76f      	b.n	15dcc <__aeabi_fmul+0x94>
   15eec:	2080      	movs	r0, #128	; 0x80
   15eee:	03c0      	lsls	r0, r0, #15
   15ef0:	4207      	tst	r7, r0
   15ef2:	d007      	beq.n	15f04 <__aeabi_fmul+0x1cc>
   15ef4:	4205      	tst	r5, r0
   15ef6:	d105      	bne.n	15f04 <__aeabi_fmul+0x1cc>
   15ef8:	4328      	orrs	r0, r5
   15efa:	0240      	lsls	r0, r0, #9
   15efc:	0a40      	lsrs	r0, r0, #9
   15efe:	4644      	mov	r4, r8
   15f00:	22ff      	movs	r2, #255	; 0xff
   15f02:	e763      	b.n	15dcc <__aeabi_fmul+0x94>
   15f04:	4338      	orrs	r0, r7
   15f06:	0240      	lsls	r0, r0, #9
   15f08:	0a40      	lsrs	r0, r0, #9
   15f0a:	22ff      	movs	r2, #255	; 0xff
   15f0c:	e75e      	b.n	15dcc <__aeabi_fmul+0x94>
   15f0e:	2401      	movs	r4, #1
   15f10:	1aa3      	subs	r3, r4, r2
   15f12:	2b1b      	cmp	r3, #27
   15f14:	dd05      	ble.n	15f22 <__aeabi_fmul+0x1ea>
   15f16:	400c      	ands	r4, r1
   15f18:	2200      	movs	r2, #0
   15f1a:	2000      	movs	r0, #0
   15f1c:	e756      	b.n	15dcc <__aeabi_fmul+0x94>
   15f1e:	465e      	mov	r6, fp
   15f20:	e7cb      	b.n	15eba <__aeabi_fmul+0x182>
   15f22:	002a      	movs	r2, r5
   15f24:	2020      	movs	r0, #32
   15f26:	40da      	lsrs	r2, r3
   15f28:	1ac3      	subs	r3, r0, r3
   15f2a:	409d      	lsls	r5, r3
   15f2c:	002b      	movs	r3, r5
   15f2e:	1e5d      	subs	r5, r3, #1
   15f30:	41ab      	sbcs	r3, r5
   15f32:	4313      	orrs	r3, r2
   15f34:	075a      	lsls	r2, r3, #29
   15f36:	d004      	beq.n	15f42 <__aeabi_fmul+0x20a>
   15f38:	220f      	movs	r2, #15
   15f3a:	401a      	ands	r2, r3
   15f3c:	2a04      	cmp	r2, #4
   15f3e:	d000      	beq.n	15f42 <__aeabi_fmul+0x20a>
   15f40:	3304      	adds	r3, #4
   15f42:	015a      	lsls	r2, r3, #5
   15f44:	d504      	bpl.n	15f50 <__aeabi_fmul+0x218>
   15f46:	2401      	movs	r4, #1
   15f48:	2201      	movs	r2, #1
   15f4a:	400c      	ands	r4, r1
   15f4c:	2000      	movs	r0, #0
   15f4e:	e73d      	b.n	15dcc <__aeabi_fmul+0x94>
   15f50:	2401      	movs	r4, #1
   15f52:	019b      	lsls	r3, r3, #6
   15f54:	0a58      	lsrs	r0, r3, #9
   15f56:	400c      	ands	r4, r1
   15f58:	2200      	movs	r2, #0
   15f5a:	e737      	b.n	15dcc <__aeabi_fmul+0x94>
   15f5c:	2080      	movs	r0, #128	; 0x80
   15f5e:	2401      	movs	r4, #1
   15f60:	03c0      	lsls	r0, r0, #15
   15f62:	4328      	orrs	r0, r5
   15f64:	0240      	lsls	r0, r0, #9
   15f66:	0a40      	lsrs	r0, r0, #9
   15f68:	400c      	ands	r4, r1
   15f6a:	22ff      	movs	r2, #255	; 0xff
   15f6c:	e72e      	b.n	15dcc <__aeabi_fmul+0x94>
   15f6e:	46c0      	nop			; (mov r8, r8)
   15f70:	00019b90 	.word	0x00019b90
   15f74:	f7ffffff 	.word	0xf7ffffff

00015f78 <__aeabi_ui2f>:
   15f78:	b510      	push	{r4, lr}
   15f7a:	1e04      	subs	r4, r0, #0
   15f7c:	d027      	beq.n	15fce <__aeabi_ui2f+0x56>
   15f7e:	f001 fe3b 	bl	17bf8 <__clzsi2>
   15f82:	239e      	movs	r3, #158	; 0x9e
   15f84:	1a1b      	subs	r3, r3, r0
   15f86:	2b96      	cmp	r3, #150	; 0x96
   15f88:	dc0a      	bgt.n	15fa0 <__aeabi_ui2f+0x28>
   15f8a:	2296      	movs	r2, #150	; 0x96
   15f8c:	1ad2      	subs	r2, r2, r3
   15f8e:	4094      	lsls	r4, r2
   15f90:	0264      	lsls	r4, r4, #9
   15f92:	0a64      	lsrs	r4, r4, #9
   15f94:	b2db      	uxtb	r3, r3
   15f96:	0264      	lsls	r4, r4, #9
   15f98:	05db      	lsls	r3, r3, #23
   15f9a:	0a60      	lsrs	r0, r4, #9
   15f9c:	4318      	orrs	r0, r3
   15f9e:	bd10      	pop	{r4, pc}
   15fa0:	2b99      	cmp	r3, #153	; 0x99
   15fa2:	dc17      	bgt.n	15fd4 <__aeabi_ui2f+0x5c>
   15fa4:	2299      	movs	r2, #153	; 0x99
   15fa6:	1ad2      	subs	r2, r2, r3
   15fa8:	2a00      	cmp	r2, #0
   15faa:	dd27      	ble.n	15ffc <__aeabi_ui2f+0x84>
   15fac:	4094      	lsls	r4, r2
   15fae:	0022      	movs	r2, r4
   15fb0:	4c13      	ldr	r4, [pc, #76]	; (16000 <__aeabi_ui2f+0x88>)
   15fb2:	4014      	ands	r4, r2
   15fb4:	0751      	lsls	r1, r2, #29
   15fb6:	d004      	beq.n	15fc2 <__aeabi_ui2f+0x4a>
   15fb8:	210f      	movs	r1, #15
   15fba:	400a      	ands	r2, r1
   15fbc:	2a04      	cmp	r2, #4
   15fbe:	d000      	beq.n	15fc2 <__aeabi_ui2f+0x4a>
   15fc0:	3404      	adds	r4, #4
   15fc2:	0162      	lsls	r2, r4, #5
   15fc4:	d412      	bmi.n	15fec <__aeabi_ui2f+0x74>
   15fc6:	01a4      	lsls	r4, r4, #6
   15fc8:	0a64      	lsrs	r4, r4, #9
   15fca:	b2db      	uxtb	r3, r3
   15fcc:	e7e3      	b.n	15f96 <__aeabi_ui2f+0x1e>
   15fce:	2300      	movs	r3, #0
   15fd0:	2400      	movs	r4, #0
   15fd2:	e7e0      	b.n	15f96 <__aeabi_ui2f+0x1e>
   15fd4:	22b9      	movs	r2, #185	; 0xb9
   15fd6:	0021      	movs	r1, r4
   15fd8:	1ad2      	subs	r2, r2, r3
   15fda:	4091      	lsls	r1, r2
   15fdc:	000a      	movs	r2, r1
   15fde:	1e51      	subs	r1, r2, #1
   15fe0:	418a      	sbcs	r2, r1
   15fe2:	2105      	movs	r1, #5
   15fe4:	1a09      	subs	r1, r1, r0
   15fe6:	40cc      	lsrs	r4, r1
   15fe8:	4314      	orrs	r4, r2
   15fea:	e7db      	b.n	15fa4 <__aeabi_ui2f+0x2c>
   15fec:	4b04      	ldr	r3, [pc, #16]	; (16000 <__aeabi_ui2f+0x88>)
   15fee:	401c      	ands	r4, r3
   15ff0:	239f      	movs	r3, #159	; 0x9f
   15ff2:	01a4      	lsls	r4, r4, #6
   15ff4:	1a1b      	subs	r3, r3, r0
   15ff6:	0a64      	lsrs	r4, r4, #9
   15ff8:	b2db      	uxtb	r3, r3
   15ffa:	e7cc      	b.n	15f96 <__aeabi_ui2f+0x1e>
   15ffc:	0022      	movs	r2, r4
   15ffe:	e7d7      	b.n	15fb0 <__aeabi_ui2f+0x38>
   16000:	fbffffff 	.word	0xfbffffff

00016004 <__aeabi_dadd>:
   16004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16006:	4645      	mov	r5, r8
   16008:	46de      	mov	lr, fp
   1600a:	4657      	mov	r7, sl
   1600c:	464e      	mov	r6, r9
   1600e:	030c      	lsls	r4, r1, #12
   16010:	b5e0      	push	{r5, r6, r7, lr}
   16012:	004e      	lsls	r6, r1, #1
   16014:	0fc9      	lsrs	r1, r1, #31
   16016:	4688      	mov	r8, r1
   16018:	000d      	movs	r5, r1
   1601a:	0a61      	lsrs	r1, r4, #9
   1601c:	0f44      	lsrs	r4, r0, #29
   1601e:	430c      	orrs	r4, r1
   16020:	00c7      	lsls	r7, r0, #3
   16022:	0319      	lsls	r1, r3, #12
   16024:	0058      	lsls	r0, r3, #1
   16026:	0fdb      	lsrs	r3, r3, #31
   16028:	469b      	mov	fp, r3
   1602a:	0a4b      	lsrs	r3, r1, #9
   1602c:	0f51      	lsrs	r1, r2, #29
   1602e:	430b      	orrs	r3, r1
   16030:	0d76      	lsrs	r6, r6, #21
   16032:	0d40      	lsrs	r0, r0, #21
   16034:	0019      	movs	r1, r3
   16036:	00d2      	lsls	r2, r2, #3
   16038:	45d8      	cmp	r8, fp
   1603a:	d100      	bne.n	1603e <__aeabi_dadd+0x3a>
   1603c:	e0ae      	b.n	1619c <__aeabi_dadd+0x198>
   1603e:	1a35      	subs	r5, r6, r0
   16040:	2d00      	cmp	r5, #0
   16042:	dc00      	bgt.n	16046 <__aeabi_dadd+0x42>
   16044:	e0f6      	b.n	16234 <__aeabi_dadd+0x230>
   16046:	2800      	cmp	r0, #0
   16048:	d10f      	bne.n	1606a <__aeabi_dadd+0x66>
   1604a:	4313      	orrs	r3, r2
   1604c:	d100      	bne.n	16050 <__aeabi_dadd+0x4c>
   1604e:	e0db      	b.n	16208 <__aeabi_dadd+0x204>
   16050:	1e6b      	subs	r3, r5, #1
   16052:	2b00      	cmp	r3, #0
   16054:	d000      	beq.n	16058 <__aeabi_dadd+0x54>
   16056:	e137      	b.n	162c8 <__aeabi_dadd+0x2c4>
   16058:	1aba      	subs	r2, r7, r2
   1605a:	4297      	cmp	r7, r2
   1605c:	41bf      	sbcs	r7, r7
   1605e:	1a64      	subs	r4, r4, r1
   16060:	427f      	negs	r7, r7
   16062:	1be4      	subs	r4, r4, r7
   16064:	2601      	movs	r6, #1
   16066:	0017      	movs	r7, r2
   16068:	e024      	b.n	160b4 <__aeabi_dadd+0xb0>
   1606a:	4bc6      	ldr	r3, [pc, #792]	; (16384 <__aeabi_dadd+0x380>)
   1606c:	429e      	cmp	r6, r3
   1606e:	d04d      	beq.n	1610c <__aeabi_dadd+0x108>
   16070:	2380      	movs	r3, #128	; 0x80
   16072:	041b      	lsls	r3, r3, #16
   16074:	4319      	orrs	r1, r3
   16076:	2d38      	cmp	r5, #56	; 0x38
   16078:	dd00      	ble.n	1607c <__aeabi_dadd+0x78>
   1607a:	e107      	b.n	1628c <__aeabi_dadd+0x288>
   1607c:	2d1f      	cmp	r5, #31
   1607e:	dd00      	ble.n	16082 <__aeabi_dadd+0x7e>
   16080:	e138      	b.n	162f4 <__aeabi_dadd+0x2f0>
   16082:	2020      	movs	r0, #32
   16084:	1b43      	subs	r3, r0, r5
   16086:	469a      	mov	sl, r3
   16088:	000b      	movs	r3, r1
   1608a:	4650      	mov	r0, sl
   1608c:	4083      	lsls	r3, r0
   1608e:	4699      	mov	r9, r3
   16090:	0013      	movs	r3, r2
   16092:	4648      	mov	r0, r9
   16094:	40eb      	lsrs	r3, r5
   16096:	4318      	orrs	r0, r3
   16098:	0003      	movs	r3, r0
   1609a:	4650      	mov	r0, sl
   1609c:	4082      	lsls	r2, r0
   1609e:	1e50      	subs	r0, r2, #1
   160a0:	4182      	sbcs	r2, r0
   160a2:	40e9      	lsrs	r1, r5
   160a4:	431a      	orrs	r2, r3
   160a6:	1aba      	subs	r2, r7, r2
   160a8:	1a61      	subs	r1, r4, r1
   160aa:	4297      	cmp	r7, r2
   160ac:	41a4      	sbcs	r4, r4
   160ae:	0017      	movs	r7, r2
   160b0:	4264      	negs	r4, r4
   160b2:	1b0c      	subs	r4, r1, r4
   160b4:	0223      	lsls	r3, r4, #8
   160b6:	d562      	bpl.n	1617e <__aeabi_dadd+0x17a>
   160b8:	0264      	lsls	r4, r4, #9
   160ba:	0a65      	lsrs	r5, r4, #9
   160bc:	2d00      	cmp	r5, #0
   160be:	d100      	bne.n	160c2 <__aeabi_dadd+0xbe>
   160c0:	e0df      	b.n	16282 <__aeabi_dadd+0x27e>
   160c2:	0028      	movs	r0, r5
   160c4:	f001 fd98 	bl	17bf8 <__clzsi2>
   160c8:	0003      	movs	r3, r0
   160ca:	3b08      	subs	r3, #8
   160cc:	2b1f      	cmp	r3, #31
   160ce:	dd00      	ble.n	160d2 <__aeabi_dadd+0xce>
   160d0:	e0d2      	b.n	16278 <__aeabi_dadd+0x274>
   160d2:	2220      	movs	r2, #32
   160d4:	003c      	movs	r4, r7
   160d6:	1ad2      	subs	r2, r2, r3
   160d8:	409d      	lsls	r5, r3
   160da:	40d4      	lsrs	r4, r2
   160dc:	409f      	lsls	r7, r3
   160de:	4325      	orrs	r5, r4
   160e0:	429e      	cmp	r6, r3
   160e2:	dd00      	ble.n	160e6 <__aeabi_dadd+0xe2>
   160e4:	e0c4      	b.n	16270 <__aeabi_dadd+0x26c>
   160e6:	1b9e      	subs	r6, r3, r6
   160e8:	1c73      	adds	r3, r6, #1
   160ea:	2b1f      	cmp	r3, #31
   160ec:	dd00      	ble.n	160f0 <__aeabi_dadd+0xec>
   160ee:	e0f1      	b.n	162d4 <__aeabi_dadd+0x2d0>
   160f0:	2220      	movs	r2, #32
   160f2:	0038      	movs	r0, r7
   160f4:	0029      	movs	r1, r5
   160f6:	1ad2      	subs	r2, r2, r3
   160f8:	40d8      	lsrs	r0, r3
   160fa:	4091      	lsls	r1, r2
   160fc:	4097      	lsls	r7, r2
   160fe:	002c      	movs	r4, r5
   16100:	4301      	orrs	r1, r0
   16102:	1e78      	subs	r0, r7, #1
   16104:	4187      	sbcs	r7, r0
   16106:	40dc      	lsrs	r4, r3
   16108:	2600      	movs	r6, #0
   1610a:	430f      	orrs	r7, r1
   1610c:	077b      	lsls	r3, r7, #29
   1610e:	d009      	beq.n	16124 <__aeabi_dadd+0x120>
   16110:	230f      	movs	r3, #15
   16112:	403b      	ands	r3, r7
   16114:	2b04      	cmp	r3, #4
   16116:	d005      	beq.n	16124 <__aeabi_dadd+0x120>
   16118:	1d3b      	adds	r3, r7, #4
   1611a:	42bb      	cmp	r3, r7
   1611c:	41bf      	sbcs	r7, r7
   1611e:	427f      	negs	r7, r7
   16120:	19e4      	adds	r4, r4, r7
   16122:	001f      	movs	r7, r3
   16124:	0223      	lsls	r3, r4, #8
   16126:	d52c      	bpl.n	16182 <__aeabi_dadd+0x17e>
   16128:	4b96      	ldr	r3, [pc, #600]	; (16384 <__aeabi_dadd+0x380>)
   1612a:	3601      	adds	r6, #1
   1612c:	429e      	cmp	r6, r3
   1612e:	d100      	bne.n	16132 <__aeabi_dadd+0x12e>
   16130:	e09a      	b.n	16268 <__aeabi_dadd+0x264>
   16132:	4645      	mov	r5, r8
   16134:	4b94      	ldr	r3, [pc, #592]	; (16388 <__aeabi_dadd+0x384>)
   16136:	08ff      	lsrs	r7, r7, #3
   16138:	401c      	ands	r4, r3
   1613a:	0760      	lsls	r0, r4, #29
   1613c:	0576      	lsls	r6, r6, #21
   1613e:	0264      	lsls	r4, r4, #9
   16140:	4307      	orrs	r7, r0
   16142:	0b24      	lsrs	r4, r4, #12
   16144:	0d76      	lsrs	r6, r6, #21
   16146:	2100      	movs	r1, #0
   16148:	0324      	lsls	r4, r4, #12
   1614a:	0b23      	lsrs	r3, r4, #12
   1614c:	0d0c      	lsrs	r4, r1, #20
   1614e:	4a8f      	ldr	r2, [pc, #572]	; (1638c <__aeabi_dadd+0x388>)
   16150:	0524      	lsls	r4, r4, #20
   16152:	431c      	orrs	r4, r3
   16154:	4014      	ands	r4, r2
   16156:	0533      	lsls	r3, r6, #20
   16158:	4323      	orrs	r3, r4
   1615a:	005b      	lsls	r3, r3, #1
   1615c:	07ed      	lsls	r5, r5, #31
   1615e:	085b      	lsrs	r3, r3, #1
   16160:	432b      	orrs	r3, r5
   16162:	0038      	movs	r0, r7
   16164:	0019      	movs	r1, r3
   16166:	bc3c      	pop	{r2, r3, r4, r5}
   16168:	4690      	mov	r8, r2
   1616a:	4699      	mov	r9, r3
   1616c:	46a2      	mov	sl, r4
   1616e:	46ab      	mov	fp, r5
   16170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16172:	4664      	mov	r4, ip
   16174:	4304      	orrs	r4, r0
   16176:	d100      	bne.n	1617a <__aeabi_dadd+0x176>
   16178:	e211      	b.n	1659e <__aeabi_dadd+0x59a>
   1617a:	0004      	movs	r4, r0
   1617c:	4667      	mov	r7, ip
   1617e:	077b      	lsls	r3, r7, #29
   16180:	d1c6      	bne.n	16110 <__aeabi_dadd+0x10c>
   16182:	4645      	mov	r5, r8
   16184:	0760      	lsls	r0, r4, #29
   16186:	08ff      	lsrs	r7, r7, #3
   16188:	4307      	orrs	r7, r0
   1618a:	08e4      	lsrs	r4, r4, #3
   1618c:	4b7d      	ldr	r3, [pc, #500]	; (16384 <__aeabi_dadd+0x380>)
   1618e:	429e      	cmp	r6, r3
   16190:	d030      	beq.n	161f4 <__aeabi_dadd+0x1f0>
   16192:	0324      	lsls	r4, r4, #12
   16194:	0576      	lsls	r6, r6, #21
   16196:	0b24      	lsrs	r4, r4, #12
   16198:	0d76      	lsrs	r6, r6, #21
   1619a:	e7d4      	b.n	16146 <__aeabi_dadd+0x142>
   1619c:	1a33      	subs	r3, r6, r0
   1619e:	469a      	mov	sl, r3
   161a0:	2b00      	cmp	r3, #0
   161a2:	dd78      	ble.n	16296 <__aeabi_dadd+0x292>
   161a4:	2800      	cmp	r0, #0
   161a6:	d031      	beq.n	1620c <__aeabi_dadd+0x208>
   161a8:	4876      	ldr	r0, [pc, #472]	; (16384 <__aeabi_dadd+0x380>)
   161aa:	4286      	cmp	r6, r0
   161ac:	d0ae      	beq.n	1610c <__aeabi_dadd+0x108>
   161ae:	2080      	movs	r0, #128	; 0x80
   161b0:	0400      	lsls	r0, r0, #16
   161b2:	4301      	orrs	r1, r0
   161b4:	4653      	mov	r3, sl
   161b6:	2b38      	cmp	r3, #56	; 0x38
   161b8:	dc00      	bgt.n	161bc <__aeabi_dadd+0x1b8>
   161ba:	e0e9      	b.n	16390 <__aeabi_dadd+0x38c>
   161bc:	430a      	orrs	r2, r1
   161be:	1e51      	subs	r1, r2, #1
   161c0:	418a      	sbcs	r2, r1
   161c2:	2100      	movs	r1, #0
   161c4:	19d2      	adds	r2, r2, r7
   161c6:	42ba      	cmp	r2, r7
   161c8:	41bf      	sbcs	r7, r7
   161ca:	1909      	adds	r1, r1, r4
   161cc:	427c      	negs	r4, r7
   161ce:	0017      	movs	r7, r2
   161d0:	190c      	adds	r4, r1, r4
   161d2:	0223      	lsls	r3, r4, #8
   161d4:	d5d3      	bpl.n	1617e <__aeabi_dadd+0x17a>
   161d6:	4b6b      	ldr	r3, [pc, #428]	; (16384 <__aeabi_dadd+0x380>)
   161d8:	3601      	adds	r6, #1
   161da:	429e      	cmp	r6, r3
   161dc:	d100      	bne.n	161e0 <__aeabi_dadd+0x1dc>
   161de:	e13a      	b.n	16456 <__aeabi_dadd+0x452>
   161e0:	2001      	movs	r0, #1
   161e2:	4b69      	ldr	r3, [pc, #420]	; (16388 <__aeabi_dadd+0x384>)
   161e4:	401c      	ands	r4, r3
   161e6:	087b      	lsrs	r3, r7, #1
   161e8:	4007      	ands	r7, r0
   161ea:	431f      	orrs	r7, r3
   161ec:	07e0      	lsls	r0, r4, #31
   161ee:	4307      	orrs	r7, r0
   161f0:	0864      	lsrs	r4, r4, #1
   161f2:	e78b      	b.n	1610c <__aeabi_dadd+0x108>
   161f4:	0023      	movs	r3, r4
   161f6:	433b      	orrs	r3, r7
   161f8:	d100      	bne.n	161fc <__aeabi_dadd+0x1f8>
   161fa:	e1cb      	b.n	16594 <__aeabi_dadd+0x590>
   161fc:	2280      	movs	r2, #128	; 0x80
   161fe:	0312      	lsls	r2, r2, #12
   16200:	4314      	orrs	r4, r2
   16202:	0324      	lsls	r4, r4, #12
   16204:	0b24      	lsrs	r4, r4, #12
   16206:	e79e      	b.n	16146 <__aeabi_dadd+0x142>
   16208:	002e      	movs	r6, r5
   1620a:	e77f      	b.n	1610c <__aeabi_dadd+0x108>
   1620c:	0008      	movs	r0, r1
   1620e:	4310      	orrs	r0, r2
   16210:	d100      	bne.n	16214 <__aeabi_dadd+0x210>
   16212:	e0b4      	b.n	1637e <__aeabi_dadd+0x37a>
   16214:	1e58      	subs	r0, r3, #1
   16216:	2800      	cmp	r0, #0
   16218:	d000      	beq.n	1621c <__aeabi_dadd+0x218>
   1621a:	e0de      	b.n	163da <__aeabi_dadd+0x3d6>
   1621c:	18ba      	adds	r2, r7, r2
   1621e:	42ba      	cmp	r2, r7
   16220:	419b      	sbcs	r3, r3
   16222:	1864      	adds	r4, r4, r1
   16224:	425b      	negs	r3, r3
   16226:	18e4      	adds	r4, r4, r3
   16228:	0017      	movs	r7, r2
   1622a:	2601      	movs	r6, #1
   1622c:	0223      	lsls	r3, r4, #8
   1622e:	d5a6      	bpl.n	1617e <__aeabi_dadd+0x17a>
   16230:	2602      	movs	r6, #2
   16232:	e7d5      	b.n	161e0 <__aeabi_dadd+0x1dc>
   16234:	2d00      	cmp	r5, #0
   16236:	d16e      	bne.n	16316 <__aeabi_dadd+0x312>
   16238:	1c70      	adds	r0, r6, #1
   1623a:	0540      	lsls	r0, r0, #21
   1623c:	0d40      	lsrs	r0, r0, #21
   1623e:	2801      	cmp	r0, #1
   16240:	dc00      	bgt.n	16244 <__aeabi_dadd+0x240>
   16242:	e0f9      	b.n	16438 <__aeabi_dadd+0x434>
   16244:	1ab8      	subs	r0, r7, r2
   16246:	4684      	mov	ip, r0
   16248:	4287      	cmp	r7, r0
   1624a:	4180      	sbcs	r0, r0
   1624c:	1ae5      	subs	r5, r4, r3
   1624e:	4240      	negs	r0, r0
   16250:	1a2d      	subs	r5, r5, r0
   16252:	0228      	lsls	r0, r5, #8
   16254:	d400      	bmi.n	16258 <__aeabi_dadd+0x254>
   16256:	e089      	b.n	1636c <__aeabi_dadd+0x368>
   16258:	1bd7      	subs	r7, r2, r7
   1625a:	42ba      	cmp	r2, r7
   1625c:	4192      	sbcs	r2, r2
   1625e:	1b1c      	subs	r4, r3, r4
   16260:	4252      	negs	r2, r2
   16262:	1aa5      	subs	r5, r4, r2
   16264:	46d8      	mov	r8, fp
   16266:	e729      	b.n	160bc <__aeabi_dadd+0xb8>
   16268:	4645      	mov	r5, r8
   1626a:	2400      	movs	r4, #0
   1626c:	2700      	movs	r7, #0
   1626e:	e76a      	b.n	16146 <__aeabi_dadd+0x142>
   16270:	4c45      	ldr	r4, [pc, #276]	; (16388 <__aeabi_dadd+0x384>)
   16272:	1af6      	subs	r6, r6, r3
   16274:	402c      	ands	r4, r5
   16276:	e749      	b.n	1610c <__aeabi_dadd+0x108>
   16278:	003d      	movs	r5, r7
   1627a:	3828      	subs	r0, #40	; 0x28
   1627c:	4085      	lsls	r5, r0
   1627e:	2700      	movs	r7, #0
   16280:	e72e      	b.n	160e0 <__aeabi_dadd+0xdc>
   16282:	0038      	movs	r0, r7
   16284:	f001 fcb8 	bl	17bf8 <__clzsi2>
   16288:	3020      	adds	r0, #32
   1628a:	e71d      	b.n	160c8 <__aeabi_dadd+0xc4>
   1628c:	430a      	orrs	r2, r1
   1628e:	1e51      	subs	r1, r2, #1
   16290:	418a      	sbcs	r2, r1
   16292:	2100      	movs	r1, #0
   16294:	e707      	b.n	160a6 <__aeabi_dadd+0xa2>
   16296:	2b00      	cmp	r3, #0
   16298:	d000      	beq.n	1629c <__aeabi_dadd+0x298>
   1629a:	e0f3      	b.n	16484 <__aeabi_dadd+0x480>
   1629c:	1c70      	adds	r0, r6, #1
   1629e:	0543      	lsls	r3, r0, #21
   162a0:	0d5b      	lsrs	r3, r3, #21
   162a2:	2b01      	cmp	r3, #1
   162a4:	dc00      	bgt.n	162a8 <__aeabi_dadd+0x2a4>
   162a6:	e0ad      	b.n	16404 <__aeabi_dadd+0x400>
   162a8:	4b36      	ldr	r3, [pc, #216]	; (16384 <__aeabi_dadd+0x380>)
   162aa:	4298      	cmp	r0, r3
   162ac:	d100      	bne.n	162b0 <__aeabi_dadd+0x2ac>
   162ae:	e0d1      	b.n	16454 <__aeabi_dadd+0x450>
   162b0:	18ba      	adds	r2, r7, r2
   162b2:	42ba      	cmp	r2, r7
   162b4:	41bf      	sbcs	r7, r7
   162b6:	1864      	adds	r4, r4, r1
   162b8:	427f      	negs	r7, r7
   162ba:	19e4      	adds	r4, r4, r7
   162bc:	07e7      	lsls	r7, r4, #31
   162be:	0852      	lsrs	r2, r2, #1
   162c0:	4317      	orrs	r7, r2
   162c2:	0864      	lsrs	r4, r4, #1
   162c4:	0006      	movs	r6, r0
   162c6:	e721      	b.n	1610c <__aeabi_dadd+0x108>
   162c8:	482e      	ldr	r0, [pc, #184]	; (16384 <__aeabi_dadd+0x380>)
   162ca:	4285      	cmp	r5, r0
   162cc:	d100      	bne.n	162d0 <__aeabi_dadd+0x2cc>
   162ce:	e093      	b.n	163f8 <__aeabi_dadd+0x3f4>
   162d0:	001d      	movs	r5, r3
   162d2:	e6d0      	b.n	16076 <__aeabi_dadd+0x72>
   162d4:	0029      	movs	r1, r5
   162d6:	3e1f      	subs	r6, #31
   162d8:	40f1      	lsrs	r1, r6
   162da:	2b20      	cmp	r3, #32
   162dc:	d100      	bne.n	162e0 <__aeabi_dadd+0x2dc>
   162de:	e08d      	b.n	163fc <__aeabi_dadd+0x3f8>
   162e0:	2240      	movs	r2, #64	; 0x40
   162e2:	1ad3      	subs	r3, r2, r3
   162e4:	409d      	lsls	r5, r3
   162e6:	432f      	orrs	r7, r5
   162e8:	1e7d      	subs	r5, r7, #1
   162ea:	41af      	sbcs	r7, r5
   162ec:	2400      	movs	r4, #0
   162ee:	430f      	orrs	r7, r1
   162f0:	2600      	movs	r6, #0
   162f2:	e744      	b.n	1617e <__aeabi_dadd+0x17a>
   162f4:	002b      	movs	r3, r5
   162f6:	0008      	movs	r0, r1
   162f8:	3b20      	subs	r3, #32
   162fa:	40d8      	lsrs	r0, r3
   162fc:	0003      	movs	r3, r0
   162fe:	2d20      	cmp	r5, #32
   16300:	d100      	bne.n	16304 <__aeabi_dadd+0x300>
   16302:	e07d      	b.n	16400 <__aeabi_dadd+0x3fc>
   16304:	2040      	movs	r0, #64	; 0x40
   16306:	1b45      	subs	r5, r0, r5
   16308:	40a9      	lsls	r1, r5
   1630a:	430a      	orrs	r2, r1
   1630c:	1e51      	subs	r1, r2, #1
   1630e:	418a      	sbcs	r2, r1
   16310:	2100      	movs	r1, #0
   16312:	431a      	orrs	r2, r3
   16314:	e6c7      	b.n	160a6 <__aeabi_dadd+0xa2>
   16316:	2e00      	cmp	r6, #0
   16318:	d050      	beq.n	163bc <__aeabi_dadd+0x3b8>
   1631a:	4e1a      	ldr	r6, [pc, #104]	; (16384 <__aeabi_dadd+0x380>)
   1631c:	42b0      	cmp	r0, r6
   1631e:	d057      	beq.n	163d0 <__aeabi_dadd+0x3cc>
   16320:	2680      	movs	r6, #128	; 0x80
   16322:	426b      	negs	r3, r5
   16324:	4699      	mov	r9, r3
   16326:	0436      	lsls	r6, r6, #16
   16328:	4334      	orrs	r4, r6
   1632a:	464b      	mov	r3, r9
   1632c:	2b38      	cmp	r3, #56	; 0x38
   1632e:	dd00      	ble.n	16332 <__aeabi_dadd+0x32e>
   16330:	e0d6      	b.n	164e0 <__aeabi_dadd+0x4dc>
   16332:	2b1f      	cmp	r3, #31
   16334:	dd00      	ble.n	16338 <__aeabi_dadd+0x334>
   16336:	e135      	b.n	165a4 <__aeabi_dadd+0x5a0>
   16338:	2620      	movs	r6, #32
   1633a:	1af5      	subs	r5, r6, r3
   1633c:	0026      	movs	r6, r4
   1633e:	40ae      	lsls	r6, r5
   16340:	46b2      	mov	sl, r6
   16342:	003e      	movs	r6, r7
   16344:	40de      	lsrs	r6, r3
   16346:	46ac      	mov	ip, r5
   16348:	0035      	movs	r5, r6
   1634a:	4656      	mov	r6, sl
   1634c:	432e      	orrs	r6, r5
   1634e:	4665      	mov	r5, ip
   16350:	40af      	lsls	r7, r5
   16352:	1e7d      	subs	r5, r7, #1
   16354:	41af      	sbcs	r7, r5
   16356:	40dc      	lsrs	r4, r3
   16358:	4337      	orrs	r7, r6
   1635a:	1bd7      	subs	r7, r2, r7
   1635c:	42ba      	cmp	r2, r7
   1635e:	4192      	sbcs	r2, r2
   16360:	1b0c      	subs	r4, r1, r4
   16362:	4252      	negs	r2, r2
   16364:	1aa4      	subs	r4, r4, r2
   16366:	0006      	movs	r6, r0
   16368:	46d8      	mov	r8, fp
   1636a:	e6a3      	b.n	160b4 <__aeabi_dadd+0xb0>
   1636c:	4664      	mov	r4, ip
   1636e:	4667      	mov	r7, ip
   16370:	432c      	orrs	r4, r5
   16372:	d000      	beq.n	16376 <__aeabi_dadd+0x372>
   16374:	e6a2      	b.n	160bc <__aeabi_dadd+0xb8>
   16376:	2500      	movs	r5, #0
   16378:	2600      	movs	r6, #0
   1637a:	2700      	movs	r7, #0
   1637c:	e706      	b.n	1618c <__aeabi_dadd+0x188>
   1637e:	001e      	movs	r6, r3
   16380:	e6c4      	b.n	1610c <__aeabi_dadd+0x108>
   16382:	46c0      	nop			; (mov r8, r8)
   16384:	000007ff 	.word	0x000007ff
   16388:	ff7fffff 	.word	0xff7fffff
   1638c:	800fffff 	.word	0x800fffff
   16390:	2b1f      	cmp	r3, #31
   16392:	dc63      	bgt.n	1645c <__aeabi_dadd+0x458>
   16394:	2020      	movs	r0, #32
   16396:	1ac3      	subs	r3, r0, r3
   16398:	0008      	movs	r0, r1
   1639a:	4098      	lsls	r0, r3
   1639c:	469c      	mov	ip, r3
   1639e:	4683      	mov	fp, r0
   163a0:	4653      	mov	r3, sl
   163a2:	0010      	movs	r0, r2
   163a4:	40d8      	lsrs	r0, r3
   163a6:	0003      	movs	r3, r0
   163a8:	4658      	mov	r0, fp
   163aa:	4318      	orrs	r0, r3
   163ac:	4663      	mov	r3, ip
   163ae:	409a      	lsls	r2, r3
   163b0:	1e53      	subs	r3, r2, #1
   163b2:	419a      	sbcs	r2, r3
   163b4:	4653      	mov	r3, sl
   163b6:	4302      	orrs	r2, r0
   163b8:	40d9      	lsrs	r1, r3
   163ba:	e703      	b.n	161c4 <__aeabi_dadd+0x1c0>
   163bc:	0026      	movs	r6, r4
   163be:	433e      	orrs	r6, r7
   163c0:	d006      	beq.n	163d0 <__aeabi_dadd+0x3cc>
   163c2:	43eb      	mvns	r3, r5
   163c4:	4699      	mov	r9, r3
   163c6:	2b00      	cmp	r3, #0
   163c8:	d0c7      	beq.n	1635a <__aeabi_dadd+0x356>
   163ca:	4e94      	ldr	r6, [pc, #592]	; (1661c <__aeabi_dadd+0x618>)
   163cc:	42b0      	cmp	r0, r6
   163ce:	d1ac      	bne.n	1632a <__aeabi_dadd+0x326>
   163d0:	000c      	movs	r4, r1
   163d2:	0017      	movs	r7, r2
   163d4:	0006      	movs	r6, r0
   163d6:	46d8      	mov	r8, fp
   163d8:	e698      	b.n	1610c <__aeabi_dadd+0x108>
   163da:	4b90      	ldr	r3, [pc, #576]	; (1661c <__aeabi_dadd+0x618>)
   163dc:	459a      	cmp	sl, r3
   163de:	d00b      	beq.n	163f8 <__aeabi_dadd+0x3f4>
   163e0:	4682      	mov	sl, r0
   163e2:	e6e7      	b.n	161b4 <__aeabi_dadd+0x1b0>
   163e4:	2800      	cmp	r0, #0
   163e6:	d000      	beq.n	163ea <__aeabi_dadd+0x3e6>
   163e8:	e09e      	b.n	16528 <__aeabi_dadd+0x524>
   163ea:	0018      	movs	r0, r3
   163ec:	4310      	orrs	r0, r2
   163ee:	d100      	bne.n	163f2 <__aeabi_dadd+0x3ee>
   163f0:	e0e9      	b.n	165c6 <__aeabi_dadd+0x5c2>
   163f2:	001c      	movs	r4, r3
   163f4:	0017      	movs	r7, r2
   163f6:	46d8      	mov	r8, fp
   163f8:	4e88      	ldr	r6, [pc, #544]	; (1661c <__aeabi_dadd+0x618>)
   163fa:	e687      	b.n	1610c <__aeabi_dadd+0x108>
   163fc:	2500      	movs	r5, #0
   163fe:	e772      	b.n	162e6 <__aeabi_dadd+0x2e2>
   16400:	2100      	movs	r1, #0
   16402:	e782      	b.n	1630a <__aeabi_dadd+0x306>
   16404:	0023      	movs	r3, r4
   16406:	433b      	orrs	r3, r7
   16408:	2e00      	cmp	r6, #0
   1640a:	d000      	beq.n	1640e <__aeabi_dadd+0x40a>
   1640c:	e0ab      	b.n	16566 <__aeabi_dadd+0x562>
   1640e:	2b00      	cmp	r3, #0
   16410:	d100      	bne.n	16414 <__aeabi_dadd+0x410>
   16412:	e0e7      	b.n	165e4 <__aeabi_dadd+0x5e0>
   16414:	000b      	movs	r3, r1
   16416:	4313      	orrs	r3, r2
   16418:	d100      	bne.n	1641c <__aeabi_dadd+0x418>
   1641a:	e677      	b.n	1610c <__aeabi_dadd+0x108>
   1641c:	18ba      	adds	r2, r7, r2
   1641e:	42ba      	cmp	r2, r7
   16420:	41bf      	sbcs	r7, r7
   16422:	1864      	adds	r4, r4, r1
   16424:	427f      	negs	r7, r7
   16426:	19e4      	adds	r4, r4, r7
   16428:	0223      	lsls	r3, r4, #8
   1642a:	d400      	bmi.n	1642e <__aeabi_dadd+0x42a>
   1642c:	e0f2      	b.n	16614 <__aeabi_dadd+0x610>
   1642e:	4b7c      	ldr	r3, [pc, #496]	; (16620 <__aeabi_dadd+0x61c>)
   16430:	0017      	movs	r7, r2
   16432:	401c      	ands	r4, r3
   16434:	0006      	movs	r6, r0
   16436:	e669      	b.n	1610c <__aeabi_dadd+0x108>
   16438:	0020      	movs	r0, r4
   1643a:	4338      	orrs	r0, r7
   1643c:	2e00      	cmp	r6, #0
   1643e:	d1d1      	bne.n	163e4 <__aeabi_dadd+0x3e0>
   16440:	2800      	cmp	r0, #0
   16442:	d15b      	bne.n	164fc <__aeabi_dadd+0x4f8>
   16444:	001c      	movs	r4, r3
   16446:	4314      	orrs	r4, r2
   16448:	d100      	bne.n	1644c <__aeabi_dadd+0x448>
   1644a:	e0a8      	b.n	1659e <__aeabi_dadd+0x59a>
   1644c:	001c      	movs	r4, r3
   1644e:	0017      	movs	r7, r2
   16450:	46d8      	mov	r8, fp
   16452:	e65b      	b.n	1610c <__aeabi_dadd+0x108>
   16454:	0006      	movs	r6, r0
   16456:	2400      	movs	r4, #0
   16458:	2700      	movs	r7, #0
   1645a:	e697      	b.n	1618c <__aeabi_dadd+0x188>
   1645c:	4650      	mov	r0, sl
   1645e:	000b      	movs	r3, r1
   16460:	3820      	subs	r0, #32
   16462:	40c3      	lsrs	r3, r0
   16464:	4699      	mov	r9, r3
   16466:	4653      	mov	r3, sl
   16468:	2b20      	cmp	r3, #32
   1646a:	d100      	bne.n	1646e <__aeabi_dadd+0x46a>
   1646c:	e095      	b.n	1659a <__aeabi_dadd+0x596>
   1646e:	2340      	movs	r3, #64	; 0x40
   16470:	4650      	mov	r0, sl
   16472:	1a1b      	subs	r3, r3, r0
   16474:	4099      	lsls	r1, r3
   16476:	430a      	orrs	r2, r1
   16478:	1e51      	subs	r1, r2, #1
   1647a:	418a      	sbcs	r2, r1
   1647c:	464b      	mov	r3, r9
   1647e:	2100      	movs	r1, #0
   16480:	431a      	orrs	r2, r3
   16482:	e69f      	b.n	161c4 <__aeabi_dadd+0x1c0>
   16484:	2e00      	cmp	r6, #0
   16486:	d130      	bne.n	164ea <__aeabi_dadd+0x4e6>
   16488:	0026      	movs	r6, r4
   1648a:	433e      	orrs	r6, r7
   1648c:	d067      	beq.n	1655e <__aeabi_dadd+0x55a>
   1648e:	43db      	mvns	r3, r3
   16490:	469a      	mov	sl, r3
   16492:	2b00      	cmp	r3, #0
   16494:	d01c      	beq.n	164d0 <__aeabi_dadd+0x4cc>
   16496:	4e61      	ldr	r6, [pc, #388]	; (1661c <__aeabi_dadd+0x618>)
   16498:	42b0      	cmp	r0, r6
   1649a:	d060      	beq.n	1655e <__aeabi_dadd+0x55a>
   1649c:	4653      	mov	r3, sl
   1649e:	2b38      	cmp	r3, #56	; 0x38
   164a0:	dd00      	ble.n	164a4 <__aeabi_dadd+0x4a0>
   164a2:	e096      	b.n	165d2 <__aeabi_dadd+0x5ce>
   164a4:	2b1f      	cmp	r3, #31
   164a6:	dd00      	ble.n	164aa <__aeabi_dadd+0x4a6>
   164a8:	e09f      	b.n	165ea <__aeabi_dadd+0x5e6>
   164aa:	2620      	movs	r6, #32
   164ac:	1af3      	subs	r3, r6, r3
   164ae:	0026      	movs	r6, r4
   164b0:	409e      	lsls	r6, r3
   164b2:	469c      	mov	ip, r3
   164b4:	46b3      	mov	fp, r6
   164b6:	4653      	mov	r3, sl
   164b8:	003e      	movs	r6, r7
   164ba:	40de      	lsrs	r6, r3
   164bc:	0033      	movs	r3, r6
   164be:	465e      	mov	r6, fp
   164c0:	431e      	orrs	r6, r3
   164c2:	4663      	mov	r3, ip
   164c4:	409f      	lsls	r7, r3
   164c6:	1e7b      	subs	r3, r7, #1
   164c8:	419f      	sbcs	r7, r3
   164ca:	4653      	mov	r3, sl
   164cc:	40dc      	lsrs	r4, r3
   164ce:	4337      	orrs	r7, r6
   164d0:	18bf      	adds	r7, r7, r2
   164d2:	4297      	cmp	r7, r2
   164d4:	4192      	sbcs	r2, r2
   164d6:	1864      	adds	r4, r4, r1
   164d8:	4252      	negs	r2, r2
   164da:	18a4      	adds	r4, r4, r2
   164dc:	0006      	movs	r6, r0
   164de:	e678      	b.n	161d2 <__aeabi_dadd+0x1ce>
   164e0:	4327      	orrs	r7, r4
   164e2:	1e7c      	subs	r4, r7, #1
   164e4:	41a7      	sbcs	r7, r4
   164e6:	2400      	movs	r4, #0
   164e8:	e737      	b.n	1635a <__aeabi_dadd+0x356>
   164ea:	4e4c      	ldr	r6, [pc, #304]	; (1661c <__aeabi_dadd+0x618>)
   164ec:	42b0      	cmp	r0, r6
   164ee:	d036      	beq.n	1655e <__aeabi_dadd+0x55a>
   164f0:	2680      	movs	r6, #128	; 0x80
   164f2:	425b      	negs	r3, r3
   164f4:	0436      	lsls	r6, r6, #16
   164f6:	469a      	mov	sl, r3
   164f8:	4334      	orrs	r4, r6
   164fa:	e7cf      	b.n	1649c <__aeabi_dadd+0x498>
   164fc:	0018      	movs	r0, r3
   164fe:	4310      	orrs	r0, r2
   16500:	d100      	bne.n	16504 <__aeabi_dadd+0x500>
   16502:	e603      	b.n	1610c <__aeabi_dadd+0x108>
   16504:	1ab8      	subs	r0, r7, r2
   16506:	4684      	mov	ip, r0
   16508:	4567      	cmp	r7, ip
   1650a:	41ad      	sbcs	r5, r5
   1650c:	1ae0      	subs	r0, r4, r3
   1650e:	426d      	negs	r5, r5
   16510:	1b40      	subs	r0, r0, r5
   16512:	0205      	lsls	r5, r0, #8
   16514:	d400      	bmi.n	16518 <__aeabi_dadd+0x514>
   16516:	e62c      	b.n	16172 <__aeabi_dadd+0x16e>
   16518:	1bd7      	subs	r7, r2, r7
   1651a:	42ba      	cmp	r2, r7
   1651c:	4192      	sbcs	r2, r2
   1651e:	1b1c      	subs	r4, r3, r4
   16520:	4252      	negs	r2, r2
   16522:	1aa4      	subs	r4, r4, r2
   16524:	46d8      	mov	r8, fp
   16526:	e5f1      	b.n	1610c <__aeabi_dadd+0x108>
   16528:	0018      	movs	r0, r3
   1652a:	4310      	orrs	r0, r2
   1652c:	d100      	bne.n	16530 <__aeabi_dadd+0x52c>
   1652e:	e763      	b.n	163f8 <__aeabi_dadd+0x3f4>
   16530:	08f8      	lsrs	r0, r7, #3
   16532:	0767      	lsls	r7, r4, #29
   16534:	4307      	orrs	r7, r0
   16536:	2080      	movs	r0, #128	; 0x80
   16538:	08e4      	lsrs	r4, r4, #3
   1653a:	0300      	lsls	r0, r0, #12
   1653c:	4204      	tst	r4, r0
   1653e:	d008      	beq.n	16552 <__aeabi_dadd+0x54e>
   16540:	08dd      	lsrs	r5, r3, #3
   16542:	4205      	tst	r5, r0
   16544:	d105      	bne.n	16552 <__aeabi_dadd+0x54e>
   16546:	08d2      	lsrs	r2, r2, #3
   16548:	0759      	lsls	r1, r3, #29
   1654a:	4311      	orrs	r1, r2
   1654c:	000f      	movs	r7, r1
   1654e:	002c      	movs	r4, r5
   16550:	46d8      	mov	r8, fp
   16552:	0f7b      	lsrs	r3, r7, #29
   16554:	00e4      	lsls	r4, r4, #3
   16556:	431c      	orrs	r4, r3
   16558:	00ff      	lsls	r7, r7, #3
   1655a:	4e30      	ldr	r6, [pc, #192]	; (1661c <__aeabi_dadd+0x618>)
   1655c:	e5d6      	b.n	1610c <__aeabi_dadd+0x108>
   1655e:	000c      	movs	r4, r1
   16560:	0017      	movs	r7, r2
   16562:	0006      	movs	r6, r0
   16564:	e5d2      	b.n	1610c <__aeabi_dadd+0x108>
   16566:	2b00      	cmp	r3, #0
   16568:	d038      	beq.n	165dc <__aeabi_dadd+0x5d8>
   1656a:	000b      	movs	r3, r1
   1656c:	4313      	orrs	r3, r2
   1656e:	d100      	bne.n	16572 <__aeabi_dadd+0x56e>
   16570:	e742      	b.n	163f8 <__aeabi_dadd+0x3f4>
   16572:	08f8      	lsrs	r0, r7, #3
   16574:	0767      	lsls	r7, r4, #29
   16576:	4307      	orrs	r7, r0
   16578:	2080      	movs	r0, #128	; 0x80
   1657a:	08e4      	lsrs	r4, r4, #3
   1657c:	0300      	lsls	r0, r0, #12
   1657e:	4204      	tst	r4, r0
   16580:	d0e7      	beq.n	16552 <__aeabi_dadd+0x54e>
   16582:	08cb      	lsrs	r3, r1, #3
   16584:	4203      	tst	r3, r0
   16586:	d1e4      	bne.n	16552 <__aeabi_dadd+0x54e>
   16588:	08d2      	lsrs	r2, r2, #3
   1658a:	0749      	lsls	r1, r1, #29
   1658c:	4311      	orrs	r1, r2
   1658e:	000f      	movs	r7, r1
   16590:	001c      	movs	r4, r3
   16592:	e7de      	b.n	16552 <__aeabi_dadd+0x54e>
   16594:	2700      	movs	r7, #0
   16596:	2400      	movs	r4, #0
   16598:	e5d5      	b.n	16146 <__aeabi_dadd+0x142>
   1659a:	2100      	movs	r1, #0
   1659c:	e76b      	b.n	16476 <__aeabi_dadd+0x472>
   1659e:	2500      	movs	r5, #0
   165a0:	2700      	movs	r7, #0
   165a2:	e5f3      	b.n	1618c <__aeabi_dadd+0x188>
   165a4:	464e      	mov	r6, r9
   165a6:	0025      	movs	r5, r4
   165a8:	3e20      	subs	r6, #32
   165aa:	40f5      	lsrs	r5, r6
   165ac:	464b      	mov	r3, r9
   165ae:	002e      	movs	r6, r5
   165b0:	2b20      	cmp	r3, #32
   165b2:	d02d      	beq.n	16610 <__aeabi_dadd+0x60c>
   165b4:	2540      	movs	r5, #64	; 0x40
   165b6:	1aed      	subs	r5, r5, r3
   165b8:	40ac      	lsls	r4, r5
   165ba:	4327      	orrs	r7, r4
   165bc:	1e7c      	subs	r4, r7, #1
   165be:	41a7      	sbcs	r7, r4
   165c0:	2400      	movs	r4, #0
   165c2:	4337      	orrs	r7, r6
   165c4:	e6c9      	b.n	1635a <__aeabi_dadd+0x356>
   165c6:	2480      	movs	r4, #128	; 0x80
   165c8:	2500      	movs	r5, #0
   165ca:	0324      	lsls	r4, r4, #12
   165cc:	4e13      	ldr	r6, [pc, #76]	; (1661c <__aeabi_dadd+0x618>)
   165ce:	2700      	movs	r7, #0
   165d0:	e5dc      	b.n	1618c <__aeabi_dadd+0x188>
   165d2:	4327      	orrs	r7, r4
   165d4:	1e7c      	subs	r4, r7, #1
   165d6:	41a7      	sbcs	r7, r4
   165d8:	2400      	movs	r4, #0
   165da:	e779      	b.n	164d0 <__aeabi_dadd+0x4cc>
   165dc:	000c      	movs	r4, r1
   165de:	0017      	movs	r7, r2
   165e0:	4e0e      	ldr	r6, [pc, #56]	; (1661c <__aeabi_dadd+0x618>)
   165e2:	e593      	b.n	1610c <__aeabi_dadd+0x108>
   165e4:	000c      	movs	r4, r1
   165e6:	0017      	movs	r7, r2
   165e8:	e590      	b.n	1610c <__aeabi_dadd+0x108>
   165ea:	4656      	mov	r6, sl
   165ec:	0023      	movs	r3, r4
   165ee:	3e20      	subs	r6, #32
   165f0:	40f3      	lsrs	r3, r6
   165f2:	4699      	mov	r9, r3
   165f4:	4653      	mov	r3, sl
   165f6:	2b20      	cmp	r3, #32
   165f8:	d00e      	beq.n	16618 <__aeabi_dadd+0x614>
   165fa:	2340      	movs	r3, #64	; 0x40
   165fc:	4656      	mov	r6, sl
   165fe:	1b9b      	subs	r3, r3, r6
   16600:	409c      	lsls	r4, r3
   16602:	4327      	orrs	r7, r4
   16604:	1e7c      	subs	r4, r7, #1
   16606:	41a7      	sbcs	r7, r4
   16608:	464b      	mov	r3, r9
   1660a:	2400      	movs	r4, #0
   1660c:	431f      	orrs	r7, r3
   1660e:	e75f      	b.n	164d0 <__aeabi_dadd+0x4cc>
   16610:	2400      	movs	r4, #0
   16612:	e7d2      	b.n	165ba <__aeabi_dadd+0x5b6>
   16614:	0017      	movs	r7, r2
   16616:	e5b2      	b.n	1617e <__aeabi_dadd+0x17a>
   16618:	2400      	movs	r4, #0
   1661a:	e7f2      	b.n	16602 <__aeabi_dadd+0x5fe>
   1661c:	000007ff 	.word	0x000007ff
   16620:	ff7fffff 	.word	0xff7fffff

00016624 <__aeabi_ddiv>:
   16624:	b5f0      	push	{r4, r5, r6, r7, lr}
   16626:	4657      	mov	r7, sl
   16628:	4645      	mov	r5, r8
   1662a:	46de      	mov	lr, fp
   1662c:	464e      	mov	r6, r9
   1662e:	b5e0      	push	{r5, r6, r7, lr}
   16630:	004c      	lsls	r4, r1, #1
   16632:	030e      	lsls	r6, r1, #12
   16634:	b087      	sub	sp, #28
   16636:	4683      	mov	fp, r0
   16638:	4692      	mov	sl, r2
   1663a:	001d      	movs	r5, r3
   1663c:	4680      	mov	r8, r0
   1663e:	0b36      	lsrs	r6, r6, #12
   16640:	0d64      	lsrs	r4, r4, #21
   16642:	0fcf      	lsrs	r7, r1, #31
   16644:	2c00      	cmp	r4, #0
   16646:	d04f      	beq.n	166e8 <__aeabi_ddiv+0xc4>
   16648:	4b6f      	ldr	r3, [pc, #444]	; (16808 <__aeabi_ddiv+0x1e4>)
   1664a:	429c      	cmp	r4, r3
   1664c:	d035      	beq.n	166ba <__aeabi_ddiv+0x96>
   1664e:	2380      	movs	r3, #128	; 0x80
   16650:	0f42      	lsrs	r2, r0, #29
   16652:	041b      	lsls	r3, r3, #16
   16654:	00f6      	lsls	r6, r6, #3
   16656:	4313      	orrs	r3, r2
   16658:	4333      	orrs	r3, r6
   1665a:	4699      	mov	r9, r3
   1665c:	00c3      	lsls	r3, r0, #3
   1665e:	4698      	mov	r8, r3
   16660:	4b6a      	ldr	r3, [pc, #424]	; (1680c <__aeabi_ddiv+0x1e8>)
   16662:	2600      	movs	r6, #0
   16664:	469c      	mov	ip, r3
   16666:	2300      	movs	r3, #0
   16668:	4464      	add	r4, ip
   1666a:	9303      	str	r3, [sp, #12]
   1666c:	032b      	lsls	r3, r5, #12
   1666e:	0b1b      	lsrs	r3, r3, #12
   16670:	469b      	mov	fp, r3
   16672:	006b      	lsls	r3, r5, #1
   16674:	0fed      	lsrs	r5, r5, #31
   16676:	4650      	mov	r0, sl
   16678:	0d5b      	lsrs	r3, r3, #21
   1667a:	9501      	str	r5, [sp, #4]
   1667c:	d05e      	beq.n	1673c <__aeabi_ddiv+0x118>
   1667e:	4a62      	ldr	r2, [pc, #392]	; (16808 <__aeabi_ddiv+0x1e4>)
   16680:	4293      	cmp	r3, r2
   16682:	d053      	beq.n	1672c <__aeabi_ddiv+0x108>
   16684:	465a      	mov	r2, fp
   16686:	00d1      	lsls	r1, r2, #3
   16688:	2280      	movs	r2, #128	; 0x80
   1668a:	0f40      	lsrs	r0, r0, #29
   1668c:	0412      	lsls	r2, r2, #16
   1668e:	4302      	orrs	r2, r0
   16690:	430a      	orrs	r2, r1
   16692:	4693      	mov	fp, r2
   16694:	4652      	mov	r2, sl
   16696:	00d1      	lsls	r1, r2, #3
   16698:	4a5c      	ldr	r2, [pc, #368]	; (1680c <__aeabi_ddiv+0x1e8>)
   1669a:	4694      	mov	ip, r2
   1669c:	2200      	movs	r2, #0
   1669e:	4463      	add	r3, ip
   166a0:	0038      	movs	r0, r7
   166a2:	4068      	eors	r0, r5
   166a4:	4684      	mov	ip, r0
   166a6:	9002      	str	r0, [sp, #8]
   166a8:	1ae4      	subs	r4, r4, r3
   166aa:	4316      	orrs	r6, r2
   166ac:	2e0f      	cmp	r6, #15
   166ae:	d900      	bls.n	166b2 <__aeabi_ddiv+0x8e>
   166b0:	e0b4      	b.n	1681c <__aeabi_ddiv+0x1f8>
   166b2:	4b57      	ldr	r3, [pc, #348]	; (16810 <__aeabi_ddiv+0x1ec>)
   166b4:	00b6      	lsls	r6, r6, #2
   166b6:	599b      	ldr	r3, [r3, r6]
   166b8:	469f      	mov	pc, r3
   166ba:	0003      	movs	r3, r0
   166bc:	4333      	orrs	r3, r6
   166be:	4699      	mov	r9, r3
   166c0:	d16c      	bne.n	1679c <__aeabi_ddiv+0x178>
   166c2:	2300      	movs	r3, #0
   166c4:	4698      	mov	r8, r3
   166c6:	3302      	adds	r3, #2
   166c8:	2608      	movs	r6, #8
   166ca:	9303      	str	r3, [sp, #12]
   166cc:	e7ce      	b.n	1666c <__aeabi_ddiv+0x48>
   166ce:	46cb      	mov	fp, r9
   166d0:	4641      	mov	r1, r8
   166d2:	9a03      	ldr	r2, [sp, #12]
   166d4:	9701      	str	r7, [sp, #4]
   166d6:	2a02      	cmp	r2, #2
   166d8:	d165      	bne.n	167a6 <__aeabi_ddiv+0x182>
   166da:	9b01      	ldr	r3, [sp, #4]
   166dc:	4c4a      	ldr	r4, [pc, #296]	; (16808 <__aeabi_ddiv+0x1e4>)
   166de:	469c      	mov	ip, r3
   166e0:	2300      	movs	r3, #0
   166e2:	2200      	movs	r2, #0
   166e4:	4698      	mov	r8, r3
   166e6:	e06b      	b.n	167c0 <__aeabi_ddiv+0x19c>
   166e8:	0003      	movs	r3, r0
   166ea:	4333      	orrs	r3, r6
   166ec:	4699      	mov	r9, r3
   166ee:	d04e      	beq.n	1678e <__aeabi_ddiv+0x16a>
   166f0:	2e00      	cmp	r6, #0
   166f2:	d100      	bne.n	166f6 <__aeabi_ddiv+0xd2>
   166f4:	e1bc      	b.n	16a70 <__aeabi_ddiv+0x44c>
   166f6:	0030      	movs	r0, r6
   166f8:	f001 fa7e 	bl	17bf8 <__clzsi2>
   166fc:	0003      	movs	r3, r0
   166fe:	3b0b      	subs	r3, #11
   16700:	2b1c      	cmp	r3, #28
   16702:	dd00      	ble.n	16706 <__aeabi_ddiv+0xe2>
   16704:	e1ac      	b.n	16a60 <__aeabi_ddiv+0x43c>
   16706:	221d      	movs	r2, #29
   16708:	1ad3      	subs	r3, r2, r3
   1670a:	465a      	mov	r2, fp
   1670c:	0001      	movs	r1, r0
   1670e:	40da      	lsrs	r2, r3
   16710:	3908      	subs	r1, #8
   16712:	408e      	lsls	r6, r1
   16714:	0013      	movs	r3, r2
   16716:	4333      	orrs	r3, r6
   16718:	4699      	mov	r9, r3
   1671a:	465b      	mov	r3, fp
   1671c:	408b      	lsls	r3, r1
   1671e:	4698      	mov	r8, r3
   16720:	2300      	movs	r3, #0
   16722:	4c3c      	ldr	r4, [pc, #240]	; (16814 <__aeabi_ddiv+0x1f0>)
   16724:	2600      	movs	r6, #0
   16726:	1a24      	subs	r4, r4, r0
   16728:	9303      	str	r3, [sp, #12]
   1672a:	e79f      	b.n	1666c <__aeabi_ddiv+0x48>
   1672c:	4651      	mov	r1, sl
   1672e:	465a      	mov	r2, fp
   16730:	4311      	orrs	r1, r2
   16732:	d129      	bne.n	16788 <__aeabi_ddiv+0x164>
   16734:	2200      	movs	r2, #0
   16736:	4693      	mov	fp, r2
   16738:	3202      	adds	r2, #2
   1673a:	e7b1      	b.n	166a0 <__aeabi_ddiv+0x7c>
   1673c:	4659      	mov	r1, fp
   1673e:	4301      	orrs	r1, r0
   16740:	d01e      	beq.n	16780 <__aeabi_ddiv+0x15c>
   16742:	465b      	mov	r3, fp
   16744:	2b00      	cmp	r3, #0
   16746:	d100      	bne.n	1674a <__aeabi_ddiv+0x126>
   16748:	e19e      	b.n	16a88 <__aeabi_ddiv+0x464>
   1674a:	4658      	mov	r0, fp
   1674c:	f001 fa54 	bl	17bf8 <__clzsi2>
   16750:	0003      	movs	r3, r0
   16752:	3b0b      	subs	r3, #11
   16754:	2b1c      	cmp	r3, #28
   16756:	dd00      	ble.n	1675a <__aeabi_ddiv+0x136>
   16758:	e18f      	b.n	16a7a <__aeabi_ddiv+0x456>
   1675a:	0002      	movs	r2, r0
   1675c:	4659      	mov	r1, fp
   1675e:	3a08      	subs	r2, #8
   16760:	4091      	lsls	r1, r2
   16762:	468b      	mov	fp, r1
   16764:	211d      	movs	r1, #29
   16766:	1acb      	subs	r3, r1, r3
   16768:	4651      	mov	r1, sl
   1676a:	40d9      	lsrs	r1, r3
   1676c:	000b      	movs	r3, r1
   1676e:	4659      	mov	r1, fp
   16770:	430b      	orrs	r3, r1
   16772:	4651      	mov	r1, sl
   16774:	469b      	mov	fp, r3
   16776:	4091      	lsls	r1, r2
   16778:	4b26      	ldr	r3, [pc, #152]	; (16814 <__aeabi_ddiv+0x1f0>)
   1677a:	2200      	movs	r2, #0
   1677c:	1a1b      	subs	r3, r3, r0
   1677e:	e78f      	b.n	166a0 <__aeabi_ddiv+0x7c>
   16780:	2300      	movs	r3, #0
   16782:	2201      	movs	r2, #1
   16784:	469b      	mov	fp, r3
   16786:	e78b      	b.n	166a0 <__aeabi_ddiv+0x7c>
   16788:	4651      	mov	r1, sl
   1678a:	2203      	movs	r2, #3
   1678c:	e788      	b.n	166a0 <__aeabi_ddiv+0x7c>
   1678e:	2300      	movs	r3, #0
   16790:	4698      	mov	r8, r3
   16792:	3301      	adds	r3, #1
   16794:	2604      	movs	r6, #4
   16796:	2400      	movs	r4, #0
   16798:	9303      	str	r3, [sp, #12]
   1679a:	e767      	b.n	1666c <__aeabi_ddiv+0x48>
   1679c:	2303      	movs	r3, #3
   1679e:	46b1      	mov	r9, r6
   167a0:	9303      	str	r3, [sp, #12]
   167a2:	260c      	movs	r6, #12
   167a4:	e762      	b.n	1666c <__aeabi_ddiv+0x48>
   167a6:	2a03      	cmp	r2, #3
   167a8:	d100      	bne.n	167ac <__aeabi_ddiv+0x188>
   167aa:	e25c      	b.n	16c66 <__aeabi_ddiv+0x642>
   167ac:	9b01      	ldr	r3, [sp, #4]
   167ae:	2a01      	cmp	r2, #1
   167b0:	d000      	beq.n	167b4 <__aeabi_ddiv+0x190>
   167b2:	e1e4      	b.n	16b7e <__aeabi_ddiv+0x55a>
   167b4:	4013      	ands	r3, r2
   167b6:	469c      	mov	ip, r3
   167b8:	2300      	movs	r3, #0
   167ba:	2400      	movs	r4, #0
   167bc:	2200      	movs	r2, #0
   167be:	4698      	mov	r8, r3
   167c0:	2100      	movs	r1, #0
   167c2:	0312      	lsls	r2, r2, #12
   167c4:	0b13      	lsrs	r3, r2, #12
   167c6:	0d0a      	lsrs	r2, r1, #20
   167c8:	0512      	lsls	r2, r2, #20
   167ca:	431a      	orrs	r2, r3
   167cc:	0523      	lsls	r3, r4, #20
   167ce:	4c12      	ldr	r4, [pc, #72]	; (16818 <__aeabi_ddiv+0x1f4>)
   167d0:	4640      	mov	r0, r8
   167d2:	4022      	ands	r2, r4
   167d4:	4313      	orrs	r3, r2
   167d6:	4662      	mov	r2, ip
   167d8:	005b      	lsls	r3, r3, #1
   167da:	07d2      	lsls	r2, r2, #31
   167dc:	085b      	lsrs	r3, r3, #1
   167de:	4313      	orrs	r3, r2
   167e0:	0019      	movs	r1, r3
   167e2:	b007      	add	sp, #28
   167e4:	bc3c      	pop	{r2, r3, r4, r5}
   167e6:	4690      	mov	r8, r2
   167e8:	4699      	mov	r9, r3
   167ea:	46a2      	mov	sl, r4
   167ec:	46ab      	mov	fp, r5
   167ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167f0:	2300      	movs	r3, #0
   167f2:	2280      	movs	r2, #128	; 0x80
   167f4:	469c      	mov	ip, r3
   167f6:	0312      	lsls	r2, r2, #12
   167f8:	4698      	mov	r8, r3
   167fa:	4c03      	ldr	r4, [pc, #12]	; (16808 <__aeabi_ddiv+0x1e4>)
   167fc:	e7e0      	b.n	167c0 <__aeabi_ddiv+0x19c>
   167fe:	2300      	movs	r3, #0
   16800:	4c01      	ldr	r4, [pc, #4]	; (16808 <__aeabi_ddiv+0x1e4>)
   16802:	2200      	movs	r2, #0
   16804:	4698      	mov	r8, r3
   16806:	e7db      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16808:	000007ff 	.word	0x000007ff
   1680c:	fffffc01 	.word	0xfffffc01
   16810:	00019bd0 	.word	0x00019bd0
   16814:	fffffc0d 	.word	0xfffffc0d
   16818:	800fffff 	.word	0x800fffff
   1681c:	45d9      	cmp	r9, fp
   1681e:	d900      	bls.n	16822 <__aeabi_ddiv+0x1fe>
   16820:	e139      	b.n	16a96 <__aeabi_ddiv+0x472>
   16822:	d100      	bne.n	16826 <__aeabi_ddiv+0x202>
   16824:	e134      	b.n	16a90 <__aeabi_ddiv+0x46c>
   16826:	2300      	movs	r3, #0
   16828:	4646      	mov	r6, r8
   1682a:	464d      	mov	r5, r9
   1682c:	469a      	mov	sl, r3
   1682e:	3c01      	subs	r4, #1
   16830:	465b      	mov	r3, fp
   16832:	0e0a      	lsrs	r2, r1, #24
   16834:	021b      	lsls	r3, r3, #8
   16836:	431a      	orrs	r2, r3
   16838:	020b      	lsls	r3, r1, #8
   1683a:	0c17      	lsrs	r7, r2, #16
   1683c:	9303      	str	r3, [sp, #12]
   1683e:	0413      	lsls	r3, r2, #16
   16840:	0c1b      	lsrs	r3, r3, #16
   16842:	0039      	movs	r1, r7
   16844:	0028      	movs	r0, r5
   16846:	4690      	mov	r8, r2
   16848:	9301      	str	r3, [sp, #4]
   1684a:	f7fe fe51 	bl	154f0 <__udivsi3>
   1684e:	0002      	movs	r2, r0
   16850:	9b01      	ldr	r3, [sp, #4]
   16852:	4683      	mov	fp, r0
   16854:	435a      	muls	r2, r3
   16856:	0028      	movs	r0, r5
   16858:	0039      	movs	r1, r7
   1685a:	4691      	mov	r9, r2
   1685c:	f7fe fece 	bl	155fc <__aeabi_uidivmod>
   16860:	0c35      	lsrs	r5, r6, #16
   16862:	0409      	lsls	r1, r1, #16
   16864:	430d      	orrs	r5, r1
   16866:	45a9      	cmp	r9, r5
   16868:	d90d      	bls.n	16886 <__aeabi_ddiv+0x262>
   1686a:	465b      	mov	r3, fp
   1686c:	4445      	add	r5, r8
   1686e:	3b01      	subs	r3, #1
   16870:	45a8      	cmp	r8, r5
   16872:	d900      	bls.n	16876 <__aeabi_ddiv+0x252>
   16874:	e13a      	b.n	16aec <__aeabi_ddiv+0x4c8>
   16876:	45a9      	cmp	r9, r5
   16878:	d800      	bhi.n	1687c <__aeabi_ddiv+0x258>
   1687a:	e137      	b.n	16aec <__aeabi_ddiv+0x4c8>
   1687c:	2302      	movs	r3, #2
   1687e:	425b      	negs	r3, r3
   16880:	469c      	mov	ip, r3
   16882:	4445      	add	r5, r8
   16884:	44e3      	add	fp, ip
   16886:	464b      	mov	r3, r9
   16888:	1aeb      	subs	r3, r5, r3
   1688a:	0039      	movs	r1, r7
   1688c:	0018      	movs	r0, r3
   1688e:	9304      	str	r3, [sp, #16]
   16890:	f7fe fe2e 	bl	154f0 <__udivsi3>
   16894:	9b01      	ldr	r3, [sp, #4]
   16896:	0005      	movs	r5, r0
   16898:	4343      	muls	r3, r0
   1689a:	0039      	movs	r1, r7
   1689c:	9804      	ldr	r0, [sp, #16]
   1689e:	4699      	mov	r9, r3
   168a0:	f7fe feac 	bl	155fc <__aeabi_uidivmod>
   168a4:	0433      	lsls	r3, r6, #16
   168a6:	0409      	lsls	r1, r1, #16
   168a8:	0c1b      	lsrs	r3, r3, #16
   168aa:	430b      	orrs	r3, r1
   168ac:	4599      	cmp	r9, r3
   168ae:	d909      	bls.n	168c4 <__aeabi_ddiv+0x2a0>
   168b0:	4443      	add	r3, r8
   168b2:	1e6a      	subs	r2, r5, #1
   168b4:	4598      	cmp	r8, r3
   168b6:	d900      	bls.n	168ba <__aeabi_ddiv+0x296>
   168b8:	e11a      	b.n	16af0 <__aeabi_ddiv+0x4cc>
   168ba:	4599      	cmp	r9, r3
   168bc:	d800      	bhi.n	168c0 <__aeabi_ddiv+0x29c>
   168be:	e117      	b.n	16af0 <__aeabi_ddiv+0x4cc>
   168c0:	3d02      	subs	r5, #2
   168c2:	4443      	add	r3, r8
   168c4:	464a      	mov	r2, r9
   168c6:	1a9b      	subs	r3, r3, r2
   168c8:	465a      	mov	r2, fp
   168ca:	0412      	lsls	r2, r2, #16
   168cc:	432a      	orrs	r2, r5
   168ce:	9903      	ldr	r1, [sp, #12]
   168d0:	4693      	mov	fp, r2
   168d2:	0c10      	lsrs	r0, r2, #16
   168d4:	0c0a      	lsrs	r2, r1, #16
   168d6:	4691      	mov	r9, r2
   168d8:	0409      	lsls	r1, r1, #16
   168da:	465a      	mov	r2, fp
   168dc:	0c09      	lsrs	r1, r1, #16
   168de:	464e      	mov	r6, r9
   168e0:	000d      	movs	r5, r1
   168e2:	0412      	lsls	r2, r2, #16
   168e4:	0c12      	lsrs	r2, r2, #16
   168e6:	4345      	muls	r5, r0
   168e8:	9105      	str	r1, [sp, #20]
   168ea:	4351      	muls	r1, r2
   168ec:	4372      	muls	r2, r6
   168ee:	4370      	muls	r0, r6
   168f0:	1952      	adds	r2, r2, r5
   168f2:	0c0e      	lsrs	r6, r1, #16
   168f4:	18b2      	adds	r2, r6, r2
   168f6:	4295      	cmp	r5, r2
   168f8:	d903      	bls.n	16902 <__aeabi_ddiv+0x2de>
   168fa:	2580      	movs	r5, #128	; 0x80
   168fc:	026d      	lsls	r5, r5, #9
   168fe:	46ac      	mov	ip, r5
   16900:	4460      	add	r0, ip
   16902:	0c15      	lsrs	r5, r2, #16
   16904:	0409      	lsls	r1, r1, #16
   16906:	0412      	lsls	r2, r2, #16
   16908:	0c09      	lsrs	r1, r1, #16
   1690a:	1828      	adds	r0, r5, r0
   1690c:	1852      	adds	r2, r2, r1
   1690e:	4283      	cmp	r3, r0
   16910:	d200      	bcs.n	16914 <__aeabi_ddiv+0x2f0>
   16912:	e0ce      	b.n	16ab2 <__aeabi_ddiv+0x48e>
   16914:	d100      	bne.n	16918 <__aeabi_ddiv+0x2f4>
   16916:	e0c8      	b.n	16aaa <__aeabi_ddiv+0x486>
   16918:	1a1d      	subs	r5, r3, r0
   1691a:	4653      	mov	r3, sl
   1691c:	1a9e      	subs	r6, r3, r2
   1691e:	45b2      	cmp	sl, r6
   16920:	4192      	sbcs	r2, r2
   16922:	4252      	negs	r2, r2
   16924:	1aab      	subs	r3, r5, r2
   16926:	469a      	mov	sl, r3
   16928:	4598      	cmp	r8, r3
   1692a:	d100      	bne.n	1692e <__aeabi_ddiv+0x30a>
   1692c:	e117      	b.n	16b5e <__aeabi_ddiv+0x53a>
   1692e:	0039      	movs	r1, r7
   16930:	0018      	movs	r0, r3
   16932:	f7fe fddd 	bl	154f0 <__udivsi3>
   16936:	9b01      	ldr	r3, [sp, #4]
   16938:	0005      	movs	r5, r0
   1693a:	4343      	muls	r3, r0
   1693c:	0039      	movs	r1, r7
   1693e:	4650      	mov	r0, sl
   16940:	9304      	str	r3, [sp, #16]
   16942:	f7fe fe5b 	bl	155fc <__aeabi_uidivmod>
   16946:	9804      	ldr	r0, [sp, #16]
   16948:	040b      	lsls	r3, r1, #16
   1694a:	0c31      	lsrs	r1, r6, #16
   1694c:	4319      	orrs	r1, r3
   1694e:	4288      	cmp	r0, r1
   16950:	d909      	bls.n	16966 <__aeabi_ddiv+0x342>
   16952:	4441      	add	r1, r8
   16954:	1e6b      	subs	r3, r5, #1
   16956:	4588      	cmp	r8, r1
   16958:	d900      	bls.n	1695c <__aeabi_ddiv+0x338>
   1695a:	e107      	b.n	16b6c <__aeabi_ddiv+0x548>
   1695c:	4288      	cmp	r0, r1
   1695e:	d800      	bhi.n	16962 <__aeabi_ddiv+0x33e>
   16960:	e104      	b.n	16b6c <__aeabi_ddiv+0x548>
   16962:	3d02      	subs	r5, #2
   16964:	4441      	add	r1, r8
   16966:	9b04      	ldr	r3, [sp, #16]
   16968:	1acb      	subs	r3, r1, r3
   1696a:	0018      	movs	r0, r3
   1696c:	0039      	movs	r1, r7
   1696e:	9304      	str	r3, [sp, #16]
   16970:	f7fe fdbe 	bl	154f0 <__udivsi3>
   16974:	9b01      	ldr	r3, [sp, #4]
   16976:	4682      	mov	sl, r0
   16978:	4343      	muls	r3, r0
   1697a:	0039      	movs	r1, r7
   1697c:	9804      	ldr	r0, [sp, #16]
   1697e:	9301      	str	r3, [sp, #4]
   16980:	f7fe fe3c 	bl	155fc <__aeabi_uidivmod>
   16984:	9801      	ldr	r0, [sp, #4]
   16986:	040b      	lsls	r3, r1, #16
   16988:	0431      	lsls	r1, r6, #16
   1698a:	0c09      	lsrs	r1, r1, #16
   1698c:	4319      	orrs	r1, r3
   1698e:	4288      	cmp	r0, r1
   16990:	d90d      	bls.n	169ae <__aeabi_ddiv+0x38a>
   16992:	4653      	mov	r3, sl
   16994:	4441      	add	r1, r8
   16996:	3b01      	subs	r3, #1
   16998:	4588      	cmp	r8, r1
   1699a:	d900      	bls.n	1699e <__aeabi_ddiv+0x37a>
   1699c:	e0e8      	b.n	16b70 <__aeabi_ddiv+0x54c>
   1699e:	4288      	cmp	r0, r1
   169a0:	d800      	bhi.n	169a4 <__aeabi_ddiv+0x380>
   169a2:	e0e5      	b.n	16b70 <__aeabi_ddiv+0x54c>
   169a4:	2302      	movs	r3, #2
   169a6:	425b      	negs	r3, r3
   169a8:	469c      	mov	ip, r3
   169aa:	4441      	add	r1, r8
   169ac:	44e2      	add	sl, ip
   169ae:	9b01      	ldr	r3, [sp, #4]
   169b0:	042d      	lsls	r5, r5, #16
   169b2:	1ace      	subs	r6, r1, r3
   169b4:	4651      	mov	r1, sl
   169b6:	4329      	orrs	r1, r5
   169b8:	9d05      	ldr	r5, [sp, #20]
   169ba:	464f      	mov	r7, r9
   169bc:	002a      	movs	r2, r5
   169be:	040b      	lsls	r3, r1, #16
   169c0:	0c08      	lsrs	r0, r1, #16
   169c2:	0c1b      	lsrs	r3, r3, #16
   169c4:	435a      	muls	r2, r3
   169c6:	4345      	muls	r5, r0
   169c8:	437b      	muls	r3, r7
   169ca:	4378      	muls	r0, r7
   169cc:	195b      	adds	r3, r3, r5
   169ce:	0c17      	lsrs	r7, r2, #16
   169d0:	18fb      	adds	r3, r7, r3
   169d2:	429d      	cmp	r5, r3
   169d4:	d903      	bls.n	169de <__aeabi_ddiv+0x3ba>
   169d6:	2580      	movs	r5, #128	; 0x80
   169d8:	026d      	lsls	r5, r5, #9
   169da:	46ac      	mov	ip, r5
   169dc:	4460      	add	r0, ip
   169de:	0c1d      	lsrs	r5, r3, #16
   169e0:	0412      	lsls	r2, r2, #16
   169e2:	041b      	lsls	r3, r3, #16
   169e4:	0c12      	lsrs	r2, r2, #16
   169e6:	1828      	adds	r0, r5, r0
   169e8:	189b      	adds	r3, r3, r2
   169ea:	4286      	cmp	r6, r0
   169ec:	d200      	bcs.n	169f0 <__aeabi_ddiv+0x3cc>
   169ee:	e093      	b.n	16b18 <__aeabi_ddiv+0x4f4>
   169f0:	d100      	bne.n	169f4 <__aeabi_ddiv+0x3d0>
   169f2:	e08e      	b.n	16b12 <__aeabi_ddiv+0x4ee>
   169f4:	2301      	movs	r3, #1
   169f6:	4319      	orrs	r1, r3
   169f8:	4ba0      	ldr	r3, [pc, #640]	; (16c7c <__aeabi_ddiv+0x658>)
   169fa:	18e3      	adds	r3, r4, r3
   169fc:	2b00      	cmp	r3, #0
   169fe:	dc00      	bgt.n	16a02 <__aeabi_ddiv+0x3de>
   16a00:	e099      	b.n	16b36 <__aeabi_ddiv+0x512>
   16a02:	074a      	lsls	r2, r1, #29
   16a04:	d000      	beq.n	16a08 <__aeabi_ddiv+0x3e4>
   16a06:	e09e      	b.n	16b46 <__aeabi_ddiv+0x522>
   16a08:	465a      	mov	r2, fp
   16a0a:	01d2      	lsls	r2, r2, #7
   16a0c:	d506      	bpl.n	16a1c <__aeabi_ddiv+0x3f8>
   16a0e:	465a      	mov	r2, fp
   16a10:	4b9b      	ldr	r3, [pc, #620]	; (16c80 <__aeabi_ddiv+0x65c>)
   16a12:	401a      	ands	r2, r3
   16a14:	2380      	movs	r3, #128	; 0x80
   16a16:	4693      	mov	fp, r2
   16a18:	00db      	lsls	r3, r3, #3
   16a1a:	18e3      	adds	r3, r4, r3
   16a1c:	4a99      	ldr	r2, [pc, #612]	; (16c84 <__aeabi_ddiv+0x660>)
   16a1e:	4293      	cmp	r3, r2
   16a20:	dd68      	ble.n	16af4 <__aeabi_ddiv+0x4d0>
   16a22:	2301      	movs	r3, #1
   16a24:	9a02      	ldr	r2, [sp, #8]
   16a26:	4c98      	ldr	r4, [pc, #608]	; (16c88 <__aeabi_ddiv+0x664>)
   16a28:	401a      	ands	r2, r3
   16a2a:	2300      	movs	r3, #0
   16a2c:	4694      	mov	ip, r2
   16a2e:	4698      	mov	r8, r3
   16a30:	2200      	movs	r2, #0
   16a32:	e6c5      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16a34:	2280      	movs	r2, #128	; 0x80
   16a36:	464b      	mov	r3, r9
   16a38:	0312      	lsls	r2, r2, #12
   16a3a:	4213      	tst	r3, r2
   16a3c:	d00a      	beq.n	16a54 <__aeabi_ddiv+0x430>
   16a3e:	465b      	mov	r3, fp
   16a40:	4213      	tst	r3, r2
   16a42:	d106      	bne.n	16a52 <__aeabi_ddiv+0x42e>
   16a44:	431a      	orrs	r2, r3
   16a46:	0312      	lsls	r2, r2, #12
   16a48:	0b12      	lsrs	r2, r2, #12
   16a4a:	46ac      	mov	ip, r5
   16a4c:	4688      	mov	r8, r1
   16a4e:	4c8e      	ldr	r4, [pc, #568]	; (16c88 <__aeabi_ddiv+0x664>)
   16a50:	e6b6      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16a52:	464b      	mov	r3, r9
   16a54:	431a      	orrs	r2, r3
   16a56:	0312      	lsls	r2, r2, #12
   16a58:	0b12      	lsrs	r2, r2, #12
   16a5a:	46bc      	mov	ip, r7
   16a5c:	4c8a      	ldr	r4, [pc, #552]	; (16c88 <__aeabi_ddiv+0x664>)
   16a5e:	e6af      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16a60:	0003      	movs	r3, r0
   16a62:	465a      	mov	r2, fp
   16a64:	3b28      	subs	r3, #40	; 0x28
   16a66:	409a      	lsls	r2, r3
   16a68:	2300      	movs	r3, #0
   16a6a:	4691      	mov	r9, r2
   16a6c:	4698      	mov	r8, r3
   16a6e:	e657      	b.n	16720 <__aeabi_ddiv+0xfc>
   16a70:	4658      	mov	r0, fp
   16a72:	f001 f8c1 	bl	17bf8 <__clzsi2>
   16a76:	3020      	adds	r0, #32
   16a78:	e640      	b.n	166fc <__aeabi_ddiv+0xd8>
   16a7a:	0003      	movs	r3, r0
   16a7c:	4652      	mov	r2, sl
   16a7e:	3b28      	subs	r3, #40	; 0x28
   16a80:	409a      	lsls	r2, r3
   16a82:	2100      	movs	r1, #0
   16a84:	4693      	mov	fp, r2
   16a86:	e677      	b.n	16778 <__aeabi_ddiv+0x154>
   16a88:	f001 f8b6 	bl	17bf8 <__clzsi2>
   16a8c:	3020      	adds	r0, #32
   16a8e:	e65f      	b.n	16750 <__aeabi_ddiv+0x12c>
   16a90:	4588      	cmp	r8, r1
   16a92:	d200      	bcs.n	16a96 <__aeabi_ddiv+0x472>
   16a94:	e6c7      	b.n	16826 <__aeabi_ddiv+0x202>
   16a96:	464b      	mov	r3, r9
   16a98:	07de      	lsls	r6, r3, #31
   16a9a:	085d      	lsrs	r5, r3, #1
   16a9c:	4643      	mov	r3, r8
   16a9e:	085b      	lsrs	r3, r3, #1
   16aa0:	431e      	orrs	r6, r3
   16aa2:	4643      	mov	r3, r8
   16aa4:	07db      	lsls	r3, r3, #31
   16aa6:	469a      	mov	sl, r3
   16aa8:	e6c2      	b.n	16830 <__aeabi_ddiv+0x20c>
   16aaa:	2500      	movs	r5, #0
   16aac:	4592      	cmp	sl, r2
   16aae:	d300      	bcc.n	16ab2 <__aeabi_ddiv+0x48e>
   16ab0:	e733      	b.n	1691a <__aeabi_ddiv+0x2f6>
   16ab2:	9e03      	ldr	r6, [sp, #12]
   16ab4:	4659      	mov	r1, fp
   16ab6:	46b4      	mov	ip, r6
   16ab8:	44e2      	add	sl, ip
   16aba:	45b2      	cmp	sl, r6
   16abc:	41ad      	sbcs	r5, r5
   16abe:	426d      	negs	r5, r5
   16ac0:	4445      	add	r5, r8
   16ac2:	18eb      	adds	r3, r5, r3
   16ac4:	3901      	subs	r1, #1
   16ac6:	4598      	cmp	r8, r3
   16ac8:	d207      	bcs.n	16ada <__aeabi_ddiv+0x4b6>
   16aca:	4298      	cmp	r0, r3
   16acc:	d900      	bls.n	16ad0 <__aeabi_ddiv+0x4ac>
   16ace:	e07f      	b.n	16bd0 <__aeabi_ddiv+0x5ac>
   16ad0:	d100      	bne.n	16ad4 <__aeabi_ddiv+0x4b0>
   16ad2:	e0bc      	b.n	16c4e <__aeabi_ddiv+0x62a>
   16ad4:	1a1d      	subs	r5, r3, r0
   16ad6:	468b      	mov	fp, r1
   16ad8:	e71f      	b.n	1691a <__aeabi_ddiv+0x2f6>
   16ada:	4598      	cmp	r8, r3
   16adc:	d1fa      	bne.n	16ad4 <__aeabi_ddiv+0x4b0>
   16ade:	9d03      	ldr	r5, [sp, #12]
   16ae0:	4555      	cmp	r5, sl
   16ae2:	d9f2      	bls.n	16aca <__aeabi_ddiv+0x4a6>
   16ae4:	4643      	mov	r3, r8
   16ae6:	468b      	mov	fp, r1
   16ae8:	1a1d      	subs	r5, r3, r0
   16aea:	e716      	b.n	1691a <__aeabi_ddiv+0x2f6>
   16aec:	469b      	mov	fp, r3
   16aee:	e6ca      	b.n	16886 <__aeabi_ddiv+0x262>
   16af0:	0015      	movs	r5, r2
   16af2:	e6e7      	b.n	168c4 <__aeabi_ddiv+0x2a0>
   16af4:	465a      	mov	r2, fp
   16af6:	08c9      	lsrs	r1, r1, #3
   16af8:	0752      	lsls	r2, r2, #29
   16afa:	430a      	orrs	r2, r1
   16afc:	055b      	lsls	r3, r3, #21
   16afe:	4690      	mov	r8, r2
   16b00:	0d5c      	lsrs	r4, r3, #21
   16b02:	465a      	mov	r2, fp
   16b04:	2301      	movs	r3, #1
   16b06:	9902      	ldr	r1, [sp, #8]
   16b08:	0252      	lsls	r2, r2, #9
   16b0a:	4019      	ands	r1, r3
   16b0c:	0b12      	lsrs	r2, r2, #12
   16b0e:	468c      	mov	ip, r1
   16b10:	e656      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16b12:	2b00      	cmp	r3, #0
   16b14:	d100      	bne.n	16b18 <__aeabi_ddiv+0x4f4>
   16b16:	e76f      	b.n	169f8 <__aeabi_ddiv+0x3d4>
   16b18:	4446      	add	r6, r8
   16b1a:	1e4a      	subs	r2, r1, #1
   16b1c:	45b0      	cmp	r8, r6
   16b1e:	d929      	bls.n	16b74 <__aeabi_ddiv+0x550>
   16b20:	0011      	movs	r1, r2
   16b22:	4286      	cmp	r6, r0
   16b24:	d000      	beq.n	16b28 <__aeabi_ddiv+0x504>
   16b26:	e765      	b.n	169f4 <__aeabi_ddiv+0x3d0>
   16b28:	9a03      	ldr	r2, [sp, #12]
   16b2a:	4293      	cmp	r3, r2
   16b2c:	d000      	beq.n	16b30 <__aeabi_ddiv+0x50c>
   16b2e:	e761      	b.n	169f4 <__aeabi_ddiv+0x3d0>
   16b30:	e762      	b.n	169f8 <__aeabi_ddiv+0x3d4>
   16b32:	2101      	movs	r1, #1
   16b34:	4249      	negs	r1, r1
   16b36:	2001      	movs	r0, #1
   16b38:	1ac2      	subs	r2, r0, r3
   16b3a:	2a38      	cmp	r2, #56	; 0x38
   16b3c:	dd21      	ble.n	16b82 <__aeabi_ddiv+0x55e>
   16b3e:	9b02      	ldr	r3, [sp, #8]
   16b40:	4003      	ands	r3, r0
   16b42:	469c      	mov	ip, r3
   16b44:	e638      	b.n	167b8 <__aeabi_ddiv+0x194>
   16b46:	220f      	movs	r2, #15
   16b48:	400a      	ands	r2, r1
   16b4a:	2a04      	cmp	r2, #4
   16b4c:	d100      	bne.n	16b50 <__aeabi_ddiv+0x52c>
   16b4e:	e75b      	b.n	16a08 <__aeabi_ddiv+0x3e4>
   16b50:	000a      	movs	r2, r1
   16b52:	1d11      	adds	r1, r2, #4
   16b54:	4291      	cmp	r1, r2
   16b56:	4192      	sbcs	r2, r2
   16b58:	4252      	negs	r2, r2
   16b5a:	4493      	add	fp, r2
   16b5c:	e754      	b.n	16a08 <__aeabi_ddiv+0x3e4>
   16b5e:	4b47      	ldr	r3, [pc, #284]	; (16c7c <__aeabi_ddiv+0x658>)
   16b60:	18e3      	adds	r3, r4, r3
   16b62:	2b00      	cmp	r3, #0
   16b64:	dde5      	ble.n	16b32 <__aeabi_ddiv+0x50e>
   16b66:	2201      	movs	r2, #1
   16b68:	4252      	negs	r2, r2
   16b6a:	e7f2      	b.n	16b52 <__aeabi_ddiv+0x52e>
   16b6c:	001d      	movs	r5, r3
   16b6e:	e6fa      	b.n	16966 <__aeabi_ddiv+0x342>
   16b70:	469a      	mov	sl, r3
   16b72:	e71c      	b.n	169ae <__aeabi_ddiv+0x38a>
   16b74:	42b0      	cmp	r0, r6
   16b76:	d839      	bhi.n	16bec <__aeabi_ddiv+0x5c8>
   16b78:	d06e      	beq.n	16c58 <__aeabi_ddiv+0x634>
   16b7a:	0011      	movs	r1, r2
   16b7c:	e73a      	b.n	169f4 <__aeabi_ddiv+0x3d0>
   16b7e:	9302      	str	r3, [sp, #8]
   16b80:	e73a      	b.n	169f8 <__aeabi_ddiv+0x3d4>
   16b82:	2a1f      	cmp	r2, #31
   16b84:	dc3c      	bgt.n	16c00 <__aeabi_ddiv+0x5dc>
   16b86:	2320      	movs	r3, #32
   16b88:	1a9b      	subs	r3, r3, r2
   16b8a:	000c      	movs	r4, r1
   16b8c:	4658      	mov	r0, fp
   16b8e:	4099      	lsls	r1, r3
   16b90:	4098      	lsls	r0, r3
   16b92:	1e4b      	subs	r3, r1, #1
   16b94:	4199      	sbcs	r1, r3
   16b96:	465b      	mov	r3, fp
   16b98:	40d4      	lsrs	r4, r2
   16b9a:	40d3      	lsrs	r3, r2
   16b9c:	4320      	orrs	r0, r4
   16b9e:	4308      	orrs	r0, r1
   16ba0:	001a      	movs	r2, r3
   16ba2:	0743      	lsls	r3, r0, #29
   16ba4:	d009      	beq.n	16bba <__aeabi_ddiv+0x596>
   16ba6:	230f      	movs	r3, #15
   16ba8:	4003      	ands	r3, r0
   16baa:	2b04      	cmp	r3, #4
   16bac:	d005      	beq.n	16bba <__aeabi_ddiv+0x596>
   16bae:	0001      	movs	r1, r0
   16bb0:	1d08      	adds	r0, r1, #4
   16bb2:	4288      	cmp	r0, r1
   16bb4:	419b      	sbcs	r3, r3
   16bb6:	425b      	negs	r3, r3
   16bb8:	18d2      	adds	r2, r2, r3
   16bba:	0213      	lsls	r3, r2, #8
   16bbc:	d53a      	bpl.n	16c34 <__aeabi_ddiv+0x610>
   16bbe:	2301      	movs	r3, #1
   16bc0:	9a02      	ldr	r2, [sp, #8]
   16bc2:	2401      	movs	r4, #1
   16bc4:	401a      	ands	r2, r3
   16bc6:	2300      	movs	r3, #0
   16bc8:	4694      	mov	ip, r2
   16bca:	4698      	mov	r8, r3
   16bcc:	2200      	movs	r2, #0
   16bce:	e5f7      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16bd0:	2102      	movs	r1, #2
   16bd2:	4249      	negs	r1, r1
   16bd4:	468c      	mov	ip, r1
   16bd6:	9d03      	ldr	r5, [sp, #12]
   16bd8:	44e3      	add	fp, ip
   16bda:	46ac      	mov	ip, r5
   16bdc:	44e2      	add	sl, ip
   16bde:	45aa      	cmp	sl, r5
   16be0:	41ad      	sbcs	r5, r5
   16be2:	426d      	negs	r5, r5
   16be4:	4445      	add	r5, r8
   16be6:	18ed      	adds	r5, r5, r3
   16be8:	1a2d      	subs	r5, r5, r0
   16bea:	e696      	b.n	1691a <__aeabi_ddiv+0x2f6>
   16bec:	1e8a      	subs	r2, r1, #2
   16bee:	9903      	ldr	r1, [sp, #12]
   16bf0:	004d      	lsls	r5, r1, #1
   16bf2:	428d      	cmp	r5, r1
   16bf4:	4189      	sbcs	r1, r1
   16bf6:	4249      	negs	r1, r1
   16bf8:	4441      	add	r1, r8
   16bfa:	1876      	adds	r6, r6, r1
   16bfc:	9503      	str	r5, [sp, #12]
   16bfe:	e78f      	b.n	16b20 <__aeabi_ddiv+0x4fc>
   16c00:	201f      	movs	r0, #31
   16c02:	4240      	negs	r0, r0
   16c04:	1ac3      	subs	r3, r0, r3
   16c06:	4658      	mov	r0, fp
   16c08:	40d8      	lsrs	r0, r3
   16c0a:	0003      	movs	r3, r0
   16c0c:	2a20      	cmp	r2, #32
   16c0e:	d028      	beq.n	16c62 <__aeabi_ddiv+0x63e>
   16c10:	2040      	movs	r0, #64	; 0x40
   16c12:	465d      	mov	r5, fp
   16c14:	1a82      	subs	r2, r0, r2
   16c16:	4095      	lsls	r5, r2
   16c18:	4329      	orrs	r1, r5
   16c1a:	1e4a      	subs	r2, r1, #1
   16c1c:	4191      	sbcs	r1, r2
   16c1e:	4319      	orrs	r1, r3
   16c20:	2307      	movs	r3, #7
   16c22:	2200      	movs	r2, #0
   16c24:	400b      	ands	r3, r1
   16c26:	d009      	beq.n	16c3c <__aeabi_ddiv+0x618>
   16c28:	230f      	movs	r3, #15
   16c2a:	2200      	movs	r2, #0
   16c2c:	400b      	ands	r3, r1
   16c2e:	0008      	movs	r0, r1
   16c30:	2b04      	cmp	r3, #4
   16c32:	d1bd      	bne.n	16bb0 <__aeabi_ddiv+0x58c>
   16c34:	0001      	movs	r1, r0
   16c36:	0753      	lsls	r3, r2, #29
   16c38:	0252      	lsls	r2, r2, #9
   16c3a:	0b12      	lsrs	r2, r2, #12
   16c3c:	08c9      	lsrs	r1, r1, #3
   16c3e:	4319      	orrs	r1, r3
   16c40:	2301      	movs	r3, #1
   16c42:	4688      	mov	r8, r1
   16c44:	9902      	ldr	r1, [sp, #8]
   16c46:	2400      	movs	r4, #0
   16c48:	4019      	ands	r1, r3
   16c4a:	468c      	mov	ip, r1
   16c4c:	e5b8      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16c4e:	4552      	cmp	r2, sl
   16c50:	d8be      	bhi.n	16bd0 <__aeabi_ddiv+0x5ac>
   16c52:	468b      	mov	fp, r1
   16c54:	2500      	movs	r5, #0
   16c56:	e660      	b.n	1691a <__aeabi_ddiv+0x2f6>
   16c58:	9d03      	ldr	r5, [sp, #12]
   16c5a:	429d      	cmp	r5, r3
   16c5c:	d3c6      	bcc.n	16bec <__aeabi_ddiv+0x5c8>
   16c5e:	0011      	movs	r1, r2
   16c60:	e762      	b.n	16b28 <__aeabi_ddiv+0x504>
   16c62:	2500      	movs	r5, #0
   16c64:	e7d8      	b.n	16c18 <__aeabi_ddiv+0x5f4>
   16c66:	2280      	movs	r2, #128	; 0x80
   16c68:	465b      	mov	r3, fp
   16c6a:	0312      	lsls	r2, r2, #12
   16c6c:	431a      	orrs	r2, r3
   16c6e:	9b01      	ldr	r3, [sp, #4]
   16c70:	0312      	lsls	r2, r2, #12
   16c72:	0b12      	lsrs	r2, r2, #12
   16c74:	469c      	mov	ip, r3
   16c76:	4688      	mov	r8, r1
   16c78:	4c03      	ldr	r4, [pc, #12]	; (16c88 <__aeabi_ddiv+0x664>)
   16c7a:	e5a1      	b.n	167c0 <__aeabi_ddiv+0x19c>
   16c7c:	000003ff 	.word	0x000003ff
   16c80:	feffffff 	.word	0xfeffffff
   16c84:	000007fe 	.word	0x000007fe
   16c88:	000007ff 	.word	0x000007ff

00016c8c <__eqdf2>:
   16c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c8e:	464f      	mov	r7, r9
   16c90:	4646      	mov	r6, r8
   16c92:	46d6      	mov	lr, sl
   16c94:	005c      	lsls	r4, r3, #1
   16c96:	b5c0      	push	{r6, r7, lr}
   16c98:	031f      	lsls	r7, r3, #12
   16c9a:	0fdb      	lsrs	r3, r3, #31
   16c9c:	469a      	mov	sl, r3
   16c9e:	4b17      	ldr	r3, [pc, #92]	; (16cfc <__eqdf2+0x70>)
   16ca0:	030e      	lsls	r6, r1, #12
   16ca2:	004d      	lsls	r5, r1, #1
   16ca4:	4684      	mov	ip, r0
   16ca6:	4680      	mov	r8, r0
   16ca8:	0b36      	lsrs	r6, r6, #12
   16caa:	0d6d      	lsrs	r5, r5, #21
   16cac:	0fc9      	lsrs	r1, r1, #31
   16cae:	4691      	mov	r9, r2
   16cb0:	0b3f      	lsrs	r7, r7, #12
   16cb2:	0d64      	lsrs	r4, r4, #21
   16cb4:	2001      	movs	r0, #1
   16cb6:	429d      	cmp	r5, r3
   16cb8:	d008      	beq.n	16ccc <__eqdf2+0x40>
   16cba:	429c      	cmp	r4, r3
   16cbc:	d001      	beq.n	16cc2 <__eqdf2+0x36>
   16cbe:	42a5      	cmp	r5, r4
   16cc0:	d00b      	beq.n	16cda <__eqdf2+0x4e>
   16cc2:	bc1c      	pop	{r2, r3, r4}
   16cc4:	4690      	mov	r8, r2
   16cc6:	4699      	mov	r9, r3
   16cc8:	46a2      	mov	sl, r4
   16cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ccc:	4663      	mov	r3, ip
   16cce:	4333      	orrs	r3, r6
   16cd0:	d1f7      	bne.n	16cc2 <__eqdf2+0x36>
   16cd2:	42ac      	cmp	r4, r5
   16cd4:	d1f5      	bne.n	16cc2 <__eqdf2+0x36>
   16cd6:	433a      	orrs	r2, r7
   16cd8:	d1f3      	bne.n	16cc2 <__eqdf2+0x36>
   16cda:	2001      	movs	r0, #1
   16cdc:	42be      	cmp	r6, r7
   16cde:	d1f0      	bne.n	16cc2 <__eqdf2+0x36>
   16ce0:	45c8      	cmp	r8, r9
   16ce2:	d1ee      	bne.n	16cc2 <__eqdf2+0x36>
   16ce4:	4551      	cmp	r1, sl
   16ce6:	d007      	beq.n	16cf8 <__eqdf2+0x6c>
   16ce8:	2d00      	cmp	r5, #0
   16cea:	d1ea      	bne.n	16cc2 <__eqdf2+0x36>
   16cec:	4663      	mov	r3, ip
   16cee:	431e      	orrs	r6, r3
   16cf0:	0030      	movs	r0, r6
   16cf2:	1e46      	subs	r6, r0, #1
   16cf4:	41b0      	sbcs	r0, r6
   16cf6:	e7e4      	b.n	16cc2 <__eqdf2+0x36>
   16cf8:	2000      	movs	r0, #0
   16cfa:	e7e2      	b.n	16cc2 <__eqdf2+0x36>
   16cfc:	000007ff 	.word	0x000007ff

00016d00 <__gedf2>:
   16d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d02:	4645      	mov	r5, r8
   16d04:	46de      	mov	lr, fp
   16d06:	4657      	mov	r7, sl
   16d08:	464e      	mov	r6, r9
   16d0a:	b5e0      	push	{r5, r6, r7, lr}
   16d0c:	031f      	lsls	r7, r3, #12
   16d0e:	0b3d      	lsrs	r5, r7, #12
   16d10:	4f2c      	ldr	r7, [pc, #176]	; (16dc4 <__gedf2+0xc4>)
   16d12:	030e      	lsls	r6, r1, #12
   16d14:	004c      	lsls	r4, r1, #1
   16d16:	46ab      	mov	fp, r5
   16d18:	005d      	lsls	r5, r3, #1
   16d1a:	4684      	mov	ip, r0
   16d1c:	0b36      	lsrs	r6, r6, #12
   16d1e:	0d64      	lsrs	r4, r4, #21
   16d20:	0fc9      	lsrs	r1, r1, #31
   16d22:	4690      	mov	r8, r2
   16d24:	0d6d      	lsrs	r5, r5, #21
   16d26:	0fdb      	lsrs	r3, r3, #31
   16d28:	42bc      	cmp	r4, r7
   16d2a:	d02a      	beq.n	16d82 <__gedf2+0x82>
   16d2c:	4f25      	ldr	r7, [pc, #148]	; (16dc4 <__gedf2+0xc4>)
   16d2e:	42bd      	cmp	r5, r7
   16d30:	d02d      	beq.n	16d8e <__gedf2+0x8e>
   16d32:	2c00      	cmp	r4, #0
   16d34:	d10f      	bne.n	16d56 <__gedf2+0x56>
   16d36:	4330      	orrs	r0, r6
   16d38:	0007      	movs	r7, r0
   16d3a:	4681      	mov	r9, r0
   16d3c:	4278      	negs	r0, r7
   16d3e:	4178      	adcs	r0, r7
   16d40:	b2c0      	uxtb	r0, r0
   16d42:	2d00      	cmp	r5, #0
   16d44:	d117      	bne.n	16d76 <__gedf2+0x76>
   16d46:	465f      	mov	r7, fp
   16d48:	433a      	orrs	r2, r7
   16d4a:	d114      	bne.n	16d76 <__gedf2+0x76>
   16d4c:	464b      	mov	r3, r9
   16d4e:	2000      	movs	r0, #0
   16d50:	2b00      	cmp	r3, #0
   16d52:	d00a      	beq.n	16d6a <__gedf2+0x6a>
   16d54:	e006      	b.n	16d64 <__gedf2+0x64>
   16d56:	2d00      	cmp	r5, #0
   16d58:	d102      	bne.n	16d60 <__gedf2+0x60>
   16d5a:	4658      	mov	r0, fp
   16d5c:	4302      	orrs	r2, r0
   16d5e:	d001      	beq.n	16d64 <__gedf2+0x64>
   16d60:	4299      	cmp	r1, r3
   16d62:	d018      	beq.n	16d96 <__gedf2+0x96>
   16d64:	4248      	negs	r0, r1
   16d66:	2101      	movs	r1, #1
   16d68:	4308      	orrs	r0, r1
   16d6a:	bc3c      	pop	{r2, r3, r4, r5}
   16d6c:	4690      	mov	r8, r2
   16d6e:	4699      	mov	r9, r3
   16d70:	46a2      	mov	sl, r4
   16d72:	46ab      	mov	fp, r5
   16d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d76:	2800      	cmp	r0, #0
   16d78:	d0f2      	beq.n	16d60 <__gedf2+0x60>
   16d7a:	2001      	movs	r0, #1
   16d7c:	3b01      	subs	r3, #1
   16d7e:	4318      	orrs	r0, r3
   16d80:	e7f3      	b.n	16d6a <__gedf2+0x6a>
   16d82:	0037      	movs	r7, r6
   16d84:	4307      	orrs	r7, r0
   16d86:	d0d1      	beq.n	16d2c <__gedf2+0x2c>
   16d88:	2002      	movs	r0, #2
   16d8a:	4240      	negs	r0, r0
   16d8c:	e7ed      	b.n	16d6a <__gedf2+0x6a>
   16d8e:	465f      	mov	r7, fp
   16d90:	4317      	orrs	r7, r2
   16d92:	d0ce      	beq.n	16d32 <__gedf2+0x32>
   16d94:	e7f8      	b.n	16d88 <__gedf2+0x88>
   16d96:	42ac      	cmp	r4, r5
   16d98:	dce4      	bgt.n	16d64 <__gedf2+0x64>
   16d9a:	da03      	bge.n	16da4 <__gedf2+0xa4>
   16d9c:	1e48      	subs	r0, r1, #1
   16d9e:	2101      	movs	r1, #1
   16da0:	4308      	orrs	r0, r1
   16da2:	e7e2      	b.n	16d6a <__gedf2+0x6a>
   16da4:	455e      	cmp	r6, fp
   16da6:	d8dd      	bhi.n	16d64 <__gedf2+0x64>
   16da8:	d006      	beq.n	16db8 <__gedf2+0xb8>
   16daa:	2000      	movs	r0, #0
   16dac:	455e      	cmp	r6, fp
   16dae:	d2dc      	bcs.n	16d6a <__gedf2+0x6a>
   16db0:	2301      	movs	r3, #1
   16db2:	1e48      	subs	r0, r1, #1
   16db4:	4318      	orrs	r0, r3
   16db6:	e7d8      	b.n	16d6a <__gedf2+0x6a>
   16db8:	45c4      	cmp	ip, r8
   16dba:	d8d3      	bhi.n	16d64 <__gedf2+0x64>
   16dbc:	2000      	movs	r0, #0
   16dbe:	45c4      	cmp	ip, r8
   16dc0:	d3f6      	bcc.n	16db0 <__gedf2+0xb0>
   16dc2:	e7d2      	b.n	16d6a <__gedf2+0x6a>
   16dc4:	000007ff 	.word	0x000007ff

00016dc8 <__ledf2>:
   16dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16dca:	464e      	mov	r6, r9
   16dcc:	4645      	mov	r5, r8
   16dce:	46de      	mov	lr, fp
   16dd0:	4657      	mov	r7, sl
   16dd2:	005c      	lsls	r4, r3, #1
   16dd4:	b5e0      	push	{r5, r6, r7, lr}
   16dd6:	031f      	lsls	r7, r3, #12
   16dd8:	0fdb      	lsrs	r3, r3, #31
   16dda:	4699      	mov	r9, r3
   16ddc:	4b2a      	ldr	r3, [pc, #168]	; (16e88 <__ledf2+0xc0>)
   16dde:	030e      	lsls	r6, r1, #12
   16de0:	004d      	lsls	r5, r1, #1
   16de2:	0fc9      	lsrs	r1, r1, #31
   16de4:	4684      	mov	ip, r0
   16de6:	0b36      	lsrs	r6, r6, #12
   16de8:	0d6d      	lsrs	r5, r5, #21
   16dea:	468b      	mov	fp, r1
   16dec:	4690      	mov	r8, r2
   16dee:	0b3f      	lsrs	r7, r7, #12
   16df0:	0d64      	lsrs	r4, r4, #21
   16df2:	429d      	cmp	r5, r3
   16df4:	d020      	beq.n	16e38 <__ledf2+0x70>
   16df6:	4b24      	ldr	r3, [pc, #144]	; (16e88 <__ledf2+0xc0>)
   16df8:	429c      	cmp	r4, r3
   16dfa:	d022      	beq.n	16e42 <__ledf2+0x7a>
   16dfc:	2d00      	cmp	r5, #0
   16dfe:	d112      	bne.n	16e26 <__ledf2+0x5e>
   16e00:	4330      	orrs	r0, r6
   16e02:	4243      	negs	r3, r0
   16e04:	4143      	adcs	r3, r0
   16e06:	b2db      	uxtb	r3, r3
   16e08:	2c00      	cmp	r4, #0
   16e0a:	d01f      	beq.n	16e4c <__ledf2+0x84>
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	d00c      	beq.n	16e2a <__ledf2+0x62>
   16e10:	464b      	mov	r3, r9
   16e12:	2001      	movs	r0, #1
   16e14:	3b01      	subs	r3, #1
   16e16:	4303      	orrs	r3, r0
   16e18:	0018      	movs	r0, r3
   16e1a:	bc3c      	pop	{r2, r3, r4, r5}
   16e1c:	4690      	mov	r8, r2
   16e1e:	4699      	mov	r9, r3
   16e20:	46a2      	mov	sl, r4
   16e22:	46ab      	mov	fp, r5
   16e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e26:	2c00      	cmp	r4, #0
   16e28:	d016      	beq.n	16e58 <__ledf2+0x90>
   16e2a:	45cb      	cmp	fp, r9
   16e2c:	d017      	beq.n	16e5e <__ledf2+0x96>
   16e2e:	465b      	mov	r3, fp
   16e30:	4259      	negs	r1, r3
   16e32:	2301      	movs	r3, #1
   16e34:	430b      	orrs	r3, r1
   16e36:	e7ef      	b.n	16e18 <__ledf2+0x50>
   16e38:	0031      	movs	r1, r6
   16e3a:	2302      	movs	r3, #2
   16e3c:	4301      	orrs	r1, r0
   16e3e:	d1eb      	bne.n	16e18 <__ledf2+0x50>
   16e40:	e7d9      	b.n	16df6 <__ledf2+0x2e>
   16e42:	0039      	movs	r1, r7
   16e44:	2302      	movs	r3, #2
   16e46:	4311      	orrs	r1, r2
   16e48:	d1e6      	bne.n	16e18 <__ledf2+0x50>
   16e4a:	e7d7      	b.n	16dfc <__ledf2+0x34>
   16e4c:	433a      	orrs	r2, r7
   16e4e:	d1dd      	bne.n	16e0c <__ledf2+0x44>
   16e50:	2300      	movs	r3, #0
   16e52:	2800      	cmp	r0, #0
   16e54:	d0e0      	beq.n	16e18 <__ledf2+0x50>
   16e56:	e7ea      	b.n	16e2e <__ledf2+0x66>
   16e58:	433a      	orrs	r2, r7
   16e5a:	d1e6      	bne.n	16e2a <__ledf2+0x62>
   16e5c:	e7e7      	b.n	16e2e <__ledf2+0x66>
   16e5e:	42a5      	cmp	r5, r4
   16e60:	dce5      	bgt.n	16e2e <__ledf2+0x66>
   16e62:	db05      	blt.n	16e70 <__ledf2+0xa8>
   16e64:	42be      	cmp	r6, r7
   16e66:	d8e2      	bhi.n	16e2e <__ledf2+0x66>
   16e68:	d007      	beq.n	16e7a <__ledf2+0xb2>
   16e6a:	2300      	movs	r3, #0
   16e6c:	42be      	cmp	r6, r7
   16e6e:	d2d3      	bcs.n	16e18 <__ledf2+0x50>
   16e70:	4659      	mov	r1, fp
   16e72:	2301      	movs	r3, #1
   16e74:	3901      	subs	r1, #1
   16e76:	430b      	orrs	r3, r1
   16e78:	e7ce      	b.n	16e18 <__ledf2+0x50>
   16e7a:	45c4      	cmp	ip, r8
   16e7c:	d8d7      	bhi.n	16e2e <__ledf2+0x66>
   16e7e:	2300      	movs	r3, #0
   16e80:	45c4      	cmp	ip, r8
   16e82:	d3f5      	bcc.n	16e70 <__ledf2+0xa8>
   16e84:	e7c8      	b.n	16e18 <__ledf2+0x50>
   16e86:	46c0      	nop			; (mov r8, r8)
   16e88:	000007ff 	.word	0x000007ff

00016e8c <__aeabi_dmul>:
   16e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e8e:	4657      	mov	r7, sl
   16e90:	4645      	mov	r5, r8
   16e92:	46de      	mov	lr, fp
   16e94:	464e      	mov	r6, r9
   16e96:	b5e0      	push	{r5, r6, r7, lr}
   16e98:	030c      	lsls	r4, r1, #12
   16e9a:	4698      	mov	r8, r3
   16e9c:	004e      	lsls	r6, r1, #1
   16e9e:	0b23      	lsrs	r3, r4, #12
   16ea0:	b087      	sub	sp, #28
   16ea2:	0007      	movs	r7, r0
   16ea4:	4692      	mov	sl, r2
   16ea6:	469b      	mov	fp, r3
   16ea8:	0d76      	lsrs	r6, r6, #21
   16eaa:	0fcd      	lsrs	r5, r1, #31
   16eac:	2e00      	cmp	r6, #0
   16eae:	d06b      	beq.n	16f88 <__aeabi_dmul+0xfc>
   16eb0:	4b6d      	ldr	r3, [pc, #436]	; (17068 <__aeabi_dmul+0x1dc>)
   16eb2:	429e      	cmp	r6, r3
   16eb4:	d035      	beq.n	16f22 <__aeabi_dmul+0x96>
   16eb6:	2480      	movs	r4, #128	; 0x80
   16eb8:	465b      	mov	r3, fp
   16eba:	0f42      	lsrs	r2, r0, #29
   16ebc:	0424      	lsls	r4, r4, #16
   16ebe:	00db      	lsls	r3, r3, #3
   16ec0:	4314      	orrs	r4, r2
   16ec2:	431c      	orrs	r4, r3
   16ec4:	00c3      	lsls	r3, r0, #3
   16ec6:	4699      	mov	r9, r3
   16ec8:	4b68      	ldr	r3, [pc, #416]	; (1706c <__aeabi_dmul+0x1e0>)
   16eca:	46a3      	mov	fp, r4
   16ecc:	469c      	mov	ip, r3
   16ece:	2300      	movs	r3, #0
   16ed0:	2700      	movs	r7, #0
   16ed2:	4466      	add	r6, ip
   16ed4:	9302      	str	r3, [sp, #8]
   16ed6:	4643      	mov	r3, r8
   16ed8:	031c      	lsls	r4, r3, #12
   16eda:	005a      	lsls	r2, r3, #1
   16edc:	0fdb      	lsrs	r3, r3, #31
   16ede:	4650      	mov	r0, sl
   16ee0:	0b24      	lsrs	r4, r4, #12
   16ee2:	0d52      	lsrs	r2, r2, #21
   16ee4:	4698      	mov	r8, r3
   16ee6:	d100      	bne.n	16eea <__aeabi_dmul+0x5e>
   16ee8:	e076      	b.n	16fd8 <__aeabi_dmul+0x14c>
   16eea:	4b5f      	ldr	r3, [pc, #380]	; (17068 <__aeabi_dmul+0x1dc>)
   16eec:	429a      	cmp	r2, r3
   16eee:	d06d      	beq.n	16fcc <__aeabi_dmul+0x140>
   16ef0:	2380      	movs	r3, #128	; 0x80
   16ef2:	0f41      	lsrs	r1, r0, #29
   16ef4:	041b      	lsls	r3, r3, #16
   16ef6:	430b      	orrs	r3, r1
   16ef8:	495c      	ldr	r1, [pc, #368]	; (1706c <__aeabi_dmul+0x1e0>)
   16efa:	00e4      	lsls	r4, r4, #3
   16efc:	468c      	mov	ip, r1
   16efe:	431c      	orrs	r4, r3
   16f00:	00c3      	lsls	r3, r0, #3
   16f02:	2000      	movs	r0, #0
   16f04:	4462      	add	r2, ip
   16f06:	4641      	mov	r1, r8
   16f08:	18b6      	adds	r6, r6, r2
   16f0a:	4069      	eors	r1, r5
   16f0c:	1c72      	adds	r2, r6, #1
   16f0e:	9101      	str	r1, [sp, #4]
   16f10:	4694      	mov	ip, r2
   16f12:	4307      	orrs	r7, r0
   16f14:	2f0f      	cmp	r7, #15
   16f16:	d900      	bls.n	16f1a <__aeabi_dmul+0x8e>
   16f18:	e0b0      	b.n	1707c <__aeabi_dmul+0x1f0>
   16f1a:	4a55      	ldr	r2, [pc, #340]	; (17070 <__aeabi_dmul+0x1e4>)
   16f1c:	00bf      	lsls	r7, r7, #2
   16f1e:	59d2      	ldr	r2, [r2, r7]
   16f20:	4697      	mov	pc, r2
   16f22:	465b      	mov	r3, fp
   16f24:	4303      	orrs	r3, r0
   16f26:	4699      	mov	r9, r3
   16f28:	d000      	beq.n	16f2c <__aeabi_dmul+0xa0>
   16f2a:	e087      	b.n	1703c <__aeabi_dmul+0x1b0>
   16f2c:	2300      	movs	r3, #0
   16f2e:	469b      	mov	fp, r3
   16f30:	3302      	adds	r3, #2
   16f32:	2708      	movs	r7, #8
   16f34:	9302      	str	r3, [sp, #8]
   16f36:	e7ce      	b.n	16ed6 <__aeabi_dmul+0x4a>
   16f38:	4642      	mov	r2, r8
   16f3a:	9201      	str	r2, [sp, #4]
   16f3c:	2802      	cmp	r0, #2
   16f3e:	d067      	beq.n	17010 <__aeabi_dmul+0x184>
   16f40:	2803      	cmp	r0, #3
   16f42:	d100      	bne.n	16f46 <__aeabi_dmul+0xba>
   16f44:	e20e      	b.n	17364 <__aeabi_dmul+0x4d8>
   16f46:	2801      	cmp	r0, #1
   16f48:	d000      	beq.n	16f4c <__aeabi_dmul+0xc0>
   16f4a:	e162      	b.n	17212 <__aeabi_dmul+0x386>
   16f4c:	2300      	movs	r3, #0
   16f4e:	2400      	movs	r4, #0
   16f50:	2200      	movs	r2, #0
   16f52:	4699      	mov	r9, r3
   16f54:	9901      	ldr	r1, [sp, #4]
   16f56:	4001      	ands	r1, r0
   16f58:	b2cd      	uxtb	r5, r1
   16f5a:	2100      	movs	r1, #0
   16f5c:	0312      	lsls	r2, r2, #12
   16f5e:	0d0b      	lsrs	r3, r1, #20
   16f60:	0b12      	lsrs	r2, r2, #12
   16f62:	051b      	lsls	r3, r3, #20
   16f64:	4313      	orrs	r3, r2
   16f66:	4a43      	ldr	r2, [pc, #268]	; (17074 <__aeabi_dmul+0x1e8>)
   16f68:	0524      	lsls	r4, r4, #20
   16f6a:	4013      	ands	r3, r2
   16f6c:	431c      	orrs	r4, r3
   16f6e:	0064      	lsls	r4, r4, #1
   16f70:	07ed      	lsls	r5, r5, #31
   16f72:	0864      	lsrs	r4, r4, #1
   16f74:	432c      	orrs	r4, r5
   16f76:	4648      	mov	r0, r9
   16f78:	0021      	movs	r1, r4
   16f7a:	b007      	add	sp, #28
   16f7c:	bc3c      	pop	{r2, r3, r4, r5}
   16f7e:	4690      	mov	r8, r2
   16f80:	4699      	mov	r9, r3
   16f82:	46a2      	mov	sl, r4
   16f84:	46ab      	mov	fp, r5
   16f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f88:	4303      	orrs	r3, r0
   16f8a:	4699      	mov	r9, r3
   16f8c:	d04f      	beq.n	1702e <__aeabi_dmul+0x1a2>
   16f8e:	465b      	mov	r3, fp
   16f90:	2b00      	cmp	r3, #0
   16f92:	d100      	bne.n	16f96 <__aeabi_dmul+0x10a>
   16f94:	e189      	b.n	172aa <__aeabi_dmul+0x41e>
   16f96:	4658      	mov	r0, fp
   16f98:	f000 fe2e 	bl	17bf8 <__clzsi2>
   16f9c:	0003      	movs	r3, r0
   16f9e:	3b0b      	subs	r3, #11
   16fa0:	2b1c      	cmp	r3, #28
   16fa2:	dd00      	ble.n	16fa6 <__aeabi_dmul+0x11a>
   16fa4:	e17a      	b.n	1729c <__aeabi_dmul+0x410>
   16fa6:	221d      	movs	r2, #29
   16fa8:	1ad3      	subs	r3, r2, r3
   16faa:	003a      	movs	r2, r7
   16fac:	0001      	movs	r1, r0
   16fae:	465c      	mov	r4, fp
   16fb0:	40da      	lsrs	r2, r3
   16fb2:	3908      	subs	r1, #8
   16fb4:	408c      	lsls	r4, r1
   16fb6:	0013      	movs	r3, r2
   16fb8:	408f      	lsls	r7, r1
   16fba:	4323      	orrs	r3, r4
   16fbc:	469b      	mov	fp, r3
   16fbe:	46b9      	mov	r9, r7
   16fc0:	2300      	movs	r3, #0
   16fc2:	4e2d      	ldr	r6, [pc, #180]	; (17078 <__aeabi_dmul+0x1ec>)
   16fc4:	2700      	movs	r7, #0
   16fc6:	1a36      	subs	r6, r6, r0
   16fc8:	9302      	str	r3, [sp, #8]
   16fca:	e784      	b.n	16ed6 <__aeabi_dmul+0x4a>
   16fcc:	4653      	mov	r3, sl
   16fce:	4323      	orrs	r3, r4
   16fd0:	d12a      	bne.n	17028 <__aeabi_dmul+0x19c>
   16fd2:	2400      	movs	r4, #0
   16fd4:	2002      	movs	r0, #2
   16fd6:	e796      	b.n	16f06 <__aeabi_dmul+0x7a>
   16fd8:	4653      	mov	r3, sl
   16fda:	4323      	orrs	r3, r4
   16fdc:	d020      	beq.n	17020 <__aeabi_dmul+0x194>
   16fde:	2c00      	cmp	r4, #0
   16fe0:	d100      	bne.n	16fe4 <__aeabi_dmul+0x158>
   16fe2:	e157      	b.n	17294 <__aeabi_dmul+0x408>
   16fe4:	0020      	movs	r0, r4
   16fe6:	f000 fe07 	bl	17bf8 <__clzsi2>
   16fea:	0003      	movs	r3, r0
   16fec:	3b0b      	subs	r3, #11
   16fee:	2b1c      	cmp	r3, #28
   16ff0:	dd00      	ble.n	16ff4 <__aeabi_dmul+0x168>
   16ff2:	e149      	b.n	17288 <__aeabi_dmul+0x3fc>
   16ff4:	211d      	movs	r1, #29
   16ff6:	1acb      	subs	r3, r1, r3
   16ff8:	4651      	mov	r1, sl
   16ffa:	0002      	movs	r2, r0
   16ffc:	40d9      	lsrs	r1, r3
   16ffe:	4653      	mov	r3, sl
   17000:	3a08      	subs	r2, #8
   17002:	4094      	lsls	r4, r2
   17004:	4093      	lsls	r3, r2
   17006:	430c      	orrs	r4, r1
   17008:	4a1b      	ldr	r2, [pc, #108]	; (17078 <__aeabi_dmul+0x1ec>)
   1700a:	1a12      	subs	r2, r2, r0
   1700c:	2000      	movs	r0, #0
   1700e:	e77a      	b.n	16f06 <__aeabi_dmul+0x7a>
   17010:	2501      	movs	r5, #1
   17012:	9b01      	ldr	r3, [sp, #4]
   17014:	4c14      	ldr	r4, [pc, #80]	; (17068 <__aeabi_dmul+0x1dc>)
   17016:	401d      	ands	r5, r3
   17018:	2300      	movs	r3, #0
   1701a:	2200      	movs	r2, #0
   1701c:	4699      	mov	r9, r3
   1701e:	e79c      	b.n	16f5a <__aeabi_dmul+0xce>
   17020:	2400      	movs	r4, #0
   17022:	2200      	movs	r2, #0
   17024:	2001      	movs	r0, #1
   17026:	e76e      	b.n	16f06 <__aeabi_dmul+0x7a>
   17028:	4653      	mov	r3, sl
   1702a:	2003      	movs	r0, #3
   1702c:	e76b      	b.n	16f06 <__aeabi_dmul+0x7a>
   1702e:	2300      	movs	r3, #0
   17030:	469b      	mov	fp, r3
   17032:	3301      	adds	r3, #1
   17034:	2704      	movs	r7, #4
   17036:	2600      	movs	r6, #0
   17038:	9302      	str	r3, [sp, #8]
   1703a:	e74c      	b.n	16ed6 <__aeabi_dmul+0x4a>
   1703c:	2303      	movs	r3, #3
   1703e:	4681      	mov	r9, r0
   17040:	270c      	movs	r7, #12
   17042:	9302      	str	r3, [sp, #8]
   17044:	e747      	b.n	16ed6 <__aeabi_dmul+0x4a>
   17046:	2280      	movs	r2, #128	; 0x80
   17048:	2300      	movs	r3, #0
   1704a:	2500      	movs	r5, #0
   1704c:	0312      	lsls	r2, r2, #12
   1704e:	4699      	mov	r9, r3
   17050:	4c05      	ldr	r4, [pc, #20]	; (17068 <__aeabi_dmul+0x1dc>)
   17052:	e782      	b.n	16f5a <__aeabi_dmul+0xce>
   17054:	465c      	mov	r4, fp
   17056:	464b      	mov	r3, r9
   17058:	9802      	ldr	r0, [sp, #8]
   1705a:	e76f      	b.n	16f3c <__aeabi_dmul+0xb0>
   1705c:	465c      	mov	r4, fp
   1705e:	464b      	mov	r3, r9
   17060:	9501      	str	r5, [sp, #4]
   17062:	9802      	ldr	r0, [sp, #8]
   17064:	e76a      	b.n	16f3c <__aeabi_dmul+0xb0>
   17066:	46c0      	nop			; (mov r8, r8)
   17068:	000007ff 	.word	0x000007ff
   1706c:	fffffc01 	.word	0xfffffc01
   17070:	00019c10 	.word	0x00019c10
   17074:	800fffff 	.word	0x800fffff
   17078:	fffffc0d 	.word	0xfffffc0d
   1707c:	464a      	mov	r2, r9
   1707e:	4649      	mov	r1, r9
   17080:	0c17      	lsrs	r7, r2, #16
   17082:	0c1a      	lsrs	r2, r3, #16
   17084:	041b      	lsls	r3, r3, #16
   17086:	0c1b      	lsrs	r3, r3, #16
   17088:	0408      	lsls	r0, r1, #16
   1708a:	0019      	movs	r1, r3
   1708c:	0c00      	lsrs	r0, r0, #16
   1708e:	4341      	muls	r1, r0
   17090:	0015      	movs	r5, r2
   17092:	4688      	mov	r8, r1
   17094:	0019      	movs	r1, r3
   17096:	437d      	muls	r5, r7
   17098:	4379      	muls	r1, r7
   1709a:	9503      	str	r5, [sp, #12]
   1709c:	4689      	mov	r9, r1
   1709e:	0029      	movs	r1, r5
   170a0:	0015      	movs	r5, r2
   170a2:	4345      	muls	r5, r0
   170a4:	444d      	add	r5, r9
   170a6:	9502      	str	r5, [sp, #8]
   170a8:	4645      	mov	r5, r8
   170aa:	0c2d      	lsrs	r5, r5, #16
   170ac:	46aa      	mov	sl, r5
   170ae:	9d02      	ldr	r5, [sp, #8]
   170b0:	4455      	add	r5, sl
   170b2:	45a9      	cmp	r9, r5
   170b4:	d906      	bls.n	170c4 <__aeabi_dmul+0x238>
   170b6:	468a      	mov	sl, r1
   170b8:	2180      	movs	r1, #128	; 0x80
   170ba:	0249      	lsls	r1, r1, #9
   170bc:	4689      	mov	r9, r1
   170be:	44ca      	add	sl, r9
   170c0:	4651      	mov	r1, sl
   170c2:	9103      	str	r1, [sp, #12]
   170c4:	0c29      	lsrs	r1, r5, #16
   170c6:	9104      	str	r1, [sp, #16]
   170c8:	4641      	mov	r1, r8
   170ca:	0409      	lsls	r1, r1, #16
   170cc:	042d      	lsls	r5, r5, #16
   170ce:	0c09      	lsrs	r1, r1, #16
   170d0:	4688      	mov	r8, r1
   170d2:	0029      	movs	r1, r5
   170d4:	0c25      	lsrs	r5, r4, #16
   170d6:	0424      	lsls	r4, r4, #16
   170d8:	4441      	add	r1, r8
   170da:	0c24      	lsrs	r4, r4, #16
   170dc:	9105      	str	r1, [sp, #20]
   170de:	0021      	movs	r1, r4
   170e0:	4341      	muls	r1, r0
   170e2:	4688      	mov	r8, r1
   170e4:	0021      	movs	r1, r4
   170e6:	4379      	muls	r1, r7
   170e8:	468a      	mov	sl, r1
   170ea:	4368      	muls	r0, r5
   170ec:	4641      	mov	r1, r8
   170ee:	4450      	add	r0, sl
   170f0:	4681      	mov	r9, r0
   170f2:	0c08      	lsrs	r0, r1, #16
   170f4:	4448      	add	r0, r9
   170f6:	436f      	muls	r7, r5
   170f8:	4582      	cmp	sl, r0
   170fa:	d903      	bls.n	17104 <__aeabi_dmul+0x278>
   170fc:	2180      	movs	r1, #128	; 0x80
   170fe:	0249      	lsls	r1, r1, #9
   17100:	4689      	mov	r9, r1
   17102:	444f      	add	r7, r9
   17104:	0c01      	lsrs	r1, r0, #16
   17106:	4689      	mov	r9, r1
   17108:	0039      	movs	r1, r7
   1710a:	4449      	add	r1, r9
   1710c:	9102      	str	r1, [sp, #8]
   1710e:	4641      	mov	r1, r8
   17110:	040f      	lsls	r7, r1, #16
   17112:	9904      	ldr	r1, [sp, #16]
   17114:	0c3f      	lsrs	r7, r7, #16
   17116:	4688      	mov	r8, r1
   17118:	0400      	lsls	r0, r0, #16
   1711a:	19c0      	adds	r0, r0, r7
   1711c:	4480      	add	r8, r0
   1711e:	4641      	mov	r1, r8
   17120:	9104      	str	r1, [sp, #16]
   17122:	4659      	mov	r1, fp
   17124:	0c0f      	lsrs	r7, r1, #16
   17126:	0409      	lsls	r1, r1, #16
   17128:	0c09      	lsrs	r1, r1, #16
   1712a:	4688      	mov	r8, r1
   1712c:	4359      	muls	r1, r3
   1712e:	468a      	mov	sl, r1
   17130:	0039      	movs	r1, r7
   17132:	4351      	muls	r1, r2
   17134:	4689      	mov	r9, r1
   17136:	4641      	mov	r1, r8
   17138:	434a      	muls	r2, r1
   1713a:	4651      	mov	r1, sl
   1713c:	0c09      	lsrs	r1, r1, #16
   1713e:	468b      	mov	fp, r1
   17140:	437b      	muls	r3, r7
   17142:	18d2      	adds	r2, r2, r3
   17144:	445a      	add	r2, fp
   17146:	4293      	cmp	r3, r2
   17148:	d903      	bls.n	17152 <__aeabi_dmul+0x2c6>
   1714a:	2380      	movs	r3, #128	; 0x80
   1714c:	025b      	lsls	r3, r3, #9
   1714e:	469b      	mov	fp, r3
   17150:	44d9      	add	r9, fp
   17152:	4651      	mov	r1, sl
   17154:	0409      	lsls	r1, r1, #16
   17156:	0c09      	lsrs	r1, r1, #16
   17158:	468a      	mov	sl, r1
   1715a:	4641      	mov	r1, r8
   1715c:	4361      	muls	r1, r4
   1715e:	437c      	muls	r4, r7
   17160:	0c13      	lsrs	r3, r2, #16
   17162:	0412      	lsls	r2, r2, #16
   17164:	444b      	add	r3, r9
   17166:	4452      	add	r2, sl
   17168:	46a1      	mov	r9, r4
   1716a:	468a      	mov	sl, r1
   1716c:	003c      	movs	r4, r7
   1716e:	4641      	mov	r1, r8
   17170:	436c      	muls	r4, r5
   17172:	434d      	muls	r5, r1
   17174:	4651      	mov	r1, sl
   17176:	444d      	add	r5, r9
   17178:	0c0f      	lsrs	r7, r1, #16
   1717a:	197d      	adds	r5, r7, r5
   1717c:	45a9      	cmp	r9, r5
   1717e:	d903      	bls.n	17188 <__aeabi_dmul+0x2fc>
   17180:	2180      	movs	r1, #128	; 0x80
   17182:	0249      	lsls	r1, r1, #9
   17184:	4688      	mov	r8, r1
   17186:	4444      	add	r4, r8
   17188:	9f04      	ldr	r7, [sp, #16]
   1718a:	9903      	ldr	r1, [sp, #12]
   1718c:	46b8      	mov	r8, r7
   1718e:	4441      	add	r1, r8
   17190:	468b      	mov	fp, r1
   17192:	4583      	cmp	fp, r0
   17194:	4180      	sbcs	r0, r0
   17196:	4241      	negs	r1, r0
   17198:	4688      	mov	r8, r1
   1719a:	4651      	mov	r1, sl
   1719c:	0408      	lsls	r0, r1, #16
   1719e:	042f      	lsls	r7, r5, #16
   171a0:	0c00      	lsrs	r0, r0, #16
   171a2:	183f      	adds	r7, r7, r0
   171a4:	4658      	mov	r0, fp
   171a6:	9902      	ldr	r1, [sp, #8]
   171a8:	1810      	adds	r0, r2, r0
   171aa:	4689      	mov	r9, r1
   171ac:	4290      	cmp	r0, r2
   171ae:	4192      	sbcs	r2, r2
   171b0:	444f      	add	r7, r9
   171b2:	46ba      	mov	sl, r7
   171b4:	4252      	negs	r2, r2
   171b6:	4699      	mov	r9, r3
   171b8:	4693      	mov	fp, r2
   171ba:	44c2      	add	sl, r8
   171bc:	44d1      	add	r9, sl
   171be:	44cb      	add	fp, r9
   171c0:	428f      	cmp	r7, r1
   171c2:	41bf      	sbcs	r7, r7
   171c4:	45c2      	cmp	sl, r8
   171c6:	4189      	sbcs	r1, r1
   171c8:	4599      	cmp	r9, r3
   171ca:	419b      	sbcs	r3, r3
   171cc:	4593      	cmp	fp, r2
   171ce:	4192      	sbcs	r2, r2
   171d0:	427f      	negs	r7, r7
   171d2:	4249      	negs	r1, r1
   171d4:	0c2d      	lsrs	r5, r5, #16
   171d6:	4252      	negs	r2, r2
   171d8:	430f      	orrs	r7, r1
   171da:	425b      	negs	r3, r3
   171dc:	4313      	orrs	r3, r2
   171de:	197f      	adds	r7, r7, r5
   171e0:	18ff      	adds	r7, r7, r3
   171e2:	465b      	mov	r3, fp
   171e4:	193c      	adds	r4, r7, r4
   171e6:	0ddb      	lsrs	r3, r3, #23
   171e8:	9a05      	ldr	r2, [sp, #20]
   171ea:	0264      	lsls	r4, r4, #9
   171ec:	431c      	orrs	r4, r3
   171ee:	0243      	lsls	r3, r0, #9
   171f0:	4313      	orrs	r3, r2
   171f2:	1e5d      	subs	r5, r3, #1
   171f4:	41ab      	sbcs	r3, r5
   171f6:	465a      	mov	r2, fp
   171f8:	0dc0      	lsrs	r0, r0, #23
   171fa:	4303      	orrs	r3, r0
   171fc:	0252      	lsls	r2, r2, #9
   171fe:	4313      	orrs	r3, r2
   17200:	01e2      	lsls	r2, r4, #7
   17202:	d556      	bpl.n	172b2 <__aeabi_dmul+0x426>
   17204:	2001      	movs	r0, #1
   17206:	085a      	lsrs	r2, r3, #1
   17208:	4003      	ands	r3, r0
   1720a:	4313      	orrs	r3, r2
   1720c:	07e2      	lsls	r2, r4, #31
   1720e:	4313      	orrs	r3, r2
   17210:	0864      	lsrs	r4, r4, #1
   17212:	485a      	ldr	r0, [pc, #360]	; (1737c <__aeabi_dmul+0x4f0>)
   17214:	4460      	add	r0, ip
   17216:	2800      	cmp	r0, #0
   17218:	dd4d      	ble.n	172b6 <__aeabi_dmul+0x42a>
   1721a:	075a      	lsls	r2, r3, #29
   1721c:	d009      	beq.n	17232 <__aeabi_dmul+0x3a6>
   1721e:	220f      	movs	r2, #15
   17220:	401a      	ands	r2, r3
   17222:	2a04      	cmp	r2, #4
   17224:	d005      	beq.n	17232 <__aeabi_dmul+0x3a6>
   17226:	1d1a      	adds	r2, r3, #4
   17228:	429a      	cmp	r2, r3
   1722a:	419b      	sbcs	r3, r3
   1722c:	425b      	negs	r3, r3
   1722e:	18e4      	adds	r4, r4, r3
   17230:	0013      	movs	r3, r2
   17232:	01e2      	lsls	r2, r4, #7
   17234:	d504      	bpl.n	17240 <__aeabi_dmul+0x3b4>
   17236:	2080      	movs	r0, #128	; 0x80
   17238:	4a51      	ldr	r2, [pc, #324]	; (17380 <__aeabi_dmul+0x4f4>)
   1723a:	00c0      	lsls	r0, r0, #3
   1723c:	4014      	ands	r4, r2
   1723e:	4460      	add	r0, ip
   17240:	4a50      	ldr	r2, [pc, #320]	; (17384 <__aeabi_dmul+0x4f8>)
   17242:	4290      	cmp	r0, r2
   17244:	dd00      	ble.n	17248 <__aeabi_dmul+0x3bc>
   17246:	e6e3      	b.n	17010 <__aeabi_dmul+0x184>
   17248:	2501      	movs	r5, #1
   1724a:	08db      	lsrs	r3, r3, #3
   1724c:	0762      	lsls	r2, r4, #29
   1724e:	431a      	orrs	r2, r3
   17250:	0264      	lsls	r4, r4, #9
   17252:	9b01      	ldr	r3, [sp, #4]
   17254:	4691      	mov	r9, r2
   17256:	0b22      	lsrs	r2, r4, #12
   17258:	0544      	lsls	r4, r0, #21
   1725a:	0d64      	lsrs	r4, r4, #21
   1725c:	401d      	ands	r5, r3
   1725e:	e67c      	b.n	16f5a <__aeabi_dmul+0xce>
   17260:	2280      	movs	r2, #128	; 0x80
   17262:	4659      	mov	r1, fp
   17264:	0312      	lsls	r2, r2, #12
   17266:	4211      	tst	r1, r2
   17268:	d008      	beq.n	1727c <__aeabi_dmul+0x3f0>
   1726a:	4214      	tst	r4, r2
   1726c:	d106      	bne.n	1727c <__aeabi_dmul+0x3f0>
   1726e:	4322      	orrs	r2, r4
   17270:	0312      	lsls	r2, r2, #12
   17272:	0b12      	lsrs	r2, r2, #12
   17274:	4645      	mov	r5, r8
   17276:	4699      	mov	r9, r3
   17278:	4c43      	ldr	r4, [pc, #268]	; (17388 <__aeabi_dmul+0x4fc>)
   1727a:	e66e      	b.n	16f5a <__aeabi_dmul+0xce>
   1727c:	465b      	mov	r3, fp
   1727e:	431a      	orrs	r2, r3
   17280:	0312      	lsls	r2, r2, #12
   17282:	0b12      	lsrs	r2, r2, #12
   17284:	4c40      	ldr	r4, [pc, #256]	; (17388 <__aeabi_dmul+0x4fc>)
   17286:	e668      	b.n	16f5a <__aeabi_dmul+0xce>
   17288:	0003      	movs	r3, r0
   1728a:	4654      	mov	r4, sl
   1728c:	3b28      	subs	r3, #40	; 0x28
   1728e:	409c      	lsls	r4, r3
   17290:	2300      	movs	r3, #0
   17292:	e6b9      	b.n	17008 <__aeabi_dmul+0x17c>
   17294:	f000 fcb0 	bl	17bf8 <__clzsi2>
   17298:	3020      	adds	r0, #32
   1729a:	e6a6      	b.n	16fea <__aeabi_dmul+0x15e>
   1729c:	0003      	movs	r3, r0
   1729e:	3b28      	subs	r3, #40	; 0x28
   172a0:	409f      	lsls	r7, r3
   172a2:	2300      	movs	r3, #0
   172a4:	46bb      	mov	fp, r7
   172a6:	4699      	mov	r9, r3
   172a8:	e68a      	b.n	16fc0 <__aeabi_dmul+0x134>
   172aa:	f000 fca5 	bl	17bf8 <__clzsi2>
   172ae:	3020      	adds	r0, #32
   172b0:	e674      	b.n	16f9c <__aeabi_dmul+0x110>
   172b2:	46b4      	mov	ip, r6
   172b4:	e7ad      	b.n	17212 <__aeabi_dmul+0x386>
   172b6:	2501      	movs	r5, #1
   172b8:	1a2a      	subs	r2, r5, r0
   172ba:	2a38      	cmp	r2, #56	; 0x38
   172bc:	dd06      	ble.n	172cc <__aeabi_dmul+0x440>
   172be:	9b01      	ldr	r3, [sp, #4]
   172c0:	2400      	movs	r4, #0
   172c2:	401d      	ands	r5, r3
   172c4:	2300      	movs	r3, #0
   172c6:	2200      	movs	r2, #0
   172c8:	4699      	mov	r9, r3
   172ca:	e646      	b.n	16f5a <__aeabi_dmul+0xce>
   172cc:	2a1f      	cmp	r2, #31
   172ce:	dc21      	bgt.n	17314 <__aeabi_dmul+0x488>
   172d0:	2520      	movs	r5, #32
   172d2:	0020      	movs	r0, r4
   172d4:	1aad      	subs	r5, r5, r2
   172d6:	001e      	movs	r6, r3
   172d8:	40ab      	lsls	r3, r5
   172da:	40a8      	lsls	r0, r5
   172dc:	40d6      	lsrs	r6, r2
   172de:	1e5d      	subs	r5, r3, #1
   172e0:	41ab      	sbcs	r3, r5
   172e2:	4330      	orrs	r0, r6
   172e4:	4318      	orrs	r0, r3
   172e6:	40d4      	lsrs	r4, r2
   172e8:	0743      	lsls	r3, r0, #29
   172ea:	d009      	beq.n	17300 <__aeabi_dmul+0x474>
   172ec:	230f      	movs	r3, #15
   172ee:	4003      	ands	r3, r0
   172f0:	2b04      	cmp	r3, #4
   172f2:	d005      	beq.n	17300 <__aeabi_dmul+0x474>
   172f4:	0003      	movs	r3, r0
   172f6:	1d18      	adds	r0, r3, #4
   172f8:	4298      	cmp	r0, r3
   172fa:	419b      	sbcs	r3, r3
   172fc:	425b      	negs	r3, r3
   172fe:	18e4      	adds	r4, r4, r3
   17300:	0223      	lsls	r3, r4, #8
   17302:	d521      	bpl.n	17348 <__aeabi_dmul+0x4bc>
   17304:	2501      	movs	r5, #1
   17306:	9b01      	ldr	r3, [sp, #4]
   17308:	2401      	movs	r4, #1
   1730a:	401d      	ands	r5, r3
   1730c:	2300      	movs	r3, #0
   1730e:	2200      	movs	r2, #0
   17310:	4699      	mov	r9, r3
   17312:	e622      	b.n	16f5a <__aeabi_dmul+0xce>
   17314:	251f      	movs	r5, #31
   17316:	0021      	movs	r1, r4
   17318:	426d      	negs	r5, r5
   1731a:	1a28      	subs	r0, r5, r0
   1731c:	40c1      	lsrs	r1, r0
   1731e:	0008      	movs	r0, r1
   17320:	2a20      	cmp	r2, #32
   17322:	d01d      	beq.n	17360 <__aeabi_dmul+0x4d4>
   17324:	355f      	adds	r5, #95	; 0x5f
   17326:	1aaa      	subs	r2, r5, r2
   17328:	4094      	lsls	r4, r2
   1732a:	4323      	orrs	r3, r4
   1732c:	1e5c      	subs	r4, r3, #1
   1732e:	41a3      	sbcs	r3, r4
   17330:	2507      	movs	r5, #7
   17332:	4303      	orrs	r3, r0
   17334:	401d      	ands	r5, r3
   17336:	2200      	movs	r2, #0
   17338:	2d00      	cmp	r5, #0
   1733a:	d009      	beq.n	17350 <__aeabi_dmul+0x4c4>
   1733c:	220f      	movs	r2, #15
   1733e:	2400      	movs	r4, #0
   17340:	401a      	ands	r2, r3
   17342:	0018      	movs	r0, r3
   17344:	2a04      	cmp	r2, #4
   17346:	d1d6      	bne.n	172f6 <__aeabi_dmul+0x46a>
   17348:	0003      	movs	r3, r0
   1734a:	0765      	lsls	r5, r4, #29
   1734c:	0264      	lsls	r4, r4, #9
   1734e:	0b22      	lsrs	r2, r4, #12
   17350:	08db      	lsrs	r3, r3, #3
   17352:	432b      	orrs	r3, r5
   17354:	2501      	movs	r5, #1
   17356:	4699      	mov	r9, r3
   17358:	9b01      	ldr	r3, [sp, #4]
   1735a:	2400      	movs	r4, #0
   1735c:	401d      	ands	r5, r3
   1735e:	e5fc      	b.n	16f5a <__aeabi_dmul+0xce>
   17360:	2400      	movs	r4, #0
   17362:	e7e2      	b.n	1732a <__aeabi_dmul+0x49e>
   17364:	2280      	movs	r2, #128	; 0x80
   17366:	2501      	movs	r5, #1
   17368:	0312      	lsls	r2, r2, #12
   1736a:	4322      	orrs	r2, r4
   1736c:	9901      	ldr	r1, [sp, #4]
   1736e:	0312      	lsls	r2, r2, #12
   17370:	0b12      	lsrs	r2, r2, #12
   17372:	400d      	ands	r5, r1
   17374:	4699      	mov	r9, r3
   17376:	4c04      	ldr	r4, [pc, #16]	; (17388 <__aeabi_dmul+0x4fc>)
   17378:	e5ef      	b.n	16f5a <__aeabi_dmul+0xce>
   1737a:	46c0      	nop			; (mov r8, r8)
   1737c:	000003ff 	.word	0x000003ff
   17380:	feffffff 	.word	0xfeffffff
   17384:	000007fe 	.word	0x000007fe
   17388:	000007ff 	.word	0x000007ff

0001738c <__aeabi_dsub>:
   1738c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1738e:	4646      	mov	r6, r8
   17390:	46d6      	mov	lr, sl
   17392:	464f      	mov	r7, r9
   17394:	030c      	lsls	r4, r1, #12
   17396:	b5c0      	push	{r6, r7, lr}
   17398:	0fcd      	lsrs	r5, r1, #31
   1739a:	004e      	lsls	r6, r1, #1
   1739c:	0a61      	lsrs	r1, r4, #9
   1739e:	0f44      	lsrs	r4, r0, #29
   173a0:	430c      	orrs	r4, r1
   173a2:	00c1      	lsls	r1, r0, #3
   173a4:	0058      	lsls	r0, r3, #1
   173a6:	0d40      	lsrs	r0, r0, #21
   173a8:	4684      	mov	ip, r0
   173aa:	468a      	mov	sl, r1
   173ac:	000f      	movs	r7, r1
   173ae:	0319      	lsls	r1, r3, #12
   173b0:	0f50      	lsrs	r0, r2, #29
   173b2:	0a49      	lsrs	r1, r1, #9
   173b4:	4301      	orrs	r1, r0
   173b6:	48c6      	ldr	r0, [pc, #792]	; (176d0 <__aeabi_dsub+0x344>)
   173b8:	0d76      	lsrs	r6, r6, #21
   173ba:	46a8      	mov	r8, r5
   173bc:	0fdb      	lsrs	r3, r3, #31
   173be:	00d2      	lsls	r2, r2, #3
   173c0:	4584      	cmp	ip, r0
   173c2:	d100      	bne.n	173c6 <__aeabi_dsub+0x3a>
   173c4:	e0d8      	b.n	17578 <__aeabi_dsub+0x1ec>
   173c6:	2001      	movs	r0, #1
   173c8:	4043      	eors	r3, r0
   173ca:	42ab      	cmp	r3, r5
   173cc:	d100      	bne.n	173d0 <__aeabi_dsub+0x44>
   173ce:	e0a6      	b.n	1751e <__aeabi_dsub+0x192>
   173d0:	4660      	mov	r0, ip
   173d2:	1a35      	subs	r5, r6, r0
   173d4:	2d00      	cmp	r5, #0
   173d6:	dc00      	bgt.n	173da <__aeabi_dsub+0x4e>
   173d8:	e105      	b.n	175e6 <__aeabi_dsub+0x25a>
   173da:	2800      	cmp	r0, #0
   173dc:	d110      	bne.n	17400 <__aeabi_dsub+0x74>
   173de:	000b      	movs	r3, r1
   173e0:	4313      	orrs	r3, r2
   173e2:	d100      	bne.n	173e6 <__aeabi_dsub+0x5a>
   173e4:	e0d7      	b.n	17596 <__aeabi_dsub+0x20a>
   173e6:	1e6b      	subs	r3, r5, #1
   173e8:	2b00      	cmp	r3, #0
   173ea:	d000      	beq.n	173ee <__aeabi_dsub+0x62>
   173ec:	e14b      	b.n	17686 <__aeabi_dsub+0x2fa>
   173ee:	4653      	mov	r3, sl
   173f0:	1a9f      	subs	r7, r3, r2
   173f2:	45ba      	cmp	sl, r7
   173f4:	4180      	sbcs	r0, r0
   173f6:	1a64      	subs	r4, r4, r1
   173f8:	4240      	negs	r0, r0
   173fa:	1a24      	subs	r4, r4, r0
   173fc:	2601      	movs	r6, #1
   173fe:	e01e      	b.n	1743e <__aeabi_dsub+0xb2>
   17400:	4bb3      	ldr	r3, [pc, #716]	; (176d0 <__aeabi_dsub+0x344>)
   17402:	429e      	cmp	r6, r3
   17404:	d048      	beq.n	17498 <__aeabi_dsub+0x10c>
   17406:	2380      	movs	r3, #128	; 0x80
   17408:	041b      	lsls	r3, r3, #16
   1740a:	4319      	orrs	r1, r3
   1740c:	2d38      	cmp	r5, #56	; 0x38
   1740e:	dd00      	ble.n	17412 <__aeabi_dsub+0x86>
   17410:	e119      	b.n	17646 <__aeabi_dsub+0x2ba>
   17412:	2d1f      	cmp	r5, #31
   17414:	dd00      	ble.n	17418 <__aeabi_dsub+0x8c>
   17416:	e14c      	b.n	176b2 <__aeabi_dsub+0x326>
   17418:	2320      	movs	r3, #32
   1741a:	000f      	movs	r7, r1
   1741c:	1b5b      	subs	r3, r3, r5
   1741e:	0010      	movs	r0, r2
   17420:	409a      	lsls	r2, r3
   17422:	409f      	lsls	r7, r3
   17424:	40e8      	lsrs	r0, r5
   17426:	1e53      	subs	r3, r2, #1
   17428:	419a      	sbcs	r2, r3
   1742a:	40e9      	lsrs	r1, r5
   1742c:	4307      	orrs	r7, r0
   1742e:	4317      	orrs	r7, r2
   17430:	4653      	mov	r3, sl
   17432:	1bdf      	subs	r7, r3, r7
   17434:	1a61      	subs	r1, r4, r1
   17436:	45ba      	cmp	sl, r7
   17438:	41a4      	sbcs	r4, r4
   1743a:	4264      	negs	r4, r4
   1743c:	1b0c      	subs	r4, r1, r4
   1743e:	0223      	lsls	r3, r4, #8
   17440:	d400      	bmi.n	17444 <__aeabi_dsub+0xb8>
   17442:	e0c5      	b.n	175d0 <__aeabi_dsub+0x244>
   17444:	0264      	lsls	r4, r4, #9
   17446:	0a65      	lsrs	r5, r4, #9
   17448:	2d00      	cmp	r5, #0
   1744a:	d100      	bne.n	1744e <__aeabi_dsub+0xc2>
   1744c:	e0f6      	b.n	1763c <__aeabi_dsub+0x2b0>
   1744e:	0028      	movs	r0, r5
   17450:	f000 fbd2 	bl	17bf8 <__clzsi2>
   17454:	0003      	movs	r3, r0
   17456:	3b08      	subs	r3, #8
   17458:	2b1f      	cmp	r3, #31
   1745a:	dd00      	ble.n	1745e <__aeabi_dsub+0xd2>
   1745c:	e0e9      	b.n	17632 <__aeabi_dsub+0x2a6>
   1745e:	2220      	movs	r2, #32
   17460:	003c      	movs	r4, r7
   17462:	1ad2      	subs	r2, r2, r3
   17464:	409d      	lsls	r5, r3
   17466:	40d4      	lsrs	r4, r2
   17468:	409f      	lsls	r7, r3
   1746a:	4325      	orrs	r5, r4
   1746c:	429e      	cmp	r6, r3
   1746e:	dd00      	ble.n	17472 <__aeabi_dsub+0xe6>
   17470:	e0db      	b.n	1762a <__aeabi_dsub+0x29e>
   17472:	1b9e      	subs	r6, r3, r6
   17474:	1c73      	adds	r3, r6, #1
   17476:	2b1f      	cmp	r3, #31
   17478:	dd00      	ble.n	1747c <__aeabi_dsub+0xf0>
   1747a:	e10a      	b.n	17692 <__aeabi_dsub+0x306>
   1747c:	2220      	movs	r2, #32
   1747e:	0038      	movs	r0, r7
   17480:	1ad2      	subs	r2, r2, r3
   17482:	0029      	movs	r1, r5
   17484:	4097      	lsls	r7, r2
   17486:	002c      	movs	r4, r5
   17488:	4091      	lsls	r1, r2
   1748a:	40d8      	lsrs	r0, r3
   1748c:	1e7a      	subs	r2, r7, #1
   1748e:	4197      	sbcs	r7, r2
   17490:	40dc      	lsrs	r4, r3
   17492:	2600      	movs	r6, #0
   17494:	4301      	orrs	r1, r0
   17496:	430f      	orrs	r7, r1
   17498:	077b      	lsls	r3, r7, #29
   1749a:	d009      	beq.n	174b0 <__aeabi_dsub+0x124>
   1749c:	230f      	movs	r3, #15
   1749e:	403b      	ands	r3, r7
   174a0:	2b04      	cmp	r3, #4
   174a2:	d005      	beq.n	174b0 <__aeabi_dsub+0x124>
   174a4:	1d3b      	adds	r3, r7, #4
   174a6:	42bb      	cmp	r3, r7
   174a8:	41bf      	sbcs	r7, r7
   174aa:	427f      	negs	r7, r7
   174ac:	19e4      	adds	r4, r4, r7
   174ae:	001f      	movs	r7, r3
   174b0:	0223      	lsls	r3, r4, #8
   174b2:	d525      	bpl.n	17500 <__aeabi_dsub+0x174>
   174b4:	4b86      	ldr	r3, [pc, #536]	; (176d0 <__aeabi_dsub+0x344>)
   174b6:	3601      	adds	r6, #1
   174b8:	429e      	cmp	r6, r3
   174ba:	d100      	bne.n	174be <__aeabi_dsub+0x132>
   174bc:	e0af      	b.n	1761e <__aeabi_dsub+0x292>
   174be:	4b85      	ldr	r3, [pc, #532]	; (176d4 <__aeabi_dsub+0x348>)
   174c0:	2501      	movs	r5, #1
   174c2:	401c      	ands	r4, r3
   174c4:	4643      	mov	r3, r8
   174c6:	0762      	lsls	r2, r4, #29
   174c8:	08ff      	lsrs	r7, r7, #3
   174ca:	0264      	lsls	r4, r4, #9
   174cc:	0576      	lsls	r6, r6, #21
   174ce:	4317      	orrs	r7, r2
   174d0:	0b24      	lsrs	r4, r4, #12
   174d2:	0d76      	lsrs	r6, r6, #21
   174d4:	401d      	ands	r5, r3
   174d6:	2100      	movs	r1, #0
   174d8:	0324      	lsls	r4, r4, #12
   174da:	0b23      	lsrs	r3, r4, #12
   174dc:	0d0c      	lsrs	r4, r1, #20
   174de:	4a7e      	ldr	r2, [pc, #504]	; (176d8 <__aeabi_dsub+0x34c>)
   174e0:	0524      	lsls	r4, r4, #20
   174e2:	431c      	orrs	r4, r3
   174e4:	4014      	ands	r4, r2
   174e6:	0533      	lsls	r3, r6, #20
   174e8:	4323      	orrs	r3, r4
   174ea:	005b      	lsls	r3, r3, #1
   174ec:	07ed      	lsls	r5, r5, #31
   174ee:	085b      	lsrs	r3, r3, #1
   174f0:	432b      	orrs	r3, r5
   174f2:	0038      	movs	r0, r7
   174f4:	0019      	movs	r1, r3
   174f6:	bc1c      	pop	{r2, r3, r4}
   174f8:	4690      	mov	r8, r2
   174fa:	4699      	mov	r9, r3
   174fc:	46a2      	mov	sl, r4
   174fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17500:	2501      	movs	r5, #1
   17502:	4643      	mov	r3, r8
   17504:	0762      	lsls	r2, r4, #29
   17506:	08ff      	lsrs	r7, r7, #3
   17508:	4317      	orrs	r7, r2
   1750a:	08e4      	lsrs	r4, r4, #3
   1750c:	401d      	ands	r5, r3
   1750e:	4b70      	ldr	r3, [pc, #448]	; (176d0 <__aeabi_dsub+0x344>)
   17510:	429e      	cmp	r6, r3
   17512:	d036      	beq.n	17582 <__aeabi_dsub+0x1f6>
   17514:	0324      	lsls	r4, r4, #12
   17516:	0576      	lsls	r6, r6, #21
   17518:	0b24      	lsrs	r4, r4, #12
   1751a:	0d76      	lsrs	r6, r6, #21
   1751c:	e7db      	b.n	174d6 <__aeabi_dsub+0x14a>
   1751e:	4663      	mov	r3, ip
   17520:	1af3      	subs	r3, r6, r3
   17522:	2b00      	cmp	r3, #0
   17524:	dc00      	bgt.n	17528 <__aeabi_dsub+0x19c>
   17526:	e094      	b.n	17652 <__aeabi_dsub+0x2c6>
   17528:	4660      	mov	r0, ip
   1752a:	2800      	cmp	r0, #0
   1752c:	d035      	beq.n	1759a <__aeabi_dsub+0x20e>
   1752e:	4868      	ldr	r0, [pc, #416]	; (176d0 <__aeabi_dsub+0x344>)
   17530:	4286      	cmp	r6, r0
   17532:	d0b1      	beq.n	17498 <__aeabi_dsub+0x10c>
   17534:	2780      	movs	r7, #128	; 0x80
   17536:	043f      	lsls	r7, r7, #16
   17538:	4339      	orrs	r1, r7
   1753a:	2b38      	cmp	r3, #56	; 0x38
   1753c:	dc00      	bgt.n	17540 <__aeabi_dsub+0x1b4>
   1753e:	e0fd      	b.n	1773c <__aeabi_dsub+0x3b0>
   17540:	430a      	orrs	r2, r1
   17542:	0017      	movs	r7, r2
   17544:	2100      	movs	r1, #0
   17546:	1e7a      	subs	r2, r7, #1
   17548:	4197      	sbcs	r7, r2
   1754a:	4457      	add	r7, sl
   1754c:	4557      	cmp	r7, sl
   1754e:	4180      	sbcs	r0, r0
   17550:	1909      	adds	r1, r1, r4
   17552:	4244      	negs	r4, r0
   17554:	190c      	adds	r4, r1, r4
   17556:	0223      	lsls	r3, r4, #8
   17558:	d53a      	bpl.n	175d0 <__aeabi_dsub+0x244>
   1755a:	4b5d      	ldr	r3, [pc, #372]	; (176d0 <__aeabi_dsub+0x344>)
   1755c:	3601      	adds	r6, #1
   1755e:	429e      	cmp	r6, r3
   17560:	d100      	bne.n	17564 <__aeabi_dsub+0x1d8>
   17562:	e14b      	b.n	177fc <__aeabi_dsub+0x470>
   17564:	2201      	movs	r2, #1
   17566:	4b5b      	ldr	r3, [pc, #364]	; (176d4 <__aeabi_dsub+0x348>)
   17568:	401c      	ands	r4, r3
   1756a:	087b      	lsrs	r3, r7, #1
   1756c:	4017      	ands	r7, r2
   1756e:	431f      	orrs	r7, r3
   17570:	07e2      	lsls	r2, r4, #31
   17572:	4317      	orrs	r7, r2
   17574:	0864      	lsrs	r4, r4, #1
   17576:	e78f      	b.n	17498 <__aeabi_dsub+0x10c>
   17578:	0008      	movs	r0, r1
   1757a:	4310      	orrs	r0, r2
   1757c:	d000      	beq.n	17580 <__aeabi_dsub+0x1f4>
   1757e:	e724      	b.n	173ca <__aeabi_dsub+0x3e>
   17580:	e721      	b.n	173c6 <__aeabi_dsub+0x3a>
   17582:	0023      	movs	r3, r4
   17584:	433b      	orrs	r3, r7
   17586:	d100      	bne.n	1758a <__aeabi_dsub+0x1fe>
   17588:	e1b9      	b.n	178fe <__aeabi_dsub+0x572>
   1758a:	2280      	movs	r2, #128	; 0x80
   1758c:	0312      	lsls	r2, r2, #12
   1758e:	4314      	orrs	r4, r2
   17590:	0324      	lsls	r4, r4, #12
   17592:	0b24      	lsrs	r4, r4, #12
   17594:	e79f      	b.n	174d6 <__aeabi_dsub+0x14a>
   17596:	002e      	movs	r6, r5
   17598:	e77e      	b.n	17498 <__aeabi_dsub+0x10c>
   1759a:	0008      	movs	r0, r1
   1759c:	4310      	orrs	r0, r2
   1759e:	d100      	bne.n	175a2 <__aeabi_dsub+0x216>
   175a0:	e0ca      	b.n	17738 <__aeabi_dsub+0x3ac>
   175a2:	1e58      	subs	r0, r3, #1
   175a4:	4684      	mov	ip, r0
   175a6:	2800      	cmp	r0, #0
   175a8:	d000      	beq.n	175ac <__aeabi_dsub+0x220>
   175aa:	e0e7      	b.n	1777c <__aeabi_dsub+0x3f0>
   175ac:	4452      	add	r2, sl
   175ae:	4552      	cmp	r2, sl
   175b0:	4180      	sbcs	r0, r0
   175b2:	1864      	adds	r4, r4, r1
   175b4:	4240      	negs	r0, r0
   175b6:	1824      	adds	r4, r4, r0
   175b8:	0017      	movs	r7, r2
   175ba:	2601      	movs	r6, #1
   175bc:	0223      	lsls	r3, r4, #8
   175be:	d507      	bpl.n	175d0 <__aeabi_dsub+0x244>
   175c0:	2602      	movs	r6, #2
   175c2:	e7cf      	b.n	17564 <__aeabi_dsub+0x1d8>
   175c4:	4664      	mov	r4, ip
   175c6:	432c      	orrs	r4, r5
   175c8:	d100      	bne.n	175cc <__aeabi_dsub+0x240>
   175ca:	e1b3      	b.n	17934 <__aeabi_dsub+0x5a8>
   175cc:	002c      	movs	r4, r5
   175ce:	4667      	mov	r7, ip
   175d0:	077b      	lsls	r3, r7, #29
   175d2:	d000      	beq.n	175d6 <__aeabi_dsub+0x24a>
   175d4:	e762      	b.n	1749c <__aeabi_dsub+0x110>
   175d6:	0763      	lsls	r3, r4, #29
   175d8:	08ff      	lsrs	r7, r7, #3
   175da:	431f      	orrs	r7, r3
   175dc:	2501      	movs	r5, #1
   175de:	4643      	mov	r3, r8
   175e0:	08e4      	lsrs	r4, r4, #3
   175e2:	401d      	ands	r5, r3
   175e4:	e793      	b.n	1750e <__aeabi_dsub+0x182>
   175e6:	2d00      	cmp	r5, #0
   175e8:	d178      	bne.n	176dc <__aeabi_dsub+0x350>
   175ea:	1c75      	adds	r5, r6, #1
   175ec:	056d      	lsls	r5, r5, #21
   175ee:	0d6d      	lsrs	r5, r5, #21
   175f0:	2d01      	cmp	r5, #1
   175f2:	dc00      	bgt.n	175f6 <__aeabi_dsub+0x26a>
   175f4:	e0f2      	b.n	177dc <__aeabi_dsub+0x450>
   175f6:	4650      	mov	r0, sl
   175f8:	1a80      	subs	r0, r0, r2
   175fa:	4582      	cmp	sl, r0
   175fc:	41bf      	sbcs	r7, r7
   175fe:	1a65      	subs	r5, r4, r1
   17600:	427f      	negs	r7, r7
   17602:	1bed      	subs	r5, r5, r7
   17604:	4684      	mov	ip, r0
   17606:	0228      	lsls	r0, r5, #8
   17608:	d400      	bmi.n	1760c <__aeabi_dsub+0x280>
   1760a:	e08c      	b.n	17726 <__aeabi_dsub+0x39a>
   1760c:	4650      	mov	r0, sl
   1760e:	1a17      	subs	r7, r2, r0
   17610:	42ba      	cmp	r2, r7
   17612:	4192      	sbcs	r2, r2
   17614:	1b0c      	subs	r4, r1, r4
   17616:	4255      	negs	r5, r2
   17618:	1b65      	subs	r5, r4, r5
   1761a:	4698      	mov	r8, r3
   1761c:	e714      	b.n	17448 <__aeabi_dsub+0xbc>
   1761e:	2501      	movs	r5, #1
   17620:	4643      	mov	r3, r8
   17622:	2400      	movs	r4, #0
   17624:	401d      	ands	r5, r3
   17626:	2700      	movs	r7, #0
   17628:	e755      	b.n	174d6 <__aeabi_dsub+0x14a>
   1762a:	4c2a      	ldr	r4, [pc, #168]	; (176d4 <__aeabi_dsub+0x348>)
   1762c:	1af6      	subs	r6, r6, r3
   1762e:	402c      	ands	r4, r5
   17630:	e732      	b.n	17498 <__aeabi_dsub+0x10c>
   17632:	003d      	movs	r5, r7
   17634:	3828      	subs	r0, #40	; 0x28
   17636:	4085      	lsls	r5, r0
   17638:	2700      	movs	r7, #0
   1763a:	e717      	b.n	1746c <__aeabi_dsub+0xe0>
   1763c:	0038      	movs	r0, r7
   1763e:	f000 fadb 	bl	17bf8 <__clzsi2>
   17642:	3020      	adds	r0, #32
   17644:	e706      	b.n	17454 <__aeabi_dsub+0xc8>
   17646:	430a      	orrs	r2, r1
   17648:	0017      	movs	r7, r2
   1764a:	2100      	movs	r1, #0
   1764c:	1e7a      	subs	r2, r7, #1
   1764e:	4197      	sbcs	r7, r2
   17650:	e6ee      	b.n	17430 <__aeabi_dsub+0xa4>
   17652:	2b00      	cmp	r3, #0
   17654:	d000      	beq.n	17658 <__aeabi_dsub+0x2cc>
   17656:	e0e5      	b.n	17824 <__aeabi_dsub+0x498>
   17658:	1c73      	adds	r3, r6, #1
   1765a:	469c      	mov	ip, r3
   1765c:	055b      	lsls	r3, r3, #21
   1765e:	0d5b      	lsrs	r3, r3, #21
   17660:	2b01      	cmp	r3, #1
   17662:	dc00      	bgt.n	17666 <__aeabi_dsub+0x2da>
   17664:	e09f      	b.n	177a6 <__aeabi_dsub+0x41a>
   17666:	4b1a      	ldr	r3, [pc, #104]	; (176d0 <__aeabi_dsub+0x344>)
   17668:	459c      	cmp	ip, r3
   1766a:	d100      	bne.n	1766e <__aeabi_dsub+0x2e2>
   1766c:	e0c5      	b.n	177fa <__aeabi_dsub+0x46e>
   1766e:	4452      	add	r2, sl
   17670:	4552      	cmp	r2, sl
   17672:	4180      	sbcs	r0, r0
   17674:	1864      	adds	r4, r4, r1
   17676:	4240      	negs	r0, r0
   17678:	1824      	adds	r4, r4, r0
   1767a:	07e7      	lsls	r7, r4, #31
   1767c:	0852      	lsrs	r2, r2, #1
   1767e:	4317      	orrs	r7, r2
   17680:	0864      	lsrs	r4, r4, #1
   17682:	4666      	mov	r6, ip
   17684:	e708      	b.n	17498 <__aeabi_dsub+0x10c>
   17686:	4812      	ldr	r0, [pc, #72]	; (176d0 <__aeabi_dsub+0x344>)
   17688:	4285      	cmp	r5, r0
   1768a:	d100      	bne.n	1768e <__aeabi_dsub+0x302>
   1768c:	e085      	b.n	1779a <__aeabi_dsub+0x40e>
   1768e:	001d      	movs	r5, r3
   17690:	e6bc      	b.n	1740c <__aeabi_dsub+0x80>
   17692:	0029      	movs	r1, r5
   17694:	3e1f      	subs	r6, #31
   17696:	40f1      	lsrs	r1, r6
   17698:	2b20      	cmp	r3, #32
   1769a:	d100      	bne.n	1769e <__aeabi_dsub+0x312>
   1769c:	e07f      	b.n	1779e <__aeabi_dsub+0x412>
   1769e:	2240      	movs	r2, #64	; 0x40
   176a0:	1ad3      	subs	r3, r2, r3
   176a2:	409d      	lsls	r5, r3
   176a4:	432f      	orrs	r7, r5
   176a6:	1e7d      	subs	r5, r7, #1
   176a8:	41af      	sbcs	r7, r5
   176aa:	2400      	movs	r4, #0
   176ac:	430f      	orrs	r7, r1
   176ae:	2600      	movs	r6, #0
   176b0:	e78e      	b.n	175d0 <__aeabi_dsub+0x244>
   176b2:	002b      	movs	r3, r5
   176b4:	000f      	movs	r7, r1
   176b6:	3b20      	subs	r3, #32
   176b8:	40df      	lsrs	r7, r3
   176ba:	2d20      	cmp	r5, #32
   176bc:	d071      	beq.n	177a2 <__aeabi_dsub+0x416>
   176be:	2340      	movs	r3, #64	; 0x40
   176c0:	1b5d      	subs	r5, r3, r5
   176c2:	40a9      	lsls	r1, r5
   176c4:	430a      	orrs	r2, r1
   176c6:	1e51      	subs	r1, r2, #1
   176c8:	418a      	sbcs	r2, r1
   176ca:	2100      	movs	r1, #0
   176cc:	4317      	orrs	r7, r2
   176ce:	e6af      	b.n	17430 <__aeabi_dsub+0xa4>
   176d0:	000007ff 	.word	0x000007ff
   176d4:	ff7fffff 	.word	0xff7fffff
   176d8:	800fffff 	.word	0x800fffff
   176dc:	2e00      	cmp	r6, #0
   176de:	d03e      	beq.n	1775e <__aeabi_dsub+0x3d2>
   176e0:	4eb3      	ldr	r6, [pc, #716]	; (179b0 <__aeabi_dsub+0x624>)
   176e2:	45b4      	cmp	ip, r6
   176e4:	d045      	beq.n	17772 <__aeabi_dsub+0x3e6>
   176e6:	2680      	movs	r6, #128	; 0x80
   176e8:	0436      	lsls	r6, r6, #16
   176ea:	426d      	negs	r5, r5
   176ec:	4334      	orrs	r4, r6
   176ee:	2d38      	cmp	r5, #56	; 0x38
   176f0:	dd00      	ble.n	176f4 <__aeabi_dsub+0x368>
   176f2:	e0a8      	b.n	17846 <__aeabi_dsub+0x4ba>
   176f4:	2d1f      	cmp	r5, #31
   176f6:	dd00      	ble.n	176fa <__aeabi_dsub+0x36e>
   176f8:	e11f      	b.n	1793a <__aeabi_dsub+0x5ae>
   176fa:	2620      	movs	r6, #32
   176fc:	0027      	movs	r7, r4
   176fe:	4650      	mov	r0, sl
   17700:	1b76      	subs	r6, r6, r5
   17702:	40b7      	lsls	r7, r6
   17704:	40e8      	lsrs	r0, r5
   17706:	4307      	orrs	r7, r0
   17708:	4650      	mov	r0, sl
   1770a:	40b0      	lsls	r0, r6
   1770c:	1e46      	subs	r6, r0, #1
   1770e:	41b0      	sbcs	r0, r6
   17710:	40ec      	lsrs	r4, r5
   17712:	4338      	orrs	r0, r7
   17714:	1a17      	subs	r7, r2, r0
   17716:	42ba      	cmp	r2, r7
   17718:	4192      	sbcs	r2, r2
   1771a:	1b0c      	subs	r4, r1, r4
   1771c:	4252      	negs	r2, r2
   1771e:	1aa4      	subs	r4, r4, r2
   17720:	4666      	mov	r6, ip
   17722:	4698      	mov	r8, r3
   17724:	e68b      	b.n	1743e <__aeabi_dsub+0xb2>
   17726:	4664      	mov	r4, ip
   17728:	4667      	mov	r7, ip
   1772a:	432c      	orrs	r4, r5
   1772c:	d000      	beq.n	17730 <__aeabi_dsub+0x3a4>
   1772e:	e68b      	b.n	17448 <__aeabi_dsub+0xbc>
   17730:	2500      	movs	r5, #0
   17732:	2600      	movs	r6, #0
   17734:	2700      	movs	r7, #0
   17736:	e6ea      	b.n	1750e <__aeabi_dsub+0x182>
   17738:	001e      	movs	r6, r3
   1773a:	e6ad      	b.n	17498 <__aeabi_dsub+0x10c>
   1773c:	2b1f      	cmp	r3, #31
   1773e:	dc60      	bgt.n	17802 <__aeabi_dsub+0x476>
   17740:	2720      	movs	r7, #32
   17742:	1af8      	subs	r0, r7, r3
   17744:	000f      	movs	r7, r1
   17746:	4684      	mov	ip, r0
   17748:	4087      	lsls	r7, r0
   1774a:	0010      	movs	r0, r2
   1774c:	40d8      	lsrs	r0, r3
   1774e:	4307      	orrs	r7, r0
   17750:	4660      	mov	r0, ip
   17752:	4082      	lsls	r2, r0
   17754:	1e50      	subs	r0, r2, #1
   17756:	4182      	sbcs	r2, r0
   17758:	40d9      	lsrs	r1, r3
   1775a:	4317      	orrs	r7, r2
   1775c:	e6f5      	b.n	1754a <__aeabi_dsub+0x1be>
   1775e:	0026      	movs	r6, r4
   17760:	4650      	mov	r0, sl
   17762:	4306      	orrs	r6, r0
   17764:	d005      	beq.n	17772 <__aeabi_dsub+0x3e6>
   17766:	43ed      	mvns	r5, r5
   17768:	2d00      	cmp	r5, #0
   1776a:	d0d3      	beq.n	17714 <__aeabi_dsub+0x388>
   1776c:	4e90      	ldr	r6, [pc, #576]	; (179b0 <__aeabi_dsub+0x624>)
   1776e:	45b4      	cmp	ip, r6
   17770:	d1bd      	bne.n	176ee <__aeabi_dsub+0x362>
   17772:	000c      	movs	r4, r1
   17774:	0017      	movs	r7, r2
   17776:	4666      	mov	r6, ip
   17778:	4698      	mov	r8, r3
   1777a:	e68d      	b.n	17498 <__aeabi_dsub+0x10c>
   1777c:	488c      	ldr	r0, [pc, #560]	; (179b0 <__aeabi_dsub+0x624>)
   1777e:	4283      	cmp	r3, r0
   17780:	d00b      	beq.n	1779a <__aeabi_dsub+0x40e>
   17782:	4663      	mov	r3, ip
   17784:	e6d9      	b.n	1753a <__aeabi_dsub+0x1ae>
   17786:	2d00      	cmp	r5, #0
   17788:	d000      	beq.n	1778c <__aeabi_dsub+0x400>
   1778a:	e096      	b.n	178ba <__aeabi_dsub+0x52e>
   1778c:	0008      	movs	r0, r1
   1778e:	4310      	orrs	r0, r2
   17790:	d100      	bne.n	17794 <__aeabi_dsub+0x408>
   17792:	e0e2      	b.n	1795a <__aeabi_dsub+0x5ce>
   17794:	000c      	movs	r4, r1
   17796:	0017      	movs	r7, r2
   17798:	4698      	mov	r8, r3
   1779a:	4e85      	ldr	r6, [pc, #532]	; (179b0 <__aeabi_dsub+0x624>)
   1779c:	e67c      	b.n	17498 <__aeabi_dsub+0x10c>
   1779e:	2500      	movs	r5, #0
   177a0:	e780      	b.n	176a4 <__aeabi_dsub+0x318>
   177a2:	2100      	movs	r1, #0
   177a4:	e78e      	b.n	176c4 <__aeabi_dsub+0x338>
   177a6:	0023      	movs	r3, r4
   177a8:	4650      	mov	r0, sl
   177aa:	4303      	orrs	r3, r0
   177ac:	2e00      	cmp	r6, #0
   177ae:	d000      	beq.n	177b2 <__aeabi_dsub+0x426>
   177b0:	e0a8      	b.n	17904 <__aeabi_dsub+0x578>
   177b2:	2b00      	cmp	r3, #0
   177b4:	d100      	bne.n	177b8 <__aeabi_dsub+0x42c>
   177b6:	e0de      	b.n	17976 <__aeabi_dsub+0x5ea>
   177b8:	000b      	movs	r3, r1
   177ba:	4313      	orrs	r3, r2
   177bc:	d100      	bne.n	177c0 <__aeabi_dsub+0x434>
   177be:	e66b      	b.n	17498 <__aeabi_dsub+0x10c>
   177c0:	4452      	add	r2, sl
   177c2:	4552      	cmp	r2, sl
   177c4:	4180      	sbcs	r0, r0
   177c6:	1864      	adds	r4, r4, r1
   177c8:	4240      	negs	r0, r0
   177ca:	1824      	adds	r4, r4, r0
   177cc:	0017      	movs	r7, r2
   177ce:	0223      	lsls	r3, r4, #8
   177d0:	d400      	bmi.n	177d4 <__aeabi_dsub+0x448>
   177d2:	e6fd      	b.n	175d0 <__aeabi_dsub+0x244>
   177d4:	4b77      	ldr	r3, [pc, #476]	; (179b4 <__aeabi_dsub+0x628>)
   177d6:	4666      	mov	r6, ip
   177d8:	401c      	ands	r4, r3
   177da:	e65d      	b.n	17498 <__aeabi_dsub+0x10c>
   177dc:	0025      	movs	r5, r4
   177de:	4650      	mov	r0, sl
   177e0:	4305      	orrs	r5, r0
   177e2:	2e00      	cmp	r6, #0
   177e4:	d1cf      	bne.n	17786 <__aeabi_dsub+0x3fa>
   177e6:	2d00      	cmp	r5, #0
   177e8:	d14f      	bne.n	1788a <__aeabi_dsub+0x4fe>
   177ea:	000c      	movs	r4, r1
   177ec:	4314      	orrs	r4, r2
   177ee:	d100      	bne.n	177f2 <__aeabi_dsub+0x466>
   177f0:	e0a0      	b.n	17934 <__aeabi_dsub+0x5a8>
   177f2:	000c      	movs	r4, r1
   177f4:	0017      	movs	r7, r2
   177f6:	4698      	mov	r8, r3
   177f8:	e64e      	b.n	17498 <__aeabi_dsub+0x10c>
   177fa:	4666      	mov	r6, ip
   177fc:	2400      	movs	r4, #0
   177fe:	2700      	movs	r7, #0
   17800:	e685      	b.n	1750e <__aeabi_dsub+0x182>
   17802:	001f      	movs	r7, r3
   17804:	0008      	movs	r0, r1
   17806:	3f20      	subs	r7, #32
   17808:	40f8      	lsrs	r0, r7
   1780a:	0007      	movs	r7, r0
   1780c:	2b20      	cmp	r3, #32
   1780e:	d100      	bne.n	17812 <__aeabi_dsub+0x486>
   17810:	e08e      	b.n	17930 <__aeabi_dsub+0x5a4>
   17812:	2040      	movs	r0, #64	; 0x40
   17814:	1ac3      	subs	r3, r0, r3
   17816:	4099      	lsls	r1, r3
   17818:	430a      	orrs	r2, r1
   1781a:	1e51      	subs	r1, r2, #1
   1781c:	418a      	sbcs	r2, r1
   1781e:	2100      	movs	r1, #0
   17820:	4317      	orrs	r7, r2
   17822:	e692      	b.n	1754a <__aeabi_dsub+0x1be>
   17824:	2e00      	cmp	r6, #0
   17826:	d114      	bne.n	17852 <__aeabi_dsub+0x4c6>
   17828:	0026      	movs	r6, r4
   1782a:	4650      	mov	r0, sl
   1782c:	4306      	orrs	r6, r0
   1782e:	d062      	beq.n	178f6 <__aeabi_dsub+0x56a>
   17830:	43db      	mvns	r3, r3
   17832:	2b00      	cmp	r3, #0
   17834:	d15c      	bne.n	178f0 <__aeabi_dsub+0x564>
   17836:	1887      	adds	r7, r0, r2
   17838:	4297      	cmp	r7, r2
   1783a:	4192      	sbcs	r2, r2
   1783c:	1864      	adds	r4, r4, r1
   1783e:	4252      	negs	r2, r2
   17840:	18a4      	adds	r4, r4, r2
   17842:	4666      	mov	r6, ip
   17844:	e687      	b.n	17556 <__aeabi_dsub+0x1ca>
   17846:	4650      	mov	r0, sl
   17848:	4320      	orrs	r0, r4
   1784a:	1e44      	subs	r4, r0, #1
   1784c:	41a0      	sbcs	r0, r4
   1784e:	2400      	movs	r4, #0
   17850:	e760      	b.n	17714 <__aeabi_dsub+0x388>
   17852:	4e57      	ldr	r6, [pc, #348]	; (179b0 <__aeabi_dsub+0x624>)
   17854:	45b4      	cmp	ip, r6
   17856:	d04e      	beq.n	178f6 <__aeabi_dsub+0x56a>
   17858:	2680      	movs	r6, #128	; 0x80
   1785a:	0436      	lsls	r6, r6, #16
   1785c:	425b      	negs	r3, r3
   1785e:	4334      	orrs	r4, r6
   17860:	2b38      	cmp	r3, #56	; 0x38
   17862:	dd00      	ble.n	17866 <__aeabi_dsub+0x4da>
   17864:	e07f      	b.n	17966 <__aeabi_dsub+0x5da>
   17866:	2b1f      	cmp	r3, #31
   17868:	dd00      	ble.n	1786c <__aeabi_dsub+0x4e0>
   1786a:	e08b      	b.n	17984 <__aeabi_dsub+0x5f8>
   1786c:	2620      	movs	r6, #32
   1786e:	0027      	movs	r7, r4
   17870:	4650      	mov	r0, sl
   17872:	1af6      	subs	r6, r6, r3
   17874:	40b7      	lsls	r7, r6
   17876:	40d8      	lsrs	r0, r3
   17878:	4307      	orrs	r7, r0
   1787a:	4650      	mov	r0, sl
   1787c:	40b0      	lsls	r0, r6
   1787e:	1e46      	subs	r6, r0, #1
   17880:	41b0      	sbcs	r0, r6
   17882:	4307      	orrs	r7, r0
   17884:	40dc      	lsrs	r4, r3
   17886:	18bf      	adds	r7, r7, r2
   17888:	e7d6      	b.n	17838 <__aeabi_dsub+0x4ac>
   1788a:	000d      	movs	r5, r1
   1788c:	4315      	orrs	r5, r2
   1788e:	d100      	bne.n	17892 <__aeabi_dsub+0x506>
   17890:	e602      	b.n	17498 <__aeabi_dsub+0x10c>
   17892:	4650      	mov	r0, sl
   17894:	1a80      	subs	r0, r0, r2
   17896:	4582      	cmp	sl, r0
   17898:	41bf      	sbcs	r7, r7
   1789a:	1a65      	subs	r5, r4, r1
   1789c:	427f      	negs	r7, r7
   1789e:	1bed      	subs	r5, r5, r7
   178a0:	4684      	mov	ip, r0
   178a2:	0228      	lsls	r0, r5, #8
   178a4:	d400      	bmi.n	178a8 <__aeabi_dsub+0x51c>
   178a6:	e68d      	b.n	175c4 <__aeabi_dsub+0x238>
   178a8:	4650      	mov	r0, sl
   178aa:	1a17      	subs	r7, r2, r0
   178ac:	42ba      	cmp	r2, r7
   178ae:	4192      	sbcs	r2, r2
   178b0:	1b0c      	subs	r4, r1, r4
   178b2:	4252      	negs	r2, r2
   178b4:	1aa4      	subs	r4, r4, r2
   178b6:	4698      	mov	r8, r3
   178b8:	e5ee      	b.n	17498 <__aeabi_dsub+0x10c>
   178ba:	000d      	movs	r5, r1
   178bc:	4315      	orrs	r5, r2
   178be:	d100      	bne.n	178c2 <__aeabi_dsub+0x536>
   178c0:	e76b      	b.n	1779a <__aeabi_dsub+0x40e>
   178c2:	4650      	mov	r0, sl
   178c4:	0767      	lsls	r7, r4, #29
   178c6:	08c0      	lsrs	r0, r0, #3
   178c8:	4307      	orrs	r7, r0
   178ca:	2080      	movs	r0, #128	; 0x80
   178cc:	08e4      	lsrs	r4, r4, #3
   178ce:	0300      	lsls	r0, r0, #12
   178d0:	4204      	tst	r4, r0
   178d2:	d007      	beq.n	178e4 <__aeabi_dsub+0x558>
   178d4:	08cd      	lsrs	r5, r1, #3
   178d6:	4205      	tst	r5, r0
   178d8:	d104      	bne.n	178e4 <__aeabi_dsub+0x558>
   178da:	002c      	movs	r4, r5
   178dc:	4698      	mov	r8, r3
   178de:	08d7      	lsrs	r7, r2, #3
   178e0:	0749      	lsls	r1, r1, #29
   178e2:	430f      	orrs	r7, r1
   178e4:	0f7b      	lsrs	r3, r7, #29
   178e6:	00e4      	lsls	r4, r4, #3
   178e8:	431c      	orrs	r4, r3
   178ea:	00ff      	lsls	r7, r7, #3
   178ec:	4e30      	ldr	r6, [pc, #192]	; (179b0 <__aeabi_dsub+0x624>)
   178ee:	e5d3      	b.n	17498 <__aeabi_dsub+0x10c>
   178f0:	4e2f      	ldr	r6, [pc, #188]	; (179b0 <__aeabi_dsub+0x624>)
   178f2:	45b4      	cmp	ip, r6
   178f4:	d1b4      	bne.n	17860 <__aeabi_dsub+0x4d4>
   178f6:	000c      	movs	r4, r1
   178f8:	0017      	movs	r7, r2
   178fa:	4666      	mov	r6, ip
   178fc:	e5cc      	b.n	17498 <__aeabi_dsub+0x10c>
   178fe:	2700      	movs	r7, #0
   17900:	2400      	movs	r4, #0
   17902:	e5e8      	b.n	174d6 <__aeabi_dsub+0x14a>
   17904:	2b00      	cmp	r3, #0
   17906:	d039      	beq.n	1797c <__aeabi_dsub+0x5f0>
   17908:	000b      	movs	r3, r1
   1790a:	4313      	orrs	r3, r2
   1790c:	d100      	bne.n	17910 <__aeabi_dsub+0x584>
   1790e:	e744      	b.n	1779a <__aeabi_dsub+0x40e>
   17910:	08c0      	lsrs	r0, r0, #3
   17912:	0767      	lsls	r7, r4, #29
   17914:	4307      	orrs	r7, r0
   17916:	2080      	movs	r0, #128	; 0x80
   17918:	08e4      	lsrs	r4, r4, #3
   1791a:	0300      	lsls	r0, r0, #12
   1791c:	4204      	tst	r4, r0
   1791e:	d0e1      	beq.n	178e4 <__aeabi_dsub+0x558>
   17920:	08cb      	lsrs	r3, r1, #3
   17922:	4203      	tst	r3, r0
   17924:	d1de      	bne.n	178e4 <__aeabi_dsub+0x558>
   17926:	08d7      	lsrs	r7, r2, #3
   17928:	0749      	lsls	r1, r1, #29
   1792a:	430f      	orrs	r7, r1
   1792c:	001c      	movs	r4, r3
   1792e:	e7d9      	b.n	178e4 <__aeabi_dsub+0x558>
   17930:	2100      	movs	r1, #0
   17932:	e771      	b.n	17818 <__aeabi_dsub+0x48c>
   17934:	2500      	movs	r5, #0
   17936:	2700      	movs	r7, #0
   17938:	e5e9      	b.n	1750e <__aeabi_dsub+0x182>
   1793a:	002e      	movs	r6, r5
   1793c:	0027      	movs	r7, r4
   1793e:	3e20      	subs	r6, #32
   17940:	40f7      	lsrs	r7, r6
   17942:	2d20      	cmp	r5, #32
   17944:	d02f      	beq.n	179a6 <__aeabi_dsub+0x61a>
   17946:	2640      	movs	r6, #64	; 0x40
   17948:	1b75      	subs	r5, r6, r5
   1794a:	40ac      	lsls	r4, r5
   1794c:	4650      	mov	r0, sl
   1794e:	4320      	orrs	r0, r4
   17950:	1e44      	subs	r4, r0, #1
   17952:	41a0      	sbcs	r0, r4
   17954:	2400      	movs	r4, #0
   17956:	4338      	orrs	r0, r7
   17958:	e6dc      	b.n	17714 <__aeabi_dsub+0x388>
   1795a:	2480      	movs	r4, #128	; 0x80
   1795c:	2500      	movs	r5, #0
   1795e:	0324      	lsls	r4, r4, #12
   17960:	4e13      	ldr	r6, [pc, #76]	; (179b0 <__aeabi_dsub+0x624>)
   17962:	2700      	movs	r7, #0
   17964:	e5d3      	b.n	1750e <__aeabi_dsub+0x182>
   17966:	4650      	mov	r0, sl
   17968:	4320      	orrs	r0, r4
   1796a:	0007      	movs	r7, r0
   1796c:	1e78      	subs	r0, r7, #1
   1796e:	4187      	sbcs	r7, r0
   17970:	2400      	movs	r4, #0
   17972:	18bf      	adds	r7, r7, r2
   17974:	e760      	b.n	17838 <__aeabi_dsub+0x4ac>
   17976:	000c      	movs	r4, r1
   17978:	0017      	movs	r7, r2
   1797a:	e58d      	b.n	17498 <__aeabi_dsub+0x10c>
   1797c:	000c      	movs	r4, r1
   1797e:	0017      	movs	r7, r2
   17980:	4e0b      	ldr	r6, [pc, #44]	; (179b0 <__aeabi_dsub+0x624>)
   17982:	e589      	b.n	17498 <__aeabi_dsub+0x10c>
   17984:	001e      	movs	r6, r3
   17986:	0027      	movs	r7, r4
   17988:	3e20      	subs	r6, #32
   1798a:	40f7      	lsrs	r7, r6
   1798c:	2b20      	cmp	r3, #32
   1798e:	d00c      	beq.n	179aa <__aeabi_dsub+0x61e>
   17990:	2640      	movs	r6, #64	; 0x40
   17992:	1af3      	subs	r3, r6, r3
   17994:	409c      	lsls	r4, r3
   17996:	4650      	mov	r0, sl
   17998:	4320      	orrs	r0, r4
   1799a:	1e44      	subs	r4, r0, #1
   1799c:	41a0      	sbcs	r0, r4
   1799e:	4307      	orrs	r7, r0
   179a0:	2400      	movs	r4, #0
   179a2:	18bf      	adds	r7, r7, r2
   179a4:	e748      	b.n	17838 <__aeabi_dsub+0x4ac>
   179a6:	2400      	movs	r4, #0
   179a8:	e7d0      	b.n	1794c <__aeabi_dsub+0x5c0>
   179aa:	2400      	movs	r4, #0
   179ac:	e7f3      	b.n	17996 <__aeabi_dsub+0x60a>
   179ae:	46c0      	nop			; (mov r8, r8)
   179b0:	000007ff 	.word	0x000007ff
   179b4:	ff7fffff 	.word	0xff7fffff

000179b8 <__aeabi_dcmpun>:
   179b8:	b570      	push	{r4, r5, r6, lr}
   179ba:	4e0e      	ldr	r6, [pc, #56]	; (179f4 <__aeabi_dcmpun+0x3c>)
   179bc:	030d      	lsls	r5, r1, #12
   179be:	031c      	lsls	r4, r3, #12
   179c0:	0049      	lsls	r1, r1, #1
   179c2:	005b      	lsls	r3, r3, #1
   179c4:	0b2d      	lsrs	r5, r5, #12
   179c6:	0d49      	lsrs	r1, r1, #21
   179c8:	0b24      	lsrs	r4, r4, #12
   179ca:	0d5b      	lsrs	r3, r3, #21
   179cc:	42b1      	cmp	r1, r6
   179ce:	d004      	beq.n	179da <__aeabi_dcmpun+0x22>
   179d0:	4908      	ldr	r1, [pc, #32]	; (179f4 <__aeabi_dcmpun+0x3c>)
   179d2:	2000      	movs	r0, #0
   179d4:	428b      	cmp	r3, r1
   179d6:	d008      	beq.n	179ea <__aeabi_dcmpun+0x32>
   179d8:	bd70      	pop	{r4, r5, r6, pc}
   179da:	4305      	orrs	r5, r0
   179dc:	2001      	movs	r0, #1
   179de:	2d00      	cmp	r5, #0
   179e0:	d1fa      	bne.n	179d8 <__aeabi_dcmpun+0x20>
   179e2:	4904      	ldr	r1, [pc, #16]	; (179f4 <__aeabi_dcmpun+0x3c>)
   179e4:	2000      	movs	r0, #0
   179e6:	428b      	cmp	r3, r1
   179e8:	d1f6      	bne.n	179d8 <__aeabi_dcmpun+0x20>
   179ea:	4314      	orrs	r4, r2
   179ec:	0020      	movs	r0, r4
   179ee:	1e44      	subs	r4, r0, #1
   179f0:	41a0      	sbcs	r0, r4
   179f2:	e7f1      	b.n	179d8 <__aeabi_dcmpun+0x20>
   179f4:	000007ff 	.word	0x000007ff

000179f8 <__aeabi_d2iz>:
   179f8:	b530      	push	{r4, r5, lr}
   179fa:	4d13      	ldr	r5, [pc, #76]	; (17a48 <__aeabi_d2iz+0x50>)
   179fc:	030a      	lsls	r2, r1, #12
   179fe:	004b      	lsls	r3, r1, #1
   17a00:	0b12      	lsrs	r2, r2, #12
   17a02:	0d5b      	lsrs	r3, r3, #21
   17a04:	0fc9      	lsrs	r1, r1, #31
   17a06:	2400      	movs	r4, #0
   17a08:	42ab      	cmp	r3, r5
   17a0a:	dd10      	ble.n	17a2e <__aeabi_d2iz+0x36>
   17a0c:	4c0f      	ldr	r4, [pc, #60]	; (17a4c <__aeabi_d2iz+0x54>)
   17a0e:	42a3      	cmp	r3, r4
   17a10:	dc0f      	bgt.n	17a32 <__aeabi_d2iz+0x3a>
   17a12:	2480      	movs	r4, #128	; 0x80
   17a14:	4d0e      	ldr	r5, [pc, #56]	; (17a50 <__aeabi_d2iz+0x58>)
   17a16:	0364      	lsls	r4, r4, #13
   17a18:	4322      	orrs	r2, r4
   17a1a:	1aed      	subs	r5, r5, r3
   17a1c:	2d1f      	cmp	r5, #31
   17a1e:	dd0b      	ble.n	17a38 <__aeabi_d2iz+0x40>
   17a20:	480c      	ldr	r0, [pc, #48]	; (17a54 <__aeabi_d2iz+0x5c>)
   17a22:	1ac3      	subs	r3, r0, r3
   17a24:	40da      	lsrs	r2, r3
   17a26:	4254      	negs	r4, r2
   17a28:	2900      	cmp	r1, #0
   17a2a:	d100      	bne.n	17a2e <__aeabi_d2iz+0x36>
   17a2c:	0014      	movs	r4, r2
   17a2e:	0020      	movs	r0, r4
   17a30:	bd30      	pop	{r4, r5, pc}
   17a32:	4b09      	ldr	r3, [pc, #36]	; (17a58 <__aeabi_d2iz+0x60>)
   17a34:	18cc      	adds	r4, r1, r3
   17a36:	e7fa      	b.n	17a2e <__aeabi_d2iz+0x36>
   17a38:	4c08      	ldr	r4, [pc, #32]	; (17a5c <__aeabi_d2iz+0x64>)
   17a3a:	40e8      	lsrs	r0, r5
   17a3c:	46a4      	mov	ip, r4
   17a3e:	4463      	add	r3, ip
   17a40:	409a      	lsls	r2, r3
   17a42:	4302      	orrs	r2, r0
   17a44:	e7ef      	b.n	17a26 <__aeabi_d2iz+0x2e>
   17a46:	46c0      	nop			; (mov r8, r8)
   17a48:	000003fe 	.word	0x000003fe
   17a4c:	0000041d 	.word	0x0000041d
   17a50:	00000433 	.word	0x00000433
   17a54:	00000413 	.word	0x00000413
   17a58:	7fffffff 	.word	0x7fffffff
   17a5c:	fffffbed 	.word	0xfffffbed

00017a60 <__aeabi_i2d>:
   17a60:	b570      	push	{r4, r5, r6, lr}
   17a62:	2800      	cmp	r0, #0
   17a64:	d030      	beq.n	17ac8 <__aeabi_i2d+0x68>
   17a66:	17c3      	asrs	r3, r0, #31
   17a68:	18c4      	adds	r4, r0, r3
   17a6a:	405c      	eors	r4, r3
   17a6c:	0fc5      	lsrs	r5, r0, #31
   17a6e:	0020      	movs	r0, r4
   17a70:	f000 f8c2 	bl	17bf8 <__clzsi2>
   17a74:	4b17      	ldr	r3, [pc, #92]	; (17ad4 <__aeabi_i2d+0x74>)
   17a76:	4a18      	ldr	r2, [pc, #96]	; (17ad8 <__aeabi_i2d+0x78>)
   17a78:	1a1b      	subs	r3, r3, r0
   17a7a:	1ad2      	subs	r2, r2, r3
   17a7c:	2a1f      	cmp	r2, #31
   17a7e:	dd18      	ble.n	17ab2 <__aeabi_i2d+0x52>
   17a80:	4a16      	ldr	r2, [pc, #88]	; (17adc <__aeabi_i2d+0x7c>)
   17a82:	1ad2      	subs	r2, r2, r3
   17a84:	4094      	lsls	r4, r2
   17a86:	2200      	movs	r2, #0
   17a88:	0324      	lsls	r4, r4, #12
   17a8a:	055b      	lsls	r3, r3, #21
   17a8c:	0b24      	lsrs	r4, r4, #12
   17a8e:	0d5b      	lsrs	r3, r3, #21
   17a90:	2100      	movs	r1, #0
   17a92:	0010      	movs	r0, r2
   17a94:	0324      	lsls	r4, r4, #12
   17a96:	0d0a      	lsrs	r2, r1, #20
   17a98:	0b24      	lsrs	r4, r4, #12
   17a9a:	0512      	lsls	r2, r2, #20
   17a9c:	4322      	orrs	r2, r4
   17a9e:	4c10      	ldr	r4, [pc, #64]	; (17ae0 <__aeabi_i2d+0x80>)
   17aa0:	051b      	lsls	r3, r3, #20
   17aa2:	4022      	ands	r2, r4
   17aa4:	4313      	orrs	r3, r2
   17aa6:	005b      	lsls	r3, r3, #1
   17aa8:	07ed      	lsls	r5, r5, #31
   17aaa:	085b      	lsrs	r3, r3, #1
   17aac:	432b      	orrs	r3, r5
   17aae:	0019      	movs	r1, r3
   17ab0:	bd70      	pop	{r4, r5, r6, pc}
   17ab2:	0021      	movs	r1, r4
   17ab4:	4091      	lsls	r1, r2
   17ab6:	000a      	movs	r2, r1
   17ab8:	210b      	movs	r1, #11
   17aba:	1a08      	subs	r0, r1, r0
   17abc:	40c4      	lsrs	r4, r0
   17abe:	055b      	lsls	r3, r3, #21
   17ac0:	0324      	lsls	r4, r4, #12
   17ac2:	0b24      	lsrs	r4, r4, #12
   17ac4:	0d5b      	lsrs	r3, r3, #21
   17ac6:	e7e3      	b.n	17a90 <__aeabi_i2d+0x30>
   17ac8:	2500      	movs	r5, #0
   17aca:	2300      	movs	r3, #0
   17acc:	2400      	movs	r4, #0
   17ace:	2200      	movs	r2, #0
   17ad0:	e7de      	b.n	17a90 <__aeabi_i2d+0x30>
   17ad2:	46c0      	nop			; (mov r8, r8)
   17ad4:	0000041e 	.word	0x0000041e
   17ad8:	00000433 	.word	0x00000433
   17adc:	00000413 	.word	0x00000413
   17ae0:	800fffff 	.word	0x800fffff

00017ae4 <__aeabi_ui2d>:
   17ae4:	b510      	push	{r4, lr}
   17ae6:	1e04      	subs	r4, r0, #0
   17ae8:	d028      	beq.n	17b3c <__aeabi_ui2d+0x58>
   17aea:	f000 f885 	bl	17bf8 <__clzsi2>
   17aee:	4b15      	ldr	r3, [pc, #84]	; (17b44 <__aeabi_ui2d+0x60>)
   17af0:	4a15      	ldr	r2, [pc, #84]	; (17b48 <__aeabi_ui2d+0x64>)
   17af2:	1a1b      	subs	r3, r3, r0
   17af4:	1ad2      	subs	r2, r2, r3
   17af6:	2a1f      	cmp	r2, #31
   17af8:	dd15      	ble.n	17b26 <__aeabi_ui2d+0x42>
   17afa:	4a14      	ldr	r2, [pc, #80]	; (17b4c <__aeabi_ui2d+0x68>)
   17afc:	1ad2      	subs	r2, r2, r3
   17afe:	4094      	lsls	r4, r2
   17b00:	2200      	movs	r2, #0
   17b02:	0324      	lsls	r4, r4, #12
   17b04:	055b      	lsls	r3, r3, #21
   17b06:	0b24      	lsrs	r4, r4, #12
   17b08:	0d5b      	lsrs	r3, r3, #21
   17b0a:	2100      	movs	r1, #0
   17b0c:	0010      	movs	r0, r2
   17b0e:	0324      	lsls	r4, r4, #12
   17b10:	0d0a      	lsrs	r2, r1, #20
   17b12:	0b24      	lsrs	r4, r4, #12
   17b14:	0512      	lsls	r2, r2, #20
   17b16:	4322      	orrs	r2, r4
   17b18:	4c0d      	ldr	r4, [pc, #52]	; (17b50 <__aeabi_ui2d+0x6c>)
   17b1a:	051b      	lsls	r3, r3, #20
   17b1c:	4022      	ands	r2, r4
   17b1e:	4313      	orrs	r3, r2
   17b20:	005b      	lsls	r3, r3, #1
   17b22:	0859      	lsrs	r1, r3, #1
   17b24:	bd10      	pop	{r4, pc}
   17b26:	0021      	movs	r1, r4
   17b28:	4091      	lsls	r1, r2
   17b2a:	000a      	movs	r2, r1
   17b2c:	210b      	movs	r1, #11
   17b2e:	1a08      	subs	r0, r1, r0
   17b30:	40c4      	lsrs	r4, r0
   17b32:	055b      	lsls	r3, r3, #21
   17b34:	0324      	lsls	r4, r4, #12
   17b36:	0b24      	lsrs	r4, r4, #12
   17b38:	0d5b      	lsrs	r3, r3, #21
   17b3a:	e7e6      	b.n	17b0a <__aeabi_ui2d+0x26>
   17b3c:	2300      	movs	r3, #0
   17b3e:	2400      	movs	r4, #0
   17b40:	2200      	movs	r2, #0
   17b42:	e7e2      	b.n	17b0a <__aeabi_ui2d+0x26>
   17b44:	0000041e 	.word	0x0000041e
   17b48:	00000433 	.word	0x00000433
   17b4c:	00000413 	.word	0x00000413
   17b50:	800fffff 	.word	0x800fffff

00017b54 <__aeabi_f2d>:
   17b54:	0041      	lsls	r1, r0, #1
   17b56:	0e09      	lsrs	r1, r1, #24
   17b58:	1c4b      	adds	r3, r1, #1
   17b5a:	b570      	push	{r4, r5, r6, lr}
   17b5c:	b2db      	uxtb	r3, r3
   17b5e:	0246      	lsls	r6, r0, #9
   17b60:	0a75      	lsrs	r5, r6, #9
   17b62:	0fc4      	lsrs	r4, r0, #31
   17b64:	2b01      	cmp	r3, #1
   17b66:	dd14      	ble.n	17b92 <__aeabi_f2d+0x3e>
   17b68:	23e0      	movs	r3, #224	; 0xe0
   17b6a:	009b      	lsls	r3, r3, #2
   17b6c:	076d      	lsls	r5, r5, #29
   17b6e:	0b36      	lsrs	r6, r6, #12
   17b70:	18cb      	adds	r3, r1, r3
   17b72:	2100      	movs	r1, #0
   17b74:	0d0a      	lsrs	r2, r1, #20
   17b76:	0028      	movs	r0, r5
   17b78:	0512      	lsls	r2, r2, #20
   17b7a:	4d1c      	ldr	r5, [pc, #112]	; (17bec <__aeabi_f2d+0x98>)
   17b7c:	4332      	orrs	r2, r6
   17b7e:	055b      	lsls	r3, r3, #21
   17b80:	402a      	ands	r2, r5
   17b82:	085b      	lsrs	r3, r3, #1
   17b84:	4313      	orrs	r3, r2
   17b86:	005b      	lsls	r3, r3, #1
   17b88:	07e4      	lsls	r4, r4, #31
   17b8a:	085b      	lsrs	r3, r3, #1
   17b8c:	4323      	orrs	r3, r4
   17b8e:	0019      	movs	r1, r3
   17b90:	bd70      	pop	{r4, r5, r6, pc}
   17b92:	2900      	cmp	r1, #0
   17b94:	d114      	bne.n	17bc0 <__aeabi_f2d+0x6c>
   17b96:	2d00      	cmp	r5, #0
   17b98:	d01e      	beq.n	17bd8 <__aeabi_f2d+0x84>
   17b9a:	0028      	movs	r0, r5
   17b9c:	f000 f82c 	bl	17bf8 <__clzsi2>
   17ba0:	280a      	cmp	r0, #10
   17ba2:	dc1c      	bgt.n	17bde <__aeabi_f2d+0x8a>
   17ba4:	230b      	movs	r3, #11
   17ba6:	002a      	movs	r2, r5
   17ba8:	1a1b      	subs	r3, r3, r0
   17baa:	40da      	lsrs	r2, r3
   17bac:	0003      	movs	r3, r0
   17bae:	3315      	adds	r3, #21
   17bb0:	409d      	lsls	r5, r3
   17bb2:	4b0f      	ldr	r3, [pc, #60]	; (17bf0 <__aeabi_f2d+0x9c>)
   17bb4:	0312      	lsls	r2, r2, #12
   17bb6:	1a1b      	subs	r3, r3, r0
   17bb8:	055b      	lsls	r3, r3, #21
   17bba:	0b16      	lsrs	r6, r2, #12
   17bbc:	0d5b      	lsrs	r3, r3, #21
   17bbe:	e7d8      	b.n	17b72 <__aeabi_f2d+0x1e>
   17bc0:	2d00      	cmp	r5, #0
   17bc2:	d006      	beq.n	17bd2 <__aeabi_f2d+0x7e>
   17bc4:	0b32      	lsrs	r2, r6, #12
   17bc6:	2680      	movs	r6, #128	; 0x80
   17bc8:	0336      	lsls	r6, r6, #12
   17bca:	076d      	lsls	r5, r5, #29
   17bcc:	4316      	orrs	r6, r2
   17bce:	4b09      	ldr	r3, [pc, #36]	; (17bf4 <__aeabi_f2d+0xa0>)
   17bd0:	e7cf      	b.n	17b72 <__aeabi_f2d+0x1e>
   17bd2:	4b08      	ldr	r3, [pc, #32]	; (17bf4 <__aeabi_f2d+0xa0>)
   17bd4:	2600      	movs	r6, #0
   17bd6:	e7cc      	b.n	17b72 <__aeabi_f2d+0x1e>
   17bd8:	2300      	movs	r3, #0
   17bda:	2600      	movs	r6, #0
   17bdc:	e7c9      	b.n	17b72 <__aeabi_f2d+0x1e>
   17bde:	0003      	movs	r3, r0
   17be0:	002a      	movs	r2, r5
   17be2:	3b0b      	subs	r3, #11
   17be4:	409a      	lsls	r2, r3
   17be6:	2500      	movs	r5, #0
   17be8:	e7e3      	b.n	17bb2 <__aeabi_f2d+0x5e>
   17bea:	46c0      	nop			; (mov r8, r8)
   17bec:	800fffff 	.word	0x800fffff
   17bf0:	00000389 	.word	0x00000389
   17bf4:	000007ff 	.word	0x000007ff

00017bf8 <__clzsi2>:
   17bf8:	211c      	movs	r1, #28
   17bfa:	2301      	movs	r3, #1
   17bfc:	041b      	lsls	r3, r3, #16
   17bfe:	4298      	cmp	r0, r3
   17c00:	d301      	bcc.n	17c06 <__clzsi2+0xe>
   17c02:	0c00      	lsrs	r0, r0, #16
   17c04:	3910      	subs	r1, #16
   17c06:	0a1b      	lsrs	r3, r3, #8
   17c08:	4298      	cmp	r0, r3
   17c0a:	d301      	bcc.n	17c10 <__clzsi2+0x18>
   17c0c:	0a00      	lsrs	r0, r0, #8
   17c0e:	3908      	subs	r1, #8
   17c10:	091b      	lsrs	r3, r3, #4
   17c12:	4298      	cmp	r0, r3
   17c14:	d301      	bcc.n	17c1a <__clzsi2+0x22>
   17c16:	0900      	lsrs	r0, r0, #4
   17c18:	3904      	subs	r1, #4
   17c1a:	a202      	add	r2, pc, #8	; (adr r2, 17c24 <__clzsi2+0x2c>)
   17c1c:	5c10      	ldrb	r0, [r2, r0]
   17c1e:	1840      	adds	r0, r0, r1
   17c20:	4770      	bx	lr
   17c22:	46c0      	nop			; (mov r8, r8)
   17c24:	02020304 	.word	0x02020304
   17c28:	01010101 	.word	0x01010101
	...

00017c34 <__clzdi2>:
   17c34:	b510      	push	{r4, lr}
   17c36:	2900      	cmp	r1, #0
   17c38:	d103      	bne.n	17c42 <__clzdi2+0xe>
   17c3a:	f7ff ffdd 	bl	17bf8 <__clzsi2>
   17c3e:	3020      	adds	r0, #32
   17c40:	e002      	b.n	17c48 <__clzdi2+0x14>
   17c42:	1c08      	adds	r0, r1, #0
   17c44:	f7ff ffd8 	bl	17bf8 <__clzsi2>
   17c48:	bd10      	pop	{r4, pc}
   17c4a:	46c0      	nop			; (mov r8, r8)

00017c4c <atoi>:
   17c4c:	b510      	push	{r4, lr}
   17c4e:	220a      	movs	r2, #10
   17c50:	2100      	movs	r1, #0
   17c52:	f000 fadd 	bl	18210 <strtol>
   17c56:	bd10      	pop	{r4, pc}

00017c58 <calloc>:
   17c58:	b510      	push	{r4, lr}
   17c5a:	4b03      	ldr	r3, [pc, #12]	; (17c68 <calloc+0x10>)
   17c5c:	000a      	movs	r2, r1
   17c5e:	0001      	movs	r1, r0
   17c60:	6818      	ldr	r0, [r3, #0]
   17c62:	f000 f888 	bl	17d76 <_calloc_r>
   17c66:	bd10      	pop	{r4, pc}
   17c68:	2000002c 	.word	0x2000002c

00017c6c <__errno>:
   17c6c:	4b01      	ldr	r3, [pc, #4]	; (17c74 <__errno+0x8>)
   17c6e:	6818      	ldr	r0, [r3, #0]
   17c70:	4770      	bx	lr
   17c72:	46c0      	nop			; (mov r8, r8)
   17c74:	2000002c 	.word	0x2000002c

00017c78 <__libc_init_array>:
   17c78:	b570      	push	{r4, r5, r6, lr}
   17c7a:	2600      	movs	r6, #0
   17c7c:	4d0c      	ldr	r5, [pc, #48]	; (17cb0 <__libc_init_array+0x38>)
   17c7e:	4c0d      	ldr	r4, [pc, #52]	; (17cb4 <__libc_init_array+0x3c>)
   17c80:	1b64      	subs	r4, r4, r5
   17c82:	10a4      	asrs	r4, r4, #2
   17c84:	42a6      	cmp	r6, r4
   17c86:	d109      	bne.n	17c9c <__libc_init_array+0x24>
   17c88:	2600      	movs	r6, #0
   17c8a:	f002 f893 	bl	19db4 <_init>
   17c8e:	4d0a      	ldr	r5, [pc, #40]	; (17cb8 <__libc_init_array+0x40>)
   17c90:	4c0a      	ldr	r4, [pc, #40]	; (17cbc <__libc_init_array+0x44>)
   17c92:	1b64      	subs	r4, r4, r5
   17c94:	10a4      	asrs	r4, r4, #2
   17c96:	42a6      	cmp	r6, r4
   17c98:	d105      	bne.n	17ca6 <__libc_init_array+0x2e>
   17c9a:	bd70      	pop	{r4, r5, r6, pc}
   17c9c:	00b3      	lsls	r3, r6, #2
   17c9e:	58eb      	ldr	r3, [r5, r3]
   17ca0:	4798      	blx	r3
   17ca2:	3601      	adds	r6, #1
   17ca4:	e7ee      	b.n	17c84 <__libc_init_array+0xc>
   17ca6:	00b3      	lsls	r3, r6, #2
   17ca8:	58eb      	ldr	r3, [r5, r3]
   17caa:	4798      	blx	r3
   17cac:	3601      	adds	r6, #1
   17cae:	e7f2      	b.n	17c96 <__libc_init_array+0x1e>
   17cb0:	00019dc0 	.word	0x00019dc0
   17cb4:	00019dc0 	.word	0x00019dc0
   17cb8:	00019dc0 	.word	0x00019dc0
   17cbc:	00019dc4 	.word	0x00019dc4

00017cc0 <__locale_ctype_ptr_l>:
   17cc0:	30ec      	adds	r0, #236	; 0xec
   17cc2:	6800      	ldr	r0, [r0, #0]
   17cc4:	4770      	bx	lr
	...

00017cc8 <__locale_ctype_ptr>:
   17cc8:	4b04      	ldr	r3, [pc, #16]	; (17cdc <__locale_ctype_ptr+0x14>)
   17cca:	681b      	ldr	r3, [r3, #0]
   17ccc:	6a1b      	ldr	r3, [r3, #32]
   17cce:	2b00      	cmp	r3, #0
   17cd0:	d100      	bne.n	17cd4 <__locale_ctype_ptr+0xc>
   17cd2:	4b03      	ldr	r3, [pc, #12]	; (17ce0 <__locale_ctype_ptr+0x18>)
   17cd4:	33ec      	adds	r3, #236	; 0xec
   17cd6:	6818      	ldr	r0, [r3, #0]
   17cd8:	4770      	bx	lr
   17cda:	46c0      	nop			; (mov r8, r8)
   17cdc:	2000002c 	.word	0x2000002c
   17ce0:	20000090 	.word	0x20000090

00017ce4 <malloc>:
   17ce4:	b510      	push	{r4, lr}
   17ce6:	4b03      	ldr	r3, [pc, #12]	; (17cf4 <malloc+0x10>)
   17ce8:	0001      	movs	r1, r0
   17cea:	6818      	ldr	r0, [r3, #0]
   17cec:	f000 f89c 	bl	17e28 <_malloc_r>
   17cf0:	bd10      	pop	{r4, pc}
   17cf2:	46c0      	nop			; (mov r8, r8)
   17cf4:	2000002c 	.word	0x2000002c

00017cf8 <free>:
   17cf8:	b510      	push	{r4, lr}
   17cfa:	4b03      	ldr	r3, [pc, #12]	; (17d08 <free+0x10>)
   17cfc:	0001      	movs	r1, r0
   17cfe:	6818      	ldr	r0, [r3, #0]
   17d00:	f000 f848 	bl	17d94 <_free_r>
   17d04:	bd10      	pop	{r4, pc}
   17d06:	46c0      	nop			; (mov r8, r8)
   17d08:	2000002c 	.word	0x2000002c

00017d0c <__ascii_mbtowc>:
   17d0c:	b082      	sub	sp, #8
   17d0e:	2900      	cmp	r1, #0
   17d10:	d100      	bne.n	17d14 <__ascii_mbtowc+0x8>
   17d12:	a901      	add	r1, sp, #4
   17d14:	1e10      	subs	r0, r2, #0
   17d16:	d006      	beq.n	17d26 <__ascii_mbtowc+0x1a>
   17d18:	2b00      	cmp	r3, #0
   17d1a:	d006      	beq.n	17d2a <__ascii_mbtowc+0x1e>
   17d1c:	7813      	ldrb	r3, [r2, #0]
   17d1e:	600b      	str	r3, [r1, #0]
   17d20:	7810      	ldrb	r0, [r2, #0]
   17d22:	1e43      	subs	r3, r0, #1
   17d24:	4198      	sbcs	r0, r3
   17d26:	b002      	add	sp, #8
   17d28:	4770      	bx	lr
   17d2a:	2002      	movs	r0, #2
   17d2c:	4240      	negs	r0, r0
   17d2e:	e7fa      	b.n	17d26 <__ascii_mbtowc+0x1a>

00017d30 <memcpy>:
   17d30:	2300      	movs	r3, #0
   17d32:	b510      	push	{r4, lr}
   17d34:	429a      	cmp	r2, r3
   17d36:	d100      	bne.n	17d3a <memcpy+0xa>
   17d38:	bd10      	pop	{r4, pc}
   17d3a:	5ccc      	ldrb	r4, [r1, r3]
   17d3c:	54c4      	strb	r4, [r0, r3]
   17d3e:	3301      	adds	r3, #1
   17d40:	e7f8      	b.n	17d34 <memcpy+0x4>

00017d42 <memmove>:
   17d42:	b510      	push	{r4, lr}
   17d44:	4288      	cmp	r0, r1
   17d46:	d902      	bls.n	17d4e <memmove+0xc>
   17d48:	188b      	adds	r3, r1, r2
   17d4a:	4298      	cmp	r0, r3
   17d4c:	d308      	bcc.n	17d60 <memmove+0x1e>
   17d4e:	2300      	movs	r3, #0
   17d50:	429a      	cmp	r2, r3
   17d52:	d007      	beq.n	17d64 <memmove+0x22>
   17d54:	5ccc      	ldrb	r4, [r1, r3]
   17d56:	54c4      	strb	r4, [r0, r3]
   17d58:	3301      	adds	r3, #1
   17d5a:	e7f9      	b.n	17d50 <memmove+0xe>
   17d5c:	5c8b      	ldrb	r3, [r1, r2]
   17d5e:	5483      	strb	r3, [r0, r2]
   17d60:	3a01      	subs	r2, #1
   17d62:	d2fb      	bcs.n	17d5c <memmove+0x1a>
   17d64:	bd10      	pop	{r4, pc}

00017d66 <memset>:
   17d66:	0003      	movs	r3, r0
   17d68:	1882      	adds	r2, r0, r2
   17d6a:	4293      	cmp	r3, r2
   17d6c:	d100      	bne.n	17d70 <memset+0xa>
   17d6e:	4770      	bx	lr
   17d70:	7019      	strb	r1, [r3, #0]
   17d72:	3301      	adds	r3, #1
   17d74:	e7f9      	b.n	17d6a <memset+0x4>

00017d76 <_calloc_r>:
   17d76:	434a      	muls	r2, r1
   17d78:	b570      	push	{r4, r5, r6, lr}
   17d7a:	0011      	movs	r1, r2
   17d7c:	0014      	movs	r4, r2
   17d7e:	f000 f853 	bl	17e28 <_malloc_r>
   17d82:	1e05      	subs	r5, r0, #0
   17d84:	d003      	beq.n	17d8e <_calloc_r+0x18>
   17d86:	0022      	movs	r2, r4
   17d88:	2100      	movs	r1, #0
   17d8a:	f7ff ffec 	bl	17d66 <memset>
   17d8e:	0028      	movs	r0, r5
   17d90:	bd70      	pop	{r4, r5, r6, pc}
	...

00017d94 <_free_r>:
   17d94:	b570      	push	{r4, r5, r6, lr}
   17d96:	0005      	movs	r5, r0
   17d98:	2900      	cmp	r1, #0
   17d9a:	d010      	beq.n	17dbe <_free_r+0x2a>
   17d9c:	1f0c      	subs	r4, r1, #4
   17d9e:	6823      	ldr	r3, [r4, #0]
   17da0:	2b00      	cmp	r3, #0
   17da2:	da00      	bge.n	17da6 <_free_r+0x12>
   17da4:	18e4      	adds	r4, r4, r3
   17da6:	0028      	movs	r0, r5
   17da8:	f000 fab4 	bl	18314 <__malloc_lock>
   17dac:	4a1d      	ldr	r2, [pc, #116]	; (17e24 <_free_r+0x90>)
   17dae:	6813      	ldr	r3, [r2, #0]
   17db0:	2b00      	cmp	r3, #0
   17db2:	d105      	bne.n	17dc0 <_free_r+0x2c>
   17db4:	6063      	str	r3, [r4, #4]
   17db6:	6014      	str	r4, [r2, #0]
   17db8:	0028      	movs	r0, r5
   17dba:	f000 faac 	bl	18316 <__malloc_unlock>
   17dbe:	bd70      	pop	{r4, r5, r6, pc}
   17dc0:	42a3      	cmp	r3, r4
   17dc2:	d909      	bls.n	17dd8 <_free_r+0x44>
   17dc4:	6821      	ldr	r1, [r4, #0]
   17dc6:	1860      	adds	r0, r4, r1
   17dc8:	4283      	cmp	r3, r0
   17dca:	d1f3      	bne.n	17db4 <_free_r+0x20>
   17dcc:	6818      	ldr	r0, [r3, #0]
   17dce:	685b      	ldr	r3, [r3, #4]
   17dd0:	1841      	adds	r1, r0, r1
   17dd2:	6021      	str	r1, [r4, #0]
   17dd4:	e7ee      	b.n	17db4 <_free_r+0x20>
   17dd6:	0013      	movs	r3, r2
   17dd8:	685a      	ldr	r2, [r3, #4]
   17dda:	2a00      	cmp	r2, #0
   17ddc:	d001      	beq.n	17de2 <_free_r+0x4e>
   17dde:	42a2      	cmp	r2, r4
   17de0:	d9f9      	bls.n	17dd6 <_free_r+0x42>
   17de2:	6819      	ldr	r1, [r3, #0]
   17de4:	1858      	adds	r0, r3, r1
   17de6:	42a0      	cmp	r0, r4
   17de8:	d10b      	bne.n	17e02 <_free_r+0x6e>
   17dea:	6820      	ldr	r0, [r4, #0]
   17dec:	1809      	adds	r1, r1, r0
   17dee:	1858      	adds	r0, r3, r1
   17df0:	6019      	str	r1, [r3, #0]
   17df2:	4282      	cmp	r2, r0
   17df4:	d1e0      	bne.n	17db8 <_free_r+0x24>
   17df6:	6810      	ldr	r0, [r2, #0]
   17df8:	6852      	ldr	r2, [r2, #4]
   17dfa:	1841      	adds	r1, r0, r1
   17dfc:	6019      	str	r1, [r3, #0]
   17dfe:	605a      	str	r2, [r3, #4]
   17e00:	e7da      	b.n	17db8 <_free_r+0x24>
   17e02:	42a0      	cmp	r0, r4
   17e04:	d902      	bls.n	17e0c <_free_r+0x78>
   17e06:	230c      	movs	r3, #12
   17e08:	602b      	str	r3, [r5, #0]
   17e0a:	e7d5      	b.n	17db8 <_free_r+0x24>
   17e0c:	6821      	ldr	r1, [r4, #0]
   17e0e:	1860      	adds	r0, r4, r1
   17e10:	4282      	cmp	r2, r0
   17e12:	d103      	bne.n	17e1c <_free_r+0x88>
   17e14:	6810      	ldr	r0, [r2, #0]
   17e16:	6852      	ldr	r2, [r2, #4]
   17e18:	1841      	adds	r1, r0, r1
   17e1a:	6021      	str	r1, [r4, #0]
   17e1c:	6062      	str	r2, [r4, #4]
   17e1e:	605c      	str	r4, [r3, #4]
   17e20:	e7ca      	b.n	17db8 <_free_r+0x24>
   17e22:	46c0      	nop			; (mov r8, r8)
   17e24:	20000514 	.word	0x20000514

00017e28 <_malloc_r>:
   17e28:	2303      	movs	r3, #3
   17e2a:	b570      	push	{r4, r5, r6, lr}
   17e2c:	1ccd      	adds	r5, r1, #3
   17e2e:	439d      	bics	r5, r3
   17e30:	3508      	adds	r5, #8
   17e32:	0006      	movs	r6, r0
   17e34:	2d0c      	cmp	r5, #12
   17e36:	d21e      	bcs.n	17e76 <_malloc_r+0x4e>
   17e38:	250c      	movs	r5, #12
   17e3a:	42a9      	cmp	r1, r5
   17e3c:	d81d      	bhi.n	17e7a <_malloc_r+0x52>
   17e3e:	0030      	movs	r0, r6
   17e40:	f000 fa68 	bl	18314 <__malloc_lock>
   17e44:	4a25      	ldr	r2, [pc, #148]	; (17edc <_malloc_r+0xb4>)
   17e46:	6814      	ldr	r4, [r2, #0]
   17e48:	0021      	movs	r1, r4
   17e4a:	2900      	cmp	r1, #0
   17e4c:	d119      	bne.n	17e82 <_malloc_r+0x5a>
   17e4e:	4c24      	ldr	r4, [pc, #144]	; (17ee0 <_malloc_r+0xb8>)
   17e50:	6823      	ldr	r3, [r4, #0]
   17e52:	2b00      	cmp	r3, #0
   17e54:	d103      	bne.n	17e5e <_malloc_r+0x36>
   17e56:	0030      	movs	r0, r6
   17e58:	f000 f844 	bl	17ee4 <_sbrk_r>
   17e5c:	6020      	str	r0, [r4, #0]
   17e5e:	0029      	movs	r1, r5
   17e60:	0030      	movs	r0, r6
   17e62:	f000 f83f 	bl	17ee4 <_sbrk_r>
   17e66:	1c43      	adds	r3, r0, #1
   17e68:	d12c      	bne.n	17ec4 <_malloc_r+0x9c>
   17e6a:	230c      	movs	r3, #12
   17e6c:	0030      	movs	r0, r6
   17e6e:	6033      	str	r3, [r6, #0]
   17e70:	f000 fa51 	bl	18316 <__malloc_unlock>
   17e74:	e003      	b.n	17e7e <_malloc_r+0x56>
   17e76:	2d00      	cmp	r5, #0
   17e78:	dadf      	bge.n	17e3a <_malloc_r+0x12>
   17e7a:	230c      	movs	r3, #12
   17e7c:	6033      	str	r3, [r6, #0]
   17e7e:	2000      	movs	r0, #0
   17e80:	bd70      	pop	{r4, r5, r6, pc}
   17e82:	680b      	ldr	r3, [r1, #0]
   17e84:	1b5b      	subs	r3, r3, r5
   17e86:	d41a      	bmi.n	17ebe <_malloc_r+0x96>
   17e88:	2b0b      	cmp	r3, #11
   17e8a:	d903      	bls.n	17e94 <_malloc_r+0x6c>
   17e8c:	600b      	str	r3, [r1, #0]
   17e8e:	18cc      	adds	r4, r1, r3
   17e90:	6025      	str	r5, [r4, #0]
   17e92:	e003      	b.n	17e9c <_malloc_r+0x74>
   17e94:	428c      	cmp	r4, r1
   17e96:	d10e      	bne.n	17eb6 <_malloc_r+0x8e>
   17e98:	6863      	ldr	r3, [r4, #4]
   17e9a:	6013      	str	r3, [r2, #0]
   17e9c:	0030      	movs	r0, r6
   17e9e:	f000 fa3a 	bl	18316 <__malloc_unlock>
   17ea2:	0020      	movs	r0, r4
   17ea4:	2207      	movs	r2, #7
   17ea6:	300b      	adds	r0, #11
   17ea8:	1d23      	adds	r3, r4, #4
   17eaa:	4390      	bics	r0, r2
   17eac:	1ac3      	subs	r3, r0, r3
   17eae:	d0e7      	beq.n	17e80 <_malloc_r+0x58>
   17eb0:	425a      	negs	r2, r3
   17eb2:	50e2      	str	r2, [r4, r3]
   17eb4:	e7e4      	b.n	17e80 <_malloc_r+0x58>
   17eb6:	684b      	ldr	r3, [r1, #4]
   17eb8:	6063      	str	r3, [r4, #4]
   17eba:	000c      	movs	r4, r1
   17ebc:	e7ee      	b.n	17e9c <_malloc_r+0x74>
   17ebe:	000c      	movs	r4, r1
   17ec0:	6849      	ldr	r1, [r1, #4]
   17ec2:	e7c2      	b.n	17e4a <_malloc_r+0x22>
   17ec4:	2303      	movs	r3, #3
   17ec6:	1cc4      	adds	r4, r0, #3
   17ec8:	439c      	bics	r4, r3
   17eca:	42a0      	cmp	r0, r4
   17ecc:	d0e0      	beq.n	17e90 <_malloc_r+0x68>
   17ece:	1a21      	subs	r1, r4, r0
   17ed0:	0030      	movs	r0, r6
   17ed2:	f000 f807 	bl	17ee4 <_sbrk_r>
   17ed6:	1c43      	adds	r3, r0, #1
   17ed8:	d1da      	bne.n	17e90 <_malloc_r+0x68>
   17eda:	e7c6      	b.n	17e6a <_malloc_r+0x42>
   17edc:	20000514 	.word	0x20000514
   17ee0:	20000518 	.word	0x20000518

00017ee4 <_sbrk_r>:
   17ee4:	2300      	movs	r3, #0
   17ee6:	b570      	push	{r4, r5, r6, lr}
   17ee8:	4c06      	ldr	r4, [pc, #24]	; (17f04 <_sbrk_r+0x20>)
   17eea:	0005      	movs	r5, r0
   17eec:	0008      	movs	r0, r1
   17eee:	6023      	str	r3, [r4, #0]
   17ef0:	f7fb ff9e 	bl	13e30 <_sbrk>
   17ef4:	1c43      	adds	r3, r0, #1
   17ef6:	d103      	bne.n	17f00 <_sbrk_r+0x1c>
   17ef8:	6823      	ldr	r3, [r4, #0]
   17efa:	2b00      	cmp	r3, #0
   17efc:	d000      	beq.n	17f00 <_sbrk_r+0x1c>
   17efe:	602b      	str	r3, [r5, #0]
   17f00:	bd70      	pop	{r4, r5, r6, pc}
   17f02:	46c0      	nop			; (mov r8, r8)
   17f04:	20000938 	.word	0x20000938

00017f08 <sniprintf>:
   17f08:	b40c      	push	{r2, r3}
   17f0a:	b530      	push	{r4, r5, lr}
   17f0c:	4b16      	ldr	r3, [pc, #88]	; (17f68 <sniprintf+0x60>)
   17f0e:	b09d      	sub	sp, #116	; 0x74
   17f10:	1e0c      	subs	r4, r1, #0
   17f12:	681d      	ldr	r5, [r3, #0]
   17f14:	da08      	bge.n	17f28 <sniprintf+0x20>
   17f16:	238b      	movs	r3, #139	; 0x8b
   17f18:	2001      	movs	r0, #1
   17f1a:	602b      	str	r3, [r5, #0]
   17f1c:	4240      	negs	r0, r0
   17f1e:	b01d      	add	sp, #116	; 0x74
   17f20:	bc30      	pop	{r4, r5}
   17f22:	bc08      	pop	{r3}
   17f24:	b002      	add	sp, #8
   17f26:	4718      	bx	r3
   17f28:	2382      	movs	r3, #130	; 0x82
   17f2a:	a902      	add	r1, sp, #8
   17f2c:	009b      	lsls	r3, r3, #2
   17f2e:	818b      	strh	r3, [r1, #12]
   17f30:	2300      	movs	r3, #0
   17f32:	9002      	str	r0, [sp, #8]
   17f34:	6108      	str	r0, [r1, #16]
   17f36:	429c      	cmp	r4, r3
   17f38:	d000      	beq.n	17f3c <sniprintf+0x34>
   17f3a:	1e63      	subs	r3, r4, #1
   17f3c:	608b      	str	r3, [r1, #8]
   17f3e:	614b      	str	r3, [r1, #20]
   17f40:	2301      	movs	r3, #1
   17f42:	425b      	negs	r3, r3
   17f44:	81cb      	strh	r3, [r1, #14]
   17f46:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17f48:	ab21      	add	r3, sp, #132	; 0x84
   17f4a:	0028      	movs	r0, r5
   17f4c:	9301      	str	r3, [sp, #4]
   17f4e:	f000 fa45 	bl	183dc <_svfiprintf_r>
   17f52:	1c43      	adds	r3, r0, #1
   17f54:	da01      	bge.n	17f5a <sniprintf+0x52>
   17f56:	238b      	movs	r3, #139	; 0x8b
   17f58:	602b      	str	r3, [r5, #0]
   17f5a:	2c00      	cmp	r4, #0
   17f5c:	d0df      	beq.n	17f1e <sniprintf+0x16>
   17f5e:	2300      	movs	r3, #0
   17f60:	9a02      	ldr	r2, [sp, #8]
   17f62:	7013      	strb	r3, [r2, #0]
   17f64:	e7db      	b.n	17f1e <sniprintf+0x16>
   17f66:	46c0      	nop			; (mov r8, r8)
   17f68:	2000002c 	.word	0x2000002c

00017f6c <siprintf>:
   17f6c:	b40e      	push	{r1, r2, r3}
   17f6e:	b510      	push	{r4, lr}
   17f70:	b09d      	sub	sp, #116	; 0x74
   17f72:	a902      	add	r1, sp, #8
   17f74:	9002      	str	r0, [sp, #8]
   17f76:	6108      	str	r0, [r1, #16]
   17f78:	480b      	ldr	r0, [pc, #44]	; (17fa8 <siprintf+0x3c>)
   17f7a:	2482      	movs	r4, #130	; 0x82
   17f7c:	6088      	str	r0, [r1, #8]
   17f7e:	6148      	str	r0, [r1, #20]
   17f80:	2001      	movs	r0, #1
   17f82:	4240      	negs	r0, r0
   17f84:	ab1f      	add	r3, sp, #124	; 0x7c
   17f86:	81c8      	strh	r0, [r1, #14]
   17f88:	4808      	ldr	r0, [pc, #32]	; (17fac <siprintf+0x40>)
   17f8a:	cb04      	ldmia	r3!, {r2}
   17f8c:	00a4      	lsls	r4, r4, #2
   17f8e:	6800      	ldr	r0, [r0, #0]
   17f90:	9301      	str	r3, [sp, #4]
   17f92:	818c      	strh	r4, [r1, #12]
   17f94:	f000 fa22 	bl	183dc <_svfiprintf_r>
   17f98:	2300      	movs	r3, #0
   17f9a:	9a02      	ldr	r2, [sp, #8]
   17f9c:	7013      	strb	r3, [r2, #0]
   17f9e:	b01d      	add	sp, #116	; 0x74
   17fa0:	bc10      	pop	{r4}
   17fa2:	bc08      	pop	{r3}
   17fa4:	b003      	add	sp, #12
   17fa6:	4718      	bx	r3
   17fa8:	7fffffff 	.word	0x7fffffff
   17fac:	2000002c 	.word	0x2000002c

00017fb0 <strcat>:
   17fb0:	0002      	movs	r2, r0
   17fb2:	b510      	push	{r4, lr}
   17fb4:	7813      	ldrb	r3, [r2, #0]
   17fb6:	2b00      	cmp	r3, #0
   17fb8:	d105      	bne.n	17fc6 <strcat+0x16>
   17fba:	5ccc      	ldrb	r4, [r1, r3]
   17fbc:	54d4      	strb	r4, [r2, r3]
   17fbe:	3301      	adds	r3, #1
   17fc0:	2c00      	cmp	r4, #0
   17fc2:	d1fa      	bne.n	17fba <strcat+0xa>
   17fc4:	bd10      	pop	{r4, pc}
   17fc6:	3201      	adds	r2, #1
   17fc8:	e7f4      	b.n	17fb4 <strcat+0x4>

00017fca <strchr>:
   17fca:	b2c9      	uxtb	r1, r1
   17fcc:	7803      	ldrb	r3, [r0, #0]
   17fce:	2b00      	cmp	r3, #0
   17fd0:	d004      	beq.n	17fdc <strchr+0x12>
   17fd2:	4299      	cmp	r1, r3
   17fd4:	d100      	bne.n	17fd8 <strchr+0xe>
   17fd6:	4770      	bx	lr
   17fd8:	3001      	adds	r0, #1
   17fda:	e7f7      	b.n	17fcc <strchr+0x2>
   17fdc:	424b      	negs	r3, r1
   17fde:	4159      	adcs	r1, r3
   17fe0:	4249      	negs	r1, r1
   17fe2:	4008      	ands	r0, r1
   17fe4:	e7f7      	b.n	17fd6 <strchr+0xc>

00017fe6 <strcpy>:
   17fe6:	1c03      	adds	r3, r0, #0
   17fe8:	780a      	ldrb	r2, [r1, #0]
   17fea:	3101      	adds	r1, #1
   17fec:	701a      	strb	r2, [r3, #0]
   17fee:	3301      	adds	r3, #1
   17ff0:	2a00      	cmp	r2, #0
   17ff2:	d1f9      	bne.n	17fe8 <strcpy+0x2>
   17ff4:	4770      	bx	lr

00017ff6 <strlen>:
   17ff6:	2300      	movs	r3, #0
   17ff8:	5cc2      	ldrb	r2, [r0, r3]
   17ffa:	3301      	adds	r3, #1
   17ffc:	2a00      	cmp	r2, #0
   17ffe:	d1fb      	bne.n	17ff8 <strlen+0x2>
   18000:	1e58      	subs	r0, r3, #1
   18002:	4770      	bx	lr

00018004 <strncmp>:
   18004:	2300      	movs	r3, #0
   18006:	b530      	push	{r4, r5, lr}
   18008:	429a      	cmp	r2, r3
   1800a:	d00a      	beq.n	18022 <strncmp+0x1e>
   1800c:	3a01      	subs	r2, #1
   1800e:	5cc4      	ldrb	r4, [r0, r3]
   18010:	5ccd      	ldrb	r5, [r1, r3]
   18012:	42ac      	cmp	r4, r5
   18014:	d104      	bne.n	18020 <strncmp+0x1c>
   18016:	429a      	cmp	r2, r3
   18018:	d002      	beq.n	18020 <strncmp+0x1c>
   1801a:	3301      	adds	r3, #1
   1801c:	2c00      	cmp	r4, #0
   1801e:	d1f6      	bne.n	1800e <strncmp+0xa>
   18020:	1b63      	subs	r3, r4, r5
   18022:	0018      	movs	r0, r3
   18024:	bd30      	pop	{r4, r5, pc}

00018026 <strstr>:
   18026:	b510      	push	{r4, lr}
   18028:	0002      	movs	r2, r0
   1802a:	7800      	ldrb	r0, [r0, #0]
   1802c:	2800      	cmp	r0, #0
   1802e:	d104      	bne.n	1803a <strstr+0x14>
   18030:	7809      	ldrb	r1, [r1, #0]
   18032:	2900      	cmp	r1, #0
   18034:	d00d      	beq.n	18052 <strstr+0x2c>
   18036:	bd10      	pop	{r4, pc}
   18038:	3201      	adds	r2, #1
   1803a:	7810      	ldrb	r0, [r2, #0]
   1803c:	2800      	cmp	r0, #0
   1803e:	d0fa      	beq.n	18036 <strstr+0x10>
   18040:	2300      	movs	r3, #0
   18042:	5cc8      	ldrb	r0, [r1, r3]
   18044:	2800      	cmp	r0, #0
   18046:	d004      	beq.n	18052 <strstr+0x2c>
   18048:	5cd4      	ldrb	r4, [r2, r3]
   1804a:	4284      	cmp	r4, r0
   1804c:	d1f4      	bne.n	18038 <strstr+0x12>
   1804e:	3301      	adds	r3, #1
   18050:	e7f7      	b.n	18042 <strstr+0x1c>
   18052:	0010      	movs	r0, r2
   18054:	e7ef      	b.n	18036 <strstr+0x10>
	...

00018058 <strtok>:
   18058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1805a:	4b12      	ldr	r3, [pc, #72]	; (180a4 <strtok+0x4c>)
   1805c:	0006      	movs	r6, r0
   1805e:	681d      	ldr	r5, [r3, #0]
   18060:	000f      	movs	r7, r1
   18062:	6dac      	ldr	r4, [r5, #88]	; 0x58
   18064:	2c00      	cmp	r4, #0
   18066:	d116      	bne.n	18096 <strtok+0x3e>
   18068:	2050      	movs	r0, #80	; 0x50
   1806a:	f7ff fe3b 	bl	17ce4 <malloc>
   1806e:	65a8      	str	r0, [r5, #88]	; 0x58
   18070:	6004      	str	r4, [r0, #0]
   18072:	6044      	str	r4, [r0, #4]
   18074:	6084      	str	r4, [r0, #8]
   18076:	60c4      	str	r4, [r0, #12]
   18078:	6104      	str	r4, [r0, #16]
   1807a:	6144      	str	r4, [r0, #20]
   1807c:	6184      	str	r4, [r0, #24]
   1807e:	6284      	str	r4, [r0, #40]	; 0x28
   18080:	62c4      	str	r4, [r0, #44]	; 0x2c
   18082:	6304      	str	r4, [r0, #48]	; 0x30
   18084:	6344      	str	r4, [r0, #52]	; 0x34
   18086:	6384      	str	r4, [r0, #56]	; 0x38
   18088:	63c4      	str	r4, [r0, #60]	; 0x3c
   1808a:	6404      	str	r4, [r0, #64]	; 0x40
   1808c:	6444      	str	r4, [r0, #68]	; 0x44
   1808e:	6484      	str	r4, [r0, #72]	; 0x48
   18090:	64c4      	str	r4, [r0, #76]	; 0x4c
   18092:	7704      	strb	r4, [r0, #28]
   18094:	6244      	str	r4, [r0, #36]	; 0x24
   18096:	6daa      	ldr	r2, [r5, #88]	; 0x58
   18098:	0039      	movs	r1, r7
   1809a:	0030      	movs	r0, r6
   1809c:	2301      	movs	r3, #1
   1809e:	f000 f803 	bl	180a8 <__strtok_r>
   180a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   180a4:	2000002c 	.word	0x2000002c

000180a8 <__strtok_r>:
   180a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   180aa:	2800      	cmp	r0, #0
   180ac:	d104      	bne.n	180b8 <__strtok_r+0x10>
   180ae:	6810      	ldr	r0, [r2, #0]
   180b0:	2800      	cmp	r0, #0
   180b2:	d101      	bne.n	180b8 <__strtok_r+0x10>
   180b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   180b6:	0020      	movs	r0, r4
   180b8:	000e      	movs	r6, r1
   180ba:	7805      	ldrb	r5, [r0, #0]
   180bc:	1c44      	adds	r4, r0, #1
   180be:	7837      	ldrb	r7, [r6, #0]
   180c0:	2f00      	cmp	r7, #0
   180c2:	d104      	bne.n	180ce <__strtok_r+0x26>
   180c4:	2d00      	cmp	r5, #0
   180c6:	d110      	bne.n	180ea <__strtok_r+0x42>
   180c8:	6015      	str	r5, [r2, #0]
   180ca:	0028      	movs	r0, r5
   180cc:	e7f2      	b.n	180b4 <__strtok_r+0xc>
   180ce:	3601      	adds	r6, #1
   180d0:	42bd      	cmp	r5, r7
   180d2:	d1f4      	bne.n	180be <__strtok_r+0x16>
   180d4:	2b00      	cmp	r3, #0
   180d6:	d1ee      	bne.n	180b6 <__strtok_r+0xe>
   180d8:	6014      	str	r4, [r2, #0]
   180da:	7003      	strb	r3, [r0, #0]
   180dc:	e7ea      	b.n	180b4 <__strtok_r+0xc>
   180de:	0033      	movs	r3, r6
   180e0:	e00e      	b.n	18100 <__strtok_r+0x58>
   180e2:	3501      	adds	r5, #1
   180e4:	001c      	movs	r4, r3
   180e6:	2f00      	cmp	r7, #0
   180e8:	d102      	bne.n	180f0 <__strtok_r+0x48>
   180ea:	000d      	movs	r5, r1
   180ec:	7826      	ldrb	r6, [r4, #0]
   180ee:	1c63      	adds	r3, r4, #1
   180f0:	782f      	ldrb	r7, [r5, #0]
   180f2:	42be      	cmp	r6, r7
   180f4:	d1f5      	bne.n	180e2 <__strtok_r+0x3a>
   180f6:	2e00      	cmp	r6, #0
   180f8:	d0f1      	beq.n	180de <__strtok_r+0x36>
   180fa:	2400      	movs	r4, #0
   180fc:	1e59      	subs	r1, r3, #1
   180fe:	700c      	strb	r4, [r1, #0]
   18100:	6013      	str	r3, [r2, #0]
   18102:	e7d7      	b.n	180b4 <__strtok_r+0xc>

00018104 <_strtol_l.isra.0>:
   18104:	b5f0      	push	{r4, r5, r6, r7, lr}
   18106:	001f      	movs	r7, r3
   18108:	000e      	movs	r6, r1
   1810a:	b087      	sub	sp, #28
   1810c:	9005      	str	r0, [sp, #20]
   1810e:	9103      	str	r1, [sp, #12]
   18110:	9202      	str	r2, [sp, #8]
   18112:	980c      	ldr	r0, [sp, #48]	; 0x30
   18114:	7834      	ldrb	r4, [r6, #0]
   18116:	f7ff fdd3 	bl	17cc0 <__locale_ctype_ptr_l>
   1811a:	2208      	movs	r2, #8
   1811c:	1900      	adds	r0, r0, r4
   1811e:	7843      	ldrb	r3, [r0, #1]
   18120:	1c75      	adds	r5, r6, #1
   18122:	4013      	ands	r3, r2
   18124:	d10c      	bne.n	18140 <_strtol_l.isra.0+0x3c>
   18126:	2c2d      	cmp	r4, #45	; 0x2d
   18128:	d10c      	bne.n	18144 <_strtol_l.isra.0+0x40>
   1812a:	3301      	adds	r3, #1
   1812c:	782c      	ldrb	r4, [r5, #0]
   1812e:	9301      	str	r3, [sp, #4]
   18130:	1cb5      	adds	r5, r6, #2
   18132:	2f00      	cmp	r7, #0
   18134:	d00c      	beq.n	18150 <_strtol_l.isra.0+0x4c>
   18136:	2f10      	cmp	r7, #16
   18138:	d114      	bne.n	18164 <_strtol_l.isra.0+0x60>
   1813a:	2c30      	cmp	r4, #48	; 0x30
   1813c:	d00a      	beq.n	18154 <_strtol_l.isra.0+0x50>
   1813e:	e011      	b.n	18164 <_strtol_l.isra.0+0x60>
   18140:	002e      	movs	r6, r5
   18142:	e7e6      	b.n	18112 <_strtol_l.isra.0+0xe>
   18144:	9301      	str	r3, [sp, #4]
   18146:	2c2b      	cmp	r4, #43	; 0x2b
   18148:	d1f3      	bne.n	18132 <_strtol_l.isra.0+0x2e>
   1814a:	782c      	ldrb	r4, [r5, #0]
   1814c:	1cb5      	adds	r5, r6, #2
   1814e:	e7f0      	b.n	18132 <_strtol_l.isra.0+0x2e>
   18150:	2c30      	cmp	r4, #48	; 0x30
   18152:	d12f      	bne.n	181b4 <_strtol_l.isra.0+0xb0>
   18154:	2220      	movs	r2, #32
   18156:	782b      	ldrb	r3, [r5, #0]
   18158:	4393      	bics	r3, r2
   1815a:	2b58      	cmp	r3, #88	; 0x58
   1815c:	d151      	bne.n	18202 <_strtol_l.isra.0+0xfe>
   1815e:	2710      	movs	r7, #16
   18160:	786c      	ldrb	r4, [r5, #1]
   18162:	3502      	adds	r5, #2
   18164:	9b01      	ldr	r3, [sp, #4]
   18166:	4a29      	ldr	r2, [pc, #164]	; (1820c <_strtol_l.isra.0+0x108>)
   18168:	0039      	movs	r1, r7
   1816a:	189e      	adds	r6, r3, r2
   1816c:	0030      	movs	r0, r6
   1816e:	f7fd fa45 	bl	155fc <__aeabi_uidivmod>
   18172:	0030      	movs	r0, r6
   18174:	9104      	str	r1, [sp, #16]
   18176:	0039      	movs	r1, r7
   18178:	f7fd f9ba 	bl	154f0 <__udivsi3>
   1817c:	2101      	movs	r1, #1
   1817e:	2300      	movs	r3, #0
   18180:	4249      	negs	r1, r1
   18182:	0002      	movs	r2, r0
   18184:	468c      	mov	ip, r1
   18186:	0018      	movs	r0, r3
   18188:	0021      	movs	r1, r4
   1818a:	3930      	subs	r1, #48	; 0x30
   1818c:	2909      	cmp	r1, #9
   1818e:	d813      	bhi.n	181b8 <_strtol_l.isra.0+0xb4>
   18190:	000c      	movs	r4, r1
   18192:	42a7      	cmp	r7, r4
   18194:	dd1c      	ble.n	181d0 <_strtol_l.isra.0+0xcc>
   18196:	1c59      	adds	r1, r3, #1
   18198:	d009      	beq.n	181ae <_strtol_l.isra.0+0xaa>
   1819a:	4663      	mov	r3, ip
   1819c:	4282      	cmp	r2, r0
   1819e:	d306      	bcc.n	181ae <_strtol_l.isra.0+0xaa>
   181a0:	d102      	bne.n	181a8 <_strtol_l.isra.0+0xa4>
   181a2:	9904      	ldr	r1, [sp, #16]
   181a4:	42a1      	cmp	r1, r4
   181a6:	db02      	blt.n	181ae <_strtol_l.isra.0+0xaa>
   181a8:	2301      	movs	r3, #1
   181aa:	4378      	muls	r0, r7
   181ac:	1820      	adds	r0, r4, r0
   181ae:	782c      	ldrb	r4, [r5, #0]
   181b0:	3501      	adds	r5, #1
   181b2:	e7e9      	b.n	18188 <_strtol_l.isra.0+0x84>
   181b4:	270a      	movs	r7, #10
   181b6:	e7d5      	b.n	18164 <_strtol_l.isra.0+0x60>
   181b8:	0021      	movs	r1, r4
   181ba:	3941      	subs	r1, #65	; 0x41
   181bc:	2919      	cmp	r1, #25
   181be:	d801      	bhi.n	181c4 <_strtol_l.isra.0+0xc0>
   181c0:	3c37      	subs	r4, #55	; 0x37
   181c2:	e7e6      	b.n	18192 <_strtol_l.isra.0+0x8e>
   181c4:	0021      	movs	r1, r4
   181c6:	3961      	subs	r1, #97	; 0x61
   181c8:	2919      	cmp	r1, #25
   181ca:	d801      	bhi.n	181d0 <_strtol_l.isra.0+0xcc>
   181cc:	3c57      	subs	r4, #87	; 0x57
   181ce:	e7e0      	b.n	18192 <_strtol_l.isra.0+0x8e>
   181d0:	1c5a      	adds	r2, r3, #1
   181d2:	d108      	bne.n	181e6 <_strtol_l.isra.0+0xe2>
   181d4:	9a05      	ldr	r2, [sp, #20]
   181d6:	3323      	adds	r3, #35	; 0x23
   181d8:	6013      	str	r3, [r2, #0]
   181da:	9b02      	ldr	r3, [sp, #8]
   181dc:	0030      	movs	r0, r6
   181de:	2b00      	cmp	r3, #0
   181e0:	d10b      	bne.n	181fa <_strtol_l.isra.0+0xf6>
   181e2:	b007      	add	sp, #28
   181e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181e6:	9a01      	ldr	r2, [sp, #4]
   181e8:	2a00      	cmp	r2, #0
   181ea:	d000      	beq.n	181ee <_strtol_l.isra.0+0xea>
   181ec:	4240      	negs	r0, r0
   181ee:	9a02      	ldr	r2, [sp, #8]
   181f0:	2a00      	cmp	r2, #0
   181f2:	d0f6      	beq.n	181e2 <_strtol_l.isra.0+0xde>
   181f4:	9a03      	ldr	r2, [sp, #12]
   181f6:	2b00      	cmp	r3, #0
   181f8:	d000      	beq.n	181fc <_strtol_l.isra.0+0xf8>
   181fa:	1e6a      	subs	r2, r5, #1
   181fc:	9b02      	ldr	r3, [sp, #8]
   181fe:	601a      	str	r2, [r3, #0]
   18200:	e7ef      	b.n	181e2 <_strtol_l.isra.0+0xde>
   18202:	2430      	movs	r4, #48	; 0x30
   18204:	2f00      	cmp	r7, #0
   18206:	d1ad      	bne.n	18164 <_strtol_l.isra.0+0x60>
   18208:	3708      	adds	r7, #8
   1820a:	e7ab      	b.n	18164 <_strtol_l.isra.0+0x60>
   1820c:	7fffffff 	.word	0x7fffffff

00018210 <strtol>:
   18210:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18212:	0013      	movs	r3, r2
   18214:	4a06      	ldr	r2, [pc, #24]	; (18230 <strtol+0x20>)
   18216:	0005      	movs	r5, r0
   18218:	6810      	ldr	r0, [r2, #0]
   1821a:	6a04      	ldr	r4, [r0, #32]
   1821c:	2c00      	cmp	r4, #0
   1821e:	d100      	bne.n	18222 <strtol+0x12>
   18220:	4c04      	ldr	r4, [pc, #16]	; (18234 <strtol+0x24>)
   18222:	000a      	movs	r2, r1
   18224:	9400      	str	r4, [sp, #0]
   18226:	0029      	movs	r1, r5
   18228:	f7ff ff6c 	bl	18104 <_strtol_l.isra.0>
   1822c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1822e:	46c0      	nop			; (mov r8, r8)
   18230:	2000002c 	.word	0x2000002c
   18234:	20000090 	.word	0x20000090

00018238 <__utoa>:
   18238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1823a:	0017      	movs	r7, r2
   1823c:	b08f      	sub	sp, #60	; 0x3c
   1823e:	2225      	movs	r2, #37	; 0x25
   18240:	0006      	movs	r6, r0
   18242:	000d      	movs	r5, r1
   18244:	a804      	add	r0, sp, #16
   18246:	4918      	ldr	r1, [pc, #96]	; (182a8 <__utoa+0x70>)
   18248:	f7ff fd72 	bl	17d30 <memcpy>
   1824c:	aa04      	add	r2, sp, #16
   1824e:	1ebb      	subs	r3, r7, #2
   18250:	2400      	movs	r4, #0
   18252:	9203      	str	r2, [sp, #12]
   18254:	2b22      	cmp	r3, #34	; 0x22
   18256:	d905      	bls.n	18264 <__utoa+0x2c>
   18258:	702c      	strb	r4, [r5, #0]
   1825a:	0025      	movs	r5, r4
   1825c:	0028      	movs	r0, r5
   1825e:	b00f      	add	sp, #60	; 0x3c
   18260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18262:	9c01      	ldr	r4, [sp, #4]
   18264:	1c63      	adds	r3, r4, #1
   18266:	9301      	str	r3, [sp, #4]
   18268:	18eb      	adds	r3, r5, r3
   1826a:	9300      	str	r3, [sp, #0]
   1826c:	0030      	movs	r0, r6
   1826e:	3b01      	subs	r3, #1
   18270:	0039      	movs	r1, r7
   18272:	9302      	str	r3, [sp, #8]
   18274:	f7fd f9c2 	bl	155fc <__aeabi_uidivmod>
   18278:	9b03      	ldr	r3, [sp, #12]
   1827a:	9a02      	ldr	r2, [sp, #8]
   1827c:	5c5b      	ldrb	r3, [r3, r1]
   1827e:	0030      	movs	r0, r6
   18280:	7013      	strb	r3, [r2, #0]
   18282:	0039      	movs	r1, r7
   18284:	f7fd f934 	bl	154f0 <__udivsi3>
   18288:	1e06      	subs	r6, r0, #0
   1828a:	d1ea      	bne.n	18262 <__utoa+0x2a>
   1828c:	9b00      	ldr	r3, [sp, #0]
   1828e:	7018      	strb	r0, [r3, #0]
   18290:	002b      	movs	r3, r5
   18292:	1b5a      	subs	r2, r3, r5
   18294:	4294      	cmp	r4, r2
   18296:	dde1      	ble.n	1825c <__utoa+0x24>
   18298:	781a      	ldrb	r2, [r3, #0]
   1829a:	5d29      	ldrb	r1, [r5, r4]
   1829c:	7019      	strb	r1, [r3, #0]
   1829e:	552a      	strb	r2, [r5, r4]
   182a0:	3301      	adds	r3, #1
   182a2:	3c01      	subs	r4, #1
   182a4:	e7f5      	b.n	18292 <__utoa+0x5a>
   182a6:	46c0      	nop			; (mov r8, r8)
   182a8:	00019c5a 	.word	0x00019c5a

000182ac <utoa>:
   182ac:	b510      	push	{r4, lr}
   182ae:	f7ff ffc3 	bl	18238 <__utoa>
   182b2:	bd10      	pop	{r4, pc}

000182b4 <_vsiprintf_r>:
   182b4:	b530      	push	{r4, r5, lr}
   182b6:	b09b      	sub	sp, #108	; 0x6c
   182b8:	9100      	str	r1, [sp, #0]
   182ba:	9104      	str	r1, [sp, #16]
   182bc:	4908      	ldr	r1, [pc, #32]	; (182e0 <_vsiprintf_r+0x2c>)
   182be:	466d      	mov	r5, sp
   182c0:	9102      	str	r1, [sp, #8]
   182c2:	9105      	str	r1, [sp, #20]
   182c4:	2101      	movs	r1, #1
   182c6:	2482      	movs	r4, #130	; 0x82
   182c8:	4249      	negs	r1, r1
   182ca:	81e9      	strh	r1, [r5, #14]
   182cc:	00a4      	lsls	r4, r4, #2
   182ce:	4669      	mov	r1, sp
   182d0:	81ac      	strh	r4, [r5, #12]
   182d2:	f000 f883 	bl	183dc <_svfiprintf_r>
   182d6:	2300      	movs	r3, #0
   182d8:	9a00      	ldr	r2, [sp, #0]
   182da:	7013      	strb	r3, [r2, #0]
   182dc:	b01b      	add	sp, #108	; 0x6c
   182de:	bd30      	pop	{r4, r5, pc}
   182e0:	7fffffff 	.word	0x7fffffff

000182e4 <vsiprintf>:
   182e4:	b510      	push	{r4, lr}
   182e6:	0013      	movs	r3, r2
   182e8:	000a      	movs	r2, r1
   182ea:	0001      	movs	r1, r0
   182ec:	4802      	ldr	r0, [pc, #8]	; (182f8 <vsiprintf+0x14>)
   182ee:	6800      	ldr	r0, [r0, #0]
   182f0:	f7ff ffe0 	bl	182b4 <_vsiprintf_r>
   182f4:	bd10      	pop	{r4, pc}
   182f6:	46c0      	nop			; (mov r8, r8)
   182f8:	2000002c 	.word	0x2000002c

000182fc <__ascii_wctomb>:
   182fc:	1e0b      	subs	r3, r1, #0
   182fe:	d004      	beq.n	1830a <__ascii_wctomb+0xe>
   18300:	2aff      	cmp	r2, #255	; 0xff
   18302:	d904      	bls.n	1830e <__ascii_wctomb+0x12>
   18304:	238a      	movs	r3, #138	; 0x8a
   18306:	6003      	str	r3, [r0, #0]
   18308:	3b8b      	subs	r3, #139	; 0x8b
   1830a:	0018      	movs	r0, r3
   1830c:	4770      	bx	lr
   1830e:	700a      	strb	r2, [r1, #0]
   18310:	2301      	movs	r3, #1
   18312:	e7fa      	b.n	1830a <__ascii_wctomb+0xe>

00018314 <__malloc_lock>:
   18314:	4770      	bx	lr

00018316 <__malloc_unlock>:
   18316:	4770      	bx	lr

00018318 <__ssputs_r>:
   18318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1831a:	688e      	ldr	r6, [r1, #8]
   1831c:	b085      	sub	sp, #20
   1831e:	0007      	movs	r7, r0
   18320:	000c      	movs	r4, r1
   18322:	9203      	str	r2, [sp, #12]
   18324:	9301      	str	r3, [sp, #4]
   18326:	429e      	cmp	r6, r3
   18328:	d839      	bhi.n	1839e <__ssputs_r+0x86>
   1832a:	2390      	movs	r3, #144	; 0x90
   1832c:	898a      	ldrh	r2, [r1, #12]
   1832e:	00db      	lsls	r3, r3, #3
   18330:	421a      	tst	r2, r3
   18332:	d034      	beq.n	1839e <__ssputs_r+0x86>
   18334:	2503      	movs	r5, #3
   18336:	6909      	ldr	r1, [r1, #16]
   18338:	6823      	ldr	r3, [r4, #0]
   1833a:	1a5b      	subs	r3, r3, r1
   1833c:	9302      	str	r3, [sp, #8]
   1833e:	6963      	ldr	r3, [r4, #20]
   18340:	9802      	ldr	r0, [sp, #8]
   18342:	435d      	muls	r5, r3
   18344:	0feb      	lsrs	r3, r5, #31
   18346:	195d      	adds	r5, r3, r5
   18348:	9b01      	ldr	r3, [sp, #4]
   1834a:	106d      	asrs	r5, r5, #1
   1834c:	3301      	adds	r3, #1
   1834e:	181b      	adds	r3, r3, r0
   18350:	42ab      	cmp	r3, r5
   18352:	d900      	bls.n	18356 <__ssputs_r+0x3e>
   18354:	001d      	movs	r5, r3
   18356:	0553      	lsls	r3, r2, #21
   18358:	d532      	bpl.n	183c0 <__ssputs_r+0xa8>
   1835a:	0029      	movs	r1, r5
   1835c:	0038      	movs	r0, r7
   1835e:	f7ff fd63 	bl	17e28 <_malloc_r>
   18362:	1e06      	subs	r6, r0, #0
   18364:	d109      	bne.n	1837a <__ssputs_r+0x62>
   18366:	230c      	movs	r3, #12
   18368:	603b      	str	r3, [r7, #0]
   1836a:	2340      	movs	r3, #64	; 0x40
   1836c:	2001      	movs	r0, #1
   1836e:	89a2      	ldrh	r2, [r4, #12]
   18370:	4240      	negs	r0, r0
   18372:	4313      	orrs	r3, r2
   18374:	81a3      	strh	r3, [r4, #12]
   18376:	b005      	add	sp, #20
   18378:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1837a:	9a02      	ldr	r2, [sp, #8]
   1837c:	6921      	ldr	r1, [r4, #16]
   1837e:	f7ff fcd7 	bl	17d30 <memcpy>
   18382:	89a3      	ldrh	r3, [r4, #12]
   18384:	4a14      	ldr	r2, [pc, #80]	; (183d8 <__ssputs_r+0xc0>)
   18386:	401a      	ands	r2, r3
   18388:	2380      	movs	r3, #128	; 0x80
   1838a:	4313      	orrs	r3, r2
   1838c:	81a3      	strh	r3, [r4, #12]
   1838e:	9b02      	ldr	r3, [sp, #8]
   18390:	6126      	str	r6, [r4, #16]
   18392:	18f6      	adds	r6, r6, r3
   18394:	6026      	str	r6, [r4, #0]
   18396:	6165      	str	r5, [r4, #20]
   18398:	9e01      	ldr	r6, [sp, #4]
   1839a:	1aed      	subs	r5, r5, r3
   1839c:	60a5      	str	r5, [r4, #8]
   1839e:	9b01      	ldr	r3, [sp, #4]
   183a0:	42b3      	cmp	r3, r6
   183a2:	d200      	bcs.n	183a6 <__ssputs_r+0x8e>
   183a4:	001e      	movs	r6, r3
   183a6:	0032      	movs	r2, r6
   183a8:	9903      	ldr	r1, [sp, #12]
   183aa:	6820      	ldr	r0, [r4, #0]
   183ac:	f7ff fcc9 	bl	17d42 <memmove>
   183b0:	68a3      	ldr	r3, [r4, #8]
   183b2:	2000      	movs	r0, #0
   183b4:	1b9b      	subs	r3, r3, r6
   183b6:	60a3      	str	r3, [r4, #8]
   183b8:	6823      	ldr	r3, [r4, #0]
   183ba:	199e      	adds	r6, r3, r6
   183bc:	6026      	str	r6, [r4, #0]
   183be:	e7da      	b.n	18376 <__ssputs_r+0x5e>
   183c0:	002a      	movs	r2, r5
   183c2:	0038      	movs	r0, r7
   183c4:	f000 faa1 	bl	1890a <_realloc_r>
   183c8:	1e06      	subs	r6, r0, #0
   183ca:	d1e0      	bne.n	1838e <__ssputs_r+0x76>
   183cc:	6921      	ldr	r1, [r4, #16]
   183ce:	0038      	movs	r0, r7
   183d0:	f7ff fce0 	bl	17d94 <_free_r>
   183d4:	e7c7      	b.n	18366 <__ssputs_r+0x4e>
   183d6:	46c0      	nop			; (mov r8, r8)
   183d8:	fffffb7f 	.word	0xfffffb7f

000183dc <_svfiprintf_r>:
   183dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   183de:	b09f      	sub	sp, #124	; 0x7c
   183e0:	9002      	str	r0, [sp, #8]
   183e2:	9305      	str	r3, [sp, #20]
   183e4:	898b      	ldrh	r3, [r1, #12]
   183e6:	000f      	movs	r7, r1
   183e8:	0016      	movs	r6, r2
   183ea:	061b      	lsls	r3, r3, #24
   183ec:	d511      	bpl.n	18412 <_svfiprintf_r+0x36>
   183ee:	690b      	ldr	r3, [r1, #16]
   183f0:	2b00      	cmp	r3, #0
   183f2:	d10e      	bne.n	18412 <_svfiprintf_r+0x36>
   183f4:	2140      	movs	r1, #64	; 0x40
   183f6:	f7ff fd17 	bl	17e28 <_malloc_r>
   183fa:	6038      	str	r0, [r7, #0]
   183fc:	6138      	str	r0, [r7, #16]
   183fe:	2800      	cmp	r0, #0
   18400:	d105      	bne.n	1840e <_svfiprintf_r+0x32>
   18402:	230c      	movs	r3, #12
   18404:	9a02      	ldr	r2, [sp, #8]
   18406:	3801      	subs	r0, #1
   18408:	6013      	str	r3, [r2, #0]
   1840a:	b01f      	add	sp, #124	; 0x7c
   1840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1840e:	2340      	movs	r3, #64	; 0x40
   18410:	617b      	str	r3, [r7, #20]
   18412:	2300      	movs	r3, #0
   18414:	ad06      	add	r5, sp, #24
   18416:	616b      	str	r3, [r5, #20]
   18418:	3320      	adds	r3, #32
   1841a:	766b      	strb	r3, [r5, #25]
   1841c:	3310      	adds	r3, #16
   1841e:	76ab      	strb	r3, [r5, #26]
   18420:	0034      	movs	r4, r6
   18422:	7823      	ldrb	r3, [r4, #0]
   18424:	2b00      	cmp	r3, #0
   18426:	d147      	bne.n	184b8 <_svfiprintf_r+0xdc>
   18428:	1ba3      	subs	r3, r4, r6
   1842a:	9304      	str	r3, [sp, #16]
   1842c:	d00d      	beq.n	1844a <_svfiprintf_r+0x6e>
   1842e:	1ba3      	subs	r3, r4, r6
   18430:	0032      	movs	r2, r6
   18432:	0039      	movs	r1, r7
   18434:	9802      	ldr	r0, [sp, #8]
   18436:	f7ff ff6f 	bl	18318 <__ssputs_r>
   1843a:	1c43      	adds	r3, r0, #1
   1843c:	d100      	bne.n	18440 <_svfiprintf_r+0x64>
   1843e:	e0b5      	b.n	185ac <_svfiprintf_r+0x1d0>
   18440:	696a      	ldr	r2, [r5, #20]
   18442:	9b04      	ldr	r3, [sp, #16]
   18444:	4694      	mov	ip, r2
   18446:	4463      	add	r3, ip
   18448:	616b      	str	r3, [r5, #20]
   1844a:	7823      	ldrb	r3, [r4, #0]
   1844c:	2b00      	cmp	r3, #0
   1844e:	d100      	bne.n	18452 <_svfiprintf_r+0x76>
   18450:	e0ac      	b.n	185ac <_svfiprintf_r+0x1d0>
   18452:	2201      	movs	r2, #1
   18454:	2300      	movs	r3, #0
   18456:	4252      	negs	r2, r2
   18458:	606a      	str	r2, [r5, #4]
   1845a:	a902      	add	r1, sp, #8
   1845c:	3254      	adds	r2, #84	; 0x54
   1845e:	1852      	adds	r2, r2, r1
   18460:	3401      	adds	r4, #1
   18462:	602b      	str	r3, [r5, #0]
   18464:	60eb      	str	r3, [r5, #12]
   18466:	60ab      	str	r3, [r5, #8]
   18468:	7013      	strb	r3, [r2, #0]
   1846a:	65ab      	str	r3, [r5, #88]	; 0x58
   1846c:	4e58      	ldr	r6, [pc, #352]	; (185d0 <_svfiprintf_r+0x1f4>)
   1846e:	2205      	movs	r2, #5
   18470:	7821      	ldrb	r1, [r4, #0]
   18472:	0030      	movs	r0, r6
   18474:	f000 fa3e 	bl	188f4 <memchr>
   18478:	1c62      	adds	r2, r4, #1
   1847a:	2800      	cmp	r0, #0
   1847c:	d120      	bne.n	184c0 <_svfiprintf_r+0xe4>
   1847e:	6829      	ldr	r1, [r5, #0]
   18480:	06cb      	lsls	r3, r1, #27
   18482:	d504      	bpl.n	1848e <_svfiprintf_r+0xb2>
   18484:	2353      	movs	r3, #83	; 0x53
   18486:	ae02      	add	r6, sp, #8
   18488:	3020      	adds	r0, #32
   1848a:	199b      	adds	r3, r3, r6
   1848c:	7018      	strb	r0, [r3, #0]
   1848e:	070b      	lsls	r3, r1, #28
   18490:	d504      	bpl.n	1849c <_svfiprintf_r+0xc0>
   18492:	2353      	movs	r3, #83	; 0x53
   18494:	202b      	movs	r0, #43	; 0x2b
   18496:	ae02      	add	r6, sp, #8
   18498:	199b      	adds	r3, r3, r6
   1849a:	7018      	strb	r0, [r3, #0]
   1849c:	7823      	ldrb	r3, [r4, #0]
   1849e:	2b2a      	cmp	r3, #42	; 0x2a
   184a0:	d016      	beq.n	184d0 <_svfiprintf_r+0xf4>
   184a2:	2000      	movs	r0, #0
   184a4:	210a      	movs	r1, #10
   184a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   184a8:	7822      	ldrb	r2, [r4, #0]
   184aa:	3a30      	subs	r2, #48	; 0x30
   184ac:	2a09      	cmp	r2, #9
   184ae:	d955      	bls.n	1855c <_svfiprintf_r+0x180>
   184b0:	2800      	cmp	r0, #0
   184b2:	d015      	beq.n	184e0 <_svfiprintf_r+0x104>
   184b4:	9309      	str	r3, [sp, #36]	; 0x24
   184b6:	e013      	b.n	184e0 <_svfiprintf_r+0x104>
   184b8:	2b25      	cmp	r3, #37	; 0x25
   184ba:	d0b5      	beq.n	18428 <_svfiprintf_r+0x4c>
   184bc:	3401      	adds	r4, #1
   184be:	e7b0      	b.n	18422 <_svfiprintf_r+0x46>
   184c0:	2301      	movs	r3, #1
   184c2:	1b80      	subs	r0, r0, r6
   184c4:	4083      	lsls	r3, r0
   184c6:	6829      	ldr	r1, [r5, #0]
   184c8:	0014      	movs	r4, r2
   184ca:	430b      	orrs	r3, r1
   184cc:	602b      	str	r3, [r5, #0]
   184ce:	e7cd      	b.n	1846c <_svfiprintf_r+0x90>
   184d0:	9b05      	ldr	r3, [sp, #20]
   184d2:	1d18      	adds	r0, r3, #4
   184d4:	681b      	ldr	r3, [r3, #0]
   184d6:	9005      	str	r0, [sp, #20]
   184d8:	2b00      	cmp	r3, #0
   184da:	db39      	blt.n	18550 <_svfiprintf_r+0x174>
   184dc:	9309      	str	r3, [sp, #36]	; 0x24
   184de:	0014      	movs	r4, r2
   184e0:	7823      	ldrb	r3, [r4, #0]
   184e2:	2b2e      	cmp	r3, #46	; 0x2e
   184e4:	d10b      	bne.n	184fe <_svfiprintf_r+0x122>
   184e6:	7863      	ldrb	r3, [r4, #1]
   184e8:	1c62      	adds	r2, r4, #1
   184ea:	2b2a      	cmp	r3, #42	; 0x2a
   184ec:	d13e      	bne.n	1856c <_svfiprintf_r+0x190>
   184ee:	9b05      	ldr	r3, [sp, #20]
   184f0:	3402      	adds	r4, #2
   184f2:	1d1a      	adds	r2, r3, #4
   184f4:	681b      	ldr	r3, [r3, #0]
   184f6:	9205      	str	r2, [sp, #20]
   184f8:	2b00      	cmp	r3, #0
   184fa:	db34      	blt.n	18566 <_svfiprintf_r+0x18a>
   184fc:	9307      	str	r3, [sp, #28]
   184fe:	4e35      	ldr	r6, [pc, #212]	; (185d4 <_svfiprintf_r+0x1f8>)
   18500:	7821      	ldrb	r1, [r4, #0]
   18502:	2203      	movs	r2, #3
   18504:	0030      	movs	r0, r6
   18506:	f000 f9f5 	bl	188f4 <memchr>
   1850a:	2800      	cmp	r0, #0
   1850c:	d006      	beq.n	1851c <_svfiprintf_r+0x140>
   1850e:	2340      	movs	r3, #64	; 0x40
   18510:	1b80      	subs	r0, r0, r6
   18512:	4083      	lsls	r3, r0
   18514:	682a      	ldr	r2, [r5, #0]
   18516:	3401      	adds	r4, #1
   18518:	4313      	orrs	r3, r2
   1851a:	602b      	str	r3, [r5, #0]
   1851c:	7821      	ldrb	r1, [r4, #0]
   1851e:	2206      	movs	r2, #6
   18520:	482d      	ldr	r0, [pc, #180]	; (185d8 <_svfiprintf_r+0x1fc>)
   18522:	1c66      	adds	r6, r4, #1
   18524:	7629      	strb	r1, [r5, #24]
   18526:	f000 f9e5 	bl	188f4 <memchr>
   1852a:	2800      	cmp	r0, #0
   1852c:	d046      	beq.n	185bc <_svfiprintf_r+0x1e0>
   1852e:	4b2b      	ldr	r3, [pc, #172]	; (185dc <_svfiprintf_r+0x200>)
   18530:	2b00      	cmp	r3, #0
   18532:	d12f      	bne.n	18594 <_svfiprintf_r+0x1b8>
   18534:	6829      	ldr	r1, [r5, #0]
   18536:	9b05      	ldr	r3, [sp, #20]
   18538:	2207      	movs	r2, #7
   1853a:	05c9      	lsls	r1, r1, #23
   1853c:	d528      	bpl.n	18590 <_svfiprintf_r+0x1b4>
   1853e:	189b      	adds	r3, r3, r2
   18540:	4393      	bics	r3, r2
   18542:	3308      	adds	r3, #8
   18544:	9305      	str	r3, [sp, #20]
   18546:	696b      	ldr	r3, [r5, #20]
   18548:	9a03      	ldr	r2, [sp, #12]
   1854a:	189b      	adds	r3, r3, r2
   1854c:	616b      	str	r3, [r5, #20]
   1854e:	e767      	b.n	18420 <_svfiprintf_r+0x44>
   18550:	425b      	negs	r3, r3
   18552:	60eb      	str	r3, [r5, #12]
   18554:	2302      	movs	r3, #2
   18556:	430b      	orrs	r3, r1
   18558:	602b      	str	r3, [r5, #0]
   1855a:	e7c0      	b.n	184de <_svfiprintf_r+0x102>
   1855c:	434b      	muls	r3, r1
   1855e:	3401      	adds	r4, #1
   18560:	189b      	adds	r3, r3, r2
   18562:	2001      	movs	r0, #1
   18564:	e7a0      	b.n	184a8 <_svfiprintf_r+0xcc>
   18566:	2301      	movs	r3, #1
   18568:	425b      	negs	r3, r3
   1856a:	e7c7      	b.n	184fc <_svfiprintf_r+0x120>
   1856c:	2300      	movs	r3, #0
   1856e:	0014      	movs	r4, r2
   18570:	200a      	movs	r0, #10
   18572:	001a      	movs	r2, r3
   18574:	606b      	str	r3, [r5, #4]
   18576:	7821      	ldrb	r1, [r4, #0]
   18578:	3930      	subs	r1, #48	; 0x30
   1857a:	2909      	cmp	r1, #9
   1857c:	d903      	bls.n	18586 <_svfiprintf_r+0x1aa>
   1857e:	2b00      	cmp	r3, #0
   18580:	d0bd      	beq.n	184fe <_svfiprintf_r+0x122>
   18582:	9207      	str	r2, [sp, #28]
   18584:	e7bb      	b.n	184fe <_svfiprintf_r+0x122>
   18586:	4342      	muls	r2, r0
   18588:	3401      	adds	r4, #1
   1858a:	1852      	adds	r2, r2, r1
   1858c:	2301      	movs	r3, #1
   1858e:	e7f2      	b.n	18576 <_svfiprintf_r+0x19a>
   18590:	3307      	adds	r3, #7
   18592:	e7d5      	b.n	18540 <_svfiprintf_r+0x164>
   18594:	ab05      	add	r3, sp, #20
   18596:	9300      	str	r3, [sp, #0]
   18598:	003a      	movs	r2, r7
   1859a:	4b11      	ldr	r3, [pc, #68]	; (185e0 <_svfiprintf_r+0x204>)
   1859c:	0029      	movs	r1, r5
   1859e:	9802      	ldr	r0, [sp, #8]
   185a0:	e000      	b.n	185a4 <_svfiprintf_r+0x1c8>
   185a2:	bf00      	nop
   185a4:	9003      	str	r0, [sp, #12]
   185a6:	9b03      	ldr	r3, [sp, #12]
   185a8:	3301      	adds	r3, #1
   185aa:	d1cc      	bne.n	18546 <_svfiprintf_r+0x16a>
   185ac:	89bb      	ldrh	r3, [r7, #12]
   185ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   185b0:	065b      	lsls	r3, r3, #25
   185b2:	d400      	bmi.n	185b6 <_svfiprintf_r+0x1da>
   185b4:	e729      	b.n	1840a <_svfiprintf_r+0x2e>
   185b6:	2001      	movs	r0, #1
   185b8:	4240      	negs	r0, r0
   185ba:	e726      	b.n	1840a <_svfiprintf_r+0x2e>
   185bc:	ab05      	add	r3, sp, #20
   185be:	9300      	str	r3, [sp, #0]
   185c0:	003a      	movs	r2, r7
   185c2:	4b07      	ldr	r3, [pc, #28]	; (185e0 <_svfiprintf_r+0x204>)
   185c4:	0029      	movs	r1, r5
   185c6:	9802      	ldr	r0, [sp, #8]
   185c8:	f000 f87a 	bl	186c0 <_printf_i>
   185cc:	e7ea      	b.n	185a4 <_svfiprintf_r+0x1c8>
   185ce:	46c0      	nop			; (mov r8, r8)
   185d0:	00019d80 	.word	0x00019d80
   185d4:	00019d86 	.word	0x00019d86
   185d8:	00019d8a 	.word	0x00019d8a
   185dc:	00000000 	.word	0x00000000
   185e0:	00018319 	.word	0x00018319

000185e4 <_printf_common>:
   185e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   185e6:	0015      	movs	r5, r2
   185e8:	9301      	str	r3, [sp, #4]
   185ea:	688a      	ldr	r2, [r1, #8]
   185ec:	690b      	ldr	r3, [r1, #16]
   185ee:	9000      	str	r0, [sp, #0]
   185f0:	000c      	movs	r4, r1
   185f2:	4293      	cmp	r3, r2
   185f4:	da00      	bge.n	185f8 <_printf_common+0x14>
   185f6:	0013      	movs	r3, r2
   185f8:	0022      	movs	r2, r4
   185fa:	602b      	str	r3, [r5, #0]
   185fc:	3243      	adds	r2, #67	; 0x43
   185fe:	7812      	ldrb	r2, [r2, #0]
   18600:	2a00      	cmp	r2, #0
   18602:	d001      	beq.n	18608 <_printf_common+0x24>
   18604:	3301      	adds	r3, #1
   18606:	602b      	str	r3, [r5, #0]
   18608:	6823      	ldr	r3, [r4, #0]
   1860a:	069b      	lsls	r3, r3, #26
   1860c:	d502      	bpl.n	18614 <_printf_common+0x30>
   1860e:	682b      	ldr	r3, [r5, #0]
   18610:	3302      	adds	r3, #2
   18612:	602b      	str	r3, [r5, #0]
   18614:	2706      	movs	r7, #6
   18616:	6823      	ldr	r3, [r4, #0]
   18618:	401f      	ands	r7, r3
   1861a:	d027      	beq.n	1866c <_printf_common+0x88>
   1861c:	0023      	movs	r3, r4
   1861e:	3343      	adds	r3, #67	; 0x43
   18620:	781b      	ldrb	r3, [r3, #0]
   18622:	1e5a      	subs	r2, r3, #1
   18624:	4193      	sbcs	r3, r2
   18626:	6822      	ldr	r2, [r4, #0]
   18628:	0692      	lsls	r2, r2, #26
   1862a:	d430      	bmi.n	1868e <_printf_common+0xaa>
   1862c:	0022      	movs	r2, r4
   1862e:	9901      	ldr	r1, [sp, #4]
   18630:	3243      	adds	r2, #67	; 0x43
   18632:	9800      	ldr	r0, [sp, #0]
   18634:	9e08      	ldr	r6, [sp, #32]
   18636:	47b0      	blx	r6
   18638:	1c43      	adds	r3, r0, #1
   1863a:	d025      	beq.n	18688 <_printf_common+0xa4>
   1863c:	2306      	movs	r3, #6
   1863e:	6820      	ldr	r0, [r4, #0]
   18640:	682a      	ldr	r2, [r5, #0]
   18642:	68e1      	ldr	r1, [r4, #12]
   18644:	4003      	ands	r3, r0
   18646:	2500      	movs	r5, #0
   18648:	2b04      	cmp	r3, #4
   1864a:	d103      	bne.n	18654 <_printf_common+0x70>
   1864c:	1a8d      	subs	r5, r1, r2
   1864e:	43eb      	mvns	r3, r5
   18650:	17db      	asrs	r3, r3, #31
   18652:	401d      	ands	r5, r3
   18654:	68a3      	ldr	r3, [r4, #8]
   18656:	6922      	ldr	r2, [r4, #16]
   18658:	4293      	cmp	r3, r2
   1865a:	dd01      	ble.n	18660 <_printf_common+0x7c>
   1865c:	1a9b      	subs	r3, r3, r2
   1865e:	18ed      	adds	r5, r5, r3
   18660:	2700      	movs	r7, #0
   18662:	42bd      	cmp	r5, r7
   18664:	d120      	bne.n	186a8 <_printf_common+0xc4>
   18666:	2000      	movs	r0, #0
   18668:	e010      	b.n	1868c <_printf_common+0xa8>
   1866a:	3701      	adds	r7, #1
   1866c:	68e3      	ldr	r3, [r4, #12]
   1866e:	682a      	ldr	r2, [r5, #0]
   18670:	1a9b      	subs	r3, r3, r2
   18672:	429f      	cmp	r7, r3
   18674:	dad2      	bge.n	1861c <_printf_common+0x38>
   18676:	0022      	movs	r2, r4
   18678:	2301      	movs	r3, #1
   1867a:	3219      	adds	r2, #25
   1867c:	9901      	ldr	r1, [sp, #4]
   1867e:	9800      	ldr	r0, [sp, #0]
   18680:	9e08      	ldr	r6, [sp, #32]
   18682:	47b0      	blx	r6
   18684:	1c43      	adds	r3, r0, #1
   18686:	d1f0      	bne.n	1866a <_printf_common+0x86>
   18688:	2001      	movs	r0, #1
   1868a:	4240      	negs	r0, r0
   1868c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1868e:	2030      	movs	r0, #48	; 0x30
   18690:	18e1      	adds	r1, r4, r3
   18692:	3143      	adds	r1, #67	; 0x43
   18694:	7008      	strb	r0, [r1, #0]
   18696:	0021      	movs	r1, r4
   18698:	1c5a      	adds	r2, r3, #1
   1869a:	3145      	adds	r1, #69	; 0x45
   1869c:	7809      	ldrb	r1, [r1, #0]
   1869e:	18a2      	adds	r2, r4, r2
   186a0:	3243      	adds	r2, #67	; 0x43
   186a2:	3302      	adds	r3, #2
   186a4:	7011      	strb	r1, [r2, #0]
   186a6:	e7c1      	b.n	1862c <_printf_common+0x48>
   186a8:	0022      	movs	r2, r4
   186aa:	2301      	movs	r3, #1
   186ac:	321a      	adds	r2, #26
   186ae:	9901      	ldr	r1, [sp, #4]
   186b0:	9800      	ldr	r0, [sp, #0]
   186b2:	9e08      	ldr	r6, [sp, #32]
   186b4:	47b0      	blx	r6
   186b6:	1c43      	adds	r3, r0, #1
   186b8:	d0e6      	beq.n	18688 <_printf_common+0xa4>
   186ba:	3701      	adds	r7, #1
   186bc:	e7d1      	b.n	18662 <_printf_common+0x7e>
	...

000186c0 <_printf_i>:
   186c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   186c2:	b08b      	sub	sp, #44	; 0x2c
   186c4:	9206      	str	r2, [sp, #24]
   186c6:	000a      	movs	r2, r1
   186c8:	3243      	adds	r2, #67	; 0x43
   186ca:	9307      	str	r3, [sp, #28]
   186cc:	9005      	str	r0, [sp, #20]
   186ce:	9204      	str	r2, [sp, #16]
   186d0:	7e0a      	ldrb	r2, [r1, #24]
   186d2:	000c      	movs	r4, r1
   186d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   186d6:	2a6e      	cmp	r2, #110	; 0x6e
   186d8:	d100      	bne.n	186dc <_printf_i+0x1c>
   186da:	e08f      	b.n	187fc <_printf_i+0x13c>
   186dc:	d817      	bhi.n	1870e <_printf_i+0x4e>
   186de:	2a63      	cmp	r2, #99	; 0x63
   186e0:	d02c      	beq.n	1873c <_printf_i+0x7c>
   186e2:	d808      	bhi.n	186f6 <_printf_i+0x36>
   186e4:	2a00      	cmp	r2, #0
   186e6:	d100      	bne.n	186ea <_printf_i+0x2a>
   186e8:	e099      	b.n	1881e <_printf_i+0x15e>
   186ea:	2a58      	cmp	r2, #88	; 0x58
   186ec:	d054      	beq.n	18798 <_printf_i+0xd8>
   186ee:	0026      	movs	r6, r4
   186f0:	3642      	adds	r6, #66	; 0x42
   186f2:	7032      	strb	r2, [r6, #0]
   186f4:	e029      	b.n	1874a <_printf_i+0x8a>
   186f6:	2a64      	cmp	r2, #100	; 0x64
   186f8:	d001      	beq.n	186fe <_printf_i+0x3e>
   186fa:	2a69      	cmp	r2, #105	; 0x69
   186fc:	d1f7      	bne.n	186ee <_printf_i+0x2e>
   186fe:	6821      	ldr	r1, [r4, #0]
   18700:	681a      	ldr	r2, [r3, #0]
   18702:	0608      	lsls	r0, r1, #24
   18704:	d523      	bpl.n	1874e <_printf_i+0x8e>
   18706:	1d11      	adds	r1, r2, #4
   18708:	6019      	str	r1, [r3, #0]
   1870a:	6815      	ldr	r5, [r2, #0]
   1870c:	e025      	b.n	1875a <_printf_i+0x9a>
   1870e:	2a73      	cmp	r2, #115	; 0x73
   18710:	d100      	bne.n	18714 <_printf_i+0x54>
   18712:	e088      	b.n	18826 <_printf_i+0x166>
   18714:	d808      	bhi.n	18728 <_printf_i+0x68>
   18716:	2a6f      	cmp	r2, #111	; 0x6f
   18718:	d029      	beq.n	1876e <_printf_i+0xae>
   1871a:	2a70      	cmp	r2, #112	; 0x70
   1871c:	d1e7      	bne.n	186ee <_printf_i+0x2e>
   1871e:	2220      	movs	r2, #32
   18720:	6809      	ldr	r1, [r1, #0]
   18722:	430a      	orrs	r2, r1
   18724:	6022      	str	r2, [r4, #0]
   18726:	e003      	b.n	18730 <_printf_i+0x70>
   18728:	2a75      	cmp	r2, #117	; 0x75
   1872a:	d020      	beq.n	1876e <_printf_i+0xae>
   1872c:	2a78      	cmp	r2, #120	; 0x78
   1872e:	d1de      	bne.n	186ee <_printf_i+0x2e>
   18730:	0022      	movs	r2, r4
   18732:	2178      	movs	r1, #120	; 0x78
   18734:	3245      	adds	r2, #69	; 0x45
   18736:	7011      	strb	r1, [r2, #0]
   18738:	4a6c      	ldr	r2, [pc, #432]	; (188ec <_printf_i+0x22c>)
   1873a:	e030      	b.n	1879e <_printf_i+0xde>
   1873c:	000e      	movs	r6, r1
   1873e:	681a      	ldr	r2, [r3, #0]
   18740:	3642      	adds	r6, #66	; 0x42
   18742:	1d11      	adds	r1, r2, #4
   18744:	6019      	str	r1, [r3, #0]
   18746:	6813      	ldr	r3, [r2, #0]
   18748:	7033      	strb	r3, [r6, #0]
   1874a:	2301      	movs	r3, #1
   1874c:	e079      	b.n	18842 <_printf_i+0x182>
   1874e:	0649      	lsls	r1, r1, #25
   18750:	d5d9      	bpl.n	18706 <_printf_i+0x46>
   18752:	1d11      	adds	r1, r2, #4
   18754:	6019      	str	r1, [r3, #0]
   18756:	2300      	movs	r3, #0
   18758:	5ed5      	ldrsh	r5, [r2, r3]
   1875a:	2d00      	cmp	r5, #0
   1875c:	da03      	bge.n	18766 <_printf_i+0xa6>
   1875e:	232d      	movs	r3, #45	; 0x2d
   18760:	9a04      	ldr	r2, [sp, #16]
   18762:	426d      	negs	r5, r5
   18764:	7013      	strb	r3, [r2, #0]
   18766:	4b62      	ldr	r3, [pc, #392]	; (188f0 <_printf_i+0x230>)
   18768:	270a      	movs	r7, #10
   1876a:	9303      	str	r3, [sp, #12]
   1876c:	e02f      	b.n	187ce <_printf_i+0x10e>
   1876e:	6820      	ldr	r0, [r4, #0]
   18770:	6819      	ldr	r1, [r3, #0]
   18772:	0605      	lsls	r5, r0, #24
   18774:	d503      	bpl.n	1877e <_printf_i+0xbe>
   18776:	1d08      	adds	r0, r1, #4
   18778:	6018      	str	r0, [r3, #0]
   1877a:	680d      	ldr	r5, [r1, #0]
   1877c:	e005      	b.n	1878a <_printf_i+0xca>
   1877e:	0640      	lsls	r0, r0, #25
   18780:	d5f9      	bpl.n	18776 <_printf_i+0xb6>
   18782:	680d      	ldr	r5, [r1, #0]
   18784:	1d08      	adds	r0, r1, #4
   18786:	6018      	str	r0, [r3, #0]
   18788:	b2ad      	uxth	r5, r5
   1878a:	4b59      	ldr	r3, [pc, #356]	; (188f0 <_printf_i+0x230>)
   1878c:	2708      	movs	r7, #8
   1878e:	9303      	str	r3, [sp, #12]
   18790:	2a6f      	cmp	r2, #111	; 0x6f
   18792:	d018      	beq.n	187c6 <_printf_i+0x106>
   18794:	270a      	movs	r7, #10
   18796:	e016      	b.n	187c6 <_printf_i+0x106>
   18798:	3145      	adds	r1, #69	; 0x45
   1879a:	700a      	strb	r2, [r1, #0]
   1879c:	4a54      	ldr	r2, [pc, #336]	; (188f0 <_printf_i+0x230>)
   1879e:	9203      	str	r2, [sp, #12]
   187a0:	681a      	ldr	r2, [r3, #0]
   187a2:	6821      	ldr	r1, [r4, #0]
   187a4:	1d10      	adds	r0, r2, #4
   187a6:	6018      	str	r0, [r3, #0]
   187a8:	6815      	ldr	r5, [r2, #0]
   187aa:	0608      	lsls	r0, r1, #24
   187ac:	d522      	bpl.n	187f4 <_printf_i+0x134>
   187ae:	07cb      	lsls	r3, r1, #31
   187b0:	d502      	bpl.n	187b8 <_printf_i+0xf8>
   187b2:	2320      	movs	r3, #32
   187b4:	4319      	orrs	r1, r3
   187b6:	6021      	str	r1, [r4, #0]
   187b8:	2710      	movs	r7, #16
   187ba:	2d00      	cmp	r5, #0
   187bc:	d103      	bne.n	187c6 <_printf_i+0x106>
   187be:	2320      	movs	r3, #32
   187c0:	6822      	ldr	r2, [r4, #0]
   187c2:	439a      	bics	r2, r3
   187c4:	6022      	str	r2, [r4, #0]
   187c6:	0023      	movs	r3, r4
   187c8:	2200      	movs	r2, #0
   187ca:	3343      	adds	r3, #67	; 0x43
   187cc:	701a      	strb	r2, [r3, #0]
   187ce:	6863      	ldr	r3, [r4, #4]
   187d0:	60a3      	str	r3, [r4, #8]
   187d2:	2b00      	cmp	r3, #0
   187d4:	db5c      	blt.n	18890 <_printf_i+0x1d0>
   187d6:	2204      	movs	r2, #4
   187d8:	6821      	ldr	r1, [r4, #0]
   187da:	4391      	bics	r1, r2
   187dc:	6021      	str	r1, [r4, #0]
   187de:	2d00      	cmp	r5, #0
   187e0:	d158      	bne.n	18894 <_printf_i+0x1d4>
   187e2:	9e04      	ldr	r6, [sp, #16]
   187e4:	2b00      	cmp	r3, #0
   187e6:	d064      	beq.n	188b2 <_printf_i+0x1f2>
   187e8:	0026      	movs	r6, r4
   187ea:	9b03      	ldr	r3, [sp, #12]
   187ec:	3642      	adds	r6, #66	; 0x42
   187ee:	781b      	ldrb	r3, [r3, #0]
   187f0:	7033      	strb	r3, [r6, #0]
   187f2:	e05e      	b.n	188b2 <_printf_i+0x1f2>
   187f4:	0648      	lsls	r0, r1, #25
   187f6:	d5da      	bpl.n	187ae <_printf_i+0xee>
   187f8:	b2ad      	uxth	r5, r5
   187fa:	e7d8      	b.n	187ae <_printf_i+0xee>
   187fc:	6809      	ldr	r1, [r1, #0]
   187fe:	681a      	ldr	r2, [r3, #0]
   18800:	0608      	lsls	r0, r1, #24
   18802:	d505      	bpl.n	18810 <_printf_i+0x150>
   18804:	1d11      	adds	r1, r2, #4
   18806:	6019      	str	r1, [r3, #0]
   18808:	6813      	ldr	r3, [r2, #0]
   1880a:	6962      	ldr	r2, [r4, #20]
   1880c:	601a      	str	r2, [r3, #0]
   1880e:	e006      	b.n	1881e <_printf_i+0x15e>
   18810:	0649      	lsls	r1, r1, #25
   18812:	d5f7      	bpl.n	18804 <_printf_i+0x144>
   18814:	1d11      	adds	r1, r2, #4
   18816:	6019      	str	r1, [r3, #0]
   18818:	6813      	ldr	r3, [r2, #0]
   1881a:	8aa2      	ldrh	r2, [r4, #20]
   1881c:	801a      	strh	r2, [r3, #0]
   1881e:	2300      	movs	r3, #0
   18820:	9e04      	ldr	r6, [sp, #16]
   18822:	6123      	str	r3, [r4, #16]
   18824:	e054      	b.n	188d0 <_printf_i+0x210>
   18826:	681a      	ldr	r2, [r3, #0]
   18828:	1d11      	adds	r1, r2, #4
   1882a:	6019      	str	r1, [r3, #0]
   1882c:	6816      	ldr	r6, [r2, #0]
   1882e:	2100      	movs	r1, #0
   18830:	6862      	ldr	r2, [r4, #4]
   18832:	0030      	movs	r0, r6
   18834:	f000 f85e 	bl	188f4 <memchr>
   18838:	2800      	cmp	r0, #0
   1883a:	d001      	beq.n	18840 <_printf_i+0x180>
   1883c:	1b80      	subs	r0, r0, r6
   1883e:	6060      	str	r0, [r4, #4]
   18840:	6863      	ldr	r3, [r4, #4]
   18842:	6123      	str	r3, [r4, #16]
   18844:	2300      	movs	r3, #0
   18846:	9a04      	ldr	r2, [sp, #16]
   18848:	7013      	strb	r3, [r2, #0]
   1884a:	e041      	b.n	188d0 <_printf_i+0x210>
   1884c:	6923      	ldr	r3, [r4, #16]
   1884e:	0032      	movs	r2, r6
   18850:	9906      	ldr	r1, [sp, #24]
   18852:	9805      	ldr	r0, [sp, #20]
   18854:	9d07      	ldr	r5, [sp, #28]
   18856:	47a8      	blx	r5
   18858:	1c43      	adds	r3, r0, #1
   1885a:	d043      	beq.n	188e4 <_printf_i+0x224>
   1885c:	6823      	ldr	r3, [r4, #0]
   1885e:	2500      	movs	r5, #0
   18860:	079b      	lsls	r3, r3, #30
   18862:	d40f      	bmi.n	18884 <_printf_i+0x1c4>
   18864:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18866:	68e0      	ldr	r0, [r4, #12]
   18868:	4298      	cmp	r0, r3
   1886a:	da3d      	bge.n	188e8 <_printf_i+0x228>
   1886c:	0018      	movs	r0, r3
   1886e:	e03b      	b.n	188e8 <_printf_i+0x228>
   18870:	0022      	movs	r2, r4
   18872:	2301      	movs	r3, #1
   18874:	3219      	adds	r2, #25
   18876:	9906      	ldr	r1, [sp, #24]
   18878:	9805      	ldr	r0, [sp, #20]
   1887a:	9e07      	ldr	r6, [sp, #28]
   1887c:	47b0      	blx	r6
   1887e:	1c43      	adds	r3, r0, #1
   18880:	d030      	beq.n	188e4 <_printf_i+0x224>
   18882:	3501      	adds	r5, #1
   18884:	68e3      	ldr	r3, [r4, #12]
   18886:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18888:	1a9b      	subs	r3, r3, r2
   1888a:	429d      	cmp	r5, r3
   1888c:	dbf0      	blt.n	18870 <_printf_i+0x1b0>
   1888e:	e7e9      	b.n	18864 <_printf_i+0x1a4>
   18890:	2d00      	cmp	r5, #0
   18892:	d0a9      	beq.n	187e8 <_printf_i+0x128>
   18894:	9e04      	ldr	r6, [sp, #16]
   18896:	0028      	movs	r0, r5
   18898:	0039      	movs	r1, r7
   1889a:	f7fc feaf 	bl	155fc <__aeabi_uidivmod>
   1889e:	9b03      	ldr	r3, [sp, #12]
   188a0:	3e01      	subs	r6, #1
   188a2:	5c5b      	ldrb	r3, [r3, r1]
   188a4:	0028      	movs	r0, r5
   188a6:	7033      	strb	r3, [r6, #0]
   188a8:	0039      	movs	r1, r7
   188aa:	f7fc fe21 	bl	154f0 <__udivsi3>
   188ae:	1e05      	subs	r5, r0, #0
   188b0:	d1f1      	bne.n	18896 <_printf_i+0x1d6>
   188b2:	2f08      	cmp	r7, #8
   188b4:	d109      	bne.n	188ca <_printf_i+0x20a>
   188b6:	6823      	ldr	r3, [r4, #0]
   188b8:	07db      	lsls	r3, r3, #31
   188ba:	d506      	bpl.n	188ca <_printf_i+0x20a>
   188bc:	6863      	ldr	r3, [r4, #4]
   188be:	6922      	ldr	r2, [r4, #16]
   188c0:	4293      	cmp	r3, r2
   188c2:	dc02      	bgt.n	188ca <_printf_i+0x20a>
   188c4:	2330      	movs	r3, #48	; 0x30
   188c6:	3e01      	subs	r6, #1
   188c8:	7033      	strb	r3, [r6, #0]
   188ca:	9b04      	ldr	r3, [sp, #16]
   188cc:	1b9b      	subs	r3, r3, r6
   188ce:	6123      	str	r3, [r4, #16]
   188d0:	9b07      	ldr	r3, [sp, #28]
   188d2:	aa09      	add	r2, sp, #36	; 0x24
   188d4:	9300      	str	r3, [sp, #0]
   188d6:	0021      	movs	r1, r4
   188d8:	9b06      	ldr	r3, [sp, #24]
   188da:	9805      	ldr	r0, [sp, #20]
   188dc:	f7ff fe82 	bl	185e4 <_printf_common>
   188e0:	1c43      	adds	r3, r0, #1
   188e2:	d1b3      	bne.n	1884c <_printf_i+0x18c>
   188e4:	2001      	movs	r0, #1
   188e6:	4240      	negs	r0, r0
   188e8:	b00b      	add	sp, #44	; 0x2c
   188ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   188ec:	00019da2 	.word	0x00019da2
   188f0:	00019d91 	.word	0x00019d91

000188f4 <memchr>:
   188f4:	b2c9      	uxtb	r1, r1
   188f6:	1882      	adds	r2, r0, r2
   188f8:	4290      	cmp	r0, r2
   188fa:	d101      	bne.n	18900 <memchr+0xc>
   188fc:	2000      	movs	r0, #0
   188fe:	4770      	bx	lr
   18900:	7803      	ldrb	r3, [r0, #0]
   18902:	428b      	cmp	r3, r1
   18904:	d0fb      	beq.n	188fe <memchr+0xa>
   18906:	3001      	adds	r0, #1
   18908:	e7f6      	b.n	188f8 <memchr+0x4>

0001890a <_realloc_r>:
   1890a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1890c:	0007      	movs	r7, r0
   1890e:	000d      	movs	r5, r1
   18910:	0016      	movs	r6, r2
   18912:	2900      	cmp	r1, #0
   18914:	d105      	bne.n	18922 <_realloc_r+0x18>
   18916:	0011      	movs	r1, r2
   18918:	f7ff fa86 	bl	17e28 <_malloc_r>
   1891c:	0004      	movs	r4, r0
   1891e:	0020      	movs	r0, r4
   18920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18922:	2a00      	cmp	r2, #0
   18924:	d103      	bne.n	1892e <_realloc_r+0x24>
   18926:	f7ff fa35 	bl	17d94 <_free_r>
   1892a:	0034      	movs	r4, r6
   1892c:	e7f7      	b.n	1891e <_realloc_r+0x14>
   1892e:	f000 f812 	bl	18956 <_malloc_usable_size_r>
   18932:	002c      	movs	r4, r5
   18934:	4286      	cmp	r6, r0
   18936:	d9f2      	bls.n	1891e <_realloc_r+0x14>
   18938:	0031      	movs	r1, r6
   1893a:	0038      	movs	r0, r7
   1893c:	f7ff fa74 	bl	17e28 <_malloc_r>
   18940:	1e04      	subs	r4, r0, #0
   18942:	d0ec      	beq.n	1891e <_realloc_r+0x14>
   18944:	0029      	movs	r1, r5
   18946:	0032      	movs	r2, r6
   18948:	f7ff f9f2 	bl	17d30 <memcpy>
   1894c:	0029      	movs	r1, r5
   1894e:	0038      	movs	r0, r7
   18950:	f7ff fa20 	bl	17d94 <_free_r>
   18954:	e7e3      	b.n	1891e <_realloc_r+0x14>

00018956 <_malloc_usable_size_r>:
   18956:	1f0b      	subs	r3, r1, #4
   18958:	681b      	ldr	r3, [r3, #0]
   1895a:	1f18      	subs	r0, r3, #4
   1895c:	2b00      	cmp	r3, #0
   1895e:	da01      	bge.n	18964 <_malloc_usable_size_r+0xe>
   18960:	580b      	ldr	r3, [r1, r0]
   18962:	18c0      	adds	r0, r0, r3
   18964:	4770      	bx	lr
   18966:	0000      	movs	r0, r0
   18968:	30303030 	.word	0x30303030
   1896c:	30303030 	.word	0x30303030
   18970:	00003030 	.word	0x00003030
   18974:	2e707466 	.word	0x2e707466
   18978:	76697264 	.word	0x76697264
   1897c:	2e716865 	.word	0x2e716865
   18980:	006d6f63 	.word	0x006d6f63
   18984:	7269662f 	.word	0x7269662f
   18988:	7261776d 	.word	0x7261776d
   1898c:	00002f65 	.word	0x00002f65
   18990:	75686172 	.word	0x75686172
   18994:	61726e6c 	.word	0x61726e6c
   18998:	646f6874 	.word	0x646f6874
   1899c:	006c636b 	.word	0x006c636b
   189a0:	34333231 	.word	0x34333231
   189a4:	38373635 	.word	0x38373635
   189a8:	00000039 	.word	0x00000039
   189ac:	6d726966 	.word	0x6d726966
   189b0:	65726177 	.word	0x65726177
   189b4:	6e69622e 	.word	0x6e69622e
   189b8:	00000000 	.word	0x00000000
   189bc:	31343037 	.word	0x31343037
   189c0:	39363931 	.word	0x39363931
   189c4:	00003935 	.word	0x00003935
   189c8:	38393637 	.word	0x38393637
   189cc:	32393334 	.word	0x32393334
   189d0:	00003130 	.word	0x00003130
   189d4:	33383337 	.word	0x33383337
   189d8:	32343136 	.word	0x32343136
   189dc:	00003431 	.word	0x00003431
   189e0:	33383337 	.word	0x33383337
   189e4:	36323236 	.word	0x36323236
   189e8:	00003837 	.word	0x00003837
   189ec:	36383539 	.word	0x36383539
   189f0:	39353331 	.word	0x39353331
   189f4:	00003837 	.word	0x00003837
   189f8:	00003a50 	.word	0x00003a50
   189fc:	00003a53 	.word	0x00003a53
   18a00:	0000000a 	.word	0x0000000a
   18a04:	204d5347 	.word	0x204d5347
   18a08:	656d6954 	.word	0x656d6954
   18a0c:	0074756f 	.word	0x0074756f
   18a10:	4f525245 	.word	0x4f525245
   18a14:	00000052 	.word	0x00000052
   18a18:	00004b4f 	.word	0x00004b4f
   18a1c:	000d5441 	.word	0x000d5441
   18a20:	492b5441 	.word	0x492b5441
   18a24:	303d4346 	.word	0x303d4346
   18a28:	000d302c 	.word	0x000d302c
   18a2c:	4552432b 	.word	0x4552432b
   18a30:	30203a47 	.word	0x30203a47
   18a34:	0000312c 	.word	0x0000312c
   18a38:	432b5441 	.word	0x432b5441
   18a3c:	3f474552 	.word	0x3f474552
   18a40:	0000000d 	.word	0x0000000d
   18a44:	4552432b 	.word	0x4552432b
   18a48:	30203a47 	.word	0x30203a47
   18a4c:	0000352c 	.word	0x0000352c
   18a50:	492b5441 	.word	0x492b5441
   18a54:	253d5250 	.word	0x253d5250
   18a58:	00000d64 	.word	0x00000d64
   18a5c:	492b5441 	.word	0x492b5441
   18a60:	303d5250 	.word	0x303d5250
   18a64:	0000000d 	.word	0x0000000d
   18a68:	432b5441 	.word	0x432b5441
   18a6c:	3d474552 	.word	0x3d474552
   18a70:	00000d31 	.word	0x00000d31
   18a74:	432b5441 	.word	0x432b5441
   18a78:	3d4e5546 	.word	0x3d4e5546
   18a7c:	00000d31 	.word	0x00000d31
   18a80:	5546432b 	.word	0x5546432b
   18a84:	31203a4e 	.word	0x31203a4e
   18a88:	00000000 	.word	0x00000000
   18a8c:	432b5441 	.word	0x432b5441
   18a90:	3f4e5546 	.word	0x3f4e5546
   18a94:	0000000d 	.word	0x0000000d
   18a98:	432b5441 	.word	0x432b5441
   18a9c:	3d4e5546 	.word	0x3d4e5546
   18aa0:	00000d30 	.word	0x00000d30
   18aa4:	5546432b 	.word	0x5546432b
   18aa8:	30203a4e 	.word	0x30203a4e
   18aac:	00000000 	.word	0x00000000
   18ab0:	432b5441 	.word	0x432b5441
   18ab4:	3d4e5546 	.word	0x3d4e5546
   18ab8:	0d312c31 	.word	0x0d312c31
   18abc:	00000000 	.word	0x00000000
   18ac0:	4950432b 	.word	0x4950432b
   18ac4:	52203a4e 	.word	0x52203a4e
   18ac8:	59444145 	.word	0x59444145
   18acc:	00000000 	.word	0x00000000
   18ad0:	432b5441 	.word	0x432b5441
   18ad4:	3f4e4950 	.word	0x3f4e4950
   18ad8:	0000000d 	.word	0x0000000d
   18adc:	432b5441 	.word	0x432b5441
   18ae0:	4144474d 	.word	0x4144474d
   18ae4:	4544223d 	.word	0x4544223d
   18ae8:	4c41204c 	.word	0x4c41204c
   18aec:	000d224c 	.word	0x000d224c
   18af0:	57265441 	.word	0x57265441
   18af4:	0000000d 	.word	0x0000000d
   18af8:	432b5441 	.word	0x432b5441
   18afc:	3d50494c 	.word	0x3d50494c
   18b00:	00000d31 	.word	0x00000d31
   18b04:	432b5441 	.word	0x432b5441
   18b08:	3d504c4f 	.word	0x3d504c4f
   18b0c:	00000d31 	.word	0x00000d31
   18b10:	432b5441 	.word	0x432b5441
   18b14:	4b4c4353 	.word	0x4b4c4353
   18b18:	000d313d 	.word	0x000d313d
   18b1c:	432b5441 	.word	0x432b5441
   18b20:	3f504c4f 	.word	0x3f504c4f
   18b24:	0000000d 	.word	0x0000000d
   18b28:	4c4f432b 	.word	0x4c4f432b
   18b2c:	00000050 	.word	0x00000050
   18b30:	0000003a 	.word	0x0000003a
   18b34:	0000002c 	.word	0x0000002c
   18b38:	432b5441 	.word	0x432b5441
   18b3c:	3d43434c 	.word	0x3d43434c
   18b40:	00000d31 	.word	0x00000d31
   18b44:	46265441 	.word	0x46265441
   18b48:	0000000d 	.word	0x0000000d
   18b4c:	30455441 	.word	0x30455441
   18b50:	0000000d 	.word	0x0000000d
   18b54:	432b5441 	.word	0x432b5441
   18b58:	3d46474d 	.word	0x3d46474d
   18b5c:	00000d31 	.word	0x00000d31
   18b60:	432b5441 	.word	0x432b5441
   18b64:	3d504d53 	.word	0x3d504d53
   18b68:	312c3731 	.word	0x312c3731
   18b6c:	302c3736 	.word	0x302c3736
   18b70:	000d302c 	.word	0x000d302c
   18b74:	432b5441 	.word	0x432b5441
   18b78:	3d534153 	.word	0x3d534153
   18b7c:	00000d30 	.word	0x00000d30
   18b80:	432b5441 	.word	0x432b5441
   18b84:	3d534153 	.word	0x3d534153
   18b88:	00000d31 	.word	0x00000d31
   18b8c:	432b5441 	.word	0x432b5441
   18b90:	000d5153 	.word	0x000d5153
   18b94:	00003939 	.word	0x00003939
   18b98:	432b5441 	.word	0x432b5441
   18b9c:	3d494d4e 	.word	0x3d494d4e
   18ba0:	2c312c32 	.word	0x2c312c32
   18ba4:	2c302c30 	.word	0x2c302c30
   18ba8:	00000d30 	.word	0x00000d30
   18bac:	432b5441 	.word	0x432b5441
   18bb0:	3d494d4e 	.word	0x3d494d4e
   18bb4:	2c302c31 	.word	0x2c302c31
   18bb8:	2c302c30 	.word	0x2c302c30
   18bbc:	00000d30 	.word	0x00000d30
   18bc0:	432b5441 	.word	0x432b5441
   18bc4:	3d53474d 	.word	0x3d53474d
   18bc8:	22732522 	.word	0x22732522
   18bcc:	0000000d 	.word	0x0000000d
   18bd0:	0000003e 	.word	0x0000003e
   18bd4:	0d1a7325 	.word	0x0d1a7325
   18bd8:	00000000 	.word	0x00000000
   18bdc:	432b5441 	.word	0x432b5441
   18be0:	3d4c474d 	.word	0x3d4c474d
   18be4:	43455222 	.word	0x43455222
   18be8:	524e5520 	.word	0x524e5520
   18bec:	22444145 	.word	0x22444145
   18bf0:	0000000d 	.word	0x0000000d
   18bf4:	432b5441 	.word	0x432b5441
   18bf8:	3d4c474d 	.word	0x3d4c474d
   18bfc:	43455222 	.word	0x43455222
   18c00:	41455220 	.word	0x41455220
   18c04:	000d2244 	.word	0x000d2244
   18c08:	432b5441 	.word	0x432b5441
   18c0c:	3d4c474d 	.word	0x3d4c474d
   18c10:	4c4c4122 	.word	0x4c4c4122
   18c14:	00000d22 	.word	0x00000d22
   18c18:	4c474d43 	.word	0x4c474d43
   18c1c:	00000000 	.word	0x00000000
   18c20:	432b5441 	.word	0x432b5441
   18c24:	3d52474d 	.word	0x3d52474d
   18c28:	000d6425 	.word	0x000d6425
   18c2c:	474d432b 	.word	0x474d432b
   18c30:	00000052 	.word	0x00000052
   18c34:	25445441 	.word	0x25445441
   18c38:	000d3b73 	.word	0x000d3b73
   18c3c:	0d415441 	.word	0x0d415441
   18c40:	00000000 	.word	0x00000000
   18c44:	432b5441 	.word	0x432b5441
   18c48:	3d53544c 	.word	0x3d53544c
   18c4c:	00000d31 	.word	0x00000d31
   18c50:	432b5441 	.word	0x432b5441
   18c54:	3d53544c 	.word	0x3d53544c
   18c58:	00000d30 	.word	0x00000d30
   18c5c:	442b5441 	.word	0x442b5441
   18c60:	3d544544 	.word	0x3d544544
   18c64:	00000d31 	.word	0x00000d31
   18c68:	562b5441 	.word	0x562b5441
   18c6c:	223d5354 	.word	0x223d5354
   18c70:	0d227325 	.word	0x0d227325
   18c74:	00000000 	.word	0x00000000
   18c78:	432b5441 	.word	0x432b5441
   18c7c:	0d505548 	.word	0x0d505548
   18c80:	00000000 	.word	0x00000000
   18c84:	432b5441 	.word	0x432b5441
   18c88:	3d415743 	.word	0x3d415743
   18c8c:	0d302c30 	.word	0x0d302c30
   18c90:	00000000 	.word	0x00000000
   18c94:	472b5441 	.word	0x472b5441
   18c98:	55424d53 	.word	0x55424d53
   18c9c:	313d5953 	.word	0x313d5953
   18ca0:	0000000d 	.word	0x0000000d
   18ca4:	472b5441 	.word	0x472b5441
   18ca8:	55424d53 	.word	0x55424d53
   18cac:	303d5953 	.word	0x303d5953
   18cb0:	0000000d 	.word	0x0000000d
   18cb4:	432b5441 	.word	0x432b5441
   18cb8:	3d434552 	.word	0x3d434552
   18cbc:	00000d35 	.word	0x00000d35
   18cc0:	432b5441 	.word	0x432b5441
   18cc4:	3d434552 	.word	0x3d434552
   18cc8:	43222c34 	.word	0x43222c34
   18ccc:	73555c3a 	.word	0x73555c3a
   18cd0:	255c7265 	.word	0x255c7265
   18cd4:	6d612e63 	.word	0x6d612e63
   18cd8:	302c2272 	.word	0x302c2272
   18cdc:	2c30392c 	.word	0x2c30392c
   18ce0:	000d7525 	.word	0x000d7525
   18ce4:	432b5441 	.word	0x432b5441
   18ce8:	3f4b4c43 	.word	0x3f4b4c43
   18cec:	0000000d 	.word	0x0000000d
   18cf0:	00000022 	.word	0x00000022
   18cf4:	0000002f 	.word	0x0000002f
   18cf8:	0000002b 	.word	0x0000002b
   18cfc:	544d432b 	.word	0x544d432b
   18d00:	00003a49 	.word	0x00003a49
   18d04:	474e4952 	.word	0x474e4952
   18d08:	00000000 	.word	0x00000000
   18d0c:	494c432b 	.word	0x494c432b
   18d10:	00000050 	.word	0x00000050
   18d14:	43204f4e 	.word	0x43204f4e
   18d18:	49525241 	.word	0x49525241
   18d1c:	00005245 	.word	0x00005245
   18d20:	59535542 	.word	0x59535542
   18d24:	00000000 	.word	0x00000000
   18d28:	41204f4e 	.word	0x41204f4e
   18d2c:	4557534e 	.word	0x4557534e
   18d30:	00000052 	.word	0x00000052
   18d34:	4d54442b 	.word	0x4d54442b
   18d38:	00003a46 	.word	0x00003a46
   18d3c:	4552432b 	.word	0x4552432b
   18d40:	30203a43 	.word	0x30203a43
   18d44:	00000000 	.word	0x00000000
   18d48:	532b5441 	.word	0x532b5441
   18d4c:	52425041 	.word	0x52425041
   18d50:	312c333d 	.word	0x312c333d
   18d54:	4f43222c 	.word	0x4f43222c
   18d58:	5059544e 	.word	0x5059544e
   18d5c:	222c2245 	.word	0x222c2245
   18d60:	53525047 	.word	0x53525047
   18d64:	00000d22 	.word	0x00000d22
   18d68:	432b5441 	.word	0x432b5441
   18d6c:	3f53504f 	.word	0x3f53504f
   18d70:	0000000d 	.word	0x0000000d
   18d74:	504f432b 	.word	0x504f432b
   18d78:	00003a53 	.word	0x00003a53
   18d7c:	41454449 	.word	0x41454449
   18d80:	00000000 	.word	0x00000000
   18d84:	532b5441 	.word	0x532b5441
   18d88:	52425041 	.word	0x52425041
   18d8c:	312c333d 	.word	0x312c333d
   18d90:	5041222c 	.word	0x5041222c
   18d94:	222c224e 	.word	0x222c224e
   18d98:	65746e69 	.word	0x65746e69
   18d9c:	74656e72 	.word	0x74656e72
   18da0:	00000d22 	.word	0x00000d22
   18da4:	41444f56 	.word	0x41444f56
   18da8:	00000000 	.word	0x00000000
   18dac:	532b5441 	.word	0x532b5441
   18db0:	52425041 	.word	0x52425041
   18db4:	312c333d 	.word	0x312c333d
   18db8:	5041222c 	.word	0x5041222c
   18dbc:	222c224e 	.word	0x222c224e
   18dc0:	22777777 	.word	0x22777777
   18dc4:	0000000d 	.word	0x0000000d
   18dc8:	4c4e5342 	.word	0x4c4e5342
   18dcc:	00000000 	.word	0x00000000
   18dd0:	532b5441 	.word	0x532b5441
   18dd4:	52425041 	.word	0x52425041
   18dd8:	312c333d 	.word	0x312c333d
   18ddc:	5041222c 	.word	0x5041222c
   18de0:	222c224e 	.word	0x222c224e
   18de4:	6c6e7362 	.word	0x6c6e7362
   18de8:	2274656e 	.word	0x2274656e
   18dec:	0000000d 	.word	0x0000000d
   18df0:	54524941 	.word	0x54524941
   18df4:	00004c45 	.word	0x00004c45
   18df8:	532b5441 	.word	0x532b5441
   18dfc:	52425041 	.word	0x52425041
   18e00:	312c333d 	.word	0x312c333d
   18e04:	5041222c 	.word	0x5041222c
   18e08:	222c224e 	.word	0x222c224e
   18e0c:	74726961 	.word	0x74726961
   18e10:	70676c65 	.word	0x70676c65
   18e14:	632e7372 	.word	0x632e7372
   18e18:	0d226d6f 	.word	0x0d226d6f
   18e1c:	00000000 	.word	0x00000000
   18e20:	532b5441 	.word	0x532b5441
   18e24:	52425041 	.word	0x52425041
   18e28:	312c333d 	.word	0x312c333d
   18e2c:	5041222c 	.word	0x5041222c
   18e30:	222c224e 	.word	0x222c224e
   18e34:	00000d22 	.word	0x00000d22
   18e38:	532b5441 	.word	0x532b5441
   18e3c:	52425041 	.word	0x52425041
   18e40:	312c323d 	.word	0x312c323d
   18e44:	0000000d 	.word	0x0000000d
   18e48:	5041532b 	.word	0x5041532b
   18e4c:	203a5242 	.word	0x203a5242
   18e50:	00302c31 	.word	0x00302c31
   18e54:	5041532b 	.word	0x5041532b
   18e58:	203a5242 	.word	0x203a5242
   18e5c:	00312c31 	.word	0x00312c31
   18e60:	5041532b 	.word	0x5041532b
   18e64:	203a5242 	.word	0x203a5242
   18e68:	00322c31 	.word	0x00322c31
   18e6c:	5041532b 	.word	0x5041532b
   18e70:	203a5242 	.word	0x203a5242
   18e74:	00332c31 	.word	0x00332c31
   18e78:	532b5441 	.word	0x532b5441
   18e7c:	52425041 	.word	0x52425041
   18e80:	312c313d 	.word	0x312c313d
   18e84:	0000000d 	.word	0x0000000d
   18e88:	532b5441 	.word	0x532b5441
   18e8c:	52425041 	.word	0x52425041
   18e90:	312c303d 	.word	0x312c303d
   18e94:	0000000d 	.word	0x0000000d
   18e98:	462b5441 	.word	0x462b5441
   18e9c:	49435054 	.word	0x49435054
   18ea0:	0d313d44 	.word	0x0d313d44
   18ea4:	00000000 	.word	0x00000000
   18ea8:	462b5441 	.word	0x462b5441
   18eac:	45535054 	.word	0x45535054
   18eb0:	223d5652 	.word	0x223d5652
   18eb4:	0d227325 	.word	0x0d227325
   18eb8:	00000000 	.word	0x00000000
   18ebc:	462b5441 	.word	0x462b5441
   18ec0:	4e555054 	.word	0x4e555054
   18ec4:	7325223d 	.word	0x7325223d
   18ec8:	00000d22 	.word	0x00000d22
   18ecc:	462b5441 	.word	0x462b5441
   18ed0:	57505054 	.word	0x57505054
   18ed4:	7325223d 	.word	0x7325223d
   18ed8:	00000d22 	.word	0x00000d22
   18edc:	462b5441 	.word	0x462b5441
   18ee0:	45475054 	.word	0x45475054
   18ee4:	4d414e54 	.word	0x4d414e54
   18ee8:	25223d45 	.word	0x25223d45
   18eec:	000d2273 	.word	0x000d2273
   18ef0:	462b5441 	.word	0x462b5441
   18ef4:	45475054 	.word	0x45475054
   18ef8:	54415054 	.word	0x54415054
   18efc:	25223d48 	.word	0x25223d48
   18f00:	000d2273 	.word	0x000d2273
   18f04:	5054462b 	.word	0x5054462b
   18f08:	455a4953 	.word	0x455a4953
   18f0c:	2c31203a 	.word	0x2c31203a
   18f10:	00000000 	.word	0x00000000
   18f14:	462b5441 	.word	0x462b5441
   18f18:	49535054 	.word	0x49535054
   18f1c:	000d455a 	.word	0x000d455a
   18f20:	5054462b 	.word	0x5054462b
   18f24:	3a544547 	.word	0x3a544547
   18f28:	312c3120 	.word	0x312c3120
   18f2c:	00000000 	.word	0x00000000
   18f30:	462b5441 	.word	0x462b5441
   18f34:	45475054 	.word	0x45475054
   18f38:	0d313d54 	.word	0x0d313d54
   18f3c:	00000000 	.word	0x00000000
   18f40:	462b5441 	.word	0x462b5441
   18f44:	45475054 	.word	0x45475054
   18f48:	2c323d54 	.word	0x2c323d54
   18f4c:	000d6425 	.word	0x000d6425
   18f50:	5054462b 	.word	0x5054462b
   18f54:	3a544547 	.word	0x3a544547
   18f58:	00000020 	.word	0x00000020
   18f5c:	434c432b 	.word	0x434c432b
   18f60:	31203a43 	.word	0x31203a43
   18f64:	322c302c 	.word	0x322c302c
   18f68:	00000000 	.word	0x00000000
   18f6c:	434c432b 	.word	0x434c432b
   18f70:	31203a43 	.word	0x31203a43
   18f74:	332c302c 	.word	0x332c302c
   18f78:	00000000 	.word	0x00000000
   18f7c:	434c432b 	.word	0x434c432b
   18f80:	31203a43 	.word	0x31203a43
   18f84:	302c302c 	.word	0x302c302c
   18f88:	00000000 	.word	0x00000000
   18f8c:	434c432b 	.word	0x434c432b
   18f90:	31203a43 	.word	0x31203a43
   18f94:	362c302c 	.word	0x362c302c
	...
   18fa0:	4e4f4d41 	.word	0x4e4f4d41
   18fa4:	00000000 	.word	0x00000000
   18fa8:	55475250 	.word	0x55475250
   18fac:	00004450 	.word	0x00004450
   18fb0:	54494157 	.word	0x54494157
   18fb4:	00000000 	.word	0x00000000
   18fb8:	204d5347 	.word	0x204d5347
   18fbc:	4c4c4143 	.word	0x4c4c4143
   18fc0:	49415720 	.word	0x49415720
   18fc4:	4e495454 	.word	0x4e495454
   18fc8:	49442047 	.word	0x49442047
   18fcc:	4c424153 	.word	0x4c424153
   18fd0:	203a2045 	.word	0x203a2045
   18fd4:	43435553 	.word	0x43435553
   18fd8:	00535345 	.word	0x00535345
   18fdc:	204d5347 	.word	0x204d5347
   18fe0:	4c4c4143 	.word	0x4c4c4143
   18fe4:	49415720 	.word	0x49415720
   18fe8:	4e495454 	.word	0x4e495454
   18fec:	49442047 	.word	0x49442047
   18ff0:	4c424153 	.word	0x4c424153
   18ff4:	203a2045 	.word	0x203a2045
   18ff8:	4c494146 	.word	0x4c494146
   18ffc:	00004445 	.word	0x00004445
   19000:	41454c43 	.word	0x41454c43
   19004:	4c4c4152 	.word	0x4c4c4152
   19008:	00000000 	.word	0x00000000
   1900c:	204c4c41 	.word	0x204c4c41
   19010:	52455355 	.word	0x52455355
   19014:	4d554e20 	.word	0x4d554e20
   19018:	53524542 	.word	0x53524542
   1901c:	454c4320 	.word	0x454c4320
   19020:	44455241 	.word	0x44455241
   19024:	00000000 	.word	0x00000000
   19028:	41464544 	.word	0x41464544
   1902c:	00544c55 	.word	0x00544c55
   19030:	204c4c41 	.word	0x204c4c41
   19034:	54544553 	.word	0x54544553
   19038:	53474e49 	.word	0x53474e49
   1903c:	45524120 	.word	0x45524120
   19040:	574f4e20 	.word	0x574f4e20
   19044:	43414620 	.word	0x43414620
   19048:	59524f54 	.word	0x59524f54
   1904c:	46454420 	.word	0x46454420
   19050:	544c5541 	.word	0x544c5541
   19054:	00000000 	.word	0x00000000
   19058:	004d554e 	.word	0x004d554e
   1905c:	4e206f4e 	.word	0x4e206f4e
   19060:	65626d75 	.word	0x65626d75
   19064:	45207372 	.word	0x45207372
   19068:	74736978 	.word	0x74736978
   1906c:	00000073 	.word	0x00000073
   19070:	45534552 	.word	0x45534552
   19074:	00000054 	.word	0x00000054
   19078:	00444944 	.word	0x00444944
   1907c:	4f545541 	.word	0x4f545541
   19080:	00004e4f 	.word	0x00004e4f
   19084:	4f544f4d 	.word	0x4f544f4d
   19088:	55412052 	.word	0x55412052
   1908c:	4e4f4f54 	.word	0x4e4f4f54
   19090:	004e4f20 	.word	0x004e4f20
   19094:	4f545541 	.word	0x4f545541
   19098:	0046464f 	.word	0x0046464f
   1909c:	4f544f4d 	.word	0x4f544f4d
   190a0:	55412052 	.word	0x55412052
   190a4:	4e4f4f54 	.word	0x4e4f4f54
   190a8:	46464f20 	.word	0x46464f20
   190ac:	00000000 	.word	0x00000000
   190b0:	50594257 	.word	0x50594257
   190b4:	00004e4f 	.word	0x00004e4f
   190b8:	45544157 	.word	0x45544157
   190bc:	59422052 	.word	0x59422052
   190c0:	53534150 	.word	0x53534150
   190c4:	004e4f20 	.word	0x004e4f20
   190c8:	50594257 	.word	0x50594257
   190cc:	0046464f 	.word	0x0046464f
   190d0:	45544157 	.word	0x45544157
   190d4:	59422052 	.word	0x59422052
   190d8:	53534150 	.word	0x53534150
   190dc:	46464f20 	.word	0x46464f20
   190e0:	00000000 	.word	0x00000000
   190e4:	4f505053 	.word	0x4f505053
   190e8:	0000004e 	.word	0x0000004e
   190ec:	20505053 	.word	0x20505053
   190f0:	00004e4f 	.word	0x00004e4f
   190f4:	4f505053 	.word	0x4f505053
   190f8:	00004646 	.word	0x00004646
   190fc:	20505053 	.word	0x20505053
   19100:	0046464f 	.word	0x0046464f
   19104:	56505053 	.word	0x56505053
   19108:	00000000 	.word	0x00000000
   1910c:	20505053 	.word	0x20505053
   19110:	544c4f56 	.word	0x544c4f56
   19114:	54455320 	.word	0x54455320
   19118:	00000000 	.word	0x00000000
   1911c:	4f514553 	.word	0x4f514553
   19120:	0000004e 	.word	0x0000004e
   19124:	50514553 	.word	0x50514553
   19128:	004e4f20 	.word	0x004e4f20
   1912c:	4f514553 	.word	0x4f514553
   19130:	00004646 	.word	0x00004646
   19134:	50514553 	.word	0x50514553
   19138:	46464f20 	.word	0x46464f20
   1913c:	00000000 	.word	0x00000000
   19140:	00444e44 	.word	0x00444e44
   19144:	20444e44 	.word	0x20444e44
   19148:	0000203a 	.word	0x0000203a
   1914c:	004b4f20 	.word	0x004b4f20
   19150:	4b424446 	.word	0x4b424446
   19154:	00000000 	.word	0x00000000
   19158:	4b424446 	.word	0x4b424446
   1915c:	25203a20 	.word	0x25203a20
   19160:	00000064 	.word	0x00000064
   19164:	50534552 	.word	0x50534552
   19168:	00000000 	.word	0x00000000
   1916c:	50534552 	.word	0x50534552
   19170:	00203a20 	.word	0x00203a20
   19174:	0052564f 	.word	0x0052564f
   19178:	2052564f 	.word	0x2052564f
   1917c:	20544553 	.word	0x20544553
   19180:	00004b4f 	.word	0x00004b4f
   19184:	52444e55 	.word	0x52444e55
   19188:	00000000 	.word	0x00000000
   1918c:	52444e55 	.word	0x52444e55
   19190:	54455320 	.word	0x54455320
   19194:	004b4f20 	.word	0x004b4f20
   19198:	41545341 	.word	0x41545341
   1919c:	00000054 	.word	0x00000054
   191a0:	75253a43 	.word	0x75253a43
   191a4:	0a75252e 	.word	0x0a75252e
   191a8:	75253a4e 	.word	0x75253a4e
   191ac:	253a4f0a 	.word	0x253a4f0a
   191b0:	3a550a75 	.word	0x3a550a75
   191b4:	4f0a7525 	.word	0x4f0a7525
   191b8:	75253a50 	.word	0x75253a50
   191bc:	3a50550a 	.word	0x3a50550a
   191c0:	00007525 	.word	0x00007525
   191c4:	4f46564f 	.word	0x4f46564f
   191c8:	0000004e 	.word	0x0000004e
   191cc:	56455250 	.word	0x56455250
   191d0:	20544e45 	.word	0x20544e45
   191d4:	5245564f 	.word	0x5245564f
   191d8:	574f4c46 	.word	0x574f4c46
   191dc:	54455320 	.word	0x54455320
   191e0:	474e4954 	.word	0x474e4954
   191e4:	004e4f20 	.word	0x004e4f20
   191e8:	4f46564f 	.word	0x4f46564f
   191ec:	00004646 	.word	0x00004646
   191f0:	56455250 	.word	0x56455250
   191f4:	20544e45 	.word	0x20544e45
   191f8:	5245564f 	.word	0x5245564f
   191fc:	574f4c46 	.word	0x574f4c46
   19200:	54455320 	.word	0x54455320
   19204:	474e4954 	.word	0x474e4954
   19208:	46464f20 	.word	0x46464f20
   1920c:	00000000 	.word	0x00000000
   19210:	4f4d324d 	.word	0x4f4d324d
   19214:	0000004e 	.word	0x0000004e
   19218:	204d324d 	.word	0x204d324d
   1921c:	6e727554 	.word	0x6e727554
   19220:	4f206465 	.word	0x4f206465
   19224:	52202c6e 	.word	0x52202c6e
   19228:	746f6d65 	.word	0x746f6d65
   1922c:	754e2065 	.word	0x754e2065
   19230:	7265626d 	.word	0x7265626d
   19234:	726c4120 	.word	0x726c4120
   19238:	79646165 	.word	0x79646165
   1923c:	72655620 	.word	0x72655620
   19240:	65696669 	.word	0x65696669
   19244:	00000064 	.word	0x00000064
   19248:	6f727245 	.word	0x6f727245
   1924c:	4d203a72 	.word	0x4d203a72
   19250:	52204d32 	.word	0x52204d32
   19254:	746f6d65 	.word	0x746f6d65
   19258:	754e2065 	.word	0x754e2065
   1925c:	7265626d 	.word	0x7265626d
   19260:	746f4e20 	.word	0x746f4e20
   19264:	65725020 	.word	0x65725020
   19268:	746e6573 	.word	0x746e6573
   1926c:	00000000 	.word	0x00000000
   19270:	4f4d324d 	.word	0x4f4d324d
   19274:	00004646 	.word	0x00004646
   19278:	204d324d 	.word	0x204d324d
   1927c:	54544553 	.word	0x54544553
   19280:	20474e49 	.word	0x20474e49
   19284:	0046464f 	.word	0x0046464f
   19288:	54415453 	.word	0x54415453
   1928c:	00005355 	.word	0x00005355
   19290:	45544c41 	.word	0x45544c41
   19294:	54414e52 	.word	0x54414e52
   19298:	554e2045 	.word	0x554e2045
   1929c:	5245424d 	.word	0x5245424d
   192a0:	004e4f20 	.word	0x004e4f20
   192a4:	45544c41 	.word	0x45544c41
   192a8:	54414e52 	.word	0x54414e52
   192ac:	554e2045 	.word	0x554e2045
   192b0:	5245424d 	.word	0x5245424d
   192b4:	544f4e20 	.word	0x544f4e20
   192b8:	45525020 	.word	0x45525020
   192bc:	544e4553 	.word	0x544e4553
   192c0:	00000000 	.word	0x00000000
   192c4:	464f4d41 	.word	0x464f4d41
   192c8:	00000046 	.word	0x00000046
   192cc:	45544c41 	.word	0x45544c41
   192d0:	54414e52 	.word	0x54414e52
   192d4:	4f4d2045 	.word	0x4f4d2045
   192d8:	454c4942 	.word	0x454c4942
   192dc:	4d554e20 	.word	0x4d554e20
   192e0:	20524542 	.word	0x20524542
   192e4:	0046464f 	.word	0x0046464f
   192e8:	464f434e 	.word	0x464f434e
   192ec:	00000046 	.word	0x00000046
   192f0:	43204f4e 	.word	0x43204f4e
   192f4:	204c4c41 	.word	0x204c4c41
   192f8:	54544553 	.word	0x54544553
   192fc:	20474e49 	.word	0x20474e49
   19300:	0046464f 	.word	0x0046464f
   19304:	54544547 	.word	0x54544547
   19308:	00454d49 	.word	0x00454d49
   1930c:	454d4954 	.word	0x454d4954
   19310:	25203a20 	.word	0x25203a20
   19314:	75253a75 	.word	0x75253a75
   19318:	00000000 	.word	0x00000000
   1931c:	54544553 	.word	0x54544553
   19320:	00454d49 	.word	0x00454d49
   19324:	4954434e 	.word	0x4954434e
   19328:	0000454d 	.word	0x0000454d
   1932c:	0000002d 	.word	0x0000002d
   19330:	0000003a 	.word	0x0000003a
   19334:	43204f4e 	.word	0x43204f4e
   19338:	204c4c41 	.word	0x204c4c41
   1933c:	494d4954 	.word	0x494d4954
   19340:	2053474e 	.word	0x2053474e
   19344:	00544553 	.word	0x00544553
   19348:	47415453 	.word	0x47415453
   1934c:	00000045 	.word	0x00000045
   19350:	4c4c4143 	.word	0x4c4c4143
   19354:	41545320 	.word	0x41545320
   19358:	53204547 	.word	0x53204547
   1935c:	54205445 	.word	0x54205445
   19360:	203a204f 	.word	0x203a204f
   19364:	00006425 	.word	0x00006425
   19368:	52415453 	.word	0x52415453
   1936c:	454d4954 	.word	0x454d4954
   19370:	00000000 	.word	0x00000000
   19374:	41545320 	.word	0x41545320
   19378:	4d495452 	.word	0x4d495452
   1937c:	45532045 	.word	0x45532045
   19380:	4f542054 	.word	0x4f542054
   19384:	25203a20 	.word	0x25203a20
   19388:	00000064 	.word	0x00000064
   1938c:	4f545541 	.word	0x4f545541
   19390:	454d4954 	.word	0x454d4954
   19394:	00000000 	.word	0x00000000
   19398:	54554120 	.word	0x54554120
   1939c:	4d49544f 	.word	0x4d49544f
   193a0:	45532045 	.word	0x45532045
   193a4:	4f542054 	.word	0x4f542054
   193a8:	25203a20 	.word	0x25203a20
   193ac:	00000064 	.word	0x00000064
   193b0:	004c4142 	.word	0x004c4142
   193b4:	002b504d 	.word	0x002b504d
   193b8:	4f4e2050 	.word	0x4f4e2050
   193bc:	44444120 	.word	0x44444120
   193c0:	00444544 	.word	0x00444544
   193c4:	002b534d 	.word	0x002b534d
   193c8:	4f4e2053 	.word	0x4f4e2053
   193cc:	44444120 	.word	0x44444120
   193d0:	00444544 	.word	0x00444544
   193d4:	00002b4d 	.word	0x00002b4d
   193d8:	49424f4d 	.word	0x49424f4d
   193dc:	4e20454c 	.word	0x4e20454c
   193e0:	00003a4f 	.word	0x00003a4f
   193e4:	0000000a 	.word	0x0000000a
   193e8:	45444441 	.word	0x45444441
   193ec:	55532044 	.word	0x55532044
   193f0:	53454343 	.word	0x53454343
   193f4:	4c554653 	.word	0x4c554653
   193f8:	0000594c 	.word	0x0000594c
   193fc:	00002d4d 	.word	0x00002d4d
   19400:	4f4d4552 	.word	0x4f4d4552
   19404:	20444556 	.word	0x20444556
   19408:	43435553 	.word	0x43435553
   1940c:	46535345 	.word	0x46535345
   19410:	594c4c55 	.word	0x594c4c55
   19414:	00000000 	.word	0x00000000
   19418:	002b4d41 	.word	0x002b4d41
   1941c:	45544c41 	.word	0x45544c41
   19420:	54414e52 	.word	0x54414e52
   19424:	4f4d2045 	.word	0x4f4d2045
   19428:	454c4942 	.word	0x454c4942
   1942c:	204f4e20 	.word	0x204f4e20
   19430:	20444441 	.word	0x20444441
   19434:	43435553 	.word	0x43435553
   19438:	00535345 	.word	0x00535345
   1943c:	002b4d4d 	.word	0x002b4d4d
   19440:	204d324d 	.word	0x204d324d
   19444:	202e4f4e 	.word	0x202e4f4e
   19448:	45444441 	.word	0x45444441
   1944c:	00000044 	.word	0x00000044
   19450:	002b524d 	.word	0x002b524d
   19454:	204d324d 	.word	0x204d324d
   19458:	4f4d4552 	.word	0x4f4d4552
   1945c:	4e204554 	.word	0x4e204554
   19460:	41202e4f 	.word	0x41202e4f
   19464:	44454444 	.word	0x44454444
   19468:	00000000 	.word	0x00000000
   1946c:	4f525245 	.word	0x4f525245
   19470:	203a2052 	.word	0x203a2052
   19474:	00007325 	.word	0x00007325
   19478:	00004e4f 	.word	0x00004e4f
   1947c:	48502032 	.word	0x48502032
   19480:	00455341 	.word	0x00455341
   19484:	00004b4f 	.word	0x00004b4f
   19488:	4f525245 	.word	0x4f525245
   1948c:	00000052 	.word	0x00000052
   19490:	203a5952 	.word	0x203a5952
   19494:	59206425 	.word	0x59206425
   19498:	25203a42 	.word	0x25203a42
   1949c:	52422064 	.word	0x52422064
   194a0:	6425203a 	.word	0x6425203a
   194a4:	3a43410a 	.word	0x3a43410a
   194a8:	0a732520 	.word	0x0a732520
   194ac:	75716553 	.word	0x75716553
   194b0:	65636e65 	.word	0x65636e65
   194b4:	7325203a 	.word	0x7325203a
   194b8:	746f4d0a 	.word	0x746f4d0a
   194bc:	203a726f 	.word	0x203a726f
   194c0:	430a7325 	.word	0x430a7325
   194c4:	65727275 	.word	0x65727275
   194c8:	203a746e 	.word	0x203a746e
   194cc:	0a416425 	.word	0x0a416425
   194d0:	7774654e 	.word	0x7774654e
   194d4:	3a6b726f 	.word	0x3a6b726f
   194d8:	00642520 	.word	0x00642520
   194dc:	304d4d56 	.word	0x304d4d56
   194e0:	00000031 	.word	0x00000031
   194e4:	4f544f4d 	.word	0x4f544f4d
   194e8:	00002052 	.word	0x00002052
   194ec:	0046464f 	.word	0x0046464f
   194f0:	494d4441 	.word	0x494d4441
   194f4:	0000004e 	.word	0x0000004e
   194f8:	00000023 	.word	0x00000023
   194fc:	30524d56 	.word	0x30524d56
   19500:	00000032 	.word	0x00000032
   19504:	204d324d 	.word	0x204d324d
   19508:	4e525554 	.word	0x4e525554
   1950c:	4f204445 	.word	0x4f204445
   19510:	0000004e 	.word	0x0000004e
   19514:	0000203a 	.word	0x0000203a
   19518:	00006d98 	.word	0x00006d98
   1951c:	00006e7e 	.word	0x00006e7e
   19520:	00006e7e 	.word	0x00006e7e
   19524:	00006d98 	.word	0x00006d98
   19528:	00006e7e 	.word	0x00006e7e
   1952c:	00006e7e 	.word	0x00006e7e
   19530:	00006e7e 	.word	0x00006e7e
   19534:	00006e7e 	.word	0x00006e7e
   19538:	00006e7e 	.word	0x00006e7e
   1953c:	00006e7e 	.word	0x00006e7e
   19540:	00006e7e 	.word	0x00006e7e
   19544:	00006e7e 	.word	0x00006e7e
   19548:	00006d98 	.word	0x00006d98
   1954c:	00006e7e 	.word	0x00006e7e
   19550:	00006e7e 	.word	0x00006e7e
   19554:	00006e7e 	.word	0x00006e7e
   19558:	00006d5a 	.word	0x00006d5a
   1955c:	00006e7e 	.word	0x00006e7e
   19560:	00006d98 	.word	0x00006d98
   19564:	49524b20 	.word	0x49524b20
   19568:	414e4853 	.word	0x414e4853
   1956c:	4d532020 	.word	0x4d532020
   19570:	20545241 	.word	0x20545241
   19574:	00000000 	.word	0x00000000
   19578:	54202020 	.word	0x54202020
   1957c:	4e484345 	.word	0x4e484345
   19580:	474f4c4f 	.word	0x474f4c4f
   19584:	20202059 	.word	0x20202059
   19588:	00000000 	.word	0x00000000
   1958c:	4f532020 	.word	0x4f532020
   19590:	41575446 	.word	0x41575446
   19594:	56204552 	.word	0x56204552
   19598:	20205245 	.word	0x20205245
   1959c:	00000000 	.word	0x00000000
   195a0:	31422020 	.word	0x31422020
   195a4:	33302d36 	.word	0x33302d36
   195a8:	2d34302d 	.word	0x2d34302d
   195ac:	20203931 	.word	0x20203931
   195b0:	00000000 	.word	0x00000000
   195b4:	00007325 	.word	0x00007325
   195b8:	20595256 	.word	0x20595256
   195bc:	59562020 	.word	0x59562020
   195c0:	20202042 	.word	0x20202042
   195c4:	20524256 	.word	0x20524256
   195c8:	00000000 	.word	0x00000000
   195cc:	6c333025 	.word	0x6c333025
   195d0:	20202075 	.word	0x20202075
   195d4:	00000000 	.word	0x00000000
   195d8:	6c333025 	.word	0x6c333025
   195dc:	00002075 	.word	0x00002075
   195e0:	4f544f4d 	.word	0x4f544f4d
   195e4:	20203a52 	.word	0x20203a52
   195e8:	2046464f 	.word	0x2046464f
   195ec:	20202020 	.word	0x20202020
   195f0:	00000000 	.word	0x00000000
   195f4:	20202020 	.word	0x20202020
   195f8:	20202020 	.word	0x20202020
   195fc:	20202020 	.word	0x20202020
   19600:	20202020 	.word	0x20202020
   19604:	00000000 	.word	0x00000000
   19608:	4f544f4d 	.word	0x4f544f4d
   1960c:	55432052 	.word	0x55432052
   19610:	4e455252 	.word	0x4e455252
   19614:	20203a54 	.word	0x20203a54
   19618:	00000000 	.word	0x00000000
   1961c:	6c333025 	.word	0x6c333025
   19620:	30252e75 	.word	0x30252e75
   19624:	20756c32 	.word	0x20756c32
   19628:	20202020 	.word	0x20202020
   1962c:	20202020 	.word	0x20202020
   19630:	00202020 	.word	0x00202020
   19634:	48502033 	.word	0x48502033
   19638:	20455341 	.word	0x20455341
   1963c:	3a514553 	.word	0x3a514553
   19640:	00000000 	.word	0x00000000
   19644:	204b4f20 	.word	0x204b4f20
   19648:	00000000 	.word	0x00000000
   1964c:	52524520 	.word	0x52524520
   19650:	00000000 	.word	0x00000000
   19654:	53414850 	.word	0x53414850
   19658:	54532045 	.word	0x54532045
   1965c:	3a455441 	.word	0x3a455441
   19660:	00000000 	.word	0x00000000
   19664:	48503320 	.word	0x48503320
   19668:	00000020 	.word	0x00000020
   1966c:	48503220 	.word	0x48503220
   19670:	00000020 	.word	0x00000020
   19674:	46464f20 	.word	0x46464f20
   19678:	00000000 	.word	0x00000000
   1967c:	454c2d4f 	.word	0x454c2d4f
   19680:	204c4556 	.word	0x204c4556
   19684:	0000203a 	.word	0x0000203a
   19688:	48474948 	.word	0x48474948
   1968c:	00002020 	.word	0x00002020
   19690:	2044494d 	.word	0x2044494d
   19694:	00002020 	.word	0x00002020
   19698:	20574f4c 	.word	0x20574f4c
   1969c:	00002020 	.word	0x00002020
   196a0:	454c2d55 	.word	0x454c2d55
   196a4:	204c4556 	.word	0x204c4556
   196a8:	0000203a 	.word	0x0000203a
   196ac:	43545243 	.word	0x43545243
   196b0:	0000204c 	.word	0x0000204c
   196b4:	74746142 	.word	0x74746142
   196b8:	50797265 	.word	0x50797265
   196bc:	203a7265 	.word	0x203a7265
   196c0:	25257525 	.word	0x25257525
   196c4:	00000020 	.word	0x00000020
   196c8:	4e474953 	.word	0x4e474953
   196cc:	3a204c41 	.word	0x3a204c41
   196d0:	00000020 	.word	0x00000020
   196d4:	20202020 	.word	0x20202020
   196d8:	00202020 	.word	0x00202020
   196dc:	4f434e49 	.word	0x4f434e49
   196e0:	474e494d 	.word	0x474e494d
   196e4:	4c414320 	.word	0x4c414320
   196e8:	202e2e4c 	.word	0x202e2e4c
   196ec:	00000000 	.word	0x00000000
   196f0:	36312d25 	.word	0x36312d25
   196f4:	00000073 	.word	0x00000073
   196f8:	43204e49 	.word	0x43204e49
   196fc:	2e4c4c41 	.word	0x2e4c4c41
   19700:	20202e2e 	.word	0x20202e2e
   19704:	20202020 	.word	0x20202020
   19708:	00000000 	.word	0x00000000
   1970c:	4c414944 	.word	0x4c414944
   19710:	2e474e49 	.word	0x2e474e49
   19714:	20202e2e 	.word	0x20202e2e
   19718:	20202020 	.word	0x20202020
   1971c:	00000000 	.word	0x00000000
   19720:	4f434e49 	.word	0x4f434e49
   19724:	474e494d 	.word	0x474e494d
   19728:	534d5320 	.word	0x534d5320
   1972c:	202e2e2e 	.word	0x202e2e2e
   19730:	00000000 	.word	0x00000000
   19734:	4754554f 	.word	0x4754554f
   19738:	474e494f 	.word	0x474e494f
   1973c:	534d5320 	.word	0x534d5320
   19740:	202e2e2e 	.word	0x202e2e2e
	...
   1974c:	1f1f0000 	.word	0x1f1f0000
   19750:	00000000 	.word	0x00000000
   19754:	1f1f1f00 	.word	0x1f1f1f00
   19758:	00000000 	.word	0x00000000
   1975c:	1f1f1f1f 	.word	0x1f1f1f1f
   19760:	1f1f0000 	.word	0x1f1f0000
   19764:	1f1f1f1f 	.word	0x1f1f1f1f
   19768:	1f1f1f1f 	.word	0x1f1f1f1f
   1976c:	1f1f1f1f 	.word	0x1f1f1f1f
   19770:	0000812c 	.word	0x0000812c
   19774:	00007d40 	.word	0x00007d40
   19778:	00007d84 	.word	0x00007d84
   1977c:	00007dea 	.word	0x00007dea
   19780:	00007e58 	.word	0x00007e58
   19784:	00007efc 	.word	0x00007efc
   19788:	00008060 	.word	0x00008060
   1978c:	0000812a 	.word	0x0000812a
   19790:	0000807a 	.word	0x0000807a
   19794:	00008098 	.word	0x00008098
   19798:	000080b6 	.word	0x000080b6
   1979c:	000080d4 	.word	0x000080d4
   197a0:	000080fc 	.word	0x000080fc
   197a4:	756c2530 	.word	0x756c2530
   197a8:	756c2530 	.word	0x756c2530
   197ac:	756c2530 	.word	0x756c2530
   197b0:	00000000 	.word	0x00000000
   197b4:	00000002 	.word	0x00000002
   197b8:	00000003 	.word	0x00000003
   197bc:	00000028 	.word	0x00000028
   197c0:	00000029 	.word	0x00000029
   197c4:	00000004 	.word	0x00000004
   197c8:	00000005 	.word	0x00000005
   197cc:	00000006 	.word	0x00000006
   197d0:	00000007 	.word	0x00000007
   197d4:	00000020 	.word	0x00000020
   197d8:	00000021 	.word	0x00000021
   197dc:	00000022 	.word	0x00000022
   197e0:	00000023 	.word	0x00000023
   197e4:	00000024 	.word	0x00000024
   197e8:	00000025 	.word	0x00000025
   197ec:	00000026 	.word	0x00000026
   197f0:	00000027 	.word	0x00000027
   197f4:	00000008 	.word	0x00000008
   197f8:	00000009 	.word	0x00000009
   197fc:	0000000a 	.word	0x0000000a
   19800:	0000000b 	.word	0x0000000b
   19804:	0000c51a 	.word	0x0000c51a
   19808:	0000c520 	.word	0x0000c520
   1980c:	0000c520 	.word	0x0000c520
   19810:	0000c520 	.word	0x0000c520
   19814:	0000c520 	.word	0x0000c520
   19818:	0000c520 	.word	0x0000c520
   1981c:	0000c520 	.word	0x0000c520
   19820:	0000c520 	.word	0x0000c520
   19824:	0000c520 	.word	0x0000c520
   19828:	0000c520 	.word	0x0000c520
   1982c:	0000c520 	.word	0x0000c520
   19830:	0000c520 	.word	0x0000c520
   19834:	0000c520 	.word	0x0000c520
   19838:	0000c520 	.word	0x0000c520
   1983c:	0000c520 	.word	0x0000c520
   19840:	0000c520 	.word	0x0000c520
   19844:	0000c4f8 	.word	0x0000c4f8
   19848:	0000c520 	.word	0x0000c520
   1984c:	0000c520 	.word	0x0000c520
   19850:	0000c520 	.word	0x0000c520
   19854:	0000c520 	.word	0x0000c520
   19858:	0000c520 	.word	0x0000c520
   1985c:	0000c520 	.word	0x0000c520
   19860:	0000c520 	.word	0x0000c520
   19864:	0000c520 	.word	0x0000c520
   19868:	0000c520 	.word	0x0000c520
   1986c:	0000c520 	.word	0x0000c520
   19870:	0000c520 	.word	0x0000c520
   19874:	0000c520 	.word	0x0000c520
   19878:	0000c520 	.word	0x0000c520
   1987c:	0000c520 	.word	0x0000c520
   19880:	0000c520 	.word	0x0000c520
   19884:	0000c514 	.word	0x0000c514
   19888:	0000c520 	.word	0x0000c520
   1988c:	0000c520 	.word	0x0000c520
   19890:	0000c520 	.word	0x0000c520
   19894:	0000c520 	.word	0x0000c520
   19898:	0000c520 	.word	0x0000c520
   1989c:	0000c520 	.word	0x0000c520
   198a0:	0000c520 	.word	0x0000c520
   198a4:	0000c520 	.word	0x0000c520
   198a8:	0000c520 	.word	0x0000c520
   198ac:	0000c520 	.word	0x0000c520
   198b0:	0000c520 	.word	0x0000c520
   198b4:	0000c520 	.word	0x0000c520
   198b8:	0000c520 	.word	0x0000c520
   198bc:	0000c520 	.word	0x0000c520
   198c0:	0000c520 	.word	0x0000c520
   198c4:	0000c50e 	.word	0x0000c50e
   198c8:	0000c4b6 	.word	0x0000c4b6
   198cc:	0000c4cc 	.word	0x0000c4cc
   198d0:	0000c4e2 	.word	0x0000c4e2
   198d4:	0000c49c 	.word	0x0000c49c
   198d8:	42000800 	.word	0x42000800
   198dc:	42000c00 	.word	0x42000c00
   198e0:	42001000 	.word	0x42001000
   198e4:	42001400 	.word	0x42001400
   198e8:	42001800 	.word	0x42001800
   198ec:	42001c00 	.word	0x42001c00
   198f0:	454c4449 	.word	0x454c4449
   198f4:	00000000 	.word	0x00000000
   198f8:	20726d54 	.word	0x20726d54
   198fc:	00637653 	.word	0x00637653
   19900:	00010238 	.word	0x00010238
   19904:	00010238 	.word	0x00010238
   19908:	00010238 	.word	0x00010238
   1990c:	000102c6 	.word	0x000102c6
   19910:	00010290 	.word	0x00010290
   19914:	000102ba 	.word	0x000102ba
   19918:	00010238 	.word	0x00010238
   1991c:	00010238 	.word	0x00010238
   19920:	000102c6 	.word	0x000102c6
   19924:	00010290 	.word	0x00010290

00019928 <_tcc_intflag>:
   19928:	00000001 00000002 00000004 00000008     ................
   19938:	00001000 00002000 00004000 00008000     ..... ...@......
   19948:	00010000 00020000 00040000 00080000     ................
   19958:	0c0b0a09 00000e0d 00011b44 00011b44     ........D...D...
   19968:	00011b38 00011b44 00011b38 00011b12     8...D...8.......
   19978:	00011b12 00011b44 00011b44 00011b44     ....D...D...D...
   19988:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19998:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   199a8:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   199b8:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   199c8:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   199d8:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   199e8:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   199f8:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19a08:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19a18:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19a28:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19a38:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19a48:	00011b44 00011b44 00011b44 00011b44     D...D...D...D...
   19a58:	00011b44 00011b44 00011b38 00011b38     D...D...8...8...
   19a68:	00011b4e 00011b4e 00011b4e 00011b4e     N...N...N...N...
   19a78:	41744545 50524f4d 456d752e 00012ebe     EEtAMORP.umE....
   19a88:	00012f38 00012f38 00012edc 00012ed6     8/..8/..........
   19a98:	00012ee2 00012ec4 00012ee8 00012f1e     ............./..
   19aa8:	00013204 00013254 00013254 00013250     .2..T2..T2..P2..
   19ab8:	000131f6 00013216 000131e6 00013228     .1...2...1..(2..
   19ac8:	0001323a 000132a2 000132d0 000132d0     :2...2...2...2..
   19ad8:	000132cc 0001329c 000132a8 00013296     .2...2...2...2..
   19ae8:	000132ae 000132b4 00776f70 74727173     .2...2..pow.sqrt
	...

00019b00 <TWO52>:
   19b00:	00000000 43300000 00000000 c3300000     ......0C......0.
   19b10:	00015c34 00015c04 00015c16 00015b58     4\...\...\..X[..
   19b20:	00015c16 00015bfa 00015c16 00015b58     .\...[...\..X[..
   19b30:	00015c04 00015c04 00015bfa 00015b58     .\...\...[..X[..
   19b40:	00015b60 00015b60 00015b60 00015c1c     `[..`[..`[...\..
   19b50:	00015c04 00015c04 00015bd8 00015cbc     .\...\...[...\..
   19b60:	00015bd8 00015bfa 00015bd8 00015cbc     .[...[...[...\..
   19b70:	00015c04 00015c04 00015bfa 00015cbc     .\...\...[...\..
   19b80:	00015b60 00015b60 00015b60 00015cc6     `[..`[..`[...\..
   19b90:	00015e64 00015db4 00015db4 00015db2     d^...]...]...]..
   19ba0:	00015e56 00015e56 00015e4c 00015db2     V^..V^..L^...]..
   19bb0:	00015e56 00015e4c 00015e56 00015db2     V^..L^..V^...]..
   19bc0:	00015e5c 00015e5c 00015e5c 00015eec     \^..\^..\^...^..
   19bd0:	0001681c 000167fe 000167b8 000166d6     .h...g...g...f..
   19be0:	000167b8 000167f0 000167b8 000166d6     .g...g...g...f..
   19bf0:	000167fe 000167fe 000167f0 000166d6     .g...g...g...f..
   19c00:	000166ce 000166ce 000166ce 00016a34     .f...f...f..4j..
   19c10:	0001707c 00016f3c 00016f3c 00016f38     |p..<o..<o..8o..
   19c20:	00017054 00017054 00017046 00016f38     Tp..Tp..Fp..8o..
   19c30:	00017054 00017046 00017054 00016f38     Tp..Fp..Tp..8o..
   19c40:	0001705c 0001705c 0001705c 00017260     \p..\p..\p..`r..
   19c50:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   19c60:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   19c70:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

00019c7f <_ctype_>:
   19c7f:	20202000 20202020 28282020 20282828     .         ((((( 
   19c8f:	20202020 20202020 20202020 20202020                     
   19c9f:	10108820 10101010 10101010 10101010      ...............
   19caf:	04040410 04040404 10040404 10101010     ................
   19cbf:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19ccf:	01010101 01010101 01010101 10101010     ................
   19cdf:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19cef:	02020202 02020202 02020202 10101010     ................
   19cff:	00000020 00000000 00000000 00000000      ...............
	...
   19d7f:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   19d8f:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   19d9f:	30004645 34333231 38373635 63626139     EF.0123456789abc
   19daf:	00666564 c0b5f800                                def..

00019db4 <_init>:
   19db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19db6:	46c0      	nop			; (mov r8, r8)
   19db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19dba:	bc08      	pop	{r3}
   19dbc:	469e      	mov	lr, r3
   19dbe:	4770      	bx	lr

00019dc0 <__init_array_start>:
   19dc0:	000000dd 	.word	0x000000dd

00019dc4 <_fini>:
   19dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dc6:	46c0      	nop			; (mov r8, r8)
   19dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19dca:	bc08      	pop	{r3}
   19dcc:	469e      	mov	lr, r3
   19dce:	4770      	bx	lr

00019dd0 <__fini_array_start>:
   19dd0:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	82fd 0001 7d0d 0001 0000 0000 9c7f 0001     .....}..........
20000180:	9c58 0001 9d85 0001 9d85 0001 9d85 0001     X...............
20000190:	9d85 0001 9d85 0001 9d85 0001 9d85 0001     ................
200001a0:	9d85 0001 9d85 0001 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
