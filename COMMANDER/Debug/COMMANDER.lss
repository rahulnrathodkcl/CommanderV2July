
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001af6c  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002af6c  0002af6c  0002af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0002af74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000078c  20000200  0002b180  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000098c  0002b90c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007f7a3  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008ab2  00000000  00000000  000afa20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000aa99  00000000  00000000  000b84d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d88  00000000  00000000  000c2f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b90  00000000  00000000  000c4cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287b0  00000000  00000000  000c6883  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027a69  00000000  00000000  000ef033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a269d  00000000  00000000  00116a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007414  00000000  00000000  001b913c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	90 29 00 20 29 4d 02 00 21 4e 02 00 21 4e 02 00     .). )M..!N..!N..
	...
   1002c:	09 ec 01 00 00 00 00 00 00 00 00 00 41 ed 01 00     ............A...
   1003c:	89 ed 01 00 21 4e 02 00 21 4e 02 00 81 14 02 00     ....!N..!N......
   1004c:	85 e5 01 00 a9 24 02 00 21 4e 02 00 1d db 01 00     .....$..!N......
   1005c:	21 4e 02 00 15 25 02 00 a1 22 02 00 b9 22 02 00     !N...%..."..."..
   1006c:	d1 22 02 00 e9 22 02 00 01 23 02 00 19 23 02 00     ."..."...#...#..
   1007c:	a5 14 02 00 b9 14 02 00 cd 14 02 00 5d 15 02 00     ............]...
   1008c:	71 15 02 00 85 15 02 00 99 15 02 00 ad 15 02 00     q...............
   1009c:	fd d8 01 00 6d 28 02 00 e1 da 01 00 21 4e 02 00     ....m(......!N..
   100ac:	21 4e 02 00 00 00 00 00                             !N......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000200 	.word	0x20000200
   100d4:	00000000 	.word	0x00000000
   100d8:	0002af74 	.word	0x0002af74

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000204 	.word	0x20000204
   10108:	0002af74 	.word	0x0002af74
   1010c:	0002af74 	.word	0x0002af74
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	000238e5 	.word	0x000238e5
   1014c:	000239cd 	.word	0x000239cd

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf6      	ldr	r3, [pc, #984]	; (10530 <init_eeprom+0x3e0>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf6      	ldr	r3, [pc, #984]	; (10534 <init_eeprom+0x3e4>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf6      	ldr	r3, [pc, #984]	; (10538 <init_eeprom+0x3e8>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f4      	ldr	r1, [pc, #976]	; (10534 <init_eeprom+0x3e4>)
   10164:	4bf5      	ldr	r3, [pc, #980]	; (1053c <init_eeprom+0x3ec>)
   10166:	2218      	movs	r2, #24
   10168:	0018      	movs	r0, r3
   1016a:	4bf5      	ldr	r3, [pc, #980]	; (10540 <init_eeprom+0x3f0>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf3      	ldr	r3, [pc, #972]	; (1053c <init_eeprom+0x3ec>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d029      	beq.n	101ca <init_eeprom+0x7a>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf1      	ldr	r3, [pc, #964]	; (1053c <init_eeprom+0x3ec>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bef      	ldr	r3, [pc, #956]	; (1053c <init_eeprom+0x3ec>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bee      	ldr	r3, [pc, #952]	; (1053c <init_eeprom+0x3ec>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bec      	ldr	r3, [pc, #944]	; (1053c <init_eeprom+0x3ec>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4beb      	ldr	r3, [pc, #940]	; (1053c <init_eeprom+0x3ec>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   10194:	4beb      	ldr	r3, [pc, #940]	; (10544 <init_eeprom+0x3f4>)
   10196:	2210      	movs	r2, #16
   10198:	2100      	movs	r1, #0
   1019a:	0018      	movs	r0, r3
   1019c:	4bea      	ldr	r3, [pc, #936]	; (10548 <init_eeprom+0x3f8>)
   1019e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a0:	4be8      	ldr	r3, [pc, #928]	; (10544 <init_eeprom+0x3f4>)
   101a2:	4aea      	ldr	r2, [pc, #936]	; (1054c <init_eeprom+0x3fc>)
   101a4:	ca03      	ldmia	r2!, {r0, r1}
   101a6:	c303      	stmia	r3!, {r0, r1}
   101a8:	8811      	ldrh	r1, [r2, #0]
   101aa:	8019      	strh	r1, [r3, #0]
   101ac:	7892      	ldrb	r2, [r2, #2]
   101ae:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b0:	49e2      	ldr	r1, [pc, #904]	; (1053c <init_eeprom+0x3ec>)
   101b2:	4be0      	ldr	r3, [pc, #896]	; (10534 <init_eeprom+0x3e4>)
   101b4:	2218      	movs	r2, #24
   101b6:	0018      	movs	r0, r3
   101b8:	4be1      	ldr	r3, [pc, #900]	; (10540 <init_eeprom+0x3f0>)
   101ba:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101bc:	4bdd      	ldr	r3, [pc, #884]	; (10534 <init_eeprom+0x3e4>)
   101be:	0019      	movs	r1, r3
   101c0:	2000      	movs	r0, #0
   101c2:	4be3      	ldr	r3, [pc, #908]	; (10550 <init_eeprom+0x400>)
   101c4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101c6:	4be3      	ldr	r3, [pc, #908]	; (10554 <init_eeprom+0x404>)
   101c8:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101ca:	4bda      	ldr	r3, [pc, #872]	; (10534 <init_eeprom+0x3e4>)
   101cc:	0019      	movs	r1, r3
   101ce:	2001      	movs	r0, #1
   101d0:	4bd9      	ldr	r3, [pc, #868]	; (10538 <init_eeprom+0x3e8>)
   101d2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101d4:	49d7      	ldr	r1, [pc, #860]	; (10534 <init_eeprom+0x3e4>)
   101d6:	4be0      	ldr	r3, [pc, #896]	; (10558 <init_eeprom+0x408>)
   101d8:	2238      	movs	r2, #56	; 0x38
   101da:	0018      	movs	r0, r3
   101dc:	4bd8      	ldr	r3, [pc, #864]	; (10540 <init_eeprom+0x3f0>)
   101de:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e0:	4bdd      	ldr	r3, [pc, #884]	; (10558 <init_eeprom+0x408>)
   101e2:	791b      	ldrb	r3, [r3, #4]
   101e4:	2b55      	cmp	r3, #85	; 0x55
   101e6:	d02e      	beq.n	10246 <init_eeprom+0xf6>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101e8:	4bdb      	ldr	r3, [pc, #876]	; (10558 <init_eeprom+0x408>)
   101ea:	2200      	movs	r2, #0
   101ec:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101ee:	4bda      	ldr	r3, [pc, #872]	; (10558 <init_eeprom+0x408>)
   101f0:	2255      	movs	r2, #85	; 0x55
   101f2:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101f4:	4bd9      	ldr	r3, [pc, #868]	; (1055c <init_eeprom+0x40c>)
   101f6:	221e      	movs	r2, #30
   101f8:	2100      	movs	r1, #0
   101fa:	0018      	movs	r0, r3
   101fc:	4bd2      	ldr	r3, [pc, #840]	; (10548 <init_eeprom+0x3f8>)
   101fe:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10200:	4ad6      	ldr	r2, [pc, #856]	; (1055c <init_eeprom+0x40c>)
   10202:	4bd7      	ldr	r3, [pc, #860]	; (10560 <init_eeprom+0x410>)
   10204:	0010      	movs	r0, r2
   10206:	0019      	movs	r1, r3
   10208:	2310      	movs	r3, #16
   1020a:	001a      	movs	r2, r3
   1020c:	4bcc      	ldr	r3, [pc, #816]	; (10540 <init_eeprom+0x3f0>)
   1020e:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10210:	4bd4      	ldr	r3, [pc, #848]	; (10564 <init_eeprom+0x414>)
   10212:	2214      	movs	r2, #20
   10214:	2100      	movs	r1, #0
   10216:	0018      	movs	r0, r3
   10218:	4bcb      	ldr	r3, [pc, #812]	; (10548 <init_eeprom+0x3f8>)
   1021a:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   1021c:	4ad1      	ldr	r2, [pc, #836]	; (10564 <init_eeprom+0x414>)
   1021e:	4bd2      	ldr	r3, [pc, #840]	; (10568 <init_eeprom+0x418>)
   10220:	0010      	movs	r0, r2
   10222:	0019      	movs	r1, r3
   10224:	230b      	movs	r3, #11
   10226:	001a      	movs	r2, r3
   10228:	4bc5      	ldr	r3, [pc, #788]	; (10540 <init_eeprom+0x3f0>)
   1022a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   1022c:	49ca      	ldr	r1, [pc, #808]	; (10558 <init_eeprom+0x408>)
   1022e:	4bc1      	ldr	r3, [pc, #772]	; (10534 <init_eeprom+0x3e4>)
   10230:	2238      	movs	r2, #56	; 0x38
   10232:	0018      	movs	r0, r3
   10234:	4bc2      	ldr	r3, [pc, #776]	; (10540 <init_eeprom+0x3f0>)
   10236:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   10238:	4bbe      	ldr	r3, [pc, #760]	; (10534 <init_eeprom+0x3e4>)
   1023a:	0019      	movs	r1, r3
   1023c:	2001      	movs	r0, #1
   1023e:	4bc4      	ldr	r3, [pc, #784]	; (10550 <init_eeprom+0x400>)
   10240:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10242:	4bc4      	ldr	r3, [pc, #784]	; (10554 <init_eeprom+0x404>)
   10244:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   10246:	4bbb      	ldr	r3, [pc, #748]	; (10534 <init_eeprom+0x3e4>)
   10248:	0019      	movs	r1, r3
   1024a:	2002      	movs	r0, #2
   1024c:	4bba      	ldr	r3, [pc, #744]	; (10538 <init_eeprom+0x3e8>)
   1024e:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10250:	49b8      	ldr	r1, [pc, #736]	; (10534 <init_eeprom+0x3e4>)
   10252:	4bc6      	ldr	r3, [pc, #792]	; (1056c <init_eeprom+0x41c>)
   10254:	2238      	movs	r2, #56	; 0x38
   10256:	0018      	movs	r0, r3
   10258:	4bb9      	ldr	r3, [pc, #740]	; (10540 <init_eeprom+0x3f0>)
   1025a:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   1025c:	4bc3      	ldr	r3, [pc, #780]	; (1056c <init_eeprom+0x41c>)
   1025e:	791b      	ldrb	r3, [r3, #4]
   10260:	2b55      	cmp	r3, #85	; 0x55
   10262:	d03c      	beq.n	102de <init_eeprom+0x18e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   10264:	4bc1      	ldr	r3, [pc, #772]	; (1056c <init_eeprom+0x41c>)
   10266:	2200      	movs	r2, #0
   10268:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   1026a:	4bc0      	ldr	r3, [pc, #768]	; (1056c <init_eeprom+0x41c>)
   1026c:	2255      	movs	r2, #85	; 0x55
   1026e:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10270:	4bbf      	ldr	r3, [pc, #764]	; (10570 <init_eeprom+0x420>)
   10272:	2210      	movs	r2, #16
   10274:	2100      	movs	r1, #0
   10276:	0018      	movs	r0, r3
   10278:	4bb3      	ldr	r3, [pc, #716]	; (10548 <init_eeprom+0x3f8>)
   1027a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   1027c:	4bbb      	ldr	r3, [pc, #748]	; (1056c <init_eeprom+0x41c>)
   1027e:	2205      	movs	r2, #5
   10280:	49bc      	ldr	r1, [pc, #752]	; (10574 <init_eeprom+0x424>)
   10282:	189b      	adds	r3, r3, r2
   10284:	2210      	movs	r2, #16
   10286:	0018      	movs	r0, r3
   10288:	4bad      	ldr	r3, [pc, #692]	; (10540 <init_eeprom+0x3f0>)
   1028a:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   1028c:	4bba      	ldr	r3, [pc, #744]	; (10578 <init_eeprom+0x428>)
   1028e:	2210      	movs	r2, #16
   10290:	2100      	movs	r1, #0
   10292:	0018      	movs	r0, r3
   10294:	4bac      	ldr	r3, [pc, #688]	; (10548 <init_eeprom+0x3f8>)
   10296:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   10298:	4ab8      	ldr	r2, [pc, #736]	; (1057c <init_eeprom+0x42c>)
   1029a:	4bb9      	ldr	r3, [pc, #740]	; (10580 <init_eeprom+0x430>)
   1029c:	0010      	movs	r0, r2
   1029e:	0019      	movs	r1, r3
   102a0:	230a      	movs	r3, #10
   102a2:	001a      	movs	r2, r3
   102a4:	4ba6      	ldr	r3, [pc, #664]	; (10540 <init_eeprom+0x3f0>)
   102a6:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102a8:	4bb3      	ldr	r3, [pc, #716]	; (10578 <init_eeprom+0x428>)
   102aa:	2210      	movs	r2, #16
   102ac:	2100      	movs	r1, #0
   102ae:	0018      	movs	r0, r3
   102b0:	4ba5      	ldr	r3, [pc, #660]	; (10548 <init_eeprom+0x3f8>)
   102b2:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102b4:	4ab0      	ldr	r2, [pc, #704]	; (10578 <init_eeprom+0x428>)
   102b6:	4bb3      	ldr	r3, [pc, #716]	; (10584 <init_eeprom+0x434>)
   102b8:	0010      	movs	r0, r2
   102ba:	0019      	movs	r1, r3
   102bc:	230d      	movs	r3, #13
   102be:	001a      	movs	r2, r3
   102c0:	4b9f      	ldr	r3, [pc, #636]	; (10540 <init_eeprom+0x3f0>)
   102c2:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102c4:	49a9      	ldr	r1, [pc, #676]	; (1056c <init_eeprom+0x41c>)
   102c6:	4b9b      	ldr	r3, [pc, #620]	; (10534 <init_eeprom+0x3e4>)
   102c8:	2238      	movs	r2, #56	; 0x38
   102ca:	0018      	movs	r0, r3
   102cc:	4b9c      	ldr	r3, [pc, #624]	; (10540 <init_eeprom+0x3f0>)
   102ce:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d0:	4b98      	ldr	r3, [pc, #608]	; (10534 <init_eeprom+0x3e4>)
   102d2:	0019      	movs	r1, r3
   102d4:	2002      	movs	r0, #2
   102d6:	4b9e      	ldr	r3, [pc, #632]	; (10550 <init_eeprom+0x400>)
   102d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102da:	4b9e      	ldr	r3, [pc, #632]	; (10554 <init_eeprom+0x404>)
   102dc:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102de:	4b95      	ldr	r3, [pc, #596]	; (10534 <init_eeprom+0x3e4>)
   102e0:	0019      	movs	r1, r3
   102e2:	2008      	movs	r0, #8
   102e4:	4b94      	ldr	r3, [pc, #592]	; (10538 <init_eeprom+0x3e8>)
   102e6:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102e8:	4aa7      	ldr	r2, [pc, #668]	; (10588 <init_eeprom+0x438>)
   102ea:	4b92      	ldr	r3, [pc, #584]	; (10534 <init_eeprom+0x3e4>)
   102ec:	0010      	movs	r0, r2
   102ee:	0019      	movs	r1, r3
   102f0:	2308      	movs	r3, #8
   102f2:	001a      	movs	r2, r3
   102f4:	4b92      	ldr	r3, [pc, #584]	; (10540 <init_eeprom+0x3f0>)
   102f6:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102f8:	4ba3      	ldr	r3, [pc, #652]	; (10588 <init_eeprom+0x438>)
   102fa:	781b      	ldrb	r3, [r3, #0]
   102fc:	2b55      	cmp	r3, #85	; 0x55
   102fe:	d01d      	beq.n	1033c <init_eeprom+0x1ec>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10300:	4ba1      	ldr	r3, [pc, #644]	; (10588 <init_eeprom+0x438>)
   10302:	2255      	movs	r2, #85	; 0x55
   10304:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   10306:	4ba0      	ldr	r3, [pc, #640]	; (10588 <init_eeprom+0x438>)
   10308:	220f      	movs	r2, #15
   1030a:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   1030c:	4b9e      	ldr	r3, [pc, #632]	; (10588 <init_eeprom+0x438>)
   1030e:	2200      	movs	r2, #0
   10310:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10312:	4b9d      	ldr	r3, [pc, #628]	; (10588 <init_eeprom+0x438>)
   10314:	2200      	movs	r2, #0
   10316:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   10318:	4b9b      	ldr	r3, [pc, #620]	; (10588 <init_eeprom+0x438>)
   1031a:	2201      	movs	r2, #1
   1031c:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   1031e:	4a85      	ldr	r2, [pc, #532]	; (10534 <init_eeprom+0x3e4>)
   10320:	4b99      	ldr	r3, [pc, #612]	; (10588 <init_eeprom+0x438>)
   10322:	0010      	movs	r0, r2
   10324:	0019      	movs	r1, r3
   10326:	2308      	movs	r3, #8
   10328:	001a      	movs	r2, r3
   1032a:	4b85      	ldr	r3, [pc, #532]	; (10540 <init_eeprom+0x3f0>)
   1032c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   1032e:	4b81      	ldr	r3, [pc, #516]	; (10534 <init_eeprom+0x3e4>)
   10330:	0019      	movs	r1, r3
   10332:	2008      	movs	r0, #8
   10334:	4b86      	ldr	r3, [pc, #536]	; (10550 <init_eeprom+0x400>)
   10336:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10338:	4b86      	ldr	r3, [pc, #536]	; (10554 <init_eeprom+0x404>)
   1033a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   1033c:	4b93      	ldr	r3, [pc, #588]	; (1058c <init_eeprom+0x43c>)
   1033e:	0019      	movs	r1, r3
   10340:	2003      	movs	r0, #3
   10342:	4b93      	ldr	r3, [pc, #588]	; (10590 <init_eeprom+0x440>)
   10344:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   10346:	4b93      	ldr	r3, [pc, #588]	; (10594 <init_eeprom+0x444>)
   10348:	0019      	movs	r1, r3
   1034a:	2004      	movs	r0, #4
   1034c:	4b90      	ldr	r3, [pc, #576]	; (10590 <init_eeprom+0x440>)
   1034e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10350:	4b91      	ldr	r3, [pc, #580]	; (10598 <init_eeprom+0x448>)
   10352:	0019      	movs	r1, r3
   10354:	2005      	movs	r0, #5
   10356:	4b8e      	ldr	r3, [pc, #568]	; (10590 <init_eeprom+0x440>)
   10358:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   1035a:	4b90      	ldr	r3, [pc, #576]	; (1059c <init_eeprom+0x44c>)
   1035c:	0019      	movs	r1, r3
   1035e:	2006      	movs	r0, #6
   10360:	4b8b      	ldr	r3, [pc, #556]	; (10590 <init_eeprom+0x440>)
   10362:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   10364:	4b8e      	ldr	r3, [pc, #568]	; (105a0 <init_eeprom+0x450>)
   10366:	0019      	movs	r1, r3
   10368:	2007      	movs	r0, #7
   1036a:	4b89      	ldr	r3, [pc, #548]	; (10590 <init_eeprom+0x440>)
   1036c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   1036e:	4b77      	ldr	r3, [pc, #476]	; (1054c <init_eeprom+0x3fc>)
   10370:	0019      	movs	r1, r3
   10372:	2009      	movs	r0, #9
   10374:	4b86      	ldr	r3, [pc, #536]	; (10590 <init_eeprom+0x440>)
   10376:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   10378:	4b74      	ldr	r3, [pc, #464]	; (1054c <init_eeprom+0x3fc>)
   1037a:	0019      	movs	r1, r3
   1037c:	200a      	movs	r0, #10
   1037e:	4b84      	ldr	r3, [pc, #528]	; (10590 <init_eeprom+0x440>)
   10380:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10382:	4b72      	ldr	r3, [pc, #456]	; (1054c <init_eeprom+0x3fc>)
   10384:	0019      	movs	r1, r3
   10386:	200b      	movs	r0, #11
   10388:	4b81      	ldr	r3, [pc, #516]	; (10590 <init_eeprom+0x440>)
   1038a:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   1038c:	4b6f      	ldr	r3, [pc, #444]	; (1054c <init_eeprom+0x3fc>)
   1038e:	0019      	movs	r1, r3
   10390:	200c      	movs	r0, #12
   10392:	4b7f      	ldr	r3, [pc, #508]	; (10590 <init_eeprom+0x440>)
   10394:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   10396:	4b6d      	ldr	r3, [pc, #436]	; (1054c <init_eeprom+0x3fc>)
   10398:	0019      	movs	r1, r3
   1039a:	200d      	movs	r0, #13
   1039c:	4b7c      	ldr	r3, [pc, #496]	; (10590 <init_eeprom+0x440>)
   1039e:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a0:	4b6a      	ldr	r3, [pc, #424]	; (1054c <init_eeprom+0x3fc>)
   103a2:	0019      	movs	r1, r3
   103a4:	200e      	movs	r0, #14
   103a6:	4b7a      	ldr	r3, [pc, #488]	; (10590 <init_eeprom+0x440>)
   103a8:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103aa:	4b68      	ldr	r3, [pc, #416]	; (1054c <init_eeprom+0x3fc>)
   103ac:	0019      	movs	r1, r3
   103ae:	200f      	movs	r0, #15
   103b0:	4b77      	ldr	r3, [pc, #476]	; (10590 <init_eeprom+0x440>)
   103b2:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103b4:	4b65      	ldr	r3, [pc, #404]	; (1054c <init_eeprom+0x3fc>)
   103b6:	0019      	movs	r1, r3
   103b8:	2010      	movs	r0, #16
   103ba:	4b75      	ldr	r3, [pc, #468]	; (10590 <init_eeprom+0x440>)
   103bc:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103be:	4b63      	ldr	r3, [pc, #396]	; (1054c <init_eeprom+0x3fc>)
   103c0:	0019      	movs	r1, r3
   103c2:	2011      	movs	r0, #17
   103c4:	4b72      	ldr	r3, [pc, #456]	; (10590 <init_eeprom+0x440>)
   103c6:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103c8:	4b60      	ldr	r3, [pc, #384]	; (1054c <init_eeprom+0x3fc>)
   103ca:	0019      	movs	r1, r3
   103cc:	2012      	movs	r0, #18
   103ce:	4b70      	ldr	r3, [pc, #448]	; (10590 <init_eeprom+0x440>)
   103d0:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d2:	4b5e      	ldr	r3, [pc, #376]	; (1054c <init_eeprom+0x3fc>)
   103d4:	0019      	movs	r1, r3
   103d6:	2013      	movs	r0, #19
   103d8:	4b6d      	ldr	r3, [pc, #436]	; (10590 <init_eeprom+0x440>)
   103da:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103dc:	4b5b      	ldr	r3, [pc, #364]	; (1054c <init_eeprom+0x3fc>)
   103de:	0019      	movs	r1, r3
   103e0:	2014      	movs	r0, #20
   103e2:	4b6b      	ldr	r3, [pc, #428]	; (10590 <init_eeprom+0x440>)
   103e4:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103e6:	4b59      	ldr	r3, [pc, #356]	; (1054c <init_eeprom+0x3fc>)
   103e8:	0019      	movs	r1, r3
   103ea:	2015      	movs	r0, #21
   103ec:	4b68      	ldr	r3, [pc, #416]	; (10590 <init_eeprom+0x440>)
   103ee:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f0:	4b56      	ldr	r3, [pc, #344]	; (1054c <init_eeprom+0x3fc>)
   103f2:	0019      	movs	r1, r3
   103f4:	2016      	movs	r0, #22
   103f6:	4b66      	ldr	r3, [pc, #408]	; (10590 <init_eeprom+0x440>)
   103f8:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   103fa:	4b54      	ldr	r3, [pc, #336]	; (1054c <init_eeprom+0x3fc>)
   103fc:	0019      	movs	r1, r3
   103fe:	2017      	movs	r0, #23
   10400:	4b63      	ldr	r3, [pc, #396]	; (10590 <init_eeprom+0x440>)
   10402:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   10404:	4b4b      	ldr	r3, [pc, #300]	; (10534 <init_eeprom+0x3e4>)
   10406:	0019      	movs	r1, r3
   10408:	2018      	movs	r0, #24
   1040a:	4b4b      	ldr	r3, [pc, #300]	; (10538 <init_eeprom+0x3e8>)
   1040c:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   1040e:	4a65      	ldr	r2, [pc, #404]	; (105a4 <init_eeprom+0x454>)
   10410:	4b48      	ldr	r3, [pc, #288]	; (10534 <init_eeprom+0x3e4>)
   10412:	0010      	movs	r0, r2
   10414:	0019      	movs	r1, r3
   10416:	2318      	movs	r3, #24
   10418:	001a      	movs	r2, r3
   1041a:	4b49      	ldr	r3, [pc, #292]	; (10540 <init_eeprom+0x3f0>)
   1041c:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   1041e:	4b61      	ldr	r3, [pc, #388]	; (105a4 <init_eeprom+0x454>)
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	2b55      	cmp	r3, #85	; 0x55
   10424:	d025      	beq.n	10472 <init_eeprom+0x322>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   10426:	4b5f      	ldr	r3, [pc, #380]	; (105a4 <init_eeprom+0x454>)
   10428:	2255      	movs	r2, #85	; 0x55
   1042a:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   1042c:	4b5d      	ldr	r3, [pc, #372]	; (105a4 <init_eeprom+0x454>)
   1042e:	2200      	movs	r2, #0
   10430:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10432:	4b5c      	ldr	r3, [pc, #368]	; (105a4 <init_eeprom+0x454>)
   10434:	2200      	movs	r2, #0
   10436:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   10438:	4b5b      	ldr	r3, [pc, #364]	; (105a8 <init_eeprom+0x458>)
   1043a:	2214      	movs	r2, #20
   1043c:	2100      	movs	r1, #0
   1043e:	0018      	movs	r0, r3
   10440:	4b41      	ldr	r3, [pc, #260]	; (10548 <init_eeprom+0x3f8>)
   10442:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   10444:	4a58      	ldr	r2, [pc, #352]	; (105a8 <init_eeprom+0x458>)
   10446:	4b41      	ldr	r3, [pc, #260]	; (1054c <init_eeprom+0x3fc>)
   10448:	0010      	movs	r0, r2
   1044a:	0019      	movs	r1, r3
   1044c:	230b      	movs	r3, #11
   1044e:	001a      	movs	r2, r3
   10450:	4b3b      	ldr	r3, [pc, #236]	; (10540 <init_eeprom+0x3f0>)
   10452:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   10454:	4a37      	ldr	r2, [pc, #220]	; (10534 <init_eeprom+0x3e4>)
   10456:	4b53      	ldr	r3, [pc, #332]	; (105a4 <init_eeprom+0x454>)
   10458:	0010      	movs	r0, r2
   1045a:	0019      	movs	r1, r3
   1045c:	2318      	movs	r3, #24
   1045e:	001a      	movs	r2, r3
   10460:	4b37      	ldr	r3, [pc, #220]	; (10540 <init_eeprom+0x3f0>)
   10462:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   10464:	4b33      	ldr	r3, [pc, #204]	; (10534 <init_eeprom+0x3e4>)
   10466:	0019      	movs	r1, r3
   10468:	2018      	movs	r0, #24
   1046a:	4b39      	ldr	r3, [pc, #228]	; (10550 <init_eeprom+0x400>)
   1046c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1046e:	4b39      	ldr	r3, [pc, #228]	; (10554 <init_eeprom+0x404>)
   10470:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10472:	4b30      	ldr	r3, [pc, #192]	; (10534 <init_eeprom+0x3e4>)
   10474:	0019      	movs	r1, r3
   10476:	2019      	movs	r0, #25
   10478:	4b2f      	ldr	r3, [pc, #188]	; (10538 <init_eeprom+0x3e8>)
   1047a:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   1047c:	4a4b      	ldr	r2, [pc, #300]	; (105ac <init_eeprom+0x45c>)
   1047e:	4b2d      	ldr	r3, [pc, #180]	; (10534 <init_eeprom+0x3e4>)
   10480:	0010      	movs	r0, r2
   10482:	0019      	movs	r1, r3
   10484:	2330      	movs	r3, #48	; 0x30
   10486:	001a      	movs	r2, r3
   10488:	4b2d      	ldr	r3, [pc, #180]	; (10540 <init_eeprom+0x3f0>)
   1048a:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   1048c:	4b47      	ldr	r3, [pc, #284]	; (105ac <init_eeprom+0x45c>)
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	2b55      	cmp	r3, #85	; 0x55
   10492:	d03c      	beq.n	1050e <init_eeprom+0x3be>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   10494:	4b45      	ldr	r3, [pc, #276]	; (105ac <init_eeprom+0x45c>)
   10496:	2255      	movs	r2, #85	; 0x55
   10498:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   1049a:	4b45      	ldr	r3, [pc, #276]	; (105b0 <init_eeprom+0x460>)
   1049c:	2214      	movs	r2, #20
   1049e:	2100      	movs	r1, #0
   104a0:	0018      	movs	r0, r3
   104a2:	4b29      	ldr	r3, [pc, #164]	; (10548 <init_eeprom+0x3f8>)
   104a4:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104a6:	4a42      	ldr	r2, [pc, #264]	; (105b0 <init_eeprom+0x460>)
   104a8:	4b28      	ldr	r3, [pc, #160]	; (1054c <init_eeprom+0x3fc>)
   104aa:	0010      	movs	r0, r2
   104ac:	0019      	movs	r1, r3
   104ae:	230b      	movs	r3, #11
   104b0:	001a      	movs	r2, r3
   104b2:	4b23      	ldr	r3, [pc, #140]	; (10540 <init_eeprom+0x3f0>)
   104b4:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104b6:	4b3f      	ldr	r3, [pc, #252]	; (105b4 <init_eeprom+0x464>)
   104b8:	2214      	movs	r2, #20
   104ba:	2100      	movs	r1, #0
   104bc:	0018      	movs	r0, r3
   104be:	4b22      	ldr	r3, [pc, #136]	; (10548 <init_eeprom+0x3f8>)
   104c0:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c2:	4a3c      	ldr	r2, [pc, #240]	; (105b4 <init_eeprom+0x464>)
   104c4:	4b21      	ldr	r3, [pc, #132]	; (1054c <init_eeprom+0x3fc>)
   104c6:	0010      	movs	r0, r2
   104c8:	0019      	movs	r1, r3
   104ca:	230b      	movs	r3, #11
   104cc:	001a      	movs	r2, r3
   104ce:	4b1c      	ldr	r3, [pc, #112]	; (10540 <init_eeprom+0x3f0>)
   104d0:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d2:	4b36      	ldr	r3, [pc, #216]	; (105ac <init_eeprom+0x45c>)
   104d4:	2200      	movs	r2, #0
   104d6:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104d8:	4b34      	ldr	r3, [pc, #208]	; (105ac <init_eeprom+0x45c>)
   104da:	2200      	movs	r2, #0
   104dc:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104de:	4b33      	ldr	r3, [pc, #204]	; (105ac <init_eeprom+0x45c>)
   104e0:	2200      	movs	r2, #0
   104e2:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104e4:	4b31      	ldr	r3, [pc, #196]	; (105ac <init_eeprom+0x45c>)
   104e6:	2200      	movs	r2, #0
   104e8:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104ea:	4b30      	ldr	r3, [pc, #192]	; (105ac <init_eeprom+0x45c>)
   104ec:	2200      	movs	r2, #0
   104ee:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f0:	4a10      	ldr	r2, [pc, #64]	; (10534 <init_eeprom+0x3e4>)
   104f2:	4b2e      	ldr	r3, [pc, #184]	; (105ac <init_eeprom+0x45c>)
   104f4:	0010      	movs	r0, r2
   104f6:	0019      	movs	r1, r3
   104f8:	2330      	movs	r3, #48	; 0x30
   104fa:	001a      	movs	r2, r3
   104fc:	4b10      	ldr	r3, [pc, #64]	; (10540 <init_eeprom+0x3f0>)
   104fe:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10500:	4b0c      	ldr	r3, [pc, #48]	; (10534 <init_eeprom+0x3e4>)
   10502:	0019      	movs	r1, r3
   10504:	2019      	movs	r0, #25
   10506:	4b12      	ldr	r3, [pc, #72]	; (10550 <init_eeprom+0x400>)
   10508:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1050a:	4b12      	ldr	r3, [pc, #72]	; (10554 <init_eeprom+0x404>)
   1050c:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1050e:	4b09      	ldr	r3, [pc, #36]	; (10534 <init_eeprom+0x3e4>)
   10510:	0019      	movs	r1, r3
   10512:	201a      	movs	r0, #26
   10514:	4b08      	ldr	r3, [pc, #32]	; (10538 <init_eeprom+0x3e8>)
   10516:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   10518:	4906      	ldr	r1, [pc, #24]	; (10534 <init_eeprom+0x3e4>)
   1051a:	4b27      	ldr	r3, [pc, #156]	; (105b8 <init_eeprom+0x468>)
   1051c:	2230      	movs	r2, #48	; 0x30
   1051e:	0018      	movs	r0, r3
   10520:	4b07      	ldr	r3, [pc, #28]	; (10540 <init_eeprom+0x3f0>)
   10522:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   10524:	4b24      	ldr	r3, [pc, #144]	; (105b8 <init_eeprom+0x468>)
   10526:	781b      	ldrb	r3, [r3, #0]
   10528:	2b55      	cmp	r3, #85	; 0x55
   1052a:	d100      	bne.n	1052e <init_eeprom+0x3de>
   1052c:	e0ac      	b.n	10688 <init_eeprom+0x538>
   1052e:	e045      	b.n	105bc <init_eeprom+0x46c>
   10530:	00010115 	.word	0x00010115
   10534:	20000584 	.word	0x20000584
   10538:	00023afd 	.word	0x00023afd
   1053c:	200005f8 	.word	0x200005f8
   10540:	00028ddd 	.word	0x00028ddd
   10544:	20000600 	.word	0x20000600
   10548:	00028e13 	.word	0x00028e13
   1054c:	00029a14 	.word	0x00029a14
   10550:	000239f1 	.word	0x000239f1
   10554:	00023b99 	.word	0x00023b99
   10558:	2000051c 	.word	0x2000051c
   1055c:	20000521 	.word	0x20000521
   10560:	00029a20 	.word	0x00029a20
   10564:	2000053f 	.word	0x2000053f
   10568:	00029a30 	.word	0x00029a30
   1056c:	200005c0 	.word	0x200005c0
   10570:	200005c5 	.word	0x200005c5
   10574:	00029a3c 	.word	0x00029a3c
   10578:	200005e5 	.word	0x200005e5
   1057c:	200005d5 	.word	0x200005d5
   10580:	00029a4c 	.word	0x00029a4c
   10584:	00029a58 	.word	0x00029a58
   10588:	20000610 	.word	0x20000610
   1058c:	00029a68 	.word	0x00029a68
   10590:	00010721 	.word	0x00010721
   10594:	00029a74 	.word	0x00029a74
   10598:	00029a80 	.word	0x00029a80
   1059c:	00029a8c 	.word	0x00029a8c
   105a0:	00029a98 	.word	0x00029a98
   105a4:	20000638 	.word	0x20000638
   105a8:	2000063c 	.word	0x2000063c
   105ac:	20000554 	.word	0x20000554
   105b0:	2000055c 	.word	0x2000055c
   105b4:	20000570 	.word	0x20000570
   105b8:	20000650 	.word	0x20000650
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105bc:	4b51      	ldr	r3, [pc, #324]	; (10704 <init_eeprom+0x5b4>)
   105be:	2255      	movs	r2, #85	; 0x55
   105c0:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105c2:	4b50      	ldr	r3, [pc, #320]	; (10704 <init_eeprom+0x5b4>)
   105c4:	2200      	movs	r2, #0
   105c6:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105c8:	4b4e      	ldr	r3, [pc, #312]	; (10704 <init_eeprom+0x5b4>)
   105ca:	2232      	movs	r2, #50	; 0x32
   105cc:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105ce:	4b4d      	ldr	r3, [pc, #308]	; (10704 <init_eeprom+0x5b4>)
   105d0:	224f      	movs	r2, #79	; 0x4f
   105d2:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105d4:	4b4b      	ldr	r3, [pc, #300]	; (10704 <init_eeprom+0x5b4>)
   105d6:	2254      	movs	r2, #84	; 0x54
   105d8:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105da:	4b4a      	ldr	r3, [pc, #296]	; (10704 <init_eeprom+0x5b4>)
   105dc:	2202      	movs	r2, #2
   105de:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e0:	4b48      	ldr	r3, [pc, #288]	; (10704 <init_eeprom+0x5b4>)
   105e2:	2200      	movs	r2, #0
   105e4:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105e6:	4b47      	ldr	r3, [pc, #284]	; (10704 <init_eeprom+0x5b4>)
   105e8:	2200      	movs	r2, #0
   105ea:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105ec:	4b45      	ldr	r3, [pc, #276]	; (10704 <init_eeprom+0x5b4>)
   105ee:	2200      	movs	r2, #0
   105f0:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105f2:	4b44      	ldr	r3, [pc, #272]	; (10704 <init_eeprom+0x5b4>)
   105f4:	2200      	movs	r2, #0
   105f6:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   105f8:	4b42      	ldr	r3, [pc, #264]	; (10704 <init_eeprom+0x5b4>)
   105fa:	2200      	movs	r2, #0
   105fc:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   105fe:	4b41      	ldr	r3, [pc, #260]	; (10704 <init_eeprom+0x5b4>)
   10600:	2200      	movs	r2, #0
   10602:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   10604:	4b3f      	ldr	r3, [pc, #252]	; (10704 <init_eeprom+0x5b4>)
   10606:	2200      	movs	r2, #0
   10608:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   1060a:	4b3e      	ldr	r3, [pc, #248]	; (10704 <init_eeprom+0x5b4>)
   1060c:	2200      	movs	r2, #0
   1060e:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10610:	4b3c      	ldr	r3, [pc, #240]	; (10704 <init_eeprom+0x5b4>)
   10612:	2200      	movs	r2, #0
   10614:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   10616:	4b3b      	ldr	r3, [pc, #236]	; (10704 <init_eeprom+0x5b4>)
   10618:	2200      	movs	r2, #0
   1061a:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   1061c:	4b39      	ldr	r3, [pc, #228]	; (10704 <init_eeprom+0x5b4>)
   1061e:	2200      	movs	r2, #0
   10620:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   10622:	4b38      	ldr	r3, [pc, #224]	; (10704 <init_eeprom+0x5b4>)
   10624:	2255      	movs	r2, #85	; 0x55
   10626:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   10628:	4b36      	ldr	r3, [pc, #216]	; (10704 <init_eeprom+0x5b4>)
   1062a:	2278      	movs	r2, #120	; 0x78
   1062c:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   1062e:	4b35      	ldr	r3, [pc, #212]	; (10704 <init_eeprom+0x5b4>)
   10630:	2200      	movs	r2, #0
   10632:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   10634:	4b33      	ldr	r3, [pc, #204]	; (10704 <init_eeprom+0x5b4>)
   10636:	2200      	movs	r2, #0
   10638:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   1063a:	4b32      	ldr	r3, [pc, #200]	; (10704 <init_eeprom+0x5b4>)
   1063c:	2220      	movs	r2, #32
   1063e:	2101      	movs	r1, #1
   10640:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   10642:	4b30      	ldr	r3, [pc, #192]	; (10704 <init_eeprom+0x5b4>)
   10644:	2250      	movs	r2, #80	; 0x50
   10646:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   10648:	4b2e      	ldr	r3, [pc, #184]	; (10704 <init_eeprom+0x5b4>)
   1064a:	2224      	movs	r2, #36	; 0x24
   1064c:	2101      	movs	r1, #1
   1064e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10650:	4b2c      	ldr	r3, [pc, #176]	; (10704 <init_eeprom+0x5b4>)
   10652:	2225      	movs	r2, #37	; 0x25
   10654:	2102      	movs	r1, #2
   10656:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   10658:	4b2a      	ldr	r3, [pc, #168]	; (10704 <init_eeprom+0x5b4>)
   1065a:	2226      	movs	r2, #38	; 0x26
   1065c:	2102      	movs	r1, #2
   1065e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10660:	4b28      	ldr	r3, [pc, #160]	; (10704 <init_eeprom+0x5b4>)
   10662:	2227      	movs	r2, #39	; 0x27
   10664:	2100      	movs	r1, #0
   10666:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10;
   10668:	4b26      	ldr	r3, [pc, #152]	; (10704 <init_eeprom+0x5b4>)
   1066a:	220a      	movs	r2, #10
   1066c:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1066e:	4925      	ldr	r1, [pc, #148]	; (10704 <init_eeprom+0x5b4>)
   10670:	4b25      	ldr	r3, [pc, #148]	; (10708 <init_eeprom+0x5b8>)
   10672:	2230      	movs	r2, #48	; 0x30
   10674:	0018      	movs	r0, r3
   10676:	4b25      	ldr	r3, [pc, #148]	; (1070c <init_eeprom+0x5bc>)
   10678:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1067a:	4b23      	ldr	r3, [pc, #140]	; (10708 <init_eeprom+0x5b8>)
   1067c:	0019      	movs	r1, r3
   1067e:	201a      	movs	r0, #26
   10680:	4b23      	ldr	r3, [pc, #140]	; (10710 <init_eeprom+0x5c0>)
   10682:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10684:	4b23      	ldr	r3, [pc, #140]	; (10714 <init_eeprom+0x5c4>)
   10686:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   10688:	4b1f      	ldr	r3, [pc, #124]	; (10708 <init_eeprom+0x5b8>)
   1068a:	0019      	movs	r1, r3
   1068c:	201b      	movs	r0, #27
   1068e:	4b22      	ldr	r3, [pc, #136]	; (10718 <init_eeprom+0x5c8>)
   10690:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   10692:	491d      	ldr	r1, [pc, #116]	; (10708 <init_eeprom+0x5b8>)
   10694:	4b21      	ldr	r3, [pc, #132]	; (1071c <init_eeprom+0x5cc>)
   10696:	2210      	movs	r2, #16
   10698:	0018      	movs	r0, r3
   1069a:	4b1c      	ldr	r3, [pc, #112]	; (1070c <init_eeprom+0x5bc>)
   1069c:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1069e:	4b1f      	ldr	r3, [pc, #124]	; (1071c <init_eeprom+0x5cc>)
   106a0:	781b      	ldrb	r3, [r3, #0]
   106a2:	2b55      	cmp	r3, #85	; 0x55
   106a4:	d02a      	beq.n	106fc <init_eeprom+0x5ac>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106a6:	4b1d      	ldr	r3, [pc, #116]	; (1071c <init_eeprom+0x5cc>)
   106a8:	2255      	movs	r2, #85	; 0x55
   106aa:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106ac:	4b1b      	ldr	r3, [pc, #108]	; (1071c <init_eeprom+0x5cc>)
   106ae:	2201      	movs	r2, #1
   106b0:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106b2:	4b1a      	ldr	r3, [pc, #104]	; (1071c <init_eeprom+0x5cc>)
   106b4:	2201      	movs	r2, #1
   106b6:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106b8:	4b18      	ldr	r3, [pc, #96]	; (1071c <init_eeprom+0x5cc>)
   106ba:	2200      	movs	r2, #0
   106bc:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106be:	4b17      	ldr	r3, [pc, #92]	; (1071c <init_eeprom+0x5cc>)
   106c0:	2200      	movs	r2, #0
   106c2:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106c4:	4b15      	ldr	r3, [pc, #84]	; (1071c <init_eeprom+0x5cc>)
   106c6:	2200      	movs	r2, #0
   106c8:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106ca:	4b14      	ldr	r3, [pc, #80]	; (1071c <init_eeprom+0x5cc>)
   106cc:	2200      	movs	r2, #0
   106ce:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d0:	4b12      	ldr	r3, [pc, #72]	; (1071c <init_eeprom+0x5cc>)
   106d2:	2200      	movs	r2, #0
   106d4:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106d6:	4b11      	ldr	r3, [pc, #68]	; (1071c <init_eeprom+0x5cc>)
   106d8:	2200      	movs	r2, #0
   106da:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106dc:	4b0f      	ldr	r3, [pc, #60]	; (1071c <init_eeprom+0x5cc>)
   106de:	2200      	movs	r2, #0
   106e0:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106e2:	490e      	ldr	r1, [pc, #56]	; (1071c <init_eeprom+0x5cc>)
   106e4:	4b08      	ldr	r3, [pc, #32]	; (10708 <init_eeprom+0x5b8>)
   106e6:	2210      	movs	r2, #16
   106e8:	0018      	movs	r0, r3
   106ea:	4b08      	ldr	r3, [pc, #32]	; (1070c <init_eeprom+0x5bc>)
   106ec:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106ee:	4b06      	ldr	r3, [pc, #24]	; (10708 <init_eeprom+0x5b8>)
   106f0:	0019      	movs	r1, r3
   106f2:	201b      	movs	r0, #27
   106f4:	4b06      	ldr	r3, [pc, #24]	; (10710 <init_eeprom+0x5c0>)
   106f6:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   106f8:	4b06      	ldr	r3, [pc, #24]	; (10714 <init_eeprom+0x5c4>)
   106fa:	4798      	blx	r3
	}
}
   106fc:	46c0      	nop			; (mov r8, r8)
   106fe:	46bd      	mov	sp, r7
   10700:	bd80      	pop	{r7, pc}
   10702:	46c0      	nop			; (mov r8, r8)
   10704:	20000650 	.word	0x20000650
   10708:	20000584 	.word	0x20000584
   1070c:	00028ddd 	.word	0x00028ddd
   10710:	000239f1 	.word	0x000239f1
   10714:	00023b99 	.word	0x00023b99
   10718:	00023afd 	.word	0x00023afd
   1071c:	20000628 	.word	0x20000628

00010720 <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   10720:	b580      	push	{r7, lr}
   10722:	b088      	sub	sp, #32
   10724:	af00      	add	r7, sp, #0
   10726:	0002      	movs	r2, r0
   10728:	6039      	str	r1, [r7, #0]
   1072a:	1dfb      	adds	r3, r7, #7
   1072c:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   1072e:	4b28      	ldr	r3, [pc, #160]	; (107d0 <config_mobile_no_ee+0xb0>)
   10730:	223c      	movs	r2, #60	; 0x3c
   10732:	2100      	movs	r1, #0
   10734:	0018      	movs	r0, r3
   10736:	4b27      	ldr	r3, [pc, #156]	; (107d4 <config_mobile_no_ee+0xb4>)
   10738:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   1073a:	4a25      	ldr	r2, [pc, #148]	; (107d0 <config_mobile_no_ee+0xb0>)
   1073c:	1dfb      	adds	r3, r7, #7
   1073e:	781b      	ldrb	r3, [r3, #0]
   10740:	0011      	movs	r1, r2
   10742:	0018      	movs	r0, r3
   10744:	4b24      	ldr	r3, [pc, #144]	; (107d8 <config_mobile_no_ee+0xb8>)
   10746:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10748:	2308      	movs	r3, #8
   1074a:	18fa      	adds	r2, r7, r3
   1074c:	4b20      	ldr	r3, [pc, #128]	; (107d0 <config_mobile_no_ee+0xb0>)
   1074e:	0010      	movs	r0, r2
   10750:	0019      	movs	r1, r3
   10752:	2318      	movs	r3, #24
   10754:	001a      	movs	r2, r3
   10756:	4b21      	ldr	r3, [pc, #132]	; (107dc <config_mobile_no_ee+0xbc>)
   10758:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   1075a:	2308      	movs	r3, #8
   1075c:	18fb      	adds	r3, r7, r3
   1075e:	781b      	ldrb	r3, [r3, #0]
   10760:	2b55      	cmp	r3, #85	; 0x55
   10762:	d031      	beq.n	107c8 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   10764:	2308      	movs	r3, #8
   10766:	18fb      	adds	r3, r7, r3
   10768:	2255      	movs	r2, #85	; 0x55
   1076a:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   1076c:	2308      	movs	r3, #8
   1076e:	18fb      	adds	r3, r7, r3
   10770:	2200      	movs	r2, #0
   10772:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   10774:	2308      	movs	r3, #8
   10776:	18fb      	adds	r3, r7, r3
   10778:	2200      	movs	r2, #0
   1077a:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   1077c:	2308      	movs	r3, #8
   1077e:	18fb      	adds	r3, r7, r3
   10780:	2200      	movs	r2, #0
   10782:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10784:	2308      	movs	r3, #8
   10786:	18fb      	adds	r3, r7, r3
   10788:	3304      	adds	r3, #4
   1078a:	2214      	movs	r2, #20
   1078c:	2100      	movs	r1, #0
   1078e:	0018      	movs	r0, r3
   10790:	4b10      	ldr	r3, [pc, #64]	; (107d4 <config_mobile_no_ee+0xb4>)
   10792:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   10794:	683a      	ldr	r2, [r7, #0]
   10796:	2308      	movs	r3, #8
   10798:	18fb      	adds	r3, r7, r3
   1079a:	3304      	adds	r3, #4
   1079c:	0011      	movs	r1, r2
   1079e:	0018      	movs	r0, r3
   107a0:	4b0f      	ldr	r3, [pc, #60]	; (107e0 <config_mobile_no_ee+0xc0>)
   107a2:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107a4:	4a0a      	ldr	r2, [pc, #40]	; (107d0 <config_mobile_no_ee+0xb0>)
   107a6:	2308      	movs	r3, #8
   107a8:	18fb      	adds	r3, r7, r3
   107aa:	0010      	movs	r0, r2
   107ac:	0019      	movs	r1, r3
   107ae:	2318      	movs	r3, #24
   107b0:	001a      	movs	r2, r3
   107b2:	4b0a      	ldr	r3, [pc, #40]	; (107dc <config_mobile_no_ee+0xbc>)
   107b4:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107b6:	4a06      	ldr	r2, [pc, #24]	; (107d0 <config_mobile_no_ee+0xb0>)
   107b8:	1dfb      	adds	r3, r7, #7
   107ba:	781b      	ldrb	r3, [r3, #0]
   107bc:	0011      	movs	r1, r2
   107be:	0018      	movs	r0, r3
   107c0:	4b08      	ldr	r3, [pc, #32]	; (107e4 <config_mobile_no_ee+0xc4>)
   107c2:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107c4:	4b08      	ldr	r3, [pc, #32]	; (107e8 <config_mobile_no_ee+0xc8>)
   107c6:	4798      	blx	r3
	}
}
   107c8:	46c0      	nop			; (mov r8, r8)
   107ca:	46bd      	mov	sp, r7
   107cc:	b008      	add	sp, #32
   107ce:	bd80      	pop	{r7, pc}
   107d0:	20000584 	.word	0x20000584
   107d4:	00028e13 	.word	0x00028e13
   107d8:	00023afd 	.word	0x00023afd
   107dc:	00028ddd 	.word	0x00028ddd
   107e0:	00029093 	.word	0x00029093
   107e4:	000239f1 	.word	0x000239f1
   107e8:	00023b99 	.word	0x00023b99

000107ec <getNumbers>:


void getNumbers(char *string)
{
   107ec:	b580      	push	{r7, lr}
   107ee:	b08a      	sub	sp, #40	; 0x28
   107f0:	af00      	add	r7, sp, #0
   107f2:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   107f4:	687b      	ldr	r3, [r7, #4]
   107f6:	2200      	movs	r2, #0
   107f8:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   107fa:	2327      	movs	r3, #39	; 0x27
   107fc:	18fb      	adds	r3, r7, r3
   107fe:	2200      	movs	r2, #0
   10800:	701a      	strb	r2, [r3, #0]
   10802:	e063      	b.n	108cc <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10804:	4b37      	ldr	r3, [pc, #220]	; (108e4 <getNumbers+0xf8>)
   10806:	223c      	movs	r2, #60	; 0x3c
   10808:	2100      	movs	r1, #0
   1080a:	0018      	movs	r0, r3
   1080c:	4b36      	ldr	r3, [pc, #216]	; (108e8 <getNumbers+0xfc>)
   1080e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10810:	2327      	movs	r3, #39	; 0x27
   10812:	18fb      	adds	r3, r7, r3
   10814:	781b      	ldrb	r3, [r3, #0]
   10816:	3309      	adds	r3, #9
   10818:	b2db      	uxtb	r3, r3
   1081a:	4a32      	ldr	r2, [pc, #200]	; (108e4 <getNumbers+0xf8>)
   1081c:	0011      	movs	r1, r2
   1081e:	0018      	movs	r0, r3
   10820:	4b32      	ldr	r3, [pc, #200]	; (108ec <getNumbers+0x100>)
   10822:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10824:	230c      	movs	r3, #12
   10826:	18fa      	adds	r2, r7, r3
   10828:	4b2e      	ldr	r3, [pc, #184]	; (108e4 <getNumbers+0xf8>)
   1082a:	0010      	movs	r0, r2
   1082c:	0019      	movs	r1, r3
   1082e:	2318      	movs	r3, #24
   10830:	001a      	movs	r2, r3
   10832:	4b2f      	ldr	r3, [pc, #188]	; (108f0 <getNumbers+0x104>)
   10834:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   10836:	4b2f      	ldr	r3, [pc, #188]	; (108f4 <getNumbers+0x108>)
   10838:	78db      	ldrb	r3, [r3, #3]
   1083a:	2227      	movs	r2, #39	; 0x27
   1083c:	18ba      	adds	r2, r7, r2
   1083e:	7812      	ldrb	r2, [r2, #0]
   10840:	429a      	cmp	r2, r3
   10842:	d10f      	bne.n	10864 <getNumbers+0x78>
		{
			strcat(string,"P:");
   10844:	687b      	ldr	r3, [r7, #4]
   10846:	0018      	movs	r0, r3
   10848:	4b2b      	ldr	r3, [pc, #172]	; (108f8 <getNumbers+0x10c>)
   1084a:	4798      	blx	r3
   1084c:	0003      	movs	r3, r0
   1084e:	001a      	movs	r2, r3
   10850:	687b      	ldr	r3, [r7, #4]
   10852:	189a      	adds	r2, r3, r2
   10854:	4b29      	ldr	r3, [pc, #164]	; (108fc <getNumbers+0x110>)
   10856:	0010      	movs	r0, r2
   10858:	0019      	movs	r1, r3
   1085a:	2303      	movs	r3, #3
   1085c:	001a      	movs	r2, r3
   1085e:	4b24      	ldr	r3, [pc, #144]	; (108f0 <getNumbers+0x104>)
   10860:	4798      	blx	r3
   10862:	e015      	b.n	10890 <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   10864:	4b23      	ldr	r3, [pc, #140]	; (108f4 <getNumbers+0x108>)
   10866:	791b      	ldrb	r3, [r3, #4]
   10868:	2227      	movs	r2, #39	; 0x27
   1086a:	18ba      	adds	r2, r7, r2
   1086c:	7812      	ldrb	r2, [r2, #0]
   1086e:	429a      	cmp	r2, r3
   10870:	d10e      	bne.n	10890 <getNumbers+0xa4>
		{
			strcat(string,"S:");
   10872:	687b      	ldr	r3, [r7, #4]
   10874:	0018      	movs	r0, r3
   10876:	4b20      	ldr	r3, [pc, #128]	; (108f8 <getNumbers+0x10c>)
   10878:	4798      	blx	r3
   1087a:	0003      	movs	r3, r0
   1087c:	001a      	movs	r2, r3
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	189a      	adds	r2, r3, r2
   10882:	4b1f      	ldr	r3, [pc, #124]	; (10900 <getNumbers+0x114>)
   10884:	0010      	movs	r0, r2
   10886:	0019      	movs	r1, r3
   10888:	2303      	movs	r3, #3
   1088a:	001a      	movs	r2, r3
   1088c:	4b18      	ldr	r3, [pc, #96]	; (108f0 <getNumbers+0x104>)
   1088e:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   10890:	230c      	movs	r3, #12
   10892:	18fb      	adds	r3, r7, r3
   10894:	1d1a      	adds	r2, r3, #4
   10896:	687b      	ldr	r3, [r7, #4]
   10898:	0011      	movs	r1, r2
   1089a:	0018      	movs	r0, r3
   1089c:	4b19      	ldr	r3, [pc, #100]	; (10904 <getNumbers+0x118>)
   1089e:	4798      	blx	r3
		strcat(string,"\n");
   108a0:	687b      	ldr	r3, [r7, #4]
   108a2:	0018      	movs	r0, r3
   108a4:	4b14      	ldr	r3, [pc, #80]	; (108f8 <getNumbers+0x10c>)
   108a6:	4798      	blx	r3
   108a8:	0003      	movs	r3, r0
   108aa:	001a      	movs	r2, r3
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	189a      	adds	r2, r3, r2
   108b0:	4b15      	ldr	r3, [pc, #84]	; (10908 <getNumbers+0x11c>)
   108b2:	0010      	movs	r0, r2
   108b4:	0019      	movs	r1, r3
   108b6:	2302      	movs	r3, #2
   108b8:	001a      	movs	r2, r3
   108ba:	4b0d      	ldr	r3, [pc, #52]	; (108f0 <getNumbers+0x104>)
   108bc:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108be:	2327      	movs	r3, #39	; 0x27
   108c0:	18fb      	adds	r3, r7, r3
   108c2:	781a      	ldrb	r2, [r3, #0]
   108c4:	2327      	movs	r3, #39	; 0x27
   108c6:	18fb      	adds	r3, r7, r3
   108c8:	3201      	adds	r2, #1
   108ca:	701a      	strb	r2, [r3, #0]
   108cc:	4b09      	ldr	r3, [pc, #36]	; (108f4 <getNumbers+0x108>)
   108ce:	789b      	ldrb	r3, [r3, #2]
   108d0:	2227      	movs	r2, #39	; 0x27
   108d2:	18ba      	adds	r2, r7, r2
   108d4:	7812      	ldrb	r2, [r2, #0]
   108d6:	429a      	cmp	r2, r3
   108d8:	d394      	bcc.n	10804 <getNumbers+0x18>
	}
}
   108da:	46c0      	nop			; (mov r8, r8)
   108dc:	46bd      	mov	sp, r7
   108de:	b00a      	add	sp, #40	; 0x28
   108e0:	bd80      	pop	{r7, pc}
   108e2:	46c0      	nop			; (mov r8, r8)
   108e4:	20000584 	.word	0x20000584
   108e8:	00028e13 	.word	0x00028e13
   108ec:	00023afd 	.word	0x00023afd
   108f0:	00028ddd 	.word	0x00028ddd
   108f4:	20000610 	.word	0x20000610
   108f8:	000290a3 	.word	0x000290a3
   108fc:	00029aa4 	.word	0x00029aa4
   10900:	00029aa8 	.word	0x00029aa8
   10904:	0002905d 	.word	0x0002905d
   10908:	00029aac 	.word	0x00029aac

0001090c <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   1090c:	b580      	push	{r7, lr}
   1090e:	b088      	sub	sp, #32
   10910:	af00      	add	r7, sp, #0
   10912:	6078      	str	r0, [r7, #4]
   10914:	000a      	movs	r2, r1
   10916:	1cfb      	adds	r3, r7, #3
   10918:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   1091a:	687b      	ldr	r3, [r7, #4]
   1091c:	2200      	movs	r2, #0
   1091e:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   10920:	4b15      	ldr	r3, [pc, #84]	; (10978 <getIndexedNumber+0x6c>)
   10922:	789b      	ldrb	r3, [r3, #2]
   10924:	1cfa      	adds	r2, r7, #3
   10926:	7812      	ldrb	r2, [r2, #0]
   10928:	429a      	cmp	r2, r3
   1092a:	d21f      	bcs.n	1096c <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   1092c:	4b13      	ldr	r3, [pc, #76]	; (1097c <getIndexedNumber+0x70>)
   1092e:	223c      	movs	r2, #60	; 0x3c
   10930:	2100      	movs	r1, #0
   10932:	0018      	movs	r0, r3
   10934:	4b12      	ldr	r3, [pc, #72]	; (10980 <getIndexedNumber+0x74>)
   10936:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10938:	1cfb      	adds	r3, r7, #3
   1093a:	781b      	ldrb	r3, [r3, #0]
   1093c:	3309      	adds	r3, #9
   1093e:	b2db      	uxtb	r3, r3
   10940:	4a0e      	ldr	r2, [pc, #56]	; (1097c <getIndexedNumber+0x70>)
   10942:	0011      	movs	r1, r2
   10944:	0018      	movs	r0, r3
   10946:	4b0f      	ldr	r3, [pc, #60]	; (10984 <getIndexedNumber+0x78>)
   10948:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1094a:	2308      	movs	r3, #8
   1094c:	18fa      	adds	r2, r7, r3
   1094e:	4b0b      	ldr	r3, [pc, #44]	; (1097c <getIndexedNumber+0x70>)
   10950:	0010      	movs	r0, r2
   10952:	0019      	movs	r1, r3
   10954:	2318      	movs	r3, #24
   10956:	001a      	movs	r2, r3
   10958:	4b0b      	ldr	r3, [pc, #44]	; (10988 <getIndexedNumber+0x7c>)
   1095a:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   1095c:	2308      	movs	r3, #8
   1095e:	18fb      	adds	r3, r7, r3
   10960:	1d1a      	adds	r2, r3, #4
   10962:	687b      	ldr	r3, [r7, #4]
   10964:	0011      	movs	r1, r2
   10966:	0018      	movs	r0, r3
   10968:	4b08      	ldr	r3, [pc, #32]	; (1098c <getIndexedNumber+0x80>)
   1096a:	4798      	blx	r3
	}
	return IndexNo;
   1096c:	687b      	ldr	r3, [r7, #4]
}
   1096e:	0018      	movs	r0, r3
   10970:	46bd      	mov	sp, r7
   10972:	b008      	add	sp, #32
   10974:	bd80      	pop	{r7, pc}
   10976:	46c0      	nop			; (mov r8, r8)
   10978:	20000610 	.word	0x20000610
   1097c:	20000584 	.word	0x20000584
   10980:	00028e13 	.word	0x00028e13
   10984:	00023afd 	.word	0x00023afd
   10988:	00028ddd 	.word	0x00028ddd
   1098c:	0002905d 	.word	0x0002905d

00010990 <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   10990:	b580      	push	{r7, lr}
   10992:	b088      	sub	sp, #32
   10994:	af00      	add	r7, sp, #0
   10996:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10998:	4b14      	ldr	r3, [pc, #80]	; (109ec <isPrimaryNumber+0x5c>)
   1099a:	789b      	ldrb	r3, [r3, #2]
   1099c:	2b00      	cmp	r3, #0
   1099e:	d020      	beq.n	109e2 <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109a0:	230c      	movs	r3, #12
   109a2:	18fb      	adds	r3, r7, r3
   109a4:	0018      	movs	r0, r3
   109a6:	2314      	movs	r3, #20
   109a8:	001a      	movs	r2, r3
   109aa:	2100      	movs	r1, #0
   109ac:	4b10      	ldr	r3, [pc, #64]	; (109f0 <isPrimaryNumber+0x60>)
   109ae:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109b0:	4b0e      	ldr	r3, [pc, #56]	; (109ec <isPrimaryNumber+0x5c>)
   109b2:	78da      	ldrb	r2, [r3, #3]
   109b4:	230c      	movs	r3, #12
   109b6:	18fb      	adds	r3, r7, r3
   109b8:	0011      	movs	r1, r2
   109ba:	0018      	movs	r0, r3
   109bc:	4b0d      	ldr	r3, [pc, #52]	; (109f4 <isPrimaryNumber+0x64>)
   109be:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109c0:	230c      	movs	r3, #12
   109c2:	18fa      	adds	r2, r7, r3
   109c4:	687b      	ldr	r3, [r7, #4]
   109c6:	0011      	movs	r1, r2
   109c8:	0018      	movs	r0, r3
   109ca:	4b0b      	ldr	r3, [pc, #44]	; (109f8 <isPrimaryNumber+0x68>)
   109cc:	4798      	blx	r3
   109ce:	1e03      	subs	r3, r0, #0
   109d0:	d001      	beq.n	109d6 <isPrimaryNumber+0x46>
		{
			return true;
   109d2:	2301      	movs	r3, #1
   109d4:	e006      	b.n	109e4 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	0018      	movs	r0, r3
   109da:	4b08      	ldr	r3, [pc, #32]	; (109fc <isPrimaryNumber+0x6c>)
   109dc:	4798      	blx	r3
   109de:	0003      	movs	r3, r0
   109e0:	e000      	b.n	109e4 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109e2:	2300      	movs	r3, #0
}
   109e4:	0018      	movs	r0, r3
   109e6:	46bd      	mov	sp, r7
   109e8:	b008      	add	sp, #32
   109ea:	bd80      	pop	{r7, pc}
   109ec:	20000610 	.word	0x20000610
   109f0:	00028e13 	.word	0x00028e13
   109f4:	0001090d 	.word	0x0001090d
   109f8:	000290d3 	.word	0x000290d3
   109fc:	00010a01 	.word	0x00010a01

00010a00 <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a00:	b580      	push	{r7, lr}
   10a02:	b082      	sub	sp, #8
   10a04:	af00      	add	r7, sp, #0
   10a06:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a08:	4b0b      	ldr	r3, [pc, #44]	; (10a38 <isAlterNumber+0x38>)
   10a0a:	789b      	ldrb	r3, [r3, #2]
   10a0c:	2b00      	cmp	r3, #0
   10a0e:	d00d      	beq.n	10a2c <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a10:	4b0a      	ldr	r3, [pc, #40]	; (10a3c <isAlterNumber+0x3c>)
   10a12:	789b      	ldrb	r3, [r3, #2]
   10a14:	2b00      	cmp	r3, #0
   10a16:	d009      	beq.n	10a2c <isAlterNumber+0x2c>
   10a18:	4a09      	ldr	r2, [pc, #36]	; (10a40 <isAlterNumber+0x40>)
   10a1a:	687b      	ldr	r3, [r7, #4]
   10a1c:	0011      	movs	r1, r2
   10a1e:	0018      	movs	r0, r3
   10a20:	4b08      	ldr	r3, [pc, #32]	; (10a44 <isAlterNumber+0x44>)
   10a22:	4798      	blx	r3
   10a24:	1e03      	subs	r3, r0, #0
   10a26:	d001      	beq.n	10a2c <isAlterNumber+0x2c>
		{
			return true;
   10a28:	2301      	movs	r3, #1
   10a2a:	e000      	b.n	10a2e <isAlterNumber+0x2e>
		}
	}
	return false;
   10a2c:	2300      	movs	r3, #0
}
   10a2e:	0018      	movs	r0, r3
   10a30:	46bd      	mov	sp, r7
   10a32:	b002      	add	sp, #8
   10a34:	bd80      	pop	{r7, pc}
   10a36:	46c0      	nop			; (mov r8, r8)
   10a38:	20000610 	.word	0x20000610
   10a3c:	20000638 	.word	0x20000638
   10a40:	2000063c 	.word	0x2000063c
   10a44:	000290d3 	.word	0x000290d3

00010a48 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a48:	b580      	push	{r7, lr}
   10a4a:	b082      	sub	sp, #8
   10a4c:	af00      	add	r7, sp, #0
   10a4e:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a50:	4b09      	ldr	r3, [pc, #36]	; (10a78 <isM2MNumber+0x30>)
   10a52:	785b      	ldrb	r3, [r3, #1]
   10a54:	2b00      	cmp	r3, #0
   10a56:	d009      	beq.n	10a6c <isM2MNumber+0x24>
   10a58:	4a08      	ldr	r2, [pc, #32]	; (10a7c <isM2MNumber+0x34>)
   10a5a:	687b      	ldr	r3, [r7, #4]
   10a5c:	0011      	movs	r1, r2
   10a5e:	0018      	movs	r0, r3
   10a60:	4b07      	ldr	r3, [pc, #28]	; (10a80 <isM2MNumber+0x38>)
   10a62:	4798      	blx	r3
   10a64:	1e03      	subs	r3, r0, #0
   10a66:	d001      	beq.n	10a6c <isM2MNumber+0x24>
	{
		return true;
   10a68:	2301      	movs	r3, #1
   10a6a:	e000      	b.n	10a6e <isM2MNumber+0x26>
	}
	return false;
   10a6c:	2300      	movs	r3, #0
}
   10a6e:	0018      	movs	r0, r3
   10a70:	46bd      	mov	sp, r7
   10a72:	b002      	add	sp, #8
   10a74:	bd80      	pop	{r7, pc}
   10a76:	46c0      	nop			; (mov r8, r8)
   10a78:	20000554 	.word	0x20000554
   10a7c:	2000055c 	.word	0x2000055c
   10a80:	000290d3 	.word	0x000290d3

00010a84 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a84:	b580      	push	{r7, lr}
   10a86:	b082      	sub	sp, #8
   10a88:	af00      	add	r7, sp, #0
   10a8a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a8c:	4b09      	ldr	r3, [pc, #36]	; (10ab4 <isM2MRemoteNumber+0x30>)
   10a8e:	78db      	ldrb	r3, [r3, #3]
   10a90:	2b00      	cmp	r3, #0
   10a92:	d009      	beq.n	10aa8 <isM2MRemoteNumber+0x24>
   10a94:	4a08      	ldr	r2, [pc, #32]	; (10ab8 <isM2MRemoteNumber+0x34>)
   10a96:	687b      	ldr	r3, [r7, #4]
   10a98:	0011      	movs	r1, r2
   10a9a:	0018      	movs	r0, r3
   10a9c:	4b07      	ldr	r3, [pc, #28]	; (10abc <isM2MRemoteNumber+0x38>)
   10a9e:	4798      	blx	r3
   10aa0:	1e03      	subs	r3, r0, #0
   10aa2:	d001      	beq.n	10aa8 <isM2MRemoteNumber+0x24>
	{
		return true;
   10aa4:	2301      	movs	r3, #1
   10aa6:	e000      	b.n	10aaa <isM2MRemoteNumber+0x26>
	}
	return false;
   10aa8:	2300      	movs	r3, #0
}
   10aaa:	0018      	movs	r0, r3
   10aac:	46bd      	mov	sp, r7
   10aae:	b002      	add	sp, #8
   10ab0:	bd80      	pop	{r7, pc}
   10ab2:	46c0      	nop			; (mov r8, r8)
   10ab4:	20000554 	.word	0x20000554
   10ab8:	20000570 	.word	0x20000570
   10abc:	000290d3 	.word	0x000290d3

00010ac0 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10ac0:	b580      	push	{r7, lr}
   10ac2:	b082      	sub	sp, #8
   10ac4:	af00      	add	r7, sp, #0
   10ac6:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ac8:	4b09      	ldr	r3, [pc, #36]	; (10af0 <getM2MNumber+0x30>)
   10aca:	785b      	ldrb	r3, [r3, #1]
   10acc:	2b00      	cmp	r3, #0
   10ace:	d006      	beq.n	10ade <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10ad0:	4a08      	ldr	r2, [pc, #32]	; (10af4 <getM2MNumber+0x34>)
   10ad2:	687b      	ldr	r3, [r7, #4]
   10ad4:	0011      	movs	r1, r2
   10ad6:	0018      	movs	r0, r3
   10ad8:	4b07      	ldr	r3, [pc, #28]	; (10af8 <getM2MNumber+0x38>)
   10ada:	4798      	blx	r3
   10adc:	e002      	b.n	10ae4 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10ade:	687b      	ldr	r3, [r7, #4]
   10ae0:	2200      	movs	r2, #0
   10ae2:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10ae4:	687b      	ldr	r3, [r7, #4]
}
   10ae6:	0018      	movs	r0, r3
   10ae8:	46bd      	mov	sp, r7
   10aea:	b002      	add	sp, #8
   10aec:	bd80      	pop	{r7, pc}
   10aee:	46c0      	nop			; (mov r8, r8)
   10af0:	20000554 	.word	0x20000554
   10af4:	2000055c 	.word	0x2000055c
   10af8:	00029093 	.word	0x00029093

00010afc <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10afc:	b580      	push	{r7, lr}
   10afe:	b082      	sub	sp, #8
   10b00:	af00      	add	r7, sp, #0
   10b02:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b04:	4b09      	ldr	r3, [pc, #36]	; (10b2c <getM2MRemoteNumber+0x30>)
   10b06:	78db      	ldrb	r3, [r3, #3]
   10b08:	2b00      	cmp	r3, #0
   10b0a:	d006      	beq.n	10b1a <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b0c:	4a08      	ldr	r2, [pc, #32]	; (10b30 <getM2MRemoteNumber+0x34>)
   10b0e:	687b      	ldr	r3, [r7, #4]
   10b10:	0011      	movs	r1, r2
   10b12:	0018      	movs	r0, r3
   10b14:	4b07      	ldr	r3, [pc, #28]	; (10b34 <getM2MRemoteNumber+0x38>)
   10b16:	4798      	blx	r3
   10b18:	e002      	b.n	10b20 <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b1a:	687b      	ldr	r3, [r7, #4]
   10b1c:	2200      	movs	r2, #0
   10b1e:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b20:	687b      	ldr	r3, [r7, #4]
}
   10b22:	0018      	movs	r0, r3
   10b24:	46bd      	mov	sp, r7
   10b26:	b002      	add	sp, #8
   10b28:	bd80      	pop	{r7, pc}
   10b2a:	46c0      	nop			; (mov r8, r8)
   10b2c:	20000554 	.word	0x20000554
   10b30:	20000570 	.word	0x20000570
   10b34:	00029093 	.word	0x00029093

00010b38 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b38:	b580      	push	{r7, lr}
   10b3a:	b082      	sub	sp, #8
   10b3c:	af00      	add	r7, sp, #0
   10b3e:	0002      	movs	r2, r0
   10b40:	1dfb      	adds	r3, r7, #7
   10b42:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b44:	1dfb      	adds	r3, r7, #7
   10b46:	781a      	ldrb	r2, [r3, #0]
   10b48:	4b0a      	ldr	r3, [pc, #40]	; (10b74 <setM2MVerify+0x3c>)
   10b4a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b4c:	4a0a      	ldr	r2, [pc, #40]	; (10b78 <setM2MVerify+0x40>)
   10b4e:	4b09      	ldr	r3, [pc, #36]	; (10b74 <setM2MVerify+0x3c>)
   10b50:	0010      	movs	r0, r2
   10b52:	0019      	movs	r1, r3
   10b54:	2330      	movs	r3, #48	; 0x30
   10b56:	001a      	movs	r2, r3
   10b58:	4b08      	ldr	r3, [pc, #32]	; (10b7c <setM2MVerify+0x44>)
   10b5a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b5c:	4b06      	ldr	r3, [pc, #24]	; (10b78 <setM2MVerify+0x40>)
   10b5e:	0019      	movs	r1, r3
   10b60:	2019      	movs	r0, #25
   10b62:	4b07      	ldr	r3, [pc, #28]	; (10b80 <setM2MVerify+0x48>)
   10b64:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b66:	4b07      	ldr	r3, [pc, #28]	; (10b84 <setM2MVerify+0x4c>)
   10b68:	4798      	blx	r3
}
   10b6a:	46c0      	nop			; (mov r8, r8)
   10b6c:	46bd      	mov	sp, r7
   10b6e:	b002      	add	sp, #8
   10b70:	bd80      	pop	{r7, pc}
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	20000554 	.word	0x20000554
   10b78:	20000584 	.word	0x20000584
   10b7c:	00028ddd 	.word	0x00028ddd
   10b80:	000239f1 	.word	0x000239f1
   10b84:	00023b99 	.word	0x00023b99

00010b88 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b88:	b580      	push	{r7, lr}
   10b8a:	b082      	sub	sp, #8
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	0002      	movs	r2, r0
   10b90:	1dfb      	adds	r3, r7, #7
   10b92:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10b94:	1dfb      	adds	r3, r7, #7
   10b96:	781a      	ldrb	r2, [r3, #0]
   10b98:	4b0a      	ldr	r3, [pc, #40]	; (10bc4 <setM2MRemoteVerified+0x3c>)
   10b9a:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b9c:	4a0a      	ldr	r2, [pc, #40]	; (10bc8 <setM2MRemoteVerified+0x40>)
   10b9e:	4b09      	ldr	r3, [pc, #36]	; (10bc4 <setM2MRemoteVerified+0x3c>)
   10ba0:	0010      	movs	r0, r2
   10ba2:	0019      	movs	r1, r3
   10ba4:	2330      	movs	r3, #48	; 0x30
   10ba6:	001a      	movs	r2, r3
   10ba8:	4b08      	ldr	r3, [pc, #32]	; (10bcc <setM2MRemoteVerified+0x44>)
   10baa:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bac:	4b06      	ldr	r3, [pc, #24]	; (10bc8 <setM2MRemoteVerified+0x40>)
   10bae:	0019      	movs	r1, r3
   10bb0:	2019      	movs	r0, #25
   10bb2:	4b07      	ldr	r3, [pc, #28]	; (10bd0 <setM2MRemoteVerified+0x48>)
   10bb4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bb6:	4b07      	ldr	r3, [pc, #28]	; (10bd4 <setM2MRemoteVerified+0x4c>)
   10bb8:	4798      	blx	r3
}
   10bba:	46c0      	nop			; (mov r8, r8)
   10bbc:	46bd      	mov	sp, r7
   10bbe:	b002      	add	sp, #8
   10bc0:	bd80      	pop	{r7, pc}
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	20000554 	.word	0x20000554
   10bc8:	20000584 	.word	0x20000584
   10bcc:	00028ddd 	.word	0x00028ddd
   10bd0:	000239f1 	.word	0x000239f1
   10bd4:	00023b99 	.word	0x00023b99

00010bd8 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10bd8:	b580      	push	{r7, lr}
   10bda:	b082      	sub	sp, #8
   10bdc:	af00      	add	r7, sp, #0
   10bde:	0002      	movs	r2, r0
   10be0:	1dfb      	adds	r3, r7, #7
   10be2:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10be4:	1dfb      	adds	r3, r7, #7
   10be6:	781a      	ldrb	r2, [r3, #0]
   10be8:	4b0f      	ldr	r3, [pc, #60]	; (10c28 <saveM2MSettings+0x50>)
   10bea:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	781b      	ldrb	r3, [r3, #0]
   10bf0:	2201      	movs	r2, #1
   10bf2:	4053      	eors	r3, r2
   10bf4:	b2db      	uxtb	r3, r3
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	d002      	beq.n	10c00 <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10bfa:	4b0b      	ldr	r3, [pc, #44]	; (10c28 <saveM2MSettings+0x50>)
   10bfc:	2200      	movs	r2, #0
   10bfe:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c00:	4a0a      	ldr	r2, [pc, #40]	; (10c2c <saveM2MSettings+0x54>)
   10c02:	4b09      	ldr	r3, [pc, #36]	; (10c28 <saveM2MSettings+0x50>)
   10c04:	0010      	movs	r0, r2
   10c06:	0019      	movs	r1, r3
   10c08:	2330      	movs	r3, #48	; 0x30
   10c0a:	001a      	movs	r2, r3
   10c0c:	4b08      	ldr	r3, [pc, #32]	; (10c30 <saveM2MSettings+0x58>)
   10c0e:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c10:	4b06      	ldr	r3, [pc, #24]	; (10c2c <saveM2MSettings+0x54>)
   10c12:	0019      	movs	r1, r3
   10c14:	2019      	movs	r0, #25
   10c16:	4b07      	ldr	r3, [pc, #28]	; (10c34 <saveM2MSettings+0x5c>)
   10c18:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c1a:	4b07      	ldr	r3, [pc, #28]	; (10c38 <saveM2MSettings+0x60>)
   10c1c:	4798      	blx	r3
}
   10c1e:	46c0      	nop			; (mov r8, r8)
   10c20:	46bd      	mov	sp, r7
   10c22:	b002      	add	sp, #8
   10c24:	bd80      	pop	{r7, pc}
   10c26:	46c0      	nop			; (mov r8, r8)
   10c28:	20000554 	.word	0x20000554
   10c2c:	20000584 	.word	0x20000584
   10c30:	00028ddd 	.word	0x00028ddd
   10c34:	000239f1 	.word	0x000239f1
   10c38:	00023b99 	.word	0x00023b99

00010c3c <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c3c:	b580      	push	{r7, lr}
   10c3e:	b082      	sub	sp, #8
   10c40:	af00      	add	r7, sp, #0
   10c42:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c44:	4b0f      	ldr	r3, [pc, #60]	; (10c84 <addM2MNumber+0x48>)
   10c46:	2201      	movs	r2, #1
   10c48:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c4a:	687a      	ldr	r2, [r7, #4]
   10c4c:	4b0e      	ldr	r3, [pc, #56]	; (10c88 <addM2MNumber+0x4c>)
   10c4e:	0011      	movs	r1, r2
   10c50:	0018      	movs	r0, r3
   10c52:	4b0e      	ldr	r3, [pc, #56]	; (10c8c <addM2MNumber+0x50>)
   10c54:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c56:	4a0e      	ldr	r2, [pc, #56]	; (10c90 <addM2MNumber+0x54>)
   10c58:	4b0a      	ldr	r3, [pc, #40]	; (10c84 <addM2MNumber+0x48>)
   10c5a:	0010      	movs	r0, r2
   10c5c:	0019      	movs	r1, r3
   10c5e:	2330      	movs	r3, #48	; 0x30
   10c60:	001a      	movs	r2, r3
   10c62:	4b0c      	ldr	r3, [pc, #48]	; (10c94 <addM2MNumber+0x58>)
   10c64:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c66:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <addM2MNumber+0x54>)
   10c68:	0019      	movs	r1, r3
   10c6a:	2019      	movs	r0, #25
   10c6c:	4b0a      	ldr	r3, [pc, #40]	; (10c98 <addM2MNumber+0x5c>)
   10c6e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c70:	4b0a      	ldr	r3, [pc, #40]	; (10c9c <addM2MNumber+0x60>)
   10c72:	4798      	blx	r3
	setM2MVerify(false);
   10c74:	2000      	movs	r0, #0
   10c76:	4b0a      	ldr	r3, [pc, #40]	; (10ca0 <addM2MNumber+0x64>)
   10c78:	4798      	blx	r3
}
   10c7a:	46c0      	nop			; (mov r8, r8)
   10c7c:	46bd      	mov	sp, r7
   10c7e:	b002      	add	sp, #8
   10c80:	bd80      	pop	{r7, pc}
   10c82:	46c0      	nop			; (mov r8, r8)
   10c84:	20000554 	.word	0x20000554
   10c88:	2000055c 	.word	0x2000055c
   10c8c:	00029093 	.word	0x00029093
   10c90:	20000584 	.word	0x20000584
   10c94:	00028ddd 	.word	0x00028ddd
   10c98:	000239f1 	.word	0x000239f1
   10c9c:	00023b99 	.word	0x00023b99
   10ca0:	00010b39 	.word	0x00010b39

00010ca4 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10ca4:	b580      	push	{r7, lr}
   10ca6:	b082      	sub	sp, #8
   10ca8:	af00      	add	r7, sp, #0
   10caa:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cac:	4b10      	ldr	r3, [pc, #64]	; (10cf0 <addM2MRemoteNumber+0x4c>)
   10cae:	2201      	movs	r2, #1
   10cb0:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cb2:	687a      	ldr	r2, [r7, #4]
   10cb4:	4b0f      	ldr	r3, [pc, #60]	; (10cf4 <addM2MRemoteNumber+0x50>)
   10cb6:	0011      	movs	r1, r2
   10cb8:	0018      	movs	r0, r3
   10cba:	4b0f      	ldr	r3, [pc, #60]	; (10cf8 <addM2MRemoteNumber+0x54>)
   10cbc:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cbe:	4a0f      	ldr	r2, [pc, #60]	; (10cfc <addM2MRemoteNumber+0x58>)
   10cc0:	4b0b      	ldr	r3, [pc, #44]	; (10cf0 <addM2MRemoteNumber+0x4c>)
   10cc2:	0010      	movs	r0, r2
   10cc4:	0019      	movs	r1, r3
   10cc6:	2330      	movs	r3, #48	; 0x30
   10cc8:	001a      	movs	r2, r3
   10cca:	4b0d      	ldr	r3, [pc, #52]	; (10d00 <addM2MRemoteNumber+0x5c>)
   10ccc:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cce:	4b0b      	ldr	r3, [pc, #44]	; (10cfc <addM2MRemoteNumber+0x58>)
   10cd0:	0019      	movs	r1, r3
   10cd2:	2019      	movs	r0, #25
   10cd4:	4b0b      	ldr	r3, [pc, #44]	; (10d04 <addM2MRemoteNumber+0x60>)
   10cd6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10cd8:	4b0b      	ldr	r3, [pc, #44]	; (10d08 <addM2MRemoteNumber+0x64>)
   10cda:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10cdc:	2000      	movs	r0, #0
   10cde:	4b0b      	ldr	r3, [pc, #44]	; (10d0c <addM2MRemoteNumber+0x68>)
   10ce0:	4798      	blx	r3
	saveM2MSettings(false);
   10ce2:	2000      	movs	r0, #0
   10ce4:	4b0a      	ldr	r3, [pc, #40]	; (10d10 <addM2MRemoteNumber+0x6c>)
   10ce6:	4798      	blx	r3
}
   10ce8:	46c0      	nop			; (mov r8, r8)
   10cea:	46bd      	mov	sp, r7
   10cec:	b002      	add	sp, #8
   10cee:	bd80      	pop	{r7, pc}
   10cf0:	20000554 	.word	0x20000554
   10cf4:	20000570 	.word	0x20000570
   10cf8:	00029093 	.word	0x00029093
   10cfc:	20000584 	.word	0x20000584
   10d00:	00028ddd 	.word	0x00028ddd
   10d04:	000239f1 	.word	0x000239f1
   10d08:	00023b99 	.word	0x00023b99
   10d0c:	00010b89 	.word	0x00010b89
   10d10:	00010bd9 	.word	0x00010bd9

00010d14 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d14:	b580      	push	{r7, lr}
   10d16:	b08e      	sub	sp, #56	; 0x38
   10d18:	af00      	add	r7, sp, #0
   10d1a:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d1c:	4b28      	ldr	r3, [pc, #160]	; (10dc0 <getActiveNumber+0xac>)
   10d1e:	789b      	ldrb	r3, [r3, #2]
   10d20:	2b00      	cmp	r3, #0
   10d22:	d02b      	beq.n	10d7c <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d24:	4b27      	ldr	r3, [pc, #156]	; (10dc4 <getActiveNumber+0xb0>)
   10d26:	785b      	ldrb	r3, [r3, #1]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d006      	beq.n	10d3a <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d2c:	4a26      	ldr	r2, [pc, #152]	; (10dc8 <getActiveNumber+0xb4>)
   10d2e:	687b      	ldr	r3, [r7, #4]
   10d30:	0011      	movs	r1, r2
   10d32:	0018      	movs	r0, r3
   10d34:	4b25      	ldr	r3, [pc, #148]	; (10dcc <getActiveNumber+0xb8>)
   10d36:	4798      	blx	r3
   10d38:	e03c      	b.n	10db4 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d3a:	4b25      	ldr	r3, [pc, #148]	; (10dd0 <getActiveNumber+0xbc>)
   10d3c:	223c      	movs	r2, #60	; 0x3c
   10d3e:	2100      	movs	r1, #0
   10d40:	0018      	movs	r0, r3
   10d42:	4b24      	ldr	r3, [pc, #144]	; (10dd4 <getActiveNumber+0xc0>)
   10d44:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d46:	4b1e      	ldr	r3, [pc, #120]	; (10dc0 <getActiveNumber+0xac>)
   10d48:	78db      	ldrb	r3, [r3, #3]
   10d4a:	3309      	adds	r3, #9
   10d4c:	b2db      	uxtb	r3, r3
   10d4e:	4a20      	ldr	r2, [pc, #128]	; (10dd0 <getActiveNumber+0xbc>)
   10d50:	0011      	movs	r1, r2
   10d52:	0018      	movs	r0, r3
   10d54:	4b20      	ldr	r3, [pc, #128]	; (10dd8 <getActiveNumber+0xc4>)
   10d56:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d58:	2320      	movs	r3, #32
   10d5a:	18fa      	adds	r2, r7, r3
   10d5c:	4b1c      	ldr	r3, [pc, #112]	; (10dd0 <getActiveNumber+0xbc>)
   10d5e:	0010      	movs	r0, r2
   10d60:	0019      	movs	r1, r3
   10d62:	2318      	movs	r3, #24
   10d64:	001a      	movs	r2, r3
   10d66:	4b1d      	ldr	r3, [pc, #116]	; (10ddc <getActiveNumber+0xc8>)
   10d68:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d6a:	2320      	movs	r3, #32
   10d6c:	18fb      	adds	r3, r7, r3
   10d6e:	1d1a      	adds	r2, r3, #4
   10d70:	687b      	ldr	r3, [r7, #4]
   10d72:	0011      	movs	r1, r2
   10d74:	0018      	movs	r0, r3
   10d76:	4b15      	ldr	r3, [pc, #84]	; (10dcc <getActiveNumber+0xb8>)
   10d78:	4798      	blx	r3
   10d7a:	e01b      	b.n	10db4 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d7c:	4b14      	ldr	r3, [pc, #80]	; (10dd0 <getActiveNumber+0xbc>)
   10d7e:	223c      	movs	r2, #60	; 0x3c
   10d80:	2100      	movs	r1, #0
   10d82:	0018      	movs	r0, r3
   10d84:	4b13      	ldr	r3, [pc, #76]	; (10dd4 <getActiveNumber+0xc0>)
   10d86:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d88:	4b11      	ldr	r3, [pc, #68]	; (10dd0 <getActiveNumber+0xbc>)
   10d8a:	0019      	movs	r1, r3
   10d8c:	2003      	movs	r0, #3
   10d8e:	4b12      	ldr	r3, [pc, #72]	; (10dd8 <getActiveNumber+0xc4>)
   10d90:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d92:	2308      	movs	r3, #8
   10d94:	18fa      	adds	r2, r7, r3
   10d96:	4b0e      	ldr	r3, [pc, #56]	; (10dd0 <getActiveNumber+0xbc>)
   10d98:	0010      	movs	r0, r2
   10d9a:	0019      	movs	r1, r3
   10d9c:	2318      	movs	r3, #24
   10d9e:	001a      	movs	r2, r3
   10da0:	4b0e      	ldr	r3, [pc, #56]	; (10ddc <getActiveNumber+0xc8>)
   10da2:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10da4:	2308      	movs	r3, #8
   10da6:	18fb      	adds	r3, r7, r3
   10da8:	1d1a      	adds	r2, r3, #4
   10daa:	687b      	ldr	r3, [r7, #4]
   10dac:	0011      	movs	r1, r2
   10dae:	0018      	movs	r0, r3
   10db0:	4b06      	ldr	r3, [pc, #24]	; (10dcc <getActiveNumber+0xb8>)
   10db2:	4798      	blx	r3
	}
	
	return ActiveNo;
   10db4:	687b      	ldr	r3, [r7, #4]
}
   10db6:	0018      	movs	r0, r3
   10db8:	46bd      	mov	sp, r7
   10dba:	b00e      	add	sp, #56	; 0x38
   10dbc:	bd80      	pop	{r7, pc}
   10dbe:	46c0      	nop			; (mov r8, r8)
   10dc0:	20000610 	.word	0x20000610
   10dc4:	20000638 	.word	0x20000638
   10dc8:	2000063c 	.word	0x2000063c
   10dcc:	00029093 	.word	0x00029093
   10dd0:	20000584 	.word	0x20000584
   10dd4:	00028e13 	.word	0x00028e13
   10dd8:	00023afd 	.word	0x00023afd
   10ddc:	00028ddd 	.word	0x00028ddd

00010de0 <checkExists>:
uint8_t checkExists(char *number)
{
   10de0:	b580      	push	{r7, lr}
   10de2:	b08a      	sub	sp, #40	; 0x28
   10de4:	af00      	add	r7, sp, #0
   10de6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10de8:	4b33      	ldr	r3, [pc, #204]	; (10eb8 <checkExists+0xd8>)
   10dea:	789b      	ldrb	r3, [r3, #2]
   10dec:	2b00      	cmp	r3, #0
   10dee:	d039      	beq.n	10e64 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10df0:	2327      	movs	r3, #39	; 0x27
   10df2:	18fb      	adds	r3, r7, r3
   10df4:	2200      	movs	r2, #0
   10df6:	701a      	strb	r2, [r3, #0]
   10df8:	e02d      	b.n	10e56 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10dfa:	4b30      	ldr	r3, [pc, #192]	; (10ebc <checkExists+0xdc>)
   10dfc:	223c      	movs	r2, #60	; 0x3c
   10dfe:	2100      	movs	r1, #0
   10e00:	0018      	movs	r0, r3
   10e02:	4b2f      	ldr	r3, [pc, #188]	; (10ec0 <checkExists+0xe0>)
   10e04:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e06:	2327      	movs	r3, #39	; 0x27
   10e08:	18fb      	adds	r3, r7, r3
   10e0a:	781b      	ldrb	r3, [r3, #0]
   10e0c:	3309      	adds	r3, #9
   10e0e:	b2db      	uxtb	r3, r3
   10e10:	4a2a      	ldr	r2, [pc, #168]	; (10ebc <checkExists+0xdc>)
   10e12:	0011      	movs	r1, r2
   10e14:	0018      	movs	r0, r3
   10e16:	4b2b      	ldr	r3, [pc, #172]	; (10ec4 <checkExists+0xe4>)
   10e18:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e1a:	230c      	movs	r3, #12
   10e1c:	18fa      	adds	r2, r7, r3
   10e1e:	4b27      	ldr	r3, [pc, #156]	; (10ebc <checkExists+0xdc>)
   10e20:	0010      	movs	r0, r2
   10e22:	0019      	movs	r1, r3
   10e24:	2318      	movs	r3, #24
   10e26:	001a      	movs	r2, r3
   10e28:	4b27      	ldr	r3, [pc, #156]	; (10ec8 <checkExists+0xe8>)
   10e2a:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e2c:	230c      	movs	r3, #12
   10e2e:	18fb      	adds	r3, r7, r3
   10e30:	1d1a      	adds	r2, r3, #4
   10e32:	687b      	ldr	r3, [r7, #4]
   10e34:	0011      	movs	r1, r2
   10e36:	0018      	movs	r0, r3
   10e38:	4b24      	ldr	r3, [pc, #144]	; (10ecc <checkExists+0xec>)
   10e3a:	4798      	blx	r3
   10e3c:	1e03      	subs	r3, r0, #0
   10e3e:	d003      	beq.n	10e48 <checkExists+0x68>
			{
				return i;
   10e40:	2327      	movs	r3, #39	; 0x27
   10e42:	18fb      	adds	r3, r7, r3
   10e44:	781b      	ldrb	r3, [r3, #0]
   10e46:	e032      	b.n	10eae <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e48:	2327      	movs	r3, #39	; 0x27
   10e4a:	18fb      	adds	r3, r7, r3
   10e4c:	781a      	ldrb	r2, [r3, #0]
   10e4e:	2327      	movs	r3, #39	; 0x27
   10e50:	18fb      	adds	r3, r7, r3
   10e52:	3201      	adds	r2, #1
   10e54:	701a      	strb	r2, [r3, #0]
   10e56:	4b18      	ldr	r3, [pc, #96]	; (10eb8 <checkExists+0xd8>)
   10e58:	789b      	ldrb	r3, [r3, #2]
   10e5a:	2227      	movs	r2, #39	; 0x27
   10e5c:	18ba      	adds	r2, r7, r2
   10e5e:	7812      	ldrb	r2, [r2, #0]
   10e60:	429a      	cmp	r2, r3
   10e62:	d3ca      	bcc.n	10dfa <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e64:	687b      	ldr	r3, [r7, #4]
   10e66:	0018      	movs	r0, r3
   10e68:	4b19      	ldr	r3, [pc, #100]	; (10ed0 <checkExists+0xf0>)
   10e6a:	4798      	blx	r3
   10e6c:	1e03      	subs	r3, r0, #0
   10e6e:	d001      	beq.n	10e74 <checkExists+0x94>
	{
		return 0xFD;
   10e70:	23fd      	movs	r3, #253	; 0xfd
   10e72:	e01c      	b.n	10eae <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e74:	4b17      	ldr	r3, [pc, #92]	; (10ed4 <checkExists+0xf4>)
   10e76:	789b      	ldrb	r3, [r3, #2]
   10e78:	2b00      	cmp	r3, #0
   10e7a:	d007      	beq.n	10e8c <checkExists+0xac>
   10e7c:	687b      	ldr	r3, [r7, #4]
   10e7e:	0018      	movs	r0, r3
   10e80:	4b15      	ldr	r3, [pc, #84]	; (10ed8 <checkExists+0xf8>)
   10e82:	4798      	blx	r3
   10e84:	1e03      	subs	r3, r0, #0
   10e86:	d001      	beq.n	10e8c <checkExists+0xac>
	{
		return 0xFE;
   10e88:	23fe      	movs	r3, #254	; 0xfe
   10e8a:	e010      	b.n	10eae <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e8c:	4b13      	ldr	r3, [pc, #76]	; (10edc <checkExists+0xfc>)
   10e8e:	78db      	ldrb	r3, [r3, #3]
   10e90:	2b00      	cmp	r3, #0
   10e92:	d00b      	beq.n	10eac <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10e94:	4b0f      	ldr	r3, [pc, #60]	; (10ed4 <checkExists+0xf4>)
   10e96:	791b      	ldrb	r3, [r3, #4]
   10e98:	2b00      	cmp	r3, #0
   10e9a:	d007      	beq.n	10eac <checkExists+0xcc>
   10e9c:	687b      	ldr	r3, [r7, #4]
   10e9e:	0018      	movs	r0, r3
   10ea0:	4b0f      	ldr	r3, [pc, #60]	; (10ee0 <checkExists+0x100>)
   10ea2:	4798      	blx	r3
   10ea4:	1e03      	subs	r3, r0, #0
   10ea6:	d001      	beq.n	10eac <checkExists+0xcc>
		{
			return 0xFE;
   10ea8:	23fe      	movs	r3, #254	; 0xfe
   10eaa:	e000      	b.n	10eae <checkExists+0xce>
		}
	}
	return 0xFF;
   10eac:	23ff      	movs	r3, #255	; 0xff
}
   10eae:	0018      	movs	r0, r3
   10eb0:	46bd      	mov	sp, r7
   10eb2:	b00a      	add	sp, #40	; 0x28
   10eb4:	bd80      	pop	{r7, pc}
   10eb6:	46c0      	nop			; (mov r8, r8)
   10eb8:	20000610 	.word	0x20000610
   10ebc:	20000584 	.word	0x20000584
   10ec0:	00028e13 	.word	0x00028e13
   10ec4:	00023afd 	.word	0x00023afd
   10ec8:	00028ddd 	.word	0x00028ddd
   10ecc:	000290d3 	.word	0x000290d3
   10ed0:	00010a01 	.word	0x00010a01
   10ed4:	20000554 	.word	0x20000554
   10ed8:	00010a49 	.word	0x00010a49
   10edc:	20000628 	.word	0x20000628
   10ee0:	00010a85 	.word	0x00010a85

00010ee4 <addNumber>:

bool addNumber(char *number)
{
   10ee4:	b580      	push	{r7, lr}
   10ee6:	b088      	sub	sp, #32
   10ee8:	af00      	add	r7, sp, #0
   10eea:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10eec:	4b33      	ldr	r3, [pc, #204]	; (10fbc <addNumber+0xd8>)
   10eee:	789a      	ldrb	r2, [r3, #2]
   10ef0:	4b32      	ldr	r3, [pc, #200]	; (10fbc <addNumber+0xd8>)
   10ef2:	785b      	ldrb	r3, [r3, #1]
   10ef4:	429a      	cmp	r2, r3
   10ef6:	d101      	bne.n	10efc <addNumber+0x18>
	{
		return false;
   10ef8:	2300      	movs	r3, #0
   10efa:	e05a      	b.n	10fb2 <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10efc:	687b      	ldr	r3, [r7, #4]
   10efe:	0018      	movs	r0, r3
   10f00:	4b2f      	ldr	r3, [pc, #188]	; (10fc0 <addNumber+0xdc>)
   10f02:	4798      	blx	r3
   10f04:	0003      	movs	r3, r0
   10f06:	2bf0      	cmp	r3, #240	; 0xf0
   10f08:	d952      	bls.n	10fb0 <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f0a:	4b2e      	ldr	r3, [pc, #184]	; (10fc4 <addNumber+0xe0>)
   10f0c:	223c      	movs	r2, #60	; 0x3c
   10f0e:	2100      	movs	r1, #0
   10f10:	0018      	movs	r0, r3
   10f12:	4b2d      	ldr	r3, [pc, #180]	; (10fc8 <addNumber+0xe4>)
   10f14:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f16:	4b29      	ldr	r3, [pc, #164]	; (10fbc <addNumber+0xd8>)
   10f18:	789b      	ldrb	r3, [r3, #2]
   10f1a:	3309      	adds	r3, #9
   10f1c:	b2db      	uxtb	r3, r3
   10f1e:	4a29      	ldr	r2, [pc, #164]	; (10fc4 <addNumber+0xe0>)
   10f20:	0011      	movs	r1, r2
   10f22:	0018      	movs	r0, r3
   10f24:	4b29      	ldr	r3, [pc, #164]	; (10fcc <addNumber+0xe8>)
   10f26:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f28:	2308      	movs	r3, #8
   10f2a:	18fa      	adds	r2, r7, r3
   10f2c:	4b25      	ldr	r3, [pc, #148]	; (10fc4 <addNumber+0xe0>)
   10f2e:	0010      	movs	r0, r2
   10f30:	0019      	movs	r1, r3
   10f32:	2318      	movs	r3, #24
   10f34:	001a      	movs	r2, r3
   10f36:	4b26      	ldr	r3, [pc, #152]	; (10fd0 <addNumber+0xec>)
   10f38:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f3a:	2308      	movs	r3, #8
   10f3c:	18fb      	adds	r3, r7, r3
   10f3e:	3304      	adds	r3, #4
   10f40:	2214      	movs	r2, #20
   10f42:	2100      	movs	r1, #0
   10f44:	0018      	movs	r0, r3
   10f46:	4b20      	ldr	r3, [pc, #128]	; (10fc8 <addNumber+0xe4>)
   10f48:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f4a:	687a      	ldr	r2, [r7, #4]
   10f4c:	2308      	movs	r3, #8
   10f4e:	18fb      	adds	r3, r7, r3
   10f50:	3304      	adds	r3, #4
   10f52:	0011      	movs	r1, r2
   10f54:	0018      	movs	r0, r3
   10f56:	4b1f      	ldr	r3, [pc, #124]	; (10fd4 <addNumber+0xf0>)
   10f58:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f5a:	4a1a      	ldr	r2, [pc, #104]	; (10fc4 <addNumber+0xe0>)
   10f5c:	2308      	movs	r3, #8
   10f5e:	18fb      	adds	r3, r7, r3
   10f60:	0010      	movs	r0, r2
   10f62:	0019      	movs	r1, r3
   10f64:	2318      	movs	r3, #24
   10f66:	001a      	movs	r2, r3
   10f68:	4b19      	ldr	r3, [pc, #100]	; (10fd0 <addNumber+0xec>)
   10f6a:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f6c:	4b13      	ldr	r3, [pc, #76]	; (10fbc <addNumber+0xd8>)
   10f6e:	789b      	ldrb	r3, [r3, #2]
   10f70:	3309      	adds	r3, #9
   10f72:	b2db      	uxtb	r3, r3
   10f74:	4a13      	ldr	r2, [pc, #76]	; (10fc4 <addNumber+0xe0>)
   10f76:	0011      	movs	r1, r2
   10f78:	0018      	movs	r0, r3
   10f7a:	4b17      	ldr	r3, [pc, #92]	; (10fd8 <addNumber+0xf4>)
   10f7c:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f7e:	4b17      	ldr	r3, [pc, #92]	; (10fdc <addNumber+0xf8>)
   10f80:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f82:	4b0e      	ldr	r3, [pc, #56]	; (10fbc <addNumber+0xd8>)
   10f84:	789b      	ldrb	r3, [r3, #2]
   10f86:	3301      	adds	r3, #1
   10f88:	b2da      	uxtb	r2, r3
   10f8a:	4b0c      	ldr	r3, [pc, #48]	; (10fbc <addNumber+0xd8>)
   10f8c:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f8e:	4a0d      	ldr	r2, [pc, #52]	; (10fc4 <addNumber+0xe0>)
   10f90:	4b0a      	ldr	r3, [pc, #40]	; (10fbc <addNumber+0xd8>)
   10f92:	0010      	movs	r0, r2
   10f94:	0019      	movs	r1, r3
   10f96:	2308      	movs	r3, #8
   10f98:	001a      	movs	r2, r3
   10f9a:	4b0d      	ldr	r3, [pc, #52]	; (10fd0 <addNumber+0xec>)
   10f9c:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10f9e:	4b09      	ldr	r3, [pc, #36]	; (10fc4 <addNumber+0xe0>)
   10fa0:	0019      	movs	r1, r3
   10fa2:	2008      	movs	r0, #8
   10fa4:	4b0c      	ldr	r3, [pc, #48]	; (10fd8 <addNumber+0xf4>)
   10fa6:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fa8:	4b0c      	ldr	r3, [pc, #48]	; (10fdc <addNumber+0xf8>)
   10faa:	4798      	blx	r3
			
			return true;
   10fac:	2301      	movs	r3, #1
   10fae:	e000      	b.n	10fb2 <addNumber+0xce>
		}
	}
	return false;
   10fb0:	2300      	movs	r3, #0
}
   10fb2:	0018      	movs	r0, r3
   10fb4:	46bd      	mov	sp, r7
   10fb6:	b008      	add	sp, #32
   10fb8:	bd80      	pop	{r7, pc}
   10fba:	46c0      	nop			; (mov r8, r8)
   10fbc:	20000610 	.word	0x20000610
   10fc0:	00010de1 	.word	0x00010de1
   10fc4:	20000584 	.word	0x20000584
   10fc8:	00028e13 	.word	0x00028e13
   10fcc:	00023afd 	.word	0x00023afd
   10fd0:	00028ddd 	.word	0x00028ddd
   10fd4:	00029093 	.word	0x00029093
   10fd8:	000239f1 	.word	0x000239f1
   10fdc:	00023b99 	.word	0x00023b99

00010fe0 <removeNumber>:

bool removeNumber(char *numer)
{
   10fe0:	b590      	push	{r4, r7, lr}
   10fe2:	b085      	sub	sp, #20
   10fe4:	af00      	add	r7, sp, #0
   10fe6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10fe8:	4b3d      	ldr	r3, [pc, #244]	; (110e0 <removeNumber+0x100>)
   10fea:	789b      	ldrb	r3, [r3, #2]
   10fec:	2b01      	cmp	r3, #1
   10fee:	d801      	bhi.n	10ff4 <removeNumber+0x14>
	{
		return false;
   10ff0:	2300      	movs	r3, #0
   10ff2:	e071      	b.n	110d8 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   10ff4:	230e      	movs	r3, #14
   10ff6:	18fc      	adds	r4, r7, r3
   10ff8:	687b      	ldr	r3, [r7, #4]
   10ffa:	0018      	movs	r0, r3
   10ffc:	4b39      	ldr	r3, [pc, #228]	; (110e4 <removeNumber+0x104>)
   10ffe:	4798      	blx	r3
   11000:	0003      	movs	r3, r0
   11002:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   11004:	4b36      	ldr	r3, [pc, #216]	; (110e0 <removeNumber+0x100>)
   11006:	785b      	ldrb	r3, [r3, #1]
   11008:	220e      	movs	r2, #14
   1100a:	18ba      	adds	r2, r7, r2
   1100c:	7812      	ldrb	r2, [r2, #0]
   1100e:	429a      	cmp	r2, r3
   11010:	d261      	bcs.n	110d6 <removeNumber+0xf6>
   11012:	4b33      	ldr	r3, [pc, #204]	; (110e0 <removeNumber+0x100>)
   11014:	78db      	ldrb	r3, [r3, #3]
   11016:	220e      	movs	r2, #14
   11018:	18ba      	adds	r2, r7, r2
   1101a:	7812      	ldrb	r2, [r2, #0]
   1101c:	429a      	cmp	r2, r3
   1101e:	d05a      	beq.n	110d6 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11020:	230f      	movs	r3, #15
   11022:	18fb      	adds	r3, r7, r3
   11024:	220e      	movs	r2, #14
   11026:	18ba      	adds	r2, r7, r2
   11028:	7812      	ldrb	r2, [r2, #0]
   1102a:	701a      	strb	r2, [r3, #0]
   1102c:	e022      	b.n	11074 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   1102e:	4b2e      	ldr	r3, [pc, #184]	; (110e8 <removeNumber+0x108>)
   11030:	223c      	movs	r2, #60	; 0x3c
   11032:	2100      	movs	r1, #0
   11034:	0018      	movs	r0, r3
   11036:	4b2d      	ldr	r3, [pc, #180]	; (110ec <removeNumber+0x10c>)
   11038:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   1103a:	230f      	movs	r3, #15
   1103c:	18fb      	adds	r3, r7, r3
   1103e:	781b      	ldrb	r3, [r3, #0]
   11040:	330a      	adds	r3, #10
   11042:	b2db      	uxtb	r3, r3
   11044:	4a28      	ldr	r2, [pc, #160]	; (110e8 <removeNumber+0x108>)
   11046:	0011      	movs	r1, r2
   11048:	0018      	movs	r0, r3
   1104a:	4b29      	ldr	r3, [pc, #164]	; (110f0 <removeNumber+0x110>)
   1104c:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1104e:	230f      	movs	r3, #15
   11050:	18fb      	adds	r3, r7, r3
   11052:	781b      	ldrb	r3, [r3, #0]
   11054:	3309      	adds	r3, #9
   11056:	b2db      	uxtb	r3, r3
   11058:	4a23      	ldr	r2, [pc, #140]	; (110e8 <removeNumber+0x108>)
   1105a:	0011      	movs	r1, r2
   1105c:	0018      	movs	r0, r3
   1105e:	4b25      	ldr	r3, [pc, #148]	; (110f4 <removeNumber+0x114>)
   11060:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   11062:	4b25      	ldr	r3, [pc, #148]	; (110f8 <removeNumber+0x118>)
   11064:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11066:	230f      	movs	r3, #15
   11068:	18fb      	adds	r3, r7, r3
   1106a:	781a      	ldrb	r2, [r3, #0]
   1106c:	230f      	movs	r3, #15
   1106e:	18fb      	adds	r3, r7, r3
   11070:	3201      	adds	r2, #1
   11072:	701a      	strb	r2, [r3, #0]
   11074:	230f      	movs	r3, #15
   11076:	18fb      	adds	r3, r7, r3
   11078:	781a      	ldrb	r2, [r3, #0]
   1107a:	4b19      	ldr	r3, [pc, #100]	; (110e0 <removeNumber+0x100>)
   1107c:	789b      	ldrb	r3, [r3, #2]
   1107e:	3b01      	subs	r3, #1
   11080:	429a      	cmp	r2, r3
   11082:	dbd4      	blt.n	1102e <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   11084:	4b16      	ldr	r3, [pc, #88]	; (110e0 <removeNumber+0x100>)
   11086:	789b      	ldrb	r3, [r3, #2]
   11088:	3b01      	subs	r3, #1
   1108a:	b2da      	uxtb	r2, r3
   1108c:	4b14      	ldr	r3, [pc, #80]	; (110e0 <removeNumber+0x100>)
   1108e:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   11090:	4b13      	ldr	r3, [pc, #76]	; (110e0 <removeNumber+0x100>)
   11092:	791b      	ldrb	r3, [r3, #4]
   11094:	220e      	movs	r2, #14
   11096:	18ba      	adds	r2, r7, r2
   11098:	7812      	ldrb	r2, [r2, #0]
   1109a:	429a      	cmp	r2, r3
   1109c:	d007      	beq.n	110ae <removeNumber+0xce>
   1109e:	230e      	movs	r3, #14
   110a0:	18fb      	adds	r3, r7, r3
   110a2:	781a      	ldrb	r2, [r3, #0]
   110a4:	4b0e      	ldr	r3, [pc, #56]	; (110e0 <removeNumber+0x100>)
   110a6:	789b      	ldrb	r3, [r3, #2]
   110a8:	3b01      	subs	r3, #1
   110aa:	429a      	cmp	r2, r3
   110ac:	dd02      	ble.n	110b4 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110ae:	4b0c      	ldr	r3, [pc, #48]	; (110e0 <removeNumber+0x100>)
   110b0:	2201      	movs	r2, #1
   110b2:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110b4:	4a0c      	ldr	r2, [pc, #48]	; (110e8 <removeNumber+0x108>)
   110b6:	4b0a      	ldr	r3, [pc, #40]	; (110e0 <removeNumber+0x100>)
   110b8:	0010      	movs	r0, r2
   110ba:	0019      	movs	r1, r3
   110bc:	2308      	movs	r3, #8
   110be:	001a      	movs	r2, r3
   110c0:	4b0e      	ldr	r3, [pc, #56]	; (110fc <removeNumber+0x11c>)
   110c2:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110c4:	4b08      	ldr	r3, [pc, #32]	; (110e8 <removeNumber+0x108>)
   110c6:	0019      	movs	r1, r3
   110c8:	2008      	movs	r0, #8
   110ca:	4b0a      	ldr	r3, [pc, #40]	; (110f4 <removeNumber+0x114>)
   110cc:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110ce:	4b0a      	ldr	r3, [pc, #40]	; (110f8 <removeNumber+0x118>)
   110d0:	4798      	blx	r3
			return true;
   110d2:	2301      	movs	r3, #1
   110d4:	e000      	b.n	110d8 <removeNumber+0xf8>
		}
	}
	return false;
   110d6:	2300      	movs	r3, #0
}
   110d8:	0018      	movs	r0, r3
   110da:	46bd      	mov	sp, r7
   110dc:	b005      	add	sp, #20
   110de:	bd90      	pop	{r4, r7, pc}
   110e0:	20000610 	.word	0x20000610
   110e4:	00010de1 	.word	0x00010de1
   110e8:	20000584 	.word	0x20000584
   110ec:	00028e13 	.word	0x00028e13
   110f0:	00023afd 	.word	0x00023afd
   110f4:	000239f1 	.word	0x000239f1
   110f8:	00023b99 	.word	0x00023b99
   110fc:	00028ddd 	.word	0x00028ddd

00011100 <clearNumbers>:

void clearNumbers(bool admin)
{
   11100:	b580      	push	{r7, lr}
   11102:	b082      	sub	sp, #8
   11104:	af00      	add	r7, sp, #0
   11106:	0002      	movs	r2, r0
   11108:	1dfb      	adds	r3, r7, #7
   1110a:	701a      	strb	r2, [r3, #0]
	if (admin)
   1110c:	1dfb      	adds	r3, r7, #7
   1110e:	781b      	ldrb	r3, [r3, #0]
   11110:	2b00      	cmp	r3, #0
   11112:	d003      	beq.n	1111c <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   11114:	4b28      	ldr	r3, [pc, #160]	; (111b8 <clearNumbers+0xb8>)
   11116:	2200      	movs	r2, #0
   11118:	709a      	strb	r2, [r3, #2]
   1111a:	e018      	b.n	1114e <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   1111c:	4b27      	ldr	r3, [pc, #156]	; (111bc <clearNumbers+0xbc>)
   1111e:	223c      	movs	r2, #60	; 0x3c
   11120:	2100      	movs	r1, #0
   11122:	0018      	movs	r0, r3
   11124:	4b26      	ldr	r3, [pc, #152]	; (111c0 <clearNumbers+0xc0>)
   11126:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11128:	4b23      	ldr	r3, [pc, #140]	; (111b8 <clearNumbers+0xb8>)
   1112a:	78db      	ldrb	r3, [r3, #3]
   1112c:	3309      	adds	r3, #9
   1112e:	b2db      	uxtb	r3, r3
   11130:	4a22      	ldr	r2, [pc, #136]	; (111bc <clearNumbers+0xbc>)
   11132:	0011      	movs	r1, r2
   11134:	0018      	movs	r0, r3
   11136:	4b23      	ldr	r3, [pc, #140]	; (111c4 <clearNumbers+0xc4>)
   11138:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   1113a:	4b20      	ldr	r3, [pc, #128]	; (111bc <clearNumbers+0xbc>)
   1113c:	0019      	movs	r1, r3
   1113e:	2009      	movs	r0, #9
   11140:	4b21      	ldr	r3, [pc, #132]	; (111c8 <clearNumbers+0xc8>)
   11142:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11144:	4b21      	ldr	r3, [pc, #132]	; (111cc <clearNumbers+0xcc>)
   11146:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11148:	4b1b      	ldr	r3, [pc, #108]	; (111b8 <clearNumbers+0xb8>)
   1114a:	2201      	movs	r2, #1
   1114c:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   1114e:	4b1a      	ldr	r3, [pc, #104]	; (111b8 <clearNumbers+0xb8>)
   11150:	2200      	movs	r2, #0
   11152:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11154:	4b18      	ldr	r3, [pc, #96]	; (111b8 <clearNumbers+0xb8>)
   11156:	2201      	movs	r2, #1
   11158:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   1115a:	4a18      	ldr	r2, [pc, #96]	; (111bc <clearNumbers+0xbc>)
   1115c:	4b16      	ldr	r3, [pc, #88]	; (111b8 <clearNumbers+0xb8>)
   1115e:	0010      	movs	r0, r2
   11160:	0019      	movs	r1, r3
   11162:	2308      	movs	r3, #8
   11164:	001a      	movs	r2, r3
   11166:	4b1a      	ldr	r3, [pc, #104]	; (111d0 <clearNumbers+0xd0>)
   11168:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   1116a:	4b13      	ldr	r3, [pc, #76]	; (111b8 <clearNumbers+0xb8>)
   1116c:	2200      	movs	r2, #0
   1116e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11170:	4b11      	ldr	r3, [pc, #68]	; (111b8 <clearNumbers+0xb8>)
   11172:	2201      	movs	r2, #1
   11174:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11176:	4b11      	ldr	r3, [pc, #68]	; (111bc <clearNumbers+0xbc>)
   11178:	0019      	movs	r1, r3
   1117a:	2008      	movs	r0, #8
   1117c:	4b12      	ldr	r3, [pc, #72]	; (111c8 <clearNumbers+0xc8>)
   1117e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11180:	4b12      	ldr	r3, [pc, #72]	; (111cc <clearNumbers+0xcc>)
   11182:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   11184:	2000      	movs	r0, #0
   11186:	4b13      	ldr	r3, [pc, #76]	; (111d4 <clearNumbers+0xd4>)
   11188:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   1118a:	4b13      	ldr	r3, [pc, #76]	; (111d8 <clearNumbers+0xd8>)
   1118c:	2200      	movs	r2, #0
   1118e:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11190:	4a0a      	ldr	r2, [pc, #40]	; (111bc <clearNumbers+0xbc>)
   11192:	4b11      	ldr	r3, [pc, #68]	; (111d8 <clearNumbers+0xd8>)
   11194:	0010      	movs	r0, r2
   11196:	0019      	movs	r1, r3
   11198:	2318      	movs	r3, #24
   1119a:	001a      	movs	r2, r3
   1119c:	4b0c      	ldr	r3, [pc, #48]	; (111d0 <clearNumbers+0xd0>)
   1119e:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111a0:	4b06      	ldr	r3, [pc, #24]	; (111bc <clearNumbers+0xbc>)
   111a2:	0019      	movs	r1, r3
   111a4:	2018      	movs	r0, #24
   111a6:	4b08      	ldr	r3, [pc, #32]	; (111c8 <clearNumbers+0xc8>)
   111a8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111aa:	4b08      	ldr	r3, [pc, #32]	; (111cc <clearNumbers+0xcc>)
   111ac:	4798      	blx	r3
}
   111ae:	46c0      	nop			; (mov r8, r8)
   111b0:	46bd      	mov	sp, r7
   111b2:	b002      	add	sp, #8
   111b4:	bd80      	pop	{r7, pc}
   111b6:	46c0      	nop			; (mov r8, r8)
   111b8:	20000610 	.word	0x20000610
   111bc:	20000584 	.word	0x20000584
   111c0:	00028e13 	.word	0x00028e13
   111c4:	00023afd 	.word	0x00023afd
   111c8:	000239f1 	.word	0x000239f1
   111cc:	00023b99 	.word	0x00023b99
   111d0:	00028ddd 	.word	0x00028ddd
   111d4:	000111dd 	.word	0x000111dd
   111d8:	20000638 	.word	0x20000638

000111dc <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111dc:	b580      	push	{r7, lr}
   111de:	b082      	sub	sp, #8
   111e0:	af00      	add	r7, sp, #0
   111e2:	0002      	movs	r2, r0
   111e4:	1dfb      	adds	r3, r7, #7
   111e6:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111e8:	1dfb      	adds	r3, r7, #7
   111ea:	781a      	ldrb	r2, [r3, #0]
   111ec:	4b0a      	ldr	r3, [pc, #40]	; (11218 <saveAlterNumberSetting+0x3c>)
   111ee:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111f0:	4a0a      	ldr	r2, [pc, #40]	; (1121c <saveAlterNumberSetting+0x40>)
   111f2:	4b09      	ldr	r3, [pc, #36]	; (11218 <saveAlterNumberSetting+0x3c>)
   111f4:	0010      	movs	r0, r2
   111f6:	0019      	movs	r1, r3
   111f8:	2318      	movs	r3, #24
   111fa:	001a      	movs	r2, r3
   111fc:	4b08      	ldr	r3, [pc, #32]	; (11220 <saveAlterNumberSetting+0x44>)
   111fe:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11200:	4b06      	ldr	r3, [pc, #24]	; (1121c <saveAlterNumberSetting+0x40>)
   11202:	0019      	movs	r1, r3
   11204:	2018      	movs	r0, #24
   11206:	4b07      	ldr	r3, [pc, #28]	; (11224 <saveAlterNumberSetting+0x48>)
   11208:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1120a:	4b07      	ldr	r3, [pc, #28]	; (11228 <saveAlterNumberSetting+0x4c>)
   1120c:	4798      	blx	r3
}
   1120e:	46c0      	nop			; (mov r8, r8)
   11210:	46bd      	mov	sp, r7
   11212:	b002      	add	sp, #8
   11214:	bd80      	pop	{r7, pc}
   11216:	46c0      	nop			; (mov r8, r8)
   11218:	20000638 	.word	0x20000638
   1121c:	20000584 	.word	0x20000584
   11220:	00028ddd 	.word	0x00028ddd
   11224:	000239f1 	.word	0x000239f1
   11228:	00023b99 	.word	0x00023b99

0001122c <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   1122c:	b580      	push	{r7, lr}
   1122e:	b082      	sub	sp, #8
   11230:	af00      	add	r7, sp, #0
   11232:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   11234:	4b11      	ldr	r3, [pc, #68]	; (1127c <addAlternateNumber+0x50>)
   11236:	789b      	ldrb	r3, [r3, #2]
   11238:	2b00      	cmp	r3, #0
   1123a:	d019      	beq.n	11270 <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   1123c:	4b10      	ldr	r3, [pc, #64]	; (11280 <addAlternateNumber+0x54>)
   1123e:	2201      	movs	r2, #1
   11240:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   11242:	687a      	ldr	r2, [r7, #4]
   11244:	4b0f      	ldr	r3, [pc, #60]	; (11284 <addAlternateNumber+0x58>)
   11246:	0011      	movs	r1, r2
   11248:	0018      	movs	r0, r3
   1124a:	4b0f      	ldr	r3, [pc, #60]	; (11288 <addAlternateNumber+0x5c>)
   1124c:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1124e:	4a0f      	ldr	r2, [pc, #60]	; (1128c <addAlternateNumber+0x60>)
   11250:	4b0b      	ldr	r3, [pc, #44]	; (11280 <addAlternateNumber+0x54>)
   11252:	0010      	movs	r0, r2
   11254:	0019      	movs	r1, r3
   11256:	2318      	movs	r3, #24
   11258:	001a      	movs	r2, r3
   1125a:	4b0d      	ldr	r3, [pc, #52]	; (11290 <addAlternateNumber+0x64>)
   1125c:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1125e:	4b0b      	ldr	r3, [pc, #44]	; (1128c <addAlternateNumber+0x60>)
   11260:	0019      	movs	r1, r3
   11262:	2018      	movs	r0, #24
   11264:	4b0b      	ldr	r3, [pc, #44]	; (11294 <addAlternateNumber+0x68>)
   11266:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11268:	4b0b      	ldr	r3, [pc, #44]	; (11298 <addAlternateNumber+0x6c>)
   1126a:	4798      	blx	r3
		
		return true;
   1126c:	2301      	movs	r3, #1
   1126e:	e000      	b.n	11272 <addAlternateNumber+0x46>
	}
	return false;
   11270:	2300      	movs	r3, #0
}
   11272:	0018      	movs	r0, r3
   11274:	46bd      	mov	sp, r7
   11276:	b002      	add	sp, #8
   11278:	bd80      	pop	{r7, pc}
   1127a:	46c0      	nop			; (mov r8, r8)
   1127c:	20000610 	.word	0x20000610
   11280:	20000638 	.word	0x20000638
   11284:	2000063c 	.word	0x2000063c
   11288:	00029093 	.word	0x00029093
   1128c:	20000584 	.word	0x20000584
   11290:	00028ddd 	.word	0x00028ddd
   11294:	000239f1 	.word	0x000239f1
   11298:	00023b99 	.word	0x00023b99

0001129c <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   1129c:	b580      	push	{r7, lr}
   1129e:	b082      	sub	sp, #8
   112a0:	af00      	add	r7, sp, #0
   112a2:	0002      	movs	r2, r0
   112a4:	1dfb      	adds	r3, r7, #7
   112a6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112a8:	1dfb      	adds	r3, r7, #7
   112aa:	781a      	ldrb	r2, [r3, #0]
   112ac:	4b09      	ldr	r3, [pc, #36]	; (112d4 <saveAutoStartSettings+0x38>)
   112ae:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112b0:	4908      	ldr	r1, [pc, #32]	; (112d4 <saveAutoStartSettings+0x38>)
   112b2:	4b09      	ldr	r3, [pc, #36]	; (112d8 <saveAutoStartSettings+0x3c>)
   112b4:	2230      	movs	r2, #48	; 0x30
   112b6:	0018      	movs	r0, r3
   112b8:	4b08      	ldr	r3, [pc, #32]	; (112dc <saveAutoStartSettings+0x40>)
   112ba:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112bc:	4b06      	ldr	r3, [pc, #24]	; (112d8 <saveAutoStartSettings+0x3c>)
   112be:	0019      	movs	r1, r3
   112c0:	201a      	movs	r0, #26
   112c2:	4b07      	ldr	r3, [pc, #28]	; (112e0 <saveAutoStartSettings+0x44>)
   112c4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112c6:	4b07      	ldr	r3, [pc, #28]	; (112e4 <saveAutoStartSettings+0x48>)
   112c8:	4798      	blx	r3
}
   112ca:	46c0      	nop			; (mov r8, r8)
   112cc:	46bd      	mov	sp, r7
   112ce:	b002      	add	sp, #8
   112d0:	bd80      	pop	{r7, pc}
   112d2:	46c0      	nop			; (mov r8, r8)
   112d4:	20000650 	.word	0x20000650
   112d8:	20000584 	.word	0x20000584
   112dc:	00028ddd 	.word	0x00028ddd
   112e0:	000239f1 	.word	0x000239f1
   112e4:	00023b99 	.word	0x00023b99

000112e8 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112e8:	b580      	push	{r7, lr}
   112ea:	b082      	sub	sp, #8
   112ec:	af00      	add	r7, sp, #0
   112ee:	0002      	movs	r2, r0
   112f0:	1dbb      	adds	r3, r7, #6
   112f2:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   112f4:	4b0a      	ldr	r3, [pc, #40]	; (11320 <saveAutoStartTimeSettings+0x38>)
   112f6:	1dba      	adds	r2, r7, #6
   112f8:	8812      	ldrh	r2, [r2, #0]
   112fa:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112fc:	4908      	ldr	r1, [pc, #32]	; (11320 <saveAutoStartTimeSettings+0x38>)
   112fe:	4b09      	ldr	r3, [pc, #36]	; (11324 <saveAutoStartTimeSettings+0x3c>)
   11300:	2230      	movs	r2, #48	; 0x30
   11302:	0018      	movs	r0, r3
   11304:	4b08      	ldr	r3, [pc, #32]	; (11328 <saveAutoStartTimeSettings+0x40>)
   11306:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11308:	4b06      	ldr	r3, [pc, #24]	; (11324 <saveAutoStartTimeSettings+0x3c>)
   1130a:	0019      	movs	r1, r3
   1130c:	201a      	movs	r0, #26
   1130e:	4b07      	ldr	r3, [pc, #28]	; (1132c <saveAutoStartTimeSettings+0x44>)
   11310:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11312:	4b07      	ldr	r3, [pc, #28]	; (11330 <saveAutoStartTimeSettings+0x48>)
   11314:	4798      	blx	r3
}
   11316:	46c0      	nop			; (mov r8, r8)
   11318:	46bd      	mov	sp, r7
   1131a:	b002      	add	sp, #8
   1131c:	bd80      	pop	{r7, pc}
   1131e:	46c0      	nop			; (mov r8, r8)
   11320:	20000650 	.word	0x20000650
   11324:	20000584 	.word	0x20000584
   11328:	00028ddd 	.word	0x00028ddd
   1132c:	000239f1 	.word	0x000239f1
   11330:	00023b99 	.word	0x00023b99

00011334 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   11334:	b580      	push	{r7, lr}
   11336:	b082      	sub	sp, #8
   11338:	af00      	add	r7, sp, #0
   1133a:	0002      	movs	r2, r0
   1133c:	1dfb      	adds	r3, r7, #7
   1133e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   11340:	4b0a      	ldr	r3, [pc, #40]	; (1136c <saveDNDSettings+0x38>)
   11342:	1dfa      	adds	r2, r7, #7
   11344:	7812      	ldrb	r2, [r2, #0]
   11346:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11348:	4908      	ldr	r1, [pc, #32]	; (1136c <saveDNDSettings+0x38>)
   1134a:	4b09      	ldr	r3, [pc, #36]	; (11370 <saveDNDSettings+0x3c>)
   1134c:	2230      	movs	r2, #48	; 0x30
   1134e:	0018      	movs	r0, r3
   11350:	4b08      	ldr	r3, [pc, #32]	; (11374 <saveDNDSettings+0x40>)
   11352:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11354:	4b06      	ldr	r3, [pc, #24]	; (11370 <saveDNDSettings+0x3c>)
   11356:	0019      	movs	r1, r3
   11358:	201a      	movs	r0, #26
   1135a:	4b07      	ldr	r3, [pc, #28]	; (11378 <saveDNDSettings+0x44>)
   1135c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1135e:	4b07      	ldr	r3, [pc, #28]	; (1137c <saveDNDSettings+0x48>)
   11360:	4798      	blx	r3
}
   11362:	46c0      	nop			; (mov r8, r8)
   11364:	46bd      	mov	sp, r7
   11366:	b002      	add	sp, #8
   11368:	bd80      	pop	{r7, pc}
   1136a:	46c0      	nop			; (mov r8, r8)
   1136c:	20000650 	.word	0x20000650
   11370:	20000584 	.word	0x20000584
   11374:	00028ddd 	.word	0x00028ddd
   11378:	000239f1 	.word	0x000239f1
   1137c:	00023b99 	.word	0x00023b99

00011380 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   11380:	b580      	push	{r7, lr}
   11382:	b082      	sub	sp, #8
   11384:	af00      	add	r7, sp, #0
   11386:	0002      	movs	r2, r0
   11388:	1dfb      	adds	r3, r7, #7
   1138a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   1138c:	4b0a      	ldr	r3, [pc, #40]	; (113b8 <saveResponseSettings+0x38>)
   1138e:	1dfa      	adds	r2, r7, #7
   11390:	7812      	ldrb	r2, [r2, #0]
   11392:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11394:	4908      	ldr	r1, [pc, #32]	; (113b8 <saveResponseSettings+0x38>)
   11396:	4b09      	ldr	r3, [pc, #36]	; (113bc <saveResponseSettings+0x3c>)
   11398:	2230      	movs	r2, #48	; 0x30
   1139a:	0018      	movs	r0, r3
   1139c:	4b08      	ldr	r3, [pc, #32]	; (113c0 <saveResponseSettings+0x40>)
   1139e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113a0:	4b06      	ldr	r3, [pc, #24]	; (113bc <saveResponseSettings+0x3c>)
   113a2:	0019      	movs	r1, r3
   113a4:	201a      	movs	r0, #26
   113a6:	4b07      	ldr	r3, [pc, #28]	; (113c4 <saveResponseSettings+0x44>)
   113a8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113aa:	4b07      	ldr	r3, [pc, #28]	; (113c8 <saveResponseSettings+0x48>)
   113ac:	4798      	blx	r3
}
   113ae:	46c0      	nop			; (mov r8, r8)
   113b0:	46bd      	mov	sp, r7
   113b2:	b002      	add	sp, #8
   113b4:	bd80      	pop	{r7, pc}
   113b6:	46c0      	nop			; (mov r8, r8)
   113b8:	20000650 	.word	0x20000650
   113bc:	20000584 	.word	0x20000584
   113c0:	00028ddd 	.word	0x00028ddd
   113c4:	000239f1 	.word	0x000239f1
   113c8:	00023b99 	.word	0x00023b99

000113cc <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113cc:	b5b0      	push	{r4, r5, r7, lr}
   113ce:	b082      	sub	sp, #8
   113d0:	af00      	add	r7, sp, #0
   113d2:	0005      	movs	r5, r0
   113d4:	000c      	movs	r4, r1
   113d6:	0010      	movs	r0, r2
   113d8:	0019      	movs	r1, r3
   113da:	1dfb      	adds	r3, r7, #7
   113dc:	1c2a      	adds	r2, r5, #0
   113de:	701a      	strb	r2, [r3, #0]
   113e0:	1dbb      	adds	r3, r7, #6
   113e2:	1c22      	adds	r2, r4, #0
   113e4:	701a      	strb	r2, [r3, #0]
   113e6:	1d7b      	adds	r3, r7, #5
   113e8:	1c02      	adds	r2, r0, #0
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	1d3b      	adds	r3, r7, #4
   113ee:	1c0a      	adds	r2, r1, #0
   113f0:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113f2:	1dfb      	adds	r3, r7, #7
   113f4:	781a      	ldrb	r2, [r3, #0]
   113f6:	4b14      	ldr	r3, [pc, #80]	; (11448 <saveNoCallSettings+0x7c>)
   113f8:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   113fa:	4b13      	ldr	r3, [pc, #76]	; (11448 <saveNoCallSettings+0x7c>)
   113fc:	7a5b      	ldrb	r3, [r3, #9]
   113fe:	2b00      	cmp	r3, #0
   11400:	d010      	beq.n	11424 <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   11402:	4b11      	ldr	r3, [pc, #68]	; (11448 <saveNoCallSettings+0x7c>)
   11404:	1dba      	adds	r2, r7, #6
   11406:	7812      	ldrb	r2, [r2, #0]
   11408:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   1140a:	4b0f      	ldr	r3, [pc, #60]	; (11448 <saveNoCallSettings+0x7c>)
   1140c:	1d7a      	adds	r2, r7, #5
   1140e:	7812      	ldrb	r2, [r2, #0]
   11410:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   11412:	4b0d      	ldr	r3, [pc, #52]	; (11448 <saveNoCallSettings+0x7c>)
   11414:	1d3a      	adds	r2, r7, #4
   11416:	7812      	ldrb	r2, [r2, #0]
   11418:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   1141a:	4b0b      	ldr	r3, [pc, #44]	; (11448 <saveNoCallSettings+0x7c>)
   1141c:	2218      	movs	r2, #24
   1141e:	18ba      	adds	r2, r7, r2
   11420:	7812      	ldrb	r2, [r2, #0]
   11422:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11424:	4908      	ldr	r1, [pc, #32]	; (11448 <saveNoCallSettings+0x7c>)
   11426:	4b09      	ldr	r3, [pc, #36]	; (1144c <saveNoCallSettings+0x80>)
   11428:	2230      	movs	r2, #48	; 0x30
   1142a:	0018      	movs	r0, r3
   1142c:	4b08      	ldr	r3, [pc, #32]	; (11450 <saveNoCallSettings+0x84>)
   1142e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11430:	4b06      	ldr	r3, [pc, #24]	; (1144c <saveNoCallSettings+0x80>)
   11432:	0019      	movs	r1, r3
   11434:	201a      	movs	r0, #26
   11436:	4b07      	ldr	r3, [pc, #28]	; (11454 <saveNoCallSettings+0x88>)
   11438:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1143a:	4b07      	ldr	r3, [pc, #28]	; (11458 <saveNoCallSettings+0x8c>)
   1143c:	4798      	blx	r3
}
   1143e:	46c0      	nop			; (mov r8, r8)
   11440:	46bd      	mov	sp, r7
   11442:	b002      	add	sp, #8
   11444:	bdb0      	pop	{r4, r5, r7, pc}
   11446:	46c0      	nop			; (mov r8, r8)
   11448:	20000650 	.word	0x20000650
   1144c:	20000584 	.word	0x20000584
   11450:	00028ddd 	.word	0x00028ddd
   11454:	000239f1 	.word	0x000239f1
   11458:	00023b99 	.word	0x00023b99

0001145c <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   1145c:	b580      	push	{r7, lr}
   1145e:	b082      	sub	sp, #8
   11460:	af00      	add	r7, sp, #0
   11462:	0002      	movs	r2, r0
   11464:	1dfb      	adds	r3, r7, #7
   11466:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11468:	1dfb      	adds	r3, r7, #7
   1146a:	781a      	ldrb	r2, [r3, #0]
   1146c:	4b09      	ldr	r3, [pc, #36]	; (11494 <saveWaterBypassSettings+0x38>)
   1146e:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11470:	4908      	ldr	r1, [pc, #32]	; (11494 <saveWaterBypassSettings+0x38>)
   11472:	4b09      	ldr	r3, [pc, #36]	; (11498 <saveWaterBypassSettings+0x3c>)
   11474:	2230      	movs	r2, #48	; 0x30
   11476:	0018      	movs	r0, r3
   11478:	4b08      	ldr	r3, [pc, #32]	; (1149c <saveWaterBypassSettings+0x40>)
   1147a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1147c:	4b06      	ldr	r3, [pc, #24]	; (11498 <saveWaterBypassSettings+0x3c>)
   1147e:	0019      	movs	r1, r3
   11480:	201a      	movs	r0, #26
   11482:	4b07      	ldr	r3, [pc, #28]	; (114a0 <saveWaterBypassSettings+0x44>)
   11484:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11486:	4b07      	ldr	r3, [pc, #28]	; (114a4 <saveWaterBypassSettings+0x48>)
   11488:	4798      	blx	r3
}
   1148a:	46c0      	nop			; (mov r8, r8)
   1148c:	46bd      	mov	sp, r7
   1148e:	b002      	add	sp, #8
   11490:	bd80      	pop	{r7, pc}
   11492:	46c0      	nop			; (mov r8, r8)
   11494:	20000650 	.word	0x20000650
   11498:	20000584 	.word	0x20000584
   1149c:	00028ddd 	.word	0x00028ddd
   114a0:	000239f1 	.word	0x000239f1
   114a4:	00023b99 	.word	0x00023b99

000114a8 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114a8:	b580      	push	{r7, lr}
   114aa:	b082      	sub	sp, #8
   114ac:	af00      	add	r7, sp, #0
   114ae:	0002      	movs	r2, r0
   114b0:	1dfb      	adds	r3, r7, #7
   114b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114b4:	1dfb      	adds	r3, r7, #7
   114b6:	781a      	ldrb	r2, [r3, #0]
   114b8:	4b09      	ldr	r3, [pc, #36]	; (114e0 <savePreventOverFlowSettings+0x38>)
   114ba:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114bc:	4908      	ldr	r1, [pc, #32]	; (114e0 <savePreventOverFlowSettings+0x38>)
   114be:	4b09      	ldr	r3, [pc, #36]	; (114e4 <savePreventOverFlowSettings+0x3c>)
   114c0:	2230      	movs	r2, #48	; 0x30
   114c2:	0018      	movs	r0, r3
   114c4:	4b08      	ldr	r3, [pc, #32]	; (114e8 <savePreventOverFlowSettings+0x40>)
   114c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114c8:	4b06      	ldr	r3, [pc, #24]	; (114e4 <savePreventOverFlowSettings+0x3c>)
   114ca:	0019      	movs	r1, r3
   114cc:	201a      	movs	r0, #26
   114ce:	4b07      	ldr	r3, [pc, #28]	; (114ec <savePreventOverFlowSettings+0x44>)
   114d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114d2:	4b07      	ldr	r3, [pc, #28]	; (114f0 <savePreventOverFlowSettings+0x48>)
   114d4:	4798      	blx	r3
}
   114d6:	46c0      	nop			; (mov r8, r8)
   114d8:	46bd      	mov	sp, r7
   114da:	b002      	add	sp, #8
   114dc:	bd80      	pop	{r7, pc}
   114de:	46c0      	nop			; (mov r8, r8)
   114e0:	20000650 	.word	0x20000650
   114e4:	20000584 	.word	0x20000584
   114e8:	00028ddd 	.word	0x00028ddd
   114ec:	000239f1 	.word	0x000239f1
   114f0:	00023b99 	.word	0x00023b99

000114f4 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   114f4:	b580      	push	{r7, lr}
   114f6:	b082      	sub	sp, #8
   114f8:	af00      	add	r7, sp, #0
   114fa:	0002      	movs	r2, r0
   114fc:	1dfb      	adds	r3, r7, #7
   114fe:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   11500:	1dfb      	adds	r3, r7, #7
   11502:	781b      	ldrb	r3, [r3, #0]
   11504:	2b64      	cmp	r3, #100	; 0x64
   11506:	d918      	bls.n	1153a <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11508:	4b0e      	ldr	r3, [pc, #56]	; (11544 <setOverloadPer+0x50>)
   1150a:	1dfa      	adds	r2, r7, #7
   1150c:	7812      	ldrb	r2, [r2, #0]
   1150e:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11510:	490c      	ldr	r1, [pc, #48]	; (11544 <setOverloadPer+0x50>)
   11512:	4b0d      	ldr	r3, [pc, #52]	; (11548 <setOverloadPer+0x54>)
   11514:	2230      	movs	r2, #48	; 0x30
   11516:	0018      	movs	r0, r3
   11518:	4b0c      	ldr	r3, [pc, #48]	; (1154c <setOverloadPer+0x58>)
   1151a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1151c:	4b0a      	ldr	r3, [pc, #40]	; (11548 <setOverloadPer+0x54>)
   1151e:	0019      	movs	r1, r3
   11520:	201a      	movs	r0, #26
   11522:	4b0b      	ldr	r3, [pc, #44]	; (11550 <setOverloadPer+0x5c>)
   11524:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11526:	4b0b      	ldr	r3, [pc, #44]	; (11554 <setOverloadPer+0x60>)
   11528:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   1152a:	4b06      	ldr	r3, [pc, #24]	; (11544 <setOverloadPer+0x50>)
   1152c:	7bdb      	ldrb	r3, [r3, #15]
   1152e:	2b00      	cmp	r3, #0
   11530:	d001      	beq.n	11536 <setOverloadPer+0x42>
		{
			calcCurrentValues();
   11532:	4b09      	ldr	r3, [pc, #36]	; (11558 <setOverloadPer+0x64>)
   11534:	4798      	blx	r3
		}
		return true;
   11536:	2301      	movs	r3, #1
   11538:	e000      	b.n	1153c <setOverloadPer+0x48>
	}
	return false;
   1153a:	2300      	movs	r3, #0
}
   1153c:	0018      	movs	r0, r3
   1153e:	46bd      	mov	sp, r7
   11540:	b002      	add	sp, #8
   11542:	bd80      	pop	{r7, pc}
   11544:	20000650 	.word	0x20000650
   11548:	20000584 	.word	0x20000584
   1154c:	00028ddd 	.word	0x00028ddd
   11550:	000239f1 	.word	0x000239f1
   11554:	00023b99 	.word	0x00023b99
   11558:	000117d9 	.word	0x000117d9

0001155c <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   1155c:	b580      	push	{r7, lr}
   1155e:	b082      	sub	sp, #8
   11560:	af00      	add	r7, sp, #0
   11562:	0002      	movs	r2, r0
   11564:	1dfb      	adds	r3, r7, #7
   11566:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11568:	1dfb      	adds	r3, r7, #7
   1156a:	781b      	ldrb	r3, [r3, #0]
   1156c:	2b00      	cmp	r3, #0
   1156e:	d01c      	beq.n	115aa <setUnderloadPer+0x4e>
   11570:	1dfb      	adds	r3, r7, #7
   11572:	781b      	ldrb	r3, [r3, #0]
   11574:	2b63      	cmp	r3, #99	; 0x63
   11576:	d818      	bhi.n	115aa <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11578:	4b0e      	ldr	r3, [pc, #56]	; (115b4 <setUnderloadPer+0x58>)
   1157a:	1dfa      	adds	r2, r7, #7
   1157c:	7812      	ldrb	r2, [r2, #0]
   1157e:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11580:	490c      	ldr	r1, [pc, #48]	; (115b4 <setUnderloadPer+0x58>)
   11582:	4b0d      	ldr	r3, [pc, #52]	; (115b8 <setUnderloadPer+0x5c>)
   11584:	2230      	movs	r2, #48	; 0x30
   11586:	0018      	movs	r0, r3
   11588:	4b0c      	ldr	r3, [pc, #48]	; (115bc <setUnderloadPer+0x60>)
   1158a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1158c:	4b0a      	ldr	r3, [pc, #40]	; (115b8 <setUnderloadPer+0x5c>)
   1158e:	0019      	movs	r1, r3
   11590:	201a      	movs	r0, #26
   11592:	4b0b      	ldr	r3, [pc, #44]	; (115c0 <setUnderloadPer+0x64>)
   11594:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11596:	4b0b      	ldr	r3, [pc, #44]	; (115c4 <setUnderloadPer+0x68>)
   11598:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   1159a:	4b06      	ldr	r3, [pc, #24]	; (115b4 <setUnderloadPer+0x58>)
   1159c:	7bdb      	ldrb	r3, [r3, #15]
   1159e:	2b00      	cmp	r3, #0
   115a0:	d001      	beq.n	115a6 <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
   115a2:	4b09      	ldr	r3, [pc, #36]	; (115c8 <setUnderloadPer+0x6c>)
   115a4:	4798      	blx	r3
		}
		return true;
   115a6:	2301      	movs	r3, #1
   115a8:	e000      	b.n	115ac <setUnderloadPer+0x50>
	}
	return false;
   115aa:	2300      	movs	r3, #0
}
   115ac:	0018      	movs	r0, r3
   115ae:	46bd      	mov	sp, r7
   115b0:	b002      	add	sp, #8
   115b2:	bd80      	pop	{r7, pc}
   115b4:	20000650 	.word	0x20000650
   115b8:	20000584 	.word	0x20000584
   115bc:	00028ddd 	.word	0x00028ddd
   115c0:	000239f1 	.word	0x000239f1
   115c4:	00023b99 	.word	0x00023b99
   115c8:	000117d9 	.word	0x000117d9

000115cc <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115cc:	b580      	push	{r7, lr}
   115ce:	b082      	sub	sp, #8
   115d0:	af00      	add	r7, sp, #0
   115d2:	0002      	movs	r2, r0
   115d4:	1dfb      	adds	r3, r7, #7
   115d6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115d8:	1dfb      	adds	r3, r7, #7
   115da:	7819      	ldrb	r1, [r3, #0]
   115dc:	4b09      	ldr	r3, [pc, #36]	; (11604 <saveSinglePhasingSettings+0x38>)
   115de:	2220      	movs	r2, #32
   115e0:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115e2:	4908      	ldr	r1, [pc, #32]	; (11604 <saveSinglePhasingSettings+0x38>)
   115e4:	4b08      	ldr	r3, [pc, #32]	; (11608 <saveSinglePhasingSettings+0x3c>)
   115e6:	2230      	movs	r2, #48	; 0x30
   115e8:	0018      	movs	r0, r3
   115ea:	4b08      	ldr	r3, [pc, #32]	; (1160c <saveSinglePhasingSettings+0x40>)
   115ec:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   115ee:	4b06      	ldr	r3, [pc, #24]	; (11608 <saveSinglePhasingSettings+0x3c>)
   115f0:	0019      	movs	r1, r3
   115f2:	201a      	movs	r0, #26
   115f4:	4b06      	ldr	r3, [pc, #24]	; (11610 <saveSinglePhasingSettings+0x44>)
   115f6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   115f8:	4b06      	ldr	r3, [pc, #24]	; (11614 <saveSinglePhasingSettings+0x48>)
   115fa:	4798      	blx	r3
}
   115fc:	46c0      	nop			; (mov r8, r8)
   115fe:	46bd      	mov	sp, r7
   11600:	b002      	add	sp, #8
   11602:	bd80      	pop	{r7, pc}
   11604:	20000650 	.word	0x20000650
   11608:	20000584 	.word	0x20000584
   1160c:	00028ddd 	.word	0x00028ddd
   11610:	000239f1 	.word	0x000239f1
   11614:	00023b99 	.word	0x00023b99

00011618 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   11618:	b580      	push	{r7, lr}
   1161a:	b082      	sub	sp, #8
   1161c:	af00      	add	r7, sp, #0
   1161e:	0002      	movs	r2, r0
   11620:	1dbb      	adds	r3, r7, #6
   11622:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   11624:	4b0a      	ldr	r3, [pc, #40]	; (11650 <saveSinglePhasingVoltage+0x38>)
   11626:	1dba      	adds	r2, r7, #6
   11628:	8812      	ldrh	r2, [r2, #0]
   1162a:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1162c:	4908      	ldr	r1, [pc, #32]	; (11650 <saveSinglePhasingVoltage+0x38>)
   1162e:	4b09      	ldr	r3, [pc, #36]	; (11654 <saveSinglePhasingVoltage+0x3c>)
   11630:	2230      	movs	r2, #48	; 0x30
   11632:	0018      	movs	r0, r3
   11634:	4b08      	ldr	r3, [pc, #32]	; (11658 <saveSinglePhasingVoltage+0x40>)
   11636:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11638:	4b06      	ldr	r3, [pc, #24]	; (11654 <saveSinglePhasingVoltage+0x3c>)
   1163a:	0019      	movs	r1, r3
   1163c:	201a      	movs	r0, #26
   1163e:	4b07      	ldr	r3, [pc, #28]	; (1165c <saveSinglePhasingVoltage+0x44>)
   11640:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11642:	4b07      	ldr	r3, [pc, #28]	; (11660 <saveSinglePhasingVoltage+0x48>)
   11644:	4798      	blx	r3
}
   11646:	46c0      	nop			; (mov r8, r8)
   11648:	46bd      	mov	sp, r7
   1164a:	b002      	add	sp, #8
   1164c:	bd80      	pop	{r7, pc}
   1164e:	46c0      	nop			; (mov r8, r8)
   11650:	20000650 	.word	0x20000650
   11654:	20000584 	.word	0x20000584
   11658:	00028ddd 	.word	0x00028ddd
   1165c:	000239f1 	.word	0x000239f1
   11660:	00023b99 	.word	0x00023b99

00011664 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   11664:	b580      	push	{r7, lr}
   11666:	b082      	sub	sp, #8
   11668:	af00      	add	r7, sp, #0
   1166a:	0002      	movs	r2, r0
   1166c:	1dfb      	adds	r3, r7, #7
   1166e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11670:	1dfb      	adds	r3, r7, #7
   11672:	7819      	ldrb	r1, [r3, #0]
   11674:	4b09      	ldr	r3, [pc, #36]	; (1169c <savePhaseSequenceProtectionSettings+0x38>)
   11676:	2224      	movs	r2, #36	; 0x24
   11678:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1167a:	4908      	ldr	r1, [pc, #32]	; (1169c <savePhaseSequenceProtectionSettings+0x38>)
   1167c:	4b08      	ldr	r3, [pc, #32]	; (116a0 <savePhaseSequenceProtectionSettings+0x3c>)
   1167e:	2230      	movs	r2, #48	; 0x30
   11680:	0018      	movs	r0, r3
   11682:	4b08      	ldr	r3, [pc, #32]	; (116a4 <savePhaseSequenceProtectionSettings+0x40>)
   11684:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11686:	4b06      	ldr	r3, [pc, #24]	; (116a0 <savePhaseSequenceProtectionSettings+0x3c>)
   11688:	0019      	movs	r1, r3
   1168a:	201a      	movs	r0, #26
   1168c:	4b06      	ldr	r3, [pc, #24]	; (116a8 <savePhaseSequenceProtectionSettings+0x44>)
   1168e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11690:	4b06      	ldr	r3, [pc, #24]	; (116ac <savePhaseSequenceProtectionSettings+0x48>)
   11692:	4798      	blx	r3
}
   11694:	46c0      	nop			; (mov r8, r8)
   11696:	46bd      	mov	sp, r7
   11698:	b002      	add	sp, #8
   1169a:	bd80      	pop	{r7, pc}
   1169c:	20000650 	.word	0x20000650
   116a0:	20000584 	.word	0x20000584
   116a4:	00028ddd 	.word	0x00028ddd
   116a8:	000239f1 	.word	0x000239f1
   116ac:	00023b99 	.word	0x00023b99

000116b0 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116b0:	b580      	push	{r7, lr}
   116b2:	b082      	sub	sp, #8
   116b4:	af00      	add	r7, sp, #0
   116b6:	0002      	movs	r2, r0
   116b8:	1dfb      	adds	r3, r7, #7
   116ba:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116bc:	4b0a      	ldr	r3, [pc, #40]	; (116e8 <saveUnderOverDetectionMethodSettings+0x38>)
   116be:	1dfa      	adds	r2, r7, #7
   116c0:	2126      	movs	r1, #38	; 0x26
   116c2:	7812      	ldrb	r2, [r2, #0]
   116c4:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116c6:	4908      	ldr	r1, [pc, #32]	; (116e8 <saveUnderOverDetectionMethodSettings+0x38>)
   116c8:	4b08      	ldr	r3, [pc, #32]	; (116ec <saveUnderOverDetectionMethodSettings+0x3c>)
   116ca:	2230      	movs	r2, #48	; 0x30
   116cc:	0018      	movs	r0, r3
   116ce:	4b08      	ldr	r3, [pc, #32]	; (116f0 <saveUnderOverDetectionMethodSettings+0x40>)
   116d0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116d2:	4b06      	ldr	r3, [pc, #24]	; (116ec <saveUnderOverDetectionMethodSettings+0x3c>)
   116d4:	0019      	movs	r1, r3
   116d6:	201a      	movs	r0, #26
   116d8:	4b06      	ldr	r3, [pc, #24]	; (116f4 <saveUnderOverDetectionMethodSettings+0x44>)
   116da:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116dc:	4b06      	ldr	r3, [pc, #24]	; (116f8 <saveUnderOverDetectionMethodSettings+0x48>)
   116de:	4798      	blx	r3
}
   116e0:	46c0      	nop			; (mov r8, r8)
   116e2:	46bd      	mov	sp, r7
   116e4:	b002      	add	sp, #8
   116e6:	bd80      	pop	{r7, pc}
   116e8:	20000650 	.word	0x20000650
   116ec:	20000584 	.word	0x20000584
   116f0:	00028ddd 	.word	0x00028ddd
   116f4:	000239f1 	.word	0x000239f1
   116f8:	00023b99 	.word	0x00023b99

000116fc <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   116fc:	b580      	push	{r7, lr}
   116fe:	b082      	sub	sp, #8
   11700:	af00      	add	r7, sp, #0
   11702:	0002      	movs	r2, r0
   11704:	1dfb      	adds	r3, r7, #7
   11706:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   11708:	1dfb      	adds	r3, r7, #7
   1170a:	7819      	ldrb	r1, [r3, #0]
   1170c:	4b09      	ldr	r3, [pc, #36]	; (11734 <saveMotorVoltageBypassSettings+0x38>)
   1170e:	2227      	movs	r2, #39	; 0x27
   11710:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11712:	4908      	ldr	r1, [pc, #32]	; (11734 <saveMotorVoltageBypassSettings+0x38>)
   11714:	4b08      	ldr	r3, [pc, #32]	; (11738 <saveMotorVoltageBypassSettings+0x3c>)
   11716:	2230      	movs	r2, #48	; 0x30
   11718:	0018      	movs	r0, r3
   1171a:	4b08      	ldr	r3, [pc, #32]	; (1173c <saveMotorVoltageBypassSettings+0x40>)
   1171c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1171e:	4b06      	ldr	r3, [pc, #24]	; (11738 <saveMotorVoltageBypassSettings+0x3c>)
   11720:	0019      	movs	r1, r3
   11722:	201a      	movs	r0, #26
   11724:	4b06      	ldr	r3, [pc, #24]	; (11740 <saveMotorVoltageBypassSettings+0x44>)
   11726:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11728:	4b06      	ldr	r3, [pc, #24]	; (11744 <saveMotorVoltageBypassSettings+0x48>)
   1172a:	4798      	blx	r3
}
   1172c:	46c0      	nop			; (mov r8, r8)
   1172e:	46bd      	mov	sp, r7
   11730:	b002      	add	sp, #8
   11732:	bd80      	pop	{r7, pc}
   11734:	20000650 	.word	0x20000650
   11738:	20000584 	.word	0x20000584
   1173c:	00028ddd 	.word	0x00028ddd
   11740:	000239f1 	.word	0x000239f1
   11744:	00023b99 	.word	0x00023b99

00011748 <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   11748:	b580      	push	{r7, lr}
   1174a:	b082      	sub	sp, #8
   1174c:	af00      	add	r7, sp, #0
   1174e:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11750:	4b09      	ldr	r3, [pc, #36]	; (11778 <saveMotorVoltageBypasssTimeSettings+0x30>)
   11752:	687a      	ldr	r2, [r7, #4]
   11754:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11756:	4908      	ldr	r1, [pc, #32]	; (11778 <saveMotorVoltageBypasssTimeSettings+0x30>)
   11758:	4b08      	ldr	r3, [pc, #32]	; (1177c <saveMotorVoltageBypasssTimeSettings+0x34>)
   1175a:	2230      	movs	r2, #48	; 0x30
   1175c:	0018      	movs	r0, r3
   1175e:	4b08      	ldr	r3, [pc, #32]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11760:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11762:	4b06      	ldr	r3, [pc, #24]	; (1177c <saveMotorVoltageBypasssTimeSettings+0x34>)
   11764:	0019      	movs	r1, r3
   11766:	201a      	movs	r0, #26
   11768:	4b06      	ldr	r3, [pc, #24]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x3c>)
   1176a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1176c:	4b06      	ldr	r3, [pc, #24]	; (11788 <saveMotorVoltageBypasssTimeSettings+0x40>)
   1176e:	4798      	blx	r3
}
   11770:	46c0      	nop			; (mov r8, r8)
   11772:	46bd      	mov	sp, r7
   11774:	b002      	add	sp, #8
   11776:	bd80      	pop	{r7, pc}
   11778:	20000650 	.word	0x20000650
   1177c:	20000584 	.word	0x20000584
   11780:	00028ddd 	.word	0x00028ddd
   11784:	000239f1 	.word	0x000239f1
   11788:	00023b99 	.word	0x00023b99

0001178c <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   1178c:	b580      	push	{r7, lr}
   1178e:	b082      	sub	sp, #8
   11790:	af00      	add	r7, sp, #0
   11792:	0002      	movs	r2, r0
   11794:	1dfb      	adds	r3, r7, #7
   11796:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   11798:	4b0a      	ldr	r3, [pc, #40]	; (117c4 <saveMotorFeedbackDetectionSettings+0x38>)
   1179a:	1dfa      	adds	r2, r7, #7
   1179c:	2125      	movs	r1, #37	; 0x25
   1179e:	7812      	ldrb	r2, [r2, #0]
   117a0:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117a2:	4908      	ldr	r1, [pc, #32]	; (117c4 <saveMotorFeedbackDetectionSettings+0x38>)
   117a4:	4b08      	ldr	r3, [pc, #32]	; (117c8 <saveMotorFeedbackDetectionSettings+0x3c>)
   117a6:	2230      	movs	r2, #48	; 0x30
   117a8:	0018      	movs	r0, r3
   117aa:	4b08      	ldr	r3, [pc, #32]	; (117cc <saveMotorFeedbackDetectionSettings+0x40>)
   117ac:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117ae:	4b06      	ldr	r3, [pc, #24]	; (117c8 <saveMotorFeedbackDetectionSettings+0x3c>)
   117b0:	0019      	movs	r1, r3
   117b2:	201a      	movs	r0, #26
   117b4:	4b06      	ldr	r3, [pc, #24]	; (117d0 <saveMotorFeedbackDetectionSettings+0x44>)
   117b6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117b8:	4b06      	ldr	r3, [pc, #24]	; (117d4 <saveMotorFeedbackDetectionSettings+0x48>)
   117ba:	4798      	blx	r3
}
   117bc:	46c0      	nop			; (mov r8, r8)
   117be:	46bd      	mov	sp, r7
   117c0:	b002      	add	sp, #8
   117c2:	bd80      	pop	{r7, pc}
   117c4:	20000650 	.word	0x20000650
   117c8:	20000584 	.word	0x20000584
   117cc:	00028ddd 	.word	0x00028ddd
   117d0:	000239f1 	.word	0x000239f1
   117d4:	00023b99 	.word	0x00023b99

000117d8 <calcCurrentValues>:


void calcCurrentValues(void)
{
   117d8:	b590      	push	{r4, r7, lr}
   117da:	b083      	sub	sp, #12
   117dc:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117de:	4b2b      	ldr	r3, [pc, #172]	; (1188c <calcCurrentValues+0xb4>)
   117e0:	691a      	ldr	r2, [r3, #16]
   117e2:	4b2b      	ldr	r3, [pc, #172]	; (11890 <calcCurrentValues+0xb8>)
   117e4:	0010      	movs	r0, r2
   117e6:	4798      	blx	r3
   117e8:	1c04      	adds	r4, r0, #0
   117ea:	4b28      	ldr	r3, [pc, #160]	; (1188c <calcCurrentValues+0xb4>)
   117ec:	7f1a      	ldrb	r2, [r3, #28]
   117ee:	4b28      	ldr	r3, [pc, #160]	; (11890 <calcCurrentValues+0xb8>)
   117f0:	0010      	movs	r0, r2
   117f2:	4798      	blx	r3
   117f4:	1c02      	adds	r2, r0, #0
   117f6:	4b27      	ldr	r3, [pc, #156]	; (11894 <calcCurrentValues+0xbc>)
   117f8:	1c11      	adds	r1, r2, #0
   117fa:	1c20      	adds	r0, r4, #0
   117fc:	4798      	blx	r3
   117fe:	1c03      	adds	r3, r0, #0
   11800:	1c1a      	adds	r2, r3, #0
   11802:	4b25      	ldr	r3, [pc, #148]	; (11898 <calcCurrentValues+0xc0>)
   11804:	1c10      	adds	r0, r2, #0
   11806:	4798      	blx	r3
   11808:	4c24      	ldr	r4, [pc, #144]	; (1189c <calcCurrentValues+0xc4>)
   1180a:	2200      	movs	r2, #0
   1180c:	4b24      	ldr	r3, [pc, #144]	; (118a0 <calcCurrentValues+0xc8>)
   1180e:	47a0      	blx	r4
   11810:	0003      	movs	r3, r0
   11812:	000c      	movs	r4, r1
   11814:	0019      	movs	r1, r3
   11816:	0022      	movs	r2, r4
   11818:	1dbc      	adds	r4, r7, #6
   1181a:	4b22      	ldr	r3, [pc, #136]	; (118a4 <calcCurrentValues+0xcc>)
   1181c:	0008      	movs	r0, r1
   1181e:	0011      	movs	r1, r2
   11820:	4798      	blx	r3
   11822:	0003      	movs	r3, r0
   11824:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   11826:	1dbb      	adds	r3, r7, #6
   11828:	881b      	ldrh	r3, [r3, #0]
   1182a:	0018      	movs	r0, r3
   1182c:	4b1e      	ldr	r3, [pc, #120]	; (118a8 <calcCurrentValues+0xd0>)
   1182e:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11830:	4b16      	ldr	r3, [pc, #88]	; (1188c <calcCurrentValues+0xb4>)
   11832:	691a      	ldr	r2, [r3, #16]
   11834:	4b16      	ldr	r3, [pc, #88]	; (11890 <calcCurrentValues+0xb8>)
   11836:	0010      	movs	r0, r2
   11838:	4798      	blx	r3
   1183a:	1c04      	adds	r4, r0, #0
   1183c:	4b13      	ldr	r3, [pc, #76]	; (1188c <calcCurrentValues+0xb4>)
   1183e:	7f5a      	ldrb	r2, [r3, #29]
   11840:	4b13      	ldr	r3, [pc, #76]	; (11890 <calcCurrentValues+0xb8>)
   11842:	0010      	movs	r0, r2
   11844:	4798      	blx	r3
   11846:	1c02      	adds	r2, r0, #0
   11848:	4b12      	ldr	r3, [pc, #72]	; (11894 <calcCurrentValues+0xbc>)
   1184a:	1c11      	adds	r1, r2, #0
   1184c:	1c20      	adds	r0, r4, #0
   1184e:	4798      	blx	r3
   11850:	1c03      	adds	r3, r0, #0
   11852:	1c1a      	adds	r2, r3, #0
   11854:	4b10      	ldr	r3, [pc, #64]	; (11898 <calcCurrentValues+0xc0>)
   11856:	1c10      	adds	r0, r2, #0
   11858:	4798      	blx	r3
   1185a:	4c10      	ldr	r4, [pc, #64]	; (1189c <calcCurrentValues+0xc4>)
   1185c:	2200      	movs	r2, #0
   1185e:	4b10      	ldr	r3, [pc, #64]	; (118a0 <calcCurrentValues+0xc8>)
   11860:	47a0      	blx	r4
   11862:	0003      	movs	r3, r0
   11864:	000c      	movs	r4, r1
   11866:	0019      	movs	r1, r3
   11868:	0022      	movs	r2, r4
   1186a:	1dbc      	adds	r4, r7, #6
   1186c:	4b0d      	ldr	r3, [pc, #52]	; (118a4 <calcCurrentValues+0xcc>)
   1186e:	0008      	movs	r0, r1
   11870:	0011      	movs	r1, r2
   11872:	4798      	blx	r3
   11874:	0003      	movs	r3, r0
   11876:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11878:	1dbb      	adds	r3, r7, #6
   1187a:	881b      	ldrh	r3, [r3, #0]
   1187c:	0018      	movs	r0, r3
   1187e:	4b0b      	ldr	r3, [pc, #44]	; (118ac <calcCurrentValues+0xd4>)
   11880:	4798      	blx	r3
}
   11882:	46c0      	nop			; (mov r8, r8)
   11884:	46bd      	mov	sp, r7
   11886:	b003      	add	sp, #12
   11888:	bd90      	pop	{r4, r7, pc}
   1188a:	46c0      	nop			; (mov r8, r8)
   1188c:	20000650 	.word	0x20000650
   11890:	00027025 	.word	0x00027025
   11894:	00026d45 	.word	0x00026d45
   11898:	00028c01 	.word	0x00028c01
   1189c:	000276d1 	.word	0x000276d1
   118a0:	40590000 	.word	0x40590000
   118a4:	000268f9 	.word	0x000268f9
   118a8:	000118b1 	.word	0x000118b1
   118ac:	000118f5 	.word	0x000118f5

000118b0 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118b0:	b580      	push	{r7, lr}
   118b2:	b082      	sub	sp, #8
   118b4:	af00      	add	r7, sp, #0
   118b6:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118b8:	4b09      	ldr	r3, [pc, #36]	; (118e0 <setUnderloadValue+0x30>)
   118ba:	687a      	ldr	r2, [r7, #4]
   118bc:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118be:	4908      	ldr	r1, [pc, #32]	; (118e0 <setUnderloadValue+0x30>)
   118c0:	4b08      	ldr	r3, [pc, #32]	; (118e4 <setUnderloadValue+0x34>)
   118c2:	2230      	movs	r2, #48	; 0x30
   118c4:	0018      	movs	r0, r3
   118c6:	4b08      	ldr	r3, [pc, #32]	; (118e8 <setUnderloadValue+0x38>)
   118c8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118ca:	4b06      	ldr	r3, [pc, #24]	; (118e4 <setUnderloadValue+0x34>)
   118cc:	0019      	movs	r1, r3
   118ce:	201a      	movs	r0, #26
   118d0:	4b06      	ldr	r3, [pc, #24]	; (118ec <setUnderloadValue+0x3c>)
   118d2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118d4:	4b06      	ldr	r3, [pc, #24]	; (118f0 <setUnderloadValue+0x40>)
   118d6:	4798      	blx	r3
}
   118d8:	46c0      	nop			; (mov r8, r8)
   118da:	46bd      	mov	sp, r7
   118dc:	b002      	add	sp, #8
   118de:	bd80      	pop	{r7, pc}
   118e0:	20000650 	.word	0x20000650
   118e4:	20000584 	.word	0x20000584
   118e8:	00028ddd 	.word	0x00028ddd
   118ec:	000239f1 	.word	0x000239f1
   118f0:	00023b99 	.word	0x00023b99

000118f4 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   118f4:	b580      	push	{r7, lr}
   118f6:	b082      	sub	sp, #8
   118f8:	af00      	add	r7, sp, #0
   118fa:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   118fc:	4b09      	ldr	r3, [pc, #36]	; (11924 <setOverloadValue+0x30>)
   118fe:	687a      	ldr	r2, [r7, #4]
   11900:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11902:	4908      	ldr	r1, [pc, #32]	; (11924 <setOverloadValue+0x30>)
   11904:	4b08      	ldr	r3, [pc, #32]	; (11928 <setOverloadValue+0x34>)
   11906:	2230      	movs	r2, #48	; 0x30
   11908:	0018      	movs	r0, r3
   1190a:	4b08      	ldr	r3, [pc, #32]	; (1192c <setOverloadValue+0x38>)
   1190c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1190e:	4b06      	ldr	r3, [pc, #24]	; (11928 <setOverloadValue+0x34>)
   11910:	0019      	movs	r1, r3
   11912:	201a      	movs	r0, #26
   11914:	4b06      	ldr	r3, [pc, #24]	; (11930 <setOverloadValue+0x3c>)
   11916:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11918:	4b06      	ldr	r3, [pc, #24]	; (11934 <setOverloadValue+0x40>)
   1191a:	4798      	blx	r3
}
   1191c:	46c0      	nop			; (mov r8, r8)
   1191e:	46bd      	mov	sp, r7
   11920:	b002      	add	sp, #8
   11922:	bd80      	pop	{r7, pc}
   11924:	20000650 	.word	0x20000650
   11928:	20000584 	.word	0x20000584
   1192c:	00028ddd 	.word	0x00028ddd
   11930:	000239f1 	.word	0x000239f1
   11934:	00023b99 	.word	0x00023b99

00011938 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11938:	b580      	push	{r7, lr}
   1193a:	b082      	sub	sp, #8
   1193c:	af00      	add	r7, sp, #0
   1193e:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11940:	4b09      	ldr	r3, [pc, #36]	; (11968 <setNormalLoadValue+0x30>)
   11942:	687a      	ldr	r2, [r7, #4]
   11944:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11946:	4908      	ldr	r1, [pc, #32]	; (11968 <setNormalLoadValue+0x30>)
   11948:	4b08      	ldr	r3, [pc, #32]	; (1196c <setNormalLoadValue+0x34>)
   1194a:	2230      	movs	r2, #48	; 0x30
   1194c:	0018      	movs	r0, r3
   1194e:	4b08      	ldr	r3, [pc, #32]	; (11970 <setNormalLoadValue+0x38>)
   11950:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11952:	4b06      	ldr	r3, [pc, #24]	; (1196c <setNormalLoadValue+0x34>)
   11954:	0019      	movs	r1, r3
   11956:	201a      	movs	r0, #26
   11958:	4b06      	ldr	r3, [pc, #24]	; (11974 <setNormalLoadValue+0x3c>)
   1195a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1195c:	4b06      	ldr	r3, [pc, #24]	; (11978 <setNormalLoadValue+0x40>)
   1195e:	4798      	blx	r3
}
   11960:	46c0      	nop			; (mov r8, r8)
   11962:	46bd      	mov	sp, r7
   11964:	b002      	add	sp, #8
   11966:	bd80      	pop	{r7, pc}
   11968:	20000650 	.word	0x20000650
   1196c:	20000584 	.word	0x20000584
   11970:	00028ddd 	.word	0x00028ddd
   11974:	000239f1 	.word	0x000239f1
   11978:	00023b99 	.word	0x00023b99

0001197c <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   1197c:	b580      	push	{r7, lr}
   1197e:	b082      	sub	sp, #8
   11980:	af00      	add	r7, sp, #0
   11982:	0002      	movs	r2, r0
   11984:	1dfb      	adds	r3, r7, #7
   11986:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   11988:	1dfb      	adds	r3, r7, #7
   1198a:	781a      	ldrb	r2, [r3, #0]
   1198c:	4b09      	ldr	r3, [pc, #36]	; (119b4 <setCurrentDetection+0x38>)
   1198e:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11990:	4908      	ldr	r1, [pc, #32]	; (119b4 <setCurrentDetection+0x38>)
   11992:	4b09      	ldr	r3, [pc, #36]	; (119b8 <setCurrentDetection+0x3c>)
   11994:	2230      	movs	r2, #48	; 0x30
   11996:	0018      	movs	r0, r3
   11998:	4b08      	ldr	r3, [pc, #32]	; (119bc <setCurrentDetection+0x40>)
   1199a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1199c:	4b06      	ldr	r3, [pc, #24]	; (119b8 <setCurrentDetection+0x3c>)
   1199e:	0019      	movs	r1, r3
   119a0:	201a      	movs	r0, #26
   119a2:	4b07      	ldr	r3, [pc, #28]	; (119c0 <setCurrentDetection+0x44>)
   119a4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119a6:	4b07      	ldr	r3, [pc, #28]	; (119c4 <setCurrentDetection+0x48>)
   119a8:	4798      	blx	r3
}
   119aa:	46c0      	nop			; (mov r8, r8)
   119ac:	46bd      	mov	sp, r7
   119ae:	b002      	add	sp, #8
   119b0:	bd80      	pop	{r7, pc}
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	20000650 	.word	0x20000650
   119b8:	20000584 	.word	0x20000584
   119bc:	00028ddd 	.word	0x00028ddd
   119c0:	000239f1 	.word	0x000239f1
   119c4:	00023b99 	.word	0x00023b99

000119c8 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119c8:	b580      	push	{r7, lr}
   119ca:	b082      	sub	sp, #8
   119cc:	af00      	add	r7, sp, #0
   119ce:	0002      	movs	r2, r0
   119d0:	1dbb      	adds	r3, r7, #6
   119d2:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119d4:	4b0a      	ldr	r3, [pc, #40]	; (11a00 <saveStarDeltaTimer+0x38>)
   119d6:	1dba      	adds	r2, r7, #6
   119d8:	8812      	ldrh	r2, [r2, #0]
   119da:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119dc:	4908      	ldr	r1, [pc, #32]	; (11a00 <saveStarDeltaTimer+0x38>)
   119de:	4b09      	ldr	r3, [pc, #36]	; (11a04 <saveStarDeltaTimer+0x3c>)
   119e0:	2230      	movs	r2, #48	; 0x30
   119e2:	0018      	movs	r0, r3
   119e4:	4b08      	ldr	r3, [pc, #32]	; (11a08 <saveStarDeltaTimer+0x40>)
   119e6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119e8:	4b06      	ldr	r3, [pc, #24]	; (11a04 <saveStarDeltaTimer+0x3c>)
   119ea:	0019      	movs	r1, r3
   119ec:	201a      	movs	r0, #26
   119ee:	4b07      	ldr	r3, [pc, #28]	; (11a0c <saveStarDeltaTimer+0x44>)
   119f0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119f2:	4b07      	ldr	r3, [pc, #28]	; (11a10 <saveStarDeltaTimer+0x48>)
   119f4:	4798      	blx	r3
}
   119f6:	46c0      	nop			; (mov r8, r8)
   119f8:	46bd      	mov	sp, r7
   119fa:	b002      	add	sp, #8
   119fc:	bd80      	pop	{r7, pc}
   119fe:	46c0      	nop			; (mov r8, r8)
   11a00:	20000650 	.word	0x20000650
   11a04:	20000584 	.word	0x20000584
   11a08:	00028ddd 	.word	0x00028ddd
   11a0c:	000239f1 	.word	0x000239f1
   11a10:	00023b99 	.word	0x00023b99

00011a14 <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a14:	b580      	push	{r7, lr}
   11a16:	b082      	sub	sp, #8
   11a18:	af00      	add	r7, sp, #0
   11a1a:	0002      	movs	r2, r0
   11a1c:	1dfb      	adds	r3, r7, #7
   11a1e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a20:	4b0a      	ldr	r3, [pc, #40]	; (11a4c <saveEventStageSettings+0x38>)
   11a22:	1dfa      	adds	r2, r7, #7
   11a24:	7812      	ldrb	r2, [r2, #0]
   11a26:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a28:	4908      	ldr	r1, [pc, #32]	; (11a4c <saveEventStageSettings+0x38>)
   11a2a:	4b09      	ldr	r3, [pc, #36]	; (11a50 <saveEventStageSettings+0x3c>)
   11a2c:	2230      	movs	r2, #48	; 0x30
   11a2e:	0018      	movs	r0, r3
   11a30:	4b08      	ldr	r3, [pc, #32]	; (11a54 <saveEventStageSettings+0x40>)
   11a32:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a34:	4b06      	ldr	r3, [pc, #24]	; (11a50 <saveEventStageSettings+0x3c>)
   11a36:	0019      	movs	r1, r3
   11a38:	201a      	movs	r0, #26
   11a3a:	4b07      	ldr	r3, [pc, #28]	; (11a58 <saveEventStageSettings+0x44>)
   11a3c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a3e:	4b07      	ldr	r3, [pc, #28]	; (11a5c <saveEventStageSettings+0x48>)
   11a40:	4798      	blx	r3
}
   11a42:	46c0      	nop			; (mov r8, r8)
   11a44:	46bd      	mov	sp, r7
   11a46:	b002      	add	sp, #8
   11a48:	bd80      	pop	{r7, pc}
   11a4a:	46c0      	nop			; (mov r8, r8)
   11a4c:	20000650 	.word	0x20000650
   11a50:	20000584 	.word	0x20000584
   11a54:	00028ddd 	.word	0x00028ddd
   11a58:	000239f1 	.word	0x000239f1
   11a5c:	00023b99 	.word	0x00023b99

00011a60 <isAdmin>:

bool isAdmin(char *number)
{
   11a60:	b580      	push	{r7, lr}
   11a62:	b08a      	sub	sp, #40	; 0x28
   11a64:	af00      	add	r7, sp, #0
   11a66:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a68:	2327      	movs	r3, #39	; 0x27
   11a6a:	18fb      	adds	r3, r7, r3
   11a6c:	2200      	movs	r2, #0
   11a6e:	701a      	strb	r2, [r3, #0]
   11a70:	e02b      	b.n	11aca <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a72:	4b1b      	ldr	r3, [pc, #108]	; (11ae0 <isAdmin+0x80>)
   11a74:	223c      	movs	r2, #60	; 0x3c
   11a76:	2100      	movs	r1, #0
   11a78:	0018      	movs	r0, r3
   11a7a:	4b1a      	ldr	r3, [pc, #104]	; (11ae4 <isAdmin+0x84>)
   11a7c:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a7e:	2327      	movs	r3, #39	; 0x27
   11a80:	18fb      	adds	r3, r7, r3
   11a82:	781b      	ldrb	r3, [r3, #0]
   11a84:	3303      	adds	r3, #3
   11a86:	b2db      	uxtb	r3, r3
   11a88:	4a15      	ldr	r2, [pc, #84]	; (11ae0 <isAdmin+0x80>)
   11a8a:	0011      	movs	r1, r2
   11a8c:	0018      	movs	r0, r3
   11a8e:	4b16      	ldr	r3, [pc, #88]	; (11ae8 <isAdmin+0x88>)
   11a90:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11a92:	230c      	movs	r3, #12
   11a94:	18fa      	adds	r2, r7, r3
   11a96:	4b12      	ldr	r3, [pc, #72]	; (11ae0 <isAdmin+0x80>)
   11a98:	0010      	movs	r0, r2
   11a9a:	0019      	movs	r1, r3
   11a9c:	2318      	movs	r3, #24
   11a9e:	001a      	movs	r2, r3
   11aa0:	4b12      	ldr	r3, [pc, #72]	; (11aec <isAdmin+0x8c>)
   11aa2:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11aa4:	230c      	movs	r3, #12
   11aa6:	18fb      	adds	r3, r7, r3
   11aa8:	1d1a      	adds	r2, r3, #4
   11aaa:	687b      	ldr	r3, [r7, #4]
   11aac:	0011      	movs	r1, r2
   11aae:	0018      	movs	r0, r3
   11ab0:	4b0f      	ldr	r3, [pc, #60]	; (11af0 <isAdmin+0x90>)
   11ab2:	4798      	blx	r3
   11ab4:	1e03      	subs	r3, r0, #0
   11ab6:	d001      	beq.n	11abc <isAdmin+0x5c>
		{
			return true;
   11ab8:	2301      	movs	r3, #1
   11aba:	e00c      	b.n	11ad6 <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11abc:	2327      	movs	r3, #39	; 0x27
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	781a      	ldrb	r2, [r3, #0]
   11ac2:	2327      	movs	r3, #39	; 0x27
   11ac4:	18fb      	adds	r3, r7, r3
   11ac6:	3201      	adds	r2, #1
   11ac8:	701a      	strb	r2, [r3, #0]
   11aca:	2327      	movs	r3, #39	; 0x27
   11acc:	18fb      	adds	r3, r7, r3
   11ace:	781b      	ldrb	r3, [r3, #0]
   11ad0:	2b04      	cmp	r3, #4
   11ad2:	d9ce      	bls.n	11a72 <isAdmin+0x12>
		}
	}
	return false;
   11ad4:	2300      	movs	r3, #0
}
   11ad6:	0018      	movs	r0, r3
   11ad8:	46bd      	mov	sp, r7
   11ada:	b00a      	add	sp, #40	; 0x28
   11adc:	bd80      	pop	{r7, pc}
   11ade:	46c0      	nop			; (mov r8, r8)
   11ae0:	20000584 	.word	0x20000584
   11ae4:	00028e13 	.word	0x00028e13
   11ae8:	00023afd 	.word	0x00023afd
   11aec:	00028ddd 	.word	0x00028ddd
   11af0:	000290d3 	.word	0x000290d3

00011af4 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11af4:	b580      	push	{r7, lr}
   11af6:	b082      	sub	sp, #8
   11af8:	af00      	add	r7, sp, #0
   11afa:	0002      	movs	r2, r0
   11afc:	1dfb      	adds	r3, r7, #7
   11afe:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b00:	4b0b      	ldr	r3, [pc, #44]	; (11b30 <setPrimaryNumberIndex+0x3c>)
   11b02:	1dfa      	adds	r2, r7, #7
   11b04:	7812      	ldrb	r2, [r2, #0]
   11b06:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b08:	4a0a      	ldr	r2, [pc, #40]	; (11b34 <setPrimaryNumberIndex+0x40>)
   11b0a:	4b09      	ldr	r3, [pc, #36]	; (11b30 <setPrimaryNumberIndex+0x3c>)
   11b0c:	0010      	movs	r0, r2
   11b0e:	0019      	movs	r1, r3
   11b10:	2308      	movs	r3, #8
   11b12:	001a      	movs	r2, r3
   11b14:	4b08      	ldr	r3, [pc, #32]	; (11b38 <setPrimaryNumberIndex+0x44>)
   11b16:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b18:	4b06      	ldr	r3, [pc, #24]	; (11b34 <setPrimaryNumberIndex+0x40>)
   11b1a:	0019      	movs	r1, r3
   11b1c:	2008      	movs	r0, #8
   11b1e:	4b07      	ldr	r3, [pc, #28]	; (11b3c <setPrimaryNumberIndex+0x48>)
   11b20:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b22:	4b07      	ldr	r3, [pc, #28]	; (11b40 <setPrimaryNumberIndex+0x4c>)
   11b24:	4798      	blx	r3

}
   11b26:	46c0      	nop			; (mov r8, r8)
   11b28:	46bd      	mov	sp, r7
   11b2a:	b002      	add	sp, #8
   11b2c:	bd80      	pop	{r7, pc}
   11b2e:	46c0      	nop			; (mov r8, r8)
   11b30:	20000610 	.word	0x20000610
   11b34:	20000584 	.word	0x20000584
   11b38:	00028ddd 	.word	0x00028ddd
   11b3c:	000239f1 	.word	0x000239f1
   11b40:	00023b99 	.word	0x00023b99

00011b44 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b44:	b580      	push	{r7, lr}
   11b46:	b082      	sub	sp, #8
   11b48:	af00      	add	r7, sp, #0
   11b4a:	0002      	movs	r2, r0
   11b4c:	1dfb      	adds	r3, r7, #7
   11b4e:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b50:	4b0b      	ldr	r3, [pc, #44]	; (11b80 <setSecondaryNumberIndex+0x3c>)
   11b52:	1dfa      	adds	r2, r7, #7
   11b54:	7812      	ldrb	r2, [r2, #0]
   11b56:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b58:	4a0a      	ldr	r2, [pc, #40]	; (11b84 <setSecondaryNumberIndex+0x40>)
   11b5a:	4b09      	ldr	r3, [pc, #36]	; (11b80 <setSecondaryNumberIndex+0x3c>)
   11b5c:	0010      	movs	r0, r2
   11b5e:	0019      	movs	r1, r3
   11b60:	2308      	movs	r3, #8
   11b62:	001a      	movs	r2, r3
   11b64:	4b08      	ldr	r3, [pc, #32]	; (11b88 <setSecondaryNumberIndex+0x44>)
   11b66:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b68:	4b06      	ldr	r3, [pc, #24]	; (11b84 <setSecondaryNumberIndex+0x40>)
   11b6a:	0019      	movs	r1, r3
   11b6c:	2008      	movs	r0, #8
   11b6e:	4b07      	ldr	r3, [pc, #28]	; (11b8c <setSecondaryNumberIndex+0x48>)
   11b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b72:	4b07      	ldr	r3, [pc, #28]	; (11b90 <setSecondaryNumberIndex+0x4c>)
   11b74:	4798      	blx	r3
}
   11b76:	46c0      	nop			; (mov r8, r8)
   11b78:	46bd      	mov	sp, r7
   11b7a:	b002      	add	sp, #8
   11b7c:	bd80      	pop	{r7, pc}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	20000610 	.word	0x20000610
   11b84:	20000584 	.word	0x20000584
   11b88:	00028ddd 	.word	0x00028ddd
   11b8c:	000239f1 	.word	0x000239f1
   11b90:	00023b99 	.word	0x00023b99

00011b94 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11b94:	b590      	push	{r4, r7, lr}
   11b96:	b085      	sub	sp, #20
   11b98:	af00      	add	r7, sp, #0
   11b9a:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11b9c:	230e      	movs	r3, #14
   11b9e:	18fc      	adds	r4, r7, r3
   11ba0:	687b      	ldr	r3, [r7, #4]
   11ba2:	0018      	movs	r0, r3
   11ba4:	4b21      	ldr	r3, [pc, #132]	; (11c2c <addPrimaryIndexedNumber+0x98>)
   11ba6:	4798      	blx	r3
   11ba8:	0003      	movs	r3, r0
   11baa:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bac:	230f      	movs	r3, #15
   11bae:	18fb      	adds	r3, r7, r3
   11bb0:	22ff      	movs	r2, #255	; 0xff
   11bb2:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bb4:	4b1e      	ldr	r3, [pc, #120]	; (11c30 <addPrimaryIndexedNumber+0x9c>)
   11bb6:	785b      	ldrb	r3, [r3, #1]
   11bb8:	220e      	movs	r2, #14
   11bba:	18ba      	adds	r2, r7, r2
   11bbc:	7812      	ldrb	r2, [r2, #0]
   11bbe:	429a      	cmp	r2, r3
   11bc0:	d309      	bcc.n	11bd6 <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bc2:	230f      	movs	r3, #15
   11bc4:	18fb      	adds	r3, r7, r3
   11bc6:	4a1a      	ldr	r2, [pc, #104]	; (11c30 <addPrimaryIndexedNumber+0x9c>)
   11bc8:	7892      	ldrb	r2, [r2, #2]
   11bca:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11bcc:	687b      	ldr	r3, [r7, #4]
   11bce:	0018      	movs	r0, r3
   11bd0:	4b18      	ldr	r3, [pc, #96]	; (11c34 <addPrimaryIndexedNumber+0xa0>)
   11bd2:	4798      	blx	r3
   11bd4:	e00c      	b.n	11bf0 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bd6:	4b16      	ldr	r3, [pc, #88]	; (11c30 <addPrimaryIndexedNumber+0x9c>)
   11bd8:	785b      	ldrb	r3, [r3, #1]
   11bda:	220e      	movs	r2, #14
   11bdc:	18ba      	adds	r2, r7, r2
   11bde:	7812      	ldrb	r2, [r2, #0]
   11be0:	429a      	cmp	r2, r3
   11be2:	d205      	bcs.n	11bf0 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11be4:	230f      	movs	r3, #15
   11be6:	18fb      	adds	r3, r7, r3
   11be8:	220e      	movs	r2, #14
   11bea:	18ba      	adds	r2, r7, r2
   11bec:	7812      	ldrb	r2, [r2, #0]
   11bee:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11bf0:	4b0f      	ldr	r3, [pc, #60]	; (11c30 <addPrimaryIndexedNumber+0x9c>)
   11bf2:	785b      	ldrb	r3, [r3, #1]
   11bf4:	220f      	movs	r2, #15
   11bf6:	18ba      	adds	r2, r7, r2
   11bf8:	7812      	ldrb	r2, [r2, #0]
   11bfa:	429a      	cmp	r2, r3
   11bfc:	d210      	bcs.n	11c20 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11bfe:	4b0c      	ldr	r3, [pc, #48]	; (11c30 <addPrimaryIndexedNumber+0x9c>)
   11c00:	789b      	ldrb	r3, [r3, #2]
   11c02:	2b01      	cmp	r3, #1
   11c04:	d904      	bls.n	11c10 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c06:	4b0a      	ldr	r3, [pc, #40]	; (11c30 <addPrimaryIndexedNumber+0x9c>)
   11c08:	78db      	ldrb	r3, [r3, #3]
   11c0a:	0018      	movs	r0, r3
   11c0c:	4b0a      	ldr	r3, [pc, #40]	; (11c38 <addPrimaryIndexedNumber+0xa4>)
   11c0e:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c10:	230f      	movs	r3, #15
   11c12:	18fb      	adds	r3, r7, r3
   11c14:	781b      	ldrb	r3, [r3, #0]
   11c16:	0018      	movs	r0, r3
   11c18:	4b08      	ldr	r3, [pc, #32]	; (11c3c <addPrimaryIndexedNumber+0xa8>)
   11c1a:	4798      	blx	r3
		return true;
   11c1c:	2301      	movs	r3, #1
   11c1e:	e000      	b.n	11c22 <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c20:	2300      	movs	r3, #0
}
   11c22:	0018      	movs	r0, r3
   11c24:	46bd      	mov	sp, r7
   11c26:	b005      	add	sp, #20
   11c28:	bd90      	pop	{r4, r7, pc}
   11c2a:	46c0      	nop			; (mov r8, r8)
   11c2c:	00010de1 	.word	0x00010de1
   11c30:	20000610 	.word	0x20000610
   11c34:	00010ee5 	.word	0x00010ee5
   11c38:	00011b45 	.word	0x00011b45
   11c3c:	00011af5 	.word	0x00011af5

00011c40 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c40:	b590      	push	{r4, r7, lr}
   11c42:	b085      	sub	sp, #20
   11c44:	af00      	add	r7, sp, #0
   11c46:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c48:	4b21      	ldr	r3, [pc, #132]	; (11cd0 <addSecondaryIndexedNumber+0x90>)
   11c4a:	789b      	ldrb	r3, [r3, #2]
   11c4c:	2b01      	cmp	r3, #1
   11c4e:	d801      	bhi.n	11c54 <addSecondaryIndexedNumber+0x14>
	return false;
   11c50:	2300      	movs	r3, #0
   11c52:	e039      	b.n	11cc8 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c54:	230e      	movs	r3, #14
   11c56:	18fc      	adds	r4, r7, r3
   11c58:	687b      	ldr	r3, [r7, #4]
   11c5a:	0018      	movs	r0, r3
   11c5c:	4b1d      	ldr	r3, [pc, #116]	; (11cd4 <addSecondaryIndexedNumber+0x94>)
   11c5e:	4798      	blx	r3
   11c60:	0003      	movs	r3, r0
   11c62:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c64:	230f      	movs	r3, #15
   11c66:	18fb      	adds	r3, r7, r3
   11c68:	22ff      	movs	r2, #255	; 0xff
   11c6a:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c6c:	4b18      	ldr	r3, [pc, #96]	; (11cd0 <addSecondaryIndexedNumber+0x90>)
   11c6e:	785b      	ldrb	r3, [r3, #1]
   11c70:	220e      	movs	r2, #14
   11c72:	18ba      	adds	r2, r7, r2
   11c74:	7812      	ldrb	r2, [r2, #0]
   11c76:	429a      	cmp	r2, r3
   11c78:	d309      	bcc.n	11c8e <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c7a:	230f      	movs	r3, #15
   11c7c:	18fb      	adds	r3, r7, r3
   11c7e:	4a14      	ldr	r2, [pc, #80]	; (11cd0 <addSecondaryIndexedNumber+0x90>)
   11c80:	7892      	ldrb	r2, [r2, #2]
   11c82:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c84:	687b      	ldr	r3, [r7, #4]
   11c86:	0018      	movs	r0, r3
   11c88:	4b13      	ldr	r3, [pc, #76]	; (11cd8 <addSecondaryIndexedNumber+0x98>)
   11c8a:	4798      	blx	r3
   11c8c:	e00c      	b.n	11ca8 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11c8e:	4b10      	ldr	r3, [pc, #64]	; (11cd0 <addSecondaryIndexedNumber+0x90>)
   11c90:	785b      	ldrb	r3, [r3, #1]
   11c92:	220e      	movs	r2, #14
   11c94:	18ba      	adds	r2, r7, r2
   11c96:	7812      	ldrb	r2, [r2, #0]
   11c98:	429a      	cmp	r2, r3
   11c9a:	d205      	bcs.n	11ca8 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11c9c:	230f      	movs	r3, #15
   11c9e:	18fb      	adds	r3, r7, r3
   11ca0:	220e      	movs	r2, #14
   11ca2:	18ba      	adds	r2, r7, r2
   11ca4:	7812      	ldrb	r2, [r2, #0]
   11ca6:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11ca8:	4b09      	ldr	r3, [pc, #36]	; (11cd0 <addSecondaryIndexedNumber+0x90>)
   11caa:	785b      	ldrb	r3, [r3, #1]
   11cac:	220f      	movs	r2, #15
   11cae:	18ba      	adds	r2, r7, r2
   11cb0:	7812      	ldrb	r2, [r2, #0]
   11cb2:	429a      	cmp	r2, r3
   11cb4:	d207      	bcs.n	11cc6 <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cb6:	230f      	movs	r3, #15
   11cb8:	18fb      	adds	r3, r7, r3
   11cba:	781b      	ldrb	r3, [r3, #0]
   11cbc:	0018      	movs	r0, r3
   11cbe:	4b07      	ldr	r3, [pc, #28]	; (11cdc <addSecondaryIndexedNumber+0x9c>)
   11cc0:	4798      	blx	r3
		return true;
   11cc2:	2301      	movs	r3, #1
   11cc4:	e000      	b.n	11cc8 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cc6:	2300      	movs	r3, #0
}
   11cc8:	0018      	movs	r0, r3
   11cca:	46bd      	mov	sp, r7
   11ccc:	b005      	add	sp, #20
   11cce:	bd90      	pop	{r4, r7, pc}
   11cd0:	20000610 	.word	0x20000610
   11cd4:	00010de1 	.word	0x00010de1
   11cd8:	00010ee5 	.word	0x00010ee5
   11cdc:	00011b45 	.word	0x00011b45

00011ce0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11ce0:	b580      	push	{r7, lr}
   11ce2:	b082      	sub	sp, #8
   11ce4:	af00      	add	r7, sp, #0
   11ce6:	0002      	movs	r2, r0
   11ce8:	1dfb      	adds	r3, r7, #7
   11cea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11cec:	4b06      	ldr	r3, [pc, #24]	; (11d08 <system_interrupt_enable+0x28>)
   11cee:	1dfa      	adds	r2, r7, #7
   11cf0:	7812      	ldrb	r2, [r2, #0]
   11cf2:	0011      	movs	r1, r2
   11cf4:	221f      	movs	r2, #31
   11cf6:	400a      	ands	r2, r1
   11cf8:	2101      	movs	r1, #1
   11cfa:	4091      	lsls	r1, r2
   11cfc:	000a      	movs	r2, r1
   11cfe:	601a      	str	r2, [r3, #0]
}
   11d00:	46c0      	nop			; (mov r8, r8)
   11d02:	46bd      	mov	sp, r7
   11d04:	b002      	add	sp, #8
   11d06:	bd80      	pop	{r7, pc}
   11d08:	e000e100 	.word	0xe000e100

00011d0c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d0c:	b580      	push	{r7, lr}
   11d0e:	b082      	sub	sp, #8
   11d10:	af00      	add	r7, sp, #0
   11d12:	0002      	movs	r2, r0
   11d14:	1dfb      	adds	r3, r7, #7
   11d16:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d18:	4a07      	ldr	r2, [pc, #28]	; (11d38 <system_interrupt_disable+0x2c>)
   11d1a:	1dfb      	adds	r3, r7, #7
   11d1c:	781b      	ldrb	r3, [r3, #0]
   11d1e:	0019      	movs	r1, r3
   11d20:	231f      	movs	r3, #31
   11d22:	400b      	ands	r3, r1
   11d24:	2101      	movs	r1, #1
   11d26:	4099      	lsls	r1, r3
   11d28:	000b      	movs	r3, r1
   11d2a:	0019      	movs	r1, r3
   11d2c:	2380      	movs	r3, #128	; 0x80
   11d2e:	50d1      	str	r1, [r2, r3]
}
   11d30:	46c0      	nop			; (mov r8, r8)
   11d32:	46bd      	mov	sp, r7
   11d34:	b002      	add	sp, #8
   11d36:	bd80      	pop	{r7, pc}
   11d38:	e000e100 	.word	0xe000e100

00011d3c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d3c:	b580      	push	{r7, lr}
   11d3e:	b084      	sub	sp, #16
   11d40:	af00      	add	r7, sp, #0
   11d42:	0002      	movs	r2, r0
   11d44:	1dfb      	adds	r3, r7, #7
   11d46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d48:	230f      	movs	r3, #15
   11d4a:	18fb      	adds	r3, r7, r3
   11d4c:	1dfa      	adds	r2, r7, #7
   11d4e:	7812      	ldrb	r2, [r2, #0]
   11d50:	09d2      	lsrs	r2, r2, #7
   11d52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d54:	230e      	movs	r3, #14
   11d56:	18fb      	adds	r3, r7, r3
   11d58:	1dfa      	adds	r2, r7, #7
   11d5a:	7812      	ldrb	r2, [r2, #0]
   11d5c:	0952      	lsrs	r2, r2, #5
   11d5e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d60:	4b0d      	ldr	r3, [pc, #52]	; (11d98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d62:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d64:	230f      	movs	r3, #15
   11d66:	18fb      	adds	r3, r7, r3
   11d68:	781b      	ldrb	r3, [r3, #0]
   11d6a:	2b00      	cmp	r3, #0
   11d6c:	d10f      	bne.n	11d8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d6e:	230f      	movs	r3, #15
   11d70:	18fb      	adds	r3, r7, r3
   11d72:	781b      	ldrb	r3, [r3, #0]
   11d74:	009b      	lsls	r3, r3, #2
   11d76:	2210      	movs	r2, #16
   11d78:	4694      	mov	ip, r2
   11d7a:	44bc      	add	ip, r7
   11d7c:	4463      	add	r3, ip
   11d7e:	3b08      	subs	r3, #8
   11d80:	681a      	ldr	r2, [r3, #0]
   11d82:	230e      	movs	r3, #14
   11d84:	18fb      	adds	r3, r7, r3
   11d86:	781b      	ldrb	r3, [r3, #0]
   11d88:	01db      	lsls	r3, r3, #7
   11d8a:	18d3      	adds	r3, r2, r3
   11d8c:	e000      	b.n	11d90 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11d8e:	2300      	movs	r3, #0
	}
}
   11d90:	0018      	movs	r0, r3
   11d92:	46bd      	mov	sp, r7
   11d94:	b004      	add	sp, #16
   11d96:	bd80      	pop	{r7, pc}
   11d98:	41004400 	.word	0x41004400

00011d9c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d9c:	b580      	push	{r7, lr}
   11d9e:	b082      	sub	sp, #8
   11da0:	af00      	add	r7, sp, #0
   11da2:	0002      	movs	r2, r0
   11da4:	1dfb      	adds	r3, r7, #7
   11da6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11da8:	1dfb      	adds	r3, r7, #7
   11daa:	781b      	ldrb	r3, [r3, #0]
   11dac:	0018      	movs	r0, r3
   11dae:	4b03      	ldr	r3, [pc, #12]	; (11dbc <port_get_group_from_gpio_pin+0x20>)
   11db0:	4798      	blx	r3
   11db2:	0003      	movs	r3, r0
}
   11db4:	0018      	movs	r0, r3
   11db6:	46bd      	mov	sp, r7
   11db8:	b002      	add	sp, #8
   11dba:	bd80      	pop	{r7, pc}
   11dbc:	00011d3d 	.word	0x00011d3d

00011dc0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dc0:	b580      	push	{r7, lr}
   11dc2:	b082      	sub	sp, #8
   11dc4:	af00      	add	r7, sp, #0
   11dc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11dc8:	687b      	ldr	r3, [r7, #4]
   11dca:	2200      	movs	r2, #0
   11dcc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11dce:	687b      	ldr	r3, [r7, #4]
   11dd0:	2201      	movs	r2, #1
   11dd2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11dd4:	687b      	ldr	r3, [r7, #4]
   11dd6:	2200      	movs	r2, #0
   11dd8:	709a      	strb	r2, [r3, #2]
}
   11dda:	46c0      	nop			; (mov r8, r8)
   11ddc:	46bd      	mov	sp, r7
   11dde:	b002      	add	sp, #8
   11de0:	bd80      	pop	{r7, pc}
	...

00011de4 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11de4:	b580      	push	{r7, lr}
   11de6:	b084      	sub	sp, #16
   11de8:	af00      	add	r7, sp, #0
   11dea:	0002      	movs	r2, r0
   11dec:	1dfb      	adds	r3, r7, #7
   11dee:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11df0:	1dfb      	adds	r3, r7, #7
   11df2:	781b      	ldrb	r3, [r3, #0]
   11df4:	0018      	movs	r0, r3
   11df6:	4b0b      	ldr	r3, [pc, #44]	; (11e24 <port_pin_get_input_level+0x40>)
   11df8:	4798      	blx	r3
   11dfa:	0003      	movs	r3, r0
   11dfc:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11dfe:	1dfb      	adds	r3, r7, #7
   11e00:	781b      	ldrb	r3, [r3, #0]
   11e02:	221f      	movs	r2, #31
   11e04:	4013      	ands	r3, r2
   11e06:	2201      	movs	r2, #1
   11e08:	409a      	lsls	r2, r3
   11e0a:	0013      	movs	r3, r2
   11e0c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e0e:	68fb      	ldr	r3, [r7, #12]
   11e10:	6a1b      	ldr	r3, [r3, #32]
   11e12:	68ba      	ldr	r2, [r7, #8]
   11e14:	4013      	ands	r3, r2
   11e16:	1e5a      	subs	r2, r3, #1
   11e18:	4193      	sbcs	r3, r2
   11e1a:	b2db      	uxtb	r3, r3
}
   11e1c:	0018      	movs	r0, r3
   11e1e:	46bd      	mov	sp, r7
   11e20:	b004      	add	sp, #16
   11e22:	bd80      	pop	{r7, pc}
   11e24:	00011d9d 	.word	0x00011d9d

00011e28 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e28:	b580      	push	{r7, lr}
   11e2a:	b084      	sub	sp, #16
   11e2c:	af00      	add	r7, sp, #0
   11e2e:	0002      	movs	r2, r0
   11e30:	1dfb      	adds	r3, r7, #7
   11e32:	701a      	strb	r2, [r3, #0]
   11e34:	1dbb      	adds	r3, r7, #6
   11e36:	1c0a      	adds	r2, r1, #0
   11e38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e3a:	1dfb      	adds	r3, r7, #7
   11e3c:	781b      	ldrb	r3, [r3, #0]
   11e3e:	0018      	movs	r0, r3
   11e40:	4b0d      	ldr	r3, [pc, #52]	; (11e78 <port_pin_set_output_level+0x50>)
   11e42:	4798      	blx	r3
   11e44:	0003      	movs	r3, r0
   11e46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e48:	1dfb      	adds	r3, r7, #7
   11e4a:	781b      	ldrb	r3, [r3, #0]
   11e4c:	221f      	movs	r2, #31
   11e4e:	4013      	ands	r3, r2
   11e50:	2201      	movs	r2, #1
   11e52:	409a      	lsls	r2, r3
   11e54:	0013      	movs	r3, r2
   11e56:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e58:	1dbb      	adds	r3, r7, #6
   11e5a:	781b      	ldrb	r3, [r3, #0]
   11e5c:	2b00      	cmp	r3, #0
   11e5e:	d003      	beq.n	11e68 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e60:	68fb      	ldr	r3, [r7, #12]
   11e62:	68ba      	ldr	r2, [r7, #8]
   11e64:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e66:	e002      	b.n	11e6e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e68:	68fb      	ldr	r3, [r7, #12]
   11e6a:	68ba      	ldr	r2, [r7, #8]
   11e6c:	615a      	str	r2, [r3, #20]
}
   11e6e:	46c0      	nop			; (mov r8, r8)
   11e70:	46bd      	mov	sp, r7
   11e72:	b004      	add	sp, #16
   11e74:	bd80      	pop	{r7, pc}
   11e76:	46c0      	nop			; (mov r8, r8)
   11e78:	00011d9d 	.word	0x00011d9d

00011e7c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e7c:	b580      	push	{r7, lr}
   11e7e:	b084      	sub	sp, #16
   11e80:	af00      	add	r7, sp, #0
   11e82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e84:	687b      	ldr	r3, [r7, #4]
   11e86:	681b      	ldr	r3, [r3, #0]
   11e88:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11e8a:	68fb      	ldr	r3, [r7, #12]
   11e8c:	69db      	ldr	r3, [r3, #28]
   11e8e:	1e5a      	subs	r2, r3, #1
   11e90:	4193      	sbcs	r3, r2
   11e92:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11e94:	0018      	movs	r0, r3
   11e96:	46bd      	mov	sp, r7
   11e98:	b004      	add	sp, #16
   11e9a:	bd80      	pop	{r7, pc}

00011e9c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11e9c:	b580      	push	{r7, lr}
   11e9e:	b082      	sub	sp, #8
   11ea0:	af00      	add	r7, sp, #0
   11ea2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11ea4:	46c0      	nop			; (mov r8, r8)
   11ea6:	687b      	ldr	r3, [r7, #4]
   11ea8:	0018      	movs	r0, r3
   11eaa:	4b04      	ldr	r3, [pc, #16]	; (11ebc <_usart_wait_for_sync+0x20>)
   11eac:	4798      	blx	r3
   11eae:	1e03      	subs	r3, r0, #0
   11eb0:	d1f9      	bne.n	11ea6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eb2:	46c0      	nop			; (mov r8, r8)
   11eb4:	46bd      	mov	sp, r7
   11eb6:	b002      	add	sp, #8
   11eb8:	bd80      	pop	{r7, pc}
   11eba:	46c0      	nop			; (mov r8, r8)
   11ebc:	00011e7d 	.word	0x00011e7d

00011ec0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ec0:	b580      	push	{r7, lr}
   11ec2:	b082      	sub	sp, #8
   11ec4:	af00      	add	r7, sp, #0
   11ec6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ec8:	687b      	ldr	r3, [r7, #4]
   11eca:	2280      	movs	r2, #128	; 0x80
   11ecc:	05d2      	lsls	r2, r2, #23
   11ece:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ed0:	687b      	ldr	r3, [r7, #4]
   11ed2:	2200      	movs	r2, #0
   11ed4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11ed6:	687b      	ldr	r3, [r7, #4]
   11ed8:	22ff      	movs	r2, #255	; 0xff
   11eda:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11edc:	687b      	ldr	r3, [r7, #4]
   11ede:	2200      	movs	r2, #0
   11ee0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11ee2:	687b      	ldr	r3, [r7, #4]
   11ee4:	2200      	movs	r2, #0
   11ee6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2296      	movs	r2, #150	; 0x96
   11eec:	0192      	lsls	r2, r2, #6
   11eee:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11ef0:	687b      	ldr	r3, [r7, #4]
   11ef2:	2224      	movs	r2, #36	; 0x24
   11ef4:	2101      	movs	r1, #1
   11ef6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11ef8:	687b      	ldr	r3, [r7, #4]
   11efa:	2225      	movs	r2, #37	; 0x25
   11efc:	2101      	movs	r1, #1
   11efe:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2226      	movs	r2, #38	; 0x26
   11f04:	2100      	movs	r1, #0
   11f06:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2227      	movs	r2, #39	; 0x27
   11f0c:	2100      	movs	r1, #0
   11f0e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2200      	movs	r2, #0
   11f14:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f16:	687b      	ldr	r3, [r7, #4]
   11f18:	2288      	movs	r2, #136	; 0x88
   11f1a:	0352      	lsls	r2, r2, #13
   11f1c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f1e:	687b      	ldr	r3, [r7, #4]
   11f20:	222c      	movs	r2, #44	; 0x2c
   11f22:	2100      	movs	r1, #0
   11f24:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f26:	687b      	ldr	r3, [r7, #4]
   11f28:	222d      	movs	r2, #45	; 0x2d
   11f2a:	2100      	movs	r1, #0
   11f2c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	2200      	movs	r2, #0
   11f32:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f34:	687b      	ldr	r3, [r7, #4]
   11f36:	2200      	movs	r2, #0
   11f38:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f3a:	687b      	ldr	r3, [r7, #4]
   11f3c:	2200      	movs	r2, #0
   11f3e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f40:	687b      	ldr	r3, [r7, #4]
   11f42:	2200      	movs	r2, #0
   11f44:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f46:	687b      	ldr	r3, [r7, #4]
   11f48:	2200      	movs	r2, #0
   11f4a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	2200      	movs	r2, #0
   11f50:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f52:	687b      	ldr	r3, [r7, #4]
   11f54:	2200      	movs	r2, #0
   11f56:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f58:	687b      	ldr	r3, [r7, #4]
   11f5a:	2200      	movs	r2, #0
   11f5c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	2200      	movs	r2, #0
   11f62:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	2200      	movs	r2, #0
   11f68:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2213      	movs	r2, #19
   11f6e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f70:	687b      	ldr	r3, [r7, #4]
   11f72:	2200      	movs	r2, #0
   11f74:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f76:	46c0      	nop			; (mov r8, r8)
   11f78:	46bd      	mov	sp, r7
   11f7a:	b002      	add	sp, #8
   11f7c:	bd80      	pop	{r7, pc}
	...

00011f80 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f80:	b580      	push	{r7, lr}
   11f82:	b084      	sub	sp, #16
   11f84:	af00      	add	r7, sp, #0
   11f86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11f88:	687b      	ldr	r3, [r7, #4]
   11f8a:	681b      	ldr	r3, [r3, #0]
   11f8c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11f8e:	687b      	ldr	r3, [r7, #4]
   11f90:	681b      	ldr	r3, [r3, #0]
   11f92:	0018      	movs	r0, r3
   11f94:	4b09      	ldr	r3, [pc, #36]	; (11fbc <usart_enable+0x3c>)
   11f96:	4798      	blx	r3
   11f98:	0003      	movs	r3, r0
   11f9a:	0018      	movs	r0, r3
   11f9c:	4b08      	ldr	r3, [pc, #32]	; (11fc0 <usart_enable+0x40>)
   11f9e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	0018      	movs	r0, r3
   11fa4:	4b07      	ldr	r3, [pc, #28]	; (11fc4 <usart_enable+0x44>)
   11fa6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fa8:	68fb      	ldr	r3, [r7, #12]
   11faa:	681b      	ldr	r3, [r3, #0]
   11fac:	2202      	movs	r2, #2
   11fae:	431a      	orrs	r2, r3
   11fb0:	68fb      	ldr	r3, [r7, #12]
   11fb2:	601a      	str	r2, [r3, #0]
}
   11fb4:	46c0      	nop			; (mov r8, r8)
   11fb6:	46bd      	mov	sp, r7
   11fb8:	b004      	add	sp, #16
   11fba:	bd80      	pop	{r7, pc}
   11fbc:	0002225d 	.word	0x0002225d
   11fc0:	00011ce1 	.word	0x00011ce1
   11fc4:	00011e9d 	.word	0x00011e9d

00011fc8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fc8:	b580      	push	{r7, lr}
   11fca:	b084      	sub	sp, #16
   11fcc:	af00      	add	r7, sp, #0
   11fce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fd0:	687b      	ldr	r3, [r7, #4]
   11fd2:	681b      	ldr	r3, [r3, #0]
   11fd4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fd6:	687b      	ldr	r3, [r7, #4]
   11fd8:	681b      	ldr	r3, [r3, #0]
   11fda:	0018      	movs	r0, r3
   11fdc:	4b0a      	ldr	r3, [pc, #40]	; (12008 <usart_disable+0x40>)
   11fde:	4798      	blx	r3
   11fe0:	0003      	movs	r3, r0
   11fe2:	0018      	movs	r0, r3
   11fe4:	4b09      	ldr	r3, [pc, #36]	; (1200c <usart_disable+0x44>)
   11fe6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fe8:	687b      	ldr	r3, [r7, #4]
   11fea:	0018      	movs	r0, r3
   11fec:	4b08      	ldr	r3, [pc, #32]	; (12010 <usart_disable+0x48>)
   11fee:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   11ff0:	68fb      	ldr	r3, [r7, #12]
   11ff2:	681b      	ldr	r3, [r3, #0]
   11ff4:	2202      	movs	r2, #2
   11ff6:	4393      	bics	r3, r2
   11ff8:	001a      	movs	r2, r3
   11ffa:	68fb      	ldr	r3, [r7, #12]
   11ffc:	601a      	str	r2, [r3, #0]
}
   11ffe:	46c0      	nop			; (mov r8, r8)
   12000:	46bd      	mov	sp, r7
   12002:	b004      	add	sp, #16
   12004:	bd80      	pop	{r7, pc}
   12006:	46c0      	nop			; (mov r8, r8)
   12008:	0002225d 	.word	0x0002225d
   1200c:	00011d0d 	.word	0x00011d0d
   12010:	00011e9d 	.word	0x00011e9d

00012014 <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   12014:	b580      	push	{r7, lr}
   12016:	b084      	sub	sp, #16
   12018:	af00      	add	r7, sp, #0
   1201a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1201c:	687b      	ldr	r3, [r7, #4]
   1201e:	681b      	ldr	r3, [r3, #0]
   12020:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   12022:	687b      	ldr	r3, [r7, #4]
   12024:	0018      	movs	r0, r3
   12026:	4b06      	ldr	r3, [pc, #24]	; (12040 <usart_reset+0x2c>)
   12028:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1202a:	687b      	ldr	r3, [r7, #4]
   1202c:	0018      	movs	r0, r3
   1202e:	4b05      	ldr	r3, [pc, #20]	; (12044 <usart_reset+0x30>)
   12030:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   12032:	68fb      	ldr	r3, [r7, #12]
   12034:	2201      	movs	r2, #1
   12036:	601a      	str	r2, [r3, #0]
}
   12038:	46c0      	nop			; (mov r8, r8)
   1203a:	46bd      	mov	sp, r7
   1203c:	b004      	add	sp, #16
   1203e:	bd80      	pop	{r7, pc}
   12040:	00011fc9 	.word	0x00011fc9
   12044:	00011e9d 	.word	0x00011e9d

00012048 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12048:	b580      	push	{r7, lr}
   1204a:	b082      	sub	sp, #8
   1204c:	af00      	add	r7, sp, #0
   1204e:	6078      	str	r0, [r7, #4]
}
   12050:	46c0      	nop			; (mov r8, r8)
   12052:	46bd      	mov	sp, r7
   12054:	b002      	add	sp, #8
   12056:	bd80      	pop	{r7, pc}

00012058 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12058:	b580      	push	{r7, lr}
   1205a:	b082      	sub	sp, #8
   1205c:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1205e:	4b09      	ldr	r3, [pc, #36]	; (12084 <Flush_RX_Buffer+0x2c>)
   12060:	681b      	ldr	r3, [r3, #0]
   12062:	1cf9      	adds	r1, r7, #3
   12064:	2200      	movs	r2, #0
   12066:	0018      	movs	r0, r3
   12068:	4b07      	ldr	r3, [pc, #28]	; (12088 <Flush_RX_Buffer+0x30>)
   1206a:	4798      	blx	r3
   1206c:	0003      	movs	r3, r0
   1206e:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12070:	687b      	ldr	r3, [r7, #4]
   12072:	2b00      	cmp	r3, #0
   12074:	d000      	beq.n	12078 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12076:	e7f2      	b.n	1205e <Flush_RX_Buffer+0x6>
		{
			break;
   12078:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1207a:	46c0      	nop			; (mov r8, r8)
   1207c:	46bd      	mov	sp, r7
   1207e:	b002      	add	sp, #8
   12080:	bd80      	pop	{r7, pc}
   12082:	46c0      	nop			; (mov r8, r8)
   12084:	20000220 	.word	0x20000220
   12088:	0001f441 	.word	0x0001f441

0001208c <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   1208c:	b590      	push	{r4, r7, lr}
   1208e:	b085      	sub	sp, #20
   12090:	af00      	add	r7, sp, #0
   12092:	0002      	movs	r2, r0
   12094:	1dfb      	adds	r3, r7, #7
   12096:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   12098:	4b19      	ldr	r3, [pc, #100]	; (12100 <gsm_rx_handler+0x74>)
   1209a:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   1209c:	68fb      	ldr	r3, [r7, #12]
   1209e:	7e1b      	ldrb	r3, [r3, #24]
   120a0:	b2db      	uxtb	r3, r3
   120a2:	001a      	movs	r2, r3
   120a4:	2304      	movs	r3, #4
   120a6:	4013      	ands	r3, r2
   120a8:	d026      	beq.n	120f8 <gsm_rx_handler+0x6c>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120aa:	68fb      	ldr	r3, [r7, #12]
   120ac:	8b5b      	ldrh	r3, [r3, #26]
   120ae:	b29b      	uxth	r3, r3
   120b0:	b2da      	uxtb	r2, r3
   120b2:	230b      	movs	r3, #11
   120b4:	18fb      	adds	r3, r7, r3
   120b6:	2106      	movs	r1, #6
   120b8:	400a      	ands	r2, r1
   120ba:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120bc:	230b      	movs	r3, #11
   120be:	18fb      	adds	r3, r7, r3
   120c0:	781b      	ldrb	r3, [r3, #0]
   120c2:	2b00      	cmp	r3, #0
   120c4:	d006      	beq.n	120d4 <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120c6:	230b      	movs	r3, #11
   120c8:	18fb      	adds	r3, r7, r3
   120ca:	781b      	ldrb	r3, [r3, #0]
   120cc:	b29a      	uxth	r2, r3
   120ce:	68fb      	ldr	r3, [r7, #12]
   120d0:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			gsm_module_exit_sleep(true);
		}
	}
}
   120d2:	e011      	b.n	120f8 <gsm_rx_handler+0x6c>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120d4:	68fb      	ldr	r3, [r7, #12]
   120d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120d8:	b29b      	uxth	r3, r3
   120da:	b2da      	uxtb	r2, r3
   120dc:	230a      	movs	r3, #10
   120de:	18fb      	adds	r3, r7, r3
   120e0:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120e2:	4b08      	ldr	r3, [pc, #32]	; (12104 <gsm_rx_handler+0x78>)
   120e4:	6818      	ldr	r0, [r3, #0]
   120e6:	230a      	movs	r3, #10
   120e8:	18f9      	adds	r1, r7, r3
   120ea:	2300      	movs	r3, #0
   120ec:	2200      	movs	r2, #0
   120ee:	4c06      	ldr	r4, [pc, #24]	; (12108 <gsm_rx_handler+0x7c>)
   120f0:	47a0      	blx	r4
			gsm_module_exit_sleep(true);
   120f2:	2001      	movs	r0, #1
   120f4:	4b05      	ldr	r3, [pc, #20]	; (1210c <gsm_rx_handler+0x80>)
   120f6:	4798      	blx	r3
}
   120f8:	46c0      	nop			; (mov r8, r8)
   120fa:	46bd      	mov	sp, r7
   120fc:	b005      	add	sp, #20
   120fe:	bd90      	pop	{r4, r7, pc}
   12100:	42001400 	.word	0x42001400
   12104:	20000220 	.word	0x20000220
   12108:	0001f321 	.word	0x0001f321
   1210c:	000122f9 	.word	0x000122f9

00012110 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12110:	b580      	push	{r7, lr}
   12112:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12114:	2031      	movs	r0, #49	; 0x31
   12116:	4b09      	ldr	r3, [pc, #36]	; (1213c <gsm_ring_detect_pin_callback+0x2c>)
   12118:	4798      	blx	r3
   1211a:	0003      	movs	r3, r0
   1211c:	1e5a      	subs	r2, r3, #1
   1211e:	4193      	sbcs	r3, r2
   12120:	b2db      	uxtb	r3, r3
   12122:	2201      	movs	r2, #1
   12124:	4053      	eors	r3, r2
   12126:	b2db      	uxtb	r3, r3
   12128:	1c1a      	adds	r2, r3, #0
   1212a:	2301      	movs	r3, #1
   1212c:	4013      	ands	r3, r2
   1212e:	b2da      	uxtb	r2, r3
   12130:	4b03      	ldr	r3, [pc, #12]	; (12140 <gsm_ring_detect_pin_callback+0x30>)
   12132:	701a      	strb	r2, [r3, #0]
}
   12134:	46c0      	nop			; (mov r8, r8)
   12136:	46bd      	mov	sp, r7
   12138:	bd80      	pop	{r7, pc}
   1213a:	46c0      	nop			; (mov r8, r8)
   1213c:	00011de5 	.word	0x00011de5
   12140:	2000068a 	.word	0x2000068a

00012144 <gsm_init>:

void gsm_init(void)
{
   12144:	b590      	push	{r4, r7, lr}
   12146:	b097      	sub	sp, #92	; 0x5c
   12148:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1214a:	234c      	movs	r3, #76	; 0x4c
   1214c:	18fb      	adds	r3, r7, r3
   1214e:	0018      	movs	r0, r3
   12150:	4b4d      	ldr	r3, [pc, #308]	; (12288 <gsm_init+0x144>)
   12152:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12154:	234c      	movs	r3, #76	; 0x4c
   12156:	18fb      	adds	r3, r7, r3
   12158:	2201      	movs	r2, #1
   1215a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   1215c:	234c      	movs	r3, #76	; 0x4c
   1215e:	18fb      	adds	r3, r7, r3
   12160:	0019      	movs	r1, r3
   12162:	2014      	movs	r0, #20
   12164:	4b49      	ldr	r3, [pc, #292]	; (1228c <gsm_init+0x148>)
   12166:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12168:	2100      	movs	r1, #0
   1216a:	2014      	movs	r0, #20
   1216c:	4b48      	ldr	r3, [pc, #288]	; (12290 <gsm_init+0x14c>)
   1216e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12170:	2340      	movs	r3, #64	; 0x40
   12172:	18fb      	adds	r3, r7, r3
   12174:	0018      	movs	r0, r3
   12176:	4b47      	ldr	r3, [pc, #284]	; (12294 <gsm_init+0x150>)
   12178:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1217a:	2340      	movs	r3, #64	; 0x40
   1217c:	18fb      	adds	r3, r7, r3
   1217e:	2231      	movs	r2, #49	; 0x31
   12180:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   12182:	2340      	movs	r3, #64	; 0x40
   12184:	18fb      	adds	r3, r7, r3
   12186:	2200      	movs	r2, #0
   12188:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1218a:	2340      	movs	r3, #64	; 0x40
   1218c:	18fb      	adds	r3, r7, r3
   1218e:	2201      	movs	r2, #1
   12190:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   12192:	2340      	movs	r3, #64	; 0x40
   12194:	18fb      	adds	r3, r7, r3
   12196:	2203      	movs	r2, #3
   12198:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	0019      	movs	r1, r3
   121a0:	2001      	movs	r0, #1
   121a2:	4b3d      	ldr	r3, [pc, #244]	; (12298 <gsm_init+0x154>)
   121a4:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121a6:	2100      	movs	r1, #0
   121a8:	2001      	movs	r0, #1
   121aa:	4b3c      	ldr	r3, [pc, #240]	; (1229c <gsm_init+0x158>)
   121ac:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121ae:	4b3c      	ldr	r3, [pc, #240]	; (122a0 <gsm_init+0x15c>)
   121b0:	2200      	movs	r2, #0
   121b2:	2101      	movs	r1, #1
   121b4:	0018      	movs	r0, r3
   121b6:	4b3b      	ldr	r3, [pc, #236]	; (122a4 <gsm_init+0x160>)
   121b8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121ba:	2200      	movs	r2, #0
   121bc:	2101      	movs	r1, #1
   121be:	20f0      	movs	r0, #240	; 0xf0
   121c0:	4b39      	ldr	r3, [pc, #228]	; (122a8 <gsm_init+0x164>)
   121c2:	4798      	blx	r3
   121c4:	0002      	movs	r2, r0
   121c6:	4b39      	ldr	r3, [pc, #228]	; (122ac <gsm_init+0x168>)
   121c8:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121ca:	4939      	ldr	r1, [pc, #228]	; (122b0 <gsm_init+0x16c>)
   121cc:	4839      	ldr	r0, [pc, #228]	; (122b4 <gsm_init+0x170>)
   121ce:	4b3a      	ldr	r3, [pc, #232]	; (122b8 <gsm_init+0x174>)
   121d0:	9300      	str	r3, [sp, #0]
   121d2:	2300      	movs	r3, #0
   121d4:	2200      	movs	r2, #0
   121d6:	4c39      	ldr	r4, [pc, #228]	; (122bc <gsm_init+0x178>)
   121d8:	47a0      	blx	r4
   121da:	0002      	movs	r2, r0
   121dc:	4b38      	ldr	r3, [pc, #224]	; (122c0 <gsm_init+0x17c>)
   121de:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   121e0:	2203      	movs	r2, #3
   121e2:	2100      	movs	r1, #0
   121e4:	2001      	movs	r0, #1
   121e6:	4b30      	ldr	r3, [pc, #192]	; (122a8 <gsm_init+0x164>)
   121e8:	4798      	blx	r3
   121ea:	0002      	movs	r2, r0
   121ec:	4b35      	ldr	r3, [pc, #212]	; (122c4 <gsm_init+0x180>)
   121ee:	601a      	str	r2, [r3, #0]
   121f0:	4b34      	ldr	r3, [pc, #208]	; (122c4 <gsm_init+0x180>)
   121f2:	681b      	ldr	r3, [r3, #0]
   121f4:	2b00      	cmp	r3, #0
   121f6:	d006      	beq.n	12206 <gsm_init+0xc2>
   121f8:	4b32      	ldr	r3, [pc, #200]	; (122c4 <gsm_init+0x180>)
   121fa:	6818      	ldr	r0, [r3, #0]
   121fc:	2300      	movs	r3, #0
   121fe:	2200      	movs	r2, #0
   12200:	2100      	movs	r1, #0
   12202:	4c31      	ldr	r4, [pc, #196]	; (122c8 <gsm_init+0x184>)
   12204:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   12206:	003b      	movs	r3, r7
   12208:	0018      	movs	r0, r3
   1220a:	4b30      	ldr	r3, [pc, #192]	; (122cc <gsm_init+0x188>)
   1220c:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   1220e:	003b      	movs	r3, r7
   12210:	22e1      	movs	r2, #225	; 0xe1
   12212:	0252      	lsls	r2, r2, #9
   12214:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   12216:	003b      	movs	r3, r7
   12218:	2280      	movs	r2, #128	; 0x80
   1221a:	0352      	lsls	r2, r2, #13
   1221c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   1221e:	003b      	movs	r3, r7
   12220:	4a2b      	ldr	r2, [pc, #172]	; (122d0 <gsm_init+0x18c>)
   12222:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12224:	003b      	movs	r3, r7
   12226:	4a2b      	ldr	r2, [pc, #172]	; (122d4 <gsm_init+0x190>)
   12228:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1222a:	003b      	movs	r3, r7
   1222c:	2201      	movs	r2, #1
   1222e:	4252      	negs	r2, r2
   12230:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12232:	003b      	movs	r3, r7
   12234:	2201      	movs	r2, #1
   12236:	4252      	negs	r2, r2
   12238:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1223a:	003b      	movs	r3, r7
   1223c:	222c      	movs	r2, #44	; 0x2c
   1223e:	2101      	movs	r1, #1
   12240:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12242:	e003      	b.n	1224c <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12244:	4b24      	ldr	r3, [pc, #144]	; (122d8 <gsm_init+0x194>)
   12246:	0018      	movs	r0, r3
   12248:	4b24      	ldr	r3, [pc, #144]	; (122dc <gsm_init+0x198>)
   1224a:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1224c:	003a      	movs	r2, r7
   1224e:	4924      	ldr	r1, [pc, #144]	; (122e0 <gsm_init+0x19c>)
   12250:	4b21      	ldr	r3, [pc, #132]	; (122d8 <gsm_init+0x194>)
   12252:	0018      	movs	r0, r3
   12254:	4b23      	ldr	r3, [pc, #140]	; (122e4 <gsm_init+0x1a0>)
   12256:	4798      	blx	r3
   12258:	1e03      	subs	r3, r0, #0
   1225a:	d1f3      	bne.n	12244 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   1225c:	4b1e      	ldr	r3, [pc, #120]	; (122d8 <gsm_init+0x194>)
   1225e:	0018      	movs	r0, r3
   12260:	4b21      	ldr	r3, [pc, #132]	; (122e8 <gsm_init+0x1a4>)
   12262:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12264:	4b1e      	ldr	r3, [pc, #120]	; (122e0 <gsm_init+0x19c>)
   12266:	0018      	movs	r0, r3
   12268:	4b20      	ldr	r3, [pc, #128]	; (122ec <gsm_init+0x1a8>)
   1226a:	4798      	blx	r3
   1226c:	0003      	movs	r3, r0
   1226e:	001a      	movs	r2, r3
   12270:	4b1f      	ldr	r3, [pc, #124]	; (122f0 <gsm_init+0x1ac>)
   12272:	0019      	movs	r1, r3
   12274:	0010      	movs	r0, r2
   12276:	4b1f      	ldr	r3, [pc, #124]	; (122f4 <gsm_init+0x1b0>)
   12278:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1227a:	4b19      	ldr	r3, [pc, #100]	; (122e0 <gsm_init+0x19c>)
   1227c:	2204      	movs	r2, #4
   1227e:	759a      	strb	r2, [r3, #22]
}
   12280:	46c0      	nop			; (mov r8, r8)
   12282:	46bd      	mov	sp, r7
   12284:	b015      	add	sp, #84	; 0x54
   12286:	bd90      	pop	{r4, r7, pc}
   12288:	00011dc1 	.word	0x00011dc1
   1228c:	00022f71 	.word	0x00022f71
   12290:	00011e29 	.word	0x00011e29
   12294:	0001df01 	.word	0x0001df01
   12298:	0001df35 	.word	0x0001df35
   1229c:	00022461 	.word	0x00022461
   122a0:	00012111 	.word	0x00012111
   122a4:	000223fd 	.word	0x000223fd
   122a8:	0001f085 	.word	0x0001f085
   122ac:	20000220 	.word	0x20000220
   122b0:	00001388 	.word	0x00001388
   122b4:	00029ab4 	.word	0x00029ab4
   122b8:	00012049 	.word	0x00012049
   122bc:	00020e09 	.word	0x00020e09
   122c0:	20000224 	.word	0x20000224
   122c4:	20000228 	.word	0x20000228
   122c8:	0001f141 	.word	0x0001f141
   122cc:	00011ec1 	.word	0x00011ec1
   122d0:	00160002 	.word	0x00160002
   122d4:	00170002 	.word	0x00170002
   122d8:	2000068c 	.word	0x2000068c
   122dc:	00012015 	.word	0x00012015
   122e0:	42001400 	.word	0x42001400
   122e4:	00021a55 	.word	0x00021a55
   122e8:	00011f81 	.word	0x00011f81
   122ec:	0001eb15 	.word	0x0001eb15
   122f0:	0001208d 	.word	0x0001208d
   122f4:	000221f1 	.word	0x000221f1

000122f8 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   122f8:	b580      	push	{r7, lr}
   122fa:	b082      	sub	sp, #8
   122fc:	af00      	add	r7, sp, #0
   122fe:	0002      	movs	r2, r0
   12300:	1dfb      	adds	r3, r7, #7
   12302:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12304:	4b10      	ldr	r3, [pc, #64]	; (12348 <gsm_module_exit_sleep+0x50>)
   12306:	781b      	ldrb	r3, [r3, #0]
   12308:	b2db      	uxtb	r3, r3
   1230a:	2201      	movs	r2, #1
   1230c:	4053      	eors	r3, r2
   1230e:	b2db      	uxtb	r3, r3
   12310:	2b00      	cmp	r3, #0
   12312:	d010      	beq.n	12336 <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12314:	2101      	movs	r1, #1
   12316:	2014      	movs	r0, #20
   12318:	4b0c      	ldr	r3, [pc, #48]	; (1234c <gsm_module_exit_sleep+0x54>)
   1231a:	4798      	blx	r3
		isGSMModuleAwake = true;
   1231c:	4b0a      	ldr	r3, [pc, #40]	; (12348 <gsm_module_exit_sleep+0x50>)
   1231e:	2201      	movs	r2, #1
   12320:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12322:	1dfb      	adds	r3, r7, #7
   12324:	781b      	ldrb	r3, [r3, #0]
   12326:	2201      	movs	r2, #1
   12328:	4053      	eors	r3, r2
   1232a:	b2db      	uxtb	r3, r3
   1232c:	2b00      	cmp	r3, #0
   1232e:	d002      	beq.n	12336 <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12330:	2064      	movs	r0, #100	; 0x64
   12332:	4b07      	ldr	r3, [pc, #28]	; (12350 <gsm_module_exit_sleep+0x58>)
   12334:	4798      	blx	r3
		}
	}
	
	lastGSMCommunicationTime=xTaskGetTickCount();
   12336:	4b07      	ldr	r3, [pc, #28]	; (12354 <gsm_module_exit_sleep+0x5c>)
   12338:	4798      	blx	r3
   1233a:	0002      	movs	r2, r0
   1233c:	4b06      	ldr	r3, [pc, #24]	; (12358 <gsm_module_exit_sleep+0x60>)
   1233e:	601a      	str	r2, [r3, #0]
}
   12340:	46c0      	nop			; (mov r8, r8)
   12342:	46bd      	mov	sp, r7
   12344:	b002      	add	sp, #8
   12346:	bd80      	pop	{r7, pc}
   12348:	20000680 	.word	0x20000680
   1234c:	00011e29 	.word	0x00011e29
   12350:	0001fee9 	.word	0x0001fee9
   12354:	0002024d 	.word	0x0002024d
   12358:	2000021c 	.word	0x2000021c

0001235c <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   1235c:	b580      	push	{r7, lr}
   1235e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
   12360:	2100      	movs	r1, #0
   12362:	2014      	movs	r0, #20
   12364:	4b03      	ldr	r3, [pc, #12]	; (12374 <gsm_module_enter_sleep+0x18>)
   12366:	4798      	blx	r3
	isGSMModuleAwake = false;
   12368:	4b03      	ldr	r3, [pc, #12]	; (12378 <gsm_module_enter_sleep+0x1c>)
   1236a:	2200      	movs	r2, #0
   1236c:	701a      	strb	r2, [r3, #0]
}
   1236e:	46c0      	nop			; (mov r8, r8)
   12370:	46bd      	mov	sp, r7
   12372:	bd80      	pop	{r7, pc}
   12374:	00011e29 	.word	0x00011e29
   12378:	20000680 	.word	0x20000680

0001237c <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   1237c:	b580      	push	{r7, lr}
   1237e:	b082      	sub	sp, #8
   12380:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   12382:	4b0e      	ldr	r3, [pc, #56]	; (123bc <gsm_module_sleep_elligible+0x40>)
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	b2db      	uxtb	r3, r3
   12388:	2b00      	cmp	r3, #0
   1238a:	d011      	beq.n	123b0 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   1238c:	1dfb      	adds	r3, r7, #7
   1238e:	2200      	movs	r2, #0
   12390:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=50000L);
   12392:	4b0b      	ldr	r3, [pc, #44]	; (123c0 <gsm_module_sleep_elligible+0x44>)
   12394:	4798      	blx	r3
   12396:	0002      	movs	r2, r0
   12398:	4b0a      	ldr	r3, [pc, #40]	; (123c4 <gsm_module_sleep_elligible+0x48>)
   1239a:	681b      	ldr	r3, [r3, #0]
   1239c:	1ad2      	subs	r2, r2, r3
   1239e:	1dfb      	adds	r3, r7, #7
   123a0:	4909      	ldr	r1, [pc, #36]	; (123c8 <gsm_module_sleep_elligible+0x4c>)
   123a2:	4291      	cmp	r1, r2
   123a4:	4192      	sbcs	r2, r2
   123a6:	4252      	negs	r2, r2
   123a8:	701a      	strb	r2, [r3, #0]
		return ret;
   123aa:	1dfb      	adds	r3, r7, #7
   123ac:	781b      	ldrb	r3, [r3, #0]
   123ae:	e000      	b.n	123b2 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123b0:	2301      	movs	r3, #1
}
   123b2:	0018      	movs	r0, r3
   123b4:	46bd      	mov	sp, r7
   123b6:	b002      	add	sp, #8
   123b8:	bd80      	pop	{r7, pc}
   123ba:	46c0      	nop			; (mov r8, r8)
   123bc:	20000680 	.word	0x20000680
   123c0:	0002024d 	.word	0x0002024d
   123c4:	2000021c 	.word	0x2000021c
   123c8:	0000c34f 	.word	0x0000c34f

000123cc <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123cc:	b590      	push	{r4, r7, lr}
   123ce:	b08b      	sub	sp, #44	; 0x2c
   123d0:	af02      	add	r7, sp, #8
   123d2:	60f8      	str	r0, [r7, #12]
   123d4:	60b9      	str	r1, [r7, #8]
   123d6:	607a      	str	r2, [r7, #4]
   123d8:	001a      	movs	r2, r3
   123da:	1cfb      	adds	r3, r7, #3
   123dc:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123de:	4b66      	ldr	r3, [pc, #408]	; (12578 <gsm_send_at_command+0x1ac>)
   123e0:	681b      	ldr	r3, [r3, #0]
   123e2:	2101      	movs	r1, #1
   123e4:	0018      	movs	r0, r3
   123e6:	4b65      	ldr	r3, [pc, #404]	; (1257c <gsm_send_at_command+0x1b0>)
   123e8:	4798      	blx	r3
   123ea:	1e03      	subs	r3, r0, #0
   123ec:	d101      	bne.n	123f2 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   123ee:	2302      	movs	r3, #2
   123f0:	e0bd      	b.n	1256e <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   123f2:	2000      	movs	r0, #0
   123f4:	4b62      	ldr	r3, [pc, #392]	; (12580 <gsm_send_at_command+0x1b4>)
   123f6:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   123f8:	4b62      	ldr	r3, [pc, #392]	; (12584 <gsm_send_at_command+0x1b8>)
   123fa:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   123fc:	231f      	movs	r3, #31
   123fe:	18fb      	adds	r3, r7, r3
   12400:	2200      	movs	r2, #0
   12402:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12404:	231e      	movs	r3, #30
   12406:	18fb      	adds	r3, r7, r3
   12408:	2200      	movs	r2, #0
   1240a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   1240c:	2313      	movs	r3, #19
   1240e:	18fb      	adds	r3, r7, r3
   12410:	2200      	movs	r2, #0
   12412:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12414:	2101      	movs	r1, #1
   12416:	20f0      	movs	r0, #240	; 0xf0
   12418:	4b5b      	ldr	r3, [pc, #364]	; (12588 <gsm_send_at_command+0x1bc>)
   1241a:	4798      	blx	r3
   1241c:	0003      	movs	r3, r0
   1241e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12420:	69bb      	ldr	r3, [r7, #24]
   12422:	2b00      	cmp	r3, #0
   12424:	d101      	bne.n	1242a <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   12426:	2300      	movs	r3, #0
   12428:	e0a1      	b.n	1256e <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   1242a:	69bb      	ldr	r3, [r7, #24]
   1242c:	22f0      	movs	r2, #240	; 0xf0
   1242e:	2100      	movs	r1, #0
   12430:	0018      	movs	r0, r3
   12432:	4b56      	ldr	r3, [pc, #344]	; (1258c <gsm_send_at_command+0x1c0>)
   12434:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12436:	68fb      	ldr	r3, [r7, #12]
   12438:	0018      	movs	r0, r3
   1243a:	4b55      	ldr	r3, [pc, #340]	; (12590 <gsm_send_at_command+0x1c4>)
   1243c:	4798      	blx	r3
   1243e:	0003      	movs	r3, r0
   12440:	b29a      	uxth	r2, r3
   12442:	68f9      	ldr	r1, [r7, #12]
   12444:	4b53      	ldr	r3, [pc, #332]	; (12594 <gsm_send_at_command+0x1c8>)
   12446:	0018      	movs	r0, r3
   12448:	4b53      	ldr	r3, [pc, #332]	; (12598 <gsm_send_at_command+0x1cc>)
   1244a:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   1244c:	4b53      	ldr	r3, [pc, #332]	; (1259c <gsm_send_at_command+0x1d0>)
   1244e:	6818      	ldr	r0, [r3, #0]
   12450:	687a      	ldr	r2, [r7, #4]
   12452:	2301      	movs	r3, #1
   12454:	425b      	negs	r3, r3
   12456:	9300      	str	r3, [sp, #0]
   12458:	2300      	movs	r3, #0
   1245a:	2104      	movs	r1, #4
   1245c:	4c50      	ldr	r4, [pc, #320]	; (125a0 <gsm_send_at_command+0x1d4>)
   1245e:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   12460:	4b4e      	ldr	r3, [pc, #312]	; (1259c <gsm_send_at_command+0x1d0>)
   12462:	681b      	ldr	r3, [r3, #0]
   12464:	0018      	movs	r0, r3
   12466:	4b4f      	ldr	r3, [pc, #316]	; (125a4 <gsm_send_at_command+0x1d8>)
   12468:	4798      	blx	r3
   1246a:	1e03      	subs	r3, r0, #0
   1246c:	d03e      	beq.n	124ec <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   1246e:	231e      	movs	r3, #30
   12470:	18fb      	adds	r3, r7, r3
   12472:	781b      	ldrb	r3, [r3, #0]
   12474:	2bef      	cmp	r3, #239	; 0xef
   12476:	d81c      	bhi.n	124b2 <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   12478:	4b4b      	ldr	r3, [pc, #300]	; (125a8 <gsm_send_at_command+0x1dc>)
   1247a:	681b      	ldr	r3, [r3, #0]
   1247c:	2213      	movs	r2, #19
   1247e:	18b9      	adds	r1, r7, r2
   12480:	2200      	movs	r2, #0
   12482:	0018      	movs	r0, r3
   12484:	4b49      	ldr	r3, [pc, #292]	; (125ac <gsm_send_at_command+0x1e0>)
   12486:	4798      	blx	r3
   12488:	0003      	movs	r3, r0
   1248a:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   1248c:	697b      	ldr	r3, [r7, #20]
   1248e:	2b00      	cmp	r3, #0
   12490:	d00f      	beq.n	124b2 <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   12492:	231e      	movs	r3, #30
   12494:	18fb      	adds	r3, r7, r3
   12496:	781b      	ldrb	r3, [r3, #0]
   12498:	69ba      	ldr	r2, [r7, #24]
   1249a:	18d3      	adds	r3, r2, r3
   1249c:	2213      	movs	r2, #19
   1249e:	18ba      	adds	r2, r7, r2
   124a0:	7812      	ldrb	r2, [r2, #0]
   124a2:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124a4:	231e      	movs	r3, #30
   124a6:	18fb      	adds	r3, r7, r3
   124a8:	781a      	ldrb	r2, [r3, #0]
   124aa:	231e      	movs	r3, #30
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	3201      	adds	r2, #1
   124b0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124b2:	68bb      	ldr	r3, [r7, #8]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d00c      	beq.n	124d2 <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124b8:	68ba      	ldr	r2, [r7, #8]
   124ba:	69bb      	ldr	r3, [r7, #24]
   124bc:	0011      	movs	r1, r2
   124be:	0018      	movs	r0, r3
   124c0:	4b3b      	ldr	r3, [pc, #236]	; (125b0 <gsm_send_at_command+0x1e4>)
   124c2:	4798      	blx	r3
   124c4:	1e03      	subs	r3, r0, #0
   124c6:	d004      	beq.n	124d2 <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   124c8:	231f      	movs	r3, #31
   124ca:	18fb      	adds	r3, r7, r3
   124cc:	2200      	movs	r2, #0
   124ce:	701a      	strb	r2, [r3, #0]
					break;
   124d0:	e024      	b.n	1251c <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   124d2:	4a38      	ldr	r2, [pc, #224]	; (125b4 <gsm_send_at_command+0x1e8>)
   124d4:	69bb      	ldr	r3, [r7, #24]
   124d6:	0011      	movs	r1, r2
   124d8:	0018      	movs	r0, r3
   124da:	4b35      	ldr	r3, [pc, #212]	; (125b0 <gsm_send_at_command+0x1e4>)
   124dc:	4798      	blx	r3
   124de:	1e03      	subs	r3, r0, #0
   124e0:	d0be      	beq.n	12460 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   124e2:	231f      	movs	r3, #31
   124e4:	18fb      	adds	r3, r7, r3
   124e6:	220b      	movs	r2, #11
   124e8:	701a      	strb	r2, [r3, #0]
				break;
   124ea:	e017      	b.n	1251c <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   124ec:	4b2b      	ldr	r3, [pc, #172]	; (1259c <gsm_send_at_command+0x1d0>)
   124ee:	6818      	ldr	r0, [r3, #0]
   124f0:	2301      	movs	r3, #1
   124f2:	425b      	negs	r3, r3
   124f4:	9300      	str	r3, [sp, #0]
   124f6:	2300      	movs	r3, #0
   124f8:	2200      	movs	r2, #0
   124fa:	2103      	movs	r1, #3
   124fc:	4c28      	ldr	r4, [pc, #160]	; (125a0 <gsm_send_at_command+0x1d4>)
   124fe:	47a0      	blx	r4
			if (u8tRx_Index==0)
   12500:	231e      	movs	r3, #30
   12502:	18fb      	adds	r3, r7, r3
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d104      	bne.n	12514 <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   1250a:	231f      	movs	r3, #31
   1250c:	18fb      	adds	r3, r7, r3
   1250e:	2207      	movs	r2, #7
   12510:	701a      	strb	r2, [r3, #0]
				break;
   12512:	e003      	b.n	1251c <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12514:	231f      	movs	r3, #31
   12516:	18fb      	adds	r3, r7, r3
   12518:	2208      	movs	r2, #8
   1251a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   1251c:	1cfb      	adds	r3, r7, #3
   1251e:	781b      	ldrb	r3, [r3, #0]
   12520:	2b00      	cmp	r3, #0
   12522:	d016      	beq.n	12552 <gsm_send_at_command+0x186>
   12524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12526:	2b00      	cmp	r3, #0
   12528:	d013      	beq.n	12552 <gsm_send_at_command+0x186>
   1252a:	1cfa      	adds	r2, r7, #3
   1252c:	231e      	movs	r3, #30
   1252e:	18fb      	adds	r3, r7, r3
   12530:	7812      	ldrb	r2, [r2, #0]
   12532:	781b      	ldrb	r3, [r3, #0]
   12534:	429a      	cmp	r2, r3
   12536:	d90c      	bls.n	12552 <gsm_send_at_command+0x186>
   12538:	231f      	movs	r3, #31
   1253a:	18fb      	adds	r3, r7, r3
   1253c:	781b      	ldrb	r3, [r3, #0]
   1253e:	2b00      	cmp	r3, #0
   12540:	d107      	bne.n	12552 <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12542:	231e      	movs	r3, #30
   12544:	18fb      	adds	r3, r7, r3
   12546:	781a      	ldrb	r2, [r3, #0]
   12548:	69b9      	ldr	r1, [r7, #24]
   1254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1254c:	0018      	movs	r0, r3
   1254e:	4b1a      	ldr	r3, [pc, #104]	; (125b8 <gsm_send_at_command+0x1ec>)
   12550:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12552:	4b09      	ldr	r3, [pc, #36]	; (12578 <gsm_send_at_command+0x1ac>)
   12554:	6818      	ldr	r0, [r3, #0]
   12556:	2300      	movs	r3, #0
   12558:	2200      	movs	r2, #0
   1255a:	2100      	movs	r1, #0
   1255c:	4c17      	ldr	r4, [pc, #92]	; (125bc <gsm_send_at_command+0x1f0>)
   1255e:	47a0      	blx	r4
	free(aDataBuffer);
   12560:	69bb      	ldr	r3, [r7, #24]
   12562:	0018      	movs	r0, r3
   12564:	4b16      	ldr	r3, [pc, #88]	; (125c0 <gsm_send_at_command+0x1f4>)
   12566:	4798      	blx	r3
	return err_no;
   12568:	231f      	movs	r3, #31
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	781b      	ldrb	r3, [r3, #0]
}
   1256e:	0018      	movs	r0, r3
   12570:	46bd      	mov	sp, r7
   12572:	b009      	add	sp, #36	; 0x24
   12574:	bd90      	pop	{r4, r7, pc}
   12576:	46c0      	nop			; (mov r8, r8)
   12578:	20000228 	.word	0x20000228
   1257c:	0001f5e1 	.word	0x0001f5e1
   12580:	000122f9 	.word	0x000122f9
   12584:	00012059 	.word	0x00012059
   12588:	00028d05 	.word	0x00028d05
   1258c:	00028e13 	.word	0x00028e13
   12590:	000290a3 	.word	0x000290a3
   12594:	2000068c 	.word	0x2000068c
   12598:	00021d2d 	.word	0x00021d2d
   1259c:	20000224 	.word	0x20000224
   125a0:	00020ead 	.word	0x00020ead
   125a4:	00021429 	.word	0x00021429
   125a8:	20000220 	.word	0x20000220
   125ac:	0001f441 	.word	0x0001f441
   125b0:	000290d3 	.word	0x000290d3
   125b4:	00029ac0 	.word	0x00029ac0
   125b8:	00028ddd 	.word	0x00028ddd
   125bc:	0001f141 	.word	0x0001f141
   125c0:	00028da5 	.word	0x00028da5

000125c4 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125c4:	b590      	push	{r4, r7, lr}
   125c6:	b083      	sub	sp, #12
   125c8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125ca:	4a06      	ldr	r2, [pc, #24]	; (125e4 <gsm_check_module+0x20>)
   125cc:	4906      	ldr	r1, [pc, #24]	; (125e8 <gsm_check_module+0x24>)
   125ce:	4807      	ldr	r0, [pc, #28]	; (125ec <gsm_check_module+0x28>)
   125d0:	2300      	movs	r3, #0
   125d2:	9300      	str	r3, [sp, #0]
   125d4:	2300      	movs	r3, #0
   125d6:	4c06      	ldr	r4, [pc, #24]	; (125f0 <gsm_check_module+0x2c>)
   125d8:	47a0      	blx	r4
   125da:	0003      	movs	r3, r0
}
   125dc:	0018      	movs	r0, r3
   125de:	46bd      	mov	sp, r7
   125e0:	b001      	add	sp, #4
   125e2:	bd90      	pop	{r4, r7, pc}
   125e4:	00001388 	.word	0x00001388
   125e8:	00029ac8 	.word	0x00029ac8
   125ec:	00029acc 	.word	0x00029acc
   125f0:	000123cd 	.word	0x000123cd

000125f4 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   125f4:	b5b0      	push	{r4, r5, r7, lr}
   125f6:	b084      	sub	sp, #16
   125f8:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   125fa:	1dfc      	adds	r4, r7, #7
   125fc:	4a12      	ldr	r2, [pc, #72]	; (12648 <gsm_is_network_registered+0x54>)
   125fe:	4913      	ldr	r1, [pc, #76]	; (1264c <gsm_is_network_registered+0x58>)
   12600:	4813      	ldr	r0, [pc, #76]	; (12650 <gsm_is_network_registered+0x5c>)
   12602:	2300      	movs	r3, #0
   12604:	9300      	str	r3, [sp, #0]
   12606:	2300      	movs	r3, #0
   12608:	4d12      	ldr	r5, [pc, #72]	; (12654 <gsm_is_network_registered+0x60>)
   1260a:	47a8      	blx	r5
   1260c:	0003      	movs	r3, r0
   1260e:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   12610:	1dfb      	adds	r3, r7, #7
   12612:	781b      	ldrb	r3, [r3, #0]
   12614:	2b00      	cmp	r3, #0
   12616:	d101      	bne.n	1261c <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12618:	2309      	movs	r3, #9
   1261a:	e011      	b.n	12640 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   1261c:	1dbc      	adds	r4, r7, #6
   1261e:	4a0a      	ldr	r2, [pc, #40]	; (12648 <gsm_is_network_registered+0x54>)
   12620:	490d      	ldr	r1, [pc, #52]	; (12658 <gsm_is_network_registered+0x64>)
   12622:	480b      	ldr	r0, [pc, #44]	; (12650 <gsm_is_network_registered+0x5c>)
   12624:	2300      	movs	r3, #0
   12626:	9300      	str	r3, [sp, #0]
   12628:	2300      	movs	r3, #0
   1262a:	4d0a      	ldr	r5, [pc, #40]	; (12654 <gsm_is_network_registered+0x60>)
   1262c:	47a8      	blx	r5
   1262e:	0003      	movs	r3, r0
   12630:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   12632:	1dbb      	adds	r3, r7, #6
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2b00      	cmp	r3, #0
   12638:	d101      	bne.n	1263e <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   1263a:	2309      	movs	r3, #9
   1263c:	e000      	b.n	12640 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1263e:	230a      	movs	r3, #10
			}
		}
	}
}
   12640:	0018      	movs	r0, r3
   12642:	46bd      	mov	sp, r7
   12644:	b002      	add	sp, #8
   12646:	bdb0      	pop	{r4, r5, r7, pc}
   12648:	00001388 	.word	0x00001388
   1264c:	00029adc 	.word	0x00029adc
   12650:	00029ae8 	.word	0x00029ae8
   12654:	000123cd 	.word	0x000123cd
   12658:	00029af4 	.word	0x00029af4

0001265c <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   1265c:	b590      	push	{r4, r7, lr}
   1265e:	b089      	sub	sp, #36	; 0x24
   12660:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   12662:	1d3b      	adds	r3, r7, #4
   12664:	0018      	movs	r0, r3
   12666:	2314      	movs	r3, #20
   12668:	001a      	movs	r2, r3
   1266a:	2100      	movs	r1, #0
   1266c:	4b0a      	ldr	r3, [pc, #40]	; (12698 <gsm_set_baudrate+0x3c>)
   1266e:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   12670:	23e1      	movs	r3, #225	; 0xe1
   12672:	025a      	lsls	r2, r3, #9
   12674:	4909      	ldr	r1, [pc, #36]	; (1269c <gsm_set_baudrate+0x40>)
   12676:	1d3b      	adds	r3, r7, #4
   12678:	0018      	movs	r0, r3
   1267a:	4b09      	ldr	r3, [pc, #36]	; (126a0 <gsm_set_baudrate+0x44>)
   1267c:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   1267e:	4a09      	ldr	r2, [pc, #36]	; (126a4 <gsm_set_baudrate+0x48>)
   12680:	4909      	ldr	r1, [pc, #36]	; (126a8 <gsm_set_baudrate+0x4c>)
   12682:	1d38      	adds	r0, r7, #4
   12684:	2300      	movs	r3, #0
   12686:	9300      	str	r3, [sp, #0]
   12688:	2300      	movs	r3, #0
   1268a:	4c08      	ldr	r4, [pc, #32]	; (126ac <gsm_set_baudrate+0x50>)
   1268c:	47a0      	blx	r4
   1268e:	0003      	movs	r3, r0
}
   12690:	0018      	movs	r0, r3
   12692:	46bd      	mov	sp, r7
   12694:	b007      	add	sp, #28
   12696:	bd90      	pop	{r4, r7, pc}
   12698:	00028e13 	.word	0x00028e13
   1269c:	00029b00 	.word	0x00029b00
   126a0:	00029019 	.word	0x00029019
   126a4:	00001388 	.word	0x00001388
   126a8:	00029ac8 	.word	0x00029ac8
   126ac:	000123cd 	.word	0x000123cd

000126b0 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126b0:	b590      	push	{r4, r7, lr}
   126b2:	b083      	sub	sp, #12
   126b4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126b6:	4a06      	ldr	r2, [pc, #24]	; (126d0 <gsm_detect_simcard+0x20>)
   126b8:	4906      	ldr	r1, [pc, #24]	; (126d4 <gsm_detect_simcard+0x24>)
   126ba:	4807      	ldr	r0, [pc, #28]	; (126d8 <gsm_detect_simcard+0x28>)
   126bc:	2300      	movs	r3, #0
   126be:	9300      	str	r3, [sp, #0]
   126c0:	2300      	movs	r3, #0
   126c2:	4c06      	ldr	r4, [pc, #24]	; (126dc <gsm_detect_simcard+0x2c>)
   126c4:	47a0      	blx	r4
   126c6:	0003      	movs	r3, r0
}
   126c8:	0018      	movs	r0, r3
   126ca:	46bd      	mov	sp, r7
   126cc:	b001      	add	sp, #4
   126ce:	bd90      	pop	{r4, r7, pc}
   126d0:	00001388 	.word	0x00001388
   126d4:	00029b70 	.word	0x00029b70
   126d8:	00029b80 	.word	0x00029b80
   126dc:	000123cd 	.word	0x000123cd

000126e0 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   126e0:	b590      	push	{r4, r7, lr}
   126e2:	b083      	sub	sp, #12
   126e4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   126e6:	4a06      	ldr	r2, [pc, #24]	; (12700 <gsm_delete_all_sms+0x20>)
   126e8:	4906      	ldr	r1, [pc, #24]	; (12704 <gsm_delete_all_sms+0x24>)
   126ea:	4807      	ldr	r0, [pc, #28]	; (12708 <gsm_delete_all_sms+0x28>)
   126ec:	2300      	movs	r3, #0
   126ee:	9300      	str	r3, [sp, #0]
   126f0:	2300      	movs	r3, #0
   126f2:	4c06      	ldr	r4, [pc, #24]	; (1270c <gsm_delete_all_sms+0x2c>)
   126f4:	47a0      	blx	r4
   126f6:	0003      	movs	r3, r0
}
   126f8:	0018      	movs	r0, r3
   126fa:	46bd      	mov	sp, r7
   126fc:	b001      	add	sp, #4
   126fe:	bd90      	pop	{r4, r7, pc}
   12700:	000061a8 	.word	0x000061a8
   12704:	00029ac8 	.word	0x00029ac8
   12708:	00029b8c 	.word	0x00029b8c
   1270c:	000123cd 	.word	0x000123cd

00012710 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   12710:	b590      	push	{r4, r7, lr}
   12712:	b083      	sub	sp, #12
   12714:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12716:	4a06      	ldr	r2, [pc, #24]	; (12730 <gsm_store_active_profile+0x20>)
   12718:	4906      	ldr	r1, [pc, #24]	; (12734 <gsm_store_active_profile+0x24>)
   1271a:	4807      	ldr	r0, [pc, #28]	; (12738 <gsm_store_active_profile+0x28>)
   1271c:	2300      	movs	r3, #0
   1271e:	9300      	str	r3, [sp, #0]
   12720:	2300      	movs	r3, #0
   12722:	4c06      	ldr	r4, [pc, #24]	; (1273c <gsm_store_active_profile+0x2c>)
   12724:	47a0      	blx	r4
   12726:	0003      	movs	r3, r0
}
   12728:	0018      	movs	r0, r3
   1272a:	46bd      	mov	sp, r7
   1272c:	b001      	add	sp, #4
   1272e:	bd90      	pop	{r4, r7, pc}
   12730:	00001388 	.word	0x00001388
   12734:	00029ac8 	.word	0x00029ac8
   12738:	00029ba0 	.word	0x00029ba0
   1273c:	000123cd 	.word	0x000123cd

00012740 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   12740:	b590      	push	{r4, r7, lr}
   12742:	b083      	sub	sp, #12
   12744:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12746:	4a06      	ldr	r2, [pc, #24]	; (12760 <gsm_enable_calling_line_identification+0x20>)
   12748:	4906      	ldr	r1, [pc, #24]	; (12764 <gsm_enable_calling_line_identification+0x24>)
   1274a:	4807      	ldr	r0, [pc, #28]	; (12768 <gsm_enable_calling_line_identification+0x28>)
   1274c:	2300      	movs	r3, #0
   1274e:	9300      	str	r3, [sp, #0]
   12750:	2300      	movs	r3, #0
   12752:	4c06      	ldr	r4, [pc, #24]	; (1276c <gsm_enable_calling_line_identification+0x2c>)
   12754:	47a0      	blx	r4
   12756:	0003      	movs	r3, r0
}
   12758:	0018      	movs	r0, r3
   1275a:	46bd      	mov	sp, r7
   1275c:	b001      	add	sp, #4
   1275e:	bd90      	pop	{r4, r7, pc}
   12760:	00003a98 	.word	0x00003a98
   12764:	00029ac8 	.word	0x00029ac8
   12768:	00029ba8 	.word	0x00029ba8
   1276c:	000123cd 	.word	0x000123cd

00012770 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   12770:	b590      	push	{r4, r7, lr}
   12772:	b083      	sub	sp, #12
   12774:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12776:	4a06      	ldr	r2, [pc, #24]	; (12790 <gsm_enable_connected_line_identification_presentation+0x20>)
   12778:	4906      	ldr	r1, [pc, #24]	; (12794 <gsm_enable_connected_line_identification_presentation+0x24>)
   1277a:	4807      	ldr	r0, [pc, #28]	; (12798 <gsm_enable_connected_line_identification_presentation+0x28>)
   1277c:	2300      	movs	r3, #0
   1277e:	9300      	str	r3, [sp, #0]
   12780:	2300      	movs	r3, #0
   12782:	4c06      	ldr	r4, [pc, #24]	; (1279c <gsm_enable_connected_line_identification_presentation+0x2c>)
   12784:	47a0      	blx	r4
   12786:	0003      	movs	r3, r0
}
   12788:	0018      	movs	r0, r3
   1278a:	46bd      	mov	sp, r7
   1278c:	b001      	add	sp, #4
   1278e:	bd90      	pop	{r4, r7, pc}
   12790:	00001388 	.word	0x00001388
   12794:	00029ac8 	.word	0x00029ac8
   12798:	00029bb4 	.word	0x00029bb4
   1279c:	000123cd 	.word	0x000123cd

000127a0 <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127a0:	b590      	push	{r4, r7, lr}
   127a2:	b083      	sub	sp, #12
   127a4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127a6:	4a06      	ldr	r2, [pc, #24]	; (127c0 <gsm_enable_sleep_mode+0x20>)
   127a8:	4906      	ldr	r1, [pc, #24]	; (127c4 <gsm_enable_sleep_mode+0x24>)
   127aa:	4807      	ldr	r0, [pc, #28]	; (127c8 <gsm_enable_sleep_mode+0x28>)
   127ac:	2300      	movs	r3, #0
   127ae:	9300      	str	r3, [sp, #0]
   127b0:	2300      	movs	r3, #0
   127b2:	4c06      	ldr	r4, [pc, #24]	; (127cc <gsm_enable_sleep_mode+0x2c>)
   127b4:	47a0      	blx	r4
   127b6:	0003      	movs	r3, r0
}
   127b8:	0018      	movs	r0, r3
   127ba:	46bd      	mov	sp, r7
   127bc:	b001      	add	sp, #4
   127be:	bd90      	pop	{r4, r7, pc}
   127c0:	00002710 	.word	0x00002710
   127c4:	00029ac8 	.word	0x00029ac8
   127c8:	00029bc0 	.word	0x00029bc0
   127cc:	000123cd 	.word	0x000123cd

000127d0 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127d0:	b590      	push	{r4, r7, lr}
   127d2:	b083      	sub	sp, #12
   127d4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127d6:	4a06      	ldr	r2, [pc, #24]	; (127f0 <gsm_enable_list_current_calls_of_ME+0x20>)
   127d8:	4906      	ldr	r1, [pc, #24]	; (127f4 <gsm_enable_list_current_calls_of_ME+0x24>)
   127da:	4807      	ldr	r0, [pc, #28]	; (127f8 <gsm_enable_list_current_calls_of_ME+0x28>)
   127dc:	2300      	movs	r3, #0
   127de:	9300      	str	r3, [sp, #0]
   127e0:	2300      	movs	r3, #0
   127e2:	4c06      	ldr	r4, [pc, #24]	; (127fc <gsm_enable_list_current_calls_of_ME+0x2c>)
   127e4:	47a0      	blx	r4
   127e6:	0003      	movs	r3, r0
}
   127e8:	0018      	movs	r0, r3
   127ea:	46bd      	mov	sp, r7
   127ec:	b001      	add	sp, #4
   127ee:	bd90      	pop	{r4, r7, pc}
   127f0:	00001388 	.word	0x00001388
   127f4:	00029ac8 	.word	0x00029ac8
   127f8:	00029be8 	.word	0x00029be8
   127fc:	000123cd 	.word	0x000123cd

00012800 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   12800:	b590      	push	{r4, r7, lr}
   12802:	b083      	sub	sp, #12
   12804:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12806:	4a06      	ldr	r2, [pc, #24]	; (12820 <gsm_factory_reset+0x20>)
   12808:	4906      	ldr	r1, [pc, #24]	; (12824 <gsm_factory_reset+0x24>)
   1280a:	4807      	ldr	r0, [pc, #28]	; (12828 <gsm_factory_reset+0x28>)
   1280c:	2300      	movs	r3, #0
   1280e:	9300      	str	r3, [sp, #0]
   12810:	2300      	movs	r3, #0
   12812:	4c06      	ldr	r4, [pc, #24]	; (1282c <gsm_factory_reset+0x2c>)
   12814:	47a0      	blx	r4
   12816:	0003      	movs	r3, r0
}
   12818:	0018      	movs	r0, r3
   1281a:	46bd      	mov	sp, r7
   1281c:	b001      	add	sp, #4
   1281e:	bd90      	pop	{r4, r7, pc}
   12820:	00003a98 	.word	0x00003a98
   12824:	00029ac8 	.word	0x00029ac8
   12828:	00029bf4 	.word	0x00029bf4
   1282c:	000123cd 	.word	0x000123cd

00012830 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   12830:	b590      	push	{r4, r7, lr}
   12832:	b083      	sub	sp, #12
   12834:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12836:	4a06      	ldr	r2, [pc, #24]	; (12850 <gsm_echo_off+0x20>)
   12838:	4906      	ldr	r1, [pc, #24]	; (12854 <gsm_echo_off+0x24>)
   1283a:	4807      	ldr	r0, [pc, #28]	; (12858 <gsm_echo_off+0x28>)
   1283c:	2300      	movs	r3, #0
   1283e:	9300      	str	r3, [sp, #0]
   12840:	2300      	movs	r3, #0
   12842:	4c06      	ldr	r4, [pc, #24]	; (1285c <gsm_echo_off+0x2c>)
   12844:	47a0      	blx	r4
   12846:	0003      	movs	r3, r0
}
   12848:	0018      	movs	r0, r3
   1284a:	46bd      	mov	sp, r7
   1284c:	b001      	add	sp, #4
   1284e:	bd90      	pop	{r4, r7, pc}
   12850:	00001388 	.word	0x00001388
   12854:	00029ac8 	.word	0x00029ac8
   12858:	00029bfc 	.word	0x00029bfc
   1285c:	000123cd 	.word	0x000123cd

00012860 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   12860:	b590      	push	{r4, r7, lr}
   12862:	b083      	sub	sp, #12
   12864:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12866:	4a06      	ldr	r2, [pc, #24]	; (12880 <gsm_select_sms_message_formate_text_mode+0x20>)
   12868:	4906      	ldr	r1, [pc, #24]	; (12884 <gsm_select_sms_message_formate_text_mode+0x24>)
   1286a:	4807      	ldr	r0, [pc, #28]	; (12888 <gsm_select_sms_message_formate_text_mode+0x28>)
   1286c:	2300      	movs	r3, #0
   1286e:	9300      	str	r3, [sp, #0]
   12870:	2300      	movs	r3, #0
   12872:	4c06      	ldr	r4, [pc, #24]	; (1288c <gsm_select_sms_message_formate_text_mode+0x2c>)
   12874:	47a0      	blx	r4
   12876:	0003      	movs	r3, r0
}
   12878:	0018      	movs	r0, r3
   1287a:	46bd      	mov	sp, r7
   1287c:	b001      	add	sp, #4
   1287e:	bd90      	pop	{r4, r7, pc}
   12880:	00001388 	.word	0x00001388
   12884:	00029ac8 	.word	0x00029ac8
   12888:	00029c04 	.word	0x00029c04
   1288c:	000123cd 	.word	0x000123cd

00012890 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   12890:	b590      	push	{r4, r7, lr}
   12892:	b083      	sub	sp, #12
   12894:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   12896:	4a06      	ldr	r2, [pc, #24]	; (128b0 <gsm_set_sms_text_mode_parameter+0x20>)
   12898:	4906      	ldr	r1, [pc, #24]	; (128b4 <gsm_set_sms_text_mode_parameter+0x24>)
   1289a:	4807      	ldr	r0, [pc, #28]	; (128b8 <gsm_set_sms_text_mode_parameter+0x28>)
   1289c:	2300      	movs	r3, #0
   1289e:	9300      	str	r3, [sp, #0]
   128a0:	2300      	movs	r3, #0
   128a2:	4c06      	ldr	r4, [pc, #24]	; (128bc <gsm_set_sms_text_mode_parameter+0x2c>)
   128a4:	47a0      	blx	r4
   128a6:	0003      	movs	r3, r0
}
   128a8:	0018      	movs	r0, r3
   128aa:	46bd      	mov	sp, r7
   128ac:	b001      	add	sp, #4
   128ae:	bd90      	pop	{r4, r7, pc}
   128b0:	00001b58 	.word	0x00001b58
   128b4:	00029ac8 	.word	0x00029ac8
   128b8:	00029c10 	.word	0x00029c10
   128bc:	000123cd 	.word	0x000123cd

000128c0 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128c0:	b5b0      	push	{r4, r5, r7, lr}
   128c2:	b088      	sub	sp, #32
   128c4:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128c6:	2316      	movs	r3, #22
   128c8:	18fb      	adds	r3, r7, r3
   128ca:	2264      	movs	r2, #100	; 0x64
   128cc:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128ce:	2316      	movs	r3, #22
   128d0:	18fb      	adds	r3, r7, r3
   128d2:	781b      	ldrb	r3, [r3, #0]
   128d4:	2101      	movs	r1, #1
   128d6:	0018      	movs	r0, r3
   128d8:	4b60      	ldr	r3, [pc, #384]	; (12a5c <gsm_getsignalstrength+0x19c>)
   128da:	4798      	blx	r3
   128dc:	0003      	movs	r3, r0
   128de:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   128e0:	693b      	ldr	r3, [r7, #16]
   128e2:	2b00      	cmp	r3, #0
   128e4:	d105      	bne.n	128f2 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   128e6:	693b      	ldr	r3, [r7, #16]
   128e8:	0018      	movs	r0, r3
   128ea:	4b5d      	ldr	r3, [pc, #372]	; (12a60 <gsm_getsignalstrength+0x1a0>)
   128ec:	4798      	blx	r3
		return 0;
   128ee:	2300      	movs	r3, #0
   128f0:	e0af      	b.n	12a52 <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   128f2:	2316      	movs	r3, #22
   128f4:	18fb      	adds	r3, r7, r3
   128f6:	781a      	ldrb	r2, [r3, #0]
   128f8:	693b      	ldr	r3, [r7, #16]
   128fa:	2100      	movs	r1, #0
   128fc:	0018      	movs	r0, r3
   128fe:	4b59      	ldr	r3, [pc, #356]	; (12a64 <gsm_getsignalstrength+0x1a4>)
   12900:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   12902:	230f      	movs	r3, #15
   12904:	18fc      	adds	r4, r7, r3
   12906:	2316      	movs	r3, #22
   12908:	18fb      	adds	r3, r7, r3
   1290a:	781a      	ldrb	r2, [r3, #0]
   1290c:	4d56      	ldr	r5, [pc, #344]	; (12a68 <gsm_getsignalstrength+0x1a8>)
   1290e:	4957      	ldr	r1, [pc, #348]	; (12a6c <gsm_getsignalstrength+0x1ac>)
   12910:	4857      	ldr	r0, [pc, #348]	; (12a70 <gsm_getsignalstrength+0x1b0>)
   12912:	693b      	ldr	r3, [r7, #16]
   12914:	9300      	str	r3, [sp, #0]
   12916:	0013      	movs	r3, r2
   12918:	002a      	movs	r2, r5
   1291a:	4d56      	ldr	r5, [pc, #344]	; (12a74 <gsm_getsignalstrength+0x1b4>)
   1291c:	47a8      	blx	r5
   1291e:	0003      	movs	r3, r0
   12920:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   12922:	230f      	movs	r3, #15
   12924:	18fb      	adds	r3, r7, r3
   12926:	781b      	ldrb	r3, [r3, #0]
   12928:	2b00      	cmp	r3, #0
   1292a:	d000      	beq.n	1292e <gsm_getsignalstrength+0x6e>
   1292c:	e086      	b.n	12a3c <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
   1292e:	4a52      	ldr	r2, [pc, #328]	; (12a78 <gsm_getsignalstrength+0x1b8>)
   12930:	693b      	ldr	r3, [r7, #16]
   12932:	0011      	movs	r1, r2
   12934:	0018      	movs	r0, r3
   12936:	4b51      	ldr	r3, [pc, #324]	; (12a7c <gsm_getsignalstrength+0x1bc>)
   12938:	4798      	blx	r3
   1293a:	1e03      	subs	r3, r0, #0
   1293c:	d000      	beq.n	12940 <gsm_getsignalstrength+0x80>
   1293e:	e078      	b.n	12a32 <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
   12940:	4a4f      	ldr	r2, [pc, #316]	; (12a80 <gsm_getsignalstrength+0x1c0>)
   12942:	693b      	ldr	r3, [r7, #16]
   12944:	0011      	movs	r1, r2
   12946:	0018      	movs	r0, r3
   12948:	4b4e      	ldr	r3, [pc, #312]	; (12a84 <gsm_getsignalstrength+0x1c4>)
   1294a:	4798      	blx	r3
   1294c:	0003      	movs	r3, r0
   1294e:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
   12950:	4b4b      	ldr	r3, [pc, #300]	; (12a80 <gsm_getsignalstrength+0x1c0>)
   12952:	0019      	movs	r1, r3
   12954:	2000      	movs	r0, #0
   12956:	4b4b      	ldr	r3, [pc, #300]	; (12a84 <gsm_getsignalstrength+0x1c4>)
   12958:	4798      	blx	r3
   1295a:	0003      	movs	r3, r0
   1295c:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
   1295e:	4a4a      	ldr	r2, [pc, #296]	; (12a88 <gsm_getsignalstrength+0x1c8>)
   12960:	68bb      	ldr	r3, [r7, #8]
   12962:	0011      	movs	r1, r2
   12964:	0018      	movs	r0, r3
   12966:	4b47      	ldr	r3, [pc, #284]	; (12a84 <gsm_getsignalstrength+0x1c4>)
   12968:	4798      	blx	r3
   1296a:	0003      	movs	r3, r0
   1296c:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
   1296e:	68bb      	ldr	r3, [r7, #8]
   12970:	0018      	movs	r0, r3
   12972:	4b46      	ldr	r3, [pc, #280]	; (12a8c <gsm_getsignalstrength+0x1cc>)
   12974:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   12976:	68bb      	ldr	r3, [r7, #8]
   12978:	0018      	movs	r0, r3
   1297a:	4b45      	ldr	r3, [pc, #276]	; (12a90 <gsm_getsignalstrength+0x1d0>)
   1297c:	4798      	blx	r3
   1297e:	0002      	movs	r2, r0
   12980:	1dfb      	adds	r3, r7, #7
   12982:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   12984:	1dfb      	adds	r3, r7, #7
   12986:	781b      	ldrb	r3, [r3, #0]
   12988:	2b00      	cmp	r3, #0
   1298a:	d007      	beq.n	1299c <gsm_getsignalstrength+0xdc>
   1298c:	1dfb      	adds	r3, r7, #7
   1298e:	781b      	ldrb	r3, [r3, #0]
   12990:	2b01      	cmp	r3, #1
   12992:	d003      	beq.n	1299c <gsm_getsignalstrength+0xdc>
   12994:	1dfb      	adds	r3, r7, #7
   12996:	781b      	ldrb	r3, [r3, #0]
   12998:	2b63      	cmp	r3, #99	; 0x63
   1299a:	d104      	bne.n	129a6 <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
   1299c:	2317      	movs	r3, #23
   1299e:	18fb      	adds	r3, r7, r3
   129a0:	2200      	movs	r2, #0
   129a2:	701a      	strb	r2, [r3, #0]
   129a4:	e04e      	b.n	12a44 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
   129a6:	1dfb      	adds	r3, r7, #7
   129a8:	781b      	ldrb	r3, [r3, #0]
   129aa:	2b01      	cmp	r3, #1
   129ac:	d908      	bls.n	129c0 <gsm_getsignalstrength+0x100>
   129ae:	1dfb      	adds	r3, r7, #7
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b07      	cmp	r3, #7
   129b4:	d804      	bhi.n	129c0 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
   129b6:	2317      	movs	r3, #23
   129b8:	18fb      	adds	r3, r7, r3
   129ba:	2201      	movs	r2, #1
   129bc:	701a      	strb	r2, [r3, #0]
   129be:	e041      	b.n	12a44 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
   129c0:	1dfb      	adds	r3, r7, #7
   129c2:	781b      	ldrb	r3, [r3, #0]
   129c4:	2b07      	cmp	r3, #7
   129c6:	d908      	bls.n	129da <gsm_getsignalstrength+0x11a>
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	781b      	ldrb	r3, [r3, #0]
   129cc:	2b0d      	cmp	r3, #13
   129ce:	d804      	bhi.n	129da <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
   129d0:	2317      	movs	r3, #23
   129d2:	18fb      	adds	r3, r7, r3
   129d4:	2202      	movs	r2, #2
   129d6:	701a      	strb	r2, [r3, #0]
   129d8:	e034      	b.n	12a44 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
   129da:	1dfb      	adds	r3, r7, #7
   129dc:	781b      	ldrb	r3, [r3, #0]
   129de:	2b0d      	cmp	r3, #13
   129e0:	d908      	bls.n	129f4 <gsm_getsignalstrength+0x134>
   129e2:	1dfb      	adds	r3, r7, #7
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	2b13      	cmp	r3, #19
   129e8:	d804      	bhi.n	129f4 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
   129ea:	2317      	movs	r3, #23
   129ec:	18fb      	adds	r3, r7, r3
   129ee:	2203      	movs	r2, #3
   129f0:	701a      	strb	r2, [r3, #0]
   129f2:	e027      	b.n	12a44 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
   129f4:	1dfb      	adds	r3, r7, #7
   129f6:	781b      	ldrb	r3, [r3, #0]
   129f8:	2b13      	cmp	r3, #19
   129fa:	d908      	bls.n	12a0e <gsm_getsignalstrength+0x14e>
   129fc:	1dfb      	adds	r3, r7, #7
   129fe:	781b      	ldrb	r3, [r3, #0]
   12a00:	2b19      	cmp	r3, #25
   12a02:	d804      	bhi.n	12a0e <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
   12a04:	2317      	movs	r3, #23
   12a06:	18fb      	adds	r3, r7, r3
   12a08:	2204      	movs	r2, #4
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	e01a      	b.n	12a44 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
   12a0e:	1dfb      	adds	r3, r7, #7
   12a10:	781b      	ldrb	r3, [r3, #0]
   12a12:	2b19      	cmp	r3, #25
   12a14:	d908      	bls.n	12a28 <gsm_getsignalstrength+0x168>
   12a16:	1dfb      	adds	r3, r7, #7
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	2b1f      	cmp	r3, #31
   12a1c:	d804      	bhi.n	12a28 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
   12a1e:	2317      	movs	r3, #23
   12a20:	18fb      	adds	r3, r7, r3
   12a22:	2205      	movs	r2, #5
   12a24:	701a      	strb	r2, [r3, #0]
   12a26:	e00d      	b.n	12a44 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
   12a28:	2317      	movs	r3, #23
   12a2a:	18fb      	adds	r3, r7, r3
   12a2c:	2200      	movs	r2, #0
   12a2e:	701a      	strb	r2, [r3, #0]
   12a30:	e008      	b.n	12a44 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	2200      	movs	r2, #0
   12a38:	701a      	strb	r2, [r3, #0]
   12a3a:	e003      	b.n	12a44 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
   12a3c:	2317      	movs	r3, #23
   12a3e:	18fb      	adds	r3, r7, r3
   12a40:	2200      	movs	r2, #0
   12a42:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a44:	693b      	ldr	r3, [r7, #16]
   12a46:	0018      	movs	r0, r3
   12a48:	4b05      	ldr	r3, [pc, #20]	; (12a60 <gsm_getsignalstrength+0x1a0>)
   12a4a:	4798      	blx	r3
	
	return sig_strength;
   12a4c:	2317      	movs	r3, #23
   12a4e:	18fb      	adds	r3, r7, r3
   12a50:	781b      	ldrb	r3, [r3, #0]
}
   12a52:	0018      	movs	r0, r3
   12a54:	46bd      	mov	sp, r7
   12a56:	b006      	add	sp, #24
   12a58:	bdb0      	pop	{r4, r5, r7, pc}
   12a5a:	46c0      	nop			; (mov r8, r8)
   12a5c:	00028d05 	.word	0x00028d05
   12a60:	00028da5 	.word	0x00028da5
   12a64:	00028e13 	.word	0x00028e13
   12a68:	00001388 	.word	0x00001388
   12a6c:	00029ac8 	.word	0x00029ac8
   12a70:	00029c3c 	.word	0x00029c3c
   12a74:	000123cd 	.word	0x000123cd
   12a78:	00029c44 	.word	0x00029c44
   12a7c:	000290d3 	.word	0x000290d3
   12a80:	00029be0 	.word	0x00029be0
   12a84:	00029105 	.word	0x00029105
   12a88:	00029be4 	.word	0x00029be4
   12a8c:	00012a95 	.word	0x00012a95
   12a90:	00028cf9 	.word	0x00028cf9

00012a94 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12a94:	b580      	push	{r7, lr}
   12a96:	b084      	sub	sp, #16
   12a98:	af00      	add	r7, sp, #0
   12a9a:	6078      	str	r0, [r7, #4]
	char* i = source;
   12a9c:	687b      	ldr	r3, [r7, #4]
   12a9e:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12aa0:	687b      	ldr	r3, [r7, #4]
   12aa2:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12aa4:	e00c      	b.n	12ac0 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12aa6:	68bb      	ldr	r3, [r7, #8]
   12aa8:	1c5a      	adds	r2, r3, #1
   12aaa:	60ba      	str	r2, [r7, #8]
   12aac:	781a      	ldrb	r2, [r3, #0]
   12aae:	68fb      	ldr	r3, [r7, #12]
   12ab0:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12ab2:	68fb      	ldr	r3, [r7, #12]
   12ab4:	781b      	ldrb	r3, [r3, #0]
   12ab6:	2b20      	cmp	r3, #32
   12ab8:	d002      	beq.n	12ac0 <RemoveSpaces+0x2c>
		i++;
   12aba:	68fb      	ldr	r3, [r7, #12]
   12abc:	3301      	adds	r3, #1
   12abe:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12ac0:	68bb      	ldr	r3, [r7, #8]
   12ac2:	781b      	ldrb	r3, [r3, #0]
   12ac4:	2b00      	cmp	r3, #0
   12ac6:	d1ee      	bne.n	12aa6 <RemoveSpaces+0x12>
	}
	*i = 0;
   12ac8:	68fb      	ldr	r3, [r7, #12]
   12aca:	2200      	movs	r2, #0
   12acc:	701a      	strb	r2, [r3, #0]
}
   12ace:	46c0      	nop			; (mov r8, r8)
   12ad0:	46bd      	mov	sp, r7
   12ad2:	b004      	add	sp, #16
   12ad4:	bd80      	pop	{r7, pc}
	...

00012ad8 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12ad8:	b590      	push	{r4, r7, lr}
   12ada:	b083      	sub	sp, #12
   12adc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12ade:	4a06      	ldr	r2, [pc, #24]	; (12af8 <gsm_enable_new_sms_message_indications+0x20>)
   12ae0:	4906      	ldr	r1, [pc, #24]	; (12afc <gsm_enable_new_sms_message_indications+0x24>)
   12ae2:	4807      	ldr	r0, [pc, #28]	; (12b00 <gsm_enable_new_sms_message_indications+0x28>)
   12ae4:	2300      	movs	r3, #0
   12ae6:	9300      	str	r3, [sp, #0]
   12ae8:	2300      	movs	r3, #0
   12aea:	4c06      	ldr	r4, [pc, #24]	; (12b04 <gsm_enable_new_sms_message_indications+0x2c>)
   12aec:	47a0      	blx	r4
   12aee:	0003      	movs	r3, r0
}
   12af0:	0018      	movs	r0, r3
   12af2:	46bd      	mov	sp, r7
   12af4:	b001      	add	sp, #4
   12af6:	bd90      	pop	{r4, r7, pc}
   12af8:	00001388 	.word	0x00001388
   12afc:	00029ac8 	.word	0x00029ac8
   12b00:	00029c48 	.word	0x00029c48
   12b04:	000123cd 	.word	0x000123cd

00012b08 <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b08:	b5b0      	push	{r4, r5, r7, lr}
   12b0a:	b088      	sub	sp, #32
   12b0c:	af02      	add	r7, sp, #8
   12b0e:	6078      	str	r0, [r7, #4]
   12b10:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12b12:	683b      	ldr	r3, [r7, #0]
   12b14:	0018      	movs	r0, r3
   12b16:	4b3b      	ldr	r3, [pc, #236]	; (12c04 <gsm_send_sms+0xfc>)
   12b18:	4798      	blx	r3
   12b1a:	0003      	movs	r3, r0
   12b1c:	2bfa      	cmp	r3, #250	; 0xfa
   12b1e:	d901      	bls.n	12b24 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12b20:	2303      	movs	r3, #3
   12b22:	e06b      	b.n	12bfc <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12b24:	687b      	ldr	r3, [r7, #4]
   12b26:	0018      	movs	r0, r3
   12b28:	4b36      	ldr	r3, [pc, #216]	; (12c04 <gsm_send_sms+0xfc>)
   12b2a:	4798      	blx	r3
   12b2c:	0003      	movs	r3, r0
   12b2e:	2b05      	cmp	r3, #5
   12b30:	d801      	bhi.n	12b36 <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12b32:	2304      	movs	r3, #4
   12b34:	e062      	b.n	12bfc <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12b36:	2317      	movs	r3, #23
   12b38:	18fb      	adds	r3, r7, r3
   12b3a:	22fa      	movs	r2, #250	; 0xfa
   12b3c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12b3e:	2317      	movs	r3, #23
   12b40:	18fb      	adds	r3, r7, r3
   12b42:	781b      	ldrb	r3, [r3, #0]
   12b44:	2101      	movs	r1, #1
   12b46:	0018      	movs	r0, r3
   12b48:	4b2f      	ldr	r3, [pc, #188]	; (12c08 <gsm_send_sms+0x100>)
   12b4a:	4798      	blx	r3
   12b4c:	0003      	movs	r3, r0
   12b4e:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12b50:	693b      	ldr	r3, [r7, #16]
   12b52:	2b00      	cmp	r3, #0
   12b54:	d101      	bne.n	12b5a <gsm_send_sms+0x52>
	{
		return 0;
   12b56:	2300      	movs	r3, #0
   12b58:	e050      	b.n	12bfc <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12b5a:	2317      	movs	r3, #23
   12b5c:	18fb      	adds	r3, r7, r3
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	693b      	ldr	r3, [r7, #16]
   12b62:	2100      	movs	r1, #0
   12b64:	0018      	movs	r0, r3
   12b66:	4b29      	ldr	r3, [pc, #164]	; (12c0c <gsm_send_sms+0x104>)
   12b68:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12b6a:	2317      	movs	r3, #23
   12b6c:	18fb      	adds	r3, r7, r3
   12b6e:	7819      	ldrb	r1, [r3, #0]
   12b70:	687b      	ldr	r3, [r7, #4]
   12b72:	4a27      	ldr	r2, [pc, #156]	; (12c10 <gsm_send_sms+0x108>)
   12b74:	6938      	ldr	r0, [r7, #16]
   12b76:	4c27      	ldr	r4, [pc, #156]	; (12c14 <gsm_send_sms+0x10c>)
   12b78:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12b7a:	4a27      	ldr	r2, [pc, #156]	; (12c18 <gsm_send_sms+0x110>)
   12b7c:	4927      	ldr	r1, [pc, #156]	; (12c1c <gsm_send_sms+0x114>)
   12b7e:	6938      	ldr	r0, [r7, #16]
   12b80:	2300      	movs	r3, #0
   12b82:	9300      	str	r3, [sp, #0]
   12b84:	2300      	movs	r3, #0
   12b86:	4c26      	ldr	r4, [pc, #152]	; (12c20 <gsm_send_sms+0x118>)
   12b88:	47a0      	blx	r4
   12b8a:	1e03      	subs	r3, r0, #0
   12b8c:	d131      	bne.n	12bf2 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12b8e:	23fa      	movs	r3, #250	; 0xfa
   12b90:	005b      	lsls	r3, r3, #1
   12b92:	0018      	movs	r0, r3
   12b94:	4b23      	ldr	r3, [pc, #140]	; (12c24 <gsm_send_sms+0x11c>)
   12b96:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12b98:	2317      	movs	r3, #23
   12b9a:	18fb      	adds	r3, r7, r3
   12b9c:	781a      	ldrb	r2, [r3, #0]
   12b9e:	693b      	ldr	r3, [r7, #16]
   12ba0:	2100      	movs	r1, #0
   12ba2:	0018      	movs	r0, r3
   12ba4:	4b19      	ldr	r3, [pc, #100]	; (12c0c <gsm_send_sms+0x104>)
   12ba6:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12ba8:	2317      	movs	r3, #23
   12baa:	18fb      	adds	r3, r7, r3
   12bac:	7819      	ldrb	r1, [r3, #0]
   12bae:	683b      	ldr	r3, [r7, #0]
   12bb0:	4a1d      	ldr	r2, [pc, #116]	; (12c28 <gsm_send_sms+0x120>)
   12bb2:	6938      	ldr	r0, [r7, #16]
   12bb4:	4c17      	ldr	r4, [pc, #92]	; (12c14 <gsm_send_sms+0x10c>)
   12bb6:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12bb8:	230f      	movs	r3, #15
   12bba:	18fc      	adds	r4, r7, r3
   12bbc:	4a16      	ldr	r2, [pc, #88]	; (12c18 <gsm_send_sms+0x110>)
   12bbe:	491b      	ldr	r1, [pc, #108]	; (12c2c <gsm_send_sms+0x124>)
   12bc0:	6938      	ldr	r0, [r7, #16]
   12bc2:	2300      	movs	r3, #0
   12bc4:	9300      	str	r3, [sp, #0]
   12bc6:	2300      	movs	r3, #0
   12bc8:	4d15      	ldr	r5, [pc, #84]	; (12c20 <gsm_send_sms+0x118>)
   12bca:	47a8      	blx	r5
   12bcc:	0003      	movs	r3, r0
   12bce:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12bd0:	230f      	movs	r3, #15
   12bd2:	18fb      	adds	r3, r7, r3
   12bd4:	781b      	ldrb	r3, [r3, #0]
   12bd6:	2b00      	cmp	r3, #0
   12bd8:	d105      	bne.n	12be6 <gsm_send_sms+0xde>
		{
			free(cmdx);
   12bda:	693b      	ldr	r3, [r7, #16]
   12bdc:	0018      	movs	r0, r3
   12bde:	4b14      	ldr	r3, [pc, #80]	; (12c30 <gsm_send_sms+0x128>)
   12be0:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12be2:	2300      	movs	r3, #0
   12be4:	e00a      	b.n	12bfc <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12be6:	693b      	ldr	r3, [r7, #16]
   12be8:	0018      	movs	r0, r3
   12bea:	4b11      	ldr	r3, [pc, #68]	; (12c30 <gsm_send_sms+0x128>)
   12bec:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12bee:	2306      	movs	r3, #6
   12bf0:	e004      	b.n	12bfc <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12bf2:	693b      	ldr	r3, [r7, #16]
   12bf4:	0018      	movs	r0, r3
   12bf6:	4b0e      	ldr	r3, [pc, #56]	; (12c30 <gsm_send_sms+0x128>)
   12bf8:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12bfa:	2306      	movs	r3, #6
	}
}
   12bfc:	0018      	movs	r0, r3
   12bfe:	46bd      	mov	sp, r7
   12c00:	b006      	add	sp, #24
   12c02:	bdb0      	pop	{r4, r5, r7, pc}
   12c04:	000290a3 	.word	0x000290a3
   12c08:	00028d05 	.word	0x00028d05
   12c0c:	00028e13 	.word	0x00028e13
   12c10:	00029c70 	.word	0x00029c70
   12c14:	00028fb5 	.word	0x00028fb5
   12c18:	0000ea60 	.word	0x0000ea60
   12c1c:	00029c80 	.word	0x00029c80
   12c20:	000123cd 	.word	0x000123cd
   12c24:	0001fee9 	.word	0x0001fee9
   12c28:	00029c84 	.word	0x00029c84
   12c2c:	00029ac8 	.word	0x00029ac8
   12c30:	00028da5 	.word	0x00028da5

00012c34 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12c34:	b590      	push	{r4, r7, lr}
   12c36:	b08f      	sub	sp, #60	; 0x3c
   12c38:	af02      	add	r7, sp, #8
   12c3a:	60b9      	str	r1, [r7, #8]
   12c3c:	0011      	movs	r1, r2
   12c3e:	607b      	str	r3, [r7, #4]
   12c40:	230f      	movs	r3, #15
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	1c02      	adds	r2, r0, #0
   12c46:	701a      	strb	r2, [r3, #0]
   12c48:	230e      	movs	r3, #14
   12c4a:	18fb      	adds	r3, r7, r3
   12c4c:	1c0a      	adds	r2, r1, #0
   12c4e:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12c50:	232f      	movs	r3, #47	; 0x2f
   12c52:	18fb      	adds	r3, r7, r3
   12c54:	22e6      	movs	r2, #230	; 0xe6
   12c56:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12c58:	232f      	movs	r3, #47	; 0x2f
   12c5a:	18fb      	adds	r3, r7, r3
   12c5c:	781b      	ldrb	r3, [r3, #0]
   12c5e:	2101      	movs	r1, #1
   12c60:	0018      	movs	r0, r3
   12c62:	4b6e      	ldr	r3, [pc, #440]	; (12e1c <gsm_read_sms+0x1e8>)
   12c64:	4798      	blx	r3
   12c66:	0003      	movs	r3, r0
   12c68:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c6c:	2b00      	cmp	r3, #0
   12c6e:	d105      	bne.n	12c7c <gsm_read_sms+0x48>
	{
		free(cmdx);
   12c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c72:	0018      	movs	r0, r3
   12c74:	4b6a      	ldr	r3, [pc, #424]	; (12e20 <gsm_read_sms+0x1ec>)
   12c76:	4798      	blx	r3
		return 0;
   12c78:	2300      	movs	r3, #0
   12c7a:	e0ca      	b.n	12e12 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12c7c:	232f      	movs	r3, #47	; 0x2f
   12c7e:	18fb      	adds	r3, r7, r3
   12c80:	781a      	ldrb	r2, [r3, #0]
   12c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c84:	2100      	movs	r1, #0
   12c86:	0018      	movs	r0, r3
   12c88:	4b66      	ldr	r3, [pc, #408]	; (12e24 <gsm_read_sms+0x1f0>)
   12c8a:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12c8c:	2310      	movs	r3, #16
   12c8e:	18fb      	adds	r3, r7, r3
   12c90:	0018      	movs	r0, r3
   12c92:	230a      	movs	r3, #10
   12c94:	001a      	movs	r2, r3
   12c96:	2100      	movs	r1, #0
   12c98:	4b62      	ldr	r3, [pc, #392]	; (12e24 <gsm_read_sms+0x1f0>)
   12c9a:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12c9c:	232f      	movs	r3, #47	; 0x2f
   12c9e:	18fb      	adds	r3, r7, r3
   12ca0:	7819      	ldrb	r1, [r3, #0]
   12ca2:	230f      	movs	r3, #15
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	4a5f      	ldr	r2, [pc, #380]	; (12e28 <gsm_read_sms+0x1f4>)
   12caa:	2010      	movs	r0, #16
   12cac:	1838      	adds	r0, r7, r0
   12cae:	4c5f      	ldr	r4, [pc, #380]	; (12e2c <gsm_read_sms+0x1f8>)
   12cb0:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12cb2:	232f      	movs	r3, #47	; 0x2f
   12cb4:	18fb      	adds	r3, r7, r3
   12cb6:	781a      	ldrb	r2, [r3, #0]
   12cb8:	4c5d      	ldr	r4, [pc, #372]	; (12e30 <gsm_read_sms+0x1fc>)
   12cba:	495e      	ldr	r1, [pc, #376]	; (12e34 <gsm_read_sms+0x200>)
   12cbc:	2310      	movs	r3, #16
   12cbe:	18f8      	adds	r0, r7, r3
   12cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cc2:	9300      	str	r3, [sp, #0]
   12cc4:	0013      	movs	r3, r2
   12cc6:	0022      	movs	r2, r4
   12cc8:	4c5b      	ldr	r4, [pc, #364]	; (12e38 <gsm_read_sms+0x204>)
   12cca:	47a0      	blx	r4
   12ccc:	1e03      	subs	r3, r0, #0
   12cce:	d000      	beq.n	12cd2 <gsm_read_sms+0x9e>
   12cd0:	e094      	b.n	12dfc <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12cd2:	4a5a      	ldr	r2, [pc, #360]	; (12e3c <gsm_read_sms+0x208>)
   12cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cd6:	0011      	movs	r1, r2
   12cd8:	0018      	movs	r0, r3
   12cda:	4b59      	ldr	r3, [pc, #356]	; (12e40 <gsm_read_sms+0x20c>)
   12cdc:	4798      	blx	r3
   12cde:	0003      	movs	r3, r0
   12ce0:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d100      	bne.n	12cea <gsm_read_sms+0xb6>
   12ce8:	e082      	b.n	12df0 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cec:	212c      	movs	r1, #44	; 0x2c
   12cee:	0018      	movs	r0, r3
   12cf0:	4b54      	ldr	r3, [pc, #336]	; (12e44 <gsm_read_sms+0x210>)
   12cf2:	4798      	blx	r3
   12cf4:	0003      	movs	r3, r0
   12cf6:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12cf8:	6a3b      	ldr	r3, [r7, #32]
   12cfa:	3302      	adds	r3, #2
   12cfc:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12cfe:	69fb      	ldr	r3, [r7, #28]
   12d00:	2122      	movs	r1, #34	; 0x22
   12d02:	0018      	movs	r0, r3
   12d04:	4b4f      	ldr	r3, [pc, #316]	; (12e44 <gsm_read_sms+0x210>)
   12d06:	4798      	blx	r3
   12d08:	0003      	movs	r3, r0
   12d0a:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12d0c:	6a3b      	ldr	r3, [r7, #32]
   12d0e:	2b00      	cmp	r3, #0
   12d10:	d02a      	beq.n	12d68 <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12d12:	6a3b      	ldr	r3, [r7, #32]
   12d14:	2200      	movs	r2, #0
   12d16:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12d18:	69fb      	ldr	r3, [r7, #28]
   12d1a:	0018      	movs	r0, r3
   12d1c:	4b4a      	ldr	r3, [pc, #296]	; (12e48 <gsm_read_sms+0x214>)
   12d1e:	4798      	blx	r3
   12d20:	0002      	movs	r2, r0
   12d22:	231b      	movs	r3, #27
   12d24:	18fb      	adds	r3, r7, r3
   12d26:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12d28:	231b      	movs	r3, #27
   12d2a:	18fa      	adds	r2, r7, r3
   12d2c:	230e      	movs	r3, #14
   12d2e:	18fb      	adds	r3, r7, r3
   12d30:	7812      	ldrb	r2, [r2, #0]
   12d32:	781b      	ldrb	r3, [r3, #0]
   12d34:	429a      	cmp	r2, r3
   12d36:	d206      	bcs.n	12d46 <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12d38:	69fa      	ldr	r2, [r7, #28]
   12d3a:	68bb      	ldr	r3, [r7, #8]
   12d3c:	0011      	movs	r1, r2
   12d3e:	0018      	movs	r0, r3
   12d40:	4b42      	ldr	r3, [pc, #264]	; (12e4c <gsm_read_sms+0x218>)
   12d42:	4798      	blx	r3
   12d44:	e010      	b.n	12d68 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12d46:	230e      	movs	r3, #14
   12d48:	18fb      	adds	r3, r7, r3
   12d4a:	781b      	ldrb	r3, [r3, #0]
   12d4c:	3b01      	subs	r3, #1
   12d4e:	001a      	movs	r2, r3
   12d50:	69f9      	ldr	r1, [r7, #28]
   12d52:	68bb      	ldr	r3, [r7, #8]
   12d54:	0018      	movs	r0, r3
   12d56:	4b3e      	ldr	r3, [pc, #248]	; (12e50 <gsm_read_sms+0x21c>)
   12d58:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12d5a:	230e      	movs	r3, #14
   12d5c:	18fb      	adds	r3, r7, r3
   12d5e:	781b      	ldrb	r3, [r3, #0]
   12d60:	68ba      	ldr	r2, [r7, #8]
   12d62:	18d3      	adds	r3, r2, r3
   12d64:	2200      	movs	r2, #0
   12d66:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12d68:	6a3b      	ldr	r3, [r7, #32]
   12d6a:	3301      	adds	r3, #1
   12d6c:	210a      	movs	r1, #10
   12d6e:	0018      	movs	r0, r3
   12d70:	4b34      	ldr	r3, [pc, #208]	; (12e44 <gsm_read_sms+0x210>)
   12d72:	4798      	blx	r3
   12d74:	0003      	movs	r3, r0
   12d76:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12d78:	6a3b      	ldr	r3, [r7, #32]
   12d7a:	2b00      	cmp	r3, #0
   12d7c:	d044      	beq.n	12e08 <gsm_read_sms+0x1d4>
			{
				p_char++;
   12d7e:	6a3b      	ldr	r3, [r7, #32]
   12d80:	3301      	adds	r3, #1
   12d82:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12d84:	6a3b      	ldr	r3, [r7, #32]
   12d86:	210d      	movs	r1, #13
   12d88:	0018      	movs	r0, r3
   12d8a:	4b2e      	ldr	r3, [pc, #184]	; (12e44 <gsm_read_sms+0x210>)
   12d8c:	4798      	blx	r3
   12d8e:	0003      	movs	r3, r0
   12d90:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12d92:	69fb      	ldr	r3, [r7, #28]
   12d94:	2b00      	cmp	r3, #0
   12d96:	d002      	beq.n	12d9e <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12d98:	69fb      	ldr	r3, [r7, #28]
   12d9a:	2200      	movs	r2, #0
   12d9c:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12d9e:	6a3b      	ldr	r3, [r7, #32]
   12da0:	0018      	movs	r0, r3
   12da2:	4b29      	ldr	r3, [pc, #164]	; (12e48 <gsm_read_sms+0x214>)
   12da4:	4798      	blx	r3
   12da6:	0002      	movs	r2, r0
   12da8:	231b      	movs	r3, #27
   12daa:	18fb      	adds	r3, r7, r3
   12dac:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12dae:	231b      	movs	r3, #27
   12db0:	18fb      	adds	r3, r7, r3
   12db2:	2240      	movs	r2, #64	; 0x40
   12db4:	18b9      	adds	r1, r7, r2
   12db6:	781a      	ldrb	r2, [r3, #0]
   12db8:	780b      	ldrb	r3, [r1, #0]
   12dba:	429a      	cmp	r2, r3
   12dbc:	d206      	bcs.n	12dcc <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12dbe:	6a3a      	ldr	r2, [r7, #32]
   12dc0:	687b      	ldr	r3, [r7, #4]
   12dc2:	0011      	movs	r1, r2
   12dc4:	0018      	movs	r0, r3
   12dc6:	4b21      	ldr	r3, [pc, #132]	; (12e4c <gsm_read_sms+0x218>)
   12dc8:	4798      	blx	r3
   12dca:	e01d      	b.n	12e08 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12dcc:	2340      	movs	r3, #64	; 0x40
   12dce:	18fb      	adds	r3, r7, r3
   12dd0:	781b      	ldrb	r3, [r3, #0]
   12dd2:	3b01      	subs	r3, #1
   12dd4:	001a      	movs	r2, r3
   12dd6:	6a39      	ldr	r1, [r7, #32]
   12dd8:	687b      	ldr	r3, [r7, #4]
   12dda:	0018      	movs	r0, r3
   12ddc:	4b1c      	ldr	r3, [pc, #112]	; (12e50 <gsm_read_sms+0x21c>)
   12dde:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12de0:	2340      	movs	r3, #64	; 0x40
   12de2:	18fb      	adds	r3, r7, r3
   12de4:	781b      	ldrb	r3, [r3, #0]
   12de6:	687a      	ldr	r2, [r7, #4]
   12de8:	18d3      	adds	r3, r2, r3
   12dea:	2200      	movs	r2, #0
   12dec:	701a      	strb	r2, [r3, #0]
   12dee:	e00b      	b.n	12e08 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12df2:	0018      	movs	r0, r3
   12df4:	4b0a      	ldr	r3, [pc, #40]	; (12e20 <gsm_read_sms+0x1ec>)
   12df6:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12df8:	230c      	movs	r3, #12
   12dfa:	e00a      	b.n	12e12 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12dfe:	0018      	movs	r0, r3
   12e00:	4b07      	ldr	r3, [pc, #28]	; (12e20 <gsm_read_sms+0x1ec>)
   12e02:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e04:	230c      	movs	r3, #12
   12e06:	e004      	b.n	12e12 <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e0a:	0018      	movs	r0, r3
   12e0c:	4b04      	ldr	r3, [pc, #16]	; (12e20 <gsm_read_sms+0x1ec>)
   12e0e:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12e10:	2300      	movs	r3, #0
}
   12e12:	0018      	movs	r0, r3
   12e14:	46bd      	mov	sp, r7
   12e16:	b00d      	add	sp, #52	; 0x34
   12e18:	bd90      	pop	{r4, r7, pc}
   12e1a:	46c0      	nop			; (mov r8, r8)
   12e1c:	00028d05 	.word	0x00028d05
   12e20:	00028da5 	.word	0x00028da5
   12e24:	00028e13 	.word	0x00028e13
   12e28:	00029cd0 	.word	0x00029cd0
   12e2c:	00028fb5 	.word	0x00028fb5
   12e30:	00001388 	.word	0x00001388
   12e34:	00029ac8 	.word	0x00029ac8
   12e38:	000123cd 	.word	0x000123cd
   12e3c:	00029cdc 	.word	0x00029cdc
   12e40:	000290d3 	.word	0x000290d3
   12e44:	00029077 	.word	0x00029077
   12e48:	000290a3 	.word	0x000290a3
   12e4c:	00029093 	.word	0x00029093
   12e50:	00028ddd 	.word	0x00028ddd

00012e54 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12e54:	b5b0      	push	{r4, r5, r7, lr}
   12e56:	b088      	sub	sp, #32
   12e58:	af02      	add	r7, sp, #8
   12e5a:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12e5c:	2317      	movs	r3, #23
   12e5e:	18fb      	adds	r3, r7, r3
   12e60:	221e      	movs	r2, #30
   12e62:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12e64:	2317      	movs	r3, #23
   12e66:	18fb      	adds	r3, r7, r3
   12e68:	781b      	ldrb	r3, [r3, #0]
   12e6a:	2101      	movs	r1, #1
   12e6c:	0018      	movs	r0, r3
   12e6e:	4b18      	ldr	r3, [pc, #96]	; (12ed0 <gsm_call_to_dial_a_number+0x7c>)
   12e70:	4798      	blx	r3
   12e72:	0003      	movs	r3, r0
   12e74:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12e76:	693b      	ldr	r3, [r7, #16]
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d101      	bne.n	12e80 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12e7c:	2300      	movs	r3, #0
   12e7e:	e023      	b.n	12ec8 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12e80:	2317      	movs	r3, #23
   12e82:	18fb      	adds	r3, r7, r3
   12e84:	781a      	ldrb	r2, [r3, #0]
   12e86:	693b      	ldr	r3, [r7, #16]
   12e88:	2100      	movs	r1, #0
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b11      	ldr	r3, [pc, #68]	; (12ed4 <gsm_call_to_dial_a_number+0x80>)
   12e8e:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12e90:	2317      	movs	r3, #23
   12e92:	18fb      	adds	r3, r7, r3
   12e94:	7819      	ldrb	r1, [r3, #0]
   12e96:	687b      	ldr	r3, [r7, #4]
   12e98:	4a0f      	ldr	r2, [pc, #60]	; (12ed8 <gsm_call_to_dial_a_number+0x84>)
   12e9a:	6938      	ldr	r0, [r7, #16]
   12e9c:	4c0f      	ldr	r4, [pc, #60]	; (12edc <gsm_call_to_dial_a_number+0x88>)
   12e9e:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12ea0:	230f      	movs	r3, #15
   12ea2:	18fc      	adds	r4, r7, r3
   12ea4:	23fa      	movs	r3, #250	; 0xfa
   12ea6:	00da      	lsls	r2, r3, #3
   12ea8:	490d      	ldr	r1, [pc, #52]	; (12ee0 <gsm_call_to_dial_a_number+0x8c>)
   12eaa:	6938      	ldr	r0, [r7, #16]
   12eac:	2300      	movs	r3, #0
   12eae:	9300      	str	r3, [sp, #0]
   12eb0:	2300      	movs	r3, #0
   12eb2:	4d0c      	ldr	r5, [pc, #48]	; (12ee4 <gsm_call_to_dial_a_number+0x90>)
   12eb4:	47a8      	blx	r5
   12eb6:	0003      	movs	r3, r0
   12eb8:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12eba:	693b      	ldr	r3, [r7, #16]
   12ebc:	0018      	movs	r0, r3
   12ebe:	4b0a      	ldr	r3, [pc, #40]	; (12ee8 <gsm_call_to_dial_a_number+0x94>)
   12ec0:	4798      	blx	r3
	return err;
   12ec2:	230f      	movs	r3, #15
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	781b      	ldrb	r3, [r3, #0]
	
}
   12ec8:	0018      	movs	r0, r3
   12eca:	46bd      	mov	sp, r7
   12ecc:	b006      	add	sp, #24
   12ece:	bdb0      	pop	{r4, r5, r7, pc}
   12ed0:	00028d05 	.word	0x00028d05
   12ed4:	00028e13 	.word	0x00028e13
   12ed8:	00029ce4 	.word	0x00029ce4
   12edc:	00028fb5 	.word	0x00028fb5
   12ee0:	00029ac8 	.word	0x00029ac8
   12ee4:	000123cd 	.word	0x000123cd
   12ee8:	00028da5 	.word	0x00028da5

00012eec <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12eec:	b590      	push	{r4, r7, lr}
   12eee:	b083      	sub	sp, #12
   12ef0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12ef2:	4a06      	ldr	r2, [pc, #24]	; (12f0c <gsm_answer_an_incomming_call+0x20>)
   12ef4:	4906      	ldr	r1, [pc, #24]	; (12f10 <gsm_answer_an_incomming_call+0x24>)
   12ef6:	4807      	ldr	r0, [pc, #28]	; (12f14 <gsm_answer_an_incomming_call+0x28>)
   12ef8:	2300      	movs	r3, #0
   12efa:	9300      	str	r3, [sp, #0]
   12efc:	2300      	movs	r3, #0
   12efe:	4c06      	ldr	r4, [pc, #24]	; (12f18 <gsm_answer_an_incomming_call+0x2c>)
   12f00:	47a0      	blx	r4
   12f02:	0003      	movs	r3, r0
}
   12f04:	0018      	movs	r0, r3
   12f06:	46bd      	mov	sp, r7
   12f08:	b001      	add	sp, #4
   12f0a:	bd90      	pop	{r4, r7, pc}
   12f0c:	00001388 	.word	0x00001388
   12f10:	00029ac8 	.word	0x00029ac8
   12f14:	00029cec 	.word	0x00029cec
   12f18:	000123cd 	.word	0x000123cd

00012f1c <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12f1c:	b590      	push	{r4, r7, lr}
   12f1e:	b083      	sub	sp, #12
   12f20:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12f22:	4a06      	ldr	r2, [pc, #24]	; (12f3c <gsm_enable_network_time_update+0x20>)
   12f24:	4906      	ldr	r1, [pc, #24]	; (12f40 <gsm_enable_network_time_update+0x24>)
   12f26:	4807      	ldr	r0, [pc, #28]	; (12f44 <gsm_enable_network_time_update+0x28>)
   12f28:	2300      	movs	r3, #0
   12f2a:	9300      	str	r3, [sp, #0]
   12f2c:	2300      	movs	r3, #0
   12f2e:	4c06      	ldr	r4, [pc, #24]	; (12f48 <gsm_enable_network_time_update+0x2c>)
   12f30:	47a0      	blx	r4
   12f32:	0003      	movs	r3, r0
}
   12f34:	0018      	movs	r0, r3
   12f36:	46bd      	mov	sp, r7
   12f38:	b001      	add	sp, #4
   12f3a:	bd90      	pop	{r4, r7, pc}
   12f3c:	00002710 	.word	0x00002710
   12f40:	00029ac8 	.word	0x00029ac8
   12f44:	00029cf4 	.word	0x00029cf4
   12f48:	000123cd 	.word	0x000123cd

00012f4c <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12f4c:	b590      	push	{r4, r7, lr}
   12f4e:	b083      	sub	sp, #12
   12f50:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f52:	4a06      	ldr	r2, [pc, #24]	; (12f6c <gsm_enable_DTMF_detection+0x20>)
   12f54:	4906      	ldr	r1, [pc, #24]	; (12f70 <gsm_enable_DTMF_detection+0x24>)
   12f56:	4807      	ldr	r0, [pc, #28]	; (12f74 <gsm_enable_DTMF_detection+0x28>)
   12f58:	2300      	movs	r3, #0
   12f5a:	9300      	str	r3, [sp, #0]
   12f5c:	2300      	movs	r3, #0
   12f5e:	4c06      	ldr	r4, [pc, #24]	; (12f78 <gsm_enable_DTMF_detection+0x2c>)
   12f60:	47a0      	blx	r4
   12f62:	0003      	movs	r3, r0
}
   12f64:	0018      	movs	r0, r3
   12f66:	46bd      	mov	sp, r7
   12f68:	b001      	add	sp, #4
   12f6a:	bd90      	pop	{r4, r7, pc}
   12f6c:	00001388 	.word	0x00001388
   12f70:	00029ac8 	.word	0x00029ac8
   12f74:	00029d0c 	.word	0x00029d0c
   12f78:	000123cd 	.word	0x000123cd

00012f7c <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   12f7c:	b5b0      	push	{r4, r5, r7, lr}
   12f7e:	b088      	sub	sp, #32
   12f80:	af02      	add	r7, sp, #8
   12f82:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12f84:	2317      	movs	r3, #23
   12f86:	18fb      	adds	r3, r7, r3
   12f88:	221e      	movs	r2, #30
   12f8a:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12f8c:	2317      	movs	r3, #23
   12f8e:	18fb      	adds	r3, r7, r3
   12f90:	781b      	ldrb	r3, [r3, #0]
   12f92:	2101      	movs	r1, #1
   12f94:	0018      	movs	r0, r3
   12f96:	4b18      	ldr	r3, [pc, #96]	; (12ff8 <gsm_send_DTMF_Tone+0x7c>)
   12f98:	4798      	blx	r3
   12f9a:	0003      	movs	r3, r0
   12f9c:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12f9e:	693b      	ldr	r3, [r7, #16]
   12fa0:	2b00      	cmp	r3, #0
   12fa2:	d101      	bne.n	12fa8 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   12fa4:	2300      	movs	r3, #0
   12fa6:	e022      	b.n	12fee <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12fa8:	2317      	movs	r3, #23
   12faa:	18fb      	adds	r3, r7, r3
   12fac:	781a      	ldrb	r2, [r3, #0]
   12fae:	693b      	ldr	r3, [r7, #16]
   12fb0:	2100      	movs	r1, #0
   12fb2:	0018      	movs	r0, r3
   12fb4:	4b11      	ldr	r3, [pc, #68]	; (12ffc <gsm_send_DTMF_Tone+0x80>)
   12fb6:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   12fb8:	2317      	movs	r3, #23
   12fba:	18fb      	adds	r3, r7, r3
   12fbc:	7819      	ldrb	r1, [r3, #0]
   12fbe:	687b      	ldr	r3, [r7, #4]
   12fc0:	4a0f      	ldr	r2, [pc, #60]	; (13000 <gsm_send_DTMF_Tone+0x84>)
   12fc2:	6938      	ldr	r0, [r7, #16]
   12fc4:	4c0f      	ldr	r4, [pc, #60]	; (13004 <gsm_send_DTMF_Tone+0x88>)
   12fc6:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   12fc8:	230f      	movs	r3, #15
   12fca:	18fc      	adds	r4, r7, r3
   12fcc:	4a0e      	ldr	r2, [pc, #56]	; (13008 <gsm_send_DTMF_Tone+0x8c>)
   12fce:	490f      	ldr	r1, [pc, #60]	; (1300c <gsm_send_DTMF_Tone+0x90>)
   12fd0:	6938      	ldr	r0, [r7, #16]
   12fd2:	2300      	movs	r3, #0
   12fd4:	9300      	str	r3, [sp, #0]
   12fd6:	2300      	movs	r3, #0
   12fd8:	4d0d      	ldr	r5, [pc, #52]	; (13010 <gsm_send_DTMF_Tone+0x94>)
   12fda:	47a8      	blx	r5
   12fdc:	0003      	movs	r3, r0
   12fde:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12fe0:	693b      	ldr	r3, [r7, #16]
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b0b      	ldr	r3, [pc, #44]	; (13014 <gsm_send_DTMF_Tone+0x98>)
   12fe6:	4798      	blx	r3
	return err;
   12fe8:	230f      	movs	r3, #15
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	781b      	ldrb	r3, [r3, #0]
}
   12fee:	0018      	movs	r0, r3
   12ff0:	46bd      	mov	sp, r7
   12ff2:	b006      	add	sp, #24
   12ff4:	bdb0      	pop	{r4, r5, r7, pc}
   12ff6:	46c0      	nop			; (mov r8, r8)
   12ff8:	00028d05 	.word	0x00028d05
   12ffc:	00028e13 	.word	0x00028e13
   13000:	00029d18 	.word	0x00029d18
   13004:	00028fb5 	.word	0x00028fb5
   13008:	00001388 	.word	0x00001388
   1300c:	00029ac8 	.word	0x00029ac8
   13010:	000123cd 	.word	0x000123cd
   13014:	00028da5 	.word	0x00028da5

00013018 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   13018:	b590      	push	{r4, r7, lr}
   1301a:	b083      	sub	sp, #12
   1301c:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1301e:	4a06      	ldr	r2, [pc, #24]	; (13038 <gsm_hangup_call+0x20>)
   13020:	4906      	ldr	r1, [pc, #24]	; (1303c <gsm_hangup_call+0x24>)
   13022:	4807      	ldr	r0, [pc, #28]	; (13040 <gsm_hangup_call+0x28>)
   13024:	2300      	movs	r3, #0
   13026:	9300      	str	r3, [sp, #0]
   13028:	2300      	movs	r3, #0
   1302a:	4c06      	ldr	r4, [pc, #24]	; (13044 <gsm_hangup_call+0x2c>)
   1302c:	47a0      	blx	r4
   1302e:	0003      	movs	r3, r0
}
   13030:	0018      	movs	r0, r3
   13032:	46bd      	mov	sp, r7
   13034:	b001      	add	sp, #4
   13036:	bd90      	pop	{r4, r7, pc}
   13038:	00001388 	.word	0x00001388
   1303c:	00029ac8 	.word	0x00029ac8
   13040:	00029d28 	.word	0x00029d28
   13044:	000123cd 	.word	0x000123cd

00013048 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   13048:	b590      	push	{r4, r7, lr}
   1304a:	b083      	sub	sp, #12
   1304c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   1304e:	4a06      	ldr	r2, [pc, #24]	; (13068 <gsm_disable_call_waiting+0x20>)
   13050:	4906      	ldr	r1, [pc, #24]	; (1306c <gsm_disable_call_waiting+0x24>)
   13052:	4807      	ldr	r0, [pc, #28]	; (13070 <gsm_disable_call_waiting+0x28>)
   13054:	2300      	movs	r3, #0
   13056:	9300      	str	r3, [sp, #0]
   13058:	2300      	movs	r3, #0
   1305a:	4c06      	ldr	r4, [pc, #24]	; (13074 <gsm_disable_call_waiting+0x2c>)
   1305c:	47a0      	blx	r4
   1305e:	0003      	movs	r3, r0
}
   13060:	0018      	movs	r0, r3
   13062:	46bd      	mov	sp, r7
   13064:	b001      	add	sp, #4
   13066:	bd90      	pop	{r4, r7, pc}
   13068:	00004650 	.word	0x00004650
   1306c:	00029ac8 	.word	0x00029ac8
   13070:	00029d34 	.word	0x00029d34
   13074:	000123cd 	.word	0x000123cd

00013078 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   13078:	b590      	push	{r4, r7, lr}
   1307a:	b083      	sub	sp, #12
   1307c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
   1307e:	23fa      	movs	r3, #250	; 0xfa
   13080:	00da      	lsls	r2, r3, #3
   13082:	4906      	ldr	r1, [pc, #24]	; (1309c <gsm_stop_play_record_file+0x24>)
   13084:	4806      	ldr	r0, [pc, #24]	; (130a0 <gsm_stop_play_record_file+0x28>)
   13086:	2300      	movs	r3, #0
   13088:	9300      	str	r3, [sp, #0]
   1308a:	2300      	movs	r3, #0
   1308c:	4c05      	ldr	r4, [pc, #20]	; (130a4 <gsm_stop_play_record_file+0x2c>)
   1308e:	47a0      	blx	r4
   13090:	0003      	movs	r3, r0
}
   13092:	0018      	movs	r0, r3
   13094:	46bd      	mov	sp, r7
   13096:	b001      	add	sp, #4
   13098:	bd90      	pop	{r4, r7, pc}
   1309a:	46c0      	nop			; (mov r8, r8)
   1309c:	00029ac8 	.word	0x00029ac8
   130a0:	00029d64 	.word	0x00029d64
   130a4:	000123cd 	.word	0x000123cd

000130a8 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   130a8:	b590      	push	{r4, r7, lr}
   130aa:	b087      	sub	sp, #28
   130ac:	af02      	add	r7, sp, #8
   130ae:	6078      	str	r0, [r7, #4]
   130b0:	000a      	movs	r2, r1
   130b2:	1cfb      	adds	r3, r7, #3
   130b4:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   130b6:	230f      	movs	r3, #15
   130b8:	18fb      	adds	r3, r7, r3
   130ba:	2200      	movs	r2, #0
   130bc:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   130be:	1cfb      	adds	r3, r7, #3
   130c0:	781b      	ldrb	r3, [r3, #0]
   130c2:	2b00      	cmp	r3, #0
   130c4:	d003      	beq.n	130ce <gsm_play_record_file+0x26>
	{
		repeat = 1;
   130c6:	230f      	movs	r3, #15
   130c8:	18fb      	adds	r3, r7, r3
   130ca:	2201      	movs	r2, #1
   130cc:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   130ce:	230e      	movs	r3, #14
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	2232      	movs	r2, #50	; 0x32
   130d4:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   130d6:	230e      	movs	r3, #14
   130d8:	18fb      	adds	r3, r7, r3
   130da:	781b      	ldrb	r3, [r3, #0]
   130dc:	2101      	movs	r1, #1
   130de:	0018      	movs	r0, r3
   130e0:	4b17      	ldr	r3, [pc, #92]	; (13140 <gsm_play_record_file+0x98>)
   130e2:	4798      	blx	r3
   130e4:	0003      	movs	r3, r0
   130e6:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   130e8:	68bb      	ldr	r3, [r7, #8]
   130ea:	2b00      	cmp	r3, #0
   130ec:	d101      	bne.n	130f2 <gsm_play_record_file+0x4a>
	{
		return 0;
   130ee:	2300      	movs	r3, #0
   130f0:	e022      	b.n	13138 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   130f2:	230e      	movs	r3, #14
   130f4:	18fb      	adds	r3, r7, r3
   130f6:	781a      	ldrb	r2, [r3, #0]
   130f8:	68bb      	ldr	r3, [r7, #8]
   130fa:	2100      	movs	r1, #0
   130fc:	0018      	movs	r0, r3
   130fe:	4b11      	ldr	r3, [pc, #68]	; (13144 <gsm_play_record_file+0x9c>)
   13100:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   13102:	230e      	movs	r3, #14
   13104:	18fb      	adds	r3, r7, r3
   13106:	7819      	ldrb	r1, [r3, #0]
   13108:	230f      	movs	r3, #15
   1310a:	18fb      	adds	r3, r7, r3
   1310c:	781b      	ldrb	r3, [r3, #0]
   1310e:	687c      	ldr	r4, [r7, #4]
   13110:	4a0d      	ldr	r2, [pc, #52]	; (13148 <gsm_play_record_file+0xa0>)
   13112:	68b8      	ldr	r0, [r7, #8]
   13114:	9300      	str	r3, [sp, #0]
   13116:	0023      	movs	r3, r4
   13118:	4c0c      	ldr	r4, [pc, #48]	; (1314c <gsm_play_record_file+0xa4>)
   1311a:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   1311c:	23fa      	movs	r3, #250	; 0xfa
   1311e:	00da      	lsls	r2, r3, #3
   13120:	490b      	ldr	r1, [pc, #44]	; (13150 <gsm_play_record_file+0xa8>)
   13122:	68b8      	ldr	r0, [r7, #8]
   13124:	2300      	movs	r3, #0
   13126:	9300      	str	r3, [sp, #0]
   13128:	2300      	movs	r3, #0
   1312a:	4c0a      	ldr	r4, [pc, #40]	; (13154 <gsm_play_record_file+0xac>)
   1312c:	47a0      	blx	r4
	free(cmdx);
   1312e:	68bb      	ldr	r3, [r7, #8]
   13130:	0018      	movs	r0, r3
   13132:	4b09      	ldr	r3, [pc, #36]	; (13158 <gsm_play_record_file+0xb0>)
   13134:	4798      	blx	r3
	return GSM_ERROR_NONE;
   13136:	2300      	movs	r3, #0
	
}
   13138:	0018      	movs	r0, r3
   1313a:	46bd      	mov	sp, r7
   1313c:	b005      	add	sp, #20
   1313e:	bd90      	pop	{r4, r7, pc}
   13140:	00028d05 	.word	0x00028d05
   13144:	00028e13 	.word	0x00028e13
   13148:	00029d70 	.word	0x00029d70
   1314c:	00028fb5 	.word	0x00028fb5
   13150:	00029ac8 	.word	0x00029ac8
   13154:	000123cd 	.word	0x000123cd
   13158:	00028da5 	.word	0x00028da5

0001315c <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   1315c:	b5b0      	push	{r4, r5, r7, lr}
   1315e:	b086      	sub	sp, #24
   13160:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   13162:	230f      	movs	r3, #15
   13164:	18fb      	adds	r3, r7, r3
   13166:	2246      	movs	r2, #70	; 0x46
   13168:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   1316a:	230f      	movs	r3, #15
   1316c:	18fb      	adds	r3, r7, r3
   1316e:	781b      	ldrb	r3, [r3, #0]
   13170:	2101      	movs	r1, #1
   13172:	0018      	movs	r0, r3
   13174:	4b57      	ldr	r3, [pc, #348]	; (132d4 <gsm_get_internal_rtc_time+0x178>)
   13176:	4798      	blx	r3
   13178:	0003      	movs	r3, r0
   1317a:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   1317c:	68bb      	ldr	r3, [r7, #8]
   1317e:	2b00      	cmp	r3, #0
   13180:	d105      	bne.n	1318e <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   13182:	68bb      	ldr	r3, [r7, #8]
   13184:	0018      	movs	r0, r3
   13186:	4b54      	ldr	r3, [pc, #336]	; (132d8 <gsm_get_internal_rtc_time+0x17c>)
   13188:	4798      	blx	r3
		return 0;
   1318a:	2300      	movs	r3, #0
   1318c:	e09d      	b.n	132ca <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   1318e:	230f      	movs	r3, #15
   13190:	18fb      	adds	r3, r7, r3
   13192:	781a      	ldrb	r2, [r3, #0]
   13194:	68bb      	ldr	r3, [r7, #8]
   13196:	2100      	movs	r1, #0
   13198:	0018      	movs	r0, r3
   1319a:	4b50      	ldr	r3, [pc, #320]	; (132dc <gsm_get_internal_rtc_time+0x180>)
   1319c:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   1319e:	1dfc      	adds	r4, r7, #7
   131a0:	230f      	movs	r3, #15
   131a2:	18fb      	adds	r3, r7, r3
   131a4:	781a      	ldrb	r2, [r3, #0]
   131a6:	4d4e      	ldr	r5, [pc, #312]	; (132e0 <gsm_get_internal_rtc_time+0x184>)
   131a8:	494e      	ldr	r1, [pc, #312]	; (132e4 <gsm_get_internal_rtc_time+0x188>)
   131aa:	484f      	ldr	r0, [pc, #316]	; (132e8 <gsm_get_internal_rtc_time+0x18c>)
   131ac:	68bb      	ldr	r3, [r7, #8]
   131ae:	9300      	str	r3, [sp, #0]
   131b0:	0013      	movs	r3, r2
   131b2:	002a      	movs	r2, r5
   131b4:	4d4d      	ldr	r5, [pc, #308]	; (132ec <gsm_get_internal_rtc_time+0x190>)
   131b6:	47a8      	blx	r5
   131b8:	0003      	movs	r3, r0
   131ba:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   131bc:	1dfb      	adds	r3, r7, #7
   131be:	781b      	ldrb	r3, [r3, #0]
   131c0:	2b00      	cmp	r3, #0
   131c2:	d16a      	bne.n	1329a <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   131c4:	4a4a      	ldr	r2, [pc, #296]	; (132f0 <gsm_get_internal_rtc_time+0x194>)
   131c6:	68bb      	ldr	r3, [r7, #8]
   131c8:	0011      	movs	r1, r2
   131ca:	0018      	movs	r0, r3
   131cc:	4b49      	ldr	r3, [pc, #292]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   131ce:	4798      	blx	r3
   131d0:	0003      	movs	r3, r0
   131d2:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   131d4:	4b46      	ldr	r3, [pc, #280]	; (132f0 <gsm_get_internal_rtc_time+0x194>)
   131d6:	0019      	movs	r1, r3
   131d8:	2000      	movs	r0, #0
   131da:	4b46      	ldr	r3, [pc, #280]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   131dc:	4798      	blx	r3
   131de:	0003      	movs	r3, r0
   131e0:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   131e2:	4a45      	ldr	r2, [pc, #276]	; (132f8 <gsm_get_internal_rtc_time+0x19c>)
   131e4:	683b      	ldr	r3, [r7, #0]
   131e6:	0011      	movs	r1, r2
   131e8:	0018      	movs	r0, r3
   131ea:	4b42      	ldr	r3, [pc, #264]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   131ec:	4798      	blx	r3
   131ee:	0003      	movs	r3, r0
   131f0:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   131f2:	683b      	ldr	r3, [r7, #0]
   131f4:	0018      	movs	r0, r3
   131f6:	4b41      	ldr	r3, [pc, #260]	; (132fc <gsm_get_internal_rtc_time+0x1a0>)
   131f8:	4798      	blx	r3
   131fa:	0003      	movs	r3, r0
   131fc:	b2da      	uxtb	r2, r3
   131fe:	4b40      	ldr	r3, [pc, #256]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   13200:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   13202:	4b3d      	ldr	r3, [pc, #244]	; (132f8 <gsm_get_internal_rtc_time+0x19c>)
   13204:	0019      	movs	r1, r3
   13206:	2000      	movs	r0, #0
   13208:	4b3a      	ldr	r3, [pc, #232]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   1320a:	4798      	blx	r3
   1320c:	0003      	movs	r3, r0
   1320e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   13210:	683b      	ldr	r3, [r7, #0]
   13212:	0018      	movs	r0, r3
   13214:	4b39      	ldr	r3, [pc, #228]	; (132fc <gsm_get_internal_rtc_time+0x1a0>)
   13216:	4798      	blx	r3
   13218:	0003      	movs	r3, r0
   1321a:	b2da      	uxtb	r2, r3
   1321c:	4b38      	ldr	r3, [pc, #224]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   1321e:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   13220:	4b38      	ldr	r3, [pc, #224]	; (13304 <gsm_get_internal_rtc_time+0x1a8>)
   13222:	0019      	movs	r1, r3
   13224:	2000      	movs	r0, #0
   13226:	4b33      	ldr	r3, [pc, #204]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   13228:	4798      	blx	r3
   1322a:	0003      	movs	r3, r0
   1322c:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   1322e:	683b      	ldr	r3, [r7, #0]
   13230:	0018      	movs	r0, r3
   13232:	4b32      	ldr	r3, [pc, #200]	; (132fc <gsm_get_internal_rtc_time+0x1a0>)
   13234:	4798      	blx	r3
   13236:	0003      	movs	r3, r0
   13238:	b2da      	uxtb	r2, r3
   1323a:	4b31      	ldr	r3, [pc, #196]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   1323c:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   1323e:	4b32      	ldr	r3, [pc, #200]	; (13308 <gsm_get_internal_rtc_time+0x1ac>)
   13240:	0019      	movs	r1, r3
   13242:	2000      	movs	r0, #0
   13244:	4b2b      	ldr	r3, [pc, #172]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   13246:	4798      	blx	r3
   13248:	0003      	movs	r3, r0
   1324a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   1324c:	683b      	ldr	r3, [r7, #0]
   1324e:	0018      	movs	r0, r3
   13250:	4b2a      	ldr	r3, [pc, #168]	; (132fc <gsm_get_internal_rtc_time+0x1a0>)
   13252:	4798      	blx	r3
   13254:	0003      	movs	r3, r0
   13256:	b2da      	uxtb	r2, r3
   13258:	4b29      	ldr	r3, [pc, #164]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   1325a:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   1325c:	4b2a      	ldr	r3, [pc, #168]	; (13308 <gsm_get_internal_rtc_time+0x1ac>)
   1325e:	0019      	movs	r1, r3
   13260:	2000      	movs	r0, #0
   13262:	4b24      	ldr	r3, [pc, #144]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   13264:	4798      	blx	r3
   13266:	0003      	movs	r3, r0
   13268:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   1326a:	683b      	ldr	r3, [r7, #0]
   1326c:	0018      	movs	r0, r3
   1326e:	4b23      	ldr	r3, [pc, #140]	; (132fc <gsm_get_internal_rtc_time+0x1a0>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	b2da      	uxtb	r2, r3
   13276:	4b22      	ldr	r3, [pc, #136]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   13278:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   1327a:	4b24      	ldr	r3, [pc, #144]	; (1330c <gsm_get_internal_rtc_time+0x1b0>)
   1327c:	0019      	movs	r1, r3
   1327e:	2000      	movs	r0, #0
   13280:	4b1c      	ldr	r3, [pc, #112]	; (132f4 <gsm_get_internal_rtc_time+0x198>)
   13282:	4798      	blx	r3
   13284:	0003      	movs	r3, r0
   13286:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   13288:	683b      	ldr	r3, [r7, #0]
   1328a:	0018      	movs	r0, r3
   1328c:	4b1b      	ldr	r3, [pc, #108]	; (132fc <gsm_get_internal_rtc_time+0x1a0>)
   1328e:	4798      	blx	r3
   13290:	0003      	movs	r3, r0
   13292:	b2da      	uxtb	r2, r3
   13294:	4b1a      	ldr	r3, [pc, #104]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   13296:	715a      	strb	r2, [r3, #5]
   13298:	e011      	b.n	132be <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   1329a:	4b19      	ldr	r3, [pc, #100]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   1329c:	2200      	movs	r2, #0
   1329e:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   132a0:	4b17      	ldr	r3, [pc, #92]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   132a2:	2200      	movs	r2, #0
   132a4:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   132a6:	4b16      	ldr	r3, [pc, #88]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   132a8:	2200      	movs	r2, #0
   132aa:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   132ac:	4b14      	ldr	r3, [pc, #80]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   132ae:	2200      	movs	r2, #0
   132b0:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   132b2:	4b13      	ldr	r3, [pc, #76]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   132b4:	2200      	movs	r2, #0
   132b6:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   132b8:	4b11      	ldr	r3, [pc, #68]	; (13300 <gsm_get_internal_rtc_time+0x1a4>)
   132ba:	2200      	movs	r2, #0
   132bc:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   132be:	68bb      	ldr	r3, [r7, #8]
   132c0:	0018      	movs	r0, r3
   132c2:	4b05      	ldr	r3, [pc, #20]	; (132d8 <gsm_get_internal_rtc_time+0x17c>)
   132c4:	4798      	blx	r3
	return err;
   132c6:	1dfb      	adds	r3, r7, #7
   132c8:	781b      	ldrb	r3, [r3, #0]
}
   132ca:	0018      	movs	r0, r3
   132cc:	46bd      	mov	sp, r7
   132ce:	b004      	add	sp, #16
   132d0:	bdb0      	pop	{r4, r5, r7, pc}
   132d2:	46c0      	nop			; (mov r8, r8)
   132d4:	00028d05 	.word	0x00028d05
   132d8:	00028da5 	.word	0x00028da5
   132dc:	00028e13 	.word	0x00028e13
   132e0:	00001388 	.word	0x00001388
   132e4:	00029ac8 	.word	0x00029ac8
   132e8:	00029d94 	.word	0x00029d94
   132ec:	000123cd 	.word	0x000123cd
   132f0:	00029da0 	.word	0x00029da0
   132f4:	00029105 	.word	0x00029105
   132f8:	00029da4 	.word	0x00029da4
   132fc:	00028cf9 	.word	0x00028cf9
   13300:	20000684 	.word	0x20000684
   13304:	00029be4 	.word	0x00029be4
   13308:	00029be0 	.word	0x00029be0
   1330c:	00029da8 	.word	0x00029da8

00013310 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   13310:	b580      	push	{r7, lr}
   13312:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   13314:	4b34      	ldr	r3, [pc, #208]	; (133e8 <gsm_config_module+0xd8>)
   13316:	4798      	blx	r3
   13318:	1e03      	subs	r3, r0, #0
   1331a:	d000      	beq.n	1331e <gsm_config_module+0xe>
   1331c:	e05e      	b.n	133dc <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   1331e:	4b33      	ldr	r3, [pc, #204]	; (133ec <gsm_config_module+0xdc>)
   13320:	4798      	blx	r3
   13322:	1e03      	subs	r3, r0, #0
   13324:	d000      	beq.n	13328 <gsm_config_module+0x18>
   13326:	e057      	b.n	133d8 <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   13328:	23fa      	movs	r3, #250	; 0xfa
   1332a:	00db      	lsls	r3, r3, #3
   1332c:	0018      	movs	r0, r3
   1332e:	4b30      	ldr	r3, [pc, #192]	; (133f0 <gsm_config_module+0xe0>)
   13330:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   13332:	4b30      	ldr	r3, [pc, #192]	; (133f4 <gsm_config_module+0xe4>)
   13334:	4798      	blx	r3
   13336:	1e03      	subs	r3, r0, #0
   13338:	d14c      	bne.n	133d4 <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   1333a:	4b2f      	ldr	r3, [pc, #188]	; (133f8 <gsm_config_module+0xe8>)
   1333c:	4798      	blx	r3
   1333e:	1e03      	subs	r3, r0, #0
   13340:	d14e      	bne.n	133e0 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   13342:	4b2e      	ldr	r3, [pc, #184]	; (133fc <gsm_config_module+0xec>)
   13344:	4798      	blx	r3
   13346:	1e03      	subs	r3, r0, #0
   13348:	d142      	bne.n	133d0 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   1334a:	23fa      	movs	r3, #250	; 0xfa
   1334c:	00db      	lsls	r3, r3, #3
   1334e:	0018      	movs	r0, r3
   13350:	4b27      	ldr	r3, [pc, #156]	; (133f0 <gsm_config_module+0xe0>)
   13352:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   13354:	4b2a      	ldr	r3, [pc, #168]	; (13400 <gsm_config_module+0xf0>)
   13356:	4798      	blx	r3
   13358:	1e03      	subs	r3, r0, #0
   1335a:	d137      	bne.n	133cc <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   1335c:	4b29      	ldr	r3, [pc, #164]	; (13404 <gsm_config_module+0xf4>)
   1335e:	4798      	blx	r3
   13360:	1e03      	subs	r3, r0, #0
   13362:	d131      	bne.n	133c8 <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   13364:	4b28      	ldr	r3, [pc, #160]	; (13408 <gsm_config_module+0xf8>)
   13366:	4798      	blx	r3
   13368:	1e03      	subs	r3, r0, #0
   1336a:	d12b      	bne.n	133c4 <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   1336c:	4b27      	ldr	r3, [pc, #156]	; (1340c <gsm_config_module+0xfc>)
   1336e:	4798      	blx	r3
   13370:	1e03      	subs	r3, r0, #0
   13372:	d125      	bne.n	133c0 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   13374:	4b26      	ldr	r3, [pc, #152]	; (13410 <gsm_config_module+0x100>)
   13376:	4798      	blx	r3
   13378:	1e03      	subs	r3, r0, #0
   1337a:	d11f      	bne.n	133bc <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   1337c:	4b25      	ldr	r3, [pc, #148]	; (13414 <gsm_config_module+0x104>)
   1337e:	4798      	blx	r3
   13380:	1e03      	subs	r3, r0, #0
   13382:	d119      	bne.n	133b8 <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   13384:	4b24      	ldr	r3, [pc, #144]	; (13418 <gsm_config_module+0x108>)
   13386:	4798      	blx	r3
   13388:	1e03      	subs	r3, r0, #0
   1338a:	d113      	bne.n	133b4 <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   1338c:	4b23      	ldr	r3, [pc, #140]	; (1341c <gsm_config_module+0x10c>)
   1338e:	4798      	blx	r3
   13390:	1e03      	subs	r3, r0, #0
   13392:	d10d      	bne.n	133b0 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   13394:	4b22      	ldr	r3, [pc, #136]	; (13420 <gsm_config_module+0x110>)
   13396:	4798      	blx	r3
   13398:	1e03      	subs	r3, r0, #0
   1339a:	d107      	bne.n	133ac <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   1339c:	4b21      	ldr	r3, [pc, #132]	; (13424 <gsm_config_module+0x114>)
   1339e:	4798      	blx	r3
   133a0:	1e03      	subs	r3, r0, #0
   133a2:	d101      	bne.n	133a8 <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   133a4:	2300      	movs	r3, #0
   133a6:	e01c      	b.n	133e2 <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   133a8:	2310      	movs	r3, #16
   133aa:	e01a      	b.n	133e2 <gsm_config_module+0xd2>
															}
														}
														else
														{
																return GSM_ERROR_CONFIG_FAILED;
   133ac:	2310      	movs	r3, #16
   133ae:	e018      	b.n	133e2 <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   133b0:	2310      	movs	r3, #16
   133b2:	e016      	b.n	133e2 <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   133b4:	2310      	movs	r3, #16
   133b6:	e014      	b.n	133e2 <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   133b8:	2310      	movs	r3, #16
   133ba:	e012      	b.n	133e2 <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   133bc:	2310      	movs	r3, #16
   133be:	e010      	b.n	133e2 <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   133c0:	2310      	movs	r3, #16
   133c2:	e00e      	b.n	133e2 <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   133c4:	2310      	movs	r3, #16
   133c6:	e00c      	b.n	133e2 <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   133c8:	2310      	movs	r3, #16
   133ca:	e00a      	b.n	133e2 <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   133cc:	2310      	movs	r3, #16
   133ce:	e008      	b.n	133e2 <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   133d0:	2310      	movs	r3, #16
   133d2:	e006      	b.n	133e2 <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   133d4:	2310      	movs	r3, #16
   133d6:	e004      	b.n	133e2 <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   133d8:	2310      	movs	r3, #16
   133da:	e002      	b.n	133e2 <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   133dc:	2310      	movs	r3, #16
   133de:	e000      	b.n	133e2 <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   133e0:	2310      	movs	r3, #16
}
   133e2:	0018      	movs	r0, r3
   133e4:	46bd      	mov	sp, r7
   133e6:	bd80      	pop	{r7, pc}
   133e8:	000125c5 	.word	0x000125c5
   133ec:	00012801 	.word	0x00012801
   133f0:	0001fee9 	.word	0x0001fee9
   133f4:	000126b1 	.word	0x000126b1
   133f8:	00012831 	.word	0x00012831
   133fc:	0001265d 	.word	0x0001265d
   13400:	00012741 	.word	0x00012741
   13404:	00012771 	.word	0x00012771
   13408:	000127d1 	.word	0x000127d1
   1340c:	00012861 	.word	0x00012861
   13410:	00012891 	.word	0x00012891
   13414:	00012ad9 	.word	0x00012ad9
   13418:	00012f1d 	.word	0x00012f1d
   1341c:	00012f4d 	.word	0x00012f4d
   13420:	000127a1 	.word	0x000127a1
   13424:	00012711 	.word	0x00012711

00013428 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   13428:	b580      	push	{r7, lr}
   1342a:	b084      	sub	sp, #16
   1342c:	af00      	add	r7, sp, #0
   1342e:	6078      	str	r0, [r7, #4]
   13430:	000a      	movs	r2, r1
   13432:	1cfb      	adds	r3, r7, #3
   13434:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   13436:	230f      	movs	r3, #15
   13438:	18fb      	adds	r3, r7, r3
   1343a:	2200      	movs	r2, #0
   1343c:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   1343e:	e026      	b.n	1348e <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   13440:	4b1b      	ldr	r3, [pc, #108]	; (134b0 <gsm_read_response_line+0x88>)
   13442:	6818      	ldr	r0, [r3, #0]
   13444:	23fa      	movs	r3, #250	; 0xfa
   13446:	005a      	lsls	r2, r3, #1
   13448:	230e      	movs	r3, #14
   1344a:	18fb      	adds	r3, r7, r3
   1344c:	0019      	movs	r1, r3
   1344e:	4b19      	ldr	r3, [pc, #100]	; (134b4 <gsm_read_response_line+0x8c>)
   13450:	4798      	blx	r3
   13452:	1e03      	subs	r3, r0, #0
   13454:	d101      	bne.n	1345a <gsm_read_response_line+0x32>
		{
			return false;
   13456:	2300      	movs	r3, #0
   13458:	e025      	b.n	134a6 <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n')
   1345a:	230e      	movs	r3, #14
   1345c:	18fb      	adds	r3, r7, r3
   1345e:	781b      	ldrb	r3, [r3, #0]
   13460:	2b0a      	cmp	r3, #10
   13462:	d014      	beq.n	1348e <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   13464:	230e      	movs	r3, #14
   13466:	18fb      	adds	r3, r7, r3
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	2b0d      	cmp	r3, #13
   1346c:	d014      	beq.n	13498 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	1c5a      	adds	r2, r3, #1
   13472:	607a      	str	r2, [r7, #4]
   13474:	220e      	movs	r2, #14
   13476:	18ba      	adds	r2, r7, r2
   13478:	7812      	ldrb	r2, [r2, #0]
   1347a:	701a      	strb	r2, [r3, #0]
			length--;
   1347c:	1cfb      	adds	r3, r7, #3
   1347e:	781a      	ldrb	r2, [r3, #0]
   13480:	1cfb      	adds	r3, r7, #3
   13482:	3a01      	subs	r2, #1
   13484:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   13486:	230f      	movs	r3, #15
   13488:	18fb      	adds	r3, r7, r3
   1348a:	2201      	movs	r2, #1
   1348c:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   1348e:	1cfb      	adds	r3, r7, #3
   13490:	781b      	ldrb	r3, [r3, #0]
   13492:	2b01      	cmp	r3, #1
   13494:	d8d4      	bhi.n	13440 <gsm_read_response_line+0x18>
   13496:	e000      	b.n	1349a <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   13498:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	2200      	movs	r2, #0
   1349e:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   134a0:	230f      	movs	r3, #15
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	781b      	ldrb	r3, [r3, #0]
}
   134a6:	0018      	movs	r0, r3
   134a8:	46bd      	mov	sp, r7
   134aa:	b004      	add	sp, #16
   134ac:	bd80      	pop	{r7, pc}
   134ae:	46c0      	nop			; (mov r8, r8)
   134b0:	20000220 	.word	0x20000220
   134b4:	0001f441 	.word	0x0001f441

000134b8 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   134b8:	b580      	push	{r7, lr}
   134ba:	b084      	sub	sp, #16
   134bc:	af00      	add	r7, sp, #0
   134be:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   134c0:	230f      	movs	r3, #15
   134c2:	18fb      	adds	r3, r7, r3
   134c4:	2200      	movs	r2, #0
   134c6:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   134c8:	4a17      	ldr	r2, [pc, #92]	; (13528 <gsm_responseLine_isNew_SMS_Received+0x70>)
   134ca:	687b      	ldr	r3, [r7, #4]
   134cc:	0011      	movs	r1, r2
   134ce:	0018      	movs	r0, r3
   134d0:	4b16      	ldr	r3, [pc, #88]	; (1352c <gsm_responseLine_isNew_SMS_Received+0x74>)
   134d2:	4798      	blx	r3
   134d4:	1e03      	subs	r3, r0, #0
   134d6:	d01b      	beq.n	13510 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   134d8:	4a15      	ldr	r2, [pc, #84]	; (13530 <gsm_responseLine_isNew_SMS_Received+0x78>)
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	0011      	movs	r1, r2
   134de:	0018      	movs	r0, r3
   134e0:	4b14      	ldr	r3, [pc, #80]	; (13534 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   134e2:	4798      	blx	r3
   134e4:	0003      	movs	r3, r0
   134e6:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   134e8:	4b11      	ldr	r3, [pc, #68]	; (13530 <gsm_responseLine_isNew_SMS_Received+0x78>)
   134ea:	0019      	movs	r1, r3
   134ec:	2000      	movs	r0, #0
   134ee:	4b11      	ldr	r3, [pc, #68]	; (13534 <gsm_responseLine_isNew_SMS_Received+0x7c>)
   134f0:	4798      	blx	r3
   134f2:	0003      	movs	r3, r0
   134f4:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
   134f6:	68bb      	ldr	r3, [r7, #8]
   134f8:	0018      	movs	r0, r3
   134fa:	4b0f      	ldr	r3, [pc, #60]	; (13538 <gsm_responseLine_isNew_SMS_Received+0x80>)
   134fc:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
   134fe:	68bb      	ldr	r3, [r7, #8]
   13500:	0018      	movs	r0, r3
   13502:	4b0e      	ldr	r3, [pc, #56]	; (1353c <gsm_responseLine_isNew_SMS_Received+0x84>)
   13504:	4798      	blx	r3
   13506:	0002      	movs	r2, r0
   13508:	230f      	movs	r3, #15
   1350a:	18fb      	adds	r3, r7, r3
   1350c:	701a      	strb	r2, [r3, #0]
   1350e:	e003      	b.n	13518 <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
   13510:	230f      	movs	r3, #15
   13512:	18fb      	adds	r3, r7, r3
   13514:	2200      	movs	r2, #0
   13516:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   13518:	230f      	movs	r3, #15
   1351a:	18fb      	adds	r3, r7, r3
   1351c:	781b      	ldrb	r3, [r3, #0]
}
   1351e:	0018      	movs	r0, r3
   13520:	46bd      	mov	sp, r7
   13522:	b004      	add	sp, #16
   13524:	bd80      	pop	{r7, pc}
   13526:	46c0      	nop			; (mov r8, r8)
   13528:	00029dac 	.word	0x00029dac
   1352c:	000290d3 	.word	0x000290d3
   13530:	00029be4 	.word	0x00029be4
   13534:	00029105 	.word	0x00029105
   13538:	00012a95 	.word	0x00012a95
   1353c:	00028cf9 	.word	0x00028cf9

00013540 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   13540:	b580      	push	{r7, lr}
   13542:	b082      	sub	sp, #8
   13544:	af00      	add	r7, sp, #0
   13546:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   13548:	4a07      	ldr	r2, [pc, #28]	; (13568 <gsm_responseLine_isRinging+0x28>)
   1354a:	687b      	ldr	r3, [r7, #4]
   1354c:	0011      	movs	r1, r2
   1354e:	0018      	movs	r0, r3
   13550:	4b06      	ldr	r3, [pc, #24]	; (1356c <gsm_responseLine_isRinging+0x2c>)
   13552:	4798      	blx	r3
   13554:	1e03      	subs	r3, r0, #0
   13556:	d001      	beq.n	1355c <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   13558:	2301      	movs	r3, #1
   1355a:	e000      	b.n	1355e <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   1355c:	2300      	movs	r3, #0
	}
}
   1355e:	0018      	movs	r0, r3
   13560:	46bd      	mov	sp, r7
   13562:	b002      	add	sp, #8
   13564:	bd80      	pop	{r7, pc}
   13566:	46c0      	nop			; (mov r8, r8)
   13568:	00029db4 	.word	0x00029db4
   1356c:	000290d3 	.word	0x000290d3

00013570 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13570:	b580      	push	{r7, lr}
   13572:	b084      	sub	sp, #16
   13574:	af00      	add	r7, sp, #0
   13576:	6078      	str	r0, [r7, #4]
   13578:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   1357a:	4a1e      	ldr	r2, [pc, #120]	; (135f4 <gsm_responseLine_get_IncommingCallNo+0x84>)
   1357c:	687b      	ldr	r3, [r7, #4]
   1357e:	0011      	movs	r1, r2
   13580:	0018      	movs	r0, r3
   13582:	4b1d      	ldr	r3, [pc, #116]	; (135f8 <gsm_responseLine_get_IncommingCallNo+0x88>)
   13584:	4798      	blx	r3
   13586:	1e03      	subs	r3, r0, #0
   13588:	d02e      	beq.n	135e8 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   1358a:	4a1c      	ldr	r2, [pc, #112]	; (135fc <gsm_responseLine_get_IncommingCallNo+0x8c>)
   1358c:	687b      	ldr	r3, [r7, #4]
   1358e:	0011      	movs	r1, r2
   13590:	0018      	movs	r0, r3
   13592:	4b1b      	ldr	r3, [pc, #108]	; (13600 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13594:	4798      	blx	r3
   13596:	0003      	movs	r3, r0
   13598:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   1359a:	4b1a      	ldr	r3, [pc, #104]	; (13604 <gsm_responseLine_get_IncommingCallNo+0x94>)
   1359c:	0019      	movs	r1, r3
   1359e:	2000      	movs	r0, #0
   135a0:	4b17      	ldr	r3, [pc, #92]	; (13600 <gsm_responseLine_get_IncommingCallNo+0x90>)
   135a2:	4798      	blx	r3
   135a4:	0003      	movs	r3, r0
   135a6:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   135a8:	4a17      	ldr	r2, [pc, #92]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x98>)
   135aa:	68fb      	ldr	r3, [r7, #12]
   135ac:	0011      	movs	r1, r2
   135ae:	0018      	movs	r0, r3
   135b0:	4b13      	ldr	r3, [pc, #76]	; (13600 <gsm_responseLine_get_IncommingCallNo+0x90>)
   135b2:	4798      	blx	r3
   135b4:	0003      	movs	r3, r0
   135b6:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   135b8:	4b13      	ldr	r3, [pc, #76]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x98>)
   135ba:	0019      	movs	r1, r3
   135bc:	2000      	movs	r0, #0
   135be:	4b10      	ldr	r3, [pc, #64]	; (13600 <gsm_responseLine_get_IncommingCallNo+0x90>)
   135c0:	4798      	blx	r3
   135c2:	0003      	movs	r3, r0
   135c4:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   135c6:	68fb      	ldr	r3, [r7, #12]
   135c8:	212b      	movs	r1, #43	; 0x2b
   135ca:	0018      	movs	r0, r3
   135cc:	4b0f      	ldr	r3, [pc, #60]	; (1360c <gsm_responseLine_get_IncommingCallNo+0x9c>)
   135ce:	4798      	blx	r3
   135d0:	1e03      	subs	r3, r0, #0
   135d2:	d101      	bne.n	135d8 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   135d4:	2300      	movs	r3, #0
   135d6:	e008      	b.n	135ea <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   135d8:	68fa      	ldr	r2, [r7, #12]
   135da:	683b      	ldr	r3, [r7, #0]
   135dc:	0011      	movs	r1, r2
   135de:	0018      	movs	r0, r3
   135e0:	4b0b      	ldr	r3, [pc, #44]	; (13610 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   135e2:	4798      	blx	r3
		return true;
   135e4:	2301      	movs	r3, #1
   135e6:	e000      	b.n	135ea <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   135e8:	2300      	movs	r3, #0
	}
}
   135ea:	0018      	movs	r0, r3
   135ec:	46bd      	mov	sp, r7
   135ee:	b004      	add	sp, #16
   135f0:	bd80      	pop	{r7, pc}
   135f2:	46c0      	nop			; (mov r8, r8)
   135f4:	00029dbc 	.word	0x00029dbc
   135f8:	000290d3 	.word	0x000290d3
   135fc:	00029be0 	.word	0x00029be0
   13600:	00029105 	.word	0x00029105
   13604:	00029be4 	.word	0x00029be4
   13608:	00029da0 	.word	0x00029da0
   1360c:	00029077 	.word	0x00029077
   13610:	00029093 	.word	0x00029093

00013614 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   13614:	b580      	push	{r7, lr}
   13616:	b082      	sub	sp, #8
   13618:	af00      	add	r7, sp, #0
   1361a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   1361c:	4a16      	ldr	r2, [pc, #88]	; (13678 <gsm_responseLine_isCallCut+0x64>)
   1361e:	687b      	ldr	r3, [r7, #4]
   13620:	0011      	movs	r1, r2
   13622:	0018      	movs	r0, r3
   13624:	4b15      	ldr	r3, [pc, #84]	; (1367c <gsm_responseLine_isCallCut+0x68>)
   13626:	4798      	blx	r3
   13628:	1e03      	subs	r3, r0, #0
   1362a:	d001      	beq.n	13630 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   1362c:	2301      	movs	r3, #1
   1362e:	e01e      	b.n	1366e <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13630:	4a13      	ldr	r2, [pc, #76]	; (13680 <gsm_responseLine_isCallCut+0x6c>)
   13632:	687b      	ldr	r3, [r7, #4]
   13634:	0011      	movs	r1, r2
   13636:	0018      	movs	r0, r3
   13638:	4b10      	ldr	r3, [pc, #64]	; (1367c <gsm_responseLine_isCallCut+0x68>)
   1363a:	4798      	blx	r3
   1363c:	1e03      	subs	r3, r0, #0
   1363e:	d001      	beq.n	13644 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13640:	2301      	movs	r3, #1
   13642:	e014      	b.n	1366e <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   13644:	4a0f      	ldr	r2, [pc, #60]	; (13684 <gsm_responseLine_isCallCut+0x70>)
   13646:	687b      	ldr	r3, [r7, #4]
   13648:	0011      	movs	r1, r2
   1364a:	0018      	movs	r0, r3
   1364c:	4b0b      	ldr	r3, [pc, #44]	; (1367c <gsm_responseLine_isCallCut+0x68>)
   1364e:	4798      	blx	r3
   13650:	1e03      	subs	r3, r0, #0
   13652:	d001      	beq.n	13658 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   13654:	2301      	movs	r3, #1
   13656:	e00a      	b.n	1366e <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   13658:	4a0b      	ldr	r2, [pc, #44]	; (13688 <gsm_responseLine_isCallCut+0x74>)
   1365a:	687b      	ldr	r3, [r7, #4]
   1365c:	0011      	movs	r1, r2
   1365e:	0018      	movs	r0, r3
   13660:	4b06      	ldr	r3, [pc, #24]	; (1367c <gsm_responseLine_isCallCut+0x68>)
   13662:	4798      	blx	r3
   13664:	1e03      	subs	r3, r0, #0
   13666:	d001      	beq.n	1366c <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   13668:	2301      	movs	r3, #1
   1366a:	e000      	b.n	1366e <gsm_responseLine_isCallCut+0x5a>
	}
	else
	{
		return false;
   1366c:	2300      	movs	r3, #0
	}
}
   1366e:	0018      	movs	r0, r3
   13670:	46bd      	mov	sp, r7
   13672:	b002      	add	sp, #8
   13674:	bd80      	pop	{r7, pc}
   13676:	46c0      	nop			; (mov r8, r8)
   13678:	00029dc4 	.word	0x00029dc4
   1367c:	000290d3 	.word	0x000290d3
   13680:	00029dd0 	.word	0x00029dd0
   13684:	00029dd8 	.word	0x00029dd8
   13688:	00029ac0 	.word	0x00029ac0

0001368c <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   1368c:	b580      	push	{r7, lr}
   1368e:	b082      	sub	sp, #8
   13690:	af00      	add	r7, sp, #0
   13692:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   13694:	4a07      	ldr	r2, [pc, #28]	; (136b4 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	0011      	movs	r1, r2
   1369a:	0018      	movs	r0, r3
   1369c:	4b06      	ldr	r3, [pc, #24]	; (136b8 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   1369e:	4798      	blx	r3
   136a0:	1e03      	subs	r3, r0, #0
   136a2:	d001      	beq.n	136a8 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   136a4:	2301      	movs	r3, #1
   136a6:	e000      	b.n	136aa <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   136a8:	2300      	movs	r3, #0
	}
}
   136aa:	0018      	movs	r0, r3
   136ac:	46bd      	mov	sp, r7
   136ae:	b002      	add	sp, #8
   136b0:	bd80      	pop	{r7, pc}
   136b2:	46c0      	nop			; (mov r8, r8)
   136b4:	00029de4 	.word	0x00029de4
   136b8:	000290d3 	.word	0x000290d3

000136bc <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   136bc:	b580      	push	{r7, lr}
   136be:	b082      	sub	sp, #8
   136c0:	af00      	add	r7, sp, #0
   136c2:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   136c4:	4a07      	ldr	r2, [pc, #28]	; (136e4 <gsm_responseLine_is_StopSound_Received+0x28>)
   136c6:	687b      	ldr	r3, [r7, #4]
   136c8:	0011      	movs	r1, r2
   136ca:	0018      	movs	r0, r3
   136cc:	4b06      	ldr	r3, [pc, #24]	; (136e8 <gsm_responseLine_is_StopSound_Received+0x2c>)
   136ce:	4798      	blx	r3
   136d0:	1e03      	subs	r3, r0, #0
   136d2:	d001      	beq.n	136d8 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   136d4:	2301      	movs	r3, #1
   136d6:	e000      	b.n	136da <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   136d8:	2300      	movs	r3, #0
	}
}
   136da:	0018      	movs	r0, r3
   136dc:	46bd      	mov	sp, r7
   136de:	b002      	add	sp, #8
   136e0:	bd80      	pop	{r7, pc}
   136e2:	46c0      	nop			; (mov r8, r8)
   136e4:	00029dec 	.word	0x00029dec
   136e8:	000290d3 	.word	0x000290d3

000136ec <system_pinmux_get_group_from_gpio_pin>:
{
   136ec:	b580      	push	{r7, lr}
   136ee:	b084      	sub	sp, #16
   136f0:	af00      	add	r7, sp, #0
   136f2:	0002      	movs	r2, r0
   136f4:	1dfb      	adds	r3, r7, #7
   136f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   136f8:	230f      	movs	r3, #15
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	1dfa      	adds	r2, r7, #7
   136fe:	7812      	ldrb	r2, [r2, #0]
   13700:	09d2      	lsrs	r2, r2, #7
   13702:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13704:	230e      	movs	r3, #14
   13706:	18fb      	adds	r3, r7, r3
   13708:	1dfa      	adds	r2, r7, #7
   1370a:	7812      	ldrb	r2, [r2, #0]
   1370c:	0952      	lsrs	r2, r2, #5
   1370e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13710:	4b0d      	ldr	r3, [pc, #52]	; (13748 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13712:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13714:	230f      	movs	r3, #15
   13716:	18fb      	adds	r3, r7, r3
   13718:	781b      	ldrb	r3, [r3, #0]
   1371a:	2b00      	cmp	r3, #0
   1371c:	d10f      	bne.n	1373e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1371e:	230f      	movs	r3, #15
   13720:	18fb      	adds	r3, r7, r3
   13722:	781b      	ldrb	r3, [r3, #0]
   13724:	009b      	lsls	r3, r3, #2
   13726:	2210      	movs	r2, #16
   13728:	4694      	mov	ip, r2
   1372a:	44bc      	add	ip, r7
   1372c:	4463      	add	r3, ip
   1372e:	3b08      	subs	r3, #8
   13730:	681a      	ldr	r2, [r3, #0]
   13732:	230e      	movs	r3, #14
   13734:	18fb      	adds	r3, r7, r3
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	01db      	lsls	r3, r3, #7
   1373a:	18d3      	adds	r3, r2, r3
   1373c:	e000      	b.n	13740 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1373e:	2300      	movs	r3, #0
}
   13740:	0018      	movs	r0, r3
   13742:	46bd      	mov	sp, r7
   13744:	b004      	add	sp, #16
   13746:	bd80      	pop	{r7, pc}
   13748:	41004400 	.word	0x41004400

0001374c <port_get_group_from_gpio_pin>:
{
   1374c:	b580      	push	{r7, lr}
   1374e:	b082      	sub	sp, #8
   13750:	af00      	add	r7, sp, #0
   13752:	0002      	movs	r2, r0
   13754:	1dfb      	adds	r3, r7, #7
   13756:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13758:	1dfb      	adds	r3, r7, #7
   1375a:	781b      	ldrb	r3, [r3, #0]
   1375c:	0018      	movs	r0, r3
   1375e:	4b03      	ldr	r3, [pc, #12]	; (1376c <port_get_group_from_gpio_pin+0x20>)
   13760:	4798      	blx	r3
   13762:	0003      	movs	r3, r0
}
   13764:	0018      	movs	r0, r3
   13766:	46bd      	mov	sp, r7
   13768:	b002      	add	sp, #8
   1376a:	bd80      	pop	{r7, pc}
   1376c:	000136ed 	.word	0x000136ed

00013770 <port_get_config_defaults>:
{
   13770:	b580      	push	{r7, lr}
   13772:	b082      	sub	sp, #8
   13774:	af00      	add	r7, sp, #0
   13776:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13778:	687b      	ldr	r3, [r7, #4]
   1377a:	2200      	movs	r2, #0
   1377c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1377e:	687b      	ldr	r3, [r7, #4]
   13780:	2201      	movs	r2, #1
   13782:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	2200      	movs	r2, #0
   13788:	709a      	strb	r2, [r3, #2]
}
   1378a:	46c0      	nop			; (mov r8, r8)
   1378c:	46bd      	mov	sp, r7
   1378e:	b002      	add	sp, #8
   13790:	bd80      	pop	{r7, pc}
	...

00013794 <port_pin_set_output_level>:
{
   13794:	b580      	push	{r7, lr}
   13796:	b084      	sub	sp, #16
   13798:	af00      	add	r7, sp, #0
   1379a:	0002      	movs	r2, r0
   1379c:	1dfb      	adds	r3, r7, #7
   1379e:	701a      	strb	r2, [r3, #0]
   137a0:	1dbb      	adds	r3, r7, #6
   137a2:	1c0a      	adds	r2, r1, #0
   137a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   137a6:	1dfb      	adds	r3, r7, #7
   137a8:	781b      	ldrb	r3, [r3, #0]
   137aa:	0018      	movs	r0, r3
   137ac:	4b0d      	ldr	r3, [pc, #52]	; (137e4 <port_pin_set_output_level+0x50>)
   137ae:	4798      	blx	r3
   137b0:	0003      	movs	r3, r0
   137b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   137b4:	1dfb      	adds	r3, r7, #7
   137b6:	781b      	ldrb	r3, [r3, #0]
   137b8:	221f      	movs	r2, #31
   137ba:	4013      	ands	r3, r2
   137bc:	2201      	movs	r2, #1
   137be:	409a      	lsls	r2, r3
   137c0:	0013      	movs	r3, r2
   137c2:	60bb      	str	r3, [r7, #8]
	if (level) {
   137c4:	1dbb      	adds	r3, r7, #6
   137c6:	781b      	ldrb	r3, [r3, #0]
   137c8:	2b00      	cmp	r3, #0
   137ca:	d003      	beq.n	137d4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   137cc:	68fb      	ldr	r3, [r7, #12]
   137ce:	68ba      	ldr	r2, [r7, #8]
   137d0:	619a      	str	r2, [r3, #24]
}
   137d2:	e002      	b.n	137da <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   137d4:	68fb      	ldr	r3, [r7, #12]
   137d6:	68ba      	ldr	r2, [r7, #8]
   137d8:	615a      	str	r2, [r3, #20]
}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	46bd      	mov	sp, r7
   137de:	b004      	add	sp, #16
   137e0:	bd80      	pop	{r7, pc}
   137e2:	46c0      	nop			; (mov r8, r8)
   137e4:	0001374d 	.word	0x0001374d

000137e8 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   137e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   137ea:	b08b      	sub	sp, #44	; 0x2c
   137ec:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   137ee:	230b      	movs	r3, #11
   137f0:	2218      	movs	r2, #24
   137f2:	4694      	mov	ip, r2
   137f4:	44bc      	add	ip, r7
   137f6:	4463      	add	r3, ip
   137f8:	2210      	movs	r2, #16
   137fa:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   137fc:	230a      	movs	r3, #10
   137fe:	2218      	movs	r2, #24
   13800:	4694      	mov	ip, r2
   13802:	44bc      	add	ip, r7
   13804:	4463      	add	r3, ip
   13806:	2202      	movs	r2, #2
   13808:	701a      	strb	r2, [r3, #0]
	delay_init();
   1380a:	4b90      	ldr	r3, [pc, #576]	; (13a4c <LCD_init+0x264>)
   1380c:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   1380e:	4b90      	ldr	r3, [pc, #576]	; (13a50 <LCD_init+0x268>)
   13810:	223f      	movs	r2, #63	; 0x3f
   13812:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   13814:	4b8f      	ldr	r3, [pc, #572]	; (13a54 <LCD_init+0x26c>)
   13816:	223e      	movs	r2, #62	; 0x3e
   13818:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   1381a:	4b8f      	ldr	r3, [pc, #572]	; (13a58 <LCD_init+0x270>)
   1381c:	2221      	movs	r2, #33	; 0x21
   1381e:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13820:	4b8d      	ldr	r3, [pc, #564]	; (13a58 <LCD_init+0x270>)
   13822:	2220      	movs	r2, #32
   13824:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13826:	4b8c      	ldr	r3, [pc, #560]	; (13a58 <LCD_init+0x270>)
   13828:	2223      	movs	r2, #35	; 0x23
   1382a:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   1382c:	4b8a      	ldr	r3, [pc, #552]	; (13a58 <LCD_init+0x270>)
   1382e:	2222      	movs	r2, #34	; 0x22
   13830:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13832:	4b8a      	ldr	r3, [pc, #552]	; (13a5c <LCD_init+0x274>)
   13834:	2200      	movs	r2, #0
   13836:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13838:	230a      	movs	r3, #10
   1383a:	2218      	movs	r2, #24
   1383c:	4694      	mov	ip, r2
   1383e:	44bc      	add	ip, r7
   13840:	4463      	add	r3, ip
   13842:	781b      	ldrb	r3, [r3, #0]
   13844:	2b01      	cmp	r3, #1
   13846:	d906      	bls.n	13856 <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13848:	4b84      	ldr	r3, [pc, #528]	; (13a5c <LCD_init+0x274>)
   1384a:	781b      	ldrb	r3, [r3, #0]
   1384c:	2208      	movs	r2, #8
   1384e:	4313      	orrs	r3, r2
   13850:	b2da      	uxtb	r2, r3
   13852:	4b82      	ldr	r3, [pc, #520]	; (13a5c <LCD_init+0x274>)
   13854:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13856:	4b82      	ldr	r3, [pc, #520]	; (13a60 <LCD_init+0x278>)
   13858:	220a      	movs	r2, #10
   1385a:	2118      	movs	r1, #24
   1385c:	468c      	mov	ip, r1
   1385e:	44bc      	add	ip, r7
   13860:	4462      	add	r2, ip
   13862:	7812      	ldrb	r2, [r2, #0]
   13864:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13866:	230b      	movs	r3, #11
   13868:	2218      	movs	r2, #24
   1386a:	4694      	mov	ip, r2
   1386c:	44bc      	add	ip, r7
   1386e:	4463      	add	r3, ip
   13870:	781a      	ldrb	r2, [r3, #0]
   13872:	230b      	movs	r3, #11
   13874:	2118      	movs	r1, #24
   13876:	468c      	mov	ip, r1
   13878:	44bc      	add	ip, r7
   1387a:	4463      	add	r3, ip
   1387c:	781b      	ldrb	r3, [r3, #0]
   1387e:	3340      	adds	r3, #64	; 0x40
   13880:	2140      	movs	r1, #64	; 0x40
   13882:	2000      	movs	r0, #0
   13884:	4c77      	ldr	r4, [pc, #476]	; (13a64 <LCD_init+0x27c>)
   13886:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13888:	231c      	movs	r3, #28
   1388a:	18fb      	adds	r3, r7, r3
   1388c:	0018      	movs	r0, r3
   1388e:	4b76      	ldr	r3, [pc, #472]	; (13a68 <LCD_init+0x280>)
   13890:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13892:	231c      	movs	r3, #28
   13894:	18fb      	adds	r3, r7, r3
   13896:	2201      	movs	r2, #1
   13898:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   1389a:	4b6d      	ldr	r3, [pc, #436]	; (13a50 <LCD_init+0x268>)
   1389c:	781b      	ldrb	r3, [r3, #0]
   1389e:	221c      	movs	r2, #28
   138a0:	18ba      	adds	r2, r7, r2
   138a2:	0011      	movs	r1, r2
   138a4:	0018      	movs	r0, r3
   138a6:	4b71      	ldr	r3, [pc, #452]	; (13a6c <LCD_init+0x284>)
   138a8:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   138aa:	4b6a      	ldr	r3, [pc, #424]	; (13a54 <LCD_init+0x26c>)
   138ac:	781b      	ldrb	r3, [r3, #0]
   138ae:	221c      	movs	r2, #28
   138b0:	18ba      	adds	r2, r7, r2
   138b2:	0011      	movs	r1, r2
   138b4:	0018      	movs	r0, r3
   138b6:	4b6d      	ldr	r3, [pc, #436]	; (13a6c <LCD_init+0x284>)
   138b8:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   138ba:	2300      	movs	r3, #0
   138bc:	627b      	str	r3, [r7, #36]	; 0x24
   138be:	e00c      	b.n	138da <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   138c0:	4a65      	ldr	r2, [pc, #404]	; (13a58 <LCD_init+0x270>)
   138c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138c4:	18d3      	adds	r3, r2, r3
   138c6:	781b      	ldrb	r3, [r3, #0]
   138c8:	221c      	movs	r2, #28
   138ca:	18ba      	adds	r2, r7, r2
   138cc:	0011      	movs	r1, r2
   138ce:	0018      	movs	r0, r3
   138d0:	4b66      	ldr	r3, [pc, #408]	; (13a6c <LCD_init+0x284>)
   138d2:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   138d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138d6:	3301      	adds	r3, #1
   138d8:	627b      	str	r3, [r7, #36]	; 0x24
   138da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138dc:	2b03      	cmp	r3, #3
   138de:	ddef      	ble.n	138c0 <LCD_init+0xd8>
	}
	delay_us(50000);
   138e0:	2000      	movs	r0, #0
   138e2:	4b63      	ldr	r3, [pc, #396]	; (13a70 <LCD_init+0x288>)
   138e4:	4798      	blx	r3
   138e6:	0003      	movs	r3, r0
   138e8:	613b      	str	r3, [r7, #16]
   138ea:	2300      	movs	r3, #0
   138ec:	617b      	str	r3, [r7, #20]
   138ee:	4c61      	ldr	r4, [pc, #388]	; (13a74 <LCD_init+0x28c>)
   138f0:	4a61      	ldr	r2, [pc, #388]	; (13a78 <LCD_init+0x290>)
   138f2:	2300      	movs	r3, #0
   138f4:	6938      	ldr	r0, [r7, #16]
   138f6:	6979      	ldr	r1, [r7, #20]
   138f8:	47a0      	blx	r4
   138fa:	0003      	movs	r3, r0
   138fc:	000c      	movs	r4, r1
   138fe:	0019      	movs	r1, r3
   13900:	0022      	movs	r2, r4
   13902:	4b5e      	ldr	r3, [pc, #376]	; (13a7c <LCD_init+0x294>)
   13904:	2400      	movs	r4, #0
   13906:	18c9      	adds	r1, r1, r3
   13908:	4162      	adcs	r2, r4
   1390a:	0008      	movs	r0, r1
   1390c:	0011      	movs	r1, r2
   1390e:	4c5c      	ldr	r4, [pc, #368]	; (13a80 <LCD_init+0x298>)
   13910:	4a5c      	ldr	r2, [pc, #368]	; (13a84 <LCD_init+0x29c>)
   13912:	2300      	movs	r3, #0
   13914:	47a0      	blx	r4
   13916:	0003      	movs	r3, r0
   13918:	000c      	movs	r4, r1
   1391a:	0018      	movs	r0, r3
   1391c:	4b5a      	ldr	r3, [pc, #360]	; (13a88 <LCD_init+0x2a0>)
   1391e:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13920:	4b4b      	ldr	r3, [pc, #300]	; (13a50 <LCD_init+0x268>)
   13922:	781b      	ldrb	r3, [r3, #0]
   13924:	2100      	movs	r1, #0
   13926:	0018      	movs	r0, r3
   13928:	4b58      	ldr	r3, [pc, #352]	; (13a8c <LCD_init+0x2a4>)
   1392a:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   1392c:	4b49      	ldr	r3, [pc, #292]	; (13a54 <LCD_init+0x26c>)
   1392e:	781b      	ldrb	r3, [r3, #0]
   13930:	2100      	movs	r1, #0
   13932:	0018      	movs	r0, r3
   13934:	4b55      	ldr	r3, [pc, #340]	; (13a8c <LCD_init+0x2a4>)
   13936:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13938:	2003      	movs	r0, #3
   1393a:	4b55      	ldr	r3, [pc, #340]	; (13a90 <LCD_init+0x2a8>)
   1393c:	4798      	blx	r3
	 delay_us(4500); 
   1393e:	2000      	movs	r0, #0
   13940:	4b4b      	ldr	r3, [pc, #300]	; (13a70 <LCD_init+0x288>)
   13942:	4798      	blx	r3
   13944:	0003      	movs	r3, r0
   13946:	60bb      	str	r3, [r7, #8]
   13948:	2300      	movs	r3, #0
   1394a:	60fb      	str	r3, [r7, #12]
   1394c:	4c49      	ldr	r4, [pc, #292]	; (13a74 <LCD_init+0x28c>)
   1394e:	4a51      	ldr	r2, [pc, #324]	; (13a94 <LCD_init+0x2ac>)
   13950:	2300      	movs	r3, #0
   13952:	68b8      	ldr	r0, [r7, #8]
   13954:	68f9      	ldr	r1, [r7, #12]
   13956:	47a0      	blx	r4
   13958:	0003      	movs	r3, r0
   1395a:	000c      	movs	r4, r1
   1395c:	0019      	movs	r1, r3
   1395e:	0022      	movs	r2, r4
   13960:	4b46      	ldr	r3, [pc, #280]	; (13a7c <LCD_init+0x294>)
   13962:	2400      	movs	r4, #0
   13964:	18c9      	adds	r1, r1, r3
   13966:	4162      	adcs	r2, r4
   13968:	0008      	movs	r0, r1
   1396a:	0011      	movs	r1, r2
   1396c:	4c44      	ldr	r4, [pc, #272]	; (13a80 <LCD_init+0x298>)
   1396e:	4a45      	ldr	r2, [pc, #276]	; (13a84 <LCD_init+0x29c>)
   13970:	2300      	movs	r3, #0
   13972:	47a0      	blx	r4
   13974:	0003      	movs	r3, r0
   13976:	000c      	movs	r4, r1
   13978:	0018      	movs	r0, r3
   1397a:	4b43      	ldr	r3, [pc, #268]	; (13a88 <LCD_init+0x2a0>)
   1397c:	4798      	blx	r3
	 
	 write4bits(0x03);
   1397e:	2003      	movs	r0, #3
   13980:	4b43      	ldr	r3, [pc, #268]	; (13a90 <LCD_init+0x2a8>)
   13982:	4798      	blx	r3
	 delay_us(4500); 
   13984:	2000      	movs	r0, #0
   13986:	4b3a      	ldr	r3, [pc, #232]	; (13a70 <LCD_init+0x288>)
   13988:	4798      	blx	r3
   1398a:	0003      	movs	r3, r0
   1398c:	603b      	str	r3, [r7, #0]
   1398e:	2300      	movs	r3, #0
   13990:	607b      	str	r3, [r7, #4]
   13992:	4c38      	ldr	r4, [pc, #224]	; (13a74 <LCD_init+0x28c>)
   13994:	4a3f      	ldr	r2, [pc, #252]	; (13a94 <LCD_init+0x2ac>)
   13996:	2300      	movs	r3, #0
   13998:	6838      	ldr	r0, [r7, #0]
   1399a:	6879      	ldr	r1, [r7, #4]
   1399c:	47a0      	blx	r4
   1399e:	0003      	movs	r3, r0
   139a0:	000c      	movs	r4, r1
   139a2:	0019      	movs	r1, r3
   139a4:	0022      	movs	r2, r4
   139a6:	4b35      	ldr	r3, [pc, #212]	; (13a7c <LCD_init+0x294>)
   139a8:	2400      	movs	r4, #0
   139aa:	18c9      	adds	r1, r1, r3
   139ac:	4162      	adcs	r2, r4
   139ae:	0008      	movs	r0, r1
   139b0:	0011      	movs	r1, r2
   139b2:	4c33      	ldr	r4, [pc, #204]	; (13a80 <LCD_init+0x298>)
   139b4:	4a33      	ldr	r2, [pc, #204]	; (13a84 <LCD_init+0x29c>)
   139b6:	2300      	movs	r3, #0
   139b8:	47a0      	blx	r4
   139ba:	0003      	movs	r3, r0
   139bc:	000c      	movs	r4, r1
   139be:	0018      	movs	r0, r3
   139c0:	4b31      	ldr	r3, [pc, #196]	; (13a88 <LCD_init+0x2a0>)
   139c2:	4798      	blx	r3
	
	 write4bits(0x03);
   139c4:	2003      	movs	r0, #3
   139c6:	4b32      	ldr	r3, [pc, #200]	; (13a90 <LCD_init+0x2a8>)
   139c8:	4798      	blx	r3
	 delay_us(150);
   139ca:	2000      	movs	r0, #0
   139cc:	4b28      	ldr	r3, [pc, #160]	; (13a70 <LCD_init+0x288>)
   139ce:	4798      	blx	r3
   139d0:	0003      	movs	r3, r0
   139d2:	001d      	movs	r5, r3
   139d4:	2300      	movs	r3, #0
   139d6:	001e      	movs	r6, r3
   139d8:	4c26      	ldr	r4, [pc, #152]	; (13a74 <LCD_init+0x28c>)
   139da:	2296      	movs	r2, #150	; 0x96
   139dc:	2300      	movs	r3, #0
   139de:	0028      	movs	r0, r5
   139e0:	0031      	movs	r1, r6
   139e2:	47a0      	blx	r4
   139e4:	0003      	movs	r3, r0
   139e6:	000c      	movs	r4, r1
   139e8:	0019      	movs	r1, r3
   139ea:	0022      	movs	r2, r4
   139ec:	4b23      	ldr	r3, [pc, #140]	; (13a7c <LCD_init+0x294>)
   139ee:	2400      	movs	r4, #0
   139f0:	18c9      	adds	r1, r1, r3
   139f2:	4162      	adcs	r2, r4
   139f4:	0008      	movs	r0, r1
   139f6:	0011      	movs	r1, r2
   139f8:	4c21      	ldr	r4, [pc, #132]	; (13a80 <LCD_init+0x298>)
   139fa:	4a22      	ldr	r2, [pc, #136]	; (13a84 <LCD_init+0x29c>)
   139fc:	2300      	movs	r3, #0
   139fe:	47a0      	blx	r4
   13a00:	0003      	movs	r3, r0
   13a02:	000c      	movs	r4, r1
   13a04:	0018      	movs	r0, r3
   13a06:	4b20      	ldr	r3, [pc, #128]	; (13a88 <LCD_init+0x2a0>)
   13a08:	4798      	blx	r3

	 write4bits(0x02);
   13a0a:	2002      	movs	r0, #2
   13a0c:	4b20      	ldr	r3, [pc, #128]	; (13a90 <LCD_init+0x2a8>)
   13a0e:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13a10:	4b12      	ldr	r3, [pc, #72]	; (13a5c <LCD_init+0x274>)
   13a12:	781b      	ldrb	r3, [r3, #0]
   13a14:	2220      	movs	r2, #32
   13a16:	4313      	orrs	r3, r2
   13a18:	b2db      	uxtb	r3, r3
   13a1a:	0018      	movs	r0, r3
   13a1c:	4b1e      	ldr	r3, [pc, #120]	; (13a98 <LCD_init+0x2b0>)
   13a1e:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13a20:	4b1e      	ldr	r3, [pc, #120]	; (13a9c <LCD_init+0x2b4>)
   13a22:	2204      	movs	r2, #4
   13a24:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13a26:	4b1e      	ldr	r3, [pc, #120]	; (13aa0 <LCD_init+0x2b8>)
   13a28:	4798      	blx	r3
	LCD_clear();
   13a2a:	4b1e      	ldr	r3, [pc, #120]	; (13aa4 <LCD_init+0x2bc>)
   13a2c:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13a2e:	4b1e      	ldr	r3, [pc, #120]	; (13aa8 <LCD_init+0x2c0>)
   13a30:	2202      	movs	r2, #2
   13a32:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13a34:	4b1c      	ldr	r3, [pc, #112]	; (13aa8 <LCD_init+0x2c0>)
   13a36:	781b      	ldrb	r3, [r3, #0]
   13a38:	2204      	movs	r2, #4
   13a3a:	4313      	orrs	r3, r2
   13a3c:	b2db      	uxtb	r3, r3
   13a3e:	0018      	movs	r0, r3
   13a40:	4b15      	ldr	r3, [pc, #84]	; (13a98 <LCD_init+0x2b0>)
   13a42:	4798      	blx	r3
}
   13a44:	46c0      	nop			; (mov r8, r8)
   13a46:	46bd      	mov	sp, r7
   13a48:	b00b      	add	sp, #44	; 0x2c
   13a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a4c:	0002291d 	.word	0x0002291d
   13a50:	200006cf 	.word	0x200006cf
   13a54:	200006ce 	.word	0x200006ce
   13a58:	200006c8 	.word	0x200006c8
   13a5c:	200006cd 	.word	0x200006cd
   13a60:	200006c6 	.word	0x200006c6
   13a64:	00013b59 	.word	0x00013b59
   13a68:	00013771 	.word	0x00013771
   13a6c:	00022f71 	.word	0x00022f71
   13a70:	000248dd 	.word	0x000248dd
   13a74:	000268a5 	.word	0x000268a5
   13a78:	0000c350 	.word	0x0000c350
   13a7c:	006acfbf 	.word	0x006acfbf
   13a80:	00026865 	.word	0x00026865
   13a84:	006acfc0 	.word	0x006acfc0
   13a88:	20000001 	.word	0x20000001
   13a8c:	00013795 	.word	0x00013795
   13a90:	00013b95 	.word	0x00013b95
   13a94:	00001194 	.word	0x00001194
   13a98:	00013cd9 	.word	0x00013cd9
   13a9c:	200006c5 	.word	0x200006c5
   13aa0:	00013ec1 	.word	0x00013ec1
   13aa4:	00013d79 	.word	0x00013d79
   13aa8:	200006cc 	.word	0x200006cc

00013aac <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13aac:	b580      	push	{r7, lr}
   13aae:	b082      	sub	sp, #8
   13ab0:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13ab2:	1d3b      	adds	r3, r7, #4
   13ab4:	0018      	movs	r0, r3
   13ab6:	4b08      	ldr	r3, [pc, #32]	; (13ad8 <LCD_PWR_CONFIG+0x2c>)
   13ab8:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13aba:	1d3b      	adds	r3, r7, #4
   13abc:	2201      	movs	r2, #1
   13abe:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13ac0:	1d3b      	adds	r3, r7, #4
   13ac2:	2200      	movs	r2, #0
   13ac4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13ac6:	1d3b      	adds	r3, r7, #4
   13ac8:	0019      	movs	r1, r3
   13aca:	2024      	movs	r0, #36	; 0x24
   13acc:	4b03      	ldr	r3, [pc, #12]	; (13adc <LCD_PWR_CONFIG+0x30>)
   13ace:	4798      	blx	r3
}
   13ad0:	46c0      	nop			; (mov r8, r8)
   13ad2:	46bd      	mov	sp, r7
   13ad4:	b002      	add	sp, #8
   13ad6:	bd80      	pop	{r7, pc}
   13ad8:	00013771 	.word	0x00013771
   13adc:	00022f71 	.word	0x00022f71

00013ae0 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13ae0:	b580      	push	{r7, lr}
   13ae2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13ae4:	2101      	movs	r1, #1
   13ae6:	2024      	movs	r0, #36	; 0x24
   13ae8:	4b02      	ldr	r3, [pc, #8]	; (13af4 <LCD_PWR_EN+0x14>)
   13aea:	4798      	blx	r3
}
   13aec:	46c0      	nop			; (mov r8, r8)
   13aee:	46bd      	mov	sp, r7
   13af0:	bd80      	pop	{r7, pc}
   13af2:	46c0      	nop			; (mov r8, r8)
   13af4:	00013795 	.word	0x00013795

00013af8 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13af8:	b580      	push	{r7, lr}
   13afa:	b082      	sub	sp, #8
   13afc:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13afe:	2100      	movs	r1, #0
   13b00:	2024      	movs	r0, #36	; 0x24
   13b02:	4b11      	ldr	r3, [pc, #68]	; (13b48 <LCD_PWR_DIS+0x50>)
   13b04:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13b06:	2300      	movs	r3, #0
   13b08:	607b      	str	r3, [r7, #4]
   13b0a:	e00a      	b.n	13b22 <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13b0c:	4a0f      	ldr	r2, [pc, #60]	; (13b4c <LCD_PWR_DIS+0x54>)
   13b0e:	687b      	ldr	r3, [r7, #4]
   13b10:	18d3      	adds	r3, r2, r3
   13b12:	781b      	ldrb	r3, [r3, #0]
   13b14:	2100      	movs	r1, #0
   13b16:	0018      	movs	r0, r3
   13b18:	4b0b      	ldr	r3, [pc, #44]	; (13b48 <LCD_PWR_DIS+0x50>)
   13b1a:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13b1c:	687b      	ldr	r3, [r7, #4]
   13b1e:	3301      	adds	r3, #1
   13b20:	607b      	str	r3, [r7, #4]
   13b22:	687b      	ldr	r3, [r7, #4]
   13b24:	2b03      	cmp	r3, #3
   13b26:	ddf1      	ble.n	13b0c <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13b28:	4b09      	ldr	r3, [pc, #36]	; (13b50 <LCD_PWR_DIS+0x58>)
   13b2a:	781b      	ldrb	r3, [r3, #0]
   13b2c:	2100      	movs	r1, #0
   13b2e:	0018      	movs	r0, r3
   13b30:	4b05      	ldr	r3, [pc, #20]	; (13b48 <LCD_PWR_DIS+0x50>)
   13b32:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13b34:	4b07      	ldr	r3, [pc, #28]	; (13b54 <LCD_PWR_DIS+0x5c>)
   13b36:	781b      	ldrb	r3, [r3, #0]
   13b38:	2100      	movs	r1, #0
   13b3a:	0018      	movs	r0, r3
   13b3c:	4b02      	ldr	r3, [pc, #8]	; (13b48 <LCD_PWR_DIS+0x50>)
   13b3e:	4798      	blx	r3
	
}
   13b40:	46c0      	nop			; (mov r8, r8)
   13b42:	46bd      	mov	sp, r7
   13b44:	b002      	add	sp, #8
   13b46:	bd80      	pop	{r7, pc}
   13b48:	00013795 	.word	0x00013795
   13b4c:	200006c8 	.word	0x200006c8
   13b50:	200006ce 	.word	0x200006ce
   13b54:	200006cf 	.word	0x200006cf

00013b58 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13b58:	b580      	push	{r7, lr}
   13b5a:	b084      	sub	sp, #16
   13b5c:	af00      	add	r7, sp, #0
   13b5e:	60f8      	str	r0, [r7, #12]
   13b60:	60b9      	str	r1, [r7, #8]
   13b62:	607a      	str	r2, [r7, #4]
   13b64:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13b66:	68fb      	ldr	r3, [r7, #12]
   13b68:	b2da      	uxtb	r2, r3
   13b6a:	4b09      	ldr	r3, [pc, #36]	; (13b90 <LCD_setRowOffsets+0x38>)
   13b6c:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13b6e:	68bb      	ldr	r3, [r7, #8]
   13b70:	b2da      	uxtb	r2, r3
   13b72:	4b07      	ldr	r3, [pc, #28]	; (13b90 <LCD_setRowOffsets+0x38>)
   13b74:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13b76:	687b      	ldr	r3, [r7, #4]
   13b78:	b2da      	uxtb	r2, r3
   13b7a:	4b05      	ldr	r3, [pc, #20]	; (13b90 <LCD_setRowOffsets+0x38>)
   13b7c:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13b7e:	683b      	ldr	r3, [r7, #0]
   13b80:	b2da      	uxtb	r2, r3
   13b82:	4b03      	ldr	r3, [pc, #12]	; (13b90 <LCD_setRowOffsets+0x38>)
   13b84:	70da      	strb	r2, [r3, #3]
}
   13b86:	46c0      	nop			; (mov r8, r8)
   13b88:	46bd      	mov	sp, r7
   13b8a:	b004      	add	sp, #16
   13b8c:	bd80      	pop	{r7, pc}
   13b8e:	46c0      	nop			; (mov r8, r8)
   13b90:	200006c0 	.word	0x200006c0

00013b94 <write4bits>:

void write4bits(uint8_t value)
{
   13b94:	b580      	push	{r7, lr}
   13b96:	b084      	sub	sp, #16
   13b98:	af00      	add	r7, sp, #0
   13b9a:	0002      	movs	r2, r0
   13b9c:	1dfb      	adds	r3, r7, #7
   13b9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13ba0:	2300      	movs	r3, #0
   13ba2:	60fb      	str	r3, [r7, #12]
   13ba4:	e013      	b.n	13bce <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13ba6:	4a0e      	ldr	r2, [pc, #56]	; (13be0 <write4bits+0x4c>)
   13ba8:	68fb      	ldr	r3, [r7, #12]
   13baa:	18d3      	adds	r3, r2, r3
   13bac:	7818      	ldrb	r0, [r3, #0]
   13bae:	1dfb      	adds	r3, r7, #7
   13bb0:	781a      	ldrb	r2, [r3, #0]
   13bb2:	68fb      	ldr	r3, [r7, #12]
   13bb4:	411a      	asrs	r2, r3
   13bb6:	0013      	movs	r3, r2
   13bb8:	2201      	movs	r2, #1
   13bba:	4013      	ands	r3, r2
   13bbc:	1e5a      	subs	r2, r3, #1
   13bbe:	4193      	sbcs	r3, r2
   13bc0:	b2db      	uxtb	r3, r3
   13bc2:	0019      	movs	r1, r3
   13bc4:	4b07      	ldr	r3, [pc, #28]	; (13be4 <write4bits+0x50>)
   13bc6:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13bc8:	68fb      	ldr	r3, [r7, #12]
   13bca:	3301      	adds	r3, #1
   13bcc:	60fb      	str	r3, [r7, #12]
   13bce:	68fb      	ldr	r3, [r7, #12]
   13bd0:	2b03      	cmp	r3, #3
   13bd2:	dde8      	ble.n	13ba6 <write4bits+0x12>
	}
	pulseEnable();
   13bd4:	4b04      	ldr	r3, [pc, #16]	; (13be8 <write4bits+0x54>)
   13bd6:	4798      	blx	r3
}
   13bd8:	46c0      	nop			; (mov r8, r8)
   13bda:	46bd      	mov	sp, r7
   13bdc:	b004      	add	sp, #16
   13bde:	bd80      	pop	{r7, pc}
   13be0:	200006c8 	.word	0x200006c8
   13be4:	00013795 	.word	0x00013795
   13be8:	00013bed 	.word	0x00013bed

00013bec <pulseEnable>:



void pulseEnable(void)
{
   13bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bee:	b085      	sub	sp, #20
   13bf0:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13bf2:	4b31      	ldr	r3, [pc, #196]	; (13cb8 <pulseEnable+0xcc>)
   13bf4:	781b      	ldrb	r3, [r3, #0]
   13bf6:	2100      	movs	r1, #0
   13bf8:	0018      	movs	r0, r3
   13bfa:	4b30      	ldr	r3, [pc, #192]	; (13cbc <pulseEnable+0xd0>)
   13bfc:	4798      	blx	r3
 	delay_us(1);
   13bfe:	2000      	movs	r0, #0
   13c00:	4b2f      	ldr	r3, [pc, #188]	; (13cc0 <pulseEnable+0xd4>)
   13c02:	4798      	blx	r3
   13c04:	0003      	movs	r3, r0
   13c06:	60bb      	str	r3, [r7, #8]
   13c08:	2300      	movs	r3, #0
   13c0a:	60fb      	str	r3, [r7, #12]
   13c0c:	4b2d      	ldr	r3, [pc, #180]	; (13cc4 <pulseEnable+0xd8>)
   13c0e:	2400      	movs	r4, #0
   13c10:	68b8      	ldr	r0, [r7, #8]
   13c12:	68f9      	ldr	r1, [r7, #12]
   13c14:	18c0      	adds	r0, r0, r3
   13c16:	4161      	adcs	r1, r4
   13c18:	4c2b      	ldr	r4, [pc, #172]	; (13cc8 <pulseEnable+0xdc>)
   13c1a:	4a2c      	ldr	r2, [pc, #176]	; (13ccc <pulseEnable+0xe0>)
   13c1c:	2300      	movs	r3, #0
   13c1e:	47a0      	blx	r4
   13c20:	0003      	movs	r3, r0
   13c22:	000c      	movs	r4, r1
   13c24:	0018      	movs	r0, r3
   13c26:	4b2a      	ldr	r3, [pc, #168]	; (13cd0 <pulseEnable+0xe4>)
   13c28:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13c2a:	4b23      	ldr	r3, [pc, #140]	; (13cb8 <pulseEnable+0xcc>)
   13c2c:	781b      	ldrb	r3, [r3, #0]
   13c2e:	2101      	movs	r1, #1
   13c30:	0018      	movs	r0, r3
   13c32:	4b22      	ldr	r3, [pc, #136]	; (13cbc <pulseEnable+0xd0>)
   13c34:	4798      	blx	r3
 	delay_us(1);
   13c36:	2000      	movs	r0, #0
   13c38:	4b21      	ldr	r3, [pc, #132]	; (13cc0 <pulseEnable+0xd4>)
   13c3a:	4798      	blx	r3
   13c3c:	0003      	movs	r3, r0
   13c3e:	001d      	movs	r5, r3
   13c40:	2300      	movs	r3, #0
   13c42:	001e      	movs	r6, r3
   13c44:	4b1f      	ldr	r3, [pc, #124]	; (13cc4 <pulseEnable+0xd8>)
   13c46:	2400      	movs	r4, #0
   13c48:	0028      	movs	r0, r5
   13c4a:	0031      	movs	r1, r6
   13c4c:	18c0      	adds	r0, r0, r3
   13c4e:	4161      	adcs	r1, r4
   13c50:	4c1d      	ldr	r4, [pc, #116]	; (13cc8 <pulseEnable+0xdc>)
   13c52:	4a1e      	ldr	r2, [pc, #120]	; (13ccc <pulseEnable+0xe0>)
   13c54:	2300      	movs	r3, #0
   13c56:	47a0      	blx	r4
   13c58:	0003      	movs	r3, r0
   13c5a:	000c      	movs	r4, r1
   13c5c:	0018      	movs	r0, r3
   13c5e:	4b1c      	ldr	r3, [pc, #112]	; (13cd0 <pulseEnable+0xe4>)
   13c60:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13c62:	4b15      	ldr	r3, [pc, #84]	; (13cb8 <pulseEnable+0xcc>)
   13c64:	781b      	ldrb	r3, [r3, #0]
   13c66:	2100      	movs	r1, #0
   13c68:	0018      	movs	r0, r3
   13c6a:	4b14      	ldr	r3, [pc, #80]	; (13cbc <pulseEnable+0xd0>)
   13c6c:	4798      	blx	r3
 	delay_us(100);
   13c6e:	2000      	movs	r0, #0
   13c70:	4b13      	ldr	r3, [pc, #76]	; (13cc0 <pulseEnable+0xd4>)
   13c72:	4798      	blx	r3
   13c74:	0003      	movs	r3, r0
   13c76:	603b      	str	r3, [r7, #0]
   13c78:	2300      	movs	r3, #0
   13c7a:	607b      	str	r3, [r7, #4]
   13c7c:	4c15      	ldr	r4, [pc, #84]	; (13cd4 <pulseEnable+0xe8>)
   13c7e:	2264      	movs	r2, #100	; 0x64
   13c80:	2300      	movs	r3, #0
   13c82:	6838      	ldr	r0, [r7, #0]
   13c84:	6879      	ldr	r1, [r7, #4]
   13c86:	47a0      	blx	r4
   13c88:	0003      	movs	r3, r0
   13c8a:	000c      	movs	r4, r1
   13c8c:	0019      	movs	r1, r3
   13c8e:	0022      	movs	r2, r4
   13c90:	4b0c      	ldr	r3, [pc, #48]	; (13cc4 <pulseEnable+0xd8>)
   13c92:	2400      	movs	r4, #0
   13c94:	18c9      	adds	r1, r1, r3
   13c96:	4162      	adcs	r2, r4
   13c98:	0008      	movs	r0, r1
   13c9a:	0011      	movs	r1, r2
   13c9c:	4c0a      	ldr	r4, [pc, #40]	; (13cc8 <pulseEnable+0xdc>)
   13c9e:	4a0b      	ldr	r2, [pc, #44]	; (13ccc <pulseEnable+0xe0>)
   13ca0:	2300      	movs	r3, #0
   13ca2:	47a0      	blx	r4
   13ca4:	0003      	movs	r3, r0
   13ca6:	000c      	movs	r4, r1
   13ca8:	0018      	movs	r0, r3
   13caa:	4b09      	ldr	r3, [pc, #36]	; (13cd0 <pulseEnable+0xe4>)
   13cac:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13cae:	46c0      	nop			; (mov r8, r8)
   13cb0:	46bd      	mov	sp, r7
   13cb2:	b005      	add	sp, #20
   13cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cb6:	46c0      	nop			; (mov r8, r8)
   13cb8:	200006ce 	.word	0x200006ce
   13cbc:	00013795 	.word	0x00013795
   13cc0:	000248dd 	.word	0x000248dd
   13cc4:	006acfbf 	.word	0x006acfbf
   13cc8:	00026865 	.word	0x00026865
   13ccc:	006acfc0 	.word	0x006acfc0
   13cd0:	20000001 	.word	0x20000001
   13cd4:	000268a5 	.word	0x000268a5

00013cd8 <command>:

inline void command(uint8_t value) 
{
   13cd8:	b580      	push	{r7, lr}
   13cda:	b082      	sub	sp, #8
   13cdc:	af00      	add	r7, sp, #0
   13cde:	0002      	movs	r2, r0
   13ce0:	1dfb      	adds	r3, r7, #7
   13ce2:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13ce4:	1dfb      	adds	r3, r7, #7
   13ce6:	781b      	ldrb	r3, [r3, #0]
   13ce8:	2100      	movs	r1, #0
   13cea:	0018      	movs	r0, r3
   13cec:	4b02      	ldr	r3, [pc, #8]	; (13cf8 <command+0x20>)
   13cee:	4798      	blx	r3
}
   13cf0:	46c0      	nop			; (mov r8, r8)
   13cf2:	46bd      	mov	sp, r7
   13cf4:	b002      	add	sp, #8
   13cf6:	bd80      	pop	{r7, pc}
   13cf8:	00013d25 	.word	0x00013d25

00013cfc <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13cfc:	b580      	push	{r7, lr}
   13cfe:	b082      	sub	sp, #8
   13d00:	af00      	add	r7, sp, #0
   13d02:	0002      	movs	r2, r0
   13d04:	1dfb      	adds	r3, r7, #7
   13d06:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13d08:	1dfb      	adds	r3, r7, #7
   13d0a:	781b      	ldrb	r3, [r3, #0]
   13d0c:	2101      	movs	r1, #1
   13d0e:	0018      	movs	r0, r3
   13d10:	4b03      	ldr	r3, [pc, #12]	; (13d20 <LCD_write+0x24>)
   13d12:	4798      	blx	r3
	return 1;
   13d14:	2301      	movs	r3, #1
}
   13d16:	0018      	movs	r0, r3
   13d18:	46bd      	mov	sp, r7
   13d1a:	b002      	add	sp, #8
   13d1c:	bd80      	pop	{r7, pc}
   13d1e:	46c0      	nop			; (mov r8, r8)
   13d20:	00013d25 	.word	0x00013d25

00013d24 <send>:

void send(uint8_t value, uint8_t mode) 
{
   13d24:	b580      	push	{r7, lr}
   13d26:	b082      	sub	sp, #8
   13d28:	af00      	add	r7, sp, #0
   13d2a:	0002      	movs	r2, r0
   13d2c:	1dfb      	adds	r3, r7, #7
   13d2e:	701a      	strb	r2, [r3, #0]
   13d30:	1dbb      	adds	r3, r7, #6
   13d32:	1c0a      	adds	r2, r1, #0
   13d34:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13d36:	4b0d      	ldr	r3, [pc, #52]	; (13d6c <send+0x48>)
   13d38:	781a      	ldrb	r2, [r3, #0]
   13d3a:	1dbb      	adds	r3, r7, #6
   13d3c:	781b      	ldrb	r3, [r3, #0]
   13d3e:	1e59      	subs	r1, r3, #1
   13d40:	418b      	sbcs	r3, r1
   13d42:	b2db      	uxtb	r3, r3
   13d44:	0019      	movs	r1, r3
   13d46:	0010      	movs	r0, r2
   13d48:	4b09      	ldr	r3, [pc, #36]	; (13d70 <send+0x4c>)
   13d4a:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13d4c:	1dfb      	adds	r3, r7, #7
   13d4e:	781b      	ldrb	r3, [r3, #0]
   13d50:	091b      	lsrs	r3, r3, #4
   13d52:	b2db      	uxtb	r3, r3
   13d54:	0018      	movs	r0, r3
   13d56:	4b07      	ldr	r3, [pc, #28]	; (13d74 <send+0x50>)
   13d58:	4798      	blx	r3
		write4bits(value);
   13d5a:	1dfb      	adds	r3, r7, #7
   13d5c:	781b      	ldrb	r3, [r3, #0]
   13d5e:	0018      	movs	r0, r3
   13d60:	4b04      	ldr	r3, [pc, #16]	; (13d74 <send+0x50>)
   13d62:	4798      	blx	r3
	}
}
   13d64:	46c0      	nop			; (mov r8, r8)
   13d66:	46bd      	mov	sp, r7
   13d68:	b002      	add	sp, #8
   13d6a:	bd80      	pop	{r7, pc}
   13d6c:	200006cf 	.word	0x200006cf
   13d70:	00013795 	.word	0x00013795
   13d74:	00013b95 	.word	0x00013b95

00013d78 <LCD_clear>:

void LCD_clear(void)
{
   13d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d7a:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13d7c:	2001      	movs	r0, #1
   13d7e:	4b13      	ldr	r3, [pc, #76]	; (13dcc <LCD_clear+0x54>)
   13d80:	4798      	blx	r3
	delay_us(2000);
   13d82:	2000      	movs	r0, #0
   13d84:	4b12      	ldr	r3, [pc, #72]	; (13dd0 <LCD_clear+0x58>)
   13d86:	4798      	blx	r3
   13d88:	0003      	movs	r3, r0
   13d8a:	001d      	movs	r5, r3
   13d8c:	2300      	movs	r3, #0
   13d8e:	001e      	movs	r6, r3
   13d90:	4c10      	ldr	r4, [pc, #64]	; (13dd4 <LCD_clear+0x5c>)
   13d92:	22fa      	movs	r2, #250	; 0xfa
   13d94:	00d2      	lsls	r2, r2, #3
   13d96:	2300      	movs	r3, #0
   13d98:	0028      	movs	r0, r5
   13d9a:	0031      	movs	r1, r6
   13d9c:	47a0      	blx	r4
   13d9e:	0003      	movs	r3, r0
   13da0:	000c      	movs	r4, r1
   13da2:	0019      	movs	r1, r3
   13da4:	0022      	movs	r2, r4
   13da6:	4b0c      	ldr	r3, [pc, #48]	; (13dd8 <LCD_clear+0x60>)
   13da8:	2400      	movs	r4, #0
   13daa:	18c9      	adds	r1, r1, r3
   13dac:	4162      	adcs	r2, r4
   13dae:	0008      	movs	r0, r1
   13db0:	0011      	movs	r1, r2
   13db2:	4c0a      	ldr	r4, [pc, #40]	; (13ddc <LCD_clear+0x64>)
   13db4:	4a0a      	ldr	r2, [pc, #40]	; (13de0 <LCD_clear+0x68>)
   13db6:	2300      	movs	r3, #0
   13db8:	47a0      	blx	r4
   13dba:	0003      	movs	r3, r0
   13dbc:	000c      	movs	r4, r1
   13dbe:	0018      	movs	r0, r3
   13dc0:	4b08      	ldr	r3, [pc, #32]	; (13de4 <LCD_clear+0x6c>)
   13dc2:	4798      	blx	r3
}
   13dc4:	46c0      	nop			; (mov r8, r8)
   13dc6:	46bd      	mov	sp, r7
   13dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13dca:	46c0      	nop			; (mov r8, r8)
   13dcc:	00013cd9 	.word	0x00013cd9
   13dd0:	000248dd 	.word	0x000248dd
   13dd4:	000268a5 	.word	0x000268a5
   13dd8:	006acfbf 	.word	0x006acfbf
   13ddc:	00026865 	.word	0x00026865
   13de0:	006acfc0 	.word	0x006acfc0
   13de4:	20000001 	.word	0x20000001

00013de8 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13de8:	b580      	push	{r7, lr}
   13dea:	b084      	sub	sp, #16
   13dec:	af00      	add	r7, sp, #0
   13dee:	0002      	movs	r2, r0
   13df0:	6039      	str	r1, [r7, #0]
   13df2:	1dfb      	adds	r3, r7, #7
   13df4:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13df6:	1dfb      	adds	r3, r7, #7
   13df8:	1dfa      	adds	r2, r7, #7
   13dfa:	7812      	ldrb	r2, [r2, #0]
   13dfc:	2107      	movs	r1, #7
   13dfe:	400a      	ands	r2, r1
   13e00:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13e02:	1dfb      	adds	r3, r7, #7
   13e04:	781b      	ldrb	r3, [r3, #0]
   13e06:	00db      	lsls	r3, r3, #3
   13e08:	b25b      	sxtb	r3, r3
   13e0a:	2240      	movs	r2, #64	; 0x40
   13e0c:	4313      	orrs	r3, r2
   13e0e:	b25b      	sxtb	r3, r3
   13e10:	b2db      	uxtb	r3, r3
   13e12:	0018      	movs	r0, r3
   13e14:	4b0a      	ldr	r3, [pc, #40]	; (13e40 <LCD_Create_Custom_createChar+0x58>)
   13e16:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13e18:	2300      	movs	r3, #0
   13e1a:	60fb      	str	r3, [r7, #12]
   13e1c:	e009      	b.n	13e32 <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   13e1e:	68fb      	ldr	r3, [r7, #12]
   13e20:	683a      	ldr	r2, [r7, #0]
   13e22:	18d3      	adds	r3, r2, r3
   13e24:	781b      	ldrb	r3, [r3, #0]
   13e26:	0018      	movs	r0, r3
   13e28:	4b06      	ldr	r3, [pc, #24]	; (13e44 <LCD_Create_Custom_createChar+0x5c>)
   13e2a:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13e2c:	68fb      	ldr	r3, [r7, #12]
   13e2e:	3301      	adds	r3, #1
   13e30:	60fb      	str	r3, [r7, #12]
   13e32:	68fb      	ldr	r3, [r7, #12]
   13e34:	2b07      	cmp	r3, #7
   13e36:	ddf2      	ble.n	13e1e <LCD_Create_Custom_createChar+0x36>
	}
}
   13e38:	46c0      	nop			; (mov r8, r8)
   13e3a:	46bd      	mov	sp, r7
   13e3c:	b004      	add	sp, #16
   13e3e:	bd80      	pop	{r7, pc}
   13e40:	00013cd9 	.word	0x00013cd9
   13e44:	00013cfd 	.word	0x00013cfd

00013e48 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   13e48:	b580      	push	{r7, lr}
   13e4a:	b084      	sub	sp, #16
   13e4c:	af00      	add	r7, sp, #0
   13e4e:	0002      	movs	r2, r0
   13e50:	1dfb      	adds	r3, r7, #7
   13e52:	701a      	strb	r2, [r3, #0]
   13e54:	1dbb      	adds	r3, r7, #6
   13e56:	1c0a      	adds	r2, r1, #0
   13e58:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   13e5a:	2304      	movs	r3, #4
   13e5c:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   13e5e:	1dbb      	adds	r3, r7, #6
   13e60:	781a      	ldrb	r2, [r3, #0]
   13e62:	68fb      	ldr	r3, [r7, #12]
   13e64:	429a      	cmp	r2, r3
   13e66:	d304      	bcc.n	13e72 <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   13e68:	68fb      	ldr	r3, [r7, #12]
   13e6a:	b2da      	uxtb	r2, r3
   13e6c:	1dbb      	adds	r3, r7, #6
   13e6e:	3a01      	subs	r2, #1
   13e70:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   13e72:	4b10      	ldr	r3, [pc, #64]	; (13eb4 <LCD_setCursor+0x6c>)
   13e74:	781b      	ldrb	r3, [r3, #0]
   13e76:	1dba      	adds	r2, r7, #6
   13e78:	7812      	ldrb	r2, [r2, #0]
   13e7a:	429a      	cmp	r2, r3
   13e7c:	d304      	bcc.n	13e88 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   13e7e:	4b0d      	ldr	r3, [pc, #52]	; (13eb4 <LCD_setCursor+0x6c>)
   13e80:	781a      	ldrb	r2, [r3, #0]
   13e82:	1dbb      	adds	r3, r7, #6
   13e84:	3a01      	subs	r2, #1
   13e86:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   13e88:	1dbb      	adds	r3, r7, #6
   13e8a:	781b      	ldrb	r3, [r3, #0]
   13e8c:	4a0a      	ldr	r2, [pc, #40]	; (13eb8 <LCD_setCursor+0x70>)
   13e8e:	5cd2      	ldrb	r2, [r2, r3]
   13e90:	1dfb      	adds	r3, r7, #7
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	18d3      	adds	r3, r2, r3
   13e96:	b2db      	uxtb	r3, r3
   13e98:	b25b      	sxtb	r3, r3
   13e9a:	2280      	movs	r2, #128	; 0x80
   13e9c:	4252      	negs	r2, r2
   13e9e:	4313      	orrs	r3, r2
   13ea0:	b25b      	sxtb	r3, r3
   13ea2:	b2db      	uxtb	r3, r3
   13ea4:	0018      	movs	r0, r3
   13ea6:	4b05      	ldr	r3, [pc, #20]	; (13ebc <LCD_setCursor+0x74>)
   13ea8:	4798      	blx	r3
}
   13eaa:	46c0      	nop			; (mov r8, r8)
   13eac:	46bd      	mov	sp, r7
   13eae:	b004      	add	sp, #16
   13eb0:	bd80      	pop	{r7, pc}
   13eb2:	46c0      	nop			; (mov r8, r8)
   13eb4:	200006c6 	.word	0x200006c6
   13eb8:	200006c0 	.word	0x200006c0
   13ebc:	00013cd9 	.word	0x00013cd9

00013ec0 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   13ec0:	b580      	push	{r7, lr}
   13ec2:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   13ec4:	4b08      	ldr	r3, [pc, #32]	; (13ee8 <LCD_display+0x28>)
   13ec6:	781b      	ldrb	r3, [r3, #0]
   13ec8:	2204      	movs	r2, #4
   13eca:	4313      	orrs	r3, r2
   13ecc:	b2da      	uxtb	r2, r3
   13ece:	4b06      	ldr	r3, [pc, #24]	; (13ee8 <LCD_display+0x28>)
   13ed0:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   13ed2:	4b05      	ldr	r3, [pc, #20]	; (13ee8 <LCD_display+0x28>)
   13ed4:	781b      	ldrb	r3, [r3, #0]
   13ed6:	2208      	movs	r2, #8
   13ed8:	4313      	orrs	r3, r2
   13eda:	b2db      	uxtb	r3, r3
   13edc:	0018      	movs	r0, r3
   13ede:	4b03      	ldr	r3, [pc, #12]	; (13eec <LCD_display+0x2c>)
   13ee0:	4798      	blx	r3
}
   13ee2:	46c0      	nop			; (mov r8, r8)
   13ee4:	46bd      	mov	sp, r7
   13ee6:	bd80      	pop	{r7, pc}
   13ee8:	200006c5 	.word	0x200006c5
   13eec:	00013cd9 	.word	0x00013cd9

00013ef0 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   13ef0:	b580      	push	{r7, lr}
   13ef2:	b084      	sub	sp, #16
   13ef4:	af00      	add	r7, sp, #0
   13ef6:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   13ef8:	687b      	ldr	r3, [r7, #4]
   13efa:	0018      	movs	r0, r3
   13efc:	4b0f      	ldr	r3, [pc, #60]	; (13f3c <Buffer_writer+0x4c>)
   13efe:	4798      	blx	r3
   13f00:	0003      	movs	r3, r0
   13f02:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   13f04:	2300      	movs	r3, #0
   13f06:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13f08:	e00b      	b.n	13f22 <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   13f0a:	687b      	ldr	r3, [r7, #4]
   13f0c:	1c5a      	adds	r2, r3, #1
   13f0e:	607a      	str	r2, [r7, #4]
   13f10:	781b      	ldrb	r3, [r3, #0]
   13f12:	0018      	movs	r0, r3
   13f14:	4b0a      	ldr	r3, [pc, #40]	; (13f40 <Buffer_writer+0x50>)
   13f16:	4798      	blx	r3
   13f18:	1e03      	subs	r3, r0, #0
   13f1a:	d008      	beq.n	13f2e <Buffer_writer+0x3e>
   13f1c:	68bb      	ldr	r3, [r7, #8]
   13f1e:	3301      	adds	r3, #1
   13f20:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13f22:	68fb      	ldr	r3, [r7, #12]
   13f24:	1e5a      	subs	r2, r3, #1
   13f26:	60fa      	str	r2, [r7, #12]
   13f28:	2b00      	cmp	r3, #0
   13f2a:	d1ee      	bne.n	13f0a <Buffer_writer+0x1a>
   13f2c:	e000      	b.n	13f30 <Buffer_writer+0x40>
		else break;
   13f2e:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   13f30:	68bb      	ldr	r3, [r7, #8]
}
   13f32:	0018      	movs	r0, r3
   13f34:	46bd      	mov	sp, r7
   13f36:	b004      	add	sp, #16
   13f38:	bd80      	pop	{r7, pc}
   13f3a:	46c0      	nop			; (mov r8, r8)
   13f3c:	000290a3 	.word	0x000290a3
   13f40:	00013cfd 	.word	0x00013cfd

00013f44 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   13f44:	b40f      	push	{r0, r1, r2, r3}
   13f46:	b580      	push	{r7, lr}
   13f48:	b084      	sub	sp, #16
   13f4a:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   13f4c:	69bb      	ldr	r3, [r7, #24]
   13f4e:	0018      	movs	r0, r3
   13f50:	4b11      	ldr	r3, [pc, #68]	; (13f98 <lcd_printf+0x54>)
   13f52:	4798      	blx	r3
   13f54:	0003      	movs	r3, r0
   13f56:	3303      	adds	r3, #3
   13f58:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   13f5a:	68fb      	ldr	r3, [r7, #12]
   13f5c:	0018      	movs	r0, r3
   13f5e:	4b0f      	ldr	r3, [pc, #60]	; (13f9c <lcd_printf+0x58>)
   13f60:	4798      	blx	r3
   13f62:	0003      	movs	r3, r0
   13f64:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   13f66:	231c      	movs	r3, #28
   13f68:	18fb      	adds	r3, r7, r3
   13f6a:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   13f6c:	687a      	ldr	r2, [r7, #4]
   13f6e:	69b9      	ldr	r1, [r7, #24]
   13f70:	68bb      	ldr	r3, [r7, #8]
   13f72:	0018      	movs	r0, r3
   13f74:	4b0a      	ldr	r3, [pc, #40]	; (13fa0 <lcd_printf+0x5c>)
   13f76:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   13f78:	68bb      	ldr	r3, [r7, #8]
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b09      	ldr	r3, [pc, #36]	; (13fa4 <lcd_printf+0x60>)
   13f7e:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   13f80:	68bb      	ldr	r3, [r7, #8]
   13f82:	0018      	movs	r0, r3
   13f84:	4b08      	ldr	r3, [pc, #32]	; (13fa8 <lcd_printf+0x64>)
   13f86:	4798      	blx	r3
}
   13f88:	46c0      	nop			; (mov r8, r8)
   13f8a:	46bd      	mov	sp, r7
   13f8c:	b004      	add	sp, #16
   13f8e:	bc80      	pop	{r7}
   13f90:	bc08      	pop	{r3}
   13f92:	b004      	add	sp, #16
   13f94:	4718      	bx	r3
   13f96:	46c0      	nop			; (mov r8, r8)
   13f98:	000290a3 	.word	0x000290a3
   13f9c:	00028d91 	.word	0x00028d91
   13fa0:	00029391 	.word	0x00029391
   13fa4:	00013ef1 	.word	0x00013ef1
   13fa8:	00028da5 	.word	0x00028da5

00013fac <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   13fac:	b580      	push	{r7, lr}
   13fae:	b084      	sub	sp, #16
   13fb0:	af00      	add	r7, sp, #0
   13fb2:	6078      	str	r0, [r7, #4]
	if (!str) return;
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	d028      	beq.n	1400c <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   13fba:	687b      	ldr	r3, [r7, #4]
   13fbc:	60fb      	str	r3, [r7, #12]
   13fbe:	e020      	b.n	14002 <StringtoUpperCase+0x56>
		*p = toupper(*p);
   13fc0:	230b      	movs	r3, #11
   13fc2:	18fb      	adds	r3, r7, r3
   13fc4:	68fa      	ldr	r2, [r7, #12]
   13fc6:	7812      	ldrb	r2, [r2, #0]
   13fc8:	701a      	strb	r2, [r3, #0]
   13fca:	4b12      	ldr	r3, [pc, #72]	; (14014 <StringtoUpperCase+0x68>)
   13fcc:	4798      	blx	r3
   13fce:	0002      	movs	r2, r0
   13fd0:	230b      	movs	r3, #11
   13fd2:	18fb      	adds	r3, r7, r3
   13fd4:	781b      	ldrb	r3, [r3, #0]
   13fd6:	3301      	adds	r3, #1
   13fd8:	18d3      	adds	r3, r2, r3
   13fda:	781b      	ldrb	r3, [r3, #0]
   13fdc:	001a      	movs	r2, r3
   13fde:	2303      	movs	r3, #3
   13fe0:	4013      	ands	r3, r2
   13fe2:	2b02      	cmp	r3, #2
   13fe4:	d104      	bne.n	13ff0 <StringtoUpperCase+0x44>
   13fe6:	230b      	movs	r3, #11
   13fe8:	18fb      	adds	r3, r7, r3
   13fea:	781b      	ldrb	r3, [r3, #0]
   13fec:	3b20      	subs	r3, #32
   13fee:	e002      	b.n	13ff6 <StringtoUpperCase+0x4a>
   13ff0:	230b      	movs	r3, #11
   13ff2:	18fb      	adds	r3, r7, r3
   13ff4:	781b      	ldrb	r3, [r3, #0]
   13ff6:	b2da      	uxtb	r2, r3
   13ff8:	68fb      	ldr	r3, [r7, #12]
   13ffa:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   13ffc:	68fb      	ldr	r3, [r7, #12]
   13ffe:	3301      	adds	r3, #1
   14000:	60fb      	str	r3, [r7, #12]
   14002:	68fb      	ldr	r3, [r7, #12]
   14004:	781b      	ldrb	r3, [r3, #0]
   14006:	2b00      	cmp	r3, #0
   14008:	d1da      	bne.n	13fc0 <StringtoUpperCase+0x14>
   1400a:	e000      	b.n	1400e <StringtoUpperCase+0x62>
	if (!str) return;
   1400c:	46c0      	nop			; (mov r8, r8)
	}
}
   1400e:	46bd      	mov	sp, r7
   14010:	b004      	add	sp, #16
   14012:	bd80      	pop	{r7, pc}
   14014:	00028d75 	.word	0x00028d75

00014018 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   14018:	b580      	push	{r7, lr}
   1401a:	b084      	sub	sp, #16
   1401c:	af00      	add	r7, sp, #0
   1401e:	6078      	str	r0, [r7, #4]
   14020:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   14022:	683b      	ldr	r3, [r7, #0]
   14024:	0018      	movs	r0, r3
   14026:	4b10      	ldr	r3, [pc, #64]	; (14068 <StringstartsWith+0x50>)
   14028:	4798      	blx	r3
   1402a:	0003      	movs	r3, r0
   1402c:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   1402e:	687b      	ldr	r3, [r7, #4]
   14030:	0018      	movs	r0, r3
   14032:	4b0d      	ldr	r3, [pc, #52]	; (14068 <StringstartsWith+0x50>)
   14034:	4798      	blx	r3
   14036:	0003      	movs	r3, r0
   14038:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   1403a:	68ba      	ldr	r2, [r7, #8]
   1403c:	68fb      	ldr	r3, [r7, #12]
   1403e:	429a      	cmp	r2, r3
   14040:	d309      	bcc.n	14056 <StringstartsWith+0x3e>
   14042:	68fa      	ldr	r2, [r7, #12]
   14044:	6879      	ldr	r1, [r7, #4]
   14046:	683b      	ldr	r3, [r7, #0]
   14048:	0018      	movs	r0, r3
   1404a:	4b08      	ldr	r3, [pc, #32]	; (1406c <StringstartsWith+0x54>)
   1404c:	4798      	blx	r3
   1404e:	1e03      	subs	r3, r0, #0
   14050:	d101      	bne.n	14056 <StringstartsWith+0x3e>
   14052:	2301      	movs	r3, #1
   14054:	e000      	b.n	14058 <StringstartsWith+0x40>
   14056:	2300      	movs	r3, #0
   14058:	1c1a      	adds	r2, r3, #0
   1405a:	2301      	movs	r3, #1
   1405c:	4013      	ands	r3, r2
   1405e:	b2db      	uxtb	r3, r3
}
   14060:	0018      	movs	r0, r3
   14062:	46bd      	mov	sp, r7
   14064:	b004      	add	sp, #16
   14066:	bd80      	pop	{r7, pc}
   14068:	000290a3 	.word	0x000290a3
   1406c:	000290b1 	.word	0x000290b1

00014070 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14070:	b580      	push	{r7, lr}
   14072:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14074:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14078:	4b02      	ldr	r3, [pc, #8]	; (14084 <NVIC_SystemReset+0x14>)
   1407a:	4a03      	ldr	r2, [pc, #12]	; (14088 <NVIC_SystemReset+0x18>)
   1407c:	60da      	str	r2, [r3, #12]
   1407e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14082:	e7fe      	b.n	14082 <NVIC_SystemReset+0x12>
   14084:	e000ed00 	.word	0xe000ed00
   14088:	05fa0004 	.word	0x05fa0004

0001408c <system_pinmux_get_group_from_gpio_pin>:
{
   1408c:	b580      	push	{r7, lr}
   1408e:	b084      	sub	sp, #16
   14090:	af00      	add	r7, sp, #0
   14092:	0002      	movs	r2, r0
   14094:	1dfb      	adds	r3, r7, #7
   14096:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14098:	230f      	movs	r3, #15
   1409a:	18fb      	adds	r3, r7, r3
   1409c:	1dfa      	adds	r2, r7, #7
   1409e:	7812      	ldrb	r2, [r2, #0]
   140a0:	09d2      	lsrs	r2, r2, #7
   140a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   140a4:	230e      	movs	r3, #14
   140a6:	18fb      	adds	r3, r7, r3
   140a8:	1dfa      	adds	r2, r7, #7
   140aa:	7812      	ldrb	r2, [r2, #0]
   140ac:	0952      	lsrs	r2, r2, #5
   140ae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   140b0:	4b0d      	ldr	r3, [pc, #52]	; (140e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   140b2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   140b4:	230f      	movs	r3, #15
   140b6:	18fb      	adds	r3, r7, r3
   140b8:	781b      	ldrb	r3, [r3, #0]
   140ba:	2b00      	cmp	r3, #0
   140bc:	d10f      	bne.n	140de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   140be:	230f      	movs	r3, #15
   140c0:	18fb      	adds	r3, r7, r3
   140c2:	781b      	ldrb	r3, [r3, #0]
   140c4:	009b      	lsls	r3, r3, #2
   140c6:	2210      	movs	r2, #16
   140c8:	4694      	mov	ip, r2
   140ca:	44bc      	add	ip, r7
   140cc:	4463      	add	r3, ip
   140ce:	3b08      	subs	r3, #8
   140d0:	681a      	ldr	r2, [r3, #0]
   140d2:	230e      	movs	r3, #14
   140d4:	18fb      	adds	r3, r7, r3
   140d6:	781b      	ldrb	r3, [r3, #0]
   140d8:	01db      	lsls	r3, r3, #7
   140da:	18d3      	adds	r3, r2, r3
   140dc:	e000      	b.n	140e0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   140de:	2300      	movs	r3, #0
}
   140e0:	0018      	movs	r0, r3
   140e2:	46bd      	mov	sp, r7
   140e4:	b004      	add	sp, #16
   140e6:	bd80      	pop	{r7, pc}
   140e8:	41004400 	.word	0x41004400

000140ec <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   140ec:	b580      	push	{r7, lr}
   140ee:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   140f0:	4b02      	ldr	r3, [pc, #8]	; (140fc <system_reset+0x10>)
   140f2:	4798      	blx	r3
}
   140f4:	46c0      	nop			; (mov r8, r8)
   140f6:	46bd      	mov	sp, r7
   140f8:	bd80      	pop	{r7, pc}
   140fa:	46c0      	nop			; (mov r8, r8)
   140fc:	00014071 	.word	0x00014071

00014100 <port_get_group_from_gpio_pin>:
{
   14100:	b580      	push	{r7, lr}
   14102:	b082      	sub	sp, #8
   14104:	af00      	add	r7, sp, #0
   14106:	0002      	movs	r2, r0
   14108:	1dfb      	adds	r3, r7, #7
   1410a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1410c:	1dfb      	adds	r3, r7, #7
   1410e:	781b      	ldrb	r3, [r3, #0]
   14110:	0018      	movs	r0, r3
   14112:	4b03      	ldr	r3, [pc, #12]	; (14120 <port_get_group_from_gpio_pin+0x20>)
   14114:	4798      	blx	r3
   14116:	0003      	movs	r3, r0
}
   14118:	0018      	movs	r0, r3
   1411a:	46bd      	mov	sp, r7
   1411c:	b002      	add	sp, #8
   1411e:	bd80      	pop	{r7, pc}
   14120:	0001408d 	.word	0x0001408d

00014124 <port_get_config_defaults>:
{
   14124:	b580      	push	{r7, lr}
   14126:	b082      	sub	sp, #8
   14128:	af00      	add	r7, sp, #0
   1412a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1412c:	687b      	ldr	r3, [r7, #4]
   1412e:	2200      	movs	r2, #0
   14130:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   14132:	687b      	ldr	r3, [r7, #4]
   14134:	2201      	movs	r2, #1
   14136:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14138:	687b      	ldr	r3, [r7, #4]
   1413a:	2200      	movs	r2, #0
   1413c:	709a      	strb	r2, [r3, #2]
}
   1413e:	46c0      	nop			; (mov r8, r8)
   14140:	46bd      	mov	sp, r7
   14142:	b002      	add	sp, #8
   14144:	bd80      	pop	{r7, pc}
	...

00014148 <port_pin_get_input_level>:
{
   14148:	b580      	push	{r7, lr}
   1414a:	b084      	sub	sp, #16
   1414c:	af00      	add	r7, sp, #0
   1414e:	0002      	movs	r2, r0
   14150:	1dfb      	adds	r3, r7, #7
   14152:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14154:	1dfb      	adds	r3, r7, #7
   14156:	781b      	ldrb	r3, [r3, #0]
   14158:	0018      	movs	r0, r3
   1415a:	4b0b      	ldr	r3, [pc, #44]	; (14188 <port_pin_get_input_level+0x40>)
   1415c:	4798      	blx	r3
   1415e:	0003      	movs	r3, r0
   14160:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14162:	1dfb      	adds	r3, r7, #7
   14164:	781b      	ldrb	r3, [r3, #0]
   14166:	221f      	movs	r2, #31
   14168:	4013      	ands	r3, r2
   1416a:	2201      	movs	r2, #1
   1416c:	409a      	lsls	r2, r3
   1416e:	0013      	movs	r3, r2
   14170:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   14172:	68fb      	ldr	r3, [r7, #12]
   14174:	6a1b      	ldr	r3, [r3, #32]
   14176:	68ba      	ldr	r2, [r7, #8]
   14178:	4013      	ands	r3, r2
   1417a:	1e5a      	subs	r2, r3, #1
   1417c:	4193      	sbcs	r3, r2
   1417e:	b2db      	uxtb	r3, r3
}
   14180:	0018      	movs	r0, r3
   14182:	46bd      	mov	sp, r7
   14184:	b004      	add	sp, #16
   14186:	bd80      	pop	{r7, pc}
   14188:	00014101 	.word	0x00014101

0001418c <port_pin_set_output_level>:
{
   1418c:	b580      	push	{r7, lr}
   1418e:	b084      	sub	sp, #16
   14190:	af00      	add	r7, sp, #0
   14192:	0002      	movs	r2, r0
   14194:	1dfb      	adds	r3, r7, #7
   14196:	701a      	strb	r2, [r3, #0]
   14198:	1dbb      	adds	r3, r7, #6
   1419a:	1c0a      	adds	r2, r1, #0
   1419c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1419e:	1dfb      	adds	r3, r7, #7
   141a0:	781b      	ldrb	r3, [r3, #0]
   141a2:	0018      	movs	r0, r3
   141a4:	4b0d      	ldr	r3, [pc, #52]	; (141dc <port_pin_set_output_level+0x50>)
   141a6:	4798      	blx	r3
   141a8:	0003      	movs	r3, r0
   141aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   141ac:	1dfb      	adds	r3, r7, #7
   141ae:	781b      	ldrb	r3, [r3, #0]
   141b0:	221f      	movs	r2, #31
   141b2:	4013      	ands	r3, r2
   141b4:	2201      	movs	r2, #1
   141b6:	409a      	lsls	r2, r3
   141b8:	0013      	movs	r3, r2
   141ba:	60bb      	str	r3, [r7, #8]
	if (level) {
   141bc:	1dbb      	adds	r3, r7, #6
   141be:	781b      	ldrb	r3, [r3, #0]
   141c0:	2b00      	cmp	r3, #0
   141c2:	d003      	beq.n	141cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   141c4:	68fb      	ldr	r3, [r7, #12]
   141c6:	68ba      	ldr	r2, [r7, #8]
   141c8:	619a      	str	r2, [r3, #24]
}
   141ca:	e002      	b.n	141d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   141cc:	68fb      	ldr	r3, [r7, #12]
   141ce:	68ba      	ldr	r2, [r7, #8]
   141d0:	615a      	str	r2, [r3, #20]
}
   141d2:	46c0      	nop			; (mov r8, r8)
   141d4:	46bd      	mov	sp, r7
   141d6:	b004      	add	sp, #16
   141d8:	bd80      	pop	{r7, pc}
   141da:	46c0      	nop			; (mov r8, r8)
   141dc:	00014101 	.word	0x00014101

000141e0 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   141e0:	b580      	push	{r7, lr}
   141e2:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   141e4:	4b0b      	ldr	r3, [pc, #44]	; (14214 <setObtainEvent+0x34>)
   141e6:	781b      	ldrb	r3, [r3, #0]
   141e8:	2201      	movs	r2, #1
   141ea:	4053      	eors	r3, r2
   141ec:	b2db      	uxtb	r3, r3
   141ee:	2b00      	cmp	r3, #0
   141f0:	d00c      	beq.n	1420c <setObtainEvent+0x2c>
   141f2:	4b09      	ldr	r3, [pc, #36]	; (14218 <setObtainEvent+0x38>)
   141f4:	4798      	blx	r3
   141f6:	0002      	movs	r2, r0
   141f8:	4b08      	ldr	r3, [pc, #32]	; (1421c <setObtainEvent+0x3c>)
   141fa:	681b      	ldr	r3, [r3, #0]
   141fc:	1ad2      	subs	r2, r2, r3
   141fe:	23fa      	movs	r3, #250	; 0xfa
   14200:	009b      	lsls	r3, r3, #2
   14202:	429a      	cmp	r2, r3
   14204:	d902      	bls.n	1420c <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   14206:	4b03      	ldr	r3, [pc, #12]	; (14214 <setObtainEvent+0x34>)
   14208:	2201      	movs	r2, #1
   1420a:	701a      	strb	r2, [r3, #0]
	}
}
   1420c:	46c0      	nop			; (mov r8, r8)
   1420e:	46bd      	mov	sp, r7
   14210:	bd80      	pop	{r7, pc}
   14212:	46c0      	nop			; (mov r8, r8)
   14214:	20000766 	.word	0x20000766
   14218:	0002024d 	.word	0x0002024d
   1421c:	2000080c 	.word	0x2000080c

00014220 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14220:	b580      	push	{r7, lr}
   14222:	b082      	sub	sp, #8
   14224:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   14226:	1dfb      	adds	r3, r7, #7
   14228:	2201      	movs	r2, #1
   1422a:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   1422c:	4b23      	ldr	r3, [pc, #140]	; (142bc <operateOnStagedEvent+0x9c>)
   1422e:	781b      	ldrb	r3, [r3, #0]
   14230:	2b00      	cmp	r3, #0
   14232:	d003      	beq.n	1423c <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   14234:	1dfb      	adds	r3, r7, #7
   14236:	4a22      	ldr	r2, [pc, #136]	; (142c0 <operateOnStagedEvent+0xa0>)
   14238:	7a12      	ldrb	r2, [r2, #8]
   1423a:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   1423c:	4b21      	ldr	r3, [pc, #132]	; (142c4 <operateOnStagedEvent+0xa4>)
   1423e:	781b      	ldrb	r3, [r3, #0]
   14240:	2b00      	cmp	r3, #0
   14242:	d037      	beq.n	142b4 <operateOnStagedEvent+0x94>
   14244:	4b20      	ldr	r3, [pc, #128]	; (142c8 <operateOnStagedEvent+0xa8>)
   14246:	781b      	ldrb	r3, [r3, #0]
   14248:	2b01      	cmp	r3, #1
   1424a:	d00b      	beq.n	14264 <operateOnStagedEvent+0x44>
   1424c:	4b1f      	ldr	r3, [pc, #124]	; (142cc <operateOnStagedEvent+0xac>)
   1424e:	4798      	blx	r3
   14250:	0002      	movs	r2, r0
   14252:	4b1f      	ldr	r3, [pc, #124]	; (142d0 <operateOnStagedEvent+0xb0>)
   14254:	681b      	ldr	r3, [r3, #0]
   14256:	1ad2      	subs	r2, r2, r3
   14258:	1dfb      	adds	r3, r7, #7
   1425a:	781b      	ldrb	r3, [r3, #0]
   1425c:	491d      	ldr	r1, [pc, #116]	; (142d4 <operateOnStagedEvent+0xb4>)
   1425e:	434b      	muls	r3, r1
   14260:	429a      	cmp	r2, r3
   14262:	d927      	bls.n	142b4 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   14264:	4b1c      	ldr	r3, [pc, #112]	; (142d8 <operateOnStagedEvent+0xb8>)
   14266:	78db      	ldrb	r3, [r3, #3]
   14268:	2b00      	cmp	r3, #0
   1426a:	d01a      	beq.n	142a2 <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   1426c:	4b13      	ldr	r3, [pc, #76]	; (142bc <operateOnStagedEvent+0x9c>)
   1426e:	781b      	ldrb	r3, [r3, #0]
   14270:	2b00      	cmp	r3, #0
   14272:	d007      	beq.n	14284 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   14274:	4b19      	ldr	r3, [pc, #100]	; (142dc <operateOnStagedEvent+0xbc>)
   14276:	781a      	ldrb	r2, [r3, #0]
   14278:	4b19      	ldr	r3, [pc, #100]	; (142e0 <operateOnStagedEvent+0xc0>)
   1427a:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   1427c:	4b0f      	ldr	r3, [pc, #60]	; (142bc <operateOnStagedEvent+0x9c>)
   1427e:	2200      	movs	r2, #0
   14280:	701a      	strb	r2, [r3, #0]
   14282:	e015      	b.n	142b0 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   14284:	4b17      	ldr	r3, [pc, #92]	; (142e4 <operateOnStagedEvent+0xc4>)
   14286:	781b      	ldrb	r3, [r3, #0]
   14288:	2b00      	cmp	r3, #0
   1428a:	d011      	beq.n	142b0 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   1428c:	4b13      	ldr	r3, [pc, #76]	; (142dc <operateOnStagedEvent+0xbc>)
   1428e:	781a      	ldrb	r2, [r3, #0]
   14290:	4b15      	ldr	r3, [pc, #84]	; (142e8 <operateOnStagedEvent+0xc8>)
   14292:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   14294:	4b15      	ldr	r3, [pc, #84]	; (142ec <operateOnStagedEvent+0xcc>)
   14296:	2201      	movs	r2, #1
   14298:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   1429a:	4b12      	ldr	r3, [pc, #72]	; (142e4 <operateOnStagedEvent+0xc4>)
   1429c:	2200      	movs	r2, #0
   1429e:	701a      	strb	r2, [r3, #0]
   142a0:	e006      	b.n	142b0 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   142a2:	4b0e      	ldr	r3, [pc, #56]	; (142dc <operateOnStagedEvent+0xbc>)
   142a4:	781a      	ldrb	r2, [r3, #0]
   142a6:	4b0e      	ldr	r3, [pc, #56]	; (142e0 <operateOnStagedEvent+0xc0>)
   142a8:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   142aa:	4b04      	ldr	r3, [pc, #16]	; (142bc <operateOnStagedEvent+0x9c>)
   142ac:	2200      	movs	r2, #0
   142ae:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   142b0:	4b0f      	ldr	r3, [pc, #60]	; (142f0 <operateOnStagedEvent+0xd0>)
   142b2:	4798      	blx	r3
	}
}
   142b4:	46c0      	nop			; (mov r8, r8)
   142b6:	46bd      	mov	sp, r7
   142b8:	b002      	add	sp, #8
   142ba:	bd80      	pop	{r7, pc}
   142bc:	200007ca 	.word	0x200007ca
   142c0:	20000650 	.word	0x20000650
   142c4:	20000766 	.word	0x20000766
   142c8:	200006d5 	.word	0x200006d5
   142cc:	0002024d 	.word	0x0002024d
   142d0:	200007ec 	.word	0x200007ec
   142d4:	0000ea60 	.word	0x0000ea60
   142d8:	20000628 	.word	0x20000628
   142dc:	20000769 	.word	0x20000769
   142e0:	20000757 	.word	0x20000757
   142e4:	20000782 	.word	0x20000782
   142e8:	2000071d 	.word	0x2000071d
   142ec:	20000737 	.word	0x20000737
   142f0:	000142f5 	.word	0x000142f5

000142f4 <makeResponseAction>:

void makeResponseAction(void)
{
   142f4:	b580      	push	{r7, lr}
   142f6:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   142f8:	4b07      	ldr	r3, [pc, #28]	; (14318 <makeResponseAction+0x24>)
   142fa:	795b      	ldrb	r3, [r3, #5]
   142fc:	2b4e      	cmp	r3, #78	; 0x4e
   142fe:	d103      	bne.n	14308 <makeResponseAction+0x14>
   14300:	4b06      	ldr	r3, [pc, #24]	; (1431c <makeResponseAction+0x28>)
   14302:	781b      	ldrb	r3, [r3, #0]
   14304:	2b00      	cmp	r3, #0
   14306:	d004      	beq.n	14312 <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
   14308:	4b05      	ldr	r3, [pc, #20]	; (14320 <makeResponseAction+0x2c>)
   1430a:	2201      	movs	r2, #1
   1430c:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   1430e:	4b05      	ldr	r3, [pc, #20]	; (14324 <makeResponseAction+0x30>)
   14310:	4798      	blx	r3
	}
}
   14312:	46c0      	nop			; (mov r8, r8)
   14314:	46bd      	mov	sp, r7
   14316:	bd80      	pop	{r7, pc}
   14318:	20000650 	.word	0x20000650
   1431c:	20000737 	.word	0x20000737
   14320:	20000738 	.word	0x20000738
   14324:	0001455d 	.word	0x0001455d

00014328 <endCall>:

void endCall(void)
{
   14328:	b580      	push	{r7, lr}
   1432a:	af00      	add	r7, sp, #0
	nr  = 0;
   1432c:	4b6d      	ldr	r3, [pc, #436]	; (144e4 <endCall+0x1bc>)
   1432e:	2200      	movs	r2, #0
   14330:	701a      	strb	r2, [r3, #0]
	inCall=false;
   14332:	4b6d      	ldr	r3, [pc, #436]	; (144e8 <endCall+0x1c0>)
   14334:	2200      	movs	r2, #0
   14336:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14338:	4b6c      	ldr	r3, [pc, #432]	; (144ec <endCall+0x1c4>)
   1433a:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   1433c:	2200      	movs	r2, #0
   1433e:	2100      	movs	r1, #0
   14340:	2000      	movs	r0, #0
   14342:	4b6b      	ldr	r3, [pc, #428]	; (144f0 <endCall+0x1c8>)
   14344:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   14346:	23fa      	movs	r3, #250	; 0xfa
   14348:	009b      	lsls	r3, r3, #2
   1434a:	0018      	movs	r0, r3
   1434c:	4b69      	ldr	r3, [pc, #420]	; (144f4 <endCall+0x1cc>)
   1434e:	4798      	blx	r3
	freezeIncomingCalls = false;
   14350:	4b69      	ldr	r3, [pc, #420]	; (144f8 <endCall+0x1d0>)
   14352:	2200      	movs	r2, #0
   14354:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14356:	4b69      	ldr	r3, [pc, #420]	; (144fc <endCall+0x1d4>)
   14358:	785b      	ldrb	r3, [r3, #1]
   1435a:	2b00      	cmp	r3, #0
   1435c:	d002      	beq.n	14364 <endCall+0x3c>
	{
		zeroPressed=false;
   1435e:	4b68      	ldr	r3, [pc, #416]	; (14500 <endCall+0x1d8>)
   14360:	2200      	movs	r2, #0
   14362:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14364:	4b65      	ldr	r3, [pc, #404]	; (144fc <endCall+0x1d4>)
   14366:	78db      	ldrb	r3, [r3, #3]
   14368:	2b01      	cmp	r3, #1
   1436a:	d11d      	bne.n	143a8 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   1436c:	4b65      	ldr	r3, [pc, #404]	; (14504 <endCall+0x1dc>)
   1436e:	781b      	ldrb	r3, [r3, #0]
   14370:	b2db      	uxtb	r3, r3
   14372:	2b4e      	cmp	r3, #78	; 0x4e
   14374:	d004      	beq.n	14380 <endCall+0x58>
   14376:	4b63      	ldr	r3, [pc, #396]	; (14504 <endCall+0x1dc>)
   14378:	781b      	ldrb	r3, [r3, #0]
   1437a:	b2db      	uxtb	r3, r3
   1437c:	2b52      	cmp	r3, #82	; 0x52
   1437e:	d10d      	bne.n	1439c <endCall+0x74>
   14380:	4b61      	ldr	r3, [pc, #388]	; (14508 <endCall+0x1e0>)
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	b2db      	uxtb	r3, r3
   14386:	2b4f      	cmp	r3, #79	; 0x4f
   14388:	d108      	bne.n	1439c <endCall+0x74>
   1438a:	4b60      	ldr	r3, [pc, #384]	; (1450c <endCall+0x1e4>)
   1438c:	781b      	ldrb	r3, [r3, #0]
   1438e:	2201      	movs	r2, #1
   14390:	4053      	eors	r3, r2
   14392:	b2db      	uxtb	r3, r3
   14394:	2b00      	cmp	r3, #0
   14396:	d001      	beq.n	1439c <endCall+0x74>
   14398:	2301      	movs	r3, #1
   1439a:	e000      	b.n	1439e <endCall+0x76>
   1439c:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1439e:	1c1a      	adds	r2, r3, #0
   143a0:	2301      	movs	r3, #1
   143a2:	4013      	ands	r3, r2
   143a4:	b2db      	uxtb	r3, r3
   143a6:	e015      	b.n	143d4 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   143a8:	4b56      	ldr	r3, [pc, #344]	; (14504 <endCall+0x1dc>)
   143aa:	781b      	ldrb	r3, [r3, #0]
   143ac:	b2db      	uxtb	r3, r3
   143ae:	2b4e      	cmp	r3, #78	; 0x4e
   143b0:	d004      	beq.n	143bc <endCall+0x94>
   143b2:	4b54      	ldr	r3, [pc, #336]	; (14504 <endCall+0x1dc>)
   143b4:	781b      	ldrb	r3, [r3, #0]
   143b6:	b2db      	uxtb	r3, r3
   143b8:	2b52      	cmp	r3, #82	; 0x52
   143ba:	d106      	bne.n	143ca <endCall+0xa2>
   143bc:	4b52      	ldr	r3, [pc, #328]	; (14508 <endCall+0x1e0>)
   143be:	781b      	ldrb	r3, [r3, #0]
   143c0:	b2db      	uxtb	r3, r3
   143c2:	2b4f      	cmp	r3, #79	; 0x4f
   143c4:	d101      	bne.n	143ca <endCall+0xa2>
   143c6:	2301      	movs	r3, #1
   143c8:	e000      	b.n	143cc <endCall+0xa4>
   143ca:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   143cc:	1c1a      	adds	r2, r3, #0
   143ce:	2301      	movs	r3, #1
   143d0:	4013      	ands	r3, r2
   143d2:	b2db      	uxtb	r3, r3
   143d4:	2b00      	cmp	r3, #0
   143d6:	d021      	beq.n	1441c <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   143d8:	4b4d      	ldr	r3, [pc, #308]	; (14510 <endCall+0x1e8>)
   143da:	781b      	ldrb	r3, [r3, #0]
   143dc:	2b00      	cmp	r3, #0
   143de:	d11d      	bne.n	1441c <endCall+0xf4>
   143e0:	4b4c      	ldr	r3, [pc, #304]	; (14514 <endCall+0x1ec>)
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	2201      	movs	r2, #1
   143e6:	4053      	eors	r3, r2
   143e8:	b2db      	uxtb	r3, r3
   143ea:	2b00      	cmp	r3, #0
   143ec:	d016      	beq.n	1441c <endCall+0xf4>
   143ee:	4b4a      	ldr	r3, [pc, #296]	; (14518 <endCall+0x1f0>)
   143f0:	795b      	ldrb	r3, [r3, #5]
   143f2:	2b54      	cmp	r3, #84	; 0x54
   143f4:	d112      	bne.n	1441c <endCall+0xf4>
   143f6:	4b49      	ldr	r3, [pc, #292]	; (1451c <endCall+0x1f4>)
   143f8:	789b      	ldrb	r3, [r3, #2]
   143fa:	2b01      	cmp	r3, #1
   143fc:	d90e      	bls.n	1441c <endCall+0xf4>
		{
			retries=1;
   143fe:	4b44      	ldr	r3, [pc, #272]	; (14510 <endCall+0x1e8>)
   14400:	2201      	movs	r2, #1
   14402:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14404:	4b46      	ldr	r3, [pc, #280]	; (14520 <endCall+0x1f8>)
   14406:	2201      	movs	r2, #1
   14408:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   1440a:	4b46      	ldr	r3, [pc, #280]	; (14524 <endCall+0x1fc>)
   1440c:	4798      	blx	r3
   1440e:	0002      	movs	r2, r0
   14410:	4b45      	ldr	r3, [pc, #276]	; (14528 <endCall+0x200>)
   14412:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   14414:	4b45      	ldr	r3, [pc, #276]	; (1452c <endCall+0x204>)
   14416:	781a      	ldrb	r2, [r3, #0]
   14418:	4b45      	ldr	r3, [pc, #276]	; (14530 <endCall+0x208>)
   1441a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1441c:	4b37      	ldr	r3, [pc, #220]	; (144fc <endCall+0x1d4>)
   1441e:	78db      	ldrb	r3, [r3, #3]
   14420:	2b00      	cmp	r3, #0
   14422:	d047      	beq.n	144b4 <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   14424:	4b37      	ldr	r3, [pc, #220]	; (14504 <endCall+0x1dc>)
   14426:	781b      	ldrb	r3, [r3, #0]
   14428:	b2db      	uxtb	r3, r3
   1442a:	2b49      	cmp	r3, #73	; 0x49
   1442c:	d004      	beq.n	14438 <endCall+0x110>
   1442e:	4b35      	ldr	r3, [pc, #212]	; (14504 <endCall+0x1dc>)
   14430:	781b      	ldrb	r3, [r3, #0]
   14432:	b2db      	uxtb	r3, r3
   14434:	2b52      	cmp	r3, #82	; 0x52
   14436:	d137      	bne.n	144a8 <endCall+0x180>
   14438:	4b33      	ldr	r3, [pc, #204]	; (14508 <endCall+0x1e0>)
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	b2db      	uxtb	r3, r3
   1443e:	2b4f      	cmp	r3, #79	; 0x4f
   14440:	d132      	bne.n	144a8 <endCall+0x180>
   14442:	4b32      	ldr	r3, [pc, #200]	; (1450c <endCall+0x1e4>)
   14444:	781b      	ldrb	r3, [r3, #0]
   14446:	2b00      	cmp	r3, #0
   14448:	d02e      	beq.n	144a8 <endCall+0x180>
   1444a:	4b3a      	ldr	r3, [pc, #232]	; (14534 <endCall+0x20c>)
   1444c:	795b      	ldrb	r3, [r3, #5]
   1444e:	2b00      	cmp	r3, #0
   14450:	d02a      	beq.n	144a8 <endCall+0x180>
		{
			m2mEventCalls++;
   14452:	4b39      	ldr	r3, [pc, #228]	; (14538 <endCall+0x210>)
   14454:	781b      	ldrb	r3, [r3, #0]
   14456:	3301      	adds	r3, #1
   14458:	b2da      	uxtb	r2, r3
   1445a:	4b37      	ldr	r3, [pc, #220]	; (14538 <endCall+0x210>)
   1445c:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   1445e:	4b37      	ldr	r3, [pc, #220]	; (1453c <endCall+0x214>)
   14460:	781b      	ldrb	r3, [r3, #0]
   14462:	2b00      	cmp	r3, #0
   14464:	d006      	beq.n	14474 <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   14466:	4b36      	ldr	r3, [pc, #216]	; (14540 <endCall+0x218>)
   14468:	781b      	ldrb	r3, [r3, #0]
   1446a:	2100      	movs	r1, #0
   1446c:	0018      	movs	r0, r3
   1446e:	4b35      	ldr	r3, [pc, #212]	; (14544 <endCall+0x21c>)
   14470:	4798      	blx	r3
   14472:	e016      	b.n	144a2 <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
   14474:	4b30      	ldr	r3, [pc, #192]	; (14538 <endCall+0x210>)
   14476:	781b      	ldrb	r3, [r3, #0]
   14478:	2b01      	cmp	r3, #1
   1447a:	d80c      	bhi.n	14496 <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
   1447c:	4b29      	ldr	r3, [pc, #164]	; (14524 <endCall+0x1fc>)
   1447e:	4798      	blx	r3
   14480:	0002      	movs	r2, r0
   14482:	4b29      	ldr	r3, [pc, #164]	; (14528 <endCall+0x200>)
   14484:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   14486:	4b2e      	ldr	r3, [pc, #184]	; (14540 <endCall+0x218>)
   14488:	781a      	ldrb	r2, [r3, #0]
   1448a:	4b29      	ldr	r3, [pc, #164]	; (14530 <endCall+0x208>)
   1448c:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   1448e:	4b2e      	ldr	r3, [pc, #184]	; (14548 <endCall+0x220>)
   14490:	2201      	movs	r2, #1
   14492:	701a      	strb	r2, [r3, #0]
   14494:	e005      	b.n	144a2 <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   14496:	4b2a      	ldr	r3, [pc, #168]	; (14540 <endCall+0x218>)
   14498:	781b      	ldrb	r3, [r3, #0]
   1449a:	2103      	movs	r1, #3
   1449c:	0018      	movs	r0, r3
   1449e:	4b29      	ldr	r3, [pc, #164]	; (14544 <endCall+0x21c>)
   144a0:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   144a2:	4b1a      	ldr	r3, [pc, #104]	; (1450c <endCall+0x1e4>)
   144a4:	2200      	movs	r2, #0
   144a6:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   144a8:	4b28      	ldr	r3, [pc, #160]	; (1454c <endCall+0x224>)
   144aa:	2200      	movs	r2, #0
   144ac:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   144ae:	4b23      	ldr	r3, [pc, #140]	; (1453c <endCall+0x214>)
   144b0:	2200      	movs	r2, #0
   144b2:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   144b4:	4b17      	ldr	r3, [pc, #92]	; (14514 <endCall+0x1ec>)
   144b6:	2200      	movs	r2, #0
   144b8:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   144ba:	4b12      	ldr	r3, [pc, #72]	; (14504 <endCall+0x1dc>)
   144bc:	224e      	movs	r2, #78	; 0x4e
   144be:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   144c0:	4b11      	ldr	r3, [pc, #68]	; (14508 <endCall+0x1e0>)
   144c2:	224e      	movs	r2, #78	; 0x4e
   144c4:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   144c6:	4b22      	ldr	r3, [pc, #136]	; (14550 <endCall+0x228>)
   144c8:	2200      	movs	r2, #0
   144ca:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   144cc:	4b15      	ldr	r3, [pc, #84]	; (14524 <endCall+0x1fc>)
   144ce:	4798      	blx	r3
   144d0:	0002      	movs	r2, r0
   144d2:	4b20      	ldr	r3, [pc, #128]	; (14554 <endCall+0x22c>)
   144d4:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   144d6:	4b20      	ldr	r3, [pc, #128]	; (14558 <endCall+0x230>)
   144d8:	2200      	movs	r2, #0
   144da:	701a      	strb	r2, [r3, #0]
}
   144dc:	46c0      	nop			; (mov r8, r8)
   144de:	46bd      	mov	sp, r7
   144e0:	bd80      	pop	{r7, pc}
   144e2:	46c0      	nop			; (mov r8, r8)
   144e4:	200006d4 	.word	0x200006d4
   144e8:	20000790 	.word	0x20000790
   144ec:	00013019 	.word	0x00013019
   144f0:	0001cb31 	.word	0x0001cb31
   144f4:	0001fee9 	.word	0x0001fee9
   144f8:	20000738 	.word	0x20000738
   144fc:	20000628 	.word	0x20000628
   14500:	20000807 	.word	0x20000807
   14504:	200007d4 	.word	0x200007d4
   14508:	20000783 	.word	0x20000783
   1450c:	20000737 	.word	0x20000737
   14510:	200006d5 	.word	0x200006d5
   14514:	20000792 	.word	0x20000792
   14518:	20000650 	.word	0x20000650
   1451c:	20000610 	.word	0x20000610
   14520:	200007ca 	.word	0x200007ca
   14524:	0002024d 	.word	0x0002024d
   14528:	200007ec 	.word	0x200007ec
   1452c:	20000757 	.word	0x20000757
   14530:	20000769 	.word	0x20000769
   14534:	20000554 	.word	0x20000554
   14538:	200007cb 	.word	0x200007cb
   1453c:	2000071c 	.word	0x2000071c
   14540:	2000071d 	.word	0x2000071d
   14544:	0001b9c9 	.word	0x0001b9c9
   14548:	20000782 	.word	0x20000782
   1454c:	200007c8 	.word	0x200007c8
   14550:	2000078c 	.word	0x2000078c
   14554:	2000080c 	.word	0x2000080c
   14558:	20000766 	.word	0x20000766

0001455c <makeCall>:


void makeCall(void)
{
   1455c:	b580      	push	{r7, lr}
   1455e:	b086      	sub	sp, #24
   14560:	af00      	add	r7, sp, #0
	inCall=true;
   14562:	4b20      	ldr	r3, [pc, #128]	; (145e4 <makeCall+0x88>)
   14564:	2201      	movs	r2, #1
   14566:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14568:	1d3b      	adds	r3, r7, #4
   1456a:	0018      	movs	r0, r3
   1456c:	2314      	movs	r3, #20
   1456e:	001a      	movs	r2, r3
   14570:	2100      	movs	r1, #0
   14572:	4b1d      	ldr	r3, [pc, #116]	; (145e8 <makeCall+0x8c>)
   14574:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   14576:	4b1d      	ldr	r3, [pc, #116]	; (145ec <makeCall+0x90>)
   14578:	795b      	ldrb	r3, [r3, #5]
   1457a:	2b00      	cmp	r3, #0
   1457c:	d008      	beq.n	14590 <makeCall+0x34>
   1457e:	4b1c      	ldr	r3, [pc, #112]	; (145f0 <makeCall+0x94>)
   14580:	781b      	ldrb	r3, [r3, #0]
   14582:	2b00      	cmp	r3, #0
   14584:	d004      	beq.n	14590 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   14586:	1d3b      	adds	r3, r7, #4
   14588:	0018      	movs	r0, r3
   1458a:	4b1a      	ldr	r3, [pc, #104]	; (145f4 <makeCall+0x98>)
   1458c:	4798      	blx	r3
   1458e:	e00f      	b.n	145b0 <makeCall+0x54>
	}
	else
	{
		if(retries)
   14590:	4b19      	ldr	r3, [pc, #100]	; (145f8 <makeCall+0x9c>)
   14592:	781b      	ldrb	r3, [r3, #0]
   14594:	2b00      	cmp	r3, #0
   14596:	d007      	beq.n	145a8 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14598:	4b18      	ldr	r3, [pc, #96]	; (145fc <makeCall+0xa0>)
   1459a:	791a      	ldrb	r2, [r3, #4]
   1459c:	1d3b      	adds	r3, r7, #4
   1459e:	0011      	movs	r1, r2
   145a0:	0018      	movs	r0, r3
   145a2:	4b17      	ldr	r3, [pc, #92]	; (14600 <makeCall+0xa4>)
   145a4:	4798      	blx	r3
   145a6:	e003      	b.n	145b0 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   145a8:	1d3b      	adds	r3, r7, #4
   145aa:	0018      	movs	r0, r3
   145ac:	4b15      	ldr	r3, [pc, #84]	; (14604 <makeCall+0xa8>)
   145ae:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   145b0:	1d3b      	adds	r3, r7, #4
   145b2:	0018      	movs	r0, r3
   145b4:	4b14      	ldr	r3, [pc, #80]	; (14608 <makeCall+0xac>)
   145b6:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   145b8:	1d3b      	adds	r3, r7, #4
   145ba:	2200      	movs	r2, #0
   145bc:	0019      	movs	r1, r3
   145be:	2003      	movs	r0, #3
   145c0:	4b12      	ldr	r3, [pc, #72]	; (1460c <makeCall+0xb0>)
   145c2:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   145c4:	4b12      	ldr	r3, [pc, #72]	; (14610 <makeCall+0xb4>)
   145c6:	4798      	blx	r3
   145c8:	0002      	movs	r2, r0
   145ca:	4b12      	ldr	r3, [pc, #72]	; (14614 <makeCall+0xb8>)
   145cc:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   145ce:	4b12      	ldr	r3, [pc, #72]	; (14618 <makeCall+0xbc>)
   145d0:	2252      	movs	r2, #82	; 0x52
   145d2:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   145d4:	4b11      	ldr	r3, [pc, #68]	; (1461c <makeCall+0xc0>)
   145d6:	224f      	movs	r2, #79	; 0x4f
   145d8:	701a      	strb	r2, [r3, #0]
}
   145da:	46c0      	nop			; (mov r8, r8)
   145dc:	46bd      	mov	sp, r7
   145de:	b006      	add	sp, #24
   145e0:	bd80      	pop	{r7, pc}
   145e2:	46c0      	nop			; (mov r8, r8)
   145e4:	20000790 	.word	0x20000790
   145e8:	00028e13 	.word	0x00028e13
   145ec:	20000554 	.word	0x20000554
   145f0:	20000737 	.word	0x20000737
   145f4:	00010afd 	.word	0x00010afd
   145f8:	200006d5 	.word	0x200006d5
   145fc:	20000610 	.word	0x20000610
   14600:	0001090d 	.word	0x0001090d
   14604:	00010d15 	.word	0x00010d15
   14608:	00012e55 	.word	0x00012e55
   1460c:	0001cb31 	.word	0x0001cb31
   14610:	0002024d 	.word	0x0002024d
   14614:	20000810 	.word	0x20000810
   14618:	200007d4 	.word	0x200007d4
   1461c:	20000783 	.word	0x20000783

00014620 <acceptCall>:

void acceptCall(void)
{
   14620:	b580      	push	{r7, lr}
   14622:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   14624:	4b0a      	ldr	r3, [pc, #40]	; (14650 <acceptCall+0x30>)
   14626:	2200      	movs	r2, #0
   14628:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   1462a:	4b0a      	ldr	r3, [pc, #40]	; (14654 <acceptCall+0x34>)
   1462c:	2201      	movs	r2, #1
   1462e:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   14630:	4b09      	ldr	r3, [pc, #36]	; (14658 <acceptCall+0x38>)
   14632:	4798      	blx	r3
	currentStatus = 'I';
   14634:	4b09      	ldr	r3, [pc, #36]	; (1465c <acceptCall+0x3c>)
   14636:	2249      	movs	r2, #73	; 0x49
   14638:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   1463a:	4b09      	ldr	r3, [pc, #36]	; (14660 <acceptCall+0x40>)
   1463c:	2249      	movs	r2, #73	; 0x49
   1463e:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   14640:	2101      	movs	r1, #1
   14642:	204d      	movs	r0, #77	; 0x4d
   14644:	4b07      	ldr	r3, [pc, #28]	; (14664 <acceptCall+0x44>)
   14646:	4798      	blx	r3
	//displayInIncomingCall
}
   14648:	46c0      	nop			; (mov r8, r8)
   1464a:	46bd      	mov	sp, r7
   1464c:	bd80      	pop	{r7, pc}
   1464e:	46c0      	nop			; (mov r8, r8)
   14650:	2000078c 	.word	0x2000078c
   14654:	20000792 	.word	0x20000792
   14658:	00012eed 	.word	0x00012eed
   1465c:	200007d4 	.word	0x200007d4
   14660:	20000783 	.word	0x20000783
   14664:	00014669 	.word	0x00014669

00014668 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14668:	b580      	push	{r7, lr}
   1466a:	b082      	sub	sp, #8
   1466c:	af00      	add	r7, sp, #0
   1466e:	0002      	movs	r2, r0
   14670:	1dfb      	adds	r3, r7, #7
   14672:	701a      	strb	r2, [r3, #0]
   14674:	1dbb      	adds	r3, r7, #6
   14676:	1c0a      	adds	r2, r1, #0
   14678:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   1467a:	4b14      	ldr	r3, [pc, #80]	; (146cc <playSound+0x64>)
   1467c:	4798      	blx	r3
	bplaySound = true;
   1467e:	4b14      	ldr	r3, [pc, #80]	; (146d0 <playSound+0x68>)
   14680:	2201      	movs	r2, #1
   14682:	701a      	strb	r2, [r3, #0]
	if (newAction)
   14684:	1dbb      	adds	r3, r7, #6
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	2b00      	cmp	r3, #0
   1468a:	d016      	beq.n	146ba <playSound+0x52>
	{
		maxPlayingFiles=1;
   1468c:	4b11      	ldr	r3, [pc, #68]	; (146d4 <playSound+0x6c>)
   1468e:	2201      	movs	r2, #1
   14690:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   14692:	4b11      	ldr	r3, [pc, #68]	; (146d8 <playSound+0x70>)
   14694:	2200      	movs	r2, #0
   14696:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   14698:	4b0f      	ldr	r3, [pc, #60]	; (146d8 <playSound+0x70>)
   1469a:	781b      	ldrb	r3, [r3, #0]
   1469c:	0019      	movs	r1, r3
   1469e:	4b0f      	ldr	r3, [pc, #60]	; (146dc <playSound+0x74>)
   146a0:	1dfa      	adds	r2, r7, #7
   146a2:	7812      	ldrb	r2, [r2, #0]
   146a4:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   146a6:	4b0c      	ldr	r3, [pc, #48]	; (146d8 <playSound+0x70>)
   146a8:	781b      	ldrb	r3, [r3, #0]
   146aa:	3301      	adds	r3, #1
   146ac:	4a0b      	ldr	r2, [pc, #44]	; (146dc <playSound+0x74>)
   146ae:	2100      	movs	r1, #0
   146b0:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   146b2:	4b0b      	ldr	r3, [pc, #44]	; (146e0 <playSound+0x78>)
   146b4:	1dfa      	adds	r2, r7, #7
   146b6:	7812      	ldrb	r2, [r2, #0]
   146b8:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   146ba:	4b0a      	ldr	r3, [pc, #40]	; (146e4 <playSound+0x7c>)
   146bc:	1dfa      	adds	r2, r7, #7
   146be:	7812      	ldrb	r2, [r2, #0]
   146c0:	701a      	strb	r2, [r3, #0]
}
   146c2:	46c0      	nop			; (mov r8, r8)
   146c4:	46bd      	mov	sp, r7
   146c6:	b002      	add	sp, #8
   146c8:	bd80      	pop	{r7, pc}
   146ca:	46c0      	nop			; (mov r8, r8)
   146cc:	00013079 	.word	0x00013079
   146d0:	2000085d 	.word	0x2000085d
   146d4:	200007cc 	.word	0x200007cc
   146d8:	200007bc 	.word	0x200007bc
   146dc:	20000740 	.word	0x20000740
   146e0:	20000757 	.word	0x20000757
   146e4:	200007bb 	.word	0x200007bb

000146e8 <playSoundElligible>:

bool playSoundElligible(void)
{
   146e8:	b580      	push	{r7, lr}
   146ea:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   146ec:	4b0d      	ldr	r3, [pc, #52]	; (14724 <playSoundElligible+0x3c>)
   146ee:	781b      	ldrb	r3, [r3, #0]
   146f0:	2b00      	cmp	r3, #0
   146f2:	d00e      	beq.n	14712 <playSoundElligible+0x2a>
   146f4:	4b0c      	ldr	r3, [pc, #48]	; (14728 <playSoundElligible+0x40>)
   146f6:	4798      	blx	r3
   146f8:	0002      	movs	r2, r0
   146fa:	4b0c      	ldr	r3, [pc, #48]	; (1472c <playSoundElligible+0x44>)
   146fc:	681b      	ldr	r3, [r3, #0]
   146fe:	1ad3      	subs	r3, r2, r3
   14700:	4a0b      	ldr	r2, [pc, #44]	; (14730 <playSoundElligible+0x48>)
   14702:	7812      	ldrb	r2, [r2, #0]
   14704:	0011      	movs	r1, r2
   14706:	2264      	movs	r2, #100	; 0x64
   14708:	434a      	muls	r2, r1
   1470a:	4293      	cmp	r3, r2
   1470c:	d901      	bls.n	14712 <playSoundElligible+0x2a>
   1470e:	2301      	movs	r3, #1
   14710:	e000      	b.n	14714 <playSoundElligible+0x2c>
   14712:	2300      	movs	r3, #0
   14714:	1c1a      	adds	r2, r3, #0
   14716:	2301      	movs	r3, #1
   14718:	4013      	ands	r3, r2
   1471a:	b2db      	uxtb	r3, r3
}
   1471c:	0018      	movs	r0, r3
   1471e:	46bd      	mov	sp, r7
   14720:	bd80      	pop	{r7, pc}
   14722:	46c0      	nop			; (mov r8, r8)
   14724:	2000085d 	.word	0x2000085d
   14728:	0002024d 	.word	0x0002024d
   1472c:	20000838 	.word	0x20000838
   14730:	200007cd 	.word	0x200007cd

00014734 <triggerPlaySound>:

void triggerPlaySound(void)
{
   14734:	b580      	push	{r7, lr}
   14736:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14738:	4b0b      	ldr	r3, [pc, #44]	; (14768 <triggerPlaySound+0x34>)
   1473a:	781b      	ldrb	r3, [r3, #0]
   1473c:	2b01      	cmp	r3, #1
   1473e:	d906      	bls.n	1474e <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   14740:	4b0a      	ldr	r3, [pc, #40]	; (1476c <triggerPlaySound+0x38>)
   14742:	781b      	ldrb	r3, [r3, #0]
   14744:	2100      	movs	r1, #0
   14746:	0018      	movs	r0, r3
   14748:	4b09      	ldr	r3, [pc, #36]	; (14770 <triggerPlaySound+0x3c>)
   1474a:	4798      	blx	r3
   1474c:	e005      	b.n	1475a <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   1474e:	4b07      	ldr	r3, [pc, #28]	; (1476c <triggerPlaySound+0x38>)
   14750:	781b      	ldrb	r3, [r3, #0]
   14752:	2101      	movs	r1, #1
   14754:	0018      	movs	r0, r3
   14756:	4b06      	ldr	r3, [pc, #24]	; (14770 <triggerPlaySound+0x3c>)
   14758:	4798      	blx	r3
	}
	bplaySound = false;
   1475a:	4b06      	ldr	r3, [pc, #24]	; (14774 <triggerPlaySound+0x40>)
   1475c:	2200      	movs	r2, #0
   1475e:	701a      	strb	r2, [r3, #0]
}
   14760:	46c0      	nop			; (mov r8, r8)
   14762:	46bd      	mov	sp, r7
   14764:	bd80      	pop	{r7, pc}
   14766:	46c0      	nop			; (mov r8, r8)
   14768:	200007cc 	.word	0x200007cc
   1476c:	200007bb 	.word	0x200007bb
   14770:	000130a9 	.word	0x000130a9
   14774:	2000085d 	.word	0x2000085d

00014778 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14778:	b580      	push	{r7, lr}
   1477a:	b082      	sub	sp, #8
   1477c:	af00      	add	r7, sp, #0
   1477e:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   14780:	4b18      	ldr	r3, [pc, #96]	; (147e4 <playSoundAgain+0x6c>)
   14782:	781b      	ldrb	r3, [r3, #0]
   14784:	2201      	movs	r2, #1
   14786:	4053      	eors	r3, r2
   14788:	b2db      	uxtb	r3, r3
   1478a:	2b00      	cmp	r3, #0
   1478c:	d025      	beq.n	147da <playSoundAgain+0x62>
   1478e:	687b      	ldr	r3, [r7, #4]
   14790:	0018      	movs	r0, r3
   14792:	4b15      	ldr	r3, [pc, #84]	; (147e8 <playSoundAgain+0x70>)
   14794:	4798      	blx	r3
   14796:	1e03      	subs	r3, r0, #0
   14798:	d01f      	beq.n	147da <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
   1479a:	4b14      	ldr	r3, [pc, #80]	; (147ec <playSoundAgain+0x74>)
   1479c:	781b      	ldrb	r3, [r3, #0]
   1479e:	2b01      	cmp	r3, #1
   147a0:	d91b      	bls.n	147da <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   147a2:	4b13      	ldr	r3, [pc, #76]	; (147f0 <playSoundAgain+0x78>)
   147a4:	781b      	ldrb	r3, [r3, #0]
   147a6:	001a      	movs	r2, r3
   147a8:	4b10      	ldr	r3, [pc, #64]	; (147ec <playSoundAgain+0x74>)
   147aa:	781b      	ldrb	r3, [r3, #0]
   147ac:	3b01      	subs	r3, #1
   147ae:	429a      	cmp	r2, r3
   147b0:	da0f      	bge.n	147d2 <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   147b2:	4b0f      	ldr	r3, [pc, #60]	; (147f0 <playSoundAgain+0x78>)
   147b4:	781b      	ldrb	r3, [r3, #0]
   147b6:	3301      	adds	r3, #1
   147b8:	b2da      	uxtb	r2, r3
   147ba:	4b0d      	ldr	r3, [pc, #52]	; (147f0 <playSoundAgain+0x78>)
   147bc:	701a      	strb	r2, [r3, #0]
   147be:	4b0c      	ldr	r3, [pc, #48]	; (147f0 <playSoundAgain+0x78>)
   147c0:	781b      	ldrb	r3, [r3, #0]
   147c2:	001a      	movs	r2, r3
   147c4:	4b0b      	ldr	r3, [pc, #44]	; (147f4 <playSoundAgain+0x7c>)
   147c6:	5c9b      	ldrb	r3, [r3, r2]
   147c8:	2100      	movs	r1, #0
   147ca:	0018      	movs	r0, r3
   147cc:	4b0a      	ldr	r3, [pc, #40]	; (147f8 <playSoundAgain+0x80>)
   147ce:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
   147d0:	e003      	b.n	147da <playSoundAgain+0x62>
				playSound('M',true);
   147d2:	2101      	movs	r1, #1
   147d4:	204d      	movs	r0, #77	; 0x4d
   147d6:	4b08      	ldr	r3, [pc, #32]	; (147f8 <playSoundAgain+0x80>)
   147d8:	4798      	blx	r3
}
   147da:	46c0      	nop			; (mov r8, r8)
   147dc:	46bd      	mov	sp, r7
   147de:	b002      	add	sp, #8
   147e0:	bd80      	pop	{r7, pc}
   147e2:	46c0      	nop			; (mov r8, r8)
   147e4:	2000085d 	.word	0x2000085d
   147e8:	000136bd 	.word	0x000136bd
   147ec:	200007cc 	.word	0x200007cc
   147f0:	200007bc 	.word	0x200007bc
   147f4:	20000740 	.word	0x20000740
   147f8:	00014669 	.word	0x00014669

000147fc <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   147fc:	b580      	push	{r7, lr}
   147fe:	b082      	sub	sp, #8
   14800:	af00      	add	r7, sp, #0
   14802:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   14804:	687b      	ldr	r3, [r7, #4]
   14806:	0018      	movs	r0, r3
   14808:	4b14      	ldr	r3, [pc, #80]	; (1485c <playRepeatedFiles+0x60>)
   1480a:	4798      	blx	r3
   1480c:	0003      	movs	r3, r0
   1480e:	2b0e      	cmp	r3, #14
   14810:	d81f      	bhi.n	14852 <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   14812:	4b13      	ldr	r3, [pc, #76]	; (14860 <playRepeatedFiles+0x64>)
   14814:	2200      	movs	r2, #0
   14816:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14818:	687b      	ldr	r3, [r7, #4]
   1481a:	0018      	movs	r0, r3
   1481c:	4b0f      	ldr	r3, [pc, #60]	; (1485c <playRepeatedFiles+0x60>)
   1481e:	4798      	blx	r3
   14820:	0003      	movs	r3, r0
   14822:	b2da      	uxtb	r2, r3
   14824:	4b0f      	ldr	r3, [pc, #60]	; (14864 <playRepeatedFiles+0x68>)
   14826:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14828:	687a      	ldr	r2, [r7, #4]
   1482a:	4b0f      	ldr	r3, [pc, #60]	; (14868 <playRepeatedFiles+0x6c>)
   1482c:	0011      	movs	r1, r2
   1482e:	0018      	movs	r0, r3
   14830:	4b0e      	ldr	r3, [pc, #56]	; (1486c <playRepeatedFiles+0x70>)
   14832:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14834:	4b0e      	ldr	r3, [pc, #56]	; (14870 <playRepeatedFiles+0x74>)
   14836:	4798      	blx	r3
   14838:	0002      	movs	r2, r0
   1483a:	4b0e      	ldr	r3, [pc, #56]	; (14874 <playRepeatedFiles+0x78>)
   1483c:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   1483e:	4b08      	ldr	r3, [pc, #32]	; (14860 <playRepeatedFiles+0x64>)
   14840:	781b      	ldrb	r3, [r3, #0]
   14842:	001a      	movs	r2, r3
   14844:	4b08      	ldr	r3, [pc, #32]	; (14868 <playRepeatedFiles+0x6c>)
   14846:	5c9a      	ldrb	r2, [r3, r2]
   14848:	4b0b      	ldr	r3, [pc, #44]	; (14878 <playRepeatedFiles+0x7c>)
   1484a:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   1484c:	4b0b      	ldr	r3, [pc, #44]	; (1487c <playRepeatedFiles+0x80>)
   1484e:	2201      	movs	r2, #1
   14850:	701a      	strb	r2, [r3, #0]
	}
}
   14852:	46c0      	nop			; (mov r8, r8)
   14854:	46bd      	mov	sp, r7
   14856:	b002      	add	sp, #8
   14858:	bd80      	pop	{r7, pc}
   1485a:	46c0      	nop			; (mov r8, r8)
   1485c:	000290a3 	.word	0x000290a3
   14860:	200007bc 	.word	0x200007bc
   14864:	200007cc 	.word	0x200007cc
   14868:	20000740 	.word	0x20000740
   1486c:	00029093 	.word	0x00029093
   14870:	0002024d 	.word	0x0002024d
   14874:	20000838 	.word	0x20000838
   14878:	200007bb 	.word	0x200007bb
   1487c:	2000085d 	.word	0x2000085d

00014880 <callTimerExpire>:

bool callTimerExpire(void)
{
   14880:	b580      	push	{r7, lr}
   14882:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14884:	4b09      	ldr	r3, [pc, #36]	; (148ac <callTimerExpire+0x2c>)
   14886:	4798      	blx	r3
   14888:	0002      	movs	r2, r0
   1488a:	4b09      	ldr	r3, [pc, #36]	; (148b0 <callTimerExpire+0x30>)
   1488c:	681b      	ldr	r3, [r3, #0]
   1488e:	1ad2      	subs	r2, r2, r3
   14890:	4b08      	ldr	r3, [pc, #32]	; (148b4 <callTimerExpire+0x34>)
   14892:	881b      	ldrh	r3, [r3, #0]
   14894:	0019      	movs	r1, r3
   14896:	2364      	movs	r3, #100	; 0x64
   14898:	434b      	muls	r3, r1
   1489a:	0019      	movs	r1, r3
   1489c:	2300      	movs	r3, #0
   1489e:	428a      	cmp	r2, r1
   148a0:	415b      	adcs	r3, r3
   148a2:	b2db      	uxtb	r3, r3
}
   148a4:	0018      	movs	r0, r3
   148a6:	46bd      	mov	sp, r7
   148a8:	bd80      	pop	{r7, pc}
   148aa:	46c0      	nop			; (mov r8, r8)
   148ac:	0002024d 	.word	0x0002024d
   148b0:	20000810 	.word	0x20000810
   148b4:	20000758 	.word	0x20000758

000148b8 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   148b8:	b580      	push	{r7, lr}
   148ba:	b082      	sub	sp, #8
   148bc:	af00      	add	r7, sp, #0
   148be:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   148c0:	4a16      	ldr	r2, [pc, #88]	; (1491c <OutGoingcallState+0x64>)
   148c2:	687b      	ldr	r3, [r7, #4]
   148c4:	0011      	movs	r1, r2
   148c6:	0018      	movs	r0, r3
   148c8:	4b15      	ldr	r3, [pc, #84]	; (14920 <OutGoingcallState+0x68>)
   148ca:	4798      	blx	r3
   148cc:	1e03      	subs	r3, r0, #0
   148ce:	d001      	beq.n	148d4 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   148d0:	2344      	movs	r3, #68	; 0x44
   148d2:	e01e      	b.n	14912 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   148d4:	4a13      	ldr	r2, [pc, #76]	; (14924 <OutGoingcallState+0x6c>)
   148d6:	687b      	ldr	r3, [r7, #4]
   148d8:	0011      	movs	r1, r2
   148da:	0018      	movs	r0, r3
   148dc:	4b10      	ldr	r3, [pc, #64]	; (14920 <OutGoingcallState+0x68>)
   148de:	4798      	blx	r3
   148e0:	1e03      	subs	r3, r0, #0
   148e2:	d001      	beq.n	148e8 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   148e4:	2352      	movs	r3, #82	; 0x52
   148e6:	e014      	b.n	14912 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   148e8:	4a0f      	ldr	r2, [pc, #60]	; (14928 <OutGoingcallState+0x70>)
   148ea:	687b      	ldr	r3, [r7, #4]
   148ec:	0011      	movs	r1, r2
   148ee:	0018      	movs	r0, r3
   148f0:	4b0b      	ldr	r3, [pc, #44]	; (14920 <OutGoingcallState+0x68>)
   148f2:	4798      	blx	r3
   148f4:	1e03      	subs	r3, r0, #0
   148f6:	d001      	beq.n	148fc <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   148f8:	2349      	movs	r3, #73	; 0x49
   148fa:	e00a      	b.n	14912 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   148fc:	4a0b      	ldr	r2, [pc, #44]	; (1492c <OutGoingcallState+0x74>)
   148fe:	687b      	ldr	r3, [r7, #4]
   14900:	0011      	movs	r1, r2
   14902:	0018      	movs	r0, r3
   14904:	4b06      	ldr	r3, [pc, #24]	; (14920 <OutGoingcallState+0x68>)
   14906:	4798      	blx	r3
   14908:	1e03      	subs	r3, r0, #0
   1490a:	d001      	beq.n	14910 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   1490c:	2345      	movs	r3, #69	; 0x45
   1490e:	e000      	b.n	14912 <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14910:	234e      	movs	r3, #78	; 0x4e
	}
}
   14912:	0018      	movs	r0, r3
   14914:	46bd      	mov	sp, r7
   14916:	b002      	add	sp, #8
   14918:	bd80      	pop	{r7, pc}
   1491a:	46c0      	nop			; (mov r8, r8)
   1491c:	0002a00c 	.word	0x0002a00c
   14920:	000290d3 	.word	0x000290d3
   14924:	0002a01c 	.word	0x0002a01c
   14928:	0002a02c 	.word	0x0002a02c
   1492c:	0002a03c 	.word	0x0002a03c

00014930 <registerEvent>:

bool registerEvent(char eventType)
{
   14930:	b580      	push	{r7, lr}
   14932:	b082      	sub	sp, #8
   14934:	af00      	add	r7, sp, #0
   14936:	0002      	movs	r2, r0
   14938:	1dfb      	adds	r3, r7, #7
   1493a:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   1493c:	4b34      	ldr	r3, [pc, #208]	; (14a10 <registerEvent+0xe0>)
   1493e:	789b      	ldrb	r3, [r3, #2]
   14940:	2b00      	cmp	r3, #0
   14942:	d003      	beq.n	1494c <registerEvent+0x1c>
   14944:	4b33      	ldr	r3, [pc, #204]	; (14a14 <registerEvent+0xe4>)
   14946:	795b      	ldrb	r3, [r3, #5]
   14948:	2b4e      	cmp	r3, #78	; 0x4e
   1494a:	d101      	bne.n	14950 <registerEvent+0x20>
	{
		return true;
   1494c:	2301      	movs	r3, #1
   1494e:	e05b      	b.n	14a08 <registerEvent+0xd8>
	}
	if (!initialized)
   14950:	4b31      	ldr	r3, [pc, #196]	; (14a18 <registerEvent+0xe8>)
   14952:	781b      	ldrb	r3, [r3, #0]
   14954:	b2db      	uxtb	r3, r3
   14956:	2201      	movs	r2, #1
   14958:	4053      	eors	r3, r2
   1495a:	b2db      	uxtb	r3, r3
   1495c:	2b00      	cmp	r3, #0
   1495e:	d001      	beq.n	14964 <registerEvent+0x34>
	{
		return true;
   14960:	2301      	movs	r3, #1
   14962:	e051      	b.n	14a08 <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
   14964:	4b2d      	ldr	r3, [pc, #180]	; (14a1c <registerEvent+0xec>)
   14966:	781b      	ldrb	r3, [r3, #0]
   14968:	2201      	movs	r2, #1
   1496a:	4053      	eors	r3, r2
   1496c:	b2db      	uxtb	r3, r3
   1496e:	2b00      	cmp	r3, #0
   14970:	d007      	beq.n	14982 <registerEvent+0x52>
   14972:	4b2b      	ldr	r3, [pc, #172]	; (14a20 <registerEvent+0xf0>)
   14974:	781b      	ldrb	r3, [r3, #0]
   14976:	1dfa      	adds	r2, r7, #7
   14978:	7812      	ldrb	r2, [r2, #0]
   1497a:	429a      	cmp	r2, r3
   1497c:	d101      	bne.n	14982 <registerEvent+0x52>
	{
		return true;
   1497e:	2301      	movs	r3, #1
   14980:	e042      	b.n	14a08 <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14982:	4b28      	ldr	r3, [pc, #160]	; (14a24 <registerEvent+0xf4>)
   14984:	781b      	ldrb	r3, [r3, #0]
   14986:	b2db      	uxtb	r3, r3
   14988:	2b4e      	cmp	r3, #78	; 0x4e
   1498a:	d13c      	bne.n	14a06 <registerEvent+0xd6>
   1498c:	4b26      	ldr	r3, [pc, #152]	; (14a28 <registerEvent+0xf8>)
   1498e:	781b      	ldrb	r3, [r3, #0]
   14990:	b2db      	uxtb	r3, r3
   14992:	2b4e      	cmp	r3, #78	; 0x4e
   14994:	d137      	bne.n	14a06 <registerEvent+0xd6>
   14996:	4b25      	ldr	r3, [pc, #148]	; (14a2c <registerEvent+0xfc>)
   14998:	781b      	ldrb	r3, [r3, #0]
   1499a:	2b00      	cmp	r3, #0
   1499c:	d033      	beq.n	14a06 <registerEvent+0xd6>
   1499e:	4b1f      	ldr	r3, [pc, #124]	; (14a1c <registerEvent+0xec>)
   149a0:	781b      	ldrb	r3, [r3, #0]
   149a2:	2201      	movs	r2, #1
   149a4:	4053      	eors	r3, r2
   149a6:	b2db      	uxtb	r3, r3
   149a8:	2b00      	cmp	r3, #0
   149aa:	d02c      	beq.n	14a06 <registerEvent+0xd6>
   149ac:	4b20      	ldr	r3, [pc, #128]	; (14a30 <registerEvent+0x100>)
   149ae:	781b      	ldrb	r3, [r3, #0]
   149b0:	2201      	movs	r2, #1
   149b2:	4053      	eors	r3, r2
   149b4:	b2db      	uxtb	r3, r3
   149b6:	2b00      	cmp	r3, #0
   149b8:	d025      	beq.n	14a06 <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   149ba:	4b16      	ldr	r3, [pc, #88]	; (14a14 <registerEvent+0xe4>)
   149bc:	7a5b      	ldrb	r3, [r3, #9]
   149be:	2b00      	cmp	r3, #0
   149c0:	d005      	beq.n	149ce <registerEvent+0x9e>
   149c2:	4b1c      	ldr	r3, [pc, #112]	; (14a34 <registerEvent+0x104>)
   149c4:	4798      	blx	r3
   149c6:	1e03      	subs	r3, r0, #0
   149c8:	d001      	beq.n	149ce <registerEvent+0x9e>
		{
			return true;
   149ca:	2301      	movs	r3, #1
   149cc:	e01c      	b.n	14a08 <registerEvent+0xd8>
		}
		retries=0;
   149ce:	4b1a      	ldr	r3, [pc, #104]	; (14a38 <registerEvent+0x108>)
   149d0:	2200      	movs	r2, #0
   149d2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   149d4:	4b0f      	ldr	r3, [pc, #60]	; (14a14 <registerEvent+0xe4>)
   149d6:	7a1b      	ldrb	r3, [r3, #8]
   149d8:	2b00      	cmp	r3, #0
   149da:	d00c      	beq.n	149f6 <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
   149dc:	4b17      	ldr	r3, [pc, #92]	; (14a3c <registerEvent+0x10c>)
   149de:	4798      	blx	r3
   149e0:	0002      	movs	r2, r0
   149e2:	4b17      	ldr	r3, [pc, #92]	; (14a40 <registerEvent+0x110>)
   149e4:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   149e6:	4b17      	ldr	r3, [pc, #92]	; (14a44 <registerEvent+0x114>)
   149e8:	1dfa      	adds	r2, r7, #7
   149ea:	7812      	ldrb	r2, [r2, #0]
   149ec:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   149ee:	4b0b      	ldr	r3, [pc, #44]	; (14a1c <registerEvent+0xec>)
   149f0:	2201      	movs	r2, #1
   149f2:	701a      	strb	r2, [r3, #0]
   149f4:	e005      	b.n	14a02 <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
   149f6:	4b0a      	ldr	r3, [pc, #40]	; (14a20 <registerEvent+0xf0>)
   149f8:	1dfa      	adds	r2, r7, #7
   149fa:	7812      	ldrb	r2, [r2, #0]
   149fc:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   149fe:	4b12      	ldr	r3, [pc, #72]	; (14a48 <registerEvent+0x118>)
   14a00:	4798      	blx	r3
		}
		return true;
   14a02:	2301      	movs	r3, #1
   14a04:	e000      	b.n	14a08 <registerEvent+0xd8>
	}
	else
	{
		return false;
   14a06:	2300      	movs	r3, #0
	}
}
   14a08:	0018      	movs	r0, r3
   14a0a:	46bd      	mov	sp, r7
   14a0c:	b002      	add	sp, #8
   14a0e:	bd80      	pop	{r7, pc}
   14a10:	20000610 	.word	0x20000610
   14a14:	20000650 	.word	0x20000650
   14a18:	20000791 	.word	0x20000791
   14a1c:	200007ca 	.word	0x200007ca
   14a20:	20000757 	.word	0x20000757
   14a24:	200007d4 	.word	0x200007d4
   14a28:	20000783 	.word	0x20000783
   14a2c:	20000766 	.word	0x20000766
   14a30:	20000782 	.word	0x20000782
   14a34:	000170b1 	.word	0x000170b1
   14a38:	200006d5 	.word	0x200006d5
   14a3c:	0002024d 	.word	0x0002024d
   14a40:	200007ec 	.word	0x200007ec
   14a44:	20000769 	.word	0x20000769
   14a48:	000142f5 	.word	0x000142f5

00014a4c <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14a4c:	b580      	push	{r7, lr}
   14a4e:	b082      	sub	sp, #8
   14a50:	af00      	add	r7, sp, #0
   14a52:	0002      	movs	r2, r0
   14a54:	1dfb      	adds	r3, r7, #7
   14a56:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14a58:	4b20      	ldr	r3, [pc, #128]	; (14adc <registerM2MEvent+0x90>)
   14a5a:	781b      	ldrb	r3, [r3, #0]
   14a5c:	b2db      	uxtb	r3, r3
   14a5e:	2201      	movs	r2, #1
   14a60:	4053      	eors	r3, r2
   14a62:	b2db      	uxtb	r3, r3
   14a64:	2b00      	cmp	r3, #0
   14a66:	d006      	beq.n	14a76 <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14a68:	1dfb      	adds	r3, r7, #7
   14a6a:	781b      	ldrb	r3, [r3, #0]
   14a6c:	2100      	movs	r1, #0
   14a6e:	0018      	movs	r0, r3
   14a70:	4b1b      	ldr	r3, [pc, #108]	; (14ae0 <registerM2MEvent+0x94>)
   14a72:	4798      	blx	r3
		return;
   14a74:	e02e      	b.n	14ad4 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14a76:	4b1b      	ldr	r3, [pc, #108]	; (14ae4 <registerM2MEvent+0x98>)
   14a78:	781b      	ldrb	r3, [r3, #0]
   14a7a:	b2db      	uxtb	r3, r3
   14a7c:	2b4e      	cmp	r3, #78	; 0x4e
   14a7e:	d129      	bne.n	14ad4 <registerM2MEvent+0x88>
   14a80:	4b19      	ldr	r3, [pc, #100]	; (14ae8 <registerM2MEvent+0x9c>)
   14a82:	781b      	ldrb	r3, [r3, #0]
   14a84:	b2db      	uxtb	r3, r3
   14a86:	2b4e      	cmp	r3, #78	; 0x4e
   14a88:	d124      	bne.n	14ad4 <registerM2MEvent+0x88>
   14a8a:	4b18      	ldr	r3, [pc, #96]	; (14aec <registerM2MEvent+0xa0>)
   14a8c:	781b      	ldrb	r3, [r3, #0]
   14a8e:	2b00      	cmp	r3, #0
   14a90:	d020      	beq.n	14ad4 <registerM2MEvent+0x88>
   14a92:	4b17      	ldr	r3, [pc, #92]	; (14af0 <registerM2MEvent+0xa4>)
   14a94:	781b      	ldrb	r3, [r3, #0]
   14a96:	2201      	movs	r2, #1
   14a98:	4053      	eors	r3, r2
   14a9a:	b2db      	uxtb	r3, r3
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	d019      	beq.n	14ad4 <registerM2MEvent+0x88>
   14aa0:	4b14      	ldr	r3, [pc, #80]	; (14af4 <registerM2MEvent+0xa8>)
   14aa2:	781b      	ldrb	r3, [r3, #0]
   14aa4:	2201      	movs	r2, #1
   14aa6:	4053      	eors	r3, r2
   14aa8:	b2db      	uxtb	r3, r3
   14aaa:	2b00      	cmp	r3, #0
   14aac:	d012      	beq.n	14ad4 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14aae:	1dfb      	adds	r3, r7, #7
   14ab0:	781b      	ldrb	r3, [r3, #0]
   14ab2:	2102      	movs	r1, #2
   14ab4:	0018      	movs	r0, r3
   14ab6:	4b0a      	ldr	r3, [pc, #40]	; (14ae0 <registerM2MEvent+0x94>)
   14ab8:	4798      	blx	r3
		m2mEvent=true;
   14aba:	4b0f      	ldr	r3, [pc, #60]	; (14af8 <registerM2MEvent+0xac>)
   14abc:	2201      	movs	r2, #1
   14abe:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14ac0:	4b0e      	ldr	r3, [pc, #56]	; (14afc <registerM2MEvent+0xb0>)
   14ac2:	1dfa      	adds	r2, r7, #7
   14ac4:	7812      	ldrb	r2, [r2, #0]
   14ac6:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14ac8:	4b0d      	ldr	r3, [pc, #52]	; (14b00 <registerM2MEvent+0xb4>)
   14aca:	2200      	movs	r2, #0
   14acc:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14ace:	4b0d      	ldr	r3, [pc, #52]	; (14b04 <registerM2MEvent+0xb8>)
   14ad0:	4798      	blx	r3
		return;
   14ad2:	46c0      	nop			; (mov r8, r8)
	}
}
   14ad4:	46bd      	mov	sp, r7
   14ad6:	b002      	add	sp, #8
   14ad8:	bd80      	pop	{r7, pc}
   14ada:	46c0      	nop			; (mov r8, r8)
   14adc:	20000791 	.word	0x20000791
   14ae0:	0001b9c9 	.word	0x0001b9c9
   14ae4:	200007d4 	.word	0x200007d4
   14ae8:	20000783 	.word	0x20000783
   14aec:	20000766 	.word	0x20000766
   14af0:	200007ca 	.word	0x200007ca
   14af4:	20000782 	.word	0x20000782
   14af8:	20000737 	.word	0x20000737
   14afc:	2000071d 	.word	0x2000071d
   14b00:	200007cb 	.word	0x200007cb
   14b04:	000142f5 	.word	0x000142f5

00014b08 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14b08:	b580      	push	{r7, lr}
   14b0a:	b082      	sub	sp, #8
   14b0c:	af00      	add	r7, sp, #0
   14b0e:	0002      	movs	r2, r0
   14b10:	1dfb      	adds	r3, r7, #7
   14b12:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14b14:	4b07      	ldr	r3, [pc, #28]	; (14b34 <setMotorMGRResponse+0x2c>)
   14b16:	781b      	ldrb	r3, [r3, #0]
   14b18:	b2db      	uxtb	r3, r3
   14b1a:	2b49      	cmp	r3, #73	; 0x49
   14b1c:	d106      	bne.n	14b2c <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14b1e:	1dfb      	adds	r3, r7, #7
   14b20:	781b      	ldrb	r3, [r3, #0]
   14b22:	2101      	movs	r1, #1
   14b24:	0018      	movs	r0, r3
   14b26:	4b04      	ldr	r3, [pc, #16]	; (14b38 <setMotorMGRResponse+0x30>)
   14b28:	4798      	blx	r3
   14b2a:	e000      	b.n	14b2e <setMotorMGRResponse+0x26>
		return;
   14b2c:	46c0      	nop			; (mov r8, r8)
}
   14b2e:	46bd      	mov	sp, r7
   14b30:	b002      	add	sp, #8
   14b32:	bd80      	pop	{r7, pc}
   14b34:	200007d4 	.word	0x200007d4
   14b38:	00014669 	.word	0x00014669

00014b3c <checkRespSMS>:

void checkRespSMS(char t1)
{
   14b3c:	b580      	push	{r7, lr}
   14b3e:	b082      	sub	sp, #8
   14b40:	af00      	add	r7, sp, #0
   14b42:	0002      	movs	r2, r0
   14b44:	1dfb      	adds	r3, r7, #7
   14b46:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14b48:	4b0c      	ldr	r3, [pc, #48]	; (14b7c <checkRespSMS+0x40>)
   14b4a:	781b      	ldrb	r3, [r3, #0]
   14b4c:	2201      	movs	r2, #1
   14b4e:	4053      	eors	r3, r2
   14b50:	b2db      	uxtb	r3, r3
   14b52:	2b00      	cmp	r3, #0
   14b54:	d00d      	beq.n	14b72 <checkRespSMS+0x36>
   14b56:	4b0a      	ldr	r3, [pc, #40]	; (14b80 <checkRespSMS+0x44>)
   14b58:	795b      	ldrb	r3, [r3, #5]
   14b5a:	2b41      	cmp	r3, #65	; 0x41
   14b5c:	d109      	bne.n	14b72 <checkRespSMS+0x36>
	{
		actionType = t1;
   14b5e:	4b09      	ldr	r3, [pc, #36]	; (14b84 <checkRespSMS+0x48>)
   14b60:	1dfa      	adds	r2, r7, #7
   14b62:	7812      	ldrb	r2, [r2, #0]
   14b64:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14b66:	4b08      	ldr	r3, [pc, #32]	; (14b88 <checkRespSMS+0x4c>)
   14b68:	2200      	movs	r2, #0
   14b6a:	2100      	movs	r1, #0
   14b6c:	0018      	movs	r0, r3
   14b6e:	4b07      	ldr	r3, [pc, #28]	; (14b8c <checkRespSMS+0x50>)
   14b70:	4798      	blx	r3
	}
}
   14b72:	46c0      	nop			; (mov r8, r8)
   14b74:	46bd      	mov	sp, r7
   14b76:	b002      	add	sp, #8
   14b78:	bd80      	pop	{r7, pc}
   14b7a:	46c0      	nop			; (mov r8, r8)
   14b7c:	20000792 	.word	0x20000792
   14b80:	20000650 	.word	0x20000650
   14b84:	20000757 	.word	0x20000757
   14b88:	0002a04c 	.word	0x0002a04c
   14b8c:	00017195 	.word	0x00017195

00014b90 <subDTMF>:

void subDTMF(void)
{
   14b90:	b580      	push	{r7, lr}
   14b92:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14b94:	4b04      	ldr	r3, [pc, #16]	; (14ba8 <subDTMF+0x18>)
   14b96:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   14b98:	4b04      	ldr	r3, [pc, #16]	; (14bac <subDTMF+0x1c>)
   14b9a:	4798      	blx	r3
   14b9c:	0002      	movs	r2, r0
   14b9e:	4b04      	ldr	r3, [pc, #16]	; (14bb0 <subDTMF+0x20>)
   14ba0:	601a      	str	r2, [r3, #0]
}
   14ba2:	46c0      	nop			; (mov r8, r8)
   14ba4:	46bd      	mov	sp, r7
   14ba6:	bd80      	pop	{r7, pc}
   14ba8:	00013079 	.word	0x00013079
   14bac:	0002024d 	.word	0x0002024d
   14bb0:	20000810 	.word	0x20000810

00014bb4 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14bb4:	b580      	push	{r7, lr}
   14bb6:	b084      	sub	sp, #16
   14bb8:	af00      	add	r7, sp, #0
   14bba:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14bbc:	230f      	movs	r3, #15
   14bbe:	18fb      	adds	r3, r7, r3
   14bc0:	687a      	ldr	r2, [r7, #4]
   14bc2:	7812      	ldrb	r2, [r2, #0]
   14bc4:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14bc6:	4b6a      	ldr	r3, [pc, #424]	; (14d70 <processOnDTMF+0x1bc>)
   14bc8:	78db      	ldrb	r3, [r3, #3]
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d010      	beq.n	14bf0 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14bce:	4b69      	ldr	r3, [pc, #420]	; (14d74 <processOnDTMF+0x1c0>)
   14bd0:	781b      	ldrb	r3, [r3, #0]
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d100      	bne.n	14bd8 <processOnDTMF+0x24>
   14bd6:	e0c7      	b.n	14d68 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14bd8:	230f      	movs	r3, #15
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	2b41      	cmp	r3, #65	; 0x41
   14be0:	d000      	beq.n	14be4 <processOnDTMF+0x30>
   14be2:	e0c1      	b.n	14d68 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14be4:	4b64      	ldr	r3, [pc, #400]	; (14d78 <processOnDTMF+0x1c4>)
   14be6:	2201      	movs	r2, #1
   14be8:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14bea:	4b64      	ldr	r3, [pc, #400]	; (14d7c <processOnDTMF+0x1c8>)
   14bec:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14bee:	e0bb      	b.n	14d68 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14bf0:	230f      	movs	r3, #15
   14bf2:	18fb      	adds	r3, r7, r3
   14bf4:	781b      	ldrb	r3, [r3, #0]
   14bf6:	2b31      	cmp	r3, #49	; 0x31
   14bf8:	d106      	bne.n	14c08 <processOnDTMF+0x54>
			subDTMF();
   14bfa:	4b61      	ldr	r3, [pc, #388]	; (14d80 <processOnDTMF+0x1cc>)
   14bfc:	4798      	blx	r3
			startMotor(true,false);
   14bfe:	2100      	movs	r1, #0
   14c00:	2001      	movs	r0, #1
   14c02:	4b60      	ldr	r3, [pc, #384]	; (14d84 <processOnDTMF+0x1d0>)
   14c04:	4798      	blx	r3
}
   14c06:	e0af      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14c08:	230f      	movs	r3, #15
   14c0a:	18fb      	adds	r3, r7, r3
   14c0c:	781b      	ldrb	r3, [r3, #0]
   14c0e:	2b32      	cmp	r3, #50	; 0x32
   14c10:	d107      	bne.n	14c22 <processOnDTMF+0x6e>
			subDTMF();
   14c12:	4b5b      	ldr	r3, [pc, #364]	; (14d80 <processOnDTMF+0x1cc>)
   14c14:	4798      	blx	r3
			stopMotor(true,false,false);
   14c16:	2200      	movs	r2, #0
   14c18:	2100      	movs	r1, #0
   14c1a:	2001      	movs	r0, #1
   14c1c:	4b5a      	ldr	r3, [pc, #360]	; (14d88 <processOnDTMF+0x1d4>)
   14c1e:	4798      	blx	r3
}
   14c20:	e0a2      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14c22:	230f      	movs	r3, #15
   14c24:	18fb      	adds	r3, r7, r3
   14c26:	781b      	ldrb	r3, [r3, #0]
   14c28:	2b33      	cmp	r3, #51	; 0x33
   14c2a:	d104      	bne.n	14c36 <processOnDTMF+0x82>
			subDTMF();
   14c2c:	4b54      	ldr	r3, [pc, #336]	; (14d80 <processOnDTMF+0x1cc>)
   14c2e:	4798      	blx	r3
			statusOnCall();
   14c30:	4b56      	ldr	r3, [pc, #344]	; (14d8c <processOnDTMF+0x1d8>)
   14c32:	4798      	blx	r3
}
   14c34:	e098      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14c36:	230f      	movs	r3, #15
   14c38:	18fb      	adds	r3, r7, r3
   14c3a:	781b      	ldrb	r3, [r3, #0]
   14c3c:	2b34      	cmp	r3, #52	; 0x34
   14c3e:	d10a      	bne.n	14c56 <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14c40:	4b4b      	ldr	r3, [pc, #300]	; (14d70 <processOnDTMF+0x1bc>)
   14c42:	795b      	ldrb	r3, [r3, #5]
   14c44:	2b00      	cmp	r3, #0
   14c46:	d100      	bne.n	14c4a <processOnDTMF+0x96>
   14c48:	e08e      	b.n	14d68 <processOnDTMF+0x1b4>
				subDTMF();
   14c4a:	4b4d      	ldr	r3, [pc, #308]	; (14d80 <processOnDTMF+0x1cc>)
   14c4c:	4798      	blx	r3
				waterStatusOnCall(false);
   14c4e:	2000      	movs	r0, #0
   14c50:	4b4f      	ldr	r3, [pc, #316]	; (14d90 <processOnDTMF+0x1dc>)
   14c52:	4798      	blx	r3
}
   14c54:	e088      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14c56:	230f      	movs	r3, #15
   14c58:	18fb      	adds	r3, r7, r3
   14c5a:	781b      	ldrb	r3, [r3, #0]
   14c5c:	2b35      	cmp	r3, #53	; 0x35
   14c5e:	d10a      	bne.n	14c76 <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14c60:	4b43      	ldr	r3, [pc, #268]	; (14d70 <processOnDTMF+0x1bc>)
   14c62:	791b      	ldrb	r3, [r3, #4]
   14c64:	2b00      	cmp	r3, #0
   14c66:	d100      	bne.n	14c6a <processOnDTMF+0xb6>
   14c68:	e07e      	b.n	14d68 <processOnDTMF+0x1b4>
				subDTMF();
   14c6a:	4b45      	ldr	r3, [pc, #276]	; (14d80 <processOnDTMF+0x1cc>)
   14c6c:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14c6e:	2000      	movs	r0, #0
   14c70:	4b48      	ldr	r3, [pc, #288]	; (14d94 <processOnDTMF+0x1e0>)
   14c72:	4798      	blx	r3
}
   14c74:	e078      	b.n	14d68 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14c76:	230f      	movs	r3, #15
   14c78:	18fb      	adds	r3, r7, r3
   14c7a:	781b      	ldrb	r3, [r3, #0]
   14c7c:	2b30      	cmp	r3, #48	; 0x30
   14c7e:	d114      	bne.n	14caa <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14c80:	4b3b      	ldr	r3, [pc, #236]	; (14d70 <processOnDTMF+0x1bc>)
   14c82:	785b      	ldrb	r3, [r3, #1]
   14c84:	2b00      	cmp	r3, #0
   14c86:	d100      	bne.n	14c8a <processOnDTMF+0xd6>
   14c88:	e06e      	b.n	14d68 <processOnDTMF+0x1b4>
				if(zeroPressed)
   14c8a:	4b43      	ldr	r3, [pc, #268]	; (14d98 <processOnDTMF+0x1e4>)
   14c8c:	781b      	ldrb	r3, [r3, #0]
   14c8e:	2b00      	cmp	r3, #0
   14c90:	d007      	beq.n	14ca2 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14c92:	4b42      	ldr	r3, [pc, #264]	; (14d9c <processOnDTMF+0x1e8>)
   14c94:	4798      	blx	r3
					subDTMF();
   14c96:	4b3a      	ldr	r3, [pc, #232]	; (14d80 <processOnDTMF+0x1cc>)
   14c98:	4798      	blx	r3
					zeroPressed=false;
   14c9a:	4b3f      	ldr	r3, [pc, #252]	; (14d98 <processOnDTMF+0x1e4>)
   14c9c:	2200      	movs	r2, #0
   14c9e:	701a      	strb	r2, [r3, #0]
}
   14ca0:	e062      	b.n	14d68 <processOnDTMF+0x1b4>
					zeroPressed=true;
   14ca2:	4b3d      	ldr	r3, [pc, #244]	; (14d98 <processOnDTMF+0x1e4>)
   14ca4:	2201      	movs	r2, #1
   14ca6:	701a      	strb	r2, [r3, #0]
}
   14ca8:	e05e      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14caa:	230f      	movs	r3, #15
   14cac:	18fb      	adds	r3, r7, r3
   14cae:	781b      	ldrb	r3, [r3, #0]
   14cb0:	2b37      	cmp	r3, #55	; 0x37
   14cb2:	d108      	bne.n	14cc6 <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14cb4:	4b2e      	ldr	r3, [pc, #184]	; (14d70 <processOnDTMF+0x1bc>)
   14cb6:	789b      	ldrb	r3, [r3, #2]
   14cb8:	2b00      	cmp	r3, #0
   14cba:	d055      	beq.n	14d68 <processOnDTMF+0x1b4>
				subDTMF();
   14cbc:	4b30      	ldr	r3, [pc, #192]	; (14d80 <processOnDTMF+0x1cc>)
   14cbe:	4798      	blx	r3
				speakAmpere();
   14cc0:	4b37      	ldr	r3, [pc, #220]	; (14da0 <processOnDTMF+0x1ec>)
   14cc2:	4798      	blx	r3
}
   14cc4:	e050      	b.n	14d68 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14cc6:	230f      	movs	r3, #15
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	2b44      	cmp	r3, #68	; 0x44
   14cce:	d10d      	bne.n	14cec <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14cd0:	2001      	movs	r0, #1
   14cd2:	4b34      	ldr	r3, [pc, #208]	; (14da4 <processOnDTMF+0x1f0>)
   14cd4:	4798      	blx	r3
			resetAutoStart(true);
   14cd6:	2001      	movs	r0, #1
   14cd8:	4b33      	ldr	r3, [pc, #204]	; (14da8 <processOnDTMF+0x1f4>)
   14cda:	4798      	blx	r3
			startMotor(false,false);
   14cdc:	2100      	movs	r1, #0
   14cde:	2000      	movs	r0, #0
   14ce0:	4b28      	ldr	r3, [pc, #160]	; (14d84 <processOnDTMF+0x1d0>)
   14ce2:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14ce4:	20ff      	movs	r0, #255	; 0xff
   14ce6:	4b31      	ldr	r3, [pc, #196]	; (14dac <processOnDTMF+0x1f8>)
   14ce8:	4798      	blx	r3
}
   14cea:	e03d      	b.n	14d68 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14cec:	230f      	movs	r3, #15
   14cee:	18fb      	adds	r3, r7, r3
   14cf0:	781b      	ldrb	r3, [r3, #0]
   14cf2:	2b43      	cmp	r3, #67	; 0x43
   14cf4:	d10b      	bne.n	14d0e <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14cf6:	2000      	movs	r0, #0
   14cf8:	4b2a      	ldr	r3, [pc, #168]	; (14da4 <processOnDTMF+0x1f0>)
   14cfa:	4798      	blx	r3
			stopMotor(false,false,true);
   14cfc:	2201      	movs	r2, #1
   14cfe:	2100      	movs	r1, #0
   14d00:	2000      	movs	r0, #0
   14d02:	4b21      	ldr	r3, [pc, #132]	; (14d88 <processOnDTMF+0x1d4>)
   14d04:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14d06:	20ff      	movs	r0, #255	; 0xff
   14d08:	4b28      	ldr	r3, [pc, #160]	; (14dac <processOnDTMF+0x1f8>)
   14d0a:	4798      	blx	r3
}
   14d0c:	e02c      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14d0e:	230f      	movs	r3, #15
   14d10:	18fb      	adds	r3, r7, r3
   14d12:	781b      	ldrb	r3, [r3, #0]
   14d14:	2b38      	cmp	r3, #56	; 0x38
   14d16:	d10c      	bne.n	14d32 <processOnDTMF+0x17e>
			subDTMF();
   14d18:	4b19      	ldr	r3, [pc, #100]	; (14d80 <processOnDTMF+0x1cc>)
   14d1a:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14d1c:	2001      	movs	r0, #1
   14d1e:	4b21      	ldr	r3, [pc, #132]	; (14da4 <processOnDTMF+0x1f0>)
   14d20:	4798      	blx	r3
			resetAutoStart(true);
   14d22:	2001      	movs	r0, #1
   14d24:	4b20      	ldr	r3, [pc, #128]	; (14da8 <processOnDTMF+0x1f4>)
   14d26:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14d28:	2101      	movs	r1, #1
   14d2a:	2029      	movs	r0, #41	; 0x29
   14d2c:	4b20      	ldr	r3, [pc, #128]	; (14db0 <processOnDTMF+0x1fc>)
   14d2e:	4798      	blx	r3
}
   14d30:	e01a      	b.n	14d68 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14d32:	230f      	movs	r3, #15
   14d34:	18fb      	adds	r3, r7, r3
   14d36:	781b      	ldrb	r3, [r3, #0]
   14d38:	2b39      	cmp	r3, #57	; 0x39
   14d3a:	d10c      	bne.n	14d56 <processOnDTMF+0x1a2>
			subDTMF();
   14d3c:	4b10      	ldr	r3, [pc, #64]	; (14d80 <processOnDTMF+0x1cc>)
   14d3e:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14d40:	2000      	movs	r0, #0
   14d42:	4b18      	ldr	r3, [pc, #96]	; (14da4 <processOnDTMF+0x1f0>)
   14d44:	4798      	blx	r3
			resetAutoStart(true);
   14d46:	2001      	movs	r0, #1
   14d48:	4b17      	ldr	r3, [pc, #92]	; (14da8 <processOnDTMF+0x1f4>)
   14d4a:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14d4c:	2101      	movs	r1, #1
   14d4e:	205b      	movs	r0, #91	; 0x5b
   14d50:	4b17      	ldr	r3, [pc, #92]	; (14db0 <processOnDTMF+0x1fc>)
   14d52:	4798      	blx	r3
}
   14d54:	e008      	b.n	14d68 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14d56:	230f      	movs	r3, #15
   14d58:	18fb      	adds	r3, r7, r3
   14d5a:	781b      	ldrb	r3, [r3, #0]
   14d5c:	2b2a      	cmp	r3, #42	; 0x2a
   14d5e:	d103      	bne.n	14d68 <processOnDTMF+0x1b4>
			subDTMF();
   14d60:	4b07      	ldr	r3, [pc, #28]	; (14d80 <processOnDTMF+0x1cc>)
   14d62:	4798      	blx	r3
			voltageOnCall();
   14d64:	4b13      	ldr	r3, [pc, #76]	; (14db4 <processOnDTMF+0x200>)
   14d66:	4798      	blx	r3
}
   14d68:	46c0      	nop			; (mov r8, r8)
   14d6a:	46bd      	mov	sp, r7
   14d6c:	b004      	add	sp, #16
   14d6e:	bd80      	pop	{r7, pc}
   14d70:	20000628 	.word	0x20000628
   14d74:	20000737 	.word	0x20000737
   14d78:	2000071c 	.word	0x2000071c
   14d7c:	00013019 	.word	0x00013019
   14d80:	00014b91 	.word	0x00014b91
   14d84:	0001b251 	.word	0x0001b251
   14d88:	0001b439 	.word	0x0001b439
   14d8c:	0001b879 	.word	0x0001b879
   14d90:	00019391 	.word	0x00019391
   14d94:	00019249 	.word	0x00019249
   14d98:	20000807 	.word	0x20000807
   14d9c:	00019e59 	.word	0x00019e59
   14da0:	00019f4d 	.word	0x00019f4d
   14da4:	0001129d 	.word	0x0001129d
   14da8:	0001ae1d 	.word	0x0001ae1d
   14dac:	00017351 	.word	0x00017351
   14db0:	00014669 	.word	0x00014669
   14db4:	0001b989 	.word	0x0001b989

00014db8 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dba:	46c6      	mov	lr, r8
   14dbc:	b500      	push	{lr}
   14dbe:	b0d2      	sub	sp, #328	; 0x148
   14dc0:	af06      	add	r7, sp, #24
   14dc2:	60f8      	str	r0, [r7, #12]
   14dc4:	000c      	movs	r4, r1
   14dc6:	0010      	movs	r0, r2
   14dc8:	0019      	movs	r1, r3
   14dca:	4beb      	ldr	r3, [pc, #940]	; (15178 <processOnSMS+0x3c0>)
   14dcc:	2294      	movs	r2, #148	; 0x94
   14dce:	0052      	lsls	r2, r2, #1
   14dd0:	4694      	mov	ip, r2
   14dd2:	2208      	movs	r2, #8
   14dd4:	4690      	mov	r8, r2
   14dd6:	44b8      	add	r8, r7
   14dd8:	44c4      	add	ip, r8
   14dda:	4463      	add	r3, ip
   14ddc:	1c22      	adds	r2, r4, #0
   14dde:	701a      	strb	r2, [r3, #0]
   14de0:	4be6      	ldr	r3, [pc, #920]	; (1517c <processOnSMS+0x3c4>)
   14de2:	2294      	movs	r2, #148	; 0x94
   14de4:	0052      	lsls	r2, r2, #1
   14de6:	4694      	mov	ip, r2
   14de8:	2208      	movs	r2, #8
   14dea:	4690      	mov	r8, r2
   14dec:	44b8      	add	r8, r7
   14dee:	44c4      	add	ip, r8
   14df0:	4463      	add	r3, ip
   14df2:	1c02      	adds	r2, r0, #0
   14df4:	701a      	strb	r2, [r3, #0]
   14df6:	4be2      	ldr	r3, [pc, #904]	; (15180 <processOnSMS+0x3c8>)
   14df8:	2294      	movs	r2, #148	; 0x94
   14dfa:	0052      	lsls	r2, r2, #1
   14dfc:	4694      	mov	ip, r2
   14dfe:	2208      	movs	r2, #8
   14e00:	4690      	mov	r8, r2
   14e02:	44b8      	add	r8, r7
   14e04:	44c4      	add	ip, r8
   14e06:	4463      	add	r3, ip
   14e08:	1c0a      	adds	r2, r1, #0
   14e0a:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   14e0c:	2328      	movs	r3, #40	; 0x28
   14e0e:	33ff      	adds	r3, #255	; 0xff
   14e10:	2208      	movs	r2, #8
   14e12:	4694      	mov	ip, r2
   14e14:	44bc      	add	ip, r7
   14e16:	4463      	add	r3, ip
   14e18:	2200      	movs	r2, #0
   14e1a:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   14e1c:	68fb      	ldr	r3, [r7, #12]
   14e1e:	228c      	movs	r2, #140	; 0x8c
   14e20:	0052      	lsls	r2, r2, #1
   14e22:	2108      	movs	r1, #8
   14e24:	468c      	mov	ip, r1
   14e26:	44bc      	add	ip, r7
   14e28:	4462      	add	r2, ip
   14e2a:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   14e2c:	4bd4      	ldr	r3, [pc, #848]	; (15180 <processOnSMS+0x3c8>)
   14e2e:	2294      	movs	r2, #148	; 0x94
   14e30:	0052      	lsls	r2, r2, #1
   14e32:	4694      	mov	ip, r2
   14e34:	2208      	movs	r2, #8
   14e36:	4690      	mov	r8, r2
   14e38:	44b8      	add	r8, r7
   14e3a:	44c4      	add	ip, r8
   14e3c:	4463      	add	r3, ip
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	2b00      	cmp	r3, #0
   14e42:	d00e      	beq.n	14e62 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   14e44:	4acf      	ldr	r2, [pc, #828]	; (15184 <processOnSMS+0x3cc>)
   14e46:	68fb      	ldr	r3, [r7, #12]
   14e48:	0011      	movs	r1, r2
   14e4a:	0018      	movs	r0, r3
   14e4c:	4bce      	ldr	r3, [pc, #824]	; (15188 <processOnSMS+0x3d0>)
   14e4e:	4798      	blx	r3
   14e50:	0003      	movs	r3, r0
   14e52:	001a      	movs	r2, r3
   14e54:	2301      	movs	r3, #1
   14e56:	4053      	eors	r3, r2
   14e58:	b2db      	uxtb	r3, r3
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d001      	beq.n	14e62 <processOnSMS+0xaa>
   14e5e:	f002 f85e 	bl	16f1e <processOnSMS+0x2166>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   14e62:	4aca      	ldr	r2, [pc, #808]	; (1518c <processOnSMS+0x3d4>)
   14e64:	68fb      	ldr	r3, [r7, #12]
   14e66:	0011      	movs	r1, r2
   14e68:	0018      	movs	r0, r3
   14e6a:	4bc7      	ldr	r3, [pc, #796]	; (15188 <processOnSMS+0x3d0>)
   14e6c:	4798      	blx	r3
   14e6e:	1e03      	subs	r3, r0, #0
   14e70:	d014      	beq.n	14e9c <processOnSMS+0xe4>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   14e72:	4bc7      	ldr	r3, [pc, #796]	; (15190 <processOnSMS+0x3d8>)
   14e74:	2201      	movs	r2, #1
   14e76:	715a      	strb	r2, [r3, #5]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   14e78:	49c5      	ldr	r1, [pc, #788]	; (15190 <processOnSMS+0x3d8>)
   14e7a:	4bc6      	ldr	r3, [pc, #792]	; (15194 <processOnSMS+0x3dc>)
   14e7c:	2218      	movs	r2, #24
   14e7e:	0018      	movs	r0, r3
   14e80:	4bc5      	ldr	r3, [pc, #788]	; (15198 <processOnSMS+0x3e0>)
   14e82:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   14e84:	4bc3      	ldr	r3, [pc, #780]	; (15194 <processOnSMS+0x3dc>)
   14e86:	0019      	movs	r1, r3
   14e88:	2000      	movs	r0, #0
   14e8a:	4bc4      	ldr	r3, [pc, #784]	; (1519c <processOnSMS+0x3e4>)
   14e8c:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   14e8e:	4bc4      	ldr	r3, [pc, #784]	; (151a0 <processOnSMS+0x3e8>)
   14e90:	4798      	blx	r3
			vTaskDelay(100);
   14e92:	2064      	movs	r0, #100	; 0x64
   14e94:	4bc3      	ldr	r3, [pc, #780]	; (151a4 <processOnSMS+0x3ec>)
   14e96:	4798      	blx	r3
			system_reset();
   14e98:	4bc3      	ldr	r3, [pc, #780]	; (151a8 <processOnSMS+0x3f0>)
   14e9a:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   14e9c:	4ac3      	ldr	r2, [pc, #780]	; (151ac <processOnSMS+0x3f4>)
   14e9e:	68fb      	ldr	r3, [r7, #12]
   14ea0:	0011      	movs	r1, r2
   14ea2:	0018      	movs	r0, r3
   14ea4:	4bb8      	ldr	r3, [pc, #736]	; (15188 <processOnSMS+0x3d0>)
   14ea6:	4798      	blx	r3
   14ea8:	1e03      	subs	r3, r0, #0
   14eaa:	d047      	beq.n	14f3c <processOnSMS+0x184>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   14eac:	2318      	movs	r3, #24
   14eae:	33ff      	adds	r3, #255	; 0xff
   14eb0:	2208      	movs	r2, #8
   14eb2:	18ba      	adds	r2, r7, r2
   14eb4:	18d4      	adds	r4, r2, r3
   14eb6:	4bbe      	ldr	r3, [pc, #760]	; (151b0 <processOnSMS+0x3f8>)
   14eb8:	4798      	blx	r3
   14eba:	0003      	movs	r3, r0
   14ebc:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   14ebe:	2328      	movs	r3, #40	; 0x28
   14ec0:	33ff      	adds	r3, #255	; 0xff
   14ec2:	2208      	movs	r2, #8
   14ec4:	4694      	mov	ip, r2
   14ec6:	44bc      	add	ip, r7
   14ec8:	4463      	add	r3, ip
   14eca:	2201      	movs	r2, #1
   14ecc:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14ece:	4bab      	ldr	r3, [pc, #684]	; (1517c <processOnSMS+0x3c4>)
   14ed0:	2294      	movs	r2, #148	; 0x94
   14ed2:	0052      	lsls	r2, r2, #1
   14ed4:	4694      	mov	ip, r2
   14ed6:	2208      	movs	r2, #8
   14ed8:	4690      	mov	r8, r2
   14eda:	44b8      	add	r8, r7
   14edc:	44c4      	add	ip, r8
   14ede:	4463      	add	r3, ip
   14ee0:	781b      	ldrb	r3, [r3, #0]
   14ee2:	2b00      	cmp	r3, #0
   14ee4:	d101      	bne.n	14eea <processOnSMS+0x132>
   14ee6:	f001 ffd4 	bl	16e92 <processOnSMS+0x20da>
		{
			if (err == GSM_ERROR_NONE)
   14eea:	2318      	movs	r3, #24
   14eec:	33ff      	adds	r3, #255	; 0xff
   14eee:	2208      	movs	r2, #8
   14ef0:	4694      	mov	ip, r2
   14ef2:	44bc      	add	ip, r7
   14ef4:	4463      	add	r3, ip
   14ef6:	781b      	ldrb	r3, [r3, #0]
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d10d      	bne.n	14f18 <processOnSMS+0x160>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   14efc:	230c      	movs	r3, #12
   14efe:	2208      	movs	r2, #8
   14f00:	4694      	mov	ip, r2
   14f02:	44bc      	add	ip, r7
   14f04:	4463      	add	r3, ip
   14f06:	4aab      	ldr	r2, [pc, #684]	; (151b4 <processOnSMS+0x3fc>)
   14f08:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f0a:	c313      	stmia	r3!, {r0, r1, r4}
   14f0c:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f0e:	c313      	stmia	r3!, {r0, r1, r4}
   14f10:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f12:	c313      	stmia	r3!, {r0, r1, r4}
   14f14:	f001 ffbd 	bl	16e92 <processOnSMS+0x20da>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   14f18:	230c      	movs	r3, #12
   14f1a:	2208      	movs	r2, #8
   14f1c:	4694      	mov	ip, r2
   14f1e:	44bc      	add	ip, r7
   14f20:	4463      	add	r3, ip
   14f22:	4aa5      	ldr	r2, [pc, #660]	; (151b8 <processOnSMS+0x400>)
   14f24:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f26:	c313      	stmia	r3!, {r0, r1, r4}
   14f28:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f2a:	c313      	stmia	r3!, {r0, r1, r4}
   14f2c:	ca03      	ldmia	r2!, {r0, r1}
   14f2e:	c303      	stmia	r3!, {r0, r1}
   14f30:	8811      	ldrh	r1, [r2, #0]
   14f32:	8019      	strh	r1, [r3, #0]
   14f34:	7892      	ldrb	r2, [r2, #2]
   14f36:	709a      	strb	r2, [r3, #2]
   14f38:	f001 ffab 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   14f3c:	4a9f      	ldr	r2, [pc, #636]	; (151bc <processOnSMS+0x404>)
   14f3e:	68fb      	ldr	r3, [r7, #12]
   14f40:	0011      	movs	r1, r2
   14f42:	0018      	movs	r0, r3
   14f44:	4b90      	ldr	r3, [pc, #576]	; (15188 <processOnSMS+0x3d0>)
   14f46:	4798      	blx	r3
   14f48:	1e03      	subs	r3, r0, #0
   14f4a:	d030      	beq.n	14fae <processOnSMS+0x1f6>
	{
		clearNumbers(admin);
   14f4c:	4b8a      	ldr	r3, [pc, #552]	; (15178 <processOnSMS+0x3c0>)
   14f4e:	2294      	movs	r2, #148	; 0x94
   14f50:	0052      	lsls	r2, r2, #1
   14f52:	4694      	mov	ip, r2
   14f54:	2208      	movs	r2, #8
   14f56:	4690      	mov	r8, r2
   14f58:	44b8      	add	r8, r7
   14f5a:	44c4      	add	ip, r8
   14f5c:	4463      	add	r3, ip
   14f5e:	781b      	ldrb	r3, [r3, #0]
   14f60:	0018      	movs	r0, r3
   14f62:	4b97      	ldr	r3, [pc, #604]	; (151c0 <processOnSMS+0x408>)
   14f64:	4798      	blx	r3
		incomingSMSProcessed=true;
   14f66:	2328      	movs	r3, #40	; 0x28
   14f68:	33ff      	adds	r3, #255	; 0xff
   14f6a:	2208      	movs	r2, #8
   14f6c:	4694      	mov	ip, r2
   14f6e:	44bc      	add	ip, r7
   14f70:	4463      	add	r3, ip
   14f72:	2201      	movs	r2, #1
   14f74:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14f76:	4b81      	ldr	r3, [pc, #516]	; (1517c <processOnSMS+0x3c4>)
   14f78:	2294      	movs	r2, #148	; 0x94
   14f7a:	0052      	lsls	r2, r2, #1
   14f7c:	4694      	mov	ip, r2
   14f7e:	2208      	movs	r2, #8
   14f80:	4690      	mov	r8, r2
   14f82:	44b8      	add	r8, r7
   14f84:	44c4      	add	ip, r8
   14f86:	4463      	add	r3, ip
   14f88:	781b      	ldrb	r3, [r3, #0]
   14f8a:	2b00      	cmp	r3, #0
   14f8c:	d101      	bne.n	14f92 <processOnSMS+0x1da>
   14f8e:	f001 ff80 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   14f92:	230c      	movs	r3, #12
   14f94:	2208      	movs	r2, #8
   14f96:	4694      	mov	ip, r2
   14f98:	44bc      	add	ip, r7
   14f9a:	4463      	add	r3, ip
   14f9c:	4a89      	ldr	r2, [pc, #548]	; (151c4 <processOnSMS+0x40c>)
   14f9e:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fa0:	c313      	stmia	r3!, {r0, r1, r4}
   14fa2:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fa4:	c313      	stmia	r3!, {r0, r1, r4}
   14fa6:	7812      	ldrb	r2, [r2, #0]
   14fa8:	701a      	strb	r2, [r3, #0]
   14faa:	f001 ff72 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   14fae:	4a86      	ldr	r2, [pc, #536]	; (151c8 <processOnSMS+0x410>)
   14fb0:	68fb      	ldr	r3, [r7, #12]
   14fb2:	0011      	movs	r1, r2
   14fb4:	0018      	movs	r0, r3
   14fb6:	4b74      	ldr	r3, [pc, #464]	; (15188 <processOnSMS+0x3d0>)
   14fb8:	4798      	blx	r3
   14fba:	1e03      	subs	r3, r0, #0
   14fbc:	d065      	beq.n	1508a <processOnSMS+0x2d2>
	{
		saveAutoStartSettings(false);
   14fbe:	2000      	movs	r0, #0
   14fc0:	4b82      	ldr	r3, [pc, #520]	; (151cc <processOnSMS+0x414>)
   14fc2:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   14fc4:	4b82      	ldr	r3, [pc, #520]	; (151d0 <processOnSMS+0x418>)
   14fc6:	795b      	ldrb	r3, [r3, #5]
   14fc8:	2b00      	cmp	r3, #0
   14fca:	d00d      	beq.n	14fe8 <processOnSMS+0x230>
		{
			saveWaterBypassSettings(false);
   14fcc:	2000      	movs	r0, #0
   14fce:	4b81      	ldr	r3, [pc, #516]	; (151d4 <processOnSMS+0x41c>)
   14fd0:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   14fd2:	4b7f      	ldr	r3, [pc, #508]	; (151d0 <processOnSMS+0x418>)
   14fd4:	78db      	ldrb	r3, [r3, #3]
   14fd6:	2b00      	cmp	r3, #0
   14fd8:	d003      	beq.n	14fe2 <processOnSMS+0x22a>
			{
				saveM2MSettings(false);
   14fda:	2000      	movs	r0, #0
   14fdc:	4b7e      	ldr	r3, [pc, #504]	; (151d8 <processOnSMS+0x420>)
   14fde:	4798      	blx	r3
   14fe0:	e002      	b.n	14fe8 <processOnSMS+0x230>
			}
			else
			{
				savePreventOverFlowSettings(false);
   14fe2:	2000      	movs	r0, #0
   14fe4:	4b7d      	ldr	r3, [pc, #500]	; (151dc <processOnSMS+0x424>)
   14fe6:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14fe8:	4b79      	ldr	r3, [pc, #484]	; (151d0 <processOnSMS+0x418>)
   14fea:	785b      	ldrb	r3, [r3, #1]
   14fec:	2b00      	cmp	r3, #0
   14fee:	d008      	beq.n	15002 <processOnSMS+0x24a>
		{
			setOverloadPer(120);
   14ff0:	2078      	movs	r0, #120	; 0x78
   14ff2:	4b7b      	ldr	r3, [pc, #492]	; (151e0 <processOnSMS+0x428>)
   14ff4:	4798      	blx	r3
			setUnderloadPer(85);
   14ff6:	2055      	movs	r0, #85	; 0x55
   14ff8:	4b7a      	ldr	r3, [pc, #488]	; (151e4 <processOnSMS+0x42c>)
   14ffa:	4798      	blx	r3
			setCurrentDetection(false);
   14ffc:	2000      	movs	r0, #0
   14ffe:	4b7a      	ldr	r3, [pc, #488]	; (151e8 <processOnSMS+0x430>)
   15000:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   15002:	2000      	movs	r0, #0
   15004:	4b79      	ldr	r3, [pc, #484]	; (151ec <processOnSMS+0x434>)
   15006:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   15008:	2000      	movs	r0, #0
   1500a:	4b79      	ldr	r3, [pc, #484]	; (151f0 <processOnSMS+0x438>)
   1500c:	4798      	blx	r3
		saveResponseSettings('C');
   1500e:	2043      	movs	r0, #67	; 0x43
   15010:	4b78      	ldr	r3, [pc, #480]	; (151f4 <processOnSMS+0x43c>)
   15012:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   15014:	2032      	movs	r0, #50	; 0x32
   15016:	4b78      	ldr	r3, [pc, #480]	; (151f8 <processOnSMS+0x440>)
   15018:	4798      	blx	r3
		saveStarDeltaTimer(2);
   1501a:	2002      	movs	r0, #2
   1501c:	4b77      	ldr	r3, [pc, #476]	; (151fc <processOnSMS+0x444>)
   1501e:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   15020:	2001      	movs	r0, #1
   15022:	4b77      	ldr	r3, [pc, #476]	; (15200 <processOnSMS+0x448>)
   15024:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   15026:	2050      	movs	r0, #80	; 0x50
   15028:	4b76      	ldr	r3, [pc, #472]	; (15204 <processOnSMS+0x44c>)
   1502a:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   1502c:	2001      	movs	r0, #1
   1502e:	4b76      	ldr	r3, [pc, #472]	; (15208 <processOnSMS+0x450>)
   15030:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   15032:	2000      	movs	r0, #0
   15034:	4b75      	ldr	r3, [pc, #468]	; (1520c <processOnSMS+0x454>)
   15036:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   15038:	2001      	movs	r0, #1
   1503a:	4b75      	ldr	r3, [pc, #468]	; (15210 <processOnSMS+0x458>)
   1503c:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1503e:	2328      	movs	r3, #40	; 0x28
   15040:	33ff      	adds	r3, #255	; 0xff
   15042:	2208      	movs	r2, #8
   15044:	4694      	mov	ip, r2
   15046:	44bc      	add	ip, r7
   15048:	4463      	add	r3, ip
   1504a:	2201      	movs	r2, #1
   1504c:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1504e:	4b4b      	ldr	r3, [pc, #300]	; (1517c <processOnSMS+0x3c4>)
   15050:	2294      	movs	r2, #148	; 0x94
   15052:	0052      	lsls	r2, r2, #1
   15054:	4694      	mov	ip, r2
   15056:	2208      	movs	r2, #8
   15058:	4690      	mov	r8, r2
   1505a:	44b8      	add	r8, r7
   1505c:	44c4      	add	ip, r8
   1505e:	4463      	add	r3, ip
   15060:	781b      	ldrb	r3, [r3, #0]
   15062:	2b00      	cmp	r3, #0
   15064:	d101      	bne.n	1506a <processOnSMS+0x2b2>
   15066:	f001 ff14 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   1506a:	230c      	movs	r3, #12
   1506c:	2208      	movs	r2, #8
   1506e:	4694      	mov	ip, r2
   15070:	44bc      	add	ip, r7
   15072:	4463      	add	r3, ip
   15074:	4a67      	ldr	r2, [pc, #412]	; (15214 <processOnSMS+0x45c>)
   15076:	ca13      	ldmia	r2!, {r0, r1, r4}
   15078:	c313      	stmia	r3!, {r0, r1, r4}
   1507a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1507c:	c313      	stmia	r3!, {r0, r1, r4}
   1507e:	ca13      	ldmia	r2!, {r0, r1, r4}
   15080:	c313      	stmia	r3!, {r0, r1, r4}
   15082:	7812      	ldrb	r2, [r2, #0]
   15084:	701a      	strb	r2, [r3, #0]
   15086:	f001 ff04 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   1508a:	4a63      	ldr	r2, [pc, #396]	; (15218 <processOnSMS+0x460>)
   1508c:	68fb      	ldr	r3, [r7, #12]
   1508e:	0011      	movs	r1, r2
   15090:	0018      	movs	r0, r3
   15092:	4b3d      	ldr	r3, [pc, #244]	; (15188 <processOnSMS+0x3d0>)
   15094:	4798      	blx	r3
   15096:	1e03      	subs	r3, r0, #0
   15098:	d038      	beq.n	1510c <processOnSMS+0x354>
	{
		response_sms_processed_cmd = true;
   1509a:	4b38      	ldr	r3, [pc, #224]	; (1517c <processOnSMS+0x3c4>)
   1509c:	2294      	movs	r2, #148	; 0x94
   1509e:	0052      	lsls	r2, r2, #1
   150a0:	4694      	mov	ip, r2
   150a2:	2208      	movs	r2, #8
   150a4:	4690      	mov	r8, r2
   150a6:	44b8      	add	r8, r7
   150a8:	44c4      	add	ip, r8
   150aa:	4463      	add	r3, ip
   150ac:	2201      	movs	r2, #1
   150ae:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   150b0:	2328      	movs	r3, #40	; 0x28
   150b2:	33ff      	adds	r3, #255	; 0xff
   150b4:	2208      	movs	r2, #8
   150b6:	4694      	mov	ip, r2
   150b8:	44bc      	add	ip, r7
   150ba:	4463      	add	r3, ip
   150bc:	2201      	movs	r2, #1
   150be:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   150c0:	230c      	movs	r3, #12
   150c2:	2208      	movs	r2, #8
   150c4:	4694      	mov	ip, r2
   150c6:	44bc      	add	ip, r7
   150c8:	4463      	add	r3, ip
   150ca:	22fa      	movs	r2, #250	; 0xfa
   150cc:	2100      	movs	r1, #0
   150ce:	0018      	movs	r0, r3
   150d0:	4b52      	ldr	r3, [pc, #328]	; (1521c <processOnSMS+0x464>)
   150d2:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   150d4:	4b52      	ldr	r3, [pc, #328]	; (15220 <processOnSMS+0x468>)
   150d6:	789b      	ldrb	r3, [r3, #2]
   150d8:	2b00      	cmp	r3, #0
   150da:	d10d      	bne.n	150f8 <processOnSMS+0x340>
		{
			strcpy(resep_msg,"No Numbers Exists");
   150dc:	230c      	movs	r3, #12
   150de:	2208      	movs	r2, #8
   150e0:	4694      	mov	ip, r2
   150e2:	44bc      	add	ip, r7
   150e4:	4463      	add	r3, ip
   150e6:	4a4f      	ldr	r2, [pc, #316]	; (15224 <processOnSMS+0x46c>)
   150e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   150ea:	c313      	stmia	r3!, {r0, r1, r4}
   150ec:	6811      	ldr	r1, [r2, #0]
   150ee:	6019      	str	r1, [r3, #0]
   150f0:	8892      	ldrh	r2, [r2, #4]
   150f2:	809a      	strh	r2, [r3, #4]
   150f4:	f001 fecd 	bl	16e92 <processOnSMS+0x20da>
		}
		else
		{
			getNumbers(resep_msg);
   150f8:	230c      	movs	r3, #12
   150fa:	2208      	movs	r2, #8
   150fc:	4694      	mov	ip, r2
   150fe:	44bc      	add	ip, r7
   15100:	4463      	add	r3, ip
   15102:	0018      	movs	r0, r3
   15104:	4b48      	ldr	r3, [pc, #288]	; (15228 <processOnSMS+0x470>)
   15106:	4798      	blx	r3
   15108:	f001 fec3 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   1510c:	4a47      	ldr	r2, [pc, #284]	; (1522c <processOnSMS+0x474>)
   1510e:	68fb      	ldr	r3, [r7, #12]
   15110:	0011      	movs	r1, r2
   15112:	0018      	movs	r0, r3
   15114:	4b1c      	ldr	r3, [pc, #112]	; (15188 <processOnSMS+0x3d0>)
   15116:	4798      	blx	r3
   15118:	1e03      	subs	r3, r0, #0
   1511a:	d003      	beq.n	15124 <processOnSMS+0x36c>
	{
		system_reset();
   1511c:	4b22      	ldr	r3, [pc, #136]	; (151a8 <processOnSMS+0x3f0>)
   1511e:	4798      	blx	r3
   15120:	f001 feb7 	bl	16e92 <processOnSMS+0x20da>
	}
	else if (StringstartsWith(received_command,"DID"))
   15124:	4a42      	ldr	r2, [pc, #264]	; (15230 <processOnSMS+0x478>)
   15126:	68fb      	ldr	r3, [r7, #12]
   15128:	0011      	movs	r1, r2
   1512a:	0018      	movs	r0, r3
   1512c:	4b16      	ldr	r3, [pc, #88]	; (15188 <processOnSMS+0x3d0>)
   1512e:	4798      	blx	r3
   15130:	1e03      	subs	r3, r0, #0
   15132:	d100      	bne.n	15136 <processOnSMS+0x37e>
   15134:	e082      	b.n	1523c <processOnSMS+0x484>
	{
		response_sms_processed_cmd=true;
   15136:	4b11      	ldr	r3, [pc, #68]	; (1517c <processOnSMS+0x3c4>)
   15138:	2294      	movs	r2, #148	; 0x94
   1513a:	0052      	lsls	r2, r2, #1
   1513c:	4694      	mov	ip, r2
   1513e:	2208      	movs	r2, #8
   15140:	4690      	mov	r8, r2
   15142:	44b8      	add	r8, r7
   15144:	44c4      	add	ip, r8
   15146:	4463      	add	r3, ip
   15148:	2201      	movs	r2, #1
   1514a:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   1514c:	2328      	movs	r3, #40	; 0x28
   1514e:	33ff      	adds	r3, #255	; 0xff
   15150:	2208      	movs	r2, #8
   15152:	4694      	mov	ip, r2
   15154:	44bc      	add	ip, r7
   15156:	4463      	add	r3, ip
   15158:	2201      	movs	r2, #1
   1515a:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu",factory_settings_parameter_struct.DeviceId_ee);
   1515c:	4b1c      	ldr	r3, [pc, #112]	; (151d0 <processOnSMS+0x418>)
   1515e:	689a      	ldr	r2, [r3, #8]
   15160:	4934      	ldr	r1, [pc, #208]	; (15234 <processOnSMS+0x47c>)
   15162:	230c      	movs	r3, #12
   15164:	2008      	movs	r0, #8
   15166:	4684      	mov	ip, r0
   15168:	44bc      	add	ip, r7
   1516a:	4463      	add	r3, ip
   1516c:	0018      	movs	r0, r3
   1516e:	4b32      	ldr	r3, [pc, #200]	; (15238 <processOnSMS+0x480>)
   15170:	4798      	blx	r3
   15172:	f001 fe8e 	bl	16e92 <processOnSMS+0x20da>
   15176:	46c0      	nop			; (mov r8, r8)
   15178:	fffffedb 	.word	0xfffffedb
   1517c:	fffffeda 	.word	0xfffffeda
   15180:	fffffed9 	.word	0xfffffed9
   15184:	0002a050 	.word	0x0002a050
   15188:	00014019 	.word	0x00014019
   1518c:	0002a058 	.word	0x0002a058
   15190:	200005f8 	.word	0x200005f8
   15194:	20000584 	.word	0x20000584
   15198:	00028ddd 	.word	0x00028ddd
   1519c:	000239f1 	.word	0x000239f1
   151a0:	00023b99 	.word	0x00023b99
   151a4:	0001fee9 	.word	0x0001fee9
   151a8:	000140ed 	.word	0x000140ed
   151ac:	0002a060 	.word	0x0002a060
   151b0:	00013049 	.word	0x00013049
   151b4:	0002a068 	.word	0x0002a068
   151b8:	0002a08c 	.word	0x0002a08c
   151bc:	0002a0b0 	.word	0x0002a0b0
   151c0:	00011101 	.word	0x00011101
   151c4:	0002a0bc 	.word	0x0002a0bc
   151c8:	0002a0d8 	.word	0x0002a0d8
   151cc:	0001129d 	.word	0x0001129d
   151d0:	20000628 	.word	0x20000628
   151d4:	0001145d 	.word	0x0001145d
   151d8:	00010bd9 	.word	0x00010bd9
   151dc:	000114a9 	.word	0x000114a9
   151e0:	000114f5 	.word	0x000114f5
   151e4:	0001155d 	.word	0x0001155d
   151e8:	0001197d 	.word	0x0001197d
   151ec:	00011a15 	.word	0x00011a15
   151f0:	00011335 	.word	0x00011335
   151f4:	00011381 	.word	0x00011381
   151f8:	000112e9 	.word	0x000112e9
   151fc:	000119c9 	.word	0x000119c9
   15200:	000115cd 	.word	0x000115cd
   15204:	00011619 	.word	0x00011619
   15208:	00011665 	.word	0x00011665
   1520c:	00011af5 	.word	0x00011af5
   15210:	00011b45 	.word	0x00011b45
   15214:	0002a0e0 	.word	0x0002a0e0
   15218:	0002a108 	.word	0x0002a108
   1521c:	00028e13 	.word	0x00028e13
   15220:	20000610 	.word	0x20000610
   15224:	0002a10c 	.word	0x0002a10c
   15228:	000107ed 	.word	0x000107ed
   1522c:	0002a120 	.word	0x0002a120
   15230:	0002a128 	.word	0x0002a128
   15234:	0002a12c 	.word	0x0002a12c
   15238:	00029019 	.word	0x00029019
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   1523c:	4aec      	ldr	r2, [pc, #944]	; (155f0 <processOnSMS+0x838>)
   1523e:	68fb      	ldr	r3, [r7, #12]
   15240:	0011      	movs	r1, r2
   15242:	0018      	movs	r0, r3
   15244:	4beb      	ldr	r3, [pc, #940]	; (155f4 <processOnSMS+0x83c>)
   15246:	4798      	blx	r3
   15248:	1e03      	subs	r3, r0, #0
   1524a:	d027      	beq.n	1529c <processOnSMS+0x4e4>
	{
		saveAutoStartSettings(true);
   1524c:	2001      	movs	r0, #1
   1524e:	4bea      	ldr	r3, [pc, #936]	; (155f8 <processOnSMS+0x840>)
   15250:	4798      	blx	r3
		resetAutoStart(true);
   15252:	2001      	movs	r0, #1
   15254:	4be9      	ldr	r3, [pc, #932]	; (155fc <processOnSMS+0x844>)
   15256:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15258:	2328      	movs	r3, #40	; 0x28
   1525a:	33ff      	adds	r3, #255	; 0xff
   1525c:	2208      	movs	r2, #8
   1525e:	4694      	mov	ip, r2
   15260:	44bc      	add	ip, r7
   15262:	4463      	add	r3, ip
   15264:	2201      	movs	r2, #1
   15266:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15268:	4be5      	ldr	r3, [pc, #916]	; (15600 <processOnSMS+0x848>)
   1526a:	2294      	movs	r2, #148	; 0x94
   1526c:	0052      	lsls	r2, r2, #1
   1526e:	4694      	mov	ip, r2
   15270:	2208      	movs	r2, #8
   15272:	4690      	mov	r8, r2
   15274:	44b8      	add	r8, r7
   15276:	44c4      	add	ip, r8
   15278:	4463      	add	r3, ip
   1527a:	781b      	ldrb	r3, [r3, #0]
   1527c:	2b00      	cmp	r3, #0
   1527e:	d101      	bne.n	15284 <processOnSMS+0x4cc>
   15280:	f001 fe07 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   15284:	230c      	movs	r3, #12
   15286:	2208      	movs	r2, #8
   15288:	4694      	mov	ip, r2
   1528a:	44bc      	add	ip, r7
   1528c:	4463      	add	r3, ip
   1528e:	4add      	ldr	r2, [pc, #884]	; (15604 <processOnSMS+0x84c>)
   15290:	ca13      	ldmia	r2!, {r0, r1, r4}
   15292:	c313      	stmia	r3!, {r0, r1, r4}
   15294:	6812      	ldr	r2, [r2, #0]
   15296:	601a      	str	r2, [r3, #0]
   15298:	f001 fdfb 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   1529c:	4ada      	ldr	r2, [pc, #872]	; (15608 <processOnSMS+0x850>)
   1529e:	68fb      	ldr	r3, [r7, #12]
   152a0:	0011      	movs	r1, r2
   152a2:	0018      	movs	r0, r3
   152a4:	4bd3      	ldr	r3, [pc, #844]	; (155f4 <processOnSMS+0x83c>)
   152a6:	4798      	blx	r3
   152a8:	1e03      	subs	r3, r0, #0
   152aa:	d029      	beq.n	15300 <processOnSMS+0x548>
	{
		saveAutoStartSettings(false);
   152ac:	2000      	movs	r0, #0
   152ae:	4bd2      	ldr	r3, [pc, #840]	; (155f8 <processOnSMS+0x840>)
   152b0:	4798      	blx	r3
		resetAutoStart(true);
   152b2:	2001      	movs	r0, #1
   152b4:	4bd1      	ldr	r3, [pc, #836]	; (155fc <processOnSMS+0x844>)
   152b6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   152b8:	2328      	movs	r3, #40	; 0x28
   152ba:	33ff      	adds	r3, #255	; 0xff
   152bc:	2208      	movs	r2, #8
   152be:	4694      	mov	ip, r2
   152c0:	44bc      	add	ip, r7
   152c2:	4463      	add	r3, ip
   152c4:	2201      	movs	r2, #1
   152c6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   152c8:	4bcd      	ldr	r3, [pc, #820]	; (15600 <processOnSMS+0x848>)
   152ca:	2294      	movs	r2, #148	; 0x94
   152cc:	0052      	lsls	r2, r2, #1
   152ce:	4694      	mov	ip, r2
   152d0:	2208      	movs	r2, #8
   152d2:	4690      	mov	r8, r2
   152d4:	44b8      	add	r8, r7
   152d6:	44c4      	add	ip, r8
   152d8:	4463      	add	r3, ip
   152da:	781b      	ldrb	r3, [r3, #0]
   152dc:	2b00      	cmp	r3, #0
   152de:	d101      	bne.n	152e4 <processOnSMS+0x52c>
   152e0:	f001 fdd7 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   152e4:	230c      	movs	r3, #12
   152e6:	2208      	movs	r2, #8
   152e8:	4694      	mov	ip, r2
   152ea:	44bc      	add	ip, r7
   152ec:	4463      	add	r3, ip
   152ee:	4ac7      	ldr	r2, [pc, #796]	; (1560c <processOnSMS+0x854>)
   152f0:	ca13      	ldmia	r2!, {r0, r1, r4}
   152f2:	c313      	stmia	r3!, {r0, r1, r4}
   152f4:	6811      	ldr	r1, [r2, #0]
   152f6:	6019      	str	r1, [r3, #0]
   152f8:	7912      	ldrb	r2, [r2, #4]
   152fa:	711a      	strb	r2, [r3, #4]
   152fc:	f001 fdc9 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   15300:	4ac3      	ldr	r2, [pc, #780]	; (15610 <processOnSMS+0x858>)
   15302:	68fb      	ldr	r3, [r7, #12]
   15304:	0011      	movs	r1, r2
   15306:	0018      	movs	r0, r3
   15308:	4bba      	ldr	r3, [pc, #744]	; (155f4 <processOnSMS+0x83c>)
   1530a:	4798      	blx	r3
   1530c:	1e03      	subs	r3, r0, #0
   1530e:	d02a      	beq.n	15366 <processOnSMS+0x5ae>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15310:	4bc0      	ldr	r3, [pc, #768]	; (15614 <processOnSMS+0x85c>)
   15312:	795b      	ldrb	r3, [r3, #5]
   15314:	2b00      	cmp	r3, #0
   15316:	d101      	bne.n	1531c <processOnSMS+0x564>
   15318:	f001 fdbb 	bl	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   1531c:	2328      	movs	r3, #40	; 0x28
   1531e:	33ff      	adds	r3, #255	; 0xff
   15320:	2208      	movs	r2, #8
   15322:	4694      	mov	ip, r2
   15324:	44bc      	add	ip, r7
   15326:	4463      	add	r3, ip
   15328:	2201      	movs	r2, #1
   1532a:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   1532c:	2001      	movs	r0, #1
   1532e:	4bba      	ldr	r3, [pc, #744]	; (15618 <processOnSMS+0x860>)
   15330:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15332:	4bb3      	ldr	r3, [pc, #716]	; (15600 <processOnSMS+0x848>)
   15334:	2294      	movs	r2, #148	; 0x94
   15336:	0052      	lsls	r2, r2, #1
   15338:	4694      	mov	ip, r2
   1533a:	2208      	movs	r2, #8
   1533c:	4690      	mov	r8, r2
   1533e:	44b8      	add	r8, r7
   15340:	44c4      	add	ip, r8
   15342:	4463      	add	r3, ip
   15344:	781b      	ldrb	r3, [r3, #0]
   15346:	2b00      	cmp	r3, #0
   15348:	d101      	bne.n	1534e <processOnSMS+0x596>
   1534a:	f001 fda2 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   1534e:	230c      	movs	r3, #12
   15350:	2208      	movs	r2, #8
   15352:	4694      	mov	ip, r2
   15354:	44bc      	add	ip, r7
   15356:	4463      	add	r3, ip
   15358:	4ab0      	ldr	r2, [pc, #704]	; (1561c <processOnSMS+0x864>)
   1535a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1535c:	c313      	stmia	r3!, {r0, r1, r4}
   1535e:	6812      	ldr	r2, [r2, #0]
   15360:	601a      	str	r2, [r3, #0]
   15362:	f001 fd96 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   15366:	4aae      	ldr	r2, [pc, #696]	; (15620 <processOnSMS+0x868>)
   15368:	68fb      	ldr	r3, [r7, #12]
   1536a:	0011      	movs	r1, r2
   1536c:	0018      	movs	r0, r3
   1536e:	4ba1      	ldr	r3, [pc, #644]	; (155f4 <processOnSMS+0x83c>)
   15370:	4798      	blx	r3
   15372:	1e03      	subs	r3, r0, #0
   15374:	d02c      	beq.n	153d0 <processOnSMS+0x618>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15376:	4ba7      	ldr	r3, [pc, #668]	; (15614 <processOnSMS+0x85c>)
   15378:	795b      	ldrb	r3, [r3, #5]
   1537a:	2b00      	cmp	r3, #0
   1537c:	d101      	bne.n	15382 <processOnSMS+0x5ca>
   1537e:	f001 fd88 	bl	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   15382:	2328      	movs	r3, #40	; 0x28
   15384:	33ff      	adds	r3, #255	; 0xff
   15386:	2208      	movs	r2, #8
   15388:	4694      	mov	ip, r2
   1538a:	44bc      	add	ip, r7
   1538c:	4463      	add	r3, ip
   1538e:	2201      	movs	r2, #1
   15390:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   15392:	2000      	movs	r0, #0
   15394:	4ba0      	ldr	r3, [pc, #640]	; (15618 <processOnSMS+0x860>)
   15396:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15398:	4b99      	ldr	r3, [pc, #612]	; (15600 <processOnSMS+0x848>)
   1539a:	2294      	movs	r2, #148	; 0x94
   1539c:	0052      	lsls	r2, r2, #1
   1539e:	4694      	mov	ip, r2
   153a0:	2208      	movs	r2, #8
   153a2:	4690      	mov	r8, r2
   153a4:	44b8      	add	r8, r7
   153a6:	44c4      	add	ip, r8
   153a8:	4463      	add	r3, ip
   153aa:	781b      	ldrb	r3, [r3, #0]
   153ac:	2b00      	cmp	r3, #0
   153ae:	d101      	bne.n	153b4 <processOnSMS+0x5fc>
   153b0:	f001 fd6f 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   153b4:	230c      	movs	r3, #12
   153b6:	2208      	movs	r2, #8
   153b8:	4694      	mov	ip, r2
   153ba:	44bc      	add	ip, r7
   153bc:	4463      	add	r3, ip
   153be:	4a99      	ldr	r2, [pc, #612]	; (15624 <processOnSMS+0x86c>)
   153c0:	ca13      	ldmia	r2!, {r0, r1, r4}
   153c2:	c313      	stmia	r3!, {r0, r1, r4}
   153c4:	6811      	ldr	r1, [r2, #0]
   153c6:	6019      	str	r1, [r3, #0]
   153c8:	7912      	ldrb	r2, [r2, #4]
   153ca:	711a      	strb	r2, [r3, #4]
   153cc:	f001 fd61 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   153d0:	4a95      	ldr	r2, [pc, #596]	; (15628 <processOnSMS+0x870>)
   153d2:	68fb      	ldr	r3, [r7, #12]
   153d4:	0011      	movs	r1, r2
   153d6:	0018      	movs	r0, r3
   153d8:	4b86      	ldr	r3, [pc, #536]	; (155f4 <processOnSMS+0x83c>)
   153da:	4798      	blx	r3
   153dc:	1e03      	subs	r3, r0, #0
   153de:	d026      	beq.n	1542e <processOnSMS+0x676>
	{
		saveSinglePhasingSettings(true);
   153e0:	2001      	movs	r0, #1
   153e2:	4b92      	ldr	r3, [pc, #584]	; (1562c <processOnSMS+0x874>)
   153e4:	4798      	blx	r3
		incomingSMSProcessed=true;
   153e6:	2328      	movs	r3, #40	; 0x28
   153e8:	33ff      	adds	r3, #255	; 0xff
   153ea:	2208      	movs	r2, #8
   153ec:	4694      	mov	ip, r2
   153ee:	44bc      	add	ip, r7
   153f0:	4463      	add	r3, ip
   153f2:	2201      	movs	r2, #1
   153f4:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   153f6:	4b82      	ldr	r3, [pc, #520]	; (15600 <processOnSMS+0x848>)
   153f8:	2294      	movs	r2, #148	; 0x94
   153fa:	0052      	lsls	r2, r2, #1
   153fc:	4694      	mov	ip, r2
   153fe:	2208      	movs	r2, #8
   15400:	4690      	mov	r8, r2
   15402:	44b8      	add	r8, r7
   15404:	44c4      	add	ip, r8
   15406:	4463      	add	r3, ip
   15408:	781b      	ldrb	r3, [r3, #0]
   1540a:	2b00      	cmp	r3, #0
   1540c:	d101      	bne.n	15412 <processOnSMS+0x65a>
   1540e:	f001 fd40 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"SPP ON");
   15412:	230c      	movs	r3, #12
   15414:	2208      	movs	r2, #8
   15416:	4694      	mov	ip, r2
   15418:	44bc      	add	ip, r7
   1541a:	4463      	add	r3, ip
   1541c:	4a84      	ldr	r2, [pc, #528]	; (15630 <processOnSMS+0x878>)
   1541e:	6811      	ldr	r1, [r2, #0]
   15420:	6019      	str	r1, [r3, #0]
   15422:	8891      	ldrh	r1, [r2, #4]
   15424:	8099      	strh	r1, [r3, #4]
   15426:	7992      	ldrb	r2, [r2, #6]
   15428:	719a      	strb	r2, [r3, #6]
   1542a:	f001 fd32 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   1542e:	4a81      	ldr	r2, [pc, #516]	; (15634 <processOnSMS+0x87c>)
   15430:	68fb      	ldr	r3, [r7, #12]
   15432:	0011      	movs	r1, r2
   15434:	0018      	movs	r0, r3
   15436:	4b6f      	ldr	r3, [pc, #444]	; (155f4 <processOnSMS+0x83c>)
   15438:	4798      	blx	r3
   1543a:	1e03      	subs	r3, r0, #0
   1543c:	d022      	beq.n	15484 <processOnSMS+0x6cc>
	{
		saveSinglePhasingSettings(false);
   1543e:	2000      	movs	r0, #0
   15440:	4b7a      	ldr	r3, [pc, #488]	; (1562c <processOnSMS+0x874>)
   15442:	4798      	blx	r3
		incomingSMSProcessed=true;
   15444:	2328      	movs	r3, #40	; 0x28
   15446:	33ff      	adds	r3, #255	; 0xff
   15448:	2208      	movs	r2, #8
   1544a:	4694      	mov	ip, r2
   1544c:	44bc      	add	ip, r7
   1544e:	4463      	add	r3, ip
   15450:	2201      	movs	r2, #1
   15452:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15454:	4b6a      	ldr	r3, [pc, #424]	; (15600 <processOnSMS+0x848>)
   15456:	2294      	movs	r2, #148	; 0x94
   15458:	0052      	lsls	r2, r2, #1
   1545a:	4694      	mov	ip, r2
   1545c:	2208      	movs	r2, #8
   1545e:	4690      	mov	r8, r2
   15460:	44b8      	add	r8, r7
   15462:	44c4      	add	ip, r8
   15464:	4463      	add	r3, ip
   15466:	781b      	ldrb	r3, [r3, #0]
   15468:	2b00      	cmp	r3, #0
   1546a:	d101      	bne.n	15470 <processOnSMS+0x6b8>
   1546c:	f001 fd11 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"SPP OFF");
   15470:	230c      	movs	r3, #12
   15472:	2208      	movs	r2, #8
   15474:	4694      	mov	ip, r2
   15476:	44bc      	add	ip, r7
   15478:	4463      	add	r3, ip
   1547a:	4a6f      	ldr	r2, [pc, #444]	; (15638 <processOnSMS+0x880>)
   1547c:	ca03      	ldmia	r2!, {r0, r1}
   1547e:	c303      	stmia	r3!, {r0, r1}
   15480:	f001 fd07 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   15484:	4a6d      	ldr	r2, [pc, #436]	; (1563c <processOnSMS+0x884>)
   15486:	68fb      	ldr	r3, [r7, #12]
   15488:	0011      	movs	r1, r2
   1548a:	0018      	movs	r0, r3
   1548c:	4b59      	ldr	r3, [pc, #356]	; (155f4 <processOnSMS+0x83c>)
   1548e:	4798      	blx	r3
   15490:	1e03      	subs	r3, r0, #0
   15492:	d055      	beq.n	15540 <processOnSMS+0x788>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15494:	68fb      	ldr	r3, [r7, #12]
   15496:	1d1c      	adds	r4, r3, #4
   15498:	68fb      	ldr	r3, [r7, #12]
   1549a:	0018      	movs	r0, r3
   1549c:	4b68      	ldr	r3, [pc, #416]	; (15640 <processOnSMS+0x888>)
   1549e:	4798      	blx	r3
   154a0:	0002      	movs	r2, r0
   154a2:	68fb      	ldr	r3, [r7, #12]
   154a4:	0021      	movs	r1, r4
   154a6:	0018      	movs	r0, r3
   154a8:	4b66      	ldr	r3, [pc, #408]	; (15644 <processOnSMS+0x88c>)
   154aa:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
   154ac:	68fb      	ldr	r3, [r7, #12]
   154ae:	0018      	movs	r0, r3
   154b0:	4b65      	ldr	r3, [pc, #404]	; (15648 <processOnSMS+0x890>)
   154b2:	4798      	blx	r3
   154b4:	0002      	movs	r2, r0
   154b6:	2393      	movs	r3, #147	; 0x93
   154b8:	005b      	lsls	r3, r3, #1
   154ba:	2108      	movs	r1, #8
   154bc:	468c      	mov	ip, r1
   154be:	44bc      	add	ip, r7
   154c0:	4463      	add	r3, ip
   154c2:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   154c4:	2393      	movs	r3, #147	; 0x93
   154c6:	005b      	lsls	r3, r3, #1
   154c8:	2208      	movs	r2, #8
   154ca:	4694      	mov	ip, r2
   154cc:	44bc      	add	ip, r7
   154ce:	4463      	add	r3, ip
   154d0:	781b      	ldrb	r3, [r3, #0]
   154d2:	2b13      	cmp	r3, #19
   154d4:	d807      	bhi.n	154e6 <processOnSMS+0x72e>
   154d6:	2393      	movs	r3, #147	; 0x93
   154d8:	005b      	lsls	r3, r3, #1
   154da:	2208      	movs	r2, #8
   154dc:	4694      	mov	ip, r2
   154de:	44bc      	add	ip, r7
   154e0:	4463      	add	r3, ip
   154e2:	2214      	movs	r2, #20
   154e4:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
   154e6:	2393      	movs	r3, #147	; 0x93
   154e8:	005b      	lsls	r3, r3, #1
   154ea:	2208      	movs	r2, #8
   154ec:	4694      	mov	ip, r2
   154ee:	44bc      	add	ip, r7
   154f0:	4463      	add	r3, ip
   154f2:	781b      	ldrb	r3, [r3, #0]
   154f4:	b29b      	uxth	r3, r3
   154f6:	0018      	movs	r0, r3
   154f8:	4b54      	ldr	r3, [pc, #336]	; (1564c <processOnSMS+0x894>)
   154fa:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   154fc:	2328      	movs	r3, #40	; 0x28
   154fe:	33ff      	adds	r3, #255	; 0xff
   15500:	2208      	movs	r2, #8
   15502:	4694      	mov	ip, r2
   15504:	44bc      	add	ip, r7
   15506:	4463      	add	r3, ip
   15508:	2201      	movs	r2, #1
   1550a:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   1550c:	4b3c      	ldr	r3, [pc, #240]	; (15600 <processOnSMS+0x848>)
   1550e:	2294      	movs	r2, #148	; 0x94
   15510:	0052      	lsls	r2, r2, #1
   15512:	4694      	mov	ip, r2
   15514:	2208      	movs	r2, #8
   15516:	4690      	mov	r8, r2
   15518:	44b8      	add	r8, r7
   1551a:	44c4      	add	ip, r8
   1551c:	4463      	add	r3, ip
   1551e:	781b      	ldrb	r3, [r3, #0]
   15520:	2b00      	cmp	r3, #0
   15522:	d101      	bne.n	15528 <processOnSMS+0x770>
   15524:	f001 fcb5 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   15528:	230c      	movs	r3, #12
   1552a:	2208      	movs	r2, #8
   1552c:	4694      	mov	ip, r2
   1552e:	44bc      	add	ip, r7
   15530:	4463      	add	r3, ip
   15532:	4a47      	ldr	r2, [pc, #284]	; (15650 <processOnSMS+0x898>)
   15534:	ca13      	ldmia	r2!, {r0, r1, r4}
   15536:	c313      	stmia	r3!, {r0, r1, r4}
   15538:	7812      	ldrb	r2, [r2, #0]
   1553a:	701a      	strb	r2, [r3, #0]
   1553c:	f001 fca9 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15540:	4a44      	ldr	r2, [pc, #272]	; (15654 <processOnSMS+0x89c>)
   15542:	68fb      	ldr	r3, [r7, #12]
   15544:	0011      	movs	r1, r2
   15546:	0018      	movs	r0, r3
   15548:	4b2a      	ldr	r3, [pc, #168]	; (155f4 <processOnSMS+0x83c>)
   1554a:	4798      	blx	r3
   1554c:	1e03      	subs	r3, r0, #0
   1554e:	d022      	beq.n	15596 <processOnSMS+0x7de>
	{
		savePhaseSequenceProtectionSettings(true);
   15550:	2001      	movs	r0, #1
   15552:	4b41      	ldr	r3, [pc, #260]	; (15658 <processOnSMS+0x8a0>)
   15554:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15556:	2328      	movs	r3, #40	; 0x28
   15558:	33ff      	adds	r3, #255	; 0xff
   1555a:	2208      	movs	r2, #8
   1555c:	4694      	mov	ip, r2
   1555e:	44bc      	add	ip, r7
   15560:	4463      	add	r3, ip
   15562:	2201      	movs	r2, #1
   15564:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15566:	4b26      	ldr	r3, [pc, #152]	; (15600 <processOnSMS+0x848>)
   15568:	2294      	movs	r2, #148	; 0x94
   1556a:	0052      	lsls	r2, r2, #1
   1556c:	4694      	mov	ip, r2
   1556e:	2208      	movs	r2, #8
   15570:	4690      	mov	r8, r2
   15572:	44b8      	add	r8, r7
   15574:	44c4      	add	ip, r8
   15576:	4463      	add	r3, ip
   15578:	781b      	ldrb	r3, [r3, #0]
   1557a:	2b00      	cmp	r3, #0
   1557c:	d101      	bne.n	15582 <processOnSMS+0x7ca>
   1557e:	f001 fc88 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"SEQP ON");
   15582:	230c      	movs	r3, #12
   15584:	2208      	movs	r2, #8
   15586:	4694      	mov	ip, r2
   15588:	44bc      	add	ip, r7
   1558a:	4463      	add	r3, ip
   1558c:	4a33      	ldr	r2, [pc, #204]	; (1565c <processOnSMS+0x8a4>)
   1558e:	ca03      	ldmia	r2!, {r0, r1}
   15590:	c303      	stmia	r3!, {r0, r1}
   15592:	f001 fc7e 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   15596:	4a32      	ldr	r2, [pc, #200]	; (15660 <processOnSMS+0x8a8>)
   15598:	68fb      	ldr	r3, [r7, #12]
   1559a:	0011      	movs	r1, r2
   1559c:	0018      	movs	r0, r3
   1559e:	4b15      	ldr	r3, [pc, #84]	; (155f4 <processOnSMS+0x83c>)
   155a0:	4798      	blx	r3
   155a2:	1e03      	subs	r3, r0, #0
   155a4:	d060      	beq.n	15668 <processOnSMS+0x8b0>
	{
		savePhaseSequenceProtectionSettings(false);
   155a6:	2000      	movs	r0, #0
   155a8:	4b2b      	ldr	r3, [pc, #172]	; (15658 <processOnSMS+0x8a0>)
   155aa:	4798      	blx	r3

		incomingSMSProcessed=true;
   155ac:	2328      	movs	r3, #40	; 0x28
   155ae:	33ff      	adds	r3, #255	; 0xff
   155b0:	2208      	movs	r2, #8
   155b2:	4694      	mov	ip, r2
   155b4:	44bc      	add	ip, r7
   155b6:	4463      	add	r3, ip
   155b8:	2201      	movs	r2, #1
   155ba:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   155bc:	4b10      	ldr	r3, [pc, #64]	; (15600 <processOnSMS+0x848>)
   155be:	2294      	movs	r2, #148	; 0x94
   155c0:	0052      	lsls	r2, r2, #1
   155c2:	4694      	mov	ip, r2
   155c4:	2208      	movs	r2, #8
   155c6:	4690      	mov	r8, r2
   155c8:	44b8      	add	r8, r7
   155ca:	44c4      	add	ip, r8
   155cc:	4463      	add	r3, ip
   155ce:	781b      	ldrb	r3, [r3, #0]
   155d0:	2b00      	cmp	r3, #0
   155d2:	d101      	bne.n	155d8 <processOnSMS+0x820>
   155d4:	f001 fc5d 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"SEQP OFF");
   155d8:	230c      	movs	r3, #12
   155da:	2208      	movs	r2, #8
   155dc:	4694      	mov	ip, r2
   155de:	44bc      	add	ip, r7
   155e0:	4463      	add	r3, ip
   155e2:	4a20      	ldr	r2, [pc, #128]	; (15664 <processOnSMS+0x8ac>)
   155e4:	ca03      	ldmia	r2!, {r0, r1}
   155e6:	c303      	stmia	r3!, {r0, r1}
   155e8:	7812      	ldrb	r2, [r2, #0]
   155ea:	701a      	strb	r2, [r3, #0]
   155ec:	f001 fc51 	bl	16e92 <processOnSMS+0x20da>
   155f0:	0002a130 	.word	0x0002a130
   155f4:	00014019 	.word	0x00014019
   155f8:	0001129d 	.word	0x0001129d
   155fc:	0001ae1d 	.word	0x0001ae1d
   15600:	fffffeda 	.word	0xfffffeda
   15604:	0002a138 	.word	0x0002a138
   15608:	0002a148 	.word	0x0002a148
   1560c:	0002a150 	.word	0x0002a150
   15610:	0002a164 	.word	0x0002a164
   15614:	20000628 	.word	0x20000628
   15618:	0001145d 	.word	0x0001145d
   1561c:	0002a16c 	.word	0x0002a16c
   15620:	0002a17c 	.word	0x0002a17c
   15624:	0002a184 	.word	0x0002a184
   15628:	0002a198 	.word	0x0002a198
   1562c:	000115cd 	.word	0x000115cd
   15630:	0002a1a0 	.word	0x0002a1a0
   15634:	0002a1a8 	.word	0x0002a1a8
   15638:	0002a1b0 	.word	0x0002a1b0
   1563c:	0002a1b8 	.word	0x0002a1b8
   15640:	000290a3 	.word	0x000290a3
   15644:	00028def 	.word	0x00028def
   15648:	00028cf9 	.word	0x00028cf9
   1564c:	00011619 	.word	0x00011619
   15650:	0002a1c0 	.word	0x0002a1c0
   15654:	0002a1d0 	.word	0x0002a1d0
   15658:	00011665 	.word	0x00011665
   1565c:	0002a1d8 	.word	0x0002a1d8
   15660:	0002a1e0 	.word	0x0002a1e0
   15664:	0002a1e8 	.word	0x0002a1e8
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   15668:	4adc      	ldr	r2, [pc, #880]	; (159dc <processOnSMS+0xc24>)
   1566a:	68fb      	ldr	r3, [r7, #12]
   1566c:	0011      	movs	r1, r2
   1566e:	0018      	movs	r0, r3
   15670:	4bdb      	ldr	r3, [pc, #876]	; (159e0 <processOnSMS+0xc28>)
   15672:	4798      	blx	r3
   15674:	1e03      	subs	r3, r0, #0
   15676:	d06c      	beq.n	15752 <processOnSMS+0x99a>
	{
		if (strlen(received_command)>3)
   15678:	68fb      	ldr	r3, [r7, #12]
   1567a:	0018      	movs	r0, r3
   1567c:	4bd9      	ldr	r3, [pc, #868]	; (159e4 <processOnSMS+0xc2c>)
   1567e:	4798      	blx	r3
   15680:	0003      	movs	r3, r0
   15682:	2b03      	cmp	r3, #3
   15684:	d801      	bhi.n	1568a <processOnSMS+0x8d2>
   15686:	f001 fc04 	bl	16e92 <processOnSMS+0x20da>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1568a:	68fb      	ldr	r3, [r7, #12]
   1568c:	1cdc      	adds	r4, r3, #3
   1568e:	68fb      	ldr	r3, [r7, #12]
   15690:	0018      	movs	r0, r3
   15692:	4bd4      	ldr	r3, [pc, #848]	; (159e4 <processOnSMS+0xc2c>)
   15694:	4798      	blx	r3
   15696:	0002      	movs	r2, r0
   15698:	68fb      	ldr	r3, [r7, #12]
   1569a:	0021      	movs	r1, r4
   1569c:	0018      	movs	r0, r3
   1569e:	4bd2      	ldr	r3, [pc, #840]	; (159e8 <processOnSMS+0xc30>)
   156a0:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   156a2:	68fb      	ldr	r3, [r7, #12]
   156a4:	781b      	ldrb	r3, [r3, #0]
   156a6:	2b4c      	cmp	r3, #76	; 0x4c
   156a8:	d009      	beq.n	156be <processOnSMS+0x906>
   156aa:	68fb      	ldr	r3, [r7, #12]
   156ac:	781b      	ldrb	r3, [r3, #0]
   156ae:	2b53      	cmp	r3, #83	; 0x53
   156b0:	d005      	beq.n	156be <processOnSMS+0x906>
   156b2:	68fb      	ldr	r3, [r7, #12]
   156b4:	781b      	ldrb	r3, [r3, #0]
   156b6:	2b4f      	cmp	r3, #79	; 0x4f
   156b8:	d001      	beq.n	156be <processOnSMS+0x906>
   156ba:	f001 fbea 	bl	16e92 <processOnSMS+0x20da>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
   156be:	68fb      	ldr	r3, [r7, #12]
   156c0:	b2db      	uxtb	r3, r3
   156c2:	0018      	movs	r0, r3
   156c4:	4bc9      	ldr	r3, [pc, #804]	; (159ec <processOnSMS+0xc34>)
   156c6:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   156c8:	2328      	movs	r3, #40	; 0x28
   156ca:	33ff      	adds	r3, #255	; 0xff
   156cc:	2208      	movs	r2, #8
   156ce:	4694      	mov	ip, r2
   156d0:	44bc      	add	ip, r7
   156d2:	4463      	add	r3, ip
   156d4:	2201      	movs	r2, #1
   156d6:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   156d8:	4bc5      	ldr	r3, [pc, #788]	; (159f0 <processOnSMS+0xc38>)
   156da:	2294      	movs	r2, #148	; 0x94
   156dc:	0052      	lsls	r2, r2, #1
   156de:	4694      	mov	ip, r2
   156e0:	2208      	movs	r2, #8
   156e2:	4690      	mov	r8, r2
   156e4:	44b8      	add	r8, r7
   156e6:	44c4      	add	ip, r8
   156e8:	4463      	add	r3, ip
   156ea:	781b      	ldrb	r3, [r3, #0]
   156ec:	2b00      	cmp	r3, #0
   156ee:	d101      	bne.n	156f4 <processOnSMS+0x93c>
   156f0:	f001 fbcf 	bl	16e92 <processOnSMS+0x20da>
				{
					strcpy(resep_msg,"DND : ");
   156f4:	230c      	movs	r3, #12
   156f6:	2208      	movs	r2, #8
   156f8:	4694      	mov	ip, r2
   156fa:	44bc      	add	ip, r7
   156fc:	4463      	add	r3, ip
   156fe:	4abd      	ldr	r2, [pc, #756]	; (159f4 <processOnSMS+0xc3c>)
   15700:	6811      	ldr	r1, [r2, #0]
   15702:	6019      	str	r1, [r3, #0]
   15704:	8891      	ldrh	r1, [r2, #4]
   15706:	8099      	strh	r1, [r3, #4]
   15708:	7992      	ldrb	r2, [r2, #6]
   1570a:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   1570c:	68fa      	ldr	r2, [r7, #12]
   1570e:	230c      	movs	r3, #12
   15710:	2108      	movs	r1, #8
   15712:	468c      	mov	ip, r1
   15714:	44bc      	add	ip, r7
   15716:	4463      	add	r3, ip
   15718:	0011      	movs	r1, r2
   1571a:	0018      	movs	r0, r3
   1571c:	4bb6      	ldr	r3, [pc, #728]	; (159f8 <processOnSMS+0xc40>)
   1571e:	4798      	blx	r3
					strcat(resep_msg," OK");
   15720:	230c      	movs	r3, #12
   15722:	2208      	movs	r2, #8
   15724:	4694      	mov	ip, r2
   15726:	44bc      	add	ip, r7
   15728:	4463      	add	r3, ip
   1572a:	0018      	movs	r0, r3
   1572c:	4bad      	ldr	r3, [pc, #692]	; (159e4 <processOnSMS+0xc2c>)
   1572e:	4798      	blx	r3
   15730:	0003      	movs	r3, r0
   15732:	001a      	movs	r2, r3
   15734:	230c      	movs	r3, #12
   15736:	2108      	movs	r1, #8
   15738:	468c      	mov	ip, r1
   1573a:	44bc      	add	ip, r7
   1573c:	4463      	add	r3, ip
   1573e:	189a      	adds	r2, r3, r2
   15740:	4bae      	ldr	r3, [pc, #696]	; (159fc <processOnSMS+0xc44>)
   15742:	0010      	movs	r0, r2
   15744:	0019      	movs	r1, r3
   15746:	2304      	movs	r3, #4
   15748:	001a      	movs	r2, r3
   1574a:	4bad      	ldr	r3, [pc, #692]	; (15a00 <processOnSMS+0xc48>)
   1574c:	4798      	blx	r3
   1574e:	f001 fba0 	bl	16e92 <processOnSMS+0x20da>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   15752:	4aac      	ldr	r2, [pc, #688]	; (15a04 <processOnSMS+0xc4c>)
   15754:	68fb      	ldr	r3, [r7, #12]
   15756:	0011      	movs	r1, r2
   15758:	0018      	movs	r0, r3
   1575a:	4ba1      	ldr	r3, [pc, #644]	; (159e0 <processOnSMS+0xc28>)
   1575c:	4798      	blx	r3
   1575e:	1e03      	subs	r3, r0, #0
   15760:	d072      	beq.n	15848 <processOnSMS+0xa90>
	{
		if (strlen(received_command)>4)
   15762:	68fb      	ldr	r3, [r7, #12]
   15764:	0018      	movs	r0, r3
   15766:	4b9f      	ldr	r3, [pc, #636]	; (159e4 <processOnSMS+0xc2c>)
   15768:	4798      	blx	r3
   1576a:	0003      	movs	r3, r0
   1576c:	2b04      	cmp	r3, #4
   1576e:	d801      	bhi.n	15774 <processOnSMS+0x9bc>
   15770:	f001 fb8f 	bl	16e92 <processOnSMS+0x20da>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15774:	68fb      	ldr	r3, [r7, #12]
   15776:	1d1c      	adds	r4, r3, #4
   15778:	68fb      	ldr	r3, [r7, #12]
   1577a:	0018      	movs	r0, r3
   1577c:	4b99      	ldr	r3, [pc, #612]	; (159e4 <processOnSMS+0xc2c>)
   1577e:	4798      	blx	r3
   15780:	0002      	movs	r2, r0
   15782:	68fb      	ldr	r3, [r7, #12]
   15784:	0021      	movs	r1, r4
   15786:	0018      	movs	r0, r3
   15788:	4b97      	ldr	r3, [pc, #604]	; (159e8 <processOnSMS+0xc30>)
   1578a:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   1578c:	68fb      	ldr	r3, [r7, #12]
   1578e:	0018      	movs	r0, r3
   15790:	4b9d      	ldr	r3, [pc, #628]	; (15a08 <processOnSMS+0xc50>)
   15792:	4798      	blx	r3
   15794:	0002      	movs	r2, r0
   15796:	2326      	movs	r3, #38	; 0x26
   15798:	33ff      	adds	r3, #255	; 0xff
   1579a:	2108      	movs	r1, #8
   1579c:	468c      	mov	ip, r1
   1579e:	44bc      	add	ip, r7
   157a0:	4463      	add	r3, ip
   157a2:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   157a4:	2326      	movs	r3, #38	; 0x26
   157a6:	33ff      	adds	r3, #255	; 0xff
   157a8:	2208      	movs	r2, #8
   157aa:	4694      	mov	ip, r2
   157ac:	44bc      	add	ip, r7
   157ae:	4463      	add	r3, ip
   157b0:	781b      	ldrb	r3, [r3, #0]
   157b2:	2b02      	cmp	r3, #2
   157b4:	d901      	bls.n	157ba <processOnSMS+0xa02>
   157b6:	f001 fb6c 	bl	16e92 <processOnSMS+0x20da>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   157ba:	2326      	movs	r3, #38	; 0x26
   157bc:	33ff      	adds	r3, #255	; 0xff
   157be:	2208      	movs	r2, #8
   157c0:	4694      	mov	ip, r2
   157c2:	44bc      	add	ip, r7
   157c4:	4463      	add	r3, ip
   157c6:	781b      	ldrb	r3, [r3, #0]
   157c8:	2b01      	cmp	r3, #1
   157ca:	d10b      	bne.n	157e4 <processOnSMS+0xa2c>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   157cc:	4b8f      	ldr	r3, [pc, #572]	; (15a0c <processOnSMS+0xc54>)
   157ce:	785b      	ldrb	r3, [r3, #1]
   157d0:	2b00      	cmp	r3, #0
   157d2:	d107      	bne.n	157e4 <processOnSMS+0xa2c>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   157d4:	2326      	movs	r3, #38	; 0x26
   157d6:	33ff      	adds	r3, #255	; 0xff
   157d8:	2208      	movs	r2, #8
   157da:	4694      	mov	ip, r2
   157dc:	44bc      	add	ip, r7
   157de:	4463      	add	r3, ip
   157e0:	2200      	movs	r2, #0
   157e2:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   157e4:	2326      	movs	r3, #38	; 0x26
   157e6:	33ff      	adds	r3, #255	; 0xff
   157e8:	2208      	movs	r2, #8
   157ea:	4694      	mov	ip, r2
   157ec:	44bc      	add	ip, r7
   157ee:	4463      	add	r3, ip
   157f0:	781b      	ldrb	r3, [r3, #0]
   157f2:	0018      	movs	r0, r3
   157f4:	4b86      	ldr	r3, [pc, #536]	; (15a10 <processOnSMS+0xc58>)
   157f6:	4798      	blx	r3
				incomingSMSProcessed=true;
   157f8:	2328      	movs	r3, #40	; 0x28
   157fa:	33ff      	adds	r3, #255	; 0xff
   157fc:	2208      	movs	r2, #8
   157fe:	4694      	mov	ip, r2
   15800:	44bc      	add	ip, r7
   15802:	4463      	add	r3, ip
   15804:	2201      	movs	r2, #1
   15806:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15808:	4b79      	ldr	r3, [pc, #484]	; (159f0 <processOnSMS+0xc38>)
   1580a:	2294      	movs	r2, #148	; 0x94
   1580c:	0052      	lsls	r2, r2, #1
   1580e:	4694      	mov	ip, r2
   15810:	2208      	movs	r2, #8
   15812:	4690      	mov	r8, r2
   15814:	44b8      	add	r8, r7
   15816:	44c4      	add	ip, r8
   15818:	4463      	add	r3, ip
   1581a:	781b      	ldrb	r3, [r3, #0]
   1581c:	2b00      	cmp	r3, #0
   1581e:	d101      	bne.n	15824 <processOnSMS+0xa6c>
   15820:	f001 fb37 	bl	16e92 <processOnSMS+0x20da>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15824:	2326      	movs	r3, #38	; 0x26
   15826:	33ff      	adds	r3, #255	; 0xff
   15828:	2208      	movs	r2, #8
   1582a:	4694      	mov	ip, r2
   1582c:	44bc      	add	ip, r7
   1582e:	4463      	add	r3, ip
   15830:	781a      	ldrb	r2, [r3, #0]
   15832:	4978      	ldr	r1, [pc, #480]	; (15a14 <processOnSMS+0xc5c>)
   15834:	230c      	movs	r3, #12
   15836:	2008      	movs	r0, #8
   15838:	4684      	mov	ip, r0
   1583a:	44bc      	add	ip, r7
   1583c:	4463      	add	r3, ip
   1583e:	0018      	movs	r0, r3
   15840:	4b75      	ldr	r3, [pc, #468]	; (15a18 <processOnSMS+0xc60>)
   15842:	4798      	blx	r3
   15844:	f001 fb25 	bl	16e92 <processOnSMS+0x20da>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15848:	4a74      	ldr	r2, [pc, #464]	; (15a1c <processOnSMS+0xc64>)
   1584a:	68fb      	ldr	r3, [r7, #12]
   1584c:	0011      	movs	r1, r2
   1584e:	0018      	movs	r0, r3
   15850:	4b63      	ldr	r3, [pc, #396]	; (159e0 <processOnSMS+0xc28>)
   15852:	4798      	blx	r3
   15854:	1e03      	subs	r3, r0, #0
   15856:	d100      	bne.n	1585a <processOnSMS+0xaa2>
   15858:	e092      	b.n	15980 <processOnSMS+0xbc8>
	{
		if (strlen(received_command)>8)
   1585a:	68fb      	ldr	r3, [r7, #12]
   1585c:	0018      	movs	r0, r3
   1585e:	4b61      	ldr	r3, [pc, #388]	; (159e4 <processOnSMS+0xc2c>)
   15860:	4798      	blx	r3
   15862:	0003      	movs	r3, r0
   15864:	2b08      	cmp	r3, #8
   15866:	d801      	bhi.n	1586c <processOnSMS+0xab4>
   15868:	f001 fb13 	bl	16e92 <processOnSMS+0x20da>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   1586c:	68fb      	ldr	r3, [r7, #12]
   1586e:	3308      	adds	r3, #8
   15870:	001c      	movs	r4, r3
   15872:	68fb      	ldr	r3, [r7, #12]
   15874:	0018      	movs	r0, r3
   15876:	4b5b      	ldr	r3, [pc, #364]	; (159e4 <processOnSMS+0xc2c>)
   15878:	4798      	blx	r3
   1587a:	0002      	movs	r2, r0
   1587c:	68fb      	ldr	r3, [r7, #12]
   1587e:	0021      	movs	r1, r4
   15880:	0018      	movs	r0, r3
   15882:	4b59      	ldr	r3, [pc, #356]	; (159e8 <processOnSMS+0xc30>)
   15884:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15886:	4b61      	ldr	r3, [pc, #388]	; (15a0c <processOnSMS+0xc54>)
   15888:	785b      	ldrb	r3, [r3, #1]
   1588a:	2b00      	cmp	r3, #0
   1588c:	d101      	bne.n	15892 <processOnSMS+0xada>
   1588e:	f001 fb00 	bl	16e92 <processOnSMS+0x20da>
			{
				uint8_t detectionMethod=0;
   15892:	2392      	movs	r3, #146	; 0x92
   15894:	005b      	lsls	r3, r3, #1
   15896:	2208      	movs	r2, #8
   15898:	4694      	mov	ip, r2
   1589a:	44bc      	add	ip, r7
   1589c:	4463      	add	r3, ip
   1589e:	2200      	movs	r2, #0
   158a0:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   158a2:	68fb      	ldr	r3, [r7, #12]
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	2b43      	cmp	r3, #67	; 0x43
   158a8:	d108      	bne.n	158bc <processOnSMS+0xb04>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   158aa:	2392      	movs	r3, #146	; 0x92
   158ac:	005b      	lsls	r3, r3, #1
   158ae:	2208      	movs	r2, #8
   158b0:	4694      	mov	ip, r2
   158b2:	44bc      	add	ip, r7
   158b4:	4463      	add	r3, ip
   158b6:	2202      	movs	r2, #2
   158b8:	701a      	strb	r2, [r3, #0]
   158ba:	e00b      	b.n	158d4 <processOnSMS+0xb1c>
				}
				else if(received_command[0]=='P')
   158bc:	68fb      	ldr	r3, [r7, #12]
   158be:	781b      	ldrb	r3, [r3, #0]
   158c0:	2b50      	cmp	r3, #80	; 0x50
   158c2:	d107      	bne.n	158d4 <processOnSMS+0xb1c>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   158c4:	2392      	movs	r3, #146	; 0x92
   158c6:	005b      	lsls	r3, r3, #1
   158c8:	2208      	movs	r2, #8
   158ca:	4694      	mov	ip, r2
   158cc:	44bc      	add	ip, r7
   158ce:	4463      	add	r3, ip
   158d0:	2201      	movs	r2, #1
   158d2:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   158d4:	2392      	movs	r3, #146	; 0x92
   158d6:	005b      	lsls	r3, r3, #1
   158d8:	2208      	movs	r2, #8
   158da:	4694      	mov	ip, r2
   158dc:	44bc      	add	ip, r7
   158de:	4463      	add	r3, ip
   158e0:	781b      	ldrb	r3, [r3, #0]
   158e2:	2b00      	cmp	r3, #0
   158e4:	d101      	bne.n	158ea <processOnSMS+0xb32>
   158e6:	f001 fad4 	bl	16e92 <processOnSMS+0x20da>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   158ea:	2392      	movs	r3, #146	; 0x92
   158ec:	005b      	lsls	r3, r3, #1
   158ee:	2208      	movs	r2, #8
   158f0:	4694      	mov	ip, r2
   158f2:	44bc      	add	ip, r7
   158f4:	4463      	add	r3, ip
   158f6:	781b      	ldrb	r3, [r3, #0]
   158f8:	0018      	movs	r0, r3
   158fa:	4b49      	ldr	r3, [pc, #292]	; (15a20 <processOnSMS+0xc68>)
   158fc:	4798      	blx	r3
					incomingSMSProcessed=true;
   158fe:	2328      	movs	r3, #40	; 0x28
   15900:	33ff      	adds	r3, #255	; 0xff
   15902:	2208      	movs	r2, #8
   15904:	4694      	mov	ip, r2
   15906:	44bc      	add	ip, r7
   15908:	4463      	add	r3, ip
   1590a:	2201      	movs	r2, #1
   1590c:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   1590e:	4b38      	ldr	r3, [pc, #224]	; (159f0 <processOnSMS+0xc38>)
   15910:	2294      	movs	r2, #148	; 0x94
   15912:	0052      	lsls	r2, r2, #1
   15914:	4694      	mov	ip, r2
   15916:	2208      	movs	r2, #8
   15918:	4690      	mov	r8, r2
   1591a:	44b8      	add	r8, r7
   1591c:	44c4      	add	ip, r8
   1591e:	4463      	add	r3, ip
   15920:	781b      	ldrb	r3, [r3, #0]
   15922:	2b00      	cmp	r3, #0
   15924:	d101      	bne.n	1592a <processOnSMS+0xb72>
   15926:	f001 fab4 	bl	16e92 <processOnSMS+0x20da>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   1592a:	230c      	movs	r3, #12
   1592c:	2208      	movs	r2, #8
   1592e:	4694      	mov	ip, r2
   15930:	44bc      	add	ip, r7
   15932:	4463      	add	r3, ip
   15934:	4a3b      	ldr	r2, [pc, #236]	; (15a24 <processOnSMS+0xc6c>)
   15936:	ca13      	ldmia	r2!, {r0, r1, r4}
   15938:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   1593a:	68fa      	ldr	r2, [r7, #12]
   1593c:	230c      	movs	r3, #12
   1593e:	2108      	movs	r1, #8
   15940:	468c      	mov	ip, r1
   15942:	44bc      	add	ip, r7
   15944:	4463      	add	r3, ip
   15946:	0011      	movs	r1, r2
   15948:	0018      	movs	r0, r3
   1594a:	4b2b      	ldr	r3, [pc, #172]	; (159f8 <processOnSMS+0xc40>)
   1594c:	4798      	blx	r3
						strcat(resep_msg," OK");
   1594e:	230c      	movs	r3, #12
   15950:	2208      	movs	r2, #8
   15952:	4694      	mov	ip, r2
   15954:	44bc      	add	ip, r7
   15956:	4463      	add	r3, ip
   15958:	0018      	movs	r0, r3
   1595a:	4b22      	ldr	r3, [pc, #136]	; (159e4 <processOnSMS+0xc2c>)
   1595c:	4798      	blx	r3
   1595e:	0003      	movs	r3, r0
   15960:	001a      	movs	r2, r3
   15962:	230c      	movs	r3, #12
   15964:	2108      	movs	r1, #8
   15966:	468c      	mov	ip, r1
   15968:	44bc      	add	ip, r7
   1596a:	4463      	add	r3, ip
   1596c:	189a      	adds	r2, r3, r2
   1596e:	4b23      	ldr	r3, [pc, #140]	; (159fc <processOnSMS+0xc44>)
   15970:	0010      	movs	r0, r2
   15972:	0019      	movs	r1, r3
   15974:	2304      	movs	r3, #4
   15976:	001a      	movs	r2, r3
   15978:	4b21      	ldr	r3, [pc, #132]	; (15a00 <processOnSMS+0xc48>)
   1597a:	4798      	blx	r3
   1597c:	f001 fa89 	bl	16e92 <processOnSMS+0x20da>
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15980:	4a29      	ldr	r2, [pc, #164]	; (15a28 <processOnSMS+0xc70>)
   15982:	68fb      	ldr	r3, [r7, #12]
   15984:	0011      	movs	r1, r2
   15986:	0018      	movs	r0, r3
   15988:	4b15      	ldr	r3, [pc, #84]	; (159e0 <processOnSMS+0xc28>)
   1598a:	4798      	blx	r3
   1598c:	1e03      	subs	r3, r0, #0
   1598e:	d051      	beq.n	15a34 <processOnSMS+0xc7c>
	{
		saveMotorVoltageBypassSettings(true);
   15990:	2001      	movs	r0, #1
   15992:	4b26      	ldr	r3, [pc, #152]	; (15a2c <processOnSMS+0xc74>)
   15994:	4798      	blx	r3
		incomingSMSProcessed=true;
   15996:	2328      	movs	r3, #40	; 0x28
   15998:	33ff      	adds	r3, #255	; 0xff
   1599a:	2208      	movs	r2, #8
   1599c:	4694      	mov	ip, r2
   1599e:	44bc      	add	ip, r7
   159a0:	4463      	add	r3, ip
   159a2:	2201      	movs	r2, #1
   159a4:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   159a6:	4b12      	ldr	r3, [pc, #72]	; (159f0 <processOnSMS+0xc38>)
   159a8:	2294      	movs	r2, #148	; 0x94
   159aa:	0052      	lsls	r2, r2, #1
   159ac:	4694      	mov	ip, r2
   159ae:	2208      	movs	r2, #8
   159b0:	4690      	mov	r8, r2
   159b2:	44b8      	add	r8, r7
   159b4:	44c4      	add	ip, r8
   159b6:	4463      	add	r3, ip
   159b8:	781b      	ldrb	r3, [r3, #0]
   159ba:	2b00      	cmp	r3, #0
   159bc:	d101      	bne.n	159c2 <processOnSMS+0xc0a>
   159be:	f001 fa68 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   159c2:	230c      	movs	r3, #12
   159c4:	2208      	movs	r2, #8
   159c6:	4694      	mov	ip, r2
   159c8:	44bc      	add	ip, r7
   159ca:	4463      	add	r3, ip
   159cc:	4a18      	ldr	r2, [pc, #96]	; (15a30 <processOnSMS+0xc78>)
   159ce:	ca13      	ldmia	r2!, {r0, r1, r4}
   159d0:	c313      	stmia	r3!, {r0, r1, r4}
   159d2:	ca13      	ldmia	r2!, {r0, r1, r4}
   159d4:	c313      	stmia	r3!, {r0, r1, r4}
   159d6:	f001 fa5c 	bl	16e92 <processOnSMS+0x20da>
   159da:	46c0      	nop			; (mov r8, r8)
   159dc:	0002a1f4 	.word	0x0002a1f4
   159e0:	00014019 	.word	0x00014019
   159e4:	000290a3 	.word	0x000290a3
   159e8:	00028def 	.word	0x00028def
   159ec:	00011335 	.word	0x00011335
   159f0:	fffffeda 	.word	0xfffffeda
   159f4:	0002a1f8 	.word	0x0002a1f8
   159f8:	0002905d 	.word	0x0002905d
   159fc:	0002a200 	.word	0x0002a200
   15a00:	00028ddd 	.word	0x00028ddd
   15a04:	0002a204 	.word	0x0002a204
   15a08:	00028cf9 	.word	0x00028cf9
   15a0c:	20000628 	.word	0x20000628
   15a10:	0001178d 	.word	0x0001178d
   15a14:	0002a20c 	.word	0x0002a20c
   15a18:	00029019 	.word	0x00029019
   15a1c:	0002a218 	.word	0x0002a218
   15a20:	000116b1 	.word	0x000116b1
   15a24:	0002a224 	.word	0x0002a224
   15a28:	0002a230 	.word	0x0002a230
   15a2c:	000116fd 	.word	0x000116fd
   15a30:	0002a238 	.word	0x0002a238
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   15a34:	4ae0      	ldr	r2, [pc, #896]	; (15db8 <processOnSMS+0x1000>)
   15a36:	68fb      	ldr	r3, [r7, #12]
   15a38:	0011      	movs	r1, r2
   15a3a:	0018      	movs	r0, r3
   15a3c:	4bdf      	ldr	r3, [pc, #892]	; (15dbc <processOnSMS+0x1004>)
   15a3e:	4798      	blx	r3
   15a40:	1e03      	subs	r3, r0, #0
   15a42:	d026      	beq.n	15a92 <processOnSMS+0xcda>
	{
		saveMotorVoltageBypassSettings(false);
   15a44:	2000      	movs	r0, #0
   15a46:	4bde      	ldr	r3, [pc, #888]	; (15dc0 <processOnSMS+0x1008>)
   15a48:	4798      	blx	r3
		incomingSMSProcessed=true;
   15a4a:	2328      	movs	r3, #40	; 0x28
   15a4c:	33ff      	adds	r3, #255	; 0xff
   15a4e:	2208      	movs	r2, #8
   15a50:	4694      	mov	ip, r2
   15a52:	44bc      	add	ip, r7
   15a54:	4463      	add	r3, ip
   15a56:	2201      	movs	r2, #1
   15a58:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15a5a:	4bda      	ldr	r3, [pc, #872]	; (15dc4 <processOnSMS+0x100c>)
   15a5c:	2294      	movs	r2, #148	; 0x94
   15a5e:	0052      	lsls	r2, r2, #1
   15a60:	4694      	mov	ip, r2
   15a62:	2208      	movs	r2, #8
   15a64:	4690      	mov	r8, r2
   15a66:	44b8      	add	r8, r7
   15a68:	44c4      	add	ip, r8
   15a6a:	4463      	add	r3, ip
   15a6c:	781b      	ldrb	r3, [r3, #0]
   15a6e:	2b00      	cmp	r3, #0
   15a70:	d101      	bne.n	15a76 <processOnSMS+0xcbe>
   15a72:	f001 fa0e 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   15a76:	230c      	movs	r3, #12
   15a78:	2208      	movs	r2, #8
   15a7a:	4694      	mov	ip, r2
   15a7c:	44bc      	add	ip, r7
   15a7e:	4463      	add	r3, ip
   15a80:	4ad1      	ldr	r2, [pc, #836]	; (15dc8 <processOnSMS+0x1010>)
   15a82:	ca13      	ldmia	r2!, {r0, r1, r4}
   15a84:	c313      	stmia	r3!, {r0, r1, r4}
   15a86:	ca13      	ldmia	r2!, {r0, r1, r4}
   15a88:	c313      	stmia	r3!, {r0, r1, r4}
   15a8a:	7812      	ldrb	r2, [r2, #0]
   15a8c:	701a      	strb	r2, [r3, #0]
   15a8e:	f001 fa00 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPV"))
   15a92:	4ace      	ldr	r2, [pc, #824]	; (15dcc <processOnSMS+0x1014>)
   15a94:	68fb      	ldr	r3, [r7, #12]
   15a96:	0011      	movs	r1, r2
   15a98:	0018      	movs	r0, r3
   15a9a:	4bc8      	ldr	r3, [pc, #800]	; (15dbc <processOnSMS+0x1004>)
   15a9c:	4798      	blx	r3
   15a9e:	1e03      	subs	r3, r0, #0
   15aa0:	d05a      	beq.n	15b58 <processOnSMS+0xda0>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   15aa2:	68fb      	ldr	r3, [r7, #12]
   15aa4:	1d9c      	adds	r4, r3, #6
   15aa6:	68fb      	ldr	r3, [r7, #12]
   15aa8:	0018      	movs	r0, r3
   15aaa:	4bc9      	ldr	r3, [pc, #804]	; (15dd0 <processOnSMS+0x1018>)
   15aac:	4798      	blx	r3
   15aae:	0002      	movs	r2, r0
   15ab0:	68fb      	ldr	r3, [r7, #12]
   15ab2:	0021      	movs	r1, r4
   15ab4:	0018      	movs	r0, r3
   15ab6:	4bc7      	ldr	r3, [pc, #796]	; (15dd4 <processOnSMS+0x101c>)
   15ab8:	4798      	blx	r3
		uint8_t voltageBypTime = atoi(received_command);
   15aba:	68fb      	ldr	r3, [r7, #12]
   15abc:	0018      	movs	r0, r3
   15abe:	4bc6      	ldr	r3, [pc, #792]	; (15dd8 <processOnSMS+0x1020>)
   15ac0:	4798      	blx	r3
   15ac2:	0002      	movs	r2, r0
   15ac4:	2324      	movs	r3, #36	; 0x24
   15ac6:	33ff      	adds	r3, #255	; 0xff
   15ac8:	2108      	movs	r1, #8
   15aca:	468c      	mov	ip, r1
   15acc:	44bc      	add	ip, r7
   15ace:	4463      	add	r3, ip
   15ad0:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   15ad2:	2324      	movs	r3, #36	; 0x24
   15ad4:	33ff      	adds	r3, #255	; 0xff
   15ad6:	2208      	movs	r2, #8
   15ad8:	4694      	mov	ip, r2
   15ada:	44bc      	add	ip, r7
   15adc:	4463      	add	r3, ip
   15ade:	781b      	ldrb	r3, [r3, #0]
   15ae0:	2b09      	cmp	r3, #9
   15ae2:	d807      	bhi.n	15af4 <processOnSMS+0xd3c>
   15ae4:	2324      	movs	r3, #36	; 0x24
   15ae6:	33ff      	adds	r3, #255	; 0xff
   15ae8:	2208      	movs	r2, #8
   15aea:	4694      	mov	ip, r2
   15aec:	44bc      	add	ip, r7
   15aee:	4463      	add	r3, ip
   15af0:	220a      	movs	r2, #10
   15af2:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   15af4:	2324      	movs	r3, #36	; 0x24
   15af6:	33ff      	adds	r3, #255	; 0xff
   15af8:	2208      	movs	r2, #8
   15afa:	4694      	mov	ip, r2
   15afc:	44bc      	add	ip, r7
   15afe:	4463      	add	r3, ip
   15b00:	781b      	ldrb	r3, [r3, #0]
   15b02:	0018      	movs	r0, r3
   15b04:	4bb5      	ldr	r3, [pc, #724]	; (15ddc <processOnSMS+0x1024>)
   15b06:	4798      	blx	r3
		incomingSMSProcessed=true;
   15b08:	2328      	movs	r3, #40	; 0x28
   15b0a:	33ff      	adds	r3, #255	; 0xff
   15b0c:	2208      	movs	r2, #8
   15b0e:	4694      	mov	ip, r2
   15b10:	44bc      	add	ip, r7
   15b12:	4463      	add	r3, ip
   15b14:	2201      	movs	r2, #1
   15b16:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15b18:	4baa      	ldr	r3, [pc, #680]	; (15dc4 <processOnSMS+0x100c>)
   15b1a:	2294      	movs	r2, #148	; 0x94
   15b1c:	0052      	lsls	r2, r2, #1
   15b1e:	4694      	mov	ip, r2
   15b20:	2208      	movs	r2, #8
   15b22:	4690      	mov	r8, r2
   15b24:	44b8      	add	r8, r7
   15b26:	44c4      	add	ip, r8
   15b28:	4463      	add	r3, ip
   15b2a:	781b      	ldrb	r3, [r3, #0]
   15b2c:	2b00      	cmp	r3, #0
   15b2e:	d101      	bne.n	15b34 <processOnSMS+0xd7c>
   15b30:	f001 f9af 	bl	16e92 <processOnSMS+0x20da>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   15b34:	2324      	movs	r3, #36	; 0x24
   15b36:	33ff      	adds	r3, #255	; 0xff
   15b38:	2208      	movs	r2, #8
   15b3a:	4694      	mov	ip, r2
   15b3c:	44bc      	add	ip, r7
   15b3e:	4463      	add	r3, ip
   15b40:	781a      	ldrb	r2, [r3, #0]
   15b42:	49a7      	ldr	r1, [pc, #668]	; (15de0 <processOnSMS+0x1028>)
   15b44:	230c      	movs	r3, #12
   15b46:	2008      	movs	r0, #8
   15b48:	4684      	mov	ip, r0
   15b4a:	44bc      	add	ip, r7
   15b4c:	4463      	add	r3, ip
   15b4e:	0018      	movs	r0, r3
   15b50:	4ba4      	ldr	r3, [pc, #656]	; (15de4 <processOnSMS+0x102c>)
   15b52:	4798      	blx	r3
   15b54:	f001 f99d 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15b58:	4aa3      	ldr	r2, [pc, #652]	; (15de8 <processOnSMS+0x1030>)
   15b5a:	68fb      	ldr	r3, [r7, #12]
   15b5c:	0011      	movs	r1, r2
   15b5e:	0018      	movs	r0, r3
   15b60:	4b96      	ldr	r3, [pc, #600]	; (15dbc <processOnSMS+0x1004>)
   15b62:	4798      	blx	r3
   15b64:	1e03      	subs	r3, r0, #0
   15b66:	d06c      	beq.n	15c42 <processOnSMS+0xe8a>
	{
		if (strlen(received_command)>4)
   15b68:	68fb      	ldr	r3, [r7, #12]
   15b6a:	0018      	movs	r0, r3
   15b6c:	4b98      	ldr	r3, [pc, #608]	; (15dd0 <processOnSMS+0x1018>)
   15b6e:	4798      	blx	r3
   15b70:	0003      	movs	r3, r0
   15b72:	2b04      	cmp	r3, #4
   15b74:	d801      	bhi.n	15b7a <processOnSMS+0xdc2>
   15b76:	f001 f98c 	bl	16e92 <processOnSMS+0x20da>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15b7a:	68fb      	ldr	r3, [r7, #12]
   15b7c:	1d1c      	adds	r4, r3, #4
   15b7e:	68fb      	ldr	r3, [r7, #12]
   15b80:	0018      	movs	r0, r3
   15b82:	4b93      	ldr	r3, [pc, #588]	; (15dd0 <processOnSMS+0x1018>)
   15b84:	4798      	blx	r3
   15b86:	0002      	movs	r2, r0
   15b88:	68fb      	ldr	r3, [r7, #12]
   15b8a:	0021      	movs	r1, r4
   15b8c:	0018      	movs	r0, r3
   15b8e:	4b91      	ldr	r3, [pc, #580]	; (15dd4 <processOnSMS+0x101c>)
   15b90:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15b92:	68fb      	ldr	r3, [r7, #12]
   15b94:	781b      	ldrb	r3, [r3, #0]
   15b96:	2b43      	cmp	r3, #67	; 0x43
   15b98:	d00d      	beq.n	15bb6 <processOnSMS+0xdfe>
   15b9a:	68fb      	ldr	r3, [r7, #12]
   15b9c:	781b      	ldrb	r3, [r3, #0]
   15b9e:	2b41      	cmp	r3, #65	; 0x41
   15ba0:	d009      	beq.n	15bb6 <processOnSMS+0xdfe>
   15ba2:	68fb      	ldr	r3, [r7, #12]
   15ba4:	781b      	ldrb	r3, [r3, #0]
   15ba6:	2b54      	cmp	r3, #84	; 0x54
   15ba8:	d005      	beq.n	15bb6 <processOnSMS+0xdfe>
   15baa:	68fb      	ldr	r3, [r7, #12]
   15bac:	781b      	ldrb	r3, [r3, #0]
   15bae:	2b4e      	cmp	r3, #78	; 0x4e
   15bb0:	d001      	beq.n	15bb6 <processOnSMS+0xdfe>
   15bb2:	f001 f96e 	bl	16e92 <processOnSMS+0x20da>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15bb6:	68fb      	ldr	r3, [r7, #12]
   15bb8:	b2db      	uxtb	r3, r3
   15bba:	0018      	movs	r0, r3
   15bbc:	4b8b      	ldr	r3, [pc, #556]	; (15dec <processOnSMS+0x1034>)
   15bbe:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15bc0:	2328      	movs	r3, #40	; 0x28
   15bc2:	33ff      	adds	r3, #255	; 0xff
   15bc4:	2208      	movs	r2, #8
   15bc6:	4694      	mov	ip, r2
   15bc8:	44bc      	add	ip, r7
   15bca:	4463      	add	r3, ip
   15bcc:	2201      	movs	r2, #1
   15bce:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15bd0:	4b7c      	ldr	r3, [pc, #496]	; (15dc4 <processOnSMS+0x100c>)
   15bd2:	2294      	movs	r2, #148	; 0x94
   15bd4:	0052      	lsls	r2, r2, #1
   15bd6:	4694      	mov	ip, r2
   15bd8:	2208      	movs	r2, #8
   15bda:	4690      	mov	r8, r2
   15bdc:	44b8      	add	r8, r7
   15bde:	44c4      	add	ip, r8
   15be0:	4463      	add	r3, ip
   15be2:	781b      	ldrb	r3, [r3, #0]
   15be4:	2b00      	cmp	r3, #0
   15be6:	d101      	bne.n	15bec <processOnSMS+0xe34>
   15be8:	f001 f953 	bl	16e92 <processOnSMS+0x20da>
				{
					strcpy(resep_msg,"RESP : ");
   15bec:	230c      	movs	r3, #12
   15bee:	2208      	movs	r2, #8
   15bf0:	4694      	mov	ip, r2
   15bf2:	44bc      	add	ip, r7
   15bf4:	4463      	add	r3, ip
   15bf6:	4a7e      	ldr	r2, [pc, #504]	; (15df0 <processOnSMS+0x1038>)
   15bf8:	ca03      	ldmia	r2!, {r0, r1}
   15bfa:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   15bfc:	68fa      	ldr	r2, [r7, #12]
   15bfe:	230c      	movs	r3, #12
   15c00:	2108      	movs	r1, #8
   15c02:	468c      	mov	ip, r1
   15c04:	44bc      	add	ip, r7
   15c06:	4463      	add	r3, ip
   15c08:	0011      	movs	r1, r2
   15c0a:	0018      	movs	r0, r3
   15c0c:	4b79      	ldr	r3, [pc, #484]	; (15df4 <processOnSMS+0x103c>)
   15c0e:	4798      	blx	r3
					strcat(resep_msg," OK");
   15c10:	230c      	movs	r3, #12
   15c12:	2208      	movs	r2, #8
   15c14:	4694      	mov	ip, r2
   15c16:	44bc      	add	ip, r7
   15c18:	4463      	add	r3, ip
   15c1a:	0018      	movs	r0, r3
   15c1c:	4b6c      	ldr	r3, [pc, #432]	; (15dd0 <processOnSMS+0x1018>)
   15c1e:	4798      	blx	r3
   15c20:	0003      	movs	r3, r0
   15c22:	001a      	movs	r2, r3
   15c24:	230c      	movs	r3, #12
   15c26:	2108      	movs	r1, #8
   15c28:	468c      	mov	ip, r1
   15c2a:	44bc      	add	ip, r7
   15c2c:	4463      	add	r3, ip
   15c2e:	189a      	adds	r2, r3, r2
   15c30:	4b71      	ldr	r3, [pc, #452]	; (15df8 <processOnSMS+0x1040>)
   15c32:	0010      	movs	r0, r2
   15c34:	0019      	movs	r1, r3
   15c36:	2304      	movs	r3, #4
   15c38:	001a      	movs	r2, r3
   15c3a:	4b70      	ldr	r3, [pc, #448]	; (15dfc <processOnSMS+0x1044>)
   15c3c:	4798      	blx	r3
   15c3e:	f001 f928 	bl	16e92 <processOnSMS+0x20da>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   15c42:	4a6f      	ldr	r2, [pc, #444]	; (15e00 <processOnSMS+0x1048>)
   15c44:	68fb      	ldr	r3, [r7, #12]
   15c46:	0011      	movs	r1, r2
   15c48:	0018      	movs	r0, r3
   15c4a:	4b5c      	ldr	r3, [pc, #368]	; (15dbc <processOnSMS+0x1004>)
   15c4c:	4798      	blx	r3
   15c4e:	1e03      	subs	r3, r0, #0
   15c50:	d050      	beq.n	15cf4 <processOnSMS+0xf3c>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15c52:	68fb      	ldr	r3, [r7, #12]
   15c54:	1cdc      	adds	r4, r3, #3
   15c56:	68fb      	ldr	r3, [r7, #12]
   15c58:	0018      	movs	r0, r3
   15c5a:	4b5d      	ldr	r3, [pc, #372]	; (15dd0 <processOnSMS+0x1018>)
   15c5c:	4798      	blx	r3
   15c5e:	0002      	movs	r2, r0
   15c60:	68fb      	ldr	r3, [r7, #12]
   15c62:	0021      	movs	r1, r4
   15c64:	0018      	movs	r0, r3
   15c66:	4b5b      	ldr	r3, [pc, #364]	; (15dd4 <processOnSMS+0x101c>)
   15c68:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   15c6a:	68fb      	ldr	r3, [r7, #12]
   15c6c:	0018      	movs	r0, r3
   15c6e:	4b5a      	ldr	r3, [pc, #360]	; (15dd8 <processOnSMS+0x1020>)
   15c70:	4798      	blx	r3
   15c72:	0002      	movs	r2, r0
   15c74:	238b      	movs	r3, #139	; 0x8b
   15c76:	005b      	lsls	r3, r3, #1
   15c78:	2108      	movs	r1, #8
   15c7a:	468c      	mov	ip, r1
   15c7c:	44bc      	add	ip, r7
   15c7e:	4463      	add	r3, ip
   15c80:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15c82:	238b      	movs	r3, #139	; 0x8b
   15c84:	005b      	lsls	r3, r3, #1
   15c86:	2208      	movs	r2, #8
   15c88:	4694      	mov	ip, r2
   15c8a:	44bc      	add	ip, r7
   15c8c:	4463      	add	r3, ip
   15c8e:	781b      	ldrb	r3, [r3, #0]
   15c90:	2b68      	cmp	r3, #104	; 0x68
   15c92:	d801      	bhi.n	15c98 <processOnSMS+0xee0>
   15c94:	f001 f8fd 	bl	16e92 <processOnSMS+0x20da>
		{
			setOverloadPer(ovr_per);
   15c98:	238b      	movs	r3, #139	; 0x8b
   15c9a:	005b      	lsls	r3, r3, #1
   15c9c:	2208      	movs	r2, #8
   15c9e:	4694      	mov	ip, r2
   15ca0:	44bc      	add	ip, r7
   15ca2:	4463      	add	r3, ip
   15ca4:	781b      	ldrb	r3, [r3, #0]
   15ca6:	0018      	movs	r0, r3
   15ca8:	4b56      	ldr	r3, [pc, #344]	; (15e04 <processOnSMS+0x104c>)
   15caa:	4798      	blx	r3
			incomingSMSProcessed=true;
   15cac:	2328      	movs	r3, #40	; 0x28
   15cae:	33ff      	adds	r3, #255	; 0xff
   15cb0:	2208      	movs	r2, #8
   15cb2:	4694      	mov	ip, r2
   15cb4:	44bc      	add	ip, r7
   15cb6:	4463      	add	r3, ip
   15cb8:	2201      	movs	r2, #1
   15cba:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   15cbc:	4b41      	ldr	r3, [pc, #260]	; (15dc4 <processOnSMS+0x100c>)
   15cbe:	2294      	movs	r2, #148	; 0x94
   15cc0:	0052      	lsls	r2, r2, #1
   15cc2:	4694      	mov	ip, r2
   15cc4:	2208      	movs	r2, #8
   15cc6:	4690      	mov	r8, r2
   15cc8:	44b8      	add	r8, r7
   15cca:	44c4      	add	ip, r8
   15ccc:	4463      	add	r3, ip
   15cce:	781b      	ldrb	r3, [r3, #0]
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	d101      	bne.n	15cd8 <processOnSMS+0xf20>
   15cd4:	f001 f8dd 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"OVR SET OK");
   15cd8:	230c      	movs	r3, #12
   15cda:	2208      	movs	r2, #8
   15cdc:	4694      	mov	ip, r2
   15cde:	44bc      	add	ip, r7
   15ce0:	4463      	add	r3, ip
   15ce2:	4a49      	ldr	r2, [pc, #292]	; (15e08 <processOnSMS+0x1050>)
   15ce4:	ca03      	ldmia	r2!, {r0, r1}
   15ce6:	c303      	stmia	r3!, {r0, r1}
   15ce8:	8811      	ldrh	r1, [r2, #0]
   15cea:	8019      	strh	r1, [r3, #0]
   15cec:	7892      	ldrb	r2, [r2, #2]
   15cee:	709a      	strb	r2, [r3, #2]
   15cf0:	f001 f8cf 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   15cf4:	4a45      	ldr	r2, [pc, #276]	; (15e0c <processOnSMS+0x1054>)
   15cf6:	68fb      	ldr	r3, [r7, #12]
   15cf8:	0011      	movs	r1, r2
   15cfa:	0018      	movs	r0, r3
   15cfc:	4b2f      	ldr	r3, [pc, #188]	; (15dbc <processOnSMS+0x1004>)
   15cfe:	4798      	blx	r3
   15d00:	1e03      	subs	r3, r0, #0
   15d02:	d100      	bne.n	15d06 <processOnSMS+0xf4e>
   15d04:	e088      	b.n	15e18 <processOnSMS+0x1060>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15d06:	68fb      	ldr	r3, [r7, #12]
   15d08:	1d1c      	adds	r4, r3, #4
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	0018      	movs	r0, r3
   15d0e:	4b30      	ldr	r3, [pc, #192]	; (15dd0 <processOnSMS+0x1018>)
   15d10:	4798      	blx	r3
   15d12:	0002      	movs	r2, r0
   15d14:	68fb      	ldr	r3, [r7, #12]
   15d16:	0021      	movs	r1, r4
   15d18:	0018      	movs	r0, r3
   15d1a:	4b2e      	ldr	r3, [pc, #184]	; (15dd4 <processOnSMS+0x101c>)
   15d1c:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   15d1e:	68fb      	ldr	r3, [r7, #12]
   15d20:	0018      	movs	r0, r3
   15d22:	4b2d      	ldr	r3, [pc, #180]	; (15dd8 <processOnSMS+0x1020>)
   15d24:	4798      	blx	r3
   15d26:	0002      	movs	r2, r0
   15d28:	2316      	movs	r3, #22
   15d2a:	33ff      	adds	r3, #255	; 0xff
   15d2c:	2108      	movs	r1, #8
   15d2e:	468c      	mov	ip, r1
   15d30:	44bc      	add	ip, r7
   15d32:	4463      	add	r3, ip
   15d34:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   15d36:	2316      	movs	r3, #22
   15d38:	33ff      	adds	r3, #255	; 0xff
   15d3a:	2208      	movs	r2, #8
   15d3c:	4694      	mov	ip, r2
   15d3e:	44bc      	add	ip, r7
   15d40:	4463      	add	r3, ip
   15d42:	781b      	ldrb	r3, [r3, #0]
   15d44:	2b61      	cmp	r3, #97	; 0x61
   15d46:	d901      	bls.n	15d4c <processOnSMS+0xf94>
   15d48:	f001 f8a3 	bl	16e92 <processOnSMS+0x20da>
   15d4c:	2316      	movs	r3, #22
   15d4e:	33ff      	adds	r3, #255	; 0xff
   15d50:	2208      	movs	r2, #8
   15d52:	4694      	mov	ip, r2
   15d54:	44bc      	add	ip, r7
   15d56:	4463      	add	r3, ip
   15d58:	781b      	ldrb	r3, [r3, #0]
   15d5a:	2b00      	cmp	r3, #0
   15d5c:	d101      	bne.n	15d62 <processOnSMS+0xfaa>
   15d5e:	f001 f898 	bl	16e92 <processOnSMS+0x20da>
		{

			setUnderloadPer(undr_per);
   15d62:	2316      	movs	r3, #22
   15d64:	33ff      	adds	r3, #255	; 0xff
   15d66:	2208      	movs	r2, #8
   15d68:	4694      	mov	ip, r2
   15d6a:	44bc      	add	ip, r7
   15d6c:	4463      	add	r3, ip
   15d6e:	781b      	ldrb	r3, [r3, #0]
   15d70:	0018      	movs	r0, r3
   15d72:	4b27      	ldr	r3, [pc, #156]	; (15e10 <processOnSMS+0x1058>)
   15d74:	4798      	blx	r3

			incomingSMSProcessed=true;
   15d76:	2328      	movs	r3, #40	; 0x28
   15d78:	33ff      	adds	r3, #255	; 0xff
   15d7a:	2208      	movs	r2, #8
   15d7c:	4694      	mov	ip, r2
   15d7e:	44bc      	add	ip, r7
   15d80:	4463      	add	r3, ip
   15d82:	2201      	movs	r2, #1
   15d84:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   15d86:	4b0f      	ldr	r3, [pc, #60]	; (15dc4 <processOnSMS+0x100c>)
   15d88:	2294      	movs	r2, #148	; 0x94
   15d8a:	0052      	lsls	r2, r2, #1
   15d8c:	4694      	mov	ip, r2
   15d8e:	2208      	movs	r2, #8
   15d90:	4690      	mov	r8, r2
   15d92:	44b8      	add	r8, r7
   15d94:	44c4      	add	ip, r8
   15d96:	4463      	add	r3, ip
   15d98:	781b      	ldrb	r3, [r3, #0]
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d101      	bne.n	15da2 <processOnSMS+0xfea>
   15d9e:	f001 f878 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"UNDR SET OK");
   15da2:	230c      	movs	r3, #12
   15da4:	2208      	movs	r2, #8
   15da6:	4694      	mov	ip, r2
   15da8:	44bc      	add	ip, r7
   15daa:	4463      	add	r3, ip
   15dac:	4a19      	ldr	r2, [pc, #100]	; (15e14 <processOnSMS+0x105c>)
   15dae:	ca13      	ldmia	r2!, {r0, r1, r4}
   15db0:	c313      	stmia	r3!, {r0, r1, r4}
   15db2:	f001 f86e 	bl	16e92 <processOnSMS+0x20da>
   15db6:	46c0      	nop			; (mov r8, r8)
   15db8:	0002a250 	.word	0x0002a250
   15dbc:	00014019 	.word	0x00014019
   15dc0:	000116fd 	.word	0x000116fd
   15dc4:	fffffeda 	.word	0xfffffeda
   15dc8:	0002a25c 	.word	0x0002a25c
   15dcc:	0002a278 	.word	0x0002a278
   15dd0:	000290a3 	.word	0x000290a3
   15dd4:	00028def 	.word	0x00028def
   15dd8:	00028cf9 	.word	0x00028cf9
   15ddc:	00011749 	.word	0x00011749
   15de0:	0002a280 	.word	0x0002a280
   15de4:	00029019 	.word	0x00029019
   15de8:	0002a2a4 	.word	0x0002a2a4
   15dec:	00011381 	.word	0x00011381
   15df0:	0002a2ac 	.word	0x0002a2ac
   15df4:	0002905d 	.word	0x0002905d
   15df8:	0002a200 	.word	0x0002a200
   15dfc:	00028ddd 	.word	0x00028ddd
   15e00:	0002a2b4 	.word	0x0002a2b4
   15e04:	000114f5 	.word	0x000114f5
   15e08:	0002a2b8 	.word	0x0002a2b8
   15e0c:	0002a2c4 	.word	0x0002a2c4
   15e10:	0001155d 	.word	0x0001155d
   15e14:	0002a2cc 	.word	0x0002a2cc
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   15e18:	4ae4      	ldr	r2, [pc, #912]	; (161ac <processOnSMS+0x13f4>)
   15e1a:	68fb      	ldr	r3, [r7, #12]
   15e1c:	0011      	movs	r1, r2
   15e1e:	0018      	movs	r0, r3
   15e20:	4be3      	ldr	r3, [pc, #908]	; (161b0 <processOnSMS+0x13f8>)
   15e22:	4798      	blx	r3
   15e24:	1e03      	subs	r3, r0, #0
   15e26:	d040      	beq.n	15eaa <processOnSMS+0x10f2>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15e28:	4be2      	ldr	r3, [pc, #904]	; (161b4 <processOnSMS+0x13fc>)
   15e2a:	785b      	ldrb	r3, [r3, #1]
   15e2c:	2b00      	cmp	r3, #0
   15e2e:	d101      	bne.n	15e34 <processOnSMS+0x107c>
   15e30:	f001 f82f 	bl	16e92 <processOnSMS+0x20da>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   15e34:	4be0      	ldr	r3, [pc, #896]	; (161b8 <processOnSMS+0x1400>)
   15e36:	8a9b      	ldrh	r3, [r3, #20]
   15e38:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e3a:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   15e3c:	4bde      	ldr	r3, [pc, #888]	; (161b8 <processOnSMS+0x1400>)
   15e3e:	8adb      	ldrh	r3, [r3, #22]
   15e40:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e42:	603b      	str	r3, [r7, #0]
   15e44:	4bdd      	ldr	r3, [pc, #884]	; (161bc <processOnSMS+0x1404>)
   15e46:	691a      	ldr	r2, [r3, #16]
   15e48:	4bdc      	ldr	r3, [pc, #880]	; (161bc <processOnSMS+0x1404>)
   15e4a:	6959      	ldr	r1, [r3, #20]
   15e4c:	4bdb      	ldr	r3, [pc, #876]	; (161bc <processOnSMS+0x1404>)
   15e4e:	699b      	ldr	r3, [r3, #24]
   15e50:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   15e52:	48da      	ldr	r0, [pc, #872]	; (161bc <processOnSMS+0x1404>)
   15e54:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e56:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   15e58:	48d8      	ldr	r0, [pc, #864]	; (161bc <processOnSMS+0x1404>)
   15e5a:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e5c:	0006      	movs	r6, r0
   15e5e:	4cd8      	ldr	r4, [pc, #864]	; (161c0 <processOnSMS+0x1408>)
   15e60:	200c      	movs	r0, #12
   15e62:	2308      	movs	r3, #8
   15e64:	469c      	mov	ip, r3
   15e66:	44bc      	add	ip, r7
   15e68:	4460      	add	r0, ip
   15e6a:	9604      	str	r6, [sp, #16]
   15e6c:	9503      	str	r5, [sp, #12]
   15e6e:	4643      	mov	r3, r8
   15e70:	9302      	str	r3, [sp, #8]
   15e72:	9101      	str	r1, [sp, #4]
   15e74:	9200      	str	r2, [sp, #0]
   15e76:	683b      	ldr	r3, [r7, #0]
   15e78:	687a      	ldr	r2, [r7, #4]
   15e7a:	0021      	movs	r1, r4
   15e7c:	4cd1      	ldr	r4, [pc, #836]	; (161c4 <processOnSMS+0x140c>)
   15e7e:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   15e80:	4bd1      	ldr	r3, [pc, #836]	; (161c8 <processOnSMS+0x1410>)
   15e82:	2294      	movs	r2, #148	; 0x94
   15e84:	0052      	lsls	r2, r2, #1
   15e86:	4694      	mov	ip, r2
   15e88:	2208      	movs	r2, #8
   15e8a:	4690      	mov	r8, r2
   15e8c:	44b8      	add	r8, r7
   15e8e:	44c4      	add	ip, r8
   15e90:	4463      	add	r3, ip
   15e92:	2201      	movs	r2, #1
   15e94:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   15e96:	2328      	movs	r3, #40	; 0x28
   15e98:	33ff      	adds	r3, #255	; 0xff
   15e9a:	2208      	movs	r2, #8
   15e9c:	4694      	mov	ip, r2
   15e9e:	44bc      	add	ip, r7
   15ea0:	4463      	add	r3, ip
   15ea2:	2201      	movs	r2, #1
   15ea4:	701a      	strb	r2, [r3, #0]
   15ea6:	f000 fff4 	bl	16e92 <processOnSMS+0x20da>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   15eaa:	4ac8      	ldr	r2, [pc, #800]	; (161cc <processOnSMS+0x1414>)
   15eac:	68fb      	ldr	r3, [r7, #12]
   15eae:	0011      	movs	r1, r2
   15eb0:	0018      	movs	r0, r3
   15eb2:	4bbf      	ldr	r3, [pc, #764]	; (161b0 <processOnSMS+0x13f8>)
   15eb4:	4798      	blx	r3
   15eb6:	1e03      	subs	r3, r0, #0
   15eb8:	d032      	beq.n	15f20 <processOnSMS+0x1168>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15eba:	4bbe      	ldr	r3, [pc, #760]	; (161b4 <processOnSMS+0x13fc>)
   15ebc:	795b      	ldrb	r3, [r3, #5]
   15ebe:	2b00      	cmp	r3, #0
   15ec0:	d101      	bne.n	15ec6 <processOnSMS+0x110e>
   15ec2:	f000 ffe6 	bl	16e92 <processOnSMS+0x20da>
   15ec6:	4bbb      	ldr	r3, [pc, #748]	; (161b4 <processOnSMS+0x13fc>)
   15ec8:	78db      	ldrb	r3, [r3, #3]
   15eca:	2b00      	cmp	r3, #0
   15ecc:	d001      	beq.n	15ed2 <processOnSMS+0x111a>
   15ece:	f000 ffe0 	bl	16e92 <processOnSMS+0x20da>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   15ed2:	2001      	movs	r0, #1
   15ed4:	4bbe      	ldr	r3, [pc, #760]	; (161d0 <processOnSMS+0x1418>)
   15ed6:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   15ed8:	2328      	movs	r3, #40	; 0x28
   15eda:	33ff      	adds	r3, #255	; 0xff
   15edc:	2208      	movs	r2, #8
   15ede:	4694      	mov	ip, r2
   15ee0:	44bc      	add	ip, r7
   15ee2:	4463      	add	r3, ip
   15ee4:	2201      	movs	r2, #1
   15ee6:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   15ee8:	4bb7      	ldr	r3, [pc, #732]	; (161c8 <processOnSMS+0x1410>)
   15eea:	2294      	movs	r2, #148	; 0x94
   15eec:	0052      	lsls	r2, r2, #1
   15eee:	4694      	mov	ip, r2
   15ef0:	2208      	movs	r2, #8
   15ef2:	4690      	mov	r8, r2
   15ef4:	44b8      	add	r8, r7
   15ef6:	44c4      	add	ip, r8
   15ef8:	4463      	add	r3, ip
   15efa:	781b      	ldrb	r3, [r3, #0]
   15efc:	2b00      	cmp	r3, #0
   15efe:	d101      	bne.n	15f04 <processOnSMS+0x114c>
   15f00:	f000 ffc7 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   15f04:	230c      	movs	r3, #12
   15f06:	2208      	movs	r2, #8
   15f08:	4694      	mov	ip, r2
   15f0a:	44bc      	add	ip, r7
   15f0c:	4463      	add	r3, ip
   15f0e:	4ab1      	ldr	r2, [pc, #708]	; (161d4 <processOnSMS+0x141c>)
   15f10:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f12:	c313      	stmia	r3!, {r0, r1, r4}
   15f14:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f16:	c313      	stmia	r3!, {r0, r1, r4}
   15f18:	6812      	ldr	r2, [r2, #0]
   15f1a:	601a      	str	r2, [r3, #0]
   15f1c:	f000 ffb9 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   15f20:	4aad      	ldr	r2, [pc, #692]	; (161d8 <processOnSMS+0x1420>)
   15f22:	68fb      	ldr	r3, [r7, #12]
   15f24:	0011      	movs	r1, r2
   15f26:	0018      	movs	r0, r3
   15f28:	4ba1      	ldr	r3, [pc, #644]	; (161b0 <processOnSMS+0x13f8>)
   15f2a:	4798      	blx	r3
   15f2c:	1e03      	subs	r3, r0, #0
   15f2e:	d034      	beq.n	15f9a <processOnSMS+0x11e2>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15f30:	4ba0      	ldr	r3, [pc, #640]	; (161b4 <processOnSMS+0x13fc>)
   15f32:	795b      	ldrb	r3, [r3, #5]
   15f34:	2b00      	cmp	r3, #0
   15f36:	d101      	bne.n	15f3c <processOnSMS+0x1184>
   15f38:	f000 ffab 	bl	16e92 <processOnSMS+0x20da>
   15f3c:	4b9d      	ldr	r3, [pc, #628]	; (161b4 <processOnSMS+0x13fc>)
   15f3e:	78db      	ldrb	r3, [r3, #3]
   15f40:	2b00      	cmp	r3, #0
   15f42:	d001      	beq.n	15f48 <processOnSMS+0x1190>
   15f44:	f000 ffa5 	bl	16e92 <processOnSMS+0x20da>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   15f48:	2000      	movs	r0, #0
   15f4a:	4ba1      	ldr	r3, [pc, #644]	; (161d0 <processOnSMS+0x1418>)
   15f4c:	4798      	blx	r3

			incomingSMSProcessed=true;
   15f4e:	2328      	movs	r3, #40	; 0x28
   15f50:	33ff      	adds	r3, #255	; 0xff
   15f52:	2208      	movs	r2, #8
   15f54:	4694      	mov	ip, r2
   15f56:	44bc      	add	ip, r7
   15f58:	4463      	add	r3, ip
   15f5a:	2201      	movs	r2, #1
   15f5c:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   15f5e:	4b9a      	ldr	r3, [pc, #616]	; (161c8 <processOnSMS+0x1410>)
   15f60:	2294      	movs	r2, #148	; 0x94
   15f62:	0052      	lsls	r2, r2, #1
   15f64:	4694      	mov	ip, r2
   15f66:	2208      	movs	r2, #8
   15f68:	4690      	mov	r8, r2
   15f6a:	44b8      	add	r8, r7
   15f6c:	44c4      	add	ip, r8
   15f6e:	4463      	add	r3, ip
   15f70:	781b      	ldrb	r3, [r3, #0]
   15f72:	2b00      	cmp	r3, #0
   15f74:	d101      	bne.n	15f7a <processOnSMS+0x11c2>
   15f76:	f000 ff8c 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   15f7a:	230c      	movs	r3, #12
   15f7c:	2208      	movs	r2, #8
   15f7e:	4694      	mov	ip, r2
   15f80:	44bc      	add	ip, r7
   15f82:	4463      	add	r3, ip
   15f84:	4a95      	ldr	r2, [pc, #596]	; (161dc <processOnSMS+0x1424>)
   15f86:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f88:	c313      	stmia	r3!, {r0, r1, r4}
   15f8a:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f8c:	c313      	stmia	r3!, {r0, r1, r4}
   15f8e:	6811      	ldr	r1, [r2, #0]
   15f90:	6019      	str	r1, [r3, #0]
   15f92:	7912      	ldrb	r2, [r2, #4]
   15f94:	711a      	strb	r2, [r3, #4]
   15f96:	f000 ff7c 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   15f9a:	4a91      	ldr	r2, [pc, #580]	; (161e0 <processOnSMS+0x1428>)
   15f9c:	68fb      	ldr	r3, [r7, #12]
   15f9e:	0011      	movs	r1, r2
   15fa0:	0018      	movs	r0, r3
   15fa2:	4b83      	ldr	r3, [pc, #524]	; (161b0 <processOnSMS+0x13f8>)
   15fa4:	4798      	blx	r3
   15fa6:	1e03      	subs	r3, r0, #0
   15fa8:	d05c      	beq.n	16064 <processOnSMS+0x12ac>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   15faa:	4b82      	ldr	r3, [pc, #520]	; (161b4 <processOnSMS+0x13fc>)
   15fac:	78db      	ldrb	r3, [r3, #3]
   15fae:	2b00      	cmp	r3, #0
   15fb0:	d101      	bne.n	15fb6 <processOnSMS+0x11fe>
   15fb2:	f000 ff6e 	bl	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   15fb6:	2328      	movs	r3, #40	; 0x28
   15fb8:	33ff      	adds	r3, #255	; 0xff
   15fba:	2208      	movs	r2, #8
   15fbc:	4694      	mov	ip, r2
   15fbe:	44bc      	add	ip, r7
   15fc0:	4463      	add	r3, ip
   15fc2:	2201      	movs	r2, #1
   15fc4:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   15fc6:	4b87      	ldr	r3, [pc, #540]	; (161e4 <processOnSMS+0x142c>)
   15fc8:	78db      	ldrb	r3, [r3, #3]
   15fca:	2b00      	cmp	r3, #0
   15fcc:	d02f      	beq.n	1602e <processOnSMS+0x1276>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   15fce:	4b85      	ldr	r3, [pc, #532]	; (161e4 <processOnSMS+0x142c>)
   15fd0:	791b      	ldrb	r3, [r3, #4]
   15fd2:	2b00      	cmp	r3, #0
   15fd4:	d10e      	bne.n	15ff4 <processOnSMS+0x123c>
				{
					response_sms_processed_cmd = false;
   15fd6:	4b7c      	ldr	r3, [pc, #496]	; (161c8 <processOnSMS+0x1410>)
   15fd8:	2294      	movs	r2, #148	; 0x94
   15fda:	0052      	lsls	r2, r2, #1
   15fdc:	4694      	mov	ip, r2
   15fde:	2208      	movs	r2, #8
   15fe0:	4690      	mov	r8, r2
   15fe2:	44b8      	add	r8, r7
   15fe4:	44c4      	add	ip, r8
   15fe6:	4463      	add	r3, ip
   15fe8:	2200      	movs	r2, #0
   15fea:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   15fec:	4b7e      	ldr	r3, [pc, #504]	; (161e8 <processOnSMS+0x1430>)
   15fee:	4798      	blx	r3
   15ff0:	f000 ff4f 	bl	16e92 <processOnSMS+0x20da>
				}
				else
				{
					response_sms_processed_cmd = true;
   15ff4:	4b74      	ldr	r3, [pc, #464]	; (161c8 <processOnSMS+0x1410>)
   15ff6:	2294      	movs	r2, #148	; 0x94
   15ff8:	0052      	lsls	r2, r2, #1
   15ffa:	4694      	mov	ip, r2
   15ffc:	2208      	movs	r2, #8
   15ffe:	4690      	mov	r8, r2
   16000:	44b8      	add	r8, r7
   16002:	44c4      	add	ip, r8
   16004:	4463      	add	r3, ip
   16006:	2201      	movs	r2, #1
   16008:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   1600a:	230c      	movs	r3, #12
   1600c:	2208      	movs	r2, #8
   1600e:	4694      	mov	ip, r2
   16010:	44bc      	add	ip, r7
   16012:	4463      	add	r3, ip
   16014:	4a75      	ldr	r2, [pc, #468]	; (161ec <processOnSMS+0x1434>)
   16016:	ca13      	ldmia	r2!, {r0, r1, r4}
   16018:	c313      	stmia	r3!, {r0, r1, r4}
   1601a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1601c:	c313      	stmia	r3!, {r0, r1, r4}
   1601e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16020:	c313      	stmia	r3!, {r0, r1, r4}
   16022:	ca03      	ldmia	r2!, {r0, r1}
   16024:	c303      	stmia	r3!, {r0, r1}
   16026:	8812      	ldrh	r2, [r2, #0]
   16028:	801a      	strh	r2, [r3, #0]
   1602a:	f000 ff32 	bl	16e92 <processOnSMS+0x20da>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   1602e:	4b66      	ldr	r3, [pc, #408]	; (161c8 <processOnSMS+0x1410>)
   16030:	2294      	movs	r2, #148	; 0x94
   16032:	0052      	lsls	r2, r2, #1
   16034:	4694      	mov	ip, r2
   16036:	2208      	movs	r2, #8
   16038:	4690      	mov	r8, r2
   1603a:	44b8      	add	r8, r7
   1603c:	44c4      	add	ip, r8
   1603e:	4463      	add	r3, ip
   16040:	2201      	movs	r2, #1
   16042:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   16044:	230c      	movs	r3, #12
   16046:	2208      	movs	r2, #8
   16048:	4694      	mov	ip, r2
   1604a:	44bc      	add	ip, r7
   1604c:	4463      	add	r3, ip
   1604e:	4a68      	ldr	r2, [pc, #416]	; (161f0 <processOnSMS+0x1438>)
   16050:	ca13      	ldmia	r2!, {r0, r1, r4}
   16052:	c313      	stmia	r3!, {r0, r1, r4}
   16054:	ca13      	ldmia	r2!, {r0, r1, r4}
   16056:	c313      	stmia	r3!, {r0, r1, r4}
   16058:	ca13      	ldmia	r2!, {r0, r1, r4}
   1605a:	c313      	stmia	r3!, {r0, r1, r4}
   1605c:	7812      	ldrb	r2, [r2, #0]
   1605e:	701a      	strb	r2, [r3, #0]
   16060:	f000 ff17 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   16064:	4a63      	ldr	r2, [pc, #396]	; (161f4 <processOnSMS+0x143c>)
   16066:	68fb      	ldr	r3, [r7, #12]
   16068:	0011      	movs	r1, r2
   1606a:	0018      	movs	r0, r3
   1606c:	4b50      	ldr	r3, [pc, #320]	; (161b0 <processOnSMS+0x13f8>)
   1606e:	4798      	blx	r3
   16070:	1e03      	subs	r3, r0, #0
   16072:	d02a      	beq.n	160ca <processOnSMS+0x1312>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16074:	4b4f      	ldr	r3, [pc, #316]	; (161b4 <processOnSMS+0x13fc>)
   16076:	78db      	ldrb	r3, [r3, #3]
   16078:	2b00      	cmp	r3, #0
   1607a:	d101      	bne.n	16080 <processOnSMS+0x12c8>
   1607c:	f000 ff09 	bl	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   16080:	2328      	movs	r3, #40	; 0x28
   16082:	33ff      	adds	r3, #255	; 0xff
   16084:	2208      	movs	r2, #8
   16086:	4694      	mov	ip, r2
   16088:	44bc      	add	ip, r7
   1608a:	4463      	add	r3, ip
   1608c:	2201      	movs	r2, #1
   1608e:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   16090:	2000      	movs	r0, #0
   16092:	4b59      	ldr	r3, [pc, #356]	; (161f8 <processOnSMS+0x1440>)
   16094:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   16096:	4b4c      	ldr	r3, [pc, #304]	; (161c8 <processOnSMS+0x1410>)
   16098:	2294      	movs	r2, #148	; 0x94
   1609a:	0052      	lsls	r2, r2, #1
   1609c:	4694      	mov	ip, r2
   1609e:	2208      	movs	r2, #8
   160a0:	4690      	mov	r8, r2
   160a2:	44b8      	add	r8, r7
   160a4:	44c4      	add	ip, r8
   160a6:	4463      	add	r3, ip
   160a8:	781b      	ldrb	r3, [r3, #0]
   160aa:	2b00      	cmp	r3, #0
   160ac:	d101      	bne.n	160b2 <processOnSMS+0x12fa>
   160ae:	f000 fef0 	bl	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   160b2:	230c      	movs	r3, #12
   160b4:	2208      	movs	r2, #8
   160b6:	4694      	mov	ip, r2
   160b8:	44bc      	add	ip, r7
   160ba:	4463      	add	r3, ip
   160bc:	4a4f      	ldr	r2, [pc, #316]	; (161fc <processOnSMS+0x1444>)
   160be:	ca13      	ldmia	r2!, {r0, r1, r4}
   160c0:	c313      	stmia	r3!, {r0, r1, r4}
   160c2:	6812      	ldr	r2, [r2, #0]
   160c4:	601a      	str	r2, [r3, #0]
   160c6:	f000 fee4 	bl	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   160ca:	4a4d      	ldr	r2, [pc, #308]	; (16200 <processOnSMS+0x1448>)
   160cc:	68fb      	ldr	r3, [r7, #12]
   160ce:	0011      	movs	r1, r2
   160d0:	0018      	movs	r0, r3
   160d2:	4b37      	ldr	r3, [pc, #220]	; (161b0 <processOnSMS+0x13f8>)
   160d4:	4798      	blx	r3
   160d6:	1e03      	subs	r3, r0, #0
   160d8:	d01c      	beq.n	16114 <processOnSMS+0x135c>
	{
		incomingSMSProcessed=true;
   160da:	2328      	movs	r3, #40	; 0x28
   160dc:	33ff      	adds	r3, #255	; 0xff
   160de:	2208      	movs	r2, #8
   160e0:	4694      	mov	ip, r2
   160e2:	44bc      	add	ip, r7
   160e4:	4463      	add	r3, ip
   160e6:	2201      	movs	r2, #1
   160e8:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   160ea:	4b37      	ldr	r3, [pc, #220]	; (161c8 <processOnSMS+0x1410>)
   160ec:	2294      	movs	r2, #148	; 0x94
   160ee:	0052      	lsls	r2, r2, #1
   160f0:	4694      	mov	ip, r2
   160f2:	2208      	movs	r2, #8
   160f4:	4690      	mov	r8, r2
   160f6:	44b8      	add	r8, r7
   160f8:	44c4      	add	ip, r8
   160fa:	4463      	add	r3, ip
   160fc:	2201      	movs	r2, #1
   160fe:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
   16100:	230c      	movs	r3, #12
   16102:	2208      	movs	r2, #8
   16104:	4694      	mov	ip, r2
   16106:	44bc      	add	ip, r7
   16108:	4463      	add	r3, ip
   1610a:	0018      	movs	r0, r3
   1610c:	4b3d      	ldr	r3, [pc, #244]	; (16204 <processOnSMS+0x144c>)
   1610e:	4798      	blx	r3
   16110:	f000 febf 	bl	16e92 <processOnSMS+0x20da>
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   16114:	4a3c      	ldr	r2, [pc, #240]	; (16208 <processOnSMS+0x1450>)
   16116:	68fb      	ldr	r3, [r7, #12]
   16118:	0011      	movs	r1, r2
   1611a:	0018      	movs	r0, r3
   1611c:	4b24      	ldr	r3, [pc, #144]	; (161b0 <processOnSMS+0x13f8>)
   1611e:	4798      	blx	r3
   16120:	1e03      	subs	r3, r0, #0
   16122:	d100      	bne.n	16126 <processOnSMS+0x136e>
   16124:	e09a      	b.n	1625c <processOnSMS+0x14a4>
   16126:	4b39      	ldr	r3, [pc, #228]	; (1620c <processOnSMS+0x1454>)
   16128:	2294      	movs	r2, #148	; 0x94
   1612a:	0052      	lsls	r2, r2, #1
   1612c:	4694      	mov	ip, r2
   1612e:	2208      	movs	r2, #8
   16130:	4690      	mov	r8, r2
   16132:	44b8      	add	r8, r7
   16134:	44c4      	add	ip, r8
   16136:	4463      	add	r3, ip
   16138:	781b      	ldrb	r3, [r3, #0]
   1613a:	2b00      	cmp	r3, #0
   1613c:	d10c      	bne.n	16158 <processOnSMS+0x13a0>
   1613e:	4b34      	ldr	r3, [pc, #208]	; (16210 <processOnSMS+0x1458>)
   16140:	2294      	movs	r2, #148	; 0x94
   16142:	0052      	lsls	r2, r2, #1
   16144:	4694      	mov	ip, r2
   16146:	2208      	movs	r2, #8
   16148:	4690      	mov	r8, r2
   1614a:	44b8      	add	r8, r7
   1614c:	44c4      	add	ip, r8
   1614e:	4463      	add	r3, ip
   16150:	781b      	ldrb	r3, [r3, #0]
   16152:	2b00      	cmp	r3, #0
   16154:	d100      	bne.n	16158 <processOnSMS+0x13a0>
   16156:	e081      	b.n	1625c <processOnSMS+0x14a4>
	{
		incomingSMSProcessed=true;
   16158:	2328      	movs	r3, #40	; 0x28
   1615a:	33ff      	adds	r3, #255	; 0xff
   1615c:	2208      	movs	r2, #8
   1615e:	4694      	mov	ip, r2
   16160:	44bc      	add	ip, r7
   16162:	4463      	add	r3, ip
   16164:	2201      	movs	r2, #1
   16166:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16168:	4b2a      	ldr	r3, [pc, #168]	; (16214 <processOnSMS+0x145c>)
   1616a:	789b      	ldrb	r3, [r3, #2]
   1616c:	2b00      	cmp	r3, #0
   1616e:	d057      	beq.n	16220 <processOnSMS+0x1468>
		{
			saveAlterNumberSetting(true);
   16170:	2001      	movs	r0, #1
   16172:	4b29      	ldr	r3, [pc, #164]	; (16218 <processOnSMS+0x1460>)
   16174:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   16176:	4b14      	ldr	r3, [pc, #80]	; (161c8 <processOnSMS+0x1410>)
   16178:	2294      	movs	r2, #148	; 0x94
   1617a:	0052      	lsls	r2, r2, #1
   1617c:	4694      	mov	ip, r2
   1617e:	2208      	movs	r2, #8
   16180:	4690      	mov	r8, r2
   16182:	44b8      	add	r8, r7
   16184:	44c4      	add	ip, r8
   16186:	4463      	add	r3, ip
   16188:	781b      	ldrb	r3, [r3, #0]
   1618a:	2b00      	cmp	r3, #0
   1618c:	d101      	bne.n	16192 <processOnSMS+0x13da>
   1618e:	f000 fe7f 	bl	16e90 <processOnSMS+0x20d8>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   16192:	230c      	movs	r3, #12
   16194:	2208      	movs	r2, #8
   16196:	4694      	mov	ip, r2
   16198:	44bc      	add	ip, r7
   1619a:	4463      	add	r3, ip
   1619c:	4a1f      	ldr	r2, [pc, #124]	; (1621c <processOnSMS+0x1464>)
   1619e:	ca13      	ldmia	r2!, {r0, r1, r4}
   161a0:	c313      	stmia	r3!, {r0, r1, r4}
   161a2:	ca03      	ldmia	r2!, {r0, r1}
   161a4:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   161a6:	f000 fe73 	bl	16e90 <processOnSMS+0x20d8>
   161aa:	46c0      	nop			; (mov r8, r8)
   161ac:	0002a2d8 	.word	0x0002a2d8
   161b0:	00014019 	.word	0x00014019
   161b4:	20000628 	.word	0x20000628
   161b8:	200006d8 	.word	0x200006d8
   161bc:	20000650 	.word	0x20000650
   161c0:	0002a2e0 	.word	0x0002a2e0
   161c4:	00029019 	.word	0x00029019
   161c8:	fffffeda 	.word	0xfffffeda
   161cc:	0002a304 	.word	0x0002a304
   161d0:	000114a9 	.word	0x000114a9
   161d4:	0002a30c 	.word	0x0002a30c
   161d8:	0002a328 	.word	0x0002a328
   161dc:	0002a330 	.word	0x0002a330
   161e0:	0002a350 	.word	0x0002a350
   161e4:	20000554 	.word	0x20000554
   161e8:	00017175 	.word	0x00017175
   161ec:	0002a358 	.word	0x0002a358
   161f0:	0002a388 	.word	0x0002a388
   161f4:	0002a3b0 	.word	0x0002a3b0
   161f8:	00010bd9 	.word	0x00010bd9
   161fc:	0002a3b8 	.word	0x0002a3b8
   16200:	0002a3c8 	.word	0x0002a3c8
   16204:	00016f69 	.word	0x00016f69
   16208:	0002a050 	.word	0x0002a050
   1620c:	fffffedb 	.word	0xfffffedb
   16210:	fffffed9 	.word	0xfffffed9
   16214:	20000638 	.word	0x20000638
   16218:	000111dd 	.word	0x000111dd
   1621c:	0002a3d0 	.word	0x0002a3d0
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   16220:	4bed      	ldr	r3, [pc, #948]	; (165d8 <processOnSMS+0x1820>)
   16222:	2294      	movs	r2, #148	; 0x94
   16224:	0052      	lsls	r2, r2, #1
   16226:	4694      	mov	ip, r2
   16228:	2208      	movs	r2, #8
   1622a:	4690      	mov	r8, r2
   1622c:	44b8      	add	r8, r7
   1622e:	44c4      	add	ip, r8
   16230:	4463      	add	r3, ip
   16232:	781b      	ldrb	r3, [r3, #0]
   16234:	2b00      	cmp	r3, #0
   16236:	d101      	bne.n	1623c <processOnSMS+0x1484>
   16238:	f000 fe2a 	bl	16e90 <processOnSMS+0x20d8>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   1623c:	230c      	movs	r3, #12
   1623e:	2208      	movs	r2, #8
   16240:	4694      	mov	ip, r2
   16242:	44bc      	add	ip, r7
   16244:	4463      	add	r3, ip
   16246:	4ae5      	ldr	r2, [pc, #916]	; (165dc <processOnSMS+0x1824>)
   16248:	ca13      	ldmia	r2!, {r0, r1, r4}
   1624a:	c313      	stmia	r3!, {r0, r1, r4}
   1624c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1624e:	c313      	stmia	r3!, {r0, r1, r4}
   16250:	6811      	ldr	r1, [r2, #0]
   16252:	6019      	str	r1, [r3, #0]
   16254:	7912      	ldrb	r2, [r2, #4]
   16256:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   16258:	f000 fe1a 	bl	16e90 <processOnSMS+0x20d8>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   1625c:	4ae0      	ldr	r2, [pc, #896]	; (165e0 <processOnSMS+0x1828>)
   1625e:	68fb      	ldr	r3, [r7, #12]
   16260:	0011      	movs	r1, r2
   16262:	0018      	movs	r0, r3
   16264:	4bdf      	ldr	r3, [pc, #892]	; (165e4 <processOnSMS+0x182c>)
   16266:	4798      	blx	r3
   16268:	1e03      	subs	r3, r0, #0
   1626a:	d026      	beq.n	162ba <processOnSMS+0x1502>
	{
		saveAlterNumberSetting(false);
   1626c:	2000      	movs	r0, #0
   1626e:	4bde      	ldr	r3, [pc, #888]	; (165e8 <processOnSMS+0x1830>)
   16270:	4798      	blx	r3
		incomingSMSProcessed=true;
   16272:	2328      	movs	r3, #40	; 0x28
   16274:	33ff      	adds	r3, #255	; 0xff
   16276:	2208      	movs	r2, #8
   16278:	4694      	mov	ip, r2
   1627a:	44bc      	add	ip, r7
   1627c:	4463      	add	r3, ip
   1627e:	2201      	movs	r2, #1
   16280:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16282:	4bd5      	ldr	r3, [pc, #852]	; (165d8 <processOnSMS+0x1820>)
   16284:	2294      	movs	r2, #148	; 0x94
   16286:	0052      	lsls	r2, r2, #1
   16288:	4694      	mov	ip, r2
   1628a:	2208      	movs	r2, #8
   1628c:	4690      	mov	r8, r2
   1628e:	44b8      	add	r8, r7
   16290:	44c4      	add	ip, r8
   16292:	4463      	add	r3, ip
   16294:	781b      	ldrb	r3, [r3, #0]
   16296:	2b00      	cmp	r3, #0
   16298:	d101      	bne.n	1629e <processOnSMS+0x14e6>
   1629a:	f000 fdfa 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   1629e:	230c      	movs	r3, #12
   162a0:	2208      	movs	r2, #8
   162a2:	4694      	mov	ip, r2
   162a4:	44bc      	add	ip, r7
   162a6:	4463      	add	r3, ip
   162a8:	4ad0      	ldr	r2, [pc, #832]	; (165ec <processOnSMS+0x1834>)
   162aa:	ca13      	ldmia	r2!, {r0, r1, r4}
   162ac:	c313      	stmia	r3!, {r0, r1, r4}
   162ae:	ca13      	ldmia	r2!, {r0, r1, r4}
   162b0:	c313      	stmia	r3!, {r0, r1, r4}
   162b2:	6812      	ldr	r2, [r2, #0]
   162b4:	601a      	str	r2, [r3, #0]
   162b6:	f000 fdec 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   162ba:	4acd      	ldr	r2, [pc, #820]	; (165f0 <processOnSMS+0x1838>)
   162bc:	68fb      	ldr	r3, [r7, #12]
   162be:	0011      	movs	r1, r2
   162c0:	0018      	movs	r0, r3
   162c2:	4bc8      	ldr	r3, [pc, #800]	; (165e4 <processOnSMS+0x182c>)
   162c4:	4798      	blx	r3
   162c6:	1e03      	subs	r3, r0, #0
   162c8:	d029      	beq.n	1631e <processOnSMS+0x1566>
	{
		saveNoCallSettings(false,0,0,0,0);
   162ca:	2300      	movs	r3, #0
   162cc:	9300      	str	r3, [sp, #0]
   162ce:	2300      	movs	r3, #0
   162d0:	2200      	movs	r2, #0
   162d2:	2100      	movs	r1, #0
   162d4:	2000      	movs	r0, #0
   162d6:	4cc7      	ldr	r4, [pc, #796]	; (165f4 <processOnSMS+0x183c>)
   162d8:	47a0      	blx	r4
		incomingSMSProcessed=true;
   162da:	2328      	movs	r3, #40	; 0x28
   162dc:	33ff      	adds	r3, #255	; 0xff
   162de:	2208      	movs	r2, #8
   162e0:	4694      	mov	ip, r2
   162e2:	44bc      	add	ip, r7
   162e4:	4463      	add	r3, ip
   162e6:	2201      	movs	r2, #1
   162e8:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   162ea:	4bbb      	ldr	r3, [pc, #748]	; (165d8 <processOnSMS+0x1820>)
   162ec:	2294      	movs	r2, #148	; 0x94
   162ee:	0052      	lsls	r2, r2, #1
   162f0:	4694      	mov	ip, r2
   162f2:	2208      	movs	r2, #8
   162f4:	4690      	mov	r8, r2
   162f6:	44b8      	add	r8, r7
   162f8:	44c4      	add	ip, r8
   162fa:	4463      	add	r3, ip
   162fc:	781b      	ldrb	r3, [r3, #0]
   162fe:	2b00      	cmp	r3, #0
   16300:	d101      	bne.n	16306 <processOnSMS+0x154e>
   16302:	f000 fdc6 	bl	16e92 <processOnSMS+0x20da>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   16306:	230c      	movs	r3, #12
   16308:	2208      	movs	r2, #8
   1630a:	4694      	mov	ip, r2
   1630c:	44bc      	add	ip, r7
   1630e:	4463      	add	r3, ip
   16310:	4ab9      	ldr	r2, [pc, #740]	; (165f8 <processOnSMS+0x1840>)
   16312:	ca13      	ldmia	r2!, {r0, r1, r4}
   16314:	c313      	stmia	r3!, {r0, r1, r4}
   16316:	ca03      	ldmia	r2!, {r0, r1}
   16318:	c303      	stmia	r3!, {r0, r1}
   1631a:	f000 fdba 	bl	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   1631e:	4ab7      	ldr	r2, [pc, #732]	; (165fc <processOnSMS+0x1844>)
   16320:	68fb      	ldr	r3, [r7, #12]
   16322:	0011      	movs	r1, r2
   16324:	0018      	movs	r0, r3
   16326:	4baf      	ldr	r3, [pc, #700]	; (165e4 <processOnSMS+0x182c>)
   16328:	4798      	blx	r3
   1632a:	1e03      	subs	r3, r0, #0
   1632c:	d03e      	beq.n	163ac <processOnSMS+0x15f4>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   1632e:	230a      	movs	r3, #10
   16330:	2208      	movs	r2, #8
   16332:	18ba      	adds	r2, r7, r2
   16334:	18d2      	adds	r2, r2, r3
   16336:	230b      	movs	r3, #11
   16338:	2108      	movs	r1, #8
   1633a:	468c      	mov	ip, r1
   1633c:	44bc      	add	ip, r7
   1633e:	4463      	add	r3, ip
   16340:	0011      	movs	r1, r2
   16342:	0018      	movs	r0, r3
   16344:	4bae      	ldr	r3, [pc, #696]	; (16600 <processOnSMS+0x1848>)
   16346:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   16348:	4bae      	ldr	r3, [pc, #696]	; (16604 <processOnSMS+0x184c>)
   1634a:	2294      	movs	r2, #148	; 0x94
   1634c:	0052      	lsls	r2, r2, #1
   1634e:	4694      	mov	ip, r2
   16350:	2208      	movs	r2, #8
   16352:	4690      	mov	r8, r2
   16354:	44b8      	add	r8, r7
   16356:	44c4      	add	ip, r8
   16358:	4463      	add	r3, ip
   1635a:	781b      	ldrb	r3, [r3, #0]
   1635c:	001a      	movs	r2, r3
   1635e:	4baa      	ldr	r3, [pc, #680]	; (16608 <processOnSMS+0x1850>)
   16360:	2194      	movs	r1, #148	; 0x94
   16362:	0049      	lsls	r1, r1, #1
   16364:	468c      	mov	ip, r1
   16366:	2108      	movs	r1, #8
   16368:	4688      	mov	r8, r1
   1636a:	44b8      	add	r8, r7
   1636c:	44c4      	add	ip, r8
   1636e:	4463      	add	r3, ip
   16370:	781b      	ldrb	r3, [r3, #0]
   16372:	49a6      	ldr	r1, [pc, #664]	; (1660c <processOnSMS+0x1854>)
   16374:	200c      	movs	r0, #12
   16376:	2408      	movs	r4, #8
   16378:	46a4      	mov	ip, r4
   1637a:	44bc      	add	ip, r7
   1637c:	4460      	add	r0, ip
   1637e:	4ca4      	ldr	r4, [pc, #656]	; (16610 <processOnSMS+0x1858>)
   16380:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   16382:	2328      	movs	r3, #40	; 0x28
   16384:	33ff      	adds	r3, #255	; 0xff
   16386:	2208      	movs	r2, #8
   16388:	4694      	mov	ip, r2
   1638a:	44bc      	add	ip, r7
   1638c:	4463      	add	r3, ip
   1638e:	2201      	movs	r2, #1
   16390:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   16392:	4b91      	ldr	r3, [pc, #580]	; (165d8 <processOnSMS+0x1820>)
   16394:	2294      	movs	r2, #148	; 0x94
   16396:	0052      	lsls	r2, r2, #1
   16398:	4694      	mov	ip, r2
   1639a:	2208      	movs	r2, #8
   1639c:	4690      	mov	r8, r2
   1639e:	44b8      	add	r8, r7
   163a0:	44c4      	add	ip, r8
   163a2:	4463      	add	r3, ip
   163a4:	2201      	movs	r2, #1
   163a6:	701a      	strb	r2, [r3, #0]
   163a8:	f000 fd73 	bl	16e92 <processOnSMS+0x20da>
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   163ac:	4a99      	ldr	r2, [pc, #612]	; (16614 <processOnSMS+0x185c>)
   163ae:	68fb      	ldr	r3, [r7, #12]
   163b0:	0011      	movs	r1, r2
   163b2:	0018      	movs	r0, r3
   163b4:	4b8b      	ldr	r3, [pc, #556]	; (165e4 <processOnSMS+0x182c>)
   163b6:	4798      	blx	r3
   163b8:	1e03      	subs	r3, r0, #0
   163ba:	d001      	beq.n	163c0 <processOnSMS+0x1608>
   163bc:	f000 fd69 	bl	16e92 <processOnSMS+0x20da>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   163c0:	4a95      	ldr	r2, [pc, #596]	; (16618 <processOnSMS+0x1860>)
   163c2:	68fb      	ldr	r3, [r7, #12]
   163c4:	0011      	movs	r1, r2
   163c6:	0018      	movs	r0, r3
   163c8:	4b86      	ldr	r3, [pc, #536]	; (165e4 <processOnSMS+0x182c>)
   163ca:	4798      	blx	r3
   163cc:	1e03      	subs	r3, r0, #0
   163ce:	d100      	bne.n	163d2 <processOnSMS+0x161a>
   163d0:	e167      	b.n	166a2 <processOnSMS+0x18ea>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   163d2:	4a92      	ldr	r2, [pc, #584]	; (1661c <processOnSMS+0x1864>)
   163d4:	68fb      	ldr	r3, [r7, #12]
   163d6:	0011      	movs	r1, r2
   163d8:	0018      	movs	r0, r3
   163da:	4b91      	ldr	r3, [pc, #580]	; (16620 <processOnSMS+0x1868>)
   163dc:	4798      	blx	r3
   163de:	0003      	movs	r3, r0
   163e0:	2288      	movs	r2, #136	; 0x88
   163e2:	0052      	lsls	r2, r2, #1
   163e4:	2108      	movs	r1, #8
   163e6:	468c      	mov	ip, r1
   163e8:	44bc      	add	ip, r7
   163ea:	4462      	add	r2, ip
   163ec:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   163ee:	4b8d      	ldr	r3, [pc, #564]	; (16624 <processOnSMS+0x186c>)
   163f0:	0019      	movs	r1, r3
   163f2:	2000      	movs	r0, #0
   163f4:	4b8a      	ldr	r3, [pc, #552]	; (16620 <processOnSMS+0x1868>)
   163f6:	4798      	blx	r3
   163f8:	0003      	movs	r3, r0
   163fa:	2288      	movs	r2, #136	; 0x88
   163fc:	0052      	lsls	r2, r2, #1
   163fe:	2108      	movs	r1, #8
   16400:	468c      	mov	ip, r1
   16402:	44bc      	add	ip, r7
   16404:	4462      	add	r2, ip
   16406:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   16408:	2388      	movs	r3, #136	; 0x88
   1640a:	005b      	lsls	r3, r3, #1
   1640c:	2208      	movs	r2, #8
   1640e:	4694      	mov	ip, r2
   16410:	44bc      	add	ip, r7
   16412:	4463      	add	r3, ip
   16414:	681b      	ldr	r3, [r3, #0]
   16416:	781b      	ldrb	r3, [r3, #0]
   16418:	0018      	movs	r0, r3
   1641a:	4b83      	ldr	r3, [pc, #524]	; (16628 <processOnSMS+0x1870>)
   1641c:	4798      	blx	r3
   1641e:	0002      	movs	r2, r0
   16420:	2310      	movs	r3, #16
   16422:	33ff      	adds	r3, #255	; 0xff
   16424:	2108      	movs	r1, #8
   16426:	468c      	mov	ip, r1
   16428:	44bc      	add	ip, r7
   1642a:	4463      	add	r3, ip
   1642c:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   1642e:	4b7b      	ldr	r3, [pc, #492]	; (1661c <processOnSMS+0x1864>)
   16430:	0019      	movs	r1, r3
   16432:	2000      	movs	r0, #0
   16434:	4b7a      	ldr	r3, [pc, #488]	; (16620 <processOnSMS+0x1868>)
   16436:	4798      	blx	r3
   16438:	0003      	movs	r3, r0
   1643a:	2288      	movs	r2, #136	; 0x88
   1643c:	0052      	lsls	r2, r2, #1
   1643e:	2108      	movs	r1, #8
   16440:	468c      	mov	ip, r1
   16442:	44bc      	add	ip, r7
   16444:	4462      	add	r2, ip
   16446:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   16448:	2388      	movs	r3, #136	; 0x88
   1644a:	005b      	lsls	r3, r3, #1
   1644c:	2208      	movs	r2, #8
   1644e:	4694      	mov	ip, r2
   16450:	44bc      	add	ip, r7
   16452:	4463      	add	r3, ip
   16454:	681b      	ldr	r3, [r3, #0]
   16456:	781b      	ldrb	r3, [r3, #0]
   16458:	0018      	movs	r0, r3
   1645a:	4b73      	ldr	r3, [pc, #460]	; (16628 <processOnSMS+0x1870>)
   1645c:	4798      	blx	r3
   1645e:	0002      	movs	r2, r0
   16460:	2387      	movs	r3, #135	; 0x87
   16462:	005b      	lsls	r3, r3, #1
   16464:	2108      	movs	r1, #8
   16466:	468c      	mov	ip, r1
   16468:	44bc      	add	ip, r7
   1646a:	4463      	add	r3, ip
   1646c:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   1646e:	4b6d      	ldr	r3, [pc, #436]	; (16624 <processOnSMS+0x186c>)
   16470:	0019      	movs	r1, r3
   16472:	2000      	movs	r0, #0
   16474:	4b6a      	ldr	r3, [pc, #424]	; (16620 <processOnSMS+0x1868>)
   16476:	4798      	blx	r3
   16478:	0003      	movs	r3, r0
   1647a:	2288      	movs	r2, #136	; 0x88
   1647c:	0052      	lsls	r2, r2, #1
   1647e:	2108      	movs	r1, #8
   16480:	468c      	mov	ip, r1
   16482:	44bc      	add	ip, r7
   16484:	4462      	add	r2, ip
   16486:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   16488:	2388      	movs	r3, #136	; 0x88
   1648a:	005b      	lsls	r3, r3, #1
   1648c:	2208      	movs	r2, #8
   1648e:	4694      	mov	ip, r2
   16490:	44bc      	add	ip, r7
   16492:	4463      	add	r3, ip
   16494:	681b      	ldr	r3, [r3, #0]
   16496:	781b      	ldrb	r3, [r3, #0]
   16498:	0018      	movs	r0, r3
   1649a:	4b63      	ldr	r3, [pc, #396]	; (16628 <processOnSMS+0x1870>)
   1649c:	4798      	blx	r3
   1649e:	0002      	movs	r2, r0
   164a0:	230e      	movs	r3, #14
   164a2:	33ff      	adds	r3, #255	; 0xff
   164a4:	2108      	movs	r1, #8
   164a6:	468c      	mov	ip, r1
   164a8:	44bc      	add	ip, r7
   164aa:	4463      	add	r3, ip
   164ac:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   164ae:	4b5d      	ldr	r3, [pc, #372]	; (16624 <processOnSMS+0x186c>)
   164b0:	0019      	movs	r1, r3
   164b2:	2000      	movs	r0, #0
   164b4:	4b5a      	ldr	r3, [pc, #360]	; (16620 <processOnSMS+0x1868>)
   164b6:	4798      	blx	r3
   164b8:	0003      	movs	r3, r0
   164ba:	2288      	movs	r2, #136	; 0x88
   164bc:	0052      	lsls	r2, r2, #1
   164be:	2108      	movs	r1, #8
   164c0:	468c      	mov	ip, r1
   164c2:	44bc      	add	ip, r7
   164c4:	4462      	add	r2, ip
   164c6:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   164c8:	2388      	movs	r3, #136	; 0x88
   164ca:	005b      	lsls	r3, r3, #1
   164cc:	2208      	movs	r2, #8
   164ce:	4694      	mov	ip, r2
   164d0:	44bc      	add	ip, r7
   164d2:	4463      	add	r3, ip
   164d4:	681b      	ldr	r3, [r3, #0]
   164d6:	781b      	ldrb	r3, [r3, #0]
   164d8:	0018      	movs	r0, r3
   164da:	4b53      	ldr	r3, [pc, #332]	; (16628 <processOnSMS+0x1870>)
   164dc:	4798      	blx	r3
   164de:	0002      	movs	r2, r0
   164e0:	2386      	movs	r3, #134	; 0x86
   164e2:	005b      	lsls	r3, r3, #1
   164e4:	2108      	movs	r1, #8
   164e6:	468c      	mov	ip, r1
   164e8:	44bc      	add	ip, r7
   164ea:	4463      	add	r3, ip
   164ec:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   164ee:	2310      	movs	r3, #16
   164f0:	33ff      	adds	r3, #255	; 0xff
   164f2:	2208      	movs	r2, #8
   164f4:	4694      	mov	ip, r2
   164f6:	44bc      	add	ip, r7
   164f8:	4463      	add	r3, ip
   164fa:	781b      	ldrb	r3, [r3, #0]
   164fc:	2b17      	cmp	r3, #23
   164fe:	d901      	bls.n	16504 <processOnSMS+0x174c>
   16500:	f000 fcc7 	bl	16e92 <processOnSMS+0x20da>
   16504:	2387      	movs	r3, #135	; 0x87
   16506:	005b      	lsls	r3, r3, #1
   16508:	2208      	movs	r2, #8
   1650a:	4694      	mov	ip, r2
   1650c:	44bc      	add	ip, r7
   1650e:	4463      	add	r3, ip
   16510:	781b      	ldrb	r3, [r3, #0]
   16512:	2b3b      	cmp	r3, #59	; 0x3b
   16514:	d901      	bls.n	1651a <processOnSMS+0x1762>
   16516:	f000 fcbc 	bl	16e92 <processOnSMS+0x20da>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   1651a:	230e      	movs	r3, #14
   1651c:	33ff      	adds	r3, #255	; 0xff
   1651e:	2208      	movs	r2, #8
   16520:	4694      	mov	ip, r2
   16522:	44bc      	add	ip, r7
   16524:	4463      	add	r3, ip
   16526:	781b      	ldrb	r3, [r3, #0]
   16528:	2b17      	cmp	r3, #23
   1652a:	d901      	bls.n	16530 <processOnSMS+0x1778>
   1652c:	f000 fcb1 	bl	16e92 <processOnSMS+0x20da>
   16530:	2386      	movs	r3, #134	; 0x86
   16532:	005b      	lsls	r3, r3, #1
   16534:	2208      	movs	r2, #8
   16536:	4694      	mov	ip, r2
   16538:	44bc      	add	ip, r7
   1653a:	4463      	add	r3, ip
   1653c:	781b      	ldrb	r3, [r3, #0]
   1653e:	2b3b      	cmp	r3, #59	; 0x3b
   16540:	d901      	bls.n	16546 <processOnSMS+0x178e>
   16542:	f000 fca6 	bl	16e92 <processOnSMS+0x20da>
			{
				incomingSMSProcessed=true;
   16546:	2328      	movs	r3, #40	; 0x28
   16548:	33ff      	adds	r3, #255	; 0xff
   1654a:	2208      	movs	r2, #8
   1654c:	4694      	mov	ip, r2
   1654e:	44bc      	add	ip, r7
   16550:	4463      	add	r3, ip
   16552:	2201      	movs	r2, #1
   16554:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   16556:	2310      	movs	r3, #16
   16558:	33ff      	adds	r3, #255	; 0xff
   1655a:	2208      	movs	r2, #8
   1655c:	18ba      	adds	r2, r7, r2
   1655e:	18d2      	adds	r2, r2, r3
   16560:	230e      	movs	r3, #14
   16562:	33ff      	adds	r3, #255	; 0xff
   16564:	2108      	movs	r1, #8
   16566:	468c      	mov	ip, r1
   16568:	44bc      	add	ip, r7
   1656a:	4463      	add	r3, ip
   1656c:	7812      	ldrb	r2, [r2, #0]
   1656e:	781b      	ldrb	r3, [r3, #0]
   16570:	429a      	cmp	r2, r3
   16572:	d15b      	bne.n	1662c <processOnSMS+0x1874>
   16574:	2387      	movs	r3, #135	; 0x87
   16576:	005b      	lsls	r3, r3, #1
   16578:	2208      	movs	r2, #8
   1657a:	18ba      	adds	r2, r7, r2
   1657c:	18d2      	adds	r2, r2, r3
   1657e:	2386      	movs	r3, #134	; 0x86
   16580:	005b      	lsls	r3, r3, #1
   16582:	2108      	movs	r1, #8
   16584:	468c      	mov	ip, r1
   16586:	44bc      	add	ip, r7
   16588:	4463      	add	r3, ip
   1658a:	7812      	ldrb	r2, [r2, #0]
   1658c:	781b      	ldrb	r3, [r3, #0]
   1658e:	429a      	cmp	r2, r3
   16590:	d14c      	bne.n	1662c <processOnSMS+0x1874>
				{
					saveNoCallSettings(false,0,0,0,0);
   16592:	2300      	movs	r3, #0
   16594:	9300      	str	r3, [sp, #0]
   16596:	2300      	movs	r3, #0
   16598:	2200      	movs	r2, #0
   1659a:	2100      	movs	r1, #0
   1659c:	2000      	movs	r0, #0
   1659e:	4c15      	ldr	r4, [pc, #84]	; (165f4 <processOnSMS+0x183c>)
   165a0:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   165a2:	4b0d      	ldr	r3, [pc, #52]	; (165d8 <processOnSMS+0x1820>)
   165a4:	2294      	movs	r2, #148	; 0x94
   165a6:	0052      	lsls	r2, r2, #1
   165a8:	4694      	mov	ip, r2
   165aa:	2208      	movs	r2, #8
   165ac:	4690      	mov	r8, r2
   165ae:	44b8      	add	r8, r7
   165b0:	44c4      	add	ip, r8
   165b2:	4463      	add	r3, ip
   165b4:	781b      	ldrb	r3, [r3, #0]
   165b6:	2b00      	cmp	r3, #0
   165b8:	d101      	bne.n	165be <processOnSMS+0x1806>
   165ba:	f000 fc6a 	bl	16e92 <processOnSMS+0x20da>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   165be:	230c      	movs	r3, #12
   165c0:	2208      	movs	r2, #8
   165c2:	4694      	mov	ip, r2
   165c4:	44bc      	add	ip, r7
   165c6:	4463      	add	r3, ip
   165c8:	4a0b      	ldr	r2, [pc, #44]	; (165f8 <processOnSMS+0x1840>)
   165ca:	ca13      	ldmia	r2!, {r0, r1, r4}
   165cc:	c313      	stmia	r3!, {r0, r1, r4}
   165ce:	ca03      	ldmia	r2!, {r0, r1}
   165d0:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   165d2:	f000 fc5e 	bl	16e92 <processOnSMS+0x20da>
   165d6:	46c0      	nop			; (mov r8, r8)
   165d8:	fffffeda 	.word	0xfffffeda
   165dc:	0002a3e4 	.word	0x0002a3e4
   165e0:	0002a404 	.word	0x0002a404
   165e4:	00014019 	.word	0x00014019
   165e8:	000111dd 	.word	0x000111dd
   165ec:	0002a40c 	.word	0x0002a40c
   165f0:	0002a428 	.word	0x0002a428
   165f4:	000113cd 	.word	0x000113cd
   165f8:	0002a430 	.word	0x0002a430
   165fc:	0002a444 	.word	0x0002a444
   16600:	000173ad 	.word	0x000173ad
   16604:	fffffee3 	.word	0xfffffee3
   16608:	fffffee2 	.word	0xfffffee2
   1660c:	0002a44c 	.word	0x0002a44c
   16610:	00029019 	.word	0x00029019
   16614:	0002a45c 	.word	0x0002a45c
   16618:	0002a464 	.word	0x0002a464
   1661c:	0002a46c 	.word	0x0002a46c
   16620:	00029105 	.word	0x00029105
   16624:	0002a470 	.word	0x0002a470
   16628:	00028cf9 	.word	0x00028cf9
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   1662c:	230e      	movs	r3, #14
   1662e:	33ff      	adds	r3, #255	; 0xff
   16630:	2208      	movs	r2, #8
   16632:	4694      	mov	ip, r2
   16634:	44bc      	add	ip, r7
   16636:	4463      	add	r3, ip
   16638:	7818      	ldrb	r0, [r3, #0]
   1663a:	2387      	movs	r3, #135	; 0x87
   1663c:	005b      	lsls	r3, r3, #1
   1663e:	2208      	movs	r2, #8
   16640:	4694      	mov	ip, r2
   16642:	44bc      	add	ip, r7
   16644:	4463      	add	r3, ip
   16646:	781a      	ldrb	r2, [r3, #0]
   16648:	2310      	movs	r3, #16
   1664a:	33ff      	adds	r3, #255	; 0xff
   1664c:	2108      	movs	r1, #8
   1664e:	468c      	mov	ip, r1
   16650:	44bc      	add	ip, r7
   16652:	4463      	add	r3, ip
   16654:	7819      	ldrb	r1, [r3, #0]
   16656:	2386      	movs	r3, #134	; 0x86
   16658:	005b      	lsls	r3, r3, #1
   1665a:	2408      	movs	r4, #8
   1665c:	46a4      	mov	ip, r4
   1665e:	44bc      	add	ip, r7
   16660:	4463      	add	r3, ip
   16662:	781b      	ldrb	r3, [r3, #0]
   16664:	9300      	str	r3, [sp, #0]
   16666:	0003      	movs	r3, r0
   16668:	2001      	movs	r0, #1
   1666a:	4ccf      	ldr	r4, [pc, #828]	; (169a8 <processOnSMS+0x1bf0>)
   1666c:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   1666e:	4bcf      	ldr	r3, [pc, #828]	; (169ac <processOnSMS+0x1bf4>)
   16670:	2294      	movs	r2, #148	; 0x94
   16672:	0052      	lsls	r2, r2, #1
   16674:	4694      	mov	ip, r2
   16676:	2208      	movs	r2, #8
   16678:	4690      	mov	r8, r2
   1667a:	44b8      	add	r8, r7
   1667c:	44c4      	add	ip, r8
   1667e:	4463      	add	r3, ip
   16680:	781b      	ldrb	r3, [r3, #0]
   16682:	2b00      	cmp	r3, #0
   16684:	d101      	bne.n	1668a <processOnSMS+0x18d2>
   16686:	f000 fc04 	bl	16e92 <processOnSMS+0x20da>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   1668a:	230c      	movs	r3, #12
   1668c:	2208      	movs	r2, #8
   1668e:	4694      	mov	ip, r2
   16690:	44bc      	add	ip, r7
   16692:	4463      	add	r3, ip
   16694:	4ac6      	ldr	r2, [pc, #792]	; (169b0 <processOnSMS+0x1bf8>)
   16696:	ca13      	ldmia	r2!, {r0, r1, r4}
   16698:	c313      	stmia	r3!, {r0, r1, r4}
   1669a:	ca03      	ldmia	r2!, {r0, r1}
   1669c:	c303      	stmia	r3!, {r0, r1}
   1669e:	f000 fbf8 	bl	16e92 <processOnSMS+0x20da>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   166a2:	4ac4      	ldr	r2, [pc, #784]	; (169b4 <processOnSMS+0x1bfc>)
   166a4:	68fb      	ldr	r3, [r7, #12]
   166a6:	0011      	movs	r1, r2
   166a8:	0018      	movs	r0, r3
   166aa:	4bc3      	ldr	r3, [pc, #780]	; (169b8 <processOnSMS+0x1c00>)
   166ac:	4798      	blx	r3
   166ae:	1e03      	subs	r3, r0, #0
   166b0:	d059      	beq.n	16766 <processOnSMS+0x19ae>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   166b2:	68fb      	ldr	r3, [r7, #12]
   166b4:	1d5c      	adds	r4, r3, #5
   166b6:	68fb      	ldr	r3, [r7, #12]
   166b8:	0018      	movs	r0, r3
   166ba:	4bc0      	ldr	r3, [pc, #768]	; (169bc <processOnSMS+0x1c04>)
   166bc:	4798      	blx	r3
   166be:	0002      	movs	r2, r0
   166c0:	68fb      	ldr	r3, [r7, #12]
   166c2:	0021      	movs	r1, r4
   166c4:	0018      	movs	r0, r3
   166c6:	4bbe      	ldr	r3, [pc, #760]	; (169c0 <processOnSMS+0x1c08>)
   166c8:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   166ca:	68fb      	ldr	r3, [r7, #12]
   166cc:	0018      	movs	r0, r3
   166ce:	4bbd      	ldr	r3, [pc, #756]	; (169c4 <processOnSMS+0x1c0c>)
   166d0:	4798      	blx	r3
   166d2:	0002      	movs	r2, r0
   166d4:	2390      	movs	r3, #144	; 0x90
   166d6:	005b      	lsls	r3, r3, #1
   166d8:	2108      	movs	r1, #8
   166da:	468c      	mov	ip, r1
   166dc:	44bc      	add	ip, r7
   166de:	4463      	add	r3, ip
   166e0:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   166e2:	2390      	movs	r3, #144	; 0x90
   166e4:	005b      	lsls	r3, r3, #1
   166e6:	2208      	movs	r2, #8
   166e8:	4694      	mov	ip, r2
   166ea:	44bc      	add	ip, r7
   166ec:	4463      	add	r3, ip
   166ee:	881b      	ldrh	r3, [r3, #0]
   166f0:	2b05      	cmp	r3, #5
   166f2:	d907      	bls.n	16704 <processOnSMS+0x194c>
   166f4:	2390      	movs	r3, #144	; 0x90
   166f6:	005b      	lsls	r3, r3, #1
   166f8:	2208      	movs	r2, #8
   166fa:	4694      	mov	ip, r2
   166fc:	44bc      	add	ip, r7
   166fe:	4463      	add	r3, ip
   16700:	2205      	movs	r2, #5
   16702:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   16704:	2390      	movs	r3, #144	; 0x90
   16706:	005b      	lsls	r3, r3, #1
   16708:	2208      	movs	r2, #8
   1670a:	4694      	mov	ip, r2
   1670c:	44bc      	add	ip, r7
   1670e:	4463      	add	r3, ip
   16710:	881b      	ldrh	r3, [r3, #0]
   16712:	b2db      	uxtb	r3, r3
   16714:	0018      	movs	r0, r3
   16716:	4bac      	ldr	r3, [pc, #688]	; (169c8 <processOnSMS+0x1c10>)
   16718:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1671a:	2328      	movs	r3, #40	; 0x28
   1671c:	33ff      	adds	r3, #255	; 0xff
   1671e:	2208      	movs	r2, #8
   16720:	4694      	mov	ip, r2
   16722:	44bc      	add	ip, r7
   16724:	4463      	add	r3, ip
   16726:	2201      	movs	r2, #1
   16728:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   1672a:	4ba0      	ldr	r3, [pc, #640]	; (169ac <processOnSMS+0x1bf4>)
   1672c:	2294      	movs	r2, #148	; 0x94
   1672e:	0052      	lsls	r2, r2, #1
   16730:	4694      	mov	ip, r2
   16732:	2208      	movs	r2, #8
   16734:	4690      	mov	r8, r2
   16736:	44b8      	add	r8, r7
   16738:	44c4      	add	ip, r8
   1673a:	4463      	add	r3, ip
   1673c:	781b      	ldrb	r3, [r3, #0]
   1673e:	2b00      	cmp	r3, #0
   16740:	d100      	bne.n	16744 <processOnSMS+0x198c>
   16742:	e3a6      	b.n	16e92 <processOnSMS+0x20da>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   16744:	2390      	movs	r3, #144	; 0x90
   16746:	005b      	lsls	r3, r3, #1
   16748:	2208      	movs	r2, #8
   1674a:	4694      	mov	ip, r2
   1674c:	44bc      	add	ip, r7
   1674e:	4463      	add	r3, ip
   16750:	881a      	ldrh	r2, [r3, #0]
   16752:	499e      	ldr	r1, [pc, #632]	; (169cc <processOnSMS+0x1c14>)
   16754:	230c      	movs	r3, #12
   16756:	2008      	movs	r0, #8
   16758:	4684      	mov	ip, r0
   1675a:	44bc      	add	ip, r7
   1675c:	4463      	add	r3, ip
   1675e:	0018      	movs	r0, r3
   16760:	4b9b      	ldr	r3, [pc, #620]	; (169d0 <processOnSMS+0x1c18>)
   16762:	4798      	blx	r3
   16764:	e395      	b.n	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   16766:	4a9b      	ldr	r2, [pc, #620]	; (169d4 <processOnSMS+0x1c1c>)
   16768:	68fb      	ldr	r3, [r7, #12]
   1676a:	0011      	movs	r1, r2
   1676c:	0018      	movs	r0, r3
   1676e:	4b92      	ldr	r3, [pc, #584]	; (169b8 <processOnSMS+0x1c00>)
   16770:	4798      	blx	r3
   16772:	1e03      	subs	r3, r0, #0
   16774:	d06d      	beq.n	16852 <processOnSMS+0x1a9a>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16776:	68fb      	ldr	r3, [r7, #12]
   16778:	3308      	adds	r3, #8
   1677a:	001c      	movs	r4, r3
   1677c:	68fb      	ldr	r3, [r7, #12]
   1677e:	0018      	movs	r0, r3
   16780:	4b8e      	ldr	r3, [pc, #568]	; (169bc <processOnSMS+0x1c04>)
   16782:	4798      	blx	r3
   16784:	0002      	movs	r2, r0
   16786:	68fb      	ldr	r3, [r7, #12]
   16788:	0021      	movs	r1, r4
   1678a:	0018      	movs	r0, r3
   1678c:	4b8c      	ldr	r3, [pc, #560]	; (169c0 <processOnSMS+0x1c08>)
   1678e:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   16790:	68fb      	ldr	r3, [r7, #12]
   16792:	0018      	movs	r0, r3
   16794:	4b8b      	ldr	r3, [pc, #556]	; (169c4 <processOnSMS+0x1c0c>)
   16796:	4798      	blx	r3
   16798:	0002      	movs	r2, r0
   1679a:	238f      	movs	r3, #143	; 0x8f
   1679c:	005b      	lsls	r3, r3, #1
   1679e:	2108      	movs	r1, #8
   167a0:	468c      	mov	ip, r1
   167a2:	44bc      	add	ip, r7
   167a4:	4463      	add	r3, ip
   167a6:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   167a8:	238f      	movs	r3, #143	; 0x8f
   167aa:	005b      	lsls	r3, r3, #1
   167ac:	2208      	movs	r2, #8
   167ae:	4694      	mov	ip, r2
   167b0:	44bc      	add	ip, r7
   167b2:	4463      	add	r3, ip
   167b4:	881b      	ldrh	r3, [r3, #0]
   167b6:	2b01      	cmp	r3, #1
   167b8:	d807      	bhi.n	167ca <processOnSMS+0x1a12>
		{
			STARTIME = 2;
   167ba:	238f      	movs	r3, #143	; 0x8f
   167bc:	005b      	lsls	r3, r3, #1
   167be:	2208      	movs	r2, #8
   167c0:	4694      	mov	ip, r2
   167c2:	44bc      	add	ip, r7
   167c4:	4463      	add	r3, ip
   167c6:	2202      	movs	r2, #2
   167c8:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
   167ca:	238f      	movs	r3, #143	; 0x8f
   167cc:	005b      	lsls	r3, r3, #1
   167ce:	2208      	movs	r2, #8
   167d0:	4694      	mov	ip, r2
   167d2:	44bc      	add	ip, r7
   167d4:	4463      	add	r3, ip
   167d6:	881a      	ldrh	r2, [r3, #0]
   167d8:	2396      	movs	r3, #150	; 0x96
   167da:	00db      	lsls	r3, r3, #3
   167dc:	429a      	cmp	r2, r3
   167de:	d908      	bls.n	167f2 <processOnSMS+0x1a3a>
		{
			STARTIME = 1200;
   167e0:	238f      	movs	r3, #143	; 0x8f
   167e2:	005b      	lsls	r3, r3, #1
   167e4:	2208      	movs	r2, #8
   167e6:	4694      	mov	ip, r2
   167e8:	44bc      	add	ip, r7
   167ea:	4463      	add	r3, ip
   167ec:	2296      	movs	r2, #150	; 0x96
   167ee:	00d2      	lsls	r2, r2, #3
   167f0:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   167f2:	238f      	movs	r3, #143	; 0x8f
   167f4:	005b      	lsls	r3, r3, #1
   167f6:	2208      	movs	r2, #8
   167f8:	4694      	mov	ip, r2
   167fa:	44bc      	add	ip, r7
   167fc:	4463      	add	r3, ip
   167fe:	881b      	ldrh	r3, [r3, #0]
   16800:	0018      	movs	r0, r3
   16802:	4b75      	ldr	r3, [pc, #468]	; (169d8 <processOnSMS+0x1c20>)
   16804:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   16806:	2328      	movs	r3, #40	; 0x28
   16808:	33ff      	adds	r3, #255	; 0xff
   1680a:	2208      	movs	r2, #8
   1680c:	4694      	mov	ip, r2
   1680e:	44bc      	add	ip, r7
   16810:	4463      	add	r3, ip
   16812:	2201      	movs	r2, #1
   16814:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16816:	4b65      	ldr	r3, [pc, #404]	; (169ac <processOnSMS+0x1bf4>)
   16818:	2294      	movs	r2, #148	; 0x94
   1681a:	0052      	lsls	r2, r2, #1
   1681c:	4694      	mov	ip, r2
   1681e:	2208      	movs	r2, #8
   16820:	4690      	mov	r8, r2
   16822:	44b8      	add	r8, r7
   16824:	44c4      	add	ip, r8
   16826:	4463      	add	r3, ip
   16828:	781b      	ldrb	r3, [r3, #0]
   1682a:	2b00      	cmp	r3, #0
   1682c:	d100      	bne.n	16830 <processOnSMS+0x1a78>
   1682e:	e330      	b.n	16e92 <processOnSMS+0x20da>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   16830:	238f      	movs	r3, #143	; 0x8f
   16832:	005b      	lsls	r3, r3, #1
   16834:	2208      	movs	r2, #8
   16836:	4694      	mov	ip, r2
   16838:	44bc      	add	ip, r7
   1683a:	4463      	add	r3, ip
   1683c:	881a      	ldrh	r2, [r3, #0]
   1683e:	4967      	ldr	r1, [pc, #412]	; (169dc <processOnSMS+0x1c24>)
   16840:	230c      	movs	r3, #12
   16842:	2008      	movs	r0, #8
   16844:	4684      	mov	ip, r0
   16846:	44bc      	add	ip, r7
   16848:	4463      	add	r3, ip
   1684a:	0018      	movs	r0, r3
   1684c:	4b60      	ldr	r3, [pc, #384]	; (169d0 <processOnSMS+0x1c18>)
   1684e:	4798      	blx	r3
   16850:	e31f      	b.n	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   16852:	4a63      	ldr	r2, [pc, #396]	; (169e0 <processOnSMS+0x1c28>)
   16854:	68fb      	ldr	r3, [r7, #12]
   16856:	0011      	movs	r1, r2
   16858:	0018      	movs	r0, r3
   1685a:	4b57      	ldr	r3, [pc, #348]	; (169b8 <processOnSMS+0x1c00>)
   1685c:	4798      	blx	r3
   1685e:	1e03      	subs	r3, r0, #0
   16860:	d06d      	beq.n	1693e <processOnSMS+0x1b86>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16862:	68fb      	ldr	r3, [r7, #12]
   16864:	3308      	adds	r3, #8
   16866:	001c      	movs	r4, r3
   16868:	68fb      	ldr	r3, [r7, #12]
   1686a:	0018      	movs	r0, r3
   1686c:	4b53      	ldr	r3, [pc, #332]	; (169bc <processOnSMS+0x1c04>)
   1686e:	4798      	blx	r3
   16870:	0002      	movs	r2, r0
   16872:	68fb      	ldr	r3, [r7, #12]
   16874:	0021      	movs	r1, r4
   16876:	0018      	movs	r0, r3
   16878:	4b51      	ldr	r3, [pc, #324]	; (169c0 <processOnSMS+0x1c08>)
   1687a:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   1687c:	68fb      	ldr	r3, [r7, #12]
   1687e:	0018      	movs	r0, r3
   16880:	4b50      	ldr	r3, [pc, #320]	; (169c4 <processOnSMS+0x1c0c>)
   16882:	4798      	blx	r3
   16884:	0002      	movs	r2, r0
   16886:	238e      	movs	r3, #142	; 0x8e
   16888:	005b      	lsls	r3, r3, #1
   1688a:	2108      	movs	r1, #8
   1688c:	468c      	mov	ip, r1
   1688e:	44bc      	add	ip, r7
   16890:	4463      	add	r3, ip
   16892:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   16894:	238e      	movs	r3, #142	; 0x8e
   16896:	005b      	lsls	r3, r3, #1
   16898:	2208      	movs	r2, #8
   1689a:	4694      	mov	ip, r2
   1689c:	44bc      	add	ip, r7
   1689e:	4463      	add	r3, ip
   168a0:	881b      	ldrh	r3, [r3, #0]
   168a2:	2b31      	cmp	r3, #49	; 0x31
   168a4:	d807      	bhi.n	168b6 <processOnSMS+0x1afe>
		{
			AUTOTIME = 50;
   168a6:	238e      	movs	r3, #142	; 0x8e
   168a8:	005b      	lsls	r3, r3, #1
   168aa:	2208      	movs	r2, #8
   168ac:	4694      	mov	ip, r2
   168ae:	44bc      	add	ip, r7
   168b0:	4463      	add	r3, ip
   168b2:	2232      	movs	r2, #50	; 0x32
   168b4:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   168b6:	238e      	movs	r3, #142	; 0x8e
   168b8:	005b      	lsls	r3, r3, #1
   168ba:	2208      	movs	r2, #8
   168bc:	4694      	mov	ip, r2
   168be:	44bc      	add	ip, r7
   168c0:	4463      	add	r3, ip
   168c2:	881a      	ldrh	r2, [r3, #0]
   168c4:	23e1      	movs	r3, #225	; 0xe1
   168c6:	01db      	lsls	r3, r3, #7
   168c8:	429a      	cmp	r2, r3
   168ca:	d908      	bls.n	168de <processOnSMS+0x1b26>
		{
			AUTOTIME = 28800;
   168cc:	238e      	movs	r3, #142	; 0x8e
   168ce:	005b      	lsls	r3, r3, #1
   168d0:	2208      	movs	r2, #8
   168d2:	4694      	mov	ip, r2
   168d4:	44bc      	add	ip, r7
   168d6:	4463      	add	r3, ip
   168d8:	22e1      	movs	r2, #225	; 0xe1
   168da:	01d2      	lsls	r2, r2, #7
   168dc:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   168de:	238e      	movs	r3, #142	; 0x8e
   168e0:	005b      	lsls	r3, r3, #1
   168e2:	2208      	movs	r2, #8
   168e4:	4694      	mov	ip, r2
   168e6:	44bc      	add	ip, r7
   168e8:	4463      	add	r3, ip
   168ea:	881b      	ldrh	r3, [r3, #0]
   168ec:	0018      	movs	r0, r3
   168ee:	4b3d      	ldr	r3, [pc, #244]	; (169e4 <processOnSMS+0x1c2c>)
   168f0:	4798      	blx	r3
		incomingSMSProcessed=true;
   168f2:	2328      	movs	r3, #40	; 0x28
   168f4:	33ff      	adds	r3, #255	; 0xff
   168f6:	2208      	movs	r2, #8
   168f8:	4694      	mov	ip, r2
   168fa:	44bc      	add	ip, r7
   168fc:	4463      	add	r3, ip
   168fe:	2201      	movs	r2, #1
   16900:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16902:	4b2a      	ldr	r3, [pc, #168]	; (169ac <processOnSMS+0x1bf4>)
   16904:	2294      	movs	r2, #148	; 0x94
   16906:	0052      	lsls	r2, r2, #1
   16908:	4694      	mov	ip, r2
   1690a:	2208      	movs	r2, #8
   1690c:	4690      	mov	r8, r2
   1690e:	44b8      	add	r8, r7
   16910:	44c4      	add	ip, r8
   16912:	4463      	add	r3, ip
   16914:	781b      	ldrb	r3, [r3, #0]
   16916:	2b00      	cmp	r3, #0
   16918:	d100      	bne.n	1691c <processOnSMS+0x1b64>
   1691a:	e2ba      	b.n	16e92 <processOnSMS+0x20da>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   1691c:	238e      	movs	r3, #142	; 0x8e
   1691e:	005b      	lsls	r3, r3, #1
   16920:	2208      	movs	r2, #8
   16922:	4694      	mov	ip, r2
   16924:	44bc      	add	ip, r7
   16926:	4463      	add	r3, ip
   16928:	881a      	ldrh	r2, [r3, #0]
   1692a:	492f      	ldr	r1, [pc, #188]	; (169e8 <processOnSMS+0x1c30>)
   1692c:	230c      	movs	r3, #12
   1692e:	2008      	movs	r0, #8
   16930:	4684      	mov	ip, r0
   16932:	44bc      	add	ip, r7
   16934:	4463      	add	r3, ip
   16936:	0018      	movs	r0, r3
   16938:	4b25      	ldr	r3, [pc, #148]	; (169d0 <processOnSMS+0x1c18>)
   1693a:	4798      	blx	r3
   1693c:	e2a9      	b.n	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   1693e:	4a2b      	ldr	r2, [pc, #172]	; (169ec <processOnSMS+0x1c34>)
   16940:	68fb      	ldr	r3, [r7, #12]
   16942:	0011      	movs	r1, r2
   16944:	0018      	movs	r0, r3
   16946:	4b1c      	ldr	r3, [pc, #112]	; (169b8 <processOnSMS+0x1c00>)
   16948:	4798      	blx	r3
   1694a:	1e03      	subs	r3, r0, #0
   1694c:	d000      	beq.n	16950 <processOnSMS+0x1b98>
   1694e:	e2a0      	b.n	16e92 <processOnSMS+0x20da>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   16950:	4a27      	ldr	r2, [pc, #156]	; (169f0 <processOnSMS+0x1c38>)
   16952:	68fb      	ldr	r3, [r7, #12]
   16954:	0011      	movs	r1, r2
   16956:	0018      	movs	r0, r3
   16958:	4b17      	ldr	r3, [pc, #92]	; (169b8 <processOnSMS+0x1c00>)
   1695a:	4798      	blx	r3
   1695c:	1e03      	subs	r3, r0, #0
   1695e:	d04d      	beq.n	169fc <processOnSMS+0x1c44>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16960:	68fb      	ldr	r3, [r7, #12]
   16962:	1cdc      	adds	r4, r3, #3
   16964:	68fb      	ldr	r3, [r7, #12]
   16966:	0018      	movs	r0, r3
   16968:	4b14      	ldr	r3, [pc, #80]	; (169bc <processOnSMS+0x1c04>)
   1696a:	4798      	blx	r3
   1696c:	0002      	movs	r2, r0
   1696e:	68fb      	ldr	r3, [r7, #12]
   16970:	0021      	movs	r1, r4
   16972:	0018      	movs	r0, r3
   16974:	4b12      	ldr	r3, [pc, #72]	; (169c0 <processOnSMS+0x1c08>)
   16976:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   16978:	68fb      	ldr	r3, [r7, #12]
   1697a:	0018      	movs	r0, r3
   1697c:	4b1d      	ldr	r3, [pc, #116]	; (169f4 <processOnSMS+0x1c3c>)
   1697e:	4798      	blx	r3
   16980:	1e03      	subs	r3, r0, #0
   16982:	d100      	bne.n	16986 <processOnSMS+0x1bce>
   16984:	e285      	b.n	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   16986:	2328      	movs	r3, #40	; 0x28
   16988:	33ff      	adds	r3, #255	; 0xff
   1698a:	2208      	movs	r2, #8
   1698c:	4694      	mov	ip, r2
   1698e:	44bc      	add	ip, r7
   16990:	4463      	add	r3, ip
   16992:	2201      	movs	r2, #1
   16994:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16996:	230c      	movs	r3, #12
   16998:	2208      	movs	r2, #8
   1699a:	4694      	mov	ip, r2
   1699c:	44bc      	add	ip, r7
   1699e:	4463      	add	r3, ip
   169a0:	4a15      	ldr	r2, [pc, #84]	; (169f8 <processOnSMS+0x1c40>)
   169a2:	ca13      	ldmia	r2!, {r0, r1, r4}
   169a4:	c313      	stmia	r3!, {r0, r1, r4}
   169a6:	e274      	b.n	16e92 <processOnSMS+0x20da>
   169a8:	000113cd 	.word	0x000113cd
   169ac:	fffffeda 	.word	0xfffffeda
   169b0:	0002a474 	.word	0x0002a474
   169b4:	0002a488 	.word	0x0002a488
   169b8:	00014019 	.word	0x00014019
   169bc:	000290a3 	.word	0x000290a3
   169c0:	00028def 	.word	0x00028def
   169c4:	00028cf9 	.word	0x00028cf9
   169c8:	00011a15 	.word	0x00011a15
   169cc:	0002a490 	.word	0x0002a490
   169d0:	00029019 	.word	0x00029019
   169d4:	0002a4a8 	.word	0x0002a4a8
   169d8:	000119c9 	.word	0x000119c9
   169dc:	0002a4b4 	.word	0x0002a4b4
   169e0:	0002a4cc 	.word	0x0002a4cc
   169e4:	000112e9 	.word	0x000112e9
   169e8:	0002a4d8 	.word	0x0002a4d8
   169ec:	0002a4f0 	.word	0x0002a4f0
   169f0:	0002a4f4 	.word	0x0002a4f4
   169f4:	00011b95 	.word	0x00011b95
   169f8:	0002a4f8 	.word	0x0002a4f8
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   169fc:	4ad6      	ldr	r2, [pc, #856]	; (16d58 <processOnSMS+0x1fa0>)
   169fe:	68fb      	ldr	r3, [r7, #12]
   16a00:	0011      	movs	r1, r2
   16a02:	0018      	movs	r0, r3
   16a04:	4bd5      	ldr	r3, [pc, #852]	; (16d5c <processOnSMS+0x1fa4>)
   16a06:	4798      	blx	r3
   16a08:	1e03      	subs	r3, r0, #0
   16a0a:	d023      	beq.n	16a54 <processOnSMS+0x1c9c>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16a0c:	68fb      	ldr	r3, [r7, #12]
   16a0e:	1cdc      	adds	r4, r3, #3
   16a10:	68fb      	ldr	r3, [r7, #12]
   16a12:	0018      	movs	r0, r3
   16a14:	4bd2      	ldr	r3, [pc, #840]	; (16d60 <processOnSMS+0x1fa8>)
   16a16:	4798      	blx	r3
   16a18:	0002      	movs	r2, r0
   16a1a:	68fb      	ldr	r3, [r7, #12]
   16a1c:	0021      	movs	r1, r4
   16a1e:	0018      	movs	r0, r3
   16a20:	4bd0      	ldr	r3, [pc, #832]	; (16d64 <processOnSMS+0x1fac>)
   16a22:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   16a24:	68fb      	ldr	r3, [r7, #12]
   16a26:	0018      	movs	r0, r3
   16a28:	4bcf      	ldr	r3, [pc, #828]	; (16d68 <processOnSMS+0x1fb0>)
   16a2a:	4798      	blx	r3
   16a2c:	1e03      	subs	r3, r0, #0
   16a2e:	d100      	bne.n	16a32 <processOnSMS+0x1c7a>
   16a30:	e22f      	b.n	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   16a32:	2328      	movs	r3, #40	; 0x28
   16a34:	33ff      	adds	r3, #255	; 0xff
   16a36:	2208      	movs	r2, #8
   16a38:	4694      	mov	ip, r2
   16a3a:	44bc      	add	ip, r7
   16a3c:	4463      	add	r3, ip
   16a3e:	2201      	movs	r2, #1
   16a40:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   16a42:	230c      	movs	r3, #12
   16a44:	2208      	movs	r2, #8
   16a46:	4694      	mov	ip, r2
   16a48:	44bc      	add	ip, r7
   16a4a:	4463      	add	r3, ip
   16a4c:	4ac7      	ldr	r2, [pc, #796]	; (16d6c <processOnSMS+0x1fb4>)
   16a4e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a50:	c313      	stmia	r3!, {r0, r1, r4}
   16a52:	e21e      	b.n	16e92 <processOnSMS+0x20da>
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16a54:	4ac6      	ldr	r2, [pc, #792]	; (16d70 <processOnSMS+0x1fb8>)
   16a56:	68fb      	ldr	r3, [r7, #12]
   16a58:	0011      	movs	r1, r2
   16a5a:	0018      	movs	r0, r3
   16a5c:	4bbf      	ldr	r3, [pc, #764]	; (16d5c <processOnSMS+0x1fa4>)
   16a5e:	4798      	blx	r3
   16a60:	1e03      	subs	r3, r0, #0
   16a62:	d100      	bne.n	16a66 <processOnSMS+0x1cae>
   16a64:	e091      	b.n	16b8a <processOnSMS+0x1dd2>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16a66:	68fb      	ldr	r3, [r7, #12]
   16a68:	1c9c      	adds	r4, r3, #2
   16a6a:	68fb      	ldr	r3, [r7, #12]
   16a6c:	0018      	movs	r0, r3
   16a6e:	4bbc      	ldr	r3, [pc, #752]	; (16d60 <processOnSMS+0x1fa8>)
   16a70:	4798      	blx	r3
   16a72:	0002      	movs	r2, r0
   16a74:	68fb      	ldr	r3, [r7, #12]
   16a76:	0021      	movs	r1, r4
   16a78:	0018      	movs	r0, r3
   16a7a:	4bba      	ldr	r3, [pc, #744]	; (16d64 <processOnSMS+0x1fac>)
   16a7c:	4798      	blx	r3
		bool result = addNumber(received_command);
   16a7e:	230c      	movs	r3, #12
   16a80:	33ff      	adds	r3, #255	; 0xff
   16a82:	2208      	movs	r2, #8
   16a84:	18ba      	adds	r2, r7, r2
   16a86:	18d4      	adds	r4, r2, r3
   16a88:	68fb      	ldr	r3, [r7, #12]
   16a8a:	0018      	movs	r0, r3
   16a8c:	4bb9      	ldr	r3, [pc, #740]	; (16d74 <processOnSMS+0x1fbc>)
   16a8e:	4798      	blx	r3
   16a90:	0003      	movs	r3, r0
   16a92:	7023      	strb	r3, [r4, #0]
		if(result)
   16a94:	230c      	movs	r3, #12
   16a96:	33ff      	adds	r3, #255	; 0xff
   16a98:	2208      	movs	r2, #8
   16a9a:	4694      	mov	ip, r2
   16a9c:	44bc      	add	ip, r7
   16a9e:	4463      	add	r3, ip
   16aa0:	781b      	ldrb	r3, [r3, #0]
   16aa2:	2b00      	cmp	r3, #0
   16aa4:	d100      	bne.n	16aa8 <processOnSMS+0x1cf0>
   16aa6:	e1f4      	b.n	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   16aa8:	2328      	movs	r3, #40	; 0x28
   16aaa:	33ff      	adds	r3, #255	; 0xff
   16aac:	2208      	movs	r2, #8
   16aae:	4694      	mov	ip, r2
   16ab0:	44bc      	add	ip, r7
   16ab2:	4463      	add	r3, ip
   16ab4:	2201      	movs	r2, #1
   16ab6:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   16ab8:	4baf      	ldr	r3, [pc, #700]	; (16d78 <processOnSMS+0x1fc0>)
   16aba:	2294      	movs	r2, #148	; 0x94
   16abc:	0052      	lsls	r2, r2, #1
   16abe:	4694      	mov	ip, r2
   16ac0:	2208      	movs	r2, #8
   16ac2:	4690      	mov	r8, r2
   16ac4:	44b8      	add	r8, r7
   16ac6:	44c4      	add	ip, r8
   16ac8:	4463      	add	r3, ip
   16aca:	781b      	ldrb	r3, [r3, #0]
   16acc:	2b00      	cmp	r3, #0
   16ace:	d100      	bne.n	16ad2 <processOnSMS+0x1d1a>
   16ad0:	e1df      	b.n	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16ad2:	230c      	movs	r3, #12
   16ad4:	2208      	movs	r2, #8
   16ad6:	4694      	mov	ip, r2
   16ad8:	44bc      	add	ip, r7
   16ada:	4463      	add	r3, ip
   16adc:	4aa7      	ldr	r2, [pc, #668]	; (16d7c <processOnSMS+0x1fc4>)
   16ade:	ca03      	ldmia	r2!, {r0, r1}
   16ae0:	c303      	stmia	r3!, {r0, r1}
   16ae2:	8811      	ldrh	r1, [r2, #0]
   16ae4:	8019      	strh	r1, [r3, #0]
   16ae6:	7892      	ldrb	r2, [r2, #2]
   16ae8:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16aea:	230c      	movs	r3, #12
   16aec:	2208      	movs	r2, #8
   16aee:	4694      	mov	ip, r2
   16af0:	44bc      	add	ip, r7
   16af2:	4463      	add	r3, ip
   16af4:	0018      	movs	r0, r3
   16af6:	4b9a      	ldr	r3, [pc, #616]	; (16d60 <processOnSMS+0x1fa8>)
   16af8:	4798      	blx	r3
   16afa:	0003      	movs	r3, r0
   16afc:	001a      	movs	r2, r3
   16afe:	230c      	movs	r3, #12
   16b00:	2108      	movs	r1, #8
   16b02:	468c      	mov	ip, r1
   16b04:	44bc      	add	ip, r7
   16b06:	4463      	add	r3, ip
   16b08:	189a      	adds	r2, r3, r2
   16b0a:	4b9d      	ldr	r3, [pc, #628]	; (16d80 <processOnSMS+0x1fc8>)
   16b0c:	0010      	movs	r0, r2
   16b0e:	0019      	movs	r1, r3
   16b10:	2302      	movs	r3, #2
   16b12:	001a      	movs	r2, r3
   16b14:	4b9b      	ldr	r3, [pc, #620]	; (16d84 <processOnSMS+0x1fcc>)
   16b16:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16b18:	68fa      	ldr	r2, [r7, #12]
   16b1a:	230c      	movs	r3, #12
   16b1c:	2108      	movs	r1, #8
   16b1e:	468c      	mov	ip, r1
   16b20:	44bc      	add	ip, r7
   16b22:	4463      	add	r3, ip
   16b24:	0011      	movs	r1, r2
   16b26:	0018      	movs	r0, r3
   16b28:	4b97      	ldr	r3, [pc, #604]	; (16d88 <processOnSMS+0x1fd0>)
   16b2a:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16b2c:	230c      	movs	r3, #12
   16b2e:	2208      	movs	r2, #8
   16b30:	4694      	mov	ip, r2
   16b32:	44bc      	add	ip, r7
   16b34:	4463      	add	r3, ip
   16b36:	0018      	movs	r0, r3
   16b38:	4b89      	ldr	r3, [pc, #548]	; (16d60 <processOnSMS+0x1fa8>)
   16b3a:	4798      	blx	r3
   16b3c:	0003      	movs	r3, r0
   16b3e:	001a      	movs	r2, r3
   16b40:	230c      	movs	r3, #12
   16b42:	2108      	movs	r1, #8
   16b44:	468c      	mov	ip, r1
   16b46:	44bc      	add	ip, r7
   16b48:	4463      	add	r3, ip
   16b4a:	189a      	adds	r2, r3, r2
   16b4c:	4b8c      	ldr	r3, [pc, #560]	; (16d80 <processOnSMS+0x1fc8>)
   16b4e:	0010      	movs	r0, r2
   16b50:	0019      	movs	r1, r3
   16b52:	2302      	movs	r3, #2
   16b54:	001a      	movs	r2, r3
   16b56:	4b8b      	ldr	r3, [pc, #556]	; (16d84 <processOnSMS+0x1fcc>)
   16b58:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16b5a:	230c      	movs	r3, #12
   16b5c:	2208      	movs	r2, #8
   16b5e:	4694      	mov	ip, r2
   16b60:	44bc      	add	ip, r7
   16b62:	4463      	add	r3, ip
   16b64:	0018      	movs	r0, r3
   16b66:	4b7e      	ldr	r3, [pc, #504]	; (16d60 <processOnSMS+0x1fa8>)
   16b68:	4798      	blx	r3
   16b6a:	0003      	movs	r3, r0
   16b6c:	001a      	movs	r2, r3
   16b6e:	230c      	movs	r3, #12
   16b70:	2108      	movs	r1, #8
   16b72:	468c      	mov	ip, r1
   16b74:	44bc      	add	ip, r7
   16b76:	4463      	add	r3, ip
   16b78:	189a      	adds	r2, r3, r2
   16b7a:	4b84      	ldr	r3, [pc, #528]	; (16d8c <processOnSMS+0x1fd4>)
   16b7c:	0010      	movs	r0, r2
   16b7e:	0019      	movs	r1, r3
   16b80:	2313      	movs	r3, #19
   16b82:	001a      	movs	r2, r3
   16b84:	4b7f      	ldr	r3, [pc, #508]	; (16d84 <processOnSMS+0x1fcc>)
   16b86:	4798      	blx	r3
   16b88:	e183      	b.n	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16b8a:	4a81      	ldr	r2, [pc, #516]	; (16d90 <processOnSMS+0x1fd8>)
   16b8c:	68fb      	ldr	r3, [r7, #12]
   16b8e:	0011      	movs	r1, r2
   16b90:	0018      	movs	r0, r3
   16b92:	4b72      	ldr	r3, [pc, #456]	; (16d5c <processOnSMS+0x1fa4>)
   16b94:	4798      	blx	r3
   16b96:	1e03      	subs	r3, r0, #0
   16b98:	d100      	bne.n	16b9c <processOnSMS+0x1de4>
   16b9a:	e091      	b.n	16cc0 <processOnSMS+0x1f08>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16b9c:	68fb      	ldr	r3, [r7, #12]
   16b9e:	1c9c      	adds	r4, r3, #2
   16ba0:	68fb      	ldr	r3, [r7, #12]
   16ba2:	0018      	movs	r0, r3
   16ba4:	4b6e      	ldr	r3, [pc, #440]	; (16d60 <processOnSMS+0x1fa8>)
   16ba6:	4798      	blx	r3
   16ba8:	0002      	movs	r2, r0
   16baa:	68fb      	ldr	r3, [r7, #12]
   16bac:	0021      	movs	r1, r4
   16bae:	0018      	movs	r0, r3
   16bb0:	4b6c      	ldr	r3, [pc, #432]	; (16d64 <processOnSMS+0x1fac>)
   16bb2:	4798      	blx	r3
		bool result = removeNumber(received_command);
   16bb4:	2385      	movs	r3, #133	; 0x85
   16bb6:	005b      	lsls	r3, r3, #1
   16bb8:	2208      	movs	r2, #8
   16bba:	18ba      	adds	r2, r7, r2
   16bbc:	18d4      	adds	r4, r2, r3
   16bbe:	68fb      	ldr	r3, [r7, #12]
   16bc0:	0018      	movs	r0, r3
   16bc2:	4b74      	ldr	r3, [pc, #464]	; (16d94 <processOnSMS+0x1fdc>)
   16bc4:	4798      	blx	r3
   16bc6:	0003      	movs	r3, r0
   16bc8:	7023      	strb	r3, [r4, #0]
		if(result)
   16bca:	2385      	movs	r3, #133	; 0x85
   16bcc:	005b      	lsls	r3, r3, #1
   16bce:	2208      	movs	r2, #8
   16bd0:	4694      	mov	ip, r2
   16bd2:	44bc      	add	ip, r7
   16bd4:	4463      	add	r3, ip
   16bd6:	781b      	ldrb	r3, [r3, #0]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d100      	bne.n	16bde <processOnSMS+0x1e26>
   16bdc:	e159      	b.n	16e92 <processOnSMS+0x20da>
		{
			incomingSMSProcessed=true;
   16bde:	2328      	movs	r3, #40	; 0x28
   16be0:	33ff      	adds	r3, #255	; 0xff
   16be2:	2208      	movs	r2, #8
   16be4:	4694      	mov	ip, r2
   16be6:	44bc      	add	ip, r7
   16be8:	4463      	add	r3, ip
   16bea:	2201      	movs	r2, #1
   16bec:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   16bee:	4b62      	ldr	r3, [pc, #392]	; (16d78 <processOnSMS+0x1fc0>)
   16bf0:	2294      	movs	r2, #148	; 0x94
   16bf2:	0052      	lsls	r2, r2, #1
   16bf4:	4694      	mov	ip, r2
   16bf6:	2208      	movs	r2, #8
   16bf8:	4690      	mov	r8, r2
   16bfa:	44b8      	add	r8, r7
   16bfc:	44c4      	add	ip, r8
   16bfe:	4463      	add	r3, ip
   16c00:	781b      	ldrb	r3, [r3, #0]
   16c02:	2b00      	cmp	r3, #0
   16c04:	d100      	bne.n	16c08 <processOnSMS+0x1e50>
   16c06:	e144      	b.n	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16c08:	230c      	movs	r3, #12
   16c0a:	2208      	movs	r2, #8
   16c0c:	4694      	mov	ip, r2
   16c0e:	44bc      	add	ip, r7
   16c10:	4463      	add	r3, ip
   16c12:	4a5a      	ldr	r2, [pc, #360]	; (16d7c <processOnSMS+0x1fc4>)
   16c14:	ca03      	ldmia	r2!, {r0, r1}
   16c16:	c303      	stmia	r3!, {r0, r1}
   16c18:	8811      	ldrh	r1, [r2, #0]
   16c1a:	8019      	strh	r1, [r3, #0]
   16c1c:	7892      	ldrb	r2, [r2, #2]
   16c1e:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16c20:	230c      	movs	r3, #12
   16c22:	2208      	movs	r2, #8
   16c24:	4694      	mov	ip, r2
   16c26:	44bc      	add	ip, r7
   16c28:	4463      	add	r3, ip
   16c2a:	0018      	movs	r0, r3
   16c2c:	4b4c      	ldr	r3, [pc, #304]	; (16d60 <processOnSMS+0x1fa8>)
   16c2e:	4798      	blx	r3
   16c30:	0003      	movs	r3, r0
   16c32:	001a      	movs	r2, r3
   16c34:	230c      	movs	r3, #12
   16c36:	2108      	movs	r1, #8
   16c38:	468c      	mov	ip, r1
   16c3a:	44bc      	add	ip, r7
   16c3c:	4463      	add	r3, ip
   16c3e:	189a      	adds	r2, r3, r2
   16c40:	4b4f      	ldr	r3, [pc, #316]	; (16d80 <processOnSMS+0x1fc8>)
   16c42:	0010      	movs	r0, r2
   16c44:	0019      	movs	r1, r3
   16c46:	2302      	movs	r3, #2
   16c48:	001a      	movs	r2, r3
   16c4a:	4b4e      	ldr	r3, [pc, #312]	; (16d84 <processOnSMS+0x1fcc>)
   16c4c:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16c4e:	68fa      	ldr	r2, [r7, #12]
   16c50:	230c      	movs	r3, #12
   16c52:	2108      	movs	r1, #8
   16c54:	468c      	mov	ip, r1
   16c56:	44bc      	add	ip, r7
   16c58:	4463      	add	r3, ip
   16c5a:	0011      	movs	r1, r2
   16c5c:	0018      	movs	r0, r3
   16c5e:	4b4a      	ldr	r3, [pc, #296]	; (16d88 <processOnSMS+0x1fd0>)
   16c60:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16c62:	230c      	movs	r3, #12
   16c64:	2208      	movs	r2, #8
   16c66:	4694      	mov	ip, r2
   16c68:	44bc      	add	ip, r7
   16c6a:	4463      	add	r3, ip
   16c6c:	0018      	movs	r0, r3
   16c6e:	4b3c      	ldr	r3, [pc, #240]	; (16d60 <processOnSMS+0x1fa8>)
   16c70:	4798      	blx	r3
   16c72:	0003      	movs	r3, r0
   16c74:	001a      	movs	r2, r3
   16c76:	230c      	movs	r3, #12
   16c78:	2108      	movs	r1, #8
   16c7a:	468c      	mov	ip, r1
   16c7c:	44bc      	add	ip, r7
   16c7e:	4463      	add	r3, ip
   16c80:	189a      	adds	r2, r3, r2
   16c82:	4b3f      	ldr	r3, [pc, #252]	; (16d80 <processOnSMS+0x1fc8>)
   16c84:	0010      	movs	r0, r2
   16c86:	0019      	movs	r1, r3
   16c88:	2302      	movs	r3, #2
   16c8a:	001a      	movs	r2, r3
   16c8c:	4b3d      	ldr	r3, [pc, #244]	; (16d84 <processOnSMS+0x1fcc>)
   16c8e:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   16c90:	230c      	movs	r3, #12
   16c92:	2208      	movs	r2, #8
   16c94:	4694      	mov	ip, r2
   16c96:	44bc      	add	ip, r7
   16c98:	4463      	add	r3, ip
   16c9a:	0018      	movs	r0, r3
   16c9c:	4b30      	ldr	r3, [pc, #192]	; (16d60 <processOnSMS+0x1fa8>)
   16c9e:	4798      	blx	r3
   16ca0:	0003      	movs	r3, r0
   16ca2:	001a      	movs	r2, r3
   16ca4:	230c      	movs	r3, #12
   16ca6:	2108      	movs	r1, #8
   16ca8:	468c      	mov	ip, r1
   16caa:	44bc      	add	ip, r7
   16cac:	4463      	add	r3, ip
   16cae:	189a      	adds	r2, r3, r2
   16cb0:	4b39      	ldr	r3, [pc, #228]	; (16d98 <processOnSMS+0x1fe0>)
   16cb2:	0010      	movs	r0, r2
   16cb4:	0019      	movs	r1, r3
   16cb6:	2315      	movs	r3, #21
   16cb8:	001a      	movs	r2, r3
   16cba:	4b32      	ldr	r3, [pc, #200]	; (16d84 <processOnSMS+0x1fcc>)
   16cbc:	4798      	blx	r3
   16cbe:	e0e8      	b.n	16e92 <processOnSMS+0x20da>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   16cc0:	4a36      	ldr	r2, [pc, #216]	; (16d9c <processOnSMS+0x1fe4>)
   16cc2:	68fb      	ldr	r3, [r7, #12]
   16cc4:	0011      	movs	r1, r2
   16cc6:	0018      	movs	r0, r3
   16cc8:	4b24      	ldr	r3, [pc, #144]	; (16d5c <processOnSMS+0x1fa4>)
   16cca:	4798      	blx	r3
   16ccc:	1e03      	subs	r3, r0, #0
   16cce:	d06b      	beq.n	16da8 <processOnSMS+0x1ff0>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16cd0:	68fb      	ldr	r3, [r7, #12]
   16cd2:	1cdc      	adds	r4, r3, #3
   16cd4:	68fb      	ldr	r3, [r7, #12]
   16cd6:	0018      	movs	r0, r3
   16cd8:	4b21      	ldr	r3, [pc, #132]	; (16d60 <processOnSMS+0x1fa8>)
   16cda:	4798      	blx	r3
   16cdc:	0002      	movs	r2, r0
   16cde:	68fb      	ldr	r3, [r7, #12]
   16ce0:	0021      	movs	r1, r4
   16ce2:	0018      	movs	r0, r3
   16ce4:	4b1f      	ldr	r3, [pc, #124]	; (16d64 <processOnSMS+0x1fac>)
   16ce6:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   16ce8:	230a      	movs	r3, #10
   16cea:	33ff      	adds	r3, #255	; 0xff
   16cec:	2208      	movs	r2, #8
   16cee:	18ba      	adds	r2, r7, r2
   16cf0:	18d4      	adds	r4, r2, r3
   16cf2:	68fb      	ldr	r3, [r7, #12]
   16cf4:	0018      	movs	r0, r3
   16cf6:	4b2a      	ldr	r3, [pc, #168]	; (16da0 <processOnSMS+0x1fe8>)
   16cf8:	4798      	blx	r3
   16cfa:	0003      	movs	r3, r0
   16cfc:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   16cfe:	2328      	movs	r3, #40	; 0x28
   16d00:	33ff      	adds	r3, #255	; 0xff
   16d02:	2208      	movs	r2, #8
   16d04:	4694      	mov	ip, r2
   16d06:	44bc      	add	ip, r7
   16d08:	4463      	add	r3, ip
   16d0a:	2201      	movs	r2, #1
   16d0c:	701a      	strb	r2, [r3, #0]
			if(result)
   16d0e:	230a      	movs	r3, #10
   16d10:	33ff      	adds	r3, #255	; 0xff
   16d12:	2208      	movs	r2, #8
   16d14:	4694      	mov	ip, r2
   16d16:	44bc      	add	ip, r7
   16d18:	4463      	add	r3, ip
   16d1a:	781b      	ldrb	r3, [r3, #0]
   16d1c:	2b00      	cmp	r3, #0
   16d1e:	d100      	bne.n	16d22 <processOnSMS+0x1f6a>
   16d20:	e0b7      	b.n	16e92 <processOnSMS+0x20da>
			{
				if (response_sms_processed_cmd == true)
   16d22:	4b15      	ldr	r3, [pc, #84]	; (16d78 <processOnSMS+0x1fc0>)
   16d24:	2294      	movs	r2, #148	; 0x94
   16d26:	0052      	lsls	r2, r2, #1
   16d28:	4694      	mov	ip, r2
   16d2a:	2208      	movs	r2, #8
   16d2c:	4690      	mov	r8, r2
   16d2e:	44b8      	add	r8, r7
   16d30:	44c4      	add	ip, r8
   16d32:	4463      	add	r3, ip
   16d34:	781b      	ldrb	r3, [r3, #0]
   16d36:	2b00      	cmp	r3, #0
   16d38:	d100      	bne.n	16d3c <processOnSMS+0x1f84>
   16d3a:	e0aa      	b.n	16e92 <processOnSMS+0x20da>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   16d3c:	230c      	movs	r3, #12
   16d3e:	2208      	movs	r2, #8
   16d40:	4694      	mov	ip, r2
   16d42:	44bc      	add	ip, r7
   16d44:	4463      	add	r3, ip
   16d46:	4a17      	ldr	r2, [pc, #92]	; (16da4 <processOnSMS+0x1fec>)
   16d48:	ca13      	ldmia	r2!, {r0, r1, r4}
   16d4a:	c313      	stmia	r3!, {r0, r1, r4}
   16d4c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16d4e:	c313      	stmia	r3!, {r0, r1, r4}
   16d50:	ca03      	ldmia	r2!, {r0, r1}
   16d52:	c303      	stmia	r3!, {r0, r1}
   16d54:	e09d      	b.n	16e92 <processOnSMS+0x20da>
   16d56:	46c0      	nop			; (mov r8, r8)
   16d58:	0002a504 	.word	0x0002a504
   16d5c:	00014019 	.word	0x00014019
   16d60:	000290a3 	.word	0x000290a3
   16d64:	00028def 	.word	0x00028def
   16d68:	00011c41 	.word	0x00011c41
   16d6c:	0002a508 	.word	0x0002a508
   16d70:	0002a514 	.word	0x0002a514
   16d74:	00010ee5 	.word	0x00010ee5
   16d78:	fffffeda 	.word	0xfffffeda
   16d7c:	0002a518 	.word	0x0002a518
   16d80:	0002a524 	.word	0x0002a524
   16d84:	00028ddd 	.word	0x00028ddd
   16d88:	0002905d 	.word	0x0002905d
   16d8c:	0002a528 	.word	0x0002a528
   16d90:	0002a53c 	.word	0x0002a53c
   16d94:	00010fe1 	.word	0x00010fe1
   16d98:	0002a540 	.word	0x0002a540
   16d9c:	0002a558 	.word	0x0002a558
   16da0:	0001122d 	.word	0x0001122d
   16da4:	0002a55c 	.word	0x0002a55c
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   16da8:	4a60      	ldr	r2, [pc, #384]	; (16f2c <processOnSMS+0x2174>)
   16daa:	68fb      	ldr	r3, [r7, #12]
   16dac:	0011      	movs	r1, r2
   16dae:	0018      	movs	r0, r3
   16db0:	4b5f      	ldr	r3, [pc, #380]	; (16f30 <processOnSMS+0x2178>)
   16db2:	4798      	blx	r3
   16db4:	1e03      	subs	r3, r0, #0
   16db6:	d02e      	beq.n	16e16 <processOnSMS+0x205e>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16db8:	68fb      	ldr	r3, [r7, #12]
   16dba:	1cdc      	adds	r4, r3, #3
   16dbc:	68fb      	ldr	r3, [r7, #12]
   16dbe:	0018      	movs	r0, r3
   16dc0:	4b5c      	ldr	r3, [pc, #368]	; (16f34 <processOnSMS+0x217c>)
   16dc2:	4798      	blx	r3
   16dc4:	0002      	movs	r2, r0
   16dc6:	68fb      	ldr	r3, [r7, #12]
   16dc8:	0021      	movs	r1, r4
   16dca:	0018      	movs	r0, r3
   16dcc:	4b5a      	ldr	r3, [pc, #360]	; (16f38 <processOnSMS+0x2180>)
   16dce:	4798      	blx	r3
			addM2MNumber(received_command);
   16dd0:	68fb      	ldr	r3, [r7, #12]
   16dd2:	0018      	movs	r0, r3
   16dd4:	4b59      	ldr	r3, [pc, #356]	; (16f3c <processOnSMS+0x2184>)
   16dd6:	4798      	blx	r3
			incomingSMSProcessed=true;
   16dd8:	2328      	movs	r3, #40	; 0x28
   16dda:	33ff      	adds	r3, #255	; 0xff
   16ddc:	2208      	movs	r2, #8
   16dde:	4694      	mov	ip, r2
   16de0:	44bc      	add	ip, r7
   16de2:	4463      	add	r3, ip
   16de4:	2201      	movs	r2, #1
   16de6:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   16de8:	4b55      	ldr	r3, [pc, #340]	; (16f40 <processOnSMS+0x2188>)
   16dea:	2294      	movs	r2, #148	; 0x94
   16dec:	0052      	lsls	r2, r2, #1
   16dee:	4694      	mov	ip, r2
   16df0:	2208      	movs	r2, #8
   16df2:	4690      	mov	r8, r2
   16df4:	44b8      	add	r8, r7
   16df6:	44c4      	add	ip, r8
   16df8:	4463      	add	r3, ip
   16dfa:	781b      	ldrb	r3, [r3, #0]
   16dfc:	2b00      	cmp	r3, #0
   16dfe:	d048      	beq.n	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   16e00:	230c      	movs	r3, #12
   16e02:	2208      	movs	r2, #8
   16e04:	4694      	mov	ip, r2
   16e06:	44bc      	add	ip, r7
   16e08:	4463      	add	r3, ip
   16e0a:	4a4e      	ldr	r2, [pc, #312]	; (16f44 <processOnSMS+0x218c>)
   16e0c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16e0e:	c313      	stmia	r3!, {r0, r1, r4}
   16e10:	8812      	ldrh	r2, [r2, #0]
   16e12:	801a      	strh	r2, [r3, #0]
   16e14:	e03d      	b.n	16e92 <processOnSMS+0x20da>
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   16e16:	4a4c      	ldr	r2, [pc, #304]	; (16f48 <processOnSMS+0x2190>)
   16e18:	68fb      	ldr	r3, [r7, #12]
   16e1a:	0011      	movs	r1, r2
   16e1c:	0018      	movs	r0, r3
   16e1e:	4b44      	ldr	r3, [pc, #272]	; (16f30 <processOnSMS+0x2178>)
   16e20:	4798      	blx	r3
   16e22:	1e03      	subs	r3, r0, #0
   16e24:	d035      	beq.n	16e92 <processOnSMS+0x20da>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   16e26:	4b49      	ldr	r3, [pc, #292]	; (16f4c <processOnSMS+0x2194>)
   16e28:	78db      	ldrb	r3, [r3, #3]
   16e2a:	2b00      	cmp	r3, #0
   16e2c:	d031      	beq.n	16e92 <processOnSMS+0x20da>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16e2e:	68fb      	ldr	r3, [r7, #12]
   16e30:	1cdc      	adds	r4, r3, #3
   16e32:	68fb      	ldr	r3, [r7, #12]
   16e34:	0018      	movs	r0, r3
   16e36:	4b3f      	ldr	r3, [pc, #252]	; (16f34 <processOnSMS+0x217c>)
   16e38:	4798      	blx	r3
   16e3a:	0002      	movs	r2, r0
   16e3c:	68fb      	ldr	r3, [r7, #12]
   16e3e:	0021      	movs	r1, r4
   16e40:	0018      	movs	r0, r3
   16e42:	4b3d      	ldr	r3, [pc, #244]	; (16f38 <processOnSMS+0x2180>)
   16e44:	4798      	blx	r3
			incomingSMSProcessed=true;
   16e46:	2328      	movs	r3, #40	; 0x28
   16e48:	33ff      	adds	r3, #255	; 0xff
   16e4a:	2208      	movs	r2, #8
   16e4c:	4694      	mov	ip, r2
   16e4e:	44bc      	add	ip, r7
   16e50:	4463      	add	r3, ip
   16e52:	2201      	movs	r2, #1
   16e54:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   16e56:	68fb      	ldr	r3, [r7, #12]
   16e58:	0018      	movs	r0, r3
   16e5a:	4b3d      	ldr	r3, [pc, #244]	; (16f50 <processOnSMS+0x2198>)
   16e5c:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   16e5e:	4b38      	ldr	r3, [pc, #224]	; (16f40 <processOnSMS+0x2188>)
   16e60:	2294      	movs	r2, #148	; 0x94
   16e62:	0052      	lsls	r2, r2, #1
   16e64:	4694      	mov	ip, r2
   16e66:	2208      	movs	r2, #8
   16e68:	4690      	mov	r8, r2
   16e6a:	44b8      	add	r8, r7
   16e6c:	44c4      	add	ip, r8
   16e6e:	4463      	add	r3, ip
   16e70:	781b      	ldrb	r3, [r3, #0]
   16e72:	2b00      	cmp	r3, #0
   16e74:	d00d      	beq.n	16e92 <processOnSMS+0x20da>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   16e76:	230c      	movs	r3, #12
   16e78:	2208      	movs	r2, #8
   16e7a:	4694      	mov	ip, r2
   16e7c:	44bc      	add	ip, r7
   16e7e:	4463      	add	r3, ip
   16e80:	4a34      	ldr	r2, [pc, #208]	; (16f54 <processOnSMS+0x219c>)
   16e82:	ca13      	ldmia	r2!, {r0, r1, r4}
   16e84:	c313      	stmia	r3!, {r0, r1, r4}
   16e86:	ca03      	ldmia	r2!, {r0, r1}
   16e88:	c303      	stmia	r3!, {r0, r1}
   16e8a:	7812      	ldrb	r2, [r2, #0]
   16e8c:	701a      	strb	r2, [r3, #0]
   16e8e:	e000      	b.n	16e92 <processOnSMS+0x20da>
		if (alternateNumber_struct.alterNumberPresent)
   16e90:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   16e92:	4b2b      	ldr	r3, [pc, #172]	; (16f40 <processOnSMS+0x2188>)
   16e94:	2294      	movs	r2, #148	; 0x94
   16e96:	0052      	lsls	r2, r2, #1
   16e98:	4694      	mov	ip, r2
   16e9a:	2208      	movs	r2, #8
   16e9c:	4690      	mov	r8, r2
   16e9e:	44b8      	add	r8, r7
   16ea0:	44c4      	add	ip, r8
   16ea2:	4463      	add	r3, ip
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	d03a      	beq.n	16f20 <processOnSMS+0x2168>
	{
		if(!incomingSMSProcessed)
   16eaa:	2328      	movs	r3, #40	; 0x28
   16eac:	33ff      	adds	r3, #255	; 0xff
   16eae:	2208      	movs	r2, #8
   16eb0:	4694      	mov	ip, r2
   16eb2:	44bc      	add	ip, r7
   16eb4:	4463      	add	r3, ip
   16eb6:	781b      	ldrb	r3, [r3, #0]
   16eb8:	2201      	movs	r2, #1
   16eba:	4053      	eors	r3, r2
   16ebc:	b2db      	uxtb	r3, r3
   16ebe:	2b00      	cmp	r3, #0
   16ec0:	d011      	beq.n	16ee6 <processOnSMS+0x212e>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   16ec2:	238c      	movs	r3, #140	; 0x8c
   16ec4:	005b      	lsls	r3, r3, #1
   16ec6:	2208      	movs	r2, #8
   16ec8:	4694      	mov	ip, r2
   16eca:	44bc      	add	ip, r7
   16ecc:	4463      	add	r3, ip
   16ece:	681b      	ldr	r3, [r3, #0]
   16ed0:	781b      	ldrb	r3, [r3, #0]
   16ed2:	001a      	movs	r2, r3
   16ed4:	4920      	ldr	r1, [pc, #128]	; (16f58 <processOnSMS+0x21a0>)
   16ed6:	230c      	movs	r3, #12
   16ed8:	2008      	movs	r0, #8
   16eda:	4684      	mov	ip, r0
   16edc:	44bc      	add	ip, r7
   16ede:	4463      	add	r3, ip
   16ee0:	0018      	movs	r0, r3
   16ee2:	4b1e      	ldr	r3, [pc, #120]	; (16f5c <processOnSMS+0x21a4>)
   16ee4:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   16ee6:	23a0      	movs	r3, #160	; 0xa0
   16ee8:	005b      	lsls	r3, r3, #1
   16eea:	2208      	movs	r2, #8
   16eec:	4694      	mov	ip, r2
   16eee:	44bc      	add	ip, r7
   16ef0:	4463      	add	r3, ip
   16ef2:	681b      	ldr	r3, [r3, #0]
   16ef4:	2200      	movs	r2, #0
   16ef6:	0019      	movs	r1, r3
   16ef8:	2005      	movs	r0, #5
   16efa:	4b19      	ldr	r3, [pc, #100]	; (16f60 <processOnSMS+0x21a8>)
   16efc:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   16efe:	230c      	movs	r3, #12
   16f00:	2208      	movs	r2, #8
   16f02:	18ba      	adds	r2, r7, r2
   16f04:	18d2      	adds	r2, r2, r3
   16f06:	23a0      	movs	r3, #160	; 0xa0
   16f08:	005b      	lsls	r3, r3, #1
   16f0a:	2108      	movs	r1, #8
   16f0c:	468c      	mov	ip, r1
   16f0e:	44bc      	add	ip, r7
   16f10:	4463      	add	r3, ip
   16f12:	681b      	ldr	r3, [r3, #0]
   16f14:	0011      	movs	r1, r2
   16f16:	0018      	movs	r0, r3
   16f18:	4b12      	ldr	r3, [pc, #72]	; (16f64 <processOnSMS+0x21ac>)
   16f1a:	4798      	blx	r3
   16f1c:	e000      	b.n	16f20 <processOnSMS+0x2168>
		return;
   16f1e:	46c0      	nop			; (mov r8, r8)
	}
}
   16f20:	46bd      	mov	sp, r7
   16f22:	b04c      	add	sp, #304	; 0x130
   16f24:	bc04      	pop	{r2}
   16f26:	4690      	mov	r8, r2
   16f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f2a:	46c0      	nop			; (mov r8, r8)
   16f2c:	0002a57c 	.word	0x0002a57c
   16f30:	00014019 	.word	0x00014019
   16f34:	000290a3 	.word	0x000290a3
   16f38:	00028def 	.word	0x00028def
   16f3c:	00010c3d 	.word	0x00010c3d
   16f40:	fffffeda 	.word	0xfffffeda
   16f44:	0002a580 	.word	0x0002a580
   16f48:	0002a590 	.word	0x0002a590
   16f4c:	20000628 	.word	0x20000628
   16f50:	00010ca5 	.word	0x00010ca5
   16f54:	0002a594 	.word	0x0002a594
   16f58:	0002a5ac 	.word	0x0002a5ac
   16f5c:	00029019 	.word	0x00029019
   16f60:	0001cb31 	.word	0x0001cb31
   16f64:	00012b09 	.word	0x00012b09

00016f68 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   16f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f6a:	b091      	sub	sp, #68	; 0x44
   16f6c:	af06      	add	r7, sp, #24
   16f6e:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   16f70:	2327      	movs	r3, #39	; 0x27
   16f72:	18fc      	adds	r4, r7, r3
   16f74:	4b32      	ldr	r3, [pc, #200]	; (17040 <buildStatusMessage+0xd8>)
   16f76:	4798      	blx	r3
   16f78:	0003      	movs	r3, r0
   16f7a:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   16f7c:	4b31      	ldr	r3, [pc, #196]	; (17044 <buildStatusMessage+0xdc>)
   16f7e:	785b      	ldrb	r3, [r3, #1]
   16f80:	b2db      	uxtb	r3, r3
   16f82:	2b02      	cmp	r3, #2
   16f84:	d009      	beq.n	16f9a <buildStatusMessage+0x32>
   16f86:	2b03      	cmp	r3, #3
   16f88:	d10d      	bne.n	16fa6 <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   16f8a:	231c      	movs	r3, #28
   16f8c:	18fb      	adds	r3, r7, r3
   16f8e:	4a2e      	ldr	r2, [pc, #184]	; (17048 <buildStatusMessage+0xe0>)
   16f90:	8811      	ldrh	r1, [r2, #0]
   16f92:	8019      	strh	r1, [r3, #0]
   16f94:	7892      	ldrb	r2, [r2, #2]
   16f96:	709a      	strb	r2, [r3, #2]
		break;
   16f98:	e00a      	b.n	16fb0 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   16f9a:	231c      	movs	r3, #28
   16f9c:	18fb      	adds	r3, r7, r3
   16f9e:	4a2b      	ldr	r2, [pc, #172]	; (1704c <buildStatusMessage+0xe4>)
   16fa0:	ca03      	ldmia	r2!, {r0, r1}
   16fa2:	c303      	stmia	r3!, {r0, r1}
		break;
   16fa4:	e004      	b.n	16fb0 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   16fa6:	231c      	movs	r3, #28
   16fa8:	18fb      	adds	r3, r7, r3
   16faa:	4a29      	ldr	r2, [pc, #164]	; (17050 <buildStatusMessage+0xe8>)
   16fac:	601a      	str	r2, [r3, #0]
		break;
   16fae:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   16fb0:	4b24      	ldr	r3, [pc, #144]	; (17044 <buildStatusMessage+0xdc>)
   16fb2:	781b      	ldrb	r3, [r3, #0]
   16fb4:	b2db      	uxtb	r3, r3
   16fb6:	2b02      	cmp	r3, #2
   16fb8:	d107      	bne.n	16fca <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   16fba:	2314      	movs	r3, #20
   16fbc:	18fb      	adds	r3, r7, r3
   16fbe:	4a25      	ldr	r2, [pc, #148]	; (17054 <buildStatusMessage+0xec>)
   16fc0:	8811      	ldrh	r1, [r2, #0]
   16fc2:	8019      	strh	r1, [r3, #0]
   16fc4:	7892      	ldrb	r2, [r2, #2]
   16fc6:	709a      	strb	r2, [r3, #2]
   16fc8:	e006      	b.n	16fd8 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   16fca:	2314      	movs	r3, #20
   16fcc:	18fb      	adds	r3, r7, r3
   16fce:	4a22      	ldr	r2, [pc, #136]	; (17058 <buildStatusMessage+0xf0>)
   16fd0:	6811      	ldr	r1, [r2, #0]
   16fd2:	6019      	str	r1, [r3, #0]
   16fd4:	8892      	ldrh	r2, [r2, #4]
   16fd6:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   16fd8:	4b20      	ldr	r3, [pc, #128]	; (1705c <buildStatusMessage+0xf4>)
   16fda:	4798      	blx	r3
   16fdc:	1e03      	subs	r3, r0, #0
   16fde:	d007      	beq.n	16ff0 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   16fe0:	230c      	movs	r3, #12
   16fe2:	18fb      	adds	r3, r7, r3
   16fe4:	4a18      	ldr	r2, [pc, #96]	; (17048 <buildStatusMessage+0xe0>)
   16fe6:	8811      	ldrh	r1, [r2, #0]
   16fe8:	8019      	strh	r1, [r3, #0]
   16fea:	7892      	ldrb	r2, [r2, #2]
   16fec:	709a      	strb	r2, [r3, #2]
   16fee:	e003      	b.n	16ff8 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   16ff0:	230c      	movs	r3, #12
   16ff2:	18fb      	adds	r3, r7, r3
   16ff4:	4a16      	ldr	r2, [pc, #88]	; (17050 <buildStatusMessage+0xe8>)
   16ff6:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   16ff8:	4b19      	ldr	r3, [pc, #100]	; (17060 <buildStatusMessage+0xf8>)
   16ffa:	681c      	ldr	r4, [r3, #0]
   16ffc:	4b18      	ldr	r3, [pc, #96]	; (17060 <buildStatusMessage+0xf8>)
   16ffe:	685d      	ldr	r5, [r3, #4]
   17000:	4b17      	ldr	r3, [pc, #92]	; (17060 <buildStatusMessage+0xf8>)
   17002:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   17004:	4a16      	ldr	r2, [pc, #88]	; (17060 <buildStatusMessage+0xf8>)
   17006:	8a92      	ldrh	r2, [r2, #20]
   17008:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   1700a:	0016      	movs	r6, r2
   1700c:	2227      	movs	r2, #39	; 0x27
   1700e:	18ba      	adds	r2, r7, r2
   17010:	7812      	ldrb	r2, [r2, #0]
   17012:	4914      	ldr	r1, [pc, #80]	; (17064 <buildStatusMessage+0xfc>)
   17014:	6878      	ldr	r0, [r7, #4]
   17016:	9205      	str	r2, [sp, #20]
   17018:	9604      	str	r6, [sp, #16]
   1701a:	220c      	movs	r2, #12
   1701c:	18ba      	adds	r2, r7, r2
   1701e:	9203      	str	r2, [sp, #12]
   17020:	2214      	movs	r2, #20
   17022:	18ba      	adds	r2, r7, r2
   17024:	9202      	str	r2, [sp, #8]
   17026:	221c      	movs	r2, #28
   17028:	18ba      	adds	r2, r7, r2
   1702a:	9201      	str	r2, [sp, #4]
   1702c:	9300      	str	r3, [sp, #0]
   1702e:	002b      	movs	r3, r5
   17030:	0022      	movs	r2, r4
   17032:	4c0d      	ldr	r4, [pc, #52]	; (17068 <buildStatusMessage+0x100>)
   17034:	47a0      	blx	r4
}
   17036:	46c0      	nop			; (mov r8, r8)
   17038:	46bd      	mov	sp, r7
   1703a:	b00b      	add	sp, #44	; 0x2c
   1703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1703e:	46c0      	nop			; (mov r8, r8)
   17040:	000128c1 	.word	0x000128c1
   17044:	2000073c 	.word	0x2000073c
   17048:	0002a5b8 	.word	0x0002a5b8
   1704c:	0002a5bc 	.word	0x0002a5bc
   17050:	0046464f 	.word	0x0046464f
   17054:	0002a5c4 	.word	0x0002a5c4
   17058:	0002a5c8 	.word	0x0002a5c8
   1705c:	0001aaf5 	.word	0x0001aaf5
   17060:	200006d8 	.word	0x200006d8
   17064:	0002a5d0 	.word	0x0002a5d0
   17068:	00029019 	.word	0x00029019

0001706c <checkNumber>:


bool checkNumber(char *number)
{
   1706c:	b580      	push	{r7, lr}
   1706e:	b082      	sub	sp, #8
   17070:	af00      	add	r7, sp, #0
   17072:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   17074:	687b      	ldr	r3, [r7, #4]
   17076:	0018      	movs	r0, r3
   17078:	4b0a      	ldr	r3, [pc, #40]	; (170a4 <checkNumber+0x38>)
   1707a:	4798      	blx	r3
   1707c:	1e03      	subs	r3, r0, #0
   1707e:	d109      	bne.n	17094 <checkNumber+0x28>
   17080:	687b      	ldr	r3, [r7, #4]
   17082:	0018      	movs	r0, r3
   17084:	4b08      	ldr	r3, [pc, #32]	; (170a8 <checkNumber+0x3c>)
   17086:	4798      	blx	r3
   17088:	0003      	movs	r3, r0
   1708a:	001a      	movs	r2, r3
   1708c:	4b07      	ldr	r3, [pc, #28]	; (170ac <checkNumber+0x40>)
   1708e:	785b      	ldrb	r3, [r3, #1]
   17090:	429a      	cmp	r2, r3
   17092:	d201      	bcs.n	17098 <checkNumber+0x2c>
	{
		return true;
   17094:	2301      	movs	r3, #1
   17096:	e000      	b.n	1709a <checkNumber+0x2e>
	}
	else
	{
		return false;
   17098:	2300      	movs	r3, #0
	}
}
   1709a:	0018      	movs	r0, r3
   1709c:	46bd      	mov	sp, r7
   1709e:	b002      	add	sp, #8
   170a0:	bd80      	pop	{r7, pc}
   170a2:	46c0      	nop			; (mov r8, r8)
   170a4:	00011a61 	.word	0x00011a61
   170a8:	00010de1 	.word	0x00010de1
   170ac:	20000610 	.word	0x20000610

000170b0 <checkNoCallTime>:

bool checkNoCallTime(void)
{
   170b0:	b580      	push	{r7, lr}
   170b2:	b082      	sub	sp, #8
   170b4:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   170b6:	1dba      	adds	r2, r7, #6
   170b8:	1dfb      	adds	r3, r7, #7
   170ba:	0011      	movs	r1, r2
   170bc:	0018      	movs	r0, r3
   170be:	4b2b      	ldr	r3, [pc, #172]	; (1716c <checkNoCallTime+0xbc>)
   170c0:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   170c2:	4b2b      	ldr	r3, [pc, #172]	; (17170 <checkNoCallTime+0xc0>)
   170c4:	7a9a      	ldrb	r2, [r3, #10]
   170c6:	1dfb      	adds	r3, r7, #7
   170c8:	781b      	ldrb	r3, [r3, #0]
   170ca:	429a      	cmp	r2, r3
   170cc:	d849      	bhi.n	17162 <checkNoCallTime+0xb2>
   170ce:	4b28      	ldr	r3, [pc, #160]	; (17170 <checkNoCallTime+0xc0>)
   170d0:	7b1a      	ldrb	r2, [r3, #12]
   170d2:	1dfb      	adds	r3, r7, #7
   170d4:	781b      	ldrb	r3, [r3, #0]
   170d6:	429a      	cmp	r2, r3
   170d8:	d343      	bcc.n	17162 <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   170da:	4b25      	ldr	r3, [pc, #148]	; (17170 <checkNoCallTime+0xc0>)
   170dc:	7a9a      	ldrb	r2, [r3, #10]
   170de:	4b24      	ldr	r3, [pc, #144]	; (17170 <checkNoCallTime+0xc0>)
   170e0:	7b1b      	ldrb	r3, [r3, #12]
   170e2:	429a      	cmp	r2, r3
   170e4:	d10f      	bne.n	17106 <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   170e6:	4b22      	ldr	r3, [pc, #136]	; (17170 <checkNoCallTime+0xc0>)
   170e8:	7ada      	ldrb	r2, [r3, #11]
   170ea:	1dbb      	adds	r3, r7, #6
   170ec:	781b      	ldrb	r3, [r3, #0]
   170ee:	429a      	cmp	r2, r3
   170f0:	d807      	bhi.n	17102 <checkNoCallTime+0x52>
   170f2:	4b1f      	ldr	r3, [pc, #124]	; (17170 <checkNoCallTime+0xc0>)
   170f4:	7b5a      	ldrb	r2, [r3, #13]
   170f6:	1dbb      	adds	r3, r7, #6
   170f8:	781b      	ldrb	r3, [r3, #0]
   170fa:	429a      	cmp	r2, r3
   170fc:	d301      	bcc.n	17102 <checkNoCallTime+0x52>
			return true;
   170fe:	2301      	movs	r3, #1
   17100:	e030      	b.n	17164 <checkNoCallTime+0xb4>
			else
			return false;
   17102:	2300      	movs	r3, #0
   17104:	e02e      	b.n	17164 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   17106:	4b1a      	ldr	r3, [pc, #104]	; (17170 <checkNoCallTime+0xc0>)
   17108:	7a9a      	ldrb	r2, [r3, #10]
   1710a:	1dfb      	adds	r3, r7, #7
   1710c:	781b      	ldrb	r3, [r3, #0]
   1710e:	429a      	cmp	r2, r3
   17110:	d109      	bne.n	17126 <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   17112:	4b17      	ldr	r3, [pc, #92]	; (17170 <checkNoCallTime+0xc0>)
   17114:	7ada      	ldrb	r2, [r3, #11]
   17116:	1dbb      	adds	r3, r7, #6
   17118:	781b      	ldrb	r3, [r3, #0]
   1711a:	429a      	cmp	r2, r3
   1711c:	d801      	bhi.n	17122 <checkNoCallTime+0x72>
			return true;
   1711e:	2301      	movs	r3, #1
   17120:	e020      	b.n	17164 <checkNoCallTime+0xb4>
			else
			return false;
   17122:	2300      	movs	r3, #0
   17124:	e01e      	b.n	17164 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17126:	4b12      	ldr	r3, [pc, #72]	; (17170 <checkNoCallTime+0xc0>)
   17128:	7b1a      	ldrb	r2, [r3, #12]
   1712a:	1dfb      	adds	r3, r7, #7
   1712c:	781b      	ldrb	r3, [r3, #0]
   1712e:	429a      	cmp	r2, r3
   17130:	d109      	bne.n	17146 <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   17132:	4b0f      	ldr	r3, [pc, #60]	; (17170 <checkNoCallTime+0xc0>)
   17134:	7b5a      	ldrb	r2, [r3, #13]
   17136:	1dbb      	adds	r3, r7, #6
   17138:	781b      	ldrb	r3, [r3, #0]
   1713a:	429a      	cmp	r2, r3
   1713c:	d301      	bcc.n	17142 <checkNoCallTime+0x92>
			return true;
   1713e:	2301      	movs	r3, #1
   17140:	e010      	b.n	17164 <checkNoCallTime+0xb4>
			else
			return false;
   17142:	2300      	movs	r3, #0
   17144:	e00e      	b.n	17164 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   17146:	4b0a      	ldr	r3, [pc, #40]	; (17170 <checkNoCallTime+0xc0>)
   17148:	7a9a      	ldrb	r2, [r3, #10]
   1714a:	1dfb      	adds	r3, r7, #7
   1714c:	781b      	ldrb	r3, [r3, #0]
   1714e:	429a      	cmp	r2, r3
   17150:	d207      	bcs.n	17162 <checkNoCallTime+0xb2>
   17152:	4b07      	ldr	r3, [pc, #28]	; (17170 <checkNoCallTime+0xc0>)
   17154:	7b1a      	ldrb	r2, [r3, #12]
   17156:	1dfb      	adds	r3, r7, #7
   17158:	781b      	ldrb	r3, [r3, #0]
   1715a:	429a      	cmp	r2, r3
   1715c:	d901      	bls.n	17162 <checkNoCallTime+0xb2>
		return true;
   1715e:	2301      	movs	r3, #1
   17160:	e000      	b.n	17164 <checkNoCallTime+0xb4>
	}
	return false;
   17162:	2300      	movs	r3, #0
}
   17164:	0018      	movs	r0, r3
   17166:	46bd      	mov	sp, r7
   17168:	b002      	add	sp, #8
   1716a:	bd80      	pop	{r7, pc}
   1716c:	000173ad 	.word	0x000173ad
   17170:	20000650 	.word	0x20000650

00017174 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   17174:	b580      	push	{r7, lr}
   17176:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   17178:	4b04      	ldr	r3, [pc, #16]	; (1718c <verifyRemoteNumber+0x18>)
   1717a:	2201      	movs	r2, #1
   1717c:	2101      	movs	r1, #1
   1717e:	0018      	movs	r0, r3
   17180:	4b03      	ldr	r3, [pc, #12]	; (17190 <verifyRemoteNumber+0x1c>)
   17182:	4798      	blx	r3
}
   17184:	46c0      	nop			; (mov r8, r8)
   17186:	46bd      	mov	sp, r7
   17188:	bd80      	pop	{r7, pc}
   1718a:	46c0      	nop			; (mov r8, r8)
   1718c:	0002a61c 	.word	0x0002a61c
   17190:	00017195 	.word	0x00017195

00017194 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   17194:	b580      	push	{r7, lr}
   17196:	b08e      	sub	sp, #56	; 0x38
   17198:	af00      	add	r7, sp, #0
   1719a:	6078      	str	r0, [r7, #4]
   1719c:	0008      	movs	r0, r1
   1719e:	0011      	movs	r1, r2
   171a0:	1cfb      	adds	r3, r7, #3
   171a2:	1c02      	adds	r2, r0, #0
   171a4:	701a      	strb	r2, [r3, #0]
   171a6:	1cbb      	adds	r3, r7, #2
   171a8:	1c0a      	adds	r2, r1, #0
   171aa:	701a      	strb	r2, [r3, #0]
	inCall=true;
   171ac:	4b55      	ldr	r3, [pc, #340]	; (17304 <sendSMS+0x170>)
   171ae:	2201      	movs	r2, #1
   171b0:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   171b2:	1cfb      	adds	r3, r7, #3
   171b4:	781b      	ldrb	r3, [r3, #0]
   171b6:	2201      	movs	r2, #1
   171b8:	4053      	eors	r3, r2
   171ba:	b2db      	uxtb	r3, r3
   171bc:	2b00      	cmp	r3, #0
   171be:	d048      	beq.n	17252 <sendSMS+0xbe>
	{
		switch(actionType)
   171c0:	4b51      	ldr	r3, [pc, #324]	; (17308 <sendSMS+0x174>)
   171c2:	781b      	ldrb	r3, [r3, #0]
   171c4:	3b43      	subs	r3, #67	; 0x43
   171c6:	2b12      	cmp	r3, #18
   171c8:	d900      	bls.n	171cc <sendSMS+0x38>
   171ca:	e096      	b.n	172fa <sendSMS+0x166>
   171cc:	009a      	lsls	r2, r3, #2
   171ce:	4b4f      	ldr	r3, [pc, #316]	; (1730c <sendSMS+0x178>)
   171d0:	18d3      	adds	r3, r2, r3
   171d2:	681b      	ldr	r3, [r3, #0]
   171d4:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   171d6:	687b      	ldr	r3, [r7, #4]
   171d8:	0018      	movs	r0, r3
   171da:	4b4d      	ldr	r3, [pc, #308]	; (17310 <sendSMS+0x17c>)
   171dc:	4798      	blx	r3
   171de:	0003      	movs	r3, r0
   171e0:	001a      	movs	r2, r3
   171e2:	687b      	ldr	r3, [r7, #4]
   171e4:	189a      	adds	r2, r3, r2
   171e6:	4b4b      	ldr	r3, [pc, #300]	; (17314 <sendSMS+0x180>)
   171e8:	0010      	movs	r0, r2
   171ea:	0019      	movs	r1, r3
   171ec:	2307      	movs	r3, #7
   171ee:	001a      	movs	r2, r3
   171f0:	4b49      	ldr	r3, [pc, #292]	; (17318 <sendSMS+0x184>)
   171f2:	4798      	blx	r3
			strcat(msg,STR_ON);
   171f4:	687b      	ldr	r3, [r7, #4]
   171f6:	0018      	movs	r0, r3
   171f8:	4b45      	ldr	r3, [pc, #276]	; (17310 <sendSMS+0x17c>)
   171fa:	4798      	blx	r3
   171fc:	0003      	movs	r3, r0
   171fe:	001a      	movs	r2, r3
   17200:	687b      	ldr	r3, [r7, #4]
   17202:	189a      	adds	r2, r3, r2
   17204:	4b45      	ldr	r3, [pc, #276]	; (1731c <sendSMS+0x188>)
   17206:	0010      	movs	r0, r2
   17208:	0019      	movs	r1, r3
   1720a:	2303      	movs	r3, #3
   1720c:	001a      	movs	r2, r3
   1720e:	4b42      	ldr	r3, [pc, #264]	; (17318 <sendSMS+0x184>)
   17210:	4798      	blx	r3
			break;
   17212:	e01e      	b.n	17252 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   17214:	687b      	ldr	r3, [r7, #4]
   17216:	0018      	movs	r0, r3
   17218:	4b3d      	ldr	r3, [pc, #244]	; (17310 <sendSMS+0x17c>)
   1721a:	4798      	blx	r3
   1721c:	0003      	movs	r3, r0
   1721e:	001a      	movs	r2, r3
   17220:	687b      	ldr	r3, [r7, #4]
   17222:	189a      	adds	r2, r3, r2
   17224:	4b3b      	ldr	r3, [pc, #236]	; (17314 <sendSMS+0x180>)
   17226:	0010      	movs	r0, r2
   17228:	0019      	movs	r1, r3
   1722a:	2307      	movs	r3, #7
   1722c:	001a      	movs	r2, r3
   1722e:	4b3a      	ldr	r3, [pc, #232]	; (17318 <sendSMS+0x184>)
   17230:	4798      	blx	r3
			strcat(msg,STR_OFF);
   17232:	687b      	ldr	r3, [r7, #4]
   17234:	0018      	movs	r0, r3
   17236:	4b36      	ldr	r3, [pc, #216]	; (17310 <sendSMS+0x17c>)
   17238:	4798      	blx	r3
   1723a:	0003      	movs	r3, r0
   1723c:	001a      	movs	r2, r3
   1723e:	687b      	ldr	r3, [r7, #4]
   17240:	189a      	adds	r2, r3, r2
   17242:	4b37      	ldr	r3, [pc, #220]	; (17320 <sendSMS+0x18c>)
   17244:	0010      	movs	r0, r2
   17246:	0019      	movs	r1, r3
   17248:	2304      	movs	r3, #4
   1724a:	001a      	movs	r2, r3
   1724c:	4b32      	ldr	r3, [pc, #200]	; (17318 <sendSMS+0x184>)
   1724e:	4798      	blx	r3
			break;
   17250:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   17252:	1cbb      	adds	r3, r7, #2
   17254:	781b      	ldrb	r3, [r3, #0]
   17256:	2b02      	cmp	r3, #2
   17258:	d105      	bne.n	17266 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   1725a:	2324      	movs	r3, #36	; 0x24
   1725c:	18fb      	adds	r3, r7, r3
   1725e:	0018      	movs	r0, r3
   17260:	4b30      	ldr	r3, [pc, #192]	; (17324 <sendSMS+0x190>)
   17262:	4798      	blx	r3
   17264:	e034      	b.n	172d0 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   17266:	1cbb      	adds	r3, r7, #2
   17268:	781b      	ldrb	r3, [r3, #0]
   1726a:	2b01      	cmp	r3, #1
   1726c:	d109      	bne.n	17282 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1726e:	4b2e      	ldr	r3, [pc, #184]	; (17328 <sendSMS+0x194>)
   17270:	78db      	ldrb	r3, [r3, #3]
   17272:	2b00      	cmp	r3, #0
   17274:	d02c      	beq.n	172d0 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   17276:	2324      	movs	r3, #36	; 0x24
   17278:	18fb      	adds	r3, r7, r3
   1727a:	0018      	movs	r0, r3
   1727c:	4b2b      	ldr	r3, [pc, #172]	; (1732c <sendSMS+0x198>)
   1727e:	4798      	blx	r3
   17280:	e026      	b.n	172d0 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   17282:	4b2b      	ldr	r3, [pc, #172]	; (17330 <sendSMS+0x19c>)
   17284:	781b      	ldrb	r3, [r3, #0]
   17286:	2b00      	cmp	r3, #0
   17288:	d01d      	beq.n	172c6 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   1728a:	4b2a      	ldr	r3, [pc, #168]	; (17334 <sendSMS+0x1a0>)
   1728c:	223c      	movs	r2, #60	; 0x3c
   1728e:	2100      	movs	r1, #0
   17290:	0018      	movs	r0, r3
   17292:	4b29      	ldr	r3, [pc, #164]	; (17338 <sendSMS+0x1a4>)
   17294:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   17296:	4b27      	ldr	r3, [pc, #156]	; (17334 <sendSMS+0x1a0>)
   17298:	0019      	movs	r1, r3
   1729a:	2003      	movs	r0, #3
   1729c:	4b27      	ldr	r3, [pc, #156]	; (1733c <sendSMS+0x1a8>)
   1729e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   172a0:	230c      	movs	r3, #12
   172a2:	18fa      	adds	r2, r7, r3
   172a4:	4b23      	ldr	r3, [pc, #140]	; (17334 <sendSMS+0x1a0>)
   172a6:	0010      	movs	r0, r2
   172a8:	0019      	movs	r1, r3
   172aa:	2318      	movs	r3, #24
   172ac:	001a      	movs	r2, r3
   172ae:	4b1a      	ldr	r3, [pc, #104]	; (17318 <sendSMS+0x184>)
   172b0:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   172b2:	230c      	movs	r3, #12
   172b4:	18fb      	adds	r3, r7, r3
   172b6:	1d1a      	adds	r2, r3, #4
   172b8:	2324      	movs	r3, #36	; 0x24
   172ba:	18fb      	adds	r3, r7, r3
   172bc:	0011      	movs	r1, r2
   172be:	0018      	movs	r0, r3
   172c0:	4b1f      	ldr	r3, [pc, #124]	; (17340 <sendSMS+0x1ac>)
   172c2:	4798      	blx	r3
   172c4:	e004      	b.n	172d0 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   172c6:	2324      	movs	r3, #36	; 0x24
   172c8:	18fb      	adds	r3, r7, r3
   172ca:	0018      	movs	r0, r3
   172cc:	4b1d      	ldr	r3, [pc, #116]	; (17344 <sendSMS+0x1b0>)
   172ce:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   172d0:	2324      	movs	r3, #36	; 0x24
   172d2:	18fb      	adds	r3, r7, r3
   172d4:	2200      	movs	r2, #0
   172d6:	0019      	movs	r1, r3
   172d8:	2005      	movs	r0, #5
   172da:	4b1b      	ldr	r3, [pc, #108]	; (17348 <sendSMS+0x1b4>)
   172dc:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   172de:	687a      	ldr	r2, [r7, #4]
   172e0:	2324      	movs	r3, #36	; 0x24
   172e2:	18fb      	adds	r3, r7, r3
   172e4:	0011      	movs	r1, r2
   172e6:	0018      	movs	r0, r3
   172e8:	4b18      	ldr	r3, [pc, #96]	; (1734c <sendSMS+0x1b8>)
   172ea:	4798      	blx	r3
	isMsgFromAdmin = false;
   172ec:	4b10      	ldr	r3, [pc, #64]	; (17330 <sendSMS+0x19c>)
   172ee:	2200      	movs	r2, #0
   172f0:	701a      	strb	r2, [r3, #0]
	inCall=false;
   172f2:	4b04      	ldr	r3, [pc, #16]	; (17304 <sendSMS+0x170>)
   172f4:	2200      	movs	r2, #0
   172f6:	701a      	strb	r2, [r3, #0]
   172f8:	e000      	b.n	172fc <sendSMS+0x168>
			return;
   172fa:	46c0      	nop			; (mov r8, r8)
}
   172fc:	46bd      	mov	sp, r7
   172fe:	b00e      	add	sp, #56	; 0x38
   17300:	bd80      	pop	{r7, pc}
   17302:	46c0      	nop			; (mov r8, r8)
   17304:	20000790 	.word	0x20000790
   17308:	20000757 	.word	0x20000757
   1730c:	0002a658 	.word	0x0002a658
   17310:	000290a3 	.word	0x000290a3
   17314:	0002a624 	.word	0x0002a624
   17318:	00028ddd 	.word	0x00028ddd
   1731c:	0002a5b8 	.word	0x0002a5b8
   17320:	0002a62c 	.word	0x0002a62c
   17324:	00010ac1 	.word	0x00010ac1
   17328:	20000628 	.word	0x20000628
   1732c:	00010afd 	.word	0x00010afd
   17330:	2000076b 	.word	0x2000076b
   17334:	20000584 	.word	0x20000584
   17338:	00028e13 	.word	0x00028e13
   1733c:	00023afd 	.word	0x00023afd
   17340:	00029093 	.word	0x00029093
   17344:	00010d15 	.word	0x00010d15
   17348:	0001cb31 	.word	0x0001cb31
   1734c:	00012b09 	.word	0x00012b09

00017350 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   17350:	b580      	push	{r7, lr}
   17352:	b082      	sub	sp, #8
   17354:	af00      	add	r7, sp, #0
   17356:	0002      	movs	r2, r0
   17358:	1dfb      	adds	r3, r7, #7
   1735a:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   1735c:	1dfb      	adds	r3, r7, #7
   1735e:	781b      	ldrb	r3, [r3, #0]
   17360:	2bff      	cmp	r3, #255	; 0xff
   17362:	d103      	bne.n	1736c <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   17364:	2041      	movs	r0, #65	; 0x41
   17366:	4b0f      	ldr	r3, [pc, #60]	; (173a4 <sendDTMFTone+0x54>)
   17368:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   1736a:	e016      	b.n	1739a <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   1736c:	1dfb      	adds	r3, r7, #7
   1736e:	781b      	ldrb	r3, [r3, #0]
   17370:	2b00      	cmp	r3, #0
   17372:	d107      	bne.n	17384 <sendDTMFTone+0x34>
   17374:	4b0c      	ldr	r3, [pc, #48]	; (173a8 <sendDTMFTone+0x58>)
   17376:	78db      	ldrb	r3, [r3, #3]
   17378:	2b00      	cmp	r3, #0
   1737a:	d003      	beq.n	17384 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   1737c:	2044      	movs	r0, #68	; 0x44
   1737e:	4b09      	ldr	r3, [pc, #36]	; (173a4 <sendDTMFTone+0x54>)
   17380:	4798      	blx	r3
}
   17382:	e00a      	b.n	1739a <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17384:	1dfb      	adds	r3, r7, #7
   17386:	781b      	ldrb	r3, [r3, #0]
   17388:	2b01      	cmp	r3, #1
   1738a:	d106      	bne.n	1739a <sendDTMFTone+0x4a>
   1738c:	4b06      	ldr	r3, [pc, #24]	; (173a8 <sendDTMFTone+0x58>)
   1738e:	78db      	ldrb	r3, [r3, #3]
   17390:	2b00      	cmp	r3, #0
   17392:	d002      	beq.n	1739a <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17394:	2043      	movs	r0, #67	; 0x43
   17396:	4b03      	ldr	r3, [pc, #12]	; (173a4 <sendDTMFTone+0x54>)
   17398:	4798      	blx	r3
}
   1739a:	46c0      	nop			; (mov r8, r8)
   1739c:	46bd      	mov	sp, r7
   1739e:	b002      	add	sp, #8
   173a0:	bd80      	pop	{r7, pc}
   173a2:	46c0      	nop			; (mov r8, r8)
   173a4:	00012f7d 	.word	0x00012f7d
   173a8:	20000628 	.word	0x20000628

000173ac <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   173ac:	b580      	push	{r7, lr}
   173ae:	b082      	sub	sp, #8
   173b0:	af00      	add	r7, sp, #0
   173b2:	6078      	str	r0, [r7, #4]
   173b4:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   173b6:	4b09      	ldr	r3, [pc, #36]	; (173dc <getSystemTime+0x30>)
   173b8:	4798      	blx	r3
   173ba:	1e03      	subs	r3, r0, #0
   173bc:	d109      	bne.n	173d2 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   173be:	4b08      	ldr	r3, [pc, #32]	; (173e0 <getSystemTime+0x34>)
   173c0:	78db      	ldrb	r3, [r3, #3]
   173c2:	b2da      	uxtb	r2, r3
   173c4:	687b      	ldr	r3, [r7, #4]
   173c6:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   173c8:	4b05      	ldr	r3, [pc, #20]	; (173e0 <getSystemTime+0x34>)
   173ca:	791b      	ldrb	r3, [r3, #4]
   173cc:	b2da      	uxtb	r2, r3
   173ce:	683b      	ldr	r3, [r7, #0]
   173d0:	701a      	strb	r2, [r3, #0]
	}
}
   173d2:	46c0      	nop			; (mov r8, r8)
   173d4:	46bd      	mov	sp, r7
   173d6:	b002      	add	sp, #8
   173d8:	bd80      	pop	{r7, pc}
   173da:	46c0      	nop			; (mov r8, r8)
   173dc:	0001315d 	.word	0x0001315d
   173e0:	20000684 	.word	0x20000684

000173e4 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   173e4:	b590      	push	{r4, r7, lr}
   173e6:	b0cf      	sub	sp, #316	; 0x13c
   173e8:	af02      	add	r7, sp, #8
   173ea:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   173ec:	2300      	movs	r3, #0
   173ee:	2296      	movs	r2, #150	; 0x96
   173f0:	0052      	lsls	r2, r2, #1
   173f2:	18ba      	adds	r2, r7, r2
   173f4:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
   173f6:	4bbb      	ldr	r3, [pc, #748]	; (176e4 <vTask_GSM_service+0x300>)
   173f8:	4aba      	ldr	r2, [pc, #744]	; (176e4 <vTask_GSM_service+0x300>)
   173fa:	6812      	ldr	r2, [r2, #0]
   173fc:	2180      	movs	r1, #128	; 0x80
   173fe:	0249      	lsls	r1, r1, #9
   17400:	430a      	orrs	r2, r1
   17402:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   17404:	2388      	movs	r3, #136	; 0x88
   17406:	005b      	lsls	r3, r3, #1
   17408:	18fb      	adds	r3, r7, r3
   1740a:	0018      	movs	r0, r3
   1740c:	4bb6      	ldr	r3, [pc, #728]	; (176e8 <vTask_GSM_service+0x304>)
   1740e:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   17410:	2388      	movs	r3, #136	; 0x88
   17412:	005b      	lsls	r3, r3, #1
   17414:	18fb      	adds	r3, r7, r3
   17416:	2200      	movs	r2, #0
   17418:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   1741a:	2388      	movs	r3, #136	; 0x88
   1741c:	005b      	lsls	r3, r3, #1
   1741e:	18fb      	adds	r3, r7, r3
   17420:	2200      	movs	r2, #0
   17422:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   17424:	2388      	movs	r3, #136	; 0x88
   17426:	005b      	lsls	r3, r3, #1
   17428:	18fb      	adds	r3, r7, r3
   1742a:	0019      	movs	r1, r3
   1742c:	201b      	movs	r0, #27
   1742e:	4baf      	ldr	r3, [pc, #700]	; (176ec <vTask_GSM_service+0x308>)
   17430:	4798      	blx	r3
	
	gsm_init();
   17432:	4baf      	ldr	r3, [pc, #700]	; (176f0 <vTask_GSM_service+0x30c>)
   17434:	4798      	blx	r3
	
	initialized = false;
   17436:	4baf      	ldr	r3, [pc, #700]	; (176f4 <vTask_GSM_service+0x310>)
   17438:	2200      	movs	r2, #0
   1743a:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   1743c:	4bae      	ldr	r3, [pc, #696]	; (176f8 <vTask_GSM_service+0x314>)
   1743e:	2200      	movs	r2, #0
   17440:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   17442:	4bae      	ldr	r3, [pc, #696]	; (176fc <vTask_GSM_service+0x318>)
   17444:	2200      	movs	r2, #0
   17446:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
   17448:	232c      	movs	r3, #44	; 0x2c
   1744a:	33ff      	adds	r3, #255	; 0xff
   1744c:	18fb      	adds	r3, r7, r3
   1744e:	2200      	movs	r2, #0
   17450:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
   17452:	2395      	movs	r3, #149	; 0x95
   17454:	005b      	lsls	r3, r3, #1
   17456:	18fb      	adds	r3, r7, r3
   17458:	2200      	movs	r2, #0
   1745a:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
   1745c:	4ba8      	ldr	r3, [pc, #672]	; (17700 <vTask_GSM_service+0x31c>)
   1745e:	2200      	movs	r2, #0
   17460:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   17462:	4ba8      	ldr	r3, [pc, #672]	; (17704 <vTask_GSM_service+0x320>)
   17464:	2205      	movs	r2, #5
   17466:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   17468:	4ba7      	ldr	r3, [pc, #668]	; (17708 <vTask_GSM_service+0x324>)
   1746a:	2200      	movs	r2, #0
   1746c:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   1746e:	4ba7      	ldr	r3, [pc, #668]	; (1770c <vTask_GSM_service+0x328>)
   17470:	2291      	movs	r2, #145	; 0x91
   17472:	0092      	lsls	r2, r2, #2
   17474:	801a      	strh	r2, [r3, #0]
	nr = 0;
   17476:	4ba6      	ldr	r3, [pc, #664]	; (17710 <vTask_GSM_service+0x32c>)
   17478:	2200      	movs	r2, #0
   1747a:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   1747c:	4ba5      	ldr	r3, [pc, #660]	; (17714 <vTask_GSM_service+0x330>)
   1747e:	224e      	movs	r2, #78	; 0x4e
   17480:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   17482:	4ba5      	ldr	r3, [pc, #660]	; (17718 <vTask_GSM_service+0x334>)
   17484:	224e      	movs	r2, #78	; 0x4e
   17486:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   17488:	4ba4      	ldr	r3, [pc, #656]	; (1771c <vTask_GSM_service+0x338>)
   1748a:	2200      	movs	r2, #0
   1748c:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   1748e:	4ba4      	ldr	r3, [pc, #656]	; (17720 <vTask_GSM_service+0x33c>)
   17490:	2200      	movs	r2, #0
   17492:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   17494:	4ba3      	ldr	r3, [pc, #652]	; (17724 <vTask_GSM_service+0x340>)
   17496:	2201      	movs	r2, #1
   17498:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   1749a:	4ba3      	ldr	r3, [pc, #652]	; (17728 <vTask_GSM_service+0x344>)
   1749c:	2200      	movs	r2, #0
   1749e:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   174a0:	4ba2      	ldr	r3, [pc, #648]	; (1772c <vTask_GSM_service+0x348>)
   174a2:	2200      	movs	r2, #0
   174a4:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   174a6:	4ba2      	ldr	r3, [pc, #648]	; (17730 <vTask_GSM_service+0x34c>)
   174a8:	224e      	movs	r2, #78	; 0x4e
   174aa:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   174ac:	4ba1      	ldr	r3, [pc, #644]	; (17734 <vTask_GSM_service+0x350>)
   174ae:	2200      	movs	r2, #0
   174b0:	701a      	strb	r2, [r3, #0]
	retries=0;
   174b2:	4ba1      	ldr	r3, [pc, #644]	; (17738 <vTask_GSM_service+0x354>)
   174b4:	2200      	movs	r2, #0
   174b6:	701a      	strb	r2, [r3, #0]
	
	mcuWakeUpFromSleep=false;
   174b8:	4ba0      	ldr	r3, [pc, #640]	; (1773c <vTask_GSM_service+0x358>)
   174ba:	2200      	movs	r2, #0
   174bc:	701a      	strb	r2, [r3, #0]
	isGSMModuleAwake=false;
   174be:	4ba0      	ldr	r3, [pc, #640]	; (17740 <vTask_GSM_service+0x35c>)
   174c0:	2200      	movs	r2, #0
   174c2:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   174c4:	2101      	movs	r1, #1
   174c6:	2014      	movs	r0, #20
   174c8:	4b9e      	ldr	r3, [pc, #632]	; (17744 <vTask_GSM_service+0x360>)
   174ca:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   174cc:	4b9e      	ldr	r3, [pc, #632]	; (17748 <vTask_GSM_service+0x364>)
   174ce:	2200      	movs	r2, #0
   174d0:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   174d2:	2000      	movs	r0, #0
   174d4:	4b9d      	ldr	r3, [pc, #628]	; (1774c <vTask_GSM_service+0x368>)
   174d6:	4798      	blx	r3
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   174d8:	4b9d      	ldr	r3, [pc, #628]	; (17750 <vTask_GSM_service+0x36c>)
   174da:	785b      	ldrb	r3, [r3, #1]
   174dc:	2b00      	cmp	r3, #0
   174de:	d002      	beq.n	174e6 <vTask_GSM_service+0x102>
	{
		zeroPressed=false;
   174e0:	4b9c      	ldr	r3, [pc, #624]	; (17754 <vTask_GSM_service+0x370>)
   174e2:	2200      	movs	r2, #0
   174e4:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   174e6:	4b9a      	ldr	r3, [pc, #616]	; (17750 <vTask_GSM_service+0x36c>)
   174e8:	78db      	ldrb	r3, [r3, #3]
   174ea:	2b00      	cmp	r3, #0
   174ec:	d012      	beq.n	17514 <vTask_GSM_service+0x130>
	{
		m2mAck=false;
   174ee:	4b9a      	ldr	r3, [pc, #616]	; (17758 <vTask_GSM_service+0x374>)
   174f0:	2200      	movs	r2, #0
   174f2:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   174f4:	4b99      	ldr	r3, [pc, #612]	; (1775c <vTask_GSM_service+0x378>)
   174f6:	2200      	movs	r2, #0
   174f8:	701a      	strb	r2, [r3, #0]
   174fa:	4b98      	ldr	r3, [pc, #608]	; (1775c <vTask_GSM_service+0x378>)
   174fc:	781a      	ldrb	r2, [r3, #0]
   174fe:	4b98      	ldr	r3, [pc, #608]	; (17760 <vTask_GSM_service+0x37c>)
   17500:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   17502:	4b98      	ldr	r3, [pc, #608]	; (17764 <vTask_GSM_service+0x380>)
   17504:	2200      	movs	r2, #0
   17506:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   17508:	4b97      	ldr	r3, [pc, #604]	; (17768 <vTask_GSM_service+0x384>)
   1750a:	2200      	movs	r2, #0
   1750c:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   1750e:	4b97      	ldr	r3, [pc, #604]	; (1776c <vTask_GSM_service+0x388>)
   17510:	2200      	movs	r2, #0
   17512:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   17514:	201b      	movs	r0, #27
   17516:	4b96      	ldr	r3, [pc, #600]	; (17770 <vTask_GSM_service+0x38c>)
   17518:	4798      	blx	r3
   1751a:	1e03      	subs	r3, r0, #0
   1751c:	d01e      	beq.n	1755c <vTask_GSM_service+0x178>
	{
		boolGsm_config_flag			=false;
   1751e:	232c      	movs	r3, #44	; 0x2c
   17520:	33ff      	adds	r3, #255	; 0xff
   17522:	18fb      	adds	r3, r7, r3
   17524:	2200      	movs	r2, #0
   17526:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   17528:	2395      	movs	r3, #149	; 0x95
   1752a:	005b      	lsls	r3, r3, #1
   1752c:	18fb      	adds	r3, r7, r3
   1752e:	2200      	movs	r2, #0
   17530:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   17532:	4b90      	ldr	r3, [pc, #576]	; (17774 <vTask_GSM_service+0x390>)
   17534:	4a8f      	ldr	r2, [pc, #572]	; (17774 <vTask_GSM_service+0x390>)
   17536:	6812      	ldr	r2, [r2, #0]
   17538:	2180      	movs	r1, #128	; 0x80
   1753a:	0249      	lsls	r1, r1, #9
   1753c:	430a      	orrs	r2, r1
   1753e:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   17540:	4b8d      	ldr	r3, [pc, #564]	; (17778 <vTask_GSM_service+0x394>)
   17542:	0018      	movs	r0, r3
   17544:	4b8d      	ldr	r3, [pc, #564]	; (1777c <vTask_GSM_service+0x398>)
   17546:	4798      	blx	r3
		GSM_PWR_OFF;
   17548:	4b8a      	ldr	r3, [pc, #552]	; (17774 <vTask_GSM_service+0x390>)
   1754a:	4a8a      	ldr	r2, [pc, #552]	; (17774 <vTask_GSM_service+0x390>)
   1754c:	6812      	ldr	r2, [r2, #0]
   1754e:	498c      	ldr	r1, [pc, #560]	; (17780 <vTask_GSM_service+0x39c>)
   17550:	400a      	ands	r2, r1
   17552:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   17554:	4b8b      	ldr	r3, [pc, #556]	; (17784 <vTask_GSM_service+0x3a0>)
   17556:	0018      	movs	r0, r3
   17558:	4b88      	ldr	r3, [pc, #544]	; (1777c <vTask_GSM_service+0x398>)
   1755a:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
   1755c:	201b      	movs	r0, #27
   1755e:	4b84      	ldr	r3, [pc, #528]	; (17770 <vTask_GSM_service+0x38c>)
   17560:	4798      	blx	r3
   17562:	1e03      	subs	r3, r0, #0
   17564:	d101      	bne.n	1756a <vTask_GSM_service+0x186>
   17566:	f000 fc81 	bl	17e6c <vTask_GSM_service+0xa88>
		{
			if (boolGsm_config_flag == false)
   1756a:	232c      	movs	r3, #44	; 0x2c
   1756c:	33ff      	adds	r3, #255	; 0xff
   1756e:	18fb      	adds	r3, r7, r3
   17570:	781b      	ldrb	r3, [r3, #0]
   17572:	2201      	movs	r2, #1
   17574:	4053      	eors	r3, r2
   17576:	b2db      	uxtb	r3, r3
   17578:	2b00      	cmp	r3, #0
   1757a:	d038      	beq.n	175ee <vTask_GSM_service+0x20a>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   1757c:	4b82      	ldr	r3, [pc, #520]	; (17788 <vTask_GSM_service+0x3a4>)
   1757e:	4798      	blx	r3
   17580:	0003      	movs	r3, r0
   17582:	2b09      	cmp	r3, #9
   17584:	d12d      	bne.n	175e2 <vTask_GSM_service+0x1fe>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   17586:	4b81      	ldr	r3, [pc, #516]	; (1778c <vTask_GSM_service+0x3a8>)
   17588:	4798      	blx	r3
   1758a:	1e03      	subs	r3, r0, #0
   1758c:	d123      	bne.n	175d6 <vTask_GSM_service+0x1f2>
					{
						for (uint8_t i=0;i<20;i++)
   1758e:	232a      	movs	r3, #42	; 0x2a
   17590:	33ff      	adds	r3, #255	; 0xff
   17592:	18fb      	adds	r3, r7, r3
   17594:	2200      	movs	r2, #0
   17596:	701a      	strb	r2, [r3, #0]
   17598:	e011      	b.n	175be <vTask_GSM_service+0x1da>
						{
							Signal_Strength = gsm_getsignalstrength();
   1759a:	4b7d      	ldr	r3, [pc, #500]	; (17790 <vTask_GSM_service+0x3ac>)
   1759c:	4798      	blx	r3
   1759e:	0003      	movs	r3, r0
   175a0:	001a      	movs	r2, r3
   175a2:	4b57      	ldr	r3, [pc, #348]	; (17700 <vTask_GSM_service+0x31c>)
   175a4:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
   175a6:	2032      	movs	r0, #50	; 0x32
   175a8:	4b74      	ldr	r3, [pc, #464]	; (1777c <vTask_GSM_service+0x398>)
   175aa:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
   175ac:	232a      	movs	r3, #42	; 0x2a
   175ae:	33ff      	adds	r3, #255	; 0xff
   175b0:	18fb      	adds	r3, r7, r3
   175b2:	781a      	ldrb	r2, [r3, #0]
   175b4:	232a      	movs	r3, #42	; 0x2a
   175b6:	33ff      	adds	r3, #255	; 0xff
   175b8:	18fb      	adds	r3, r7, r3
   175ba:	3201      	adds	r2, #1
   175bc:	701a      	strb	r2, [r3, #0]
   175be:	232a      	movs	r3, #42	; 0x2a
   175c0:	33ff      	adds	r3, #255	; 0xff
   175c2:	18fb      	adds	r3, r7, r3
   175c4:	781b      	ldrb	r3, [r3, #0]
   175c6:	2b13      	cmp	r3, #19
   175c8:	d9e7      	bls.n	1759a <vTask_GSM_service+0x1b6>
						}
						boolGsm_config_flag = true;
   175ca:	232c      	movs	r3, #44	; 0x2c
   175cc:	33ff      	adds	r3, #255	; 0xff
   175ce:	18fb      	adds	r3, r7, r3
   175d0:	2201      	movs	r2, #1
   175d2:	701a      	strb	r2, [r3, #0]
   175d4:	e7c2      	b.n	1755c <vTask_GSM_service+0x178>
					}
					else
					{
						boolGsm_config_flag = false;
   175d6:	232c      	movs	r3, #44	; 0x2c
   175d8:	33ff      	adds	r3, #255	; 0xff
   175da:	18fb      	adds	r3, r7, r3
   175dc:	2200      	movs	r2, #0
   175de:	701a      	strb	r2, [r3, #0]
   175e0:	e7bc      	b.n	1755c <vTask_GSM_service+0x178>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   175e2:	23fa      	movs	r3, #250	; 0xfa
   175e4:	00db      	lsls	r3, r3, #3
   175e6:	0018      	movs	r0, r3
   175e8:	4b64      	ldr	r3, [pc, #400]	; (1777c <vTask_GSM_service+0x398>)
   175ea:	4798      	blx	r3
   175ec:	e7b6      	b.n	1755c <vTask_GSM_service+0x178>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   175ee:	4b53      	ldr	r3, [pc, #332]	; (1773c <vTask_GSM_service+0x358>)
   175f0:	781b      	ldrb	r3, [r3, #0]
   175f2:	b2db      	uxtb	r3, r3
   175f4:	2b00      	cmp	r3, #0
   175f6:	d005      	beq.n	17604 <vTask_GSM_service+0x220>
				{
					mcuWakeUpFromSleep=false;
   175f8:	4b50      	ldr	r3, [pc, #320]	; (1773c <vTask_GSM_service+0x358>)
   175fa:	2200      	movs	r2, #0
   175fc:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   175fe:	2000      	movs	r0, #0
   17600:	4b52      	ldr	r3, [pc, #328]	; (1774c <vTask_GSM_service+0x368>)
   17602:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   17604:	2395      	movs	r3, #149	; 0x95
   17606:	005b      	lsls	r3, r3, #1
   17608:	18fb      	adds	r3, r7, r3
   1760a:	781b      	ldrb	r3, [r3, #0]
   1760c:	2201      	movs	r2, #1
   1760e:	4053      	eors	r3, r2
   17610:	b2db      	uxtb	r3, r3
   17612:	2b00      	cmp	r3, #0
   17614:	d01a      	beq.n	1764c <vTask_GSM_service+0x268>
   17616:	232c      	movs	r3, #44	; 0x2c
   17618:	33ff      	adds	r3, #255	; 0xff
   1761a:	18fb      	adds	r3, r7, r3
   1761c:	781b      	ldrb	r3, [r3, #0]
   1761e:	2b00      	cmp	r3, #0
   17620:	d014      	beq.n	1764c <vTask_GSM_service+0x268>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17622:	4b5c      	ldr	r3, [pc, #368]	; (17794 <vTask_GSM_service+0x3b0>)
   17624:	4798      	blx	r3
   17626:	1e03      	subs	r3, r0, #0
   17628:	d109      	bne.n	1763e <vTask_GSM_service+0x25a>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   1762a:	2395      	movs	r3, #149	; 0x95
   1762c:	005b      	lsls	r3, r3, #1
   1762e:	18fb      	adds	r3, r7, r3
   17630:	2201      	movs	r2, #1
   17632:	701a      	strb	r2, [r3, #0]
						initialized = true;
   17634:	4b2f      	ldr	r3, [pc, #188]	; (176f4 <vTask_GSM_service+0x310>)
   17636:	2201      	movs	r2, #1
   17638:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   1763a:	f000 fc3c 	bl	17eb6 <vTask_GSM_service+0xad2>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   1763e:	2395      	movs	r3, #149	; 0x95
   17640:	005b      	lsls	r3, r3, #1
   17642:	18fb      	adds	r3, r7, r3
   17644:	2200      	movs	r2, #0
   17646:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17648:	f000 fc35 	bl	17eb6 <vTask_GSM_service+0xad2>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   1764c:	4b31      	ldr	r3, [pc, #196]	; (17714 <vTask_GSM_service+0x330>)
   1764e:	781b      	ldrb	r3, [r3, #0]
   17650:	b2db      	uxtb	r3, r3
   17652:	2b4e      	cmp	r3, #78	; 0x4e
   17654:	d000      	beq.n	17658 <vTask_GSM_service+0x274>
   17656:	e0ad      	b.n	177b4 <vTask_GSM_service+0x3d0>
   17658:	4b2f      	ldr	r3, [pc, #188]	; (17718 <vTask_GSM_service+0x334>)
   1765a:	781b      	ldrb	r3, [r3, #0]
   1765c:	b2db      	uxtb	r3, r3
   1765e:	2b4e      	cmp	r3, #78	; 0x4e
   17660:	d000      	beq.n	17664 <vTask_GSM_service+0x280>
   17662:	e0a7      	b.n	177b4 <vTask_GSM_service+0x3d0>
					{
						if(!getACPowerState() &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   17664:	4b4c      	ldr	r3, [pc, #304]	; (17798 <vTask_GSM_service+0x3b4>)
   17666:	4798      	blx	r3
   17668:	0003      	movs	r3, r0
   1766a:	001a      	movs	r2, r3
   1766c:	2301      	movs	r3, #1
   1766e:	4053      	eors	r3, r2
   17670:	b2db      	uxtb	r3, r3
   17672:	2b00      	cmp	r3, #0
   17674:	d00a      	beq.n	1768c <vTask_GSM_service+0x2a8>
   17676:	4b32      	ldr	r3, [pc, #200]	; (17740 <vTask_GSM_service+0x35c>)
   17678:	781b      	ldrb	r3, [r3, #0]
   1767a:	b2db      	uxtb	r3, r3
   1767c:	2b00      	cmp	r3, #0
   1767e:	d005      	beq.n	1768c <vTask_GSM_service+0x2a8>
   17680:	4b46      	ldr	r3, [pc, #280]	; (1779c <vTask_GSM_service+0x3b8>)
   17682:	4798      	blx	r3
   17684:	1e03      	subs	r3, r0, #0
   17686:	d001      	beq.n	1768c <vTask_GSM_service+0x2a8>
						{
							gsm_module_enter_sleep();
   17688:	4b45      	ldr	r3, [pc, #276]	; (177a0 <vTask_GSM_service+0x3bc>)
   1768a:	4798      	blx	r3
						}

						if(isGSMModuleAwake)
   1768c:	4b2c      	ldr	r3, [pc, #176]	; (17740 <vTask_GSM_service+0x35c>)
   1768e:	781b      	ldrb	r3, [r3, #0]
   17690:	b2db      	uxtb	r3, r3
   17692:	2b00      	cmp	r3, #0
   17694:	d017      	beq.n	176c6 <vTask_GSM_service+0x2e2>
						{
							////Update network
							if (xTaskGetTickCount() - network_update_time>= (1*60*1000))
   17696:	4b43      	ldr	r3, [pc, #268]	; (177a4 <vTask_GSM_service+0x3c0>)
   17698:	4798      	blx	r3
   1769a:	0002      	movs	r2, r0
   1769c:	2396      	movs	r3, #150	; 0x96
   1769e:	005b      	lsls	r3, r3, #1
   176a0:	18fb      	adds	r3, r7, r3
   176a2:	681b      	ldr	r3, [r3, #0]
   176a4:	1ad3      	subs	r3, r2, r3
   176a6:	4a40      	ldr	r2, [pc, #256]	; (177a8 <vTask_GSM_service+0x3c4>)
   176a8:	4293      	cmp	r3, r2
   176aa:	d90c      	bls.n	176c6 <vTask_GSM_service+0x2e2>
							{
								network_update_time = xTaskGetTickCount();
   176ac:	4b3d      	ldr	r3, [pc, #244]	; (177a4 <vTask_GSM_service+0x3c0>)
   176ae:	4798      	blx	r3
   176b0:	0003      	movs	r3, r0
   176b2:	2296      	movs	r2, #150	; 0x96
   176b4:	0052      	lsls	r2, r2, #1
   176b6:	18ba      	adds	r2, r7, r2
   176b8:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   176ba:	4b35      	ldr	r3, [pc, #212]	; (17790 <vTask_GSM_service+0x3ac>)
   176bc:	4798      	blx	r3
   176be:	0003      	movs	r3, r0
   176c0:	001a      	movs	r2, r3
   176c2:	4b0f      	ldr	r3, [pc, #60]	; (17700 <vTask_GSM_service+0x31c>)
   176c4:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   176c6:	4b39      	ldr	r3, [pc, #228]	; (177ac <vTask_GSM_service+0x3c8>)
   176c8:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   176ca:	4b18      	ldr	r3, [pc, #96]	; (1772c <vTask_GSM_service+0x348>)
   176cc:	781b      	ldrb	r3, [r3, #0]
   176ce:	2b00      	cmp	r3, #0
   176d0:	d104      	bne.n	176dc <vTask_GSM_service+0x2f8>
   176d2:	4b24      	ldr	r3, [pc, #144]	; (17764 <vTask_GSM_service+0x380>)
   176d4:	781b      	ldrb	r3, [r3, #0]
   176d6:	2b00      	cmp	r3, #0
   176d8:	d100      	bne.n	176dc <vTask_GSM_service+0x2f8>
   176da:	e0b4      	b.n	17846 <vTask_GSM_service+0x462>
						{
							operateOnStagedEvent();
   176dc:	4b34      	ldr	r3, [pc, #208]	; (177b0 <vTask_GSM_service+0x3cc>)
   176de:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   176e0:	e0b1      	b.n	17846 <vTask_GSM_service+0x462>
   176e2:	46c0      	nop			; (mov r8, r8)
   176e4:	41004480 	.word	0x41004480
   176e8:	00014125 	.word	0x00014125
   176ec:	00022f71 	.word	0x00022f71
   176f0:	00012145 	.word	0x00012145
   176f4:	20000791 	.word	0x20000791
   176f8:	20000790 	.word	0x20000790
   176fc:	20000773 	.word	0x20000773
   17700:	2000077d 	.word	0x2000077d
   17704:	200007cd 	.word	0x200007cd
   17708:	2000085d 	.word	0x2000085d
   1770c:	20000758 	.word	0x20000758
   17710:	200006d4 	.word	0x200006d4
   17714:	200007d4 	.word	0x200007d4
   17718:	20000783 	.word	0x20000783
   1771c:	20000792 	.word	0x20000792
   17720:	20000738 	.word	0x20000738
   17724:	20000766 	.word	0x20000766
   17728:	2000076b 	.word	0x2000076b
   1772c:	200007ca 	.word	0x200007ca
   17730:	20000769 	.word	0x20000769
   17734:	2000078c 	.word	0x2000078c
   17738:	200006d5 	.word	0x200006d5
   1773c:	2000083c 	.word	0x2000083c
   17740:	20000680 	.word	0x20000680
   17744:	0001418d 	.word	0x0001418d
   17748:	2000022c 	.word	0x2000022c
   1774c:	000122f9 	.word	0x000122f9
   17750:	20000628 	.word	0x20000628
   17754:	20000807 	.word	0x20000807
   17758:	2000071c 	.word	0x2000071c
   1775c:	2000071d 	.word	0x2000071d
   17760:	200007cb 	.word	0x200007cb
   17764:	20000782 	.word	0x20000782
   17768:	20000737 	.word	0x20000737
   1776c:	200007c8 	.word	0x200007c8
   17770:	00014149 	.word	0x00014149
   17774:	41004490 	.word	0x41004490
   17778:	00000bb8 	.word	0x00000bb8
   1777c:	0001fee9 	.word	0x0001fee9
   17780:	fffeffff 	.word	0xfffeffff
   17784:	00001388 	.word	0x00001388
   17788:	000125f5 	.word	0x000125f5
   1778c:	00013311 	.word	0x00013311
   17790:	000128c1 	.word	0x000128c1
   17794:	000126e1 	.word	0x000126e1
   17798:	0001aa59 	.word	0x0001aa59
   1779c:	0001237d 	.word	0x0001237d
   177a0:	0001235d 	.word	0x0001235d
   177a4:	0002024d 	.word	0x0002024d
   177a8:	0000ea5f 	.word	0x0000ea5f
   177ac:	000141e1 	.word	0x000141e1
   177b0:	00014221 	.word	0x00014221
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   177b4:	4bd7      	ldr	r3, [pc, #860]	; (17b14 <vTask_GSM_service+0x730>)
   177b6:	781b      	ldrb	r3, [r3, #0]
   177b8:	b2db      	uxtb	r3, r3
   177ba:	2b49      	cmp	r3, #73	; 0x49
   177bc:	d004      	beq.n	177c8 <vTask_GSM_service+0x3e4>
   177be:	4bd5      	ldr	r3, [pc, #852]	; (17b14 <vTask_GSM_service+0x730>)
   177c0:	781b      	ldrb	r3, [r3, #0]
   177c2:	b2db      	uxtb	r3, r3
   177c4:	2b52      	cmp	r3, #82	; 0x52
   177c6:	d13f      	bne.n	17848 <vTask_GSM_service+0x464>
					{
						if (callTimerExpire())
   177c8:	4bd3      	ldr	r3, [pc, #844]	; (17b18 <vTask_GSM_service+0x734>)
   177ca:	4798      	blx	r3
   177cc:	1e03      	subs	r3, r0, #0
   177ce:	d00e      	beq.n	177ee <vTask_GSM_service+0x40a>
						{
							char t1 = actionType;
   177d0:	2326      	movs	r3, #38	; 0x26
   177d2:	33ff      	adds	r3, #255	; 0xff
   177d4:	18fb      	adds	r3, r7, r3
   177d6:	4ad1      	ldr	r2, [pc, #836]	; (17b1c <vTask_GSM_service+0x738>)
   177d8:	7812      	ldrb	r2, [r2, #0]
   177da:	701a      	strb	r2, [r3, #0]
							endCall();
   177dc:	4bd0      	ldr	r3, [pc, #832]	; (17b20 <vTask_GSM_service+0x73c>)
   177de:	4798      	blx	r3
							checkRespSMS(t1);
   177e0:	2326      	movs	r3, #38	; 0x26
   177e2:	33ff      	adds	r3, #255	; 0xff
   177e4:	18fb      	adds	r3, r7, r3
   177e6:	781b      	ldrb	r3, [r3, #0]
   177e8:	0018      	movs	r0, r3
   177ea:	4bce      	ldr	r3, [pc, #824]	; (17b24 <vTask_GSM_service+0x740>)
   177ec:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   177ee:	4bce      	ldr	r3, [pc, #824]	; (17b28 <vTask_GSM_service+0x744>)
   177f0:	78db      	ldrb	r3, [r3, #3]
   177f2:	2b00      	cmp	r3, #0
   177f4:	d020      	beq.n	17838 <vTask_GSM_service+0x454>
						{
							if(m2mEvent && callAccepted)
   177f6:	4bcd      	ldr	r3, [pc, #820]	; (17b2c <vTask_GSM_service+0x748>)
   177f8:	781b      	ldrb	r3, [r3, #0]
   177fa:	2b00      	cmp	r3, #0
   177fc:	d01c      	beq.n	17838 <vTask_GSM_service+0x454>
   177fe:	4bcc      	ldr	r3, [pc, #816]	; (17b30 <vTask_GSM_service+0x74c>)
   17800:	781b      	ldrb	r3, [r3, #0]
   17802:	2b00      	cmp	r3, #0
   17804:	d018      	beq.n	17838 <vTask_GSM_service+0x454>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   17806:	4bcb      	ldr	r3, [pc, #812]	; (17b34 <vTask_GSM_service+0x750>)
   17808:	781b      	ldrb	r3, [r3, #0]
   1780a:	2201      	movs	r2, #1
   1780c:	4053      	eors	r3, r2
   1780e:	b2db      	uxtb	r3, r3
   17810:	2b00      	cmp	r3, #0
   17812:	d011      	beq.n	17838 <vTask_GSM_service+0x454>
   17814:	4bc8      	ldr	r3, [pc, #800]	; (17b38 <vTask_GSM_service+0x754>)
   17816:	4798      	blx	r3
   17818:	0002      	movs	r2, r0
   1781a:	4bc8      	ldr	r3, [pc, #800]	; (17b3c <vTask_GSM_service+0x758>)
   1781c:	681b      	ldr	r3, [r3, #0]
   1781e:	1ad2      	subs	r2, r2, r3
   17820:	23fa      	movs	r3, #250	; 0xfa
   17822:	00db      	lsls	r3, r3, #3
   17824:	429a      	cmp	r2, r3
   17826:	d907      	bls.n	17838 <vTask_GSM_service+0x454>
								{
									keyPressed=true;
   17828:	4bc2      	ldr	r3, [pc, #776]	; (17b34 <vTask_GSM_service+0x750>)
   1782a:	2201      	movs	r2, #1
   1782c:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   1782e:	4bc4      	ldr	r3, [pc, #784]	; (17b40 <vTask_GSM_service+0x75c>)
   17830:	781b      	ldrb	r3, [r3, #0]
   17832:	0018      	movs	r0, r3
   17834:	4bc3      	ldr	r3, [pc, #780]	; (17b44 <vTask_GSM_service+0x760>)
   17836:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17838:	4bc3      	ldr	r3, [pc, #780]	; (17b48 <vTask_GSM_service+0x764>)
   1783a:	4798      	blx	r3
   1783c:	1e03      	subs	r3, r0, #0
   1783e:	d003      	beq.n	17848 <vTask_GSM_service+0x464>
						{
							triggerPlaySound();
   17840:	4bc2      	ldr	r3, [pc, #776]	; (17b4c <vTask_GSM_service+0x768>)
   17842:	4798      	blx	r3
   17844:	e000      	b.n	17848 <vTask_GSM_service+0x464>
						if (eventStaged || m2mEventStaged)
   17846:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17848:	4bc1      	ldr	r3, [pc, #772]	; (17b50 <vTask_GSM_service+0x76c>)
   1784a:	2298      	movs	r2, #152	; 0x98
   1784c:	0052      	lsls	r2, r2, #1
   1784e:	4694      	mov	ip, r2
   17850:	44bc      	add	ip, r7
   17852:	4463      	add	r3, ip
   17854:	0018      	movs	r0, r3
   17856:	2340      	movs	r3, #64	; 0x40
   17858:	001a      	movs	r2, r3
   1785a:	2100      	movs	r1, #0
   1785c:	4bbd      	ldr	r3, [pc, #756]	; (17b54 <vTask_GSM_service+0x770>)
   1785e:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   17860:	230c      	movs	r3, #12
   17862:	18fb      	adds	r3, r7, r3
   17864:	2140      	movs	r1, #64	; 0x40
   17866:	0018      	movs	r0, r3
   17868:	4bbb      	ldr	r3, [pc, #748]	; (17b58 <vTask_GSM_service+0x774>)
   1786a:	4798      	blx	r3
   1786c:	1e03      	subs	r3, r0, #0
   1786e:	d100      	bne.n	17872 <vTask_GSM_service+0x48e>
   17870:	e674      	b.n	1755c <vTask_GSM_service+0x178>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   17872:	2392      	movs	r3, #146	; 0x92
   17874:	005b      	lsls	r3, r3, #1
   17876:	18fc      	adds	r4, r7, r3
   17878:	230c      	movs	r3, #12
   1787a:	18fb      	adds	r3, r7, r3
   1787c:	0018      	movs	r0, r3
   1787e:	4bb7      	ldr	r3, [pc, #732]	; (17b5c <vTask_GSM_service+0x778>)
   17880:	4798      	blx	r3
   17882:	0003      	movs	r3, r0
   17884:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   17886:	2392      	movs	r3, #146	; 0x92
   17888:	005b      	lsls	r3, r3, #1
   1788a:	18fb      	adds	r3, r7, r3
   1788c:	781b      	ldrb	r3, [r3, #0]
   1788e:	2b00      	cmp	r3, #0
   17890:	d100      	bne.n	17894 <vTask_GSM_service+0x4b0>
   17892:	e0d5      	b.n	17a40 <vTask_GSM_service+0x65c>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   17894:	234c      	movs	r3, #76	; 0x4c
   17896:	18fa      	adds	r2, r7, r3
   17898:	1c79      	adds	r1, r7, #1
   1789a:	31ff      	adds	r1, #255	; 0xff
   1789c:	2392      	movs	r3, #146	; 0x92
   1789e:	005b      	lsls	r3, r3, #1
   178a0:	18fb      	adds	r3, r7, r3
   178a2:	7818      	ldrb	r0, [r3, #0]
   178a4:	23a0      	movs	r3, #160	; 0xa0
   178a6:	9300      	str	r3, [sp, #0]
   178a8:	0013      	movs	r3, r2
   178aa:	220f      	movs	r2, #15
   178ac:	4cac      	ldr	r4, [pc, #688]	; (17b60 <vTask_GSM_service+0x77c>)
   178ae:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   178b0:	2324      	movs	r3, #36	; 0x24
   178b2:	33ff      	adds	r3, #255	; 0xff
   178b4:	18fc      	adds	r4, r7, r3
   178b6:	1c7b      	adds	r3, r7, #1
   178b8:	33ff      	adds	r3, #255	; 0xff
   178ba:	0018      	movs	r0, r3
   178bc:	4ba9      	ldr	r3, [pc, #676]	; (17b64 <vTask_GSM_service+0x780>)
   178be:	4798      	blx	r3
   178c0:	0003      	movs	r3, r0
   178c2:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   178c4:	2391      	movs	r3, #145	; 0x91
   178c6:	005b      	lsls	r3, r3, #1
   178c8:	18fc      	adds	r4, r7, r3
   178ca:	1c7b      	adds	r3, r7, #1
   178cc:	33ff      	adds	r3, #255	; 0xff
   178ce:	0018      	movs	r0, r3
   178d0:	4ba5      	ldr	r3, [pc, #660]	; (17b68 <vTask_GSM_service+0x784>)
   178d2:	4798      	blx	r3
   178d4:	0003      	movs	r3, r0
   178d6:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   178d8:	2322      	movs	r3, #34	; 0x22
   178da:	33ff      	adds	r3, #255	; 0xff
   178dc:	18fc      	adds	r4, r7, r3
   178de:	1c7b      	adds	r3, r7, #1
   178e0:	33ff      	adds	r3, #255	; 0xff
   178e2:	0018      	movs	r0, r3
   178e4:	4ba1      	ldr	r3, [pc, #644]	; (17b6c <vTask_GSM_service+0x788>)
   178e6:	4798      	blx	r3
   178e8:	0003      	movs	r3, r0
   178ea:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   178ec:	2394      	movs	r3, #148	; 0x94
   178ee:	005b      	lsls	r3, r3, #1
   178f0:	18fb      	adds	r3, r7, r3
   178f2:	2201      	movs	r2, #1
   178f4:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   178f6:	4b9e      	ldr	r3, [pc, #632]	; (17b70 <vTask_GSM_service+0x78c>)
   178f8:	2200      	movs	r2, #0
   178fa:	0019      	movs	r1, r3
   178fc:	2004      	movs	r0, #4
   178fe:	4b9d      	ldr	r3, [pc, #628]	; (17b74 <vTask_GSM_service+0x790>)
   17900:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
   17902:	234c      	movs	r3, #76	; 0x4c
   17904:	18fb      	adds	r3, r7, r3
   17906:	0018      	movs	r0, r3
   17908:	4b9b      	ldr	r3, [pc, #620]	; (17b78 <vTask_GSM_service+0x794>)
   1790a:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+7,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
   1790c:	2324      	movs	r3, #36	; 0x24
   1790e:	33ff      	adds	r3, #255	; 0xff
   17910:	18fb      	adds	r3, r7, r3
   17912:	781b      	ldrb	r3, [r3, #0]
   17914:	2b00      	cmp	r3, #0
   17916:	d10b      	bne.n	17930 <vTask_GSM_service+0x54c>
   17918:	2391      	movs	r3, #145	; 0x91
   1791a:	005b      	lsls	r3, r3, #1
   1791c:	18fb      	adds	r3, r7, r3
   1791e:	781b      	ldrb	r3, [r3, #0]
   17920:	2b00      	cmp	r3, #0
   17922:	d105      	bne.n	17930 <vTask_GSM_service+0x54c>
   17924:	2322      	movs	r3, #34	; 0x22
   17926:	33ff      	adds	r3, #255	; 0xff
   17928:	18fb      	adds	r3, r7, r3
   1792a:	781b      	ldrb	r3, [r3, #0]
   1792c:	2b00      	cmp	r3, #0
   1792e:	d031      	beq.n	17994 <vTask_GSM_service+0x5b0>
							{
								if(StringstartsWith(Received_SMS,"#"))
   17930:	4a92      	ldr	r2, [pc, #584]	; (17b7c <vTask_GSM_service+0x798>)
   17932:	234c      	movs	r3, #76	; 0x4c
   17934:	18fb      	adds	r3, r7, r3
   17936:	0011      	movs	r1, r2
   17938:	0018      	movs	r0, r3
   1793a:	4b91      	ldr	r3, [pc, #580]	; (17b80 <vTask_GSM_service+0x79c>)
   1793c:	4798      	blx	r3
   1793e:	1e03      	subs	r3, r0, #0
   17940:	d013      	beq.n	1796a <vTask_GSM_service+0x586>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   17942:	234c      	movs	r3, #76	; 0x4c
   17944:	18fc      	adds	r4, r7, r3
   17946:	3401      	adds	r4, #1
   17948:	234c      	movs	r3, #76	; 0x4c
   1794a:	18fb      	adds	r3, r7, r3
   1794c:	0018      	movs	r0, r3
   1794e:	4b8d      	ldr	r3, [pc, #564]	; (17b84 <vTask_GSM_service+0x7a0>)
   17950:	4798      	blx	r3
   17952:	0002      	movs	r2, r0
   17954:	234c      	movs	r3, #76	; 0x4c
   17956:	18fb      	adds	r3, r7, r3
   17958:	0021      	movs	r1, r4
   1795a:	0018      	movs	r0, r3
   1795c:	4b8a      	ldr	r3, [pc, #552]	; (17b88 <vTask_GSM_service+0x7a4>)
   1795e:	4798      	blx	r3
									response_sms_processed_cmd=false;
   17960:	2394      	movs	r3, #148	; 0x94
   17962:	005b      	lsls	r3, r3, #1
   17964:	18fb      	adds	r3, r7, r3
   17966:	2200      	movs	r2, #0
   17968:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   1796a:	2322      	movs	r3, #34	; 0x22
   1796c:	33ff      	adds	r3, #255	; 0xff
   1796e:	18fb      	adds	r3, r7, r3
   17970:	781c      	ldrb	r4, [r3, #0]
   17972:	2394      	movs	r3, #148	; 0x94
   17974:	005b      	lsls	r3, r3, #1
   17976:	18fb      	adds	r3, r7, r3
   17978:	781a      	ldrb	r2, [r3, #0]
   1797a:	2324      	movs	r3, #36	; 0x24
   1797c:	33ff      	adds	r3, #255	; 0xff
   1797e:	18fb      	adds	r3, r7, r3
   17980:	7819      	ldrb	r1, [r3, #0]
   17982:	234c      	movs	r3, #76	; 0x4c
   17984:	18f8      	adds	r0, r7, r3
   17986:	1c7b      	adds	r3, r7, #1
   17988:	33ff      	adds	r3, #255	; 0xff
   1798a:	9300      	str	r3, [sp, #0]
   1798c:	0023      	movs	r3, r4
   1798e:	4c7f      	ldr	r4, [pc, #508]	; (17b8c <vTask_GSM_service+0x7a8>)
   17990:	47a0      	blx	r4
   17992:	e053      	b.n	17a3c <vTask_GSM_service+0x658>
							}
							else if(isM2MNumber(phone_number))
   17994:	1c7b      	adds	r3, r7, #1
   17996:	33ff      	adds	r3, #255	; 0xff
   17998:	0018      	movs	r0, r3
   1799a:	4b7d      	ldr	r3, [pc, #500]	; (17b90 <vTask_GSM_service+0x7ac>)
   1799c:	4798      	blx	r3
   1799e:	1e03      	subs	r3, r0, #0
   179a0:	d01f      	beq.n	179e2 <vTask_GSM_service+0x5fe>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   179a2:	4a7c      	ldr	r2, [pc, #496]	; (17b94 <vTask_GSM_service+0x7b0>)
   179a4:	234c      	movs	r3, #76	; 0x4c
   179a6:	18fb      	adds	r3, r7, r3
   179a8:	0011      	movs	r1, r2
   179aa:	0018      	movs	r0, r3
   179ac:	4b74      	ldr	r3, [pc, #464]	; (17b80 <vTask_GSM_service+0x79c>)
   179ae:	4798      	blx	r3
   179b0:	1e03      	subs	r3, r0, #0
   179b2:	d043      	beq.n	17a3c <vTask_GSM_service+0x658>
								{
									setM2MVerify(true);
   179b4:	2001      	movs	r0, #1
   179b6:	4b78      	ldr	r3, [pc, #480]	; (17b98 <vTask_GSM_service+0x7b4>)
   179b8:	4798      	blx	r3
									getM2MNumber(phone_number);
   179ba:	1c7b      	adds	r3, r7, #1
   179bc:	33ff      	adds	r3, #255	; 0xff
   179be:	0018      	movs	r0, r3
   179c0:	4b76      	ldr	r3, [pc, #472]	; (17b9c <vTask_GSM_service+0x7b8>)
   179c2:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   179c4:	1c7b      	adds	r3, r7, #1
   179c6:	33ff      	adds	r3, #255	; 0xff
   179c8:	2200      	movs	r2, #0
   179ca:	0019      	movs	r1, r3
   179cc:	2005      	movs	r0, #5
   179ce:	4b69      	ldr	r3, [pc, #420]	; (17b74 <vTask_GSM_service+0x790>)
   179d0:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   179d2:	4a73      	ldr	r2, [pc, #460]	; (17ba0 <vTask_GSM_service+0x7bc>)
   179d4:	1c7b      	adds	r3, r7, #1
   179d6:	33ff      	adds	r3, #255	; 0xff
   179d8:	0011      	movs	r1, r2
   179da:	0018      	movs	r0, r3
   179dc:	4b71      	ldr	r3, [pc, #452]	; (17ba4 <vTask_GSM_service+0x7c0>)
   179de:	4798      	blx	r3
   179e0:	e02c      	b.n	17a3c <vTask_GSM_service+0x658>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   179e2:	4b51      	ldr	r3, [pc, #324]	; (17b28 <vTask_GSM_service+0x744>)
   179e4:	78db      	ldrb	r3, [r3, #3]
   179e6:	2b00      	cmp	r3, #0
   179e8:	d028      	beq.n	17a3c <vTask_GSM_service+0x658>
   179ea:	1c7b      	adds	r3, r7, #1
   179ec:	33ff      	adds	r3, #255	; 0xff
   179ee:	0018      	movs	r0, r3
   179f0:	4b6d      	ldr	r3, [pc, #436]	; (17ba8 <vTask_GSM_service+0x7c4>)
   179f2:	4798      	blx	r3
   179f4:	1e03      	subs	r3, r0, #0
   179f6:	d021      	beq.n	17a3c <vTask_GSM_service+0x658>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   179f8:	4a69      	ldr	r2, [pc, #420]	; (17ba0 <vTask_GSM_service+0x7bc>)
   179fa:	234c      	movs	r3, #76	; 0x4c
   179fc:	18fb      	adds	r3, r7, r3
   179fe:	0011      	movs	r1, r2
   17a00:	0018      	movs	r0, r3
   17a02:	4b5f      	ldr	r3, [pc, #380]	; (17b80 <vTask_GSM_service+0x79c>)
   17a04:	4798      	blx	r3
   17a06:	1e03      	subs	r3, r0, #0
   17a08:	d018      	beq.n	17a3c <vTask_GSM_service+0x658>
								{
									setM2MRemoteVerified(true);
   17a0a:	2001      	movs	r0, #1
   17a0c:	4b67      	ldr	r3, [pc, #412]	; (17bac <vTask_GSM_service+0x7c8>)
   17a0e:	4798      	blx	r3
									saveM2MSettings(true);
   17a10:	2001      	movs	r0, #1
   17a12:	4b67      	ldr	r3, [pc, #412]	; (17bb0 <vTask_GSM_service+0x7cc>)
   17a14:	4798      	blx	r3
									getActiveNumber(phone_number);
   17a16:	1c7b      	adds	r3, r7, #1
   17a18:	33ff      	adds	r3, #255	; 0xff
   17a1a:	0018      	movs	r0, r3
   17a1c:	4b65      	ldr	r3, [pc, #404]	; (17bb4 <vTask_GSM_service+0x7d0>)
   17a1e:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17a20:	1c7b      	adds	r3, r7, #1
   17a22:	33ff      	adds	r3, #255	; 0xff
   17a24:	2200      	movs	r2, #0
   17a26:	0019      	movs	r1, r3
   17a28:	2005      	movs	r0, #5
   17a2a:	4b52      	ldr	r3, [pc, #328]	; (17b74 <vTask_GSM_service+0x790>)
   17a2c:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17a2e:	4a62      	ldr	r2, [pc, #392]	; (17bb8 <vTask_GSM_service+0x7d4>)
   17a30:	1c7b      	adds	r3, r7, #1
   17a32:	33ff      	adds	r3, #255	; 0xff
   17a34:	0011      	movs	r1, r2
   17a36:	0018      	movs	r0, r3
   17a38:	4b5a      	ldr	r3, [pc, #360]	; (17ba4 <vTask_GSM_service+0x7c0>)
   17a3a:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   17a3c:	4b5f      	ldr	r3, [pc, #380]	; (17bbc <vTask_GSM_service+0x7d8>)
   17a3e:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   17a40:	4b5f      	ldr	r3, [pc, #380]	; (17bc0 <vTask_GSM_service+0x7dc>)
   17a42:	781b      	ldrb	r3, [r3, #0]
   17a44:	2201      	movs	r2, #1
   17a46:	4053      	eors	r3, r2
   17a48:	b2db      	uxtb	r3, r3
   17a4a:	2b00      	cmp	r3, #0
   17a4c:	d100      	bne.n	17a50 <vTask_GSM_service+0x66c>
   17a4e:	e0fe      	b.n	17c4e <vTask_GSM_service+0x86a>
   17a50:	4b30      	ldr	r3, [pc, #192]	; (17b14 <vTask_GSM_service+0x730>)
   17a52:	781b      	ldrb	r3, [r3, #0]
   17a54:	b2db      	uxtb	r3, r3
   17a56:	2b4e      	cmp	r3, #78	; 0x4e
   17a58:	d005      	beq.n	17a66 <vTask_GSM_service+0x682>
   17a5a:	4b2e      	ldr	r3, [pc, #184]	; (17b14 <vTask_GSM_service+0x730>)
   17a5c:	781b      	ldrb	r3, [r3, #0]
   17a5e:	b2db      	uxtb	r3, r3
   17a60:	2b52      	cmp	r3, #82	; 0x52
   17a62:	d000      	beq.n	17a66 <vTask_GSM_service+0x682>
   17a64:	e0f3      	b.n	17c4e <vTask_GSM_service+0x86a>
   17a66:	4b57      	ldr	r3, [pc, #348]	; (17bc4 <vTask_GSM_service+0x7e0>)
   17a68:	781b      	ldrb	r3, [r3, #0]
   17a6a:	b2db      	uxtb	r3, r3
   17a6c:	2b4e      	cmp	r3, #78	; 0x4e
   17a6e:	d005      	beq.n	17a7c <vTask_GSM_service+0x698>
   17a70:	4b54      	ldr	r3, [pc, #336]	; (17bc4 <vTask_GSM_service+0x7e0>)
   17a72:	781b      	ldrb	r3, [r3, #0]
   17a74:	b2db      	uxtb	r3, r3
   17a76:	2b49      	cmp	r3, #73	; 0x49
   17a78:	d000      	beq.n	17a7c <vTask_GSM_service+0x698>
   17a7a:	e0e8      	b.n	17c4e <vTask_GSM_service+0x86a>
						{
							if (gsm_responseLine_isRinging(response))
   17a7c:	230c      	movs	r3, #12
   17a7e:	18fb      	adds	r3, r7, r3
   17a80:	0018      	movs	r0, r3
   17a82:	4b51      	ldr	r3, [pc, #324]	; (17bc8 <vTask_GSM_service+0x7e4>)
   17a84:	4798      	blx	r3
   17a86:	1e03      	subs	r3, r0, #0
   17a88:	d100      	bne.n	17a8c <vTask_GSM_service+0x6a8>
   17a8a:	e0d5      	b.n	17c38 <vTask_GSM_service+0x854>
							{
								currentStatus = 'R';
   17a8c:	4b21      	ldr	r3, [pc, #132]	; (17b14 <vTask_GSM_service+0x730>)
   17a8e:	2252      	movs	r2, #82	; 0x52
   17a90:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   17a92:	4b4c      	ldr	r3, [pc, #304]	; (17bc4 <vTask_GSM_service+0x7e0>)
   17a94:	2249      	movs	r2, #73	; 0x49
   17a96:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   17a98:	23ec      	movs	r3, #236	; 0xec
   17a9a:	18fb      	adds	r3, r7, r3
   17a9c:	0018      	movs	r0, r3
   17a9e:	2314      	movs	r3, #20
   17aa0:	001a      	movs	r2, r3
   17aa2:	2100      	movs	r1, #0
   17aa4:	4b2b      	ldr	r3, [pc, #172]	; (17b54 <vTask_GSM_service+0x770>)
   17aa6:	4798      	blx	r3
								inCall = true;
   17aa8:	4b48      	ldr	r3, [pc, #288]	; (17bcc <vTask_GSM_service+0x7e8>)
   17aaa:	2201      	movs	r2, #1
   17aac:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   17aae:	2328      	movs	r3, #40	; 0x28
   17ab0:	33ff      	adds	r3, #255	; 0xff
   17ab2:	18fb      	adds	r3, r7, r3
   17ab4:	2200      	movs	r2, #0
   17ab6:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   17ab8:	2393      	movs	r3, #147	; 0x93
   17aba:	005b      	lsls	r3, r3, #1
   17abc:	18fb      	adds	r3, r7, r3
   17abe:	2200      	movs	r2, #0
   17ac0:	701a      	strb	r2, [r3, #0]
   17ac2:	e092      	b.n	17bea <vTask_GSM_service+0x806>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   17ac4:	23fa      	movs	r3, #250	; 0xfa
   17ac6:	005b      	lsls	r3, r3, #1
   17ac8:	0018      	movs	r0, r3
   17aca:	4b41      	ldr	r3, [pc, #260]	; (17bd0 <vTask_GSM_service+0x7ec>)
   17acc:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   17ace:	230c      	movs	r3, #12
   17ad0:	18fb      	adds	r3, r7, r3
   17ad2:	2140      	movs	r1, #64	; 0x40
   17ad4:	0018      	movs	r0, r3
   17ad6:	4b20      	ldr	r3, [pc, #128]	; (17b58 <vTask_GSM_service+0x774>)
   17ad8:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   17ada:	23ec      	movs	r3, #236	; 0xec
   17adc:	18fa      	adds	r2, r7, r3
   17ade:	230c      	movs	r3, #12
   17ae0:	18fb      	adds	r3, r7, r3
   17ae2:	0011      	movs	r1, r2
   17ae4:	0018      	movs	r0, r3
   17ae6:	4b3b      	ldr	r3, [pc, #236]	; (17bd4 <vTask_GSM_service+0x7f0>)
   17ae8:	4798      	blx	r3
   17aea:	1e03      	subs	r3, r0, #0
   17aec:	d074      	beq.n	17bd8 <vTask_GSM_service+0x7f4>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   17aee:	23ec      	movs	r3, #236	; 0xec
   17af0:	18fb      	adds	r3, r7, r3
   17af2:	2200      	movs	r2, #0
   17af4:	0019      	movs	r1, r3
   17af6:	2001      	movs	r0, #1
   17af8:	4b1e      	ldr	r3, [pc, #120]	; (17b74 <vTask_GSM_service+0x790>)
   17afa:	4798      	blx	r3
										new_call = true;
   17afc:	2328      	movs	r3, #40	; 0x28
   17afe:	33ff      	adds	r3, #255	; 0xff
   17b00:	18fb      	adds	r3, r7, r3
   17b02:	2201      	movs	r2, #1
   17b04:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   17b06:	4b0c      	ldr	r3, [pc, #48]	; (17b38 <vTask_GSM_service+0x754>)
   17b08:	4798      	blx	r3
   17b0a:	0002      	movs	r2, r0
   17b0c:	4b0b      	ldr	r3, [pc, #44]	; (17b3c <vTask_GSM_service+0x758>)
   17b0e:	601a      	str	r2, [r3, #0]
										break;
   17b10:	e072      	b.n	17bf8 <vTask_GSM_service+0x814>
   17b12:	46c0      	nop			; (mov r8, r8)
   17b14:	200007d4 	.word	0x200007d4
   17b18:	00014881 	.word	0x00014881
   17b1c:	20000757 	.word	0x20000757
   17b20:	00014329 	.word	0x00014329
   17b24:	00014b3d 	.word	0x00014b3d
   17b28:	20000628 	.word	0x20000628
   17b2c:	20000737 	.word	0x20000737
   17b30:	20000792 	.word	0x20000792
   17b34:	200007c8 	.word	0x200007c8
   17b38:	0002024d 	.word	0x0002024d
   17b3c:	20000810 	.word	0x20000810
   17b40:	2000071d 	.word	0x2000071d
   17b44:	00017351 	.word	0x00017351
   17b48:	000146e9 	.word	0x000146e9
   17b4c:	00014735 	.word	0x00014735
   17b50:	fffffedc 	.word	0xfffffedc
   17b54:	00028e13 	.word	0x00028e13
   17b58:	00013429 	.word	0x00013429
   17b5c:	000134b9 	.word	0x000134b9
   17b60:	00012c35 	.word	0x00012c35
   17b64:	00011a61 	.word	0x00011a61
   17b68:	00010991 	.word	0x00010991
   17b6c:	00010a01 	.word	0x00010a01
   17b70:	0002a630 	.word	0x0002a630
   17b74:	0001cb31 	.word	0x0001cb31
   17b78:	00013fad 	.word	0x00013fad
   17b7c:	0002a638 	.word	0x0002a638
   17b80:	00014019 	.word	0x00014019
   17b84:	000290a3 	.word	0x000290a3
   17b88:	00028def 	.word	0x00028def
   17b8c:	00014db9 	.word	0x00014db9
   17b90:	00010a49 	.word	0x00010a49
   17b94:	0002a61c 	.word	0x0002a61c
   17b98:	00010b39 	.word	0x00010b39
   17b9c:	00010ac1 	.word	0x00010ac1
   17ba0:	0002a63c 	.word	0x0002a63c
   17ba4:	00012b09 	.word	0x00012b09
   17ba8:	00010a85 	.word	0x00010a85
   17bac:	00010b89 	.word	0x00010b89
   17bb0:	00010bd9 	.word	0x00010bd9
   17bb4:	00010d15 	.word	0x00010d15
   17bb8:	0002a644 	.word	0x0002a644
   17bbc:	000126e1 	.word	0x000126e1
   17bc0:	20000738 	.word	0x20000738
   17bc4:	20000783 	.word	0x20000783
   17bc8:	00013541 	.word	0x00013541
   17bcc:	20000790 	.word	0x20000790
   17bd0:	0001fee9 	.word	0x0001fee9
   17bd4:	00013571 	.word	0x00013571
								for (uint8_t i=0;i<4;i++)
   17bd8:	2393      	movs	r3, #147	; 0x93
   17bda:	005b      	lsls	r3, r3, #1
   17bdc:	18fb      	adds	r3, r7, r3
   17bde:	781a      	ldrb	r2, [r3, #0]
   17be0:	2393      	movs	r3, #147	; 0x93
   17be2:	005b      	lsls	r3, r3, #1
   17be4:	18fb      	adds	r3, r7, r3
   17be6:	3201      	adds	r2, #1
   17be8:	701a      	strb	r2, [r3, #0]
   17bea:	2393      	movs	r3, #147	; 0x93
   17bec:	005b      	lsls	r3, r3, #1
   17bee:	18fb      	adds	r3, r7, r3
   17bf0:	781b      	ldrb	r3, [r3, #0]
   17bf2:	2b03      	cmp	r3, #3
   17bf4:	d800      	bhi.n	17bf8 <vTask_GSM_service+0x814>
   17bf6:	e765      	b.n	17ac4 <vTask_GSM_service+0x6e0>
									}
								}
								if (new_call)
   17bf8:	2328      	movs	r3, #40	; 0x28
   17bfa:	33ff      	adds	r3, #255	; 0xff
   17bfc:	18fb      	adds	r3, r7, r3
   17bfe:	781b      	ldrb	r3, [r3, #0]
   17c00:	2b00      	cmp	r3, #0
   17c02:	d100      	bne.n	17c06 <vTask_GSM_service+0x822>
   17c04:	e153      	b.n	17eae <vTask_GSM_service+0xaca>
								{
									new_call = false;
   17c06:	2328      	movs	r3, #40	; 0x28
   17c08:	33ff      	adds	r3, #255	; 0xff
   17c0a:	18fb      	adds	r3, r7, r3
   17c0c:	2200      	movs	r2, #0
   17c0e:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   17c10:	23ec      	movs	r3, #236	; 0xec
   17c12:	18fb      	adds	r3, r7, r3
   17c14:	0018      	movs	r0, r3
   17c16:	4ba9      	ldr	r3, [pc, #676]	; (17ebc <vTask_GSM_service+0xad8>)
   17c18:	4798      	blx	r3
   17c1a:	1e03      	subs	r3, r0, #0
   17c1c:	d009      	beq.n	17c32 <vTask_GSM_service+0x84e>
									{
										acceptCall();
   17c1e:	4ba8      	ldr	r3, [pc, #672]	; (17ec0 <vTask_GSM_service+0xadc>)
   17c20:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   17c22:	23ec      	movs	r3, #236	; 0xec
   17c24:	18fb      	adds	r3, r7, r3
   17c26:	2200      	movs	r2, #0
   17c28:	0019      	movs	r1, r3
   17c2a:	2002      	movs	r0, #2
   17c2c:	4ba5      	ldr	r3, [pc, #660]	; (17ec4 <vTask_GSM_service+0xae0>)
   17c2e:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17c30:	e13d      	b.n	17eae <vTask_GSM_service+0xaca>
									}
									else
									{
										endCall();
   17c32:	4ba5      	ldr	r3, [pc, #660]	; (17ec8 <vTask_GSM_service+0xae4>)
   17c34:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17c36:	e13a      	b.n	17eae <vTask_GSM_service+0xaca>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   17c38:	230c      	movs	r3, #12
   17c3a:	18fb      	adds	r3, r7, r3
   17c3c:	0018      	movs	r0, r3
   17c3e:	4ba3      	ldr	r3, [pc, #652]	; (17ecc <vTask_GSM_service+0xae8>)
   17c40:	4798      	blx	r3
   17c42:	1e03      	subs	r3, r0, #0
   17c44:	d100      	bne.n	17c48 <vTask_GSM_service+0x864>
   17c46:	e132      	b.n	17eae <vTask_GSM_service+0xaca>
							{
								endCall();
   17c48:	4b9f      	ldr	r3, [pc, #636]	; (17ec8 <vTask_GSM_service+0xae4>)
   17c4a:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17c4c:	e12f      	b.n	17eae <vTask_GSM_service+0xaca>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   17c4e:	4ba0      	ldr	r3, [pc, #640]	; (17ed0 <vTask_GSM_service+0xaec>)
   17c50:	781b      	ldrb	r3, [r3, #0]
   17c52:	2201      	movs	r2, #1
   17c54:	4053      	eors	r3, r2
   17c56:	b2db      	uxtb	r3, r3
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d045      	beq.n	17ce8 <vTask_GSM_service+0x904>
   17c5c:	4b9d      	ldr	r3, [pc, #628]	; (17ed4 <vTask_GSM_service+0xaf0>)
   17c5e:	781b      	ldrb	r3, [r3, #0]
   17c60:	b2db      	uxtb	r3, r3
   17c62:	2b49      	cmp	r3, #73	; 0x49
   17c64:	d140      	bne.n	17ce8 <vTask_GSM_service+0x904>
   17c66:	4b9c      	ldr	r3, [pc, #624]	; (17ed8 <vTask_GSM_service+0xaf4>)
   17c68:	781b      	ldrb	r3, [r3, #0]
   17c6a:	b2db      	uxtb	r3, r3
   17c6c:	2b49      	cmp	r3, #73	; 0x49
   17c6e:	d13b      	bne.n	17ce8 <vTask_GSM_service+0x904>
						{
							if (gsm_responseLine_isCallCut(response))
   17c70:	230c      	movs	r3, #12
   17c72:	18fb      	adds	r3, r7, r3
   17c74:	0018      	movs	r0, r3
   17c76:	4b95      	ldr	r3, [pc, #596]	; (17ecc <vTask_GSM_service+0xae8>)
   17c78:	4798      	blx	r3
   17c7a:	1e03      	subs	r3, r0, #0
   17c7c:	d002      	beq.n	17c84 <vTask_GSM_service+0x8a0>
							{
								endCall();
   17c7e:	4b92      	ldr	r3, [pc, #584]	; (17ec8 <vTask_GSM_service+0xae4>)
   17c80:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17c82:	e118      	b.n	17eb6 <vTask_GSM_service+0xad2>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   17c84:	230c      	movs	r3, #12
   17c86:	18fb      	adds	r3, r7, r3
   17c88:	0018      	movs	r0, r3
   17c8a:	4b94      	ldr	r3, [pc, #592]	; (17edc <vTask_GSM_service+0xaf8>)
   17c8c:	4798      	blx	r3
   17c8e:	1e03      	subs	r3, r0, #0
   17c90:	d024      	beq.n	17cdc <vTask_GSM_service+0x8f8>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17c92:	4a93      	ldr	r2, [pc, #588]	; (17ee0 <vTask_GSM_service+0xafc>)
   17c94:	230c      	movs	r3, #12
   17c96:	18fb      	adds	r3, r7, r3
   17c98:	0011      	movs	r1, r2
   17c9a:	0018      	movs	r0, r3
   17c9c:	4b91      	ldr	r3, [pc, #580]	; (17ee4 <vTask_GSM_service+0xb00>)
   17c9e:	4798      	blx	r3
   17ca0:	0003      	movs	r3, r0
   17ca2:	228e      	movs	r2, #142	; 0x8e
   17ca4:	0052      	lsls	r2, r2, #1
   17ca6:	18ba      	adds	r2, r7, r2
   17ca8:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   17caa:	4b8d      	ldr	r3, [pc, #564]	; (17ee0 <vTask_GSM_service+0xafc>)
   17cac:	0019      	movs	r1, r3
   17cae:	2000      	movs	r0, #0
   17cb0:	4b8c      	ldr	r3, [pc, #560]	; (17ee4 <vTask_GSM_service+0xb00>)
   17cb2:	4798      	blx	r3
   17cb4:	0003      	movs	r3, r0
   17cb6:	228e      	movs	r2, #142	; 0x8e
   17cb8:	0052      	lsls	r2, r2, #1
   17cba:	18ba      	adds	r2, r7, r2
   17cbc:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   17cbe:	238e      	movs	r3, #142	; 0x8e
   17cc0:	005b      	lsls	r3, r3, #1
   17cc2:	18fb      	adds	r3, r7, r3
   17cc4:	681b      	ldr	r3, [r3, #0]
   17cc6:	0018      	movs	r0, r3
   17cc8:	4b87      	ldr	r3, [pc, #540]	; (17ee8 <vTask_GSM_service+0xb04>)
   17cca:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   17ccc:	238e      	movs	r3, #142	; 0x8e
   17cce:	005b      	lsls	r3, r3, #1
   17cd0:	18fb      	adds	r3, r7, r3
   17cd2:	681b      	ldr	r3, [r3, #0]
   17cd4:	0018      	movs	r0, r3
   17cd6:	4b85      	ldr	r3, [pc, #532]	; (17eec <vTask_GSM_service+0xb08>)
   17cd8:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17cda:	e0ec      	b.n	17eb6 <vTask_GSM_service+0xad2>
							}
							else
							{
								playSoundAgain(response);
   17cdc:	230c      	movs	r3, #12
   17cde:	18fb      	adds	r3, r7, r3
   17ce0:	0018      	movs	r0, r3
   17ce2:	4b83      	ldr	r3, [pc, #524]	; (17ef0 <vTask_GSM_service+0xb0c>)
   17ce4:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17ce6:	e0e6      	b.n	17eb6 <vTask_GSM_service+0xad2>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   17ce8:	4b7a      	ldr	r3, [pc, #488]	; (17ed4 <vTask_GSM_service+0xaf0>)
   17cea:	781b      	ldrb	r3, [r3, #0]
   17cec:	b2db      	uxtb	r3, r3
   17cee:	2b4e      	cmp	r3, #78	; 0x4e
   17cf0:	d004      	beq.n	17cfc <vTask_GSM_service+0x918>
   17cf2:	4b78      	ldr	r3, [pc, #480]	; (17ed4 <vTask_GSM_service+0xaf0>)
   17cf4:	781b      	ldrb	r3, [r3, #0]
   17cf6:	b2db      	uxtb	r3, r3
   17cf8:	2b52      	cmp	r3, #82	; 0x52
   17cfa:	d163      	bne.n	17dc4 <vTask_GSM_service+0x9e0>
   17cfc:	4b76      	ldr	r3, [pc, #472]	; (17ed8 <vTask_GSM_service+0xaf4>)
   17cfe:	781b      	ldrb	r3, [r3, #0]
   17d00:	b2db      	uxtb	r3, r3
   17d02:	2b4f      	cmp	r3, #79	; 0x4f
   17d04:	d15e      	bne.n	17dc4 <vTask_GSM_service+0x9e0>
						{
							if (OutGoingcallState(response) == 'R')
   17d06:	230c      	movs	r3, #12
   17d08:	18fb      	adds	r3, r7, r3
   17d0a:	0018      	movs	r0, r3
   17d0c:	4b79      	ldr	r3, [pc, #484]	; (17ef4 <vTask_GSM_service+0xb10>)
   17d0e:	4798      	blx	r3
   17d10:	0003      	movs	r3, r0
   17d12:	2b52      	cmp	r3, #82	; 0x52
   17d14:	d10b      	bne.n	17d2e <vTask_GSM_service+0x94a>
							{
								callCutWait = xTaskGetTickCount();
   17d16:	4b78      	ldr	r3, [pc, #480]	; (17ef8 <vTask_GSM_service+0xb14>)
   17d18:	4798      	blx	r3
   17d1a:	0002      	movs	r2, r0
   17d1c:	4b77      	ldr	r3, [pc, #476]	; (17efc <vTask_GSM_service+0xb18>)
   17d1e:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   17d20:	4b6c      	ldr	r3, [pc, #432]	; (17ed4 <vTask_GSM_service+0xaf0>)
   17d22:	2252      	movs	r2, #82	; 0x52
   17d24:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17d26:	4b6c      	ldr	r3, [pc, #432]	; (17ed8 <vTask_GSM_service+0xaf4>)
   17d28:	224f      	movs	r2, #79	; 0x4f
   17d2a:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   17d2c:	e0c2      	b.n	17eb4 <vTask_GSM_service+0xad0>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   17d2e:	230c      	movs	r3, #12
   17d30:	18fb      	adds	r3, r7, r3
   17d32:	0018      	movs	r0, r3
   17d34:	4b65      	ldr	r3, [pc, #404]	; (17ecc <vTask_GSM_service+0xae8>)
   17d36:	4798      	blx	r3
   17d38:	1e03      	subs	r3, r0, #0
   17d3a:	d107      	bne.n	17d4c <vTask_GSM_service+0x968>
   17d3c:	230c      	movs	r3, #12
   17d3e:	18fb      	adds	r3, r7, r3
   17d40:	0018      	movs	r0, r3
   17d42:	4b6c      	ldr	r3, [pc, #432]	; (17ef4 <vTask_GSM_service+0xb10>)
   17d44:	4798      	blx	r3
   17d46:	0003      	movs	r3, r0
   17d48:	2b45      	cmp	r3, #69	; 0x45
   17d4a:	d110      	bne.n	17d6e <vTask_GSM_service+0x98a>
							{
								char t1 = actionType;
   17d4c:	231c      	movs	r3, #28
   17d4e:	33ff      	adds	r3, #255	; 0xff
   17d50:	18fb      	adds	r3, r7, r3
   17d52:	4a6b      	ldr	r2, [pc, #428]	; (17f00 <vTask_GSM_service+0xb1c>)
   17d54:	7812      	ldrb	r2, [r2, #0]
   17d56:	701a      	strb	r2, [r3, #0]
								endCall();
   17d58:	4b5b      	ldr	r3, [pc, #364]	; (17ec8 <vTask_GSM_service+0xae4>)
   17d5a:	4798      	blx	r3
								checkRespSMS(t1);
   17d5c:	231c      	movs	r3, #28
   17d5e:	33ff      	adds	r3, #255	; 0xff
   17d60:	18fb      	adds	r3, r7, r3
   17d62:	781b      	ldrb	r3, [r3, #0]
   17d64:	0018      	movs	r0, r3
   17d66:	4b67      	ldr	r3, [pc, #412]	; (17f04 <vTask_GSM_service+0xb20>)
   17d68:	4798      	blx	r3
							{
   17d6a:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   17d6c:	e0a2      	b.n	17eb4 <vTask_GSM_service+0xad0>
							}
							else if (OutGoingcallState(response) == 'I')
   17d6e:	230c      	movs	r3, #12
   17d70:	18fb      	adds	r3, r7, r3
   17d72:	0018      	movs	r0, r3
   17d74:	4b5f      	ldr	r3, [pc, #380]	; (17ef4 <vTask_GSM_service+0xb10>)
   17d76:	4798      	blx	r3
   17d78:	0003      	movs	r3, r0
   17d7a:	2b49      	cmp	r3, #73	; 0x49
   17d7c:	d000      	beq.n	17d80 <vTask_GSM_service+0x99c>
   17d7e:	e099      	b.n	17eb4 <vTask_GSM_service+0xad0>
							{
								callCutWait = xTaskGetTickCount();
   17d80:	4b5d      	ldr	r3, [pc, #372]	; (17ef8 <vTask_GSM_service+0xb14>)
   17d82:	4798      	blx	r3
   17d84:	0002      	movs	r2, r0
   17d86:	4b5d      	ldr	r3, [pc, #372]	; (17efc <vTask_GSM_service+0xb18>)
   17d88:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   17d8a:	4b52      	ldr	r3, [pc, #328]	; (17ed4 <vTask_GSM_service+0xaf0>)
   17d8c:	2249      	movs	r2, #73	; 0x49
   17d8e:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17d90:	4b51      	ldr	r3, [pc, #324]	; (17ed8 <vTask_GSM_service+0xaf4>)
   17d92:	224f      	movs	r2, #79	; 0x4f
   17d94:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   17d96:	4b5c      	ldr	r3, [pc, #368]	; (17f08 <vTask_GSM_service+0xb24>)
   17d98:	2201      	movs	r2, #1
   17d9a:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   17d9c:	2201      	movs	r2, #1
   17d9e:	2100      	movs	r1, #0
   17da0:	2002      	movs	r0, #2
   17da2:	4b48      	ldr	r3, [pc, #288]	; (17ec4 <vTask_GSM_service+0xae0>)
   17da4:	4798      	blx	r3
								if (!m2mEvent)
   17da6:	4b59      	ldr	r3, [pc, #356]	; (17f0c <vTask_GSM_service+0xb28>)
   17da8:	781b      	ldrb	r3, [r3, #0]
   17daa:	2201      	movs	r2, #1
   17dac:	4053      	eors	r3, r2
   17dae:	b2db      	uxtb	r3, r3
   17db0:	2b00      	cmp	r3, #0
   17db2:	d100      	bne.n	17db6 <vTask_GSM_service+0x9d2>
   17db4:	e07e      	b.n	17eb4 <vTask_GSM_service+0xad0>
								{
									playSound(actionType,true);
   17db6:	4b52      	ldr	r3, [pc, #328]	; (17f00 <vTask_GSM_service+0xb1c>)
   17db8:	781b      	ldrb	r3, [r3, #0]
   17dba:	2101      	movs	r1, #1
   17dbc:	0018      	movs	r0, r3
   17dbe:	4b54      	ldr	r3, [pc, #336]	; (17f10 <vTask_GSM_service+0xb2c>)
   17dc0:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   17dc2:	e077      	b.n	17eb4 <vTask_GSM_service+0xad0>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   17dc4:	4b43      	ldr	r3, [pc, #268]	; (17ed4 <vTask_GSM_service+0xaf0>)
   17dc6:	781b      	ldrb	r3, [r3, #0]
   17dc8:	b2db      	uxtb	r3, r3
   17dca:	2b49      	cmp	r3, #73	; 0x49
   17dcc:	d001      	beq.n	17dd2 <vTask_GSM_service+0x9ee>
   17dce:	f7ff fbc5 	bl	1755c <vTask_GSM_service+0x178>
   17dd2:	4b41      	ldr	r3, [pc, #260]	; (17ed8 <vTask_GSM_service+0xaf4>)
   17dd4:	781b      	ldrb	r3, [r3, #0]
   17dd6:	b2db      	uxtb	r3, r3
   17dd8:	2b4f      	cmp	r3, #79	; 0x4f
   17dda:	d001      	beq.n	17de0 <vTask_GSM_service+0x9fc>
   17ddc:	f7ff fbbe 	bl	1755c <vTask_GSM_service+0x178>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   17de0:	230c      	movs	r3, #12
   17de2:	18fb      	adds	r3, r7, r3
   17de4:	0018      	movs	r0, r3
   17de6:	4b39      	ldr	r3, [pc, #228]	; (17ecc <vTask_GSM_service+0xae8>)
   17de8:	4798      	blx	r3
   17dea:	1e03      	subs	r3, r0, #0
   17dec:	d107      	bne.n	17dfe <vTask_GSM_service+0xa1a>
   17dee:	230c      	movs	r3, #12
   17df0:	18fb      	adds	r3, r7, r3
   17df2:	0018      	movs	r0, r3
   17df4:	4b3f      	ldr	r3, [pc, #252]	; (17ef4 <vTask_GSM_service+0xb10>)
   17df6:	4798      	blx	r3
   17df8:	0003      	movs	r3, r0
   17dfa:	2b45      	cmp	r3, #69	; 0x45
   17dfc:	d102      	bne.n	17e04 <vTask_GSM_service+0xa20>
							{
								endCall();
   17dfe:	4b32      	ldr	r3, [pc, #200]	; (17ec8 <vTask_GSM_service+0xae4>)
   17e00:	4798      	blx	r3
   17e02:	e058      	b.n	17eb6 <vTask_GSM_service+0xad2>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   17e04:	230c      	movs	r3, #12
   17e06:	18fb      	adds	r3, r7, r3
   17e08:	0018      	movs	r0, r3
   17e0a:	4b34      	ldr	r3, [pc, #208]	; (17edc <vTask_GSM_service+0xaf8>)
   17e0c:	4798      	blx	r3
   17e0e:	1e03      	subs	r3, r0, #0
   17e10:	d025      	beq.n	17e5e <vTask_GSM_service+0xa7a>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17e12:	4a33      	ldr	r2, [pc, #204]	; (17ee0 <vTask_GSM_service+0xafc>)
   17e14:	230c      	movs	r3, #12
   17e16:	18fb      	adds	r3, r7, r3
   17e18:	0011      	movs	r1, r2
   17e1a:	0018      	movs	r0, r3
   17e1c:	4b31      	ldr	r3, [pc, #196]	; (17ee4 <vTask_GSM_service+0xb00>)
   17e1e:	4798      	blx	r3
   17e20:	0003      	movs	r3, r0
   17e22:	228a      	movs	r2, #138	; 0x8a
   17e24:	0052      	lsls	r2, r2, #1
   17e26:	18ba      	adds	r2, r7, r2
   17e28:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   17e2a:	4b2d      	ldr	r3, [pc, #180]	; (17ee0 <vTask_GSM_service+0xafc>)
   17e2c:	0019      	movs	r1, r3
   17e2e:	2000      	movs	r0, #0
   17e30:	4b2c      	ldr	r3, [pc, #176]	; (17ee4 <vTask_GSM_service+0xb00>)
   17e32:	4798      	blx	r3
   17e34:	0003      	movs	r3, r0
   17e36:	228a      	movs	r2, #138	; 0x8a
   17e38:	0052      	lsls	r2, r2, #1
   17e3a:	18ba      	adds	r2, r7, r2
   17e3c:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   17e3e:	238a      	movs	r3, #138	; 0x8a
   17e40:	005b      	lsls	r3, r3, #1
   17e42:	18fb      	adds	r3, r7, r3
   17e44:	681b      	ldr	r3, [r3, #0]
   17e46:	0018      	movs	r0, r3
   17e48:	4b27      	ldr	r3, [pc, #156]	; (17ee8 <vTask_GSM_service+0xb04>)
   17e4a:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   17e4c:	238a      	movs	r3, #138	; 0x8a
   17e4e:	005b      	lsls	r3, r3, #1
   17e50:	18fb      	adds	r3, r7, r3
   17e52:	681b      	ldr	r3, [r3, #0]
   17e54:	0018      	movs	r0, r3
   17e56:	4b25      	ldr	r3, [pc, #148]	; (17eec <vTask_GSM_service+0xb08>)
   17e58:	4798      	blx	r3
   17e5a:	f7ff fb7f 	bl	1755c <vTask_GSM_service+0x178>
							}
							else
							{
								playSoundAgain(response);
   17e5e:	230c      	movs	r3, #12
   17e60:	18fb      	adds	r3, r7, r3
   17e62:	0018      	movs	r0, r3
   17e64:	4b22      	ldr	r3, [pc, #136]	; (17ef0 <vTask_GSM_service+0xb0c>)
   17e66:	4798      	blx	r3
   17e68:	f7ff fb78 	bl	1755c <vTask_GSM_service+0x178>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   17e6c:	232c      	movs	r3, #44	; 0x2c
   17e6e:	33ff      	adds	r3, #255	; 0xff
   17e70:	18fb      	adds	r3, r7, r3
   17e72:	2200      	movs	r2, #0
   17e74:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   17e76:	2395      	movs	r3, #149	; 0x95
   17e78:	005b      	lsls	r3, r3, #1
   17e7a:	18fb      	adds	r3, r7, r3
   17e7c:	2200      	movs	r2, #0
   17e7e:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   17e80:	4b24      	ldr	r3, [pc, #144]	; (17f14 <vTask_GSM_service+0xb30>)
   17e82:	4a24      	ldr	r2, [pc, #144]	; (17f14 <vTask_GSM_service+0xb30>)
   17e84:	6812      	ldr	r2, [r2, #0]
   17e86:	2180      	movs	r1, #128	; 0x80
   17e88:	0249      	lsls	r1, r1, #9
   17e8a:	430a      	orrs	r2, r1
   17e8c:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   17e8e:	4b22      	ldr	r3, [pc, #136]	; (17f18 <vTask_GSM_service+0xb34>)
   17e90:	0018      	movs	r0, r3
   17e92:	4b22      	ldr	r3, [pc, #136]	; (17f1c <vTask_GSM_service+0xb38>)
   17e94:	4798      	blx	r3
			GSM_PWR_OFF;
   17e96:	4b1f      	ldr	r3, [pc, #124]	; (17f14 <vTask_GSM_service+0xb30>)
   17e98:	4a1e      	ldr	r2, [pc, #120]	; (17f14 <vTask_GSM_service+0xb30>)
   17e9a:	6812      	ldr	r2, [r2, #0]
   17e9c:	4920      	ldr	r1, [pc, #128]	; (17f20 <vTask_GSM_service+0xb3c>)
   17e9e:	400a      	ands	r2, r1
   17ea0:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   17ea2:	4b20      	ldr	r3, [pc, #128]	; (17f24 <vTask_GSM_service+0xb40>)
   17ea4:	0018      	movs	r0, r3
   17ea6:	4b1d      	ldr	r3, [pc, #116]	; (17f1c <vTask_GSM_service+0xb38>)
   17ea8:	4798      	blx	r3
   17eaa:	f7ff fb57 	bl	1755c <vTask_GSM_service+0x178>
							if (gsm_responseLine_isRinging(response))
   17eae:	46c0      	nop			; (mov r8, r8)
   17eb0:	f7ff fb54 	bl	1755c <vTask_GSM_service+0x178>
							if (OutGoingcallState(response) == 'R')
   17eb4:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
   17eb6:	f7ff fb51 	bl	1755c <vTask_GSM_service+0x178>
   17eba:	46c0      	nop			; (mov r8, r8)
   17ebc:	0001706d 	.word	0x0001706d
   17ec0:	00014621 	.word	0x00014621
   17ec4:	0001cb31 	.word	0x0001cb31
   17ec8:	00014329 	.word	0x00014329
   17ecc:	00013615 	.word	0x00013615
   17ed0:	20000738 	.word	0x20000738
   17ed4:	200007d4 	.word	0x200007d4
   17ed8:	20000783 	.word	0x20000783
   17edc:	0001368d 	.word	0x0001368d
   17ee0:	0002a654 	.word	0x0002a654
   17ee4:	00029105 	.word	0x00029105
   17ee8:	00012a95 	.word	0x00012a95
   17eec:	00014bb5 	.word	0x00014bb5
   17ef0:	00014779 	.word	0x00014779
   17ef4:	000148b9 	.word	0x000148b9
   17ef8:	0002024d 	.word	0x0002024d
   17efc:	20000810 	.word	0x20000810
   17f00:	20000757 	.word	0x20000757
   17f04:	00014b3d 	.word	0x00014b3d
   17f08:	20000792 	.word	0x20000792
   17f0c:	20000737 	.word	0x20000737
   17f10:	00014669 	.word	0x00014669
   17f14:	41004490 	.word	0x41004490
   17f18:	00000bb8 	.word	0x00000bb8
   17f1c:	0001fee9 	.word	0x0001fee9
   17f20:	fffeffff 	.word	0xfffeffff
   17f24:	00001388 	.word	0x00001388

00017f28 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   17f28:	b590      	push	{r4, r7, lr}
   17f2a:	b083      	sub	sp, #12
   17f2c:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
   17f2e:	23eb      	movs	r3, #235	; 0xeb
   17f30:	009a      	lsls	r2, r3, #2
   17f32:	4806      	ldr	r0, [pc, #24]	; (17f4c <start_gsm_service+0x24>)
   17f34:	2300      	movs	r3, #0
   17f36:	9301      	str	r3, [sp, #4]
   17f38:	2301      	movs	r3, #1
   17f3a:	9300      	str	r3, [sp, #0]
   17f3c:	2300      	movs	r3, #0
   17f3e:	2100      	movs	r1, #0
   17f40:	4c03      	ldr	r4, [pc, #12]	; (17f50 <start_gsm_service+0x28>)
   17f42:	47a0      	blx	r4
}
   17f44:	46c0      	nop			; (mov r8, r8)
   17f46:	46bd      	mov	sp, r7
   17f48:	b001      	add	sp, #4
   17f4a:	bd90      	pop	{r4, r7, pc}
   17f4c:	000173e5 	.word	0x000173e5
   17f50:	0001fba9 	.word	0x0001fba9

00017f54 <busy>:

bool busy(void)
{
   17f54:	b580      	push	{r7, lr}
   17f56:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   17f58:	4b09      	ldr	r3, [pc, #36]	; (17f80 <busy+0x2c>)
   17f5a:	781b      	ldrb	r3, [r3, #0]
   17f5c:	2b00      	cmp	r3, #0
   17f5e:	d104      	bne.n	17f6a <busy+0x16>
   17f60:	4b08      	ldr	r3, [pc, #32]	; (17f84 <busy+0x30>)
   17f62:	781b      	ldrb	r3, [r3, #0]
   17f64:	b2db      	uxtb	r3, r3
   17f66:	2b00      	cmp	r3, #0
   17f68:	d001      	beq.n	17f6e <busy+0x1a>
   17f6a:	2301      	movs	r3, #1
   17f6c:	e000      	b.n	17f70 <busy+0x1c>
   17f6e:	2300      	movs	r3, #0
   17f70:	1c1a      	adds	r2, r3, #0
   17f72:	2301      	movs	r3, #1
   17f74:	4013      	ands	r3, r2
   17f76:	b2db      	uxtb	r3, r3
}
   17f78:	0018      	movs	r0, r3
   17f7a:	46bd      	mov	sp, r7
   17f7c:	bd80      	pop	{r7, pc}
   17f7e:	46c0      	nop			; (mov r8, r8)
   17f80:	20000790 	.word	0x20000790
   17f84:	2000068a 	.word	0x2000068a

00017f88 <checkNotInCall>:

bool checkNotInCall(void)
{
   17f88:	b580      	push	{r7, lr}
   17f8a:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   17f8c:	4b13      	ldr	r3, [pc, #76]	; (17fdc <checkNotInCall+0x54>)
   17f8e:	781b      	ldrb	r3, [r3, #0]
   17f90:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   17f92:	2b4e      	cmp	r3, #78	; 0x4e
   17f94:	d11a      	bne.n	17fcc <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   17f96:	4b12      	ldr	r3, [pc, #72]	; (17fe0 <checkNotInCall+0x58>)
   17f98:	781b      	ldrb	r3, [r3, #0]
   17f9a:	b2db      	uxtb	r3, r3
   17f9c:	2b4e      	cmp	r3, #78	; 0x4e
   17f9e:	d115      	bne.n	17fcc <checkNotInCall+0x44>
   17fa0:	4b10      	ldr	r3, [pc, #64]	; (17fe4 <checkNotInCall+0x5c>)
   17fa2:	781b      	ldrb	r3, [r3, #0]
   17fa4:	2b00      	cmp	r3, #0
   17fa6:	d011      	beq.n	17fcc <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   17fa8:	4b0f      	ldr	r3, [pc, #60]	; (17fe8 <checkNotInCall+0x60>)
   17faa:	781b      	ldrb	r3, [r3, #0]
   17fac:	2201      	movs	r2, #1
   17fae:	4053      	eors	r3, r2
   17fb0:	b2db      	uxtb	r3, r3
   17fb2:	2b00      	cmp	r3, #0
   17fb4:	d00a      	beq.n	17fcc <checkNotInCall+0x44>
   17fb6:	4b0d      	ldr	r3, [pc, #52]	; (17fec <checkNotInCall+0x64>)
   17fb8:	4798      	blx	r3
   17fba:	0003      	movs	r3, r0
   17fbc:	001a      	movs	r2, r3
   17fbe:	2301      	movs	r3, #1
   17fc0:	4053      	eors	r3, r2
   17fc2:	b2db      	uxtb	r3, r3
   17fc4:	2b00      	cmp	r3, #0
   17fc6:	d001      	beq.n	17fcc <checkNotInCall+0x44>
   17fc8:	2301      	movs	r3, #1
   17fca:	e000      	b.n	17fce <checkNotInCall+0x46>
   17fcc:	2300      	movs	r3, #0
   17fce:	1c1a      	adds	r2, r3, #0
   17fd0:	2301      	movs	r3, #1
   17fd2:	4013      	ands	r3, r2
   17fd4:	b2db      	uxtb	r3, r3
}
   17fd6:	0018      	movs	r0, r3
   17fd8:	46bd      	mov	sp, r7
   17fda:	bd80      	pop	{r7, pc}
   17fdc:	200007d4 	.word	0x200007d4
   17fe0:	20000783 	.word	0x20000783
   17fe4:	20000766 	.word	0x20000766
   17fe8:	20000738 	.word	0x20000738
   17fec:	00017f55 	.word	0x00017f55

00017ff0 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   17ff0:	b580      	push	{r7, lr}
   17ff2:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   17ff4:	4b21      	ldr	r3, [pc, #132]	; (1807c <gsm_checkSleepElligible+0x8c>)
   17ff6:	78db      	ldrb	r3, [r3, #3]
   17ff8:	2b00      	cmp	r3, #0
   17ffa:	d021      	beq.n	18040 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   17ffc:	4b20      	ldr	r3, [pc, #128]	; (18080 <gsm_checkSleepElligible+0x90>)
   17ffe:	781b      	ldrb	r3, [r3, #0]
   18000:	b2db      	uxtb	r3, r3
   18002:	2201      	movs	r2, #1
   18004:	4053      	eors	r3, r2
   18006:	b2db      	uxtb	r3, r3
   18008:	2b00      	cmp	r3, #0
   1800a:	d013      	beq.n	18034 <gsm_checkSleepElligible+0x44>
   1800c:	4b1d      	ldr	r3, [pc, #116]	; (18084 <gsm_checkSleepElligible+0x94>)
   1800e:	4798      	blx	r3
   18010:	1e03      	subs	r3, r0, #0
   18012:	d00f      	beq.n	18034 <gsm_checkSleepElligible+0x44>
   18014:	4b1c      	ldr	r3, [pc, #112]	; (18088 <gsm_checkSleepElligible+0x98>)
   18016:	781b      	ldrb	r3, [r3, #0]
   18018:	2201      	movs	r2, #1
   1801a:	4053      	eors	r3, r2
   1801c:	b2db      	uxtb	r3, r3
   1801e:	2b00      	cmp	r3, #0
   18020:	d008      	beq.n	18034 <gsm_checkSleepElligible+0x44>
   18022:	4b1a      	ldr	r3, [pc, #104]	; (1808c <gsm_checkSleepElligible+0x9c>)
   18024:	781b      	ldrb	r3, [r3, #0]
   18026:	2201      	movs	r2, #1
   18028:	4053      	eors	r3, r2
   1802a:	b2db      	uxtb	r3, r3
   1802c:	2b00      	cmp	r3, #0
   1802e:	d001      	beq.n	18034 <gsm_checkSleepElligible+0x44>
   18030:	2301      	movs	r3, #1
   18032:	e000      	b.n	18036 <gsm_checkSleepElligible+0x46>
   18034:	2300      	movs	r3, #0
   18036:	1c1a      	adds	r2, r3, #0
   18038:	2301      	movs	r3, #1
   1803a:	4013      	ands	r3, r2
   1803c:	b2db      	uxtb	r3, r3
   1803e:	e019      	b.n	18074 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   18040:	4b0f      	ldr	r3, [pc, #60]	; (18080 <gsm_checkSleepElligible+0x90>)
   18042:	781b      	ldrb	r3, [r3, #0]
   18044:	b2db      	uxtb	r3, r3
   18046:	2201      	movs	r2, #1
   18048:	4053      	eors	r3, r2
   1804a:	b2db      	uxtb	r3, r3
   1804c:	2b00      	cmp	r3, #0
   1804e:	d00c      	beq.n	1806a <gsm_checkSleepElligible+0x7a>
   18050:	4b0c      	ldr	r3, [pc, #48]	; (18084 <gsm_checkSleepElligible+0x94>)
   18052:	4798      	blx	r3
   18054:	1e03      	subs	r3, r0, #0
   18056:	d008      	beq.n	1806a <gsm_checkSleepElligible+0x7a>
   18058:	4b0c      	ldr	r3, [pc, #48]	; (1808c <gsm_checkSleepElligible+0x9c>)
   1805a:	781b      	ldrb	r3, [r3, #0]
   1805c:	2201      	movs	r2, #1
   1805e:	4053      	eors	r3, r2
   18060:	b2db      	uxtb	r3, r3
   18062:	2b00      	cmp	r3, #0
   18064:	d001      	beq.n	1806a <gsm_checkSleepElligible+0x7a>
   18066:	2301      	movs	r3, #1
   18068:	e000      	b.n	1806c <gsm_checkSleepElligible+0x7c>
   1806a:	2300      	movs	r3, #0
   1806c:	1c1a      	adds	r2, r3, #0
   1806e:	2301      	movs	r3, #1
   18070:	4013      	ands	r3, r2
   18072:	b2db      	uxtb	r3, r3
	}
   18074:	0018      	movs	r0, r3
   18076:	46bd      	mov	sp, r7
   18078:	bd80      	pop	{r7, pc}
   1807a:	46c0      	nop			; (mov r8, r8)
   1807c:	20000628 	.word	0x20000628
   18080:	20000680 	.word	0x20000680
   18084:	00017f89 	.word	0x00017f89
   18088:	20000782 	.word	0x20000782
   1808c:	200007ca 	.word	0x200007ca

00018090 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   18090:	b590      	push	{r4, r7, lr}
   18092:	b093      	sub	sp, #76	; 0x4c
   18094:	af02      	add	r7, sp, #8
   18096:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
   18098:	4bde      	ldr	r3, [pc, #888]	; (18414 <lcd_displaying_task+0x384>)
   1809a:	2200      	movs	r2, #0
   1809c:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   1809e:	4bde      	ldr	r3, [pc, #888]	; (18418 <lcd_displaying_task+0x388>)
   180a0:	2201      	movs	r2, #1
   180a2:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   180a4:	4bdd      	ldr	r3, [pc, #884]	; (1841c <lcd_displaying_task+0x38c>)
   180a6:	4798      	blx	r3
	LCD_PWR_EN();
   180a8:	4bdd      	ldr	r3, [pc, #884]	; (18420 <lcd_displaying_task+0x390>)
   180aa:	4798      	blx	r3
	vTaskDelay(500);
   180ac:	23fa      	movs	r3, #250	; 0xfa
   180ae:	005b      	lsls	r3, r3, #1
   180b0:	0018      	movs	r0, r3
   180b2:	4bdc      	ldr	r3, [pc, #880]	; (18424 <lcd_displaying_task+0x394>)
   180b4:	4798      	blx	r3
	
	LCD_init();
   180b6:	4bdc      	ldr	r3, [pc, #880]	; (18428 <lcd_displaying_task+0x398>)
   180b8:	4798      	blx	r3
	
	uint8_t screen=1;
   180ba:	233f      	movs	r3, #63	; 0x3f
   180bc:	18fb      	adds	r3, r7, r3
   180be:	2201      	movs	r2, #1
   180c0:	701a      	strb	r2, [r3, #0]
	bool four_sec_timer_is_active = true;
   180c2:	233d      	movs	r3, #61	; 0x3d
   180c4:	18fb      	adds	r3, r7, r3
   180c6:	2201      	movs	r2, #1
   180c8:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
   180ca:	233c      	movs	r3, #60	; 0x3c
   180cc:	18fb      	adds	r3, r7, r3
   180ce:	2200      	movs	r2, #0
   180d0:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
   180d2:	233a      	movs	r3, #58	; 0x3a
   180d4:	18fb      	adds	r3, r7, r3
   180d6:	2200      	movs	r2, #0
   180d8:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   180da:	4bd4      	ldr	r3, [pc, #848]	; (1842c <lcd_displaying_task+0x39c>)
   180dc:	4798      	blx	r3
	LCD_setCursor(0,0);
   180de:	2100      	movs	r1, #0
   180e0:	2000      	movs	r0, #0
   180e2:	4bd3      	ldr	r3, [pc, #844]	; (18430 <lcd_displaying_task+0x3a0>)
   180e4:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   180e6:	4bd3      	ldr	r3, [pc, #844]	; (18434 <lcd_displaying_task+0x3a4>)
   180e8:	0018      	movs	r0, r3
   180ea:	4bd3      	ldr	r3, [pc, #844]	; (18438 <lcd_displaying_task+0x3a8>)
   180ec:	4798      	blx	r3
	LCD_setCursor(0,1);
   180ee:	2101      	movs	r1, #1
   180f0:	2000      	movs	r0, #0
   180f2:	4bcf      	ldr	r3, [pc, #828]	; (18430 <lcd_displaying_task+0x3a0>)
   180f4:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   180f6:	4bd1      	ldr	r3, [pc, #836]	; (1843c <lcd_displaying_task+0x3ac>)
   180f8:	0018      	movs	r0, r3
   180fa:	4bcf      	ldr	r3, [pc, #828]	; (18438 <lcd_displaying_task+0x3a8>)
   180fc:	4798      	blx	r3
	vTaskDelay(3000);
   180fe:	4bd0      	ldr	r3, [pc, #832]	; (18440 <lcd_displaying_task+0x3b0>)
   18100:	0018      	movs	r0, r3
   18102:	4bc8      	ldr	r3, [pc, #800]	; (18424 <lcd_displaying_task+0x394>)
   18104:	4798      	blx	r3
	
	LCD_clear();
   18106:	4bc9      	ldr	r3, [pc, #804]	; (1842c <lcd_displaying_task+0x39c>)
   18108:	4798      	blx	r3
	LCD_setCursor(0,0);
   1810a:	2100      	movs	r1, #0
   1810c:	2000      	movs	r0, #0
   1810e:	4bc8      	ldr	r3, [pc, #800]	; (18430 <lcd_displaying_task+0x3a0>)
   18110:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   18112:	4bcc      	ldr	r3, [pc, #816]	; (18444 <lcd_displaying_task+0x3b4>)
   18114:	0018      	movs	r0, r3
   18116:	4bc8      	ldr	r3, [pc, #800]	; (18438 <lcd_displaying_task+0x3a8>)
   18118:	4798      	blx	r3
	LCD_setCursor(0,1);
   1811a:	2101      	movs	r1, #1
   1811c:	2000      	movs	r0, #0
   1811e:	4bc4      	ldr	r3, [pc, #784]	; (18430 <lcd_displaying_task+0x3a0>)
   18120:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   18122:	4ac9      	ldr	r2, [pc, #804]	; (18448 <lcd_displaying_task+0x3b8>)
   18124:	4bc9      	ldr	r3, [pc, #804]	; (1844c <lcd_displaying_task+0x3bc>)
   18126:	0011      	movs	r1, r2
   18128:	0018      	movs	r0, r3
   1812a:	4bc3      	ldr	r3, [pc, #780]	; (18438 <lcd_displaying_task+0x3a8>)
   1812c:	4798      	blx	r3
	vTaskDelay(2000);
   1812e:	23fa      	movs	r3, #250	; 0xfa
   18130:	00db      	lsls	r3, r3, #3
   18132:	0018      	movs	r0, r3
   18134:	4bbb      	ldr	r3, [pc, #748]	; (18424 <lcd_displaying_task+0x394>)
   18136:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   18138:	23fa      	movs	r3, #250	; 0xfa
   1813a:	0119      	lsls	r1, r3, #4
   1813c:	4bc4      	ldr	r3, [pc, #784]	; (18450 <lcd_displaying_task+0x3c0>)
   1813e:	9300      	str	r3, [sp, #0]
   18140:	2300      	movs	r3, #0
   18142:	2201      	movs	r2, #1
   18144:	2000      	movs	r0, #0
   18146:	4cc3      	ldr	r4, [pc, #780]	; (18454 <lcd_displaying_task+0x3c4>)
   18148:	47a0      	blx	r4
   1814a:	0002      	movs	r2, r0
   1814c:	4bc2      	ldr	r3, [pc, #776]	; (18458 <lcd_displaying_task+0x3c8>)
   1814e:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   18150:	4bc1      	ldr	r3, [pc, #772]	; (18458 <lcd_displaying_task+0x3c8>)
   18152:	681c      	ldr	r4, [r3, #0]
   18154:	4bc1      	ldr	r3, [pc, #772]	; (1845c <lcd_displaying_task+0x3cc>)
   18156:	4798      	blx	r3
   18158:	0002      	movs	r2, r0
   1815a:	2300      	movs	r3, #0
   1815c:	9300      	str	r3, [sp, #0]
   1815e:	2300      	movs	r3, #0
   18160:	2101      	movs	r1, #1
   18162:	0020      	movs	r0, r4
   18164:	4cbe      	ldr	r4, [pc, #760]	; (18460 <lcd_displaying_task+0x3d0>)
   18166:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   18168:	4baa      	ldr	r3, [pc, #680]	; (18414 <lcd_displaying_task+0x384>)
   1816a:	781b      	ldrb	r3, [r3, #0]
   1816c:	b2db      	uxtb	r3, r3
   1816e:	2b00      	cmp	r3, #0
   18170:	d009      	beq.n	18186 <lcd_displaying_task+0xf6>
		{
			lcd_in_sleep = false;
   18172:	4ba8      	ldr	r3, [pc, #672]	; (18414 <lcd_displaying_task+0x384>)
   18174:	2200      	movs	r2, #0
   18176:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   18178:	4ba9      	ldr	r3, [pc, #676]	; (18420 <lcd_displaying_task+0x390>)
   1817a:	4798      	blx	r3
			vTaskDelay(100);
   1817c:	2064      	movs	r0, #100	; 0x64
   1817e:	4ba9      	ldr	r3, [pc, #676]	; (18424 <lcd_displaying_task+0x394>)
   18180:	4798      	blx	r3
			LCD_init();
   18182:	4ba9      	ldr	r3, [pc, #676]	; (18428 <lcd_displaying_task+0x398>)
   18184:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   18186:	4ba4      	ldr	r3, [pc, #656]	; (18418 <lcd_displaying_task+0x388>)
   18188:	781b      	ldrb	r3, [r3, #0]
   1818a:	b2db      	uxtb	r3, r3
   1818c:	2b00      	cmp	r3, #0
   1818e:	d047      	beq.n	18220 <lcd_displaying_task+0x190>
		{
			setNetworkCharacter=false;
   18190:	4ba1      	ldr	r3, [pc, #644]	; (18418 <lcd_displaying_task+0x388>)
   18192:	2200      	movs	r2, #0
   18194:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   18196:	2330      	movs	r3, #48	; 0x30
   18198:	18fb      	adds	r3, r7, r3
   1819a:	0018      	movs	r0, r3
   1819c:	2308      	movs	r3, #8
   1819e:	001a      	movs	r2, r3
   181a0:	2100      	movs	r1, #0
   181a2:	4bb0      	ldr	r3, [pc, #704]	; (18464 <lcd_displaying_task+0x3d4>)
   181a4:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   181a6:	2328      	movs	r3, #40	; 0x28
   181a8:	18fb      	adds	r3, r7, r3
   181aa:	4aaf      	ldr	r2, [pc, #700]	; (18468 <lcd_displaying_task+0x3d8>)
   181ac:	ca03      	ldmia	r2!, {r0, r1}
   181ae:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   181b0:	2320      	movs	r3, #32
   181b2:	18fb      	adds	r3, r7, r3
   181b4:	4aad      	ldr	r2, [pc, #692]	; (1846c <lcd_displaying_task+0x3dc>)
   181b6:	ca03      	ldmia	r2!, {r0, r1}
   181b8:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   181ba:	2318      	movs	r3, #24
   181bc:	18fb      	adds	r3, r7, r3
   181be:	4aac      	ldr	r2, [pc, #688]	; (18470 <lcd_displaying_task+0x3e0>)
   181c0:	ca03      	ldmia	r2!, {r0, r1}
   181c2:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   181c4:	2310      	movs	r3, #16
   181c6:	18fb      	adds	r3, r7, r3
   181c8:	4aaa      	ldr	r2, [pc, #680]	; (18474 <lcd_displaying_task+0x3e4>)
   181ca:	ca03      	ldmia	r2!, {r0, r1}
   181cc:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   181ce:	2308      	movs	r3, #8
   181d0:	18fb      	adds	r3, r7, r3
   181d2:	4aa9      	ldr	r2, [pc, #676]	; (18478 <lcd_displaying_task+0x3e8>)
   181d4:	ca03      	ldmia	r2!, {r0, r1}
   181d6:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   181d8:	2330      	movs	r3, #48	; 0x30
   181da:	18fb      	adds	r3, r7, r3
   181dc:	0019      	movs	r1, r3
   181de:	2000      	movs	r0, #0
   181e0:	4ba6      	ldr	r3, [pc, #664]	; (1847c <lcd_displaying_task+0x3ec>)
   181e2:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   181e4:	2328      	movs	r3, #40	; 0x28
   181e6:	18fb      	adds	r3, r7, r3
   181e8:	0019      	movs	r1, r3
   181ea:	2001      	movs	r0, #1
   181ec:	4ba3      	ldr	r3, [pc, #652]	; (1847c <lcd_displaying_task+0x3ec>)
   181ee:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   181f0:	2320      	movs	r3, #32
   181f2:	18fb      	adds	r3, r7, r3
   181f4:	0019      	movs	r1, r3
   181f6:	2002      	movs	r0, #2
   181f8:	4ba0      	ldr	r3, [pc, #640]	; (1847c <lcd_displaying_task+0x3ec>)
   181fa:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   181fc:	2318      	movs	r3, #24
   181fe:	18fb      	adds	r3, r7, r3
   18200:	0019      	movs	r1, r3
   18202:	2003      	movs	r0, #3
   18204:	4b9d      	ldr	r3, [pc, #628]	; (1847c <lcd_displaying_task+0x3ec>)
   18206:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   18208:	2310      	movs	r3, #16
   1820a:	18fb      	adds	r3, r7, r3
   1820c:	0019      	movs	r1, r3
   1820e:	2004      	movs	r0, #4
   18210:	4b9a      	ldr	r3, [pc, #616]	; (1847c <lcd_displaying_task+0x3ec>)
   18212:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   18214:	2308      	movs	r3, #8
   18216:	18fb      	adds	r3, r7, r3
   18218:	0019      	movs	r1, r3
   1821a:	2005      	movs	r0, #5
   1821c:	4b97      	ldr	r3, [pc, #604]	; (1847c <lcd_displaying_task+0x3ec>)
   1821e:	4798      	blx	r3

			
		}
		
		
		if(firstEvent)
   18220:	4b97      	ldr	r3, [pc, #604]	; (18480 <lcd_displaying_task+0x3f0>)
   18222:	781b      	ldrb	r3, [r3, #0]
   18224:	b2db      	uxtb	r3, r3
   18226:	2b00      	cmp	r3, #0
   18228:	d010      	beq.n	1824c <lcd_displaying_task+0x1bc>
		{
			LCD_setCursor(0,0);
   1822a:	2100      	movs	r1, #0
   1822c:	2000      	movs	r0, #0
   1822e:	4b80      	ldr	r3, [pc, #512]	; (18430 <lcd_displaying_task+0x3a0>)
   18230:	4798      	blx	r3
			lcd_printf("Initializing... ");
   18232:	4b94      	ldr	r3, [pc, #592]	; (18484 <lcd_displaying_task+0x3f4>)
   18234:	0018      	movs	r0, r3
   18236:	4b80      	ldr	r3, [pc, #512]	; (18438 <lcd_displaying_task+0x3a8>)
   18238:	4798      	blx	r3
			LCD_setCursor(0,1);
   1823a:	2101      	movs	r1, #1
   1823c:	2000      	movs	r0, #0
   1823e:	4b7c      	ldr	r3, [pc, #496]	; (18430 <lcd_displaying_task+0x3a0>)
   18240:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   18242:	4b91      	ldr	r3, [pc, #580]	; (18488 <lcd_displaying_task+0x3f8>)
   18244:	0018      	movs	r0, r3
   18246:	4b7c      	ldr	r3, [pc, #496]	; (18438 <lcd_displaying_task+0x3a8>)
   18248:	4798      	blx	r3
   1824a:	e22c      	b.n	186a6 <lcd_displaying_task+0x616>
		}
		else
		{
			switch(screen)
   1824c:	233f      	movs	r3, #63	; 0x3f
   1824e:	18fb      	adds	r3, r7, r3
   18250:	781b      	ldrb	r3, [r3, #0]
   18252:	2b07      	cmp	r3, #7
   18254:	d900      	bls.n	18258 <lcd_displaying_task+0x1c8>
   18256:	e226      	b.n	186a6 <lcd_displaying_task+0x616>
   18258:	009a      	lsls	r2, r3, #2
   1825a:	4b8c      	ldr	r3, [pc, #560]	; (1848c <lcd_displaying_task+0x3fc>)
   1825c:	18d3      	adds	r3, r2, r3
   1825e:	681b      	ldr	r3, [r3, #0]
   18260:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   18262:	2100      	movs	r1, #0
   18264:	2000      	movs	r0, #0
   18266:	4b72      	ldr	r3, [pc, #456]	; (18430 <lcd_displaying_task+0x3a0>)
   18268:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   1826a:	4b89      	ldr	r3, [pc, #548]	; (18490 <lcd_displaying_task+0x400>)
   1826c:	0018      	movs	r0, r3
   1826e:	4b72      	ldr	r3, [pc, #456]	; (18438 <lcd_displaying_task+0x3a8>)
   18270:	4798      	blx	r3
					LCD_setCursor(0,1);
   18272:	2101      	movs	r1, #1
   18274:	2000      	movs	r0, #0
   18276:	4b6e      	ldr	r3, [pc, #440]	; (18430 <lcd_displaying_task+0x3a0>)
   18278:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   1827a:	4b86      	ldr	r3, [pc, #536]	; (18494 <lcd_displaying_task+0x404>)
   1827c:	681a      	ldr	r2, [r3, #0]
   1827e:	4b86      	ldr	r3, [pc, #536]	; (18498 <lcd_displaying_task+0x408>)
   18280:	0011      	movs	r1, r2
   18282:	0018      	movs	r0, r3
   18284:	4b6c      	ldr	r3, [pc, #432]	; (18438 <lcd_displaying_task+0x3a8>)
   18286:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   18288:	4b82      	ldr	r3, [pc, #520]	; (18494 <lcd_displaying_task+0x404>)
   1828a:	685a      	ldr	r2, [r3, #4]
   1828c:	4b82      	ldr	r3, [pc, #520]	; (18498 <lcd_displaying_task+0x408>)
   1828e:	0011      	movs	r1, r2
   18290:	0018      	movs	r0, r3
   18292:	4b69      	ldr	r3, [pc, #420]	; (18438 <lcd_displaying_task+0x3a8>)
   18294:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   18296:	4b7f      	ldr	r3, [pc, #508]	; (18494 <lcd_displaying_task+0x404>)
   18298:	689a      	ldr	r2, [r3, #8]
   1829a:	4b80      	ldr	r3, [pc, #512]	; (1849c <lcd_displaying_task+0x40c>)
   1829c:	0011      	movs	r1, r2
   1829e:	0018      	movs	r0, r3
   182a0:	4b65      	ldr	r3, [pc, #404]	; (18438 <lcd_displaying_task+0x3a8>)
   182a2:	4798      	blx	r3
					break;
   182a4:	e1ff      	b.n	186a6 <lcd_displaying_task+0x616>
				}
				case  2:
				{
					if(!getMotorState())
   182a6:	4b7e      	ldr	r3, [pc, #504]	; (184a0 <lcd_displaying_task+0x410>)
   182a8:	4798      	blx	r3
   182aa:	0003      	movs	r3, r0
   182ac:	001a      	movs	r2, r3
   182ae:	2301      	movs	r3, #1
   182b0:	4053      	eors	r3, r2
   182b2:	b2db      	uxtb	r3, r3
   182b4:	2b00      	cmp	r3, #0
   182b6:	d010      	beq.n	182da <lcd_displaying_task+0x24a>
					{
						LCD_setCursor(0,0);
   182b8:	2100      	movs	r1, #0
   182ba:	2000      	movs	r0, #0
   182bc:	4b5c      	ldr	r3, [pc, #368]	; (18430 <lcd_displaying_task+0x3a0>)
   182be:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   182c0:	4b78      	ldr	r3, [pc, #480]	; (184a4 <lcd_displaying_task+0x414>)
   182c2:	0018      	movs	r0, r3
   182c4:	4b5c      	ldr	r3, [pc, #368]	; (18438 <lcd_displaying_task+0x3a8>)
   182c6:	4798      	blx	r3
						LCD_setCursor(0,1);
   182c8:	2101      	movs	r1, #1
   182ca:	2000      	movs	r0, #0
   182cc:	4b58      	ldr	r3, [pc, #352]	; (18430 <lcd_displaying_task+0x3a0>)
   182ce:	4798      	blx	r3
						lcd_printf("                ");
   182d0:	4b75      	ldr	r3, [pc, #468]	; (184a8 <lcd_displaying_task+0x418>)
   182d2:	0018      	movs	r0, r3
   182d4:	4b58      	ldr	r3, [pc, #352]	; (18438 <lcd_displaying_task+0x3a8>)
   182d6:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR CURRENT:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
					}
					break;
   182d8:	e1e5      	b.n	186a6 <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   182da:	2100      	movs	r1, #0
   182dc:	2000      	movs	r0, #0
   182de:	4b54      	ldr	r3, [pc, #336]	; (18430 <lcd_displaying_task+0x3a0>)
   182e0:	4798      	blx	r3
						lcd_printf("MOTOR CURRENT:  ");
   182e2:	4b72      	ldr	r3, [pc, #456]	; (184ac <lcd_displaying_task+0x41c>)
   182e4:	0018      	movs	r0, r3
   182e6:	4b54      	ldr	r3, [pc, #336]	; (18438 <lcd_displaying_task+0x3a8>)
   182e8:	4798      	blx	r3
						LCD_setCursor(0,1);
   182ea:	2101      	movs	r1, #1
   182ec:	2000      	movs	r0, #0
   182ee:	4b50      	ldr	r3, [pc, #320]	; (18430 <lcd_displaying_task+0x3a0>)
   182f0:	4798      	blx	r3
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   182f2:	4b68      	ldr	r3, [pc, #416]	; (18494 <lcd_displaying_task+0x404>)
   182f4:	8a9b      	ldrh	r3, [r3, #20]
   182f6:	b29b      	uxth	r3, r3
   182f8:	0019      	movs	r1, r3
   182fa:	4b66      	ldr	r3, [pc, #408]	; (18494 <lcd_displaying_task+0x404>)
   182fc:	8adb      	ldrh	r3, [r3, #22]
   182fe:	b29b      	uxth	r3, r3
   18300:	001a      	movs	r2, r3
   18302:	4b6b      	ldr	r3, [pc, #428]	; (184b0 <lcd_displaying_task+0x420>)
   18304:	0018      	movs	r0, r3
   18306:	4b4c      	ldr	r3, [pc, #304]	; (18438 <lcd_displaying_task+0x3a8>)
   18308:	4798      	blx	r3
					break;
   1830a:	e1cc      	b.n	186a6 <lcd_displaying_task+0x616>
				}
				case  3:
				{
					if(!getMotorState())
   1830c:	4b64      	ldr	r3, [pc, #400]	; (184a0 <lcd_displaying_task+0x410>)
   1830e:	4798      	blx	r3
   18310:	0003      	movs	r3, r0
   18312:	001a      	movs	r2, r3
   18314:	2301      	movs	r3, #1
   18316:	4053      	eors	r3, r2
   18318:	b2db      	uxtb	r3, r3
   1831a:	2b00      	cmp	r3, #0
   1831c:	d010      	beq.n	18340 <lcd_displaying_task+0x2b0>
					{
						LCD_setCursor(0,0);
   1831e:	2100      	movs	r1, #0
   18320:	2000      	movs	r0, #0
   18322:	4b43      	ldr	r3, [pc, #268]	; (18430 <lcd_displaying_task+0x3a0>)
   18324:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   18326:	4b5f      	ldr	r3, [pc, #380]	; (184a4 <lcd_displaying_task+0x414>)
   18328:	0018      	movs	r0, r3
   1832a:	4b43      	ldr	r3, [pc, #268]	; (18438 <lcd_displaying_task+0x3a8>)
   1832c:	4798      	blx	r3
						LCD_setCursor(0,1);
   1832e:	2101      	movs	r1, #1
   18330:	2000      	movs	r0, #0
   18332:	4b3f      	ldr	r3, [pc, #252]	; (18430 <lcd_displaying_task+0x3a0>)
   18334:	4798      	blx	r3
						lcd_printf("                ");
   18336:	4b5c      	ldr	r3, [pc, #368]	; (184a8 <lcd_displaying_task+0x418>)
   18338:	0018      	movs	r0, r3
   1833a:	4b3f      	ldr	r3, [pc, #252]	; (18438 <lcd_displaying_task+0x3a8>)
   1833c:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR WATTAGE:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					}
					break;
   1833e:	e1b2      	b.n	186a6 <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   18340:	2100      	movs	r1, #0
   18342:	2000      	movs	r0, #0
   18344:	4b3a      	ldr	r3, [pc, #232]	; (18430 <lcd_displaying_task+0x3a0>)
   18346:	4798      	blx	r3
						lcd_printf("MOTOR WATTAGE:  ");
   18348:	4b5a      	ldr	r3, [pc, #360]	; (184b4 <lcd_displaying_task+0x424>)
   1834a:	0018      	movs	r0, r3
   1834c:	4b3a      	ldr	r3, [pc, #232]	; (18438 <lcd_displaying_task+0x3a8>)
   1834e:	4798      	blx	r3
						LCD_setCursor(0,1);
   18350:	2101      	movs	r1, #1
   18352:	2000      	movs	r0, #0
   18354:	4b36      	ldr	r3, [pc, #216]	; (18430 <lcd_displaying_task+0x3a0>)
   18356:	4798      	blx	r3
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
   18358:	4b4e      	ldr	r3, [pc, #312]	; (18494 <lcd_displaying_task+0x404>)
   1835a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1835c:	b29b      	uxth	r3, r3
   1835e:	0019      	movs	r1, r3
   18360:	4b4c      	ldr	r3, [pc, #304]	; (18494 <lcd_displaying_task+0x404>)
   18362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18364:	4b54      	ldr	r3, [pc, #336]	; (184b8 <lcd_displaying_task+0x428>)
   18366:	0018      	movs	r0, r3
   18368:	4b33      	ldr	r3, [pc, #204]	; (18438 <lcd_displaying_task+0x3a8>)
   1836a:	4798      	blx	r3
					break;
   1836c:	e19b      	b.n	186a6 <lcd_displaying_task+0x616>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   1836e:	2100      	movs	r1, #0
   18370:	2000      	movs	r0, #0
   18372:	4b2f      	ldr	r3, [pc, #188]	; (18430 <lcd_displaying_task+0x3a0>)
   18374:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   18376:	4b51      	ldr	r3, [pc, #324]	; (184bc <lcd_displaying_task+0x42c>)
   18378:	0018      	movs	r0, r3
   1837a:	4b2f      	ldr	r3, [pc, #188]	; (18438 <lcd_displaying_task+0x3a8>)
   1837c:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1837e:	4b50      	ldr	r3, [pc, #320]	; (184c0 <lcd_displaying_task+0x430>)
   18380:	781b      	ldrb	r3, [r3, #0]
   18382:	b2db      	uxtb	r3, r3
   18384:	2b02      	cmp	r3, #2
   18386:	d104      	bne.n	18392 <lcd_displaying_task+0x302>
					{
						lcd_printf(" OK ");
   18388:	4b4e      	ldr	r3, [pc, #312]	; (184c4 <lcd_displaying_task+0x434>)
   1838a:	0018      	movs	r0, r3
   1838c:	4b2a      	ldr	r3, [pc, #168]	; (18438 <lcd_displaying_task+0x3a8>)
   1838e:	4798      	blx	r3
   18390:	e003      	b.n	1839a <lcd_displaying_task+0x30a>
					}
					else
					{
						lcd_printf(" ERR");
   18392:	4b4d      	ldr	r3, [pc, #308]	; (184c8 <lcd_displaying_task+0x438>)
   18394:	0018      	movs	r0, r3
   18396:	4b28      	ldr	r3, [pc, #160]	; (18438 <lcd_displaying_task+0x3a8>)
   18398:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   1839a:	2101      	movs	r1, #1
   1839c:	2000      	movs	r0, #0
   1839e:	4b24      	ldr	r3, [pc, #144]	; (18430 <lcd_displaying_task+0x3a0>)
   183a0:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   183a2:	4b4a      	ldr	r3, [pc, #296]	; (184cc <lcd_displaying_task+0x43c>)
   183a4:	0018      	movs	r0, r3
   183a6:	4b24      	ldr	r3, [pc, #144]	; (18438 <lcd_displaying_task+0x3a8>)
   183a8:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   183aa:	4b45      	ldr	r3, [pc, #276]	; (184c0 <lcd_displaying_task+0x430>)
   183ac:	785b      	ldrb	r3, [r3, #1]
   183ae:	b2db      	uxtb	r3, r3
   183b0:	2b03      	cmp	r3, #3
   183b2:	d104      	bne.n	183be <lcd_displaying_task+0x32e>
					{
						lcd_printf(" 3PH ");
   183b4:	4b46      	ldr	r3, [pc, #280]	; (184d0 <lcd_displaying_task+0x440>)
   183b6:	0018      	movs	r0, r3
   183b8:	4b1f      	ldr	r3, [pc, #124]	; (18438 <lcd_displaying_task+0x3a8>)
   183ba:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   183bc:	e173      	b.n	186a6 <lcd_displaying_task+0x616>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   183be:	4b40      	ldr	r3, [pc, #256]	; (184c0 <lcd_displaying_task+0x430>)
   183c0:	785b      	ldrb	r3, [r3, #1]
   183c2:	b2db      	uxtb	r3, r3
   183c4:	2b02      	cmp	r3, #2
   183c6:	d104      	bne.n	183d2 <lcd_displaying_task+0x342>
						lcd_printf(" 2PH ");
   183c8:	4b42      	ldr	r3, [pc, #264]	; (184d4 <lcd_displaying_task+0x444>)
   183ca:	0018      	movs	r0, r3
   183cc:	4b1a      	ldr	r3, [pc, #104]	; (18438 <lcd_displaying_task+0x3a8>)
   183ce:	4798      	blx	r3
					break;
   183d0:	e169      	b.n	186a6 <lcd_displaying_task+0x616>
						lcd_printf(" OFF");
   183d2:	4b41      	ldr	r3, [pc, #260]	; (184d8 <lcd_displaying_task+0x448>)
   183d4:	0018      	movs	r0, r3
   183d6:	4b18      	ldr	r3, [pc, #96]	; (18438 <lcd_displaying_task+0x3a8>)
   183d8:	4798      	blx	r3
					break;
   183da:	e164      	b.n	186a6 <lcd_displaying_task+0x616>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   183dc:	2100      	movs	r1, #0
   183de:	2000      	movs	r0, #0
   183e0:	4b13      	ldr	r3, [pc, #76]	; (18430 <lcd_displaying_task+0x3a0>)
   183e2:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   183e4:	4b3d      	ldr	r3, [pc, #244]	; (184dc <lcd_displaying_task+0x44c>)
   183e6:	0018      	movs	r0, r3
   183e8:	4b13      	ldr	r3, [pc, #76]	; (18438 <lcd_displaying_task+0x3a8>)
   183ea:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   183ec:	4b3c      	ldr	r3, [pc, #240]	; (184e0 <lcd_displaying_task+0x450>)
   183ee:	781b      	ldrb	r3, [r3, #0]
   183f0:	b2db      	uxtb	r3, r3
   183f2:	2b02      	cmp	r3, #2
   183f4:	d104      	bne.n	18400 <lcd_displaying_task+0x370>
					{
						lcd_printf("HIGH  ");
   183f6:	4b3b      	ldr	r3, [pc, #236]	; (184e4 <lcd_displaying_task+0x454>)
   183f8:	0018      	movs	r0, r3
   183fa:	4b0f      	ldr	r3, [pc, #60]	; (18438 <lcd_displaying_task+0x3a8>)
   183fc:	4798      	blx	r3
   183fe:	e07e      	b.n	184fe <lcd_displaying_task+0x46e>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   18400:	4b37      	ldr	r3, [pc, #220]	; (184e0 <lcd_displaying_task+0x450>)
   18402:	781b      	ldrb	r3, [r3, #0]
   18404:	b2db      	uxtb	r3, r3
   18406:	2b01      	cmp	r3, #1
   18408:	d170      	bne.n	184ec <lcd_displaying_task+0x45c>
					{
						lcd_printf("MID   ");
   1840a:	4b37      	ldr	r3, [pc, #220]	; (184e8 <lcd_displaying_task+0x458>)
   1840c:	0018      	movs	r0, r3
   1840e:	4b0a      	ldr	r3, [pc, #40]	; (18438 <lcd_displaying_task+0x3a8>)
   18410:	4798      	blx	r3
   18412:	e074      	b.n	184fe <lcd_displaying_task+0x46e>
   18414:	2000085f 	.word	0x2000085f
   18418:	20000860 	.word	0x20000860
   1841c:	00013aad 	.word	0x00013aad
   18420:	00013ae1 	.word	0x00013ae1
   18424:	0001fee9 	.word	0x0001fee9
   18428:	000137e9 	.word	0x000137e9
   1842c:	00013d79 	.word	0x00013d79
   18430:	00013e49 	.word	0x00013e49
   18434:	0002a6a4 	.word	0x0002a6a4
   18438:	00013f45 	.word	0x00013f45
   1843c:	0002a6b8 	.word	0x0002a6b8
   18440:	00000bb8 	.word	0x00000bb8
   18444:	0002a6cc 	.word	0x0002a6cc
   18448:	0002a6e0 	.word	0x0002a6e0
   1844c:	0002a6f4 	.word	0x0002a6f4
   18450:	00018851 	.word	0x00018851
   18454:	00020e09 	.word	0x00020e09
   18458:	20000234 	.word	0x20000234
   1845c:	0002024d 	.word	0x0002024d
   18460:	00020ead 	.word	0x00020ead
   18464:	00028e13 	.word	0x00028e13
   18468:	0002a8dc 	.word	0x0002a8dc
   1846c:	0002a8e4 	.word	0x0002a8e4
   18470:	0002a8ec 	.word	0x0002a8ec
   18474:	0002a8f4 	.word	0x0002a8f4
   18478:	0002a8fc 	.word	0x0002a8fc
   1847c:	00013de9 	.word	0x00013de9
   18480:	2000076a 	.word	0x2000076a
   18484:	0002a6f8 	.word	0x0002a6f8
   18488:	0002a70c 	.word	0x0002a70c
   1848c:	0002a904 	.word	0x0002a904
   18490:	0002a720 	.word	0x0002a720
   18494:	200006d8 	.word	0x200006d8
   18498:	0002a734 	.word	0x0002a734
   1849c:	0002a740 	.word	0x0002a740
   184a0:	0001aaf5 	.word	0x0001aaf5
   184a4:	0002a748 	.word	0x0002a748
   184a8:	0002a75c 	.word	0x0002a75c
   184ac:	0002a770 	.word	0x0002a770
   184b0:	0002a784 	.word	0x0002a784
   184b4:	0002a79c 	.word	0x0002a79c
   184b8:	0002a7b0 	.word	0x0002a7b0
   184bc:	0002a7c8 	.word	0x0002a7c8
   184c0:	2000073c 	.word	0x2000073c
   184c4:	0002a7d8 	.word	0x0002a7d8
   184c8:	0002a7e0 	.word	0x0002a7e0
   184cc:	0002a7e8 	.word	0x0002a7e8
   184d0:	0002a7f8 	.word	0x0002a7f8
   184d4:	0002a800 	.word	0x0002a800
   184d8:	0002a808 	.word	0x0002a808
   184dc:	0002a810 	.word	0x0002a810
   184e0:	20000784 	.word	0x20000784
   184e4:	0002a81c 	.word	0x0002a81c
   184e8:	0002a824 	.word	0x0002a824
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   184ec:	4ba6      	ldr	r3, [pc, #664]	; (18788 <lcd_displaying_task+0x6f8>)
   184ee:	781b      	ldrb	r3, [r3, #0]
   184f0:	b2db      	uxtb	r3, r3
   184f2:	2b00      	cmp	r3, #0
   184f4:	d103      	bne.n	184fe <lcd_displaying_task+0x46e>
					{
						lcd_printf("LOW   ");
   184f6:	4ba5      	ldr	r3, [pc, #660]	; (1878c <lcd_displaying_task+0x6fc>)
   184f8:	0018      	movs	r0, r3
   184fa:	4ba5      	ldr	r3, [pc, #660]	; (18790 <lcd_displaying_task+0x700>)
   184fc:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   184fe:	2101      	movs	r1, #1
   18500:	2000      	movs	r0, #0
   18502:	4ba4      	ldr	r3, [pc, #656]	; (18794 <lcd_displaying_task+0x704>)
   18504:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   18506:	4ba4      	ldr	r3, [pc, #656]	; (18798 <lcd_displaying_task+0x708>)
   18508:	0018      	movs	r0, r3
   1850a:	4ba1      	ldr	r3, [pc, #644]	; (18790 <lcd_displaying_task+0x700>)
   1850c:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   1850e:	4ba3      	ldr	r3, [pc, #652]	; (1879c <lcd_displaying_task+0x70c>)
   18510:	781b      	ldrb	r3, [r3, #0]
   18512:	2b00      	cmp	r3, #0
   18514:	d104      	bne.n	18520 <lcd_displaying_task+0x490>
					{
						lcd_printf("CRTCL ");
   18516:	4ba2      	ldr	r3, [pc, #648]	; (187a0 <lcd_displaying_task+0x710>)
   18518:	0018      	movs	r0, r3
   1851a:	4b9d      	ldr	r3, [pc, #628]	; (18790 <lcd_displaying_task+0x700>)
   1851c:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   1851e:	e0bf      	b.n	186a0 <lcd_displaying_task+0x610>
					else if (undergroundLevel == LOWLEVEL)
   18520:	4b9e      	ldr	r3, [pc, #632]	; (1879c <lcd_displaying_task+0x70c>)
   18522:	781b      	ldrb	r3, [r3, #0]
   18524:	2b01      	cmp	r3, #1
   18526:	d104      	bne.n	18532 <lcd_displaying_task+0x4a2>
						lcd_printf("LOW   ");
   18528:	4b98      	ldr	r3, [pc, #608]	; (1878c <lcd_displaying_task+0x6fc>)
   1852a:	0018      	movs	r0, r3
   1852c:	4b98      	ldr	r3, [pc, #608]	; (18790 <lcd_displaying_task+0x700>)
   1852e:	4798      	blx	r3
					break;
   18530:	e0b6      	b.n	186a0 <lcd_displaying_task+0x610>
					else if (undergroundLevel == MIDLEVEL)
   18532:	4b9a      	ldr	r3, [pc, #616]	; (1879c <lcd_displaying_task+0x70c>)
   18534:	781b      	ldrb	r3, [r3, #0]
   18536:	2b02      	cmp	r3, #2
   18538:	d104      	bne.n	18544 <lcd_displaying_task+0x4b4>
						lcd_printf("MID   ");
   1853a:	4b9a      	ldr	r3, [pc, #616]	; (187a4 <lcd_displaying_task+0x714>)
   1853c:	0018      	movs	r0, r3
   1853e:	4b94      	ldr	r3, [pc, #592]	; (18790 <lcd_displaying_task+0x700>)
   18540:	4798      	blx	r3
					break;
   18542:	e0ad      	b.n	186a0 <lcd_displaying_task+0x610>
					else if (undergroundLevel == HIGHLEVEL)
   18544:	4b95      	ldr	r3, [pc, #596]	; (1879c <lcd_displaying_task+0x70c>)
   18546:	781b      	ldrb	r3, [r3, #0]
   18548:	2b03      	cmp	r3, #3
   1854a:	d000      	beq.n	1854e <lcd_displaying_task+0x4be>
   1854c:	e0a8      	b.n	186a0 <lcd_displaying_task+0x610>
						lcd_printf("HIGH  ");
   1854e:	4b96      	ldr	r3, [pc, #600]	; (187a8 <lcd_displaying_task+0x718>)
   18550:	0018      	movs	r0, r3
   18552:	4b8f      	ldr	r3, [pc, #572]	; (18790 <lcd_displaying_task+0x700>)
   18554:	4798      	blx	r3
					break;
   18556:	e0a3      	b.n	186a0 <lcd_displaying_task+0x610>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   18558:	2100      	movs	r1, #0
   1855a:	2000      	movs	r0, #0
   1855c:	4b8d      	ldr	r3, [pc, #564]	; (18794 <lcd_displaying_task+0x704>)
   1855e:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   18560:	4b92      	ldr	r3, [pc, #584]	; (187ac <lcd_displaying_task+0x71c>)
   18562:	7f1b      	ldrb	r3, [r3, #28]
   18564:	b2db      	uxtb	r3, r3
   18566:	001a      	movs	r2, r3
   18568:	4b91      	ldr	r3, [pc, #580]	; (187b0 <lcd_displaying_task+0x720>)
   1856a:	0011      	movs	r1, r2
   1856c:	0018      	movs	r0, r3
   1856e:	4b88      	ldr	r3, [pc, #544]	; (18790 <lcd_displaying_task+0x700>)
   18570:	4798      	blx	r3
					LCD_setCursor(0,1);
   18572:	2101      	movs	r1, #1
   18574:	2000      	movs	r0, #0
   18576:	4b87      	ldr	r3, [pc, #540]	; (18794 <lcd_displaying_task+0x704>)
   18578:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   1857a:	4b8e      	ldr	r3, [pc, #568]	; (187b4 <lcd_displaying_task+0x724>)
   1857c:	0018      	movs	r0, r3
   1857e:	4b84      	ldr	r3, [pc, #528]	; (18790 <lcd_displaying_task+0x700>)
   18580:	4798      	blx	r3
					LCD_setCursor(9,1);
   18582:	2101      	movs	r1, #1
   18584:	2009      	movs	r0, #9
   18586:	4b83      	ldr	r3, [pc, #524]	; (18794 <lcd_displaying_task+0x704>)
   18588:	4798      	blx	r3
					lcd_printf("       ");
   1858a:	4b8b      	ldr	r3, [pc, #556]	; (187b8 <lcd_displaying_task+0x728>)
   1858c:	0018      	movs	r0, r3
   1858e:	4b80      	ldr	r3, [pc, #512]	; (18790 <lcd_displaying_task+0x700>)
   18590:	4798      	blx	r3
					LCD_setCursor(9,1);
   18592:	2101      	movs	r1, #1
   18594:	2009      	movs	r0, #9
   18596:	4b7f      	ldr	r3, [pc, #508]	; (18794 <lcd_displaying_task+0x704>)
   18598:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   1859a:	233b      	movs	r3, #59	; 0x3b
   1859c:	18fb      	adds	r3, r7, r3
   1859e:	4a87      	ldr	r2, [pc, #540]	; (187bc <lcd_displaying_task+0x72c>)
   185a0:	7812      	ldrb	r2, [r2, #0]
   185a2:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   185a4:	233e      	movs	r3, #62	; 0x3e
   185a6:	18fb      	adds	r3, r7, r3
   185a8:	2200      	movs	r2, #0
   185aa:	701a      	strb	r2, [r3, #0]
   185ac:	e00c      	b.n	185c8 <lcd_displaying_task+0x538>
					{
						LCD_write(i);
   185ae:	233e      	movs	r3, #62	; 0x3e
   185b0:	18fb      	adds	r3, r7, r3
   185b2:	781b      	ldrb	r3, [r3, #0]
   185b4:	0018      	movs	r0, r3
   185b6:	4b82      	ldr	r3, [pc, #520]	; (187c0 <lcd_displaying_task+0x730>)
   185b8:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   185ba:	233e      	movs	r3, #62	; 0x3e
   185bc:	18fb      	adds	r3, r7, r3
   185be:	781a      	ldrb	r2, [r3, #0]
   185c0:	233e      	movs	r3, #62	; 0x3e
   185c2:	18fb      	adds	r3, r7, r3
   185c4:	3201      	adds	r2, #1
   185c6:	701a      	strb	r2, [r3, #0]
   185c8:	233e      	movs	r3, #62	; 0x3e
   185ca:	18fa      	adds	r2, r7, r3
   185cc:	233b      	movs	r3, #59	; 0x3b
   185ce:	18fb      	adds	r3, r7, r3
   185d0:	7812      	ldrb	r2, [r2, #0]
   185d2:	781b      	ldrb	r3, [r3, #0]
   185d4:	429a      	cmp	r2, r3
   185d6:	d9ea      	bls.n	185ae <lcd_displaying_task+0x51e>
					}

					break;
   185d8:	e065      	b.n	186a6 <lcd_displaying_task+0x616>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   185da:	2100      	movs	r1, #0
   185dc:	2000      	movs	r0, #0
   185de:	4b6d      	ldr	r3, [pc, #436]	; (18794 <lcd_displaying_task+0x704>)
   185e0:	4798      	blx	r3
					switch(callStateOnLCD)
   185e2:	4b78      	ldr	r3, [pc, #480]	; (187c4 <lcd_displaying_task+0x734>)
   185e4:	781b      	ldrb	r3, [r3, #0]
   185e6:	2b05      	cmp	r3, #5
   185e8:	d85c      	bhi.n	186a4 <lcd_displaying_task+0x614>
   185ea:	009a      	lsls	r2, r3, #2
   185ec:	4b76      	ldr	r3, [pc, #472]	; (187c8 <lcd_displaying_task+0x738>)
   185ee:	18d3      	adds	r3, r2, r3
   185f0:	681b      	ldr	r3, [r3, #0]
   185f2:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   185f4:	4b75      	ldr	r3, [pc, #468]	; (187cc <lcd_displaying_task+0x73c>)
   185f6:	0018      	movs	r0, r3
   185f8:	4b65      	ldr	r3, [pc, #404]	; (18790 <lcd_displaying_task+0x700>)
   185fa:	4798      	blx	r3
							LCD_setCursor(0,1);
   185fc:	2101      	movs	r1, #1
   185fe:	2000      	movs	r0, #0
   18600:	4b64      	ldr	r3, [pc, #400]	; (18794 <lcd_displaying_task+0x704>)
   18602:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18604:	4a72      	ldr	r2, [pc, #456]	; (187d0 <lcd_displaying_task+0x740>)
   18606:	4b73      	ldr	r3, [pc, #460]	; (187d4 <lcd_displaying_task+0x744>)
   18608:	0011      	movs	r1, r2
   1860a:	0018      	movs	r0, r3
   1860c:	4b60      	ldr	r3, [pc, #384]	; (18790 <lcd_displaying_task+0x700>)
   1860e:	4798      	blx	r3
							break;
   18610:	e045      	b.n	1869e <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   18612:	4b71      	ldr	r3, [pc, #452]	; (187d8 <lcd_displaying_task+0x748>)
   18614:	0018      	movs	r0, r3
   18616:	4b5e      	ldr	r3, [pc, #376]	; (18790 <lcd_displaying_task+0x700>)
   18618:	4798      	blx	r3
							LCD_setCursor(0,1);
   1861a:	2101      	movs	r1, #1
   1861c:	2000      	movs	r0, #0
   1861e:	4b5d      	ldr	r3, [pc, #372]	; (18794 <lcd_displaying_task+0x704>)
   18620:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18622:	4a6b      	ldr	r2, [pc, #428]	; (187d0 <lcd_displaying_task+0x740>)
   18624:	4b6b      	ldr	r3, [pc, #428]	; (187d4 <lcd_displaying_task+0x744>)
   18626:	0011      	movs	r1, r2
   18628:	0018      	movs	r0, r3
   1862a:	4b59      	ldr	r3, [pc, #356]	; (18790 <lcd_displaying_task+0x700>)
   1862c:	4798      	blx	r3
							break;
   1862e:	e036      	b.n	1869e <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   18630:	4b6a      	ldr	r3, [pc, #424]	; (187dc <lcd_displaying_task+0x74c>)
   18632:	0018      	movs	r0, r3
   18634:	4b56      	ldr	r3, [pc, #344]	; (18790 <lcd_displaying_task+0x700>)
   18636:	4798      	blx	r3
							LCD_setCursor(0,1);
   18638:	2101      	movs	r1, #1
   1863a:	2000      	movs	r0, #0
   1863c:	4b55      	ldr	r3, [pc, #340]	; (18794 <lcd_displaying_task+0x704>)
   1863e:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18640:	4a63      	ldr	r2, [pc, #396]	; (187d0 <lcd_displaying_task+0x740>)
   18642:	4b64      	ldr	r3, [pc, #400]	; (187d4 <lcd_displaying_task+0x744>)
   18644:	0011      	movs	r1, r2
   18646:	0018      	movs	r0, r3
   18648:	4b51      	ldr	r3, [pc, #324]	; (18790 <lcd_displaying_task+0x700>)
   1864a:	4798      	blx	r3
							break;
   1864c:	e027      	b.n	1869e <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   1864e:	4b64      	ldr	r3, [pc, #400]	; (187e0 <lcd_displaying_task+0x750>)
   18650:	0018      	movs	r0, r3
   18652:	4b4f      	ldr	r3, [pc, #316]	; (18790 <lcd_displaying_task+0x700>)
   18654:	4798      	blx	r3
							LCD_setCursor(0,1);
   18656:	2101      	movs	r1, #1
   18658:	2000      	movs	r0, #0
   1865a:	4b4e      	ldr	r3, [pc, #312]	; (18794 <lcd_displaying_task+0x704>)
   1865c:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1865e:	4a5c      	ldr	r2, [pc, #368]	; (187d0 <lcd_displaying_task+0x740>)
   18660:	4b5c      	ldr	r3, [pc, #368]	; (187d4 <lcd_displaying_task+0x744>)
   18662:	0011      	movs	r1, r2
   18664:	0018      	movs	r0, r3
   18666:	4b4a      	ldr	r3, [pc, #296]	; (18790 <lcd_displaying_task+0x700>)
   18668:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   1866a:	2200      	movs	r2, #0
   1866c:	2100      	movs	r1, #0
   1866e:	2000      	movs	r0, #0
   18670:	4b5c      	ldr	r3, [pc, #368]	; (187e4 <lcd_displaying_task+0x754>)
   18672:	4798      	blx	r3
							break;
   18674:	e013      	b.n	1869e <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   18676:	4b5c      	ldr	r3, [pc, #368]	; (187e8 <lcd_displaying_task+0x758>)
   18678:	0018      	movs	r0, r3
   1867a:	4b45      	ldr	r3, [pc, #276]	; (18790 <lcd_displaying_task+0x700>)
   1867c:	4798      	blx	r3
							LCD_setCursor(0,1);
   1867e:	2101      	movs	r1, #1
   18680:	2000      	movs	r0, #0
   18682:	4b44      	ldr	r3, [pc, #272]	; (18794 <lcd_displaying_task+0x704>)
   18684:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18686:	4a52      	ldr	r2, [pc, #328]	; (187d0 <lcd_displaying_task+0x740>)
   18688:	4b52      	ldr	r3, [pc, #328]	; (187d4 <lcd_displaying_task+0x744>)
   1868a:	0011      	movs	r1, r2
   1868c:	0018      	movs	r0, r3
   1868e:	4b40      	ldr	r3, [pc, #256]	; (18790 <lcd_displaying_task+0x700>)
   18690:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18692:	2200      	movs	r2, #0
   18694:	2100      	movs	r1, #0
   18696:	2000      	movs	r0, #0
   18698:	4b52      	ldr	r3, [pc, #328]	; (187e4 <lcd_displaying_task+0x754>)
   1869a:	4798      	blx	r3
							break;
   1869c:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   1869e:	e001      	b.n	186a4 <lcd_displaying_task+0x614>
					break;
   186a0:	46c0      	nop			; (mov r8, r8)
   186a2:	e000      	b.n	186a6 <lcd_displaying_task+0x616>
					break;
   186a4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   186a6:	4b51      	ldr	r3, [pc, #324]	; (187ec <lcd_displaying_task+0x75c>)
   186a8:	681b      	ldr	r3, [r3, #0]
   186aa:	223a      	movs	r2, #58	; 0x3a
   186ac:	18b9      	adds	r1, r7, r2
   186ae:	2200      	movs	r2, #0
   186b0:	0018      	movs	r0, r3
   186b2:	4b4f      	ldr	r3, [pc, #316]	; (187f0 <lcd_displaying_task+0x760>)
   186b4:	4798      	blx	r3
   186b6:	1e03      	subs	r3, r0, #0
   186b8:	d057      	beq.n	1876a <lcd_displaying_task+0x6da>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   186ba:	4b4e      	ldr	r3, [pc, #312]	; (187f4 <lcd_displaying_task+0x764>)
   186bc:	6818      	ldr	r0, [r3, #0]
   186be:	23fa      	movs	r3, #250	; 0xfa
   186c0:	011a      	lsls	r2, r3, #4
   186c2:	2301      	movs	r3, #1
   186c4:	425b      	negs	r3, r3
   186c6:	9300      	str	r3, [sp, #0]
   186c8:	2300      	movs	r3, #0
   186ca:	2104      	movs	r1, #4
   186cc:	4c4a      	ldr	r4, [pc, #296]	; (187f8 <lcd_displaying_task+0x768>)
   186ce:	47a0      	blx	r4
			if(varPauseDisplay==false)
   186d0:	4b4a      	ldr	r3, [pc, #296]	; (187fc <lcd_displaying_task+0x76c>)
   186d2:	781b      	ldrb	r3, [r3, #0]
   186d4:	b2db      	uxtb	r3, r3
   186d6:	2201      	movs	r2, #1
   186d8:	4053      	eors	r3, r2
   186da:	b2db      	uxtb	r3, r3
   186dc:	2b00      	cmp	r3, #0
   186de:	d044      	beq.n	1876a <lcd_displaying_task+0x6da>
			{
				screen++;
   186e0:	233f      	movs	r3, #63	; 0x3f
   186e2:	18fb      	adds	r3, r7, r3
   186e4:	781a      	ldrb	r2, [r3, #0]
   186e6:	233f      	movs	r3, #63	; 0x3f
   186e8:	18fb      	adds	r3, r7, r3
   186ea:	3201      	adds	r2, #1
   186ec:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   186ee:	4b44      	ldr	r3, [pc, #272]	; (18800 <lcd_displaying_task+0x770>)
   186f0:	4798      	blx	r3
   186f2:	0003      	movs	r3, r0
   186f4:	001a      	movs	r2, r3
   186f6:	2301      	movs	r3, #1
   186f8:	4053      	eors	r3, r2
   186fa:	b2db      	uxtb	r3, r3
   186fc:	2b00      	cmp	r3, #0
   186fe:	d00b      	beq.n	18718 <lcd_displaying_task+0x688>
   18700:	233f      	movs	r3, #63	; 0x3f
   18702:	18fb      	adds	r3, r7, r3
   18704:	781b      	ldrb	r3, [r3, #0]
   18706:	2b03      	cmp	r3, #3
   18708:	d106      	bne.n	18718 <lcd_displaying_task+0x688>
				{
					screen++;
   1870a:	233f      	movs	r3, #63	; 0x3f
   1870c:	18fb      	adds	r3, r7, r3
   1870e:	781a      	ldrb	r2, [r3, #0]
   18710:	233f      	movs	r3, #63	; 0x3f
   18712:	18fb      	adds	r3, r7, r3
   18714:	3201      	adds	r2, #1
   18716:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   18718:	4b3a      	ldr	r3, [pc, #232]	; (18804 <lcd_displaying_task+0x774>)
   1871a:	795b      	ldrb	r3, [r3, #5]
   1871c:	2b00      	cmp	r3, #0
   1871e:	d10b      	bne.n	18738 <lcd_displaying_task+0x6a8>
   18720:	233f      	movs	r3, #63	; 0x3f
   18722:	18fb      	adds	r3, r7, r3
   18724:	781b      	ldrb	r3, [r3, #0]
   18726:	2b05      	cmp	r3, #5
   18728:	d106      	bne.n	18738 <lcd_displaying_task+0x6a8>
				{
					screen++;
   1872a:	233f      	movs	r3, #63	; 0x3f
   1872c:	18fb      	adds	r3, r7, r3
   1872e:	781a      	ldrb	r2, [r3, #0]
   18730:	233f      	movs	r3, #63	; 0x3f
   18732:	18fb      	adds	r3, r7, r3
   18734:	3201      	adds	r2, #1
   18736:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   18738:	4b22      	ldr	r3, [pc, #136]	; (187c4 <lcd_displaying_task+0x734>)
   1873a:	781b      	ldrb	r3, [r3, #0]
   1873c:	2b00      	cmp	r3, #0
   1873e:	d10c      	bne.n	1875a <lcd_displaying_task+0x6ca>
   18740:	233f      	movs	r3, #63	; 0x3f
   18742:	18fb      	adds	r3, r7, r3
   18744:	781b      	ldrb	r3, [r3, #0]
   18746:	2b07      	cmp	r3, #7
   18748:	d107      	bne.n	1875a <lcd_displaying_task+0x6ca>
					{
						screen++;
   1874a:	233f      	movs	r3, #63	; 0x3f
   1874c:	18fb      	adds	r3, r7, r3
   1874e:	781a      	ldrb	r2, [r3, #0]
   18750:	233f      	movs	r3, #63	; 0x3f
   18752:	18fb      	adds	r3, r7, r3
   18754:	3201      	adds	r2, #1
   18756:	701a      	strb	r2, [r3, #0]
   18758:	e007      	b.n	1876a <lcd_displaying_task+0x6da>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1875a:	4b1a      	ldr	r3, [pc, #104]	; (187c4 <lcd_displaying_task+0x734>)
   1875c:	781b      	ldrb	r3, [r3, #0]
   1875e:	2b00      	cmp	r3, #0
   18760:	d003      	beq.n	1876a <lcd_displaying_task+0x6da>
					{
						screen=7;
   18762:	233f      	movs	r3, #63	; 0x3f
   18764:	18fb      	adds	r3, r7, r3
   18766:	2207      	movs	r2, #7
   18768:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		
		if (screen>7)
   1876a:	233f      	movs	r3, #63	; 0x3f
   1876c:	18fb      	adds	r3, r7, r3
   1876e:	781b      	ldrb	r3, [r3, #0]
   18770:	2b07      	cmp	r3, #7
   18772:	d903      	bls.n	1877c <lcd_displaying_task+0x6ec>
		{
			screen=1;
   18774:	233f      	movs	r3, #63	; 0x3f
   18776:	18fb      	adds	r3, r7, r3
   18778:	2201      	movs	r2, #1
   1877a:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
   1877c:	23fa      	movs	r3, #250	; 0xfa
   1877e:	005b      	lsls	r3, r3, #1
   18780:	0018      	movs	r0, r3
   18782:	4b21      	ldr	r3, [pc, #132]	; (18808 <lcd_displaying_task+0x778>)
   18784:	4798      	blx	r3
		if (lcd_in_sleep)
   18786:	e4ef      	b.n	18168 <lcd_displaying_task+0xd8>
   18788:	20000784 	.word	0x20000784
   1878c:	0002a82c 	.word	0x0002a82c
   18790:	00013f45 	.word	0x00013f45
   18794:	00013e49 	.word	0x00013e49
   18798:	0002a834 	.word	0x0002a834
   1879c:	20000854 	.word	0x20000854
   187a0:	0002a840 	.word	0x0002a840
   187a4:	0002a824 	.word	0x0002a824
   187a8:	0002a81c 	.word	0x0002a81c
   187ac:	200006d8 	.word	0x200006d8
   187b0:	0002a848 	.word	0x0002a848
   187b4:	0002a85c 	.word	0x0002a85c
   187b8:	0002a868 	.word	0x0002a868
   187bc:	2000077d 	.word	0x2000077d
   187c0:	00013cfd 	.word	0x00013cfd
   187c4:	200007c9 	.word	0x200007c9
   187c8:	0002a924 	.word	0x0002a924
   187cc:	0002a870 	.word	0x0002a870
   187d0:	20000840 	.word	0x20000840
   187d4:	0002a884 	.word	0x0002a884
   187d8:	0002a88c 	.word	0x0002a88c
   187dc:	0002a8a0 	.word	0x0002a8a0
   187e0:	0002a8b4 	.word	0x0002a8b4
   187e4:	0001cb31 	.word	0x0001cb31
   187e8:	0002a8c8 	.word	0x0002a8c8
   187ec:	20000230 	.word	0x20000230
   187f0:	0001f441 	.word	0x0001f441
   187f4:	20000234 	.word	0x20000234
   187f8:	00020ead 	.word	0x00020ead
   187fc:	200007a0 	.word	0x200007a0
   18800:	0001aaf5 	.word	0x0001aaf5
   18804:	20000628 	.word	0x20000628
   18808:	0001fee9 	.word	0x0001fee9

0001880c <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   1880c:	b590      	push	{r4, r7, lr}
   1880e:	b083      	sub	sp, #12
   18810:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   18812:	2200      	movs	r2, #0
   18814:	2101      	movs	r1, #1
   18816:	2001      	movs	r0, #1
   18818:	4b09      	ldr	r3, [pc, #36]	; (18840 <start_lcd_service+0x34>)
   1881a:	4798      	blx	r3
   1881c:	0002      	movs	r2, r0
   1881e:	4b09      	ldr	r3, [pc, #36]	; (18844 <start_lcd_service+0x38>)
   18820:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
   18822:	23c8      	movs	r3, #200	; 0xc8
   18824:	005a      	lsls	r2, r3, #1
   18826:	4808      	ldr	r0, [pc, #32]	; (18848 <start_lcd_service+0x3c>)
   18828:	2300      	movs	r3, #0
   1882a:	9301      	str	r3, [sp, #4]
   1882c:	2301      	movs	r3, #1
   1882e:	9300      	str	r3, [sp, #0]
   18830:	2300      	movs	r3, #0
   18832:	2100      	movs	r1, #0
   18834:	4c05      	ldr	r4, [pc, #20]	; (1884c <start_lcd_service+0x40>)
   18836:	47a0      	blx	r4
	
}
   18838:	46c0      	nop			; (mov r8, r8)
   1883a:	46bd      	mov	sp, r7
   1883c:	b001      	add	sp, #4
   1883e:	bd90      	pop	{r4, r7, pc}
   18840:	0001f085 	.word	0x0001f085
   18844:	20000230 	.word	0x20000230
   18848:	00018091 	.word	0x00018091
   1884c:	0001fba9 	.word	0x0001fba9

00018850 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   18850:	b590      	push	{r4, r7, lr}
   18852:	b085      	sub	sp, #20
   18854:	af00      	add	r7, sp, #0
   18856:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   18858:	230f      	movs	r3, #15
   1885a:	18fb      	adds	r3, r7, r3
   1885c:	2201      	movs	r2, #1
   1885e:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   18860:	4b05      	ldr	r3, [pc, #20]	; (18878 <four_second_timer_callback+0x28>)
   18862:	6818      	ldr	r0, [r3, #0]
   18864:	230f      	movs	r3, #15
   18866:	18f9      	adds	r1, r7, r3
   18868:	2300      	movs	r3, #0
   1886a:	2200      	movs	r2, #0
   1886c:	4c03      	ldr	r4, [pc, #12]	; (1887c <four_second_timer_callback+0x2c>)
   1886e:	47a0      	blx	r4
}
   18870:	46c0      	nop			; (mov r8, r8)
   18872:	46bd      	mov	sp, r7
   18874:	b005      	add	sp, #20
   18876:	bd90      	pop	{r4, r7, pc}
   18878:	20000230 	.word	0x20000230
   1887c:	0001f321 	.word	0x0001f321

00018880 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   18880:	b580      	push	{r7, lr}
   18882:	b084      	sub	sp, #16
   18884:	af00      	add	r7, sp, #0
   18886:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   18888:	687b      	ldr	r3, [r7, #4]
   1888a:	681b      	ldr	r3, [r3, #0]
   1888c:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1888e:	68fb      	ldr	r3, [r7, #12]
   18890:	7a5b      	ldrb	r3, [r3, #9]
   18892:	b2db      	uxtb	r3, r3
   18894:	b25b      	sxtb	r3, r3
   18896:	2b00      	cmp	r3, #0
   18898:	da01      	bge.n	1889e <ac_is_syncing+0x1e>
		return true;
   1889a:	2301      	movs	r3, #1
   1889c:	e000      	b.n	188a0 <ac_is_syncing+0x20>
	}

	return false;
   1889e:	2300      	movs	r3, #0
#endif
}
   188a0:	0018      	movs	r0, r3
   188a2:	46bd      	mov	sp, r7
   188a4:	b004      	add	sp, #16
   188a6:	bd80      	pop	{r7, pc}

000188a8 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   188a8:	b580      	push	{r7, lr}
   188aa:	b084      	sub	sp, #16
   188ac:	af00      	add	r7, sp, #0
   188ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   188b0:	2300      	movs	r3, #0
   188b2:	60fb      	str	r3, [r7, #12]
   188b4:	e007      	b.n	188c6 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   188b6:	687a      	ldr	r2, [r7, #4]
   188b8:	68fb      	ldr	r3, [r7, #12]
   188ba:	18d3      	adds	r3, r2, r3
   188bc:	2200      	movs	r2, #0
   188be:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   188c0:	68fb      	ldr	r3, [r7, #12]
   188c2:	3301      	adds	r3, #1
   188c4:	60fb      	str	r3, [r7, #12]
   188c6:	68fb      	ldr	r3, [r7, #12]
   188c8:	2b00      	cmp	r3, #0
   188ca:	d0f4      	beq.n	188b6 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   188cc:	687b      	ldr	r3, [r7, #4]
   188ce:	2200      	movs	r2, #0
   188d0:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   188d2:	687b      	ldr	r3, [r7, #4]
   188d4:	2203      	movs	r2, #3
   188d6:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   188d8:	46c0      	nop			; (mov r8, r8)
   188da:	46bd      	mov	sp, r7
   188dc:	b004      	add	sp, #16
   188de:	bd80      	pop	{r7, pc}

000188e0 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   188e0:	b580      	push	{r7, lr}
   188e2:	b084      	sub	sp, #16
   188e4:	af00      	add	r7, sp, #0
   188e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   188e8:	687b      	ldr	r3, [r7, #4]
   188ea:	681b      	ldr	r3, [r3, #0]
   188ec:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   188ee:	46c0      	nop			; (mov r8, r8)
   188f0:	687b      	ldr	r3, [r7, #4]
   188f2:	0018      	movs	r0, r3
   188f4:	4b07      	ldr	r3, [pc, #28]	; (18914 <ac_enable+0x34>)
   188f6:	4798      	blx	r3
   188f8:	1e03      	subs	r3, r0, #0
   188fa:	d1f9      	bne.n	188f0 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   188fc:	68fb      	ldr	r3, [r7, #12]
   188fe:	781b      	ldrb	r3, [r3, #0]
   18900:	b2db      	uxtb	r3, r3
   18902:	2202      	movs	r2, #2
   18904:	4313      	orrs	r3, r2
   18906:	b2da      	uxtb	r2, r3
   18908:	68fb      	ldr	r3, [r7, #12]
   1890a:	701a      	strb	r2, [r3, #0]
}
   1890c:	46c0      	nop			; (mov r8, r8)
   1890e:	46bd      	mov	sp, r7
   18910:	b004      	add	sp, #16
   18912:	bd80      	pop	{r7, pc}
   18914:	00018881 	.word	0x00018881

00018918 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   18918:	b580      	push	{r7, lr}
   1891a:	b086      	sub	sp, #24
   1891c:	af00      	add	r7, sp, #0
   1891e:	6078      	str	r0, [r7, #4]
   18920:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   18922:	687b      	ldr	r3, [r7, #4]
   18924:	681b      	ldr	r3, [r3, #0]
   18926:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   18928:	2300      	movs	r3, #0
   1892a:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   1892c:	2313      	movs	r3, #19
   1892e:	18fb      	adds	r3, r7, r3
   18930:	2200      	movs	r2, #0
   18932:	701a      	strb	r2, [r3, #0]
   18934:	e017      	b.n	18966 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   18936:	2313      	movs	r3, #19
   18938:	18fb      	adds	r3, r7, r3
   1893a:	781b      	ldrb	r3, [r3, #0]
   1893c:	683a      	ldr	r2, [r7, #0]
   1893e:	5cd3      	ldrb	r3, [r2, r3]
   18940:	2b00      	cmp	r3, #0
   18942:	d009      	beq.n	18958 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   18944:	2313      	movs	r3, #19
   18946:	18fb      	adds	r3, r7, r3
   18948:	781b      	ldrb	r3, [r3, #0]
   1894a:	2210      	movs	r2, #16
   1894c:	409a      	lsls	r2, r3
   1894e:	0013      	movs	r3, r2
   18950:	001a      	movs	r2, r3
   18952:	697b      	ldr	r3, [r7, #20]
   18954:	4313      	orrs	r3, r2
   18956:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18958:	2313      	movs	r3, #19
   1895a:	18fb      	adds	r3, r7, r3
   1895c:	781a      	ldrb	r2, [r3, #0]
   1895e:	2313      	movs	r3, #19
   18960:	18fb      	adds	r3, r7, r3
   18962:	3201      	adds	r2, #1
   18964:	701a      	strb	r2, [r3, #0]
   18966:	2313      	movs	r3, #19
   18968:	18fb      	adds	r3, r7, r3
   1896a:	781b      	ldrb	r3, [r3, #0]
   1896c:	2b00      	cmp	r3, #0
   1896e:	d0e2      	beq.n	18936 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18970:	2312      	movs	r3, #18
   18972:	18fb      	adds	r3, r7, r3
   18974:	2200      	movs	r2, #0
   18976:	701a      	strb	r2, [r3, #0]
   18978:	e02b      	b.n	189d2 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   1897a:	2312      	movs	r3, #18
   1897c:	18fb      	adds	r3, r7, r3
   1897e:	781b      	ldrb	r3, [r3, #0]
   18980:	683a      	ldr	r2, [r7, #0]
   18982:	18d3      	adds	r3, r2, r3
   18984:	78db      	ldrb	r3, [r3, #3]
   18986:	2b00      	cmp	r3, #0
   18988:	d00a      	beq.n	189a0 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   1898a:	2312      	movs	r3, #18
   1898c:	18fb      	adds	r3, r7, r3
   1898e:	781b      	ldrb	r3, [r3, #0]
   18990:	2280      	movs	r2, #128	; 0x80
   18992:	0052      	lsls	r2, r2, #1
   18994:	409a      	lsls	r2, r3
   18996:	0013      	movs	r3, r2
   18998:	001a      	movs	r2, r3
   1899a:	697b      	ldr	r3, [r7, #20]
   1899c:	4313      	orrs	r3, r2
   1899e:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   189a0:	2312      	movs	r3, #18
   189a2:	18fb      	adds	r3, r7, r3
   189a4:	781b      	ldrb	r3, [r3, #0]
   189a6:	683a      	ldr	r2, [r7, #0]
   189a8:	18d3      	adds	r3, r2, r3
   189aa:	785b      	ldrb	r3, [r3, #1]
   189ac:	2b00      	cmp	r3, #0
   189ae:	d009      	beq.n	189c4 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   189b0:	2312      	movs	r3, #18
   189b2:	18fb      	adds	r3, r7, r3
   189b4:	781b      	ldrb	r3, [r3, #0]
   189b6:	2201      	movs	r2, #1
   189b8:	409a      	lsls	r2, r3
   189ba:	0013      	movs	r3, r2
   189bc:	001a      	movs	r2, r3
   189be:	697b      	ldr	r3, [r7, #20]
   189c0:	4313      	orrs	r3, r2
   189c2:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   189c4:	2312      	movs	r3, #18
   189c6:	18fb      	adds	r3, r7, r3
   189c8:	781a      	ldrb	r2, [r3, #0]
   189ca:	2312      	movs	r3, #18
   189cc:	18fb      	adds	r3, r7, r3
   189ce:	3201      	adds	r2, #1
   189d0:	701a      	strb	r2, [r3, #0]
   189d2:	2312      	movs	r3, #18
   189d4:	18fb      	adds	r3, r7, r3
   189d6:	781b      	ldrb	r3, [r3, #0]
   189d8:	2b01      	cmp	r3, #1
   189da:	d9ce      	bls.n	1897a <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   189dc:	68fb      	ldr	r3, [r7, #12]
   189de:	885b      	ldrh	r3, [r3, #2]
   189e0:	b29a      	uxth	r2, r3
   189e2:	697b      	ldr	r3, [r7, #20]
   189e4:	b29b      	uxth	r3, r3
   189e6:	4313      	orrs	r3, r2
   189e8:	b29a      	uxth	r2, r3
   189ea:	68fb      	ldr	r3, [r7, #12]
   189ec:	805a      	strh	r2, [r3, #2]
}
   189ee:	46c0      	nop			; (mov r8, r8)
   189f0:	46bd      	mov	sp, r7
   189f2:	b006      	add	sp, #24
   189f4:	bd80      	pop	{r7, pc}
	...

000189f8 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   189f8:	b580      	push	{r7, lr}
   189fa:	b084      	sub	sp, #16
   189fc:	af00      	add	r7, sp, #0
   189fe:	6078      	str	r0, [r7, #4]
   18a00:	000a      	movs	r2, r1
   18a02:	1cfb      	adds	r3, r7, #3
   18a04:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18a06:	687b      	ldr	r3, [r7, #4]
   18a08:	681b      	ldr	r3, [r3, #0]
   18a0a:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18a0c:	46c0      	nop			; (mov r8, r8)
   18a0e:	687b      	ldr	r3, [r7, #4]
   18a10:	0018      	movs	r0, r3
   18a12:	4b0b      	ldr	r3, [pc, #44]	; (18a40 <ac_chan_enable+0x48>)
   18a14:	4798      	blx	r3
   18a16:	1e03      	subs	r3, r0, #0
   18a18:	d1f9      	bne.n	18a0e <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   18a1a:	1cfb      	adds	r3, r7, #3
   18a1c:	781a      	ldrb	r2, [r3, #0]
   18a1e:	1cfb      	adds	r3, r7, #3
   18a20:	7819      	ldrb	r1, [r3, #0]
   18a22:	68fb      	ldr	r3, [r7, #12]
   18a24:	3104      	adds	r1, #4
   18a26:	0089      	lsls	r1, r1, #2
   18a28:	58cb      	ldr	r3, [r1, r3]
   18a2a:	2101      	movs	r1, #1
   18a2c:	4319      	orrs	r1, r3
   18a2e:	68fb      	ldr	r3, [r7, #12]
   18a30:	3204      	adds	r2, #4
   18a32:	0092      	lsls	r2, r2, #2
   18a34:	50d1      	str	r1, [r2, r3]
}
   18a36:	46c0      	nop			; (mov r8, r8)
   18a38:	46bd      	mov	sp, r7
   18a3a:	b004      	add	sp, #16
   18a3c:	bd80      	pop	{r7, pc}
   18a3e:	46c0      	nop			; (mov r8, r8)
   18a40:	00018881 	.word	0x00018881

00018a44 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18a44:	b580      	push	{r7, lr}
   18a46:	b084      	sub	sp, #16
   18a48:	af00      	add	r7, sp, #0
   18a4a:	6078      	str	r0, [r7, #4]
   18a4c:	000a      	movs	r2, r1
   18a4e:	1cfb      	adds	r3, r7, #3
   18a50:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18a52:	687b      	ldr	r3, [r7, #4]
   18a54:	681b      	ldr	r3, [r3, #0]
   18a56:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   18a58:	68fb      	ldr	r3, [r7, #12]
   18a5a:	7a5b      	ldrb	r3, [r3, #9]
   18a5c:	b2db      	uxtb	r3, r3
   18a5e:	0019      	movs	r1, r3
   18a60:	1cfb      	adds	r3, r7, #3
   18a62:	781b      	ldrb	r3, [r3, #0]
   18a64:	2201      	movs	r2, #1
   18a66:	409a      	lsls	r2, r3
   18a68:	0013      	movs	r3, r2
   18a6a:	400b      	ands	r3, r1
   18a6c:	1e5a      	subs	r2, r3, #1
   18a6e:	4193      	sbcs	r3, r2
   18a70:	b2db      	uxtb	r3, r3
}
   18a72:	0018      	movs	r0, r3
   18a74:	46bd      	mov	sp, r7
   18a76:	b004      	add	sp, #16
   18a78:	bd80      	pop	{r7, pc}
	...

00018a7c <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18a7c:	b580      	push	{r7, lr}
   18a7e:	b084      	sub	sp, #16
   18a80:	af00      	add	r7, sp, #0
   18a82:	6078      	str	r0, [r7, #4]
   18a84:	000a      	movs	r2, r1
   18a86:	1cfb      	adds	r3, r7, #3
   18a88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18a8a:	687b      	ldr	r3, [r7, #4]
   18a8c:	681b      	ldr	r3, [r3, #0]
   18a8e:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   18a90:	230f      	movs	r3, #15
   18a92:	18fb      	adds	r3, r7, r3
   18a94:	2200      	movs	r2, #0
   18a96:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   18a98:	68bb      	ldr	r3, [r7, #8]
   18a9a:	799b      	ldrb	r3, [r3, #6]
   18a9c:	b2db      	uxtb	r3, r3
   18a9e:	001a      	movs	r2, r3
   18aa0:	1cfb      	adds	r3, r7, #3
   18aa2:	781b      	ldrb	r3, [r3, #0]
   18aa4:	411a      	asrs	r2, r3
   18aa6:	0013      	movs	r3, r2
   18aa8:	2201      	movs	r2, #1
   18aaa:	4013      	ands	r3, r2
   18aac:	d003      	beq.n	18ab6 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   18aae:	230f      	movs	r3, #15
   18ab0:	18fb      	adds	r3, r7, r3
   18ab2:	2208      	movs	r2, #8
   18ab4:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   18ab6:	1cfb      	adds	r3, r7, #3
   18ab8:	781a      	ldrb	r2, [r3, #0]
   18aba:	687b      	ldr	r3, [r7, #4]
   18abc:	0011      	movs	r1, r2
   18abe:	0018      	movs	r0, r3
   18ac0:	4b1b      	ldr	r3, [pc, #108]	; (18b30 <ac_chan_get_status+0xb4>)
   18ac2:	4798      	blx	r3
   18ac4:	0003      	movs	r3, r0
   18ac6:	001a      	movs	r2, r3
   18ac8:	2301      	movs	r3, #1
   18aca:	4053      	eors	r3, r2
   18acc:	b2db      	uxtb	r3, r3
   18ace:	2b00      	cmp	r3, #0
   18ad0:	d00b      	beq.n	18aea <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   18ad2:	230f      	movs	r3, #15
   18ad4:	18fb      	adds	r3, r7, r3
   18ad6:	220f      	movs	r2, #15
   18ad8:	18ba      	adds	r2, r7, r2
   18ada:	7812      	ldrb	r2, [r2, #0]
   18adc:	2101      	movs	r1, #1
   18ade:	430a      	orrs	r2, r1
   18ae0:	701a      	strb	r2, [r3, #0]
		return status_mask;
   18ae2:	230f      	movs	r3, #15
   18ae4:	18fb      	adds	r3, r7, r3
   18ae6:	781b      	ldrb	r3, [r3, #0]
   18ae8:	e01e      	b.n	18b28 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   18aea:	68bb      	ldr	r3, [r7, #8]
   18aec:	7a1b      	ldrb	r3, [r3, #8]
   18aee:	b2db      	uxtb	r3, r3
   18af0:	001a      	movs	r2, r3
   18af2:	1cfb      	adds	r3, r7, #3
   18af4:	781b      	ldrb	r3, [r3, #0]
   18af6:	411a      	asrs	r2, r3
   18af8:	0013      	movs	r3, r2
   18afa:	2201      	movs	r2, #1
   18afc:	4013      	ands	r3, r2
   18afe:	d008      	beq.n	18b12 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   18b00:	230f      	movs	r3, #15
   18b02:	18fb      	adds	r3, r7, r3
   18b04:	220f      	movs	r2, #15
   18b06:	18ba      	adds	r2, r7, r2
   18b08:	7812      	ldrb	r2, [r2, #0]
   18b0a:	2104      	movs	r1, #4
   18b0c:	430a      	orrs	r2, r1
   18b0e:	701a      	strb	r2, [r3, #0]
   18b10:	e007      	b.n	18b22 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   18b12:	230f      	movs	r3, #15
   18b14:	18fb      	adds	r3, r7, r3
   18b16:	220f      	movs	r2, #15
   18b18:	18ba      	adds	r2, r7, r2
   18b1a:	7812      	ldrb	r2, [r2, #0]
   18b1c:	2102      	movs	r1, #2
   18b1e:	430a      	orrs	r2, r1
   18b20:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   18b22:	230f      	movs	r3, #15
   18b24:	18fb      	adds	r3, r7, r3
   18b26:	781b      	ldrb	r3, [r3, #0]
}
   18b28:	0018      	movs	r0, r3
   18b2a:	46bd      	mov	sp, r7
   18b2c:	b004      	add	sp, #16
   18b2e:	bd80      	pop	{r7, pc}
   18b30:	00018a45 	.word	0x00018a45

00018b34 <system_interrupt_enable>:
{
   18b34:	b580      	push	{r7, lr}
   18b36:	b082      	sub	sp, #8
   18b38:	af00      	add	r7, sp, #0
   18b3a:	0002      	movs	r2, r0
   18b3c:	1dfb      	adds	r3, r7, #7
   18b3e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18b40:	4b06      	ldr	r3, [pc, #24]	; (18b5c <system_interrupt_enable+0x28>)
   18b42:	1dfa      	adds	r2, r7, #7
   18b44:	7812      	ldrb	r2, [r2, #0]
   18b46:	0011      	movs	r1, r2
   18b48:	221f      	movs	r2, #31
   18b4a:	400a      	ands	r2, r1
   18b4c:	2101      	movs	r1, #1
   18b4e:	4091      	lsls	r1, r2
   18b50:	000a      	movs	r2, r1
   18b52:	601a      	str	r2, [r3, #0]
}
   18b54:	46c0      	nop			; (mov r8, r8)
   18b56:	46bd      	mov	sp, r7
   18b58:	b002      	add	sp, #8
   18b5a:	bd80      	pop	{r7, pc}
   18b5c:	e000e100 	.word	0xe000e100

00018b60 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   18b60:	b580      	push	{r7, lr}
   18b62:	b084      	sub	sp, #16
   18b64:	af00      	add	r7, sp, #0
   18b66:	6078      	str	r0, [r7, #4]
   18b68:	000a      	movs	r2, r1
   18b6a:	1cfb      	adds	r3, r7, #3
   18b6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   18b6e:	687b      	ldr	r3, [r7, #4]
   18b70:	7e5b      	ldrb	r3, [r3, #25]
   18b72:	b25a      	sxtb	r2, r3
   18b74:	1cfb      	adds	r3, r7, #3
   18b76:	781b      	ldrb	r3, [r3, #0]
   18b78:	2101      	movs	r1, #1
   18b7a:	4099      	lsls	r1, r3
   18b7c:	000b      	movs	r3, r1
   18b7e:	b25b      	sxtb	r3, r3
   18b80:	4313      	orrs	r3, r2
   18b82:	b25b      	sxtb	r3, r3
   18b84:	b2da      	uxtb	r2, r3
   18b86:	687b      	ldr	r3, [r7, #4]
   18b88:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   18b8a:	2300      	movs	r3, #0
   18b8c:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   18b8e:	1cfb      	adds	r3, r7, #3
   18b90:	781b      	ldrb	r3, [r3, #0]
   18b92:	2b01      	cmp	r3, #1
   18b94:	d009      	beq.n	18baa <ac_enable_callback+0x4a>
   18b96:	2b04      	cmp	r3, #4
   18b98:	d00c      	beq.n	18bb4 <ac_enable_callback+0x54>
   18b9a:	2b00      	cmp	r3, #0
   18b9c:	d000      	beq.n	18ba0 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   18b9e:	e00e      	b.n	18bbe <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   18ba0:	68fb      	ldr	r3, [r7, #12]
   18ba2:	2201      	movs	r2, #1
   18ba4:	4313      	orrs	r3, r2
   18ba6:	60fb      	str	r3, [r7, #12]
			break;
   18ba8:	e009      	b.n	18bbe <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   18baa:	68fb      	ldr	r3, [r7, #12]
   18bac:	2202      	movs	r2, #2
   18bae:	4313      	orrs	r3, r2
   18bb0:	60fb      	str	r3, [r7, #12]
			break;
   18bb2:	e004      	b.n	18bbe <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   18bb4:	68fb      	ldr	r3, [r7, #12]
   18bb6:	2210      	movs	r2, #16
   18bb8:	4313      	orrs	r3, r2
   18bba:	60fb      	str	r3, [r7, #12]
			break;
   18bbc:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   18bbe:	687b      	ldr	r3, [r7, #4]
   18bc0:	681b      	ldr	r3, [r3, #0]
   18bc2:	68fa      	ldr	r2, [r7, #12]
   18bc4:	b2d2      	uxtb	r2, r2
   18bc6:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   18bc8:	2018      	movs	r0, #24
   18bca:	4b03      	ldr	r3, [pc, #12]	; (18bd8 <ac_enable_callback+0x78>)
   18bcc:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   18bce:	46c0      	nop			; (mov r8, r8)
   18bd0:	46bd      	mov	sp, r7
   18bd2:	b004      	add	sp, #16
   18bd4:	bd80      	pop	{r7, pc}
   18bd6:	46c0      	nop			; (mov r8, r8)
   18bd8:	00018b35 	.word	0x00018b35

00018bdc <system_pinmux_get_group_from_gpio_pin>:
{
   18bdc:	b580      	push	{r7, lr}
   18bde:	b084      	sub	sp, #16
   18be0:	af00      	add	r7, sp, #0
   18be2:	0002      	movs	r2, r0
   18be4:	1dfb      	adds	r3, r7, #7
   18be6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   18be8:	230f      	movs	r3, #15
   18bea:	18fb      	adds	r3, r7, r3
   18bec:	1dfa      	adds	r2, r7, #7
   18bee:	7812      	ldrb	r2, [r2, #0]
   18bf0:	09d2      	lsrs	r2, r2, #7
   18bf2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18bf4:	230e      	movs	r3, #14
   18bf6:	18fb      	adds	r3, r7, r3
   18bf8:	1dfa      	adds	r2, r7, #7
   18bfa:	7812      	ldrb	r2, [r2, #0]
   18bfc:	0952      	lsrs	r2, r2, #5
   18bfe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18c00:	4b0d      	ldr	r3, [pc, #52]	; (18c38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18c02:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   18c04:	230f      	movs	r3, #15
   18c06:	18fb      	adds	r3, r7, r3
   18c08:	781b      	ldrb	r3, [r3, #0]
   18c0a:	2b00      	cmp	r3, #0
   18c0c:	d10f      	bne.n	18c2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18c0e:	230f      	movs	r3, #15
   18c10:	18fb      	adds	r3, r7, r3
   18c12:	781b      	ldrb	r3, [r3, #0]
   18c14:	009b      	lsls	r3, r3, #2
   18c16:	2210      	movs	r2, #16
   18c18:	4694      	mov	ip, r2
   18c1a:	44bc      	add	ip, r7
   18c1c:	4463      	add	r3, ip
   18c1e:	3b08      	subs	r3, #8
   18c20:	681a      	ldr	r2, [r3, #0]
   18c22:	230e      	movs	r3, #14
   18c24:	18fb      	adds	r3, r7, r3
   18c26:	781b      	ldrb	r3, [r3, #0]
   18c28:	01db      	lsls	r3, r3, #7
   18c2a:	18d3      	adds	r3, r2, r3
   18c2c:	e000      	b.n	18c30 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18c2e:	2300      	movs	r3, #0
}
   18c30:	0018      	movs	r0, r3
   18c32:	46bd      	mov	sp, r7
   18c34:	b004      	add	sp, #16
   18c36:	bd80      	pop	{r7, pc}
   18c38:	41004400 	.word	0x41004400

00018c3c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   18c3c:	b580      	push	{r7, lr}
   18c3e:	b084      	sub	sp, #16
   18c40:	af00      	add	r7, sp, #0
   18c42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   18c44:	687b      	ldr	r3, [r7, #4]
   18c46:	681b      	ldr	r3, [r3, #0]
   18c48:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   18c4a:	68fb      	ldr	r3, [r7, #12]
   18c4c:	7e5b      	ldrb	r3, [r3, #25]
   18c4e:	b2db      	uxtb	r3, r3
   18c50:	b25b      	sxtb	r3, r3
   18c52:	2b00      	cmp	r3, #0
   18c54:	da01      	bge.n	18c5a <adc_is_syncing+0x1e>
		return true;
   18c56:	2301      	movs	r3, #1
   18c58:	e000      	b.n	18c5c <adc_is_syncing+0x20>
	}

	return false;
   18c5a:	2300      	movs	r3, #0
}
   18c5c:	0018      	movs	r0, r3
   18c5e:	46bd      	mov	sp, r7
   18c60:	b004      	add	sp, #16
   18c62:	bd80      	pop	{r7, pc}

00018c64 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   18c64:	b580      	push	{r7, lr}
   18c66:	b086      	sub	sp, #24
   18c68:	af00      	add	r7, sp, #0
   18c6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18c6c:	687b      	ldr	r3, [r7, #4]
   18c6e:	681b      	ldr	r3, [r3, #0]
   18c70:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   18c72:	693b      	ldr	r3, [r7, #16]
   18c74:	7e1b      	ldrb	r3, [r3, #24]
   18c76:	b2db      	uxtb	r3, r3
   18c78:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   18c7a:	2300      	movs	r3, #0
   18c7c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   18c7e:	68fb      	ldr	r3, [r7, #12]
   18c80:	2201      	movs	r2, #1
   18c82:	4013      	ands	r3, r2
   18c84:	d003      	beq.n	18c8e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   18c86:	697b      	ldr	r3, [r7, #20]
   18c88:	2201      	movs	r2, #1
   18c8a:	4313      	orrs	r3, r2
   18c8c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   18c8e:	68fb      	ldr	r3, [r7, #12]
   18c90:	2204      	movs	r2, #4
   18c92:	4013      	ands	r3, r2
   18c94:	d003      	beq.n	18c9e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   18c96:	697b      	ldr	r3, [r7, #20]
   18c98:	2202      	movs	r2, #2
   18c9a:	4313      	orrs	r3, r2
   18c9c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   18c9e:	68fb      	ldr	r3, [r7, #12]
   18ca0:	2202      	movs	r2, #2
   18ca2:	4013      	ands	r3, r2
   18ca4:	d003      	beq.n	18cae <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   18ca6:	697b      	ldr	r3, [r7, #20]
   18ca8:	2204      	movs	r2, #4
   18caa:	4313      	orrs	r3, r2
   18cac:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   18cae:	697b      	ldr	r3, [r7, #20]
}
   18cb0:	0018      	movs	r0, r3
   18cb2:	46bd      	mov	sp, r7
   18cb4:	b006      	add	sp, #24
   18cb6:	bd80      	pop	{r7, pc}

00018cb8 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   18cb8:	b580      	push	{r7, lr}
   18cba:	b084      	sub	sp, #16
   18cbc:	af00      	add	r7, sp, #0
   18cbe:	6078      	str	r0, [r7, #4]
   18cc0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18cc2:	687b      	ldr	r3, [r7, #4]
   18cc4:	681b      	ldr	r3, [r3, #0]
   18cc6:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   18cc8:	2300      	movs	r3, #0
   18cca:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   18ccc:	683b      	ldr	r3, [r7, #0]
   18cce:	2201      	movs	r2, #1
   18cd0:	4013      	ands	r3, r2
   18cd2:	d003      	beq.n	18cdc <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   18cd4:	68fb      	ldr	r3, [r7, #12]
   18cd6:	2201      	movs	r2, #1
   18cd8:	4313      	orrs	r3, r2
   18cda:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   18cdc:	683b      	ldr	r3, [r7, #0]
   18cde:	2202      	movs	r2, #2
   18ce0:	4013      	ands	r3, r2
   18ce2:	d003      	beq.n	18cec <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   18ce4:	68fb      	ldr	r3, [r7, #12]
   18ce6:	2204      	movs	r2, #4
   18ce8:	4313      	orrs	r3, r2
   18cea:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   18cec:	683b      	ldr	r3, [r7, #0]
   18cee:	2204      	movs	r2, #4
   18cf0:	4013      	ands	r3, r2
   18cf2:	d003      	beq.n	18cfc <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   18cf4:	68fb      	ldr	r3, [r7, #12]
   18cf6:	2202      	movs	r2, #2
   18cf8:	4313      	orrs	r3, r2
   18cfa:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   18cfc:	68fb      	ldr	r3, [r7, #12]
   18cfe:	b2da      	uxtb	r2, r3
   18d00:	68bb      	ldr	r3, [r7, #8]
   18d02:	761a      	strb	r2, [r3, #24]
}
   18d04:	46c0      	nop			; (mov r8, r8)
   18d06:	46bd      	mov	sp, r7
   18d08:	b004      	add	sp, #16
   18d0a:	bd80      	pop	{r7, pc}

00018d0c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   18d0c:	b580      	push	{r7, lr}
   18d0e:	b084      	sub	sp, #16
   18d10:	af00      	add	r7, sp, #0
   18d12:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18d14:	687b      	ldr	r3, [r7, #4]
   18d16:	681b      	ldr	r3, [r3, #0]
   18d18:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18d1a:	46c0      	nop			; (mov r8, r8)
   18d1c:	687b      	ldr	r3, [r7, #4]
   18d1e:	0018      	movs	r0, r3
   18d20:	4b10      	ldr	r3, [pc, #64]	; (18d64 <adc_enable+0x58>)
   18d22:	4798      	blx	r3
   18d24:	1e03      	subs	r3, r0, #0
   18d26:	d1f9      	bne.n	18d1c <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   18d28:	2017      	movs	r0, #23
   18d2a:	4b0f      	ldr	r3, [pc, #60]	; (18d68 <adc_enable+0x5c>)
   18d2c:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   18d2e:	68fb      	ldr	r3, [r7, #12]
   18d30:	220f      	movs	r2, #15
   18d32:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   18d34:	68fb      	ldr	r3, [r7, #12]
   18d36:	220f      	movs	r2, #15
   18d38:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   18d3a:	68fb      	ldr	r3, [r7, #12]
   18d3c:	781b      	ldrb	r3, [r3, #0]
   18d3e:	b2db      	uxtb	r3, r3
   18d40:	2202      	movs	r2, #2
   18d42:	4313      	orrs	r3, r2
   18d44:	b2da      	uxtb	r2, r3
   18d46:	68fb      	ldr	r3, [r7, #12]
   18d48:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   18d4a:	46c0      	nop			; (mov r8, r8)
   18d4c:	687b      	ldr	r3, [r7, #4]
   18d4e:	0018      	movs	r0, r3
   18d50:	4b04      	ldr	r3, [pc, #16]	; (18d64 <adc_enable+0x58>)
   18d52:	4798      	blx	r3
   18d54:	1e03      	subs	r3, r0, #0
   18d56:	d1f9      	bne.n	18d4c <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   18d58:	2300      	movs	r3, #0
}
   18d5a:	0018      	movs	r0, r3
   18d5c:	46bd      	mov	sp, r7
   18d5e:	b004      	add	sp, #16
   18d60:	bd80      	pop	{r7, pc}
   18d62:	46c0      	nop			; (mov r8, r8)
   18d64:	00018c3d 	.word	0x00018c3d
   18d68:	00018b35 	.word	0x00018b35

00018d6c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   18d6c:	b580      	push	{r7, lr}
   18d6e:	b084      	sub	sp, #16
   18d70:	af00      	add	r7, sp, #0
   18d72:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18d74:	687b      	ldr	r3, [r7, #4]
   18d76:	681b      	ldr	r3, [r3, #0]
   18d78:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18d7a:	46c0      	nop			; (mov r8, r8)
   18d7c:	687b      	ldr	r3, [r7, #4]
   18d7e:	0018      	movs	r0, r3
   18d80:	4b0b      	ldr	r3, [pc, #44]	; (18db0 <adc_start_conversion+0x44>)
   18d82:	4798      	blx	r3
   18d84:	1e03      	subs	r3, r0, #0
   18d86:	d1f9      	bne.n	18d7c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   18d88:	68fb      	ldr	r3, [r7, #12]
   18d8a:	7b1b      	ldrb	r3, [r3, #12]
   18d8c:	b2db      	uxtb	r3, r3
   18d8e:	2202      	movs	r2, #2
   18d90:	4313      	orrs	r3, r2
   18d92:	b2da      	uxtb	r2, r3
   18d94:	68fb      	ldr	r3, [r7, #12]
   18d96:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   18d98:	46c0      	nop			; (mov r8, r8)
   18d9a:	687b      	ldr	r3, [r7, #4]
   18d9c:	0018      	movs	r0, r3
   18d9e:	4b04      	ldr	r3, [pc, #16]	; (18db0 <adc_start_conversion+0x44>)
   18da0:	4798      	blx	r3
   18da2:	1e03      	subs	r3, r0, #0
   18da4:	d1f9      	bne.n	18d9a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   18da6:	46c0      	nop			; (mov r8, r8)
   18da8:	46bd      	mov	sp, r7
   18daa:	b004      	add	sp, #16
   18dac:	bd80      	pop	{r7, pc}
   18dae:	46c0      	nop			; (mov r8, r8)
   18db0:	00018c3d 	.word	0x00018c3d

00018db4 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   18db4:	b580      	push	{r7, lr}
   18db6:	b084      	sub	sp, #16
   18db8:	af00      	add	r7, sp, #0
   18dba:	6078      	str	r0, [r7, #4]
   18dbc:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   18dbe:	687b      	ldr	r3, [r7, #4]
   18dc0:	0018      	movs	r0, r3
   18dc2:	4b18      	ldr	r3, [pc, #96]	; (18e24 <adc_read+0x70>)
   18dc4:	4798      	blx	r3
   18dc6:	0002      	movs	r2, r0
   18dc8:	2301      	movs	r3, #1
   18dca:	4013      	ands	r3, r2
   18dcc:	d101      	bne.n	18dd2 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   18dce:	2305      	movs	r3, #5
   18dd0:	e023      	b.n	18e1a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   18dd2:	687b      	ldr	r3, [r7, #4]
   18dd4:	681b      	ldr	r3, [r3, #0]
   18dd6:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   18dd8:	46c0      	nop			; (mov r8, r8)
   18dda:	687b      	ldr	r3, [r7, #4]
   18ddc:	0018      	movs	r0, r3
   18dde:	4b12      	ldr	r3, [pc, #72]	; (18e28 <adc_read+0x74>)
   18de0:	4798      	blx	r3
   18de2:	1e03      	subs	r3, r0, #0
   18de4:	d1f9      	bne.n	18dda <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   18de6:	68fb      	ldr	r3, [r7, #12]
   18de8:	8b5b      	ldrh	r3, [r3, #26]
   18dea:	b29a      	uxth	r2, r3
   18dec:	683b      	ldr	r3, [r7, #0]
   18dee:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   18df0:	687b      	ldr	r3, [r7, #4]
   18df2:	2101      	movs	r1, #1
   18df4:	0018      	movs	r0, r3
   18df6:	4b0d      	ldr	r3, [pc, #52]	; (18e2c <adc_read+0x78>)
   18df8:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   18dfa:	687b      	ldr	r3, [r7, #4]
   18dfc:	0018      	movs	r0, r3
   18dfe:	4b09      	ldr	r3, [pc, #36]	; (18e24 <adc_read+0x70>)
   18e00:	4798      	blx	r3
   18e02:	0002      	movs	r2, r0
   18e04:	2304      	movs	r3, #4
   18e06:	4013      	ands	r3, r2
   18e08:	d006      	beq.n	18e18 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   18e0a:	687b      	ldr	r3, [r7, #4]
   18e0c:	2104      	movs	r1, #4
   18e0e:	0018      	movs	r0, r3
   18e10:	4b06      	ldr	r3, [pc, #24]	; (18e2c <adc_read+0x78>)
   18e12:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   18e14:	231e      	movs	r3, #30
   18e16:	e000      	b.n	18e1a <adc_read+0x66>
	}

	return STATUS_OK;
   18e18:	2300      	movs	r3, #0
}
   18e1a:	0018      	movs	r0, r3
   18e1c:	46bd      	mov	sp, r7
   18e1e:	b004      	add	sp, #16
   18e20:	bd80      	pop	{r7, pc}
   18e22:	46c0      	nop			; (mov r8, r8)
   18e24:	00018c65 	.word	0x00018c65
   18e28:	00018c3d 	.word	0x00018c3d
   18e2c:	00018cb9 	.word	0x00018cb9

00018e30 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   18e30:	b580      	push	{r7, lr}
   18e32:	b084      	sub	sp, #16
   18e34:	af00      	add	r7, sp, #0
   18e36:	6078      	str	r0, [r7, #4]
   18e38:	000a      	movs	r2, r1
   18e3a:	1cfb      	adds	r3, r7, #3
   18e3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18e3e:	687b      	ldr	r3, [r7, #4]
   18e40:	681b      	ldr	r3, [r3, #0]
   18e42:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18e44:	46c0      	nop			; (mov r8, r8)
   18e46:	687b      	ldr	r3, [r7, #4]
   18e48:	0018      	movs	r0, r3
   18e4a:	4b0c      	ldr	r3, [pc, #48]	; (18e7c <adc_set_positive_input+0x4c>)
   18e4c:	4798      	blx	r3
   18e4e:	1e03      	subs	r3, r0, #0
   18e50:	d1f9      	bne.n	18e46 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   18e52:	68fb      	ldr	r3, [r7, #12]
   18e54:	691b      	ldr	r3, [r3, #16]
   18e56:	221f      	movs	r2, #31
   18e58:	4393      	bics	r3, r2
   18e5a:	001a      	movs	r2, r3
   18e5c:	1cfb      	adds	r3, r7, #3
   18e5e:	781b      	ldrb	r3, [r3, #0]
   18e60:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   18e62:	68fb      	ldr	r3, [r7, #12]
   18e64:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   18e66:	46c0      	nop			; (mov r8, r8)
   18e68:	687b      	ldr	r3, [r7, #4]
   18e6a:	0018      	movs	r0, r3
   18e6c:	4b03      	ldr	r3, [pc, #12]	; (18e7c <adc_set_positive_input+0x4c>)
   18e6e:	4798      	blx	r3
   18e70:	1e03      	subs	r3, r0, #0
   18e72:	d1f9      	bne.n	18e68 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   18e74:	46c0      	nop			; (mov r8, r8)
   18e76:	46bd      	mov	sp, r7
   18e78:	b004      	add	sp, #16
   18e7a:	bd80      	pop	{r7, pc}
   18e7c:	00018c3d 	.word	0x00018c3d

00018e80 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   18e80:	b580      	push	{r7, lr}
   18e82:	b084      	sub	sp, #16
   18e84:	af00      	add	r7, sp, #0
   18e86:	6078      	str	r0, [r7, #4]
   18e88:	000a      	movs	r2, r1
   18e8a:	1cfb      	adds	r3, r7, #3
   18e8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18e8e:	687b      	ldr	r3, [r7, #4]
   18e90:	681b      	ldr	r3, [r3, #0]
   18e92:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   18e94:	68fb      	ldr	r3, [r7, #12]
   18e96:	1cfa      	adds	r2, r7, #3
   18e98:	7812      	ldrb	r2, [r2, #0]
   18e9a:	75da      	strb	r2, [r3, #23]
}
   18e9c:	46c0      	nop			; (mov r8, r8)
   18e9e:	46bd      	mov	sp, r7
   18ea0:	b004      	add	sp, #16
   18ea2:	bd80      	pop	{r7, pc}

00018ea4 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   18ea4:	b580      	push	{r7, lr}
   18ea6:	b082      	sub	sp, #8
   18ea8:	af00      	add	r7, sp, #0
   18eaa:	6078      	str	r0, [r7, #4]
   18eac:	000a      	movs	r2, r1
   18eae:	1cfb      	adds	r3, r7, #3
   18eb0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   18eb2:	687b      	ldr	r3, [r7, #4]
   18eb4:	7edb      	ldrb	r3, [r3, #27]
   18eb6:	b25a      	sxtb	r2, r3
   18eb8:	1cfb      	adds	r3, r7, #3
   18eba:	781b      	ldrb	r3, [r3, #0]
   18ebc:	2101      	movs	r1, #1
   18ebe:	4099      	lsls	r1, r3
   18ec0:	000b      	movs	r3, r1
   18ec2:	b25b      	sxtb	r3, r3
   18ec4:	4313      	orrs	r3, r2
   18ec6:	b25b      	sxtb	r3, r3
   18ec8:	b2da      	uxtb	r2, r3
   18eca:	687b      	ldr	r3, [r7, #4]
   18ecc:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   18ece:	1cfb      	adds	r3, r7, #3
   18ed0:	781b      	ldrb	r3, [r3, #0]
   18ed2:	2b01      	cmp	r3, #1
   18ed4:	d104      	bne.n	18ee0 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   18ed6:	687b      	ldr	r3, [r7, #4]
   18ed8:	2104      	movs	r1, #4
   18eda:	0018      	movs	r0, r3
   18edc:	4b07      	ldr	r3, [pc, #28]	; (18efc <adc_enable_callback+0x58>)
   18ede:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   18ee0:	1cfb      	adds	r3, r7, #3
   18ee2:	781b      	ldrb	r3, [r3, #0]
   18ee4:	2b02      	cmp	r3, #2
   18ee6:	d104      	bne.n	18ef2 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   18ee8:	687b      	ldr	r3, [r7, #4]
   18eea:	2102      	movs	r1, #2
   18eec:	0018      	movs	r0, r3
   18eee:	4b03      	ldr	r3, [pc, #12]	; (18efc <adc_enable_callback+0x58>)
   18ef0:	4798      	blx	r3
	}
}
   18ef2:	46c0      	nop			; (mov r8, r8)
   18ef4:	46bd      	mov	sp, r7
   18ef6:	b002      	add	sp, #8
   18ef8:	bd80      	pop	{r7, pc}
   18efa:	46c0      	nop			; (mov r8, r8)
   18efc:	00018e81 	.word	0x00018e81

00018f00 <port_get_group_from_gpio_pin>:
{
   18f00:	b580      	push	{r7, lr}
   18f02:	b082      	sub	sp, #8
   18f04:	af00      	add	r7, sp, #0
   18f06:	0002      	movs	r2, r0
   18f08:	1dfb      	adds	r3, r7, #7
   18f0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18f0c:	1dfb      	adds	r3, r7, #7
   18f0e:	781b      	ldrb	r3, [r3, #0]
   18f10:	0018      	movs	r0, r3
   18f12:	4b03      	ldr	r3, [pc, #12]	; (18f20 <port_get_group_from_gpio_pin+0x20>)
   18f14:	4798      	blx	r3
   18f16:	0003      	movs	r3, r0
}
   18f18:	0018      	movs	r0, r3
   18f1a:	46bd      	mov	sp, r7
   18f1c:	b002      	add	sp, #8
   18f1e:	bd80      	pop	{r7, pc}
   18f20:	00018bdd 	.word	0x00018bdd

00018f24 <port_get_config_defaults>:
{
   18f24:	b580      	push	{r7, lr}
   18f26:	b082      	sub	sp, #8
   18f28:	af00      	add	r7, sp, #0
   18f2a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   18f2c:	687b      	ldr	r3, [r7, #4]
   18f2e:	2200      	movs	r2, #0
   18f30:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   18f32:	687b      	ldr	r3, [r7, #4]
   18f34:	2201      	movs	r2, #1
   18f36:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   18f38:	687b      	ldr	r3, [r7, #4]
   18f3a:	2200      	movs	r2, #0
   18f3c:	709a      	strb	r2, [r3, #2]
}
   18f3e:	46c0      	nop			; (mov r8, r8)
   18f40:	46bd      	mov	sp, r7
   18f42:	b002      	add	sp, #8
   18f44:	bd80      	pop	{r7, pc}
	...

00018f48 <port_pin_get_input_level>:
{
   18f48:	b580      	push	{r7, lr}
   18f4a:	b084      	sub	sp, #16
   18f4c:	af00      	add	r7, sp, #0
   18f4e:	0002      	movs	r2, r0
   18f50:	1dfb      	adds	r3, r7, #7
   18f52:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   18f54:	1dfb      	adds	r3, r7, #7
   18f56:	781b      	ldrb	r3, [r3, #0]
   18f58:	0018      	movs	r0, r3
   18f5a:	4b0b      	ldr	r3, [pc, #44]	; (18f88 <port_pin_get_input_level+0x40>)
   18f5c:	4798      	blx	r3
   18f5e:	0003      	movs	r3, r0
   18f60:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18f62:	1dfb      	adds	r3, r7, #7
   18f64:	781b      	ldrb	r3, [r3, #0]
   18f66:	221f      	movs	r2, #31
   18f68:	4013      	ands	r3, r2
   18f6a:	2201      	movs	r2, #1
   18f6c:	409a      	lsls	r2, r3
   18f6e:	0013      	movs	r3, r2
   18f70:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   18f72:	68fb      	ldr	r3, [r7, #12]
   18f74:	6a1b      	ldr	r3, [r3, #32]
   18f76:	68ba      	ldr	r2, [r7, #8]
   18f78:	4013      	ands	r3, r2
   18f7a:	1e5a      	subs	r2, r3, #1
   18f7c:	4193      	sbcs	r3, r2
   18f7e:	b2db      	uxtb	r3, r3
}
   18f80:	0018      	movs	r0, r3
   18f82:	46bd      	mov	sp, r7
   18f84:	b004      	add	sp, #16
   18f86:	bd80      	pop	{r7, pc}
   18f88:	00018f01 	.word	0x00018f01

00018f8c <port_pin_set_output_level>:
{
   18f8c:	b580      	push	{r7, lr}
   18f8e:	b084      	sub	sp, #16
   18f90:	af00      	add	r7, sp, #0
   18f92:	0002      	movs	r2, r0
   18f94:	1dfb      	adds	r3, r7, #7
   18f96:	701a      	strb	r2, [r3, #0]
   18f98:	1dbb      	adds	r3, r7, #6
   18f9a:	1c0a      	adds	r2, r1, #0
   18f9c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   18f9e:	1dfb      	adds	r3, r7, #7
   18fa0:	781b      	ldrb	r3, [r3, #0]
   18fa2:	0018      	movs	r0, r3
   18fa4:	4b0d      	ldr	r3, [pc, #52]	; (18fdc <port_pin_set_output_level+0x50>)
   18fa6:	4798      	blx	r3
   18fa8:	0003      	movs	r3, r0
   18faa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18fac:	1dfb      	adds	r3, r7, #7
   18fae:	781b      	ldrb	r3, [r3, #0]
   18fb0:	221f      	movs	r2, #31
   18fb2:	4013      	ands	r3, r2
   18fb4:	2201      	movs	r2, #1
   18fb6:	409a      	lsls	r2, r3
   18fb8:	0013      	movs	r3, r2
   18fba:	60bb      	str	r3, [r7, #8]
	if (level) {
   18fbc:	1dbb      	adds	r3, r7, #6
   18fbe:	781b      	ldrb	r3, [r3, #0]
   18fc0:	2b00      	cmp	r3, #0
   18fc2:	d003      	beq.n	18fcc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   18fc4:	68fb      	ldr	r3, [r7, #12]
   18fc6:	68ba      	ldr	r2, [r7, #8]
   18fc8:	619a      	str	r2, [r3, #24]
}
   18fca:	e002      	b.n	18fd2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   18fcc:	68fb      	ldr	r3, [r7, #12]
   18fce:	68ba      	ldr	r2, [r7, #8]
   18fd0:	615a      	str	r2, [r3, #20]
}
   18fd2:	46c0      	nop			; (mov r8, r8)
   18fd4:	46bd      	mov	sp, r7
   18fd6:	b004      	add	sp, #16
   18fd8:	bd80      	pop	{r7, pc}
   18fda:	46c0      	nop			; (mov r8, r8)
   18fdc:	00018f01 	.word	0x00018f01

00018fe0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   18fe0:	b580      	push	{r7, lr}
   18fe2:	b084      	sub	sp, #16
   18fe4:	af00      	add	r7, sp, #0
   18fe6:	0002      	movs	r2, r0
   18fe8:	1dfb      	adds	r3, r7, #7
   18fea:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   18fec:	230f      	movs	r3, #15
   18fee:	18fb      	adds	r3, r7, r3
   18ff0:	1dfa      	adds	r2, r7, #7
   18ff2:	7812      	ldrb	r2, [r2, #0]
   18ff4:	0952      	lsrs	r2, r2, #5
   18ff6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   18ff8:	230f      	movs	r3, #15
   18ffa:	18fb      	adds	r3, r7, r3
   18ffc:	781b      	ldrb	r3, [r3, #0]
   18ffe:	2b00      	cmp	r3, #0
   19000:	d10c      	bne.n	1901c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   19002:	4b09      	ldr	r3, [pc, #36]	; (19028 <_extint_get_eic_from_channel+0x48>)
   19004:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   19006:	230f      	movs	r3, #15
   19008:	18fb      	adds	r3, r7, r3
   1900a:	781b      	ldrb	r3, [r3, #0]
   1900c:	009b      	lsls	r3, r3, #2
   1900e:	2210      	movs	r2, #16
   19010:	4694      	mov	ip, r2
   19012:	44bc      	add	ip, r7
   19014:	4463      	add	r3, ip
   19016:	3b08      	subs	r3, #8
   19018:	681b      	ldr	r3, [r3, #0]
   1901a:	e000      	b.n	1901e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   1901c:	2300      	movs	r3, #0
	}
}
   1901e:	0018      	movs	r0, r3
   19020:	46bd      	mov	sp, r7
   19022:	b004      	add	sp, #16
   19024:	bd80      	pop	{r7, pc}
   19026:	46c0      	nop			; (mov r8, r8)
   19028:	40001800 	.word	0x40001800

0001902c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1902c:	b580      	push	{r7, lr}
   1902e:	b084      	sub	sp, #16
   19030:	af00      	add	r7, sp, #0
   19032:	0002      	movs	r2, r0
   19034:	1dfb      	adds	r3, r7, #7
   19036:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   19038:	1dfb      	adds	r3, r7, #7
   1903a:	781b      	ldrb	r3, [r3, #0]
   1903c:	0018      	movs	r0, r3
   1903e:	4b09      	ldr	r3, [pc, #36]	; (19064 <extint_chan_clear_detected+0x38>)
   19040:	4798      	blx	r3
   19042:	0003      	movs	r3, r0
   19044:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   19046:	1dfb      	adds	r3, r7, #7
   19048:	781b      	ldrb	r3, [r3, #0]
   1904a:	221f      	movs	r2, #31
   1904c:	4013      	ands	r3, r2
   1904e:	2201      	movs	r2, #1
   19050:	409a      	lsls	r2, r3
   19052:	0013      	movs	r3, r2
   19054:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   19056:	68fb      	ldr	r3, [r7, #12]
   19058:	68ba      	ldr	r2, [r7, #8]
   1905a:	611a      	str	r2, [r3, #16]
}
   1905c:	46c0      	nop			; (mov r8, r8)
   1905e:	46bd      	mov	sp, r7
   19060:	b004      	add	sp, #16
   19062:	bd80      	pop	{r7, pc}
   19064:	00018fe1 	.word	0x00018fe1

00019068 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   19068:	b580      	push	{r7, lr}
   1906a:	b084      	sub	sp, #16
   1906c:	af00      	add	r7, sp, #0
   1906e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   19070:	687b      	ldr	r3, [r7, #4]
   19072:	22a0      	movs	r2, #160	; 0xa0
   19074:	0112      	lsls	r2, r2, #4
   19076:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   19078:	687b      	ldr	r3, [r7, #4]
   1907a:	2201      	movs	r2, #1
   1907c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   1907e:	687b      	ldr	r3, [r7, #4]
   19080:	2200      	movs	r2, #0
   19082:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   19084:	687b      	ldr	r3, [r7, #4]
   19086:	2200      	movs	r2, #0
   19088:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1908a:	230f      	movs	r3, #15
   1908c:	18fb      	adds	r3, r7, r3
   1908e:	2200      	movs	r2, #0
   19090:	701a      	strb	r2, [r3, #0]
   19092:	e00e      	b.n	190b2 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   19094:	230f      	movs	r3, #15
   19096:	18fb      	adds	r3, r7, r3
   19098:	781a      	ldrb	r2, [r3, #0]
   1909a:	687b      	ldr	r3, [r7, #4]
   1909c:	3202      	adds	r2, #2
   1909e:	0092      	lsls	r2, r2, #2
   190a0:	2100      	movs	r1, #0
   190a2:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   190a4:	230f      	movs	r3, #15
   190a6:	18fb      	adds	r3, r7, r3
   190a8:	781a      	ldrb	r2, [r3, #0]
   190aa:	230f      	movs	r3, #15
   190ac:	18fb      	adds	r3, r7, r3
   190ae:	3201      	adds	r2, #1
   190b0:	701a      	strb	r2, [r3, #0]
   190b2:	230f      	movs	r3, #15
   190b4:	18fb      	adds	r3, r7, r3
   190b6:	781b      	ldrb	r3, [r3, #0]
   190b8:	2b01      	cmp	r3, #1
   190ba:	d9eb      	bls.n	19094 <rtc_count_get_config_defaults+0x2c>
	}
}
   190bc:	46c0      	nop			; (mov r8, r8)
   190be:	46bd      	mov	sp, r7
   190c0:	b004      	add	sp, #16
   190c2:	bd80      	pop	{r7, pc}

000190c4 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   190c4:	b580      	push	{r7, lr}
   190c6:	b086      	sub	sp, #24
   190c8:	af00      	add	r7, sp, #0
   190ca:	6078      	str	r0, [r7, #4]
   190cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   190ce:	687b      	ldr	r3, [r7, #4]
   190d0:	681b      	ldr	r3, [r3, #0]
   190d2:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   190d4:	2300      	movs	r3, #0
   190d6:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   190d8:	683b      	ldr	r3, [r7, #0]
   190da:	781b      	ldrb	r3, [r3, #0]
   190dc:	2b00      	cmp	r3, #0
   190de:	d004      	beq.n	190ea <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   190e0:	697b      	ldr	r3, [r7, #20]
   190e2:	2280      	movs	r2, #128	; 0x80
   190e4:	0212      	lsls	r2, r2, #8
   190e6:	4313      	orrs	r3, r2
   190e8:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   190ea:	2313      	movs	r3, #19
   190ec:	18fb      	adds	r3, r7, r3
   190ee:	2200      	movs	r2, #0
   190f0:	701a      	strb	r2, [r3, #0]
   190f2:	e01c      	b.n	1912e <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   190f4:	2313      	movs	r3, #19
   190f6:	18fb      	adds	r3, r7, r3
   190f8:	781b      	ldrb	r3, [r3, #0]
   190fa:	683a      	ldr	r2, [r7, #0]
   190fc:	18d3      	adds	r3, r2, r3
   190fe:	785b      	ldrb	r3, [r3, #1]
   19100:	2b00      	cmp	r3, #0
   19102:	d00d      	beq.n	19120 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   19104:	2313      	movs	r3, #19
   19106:	18fb      	adds	r3, r7, r3
   19108:	781b      	ldrb	r3, [r3, #0]
   1910a:	2201      	movs	r2, #1
   1910c:	409a      	lsls	r2, r3
   1910e:	0013      	movs	r3, r2
   19110:	021b      	lsls	r3, r3, #8
   19112:	001a      	movs	r2, r3
   19114:	2380      	movs	r3, #128	; 0x80
   19116:	005b      	lsls	r3, r3, #1
   19118:	4013      	ands	r3, r2
   1911a:	697a      	ldr	r2, [r7, #20]
   1911c:	4313      	orrs	r3, r2
   1911e:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   19120:	2313      	movs	r3, #19
   19122:	18fb      	adds	r3, r7, r3
   19124:	781a      	ldrb	r2, [r3, #0]
   19126:	2313      	movs	r3, #19
   19128:	18fb      	adds	r3, r7, r3
   1912a:	3201      	adds	r2, #1
   1912c:	701a      	strb	r2, [r3, #0]
   1912e:	2313      	movs	r3, #19
   19130:	18fb      	adds	r3, r7, r3
   19132:	781b      	ldrb	r3, [r3, #0]
   19134:	2b01      	cmp	r3, #1
   19136:	d9dd      	bls.n	190f4 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   19138:	2312      	movs	r3, #18
   1913a:	18fb      	adds	r3, r7, r3
   1913c:	2200      	movs	r2, #0
   1913e:	701a      	strb	r2, [r3, #0]
   19140:	e01a      	b.n	19178 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   19142:	2312      	movs	r3, #18
   19144:	18fb      	adds	r3, r7, r3
   19146:	781b      	ldrb	r3, [r3, #0]
   19148:	683a      	ldr	r2, [r7, #0]
   1914a:	18d3      	adds	r3, r2, r3
   1914c:	78db      	ldrb	r3, [r3, #3]
   1914e:	2b00      	cmp	r3, #0
   19150:	d00b      	beq.n	1916a <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   19152:	2312      	movs	r3, #18
   19154:	18fb      	adds	r3, r7, r3
   19156:	781b      	ldrb	r3, [r3, #0]
   19158:	2201      	movs	r2, #1
   1915a:	409a      	lsls	r2, r3
   1915c:	0013      	movs	r3, r2
   1915e:	001a      	movs	r2, r3
   19160:	23ff      	movs	r3, #255	; 0xff
   19162:	4013      	ands	r3, r2
   19164:	697a      	ldr	r2, [r7, #20]
   19166:	4313      	orrs	r3, r2
   19168:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   1916a:	2312      	movs	r3, #18
   1916c:	18fb      	adds	r3, r7, r3
   1916e:	781a      	ldrb	r2, [r3, #0]
   19170:	2312      	movs	r3, #18
   19172:	18fb      	adds	r3, r7, r3
   19174:	3201      	adds	r2, #1
   19176:	701a      	strb	r2, [r3, #0]
   19178:	2312      	movs	r3, #18
   1917a:	18fb      	adds	r3, r7, r3
   1917c:	781b      	ldrb	r3, [r3, #0]
   1917e:	2b07      	cmp	r3, #7
   19180:	d9df      	bls.n	19142 <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   19182:	68fb      	ldr	r3, [r7, #12]
   19184:	889b      	ldrh	r3, [r3, #4]
   19186:	b29a      	uxth	r2, r3
   19188:	697b      	ldr	r3, [r7, #20]
   1918a:	b29b      	uxth	r3, r3
   1918c:	4313      	orrs	r3, r2
   1918e:	b29a      	uxth	r2, r3
   19190:	68fb      	ldr	r3, [r7, #12]
   19192:	809a      	strh	r2, [r3, #4]
}
   19194:	46c0      	nop			; (mov r8, r8)
   19196:	46bd      	mov	sp, r7
   19198:	b006      	add	sp, #24
   1919a:	bd80      	pop	{r7, pc}

0001919c <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   1919c:	b580      	push	{r7, lr}
   1919e:	b082      	sub	sp, #8
   191a0:	af00      	add	r7, sp, #0
   191a2:	6078      	str	r0, [r7, #4]
   191a4:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   191a6:	200d      	movs	r0, #13
   191a8:	4b08      	ldr	r3, [pc, #32]	; (191cc <readOverHeadWaterSensorState+0x30>)
   191aa:	4798      	blx	r3
   191ac:	0003      	movs	r3, r0
   191ae:	001a      	movs	r2, r3
   191b0:	687b      	ldr	r3, [r7, #4]
   191b2:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   191b4:	202f      	movs	r0, #47	; 0x2f
   191b6:	4b05      	ldr	r3, [pc, #20]	; (191cc <readOverHeadWaterSensorState+0x30>)
   191b8:	4798      	blx	r3
   191ba:	0003      	movs	r3, r0
   191bc:	001a      	movs	r2, r3
   191be:	683b      	ldr	r3, [r7, #0]
   191c0:	701a      	strb	r2, [r3, #0]
}
   191c2:	46c0      	nop			; (mov r8, r8)
   191c4:	46bd      	mov	sp, r7
   191c6:	b002      	add	sp, #8
   191c8:	bd80      	pop	{r7, pc}
   191ca:	46c0      	nop			; (mov r8, r8)
   191cc:	00018f49 	.word	0x00018f49

000191d0 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   191d0:	b580      	push	{r7, lr}
   191d2:	b082      	sub	sp, #8
   191d4:	af00      	add	r7, sp, #0
   191d6:	0002      	movs	r2, r0
   191d8:	1dfb      	adds	r3, r7, #7
   191da:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   191dc:	4b03      	ldr	r3, [pc, #12]	; (191ec <updateOverheadLevel+0x1c>)
   191de:	1dfa      	adds	r2, r7, #7
   191e0:	7812      	ldrb	r2, [r2, #0]
   191e2:	701a      	strb	r2, [r3, #0]
}
   191e4:	46c0      	nop			; (mov r8, r8)
   191e6:	46bd      	mov	sp, r7
   191e8:	b002      	add	sp, #8
   191ea:	bd80      	pop	{r7, pc}
   191ec:	20000784 	.word	0x20000784

000191f0 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   191f0:	b580      	push	{r7, lr}
   191f2:	b082      	sub	sp, #8
   191f4:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   191f6:	1d7a      	adds	r2, r7, #5
   191f8:	1dbb      	adds	r3, r7, #6
   191fa:	0011      	movs	r1, r2
   191fc:	0018      	movs	r0, r3
   191fe:	4b11      	ldr	r3, [pc, #68]	; (19244 <getOverHeadWaterSensorState+0x54>)
   19200:	4798      	blx	r3
	uint8_t ans=0;
   19202:	1dfb      	adds	r3, r7, #7
   19204:	2200      	movs	r2, #0
   19206:	701a      	strb	r2, [r3, #0]
	if(!olow)
   19208:	1dbb      	adds	r3, r7, #6
   1920a:	781b      	ldrb	r3, [r3, #0]
   1920c:	2201      	movs	r2, #1
   1920e:	4053      	eors	r3, r2
   19210:	b2db      	uxtb	r3, r3
   19212:	2b00      	cmp	r3, #0
   19214:	d010      	beq.n	19238 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   19216:	1dfb      	adds	r3, r7, #7
   19218:	781a      	ldrb	r2, [r3, #0]
   1921a:	1dfb      	adds	r3, r7, #7
   1921c:	3201      	adds	r2, #1
   1921e:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   19220:	1d7b      	adds	r3, r7, #5
   19222:	781b      	ldrb	r3, [r3, #0]
   19224:	2201      	movs	r2, #1
   19226:	4053      	eors	r3, r2
   19228:	b2db      	uxtb	r3, r3
   1922a:	2b00      	cmp	r3, #0
   1922c:	d004      	beq.n	19238 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   1922e:	1dfb      	adds	r3, r7, #7
   19230:	781a      	ldrb	r2, [r3, #0]
   19232:	1dfb      	adds	r3, r7, #7
   19234:	3201      	adds	r2, #1
   19236:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19238:	1dfb      	adds	r3, r7, #7
   1923a:	781b      	ldrb	r3, [r3, #0]
}
   1923c:	0018      	movs	r0, r3
   1923e:	46bd      	mov	sp, r7
   19240:	b002      	add	sp, #8
   19242:	bd80      	pop	{r7, pc}
   19244:	0001919d 	.word	0x0001919d

00019248 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   19248:	b590      	push	{r4, r7, lr}
   1924a:	b085      	sub	sp, #20
   1924c:	af00      	add	r7, sp, #0
   1924e:	0002      	movs	r2, r0
   19250:	1dfb      	adds	r3, r7, #7
   19252:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   19254:	230f      	movs	r3, #15
   19256:	18fc      	adds	r4, r7, r3
   19258:	4b15      	ldr	r3, [pc, #84]	; (192b0 <overHeadWaterStatusOnCall+0x68>)
   1925a:	4798      	blx	r3
   1925c:	0003      	movs	r3, r0
   1925e:	7023      	strb	r3, [r4, #0]
	if(current)
   19260:	1dfb      	adds	r3, r7, #7
   19262:	781b      	ldrb	r3, [r3, #0]
   19264:	2b00      	cmp	r3, #0
   19266:	d004      	beq.n	19272 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   19268:	230f      	movs	r3, #15
   1926a:	18fb      	adds	r3, r7, r3
   1926c:	4a11      	ldr	r2, [pc, #68]	; (192b4 <overHeadWaterStatusOnCall+0x6c>)
   1926e:	7812      	ldrb	r2, [r2, #0]
   19270:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   19272:	230f      	movs	r3, #15
   19274:	18fb      	adds	r3, r7, r3
   19276:	781b      	ldrb	r3, [r3, #0]
   19278:	2b02      	cmp	r3, #2
   1927a:	d103      	bne.n	19284 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   1927c:	2056      	movs	r0, #86	; 0x56
   1927e:	4b0e      	ldr	r3, [pc, #56]	; (192b8 <overHeadWaterStatusOnCall+0x70>)
   19280:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   19282:	e010      	b.n	192a6 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   19284:	230f      	movs	r3, #15
   19286:	18fb      	adds	r3, r7, r3
   19288:	781b      	ldrb	r3, [r3, #0]
   1928a:	2b01      	cmp	r3, #1
   1928c:	d103      	bne.n	19296 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   1928e:	2058      	movs	r0, #88	; 0x58
   19290:	4b09      	ldr	r3, [pc, #36]	; (192b8 <overHeadWaterStatusOnCall+0x70>)
   19292:	4798      	blx	r3
}
   19294:	e007      	b.n	192a6 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   19296:	230f      	movs	r3, #15
   19298:	18fb      	adds	r3, r7, r3
   1929a:	781b      	ldrb	r3, [r3, #0]
   1929c:	2b00      	cmp	r3, #0
   1929e:	d102      	bne.n	192a6 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   192a0:	2057      	movs	r0, #87	; 0x57
   192a2:	4b05      	ldr	r3, [pc, #20]	; (192b8 <overHeadWaterStatusOnCall+0x70>)
   192a4:	4798      	blx	r3
}
   192a6:	46c0      	nop			; (mov r8, r8)
   192a8:	46bd      	mov	sp, r7
   192aa:	b005      	add	sp, #20
   192ac:	bd90      	pop	{r4, r7, pc}
   192ae:	46c0      	nop			; (mov r8, r8)
   192b0:	000191f1 	.word	0x000191f1
   192b4:	20000784 	.word	0x20000784
   192b8:	00014b09 	.word	0x00014b09

000192bc <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   192bc:	b580      	push	{r7, lr}
   192be:	b084      	sub	sp, #16
   192c0:	af00      	add	r7, sp, #0
   192c2:	60f8      	str	r0, [r7, #12]
   192c4:	60b9      	str	r1, [r7, #8]
   192c6:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   192c8:	2037      	movs	r0, #55	; 0x37
   192ca:	4b0c      	ldr	r3, [pc, #48]	; (192fc <readWaterSensorState+0x40>)
   192cc:	4798      	blx	r3
   192ce:	0003      	movs	r3, r0
   192d0:	001a      	movs	r2, r3
   192d2:	68fb      	ldr	r3, [r7, #12]
   192d4:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   192d6:	200f      	movs	r0, #15
   192d8:	4b08      	ldr	r3, [pc, #32]	; (192fc <readWaterSensorState+0x40>)
   192da:	4798      	blx	r3
   192dc:	0003      	movs	r3, r0
   192de:	001a      	movs	r2, r3
   192e0:	68bb      	ldr	r3, [r7, #8]
   192e2:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   192e4:	200e      	movs	r0, #14
   192e6:	4b05      	ldr	r3, [pc, #20]	; (192fc <readWaterSensorState+0x40>)
   192e8:	4798      	blx	r3
   192ea:	0003      	movs	r3, r0
   192ec:	001a      	movs	r2, r3
   192ee:	687b      	ldr	r3, [r7, #4]
   192f0:	701a      	strb	r2, [r3, #0]
}
   192f2:	46c0      	nop			; (mov r8, r8)
   192f4:	46bd      	mov	sp, r7
   192f6:	b004      	add	sp, #16
   192f8:	bd80      	pop	{r7, pc}
   192fa:	46c0      	nop			; (mov r8, r8)
   192fc:	00018f49 	.word	0x00018f49

00019300 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   19300:	b580      	push	{r7, lr}
   19302:	b082      	sub	sp, #8
   19304:	af00      	add	r7, sp, #0
   19306:	0002      	movs	r2, r0
   19308:	1dfb      	adds	r3, r7, #7
   1930a:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   1930c:	4b03      	ldr	r3, [pc, #12]	; (1931c <updateUndergroundLevel+0x1c>)
   1930e:	1dfa      	adds	r2, r7, #7
   19310:	7812      	ldrb	r2, [r2, #0]
   19312:	701a      	strb	r2, [r3, #0]
}
   19314:	46c0      	nop			; (mov r8, r8)
   19316:	46bd      	mov	sp, r7
   19318:	b002      	add	sp, #8
   1931a:	bd80      	pop	{r7, pc}
   1931c:	20000854 	.word	0x20000854

00019320 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   19320:	b580      	push	{r7, lr}
   19322:	b082      	sub	sp, #8
   19324:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   19326:	1d3a      	adds	r2, r7, #4
   19328:	1d79      	adds	r1, r7, #5
   1932a:	1dbb      	adds	r3, r7, #6
   1932c:	0018      	movs	r0, r3
   1932e:	4b17      	ldr	r3, [pc, #92]	; (1938c <getWaterSensorState+0x6c>)
   19330:	4798      	blx	r3
	uint8_t ans=0;
   19332:	1dfb      	adds	r3, r7, #7
   19334:	2200      	movs	r2, #0
   19336:	701a      	strb	r2, [r3, #0]

	if(!l)
   19338:	1dbb      	adds	r3, r7, #6
   1933a:	781b      	ldrb	r3, [r3, #0]
   1933c:	2201      	movs	r2, #1
   1933e:	4053      	eors	r3, r2
   19340:	b2db      	uxtb	r3, r3
   19342:	2b00      	cmp	r3, #0
   19344:	d01c      	beq.n	19380 <getWaterSensorState+0x60>
	{
		ans++;
   19346:	1dfb      	adds	r3, r7, #7
   19348:	781a      	ldrb	r2, [r3, #0]
   1934a:	1dfb      	adds	r3, r7, #7
   1934c:	3201      	adds	r2, #1
   1934e:	701a      	strb	r2, [r3, #0]
		if(!m)
   19350:	1d7b      	adds	r3, r7, #5
   19352:	781b      	ldrb	r3, [r3, #0]
   19354:	2201      	movs	r2, #1
   19356:	4053      	eors	r3, r2
   19358:	b2db      	uxtb	r3, r3
   1935a:	2b00      	cmp	r3, #0
   1935c:	d010      	beq.n	19380 <getWaterSensorState+0x60>
		{
			ans++;
   1935e:	1dfb      	adds	r3, r7, #7
   19360:	781a      	ldrb	r2, [r3, #0]
   19362:	1dfb      	adds	r3, r7, #7
   19364:	3201      	adds	r2, #1
   19366:	701a      	strb	r2, [r3, #0]
			if(!h)
   19368:	1d3b      	adds	r3, r7, #4
   1936a:	781b      	ldrb	r3, [r3, #0]
   1936c:	2201      	movs	r2, #1
   1936e:	4053      	eors	r3, r2
   19370:	b2db      	uxtb	r3, r3
   19372:	2b00      	cmp	r3, #0
   19374:	d004      	beq.n	19380 <getWaterSensorState+0x60>
			{
				ans++;
   19376:	1dfb      	adds	r3, r7, #7
   19378:	781a      	ldrb	r2, [r3, #0]
   1937a:	1dfb      	adds	r3, r7, #7
   1937c:	3201      	adds	r2, #1
   1937e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19380:	1dfb      	adds	r3, r7, #7
   19382:	781b      	ldrb	r3, [r3, #0]
}
   19384:	0018      	movs	r0, r3
   19386:	46bd      	mov	sp, r7
   19388:	b002      	add	sp, #8
   1938a:	bd80      	pop	{r7, pc}
   1938c:	000192bd 	.word	0x000192bd

00019390 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   19390:	b590      	push	{r4, r7, lr}
   19392:	b085      	sub	sp, #20
   19394:	af00      	add	r7, sp, #0
   19396:	0002      	movs	r2, r0
   19398:	1dfb      	adds	r3, r7, #7
   1939a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   1939c:	230f      	movs	r3, #15
   1939e:	18fc      	adds	r4, r7, r3
   193a0:	4b19      	ldr	r3, [pc, #100]	; (19408 <waterStatusOnCall+0x78>)
   193a2:	4798      	blx	r3
   193a4:	0003      	movs	r3, r0
   193a6:	7023      	strb	r3, [r4, #0]
	if(current)
   193a8:	1dfb      	adds	r3, r7, #7
   193aa:	781b      	ldrb	r3, [r3, #0]
   193ac:	2b00      	cmp	r3, #0
   193ae:	d004      	beq.n	193ba <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   193b0:	230f      	movs	r3, #15
   193b2:	18fb      	adds	r3, r7, r3
   193b4:	4a15      	ldr	r2, [pc, #84]	; (1940c <waterStatusOnCall+0x7c>)
   193b6:	7812      	ldrb	r2, [r2, #0]
   193b8:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   193ba:	230f      	movs	r3, #15
   193bc:	18fb      	adds	r3, r7, r3
   193be:	781b      	ldrb	r3, [r3, #0]
   193c0:	2b00      	cmp	r3, #0
   193c2:	d103      	bne.n	193cc <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   193c4:	2054      	movs	r0, #84	; 0x54
   193c6:	4b12      	ldr	r3, [pc, #72]	; (19410 <waterStatusOnCall+0x80>)
   193c8:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   193ca:	e019      	b.n	19400 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   193cc:	230f      	movs	r3, #15
   193ce:	18fb      	adds	r3, r7, r3
   193d0:	781b      	ldrb	r3, [r3, #0]
   193d2:	2b01      	cmp	r3, #1
   193d4:	d103      	bne.n	193de <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   193d6:	2051      	movs	r0, #81	; 0x51
   193d8:	4b0d      	ldr	r3, [pc, #52]	; (19410 <waterStatusOnCall+0x80>)
   193da:	4798      	blx	r3
}
   193dc:	e010      	b.n	19400 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   193de:	230f      	movs	r3, #15
   193e0:	18fb      	adds	r3, r7, r3
   193e2:	781b      	ldrb	r3, [r3, #0]
   193e4:	2b02      	cmp	r3, #2
   193e6:	d103      	bne.n	193f0 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   193e8:	2052      	movs	r0, #82	; 0x52
   193ea:	4b09      	ldr	r3, [pc, #36]	; (19410 <waterStatusOnCall+0x80>)
   193ec:	4798      	blx	r3
}
   193ee:	e007      	b.n	19400 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   193f0:	230f      	movs	r3, #15
   193f2:	18fb      	adds	r3, r7, r3
   193f4:	781b      	ldrb	r3, [r3, #0]
   193f6:	2b03      	cmp	r3, #3
   193f8:	d102      	bne.n	19400 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   193fa:	2045      	movs	r0, #69	; 0x45
   193fc:	4b04      	ldr	r3, [pc, #16]	; (19410 <waterStatusOnCall+0x80>)
   193fe:	4798      	blx	r3
}
   19400:	46c0      	nop			; (mov r8, r8)
   19402:	46bd      	mov	sp, r7
   19404:	b005      	add	sp, #20
   19406:	bd90      	pop	{r4, r7, pc}
   19408:	00019321 	.word	0x00019321
   1940c:	20000854 	.word	0x20000854
   19410:	00014b09 	.word	0x00014b09

00019414 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   19414:	b590      	push	{r4, r7, lr}
   19416:	b085      	sub	sp, #20
   19418:	af00      	add	r7, sp, #0
   1941a:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   1941c:	2308      	movs	r3, #8
   1941e:	18fb      	adds	r3, r7, r3
   19420:	0018      	movs	r0, r3
   19422:	4b8b      	ldr	r3, [pc, #556]	; (19650 <Water_Level_Task+0x23c>)
   19424:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   19426:	2308      	movs	r3, #8
   19428:	18fb      	adds	r3, r7, r3
   1942a:	2200      	movs	r2, #0
   1942c:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   1942e:	2308      	movs	r3, #8
   19430:	18fb      	adds	r3, r7, r3
   19432:	2201      	movs	r2, #1
   19434:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   19436:	2308      	movs	r3, #8
   19438:	18fb      	adds	r3, r7, r3
   1943a:	0019      	movs	r1, r3
   1943c:	202f      	movs	r0, #47	; 0x2f
   1943e:	4b85      	ldr	r3, [pc, #532]	; (19654 <Water_Level_Task+0x240>)
   19440:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   19442:	2308      	movs	r3, #8
   19444:	18fb      	adds	r3, r7, r3
   19446:	0019      	movs	r1, r3
   19448:	200c      	movs	r0, #12
   1944a:	4b82      	ldr	r3, [pc, #520]	; (19654 <Water_Level_Task+0x240>)
   1944c:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   1944e:	2308      	movs	r3, #8
   19450:	18fb      	adds	r3, r7, r3
   19452:	0019      	movs	r1, r3
   19454:	200d      	movs	r0, #13
   19456:	4b7f      	ldr	r3, [pc, #508]	; (19654 <Water_Level_Task+0x240>)
   19458:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   1945a:	2308      	movs	r3, #8
   1945c:	18fb      	adds	r3, r7, r3
   1945e:	0019      	movs	r1, r3
   19460:	200e      	movs	r0, #14
   19462:	4b7c      	ldr	r3, [pc, #496]	; (19654 <Water_Level_Task+0x240>)
   19464:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   19466:	2308      	movs	r3, #8
   19468:	18fb      	adds	r3, r7, r3
   1946a:	0019      	movs	r1, r3
   1946c:	200f      	movs	r0, #15
   1946e:	4b79      	ldr	r3, [pc, #484]	; (19654 <Water_Level_Task+0x240>)
   19470:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   19472:	2308      	movs	r3, #8
   19474:	18fb      	adds	r3, r7, r3
   19476:	0019      	movs	r1, r3
   19478:	2037      	movs	r0, #55	; 0x37
   1947a:	4b76      	ldr	r3, [pc, #472]	; (19654 <Water_Level_Task+0x240>)
   1947c:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   1947e:	4b76      	ldr	r3, [pc, #472]	; (19658 <Water_Level_Task+0x244>)
   19480:	2202      	movs	r2, #2
   19482:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   19484:	4b75      	ldr	r3, [pc, #468]	; (1965c <Water_Level_Task+0x248>)
   19486:	2202      	movs	r2, #2
   19488:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   1948a:	4b75      	ldr	r3, [pc, #468]	; (19660 <Water_Level_Task+0x24c>)
   1948c:	2201      	movs	r2, #1
   1948e:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   19490:	4b74      	ldr	r3, [pc, #464]	; (19664 <Water_Level_Task+0x250>)
   19492:	2201      	movs	r2, #1
   19494:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   19496:	4b74      	ldr	r3, [pc, #464]	; (19668 <Water_Level_Task+0x254>)
   19498:	2200      	movs	r2, #0
   1949a:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   1949c:	230f      	movs	r3, #15
   1949e:	18fb      	adds	r3, r7, r3
   194a0:	2200      	movs	r2, #0
   194a2:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   194a4:	4b71      	ldr	r3, [pc, #452]	; (1966c <Water_Level_Task+0x258>)
   194a6:	791b      	ldrb	r3, [r3, #4]
   194a8:	2b00      	cmp	r3, #0
   194aa:	d004      	beq.n	194b6 <Water_Level_Task+0xa2>
	{
		j = 19;
   194ac:	230f      	movs	r3, #15
   194ae:	18fb      	adds	r3, r7, r3
   194b0:	2213      	movs	r2, #19
   194b2:	701a      	strb	r2, [r3, #0]
   194b4:	e003      	b.n	194be <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   194b6:	230f      	movs	r3, #15
   194b8:	18fb      	adds	r3, r7, r3
   194ba:	2211      	movs	r2, #17
   194bc:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   194be:	230e      	movs	r3, #14
   194c0:	18fb      	adds	r3, r7, r3
   194c2:	220c      	movs	r2, #12
   194c4:	701a      	strb	r2, [r3, #0]
   194c6:	e00c      	b.n	194e2 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   194c8:	230e      	movs	r3, #14
   194ca:	18fb      	adds	r3, r7, r3
   194cc:	781b      	ldrb	r3, [r3, #0]
   194ce:	4a68      	ldr	r2, [pc, #416]	; (19670 <Water_Level_Task+0x25c>)
   194d0:	2101      	movs	r1, #1
   194d2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   194d4:	230e      	movs	r3, #14
   194d6:	18fb      	adds	r3, r7, r3
   194d8:	781a      	ldrb	r2, [r3, #0]
   194da:	230e      	movs	r3, #14
   194dc:	18fb      	adds	r3, r7, r3
   194de:	3201      	adds	r2, #1
   194e0:	701a      	strb	r2, [r3, #0]
   194e2:	230e      	movs	r3, #14
   194e4:	18fa      	adds	r2, r7, r3
   194e6:	230f      	movs	r3, #15
   194e8:	18fb      	adds	r3, r7, r3
   194ea:	7812      	ldrb	r2, [r2, #0]
   194ec:	781b      	ldrb	r3, [r3, #0]
   194ee:	429a      	cmp	r2, r3
   194f0:	d3ea      	bcc.n	194c8 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   194f2:	4b60      	ldr	r3, [pc, #384]	; (19674 <Water_Level_Task+0x260>)
   194f4:	2249      	movs	r2, #73	; 0x49
   194f6:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   194f8:	4b5e      	ldr	r3, [pc, #376]	; (19674 <Water_Level_Task+0x260>)
   194fa:	2244      	movs	r2, #68	; 0x44
   194fc:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   194fe:	4b5d      	ldr	r3, [pc, #372]	; (19674 <Water_Level_Task+0x260>)
   19500:	2248      	movs	r2, #72	; 0x48
   19502:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   19504:	4b5b      	ldr	r3, [pc, #364]	; (19674 <Water_Level_Task+0x260>)
   19506:	2245      	movs	r2, #69	; 0x45
   19508:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   1950a:	4b5a      	ldr	r3, [pc, #360]	; (19674 <Water_Level_Task+0x260>)
   1950c:	225a      	movs	r2, #90	; 0x5a
   1950e:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   19510:	4b56      	ldr	r3, [pc, #344]	; (1966c <Water_Level_Task+0x258>)
   19512:	791b      	ldrb	r3, [r3, #4]
   19514:	2b00      	cmp	r3, #0
   19516:	d005      	beq.n	19524 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   19518:	4b56      	ldr	r3, [pc, #344]	; (19674 <Water_Level_Task+0x260>)
   1951a:	2256      	movs	r2, #86	; 0x56
   1951c:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   1951e:	4b55      	ldr	r3, [pc, #340]	; (19674 <Water_Level_Task+0x260>)
   19520:	2257      	movs	r2, #87	; 0x57
   19522:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   19524:	4b51      	ldr	r3, [pc, #324]	; (1966c <Water_Level_Task+0x258>)
   19526:	78db      	ldrb	r3, [r3, #3]
   19528:	2b00      	cmp	r3, #0
   1952a:	d00b      	beq.n	19544 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   1952c:	4b52      	ldr	r3, [pc, #328]	; (19678 <Water_Level_Task+0x264>)
   1952e:	2200      	movs	r2, #0
   19530:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   19532:	4b51      	ldr	r3, [pc, #324]	; (19678 <Water_Level_Task+0x264>)
   19534:	2200      	movs	r2, #0
   19536:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   19538:	4b50      	ldr	r3, [pc, #320]	; (1967c <Water_Level_Task+0x268>)
   1953a:	220d      	movs	r2, #13
   1953c:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   1953e:	4b4f      	ldr	r3, [pc, #316]	; (1967c <Water_Level_Task+0x268>)
   19540:	220f      	movs	r2, #15
   19542:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   19544:	230c      	movs	r3, #12
   19546:	18fb      	adds	r3, r7, r3
   19548:	2200      	movs	r2, #0
   1954a:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   1954c:	4b4c      	ldr	r3, [pc, #304]	; (19680 <Water_Level_Task+0x26c>)
   1954e:	7fdb      	ldrb	r3, [r3, #31]
   19550:	2b00      	cmp	r3, #0
   19552:	d000      	beq.n	19556 <Water_Level_Task+0x142>
   19554:	e073      	b.n	1963e <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   19556:	230b      	movs	r3, #11
   19558:	18fc      	adds	r4, r7, r3
   1955a:	4b4a      	ldr	r3, [pc, #296]	; (19684 <Water_Level_Task+0x270>)
   1955c:	4798      	blx	r3
   1955e:	0003      	movs	r3, r0
   19560:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   19562:	4b42      	ldr	r3, [pc, #264]	; (1966c <Water_Level_Task+0x258>)
   19564:	791b      	ldrb	r3, [r3, #4]
   19566:	2b00      	cmp	r3, #0
   19568:	d005      	beq.n	19576 <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
   1956a:	230d      	movs	r3, #13
   1956c:	18fc      	adds	r4, r7, r3
   1956e:	4b46      	ldr	r3, [pc, #280]	; (19688 <Water_Level_Task+0x274>)
   19570:	4798      	blx	r3
   19572:	0003      	movs	r3, r0
   19574:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19576:	4b3d      	ldr	r3, [pc, #244]	; (1966c <Water_Level_Task+0x258>)
   19578:	791b      	ldrb	r3, [r3, #4]
   1957a:	2b01      	cmp	r3, #1
   1957c:	d125      	bne.n	195ca <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   1957e:	4b36      	ldr	r3, [pc, #216]	; (19658 <Water_Level_Task+0x244>)
   19580:	781b      	ldrb	r3, [r3, #0]
   19582:	220b      	movs	r2, #11
   19584:	18ba      	adds	r2, r7, r2
   19586:	7812      	ldrb	r2, [r2, #0]
   19588:	429a      	cmp	r2, r3
   1958a:	d006      	beq.n	1959a <Water_Level_Task+0x186>
   1958c:	4b33      	ldr	r3, [pc, #204]	; (1965c <Water_Level_Task+0x248>)
   1958e:	781b      	ldrb	r3, [r3, #0]
   19590:	220b      	movs	r2, #11
   19592:	18ba      	adds	r2, r7, r2
   19594:	7812      	ldrb	r2, [r2, #0]
   19596:	429a      	cmp	r2, r3
   19598:	d00f      	beq.n	195ba <Water_Level_Task+0x1a6>
   1959a:	4b31      	ldr	r3, [pc, #196]	; (19660 <Water_Level_Task+0x24c>)
   1959c:	781b      	ldrb	r3, [r3, #0]
   1959e:	b2db      	uxtb	r3, r3
   195a0:	220d      	movs	r2, #13
   195a2:	18ba      	adds	r2, r7, r2
   195a4:	7812      	ldrb	r2, [r2, #0]
   195a6:	429a      	cmp	r2, r3
   195a8:	d009      	beq.n	195be <Water_Level_Task+0x1aa>
   195aa:	4b2e      	ldr	r3, [pc, #184]	; (19664 <Water_Level_Task+0x250>)
   195ac:	781b      	ldrb	r3, [r3, #0]
   195ae:	b2db      	uxtb	r3, r3
   195b0:	220d      	movs	r2, #13
   195b2:	18ba      	adds	r2, r7, r2
   195b4:	7812      	ldrb	r2, [r2, #0]
   195b6:	429a      	cmp	r2, r3
   195b8:	d101      	bne.n	195be <Water_Level_Task+0x1aa>
   195ba:	2301      	movs	r3, #1
   195bc:	e000      	b.n	195c0 <Water_Level_Task+0x1ac>
   195be:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   195c0:	1c1a      	adds	r2, r3, #0
   195c2:	2301      	movs	r3, #1
   195c4:	4013      	ands	r3, r2
   195c6:	b2db      	uxtb	r3, r3
   195c8:	e014      	b.n	195f4 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   195ca:	4b23      	ldr	r3, [pc, #140]	; (19658 <Water_Level_Task+0x244>)
   195cc:	781b      	ldrb	r3, [r3, #0]
   195ce:	220b      	movs	r2, #11
   195d0:	18ba      	adds	r2, r7, r2
   195d2:	7812      	ldrb	r2, [r2, #0]
   195d4:	429a      	cmp	r2, r3
   195d6:	d008      	beq.n	195ea <Water_Level_Task+0x1d6>
   195d8:	4b20      	ldr	r3, [pc, #128]	; (1965c <Water_Level_Task+0x248>)
   195da:	781b      	ldrb	r3, [r3, #0]
   195dc:	220b      	movs	r2, #11
   195de:	18ba      	adds	r2, r7, r2
   195e0:	7812      	ldrb	r2, [r2, #0]
   195e2:	429a      	cmp	r2, r3
   195e4:	d101      	bne.n	195ea <Water_Level_Task+0x1d6>
   195e6:	2301      	movs	r3, #1
   195e8:	e000      	b.n	195ec <Water_Level_Task+0x1d8>
   195ea:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   195ec:	1c1a      	adds	r2, r3, #0
   195ee:	2301      	movs	r3, #1
   195f0:	4013      	ands	r3, r2
   195f2:	b2db      	uxtb	r3, r3
   195f4:	2b00      	cmp	r3, #0
   195f6:	d010      	beq.n	1961a <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
   195f8:	4b1b      	ldr	r3, [pc, #108]	; (19668 <Water_Level_Task+0x254>)
   195fa:	781b      	ldrb	r3, [r3, #0]
   195fc:	3301      	adds	r3, #1
   195fe:	b2da      	uxtb	r2, r3
   19600:	4b19      	ldr	r3, [pc, #100]	; (19668 <Water_Level_Task+0x254>)
   19602:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   19604:	4b18      	ldr	r3, [pc, #96]	; (19668 <Water_Level_Task+0x254>)
   19606:	781b      	ldrb	r3, [r3, #0]
   19608:	2b09      	cmp	r3, #9
   1960a:	d909      	bls.n	19620 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
   1960c:	4b1f      	ldr	r3, [pc, #124]	; (1968c <Water_Level_Task+0x278>)
   1960e:	4798      	blx	r3
					result=true;
   19610:	230c      	movs	r3, #12
   19612:	18fb      	adds	r3, r7, r3
   19614:	2201      	movs	r2, #1
   19616:	701a      	strb	r2, [r3, #0]
   19618:	e002      	b.n	19620 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
   1961a:	4b13      	ldr	r3, [pc, #76]	; (19668 <Water_Level_Task+0x254>)
   1961c:	2200      	movs	r2, #0
   1961e:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   19620:	4b0e      	ldr	r3, [pc, #56]	; (1965c <Water_Level_Task+0x248>)
   19622:	220b      	movs	r2, #11
   19624:	18ba      	adds	r2, r7, r2
   19626:	7812      	ldrb	r2, [r2, #0]
   19628:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   1962a:	4b10      	ldr	r3, [pc, #64]	; (1966c <Water_Level_Task+0x258>)
   1962c:	791b      	ldrb	r3, [r3, #4]
   1962e:	2b00      	cmp	r3, #0
   19630:	d009      	beq.n	19646 <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
   19632:	4b0c      	ldr	r3, [pc, #48]	; (19664 <Water_Level_Task+0x250>)
   19634:	220d      	movs	r2, #13
   19636:	18ba      	adds	r2, r7, r2
   19638:	7812      	ldrb	r2, [r2, #0]
   1963a:	701a      	strb	r2, [r3, #0]
   1963c:	e003      	b.n	19646 <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   1963e:	4b14      	ldr	r3, [pc, #80]	; (19690 <Water_Level_Task+0x27c>)
   19640:	0018      	movs	r0, r3
   19642:	4b14      	ldr	r3, [pc, #80]	; (19694 <Water_Level_Task+0x280>)
   19644:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   19646:	2064      	movs	r0, #100	; 0x64
   19648:	4b12      	ldr	r3, [pc, #72]	; (19694 <Water_Level_Task+0x280>)
   1964a:	4798      	blx	r3
	{
   1964c:	e77a      	b.n	19544 <Water_Level_Task+0x130>
   1964e:	46c0      	nop			; (mov r8, r8)
   19650:	00018f25 	.word	0x00018f25
   19654:	00022f71 	.word	0x00022f71
   19658:	20000854 	.word	0x20000854
   1965c:	20000765 	.word	0x20000765
   19660:	20000784 	.word	0x20000784
   19664:	20000756 	.word	0x20000756
   19668:	20000780 	.word	0x20000780
   1966c:	20000628 	.word	0x20000628
   19670:	20000708 	.word	0x20000708
   19674:	200007f4 	.word	0x200007f4
   19678:	200007b8 	.word	0x200007b8
   1967c:	20000734 	.word	0x20000734
   19680:	20000650 	.word	0x20000650
   19684:	00019321 	.word	0x00019321
   19688:	000191f1 	.word	0x000191f1
   1968c:	00019699 	.word	0x00019699
   19690:	00001388 	.word	0x00001388
   19694:	0001fee9 	.word	0x0001fee9

00019698 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   19698:	b580      	push	{r7, lr}
   1969a:	b082      	sub	sp, #8
   1969c:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   1969e:	1dfb      	adds	r3, r7, #7
   196a0:	4abb      	ldr	r2, [pc, #748]	; (19990 <operateOnWaterEvent+0x2f8>)
   196a2:	7812      	ldrb	r2, [r2, #0]
   196a4:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   196a6:	1dbb      	adds	r3, r7, #6
   196a8:	4aba      	ldr	r2, [pc, #744]	; (19994 <operateOnWaterEvent+0x2fc>)
   196aa:	7812      	ldrb	r2, [r2, #0]
   196ac:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   196ae:	4bba      	ldr	r3, [pc, #744]	; (19998 <operateOnWaterEvent+0x300>)
   196b0:	781b      	ldrb	r3, [r3, #0]
   196b2:	1dfa      	adds	r2, r7, #7
   196b4:	7812      	ldrb	r2, [r2, #0]
   196b6:	429a      	cmp	r2, r3
   196b8:	d10c      	bne.n	196d4 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   196ba:	4bb8      	ldr	r3, [pc, #736]	; (1999c <operateOnWaterEvent+0x304>)
   196bc:	791b      	ldrb	r3, [r3, #4]
   196be:	2b00      	cmp	r3, #0
   196c0:	d000      	beq.n	196c4 <operateOnWaterEvent+0x2c>
   196c2:	e15e      	b.n	19982 <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   196c4:	4bb6      	ldr	r3, [pc, #728]	; (199a0 <operateOnWaterEvent+0x308>)
   196c6:	781b      	ldrb	r3, [r3, #0]
   196c8:	b2db      	uxtb	r3, r3
   196ca:	1dba      	adds	r2, r7, #6
   196cc:	7812      	ldrb	r2, [r2, #0]
   196ce:	429a      	cmp	r2, r3
   196d0:	d100      	bne.n	196d4 <operateOnWaterEvent+0x3c>
   196d2:	e158      	b.n	19986 <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
   196d4:	4bb3      	ldr	r3, [pc, #716]	; (199a4 <operateOnWaterEvent+0x30c>)
   196d6:	4798      	blx	r3
   196d8:	1e03      	subs	r3, r0, #0
   196da:	d100      	bne.n	196de <operateOnWaterEvent+0x46>
   196dc:	e0c3      	b.n	19866 <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   196de:	1dfb      	adds	r3, r7, #7
   196e0:	781b      	ldrb	r3, [r3, #0]
   196e2:	2b00      	cmp	r3, #0
   196e4:	d122      	bne.n	1972c <operateOnWaterEvent+0x94>
   196e6:	4bac      	ldr	r3, [pc, #688]	; (19998 <operateOnWaterEvent+0x300>)
   196e8:	781b      	ldrb	r3, [r3, #0]
   196ea:	2b00      	cmp	r3, #0
   196ec:	d01e      	beq.n	1972c <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   196ee:	2200      	movs	r2, #0
   196f0:	2101      	movs	r1, #1
   196f2:	2000      	movs	r0, #0
   196f4:	4bac      	ldr	r3, [pc, #688]	; (199a8 <operateOnWaterEvent+0x310>)
   196f6:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   196f8:	2049      	movs	r0, #73	; 0x49
   196fa:	4bac      	ldr	r3, [pc, #688]	; (199ac <operateOnWaterEvent+0x314>)
   196fc:	4798      	blx	r3
   196fe:	0003      	movs	r3, r0
   19700:	001a      	movs	r2, r3
   19702:	4bab      	ldr	r3, [pc, #684]	; (199b0 <operateOnWaterEvent+0x318>)
   19704:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19706:	4ba5      	ldr	r3, [pc, #660]	; (1999c <operateOnWaterEvent+0x304>)
   19708:	78db      	ldrb	r3, [r3, #3]
   1970a:	2b00      	cmp	r3, #0
   1970c:	d100      	bne.n	19710 <operateOnWaterEvent+0x78>
   1970e:	e071      	b.n	197f4 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   19710:	4ba8      	ldr	r3, [pc, #672]	; (199b4 <operateOnWaterEvent+0x31c>)
   19712:	795b      	ldrb	r3, [r3, #5]
   19714:	2b00      	cmp	r3, #0
   19716:	d100      	bne.n	1971a <operateOnWaterEvent+0x82>
   19718:	e06c      	b.n	197f4 <operateOnWaterEvent+0x15c>
   1971a:	4b9f      	ldr	r3, [pc, #636]	; (19998 <operateOnWaterEvent+0x300>)
   1971c:	781b      	ldrb	r3, [r3, #0]
   1971e:	2b01      	cmp	r3, #1
   19720:	d800      	bhi.n	19724 <operateOnWaterEvent+0x8c>
   19722:	e067      	b.n	197f4 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19724:	4ba4      	ldr	r3, [pc, #656]	; (199b8 <operateOnWaterEvent+0x320>)
   19726:	2201      	movs	r2, #1
   19728:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1972a:	e063      	b.n	197f4 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   1972c:	1dfb      	adds	r3, r7, #7
   1972e:	781b      	ldrb	r3, [r3, #0]
   19730:	2b03      	cmp	r3, #3
   19732:	d12f      	bne.n	19794 <operateOnWaterEvent+0xfc>
   19734:	4b98      	ldr	r3, [pc, #608]	; (19998 <operateOnWaterEvent+0x300>)
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	2b02      	cmp	r3, #2
   1973a:	d82b      	bhi.n	19794 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1973c:	4b97      	ldr	r3, [pc, #604]	; (1999c <operateOnWaterEvent+0x304>)
   1973e:	78db      	ldrb	r3, [r3, #3]
   19740:	2b00      	cmp	r3, #0
   19742:	d05a      	beq.n	197fa <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19744:	4b9b      	ldr	r3, [pc, #620]	; (199b4 <operateOnWaterEvent+0x31c>)
   19746:	795b      	ldrb	r3, [r3, #5]
   19748:	2b00      	cmp	r3, #0
   1974a:	d003      	beq.n	19754 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   1974c:	4b9a      	ldr	r3, [pc, #616]	; (199b8 <operateOnWaterEvent+0x320>)
   1974e:	2201      	movs	r2, #1
   19750:	705a      	strb	r2, [r3, #1]
   19752:	e006      	b.n	19762 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   19754:	2045      	movs	r0, #69	; 0x45
   19756:	4b95      	ldr	r3, [pc, #596]	; (199ac <operateOnWaterEvent+0x314>)
   19758:	4798      	blx	r3
   1975a:	0003      	movs	r3, r0
   1975c:	001a      	movs	r2, r3
   1975e:	4b94      	ldr	r3, [pc, #592]	; (199b0 <operateOnWaterEvent+0x318>)
   19760:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   19762:	4b96      	ldr	r3, [pc, #600]	; (199bc <operateOnWaterEvent+0x324>)
   19764:	7f9b      	ldrb	r3, [r3, #30]
   19766:	2b00      	cmp	r3, #0
   19768:	d00c      	beq.n	19784 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
   1976a:	2200      	movs	r2, #0
   1976c:	2101      	movs	r1, #1
   1976e:	2000      	movs	r0, #0
   19770:	4b8d      	ldr	r3, [pc, #564]	; (199a8 <operateOnWaterEvent+0x310>)
   19772:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   19774:	2048      	movs	r0, #72	; 0x48
   19776:	4b8d      	ldr	r3, [pc, #564]	; (199ac <operateOnWaterEvent+0x314>)
   19778:	4798      	blx	r3
   1977a:	0003      	movs	r3, r0
   1977c:	001a      	movs	r2, r3
   1977e:	4b8c      	ldr	r3, [pc, #560]	; (199b0 <operateOnWaterEvent+0x318>)
   19780:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19782:	e03a      	b.n	197fa <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19784:	2045      	movs	r0, #69	; 0x45
   19786:	4b89      	ldr	r3, [pc, #548]	; (199ac <operateOnWaterEvent+0x314>)
   19788:	4798      	blx	r3
   1978a:	0003      	movs	r3, r0
   1978c:	001a      	movs	r2, r3
   1978e:	4b88      	ldr	r3, [pc, #544]	; (199b0 <operateOnWaterEvent+0x318>)
   19790:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19792:	e032      	b.n	197fa <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   19794:	1dfb      	adds	r3, r7, #7
   19796:	781b      	ldrb	r3, [r3, #0]
   19798:	2b01      	cmp	r3, #1
   1979a:	d11b      	bne.n	197d4 <operateOnWaterEvent+0x13c>
   1979c:	4b7e      	ldr	r3, [pc, #504]	; (19998 <operateOnWaterEvent+0x300>)
   1979e:	781b      	ldrb	r3, [r3, #0]
   197a0:	2b01      	cmp	r3, #1
   197a2:	d917      	bls.n	197d4 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   197a4:	4b7d      	ldr	r3, [pc, #500]	; (1999c <operateOnWaterEvent+0x304>)
   197a6:	78db      	ldrb	r3, [r3, #3]
   197a8:	2b00      	cmp	r3, #0
   197aa:	d007      	beq.n	197bc <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
   197ac:	4b81      	ldr	r3, [pc, #516]	; (199b4 <operateOnWaterEvent+0x31c>)
   197ae:	795b      	ldrb	r3, [r3, #5]
   197b0:	2b00      	cmp	r3, #0
   197b2:	d021      	beq.n	197f8 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   197b4:	4b80      	ldr	r3, [pc, #512]	; (199b8 <operateOnWaterEvent+0x320>)
   197b6:	2201      	movs	r2, #1
   197b8:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   197ba:	e01d      	b.n	197f8 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   197bc:	4b77      	ldr	r3, [pc, #476]	; (1999c <operateOnWaterEvent+0x304>)
   197be:	79db      	ldrb	r3, [r3, #7]
   197c0:	2b00      	cmp	r3, #0
   197c2:	d019      	beq.n	197f8 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   197c4:	2044      	movs	r0, #68	; 0x44
   197c6:	4b79      	ldr	r3, [pc, #484]	; (199ac <operateOnWaterEvent+0x314>)
   197c8:	4798      	blx	r3
   197ca:	0003      	movs	r3, r0
   197cc:	001a      	movs	r2, r3
   197ce:	4b78      	ldr	r3, [pc, #480]	; (199b0 <operateOnWaterEvent+0x318>)
   197d0:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   197d2:	e011      	b.n	197f8 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   197d4:	1dfb      	adds	r3, r7, #7
   197d6:	781b      	ldrb	r3, [r3, #0]
   197d8:	2b02      	cmp	r3, #2
   197da:	d10e      	bne.n	197fa <operateOnWaterEvent+0x162>
   197dc:	4b6e      	ldr	r3, [pc, #440]	; (19998 <operateOnWaterEvent+0x300>)
   197de:	781b      	ldrb	r3, [r3, #0]
   197e0:	2b01      	cmp	r3, #1
   197e2:	d80a      	bhi.n	197fa <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   197e4:	205a      	movs	r0, #90	; 0x5a
   197e6:	4b71      	ldr	r3, [pc, #452]	; (199ac <operateOnWaterEvent+0x314>)
   197e8:	4798      	blx	r3
   197ea:	0003      	movs	r3, r0
   197ec:	001a      	movs	r2, r3
   197ee:	4b70      	ldr	r3, [pc, #448]	; (199b0 <operateOnWaterEvent+0x318>)
   197f0:	741a      	strb	r2, [r3, #16]
   197f2:	e002      	b.n	197fa <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   197f4:	46c0      	nop			; (mov r8, r8)
   197f6:	e000      	b.n	197fa <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   197f8:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   197fa:	4b68      	ldr	r3, [pc, #416]	; (1999c <operateOnWaterEvent+0x304>)
   197fc:	791b      	ldrb	r3, [r3, #4]
   197fe:	2b00      	cmp	r3, #0
   19800:	d100      	bne.n	19804 <operateOnWaterEvent+0x16c>
   19802:	e0af      	b.n	19964 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
   19804:	4b66      	ldr	r3, [pc, #408]	; (199a0 <operateOnWaterEvent+0x308>)
   19806:	781b      	ldrb	r3, [r3, #0]
   19808:	b2db      	uxtb	r3, r3
   1980a:	1dba      	adds	r2, r7, #6
   1980c:	7812      	ldrb	r2, [r2, #0]
   1980e:	429a      	cmp	r2, r3
   19810:	d100      	bne.n	19814 <operateOnWaterEvent+0x17c>
   19812:	e0a7      	b.n	19964 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   19814:	1dbb      	adds	r3, r7, #6
   19816:	781b      	ldrb	r3, [r3, #0]
   19818:	2b02      	cmp	r3, #2
   1981a:	d111      	bne.n	19840 <operateOnWaterEvent+0x1a8>
   1981c:	4b60      	ldr	r3, [pc, #384]	; (199a0 <operateOnWaterEvent+0x308>)
   1981e:	781b      	ldrb	r3, [r3, #0]
   19820:	b2db      	uxtb	r3, r3
   19822:	2b01      	cmp	r3, #1
   19824:	d80c      	bhi.n	19840 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
   19826:	2200      	movs	r2, #0
   19828:	2101      	movs	r1, #1
   1982a:	2000      	movs	r0, #0
   1982c:	4b5e      	ldr	r3, [pc, #376]	; (199a8 <operateOnWaterEvent+0x310>)
   1982e:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   19830:	2056      	movs	r0, #86	; 0x56
   19832:	4b5e      	ldr	r3, [pc, #376]	; (199ac <operateOnWaterEvent+0x314>)
   19834:	4798      	blx	r3
   19836:	0003      	movs	r3, r0
   19838:	001a      	movs	r2, r3
   1983a:	4b5d      	ldr	r3, [pc, #372]	; (199b0 <operateOnWaterEvent+0x318>)
   1983c:	745a      	strb	r2, [r3, #17]
   1983e:	e091      	b.n	19964 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   19840:	1dbb      	adds	r3, r7, #6
   19842:	781b      	ldrb	r3, [r3, #0]
   19844:	2b00      	cmp	r3, #0
   19846:	d000      	beq.n	1984a <operateOnWaterEvent+0x1b2>
   19848:	e08c      	b.n	19964 <operateOnWaterEvent+0x2cc>
   1984a:	4b55      	ldr	r3, [pc, #340]	; (199a0 <operateOnWaterEvent+0x308>)
   1984c:	781b      	ldrb	r3, [r3, #0]
   1984e:	b2db      	uxtb	r3, r3
   19850:	2b00      	cmp	r3, #0
   19852:	d100      	bne.n	19856 <operateOnWaterEvent+0x1be>
   19854:	e086      	b.n	19964 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   19856:	2057      	movs	r0, #87	; 0x57
   19858:	4b54      	ldr	r3, [pc, #336]	; (199ac <operateOnWaterEvent+0x314>)
   1985a:	4798      	blx	r3
   1985c:	0003      	movs	r3, r0
   1985e:	001a      	movs	r2, r3
   19860:	4b53      	ldr	r3, [pc, #332]	; (199b0 <operateOnWaterEvent+0x318>)
   19862:	749a      	strb	r2, [r3, #18]
   19864:	e07e      	b.n	19964 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   19866:	4b4d      	ldr	r3, [pc, #308]	; (1999c <operateOnWaterEvent+0x304>)
   19868:	78db      	ldrb	r3, [r3, #3]
   1986a:	2b00      	cmp	r3, #0
   1986c:	d027      	beq.n	198be <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   1986e:	4b51      	ldr	r3, [pc, #324]	; (199b4 <operateOnWaterEvent+0x31c>)
   19870:	795b      	ldrb	r3, [r3, #5]
   19872:	2b00      	cmp	r3, #0
   19874:	d00b      	beq.n	1988e <operateOnWaterEvent+0x1f6>
   19876:	1dfb      	adds	r3, r7, #7
   19878:	781b      	ldrb	r3, [r3, #0]
   1987a:	2b01      	cmp	r3, #1
   1987c:	d807      	bhi.n	1988e <operateOnWaterEvent+0x1f6>
   1987e:	4b46      	ldr	r3, [pc, #280]	; (19998 <operateOnWaterEvent+0x300>)
   19880:	781b      	ldrb	r3, [r3, #0]
   19882:	2b01      	cmp	r3, #1
   19884:	d903      	bls.n	1988e <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   19886:	4b4c      	ldr	r3, [pc, #304]	; (199b8 <operateOnWaterEvent+0x320>)
   19888:	2201      	movs	r2, #1
   1988a:	701a      	strb	r2, [r3, #0]
   1988c:	e04b      	b.n	19926 <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   1988e:	1dfb      	adds	r3, r7, #7
   19890:	781b      	ldrb	r3, [r3, #0]
   19892:	2b03      	cmp	r3, #3
   19894:	d147      	bne.n	19926 <operateOnWaterEvent+0x28e>
   19896:	4b40      	ldr	r3, [pc, #256]	; (19998 <operateOnWaterEvent+0x300>)
   19898:	781b      	ldrb	r3, [r3, #0]
   1989a:	2b02      	cmp	r3, #2
   1989c:	d843      	bhi.n	19926 <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
   1989e:	4b45      	ldr	r3, [pc, #276]	; (199b4 <operateOnWaterEvent+0x31c>)
   198a0:	795b      	ldrb	r3, [r3, #5]
   198a2:	2b00      	cmp	r3, #0
   198a4:	d003      	beq.n	198ae <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   198a6:	4b44      	ldr	r3, [pc, #272]	; (199b8 <operateOnWaterEvent+0x320>)
   198a8:	2201      	movs	r2, #1
   198aa:	705a      	strb	r2, [r3, #1]
   198ac:	e03b      	b.n	19926 <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   198ae:	2045      	movs	r0, #69	; 0x45
   198b0:	4b3e      	ldr	r3, [pc, #248]	; (199ac <operateOnWaterEvent+0x314>)
   198b2:	4798      	blx	r3
   198b4:	0003      	movs	r3, r0
   198b6:	001a      	movs	r2, r3
   198b8:	4b3d      	ldr	r3, [pc, #244]	; (199b0 <operateOnWaterEvent+0x318>)
   198ba:	73da      	strb	r2, [r3, #15]
   198bc:	e033      	b.n	19926 <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   198be:	1dfb      	adds	r3, r7, #7
   198c0:	781b      	ldrb	r3, [r3, #0]
   198c2:	2b03      	cmp	r3, #3
   198c4:	d10b      	bne.n	198de <operateOnWaterEvent+0x246>
   198c6:	4b34      	ldr	r3, [pc, #208]	; (19998 <operateOnWaterEvent+0x300>)
   198c8:	781b      	ldrb	r3, [r3, #0]
   198ca:	2b02      	cmp	r3, #2
   198cc:	d807      	bhi.n	198de <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   198ce:	2045      	movs	r0, #69	; 0x45
   198d0:	4b36      	ldr	r3, [pc, #216]	; (199ac <operateOnWaterEvent+0x314>)
   198d2:	4798      	blx	r3
   198d4:	0003      	movs	r3, r0
   198d6:	001a      	movs	r2, r3
   198d8:	4b35      	ldr	r3, [pc, #212]	; (199b0 <operateOnWaterEvent+0x318>)
   198da:	73da      	strb	r2, [r3, #15]
   198dc:	e023      	b.n	19926 <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   198de:	1dfb      	adds	r3, r7, #7
   198e0:	781b      	ldrb	r3, [r3, #0]
   198e2:	2b02      	cmp	r3, #2
   198e4:	d11f      	bne.n	19926 <operateOnWaterEvent+0x28e>
   198e6:	4b2c      	ldr	r3, [pc, #176]	; (19998 <operateOnWaterEvent+0x300>)
   198e8:	781b      	ldrb	r3, [r3, #0]
   198ea:	2b01      	cmp	r3, #1
   198ec:	d81b      	bhi.n	19926 <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   198ee:	4b2b      	ldr	r3, [pc, #172]	; (1999c <operateOnWaterEvent+0x304>)
   198f0:	791b      	ldrb	r3, [r3, #4]
   198f2:	2b00      	cmp	r3, #0
   198f4:	d00d      	beq.n	19912 <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   198f6:	4b29      	ldr	r3, [pc, #164]	; (1999c <operateOnWaterEvent+0x304>)
   198f8:	799b      	ldrb	r3, [r3, #6]
   198fa:	2b00      	cmp	r3, #0
   198fc:	d009      	beq.n	19912 <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   198fe:	1dbb      	adds	r3, r7, #6
   19900:	781b      	ldrb	r3, [r3, #0]
   19902:	2b01      	cmp	r3, #1
   19904:	d805      	bhi.n	19912 <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19906:	4b2d      	ldr	r3, [pc, #180]	; (199bc <operateOnWaterEvent+0x324>)
   19908:	785b      	ldrb	r3, [r3, #1]
   1990a:	2b00      	cmp	r3, #0
   1990c:	d001      	beq.n	19912 <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
   1990e:	4b2c      	ldr	r3, [pc, #176]	; (199c0 <operateOnWaterEvent+0x328>)
   19910:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   19912:	4b22      	ldr	r3, [pc, #136]	; (1999c <operateOnWaterEvent+0x304>)
   19914:	799b      	ldrb	r3, [r3, #6]
   19916:	2b00      	cmp	r3, #0
   19918:	d005      	beq.n	19926 <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   1991a:	4b28      	ldr	r3, [pc, #160]	; (199bc <operateOnWaterEvent+0x324>)
   1991c:	785b      	ldrb	r3, [r3, #1]
   1991e:	2b00      	cmp	r3, #0
   19920:	d001      	beq.n	19926 <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
   19922:	4b27      	ldr	r3, [pc, #156]	; (199c0 <operateOnWaterEvent+0x328>)
   19924:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19926:	4b1d      	ldr	r3, [pc, #116]	; (1999c <operateOnWaterEvent+0x304>)
   19928:	791b      	ldrb	r3, [r3, #4]
   1992a:	2b00      	cmp	r3, #0
   1992c:	d01a      	beq.n	19964 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   1992e:	1dbb      	adds	r3, r7, #6
   19930:	781b      	ldrb	r3, [r3, #0]
   19932:	2b00      	cmp	r3, #0
   19934:	d116      	bne.n	19964 <operateOnWaterEvent+0x2cc>
   19936:	4b1a      	ldr	r3, [pc, #104]	; (199a0 <operateOnWaterEvent+0x308>)
   19938:	781b      	ldrb	r3, [r3, #0]
   1993a:	b2db      	uxtb	r3, r3
   1993c:	2b00      	cmp	r3, #0
   1993e:	d011      	beq.n	19964 <operateOnWaterEvent+0x2cc>
   19940:	1dfb      	adds	r3, r7, #7
   19942:	781b      	ldrb	r3, [r3, #0]
   19944:	2b00      	cmp	r3, #0
   19946:	d00d      	beq.n	19964 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   19948:	4b1c      	ldr	r3, [pc, #112]	; (199bc <operateOnWaterEvent+0x324>)
   1994a:	785b      	ldrb	r3, [r3, #1]
   1994c:	2b00      	cmp	r3, #0
   1994e:	d002      	beq.n	19956 <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
   19950:	4b1b      	ldr	r3, [pc, #108]	; (199c0 <operateOnWaterEvent+0x328>)
   19952:	4798      	blx	r3
   19954:	e006      	b.n	19964 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   19956:	2057      	movs	r0, #87	; 0x57
   19958:	4b14      	ldr	r3, [pc, #80]	; (199ac <operateOnWaterEvent+0x314>)
   1995a:	4798      	blx	r3
   1995c:	0003      	movs	r3, r0
   1995e:	001a      	movs	r2, r3
   19960:	4b13      	ldr	r3, [pc, #76]	; (199b0 <operateOnWaterEvent+0x318>)
   19962:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19964:	4b0d      	ldr	r3, [pc, #52]	; (1999c <operateOnWaterEvent+0x304>)
   19966:	791b      	ldrb	r3, [r3, #4]
   19968:	2b00      	cmp	r3, #0
   1996a:	d004      	beq.n	19976 <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
   1996c:	1dbb      	adds	r3, r7, #6
   1996e:	781b      	ldrb	r3, [r3, #0]
   19970:	0018      	movs	r0, r3
   19972:	4b14      	ldr	r3, [pc, #80]	; (199c4 <operateOnWaterEvent+0x32c>)
   19974:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   19976:	1dfb      	adds	r3, r7, #7
   19978:	781b      	ldrb	r3, [r3, #0]
   1997a:	0018      	movs	r0, r3
   1997c:	4b12      	ldr	r3, [pc, #72]	; (199c8 <operateOnWaterEvent+0x330>)
   1997e:	4798      	blx	r3
   19980:	e002      	b.n	19988 <operateOnWaterEvent+0x2f0>
			return;
   19982:	46c0      	nop			; (mov r8, r8)
   19984:	e000      	b.n	19988 <operateOnWaterEvent+0x2f0>
				return;
   19986:	46c0      	nop			; (mov r8, r8)
}
   19988:	46bd      	mov	sp, r7
   1998a:	b002      	add	sp, #8
   1998c:	bd80      	pop	{r7, pc}
   1998e:	46c0      	nop			; (mov r8, r8)
   19990:	20000765 	.word	0x20000765
   19994:	20000756 	.word	0x20000756
   19998:	20000854 	.word	0x20000854
   1999c:	20000628 	.word	0x20000628
   199a0:	20000784 	.word	0x20000784
   199a4:	0001aaf5 	.word	0x0001aaf5
   199a8:	0001b439 	.word	0x0001b439
   199ac:	00014931 	.word	0x00014931
   199b0:	20000708 	.word	0x20000708
   199b4:	20000554 	.word	0x20000554
   199b8:	200007b8 	.word	0x200007b8
   199bc:	20000650 	.word	0x20000650
   199c0:	0001ae75 	.word	0x0001ae75
   199c4:	000191d1 	.word	0x000191d1
   199c8:	00019301 	.word	0x00019301

000199cc <Configure_ADC0>:

void Configure_ADC0(void)
{
   199cc:	b580      	push	{r7, lr}
   199ce:	b08c      	sub	sp, #48	; 0x30
   199d0:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   199d2:	003b      	movs	r3, r7
   199d4:	0018      	movs	r0, r3
   199d6:	4b1a      	ldr	r3, [pc, #104]	; (19a40 <Configure_ADC0+0x74>)
   199d8:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   199da:	003b      	movs	r3, r7
   199dc:	2213      	movs	r2, #19
   199de:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   199e0:	003b      	movs	r3, r7
   199e2:	22c0      	movs	r2, #192	; 0xc0
   199e4:	0152      	lsls	r2, r2, #5
   199e6:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   199e8:	003b      	movs	r3, r7
   199ea:	2203      	movs	r2, #3
   199ec:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   199ee:	003b      	movs	r3, r7
   199f0:	2203      	movs	r2, #3
   199f2:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   199f4:	003b      	movs	r3, r7
   199f6:	2200      	movs	r2, #0
   199f8:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   199fa:	003b      	movs	r3, r7
   199fc:	2200      	movs	r2, #0
   199fe:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   19a00:	003b      	movs	r3, r7
   19a02:	2280      	movs	r2, #128	; 0x80
   19a04:	00d2      	lsls	r2, r2, #3
   19a06:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   19a08:	003b      	movs	r3, r7
   19a0a:	2201      	movs	r2, #1
   19a0c:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   19a0e:	003a      	movs	r2, r7
   19a10:	490c      	ldr	r1, [pc, #48]	; (19a44 <Configure_ADC0+0x78>)
   19a12:	4b0d      	ldr	r3, [pc, #52]	; (19a48 <Configure_ADC0+0x7c>)
   19a14:	0018      	movs	r0, r3
   19a16:	4b0d      	ldr	r3, [pc, #52]	; (19a4c <Configure_ADC0+0x80>)
   19a18:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   19a1a:	490d      	ldr	r1, [pc, #52]	; (19a50 <Configure_ADC0+0x84>)
   19a1c:	4b0a      	ldr	r3, [pc, #40]	; (19a48 <Configure_ADC0+0x7c>)
   19a1e:	2200      	movs	r2, #0
   19a20:	0018      	movs	r0, r3
   19a22:	4b0c      	ldr	r3, [pc, #48]	; (19a54 <Configure_ADC0+0x88>)
   19a24:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   19a26:	4b08      	ldr	r3, [pc, #32]	; (19a48 <Configure_ADC0+0x7c>)
   19a28:	2100      	movs	r1, #0
   19a2a:	0018      	movs	r0, r3
   19a2c:	4b0a      	ldr	r3, [pc, #40]	; (19a58 <Configure_ADC0+0x8c>)
   19a2e:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   19a30:	4b05      	ldr	r3, [pc, #20]	; (19a48 <Configure_ADC0+0x7c>)
   19a32:	0018      	movs	r0, r3
   19a34:	4b09      	ldr	r3, [pc, #36]	; (19a5c <Configure_ADC0+0x90>)
   19a36:	4798      	blx	r3
}
   19a38:	46c0      	nop			; (mov r8, r8)
   19a3a:	46bd      	mov	sp, r7
   19a3c:	b00c      	add	sp, #48	; 0x30
   19a3e:	bd80      	pop	{r7, pc}
   19a40:	0001cfc1 	.word	0x0001cfc1
   19a44:	42004000 	.word	0x42004000
   19a48:	20000818 	.word	0x20000818
   19a4c:	0001d611 	.word	0x0001d611
   19a50:	00019a61 	.word	0x00019a61
   19a54:	0001d911 	.word	0x0001d911
   19a58:	00018ea5 	.word	0x00018ea5
   19a5c:	00018d0d 	.word	0x00018d0d

00019a60 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   19a60:	b580      	push	{r7, lr}
   19a62:	b082      	sub	sp, #8
   19a64:	af00      	add	r7, sp, #0
   19a66:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   19a68:	4b06      	ldr	r3, [pc, #24]	; (19a84 <adc_buffer_complete_callback+0x24>)
   19a6a:	2201      	movs	r2, #1
   19a6c:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   19a6e:	4b06      	ldr	r3, [pc, #24]	; (19a88 <adc_buffer_complete_callback+0x28>)
   19a70:	681b      	ldr	r3, [r3, #0]
   19a72:	2100      	movs	r1, #0
   19a74:	0018      	movs	r0, r3
   19a76:	4b05      	ldr	r3, [pc, #20]	; (19a8c <adc_buffer_complete_callback+0x2c>)
   19a78:	4798      	blx	r3
}
   19a7a:	46c0      	nop			; (mov r8, r8)
   19a7c:	46bd      	mov	sp, r7
   19a7e:	b002      	add	sp, #8
   19a80:	bd80      	pop	{r7, pc}
   19a82:	46c0      	nop			; (mov r8, r8)
   19a84:	20000739 	.word	0x20000739
   19a88:	20000240 	.word	0x20000240
   19a8c:	00020bf5 	.word	0x00020bf5

00019a90 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   19a90:	b580      	push	{r7, lr}
   19a92:	b084      	sub	sp, #16
   19a94:	af00      	add	r7, sp, #0
   19a96:	6078      	str	r0, [r7, #4]
   19a98:	000a      	movs	r2, r1
   19a9a:	1cbb      	adds	r3, r7, #2
   19a9c:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   19a9e:	687b      	ldr	r3, [r7, #4]
   19aa0:	b2da      	uxtb	r2, r3
   19aa2:	4b24      	ldr	r3, [pc, #144]	; (19b34 <Read_ADC0+0xa4>)
   19aa4:	0011      	movs	r1, r2
   19aa6:	0018      	movs	r0, r3
   19aa8:	4b23      	ldr	r3, [pc, #140]	; (19b38 <Read_ADC0+0xa8>)
   19aaa:	4798      	blx	r3
	uint16_t current_value = 0;
   19aac:	2308      	movs	r3, #8
   19aae:	18fb      	adds	r3, r7, r3
   19ab0:	2200      	movs	r2, #0
   19ab2:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   19ab4:	2300      	movs	r3, #0
   19ab6:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19ab8:	230a      	movs	r3, #10
   19aba:	18fb      	adds	r3, r7, r3
   19abc:	2200      	movs	r2, #0
   19abe:	801a      	strh	r2, [r3, #0]
   19ac0:	e026      	b.n	19b10 <Read_ADC0+0x80>
	{
		current_value = 0;
   19ac2:	2308      	movs	r3, #8
   19ac4:	18fb      	adds	r3, r7, r3
   19ac6:	2200      	movs	r2, #0
   19ac8:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   19aca:	4b1a      	ldr	r3, [pc, #104]	; (19b34 <Read_ADC0+0xa4>)
   19acc:	0018      	movs	r0, r3
   19ace:	4b1b      	ldr	r3, [pc, #108]	; (19b3c <Read_ADC0+0xac>)
   19ad0:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   19ad2:	46c0      	nop			; (mov r8, r8)
   19ad4:	4b17      	ldr	r3, [pc, #92]	; (19b34 <Read_ADC0+0xa4>)
   19ad6:	0018      	movs	r0, r3
   19ad8:	4b19      	ldr	r3, [pc, #100]	; (19b40 <Read_ADC0+0xb0>)
   19ada:	4798      	blx	r3
   19adc:	0002      	movs	r2, r0
   19ade:	2301      	movs	r3, #1
   19ae0:	4013      	ands	r3, r2
   19ae2:	2b01      	cmp	r3, #1
   19ae4:	d1f6      	bne.n	19ad4 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   19ae6:	2308      	movs	r3, #8
   19ae8:	18fa      	adds	r2, r7, r3
   19aea:	4b12      	ldr	r3, [pc, #72]	; (19b34 <Read_ADC0+0xa4>)
   19aec:	0011      	movs	r1, r2
   19aee:	0018      	movs	r0, r3
   19af0:	4b14      	ldr	r3, [pc, #80]	; (19b44 <Read_ADC0+0xb4>)
   19af2:	4798      	blx	r3
		total_value+=current_value;
   19af4:	2308      	movs	r3, #8
   19af6:	18fb      	adds	r3, r7, r3
   19af8:	881b      	ldrh	r3, [r3, #0]
   19afa:	001a      	movs	r2, r3
   19afc:	68fb      	ldr	r3, [r7, #12]
   19afe:	189b      	adds	r3, r3, r2
   19b00:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19b02:	230a      	movs	r3, #10
   19b04:	18fb      	adds	r3, r7, r3
   19b06:	881a      	ldrh	r2, [r3, #0]
   19b08:	230a      	movs	r3, #10
   19b0a:	18fb      	adds	r3, r7, r3
   19b0c:	3201      	adds	r2, #1
   19b0e:	801a      	strh	r2, [r3, #0]
   19b10:	230a      	movs	r3, #10
   19b12:	18fa      	adds	r2, r7, r3
   19b14:	1cbb      	adds	r3, r7, #2
   19b16:	8812      	ldrh	r2, [r2, #0]
   19b18:	881b      	ldrh	r3, [r3, #0]
   19b1a:	429a      	cmp	r2, r3
   19b1c:	d3d1      	bcc.n	19ac2 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   19b1e:	1cbb      	adds	r3, r7, #2
   19b20:	881a      	ldrh	r2, [r3, #0]
   19b22:	4b09      	ldr	r3, [pc, #36]	; (19b48 <Read_ADC0+0xb8>)
   19b24:	0011      	movs	r1, r2
   19b26:	68f8      	ldr	r0, [r7, #12]
   19b28:	4798      	blx	r3
   19b2a:	0003      	movs	r3, r0
}
   19b2c:	0018      	movs	r0, r3
   19b2e:	46bd      	mov	sp, r7
   19b30:	b004      	add	sp, #16
   19b32:	bd80      	pop	{r7, pc}
   19b34:	20000818 	.word	0x20000818
   19b38:	00018e31 	.word	0x00018e31
   19b3c:	00018d6d 	.word	0x00018d6d
   19b40:	00018c65 	.word	0x00018c65
   19b44:	00018db5 	.word	0x00018db5
   19b48:	000264fd 	.word	0x000264fd

00019b4c <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   19b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b4e:	b099      	sub	sp, #100	; 0x64
   19b50:	af00      	add	r7, sp, #0
   19b52:	6378      	str	r0, [r7, #52]	; 0x34
   19b54:	466b      	mov	r3, sp
   19b56:	633b      	str	r3, [r7, #48]	; 0x30
	delay_ms(5);
   19b58:	2000      	movs	r0, #0
   19b5a:	4ba3      	ldr	r3, [pc, #652]	; (19de8 <Read_Voltage_ADC0+0x29c>)
   19b5c:	4798      	blx	r3
   19b5e:	0003      	movs	r3, r0
   19b60:	61bb      	str	r3, [r7, #24]
   19b62:	2300      	movs	r3, #0
   19b64:	61fb      	str	r3, [r7, #28]
   19b66:	69b8      	ldr	r0, [r7, #24]
   19b68:	69f9      	ldr	r1, [r7, #28]
   19b6a:	0003      	movs	r3, r0
   19b6c:	000c      	movs	r4, r1
   19b6e:	0f9a      	lsrs	r2, r3, #30
   19b70:	00a6      	lsls	r6, r4, #2
   19b72:	4316      	orrs	r6, r2
   19b74:	009d      	lsls	r5, r3, #2
   19b76:	000a      	movs	r2, r1
   19b78:	0001      	movs	r1, r0
   19b7a:	1949      	adds	r1, r1, r5
   19b7c:	4172      	adcs	r2, r6
   19b7e:	4b9b      	ldr	r3, [pc, #620]	; (19dec <Read_Voltage_ADC0+0x2a0>)
   19b80:	2400      	movs	r4, #0
   19b82:	18c9      	adds	r1, r1, r3
   19b84:	4162      	adcs	r2, r4
   19b86:	0008      	movs	r0, r1
   19b88:	0011      	movs	r1, r2
   19b8a:	4c99      	ldr	r4, [pc, #612]	; (19df0 <Read_Voltage_ADC0+0x2a4>)
   19b8c:	4a99      	ldr	r2, [pc, #612]	; (19df4 <Read_Voltage_ADC0+0x2a8>)
   19b8e:	2300      	movs	r3, #0
   19b90:	47a0      	blx	r4
   19b92:	0003      	movs	r3, r0
   19b94:	000c      	movs	r4, r1
   19b96:	0018      	movs	r0, r3
   19b98:	4b97      	ldr	r3, [pc, #604]	; (19df8 <Read_Voltage_ADC0+0x2ac>)
   19b9a:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   19b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b9e:	b2db      	uxtb	r3, r3
   19ba0:	4a96      	ldr	r2, [pc, #600]	; (19dfc <Read_Voltage_ADC0+0x2b0>)
   19ba2:	0019      	movs	r1, r3
   19ba4:	0010      	movs	r0, r2
   19ba6:	4b96      	ldr	r3, [pc, #600]	; (19e00 <Read_Voltage_ADC0+0x2b4>)
   19ba8:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   19baa:	2328      	movs	r3, #40	; 0x28
   19bac:	2230      	movs	r2, #48	; 0x30
   19bae:	18ba      	adds	r2, r7, r2
   19bb0:	18d2      	adds	r2, r2, r3
   19bb2:	2388      	movs	r3, #136	; 0x88
   19bb4:	009b      	lsls	r3, r3, #2
   19bb6:	8013      	strh	r3, [r2, #0]
	uint16_t samples_buffer[no_of_samples];
   19bb8:	2328      	movs	r3, #40	; 0x28
   19bba:	2230      	movs	r2, #48	; 0x30
   19bbc:	4694      	mov	ip, r2
   19bbe:	44bc      	add	ip, r7
   19bc0:	4463      	add	r3, ip
   19bc2:	881a      	ldrh	r2, [r3, #0]
   19bc4:	0013      	movs	r3, r2
   19bc6:	3b01      	subs	r3, #1
   19bc8:	657b      	str	r3, [r7, #84]	; 0x54
   19bca:	613a      	str	r2, [r7, #16]
   19bcc:	2300      	movs	r3, #0
   19bce:	617b      	str	r3, [r7, #20]
   19bd0:	6938      	ldr	r0, [r7, #16]
   19bd2:	6979      	ldr	r1, [r7, #20]
   19bd4:	0003      	movs	r3, r0
   19bd6:	0f1b      	lsrs	r3, r3, #28
   19bd8:	000c      	movs	r4, r1
   19bda:	0124      	lsls	r4, r4, #4
   19bdc:	62fc      	str	r4, [r7, #44]	; 0x2c
   19bde:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   19be0:	431c      	orrs	r4, r3
   19be2:	62fc      	str	r4, [r7, #44]	; 0x2c
   19be4:	0003      	movs	r3, r0
   19be6:	011b      	lsls	r3, r3, #4
   19be8:	62bb      	str	r3, [r7, #40]	; 0x28
   19bea:	60ba      	str	r2, [r7, #8]
   19bec:	2300      	movs	r3, #0
   19bee:	60fb      	str	r3, [r7, #12]
   19bf0:	68b8      	ldr	r0, [r7, #8]
   19bf2:	68f9      	ldr	r1, [r7, #12]
   19bf4:	0003      	movs	r3, r0
   19bf6:	0f1b      	lsrs	r3, r3, #28
   19bf8:	000c      	movs	r4, r1
   19bfa:	0124      	lsls	r4, r4, #4
   19bfc:	627c      	str	r4, [r7, #36]	; 0x24
   19bfe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   19c00:	431c      	orrs	r4, r3
   19c02:	627c      	str	r4, [r7, #36]	; 0x24
   19c04:	0003      	movs	r3, r0
   19c06:	011b      	lsls	r3, r3, #4
   19c08:	623b      	str	r3, [r7, #32]
   19c0a:	0013      	movs	r3, r2
   19c0c:	005b      	lsls	r3, r3, #1
   19c0e:	3301      	adds	r3, #1
   19c10:	3307      	adds	r3, #7
   19c12:	08db      	lsrs	r3, r3, #3
   19c14:	00db      	lsls	r3, r3, #3
   19c16:	466a      	mov	r2, sp
   19c18:	1ad3      	subs	r3, r2, r3
   19c1a:	469d      	mov	sp, r3
   19c1c:	466b      	mov	r3, sp
   19c1e:	3301      	adds	r3, #1
   19c20:	085b      	lsrs	r3, r3, #1
   19c22:	005b      	lsls	r3, r3, #1
   19c24:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t temp = xTaskGetTickCount();
   19c26:	4b77      	ldr	r3, [pc, #476]	; (19e04 <Read_Voltage_ADC0+0x2b8>)
   19c28:	4798      	blx	r3
   19c2a:	0003      	movs	r3, r0
   19c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   19c2e:	4b76      	ldr	r3, [pc, #472]	; (19e08 <Read_Voltage_ADC0+0x2bc>)
   19c30:	2200      	movs	r2, #0
   19c32:	701a      	strb	r2, [r3, #0]
	
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   19c34:	46c0      	nop			; (mov r8, r8)
   19c36:	6d39      	ldr	r1, [r7, #80]	; 0x50
   19c38:	2328      	movs	r3, #40	; 0x28
   19c3a:	2230      	movs	r2, #48	; 0x30
   19c3c:	4694      	mov	ip, r2
   19c3e:	44bc      	add	ip, r7
   19c40:	4463      	add	r3, ip
   19c42:	881a      	ldrh	r2, [r3, #0]
   19c44:	4b6d      	ldr	r3, [pc, #436]	; (19dfc <Read_Voltage_ADC0+0x2b0>)
   19c46:	0018      	movs	r0, r3
   19c48:	4b70      	ldr	r3, [pc, #448]	; (19e0c <Read_Voltage_ADC0+0x2c0>)
   19c4a:	4798      	blx	r3
   19c4c:	1e03      	subs	r3, r0, #0
   19c4e:	d1f2      	bne.n	19c36 <Read_Voltage_ADC0+0xea>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   19c50:	2164      	movs	r1, #100	; 0x64
   19c52:	2001      	movs	r0, #1
   19c54:	4b6e      	ldr	r3, [pc, #440]	; (19e10 <Read_Voltage_ADC0+0x2c4>)
   19c56:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   19c58:	4b6b      	ldr	r3, [pc, #428]	; (19e08 <Read_Voltage_ADC0+0x2bc>)
   19c5a:	781b      	ldrb	r3, [r3, #0]
   19c5c:	2b00      	cmp	r3, #0
   19c5e:	d100      	bne.n	19c62 <Read_Voltage_ADC0+0x116>
   19c60:	e0bb      	b.n	19dda <Read_Voltage_ADC0+0x28e>
	{
		uint32_t square = 0;
   19c62:	2300      	movs	r3, #0
   19c64:	65fb      	str	r3, [r7, #92]	; 0x5c
		double  mean = 0.0;
   19c66:	2300      	movs	r3, #0
   19c68:	2400      	movs	r4, #0
   19c6a:	643b      	str	r3, [r7, #64]	; 0x40
   19c6c:	647c      	str	r4, [r7, #68]	; 0x44
		double  root = 0.0;
   19c6e:	2300      	movs	r3, #0
   19c70:	2400      	movs	r4, #0
   19c72:	63bb      	str	r3, [r7, #56]	; 0x38
   19c74:	63fc      	str	r4, [r7, #60]	; 0x3c
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   19c76:	232a      	movs	r3, #42	; 0x2a
   19c78:	2230      	movs	r2, #48	; 0x30
   19c7a:	4694      	mov	ip, r2
   19c7c:	44bc      	add	ip, r7
   19c7e:	4463      	add	r3, ip
   19c80:	2200      	movs	r2, #0
   19c82:	801a      	strh	r2, [r3, #0]
   19c84:	e032      	b.n	19cec <Read_Voltage_ADC0+0x1a0>
		{
			square += pow(samples_buffer[i], 2);
   19c86:	232a      	movs	r3, #42	; 0x2a
   19c88:	2230      	movs	r2, #48	; 0x30
   19c8a:	4694      	mov	ip, r2
   19c8c:	44bc      	add	ip, r7
   19c8e:	4463      	add	r3, ip
   19c90:	881a      	ldrh	r2, [r3, #0]
   19c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19c94:	0052      	lsls	r2, r2, #1
   19c96:	5ad2      	ldrh	r2, [r2, r3]
   19c98:	4b5e      	ldr	r3, [pc, #376]	; (19e14 <Read_Voltage_ADC0+0x2c8>)
   19c9a:	0010      	movs	r0, r2
   19c9c:	4798      	blx	r3
   19c9e:	2300      	movs	r3, #0
   19ca0:	2480      	movs	r4, #128	; 0x80
   19ca2:	05e4      	lsls	r4, r4, #23
   19ca4:	001a      	movs	r2, r3
   19ca6:	0023      	movs	r3, r4
   19ca8:	4c5b      	ldr	r4, [pc, #364]	; (19e18 <Read_Voltage_ADC0+0x2cc>)
   19caa:	47a0      	blx	r4
   19cac:	0005      	movs	r5, r0
   19cae:	000e      	movs	r6, r1
   19cb0:	4b58      	ldr	r3, [pc, #352]	; (19e14 <Read_Voltage_ADC0+0x2c8>)
   19cb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19cb4:	4798      	blx	r3
   19cb6:	4c59      	ldr	r4, [pc, #356]	; (19e1c <Read_Voltage_ADC0+0x2d0>)
   19cb8:	002a      	movs	r2, r5
   19cba:	0033      	movs	r3, r6
   19cbc:	47a0      	blx	r4
   19cbe:	0003      	movs	r3, r0
   19cc0:	000c      	movs	r4, r1
   19cc2:	0019      	movs	r1, r3
   19cc4:	0022      	movs	r2, r4
   19cc6:	4b56      	ldr	r3, [pc, #344]	; (19e20 <Read_Voltage_ADC0+0x2d4>)
   19cc8:	0008      	movs	r0, r1
   19cca:	0011      	movs	r1, r2
   19ccc:	4798      	blx	r3
   19cce:	0003      	movs	r3, r0
   19cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (uint16_t i = 0; i < no_of_samples; i++)
   19cd2:	232a      	movs	r3, #42	; 0x2a
   19cd4:	2230      	movs	r2, #48	; 0x30
   19cd6:	4694      	mov	ip, r2
   19cd8:	44bc      	add	ip, r7
   19cda:	4463      	add	r3, ip
   19cdc:	881a      	ldrh	r2, [r3, #0]
   19cde:	232a      	movs	r3, #42	; 0x2a
   19ce0:	2130      	movs	r1, #48	; 0x30
   19ce2:	468c      	mov	ip, r1
   19ce4:	44bc      	add	ip, r7
   19ce6:	4463      	add	r3, ip
   19ce8:	3201      	adds	r2, #1
   19cea:	801a      	strh	r2, [r3, #0]
   19cec:	232a      	movs	r3, #42	; 0x2a
   19cee:	2230      	movs	r2, #48	; 0x30
   19cf0:	18ba      	adds	r2, r7, r2
   19cf2:	18d2      	adds	r2, r2, r3
   19cf4:	2328      	movs	r3, #40	; 0x28
   19cf6:	2130      	movs	r1, #48	; 0x30
   19cf8:	468c      	mov	ip, r1
   19cfa:	44bc      	add	ip, r7
   19cfc:	4463      	add	r3, ip
   19cfe:	8812      	ldrh	r2, [r2, #0]
   19d00:	881b      	ldrh	r3, [r3, #0]
   19d02:	429a      	cmp	r2, r3
   19d04:	d3bf      	bcc.n	19c86 <Read_Voltage_ADC0+0x13a>
		}
		
		mean = (square / (float)(no_of_samples));
   19d06:	4b47      	ldr	r3, [pc, #284]	; (19e24 <Read_Voltage_ADC0+0x2d8>)
   19d08:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19d0a:	4798      	blx	r3
   19d0c:	1c04      	adds	r4, r0, #0
   19d0e:	2328      	movs	r3, #40	; 0x28
   19d10:	2230      	movs	r2, #48	; 0x30
   19d12:	4694      	mov	ip, r2
   19d14:	44bc      	add	ip, r7
   19d16:	4463      	add	r3, ip
   19d18:	881a      	ldrh	r2, [r3, #0]
   19d1a:	4b42      	ldr	r3, [pc, #264]	; (19e24 <Read_Voltage_ADC0+0x2d8>)
   19d1c:	0010      	movs	r0, r2
   19d1e:	4798      	blx	r3
   19d20:	1c02      	adds	r2, r0, #0
   19d22:	4b41      	ldr	r3, [pc, #260]	; (19e28 <Read_Voltage_ADC0+0x2dc>)
   19d24:	1c11      	adds	r1, r2, #0
   19d26:	1c20      	adds	r0, r4, #0
   19d28:	4798      	blx	r3
   19d2a:	1c03      	adds	r3, r0, #0
   19d2c:	1c1a      	adds	r2, r3, #0
   19d2e:	4b3f      	ldr	r3, [pc, #252]	; (19e2c <Read_Voltage_ADC0+0x2e0>)
   19d30:	1c10      	adds	r0, r2, #0
   19d32:	4798      	blx	r3
   19d34:	0003      	movs	r3, r0
   19d36:	000c      	movs	r4, r1
   19d38:	643b      	str	r3, [r7, #64]	; 0x40
   19d3a:	647c      	str	r4, [r7, #68]	; 0x44
		// Calculate Root.
		root = sqrt(mean);
   19d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19d3e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   19d40:	0018      	movs	r0, r3
   19d42:	0021      	movs	r1, r4
   19d44:	4b3a      	ldr	r3, [pc, #232]	; (19e30 <Read_Voltage_ADC0+0x2e4>)
   19d46:	4798      	blx	r3
   19d48:	0003      	movs	r3, r0
   19d4a:	000c      	movs	r4, r1
   19d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   19d4e:	63fc      	str	r4, [r7, #60]	; 0x3c

		//
		temp = (root-20)*655/1000;
   19d50:	4c38      	ldr	r4, [pc, #224]	; (19e34 <Read_Voltage_ADC0+0x2e8>)
   19d52:	2200      	movs	r2, #0
   19d54:	4b38      	ldr	r3, [pc, #224]	; (19e38 <Read_Voltage_ADC0+0x2ec>)
   19d56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19d5a:	47a0      	blx	r4
   19d5c:	0003      	movs	r3, r0
   19d5e:	000c      	movs	r4, r1
   19d60:	0018      	movs	r0, r3
   19d62:	0021      	movs	r1, r4
   19d64:	4c35      	ldr	r4, [pc, #212]	; (19e3c <Read_Voltage_ADC0+0x2f0>)
   19d66:	2200      	movs	r2, #0
   19d68:	4b35      	ldr	r3, [pc, #212]	; (19e40 <Read_Voltage_ADC0+0x2f4>)
   19d6a:	47a0      	blx	r4
   19d6c:	0003      	movs	r3, r0
   19d6e:	000c      	movs	r4, r1
   19d70:	0018      	movs	r0, r3
   19d72:	0021      	movs	r1, r4
   19d74:	4c33      	ldr	r4, [pc, #204]	; (19e44 <Read_Voltage_ADC0+0x2f8>)
   19d76:	2200      	movs	r2, #0
   19d78:	4b33      	ldr	r3, [pc, #204]	; (19e48 <Read_Voltage_ADC0+0x2fc>)
   19d7a:	47a0      	blx	r4
   19d7c:	0003      	movs	r3, r0
   19d7e:	000c      	movs	r4, r1
   19d80:	0019      	movs	r1, r3
   19d82:	0022      	movs	r2, r4
   19d84:	4b26      	ldr	r3, [pc, #152]	; (19e20 <Read_Voltage_ADC0+0x2d4>)
   19d86:	0008      	movs	r0, r1
   19d88:	0011      	movs	r1, r2
   19d8a:	4798      	blx	r3
   19d8c:	0003      	movs	r3, r0
   19d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (abs(Analog_Parameter_Struct.PhaseRY_Voltage - temp)> 80)
   19d90:	4b2e      	ldr	r3, [pc, #184]	; (19e4c <Read_Voltage_ADC0+0x300>)
   19d92:	681a      	ldr	r2, [r3, #0]
   19d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19d96:	1ad3      	subs	r3, r2, r3
   19d98:	17da      	asrs	r2, r3, #31
   19d9a:	189b      	adds	r3, r3, r2
   19d9c:	4053      	eors	r3, r2
   19d9e:	2b50      	cmp	r3, #80	; 0x50
   19da0:	dd15      	ble.n	19dce <Read_Voltage_ADC0+0x282>
		{
			delay_us(1);
   19da2:	2000      	movs	r0, #0
   19da4:	4b10      	ldr	r3, [pc, #64]	; (19de8 <Read_Voltage_ADC0+0x29c>)
   19da6:	4798      	blx	r3
   19da8:	0003      	movs	r3, r0
   19daa:	603b      	str	r3, [r7, #0]
   19dac:	2300      	movs	r3, #0
   19dae:	607b      	str	r3, [r7, #4]
   19db0:	4b27      	ldr	r3, [pc, #156]	; (19e50 <Read_Voltage_ADC0+0x304>)
   19db2:	2400      	movs	r4, #0
   19db4:	6838      	ldr	r0, [r7, #0]
   19db6:	6879      	ldr	r1, [r7, #4]
   19db8:	18c0      	adds	r0, r0, r3
   19dba:	4161      	adcs	r1, r4
   19dbc:	4c0c      	ldr	r4, [pc, #48]	; (19df0 <Read_Voltage_ADC0+0x2a4>)
   19dbe:	4a25      	ldr	r2, [pc, #148]	; (19e54 <Read_Voltage_ADC0+0x308>)
   19dc0:	2300      	movs	r3, #0
   19dc2:	47a0      	blx	r4
   19dc4:	0003      	movs	r3, r0
   19dc6:	000c      	movs	r4, r1
   19dc8:	0018      	movs	r0, r3
   19dca:	4b0b      	ldr	r3, [pc, #44]	; (19df8 <Read_Voltage_ADC0+0x2ac>)
   19dcc:	4798      	blx	r3
		}
		//
		
		return (uint32_t)root;
   19dce:	4b14      	ldr	r3, [pc, #80]	; (19e20 <Read_Voltage_ADC0+0x2d4>)
   19dd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19dd4:	4798      	blx	r3
   19dd6:	0003      	movs	r3, r0
   19dd8:	e000      	b.n	19ddc <Read_Voltage_ADC0+0x290>
	}
	else
	{
		return 0;
   19dda:	2300      	movs	r3, #0
   19ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19dde:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   19de0:	0018      	movs	r0, r3
   19de2:	46bd      	mov	sp, r7
   19de4:	b019      	add	sp, #100	; 0x64
   19de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19de8:	000248dd 	.word	0x000248dd
   19dec:	00001b57 	.word	0x00001b57
   19df0:	00026865 	.word	0x00026865
   19df4:	00001b58 	.word	0x00001b58
   19df8:	20000001 	.word	0x20000001
   19dfc:	20000818 	.word	0x20000818
   19e00:	00018e31 	.word	0x00018e31
   19e04:	0002024d 	.word	0x0002024d
   19e08:	20000739 	.word	0x20000739
   19e0c:	0001d951 	.word	0x0001d951
   19e10:	00020b61 	.word	0x00020b61
   19e14:	00028b91 	.word	0x00028b91
   19e18:	00025269 	.word	0x00025269
   19e1c:	000270b1 	.word	0x000270b1
   19e20:	000268f9 	.word	0x000268f9
   19e24:	00027025 	.word	0x00027025
   19e28:	00026ab5 	.word	0x00026ab5
   19e2c:	00028c01 	.word	0x00028c01
   19e30:	000255c1 	.word	0x000255c1
   19e34:	00028439 	.word	0x00028439
   19e38:	40340000 	.word	0x40340000
   19e3c:	00027f39 	.word	0x00027f39
   19e40:	40847800 	.word	0x40847800
   19e44:	000276d1 	.word	0x000276d1
   19e48:	408f4000 	.word	0x408f4000
   19e4c:	200006d8 	.word	0x200006d8
   19e50:	006acfbf 	.word	0x006acfbf
   19e54:	006acfc0 	.word	0x006acfc0

00019e58 <autoSetCurrent>:

void autoSetCurrent(void)
{
   19e58:	b580      	push	{r7, lr}
   19e5a:	b084      	sub	sp, #16
   19e5c:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   19e5e:	4b2e      	ldr	r3, [pc, #184]	; (19f18 <autoSetCurrent+0xc0>)
   19e60:	4798      	blx	r3
   19e62:	1e03      	subs	r3, r0, #0
   19e64:	d04e      	beq.n	19f04 <autoSetCurrent+0xac>
   19e66:	4b2d      	ldr	r3, [pc, #180]	; (19f1c <autoSetCurrent+0xc4>)
   19e68:	781b      	ldrb	r3, [r3, #0]
   19e6a:	2201      	movs	r2, #1
   19e6c:	4053      	eors	r3, r2
   19e6e:	b2db      	uxtb	r3, r3
   19e70:	2b00      	cmp	r3, #0
   19e72:	d047      	beq.n	19f04 <autoSetCurrent+0xac>
   19e74:	4b2a      	ldr	r3, [pc, #168]	; (19f20 <autoSetCurrent+0xc8>)
   19e76:	781b      	ldrb	r3, [r3, #0]
   19e78:	2201      	movs	r2, #1
   19e7a:	4053      	eors	r3, r2
   19e7c:	b2db      	uxtb	r3, r3
   19e7e:	2b00      	cmp	r3, #0
   19e80:	d040      	beq.n	19f04 <autoSetCurrent+0xac>
   19e82:	4b28      	ldr	r3, [pc, #160]	; (19f24 <autoSetCurrent+0xcc>)
   19e84:	781b      	ldrb	r3, [r3, #0]
   19e86:	2201      	movs	r2, #1
   19e88:	4053      	eors	r3, r2
   19e8a:	b2db      	uxtb	r3, r3
   19e8c:	2b00      	cmp	r3, #0
   19e8e:	d039      	beq.n	19f04 <autoSetCurrent+0xac>
   19e90:	4b25      	ldr	r3, [pc, #148]	; (19f28 <autoSetCurrent+0xd0>)
   19e92:	4798      	blx	r3
   19e94:	1e03      	subs	r3, r0, #0
   19e96:	d035      	beq.n	19f04 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   19e98:	4b24      	ldr	r3, [pc, #144]	; (19f2c <autoSetCurrent+0xd4>)
   19e9a:	691b      	ldr	r3, [r3, #16]
   19e9c:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   19e9e:	68fb      	ldr	r3, [r7, #12]
   19ea0:	2bf9      	cmp	r3, #249	; 0xf9
   19ea2:	d806      	bhi.n	19eb2 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   19ea4:	2000      	movs	r0, #0
   19ea6:	4b22      	ldr	r3, [pc, #136]	; (19f30 <autoSetCurrent+0xd8>)
   19ea8:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   19eaa:	2059      	movs	r0, #89	; 0x59
   19eac:	4b21      	ldr	r3, [pc, #132]	; (19f34 <autoSetCurrent+0xdc>)
   19eae:	4798      	blx	r3
			return;
   19eb0:	e02e      	b.n	19f10 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   19eb2:	4b21      	ldr	r3, [pc, #132]	; (19f38 <autoSetCurrent+0xe0>)
   19eb4:	7f1b      	ldrb	r3, [r3, #28]
   19eb6:	001a      	movs	r2, r3
   19eb8:	68fb      	ldr	r3, [r7, #12]
   19eba:	435a      	muls	r2, r3
   19ebc:	4b1f      	ldr	r3, [pc, #124]	; (19f3c <autoSetCurrent+0xe4>)
   19ebe:	2164      	movs	r1, #100	; 0x64
   19ec0:	0010      	movs	r0, r2
   19ec2:	4798      	blx	r3
   19ec4:	0003      	movs	r3, r0
   19ec6:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   19ec8:	4b1b      	ldr	r3, [pc, #108]	; (19f38 <autoSetCurrent+0xe0>)
   19eca:	7f5b      	ldrb	r3, [r3, #29]
   19ecc:	001a      	movs	r2, r3
   19ece:	68fb      	ldr	r3, [r7, #12]
   19ed0:	435a      	muls	r2, r3
   19ed2:	4b1a      	ldr	r3, [pc, #104]	; (19f3c <autoSetCurrent+0xe4>)
   19ed4:	2164      	movs	r1, #100	; 0x64
   19ed6:	0010      	movs	r0, r2
   19ed8:	4798      	blx	r3
   19eda:	0003      	movs	r3, r0
   19edc:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   19ede:	68fb      	ldr	r3, [r7, #12]
   19ee0:	0018      	movs	r0, r3
   19ee2:	4b17      	ldr	r3, [pc, #92]	; (19f40 <autoSetCurrent+0xe8>)
   19ee4:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   19ee6:	68bb      	ldr	r3, [r7, #8]
   19ee8:	0018      	movs	r0, r3
   19eea:	4b16      	ldr	r3, [pc, #88]	; (19f44 <autoSetCurrent+0xec>)
   19eec:	4798      	blx	r3
		setOverloadValue(tempOver);
   19eee:	687b      	ldr	r3, [r7, #4]
   19ef0:	0018      	movs	r0, r3
   19ef2:	4b15      	ldr	r3, [pc, #84]	; (19f48 <autoSetCurrent+0xf0>)
   19ef4:	4798      	blx	r3
		setCurrentDetection(true);
   19ef6:	2001      	movs	r0, #1
   19ef8:	4b0d      	ldr	r3, [pc, #52]	; (19f30 <autoSetCurrent+0xd8>)
   19efa:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   19efc:	204b      	movs	r0, #75	; 0x4b
   19efe:	4b0d      	ldr	r3, [pc, #52]	; (19f34 <autoSetCurrent+0xdc>)
   19f00:	4798      	blx	r3
	{
   19f02:	e005      	b.n	19f10 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
   19f04:	2000      	movs	r0, #0
   19f06:	4b0a      	ldr	r3, [pc, #40]	; (19f30 <autoSetCurrent+0xd8>)
   19f08:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   19f0a:	2059      	movs	r0, #89	; 0x59
   19f0c:	4b09      	ldr	r3, [pc, #36]	; (19f34 <autoSetCurrent+0xdc>)
   19f0e:	4798      	blx	r3
	}
}
   19f10:	46bd      	mov	sp, r7
   19f12:	b004      	add	sp, #16
   19f14:	bd80      	pop	{r7, pc}
   19f16:	46c0      	nop			; (mov r8, r8)
   19f18:	0001aaf5 	.word	0x0001aaf5
   19f1c:	2000078d 	.word	0x2000078d
   19f20:	2000078f 	.word	0x2000078f
   19f24:	2000077c 	.word	0x2000077c
   19f28:	0001aa8d 	.word	0x0001aa8d
   19f2c:	200006d8 	.word	0x200006d8
   19f30:	0001197d 	.word	0x0001197d
   19f34:	00014b09 	.word	0x00014b09
   19f38:	20000650 	.word	0x20000650
   19f3c:	000264fd 	.word	0x000264fd
   19f40:	00011939 	.word	0x00011939
   19f44:	000118b1 	.word	0x000118b1
   19f48:	000118f5 	.word	0x000118f5

00019f4c <speakAmpere>:

void speakAmpere(void)
{
   19f4c:	b580      	push	{r7, lr}
   19f4e:	b084      	sub	sp, #16
   19f50:	af00      	add	r7, sp, #0
	if(getMotorState())
   19f52:	4b0d      	ldr	r3, [pc, #52]	; (19f88 <speakAmpere+0x3c>)
   19f54:	4798      	blx	r3
   19f56:	1e03      	subs	r3, r0, #0
   19f58:	d00f      	beq.n	19f7a <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   19f5a:	4b0c      	ldr	r3, [pc, #48]	; (19f8c <speakAmpere+0x40>)
   19f5c:	8a9b      	ldrh	r3, [r3, #20]
   19f5e:	b29b      	uxth	r3, r3
   19f60:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   19f62:	1d39      	adds	r1, r7, #4
   19f64:	68fb      	ldr	r3, [r7, #12]
   19f66:	220a      	movs	r2, #10
   19f68:	0018      	movs	r0, r3
   19f6a:	4b09      	ldr	r3, [pc, #36]	; (19f90 <speakAmpere+0x44>)
   19f6c:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   19f6e:	1d3b      	adds	r3, r7, #4
   19f70:	0018      	movs	r0, r3
   19f72:	4b08      	ldr	r3, [pc, #32]	; (19f94 <speakAmpere+0x48>)
   19f74:	4798      	blx	r3
		return;
   19f76:	46c0      	nop			; (mov r8, r8)
   19f78:	e002      	b.n	19f80 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   19f7a:	202d      	movs	r0, #45	; 0x2d
   19f7c:	4b06      	ldr	r3, [pc, #24]	; (19f98 <speakAmpere+0x4c>)
   19f7e:	4798      	blx	r3
}
   19f80:	46bd      	mov	sp, r7
   19f82:	b004      	add	sp, #16
   19f84:	bd80      	pop	{r7, pc}
   19f86:	46c0      	nop			; (mov r8, r8)
   19f88:	0001aaf5 	.word	0x0001aaf5
   19f8c:	200006d8 	.word	0x200006d8
   19f90:	00029359 	.word	0x00029359
   19f94:	000147fd 	.word	0x000147fd
   19f98:	00014b09 	.word	0x00014b09

00019f9c <PR2_ISR>:

void PR2_ISR(void)
{
   19f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f9e:	b08b      	sub	sp, #44	; 0x2c
   19fa0:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   19fa2:	4b77      	ldr	r3, [pc, #476]	; (1a180 <PR2_ISR+0x1e4>)
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	b2db      	uxtb	r3, r3
   19fa8:	2b01      	cmp	r3, #1
   19faa:	d000      	beq.n	19fae <PR2_ISR+0x12>
   19fac:	e0e3      	b.n	1a176 <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   19fae:	4b75      	ldr	r3, [pc, #468]	; (1a184 <PR2_ISR+0x1e8>)
   19fb0:	2200      	movs	r2, #0
   19fb2:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   19fb4:	2000      	movs	r0, #0
   19fb6:	4b74      	ldr	r3, [pc, #464]	; (1a188 <PR2_ISR+0x1ec>)
   19fb8:	4798      	blx	r3
   19fba:	0003      	movs	r3, r0
   19fbc:	60bb      	str	r3, [r7, #8]
   19fbe:	2300      	movs	r3, #0
   19fc0:	60fb      	str	r3, [r7, #12]
   19fc2:	68bb      	ldr	r3, [r7, #8]
   19fc4:	68fc      	ldr	r4, [r7, #12]
   19fc6:	0f9a      	lsrs	r2, r3, #30
   19fc8:	00a0      	lsls	r0, r4, #2
   19fca:	61f8      	str	r0, [r7, #28]
   19fcc:	69f8      	ldr	r0, [r7, #28]
   19fce:	4310      	orrs	r0, r2
   19fd0:	61f8      	str	r0, [r7, #28]
   19fd2:	009b      	lsls	r3, r3, #2
   19fd4:	61bb      	str	r3, [r7, #24]
   19fd6:	69bb      	ldr	r3, [r7, #24]
   19fd8:	69fc      	ldr	r4, [r7, #28]
   19fda:	68b9      	ldr	r1, [r7, #8]
   19fdc:	68fa      	ldr	r2, [r7, #12]
   19fde:	185b      	adds	r3, r3, r1
   19fe0:	4154      	adcs	r4, r2
   19fe2:	496a      	ldr	r1, [pc, #424]	; (1a18c <PR2_ISR+0x1f0>)
   19fe4:	2200      	movs	r2, #0
   19fe6:	185b      	adds	r3, r3, r1
   19fe8:	4154      	adcs	r4, r2
   19fea:	0018      	movs	r0, r3
   19fec:	0021      	movs	r1, r4
   19fee:	4c68      	ldr	r4, [pc, #416]	; (1a190 <PR2_ISR+0x1f4>)
   19ff0:	4a68      	ldr	r2, [pc, #416]	; (1a194 <PR2_ISR+0x1f8>)
   19ff2:	2300      	movs	r3, #0
   19ff4:	47a0      	blx	r4
   19ff6:	0003      	movs	r3, r0
   19ff8:	000c      	movs	r4, r1
   19ffa:	0018      	movs	r0, r3
   19ffc:	4b66      	ldr	r3, [pc, #408]	; (1a198 <PR2_ISR+0x1fc>)
   19ffe:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1a000:	2323      	movs	r3, #35	; 0x23
   1a002:	18fb      	adds	r3, r7, r3
   1a004:	2200      	movs	r2, #0
   1a006:	701a      	strb	r2, [r3, #0]
   1a008:	2322      	movs	r3, #34	; 0x22
   1a00a:	18fb      	adds	r3, r7, r3
   1a00c:	2200      	movs	r2, #0
   1a00e:	701a      	strb	r2, [r3, #0]
   1a010:	2321      	movs	r3, #33	; 0x21
   1a012:	18fb      	adds	r3, r7, r3
   1a014:	2200      	movs	r2, #0
   1a016:	701a      	strb	r2, [r3, #0]
   1a018:	2320      	movs	r3, #32
   1a01a:	18fb      	adds	r3, r7, r3
   1a01c:	2200      	movs	r2, #0
   1a01e:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1a020:	202b      	movs	r0, #43	; 0x2b
   1a022:	4b5e      	ldr	r3, [pc, #376]	; (1a19c <PR2_ISR+0x200>)
   1a024:	4798      	blx	r3
   1a026:	1e03      	subs	r3, r0, #0
   1a028:	d100      	bne.n	1a02c <PR2_ISR+0x90>
   1a02a:	e08e      	b.n	1a14a <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a02c:	2300      	movs	r3, #0
   1a02e:	627b      	str	r3, [r7, #36]	; 0x24
   1a030:	e085      	b.n	1a13e <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1a032:	2000      	movs	r0, #0
   1a034:	4b54      	ldr	r3, [pc, #336]	; (1a188 <PR2_ISR+0x1ec>)
   1a036:	4798      	blx	r3
   1a038:	0003      	movs	r3, r0
   1a03a:	603b      	str	r3, [r7, #0]
   1a03c:	2300      	movs	r3, #0
   1a03e:	607b      	str	r3, [r7, #4]
   1a040:	6838      	ldr	r0, [r7, #0]
   1a042:	6879      	ldr	r1, [r7, #4]
   1a044:	0003      	movs	r3, r0
   1a046:	000c      	movs	r4, r1
   1a048:	0f9a      	lsrs	r2, r3, #30
   1a04a:	00a6      	lsls	r6, r4, #2
   1a04c:	4316      	orrs	r6, r2
   1a04e:	009d      	lsls	r5, r3, #2
   1a050:	0003      	movs	r3, r0
   1a052:	000c      	movs	r4, r1
   1a054:	195b      	adds	r3, r3, r5
   1a056:	4174      	adcs	r4, r6
   1a058:	0f9a      	lsrs	r2, r3, #30
   1a05a:	00a1      	lsls	r1, r4, #2
   1a05c:	6179      	str	r1, [r7, #20]
   1a05e:	6979      	ldr	r1, [r7, #20]
   1a060:	4311      	orrs	r1, r2
   1a062:	6179      	str	r1, [r7, #20]
   1a064:	009a      	lsls	r2, r3, #2
   1a066:	613a      	str	r2, [r7, #16]
   1a068:	6939      	ldr	r1, [r7, #16]
   1a06a:	697a      	ldr	r2, [r7, #20]
   1a06c:	185b      	adds	r3, r3, r1
   1a06e:	4154      	adcs	r4, r2
   1a070:	494b      	ldr	r1, [pc, #300]	; (1a1a0 <PR2_ISR+0x204>)
   1a072:	2200      	movs	r2, #0
   1a074:	185b      	adds	r3, r3, r1
   1a076:	4154      	adcs	r4, r2
   1a078:	0018      	movs	r0, r3
   1a07a:	0021      	movs	r1, r4
   1a07c:	4c44      	ldr	r4, [pc, #272]	; (1a190 <PR2_ISR+0x1f4>)
   1a07e:	4a49      	ldr	r2, [pc, #292]	; (1a1a4 <PR2_ISR+0x208>)
   1a080:	2300      	movs	r3, #0
   1a082:	47a0      	blx	r4
   1a084:	0003      	movs	r3, r0
   1a086:	000c      	movs	r4, r1
   1a088:	0018      	movs	r0, r3
   1a08a:	4b43      	ldr	r3, [pc, #268]	; (1a198 <PR2_ISR+0x1fc>)
   1a08c:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1a08e:	202a      	movs	r0, #42	; 0x2a
   1a090:	4b42      	ldr	r3, [pc, #264]	; (1a19c <PR2_ISR+0x200>)
   1a092:	4798      	blx	r3
   1a094:	1e03      	subs	r3, r0, #0
   1a096:	d014      	beq.n	1a0c2 <PR2_ISR+0x126>
   1a098:	2323      	movs	r3, #35	; 0x23
   1a09a:	18fb      	adds	r3, r7, r3
   1a09c:	781b      	ldrb	r3, [r3, #0]
   1a09e:	b2db      	uxtb	r3, r3
   1a0a0:	2b00      	cmp	r3, #0
   1a0a2:	d10e      	bne.n	1a0c2 <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1a0a4:	2323      	movs	r3, #35	; 0x23
   1a0a6:	18fb      	adds	r3, r7, r3
   1a0a8:	2201      	movs	r2, #1
   1a0aa:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1a0ac:	2322      	movs	r3, #34	; 0x22
   1a0ae:	18fb      	adds	r3, r7, r3
   1a0b0:	781b      	ldrb	r3, [r3, #0]
   1a0b2:	b2db      	uxtb	r3, r3
   1a0b4:	2b01      	cmp	r3, #1
   1a0b6:	d104      	bne.n	1a0c2 <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1a0b8:	2320      	movs	r3, #32
   1a0ba:	18fb      	adds	r3, r7, r3
   1a0bc:	2201      	movs	r2, #1
   1a0be:	701a      	strb	r2, [r3, #0]
						break;
   1a0c0:	e043      	b.n	1a14a <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1a0c2:	202a      	movs	r0, #42	; 0x2a
   1a0c4:	4b35      	ldr	r3, [pc, #212]	; (1a19c <PR2_ISR+0x200>)
   1a0c6:	4798      	blx	r3
   1a0c8:	0003      	movs	r3, r0
   1a0ca:	001a      	movs	r2, r3
   1a0cc:	2301      	movs	r3, #1
   1a0ce:	4053      	eors	r3, r2
   1a0d0:	b2db      	uxtb	r3, r3
   1a0d2:	2b00      	cmp	r3, #0
   1a0d4:	d013      	beq.n	1a0fe <PR2_ISR+0x162>
   1a0d6:	2322      	movs	r3, #34	; 0x22
   1a0d8:	18fb      	adds	r3, r7, r3
   1a0da:	781b      	ldrb	r3, [r3, #0]
   1a0dc:	b2db      	uxtb	r3, r3
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d10d      	bne.n	1a0fe <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1a0e2:	2322      	movs	r3, #34	; 0x22
   1a0e4:	18fb      	adds	r3, r7, r3
   1a0e6:	2201      	movs	r2, #1
   1a0e8:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1a0ea:	2323      	movs	r3, #35	; 0x23
   1a0ec:	18fb      	adds	r3, r7, r3
   1a0ee:	781b      	ldrb	r3, [r3, #0]
   1a0f0:	b2db      	uxtb	r3, r3
   1a0f2:	2b01      	cmp	r3, #1
   1a0f4:	d103      	bne.n	1a0fe <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1a0f6:	2321      	movs	r3, #33	; 0x21
   1a0f8:	18fb      	adds	r3, r7, r3
   1a0fa:	2201      	movs	r2, #1
   1a0fc:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1a0fe:	2321      	movs	r3, #33	; 0x21
   1a100:	18fb      	adds	r3, r7, r3
   1a102:	781b      	ldrb	r3, [r3, #0]
   1a104:	b2db      	uxtb	r3, r3
   1a106:	2b01      	cmp	r3, #1
   1a108:	d10c      	bne.n	1a124 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1a10a:	4b27      	ldr	r3, [pc, #156]	; (1a1a8 <PR2_ISR+0x20c>)
   1a10c:	2202      	movs	r2, #2
   1a10e:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1a110:	4b26      	ldr	r3, [pc, #152]	; (1a1ac <PR2_ISR+0x210>)
   1a112:	2202      	movs	r2, #2
   1a114:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1a116:	4b26      	ldr	r3, [pc, #152]	; (1a1b0 <PR2_ISR+0x214>)
   1a118:	2200      	movs	r2, #0
   1a11a:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1a11c:	4b18      	ldr	r3, [pc, #96]	; (1a180 <PR2_ISR+0x1e4>)
   1a11e:	2200      	movs	r2, #0
   1a120:	701a      	strb	r2, [r3, #0]
					break;
   1a122:	e012      	b.n	1a14a <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1a124:	202b      	movs	r0, #43	; 0x2b
   1a126:	4b1d      	ldr	r3, [pc, #116]	; (1a19c <PR2_ISR+0x200>)
   1a128:	4798      	blx	r3
   1a12a:	0003      	movs	r3, r0
   1a12c:	001a      	movs	r2, r3
   1a12e:	2301      	movs	r3, #1
   1a130:	4053      	eors	r3, r2
   1a132:	b2db      	uxtb	r3, r3
   1a134:	2b00      	cmp	r3, #0
   1a136:	d107      	bne.n	1a148 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a13a:	3301      	adds	r3, #1
   1a13c:	627b      	str	r3, [r7, #36]	; 0x24
   1a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a140:	2b77      	cmp	r3, #119	; 0x77
   1a142:	d800      	bhi.n	1a146 <PR2_ISR+0x1aa>
   1a144:	e775      	b.n	1a032 <PR2_ISR+0x96>
   1a146:	e000      	b.n	1a14a <PR2_ISR+0x1ae>
				{
					break;
   1a148:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1a14a:	4b19      	ldr	r3, [pc, #100]	; (1a1b0 <PR2_ISR+0x214>)
   1a14c:	781b      	ldrb	r3, [r3, #0]
   1a14e:	b2db      	uxtb	r3, r3
   1a150:	3301      	adds	r3, #1
   1a152:	b2db      	uxtb	r3, r3
   1a154:	4a16      	ldr	r2, [pc, #88]	; (1a1b0 <PR2_ISR+0x214>)
   1a156:	1c19      	adds	r1, r3, #0
   1a158:	7011      	strb	r1, [r2, #0]
   1a15a:	2b02      	cmp	r3, #2
   1a15c:	d90b      	bls.n	1a176 <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1a15e:	4b14      	ldr	r3, [pc, #80]	; (1a1b0 <PR2_ISR+0x214>)
   1a160:	2200      	movs	r2, #0
   1a162:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a164:	4b10      	ldr	r3, [pc, #64]	; (1a1a8 <PR2_ISR+0x20c>)
   1a166:	2201      	movs	r2, #1
   1a168:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a16a:	4b10      	ldr	r3, [pc, #64]	; (1a1ac <PR2_ISR+0x210>)
   1a16c:	2201      	movs	r2, #1
   1a16e:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1a170:	4b03      	ldr	r3, [pc, #12]	; (1a180 <PR2_ISR+0x1e4>)
   1a172:	2200      	movs	r2, #0
   1a174:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a176:	46c0      	nop			; (mov r8, r8)
   1a178:	46bd      	mov	sp, r7
   1a17a:	b00b      	add	sp, #44	; 0x2c
   1a17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a17e:	46c0      	nop			; (mov r8, r8)
   1a180:	2000000c 	.word	0x2000000c
   1a184:	2000024c 	.word	0x2000024c
   1a188:	000248dd 	.word	0x000248dd
   1a18c:	00001b57 	.word	0x00001b57
   1a190:	00026865 	.word	0x00026865
   1a194:	00001b58 	.word	0x00001b58
   1a198:	20000001 	.word	0x20000001
   1a19c:	00018f49 	.word	0x00018f49
   1a1a0:	006acfbf 	.word	0x006acfbf
   1a1a4:	006acfc0 	.word	0x006acfc0
   1a1a8:	2000073c 	.word	0x2000073c
   1a1ac:	20000248 	.word	0x20000248
   1a1b0:	20000249 	.word	0x20000249

0001a1b4 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1a1b4:	b580      	push	{r7, lr}
   1a1b6:	b084      	sub	sp, #16
   1a1b8:	af00      	add	r7, sp, #0
   1a1ba:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a1bc:	4b12      	ldr	r3, [pc, #72]	; (1a208 <vTask_10ms_Timer+0x54>)
   1a1be:	4798      	blx	r3
   1a1c0:	0003      	movs	r3, r0
   1a1c2:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a1c4:	230c      	movs	r3, #12
   1a1c6:	18fb      	adds	r3, r7, r3
   1a1c8:	210a      	movs	r1, #10
   1a1ca:	0018      	movs	r0, r3
   1a1cc:	4b0f      	ldr	r3, [pc, #60]	; (1a20c <vTask_10ms_Timer+0x58>)
   1a1ce:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1a1d0:	4b0f      	ldr	r3, [pc, #60]	; (1a210 <vTask_10ms_Timer+0x5c>)
   1a1d2:	781b      	ldrb	r3, [r3, #0]
   1a1d4:	b2db      	uxtb	r3, r3
   1a1d6:	2b01      	cmp	r3, #1
   1a1d8:	d1f4      	bne.n	1a1c4 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1a1da:	4b0e      	ldr	r3, [pc, #56]	; (1a214 <vTask_10ms_Timer+0x60>)
   1a1dc:	781b      	ldrb	r3, [r3, #0]
   1a1de:	3301      	adds	r3, #1
   1a1e0:	b2da      	uxtb	r2, r3
   1a1e2:	4b0c      	ldr	r3, [pc, #48]	; (1a214 <vTask_10ms_Timer+0x60>)
   1a1e4:	701a      	strb	r2, [r3, #0]
   1a1e6:	4b0b      	ldr	r3, [pc, #44]	; (1a214 <vTask_10ms_Timer+0x60>)
   1a1e8:	781b      	ldrb	r3, [r3, #0]
   1a1ea:	2b13      	cmp	r3, #19
   1a1ec:	d9ea      	bls.n	1a1c4 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1a1ee:	4b09      	ldr	r3, [pc, #36]	; (1a214 <vTask_10ms_Timer+0x60>)
   1a1f0:	2200      	movs	r2, #0
   1a1f2:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a1f4:	4b08      	ldr	r3, [pc, #32]	; (1a218 <vTask_10ms_Timer+0x64>)
   1a1f6:	2201      	movs	r2, #1
   1a1f8:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a1fa:	4b08      	ldr	r3, [pc, #32]	; (1a21c <vTask_10ms_Timer+0x68>)
   1a1fc:	2201      	movs	r2, #1
   1a1fe:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1a200:	4b03      	ldr	r3, [pc, #12]	; (1a210 <vTask_10ms_Timer+0x5c>)
   1a202:	2200      	movs	r2, #0
   1a204:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a206:	e7dd      	b.n	1a1c4 <vTask_10ms_Timer+0x10>
   1a208:	0002024d 	.word	0x0002024d
   1a20c:	0001fe21 	.word	0x0001fe21
   1a210:	2000000c 	.word	0x2000000c
   1a214:	2000024c 	.word	0x2000024c
   1a218:	2000073c 	.word	0x2000073c
   1a21c:	20000248 	.word	0x20000248

0001a220 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1a220:	b580      	push	{r7, lr}
   1a222:	b084      	sub	sp, #16
   1a224:	af00      	add	r7, sp, #0
   1a226:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a228:	4b17      	ldr	r3, [pc, #92]	; (1a288 <vTask_100ms_Timer+0x68>)
   1a22a:	4798      	blx	r3
   1a22c:	0003      	movs	r3, r0
   1a22e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a230:	230c      	movs	r3, #12
   1a232:	18fb      	adds	r3, r7, r3
   1a234:	2164      	movs	r1, #100	; 0x64
   1a236:	0018      	movs	r0, r3
   1a238:	4b14      	ldr	r3, [pc, #80]	; (1a28c <vTask_100ms_Timer+0x6c>)
   1a23a:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1a23c:	4b14      	ldr	r3, [pc, #80]	; (1a290 <vTask_100ms_Timer+0x70>)
   1a23e:	781b      	ldrb	r3, [r3, #0]
   1a240:	b2db      	uxtb	r3, r3
   1a242:	1c5a      	adds	r2, r3, #1
   1a244:	b2d1      	uxtb	r1, r2
   1a246:	4a12      	ldr	r2, [pc, #72]	; (1a290 <vTask_100ms_Timer+0x70>)
   1a248:	7011      	strb	r1, [r2, #0]
   1a24a:	2b04      	cmp	r3, #4
   1a24c:	d905      	bls.n	1a25a <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1a24e:	4b10      	ldr	r3, [pc, #64]	; (1a290 <vTask_100ms_Timer+0x70>)
   1a250:	2200      	movs	r2, #0
   1a252:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1a254:	4b0f      	ldr	r3, [pc, #60]	; (1a294 <vTask_100ms_Timer+0x74>)
   1a256:	2201      	movs	r2, #1
   1a258:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1a25a:	4b0f      	ldr	r3, [pc, #60]	; (1a298 <vTask_100ms_Timer+0x78>)
   1a25c:	781b      	ldrb	r3, [r3, #0]
   1a25e:	b2db      	uxtb	r3, r3
   1a260:	1c5a      	adds	r2, r3, #1
   1a262:	b2d1      	uxtb	r1, r2
   1a264:	4a0c      	ldr	r2, [pc, #48]	; (1a298 <vTask_100ms_Timer+0x78>)
   1a266:	7011      	strb	r1, [r2, #0]
   1a268:	2b04      	cmp	r3, #4
   1a26a:	d9e1      	bls.n	1a230 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1a26c:	4b0a      	ldr	r3, [pc, #40]	; (1a298 <vTask_100ms_Timer+0x78>)
   1a26e:	2200      	movs	r2, #0
   1a270:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1a272:	4b0a      	ldr	r3, [pc, #40]	; (1a29c <vTask_100ms_Timer+0x7c>)
   1a274:	2201      	movs	r2, #1
   1a276:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1a278:	4b09      	ldr	r3, [pc, #36]	; (1a2a0 <vTask_100ms_Timer+0x80>)
   1a27a:	2200      	movs	r2, #0
   1a27c:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1a27e:	200b      	movs	r0, #11
   1a280:	4b08      	ldr	r3, [pc, #32]	; (1a2a4 <vTask_100ms_Timer+0x84>)
   1a282:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a284:	e7d4      	b.n	1a230 <vTask_100ms_Timer+0x10>
   1a286:	46c0      	nop			; (mov r8, r8)
   1a288:	0002024d 	.word	0x0002024d
   1a28c:	0001fe21 	.word	0x0001fe21
   1a290:	2000000d 	.word	0x2000000d
   1a294:	2000024b 	.word	0x2000024b
   1a298:	2000024a 	.word	0x2000024a
   1a29c:	2000000c 	.word	0x2000000c
   1a2a0:	2000024c 	.word	0x2000024c
   1a2a4:	0001902d 	.word	0x0001902d

0001a2a8 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1a2a8:	b580      	push	{r7, lr}
   1a2aa:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1a2ac:	4b04      	ldr	r3, [pc, #16]	; (1a2c0 <should_Detect_New_Voltage+0x18>)
   1a2ae:	781b      	ldrb	r3, [r3, #0]
   1a2b0:	b2db      	uxtb	r3, r3
   1a2b2:	425a      	negs	r2, r3
   1a2b4:	4153      	adcs	r3, r2
   1a2b6:	b2db      	uxtb	r3, r3
}
   1a2b8:	0018      	movs	r0, r3
   1a2ba:	46bd      	mov	sp, r7
   1a2bc:	bd80      	pop	{r7, pc}
   1a2be:	46c0      	nop			; (mov r8, r8)
   1a2c0:	2000000d 	.word	0x2000000d

0001a2c4 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1a2c4:	b590      	push	{r4, r7, lr}
   1a2c6:	b083      	sub	sp, #12
   1a2c8:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a2ca:	4b25      	ldr	r3, [pc, #148]	; (1a360 <detect_battery_voltage_and_percentage+0x9c>)
   1a2cc:	681a      	ldr	r2, [r3, #0]
   1a2ce:	2301      	movs	r3, #1
   1a2d0:	425b      	negs	r3, r3
   1a2d2:	0019      	movs	r1, r3
   1a2d4:	0010      	movs	r0, r2
   1a2d6:	4b23      	ldr	r3, [pc, #140]	; (1a364 <detect_battery_voltage_and_percentage+0xa0>)
   1a2d8:	4798      	blx	r3
   1a2da:	0003      	movs	r3, r0
   1a2dc:	2b01      	cmp	r3, #1
   1a2de:	d13b      	bne.n	1a358 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1a2e0:	21c8      	movs	r1, #200	; 0xc8
   1a2e2:	2007      	movs	r0, #7
   1a2e4:	4b20      	ldr	r3, [pc, #128]	; (1a368 <detect_battery_voltage_and_percentage+0xa4>)
   1a2e6:	4798      	blx	r3
   1a2e8:	0003      	movs	r3, r0
   1a2ea:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1a2ec:	683b      	ldr	r3, [r7, #0]
   1a2ee:	4a1f      	ldr	r2, [pc, #124]	; (1a36c <detect_battery_voltage_and_percentage+0xa8>)
   1a2f0:	435a      	muls	r2, r3
   1a2f2:	0010      	movs	r0, r2
   1a2f4:	4b1e      	ldr	r3, [pc, #120]	; (1a370 <detect_battery_voltage_and_percentage+0xac>)
   1a2f6:	22fa      	movs	r2, #250	; 0xfa
   1a2f8:	0091      	lsls	r1, r2, #2
   1a2fa:	4798      	blx	r3
   1a2fc:	0003      	movs	r3, r0
   1a2fe:	001a      	movs	r2, r3
   1a300:	4b1c      	ldr	r3, [pc, #112]	; (1a374 <detect_battery_voltage_and_percentage+0xb0>)
   1a302:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1a304:	1dfb      	adds	r3, r7, #7
   1a306:	2200      	movs	r2, #0
   1a308:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1a30a:	4b1a      	ldr	r3, [pc, #104]	; (1a374 <detect_battery_voltage_and_percentage+0xb0>)
   1a30c:	699b      	ldr	r3, [r3, #24]
   1a30e:	4a1a      	ldr	r2, [pc, #104]	; (1a378 <detect_battery_voltage_and_percentage+0xb4>)
   1a310:	4293      	cmp	r3, r2
   1a312:	d803      	bhi.n	1a31c <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1a314:	1dfb      	adds	r3, r7, #7
   1a316:	2200      	movs	r2, #0
   1a318:	701a      	strb	r2, [r3, #0]
   1a31a:	e012      	b.n	1a342 <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1a31c:	4b15      	ldr	r3, [pc, #84]	; (1a374 <detect_battery_voltage_and_percentage+0xb0>)
   1a31e:	699b      	ldr	r3, [r3, #24]
   1a320:	4a16      	ldr	r2, [pc, #88]	; (1a37c <detect_battery_voltage_and_percentage+0xb8>)
   1a322:	189a      	adds	r2, r3, r2
   1a324:	4b12      	ldr	r3, [pc, #72]	; (1a370 <detect_battery_voltage_and_percentage+0xac>)
   1a326:	2109      	movs	r1, #9
   1a328:	0010      	movs	r0, r2
   1a32a:	4798      	blx	r3
   1a32c:	0003      	movs	r3, r0
   1a32e:	001a      	movs	r2, r3
   1a330:	1dfb      	adds	r3, r7, #7
   1a332:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1a334:	1dfb      	adds	r3, r7, #7
   1a336:	781b      	ldrb	r3, [r3, #0]
   1a338:	2b64      	cmp	r3, #100	; 0x64
   1a33a:	d902      	bls.n	1a342 <detect_battery_voltage_and_percentage+0x7e>
   1a33c:	1dfb      	adds	r3, r7, #7
   1a33e:	2264      	movs	r2, #100	; 0x64
   1a340:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1a342:	4b0c      	ldr	r3, [pc, #48]	; (1a374 <detect_battery_voltage_and_percentage+0xb0>)
   1a344:	1dfa      	adds	r2, r7, #7
   1a346:	7812      	ldrb	r2, [r2, #0]
   1a348:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1a34a:	4b05      	ldr	r3, [pc, #20]	; (1a360 <detect_battery_voltage_and_percentage+0x9c>)
   1a34c:	6818      	ldr	r0, [r3, #0]
   1a34e:	2300      	movs	r3, #0
   1a350:	2200      	movs	r2, #0
   1a352:	2100      	movs	r1, #0
   1a354:	4c0a      	ldr	r4, [pc, #40]	; (1a380 <detect_battery_voltage_and_percentage+0xbc>)
   1a356:	47a0      	blx	r4
	}
}
   1a358:	46c0      	nop			; (mov r8, r8)
   1a35a:	46bd      	mov	sp, r7
   1a35c:	b003      	add	sp, #12
   1a35e:	bd90      	pop	{r4, r7, pc}
   1a360:	20000238 	.word	0x20000238
   1a364:	0001f5e1 	.word	0x0001f5e1
   1a368:	00019a91 	.word	0x00019a91
   1a36c:	000005b1 	.word	0x000005b1
   1a370:	000264fd 	.word	0x000264fd
   1a374:	200006d8 	.word	0x200006d8
   1a378:	00000ce4 	.word	0x00000ce4
   1a37c:	fffff31c 	.word	0xfffff31c
   1a380:	0001f141 	.word	0x0001f141

0001a384 <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1a384:	b580      	push	{r7, lr}
   1a386:	b084      	sub	sp, #16
   1a388:	af00      	add	r7, sp, #0
   1a38a:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1a38c:	687b      	ldr	r3, [r7, #4]
   1a38e:	2201      	movs	r2, #1
   1a390:	74da      	strb	r2, [r3, #19]
	phaseRMSStruct->index=0;
   1a392:	687b      	ldr	r3, [r7, #4]
   1a394:	2200      	movs	r2, #0
   1a396:	749a      	strb	r2, [r3, #18]
	phaseRMSStruct->rmsVoltage=0;
   1a398:	687b      	ldr	r3, [r7, #4]
   1a39a:	2200      	movs	r2, #0
   1a39c:	821a      	strh	r2, [r3, #16]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a39e:	230f      	movs	r3, #15
   1a3a0:	18fb      	adds	r3, r7, r3
   1a3a2:	2200      	movs	r2, #0
   1a3a4:	701a      	strb	r2, [r3, #0]
   1a3a6:	e00d      	b.n	1a3c4 <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1a3a8:	230f      	movs	r3, #15
   1a3aa:	18fb      	adds	r3, r7, r3
   1a3ac:	781a      	ldrb	r2, [r3, #0]
   1a3ae:	687b      	ldr	r3, [r7, #4]
   1a3b0:	0052      	lsls	r2, r2, #1
   1a3b2:	2100      	movs	r1, #0
   1a3b4:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a3b6:	230f      	movs	r3, #15
   1a3b8:	18fb      	adds	r3, r7, r3
   1a3ba:	781a      	ldrb	r2, [r3, #0]
   1a3bc:	230f      	movs	r3, #15
   1a3be:	18fb      	adds	r3, r7, r3
   1a3c0:	3201      	adds	r2, #1
   1a3c2:	701a      	strb	r2, [r3, #0]
   1a3c4:	230f      	movs	r3, #15
   1a3c6:	18fb      	adds	r3, r7, r3
   1a3c8:	781b      	ldrb	r3, [r3, #0]
   1a3ca:	2b07      	cmp	r3, #7
   1a3cc:	d9ec      	bls.n	1a3a8 <initPhaseRMStruct+0x24>
	}
}
   1a3ce:	46c0      	nop			; (mov r8, r8)
   1a3d0:	46bd      	mov	sp, r7
   1a3d2:	b004      	add	sp, #16
   1a3d4:	bd80      	pop	{r7, pc}
	...

0001a3d8 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3da:	b089      	sub	sp, #36	; 0x24
   1a3dc:	af00      	add	r7, sp, #0
   1a3de:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1a3e0:	2300      	movs	r3, #0
   1a3e2:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1a3e4:	2300      	movs	r3, #0
   1a3e6:	2400      	movs	r4, #0
   1a3e8:	613b      	str	r3, [r7, #16]
   1a3ea:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1a3ec:	2300      	movs	r3, #0
   1a3ee:	2400      	movs	r4, #0
   1a3f0:	60bb      	str	r3, [r7, #8]
   1a3f2:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1a3f4:	687b      	ldr	r3, [r7, #4]
   1a3f6:	2200      	movs	r2, #0
   1a3f8:	74da      	strb	r2, [r3, #19]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a3fa:	231f      	movs	r3, #31
   1a3fc:	18fb      	adds	r3, r7, r3
   1a3fe:	2200      	movs	r2, #0
   1a400:	701a      	strb	r2, [r3, #0]
   1a402:	e036      	b.n	1a472 <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1a404:	231f      	movs	r3, #31
   1a406:	18fb      	adds	r3, r7, r3
   1a408:	781a      	ldrb	r2, [r3, #0]
   1a40a:	687b      	ldr	r3, [r7, #4]
   1a40c:	0052      	lsls	r2, r2, #1
   1a40e:	5ad3      	ldrh	r3, [r2, r3]
   1a410:	2b00      	cmp	r3, #0
   1a412:	d102      	bne.n	1a41a <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1a414:	687b      	ldr	r3, [r7, #4]
   1a416:	2201      	movs	r2, #1
   1a418:	74da      	strb	r2, [r3, #19]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1a41a:	4b31      	ldr	r3, [pc, #196]	; (1a4e0 <updateRMSValues+0x108>)
   1a41c:	69b8      	ldr	r0, [r7, #24]
   1a41e:	4798      	blx	r3
   1a420:	0005      	movs	r5, r0
   1a422:	000e      	movs	r6, r1
   1a424:	231f      	movs	r3, #31
   1a426:	18fb      	adds	r3, r7, r3
   1a428:	781a      	ldrb	r2, [r3, #0]
   1a42a:	687b      	ldr	r3, [r7, #4]
   1a42c:	0052      	lsls	r2, r2, #1
   1a42e:	5ad2      	ldrh	r2, [r2, r3]
   1a430:	4b2b      	ldr	r3, [pc, #172]	; (1a4e0 <updateRMSValues+0x108>)
   1a432:	0010      	movs	r0, r2
   1a434:	4798      	blx	r3
   1a436:	2300      	movs	r3, #0
   1a438:	2480      	movs	r4, #128	; 0x80
   1a43a:	05e4      	lsls	r4, r4, #23
   1a43c:	001a      	movs	r2, r3
   1a43e:	0023      	movs	r3, r4
   1a440:	4c28      	ldr	r4, [pc, #160]	; (1a4e4 <updateRMSValues+0x10c>)
   1a442:	47a0      	blx	r4
   1a444:	0002      	movs	r2, r0
   1a446:	000b      	movs	r3, r1
   1a448:	4c27      	ldr	r4, [pc, #156]	; (1a4e8 <updateRMSValues+0x110>)
   1a44a:	0028      	movs	r0, r5
   1a44c:	0031      	movs	r1, r6
   1a44e:	47a0      	blx	r4
   1a450:	0003      	movs	r3, r0
   1a452:	000c      	movs	r4, r1
   1a454:	0019      	movs	r1, r3
   1a456:	0022      	movs	r2, r4
   1a458:	4b24      	ldr	r3, [pc, #144]	; (1a4ec <updateRMSValues+0x114>)
   1a45a:	0008      	movs	r0, r1
   1a45c:	0011      	movs	r1, r2
   1a45e:	4798      	blx	r3
   1a460:	0003      	movs	r3, r0
   1a462:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a464:	231f      	movs	r3, #31
   1a466:	18fb      	adds	r3, r7, r3
   1a468:	781a      	ldrb	r2, [r3, #0]
   1a46a:	231f      	movs	r3, #31
   1a46c:	18fb      	adds	r3, r7, r3
   1a46e:	3201      	adds	r2, #1
   1a470:	701a      	strb	r2, [r3, #0]
   1a472:	231f      	movs	r3, #31
   1a474:	18fb      	adds	r3, r7, r3
   1a476:	781b      	ldrb	r3, [r3, #0]
   1a478:	2b07      	cmp	r3, #7
   1a47a:	d9c3      	bls.n	1a404 <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1a47c:	4b1c      	ldr	r3, [pc, #112]	; (1a4f0 <updateRMSValues+0x118>)
   1a47e:	69b8      	ldr	r0, [r7, #24]
   1a480:	4798      	blx	r3
   1a482:	1c02      	adds	r2, r0, #0
   1a484:	4b1b      	ldr	r3, [pc, #108]	; (1a4f4 <updateRMSValues+0x11c>)
   1a486:	2182      	movs	r1, #130	; 0x82
   1a488:	05c9      	lsls	r1, r1, #23
   1a48a:	1c10      	adds	r0, r2, #0
   1a48c:	4798      	blx	r3
   1a48e:	1c03      	adds	r3, r0, #0
   1a490:	1c1a      	adds	r2, r3, #0
   1a492:	4b19      	ldr	r3, [pc, #100]	; (1a4f8 <updateRMSValues+0x120>)
   1a494:	1c10      	adds	r0, r2, #0
   1a496:	4798      	blx	r3
   1a498:	0003      	movs	r3, r0
   1a49a:	000c      	movs	r4, r1
   1a49c:	613b      	str	r3, [r7, #16]
   1a49e:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1a4a0:	693b      	ldr	r3, [r7, #16]
   1a4a2:	697c      	ldr	r4, [r7, #20]
   1a4a4:	0018      	movs	r0, r3
   1a4a6:	0021      	movs	r1, r4
   1a4a8:	4b14      	ldr	r3, [pc, #80]	; (1a4fc <updateRMSValues+0x124>)
   1a4aa:	4798      	blx	r3
   1a4ac:	000a      	movs	r2, r1
   1a4ae:	0001      	movs	r1, r0
   1a4b0:	4b0e      	ldr	r3, [pc, #56]	; (1a4ec <updateRMSValues+0x114>)
   1a4b2:	0008      	movs	r0, r1
   1a4b4:	0011      	movs	r1, r2
   1a4b6:	4798      	blx	r3
   1a4b8:	0002      	movs	r2, r0
   1a4ba:	4b09      	ldr	r3, [pc, #36]	; (1a4e0 <updateRMSValues+0x108>)
   1a4bc:	0010      	movs	r0, r2
   1a4be:	4798      	blx	r3
   1a4c0:	0003      	movs	r3, r0
   1a4c2:	000c      	movs	r4, r1
   1a4c4:	60bb      	str	r3, [r7, #8]
   1a4c6:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1a4c8:	4b08      	ldr	r3, [pc, #32]	; (1a4ec <updateRMSValues+0x114>)
   1a4ca:	68b8      	ldr	r0, [r7, #8]
   1a4cc:	68f9      	ldr	r1, [r7, #12]
   1a4ce:	4798      	blx	r3
   1a4d0:	0003      	movs	r3, r0
   1a4d2:	b29a      	uxth	r2, r3
   1a4d4:	687b      	ldr	r3, [r7, #4]
   1a4d6:	821a      	strh	r2, [r3, #16]
}
   1a4d8:	46c0      	nop			; (mov r8, r8)
   1a4da:	46bd      	mov	sp, r7
   1a4dc:	b009      	add	sp, #36	; 0x24
   1a4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4e0:	00028b91 	.word	0x00028b91
   1a4e4:	00025269 	.word	0x00025269
   1a4e8:	000270b1 	.word	0x000270b1
   1a4ec:	000268f9 	.word	0x000268f9
   1a4f0:	00027025 	.word	0x00027025
   1a4f4:	00026ab5 	.word	0x00026ab5
   1a4f8:	00028c01 	.word	0x00028c01
   1a4fc:	000255c1 	.word	0x000255c1

0001a500 <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1a500:	b590      	push	{r4, r7, lr}
   1a502:	b085      	sub	sp, #20
   1a504:	af00      	add	r7, sp, #0
   1a506:	0002      	movs	r2, r0
   1a508:	1dfb      	adds	r3, r7, #7
   1a50a:	701a      	strb	r2, [r3, #0]
   1a50c:	1d3b      	adds	r3, r7, #4
   1a50e:	1c0a      	adds	r2, r1, #0
   1a510:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1a512:	1dfb      	adds	r3, r7, #7
   1a514:	781b      	ldrb	r3, [r3, #0]
   1a516:	2b00      	cmp	r3, #0
   1a518:	d102      	bne.n	1a520 <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1a51a:	4b28      	ldr	r3, [pc, #160]	; (1a5bc <filterVoltage+0xbc>)
   1a51c:	60fb      	str	r3, [r7, #12]
   1a51e:	e00c      	b.n	1a53a <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1a520:	1dfb      	adds	r3, r7, #7
   1a522:	781b      	ldrb	r3, [r3, #0]
   1a524:	2b01      	cmp	r3, #1
   1a526:	d102      	bne.n	1a52e <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1a528:	4b25      	ldr	r3, [pc, #148]	; (1a5c0 <filterVoltage+0xc0>)
   1a52a:	60fb      	str	r3, [r7, #12]
   1a52c:	e005      	b.n	1a53a <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1a52e:	1dfb      	adds	r3, r7, #7
   1a530:	781b      	ldrb	r3, [r3, #0]
   1a532:	2b02      	cmp	r3, #2
   1a534:	d101      	bne.n	1a53a <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1a536:	4b23      	ldr	r3, [pc, #140]	; (1a5c4 <filterVoltage+0xc4>)
   1a538:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1a53a:	68fb      	ldr	r3, [r7, #12]
   1a53c:	7c9b      	ldrb	r3, [r3, #18]
   1a53e:	001a      	movs	r2, r3
   1a540:	2307      	movs	r3, #7
   1a542:	401a      	ands	r2, r3
   1a544:	68fb      	ldr	r3, [r7, #12]
   1a546:	0052      	lsls	r2, r2, #1
   1a548:	1d39      	adds	r1, r7, #4
   1a54a:	8809      	ldrh	r1, [r1, #0]
   1a54c:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1a54e:	68fb      	ldr	r3, [r7, #12]
   1a550:	7c9b      	ldrb	r3, [r3, #18]
   1a552:	3301      	adds	r3, #1
   1a554:	4a1c      	ldr	r2, [pc, #112]	; (1a5c8 <filterVoltage+0xc8>)
   1a556:	4013      	ands	r3, r2
   1a558:	d504      	bpl.n	1a564 <filterVoltage+0x64>
   1a55a:	3b01      	subs	r3, #1
   1a55c:	2208      	movs	r2, #8
   1a55e:	4252      	negs	r2, r2
   1a560:	4313      	orrs	r3, r2
   1a562:	3301      	adds	r3, #1
   1a564:	b2da      	uxtb	r2, r3
   1a566:	68fb      	ldr	r3, [r7, #12]
   1a568:	749a      	strb	r2, [r3, #18]
	
	updateRMSValues(p1);
   1a56a:	68fb      	ldr	r3, [r7, #12]
   1a56c:	0018      	movs	r0, r3
   1a56e:	4b17      	ldr	r3, [pc, #92]	; (1a5cc <filterVoltage+0xcc>)
   1a570:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1a572:	68fb      	ldr	r3, [r7, #12]
   1a574:	7cdb      	ldrb	r3, [r3, #19]
   1a576:	2b00      	cmp	r3, #0
   1a578:	d002      	beq.n	1a580 <filterVoltage+0x80>
		{
			return voltReading;
   1a57a:	1d3b      	adds	r3, r7, #4
   1a57c:	881b      	ldrh	r3, [r3, #0]
   1a57e:	e019      	b.n	1a5b4 <filterVoltage+0xb4>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 10/100))
   1a580:	68fb      	ldr	r3, [r7, #12]
   1a582:	8a1b      	ldrh	r3, [r3, #16]
   1a584:	001a      	movs	r2, r3
   1a586:	1d3b      	adds	r3, r7, #4
   1a588:	881b      	ldrh	r3, [r3, #0]
   1a58a:	1ad4      	subs	r4, r2, r3
   1a58c:	68fb      	ldr	r3, [r7, #12]
   1a58e:	8a1b      	ldrh	r3, [r3, #16]
   1a590:	001a      	movs	r2, r3
   1a592:	0013      	movs	r3, r2
   1a594:	009b      	lsls	r3, r3, #2
   1a596:	189b      	adds	r3, r3, r2
   1a598:	005b      	lsls	r3, r3, #1
   1a59a:	001a      	movs	r2, r3
   1a59c:	4b0c      	ldr	r3, [pc, #48]	; (1a5d0 <filterVoltage+0xd0>)
   1a59e:	2164      	movs	r1, #100	; 0x64
   1a5a0:	0010      	movs	r0, r2
   1a5a2:	4798      	blx	r3
   1a5a4:	0003      	movs	r3, r0
   1a5a6:	429c      	cmp	r4, r3
   1a5a8:	da02      	bge.n	1a5b0 <filterVoltage+0xb0>
		{
			return p1->rmsVoltage;
   1a5aa:	68fb      	ldr	r3, [r7, #12]
   1a5ac:	8a1b      	ldrh	r3, [r3, #16]
   1a5ae:	e001      	b.n	1a5b4 <filterVoltage+0xb4>
		}
		else
		{
			return voltReading;
   1a5b0:	1d3b      	adds	r3, r7, #4
   1a5b2:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1a5b4:	0018      	movs	r0, r3
   1a5b6:	46bd      	mov	sp, r7
   1a5b8:	b005      	add	sp, #20
   1a5ba:	bd90      	pop	{r4, r7, pc}
   1a5bc:	200007a4 	.word	0x200007a4
   1a5c0:	20000720 	.word	0x20000720
   1a5c4:	200007d8 	.word	0x200007d8
   1a5c8:	80000007 	.word	0x80000007
   1a5cc:	0001a3d9 	.word	0x0001a3d9
   1a5d0:	00026611 	.word	0x00026611

0001a5d4 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1a5d4:	b590      	push	{r4, r7, lr}
   1a5d6:	b085      	sub	sp, #20
   1a5d8:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a5da:	4b48      	ldr	r3, [pc, #288]	; (1a6fc <detect_Three_Phase_Voltage+0x128>)
   1a5dc:	681a      	ldr	r2, [r3, #0]
   1a5de:	2301      	movs	r3, #1
   1a5e0:	425b      	negs	r3, r3
   1a5e2:	0019      	movs	r1, r3
   1a5e4:	0010      	movs	r0, r2
   1a5e6:	4b46      	ldr	r3, [pc, #280]	; (1a700 <detect_Three_Phase_Voltage+0x12c>)
   1a5e8:	4798      	blx	r3
   1a5ea:	0003      	movs	r3, r0
   1a5ec:	2b01      	cmp	r3, #1
   1a5ee:	d000      	beq.n	1a5f2 <detect_Three_Phase_Voltage+0x1e>
   1a5f0:	e080      	b.n	1a6f4 <detect_Three_Phase_Voltage+0x120>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1a5f2:	2013      	movs	r0, #19
   1a5f4:	4b43      	ldr	r3, [pc, #268]	; (1a704 <detect_Three_Phase_Voltage+0x130>)
   1a5f6:	4798      	blx	r3
   1a5f8:	0003      	movs	r3, r0
   1a5fa:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
   1a5fc:	68fb      	ldr	r3, [r7, #12]
   1a5fe:	3b0a      	subs	r3, #10
   1a600:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1a602:	68fb      	ldr	r3, [r7, #12]
   1a604:	2b00      	cmp	r3, #0
   1a606:	da02      	bge.n	1a60e <detect_Three_Phase_Voltage+0x3a>
		{
			adcRY = 0;
   1a608:	2300      	movs	r3, #0
   1a60a:	60fb      	str	r3, [r7, #12]
   1a60c:	e00f      	b.n	1a62e <detect_Three_Phase_Voltage+0x5a>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
   1a60e:	68fb      	ldr	r3, [r7, #12]
   1a610:	3b0a      	subs	r3, #10
   1a612:	4a3d      	ldr	r2, [pc, #244]	; (1a708 <detect_Three_Phase_Voltage+0x134>)
   1a614:	435a      	muls	r2, r3
   1a616:	0010      	movs	r0, r2
   1a618:	4b3c      	ldr	r3, [pc, #240]	; (1a70c <detect_Three_Phase_Voltage+0x138>)
   1a61a:	22fa      	movs	r2, #250	; 0xfa
   1a61c:	0091      	lsls	r1, r2, #2
   1a61e:	4798      	blx	r3
   1a620:	0003      	movs	r3, r0
   1a622:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1a624:	68fb      	ldr	r3, [r7, #12]
   1a626:	2b00      	cmp	r3, #0
   1a628:	da01      	bge.n	1a62e <detect_Three_Phase_Voltage+0x5a>
			{
				adcRY = 0;
   1a62a:	2300      	movs	r3, #0
   1a62c:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1a62e:	2012      	movs	r0, #18
   1a630:	4b34      	ldr	r3, [pc, #208]	; (1a704 <detect_Three_Phase_Voltage+0x130>)
   1a632:	4798      	blx	r3
   1a634:	0003      	movs	r3, r0
   1a636:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
   1a638:	68bb      	ldr	r3, [r7, #8]
   1a63a:	3b0a      	subs	r3, #10
   1a63c:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1a63e:	68bb      	ldr	r3, [r7, #8]
   1a640:	2b00      	cmp	r3, #0
   1a642:	da02      	bge.n	1a64a <detect_Three_Phase_Voltage+0x76>
		{
			adcYB = 0;
   1a644:	2300      	movs	r3, #0
   1a646:	60bb      	str	r3, [r7, #8]
   1a648:	e00f      	b.n	1a66a <detect_Three_Phase_Voltage+0x96>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
   1a64a:	68bb      	ldr	r3, [r7, #8]
   1a64c:	3b0a      	subs	r3, #10
   1a64e:	4a2e      	ldr	r2, [pc, #184]	; (1a708 <detect_Three_Phase_Voltage+0x134>)
   1a650:	435a      	muls	r2, r3
   1a652:	0010      	movs	r0, r2
   1a654:	4b2d      	ldr	r3, [pc, #180]	; (1a70c <detect_Three_Phase_Voltage+0x138>)
   1a656:	22fa      	movs	r2, #250	; 0xfa
   1a658:	0091      	lsls	r1, r2, #2
   1a65a:	4798      	blx	r3
   1a65c:	0003      	movs	r3, r0
   1a65e:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1a660:	68bb      	ldr	r3, [r7, #8]
   1a662:	2b00      	cmp	r3, #0
   1a664:	da01      	bge.n	1a66a <detect_Three_Phase_Voltage+0x96>
			{
				adcYB = 0;
   1a666:	2300      	movs	r3, #0
   1a668:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1a66a:	2011      	movs	r0, #17
   1a66c:	4b25      	ldr	r3, [pc, #148]	; (1a704 <detect_Three_Phase_Voltage+0x130>)
   1a66e:	4798      	blx	r3
   1a670:	0003      	movs	r3, r0
   1a672:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
   1a674:	687b      	ldr	r3, [r7, #4]
   1a676:	3b0c      	subs	r3, #12
   1a678:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1a67a:	687b      	ldr	r3, [r7, #4]
   1a67c:	2b00      	cmp	r3, #0
   1a67e:	da02      	bge.n	1a686 <detect_Three_Phase_Voltage+0xb2>
		{
			adcBR = 0;
   1a680:	2300      	movs	r3, #0
   1a682:	607b      	str	r3, [r7, #4]
   1a684:	e00f      	b.n	1a6a6 <detect_Three_Phase_Voltage+0xd2>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1a686:	687b      	ldr	r3, [r7, #4]
   1a688:	3b0c      	subs	r3, #12
   1a68a:	4a21      	ldr	r2, [pc, #132]	; (1a710 <detect_Three_Phase_Voltage+0x13c>)
   1a68c:	435a      	muls	r2, r3
   1a68e:	0010      	movs	r0, r2
   1a690:	4b1e      	ldr	r3, [pc, #120]	; (1a70c <detect_Three_Phase_Voltage+0x138>)
   1a692:	22fa      	movs	r2, #250	; 0xfa
   1a694:	0091      	lsls	r1, r2, #2
   1a696:	4798      	blx	r3
   1a698:	0003      	movs	r3, r0
   1a69a:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1a69c:	687b      	ldr	r3, [r7, #4]
   1a69e:	2b00      	cmp	r3, #0
   1a6a0:	da01      	bge.n	1a6a6 <detect_Three_Phase_Voltage+0xd2>
			{
				adcBR = 0;
   1a6a2:	2300      	movs	r3, #0
   1a6a4:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1a6a6:	68fb      	ldr	r3, [r7, #12]
   1a6a8:	b29b      	uxth	r3, r3
   1a6aa:	0019      	movs	r1, r3
   1a6ac:	2000      	movs	r0, #0
   1a6ae:	4b19      	ldr	r3, [pc, #100]	; (1a714 <detect_Three_Phase_Voltage+0x140>)
   1a6b0:	4798      	blx	r3
   1a6b2:	0003      	movs	r3, r0
   1a6b4:	001a      	movs	r2, r3
   1a6b6:	4b18      	ldr	r3, [pc, #96]	; (1a718 <detect_Three_Phase_Voltage+0x144>)
   1a6b8:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1a6ba:	68bb      	ldr	r3, [r7, #8]
   1a6bc:	b29b      	uxth	r3, r3
   1a6be:	0019      	movs	r1, r3
   1a6c0:	2001      	movs	r0, #1
   1a6c2:	4b14      	ldr	r3, [pc, #80]	; (1a714 <detect_Three_Phase_Voltage+0x140>)
   1a6c4:	4798      	blx	r3
   1a6c6:	0003      	movs	r3, r0
   1a6c8:	001a      	movs	r2, r3
   1a6ca:	4b13      	ldr	r3, [pc, #76]	; (1a718 <detect_Three_Phase_Voltage+0x144>)
   1a6cc:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1a6ce:	687b      	ldr	r3, [r7, #4]
   1a6d0:	b29b      	uxth	r3, r3
   1a6d2:	0019      	movs	r1, r3
   1a6d4:	2002      	movs	r0, #2
   1a6d6:	4b0f      	ldr	r3, [pc, #60]	; (1a714 <detect_Three_Phase_Voltage+0x140>)
   1a6d8:	4798      	blx	r3
   1a6da:	0003      	movs	r3, r0
   1a6dc:	001a      	movs	r2, r3
   1a6de:	4b0e      	ldr	r3, [pc, #56]	; (1a718 <detect_Three_Phase_Voltage+0x144>)
   1a6e0:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1a6e2:	4b0e      	ldr	r3, [pc, #56]	; (1a71c <detect_Three_Phase_Voltage+0x148>)
   1a6e4:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1a6e6:	4b05      	ldr	r3, [pc, #20]	; (1a6fc <detect_Three_Phase_Voltage+0x128>)
   1a6e8:	6818      	ldr	r0, [r3, #0]
   1a6ea:	2300      	movs	r3, #0
   1a6ec:	2200      	movs	r2, #0
   1a6ee:	2100      	movs	r1, #0
   1a6f0:	4c0b      	ldr	r4, [pc, #44]	; (1a720 <detect_Three_Phase_Voltage+0x14c>)
   1a6f2:	47a0      	blx	r4
	}
}
   1a6f4:	46c0      	nop			; (mov r8, r8)
   1a6f6:	46bd      	mov	sp, r7
   1a6f8:	b005      	add	sp, #20
   1a6fa:	bd90      	pop	{r4, r7, pc}
   1a6fc:	20000238 	.word	0x20000238
   1a700:	0001f5e1 	.word	0x0001f5e1
   1a704:	00019b4d 	.word	0x00019b4d
   1a708:	0000028f 	.word	0x0000028f
   1a70c:	00026611 	.word	0x00026611
   1a710:	0000029e 	.word	0x0000029e
   1a714:	0001a501 	.word	0x0001a501
   1a718:	200006d8 	.word	0x200006d8
   1a71c:	0001a725 	.word	0x0001a725
   1a720:	0001f141 	.word	0x0001f141

0001a724 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1a724:	b580      	push	{r7, lr}
   1a726:	b082      	sub	sp, #8
   1a728:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1a72a:	1dfb      	adds	r3, r7, #7
   1a72c:	4a2e      	ldr	r2, [pc, #184]	; (1a7e8 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a72e:	7852      	ldrb	r2, [r2, #1]
   1a730:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a732:	4b2e      	ldr	r3, [pc, #184]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a734:	681b      	ldr	r3, [r3, #0]
   1a736:	2b27      	cmp	r3, #39	; 0x27
   1a738:	d80b      	bhi.n	1a752 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a73a:	4b2c      	ldr	r3, [pc, #176]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a73c:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a73e:	2b27      	cmp	r3, #39	; 0x27
   1a740:	d807      	bhi.n	1a752 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
   1a742:	4b2a      	ldr	r3, [pc, #168]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a744:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a746:	2b27      	cmp	r3, #39	; 0x27
   1a748:	d803      	bhi.n	1a752 <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1a74a:	4b27      	ldr	r3, [pc, #156]	; (1a7e8 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a74c:	2200      	movs	r2, #0
   1a74e:	705a      	strb	r2, [r3, #1]
   1a750:	e02a      	b.n	1a7a8 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a752:	4b26      	ldr	r3, [pc, #152]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a754:	681a      	ldr	r2, [r3, #0]
   1a756:	4b25      	ldr	r3, [pc, #148]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a758:	685b      	ldr	r3, [r3, #4]
   1a75a:	1ad3      	subs	r3, r2, r3
   1a75c:	17da      	asrs	r2, r3, #31
   1a75e:	189b      	adds	r3, r3, r2
   1a760:	4053      	eors	r3, r2
   1a762:	4a23      	ldr	r2, [pc, #140]	; (1a7f0 <set_Three_Phase_State_From_Voltage+0xcc>)
   1a764:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1a766:	4293      	cmp	r3, r2
   1a768:	dc17      	bgt.n	1a79a <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a76a:	4b20      	ldr	r3, [pc, #128]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a76c:	685a      	ldr	r2, [r3, #4]
   1a76e:	4b1f      	ldr	r3, [pc, #124]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a770:	689b      	ldr	r3, [r3, #8]
   1a772:	1ad3      	subs	r3, r2, r3
   1a774:	17da      	asrs	r2, r3, #31
   1a776:	189b      	adds	r3, r3, r2
   1a778:	4053      	eors	r3, r2
   1a77a:	4a1d      	ldr	r2, [pc, #116]	; (1a7f0 <set_Three_Phase_State_From_Voltage+0xcc>)
   1a77c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a77e:	4293      	cmp	r3, r2
   1a780:	dc0b      	bgt.n	1a79a <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1a782:	4b1a      	ldr	r3, [pc, #104]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a784:	689a      	ldr	r2, [r3, #8]
   1a786:	4b19      	ldr	r3, [pc, #100]	; (1a7ec <set_Three_Phase_State_From_Voltage+0xc8>)
   1a788:	681b      	ldr	r3, [r3, #0]
   1a78a:	1ad3      	subs	r3, r2, r3
   1a78c:	17da      	asrs	r2, r3, #31
   1a78e:	189b      	adds	r3, r3, r2
   1a790:	4053      	eors	r3, r2
   1a792:	4a17      	ldr	r2, [pc, #92]	; (1a7f0 <set_Three_Phase_State_From_Voltage+0xcc>)
   1a794:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a796:	4293      	cmp	r3, r2
   1a798:	dd03      	ble.n	1a7a2 <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1a79a:	4b13      	ldr	r3, [pc, #76]	; (1a7e8 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a79c:	2202      	movs	r2, #2
   1a79e:	705a      	strb	r2, [r3, #1]
   1a7a0:	e002      	b.n	1a7a8 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1a7a2:	4b11      	ldr	r3, [pc, #68]	; (1a7e8 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a7a4:	2203      	movs	r2, #3
   1a7a6:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1a7a8:	4b0f      	ldr	r3, [pc, #60]	; (1a7e8 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a7aa:	785b      	ldrb	r3, [r3, #1]
   1a7ac:	b2da      	uxtb	r2, r3
   1a7ae:	4b11      	ldr	r3, [pc, #68]	; (1a7f4 <set_Three_Phase_State_From_Voltage+0xd0>)
   1a7b0:	781b      	ldrb	r3, [r3, #0]
   1a7b2:	b2db      	uxtb	r3, r3
   1a7b4:	429a      	cmp	r2, r3
   1a7b6:	d012      	beq.n	1a7de <set_Three_Phase_State_From_Voltage+0xba>
	{
		if(!motorRelatedVoltageBypassOn)
   1a7b8:	4b0f      	ldr	r3, [pc, #60]	; (1a7f8 <set_Three_Phase_State_From_Voltage+0xd4>)
   1a7ba:	781b      	ldrb	r3, [r3, #0]
   1a7bc:	2201      	movs	r2, #1
   1a7be:	4053      	eors	r3, r2
   1a7c0:	b2db      	uxtb	r3, r3
   1a7c2:	2b00      	cmp	r3, #0
   1a7c4:	d00b      	beq.n	1a7de <set_Three_Phase_State_From_Voltage+0xba>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1a7c6:	4b0d      	ldr	r3, [pc, #52]	; (1a7fc <set_Three_Phase_State_From_Voltage+0xd8>)
   1a7c8:	1dfa      	adds	r2, r7, #7
   1a7ca:	7812      	ldrb	r2, [r2, #0]
   1a7cc:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1a7ce:	4b06      	ldr	r3, [pc, #24]	; (1a7e8 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a7d0:	785b      	ldrb	r3, [r3, #1]
   1a7d2:	b2da      	uxtb	r2, r3
   1a7d4:	4b07      	ldr	r3, [pc, #28]	; (1a7f4 <set_Three_Phase_State_From_Voltage+0xd0>)
   1a7d6:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1a7d8:	4b09      	ldr	r3, [pc, #36]	; (1a800 <set_Three_Phase_State_From_Voltage+0xdc>)
   1a7da:	2201      	movs	r2, #1
   1a7dc:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a7de:	46c0      	nop			; (mov r8, r8)
   1a7e0:	46bd      	mov	sp, r7
   1a7e2:	b002      	add	sp, #8
   1a7e4:	bd80      	pop	{r7, pc}
   1a7e6:	46c0      	nop			; (mov r8, r8)
   1a7e8:	2000073c 	.word	0x2000073c
   1a7ec:	200006d8 	.word	0x200006d8
   1a7f0:	20000650 	.word	0x20000650
   1a7f4:	2000083d 	.word	0x2000083d
   1a7f8:	20000767 	.word	0x20000767
   1a7fc:	2000071b 	.word	0x2000071b
   1a800:	2000071e 	.word	0x2000071e

0001a804 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1a804:	b590      	push	{r4, r7, lr}
   1a806:	b083      	sub	sp, #12
   1a808:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a80a:	4b33      	ldr	r3, [pc, #204]	; (1a8d8 <detect_Motor_Current+0xd4>)
   1a80c:	681a      	ldr	r2, [r3, #0]
   1a80e:	2301      	movs	r3, #1
   1a810:	425b      	negs	r3, r3
   1a812:	0019      	movs	r1, r3
   1a814:	0010      	movs	r0, r2
   1a816:	4b31      	ldr	r3, [pc, #196]	; (1a8dc <detect_Motor_Current+0xd8>)
   1a818:	4798      	blx	r3
   1a81a:	0003      	movs	r3, r0
   1a81c:	2b01      	cmp	r3, #1
   1a81e:	d157      	bne.n	1a8d0 <detect_Motor_Current+0xcc>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1a820:	21c8      	movs	r1, #200	; 0xc8
   1a822:	2010      	movs	r0, #16
   1a824:	4b2e      	ldr	r3, [pc, #184]	; (1a8e0 <detect_Motor_Current+0xdc>)
   1a826:	4798      	blx	r3
   1a828:	0003      	movs	r3, r0
   1a82a:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1a82c:	687b      	ldr	r3, [r7, #4]
   1a82e:	2b0f      	cmp	r3, #15
   1a830:	d906      	bls.n	1a840 <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
   1a832:	687b      	ldr	r3, [r7, #4]
   1a834:	3b0f      	subs	r3, #15
   1a836:	17da      	asrs	r2, r3, #31
   1a838:	189b      	adds	r3, r3, r2
   1a83a:	4053      	eors	r3, r2
   1a83c:	607b      	str	r3, [r7, #4]
   1a83e:	e004      	b.n	1a84a <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
   1a840:	687b      	ldr	r3, [r7, #4]
   1a842:	2b0f      	cmp	r3, #15
   1a844:	d801      	bhi.n	1a84a <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
   1a846:	2300      	movs	r3, #0
   1a848:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
   1a84a:	4b23      	ldr	r3, [pc, #140]	; (1a8d8 <detect_Motor_Current+0xd4>)
   1a84c:	6818      	ldr	r0, [r3, #0]
   1a84e:	2300      	movs	r3, #0
   1a850:	2200      	movs	r2, #0
   1a852:	2100      	movs	r1, #0
   1a854:	4c23      	ldr	r4, [pc, #140]	; (1a8e4 <detect_Motor_Current+0xe0>)
   1a856:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1a858:	4b23      	ldr	r3, [pc, #140]	; (1a8e8 <detect_Motor_Current+0xe4>)
   1a85a:	687a      	ldr	r2, [r7, #4]
   1a85c:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1a85e:	687b      	ldr	r3, [r7, #4]
   1a860:	4a22      	ldr	r2, [pc, #136]	; (1a8ec <detect_Motor_Current+0xe8>)
   1a862:	435a      	muls	r2, r3
   1a864:	0010      	movs	r0, r2
   1a866:	4b22      	ldr	r3, [pc, #136]	; (1a8f0 <detect_Motor_Current+0xec>)
   1a868:	22fa      	movs	r2, #250	; 0xfa
   1a86a:	0091      	lsls	r1, r2, #2
   1a86c:	4798      	blx	r3
   1a86e:	0003      	movs	r3, r0
   1a870:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1a872:	687b      	ldr	r3, [r7, #4]
   1a874:	4a1f      	ldr	r2, [pc, #124]	; (1a8f4 <detect_Motor_Current+0xf0>)
   1a876:	4293      	cmp	r3, r2
   1a878:	d810      	bhi.n	1a89c <detect_Motor_Current+0x98>
   1a87a:	687b      	ldr	r3, [r7, #4]
   1a87c:	2b00      	cmp	r3, #0
   1a87e:	d00d      	beq.n	1a89c <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1a880:	687b      	ldr	r3, [r7, #4]
   1a882:	4a1d      	ldr	r2, [pc, #116]	; (1a8f8 <detect_Motor_Current+0xf4>)
   1a884:	4353      	muls	r3, r2
   1a886:	4a1d      	ldr	r2, [pc, #116]	; (1a8fc <detect_Motor_Current+0xf8>)
   1a888:	1898      	adds	r0, r3, r2
   1a88a:	4b19      	ldr	r3, [pc, #100]	; (1a8f0 <detect_Motor_Current+0xec>)
   1a88c:	22fa      	movs	r2, #250	; 0xfa
   1a88e:	0091      	lsls	r1, r2, #2
   1a890:	4798      	blx	r3
   1a892:	0003      	movs	r3, r0
   1a894:	001a      	movs	r2, r3
   1a896:	687b      	ldr	r3, [r7, #4]
   1a898:	189b      	adds	r3, r3, r2
   1a89a:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1a89c:	4b12      	ldr	r3, [pc, #72]	; (1a8e8 <detect_Motor_Current+0xe4>)
   1a89e:	687a      	ldr	r2, [r7, #4]
   1a8a0:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1a8a2:	687a      	ldr	r2, [r7, #4]
   1a8a4:	4b12      	ldr	r3, [pc, #72]	; (1a8f0 <detect_Motor_Current+0xec>)
   1a8a6:	2164      	movs	r1, #100	; 0x64
   1a8a8:	0010      	movs	r0, r2
   1a8aa:	4798      	blx	r3
   1a8ac:	0003      	movs	r3, r0
   1a8ae:	b29a      	uxth	r2, r3
   1a8b0:	4b0d      	ldr	r3, [pc, #52]	; (1a8e8 <detect_Motor_Current+0xe4>)
   1a8b2:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1a8b4:	687a      	ldr	r2, [r7, #4]
   1a8b6:	4b12      	ldr	r3, [pc, #72]	; (1a900 <detect_Motor_Current+0xfc>)
   1a8b8:	2164      	movs	r1, #100	; 0x64
   1a8ba:	0010      	movs	r0, r2
   1a8bc:	4798      	blx	r3
   1a8be:	000b      	movs	r3, r1
   1a8c0:	b29a      	uxth	r2, r3
   1a8c2:	4b09      	ldr	r3, [pc, #36]	; (1a8e8 <detect_Motor_Current+0xe4>)
   1a8c4:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1a8c6:	4b0f      	ldr	r3, [pc, #60]	; (1a904 <detect_Motor_Current+0x100>)
   1a8c8:	2200      	movs	r2, #0
   1a8ca:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1a8cc:	4b0e      	ldr	r3, [pc, #56]	; (1a908 <detect_Motor_Current+0x104>)
   1a8ce:	4798      	blx	r3
	}
}
   1a8d0:	46c0      	nop			; (mov r8, r8)
   1a8d2:	46bd      	mov	sp, r7
   1a8d4:	b003      	add	sp, #12
   1a8d6:	bd90      	pop	{r4, r7, pc}
   1a8d8:	20000238 	.word	0x20000238
   1a8dc:	0001f5e1 	.word	0x0001f5e1
   1a8e0:	00019a91 	.word	0x00019a91
   1a8e4:	0001f141 	.word	0x0001f141
   1a8e8:	200006d8 	.word	0x200006d8
   1a8ec:	00000d61 	.word	0x00000d61
   1a8f0:	000264fd 	.word	0x000264fd
   1a8f4:	000004af 	.word	0x000004af
   1a8f8:	fffffef0 	.word	0xfffffef0
   1a8fc:	0004fb00 	.word	0x0004fb00
   1a900:	00026609 	.word	0x00026609
   1a904:	2000024b 	.word	0x2000024b
   1a908:	0001a90d 	.word	0x0001a90d

0001a90c <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1a90c:	b590      	push	{r4, r7, lr}
   1a90e:	b085      	sub	sp, #20
   1a910:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1a912:	4b39      	ldr	r3, [pc, #228]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a914:	681b      	ldr	r3, [r3, #0]
   1a916:	b29a      	uxth	r2, r3
   1a918:	4b37      	ldr	r3, [pc, #220]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a91a:	685b      	ldr	r3, [r3, #4]
   1a91c:	b29b      	uxth	r3, r3
   1a91e:	18d3      	adds	r3, r2, r3
   1a920:	b299      	uxth	r1, r3
   1a922:	4b35      	ldr	r3, [pc, #212]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a924:	689b      	ldr	r3, [r3, #8]
   1a926:	b29a      	uxth	r2, r3
   1a928:	230e      	movs	r3, #14
   1a92a:	18fb      	adds	r3, r7, r3
   1a92c:	188a      	adds	r2, r1, r2
   1a92e:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/(float)3) * (Analog_Parameter_Struct.Motor_Current/(float)100);
   1a930:	230e      	movs	r3, #14
   1a932:	18fb      	adds	r3, r7, r3
   1a934:	881a      	ldrh	r2, [r3, #0]
   1a936:	4b31      	ldr	r3, [pc, #196]	; (1a9fc <calcPowerConsumption+0xf0>)
   1a938:	0010      	movs	r0, r2
   1a93a:	4798      	blx	r3
   1a93c:	1c02      	adds	r2, r0, #0
   1a93e:	4b30      	ldr	r3, [pc, #192]	; (1aa00 <calcPowerConsumption+0xf4>)
   1a940:	4930      	ldr	r1, [pc, #192]	; (1aa04 <calcPowerConsumption+0xf8>)
   1a942:	1c10      	adds	r0, r2, #0
   1a944:	4798      	blx	r3
   1a946:	1c03      	adds	r3, r0, #0
   1a948:	1c1c      	adds	r4, r3, #0
   1a94a:	4b2b      	ldr	r3, [pc, #172]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a94c:	691a      	ldr	r2, [r3, #16]
   1a94e:	4b2e      	ldr	r3, [pc, #184]	; (1aa08 <calcPowerConsumption+0xfc>)
   1a950:	0010      	movs	r0, r2
   1a952:	4798      	blx	r3
   1a954:	1c02      	adds	r2, r0, #0
   1a956:	4b2a      	ldr	r3, [pc, #168]	; (1aa00 <calcPowerConsumption+0xf4>)
   1a958:	492c      	ldr	r1, [pc, #176]	; (1aa0c <calcPowerConsumption+0x100>)
   1a95a:	1c10      	adds	r0, r2, #0
   1a95c:	4798      	blx	r3
   1a95e:	1c03      	adds	r3, r0, #0
   1a960:	1c1a      	adds	r2, r3, #0
   1a962:	4b2b      	ldr	r3, [pc, #172]	; (1aa10 <calcPowerConsumption+0x104>)
   1a964:	1c11      	adds	r1, r2, #0
   1a966:	1c20      	adds	r0, r4, #0
   1a968:	4798      	blx	r3
   1a96a:	1c03      	adds	r3, r0, #0
   1a96c:	1c1a      	adds	r2, r3, #0
   1a96e:	4b29      	ldr	r3, [pc, #164]	; (1aa14 <calcPowerConsumption+0x108>)
   1a970:	1c10      	adds	r0, r2, #0
   1a972:	4798      	blx	r3
   1a974:	0003      	movs	r3, r0
   1a976:	000c      	movs	r4, r1
   1a978:	603b      	str	r3, [r7, #0]
   1a97a:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85 / (float)100;
   1a97c:	4c26      	ldr	r4, [pc, #152]	; (1aa18 <calcPowerConsumption+0x10c>)
   1a97e:	4a27      	ldr	r2, [pc, #156]	; (1aa1c <calcPowerConsumption+0x110>)
   1a980:	4b27      	ldr	r3, [pc, #156]	; (1aa20 <calcPowerConsumption+0x114>)
   1a982:	6838      	ldr	r0, [r7, #0]
   1a984:	6879      	ldr	r1, [r7, #4]
   1a986:	47a0      	blx	r4
   1a988:	0003      	movs	r3, r0
   1a98a:	000c      	movs	r4, r1
   1a98c:	0018      	movs	r0, r3
   1a98e:	0021      	movs	r1, r4
   1a990:	4c21      	ldr	r4, [pc, #132]	; (1aa18 <calcPowerConsumption+0x10c>)
   1a992:	2200      	movs	r2, #0
   1a994:	4b23      	ldr	r3, [pc, #140]	; (1aa24 <calcPowerConsumption+0x118>)
   1a996:	47a0      	blx	r4
   1a998:	0003      	movs	r3, r0
   1a99a:	000c      	movs	r4, r1
   1a99c:	0018      	movs	r0, r3
   1a99e:	0021      	movs	r1, r4
   1a9a0:	4c21      	ldr	r4, [pc, #132]	; (1aa28 <calcPowerConsumption+0x11c>)
   1a9a2:	2200      	movs	r2, #0
   1a9a4:	4b21      	ldr	r3, [pc, #132]	; (1aa2c <calcPowerConsumption+0x120>)
   1a9a6:	47a0      	blx	r4
   1a9a8:	0003      	movs	r3, r0
   1a9aa:	000c      	movs	r4, r1
   1a9ac:	603b      	str	r3, [r7, #0]
   1a9ae:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1a9b0:	4b1f      	ldr	r3, [pc, #124]	; (1aa30 <calcPowerConsumption+0x124>)
   1a9b2:	6838      	ldr	r0, [r7, #0]
   1a9b4:	6879      	ldr	r1, [r7, #4]
   1a9b6:	4798      	blx	r3
   1a9b8:	0002      	movs	r2, r0
   1a9ba:	4b0f      	ldr	r3, [pc, #60]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a9bc:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1a9be:	4b1c      	ldr	r3, [pc, #112]	; (1aa30 <calcPowerConsumption+0x124>)
   1a9c0:	6838      	ldr	r0, [r7, #0]
   1a9c2:	6879      	ldr	r1, [r7, #4]
   1a9c4:	4798      	blx	r3
   1a9c6:	4b1b      	ldr	r3, [pc, #108]	; (1aa34 <calcPowerConsumption+0x128>)
   1a9c8:	22fa      	movs	r2, #250	; 0xfa
   1a9ca:	0091      	lsls	r1, r2, #2
   1a9cc:	4798      	blx	r3
   1a9ce:	0003      	movs	r3, r0
   1a9d0:	b29a      	uxth	r2, r3
   1a9d2:	4b09      	ldr	r3, [pc, #36]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a9d4:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1a9d6:	4b16      	ldr	r3, [pc, #88]	; (1aa30 <calcPowerConsumption+0x124>)
   1a9d8:	6838      	ldr	r0, [r7, #0]
   1a9da:	6879      	ldr	r1, [r7, #4]
   1a9dc:	4798      	blx	r3
   1a9de:	4b16      	ldr	r3, [pc, #88]	; (1aa38 <calcPowerConsumption+0x12c>)
   1a9e0:	22fa      	movs	r2, #250	; 0xfa
   1a9e2:	0091      	lsls	r1, r2, #2
   1a9e4:	4798      	blx	r3
   1a9e6:	000b      	movs	r3, r1
   1a9e8:	001a      	movs	r2, r3
   1a9ea:	4b03      	ldr	r3, [pc, #12]	; (1a9f8 <calcPowerConsumption+0xec>)
   1a9ec:	629a      	str	r2, [r3, #40]	; 0x28
}
   1a9ee:	46c0      	nop			; (mov r8, r8)
   1a9f0:	46bd      	mov	sp, r7
   1a9f2:	b005      	add	sp, #20
   1a9f4:	bd90      	pop	{r4, r7, pc}
   1a9f6:	46c0      	nop			; (mov r8, r8)
   1a9f8:	200006d8 	.word	0x200006d8
   1a9fc:	00026f85 	.word	0x00026f85
   1aa00:	00026ab5 	.word	0x00026ab5
   1aa04:	40400000 	.word	0x40400000
   1aa08:	00027025 	.word	0x00027025
   1aa0c:	42c80000 	.word	0x42c80000
   1aa10:	00026d45 	.word	0x00026d45
   1aa14:	00028c01 	.word	0x00028c01
   1aa18:	00027f39 	.word	0x00027f39
   1aa1c:	e8584caa 	.word	0xe8584caa
   1aa20:	3ffbb67a 	.word	0x3ffbb67a
   1aa24:	40554000 	.word	0x40554000
   1aa28:	000276d1 	.word	0x000276d1
   1aa2c:	40590000 	.word	0x40590000
   1aa30:	000268f9 	.word	0x000268f9
   1aa34:	000264fd 	.word	0x000264fd
   1aa38:	00026609 	.word	0x00026609

0001aa3c <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1aa3c:	b580      	push	{r7, lr}
   1aa3e:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1aa40:	4b04      	ldr	r3, [pc, #16]	; (1aa54 <should_Detect_New_Current+0x18>)
   1aa42:	781b      	ldrb	r3, [r3, #0]
   1aa44:	b2db      	uxtb	r3, r3
   1aa46:	3b01      	subs	r3, #1
   1aa48:	425a      	negs	r2, r3
   1aa4a:	4153      	adcs	r3, r2
   1aa4c:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1aa4e:	0018      	movs	r0, r3
   1aa50:	46bd      	mov	sp, r7
   1aa52:	bd80      	pop	{r7, pc}
   1aa54:	2000024b 	.word	0x2000024b

0001aa58 <getACPowerState>:

bool getACPowerState(void)
{
   1aa58:	b580      	push	{r7, lr}
   1aa5a:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1aa5c:	4b02      	ldr	r3, [pc, #8]	; (1aa68 <getACPowerState+0x10>)
   1aa5e:	781b      	ldrb	r3, [r3, #0]
   1aa60:	b2db      	uxtb	r3, r3
}
   1aa62:	0018      	movs	r0, r3
   1aa64:	46bd      	mov	sp, r7
   1aa66:	bd80      	pop	{r7, pc}
   1aa68:	200007ba 	.word	0x200007ba

0001aa6c <setACPowerState>:

void setACPowerState(bool state)
{
   1aa6c:	b580      	push	{r7, lr}
   1aa6e:	b082      	sub	sp, #8
   1aa70:	af00      	add	r7, sp, #0
   1aa72:	0002      	movs	r2, r0
   1aa74:	1dfb      	adds	r3, r7, #7
   1aa76:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1aa78:	4b03      	ldr	r3, [pc, #12]	; (1aa88 <setACPowerState+0x1c>)
   1aa7a:	1dfa      	adds	r2, r7, #7
   1aa7c:	7812      	ldrb	r2, [r2, #0]
   1aa7e:	701a      	strb	r2, [r3, #0]
}
   1aa80:	46c0      	nop			; (mov r8, r8)
   1aa82:	46bd      	mov	sp, r7
   1aa84:	b002      	add	sp, #8
   1aa86:	bd80      	pop	{r7, pc}
   1aa88:	200007ba 	.word	0x200007ba

0001aa8c <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1aa8c:	b580      	push	{r7, lr}
   1aa8e:	af00      	add	r7, sp, #0
	return allPhase;
   1aa90:	4b02      	ldr	r3, [pc, #8]	; (1aa9c <getAllPhaseState+0x10>)
   1aa92:	781b      	ldrb	r3, [r3, #0]
   1aa94:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1aa96:	0018      	movs	r0, r3
   1aa98:	46bd      	mov	sp, r7
   1aa9a:	bd80      	pop	{r7, pc}
   1aa9c:	20000755 	.word	0x20000755

0001aaa0 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1aaa0:	b580      	push	{r7, lr}
   1aaa2:	b082      	sub	sp, #8
   1aaa4:	af00      	add	r7, sp, #0
   1aaa6:	0002      	movs	r2, r0
   1aaa8:	1dfb      	adds	r3, r7, #7
   1aaaa:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1aaac:	4b03      	ldr	r3, [pc, #12]	; (1aabc <setAllPhaseState+0x1c>)
   1aaae:	1dfa      	adds	r2, r7, #7
   1aab0:	7812      	ldrb	r2, [r2, #0]
   1aab2:	701a      	strb	r2, [r3, #0]
}
   1aab4:	46c0      	nop			; (mov r8, r8)
   1aab6:	46bd      	mov	sp, r7
   1aab8:	b002      	add	sp, #8
   1aaba:	bd80      	pop	{r7, pc}
   1aabc:	20000755 	.word	0x20000755

0001aac0 <getPhaseSequence>:

bool getPhaseSequence()
{
   1aac0:	b580      	push	{r7, lr}
   1aac2:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1aac4:	4b02      	ldr	r3, [pc, #8]	; (1aad0 <getPhaseSequence+0x10>)
   1aac6:	781b      	ldrb	r3, [r3, #0]
   1aac8:	b2db      	uxtb	r3, r3
}
   1aaca:	0018      	movs	r0, r3
   1aacc:	46bd      	mov	sp, r7
   1aace:	bd80      	pop	{r7, pc}
   1aad0:	20000768 	.word	0x20000768

0001aad4 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1aad4:	b580      	push	{r7, lr}
   1aad6:	b082      	sub	sp, #8
   1aad8:	af00      	add	r7, sp, #0
   1aada:	0002      	movs	r2, r0
   1aadc:	1dfb      	adds	r3, r7, #7
   1aade:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1aae0:	4b03      	ldr	r3, [pc, #12]	; (1aaf0 <setPhaseSequence+0x1c>)
   1aae2:	1dfa      	adds	r2, r7, #7
   1aae4:	7812      	ldrb	r2, [r2, #0]
   1aae6:	701a      	strb	r2, [r3, #0]
}
   1aae8:	46c0      	nop			; (mov r8, r8)
   1aaea:	46bd      	mov	sp, r7
   1aaec:	b002      	add	sp, #8
   1aaee:	bd80      	pop	{r7, pc}
   1aaf0:	20000768 	.word	0x20000768

0001aaf4 <getMotorState>:


bool getMotorState(void)
{
   1aaf4:	b580      	push	{r7, lr}
   1aaf6:	af00      	add	r7, sp, #0
	return mFeedback;
   1aaf8:	4b02      	ldr	r3, [pc, #8]	; (1ab04 <getMotorState+0x10>)
   1aafa:	781b      	ldrb	r3, [r3, #0]
   1aafc:	b2db      	uxtb	r3, r3
}
   1aafe:	0018      	movs	r0, r3
   1ab00:	46bd      	mov	sp, r7
   1ab02:	bd80      	pop	{r7, pc}
   1ab04:	20000736 	.word	0x20000736

0001ab08 <setMotorState>:

void setMotorState(bool state)
{
   1ab08:	b580      	push	{r7, lr}
   1ab0a:	b082      	sub	sp, #8
   1ab0c:	af00      	add	r7, sp, #0
   1ab0e:	0002      	movs	r2, r0
   1ab10:	1dfb      	adds	r3, r7, #7
   1ab12:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1ab14:	4b0a      	ldr	r3, [pc, #40]	; (1ab40 <setMotorState+0x38>)
   1ab16:	1dfa      	adds	r2, r7, #7
   1ab18:	7812      	ldrb	r2, [r2, #0]
   1ab1a:	701a      	strb	r2, [r3, #0]
	if (state)
   1ab1c:	1dfb      	adds	r3, r7, #7
   1ab1e:	781b      	ldrb	r3, [r3, #0]
   1ab20:	2b00      	cmp	r3, #0
   1ab22:	d004      	beq.n	1ab2e <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1ab24:	2100      	movs	r1, #0
   1ab26:	2005      	movs	r0, #5
   1ab28:	4b06      	ldr	r3, [pc, #24]	; (1ab44 <setMotorState+0x3c>)
   1ab2a:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1ab2c:	e003      	b.n	1ab36 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1ab2e:	2101      	movs	r1, #1
   1ab30:	2005      	movs	r0, #5
   1ab32:	4b04      	ldr	r3, [pc, #16]	; (1ab44 <setMotorState+0x3c>)
   1ab34:	4798      	blx	r3
}
   1ab36:	46c0      	nop			; (mov r8, r8)
   1ab38:	46bd      	mov	sp, r7
   1ab3a:	b002      	add	sp, #8
   1ab3c:	bd80      	pop	{r7, pc}
   1ab3e:	46c0      	nop			; (mov r8, r8)
   1ab40:	20000736 	.word	0x20000736
   1ab44:	00018f8d 	.word	0x00018f8d

0001ab48 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1ab48:	b590      	push	{r4, r7, lr}
   1ab4a:	b083      	sub	sp, #12
   1ab4c:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1ab4e:	1d3b      	adds	r3, r7, #4
   1ab50:	1d7a      	adds	r2, r7, #5
   1ab52:	1db9      	adds	r1, r7, #6
   1ab54:	1df8      	adds	r0, r7, #7
   1ab56:	4c06      	ldr	r4, [pc, #24]	; (1ab70 <getMotorState_from_pin+0x28>)
   1ab58:	47a0      	blx	r4
	setMotorState(p3);
   1ab5a:	1d7b      	adds	r3, r7, #5
   1ab5c:	781b      	ldrb	r3, [r3, #0]
   1ab5e:	0018      	movs	r0, r3
   1ab60:	4b04      	ldr	r3, [pc, #16]	; (1ab74 <getMotorState_from_pin+0x2c>)
   1ab62:	4798      	blx	r3
	return p3;
   1ab64:	1d7b      	adds	r3, r7, #5
   1ab66:	781b      	ldrb	r3, [r3, #0]
}
   1ab68:	0018      	movs	r0, r3
   1ab6a:	46bd      	mov	sp, r7
   1ab6c:	b003      	add	sp, #12
   1ab6e:	bd90      	pop	{r4, r7, pc}
   1ab70:	0001ab79 	.word	0x0001ab79
   1ab74:	0001ab09 	.word	0x0001ab09

0001ab78 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1ab78:	b590      	push	{r4, r7, lr}
   1ab7a:	b087      	sub	sp, #28
   1ab7c:	af00      	add	r7, sp, #0
   1ab7e:	60f8      	str	r0, [r7, #12]
   1ab80:	60b9      	str	r1, [r7, #8]
   1ab82:	607a      	str	r2, [r7, #4]
   1ab84:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
   1ab86:	4b3f      	ldr	r3, [pc, #252]	; (1ac84 <readSensorState+0x10c>)
   1ab88:	785b      	ldrb	r3, [r3, #1]
   1ab8a:	b2da      	uxtb	r2, r3
   1ab8c:	68fb      	ldr	r3, [r7, #12]
   1ab8e:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1ab90:	4b3c      	ldr	r3, [pc, #240]	; (1ac84 <readSensorState+0x10c>)
   1ab92:	781b      	ldrb	r3, [r3, #0]
   1ab94:	b2db      	uxtb	r3, r3
   1ab96:	2b02      	cmp	r3, #2
   1ab98:	d103      	bne.n	1aba2 <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1ab9a:	68bb      	ldr	r3, [r7, #8]
   1ab9c:	2201      	movs	r2, #1
   1ab9e:	701a      	strb	r2, [r3, #0]
   1aba0:	e002      	b.n	1aba8 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1aba2:	68bb      	ldr	r3, [r7, #8]
   1aba4:	2200      	movs	r2, #0
   1aba6:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1aba8:	4b37      	ldr	r3, [pc, #220]	; (1ac88 <readSensorState+0x110>)
   1abaa:	2225      	movs	r2, #37	; 0x25
   1abac:	5c9b      	ldrb	r3, [r3, r2]
   1abae:	2b00      	cmp	r3, #0
   1abb0:	d106      	bne.n	1abc0 <readSensorState+0x48>
	{
		*motor  = getMotorState();
   1abb2:	4b36      	ldr	r3, [pc, #216]	; (1ac8c <readSensorState+0x114>)
   1abb4:	4798      	blx	r3
   1abb6:	0003      	movs	r3, r0
   1abb8:	001a      	movs	r2, r3
   1abba:	687b      	ldr	r3, [r7, #4]
   1abbc:	701a      	strb	r2, [r3, #0]
   1abbe:	e030      	b.n	1ac22 <readSensorState+0xaa>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1abc0:	4b31      	ldr	r3, [pc, #196]	; (1ac88 <readSensorState+0x110>)
   1abc2:	2225      	movs	r2, #37	; 0x25
   1abc4:	5c9b      	ldrb	r3, [r3, r2]
   1abc6:	2b01      	cmp	r3, #1
   1abc8:	d106      	bne.n	1abd8 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
   1abca:	4b31      	ldr	r3, [pc, #196]	; (1ac90 <readSensorState+0x118>)
   1abcc:	4798      	blx	r3
   1abce:	0003      	movs	r3, r0
   1abd0:	001a      	movs	r2, r3
   1abd2:	687b      	ldr	r3, [r7, #4]
   1abd4:	701a      	strb	r2, [r3, #0]
   1abd6:	e024      	b.n	1ac22 <readSensorState+0xaa>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1abd8:	4b2b      	ldr	r3, [pc, #172]	; (1ac88 <readSensorState+0x110>)
   1abda:	2225      	movs	r2, #37	; 0x25
   1abdc:	5c9b      	ldrb	r3, [r3, r2]
   1abde:	2b02      	cmp	r3, #2
   1abe0:	d11f      	bne.n	1ac22 <readSensorState+0xaa>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1abe2:	202e      	movs	r0, #46	; 0x2e
   1abe4:	4b2b      	ldr	r3, [pc, #172]	; (1ac94 <readSensorState+0x11c>)
   1abe6:	4798      	blx	r3
   1abe8:	0003      	movs	r3, r0
   1abea:	1e5a      	subs	r2, r3, #1
   1abec:	4193      	sbcs	r3, r2
   1abee:	b2db      	uxtb	r3, r3
   1abf0:	2201      	movs	r2, #1
   1abf2:	4053      	eors	r3, r2
   1abf4:	b2db      	uxtb	r3, r3
   1abf6:	1c1a      	adds	r2, r3, #0
   1abf8:	2301      	movs	r3, #1
   1abfa:	4013      	ands	r3, r2
   1abfc:	b2da      	uxtb	r2, r3
   1abfe:	687b      	ldr	r3, [r7, #4]
   1ac00:	701a      	strb	r2, [r3, #0]
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1ac02:	202e      	movs	r0, #46	; 0x2e
   1ac04:	4b23      	ldr	r3, [pc, #140]	; (1ac94 <readSensorState+0x11c>)
   1ac06:	4798      	blx	r3
   1ac08:	0003      	movs	r3, r0
   1ac0a:	1e5a      	subs	r2, r3, #1
   1ac0c:	4193      	sbcs	r3, r2
   1ac0e:	b2db      	uxtb	r3, r3
   1ac10:	2201      	movs	r2, #1
   1ac12:	4053      	eors	r3, r2
   1ac14:	b2db      	uxtb	r3, r3
   1ac16:	1c1a      	adds	r2, r3, #0
   1ac18:	2301      	movs	r3, #1
   1ac1a:	4013      	ands	r3, r2
   1ac1c:	b2da      	uxtb	r2, r3
   1ac1e:	687b      	ldr	r3, [r7, #4]
   1ac20:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1ac22:	2317      	movs	r3, #23
   1ac24:	18fb      	adds	r3, r7, r3
   1ac26:	2201      	movs	r2, #1
   1ac28:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1ac2a:	2317      	movs	r3, #23
   1ac2c:	18fc      	adds	r4, r7, r3
   1ac2e:	4b1a      	ldr	r3, [pc, #104]	; (1ac98 <readSensorState+0x120>)
   1ac30:	2100      	movs	r1, #0
   1ac32:	0018      	movs	r0, r3
   1ac34:	4b19      	ldr	r3, [pc, #100]	; (1ac9c <readSensorState+0x124>)
   1ac36:	4798      	blx	r3
   1ac38:	0003      	movs	r3, r0
   1ac3a:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1ac3c:	23fa      	movs	r3, #250	; 0xfa
   1ac3e:	005b      	lsls	r3, r3, #1
   1ac40:	0018      	movs	r0, r3
   1ac42:	4b17      	ldr	r3, [pc, #92]	; (1aca0 <readSensorState+0x128>)
   1ac44:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1ac46:	2317      	movs	r3, #23
   1ac48:	18fc      	adds	r4, r7, r3
   1ac4a:	4b13      	ldr	r3, [pc, #76]	; (1ac98 <readSensorState+0x120>)
   1ac4c:	2100      	movs	r1, #0
   1ac4e:	0018      	movs	r0, r3
   1ac50:	4b12      	ldr	r3, [pc, #72]	; (1ac9c <readSensorState+0x124>)
   1ac52:	4798      	blx	r3
   1ac54:	0003      	movs	r3, r0
   1ac56:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1ac58:	2317      	movs	r3, #23
   1ac5a:	18fb      	adds	r3, r7, r3
   1ac5c:	781b      	ldrb	r3, [r3, #0]
   1ac5e:	2204      	movs	r2, #4
   1ac60:	4013      	ands	r3, r2
   1ac62:	d003      	beq.n	1ac6c <readSensorState+0xf4>
	{
		isACpowerAvailable = true;
   1ac64:	4b0f      	ldr	r3, [pc, #60]	; (1aca4 <readSensorState+0x12c>)
   1ac66:	2201      	movs	r2, #1
   1ac68:	701a      	strb	r2, [r3, #0]
   1ac6a:	e002      	b.n	1ac72 <readSensorState+0xfa>
	}
	else
	{
		isACpowerAvailable = false;
   1ac6c:	4b0d      	ldr	r3, [pc, #52]	; (1aca4 <readSensorState+0x12c>)
   1ac6e:	2200      	movs	r2, #0
   1ac70:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1ac72:	4b0c      	ldr	r3, [pc, #48]	; (1aca4 <readSensorState+0x12c>)
   1ac74:	781b      	ldrb	r3, [r3, #0]
   1ac76:	b2da      	uxtb	r2, r3
   1ac78:	683b      	ldr	r3, [r7, #0]
   1ac7a:	701a      	strb	r2, [r3, #0]
}
   1ac7c:	46c0      	nop			; (mov r8, r8)
   1ac7e:	46bd      	mov	sp, r7
   1ac80:	b007      	add	sp, #28
   1ac82:	bd90      	pop	{r4, r7, pc}
   1ac84:	2000073c 	.word	0x2000073c
   1ac88:	20000650 	.word	0x20000650
   1ac8c:	0001aaf5 	.word	0x0001aaf5
   1ac90:	0001aca9 	.word	0x0001aca9
   1ac94:	00018f49 	.word	0x00018f49
   1ac98:	20000888 	.word	0x20000888
   1ac9c:	00018a7d 	.word	0x00018a7d
   1aca0:	0001fee9 	.word	0x0001fee9
   1aca4:	20000781 	.word	0x20000781

0001aca8 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1aca8:	b580      	push	{r7, lr}
   1acaa:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1acac:	4b0e      	ldr	r3, [pc, #56]	; (1ace8 <checkMotorStatusUsingCurrent+0x40>)
   1acae:	781b      	ldrb	r3, [r3, #0]
   1acb0:	2b00      	cmp	r3, #0
   1acb2:	d00d      	beq.n	1acd0 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1acb4:	4b0d      	ldr	r3, [pc, #52]	; (1acec <checkMotorStatusUsingCurrent+0x44>)
   1acb6:	8a9b      	ldrh	r3, [r3, #20]
   1acb8:	b29a      	uxth	r2, r3
   1acba:	4b0d      	ldr	r3, [pc, #52]	; (1acf0 <checkMotorStatusUsingCurrent+0x48>)
   1acbc:	781b      	ldrb	r3, [r3, #0]
   1acbe:	085b      	lsrs	r3, r3, #1
   1acc0:	b2db      	uxtb	r3, r3
   1acc2:	b29b      	uxth	r3, r3
   1acc4:	429a      	cmp	r2, r3
   1acc6:	d801      	bhi.n	1accc <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1acc8:	2300      	movs	r3, #0
   1acca:	e009      	b.n	1ace0 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1accc:	2301      	movs	r3, #1
   1acce:	e007      	b.n	1ace0 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1acd0:	4b06      	ldr	r3, [pc, #24]	; (1acec <checkMotorStatusUsingCurrent+0x44>)
   1acd2:	8a9b      	ldrh	r3, [r3, #20]
   1acd4:	b29b      	uxth	r3, r3
   1acd6:	2b04      	cmp	r3, #4
   1acd8:	d901      	bls.n	1acde <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1acda:	2301      	movs	r3, #1
   1acdc:	e000      	b.n	1ace0 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1acde:	2300      	movs	r3, #0
		}
	}
}
   1ace0:	0018      	movs	r0, r3
   1ace2:	46bd      	mov	sp, r7
   1ace4:	bd80      	pop	{r7, pc}
   1ace6:	46c0      	nop			; (mov r8, r8)
   1ace8:	2000085c 	.word	0x2000085c
   1acec:	200006d8 	.word	0x200006d8
   1acf0:	200007f0 	.word	0x200007f0

0001acf4 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1acf4:	b5b0      	push	{r4, r5, r7, lr}
   1acf6:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1acf8:	4b07      	ldr	r3, [pc, #28]	; (1ad18 <detectMotorStateChangeUsingCurrent+0x24>)
   1acfa:	4798      	blx	r3
   1acfc:	0003      	movs	r3, r0
   1acfe:	001c      	movs	r4, r3
   1ad00:	4b06      	ldr	r3, [pc, #24]	; (1ad1c <detectMotorStateChangeUsingCurrent+0x28>)
   1ad02:	4798      	blx	r3
   1ad04:	0003      	movs	r3, r0
   1ad06:	429c      	cmp	r4, r3
   1ad08:	d001      	beq.n	1ad0e <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1ad0a:	2301      	movs	r3, #1
   1ad0c:	e000      	b.n	1ad10 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1ad0e:	2300      	movs	r3, #0
	}
}
   1ad10:	0018      	movs	r0, r3
   1ad12:	46bd      	mov	sp, r7
   1ad14:	bdb0      	pop	{r4, r5, r7, pc}
   1ad16:	46c0      	nop			; (mov r8, r8)
   1ad18:	0001aaf5 	.word	0x0001aaf5
   1ad1c:	0001aca9 	.word	0x0001aca9

0001ad20 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1ad20:	b5b0      	push	{r4, r5, r7, lr}
   1ad22:	b084      	sub	sp, #16
   1ad24:	af00      	add	r7, sp, #0
   1ad26:	0005      	movs	r5, r0
   1ad28:	000c      	movs	r4, r1
   1ad2a:	0010      	movs	r0, r2
   1ad2c:	0019      	movs	r1, r3
   1ad2e:	1dfb      	adds	r3, r7, #7
   1ad30:	1c2a      	adds	r2, r5, #0
   1ad32:	701a      	strb	r2, [r3, #0]
   1ad34:	1dbb      	adds	r3, r7, #6
   1ad36:	1c22      	adds	r2, r4, #0
   1ad38:	701a      	strb	r2, [r3, #0]
   1ad3a:	1d7b      	adds	r3, r7, #5
   1ad3c:	1c02      	adds	r2, r0, #0
   1ad3e:	701a      	strb	r2, [r3, #0]
   1ad40:	1d3b      	adds	r3, r7, #4
   1ad42:	1c0a      	adds	r2, r1, #0
   1ad44:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1ad46:	1dfb      	adds	r3, r7, #7
   1ad48:	781b      	ldrb	r3, [r3, #0]
   1ad4a:	0018      	movs	r0, r3
   1ad4c:	4b29      	ldr	r3, [pc, #164]	; (1adf4 <updateSensorState+0xd4>)
   1ad4e:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1ad50:	1dbb      	adds	r3, r7, #6
   1ad52:	781b      	ldrb	r3, [r3, #0]
   1ad54:	0018      	movs	r0, r3
   1ad56:	4b28      	ldr	r3, [pc, #160]	; (1adf8 <updateSensorState+0xd8>)
   1ad58:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1ad5a:	1d7b      	adds	r3, r7, #5
   1ad5c:	781b      	ldrb	r3, [r3, #0]
   1ad5e:	0018      	movs	r0, r3
   1ad60:	4b26      	ldr	r3, [pc, #152]	; (1adfc <updateSensorState+0xdc>)
   1ad62:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1ad64:	1d3b      	adds	r3, r7, #4
   1ad66:	781b      	ldrb	r3, [r3, #0]
   1ad68:	0018      	movs	r0, r3
   1ad6a:	4b25      	ldr	r3, [pc, #148]	; (1ae00 <updateSensorState+0xe0>)
   1ad6c:	4798      	blx	r3
	
	if(getAllPhaseState()==AC_3PH && getACPowerState())
   1ad6e:	4b25      	ldr	r3, [pc, #148]	; (1ae04 <updateSensorState+0xe4>)
   1ad70:	4798      	blx	r3
   1ad72:	0003      	movs	r3, r0
   1ad74:	2b03      	cmp	r3, #3
   1ad76:	d12e      	bne.n	1add6 <updateSensorState+0xb6>
   1ad78:	4b23      	ldr	r3, [pc, #140]	; (1ae08 <updateSensorState+0xe8>)
   1ad7a:	4798      	blx	r3
   1ad7c:	1e03      	subs	r3, r0, #0
   1ad7e:	d02a      	beq.n	1add6 <updateSensorState+0xb6>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1ad80:	230f      	movs	r3, #15
   1ad82:	18fb      	adds	r3, r7, r3
   1ad84:	2201      	movs	r2, #1
   1ad86:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1ad88:	4b20      	ldr	r3, [pc, #128]	; (1ae0c <updateSensorState+0xec>)
   1ad8a:	2224      	movs	r2, #36	; 0x24
   1ad8c:	5c9b      	ldrb	r3, [r3, r2]
   1ad8e:	2b00      	cmp	r3, #0
   1ad90:	d005      	beq.n	1ad9e <updateSensorState+0x7e>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1ad92:	230f      	movs	r3, #15
   1ad94:	18fc      	adds	r4, r7, r3
   1ad96:	4b1e      	ldr	r3, [pc, #120]	; (1ae10 <updateSensorState+0xf0>)
   1ad98:	4798      	blx	r3
   1ad9a:	0003      	movs	r3, r0
   1ad9c:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1ad9e:	230f      	movs	r3, #15
   1ada0:	18fb      	adds	r3, r7, r3
   1ada2:	781b      	ldrb	r3, [r3, #0]
   1ada4:	2b00      	cmp	r3, #0
   1ada6:	d004      	beq.n	1adb2 <updateSensorState+0x92>
		{
			THREEPHASE_OK_LED_ON;
   1ada8:	2100      	movs	r1, #0
   1adaa:	2027      	movs	r0, #39	; 0x27
   1adac:	4b19      	ldr	r3, [pc, #100]	; (1ae14 <updateSensorState+0xf4>)
   1adae:	4798      	blx	r3
   1adb0:	e003      	b.n	1adba <updateSensorState+0x9a>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1adb2:	2101      	movs	r1, #1
   1adb4:	2027      	movs	r0, #39	; 0x27
   1adb6:	4b17      	ldr	r3, [pc, #92]	; (1ae14 <updateSensorState+0xf4>)
   1adb8:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1adba:	4b14      	ldr	r3, [pc, #80]	; (1ae0c <updateSensorState+0xec>)
   1adbc:	785b      	ldrb	r3, [r3, #1]
   1adbe:	2b00      	cmp	r3, #0
   1adc0:	d004      	beq.n	1adcc <updateSensorState+0xac>
		{
			AUTO_ON_LED_ON;
   1adc2:	2100      	movs	r1, #0
   1adc4:	2028      	movs	r0, #40	; 0x28
   1adc6:	4b13      	ldr	r3, [pc, #76]	; (1ae14 <updateSensorState+0xf4>)
   1adc8:	4798      	blx	r3
	{
   1adca:	e00f      	b.n	1adec <updateSensorState+0xcc>
		}
		else
		{
			AUTO_ON_LED_OFF;
   1adcc:	2101      	movs	r1, #1
   1adce:	2028      	movs	r0, #40	; 0x28
   1add0:	4b10      	ldr	r3, [pc, #64]	; (1ae14 <updateSensorState+0xf4>)
   1add2:	4798      	blx	r3
	{
   1add4:	e00a      	b.n	1adec <updateSensorState+0xcc>
		}
	}
	else
	{
		THREEPHASE_OK_LED_OFF;
   1add6:	2101      	movs	r1, #1
   1add8:	2027      	movs	r0, #39	; 0x27
   1adda:	4b0e      	ldr	r3, [pc, #56]	; (1ae14 <updateSensorState+0xf4>)
   1addc:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1adde:	2101      	movs	r1, #1
   1ade0:	2028      	movs	r0, #40	; 0x28
   1ade2:	4b0c      	ldr	r3, [pc, #48]	; (1ae14 <updateSensorState+0xf4>)
   1ade4:	4798      	blx	r3
		startTimerOn=false;
   1ade6:	4b0c      	ldr	r3, [pc, #48]	; (1ae18 <updateSensorState+0xf8>)
   1ade8:	2200      	movs	r2, #0
   1adea:	701a      	strb	r2, [r3, #0]
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1adec:	46c0      	nop			; (mov r8, r8)
   1adee:	46bd      	mov	sp, r7
   1adf0:	b004      	add	sp, #16
   1adf2:	bdb0      	pop	{r4, r5, r7, pc}
   1adf4:	0001aaa1 	.word	0x0001aaa1
   1adf8:	0001aad5 	.word	0x0001aad5
   1adfc:	0001ab09 	.word	0x0001ab09
   1ae00:	0001aa6d 	.word	0x0001aa6d
   1ae04:	0001aa8d 	.word	0x0001aa8d
   1ae08:	0001aa59 	.word	0x0001aa59
   1ae0c:	20000650 	.word	0x20000650
   1ae10:	0001aac1 	.word	0x0001aac1
   1ae14:	00018f8d 	.word	0x00018f8d
   1ae18:	2000078e 	.word	0x2000078e

0001ae1c <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1ae1c:	b580      	push	{r7, lr}
   1ae1e:	b082      	sub	sp, #8
   1ae20:	af00      	add	r7, sp, #0
   1ae22:	0002      	movs	r2, r0
   1ae24:	1dfb      	adds	r3, r7, #7
   1ae26:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1ae28:	4b0e      	ldr	r3, [pc, #56]	; (1ae64 <resetAutoStart+0x48>)
   1ae2a:	785b      	ldrb	r3, [r3, #1]
   1ae2c:	2b00      	cmp	r3, #0
   1ae2e:	d107      	bne.n	1ae40 <resetAutoStart+0x24>
	{
		startTimerOn=false;
   1ae30:	4b0d      	ldr	r3, [pc, #52]	; (1ae68 <resetAutoStart+0x4c>)
   1ae32:	2200      	movs	r2, #0
   1ae34:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1ae36:	2101      	movs	r1, #1
   1ae38:	2028      	movs	r0, #40	; 0x28
   1ae3a:	4b0c      	ldr	r3, [pc, #48]	; (1ae6c <resetAutoStart+0x50>)
   1ae3c:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1ae3e:	e00d      	b.n	1ae5c <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1ae40:	4b08      	ldr	r3, [pc, #32]	; (1ae64 <resetAutoStart+0x48>)
   1ae42:	785b      	ldrb	r3, [r3, #1]
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	d009      	beq.n	1ae5c <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
   1ae48:	2100      	movs	r1, #0
   1ae4a:	2028      	movs	r0, #40	; 0x28
   1ae4c:	4b07      	ldr	r3, [pc, #28]	; (1ae6c <resetAutoStart+0x50>)
   1ae4e:	4798      	blx	r3
		if (setChange)
   1ae50:	1dfb      	adds	r3, r7, #7
   1ae52:	781b      	ldrb	r3, [r3, #0]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	d001      	beq.n	1ae5c <resetAutoStart+0x40>
			triggerAutoStart();
   1ae58:	4b05      	ldr	r3, [pc, #20]	; (1ae70 <resetAutoStart+0x54>)
   1ae5a:	4798      	blx	r3
}
   1ae5c:	46c0      	nop			; (mov r8, r8)
   1ae5e:	46bd      	mov	sp, r7
   1ae60:	b002      	add	sp, #8
   1ae62:	bd80      	pop	{r7, pc}
   1ae64:	20000650 	.word	0x20000650
   1ae68:	2000078e 	.word	0x2000078e
   1ae6c:	00018f8d 	.word	0x00018f8d
   1ae70:	0001ae75 	.word	0x0001ae75

0001ae74 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1ae74:	b580      	push	{r7, lr}
   1ae76:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1ae78:	4b0d      	ldr	r3, [pc, #52]	; (1aeb0 <triggerAutoStart+0x3c>)
   1ae7a:	4798      	blx	r3
   1ae7c:	0003      	movs	r3, r0
   1ae7e:	001a      	movs	r2, r3
   1ae80:	2301      	movs	r3, #1
   1ae82:	4053      	eors	r3, r2
   1ae84:	b2db      	uxtb	r3, r3
   1ae86:	2b00      	cmp	r3, #0
   1ae88:	d00f      	beq.n	1aeaa <triggerAutoStart+0x36>
	{
		if (getAllPhaseState() && getACPowerState())
   1ae8a:	4b0a      	ldr	r3, [pc, #40]	; (1aeb4 <triggerAutoStart+0x40>)
   1ae8c:	4798      	blx	r3
   1ae8e:	1e03      	subs	r3, r0, #0
   1ae90:	d00b      	beq.n	1aeaa <triggerAutoStart+0x36>
   1ae92:	4b09      	ldr	r3, [pc, #36]	; (1aeb8 <triggerAutoStart+0x44>)
   1ae94:	4798      	blx	r3
   1ae96:	1e03      	subs	r3, r0, #0
   1ae98:	d007      	beq.n	1aeaa <triggerAutoStart+0x36>
		{
			startTimerOn = true;
   1ae9a:	4b08      	ldr	r3, [pc, #32]	; (1aebc <triggerAutoStart+0x48>)
   1ae9c:	2201      	movs	r2, #1
   1ae9e:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1aea0:	4b07      	ldr	r3, [pc, #28]	; (1aec0 <triggerAutoStart+0x4c>)
   1aea2:	4798      	blx	r3
   1aea4:	0002      	movs	r2, r0
   1aea6:	4b07      	ldr	r3, [pc, #28]	; (1aec4 <triggerAutoStart+0x50>)
   1aea8:	601a      	str	r2, [r3, #0]
		}
	}
}
   1aeaa:	46c0      	nop			; (mov r8, r8)
   1aeac:	46bd      	mov	sp, r7
   1aeae:	bd80      	pop	{r7, pc}
   1aeb0:	0001aaf5 	.word	0x0001aaf5
   1aeb4:	0001aa8d 	.word	0x0001aa8d
   1aeb8:	0001aa59 	.word	0x0001aa59
   1aebc:	2000078e 	.word	0x2000078e
   1aec0:	0002024d 	.word	0x0002024d
   1aec4:	20000794 	.word	0x20000794

0001aec8 <operateOnEvent>:

void operateOnEvent(void)
{
   1aec8:	b590      	push	{r4, r7, lr}
   1aeca:	b083      	sub	sp, #12
   1aecc:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1aece:	1d3b      	adds	r3, r7, #4
   1aed0:	1d7a      	adds	r2, r7, #5
   1aed2:	1db9      	adds	r1, r7, #6
   1aed4:	1df8      	adds	r0, r7, #7
   1aed6:	4c67      	ldr	r4, [pc, #412]	; (1b074 <operateOnEvent+0x1ac>)
   1aed8:	47a0      	blx	r4
	eventOccured = false;
   1aeda:	4b67      	ldr	r3, [pc, #412]	; (1b078 <operateOnEvent+0x1b0>)
   1aedc:	2200      	movs	r2, #0
   1aede:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
   1aee0:	4b66      	ldr	r3, [pc, #408]	; (1b07c <operateOnEvent+0x1b4>)
   1aee2:	4798      	blx	r3
   1aee4:	0003      	movs	r3, r0
   1aee6:	001a      	movs	r2, r3
   1aee8:	1dfb      	adds	r3, r7, #7
   1aeea:	781b      	ldrb	r3, [r3, #0]
   1aeec:	429a      	cmp	r2, r3
   1aeee:	d110      	bne.n	1af12 <operateOnEvent+0x4a>
   1aef0:	4b63      	ldr	r3, [pc, #396]	; (1b080 <operateOnEvent+0x1b8>)
   1aef2:	4798      	blx	r3
   1aef4:	0003      	movs	r3, r0
   1aef6:	001a      	movs	r2, r3
   1aef8:	1d7b      	adds	r3, r7, #5
   1aefa:	781b      	ldrb	r3, [r3, #0]
   1aefc:	429a      	cmp	r2, r3
   1aefe:	d108      	bne.n	1af12 <operateOnEvent+0x4a>
   1af00:	4b60      	ldr	r3, [pc, #384]	; (1b084 <operateOnEvent+0x1bc>)
   1af02:	4798      	blx	r3
   1af04:	0003      	movs	r3, r0
   1af06:	001a      	movs	r2, r3
   1af08:	1d3b      	adds	r3, r7, #4
   1af0a:	781b      	ldrb	r3, [r3, #0]
   1af0c:	429a      	cmp	r2, r3
   1af0e:	d100      	bne.n	1af12 <operateOnEvent+0x4a>
   1af10:	e0ab      	b.n	1b06a <operateOnEvent+0x1a2>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1af12:	4b5b      	ldr	r3, [pc, #364]	; (1b080 <operateOnEvent+0x1b8>)
   1af14:	4798      	blx	r3
   1af16:	1e03      	subs	r3, r0, #0
   1af18:	d100      	bne.n	1af1c <operateOnEvent+0x54>
   1af1a:	e066      	b.n	1afea <operateOnEvent+0x122>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1af1c:	1dfb      	adds	r3, r7, #7
   1af1e:	781b      	ldrb	r3, [r3, #0]
   1af20:	2b00      	cmp	r3, #0
   1af22:	d11e      	bne.n	1af62 <operateOnEvent+0x9a>
   1af24:	1d7b      	adds	r3, r7, #5
   1af26:	781b      	ldrb	r3, [r3, #0]
   1af28:	2201      	movs	r2, #1
   1af2a:	4053      	eors	r3, r2
   1af2c:	b2db      	uxtb	r3, r3
   1af2e:	2b00      	cmp	r3, #0
   1af30:	d017      	beq.n	1af62 <operateOnEvent+0x9a>
   1af32:	1d3b      	adds	r3, r7, #4
   1af34:	781b      	ldrb	r3, [r3, #0]
   1af36:	2201      	movs	r2, #1
   1af38:	4053      	eors	r3, r2
   1af3a:	b2db      	uxtb	r3, r3
   1af3c:	2b00      	cmp	r3, #0
   1af3e:	d010      	beq.n	1af62 <operateOnEvent+0x9a>
		{
			stopMotor(false,true,false);
   1af40:	2200      	movs	r2, #0
   1af42:	2101      	movs	r1, #1
   1af44:	2000      	movs	r0, #0
   1af46:	4b50      	ldr	r3, [pc, #320]	; (1b088 <operateOnEvent+0x1c0>)
   1af48:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1af4a:	2101      	movs	r1, #1
   1af4c:	2027      	movs	r0, #39	; 0x27
   1af4e:	4b4f      	ldr	r3, [pc, #316]	; (1b08c <operateOnEvent+0x1c4>)
   1af50:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1af52:	2043      	movs	r0, #67	; 0x43
   1af54:	4b4e      	ldr	r3, [pc, #312]	; (1b090 <operateOnEvent+0x1c8>)
   1af56:	4798      	blx	r3
   1af58:	0003      	movs	r3, r0
   1af5a:	001a      	movs	r2, r3
   1af5c:	4b4d      	ldr	r3, [pc, #308]	; (1b094 <operateOnEvent+0x1cc>)
   1af5e:	719a      	strb	r2, [r3, #6]
   1af60:	e078      	b.n	1b054 <operateOnEvent+0x18c>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
   1af62:	1d3b      	adds	r3, r7, #4
   1af64:	781b      	ldrb	r3, [r3, #0]
   1af66:	2b00      	cmp	r3, #0
   1af68:	d029      	beq.n	1afbe <operateOnEvent+0xf6>
   1af6a:	4b46      	ldr	r3, [pc, #280]	; (1b084 <operateOnEvent+0x1bc>)
   1af6c:	4798      	blx	r3
   1af6e:	1e03      	subs	r3, r0, #0
   1af70:	d025      	beq.n	1afbe <operateOnEvent+0xf6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1af72:	4b49      	ldr	r3, [pc, #292]	; (1b098 <operateOnEvent+0x1d0>)
   1af74:	2220      	movs	r2, #32
   1af76:	5c9b      	ldrb	r3, [r3, r2]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
   1af78:	2b00      	cmp	r3, #0
   1af7a:	d008      	beq.n	1af8e <operateOnEvent+0xc6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1af7c:	1dfb      	adds	r3, r7, #7
   1af7e:	781b      	ldrb	r3, [r3, #0]
   1af80:	2b03      	cmp	r3, #3
   1af82:	d104      	bne.n	1af8e <operateOnEvent+0xc6>
   1af84:	4b3d      	ldr	r3, [pc, #244]	; (1b07c <operateOnEvent+0x1b4>)
   1af86:	4798      	blx	r3
   1af88:	0003      	movs	r3, r0
   1af8a:	2b03      	cmp	r3, #3
   1af8c:	d00d      	beq.n	1afaa <operateOnEvent+0xe2>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1af8e:	4b42      	ldr	r3, [pc, #264]	; (1b098 <operateOnEvent+0x1d0>)
   1af90:	2220      	movs	r2, #32
   1af92:	5c9b      	ldrb	r3, [r3, r2]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1af94:	2b00      	cmp	r3, #0
   1af96:	d112      	bne.n	1afbe <operateOnEvent+0xf6>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1af98:	1dfb      	adds	r3, r7, #7
   1af9a:	781b      	ldrb	r3, [r3, #0]
   1af9c:	2b01      	cmp	r3, #1
   1af9e:	d90e      	bls.n	1afbe <operateOnEvent+0xf6>
   1afa0:	4b36      	ldr	r3, [pc, #216]	; (1b07c <operateOnEvent+0x1b4>)
   1afa2:	4798      	blx	r3
   1afa4:	0003      	movs	r3, r0
   1afa6:	2b01      	cmp	r3, #1
   1afa8:	d909      	bls.n	1afbe <operateOnEvent+0xf6>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1afaa:	1d7b      	adds	r3, r7, #5
   1afac:	781b      	ldrb	r3, [r3, #0]
   1afae:	2201      	movs	r2, #1
   1afb0:	4053      	eors	r3, r2
   1afb2:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1afb4:	2b00      	cmp	r3, #0
   1afb6:	d002      	beq.n	1afbe <operateOnEvent+0xf6>
		{
			unknownMotorOff();
   1afb8:	4b38      	ldr	r3, [pc, #224]	; (1b09c <operateOnEvent+0x1d4>)
   1afba:	4798      	blx	r3
   1afbc:	e04a      	b.n	1b054 <operateOnEvent+0x18c>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1afbe:	4b36      	ldr	r3, [pc, #216]	; (1b098 <operateOnEvent+0x1d0>)
   1afc0:	2220      	movs	r2, #32
   1afc2:	5c9b      	ldrb	r3, [r3, r2]
   1afc4:	2b00      	cmp	r3, #0
   1afc6:	d045      	beq.n	1b054 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
   1afc8:	1dfb      	adds	r3, r7, #7
   1afca:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1afcc:	2b02      	cmp	r3, #2
   1afce:	d141      	bne.n	1b054 <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
   1afd0:	1d3b      	adds	r3, r7, #4
   1afd2:	781b      	ldrb	r3, [r3, #0]
   1afd4:	2b00      	cmp	r3, #0
   1afd6:	d03d      	beq.n	1b054 <operateOnEvent+0x18c>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1afd8:	4b31      	ldr	r3, [pc, #196]	; (1b0a0 <operateOnEvent+0x1d8>)
   1afda:	4798      	blx	r3
   1afdc:	0002      	movs	r2, r0
   1afde:	4b31      	ldr	r3, [pc, #196]	; (1b0a4 <operateOnEvent+0x1dc>)
   1afe0:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1afe2:	4b31      	ldr	r3, [pc, #196]	; (1b0a8 <operateOnEvent+0x1e0>)
   1afe4:	2201      	movs	r2, #1
   1afe6:	701a      	strb	r2, [r3, #0]
   1afe8:	e034      	b.n	1b054 <operateOnEvent+0x18c>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1afea:	1d7b      	adds	r3, r7, #5
   1afec:	781b      	ldrb	r3, [r3, #0]
   1afee:	2b00      	cmp	r3, #0
   1aff0:	d028      	beq.n	1b044 <operateOnEvent+0x17c>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1aff2:	1dfb      	adds	r3, r7, #7
   1aff4:	781b      	ldrb	r3, [r3, #0]
   1aff6:	2b03      	cmp	r3, #3
   1aff8:	d11e      	bne.n	1b038 <operateOnEvent+0x170>
   1affa:	1dbb      	adds	r3, r7, #6
   1affc:	781b      	ldrb	r3, [r3, #0]
   1affe:	2b00      	cmp	r3, #0
   1b000:	d01a      	beq.n	1b038 <operateOnEvent+0x170>
   1b002:	1d3b      	adds	r3, r7, #4
   1b004:	781b      	ldrb	r3, [r3, #0]
   1b006:	2b00      	cmp	r3, #0
   1b008:	d016      	beq.n	1b038 <operateOnEvent+0x170>
			{
				if (startTimerOn)
   1b00a:	4b28      	ldr	r3, [pc, #160]	; (1b0ac <operateOnEvent+0x1e4>)
   1b00c:	781b      	ldrb	r3, [r3, #0]
   1b00e:	2b00      	cmp	r3, #0
   1b010:	d002      	beq.n	1b018 <operateOnEvent+0x150>
				{
					startTimerOn = false;
   1b012:	4b26      	ldr	r3, [pc, #152]	; (1b0ac <operateOnEvent+0x1e4>)
   1b014:	2200      	movs	r2, #0
   1b016:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1b018:	2100      	movs	r1, #0
   1b01a:	2027      	movs	r0, #39	; 0x27
   1b01c:	4b1b      	ldr	r3, [pc, #108]	; (1b08c <operateOnEvent+0x1c4>)
   1b01e:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1b020:	2053      	movs	r0, #83	; 0x53
   1b022:	4b1b      	ldr	r3, [pc, #108]	; (1b090 <operateOnEvent+0x1c8>)
   1b024:	4798      	blx	r3
   1b026:	0003      	movs	r3, r0
   1b028:	001a      	movs	r2, r3
   1b02a:	4b1a      	ldr	r3, [pc, #104]	; (1b094 <operateOnEvent+0x1cc>)
   1b02c:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1b02e:	2101      	movs	r1, #1
   1b030:	2001      	movs	r0, #1
   1b032:	4b1f      	ldr	r3, [pc, #124]	; (1b0b0 <operateOnEvent+0x1e8>)
   1b034:	4798      	blx	r3
   1b036:	e00d      	b.n	1b054 <operateOnEvent+0x18c>
			}
			else
			{
				stopMotor(false,true,false);
   1b038:	2200      	movs	r2, #0
   1b03a:	2101      	movs	r1, #1
   1b03c:	2000      	movs	r0, #0
   1b03e:	4b12      	ldr	r3, [pc, #72]	; (1b088 <operateOnEvent+0x1c0>)
   1b040:	4798      	blx	r3
   1b042:	e007      	b.n	1b054 <operateOnEvent+0x18c>
			}
		}
		else
		{
			waitStableLineOn = true;
   1b044:	4b1b      	ldr	r3, [pc, #108]	; (1b0b4 <operateOnEvent+0x1ec>)
   1b046:	2201      	movs	r2, #1
   1b048:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1b04a:	4b15      	ldr	r3, [pc, #84]	; (1b0a0 <operateOnEvent+0x1d8>)
   1b04c:	4798      	blx	r3
   1b04e:	0002      	movs	r2, r0
   1b050:	4b19      	ldr	r3, [pc, #100]	; (1b0b8 <operateOnEvent+0x1f0>)
   1b052:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1b054:	1dfb      	adds	r3, r7, #7
   1b056:	7818      	ldrb	r0, [r3, #0]
   1b058:	1dbb      	adds	r3, r7, #6
   1b05a:	7819      	ldrb	r1, [r3, #0]
   1b05c:	1d7b      	adds	r3, r7, #5
   1b05e:	781a      	ldrb	r2, [r3, #0]
   1b060:	1d3b      	adds	r3, r7, #4
   1b062:	781b      	ldrb	r3, [r3, #0]
   1b064:	4c15      	ldr	r4, [pc, #84]	; (1b0bc <operateOnEvent+0x1f4>)
   1b066:	47a0      	blx	r4
   1b068:	e000      	b.n	1b06c <operateOnEvent+0x1a4>
		return;
   1b06a:	46c0      	nop			; (mov r8, r8)
}
   1b06c:	46bd      	mov	sp, r7
   1b06e:	b003      	add	sp, #12
   1b070:	bd90      	pop	{r4, r7, pc}
   1b072:	46c0      	nop			; (mov r8, r8)
   1b074:	0001ab79 	.word	0x0001ab79
   1b078:	2000071e 	.word	0x2000071e
   1b07c:	0001aa8d 	.word	0x0001aa8d
   1b080:	0001aaf5 	.word	0x0001aaf5
   1b084:	0001aa59 	.word	0x0001aa59
   1b088:	0001b439 	.word	0x0001b439
   1b08c:	00018f8d 	.word	0x00018f8d
   1b090:	00014931 	.word	0x00014931
   1b094:	20000708 	.word	0x20000708
   1b098:	20000650 	.word	0x20000650
   1b09c:	0001b561 	.word	0x0001b561
   1b0a0:	0002024d 	.word	0x0002024d
   1b0a4:	2000076c 	.word	0x2000076c
   1b0a8:	20000785 	.word	0x20000785
   1b0ac:	2000078e 	.word	0x2000078e
   1b0b0:	0001b251 	.word	0x0001b251
   1b0b4:	20000809 	.word	0x20000809
   1b0b8:	200007c4 	.word	0x200007c4
   1b0bc:	0001ad21 	.word	0x0001ad21

0001b0c0 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1b0c0:	b580      	push	{r7, lr}
   1b0c2:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1b0c4:	4b02      	ldr	r3, [pc, #8]	; (1b0d0 <checkLineSensors+0x10>)
   1b0c6:	785b      	ldrb	r3, [r3, #1]
   1b0c8:	b2db      	uxtb	r3, r3
}
   1b0ca:	0018      	movs	r0, r3
   1b0cc:	46bd      	mov	sp, r7
   1b0ce:	bd80      	pop	{r7, pc}
   1b0d0:	2000073c 	.word	0x2000073c

0001b0d4 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1b0d4:	b590      	push	{r4, r7, lr}
   1b0d6:	b083      	sub	sp, #12
   1b0d8:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1b0da:	4b41      	ldr	r3, [pc, #260]	; (1b1e0 <operateOnStableLine+0x10c>)
   1b0dc:	2200      	movs	r2, #0
   1b0de:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1b0e0:	1dbc      	adds	r4, r7, #6
   1b0e2:	4b40      	ldr	r3, [pc, #256]	; (1b1e4 <operateOnStableLine+0x110>)
   1b0e4:	4798      	blx	r3
   1b0e6:	0003      	movs	r3, r0
   1b0e8:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1b0ea:	1dbb      	adds	r3, r7, #6
   1b0ec:	781b      	ldrb	r3, [r3, #0]
   1b0ee:	2b03      	cmp	r3, #3
   1b0f0:	d133      	bne.n	1b15a <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1b0f2:	1dfb      	adds	r3, r7, #7
   1b0f4:	2201      	movs	r2, #1
   1b0f6:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1b0f8:	4b3b      	ldr	r3, [pc, #236]	; (1b1e8 <operateOnStableLine+0x114>)
   1b0fa:	2224      	movs	r2, #36	; 0x24
   1b0fc:	5c9b      	ldrb	r3, [r3, r2]
   1b0fe:	2b00      	cmp	r3, #0
   1b100:	d004      	beq.n	1b10c <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1b102:	1dfc      	adds	r4, r7, #7
   1b104:	4b39      	ldr	r3, [pc, #228]	; (1b1ec <operateOnStableLine+0x118>)
   1b106:	4798      	blx	r3
   1b108:	0003      	movs	r3, r0
   1b10a:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1b10c:	1dfb      	adds	r3, r7, #7
   1b10e:	781b      	ldrb	r3, [r3, #0]
   1b110:	2b00      	cmp	r3, #0
   1b112:	d016      	beq.n	1b142 <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
   1b114:	2100      	movs	r1, #0
   1b116:	2027      	movs	r0, #39	; 0x27
   1b118:	4b35      	ldr	r3, [pc, #212]	; (1b1f0 <operateOnStableLine+0x11c>)
   1b11a:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1b11c:	4b32      	ldr	r3, [pc, #200]	; (1b1e8 <operateOnStableLine+0x114>)
   1b11e:	785b      	ldrb	r3, [r3, #1]
   1b120:	2b00      	cmp	r3, #0
   1b122:	d002      	beq.n	1b12a <operateOnStableLine+0x56>
			{
				triggerAutoStart();
   1b124:	4b33      	ldr	r3, [pc, #204]	; (1b1f4 <operateOnStableLine+0x120>)
   1b126:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1b128:	e055      	b.n	1b1d6 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1b12a:	4b2f      	ldr	r3, [pc, #188]	; (1b1e8 <operateOnStableLine+0x114>)
   1b12c:	791b      	ldrb	r3, [r3, #4]
   1b12e:	2b4c      	cmp	r3, #76	; 0x4c
   1b130:	d051      	beq.n	1b1d6 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1b132:	2047      	movs	r0, #71	; 0x47
   1b134:	4b30      	ldr	r3, [pc, #192]	; (1b1f8 <operateOnStableLine+0x124>)
   1b136:	4798      	blx	r3
   1b138:	0003      	movs	r3, r0
   1b13a:	001a      	movs	r2, r3
   1b13c:	4b2f      	ldr	r3, [pc, #188]	; (1b1fc <operateOnStableLine+0x128>)
   1b13e:	711a      	strb	r2, [r3, #4]
}
   1b140:	e049      	b.n	1b1d6 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
   1b142:	2101      	movs	r1, #1
   1b144:	2027      	movs	r0, #39	; 0x27
   1b146:	4b2a      	ldr	r3, [pc, #168]	; (1b1f0 <operateOnStableLine+0x11c>)
   1b148:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1b14a:	2041      	movs	r0, #65	; 0x41
   1b14c:	4b2a      	ldr	r3, [pc, #168]	; (1b1f8 <operateOnStableLine+0x124>)
   1b14e:	4798      	blx	r3
   1b150:	0003      	movs	r3, r0
   1b152:	001a      	movs	r2, r3
   1b154:	4b29      	ldr	r3, [pc, #164]	; (1b1fc <operateOnStableLine+0x128>)
   1b156:	725a      	strb	r2, [r3, #9]
}
   1b158:	e03d      	b.n	1b1d6 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1b15a:	1dbb      	adds	r3, r7, #6
   1b15c:	781b      	ldrb	r3, [r3, #0]
   1b15e:	2b02      	cmp	r3, #2
   1b160:	d114      	bne.n	1b18c <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
   1b162:	2101      	movs	r1, #1
   1b164:	2027      	movs	r0, #39	; 0x27
   1b166:	4b22      	ldr	r3, [pc, #136]	; (1b1f0 <operateOnStableLine+0x11c>)
   1b168:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b16a:	4b1f      	ldr	r3, [pc, #124]	; (1b1e8 <operateOnStableLine+0x114>)
   1b16c:	791b      	ldrb	r3, [r3, #4]
   1b16e:	2b4f      	cmp	r3, #79	; 0x4f
   1b170:	d131      	bne.n	1b1d6 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1b172:	4b1d      	ldr	r3, [pc, #116]	; (1b1e8 <operateOnStableLine+0x114>)
   1b174:	2220      	movs	r2, #32
   1b176:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b178:	2b00      	cmp	r3, #0
   1b17a:	d12c      	bne.n	1b1d6 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1b17c:	2041      	movs	r0, #65	; 0x41
   1b17e:	4b1e      	ldr	r3, [pc, #120]	; (1b1f8 <operateOnStableLine+0x124>)
   1b180:	4798      	blx	r3
   1b182:	0003      	movs	r3, r0
   1b184:	001a      	movs	r2, r3
   1b186:	4b1d      	ldr	r3, [pc, #116]	; (1b1fc <operateOnStableLine+0x128>)
   1b188:	725a      	strb	r2, [r3, #9]
}
   1b18a:	e024      	b.n	1b1d6 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1b18c:	1dbb      	adds	r3, r7, #6
   1b18e:	781b      	ldrb	r3, [r3, #0]
   1b190:	2b00      	cmp	r3, #0
   1b192:	d120      	bne.n	1b1d6 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
   1b194:	2101      	movs	r1, #1
   1b196:	2027      	movs	r0, #39	; 0x27
   1b198:	4b15      	ldr	r3, [pc, #84]	; (1b1f0 <operateOnStableLine+0x11c>)
   1b19a:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b19c:	4b12      	ldr	r3, [pc, #72]	; (1b1e8 <operateOnStableLine+0x114>)
   1b19e:	791b      	ldrb	r3, [r3, #4]
   1b1a0:	2b4f      	cmp	r3, #79	; 0x4f
   1b1a2:	d011      	beq.n	1b1c8 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b1a4:	4b16      	ldr	r3, [pc, #88]	; (1b200 <operateOnStableLine+0x12c>)
   1b1a6:	781b      	ldrb	r3, [r3, #0]
   1b1a8:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b1aa:	2b02      	cmp	r3, #2
   1b1ac:	d103      	bne.n	1b1b6 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b1ae:	4b0e      	ldr	r3, [pc, #56]	; (1b1e8 <operateOnStableLine+0x114>)
   1b1b0:	791b      	ldrb	r3, [r3, #4]
   1b1b2:	2b4f      	cmp	r3, #79	; 0x4f
   1b1b4:	d008      	beq.n	1b1c8 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b1b6:	4b12      	ldr	r3, [pc, #72]	; (1b200 <operateOnStableLine+0x12c>)
   1b1b8:	781b      	ldrb	r3, [r3, #0]
   1b1ba:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b1bc:	2b03      	cmp	r3, #3
   1b1be:	d10a      	bne.n	1b1d6 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b1c0:	4b09      	ldr	r3, [pc, #36]	; (1b1e8 <operateOnStableLine+0x114>)
   1b1c2:	791b      	ldrb	r3, [r3, #4]
   1b1c4:	2b4c      	cmp	r3, #76	; 0x4c
   1b1c6:	d006      	beq.n	1b1d6 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1b1c8:	204c      	movs	r0, #76	; 0x4c
   1b1ca:	4b0b      	ldr	r3, [pc, #44]	; (1b1f8 <operateOnStableLine+0x124>)
   1b1cc:	4798      	blx	r3
   1b1ce:	0003      	movs	r3, r0
   1b1d0:	001a      	movs	r2, r3
   1b1d2:	4b0a      	ldr	r3, [pc, #40]	; (1b1fc <operateOnStableLine+0x128>)
   1b1d4:	715a      	strb	r2, [r3, #5]
}
   1b1d6:	46c0      	nop			; (mov r8, r8)
   1b1d8:	46bd      	mov	sp, r7
   1b1da:	b003      	add	sp, #12
   1b1dc:	bd90      	pop	{r4, r7, pc}
   1b1de:	46c0      	nop			; (mov r8, r8)
   1b1e0:	20000809 	.word	0x20000809
   1b1e4:	0001b0c1 	.word	0x0001b0c1
   1b1e8:	20000650 	.word	0x20000650
   1b1ec:	0001aac1 	.word	0x0001aac1
   1b1f0:	00018f8d 	.word	0x00018f8d
   1b1f4:	0001ae75 	.word	0x0001ae75
   1b1f8:	00014931 	.word	0x00014931
   1b1fc:	20000708 	.word	0x20000708
   1b200:	2000071b 	.word	0x2000071b

0001b204 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1b204:	b580      	push	{r7, lr}
   1b206:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1b208:	4b0d      	ldr	r3, [pc, #52]	; (1b240 <waitStableLineOver+0x3c>)
   1b20a:	781b      	ldrb	r3, [r3, #0]
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d00e      	beq.n	1b22e <waitStableLineOver+0x2a>
   1b210:	4b0c      	ldr	r3, [pc, #48]	; (1b244 <waitStableLineOver+0x40>)
   1b212:	4798      	blx	r3
   1b214:	0002      	movs	r2, r0
   1b216:	4b0c      	ldr	r3, [pc, #48]	; (1b248 <waitStableLineOver+0x44>)
   1b218:	681b      	ldr	r3, [r3, #0]
   1b21a:	1ad3      	subs	r3, r2, r3
   1b21c:	4a0b      	ldr	r2, [pc, #44]	; (1b24c <waitStableLineOver+0x48>)
   1b21e:	7812      	ldrb	r2, [r2, #0]
   1b220:	0011      	movs	r1, r2
   1b222:	2264      	movs	r2, #100	; 0x64
   1b224:	434a      	muls	r2, r1
   1b226:	4293      	cmp	r3, r2
   1b228:	d301      	bcc.n	1b22e <waitStableLineOver+0x2a>
   1b22a:	2301      	movs	r3, #1
   1b22c:	e000      	b.n	1b230 <waitStableLineOver+0x2c>
   1b22e:	2300      	movs	r3, #0
   1b230:	1c1a      	adds	r2, r3, #0
   1b232:	2301      	movs	r3, #1
   1b234:	4013      	ands	r3, r2
   1b236:	b2db      	uxtb	r3, r3
}
   1b238:	0018      	movs	r0, r3
   1b23a:	46bd      	mov	sp, r7
   1b23c:	bd80      	pop	{r7, pc}
   1b23e:	46c0      	nop			; (mov r8, r8)
   1b240:	20000809 	.word	0x20000809
   1b244:	0002024d 	.word	0x0002024d
   1b248:	200007c4 	.word	0x200007c4
   1b24c:	200007d5 	.word	0x200007d5

0001b250 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1b250:	b580      	push	{r7, lr}
   1b252:	b082      	sub	sp, #8
   1b254:	af00      	add	r7, sp, #0
   1b256:	0002      	movs	r2, r0
   1b258:	1dfb      	adds	r3, r7, #7
   1b25a:	701a      	strb	r2, [r3, #0]
   1b25c:	1dbb      	adds	r3, r7, #6
   1b25e:	1c0a      	adds	r2, r1, #0
   1b260:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1b262:	4b5e      	ldr	r3, [pc, #376]	; (1b3dc <startMotor+0x18c>)
   1b264:	2200      	movs	r2, #0
   1b266:	701a      	strb	r2, [r3, #0]
	
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
   1b268:	1dbb      	adds	r3, r7, #6
   1b26a:	781b      	ldrb	r3, [r3, #0]
   1b26c:	2b00      	cmp	r3, #0
   1b26e:	d124      	bne.n	1b2ba <startMotor+0x6a>
   1b270:	4b5b      	ldr	r3, [pc, #364]	; (1b3e0 <startMotor+0x190>)
   1b272:	4798      	blx	r3
   1b274:	1e03      	subs	r3, r0, #0
   1b276:	d100      	bne.n	1b27a <startMotor+0x2a>
   1b278:	e09c      	b.n	1b3b4 <startMotor+0x164>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b27a:	4b5a      	ldr	r3, [pc, #360]	; (1b3e4 <startMotor+0x194>)
   1b27c:	4798      	blx	r3
   1b27e:	0003      	movs	r3, r0
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
   1b280:	2b03      	cmp	r3, #3
   1b282:	d00b      	beq.n	1b29c <startMotor+0x4c>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b284:	4b57      	ldr	r3, [pc, #348]	; (1b3e4 <startMotor+0x194>)
   1b286:	4798      	blx	r3
   1b288:	0003      	movs	r3, r0
   1b28a:	2b02      	cmp	r3, #2
   1b28c:	d000      	beq.n	1b290 <startMotor+0x40>
   1b28e:	e091      	b.n	1b3b4 <startMotor+0x164>
   1b290:	4b55      	ldr	r3, [pc, #340]	; (1b3e8 <startMotor+0x198>)
   1b292:	2220      	movs	r2, #32
   1b294:	5c9b      	ldrb	r3, [r3, r2]
   1b296:	2b00      	cmp	r3, #0
   1b298:	d000      	beq.n	1b29c <startMotor+0x4c>
   1b29a:	e08b      	b.n	1b3b4 <startMotor+0x164>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b29c:	4b52      	ldr	r3, [pc, #328]	; (1b3e8 <startMotor+0x198>)
   1b29e:	2224      	movs	r2, #36	; 0x24
   1b2a0:	5c9b      	ldrb	r3, [r3, r2]
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b2a2:	2b00      	cmp	r3, #0
   1b2a4:	d003      	beq.n	1b2ae <startMotor+0x5e>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b2a6:	4b51      	ldr	r3, [pc, #324]	; (1b3ec <startMotor+0x19c>)
   1b2a8:	4798      	blx	r3
   1b2aa:	1e03      	subs	r3, r0, #0
   1b2ac:	d105      	bne.n	1b2ba <startMotor+0x6a>
   1b2ae:	4b4e      	ldr	r3, [pc, #312]	; (1b3e8 <startMotor+0x198>)
   1b2b0:	2224      	movs	r2, #36	; 0x24
   1b2b2:	5c9b      	ldrb	r3, [r3, r2]
   1b2b4:	2b00      	cmp	r3, #0
   1b2b6:	d000      	beq.n	1b2ba <startMotor+0x6a>
   1b2b8:	e07c      	b.n	1b3b4 <startMotor+0x164>
	{
		if (!getMotorState())
   1b2ba:	4b4d      	ldr	r3, [pc, #308]	; (1b3f0 <startMotor+0x1a0>)
   1b2bc:	4798      	blx	r3
   1b2be:	0003      	movs	r3, r0
   1b2c0:	001a      	movs	r2, r3
   1b2c2:	2301      	movs	r3, #1
   1b2c4:	4053      	eors	r3, r2
   1b2c6:	b2db      	uxtb	r3, r3
   1b2c8:	2b00      	cmp	r3, #0
   1b2ca:	d100      	bne.n	1b2ce <startMotor+0x7e>
   1b2cc:	e06a      	b.n	1b3a4 <startMotor+0x154>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1b2ce:	4b49      	ldr	r3, [pc, #292]	; (1b3f4 <startMotor+0x1a4>)
   1b2d0:	795b      	ldrb	r3, [r3, #5]
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d034      	beq.n	1b340 <startMotor+0xf0>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1b2d6:	4b44      	ldr	r3, [pc, #272]	; (1b3e8 <startMotor+0x198>)
   1b2d8:	7fdb      	ldrb	r3, [r3, #31]
   1b2da:	2b00      	cmp	r3, #0
   1b2dc:	d113      	bne.n	1b306 <startMotor+0xb6>
   1b2de:	4b46      	ldr	r3, [pc, #280]	; (1b3f8 <startMotor+0x1a8>)
   1b2e0:	4798      	blx	r3
   1b2e2:	1e03      	subs	r3, r0, #0
   1b2e4:	d10f      	bne.n	1b306 <startMotor+0xb6>
				{
					if (commanded)
   1b2e6:	1dfb      	adds	r3, r7, #7
   1b2e8:	781b      	ldrb	r3, [r3, #0]
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d003      	beq.n	1b2f6 <startMotor+0xa6>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1b2ee:	2054      	movs	r0, #84	; 0x54
   1b2f0:	4b42      	ldr	r3, [pc, #264]	; (1b3fc <startMotor+0x1ac>)
   1b2f2:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1b2f4:	e06f      	b.n	1b3d6 <startMotor+0x186>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b2f6:	204e      	movs	r0, #78	; 0x4e
   1b2f8:	4b41      	ldr	r3, [pc, #260]	; (1b400 <startMotor+0x1b0>)
   1b2fa:	4798      	blx	r3
   1b2fc:	0003      	movs	r3, r0
   1b2fe:	001a      	movs	r2, r3
   1b300:	4b40      	ldr	r3, [pc, #256]	; (1b404 <startMotor+0x1b4>)
   1b302:	701a      	strb	r2, [r3, #0]
					return;
   1b304:	e067      	b.n	1b3d6 <startMotor+0x186>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1b306:	4b3b      	ldr	r3, [pc, #236]	; (1b3f4 <startMotor+0x1a4>)
   1b308:	791b      	ldrb	r3, [r3, #4]
   1b30a:	2b00      	cmp	r3, #0
   1b30c:	d018      	beq.n	1b340 <startMotor+0xf0>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1b30e:	4b36      	ldr	r3, [pc, #216]	; (1b3e8 <startMotor+0x198>)
   1b310:	7fdb      	ldrb	r3, [r3, #31]
   1b312:	2b00      	cmp	r3, #0
   1b314:	d114      	bne.n	1b340 <startMotor+0xf0>
   1b316:	4b3c      	ldr	r3, [pc, #240]	; (1b408 <startMotor+0x1b8>)
   1b318:	4798      	blx	r3
   1b31a:	0003      	movs	r3, r0
   1b31c:	2b02      	cmp	r3, #2
   1b31e:	d10f      	bne.n	1b340 <startMotor+0xf0>
					{
						if(commanded)
   1b320:	1dfb      	adds	r3, r7, #7
   1b322:	781b      	ldrb	r3, [r3, #0]
   1b324:	2b00      	cmp	r3, #0
   1b326:	d003      	beq.n	1b330 <startMotor+0xe0>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1b328:	2056      	movs	r0, #86	; 0x56
   1b32a:	4b34      	ldr	r3, [pc, #208]	; (1b3fc <startMotor+0x1ac>)
   1b32c:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1b32e:	e052      	b.n	1b3d6 <startMotor+0x186>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1b330:	2056      	movs	r0, #86	; 0x56
   1b332:	4b33      	ldr	r3, [pc, #204]	; (1b400 <startMotor+0x1b0>)
   1b334:	4798      	blx	r3
   1b336:	0003      	movs	r3, r0
   1b338:	001a      	movs	r2, r3
   1b33a:	4b32      	ldr	r3, [pc, #200]	; (1b404 <startMotor+0x1b4>)
   1b33c:	745a      	strb	r2, [r3, #17]
						return;
   1b33e:	e04a      	b.n	1b3d6 <startMotor+0x186>
					}
				}
			}

			STOP_RELAY_ON;
   1b340:	2101      	movs	r1, #1
   1b342:	202c      	movs	r0, #44	; 0x2c
   1b344:	4b31      	ldr	r3, [pc, #196]	; (1b40c <startMotor+0x1bc>)
   1b346:	4798      	blx	r3
			START_RELAY_ON;
   1b348:	2101      	movs	r1, #1
   1b34a:	202d      	movs	r0, #45	; 0x2d
   1b34c:	4b2f      	ldr	r3, [pc, #188]	; (1b40c <startMotor+0x1bc>)
   1b34e:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1b350:	4b2f      	ldr	r3, [pc, #188]	; (1b410 <startMotor+0x1c0>)
   1b352:	2200      	movs	r2, #0
   1b354:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1b356:	4b2f      	ldr	r3, [pc, #188]	; (1b414 <startMotor+0x1c4>)
   1b358:	4798      	blx	r3
   1b35a:	0002      	movs	r2, r0
   1b35c:	4b2e      	ldr	r3, [pc, #184]	; (1b418 <startMotor+0x1c8>)
   1b35e:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1b360:	4b2e      	ldr	r3, [pc, #184]	; (1b41c <startMotor+0x1cc>)
   1b362:	2201      	movs	r2, #1
   1b364:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass)
   1b366:	4b20      	ldr	r3, [pc, #128]	; (1b3e8 <startMotor+0x198>)
   1b368:	2227      	movs	r2, #39	; 0x27
   1b36a:	5c9b      	ldrb	r3, [r3, r2]
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d007      	beq.n	1b380 <startMotor+0x130>
			{
				motorRelatedVoltageBypassOn=true;
   1b370:	4b2b      	ldr	r3, [pc, #172]	; (1b420 <startMotor+0x1d0>)
   1b372:	2201      	movs	r2, #1
   1b374:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1b376:	4b27      	ldr	r3, [pc, #156]	; (1b414 <startMotor+0x1c4>)
   1b378:	4798      	blx	r3
   1b37a:	0002      	movs	r2, r0
   1b37c:	4b29      	ldr	r3, [pc, #164]	; (1b424 <startMotor+0x1d4>)
   1b37e:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1b380:	2001      	movs	r0, #1
   1b382:	4b29      	ldr	r3, [pc, #164]	; (1b428 <startMotor+0x1d8>)
   1b384:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b386:	4b1b      	ldr	r3, [pc, #108]	; (1b3f4 <startMotor+0x1a4>)
   1b388:	785b      	ldrb	r3, [r3, #1]
   1b38a:	2b00      	cmp	r3, #0
   1b38c:	d005      	beq.n	1b39a <startMotor+0x14a>
			{
				enableCurrentBuffer=false;
   1b38e:	4b27      	ldr	r3, [pc, #156]	; (1b42c <startMotor+0x1dc>)
   1b390:	2200      	movs	r2, #0
   1b392:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1b394:	4b26      	ldr	r3, [pc, #152]	; (1b430 <startMotor+0x1e0>)
   1b396:	2200      	movs	r2, #0
   1b398:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1b39a:	4b26      	ldr	r3, [pc, #152]	; (1b434 <startMotor+0x1e4>)
   1b39c:	1dfa      	adds	r2, r7, #7
   1b39e:	7812      	ldrb	r2, [r2, #0]
   1b3a0:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1b3a2:	e017      	b.n	1b3d4 <startMotor+0x184>
		}
		else
		{
			if (commanded)
   1b3a4:	1dfb      	adds	r3, r7, #7
   1b3a6:	781b      	ldrb	r3, [r3, #0]
   1b3a8:	2b00      	cmp	r3, #0
   1b3aa:	d013      	beq.n	1b3d4 <startMotor+0x184>
			{
				setMotorMGRResponse('+');		//motor is already on
   1b3ac:	202b      	movs	r0, #43	; 0x2b
   1b3ae:	4b13      	ldr	r3, [pc, #76]	; (1b3fc <startMotor+0x1ac>)
   1b3b0:	4798      	blx	r3
		if (!getMotorState())
   1b3b2:	e00f      	b.n	1b3d4 <startMotor+0x184>
			}
		}
	}
	else
	{
		if (commanded)
   1b3b4:	1dfb      	adds	r3, r7, #7
   1b3b6:	781b      	ldrb	r3, [r3, #0]
   1b3b8:	2b00      	cmp	r3, #0
   1b3ba:	d003      	beq.n	1b3c4 <startMotor+0x174>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b3bc:	204e      	movs	r0, #78	; 0x4e
   1b3be:	4b0f      	ldr	r3, [pc, #60]	; (1b3fc <startMotor+0x1ac>)
   1b3c0:	4798      	blx	r3
   1b3c2:	e008      	b.n	1b3d6 <startMotor+0x186>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b3c4:	204e      	movs	r0, #78	; 0x4e
   1b3c6:	4b0e      	ldr	r3, [pc, #56]	; (1b400 <startMotor+0x1b0>)
   1b3c8:	4798      	blx	r3
   1b3ca:	0003      	movs	r3, r0
   1b3cc:	001a      	movs	r2, r3
   1b3ce:	4b0d      	ldr	r3, [pc, #52]	; (1b404 <startMotor+0x1b4>)
   1b3d0:	701a      	strb	r2, [r3, #0]
   1b3d2:	e000      	b.n	1b3d6 <startMotor+0x186>
		if (!getMotorState())
   1b3d4:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b3d6:	46bd      	mov	sp, r7
   1b3d8:	b002      	add	sp, #8
   1b3da:	bd80      	pop	{r7, pc}
   1b3dc:	2000078e 	.word	0x2000078e
   1b3e0:	0001aa59 	.word	0x0001aa59
   1b3e4:	0001aa8d 	.word	0x0001aa8d
   1b3e8:	20000650 	.word	0x20000650
   1b3ec:	0001aac1 	.word	0x0001aac1
   1b3f0:	0001aaf5 	.word	0x0001aaf5
   1b3f4:	20000628 	.word	0x20000628
   1b3f8:	00019321 	.word	0x00019321
   1b3fc:	00014b09 	.word	0x00014b09
   1b400:	00014931 	.word	0x00014931
   1b404:	20000708 	.word	0x20000708
   1b408:	000191f1 	.word	0x000191f1
   1b40c:	00018f8d 	.word	0x00018f8d
   1b410:	2000085c 	.word	0x2000085c
   1b414:	0002024d 	.word	0x0002024d
   1b418:	20000788 	.word	0x20000788
   1b41c:	2000078d 	.word	0x2000078d
   1b420:	20000767 	.word	0x20000767
   1b424:	20000778 	.word	0x20000778
   1b428:	0001ab09 	.word	0x0001ab09
   1b42c:	20000754 	.word	0x20000754
   1b430:	20000772 	.word	0x20000772
   1b434:	20000704 	.word	0x20000704

0001b438 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1b438:	b590      	push	{r4, r7, lr}
   1b43a:	b083      	sub	sp, #12
   1b43c:	af00      	add	r7, sp, #0
   1b43e:	0004      	movs	r4, r0
   1b440:	0008      	movs	r0, r1
   1b442:	0011      	movs	r1, r2
   1b444:	1dfb      	adds	r3, r7, #7
   1b446:	1c22      	adds	r2, r4, #0
   1b448:	701a      	strb	r2, [r3, #0]
   1b44a:	1dbb      	adds	r3, r7, #6
   1b44c:	1c02      	adds	r2, r0, #0
   1b44e:	701a      	strb	r2, [r3, #0]
   1b450:	1d7b      	adds	r3, r7, #5
   1b452:	1c0a      	adds	r2, r1, #0
   1b454:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1b456:	1dbb      	adds	r3, r7, #6
   1b458:	781b      	ldrb	r3, [r3, #0]
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	d103      	bne.n	1b466 <stopMotor+0x2e>
   1b45e:	4b21      	ldr	r3, [pc, #132]	; (1b4e4 <stopMotor+0xac>)
   1b460:	4798      	blx	r3
   1b462:	1e03      	subs	r3, r0, #0
   1b464:	d032      	beq.n	1b4cc <stopMotor+0x94>
	{
		singlePhasingTimerOn = false;
   1b466:	4b20      	ldr	r3, [pc, #128]	; (1b4e8 <stopMotor+0xb0>)
   1b468:	2200      	movs	r2, #0
   1b46a:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b46c:	4b1f      	ldr	r3, [pc, #124]	; (1b4ec <stopMotor+0xb4>)
   1b46e:	2225      	movs	r2, #37	; 0x25
   1b470:	5c9b      	ldrb	r3, [r3, r2]
   1b472:	2b01      	cmp	r3, #1
   1b474:	d105      	bne.n	1b482 <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1b476:	4b1e      	ldr	r3, [pc, #120]	; (1b4f0 <stopMotor+0xb8>)
   1b478:	8a9b      	ldrh	r3, [r3, #20]
   1b47a:	b29b      	uxth	r3, r3
   1b47c:	b2da      	uxtb	r2, r3
   1b47e:	4b1d      	ldr	r3, [pc, #116]	; (1b4f4 <stopMotor+0xbc>)
   1b480:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1b482:	4b1d      	ldr	r3, [pc, #116]	; (1b4f8 <stopMotor+0xc0>)
   1b484:	2200      	movs	r2, #0
   1b486:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1b488:	2100      	movs	r1, #0
   1b48a:	202c      	movs	r0, #44	; 0x2c
   1b48c:	4b1b      	ldr	r3, [pc, #108]	; (1b4fc <stopMotor+0xc4>)
   1b48e:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1b490:	4b1b      	ldr	r3, [pc, #108]	; (1b500 <stopMotor+0xc8>)
   1b492:	2201      	movs	r2, #1
   1b494:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1b496:	4b1b      	ldr	r3, [pc, #108]	; (1b504 <stopMotor+0xcc>)
   1b498:	4798      	blx	r3
   1b49a:	0002      	movs	r2, r0
   1b49c:	4b1a      	ldr	r3, [pc, #104]	; (1b508 <stopMotor+0xd0>)
   1b49e:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1b4a0:	4b1a      	ldr	r3, [pc, #104]	; (1b50c <stopMotor+0xd4>)
   1b4a2:	2201      	movs	r2, #1
   1b4a4:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1b4a6:	2000      	movs	r0, #0
   1b4a8:	4b19      	ldr	r3, [pc, #100]	; (1b510 <stopMotor+0xd8>)
   1b4aa:	4798      	blx	r3
		gotOffCommand = commanded;
   1b4ac:	4b19      	ldr	r3, [pc, #100]	; (1b514 <stopMotor+0xdc>)
   1b4ae:	1dfa      	adds	r2, r7, #7
   1b4b0:	7812      	ldrb	r2, [r2, #0]
   1b4b2:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1b4b4:	4b18      	ldr	r3, [pc, #96]	; (1b518 <stopMotor+0xe0>)
   1b4b6:	1d7a      	adds	r2, r7, #5
   1b4b8:	7812      	ldrb	r2, [r2, #0]
   1b4ba:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b4bc:	4b17      	ldr	r3, [pc, #92]	; (1b51c <stopMotor+0xe4>)
   1b4be:	785b      	ldrb	r3, [r3, #1]
   1b4c0:	2b00      	cmp	r3, #0
   1b4c2:	d00b      	beq.n	1b4dc <stopMotor+0xa4>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1b4c4:	4b16      	ldr	r3, [pc, #88]	; (1b520 <stopMotor+0xe8>)
   1b4c6:	2200      	movs	r2, #0
   1b4c8:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b4ca:	e007      	b.n	1b4dc <stopMotor+0xa4>
		}
	}
	else
	{
		if (commanded)
   1b4cc:	1dfb      	adds	r3, r7, #7
   1b4ce:	781b      	ldrb	r3, [r3, #0]
   1b4d0:	2b00      	cmp	r3, #0
   1b4d2:	d003      	beq.n	1b4dc <stopMotor+0xa4>
		{
			setMotorMGRResponse('-');	//motor is already off
   1b4d4:	202d      	movs	r0, #45	; 0x2d
   1b4d6:	4b13      	ldr	r3, [pc, #76]	; (1b524 <stopMotor+0xec>)
   1b4d8:	4798      	blx	r3
		}
	}
}
   1b4da:	e7ff      	b.n	1b4dc <stopMotor+0xa4>
   1b4dc:	46c0      	nop			; (mov r8, r8)
   1b4de:	46bd      	mov	sp, r7
   1b4e0:	b003      	add	sp, #12
   1b4e2:	bd90      	pop	{r4, r7, pc}
   1b4e4:	0001aaf5 	.word	0x0001aaf5
   1b4e8:	20000785 	.word	0x20000785
   1b4ec:	20000650 	.word	0x20000650
   1b4f0:	200006d8 	.word	0x200006d8
   1b4f4:	200007f0 	.word	0x200007f0
   1b4f8:	20000767 	.word	0x20000767
   1b4fc:	00018f8d 	.word	0x00018f8d
   1b500:	2000085c 	.word	0x2000085c
   1b504:	0002024d 	.word	0x0002024d
   1b508:	2000079c 	.word	0x2000079c
   1b50c:	2000077c 	.word	0x2000077c
   1b510:	0001ab09 	.word	0x0001ab09
   1b514:	20000808 	.word	0x20000808
   1b518:	20000798 	.word	0x20000798
   1b51c:	20000628 	.word	0x20000628
   1b520:	20000772 	.word	0x20000772
   1b524:	00014b09 	.word	0x00014b09

0001b528 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1b528:	b580      	push	{r7, lr}
   1b52a:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
   1b52c:	4b09      	ldr	r3, [pc, #36]	; (1b554 <startMotorTimerOver+0x2c>)
   1b52e:	4798      	blx	r3
   1b530:	0002      	movs	r2, r0
   1b532:	4b09      	ldr	r3, [pc, #36]	; (1b558 <startMotorTimerOver+0x30>)
   1b534:	681b      	ldr	r3, [r3, #0]
   1b536:	1ad1      	subs	r1, r2, r3
   1b538:	4b08      	ldr	r3, [pc, #32]	; (1b55c <startMotorTimerOver+0x34>)
   1b53a:	885b      	ldrh	r3, [r3, #2]
   1b53c:	001a      	movs	r2, r3
   1b53e:	23fa      	movs	r3, #250	; 0xfa
   1b540:	009b      	lsls	r3, r3, #2
   1b542:	435a      	muls	r2, r3
   1b544:	2300      	movs	r3, #0
   1b546:	4291      	cmp	r1, r2
   1b548:	415b      	adcs	r3, r3
   1b54a:	b2db      	uxtb	r3, r3
}
   1b54c:	0018      	movs	r0, r3
   1b54e:	46bd      	mov	sp, r7
   1b550:	bd80      	pop	{r7, pc}
   1b552:	46c0      	nop			; (mov r8, r8)
   1b554:	0002024d 	.word	0x0002024d
   1b558:	20000794 	.word	0x20000794
   1b55c:	20000650 	.word	0x20000650

0001b560 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1b560:	b580      	push	{r7, lr}
   1b562:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1b564:	2200      	movs	r2, #0
   1b566:	2101      	movs	r1, #1
   1b568:	2000      	movs	r0, #0
   1b56a:	4b06      	ldr	r3, [pc, #24]	; (1b584 <unknownMotorOff+0x24>)
   1b56c:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1b56e:	205f      	movs	r0, #95	; 0x5f
   1b570:	4b05      	ldr	r3, [pc, #20]	; (1b588 <unknownMotorOff+0x28>)
   1b572:	4798      	blx	r3
   1b574:	0003      	movs	r3, r0
   1b576:	001a      	movs	r2, r3
   1b578:	4b04      	ldr	r3, [pc, #16]	; (1b58c <unknownMotorOff+0x2c>)
   1b57a:	709a      	strb	r2, [r3, #2]
}
   1b57c:	46c0      	nop			; (mov r8, r8)
   1b57e:	46bd      	mov	sp, r7
   1b580:	bd80      	pop	{r7, pc}
   1b582:	46c0      	nop			; (mov r8, r8)
   1b584:	0001b439 	.word	0x0001b439
   1b588:	00014931 	.word	0x00014931
   1b58c:	20000708 	.word	0x20000708

0001b590 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1b590:	b580      	push	{r7, lr}
   1b592:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
   1b594:	4b0d      	ldr	r3, [pc, #52]	; (1b5cc <singlePhasingTimerOver+0x3c>)
   1b596:	781b      	ldrb	r3, [r3, #0]
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d00e      	beq.n	1b5ba <singlePhasingTimerOver+0x2a>
   1b59c:	4b0c      	ldr	r3, [pc, #48]	; (1b5d0 <singlePhasingTimerOver+0x40>)
   1b59e:	4798      	blx	r3
   1b5a0:	0002      	movs	r2, r0
   1b5a2:	4b0c      	ldr	r3, [pc, #48]	; (1b5d4 <singlePhasingTimerOver+0x44>)
   1b5a4:	681b      	ldr	r3, [r3, #0]
   1b5a6:	1ad2      	subs	r2, r2, r3
   1b5a8:	4b0b      	ldr	r3, [pc, #44]	; (1b5d8 <singlePhasingTimerOver+0x48>)
   1b5aa:	781b      	ldrb	r3, [r3, #0]
   1b5ac:	0019      	movs	r1, r3
   1b5ae:	2364      	movs	r3, #100	; 0x64
   1b5b0:	434b      	muls	r3, r1
   1b5b2:	429a      	cmp	r2, r3
   1b5b4:	d901      	bls.n	1b5ba <singlePhasingTimerOver+0x2a>
   1b5b6:	2301      	movs	r3, #1
   1b5b8:	e000      	b.n	1b5bc <singlePhasingTimerOver+0x2c>
   1b5ba:	2300      	movs	r3, #0
   1b5bc:	1c1a      	adds	r2, r3, #0
   1b5be:	2301      	movs	r3, #1
   1b5c0:	4013      	ands	r3, r2
   1b5c2:	b2db      	uxtb	r3, r3
}
   1b5c4:	0018      	movs	r0, r3
   1b5c6:	46bd      	mov	sp, r7
   1b5c8:	bd80      	pop	{r7, pc}
   1b5ca:	46c0      	nop			; (mov r8, r8)
   1b5cc:	20000785 	.word	0x20000785
   1b5d0:	0002024d 	.word	0x0002024d
   1b5d4:	2000076c 	.word	0x2000076c
   1b5d8:	20000764 	.word	0x20000764

0001b5dc <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1b5dc:	b580      	push	{r7, lr}
   1b5de:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1b5e0:	2101      	movs	r1, #1
   1b5e2:	2027      	movs	r0, #39	; 0x27
   1b5e4:	4b08      	ldr	r3, [pc, #32]	; (1b608 <operateOnSinglePhasing+0x2c>)
   1b5e6:	4798      	blx	r3
	stopMotor(false,true,false);
   1b5e8:	2200      	movs	r2, #0
   1b5ea:	2101      	movs	r1, #1
   1b5ec:	2000      	movs	r0, #0
   1b5ee:	4b07      	ldr	r3, [pc, #28]	; (1b60c <operateOnSinglePhasing+0x30>)
   1b5f0:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1b5f2:	2046      	movs	r0, #70	; 0x46
   1b5f4:	4b06      	ldr	r3, [pc, #24]	; (1b610 <operateOnSinglePhasing+0x34>)
   1b5f6:	4798      	blx	r3
   1b5f8:	0003      	movs	r3, r0
   1b5fa:	001a      	movs	r2, r3
   1b5fc:	4b05      	ldr	r3, [pc, #20]	; (1b614 <operateOnSinglePhasing+0x38>)
   1b5fe:	70da      	strb	r2, [r3, #3]
}
   1b600:	46c0      	nop			; (mov r8, r8)
   1b602:	46bd      	mov	sp, r7
   1b604:	bd80      	pop	{r7, pc}
   1b606:	46c0      	nop			; (mov r8, r8)
   1b608:	00018f8d 	.word	0x00018f8d
   1b60c:	0001b439 	.word	0x0001b439
   1b610:	00014931 	.word	0x00014931
   1b614:	20000708 	.word	0x20000708

0001b618 <terminateStopRelay>:

void terminateStopRelay(void)
{
   1b618:	b580      	push	{r7, lr}
   1b61a:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1b61c:	4b28      	ldr	r3, [pc, #160]	; (1b6c0 <terminateStopRelay+0xa8>)
   1b61e:	781b      	ldrb	r3, [r3, #0]
   1b620:	2b00      	cmp	r3, #0
   1b622:	d04a      	beq.n	1b6ba <terminateStopRelay+0xa2>
   1b624:	4b27      	ldr	r3, [pc, #156]	; (1b6c4 <terminateStopRelay+0xac>)
   1b626:	4798      	blx	r3
   1b628:	0002      	movs	r2, r0
   1b62a:	4b27      	ldr	r3, [pc, #156]	; (1b6c8 <terminateStopRelay+0xb0>)
   1b62c:	681b      	ldr	r3, [r3, #0]
   1b62e:	1ad3      	subs	r3, r2, r3
   1b630:	4a26      	ldr	r2, [pc, #152]	; (1b6cc <terminateStopRelay+0xb4>)
   1b632:	7812      	ldrb	r2, [r2, #0]
   1b634:	0011      	movs	r1, r2
   1b636:	2264      	movs	r2, #100	; 0x64
   1b638:	434a      	muls	r2, r1
   1b63a:	4293      	cmp	r3, r2
   1b63c:	d93d      	bls.n	1b6ba <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1b63e:	4b20      	ldr	r3, [pc, #128]	; (1b6c0 <terminateStopRelay+0xa8>)
   1b640:	2200      	movs	r2, #0
   1b642:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1b644:	4b22      	ldr	r3, [pc, #136]	; (1b6d0 <terminateStopRelay+0xb8>)
   1b646:	2201      	movs	r2, #1
   1b648:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1b64a:	4b22      	ldr	r3, [pc, #136]	; (1b6d4 <terminateStopRelay+0xbc>)
   1b64c:	4798      	blx	r3
   1b64e:	0003      	movs	r3, r0
   1b650:	001a      	movs	r2, r3
   1b652:	2301      	movs	r3, #1
   1b654:	4053      	eors	r3, r2
   1b656:	b2db      	uxtb	r3, r3
   1b658:	2b00      	cmp	r3, #0
   1b65a:	d019      	beq.n	1b690 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1b65c:	4b1e      	ldr	r3, [pc, #120]	; (1b6d8 <terminateStopRelay+0xc0>)
   1b65e:	781b      	ldrb	r3, [r3, #0]
   1b660:	2b00      	cmp	r3, #0
   1b662:	d006      	beq.n	1b672 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1b664:	4b1c      	ldr	r3, [pc, #112]	; (1b6d8 <terminateStopRelay+0xc0>)
   1b666:	2200      	movs	r2, #0
   1b668:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1b66a:	204f      	movs	r0, #79	; 0x4f
   1b66c:	4b1b      	ldr	r3, [pc, #108]	; (1b6dc <terminateStopRelay+0xc4>)
   1b66e:	4798      	blx	r3
   1b670:	e020      	b.n	1b6b4 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1b672:	4b1b      	ldr	r3, [pc, #108]	; (1b6e0 <terminateStopRelay+0xc8>)
   1b674:	781b      	ldrb	r3, [r3, #0]
   1b676:	2b00      	cmp	r3, #0
   1b678:	d01c      	beq.n	1b6b4 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1b67a:	4b19      	ldr	r3, [pc, #100]	; (1b6e0 <terminateStopRelay+0xc8>)
   1b67c:	2200      	movs	r2, #0
   1b67e:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1b680:	204f      	movs	r0, #79	; 0x4f
   1b682:	4b18      	ldr	r3, [pc, #96]	; (1b6e4 <terminateStopRelay+0xcc>)
   1b684:	4798      	blx	r3
   1b686:	0003      	movs	r3, r0
   1b688:	001a      	movs	r2, r3
   1b68a:	4b17      	ldr	r3, [pc, #92]	; (1b6e8 <terminateStopRelay+0xd0>)
   1b68c:	721a      	strb	r2, [r3, #8]
   1b68e:	e011      	b.n	1b6b4 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1b690:	4b11      	ldr	r3, [pc, #68]	; (1b6d8 <terminateStopRelay+0xc0>)
   1b692:	781b      	ldrb	r3, [r3, #0]
   1b694:	2b00      	cmp	r3, #0
   1b696:	d006      	beq.n	1b6a6 <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1b698:	4b0f      	ldr	r3, [pc, #60]	; (1b6d8 <terminateStopRelay+0xc0>)
   1b69a:	2200      	movs	r2, #0
   1b69c:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1b69e:	2050      	movs	r0, #80	; 0x50
   1b6a0:	4b0e      	ldr	r3, [pc, #56]	; (1b6dc <terminateStopRelay+0xc4>)
   1b6a2:	4798      	blx	r3
   1b6a4:	e006      	b.n	1b6b4 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1b6a6:	2050      	movs	r0, #80	; 0x50
   1b6a8:	4b0e      	ldr	r3, [pc, #56]	; (1b6e4 <terminateStopRelay+0xcc>)
   1b6aa:	4798      	blx	r3
   1b6ac:	0003      	movs	r3, r0
   1b6ae:	001a      	movs	r2, r3
   1b6b0:	4b0d      	ldr	r3, [pc, #52]	; (1b6e8 <terminateStopRelay+0xd0>)
   1b6b2:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1b6b4:	4b0a      	ldr	r3, [pc, #40]	; (1b6e0 <terminateStopRelay+0xc8>)
   1b6b6:	2200      	movs	r2, #0
   1b6b8:	701a      	strb	r2, [r3, #0]
	}
}
   1b6ba:	46c0      	nop			; (mov r8, r8)
   1b6bc:	46bd      	mov	sp, r7
   1b6be:	bd80      	pop	{r7, pc}
   1b6c0:	2000077c 	.word	0x2000077c
   1b6c4:	0002024d 	.word	0x0002024d
   1b6c8:	2000079c 	.word	0x2000079c
   1b6cc:	2000085e 	.word	0x2000085e
   1b6d0:	2000085c 	.word	0x2000085c
   1b6d4:	0001ab49 	.word	0x0001ab49
   1b6d8:	20000808 	.word	0x20000808
   1b6dc:	00014b09 	.word	0x00014b09
   1b6e0:	20000798 	.word	0x20000798
   1b6e4:	00014931 	.word	0x00014931
   1b6e8:	20000708 	.word	0x20000708

0001b6ec <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1b6ec:	b580      	push	{r7, lr}
   1b6ee:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1b6f0:	4b13      	ldr	r3, [pc, #76]	; (1b740 <terminateStarDeltaTimer+0x54>)
   1b6f2:	781b      	ldrb	r3, [r3, #0]
   1b6f4:	2b00      	cmp	r3, #0
   1b6f6:	d020      	beq.n	1b73a <terminateStarDeltaTimer+0x4e>
   1b6f8:	4b12      	ldr	r3, [pc, #72]	; (1b744 <terminateStarDeltaTimer+0x58>)
   1b6fa:	4798      	blx	r3
   1b6fc:	0002      	movs	r2, r0
   1b6fe:	4b12      	ldr	r3, [pc, #72]	; (1b748 <terminateStarDeltaTimer+0x5c>)
   1b700:	681b      	ldr	r3, [r3, #0]
   1b702:	1ad2      	subs	r2, r2, r3
   1b704:	4b11      	ldr	r3, [pc, #68]	; (1b74c <terminateStarDeltaTimer+0x60>)
   1b706:	88db      	ldrh	r3, [r3, #6]
   1b708:	0019      	movs	r1, r3
   1b70a:	23fa      	movs	r3, #250	; 0xfa
   1b70c:	009b      	lsls	r3, r3, #2
   1b70e:	434b      	muls	r3, r1
   1b710:	429a      	cmp	r2, r3
   1b712:	d912      	bls.n	1b73a <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
   1b714:	2100      	movs	r1, #0
   1b716:	202d      	movs	r0, #45	; 0x2d
   1b718:	4b0d      	ldr	r3, [pc, #52]	; (1b750 <terminateStarDeltaTimer+0x64>)
   1b71a:	4798      	blx	r3
		starDeltaTimerOn=false;
   1b71c:	4b08      	ldr	r3, [pc, #32]	; (1b740 <terminateStarDeltaTimer+0x54>)
   1b71e:	2200      	movs	r2, #0
   1b720:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b722:	4b0c      	ldr	r3, [pc, #48]	; (1b754 <terminateStarDeltaTimer+0x68>)
   1b724:	785b      	ldrb	r3, [r3, #1]
   1b726:	2b00      	cmp	r3, #0
   1b728:	d007      	beq.n	1b73a <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
   1b72a:	4b0b      	ldr	r3, [pc, #44]	; (1b758 <terminateStarDeltaTimer+0x6c>)
   1b72c:	2201      	movs	r2, #1
   1b72e:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1b730:	4b04      	ldr	r3, [pc, #16]	; (1b744 <terminateStarDeltaTimer+0x58>)
   1b732:	4798      	blx	r3
   1b734:	0002      	movs	r2, r0
   1b736:	4b04      	ldr	r3, [pc, #16]	; (1b748 <terminateStarDeltaTimer+0x5c>)
   1b738:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b73a:	46c0      	nop			; (mov r8, r8)
   1b73c:	46bd      	mov	sp, r7
   1b73e:	bd80      	pop	{r7, pc}
   1b740:	2000078f 	.word	0x2000078f
   1b744:	0002024d 	.word	0x0002024d
   1b748:	20000788 	.word	0x20000788
   1b74c:	20000650 	.word	0x20000650
   1b750:	00018f8d 	.word	0x00018f8d
   1b754:	20000628 	.word	0x20000628
   1b758:	20000754 	.word	0x20000754

0001b75c <terminateStartRelay>:

void terminateStartRelay(void)
{
   1b75c:	b590      	push	{r4, r7, lr}
   1b75e:	b083      	sub	sp, #12
   1b760:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1b762:	4b36      	ldr	r3, [pc, #216]	; (1b83c <terminateStartRelay+0xe0>)
   1b764:	781b      	ldrb	r3, [r3, #0]
   1b766:	2b00      	cmp	r3, #0
   1b768:	d064      	beq.n	1b834 <terminateStartRelay+0xd8>
   1b76a:	4b35      	ldr	r3, [pc, #212]	; (1b840 <terminateStartRelay+0xe4>)
   1b76c:	4798      	blx	r3
   1b76e:	0002      	movs	r2, r0
   1b770:	4b34      	ldr	r3, [pc, #208]	; (1b844 <terminateStartRelay+0xe8>)
   1b772:	681b      	ldr	r3, [r3, #0]
   1b774:	1ad3      	subs	r3, r2, r3
   1b776:	4a34      	ldr	r2, [pc, #208]	; (1b848 <terminateStartRelay+0xec>)
   1b778:	7812      	ldrb	r2, [r2, #0]
   1b77a:	0011      	movs	r1, r2
   1b77c:	2264      	movs	r2, #100	; 0x64
   1b77e:	434a      	muls	r2, r1
   1b780:	4293      	cmp	r3, r2
   1b782:	d957      	bls.n	1b834 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
   1b784:	4b31      	ldr	r3, [pc, #196]	; (1b84c <terminateStartRelay+0xf0>)
   1b786:	88db      	ldrh	r3, [r3, #6]
   1b788:	001a      	movs	r2, r3
   1b78a:	0013      	movs	r3, r2
   1b78c:	009b      	lsls	r3, r3, #2
   1b78e:	189b      	adds	r3, r3, r2
   1b790:	005b      	lsls	r3, r3, #1
   1b792:	001a      	movs	r2, r3
   1b794:	4b2c      	ldr	r3, [pc, #176]	; (1b848 <terminateStartRelay+0xec>)
   1b796:	781b      	ldrb	r3, [r3, #0]
   1b798:	429a      	cmp	r2, r3
   1b79a:	d810      	bhi.n	1b7be <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
   1b79c:	2100      	movs	r1, #0
   1b79e:	202d      	movs	r0, #45	; 0x2d
   1b7a0:	4b2b      	ldr	r3, [pc, #172]	; (1b850 <terminateStartRelay+0xf4>)
   1b7a2:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1b7a4:	4b26      	ldr	r3, [pc, #152]	; (1b840 <terminateStartRelay+0xe4>)
   1b7a6:	4798      	blx	r3
   1b7a8:	0002      	movs	r2, r0
   1b7aa:	4b26      	ldr	r3, [pc, #152]	; (1b844 <terminateStartRelay+0xe8>)
   1b7ac:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b7ae:	4b29      	ldr	r3, [pc, #164]	; (1b854 <terminateStartRelay+0xf8>)
   1b7b0:	785b      	ldrb	r3, [r3, #1]
   1b7b2:	2b00      	cmp	r3, #0
   1b7b4:	d006      	beq.n	1b7c4 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
   1b7b6:	4b28      	ldr	r3, [pc, #160]	; (1b858 <terminateStartRelay+0xfc>)
   1b7b8:	2201      	movs	r2, #1
   1b7ba:	701a      	strb	r2, [r3, #0]
   1b7bc:	e002      	b.n	1b7c4 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1b7be:	4b27      	ldr	r3, [pc, #156]	; (1b85c <terminateStartRelay+0x100>)
   1b7c0:	2201      	movs	r2, #1
   1b7c2:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1b7c4:	4b1d      	ldr	r3, [pc, #116]	; (1b83c <terminateStartRelay+0xe0>)
   1b7c6:	2200      	movs	r2, #0
   1b7c8:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1b7ca:	1dfc      	adds	r4, r7, #7
   1b7cc:	4b24      	ldr	r3, [pc, #144]	; (1b860 <terminateStartRelay+0x104>)
   1b7ce:	4798      	blx	r3
   1b7d0:	0003      	movs	r3, r0
   1b7d2:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1b7d4:	4b23      	ldr	r3, [pc, #140]	; (1b864 <terminateStartRelay+0x108>)
   1b7d6:	781b      	ldrb	r3, [r3, #0]
   1b7d8:	2b00      	cmp	r3, #0
   1b7da:	d013      	beq.n	1b804 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
   1b7dc:	4b21      	ldr	r3, [pc, #132]	; (1b864 <terminateStartRelay+0x108>)
   1b7de:	2200      	movs	r2, #0
   1b7e0:	701a      	strb	r2, [r3, #0]
			if (motor)
   1b7e2:	1dfb      	adds	r3, r7, #7
   1b7e4:	781b      	ldrb	r3, [r3, #0]
   1b7e6:	2b00      	cmp	r3, #0
   1b7e8:	d003      	beq.n	1b7f2 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
   1b7ea:	2053      	movs	r0, #83	; 0x53
   1b7ec:	4b1e      	ldr	r3, [pc, #120]	; (1b868 <terminateStartRelay+0x10c>)
   1b7ee:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1b7f0:	e020      	b.n	1b834 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
   1b7f2:	2200      	movs	r2, #0
   1b7f4:	2101      	movs	r1, #1
   1b7f6:	2000      	movs	r0, #0
   1b7f8:	4b1c      	ldr	r3, [pc, #112]	; (1b86c <terminateStartRelay+0x110>)
   1b7fa:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b7fc:	204e      	movs	r0, #78	; 0x4e
   1b7fe:	4b1a      	ldr	r3, [pc, #104]	; (1b868 <terminateStartRelay+0x10c>)
   1b800:	4798      	blx	r3
}
   1b802:	e017      	b.n	1b834 <terminateStartRelay+0xd8>
			if (motor)
   1b804:	1dfb      	adds	r3, r7, #7
   1b806:	781b      	ldrb	r3, [r3, #0]
   1b808:	2b00      	cmp	r3, #0
   1b80a:	d007      	beq.n	1b81c <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1b80c:	2053      	movs	r0, #83	; 0x53
   1b80e:	4b18      	ldr	r3, [pc, #96]	; (1b870 <terminateStartRelay+0x114>)
   1b810:	4798      	blx	r3
   1b812:	0003      	movs	r3, r0
   1b814:	001a      	movs	r2, r3
   1b816:	4b17      	ldr	r3, [pc, #92]	; (1b874 <terminateStartRelay+0x118>)
   1b818:	71da      	strb	r2, [r3, #7]
}
   1b81a:	e00b      	b.n	1b834 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
   1b81c:	2200      	movs	r2, #0
   1b81e:	2101      	movs	r1, #1
   1b820:	2000      	movs	r0, #0
   1b822:	4b12      	ldr	r3, [pc, #72]	; (1b86c <terminateStartRelay+0x110>)
   1b824:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b826:	204e      	movs	r0, #78	; 0x4e
   1b828:	4b11      	ldr	r3, [pc, #68]	; (1b870 <terminateStartRelay+0x114>)
   1b82a:	4798      	blx	r3
   1b82c:	0003      	movs	r3, r0
   1b82e:	001a      	movs	r2, r3
   1b830:	4b10      	ldr	r3, [pc, #64]	; (1b874 <terminateStartRelay+0x118>)
   1b832:	701a      	strb	r2, [r3, #0]
}
   1b834:	46c0      	nop			; (mov r8, r8)
   1b836:	46bd      	mov	sp, r7
   1b838:	b003      	add	sp, #12
   1b83a:	bd90      	pop	{r4, r7, pc}
   1b83c:	2000078d 	.word	0x2000078d
   1b840:	0002024d 	.word	0x0002024d
   1b844:	20000788 	.word	0x20000788
   1b848:	20000814 	.word	0x20000814
   1b84c:	20000650 	.word	0x20000650
   1b850:	00018f8d 	.word	0x00018f8d
   1b854:	20000628 	.word	0x20000628
   1b858:	20000754 	.word	0x20000754
   1b85c:	2000078f 	.word	0x2000078f
   1b860:	0001ab49 	.word	0x0001ab49
   1b864:	20000704 	.word	0x20000704
   1b868:	00014b09 	.word	0x00014b09
   1b86c:	0001b439 	.word	0x0001b439
   1b870:	00014931 	.word	0x00014931
   1b874:	20000708 	.word	0x20000708

0001b878 <statusOnCall>:

void statusOnCall(void)
{
   1b878:	b590      	push	{r4, r7, lr}
   1b87a:	b083      	sub	sp, #12
   1b87c:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1b87e:	1dfb      	adds	r3, r7, #7
   1b880:	2200      	movs	r2, #0
   1b882:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1b884:	1dbc      	adds	r4, r7, #6
   1b886:	4b3b      	ldr	r3, [pc, #236]	; (1b974 <statusOnCall+0xfc>)
   1b888:	4798      	blx	r3
   1b88a:	0003      	movs	r3, r0
   1b88c:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1b88e:	1dbb      	adds	r3, r7, #6
   1b890:	781b      	ldrb	r3, [r3, #0]
   1b892:	2b00      	cmp	r3, #0
   1b894:	d109      	bne.n	1b8aa <statusOnCall+0x32>
	{
		status[index++]='L';
   1b896:	1dfb      	adds	r3, r7, #7
   1b898:	781b      	ldrb	r3, [r3, #0]
   1b89a:	1dfa      	adds	r2, r7, #7
   1b89c:	1c59      	adds	r1, r3, #1
   1b89e:	7011      	strb	r1, [r2, #0]
   1b8a0:	001a      	movs	r2, r3
   1b8a2:	003b      	movs	r3, r7
   1b8a4:	214c      	movs	r1, #76	; 0x4c
   1b8a6:	5499      	strb	r1, [r3, r2]
   1b8a8:	e03b      	b.n	1b922 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1b8aa:	1dbb      	adds	r3, r7, #6
   1b8ac:	781b      	ldrb	r3, [r3, #0]
   1b8ae:	2b02      	cmp	r3, #2
   1b8b0:	d109      	bne.n	1b8c6 <statusOnCall+0x4e>
	{
		status[index++]='A';
   1b8b2:	1dfb      	adds	r3, r7, #7
   1b8b4:	781b      	ldrb	r3, [r3, #0]
   1b8b6:	1dfa      	adds	r2, r7, #7
   1b8b8:	1c59      	adds	r1, r3, #1
   1b8ba:	7011      	strb	r1, [r2, #0]
   1b8bc:	001a      	movs	r2, r3
   1b8be:	003b      	movs	r3, r7
   1b8c0:	2141      	movs	r1, #65	; 0x41
   1b8c2:	5499      	strb	r1, [r3, r2]
   1b8c4:	e02d      	b.n	1b922 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1b8c6:	1dbb      	adds	r3, r7, #6
   1b8c8:	781b      	ldrb	r3, [r3, #0]
   1b8ca:	2b03      	cmp	r3, #3
   1b8cc:	d129      	bne.n	1b922 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1b8ce:	1d7c      	adds	r4, r7, #5
   1b8d0:	4b29      	ldr	r3, [pc, #164]	; (1b978 <statusOnCall+0x100>)
   1b8d2:	4798      	blx	r3
   1b8d4:	0003      	movs	r3, r0
   1b8d6:	7023      	strb	r3, [r4, #0]
		if (temp)
   1b8d8:	1d7b      	adds	r3, r7, #5
   1b8da:	781b      	ldrb	r3, [r3, #0]
   1b8dc:	2b00      	cmp	r3, #0
   1b8de:	d009      	beq.n	1b8f4 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1b8e0:	1dfb      	adds	r3, r7, #7
   1b8e2:	781b      	ldrb	r3, [r3, #0]
   1b8e4:	1dfa      	adds	r2, r7, #7
   1b8e6:	1c59      	adds	r1, r3, #1
   1b8e8:	7011      	strb	r1, [r2, #0]
   1b8ea:	001a      	movs	r2, r3
   1b8ec:	003b      	movs	r3, r7
   1b8ee:	212b      	movs	r1, #43	; 0x2b
   1b8f0:	5499      	strb	r1, [r3, r2]
   1b8f2:	e016      	b.n	1b922 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1b8f4:	1dfb      	adds	r3, r7, #7
   1b8f6:	781b      	ldrb	r3, [r3, #0]
   1b8f8:	1dfa      	adds	r2, r7, #7
   1b8fa:	1c59      	adds	r1, r3, #1
   1b8fc:	7011      	strb	r1, [r2, #0]
   1b8fe:	001a      	movs	r2, r3
   1b900:	003b      	movs	r3, r7
   1b902:	215f      	movs	r1, #95	; 0x5f
   1b904:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1b906:	4b1d      	ldr	r3, [pc, #116]	; (1b97c <statusOnCall+0x104>)
   1b908:	781b      	ldrb	r3, [r3, #0]
   1b90a:	b2db      	uxtb	r3, r3
   1b90c:	2b02      	cmp	r3, #2
   1b90e:	d008      	beq.n	1b922 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1b910:	1dfb      	adds	r3, r7, #7
   1b912:	781b      	ldrb	r3, [r3, #0]
   1b914:	1dfa      	adds	r2, r7, #7
   1b916:	1c59      	adds	r1, r3, #1
   1b918:	7011      	strb	r1, [r2, #0]
   1b91a:	001a      	movs	r2, r3
   1b91c:	003b      	movs	r3, r7
   1b91e:	2141      	movs	r1, #65	; 0x41
   1b920:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1b922:	4b17      	ldr	r3, [pc, #92]	; (1b980 <statusOnCall+0x108>)
   1b924:	785b      	ldrb	r3, [r3, #1]
   1b926:	2b00      	cmp	r3, #0
   1b928:	d009      	beq.n	1b93e <statusOnCall+0xc6>
	{
		status[index++]=')';
   1b92a:	1dfb      	adds	r3, r7, #7
   1b92c:	781b      	ldrb	r3, [r3, #0]
   1b92e:	1dfa      	adds	r2, r7, #7
   1b930:	1c59      	adds	r1, r3, #1
   1b932:	7011      	strb	r1, [r2, #0]
   1b934:	001a      	movs	r2, r3
   1b936:	003b      	movs	r3, r7
   1b938:	2129      	movs	r1, #41	; 0x29
   1b93a:	5499      	strb	r1, [r3, r2]
   1b93c:	e008      	b.n	1b950 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
   1b93e:	1dfb      	adds	r3, r7, #7
   1b940:	781b      	ldrb	r3, [r3, #0]
   1b942:	1dfa      	adds	r2, r7, #7
   1b944:	1c59      	adds	r1, r3, #1
   1b946:	7011      	strb	r1, [r2, #0]
   1b948:	001a      	movs	r2, r3
   1b94a:	003b      	movs	r3, r7
   1b94c:	215b      	movs	r1, #91	; 0x5b
   1b94e:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1b950:	1dfb      	adds	r3, r7, #7
   1b952:	781b      	ldrb	r3, [r3, #0]
   1b954:	1dfa      	adds	r2, r7, #7
   1b956:	1c59      	adds	r1, r3, #1
   1b958:	7011      	strb	r1, [r2, #0]
   1b95a:	001a      	movs	r2, r3
   1b95c:	003b      	movs	r3, r7
   1b95e:	2100      	movs	r1, #0
   1b960:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1b962:	003b      	movs	r3, r7
   1b964:	0018      	movs	r0, r3
   1b966:	4b07      	ldr	r3, [pc, #28]	; (1b984 <statusOnCall+0x10c>)
   1b968:	4798      	blx	r3
}
   1b96a:	46c0      	nop			; (mov r8, r8)
   1b96c:	46bd      	mov	sp, r7
   1b96e:	b003      	add	sp, #12
   1b970:	bd90      	pop	{r4, r7, pc}
   1b972:	46c0      	nop			; (mov r8, r8)
   1b974:	0001b0c1 	.word	0x0001b0c1
   1b978:	0001ab49 	.word	0x0001ab49
   1b97c:	2000073c 	.word	0x2000073c
   1b980:	20000650 	.word	0x20000650
   1b984:	000147fd 	.word	0x000147fd

0001b988 <voltageOnCall>:

void voltageOnCall(void)
{
   1b988:	b590      	push	{r4, r7, lr}
   1b98a:	b087      	sub	sp, #28
   1b98c:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1b98e:	4b0a      	ldr	r3, [pc, #40]	; (1b9b8 <voltageOnCall+0x30>)
   1b990:	681a      	ldr	r2, [r3, #0]
   1b992:	4b09      	ldr	r3, [pc, #36]	; (1b9b8 <voltageOnCall+0x30>)
   1b994:	685c      	ldr	r4, [r3, #4]
   1b996:	4b08      	ldr	r3, [pc, #32]	; (1b9b8 <voltageOnCall+0x30>)
   1b998:	689b      	ldr	r3, [r3, #8]
   1b99a:	4908      	ldr	r1, [pc, #32]	; (1b9bc <voltageOnCall+0x34>)
   1b99c:	0038      	movs	r0, r7
   1b99e:	9300      	str	r3, [sp, #0]
   1b9a0:	0023      	movs	r3, r4
   1b9a2:	4c07      	ldr	r4, [pc, #28]	; (1b9c0 <voltageOnCall+0x38>)
   1b9a4:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1b9a6:	003b      	movs	r3, r7
   1b9a8:	0018      	movs	r0, r3
   1b9aa:	4b06      	ldr	r3, [pc, #24]	; (1b9c4 <voltageOnCall+0x3c>)
   1b9ac:	4798      	blx	r3
}
   1b9ae:	46c0      	nop			; (mov r8, r8)
   1b9b0:	46bd      	mov	sp, r7
   1b9b2:	b005      	add	sp, #20
   1b9b4:	bd90      	pop	{r4, r7, pc}
   1b9b6:	46c0      	nop			; (mov r8, r8)
   1b9b8:	200006d8 	.word	0x200006d8
   1b9bc:	0002a93c 	.word	0x0002a93c
   1b9c0:	00029019 	.word	0x00029019
   1b9c4:	000147fd 	.word	0x000147fd

0001b9c8 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1b9c8:	b580      	push	{r7, lr}
   1b9ca:	b082      	sub	sp, #8
   1b9cc:	af00      	add	r7, sp, #0
   1b9ce:	0002      	movs	r2, r0
   1b9d0:	1dfb      	adds	r3, r7, #7
   1b9d2:	701a      	strb	r2, [r3, #0]
   1b9d4:	1dbb      	adds	r3, r7, #6
   1b9d6:	1c0a      	adds	r2, r1, #0
   1b9d8:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1b9da:	1dfb      	adds	r3, r7, #7
   1b9dc:	781b      	ldrb	r3, [r3, #0]
   1b9de:	4a0e      	ldr	r2, [pc, #56]	; (1ba18 <setM2MEventState+0x50>)
   1b9e0:	5cd3      	ldrb	r3, [r2, r3]
   1b9e2:	2b02      	cmp	r3, #2
   1b9e4:	d10e      	bne.n	1ba04 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1b9e6:	1dbb      	adds	r3, r7, #6
   1b9e8:	781b      	ldrb	r3, [r3, #0]
   1b9ea:	2b03      	cmp	r3, #3
   1b9ec:	d10a      	bne.n	1ba04 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1b9ee:	1dbb      	adds	r3, r7, #6
   1b9f0:	2200      	movs	r2, #0
   1b9f2:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1b9f4:	1dfb      	adds	r3, r7, #7
   1b9f6:	781b      	ldrb	r3, [r3, #0]
   1b9f8:	4a08      	ldr	r2, [pc, #32]	; (1ba1c <setM2MEventState+0x54>)
   1b9fa:	5cd3      	ldrb	r3, [r2, r3]
   1b9fc:	001a      	movs	r2, r3
   1b9fe:	4b08      	ldr	r3, [pc, #32]	; (1ba20 <setM2MEventState+0x58>)
   1ba00:	2100      	movs	r1, #0
   1ba02:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1ba04:	1dfb      	adds	r3, r7, #7
   1ba06:	781b      	ldrb	r3, [r3, #0]
   1ba08:	4a03      	ldr	r2, [pc, #12]	; (1ba18 <setM2MEventState+0x50>)
   1ba0a:	1db9      	adds	r1, r7, #6
   1ba0c:	7809      	ldrb	r1, [r1, #0]
   1ba0e:	54d1      	strb	r1, [r2, r3]
}
   1ba10:	46c0      	nop			; (mov r8, r8)
   1ba12:	46bd      	mov	sp, r7
   1ba14:	b002      	add	sp, #8
   1ba16:	bd80      	pop	{r7, pc}
   1ba18:	200007b8 	.word	0x200007b8
   1ba1c:	20000734 	.word	0x20000734
   1ba20:	20000708 	.word	0x20000708

0001ba24 <M2MEventManager>:

void M2MEventManager(void)
{
   1ba24:	b580      	push	{r7, lr}
   1ba26:	b082      	sub	sp, #8
   1ba28:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1ba2a:	1dfb      	adds	r3, r7, #7
   1ba2c:	2202      	movs	r2, #2
   1ba2e:	701a      	strb	r2, [r3, #0]
	while(j--)
   1ba30:	e00a      	b.n	1ba48 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1ba32:	1dfb      	adds	r3, r7, #7
   1ba34:	781b      	ldrb	r3, [r3, #0]
   1ba36:	4a0a      	ldr	r2, [pc, #40]	; (1ba60 <M2MEventManager+0x3c>)
   1ba38:	5cd3      	ldrb	r3, [r2, r3]
   1ba3a:	2b01      	cmp	r3, #1
   1ba3c:	d104      	bne.n	1ba48 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1ba3e:	1dfb      	adds	r3, r7, #7
   1ba40:	781b      	ldrb	r3, [r3, #0]
   1ba42:	0018      	movs	r0, r3
   1ba44:	4b07      	ldr	r3, [pc, #28]	; (1ba64 <M2MEventManager+0x40>)
   1ba46:	4798      	blx	r3
	while(j--)
   1ba48:	1dfb      	adds	r3, r7, #7
   1ba4a:	781b      	ldrb	r3, [r3, #0]
   1ba4c:	1dfa      	adds	r2, r7, #7
   1ba4e:	1e59      	subs	r1, r3, #1
   1ba50:	7011      	strb	r1, [r2, #0]
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d1ed      	bne.n	1ba32 <M2MEventManager+0xe>
		}
	}
}
   1ba56:	46c0      	nop			; (mov r8, r8)
   1ba58:	46bd      	mov	sp, r7
   1ba5a:	b002      	add	sp, #8
   1ba5c:	bd80      	pop	{r7, pc}
   1ba5e:	46c0      	nop			; (mov r8, r8)
   1ba60:	200007b8 	.word	0x200007b8
   1ba64:	00014a4d 	.word	0x00014a4d

0001ba68 <SIMEventManager>:

void SIMEventManager(void)
{
   1ba68:	b590      	push	{r4, r7, lr}
   1ba6a:	b083      	sub	sp, #12
   1ba6c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1ba6e:	1dfb      	adds	r3, r7, #7
   1ba70:	2200      	movs	r2, #0
   1ba72:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1ba74:	4b1e      	ldr	r3, [pc, #120]	; (1baf0 <SIMEventManager+0x88>)
   1ba76:	795b      	ldrb	r3, [r3, #5]
   1ba78:	2b00      	cmp	r3, #0
   1ba7a:	d00b      	beq.n	1ba94 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1ba7c:	4b1c      	ldr	r3, [pc, #112]	; (1baf0 <SIMEventManager+0x88>)
   1ba7e:	791b      	ldrb	r3, [r3, #4]
   1ba80:	2b00      	cmp	r3, #0
   1ba82:	d003      	beq.n	1ba8c <SIMEventManager+0x24>
		{
			i = 19;
   1ba84:	1dfb      	adds	r3, r7, #7
   1ba86:	2213      	movs	r2, #19
   1ba88:	701a      	strb	r2, [r3, #0]
   1ba8a:	e025      	b.n	1bad8 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1ba8c:	1dfb      	adds	r3, r7, #7
   1ba8e:	2211      	movs	r2, #17
   1ba90:	701a      	strb	r2, [r3, #0]
   1ba92:	e021      	b.n	1bad8 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1ba94:	4b16      	ldr	r3, [pc, #88]	; (1baf0 <SIMEventManager+0x88>)
   1ba96:	785b      	ldrb	r3, [r3, #1]
   1ba98:	2b00      	cmp	r3, #0
   1ba9a:	d003      	beq.n	1baa4 <SIMEventManager+0x3c>
		{
			i = 14;
   1ba9c:	1dfb      	adds	r3, r7, #7
   1ba9e:	220e      	movs	r2, #14
   1baa0:	701a      	strb	r2, [r3, #0]
   1baa2:	e019      	b.n	1bad8 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1baa4:	1dfb      	adds	r3, r7, #7
   1baa6:	220c      	movs	r2, #12
   1baa8:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1baaa:	e015      	b.n	1bad8 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1baac:	1dfb      	adds	r3, r7, #7
   1baae:	781b      	ldrb	r3, [r3, #0]
   1bab0:	4a10      	ldr	r2, [pc, #64]	; (1baf4 <SIMEventManager+0x8c>)
   1bab2:	5cd3      	ldrb	r3, [r2, r3]
   1bab4:	2201      	movs	r2, #1
   1bab6:	4053      	eors	r3, r2
   1bab8:	b2db      	uxtb	r3, r3
   1baba:	2b00      	cmp	r3, #0
   1babc:	d00c      	beq.n	1bad8 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1babe:	1dfb      	adds	r3, r7, #7
   1bac0:	781c      	ldrb	r4, [r3, #0]
   1bac2:	1dfb      	adds	r3, r7, #7
   1bac4:	781b      	ldrb	r3, [r3, #0]
   1bac6:	4a0c      	ldr	r2, [pc, #48]	; (1baf8 <SIMEventManager+0x90>)
   1bac8:	5cd3      	ldrb	r3, [r2, r3]
   1baca:	0018      	movs	r0, r3
   1bacc:	4b0b      	ldr	r3, [pc, #44]	; (1bafc <SIMEventManager+0x94>)
   1bace:	4798      	blx	r3
   1bad0:	0003      	movs	r3, r0
   1bad2:	001a      	movs	r2, r3
   1bad4:	4b07      	ldr	r3, [pc, #28]	; (1baf4 <SIMEventManager+0x8c>)
   1bad6:	551a      	strb	r2, [r3, r4]
	while(i--)
   1bad8:	1dfb      	adds	r3, r7, #7
   1bada:	781b      	ldrb	r3, [r3, #0]
   1badc:	1dfa      	adds	r2, r7, #7
   1bade:	1e59      	subs	r1, r3, #1
   1bae0:	7011      	strb	r1, [r2, #0]
   1bae2:	2b00      	cmp	r3, #0
   1bae4:	d1e2      	bne.n	1baac <SIMEventManager+0x44>
	}
}
   1bae6:	46c0      	nop			; (mov r8, r8)
   1bae8:	46bd      	mov	sp, r7
   1baea:	b003      	add	sp, #12
   1baec:	bd90      	pop	{r4, r7, pc}
   1baee:	46c0      	nop			; (mov r8, r8)
   1baf0:	20000628 	.word	0x20000628
   1baf4:	20000708 	.word	0x20000708
   1baf8:	200007f4 	.word	0x200007f4
   1bafc:	00014931 	.word	0x00014931

0001bb00 <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1bb00:	b580      	push	{r7, lr}
   1bb02:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1bb04:	4b07      	ldr	r3, [pc, #28]	; (1bb24 <MotorVoltageBypassTimerOver+0x24>)
   1bb06:	4798      	blx	r3
   1bb08:	0002      	movs	r2, r0
   1bb0a:	4b07      	ldr	r3, [pc, #28]	; (1bb28 <MotorVoltageBypassTimerOver+0x28>)
   1bb0c:	681b      	ldr	r3, [r3, #0]
   1bb0e:	1ad2      	subs	r2, r2, r3
   1bb10:	4b06      	ldr	r3, [pc, #24]	; (1bb2c <MotorVoltageBypassTimerOver+0x2c>)
   1bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb14:	4293      	cmp	r3, r2
   1bb16:	419b      	sbcs	r3, r3
   1bb18:	425b      	negs	r3, r3
   1bb1a:	b2db      	uxtb	r3, r3
}
   1bb1c:	0018      	movs	r0, r3
   1bb1e:	46bd      	mov	sp, r7
   1bb20:	bd80      	pop	{r7, pc}
   1bb22:	46c0      	nop			; (mov r8, r8)
   1bb24:	0002024d 	.word	0x0002024d
   1bb28:	20000778 	.word	0x20000778
   1bb2c:	20000650 	.word	0x20000650

0001bb30 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1bb30:	b580      	push	{r7, lr}
   1bb32:	b084      	sub	sp, #16
   1bb34:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress))
   1bb36:	4b77      	ldr	r3, [pc, #476]	; (1bd14 <checkCurrentConsumption+0x1e4>)
   1bb38:	781b      	ldrb	r3, [r3, #0]
   1bb3a:	2b00      	cmp	r3, #0
   1bb3c:	d000      	beq.n	1bb40 <checkCurrentConsumption+0x10>
   1bb3e:	e0e4      	b.n	1bd0a <checkCurrentConsumption+0x1da>
   1bb40:	4b75      	ldr	r3, [pc, #468]	; (1bd18 <checkCurrentConsumption+0x1e8>)
   1bb42:	781b      	ldrb	r3, [r3, #0]
   1bb44:	2b00      	cmp	r3, #0
   1bb46:	d000      	beq.n	1bb4a <checkCurrentConsumption+0x1a>
   1bb48:	e0df      	b.n	1bd0a <checkCurrentConsumption+0x1da>
   1bb4a:	4b74      	ldr	r3, [pc, #464]	; (1bd1c <checkCurrentConsumption+0x1ec>)
   1bb4c:	4798      	blx	r3
   1bb4e:	0003      	movs	r3, r0
   1bb50:	001a      	movs	r2, r3
   1bb52:	2301      	movs	r3, #1
   1bb54:	4053      	eors	r3, r2
   1bb56:	b2db      	uxtb	r3, r3
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	d000      	beq.n	1bb5e <checkCurrentConsumption+0x2e>
   1bb5c:	e0d5      	b.n	1bd0a <checkCurrentConsumption+0x1da>
   1bb5e:	4b70      	ldr	r3, [pc, #448]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bb60:	7bdb      	ldrb	r3, [r3, #15]
   1bb62:	2b00      	cmp	r3, #0
   1bb64:	d100      	bne.n	1bb68 <checkCurrentConsumption+0x38>
   1bb66:	e0d0      	b.n	1bd0a <checkCurrentConsumption+0x1da>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1bb68:	4b6e      	ldr	r3, [pc, #440]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bb6a:	781b      	ldrb	r3, [r3, #0]
   1bb6c:	2b00      	cmp	r3, #0
   1bb6e:	d00b      	beq.n	1bb88 <checkCurrentConsumption+0x58>
   1bb70:	4b6d      	ldr	r3, [pc, #436]	; (1bd28 <checkCurrentConsumption+0x1f8>)
   1bb72:	4798      	blx	r3
   1bb74:	0002      	movs	r2, r0
   1bb76:	4b6d      	ldr	r3, [pc, #436]	; (1bd2c <checkCurrentConsumption+0x1fc>)
   1bb78:	681b      	ldr	r3, [r3, #0]
   1bb7a:	1ad3      	subs	r3, r2, r3
   1bb7c:	4a6c      	ldr	r2, [pc, #432]	; (1bd30 <checkCurrentConsumption+0x200>)
   1bb7e:	4293      	cmp	r3, r2
   1bb80:	d902      	bls.n	1bb88 <checkCurrentConsumption+0x58>
	{
		enableCurrentBuffer=false;
   1bb82:	4b68      	ldr	r3, [pc, #416]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bb84:	2200      	movs	r2, #0
   1bb86:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1bb88:	2300      	movs	r3, #0
   1bb8a:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1bb8c:	4b64      	ldr	r3, [pc, #400]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bb8e:	2226      	movs	r2, #38	; 0x26
   1bb90:	5c9b      	ldrb	r3, [r3, r2]
   1bb92:	2b01      	cmp	r3, #1
   1bb94:	d103      	bne.n	1bb9e <checkCurrentConsumption+0x6e>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1bb96:	4b67      	ldr	r3, [pc, #412]	; (1bd34 <checkCurrentConsumption+0x204>)
   1bb98:	6a1b      	ldr	r3, [r3, #32]
   1bb9a:	60fb      	str	r3, [r7, #12]
   1bb9c:	e002      	b.n	1bba4 <checkCurrentConsumption+0x74>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1bb9e:	4b65      	ldr	r3, [pc, #404]	; (1bd34 <checkCurrentConsumption+0x204>)
   1bba0:	691b      	ldr	r3, [r3, #16]
   1bba2:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1bba4:	4b64      	ldr	r3, [pc, #400]	; (1bd38 <checkCurrentConsumption+0x208>)
   1bba6:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1bba8:	4b5e      	ldr	r3, [pc, #376]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bbaa:	781b      	ldrb	r3, [r3, #0]
   1bbac:	2b00      	cmp	r3, #0
   1bbae:	d00b      	beq.n	1bbc8 <checkCurrentConsumption+0x98>
   1bbb0:	4b5b      	ldr	r3, [pc, #364]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bbb2:	691b      	ldr	r3, [r3, #16]
   1bbb4:	005a      	lsls	r2, r3, #1
   1bbb6:	68fb      	ldr	r3, [r7, #12]
   1bbb8:	429a      	cmp	r2, r3
   1bbba:	d205      	bcs.n	1bbc8 <checkCurrentConsumption+0x98>
	{
		temp2 = CR_OVER2;
   1bbbc:	1dfb      	adds	r3, r7, #7
   1bbbe:	2202      	movs	r2, #2
   1bbc0:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1bbc2:	4b5e      	ldr	r3, [pc, #376]	; (1bd3c <checkCurrentConsumption+0x20c>)
   1bbc4:	60bb      	str	r3, [r7, #8]
   1bbc6:	e065      	b.n	1bc94 <checkCurrentConsumption+0x164>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1bbc8:	4b56      	ldr	r3, [pc, #344]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bbca:	781b      	ldrb	r3, [r3, #0]
   1bbcc:	2201      	movs	r2, #1
   1bbce:	4053      	eors	r3, r2
   1bbd0:	b2db      	uxtb	r3, r3
   1bbd2:	2b00      	cmp	r3, #0
   1bbd4:	d00c      	beq.n	1bbf0 <checkCurrentConsumption+0xc0>
   1bbd6:	4b52      	ldr	r3, [pc, #328]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bbd8:	691b      	ldr	r3, [r3, #16]
   1bbda:	005a      	lsls	r2, r3, #1
   1bbdc:	68fb      	ldr	r3, [r7, #12]
   1bbde:	429a      	cmp	r2, r3
   1bbe0:	d206      	bcs.n	1bbf0 <checkCurrentConsumption+0xc0>
	{
		temp2 = CR_OVER;
   1bbe2:	1dfb      	adds	r3, r7, #7
   1bbe4:	2201      	movs	r2, #1
   1bbe6:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bbe8:	68bb      	ldr	r3, [r7, #8]
   1bbea:	089b      	lsrs	r3, r3, #2
   1bbec:	60bb      	str	r3, [r7, #8]
   1bbee:	e051      	b.n	1bc94 <checkCurrentConsumption+0x164>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1bbf0:	4b4c      	ldr	r3, [pc, #304]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bbf2:	781b      	ldrb	r3, [r3, #0]
   1bbf4:	2201      	movs	r2, #1
   1bbf6:	4053      	eors	r3, r2
   1bbf8:	b2db      	uxtb	r3, r3
   1bbfa:	2b00      	cmp	r3, #0
   1bbfc:	d00f      	beq.n	1bc1e <checkCurrentConsumption+0xee>
   1bbfe:	4b48      	ldr	r3, [pc, #288]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bc00:	691a      	ldr	r2, [r3, #16]
   1bc02:	4b47      	ldr	r3, [pc, #284]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bc04:	691b      	ldr	r3, [r3, #16]
   1bc06:	085b      	lsrs	r3, r3, #1
   1bc08:	18d2      	adds	r2, r2, r3
   1bc0a:	68fb      	ldr	r3, [r7, #12]
   1bc0c:	429a      	cmp	r2, r3
   1bc0e:	d206      	bcs.n	1bc1e <checkCurrentConsumption+0xee>
	{
		temp2 = CR_OVER;
   1bc10:	1dfb      	adds	r3, r7, #7
   1bc12:	2201      	movs	r2, #1
   1bc14:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1bc16:	68bb      	ldr	r3, [r7, #8]
   1bc18:	085b      	lsrs	r3, r3, #1
   1bc1a:	60bb      	str	r3, [r7, #8]
   1bc1c:	e03a      	b.n	1bc94 <checkCurrentConsumption+0x164>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1bc1e:	4b41      	ldr	r3, [pc, #260]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bc20:	781b      	ldrb	r3, [r3, #0]
   1bc22:	2201      	movs	r2, #1
   1bc24:	4053      	eors	r3, r2
   1bc26:	b2db      	uxtb	r3, r3
   1bc28:	2b00      	cmp	r3, #0
   1bc2a:	d008      	beq.n	1bc3e <checkCurrentConsumption+0x10e>
   1bc2c:	4b3c      	ldr	r3, [pc, #240]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bc2e:	695a      	ldr	r2, [r3, #20]
   1bc30:	68fb      	ldr	r3, [r7, #12]
   1bc32:	429a      	cmp	r2, r3
   1bc34:	d203      	bcs.n	1bc3e <checkCurrentConsumption+0x10e>
	{
		temp2 = CR_OVER;
   1bc36:	1dfb      	adds	r3, r7, #7
   1bc38:	2201      	movs	r2, #1
   1bc3a:	701a      	strb	r2, [r3, #0]
   1bc3c:	e02a      	b.n	1bc94 <checkCurrentConsumption+0x164>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1bc3e:	4b39      	ldr	r3, [pc, #228]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bc40:	781b      	ldrb	r3, [r3, #0]
   1bc42:	2201      	movs	r2, #1
   1bc44:	4053      	eors	r3, r2
   1bc46:	b2db      	uxtb	r3, r3
   1bc48:	2b00      	cmp	r3, #0
   1bc4a:	d00b      	beq.n	1bc64 <checkCurrentConsumption+0x134>
   1bc4c:	4b34      	ldr	r3, [pc, #208]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bc4e:	699a      	ldr	r2, [r3, #24]
   1bc50:	68fb      	ldr	r3, [r7, #12]
   1bc52:	429a      	cmp	r2, r3
   1bc54:	d906      	bls.n	1bc64 <checkCurrentConsumption+0x134>
	{
		temp2 = CR_UNDER;
   1bc56:	1dfb      	adds	r3, r7, #7
   1bc58:	2202      	movs	r2, #2
   1bc5a:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bc5c:	68bb      	ldr	r3, [r7, #8]
   1bc5e:	089b      	lsrs	r3, r3, #2
   1bc60:	60bb      	str	r3, [r7, #8]
   1bc62:	e017      	b.n	1bc94 <checkCurrentConsumption+0x164>
	}
	else if(starDeltaTimerOn && enableCurrentBuffer && temp < (user_settings_parameter_struct.underloadAddress>>1))
   1bc64:	4b36      	ldr	r3, [pc, #216]	; (1bd40 <checkCurrentConsumption+0x210>)
   1bc66:	781b      	ldrb	r3, [r3, #0]
   1bc68:	2b00      	cmp	r3, #0
   1bc6a:	d010      	beq.n	1bc8e <checkCurrentConsumption+0x15e>
   1bc6c:	4b2d      	ldr	r3, [pc, #180]	; (1bd24 <checkCurrentConsumption+0x1f4>)
   1bc6e:	781b      	ldrb	r3, [r3, #0]
   1bc70:	2b00      	cmp	r3, #0
   1bc72:	d00c      	beq.n	1bc8e <checkCurrentConsumption+0x15e>
   1bc74:	4b2a      	ldr	r3, [pc, #168]	; (1bd20 <checkCurrentConsumption+0x1f0>)
   1bc76:	699b      	ldr	r3, [r3, #24]
   1bc78:	085a      	lsrs	r2, r3, #1
   1bc7a:	68fb      	ldr	r3, [r7, #12]
   1bc7c:	429a      	cmp	r2, r3
   1bc7e:	d906      	bls.n	1bc8e <checkCurrentConsumption+0x15e>
	{
		temp2 = CR_UNDER;
   1bc80:	1dfb      	adds	r3, r7, #7
   1bc82:	2202      	movs	r2, #2
   1bc84:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bc86:	68bb      	ldr	r3, [r7, #8]
   1bc88:	089b      	lsrs	r3, r3, #2
   1bc8a:	60bb      	str	r3, [r7, #8]
   1bc8c:	e002      	b.n	1bc94 <checkCurrentConsumption+0x164>
	}
	else
	{
		temp2= CR_NORMAL;
   1bc8e:	1dfb      	adds	r3, r7, #7
   1bc90:	2200      	movs	r2, #0
   1bc92:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1bc94:	4b2b      	ldr	r3, [pc, #172]	; (1bd44 <checkCurrentConsumption+0x214>)
   1bc96:	781b      	ldrb	r3, [r3, #0]
   1bc98:	1dfa      	adds	r2, r7, #7
   1bc9a:	7812      	ldrb	r2, [r2, #0]
   1bc9c:	429a      	cmp	r2, r3
   1bc9e:	d12a      	bne.n	1bcf6 <checkCurrentConsumption+0x1c6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1bca0:	4b21      	ldr	r3, [pc, #132]	; (1bd28 <checkCurrentConsumption+0x1f8>)
   1bca2:	4798      	blx	r3
   1bca4:	0002      	movs	r2, r0
   1bca6:	4b28      	ldr	r3, [pc, #160]	; (1bd48 <checkCurrentConsumption+0x218>)
   1bca8:	681b      	ldr	r3, [r3, #0]
   1bcaa:	1ad2      	subs	r2, r2, r3
   1bcac:	68bb      	ldr	r3, [r7, #8]
   1bcae:	429a      	cmp	r2, r3
   1bcb0:	d92c      	bls.n	1bd0c <checkCurrentConsumption+0x1dc>
		{
			if(temp2==CR_OVER)
   1bcb2:	1dfb      	adds	r3, r7, #7
   1bcb4:	781b      	ldrb	r3, [r3, #0]
   1bcb6:	2b01      	cmp	r3, #1
   1bcb8:	d10c      	bne.n	1bcd4 <checkCurrentConsumption+0x1a4>
			{
				stopMotor(false,true,false);
   1bcba:	2200      	movs	r2, #0
   1bcbc:	2101      	movs	r1, #1
   1bcbe:	2000      	movs	r0, #0
   1bcc0:	4b22      	ldr	r3, [pc, #136]	; (1bd4c <checkCurrentConsumption+0x21c>)
   1bcc2:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1bcc4:	2042      	movs	r0, #66	; 0x42
   1bcc6:	4b22      	ldr	r3, [pc, #136]	; (1bd50 <checkCurrentConsumption+0x220>)
   1bcc8:	4798      	blx	r3
   1bcca:	0003      	movs	r3, r0
   1bccc:	001a      	movs	r2, r3
   1bcce:	4b21      	ldr	r3, [pc, #132]	; (1bd54 <checkCurrentConsumption+0x224>)
   1bcd0:	731a      	strb	r2, [r3, #12]
   1bcd2:	e01b      	b.n	1bd0c <checkCurrentConsumption+0x1dc>
			}
			else if(temp2==CR_UNDER)
   1bcd4:	1dfb      	adds	r3, r7, #7
   1bcd6:	781b      	ldrb	r3, [r3, #0]
   1bcd8:	2b02      	cmp	r3, #2
   1bcda:	d117      	bne.n	1bd0c <checkCurrentConsumption+0x1dc>
			{
				stopMotor(false,true,false);
   1bcdc:	2200      	movs	r2, #0
   1bcde:	2101      	movs	r1, #1
   1bce0:	2000      	movs	r0, #0
   1bce2:	4b1a      	ldr	r3, [pc, #104]	; (1bd4c <checkCurrentConsumption+0x21c>)
   1bce4:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1bce6:	204a      	movs	r0, #74	; 0x4a
   1bce8:	4b19      	ldr	r3, [pc, #100]	; (1bd50 <checkCurrentConsumption+0x220>)
   1bcea:	4798      	blx	r3
   1bcec:	0003      	movs	r3, r0
   1bcee:	001a      	movs	r2, r3
   1bcf0:	4b18      	ldr	r3, [pc, #96]	; (1bd54 <checkCurrentConsumption+0x224>)
   1bcf2:	735a      	strb	r2, [r3, #13]
   1bcf4:	e00a      	b.n	1bd0c <checkCurrentConsumption+0x1dc>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1bcf6:	4b0c      	ldr	r3, [pc, #48]	; (1bd28 <checkCurrentConsumption+0x1f8>)
   1bcf8:	4798      	blx	r3
   1bcfa:	0002      	movs	r2, r0
   1bcfc:	4b12      	ldr	r3, [pc, #72]	; (1bd48 <checkCurrentConsumption+0x218>)
   1bcfe:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1bd00:	4b10      	ldr	r3, [pc, #64]	; (1bd44 <checkCurrentConsumption+0x214>)
   1bd02:	1dfa      	adds	r2, r7, #7
   1bd04:	7812      	ldrb	r2, [r2, #0]
   1bd06:	701a      	strb	r2, [r3, #0]
   1bd08:	e000      	b.n	1bd0c <checkCurrentConsumption+0x1dc>
		return;
   1bd0a:	46c0      	nop			; (mov r8, r8)
	}
}
   1bd0c:	46bd      	mov	sp, r7
   1bd0e:	b004      	add	sp, #16
   1bd10:	bd80      	pop	{r7, pc}
   1bd12:	46c0      	nop			; (mov r8, r8)
   1bd14:	2000078d 	.word	0x2000078d
   1bd18:	2000077c 	.word	0x2000077c
   1bd1c:	0001aaf5 	.word	0x0001aaf5
   1bd20:	20000650 	.word	0x20000650
   1bd24:	20000754 	.word	0x20000754
   1bd28:	0002024d 	.word	0x0002024d
   1bd2c:	20000788 	.word	0x20000788
   1bd30:	00007530 	.word	0x00007530
   1bd34:	200006d8 	.word	0x200006d8
   1bd38:	00002ee0 	.word	0x00002ee0
   1bd3c:	00004650 	.word	0x00004650
   1bd40:	2000078f 	.word	0x2000078f
   1bd44:	20000772 	.word	0x20000772
   1bd48:	20000760 	.word	0x20000760
   1bd4c:	0001b439 	.word	0x0001b439
   1bd50:	00014931 	.word	0x00014931
   1bd54:	20000708 	.word	0x20000708

0001bd58 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1bd58:	b580      	push	{r7, lr}
   1bd5a:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1bd5c:	4b02      	ldr	r3, [pc, #8]	; (1bd68 <button_detect_pin_callback+0x10>)
   1bd5e:	2201      	movs	r2, #1
   1bd60:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1bd62:	46c0      	nop			; (mov r8, r8)
   1bd64:	46bd      	mov	sp, r7
   1bd66:	bd80      	pop	{r7, pc}
   1bd68:	20000793 	.word	0x20000793

0001bd6c <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1bd6c:	b590      	push	{r4, r7, lr}
   1bd6e:	b087      	sub	sp, #28
   1bd70:	af00      	add	r7, sp, #0
   1bd72:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1bd74:	4bce      	ldr	r3, [pc, #824]	; (1c0b0 <vTask_MOTORCONTROL+0x344>)
   1bd76:	4798      	blx	r3
	
	configure_ac();
   1bd78:	4bce      	ldr	r3, [pc, #824]	; (1c0b4 <vTask_MOTORCONTROL+0x348>)
   1bd7a:	4798      	blx	r3
	configure_rtc();
   1bd7c:	4bce      	ldr	r3, [pc, #824]	; (1c0b8 <vTask_MOTORCONTROL+0x34c>)
   1bd7e:	4798      	blx	r3
	configure_event();
   1bd80:	4bce      	ldr	r3, [pc, #824]	; (1c0bc <vTask_MOTORCONTROL+0x350>)
   1bd82:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1bd84:	4bce      	ldr	r3, [pc, #824]	; (1c0c0 <vTask_MOTORCONTROL+0x354>)
   1bd86:	2200      	movs	r2, #0
   1bd88:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1bd8a:	4bce      	ldr	r3, [pc, #824]	; (1c0c4 <vTask_MOTORCONTROL+0x358>)
   1bd8c:	2200      	movs	r2, #0
   1bd8e:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1bd90:	4bcd      	ldr	r3, [pc, #820]	; (1c0c8 <vTask_MOTORCONTROL+0x35c>)
   1bd92:	2200      	movs	r2, #0
   1bd94:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1bd96:	2315      	movs	r3, #21
   1bd98:	18fb      	adds	r3, r7, r3
   1bd9a:	2201      	movs	r2, #1
   1bd9c:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1bd9e:	4bcb      	ldr	r3, [pc, #812]	; (1c0cc <vTask_MOTORCONTROL+0x360>)
   1bda0:	4798      	blx	r3
   1bda2:	0003      	movs	r3, r0
   1bda4:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1bda6:	4bca      	ldr	r3, [pc, #808]	; (1c0d0 <vTask_MOTORCONTROL+0x364>)
   1bda8:	2201      	movs	r2, #1
   1bdaa:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1bdac:	2315      	movs	r3, #21
   1bdae:	18fc      	adds	r4, r7, r3
   1bdb0:	4bc8      	ldr	r3, [pc, #800]	; (1c0d4 <vTask_MOTORCONTROL+0x368>)
   1bdb2:	2100      	movs	r1, #0
   1bdb4:	0018      	movs	r0, r3
   1bdb6:	4bc8      	ldr	r3, [pc, #800]	; (1c0d8 <vTask_MOTORCONTROL+0x36c>)
   1bdb8:	4798      	blx	r3
   1bdba:	0003      	movs	r3, r0
   1bdbc:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1bdbe:	23fa      	movs	r3, #250	; 0xfa
   1bdc0:	005b      	lsls	r3, r3, #1
   1bdc2:	0018      	movs	r0, r3
   1bdc4:	4bc5      	ldr	r3, [pc, #788]	; (1c0dc <vTask_MOTORCONTROL+0x370>)
   1bdc6:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1bdc8:	2315      	movs	r3, #21
   1bdca:	18fc      	adds	r4, r7, r3
   1bdcc:	4bc1      	ldr	r3, [pc, #772]	; (1c0d4 <vTask_MOTORCONTROL+0x368>)
   1bdce:	2100      	movs	r1, #0
   1bdd0:	0018      	movs	r0, r3
   1bdd2:	4bc1      	ldr	r3, [pc, #772]	; (1c0d8 <vTask_MOTORCONTROL+0x36c>)
   1bdd4:	4798      	blx	r3
   1bdd6:	0003      	movs	r3, r0
   1bdd8:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1bdda:	2315      	movs	r3, #21
   1bddc:	18fb      	adds	r3, r7, r3
   1bdde:	781b      	ldrb	r3, [r3, #0]
   1bde0:	2204      	movs	r2, #4
   1bde2:	4013      	ands	r3, r2
   1bde4:	d003      	beq.n	1bdee <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
   1bde6:	4bbe      	ldr	r3, [pc, #760]	; (1c0e0 <vTask_MOTORCONTROL+0x374>)
   1bde8:	2201      	movs	r2, #1
   1bdea:	701a      	strb	r2, [r3, #0]
   1bdec:	e002      	b.n	1bdf4 <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
   1bdee:	4bbc      	ldr	r3, [pc, #752]	; (1c0e0 <vTask_MOTORCONTROL+0x374>)
   1bdf0:	2200      	movs	r2, #0
   1bdf2:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1bdf4:	4bbb      	ldr	r3, [pc, #748]	; (1c0e4 <vTask_MOTORCONTROL+0x378>)
   1bdf6:	2200      	movs	r2, #0
   1bdf8:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
   1bdfa:	4bbb      	ldr	r3, [pc, #748]	; (1c0e8 <vTask_MOTORCONTROL+0x37c>)
   1bdfc:	2200      	movs	r2, #0
   1bdfe:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
   1be00:	4bba      	ldr	r3, [pc, #744]	; (1c0ec <vTask_MOTORCONTROL+0x380>)
   1be02:	220a      	movs	r2, #10
   1be04:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1be06:	4bba      	ldr	r3, [pc, #744]	; (1c0f0 <vTask_MOTORCONTROL+0x384>)
   1be08:	2200      	movs	r2, #0
   1be0a:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1be0c:	4bb9      	ldr	r3, [pc, #740]	; (1c0f4 <vTask_MOTORCONTROL+0x388>)
   1be0e:	2214      	movs	r2, #20
   1be10:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1be12:	4bb9      	ldr	r3, [pc, #740]	; (1c0f8 <vTask_MOTORCONTROL+0x38c>)
   1be14:	2200      	movs	r2, #0
   1be16:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1be18:	4bb8      	ldr	r3, [pc, #736]	; (1c0fc <vTask_MOTORCONTROL+0x390>)
   1be1a:	2200      	movs	r2, #0
   1be1c:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1be1e:	4bb8      	ldr	r3, [pc, #736]	; (1c100 <vTask_MOTORCONTROL+0x394>)
   1be20:	2214      	movs	r2, #20
   1be22:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1be24:	4bb7      	ldr	r3, [pc, #732]	; (1c104 <vTask_MOTORCONTROL+0x398>)
   1be26:	2200      	movs	r2, #0
   1be28:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1be2a:	2000      	movs	r0, #0
   1be2c:	4bb6      	ldr	r3, [pc, #728]	; (1c108 <vTask_MOTORCONTROL+0x39c>)
   1be2e:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1be30:	2000      	movs	r0, #0
   1be32:	4bb6      	ldr	r3, [pc, #728]	; (1c10c <vTask_MOTORCONTROL+0x3a0>)
   1be34:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1be36:	2000      	movs	r0, #0
   1be38:	4bb5      	ldr	r3, [pc, #724]	; (1c110 <vTask_MOTORCONTROL+0x3a4>)
   1be3a:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1be3c:	4bb5      	ldr	r3, [pc, #724]	; (1c114 <vTask_MOTORCONTROL+0x3a8>)
   1be3e:	0018      	movs	r0, r3
   1be40:	4bb5      	ldr	r3, [pc, #724]	; (1c118 <vTask_MOTORCONTROL+0x3ac>)
   1be42:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1be44:	4bb5      	ldr	r3, [pc, #724]	; (1c11c <vTask_MOTORCONTROL+0x3b0>)
   1be46:	0018      	movs	r0, r3
   1be48:	4bb3      	ldr	r3, [pc, #716]	; (1c118 <vTask_MOTORCONTROL+0x3ac>)
   1be4a:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1be4c:	4bb4      	ldr	r3, [pc, #720]	; (1c120 <vTask_MOTORCONTROL+0x3b4>)
   1be4e:	0018      	movs	r0, r3
   1be50:	4bb1      	ldr	r3, [pc, #708]	; (1c118 <vTask_MOTORCONTROL+0x3ac>)
   1be52:	4798      	blx	r3
	
	lastPressTime=0;
   1be54:	4bb3      	ldr	r3, [pc, #716]	; (1c124 <vTask_MOTORCONTROL+0x3b8>)
   1be56:	2200      	movs	r2, #0
   1be58:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1be5a:	4bb3      	ldr	r3, [pc, #716]	; (1c128 <vTask_MOTORCONTROL+0x3bc>)
   1be5c:	2200      	movs	r2, #0
   1be5e:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1be60:	4bb2      	ldr	r3, [pc, #712]	; (1c12c <vTask_MOTORCONTROL+0x3c0>)
   1be62:	2200      	movs	r2, #0
   1be64:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1be66:	4bb2      	ldr	r3, [pc, #712]	; (1c130 <vTask_MOTORCONTROL+0x3c4>)
   1be68:	2200      	movs	r2, #0
   1be6a:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1be6c:	2317      	movs	r3, #23
   1be6e:	18fb      	adds	r3, r7, r3
   1be70:	2200      	movs	r2, #0
   1be72:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1be74:	4baf      	ldr	r3, [pc, #700]	; (1c134 <vTask_MOTORCONTROL+0x3c8>)
   1be76:	785b      	ldrb	r3, [r3, #1]
   1be78:	2b00      	cmp	r3, #0
   1be7a:	d004      	beq.n	1be86 <vTask_MOTORCONTROL+0x11a>
	{
		i=14;
   1be7c:	2317      	movs	r3, #23
   1be7e:	18fb      	adds	r3, r7, r3
   1be80:	220e      	movs	r2, #14
   1be82:	701a      	strb	r2, [r3, #0]
   1be84:	e00a      	b.n	1be9c <vTask_MOTORCONTROL+0x130>
	}
	else
	{
		i = 12;
   1be86:	2317      	movs	r3, #23
   1be88:	18fb      	adds	r3, r7, r3
   1be8a:	220c      	movs	r2, #12
   1be8c:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1be8e:	e005      	b.n	1be9c <vTask_MOTORCONTROL+0x130>
	{
		simEventTemp[i] = true;
   1be90:	2317      	movs	r3, #23
   1be92:	18fb      	adds	r3, r7, r3
   1be94:	781b      	ldrb	r3, [r3, #0]
   1be96:	4aa8      	ldr	r2, [pc, #672]	; (1c138 <vTask_MOTORCONTROL+0x3cc>)
   1be98:	2101      	movs	r1, #1
   1be9a:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1be9c:	2317      	movs	r3, #23
   1be9e:	18fb      	adds	r3, r7, r3
   1bea0:	781b      	ldrb	r3, [r3, #0]
   1bea2:	2217      	movs	r2, #23
   1bea4:	18ba      	adds	r2, r7, r2
   1bea6:	1e59      	subs	r1, r3, #1
   1bea8:	7011      	strb	r1, [r2, #0]
   1beaa:	2b00      	cmp	r3, #0
   1beac:	d1f0      	bne.n	1be90 <vTask_MOTORCONTROL+0x124>
	}
	simEvent[0] = 'N';
   1beae:	4ba3      	ldr	r3, [pc, #652]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1beb0:	224e      	movs	r2, #78	; 0x4e
   1beb2:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1beb4:	4ba1      	ldr	r3, [pc, #644]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1beb6:	2250      	movs	r2, #80	; 0x50
   1beb8:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1beba:	4ba0      	ldr	r3, [pc, #640]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bebc:	225f      	movs	r2, #95	; 0x5f
   1bebe:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1bec0:	4b9e      	ldr	r3, [pc, #632]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bec2:	2246      	movs	r2, #70	; 0x46
   1bec4:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1bec6:	4b9d      	ldr	r3, [pc, #628]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bec8:	2247      	movs	r2, #71	; 0x47
   1beca:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1becc:	4b9b      	ldr	r3, [pc, #620]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bece:	224c      	movs	r2, #76	; 0x4c
   1bed0:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1bed2:	4b9a      	ldr	r3, [pc, #616]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bed4:	2243      	movs	r2, #67	; 0x43
   1bed6:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1bed8:	4b98      	ldr	r3, [pc, #608]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1beda:	2253      	movs	r2, #83	; 0x53
   1bedc:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1bede:	4b97      	ldr	r3, [pc, #604]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bee0:	224f      	movs	r2, #79	; 0x4f
   1bee2:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1bee4:	4b95      	ldr	r3, [pc, #596]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bee6:	2241      	movs	r2, #65	; 0x41
   1bee8:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1beea:	4b94      	ldr	r3, [pc, #592]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1beec:	2229      	movs	r2, #41	; 0x29
   1beee:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1bef0:	4b92      	ldr	r3, [pc, #584]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bef2:	225b      	movs	r2, #91	; 0x5b
   1bef4:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bef6:	4b8f      	ldr	r3, [pc, #572]	; (1c134 <vTask_MOTORCONTROL+0x3c8>)
   1bef8:	785b      	ldrb	r3, [r3, #1]
   1befa:	2b00      	cmp	r3, #0
   1befc:	d005      	beq.n	1bf0a <vTask_MOTORCONTROL+0x19e>
	{
		simEvent[12] = 'B';		//Overload Event
   1befe:	4b8f      	ldr	r3, [pc, #572]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bf00:	2242      	movs	r2, #66	; 0x42
   1bf02:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1bf04:	4b8d      	ldr	r3, [pc, #564]	; (1c13c <vTask_MOTORCONTROL+0x3d0>)
   1bf06:	224a      	movs	r2, #74	; 0x4a
   1bf08:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1bf0a:	2001      	movs	r0, #1
   1bf0c:	4b8c      	ldr	r3, [pc, #560]	; (1c140 <vTask_MOTORCONTROL+0x3d4>)
   1bf0e:	4798      	blx	r3
	eventOccured=true;
   1bf10:	4b6d      	ldr	r3, [pc, #436]	; (1c0c8 <vTask_MOTORCONTROL+0x35c>)
   1bf12:	2201      	movs	r2, #1
   1bf14:	701a      	strb	r2, [r3, #0]
	//////////////////////////////

	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1bf16:	4b8b      	ldr	r3, [pc, #556]	; (1c144 <vTask_MOTORCONTROL+0x3d8>)
   1bf18:	681a      	ldr	r2, [r3, #0]
   1bf1a:	2301      	movs	r3, #1
   1bf1c:	425b      	negs	r3, r3
   1bf1e:	0019      	movs	r1, r3
   1bf20:	0010      	movs	r0, r2
   1bf22:	4b89      	ldr	r3, [pc, #548]	; (1c148 <vTask_MOTORCONTROL+0x3dc>)
   1bf24:	4798      	blx	r3
		if(taskPSet)
   1bf26:	4b89      	ldr	r3, [pc, #548]	; (1c14c <vTask_MOTORCONTROL+0x3e0>)
   1bf28:	781b      	ldrb	r3, [r3, #0]
   1bf2a:	b2db      	uxtb	r3, r3
   1bf2c:	2b00      	cmp	r3, #0
   1bf2e:	d006      	beq.n	1bf3e <vTask_MOTORCONTROL+0x1d2>
		{
			vTaskPrioritySet(NULL,1);
   1bf30:	2101      	movs	r1, #1
   1bf32:	2000      	movs	r0, #0
   1bf34:	4b86      	ldr	r3, [pc, #536]	; (1c150 <vTask_MOTORCONTROL+0x3e4>)
   1bf36:	4798      	blx	r3
			taskPSet=false;
   1bf38:	4b84      	ldr	r3, [pc, #528]	; (1c14c <vTask_MOTORCONTROL+0x3e0>)
   1bf3a:	2200      	movs	r2, #0
   1bf3c:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1bf3e:	4b81      	ldr	r3, [pc, #516]	; (1c144 <vTask_MOTORCONTROL+0x3d8>)
   1bf40:	6818      	ldr	r0, [r3, #0]
   1bf42:	2300      	movs	r3, #0
   1bf44:	2200      	movs	r2, #0
   1bf46:	2100      	movs	r1, #0
   1bf48:	4c82      	ldr	r4, [pc, #520]	; (1c154 <vTask_MOTORCONTROL+0x3e8>)
   1bf4a:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1bf4c:	4b6b      	ldr	r3, [pc, #428]	; (1c0fc <vTask_MOTORCONTROL+0x390>)
   1bf4e:	781b      	ldrb	r3, [r3, #0]
   1bf50:	2201      	movs	r2, #1
   1bf52:	4053      	eors	r3, r2
   1bf54:	b2db      	uxtb	r3, r3
   1bf56:	2b00      	cmp	r3, #0
   1bf58:	d046      	beq.n	1bfe8 <vTask_MOTORCONTROL+0x27c>
   1bf5a:	4b6a      	ldr	r3, [pc, #424]	; (1c104 <vTask_MOTORCONTROL+0x398>)
   1bf5c:	781b      	ldrb	r3, [r3, #0]
   1bf5e:	2201      	movs	r2, #1
   1bf60:	4053      	eors	r3, r2
   1bf62:	b2db      	uxtb	r3, r3
   1bf64:	2b00      	cmp	r3, #0
   1bf66:	d03f      	beq.n	1bfe8 <vTask_MOTORCONTROL+0x27c>
		{
			uint8_t tempEventOccured=eventOccured;
   1bf68:	4b57      	ldr	r3, [pc, #348]	; (1c0c8 <vTask_MOTORCONTROL+0x35c>)
   1bf6a:	781b      	ldrb	r3, [r3, #0]
   1bf6c:	b2da      	uxtb	r2, r3
   1bf6e:	230f      	movs	r3, #15
   1bf70:	18fb      	adds	r3, r7, r3
   1bf72:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
   1bf74:	4b78      	ldr	r3, [pc, #480]	; (1c158 <vTask_MOTORCONTROL+0x3ec>)
   1bf76:	781b      	ldrb	r3, [r3, #0]
   1bf78:	b2da      	uxtb	r2, r3
   1bf7a:	230e      	movs	r3, #14
   1bf7c:	18fb      	adds	r3, r7, r3
   1bf7e:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
   1bf80:	230f      	movs	r3, #15
   1bf82:	18fb      	adds	r3, r7, r3
   1bf84:	781b      	ldrb	r3, [r3, #0]
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	d027      	beq.n	1bfda <vTask_MOTORCONTROL+0x26e>
			{
				if(firstEvent)
   1bf8a:	4b51      	ldr	r3, [pc, #324]	; (1c0d0 <vTask_MOTORCONTROL+0x364>)
   1bf8c:	781b      	ldrb	r3, [r3, #0]
   1bf8e:	b2db      	uxtb	r3, r3
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d00b      	beq.n	1bfac <vTask_MOTORCONTROL+0x240>
				{
					if(xTaskGetTickCount()-delayForFirstEvent>35000L)
   1bf94:	4b4d      	ldr	r3, [pc, #308]	; (1c0cc <vTask_MOTORCONTROL+0x360>)
   1bf96:	4798      	blx	r3
   1bf98:	0002      	movs	r2, r0
   1bf9a:	693b      	ldr	r3, [r7, #16]
   1bf9c:	1ad3      	subs	r3, r2, r3
   1bf9e:	4a6f      	ldr	r2, [pc, #444]	; (1c15c <vTask_MOTORCONTROL+0x3f0>)
   1bfa0:	4293      	cmp	r3, r2
   1bfa2:	d91a      	bls.n	1bfda <vTask_MOTORCONTROL+0x26e>
					{
						firstEvent = false;
   1bfa4:	4b4a      	ldr	r3, [pc, #296]	; (1c0d0 <vTask_MOTORCONTROL+0x364>)
   1bfa6:	2200      	movs	r2, #0
   1bfa8:	701a      	strb	r2, [r3, #0]
   1bfaa:	e016      	b.n	1bfda <vTask_MOTORCONTROL+0x26e>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1bfac:	4b6c      	ldr	r3, [pc, #432]	; (1c160 <vTask_MOTORCONTROL+0x3f4>)
   1bfae:	781b      	ldrb	r3, [r3, #0]
   1bfb0:	b2db      	uxtb	r3, r3
   1bfb2:	2b00      	cmp	r3, #0
   1bfb4:	d00f      	beq.n	1bfd6 <vTask_MOTORCONTROL+0x26a>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1bfb6:	4b45      	ldr	r3, [pc, #276]	; (1c0cc <vTask_MOTORCONTROL+0x360>)
   1bfb8:	4798      	blx	r3
   1bfba:	0002      	movs	r2, r0
   1bfbc:	4b69      	ldr	r3, [pc, #420]	; (1c164 <vTask_MOTORCONTROL+0x3f8>)
   1bfbe:	681b      	ldr	r3, [r3, #0]
   1bfc0:	1ad2      	subs	r2, r2, r3
   1bfc2:	23e1      	movs	r3, #225	; 0xe1
   1bfc4:	00db      	lsls	r3, r3, #3
   1bfc6:	429a      	cmp	r2, r3
   1bfc8:	d907      	bls.n	1bfda <vTask_MOTORCONTROL+0x26e>
						{
							motorFeedbackEvent=false;
   1bfca:	4b65      	ldr	r3, [pc, #404]	; (1c160 <vTask_MOTORCONTROL+0x3f4>)
   1bfcc:	2200      	movs	r2, #0
   1bfce:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1bfd0:	4b65      	ldr	r3, [pc, #404]	; (1c168 <vTask_MOTORCONTROL+0x3fc>)
   1bfd2:	4798      	blx	r3
   1bfd4:	e001      	b.n	1bfda <vTask_MOTORCONTROL+0x26e>
						}
					}
					else
					{
						operateOnEvent();
   1bfd6:	4b64      	ldr	r3, [pc, #400]	; (1c168 <vTask_MOTORCONTROL+0x3fc>)
   1bfd8:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1bfda:	4b53      	ldr	r3, [pc, #332]	; (1c128 <vTask_MOTORCONTROL+0x3bc>)
   1bfdc:	781b      	ldrb	r3, [r3, #0]
   1bfde:	b2db      	uxtb	r3, r3
   1bfe0:	2b00      	cmp	r3, #0
   1bfe2:	d001      	beq.n	1bfe8 <vTask_MOTORCONTROL+0x27c>
			{
				buttonFilter();
   1bfe4:	4b61      	ldr	r3, [pc, #388]	; (1c16c <vTask_MOTORCONTROL+0x400>)
   1bfe6:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1bfe8:	4b61      	ldr	r3, [pc, #388]	; (1c170 <vTask_MOTORCONTROL+0x404>)
   1bfea:	4798      	blx	r3
   1bfec:	1e03      	subs	r3, r0, #0
   1bfee:	d003      	beq.n	1bff8 <vTask_MOTORCONTROL+0x28c>
			detect_battery_voltage_and_percentage();
   1bff0:	4b60      	ldr	r3, [pc, #384]	; (1c174 <vTask_MOTORCONTROL+0x408>)
   1bff2:	4798      	blx	r3
			detect_Three_Phase_Voltage();
   1bff4:	4b60      	ldr	r3, [pc, #384]	; (1c178 <vTask_MOTORCONTROL+0x40c>)
   1bff6:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bff8:	4b4e      	ldr	r3, [pc, #312]	; (1c134 <vTask_MOTORCONTROL+0x3c8>)
   1bffa:	785b      	ldrb	r3, [r3, #1]
   1bffc:	2b00      	cmp	r3, #0
   1bffe:	d013      	beq.n	1c028 <vTask_MOTORCONTROL+0x2bc>
		{
			if(should_Detect_New_Current()) {
   1c000:	4b5e      	ldr	r3, [pc, #376]	; (1c17c <vTask_MOTORCONTROL+0x410>)
   1c002:	4798      	blx	r3
   1c004:	1e03      	subs	r3, r0, #0
   1c006:	d00f      	beq.n	1c028 <vTask_MOTORCONTROL+0x2bc>
				detect_Motor_Current();
   1c008:	4b5d      	ldr	r3, [pc, #372]	; (1c180 <vTask_MOTORCONTROL+0x414>)
   1c00a:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1c00c:	4b5d      	ldr	r3, [pc, #372]	; (1c184 <vTask_MOTORCONTROL+0x418>)
   1c00e:	2225      	movs	r2, #37	; 0x25
   1c010:	5c9b      	ldrb	r3, [r3, r2]
   1c012:	2b01      	cmp	r3, #1
   1c014:	d106      	bne.n	1c024 <vTask_MOTORCONTROL+0x2b8>
				{
					if(detectMotorStateChangeUsingCurrent())
   1c016:	4b5c      	ldr	r3, [pc, #368]	; (1c188 <vTask_MOTORCONTROL+0x41c>)
   1c018:	4798      	blx	r3
   1c01a:	1e03      	subs	r3, r0, #0
   1c01c:	d002      	beq.n	1c024 <vTask_MOTORCONTROL+0x2b8>
					{
						eventOccured=true;
   1c01e:	4b2a      	ldr	r3, [pc, #168]	; (1c0c8 <vTask_MOTORCONTROL+0x35c>)
   1c020:	2201      	movs	r2, #1
   1c022:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1c024:	4b59      	ldr	r3, [pc, #356]	; (1c18c <vTask_MOTORCONTROL+0x420>)
   1c026:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1c028:	4b59      	ldr	r3, [pc, #356]	; (1c190 <vTask_MOTORCONTROL+0x424>)
   1c02a:	781b      	ldrb	r3, [r3, #0]
   1c02c:	2b00      	cmp	r3, #0
   1c02e:	d005      	beq.n	1c03c <vTask_MOTORCONTROL+0x2d0>
   1c030:	4b58      	ldr	r3, [pc, #352]	; (1c194 <vTask_MOTORCONTROL+0x428>)
   1c032:	4798      	blx	r3
   1c034:	1e03      	subs	r3, r0, #0
   1c036:	d001      	beq.n	1c03c <vTask_MOTORCONTROL+0x2d0>
		{
			operateOnStableLine();
   1c038:	4b57      	ldr	r3, [pc, #348]	; (1c198 <vTask_MOTORCONTROL+0x42c>)
   1c03a:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
   1c03c:	4b57      	ldr	r3, [pc, #348]	; (1c19c <vTask_MOTORCONTROL+0x430>)
   1c03e:	781b      	ldrb	r3, [r3, #0]
   1c040:	2b00      	cmp	r3, #0
   1c042:	d00b      	beq.n	1c05c <vTask_MOTORCONTROL+0x2f0>
   1c044:	4b21      	ldr	r3, [pc, #132]	; (1c0cc <vTask_MOTORCONTROL+0x360>)
   1c046:	4798      	blx	r3
   1c048:	0002      	movs	r2, r0
   1c04a:	4b55      	ldr	r3, [pc, #340]	; (1c1a0 <vTask_MOTORCONTROL+0x434>)
   1c04c:	681b      	ldr	r3, [r3, #0]
   1c04e:	1ad3      	subs	r3, r2, r3
   1c050:	4a54      	ldr	r2, [pc, #336]	; (1c1a4 <vTask_MOTORCONTROL+0x438>)
   1c052:	4293      	cmp	r3, r2
   1c054:	d902      	bls.n	1c05c <vTask_MOTORCONTROL+0x2f0>
		{
			stopMotorCommandGiven=false;
   1c056:	4b51      	ldr	r3, [pc, #324]	; (1c19c <vTask_MOTORCONTROL+0x430>)
   1c058:	2200      	movs	r2, #0
   1c05a:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1c05c:	4b33      	ldr	r3, [pc, #204]	; (1c12c <vTask_MOTORCONTROL+0x3c0>)
   1c05e:	781b      	ldrb	r3, [r3, #0]
   1c060:	2b00      	cmp	r3, #0
   1c062:	d006      	beq.n	1c072 <vTask_MOTORCONTROL+0x306>
		{
			if(MotorVoltageBypassTimerOver())
   1c064:	4b50      	ldr	r3, [pc, #320]	; (1c1a8 <vTask_MOTORCONTROL+0x43c>)
   1c066:	4798      	blx	r3
   1c068:	1e03      	subs	r3, r0, #0
   1c06a:	d002      	beq.n	1c072 <vTask_MOTORCONTROL+0x306>
			{
				motorRelatedVoltageBypassOn=false;
   1c06c:	4b2f      	ldr	r3, [pc, #188]	; (1c12c <vTask_MOTORCONTROL+0x3c0>)
   1c06e:	2200      	movs	r2, #0
   1c070:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1c072:	4b1f      	ldr	r3, [pc, #124]	; (1c0f0 <vTask_MOTORCONTROL+0x384>)
   1c074:	781b      	ldrb	r3, [r3, #0]
   1c076:	2b00      	cmp	r3, #0
   1c078:	d100      	bne.n	1c07c <vTask_MOTORCONTROL+0x310>
   1c07a:	e0a0      	b.n	1c1be <vTask_MOTORCONTROL+0x452>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1c07c:	4b4b      	ldr	r3, [pc, #300]	; (1c1ac <vTask_MOTORCONTROL+0x440>)
   1c07e:	785b      	ldrb	r3, [r3, #1]
   1c080:	b2db      	uxtb	r3, r3
   1c082:	2b03      	cmp	r3, #3
   1c084:	d003      	beq.n	1c08e <vTask_MOTORCONTROL+0x322>
			{
				b = false;
   1c086:	2316      	movs	r3, #22
   1c088:	18fb      	adds	r3, r7, r3
   1c08a:	2200      	movs	r2, #0
   1c08c:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1c08e:	2316      	movs	r3, #22
   1c090:	18fb      	adds	r3, r7, r3
   1c092:	781b      	ldrb	r3, [r3, #0]
   1c094:	2201      	movs	r2, #1
   1c096:	4053      	eors	r3, r2
   1c098:	b2db      	uxtb	r3, r3
   1c09a:	2b00      	cmp	r3, #0
   1c09c:	d100      	bne.n	1c0a0 <vTask_MOTORCONTROL+0x334>
   1c09e:	e08b      	b.n	1c1b8 <vTask_MOTORCONTROL+0x44c>
			{
				if(singlePhasingTimerOver())
   1c0a0:	4b43      	ldr	r3, [pc, #268]	; (1c1b0 <vTask_MOTORCONTROL+0x444>)
   1c0a2:	4798      	blx	r3
   1c0a4:	1e03      	subs	r3, r0, #0
   1c0a6:	d100      	bne.n	1c0aa <vTask_MOTORCONTROL+0x33e>
   1c0a8:	e089      	b.n	1c1be <vTask_MOTORCONTROL+0x452>
				{
					operateOnSinglePhasing();
   1c0aa:	4b42      	ldr	r3, [pc, #264]	; (1c1b4 <vTask_MOTORCONTROL+0x448>)
   1c0ac:	4798      	blx	r3
   1c0ae:	e086      	b.n	1c1be <vTask_MOTORCONTROL+0x452>
   1c0b0:	000199cd 	.word	0x000199cd
   1c0b4:	0001c6e5 	.word	0x0001c6e5
   1c0b8:	0001c7d9 	.word	0x0001c7d9
   1c0bc:	0001c8b5 	.word	0x0001c8b5
   1c0c0:	20000808 	.word	0x20000808
   1c0c4:	20000704 	.word	0x20000704
   1c0c8:	2000071e 	.word	0x2000071e
   1c0cc:	0002024d 	.word	0x0002024d
   1c0d0:	2000076a 	.word	0x2000076a
   1c0d4:	20000888 	.word	0x20000888
   1c0d8:	00018a7d 	.word	0x00018a7d
   1c0dc:	0001fee9 	.word	0x0001fee9
   1c0e0:	20000781 	.word	0x20000781
   1c0e4:	2000083d 	.word	0x2000083d
   1c0e8:	2000078e 	.word	0x2000078e
   1c0ec:	20000764 	.word	0x20000764
   1c0f0:	20000785 	.word	0x20000785
   1c0f4:	20000814 	.word	0x20000814
   1c0f8:	2000078f 	.word	0x2000078f
   1c0fc:	2000078d 	.word	0x2000078d
   1c100:	2000085e 	.word	0x2000085e
   1c104:	2000077c 	.word	0x2000077c
   1c108:	0001aaa1 	.word	0x0001aaa1
   1c10c:	0001ab09 	.word	0x0001ab09
   1c110:	0001aa6d 	.word	0x0001aa6d
   1c114:	200007a4 	.word	0x200007a4
   1c118:	0001a385 	.word	0x0001a385
   1c11c:	20000720 	.word	0x20000720
   1c120:	200007d8 	.word	0x200007d8
   1c124:	2000075c 	.word	0x2000075c
   1c128:	20000774 	.word	0x20000774
   1c12c:	20000767 	.word	0x20000767
   1c130:	20000778 	.word	0x20000778
   1c134:	20000628 	.word	0x20000628
   1c138:	20000708 	.word	0x20000708
   1c13c:	200007f4 	.word	0x200007f4
   1c140:	0001ae1d 	.word	0x0001ae1d
   1c144:	2000023c 	.word	0x2000023c
   1c148:	0001f5e1 	.word	0x0001f5e1
   1c14c:	2000087c 	.word	0x2000087c
   1c150:	0001ff45 	.word	0x0001ff45
   1c154:	0001f141 	.word	0x0001f141
   1c158:	20000793 	.word	0x20000793
   1c15c:	000088b8 	.word	0x000088b8
   1c160:	2000077e 	.word	0x2000077e
   1c164:	20000858 	.word	0x20000858
   1c168:	0001aec9 	.word	0x0001aec9
   1c16c:	0001c9c1 	.word	0x0001c9c1
   1c170:	0001a2a9 	.word	0x0001a2a9
   1c174:	0001a2c5 	.word	0x0001a2c5
   1c178:	0001a5d5 	.word	0x0001a5d5
   1c17c:	0001aa3d 	.word	0x0001aa3d
   1c180:	0001a805 	.word	0x0001a805
   1c184:	20000650 	.word	0x20000650
   1c188:	0001acf5 	.word	0x0001acf5
   1c18c:	0001bb31 	.word	0x0001bb31
   1c190:	20000809 	.word	0x20000809
   1c194:	0001b205 	.word	0x0001b205
   1c198:	0001b0d5 	.word	0x0001b0d5
   1c19c:	2000085c 	.word	0x2000085c
   1c1a0:	2000079c 	.word	0x2000079c
   1c1a4:	00001388 	.word	0x00001388
   1c1a8:	0001bb01 	.word	0x0001bb01
   1c1ac:	2000073c 	.word	0x2000073c
   1c1b0:	0001b591 	.word	0x0001b591
   1c1b4:	0001b5dd 	.word	0x0001b5dd
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1c1b8:	4b15      	ldr	r3, [pc, #84]	; (1c210 <vTask_MOTORCONTROL+0x4a4>)
   1c1ba:	2200      	movs	r2, #0
   1c1bc:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1c1be:	4b15      	ldr	r3, [pc, #84]	; (1c214 <vTask_MOTORCONTROL+0x4a8>)
   1c1c0:	781b      	ldrb	r3, [r3, #0]
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	d007      	beq.n	1c1d6 <vTask_MOTORCONTROL+0x46a>
		{
			if (startMotorTimerOver())
   1c1c6:	4b14      	ldr	r3, [pc, #80]	; (1c218 <vTask_MOTORCONTROL+0x4ac>)
   1c1c8:	4798      	blx	r3
   1c1ca:	1e03      	subs	r3, r0, #0
   1c1cc:	d003      	beq.n	1c1d6 <vTask_MOTORCONTROL+0x46a>
			{
				startMotor(false,false);
   1c1ce:	2100      	movs	r1, #0
   1c1d0:	2000      	movs	r0, #0
   1c1d2:	4b12      	ldr	r3, [pc, #72]	; (1c21c <vTask_MOTORCONTROL+0x4b0>)
   1c1d4:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1c1d6:	4b12      	ldr	r3, [pc, #72]	; (1c220 <vTask_MOTORCONTROL+0x4b4>)
   1c1d8:	781b      	ldrb	r3, [r3, #0]
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	d001      	beq.n	1c1e2 <vTask_MOTORCONTROL+0x476>
		{
			terminateStartRelay();
   1c1de:	4b11      	ldr	r3, [pc, #68]	; (1c224 <vTask_MOTORCONTROL+0x4b8>)
   1c1e0:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1c1e2:	4b11      	ldr	r3, [pc, #68]	; (1c228 <vTask_MOTORCONTROL+0x4bc>)
   1c1e4:	781b      	ldrb	r3, [r3, #0]
   1c1e6:	2b00      	cmp	r3, #0
   1c1e8:	d001      	beq.n	1c1ee <vTask_MOTORCONTROL+0x482>
		{
			terminateStarDeltaTimer();
   1c1ea:	4b10      	ldr	r3, [pc, #64]	; (1c22c <vTask_MOTORCONTROL+0x4c0>)
   1c1ec:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1c1ee:	4b10      	ldr	r3, [pc, #64]	; (1c230 <vTask_MOTORCONTROL+0x4c4>)
   1c1f0:	781b      	ldrb	r3, [r3, #0]
   1c1f2:	2b00      	cmp	r3, #0
   1c1f4:	d001      	beq.n	1c1fa <vTask_MOTORCONTROL+0x48e>
		{
			terminateStopRelay();
   1c1f6:	4b0f      	ldr	r3, [pc, #60]	; (1c234 <vTask_MOTORCONTROL+0x4c8>)
   1c1f8:	4798      	blx	r3
		}
		
		SIMEventManager();
   1c1fa:	4b0f      	ldr	r3, [pc, #60]	; (1c238 <vTask_MOTORCONTROL+0x4cc>)
   1c1fc:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1c1fe:	4b0f      	ldr	r3, [pc, #60]	; (1c23c <vTask_MOTORCONTROL+0x4d0>)
   1c200:	78db      	ldrb	r3, [r3, #3]
   1c202:	2b00      	cmp	r3, #0
   1c204:	d100      	bne.n	1c208 <vTask_MOTORCONTROL+0x49c>
   1c206:	e686      	b.n	1bf16 <vTask_MOTORCONTROL+0x1aa>
		{
			M2MEventManager();
   1c208:	4b0d      	ldr	r3, [pc, #52]	; (1c240 <vTask_MOTORCONTROL+0x4d4>)
   1c20a:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c20c:	e683      	b.n	1bf16 <vTask_MOTORCONTROL+0x1aa>
   1c20e:	46c0      	nop			; (mov r8, r8)
   1c210:	20000785 	.word	0x20000785
   1c214:	2000078e 	.word	0x2000078e
   1c218:	0001b529 	.word	0x0001b529
   1c21c:	0001b251 	.word	0x0001b251
   1c220:	2000078d 	.word	0x2000078d
   1c224:	0001b75d 	.word	0x0001b75d
   1c228:	2000078f 	.word	0x2000078f
   1c22c:	0001b6ed 	.word	0x0001b6ed
   1c230:	2000077c 	.word	0x2000077c
   1c234:	0001b619 	.word	0x0001b619
   1c238:	0001ba69 	.word	0x0001ba69
   1c23c:	20000628 	.word	0x20000628
   1c240:	0001ba25 	.word	0x0001ba25

0001c244 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1c244:	b590      	push	{r4, r7, lr}
   1c246:	b08b      	sub	sp, #44	; 0x2c
   1c248:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1c24a:	2314      	movs	r3, #20
   1c24c:	18fb      	adds	r3, r7, r3
   1c24e:	0018      	movs	r0, r3
   1c250:	4bad      	ldr	r3, [pc, #692]	; (1c508 <start_motor_service+0x2c4>)
   1c252:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1c254:	2314      	movs	r3, #20
   1c256:	18fb      	adds	r3, r7, r3
   1c258:	222b      	movs	r2, #43	; 0x2b
   1c25a:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1c25c:	2314      	movs	r3, #20
   1c25e:	18fb      	adds	r3, r7, r3
   1c260:	2200      	movs	r2, #0
   1c262:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1c264:	2314      	movs	r3, #20
   1c266:	18fb      	adds	r3, r7, r3
   1c268:	2201      	movs	r2, #1
   1c26a:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1c26c:	2314      	movs	r3, #20
   1c26e:	18fb      	adds	r3, r7, r3
   1c270:	2201      	movs	r2, #1
   1c272:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
   1c274:	2314      	movs	r3, #20
   1c276:	18fb      	adds	r3, r7, r3
   1c278:	2200      	movs	r2, #0
   1c27a:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1c27c:	2314      	movs	r3, #20
   1c27e:	18fb      	adds	r3, r7, r3
   1c280:	0019      	movs	r1, r3
   1c282:	200b      	movs	r0, #11
   1c284:	4ba1      	ldr	r3, [pc, #644]	; (1c50c <start_motor_service+0x2c8>)
   1c286:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1c288:	4ba1      	ldr	r3, [pc, #644]	; (1c510 <start_motor_service+0x2cc>)
   1c28a:	2200      	movs	r2, #0
   1c28c:	210b      	movs	r1, #11
   1c28e:	0018      	movs	r0, r3
   1c290:	4ba0      	ldr	r3, [pc, #640]	; (1c514 <start_motor_service+0x2d0>)
   1c292:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1c294:	2100      	movs	r1, #0
   1c296:	200b      	movs	r0, #11
   1c298:	4b9f      	ldr	r3, [pc, #636]	; (1c518 <start_motor_service+0x2d4>)
   1c29a:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1c29c:	2310      	movs	r3, #16
   1c29e:	18fb      	adds	r3, r7, r3
   1c2a0:	0018      	movs	r0, r3
   1c2a2:	4b9e      	ldr	r3, [pc, #632]	; (1c51c <start_motor_service+0x2d8>)
   1c2a4:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1c2a6:	2310      	movs	r3, #16
   1c2a8:	18fb      	adds	r3, r7, r3
   1c2aa:	2200      	movs	r2, #0
   1c2ac:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1c2ae:	2310      	movs	r3, #16
   1c2b0:	18fb      	adds	r3, r7, r3
   1c2b2:	2201      	movs	r2, #1
   1c2b4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1c2b6:	2310      	movs	r3, #16
   1c2b8:	18fb      	adds	r3, r7, r3
   1c2ba:	0019      	movs	r1, r3
   1c2bc:	202a      	movs	r0, #42	; 0x2a
   1c2be:	4b98      	ldr	r3, [pc, #608]	; (1c520 <start_motor_service+0x2dc>)
   1c2c0:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1c2c2:	2203      	movs	r2, #3
   1c2c4:	2100      	movs	r1, #0
   1c2c6:	2001      	movs	r0, #1
   1c2c8:	4b96      	ldr	r3, [pc, #600]	; (1c524 <start_motor_service+0x2e0>)
   1c2ca:	4798      	blx	r3
   1c2cc:	0002      	movs	r2, r0
   1c2ce:	4b96      	ldr	r3, [pc, #600]	; (1c528 <start_motor_service+0x2e4>)
   1c2d0:	601a      	str	r2, [r3, #0]
   1c2d2:	4b95      	ldr	r3, [pc, #596]	; (1c528 <start_motor_service+0x2e4>)
   1c2d4:	681b      	ldr	r3, [r3, #0]
   1c2d6:	2b00      	cmp	r3, #0
   1c2d8:	d006      	beq.n	1c2e8 <start_motor_service+0xa4>
   1c2da:	4b93      	ldr	r3, [pc, #588]	; (1c528 <start_motor_service+0x2e4>)
   1c2dc:	6818      	ldr	r0, [r3, #0]
   1c2de:	2300      	movs	r3, #0
   1c2e0:	2200      	movs	r2, #0
   1c2e2:	2100      	movs	r1, #0
   1c2e4:	4c91      	ldr	r4, [pc, #580]	; (1c52c <start_motor_service+0x2e8>)
   1c2e6:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1c2e8:	2203      	movs	r2, #3
   1c2ea:	2100      	movs	r1, #0
   1c2ec:	2001      	movs	r0, #1
   1c2ee:	4b8d      	ldr	r3, [pc, #564]	; (1c524 <start_motor_service+0x2e0>)
   1c2f0:	4798      	blx	r3
   1c2f2:	0002      	movs	r2, r0
   1c2f4:	4b8e      	ldr	r3, [pc, #568]	; (1c530 <start_motor_service+0x2ec>)
   1c2f6:	601a      	str	r2, [r3, #0]
   1c2f8:	4b8d      	ldr	r3, [pc, #564]	; (1c530 <start_motor_service+0x2ec>)
   1c2fa:	681b      	ldr	r3, [r3, #0]
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d006      	beq.n	1c30e <start_motor_service+0xca>
   1c300:	4b8b      	ldr	r3, [pc, #556]	; (1c530 <start_motor_service+0x2ec>)
   1c302:	6818      	ldr	r0, [r3, #0]
   1c304:	2300      	movs	r3, #0
   1c306:	2200      	movs	r2, #0
   1c308:	2100      	movs	r1, #0
   1c30a:	4c88      	ldr	r4, [pc, #544]	; (1c52c <start_motor_service+0x2e8>)
   1c30c:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1c30e:	230c      	movs	r3, #12
   1c310:	18fb      	adds	r3, r7, r3
   1c312:	0018      	movs	r0, r3
   1c314:	4b81      	ldr	r3, [pc, #516]	; (1c51c <start_motor_service+0x2d8>)
   1c316:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1c318:	230c      	movs	r3, #12
   1c31a:	18fb      	adds	r3, r7, r3
   1c31c:	2201      	movs	r2, #1
   1c31e:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1c320:	230c      	movs	r3, #12
   1c322:	18fb      	adds	r3, r7, r3
   1c324:	2200      	movs	r2, #0
   1c326:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1c328:	230c      	movs	r3, #12
   1c32a:	18fb      	adds	r3, r7, r3
   1c32c:	0019      	movs	r1, r3
   1c32e:	202d      	movs	r0, #45	; 0x2d
   1c330:	4b7b      	ldr	r3, [pc, #492]	; (1c520 <start_motor_service+0x2dc>)
   1c332:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1c334:	230c      	movs	r3, #12
   1c336:	18fb      	adds	r3, r7, r3
   1c338:	0019      	movs	r1, r3
   1c33a:	202c      	movs	r0, #44	; 0x2c
   1c33c:	4b78      	ldr	r3, [pc, #480]	; (1c520 <start_motor_service+0x2dc>)
   1c33e:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1c340:	230c      	movs	r3, #12
   1c342:	18fb      	adds	r3, r7, r3
   1c344:	0019      	movs	r1, r3
   1c346:	2028      	movs	r0, #40	; 0x28
   1c348:	4b75      	ldr	r3, [pc, #468]	; (1c520 <start_motor_service+0x2dc>)
   1c34a:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1c34c:	230c      	movs	r3, #12
   1c34e:	18fb      	adds	r3, r7, r3
   1c350:	0019      	movs	r1, r3
   1c352:	2027      	movs	r0, #39	; 0x27
   1c354:	4b72      	ldr	r3, [pc, #456]	; (1c520 <start_motor_service+0x2dc>)
   1c356:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1c358:	230c      	movs	r3, #12
   1c35a:	18fb      	adds	r3, r7, r3
   1c35c:	0019      	movs	r1, r3
   1c35e:	2005      	movs	r0, #5
   1c360:	4b6f      	ldr	r3, [pc, #444]	; (1c520 <start_motor_service+0x2dc>)
   1c362:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1c364:	2101      	movs	r1, #1
   1c366:	2028      	movs	r0, #40	; 0x28
   1c368:	4b72      	ldr	r3, [pc, #456]	; (1c534 <start_motor_service+0x2f0>)
   1c36a:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1c36c:	2101      	movs	r1, #1
   1c36e:	2005      	movs	r0, #5
   1c370:	4b70      	ldr	r3, [pc, #448]	; (1c534 <start_motor_service+0x2f0>)
   1c372:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1c374:	2101      	movs	r1, #1
   1c376:	2027      	movs	r0, #39	; 0x27
   1c378:	4b6e      	ldr	r3, [pc, #440]	; (1c534 <start_motor_service+0x2f0>)
   1c37a:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1c37c:	003b      	movs	r3, r7
   1c37e:	0018      	movs	r0, r3
   1c380:	4b61      	ldr	r3, [pc, #388]	; (1c508 <start_motor_service+0x2c4>)
   1c382:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1c384:	003b      	movs	r3, r7
   1c386:	222e      	movs	r2, #46	; 0x2e
   1c388:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1c38a:	003b      	movs	r3, r7
   1c38c:	2200      	movs	r2, #0
   1c38e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1c390:	003b      	movs	r3, r7
   1c392:	2200      	movs	r2, #0
   1c394:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1c396:	003b      	movs	r3, r7
   1c398:	2203      	movs	r2, #3
   1c39a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1c39c:	003b      	movs	r3, r7
   1c39e:	0019      	movs	r1, r3
   1c3a0:	200e      	movs	r0, #14
   1c3a2:	4b5a      	ldr	r3, [pc, #360]	; (1c50c <start_motor_service+0x2c8>)
   1c3a4:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c3a6:	2100      	movs	r1, #0
   1c3a8:	200e      	movs	r0, #14
   1c3aa:	4b5b      	ldr	r3, [pc, #364]	; (1c518 <start_motor_service+0x2d4>)
   1c3ac:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c3ae:	4b62      	ldr	r3, [pc, #392]	; (1c538 <start_motor_service+0x2f4>)
   1c3b0:	2200      	movs	r2, #0
   1c3b2:	210e      	movs	r1, #14
   1c3b4:	0018      	movs	r0, r3
   1c3b6:	4b57      	ldr	r3, [pc, #348]	; (1c514 <start_motor_service+0x2d0>)
   1c3b8:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1c3ba:	003b      	movs	r3, r7
   1c3bc:	2226      	movs	r2, #38	; 0x26
   1c3be:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1c3c0:	003b      	movs	r3, r7
   1c3c2:	2200      	movs	r2, #0
   1c3c4:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c3c6:	003b      	movs	r3, r7
   1c3c8:	2201      	movs	r2, #1
   1c3ca:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c3cc:	003b      	movs	r3, r7
   1c3ce:	2202      	movs	r2, #2
   1c3d0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1c3d2:	003b      	movs	r3, r7
   1c3d4:	0019      	movs	r1, r3
   1c3d6:	2006      	movs	r0, #6
   1c3d8:	4b4c      	ldr	r3, [pc, #304]	; (1c50c <start_motor_service+0x2c8>)
   1c3da:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c3dc:	2100      	movs	r1, #0
   1c3de:	2006      	movs	r0, #6
   1c3e0:	4b4d      	ldr	r3, [pc, #308]	; (1c518 <start_motor_service+0x2d4>)
   1c3e2:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c3e4:	4b55      	ldr	r3, [pc, #340]	; (1c53c <start_motor_service+0x2f8>)
   1c3e6:	2200      	movs	r2, #0
   1c3e8:	2106      	movs	r1, #6
   1c3ea:	0018      	movs	r0, r3
   1c3ec:	4b49      	ldr	r3, [pc, #292]	; (1c514 <start_motor_service+0x2d0>)
   1c3ee:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1c3f0:	003b      	movs	r3, r7
   1c3f2:	2225      	movs	r2, #37	; 0x25
   1c3f4:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1c3f6:	003b      	movs	r3, r7
   1c3f8:	2200      	movs	r2, #0
   1c3fa:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c3fc:	003b      	movs	r3, r7
   1c3fe:	2201      	movs	r2, #1
   1c400:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c402:	003b      	movs	r3, r7
   1c404:	2202      	movs	r2, #2
   1c406:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1c408:	003b      	movs	r3, r7
   1c40a:	0019      	movs	r1, r3
   1c40c:	2005      	movs	r0, #5
   1c40e:	4b3f      	ldr	r3, [pc, #252]	; (1c50c <start_motor_service+0x2c8>)
   1c410:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c412:	2100      	movs	r1, #0
   1c414:	2005      	movs	r0, #5
   1c416:	4b40      	ldr	r3, [pc, #256]	; (1c518 <start_motor_service+0x2d4>)
   1c418:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c41a:	4b48      	ldr	r3, [pc, #288]	; (1c53c <start_motor_service+0x2f8>)
   1c41c:	2200      	movs	r2, #0
   1c41e:	2105      	movs	r1, #5
   1c420:	0018      	movs	r0, r3
   1c422:	4b3c      	ldr	r3, [pc, #240]	; (1c514 <start_motor_service+0x2d0>)
   1c424:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1c426:	003b      	movs	r3, r7
   1c428:	221c      	movs	r2, #28
   1c42a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1c42c:	003b      	movs	r3, r7
   1c42e:	2200      	movs	r2, #0
   1c430:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c432:	003b      	movs	r3, r7
   1c434:	2201      	movs	r2, #1
   1c436:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c438:	003b      	movs	r3, r7
   1c43a:	2202      	movs	r2, #2
   1c43c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1c43e:	003b      	movs	r3, r7
   1c440:	0019      	movs	r1, r3
   1c442:	2008      	movs	r0, #8
   1c444:	4b31      	ldr	r3, [pc, #196]	; (1c50c <start_motor_service+0x2c8>)
   1c446:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c448:	2100      	movs	r1, #0
   1c44a:	2008      	movs	r0, #8
   1c44c:	4b32      	ldr	r3, [pc, #200]	; (1c518 <start_motor_service+0x2d4>)
   1c44e:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c450:	4b3a      	ldr	r3, [pc, #232]	; (1c53c <start_motor_service+0x2f8>)
   1c452:	2200      	movs	r2, #0
   1c454:	2108      	movs	r1, #8
   1c456:	0018      	movs	r0, r3
   1c458:	4b2e      	ldr	r3, [pc, #184]	; (1c514 <start_motor_service+0x2d0>)
   1c45a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1c45c:	003b      	movs	r3, r7
   1c45e:	2229      	movs	r2, #41	; 0x29
   1c460:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1c462:	003b      	movs	r3, r7
   1c464:	2200      	movs	r2, #0
   1c466:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c468:	003b      	movs	r3, r7
   1c46a:	2201      	movs	r2, #1
   1c46c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c46e:	003b      	movs	r3, r7
   1c470:	2202      	movs	r2, #2
   1c472:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1c474:	003b      	movs	r3, r7
   1c476:	0019      	movs	r1, r3
   1c478:	2009      	movs	r0, #9
   1c47a:	4b24      	ldr	r3, [pc, #144]	; (1c50c <start_motor_service+0x2c8>)
   1c47c:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c47e:	2100      	movs	r1, #0
   1c480:	2009      	movs	r0, #9
   1c482:	4b25      	ldr	r3, [pc, #148]	; (1c518 <start_motor_service+0x2d4>)
   1c484:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c486:	4b2d      	ldr	r3, [pc, #180]	; (1c53c <start_motor_service+0x2f8>)
   1c488:	2200      	movs	r2, #0
   1c48a:	2109      	movs	r1, #9
   1c48c:	0018      	movs	r0, r3
   1c48e:	4b21      	ldr	r3, [pc, #132]	; (1c514 <start_motor_service+0x2d0>)
   1c490:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c492:	482b      	ldr	r0, [pc, #172]	; (1c540 <start_motor_service+0x2fc>)
   1c494:	2300      	movs	r3, #0
   1c496:	9301      	str	r3, [sp, #4]
   1c498:	2301      	movs	r3, #1
   1c49a:	9300      	str	r3, [sp, #0]
   1c49c:	2300      	movs	r3, #0
   1c49e:	2282      	movs	r2, #130	; 0x82
   1c4a0:	2100      	movs	r1, #0
   1c4a2:	4c28      	ldr	r4, [pc, #160]	; (1c544 <start_motor_service+0x300>)
   1c4a4:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c4a6:	4828      	ldr	r0, [pc, #160]	; (1c548 <start_motor_service+0x304>)
   1c4a8:	2300      	movs	r3, #0
   1c4aa:	9301      	str	r3, [sp, #4]
   1c4ac:	2301      	movs	r3, #1
   1c4ae:	9300      	str	r3, [sp, #0]
   1c4b0:	2300      	movs	r3, #0
   1c4b2:	2282      	movs	r2, #130	; 0x82
   1c4b4:	2100      	movs	r1, #0
   1c4b6:	4c23      	ldr	r4, [pc, #140]	; (1c544 <start_motor_service+0x300>)
   1c4b8:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1c4ba:	4824      	ldr	r0, [pc, #144]	; (1c54c <start_motor_service+0x308>)
   1c4bc:	4b24      	ldr	r3, [pc, #144]	; (1c550 <start_motor_service+0x30c>)
   1c4be:	9301      	str	r3, [sp, #4]
   1c4c0:	2301      	movs	r3, #1
   1c4c2:	9300      	str	r3, [sp, #0]
   1c4c4:	2300      	movs	r3, #0
   1c4c6:	2282      	movs	r2, #130	; 0x82
   1c4c8:	2100      	movs	r1, #0
   1c4ca:	4c1e      	ldr	r4, [pc, #120]	; (1c544 <start_motor_service+0x300>)
   1c4cc:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1c4ce:	4b21      	ldr	r3, [pc, #132]	; (1c554 <start_motor_service+0x310>)
   1c4d0:	795b      	ldrb	r3, [r3, #5]
   1c4d2:	2b00      	cmp	r3, #0
   1c4d4:	d00a      	beq.n	1c4ec <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1c4d6:	23af      	movs	r3, #175	; 0xaf
   1c4d8:	009a      	lsls	r2, r3, #2
   1c4da:	481f      	ldr	r0, [pc, #124]	; (1c558 <start_motor_service+0x314>)
   1c4dc:	2300      	movs	r3, #0
   1c4de:	9301      	str	r3, [sp, #4]
   1c4e0:	2301      	movs	r3, #1
   1c4e2:	9300      	str	r3, [sp, #0]
   1c4e4:	2300      	movs	r3, #0
   1c4e6:	2100      	movs	r1, #0
   1c4e8:	4c16      	ldr	r4, [pc, #88]	; (1c544 <start_motor_service+0x300>)
   1c4ea:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)750,NULL,1, &motorTask);
   1c4ec:	4a1b      	ldr	r2, [pc, #108]	; (1c55c <start_motor_service+0x318>)
   1c4ee:	481c      	ldr	r0, [pc, #112]	; (1c560 <start_motor_service+0x31c>)
   1c4f0:	4b1c      	ldr	r3, [pc, #112]	; (1c564 <start_motor_service+0x320>)
   1c4f2:	9301      	str	r3, [sp, #4]
   1c4f4:	2301      	movs	r3, #1
   1c4f6:	9300      	str	r3, [sp, #0]
   1c4f8:	2300      	movs	r3, #0
   1c4fa:	2100      	movs	r1, #0
   1c4fc:	4c11      	ldr	r4, [pc, #68]	; (1c544 <start_motor_service+0x300>)
   1c4fe:	47a0      	blx	r4

}
   1c500:	46c0      	nop			; (mov r8, r8)
   1c502:	46bd      	mov	sp, r7
   1c504:	b009      	add	sp, #36	; 0x24
   1c506:	bd90      	pop	{r4, r7, pc}
   1c508:	0001df01 	.word	0x0001df01
   1c50c:	0001df35 	.word	0x0001df35
   1c510:	00019f9d 	.word	0x00019f9d
   1c514:	000223fd 	.word	0x000223fd
   1c518:	00022461 	.word	0x00022461
   1c51c:	00018f25 	.word	0x00018f25
   1c520:	00022f71 	.word	0x00022f71
   1c524:	0001f085 	.word	0x0001f085
   1c528:	20000238 	.word	0x20000238
   1c52c:	0001f141 	.word	0x0001f141
   1c530:	2000023c 	.word	0x2000023c
   1c534:	00018f8d 	.word	0x00018f8d
   1c538:	0001c885 	.word	0x0001c885
   1c53c:	0001bd59 	.word	0x0001bd59
   1c540:	0001a1b5 	.word	0x0001a1b5
   1c544:	0001fba9 	.word	0x0001fba9
   1c548:	0001a221 	.word	0x0001a221
   1c54c:	0001cb95 	.word	0x0001cb95
   1c550:	20000244 	.word	0x20000244
   1c554:	20000628 	.word	0x20000628
   1c558:	00019415 	.word	0x00019415
   1c55c:	000002ee 	.word	0x000002ee
   1c560:	0001bd6d 	.word	0x0001bd6d
   1c564:	20000240 	.word	0x20000240

0001c568 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1c568:	b580      	push	{r7, lr}
   1c56a:	b082      	sub	sp, #8
   1c56c:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1c56e:	1dfb      	adds	r3, r7, #7
   1c570:	2200      	movs	r2, #0
   1c572:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1c574:	4b4e      	ldr	r3, [pc, #312]	; (1c6b0 <motor_checkSleepElligible+0x148>)
   1c576:	795b      	ldrb	r3, [r3, #5]
   1c578:	2b00      	cmp	r3, #0
   1c57a:	d00b      	beq.n	1c594 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1c57c:	4b4c      	ldr	r3, [pc, #304]	; (1c6b0 <motor_checkSleepElligible+0x148>)
   1c57e:	791b      	ldrb	r3, [r3, #4]
   1c580:	2b00      	cmp	r3, #0
   1c582:	d003      	beq.n	1c58c <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1c584:	1dfb      	adds	r3, r7, #7
   1c586:	2213      	movs	r2, #19
   1c588:	701a      	strb	r2, [r3, #0]
   1c58a:	e00e      	b.n	1c5aa <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1c58c:	1dfb      	adds	r3, r7, #7
   1c58e:	2211      	movs	r2, #17
   1c590:	701a      	strb	r2, [r3, #0]
   1c592:	e00a      	b.n	1c5aa <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c594:	4b46      	ldr	r3, [pc, #280]	; (1c6b0 <motor_checkSleepElligible+0x148>)
   1c596:	785b      	ldrb	r3, [r3, #1]
   1c598:	2b00      	cmp	r3, #0
   1c59a:	d003      	beq.n	1c5a4 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1c59c:	1dfb      	adds	r3, r7, #7
   1c59e:	220e      	movs	r2, #14
   1c5a0:	701a      	strb	r2, [r3, #0]
   1c5a2:	e002      	b.n	1c5aa <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1c5a4:	1dfb      	adds	r3, r7, #7
   1c5a6:	220c      	movs	r2, #12
   1c5a8:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1c5aa:	1dbb      	adds	r3, r7, #6
   1c5ac:	2201      	movs	r2, #1
   1c5ae:	701a      	strb	r2, [r3, #0]
	while(j--)
   1c5b0:	e00c      	b.n	1c5cc <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1c5b2:	1dfb      	adds	r3, r7, #7
   1c5b4:	781b      	ldrb	r3, [r3, #0]
   1c5b6:	4a3f      	ldr	r2, [pc, #252]	; (1c6b4 <motor_checkSleepElligible+0x14c>)
   1c5b8:	5cd3      	ldrb	r3, [r2, r3]
   1c5ba:	2201      	movs	r2, #1
   1c5bc:	4053      	eors	r3, r2
   1c5be:	b2db      	uxtb	r3, r3
   1c5c0:	2b00      	cmp	r3, #0
   1c5c2:	d003      	beq.n	1c5cc <motor_checkSleepElligible+0x64>
		{
			event=false;
   1c5c4:	1dbb      	adds	r3, r7, #6
   1c5c6:	2200      	movs	r2, #0
   1c5c8:	701a      	strb	r2, [r3, #0]
			break;
   1c5ca:	e006      	b.n	1c5da <motor_checkSleepElligible+0x72>
	while(j--)
   1c5cc:	1dfb      	adds	r3, r7, #7
   1c5ce:	781b      	ldrb	r3, [r3, #0]
   1c5d0:	1dfa      	adds	r2, r7, #7
   1c5d2:	1e59      	subs	r1, r3, #1
   1c5d4:	7011      	strb	r1, [r2, #0]
   1c5d6:	2b00      	cmp	r3, #0
   1c5d8:	d1eb      	bne.n	1c5b2 <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1c5da:	4b35      	ldr	r3, [pc, #212]	; (1c6b0 <motor_checkSleepElligible+0x148>)
   1c5dc:	78db      	ldrb	r3, [r3, #3]
   1c5de:	2b00      	cmp	r3, #0
   1c5e0:	d00e      	beq.n	1c600 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1c5e2:	1dbb      	adds	r3, r7, #6
   1c5e4:	781b      	ldrb	r3, [r3, #0]
   1c5e6:	2b00      	cmp	r3, #0
   1c5e8:	d003      	beq.n	1c5f2 <motor_checkSleepElligible+0x8a>
   1c5ea:	4b33      	ldr	r3, [pc, #204]	; (1c6b8 <motor_checkSleepElligible+0x150>)
   1c5ec:	781b      	ldrb	r3, [r3, #0]
   1c5ee:	2b01      	cmp	r3, #1
   1c5f0:	d003      	beq.n	1c5fa <motor_checkSleepElligible+0x92>
   1c5f2:	4b31      	ldr	r3, [pc, #196]	; (1c6b8 <motor_checkSleepElligible+0x150>)
   1c5f4:	785b      	ldrb	r3, [r3, #1]
   1c5f6:	2b01      	cmp	r3, #1
   1c5f8:	d102      	bne.n	1c600 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1c5fa:	1dbb      	adds	r3, r7, #6
   1c5fc:	2200      	movs	r2, #0
   1c5fe:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c600:	4b2e      	ldr	r3, [pc, #184]	; (1c6bc <motor_checkSleepElligible+0x154>)
   1c602:	4798      	blx	r3
   1c604:	0003      	movs	r3, r0
   1c606:	001a      	movs	r2, r3
   1c608:	2301      	movs	r3, #1
   1c60a:	4053      	eors	r3, r2
   1c60c:	b2db      	uxtb	r3, r3
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && lastButtonEvent==0);
   1c60e:	2b00      	cmp	r3, #0
   1c610:	d045      	beq.n	1c69e <motor_checkSleepElligible+0x136>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c612:	4b2b      	ldr	r3, [pc, #172]	; (1c6c0 <motor_checkSleepElligible+0x158>)
   1c614:	781b      	ldrb	r3, [r3, #0]
   1c616:	b2db      	uxtb	r3, r3
   1c618:	2201      	movs	r2, #1
   1c61a:	4053      	eors	r3, r2
   1c61c:	b2db      	uxtb	r3, r3
   1c61e:	2b00      	cmp	r3, #0
   1c620:	d03d      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c622:	1dbb      	adds	r3, r7, #6
   1c624:	781b      	ldrb	r3, [r3, #0]
   1c626:	2b00      	cmp	r3, #0
   1c628:	d039      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c62a:	4b26      	ldr	r3, [pc, #152]	; (1c6c4 <motor_checkSleepElligible+0x15c>)
   1c62c:	781b      	ldrb	r3, [r3, #0]
   1c62e:	2201      	movs	r2, #1
   1c630:	4053      	eors	r3, r2
   1c632:	b2db      	uxtb	r3, r3
   1c634:	2b00      	cmp	r3, #0
   1c636:	d032      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c638:	4b23      	ldr	r3, [pc, #140]	; (1c6c8 <motor_checkSleepElligible+0x160>)
   1c63a:	781b      	ldrb	r3, [r3, #0]
   1c63c:	2201      	movs	r2, #1
   1c63e:	4053      	eors	r3, r2
   1c640:	b2db      	uxtb	r3, r3
   1c642:	2b00      	cmp	r3, #0
   1c644:	d02b      	beq.n	1c69e <motor_checkSleepElligible+0x136>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && lastButtonEvent==0);
   1c646:	4b21      	ldr	r3, [pc, #132]	; (1c6cc <motor_checkSleepElligible+0x164>)
   1c648:	781b      	ldrb	r3, [r3, #0]
   1c64a:	2201      	movs	r2, #1
   1c64c:	4053      	eors	r3, r2
   1c64e:	b2db      	uxtb	r3, r3
   1c650:	2b00      	cmp	r3, #0
   1c652:	d024      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c654:	4b1e      	ldr	r3, [pc, #120]	; (1c6d0 <motor_checkSleepElligible+0x168>)
   1c656:	781b      	ldrb	r3, [r3, #0]
   1c658:	2201      	movs	r2, #1
   1c65a:	4053      	eors	r3, r2
   1c65c:	b2db      	uxtb	r3, r3
   1c65e:	2b00      	cmp	r3, #0
   1c660:	d01d      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c662:	4b1c      	ldr	r3, [pc, #112]	; (1c6d4 <motor_checkSleepElligible+0x16c>)
   1c664:	781b      	ldrb	r3, [r3, #0]
   1c666:	2201      	movs	r2, #1
   1c668:	4053      	eors	r3, r2
   1c66a:	b2db      	uxtb	r3, r3
   1c66c:	2b00      	cmp	r3, #0
   1c66e:	d016      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c670:	4b19      	ldr	r3, [pc, #100]	; (1c6d8 <motor_checkSleepElligible+0x170>)
   1c672:	781b      	ldrb	r3, [r3, #0]
   1c674:	b2db      	uxtb	r3, r3
   1c676:	2201      	movs	r2, #1
   1c678:	4053      	eors	r3, r2
   1c67a:	b2db      	uxtb	r3, r3
   1c67c:	2b00      	cmp	r3, #0
   1c67e:	d00e      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c680:	4b16      	ldr	r3, [pc, #88]	; (1c6dc <motor_checkSleepElligible+0x174>)
   1c682:	781b      	ldrb	r3, [r3, #0]
   1c684:	b2db      	uxtb	r3, r3
   1c686:	2201      	movs	r2, #1
   1c688:	4053      	eors	r3, r2
   1c68a:	b2db      	uxtb	r3, r3
   1c68c:	2b00      	cmp	r3, #0
   1c68e:	d006      	beq.n	1c69e <motor_checkSleepElligible+0x136>
   1c690:	4b13      	ldr	r3, [pc, #76]	; (1c6e0 <motor_checkSleepElligible+0x178>)
   1c692:	781b      	ldrb	r3, [r3, #0]
   1c694:	b2db      	uxtb	r3, r3
   1c696:	2b00      	cmp	r3, #0
   1c698:	d101      	bne.n	1c69e <motor_checkSleepElligible+0x136>
   1c69a:	2301      	movs	r3, #1
   1c69c:	e000      	b.n	1c6a0 <motor_checkSleepElligible+0x138>
   1c69e:	2300      	movs	r3, #0
   1c6a0:	1c1a      	adds	r2, r3, #0
   1c6a2:	2301      	movs	r3, #1
   1c6a4:	4013      	ands	r3, r2
   1c6a6:	b2db      	uxtb	r3, r3
	
}
   1c6a8:	0018      	movs	r0, r3
   1c6aa:	46bd      	mov	sp, r7
   1c6ac:	b002      	add	sp, #8
   1c6ae:	bd80      	pop	{r7, pc}
   1c6b0:	20000628 	.word	0x20000628
   1c6b4:	20000708 	.word	0x20000708
   1c6b8:	200007b8 	.word	0x200007b8
   1c6bc:	0001aa59 	.word	0x0001aa59
   1c6c0:	2000071e 	.word	0x2000071e
   1c6c4:	20000809 	.word	0x20000809
   1c6c8:	20000785 	.word	0x20000785
   1c6cc:	2000078e 	.word	0x2000078e
   1c6d0:	2000078d 	.word	0x2000078d
   1c6d4:	2000077c 	.word	0x2000077c
   1c6d8:	2000076a 	.word	0x2000076a
   1c6dc:	20000793 	.word	0x20000793
   1c6e0:	20000774 	.word	0x20000774

0001c6e4 <configure_ac>:


void configure_ac(void)
{
   1c6e4:	b580      	push	{r7, lr}
   1c6e6:	b08a      	sub	sp, #40	; 0x28
   1c6e8:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1c6ea:	231c      	movs	r3, #28
   1c6ec:	18fb      	adds	r3, r7, r3
   1c6ee:	0018      	movs	r0, r3
   1c6f0:	2305      	movs	r3, #5
   1c6f2:	001a      	movs	r2, r3
   1c6f4:	2100      	movs	r1, #0
   1c6f6:	4b2c      	ldr	r3, [pc, #176]	; (1c7a8 <configure_ac+0xc4>)
   1c6f8:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1c6fa:	2324      	movs	r3, #36	; 0x24
   1c6fc:	18fb      	adds	r3, r7, r3
   1c6fe:	0018      	movs	r0, r3
   1c700:	4b2a      	ldr	r3, [pc, #168]	; (1c7ac <configure_ac+0xc8>)
   1c702:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1c704:	2324      	movs	r3, #36	; 0x24
   1c706:	18fb      	adds	r3, r7, r3
   1c708:	2201      	movs	r2, #1
   1c70a:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1c70c:	2324      	movs	r3, #36	; 0x24
   1c70e:	18fb      	adds	r3, r7, r3
   1c710:	2206      	movs	r2, #6
   1c712:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1c714:	2324      	movs	r3, #36	; 0x24
   1c716:	18fa      	adds	r2, r7, r3
   1c718:	4925      	ldr	r1, [pc, #148]	; (1c7b0 <configure_ac+0xcc>)
   1c71a:	4b26      	ldr	r3, [pc, #152]	; (1c7b4 <configure_ac+0xd0>)
   1c71c:	0018      	movs	r0, r3
   1c71e:	4b26      	ldr	r3, [pc, #152]	; (1c7b8 <configure_ac+0xd4>)
   1c720:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1c722:	1d3b      	adds	r3, r7, #4
   1c724:	2200      	movs	r2, #0
   1c726:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1c728:	1d3b      	adds	r3, r7, #4
   1c72a:	2200      	movs	r2, #0
   1c72c:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1c72e:	1d3b      	adds	r3, r7, #4
   1c730:	2200      	movs	r2, #0
   1c732:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1c734:	1d3b      	adds	r3, r7, #4
   1c736:	2200      	movs	r2, #0
   1c738:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1c73a:	1d3b      	adds	r3, r7, #4
   1c73c:	2200      	movs	r2, #0
   1c73e:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1c740:	1d3b      	adds	r3, r7, #4
   1c742:	22a0      	movs	r2, #160	; 0xa0
   1c744:	00d2      	lsls	r2, r2, #3
   1c746:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1c748:	1d3b      	adds	r3, r7, #4
   1c74a:	222d      	movs	r2, #45	; 0x2d
   1c74c:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1c74e:	1d3b      	adds	r3, r7, #4
   1c750:	2200      	movs	r2, #0
   1c752:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1c754:	1d3a      	adds	r2, r7, #4
   1c756:	4b17      	ldr	r3, [pc, #92]	; (1c7b4 <configure_ac+0xd0>)
   1c758:	2100      	movs	r1, #0
   1c75a:	0018      	movs	r0, r3
   1c75c:	4b17      	ldr	r3, [pc, #92]	; (1c7bc <configure_ac+0xd8>)
   1c75e:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1c760:	4b14      	ldr	r3, [pc, #80]	; (1c7b4 <configure_ac+0xd0>)
   1c762:	2100      	movs	r1, #0
   1c764:	0018      	movs	r0, r3
   1c766:	4b16      	ldr	r3, [pc, #88]	; (1c7c0 <configure_ac+0xdc>)
   1c768:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1c76a:	231c      	movs	r3, #28
   1c76c:	18fb      	adds	r3, r7, r3
   1c76e:	2201      	movs	r2, #1
   1c770:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1c772:	231c      	movs	r3, #28
   1c774:	18fa      	adds	r2, r7, r3
   1c776:	4b0f      	ldr	r3, [pc, #60]	; (1c7b4 <configure_ac+0xd0>)
   1c778:	0011      	movs	r1, r2
   1c77a:	0018      	movs	r0, r3
   1c77c:	4b11      	ldr	r3, [pc, #68]	; (1c7c4 <configure_ac+0xe0>)
   1c77e:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1c780:	4b0c      	ldr	r3, [pc, #48]	; (1c7b4 <configure_ac+0xd0>)
   1c782:	0018      	movs	r0, r3
   1c784:	4b10      	ldr	r3, [pc, #64]	; (1c7c8 <configure_ac+0xe4>)
   1c786:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1c788:	4910      	ldr	r1, [pc, #64]	; (1c7cc <configure_ac+0xe8>)
   1c78a:	4b0a      	ldr	r3, [pc, #40]	; (1c7b4 <configure_ac+0xd0>)
   1c78c:	2200      	movs	r2, #0
   1c78e:	0018      	movs	r0, r3
   1c790:	4b0f      	ldr	r3, [pc, #60]	; (1c7d0 <configure_ac+0xec>)
   1c792:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1c794:	4b07      	ldr	r3, [pc, #28]	; (1c7b4 <configure_ac+0xd0>)
   1c796:	2100      	movs	r1, #0
   1c798:	0018      	movs	r0, r3
   1c79a:	4b0e      	ldr	r3, [pc, #56]	; (1c7d4 <configure_ac+0xf0>)
   1c79c:	4798      	blx	r3
}
   1c79e:	46c0      	nop			; (mov r8, r8)
   1c7a0:	46bd      	mov	sp, r7
   1c7a2:	b00a      	add	sp, #40	; 0x28
   1c7a4:	bd80      	pop	{r7, pc}
   1c7a6:	46c0      	nop			; (mov r8, r8)
   1c7a8:	00028e13 	.word	0x00028e13
   1c7ac:	000188a9 	.word	0x000188a9
   1c7b0:	42004400 	.word	0x42004400
   1c7b4:	20000888 	.word	0x20000888
   1c7b8:	0001cd29 	.word	0x0001cd29
   1c7bc:	0001ce09 	.word	0x0001ce09
   1c7c0:	000189f9 	.word	0x000189f9
   1c7c4:	00018919 	.word	0x00018919
   1c7c8:	000188e1 	.word	0x000188e1
   1c7cc:	0001c869 	.word	0x0001c869
   1c7d0:	00022829 	.word	0x00022829
   1c7d4:	00018b61 	.word	0x00018b61

0001c7d8 <configure_rtc>:

void configure_rtc(void)
{
   1c7d8:	b580      	push	{r7, lr}
   1c7da:	b088      	sub	sp, #32
   1c7dc:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
   1c7de:	1d3b      	adds	r3, r7, #4
   1c7e0:	0018      	movs	r0, r3
   1c7e2:	230b      	movs	r3, #11
   1c7e4:	001a      	movs	r2, r3
   1c7e6:	2100      	movs	r1, #0
   1c7e8:	4b17      	ldr	r3, [pc, #92]	; (1c848 <configure_rtc+0x70>)
   1c7ea:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
   1c7ec:	2310      	movs	r3, #16
   1c7ee:	18fb      	adds	r3, r7, r3
   1c7f0:	0018      	movs	r0, r3
   1c7f2:	4b16      	ldr	r3, [pc, #88]	; (1c84c <configure_rtc+0x74>)
   1c7f4:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
   1c7f6:	2310      	movs	r3, #16
   1c7f8:	18fb      	adds	r3, r7, r3
   1c7fa:	2200      	movs	r2, #0
   1c7fc:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
   1c7fe:	2310      	movs	r3, #16
   1c800:	18fb      	adds	r3, r7, r3
   1c802:	2200      	movs	r2, #0
   1c804:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
   1c806:	2310      	movs	r3, #16
   1c808:	18fb      	adds	r3, r7, r3
   1c80a:	2201      	movs	r2, #1
   1c80c:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
   1c80e:	2310      	movs	r3, #16
   1c810:	18fa      	adds	r2, r7, r3
   1c812:	490f      	ldr	r1, [pc, #60]	; (1c850 <configure_rtc+0x78>)
   1c814:	4b0f      	ldr	r3, [pc, #60]	; (1c854 <configure_rtc+0x7c>)
   1c816:	0018      	movs	r0, r3
   1c818:	4b0f      	ldr	r3, [pc, #60]	; (1c858 <configure_rtc+0x80>)
   1c81a:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
   1c81c:	4b0d      	ldr	r3, [pc, #52]	; (1c854 <configure_rtc+0x7c>)
   1c81e:	210a      	movs	r1, #10
   1c820:	0018      	movs	r0, r3
   1c822:	4b0e      	ldr	r3, [pc, #56]	; (1c85c <configure_rtc+0x84>)
   1c824:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
   1c826:	1d3b      	adds	r3, r7, #4
   1c828:	2201      	movs	r2, #1
   1c82a:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
   1c82c:	1d3a      	adds	r2, r7, #4
   1c82e:	4b09      	ldr	r3, [pc, #36]	; (1c854 <configure_rtc+0x7c>)
   1c830:	0011      	movs	r1, r2
   1c832:	0018      	movs	r0, r3
   1c834:	4b0a      	ldr	r3, [pc, #40]	; (1c860 <configure_rtc+0x88>)
   1c836:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
   1c838:	4b06      	ldr	r3, [pc, #24]	; (1c854 <configure_rtc+0x7c>)
   1c83a:	0018      	movs	r0, r3
   1c83c:	4b09      	ldr	r3, [pc, #36]	; (1c864 <configure_rtc+0x8c>)
   1c83e:	4798      	blx	r3
}
   1c840:	46c0      	nop			; (mov r8, r8)
   1c842:	46bd      	mov	sp, r7
   1c844:	b008      	add	sp, #32
   1c846:	bd80      	pop	{r7, pc}
   1c848:	00028e13 	.word	0x00028e13
   1c84c:	00019069 	.word	0x00019069
   1c850:	40001400 	.word	0x40001400
   1c854:	20000864 	.word	0x20000864
   1c858:	0001e351 	.word	0x0001e351
   1c85c:	0001e46d 	.word	0x0001e46d
   1c860:	000190c5 	.word	0x000190c5
   1c864:	0001e129 	.word	0x0001e129

0001c868 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
   1c868:	b580      	push	{r7, lr}
   1c86a:	b082      	sub	sp, #8
   1c86c:	af00      	add	r7, sp, #0
   1c86e:	6078      	str	r0, [r7, #4]
	eventOccured = true;
   1c870:	4b03      	ldr	r3, [pc, #12]	; (1c880 <ac_detect_callback+0x18>)
   1c872:	2201      	movs	r2, #1
   1c874:	701a      	strb	r2, [r3, #0]
}
   1c876:	46c0      	nop			; (mov r8, r8)
   1c878:	46bd      	mov	sp, r7
   1c87a:	b002      	add	sp, #8
   1c87c:	bd80      	pop	{r7, pc}
   1c87e:	46c0      	nop			; (mov r8, r8)
   1c880:	2000071e 	.word	0x2000071e

0001c884 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1c884:	b580      	push	{r7, lr}
   1c886:	af00      	add	r7, sp, #0
	eventOccured = true;
   1c888:	4b06      	ldr	r3, [pc, #24]	; (1c8a4 <motor_feedback_callback+0x20>)
   1c88a:	2201      	movs	r2, #1
   1c88c:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1c88e:	4b06      	ldr	r3, [pc, #24]	; (1c8a8 <motor_feedback_callback+0x24>)
   1c890:	2201      	movs	r2, #1
   1c892:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1c894:	4b05      	ldr	r3, [pc, #20]	; (1c8ac <motor_feedback_callback+0x28>)
   1c896:	4798      	blx	r3
   1c898:	0002      	movs	r2, r0
   1c89a:	4b05      	ldr	r3, [pc, #20]	; (1c8b0 <motor_feedback_callback+0x2c>)
   1c89c:	601a      	str	r2, [r3, #0]
}
   1c89e:	46c0      	nop			; (mov r8, r8)
   1c8a0:	46bd      	mov	sp, r7
   1c8a2:	bd80      	pop	{r7, pc}
   1c8a4:	2000071e 	.word	0x2000071e
   1c8a8:	2000077e 	.word	0x2000077e
   1c8ac:	00020269 	.word	0x00020269
   1c8b0:	20000858 	.word	0x20000858

0001c8b4 <configure_event>:

void configure_event(void)
{
   1c8b4:	b580      	push	{r7, lr}
   1c8b6:	b082      	sub	sp, #8
   1c8b8:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
   1c8ba:	1d3b      	adds	r3, r7, #4
   1c8bc:	0018      	movs	r0, r3
   1c8be:	4b0d      	ldr	r3, [pc, #52]	; (1c8f4 <configure_event+0x40>)
   1c8c0:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
   1c8c2:	1d3b      	adds	r3, r7, #4
   1c8c4:	2203      	movs	r2, #3
   1c8c6:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
   1c8c8:	1d3b      	adds	r3, r7, #4
   1c8ca:	2200      	movs	r2, #0
   1c8cc:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
   1c8ce:	1d3b      	adds	r3, r7, #4
   1c8d0:	2202      	movs	r2, #2
   1c8d2:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
   1c8d4:	1d3a      	adds	r2, r7, #4
   1c8d6:	4b08      	ldr	r3, [pc, #32]	; (1c8f8 <configure_event+0x44>)
   1c8d8:	0011      	movs	r1, r2
   1c8da:	0018      	movs	r0, r3
   1c8dc:	4b07      	ldr	r3, [pc, #28]	; (1c8fc <configure_event+0x48>)
   1c8de:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
   1c8e0:	4b05      	ldr	r3, [pc, #20]	; (1c8f8 <configure_event+0x44>)
   1c8e2:	2119      	movs	r1, #25
   1c8e4:	0018      	movs	r0, r3
   1c8e6:	4b06      	ldr	r3, [pc, #24]	; (1c900 <configure_event+0x4c>)
   1c8e8:	4798      	blx	r3
}
   1c8ea:	46c0      	nop			; (mov r8, r8)
   1c8ec:	46bd      	mov	sp, r7
   1c8ee:	b002      	add	sp, #8
   1c8f0:	bd80      	pop	{r7, pc}
   1c8f2:	46c0      	nop			; (mov r8, r8)
   1c8f4:	000226e9 	.word	0x000226e9
   1c8f8:	20000880 	.word	0x20000880
   1c8fc:	00022711 	.word	0x00022711
   1c900:	000227d9 	.word	0x000227d9

0001c904 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
   1c904:	b580      	push	{r7, lr}
   1c906:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1c908:	4b28      	ldr	r3, [pc, #160]	; (1c9ac <operateOnButtonEvent+0xa8>)
   1c90a:	2200      	movs	r2, #0
   1c90c:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1c90e:	2026      	movs	r0, #38	; 0x26
   1c910:	4b27      	ldr	r3, [pc, #156]	; (1c9b0 <operateOnButtonEvent+0xac>)
   1c912:	4798      	blx	r3
   1c914:	0003      	movs	r3, r0
   1c916:	001a      	movs	r2, r3
   1c918:	2301      	movs	r3, #1
   1c91a:	4053      	eors	r3, r2
   1c91c:	b2db      	uxtb	r3, r3
   1c91e:	2b00      	cmp	r3, #0
   1c920:	d008      	beq.n	1c934 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1c922:	4b24      	ldr	r3, [pc, #144]	; (1c9b4 <operateOnButtonEvent+0xb0>)
   1c924:	4798      	blx	r3
   1c926:	0002      	movs	r2, r0
   1c928:	4b23      	ldr	r3, [pc, #140]	; (1c9b8 <operateOnButtonEvent+0xb4>)
   1c92a:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1c92c:	4b23      	ldr	r3, [pc, #140]	; (1c9bc <operateOnButtonEvent+0xb8>)
   1c92e:	2201      	movs	r2, #1
   1c930:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1c932:	e037      	b.n	1c9a4 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1c934:	2025      	movs	r0, #37	; 0x25
   1c936:	4b1e      	ldr	r3, [pc, #120]	; (1c9b0 <operateOnButtonEvent+0xac>)
   1c938:	4798      	blx	r3
   1c93a:	0003      	movs	r3, r0
   1c93c:	001a      	movs	r2, r3
   1c93e:	2301      	movs	r3, #1
   1c940:	4053      	eors	r3, r2
   1c942:	b2db      	uxtb	r3, r3
   1c944:	2b00      	cmp	r3, #0
   1c946:	d008      	beq.n	1c95a <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1c948:	4b1a      	ldr	r3, [pc, #104]	; (1c9b4 <operateOnButtonEvent+0xb0>)
   1c94a:	4798      	blx	r3
   1c94c:	0002      	movs	r2, r0
   1c94e:	4b1a      	ldr	r3, [pc, #104]	; (1c9b8 <operateOnButtonEvent+0xb4>)
   1c950:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1c952:	4b1a      	ldr	r3, [pc, #104]	; (1c9bc <operateOnButtonEvent+0xb8>)
   1c954:	2202      	movs	r2, #2
   1c956:	701a      	strb	r2, [r3, #0]
}
   1c958:	e024      	b.n	1c9a4 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1c95a:	201c      	movs	r0, #28
   1c95c:	4b14      	ldr	r3, [pc, #80]	; (1c9b0 <operateOnButtonEvent+0xac>)
   1c95e:	4798      	blx	r3
   1c960:	0003      	movs	r3, r0
   1c962:	001a      	movs	r2, r3
   1c964:	2301      	movs	r3, #1
   1c966:	4053      	eors	r3, r2
   1c968:	b2db      	uxtb	r3, r3
   1c96a:	2b00      	cmp	r3, #0
   1c96c:	d008      	beq.n	1c980 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1c96e:	4b11      	ldr	r3, [pc, #68]	; (1c9b4 <operateOnButtonEvent+0xb0>)
   1c970:	4798      	blx	r3
   1c972:	0002      	movs	r2, r0
   1c974:	4b10      	ldr	r3, [pc, #64]	; (1c9b8 <operateOnButtonEvent+0xb4>)
   1c976:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1c978:	4b10      	ldr	r3, [pc, #64]	; (1c9bc <operateOnButtonEvent+0xb8>)
   1c97a:	2203      	movs	r2, #3
   1c97c:	701a      	strb	r2, [r3, #0]
}
   1c97e:	e011      	b.n	1c9a4 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1c980:	2029      	movs	r0, #41	; 0x29
   1c982:	4b0b      	ldr	r3, [pc, #44]	; (1c9b0 <operateOnButtonEvent+0xac>)
   1c984:	4798      	blx	r3
   1c986:	0003      	movs	r3, r0
   1c988:	001a      	movs	r2, r3
   1c98a:	2301      	movs	r3, #1
   1c98c:	4053      	eors	r3, r2
   1c98e:	b2db      	uxtb	r3, r3
   1c990:	2b00      	cmp	r3, #0
   1c992:	d007      	beq.n	1c9a4 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1c994:	4b07      	ldr	r3, [pc, #28]	; (1c9b4 <operateOnButtonEvent+0xb0>)
   1c996:	4798      	blx	r3
   1c998:	0002      	movs	r2, r0
   1c99a:	4b07      	ldr	r3, [pc, #28]	; (1c9b8 <operateOnButtonEvent+0xb4>)
   1c99c:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1c99e:	4b07      	ldr	r3, [pc, #28]	; (1c9bc <operateOnButtonEvent+0xb8>)
   1c9a0:	2204      	movs	r2, #4
   1c9a2:	701a      	strb	r2, [r3, #0]
}
   1c9a4:	46c0      	nop			; (mov r8, r8)
   1c9a6:	46bd      	mov	sp, r7
   1c9a8:	bd80      	pop	{r7, pc}
   1c9aa:	46c0      	nop			; (mov r8, r8)
   1c9ac:	20000793 	.word	0x20000793
   1c9b0:	00018f49 	.word	0x00018f49
   1c9b4:	0002024d 	.word	0x0002024d
   1c9b8:	2000075c 	.word	0x2000075c
   1c9bc:	20000774 	.word	0x20000774

0001c9c0 <buttonFilter>:

void buttonFilter(void)
{
   1c9c0:	b580      	push	{r7, lr}
   1c9c2:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1c9c4:	4b47      	ldr	r3, [pc, #284]	; (1cae4 <buttonFilter+0x124>)
   1c9c6:	781b      	ldrb	r3, [r3, #0]
   1c9c8:	b2db      	uxtb	r3, r3
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d100      	bne.n	1c9d0 <buttonFilter+0x10>
   1c9ce:	e086      	b.n	1cade <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1c9d0:	4b44      	ldr	r3, [pc, #272]	; (1cae4 <buttonFilter+0x124>)
   1c9d2:	781b      	ldrb	r3, [r3, #0]
   1c9d4:	b2db      	uxtb	r3, r3
   1c9d6:	2b01      	cmp	r3, #1
   1c9d8:	d111      	bne.n	1c9fe <buttonFilter+0x3e>
   1c9da:	2026      	movs	r0, #38	; 0x26
   1c9dc:	4b42      	ldr	r3, [pc, #264]	; (1cae8 <buttonFilter+0x128>)
   1c9de:	4798      	blx	r3
   1c9e0:	0003      	movs	r3, r0
   1c9e2:	001a      	movs	r2, r3
   1c9e4:	2301      	movs	r3, #1
   1c9e6:	4053      	eors	r3, r2
   1c9e8:	b2db      	uxtb	r3, r3
   1c9ea:	2b00      	cmp	r3, #0
   1c9ec:	d007      	beq.n	1c9fe <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1c9ee:	4b3d      	ldr	r3, [pc, #244]	; (1cae4 <buttonFilter+0x124>)
   1c9f0:	2200      	movs	r2, #0
   1c9f2:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1c9f4:	2100      	movs	r1, #0
   1c9f6:	2000      	movs	r0, #0
   1c9f8:	4b3c      	ldr	r3, [pc, #240]	; (1caec <buttonFilter+0x12c>)
   1c9fa:	4798      	blx	r3
   1c9fc:	e06f      	b.n	1cade <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1c9fe:	4b39      	ldr	r3, [pc, #228]	; (1cae4 <buttonFilter+0x124>)
   1ca00:	781b      	ldrb	r3, [r3, #0]
   1ca02:	b2db      	uxtb	r3, r3
   1ca04:	2b02      	cmp	r3, #2
   1ca06:	d112      	bne.n	1ca2e <buttonFilter+0x6e>
   1ca08:	2025      	movs	r0, #37	; 0x25
   1ca0a:	4b37      	ldr	r3, [pc, #220]	; (1cae8 <buttonFilter+0x128>)
   1ca0c:	4798      	blx	r3
   1ca0e:	0003      	movs	r3, r0
   1ca10:	001a      	movs	r2, r3
   1ca12:	2301      	movs	r3, #1
   1ca14:	4053      	eors	r3, r2
   1ca16:	b2db      	uxtb	r3, r3
   1ca18:	2b00      	cmp	r3, #0
   1ca1a:	d008      	beq.n	1ca2e <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1ca1c:	4b31      	ldr	r3, [pc, #196]	; (1cae4 <buttonFilter+0x124>)
   1ca1e:	2200      	movs	r2, #0
   1ca20:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1ca22:	2201      	movs	r2, #1
   1ca24:	2100      	movs	r1, #0
   1ca26:	2000      	movs	r0, #0
   1ca28:	4b31      	ldr	r3, [pc, #196]	; (1caf0 <buttonFilter+0x130>)
   1ca2a:	4798      	blx	r3
   1ca2c:	e057      	b.n	1cade <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1ca2e:	4b2d      	ldr	r3, [pc, #180]	; (1cae4 <buttonFilter+0x124>)
   1ca30:	781b      	ldrb	r3, [r3, #0]
   1ca32:	b2db      	uxtb	r3, r3
   1ca34:	2b03      	cmp	r3, #3
   1ca36:	d12b      	bne.n	1ca90 <buttonFilter+0xd0>
   1ca38:	201c      	movs	r0, #28
   1ca3a:	4b2b      	ldr	r3, [pc, #172]	; (1cae8 <buttonFilter+0x128>)
   1ca3c:	4798      	blx	r3
   1ca3e:	0003      	movs	r3, r0
   1ca40:	001a      	movs	r2, r3
   1ca42:	2301      	movs	r3, #1
   1ca44:	4053      	eors	r3, r2
   1ca46:	b2db      	uxtb	r3, r3
   1ca48:	2b00      	cmp	r3, #0
   1ca4a:	d021      	beq.n	1ca90 <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
   1ca4c:	4b25      	ldr	r3, [pc, #148]	; (1cae4 <buttonFilter+0x124>)
   1ca4e:	2200      	movs	r2, #0
   1ca50:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1ca52:	4b28      	ldr	r3, [pc, #160]	; (1caf4 <buttonFilter+0x134>)
   1ca54:	785b      	ldrb	r3, [r3, #1]
   1ca56:	425a      	negs	r2, r3
   1ca58:	4153      	adcs	r3, r2
   1ca5a:	b2db      	uxtb	r3, r3
   1ca5c:	0018      	movs	r0, r3
   1ca5e:	4b26      	ldr	r3, [pc, #152]	; (1caf8 <buttonFilter+0x138>)
   1ca60:	4798      	blx	r3
			resetAutoStart(true);
   1ca62:	2001      	movs	r0, #1
   1ca64:	4b25      	ldr	r3, [pc, #148]	; (1cafc <buttonFilter+0x13c>)
   1ca66:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1ca68:	4b22      	ldr	r3, [pc, #136]	; (1caf4 <buttonFilter+0x134>)
   1ca6a:	785b      	ldrb	r3, [r3, #1]
   1ca6c:	2b00      	cmp	r3, #0
   1ca6e:	d007      	beq.n	1ca80 <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
   1ca70:	2029      	movs	r0, #41	; 0x29
   1ca72:	4b23      	ldr	r3, [pc, #140]	; (1cb00 <buttonFilter+0x140>)
   1ca74:	4798      	blx	r3
   1ca76:	0003      	movs	r3, r0
   1ca78:	001a      	movs	r2, r3
   1ca7a:	4b22      	ldr	r3, [pc, #136]	; (1cb04 <buttonFilter+0x144>)
   1ca7c:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1ca7e:	e02e      	b.n	1cade <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1ca80:	205b      	movs	r0, #91	; 0x5b
   1ca82:	4b1f      	ldr	r3, [pc, #124]	; (1cb00 <buttonFilter+0x140>)
   1ca84:	4798      	blx	r3
   1ca86:	0003      	movs	r3, r0
   1ca88:	001a      	movs	r2, r3
   1ca8a:	4b1e      	ldr	r3, [pc, #120]	; (1cb04 <buttonFilter+0x144>)
   1ca8c:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1ca8e:	e026      	b.n	1cade <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1ca90:	4b14      	ldr	r3, [pc, #80]	; (1cae4 <buttonFilter+0x124>)
   1ca92:	781b      	ldrb	r3, [r3, #0]
   1ca94:	b2db      	uxtb	r3, r3
   1ca96:	2b04      	cmp	r3, #4
   1ca98:	d11d      	bne.n	1cad6 <buttonFilter+0x116>
   1ca9a:	2029      	movs	r0, #41	; 0x29
   1ca9c:	4b12      	ldr	r3, [pc, #72]	; (1cae8 <buttonFilter+0x128>)
   1ca9e:	4798      	blx	r3
   1caa0:	0003      	movs	r3, r0
   1caa2:	001a      	movs	r2, r3
   1caa4:	2301      	movs	r3, #1
   1caa6:	4053      	eors	r3, r2
   1caa8:	b2db      	uxtb	r3, r3
   1caaa:	2b00      	cmp	r3, #0
   1caac:	d013      	beq.n	1cad6 <buttonFilter+0x116>
		{
			lastButtonEvent=0;
   1caae:	4b0d      	ldr	r3, [pc, #52]	; (1cae4 <buttonFilter+0x124>)
   1cab0:	2200      	movs	r2, #0
   1cab2:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1cab4:	4b14      	ldr	r3, [pc, #80]	; (1cb08 <buttonFilter+0x148>)
   1cab6:	781b      	ldrb	r3, [r3, #0]
   1cab8:	b2db      	uxtb	r3, r3
   1caba:	1e5a      	subs	r2, r3, #1
   1cabc:	4193      	sbcs	r3, r2
   1cabe:	b2db      	uxtb	r3, r3
   1cac0:	2201      	movs	r2, #1
   1cac2:	4053      	eors	r3, r2
   1cac4:	b2db      	uxtb	r3, r3
   1cac6:	1c1a      	adds	r2, r3, #0
   1cac8:	2301      	movs	r3, #1
   1caca:	4013      	ands	r3, r2
   1cacc:	b2db      	uxtb	r3, r3
   1cace:	0018      	movs	r0, r3
   1cad0:	4b0e      	ldr	r3, [pc, #56]	; (1cb0c <buttonFilter+0x14c>)
   1cad2:	4798      	blx	r3
   1cad4:	e003      	b.n	1cade <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
   1cad6:	4b03      	ldr	r3, [pc, #12]	; (1cae4 <buttonFilter+0x124>)
   1cad8:	2200      	movs	r2, #0
   1cada:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1cadc:	e7ff      	b.n	1cade <buttonFilter+0x11e>
   1cade:	46c0      	nop			; (mov r8, r8)
   1cae0:	46bd      	mov	sp, r7
   1cae2:	bd80      	pop	{r7, pc}
   1cae4:	20000774 	.word	0x20000774
   1cae8:	00018f49 	.word	0x00018f49
   1caec:	0001b251 	.word	0x0001b251
   1caf0:	0001b439 	.word	0x0001b439
   1caf4:	20000650 	.word	0x20000650
   1caf8:	0001129d 	.word	0x0001129d
   1cafc:	0001ae1d 	.word	0x0001ae1d
   1cb00:	00014931 	.word	0x00014931
   1cb04:	20000708 	.word	0x20000708
   1cb08:	200007a0 	.word	0x200007a0
   1cb0c:	0001cb11 	.word	0x0001cb11

0001cb10 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1cb10:	b580      	push	{r7, lr}
   1cb12:	b082      	sub	sp, #8
   1cb14:	af00      	add	r7, sp, #0
   1cb16:	0002      	movs	r2, r0
   1cb18:	1dfb      	adds	r3, r7, #7
   1cb1a:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1cb1c:	4b03      	ldr	r3, [pc, #12]	; (1cb2c <setDisplayPause+0x1c>)
   1cb1e:	1dfa      	adds	r2, r7, #7
   1cb20:	7812      	ldrb	r2, [r2, #0]
   1cb22:	701a      	strb	r2, [r3, #0]
}
   1cb24:	46c0      	nop			; (mov r8, r8)
   1cb26:	46bd      	mov	sp, r7
   1cb28:	b002      	add	sp, #8
   1cb2a:	bd80      	pop	{r7, pc}
   1cb2c:	200007a0 	.word	0x200007a0

0001cb30 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1cb30:	b580      	push	{r7, lr}
   1cb32:	b082      	sub	sp, #8
   1cb34:	af00      	add	r7, sp, #0
   1cb36:	6039      	str	r1, [r7, #0]
   1cb38:	0011      	movs	r1, r2
   1cb3a:	1dfb      	adds	r3, r7, #7
   1cb3c:	1c02      	adds	r2, r0, #0
   1cb3e:	701a      	strb	r2, [r3, #0]
   1cb40:	1dbb      	adds	r3, r7, #6
   1cb42:	1c0a      	adds	r2, r1, #0
   1cb44:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1cb46:	4b0f      	ldr	r3, [pc, #60]	; (1cb84 <setCallStateOnLCD+0x54>)
   1cb48:	1dfa      	adds	r2, r7, #7
   1cb4a:	7812      	ldrb	r2, [r2, #0]
   1cb4c:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1cb4e:	1dbb      	adds	r3, r7, #6
   1cb50:	781b      	ldrb	r3, [r3, #0]
   1cb52:	2201      	movs	r2, #1
   1cb54:	4053      	eors	r3, r2
   1cb56:	b2db      	uxtb	r3, r3
   1cb58:	2b00      	cmp	r3, #0
   1cb5a:	d00f      	beq.n	1cb7c <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1cb5c:	4b0a      	ldr	r3, [pc, #40]	; (1cb88 <setCallStateOnLCD+0x58>)
   1cb5e:	2214      	movs	r2, #20
   1cb60:	2100      	movs	r1, #0
   1cb62:	0018      	movs	r0, r3
   1cb64:	4b09      	ldr	r3, [pc, #36]	; (1cb8c <setCallStateOnLCD+0x5c>)
   1cb66:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1cb68:	4b06      	ldr	r3, [pc, #24]	; (1cb84 <setCallStateOnLCD+0x54>)
   1cb6a:	781b      	ldrb	r3, [r3, #0]
   1cb6c:	2b00      	cmp	r3, #0
   1cb6e:	d005      	beq.n	1cb7c <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
   1cb70:	683a      	ldr	r2, [r7, #0]
   1cb72:	4b05      	ldr	r3, [pc, #20]	; (1cb88 <setCallStateOnLCD+0x58>)
   1cb74:	0011      	movs	r1, r2
   1cb76:	0018      	movs	r0, r3
   1cb78:	4b05      	ldr	r3, [pc, #20]	; (1cb90 <setCallStateOnLCD+0x60>)
   1cb7a:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1cb7c:	46c0      	nop			; (mov r8, r8)
   1cb7e:	46bd      	mov	sp, r7
   1cb80:	b002      	add	sp, #8
   1cb82:	bd80      	pop	{r7, pc}
   1cb84:	200007c9 	.word	0x200007c9
   1cb88:	20000840 	.word	0x20000840
   1cb8c:	00028e13 	.word	0x00028e13
   1cb90:	00029093 	.word	0x00029093

0001cb94 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1cb94:	b590      	push	{r4, r7, lr}
   1cb96:	b085      	sub	sp, #20
   1cb98:	af00      	add	r7, sp, #0
   1cb9a:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1cb9c:	4b17      	ldr	r3, [pc, #92]	; (1cbfc <vTask_50ms_Timer+0x68>)
   1cb9e:	4798      	blx	r3
   1cba0:	0003      	movs	r3, r0
   1cba2:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cba4:	230c      	movs	r3, #12
   1cba6:	18fb      	adds	r3, r7, r3
   1cba8:	2119      	movs	r1, #25
   1cbaa:	0018      	movs	r0, r3
   1cbac:	4b14      	ldr	r3, [pc, #80]	; (1cc00 <vTask_50ms_Timer+0x6c>)
   1cbae:	4798      	blx	r3
		if(buttonEventOccured)
   1cbb0:	4b14      	ldr	r3, [pc, #80]	; (1cc04 <vTask_50ms_Timer+0x70>)
   1cbb2:	781b      	ldrb	r3, [r3, #0]
   1cbb4:	b2db      	uxtb	r3, r3
   1cbb6:	2b00      	cmp	r3, #0
   1cbb8:	d001      	beq.n	1cbbe <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1cbba:	4b13      	ldr	r3, [pc, #76]	; (1cc08 <vTask_50ms_Timer+0x74>)
   1cbbc:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1cbbe:	4b13      	ldr	r3, [pc, #76]	; (1cc0c <vTask_50ms_Timer+0x78>)
   1cbc0:	681a      	ldr	r2, [r3, #0]
   1cbc2:	2301      	movs	r3, #1
   1cbc4:	425b      	negs	r3, r3
   1cbc6:	0019      	movs	r1, r3
   1cbc8:	0010      	movs	r0, r2
   1cbca:	4b11      	ldr	r3, [pc, #68]	; (1cc10 <vTask_50ms_Timer+0x7c>)
   1cbcc:	4798      	blx	r3
		if(lastButtonEvent>0)
   1cbce:	4b11      	ldr	r3, [pc, #68]	; (1cc14 <vTask_50ms_Timer+0x80>)
   1cbd0:	781b      	ldrb	r3, [r3, #0]
   1cbd2:	b2db      	uxtb	r3, r3
   1cbd4:	2b00      	cmp	r3, #0
   1cbd6:	d008      	beq.n	1cbea <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1cbd8:	4b0f      	ldr	r3, [pc, #60]	; (1cc18 <vTask_50ms_Timer+0x84>)
   1cbda:	2201      	movs	r2, #1
   1cbdc:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1cbde:	4b0f      	ldr	r3, [pc, #60]	; (1cc1c <vTask_50ms_Timer+0x88>)
   1cbe0:	681b      	ldr	r3, [r3, #0]
   1cbe2:	2102      	movs	r1, #2
   1cbe4:	0018      	movs	r0, r3
   1cbe6:	4b0e      	ldr	r3, [pc, #56]	; (1cc20 <vTask_50ms_Timer+0x8c>)
   1cbe8:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1cbea:	4b08      	ldr	r3, [pc, #32]	; (1cc0c <vTask_50ms_Timer+0x78>)
   1cbec:	6818      	ldr	r0, [r3, #0]
   1cbee:	2300      	movs	r3, #0
   1cbf0:	2200      	movs	r2, #0
   1cbf2:	2100      	movs	r1, #0
   1cbf4:	4c0b      	ldr	r4, [pc, #44]	; (1cc24 <vTask_50ms_Timer+0x90>)
   1cbf6:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cbf8:	e7d4      	b.n	1cba4 <vTask_50ms_Timer+0x10>
   1cbfa:	46c0      	nop			; (mov r8, r8)
   1cbfc:	0002024d 	.word	0x0002024d
   1cc00:	0001fe21 	.word	0x0001fe21
   1cc04:	20000793 	.word	0x20000793
   1cc08:	0001c905 	.word	0x0001c905
   1cc0c:	2000023c 	.word	0x2000023c
   1cc10:	0001f5e1 	.word	0x0001f5e1
   1cc14:	20000774 	.word	0x20000774
   1cc18:	2000087c 	.word	0x2000087c
   1cc1c:	20000240 	.word	0x20000240
   1cc20:	0001ff45 	.word	0x0001ff45
   1cc24:	0001f141 	.word	0x0001f141

0001cc28 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1cc28:	b580      	push	{r7, lr}
   1cc2a:	b082      	sub	sp, #8
   1cc2c:	af00      	add	r7, sp, #0
   1cc2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1cc30:	687b      	ldr	r3, [r7, #4]
   1cc32:	2200      	movs	r2, #0
   1cc34:	701a      	strb	r2, [r3, #0]
}
   1cc36:	46c0      	nop			; (mov r8, r8)
   1cc38:	46bd      	mov	sp, r7
   1cc3a:	b002      	add	sp, #8
   1cc3c:	bd80      	pop	{r7, pc}
	...

0001cc40 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1cc40:	b580      	push	{r7, lr}
   1cc42:	b082      	sub	sp, #8
   1cc44:	af00      	add	r7, sp, #0
   1cc46:	0002      	movs	r2, r0
   1cc48:	6039      	str	r1, [r7, #0]
   1cc4a:	1dfb      	adds	r3, r7, #7
   1cc4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cc4e:	1dfb      	adds	r3, r7, #7
   1cc50:	781b      	ldrb	r3, [r3, #0]
   1cc52:	2b01      	cmp	r3, #1
   1cc54:	d00a      	beq.n	1cc6c <system_apb_clock_set_mask+0x2c>
   1cc56:	2b02      	cmp	r3, #2
   1cc58:	d00f      	beq.n	1cc7a <system_apb_clock_set_mask+0x3a>
   1cc5a:	2b00      	cmp	r3, #0
   1cc5c:	d114      	bne.n	1cc88 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1cc5e:	4b0e      	ldr	r3, [pc, #56]	; (1cc98 <system_apb_clock_set_mask+0x58>)
   1cc60:	4a0d      	ldr	r2, [pc, #52]	; (1cc98 <system_apb_clock_set_mask+0x58>)
   1cc62:	6991      	ldr	r1, [r2, #24]
   1cc64:	683a      	ldr	r2, [r7, #0]
   1cc66:	430a      	orrs	r2, r1
   1cc68:	619a      	str	r2, [r3, #24]
			break;
   1cc6a:	e00f      	b.n	1cc8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1cc6c:	4b0a      	ldr	r3, [pc, #40]	; (1cc98 <system_apb_clock_set_mask+0x58>)
   1cc6e:	4a0a      	ldr	r2, [pc, #40]	; (1cc98 <system_apb_clock_set_mask+0x58>)
   1cc70:	69d1      	ldr	r1, [r2, #28]
   1cc72:	683a      	ldr	r2, [r7, #0]
   1cc74:	430a      	orrs	r2, r1
   1cc76:	61da      	str	r2, [r3, #28]
			break;
   1cc78:	e008      	b.n	1cc8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1cc7a:	4b07      	ldr	r3, [pc, #28]	; (1cc98 <system_apb_clock_set_mask+0x58>)
   1cc7c:	4a06      	ldr	r2, [pc, #24]	; (1cc98 <system_apb_clock_set_mask+0x58>)
   1cc7e:	6a11      	ldr	r1, [r2, #32]
   1cc80:	683a      	ldr	r2, [r7, #0]
   1cc82:	430a      	orrs	r2, r1
   1cc84:	621a      	str	r2, [r3, #32]
			break;
   1cc86:	e001      	b.n	1cc8c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1cc88:	2317      	movs	r3, #23
   1cc8a:	e000      	b.n	1cc8e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1cc8c:	2300      	movs	r3, #0
}
   1cc8e:	0018      	movs	r0, r3
   1cc90:	46bd      	mov	sp, r7
   1cc92:	b002      	add	sp, #8
   1cc94:	bd80      	pop	{r7, pc}
   1cc96:	46c0      	nop			; (mov r8, r8)
   1cc98:	40000400 	.word	0x40000400

0001cc9c <ac_is_syncing>:
{
   1cc9c:	b580      	push	{r7, lr}
   1cc9e:	b084      	sub	sp, #16
   1cca0:	af00      	add	r7, sp, #0
   1cca2:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1cca4:	687b      	ldr	r3, [r7, #4]
   1cca6:	681b      	ldr	r3, [r3, #0]
   1cca8:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1ccaa:	68fb      	ldr	r3, [r7, #12]
   1ccac:	7a5b      	ldrb	r3, [r3, #9]
   1ccae:	b2db      	uxtb	r3, r3
   1ccb0:	b25b      	sxtb	r3, r3
   1ccb2:	2b00      	cmp	r3, #0
   1ccb4:	da01      	bge.n	1ccba <ac_is_syncing+0x1e>
		return true;
   1ccb6:	2301      	movs	r3, #1
   1ccb8:	e000      	b.n	1ccbc <ac_is_syncing+0x20>
	return false;
   1ccba:	2300      	movs	r3, #0
}
   1ccbc:	0018      	movs	r0, r3
   1ccbe:	46bd      	mov	sp, r7
   1ccc0:	b004      	add	sp, #16
   1ccc2:	bd80      	pop	{r7, pc}

0001ccc4 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1ccc4:	b580      	push	{r7, lr}
   1ccc6:	b086      	sub	sp, #24
   1ccc8:	af00      	add	r7, sp, #0
   1ccca:	6078      	str	r0, [r7, #4]
   1cccc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1ccce:	687b      	ldr	r3, [r7, #4]
   1ccd0:	681b      	ldr	r3, [r3, #0]
   1ccd2:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1ccd4:	2300      	movs	r3, #0
   1ccd6:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1ccd8:	2300      	movs	r3, #0
   1ccda:	613b      	str	r3, [r7, #16]
   1ccdc:	e00f      	b.n	1ccfe <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1ccde:	683a      	ldr	r2, [r7, #0]
   1cce0:	693b      	ldr	r3, [r7, #16]
   1cce2:	18d3      	adds	r3, r2, r3
   1cce4:	781b      	ldrb	r3, [r3, #0]
   1cce6:	2b00      	cmp	r3, #0
   1cce8:	d006      	beq.n	1ccf8 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1ccea:	2204      	movs	r2, #4
   1ccec:	693b      	ldr	r3, [r7, #16]
   1ccee:	409a      	lsls	r2, r3
   1ccf0:	0013      	movs	r3, r2
   1ccf2:	697a      	ldr	r2, [r7, #20]
   1ccf4:	4313      	orrs	r3, r2
   1ccf6:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1ccf8:	693b      	ldr	r3, [r7, #16]
   1ccfa:	3301      	adds	r3, #1
   1ccfc:	613b      	str	r3, [r7, #16]
   1ccfe:	693b      	ldr	r3, [r7, #16]
   1cd00:	2b00      	cmp	r3, #0
   1cd02:	d0ec      	beq.n	1ccde <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1cd04:	46c0      	nop			; (mov r8, r8)
   1cd06:	687b      	ldr	r3, [r7, #4]
   1cd08:	0018      	movs	r0, r3
   1cd0a:	4b06      	ldr	r3, [pc, #24]	; (1cd24 <_ac_set_config+0x60>)
   1cd0c:	4798      	blx	r3
   1cd0e:	1e03      	subs	r3, r0, #0
   1cd10:	d1f9      	bne.n	1cd06 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1cd12:	697b      	ldr	r3, [r7, #20]
   1cd14:	b2da      	uxtb	r2, r3
   1cd16:	68fb      	ldr	r3, [r7, #12]
   1cd18:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1cd1a:	2300      	movs	r3, #0
}
   1cd1c:	0018      	movs	r0, r3
   1cd1e:	46bd      	mov	sp, r7
   1cd20:	b006      	add	sp, #24
   1cd22:	bd80      	pop	{r7, pc}
   1cd24:	0001cc9d 	.word	0x0001cc9d

0001cd28 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1cd28:	b580      	push	{r7, lr}
   1cd2a:	b086      	sub	sp, #24
   1cd2c:	af00      	add	r7, sp, #0
   1cd2e:	60f8      	str	r0, [r7, #12]
   1cd30:	60b9      	str	r1, [r7, #8]
   1cd32:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1cd34:	68fb      	ldr	r3, [r7, #12]
   1cd36:	68ba      	ldr	r2, [r7, #8]
   1cd38:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1cd3a:	2314      	movs	r3, #20
   1cd3c:	18fb      	adds	r3, r7, r3
   1cd3e:	0018      	movs	r0, r3
   1cd40:	4b2a      	ldr	r3, [pc, #168]	; (1cdec <ac_init+0xc4>)
   1cd42:	4798      	blx	r3

	if (hw == AC) {
   1cd44:	68bb      	ldr	r3, [r7, #8]
   1cd46:	4a2a      	ldr	r2, [pc, #168]	; (1cdf0 <ac_init+0xc8>)
   1cd48:	4293      	cmp	r3, r2
   1cd4a:	d121      	bne.n	1cd90 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1cd4c:	2380      	movs	r3, #128	; 0x80
   1cd4e:	029b      	lsls	r3, r3, #10
   1cd50:	0019      	movs	r1, r3
   1cd52:	2002      	movs	r0, #2
   1cd54:	4b27      	ldr	r3, [pc, #156]	; (1cdf4 <ac_init+0xcc>)
   1cd56:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1cd58:	687b      	ldr	r3, [r7, #4]
   1cd5a:	785a      	ldrb	r2, [r3, #1]
   1cd5c:	2314      	movs	r3, #20
   1cd5e:	18fb      	adds	r3, r7, r3
   1cd60:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1cd62:	2314      	movs	r3, #20
   1cd64:	18fb      	adds	r3, r7, r3
   1cd66:	0019      	movs	r1, r3
   1cd68:	201f      	movs	r0, #31
   1cd6a:	4b23      	ldr	r3, [pc, #140]	; (1cdf8 <ac_init+0xd0>)
   1cd6c:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1cd6e:	201f      	movs	r0, #31
   1cd70:	4b22      	ldr	r3, [pc, #136]	; (1cdfc <ac_init+0xd4>)
   1cd72:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1cd74:	687b      	ldr	r3, [r7, #4]
   1cd76:	789a      	ldrb	r2, [r3, #2]
   1cd78:	2314      	movs	r3, #20
   1cd7a:	18fb      	adds	r3, r7, r3
   1cd7c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1cd7e:	2314      	movs	r3, #20
   1cd80:	18fb      	adds	r3, r7, r3
   1cd82:	0019      	movs	r1, r3
   1cd84:	2020      	movs	r0, #32
   1cd86:	4b1c      	ldr	r3, [pc, #112]	; (1cdf8 <ac_init+0xd0>)
   1cd88:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1cd8a:	2020      	movs	r0, #32
   1cd8c:	4b1b      	ldr	r3, [pc, #108]	; (1cdfc <ac_init+0xd4>)
   1cd8e:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1cd90:	2317      	movs	r3, #23
   1cd92:	18fb      	adds	r3, r7, r3
   1cd94:	2200      	movs	r2, #0
   1cd96:	701a      	strb	r2, [r3, #0]
   1cd98:	e00f      	b.n	1cdba <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1cd9a:	2317      	movs	r3, #23
   1cd9c:	18fb      	adds	r3, r7, r3
   1cd9e:	781b      	ldrb	r3, [r3, #0]
   1cda0:	68fa      	ldr	r2, [r7, #12]
   1cda2:	009b      	lsls	r3, r3, #2
   1cda4:	18d3      	adds	r3, r2, r3
   1cda6:	3304      	adds	r3, #4
   1cda8:	2200      	movs	r2, #0
   1cdaa:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1cdac:	2317      	movs	r3, #23
   1cdae:	18fb      	adds	r3, r7, r3
   1cdb0:	781a      	ldrb	r2, [r3, #0]
   1cdb2:	2317      	movs	r3, #23
   1cdb4:	18fb      	adds	r3, r7, r3
   1cdb6:	3201      	adds	r2, #1
   1cdb8:	701a      	strb	r2, [r3, #0]
   1cdba:	2317      	movs	r3, #23
   1cdbc:	18fb      	adds	r3, r7, r3
   1cdbe:	781b      	ldrb	r3, [r3, #0]
   1cdc0:	2b04      	cmp	r3, #4
   1cdc2:	d9ea      	bls.n	1cd9a <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1cdc4:	68fb      	ldr	r3, [r7, #12]
   1cdc6:	2200      	movs	r2, #0
   1cdc8:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1cdca:	68fb      	ldr	r3, [r7, #12]
   1cdcc:	2200      	movs	r2, #0
   1cdce:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1cdd0:	4b0b      	ldr	r3, [pc, #44]	; (1ce00 <ac_init+0xd8>)
   1cdd2:	68fa      	ldr	r2, [r7, #12]
   1cdd4:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1cdd6:	687a      	ldr	r2, [r7, #4]
   1cdd8:	68fb      	ldr	r3, [r7, #12]
   1cdda:	0011      	movs	r1, r2
   1cddc:	0018      	movs	r0, r3
   1cdde:	4b09      	ldr	r3, [pc, #36]	; (1ce04 <ac_init+0xdc>)
   1cde0:	4798      	blx	r3
   1cde2:	0003      	movs	r3, r0
}
   1cde4:	0018      	movs	r0, r3
   1cde6:	46bd      	mov	sp, r7
   1cde8:	b006      	add	sp, #24
   1cdea:	bd80      	pop	{r7, pc}
   1cdec:	0001cc29 	.word	0x0001cc29
   1cdf0:	42004400 	.word	0x42004400
   1cdf4:	0001cc41 	.word	0x0001cc41
   1cdf8:	000249b5 	.word	0x000249b5
   1cdfc:	000249f9 	.word	0x000249f9
   1ce00:	20000984 	.word	0x20000984
   1ce04:	0001ccc5 	.word	0x0001ccc5

0001ce08 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1ce08:	b580      	push	{r7, lr}
   1ce0a:	b086      	sub	sp, #24
   1ce0c:	af00      	add	r7, sp, #0
   1ce0e:	60f8      	str	r0, [r7, #12]
   1ce10:	607a      	str	r2, [r7, #4]
   1ce12:	230b      	movs	r3, #11
   1ce14:	18fb      	adds	r3, r7, r3
   1ce16:	1c0a      	adds	r2, r1, #0
   1ce18:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1ce1a:	68fb      	ldr	r3, [r7, #12]
   1ce1c:	681b      	ldr	r3, [r3, #0]
   1ce1e:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1ce20:	2300      	movs	r3, #0
   1ce22:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1ce24:	687b      	ldr	r3, [r7, #4]
   1ce26:	685b      	ldr	r3, [r3, #4]
   1ce28:	697a      	ldr	r2, [r7, #20]
   1ce2a:	4313      	orrs	r3, r2
   1ce2c:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1ce2e:	687b      	ldr	r3, [r7, #4]
   1ce30:	7a1b      	ldrb	r3, [r3, #8]
   1ce32:	2b00      	cmp	r3, #0
   1ce34:	d004      	beq.n	1ce40 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1ce36:	697b      	ldr	r3, [r7, #20]
   1ce38:	2280      	movs	r2, #128	; 0x80
   1ce3a:	0312      	lsls	r2, r2, #12
   1ce3c:	4313      	orrs	r3, r2
   1ce3e:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1ce40:	687b      	ldr	r3, [r7, #4]
   1ce42:	68db      	ldr	r3, [r3, #12]
   1ce44:	697a      	ldr	r2, [r7, #20]
   1ce46:	4313      	orrs	r3, r2
   1ce48:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1ce4a:	687b      	ldr	r3, [r7, #4]
   1ce4c:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1ce4e:	687b      	ldr	r3, [r7, #4]
   1ce50:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1ce52:	4313      	orrs	r3, r2
   1ce54:	b29b      	uxth	r3, r3
   1ce56:	001a      	movs	r2, r3
	compctrl_temp |=
   1ce58:	697b      	ldr	r3, [r7, #20]
   1ce5a:	4313      	orrs	r3, r2
   1ce5c:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1ce5e:	687b      	ldr	r3, [r7, #4]
   1ce60:	781b      	ldrb	r3, [r3, #0]
   1ce62:	001a      	movs	r2, r3
   1ce64:	697b      	ldr	r3, [r7, #20]
   1ce66:	4313      	orrs	r3, r2
   1ce68:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1ce6a:	687b      	ldr	r3, [r7, #4]
   1ce6c:	7d5b      	ldrb	r3, [r3, #21]
   1ce6e:	001a      	movs	r2, r3
   1ce70:	697b      	ldr	r3, [r7, #20]
   1ce72:	4313      	orrs	r3, r2
   1ce74:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1ce76:	46c0      	nop			; (mov r8, r8)
   1ce78:	68fb      	ldr	r3, [r7, #12]
   1ce7a:	0018      	movs	r0, r3
   1ce7c:	4b0e      	ldr	r3, [pc, #56]	; (1ceb8 <ac_chan_set_config+0xb0>)
   1ce7e:	4798      	blx	r3
   1ce80:	1e03      	subs	r3, r0, #0
   1ce82:	d1f9      	bne.n	1ce78 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1ce84:	230b      	movs	r3, #11
   1ce86:	18fb      	adds	r3, r7, r3
   1ce88:	781a      	ldrb	r2, [r3, #0]
   1ce8a:	693b      	ldr	r3, [r7, #16]
   1ce8c:	3204      	adds	r2, #4
   1ce8e:	0092      	lsls	r2, r2, #2
   1ce90:	6979      	ldr	r1, [r7, #20]
   1ce92:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1ce94:	230b      	movs	r3, #11
   1ce96:	18fb      	adds	r3, r7, r3
   1ce98:	781b      	ldrb	r3, [r3, #0]
   1ce9a:	687a      	ldr	r2, [r7, #4]
   1ce9c:	7d12      	ldrb	r2, [r2, #20]
   1ce9e:	3a01      	subs	r2, #1
   1cea0:	b2d0      	uxtb	r0, r2
   1cea2:	693a      	ldr	r2, [r7, #16]
   1cea4:	2120      	movs	r1, #32
   1cea6:	18d3      	adds	r3, r2, r3
   1cea8:	185b      	adds	r3, r3, r1
   1ceaa:	1c02      	adds	r2, r0, #0
   1ceac:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1ceae:	2300      	movs	r3, #0
}
   1ceb0:	0018      	movs	r0, r3
   1ceb2:	46bd      	mov	sp, r7
   1ceb4:	b006      	add	sp, #24
   1ceb6:	bd80      	pop	{r7, pc}
   1ceb8:	0001cc9d 	.word	0x0001cc9d

0001cebc <system_gclk_chan_get_config_defaults>:
{
   1cebc:	b580      	push	{r7, lr}
   1cebe:	b082      	sub	sp, #8
   1cec0:	af00      	add	r7, sp, #0
   1cec2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1cec4:	687b      	ldr	r3, [r7, #4]
   1cec6:	2200      	movs	r2, #0
   1cec8:	701a      	strb	r2, [r3, #0]
}
   1ceca:	46c0      	nop			; (mov r8, r8)
   1cecc:	46bd      	mov	sp, r7
   1cece:	b002      	add	sp, #8
   1ced0:	bd80      	pop	{r7, pc}
	...

0001ced4 <system_apb_clock_set_mask>:
{
   1ced4:	b580      	push	{r7, lr}
   1ced6:	b082      	sub	sp, #8
   1ced8:	af00      	add	r7, sp, #0
   1ceda:	0002      	movs	r2, r0
   1cedc:	6039      	str	r1, [r7, #0]
   1cede:	1dfb      	adds	r3, r7, #7
   1cee0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cee2:	1dfb      	adds	r3, r7, #7
   1cee4:	781b      	ldrb	r3, [r3, #0]
   1cee6:	2b01      	cmp	r3, #1
   1cee8:	d00a      	beq.n	1cf00 <system_apb_clock_set_mask+0x2c>
   1ceea:	2b02      	cmp	r3, #2
   1ceec:	d00f      	beq.n	1cf0e <system_apb_clock_set_mask+0x3a>
   1ceee:	2b00      	cmp	r3, #0
   1cef0:	d114      	bne.n	1cf1c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1cef2:	4b0e      	ldr	r3, [pc, #56]	; (1cf2c <system_apb_clock_set_mask+0x58>)
   1cef4:	4a0d      	ldr	r2, [pc, #52]	; (1cf2c <system_apb_clock_set_mask+0x58>)
   1cef6:	6991      	ldr	r1, [r2, #24]
   1cef8:	683a      	ldr	r2, [r7, #0]
   1cefa:	430a      	orrs	r2, r1
   1cefc:	619a      	str	r2, [r3, #24]
			break;
   1cefe:	e00f      	b.n	1cf20 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1cf00:	4b0a      	ldr	r3, [pc, #40]	; (1cf2c <system_apb_clock_set_mask+0x58>)
   1cf02:	4a0a      	ldr	r2, [pc, #40]	; (1cf2c <system_apb_clock_set_mask+0x58>)
   1cf04:	69d1      	ldr	r1, [r2, #28]
   1cf06:	683a      	ldr	r2, [r7, #0]
   1cf08:	430a      	orrs	r2, r1
   1cf0a:	61da      	str	r2, [r3, #28]
			break;
   1cf0c:	e008      	b.n	1cf20 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1cf0e:	4b07      	ldr	r3, [pc, #28]	; (1cf2c <system_apb_clock_set_mask+0x58>)
   1cf10:	4a06      	ldr	r2, [pc, #24]	; (1cf2c <system_apb_clock_set_mask+0x58>)
   1cf12:	6a11      	ldr	r1, [r2, #32]
   1cf14:	683a      	ldr	r2, [r7, #0]
   1cf16:	430a      	orrs	r2, r1
   1cf18:	621a      	str	r2, [r3, #32]
			break;
   1cf1a:	e001      	b.n	1cf20 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1cf1c:	2317      	movs	r3, #23
   1cf1e:	e000      	b.n	1cf22 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1cf20:	2300      	movs	r3, #0
}
   1cf22:	0018      	movs	r0, r3
   1cf24:	46bd      	mov	sp, r7
   1cf26:	b002      	add	sp, #8
   1cf28:	bd80      	pop	{r7, pc}
   1cf2a:	46c0      	nop			; (mov r8, r8)
   1cf2c:	40000400 	.word	0x40000400

0001cf30 <system_pinmux_get_config_defaults>:
{
   1cf30:	b580      	push	{r7, lr}
   1cf32:	b082      	sub	sp, #8
   1cf34:	af00      	add	r7, sp, #0
   1cf36:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1cf38:	687b      	ldr	r3, [r7, #4]
   1cf3a:	2280      	movs	r2, #128	; 0x80
   1cf3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1cf3e:	687b      	ldr	r3, [r7, #4]
   1cf40:	2200      	movs	r2, #0
   1cf42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1cf44:	687b      	ldr	r3, [r7, #4]
   1cf46:	2201      	movs	r2, #1
   1cf48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1cf4a:	687b      	ldr	r3, [r7, #4]
   1cf4c:	2200      	movs	r2, #0
   1cf4e:	70da      	strb	r2, [r3, #3]
}
   1cf50:	46c0      	nop			; (mov r8, r8)
   1cf52:	46bd      	mov	sp, r7
   1cf54:	b002      	add	sp, #8
   1cf56:	bd80      	pop	{r7, pc}

0001cf58 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1cf58:	b580      	push	{r7, lr}
   1cf5a:	b082      	sub	sp, #8
   1cf5c:	af00      	add	r7, sp, #0
   1cf5e:	0002      	movs	r2, r0
   1cf60:	1dfb      	adds	r3, r7, #7
   1cf62:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1cf64:	1dfb      	adds	r3, r7, #7
   1cf66:	781b      	ldrb	r3, [r3, #0]
   1cf68:	2b00      	cmp	r3, #0
   1cf6a:	d002      	beq.n	1cf72 <system_voltage_reference_enable+0x1a>
   1cf6c:	2b01      	cmp	r3, #1
   1cf6e:	d007      	beq.n	1cf80 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1cf70:	e00d      	b.n	1cf8e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1cf72:	4b08      	ldr	r3, [pc, #32]	; (1cf94 <system_voltage_reference_enable+0x3c>)
   1cf74:	4a07      	ldr	r2, [pc, #28]	; (1cf94 <system_voltage_reference_enable+0x3c>)
   1cf76:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1cf78:	2102      	movs	r1, #2
   1cf7a:	430a      	orrs	r2, r1
   1cf7c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1cf7e:	e006      	b.n	1cf8e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1cf80:	4b04      	ldr	r3, [pc, #16]	; (1cf94 <system_voltage_reference_enable+0x3c>)
   1cf82:	4a04      	ldr	r2, [pc, #16]	; (1cf94 <system_voltage_reference_enable+0x3c>)
   1cf84:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1cf86:	2104      	movs	r1, #4
   1cf88:	430a      	orrs	r2, r1
   1cf8a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1cf8c:	46c0      	nop			; (mov r8, r8)
	}
}
   1cf8e:	46bd      	mov	sp, r7
   1cf90:	b002      	add	sp, #8
   1cf92:	bd80      	pop	{r7, pc}
   1cf94:	40000800 	.word	0x40000800

0001cf98 <adc_is_syncing>:
{
   1cf98:	b580      	push	{r7, lr}
   1cf9a:	b084      	sub	sp, #16
   1cf9c:	af00      	add	r7, sp, #0
   1cf9e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1cfa0:	687b      	ldr	r3, [r7, #4]
   1cfa2:	681b      	ldr	r3, [r3, #0]
   1cfa4:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1cfa6:	68fb      	ldr	r3, [r7, #12]
   1cfa8:	7e5b      	ldrb	r3, [r3, #25]
   1cfaa:	b2db      	uxtb	r3, r3
   1cfac:	b25b      	sxtb	r3, r3
   1cfae:	2b00      	cmp	r3, #0
   1cfb0:	da01      	bge.n	1cfb6 <adc_is_syncing+0x1e>
		return true;
   1cfb2:	2301      	movs	r3, #1
   1cfb4:	e000      	b.n	1cfb8 <adc_is_syncing+0x20>
	return false;
   1cfb6:	2300      	movs	r3, #0
}
   1cfb8:	0018      	movs	r0, r3
   1cfba:	46bd      	mov	sp, r7
   1cfbc:	b004      	add	sp, #16
   1cfbe:	bd80      	pop	{r7, pc}

0001cfc0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1cfc0:	b580      	push	{r7, lr}
   1cfc2:	b082      	sub	sp, #8
   1cfc4:	af00      	add	r7, sp, #0
   1cfc6:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1cfc8:	687b      	ldr	r3, [r7, #4]
   1cfca:	2200      	movs	r2, #0
   1cfcc:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1cfce:	687b      	ldr	r3, [r7, #4]
   1cfd0:	2200      	movs	r2, #0
   1cfd2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1cfd4:	687b      	ldr	r3, [r7, #4]
   1cfd6:	2200      	movs	r2, #0
   1cfd8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1cfda:	687b      	ldr	r3, [r7, #4]
   1cfdc:	2200      	movs	r2, #0
   1cfde:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1cfe0:	687b      	ldr	r3, [r7, #4]
   1cfe2:	2200      	movs	r2, #0
   1cfe4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1cfe6:	687b      	ldr	r3, [r7, #4]
   1cfe8:	2200      	movs	r2, #0
   1cfea:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1cfec:	687b      	ldr	r3, [r7, #4]
   1cfee:	2200      	movs	r2, #0
   1cff0:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1cff2:	687b      	ldr	r3, [r7, #4]
   1cff4:	2200      	movs	r2, #0
   1cff6:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1cff8:	687b      	ldr	r3, [r7, #4]
   1cffa:	2200      	movs	r2, #0
   1cffc:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1cffe:	687b      	ldr	r3, [r7, #4]
   1d000:	22c0      	movs	r2, #192	; 0xc0
   1d002:	0152      	lsls	r2, r2, #5
   1d004:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1d006:	687b      	ldr	r3, [r7, #4]
   1d008:	2200      	movs	r2, #0
   1d00a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1d00c:	687b      	ldr	r3, [r7, #4]
   1d00e:	2200      	movs	r2, #0
   1d010:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1d012:	687b      	ldr	r3, [r7, #4]
   1d014:	2200      	movs	r2, #0
   1d016:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1d018:	687b      	ldr	r3, [r7, #4]
   1d01a:	2200      	movs	r2, #0
   1d01c:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1d01e:	687b      	ldr	r3, [r7, #4]
   1d020:	2200      	movs	r2, #0
   1d022:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1d024:	687b      	ldr	r3, [r7, #4]
   1d026:	222a      	movs	r2, #42	; 0x2a
   1d028:	2100      	movs	r1, #0
   1d02a:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1d02c:	687b      	ldr	r3, [r7, #4]
   1d02e:	2200      	movs	r2, #0
   1d030:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1d032:	687b      	ldr	r3, [r7, #4]
   1d034:	2200      	movs	r2, #0
   1d036:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1d038:	687b      	ldr	r3, [r7, #4]
   1d03a:	2224      	movs	r2, #36	; 0x24
   1d03c:	2100      	movs	r1, #0
   1d03e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1d040:	687b      	ldr	r3, [r7, #4]
   1d042:	2200      	movs	r2, #0
   1d044:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1d046:	687b      	ldr	r3, [r7, #4]
   1d048:	2200      	movs	r2, #0
   1d04a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1d04c:	687b      	ldr	r3, [r7, #4]
   1d04e:	2200      	movs	r2, #0
   1d050:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1d052:	687b      	ldr	r3, [r7, #4]
   1d054:	222b      	movs	r2, #43	; 0x2b
   1d056:	2100      	movs	r1, #0
   1d058:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1d05a:	687b      	ldr	r3, [r7, #4]
   1d05c:	222c      	movs	r2, #44	; 0x2c
   1d05e:	2100      	movs	r1, #0
   1d060:	5499      	strb	r1, [r3, r2]
}
   1d062:	46c0      	nop			; (mov r8, r8)
   1d064:	46bd      	mov	sp, r7
   1d066:	b002      	add	sp, #8
   1d068:	bd80      	pop	{r7, pc}
	...

0001d06c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1d06c:	b580      	push	{r7, lr}
   1d06e:	b098      	sub	sp, #96	; 0x60
   1d070:	af00      	add	r7, sp, #0
   1d072:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1d074:	230c      	movs	r3, #12
   1d076:	18fa      	adds	r2, r7, r3
   1d078:	4b15      	ldr	r3, [pc, #84]	; (1d0d0 <_adc_configure_ain_pin+0x64>)
   1d07a:	0010      	movs	r0, r2
   1d07c:	0019      	movs	r1, r3
   1d07e:	2350      	movs	r3, #80	; 0x50
   1d080:	001a      	movs	r2, r3
   1d082:	4b14      	ldr	r3, [pc, #80]	; (1d0d4 <_adc_configure_ain_pin+0x68>)
   1d084:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1d086:	4b14      	ldr	r3, [pc, #80]	; (1d0d8 <_adc_configure_ain_pin+0x6c>)
   1d088:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1d08a:	687b      	ldr	r3, [r7, #4]
   1d08c:	2b13      	cmp	r3, #19
   1d08e:	d81a      	bhi.n	1d0c6 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1d090:	230c      	movs	r3, #12
   1d092:	18fb      	adds	r3, r7, r3
   1d094:	687a      	ldr	r2, [r7, #4]
   1d096:	0092      	lsls	r2, r2, #2
   1d098:	58d3      	ldr	r3, [r2, r3]
   1d09a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1d09c:	2308      	movs	r3, #8
   1d09e:	18fb      	adds	r3, r7, r3
   1d0a0:	0018      	movs	r0, r3
   1d0a2:	4b0e      	ldr	r3, [pc, #56]	; (1d0dc <_adc_configure_ain_pin+0x70>)
   1d0a4:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1d0a6:	2308      	movs	r3, #8
   1d0a8:	18fb      	adds	r3, r7, r3
   1d0aa:	2200      	movs	r2, #0
   1d0ac:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1d0ae:	2308      	movs	r3, #8
   1d0b0:	18fb      	adds	r3, r7, r3
   1d0b2:	2201      	movs	r2, #1
   1d0b4:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1d0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d0b8:	b2db      	uxtb	r3, r3
   1d0ba:	2208      	movs	r2, #8
   1d0bc:	18ba      	adds	r2, r7, r2
   1d0be:	0011      	movs	r1, r2
   1d0c0:	0018      	movs	r0, r3
   1d0c2:	4b07      	ldr	r3, [pc, #28]	; (1d0e0 <_adc_configure_ain_pin+0x74>)
   1d0c4:	4798      	blx	r3
	}
}
   1d0c6:	46c0      	nop			; (mov r8, r8)
   1d0c8:	46bd      	mov	sp, r7
   1d0ca:	b018      	add	sp, #96	; 0x60
   1d0cc:	bd80      	pop	{r7, pc}
   1d0ce:	46c0      	nop			; (mov r8, r8)
   1d0d0:	0002a94c 	.word	0x0002a94c
   1d0d4:	00028ddd 	.word	0x00028ddd
   1d0d8:	0000ffff 	.word	0x0000ffff
   1d0dc:	0001cf31 	.word	0x0001cf31
   1d0e0:	00024ca1 	.word	0x00024ca1

0001d0e4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1d0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0e6:	b089      	sub	sp, #36	; 0x24
   1d0e8:	af00      	add	r7, sp, #0
   1d0ea:	6078      	str	r0, [r7, #4]
   1d0ec:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1d0ee:	231f      	movs	r3, #31
   1d0f0:	18fb      	adds	r3, r7, r3
   1d0f2:	2200      	movs	r2, #0
   1d0f4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1d0f6:	2310      	movs	r3, #16
   1d0f8:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1d0fa:	2317      	movs	r3, #23
   1d0fc:	18fb      	adds	r3, r7, r3
   1d0fe:	2200      	movs	r2, #0
   1d100:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1d102:	687b      	ldr	r3, [r7, #4]
   1d104:	681b      	ldr	r3, [r3, #0]
   1d106:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d108:	230c      	movs	r3, #12
   1d10a:	18fb      	adds	r3, r7, r3
   1d10c:	0018      	movs	r0, r3
   1d10e:	4bce      	ldr	r3, [pc, #824]	; (1d448 <_adc_set_config+0x364>)
   1d110:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1d112:	683b      	ldr	r3, [r7, #0]
   1d114:	781a      	ldrb	r2, [r3, #0]
   1d116:	230c      	movs	r3, #12
   1d118:	18fb      	adds	r3, r7, r3
   1d11a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1d11c:	230c      	movs	r3, #12
   1d11e:	18fb      	adds	r3, r7, r3
   1d120:	0019      	movs	r1, r3
   1d122:	201e      	movs	r0, #30
   1d124:	4bc9      	ldr	r3, [pc, #804]	; (1d44c <_adc_set_config+0x368>)
   1d126:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1d128:	201e      	movs	r0, #30
   1d12a:	4bc9      	ldr	r3, [pc, #804]	; (1d450 <_adc_set_config+0x36c>)
   1d12c:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1d12e:	683b      	ldr	r3, [r7, #0]
   1d130:	222c      	movs	r2, #44	; 0x2c
   1d132:	5c9b      	ldrb	r3, [r3, r2]
   1d134:	2b00      	cmp	r3, #0
   1d136:	d040      	beq.n	1d1ba <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1d138:	2316      	movs	r3, #22
   1d13a:	18fb      	adds	r3, r7, r3
   1d13c:	683a      	ldr	r2, [r7, #0]
   1d13e:	212b      	movs	r1, #43	; 0x2b
   1d140:	5c52      	ldrb	r2, [r2, r1]
   1d142:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1d144:	683b      	ldr	r3, [r7, #0]
   1d146:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1d148:	2315      	movs	r3, #21
   1d14a:	18fb      	adds	r3, r7, r3
   1d14c:	2216      	movs	r2, #22
   1d14e:	18ba      	adds	r2, r7, r2
   1d150:	7812      	ldrb	r2, [r2, #0]
   1d152:	188a      	adds	r2, r1, r2
   1d154:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1d156:	683b      	ldr	r3, [r7, #0]
   1d158:	222c      	movs	r2, #44	; 0x2c
   1d15a:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1d15c:	230f      	movs	r3, #15
   1d15e:	18fb      	adds	r3, r7, r3
   1d160:	2215      	movs	r2, #21
   1d162:	18ba      	adds	r2, r7, r2
   1d164:	7812      	ldrb	r2, [r2, #0]
   1d166:	188a      	adds	r2, r1, r2
   1d168:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1d16a:	e018      	b.n	1d19e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1d16c:	2316      	movs	r3, #22
   1d16e:	18fb      	adds	r3, r7, r3
   1d170:	781b      	ldrb	r3, [r3, #0]
   1d172:	220f      	movs	r2, #15
   1d174:	4013      	ands	r3, r2
   1d176:	683a      	ldr	r2, [r7, #0]
   1d178:	7b12      	ldrb	r2, [r2, #12]
   1d17a:	189b      	adds	r3, r3, r2
   1d17c:	0018      	movs	r0, r3
   1d17e:	4bb5      	ldr	r3, [pc, #724]	; (1d454 <_adc_set_config+0x370>)
   1d180:	4798      	blx	r3
			start_pin++;
   1d182:	2315      	movs	r3, #21
   1d184:	18fb      	adds	r3, r7, r3
   1d186:	781a      	ldrb	r2, [r3, #0]
   1d188:	2315      	movs	r3, #21
   1d18a:	18fb      	adds	r3, r7, r3
   1d18c:	3201      	adds	r2, #1
   1d18e:	701a      	strb	r2, [r3, #0]
			offset++;
   1d190:	2316      	movs	r3, #22
   1d192:	18fb      	adds	r3, r7, r3
   1d194:	781a      	ldrb	r2, [r3, #0]
   1d196:	2316      	movs	r3, #22
   1d198:	18fb      	adds	r3, r7, r3
   1d19a:	3201      	adds	r2, #1
   1d19c:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1d19e:	2315      	movs	r3, #21
   1d1a0:	18fa      	adds	r2, r7, r3
   1d1a2:	230f      	movs	r3, #15
   1d1a4:	18fb      	adds	r3, r7, r3
   1d1a6:	7812      	ldrb	r2, [r2, #0]
   1d1a8:	781b      	ldrb	r3, [r3, #0]
   1d1aa:	429a      	cmp	r2, r3
   1d1ac:	d3de      	bcc.n	1d16c <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1d1ae:	683b      	ldr	r3, [r7, #0]
   1d1b0:	89db      	ldrh	r3, [r3, #14]
   1d1b2:	0018      	movs	r0, r3
   1d1b4:	4ba7      	ldr	r3, [pc, #668]	; (1d454 <_adc_set_config+0x370>)
   1d1b6:	4798      	blx	r3
   1d1b8:	e009      	b.n	1d1ce <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1d1ba:	683b      	ldr	r3, [r7, #0]
   1d1bc:	7b1b      	ldrb	r3, [r3, #12]
   1d1be:	0018      	movs	r0, r3
   1d1c0:	4ba4      	ldr	r3, [pc, #656]	; (1d454 <_adc_set_config+0x370>)
   1d1c2:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1d1c4:	683b      	ldr	r3, [r7, #0]
   1d1c6:	89db      	ldrh	r3, [r3, #14]
   1d1c8:	0018      	movs	r0, r3
   1d1ca:	4ba2      	ldr	r3, [pc, #648]	; (1d454 <_adc_set_config+0x370>)
   1d1cc:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1d1ce:	683b      	ldr	r3, [r7, #0]
   1d1d0:	7d5b      	ldrb	r3, [r3, #21]
   1d1d2:	009b      	lsls	r3, r3, #2
   1d1d4:	b2da      	uxtb	r2, r3
   1d1d6:	693b      	ldr	r3, [r7, #16]
   1d1d8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d1da:	683b      	ldr	r3, [r7, #0]
   1d1dc:	7d9b      	ldrb	r3, [r3, #22]
   1d1de:	01db      	lsls	r3, r3, #7
   1d1e0:	b25a      	sxtb	r2, r3
			(config->reference);
   1d1e2:	683b      	ldr	r3, [r7, #0]
   1d1e4:	785b      	ldrb	r3, [r3, #1]
   1d1e6:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d1e8:	4313      	orrs	r3, r2
   1d1ea:	b25b      	sxtb	r3, r3
   1d1ec:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1d1ee:	693b      	ldr	r3, [r7, #16]
   1d1f0:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1d1f2:	683b      	ldr	r3, [r7, #0]
   1d1f4:	791b      	ldrb	r3, [r3, #4]
   1d1f6:	2b34      	cmp	r3, #52	; 0x34
   1d1f8:	d846      	bhi.n	1d288 <_adc_set_config+0x1a4>
   1d1fa:	009a      	lsls	r2, r3, #2
   1d1fc:	4b96      	ldr	r3, [pc, #600]	; (1d458 <_adc_set_config+0x374>)
   1d1fe:	18d3      	adds	r3, r2, r3
   1d200:	681b      	ldr	r3, [r3, #0]
   1d202:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1d204:	231f      	movs	r3, #31
   1d206:	18fb      	adds	r3, r7, r3
   1d208:	683a      	ldr	r2, [r7, #0]
   1d20a:	7c52      	ldrb	r2, [r2, #17]
   1d20c:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1d20e:	2317      	movs	r3, #23
   1d210:	18fb      	adds	r3, r7, r3
   1d212:	683a      	ldr	r2, [r7, #0]
   1d214:	7c12      	ldrb	r2, [r2, #16]
   1d216:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d218:	2310      	movs	r3, #16
   1d21a:	61bb      	str	r3, [r7, #24]
		break;
   1d21c:	e036      	b.n	1d28c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d21e:	231f      	movs	r3, #31
   1d220:	18fb      	adds	r3, r7, r3
   1d222:	2201      	movs	r2, #1
   1d224:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1d226:	2317      	movs	r3, #23
   1d228:	18fb      	adds	r3, r7, r3
   1d22a:	2202      	movs	r2, #2
   1d22c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d22e:	2310      	movs	r3, #16
   1d230:	61bb      	str	r3, [r7, #24]
		break;
   1d232:	e02b      	b.n	1d28c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1d234:	231f      	movs	r3, #31
   1d236:	18fb      	adds	r3, r7, r3
   1d238:	2202      	movs	r2, #2
   1d23a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1d23c:	2317      	movs	r3, #23
   1d23e:	18fb      	adds	r3, r7, r3
   1d240:	2204      	movs	r2, #4
   1d242:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d244:	2310      	movs	r3, #16
   1d246:	61bb      	str	r3, [r7, #24]
		break;
   1d248:	e020      	b.n	1d28c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d24a:	231f      	movs	r3, #31
   1d24c:	18fb      	adds	r3, r7, r3
   1d24e:	2201      	movs	r2, #1
   1d250:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1d252:	2317      	movs	r3, #23
   1d254:	18fb      	adds	r3, r7, r3
   1d256:	2206      	movs	r2, #6
   1d258:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d25a:	2310      	movs	r3, #16
   1d25c:	61bb      	str	r3, [r7, #24]
		break;
   1d25e:	e015      	b.n	1d28c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1d260:	231f      	movs	r3, #31
   1d262:	18fb      	adds	r3, r7, r3
   1d264:	2200      	movs	r2, #0
   1d266:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1d268:	2317      	movs	r3, #23
   1d26a:	18fb      	adds	r3, r7, r3
   1d26c:	2208      	movs	r2, #8
   1d26e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d270:	2310      	movs	r3, #16
   1d272:	61bb      	str	r3, [r7, #24]
		break;
   1d274:	e00a      	b.n	1d28c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1d276:	2330      	movs	r3, #48	; 0x30
   1d278:	61bb      	str	r3, [r7, #24]
		break;
   1d27a:	e007      	b.n	1d28c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1d27c:	2320      	movs	r3, #32
   1d27e:	61bb      	str	r3, [r7, #24]
		break;
   1d280:	e004      	b.n	1d28c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1d282:	2300      	movs	r3, #0
   1d284:	61bb      	str	r3, [r7, #24]
		break;
   1d286:	e001      	b.n	1d28c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1d288:	2317      	movs	r3, #23
   1d28a:	e1ae      	b.n	1d5ea <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1d28c:	231f      	movs	r3, #31
   1d28e:	18fb      	adds	r3, r7, r3
   1d290:	781b      	ldrb	r3, [r3, #0]
   1d292:	011b      	lsls	r3, r3, #4
   1d294:	b2db      	uxtb	r3, r3
   1d296:	2270      	movs	r2, #112	; 0x70
   1d298:	4013      	ands	r3, r2
   1d29a:	b2da      	uxtb	r2, r3
   1d29c:	2317      	movs	r3, #23
   1d29e:	18fb      	adds	r3, r7, r3
   1d2a0:	781b      	ldrb	r3, [r3, #0]
   1d2a2:	4313      	orrs	r3, r2
   1d2a4:	b2da      	uxtb	r2, r3
   1d2a6:	693b      	ldr	r3, [r7, #16]
   1d2a8:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1d2aa:	683b      	ldr	r3, [r7, #0]
   1d2ac:	7ddb      	ldrb	r3, [r3, #23]
   1d2ae:	2b3f      	cmp	r3, #63	; 0x3f
   1d2b0:	d901      	bls.n	1d2b6 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1d2b2:	2317      	movs	r3, #23
   1d2b4:	e199      	b.n	1d5ea <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1d2b6:	683b      	ldr	r3, [r7, #0]
   1d2b8:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1d2ba:	693b      	ldr	r3, [r7, #16]
   1d2bc:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1d2be:	46c0      	nop			; (mov r8, r8)
   1d2c0:	687b      	ldr	r3, [r7, #4]
   1d2c2:	0018      	movs	r0, r3
   1d2c4:	4b65      	ldr	r3, [pc, #404]	; (1d45c <_adc_set_config+0x378>)
   1d2c6:	4798      	blx	r3
   1d2c8:	1e03      	subs	r3, r0, #0
   1d2ca:	d1f9      	bne.n	1d2c0 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1d2cc:	683b      	ldr	r3, [r7, #0]
   1d2ce:	885a      	ldrh	r2, [r3, #2]
   1d2d0:	69bb      	ldr	r3, [r7, #24]
   1d2d2:	b29b      	uxth	r3, r3
   1d2d4:	4313      	orrs	r3, r2
   1d2d6:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d2d8:	683b      	ldr	r3, [r7, #0]
   1d2da:	2124      	movs	r1, #36	; 0x24
   1d2dc:	5c5b      	ldrb	r3, [r3, r1]
   1d2de:	b29b      	uxth	r3, r3
   1d2e0:	00db      	lsls	r3, r3, #3
   1d2e2:	b29b      	uxth	r3, r3
			resolution |
   1d2e4:	4313      	orrs	r3, r2
   1d2e6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d2e8:	683b      	ldr	r3, [r7, #0]
   1d2ea:	7d1b      	ldrb	r3, [r3, #20]
   1d2ec:	b29b      	uxth	r3, r3
   1d2ee:	009b      	lsls	r3, r3, #2
   1d2f0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d2f2:	4313      	orrs	r3, r2
   1d2f4:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d2f6:	683b      	ldr	r3, [r7, #0]
   1d2f8:	7c9b      	ldrb	r3, [r3, #18]
   1d2fa:	b29b      	uxth	r3, r3
   1d2fc:	18db      	adds	r3, r3, r3
   1d2fe:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d300:	4313      	orrs	r3, r2
   1d302:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1d304:	683b      	ldr	r3, [r7, #0]
   1d306:	7cdb      	ldrb	r3, [r3, #19]
   1d308:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d30a:	4313      	orrs	r3, r2
   1d30c:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1d30e:	693b      	ldr	r3, [r7, #16]
   1d310:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1d312:	683b      	ldr	r3, [r7, #0]
   1d314:	7e1b      	ldrb	r3, [r3, #24]
   1d316:	2b00      	cmp	r3, #0
   1d318:	d100      	bne.n	1d31c <_adc_set_config+0x238>
   1d31a:	e0c4      	b.n	1d4a6 <_adc_set_config+0x3c2>
		switch (resolution) {
   1d31c:	69bb      	ldr	r3, [r7, #24]
   1d31e:	2b10      	cmp	r3, #16
   1d320:	d100      	bne.n	1d324 <_adc_set_config+0x240>
   1d322:	e076      	b.n	1d412 <_adc_set_config+0x32e>
   1d324:	d802      	bhi.n	1d32c <_adc_set_config+0x248>
   1d326:	2b00      	cmp	r3, #0
   1d328:	d04d      	beq.n	1d3c6 <_adc_set_config+0x2e2>
   1d32a:	e0bc      	b.n	1d4a6 <_adc_set_config+0x3c2>
   1d32c:	2b20      	cmp	r3, #32
   1d32e:	d023      	beq.n	1d378 <_adc_set_config+0x294>
   1d330:	2b30      	cmp	r3, #48	; 0x30
   1d332:	d000      	beq.n	1d336 <_adc_set_config+0x252>
   1d334:	e0b7      	b.n	1d4a6 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1d336:	683b      	ldr	r3, [r7, #0]
   1d338:	7cdb      	ldrb	r3, [r3, #19]
   1d33a:	2b00      	cmp	r3, #0
   1d33c:	d011      	beq.n	1d362 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1d33e:	683b      	ldr	r3, [r7, #0]
   1d340:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d342:	2b7f      	cmp	r3, #127	; 0x7f
   1d344:	dc0b      	bgt.n	1d35e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1d346:	683b      	ldr	r3, [r7, #0]
   1d348:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1d34a:	3380      	adds	r3, #128	; 0x80
   1d34c:	db07      	blt.n	1d35e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1d34e:	683b      	ldr	r3, [r7, #0]
   1d350:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1d352:	2b7f      	cmp	r3, #127	; 0x7f
   1d354:	dc03      	bgt.n	1d35e <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1d356:	683b      	ldr	r3, [r7, #0]
   1d358:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1d35a:	3380      	adds	r3, #128	; 0x80
   1d35c:	da01      	bge.n	1d362 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d35e:	2317      	movs	r3, #23
   1d360:	e143      	b.n	1d5ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1d362:	683b      	ldr	r3, [r7, #0]
   1d364:	69db      	ldr	r3, [r3, #28]
   1d366:	2bff      	cmp	r3, #255	; 0xff
   1d368:	dc04      	bgt.n	1d374 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1d36a:	683b      	ldr	r3, [r7, #0]
   1d36c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1d36e:	2bff      	cmp	r3, #255	; 0xff
   1d370:	dc00      	bgt.n	1d374 <_adc_set_config+0x290>
   1d372:	e091      	b.n	1d498 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d374:	2317      	movs	r3, #23
   1d376:	e138      	b.n	1d5ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1d378:	683b      	ldr	r3, [r7, #0]
   1d37a:	7cdb      	ldrb	r3, [r3, #19]
   1d37c:	2b00      	cmp	r3, #0
   1d37e:	d015      	beq.n	1d3ac <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1d380:	683b      	ldr	r3, [r7, #0]
   1d382:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d384:	4a36      	ldr	r2, [pc, #216]	; (1d460 <_adc_set_config+0x37c>)
   1d386:	4293      	cmp	r3, r2
   1d388:	dc0e      	bgt.n	1d3a8 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1d38a:	683b      	ldr	r3, [r7, #0]
   1d38c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1d38e:	4a35      	ldr	r2, [pc, #212]	; (1d464 <_adc_set_config+0x380>)
   1d390:	4293      	cmp	r3, r2
   1d392:	db09      	blt.n	1d3a8 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1d394:	683b      	ldr	r3, [r7, #0]
   1d396:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1d398:	4a31      	ldr	r2, [pc, #196]	; (1d460 <_adc_set_config+0x37c>)
   1d39a:	4293      	cmp	r3, r2
   1d39c:	dc04      	bgt.n	1d3a8 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1d39e:	683b      	ldr	r3, [r7, #0]
   1d3a0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1d3a2:	4a30      	ldr	r2, [pc, #192]	; (1d464 <_adc_set_config+0x380>)
   1d3a4:	4293      	cmp	r3, r2
   1d3a6:	da01      	bge.n	1d3ac <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d3a8:	2317      	movs	r3, #23
   1d3aa:	e11e      	b.n	1d5ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1d3ac:	683b      	ldr	r3, [r7, #0]
   1d3ae:	69db      	ldr	r3, [r3, #28]
   1d3b0:	4a2d      	ldr	r2, [pc, #180]	; (1d468 <_adc_set_config+0x384>)
   1d3b2:	4293      	cmp	r3, r2
   1d3b4:	dc05      	bgt.n	1d3c2 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1d3b6:	683b      	ldr	r3, [r7, #0]
   1d3b8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1d3ba:	4a2b      	ldr	r2, [pc, #172]	; (1d468 <_adc_set_config+0x384>)
   1d3bc:	4293      	cmp	r3, r2
   1d3be:	dc00      	bgt.n	1d3c2 <_adc_set_config+0x2de>
   1d3c0:	e06c      	b.n	1d49c <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d3c2:	2317      	movs	r3, #23
   1d3c4:	e111      	b.n	1d5ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1d3c6:	683b      	ldr	r3, [r7, #0]
   1d3c8:	7cdb      	ldrb	r3, [r3, #19]
   1d3ca:	2b00      	cmp	r3, #0
   1d3cc:	d015      	beq.n	1d3fa <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1d3ce:	683b      	ldr	r3, [r7, #0]
   1d3d0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d3d2:	4a26      	ldr	r2, [pc, #152]	; (1d46c <_adc_set_config+0x388>)
   1d3d4:	4293      	cmp	r3, r2
   1d3d6:	dc0e      	bgt.n	1d3f6 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1d3d8:	683b      	ldr	r3, [r7, #0]
   1d3da:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1d3dc:	4a24      	ldr	r2, [pc, #144]	; (1d470 <_adc_set_config+0x38c>)
   1d3de:	4293      	cmp	r3, r2
   1d3e0:	db09      	blt.n	1d3f6 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1d3e2:	683b      	ldr	r3, [r7, #0]
   1d3e4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1d3e6:	4a21      	ldr	r2, [pc, #132]	; (1d46c <_adc_set_config+0x388>)
   1d3e8:	4293      	cmp	r3, r2
   1d3ea:	dc04      	bgt.n	1d3f6 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1d3ec:	683b      	ldr	r3, [r7, #0]
   1d3ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1d3f0:	4a1f      	ldr	r2, [pc, #124]	; (1d470 <_adc_set_config+0x38c>)
   1d3f2:	4293      	cmp	r3, r2
   1d3f4:	da01      	bge.n	1d3fa <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d3f6:	2317      	movs	r3, #23
   1d3f8:	e0f7      	b.n	1d5ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1d3fa:	683b      	ldr	r3, [r7, #0]
   1d3fc:	69db      	ldr	r3, [r3, #28]
   1d3fe:	4a1d      	ldr	r2, [pc, #116]	; (1d474 <_adc_set_config+0x390>)
   1d400:	4293      	cmp	r3, r2
   1d402:	dc04      	bgt.n	1d40e <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1d404:	683b      	ldr	r3, [r7, #0]
   1d406:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1d408:	4a1a      	ldr	r2, [pc, #104]	; (1d474 <_adc_set_config+0x390>)
   1d40a:	4293      	cmp	r3, r2
   1d40c:	dd48      	ble.n	1d4a0 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d40e:	2317      	movs	r3, #23
   1d410:	e0eb      	b.n	1d5ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1d412:	683b      	ldr	r3, [r7, #0]
   1d414:	7cdb      	ldrb	r3, [r3, #19]
   1d416:	2b00      	cmp	r3, #0
   1d418:	d032      	beq.n	1d480 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1d41a:	683b      	ldr	r3, [r7, #0]
   1d41c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d41e:	4a16      	ldr	r2, [pc, #88]	; (1d478 <_adc_set_config+0x394>)
   1d420:	4293      	cmp	r3, r2
   1d422:	dc0e      	bgt.n	1d442 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1d424:	683b      	ldr	r3, [r7, #0]
   1d426:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1d428:	4a14      	ldr	r2, [pc, #80]	; (1d47c <_adc_set_config+0x398>)
   1d42a:	4293      	cmp	r3, r2
   1d42c:	db09      	blt.n	1d442 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1d42e:	683b      	ldr	r3, [r7, #0]
   1d430:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1d432:	4a11      	ldr	r2, [pc, #68]	; (1d478 <_adc_set_config+0x394>)
   1d434:	4293      	cmp	r3, r2
   1d436:	dc04      	bgt.n	1d442 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1d438:	683b      	ldr	r3, [r7, #0]
   1d43a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1d43c:	4a0f      	ldr	r2, [pc, #60]	; (1d47c <_adc_set_config+0x398>)
   1d43e:	4293      	cmp	r3, r2
   1d440:	da1e      	bge.n	1d480 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d442:	2317      	movs	r3, #23
   1d444:	e0d1      	b.n	1d5ea <_adc_set_config+0x506>
   1d446:	46c0      	nop			; (mov r8, r8)
   1d448:	0001cebd 	.word	0x0001cebd
   1d44c:	000249b5 	.word	0x000249b5
   1d450:	000249f9 	.word	0x000249f9
   1d454:	0001d06d 	.word	0x0001d06d
   1d458:	0002a99c 	.word	0x0002a99c
   1d45c:	0001cf99 	.word	0x0001cf99
   1d460:	000001ff 	.word	0x000001ff
   1d464:	fffffe00 	.word	0xfffffe00
   1d468:	000003ff 	.word	0x000003ff
   1d46c:	000007ff 	.word	0x000007ff
   1d470:	fffff800 	.word	0xfffff800
   1d474:	00000fff 	.word	0x00000fff
   1d478:	00007fff 	.word	0x00007fff
   1d47c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1d480:	683b      	ldr	r3, [r7, #0]
   1d482:	69db      	ldr	r3, [r3, #28]
   1d484:	4a5b      	ldr	r2, [pc, #364]	; (1d5f4 <_adc_set_config+0x510>)
   1d486:	4293      	cmp	r3, r2
   1d488:	dc04      	bgt.n	1d494 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1d48a:	683b      	ldr	r3, [r7, #0]
   1d48c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1d48e:	4a59      	ldr	r2, [pc, #356]	; (1d5f4 <_adc_set_config+0x510>)
   1d490:	4293      	cmp	r3, r2
   1d492:	dd07      	ble.n	1d4a4 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d494:	2317      	movs	r3, #23
   1d496:	e0a8      	b.n	1d5ea <_adc_set_config+0x506>
			break;
   1d498:	46c0      	nop			; (mov r8, r8)
   1d49a:	e004      	b.n	1d4a6 <_adc_set_config+0x3c2>
			break;
   1d49c:	46c0      	nop			; (mov r8, r8)
   1d49e:	e002      	b.n	1d4a6 <_adc_set_config+0x3c2>
			break;
   1d4a0:	46c0      	nop			; (mov r8, r8)
   1d4a2:	e000      	b.n	1d4a6 <_adc_set_config+0x3c2>
			}
			break;
   1d4a4:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1d4a6:	46c0      	nop			; (mov r8, r8)
   1d4a8:	687b      	ldr	r3, [r7, #4]
   1d4aa:	0018      	movs	r0, r3
   1d4ac:	4b52      	ldr	r3, [pc, #328]	; (1d5f8 <_adc_set_config+0x514>)
   1d4ae:	4798      	blx	r3
   1d4b0:	1e03      	subs	r3, r0, #0
   1d4b2:	d1f9      	bne.n	1d4a8 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1d4b4:	683b      	ldr	r3, [r7, #0]
   1d4b6:	7e1a      	ldrb	r2, [r3, #24]
   1d4b8:	693b      	ldr	r3, [r7, #16]
   1d4ba:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1d4bc:	46c0      	nop			; (mov r8, r8)
   1d4be:	687b      	ldr	r3, [r7, #4]
   1d4c0:	0018      	movs	r0, r3
   1d4c2:	4b4d      	ldr	r3, [pc, #308]	; (1d5f8 <_adc_set_config+0x514>)
   1d4c4:	4798      	blx	r3
   1d4c6:	1e03      	subs	r3, r0, #0
   1d4c8:	d1f9      	bne.n	1d4be <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1d4ca:	683b      	ldr	r3, [r7, #0]
   1d4cc:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1d4ce:	b29a      	uxth	r2, r3
   1d4d0:	693b      	ldr	r3, [r7, #16]
   1d4d2:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1d4d4:	46c0      	nop			; (mov r8, r8)
   1d4d6:	687b      	ldr	r3, [r7, #4]
   1d4d8:	0018      	movs	r0, r3
   1d4da:	4b47      	ldr	r3, [pc, #284]	; (1d5f8 <_adc_set_config+0x514>)
   1d4dc:	4798      	blx	r3
   1d4de:	1e03      	subs	r3, r0, #0
   1d4e0:	d1f9      	bne.n	1d4d6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1d4e2:	683b      	ldr	r3, [r7, #0]
   1d4e4:	6a1b      	ldr	r3, [r3, #32]
   1d4e6:	b29a      	uxth	r2, r3
   1d4e8:	693b      	ldr	r3, [r7, #16]
   1d4ea:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1d4ec:	2314      	movs	r3, #20
   1d4ee:	18fb      	adds	r3, r7, r3
   1d4f0:	683a      	ldr	r2, [r7, #0]
   1d4f2:	212c      	movs	r1, #44	; 0x2c
   1d4f4:	5c52      	ldrb	r2, [r2, r1]
   1d4f6:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1d4f8:	2314      	movs	r3, #20
   1d4fa:	18fb      	adds	r3, r7, r3
   1d4fc:	781b      	ldrb	r3, [r3, #0]
   1d4fe:	2b00      	cmp	r3, #0
   1d500:	d006      	beq.n	1d510 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1d502:	2314      	movs	r3, #20
   1d504:	18fb      	adds	r3, r7, r3
   1d506:	781a      	ldrb	r2, [r3, #0]
   1d508:	2314      	movs	r3, #20
   1d50a:	18fb      	adds	r3, r7, r3
   1d50c:	3a01      	subs	r2, #1
   1d50e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d510:	2314      	movs	r3, #20
   1d512:	18fb      	adds	r3, r7, r3
   1d514:	781b      	ldrb	r3, [r3, #0]
   1d516:	2b0f      	cmp	r3, #15
   1d518:	d804      	bhi.n	1d524 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1d51a:	683b      	ldr	r3, [r7, #0]
   1d51c:	222b      	movs	r2, #43	; 0x2b
   1d51e:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d520:	2b0f      	cmp	r3, #15
   1d522:	d901      	bls.n	1d528 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1d524:	2317      	movs	r3, #23
   1d526:	e060      	b.n	1d5ea <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1d528:	46c0      	nop			; (mov r8, r8)
   1d52a:	687b      	ldr	r3, [r7, #4]
   1d52c:	0018      	movs	r0, r3
   1d52e:	4b32      	ldr	r3, [pc, #200]	; (1d5f8 <_adc_set_config+0x514>)
   1d530:	4798      	blx	r3
   1d532:	1e03      	subs	r3, r0, #0
   1d534:	d1f9      	bne.n	1d52a <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1d536:	683b      	ldr	r3, [r7, #0]
   1d538:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1d53a:	683a      	ldr	r2, [r7, #0]
   1d53c:	212b      	movs	r1, #43	; 0x2b
   1d53e:	5c52      	ldrb	r2, [r2, r1]
   1d540:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1d542:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d544:	2214      	movs	r2, #20
   1d546:	18ba      	adds	r2, r7, r2
   1d548:	7812      	ldrb	r2, [r2, #0]
   1d54a:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1d54c:	4313      	orrs	r3, r2
			config->negative_input |
   1d54e:	683a      	ldr	r2, [r7, #0]
   1d550:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d552:	4313      	orrs	r3, r2
			config->positive_input;
   1d554:	683a      	ldr	r2, [r7, #0]
   1d556:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1d558:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1d55a:	693b      	ldr	r3, [r7, #16]
   1d55c:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1d55e:	683b      	ldr	r3, [r7, #0]
   1d560:	222a      	movs	r2, #42	; 0x2a
   1d562:	5c9a      	ldrb	r2, [r3, r2]
   1d564:	693b      	ldr	r3, [r7, #16]
   1d566:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1d568:	693b      	ldr	r3, [r7, #16]
   1d56a:	220f      	movs	r2, #15
   1d56c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1d56e:	683b      	ldr	r3, [r7, #0]
   1d570:	2224      	movs	r2, #36	; 0x24
   1d572:	5c9b      	ldrb	r3, [r3, r2]
   1d574:	2b00      	cmp	r3, #0
   1d576:	d01e      	beq.n	1d5b6 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1d578:	683b      	ldr	r3, [r7, #0]
   1d57a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d57c:	4a1f      	ldr	r2, [pc, #124]	; (1d5fc <_adc_set_config+0x518>)
   1d57e:	4293      	cmp	r3, r2
   1d580:	d901      	bls.n	1d586 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1d582:	2317      	movs	r3, #23
   1d584:	e031      	b.n	1d5ea <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1d586:	683b      	ldr	r3, [r7, #0]
   1d588:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1d58a:	693b      	ldr	r3, [r7, #16]
   1d58c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1d58e:	683b      	ldr	r3, [r7, #0]
   1d590:	2228      	movs	r2, #40	; 0x28
   1d592:	5e9b      	ldrsh	r3, [r3, r2]
   1d594:	4a1a      	ldr	r2, [pc, #104]	; (1d600 <_adc_set_config+0x51c>)
   1d596:	4293      	cmp	r3, r2
   1d598:	dc05      	bgt.n	1d5a6 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1d59a:	683b      	ldr	r3, [r7, #0]
   1d59c:	2228      	movs	r2, #40	; 0x28
   1d59e:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1d5a0:	4a18      	ldr	r2, [pc, #96]	; (1d604 <_adc_set_config+0x520>)
   1d5a2:	4293      	cmp	r3, r2
   1d5a4:	da01      	bge.n	1d5aa <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1d5a6:	2317      	movs	r3, #23
   1d5a8:	e01f      	b.n	1d5ea <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1d5aa:	683b      	ldr	r3, [r7, #0]
   1d5ac:	2228      	movs	r2, #40	; 0x28
   1d5ae:	5e9b      	ldrsh	r3, [r3, r2]
   1d5b0:	b29a      	uxth	r2, r3
   1d5b2:	693b      	ldr	r3, [r7, #16]
   1d5b4:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1d5b6:	4b14      	ldr	r3, [pc, #80]	; (1d608 <_adc_set_config+0x524>)
   1d5b8:	681b      	ldr	r3, [r3, #0]
   1d5ba:	08db      	lsrs	r3, r3, #3
   1d5bc:	b29b      	uxth	r3, r3
   1d5be:	021b      	lsls	r3, r3, #8
   1d5c0:	b29a      	uxth	r2, r3
   1d5c2:	23e0      	movs	r3, #224	; 0xe0
   1d5c4:	00db      	lsls	r3, r3, #3
   1d5c6:	4013      	ands	r3, r2
   1d5c8:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1d5ca:	4b10      	ldr	r3, [pc, #64]	; (1d60c <_adc_set_config+0x528>)
   1d5cc:	685c      	ldr	r4, [r3, #4]
   1d5ce:	681b      	ldr	r3, [r3, #0]
   1d5d0:	0161      	lsls	r1, r4, #5
   1d5d2:	0edd      	lsrs	r5, r3, #27
   1d5d4:	430d      	orrs	r5, r1
   1d5d6:	0ee6      	lsrs	r6, r4, #27
   1d5d8:	b2ab      	uxth	r3, r5
   1d5da:	21ff      	movs	r1, #255	; 0xff
   1d5dc:	400b      	ands	r3, r1
   1d5de:	b29b      	uxth	r3, r3
			) |
   1d5e0:	4313      	orrs	r3, r2
   1d5e2:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1d5e4:	693b      	ldr	r3, [r7, #16]
   1d5e6:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1d5e8:	2300      	movs	r3, #0
}
   1d5ea:	0018      	movs	r0, r3
   1d5ec:	46bd      	mov	sp, r7
   1d5ee:	b009      	add	sp, #36	; 0x24
   1d5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5f2:	46c0      	nop			; (mov r8, r8)
   1d5f4:	0000ffff 	.word	0x0000ffff
   1d5f8:	0001cf99 	.word	0x0001cf99
   1d5fc:	00000fff 	.word	0x00000fff
   1d600:	000007ff 	.word	0x000007ff
   1d604:	fffff800 	.word	0xfffff800
   1d608:	00806024 	.word	0x00806024
   1d60c:	00806020 	.word	0x00806020

0001d610 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1d610:	b580      	push	{r7, lr}
   1d612:	b086      	sub	sp, #24
   1d614:	af00      	add	r7, sp, #0
   1d616:	60f8      	str	r0, [r7, #12]
   1d618:	60b9      	str	r1, [r7, #8]
   1d61a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1d61c:	68fb      	ldr	r3, [r7, #12]
   1d61e:	68ba      	ldr	r2, [r7, #8]
   1d620:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1d622:	2380      	movs	r3, #128	; 0x80
   1d624:	025b      	lsls	r3, r3, #9
   1d626:	0019      	movs	r1, r3
   1d628:	2002      	movs	r0, #2
   1d62a:	4b32      	ldr	r3, [pc, #200]	; (1d6f4 <adc_init+0xe4>)
   1d62c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1d62e:	68bb      	ldr	r3, [r7, #8]
   1d630:	781b      	ldrb	r3, [r3, #0]
   1d632:	b2db      	uxtb	r3, r3
   1d634:	001a      	movs	r2, r3
   1d636:	2301      	movs	r3, #1
   1d638:	4013      	ands	r3, r2
   1d63a:	d001      	beq.n	1d640 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1d63c:	2305      	movs	r3, #5
   1d63e:	e055      	b.n	1d6ec <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1d640:	68bb      	ldr	r3, [r7, #8]
   1d642:	781b      	ldrb	r3, [r3, #0]
   1d644:	b2db      	uxtb	r3, r3
   1d646:	001a      	movs	r2, r3
   1d648:	2302      	movs	r3, #2
   1d64a:	4013      	ands	r3, r2
   1d64c:	d001      	beq.n	1d652 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1d64e:	231c      	movs	r3, #28
   1d650:	e04c      	b.n	1d6ec <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1d652:	687b      	ldr	r3, [r7, #4]
   1d654:	785a      	ldrb	r2, [r3, #1]
   1d656:	68fb      	ldr	r3, [r7, #12]
   1d658:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1d65a:	68fb      	ldr	r3, [r7, #12]
   1d65c:	791b      	ldrb	r3, [r3, #4]
   1d65e:	2b00      	cmp	r3, #0
   1d660:	d102      	bne.n	1d668 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1d662:	2001      	movs	r0, #1
   1d664:	4b24      	ldr	r3, [pc, #144]	; (1d6f8 <adc_init+0xe8>)
   1d666:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d668:	2317      	movs	r3, #23
   1d66a:	18fb      	adds	r3, r7, r3
   1d66c:	2200      	movs	r2, #0
   1d66e:	701a      	strb	r2, [r3, #0]
   1d670:	e00e      	b.n	1d690 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1d672:	2317      	movs	r3, #23
   1d674:	18fb      	adds	r3, r7, r3
   1d676:	781a      	ldrb	r2, [r3, #0]
   1d678:	68fb      	ldr	r3, [r7, #12]
   1d67a:	3202      	adds	r2, #2
   1d67c:	0092      	lsls	r2, r2, #2
   1d67e:	2100      	movs	r1, #0
   1d680:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d682:	2317      	movs	r3, #23
   1d684:	18fb      	adds	r3, r7, r3
   1d686:	781a      	ldrb	r2, [r3, #0]
   1d688:	2317      	movs	r3, #23
   1d68a:	18fb      	adds	r3, r7, r3
   1d68c:	3201      	adds	r2, #1
   1d68e:	701a      	strb	r2, [r3, #0]
   1d690:	2317      	movs	r3, #23
   1d692:	18fb      	adds	r3, r7, r3
   1d694:	781b      	ldrb	r3, [r3, #0]
   1d696:	2b02      	cmp	r3, #2
   1d698:	d9eb      	bls.n	1d672 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1d69a:	68fb      	ldr	r3, [r7, #12]
   1d69c:	2200      	movs	r2, #0
   1d69e:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1d6a0:	68fb      	ldr	r3, [r7, #12]
   1d6a2:	2200      	movs	r2, #0
   1d6a4:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1d6a6:	68fb      	ldr	r3, [r7, #12]
   1d6a8:	2200      	movs	r2, #0
   1d6aa:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1d6ac:	68fb      	ldr	r3, [r7, #12]
   1d6ae:	2200      	movs	r2, #0
   1d6b0:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1d6b2:	4b12      	ldr	r3, [pc, #72]	; (1d6fc <adc_init+0xec>)
   1d6b4:	68fa      	ldr	r2, [r7, #12]
   1d6b6:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d6b8:	687b      	ldr	r3, [r7, #4]
   1d6ba:	222a      	movs	r2, #42	; 0x2a
   1d6bc:	5c9b      	ldrb	r3, [r3, r2]
   1d6be:	2b00      	cmp	r3, #0
   1d6c0:	d10a      	bne.n	1d6d8 <adc_init+0xc8>
			!config->freerunning) {
   1d6c2:	687b      	ldr	r3, [r7, #4]
   1d6c4:	7d1b      	ldrb	r3, [r3, #20]
   1d6c6:	2201      	movs	r2, #1
   1d6c8:	4053      	eors	r3, r2
   1d6ca:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d6cc:	2b00      	cmp	r3, #0
   1d6ce:	d003      	beq.n	1d6d8 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1d6d0:	68fb      	ldr	r3, [r7, #12]
   1d6d2:	2201      	movs	r2, #1
   1d6d4:	775a      	strb	r2, [r3, #29]
   1d6d6:	e002      	b.n	1d6de <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1d6d8:	68fb      	ldr	r3, [r7, #12]
   1d6da:	2200      	movs	r2, #0
   1d6dc:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1d6de:	687a      	ldr	r2, [r7, #4]
   1d6e0:	68fb      	ldr	r3, [r7, #12]
   1d6e2:	0011      	movs	r1, r2
   1d6e4:	0018      	movs	r0, r3
   1d6e6:	4b06      	ldr	r3, [pc, #24]	; (1d700 <adc_init+0xf0>)
   1d6e8:	4798      	blx	r3
   1d6ea:	0003      	movs	r3, r0
}
   1d6ec:	0018      	movs	r0, r3
   1d6ee:	46bd      	mov	sp, r7
   1d6f0:	b006      	add	sp, #24
   1d6f2:	bd80      	pop	{r7, pc}
   1d6f4:	0001ced5 	.word	0x0001ced5
   1d6f8:	0001cf59 	.word	0x0001cf59
   1d6fc:	200008a4 	.word	0x200008a4
   1d700:	0001d0e5 	.word	0x0001d0e5

0001d704 <adc_is_syncing>:
{
   1d704:	b580      	push	{r7, lr}
   1d706:	b084      	sub	sp, #16
   1d708:	af00      	add	r7, sp, #0
   1d70a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d70c:	687b      	ldr	r3, [r7, #4]
   1d70e:	681b      	ldr	r3, [r3, #0]
   1d710:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d712:	68fb      	ldr	r3, [r7, #12]
   1d714:	7e5b      	ldrb	r3, [r3, #25]
   1d716:	b2db      	uxtb	r3, r3
   1d718:	b25b      	sxtb	r3, r3
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	da01      	bge.n	1d722 <adc_is_syncing+0x1e>
		return true;
   1d71e:	2301      	movs	r3, #1
   1d720:	e000      	b.n	1d724 <adc_is_syncing+0x20>
	return false;
   1d722:	2300      	movs	r3, #0
}
   1d724:	0018      	movs	r0, r3
   1d726:	46bd      	mov	sp, r7
   1d728:	b004      	add	sp, #16
   1d72a:	bd80      	pop	{r7, pc}

0001d72c <adc_start_conversion>:
{
   1d72c:	b580      	push	{r7, lr}
   1d72e:	b084      	sub	sp, #16
   1d730:	af00      	add	r7, sp, #0
   1d732:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d734:	687b      	ldr	r3, [r7, #4]
   1d736:	681b      	ldr	r3, [r3, #0]
   1d738:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1d73a:	46c0      	nop			; (mov r8, r8)
   1d73c:	687b      	ldr	r3, [r7, #4]
   1d73e:	0018      	movs	r0, r3
   1d740:	4b0b      	ldr	r3, [pc, #44]	; (1d770 <adc_start_conversion+0x44>)
   1d742:	4798      	blx	r3
   1d744:	1e03      	subs	r3, r0, #0
   1d746:	d1f9      	bne.n	1d73c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1d748:	68fb      	ldr	r3, [r7, #12]
   1d74a:	7b1b      	ldrb	r3, [r3, #12]
   1d74c:	b2db      	uxtb	r3, r3
   1d74e:	2202      	movs	r2, #2
   1d750:	4313      	orrs	r3, r2
   1d752:	b2da      	uxtb	r2, r3
   1d754:	68fb      	ldr	r3, [r7, #12]
   1d756:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1d758:	46c0      	nop			; (mov r8, r8)
   1d75a:	687b      	ldr	r3, [r7, #4]
   1d75c:	0018      	movs	r0, r3
   1d75e:	4b04      	ldr	r3, [pc, #16]	; (1d770 <adc_start_conversion+0x44>)
   1d760:	4798      	blx	r3
   1d762:	1e03      	subs	r3, r0, #0
   1d764:	d1f9      	bne.n	1d75a <adc_start_conversion+0x2e>
}
   1d766:	46c0      	nop			; (mov r8, r8)
   1d768:	46bd      	mov	sp, r7
   1d76a:	b004      	add	sp, #16
   1d76c:	bd80      	pop	{r7, pc}
   1d76e:	46c0      	nop			; (mov r8, r8)
   1d770:	0001d705 	.word	0x0001d705

0001d774 <adc_enable_interrupt>:
{
   1d774:	b580      	push	{r7, lr}
   1d776:	b084      	sub	sp, #16
   1d778:	af00      	add	r7, sp, #0
   1d77a:	6078      	str	r0, [r7, #4]
   1d77c:	000a      	movs	r2, r1
   1d77e:	1cfb      	adds	r3, r7, #3
   1d780:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1d782:	687b      	ldr	r3, [r7, #4]
   1d784:	681b      	ldr	r3, [r3, #0]
   1d786:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1d788:	68fb      	ldr	r3, [r7, #12]
   1d78a:	1cfa      	adds	r2, r7, #3
   1d78c:	7812      	ldrb	r2, [r2, #0]
   1d78e:	75da      	strb	r2, [r3, #23]
}
   1d790:	46c0      	nop			; (mov r8, r8)
   1d792:	46bd      	mov	sp, r7
   1d794:	b004      	add	sp, #16
   1d796:	bd80      	pop	{r7, pc}

0001d798 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1d798:	b580      	push	{r7, lr}
   1d79a:	b084      	sub	sp, #16
   1d79c:	af00      	add	r7, sp, #0
   1d79e:	6078      	str	r0, [r7, #4]
   1d7a0:	000a      	movs	r2, r1
   1d7a2:	1cfb      	adds	r3, r7, #3
   1d7a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1d7a6:	687b      	ldr	r3, [r7, #4]
   1d7a8:	681b      	ldr	r3, [r3, #0]
   1d7aa:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1d7ac:	68fb      	ldr	r3, [r7, #12]
   1d7ae:	1cfa      	adds	r2, r7, #3
   1d7b0:	7812      	ldrb	r2, [r2, #0]
   1d7b2:	759a      	strb	r2, [r3, #22]
}
   1d7b4:	46c0      	nop			; (mov r8, r8)
   1d7b6:	46bd      	mov	sp, r7
   1d7b8:	b004      	add	sp, #16
   1d7ba:	bd80      	pop	{r7, pc}

0001d7bc <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1d7bc:	b580      	push	{r7, lr}
   1d7be:	b084      	sub	sp, #16
   1d7c0:	af00      	add	r7, sp, #0
   1d7c2:	0002      	movs	r2, r0
   1d7c4:	1dfb      	adds	r3, r7, #7
   1d7c6:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1d7c8:	1dfb      	adds	r3, r7, #7
   1d7ca:	781a      	ldrb	r2, [r3, #0]
   1d7cc:	4b47      	ldr	r3, [pc, #284]	; (1d8ec <_adc_interrupt_handler+0x130>)
   1d7ce:	0092      	lsls	r2, r2, #2
   1d7d0:	58d3      	ldr	r3, [r2, r3]
   1d7d2:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	681b      	ldr	r3, [r3, #0]
   1d7d8:	7e1b      	ldrb	r3, [r3, #24]
   1d7da:	b2da      	uxtb	r2, r3
   1d7dc:	68fb      	ldr	r3, [r7, #12]
   1d7de:	681b      	ldr	r3, [r3, #0]
   1d7e0:	7ddb      	ldrb	r3, [r3, #23]
   1d7e2:	b2db      	uxtb	r3, r3
   1d7e4:	4013      	ands	r3, r2
   1d7e6:	b2db      	uxtb	r3, r3
   1d7e8:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1d7ea:	68bb      	ldr	r3, [r7, #8]
   1d7ec:	2201      	movs	r2, #1
   1d7ee:	4013      	ands	r3, r2
   1d7f0:	d045      	beq.n	1d87e <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1d7f2:	68fb      	ldr	r3, [r7, #12]
   1d7f4:	681b      	ldr	r3, [r3, #0]
   1d7f6:	2201      	movs	r2, #1
   1d7f8:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1d7fa:	46c0      	nop			; (mov r8, r8)
   1d7fc:	68fb      	ldr	r3, [r7, #12]
   1d7fe:	0018      	movs	r0, r3
   1d800:	4b3b      	ldr	r3, [pc, #236]	; (1d8f0 <_adc_interrupt_handler+0x134>)
   1d802:	4798      	blx	r3
   1d804:	1e03      	subs	r3, r0, #0
   1d806:	d1f9      	bne.n	1d7fc <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1d808:	68fb      	ldr	r3, [r7, #12]
   1d80a:	695b      	ldr	r3, [r3, #20]
   1d80c:	1c99      	adds	r1, r3, #2
   1d80e:	68fa      	ldr	r2, [r7, #12]
   1d810:	6151      	str	r1, [r2, #20]
   1d812:	68fa      	ldr	r2, [r7, #12]
   1d814:	6812      	ldr	r2, [r2, #0]
   1d816:	8b52      	ldrh	r2, [r2, #26]
   1d818:	b292      	uxth	r2, r2
   1d81a:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1d81c:	68fb      	ldr	r3, [r7, #12]
   1d81e:	8b1b      	ldrh	r3, [r3, #24]
   1d820:	b29b      	uxth	r3, r3
   1d822:	3b01      	subs	r3, #1
   1d824:	b29b      	uxth	r3, r3
   1d826:	68fa      	ldr	r2, [r7, #12]
   1d828:	1c19      	adds	r1, r3, #0
   1d82a:	8311      	strh	r1, [r2, #24]
   1d82c:	2b00      	cmp	r3, #0
   1d82e:	d008      	beq.n	1d842 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1d830:	68fb      	ldr	r3, [r7, #12]
   1d832:	7f5b      	ldrb	r3, [r3, #29]
   1d834:	2b00      	cmp	r3, #0
   1d836:	d022      	beq.n	1d87e <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1d838:	68fb      	ldr	r3, [r7, #12]
   1d83a:	0018      	movs	r0, r3
   1d83c:	4b2d      	ldr	r3, [pc, #180]	; (1d8f4 <_adc_interrupt_handler+0x138>)
   1d83e:	4798      	blx	r3
   1d840:	e01d      	b.n	1d87e <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1d842:	68fb      	ldr	r3, [r7, #12]
   1d844:	2101      	movs	r1, #1
   1d846:	0018      	movs	r0, r3
   1d848:	4b2b      	ldr	r3, [pc, #172]	; (1d8f8 <_adc_interrupt_handler+0x13c>)
   1d84a:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1d84c:	68fb      	ldr	r3, [r7, #12]
   1d84e:	7f1b      	ldrb	r3, [r3, #28]
   1d850:	b2db      	uxtb	r3, r3
   1d852:	2b05      	cmp	r3, #5
   1d854:	d113      	bne.n	1d87e <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1d856:	68fb      	ldr	r3, [r7, #12]
   1d858:	2200      	movs	r2, #0
   1d85a:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1d85c:	68fb      	ldr	r3, [r7, #12]
   1d85e:	7edb      	ldrb	r3, [r3, #27]
   1d860:	001a      	movs	r2, r3
   1d862:	2301      	movs	r3, #1
   1d864:	4013      	ands	r3, r2
   1d866:	d00a      	beq.n	1d87e <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1d868:	68fb      	ldr	r3, [r7, #12]
   1d86a:	7e9b      	ldrb	r3, [r3, #26]
   1d86c:	001a      	movs	r2, r3
   1d86e:	2301      	movs	r3, #1
   1d870:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1d872:	d004      	beq.n	1d87e <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1d874:	68fb      	ldr	r3, [r7, #12]
   1d876:	689b      	ldr	r3, [r3, #8]
   1d878:	68fa      	ldr	r2, [r7, #12]
   1d87a:	0010      	movs	r0, r2
   1d87c:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1d87e:	68bb      	ldr	r3, [r7, #8]
   1d880:	2204      	movs	r2, #4
   1d882:	4013      	ands	r3, r2
   1d884:	d014      	beq.n	1d8b0 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1d886:	68fb      	ldr	r3, [r7, #12]
   1d888:	681b      	ldr	r3, [r3, #0]
   1d88a:	2204      	movs	r2, #4
   1d88c:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d88e:	68fb      	ldr	r3, [r7, #12]
   1d890:	7edb      	ldrb	r3, [r3, #27]
   1d892:	001a      	movs	r2, r3
   1d894:	2302      	movs	r3, #2
   1d896:	4013      	ands	r3, r2
   1d898:	d00a      	beq.n	1d8b0 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1d89a:	68fb      	ldr	r3, [r7, #12]
   1d89c:	7e9b      	ldrb	r3, [r3, #26]
   1d89e:	001a      	movs	r2, r3
   1d8a0:	2302      	movs	r3, #2
   1d8a2:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d8a4:	d004      	beq.n	1d8b0 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1d8a6:	68fb      	ldr	r3, [r7, #12]
   1d8a8:	68db      	ldr	r3, [r3, #12]
   1d8aa:	68fa      	ldr	r2, [r7, #12]
   1d8ac:	0010      	movs	r0, r2
   1d8ae:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1d8b0:	68bb      	ldr	r3, [r7, #8]
   1d8b2:	2202      	movs	r2, #2
   1d8b4:	4013      	ands	r3, r2
   1d8b6:	d014      	beq.n	1d8e2 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1d8b8:	68fb      	ldr	r3, [r7, #12]
   1d8ba:	681b      	ldr	r3, [r3, #0]
   1d8bc:	2202      	movs	r2, #2
   1d8be:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d8c0:	68fb      	ldr	r3, [r7, #12]
   1d8c2:	7edb      	ldrb	r3, [r3, #27]
   1d8c4:	001a      	movs	r2, r3
   1d8c6:	2304      	movs	r3, #4
   1d8c8:	4013      	ands	r3, r2
   1d8ca:	d00a      	beq.n	1d8e2 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1d8cc:	68fb      	ldr	r3, [r7, #12]
   1d8ce:	7e9b      	ldrb	r3, [r3, #26]
   1d8d0:	001a      	movs	r2, r3
   1d8d2:	2304      	movs	r3, #4
   1d8d4:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d8d6:	d004      	beq.n	1d8e2 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1d8d8:	68fb      	ldr	r3, [r7, #12]
   1d8da:	691b      	ldr	r3, [r3, #16]
   1d8dc:	68fa      	ldr	r2, [r7, #12]
   1d8de:	0010      	movs	r0, r2
   1d8e0:	4798      	blx	r3
		}
	}
}
   1d8e2:	46c0      	nop			; (mov r8, r8)
   1d8e4:	46bd      	mov	sp, r7
   1d8e6:	b004      	add	sp, #16
   1d8e8:	bd80      	pop	{r7, pc}
   1d8ea:	46c0      	nop			; (mov r8, r8)
   1d8ec:	200008a4 	.word	0x200008a4
   1d8f0:	0001d705 	.word	0x0001d705
   1d8f4:	0001d72d 	.word	0x0001d72d
   1d8f8:	0001d799 	.word	0x0001d799

0001d8fc <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1d8fc:	b580      	push	{r7, lr}
   1d8fe:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1d900:	2000      	movs	r0, #0
   1d902:	4b02      	ldr	r3, [pc, #8]	; (1d90c <ADC_Handler+0x10>)
   1d904:	4798      	blx	r3
}
   1d906:	46c0      	nop			; (mov r8, r8)
   1d908:	46bd      	mov	sp, r7
   1d90a:	bd80      	pop	{r7, pc}
   1d90c:	0001d7bd 	.word	0x0001d7bd

0001d910 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1d910:	b580      	push	{r7, lr}
   1d912:	b084      	sub	sp, #16
   1d914:	af00      	add	r7, sp, #0
   1d916:	60f8      	str	r0, [r7, #12]
   1d918:	60b9      	str	r1, [r7, #8]
   1d91a:	1dfb      	adds	r3, r7, #7
   1d91c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1d91e:	1dfb      	adds	r3, r7, #7
   1d920:	781a      	ldrb	r2, [r3, #0]
   1d922:	68fb      	ldr	r3, [r7, #12]
   1d924:	3202      	adds	r2, #2
   1d926:	0092      	lsls	r2, r2, #2
   1d928:	68b9      	ldr	r1, [r7, #8]
   1d92a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1d92c:	68fb      	ldr	r3, [r7, #12]
   1d92e:	7e9b      	ldrb	r3, [r3, #26]
   1d930:	b25a      	sxtb	r2, r3
   1d932:	1dfb      	adds	r3, r7, #7
   1d934:	781b      	ldrb	r3, [r3, #0]
   1d936:	2101      	movs	r1, #1
   1d938:	4099      	lsls	r1, r3
   1d93a:	000b      	movs	r3, r1
   1d93c:	b25b      	sxtb	r3, r3
   1d93e:	4313      	orrs	r3, r2
   1d940:	b25b      	sxtb	r3, r3
   1d942:	b2da      	uxtb	r2, r3
   1d944:	68fb      	ldr	r3, [r7, #12]
   1d946:	769a      	strb	r2, [r3, #26]
}
   1d948:	46c0      	nop			; (mov r8, r8)
   1d94a:	46bd      	mov	sp, r7
   1d94c:	b004      	add	sp, #16
   1d94e:	bd80      	pop	{r7, pc}

0001d950 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1d950:	b580      	push	{r7, lr}
   1d952:	b084      	sub	sp, #16
   1d954:	af00      	add	r7, sp, #0
   1d956:	60f8      	str	r0, [r7, #12]
   1d958:	60b9      	str	r1, [r7, #8]
   1d95a:	1dbb      	adds	r3, r7, #6
   1d95c:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1d95e:	68fb      	ldr	r3, [r7, #12]
   1d960:	8b1b      	ldrh	r3, [r3, #24]
   1d962:	b29b      	uxth	r3, r3
   1d964:	2b00      	cmp	r3, #0
   1d966:	d104      	bne.n	1d972 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1d968:	68fb      	ldr	r3, [r7, #12]
   1d96a:	7f1b      	ldrb	r3, [r3, #28]
   1d96c:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1d96e:	2b05      	cmp	r3, #5
   1d970:	d101      	bne.n	1d976 <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1d972:	2305      	movs	r3, #5
   1d974:	e017      	b.n	1d9a6 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1d976:	68fb      	ldr	r3, [r7, #12]
   1d978:	2205      	movs	r2, #5
   1d97a:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1d97c:	68fb      	ldr	r3, [r7, #12]
   1d97e:	1dba      	adds	r2, r7, #6
   1d980:	8812      	ldrh	r2, [r2, #0]
   1d982:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1d984:	68fb      	ldr	r3, [r7, #12]
   1d986:	68ba      	ldr	r2, [r7, #8]
   1d988:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1d98a:	68fb      	ldr	r3, [r7, #12]
   1d98c:	2101      	movs	r1, #1
   1d98e:	0018      	movs	r0, r3
   1d990:	4b07      	ldr	r3, [pc, #28]	; (1d9b0 <adc_read_buffer_job+0x60>)
   1d992:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1d994:	68fb      	ldr	r3, [r7, #12]
   1d996:	7f5b      	ldrb	r3, [r3, #29]
   1d998:	2b00      	cmp	r3, #0
   1d99a:	d003      	beq.n	1d9a4 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1d99c:	68fb      	ldr	r3, [r7, #12]
   1d99e:	0018      	movs	r0, r3
   1d9a0:	4b04      	ldr	r3, [pc, #16]	; (1d9b4 <adc_read_buffer_job+0x64>)
   1d9a2:	4798      	blx	r3
	}

	return STATUS_OK;
   1d9a4:	2300      	movs	r3, #0
}
   1d9a6:	0018      	movs	r0, r3
   1d9a8:	46bd      	mov	sp, r7
   1d9aa:	b004      	add	sp, #16
   1d9ac:	bd80      	pop	{r7, pc}
   1d9ae:	46c0      	nop			; (mov r8, r8)
   1d9b0:	0001d775 	.word	0x0001d775
   1d9b4:	0001d72d 	.word	0x0001d72d

0001d9b8 <system_interrupt_disable>:
{
   1d9b8:	b580      	push	{r7, lr}
   1d9ba:	b082      	sub	sp, #8
   1d9bc:	af00      	add	r7, sp, #0
   1d9be:	0002      	movs	r2, r0
   1d9c0:	1dfb      	adds	r3, r7, #7
   1d9c2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d9c4:	4a07      	ldr	r2, [pc, #28]	; (1d9e4 <system_interrupt_disable+0x2c>)
   1d9c6:	1dfb      	adds	r3, r7, #7
   1d9c8:	781b      	ldrb	r3, [r3, #0]
   1d9ca:	0019      	movs	r1, r3
   1d9cc:	231f      	movs	r3, #31
   1d9ce:	400b      	ands	r3, r1
   1d9d0:	2101      	movs	r1, #1
   1d9d2:	4099      	lsls	r1, r3
   1d9d4:	000b      	movs	r3, r1
   1d9d6:	0019      	movs	r1, r3
   1d9d8:	2380      	movs	r3, #128	; 0x80
   1d9da:	50d1      	str	r1, [r2, r3]
}
   1d9dc:	46c0      	nop			; (mov r8, r8)
   1d9de:	46bd      	mov	sp, r7
   1d9e0:	b002      	add	sp, #8
   1d9e2:	bd80      	pop	{r7, pc}
   1d9e4:	e000e100 	.word	0xe000e100

0001d9e8 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1d9e8:	b580      	push	{r7, lr}
   1d9ea:	b084      	sub	sp, #16
   1d9ec:	af00      	add	r7, sp, #0
   1d9ee:	0002      	movs	r2, r0
   1d9f0:	1dfb      	adds	r3, r7, #7
   1d9f2:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1d9f4:	1dfb      	adds	r3, r7, #7
   1d9f6:	781a      	ldrb	r2, [r3, #0]
   1d9f8:	4b37      	ldr	r3, [pc, #220]	; (1dad8 <_dac_interrupt_handler+0xf0>)
   1d9fa:	0092      	lsls	r2, r2, #2
   1d9fc:	58d3      	ldr	r3, [r2, r3]
   1d9fe:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1da00:	68fb      	ldr	r3, [r7, #12]
   1da02:	681b      	ldr	r3, [r3, #0]
   1da04:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1da06:	68bb      	ldr	r3, [r7, #8]
   1da08:	799b      	ldrb	r3, [r3, #6]
   1da0a:	b2db      	uxtb	r3, r3
   1da0c:	001a      	movs	r2, r3
   1da0e:	2301      	movs	r3, #1
   1da10:	4013      	ands	r3, r2
   1da12:	d00e      	beq.n	1da32 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1da14:	68bb      	ldr	r3, [r7, #8]
   1da16:	2201      	movs	r2, #1
   1da18:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1da1a:	68fb      	ldr	r3, [r7, #12]
   1da1c:	3314      	adds	r3, #20
   1da1e:	2b00      	cmp	r3, #0
   1da20:	d007      	beq.n	1da32 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1da22:	68fb      	ldr	r3, [r7, #12]
   1da24:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1da26:	2b00      	cmp	r3, #0
   1da28:	d003      	beq.n	1da32 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1da2a:	68fb      	ldr	r3, [r7, #12]
   1da2c:	699b      	ldr	r3, [r3, #24]
   1da2e:	2000      	movs	r0, #0
   1da30:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1da32:	68bb      	ldr	r3, [r7, #8]
   1da34:	799b      	ldrb	r3, [r3, #6]
   1da36:	b2db      	uxtb	r3, r3
   1da38:	001a      	movs	r2, r3
   1da3a:	2302      	movs	r3, #2
   1da3c:	4013      	ands	r3, r2
   1da3e:	d047      	beq.n	1dad0 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1da40:	68bb      	ldr	r3, [r7, #8]
   1da42:	2202      	movs	r2, #2
   1da44:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1da46:	68fb      	ldr	r3, [r7, #12]
   1da48:	899b      	ldrh	r3, [r3, #12]
   1da4a:	b29b      	uxth	r3, r3
   1da4c:	2b00      	cmp	r3, #0
   1da4e:	d033      	beq.n	1dab8 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1da50:	68fb      	ldr	r3, [r7, #12]
   1da52:	689a      	ldr	r2, [r3, #8]
   1da54:	68fb      	ldr	r3, [r7, #12]
   1da56:	89db      	ldrh	r3, [r3, #14]
   1da58:	b29b      	uxth	r3, r3
   1da5a:	1c59      	adds	r1, r3, #1
   1da5c:	b288      	uxth	r0, r1
   1da5e:	68f9      	ldr	r1, [r7, #12]
   1da60:	81c8      	strh	r0, [r1, #14]
   1da62:	005b      	lsls	r3, r3, #1
   1da64:	18d3      	adds	r3, r2, r3
   1da66:	881b      	ldrh	r3, [r3, #0]
   1da68:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1da6a:	68bb      	ldr	r3, [r7, #8]
   1da6c:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1da6e:	68fb      	ldr	r3, [r7, #12]
   1da70:	899b      	ldrh	r3, [r3, #12]
   1da72:	b29b      	uxth	r3, r3
   1da74:	3b01      	subs	r3, #1
   1da76:	b29a      	uxth	r2, r3
   1da78:	68fb      	ldr	r3, [r7, #12]
   1da7a:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1da7c:	68fb      	ldr	r3, [r7, #12]
   1da7e:	899b      	ldrh	r3, [r3, #12]
   1da80:	b29b      	uxth	r3, r3
   1da82:	2b00      	cmp	r3, #0
   1da84:	d118      	bne.n	1dab8 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1da86:	68fb      	ldr	r3, [r7, #12]
   1da88:	2220      	movs	r2, #32
   1da8a:	2100      	movs	r1, #0
   1da8c:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1da8e:	68bb      	ldr	r3, [r7, #8]
   1da90:	2202      	movs	r2, #2
   1da92:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1da94:	68bb      	ldr	r3, [r7, #8]
   1da96:	2202      	movs	r2, #2
   1da98:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1da9a:	2019      	movs	r0, #25
   1da9c:	4b0f      	ldr	r3, [pc, #60]	; (1dadc <_dac_interrupt_handler+0xf4>)
   1da9e:	4798      	blx	r3

				if ((module->callback) &&
   1daa0:	68fb      	ldr	r3, [r7, #12]
   1daa2:	3314      	adds	r3, #20
   1daa4:	2b00      	cmp	r3, #0
   1daa6:	d007      	beq.n	1dab8 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1daa8:	68fb      	ldr	r3, [r7, #12]
   1daaa:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1daac:	2b00      	cmp	r3, #0
   1daae:	d003      	beq.n	1dab8 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1dab0:	68fb      	ldr	r3, [r7, #12]
   1dab2:	69db      	ldr	r3, [r3, #28]
   1dab4:	2000      	movs	r0, #0
   1dab6:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1dab8:	68fb      	ldr	r3, [r7, #12]
   1daba:	3314      	adds	r3, #20
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d007      	beq.n	1dad0 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1dac0:	68fb      	ldr	r3, [r7, #12]
   1dac2:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1dac4:	2b00      	cmp	r3, #0
   1dac6:	d003      	beq.n	1dad0 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1dac8:	68fb      	ldr	r3, [r7, #12]
   1daca:	695b      	ldr	r3, [r3, #20]
   1dacc:	2000      	movs	r0, #0
   1dace:	4798      	blx	r3
		}
	}
}
   1dad0:	46c0      	nop			; (mov r8, r8)
   1dad2:	46bd      	mov	sp, r7
   1dad4:	b004      	add	sp, #16
   1dad6:	bd80      	pop	{r7, pc}
   1dad8:	200008a8 	.word	0x200008a8
   1dadc:	0001d9b9 	.word	0x0001d9b9

0001dae0 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1dae0:	b580      	push	{r7, lr}
   1dae2:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1dae4:	2000      	movs	r0, #0
   1dae6:	4b02      	ldr	r3, [pc, #8]	; (1daf0 <DAC_Handler+0x10>)
   1dae8:	4798      	blx	r3
}
   1daea:	46c0      	nop			; (mov r8, r8)
   1daec:	46bd      	mov	sp, r7
   1daee:	bd80      	pop	{r7, pc}
   1daf0:	0001d9e9 	.word	0x0001d9e9

0001daf4 <system_interrupt_enter_critical_section>:
{
   1daf4:	b580      	push	{r7, lr}
   1daf6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1daf8:	4b02      	ldr	r3, [pc, #8]	; (1db04 <system_interrupt_enter_critical_section+0x10>)
   1dafa:	4798      	blx	r3
}
   1dafc:	46c0      	nop			; (mov r8, r8)
   1dafe:	46bd      	mov	sp, r7
   1db00:	bd80      	pop	{r7, pc}
   1db02:	46c0      	nop			; (mov r8, r8)
   1db04:	00023bfd 	.word	0x00023bfd

0001db08 <system_interrupt_leave_critical_section>:
{
   1db08:	b580      	push	{r7, lr}
   1db0a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1db0c:	4b02      	ldr	r3, [pc, #8]	; (1db18 <system_interrupt_leave_critical_section+0x10>)
   1db0e:	4798      	blx	r3
}
   1db10:	46c0      	nop			; (mov r8, r8)
   1db12:	46bd      	mov	sp, r7
   1db14:	bd80      	pop	{r7, pc}
   1db16:	46c0      	nop			; (mov r8, r8)
   1db18:	00023c51 	.word	0x00023c51

0001db1c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1db1c:	b580      	push	{r7, lr}
   1db1e:	b086      	sub	sp, #24
   1db20:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1db22:	4b49      	ldr	r3, [pc, #292]	; (1dc48 <DMAC_Handler+0x12c>)
   1db24:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1db26:	4b49      	ldr	r3, [pc, #292]	; (1dc4c <DMAC_Handler+0x130>)
   1db28:	8c1b      	ldrh	r3, [r3, #32]
   1db2a:	b29b      	uxth	r3, r3
   1db2c:	b2da      	uxtb	r2, r3
   1db2e:	2317      	movs	r3, #23
   1db30:	18fb      	adds	r3, r7, r3
   1db32:	210f      	movs	r1, #15
   1db34:	400a      	ands	r2, r1
   1db36:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1db38:	2317      	movs	r3, #23
   1db3a:	18fb      	adds	r3, r7, r3
   1db3c:	781a      	ldrb	r2, [r3, #0]
   1db3e:	4b44      	ldr	r3, [pc, #272]	; (1dc50 <DMAC_Handler+0x134>)
   1db40:	0092      	lsls	r2, r2, #2
   1db42:	58d3      	ldr	r3, [r2, r3]
   1db44:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1db46:	4a41      	ldr	r2, [pc, #260]	; (1dc4c <DMAC_Handler+0x130>)
   1db48:	693b      	ldr	r3, [r7, #16]
   1db4a:	781b      	ldrb	r3, [r3, #0]
   1db4c:	210f      	movs	r1, #15
   1db4e:	400b      	ands	r3, r1
   1db50:	b2d9      	uxtb	r1, r3
   1db52:	233f      	movs	r3, #63	; 0x3f
   1db54:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1db56:	493d      	ldr	r1, [pc, #244]	; (1dc4c <DMAC_Handler+0x130>)
   1db58:	230f      	movs	r3, #15
   1db5a:	18fb      	adds	r3, r7, r3
   1db5c:	224e      	movs	r2, #78	; 0x4e
   1db5e:	5c8a      	ldrb	r2, [r1, r2]
   1db60:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1db62:	693b      	ldr	r3, [r7, #16]
   1db64:	781b      	ldrb	r3, [r3, #0]
   1db66:	4a3b      	ldr	r2, [pc, #236]	; (1dc54 <DMAC_Handler+0x138>)
   1db68:	011b      	lsls	r3, r3, #4
   1db6a:	18d3      	adds	r3, r2, r3
   1db6c:	3302      	adds	r3, #2
   1db6e:	881b      	ldrh	r3, [r3, #0]
   1db70:	b29b      	uxth	r3, r3
   1db72:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1db74:	693b      	ldr	r3, [r7, #16]
   1db76:	781b      	ldrb	r3, [r3, #0]
   1db78:	4a37      	ldr	r2, [pc, #220]	; (1dc58 <DMAC_Handler+0x13c>)
   1db7a:	011b      	lsls	r3, r3, #4
   1db7c:	18d3      	adds	r3, r2, r3
   1db7e:	3302      	adds	r3, #2
   1db80:	881b      	ldrh	r3, [r3, #0]
   1db82:	b29b      	uxth	r3, r3
   1db84:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1db86:	68ba      	ldr	r2, [r7, #8]
   1db88:	687b      	ldr	r3, [r7, #4]
   1db8a:	1ad2      	subs	r2, r2, r3
   1db8c:	693b      	ldr	r3, [r7, #16]
   1db8e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1db90:	230f      	movs	r3, #15
   1db92:	18fb      	adds	r3, r7, r3
   1db94:	781b      	ldrb	r3, [r3, #0]
   1db96:	2201      	movs	r2, #1
   1db98:	4013      	ands	r3, r2
   1db9a:	d016      	beq.n	1dbca <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1db9c:	4a2b      	ldr	r2, [pc, #172]	; (1dc4c <DMAC_Handler+0x130>)
   1db9e:	234e      	movs	r3, #78	; 0x4e
   1dba0:	2101      	movs	r1, #1
   1dba2:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1dba4:	693b      	ldr	r3, [r7, #16]
   1dba6:	2210      	movs	r2, #16
   1dba8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dbaa:	693b      	ldr	r3, [r7, #16]
   1dbac:	7c1b      	ldrb	r3, [r3, #16]
   1dbae:	001a      	movs	r2, r3
   1dbb0:	2301      	movs	r3, #1
   1dbb2:	4013      	ands	r3, r2
   1dbb4:	d042      	beq.n	1dc3c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1dbb6:	693b      	ldr	r3, [r7, #16]
   1dbb8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dbba:	2b00      	cmp	r3, #0
   1dbbc:	d03e      	beq.n	1dc3c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1dbbe:	693b      	ldr	r3, [r7, #16]
   1dbc0:	685b      	ldr	r3, [r3, #4]
   1dbc2:	693a      	ldr	r2, [r7, #16]
   1dbc4:	0010      	movs	r0, r2
   1dbc6:	4798      	blx	r3
   1dbc8:	e038      	b.n	1dc3c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1dbca:	230f      	movs	r3, #15
   1dbcc:	18fb      	adds	r3, r7, r3
   1dbce:	781b      	ldrb	r3, [r3, #0]
   1dbd0:	2202      	movs	r2, #2
   1dbd2:	4013      	ands	r3, r2
   1dbd4:	d016      	beq.n	1dc04 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1dbd6:	4a1d      	ldr	r2, [pc, #116]	; (1dc4c <DMAC_Handler+0x130>)
   1dbd8:	234e      	movs	r3, #78	; 0x4e
   1dbda:	2102      	movs	r1, #2
   1dbdc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1dbde:	693b      	ldr	r3, [r7, #16]
   1dbe0:	2200      	movs	r2, #0
   1dbe2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dbe4:	693b      	ldr	r3, [r7, #16]
   1dbe6:	7c1b      	ldrb	r3, [r3, #16]
   1dbe8:	001a      	movs	r2, r3
   1dbea:	2302      	movs	r3, #2
   1dbec:	4013      	ands	r3, r2
   1dbee:	d025      	beq.n	1dc3c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1dbf0:	693b      	ldr	r3, [r7, #16]
   1dbf2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dbf4:	2b00      	cmp	r3, #0
   1dbf6:	d021      	beq.n	1dc3c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1dbf8:	693b      	ldr	r3, [r7, #16]
   1dbfa:	689b      	ldr	r3, [r3, #8]
   1dbfc:	693a      	ldr	r2, [r7, #16]
   1dbfe:	0010      	movs	r0, r2
   1dc00:	4798      	blx	r3
   1dc02:	e01b      	b.n	1dc3c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1dc04:	230f      	movs	r3, #15
   1dc06:	18fb      	adds	r3, r7, r3
   1dc08:	781b      	ldrb	r3, [r3, #0]
   1dc0a:	2204      	movs	r2, #4
   1dc0c:	4013      	ands	r3, r2
   1dc0e:	d015      	beq.n	1dc3c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1dc10:	4a0e      	ldr	r2, [pc, #56]	; (1dc4c <DMAC_Handler+0x130>)
   1dc12:	234e      	movs	r3, #78	; 0x4e
   1dc14:	2104      	movs	r1, #4
   1dc16:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1dc18:	693b      	ldr	r3, [r7, #16]
   1dc1a:	2206      	movs	r2, #6
   1dc1c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1dc1e:	693b      	ldr	r3, [r7, #16]
   1dc20:	7c1b      	ldrb	r3, [r3, #16]
   1dc22:	001a      	movs	r2, r3
   1dc24:	2304      	movs	r3, #4
   1dc26:	4013      	ands	r3, r2
   1dc28:	d008      	beq.n	1dc3c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1dc2a:	693b      	ldr	r3, [r7, #16]
   1dc2c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1dc2e:	2b00      	cmp	r3, #0
   1dc30:	d004      	beq.n	1dc3c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1dc32:	693b      	ldr	r3, [r7, #16]
   1dc34:	68db      	ldr	r3, [r3, #12]
   1dc36:	693a      	ldr	r2, [r7, #16]
   1dc38:	0010      	movs	r0, r2
   1dc3a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1dc3c:	4b07      	ldr	r3, [pc, #28]	; (1dc5c <DMAC_Handler+0x140>)
   1dc3e:	4798      	blx	r3
}
   1dc40:	46c0      	nop			; (mov r8, r8)
   1dc42:	46bd      	mov	sp, r7
   1dc44:	b006      	add	sp, #24
   1dc46:	bd80      	pop	{r7, pc}
   1dc48:	0001daf5 	.word	0x0001daf5
   1dc4c:	41004800 	.word	0x41004800
   1dc50:	200002a0 	.word	0x200002a0
   1dc54:	200008b0 	.word	0x200008b0
   1dc58:	20000250 	.word	0x20000250
   1dc5c:	0001db09 	.word	0x0001db09

0001dc60 <system_gclk_chan_get_config_defaults>:
{
   1dc60:	b580      	push	{r7, lr}
   1dc62:	b082      	sub	sp, #8
   1dc64:	af00      	add	r7, sp, #0
   1dc66:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1dc68:	687b      	ldr	r3, [r7, #4]
   1dc6a:	2200      	movs	r2, #0
   1dc6c:	701a      	strb	r2, [r3, #0]
}
   1dc6e:	46c0      	nop			; (mov r8, r8)
   1dc70:	46bd      	mov	sp, r7
   1dc72:	b002      	add	sp, #8
   1dc74:	bd80      	pop	{r7, pc}
	...

0001dc78 <system_apb_clock_set_mask>:
{
   1dc78:	b580      	push	{r7, lr}
   1dc7a:	b082      	sub	sp, #8
   1dc7c:	af00      	add	r7, sp, #0
   1dc7e:	0002      	movs	r2, r0
   1dc80:	6039      	str	r1, [r7, #0]
   1dc82:	1dfb      	adds	r3, r7, #7
   1dc84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dc86:	1dfb      	adds	r3, r7, #7
   1dc88:	781b      	ldrb	r3, [r3, #0]
   1dc8a:	2b01      	cmp	r3, #1
   1dc8c:	d00a      	beq.n	1dca4 <system_apb_clock_set_mask+0x2c>
   1dc8e:	2b02      	cmp	r3, #2
   1dc90:	d00f      	beq.n	1dcb2 <system_apb_clock_set_mask+0x3a>
   1dc92:	2b00      	cmp	r3, #0
   1dc94:	d114      	bne.n	1dcc0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dc96:	4b0e      	ldr	r3, [pc, #56]	; (1dcd0 <system_apb_clock_set_mask+0x58>)
   1dc98:	4a0d      	ldr	r2, [pc, #52]	; (1dcd0 <system_apb_clock_set_mask+0x58>)
   1dc9a:	6991      	ldr	r1, [r2, #24]
   1dc9c:	683a      	ldr	r2, [r7, #0]
   1dc9e:	430a      	orrs	r2, r1
   1dca0:	619a      	str	r2, [r3, #24]
			break;
   1dca2:	e00f      	b.n	1dcc4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1dca4:	4b0a      	ldr	r3, [pc, #40]	; (1dcd0 <system_apb_clock_set_mask+0x58>)
   1dca6:	4a0a      	ldr	r2, [pc, #40]	; (1dcd0 <system_apb_clock_set_mask+0x58>)
   1dca8:	69d1      	ldr	r1, [r2, #28]
   1dcaa:	683a      	ldr	r2, [r7, #0]
   1dcac:	430a      	orrs	r2, r1
   1dcae:	61da      	str	r2, [r3, #28]
			break;
   1dcb0:	e008      	b.n	1dcc4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1dcb2:	4b07      	ldr	r3, [pc, #28]	; (1dcd0 <system_apb_clock_set_mask+0x58>)
   1dcb4:	4a06      	ldr	r2, [pc, #24]	; (1dcd0 <system_apb_clock_set_mask+0x58>)
   1dcb6:	6a11      	ldr	r1, [r2, #32]
   1dcb8:	683a      	ldr	r2, [r7, #0]
   1dcba:	430a      	orrs	r2, r1
   1dcbc:	621a      	str	r2, [r3, #32]
			break;
   1dcbe:	e001      	b.n	1dcc4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1dcc0:	2317      	movs	r3, #23
   1dcc2:	e000      	b.n	1dcc6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1dcc4:	2300      	movs	r3, #0
}
   1dcc6:	0018      	movs	r0, r3
   1dcc8:	46bd      	mov	sp, r7
   1dcca:	b002      	add	sp, #8
   1dccc:	bd80      	pop	{r7, pc}
   1dcce:	46c0      	nop			; (mov r8, r8)
   1dcd0:	40000400 	.word	0x40000400

0001dcd4 <system_pinmux_get_config_defaults>:
{
   1dcd4:	b580      	push	{r7, lr}
   1dcd6:	b082      	sub	sp, #8
   1dcd8:	af00      	add	r7, sp, #0
   1dcda:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1dcdc:	687b      	ldr	r3, [r7, #4]
   1dcde:	2280      	movs	r2, #128	; 0x80
   1dce0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1dce2:	687b      	ldr	r3, [r7, #4]
   1dce4:	2200      	movs	r2, #0
   1dce6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1dce8:	687b      	ldr	r3, [r7, #4]
   1dcea:	2201      	movs	r2, #1
   1dcec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1dcee:	687b      	ldr	r3, [r7, #4]
   1dcf0:	2200      	movs	r2, #0
   1dcf2:	70da      	strb	r2, [r3, #3]
}
   1dcf4:	46c0      	nop			; (mov r8, r8)
   1dcf6:	46bd      	mov	sp, r7
   1dcf8:	b002      	add	sp, #8
   1dcfa:	bd80      	pop	{r7, pc}

0001dcfc <system_interrupt_enable>:
{
   1dcfc:	b580      	push	{r7, lr}
   1dcfe:	b082      	sub	sp, #8
   1dd00:	af00      	add	r7, sp, #0
   1dd02:	0002      	movs	r2, r0
   1dd04:	1dfb      	adds	r3, r7, #7
   1dd06:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dd08:	4b06      	ldr	r3, [pc, #24]	; (1dd24 <system_interrupt_enable+0x28>)
   1dd0a:	1dfa      	adds	r2, r7, #7
   1dd0c:	7812      	ldrb	r2, [r2, #0]
   1dd0e:	0011      	movs	r1, r2
   1dd10:	221f      	movs	r2, #31
   1dd12:	400a      	ands	r2, r1
   1dd14:	2101      	movs	r1, #1
   1dd16:	4091      	lsls	r1, r2
   1dd18:	000a      	movs	r2, r1
   1dd1a:	601a      	str	r2, [r3, #0]
}
   1dd1c:	46c0      	nop			; (mov r8, r8)
   1dd1e:	46bd      	mov	sp, r7
   1dd20:	b002      	add	sp, #8
   1dd22:	bd80      	pop	{r7, pc}
   1dd24:	e000e100 	.word	0xe000e100

0001dd28 <_extint_get_eic_from_channel>:
{
   1dd28:	b580      	push	{r7, lr}
   1dd2a:	b084      	sub	sp, #16
   1dd2c:	af00      	add	r7, sp, #0
   1dd2e:	0002      	movs	r2, r0
   1dd30:	1dfb      	adds	r3, r7, #7
   1dd32:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1dd34:	230f      	movs	r3, #15
   1dd36:	18fb      	adds	r3, r7, r3
   1dd38:	1dfa      	adds	r2, r7, #7
   1dd3a:	7812      	ldrb	r2, [r2, #0]
   1dd3c:	0952      	lsrs	r2, r2, #5
   1dd3e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1dd40:	230f      	movs	r3, #15
   1dd42:	18fb      	adds	r3, r7, r3
   1dd44:	781b      	ldrb	r3, [r3, #0]
   1dd46:	2b00      	cmp	r3, #0
   1dd48:	d10c      	bne.n	1dd64 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1dd4a:	4b09      	ldr	r3, [pc, #36]	; (1dd70 <_extint_get_eic_from_channel+0x48>)
   1dd4c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1dd4e:	230f      	movs	r3, #15
   1dd50:	18fb      	adds	r3, r7, r3
   1dd52:	781b      	ldrb	r3, [r3, #0]
   1dd54:	009b      	lsls	r3, r3, #2
   1dd56:	2210      	movs	r2, #16
   1dd58:	4694      	mov	ip, r2
   1dd5a:	44bc      	add	ip, r7
   1dd5c:	4463      	add	r3, ip
   1dd5e:	3b08      	subs	r3, #8
   1dd60:	681b      	ldr	r3, [r3, #0]
   1dd62:	e000      	b.n	1dd66 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1dd64:	2300      	movs	r3, #0
}
   1dd66:	0018      	movs	r0, r3
   1dd68:	46bd      	mov	sp, r7
   1dd6a:	b004      	add	sp, #16
   1dd6c:	bd80      	pop	{r7, pc}
   1dd6e:	46c0      	nop			; (mov r8, r8)
   1dd70:	40001800 	.word	0x40001800

0001dd74 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1dd74:	b580      	push	{r7, lr}
   1dd76:	b082      	sub	sp, #8
   1dd78:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1dd7a:	4b0f      	ldr	r3, [pc, #60]	; (1ddb8 <extint_is_syncing+0x44>)
   1dd7c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dd7e:	2300      	movs	r3, #0
   1dd80:	607b      	str	r3, [r7, #4]
   1dd82:	e011      	b.n	1dda8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1dd84:	687b      	ldr	r3, [r7, #4]
   1dd86:	009b      	lsls	r3, r3, #2
   1dd88:	2208      	movs	r2, #8
   1dd8a:	4694      	mov	ip, r2
   1dd8c:	44bc      	add	ip, r7
   1dd8e:	4463      	add	r3, ip
   1dd90:	3b08      	subs	r3, #8
   1dd92:	681b      	ldr	r3, [r3, #0]
   1dd94:	785b      	ldrb	r3, [r3, #1]
   1dd96:	b2db      	uxtb	r3, r3
   1dd98:	b25b      	sxtb	r3, r3
   1dd9a:	2b00      	cmp	r3, #0
   1dd9c:	da01      	bge.n	1dda2 <extint_is_syncing+0x2e>
			return true;
   1dd9e:	2301      	movs	r3, #1
   1dda0:	e006      	b.n	1ddb0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dda2:	687b      	ldr	r3, [r7, #4]
   1dda4:	3301      	adds	r3, #1
   1dda6:	607b      	str	r3, [r7, #4]
   1dda8:	687b      	ldr	r3, [r7, #4]
   1ddaa:	2b00      	cmp	r3, #0
   1ddac:	d0ea      	beq.n	1dd84 <extint_is_syncing+0x10>
		}
	}
	return false;
   1ddae:	2300      	movs	r3, #0
}
   1ddb0:	0018      	movs	r0, r3
   1ddb2:	46bd      	mov	sp, r7
   1ddb4:	b002      	add	sp, #8
   1ddb6:	bd80      	pop	{r7, pc}
   1ddb8:	40001800 	.word	0x40001800

0001ddbc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1ddbc:	b580      	push	{r7, lr}
   1ddbe:	b084      	sub	sp, #16
   1ddc0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ddc2:	4b2d      	ldr	r3, [pc, #180]	; (1de78 <_system_extint_init+0xbc>)
   1ddc4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1ddc6:	2140      	movs	r1, #64	; 0x40
   1ddc8:	2000      	movs	r0, #0
   1ddca:	4b2c      	ldr	r3, [pc, #176]	; (1de7c <_system_extint_init+0xc0>)
   1ddcc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1ddce:	003b      	movs	r3, r7
   1ddd0:	0018      	movs	r0, r3
   1ddd2:	4b2b      	ldr	r3, [pc, #172]	; (1de80 <_system_extint_init+0xc4>)
   1ddd4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1ddd6:	003b      	movs	r3, r7
   1ddd8:	2206      	movs	r2, #6
   1ddda:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1dddc:	003b      	movs	r3, r7
   1ddde:	0019      	movs	r1, r3
   1dde0:	2005      	movs	r0, #5
   1dde2:	4b28      	ldr	r3, [pc, #160]	; (1de84 <_system_extint_init+0xc8>)
   1dde4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1dde6:	2005      	movs	r0, #5
   1dde8:	4b27      	ldr	r3, [pc, #156]	; (1de88 <_system_extint_init+0xcc>)
   1ddea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ddec:	2300      	movs	r3, #0
   1ddee:	60fb      	str	r3, [r7, #12]
   1ddf0:	e018      	b.n	1de24 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1ddf2:	68fb      	ldr	r3, [r7, #12]
   1ddf4:	009b      	lsls	r3, r3, #2
   1ddf6:	2210      	movs	r2, #16
   1ddf8:	4694      	mov	ip, r2
   1ddfa:	44bc      	add	ip, r7
   1ddfc:	4463      	add	r3, ip
   1ddfe:	3b0c      	subs	r3, #12
   1de00:	681a      	ldr	r2, [r3, #0]
   1de02:	68fb      	ldr	r3, [r7, #12]
   1de04:	009b      	lsls	r3, r3, #2
   1de06:	2110      	movs	r1, #16
   1de08:	468c      	mov	ip, r1
   1de0a:	44bc      	add	ip, r7
   1de0c:	4463      	add	r3, ip
   1de0e:	3b0c      	subs	r3, #12
   1de10:	681b      	ldr	r3, [r3, #0]
   1de12:	781b      	ldrb	r3, [r3, #0]
   1de14:	b2db      	uxtb	r3, r3
   1de16:	2101      	movs	r1, #1
   1de18:	430b      	orrs	r3, r1
   1de1a:	b2db      	uxtb	r3, r3
   1de1c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1de1e:	68fb      	ldr	r3, [r7, #12]
   1de20:	3301      	adds	r3, #1
   1de22:	60fb      	str	r3, [r7, #12]
   1de24:	68fb      	ldr	r3, [r7, #12]
   1de26:	2b00      	cmp	r3, #0
   1de28:	d0e3      	beq.n	1ddf2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1de2a:	46c0      	nop			; (mov r8, r8)
   1de2c:	4b17      	ldr	r3, [pc, #92]	; (1de8c <_system_extint_init+0xd0>)
   1de2e:	4798      	blx	r3
   1de30:	1e03      	subs	r3, r0, #0
   1de32:	d1fb      	bne.n	1de2c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1de34:	230b      	movs	r3, #11
   1de36:	18fb      	adds	r3, r7, r3
   1de38:	2200      	movs	r2, #0
   1de3a:	701a      	strb	r2, [r3, #0]
   1de3c:	e00d      	b.n	1de5a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1de3e:	230b      	movs	r3, #11
   1de40:	18fb      	adds	r3, r7, r3
   1de42:	781a      	ldrb	r2, [r3, #0]
   1de44:	4b12      	ldr	r3, [pc, #72]	; (1de90 <_system_extint_init+0xd4>)
   1de46:	0092      	lsls	r2, r2, #2
   1de48:	2100      	movs	r1, #0
   1de4a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1de4c:	230b      	movs	r3, #11
   1de4e:	18fb      	adds	r3, r7, r3
   1de50:	781a      	ldrb	r2, [r3, #0]
   1de52:	230b      	movs	r3, #11
   1de54:	18fb      	adds	r3, r7, r3
   1de56:	3201      	adds	r2, #1
   1de58:	701a      	strb	r2, [r3, #0]
   1de5a:	230b      	movs	r3, #11
   1de5c:	18fb      	adds	r3, r7, r3
   1de5e:	781b      	ldrb	r3, [r3, #0]
   1de60:	2b0f      	cmp	r3, #15
   1de62:	d9ec      	bls.n	1de3e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1de64:	2004      	movs	r0, #4
   1de66:	4b0b      	ldr	r3, [pc, #44]	; (1de94 <_system_extint_init+0xd8>)
   1de68:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1de6a:	4b0b      	ldr	r3, [pc, #44]	; (1de98 <_system_extint_init+0xdc>)
   1de6c:	4798      	blx	r3
}
   1de6e:	46c0      	nop			; (mov r8, r8)
   1de70:	46bd      	mov	sp, r7
   1de72:	b004      	add	sp, #16
   1de74:	bd80      	pop	{r7, pc}
   1de76:	46c0      	nop			; (mov r8, r8)
   1de78:	40001800 	.word	0x40001800
   1de7c:	0001dc79 	.word	0x0001dc79
   1de80:	0001dc61 	.word	0x0001dc61
   1de84:	000249b5 	.word	0x000249b5
   1de88:	000249f9 	.word	0x000249f9
   1de8c:	0001dd75 	.word	0x0001dd75
   1de90:	20000900 	.word	0x20000900
   1de94:	0001dcfd 	.word	0x0001dcfd
   1de98:	0001de9d 	.word	0x0001de9d

0001de9c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1de9c:	b580      	push	{r7, lr}
   1de9e:	b082      	sub	sp, #8
   1dea0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1dea2:	4b15      	ldr	r3, [pc, #84]	; (1def8 <_extint_enable+0x5c>)
   1dea4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1dea6:	2300      	movs	r3, #0
   1dea8:	607b      	str	r3, [r7, #4]
   1deaa:	e018      	b.n	1dede <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1deac:	687b      	ldr	r3, [r7, #4]
   1deae:	009b      	lsls	r3, r3, #2
   1deb0:	2208      	movs	r2, #8
   1deb2:	4694      	mov	ip, r2
   1deb4:	44bc      	add	ip, r7
   1deb6:	4463      	add	r3, ip
   1deb8:	3b08      	subs	r3, #8
   1deba:	681a      	ldr	r2, [r3, #0]
   1debc:	687b      	ldr	r3, [r7, #4]
   1debe:	009b      	lsls	r3, r3, #2
   1dec0:	2108      	movs	r1, #8
   1dec2:	468c      	mov	ip, r1
   1dec4:	44bc      	add	ip, r7
   1dec6:	4463      	add	r3, ip
   1dec8:	3b08      	subs	r3, #8
   1deca:	681b      	ldr	r3, [r3, #0]
   1decc:	781b      	ldrb	r3, [r3, #0]
   1dece:	b2db      	uxtb	r3, r3
   1ded0:	2102      	movs	r1, #2
   1ded2:	430b      	orrs	r3, r1
   1ded4:	b2db      	uxtb	r3, r3
   1ded6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ded8:	687b      	ldr	r3, [r7, #4]
   1deda:	3301      	adds	r3, #1
   1dedc:	607b      	str	r3, [r7, #4]
   1dede:	687b      	ldr	r3, [r7, #4]
   1dee0:	2b00      	cmp	r3, #0
   1dee2:	d0e3      	beq.n	1deac <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1dee4:	46c0      	nop			; (mov r8, r8)
   1dee6:	4b05      	ldr	r3, [pc, #20]	; (1defc <_extint_enable+0x60>)
   1dee8:	4798      	blx	r3
   1deea:	1e03      	subs	r3, r0, #0
   1deec:	d1fb      	bne.n	1dee6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1deee:	46c0      	nop			; (mov r8, r8)
   1def0:	46bd      	mov	sp, r7
   1def2:	b002      	add	sp, #8
   1def4:	bd80      	pop	{r7, pc}
   1def6:	46c0      	nop			; (mov r8, r8)
   1def8:	40001800 	.word	0x40001800
   1defc:	0001dd75 	.word	0x0001dd75

0001df00 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1df00:	b580      	push	{r7, lr}
   1df02:	b082      	sub	sp, #8
   1df04:	af00      	add	r7, sp, #0
   1df06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1df08:	687b      	ldr	r3, [r7, #4]
   1df0a:	2200      	movs	r2, #0
   1df0c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1df0e:	687b      	ldr	r3, [r7, #4]
   1df10:	2200      	movs	r2, #0
   1df12:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1df14:	687b      	ldr	r3, [r7, #4]
   1df16:	2201      	movs	r2, #1
   1df18:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1df1a:	687b      	ldr	r3, [r7, #4]
   1df1c:	2201      	movs	r2, #1
   1df1e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1df20:	687b      	ldr	r3, [r7, #4]
   1df22:	2200      	movs	r2, #0
   1df24:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1df26:	687b      	ldr	r3, [r7, #4]
   1df28:	2202      	movs	r2, #2
   1df2a:	72da      	strb	r2, [r3, #11]
}
   1df2c:	46c0      	nop			; (mov r8, r8)
   1df2e:	46bd      	mov	sp, r7
   1df30:	b002      	add	sp, #8
   1df32:	bd80      	pop	{r7, pc}

0001df34 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1df34:	b580      	push	{r7, lr}
   1df36:	b086      	sub	sp, #24
   1df38:	af00      	add	r7, sp, #0
   1df3a:	0002      	movs	r2, r0
   1df3c:	6039      	str	r1, [r7, #0]
   1df3e:	1dfb      	adds	r3, r7, #7
   1df40:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1df42:	2308      	movs	r3, #8
   1df44:	18fb      	adds	r3, r7, r3
   1df46:	0018      	movs	r0, r3
   1df48:	4b36      	ldr	r3, [pc, #216]	; (1e024 <extint_chan_set_config+0xf0>)
   1df4a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1df4c:	683b      	ldr	r3, [r7, #0]
   1df4e:	685b      	ldr	r3, [r3, #4]
   1df50:	b2da      	uxtb	r2, r3
   1df52:	2308      	movs	r3, #8
   1df54:	18fb      	adds	r3, r7, r3
   1df56:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1df58:	2308      	movs	r3, #8
   1df5a:	18fb      	adds	r3, r7, r3
   1df5c:	2200      	movs	r2, #0
   1df5e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1df60:	683b      	ldr	r3, [r7, #0]
   1df62:	7a1a      	ldrb	r2, [r3, #8]
   1df64:	2308      	movs	r3, #8
   1df66:	18fb      	adds	r3, r7, r3
   1df68:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1df6a:	683b      	ldr	r3, [r7, #0]
   1df6c:	681b      	ldr	r3, [r3, #0]
   1df6e:	b2db      	uxtb	r3, r3
   1df70:	2208      	movs	r2, #8
   1df72:	18ba      	adds	r2, r7, r2
   1df74:	0011      	movs	r1, r2
   1df76:	0018      	movs	r0, r3
   1df78:	4b2b      	ldr	r3, [pc, #172]	; (1e028 <extint_chan_set_config+0xf4>)
   1df7a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1df7c:	1dfb      	adds	r3, r7, #7
   1df7e:	781b      	ldrb	r3, [r3, #0]
   1df80:	0018      	movs	r0, r3
   1df82:	4b2a      	ldr	r3, [pc, #168]	; (1e02c <extint_chan_set_config+0xf8>)
   1df84:	4798      	blx	r3
   1df86:	0003      	movs	r3, r0
   1df88:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1df8a:	1dfb      	adds	r3, r7, #7
   1df8c:	781b      	ldrb	r3, [r3, #0]
   1df8e:	2207      	movs	r2, #7
   1df90:	4013      	ands	r3, r2
   1df92:	009b      	lsls	r3, r3, #2
   1df94:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1df96:	683b      	ldr	r3, [r7, #0]
   1df98:	7adb      	ldrb	r3, [r3, #11]
   1df9a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1df9c:	683b      	ldr	r3, [r7, #0]
   1df9e:	7a9b      	ldrb	r3, [r3, #10]
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	d003      	beq.n	1dfac <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1dfa4:	697b      	ldr	r3, [r7, #20]
   1dfa6:	2208      	movs	r2, #8
   1dfa8:	4313      	orrs	r3, r2
   1dfaa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1dfac:	1dfb      	adds	r3, r7, #7
   1dfae:	781b      	ldrb	r3, [r3, #0]
   1dfb0:	08db      	lsrs	r3, r3, #3
   1dfb2:	b2db      	uxtb	r3, r3
   1dfb4:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1dfb6:	1dfb      	adds	r3, r7, #7
   1dfb8:	781b      	ldrb	r3, [r3, #0]
   1dfba:	08db      	lsrs	r3, r3, #3
   1dfbc:	b2db      	uxtb	r3, r3
   1dfbe:	001a      	movs	r2, r3
   1dfc0:	693b      	ldr	r3, [r7, #16]
   1dfc2:	3206      	adds	r2, #6
   1dfc4:	0092      	lsls	r2, r2, #2
   1dfc6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1dfc8:	210f      	movs	r1, #15
   1dfca:	68fa      	ldr	r2, [r7, #12]
   1dfcc:	4091      	lsls	r1, r2
   1dfce:	000a      	movs	r2, r1
   1dfd0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1dfd2:	401a      	ands	r2, r3
			(new_config << config_pos);
   1dfd4:	6979      	ldr	r1, [r7, #20]
   1dfd6:	68fb      	ldr	r3, [r7, #12]
   1dfd8:	4099      	lsls	r1, r3
   1dfda:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1dfdc:	431a      	orrs	r2, r3
   1dfde:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1dfe0:	693b      	ldr	r3, [r7, #16]
   1dfe2:	1d82      	adds	r2, r0, #6
   1dfe4:	0092      	lsls	r2, r2, #2
   1dfe6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1dfe8:	683b      	ldr	r3, [r7, #0]
   1dfea:	7a5b      	ldrb	r3, [r3, #9]
   1dfec:	2b00      	cmp	r3, #0
   1dfee:	d00a      	beq.n	1e006 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1dff0:	693b      	ldr	r3, [r7, #16]
   1dff2:	695a      	ldr	r2, [r3, #20]
   1dff4:	1dfb      	adds	r3, r7, #7
   1dff6:	781b      	ldrb	r3, [r3, #0]
   1dff8:	2101      	movs	r1, #1
   1dffa:	4099      	lsls	r1, r3
   1dffc:	000b      	movs	r3, r1
   1dffe:	431a      	orrs	r2, r3
   1e000:	693b      	ldr	r3, [r7, #16]
   1e002:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1e004:	e00a      	b.n	1e01c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1e006:	693b      	ldr	r3, [r7, #16]
   1e008:	695b      	ldr	r3, [r3, #20]
   1e00a:	1dfa      	adds	r2, r7, #7
   1e00c:	7812      	ldrb	r2, [r2, #0]
   1e00e:	2101      	movs	r1, #1
   1e010:	4091      	lsls	r1, r2
   1e012:	000a      	movs	r2, r1
   1e014:	43d2      	mvns	r2, r2
   1e016:	401a      	ands	r2, r3
   1e018:	693b      	ldr	r3, [r7, #16]
   1e01a:	615a      	str	r2, [r3, #20]
}
   1e01c:	46c0      	nop			; (mov r8, r8)
   1e01e:	46bd      	mov	sp, r7
   1e020:	b006      	add	sp, #24
   1e022:	bd80      	pop	{r7, pc}
   1e024:	0001dcd5 	.word	0x0001dcd5
   1e028:	00024ca1 	.word	0x00024ca1
   1e02c:	0001dd29 	.word	0x0001dd29

0001e030 <system_gclk_chan_get_config_defaults>:
{
   1e030:	b580      	push	{r7, lr}
   1e032:	b082      	sub	sp, #8
   1e034:	af00      	add	r7, sp, #0
   1e036:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e038:	687b      	ldr	r3, [r7, #4]
   1e03a:	2200      	movs	r2, #0
   1e03c:	701a      	strb	r2, [r3, #0]
}
   1e03e:	46c0      	nop			; (mov r8, r8)
   1e040:	46bd      	mov	sp, r7
   1e042:	b002      	add	sp, #8
   1e044:	bd80      	pop	{r7, pc}
	...

0001e048 <system_apb_clock_set_mask>:
{
   1e048:	b580      	push	{r7, lr}
   1e04a:	b082      	sub	sp, #8
   1e04c:	af00      	add	r7, sp, #0
   1e04e:	0002      	movs	r2, r0
   1e050:	6039      	str	r1, [r7, #0]
   1e052:	1dfb      	adds	r3, r7, #7
   1e054:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e056:	1dfb      	adds	r3, r7, #7
   1e058:	781b      	ldrb	r3, [r3, #0]
   1e05a:	2b01      	cmp	r3, #1
   1e05c:	d00a      	beq.n	1e074 <system_apb_clock_set_mask+0x2c>
   1e05e:	2b02      	cmp	r3, #2
   1e060:	d00f      	beq.n	1e082 <system_apb_clock_set_mask+0x3a>
   1e062:	2b00      	cmp	r3, #0
   1e064:	d114      	bne.n	1e090 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e066:	4b0e      	ldr	r3, [pc, #56]	; (1e0a0 <system_apb_clock_set_mask+0x58>)
   1e068:	4a0d      	ldr	r2, [pc, #52]	; (1e0a0 <system_apb_clock_set_mask+0x58>)
   1e06a:	6991      	ldr	r1, [r2, #24]
   1e06c:	683a      	ldr	r2, [r7, #0]
   1e06e:	430a      	orrs	r2, r1
   1e070:	619a      	str	r2, [r3, #24]
			break;
   1e072:	e00f      	b.n	1e094 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e074:	4b0a      	ldr	r3, [pc, #40]	; (1e0a0 <system_apb_clock_set_mask+0x58>)
   1e076:	4a0a      	ldr	r2, [pc, #40]	; (1e0a0 <system_apb_clock_set_mask+0x58>)
   1e078:	69d1      	ldr	r1, [r2, #28]
   1e07a:	683a      	ldr	r2, [r7, #0]
   1e07c:	430a      	orrs	r2, r1
   1e07e:	61da      	str	r2, [r3, #28]
			break;
   1e080:	e008      	b.n	1e094 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e082:	4b07      	ldr	r3, [pc, #28]	; (1e0a0 <system_apb_clock_set_mask+0x58>)
   1e084:	4a06      	ldr	r2, [pc, #24]	; (1e0a0 <system_apb_clock_set_mask+0x58>)
   1e086:	6a11      	ldr	r1, [r2, #32]
   1e088:	683a      	ldr	r2, [r7, #0]
   1e08a:	430a      	orrs	r2, r1
   1e08c:	621a      	str	r2, [r3, #32]
			break;
   1e08e:	e001      	b.n	1e094 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e090:	2317      	movs	r3, #23
   1e092:	e000      	b.n	1e096 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e094:	2300      	movs	r3, #0
}
   1e096:	0018      	movs	r0, r3
   1e098:	46bd      	mov	sp, r7
   1e09a:	b002      	add	sp, #8
   1e09c:	bd80      	pop	{r7, pc}
   1e09e:	46c0      	nop			; (mov r8, r8)
   1e0a0:	40000400 	.word	0x40000400

0001e0a4 <system_interrupt_enable>:
{
   1e0a4:	b580      	push	{r7, lr}
   1e0a6:	b082      	sub	sp, #8
   1e0a8:	af00      	add	r7, sp, #0
   1e0aa:	0002      	movs	r2, r0
   1e0ac:	1dfb      	adds	r3, r7, #7
   1e0ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e0b0:	4b06      	ldr	r3, [pc, #24]	; (1e0cc <system_interrupt_enable+0x28>)
   1e0b2:	1dfa      	adds	r2, r7, #7
   1e0b4:	7812      	ldrb	r2, [r2, #0]
   1e0b6:	0011      	movs	r1, r2
   1e0b8:	221f      	movs	r2, #31
   1e0ba:	400a      	ands	r2, r1
   1e0bc:	2101      	movs	r1, #1
   1e0be:	4091      	lsls	r1, r2
   1e0c0:	000a      	movs	r2, r1
   1e0c2:	601a      	str	r2, [r3, #0]
}
   1e0c4:	46c0      	nop			; (mov r8, r8)
   1e0c6:	46bd      	mov	sp, r7
   1e0c8:	b002      	add	sp, #8
   1e0ca:	bd80      	pop	{r7, pc}
   1e0cc:	e000e100 	.word	0xe000e100

0001e0d0 <system_interrupt_disable>:
{
   1e0d0:	b580      	push	{r7, lr}
   1e0d2:	b082      	sub	sp, #8
   1e0d4:	af00      	add	r7, sp, #0
   1e0d6:	0002      	movs	r2, r0
   1e0d8:	1dfb      	adds	r3, r7, #7
   1e0da:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e0dc:	4a07      	ldr	r2, [pc, #28]	; (1e0fc <system_interrupt_disable+0x2c>)
   1e0de:	1dfb      	adds	r3, r7, #7
   1e0e0:	781b      	ldrb	r3, [r3, #0]
   1e0e2:	0019      	movs	r1, r3
   1e0e4:	231f      	movs	r3, #31
   1e0e6:	400b      	ands	r3, r1
   1e0e8:	2101      	movs	r1, #1
   1e0ea:	4099      	lsls	r1, r3
   1e0ec:	000b      	movs	r3, r1
   1e0ee:	0019      	movs	r1, r3
   1e0f0:	2380      	movs	r3, #128	; 0x80
   1e0f2:	50d1      	str	r1, [r2, r3]
}
   1e0f4:	46c0      	nop			; (mov r8, r8)
   1e0f6:	46bd      	mov	sp, r7
   1e0f8:	b002      	add	sp, #8
   1e0fa:	bd80      	pop	{r7, pc}
   1e0fc:	e000e100 	.word	0xe000e100

0001e100 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
   1e100:	b580      	push	{r7, lr}
   1e102:	b084      	sub	sp, #16
   1e104:	af00      	add	r7, sp, #0
   1e106:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e108:	687b      	ldr	r3, [r7, #4]
   1e10a:	681b      	ldr	r3, [r3, #0]
   1e10c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1e10e:	68fb      	ldr	r3, [r7, #12]
   1e110:	7a9b      	ldrb	r3, [r3, #10]
   1e112:	b2db      	uxtb	r3, r3
   1e114:	b25b      	sxtb	r3, r3
   1e116:	2b00      	cmp	r3, #0
   1e118:	da01      	bge.n	1e11e <rtc_count_is_syncing+0x1e>
                return true;
   1e11a:	2301      	movs	r3, #1
   1e11c:	e000      	b.n	1e120 <rtc_count_is_syncing+0x20>
        }

        return false;
   1e11e:	2300      	movs	r3, #0
}
   1e120:	0018      	movs	r0, r3
   1e122:	46bd      	mov	sp, r7
   1e124:	b004      	add	sp, #16
   1e126:	bd80      	pop	{r7, pc}

0001e128 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
   1e128:	b580      	push	{r7, lr}
   1e12a:	b084      	sub	sp, #16
   1e12c:	af00      	add	r7, sp, #0
   1e12e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e130:	687b      	ldr	r3, [r7, #4]
   1e132:	681b      	ldr	r3, [r3, #0]
   1e134:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e136:	2003      	movs	r0, #3
   1e138:	4b0a      	ldr	r3, [pc, #40]	; (1e164 <rtc_count_enable+0x3c>)
   1e13a:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e13c:	46c0      	nop			; (mov r8, r8)
   1e13e:	687b      	ldr	r3, [r7, #4]
   1e140:	0018      	movs	r0, r3
   1e142:	4b09      	ldr	r3, [pc, #36]	; (1e168 <rtc_count_enable+0x40>)
   1e144:	4798      	blx	r3
   1e146:	1e03      	subs	r3, r0, #0
   1e148:	d1f9      	bne.n	1e13e <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
   1e14a:	68fb      	ldr	r3, [r7, #12]
   1e14c:	881b      	ldrh	r3, [r3, #0]
   1e14e:	b29b      	uxth	r3, r3
   1e150:	2202      	movs	r2, #2
   1e152:	4313      	orrs	r3, r2
   1e154:	b29a      	uxth	r2, r3
   1e156:	68fb      	ldr	r3, [r7, #12]
   1e158:	801a      	strh	r2, [r3, #0]
}
   1e15a:	46c0      	nop			; (mov r8, r8)
   1e15c:	46bd      	mov	sp, r7
   1e15e:	b004      	add	sp, #16
   1e160:	bd80      	pop	{r7, pc}
   1e162:	46c0      	nop			; (mov r8, r8)
   1e164:	0001e0a5 	.word	0x0001e0a5
   1e168:	0001e101 	.word	0x0001e101

0001e16c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
   1e16c:	b580      	push	{r7, lr}
   1e16e:	b084      	sub	sp, #16
   1e170:	af00      	add	r7, sp, #0
   1e172:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e174:	687b      	ldr	r3, [r7, #4]
   1e176:	681b      	ldr	r3, [r3, #0]
   1e178:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e17a:	2003      	movs	r0, #3
   1e17c:	4b0d      	ldr	r3, [pc, #52]	; (1e1b4 <rtc_count_disable+0x48>)
   1e17e:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e180:	46c0      	nop			; (mov r8, r8)
   1e182:	687b      	ldr	r3, [r7, #4]
   1e184:	0018      	movs	r0, r3
   1e186:	4b0c      	ldr	r3, [pc, #48]	; (1e1b8 <rtc_count_disable+0x4c>)
   1e188:	4798      	blx	r3
   1e18a:	1e03      	subs	r3, r0, #0
   1e18c:	d1f9      	bne.n	1e182 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
   1e18e:	68fb      	ldr	r3, [r7, #12]
   1e190:	22c1      	movs	r2, #193	; 0xc1
   1e192:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
   1e194:	68fb      	ldr	r3, [r7, #12]
   1e196:	22c1      	movs	r2, #193	; 0xc1
   1e198:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
   1e19a:	68fb      	ldr	r3, [r7, #12]
   1e19c:	881b      	ldrh	r3, [r3, #0]
   1e19e:	b29b      	uxth	r3, r3
   1e1a0:	2202      	movs	r2, #2
   1e1a2:	4393      	bics	r3, r2
   1e1a4:	b29a      	uxth	r2, r3
   1e1a6:	68fb      	ldr	r3, [r7, #12]
   1e1a8:	801a      	strh	r2, [r3, #0]
}
   1e1aa:	46c0      	nop			; (mov r8, r8)
   1e1ac:	46bd      	mov	sp, r7
   1e1ae:	b004      	add	sp, #16
   1e1b0:	bd80      	pop	{r7, pc}
   1e1b2:	46c0      	nop			; (mov r8, r8)
   1e1b4:	0001e0d1 	.word	0x0001e0d1
   1e1b8:	0001e101 	.word	0x0001e101

0001e1bc <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
   1e1bc:	b580      	push	{r7, lr}
   1e1be:	b084      	sub	sp, #16
   1e1c0:	af00      	add	r7, sp, #0
   1e1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e1c4:	687b      	ldr	r3, [r7, #4]
   1e1c6:	681b      	ldr	r3, [r3, #0]
   1e1c8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
   1e1ca:	687b      	ldr	r3, [r7, #4]
   1e1cc:	0018      	movs	r0, r3
   1e1ce:	4b0d      	ldr	r3, [pc, #52]	; (1e204 <rtc_count_reset+0x48>)
   1e1d0:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
   1e1d2:	687b      	ldr	r3, [r7, #4]
   1e1d4:	2200      	movs	r2, #0
   1e1d6:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
   1e1d8:	687b      	ldr	r3, [r7, #4]
   1e1da:	2200      	movs	r2, #0
   1e1dc:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
   1e1de:	46c0      	nop			; (mov r8, r8)
   1e1e0:	687b      	ldr	r3, [r7, #4]
   1e1e2:	0018      	movs	r0, r3
   1e1e4:	4b08      	ldr	r3, [pc, #32]	; (1e208 <rtc_count_reset+0x4c>)
   1e1e6:	4798      	blx	r3
   1e1e8:	1e03      	subs	r3, r0, #0
   1e1ea:	d1f9      	bne.n	1e1e0 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
   1e1ec:	68fb      	ldr	r3, [r7, #12]
   1e1ee:	881b      	ldrh	r3, [r3, #0]
   1e1f0:	b29b      	uxth	r3, r3
   1e1f2:	2201      	movs	r2, #1
   1e1f4:	4313      	orrs	r3, r2
   1e1f6:	b29a      	uxth	r2, r3
   1e1f8:	68fb      	ldr	r3, [r7, #12]
   1e1fa:	801a      	strh	r2, [r3, #0]
}
   1e1fc:	46c0      	nop			; (mov r8, r8)
   1e1fe:	46bd      	mov	sp, r7
   1e200:	b004      	add	sp, #16
   1e202:	bd80      	pop	{r7, pc}
   1e204:	0001e16d 	.word	0x0001e16d
   1e208:	0001e101 	.word	0x0001e101

0001e20c <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
   1e20c:	b580      	push	{r7, lr}
   1e20e:	b084      	sub	sp, #16
   1e210:	af00      	add	r7, sp, #0
   1e212:	6078      	str	r0, [r7, #4]
   1e214:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e216:	687b      	ldr	r3, [r7, #4]
   1e218:	681b      	ldr	r3, [r3, #0]
   1e21a:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
   1e21c:	683b      	ldr	r3, [r7, #0]
   1e21e:	881a      	ldrh	r2, [r3, #0]
   1e220:	68bb      	ldr	r3, [r7, #8]
   1e222:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
   1e224:	683b      	ldr	r3, [r7, #0]
   1e226:	789b      	ldrb	r3, [r3, #2]
   1e228:	2b00      	cmp	r3, #0
   1e22a:	d03a      	beq.n	1e2a2 <_rtc_count_set_config+0x96>
   1e22c:	2b01      	cmp	r3, #1
   1e22e:	d000      	beq.n	1e232 <_rtc_count_set_config+0x26>
   1e230:	e06c      	b.n	1e30c <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
   1e232:	68bb      	ldr	r3, [r7, #8]
   1e234:	881b      	ldrh	r3, [r3, #0]
   1e236:	b29a      	uxth	r2, r3
   1e238:	68bb      	ldr	r3, [r7, #8]
   1e23a:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
   1e23c:	683b      	ldr	r3, [r7, #0]
   1e23e:	78db      	ldrb	r3, [r3, #3]
   1e240:	2b00      	cmp	r3, #0
   1e242:	d007      	beq.n	1e254 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
   1e244:	68bb      	ldr	r3, [r7, #8]
   1e246:	881b      	ldrh	r3, [r3, #0]
   1e248:	b29b      	uxth	r3, r3
   1e24a:	2280      	movs	r2, #128	; 0x80
   1e24c:	4313      	orrs	r3, r2
   1e24e:	b29a      	uxth	r2, r3
   1e250:	68bb      	ldr	r3, [r7, #8]
   1e252:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e254:	230f      	movs	r3, #15
   1e256:	18fb      	adds	r3, r7, r3
   1e258:	2200      	movs	r2, #0
   1e25a:	701a      	strb	r2, [r3, #0]
   1e25c:	e01b      	b.n	1e296 <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
   1e25e:	46c0      	nop			; (mov r8, r8)
   1e260:	687b      	ldr	r3, [r7, #4]
   1e262:	0018      	movs	r0, r3
   1e264:	4b37      	ldr	r3, [pc, #220]	; (1e344 <_rtc_count_set_config+0x138>)
   1e266:	4798      	blx	r3
   1e268:	1e03      	subs	r3, r0, #0
   1e26a:	d1f9      	bne.n	1e260 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e26c:	230f      	movs	r3, #15
   1e26e:	18fb      	adds	r3, r7, r3
   1e270:	781a      	ldrb	r2, [r3, #0]
   1e272:	683b      	ldr	r3, [r7, #0]
   1e274:	3202      	adds	r2, #2
   1e276:	0092      	lsls	r2, r2, #2
   1e278:	58d1      	ldr	r1, [r2, r3]
   1e27a:	230f      	movs	r3, #15
   1e27c:	18fb      	adds	r3, r7, r3
   1e27e:	781a      	ldrb	r2, [r3, #0]
   1e280:	687b      	ldr	r3, [r7, #4]
   1e282:	0018      	movs	r0, r3
   1e284:	4b30      	ldr	r3, [pc, #192]	; (1e348 <_rtc_count_set_config+0x13c>)
   1e286:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e288:	230f      	movs	r3, #15
   1e28a:	18fb      	adds	r3, r7, r3
   1e28c:	781a      	ldrb	r2, [r3, #0]
   1e28e:	230f      	movs	r3, #15
   1e290:	18fb      	adds	r3, r7, r3
   1e292:	3201      	adds	r2, #1
   1e294:	701a      	strb	r2, [r3, #0]
   1e296:	230f      	movs	r3, #15
   1e298:	18fb      	adds	r3, r7, r3
   1e29a:	781b      	ldrb	r3, [r3, #0]
   1e29c:	2b00      	cmp	r3, #0
   1e29e:	d0de      	beq.n	1e25e <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
   1e2a0:	e036      	b.n	1e310 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
   1e2a2:	68bb      	ldr	r3, [r7, #8]
   1e2a4:	881b      	ldrh	r3, [r3, #0]
   1e2a6:	b29b      	uxth	r3, r3
   1e2a8:	2204      	movs	r2, #4
   1e2aa:	4313      	orrs	r3, r2
   1e2ac:	b29a      	uxth	r2, r3
   1e2ae:	68bb      	ldr	r3, [r7, #8]
   1e2b0:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
   1e2b2:	683b      	ldr	r3, [r7, #0]
   1e2b4:	78db      	ldrb	r3, [r3, #3]
   1e2b6:	2b00      	cmp	r3, #0
   1e2b8:	d001      	beq.n	1e2be <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e2ba:	2317      	movs	r3, #23
   1e2bc:	e03e      	b.n	1e33c <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1e2be:	230e      	movs	r3, #14
   1e2c0:	18fb      	adds	r3, r7, r3
   1e2c2:	2200      	movs	r2, #0
   1e2c4:	701a      	strb	r2, [r3, #0]
   1e2c6:	e01b      	b.n	1e300 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
   1e2c8:	46c0      	nop			; (mov r8, r8)
   1e2ca:	687b      	ldr	r3, [r7, #4]
   1e2cc:	0018      	movs	r0, r3
   1e2ce:	4b1d      	ldr	r3, [pc, #116]	; (1e344 <_rtc_count_set_config+0x138>)
   1e2d0:	4798      	blx	r3
   1e2d2:	1e03      	subs	r3, r0, #0
   1e2d4:	d1f9      	bne.n	1e2ca <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e2d6:	230e      	movs	r3, #14
   1e2d8:	18fb      	adds	r3, r7, r3
   1e2da:	781a      	ldrb	r2, [r3, #0]
   1e2dc:	683b      	ldr	r3, [r7, #0]
   1e2de:	3202      	adds	r2, #2
   1e2e0:	0092      	lsls	r2, r2, #2
   1e2e2:	58d1      	ldr	r1, [r2, r3]
   1e2e4:	230e      	movs	r3, #14
   1e2e6:	18fb      	adds	r3, r7, r3
   1e2e8:	781a      	ldrb	r2, [r3, #0]
   1e2ea:	687b      	ldr	r3, [r7, #4]
   1e2ec:	0018      	movs	r0, r3
   1e2ee:	4b16      	ldr	r3, [pc, #88]	; (1e348 <_rtc_count_set_config+0x13c>)
   1e2f0:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1e2f2:	230e      	movs	r3, #14
   1e2f4:	18fb      	adds	r3, r7, r3
   1e2f6:	781a      	ldrb	r2, [r3, #0]
   1e2f8:	230e      	movs	r3, #14
   1e2fa:	18fb      	adds	r3, r7, r3
   1e2fc:	3201      	adds	r2, #1
   1e2fe:	701a      	strb	r2, [r3, #0]
   1e300:	230e      	movs	r3, #14
   1e302:	18fb      	adds	r3, r7, r3
   1e304:	781b      	ldrb	r3, [r3, #0]
   1e306:	2b01      	cmp	r3, #1
   1e308:	d9de      	bls.n	1e2c8 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
   1e30a:	e001      	b.n	1e310 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1e30c:	2317      	movs	r3, #23
   1e30e:	e015      	b.n	1e33c <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1e310:	683b      	ldr	r3, [r7, #0]
   1e312:	791b      	ldrb	r3, [r3, #4]
   1e314:	2b00      	cmp	r3, #0
   1e316:	d010      	beq.n	1e33a <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
   1e318:	68bb      	ldr	r3, [r7, #8]
   1e31a:	885b      	ldrh	r3, [r3, #2]
   1e31c:	b29b      	uxth	r3, r3
   1e31e:	2280      	movs	r2, #128	; 0x80
   1e320:	01d2      	lsls	r2, r2, #7
   1e322:	4313      	orrs	r3, r2
   1e324:	b29a      	uxth	r2, r3
   1e326:	68bb      	ldr	r3, [r7, #8]
   1e328:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
   1e32a:	68bb      	ldr	r3, [r7, #8]
   1e32c:	885b      	ldrh	r3, [r3, #2]
   1e32e:	b29b      	uxth	r3, r3
   1e330:	4a06      	ldr	r2, [pc, #24]	; (1e34c <_rtc_count_set_config+0x140>)
   1e332:	4313      	orrs	r3, r2
   1e334:	b29a      	uxth	r2, r3
   1e336:	68bb      	ldr	r3, [r7, #8]
   1e338:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
   1e33a:	2300      	movs	r3, #0
}
   1e33c:	0018      	movs	r0, r3
   1e33e:	46bd      	mov	sp, r7
   1e340:	b004      	add	sp, #16
   1e342:	bd80      	pop	{r7, pc}
   1e344:	0001e101 	.word	0x0001e101
   1e348:	0001e3e1 	.word	0x0001e3e1
   1e34c:	ffff8000 	.word	0xffff8000

0001e350 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
   1e350:	b580      	push	{r7, lr}
   1e352:	b086      	sub	sp, #24
   1e354:	af00      	add	r7, sp, #0
   1e356:	60f8      	str	r0, [r7, #12]
   1e358:	60b9      	str	r1, [r7, #8]
   1e35a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1e35c:	68fb      	ldr	r3, [r7, #12]
   1e35e:	68ba      	ldr	r2, [r7, #8]
   1e360:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1e362:	2120      	movs	r1, #32
   1e364:	2000      	movs	r0, #0
   1e366:	4b17      	ldr	r3, [pc, #92]	; (1e3c4 <rtc_count_init+0x74>)
   1e368:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e36a:	2314      	movs	r3, #20
   1e36c:	18fb      	adds	r3, r7, r3
   1e36e:	0018      	movs	r0, r3
   1e370:	4b15      	ldr	r3, [pc, #84]	; (1e3c8 <rtc_count_init+0x78>)
   1e372:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1e374:	2314      	movs	r3, #20
   1e376:	18fb      	adds	r3, r7, r3
   1e378:	2202      	movs	r2, #2
   1e37a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1e37c:	2314      	movs	r3, #20
   1e37e:	18fb      	adds	r3, r7, r3
   1e380:	0019      	movs	r1, r3
   1e382:	2004      	movs	r0, #4
   1e384:	4b11      	ldr	r3, [pc, #68]	; (1e3cc <rtc_count_init+0x7c>)
   1e386:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1e388:	2004      	movs	r0, #4
   1e38a:	4b11      	ldr	r3, [pc, #68]	; (1e3d0 <rtc_count_init+0x80>)
   1e38c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
   1e38e:	68fb      	ldr	r3, [r7, #12]
   1e390:	0018      	movs	r0, r3
   1e392:	4b10      	ldr	r3, [pc, #64]	; (1e3d4 <rtc_count_init+0x84>)
   1e394:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
   1e396:	687b      	ldr	r3, [r7, #4]
   1e398:	789a      	ldrb	r2, [r3, #2]
   1e39a:	68fb      	ldr	r3, [r7, #12]
   1e39c:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   1e39e:	687b      	ldr	r3, [r7, #4]
   1e3a0:	791a      	ldrb	r2, [r3, #4]
   1e3a2:	68fb      	ldr	r3, [r7, #12]
   1e3a4:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   1e3a6:	4b0c      	ldr	r3, [pc, #48]	; (1e3d8 <rtc_count_init+0x88>)
   1e3a8:	68fa      	ldr	r2, [r7, #12]
   1e3aa:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
   1e3ac:	687a      	ldr	r2, [r7, #4]
   1e3ae:	68fb      	ldr	r3, [r7, #12]
   1e3b0:	0011      	movs	r1, r2
   1e3b2:	0018      	movs	r0, r3
   1e3b4:	4b09      	ldr	r3, [pc, #36]	; (1e3dc <rtc_count_init+0x8c>)
   1e3b6:	4798      	blx	r3
   1e3b8:	0003      	movs	r3, r0
}
   1e3ba:	0018      	movs	r0, r3
   1e3bc:	46bd      	mov	sp, r7
   1e3be:	b006      	add	sp, #24
   1e3c0:	bd80      	pop	{r7, pc}
   1e3c2:	46c0      	nop			; (mov r8, r8)
   1e3c4:	0001e049 	.word	0x0001e049
   1e3c8:	0001e031 	.word	0x0001e031
   1e3cc:	000249b5 	.word	0x000249b5
   1e3d0:	000249f9 	.word	0x000249f9
   1e3d4:	0001e1bd 	.word	0x0001e1bd
   1e3d8:	20000940 	.word	0x20000940
   1e3dc:	0001e20d 	.word	0x0001e20d

0001e3e0 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
   1e3e0:	b580      	push	{r7, lr}
   1e3e2:	b086      	sub	sp, #24
   1e3e4:	af00      	add	r7, sp, #0
   1e3e6:	60f8      	str	r0, [r7, #12]
   1e3e8:	60b9      	str	r1, [r7, #8]
   1e3ea:	1dfb      	adds	r3, r7, #7
   1e3ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e3ee:	68fb      	ldr	r3, [r7, #12]
   1e3f0:	681b      	ldr	r3, [r3, #0]
   1e3f2:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
   1e3f4:	46c0      	nop			; (mov r8, r8)
   1e3f6:	68fb      	ldr	r3, [r7, #12]
   1e3f8:	0018      	movs	r0, r3
   1e3fa:	4b1a      	ldr	r3, [pc, #104]	; (1e464 <rtc_count_set_compare+0x84>)
   1e3fc:	4798      	blx	r3
   1e3fe:	1e03      	subs	r3, r0, #0
   1e400:	d1f9      	bne.n	1e3f6 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
   1e402:	68fb      	ldr	r3, [r7, #12]
   1e404:	791b      	ldrb	r3, [r3, #4]
   1e406:	2b00      	cmp	r3, #0
   1e408:	d00f      	beq.n	1e42a <rtc_count_set_compare+0x4a>
   1e40a:	2b01      	cmp	r3, #1
   1e40c:	d122      	bne.n	1e454 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
   1e40e:	1dfb      	adds	r3, r7, #7
   1e410:	781b      	ldrb	r3, [r3, #0]
   1e412:	2b01      	cmp	r3, #1
   1e414:	d901      	bls.n	1e41a <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
   1e416:	2317      	movs	r3, #23
   1e418:	e01f      	b.n	1e45a <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
   1e41a:	1dfb      	adds	r3, r7, #7
   1e41c:	781a      	ldrb	r2, [r3, #0]
   1e41e:	697b      	ldr	r3, [r7, #20]
   1e420:	3206      	adds	r2, #6
   1e422:	0092      	lsls	r2, r2, #2
   1e424:	68b9      	ldr	r1, [r7, #8]
   1e426:	50d1      	str	r1, [r2, r3]

			break;
   1e428:	e016      	b.n	1e458 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
   1e42a:	1dfb      	adds	r3, r7, #7
   1e42c:	781b      	ldrb	r3, [r3, #0]
   1e42e:	2b02      	cmp	r3, #2
   1e430:	d901      	bls.n	1e436 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
   1e432:	2317      	movs	r3, #23
   1e434:	e011      	b.n	1e45a <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
   1e436:	68bb      	ldr	r3, [r7, #8]
   1e438:	4a0b      	ldr	r2, [pc, #44]	; (1e468 <rtc_count_set_compare+0x88>)
   1e43a:	4293      	cmp	r3, r2
   1e43c:	d901      	bls.n	1e442 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e43e:	2317      	movs	r3, #23
   1e440:	e00b      	b.n	1e45a <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
   1e442:	1dfb      	adds	r3, r7, #7
   1e444:	781a      	ldrb	r2, [r3, #0]
   1e446:	68bb      	ldr	r3, [r7, #8]
   1e448:	b299      	uxth	r1, r3
   1e44a:	697b      	ldr	r3, [r7, #20]
   1e44c:	320c      	adds	r2, #12
   1e44e:	0052      	lsls	r2, r2, #1
   1e450:	52d1      	strh	r1, [r2, r3]

			break;
   1e452:	e001      	b.n	1e458 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
   1e454:	231a      	movs	r3, #26
   1e456:	e000      	b.n	1e45a <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
   1e458:	2300      	movs	r3, #0
}
   1e45a:	0018      	movs	r0, r3
   1e45c:	46bd      	mov	sp, r7
   1e45e:	b006      	add	sp, #24
   1e460:	bd80      	pop	{r7, pc}
   1e462:	46c0      	nop			; (mov r8, r8)
   1e464:	0001e101 	.word	0x0001e101
   1e468:	0000ffff 	.word	0x0000ffff

0001e46c <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
   1e46c:	b580      	push	{r7, lr}
   1e46e:	b084      	sub	sp, #16
   1e470:	af00      	add	r7, sp, #0
   1e472:	6078      	str	r0, [r7, #4]
   1e474:	000a      	movs	r2, r1
   1e476:	1cbb      	adds	r3, r7, #2
   1e478:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e47a:	687b      	ldr	r3, [r7, #4]
   1e47c:	681b      	ldr	r3, [r3, #0]
   1e47e:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
   1e480:	687b      	ldr	r3, [r7, #4]
   1e482:	791b      	ldrb	r3, [r3, #4]
   1e484:	2b00      	cmp	r3, #0
   1e486:	d001      	beq.n	1e48c <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e488:	2315      	movs	r3, #21
   1e48a:	e00b      	b.n	1e4a4 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
   1e48c:	46c0      	nop			; (mov r8, r8)
   1e48e:	687b      	ldr	r3, [r7, #4]
   1e490:	0018      	movs	r0, r3
   1e492:	4b06      	ldr	r3, [pc, #24]	; (1e4ac <rtc_count_set_period+0x40>)
   1e494:	4798      	blx	r3
   1e496:	1e03      	subs	r3, r0, #0
   1e498:	d1f9      	bne.n	1e48e <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
   1e49a:	68fb      	ldr	r3, [r7, #12]
   1e49c:	1cba      	adds	r2, r7, #2
   1e49e:	8812      	ldrh	r2, [r2, #0]
   1e4a0:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
   1e4a2:	2300      	movs	r3, #0
}
   1e4a4:	0018      	movs	r0, r3
   1e4a6:	46bd      	mov	sp, r7
   1e4a8:	b004      	add	sp, #16
   1e4aa:	bd80      	pop	{r7, pc}
   1e4ac:	0001e101 	.word	0x0001e101

0001e4b0 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1e4b0:	b580      	push	{r7, lr}
   1e4b2:	b086      	sub	sp, #24
   1e4b4:	af00      	add	r7, sp, #0
   1e4b6:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1e4b8:	4b31      	ldr	r3, [pc, #196]	; (1e580 <_rtc_interrupt_handler+0xd0>)
   1e4ba:	687a      	ldr	r2, [r7, #4]
   1e4bc:	0092      	lsls	r2, r2, #2
   1e4be:	58d3      	ldr	r3, [r2, r3]
   1e4c0:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1e4c2:	697b      	ldr	r3, [r7, #20]
   1e4c4:	681b      	ldr	r3, [r3, #0]
   1e4c6:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1e4c8:	230e      	movs	r3, #14
   1e4ca:	18fb      	adds	r3, r7, r3
   1e4cc:	697a      	ldr	r2, [r7, #20]
   1e4ce:	8ad2      	ldrh	r2, [r2, #22]
   1e4d0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1e4d2:	697b      	ldr	r3, [r7, #20]
   1e4d4:	8a9b      	ldrh	r3, [r3, #20]
   1e4d6:	b29a      	uxth	r2, r3
   1e4d8:	230e      	movs	r3, #14
   1e4da:	18fb      	adds	r3, r7, r3
   1e4dc:	210e      	movs	r1, #14
   1e4de:	1879      	adds	r1, r7, r1
   1e4e0:	8809      	ldrh	r1, [r1, #0]
   1e4e2:	400a      	ands	r2, r1
   1e4e4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1e4e6:	693b      	ldr	r3, [r7, #16]
   1e4e8:	7a1b      	ldrb	r3, [r3, #8]
   1e4ea:	b2da      	uxtb	r2, r3
   1e4ec:	230c      	movs	r3, #12
   1e4ee:	18fb      	adds	r3, r7, r3
   1e4f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1e4f2:	693b      	ldr	r3, [r7, #16]
   1e4f4:	79db      	ldrb	r3, [r3, #7]
   1e4f6:	b2db      	uxtb	r3, r3
   1e4f8:	b29a      	uxth	r2, r3
   1e4fa:	230c      	movs	r3, #12
   1e4fc:	18fb      	adds	r3, r7, r3
   1e4fe:	210c      	movs	r1, #12
   1e500:	1879      	adds	r1, r7, r1
   1e502:	8809      	ldrh	r1, [r1, #0]
   1e504:	400a      	ands	r2, r1
   1e506:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1e508:	230c      	movs	r3, #12
   1e50a:	18fb      	adds	r3, r7, r3
   1e50c:	881b      	ldrh	r3, [r3, #0]
   1e50e:	2280      	movs	r2, #128	; 0x80
   1e510:	4013      	ands	r3, r2
   1e512:	d00c      	beq.n	1e52e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1e514:	230e      	movs	r3, #14
   1e516:	18fb      	adds	r3, r7, r3
   1e518:	881b      	ldrh	r3, [r3, #0]
   1e51a:	2204      	movs	r2, #4
   1e51c:	4013      	ands	r3, r2
   1e51e:	d002      	beq.n	1e526 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1e520:	697b      	ldr	r3, [r7, #20]
   1e522:	691b      	ldr	r3, [r3, #16]
   1e524:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1e526:	693b      	ldr	r3, [r7, #16]
   1e528:	2280      	movs	r2, #128	; 0x80
   1e52a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1e52c:	e024      	b.n	1e578 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1e52e:	230c      	movs	r3, #12
   1e530:	18fb      	adds	r3, r7, r3
   1e532:	881b      	ldrh	r3, [r3, #0]
   1e534:	2201      	movs	r2, #1
   1e536:	4013      	ands	r3, r2
   1e538:	d00c      	beq.n	1e554 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1e53a:	230e      	movs	r3, #14
   1e53c:	18fb      	adds	r3, r7, r3
   1e53e:	881b      	ldrh	r3, [r3, #0]
   1e540:	2201      	movs	r2, #1
   1e542:	4013      	ands	r3, r2
   1e544:	d002      	beq.n	1e54c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1e546:	697b      	ldr	r3, [r7, #20]
   1e548:	689b      	ldr	r3, [r3, #8]
   1e54a:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1e54c:	693b      	ldr	r3, [r7, #16]
   1e54e:	2201      	movs	r2, #1
   1e550:	721a      	strb	r2, [r3, #8]
}
   1e552:	e011      	b.n	1e578 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1e554:	230c      	movs	r3, #12
   1e556:	18fb      	adds	r3, r7, r3
   1e558:	881b      	ldrh	r3, [r3, #0]
   1e55a:	2202      	movs	r2, #2
   1e55c:	4013      	ands	r3, r2
   1e55e:	d00b      	beq.n	1e578 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1e560:	230e      	movs	r3, #14
   1e562:	18fb      	adds	r3, r7, r3
   1e564:	881b      	ldrh	r3, [r3, #0]
   1e566:	2202      	movs	r2, #2
   1e568:	4013      	ands	r3, r2
   1e56a:	d002      	beq.n	1e572 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1e56c:	697b      	ldr	r3, [r7, #20]
   1e56e:	68db      	ldr	r3, [r3, #12]
   1e570:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1e572:	693b      	ldr	r3, [r7, #16]
   1e574:	2202      	movs	r2, #2
   1e576:	721a      	strb	r2, [r3, #8]
}
   1e578:	46c0      	nop			; (mov r8, r8)
   1e57a:	46bd      	mov	sp, r7
   1e57c:	b006      	add	sp, #24
   1e57e:	bd80      	pop	{r7, pc}
   1e580:	20000940 	.word	0x20000940

0001e584 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1e584:	b580      	push	{r7, lr}
   1e586:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1e588:	2000      	movs	r0, #0
   1e58a:	4b02      	ldr	r3, [pc, #8]	; (1e594 <RTC_Handler+0x10>)
   1e58c:	4798      	blx	r3
}
   1e58e:	46c0      	nop			; (mov r8, r8)
   1e590:	46bd      	mov	sp, r7
   1e592:	bd80      	pop	{r7, pc}
   1e594:	0001e4b1 	.word	0x0001e4b1

0001e598 <system_gclk_chan_get_config_defaults>:
{
   1e598:	b580      	push	{r7, lr}
   1e59a:	b082      	sub	sp, #8
   1e59c:	af00      	add	r7, sp, #0
   1e59e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e5a0:	687b      	ldr	r3, [r7, #4]
   1e5a2:	2200      	movs	r2, #0
   1e5a4:	701a      	strb	r2, [r3, #0]
}
   1e5a6:	46c0      	nop			; (mov r8, r8)
   1e5a8:	46bd      	mov	sp, r7
   1e5aa:	b002      	add	sp, #8
   1e5ac:	bd80      	pop	{r7, pc}

0001e5ae <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1e5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5b0:	b08d      	sub	sp, #52	; 0x34
   1e5b2:	af00      	add	r7, sp, #0
   1e5b4:	60b8      	str	r0, [r7, #8]
   1e5b6:	60f9      	str	r1, [r7, #12]
   1e5b8:	603a      	str	r2, [r7, #0]
   1e5ba:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1e5bc:	2300      	movs	r3, #0
   1e5be:	2400      	movs	r4, #0
   1e5c0:	623b      	str	r3, [r7, #32]
   1e5c2:	627c      	str	r4, [r7, #36]	; 0x24
   1e5c4:	2300      	movs	r3, #0
   1e5c6:	2400      	movs	r4, #0
   1e5c8:	61bb      	str	r3, [r7, #24]
   1e5ca:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1e5cc:	233f      	movs	r3, #63	; 0x3f
   1e5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e5d0:	e053      	b.n	1e67a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1e5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e5d4:	3b20      	subs	r3, #32
   1e5d6:	2b00      	cmp	r3, #0
   1e5d8:	db04      	blt.n	1e5e4 <long_division+0x36>
   1e5da:	2201      	movs	r2, #1
   1e5dc:	409a      	lsls	r2, r3
   1e5de:	0013      	movs	r3, r2
   1e5e0:	617b      	str	r3, [r7, #20]
   1e5e2:	e00b      	b.n	1e5fc <long_division+0x4e>
   1e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e5e6:	2220      	movs	r2, #32
   1e5e8:	1ad3      	subs	r3, r2, r3
   1e5ea:	2201      	movs	r2, #1
   1e5ec:	40da      	lsrs	r2, r3
   1e5ee:	0013      	movs	r3, r2
   1e5f0:	2100      	movs	r1, #0
   1e5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e5f4:	4091      	lsls	r1, r2
   1e5f6:	000a      	movs	r2, r1
   1e5f8:	4313      	orrs	r3, r2
   1e5fa:	617b      	str	r3, [r7, #20]
   1e5fc:	2201      	movs	r2, #1
   1e5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e600:	409a      	lsls	r2, r3
   1e602:	0013      	movs	r3, r2
   1e604:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1e606:	69bb      	ldr	r3, [r7, #24]
   1e608:	69fc      	ldr	r4, [r7, #28]
   1e60a:	18db      	adds	r3, r3, r3
   1e60c:	4164      	adcs	r4, r4
   1e60e:	61bb      	str	r3, [r7, #24]
   1e610:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1e612:	68bb      	ldr	r3, [r7, #8]
   1e614:	693a      	ldr	r2, [r7, #16]
   1e616:	401a      	ands	r2, r3
   1e618:	0015      	movs	r5, r2
   1e61a:	68fb      	ldr	r3, [r7, #12]
   1e61c:	697a      	ldr	r2, [r7, #20]
   1e61e:	401a      	ands	r2, r3
   1e620:	0016      	movs	r6, r2
   1e622:	002b      	movs	r3, r5
   1e624:	4333      	orrs	r3, r6
   1e626:	d007      	beq.n	1e638 <long_division+0x8a>
			r |= 0x01;
   1e628:	69bb      	ldr	r3, [r7, #24]
   1e62a:	2201      	movs	r2, #1
   1e62c:	4313      	orrs	r3, r2
   1e62e:	61bb      	str	r3, [r7, #24]
   1e630:	69fb      	ldr	r3, [r7, #28]
   1e632:	2200      	movs	r2, #0
   1e634:	4313      	orrs	r3, r2
   1e636:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1e638:	687a      	ldr	r2, [r7, #4]
   1e63a:	69fb      	ldr	r3, [r7, #28]
   1e63c:	429a      	cmp	r2, r3
   1e63e:	d819      	bhi.n	1e674 <long_division+0xc6>
   1e640:	687a      	ldr	r2, [r7, #4]
   1e642:	69fb      	ldr	r3, [r7, #28]
   1e644:	429a      	cmp	r2, r3
   1e646:	d103      	bne.n	1e650 <long_division+0xa2>
   1e648:	683a      	ldr	r2, [r7, #0]
   1e64a:	69bb      	ldr	r3, [r7, #24]
   1e64c:	429a      	cmp	r2, r3
   1e64e:	d811      	bhi.n	1e674 <long_division+0xc6>
			r = r - d;
   1e650:	69b9      	ldr	r1, [r7, #24]
   1e652:	69fa      	ldr	r2, [r7, #28]
   1e654:	683b      	ldr	r3, [r7, #0]
   1e656:	687c      	ldr	r4, [r7, #4]
   1e658:	1ac9      	subs	r1, r1, r3
   1e65a:	41a2      	sbcs	r2, r4
   1e65c:	000b      	movs	r3, r1
   1e65e:	0014      	movs	r4, r2
   1e660:	61bb      	str	r3, [r7, #24]
   1e662:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1e664:	6a3a      	ldr	r2, [r7, #32]
   1e666:	693b      	ldr	r3, [r7, #16]
   1e668:	4313      	orrs	r3, r2
   1e66a:	623b      	str	r3, [r7, #32]
   1e66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e66e:	697b      	ldr	r3, [r7, #20]
   1e670:	4313      	orrs	r3, r2
   1e672:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e676:	3b01      	subs	r3, #1
   1e678:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e67c:	2b00      	cmp	r3, #0
   1e67e:	daa8      	bge.n	1e5d2 <long_division+0x24>
		}
	}

	return q;
   1e680:	6a3b      	ldr	r3, [r7, #32]
   1e682:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1e684:	0018      	movs	r0, r3
   1e686:	0021      	movs	r1, r4
   1e688:	46bd      	mov	sp, r7
   1e68a:	b00d      	add	sp, #52	; 0x34
   1e68c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e68e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1e68e:	b580      	push	{r7, lr}
   1e690:	b086      	sub	sp, #24
   1e692:	af00      	add	r7, sp, #0
   1e694:	60f8      	str	r0, [r7, #12]
   1e696:	60b9      	str	r1, [r7, #8]
   1e698:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1e69a:	2316      	movs	r3, #22
   1e69c:	18fb      	adds	r3, r7, r3
   1e69e:	2200      	movs	r2, #0
   1e6a0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1e6a2:	68bb      	ldr	r3, [r7, #8]
   1e6a4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1e6a6:	68bb      	ldr	r3, [r7, #8]
   1e6a8:	085a      	lsrs	r2, r3, #1
   1e6aa:	68fb      	ldr	r3, [r7, #12]
   1e6ac:	429a      	cmp	r2, r3
   1e6ae:	d201      	bcs.n	1e6b4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e6b0:	2340      	movs	r3, #64	; 0x40
   1e6b2:	e026      	b.n	1e702 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1e6b4:	68bb      	ldr	r3, [r7, #8]
   1e6b6:	085b      	lsrs	r3, r3, #1
   1e6b8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1e6ba:	e00a      	b.n	1e6d2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1e6bc:	693a      	ldr	r2, [r7, #16]
   1e6be:	68fb      	ldr	r3, [r7, #12]
   1e6c0:	1ad3      	subs	r3, r2, r3
   1e6c2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1e6c4:	2316      	movs	r3, #22
   1e6c6:	18fb      	adds	r3, r7, r3
   1e6c8:	881a      	ldrh	r2, [r3, #0]
   1e6ca:	2316      	movs	r3, #22
   1e6cc:	18fb      	adds	r3, r7, r3
   1e6ce:	3201      	adds	r2, #1
   1e6d0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1e6d2:	693a      	ldr	r2, [r7, #16]
   1e6d4:	68fb      	ldr	r3, [r7, #12]
   1e6d6:	429a      	cmp	r2, r3
   1e6d8:	d2f0      	bcs.n	1e6bc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1e6da:	2316      	movs	r3, #22
   1e6dc:	18fb      	adds	r3, r7, r3
   1e6de:	2216      	movs	r2, #22
   1e6e0:	18ba      	adds	r2, r7, r2
   1e6e2:	8812      	ldrh	r2, [r2, #0]
   1e6e4:	3a01      	subs	r2, #1
   1e6e6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1e6e8:	2316      	movs	r3, #22
   1e6ea:	18fb      	adds	r3, r7, r3
   1e6ec:	881b      	ldrh	r3, [r3, #0]
   1e6ee:	2bff      	cmp	r3, #255	; 0xff
   1e6f0:	d901      	bls.n	1e6f6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e6f2:	2340      	movs	r3, #64	; 0x40
   1e6f4:	e005      	b.n	1e702 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1e6f6:	687b      	ldr	r3, [r7, #4]
   1e6f8:	2216      	movs	r2, #22
   1e6fa:	18ba      	adds	r2, r7, r2
   1e6fc:	8812      	ldrh	r2, [r2, #0]
   1e6fe:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1e700:	2300      	movs	r3, #0
	}
}
   1e702:	0018      	movs	r0, r3
   1e704:	46bd      	mov	sp, r7
   1e706:	b006      	add	sp, #24
   1e708:	bd80      	pop	{r7, pc}
	...

0001e70c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1e70c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e70e:	b0a1      	sub	sp, #132	; 0x84
   1e710:	af00      	add	r7, sp, #0
   1e712:	64f8      	str	r0, [r7, #76]	; 0x4c
   1e714:	64b9      	str	r1, [r7, #72]	; 0x48
   1e716:	647a      	str	r2, [r7, #68]	; 0x44
   1e718:	2243      	movs	r2, #67	; 0x43
   1e71a:	18ba      	adds	r2, r7, r2
   1e71c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1e71e:	2300      	movs	r3, #0
   1e720:	2400      	movs	r4, #0
   1e722:	673b      	str	r3, [r7, #112]	; 0x70
   1e724:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1e726:	2300      	movs	r3, #0
   1e728:	2400      	movs	r4, #0
   1e72a:	66bb      	str	r3, [r7, #104]	; 0x68
   1e72c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1e72e:	2300      	movs	r3, #0
   1e730:	2400      	movs	r4, #0
   1e732:	67bb      	str	r3, [r7, #120]	; 0x78
   1e734:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1e736:	2300      	movs	r3, #0
   1e738:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1e73a:	2358      	movs	r3, #88	; 0x58
   1e73c:	2240      	movs	r2, #64	; 0x40
   1e73e:	4694      	mov	ip, r2
   1e740:	44bc      	add	ip, r7
   1e742:	4463      	add	r3, ip
   1e744:	781a      	ldrb	r2, [r3, #0]
   1e746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e748:	435a      	muls	r2, r3
   1e74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e74c:	429a      	cmp	r2, r3
   1e74e:	d901      	bls.n	1e754 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e750:	2340      	movs	r3, #64	; 0x40
   1e752:	e0b3      	b.n	1e8bc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1e754:	2343      	movs	r3, #67	; 0x43
   1e756:	18fb      	adds	r3, r7, r3
   1e758:	781b      	ldrb	r3, [r3, #0]
   1e75a:	2b00      	cmp	r3, #0
   1e75c:	d13d      	bne.n	1e7da <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1e75e:	2358      	movs	r3, #88	; 0x58
   1e760:	2240      	movs	r2, #64	; 0x40
   1e762:	4694      	mov	ip, r2
   1e764:	44bc      	add	ip, r7
   1e766:	4463      	add	r3, ip
   1e768:	781b      	ldrb	r3, [r3, #0]
   1e76a:	b2db      	uxtb	r3, r3
   1e76c:	613b      	str	r3, [r7, #16]
   1e76e:	2300      	movs	r3, #0
   1e770:	617b      	str	r3, [r7, #20]
   1e772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e774:	60bb      	str	r3, [r7, #8]
   1e776:	2300      	movs	r3, #0
   1e778:	60fb      	str	r3, [r7, #12]
   1e77a:	4c52      	ldr	r4, [pc, #328]	; (1e8c4 <_sercom_get_async_baud_val+0x1b8>)
   1e77c:	68ba      	ldr	r2, [r7, #8]
   1e77e:	68fb      	ldr	r3, [r7, #12]
   1e780:	6938      	ldr	r0, [r7, #16]
   1e782:	6979      	ldr	r1, [r7, #20]
   1e784:	47a0      	blx	r4
   1e786:	0003      	movs	r3, r0
   1e788:	000c      	movs	r4, r1
   1e78a:	001b      	movs	r3, r3
   1e78c:	65fb      	str	r3, [r7, #92]	; 0x5c
   1e78e:	2300      	movs	r3, #0
   1e790:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1e792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e794:	603b      	str	r3, [r7, #0]
   1e796:	2300      	movs	r3, #0
   1e798:	607b      	str	r3, [r7, #4]
   1e79a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e79c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e79e:	683a      	ldr	r2, [r7, #0]
   1e7a0:	687b      	ldr	r3, [r7, #4]
   1e7a2:	4c49      	ldr	r4, [pc, #292]	; (1e8c8 <_sercom_get_async_baud_val+0x1bc>)
   1e7a4:	47a0      	blx	r4
   1e7a6:	0003      	movs	r3, r0
   1e7a8:	000c      	movs	r4, r1
   1e7aa:	673b      	str	r3, [r7, #112]	; 0x70
   1e7ac:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1e7ae:	2100      	movs	r1, #0
   1e7b0:	2201      	movs	r2, #1
   1e7b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e7b4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1e7b6:	1ac9      	subs	r1, r1, r3
   1e7b8:	41a2      	sbcs	r2, r4
   1e7ba:	000b      	movs	r3, r1
   1e7bc:	0014      	movs	r4, r2
   1e7be:	66bb      	str	r3, [r7, #104]	; 0x68
   1e7c0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1e7c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e7c4:	0c1b      	lsrs	r3, r3, #16
   1e7c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1e7c8:	0416      	lsls	r6, r2, #16
   1e7ca:	431e      	orrs	r6, r3
   1e7cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e7ce:	041d      	lsls	r5, r3, #16
   1e7d0:	0033      	movs	r3, r6
   1e7d2:	67bb      	str	r3, [r7, #120]	; 0x78
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e7d8:	e06a      	b.n	1e8b0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1e7da:	2343      	movs	r3, #67	; 0x43
   1e7dc:	18fb      	adds	r3, r7, r3
   1e7de:	781b      	ldrb	r3, [r3, #0]
   1e7e0:	2b01      	cmp	r3, #1
   1e7e2:	d165      	bne.n	1e8b0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1e7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e7e6:	633b      	str	r3, [r7, #48]	; 0x30
   1e7e8:	2300      	movs	r3, #0
   1e7ea:	637b      	str	r3, [r7, #52]	; 0x34
   1e7ec:	2358      	movs	r3, #88	; 0x58
   1e7ee:	2240      	movs	r2, #64	; 0x40
   1e7f0:	4694      	mov	ip, r2
   1e7f2:	44bc      	add	ip, r7
   1e7f4:	4463      	add	r3, ip
   1e7f6:	781b      	ldrb	r3, [r3, #0]
   1e7f8:	b2db      	uxtb	r3, r3
   1e7fa:	62bb      	str	r3, [r7, #40]	; 0x28
   1e7fc:	2300      	movs	r3, #0
   1e7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e800:	4c30      	ldr	r4, [pc, #192]	; (1e8c4 <_sercom_get_async_baud_val+0x1b8>)
   1e802:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e806:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1e808:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e80a:	47a0      	blx	r4
   1e80c:	0003      	movs	r3, r0
   1e80e:	000c      	movs	r4, r1
   1e810:	65bb      	str	r3, [r7, #88]	; 0x58
   1e812:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1e814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e816:	623b      	str	r3, [r7, #32]
   1e818:	2300      	movs	r3, #0
   1e81a:	627b      	str	r3, [r7, #36]	; 0x24
   1e81c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e81e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e820:	001a      	movs	r2, r3
   1e822:	0023      	movs	r3, r4
   1e824:	6a38      	ldr	r0, [r7, #32]
   1e826:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e828:	4c27      	ldr	r4, [pc, #156]	; (1e8c8 <_sercom_get_async_baud_val+0x1bc>)
   1e82a:	47a0      	blx	r4
   1e82c:	0003      	movs	r3, r0
   1e82e:	000c      	movs	r4, r1
   1e830:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1e832:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1e834:	2380      	movs	r3, #128	; 0x80
   1e836:	019b      	lsls	r3, r3, #6
   1e838:	429a      	cmp	r2, r3
   1e83a:	d901      	bls.n	1e840 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e83c:	2340      	movs	r3, #64	; 0x40
   1e83e:	e03d      	b.n	1e8bc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1e840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e842:	61bb      	str	r3, [r7, #24]
   1e844:	2300      	movs	r3, #0
   1e846:	61fb      	str	r3, [r7, #28]
   1e848:	69b9      	ldr	r1, [r7, #24]
   1e84a:	69fa      	ldr	r2, [r7, #28]
   1e84c:	000b      	movs	r3, r1
   1e84e:	0f5b      	lsrs	r3, r3, #29
   1e850:	0010      	movs	r0, r2
   1e852:	00c0      	lsls	r0, r0, #3
   1e854:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e856:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e858:	4318      	orrs	r0, r3
   1e85a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e85c:	000b      	movs	r3, r1
   1e85e:	00db      	lsls	r3, r3, #3
   1e860:	63bb      	str	r3, [r7, #56]	; 0x38
   1e862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e864:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e866:	001a      	movs	r2, r3
   1e868:	0023      	movs	r3, r4
   1e86a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e86c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e86e:	4c16      	ldr	r4, [pc, #88]	; (1e8c8 <_sercom_get_async_baud_val+0x1bc>)
   1e870:	47a0      	blx	r4
   1e872:	0003      	movs	r3, r0
   1e874:	000c      	movs	r4, r1
   1e876:	65bb      	str	r3, [r7, #88]	; 0x58
   1e878:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1e87a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e87c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e87e:	b2d9      	uxtb	r1, r3
   1e880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e882:	b2db      	uxtb	r3, r3
   1e884:	00db      	lsls	r3, r3, #3
   1e886:	b2da      	uxtb	r2, r3
   1e888:	2317      	movs	r3, #23
   1e88a:	2040      	movs	r0, #64	; 0x40
   1e88c:	4684      	mov	ip, r0
   1e88e:	44bc      	add	ip, r7
   1e890:	4463      	add	r3, ip
   1e892:	1a8a      	subs	r2, r1, r2
   1e894:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1e896:	2317      	movs	r3, #23
   1e898:	2240      	movs	r2, #64	; 0x40
   1e89a:	4694      	mov	ip, r2
   1e89c:	44bc      	add	ip, r7
   1e89e:	4463      	add	r3, ip
   1e8a0:	781b      	ldrb	r3, [r3, #0]
   1e8a2:	035b      	lsls	r3, r3, #13
   1e8a4:	001a      	movs	r2, r3
   1e8a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e8a8:	4313      	orrs	r3, r2
   1e8aa:	67bb      	str	r3, [r7, #120]	; 0x78
   1e8ac:	2300      	movs	r3, #0
   1e8ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1e8b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1e8b2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1e8b4:	b29a      	uxth	r2, r3
   1e8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e8b8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1e8ba:	2300      	movs	r3, #0
}
   1e8bc:	0018      	movs	r0, r3
   1e8be:	46bd      	mov	sp, r7
   1e8c0:	b021      	add	sp, #132	; 0x84
   1e8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8c4:	000268a5 	.word	0x000268a5
   1e8c8:	0001e5af 	.word	0x0001e5af

0001e8cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1e8cc:	b580      	push	{r7, lr}
   1e8ce:	b084      	sub	sp, #16
   1e8d0:	af00      	add	r7, sp, #0
   1e8d2:	0002      	movs	r2, r0
   1e8d4:	1dfb      	adds	r3, r7, #7
   1e8d6:	701a      	strb	r2, [r3, #0]
   1e8d8:	1dbb      	adds	r3, r7, #6
   1e8da:	1c0a      	adds	r2, r1, #0
   1e8dc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1e8de:	4b1a      	ldr	r3, [pc, #104]	; (1e948 <sercom_set_gclk_generator+0x7c>)
   1e8e0:	781b      	ldrb	r3, [r3, #0]
   1e8e2:	2201      	movs	r2, #1
   1e8e4:	4053      	eors	r3, r2
   1e8e6:	b2db      	uxtb	r3, r3
   1e8e8:	2b00      	cmp	r3, #0
   1e8ea:	d103      	bne.n	1e8f4 <sercom_set_gclk_generator+0x28>
   1e8ec:	1dbb      	adds	r3, r7, #6
   1e8ee:	781b      	ldrb	r3, [r3, #0]
   1e8f0:	2b00      	cmp	r3, #0
   1e8f2:	d01b      	beq.n	1e92c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e8f4:	230c      	movs	r3, #12
   1e8f6:	18fb      	adds	r3, r7, r3
   1e8f8:	0018      	movs	r0, r3
   1e8fa:	4b14      	ldr	r3, [pc, #80]	; (1e94c <sercom_set_gclk_generator+0x80>)
   1e8fc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1e8fe:	230c      	movs	r3, #12
   1e900:	18fb      	adds	r3, r7, r3
   1e902:	1dfa      	adds	r2, r7, #7
   1e904:	7812      	ldrb	r2, [r2, #0]
   1e906:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1e908:	230c      	movs	r3, #12
   1e90a:	18fb      	adds	r3, r7, r3
   1e90c:	0019      	movs	r1, r3
   1e90e:	2013      	movs	r0, #19
   1e910:	4b0f      	ldr	r3, [pc, #60]	; (1e950 <sercom_set_gclk_generator+0x84>)
   1e912:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1e914:	2013      	movs	r0, #19
   1e916:	4b0f      	ldr	r3, [pc, #60]	; (1e954 <sercom_set_gclk_generator+0x88>)
   1e918:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1e91a:	4b0b      	ldr	r3, [pc, #44]	; (1e948 <sercom_set_gclk_generator+0x7c>)
   1e91c:	1dfa      	adds	r2, r7, #7
   1e91e:	7812      	ldrb	r2, [r2, #0]
   1e920:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1e922:	4b09      	ldr	r3, [pc, #36]	; (1e948 <sercom_set_gclk_generator+0x7c>)
   1e924:	2201      	movs	r2, #1
   1e926:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1e928:	2300      	movs	r3, #0
   1e92a:	e008      	b.n	1e93e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1e92c:	4b06      	ldr	r3, [pc, #24]	; (1e948 <sercom_set_gclk_generator+0x7c>)
   1e92e:	785b      	ldrb	r3, [r3, #1]
   1e930:	1dfa      	adds	r2, r7, #7
   1e932:	7812      	ldrb	r2, [r2, #0]
   1e934:	429a      	cmp	r2, r3
   1e936:	d101      	bne.n	1e93c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1e938:	2300      	movs	r3, #0
   1e93a:	e000      	b.n	1e93e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1e93c:	231d      	movs	r3, #29
}
   1e93e:	0018      	movs	r0, r3
   1e940:	46bd      	mov	sp, r7
   1e942:	b004      	add	sp, #16
   1e944:	bd80      	pop	{r7, pc}
   1e946:	46c0      	nop			; (mov r8, r8)
   1e948:	200002b4 	.word	0x200002b4
   1e94c:	0001e599 	.word	0x0001e599
   1e950:	000249b5 	.word	0x000249b5
   1e954:	000249f9 	.word	0x000249f9

0001e958 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1e958:	b580      	push	{r7, lr}
   1e95a:	b082      	sub	sp, #8
   1e95c:	af00      	add	r7, sp, #0
   1e95e:	6078      	str	r0, [r7, #4]
   1e960:	000a      	movs	r2, r1
   1e962:	1cfb      	adds	r3, r7, #3
   1e964:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1e966:	687b      	ldr	r3, [r7, #4]
   1e968:	4a4d      	ldr	r2, [pc, #308]	; (1eaa0 <_sercom_get_default_pad+0x148>)
   1e96a:	4293      	cmp	r3, r2
   1e96c:	d03f      	beq.n	1e9ee <_sercom_get_default_pad+0x96>
   1e96e:	4a4c      	ldr	r2, [pc, #304]	; (1eaa0 <_sercom_get_default_pad+0x148>)
   1e970:	4293      	cmp	r3, r2
   1e972:	d806      	bhi.n	1e982 <_sercom_get_default_pad+0x2a>
   1e974:	4a4b      	ldr	r2, [pc, #300]	; (1eaa4 <_sercom_get_default_pad+0x14c>)
   1e976:	4293      	cmp	r3, r2
   1e978:	d00f      	beq.n	1e99a <_sercom_get_default_pad+0x42>
   1e97a:	4a4b      	ldr	r2, [pc, #300]	; (1eaa8 <_sercom_get_default_pad+0x150>)
   1e97c:	4293      	cmp	r3, r2
   1e97e:	d021      	beq.n	1e9c4 <_sercom_get_default_pad+0x6c>
   1e980:	e089      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1e982:	4a4a      	ldr	r2, [pc, #296]	; (1eaac <_sercom_get_default_pad+0x154>)
   1e984:	4293      	cmp	r3, r2
   1e986:	d100      	bne.n	1e98a <_sercom_get_default_pad+0x32>
   1e988:	e05b      	b.n	1ea42 <_sercom_get_default_pad+0xea>
   1e98a:	4a49      	ldr	r2, [pc, #292]	; (1eab0 <_sercom_get_default_pad+0x158>)
   1e98c:	4293      	cmp	r3, r2
   1e98e:	d100      	bne.n	1e992 <_sercom_get_default_pad+0x3a>
   1e990:	e06c      	b.n	1ea6c <_sercom_get_default_pad+0x114>
   1e992:	4a48      	ldr	r2, [pc, #288]	; (1eab4 <_sercom_get_default_pad+0x15c>)
   1e994:	4293      	cmp	r3, r2
   1e996:	d03f      	beq.n	1ea18 <_sercom_get_default_pad+0xc0>
   1e998:	e07d      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1e99a:	1cfb      	adds	r3, r7, #3
   1e99c:	781b      	ldrb	r3, [r3, #0]
   1e99e:	2b01      	cmp	r3, #1
   1e9a0:	d00a      	beq.n	1e9b8 <_sercom_get_default_pad+0x60>
   1e9a2:	dc02      	bgt.n	1e9aa <_sercom_get_default_pad+0x52>
   1e9a4:	2b00      	cmp	r3, #0
   1e9a6:	d005      	beq.n	1e9b4 <_sercom_get_default_pad+0x5c>
   1e9a8:	e075      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1e9aa:	2b02      	cmp	r3, #2
   1e9ac:	d006      	beq.n	1e9bc <_sercom_get_default_pad+0x64>
   1e9ae:	2b03      	cmp	r3, #3
   1e9b0:	d006      	beq.n	1e9c0 <_sercom_get_default_pad+0x68>
   1e9b2:	e070      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1e9b4:	4b40      	ldr	r3, [pc, #256]	; (1eab8 <_sercom_get_default_pad+0x160>)
   1e9b6:	e06f      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9b8:	4b40      	ldr	r3, [pc, #256]	; (1eabc <_sercom_get_default_pad+0x164>)
   1e9ba:	e06d      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9bc:	4b40      	ldr	r3, [pc, #256]	; (1eac0 <_sercom_get_default_pad+0x168>)
   1e9be:	e06b      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9c0:	4b40      	ldr	r3, [pc, #256]	; (1eac4 <_sercom_get_default_pad+0x16c>)
   1e9c2:	e069      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9c4:	1cfb      	adds	r3, r7, #3
   1e9c6:	781b      	ldrb	r3, [r3, #0]
   1e9c8:	2b01      	cmp	r3, #1
   1e9ca:	d00a      	beq.n	1e9e2 <_sercom_get_default_pad+0x8a>
   1e9cc:	dc02      	bgt.n	1e9d4 <_sercom_get_default_pad+0x7c>
   1e9ce:	2b00      	cmp	r3, #0
   1e9d0:	d005      	beq.n	1e9de <_sercom_get_default_pad+0x86>
   1e9d2:	e060      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1e9d4:	2b02      	cmp	r3, #2
   1e9d6:	d006      	beq.n	1e9e6 <_sercom_get_default_pad+0x8e>
   1e9d8:	2b03      	cmp	r3, #3
   1e9da:	d006      	beq.n	1e9ea <_sercom_get_default_pad+0x92>
   1e9dc:	e05b      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1e9de:	2303      	movs	r3, #3
   1e9e0:	e05a      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9e2:	4b39      	ldr	r3, [pc, #228]	; (1eac8 <_sercom_get_default_pad+0x170>)
   1e9e4:	e058      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9e6:	4b39      	ldr	r3, [pc, #228]	; (1eacc <_sercom_get_default_pad+0x174>)
   1e9e8:	e056      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9ea:	4b39      	ldr	r3, [pc, #228]	; (1ead0 <_sercom_get_default_pad+0x178>)
   1e9ec:	e054      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1e9ee:	1cfb      	adds	r3, r7, #3
   1e9f0:	781b      	ldrb	r3, [r3, #0]
   1e9f2:	2b01      	cmp	r3, #1
   1e9f4:	d00a      	beq.n	1ea0c <_sercom_get_default_pad+0xb4>
   1e9f6:	dc02      	bgt.n	1e9fe <_sercom_get_default_pad+0xa6>
   1e9f8:	2b00      	cmp	r3, #0
   1e9fa:	d005      	beq.n	1ea08 <_sercom_get_default_pad+0xb0>
   1e9fc:	e04b      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1e9fe:	2b02      	cmp	r3, #2
   1ea00:	d006      	beq.n	1ea10 <_sercom_get_default_pad+0xb8>
   1ea02:	2b03      	cmp	r3, #3
   1ea04:	d006      	beq.n	1ea14 <_sercom_get_default_pad+0xbc>
   1ea06:	e046      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea08:	4b32      	ldr	r3, [pc, #200]	; (1ead4 <_sercom_get_default_pad+0x17c>)
   1ea0a:	e045      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea0c:	4b32      	ldr	r3, [pc, #200]	; (1ead8 <_sercom_get_default_pad+0x180>)
   1ea0e:	e043      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea10:	4b32      	ldr	r3, [pc, #200]	; (1eadc <_sercom_get_default_pad+0x184>)
   1ea12:	e041      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea14:	4b32      	ldr	r3, [pc, #200]	; (1eae0 <_sercom_get_default_pad+0x188>)
   1ea16:	e03f      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea18:	1cfb      	adds	r3, r7, #3
   1ea1a:	781b      	ldrb	r3, [r3, #0]
   1ea1c:	2b01      	cmp	r3, #1
   1ea1e:	d00a      	beq.n	1ea36 <_sercom_get_default_pad+0xde>
   1ea20:	dc02      	bgt.n	1ea28 <_sercom_get_default_pad+0xd0>
   1ea22:	2b00      	cmp	r3, #0
   1ea24:	d005      	beq.n	1ea32 <_sercom_get_default_pad+0xda>
   1ea26:	e036      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea28:	2b02      	cmp	r3, #2
   1ea2a:	d006      	beq.n	1ea3a <_sercom_get_default_pad+0xe2>
   1ea2c:	2b03      	cmp	r3, #3
   1ea2e:	d006      	beq.n	1ea3e <_sercom_get_default_pad+0xe6>
   1ea30:	e031      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea32:	4b2c      	ldr	r3, [pc, #176]	; (1eae4 <_sercom_get_default_pad+0x18c>)
   1ea34:	e030      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea36:	4b2c      	ldr	r3, [pc, #176]	; (1eae8 <_sercom_get_default_pad+0x190>)
   1ea38:	e02e      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea3a:	4b2c      	ldr	r3, [pc, #176]	; (1eaec <_sercom_get_default_pad+0x194>)
   1ea3c:	e02c      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea3e:	4b2c      	ldr	r3, [pc, #176]	; (1eaf0 <_sercom_get_default_pad+0x198>)
   1ea40:	e02a      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea42:	1cfb      	adds	r3, r7, #3
   1ea44:	781b      	ldrb	r3, [r3, #0]
   1ea46:	2b01      	cmp	r3, #1
   1ea48:	d00a      	beq.n	1ea60 <_sercom_get_default_pad+0x108>
   1ea4a:	dc02      	bgt.n	1ea52 <_sercom_get_default_pad+0xfa>
   1ea4c:	2b00      	cmp	r3, #0
   1ea4e:	d005      	beq.n	1ea5c <_sercom_get_default_pad+0x104>
   1ea50:	e021      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea52:	2b02      	cmp	r3, #2
   1ea54:	d006      	beq.n	1ea64 <_sercom_get_default_pad+0x10c>
   1ea56:	2b03      	cmp	r3, #3
   1ea58:	d006      	beq.n	1ea68 <_sercom_get_default_pad+0x110>
   1ea5a:	e01c      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea5c:	4b25      	ldr	r3, [pc, #148]	; (1eaf4 <_sercom_get_default_pad+0x19c>)
   1ea5e:	e01b      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea60:	4b25      	ldr	r3, [pc, #148]	; (1eaf8 <_sercom_get_default_pad+0x1a0>)
   1ea62:	e019      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea64:	4b25      	ldr	r3, [pc, #148]	; (1eafc <_sercom_get_default_pad+0x1a4>)
   1ea66:	e017      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea68:	4b25      	ldr	r3, [pc, #148]	; (1eb00 <_sercom_get_default_pad+0x1a8>)
   1ea6a:	e015      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea6c:	1cfb      	adds	r3, r7, #3
   1ea6e:	781b      	ldrb	r3, [r3, #0]
   1ea70:	2b01      	cmp	r3, #1
   1ea72:	d00a      	beq.n	1ea8a <_sercom_get_default_pad+0x132>
   1ea74:	dc02      	bgt.n	1ea7c <_sercom_get_default_pad+0x124>
   1ea76:	2b00      	cmp	r3, #0
   1ea78:	d005      	beq.n	1ea86 <_sercom_get_default_pad+0x12e>
   1ea7a:	e00c      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea7c:	2b02      	cmp	r3, #2
   1ea7e:	d006      	beq.n	1ea8e <_sercom_get_default_pad+0x136>
   1ea80:	2b03      	cmp	r3, #3
   1ea82:	d006      	beq.n	1ea92 <_sercom_get_default_pad+0x13a>
   1ea84:	e007      	b.n	1ea96 <_sercom_get_default_pad+0x13e>
   1ea86:	4b1f      	ldr	r3, [pc, #124]	; (1eb04 <_sercom_get_default_pad+0x1ac>)
   1ea88:	e006      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea8a:	4b1f      	ldr	r3, [pc, #124]	; (1eb08 <_sercom_get_default_pad+0x1b0>)
   1ea8c:	e004      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea8e:	4b1f      	ldr	r3, [pc, #124]	; (1eb0c <_sercom_get_default_pad+0x1b4>)
   1ea90:	e002      	b.n	1ea98 <_sercom_get_default_pad+0x140>
   1ea92:	4b1f      	ldr	r3, [pc, #124]	; (1eb10 <_sercom_get_default_pad+0x1b8>)
   1ea94:	e000      	b.n	1ea98 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1ea96:	2300      	movs	r3, #0
}
   1ea98:	0018      	movs	r0, r3
   1ea9a:	46bd      	mov	sp, r7
   1ea9c:	b002      	add	sp, #8
   1ea9e:	bd80      	pop	{r7, pc}
   1eaa0:	42001000 	.word	0x42001000
   1eaa4:	42000800 	.word	0x42000800
   1eaa8:	42000c00 	.word	0x42000c00
   1eaac:	42001800 	.word	0x42001800
   1eab0:	42001c00 	.word	0x42001c00
   1eab4:	42001400 	.word	0x42001400
   1eab8:	00040003 	.word	0x00040003
   1eabc:	00050003 	.word	0x00050003
   1eac0:	00060003 	.word	0x00060003
   1eac4:	00070003 	.word	0x00070003
   1eac8:	00010003 	.word	0x00010003
   1eacc:	001e0003 	.word	0x001e0003
   1ead0:	001f0003 	.word	0x001f0003
   1ead4:	00080003 	.word	0x00080003
   1ead8:	00090003 	.word	0x00090003
   1eadc:	000a0003 	.word	0x000a0003
   1eae0:	000b0003 	.word	0x000b0003
   1eae4:	00100003 	.word	0x00100003
   1eae8:	00110003 	.word	0x00110003
   1eaec:	00120003 	.word	0x00120003
   1eaf0:	00130003 	.word	0x00130003
   1eaf4:	000c0003 	.word	0x000c0003
   1eaf8:	000d0003 	.word	0x000d0003
   1eafc:	000e0003 	.word	0x000e0003
   1eb00:	000f0003 	.word	0x000f0003
   1eb04:	00160003 	.word	0x00160003
   1eb08:	00170003 	.word	0x00170003
   1eb0c:	00180003 	.word	0x00180003
   1eb10:	00190003 	.word	0x00190003

0001eb14 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1eb14:	b590      	push	{r4, r7, lr}
   1eb16:	b08b      	sub	sp, #44	; 0x2c
   1eb18:	af00      	add	r7, sp, #0
   1eb1a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1eb1c:	230c      	movs	r3, #12
   1eb1e:	18fb      	adds	r3, r7, r3
   1eb20:	4a0f      	ldr	r2, [pc, #60]	; (1eb60 <_sercom_get_sercom_inst_index+0x4c>)
   1eb22:	ca13      	ldmia	r2!, {r0, r1, r4}
   1eb24:	c313      	stmia	r3!, {r0, r1, r4}
   1eb26:	ca13      	ldmia	r2!, {r0, r1, r4}
   1eb28:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1eb2a:	2300      	movs	r3, #0
   1eb2c:	627b      	str	r3, [r7, #36]	; 0x24
   1eb2e:	e00e      	b.n	1eb4e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1eb30:	230c      	movs	r3, #12
   1eb32:	18fb      	adds	r3, r7, r3
   1eb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eb36:	0092      	lsls	r2, r2, #2
   1eb38:	58d3      	ldr	r3, [r2, r3]
   1eb3a:	001a      	movs	r2, r3
   1eb3c:	687b      	ldr	r3, [r7, #4]
   1eb3e:	429a      	cmp	r2, r3
   1eb40:	d102      	bne.n	1eb48 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1eb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb44:	b2db      	uxtb	r3, r3
   1eb46:	e006      	b.n	1eb56 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb4a:	3301      	adds	r3, #1
   1eb4c:	627b      	str	r3, [r7, #36]	; 0x24
   1eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb50:	2b05      	cmp	r3, #5
   1eb52:	d9ed      	bls.n	1eb30 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1eb54:	2300      	movs	r3, #0
}
   1eb56:	0018      	movs	r0, r3
   1eb58:	46bd      	mov	sp, r7
   1eb5a:	b00b      	add	sp, #44	; 0x2c
   1eb5c:	bd90      	pop	{r4, r7, pc}
   1eb5e:	46c0      	nop			; (mov r8, r8)
   1eb60:	0002aa70 	.word	0x0002aa70

0001eb64 <system_cpu_clock_get_hz>:
{
   1eb64:	b580      	push	{r7, lr}
   1eb66:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1eb68:	2000      	movs	r0, #0
   1eb6a:	4b05      	ldr	r3, [pc, #20]	; (1eb80 <system_cpu_clock_get_hz+0x1c>)
   1eb6c:	4798      	blx	r3
   1eb6e:	0002      	movs	r2, r0
   1eb70:	4b04      	ldr	r3, [pc, #16]	; (1eb84 <system_cpu_clock_get_hz+0x20>)
   1eb72:	7a1b      	ldrb	r3, [r3, #8]
   1eb74:	b2db      	uxtb	r3, r3
   1eb76:	40da      	lsrs	r2, r3
   1eb78:	0013      	movs	r3, r2
}
   1eb7a:	0018      	movs	r0, r3
   1eb7c:	46bd      	mov	sp, r7
   1eb7e:	bd80      	pop	{r7, pc}
   1eb80:	000248dd 	.word	0x000248dd
   1eb84:	40000400 	.word	0x40000400

0001eb88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1eb88:	b580      	push	{r7, lr}
   1eb8a:	b084      	sub	sp, #16
   1eb8c:	af00      	add	r7, sp, #0
   1eb8e:	60f8      	str	r0, [r7, #12]
   1eb90:	60b9      	str	r1, [r7, #8]
   1eb92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1eb94:	68fb      	ldr	r3, [r7, #12]
   1eb96:	3b04      	subs	r3, #4
   1eb98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1eb9a:	68fb      	ldr	r3, [r7, #12]
   1eb9c:	2280      	movs	r2, #128	; 0x80
   1eb9e:	0452      	lsls	r2, r2, #17
   1eba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1eba2:	68fb      	ldr	r3, [r7, #12]
   1eba4:	3b04      	subs	r3, #4
   1eba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1eba8:	68ba      	ldr	r2, [r7, #8]
   1ebaa:	68fb      	ldr	r3, [r7, #12]
   1ebac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ebae:	68fb      	ldr	r3, [r7, #12]
   1ebb0:	3b04      	subs	r3, #4
   1ebb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ebb4:	4a08      	ldr	r2, [pc, #32]	; (1ebd8 <pxPortInitialiseStack+0x50>)
   1ebb6:	68fb      	ldr	r3, [r7, #12]
   1ebb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ebba:	68fb      	ldr	r3, [r7, #12]
   1ebbc:	3b14      	subs	r3, #20
   1ebbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ebc0:	687a      	ldr	r2, [r7, #4]
   1ebc2:	68fb      	ldr	r3, [r7, #12]
   1ebc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ebc6:	68fb      	ldr	r3, [r7, #12]
   1ebc8:	3b20      	subs	r3, #32
   1ebca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ebcc:	68fb      	ldr	r3, [r7, #12]
}
   1ebce:	0018      	movs	r0, r3
   1ebd0:	46bd      	mov	sp, r7
   1ebd2:	b004      	add	sp, #16
   1ebd4:	bd80      	pop	{r7, pc}
   1ebd6:	46c0      	nop			; (mov r8, r8)
   1ebd8:	0001ebdd 	.word	0x0001ebdd

0001ebdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ebdc:	b580      	push	{r7, lr}
   1ebde:	b082      	sub	sp, #8
   1ebe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ebe2:	2300      	movs	r3, #0
   1ebe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ebe6:	4b07      	ldr	r3, [pc, #28]	; (1ec04 <prvTaskExitError+0x28>)
   1ebe8:	681b      	ldr	r3, [r3, #0]
   1ebea:	3301      	adds	r3, #1
   1ebec:	d001      	beq.n	1ebf2 <prvTaskExitError+0x16>
   1ebee:	b672      	cpsid	i
   1ebf0:	e7fe      	b.n	1ebf0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ebf2:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ebf4:	46c0      	nop			; (mov r8, r8)
   1ebf6:	687b      	ldr	r3, [r7, #4]
   1ebf8:	2b00      	cmp	r3, #0
   1ebfa:	d0fc      	beq.n	1ebf6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ebfc:	46c0      	nop			; (mov r8, r8)
   1ebfe:	46bd      	mov	sp, r7
   1ec00:	b002      	add	sp, #8
   1ec02:	bd80      	pop	{r7, pc}
   1ec04:	20000010 	.word	0x20000010

0001ec08 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ec08:	b580      	push	{r7, lr}
   1ec0a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ec0c:	46c0      	nop			; (mov r8, r8)
   1ec0e:	46bd      	mov	sp, r7
   1ec10:	bd80      	pop	{r7, pc}
	...

0001ec20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ec20:	4a0b      	ldr	r2, [pc, #44]	; (1ec50 <pxCurrentTCBConst2>)
   1ec22:	6813      	ldr	r3, [r2, #0]
   1ec24:	6818      	ldr	r0, [r3, #0]
   1ec26:	3020      	adds	r0, #32
   1ec28:	f380 8809 	msr	PSP, r0
   1ec2c:	2002      	movs	r0, #2
   1ec2e:	f380 8814 	msr	CONTROL, r0
   1ec32:	f3bf 8f6f 	isb	sy
   1ec36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ec38:	46ae      	mov	lr, r5
   1ec3a:	bc08      	pop	{r3}
   1ec3c:	bc04      	pop	{r2}
   1ec3e:	b662      	cpsie	i
   1ec40:	4718      	bx	r3
   1ec42:	46c0      	nop			; (mov r8, r8)
   1ec44:	46c0      	nop			; (mov r8, r8)
   1ec46:	46c0      	nop			; (mov r8, r8)
   1ec48:	46c0      	nop			; (mov r8, r8)
   1ec4a:	46c0      	nop			; (mov r8, r8)
   1ec4c:	46c0      	nop			; (mov r8, r8)
   1ec4e:	46c0      	nop			; (mov r8, r8)

0001ec50 <pxCurrentTCBConst2>:
   1ec50:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ec54:	46c0      	nop			; (mov r8, r8)
   1ec56:	46c0      	nop			; (mov r8, r8)

0001ec58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ec58:	b580      	push	{r7, lr}
   1ec5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ec5c:	4b0e      	ldr	r3, [pc, #56]	; (1ec98 <xPortStartScheduler+0x40>)
   1ec5e:	4a0e      	ldr	r2, [pc, #56]	; (1ec98 <xPortStartScheduler+0x40>)
   1ec60:	6812      	ldr	r2, [r2, #0]
   1ec62:	21ff      	movs	r1, #255	; 0xff
   1ec64:	0409      	lsls	r1, r1, #16
   1ec66:	430a      	orrs	r2, r1
   1ec68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ec6a:	4b0b      	ldr	r3, [pc, #44]	; (1ec98 <xPortStartScheduler+0x40>)
   1ec6c:	4a0a      	ldr	r2, [pc, #40]	; (1ec98 <xPortStartScheduler+0x40>)
   1ec6e:	6812      	ldr	r2, [r2, #0]
   1ec70:	21ff      	movs	r1, #255	; 0xff
   1ec72:	0609      	lsls	r1, r1, #24
   1ec74:	430a      	orrs	r2, r1
   1ec76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ec78:	4b08      	ldr	r3, [pc, #32]	; (1ec9c <xPortStartScheduler+0x44>)
   1ec7a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ec7c:	4b08      	ldr	r3, [pc, #32]	; (1eca0 <xPortStartScheduler+0x48>)
   1ec7e:	2200      	movs	r2, #0
   1ec80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ec82:	4b08      	ldr	r3, [pc, #32]	; (1eca4 <xPortStartScheduler+0x4c>)
   1ec84:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ec86:	4b08      	ldr	r3, [pc, #32]	; (1eca8 <xPortStartScheduler+0x50>)
   1ec88:	4798      	blx	r3
	prvTaskExitError();
   1ec8a:	4b08      	ldr	r3, [pc, #32]	; (1ecac <xPortStartScheduler+0x54>)
   1ec8c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ec8e:	2300      	movs	r3, #0
}
   1ec90:	0018      	movs	r0, r3
   1ec92:	46bd      	mov	sp, r7
   1ec94:	bd80      	pop	{r7, pc}
   1ec96:	46c0      	nop			; (mov r8, r8)
   1ec98:	e000ed20 	.word	0xe000ed20
   1ec9c:	0001edc9 	.word	0x0001edc9
   1eca0:	20000010 	.word	0x20000010
   1eca4:	0001ec21 	.word	0x0001ec21
   1eca8:	000203fd 	.word	0x000203fd
   1ecac:	0001ebdd 	.word	0x0001ebdd

0001ecb0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1ecb0:	b580      	push	{r7, lr}
   1ecb2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1ecb4:	4b05      	ldr	r3, [pc, #20]	; (1eccc <vPortYield+0x1c>)
   1ecb6:	2280      	movs	r2, #128	; 0x80
   1ecb8:	0552      	lsls	r2, r2, #21
   1ecba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1ecbc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ecc0:	f3bf 8f6f 	isb	sy
}
   1ecc4:	46c0      	nop			; (mov r8, r8)
   1ecc6:	46bd      	mov	sp, r7
   1ecc8:	bd80      	pop	{r7, pc}
   1ecca:	46c0      	nop			; (mov r8, r8)
   1eccc:	e000ed04 	.word	0xe000ed04

0001ecd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1ecd0:	b580      	push	{r7, lr}
   1ecd2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1ecd4:	b672      	cpsid	i
    uxCriticalNesting++;
   1ecd6:	4b06      	ldr	r3, [pc, #24]	; (1ecf0 <vPortEnterCritical+0x20>)
   1ecd8:	681b      	ldr	r3, [r3, #0]
   1ecda:	1c5a      	adds	r2, r3, #1
   1ecdc:	4b04      	ldr	r3, [pc, #16]	; (1ecf0 <vPortEnterCritical+0x20>)
   1ecde:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ece0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ece4:	f3bf 8f6f 	isb	sy
}
   1ece8:	46c0      	nop			; (mov r8, r8)
   1ecea:	46bd      	mov	sp, r7
   1ecec:	bd80      	pop	{r7, pc}
   1ecee:	46c0      	nop			; (mov r8, r8)
   1ecf0:	20000010 	.word	0x20000010

0001ecf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1ecf4:	b580      	push	{r7, lr}
   1ecf6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1ecf8:	4b09      	ldr	r3, [pc, #36]	; (1ed20 <vPortExitCritical+0x2c>)
   1ecfa:	681b      	ldr	r3, [r3, #0]
   1ecfc:	2b00      	cmp	r3, #0
   1ecfe:	d101      	bne.n	1ed04 <vPortExitCritical+0x10>
   1ed00:	b672      	cpsid	i
   1ed02:	e7fe      	b.n	1ed02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ed04:	4b06      	ldr	r3, [pc, #24]	; (1ed20 <vPortExitCritical+0x2c>)
   1ed06:	681b      	ldr	r3, [r3, #0]
   1ed08:	1e5a      	subs	r2, r3, #1
   1ed0a:	4b05      	ldr	r3, [pc, #20]	; (1ed20 <vPortExitCritical+0x2c>)
   1ed0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ed0e:	4b04      	ldr	r3, [pc, #16]	; (1ed20 <vPortExitCritical+0x2c>)
   1ed10:	681b      	ldr	r3, [r3, #0]
   1ed12:	2b00      	cmp	r3, #0
   1ed14:	d100      	bne.n	1ed18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ed16:	b662      	cpsie	i
    }
}
   1ed18:	46c0      	nop			; (mov r8, r8)
   1ed1a:	46bd      	mov	sp, r7
   1ed1c:	bd80      	pop	{r7, pc}
   1ed1e:	46c0      	nop			; (mov r8, r8)
   1ed20:	20000010 	.word	0x20000010

0001ed24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1ed24:	f3ef 8010 	mrs	r0, PRIMASK
   1ed28:	b672      	cpsid	i
   1ed2a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ed2c:	46c0      	nop			; (mov r8, r8)
   1ed2e:	0018      	movs	r0, r3

0001ed30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ed30:	f380 8810 	msr	PRIMASK, r0
   1ed34:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ed36:	46c0      	nop			; (mov r8, r8)
	...

0001ed40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1ed40:	f3ef 8009 	mrs	r0, PSP
   1ed44:	4b0e      	ldr	r3, [pc, #56]	; (1ed80 <pxCurrentTCBConst>)
   1ed46:	681a      	ldr	r2, [r3, #0]
   1ed48:	3820      	subs	r0, #32
   1ed4a:	6010      	str	r0, [r2, #0]
   1ed4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ed4e:	4644      	mov	r4, r8
   1ed50:	464d      	mov	r5, r9
   1ed52:	4656      	mov	r6, sl
   1ed54:	465f      	mov	r7, fp
   1ed56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ed58:	b508      	push	{r3, lr}
   1ed5a:	b672      	cpsid	i
   1ed5c:	f001 fb4e 	bl	203fc <vTaskSwitchContext>
   1ed60:	b662      	cpsie	i
   1ed62:	bc0c      	pop	{r2, r3}
   1ed64:	6811      	ldr	r1, [r2, #0]
   1ed66:	6808      	ldr	r0, [r1, #0]
   1ed68:	3010      	adds	r0, #16
   1ed6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ed6c:	46a0      	mov	r8, r4
   1ed6e:	46a9      	mov	r9, r5
   1ed70:	46b2      	mov	sl, r6
   1ed72:	46bb      	mov	fp, r7
   1ed74:	f380 8809 	msr	PSP, r0
   1ed78:	3820      	subs	r0, #32
   1ed7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ed7c:	4718      	bx	r3
   1ed7e:	46c0      	nop			; (mov r8, r8)

0001ed80 <pxCurrentTCBConst>:
   1ed80:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ed84:	46c0      	nop			; (mov r8, r8)
   1ed86:	46c0      	nop			; (mov r8, r8)

0001ed88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ed88:	b580      	push	{r7, lr}
   1ed8a:	b082      	sub	sp, #8
   1ed8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ed8e:	4b0a      	ldr	r3, [pc, #40]	; (1edb8 <SysTick_Handler+0x30>)
   1ed90:	4798      	blx	r3
   1ed92:	0003      	movs	r3, r0
   1ed94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ed96:	4b09      	ldr	r3, [pc, #36]	; (1edbc <SysTick_Handler+0x34>)
   1ed98:	4798      	blx	r3
   1ed9a:	1e03      	subs	r3, r0, #0
   1ed9c:	d003      	beq.n	1eda6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ed9e:	4b08      	ldr	r3, [pc, #32]	; (1edc0 <SysTick_Handler+0x38>)
   1eda0:	2280      	movs	r2, #128	; 0x80
   1eda2:	0552      	lsls	r2, r2, #21
   1eda4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1eda6:	687b      	ldr	r3, [r7, #4]
   1eda8:	0018      	movs	r0, r3
   1edaa:	4b06      	ldr	r3, [pc, #24]	; (1edc4 <SysTick_Handler+0x3c>)
   1edac:	4798      	blx	r3
}
   1edae:	46c0      	nop			; (mov r8, r8)
   1edb0:	46bd      	mov	sp, r7
   1edb2:	b002      	add	sp, #8
   1edb4:	bd80      	pop	{r7, pc}
   1edb6:	46c0      	nop			; (mov r8, r8)
   1edb8:	0001ed25 	.word	0x0001ed25
   1edbc:	00020289 	.word	0x00020289
   1edc0:	e000ed04 	.word	0xe000ed04
   1edc4:	0001ed31 	.word	0x0001ed31

0001edc8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1edc8:	b5b0      	push	{r4, r5, r7, lr}
   1edca:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1edcc:	4b0a      	ldr	r3, [pc, #40]	; (1edf8 <prvSetupTimerInterrupt+0x30>)
   1edce:	2200      	movs	r2, #0
   1edd0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1edd2:	4b0a      	ldr	r3, [pc, #40]	; (1edfc <prvSetupTimerInterrupt+0x34>)
   1edd4:	2200      	movs	r2, #0
   1edd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1edd8:	4c09      	ldr	r4, [pc, #36]	; (1ee00 <prvSetupTimerInterrupt+0x38>)
   1edda:	4b0a      	ldr	r3, [pc, #40]	; (1ee04 <prvSetupTimerInterrupt+0x3c>)
   1eddc:	4798      	blx	r3
   1edde:	4b0a      	ldr	r3, [pc, #40]	; (1ee08 <prvSetupTimerInterrupt+0x40>)
   1ede0:	22fa      	movs	r2, #250	; 0xfa
   1ede2:	0091      	lsls	r1, r2, #2
   1ede4:	4798      	blx	r3
   1ede6:	0003      	movs	r3, r0
   1ede8:	3b01      	subs	r3, #1
   1edea:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1edec:	4b02      	ldr	r3, [pc, #8]	; (1edf8 <prvSetupTimerInterrupt+0x30>)
   1edee:	2207      	movs	r2, #7
   1edf0:	601a      	str	r2, [r3, #0]
}
   1edf2:	46c0      	nop			; (mov r8, r8)
   1edf4:	46bd      	mov	sp, r7
   1edf6:	bdb0      	pop	{r4, r5, r7, pc}
   1edf8:	e000e010 	.word	0xe000e010
   1edfc:	e000e018 	.word	0xe000e018
   1ee00:	e000e014 	.word	0xe000e014
   1ee04:	0001eb65 	.word	0x0001eb65
   1ee08:	000264fd 	.word	0x000264fd

0001ee0c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ee0c:	b580      	push	{r7, lr}
   1ee0e:	b084      	sub	sp, #16
   1ee10:	af00      	add	r7, sp, #0
   1ee12:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1ee14:	4b07      	ldr	r3, [pc, #28]	; (1ee34 <pvPortMalloc+0x28>)
   1ee16:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1ee18:	687b      	ldr	r3, [r7, #4]
   1ee1a:	0018      	movs	r0, r3
   1ee1c:	4b06      	ldr	r3, [pc, #24]	; (1ee38 <pvPortMalloc+0x2c>)
   1ee1e:	4798      	blx	r3
   1ee20:	0003      	movs	r3, r0
   1ee22:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1ee24:	4b05      	ldr	r3, [pc, #20]	; (1ee3c <pvPortMalloc+0x30>)
   1ee26:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1ee28:	68fb      	ldr	r3, [r7, #12]
}
   1ee2a:	0018      	movs	r0, r3
   1ee2c:	46bd      	mov	sp, r7
   1ee2e:	b004      	add	sp, #16
   1ee30:	bd80      	pop	{r7, pc}
   1ee32:	46c0      	nop			; (mov r8, r8)
   1ee34:	00020101 	.word	0x00020101
   1ee38:	00028d91 	.word	0x00028d91
   1ee3c:	00020119 	.word	0x00020119

0001ee40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ee40:	b580      	push	{r7, lr}
   1ee42:	b082      	sub	sp, #8
   1ee44:	af00      	add	r7, sp, #0
   1ee46:	6078      	str	r0, [r7, #4]
	if( pv )
   1ee48:	687b      	ldr	r3, [r7, #4]
   1ee4a:	2b00      	cmp	r3, #0
   1ee4c:	d007      	beq.n	1ee5e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1ee4e:	4b06      	ldr	r3, [pc, #24]	; (1ee68 <vPortFree+0x28>)
   1ee50:	4798      	blx	r3
		{
			free( pv );
   1ee52:	687b      	ldr	r3, [r7, #4]
   1ee54:	0018      	movs	r0, r3
   1ee56:	4b05      	ldr	r3, [pc, #20]	; (1ee6c <vPortFree+0x2c>)
   1ee58:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1ee5a:	4b05      	ldr	r3, [pc, #20]	; (1ee70 <vPortFree+0x30>)
   1ee5c:	4798      	blx	r3
	}
}
   1ee5e:	46c0      	nop			; (mov r8, r8)
   1ee60:	46bd      	mov	sp, r7
   1ee62:	b002      	add	sp, #8
   1ee64:	bd80      	pop	{r7, pc}
   1ee66:	46c0      	nop			; (mov r8, r8)
   1ee68:	00020101 	.word	0x00020101
   1ee6c:	00028da5 	.word	0x00028da5
   1ee70:	00020119 	.word	0x00020119

0001ee74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ee74:	b580      	push	{r7, lr}
   1ee76:	b082      	sub	sp, #8
   1ee78:	af00      	add	r7, sp, #0
   1ee7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ee7c:	687b      	ldr	r3, [r7, #4]
   1ee7e:	3308      	adds	r3, #8
   1ee80:	001a      	movs	r2, r3
   1ee82:	687b      	ldr	r3, [r7, #4]
   1ee84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ee86:	687b      	ldr	r3, [r7, #4]
   1ee88:	2201      	movs	r2, #1
   1ee8a:	4252      	negs	r2, r2
   1ee8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ee8e:	687b      	ldr	r3, [r7, #4]
   1ee90:	3308      	adds	r3, #8
   1ee92:	001a      	movs	r2, r3
   1ee94:	687b      	ldr	r3, [r7, #4]
   1ee96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ee98:	687b      	ldr	r3, [r7, #4]
   1ee9a:	3308      	adds	r3, #8
   1ee9c:	001a      	movs	r2, r3
   1ee9e:	687b      	ldr	r3, [r7, #4]
   1eea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1eea2:	687b      	ldr	r3, [r7, #4]
   1eea4:	2200      	movs	r2, #0
   1eea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1eea8:	46c0      	nop			; (mov r8, r8)
   1eeaa:	46bd      	mov	sp, r7
   1eeac:	b002      	add	sp, #8
   1eeae:	bd80      	pop	{r7, pc}

0001eeb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1eeb0:	b580      	push	{r7, lr}
   1eeb2:	b082      	sub	sp, #8
   1eeb4:	af00      	add	r7, sp, #0
   1eeb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1eeb8:	687b      	ldr	r3, [r7, #4]
   1eeba:	2200      	movs	r2, #0
   1eebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1eebe:	46c0      	nop			; (mov r8, r8)
   1eec0:	46bd      	mov	sp, r7
   1eec2:	b002      	add	sp, #8
   1eec4:	bd80      	pop	{r7, pc}

0001eec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1eec6:	b580      	push	{r7, lr}
   1eec8:	b084      	sub	sp, #16
   1eeca:	af00      	add	r7, sp, #0
   1eecc:	6078      	str	r0, [r7, #4]
   1eece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1eed0:	687b      	ldr	r3, [r7, #4]
   1eed2:	685b      	ldr	r3, [r3, #4]
   1eed4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1eed6:	683b      	ldr	r3, [r7, #0]
   1eed8:	68fa      	ldr	r2, [r7, #12]
   1eeda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1eedc:	68fb      	ldr	r3, [r7, #12]
   1eede:	689a      	ldr	r2, [r3, #8]
   1eee0:	683b      	ldr	r3, [r7, #0]
   1eee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1eee4:	68fb      	ldr	r3, [r7, #12]
   1eee6:	689b      	ldr	r3, [r3, #8]
   1eee8:	683a      	ldr	r2, [r7, #0]
   1eeea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1eeec:	68fb      	ldr	r3, [r7, #12]
   1eeee:	683a      	ldr	r2, [r7, #0]
   1eef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1eef2:	683b      	ldr	r3, [r7, #0]
   1eef4:	687a      	ldr	r2, [r7, #4]
   1eef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1eef8:	687b      	ldr	r3, [r7, #4]
   1eefa:	681b      	ldr	r3, [r3, #0]
   1eefc:	1c5a      	adds	r2, r3, #1
   1eefe:	687b      	ldr	r3, [r7, #4]
   1ef00:	601a      	str	r2, [r3, #0]
}
   1ef02:	46c0      	nop			; (mov r8, r8)
   1ef04:	46bd      	mov	sp, r7
   1ef06:	b004      	add	sp, #16
   1ef08:	bd80      	pop	{r7, pc}

0001ef0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ef0a:	b580      	push	{r7, lr}
   1ef0c:	b084      	sub	sp, #16
   1ef0e:	af00      	add	r7, sp, #0
   1ef10:	6078      	str	r0, [r7, #4]
   1ef12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1ef14:	683b      	ldr	r3, [r7, #0]
   1ef16:	681b      	ldr	r3, [r3, #0]
   1ef18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1ef1a:	68bb      	ldr	r3, [r7, #8]
   1ef1c:	3301      	adds	r3, #1
   1ef1e:	d103      	bne.n	1ef28 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1ef20:	687b      	ldr	r3, [r7, #4]
   1ef22:	691b      	ldr	r3, [r3, #16]
   1ef24:	60fb      	str	r3, [r7, #12]
   1ef26:	e00c      	b.n	1ef42 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ef28:	687b      	ldr	r3, [r7, #4]
   1ef2a:	3308      	adds	r3, #8
   1ef2c:	60fb      	str	r3, [r7, #12]
   1ef2e:	e002      	b.n	1ef36 <vListInsert+0x2c>
   1ef30:	68fb      	ldr	r3, [r7, #12]
   1ef32:	685b      	ldr	r3, [r3, #4]
   1ef34:	60fb      	str	r3, [r7, #12]
   1ef36:	68fb      	ldr	r3, [r7, #12]
   1ef38:	685b      	ldr	r3, [r3, #4]
   1ef3a:	681a      	ldr	r2, [r3, #0]
   1ef3c:	68bb      	ldr	r3, [r7, #8]
   1ef3e:	429a      	cmp	r2, r3
   1ef40:	d9f6      	bls.n	1ef30 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1ef42:	68fb      	ldr	r3, [r7, #12]
   1ef44:	685a      	ldr	r2, [r3, #4]
   1ef46:	683b      	ldr	r3, [r7, #0]
   1ef48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1ef4a:	683b      	ldr	r3, [r7, #0]
   1ef4c:	685b      	ldr	r3, [r3, #4]
   1ef4e:	683a      	ldr	r2, [r7, #0]
   1ef50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1ef52:	683b      	ldr	r3, [r7, #0]
   1ef54:	68fa      	ldr	r2, [r7, #12]
   1ef56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1ef58:	68fb      	ldr	r3, [r7, #12]
   1ef5a:	683a      	ldr	r2, [r7, #0]
   1ef5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ef5e:	683b      	ldr	r3, [r7, #0]
   1ef60:	687a      	ldr	r2, [r7, #4]
   1ef62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ef64:	687b      	ldr	r3, [r7, #4]
   1ef66:	681b      	ldr	r3, [r3, #0]
   1ef68:	1c5a      	adds	r2, r3, #1
   1ef6a:	687b      	ldr	r3, [r7, #4]
   1ef6c:	601a      	str	r2, [r3, #0]
}
   1ef6e:	46c0      	nop			; (mov r8, r8)
   1ef70:	46bd      	mov	sp, r7
   1ef72:	b004      	add	sp, #16
   1ef74:	bd80      	pop	{r7, pc}

0001ef76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1ef76:	b580      	push	{r7, lr}
   1ef78:	b084      	sub	sp, #16
   1ef7a:	af00      	add	r7, sp, #0
   1ef7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1ef7e:	687b      	ldr	r3, [r7, #4]
   1ef80:	691b      	ldr	r3, [r3, #16]
   1ef82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ef84:	687b      	ldr	r3, [r7, #4]
   1ef86:	685b      	ldr	r3, [r3, #4]
   1ef88:	687a      	ldr	r2, [r7, #4]
   1ef8a:	6892      	ldr	r2, [r2, #8]
   1ef8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ef8e:	687b      	ldr	r3, [r7, #4]
   1ef90:	689b      	ldr	r3, [r3, #8]
   1ef92:	687a      	ldr	r2, [r7, #4]
   1ef94:	6852      	ldr	r2, [r2, #4]
   1ef96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ef98:	68fb      	ldr	r3, [r7, #12]
   1ef9a:	685a      	ldr	r2, [r3, #4]
   1ef9c:	687b      	ldr	r3, [r7, #4]
   1ef9e:	429a      	cmp	r2, r3
   1efa0:	d103      	bne.n	1efaa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1efa2:	687b      	ldr	r3, [r7, #4]
   1efa4:	689a      	ldr	r2, [r3, #8]
   1efa6:	68fb      	ldr	r3, [r7, #12]
   1efa8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1efaa:	687b      	ldr	r3, [r7, #4]
   1efac:	2200      	movs	r2, #0
   1efae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1efb0:	68fb      	ldr	r3, [r7, #12]
   1efb2:	681b      	ldr	r3, [r3, #0]
   1efb4:	1e5a      	subs	r2, r3, #1
   1efb6:	68fb      	ldr	r3, [r7, #12]
   1efb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1efba:	68fb      	ldr	r3, [r7, #12]
   1efbc:	681b      	ldr	r3, [r3, #0]
}
   1efbe:	0018      	movs	r0, r3
   1efc0:	46bd      	mov	sp, r7
   1efc2:	b004      	add	sp, #16
   1efc4:	bd80      	pop	{r7, pc}
	...

0001efc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1efc8:	b580      	push	{r7, lr}
   1efca:	b084      	sub	sp, #16
   1efcc:	af00      	add	r7, sp, #0
   1efce:	6078      	str	r0, [r7, #4]
   1efd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1efd2:	687b      	ldr	r3, [r7, #4]
   1efd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1efd6:	68fb      	ldr	r3, [r7, #12]
   1efd8:	2b00      	cmp	r3, #0
   1efda:	d101      	bne.n	1efe0 <xQueueGenericReset+0x18>
   1efdc:	b672      	cpsid	i
   1efde:	e7fe      	b.n	1efde <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1efe0:	4b23      	ldr	r3, [pc, #140]	; (1f070 <xQueueGenericReset+0xa8>)
   1efe2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1efe4:	68fb      	ldr	r3, [r7, #12]
   1efe6:	681a      	ldr	r2, [r3, #0]
   1efe8:	68fb      	ldr	r3, [r7, #12]
   1efea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1efec:	68fb      	ldr	r3, [r7, #12]
   1efee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1eff0:	434b      	muls	r3, r1
   1eff2:	18d2      	adds	r2, r2, r3
   1eff4:	68fb      	ldr	r3, [r7, #12]
   1eff6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1eff8:	68fb      	ldr	r3, [r7, #12]
   1effa:	2200      	movs	r2, #0
   1effc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1effe:	68fb      	ldr	r3, [r7, #12]
   1f000:	681a      	ldr	r2, [r3, #0]
   1f002:	68fb      	ldr	r3, [r7, #12]
   1f004:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1f006:	68fb      	ldr	r3, [r7, #12]
   1f008:	681a      	ldr	r2, [r3, #0]
   1f00a:	68fb      	ldr	r3, [r7, #12]
   1f00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f00e:	1e59      	subs	r1, r3, #1
   1f010:	68fb      	ldr	r3, [r7, #12]
   1f012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f014:	434b      	muls	r3, r1
   1f016:	18d2      	adds	r2, r2, r3
   1f018:	68fb      	ldr	r3, [r7, #12]
   1f01a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1f01c:	68fb      	ldr	r3, [r7, #12]
   1f01e:	2244      	movs	r2, #68	; 0x44
   1f020:	21ff      	movs	r1, #255	; 0xff
   1f022:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1f024:	68fb      	ldr	r3, [r7, #12]
   1f026:	2245      	movs	r2, #69	; 0x45
   1f028:	21ff      	movs	r1, #255	; 0xff
   1f02a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1f02c:	683b      	ldr	r3, [r7, #0]
   1f02e:	2b00      	cmp	r3, #0
   1f030:	d10d      	bne.n	1f04e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f032:	68fb      	ldr	r3, [r7, #12]
   1f034:	691b      	ldr	r3, [r3, #16]
   1f036:	2b00      	cmp	r3, #0
   1f038:	d013      	beq.n	1f062 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f03a:	68fb      	ldr	r3, [r7, #12]
   1f03c:	3310      	adds	r3, #16
   1f03e:	0018      	movs	r0, r3
   1f040:	4b0c      	ldr	r3, [pc, #48]	; (1f074 <xQueueGenericReset+0xac>)
   1f042:	4798      	blx	r3
   1f044:	1e03      	subs	r3, r0, #0
   1f046:	d00c      	beq.n	1f062 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1f048:	4b0b      	ldr	r3, [pc, #44]	; (1f078 <xQueueGenericReset+0xb0>)
   1f04a:	4798      	blx	r3
   1f04c:	e009      	b.n	1f062 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1f04e:	68fb      	ldr	r3, [r7, #12]
   1f050:	3310      	adds	r3, #16
   1f052:	0018      	movs	r0, r3
   1f054:	4b09      	ldr	r3, [pc, #36]	; (1f07c <xQueueGenericReset+0xb4>)
   1f056:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1f058:	68fb      	ldr	r3, [r7, #12]
   1f05a:	3324      	adds	r3, #36	; 0x24
   1f05c:	0018      	movs	r0, r3
   1f05e:	4b07      	ldr	r3, [pc, #28]	; (1f07c <xQueueGenericReset+0xb4>)
   1f060:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1f062:	4b07      	ldr	r3, [pc, #28]	; (1f080 <xQueueGenericReset+0xb8>)
   1f064:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1f066:	2301      	movs	r3, #1
}
   1f068:	0018      	movs	r0, r3
   1f06a:	46bd      	mov	sp, r7
   1f06c:	b004      	add	sp, #16
   1f06e:	bd80      	pop	{r7, pc}
   1f070:	0001ecd1 	.word	0x0001ecd1
   1f074:	00020539 	.word	0x00020539
   1f078:	0001ecb1 	.word	0x0001ecb1
   1f07c:	0001ee75 	.word	0x0001ee75
   1f080:	0001ecf5 	.word	0x0001ecf5

0001f084 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1f084:	b590      	push	{r4, r7, lr}
   1f086:	b08b      	sub	sp, #44	; 0x2c
   1f088:	af02      	add	r7, sp, #8
   1f08a:	60f8      	str	r0, [r7, #12]
   1f08c:	60b9      	str	r1, [r7, #8]
   1f08e:	1dfb      	adds	r3, r7, #7
   1f090:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f092:	68fb      	ldr	r3, [r7, #12]
   1f094:	2b00      	cmp	r3, #0
   1f096:	d101      	bne.n	1f09c <xQueueGenericCreate+0x18>
   1f098:	b672      	cpsid	i
   1f09a:	e7fe      	b.n	1f09a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1f09c:	68bb      	ldr	r3, [r7, #8]
   1f09e:	2b00      	cmp	r3, #0
   1f0a0:	d102      	bne.n	1f0a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1f0a2:	2300      	movs	r3, #0
   1f0a4:	61fb      	str	r3, [r7, #28]
   1f0a6:	e003      	b.n	1f0b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f0a8:	68fb      	ldr	r3, [r7, #12]
   1f0aa:	68ba      	ldr	r2, [r7, #8]
   1f0ac:	4353      	muls	r3, r2
   1f0ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1f0b0:	69fb      	ldr	r3, [r7, #28]
   1f0b2:	334c      	adds	r3, #76	; 0x4c
   1f0b4:	0018      	movs	r0, r3
   1f0b6:	4b0c      	ldr	r3, [pc, #48]	; (1f0e8 <xQueueGenericCreate+0x64>)
   1f0b8:	4798      	blx	r3
   1f0ba:	0003      	movs	r3, r0
   1f0bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1f0be:	69bb      	ldr	r3, [r7, #24]
   1f0c0:	2b00      	cmp	r3, #0
   1f0c2:	d00c      	beq.n	1f0de <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1f0c4:	69bb      	ldr	r3, [r7, #24]
   1f0c6:	334c      	adds	r3, #76	; 0x4c
   1f0c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1f0ca:	1dfb      	adds	r3, r7, #7
   1f0cc:	781c      	ldrb	r4, [r3, #0]
   1f0ce:	697a      	ldr	r2, [r7, #20]
   1f0d0:	68b9      	ldr	r1, [r7, #8]
   1f0d2:	68f8      	ldr	r0, [r7, #12]
   1f0d4:	69bb      	ldr	r3, [r7, #24]
   1f0d6:	9300      	str	r3, [sp, #0]
   1f0d8:	0023      	movs	r3, r4
   1f0da:	4c04      	ldr	r4, [pc, #16]	; (1f0ec <xQueueGenericCreate+0x68>)
   1f0dc:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1f0de:	69bb      	ldr	r3, [r7, #24]
	}
   1f0e0:	0018      	movs	r0, r3
   1f0e2:	46bd      	mov	sp, r7
   1f0e4:	b009      	add	sp, #36	; 0x24
   1f0e6:	bd90      	pop	{r4, r7, pc}
   1f0e8:	0001ee0d 	.word	0x0001ee0d
   1f0ec:	0001f0f1 	.word	0x0001f0f1

0001f0f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1f0f0:	b580      	push	{r7, lr}
   1f0f2:	b084      	sub	sp, #16
   1f0f4:	af00      	add	r7, sp, #0
   1f0f6:	60f8      	str	r0, [r7, #12]
   1f0f8:	60b9      	str	r1, [r7, #8]
   1f0fa:	607a      	str	r2, [r7, #4]
   1f0fc:	001a      	movs	r2, r3
   1f0fe:	1cfb      	adds	r3, r7, #3
   1f100:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1f102:	68bb      	ldr	r3, [r7, #8]
   1f104:	2b00      	cmp	r3, #0
   1f106:	d103      	bne.n	1f110 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1f108:	69bb      	ldr	r3, [r7, #24]
   1f10a:	69ba      	ldr	r2, [r7, #24]
   1f10c:	601a      	str	r2, [r3, #0]
   1f10e:	e002      	b.n	1f116 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1f110:	69bb      	ldr	r3, [r7, #24]
   1f112:	687a      	ldr	r2, [r7, #4]
   1f114:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1f116:	69bb      	ldr	r3, [r7, #24]
   1f118:	68fa      	ldr	r2, [r7, #12]
   1f11a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1f11c:	69bb      	ldr	r3, [r7, #24]
   1f11e:	68ba      	ldr	r2, [r7, #8]
   1f120:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1f122:	69bb      	ldr	r3, [r7, #24]
   1f124:	2101      	movs	r1, #1
   1f126:	0018      	movs	r0, r3
   1f128:	4b04      	ldr	r3, [pc, #16]	; (1f13c <prvInitialiseNewQueue+0x4c>)
   1f12a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1f12c:	69bb      	ldr	r3, [r7, #24]
   1f12e:	2200      	movs	r2, #0
   1f130:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1f132:	46c0      	nop			; (mov r8, r8)
   1f134:	46bd      	mov	sp, r7
   1f136:	b004      	add	sp, #16
   1f138:	bd80      	pop	{r7, pc}
   1f13a:	46c0      	nop			; (mov r8, r8)
   1f13c:	0001efc9 	.word	0x0001efc9

0001f140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1f140:	b580      	push	{r7, lr}
   1f142:	b08a      	sub	sp, #40	; 0x28
   1f144:	af00      	add	r7, sp, #0
   1f146:	60f8      	str	r0, [r7, #12]
   1f148:	60b9      	str	r1, [r7, #8]
   1f14a:	607a      	str	r2, [r7, #4]
   1f14c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1f14e:	2300      	movs	r3, #0
   1f150:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f152:	68fb      	ldr	r3, [r7, #12]
   1f154:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1f156:	6a3b      	ldr	r3, [r7, #32]
   1f158:	2b00      	cmp	r3, #0
   1f15a:	d101      	bne.n	1f160 <xQueueGenericSend+0x20>
   1f15c:	b672      	cpsid	i
   1f15e:	e7fe      	b.n	1f15e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f160:	68bb      	ldr	r3, [r7, #8]
   1f162:	2b00      	cmp	r3, #0
   1f164:	d103      	bne.n	1f16e <xQueueGenericSend+0x2e>
   1f166:	6a3b      	ldr	r3, [r7, #32]
   1f168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f16a:	2b00      	cmp	r3, #0
   1f16c:	d101      	bne.n	1f172 <xQueueGenericSend+0x32>
   1f16e:	2301      	movs	r3, #1
   1f170:	e000      	b.n	1f174 <xQueueGenericSend+0x34>
   1f172:	2300      	movs	r3, #0
   1f174:	2b00      	cmp	r3, #0
   1f176:	d101      	bne.n	1f17c <xQueueGenericSend+0x3c>
   1f178:	b672      	cpsid	i
   1f17a:	e7fe      	b.n	1f17a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f17c:	683b      	ldr	r3, [r7, #0]
   1f17e:	2b02      	cmp	r3, #2
   1f180:	d103      	bne.n	1f18a <xQueueGenericSend+0x4a>
   1f182:	6a3b      	ldr	r3, [r7, #32]
   1f184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f186:	2b01      	cmp	r3, #1
   1f188:	d101      	bne.n	1f18e <xQueueGenericSend+0x4e>
   1f18a:	2301      	movs	r3, #1
   1f18c:	e000      	b.n	1f190 <xQueueGenericSend+0x50>
   1f18e:	2300      	movs	r3, #0
   1f190:	2b00      	cmp	r3, #0
   1f192:	d101      	bne.n	1f198 <xQueueGenericSend+0x58>
   1f194:	b672      	cpsid	i
   1f196:	e7fe      	b.n	1f196 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f198:	4b53      	ldr	r3, [pc, #332]	; (1f2e8 <xQueueGenericSend+0x1a8>)
   1f19a:	4798      	blx	r3
   1f19c:	1e03      	subs	r3, r0, #0
   1f19e:	d102      	bne.n	1f1a6 <xQueueGenericSend+0x66>
   1f1a0:	687b      	ldr	r3, [r7, #4]
   1f1a2:	2b00      	cmp	r3, #0
   1f1a4:	d101      	bne.n	1f1aa <xQueueGenericSend+0x6a>
   1f1a6:	2301      	movs	r3, #1
   1f1a8:	e000      	b.n	1f1ac <xQueueGenericSend+0x6c>
   1f1aa:	2300      	movs	r3, #0
   1f1ac:	2b00      	cmp	r3, #0
   1f1ae:	d101      	bne.n	1f1b4 <xQueueGenericSend+0x74>
   1f1b0:	b672      	cpsid	i
   1f1b2:	e7fe      	b.n	1f1b2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1f1b4:	4b4d      	ldr	r3, [pc, #308]	; (1f2ec <xQueueGenericSend+0x1ac>)
   1f1b6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f1b8:	6a3b      	ldr	r3, [r7, #32]
   1f1ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f1bc:	6a3b      	ldr	r3, [r7, #32]
   1f1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f1c0:	429a      	cmp	r2, r3
   1f1c2:	d302      	bcc.n	1f1ca <xQueueGenericSend+0x8a>
   1f1c4:	683b      	ldr	r3, [r7, #0]
   1f1c6:	2b02      	cmp	r3, #2
   1f1c8:	d12d      	bne.n	1f226 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f1ca:	683a      	ldr	r2, [r7, #0]
   1f1cc:	68b9      	ldr	r1, [r7, #8]
   1f1ce:	6a3b      	ldr	r3, [r7, #32]
   1f1d0:	0018      	movs	r0, r3
   1f1d2:	4b47      	ldr	r3, [pc, #284]	; (1f2f0 <xQueueGenericSend+0x1b0>)
   1f1d4:	4798      	blx	r3
   1f1d6:	0003      	movs	r3, r0
   1f1d8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f1da:	6a3b      	ldr	r3, [r7, #32]
   1f1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f1de:	2b00      	cmp	r3, #0
   1f1e0:	d00a      	beq.n	1f1f8 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f1e2:	683a      	ldr	r2, [r7, #0]
   1f1e4:	6a3b      	ldr	r3, [r7, #32]
   1f1e6:	0011      	movs	r1, r2
   1f1e8:	0018      	movs	r0, r3
   1f1ea:	4b42      	ldr	r3, [pc, #264]	; (1f2f4 <xQueueGenericSend+0x1b4>)
   1f1ec:	4798      	blx	r3
   1f1ee:	1e03      	subs	r3, r0, #0
   1f1f0:	d015      	beq.n	1f21e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1f1f2:	4b41      	ldr	r3, [pc, #260]	; (1f2f8 <xQueueGenericSend+0x1b8>)
   1f1f4:	4798      	blx	r3
   1f1f6:	e012      	b.n	1f21e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f1f8:	6a3b      	ldr	r3, [r7, #32]
   1f1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f1fc:	2b00      	cmp	r3, #0
   1f1fe:	d009      	beq.n	1f214 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f200:	6a3b      	ldr	r3, [r7, #32]
   1f202:	3324      	adds	r3, #36	; 0x24
   1f204:	0018      	movs	r0, r3
   1f206:	4b3d      	ldr	r3, [pc, #244]	; (1f2fc <xQueueGenericSend+0x1bc>)
   1f208:	4798      	blx	r3
   1f20a:	1e03      	subs	r3, r0, #0
   1f20c:	d007      	beq.n	1f21e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1f20e:	4b3a      	ldr	r3, [pc, #232]	; (1f2f8 <xQueueGenericSend+0x1b8>)
   1f210:	4798      	blx	r3
   1f212:	e004      	b.n	1f21e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1f214:	69fb      	ldr	r3, [r7, #28]
   1f216:	2b00      	cmp	r3, #0
   1f218:	d001      	beq.n	1f21e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1f21a:	4b37      	ldr	r3, [pc, #220]	; (1f2f8 <xQueueGenericSend+0x1b8>)
   1f21c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1f21e:	4b38      	ldr	r3, [pc, #224]	; (1f300 <xQueueGenericSend+0x1c0>)
   1f220:	4798      	blx	r3
				return pdPASS;
   1f222:	2301      	movs	r3, #1
   1f224:	e05c      	b.n	1f2e0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f226:	687b      	ldr	r3, [r7, #4]
   1f228:	2b00      	cmp	r3, #0
   1f22a:	d103      	bne.n	1f234 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f22c:	4b34      	ldr	r3, [pc, #208]	; (1f300 <xQueueGenericSend+0x1c0>)
   1f22e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1f230:	2300      	movs	r3, #0
   1f232:	e055      	b.n	1f2e0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f236:	2b00      	cmp	r3, #0
   1f238:	d106      	bne.n	1f248 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f23a:	2314      	movs	r3, #20
   1f23c:	18fb      	adds	r3, r7, r3
   1f23e:	0018      	movs	r0, r3
   1f240:	4b30      	ldr	r3, [pc, #192]	; (1f304 <xQueueGenericSend+0x1c4>)
   1f242:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f244:	2301      	movs	r3, #1
   1f246:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f248:	4b2d      	ldr	r3, [pc, #180]	; (1f300 <xQueueGenericSend+0x1c0>)
   1f24a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f24c:	4b2e      	ldr	r3, [pc, #184]	; (1f308 <xQueueGenericSend+0x1c8>)
   1f24e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f250:	4b26      	ldr	r3, [pc, #152]	; (1f2ec <xQueueGenericSend+0x1ac>)
   1f252:	4798      	blx	r3
   1f254:	6a3b      	ldr	r3, [r7, #32]
   1f256:	2244      	movs	r2, #68	; 0x44
   1f258:	5c9b      	ldrb	r3, [r3, r2]
   1f25a:	b25b      	sxtb	r3, r3
   1f25c:	3301      	adds	r3, #1
   1f25e:	d103      	bne.n	1f268 <xQueueGenericSend+0x128>
   1f260:	6a3b      	ldr	r3, [r7, #32]
   1f262:	2244      	movs	r2, #68	; 0x44
   1f264:	2100      	movs	r1, #0
   1f266:	5499      	strb	r1, [r3, r2]
   1f268:	6a3b      	ldr	r3, [r7, #32]
   1f26a:	2245      	movs	r2, #69	; 0x45
   1f26c:	5c9b      	ldrb	r3, [r3, r2]
   1f26e:	b25b      	sxtb	r3, r3
   1f270:	3301      	adds	r3, #1
   1f272:	d103      	bne.n	1f27c <xQueueGenericSend+0x13c>
   1f274:	6a3b      	ldr	r3, [r7, #32]
   1f276:	2245      	movs	r2, #69	; 0x45
   1f278:	2100      	movs	r1, #0
   1f27a:	5499      	strb	r1, [r3, r2]
   1f27c:	4b20      	ldr	r3, [pc, #128]	; (1f300 <xQueueGenericSend+0x1c0>)
   1f27e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f280:	1d3a      	adds	r2, r7, #4
   1f282:	2314      	movs	r3, #20
   1f284:	18fb      	adds	r3, r7, r3
   1f286:	0011      	movs	r1, r2
   1f288:	0018      	movs	r0, r3
   1f28a:	4b20      	ldr	r3, [pc, #128]	; (1f30c <xQueueGenericSend+0x1cc>)
   1f28c:	4798      	blx	r3
   1f28e:	1e03      	subs	r3, r0, #0
   1f290:	d11f      	bne.n	1f2d2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1f292:	6a3b      	ldr	r3, [r7, #32]
   1f294:	0018      	movs	r0, r3
   1f296:	4b1e      	ldr	r3, [pc, #120]	; (1f310 <xQueueGenericSend+0x1d0>)
   1f298:	4798      	blx	r3
   1f29a:	1e03      	subs	r3, r0, #0
   1f29c:	d012      	beq.n	1f2c4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1f29e:	6a3b      	ldr	r3, [r7, #32]
   1f2a0:	3310      	adds	r3, #16
   1f2a2:	687a      	ldr	r2, [r7, #4]
   1f2a4:	0011      	movs	r1, r2
   1f2a6:	0018      	movs	r0, r3
   1f2a8:	4b1a      	ldr	r3, [pc, #104]	; (1f314 <xQueueGenericSend+0x1d4>)
   1f2aa:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1f2ac:	6a3b      	ldr	r3, [r7, #32]
   1f2ae:	0018      	movs	r0, r3
   1f2b0:	4b19      	ldr	r3, [pc, #100]	; (1f318 <xQueueGenericSend+0x1d8>)
   1f2b2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1f2b4:	4b19      	ldr	r3, [pc, #100]	; (1f31c <xQueueGenericSend+0x1dc>)
   1f2b6:	4798      	blx	r3
   1f2b8:	1e03      	subs	r3, r0, #0
   1f2ba:	d000      	beq.n	1f2be <xQueueGenericSend+0x17e>
   1f2bc:	e77a      	b.n	1f1b4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1f2be:	4b0e      	ldr	r3, [pc, #56]	; (1f2f8 <xQueueGenericSend+0x1b8>)
   1f2c0:	4798      	blx	r3
   1f2c2:	e777      	b.n	1f1b4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1f2c4:	6a3b      	ldr	r3, [r7, #32]
   1f2c6:	0018      	movs	r0, r3
   1f2c8:	4b13      	ldr	r3, [pc, #76]	; (1f318 <xQueueGenericSend+0x1d8>)
   1f2ca:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f2cc:	4b13      	ldr	r3, [pc, #76]	; (1f31c <xQueueGenericSend+0x1dc>)
   1f2ce:	4798      	blx	r3
   1f2d0:	e770      	b.n	1f1b4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1f2d2:	6a3b      	ldr	r3, [r7, #32]
   1f2d4:	0018      	movs	r0, r3
   1f2d6:	4b10      	ldr	r3, [pc, #64]	; (1f318 <xQueueGenericSend+0x1d8>)
   1f2d8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f2da:	4b10      	ldr	r3, [pc, #64]	; (1f31c <xQueueGenericSend+0x1dc>)
   1f2dc:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1f2de:	2300      	movs	r3, #0
		}
	}
}
   1f2e0:	0018      	movs	r0, r3
   1f2e2:	46bd      	mov	sp, r7
   1f2e4:	b00a      	add	sp, #40	; 0x28
   1f2e6:	bd80      	pop	{r7, pc}
   1f2e8:	00020871 	.word	0x00020871
   1f2ec:	0001ecd1 	.word	0x0001ecd1
   1f2f0:	0001f801 	.word	0x0001f801
   1f2f4:	0001fb05 	.word	0x0001fb05
   1f2f8:	0001ecb1 	.word	0x0001ecb1
   1f2fc:	00020539 	.word	0x00020539
   1f300:	0001ecf5 	.word	0x0001ecf5
   1f304:	000205f9 	.word	0x000205f9
   1f308:	00020101 	.word	0x00020101
   1f30c:	00020621 	.word	0x00020621
   1f310:	0001fa55 	.word	0x0001fa55
   1f314:	000204a1 	.word	0x000204a1
   1f318:	0001f931 	.word	0x0001f931
   1f31c:	00020119 	.word	0x00020119

0001f320 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1f320:	b580      	push	{r7, lr}
   1f322:	b088      	sub	sp, #32
   1f324:	af00      	add	r7, sp, #0
   1f326:	60f8      	str	r0, [r7, #12]
   1f328:	60b9      	str	r1, [r7, #8]
   1f32a:	607a      	str	r2, [r7, #4]
   1f32c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f32e:	68fb      	ldr	r3, [r7, #12]
   1f330:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1f332:	69bb      	ldr	r3, [r7, #24]
   1f334:	2b00      	cmp	r3, #0
   1f336:	d101      	bne.n	1f33c <xQueueGenericSendFromISR+0x1c>
   1f338:	b672      	cpsid	i
   1f33a:	e7fe      	b.n	1f33a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f33c:	68bb      	ldr	r3, [r7, #8]
   1f33e:	2b00      	cmp	r3, #0
   1f340:	d103      	bne.n	1f34a <xQueueGenericSendFromISR+0x2a>
   1f342:	69bb      	ldr	r3, [r7, #24]
   1f344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f346:	2b00      	cmp	r3, #0
   1f348:	d101      	bne.n	1f34e <xQueueGenericSendFromISR+0x2e>
   1f34a:	2301      	movs	r3, #1
   1f34c:	e000      	b.n	1f350 <xQueueGenericSendFromISR+0x30>
   1f34e:	2300      	movs	r3, #0
   1f350:	2b00      	cmp	r3, #0
   1f352:	d101      	bne.n	1f358 <xQueueGenericSendFromISR+0x38>
   1f354:	b672      	cpsid	i
   1f356:	e7fe      	b.n	1f356 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f358:	683b      	ldr	r3, [r7, #0]
   1f35a:	2b02      	cmp	r3, #2
   1f35c:	d103      	bne.n	1f366 <xQueueGenericSendFromISR+0x46>
   1f35e:	69bb      	ldr	r3, [r7, #24]
   1f360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f362:	2b01      	cmp	r3, #1
   1f364:	d101      	bne.n	1f36a <xQueueGenericSendFromISR+0x4a>
   1f366:	2301      	movs	r3, #1
   1f368:	e000      	b.n	1f36c <xQueueGenericSendFromISR+0x4c>
   1f36a:	2300      	movs	r3, #0
   1f36c:	2b00      	cmp	r3, #0
   1f36e:	d101      	bne.n	1f374 <xQueueGenericSendFromISR+0x54>
   1f370:	b672      	cpsid	i
   1f372:	e7fe      	b.n	1f372 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1f374:	4b2d      	ldr	r3, [pc, #180]	; (1f42c <xQueueGenericSendFromISR+0x10c>)
   1f376:	4798      	blx	r3
   1f378:	0003      	movs	r3, r0
   1f37a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f37c:	69bb      	ldr	r3, [r7, #24]
   1f37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f380:	69bb      	ldr	r3, [r7, #24]
   1f382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f384:	429a      	cmp	r2, r3
   1f386:	d302      	bcc.n	1f38e <xQueueGenericSendFromISR+0x6e>
   1f388:	683b      	ldr	r3, [r7, #0]
   1f38a:	2b02      	cmp	r3, #2
   1f38c:	d142      	bne.n	1f414 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1f38e:	2313      	movs	r3, #19
   1f390:	18fb      	adds	r3, r7, r3
   1f392:	69ba      	ldr	r2, [r7, #24]
   1f394:	2145      	movs	r1, #69	; 0x45
   1f396:	5c52      	ldrb	r2, [r2, r1]
   1f398:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f39a:	683a      	ldr	r2, [r7, #0]
   1f39c:	68b9      	ldr	r1, [r7, #8]
   1f39e:	69bb      	ldr	r3, [r7, #24]
   1f3a0:	0018      	movs	r0, r3
   1f3a2:	4b23      	ldr	r3, [pc, #140]	; (1f430 <xQueueGenericSendFromISR+0x110>)
   1f3a4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1f3a6:	2313      	movs	r3, #19
   1f3a8:	18fb      	adds	r3, r7, r3
   1f3aa:	781b      	ldrb	r3, [r3, #0]
   1f3ac:	b25b      	sxtb	r3, r3
   1f3ae:	3301      	adds	r3, #1
   1f3b0:	d124      	bne.n	1f3fc <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f3b2:	69bb      	ldr	r3, [r7, #24]
   1f3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f3b6:	2b00      	cmp	r3, #0
   1f3b8:	d00e      	beq.n	1f3d8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f3ba:	683a      	ldr	r2, [r7, #0]
   1f3bc:	69bb      	ldr	r3, [r7, #24]
   1f3be:	0011      	movs	r1, r2
   1f3c0:	0018      	movs	r0, r3
   1f3c2:	4b1c      	ldr	r3, [pc, #112]	; (1f434 <xQueueGenericSendFromISR+0x114>)
   1f3c4:	4798      	blx	r3
   1f3c6:	1e03      	subs	r3, r0, #0
   1f3c8:	d021      	beq.n	1f40e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1f3ca:	687b      	ldr	r3, [r7, #4]
   1f3cc:	2b00      	cmp	r3, #0
   1f3ce:	d01e      	beq.n	1f40e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1f3d0:	687b      	ldr	r3, [r7, #4]
   1f3d2:	2201      	movs	r2, #1
   1f3d4:	601a      	str	r2, [r3, #0]
   1f3d6:	e01a      	b.n	1f40e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f3d8:	69bb      	ldr	r3, [r7, #24]
   1f3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f3dc:	2b00      	cmp	r3, #0
   1f3de:	d016      	beq.n	1f40e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f3e0:	69bb      	ldr	r3, [r7, #24]
   1f3e2:	3324      	adds	r3, #36	; 0x24
   1f3e4:	0018      	movs	r0, r3
   1f3e6:	4b14      	ldr	r3, [pc, #80]	; (1f438 <xQueueGenericSendFromISR+0x118>)
   1f3e8:	4798      	blx	r3
   1f3ea:	1e03      	subs	r3, r0, #0
   1f3ec:	d00f      	beq.n	1f40e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1f3ee:	687b      	ldr	r3, [r7, #4]
   1f3f0:	2b00      	cmp	r3, #0
   1f3f2:	d00c      	beq.n	1f40e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1f3f4:	687b      	ldr	r3, [r7, #4]
   1f3f6:	2201      	movs	r2, #1
   1f3f8:	601a      	str	r2, [r3, #0]
   1f3fa:	e008      	b.n	1f40e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1f3fc:	2313      	movs	r3, #19
   1f3fe:	18fb      	adds	r3, r7, r3
   1f400:	781b      	ldrb	r3, [r3, #0]
   1f402:	3301      	adds	r3, #1
   1f404:	b2db      	uxtb	r3, r3
   1f406:	b259      	sxtb	r1, r3
   1f408:	69bb      	ldr	r3, [r7, #24]
   1f40a:	2245      	movs	r2, #69	; 0x45
   1f40c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1f40e:	2301      	movs	r3, #1
   1f410:	61fb      	str	r3, [r7, #28]
		{
   1f412:	e001      	b.n	1f418 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1f414:	2300      	movs	r3, #0
   1f416:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1f418:	697b      	ldr	r3, [r7, #20]
   1f41a:	0018      	movs	r0, r3
   1f41c:	4b07      	ldr	r3, [pc, #28]	; (1f43c <xQueueGenericSendFromISR+0x11c>)
   1f41e:	4798      	blx	r3

	return xReturn;
   1f420:	69fb      	ldr	r3, [r7, #28]
}
   1f422:	0018      	movs	r0, r3
   1f424:	46bd      	mov	sp, r7
   1f426:	b008      	add	sp, #32
   1f428:	bd80      	pop	{r7, pc}
   1f42a:	46c0      	nop			; (mov r8, r8)
   1f42c:	0001ed25 	.word	0x0001ed25
   1f430:	0001f801 	.word	0x0001f801
   1f434:	0001fb05 	.word	0x0001fb05
   1f438:	00020539 	.word	0x00020539
   1f43c:	0001ed31 	.word	0x0001ed31

0001f440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1f440:	b580      	push	{r7, lr}
   1f442:	b08a      	sub	sp, #40	; 0x28
   1f444:	af00      	add	r7, sp, #0
   1f446:	60f8      	str	r0, [r7, #12]
   1f448:	60b9      	str	r1, [r7, #8]
   1f44a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1f44c:	2300      	movs	r3, #0
   1f44e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f450:	68fb      	ldr	r3, [r7, #12]
   1f452:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f454:	6a3b      	ldr	r3, [r7, #32]
   1f456:	2b00      	cmp	r3, #0
   1f458:	d101      	bne.n	1f45e <xQueueReceive+0x1e>
   1f45a:	b672      	cpsid	i
   1f45c:	e7fe      	b.n	1f45c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f45e:	68bb      	ldr	r3, [r7, #8]
   1f460:	2b00      	cmp	r3, #0
   1f462:	d103      	bne.n	1f46c <xQueueReceive+0x2c>
   1f464:	6a3b      	ldr	r3, [r7, #32]
   1f466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f468:	2b00      	cmp	r3, #0
   1f46a:	d101      	bne.n	1f470 <xQueueReceive+0x30>
   1f46c:	2301      	movs	r3, #1
   1f46e:	e000      	b.n	1f472 <xQueueReceive+0x32>
   1f470:	2300      	movs	r3, #0
   1f472:	2b00      	cmp	r3, #0
   1f474:	d101      	bne.n	1f47a <xQueueReceive+0x3a>
   1f476:	b672      	cpsid	i
   1f478:	e7fe      	b.n	1f478 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f47a:	4b4c      	ldr	r3, [pc, #304]	; (1f5ac <xQueueReceive+0x16c>)
   1f47c:	4798      	blx	r3
   1f47e:	1e03      	subs	r3, r0, #0
   1f480:	d102      	bne.n	1f488 <xQueueReceive+0x48>
   1f482:	687b      	ldr	r3, [r7, #4]
   1f484:	2b00      	cmp	r3, #0
   1f486:	d101      	bne.n	1f48c <xQueueReceive+0x4c>
   1f488:	2301      	movs	r3, #1
   1f48a:	e000      	b.n	1f48e <xQueueReceive+0x4e>
   1f48c:	2300      	movs	r3, #0
   1f48e:	2b00      	cmp	r3, #0
   1f490:	d101      	bne.n	1f496 <xQueueReceive+0x56>
   1f492:	b672      	cpsid	i
   1f494:	e7fe      	b.n	1f494 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f496:	4b46      	ldr	r3, [pc, #280]	; (1f5b0 <xQueueReceive+0x170>)
   1f498:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f49a:	6a3b      	ldr	r3, [r7, #32]
   1f49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f49e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f4a0:	69fb      	ldr	r3, [r7, #28]
   1f4a2:	2b00      	cmp	r3, #0
   1f4a4:	d01a      	beq.n	1f4dc <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1f4a6:	68ba      	ldr	r2, [r7, #8]
   1f4a8:	6a3b      	ldr	r3, [r7, #32]
   1f4aa:	0011      	movs	r1, r2
   1f4ac:	0018      	movs	r0, r3
   1f4ae:	4b41      	ldr	r3, [pc, #260]	; (1f5b4 <xQueueReceive+0x174>)
   1f4b0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1f4b2:	69fb      	ldr	r3, [r7, #28]
   1f4b4:	1e5a      	subs	r2, r3, #1
   1f4b6:	6a3b      	ldr	r3, [r7, #32]
   1f4b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f4ba:	6a3b      	ldr	r3, [r7, #32]
   1f4bc:	691b      	ldr	r3, [r3, #16]
   1f4be:	2b00      	cmp	r3, #0
   1f4c0:	d008      	beq.n	1f4d4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f4c2:	6a3b      	ldr	r3, [r7, #32]
   1f4c4:	3310      	adds	r3, #16
   1f4c6:	0018      	movs	r0, r3
   1f4c8:	4b3b      	ldr	r3, [pc, #236]	; (1f5b8 <xQueueReceive+0x178>)
   1f4ca:	4798      	blx	r3
   1f4cc:	1e03      	subs	r3, r0, #0
   1f4ce:	d001      	beq.n	1f4d4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f4d0:	4b3a      	ldr	r3, [pc, #232]	; (1f5bc <xQueueReceive+0x17c>)
   1f4d2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f4d4:	4b3a      	ldr	r3, [pc, #232]	; (1f5c0 <xQueueReceive+0x180>)
   1f4d6:	4798      	blx	r3
				return pdPASS;
   1f4d8:	2301      	movs	r3, #1
   1f4da:	e062      	b.n	1f5a2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f4dc:	687b      	ldr	r3, [r7, #4]
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	d103      	bne.n	1f4ea <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f4e2:	4b37      	ldr	r3, [pc, #220]	; (1f5c0 <xQueueReceive+0x180>)
   1f4e4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f4e6:	2300      	movs	r3, #0
   1f4e8:	e05b      	b.n	1f5a2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f4ec:	2b00      	cmp	r3, #0
   1f4ee:	d106      	bne.n	1f4fe <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f4f0:	2314      	movs	r3, #20
   1f4f2:	18fb      	adds	r3, r7, r3
   1f4f4:	0018      	movs	r0, r3
   1f4f6:	4b33      	ldr	r3, [pc, #204]	; (1f5c4 <xQueueReceive+0x184>)
   1f4f8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f4fa:	2301      	movs	r3, #1
   1f4fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f4fe:	4b30      	ldr	r3, [pc, #192]	; (1f5c0 <xQueueReceive+0x180>)
   1f500:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f502:	4b31      	ldr	r3, [pc, #196]	; (1f5c8 <xQueueReceive+0x188>)
   1f504:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f506:	4b2a      	ldr	r3, [pc, #168]	; (1f5b0 <xQueueReceive+0x170>)
   1f508:	4798      	blx	r3
   1f50a:	6a3b      	ldr	r3, [r7, #32]
   1f50c:	2244      	movs	r2, #68	; 0x44
   1f50e:	5c9b      	ldrb	r3, [r3, r2]
   1f510:	b25b      	sxtb	r3, r3
   1f512:	3301      	adds	r3, #1
   1f514:	d103      	bne.n	1f51e <xQueueReceive+0xde>
   1f516:	6a3b      	ldr	r3, [r7, #32]
   1f518:	2244      	movs	r2, #68	; 0x44
   1f51a:	2100      	movs	r1, #0
   1f51c:	5499      	strb	r1, [r3, r2]
   1f51e:	6a3b      	ldr	r3, [r7, #32]
   1f520:	2245      	movs	r2, #69	; 0x45
   1f522:	5c9b      	ldrb	r3, [r3, r2]
   1f524:	b25b      	sxtb	r3, r3
   1f526:	3301      	adds	r3, #1
   1f528:	d103      	bne.n	1f532 <xQueueReceive+0xf2>
   1f52a:	6a3b      	ldr	r3, [r7, #32]
   1f52c:	2245      	movs	r2, #69	; 0x45
   1f52e:	2100      	movs	r1, #0
   1f530:	5499      	strb	r1, [r3, r2]
   1f532:	4b23      	ldr	r3, [pc, #140]	; (1f5c0 <xQueueReceive+0x180>)
   1f534:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f536:	1d3a      	adds	r2, r7, #4
   1f538:	2314      	movs	r3, #20
   1f53a:	18fb      	adds	r3, r7, r3
   1f53c:	0011      	movs	r1, r2
   1f53e:	0018      	movs	r0, r3
   1f540:	4b22      	ldr	r3, [pc, #136]	; (1f5cc <xQueueReceive+0x18c>)
   1f542:	4798      	blx	r3
   1f544:	1e03      	subs	r3, r0, #0
   1f546:	d11e      	bne.n	1f586 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f548:	6a3b      	ldr	r3, [r7, #32]
   1f54a:	0018      	movs	r0, r3
   1f54c:	4b20      	ldr	r3, [pc, #128]	; (1f5d0 <xQueueReceive+0x190>)
   1f54e:	4798      	blx	r3
   1f550:	1e03      	subs	r3, r0, #0
   1f552:	d011      	beq.n	1f578 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f554:	6a3b      	ldr	r3, [r7, #32]
   1f556:	3324      	adds	r3, #36	; 0x24
   1f558:	687a      	ldr	r2, [r7, #4]
   1f55a:	0011      	movs	r1, r2
   1f55c:	0018      	movs	r0, r3
   1f55e:	4b1d      	ldr	r3, [pc, #116]	; (1f5d4 <xQueueReceive+0x194>)
   1f560:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f562:	6a3b      	ldr	r3, [r7, #32]
   1f564:	0018      	movs	r0, r3
   1f566:	4b1c      	ldr	r3, [pc, #112]	; (1f5d8 <xQueueReceive+0x198>)
   1f568:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f56a:	4b1c      	ldr	r3, [pc, #112]	; (1f5dc <xQueueReceive+0x19c>)
   1f56c:	4798      	blx	r3
   1f56e:	1e03      	subs	r3, r0, #0
   1f570:	d191      	bne.n	1f496 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1f572:	4b12      	ldr	r3, [pc, #72]	; (1f5bc <xQueueReceive+0x17c>)
   1f574:	4798      	blx	r3
   1f576:	e78e      	b.n	1f496 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1f578:	6a3b      	ldr	r3, [r7, #32]
   1f57a:	0018      	movs	r0, r3
   1f57c:	4b16      	ldr	r3, [pc, #88]	; (1f5d8 <xQueueReceive+0x198>)
   1f57e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f580:	4b16      	ldr	r3, [pc, #88]	; (1f5dc <xQueueReceive+0x19c>)
   1f582:	4798      	blx	r3
   1f584:	e787      	b.n	1f496 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1f586:	6a3b      	ldr	r3, [r7, #32]
   1f588:	0018      	movs	r0, r3
   1f58a:	4b13      	ldr	r3, [pc, #76]	; (1f5d8 <xQueueReceive+0x198>)
   1f58c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f58e:	4b13      	ldr	r3, [pc, #76]	; (1f5dc <xQueueReceive+0x19c>)
   1f590:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f592:	6a3b      	ldr	r3, [r7, #32]
   1f594:	0018      	movs	r0, r3
   1f596:	4b0e      	ldr	r3, [pc, #56]	; (1f5d0 <xQueueReceive+0x190>)
   1f598:	4798      	blx	r3
   1f59a:	1e03      	subs	r3, r0, #0
   1f59c:	d100      	bne.n	1f5a0 <xQueueReceive+0x160>
   1f59e:	e77a      	b.n	1f496 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f5a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f5a2:	0018      	movs	r0, r3
   1f5a4:	46bd      	mov	sp, r7
   1f5a6:	b00a      	add	sp, #40	; 0x28
   1f5a8:	bd80      	pop	{r7, pc}
   1f5aa:	46c0      	nop			; (mov r8, r8)
   1f5ac:	00020871 	.word	0x00020871
   1f5b0:	0001ecd1 	.word	0x0001ecd1
   1f5b4:	0001f8e1 	.word	0x0001f8e1
   1f5b8:	00020539 	.word	0x00020539
   1f5bc:	0001ecb1 	.word	0x0001ecb1
   1f5c0:	0001ecf5 	.word	0x0001ecf5
   1f5c4:	000205f9 	.word	0x000205f9
   1f5c8:	00020101 	.word	0x00020101
   1f5cc:	00020621 	.word	0x00020621
   1f5d0:	0001fa21 	.word	0x0001fa21
   1f5d4:	000204a1 	.word	0x000204a1
   1f5d8:	0001f931 	.word	0x0001f931
   1f5dc:	00020119 	.word	0x00020119

0001f5e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1f5e0:	b580      	push	{r7, lr}
   1f5e2:	b08a      	sub	sp, #40	; 0x28
   1f5e4:	af00      	add	r7, sp, #0
   1f5e6:	6078      	str	r0, [r7, #4]
   1f5e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1f5ea:	2300      	movs	r3, #0
   1f5ec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f5ee:	687b      	ldr	r3, [r7, #4]
   1f5f0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1f5f2:	2300      	movs	r3, #0
   1f5f4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f5f6:	69fb      	ldr	r3, [r7, #28]
   1f5f8:	2b00      	cmp	r3, #0
   1f5fa:	d101      	bne.n	1f600 <xQueueSemaphoreTake+0x20>
   1f5fc:	b672      	cpsid	i
   1f5fe:	e7fe      	b.n	1f5fe <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1f600:	69fb      	ldr	r3, [r7, #28]
   1f602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f604:	2b00      	cmp	r3, #0
   1f606:	d001      	beq.n	1f60c <xQueueSemaphoreTake+0x2c>
   1f608:	b672      	cpsid	i
   1f60a:	e7fe      	b.n	1f60a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f60c:	4b61      	ldr	r3, [pc, #388]	; (1f794 <xQueueSemaphoreTake+0x1b4>)
   1f60e:	4798      	blx	r3
   1f610:	1e03      	subs	r3, r0, #0
   1f612:	d102      	bne.n	1f61a <xQueueSemaphoreTake+0x3a>
   1f614:	683b      	ldr	r3, [r7, #0]
   1f616:	2b00      	cmp	r3, #0
   1f618:	d101      	bne.n	1f61e <xQueueSemaphoreTake+0x3e>
   1f61a:	2301      	movs	r3, #1
   1f61c:	e000      	b.n	1f620 <xQueueSemaphoreTake+0x40>
   1f61e:	2300      	movs	r3, #0
   1f620:	2b00      	cmp	r3, #0
   1f622:	d101      	bne.n	1f628 <xQueueSemaphoreTake+0x48>
   1f624:	b672      	cpsid	i
   1f626:	e7fe      	b.n	1f626 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f628:	4b5b      	ldr	r3, [pc, #364]	; (1f798 <xQueueSemaphoreTake+0x1b8>)
   1f62a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1f62c:	69fb      	ldr	r3, [r7, #28]
   1f62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f630:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1f632:	69bb      	ldr	r3, [r7, #24]
   1f634:	2b00      	cmp	r3, #0
   1f636:	d01d      	beq.n	1f674 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1f638:	69bb      	ldr	r3, [r7, #24]
   1f63a:	1e5a      	subs	r2, r3, #1
   1f63c:	69fb      	ldr	r3, [r7, #28]
   1f63e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f640:	69fb      	ldr	r3, [r7, #28]
   1f642:	681b      	ldr	r3, [r3, #0]
   1f644:	2b00      	cmp	r3, #0
   1f646:	d104      	bne.n	1f652 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1f648:	4b54      	ldr	r3, [pc, #336]	; (1f79c <xQueueSemaphoreTake+0x1bc>)
   1f64a:	4798      	blx	r3
   1f64c:	0002      	movs	r2, r0
   1f64e:	69fb      	ldr	r3, [r7, #28]
   1f650:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f652:	69fb      	ldr	r3, [r7, #28]
   1f654:	691b      	ldr	r3, [r3, #16]
   1f656:	2b00      	cmp	r3, #0
   1f658:	d008      	beq.n	1f66c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f65a:	69fb      	ldr	r3, [r7, #28]
   1f65c:	3310      	adds	r3, #16
   1f65e:	0018      	movs	r0, r3
   1f660:	4b4f      	ldr	r3, [pc, #316]	; (1f7a0 <xQueueSemaphoreTake+0x1c0>)
   1f662:	4798      	blx	r3
   1f664:	1e03      	subs	r3, r0, #0
   1f666:	d001      	beq.n	1f66c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f668:	4b4e      	ldr	r3, [pc, #312]	; (1f7a4 <xQueueSemaphoreTake+0x1c4>)
   1f66a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f66c:	4b4e      	ldr	r3, [pc, #312]	; (1f7a8 <xQueueSemaphoreTake+0x1c8>)
   1f66e:	4798      	blx	r3
				return pdPASS;
   1f670:	2301      	movs	r3, #1
   1f672:	e08b      	b.n	1f78c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f674:	683b      	ldr	r3, [r7, #0]
   1f676:	2b00      	cmp	r3, #0
   1f678:	d108      	bne.n	1f68c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1f67a:	6a3b      	ldr	r3, [r7, #32]
   1f67c:	2b00      	cmp	r3, #0
   1f67e:	d001      	beq.n	1f684 <xQueueSemaphoreTake+0xa4>
   1f680:	b672      	cpsid	i
   1f682:	e7fe      	b.n	1f682 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1f684:	4b48      	ldr	r3, [pc, #288]	; (1f7a8 <xQueueSemaphoreTake+0x1c8>)
   1f686:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f688:	2300      	movs	r3, #0
   1f68a:	e07f      	b.n	1f78c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f68e:	2b00      	cmp	r3, #0
   1f690:	d106      	bne.n	1f6a0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f692:	230c      	movs	r3, #12
   1f694:	18fb      	adds	r3, r7, r3
   1f696:	0018      	movs	r0, r3
   1f698:	4b44      	ldr	r3, [pc, #272]	; (1f7ac <xQueueSemaphoreTake+0x1cc>)
   1f69a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f69c:	2301      	movs	r3, #1
   1f69e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f6a0:	4b41      	ldr	r3, [pc, #260]	; (1f7a8 <xQueueSemaphoreTake+0x1c8>)
   1f6a2:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f6a4:	4b42      	ldr	r3, [pc, #264]	; (1f7b0 <xQueueSemaphoreTake+0x1d0>)
   1f6a6:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f6a8:	4b3b      	ldr	r3, [pc, #236]	; (1f798 <xQueueSemaphoreTake+0x1b8>)
   1f6aa:	4798      	blx	r3
   1f6ac:	69fb      	ldr	r3, [r7, #28]
   1f6ae:	2244      	movs	r2, #68	; 0x44
   1f6b0:	5c9b      	ldrb	r3, [r3, r2]
   1f6b2:	b25b      	sxtb	r3, r3
   1f6b4:	3301      	adds	r3, #1
   1f6b6:	d103      	bne.n	1f6c0 <xQueueSemaphoreTake+0xe0>
   1f6b8:	69fb      	ldr	r3, [r7, #28]
   1f6ba:	2244      	movs	r2, #68	; 0x44
   1f6bc:	2100      	movs	r1, #0
   1f6be:	5499      	strb	r1, [r3, r2]
   1f6c0:	69fb      	ldr	r3, [r7, #28]
   1f6c2:	2245      	movs	r2, #69	; 0x45
   1f6c4:	5c9b      	ldrb	r3, [r3, r2]
   1f6c6:	b25b      	sxtb	r3, r3
   1f6c8:	3301      	adds	r3, #1
   1f6ca:	d103      	bne.n	1f6d4 <xQueueSemaphoreTake+0xf4>
   1f6cc:	69fb      	ldr	r3, [r7, #28]
   1f6ce:	2245      	movs	r2, #69	; 0x45
   1f6d0:	2100      	movs	r1, #0
   1f6d2:	5499      	strb	r1, [r3, r2]
   1f6d4:	4b34      	ldr	r3, [pc, #208]	; (1f7a8 <xQueueSemaphoreTake+0x1c8>)
   1f6d6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f6d8:	003a      	movs	r2, r7
   1f6da:	230c      	movs	r3, #12
   1f6dc:	18fb      	adds	r3, r7, r3
   1f6de:	0011      	movs	r1, r2
   1f6e0:	0018      	movs	r0, r3
   1f6e2:	4b34      	ldr	r3, [pc, #208]	; (1f7b4 <xQueueSemaphoreTake+0x1d4>)
   1f6e4:	4798      	blx	r3
   1f6e6:	1e03      	subs	r3, r0, #0
   1f6e8:	d12e      	bne.n	1f748 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f6ea:	69fb      	ldr	r3, [r7, #28]
   1f6ec:	0018      	movs	r0, r3
   1f6ee:	4b32      	ldr	r3, [pc, #200]	; (1f7b8 <xQueueSemaphoreTake+0x1d8>)
   1f6f0:	4798      	blx	r3
   1f6f2:	1e03      	subs	r3, r0, #0
   1f6f4:	d021      	beq.n	1f73a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f6f6:	69fb      	ldr	r3, [r7, #28]
   1f6f8:	681b      	ldr	r3, [r3, #0]
   1f6fa:	2b00      	cmp	r3, #0
   1f6fc:	d10a      	bne.n	1f714 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1f6fe:	4b26      	ldr	r3, [pc, #152]	; (1f798 <xQueueSemaphoreTake+0x1b8>)
   1f700:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1f702:	69fb      	ldr	r3, [r7, #28]
   1f704:	685b      	ldr	r3, [r3, #4]
   1f706:	0018      	movs	r0, r3
   1f708:	4b2c      	ldr	r3, [pc, #176]	; (1f7bc <xQueueSemaphoreTake+0x1dc>)
   1f70a:	4798      	blx	r3
   1f70c:	0003      	movs	r3, r0
   1f70e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1f710:	4b25      	ldr	r3, [pc, #148]	; (1f7a8 <xQueueSemaphoreTake+0x1c8>)
   1f712:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f714:	69fb      	ldr	r3, [r7, #28]
   1f716:	3324      	adds	r3, #36	; 0x24
   1f718:	683a      	ldr	r2, [r7, #0]
   1f71a:	0011      	movs	r1, r2
   1f71c:	0018      	movs	r0, r3
   1f71e:	4b28      	ldr	r3, [pc, #160]	; (1f7c0 <xQueueSemaphoreTake+0x1e0>)
   1f720:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f722:	69fb      	ldr	r3, [r7, #28]
   1f724:	0018      	movs	r0, r3
   1f726:	4b27      	ldr	r3, [pc, #156]	; (1f7c4 <xQueueSemaphoreTake+0x1e4>)
   1f728:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f72a:	4b27      	ldr	r3, [pc, #156]	; (1f7c8 <xQueueSemaphoreTake+0x1e8>)
   1f72c:	4798      	blx	r3
   1f72e:	1e03      	subs	r3, r0, #0
   1f730:	d000      	beq.n	1f734 <xQueueSemaphoreTake+0x154>
   1f732:	e779      	b.n	1f628 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1f734:	4b1b      	ldr	r3, [pc, #108]	; (1f7a4 <xQueueSemaphoreTake+0x1c4>)
   1f736:	4798      	blx	r3
   1f738:	e776      	b.n	1f628 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1f73a:	69fb      	ldr	r3, [r7, #28]
   1f73c:	0018      	movs	r0, r3
   1f73e:	4b21      	ldr	r3, [pc, #132]	; (1f7c4 <xQueueSemaphoreTake+0x1e4>)
   1f740:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f742:	4b21      	ldr	r3, [pc, #132]	; (1f7c8 <xQueueSemaphoreTake+0x1e8>)
   1f744:	4798      	blx	r3
   1f746:	e76f      	b.n	1f628 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1f748:	69fb      	ldr	r3, [r7, #28]
   1f74a:	0018      	movs	r0, r3
   1f74c:	4b1d      	ldr	r3, [pc, #116]	; (1f7c4 <xQueueSemaphoreTake+0x1e4>)
   1f74e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f750:	4b1d      	ldr	r3, [pc, #116]	; (1f7c8 <xQueueSemaphoreTake+0x1e8>)
   1f752:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f754:	69fb      	ldr	r3, [r7, #28]
   1f756:	0018      	movs	r0, r3
   1f758:	4b17      	ldr	r3, [pc, #92]	; (1f7b8 <xQueueSemaphoreTake+0x1d8>)
   1f75a:	4798      	blx	r3
   1f75c:	1e03      	subs	r3, r0, #0
   1f75e:	d100      	bne.n	1f762 <xQueueSemaphoreTake+0x182>
   1f760:	e762      	b.n	1f628 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1f762:	6a3b      	ldr	r3, [r7, #32]
   1f764:	2b00      	cmp	r3, #0
   1f766:	d010      	beq.n	1f78a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1f768:	4b0b      	ldr	r3, [pc, #44]	; (1f798 <xQueueSemaphoreTake+0x1b8>)
   1f76a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1f76c:	69fb      	ldr	r3, [r7, #28]
   1f76e:	0018      	movs	r0, r3
   1f770:	4b16      	ldr	r3, [pc, #88]	; (1f7cc <xQueueSemaphoreTake+0x1ec>)
   1f772:	4798      	blx	r3
   1f774:	0003      	movs	r3, r0
   1f776:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1f778:	69fb      	ldr	r3, [r7, #28]
   1f77a:	685b      	ldr	r3, [r3, #4]
   1f77c:	697a      	ldr	r2, [r7, #20]
   1f77e:	0011      	movs	r1, r2
   1f780:	0018      	movs	r0, r3
   1f782:	4b13      	ldr	r3, [pc, #76]	; (1f7d0 <xQueueSemaphoreTake+0x1f0>)
   1f784:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1f786:	4b08      	ldr	r3, [pc, #32]	; (1f7a8 <xQueueSemaphoreTake+0x1c8>)
   1f788:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f78a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f78c:	0018      	movs	r0, r3
   1f78e:	46bd      	mov	sp, r7
   1f790:	b00a      	add	sp, #40	; 0x28
   1f792:	bd80      	pop	{r7, pc}
   1f794:	00020871 	.word	0x00020871
   1f798:	0001ecd1 	.word	0x0001ecd1
   1f79c:	00020b3d 	.word	0x00020b3d
   1f7a0:	00020539 	.word	0x00020539
   1f7a4:	0001ecb1 	.word	0x0001ecb1
   1f7a8:	0001ecf5 	.word	0x0001ecf5
   1f7ac:	000205f9 	.word	0x000205f9
   1f7b0:	00020101 	.word	0x00020101
   1f7b4:	00020621 	.word	0x00020621
   1f7b8:	0001fa21 	.word	0x0001fa21
   1f7bc:	000208a9 	.word	0x000208a9
   1f7c0:	000204a1 	.word	0x000204a1
   1f7c4:	0001f931 	.word	0x0001f931
   1f7c8:	00020119 	.word	0x00020119
   1f7cc:	0001f7d5 	.word	0x0001f7d5
   1f7d0:	00020a4d 	.word	0x00020a4d

0001f7d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1f7d4:	b580      	push	{r7, lr}
   1f7d6:	b084      	sub	sp, #16
   1f7d8:	af00      	add	r7, sp, #0
   1f7da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1f7dc:	687b      	ldr	r3, [r7, #4]
   1f7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f7e0:	2b00      	cmp	r3, #0
   1f7e2:	d006      	beq.n	1f7f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1f7e4:	687b      	ldr	r3, [r7, #4]
   1f7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f7e8:	681b      	ldr	r3, [r3, #0]
   1f7ea:	2205      	movs	r2, #5
   1f7ec:	1ad3      	subs	r3, r2, r3
   1f7ee:	60fb      	str	r3, [r7, #12]
   1f7f0:	e001      	b.n	1f7f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1f7f2:	2300      	movs	r3, #0
   1f7f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1f7f6:	68fb      	ldr	r3, [r7, #12]
	}
   1f7f8:	0018      	movs	r0, r3
   1f7fa:	46bd      	mov	sp, r7
   1f7fc:	b004      	add	sp, #16
   1f7fe:	bd80      	pop	{r7, pc}

0001f800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1f800:	b580      	push	{r7, lr}
   1f802:	b086      	sub	sp, #24
   1f804:	af00      	add	r7, sp, #0
   1f806:	60f8      	str	r0, [r7, #12]
   1f808:	60b9      	str	r1, [r7, #8]
   1f80a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1f80c:	2300      	movs	r3, #0
   1f80e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f810:	68fb      	ldr	r3, [r7, #12]
   1f812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1f816:	68fb      	ldr	r3, [r7, #12]
   1f818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f81a:	2b00      	cmp	r3, #0
   1f81c:	d10e      	bne.n	1f83c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f81e:	68fb      	ldr	r3, [r7, #12]
   1f820:	681b      	ldr	r3, [r3, #0]
   1f822:	2b00      	cmp	r3, #0
   1f824:	d14e      	bne.n	1f8c4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1f826:	68fb      	ldr	r3, [r7, #12]
   1f828:	685b      	ldr	r3, [r3, #4]
   1f82a:	0018      	movs	r0, r3
   1f82c:	4b2a      	ldr	r3, [pc, #168]	; (1f8d8 <prvCopyDataToQueue+0xd8>)
   1f82e:	4798      	blx	r3
   1f830:	0003      	movs	r3, r0
   1f832:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1f834:	68fb      	ldr	r3, [r7, #12]
   1f836:	2200      	movs	r2, #0
   1f838:	605a      	str	r2, [r3, #4]
   1f83a:	e043      	b.n	1f8c4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1f83c:	687b      	ldr	r3, [r7, #4]
   1f83e:	2b00      	cmp	r3, #0
   1f840:	d119      	bne.n	1f876 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1f842:	68fb      	ldr	r3, [r7, #12]
   1f844:	6898      	ldr	r0, [r3, #8]
   1f846:	68fb      	ldr	r3, [r7, #12]
   1f848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f84a:	68bb      	ldr	r3, [r7, #8]
   1f84c:	0019      	movs	r1, r3
   1f84e:	4b23      	ldr	r3, [pc, #140]	; (1f8dc <prvCopyDataToQueue+0xdc>)
   1f850:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1f852:	68fb      	ldr	r3, [r7, #12]
   1f854:	689a      	ldr	r2, [r3, #8]
   1f856:	68fb      	ldr	r3, [r7, #12]
   1f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f85a:	18d2      	adds	r2, r2, r3
   1f85c:	68fb      	ldr	r3, [r7, #12]
   1f85e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f860:	68fb      	ldr	r3, [r7, #12]
   1f862:	689a      	ldr	r2, [r3, #8]
   1f864:	68fb      	ldr	r3, [r7, #12]
   1f866:	685b      	ldr	r3, [r3, #4]
   1f868:	429a      	cmp	r2, r3
   1f86a:	d32b      	bcc.n	1f8c4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1f86c:	68fb      	ldr	r3, [r7, #12]
   1f86e:	681a      	ldr	r2, [r3, #0]
   1f870:	68fb      	ldr	r3, [r7, #12]
   1f872:	609a      	str	r2, [r3, #8]
   1f874:	e026      	b.n	1f8c4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f876:	68fb      	ldr	r3, [r7, #12]
   1f878:	68d8      	ldr	r0, [r3, #12]
   1f87a:	68fb      	ldr	r3, [r7, #12]
   1f87c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f87e:	68bb      	ldr	r3, [r7, #8]
   1f880:	0019      	movs	r1, r3
   1f882:	4b16      	ldr	r3, [pc, #88]	; (1f8dc <prvCopyDataToQueue+0xdc>)
   1f884:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1f886:	68fb      	ldr	r3, [r7, #12]
   1f888:	68da      	ldr	r2, [r3, #12]
   1f88a:	68fb      	ldr	r3, [r7, #12]
   1f88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f88e:	425b      	negs	r3, r3
   1f890:	18d2      	adds	r2, r2, r3
   1f892:	68fb      	ldr	r3, [r7, #12]
   1f894:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f896:	68fb      	ldr	r3, [r7, #12]
   1f898:	68da      	ldr	r2, [r3, #12]
   1f89a:	68fb      	ldr	r3, [r7, #12]
   1f89c:	681b      	ldr	r3, [r3, #0]
   1f89e:	429a      	cmp	r2, r3
   1f8a0:	d207      	bcs.n	1f8b2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1f8a2:	68fb      	ldr	r3, [r7, #12]
   1f8a4:	685a      	ldr	r2, [r3, #4]
   1f8a6:	68fb      	ldr	r3, [r7, #12]
   1f8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f8aa:	425b      	negs	r3, r3
   1f8ac:	18d2      	adds	r2, r2, r3
   1f8ae:	68fb      	ldr	r3, [r7, #12]
   1f8b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1f8b2:	687b      	ldr	r3, [r7, #4]
   1f8b4:	2b02      	cmp	r3, #2
   1f8b6:	d105      	bne.n	1f8c4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f8b8:	693b      	ldr	r3, [r7, #16]
   1f8ba:	2b00      	cmp	r3, #0
   1f8bc:	d002      	beq.n	1f8c4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1f8be:	693b      	ldr	r3, [r7, #16]
   1f8c0:	3b01      	subs	r3, #1
   1f8c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1f8c4:	693b      	ldr	r3, [r7, #16]
   1f8c6:	1c5a      	adds	r2, r3, #1
   1f8c8:	68fb      	ldr	r3, [r7, #12]
   1f8ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1f8cc:	697b      	ldr	r3, [r7, #20]
}
   1f8ce:	0018      	movs	r0, r3
   1f8d0:	46bd      	mov	sp, r7
   1f8d2:	b006      	add	sp, #24
   1f8d4:	bd80      	pop	{r7, pc}
   1f8d6:	46c0      	nop			; (mov r8, r8)
   1f8d8:	0002098d 	.word	0x0002098d
   1f8dc:	00028ddd 	.word	0x00028ddd

0001f8e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1f8e0:	b580      	push	{r7, lr}
   1f8e2:	b082      	sub	sp, #8
   1f8e4:	af00      	add	r7, sp, #0
   1f8e6:	6078      	str	r0, [r7, #4]
   1f8e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1f8ea:	687b      	ldr	r3, [r7, #4]
   1f8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f8ee:	2b00      	cmp	r3, #0
   1f8f0:	d018      	beq.n	1f924 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1f8f2:	687b      	ldr	r3, [r7, #4]
   1f8f4:	68da      	ldr	r2, [r3, #12]
   1f8f6:	687b      	ldr	r3, [r7, #4]
   1f8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f8fa:	18d2      	adds	r2, r2, r3
   1f8fc:	687b      	ldr	r3, [r7, #4]
   1f8fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1f900:	687b      	ldr	r3, [r7, #4]
   1f902:	68da      	ldr	r2, [r3, #12]
   1f904:	687b      	ldr	r3, [r7, #4]
   1f906:	685b      	ldr	r3, [r3, #4]
   1f908:	429a      	cmp	r2, r3
   1f90a:	d303      	bcc.n	1f914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1f90c:	687b      	ldr	r3, [r7, #4]
   1f90e:	681a      	ldr	r2, [r3, #0]
   1f910:	687b      	ldr	r3, [r7, #4]
   1f912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1f914:	687b      	ldr	r3, [r7, #4]
   1f916:	68d9      	ldr	r1, [r3, #12]
   1f918:	687b      	ldr	r3, [r7, #4]
   1f91a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f91c:	683b      	ldr	r3, [r7, #0]
   1f91e:	0018      	movs	r0, r3
   1f920:	4b02      	ldr	r3, [pc, #8]	; (1f92c <prvCopyDataFromQueue+0x4c>)
   1f922:	4798      	blx	r3
	}
}
   1f924:	46c0      	nop			; (mov r8, r8)
   1f926:	46bd      	mov	sp, r7
   1f928:	b002      	add	sp, #8
   1f92a:	bd80      	pop	{r7, pc}
   1f92c:	00028ddd 	.word	0x00028ddd

0001f930 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1f930:	b580      	push	{r7, lr}
   1f932:	b084      	sub	sp, #16
   1f934:	af00      	add	r7, sp, #0
   1f936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1f938:	4b34      	ldr	r3, [pc, #208]	; (1fa0c <prvUnlockQueue+0xdc>)
   1f93a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1f93c:	230f      	movs	r3, #15
   1f93e:	18fb      	adds	r3, r7, r3
   1f940:	687a      	ldr	r2, [r7, #4]
   1f942:	2145      	movs	r1, #69	; 0x45
   1f944:	5c52      	ldrb	r2, [r2, r1]
   1f946:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f948:	e022      	b.n	1f990 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1f94a:	687b      	ldr	r3, [r7, #4]
   1f94c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f94e:	2b00      	cmp	r3, #0
   1f950:	d009      	beq.n	1f966 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1f952:	687b      	ldr	r3, [r7, #4]
   1f954:	2100      	movs	r1, #0
   1f956:	0018      	movs	r0, r3
   1f958:	4b2d      	ldr	r3, [pc, #180]	; (1fa10 <prvUnlockQueue+0xe0>)
   1f95a:	4798      	blx	r3
   1f95c:	1e03      	subs	r3, r0, #0
   1f95e:	d00f      	beq.n	1f980 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1f960:	4b2c      	ldr	r3, [pc, #176]	; (1fa14 <prvUnlockQueue+0xe4>)
   1f962:	4798      	blx	r3
   1f964:	e00c      	b.n	1f980 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f966:	687b      	ldr	r3, [r7, #4]
   1f968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f96a:	2b00      	cmp	r3, #0
   1f96c:	d017      	beq.n	1f99e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f96e:	687b      	ldr	r3, [r7, #4]
   1f970:	3324      	adds	r3, #36	; 0x24
   1f972:	0018      	movs	r0, r3
   1f974:	4b28      	ldr	r3, [pc, #160]	; (1fa18 <prvUnlockQueue+0xe8>)
   1f976:	4798      	blx	r3
   1f978:	1e03      	subs	r3, r0, #0
   1f97a:	d001      	beq.n	1f980 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1f97c:	4b25      	ldr	r3, [pc, #148]	; (1fa14 <prvUnlockQueue+0xe4>)
   1f97e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1f980:	230f      	movs	r3, #15
   1f982:	18fb      	adds	r3, r7, r3
   1f984:	781b      	ldrb	r3, [r3, #0]
   1f986:	3b01      	subs	r3, #1
   1f988:	b2da      	uxtb	r2, r3
   1f98a:	230f      	movs	r3, #15
   1f98c:	18fb      	adds	r3, r7, r3
   1f98e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f990:	230f      	movs	r3, #15
   1f992:	18fb      	adds	r3, r7, r3
   1f994:	781b      	ldrb	r3, [r3, #0]
   1f996:	b25b      	sxtb	r3, r3
   1f998:	2b00      	cmp	r3, #0
   1f99a:	dcd6      	bgt.n	1f94a <prvUnlockQueue+0x1a>
   1f99c:	e000      	b.n	1f9a0 <prvUnlockQueue+0x70>
						break;
   1f99e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1f9a0:	687b      	ldr	r3, [r7, #4]
   1f9a2:	2245      	movs	r2, #69	; 0x45
   1f9a4:	21ff      	movs	r1, #255	; 0xff
   1f9a6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1f9a8:	4b1c      	ldr	r3, [pc, #112]	; (1fa1c <prvUnlockQueue+0xec>)
   1f9aa:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1f9ac:	4b17      	ldr	r3, [pc, #92]	; (1fa0c <prvUnlockQueue+0xdc>)
   1f9ae:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1f9b0:	230e      	movs	r3, #14
   1f9b2:	18fb      	adds	r3, r7, r3
   1f9b4:	687a      	ldr	r2, [r7, #4]
   1f9b6:	2144      	movs	r1, #68	; 0x44
   1f9b8:	5c52      	ldrb	r2, [r2, r1]
   1f9ba:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f9bc:	e014      	b.n	1f9e8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f9be:	687b      	ldr	r3, [r7, #4]
   1f9c0:	691b      	ldr	r3, [r3, #16]
   1f9c2:	2b00      	cmp	r3, #0
   1f9c4:	d017      	beq.n	1f9f6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f9c6:	687b      	ldr	r3, [r7, #4]
   1f9c8:	3310      	adds	r3, #16
   1f9ca:	0018      	movs	r0, r3
   1f9cc:	4b12      	ldr	r3, [pc, #72]	; (1fa18 <prvUnlockQueue+0xe8>)
   1f9ce:	4798      	blx	r3
   1f9d0:	1e03      	subs	r3, r0, #0
   1f9d2:	d001      	beq.n	1f9d8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1f9d4:	4b0f      	ldr	r3, [pc, #60]	; (1fa14 <prvUnlockQueue+0xe4>)
   1f9d6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1f9d8:	230e      	movs	r3, #14
   1f9da:	18fb      	adds	r3, r7, r3
   1f9dc:	781b      	ldrb	r3, [r3, #0]
   1f9de:	3b01      	subs	r3, #1
   1f9e0:	b2da      	uxtb	r2, r3
   1f9e2:	230e      	movs	r3, #14
   1f9e4:	18fb      	adds	r3, r7, r3
   1f9e6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1f9e8:	230e      	movs	r3, #14
   1f9ea:	18fb      	adds	r3, r7, r3
   1f9ec:	781b      	ldrb	r3, [r3, #0]
   1f9ee:	b25b      	sxtb	r3, r3
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	dce4      	bgt.n	1f9be <prvUnlockQueue+0x8e>
   1f9f4:	e000      	b.n	1f9f8 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1f9f6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1f9f8:	687b      	ldr	r3, [r7, #4]
   1f9fa:	2244      	movs	r2, #68	; 0x44
   1f9fc:	21ff      	movs	r1, #255	; 0xff
   1f9fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1fa00:	4b06      	ldr	r3, [pc, #24]	; (1fa1c <prvUnlockQueue+0xec>)
   1fa02:	4798      	blx	r3
}
   1fa04:	46c0      	nop			; (mov r8, r8)
   1fa06:	46bd      	mov	sp, r7
   1fa08:	b004      	add	sp, #16
   1fa0a:	bd80      	pop	{r7, pc}
   1fa0c:	0001ecd1 	.word	0x0001ecd1
   1fa10:	0001fb05 	.word	0x0001fb05
   1fa14:	000206cd 	.word	0x000206cd
   1fa18:	00020539 	.word	0x00020539
   1fa1c:	0001ecf5 	.word	0x0001ecf5

0001fa20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1fa20:	b580      	push	{r7, lr}
   1fa22:	b084      	sub	sp, #16
   1fa24:	af00      	add	r7, sp, #0
   1fa26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1fa28:	4b08      	ldr	r3, [pc, #32]	; (1fa4c <prvIsQueueEmpty+0x2c>)
   1fa2a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1fa2c:	687b      	ldr	r3, [r7, #4]
   1fa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fa30:	2b00      	cmp	r3, #0
   1fa32:	d102      	bne.n	1fa3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1fa34:	2301      	movs	r3, #1
   1fa36:	60fb      	str	r3, [r7, #12]
   1fa38:	e001      	b.n	1fa3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1fa3e:	4b04      	ldr	r3, [pc, #16]	; (1fa50 <prvIsQueueEmpty+0x30>)
   1fa40:	4798      	blx	r3

	return xReturn;
   1fa42:	68fb      	ldr	r3, [r7, #12]
}
   1fa44:	0018      	movs	r0, r3
   1fa46:	46bd      	mov	sp, r7
   1fa48:	b004      	add	sp, #16
   1fa4a:	bd80      	pop	{r7, pc}
   1fa4c:	0001ecd1 	.word	0x0001ecd1
   1fa50:	0001ecf5 	.word	0x0001ecf5

0001fa54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1fa54:	b580      	push	{r7, lr}
   1fa56:	b084      	sub	sp, #16
   1fa58:	af00      	add	r7, sp, #0
   1fa5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1fa5c:	4b09      	ldr	r3, [pc, #36]	; (1fa84 <prvIsQueueFull+0x30>)
   1fa5e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1fa60:	687b      	ldr	r3, [r7, #4]
   1fa62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fa64:	687b      	ldr	r3, [r7, #4]
   1fa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fa68:	429a      	cmp	r2, r3
   1fa6a:	d102      	bne.n	1fa72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1fa6c:	2301      	movs	r3, #1
   1fa6e:	60fb      	str	r3, [r7, #12]
   1fa70:	e001      	b.n	1fa76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1fa72:	2300      	movs	r3, #0
   1fa74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1fa76:	4b04      	ldr	r3, [pc, #16]	; (1fa88 <prvIsQueueFull+0x34>)
   1fa78:	4798      	blx	r3

	return xReturn;
   1fa7a:	68fb      	ldr	r3, [r7, #12]
}
   1fa7c:	0018      	movs	r0, r3
   1fa7e:	46bd      	mov	sp, r7
   1fa80:	b004      	add	sp, #16
   1fa82:	bd80      	pop	{r7, pc}
   1fa84:	0001ecd1 	.word	0x0001ecd1
   1fa88:	0001ecf5 	.word	0x0001ecf5

0001fa8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1fa8c:	b580      	push	{r7, lr}
   1fa8e:	b086      	sub	sp, #24
   1fa90:	af00      	add	r7, sp, #0
   1fa92:	60f8      	str	r0, [r7, #12]
   1fa94:	60b9      	str	r1, [r7, #8]
   1fa96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fa98:	68fb      	ldr	r3, [r7, #12]
   1fa9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1fa9c:	4b15      	ldr	r3, [pc, #84]	; (1faf4 <vQueueWaitForMessageRestricted+0x68>)
   1fa9e:	4798      	blx	r3
   1faa0:	697b      	ldr	r3, [r7, #20]
   1faa2:	2244      	movs	r2, #68	; 0x44
   1faa4:	5c9b      	ldrb	r3, [r3, r2]
   1faa6:	b25b      	sxtb	r3, r3
   1faa8:	3301      	adds	r3, #1
   1faaa:	d103      	bne.n	1fab4 <vQueueWaitForMessageRestricted+0x28>
   1faac:	697b      	ldr	r3, [r7, #20]
   1faae:	2244      	movs	r2, #68	; 0x44
   1fab0:	2100      	movs	r1, #0
   1fab2:	5499      	strb	r1, [r3, r2]
   1fab4:	697b      	ldr	r3, [r7, #20]
   1fab6:	2245      	movs	r2, #69	; 0x45
   1fab8:	5c9b      	ldrb	r3, [r3, r2]
   1faba:	b25b      	sxtb	r3, r3
   1fabc:	3301      	adds	r3, #1
   1fabe:	d103      	bne.n	1fac8 <vQueueWaitForMessageRestricted+0x3c>
   1fac0:	697b      	ldr	r3, [r7, #20]
   1fac2:	2245      	movs	r2, #69	; 0x45
   1fac4:	2100      	movs	r1, #0
   1fac6:	5499      	strb	r1, [r3, r2]
   1fac8:	4b0b      	ldr	r3, [pc, #44]	; (1faf8 <vQueueWaitForMessageRestricted+0x6c>)
   1faca:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1facc:	697b      	ldr	r3, [r7, #20]
   1face:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	d106      	bne.n	1fae2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1fad4:	697b      	ldr	r3, [r7, #20]
   1fad6:	3324      	adds	r3, #36	; 0x24
   1fad8:	687a      	ldr	r2, [r7, #4]
   1fada:	68b9      	ldr	r1, [r7, #8]
   1fadc:	0018      	movs	r0, r3
   1fade:	4b07      	ldr	r3, [pc, #28]	; (1fafc <vQueueWaitForMessageRestricted+0x70>)
   1fae0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1fae2:	697b      	ldr	r3, [r7, #20]
   1fae4:	0018      	movs	r0, r3
   1fae6:	4b06      	ldr	r3, [pc, #24]	; (1fb00 <vQueueWaitForMessageRestricted+0x74>)
   1fae8:	4798      	blx	r3
	}
   1faea:	46c0      	nop			; (mov r8, r8)
   1faec:	46bd      	mov	sp, r7
   1faee:	b006      	add	sp, #24
   1faf0:	bd80      	pop	{r7, pc}
   1faf2:	46c0      	nop			; (mov r8, r8)
   1faf4:	0001ecd1 	.word	0x0001ecd1
   1faf8:	0001ecf5 	.word	0x0001ecf5
   1fafc:	000204e5 	.word	0x000204e5
   1fb00:	0001f931 	.word	0x0001f931

0001fb04 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1fb04:	b580      	push	{r7, lr}
   1fb06:	b086      	sub	sp, #24
   1fb08:	af00      	add	r7, sp, #0
   1fb0a:	6078      	str	r0, [r7, #4]
   1fb0c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1fb0e:	687b      	ldr	r3, [r7, #4]
   1fb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fb12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1fb14:	2300      	movs	r3, #0
   1fb16:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1fb18:	693b      	ldr	r3, [r7, #16]
   1fb1a:	2b00      	cmp	r3, #0
   1fb1c:	d101      	bne.n	1fb22 <prvNotifyQueueSetContainer+0x1e>
   1fb1e:	b672      	cpsid	i
   1fb20:	e7fe      	b.n	1fb20 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1fb22:	693b      	ldr	r3, [r7, #16]
   1fb24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fb26:	693b      	ldr	r3, [r7, #16]
   1fb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fb2a:	429a      	cmp	r2, r3
   1fb2c:	d301      	bcc.n	1fb32 <prvNotifyQueueSetContainer+0x2e>
   1fb2e:	b672      	cpsid	i
   1fb30:	e7fe      	b.n	1fb30 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1fb32:	693b      	ldr	r3, [r7, #16]
   1fb34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fb36:	693b      	ldr	r3, [r7, #16]
   1fb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fb3a:	429a      	cmp	r2, r3
   1fb3c:	d22a      	bcs.n	1fb94 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1fb3e:	230f      	movs	r3, #15
   1fb40:	18fb      	adds	r3, r7, r3
   1fb42:	693a      	ldr	r2, [r7, #16]
   1fb44:	2145      	movs	r1, #69	; 0x45
   1fb46:	5c52      	ldrb	r2, [r2, r1]
   1fb48:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1fb4a:	683a      	ldr	r2, [r7, #0]
   1fb4c:	1d39      	adds	r1, r7, #4
   1fb4e:	693b      	ldr	r3, [r7, #16]
   1fb50:	0018      	movs	r0, r3
   1fb52:	4b13      	ldr	r3, [pc, #76]	; (1fba0 <prvNotifyQueueSetContainer+0x9c>)
   1fb54:	4798      	blx	r3
   1fb56:	0003      	movs	r3, r0
   1fb58:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1fb5a:	230f      	movs	r3, #15
   1fb5c:	18fb      	adds	r3, r7, r3
   1fb5e:	781b      	ldrb	r3, [r3, #0]
   1fb60:	b25b      	sxtb	r3, r3
   1fb62:	3301      	adds	r3, #1
   1fb64:	d10d      	bne.n	1fb82 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1fb66:	693b      	ldr	r3, [r7, #16]
   1fb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fb6a:	2b00      	cmp	r3, #0
   1fb6c:	d012      	beq.n	1fb94 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1fb6e:	693b      	ldr	r3, [r7, #16]
   1fb70:	3324      	adds	r3, #36	; 0x24
   1fb72:	0018      	movs	r0, r3
   1fb74:	4b0b      	ldr	r3, [pc, #44]	; (1fba4 <prvNotifyQueueSetContainer+0xa0>)
   1fb76:	4798      	blx	r3
   1fb78:	1e03      	subs	r3, r0, #0
   1fb7a:	d00b      	beq.n	1fb94 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1fb7c:	2301      	movs	r3, #1
   1fb7e:	617b      	str	r3, [r7, #20]
   1fb80:	e008      	b.n	1fb94 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fb82:	230f      	movs	r3, #15
   1fb84:	18fb      	adds	r3, r7, r3
   1fb86:	781b      	ldrb	r3, [r3, #0]
   1fb88:	3301      	adds	r3, #1
   1fb8a:	b2db      	uxtb	r3, r3
   1fb8c:	b259      	sxtb	r1, r3
   1fb8e:	693b      	ldr	r3, [r7, #16]
   1fb90:	2245      	movs	r2, #69	; 0x45
   1fb92:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fb94:	697b      	ldr	r3, [r7, #20]
	}
   1fb96:	0018      	movs	r0, r3
   1fb98:	46bd      	mov	sp, r7
   1fb9a:	b006      	add	sp, #24
   1fb9c:	bd80      	pop	{r7, pc}
   1fb9e:	46c0      	nop			; (mov r8, r8)
   1fba0:	0001f801 	.word	0x0001f801
   1fba4:	00020539 	.word	0x00020539

0001fba8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1fba8:	b590      	push	{r4, r7, lr}
   1fbaa:	b08d      	sub	sp, #52	; 0x34
   1fbac:	af04      	add	r7, sp, #16
   1fbae:	60f8      	str	r0, [r7, #12]
   1fbb0:	60b9      	str	r1, [r7, #8]
   1fbb2:	603b      	str	r3, [r7, #0]
   1fbb4:	1dbb      	adds	r3, r7, #6
   1fbb6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fbb8:	1dbb      	adds	r3, r7, #6
   1fbba:	881b      	ldrh	r3, [r3, #0]
   1fbbc:	009b      	lsls	r3, r3, #2
   1fbbe:	0018      	movs	r0, r3
   1fbc0:	4b1d      	ldr	r3, [pc, #116]	; (1fc38 <xTaskCreate+0x90>)
   1fbc2:	4798      	blx	r3
   1fbc4:	0003      	movs	r3, r0
   1fbc6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1fbc8:	697b      	ldr	r3, [r7, #20]
   1fbca:	2b00      	cmp	r3, #0
   1fbcc:	d010      	beq.n	1fbf0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1fbce:	2050      	movs	r0, #80	; 0x50
   1fbd0:	4b19      	ldr	r3, [pc, #100]	; (1fc38 <xTaskCreate+0x90>)
   1fbd2:	4798      	blx	r3
   1fbd4:	0003      	movs	r3, r0
   1fbd6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1fbd8:	69fb      	ldr	r3, [r7, #28]
   1fbda:	2b00      	cmp	r3, #0
   1fbdc:	d003      	beq.n	1fbe6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1fbde:	69fb      	ldr	r3, [r7, #28]
   1fbe0:	697a      	ldr	r2, [r7, #20]
   1fbe2:	631a      	str	r2, [r3, #48]	; 0x30
   1fbe4:	e006      	b.n	1fbf4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1fbe6:	697b      	ldr	r3, [r7, #20]
   1fbe8:	0018      	movs	r0, r3
   1fbea:	4b14      	ldr	r3, [pc, #80]	; (1fc3c <xTaskCreate+0x94>)
   1fbec:	4798      	blx	r3
   1fbee:	e001      	b.n	1fbf4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1fbf0:	2300      	movs	r3, #0
   1fbf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1fbf4:	69fb      	ldr	r3, [r7, #28]
   1fbf6:	2b00      	cmp	r3, #0
   1fbf8:	d016      	beq.n	1fc28 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1fbfa:	1dbb      	adds	r3, r7, #6
   1fbfc:	881a      	ldrh	r2, [r3, #0]
   1fbfe:	683c      	ldr	r4, [r7, #0]
   1fc00:	68b9      	ldr	r1, [r7, #8]
   1fc02:	68f8      	ldr	r0, [r7, #12]
   1fc04:	2300      	movs	r3, #0
   1fc06:	9303      	str	r3, [sp, #12]
   1fc08:	69fb      	ldr	r3, [r7, #28]
   1fc0a:	9302      	str	r3, [sp, #8]
   1fc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fc0e:	9301      	str	r3, [sp, #4]
   1fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fc12:	9300      	str	r3, [sp, #0]
   1fc14:	0023      	movs	r3, r4
   1fc16:	4c0a      	ldr	r4, [pc, #40]	; (1fc40 <xTaskCreate+0x98>)
   1fc18:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1fc1a:	69fb      	ldr	r3, [r7, #28]
   1fc1c:	0018      	movs	r0, r3
   1fc1e:	4b09      	ldr	r3, [pc, #36]	; (1fc44 <xTaskCreate+0x9c>)
   1fc20:	4798      	blx	r3
			xReturn = pdPASS;
   1fc22:	2301      	movs	r3, #1
   1fc24:	61bb      	str	r3, [r7, #24]
   1fc26:	e002      	b.n	1fc2e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1fc28:	2301      	movs	r3, #1
   1fc2a:	425b      	negs	r3, r3
   1fc2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1fc2e:	69bb      	ldr	r3, [r7, #24]
	}
   1fc30:	0018      	movs	r0, r3
   1fc32:	46bd      	mov	sp, r7
   1fc34:	b009      	add	sp, #36	; 0x24
   1fc36:	bd90      	pop	{r4, r7, pc}
   1fc38:	0001ee0d 	.word	0x0001ee0d
   1fc3c:	0001ee41 	.word	0x0001ee41
   1fc40:	0001fc49 	.word	0x0001fc49
   1fc44:	0001fd45 	.word	0x0001fd45

0001fc48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1fc48:	b580      	push	{r7, lr}
   1fc4a:	b086      	sub	sp, #24
   1fc4c:	af00      	add	r7, sp, #0
   1fc4e:	60f8      	str	r0, [r7, #12]
   1fc50:	60b9      	str	r1, [r7, #8]
   1fc52:	607a      	str	r2, [r7, #4]
   1fc54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fc58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1fc5a:	687b      	ldr	r3, [r7, #4]
   1fc5c:	4936      	ldr	r1, [pc, #216]	; (1fd38 <prvInitialiseNewTask+0xf0>)
   1fc5e:	468c      	mov	ip, r1
   1fc60:	4463      	add	r3, ip
   1fc62:	009b      	lsls	r3, r3, #2
   1fc64:	18d3      	adds	r3, r2, r3
   1fc66:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1fc68:	693b      	ldr	r3, [r7, #16]
   1fc6a:	2207      	movs	r2, #7
   1fc6c:	4393      	bics	r3, r2
   1fc6e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1fc70:	693b      	ldr	r3, [r7, #16]
   1fc72:	2207      	movs	r2, #7
   1fc74:	4013      	ands	r3, r2
   1fc76:	d001      	beq.n	1fc7c <prvInitialiseNewTask+0x34>
   1fc78:	b672      	cpsid	i
   1fc7a:	e7fe      	b.n	1fc7a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fc7c:	2300      	movs	r3, #0
   1fc7e:	617b      	str	r3, [r7, #20]
   1fc80:	e013      	b.n	1fcaa <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1fc82:	68ba      	ldr	r2, [r7, #8]
   1fc84:	697b      	ldr	r3, [r7, #20]
   1fc86:	18d3      	adds	r3, r2, r3
   1fc88:	7818      	ldrb	r0, [r3, #0]
   1fc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fc8c:	2134      	movs	r1, #52	; 0x34
   1fc8e:	697b      	ldr	r3, [r7, #20]
   1fc90:	18d3      	adds	r3, r2, r3
   1fc92:	185b      	adds	r3, r3, r1
   1fc94:	1c02      	adds	r2, r0, #0
   1fc96:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1fc98:	68ba      	ldr	r2, [r7, #8]
   1fc9a:	697b      	ldr	r3, [r7, #20]
   1fc9c:	18d3      	adds	r3, r2, r3
   1fc9e:	781b      	ldrb	r3, [r3, #0]
   1fca0:	2b00      	cmp	r3, #0
   1fca2:	d006      	beq.n	1fcb2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fca4:	697b      	ldr	r3, [r7, #20]
   1fca6:	3301      	adds	r3, #1
   1fca8:	617b      	str	r3, [r7, #20]
   1fcaa:	697b      	ldr	r3, [r7, #20]
   1fcac:	2b09      	cmp	r3, #9
   1fcae:	d9e8      	bls.n	1fc82 <prvInitialiseNewTask+0x3a>
   1fcb0:	e000      	b.n	1fcb4 <prvInitialiseNewTask+0x6c>
		{
			break;
   1fcb2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcb6:	223d      	movs	r2, #61	; 0x3d
   1fcb8:	2100      	movs	r1, #0
   1fcba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fcbc:	6a3b      	ldr	r3, [r7, #32]
   1fcbe:	2b04      	cmp	r3, #4
   1fcc0:	d901      	bls.n	1fcc6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fcc2:	2304      	movs	r3, #4
   1fcc4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1fcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcc8:	6a3a      	ldr	r2, [r7, #32]
   1fcca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcce:	6a3a      	ldr	r2, [r7, #32]
   1fcd0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   1fcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcd4:	2200      	movs	r2, #0
   1fcd6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1fcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcda:	3304      	adds	r3, #4
   1fcdc:	0018      	movs	r0, r3
   1fcde:	4b17      	ldr	r3, [pc, #92]	; (1fd3c <prvInitialiseNewTask+0xf4>)
   1fce0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1fce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fce4:	3318      	adds	r3, #24
   1fce6:	0018      	movs	r0, r3
   1fce8:	4b14      	ldr	r3, [pc, #80]	; (1fd3c <prvInitialiseNewTask+0xf4>)
   1fcea:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fcf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fcf2:	6a3b      	ldr	r3, [r7, #32]
   1fcf4:	2205      	movs	r2, #5
   1fcf6:	1ad2      	subs	r2, r2, r3
   1fcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fd00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1fd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd04:	2200      	movs	r2, #0
   1fd06:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd0a:	224c      	movs	r2, #76	; 0x4c
   1fd0c:	2100      	movs	r1, #0
   1fd0e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1fd10:	683a      	ldr	r2, [r7, #0]
   1fd12:	68f9      	ldr	r1, [r7, #12]
   1fd14:	693b      	ldr	r3, [r7, #16]
   1fd16:	0018      	movs	r0, r3
   1fd18:	4b09      	ldr	r3, [pc, #36]	; (1fd40 <prvInitialiseNewTask+0xf8>)
   1fd1a:	4798      	blx	r3
   1fd1c:	0002      	movs	r2, r0
   1fd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd20:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d002      	beq.n	1fd2e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fd2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fd2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fd2e:	46c0      	nop			; (mov r8, r8)
   1fd30:	46bd      	mov	sp, r7
   1fd32:	b006      	add	sp, #24
   1fd34:	bd80      	pop	{r7, pc}
   1fd36:	46c0      	nop			; (mov r8, r8)
   1fd38:	3fffffff 	.word	0x3fffffff
   1fd3c:	0001eeb1 	.word	0x0001eeb1
   1fd40:	0001eb89 	.word	0x0001eb89

0001fd44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1fd44:	b580      	push	{r7, lr}
   1fd46:	b082      	sub	sp, #8
   1fd48:	af00      	add	r7, sp, #0
   1fd4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1fd4c:	4b29      	ldr	r3, [pc, #164]	; (1fdf4 <prvAddNewTaskToReadyList+0xb0>)
   1fd4e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1fd50:	4b29      	ldr	r3, [pc, #164]	; (1fdf8 <prvAddNewTaskToReadyList+0xb4>)
   1fd52:	681b      	ldr	r3, [r3, #0]
   1fd54:	1c5a      	adds	r2, r3, #1
   1fd56:	4b28      	ldr	r3, [pc, #160]	; (1fdf8 <prvAddNewTaskToReadyList+0xb4>)
   1fd58:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1fd5a:	4b28      	ldr	r3, [pc, #160]	; (1fdfc <prvAddNewTaskToReadyList+0xb8>)
   1fd5c:	681b      	ldr	r3, [r3, #0]
   1fd5e:	2b00      	cmp	r3, #0
   1fd60:	d109      	bne.n	1fd76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1fd62:	4b26      	ldr	r3, [pc, #152]	; (1fdfc <prvAddNewTaskToReadyList+0xb8>)
   1fd64:	687a      	ldr	r2, [r7, #4]
   1fd66:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1fd68:	4b23      	ldr	r3, [pc, #140]	; (1fdf8 <prvAddNewTaskToReadyList+0xb4>)
   1fd6a:	681b      	ldr	r3, [r3, #0]
   1fd6c:	2b01      	cmp	r3, #1
   1fd6e:	d110      	bne.n	1fd92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1fd70:	4b23      	ldr	r3, [pc, #140]	; (1fe00 <prvAddNewTaskToReadyList+0xbc>)
   1fd72:	4798      	blx	r3
   1fd74:	e00d      	b.n	1fd92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1fd76:	4b23      	ldr	r3, [pc, #140]	; (1fe04 <prvAddNewTaskToReadyList+0xc0>)
   1fd78:	681b      	ldr	r3, [r3, #0]
   1fd7a:	2b00      	cmp	r3, #0
   1fd7c:	d109      	bne.n	1fd92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1fd7e:	4b1f      	ldr	r3, [pc, #124]	; (1fdfc <prvAddNewTaskToReadyList+0xb8>)
   1fd80:	681b      	ldr	r3, [r3, #0]
   1fd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd84:	687b      	ldr	r3, [r7, #4]
   1fd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fd88:	429a      	cmp	r2, r3
   1fd8a:	d802      	bhi.n	1fd92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1fd8c:	4b1b      	ldr	r3, [pc, #108]	; (1fdfc <prvAddNewTaskToReadyList+0xb8>)
   1fd8e:	687a      	ldr	r2, [r7, #4]
   1fd90:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1fd92:	4b1d      	ldr	r3, [pc, #116]	; (1fe08 <prvAddNewTaskToReadyList+0xc4>)
   1fd94:	681b      	ldr	r3, [r3, #0]
   1fd96:	1c5a      	adds	r2, r3, #1
   1fd98:	4b1b      	ldr	r3, [pc, #108]	; (1fe08 <prvAddNewTaskToReadyList+0xc4>)
   1fd9a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1fd9c:	687b      	ldr	r3, [r7, #4]
   1fd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fda0:	4b1a      	ldr	r3, [pc, #104]	; (1fe0c <prvAddNewTaskToReadyList+0xc8>)
   1fda2:	681b      	ldr	r3, [r3, #0]
   1fda4:	429a      	cmp	r2, r3
   1fda6:	d903      	bls.n	1fdb0 <prvAddNewTaskToReadyList+0x6c>
   1fda8:	687b      	ldr	r3, [r7, #4]
   1fdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fdac:	4b17      	ldr	r3, [pc, #92]	; (1fe0c <prvAddNewTaskToReadyList+0xc8>)
   1fdae:	601a      	str	r2, [r3, #0]
   1fdb0:	687b      	ldr	r3, [r7, #4]
   1fdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fdb4:	0013      	movs	r3, r2
   1fdb6:	009b      	lsls	r3, r3, #2
   1fdb8:	189b      	adds	r3, r3, r2
   1fdba:	009b      	lsls	r3, r3, #2
   1fdbc:	4a14      	ldr	r2, [pc, #80]	; (1fe10 <prvAddNewTaskToReadyList+0xcc>)
   1fdbe:	189a      	adds	r2, r3, r2
   1fdc0:	687b      	ldr	r3, [r7, #4]
   1fdc2:	3304      	adds	r3, #4
   1fdc4:	0019      	movs	r1, r3
   1fdc6:	0010      	movs	r0, r2
   1fdc8:	4b12      	ldr	r3, [pc, #72]	; (1fe14 <prvAddNewTaskToReadyList+0xd0>)
   1fdca:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1fdcc:	4b12      	ldr	r3, [pc, #72]	; (1fe18 <prvAddNewTaskToReadyList+0xd4>)
   1fdce:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1fdd0:	4b0c      	ldr	r3, [pc, #48]	; (1fe04 <prvAddNewTaskToReadyList+0xc0>)
   1fdd2:	681b      	ldr	r3, [r3, #0]
   1fdd4:	2b00      	cmp	r3, #0
   1fdd6:	d008      	beq.n	1fdea <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1fdd8:	4b08      	ldr	r3, [pc, #32]	; (1fdfc <prvAddNewTaskToReadyList+0xb8>)
   1fdda:	681b      	ldr	r3, [r3, #0]
   1fddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fdde:	687b      	ldr	r3, [r7, #4]
   1fde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fde2:	429a      	cmp	r2, r3
   1fde4:	d201      	bcs.n	1fdea <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1fde6:	4b0d      	ldr	r3, [pc, #52]	; (1fe1c <prvAddNewTaskToReadyList+0xd8>)
   1fde8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fdea:	46c0      	nop			; (mov r8, r8)
   1fdec:	46bd      	mov	sp, r7
   1fdee:	b002      	add	sp, #8
   1fdf0:	bd80      	pop	{r7, pc}
   1fdf2:	46c0      	nop			; (mov r8, r8)
   1fdf4:	0001ecd1 	.word	0x0001ecd1
   1fdf8:	20000390 	.word	0x20000390
   1fdfc:	200002b8 	.word	0x200002b8
   1fe00:	00020709 	.word	0x00020709
   1fe04:	2000039c 	.word	0x2000039c
   1fe08:	200003ac 	.word	0x200003ac
   1fe0c:	20000398 	.word	0x20000398
   1fe10:	200002bc 	.word	0x200002bc
   1fe14:	0001eec7 	.word	0x0001eec7
   1fe18:	0001ecf5 	.word	0x0001ecf5
   1fe1c:	0001ecb1 	.word	0x0001ecb1

0001fe20 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1fe20:	b580      	push	{r7, lr}
   1fe22:	b086      	sub	sp, #24
   1fe24:	af00      	add	r7, sp, #0
   1fe26:	6078      	str	r0, [r7, #4]
   1fe28:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1fe2a:	2300      	movs	r3, #0
   1fe2c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1fe2e:	687b      	ldr	r3, [r7, #4]
   1fe30:	2b00      	cmp	r3, #0
   1fe32:	d101      	bne.n	1fe38 <vTaskDelayUntil+0x18>
   1fe34:	b672      	cpsid	i
   1fe36:	e7fe      	b.n	1fe36 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   1fe38:	683b      	ldr	r3, [r7, #0]
   1fe3a:	2b00      	cmp	r3, #0
   1fe3c:	d101      	bne.n	1fe42 <vTaskDelayUntil+0x22>
   1fe3e:	b672      	cpsid	i
   1fe40:	e7fe      	b.n	1fe40 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   1fe42:	4b23      	ldr	r3, [pc, #140]	; (1fed0 <vTaskDelayUntil+0xb0>)
   1fe44:	681b      	ldr	r3, [r3, #0]
   1fe46:	2b00      	cmp	r3, #0
   1fe48:	d001      	beq.n	1fe4e <vTaskDelayUntil+0x2e>
   1fe4a:	b672      	cpsid	i
   1fe4c:	e7fe      	b.n	1fe4c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   1fe4e:	4b21      	ldr	r3, [pc, #132]	; (1fed4 <vTaskDelayUntil+0xb4>)
   1fe50:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1fe52:	4b21      	ldr	r3, [pc, #132]	; (1fed8 <vTaskDelayUntil+0xb8>)
   1fe54:	681b      	ldr	r3, [r3, #0]
   1fe56:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1fe58:	687b      	ldr	r3, [r7, #4]
   1fe5a:	681a      	ldr	r2, [r3, #0]
   1fe5c:	683b      	ldr	r3, [r7, #0]
   1fe5e:	18d3      	adds	r3, r2, r3
   1fe60:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1fe62:	687b      	ldr	r3, [r7, #4]
   1fe64:	681a      	ldr	r2, [r3, #0]
   1fe66:	693b      	ldr	r3, [r7, #16]
   1fe68:	429a      	cmp	r2, r3
   1fe6a:	d90b      	bls.n	1fe84 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1fe6c:	687b      	ldr	r3, [r7, #4]
   1fe6e:	681a      	ldr	r2, [r3, #0]
   1fe70:	68fb      	ldr	r3, [r7, #12]
   1fe72:	429a      	cmp	r2, r3
   1fe74:	d911      	bls.n	1fe9a <vTaskDelayUntil+0x7a>
   1fe76:	68fa      	ldr	r2, [r7, #12]
   1fe78:	693b      	ldr	r3, [r7, #16]
   1fe7a:	429a      	cmp	r2, r3
   1fe7c:	d90d      	bls.n	1fe9a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fe7e:	2301      	movs	r3, #1
   1fe80:	617b      	str	r3, [r7, #20]
   1fe82:	e00a      	b.n	1fe9a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1fe84:	687b      	ldr	r3, [r7, #4]
   1fe86:	681a      	ldr	r2, [r3, #0]
   1fe88:	68fb      	ldr	r3, [r7, #12]
   1fe8a:	429a      	cmp	r2, r3
   1fe8c:	d803      	bhi.n	1fe96 <vTaskDelayUntil+0x76>
   1fe8e:	68fa      	ldr	r2, [r7, #12]
   1fe90:	693b      	ldr	r3, [r7, #16]
   1fe92:	429a      	cmp	r2, r3
   1fe94:	d901      	bls.n	1fe9a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fe96:	2301      	movs	r3, #1
   1fe98:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1fe9a:	687b      	ldr	r3, [r7, #4]
   1fe9c:	68fa      	ldr	r2, [r7, #12]
   1fe9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1fea0:	697b      	ldr	r3, [r7, #20]
   1fea2:	2b00      	cmp	r3, #0
   1fea4:	d006      	beq.n	1feb4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1fea6:	68fa      	ldr	r2, [r7, #12]
   1fea8:	693b      	ldr	r3, [r7, #16]
   1feaa:	1ad3      	subs	r3, r2, r3
   1feac:	2100      	movs	r1, #0
   1feae:	0018      	movs	r0, r3
   1feb0:	4b0a      	ldr	r3, [pc, #40]	; (1fedc <vTaskDelayUntil+0xbc>)
   1feb2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1feb4:	4b0a      	ldr	r3, [pc, #40]	; (1fee0 <vTaskDelayUntil+0xc0>)
   1feb6:	4798      	blx	r3
   1feb8:	0003      	movs	r3, r0
   1feba:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1febc:	68bb      	ldr	r3, [r7, #8]
   1febe:	2b00      	cmp	r3, #0
   1fec0:	d101      	bne.n	1fec6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   1fec2:	4b08      	ldr	r3, [pc, #32]	; (1fee4 <vTaskDelayUntil+0xc4>)
   1fec4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1fec6:	46c0      	nop			; (mov r8, r8)
   1fec8:	46bd      	mov	sp, r7
   1feca:	b006      	add	sp, #24
   1fecc:	bd80      	pop	{r7, pc}
   1fece:	46c0      	nop			; (mov r8, r8)
   1fed0:	200003b8 	.word	0x200003b8
   1fed4:	00020101 	.word	0x00020101
   1fed8:	20000394 	.word	0x20000394
   1fedc:	00020cf9 	.word	0x00020cf9
   1fee0:	00020119 	.word	0x00020119
   1fee4:	0001ecb1 	.word	0x0001ecb1

0001fee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1fee8:	b580      	push	{r7, lr}
   1feea:	b084      	sub	sp, #16
   1feec:	af00      	add	r7, sp, #0
   1feee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1fef0:	2300      	movs	r3, #0
   1fef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1fef4:	687b      	ldr	r3, [r7, #4]
   1fef6:	2b00      	cmp	r3, #0
   1fef8:	d010      	beq.n	1ff1c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1fefa:	4b0d      	ldr	r3, [pc, #52]	; (1ff30 <vTaskDelay+0x48>)
   1fefc:	681b      	ldr	r3, [r3, #0]
   1fefe:	2b00      	cmp	r3, #0
   1ff00:	d001      	beq.n	1ff06 <vTaskDelay+0x1e>
   1ff02:	b672      	cpsid	i
   1ff04:	e7fe      	b.n	1ff04 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1ff06:	4b0b      	ldr	r3, [pc, #44]	; (1ff34 <vTaskDelay+0x4c>)
   1ff08:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1ff0a:	687b      	ldr	r3, [r7, #4]
   1ff0c:	2100      	movs	r1, #0
   1ff0e:	0018      	movs	r0, r3
   1ff10:	4b09      	ldr	r3, [pc, #36]	; (1ff38 <vTaskDelay+0x50>)
   1ff12:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1ff14:	4b09      	ldr	r3, [pc, #36]	; (1ff3c <vTaskDelay+0x54>)
   1ff16:	4798      	blx	r3
   1ff18:	0003      	movs	r3, r0
   1ff1a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1ff1c:	68fb      	ldr	r3, [r7, #12]
   1ff1e:	2b00      	cmp	r3, #0
   1ff20:	d101      	bne.n	1ff26 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   1ff22:	4b07      	ldr	r3, [pc, #28]	; (1ff40 <vTaskDelay+0x58>)
   1ff24:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ff26:	46c0      	nop			; (mov r8, r8)
   1ff28:	46bd      	mov	sp, r7
   1ff2a:	b004      	add	sp, #16
   1ff2c:	bd80      	pop	{r7, pc}
   1ff2e:	46c0      	nop			; (mov r8, r8)
   1ff30:	200003b8 	.word	0x200003b8
   1ff34:	00020101 	.word	0x00020101
   1ff38:	00020cf9 	.word	0x00020cf9
   1ff3c:	00020119 	.word	0x00020119
   1ff40:	0001ecb1 	.word	0x0001ecb1

0001ff44 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   1ff44:	b580      	push	{r7, lr}
   1ff46:	b086      	sub	sp, #24
   1ff48:	af00      	add	r7, sp, #0
   1ff4a:	6078      	str	r0, [r7, #4]
   1ff4c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   1ff4e:	2300      	movs	r3, #0
   1ff50:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   1ff52:	683b      	ldr	r3, [r7, #0]
   1ff54:	2b04      	cmp	r3, #4
   1ff56:	d901      	bls.n	1ff5c <vTaskPrioritySet+0x18>
   1ff58:	b672      	cpsid	i
   1ff5a:	e7fe      	b.n	1ff5a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ff5c:	683b      	ldr	r3, [r7, #0]
   1ff5e:	2b04      	cmp	r3, #4
   1ff60:	d901      	bls.n	1ff66 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ff62:	2304      	movs	r3, #4
   1ff64:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   1ff66:	4b3d      	ldr	r3, [pc, #244]	; (2005c <vTaskPrioritySet+0x118>)
   1ff68:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   1ff6a:	687b      	ldr	r3, [r7, #4]
   1ff6c:	2b00      	cmp	r3, #0
   1ff6e:	d102      	bne.n	1ff76 <vTaskPrioritySet+0x32>
   1ff70:	4b3b      	ldr	r3, [pc, #236]	; (20060 <vTaskPrioritySet+0x11c>)
   1ff72:	681b      	ldr	r3, [r3, #0]
   1ff74:	e000      	b.n	1ff78 <vTaskPrioritySet+0x34>
   1ff76:	687b      	ldr	r3, [r7, #4]
   1ff78:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   1ff7a:	693b      	ldr	r3, [r7, #16]
   1ff7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ff7e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   1ff80:	68fa      	ldr	r2, [r7, #12]
   1ff82:	683b      	ldr	r3, [r7, #0]
   1ff84:	429a      	cmp	r2, r3
   1ff86:	d062      	beq.n	2004e <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   1ff88:	683a      	ldr	r2, [r7, #0]
   1ff8a:	68fb      	ldr	r3, [r7, #12]
   1ff8c:	429a      	cmp	r2, r3
   1ff8e:	d90d      	bls.n	1ffac <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   1ff90:	4b33      	ldr	r3, [pc, #204]	; (20060 <vTaskPrioritySet+0x11c>)
   1ff92:	681b      	ldr	r3, [r3, #0]
   1ff94:	693a      	ldr	r2, [r7, #16]
   1ff96:	429a      	cmp	r2, r3
   1ff98:	d00f      	beq.n	1ffba <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   1ff9a:	4b31      	ldr	r3, [pc, #196]	; (20060 <vTaskPrioritySet+0x11c>)
   1ff9c:	681b      	ldr	r3, [r3, #0]
   1ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ffa0:	683b      	ldr	r3, [r7, #0]
   1ffa2:	429a      	cmp	r2, r3
   1ffa4:	d809      	bhi.n	1ffba <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   1ffa6:	2301      	movs	r3, #1
   1ffa8:	617b      	str	r3, [r7, #20]
   1ffaa:	e006      	b.n	1ffba <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   1ffac:	4b2c      	ldr	r3, [pc, #176]	; (20060 <vTaskPrioritySet+0x11c>)
   1ffae:	681b      	ldr	r3, [r3, #0]
   1ffb0:	693a      	ldr	r2, [r7, #16]
   1ffb2:	429a      	cmp	r2, r3
   1ffb4:	d101      	bne.n	1ffba <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   1ffb6:	2301      	movs	r3, #1
   1ffb8:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1ffba:	693b      	ldr	r3, [r7, #16]
   1ffbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ffbe:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   1ffc0:	693b      	ldr	r3, [r7, #16]
   1ffc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ffc4:	693b      	ldr	r3, [r7, #16]
   1ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ffc8:	429a      	cmp	r2, r3
   1ffca:	d102      	bne.n	1ffd2 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   1ffcc:	693b      	ldr	r3, [r7, #16]
   1ffce:	683a      	ldr	r2, [r7, #0]
   1ffd0:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   1ffd2:	693b      	ldr	r3, [r7, #16]
   1ffd4:	683a      	ldr	r2, [r7, #0]
   1ffd6:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1ffd8:	693b      	ldr	r3, [r7, #16]
   1ffda:	699b      	ldr	r3, [r3, #24]
   1ffdc:	2b00      	cmp	r3, #0
   1ffde:	db04      	blt.n	1ffea <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ffe0:	683b      	ldr	r3, [r7, #0]
   1ffe2:	2205      	movs	r2, #5
   1ffe4:	1ad2      	subs	r2, r2, r3
   1ffe6:	693b      	ldr	r3, [r7, #16]
   1ffe8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1ffea:	693b      	ldr	r3, [r7, #16]
   1ffec:	6959      	ldr	r1, [r3, #20]
   1ffee:	68ba      	ldr	r2, [r7, #8]
   1fff0:	0013      	movs	r3, r2
   1fff2:	009b      	lsls	r3, r3, #2
   1fff4:	189b      	adds	r3, r3, r2
   1fff6:	009b      	lsls	r3, r3, #2
   1fff8:	4a1a      	ldr	r2, [pc, #104]	; (20064 <vTaskPrioritySet+0x120>)
   1fffa:	189b      	adds	r3, r3, r2
   1fffc:	4299      	cmp	r1, r3
   1fffe:	d101      	bne.n	20004 <vTaskPrioritySet+0xc0>
   20000:	2301      	movs	r3, #1
   20002:	e000      	b.n	20006 <vTaskPrioritySet+0xc2>
   20004:	2300      	movs	r3, #0
   20006:	2b00      	cmp	r3, #0
   20008:	d01c      	beq.n	20044 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2000a:	693b      	ldr	r3, [r7, #16]
   2000c:	3304      	adds	r3, #4
   2000e:	0018      	movs	r0, r3
   20010:	4b15      	ldr	r3, [pc, #84]	; (20068 <vTaskPrioritySet+0x124>)
   20012:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   20014:	693b      	ldr	r3, [r7, #16]
   20016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20018:	4b14      	ldr	r3, [pc, #80]	; (2006c <vTaskPrioritySet+0x128>)
   2001a:	681b      	ldr	r3, [r3, #0]
   2001c:	429a      	cmp	r2, r3
   2001e:	d903      	bls.n	20028 <vTaskPrioritySet+0xe4>
   20020:	693b      	ldr	r3, [r7, #16]
   20022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20024:	4b11      	ldr	r3, [pc, #68]	; (2006c <vTaskPrioritySet+0x128>)
   20026:	601a      	str	r2, [r3, #0]
   20028:	693b      	ldr	r3, [r7, #16]
   2002a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2002c:	0013      	movs	r3, r2
   2002e:	009b      	lsls	r3, r3, #2
   20030:	189b      	adds	r3, r3, r2
   20032:	009b      	lsls	r3, r3, #2
   20034:	4a0b      	ldr	r2, [pc, #44]	; (20064 <vTaskPrioritySet+0x120>)
   20036:	189a      	adds	r2, r3, r2
   20038:	693b      	ldr	r3, [r7, #16]
   2003a:	3304      	adds	r3, #4
   2003c:	0019      	movs	r1, r3
   2003e:	0010      	movs	r0, r2
   20040:	4b0b      	ldr	r3, [pc, #44]	; (20070 <vTaskPrioritySet+0x12c>)
   20042:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   20044:	697b      	ldr	r3, [r7, #20]
   20046:	2b00      	cmp	r3, #0
   20048:	d001      	beq.n	2004e <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   2004a:	4b0a      	ldr	r3, [pc, #40]	; (20074 <vTaskPrioritySet+0x130>)
   2004c:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   2004e:	4b0a      	ldr	r3, [pc, #40]	; (20078 <vTaskPrioritySet+0x134>)
   20050:	4798      	blx	r3
	}
   20052:	46c0      	nop			; (mov r8, r8)
   20054:	46bd      	mov	sp, r7
   20056:	b006      	add	sp, #24
   20058:	bd80      	pop	{r7, pc}
   2005a:	46c0      	nop			; (mov r8, r8)
   2005c:	0001ecd1 	.word	0x0001ecd1
   20060:	200002b8 	.word	0x200002b8
   20064:	200002bc 	.word	0x200002bc
   20068:	0001ef77 	.word	0x0001ef77
   2006c:	20000398 	.word	0x20000398
   20070:	0001eec7 	.word	0x0001eec7
   20074:	0001ecb1 	.word	0x0001ecb1
   20078:	0001ecf5 	.word	0x0001ecf5

0002007c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   2007c:	b590      	push	{r4, r7, lr}
   2007e:	b085      	sub	sp, #20
   20080:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20082:	4916      	ldr	r1, [pc, #88]	; (200dc <vTaskStartScheduler+0x60>)
   20084:	4816      	ldr	r0, [pc, #88]	; (200e0 <vTaskStartScheduler+0x64>)
   20086:	4b17      	ldr	r3, [pc, #92]	; (200e4 <vTaskStartScheduler+0x68>)
   20088:	9301      	str	r3, [sp, #4]
   2008a:	2300      	movs	r3, #0
   2008c:	9300      	str	r3, [sp, #0]
   2008e:	2300      	movs	r3, #0
   20090:	2282      	movs	r2, #130	; 0x82
   20092:	4c15      	ldr	r4, [pc, #84]	; (200e8 <vTaskStartScheduler+0x6c>)
   20094:	47a0      	blx	r4
   20096:	0003      	movs	r3, r0
   20098:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   2009a:	687b      	ldr	r3, [r7, #4]
   2009c:	2b01      	cmp	r3, #1
   2009e:	d103      	bne.n	200a8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   200a0:	4b12      	ldr	r3, [pc, #72]	; (200ec <vTaskStartScheduler+0x70>)
   200a2:	4798      	blx	r3
   200a4:	0003      	movs	r3, r0
   200a6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   200a8:	687b      	ldr	r3, [r7, #4]
   200aa:	2b01      	cmp	r3, #1
   200ac:	d10d      	bne.n	200ca <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   200ae:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   200b0:	4b0f      	ldr	r3, [pc, #60]	; (200f0 <vTaskStartScheduler+0x74>)
   200b2:	2201      	movs	r2, #1
   200b4:	4252      	negs	r2, r2
   200b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   200b8:	4b0e      	ldr	r3, [pc, #56]	; (200f4 <vTaskStartScheduler+0x78>)
   200ba:	2201      	movs	r2, #1
   200bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   200be:	4b0e      	ldr	r3, [pc, #56]	; (200f8 <vTaskStartScheduler+0x7c>)
   200c0:	2200      	movs	r2, #0
   200c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   200c4:	4b0d      	ldr	r3, [pc, #52]	; (200fc <vTaskStartScheduler+0x80>)
   200c6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   200c8:	e004      	b.n	200d4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   200ca:	687b      	ldr	r3, [r7, #4]
   200cc:	3301      	adds	r3, #1
   200ce:	d101      	bne.n	200d4 <vTaskStartScheduler+0x58>
   200d0:	b672      	cpsid	i
   200d2:	e7fe      	b.n	200d2 <vTaskStartScheduler+0x56>
}
   200d4:	46c0      	nop			; (mov r8, r8)
   200d6:	46bd      	mov	sp, r7
   200d8:	b003      	add	sp, #12
   200da:	bd90      	pop	{r4, r7, pc}
   200dc:	0002aa88 	.word	0x0002aa88
   200e0:	000206e1 	.word	0x000206e1
   200e4:	200003b4 	.word	0x200003b4
   200e8:	0001fba9 	.word	0x0001fba9
   200ec:	00020dad 	.word	0x00020dad
   200f0:	200003b0 	.word	0x200003b0
   200f4:	2000039c 	.word	0x2000039c
   200f8:	20000394 	.word	0x20000394
   200fc:	0001ec59 	.word	0x0001ec59

00020100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20100:	b580      	push	{r7, lr}
   20102:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20104:	4b03      	ldr	r3, [pc, #12]	; (20114 <vTaskSuspendAll+0x14>)
   20106:	681b      	ldr	r3, [r3, #0]
   20108:	1c5a      	adds	r2, r3, #1
   2010a:	4b02      	ldr	r3, [pc, #8]	; (20114 <vTaskSuspendAll+0x14>)
   2010c:	601a      	str	r2, [r3, #0]
}
   2010e:	46c0      	nop			; (mov r8, r8)
   20110:	46bd      	mov	sp, r7
   20112:	bd80      	pop	{r7, pc}
   20114:	200003b8 	.word	0x200003b8

00020118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20118:	b580      	push	{r7, lr}
   2011a:	b084      	sub	sp, #16
   2011c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   2011e:	2300      	movs	r3, #0
   20120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   20122:	2300      	movs	r3, #0
   20124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   20126:	4b3a      	ldr	r3, [pc, #232]	; (20210 <xTaskResumeAll+0xf8>)
   20128:	681b      	ldr	r3, [r3, #0]
   2012a:	2b00      	cmp	r3, #0
   2012c:	d101      	bne.n	20132 <xTaskResumeAll+0x1a>
   2012e:	b672      	cpsid	i
   20130:	e7fe      	b.n	20130 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   20132:	4b38      	ldr	r3, [pc, #224]	; (20214 <xTaskResumeAll+0xfc>)
   20134:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   20136:	4b36      	ldr	r3, [pc, #216]	; (20210 <xTaskResumeAll+0xf8>)
   20138:	681b      	ldr	r3, [r3, #0]
   2013a:	1e5a      	subs	r2, r3, #1
   2013c:	4b34      	ldr	r3, [pc, #208]	; (20210 <xTaskResumeAll+0xf8>)
   2013e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20140:	4b33      	ldr	r3, [pc, #204]	; (20210 <xTaskResumeAll+0xf8>)
   20142:	681b      	ldr	r3, [r3, #0]
   20144:	2b00      	cmp	r3, #0
   20146:	d15b      	bne.n	20200 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   20148:	4b33      	ldr	r3, [pc, #204]	; (20218 <xTaskResumeAll+0x100>)
   2014a:	681b      	ldr	r3, [r3, #0]
   2014c:	2b00      	cmp	r3, #0
   2014e:	d057      	beq.n	20200 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20150:	e02f      	b.n	201b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   20152:	4b32      	ldr	r3, [pc, #200]	; (2021c <xTaskResumeAll+0x104>)
   20154:	68db      	ldr	r3, [r3, #12]
   20156:	68db      	ldr	r3, [r3, #12]
   20158:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2015a:	68fb      	ldr	r3, [r7, #12]
   2015c:	3318      	adds	r3, #24
   2015e:	0018      	movs	r0, r3
   20160:	4b2f      	ldr	r3, [pc, #188]	; (20220 <xTaskResumeAll+0x108>)
   20162:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20164:	68fb      	ldr	r3, [r7, #12]
   20166:	3304      	adds	r3, #4
   20168:	0018      	movs	r0, r3
   2016a:	4b2d      	ldr	r3, [pc, #180]	; (20220 <xTaskResumeAll+0x108>)
   2016c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   2016e:	68fb      	ldr	r3, [r7, #12]
   20170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20172:	4b2c      	ldr	r3, [pc, #176]	; (20224 <xTaskResumeAll+0x10c>)
   20174:	681b      	ldr	r3, [r3, #0]
   20176:	429a      	cmp	r2, r3
   20178:	d903      	bls.n	20182 <xTaskResumeAll+0x6a>
   2017a:	68fb      	ldr	r3, [r7, #12]
   2017c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2017e:	4b29      	ldr	r3, [pc, #164]	; (20224 <xTaskResumeAll+0x10c>)
   20180:	601a      	str	r2, [r3, #0]
   20182:	68fb      	ldr	r3, [r7, #12]
   20184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20186:	0013      	movs	r3, r2
   20188:	009b      	lsls	r3, r3, #2
   2018a:	189b      	adds	r3, r3, r2
   2018c:	009b      	lsls	r3, r3, #2
   2018e:	4a26      	ldr	r2, [pc, #152]	; (20228 <xTaskResumeAll+0x110>)
   20190:	189a      	adds	r2, r3, r2
   20192:	68fb      	ldr	r3, [r7, #12]
   20194:	3304      	adds	r3, #4
   20196:	0019      	movs	r1, r3
   20198:	0010      	movs	r0, r2
   2019a:	4b24      	ldr	r3, [pc, #144]	; (2022c <xTaskResumeAll+0x114>)
   2019c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2019e:	68fb      	ldr	r3, [r7, #12]
   201a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201a2:	4b23      	ldr	r3, [pc, #140]	; (20230 <xTaskResumeAll+0x118>)
   201a4:	681b      	ldr	r3, [r3, #0]
   201a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   201a8:	429a      	cmp	r2, r3
   201aa:	d302      	bcc.n	201b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   201ac:	4b21      	ldr	r3, [pc, #132]	; (20234 <xTaskResumeAll+0x11c>)
   201ae:	2201      	movs	r2, #1
   201b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   201b2:	4b1a      	ldr	r3, [pc, #104]	; (2021c <xTaskResumeAll+0x104>)
   201b4:	681b      	ldr	r3, [r3, #0]
   201b6:	2b00      	cmp	r3, #0
   201b8:	d1cb      	bne.n	20152 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   201ba:	68fb      	ldr	r3, [r7, #12]
   201bc:	2b00      	cmp	r3, #0
   201be:	d001      	beq.n	201c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   201c0:	4b1d      	ldr	r3, [pc, #116]	; (20238 <xTaskResumeAll+0x120>)
   201c2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   201c4:	4b1d      	ldr	r3, [pc, #116]	; (2023c <xTaskResumeAll+0x124>)
   201c6:	681b      	ldr	r3, [r3, #0]
   201c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   201ca:	687b      	ldr	r3, [r7, #4]
   201cc:	2b00      	cmp	r3, #0
   201ce:	d00f      	beq.n	201f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   201d0:	4b1b      	ldr	r3, [pc, #108]	; (20240 <xTaskResumeAll+0x128>)
   201d2:	4798      	blx	r3
   201d4:	1e03      	subs	r3, r0, #0
   201d6:	d002      	beq.n	201de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   201d8:	4b16      	ldr	r3, [pc, #88]	; (20234 <xTaskResumeAll+0x11c>)
   201da:	2201      	movs	r2, #1
   201dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   201de:	687b      	ldr	r3, [r7, #4]
   201e0:	3b01      	subs	r3, #1
   201e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   201e4:	687b      	ldr	r3, [r7, #4]
   201e6:	2b00      	cmp	r3, #0
   201e8:	d1f2      	bne.n	201d0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   201ea:	4b14      	ldr	r3, [pc, #80]	; (2023c <xTaskResumeAll+0x124>)
   201ec:	2200      	movs	r2, #0
   201ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   201f0:	4b10      	ldr	r3, [pc, #64]	; (20234 <xTaskResumeAll+0x11c>)
   201f2:	681b      	ldr	r3, [r3, #0]
   201f4:	2b00      	cmp	r3, #0
   201f6:	d003      	beq.n	20200 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   201f8:	2301      	movs	r3, #1
   201fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   201fc:	4b11      	ldr	r3, [pc, #68]	; (20244 <xTaskResumeAll+0x12c>)
   201fe:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20200:	4b11      	ldr	r3, [pc, #68]	; (20248 <xTaskResumeAll+0x130>)
   20202:	4798      	blx	r3

	return xAlreadyYielded;
   20204:	68bb      	ldr	r3, [r7, #8]
}
   20206:	0018      	movs	r0, r3
   20208:	46bd      	mov	sp, r7
   2020a:	b004      	add	sp, #16
   2020c:	bd80      	pop	{r7, pc}
   2020e:	46c0      	nop			; (mov r8, r8)
   20210:	200003b8 	.word	0x200003b8
   20214:	0001ecd1 	.word	0x0001ecd1
   20218:	20000390 	.word	0x20000390
   2021c:	20000350 	.word	0x20000350
   20220:	0001ef77 	.word	0x0001ef77
   20224:	20000398 	.word	0x20000398
   20228:	200002bc 	.word	0x200002bc
   2022c:	0001eec7 	.word	0x0001eec7
   20230:	200002b8 	.word	0x200002b8
   20234:	200003a4 	.word	0x200003a4
   20238:	00020829 	.word	0x00020829
   2023c:	200003a0 	.word	0x200003a0
   20240:	00020289 	.word	0x00020289
   20244:	0001ecb1 	.word	0x0001ecb1
   20248:	0001ecf5 	.word	0x0001ecf5

0002024c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   2024c:	b580      	push	{r7, lr}
   2024e:	b082      	sub	sp, #8
   20250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   20252:	4b04      	ldr	r3, [pc, #16]	; (20264 <xTaskGetTickCount+0x18>)
   20254:	681b      	ldr	r3, [r3, #0]
   20256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   20258:	687b      	ldr	r3, [r7, #4]
}
   2025a:	0018      	movs	r0, r3
   2025c:	46bd      	mov	sp, r7
   2025e:	b002      	add	sp, #8
   20260:	bd80      	pop	{r7, pc}
   20262:	46c0      	nop			; (mov r8, r8)
   20264:	20000394 	.word	0x20000394

00020268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   20268:	b580      	push	{r7, lr}
   2026a:	b082      	sub	sp, #8
   2026c:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   2026e:	2300      	movs	r3, #0
   20270:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   20272:	4b04      	ldr	r3, [pc, #16]	; (20284 <xTaskGetTickCountFromISR+0x1c>)
   20274:	681b      	ldr	r3, [r3, #0]
   20276:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   20278:	683b      	ldr	r3, [r7, #0]
}
   2027a:	0018      	movs	r0, r3
   2027c:	46bd      	mov	sp, r7
   2027e:	b002      	add	sp, #8
   20280:	bd80      	pop	{r7, pc}
   20282:	46c0      	nop			; (mov r8, r8)
   20284:	20000394 	.word	0x20000394

00020288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20288:	b580      	push	{r7, lr}
   2028a:	b086      	sub	sp, #24
   2028c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   2028e:	2300      	movs	r3, #0
   20290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20292:	4b4c      	ldr	r3, [pc, #304]	; (203c4 <xTaskIncrementTick+0x13c>)
   20294:	681b      	ldr	r3, [r3, #0]
   20296:	2b00      	cmp	r3, #0
   20298:	d000      	beq.n	2029c <xTaskIncrementTick+0x14>
   2029a:	e083      	b.n	203a4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2029c:	4b4a      	ldr	r3, [pc, #296]	; (203c8 <xTaskIncrementTick+0x140>)
   2029e:	681b      	ldr	r3, [r3, #0]
   202a0:	3301      	adds	r3, #1
   202a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   202a4:	4b48      	ldr	r3, [pc, #288]	; (203c8 <xTaskIncrementTick+0x140>)
   202a6:	693a      	ldr	r2, [r7, #16]
   202a8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   202aa:	693b      	ldr	r3, [r7, #16]
   202ac:	2b00      	cmp	r3, #0
   202ae:	d117      	bne.n	202e0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   202b0:	4b46      	ldr	r3, [pc, #280]	; (203cc <xTaskIncrementTick+0x144>)
   202b2:	681b      	ldr	r3, [r3, #0]
   202b4:	681b      	ldr	r3, [r3, #0]
   202b6:	2b00      	cmp	r3, #0
   202b8:	d001      	beq.n	202be <xTaskIncrementTick+0x36>
   202ba:	b672      	cpsid	i
   202bc:	e7fe      	b.n	202bc <xTaskIncrementTick+0x34>
   202be:	4b43      	ldr	r3, [pc, #268]	; (203cc <xTaskIncrementTick+0x144>)
   202c0:	681b      	ldr	r3, [r3, #0]
   202c2:	60fb      	str	r3, [r7, #12]
   202c4:	4b42      	ldr	r3, [pc, #264]	; (203d0 <xTaskIncrementTick+0x148>)
   202c6:	681a      	ldr	r2, [r3, #0]
   202c8:	4b40      	ldr	r3, [pc, #256]	; (203cc <xTaskIncrementTick+0x144>)
   202ca:	601a      	str	r2, [r3, #0]
   202cc:	4b40      	ldr	r3, [pc, #256]	; (203d0 <xTaskIncrementTick+0x148>)
   202ce:	68fa      	ldr	r2, [r7, #12]
   202d0:	601a      	str	r2, [r3, #0]
   202d2:	4b40      	ldr	r3, [pc, #256]	; (203d4 <xTaskIncrementTick+0x14c>)
   202d4:	681b      	ldr	r3, [r3, #0]
   202d6:	1c5a      	adds	r2, r3, #1
   202d8:	4b3e      	ldr	r3, [pc, #248]	; (203d4 <xTaskIncrementTick+0x14c>)
   202da:	601a      	str	r2, [r3, #0]
   202dc:	4b3e      	ldr	r3, [pc, #248]	; (203d8 <xTaskIncrementTick+0x150>)
   202de:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   202e0:	4b3e      	ldr	r3, [pc, #248]	; (203dc <xTaskIncrementTick+0x154>)
   202e2:	681b      	ldr	r3, [r3, #0]
   202e4:	693a      	ldr	r2, [r7, #16]
   202e6:	429a      	cmp	r2, r3
   202e8:	d34e      	bcc.n	20388 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   202ea:	4b38      	ldr	r3, [pc, #224]	; (203cc <xTaskIncrementTick+0x144>)
   202ec:	681b      	ldr	r3, [r3, #0]
   202ee:	681b      	ldr	r3, [r3, #0]
   202f0:	2b00      	cmp	r3, #0
   202f2:	d101      	bne.n	202f8 <xTaskIncrementTick+0x70>
   202f4:	2301      	movs	r3, #1
   202f6:	e000      	b.n	202fa <xTaskIncrementTick+0x72>
   202f8:	2300      	movs	r3, #0
   202fa:	2b00      	cmp	r3, #0
   202fc:	d004      	beq.n	20308 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   202fe:	4b37      	ldr	r3, [pc, #220]	; (203dc <xTaskIncrementTick+0x154>)
   20300:	2201      	movs	r2, #1
   20302:	4252      	negs	r2, r2
   20304:	601a      	str	r2, [r3, #0]
					break;
   20306:	e03f      	b.n	20388 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20308:	4b30      	ldr	r3, [pc, #192]	; (203cc <xTaskIncrementTick+0x144>)
   2030a:	681b      	ldr	r3, [r3, #0]
   2030c:	68db      	ldr	r3, [r3, #12]
   2030e:	68db      	ldr	r3, [r3, #12]
   20310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20312:	68bb      	ldr	r3, [r7, #8]
   20314:	685b      	ldr	r3, [r3, #4]
   20316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20318:	693a      	ldr	r2, [r7, #16]
   2031a:	687b      	ldr	r3, [r7, #4]
   2031c:	429a      	cmp	r2, r3
   2031e:	d203      	bcs.n	20328 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   20320:	4b2e      	ldr	r3, [pc, #184]	; (203dc <xTaskIncrementTick+0x154>)
   20322:	687a      	ldr	r2, [r7, #4]
   20324:	601a      	str	r2, [r3, #0]
						break;
   20326:	e02f      	b.n	20388 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20328:	68bb      	ldr	r3, [r7, #8]
   2032a:	3304      	adds	r3, #4
   2032c:	0018      	movs	r0, r3
   2032e:	4b2c      	ldr	r3, [pc, #176]	; (203e0 <xTaskIncrementTick+0x158>)
   20330:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   20332:	68bb      	ldr	r3, [r7, #8]
   20334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20336:	2b00      	cmp	r3, #0
   20338:	d004      	beq.n	20344 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   2033a:	68bb      	ldr	r3, [r7, #8]
   2033c:	3318      	adds	r3, #24
   2033e:	0018      	movs	r0, r3
   20340:	4b27      	ldr	r3, [pc, #156]	; (203e0 <xTaskIncrementTick+0x158>)
   20342:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   20344:	68bb      	ldr	r3, [r7, #8]
   20346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20348:	4b26      	ldr	r3, [pc, #152]	; (203e4 <xTaskIncrementTick+0x15c>)
   2034a:	681b      	ldr	r3, [r3, #0]
   2034c:	429a      	cmp	r2, r3
   2034e:	d903      	bls.n	20358 <xTaskIncrementTick+0xd0>
   20350:	68bb      	ldr	r3, [r7, #8]
   20352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20354:	4b23      	ldr	r3, [pc, #140]	; (203e4 <xTaskIncrementTick+0x15c>)
   20356:	601a      	str	r2, [r3, #0]
   20358:	68bb      	ldr	r3, [r7, #8]
   2035a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2035c:	0013      	movs	r3, r2
   2035e:	009b      	lsls	r3, r3, #2
   20360:	189b      	adds	r3, r3, r2
   20362:	009b      	lsls	r3, r3, #2
   20364:	4a20      	ldr	r2, [pc, #128]	; (203e8 <xTaskIncrementTick+0x160>)
   20366:	189a      	adds	r2, r3, r2
   20368:	68bb      	ldr	r3, [r7, #8]
   2036a:	3304      	adds	r3, #4
   2036c:	0019      	movs	r1, r3
   2036e:	0010      	movs	r0, r2
   20370:	4b1e      	ldr	r3, [pc, #120]	; (203ec <xTaskIncrementTick+0x164>)
   20372:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20374:	68bb      	ldr	r3, [r7, #8]
   20376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20378:	4b1d      	ldr	r3, [pc, #116]	; (203f0 <xTaskIncrementTick+0x168>)
   2037a:	681b      	ldr	r3, [r3, #0]
   2037c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2037e:	429a      	cmp	r2, r3
   20380:	d3b3      	bcc.n	202ea <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20382:	2301      	movs	r3, #1
   20384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20386:	e7b0      	b.n	202ea <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20388:	4b19      	ldr	r3, [pc, #100]	; (203f0 <xTaskIncrementTick+0x168>)
   2038a:	681b      	ldr	r3, [r3, #0]
   2038c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2038e:	4916      	ldr	r1, [pc, #88]	; (203e8 <xTaskIncrementTick+0x160>)
   20390:	0013      	movs	r3, r2
   20392:	009b      	lsls	r3, r3, #2
   20394:	189b      	adds	r3, r3, r2
   20396:	009b      	lsls	r3, r3, #2
   20398:	585b      	ldr	r3, [r3, r1]
   2039a:	2b01      	cmp	r3, #1
   2039c:	d907      	bls.n	203ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   2039e:	2301      	movs	r3, #1
   203a0:	617b      	str	r3, [r7, #20]
   203a2:	e004      	b.n	203ae <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   203a4:	4b13      	ldr	r3, [pc, #76]	; (203f4 <xTaskIncrementTick+0x16c>)
   203a6:	681b      	ldr	r3, [r3, #0]
   203a8:	1c5a      	adds	r2, r3, #1
   203aa:	4b12      	ldr	r3, [pc, #72]	; (203f4 <xTaskIncrementTick+0x16c>)
   203ac:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   203ae:	4b12      	ldr	r3, [pc, #72]	; (203f8 <xTaskIncrementTick+0x170>)
   203b0:	681b      	ldr	r3, [r3, #0]
   203b2:	2b00      	cmp	r3, #0
   203b4:	d001      	beq.n	203ba <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   203b6:	2301      	movs	r3, #1
   203b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   203ba:	697b      	ldr	r3, [r7, #20]
}
   203bc:	0018      	movs	r0, r3
   203be:	46bd      	mov	sp, r7
   203c0:	b006      	add	sp, #24
   203c2:	bd80      	pop	{r7, pc}
   203c4:	200003b8 	.word	0x200003b8
   203c8:	20000394 	.word	0x20000394
   203cc:	20000348 	.word	0x20000348
   203d0:	2000034c 	.word	0x2000034c
   203d4:	200003a8 	.word	0x200003a8
   203d8:	00020829 	.word	0x00020829
   203dc:	200003b0 	.word	0x200003b0
   203e0:	0001ef77 	.word	0x0001ef77
   203e4:	20000398 	.word	0x20000398
   203e8:	200002bc 	.word	0x200002bc
   203ec:	0001eec7 	.word	0x0001eec7
   203f0:	200002b8 	.word	0x200002b8
   203f4:	200003a0 	.word	0x200003a0
   203f8:	200003a4 	.word	0x200003a4

000203fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   203fc:	b580      	push	{r7, lr}
   203fe:	b082      	sub	sp, #8
   20400:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20402:	4b22      	ldr	r3, [pc, #136]	; (2048c <vTaskSwitchContext+0x90>)
   20404:	681b      	ldr	r3, [r3, #0]
   20406:	2b00      	cmp	r3, #0
   20408:	d003      	beq.n	20412 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   2040a:	4b21      	ldr	r3, [pc, #132]	; (20490 <vTaskSwitchContext+0x94>)
   2040c:	2201      	movs	r2, #1
   2040e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20410:	e037      	b.n	20482 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20412:	4b1f      	ldr	r3, [pc, #124]	; (20490 <vTaskSwitchContext+0x94>)
   20414:	2200      	movs	r2, #0
   20416:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20418:	4b1e      	ldr	r3, [pc, #120]	; (20494 <vTaskSwitchContext+0x98>)
   2041a:	681b      	ldr	r3, [r3, #0]
   2041c:	607b      	str	r3, [r7, #4]
   2041e:	e007      	b.n	20430 <vTaskSwitchContext+0x34>
   20420:	687b      	ldr	r3, [r7, #4]
   20422:	2b00      	cmp	r3, #0
   20424:	d101      	bne.n	2042a <vTaskSwitchContext+0x2e>
   20426:	b672      	cpsid	i
   20428:	e7fe      	b.n	20428 <vTaskSwitchContext+0x2c>
   2042a:	687b      	ldr	r3, [r7, #4]
   2042c:	3b01      	subs	r3, #1
   2042e:	607b      	str	r3, [r7, #4]
   20430:	4919      	ldr	r1, [pc, #100]	; (20498 <vTaskSwitchContext+0x9c>)
   20432:	687a      	ldr	r2, [r7, #4]
   20434:	0013      	movs	r3, r2
   20436:	009b      	lsls	r3, r3, #2
   20438:	189b      	adds	r3, r3, r2
   2043a:	009b      	lsls	r3, r3, #2
   2043c:	585b      	ldr	r3, [r3, r1]
   2043e:	2b00      	cmp	r3, #0
   20440:	d0ee      	beq.n	20420 <vTaskSwitchContext+0x24>
   20442:	687a      	ldr	r2, [r7, #4]
   20444:	0013      	movs	r3, r2
   20446:	009b      	lsls	r3, r3, #2
   20448:	189b      	adds	r3, r3, r2
   2044a:	009b      	lsls	r3, r3, #2
   2044c:	4a12      	ldr	r2, [pc, #72]	; (20498 <vTaskSwitchContext+0x9c>)
   2044e:	189b      	adds	r3, r3, r2
   20450:	603b      	str	r3, [r7, #0]
   20452:	683b      	ldr	r3, [r7, #0]
   20454:	685b      	ldr	r3, [r3, #4]
   20456:	685a      	ldr	r2, [r3, #4]
   20458:	683b      	ldr	r3, [r7, #0]
   2045a:	605a      	str	r2, [r3, #4]
   2045c:	683b      	ldr	r3, [r7, #0]
   2045e:	685a      	ldr	r2, [r3, #4]
   20460:	683b      	ldr	r3, [r7, #0]
   20462:	3308      	adds	r3, #8
   20464:	429a      	cmp	r2, r3
   20466:	d104      	bne.n	20472 <vTaskSwitchContext+0x76>
   20468:	683b      	ldr	r3, [r7, #0]
   2046a:	685b      	ldr	r3, [r3, #4]
   2046c:	685a      	ldr	r2, [r3, #4]
   2046e:	683b      	ldr	r3, [r7, #0]
   20470:	605a      	str	r2, [r3, #4]
   20472:	683b      	ldr	r3, [r7, #0]
   20474:	685b      	ldr	r3, [r3, #4]
   20476:	68da      	ldr	r2, [r3, #12]
   20478:	4b08      	ldr	r3, [pc, #32]	; (2049c <vTaskSwitchContext+0xa0>)
   2047a:	601a      	str	r2, [r3, #0]
   2047c:	4b05      	ldr	r3, [pc, #20]	; (20494 <vTaskSwitchContext+0x98>)
   2047e:	687a      	ldr	r2, [r7, #4]
   20480:	601a      	str	r2, [r3, #0]
}
   20482:	46c0      	nop			; (mov r8, r8)
   20484:	46bd      	mov	sp, r7
   20486:	b002      	add	sp, #8
   20488:	bd80      	pop	{r7, pc}
   2048a:	46c0      	nop			; (mov r8, r8)
   2048c:	200003b8 	.word	0x200003b8
   20490:	200003a4 	.word	0x200003a4
   20494:	20000398 	.word	0x20000398
   20498:	200002bc 	.word	0x200002bc
   2049c:	200002b8 	.word	0x200002b8

000204a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   204a0:	b580      	push	{r7, lr}
   204a2:	b082      	sub	sp, #8
   204a4:	af00      	add	r7, sp, #0
   204a6:	6078      	str	r0, [r7, #4]
   204a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   204aa:	687b      	ldr	r3, [r7, #4]
   204ac:	2b00      	cmp	r3, #0
   204ae:	d101      	bne.n	204b4 <vTaskPlaceOnEventList+0x14>
   204b0:	b672      	cpsid	i
   204b2:	e7fe      	b.n	204b2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   204b4:	4b08      	ldr	r3, [pc, #32]	; (204d8 <vTaskPlaceOnEventList+0x38>)
   204b6:	681b      	ldr	r3, [r3, #0]
   204b8:	3318      	adds	r3, #24
   204ba:	001a      	movs	r2, r3
   204bc:	687b      	ldr	r3, [r7, #4]
   204be:	0011      	movs	r1, r2
   204c0:	0018      	movs	r0, r3
   204c2:	4b06      	ldr	r3, [pc, #24]	; (204dc <vTaskPlaceOnEventList+0x3c>)
   204c4:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   204c6:	683b      	ldr	r3, [r7, #0]
   204c8:	2101      	movs	r1, #1
   204ca:	0018      	movs	r0, r3
   204cc:	4b04      	ldr	r3, [pc, #16]	; (204e0 <vTaskPlaceOnEventList+0x40>)
   204ce:	4798      	blx	r3
}
   204d0:	46c0      	nop			; (mov r8, r8)
   204d2:	46bd      	mov	sp, r7
   204d4:	b002      	add	sp, #8
   204d6:	bd80      	pop	{r7, pc}
   204d8:	200002b8 	.word	0x200002b8
   204dc:	0001ef0b 	.word	0x0001ef0b
   204e0:	00020cf9 	.word	0x00020cf9

000204e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   204e4:	b580      	push	{r7, lr}
   204e6:	b084      	sub	sp, #16
   204e8:	af00      	add	r7, sp, #0
   204ea:	60f8      	str	r0, [r7, #12]
   204ec:	60b9      	str	r1, [r7, #8]
   204ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   204f0:	68fb      	ldr	r3, [r7, #12]
   204f2:	2b00      	cmp	r3, #0
   204f4:	d101      	bne.n	204fa <vTaskPlaceOnEventListRestricted+0x16>
   204f6:	b672      	cpsid	i
   204f8:	e7fe      	b.n	204f8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   204fa:	4b0c      	ldr	r3, [pc, #48]	; (2052c <vTaskPlaceOnEventListRestricted+0x48>)
   204fc:	681b      	ldr	r3, [r3, #0]
   204fe:	3318      	adds	r3, #24
   20500:	001a      	movs	r2, r3
   20502:	68fb      	ldr	r3, [r7, #12]
   20504:	0011      	movs	r1, r2
   20506:	0018      	movs	r0, r3
   20508:	4b09      	ldr	r3, [pc, #36]	; (20530 <vTaskPlaceOnEventListRestricted+0x4c>)
   2050a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   2050c:	687b      	ldr	r3, [r7, #4]
   2050e:	2b00      	cmp	r3, #0
   20510:	d002      	beq.n	20518 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20512:	2301      	movs	r3, #1
   20514:	425b      	negs	r3, r3
   20516:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20518:	687a      	ldr	r2, [r7, #4]
   2051a:	68bb      	ldr	r3, [r7, #8]
   2051c:	0011      	movs	r1, r2
   2051e:	0018      	movs	r0, r3
   20520:	4b04      	ldr	r3, [pc, #16]	; (20534 <vTaskPlaceOnEventListRestricted+0x50>)
   20522:	4798      	blx	r3
	}
   20524:	46c0      	nop			; (mov r8, r8)
   20526:	46bd      	mov	sp, r7
   20528:	b004      	add	sp, #16
   2052a:	bd80      	pop	{r7, pc}
   2052c:	200002b8 	.word	0x200002b8
   20530:	0001eec7 	.word	0x0001eec7
   20534:	00020cf9 	.word	0x00020cf9

00020538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   20538:	b580      	push	{r7, lr}
   2053a:	b084      	sub	sp, #16
   2053c:	af00      	add	r7, sp, #0
   2053e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20540:	687b      	ldr	r3, [r7, #4]
   20542:	68db      	ldr	r3, [r3, #12]
   20544:	68db      	ldr	r3, [r3, #12]
   20546:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   20548:	68bb      	ldr	r3, [r7, #8]
   2054a:	2b00      	cmp	r3, #0
   2054c:	d101      	bne.n	20552 <xTaskRemoveFromEventList+0x1a>
   2054e:	b672      	cpsid	i
   20550:	e7fe      	b.n	20550 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   20552:	68bb      	ldr	r3, [r7, #8]
   20554:	3318      	adds	r3, #24
   20556:	0018      	movs	r0, r3
   20558:	4b1f      	ldr	r3, [pc, #124]	; (205d8 <xTaskRemoveFromEventList+0xa0>)
   2055a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2055c:	4b1f      	ldr	r3, [pc, #124]	; (205dc <xTaskRemoveFromEventList+0xa4>)
   2055e:	681b      	ldr	r3, [r3, #0]
   20560:	2b00      	cmp	r3, #0
   20562:	d11d      	bne.n	205a0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20564:	68bb      	ldr	r3, [r7, #8]
   20566:	3304      	adds	r3, #4
   20568:	0018      	movs	r0, r3
   2056a:	4b1b      	ldr	r3, [pc, #108]	; (205d8 <xTaskRemoveFromEventList+0xa0>)
   2056c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   2056e:	68bb      	ldr	r3, [r7, #8]
   20570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20572:	4b1b      	ldr	r3, [pc, #108]	; (205e0 <xTaskRemoveFromEventList+0xa8>)
   20574:	681b      	ldr	r3, [r3, #0]
   20576:	429a      	cmp	r2, r3
   20578:	d903      	bls.n	20582 <xTaskRemoveFromEventList+0x4a>
   2057a:	68bb      	ldr	r3, [r7, #8]
   2057c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2057e:	4b18      	ldr	r3, [pc, #96]	; (205e0 <xTaskRemoveFromEventList+0xa8>)
   20580:	601a      	str	r2, [r3, #0]
   20582:	68bb      	ldr	r3, [r7, #8]
   20584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20586:	0013      	movs	r3, r2
   20588:	009b      	lsls	r3, r3, #2
   2058a:	189b      	adds	r3, r3, r2
   2058c:	009b      	lsls	r3, r3, #2
   2058e:	4a15      	ldr	r2, [pc, #84]	; (205e4 <xTaskRemoveFromEventList+0xac>)
   20590:	189a      	adds	r2, r3, r2
   20592:	68bb      	ldr	r3, [r7, #8]
   20594:	3304      	adds	r3, #4
   20596:	0019      	movs	r1, r3
   20598:	0010      	movs	r0, r2
   2059a:	4b13      	ldr	r3, [pc, #76]	; (205e8 <xTaskRemoveFromEventList+0xb0>)
   2059c:	4798      	blx	r3
   2059e:	e007      	b.n	205b0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   205a0:	68bb      	ldr	r3, [r7, #8]
   205a2:	3318      	adds	r3, #24
   205a4:	001a      	movs	r2, r3
   205a6:	4b11      	ldr	r3, [pc, #68]	; (205ec <xTaskRemoveFromEventList+0xb4>)
   205a8:	0011      	movs	r1, r2
   205aa:	0018      	movs	r0, r3
   205ac:	4b0e      	ldr	r3, [pc, #56]	; (205e8 <xTaskRemoveFromEventList+0xb0>)
   205ae:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   205b0:	68bb      	ldr	r3, [r7, #8]
   205b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   205b4:	4b0e      	ldr	r3, [pc, #56]	; (205f0 <xTaskRemoveFromEventList+0xb8>)
   205b6:	681b      	ldr	r3, [r3, #0]
   205b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   205ba:	429a      	cmp	r2, r3
   205bc:	d905      	bls.n	205ca <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   205be:	2301      	movs	r3, #1
   205c0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   205c2:	4b0c      	ldr	r3, [pc, #48]	; (205f4 <xTaskRemoveFromEventList+0xbc>)
   205c4:	2201      	movs	r2, #1
   205c6:	601a      	str	r2, [r3, #0]
   205c8:	e001      	b.n	205ce <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   205ca:	2300      	movs	r3, #0
   205cc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   205ce:	68fb      	ldr	r3, [r7, #12]
}
   205d0:	0018      	movs	r0, r3
   205d2:	46bd      	mov	sp, r7
   205d4:	b004      	add	sp, #16
   205d6:	bd80      	pop	{r7, pc}
   205d8:	0001ef77 	.word	0x0001ef77
   205dc:	200003b8 	.word	0x200003b8
   205e0:	20000398 	.word	0x20000398
   205e4:	200002bc 	.word	0x200002bc
   205e8:	0001eec7 	.word	0x0001eec7
   205ec:	20000350 	.word	0x20000350
   205f0:	200002b8 	.word	0x200002b8
   205f4:	200003a4 	.word	0x200003a4

000205f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   205f8:	b580      	push	{r7, lr}
   205fa:	b082      	sub	sp, #8
   205fc:	af00      	add	r7, sp, #0
   205fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20600:	4b05      	ldr	r3, [pc, #20]	; (20618 <vTaskInternalSetTimeOutState+0x20>)
   20602:	681a      	ldr	r2, [r3, #0]
   20604:	687b      	ldr	r3, [r7, #4]
   20606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20608:	4b04      	ldr	r3, [pc, #16]	; (2061c <vTaskInternalSetTimeOutState+0x24>)
   2060a:	681a      	ldr	r2, [r3, #0]
   2060c:	687b      	ldr	r3, [r7, #4]
   2060e:	605a      	str	r2, [r3, #4]
}
   20610:	46c0      	nop			; (mov r8, r8)
   20612:	46bd      	mov	sp, r7
   20614:	b002      	add	sp, #8
   20616:	bd80      	pop	{r7, pc}
   20618:	200003a8 	.word	0x200003a8
   2061c:	20000394 	.word	0x20000394

00020620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   20620:	b580      	push	{r7, lr}
   20622:	b086      	sub	sp, #24
   20624:	af00      	add	r7, sp, #0
   20626:	6078      	str	r0, [r7, #4]
   20628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   2062a:	687b      	ldr	r3, [r7, #4]
   2062c:	2b00      	cmp	r3, #0
   2062e:	d101      	bne.n	20634 <xTaskCheckForTimeOut+0x14>
   20630:	b672      	cpsid	i
   20632:	e7fe      	b.n	20632 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   20634:	683b      	ldr	r3, [r7, #0]
   20636:	2b00      	cmp	r3, #0
   20638:	d101      	bne.n	2063e <xTaskCheckForTimeOut+0x1e>
   2063a:	b672      	cpsid	i
   2063c:	e7fe      	b.n	2063c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   2063e:	4b1e      	ldr	r3, [pc, #120]	; (206b8 <xTaskCheckForTimeOut+0x98>)
   20640:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   20642:	4b1e      	ldr	r3, [pc, #120]	; (206bc <xTaskCheckForTimeOut+0x9c>)
   20644:	681b      	ldr	r3, [r3, #0]
   20646:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   20648:	687b      	ldr	r3, [r7, #4]
   2064a:	685b      	ldr	r3, [r3, #4]
   2064c:	693a      	ldr	r2, [r7, #16]
   2064e:	1ad3      	subs	r3, r2, r3
   20650:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   20652:	683b      	ldr	r3, [r7, #0]
   20654:	681b      	ldr	r3, [r3, #0]
   20656:	3301      	adds	r3, #1
   20658:	d102      	bne.n	20660 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   2065a:	2300      	movs	r3, #0
   2065c:	617b      	str	r3, [r7, #20]
   2065e:	e024      	b.n	206aa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   20660:	687b      	ldr	r3, [r7, #4]
   20662:	681a      	ldr	r2, [r3, #0]
   20664:	4b16      	ldr	r3, [pc, #88]	; (206c0 <xTaskCheckForTimeOut+0xa0>)
   20666:	681b      	ldr	r3, [r3, #0]
   20668:	429a      	cmp	r2, r3
   2066a:	d007      	beq.n	2067c <xTaskCheckForTimeOut+0x5c>
   2066c:	687b      	ldr	r3, [r7, #4]
   2066e:	685a      	ldr	r2, [r3, #4]
   20670:	693b      	ldr	r3, [r7, #16]
   20672:	429a      	cmp	r2, r3
   20674:	d802      	bhi.n	2067c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   20676:	2301      	movs	r3, #1
   20678:	617b      	str	r3, [r7, #20]
   2067a:	e016      	b.n	206aa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   2067c:	683b      	ldr	r3, [r7, #0]
   2067e:	681a      	ldr	r2, [r3, #0]
   20680:	68fb      	ldr	r3, [r7, #12]
   20682:	429a      	cmp	r2, r3
   20684:	d90c      	bls.n	206a0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20686:	683b      	ldr	r3, [r7, #0]
   20688:	681a      	ldr	r2, [r3, #0]
   2068a:	68fb      	ldr	r3, [r7, #12]
   2068c:	1ad2      	subs	r2, r2, r3
   2068e:	683b      	ldr	r3, [r7, #0]
   20690:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20692:	687b      	ldr	r3, [r7, #4]
   20694:	0018      	movs	r0, r3
   20696:	4b0b      	ldr	r3, [pc, #44]	; (206c4 <xTaskCheckForTimeOut+0xa4>)
   20698:	4798      	blx	r3
			xReturn = pdFALSE;
   2069a:	2300      	movs	r3, #0
   2069c:	617b      	str	r3, [r7, #20]
   2069e:	e004      	b.n	206aa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   206a0:	683b      	ldr	r3, [r7, #0]
   206a2:	2200      	movs	r2, #0
   206a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   206a6:	2301      	movs	r3, #1
   206a8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   206aa:	4b07      	ldr	r3, [pc, #28]	; (206c8 <xTaskCheckForTimeOut+0xa8>)
   206ac:	4798      	blx	r3

	return xReturn;
   206ae:	697b      	ldr	r3, [r7, #20]
}
   206b0:	0018      	movs	r0, r3
   206b2:	46bd      	mov	sp, r7
   206b4:	b006      	add	sp, #24
   206b6:	bd80      	pop	{r7, pc}
   206b8:	0001ecd1 	.word	0x0001ecd1
   206bc:	20000394 	.word	0x20000394
   206c0:	200003a8 	.word	0x200003a8
   206c4:	000205f9 	.word	0x000205f9
   206c8:	0001ecf5 	.word	0x0001ecf5

000206cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   206cc:	b580      	push	{r7, lr}
   206ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   206d0:	4b02      	ldr	r3, [pc, #8]	; (206dc <vTaskMissedYield+0x10>)
   206d2:	2201      	movs	r2, #1
   206d4:	601a      	str	r2, [r3, #0]
}
   206d6:	46c0      	nop			; (mov r8, r8)
   206d8:	46bd      	mov	sp, r7
   206da:	bd80      	pop	{r7, pc}
   206dc:	200003a4 	.word	0x200003a4

000206e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   206e0:	b580      	push	{r7, lr}
   206e2:	b082      	sub	sp, #8
   206e4:	af00      	add	r7, sp, #0
   206e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   206e8:	4b04      	ldr	r3, [pc, #16]	; (206fc <prvIdleTask+0x1c>)
   206ea:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   206ec:	4b04      	ldr	r3, [pc, #16]	; (20700 <prvIdleTask+0x20>)
   206ee:	681b      	ldr	r3, [r3, #0]
   206f0:	2b01      	cmp	r3, #1
   206f2:	d9f9      	bls.n	206e8 <prvIdleTask+0x8>
			{
				taskYIELD();
   206f4:	4b03      	ldr	r3, [pc, #12]	; (20704 <prvIdleTask+0x24>)
   206f6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   206f8:	e7f6      	b.n	206e8 <prvIdleTask+0x8>
   206fa:	46c0      	nop			; (mov r8, r8)
   206fc:	00020795 	.word	0x00020795
   20700:	200002bc 	.word	0x200002bc
   20704:	0001ecb1 	.word	0x0001ecb1

00020708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   20708:	b580      	push	{r7, lr}
   2070a:	b082      	sub	sp, #8
   2070c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2070e:	2300      	movs	r3, #0
   20710:	607b      	str	r3, [r7, #4]
   20712:	e00c      	b.n	2072e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20714:	687a      	ldr	r2, [r7, #4]
   20716:	0013      	movs	r3, r2
   20718:	009b      	lsls	r3, r3, #2
   2071a:	189b      	adds	r3, r3, r2
   2071c:	009b      	lsls	r3, r3, #2
   2071e:	4a14      	ldr	r2, [pc, #80]	; (20770 <prvInitialiseTaskLists+0x68>)
   20720:	189b      	adds	r3, r3, r2
   20722:	0018      	movs	r0, r3
   20724:	4b13      	ldr	r3, [pc, #76]	; (20774 <prvInitialiseTaskLists+0x6c>)
   20726:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   20728:	687b      	ldr	r3, [r7, #4]
   2072a:	3301      	adds	r3, #1
   2072c:	607b      	str	r3, [r7, #4]
   2072e:	687b      	ldr	r3, [r7, #4]
   20730:	2b04      	cmp	r3, #4
   20732:	d9ef      	bls.n	20714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   20734:	4b10      	ldr	r3, [pc, #64]	; (20778 <prvInitialiseTaskLists+0x70>)
   20736:	0018      	movs	r0, r3
   20738:	4b0e      	ldr	r3, [pc, #56]	; (20774 <prvInitialiseTaskLists+0x6c>)
   2073a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   2073c:	4b0f      	ldr	r3, [pc, #60]	; (2077c <prvInitialiseTaskLists+0x74>)
   2073e:	0018      	movs	r0, r3
   20740:	4b0c      	ldr	r3, [pc, #48]	; (20774 <prvInitialiseTaskLists+0x6c>)
   20742:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   20744:	4b0e      	ldr	r3, [pc, #56]	; (20780 <prvInitialiseTaskLists+0x78>)
   20746:	0018      	movs	r0, r3
   20748:	4b0a      	ldr	r3, [pc, #40]	; (20774 <prvInitialiseTaskLists+0x6c>)
   2074a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   2074c:	4b0d      	ldr	r3, [pc, #52]	; (20784 <prvInitialiseTaskLists+0x7c>)
   2074e:	0018      	movs	r0, r3
   20750:	4b08      	ldr	r3, [pc, #32]	; (20774 <prvInitialiseTaskLists+0x6c>)
   20752:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   20754:	4b0c      	ldr	r3, [pc, #48]	; (20788 <prvInitialiseTaskLists+0x80>)
   20756:	0018      	movs	r0, r3
   20758:	4b06      	ldr	r3, [pc, #24]	; (20774 <prvInitialiseTaskLists+0x6c>)
   2075a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   2075c:	4b0b      	ldr	r3, [pc, #44]	; (2078c <prvInitialiseTaskLists+0x84>)
   2075e:	4a06      	ldr	r2, [pc, #24]	; (20778 <prvInitialiseTaskLists+0x70>)
   20760:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   20762:	4b0b      	ldr	r3, [pc, #44]	; (20790 <prvInitialiseTaskLists+0x88>)
   20764:	4a05      	ldr	r2, [pc, #20]	; (2077c <prvInitialiseTaskLists+0x74>)
   20766:	601a      	str	r2, [r3, #0]
}
   20768:	46c0      	nop			; (mov r8, r8)
   2076a:	46bd      	mov	sp, r7
   2076c:	b002      	add	sp, #8
   2076e:	bd80      	pop	{r7, pc}
   20770:	200002bc 	.word	0x200002bc
   20774:	0001ee75 	.word	0x0001ee75
   20778:	20000320 	.word	0x20000320
   2077c:	20000334 	.word	0x20000334
   20780:	20000350 	.word	0x20000350
   20784:	20000364 	.word	0x20000364
   20788:	2000037c 	.word	0x2000037c
   2078c:	20000348 	.word	0x20000348
   20790:	2000034c 	.word	0x2000034c

00020794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20794:	b580      	push	{r7, lr}
   20796:	b082      	sub	sp, #8
   20798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2079a:	e01a      	b.n	207d2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2079c:	4b11      	ldr	r3, [pc, #68]	; (207e4 <prvCheckTasksWaitingTermination+0x50>)
   2079e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   207a0:	4b11      	ldr	r3, [pc, #68]	; (207e8 <prvCheckTasksWaitingTermination+0x54>)
   207a2:	68db      	ldr	r3, [r3, #12]
   207a4:	68db      	ldr	r3, [r3, #12]
   207a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   207a8:	687b      	ldr	r3, [r7, #4]
   207aa:	3304      	adds	r3, #4
   207ac:	0018      	movs	r0, r3
   207ae:	4b0f      	ldr	r3, [pc, #60]	; (207ec <prvCheckTasksWaitingTermination+0x58>)
   207b0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   207b2:	4b0f      	ldr	r3, [pc, #60]	; (207f0 <prvCheckTasksWaitingTermination+0x5c>)
   207b4:	681b      	ldr	r3, [r3, #0]
   207b6:	1e5a      	subs	r2, r3, #1
   207b8:	4b0d      	ldr	r3, [pc, #52]	; (207f0 <prvCheckTasksWaitingTermination+0x5c>)
   207ba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   207bc:	4b0d      	ldr	r3, [pc, #52]	; (207f4 <prvCheckTasksWaitingTermination+0x60>)
   207be:	681b      	ldr	r3, [r3, #0]
   207c0:	1e5a      	subs	r2, r3, #1
   207c2:	4b0c      	ldr	r3, [pc, #48]	; (207f4 <prvCheckTasksWaitingTermination+0x60>)
   207c4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   207c6:	4b0c      	ldr	r3, [pc, #48]	; (207f8 <prvCheckTasksWaitingTermination+0x64>)
   207c8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   207ca:	687b      	ldr	r3, [r7, #4]
   207cc:	0018      	movs	r0, r3
   207ce:	4b0b      	ldr	r3, [pc, #44]	; (207fc <prvCheckTasksWaitingTermination+0x68>)
   207d0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   207d2:	4b08      	ldr	r3, [pc, #32]	; (207f4 <prvCheckTasksWaitingTermination+0x60>)
   207d4:	681b      	ldr	r3, [r3, #0]
   207d6:	2b00      	cmp	r3, #0
   207d8:	d1e0      	bne.n	2079c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   207da:	46c0      	nop			; (mov r8, r8)
   207dc:	46bd      	mov	sp, r7
   207de:	b002      	add	sp, #8
   207e0:	bd80      	pop	{r7, pc}
   207e2:	46c0      	nop			; (mov r8, r8)
   207e4:	0001ecd1 	.word	0x0001ecd1
   207e8:	20000364 	.word	0x20000364
   207ec:	0001ef77 	.word	0x0001ef77
   207f0:	20000390 	.word	0x20000390
   207f4:	20000378 	.word	0x20000378
   207f8:	0001ecf5 	.word	0x0001ecf5
   207fc:	00020801 	.word	0x00020801

00020800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   20800:	b580      	push	{r7, lr}
   20802:	b082      	sub	sp, #8
   20804:	af00      	add	r7, sp, #0
   20806:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   20808:	687b      	ldr	r3, [r7, #4]
   2080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2080c:	0018      	movs	r0, r3
   2080e:	4b05      	ldr	r3, [pc, #20]	; (20824 <prvDeleteTCB+0x24>)
   20810:	4798      	blx	r3
			vPortFree( pxTCB );
   20812:	687b      	ldr	r3, [r7, #4]
   20814:	0018      	movs	r0, r3
   20816:	4b03      	ldr	r3, [pc, #12]	; (20824 <prvDeleteTCB+0x24>)
   20818:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2081a:	46c0      	nop			; (mov r8, r8)
   2081c:	46bd      	mov	sp, r7
   2081e:	b002      	add	sp, #8
   20820:	bd80      	pop	{r7, pc}
   20822:	46c0      	nop			; (mov r8, r8)
   20824:	0001ee41 	.word	0x0001ee41

00020828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   20828:	b580      	push	{r7, lr}
   2082a:	b082      	sub	sp, #8
   2082c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2082e:	4b0e      	ldr	r3, [pc, #56]	; (20868 <prvResetNextTaskUnblockTime+0x40>)
   20830:	681b      	ldr	r3, [r3, #0]
   20832:	681b      	ldr	r3, [r3, #0]
   20834:	2b00      	cmp	r3, #0
   20836:	d101      	bne.n	2083c <prvResetNextTaskUnblockTime+0x14>
   20838:	2301      	movs	r3, #1
   2083a:	e000      	b.n	2083e <prvResetNextTaskUnblockTime+0x16>
   2083c:	2300      	movs	r3, #0
   2083e:	2b00      	cmp	r3, #0
   20840:	d004      	beq.n	2084c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   20842:	4b0a      	ldr	r3, [pc, #40]	; (2086c <prvResetNextTaskUnblockTime+0x44>)
   20844:	2201      	movs	r2, #1
   20846:	4252      	negs	r2, r2
   20848:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   2084a:	e008      	b.n	2085e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   2084c:	4b06      	ldr	r3, [pc, #24]	; (20868 <prvResetNextTaskUnblockTime+0x40>)
   2084e:	681b      	ldr	r3, [r3, #0]
   20850:	68db      	ldr	r3, [r3, #12]
   20852:	68db      	ldr	r3, [r3, #12]
   20854:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   20856:	687b      	ldr	r3, [r7, #4]
   20858:	685a      	ldr	r2, [r3, #4]
   2085a:	4b04      	ldr	r3, [pc, #16]	; (2086c <prvResetNextTaskUnblockTime+0x44>)
   2085c:	601a      	str	r2, [r3, #0]
}
   2085e:	46c0      	nop			; (mov r8, r8)
   20860:	46bd      	mov	sp, r7
   20862:	b002      	add	sp, #8
   20864:	bd80      	pop	{r7, pc}
   20866:	46c0      	nop			; (mov r8, r8)
   20868:	20000348 	.word	0x20000348
   2086c:	200003b0 	.word	0x200003b0

00020870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   20870:	b580      	push	{r7, lr}
   20872:	b082      	sub	sp, #8
   20874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   20876:	4b0a      	ldr	r3, [pc, #40]	; (208a0 <xTaskGetSchedulerState+0x30>)
   20878:	681b      	ldr	r3, [r3, #0]
   2087a:	2b00      	cmp	r3, #0
   2087c:	d102      	bne.n	20884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   2087e:	2301      	movs	r3, #1
   20880:	607b      	str	r3, [r7, #4]
   20882:	e008      	b.n	20896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20884:	4b07      	ldr	r3, [pc, #28]	; (208a4 <xTaskGetSchedulerState+0x34>)
   20886:	681b      	ldr	r3, [r3, #0]
   20888:	2b00      	cmp	r3, #0
   2088a:	d102      	bne.n	20892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2088c:	2302      	movs	r3, #2
   2088e:	607b      	str	r3, [r7, #4]
   20890:	e001      	b.n	20896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   20892:	2300      	movs	r3, #0
   20894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   20896:	687b      	ldr	r3, [r7, #4]
	}
   20898:	0018      	movs	r0, r3
   2089a:	46bd      	mov	sp, r7
   2089c:	b002      	add	sp, #8
   2089e:	bd80      	pop	{r7, pc}
   208a0:	2000039c 	.word	0x2000039c
   208a4:	200003b8 	.word	0x200003b8

000208a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   208a8:	b580      	push	{r7, lr}
   208aa:	b084      	sub	sp, #16
   208ac:	af00      	add	r7, sp, #0
   208ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   208b0:	687b      	ldr	r3, [r7, #4]
   208b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   208b4:	2300      	movs	r3, #0
   208b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   208b8:	687b      	ldr	r3, [r7, #4]
   208ba:	2b00      	cmp	r3, #0
   208bc:	d056      	beq.n	2096c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   208be:	68bb      	ldr	r3, [r7, #8]
   208c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208c2:	4b2d      	ldr	r3, [pc, #180]	; (20978 <xTaskPriorityInherit+0xd0>)
   208c4:	681b      	ldr	r3, [r3, #0]
   208c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   208c8:	429a      	cmp	r2, r3
   208ca:	d246      	bcs.n	2095a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   208cc:	68bb      	ldr	r3, [r7, #8]
   208ce:	699b      	ldr	r3, [r3, #24]
   208d0:	2b00      	cmp	r3, #0
   208d2:	db06      	blt.n	208e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   208d4:	4b28      	ldr	r3, [pc, #160]	; (20978 <xTaskPriorityInherit+0xd0>)
   208d6:	681b      	ldr	r3, [r3, #0]
   208d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   208da:	2205      	movs	r2, #5
   208dc:	1ad2      	subs	r2, r2, r3
   208de:	68bb      	ldr	r3, [r7, #8]
   208e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   208e2:	68bb      	ldr	r3, [r7, #8]
   208e4:	6959      	ldr	r1, [r3, #20]
   208e6:	68bb      	ldr	r3, [r7, #8]
   208e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208ea:	0013      	movs	r3, r2
   208ec:	009b      	lsls	r3, r3, #2
   208ee:	189b      	adds	r3, r3, r2
   208f0:	009b      	lsls	r3, r3, #2
   208f2:	4a22      	ldr	r2, [pc, #136]	; (2097c <xTaskPriorityInherit+0xd4>)
   208f4:	189b      	adds	r3, r3, r2
   208f6:	4299      	cmp	r1, r3
   208f8:	d101      	bne.n	208fe <xTaskPriorityInherit+0x56>
   208fa:	2301      	movs	r3, #1
   208fc:	e000      	b.n	20900 <xTaskPriorityInherit+0x58>
   208fe:	2300      	movs	r3, #0
   20900:	2b00      	cmp	r3, #0
   20902:	d022      	beq.n	2094a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20904:	68bb      	ldr	r3, [r7, #8]
   20906:	3304      	adds	r3, #4
   20908:	0018      	movs	r0, r3
   2090a:	4b1d      	ldr	r3, [pc, #116]	; (20980 <xTaskPriorityInherit+0xd8>)
   2090c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2090e:	4b1a      	ldr	r3, [pc, #104]	; (20978 <xTaskPriorityInherit+0xd0>)
   20910:	681b      	ldr	r3, [r3, #0]
   20912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20914:	68bb      	ldr	r3, [r7, #8]
   20916:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   20918:	68bb      	ldr	r3, [r7, #8]
   2091a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2091c:	4b19      	ldr	r3, [pc, #100]	; (20984 <xTaskPriorityInherit+0xdc>)
   2091e:	681b      	ldr	r3, [r3, #0]
   20920:	429a      	cmp	r2, r3
   20922:	d903      	bls.n	2092c <xTaskPriorityInherit+0x84>
   20924:	68bb      	ldr	r3, [r7, #8]
   20926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20928:	4b16      	ldr	r3, [pc, #88]	; (20984 <xTaskPriorityInherit+0xdc>)
   2092a:	601a      	str	r2, [r3, #0]
   2092c:	68bb      	ldr	r3, [r7, #8]
   2092e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20930:	0013      	movs	r3, r2
   20932:	009b      	lsls	r3, r3, #2
   20934:	189b      	adds	r3, r3, r2
   20936:	009b      	lsls	r3, r3, #2
   20938:	4a10      	ldr	r2, [pc, #64]	; (2097c <xTaskPriorityInherit+0xd4>)
   2093a:	189a      	adds	r2, r3, r2
   2093c:	68bb      	ldr	r3, [r7, #8]
   2093e:	3304      	adds	r3, #4
   20940:	0019      	movs	r1, r3
   20942:	0010      	movs	r0, r2
   20944:	4b10      	ldr	r3, [pc, #64]	; (20988 <xTaskPriorityInherit+0xe0>)
   20946:	4798      	blx	r3
   20948:	e004      	b.n	20954 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2094a:	4b0b      	ldr	r3, [pc, #44]	; (20978 <xTaskPriorityInherit+0xd0>)
   2094c:	681b      	ldr	r3, [r3, #0]
   2094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20950:	68bb      	ldr	r3, [r7, #8]
   20952:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   20954:	2301      	movs	r3, #1
   20956:	60fb      	str	r3, [r7, #12]
   20958:	e008      	b.n	2096c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   2095a:	68bb      	ldr	r3, [r7, #8]
   2095c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   2095e:	4b06      	ldr	r3, [pc, #24]	; (20978 <xTaskPriorityInherit+0xd0>)
   20960:	681b      	ldr	r3, [r3, #0]
   20962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20964:	429a      	cmp	r2, r3
   20966:	d201      	bcs.n	2096c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   20968:	2301      	movs	r3, #1
   2096a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   2096c:	68fb      	ldr	r3, [r7, #12]
	}
   2096e:	0018      	movs	r0, r3
   20970:	46bd      	mov	sp, r7
   20972:	b004      	add	sp, #16
   20974:	bd80      	pop	{r7, pc}
   20976:	46c0      	nop			; (mov r8, r8)
   20978:	200002b8 	.word	0x200002b8
   2097c:	200002bc 	.word	0x200002bc
   20980:	0001ef77 	.word	0x0001ef77
   20984:	20000398 	.word	0x20000398
   20988:	0001eec7 	.word	0x0001eec7

0002098c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   2098c:	b580      	push	{r7, lr}
   2098e:	b084      	sub	sp, #16
   20990:	af00      	add	r7, sp, #0
   20992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20994:	687b      	ldr	r3, [r7, #4]
   20996:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20998:	2300      	movs	r3, #0
   2099a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2099c:	687b      	ldr	r3, [r7, #4]
   2099e:	2b00      	cmp	r3, #0
   209a0:	d044      	beq.n	20a2c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   209a2:	4b25      	ldr	r3, [pc, #148]	; (20a38 <xTaskPriorityDisinherit+0xac>)
   209a4:	681b      	ldr	r3, [r3, #0]
   209a6:	68ba      	ldr	r2, [r7, #8]
   209a8:	429a      	cmp	r2, r3
   209aa:	d001      	beq.n	209b0 <xTaskPriorityDisinherit+0x24>
   209ac:	b672      	cpsid	i
   209ae:	e7fe      	b.n	209ae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   209b0:	68bb      	ldr	r3, [r7, #8]
   209b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   209b4:	2b00      	cmp	r3, #0
   209b6:	d101      	bne.n	209bc <xTaskPriorityDisinherit+0x30>
   209b8:	b672      	cpsid	i
   209ba:	e7fe      	b.n	209ba <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   209bc:	68bb      	ldr	r3, [r7, #8]
   209be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   209c0:	1e5a      	subs	r2, r3, #1
   209c2:	68bb      	ldr	r3, [r7, #8]
   209c4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   209c6:	68bb      	ldr	r3, [r7, #8]
   209c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209ca:	68bb      	ldr	r3, [r7, #8]
   209cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   209ce:	429a      	cmp	r2, r3
   209d0:	d02c      	beq.n	20a2c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   209d2:	68bb      	ldr	r3, [r7, #8]
   209d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   209d6:	2b00      	cmp	r3, #0
   209d8:	d128      	bne.n	20a2c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   209da:	68bb      	ldr	r3, [r7, #8]
   209dc:	3304      	adds	r3, #4
   209de:	0018      	movs	r0, r3
   209e0:	4b16      	ldr	r3, [pc, #88]	; (20a3c <xTaskPriorityDisinherit+0xb0>)
   209e2:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   209e4:	68bb      	ldr	r3, [r7, #8]
   209e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   209e8:	68bb      	ldr	r3, [r7, #8]
   209ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   209ec:	68bb      	ldr	r3, [r7, #8]
   209ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   209f0:	2205      	movs	r2, #5
   209f2:	1ad2      	subs	r2, r2, r3
   209f4:	68bb      	ldr	r3, [r7, #8]
   209f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   209f8:	68bb      	ldr	r3, [r7, #8]
   209fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209fc:	4b10      	ldr	r3, [pc, #64]	; (20a40 <xTaskPriorityDisinherit+0xb4>)
   209fe:	681b      	ldr	r3, [r3, #0]
   20a00:	429a      	cmp	r2, r3
   20a02:	d903      	bls.n	20a0c <xTaskPriorityDisinherit+0x80>
   20a04:	68bb      	ldr	r3, [r7, #8]
   20a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a08:	4b0d      	ldr	r3, [pc, #52]	; (20a40 <xTaskPriorityDisinherit+0xb4>)
   20a0a:	601a      	str	r2, [r3, #0]
   20a0c:	68bb      	ldr	r3, [r7, #8]
   20a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a10:	0013      	movs	r3, r2
   20a12:	009b      	lsls	r3, r3, #2
   20a14:	189b      	adds	r3, r3, r2
   20a16:	009b      	lsls	r3, r3, #2
   20a18:	4a0a      	ldr	r2, [pc, #40]	; (20a44 <xTaskPriorityDisinherit+0xb8>)
   20a1a:	189a      	adds	r2, r3, r2
   20a1c:	68bb      	ldr	r3, [r7, #8]
   20a1e:	3304      	adds	r3, #4
   20a20:	0019      	movs	r1, r3
   20a22:	0010      	movs	r0, r2
   20a24:	4b08      	ldr	r3, [pc, #32]	; (20a48 <xTaskPriorityDisinherit+0xbc>)
   20a26:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   20a28:	2301      	movs	r3, #1
   20a2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   20a2c:	68fb      	ldr	r3, [r7, #12]
	}
   20a2e:	0018      	movs	r0, r3
   20a30:	46bd      	mov	sp, r7
   20a32:	b004      	add	sp, #16
   20a34:	bd80      	pop	{r7, pc}
   20a36:	46c0      	nop			; (mov r8, r8)
   20a38:	200002b8 	.word	0x200002b8
   20a3c:	0001ef77 	.word	0x0001ef77
   20a40:	20000398 	.word	0x20000398
   20a44:	200002bc 	.word	0x200002bc
   20a48:	0001eec7 	.word	0x0001eec7

00020a4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   20a4c:	b580      	push	{r7, lr}
   20a4e:	b086      	sub	sp, #24
   20a50:	af00      	add	r7, sp, #0
   20a52:	6078      	str	r0, [r7, #4]
   20a54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20a56:	687b      	ldr	r3, [r7, #4]
   20a58:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   20a5a:	2301      	movs	r3, #1
   20a5c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   20a5e:	687b      	ldr	r3, [r7, #4]
   20a60:	2b00      	cmp	r3, #0
   20a62:	d05d      	beq.n	20b20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   20a64:	693b      	ldr	r3, [r7, #16]
   20a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20a68:	2b00      	cmp	r3, #0
   20a6a:	d101      	bne.n	20a70 <vTaskPriorityDisinheritAfterTimeout+0x24>
   20a6c:	b672      	cpsid	i
   20a6e:	e7fe      	b.n	20a6e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   20a70:	693b      	ldr	r3, [r7, #16]
   20a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20a74:	683b      	ldr	r3, [r7, #0]
   20a76:	429a      	cmp	r2, r3
   20a78:	d202      	bcs.n	20a80 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   20a7a:	683b      	ldr	r3, [r7, #0]
   20a7c:	617b      	str	r3, [r7, #20]
   20a7e:	e002      	b.n	20a86 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   20a80:	693b      	ldr	r3, [r7, #16]
   20a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20a84:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20a86:	693b      	ldr	r3, [r7, #16]
   20a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a8a:	697b      	ldr	r3, [r7, #20]
   20a8c:	429a      	cmp	r2, r3
   20a8e:	d047      	beq.n	20b20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20a90:	693b      	ldr	r3, [r7, #16]
   20a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20a94:	68fb      	ldr	r3, [r7, #12]
   20a96:	429a      	cmp	r2, r3
   20a98:	d142      	bne.n	20b20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   20a9a:	4b23      	ldr	r3, [pc, #140]	; (20b28 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   20a9c:	681b      	ldr	r3, [r3, #0]
   20a9e:	693a      	ldr	r2, [r7, #16]
   20aa0:	429a      	cmp	r2, r3
   20aa2:	d101      	bne.n	20aa8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   20aa4:	b672      	cpsid	i
   20aa6:	e7fe      	b.n	20aa6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20aa8:	693b      	ldr	r3, [r7, #16]
   20aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20aac:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   20aae:	693b      	ldr	r3, [r7, #16]
   20ab0:	697a      	ldr	r2, [r7, #20]
   20ab2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20ab4:	693b      	ldr	r3, [r7, #16]
   20ab6:	699b      	ldr	r3, [r3, #24]
   20ab8:	2b00      	cmp	r3, #0
   20aba:	db04      	blt.n	20ac6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20abc:	697b      	ldr	r3, [r7, #20]
   20abe:	2205      	movs	r2, #5
   20ac0:	1ad2      	subs	r2, r2, r3
   20ac2:	693b      	ldr	r3, [r7, #16]
   20ac4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20ac6:	693b      	ldr	r3, [r7, #16]
   20ac8:	6959      	ldr	r1, [r3, #20]
   20aca:	68ba      	ldr	r2, [r7, #8]
   20acc:	0013      	movs	r3, r2
   20ace:	009b      	lsls	r3, r3, #2
   20ad0:	189b      	adds	r3, r3, r2
   20ad2:	009b      	lsls	r3, r3, #2
   20ad4:	4a15      	ldr	r2, [pc, #84]	; (20b2c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20ad6:	189b      	adds	r3, r3, r2
   20ad8:	4299      	cmp	r1, r3
   20ada:	d101      	bne.n	20ae0 <vTaskPriorityDisinheritAfterTimeout+0x94>
   20adc:	2301      	movs	r3, #1
   20ade:	e000      	b.n	20ae2 <vTaskPriorityDisinheritAfterTimeout+0x96>
   20ae0:	2300      	movs	r3, #0
   20ae2:	2b00      	cmp	r3, #0
   20ae4:	d01c      	beq.n	20b20 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20ae6:	693b      	ldr	r3, [r7, #16]
   20ae8:	3304      	adds	r3, #4
   20aea:	0018      	movs	r0, r3
   20aec:	4b10      	ldr	r3, [pc, #64]	; (20b30 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   20aee:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   20af0:	693b      	ldr	r3, [r7, #16]
   20af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20af4:	4b0f      	ldr	r3, [pc, #60]	; (20b34 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20af6:	681b      	ldr	r3, [r3, #0]
   20af8:	429a      	cmp	r2, r3
   20afa:	d903      	bls.n	20b04 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   20afc:	693b      	ldr	r3, [r7, #16]
   20afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b00:	4b0c      	ldr	r3, [pc, #48]	; (20b34 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20b02:	601a      	str	r2, [r3, #0]
   20b04:	693b      	ldr	r3, [r7, #16]
   20b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b08:	0013      	movs	r3, r2
   20b0a:	009b      	lsls	r3, r3, #2
   20b0c:	189b      	adds	r3, r3, r2
   20b0e:	009b      	lsls	r3, r3, #2
   20b10:	4a06      	ldr	r2, [pc, #24]	; (20b2c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20b12:	189a      	adds	r2, r3, r2
   20b14:	693b      	ldr	r3, [r7, #16]
   20b16:	3304      	adds	r3, #4
   20b18:	0019      	movs	r1, r3
   20b1a:	0010      	movs	r0, r2
   20b1c:	4b06      	ldr	r3, [pc, #24]	; (20b38 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   20b1e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20b20:	46c0      	nop			; (mov r8, r8)
   20b22:	46bd      	mov	sp, r7
   20b24:	b006      	add	sp, #24
   20b26:	bd80      	pop	{r7, pc}
   20b28:	200002b8 	.word	0x200002b8
   20b2c:	200002bc 	.word	0x200002bc
   20b30:	0001ef77 	.word	0x0001ef77
   20b34:	20000398 	.word	0x20000398
   20b38:	0001eec7 	.word	0x0001eec7

00020b3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   20b3c:	b580      	push	{r7, lr}
   20b3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   20b40:	4b06      	ldr	r3, [pc, #24]	; (20b5c <pvTaskIncrementMutexHeldCount+0x20>)
   20b42:	681b      	ldr	r3, [r3, #0]
   20b44:	2b00      	cmp	r3, #0
   20b46:	d004      	beq.n	20b52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   20b48:	4b04      	ldr	r3, [pc, #16]	; (20b5c <pvTaskIncrementMutexHeldCount+0x20>)
   20b4a:	681b      	ldr	r3, [r3, #0]
   20b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20b4e:	3201      	adds	r2, #1
   20b50:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   20b52:	4b02      	ldr	r3, [pc, #8]	; (20b5c <pvTaskIncrementMutexHeldCount+0x20>)
   20b54:	681b      	ldr	r3, [r3, #0]
	}
   20b56:	0018      	movs	r0, r3
   20b58:	46bd      	mov	sp, r7
   20b5a:	bd80      	pop	{r7, pc}
   20b5c:	200002b8 	.word	0x200002b8

00020b60 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   20b60:	b580      	push	{r7, lr}
   20b62:	b084      	sub	sp, #16
   20b64:	af00      	add	r7, sp, #0
   20b66:	6078      	str	r0, [r7, #4]
   20b68:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   20b6a:	4b1d      	ldr	r3, [pc, #116]	; (20be0 <ulTaskNotifyTake+0x80>)
   20b6c:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   20b6e:	4b1d      	ldr	r3, [pc, #116]	; (20be4 <ulTaskNotifyTake+0x84>)
   20b70:	681b      	ldr	r3, [r3, #0]
   20b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20b74:	2b00      	cmp	r3, #0
   20b76:	d10e      	bne.n	20b96 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   20b78:	4b1a      	ldr	r3, [pc, #104]	; (20be4 <ulTaskNotifyTake+0x84>)
   20b7a:	681b      	ldr	r3, [r3, #0]
   20b7c:	224c      	movs	r2, #76	; 0x4c
   20b7e:	2101      	movs	r1, #1
   20b80:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   20b82:	683b      	ldr	r3, [r7, #0]
   20b84:	2b00      	cmp	r3, #0
   20b86:	d006      	beq.n	20b96 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20b88:	683b      	ldr	r3, [r7, #0]
   20b8a:	2101      	movs	r1, #1
   20b8c:	0018      	movs	r0, r3
   20b8e:	4b16      	ldr	r3, [pc, #88]	; (20be8 <ulTaskNotifyTake+0x88>)
   20b90:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   20b92:	4b16      	ldr	r3, [pc, #88]	; (20bec <ulTaskNotifyTake+0x8c>)
   20b94:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   20b96:	4b16      	ldr	r3, [pc, #88]	; (20bf0 <ulTaskNotifyTake+0x90>)
   20b98:	4798      	blx	r3

		taskENTER_CRITICAL();
   20b9a:	4b11      	ldr	r3, [pc, #68]	; (20be0 <ulTaskNotifyTake+0x80>)
   20b9c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   20b9e:	4b11      	ldr	r3, [pc, #68]	; (20be4 <ulTaskNotifyTake+0x84>)
   20ba0:	681b      	ldr	r3, [r3, #0]
   20ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20ba4:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   20ba6:	68fb      	ldr	r3, [r7, #12]
   20ba8:	2b00      	cmp	r3, #0
   20baa:	d00c      	beq.n	20bc6 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   20bac:	687b      	ldr	r3, [r7, #4]
   20bae:	2b00      	cmp	r3, #0
   20bb0:	d004      	beq.n	20bbc <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   20bb2:	4b0c      	ldr	r3, [pc, #48]	; (20be4 <ulTaskNotifyTake+0x84>)
   20bb4:	681b      	ldr	r3, [r3, #0]
   20bb6:	2200      	movs	r2, #0
   20bb8:	649a      	str	r2, [r3, #72]	; 0x48
   20bba:	e004      	b.n	20bc6 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   20bbc:	4b09      	ldr	r3, [pc, #36]	; (20be4 <ulTaskNotifyTake+0x84>)
   20bbe:	681b      	ldr	r3, [r3, #0]
   20bc0:	68fa      	ldr	r2, [r7, #12]
   20bc2:	3a01      	subs	r2, #1
   20bc4:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20bc6:	4b07      	ldr	r3, [pc, #28]	; (20be4 <ulTaskNotifyTake+0x84>)
   20bc8:	681b      	ldr	r3, [r3, #0]
   20bca:	224c      	movs	r2, #76	; 0x4c
   20bcc:	2100      	movs	r1, #0
   20bce:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   20bd0:	4b07      	ldr	r3, [pc, #28]	; (20bf0 <ulTaskNotifyTake+0x90>)
   20bd2:	4798      	blx	r3

		return ulReturn;
   20bd4:	68fb      	ldr	r3, [r7, #12]
	}
   20bd6:	0018      	movs	r0, r3
   20bd8:	46bd      	mov	sp, r7
   20bda:	b004      	add	sp, #16
   20bdc:	bd80      	pop	{r7, pc}
   20bde:	46c0      	nop			; (mov r8, r8)
   20be0:	0001ecd1 	.word	0x0001ecd1
   20be4:	200002b8 	.word	0x200002b8
   20be8:	00020cf9 	.word	0x00020cf9
   20bec:	0001ecb1 	.word	0x0001ecb1
   20bf0:	0001ecf5 	.word	0x0001ecf5

00020bf4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20bf4:	b580      	push	{r7, lr}
   20bf6:	b086      	sub	sp, #24
   20bf8:	af00      	add	r7, sp, #0
   20bfa:	6078      	str	r0, [r7, #4]
   20bfc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   20bfe:	687b      	ldr	r3, [r7, #4]
   20c00:	2b00      	cmp	r3, #0
   20c02:	d101      	bne.n	20c08 <vTaskNotifyGiveFromISR+0x14>
   20c04:	b672      	cpsid	i
   20c06:	e7fe      	b.n	20c06 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   20c08:	687b      	ldr	r3, [r7, #4]
   20c0a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   20c0c:	4b30      	ldr	r3, [pc, #192]	; (20cd0 <vTaskNotifyGiveFromISR+0xdc>)
   20c0e:	4798      	blx	r3
   20c10:	0003      	movs	r3, r0
   20c12:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   20c14:	230f      	movs	r3, #15
   20c16:	18fb      	adds	r3, r7, r3
   20c18:	697a      	ldr	r2, [r7, #20]
   20c1a:	214c      	movs	r1, #76	; 0x4c
   20c1c:	5c52      	ldrb	r2, [r2, r1]
   20c1e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   20c20:	697b      	ldr	r3, [r7, #20]
   20c22:	224c      	movs	r2, #76	; 0x4c
   20c24:	2102      	movs	r1, #2
   20c26:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   20c28:	697b      	ldr	r3, [r7, #20]
   20c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20c2c:	1c5a      	adds	r2, r3, #1
   20c2e:	697b      	ldr	r3, [r7, #20]
   20c30:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   20c32:	230f      	movs	r3, #15
   20c34:	18fb      	adds	r3, r7, r3
   20c36:	781b      	ldrb	r3, [r3, #0]
   20c38:	2b01      	cmp	r3, #1
   20c3a:	d140      	bne.n	20cbe <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   20c3c:	697b      	ldr	r3, [r7, #20]
   20c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20c40:	2b00      	cmp	r3, #0
   20c42:	d001      	beq.n	20c48 <vTaskNotifyGiveFromISR+0x54>
   20c44:	b672      	cpsid	i
   20c46:	e7fe      	b.n	20c46 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20c48:	4b22      	ldr	r3, [pc, #136]	; (20cd4 <vTaskNotifyGiveFromISR+0xe0>)
   20c4a:	681b      	ldr	r3, [r3, #0]
   20c4c:	2b00      	cmp	r3, #0
   20c4e:	d11d      	bne.n	20c8c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20c50:	697b      	ldr	r3, [r7, #20]
   20c52:	3304      	adds	r3, #4
   20c54:	0018      	movs	r0, r3
   20c56:	4b20      	ldr	r3, [pc, #128]	; (20cd8 <vTaskNotifyGiveFromISR+0xe4>)
   20c58:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20c5a:	697b      	ldr	r3, [r7, #20]
   20c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c5e:	4b1f      	ldr	r3, [pc, #124]	; (20cdc <vTaskNotifyGiveFromISR+0xe8>)
   20c60:	681b      	ldr	r3, [r3, #0]
   20c62:	429a      	cmp	r2, r3
   20c64:	d903      	bls.n	20c6e <vTaskNotifyGiveFromISR+0x7a>
   20c66:	697b      	ldr	r3, [r7, #20]
   20c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c6a:	4b1c      	ldr	r3, [pc, #112]	; (20cdc <vTaskNotifyGiveFromISR+0xe8>)
   20c6c:	601a      	str	r2, [r3, #0]
   20c6e:	697b      	ldr	r3, [r7, #20]
   20c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c72:	0013      	movs	r3, r2
   20c74:	009b      	lsls	r3, r3, #2
   20c76:	189b      	adds	r3, r3, r2
   20c78:	009b      	lsls	r3, r3, #2
   20c7a:	4a19      	ldr	r2, [pc, #100]	; (20ce0 <vTaskNotifyGiveFromISR+0xec>)
   20c7c:	189a      	adds	r2, r3, r2
   20c7e:	697b      	ldr	r3, [r7, #20]
   20c80:	3304      	adds	r3, #4
   20c82:	0019      	movs	r1, r3
   20c84:	0010      	movs	r0, r2
   20c86:	4b17      	ldr	r3, [pc, #92]	; (20ce4 <vTaskNotifyGiveFromISR+0xf0>)
   20c88:	4798      	blx	r3
   20c8a:	e007      	b.n	20c9c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   20c8c:	697b      	ldr	r3, [r7, #20]
   20c8e:	3318      	adds	r3, #24
   20c90:	001a      	movs	r2, r3
   20c92:	4b15      	ldr	r3, [pc, #84]	; (20ce8 <vTaskNotifyGiveFromISR+0xf4>)
   20c94:	0011      	movs	r1, r2
   20c96:	0018      	movs	r0, r3
   20c98:	4b12      	ldr	r3, [pc, #72]	; (20ce4 <vTaskNotifyGiveFromISR+0xf0>)
   20c9a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   20c9c:	697b      	ldr	r3, [r7, #20]
   20c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ca0:	4b12      	ldr	r3, [pc, #72]	; (20cec <vTaskNotifyGiveFromISR+0xf8>)
   20ca2:	681b      	ldr	r3, [r3, #0]
   20ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20ca6:	429a      	cmp	r2, r3
   20ca8:	d909      	bls.n	20cbe <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   20caa:	683b      	ldr	r3, [r7, #0]
   20cac:	2b00      	cmp	r3, #0
   20cae:	d003      	beq.n	20cb8 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   20cb0:	683b      	ldr	r3, [r7, #0]
   20cb2:	2201      	movs	r2, #1
   20cb4:	601a      	str	r2, [r3, #0]
   20cb6:	e002      	b.n	20cbe <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   20cb8:	4b0d      	ldr	r3, [pc, #52]	; (20cf0 <vTaskNotifyGiveFromISR+0xfc>)
   20cba:	2201      	movs	r2, #1
   20cbc:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   20cbe:	693b      	ldr	r3, [r7, #16]
   20cc0:	0018      	movs	r0, r3
   20cc2:	4b0c      	ldr	r3, [pc, #48]	; (20cf4 <vTaskNotifyGiveFromISR+0x100>)
   20cc4:	4798      	blx	r3
	}
   20cc6:	46c0      	nop			; (mov r8, r8)
   20cc8:	46bd      	mov	sp, r7
   20cca:	b006      	add	sp, #24
   20ccc:	bd80      	pop	{r7, pc}
   20cce:	46c0      	nop			; (mov r8, r8)
   20cd0:	0001ed25 	.word	0x0001ed25
   20cd4:	200003b8 	.word	0x200003b8
   20cd8:	0001ef77 	.word	0x0001ef77
   20cdc:	20000398 	.word	0x20000398
   20ce0:	200002bc 	.word	0x200002bc
   20ce4:	0001eec7 	.word	0x0001eec7
   20ce8:	20000350 	.word	0x20000350
   20cec:	200002b8 	.word	0x200002b8
   20cf0:	200003a4 	.word	0x200003a4
   20cf4:	0001ed31 	.word	0x0001ed31

00020cf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   20cf8:	b580      	push	{r7, lr}
   20cfa:	b084      	sub	sp, #16
   20cfc:	af00      	add	r7, sp, #0
   20cfe:	6078      	str	r0, [r7, #4]
   20d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20d02:	4b21      	ldr	r3, [pc, #132]	; (20d88 <prvAddCurrentTaskToDelayedList+0x90>)
   20d04:	681b      	ldr	r3, [r3, #0]
   20d06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20d08:	4b20      	ldr	r3, [pc, #128]	; (20d8c <prvAddCurrentTaskToDelayedList+0x94>)
   20d0a:	681b      	ldr	r3, [r3, #0]
   20d0c:	3304      	adds	r3, #4
   20d0e:	0018      	movs	r0, r3
   20d10:	4b1f      	ldr	r3, [pc, #124]	; (20d90 <prvAddCurrentTaskToDelayedList+0x98>)
   20d12:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20d14:	687b      	ldr	r3, [r7, #4]
   20d16:	3301      	adds	r3, #1
   20d18:	d10b      	bne.n	20d32 <prvAddCurrentTaskToDelayedList+0x3a>
   20d1a:	683b      	ldr	r3, [r7, #0]
   20d1c:	2b00      	cmp	r3, #0
   20d1e:	d008      	beq.n	20d32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20d20:	4b1a      	ldr	r3, [pc, #104]	; (20d8c <prvAddCurrentTaskToDelayedList+0x94>)
   20d22:	681b      	ldr	r3, [r3, #0]
   20d24:	1d1a      	adds	r2, r3, #4
   20d26:	4b1b      	ldr	r3, [pc, #108]	; (20d94 <prvAddCurrentTaskToDelayedList+0x9c>)
   20d28:	0011      	movs	r1, r2
   20d2a:	0018      	movs	r0, r3
   20d2c:	4b1a      	ldr	r3, [pc, #104]	; (20d98 <prvAddCurrentTaskToDelayedList+0xa0>)
   20d2e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   20d30:	e026      	b.n	20d80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   20d32:	68fa      	ldr	r2, [r7, #12]
   20d34:	687b      	ldr	r3, [r7, #4]
   20d36:	18d3      	adds	r3, r2, r3
   20d38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20d3a:	4b14      	ldr	r3, [pc, #80]	; (20d8c <prvAddCurrentTaskToDelayedList+0x94>)
   20d3c:	681b      	ldr	r3, [r3, #0]
   20d3e:	68ba      	ldr	r2, [r7, #8]
   20d40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20d42:	68ba      	ldr	r2, [r7, #8]
   20d44:	68fb      	ldr	r3, [r7, #12]
   20d46:	429a      	cmp	r2, r3
   20d48:	d209      	bcs.n	20d5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20d4a:	4b14      	ldr	r3, [pc, #80]	; (20d9c <prvAddCurrentTaskToDelayedList+0xa4>)
   20d4c:	681a      	ldr	r2, [r3, #0]
   20d4e:	4b0f      	ldr	r3, [pc, #60]	; (20d8c <prvAddCurrentTaskToDelayedList+0x94>)
   20d50:	681b      	ldr	r3, [r3, #0]
   20d52:	3304      	adds	r3, #4
   20d54:	0019      	movs	r1, r3
   20d56:	0010      	movs	r0, r2
   20d58:	4b11      	ldr	r3, [pc, #68]	; (20da0 <prvAddCurrentTaskToDelayedList+0xa8>)
   20d5a:	4798      	blx	r3
}
   20d5c:	e010      	b.n	20d80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20d5e:	4b11      	ldr	r3, [pc, #68]	; (20da4 <prvAddCurrentTaskToDelayedList+0xac>)
   20d60:	681a      	ldr	r2, [r3, #0]
   20d62:	4b0a      	ldr	r3, [pc, #40]	; (20d8c <prvAddCurrentTaskToDelayedList+0x94>)
   20d64:	681b      	ldr	r3, [r3, #0]
   20d66:	3304      	adds	r3, #4
   20d68:	0019      	movs	r1, r3
   20d6a:	0010      	movs	r0, r2
   20d6c:	4b0c      	ldr	r3, [pc, #48]	; (20da0 <prvAddCurrentTaskToDelayedList+0xa8>)
   20d6e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20d70:	4b0d      	ldr	r3, [pc, #52]	; (20da8 <prvAddCurrentTaskToDelayedList+0xb0>)
   20d72:	681b      	ldr	r3, [r3, #0]
   20d74:	68ba      	ldr	r2, [r7, #8]
   20d76:	429a      	cmp	r2, r3
   20d78:	d202      	bcs.n	20d80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   20d7a:	4b0b      	ldr	r3, [pc, #44]	; (20da8 <prvAddCurrentTaskToDelayedList+0xb0>)
   20d7c:	68ba      	ldr	r2, [r7, #8]
   20d7e:	601a      	str	r2, [r3, #0]
}
   20d80:	46c0      	nop			; (mov r8, r8)
   20d82:	46bd      	mov	sp, r7
   20d84:	b004      	add	sp, #16
   20d86:	bd80      	pop	{r7, pc}
   20d88:	20000394 	.word	0x20000394
   20d8c:	200002b8 	.word	0x200002b8
   20d90:	0001ef77 	.word	0x0001ef77
   20d94:	2000037c 	.word	0x2000037c
   20d98:	0001eec7 	.word	0x0001eec7
   20d9c:	2000034c 	.word	0x2000034c
   20da0:	0001ef0b 	.word	0x0001ef0b
   20da4:	20000348 	.word	0x20000348
   20da8:	200003b0 	.word	0x200003b0

00020dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   20dac:	b590      	push	{r4, r7, lr}
   20dae:	b085      	sub	sp, #20
   20db0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   20db2:	2300      	movs	r3, #0
   20db4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   20db6:	4b0e      	ldr	r3, [pc, #56]	; (20df0 <xTimerCreateTimerTask+0x44>)
   20db8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   20dba:	4b0e      	ldr	r3, [pc, #56]	; (20df4 <xTimerCreateTimerTask+0x48>)
   20dbc:	681b      	ldr	r3, [r3, #0]
   20dbe:	2b00      	cmp	r3, #0
   20dc0:	d00c      	beq.n	20ddc <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   20dc2:	2382      	movs	r3, #130	; 0x82
   20dc4:	005a      	lsls	r2, r3, #1
   20dc6:	490c      	ldr	r1, [pc, #48]	; (20df8 <xTimerCreateTimerTask+0x4c>)
   20dc8:	480c      	ldr	r0, [pc, #48]	; (20dfc <xTimerCreateTimerTask+0x50>)
   20dca:	4b0d      	ldr	r3, [pc, #52]	; (20e00 <xTimerCreateTimerTask+0x54>)
   20dcc:	9301      	str	r3, [sp, #4]
   20dce:	2304      	movs	r3, #4
   20dd0:	9300      	str	r3, [sp, #0]
   20dd2:	2300      	movs	r3, #0
   20dd4:	4c0b      	ldr	r4, [pc, #44]	; (20e04 <xTimerCreateTimerTask+0x58>)
   20dd6:	47a0      	blx	r4
   20dd8:	0003      	movs	r3, r0
   20dda:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   20ddc:	687b      	ldr	r3, [r7, #4]
   20dde:	2b00      	cmp	r3, #0
   20de0:	d101      	bne.n	20de6 <xTimerCreateTimerTask+0x3a>
   20de2:	b672      	cpsid	i
   20de4:	e7fe      	b.n	20de4 <xTimerCreateTimerTask+0x38>
	return xReturn;
   20de6:	687b      	ldr	r3, [r7, #4]
}
   20de8:	0018      	movs	r0, r3
   20dea:	46bd      	mov	sp, r7
   20dec:	b003      	add	sp, #12
   20dee:	bd90      	pop	{r4, r7, pc}
   20df0:	000213bd 	.word	0x000213bd
   20df4:	200003ec 	.word	0x200003ec
   20df8:	0002aa90 	.word	0x0002aa90
   20dfc:	00020fd1 	.word	0x00020fd1
   20e00:	200003f0 	.word	0x200003f0
   20e04:	0001fba9 	.word	0x0001fba9

00020e08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   20e08:	b590      	push	{r4, r7, lr}
   20e0a:	b089      	sub	sp, #36	; 0x24
   20e0c:	af02      	add	r7, sp, #8
   20e0e:	60f8      	str	r0, [r7, #12]
   20e10:	60b9      	str	r1, [r7, #8]
   20e12:	607a      	str	r2, [r7, #4]
   20e14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   20e16:	2028      	movs	r0, #40	; 0x28
   20e18:	4b0b      	ldr	r3, [pc, #44]	; (20e48 <xTimerCreate+0x40>)
   20e1a:	4798      	blx	r3
   20e1c:	0003      	movs	r3, r0
   20e1e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   20e20:	697b      	ldr	r3, [r7, #20]
   20e22:	2b00      	cmp	r3, #0
   20e24:	d00a      	beq.n	20e3c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   20e26:	683c      	ldr	r4, [r7, #0]
   20e28:	687a      	ldr	r2, [r7, #4]
   20e2a:	68b9      	ldr	r1, [r7, #8]
   20e2c:	68f8      	ldr	r0, [r7, #12]
   20e2e:	697b      	ldr	r3, [r7, #20]
   20e30:	9301      	str	r3, [sp, #4]
   20e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20e34:	9300      	str	r3, [sp, #0]
   20e36:	0023      	movs	r3, r4
   20e38:	4c04      	ldr	r4, [pc, #16]	; (20e4c <xTimerCreate+0x44>)
   20e3a:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   20e3c:	697b      	ldr	r3, [r7, #20]
	}
   20e3e:	0018      	movs	r0, r3
   20e40:	46bd      	mov	sp, r7
   20e42:	b007      	add	sp, #28
   20e44:	bd90      	pop	{r4, r7, pc}
   20e46:	46c0      	nop			; (mov r8, r8)
   20e48:	0001ee0d 	.word	0x0001ee0d
   20e4c:	00020e51 	.word	0x00020e51

00020e50 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   20e50:	b580      	push	{r7, lr}
   20e52:	b084      	sub	sp, #16
   20e54:	af00      	add	r7, sp, #0
   20e56:	60f8      	str	r0, [r7, #12]
   20e58:	60b9      	str	r1, [r7, #8]
   20e5a:	607a      	str	r2, [r7, #4]
   20e5c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   20e5e:	68bb      	ldr	r3, [r7, #8]
   20e60:	2b00      	cmp	r3, #0
   20e62:	d101      	bne.n	20e68 <prvInitialiseNewTimer+0x18>
   20e64:	b672      	cpsid	i
   20e66:	e7fe      	b.n	20e66 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   20e68:	69fb      	ldr	r3, [r7, #28]
   20e6a:	2b00      	cmp	r3, #0
   20e6c:	d015      	beq.n	20e9a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   20e6e:	4b0d      	ldr	r3, [pc, #52]	; (20ea4 <prvInitialiseNewTimer+0x54>)
   20e70:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   20e72:	69fb      	ldr	r3, [r7, #28]
   20e74:	68fa      	ldr	r2, [r7, #12]
   20e76:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   20e78:	69fb      	ldr	r3, [r7, #28]
   20e7a:	68ba      	ldr	r2, [r7, #8]
   20e7c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   20e7e:	69fb      	ldr	r3, [r7, #28]
   20e80:	687a      	ldr	r2, [r7, #4]
   20e82:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   20e84:	69fb      	ldr	r3, [r7, #28]
   20e86:	683a      	ldr	r2, [r7, #0]
   20e88:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   20e8a:	69fb      	ldr	r3, [r7, #28]
   20e8c:	69ba      	ldr	r2, [r7, #24]
   20e8e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   20e90:	69fb      	ldr	r3, [r7, #28]
   20e92:	3304      	adds	r3, #4
   20e94:	0018      	movs	r0, r3
   20e96:	4b04      	ldr	r3, [pc, #16]	; (20ea8 <prvInitialiseNewTimer+0x58>)
   20e98:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   20e9a:	46c0      	nop			; (mov r8, r8)
   20e9c:	46bd      	mov	sp, r7
   20e9e:	b004      	add	sp, #16
   20ea0:	bd80      	pop	{r7, pc}
   20ea2:	46c0      	nop			; (mov r8, r8)
   20ea4:	000213bd 	.word	0x000213bd
   20ea8:	0001eeb1 	.word	0x0001eeb1

00020eac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20eac:	b590      	push	{r4, r7, lr}
   20eae:	b08b      	sub	sp, #44	; 0x2c
   20eb0:	af00      	add	r7, sp, #0
   20eb2:	60f8      	str	r0, [r7, #12]
   20eb4:	60b9      	str	r1, [r7, #8]
   20eb6:	607a      	str	r2, [r7, #4]
   20eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   20eba:	2300      	movs	r3, #0
   20ebc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   20ebe:	68fb      	ldr	r3, [r7, #12]
   20ec0:	2b00      	cmp	r3, #0
   20ec2:	d101      	bne.n	20ec8 <xTimerGenericCommand+0x1c>
   20ec4:	b672      	cpsid	i
   20ec6:	e7fe      	b.n	20ec6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   20ec8:	4b1e      	ldr	r3, [pc, #120]	; (20f44 <xTimerGenericCommand+0x98>)
   20eca:	681b      	ldr	r3, [r3, #0]
   20ecc:	2b00      	cmp	r3, #0
   20ece:	d033      	beq.n	20f38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   20ed0:	2314      	movs	r3, #20
   20ed2:	18fb      	adds	r3, r7, r3
   20ed4:	68ba      	ldr	r2, [r7, #8]
   20ed6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20ed8:	2314      	movs	r3, #20
   20eda:	18fb      	adds	r3, r7, r3
   20edc:	687a      	ldr	r2, [r7, #4]
   20ede:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   20ee0:	2314      	movs	r3, #20
   20ee2:	18fb      	adds	r3, r7, r3
   20ee4:	68fa      	ldr	r2, [r7, #12]
   20ee6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   20ee8:	68bb      	ldr	r3, [r7, #8]
   20eea:	2b05      	cmp	r3, #5
   20eec:	dc1a      	bgt.n	20f24 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20eee:	4b16      	ldr	r3, [pc, #88]	; (20f48 <xTimerGenericCommand+0x9c>)
   20ef0:	4798      	blx	r3
   20ef2:	0003      	movs	r3, r0
   20ef4:	2b02      	cmp	r3, #2
   20ef6:	d10a      	bne.n	20f0e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20ef8:	4b12      	ldr	r3, [pc, #72]	; (20f44 <xTimerGenericCommand+0x98>)
   20efa:	6818      	ldr	r0, [r3, #0]
   20efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   20efe:	2314      	movs	r3, #20
   20f00:	18f9      	adds	r1, r7, r3
   20f02:	2300      	movs	r3, #0
   20f04:	4c11      	ldr	r4, [pc, #68]	; (20f4c <xTimerGenericCommand+0xa0>)
   20f06:	47a0      	blx	r4
   20f08:	0003      	movs	r3, r0
   20f0a:	627b      	str	r3, [r7, #36]	; 0x24
   20f0c:	e014      	b.n	20f38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   20f0e:	4b0d      	ldr	r3, [pc, #52]	; (20f44 <xTimerGenericCommand+0x98>)
   20f10:	6818      	ldr	r0, [r3, #0]
   20f12:	2314      	movs	r3, #20
   20f14:	18f9      	adds	r1, r7, r3
   20f16:	2300      	movs	r3, #0
   20f18:	2200      	movs	r2, #0
   20f1a:	4c0c      	ldr	r4, [pc, #48]	; (20f4c <xTimerGenericCommand+0xa0>)
   20f1c:	47a0      	blx	r4
   20f1e:	0003      	movs	r3, r0
   20f20:	627b      	str	r3, [r7, #36]	; 0x24
   20f22:	e009      	b.n	20f38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20f24:	4b07      	ldr	r3, [pc, #28]	; (20f44 <xTimerGenericCommand+0x98>)
   20f26:	6818      	ldr	r0, [r3, #0]
   20f28:	683a      	ldr	r2, [r7, #0]
   20f2a:	2314      	movs	r3, #20
   20f2c:	18f9      	adds	r1, r7, r3
   20f2e:	2300      	movs	r3, #0
   20f30:	4c07      	ldr	r4, [pc, #28]	; (20f50 <xTimerGenericCommand+0xa4>)
   20f32:	47a0      	blx	r4
   20f34:	0003      	movs	r3, r0
   20f36:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   20f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20f3a:	0018      	movs	r0, r3
   20f3c:	46bd      	mov	sp, r7
   20f3e:	b00b      	add	sp, #44	; 0x2c
   20f40:	bd90      	pop	{r4, r7, pc}
   20f42:	46c0      	nop			; (mov r8, r8)
   20f44:	200003ec 	.word	0x200003ec
   20f48:	00020871 	.word	0x00020871
   20f4c:	0001f141 	.word	0x0001f141
   20f50:	0001f321 	.word	0x0001f321

00020f54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   20f54:	b590      	push	{r4, r7, lr}
   20f56:	b087      	sub	sp, #28
   20f58:	af02      	add	r7, sp, #8
   20f5a:	6078      	str	r0, [r7, #4]
   20f5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20f5e:	4b18      	ldr	r3, [pc, #96]	; (20fc0 <prvProcessExpiredTimer+0x6c>)
   20f60:	681b      	ldr	r3, [r3, #0]
   20f62:	68db      	ldr	r3, [r3, #12]
   20f64:	68db      	ldr	r3, [r3, #12]
   20f66:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20f68:	68fb      	ldr	r3, [r7, #12]
   20f6a:	3304      	adds	r3, #4
   20f6c:	0018      	movs	r0, r3
   20f6e:	4b15      	ldr	r3, [pc, #84]	; (20fc4 <prvProcessExpiredTimer+0x70>)
   20f70:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20f72:	68fb      	ldr	r3, [r7, #12]
   20f74:	69db      	ldr	r3, [r3, #28]
   20f76:	2b01      	cmp	r3, #1
   20f78:	d119      	bne.n	20fae <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   20f7a:	68fb      	ldr	r3, [r7, #12]
   20f7c:	699a      	ldr	r2, [r3, #24]
   20f7e:	687b      	ldr	r3, [r7, #4]
   20f80:	18d1      	adds	r1, r2, r3
   20f82:	687b      	ldr	r3, [r7, #4]
   20f84:	683a      	ldr	r2, [r7, #0]
   20f86:	68f8      	ldr	r0, [r7, #12]
   20f88:	4c0f      	ldr	r4, [pc, #60]	; (20fc8 <prvProcessExpiredTimer+0x74>)
   20f8a:	47a0      	blx	r4
   20f8c:	1e03      	subs	r3, r0, #0
   20f8e:	d00e      	beq.n	20fae <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   20f90:	687a      	ldr	r2, [r7, #4]
   20f92:	68f8      	ldr	r0, [r7, #12]
   20f94:	2300      	movs	r3, #0
   20f96:	9300      	str	r3, [sp, #0]
   20f98:	2300      	movs	r3, #0
   20f9a:	2100      	movs	r1, #0
   20f9c:	4c0b      	ldr	r4, [pc, #44]	; (20fcc <prvProcessExpiredTimer+0x78>)
   20f9e:	47a0      	blx	r4
   20fa0:	0003      	movs	r3, r0
   20fa2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   20fa4:	68bb      	ldr	r3, [r7, #8]
   20fa6:	2b00      	cmp	r3, #0
   20fa8:	d101      	bne.n	20fae <prvProcessExpiredTimer+0x5a>
   20faa:	b672      	cpsid	i
   20fac:	e7fe      	b.n	20fac <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20fae:	68fb      	ldr	r3, [r7, #12]
   20fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20fb2:	68fa      	ldr	r2, [r7, #12]
   20fb4:	0010      	movs	r0, r2
   20fb6:	4798      	blx	r3
}
   20fb8:	46c0      	nop			; (mov r8, r8)
   20fba:	46bd      	mov	sp, r7
   20fbc:	b005      	add	sp, #20
   20fbe:	bd90      	pop	{r4, r7, pc}
   20fc0:	200003e4 	.word	0x200003e4
   20fc4:	0001ef77 	.word	0x0001ef77
   20fc8:	00021131 	.word	0x00021131
   20fcc:	00020ead 	.word	0x00020ead

00020fd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   20fd0:	b580      	push	{r7, lr}
   20fd2:	b084      	sub	sp, #16
   20fd4:	af00      	add	r7, sp, #0
   20fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20fd8:	2308      	movs	r3, #8
   20fda:	18fb      	adds	r3, r7, r3
   20fdc:	0018      	movs	r0, r3
   20fde:	4b06      	ldr	r3, [pc, #24]	; (20ff8 <prvTimerTask+0x28>)
   20fe0:	4798      	blx	r3
   20fe2:	0003      	movs	r3, r0
   20fe4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   20fe6:	68ba      	ldr	r2, [r7, #8]
   20fe8:	68fb      	ldr	r3, [r7, #12]
   20fea:	0011      	movs	r1, r2
   20fec:	0018      	movs	r0, r3
   20fee:	4b03      	ldr	r3, [pc, #12]	; (20ffc <prvTimerTask+0x2c>)
   20ff0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   20ff2:	4b03      	ldr	r3, [pc, #12]	; (21000 <prvTimerTask+0x30>)
   20ff4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   20ff6:	e7ef      	b.n	20fd8 <prvTimerTask+0x8>
   20ff8:	000210a9 	.word	0x000210a9
   20ffc:	00021005 	.word	0x00021005
   21000:	000211b9 	.word	0x000211b9

00021004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   21004:	b580      	push	{r7, lr}
   21006:	b084      	sub	sp, #16
   21008:	af00      	add	r7, sp, #0
   2100a:	6078      	str	r0, [r7, #4]
   2100c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   2100e:	4b1e      	ldr	r3, [pc, #120]	; (21088 <prvProcessTimerOrBlockTask+0x84>)
   21010:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21012:	2308      	movs	r3, #8
   21014:	18fb      	adds	r3, r7, r3
   21016:	0018      	movs	r0, r3
   21018:	4b1c      	ldr	r3, [pc, #112]	; (2108c <prvProcessTimerOrBlockTask+0x88>)
   2101a:	4798      	blx	r3
   2101c:	0003      	movs	r3, r0
   2101e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   21020:	68bb      	ldr	r3, [r7, #8]
   21022:	2b00      	cmp	r3, #0
   21024:	d129      	bne.n	2107a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   21026:	683b      	ldr	r3, [r7, #0]
   21028:	2b00      	cmp	r3, #0
   2102a:	d10c      	bne.n	21046 <prvProcessTimerOrBlockTask+0x42>
   2102c:	687a      	ldr	r2, [r7, #4]
   2102e:	68fb      	ldr	r3, [r7, #12]
   21030:	429a      	cmp	r2, r3
   21032:	d808      	bhi.n	21046 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   21034:	4b16      	ldr	r3, [pc, #88]	; (21090 <prvProcessTimerOrBlockTask+0x8c>)
   21036:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   21038:	68fa      	ldr	r2, [r7, #12]
   2103a:	687b      	ldr	r3, [r7, #4]
   2103c:	0011      	movs	r1, r2
   2103e:	0018      	movs	r0, r3
   21040:	4b14      	ldr	r3, [pc, #80]	; (21094 <prvProcessTimerOrBlockTask+0x90>)
   21042:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   21044:	e01b      	b.n	2107e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   21046:	683b      	ldr	r3, [r7, #0]
   21048:	2b00      	cmp	r3, #0
   2104a:	d006      	beq.n	2105a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   2104c:	4b12      	ldr	r3, [pc, #72]	; (21098 <prvProcessTimerOrBlockTask+0x94>)
   2104e:	681b      	ldr	r3, [r3, #0]
   21050:	681b      	ldr	r3, [r3, #0]
   21052:	425a      	negs	r2, r3
   21054:	4153      	adcs	r3, r2
   21056:	b2db      	uxtb	r3, r3
   21058:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   2105a:	4b10      	ldr	r3, [pc, #64]	; (2109c <prvProcessTimerOrBlockTask+0x98>)
   2105c:	6818      	ldr	r0, [r3, #0]
   2105e:	687a      	ldr	r2, [r7, #4]
   21060:	68fb      	ldr	r3, [r7, #12]
   21062:	1ad3      	subs	r3, r2, r3
   21064:	683a      	ldr	r2, [r7, #0]
   21066:	0019      	movs	r1, r3
   21068:	4b0d      	ldr	r3, [pc, #52]	; (210a0 <prvProcessTimerOrBlockTask+0x9c>)
   2106a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   2106c:	4b08      	ldr	r3, [pc, #32]	; (21090 <prvProcessTimerOrBlockTask+0x8c>)
   2106e:	4798      	blx	r3
   21070:	1e03      	subs	r3, r0, #0
   21072:	d104      	bne.n	2107e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   21074:	4b0b      	ldr	r3, [pc, #44]	; (210a4 <prvProcessTimerOrBlockTask+0xa0>)
   21076:	4798      	blx	r3
}
   21078:	e001      	b.n	2107e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   2107a:	4b05      	ldr	r3, [pc, #20]	; (21090 <prvProcessTimerOrBlockTask+0x8c>)
   2107c:	4798      	blx	r3
}
   2107e:	46c0      	nop			; (mov r8, r8)
   21080:	46bd      	mov	sp, r7
   21082:	b004      	add	sp, #16
   21084:	bd80      	pop	{r7, pc}
   21086:	46c0      	nop			; (mov r8, r8)
   21088:	00020101 	.word	0x00020101
   2108c:	000210e9 	.word	0x000210e9
   21090:	00020119 	.word	0x00020119
   21094:	00020f55 	.word	0x00020f55
   21098:	200003e8 	.word	0x200003e8
   2109c:	200003ec 	.word	0x200003ec
   210a0:	0001fa8d 	.word	0x0001fa8d
   210a4:	0001ecb1 	.word	0x0001ecb1

000210a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   210a8:	b580      	push	{r7, lr}
   210aa:	b084      	sub	sp, #16
   210ac:	af00      	add	r7, sp, #0
   210ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   210b0:	4b0c      	ldr	r3, [pc, #48]	; (210e4 <prvGetNextExpireTime+0x3c>)
   210b2:	681b      	ldr	r3, [r3, #0]
   210b4:	681b      	ldr	r3, [r3, #0]
   210b6:	425a      	negs	r2, r3
   210b8:	4153      	adcs	r3, r2
   210ba:	b2db      	uxtb	r3, r3
   210bc:	001a      	movs	r2, r3
   210be:	687b      	ldr	r3, [r7, #4]
   210c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   210c2:	687b      	ldr	r3, [r7, #4]
   210c4:	681b      	ldr	r3, [r3, #0]
   210c6:	2b00      	cmp	r3, #0
   210c8:	d105      	bne.n	210d6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   210ca:	4b06      	ldr	r3, [pc, #24]	; (210e4 <prvGetNextExpireTime+0x3c>)
   210cc:	681b      	ldr	r3, [r3, #0]
   210ce:	68db      	ldr	r3, [r3, #12]
   210d0:	681b      	ldr	r3, [r3, #0]
   210d2:	60fb      	str	r3, [r7, #12]
   210d4:	e001      	b.n	210da <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   210d6:	2300      	movs	r3, #0
   210d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   210da:	68fb      	ldr	r3, [r7, #12]
}
   210dc:	0018      	movs	r0, r3
   210de:	46bd      	mov	sp, r7
   210e0:	b004      	add	sp, #16
   210e2:	bd80      	pop	{r7, pc}
   210e4:	200003e4 	.word	0x200003e4

000210e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   210e8:	b580      	push	{r7, lr}
   210ea:	b084      	sub	sp, #16
   210ec:	af00      	add	r7, sp, #0
   210ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   210f0:	4b0c      	ldr	r3, [pc, #48]	; (21124 <prvSampleTimeNow+0x3c>)
   210f2:	4798      	blx	r3
   210f4:	0003      	movs	r3, r0
   210f6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   210f8:	4b0b      	ldr	r3, [pc, #44]	; (21128 <prvSampleTimeNow+0x40>)
   210fa:	681b      	ldr	r3, [r3, #0]
   210fc:	68fa      	ldr	r2, [r7, #12]
   210fe:	429a      	cmp	r2, r3
   21100:	d205      	bcs.n	2110e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21102:	4b0a      	ldr	r3, [pc, #40]	; (2112c <prvSampleTimeNow+0x44>)
   21104:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21106:	687b      	ldr	r3, [r7, #4]
   21108:	2201      	movs	r2, #1
   2110a:	601a      	str	r2, [r3, #0]
   2110c:	e002      	b.n	21114 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2110e:	687b      	ldr	r3, [r7, #4]
   21110:	2200      	movs	r2, #0
   21112:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21114:	4b04      	ldr	r3, [pc, #16]	; (21128 <prvSampleTimeNow+0x40>)
   21116:	68fa      	ldr	r2, [r7, #12]
   21118:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2111a:	68fb      	ldr	r3, [r7, #12]
}
   2111c:	0018      	movs	r0, r3
   2111e:	46bd      	mov	sp, r7
   21120:	b004      	add	sp, #16
   21122:	bd80      	pop	{r7, pc}
   21124:	0002024d 	.word	0x0002024d
   21128:	200003f4 	.word	0x200003f4
   2112c:	000212fd 	.word	0x000212fd

00021130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   21130:	b580      	push	{r7, lr}
   21132:	b086      	sub	sp, #24
   21134:	af00      	add	r7, sp, #0
   21136:	60f8      	str	r0, [r7, #12]
   21138:	60b9      	str	r1, [r7, #8]
   2113a:	607a      	str	r2, [r7, #4]
   2113c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   2113e:	2300      	movs	r3, #0
   21140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   21142:	68fb      	ldr	r3, [r7, #12]
   21144:	68ba      	ldr	r2, [r7, #8]
   21146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21148:	68fb      	ldr	r3, [r7, #12]
   2114a:	68fa      	ldr	r2, [r7, #12]
   2114c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   2114e:	68ba      	ldr	r2, [r7, #8]
   21150:	687b      	ldr	r3, [r7, #4]
   21152:	429a      	cmp	r2, r3
   21154:	d812      	bhi.n	2117c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21156:	687a      	ldr	r2, [r7, #4]
   21158:	683b      	ldr	r3, [r7, #0]
   2115a:	1ad2      	subs	r2, r2, r3
   2115c:	68fb      	ldr	r3, [r7, #12]
   2115e:	699b      	ldr	r3, [r3, #24]
   21160:	429a      	cmp	r2, r3
   21162:	d302      	bcc.n	2116a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   21164:	2301      	movs	r3, #1
   21166:	617b      	str	r3, [r7, #20]
   21168:	e01b      	b.n	211a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   2116a:	4b10      	ldr	r3, [pc, #64]	; (211ac <prvInsertTimerInActiveList+0x7c>)
   2116c:	681a      	ldr	r2, [r3, #0]
   2116e:	68fb      	ldr	r3, [r7, #12]
   21170:	3304      	adds	r3, #4
   21172:	0019      	movs	r1, r3
   21174:	0010      	movs	r0, r2
   21176:	4b0e      	ldr	r3, [pc, #56]	; (211b0 <prvInsertTimerInActiveList+0x80>)
   21178:	4798      	blx	r3
   2117a:	e012      	b.n	211a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   2117c:	687a      	ldr	r2, [r7, #4]
   2117e:	683b      	ldr	r3, [r7, #0]
   21180:	429a      	cmp	r2, r3
   21182:	d206      	bcs.n	21192 <prvInsertTimerInActiveList+0x62>
   21184:	68ba      	ldr	r2, [r7, #8]
   21186:	683b      	ldr	r3, [r7, #0]
   21188:	429a      	cmp	r2, r3
   2118a:	d302      	bcc.n	21192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   2118c:	2301      	movs	r3, #1
   2118e:	617b      	str	r3, [r7, #20]
   21190:	e007      	b.n	211a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21192:	4b08      	ldr	r3, [pc, #32]	; (211b4 <prvInsertTimerInActiveList+0x84>)
   21194:	681a      	ldr	r2, [r3, #0]
   21196:	68fb      	ldr	r3, [r7, #12]
   21198:	3304      	adds	r3, #4
   2119a:	0019      	movs	r1, r3
   2119c:	0010      	movs	r0, r2
   2119e:	4b04      	ldr	r3, [pc, #16]	; (211b0 <prvInsertTimerInActiveList+0x80>)
   211a0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   211a2:	697b      	ldr	r3, [r7, #20]
}
   211a4:	0018      	movs	r0, r3
   211a6:	46bd      	mov	sp, r7
   211a8:	b006      	add	sp, #24
   211aa:	bd80      	pop	{r7, pc}
   211ac:	200003e8 	.word	0x200003e8
   211b0:	0001ef0b 	.word	0x0001ef0b
   211b4:	200003e4 	.word	0x200003e4

000211b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   211b8:	b590      	push	{r4, r7, lr}
   211ba:	b08d      	sub	sp, #52	; 0x34
   211bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   211be:	e07e      	b.n	212be <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   211c0:	2308      	movs	r3, #8
   211c2:	18fb      	adds	r3, r7, r3
   211c4:	681b      	ldr	r3, [r3, #0]
   211c6:	2b00      	cmp	r3, #0
   211c8:	da10      	bge.n	211ec <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   211ca:	2308      	movs	r3, #8
   211cc:	18fb      	adds	r3, r7, r3
   211ce:	3304      	adds	r3, #4
   211d0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   211d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   211d4:	2b00      	cmp	r3, #0
   211d6:	d101      	bne.n	211dc <prvProcessReceivedCommands+0x24>
   211d8:	b672      	cpsid	i
   211da:	e7fe      	b.n	211da <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   211dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   211de:	681a      	ldr	r2, [r3, #0]
   211e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   211e2:	6858      	ldr	r0, [r3, #4]
   211e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   211e6:	689b      	ldr	r3, [r3, #8]
   211e8:	0019      	movs	r1, r3
   211ea:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   211ec:	2308      	movs	r3, #8
   211ee:	18fb      	adds	r3, r7, r3
   211f0:	681b      	ldr	r3, [r3, #0]
   211f2:	2b00      	cmp	r3, #0
   211f4:	db63      	blt.n	212be <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   211f6:	2308      	movs	r3, #8
   211f8:	18fb      	adds	r3, r7, r3
   211fa:	689b      	ldr	r3, [r3, #8]
   211fc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   211fe:	6a3b      	ldr	r3, [r7, #32]
   21200:	695b      	ldr	r3, [r3, #20]
   21202:	2b00      	cmp	r3, #0
   21204:	d004      	beq.n	21210 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21206:	6a3b      	ldr	r3, [r7, #32]
   21208:	3304      	adds	r3, #4
   2120a:	0018      	movs	r0, r3
   2120c:	4b33      	ldr	r3, [pc, #204]	; (212dc <prvProcessReceivedCommands+0x124>)
   2120e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21210:	1d3b      	adds	r3, r7, #4
   21212:	0018      	movs	r0, r3
   21214:	4b32      	ldr	r3, [pc, #200]	; (212e0 <prvProcessReceivedCommands+0x128>)
   21216:	4798      	blx	r3
   21218:	0003      	movs	r3, r0
   2121a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   2121c:	2308      	movs	r3, #8
   2121e:	18fb      	adds	r3, r7, r3
   21220:	681b      	ldr	r3, [r3, #0]
   21222:	2b09      	cmp	r3, #9
   21224:	d84a      	bhi.n	212bc <prvProcessReceivedCommands+0x104>
   21226:	009a      	lsls	r2, r3, #2
   21228:	4b2e      	ldr	r3, [pc, #184]	; (212e4 <prvProcessReceivedCommands+0x12c>)
   2122a:	18d3      	adds	r3, r2, r3
   2122c:	681b      	ldr	r3, [r3, #0]
   2122e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   21230:	2308      	movs	r3, #8
   21232:	18fb      	adds	r3, r7, r3
   21234:	685a      	ldr	r2, [r3, #4]
   21236:	6a3b      	ldr	r3, [r7, #32]
   21238:	699b      	ldr	r3, [r3, #24]
   2123a:	18d1      	adds	r1, r2, r3
   2123c:	2308      	movs	r3, #8
   2123e:	18fb      	adds	r3, r7, r3
   21240:	685b      	ldr	r3, [r3, #4]
   21242:	69fa      	ldr	r2, [r7, #28]
   21244:	6a38      	ldr	r0, [r7, #32]
   21246:	4c28      	ldr	r4, [pc, #160]	; (212e8 <prvProcessReceivedCommands+0x130>)
   21248:	47a0      	blx	r4
   2124a:	1e03      	subs	r3, r0, #0
   2124c:	d037      	beq.n	212be <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2124e:	6a3b      	ldr	r3, [r7, #32]
   21250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21252:	6a3a      	ldr	r2, [r7, #32]
   21254:	0010      	movs	r0, r2
   21256:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21258:	6a3b      	ldr	r3, [r7, #32]
   2125a:	69db      	ldr	r3, [r3, #28]
   2125c:	2b01      	cmp	r3, #1
   2125e:	d12e      	bne.n	212be <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   21260:	2308      	movs	r3, #8
   21262:	18fb      	adds	r3, r7, r3
   21264:	685a      	ldr	r2, [r3, #4]
   21266:	6a3b      	ldr	r3, [r7, #32]
   21268:	699b      	ldr	r3, [r3, #24]
   2126a:	18d2      	adds	r2, r2, r3
   2126c:	6a38      	ldr	r0, [r7, #32]
   2126e:	2300      	movs	r3, #0
   21270:	9300      	str	r3, [sp, #0]
   21272:	2300      	movs	r3, #0
   21274:	2100      	movs	r1, #0
   21276:	4c1d      	ldr	r4, [pc, #116]	; (212ec <prvProcessReceivedCommands+0x134>)
   21278:	47a0      	blx	r4
   2127a:	0003      	movs	r3, r0
   2127c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   2127e:	69bb      	ldr	r3, [r7, #24]
   21280:	2b00      	cmp	r3, #0
   21282:	d11c      	bne.n	212be <prvProcessReceivedCommands+0x106>
   21284:	b672      	cpsid	i
   21286:	e7fe      	b.n	21286 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21288:	2308      	movs	r3, #8
   2128a:	18fb      	adds	r3, r7, r3
   2128c:	685a      	ldr	r2, [r3, #4]
   2128e:	6a3b      	ldr	r3, [r7, #32]
   21290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21292:	6a3b      	ldr	r3, [r7, #32]
   21294:	699b      	ldr	r3, [r3, #24]
   21296:	2b00      	cmp	r3, #0
   21298:	d101      	bne.n	2129e <prvProcessReceivedCommands+0xe6>
   2129a:	b672      	cpsid	i
   2129c:	e7fe      	b.n	2129c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2129e:	6a3b      	ldr	r3, [r7, #32]
   212a0:	699a      	ldr	r2, [r3, #24]
   212a2:	69fb      	ldr	r3, [r7, #28]
   212a4:	18d1      	adds	r1, r2, r3
   212a6:	69fb      	ldr	r3, [r7, #28]
   212a8:	69fa      	ldr	r2, [r7, #28]
   212aa:	6a38      	ldr	r0, [r7, #32]
   212ac:	4c0e      	ldr	r4, [pc, #56]	; (212e8 <prvProcessReceivedCommands+0x130>)
   212ae:	47a0      	blx	r4
					break;
   212b0:	e005      	b.n	212be <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   212b2:	6a3b      	ldr	r3, [r7, #32]
   212b4:	0018      	movs	r0, r3
   212b6:	4b0e      	ldr	r3, [pc, #56]	; (212f0 <prvProcessReceivedCommands+0x138>)
   212b8:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   212ba:	e000      	b.n	212be <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   212bc:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   212be:	4b0d      	ldr	r3, [pc, #52]	; (212f4 <prvProcessReceivedCommands+0x13c>)
   212c0:	681b      	ldr	r3, [r3, #0]
   212c2:	2208      	movs	r2, #8
   212c4:	18b9      	adds	r1, r7, r2
   212c6:	2200      	movs	r2, #0
   212c8:	0018      	movs	r0, r3
   212ca:	4b0b      	ldr	r3, [pc, #44]	; (212f8 <prvProcessReceivedCommands+0x140>)
   212cc:	4798      	blx	r3
   212ce:	1e03      	subs	r3, r0, #0
   212d0:	d000      	beq.n	212d4 <prvProcessReceivedCommands+0x11c>
   212d2:	e775      	b.n	211c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   212d4:	46c0      	nop			; (mov r8, r8)
   212d6:	46bd      	mov	sp, r7
   212d8:	b00b      	add	sp, #44	; 0x2c
   212da:	bd90      	pop	{r4, r7, pc}
   212dc:	0001ef77 	.word	0x0001ef77
   212e0:	000210e9 	.word	0x000210e9
   212e4:	0002aa98 	.word	0x0002aa98
   212e8:	00021131 	.word	0x00021131
   212ec:	00020ead 	.word	0x00020ead
   212f0:	0001ee41 	.word	0x0001ee41
   212f4:	200003ec 	.word	0x200003ec
   212f8:	0001f441 	.word	0x0001f441

000212fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   212fc:	b590      	push	{r4, r7, lr}
   212fe:	b089      	sub	sp, #36	; 0x24
   21300:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21302:	e03e      	b.n	21382 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21304:	4b28      	ldr	r3, [pc, #160]	; (213a8 <prvSwitchTimerLists+0xac>)
   21306:	681b      	ldr	r3, [r3, #0]
   21308:	68db      	ldr	r3, [r3, #12]
   2130a:	681b      	ldr	r3, [r3, #0]
   2130c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2130e:	4b26      	ldr	r3, [pc, #152]	; (213a8 <prvSwitchTimerLists+0xac>)
   21310:	681b      	ldr	r3, [r3, #0]
   21312:	68db      	ldr	r3, [r3, #12]
   21314:	68db      	ldr	r3, [r3, #12]
   21316:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21318:	693b      	ldr	r3, [r7, #16]
   2131a:	3304      	adds	r3, #4
   2131c:	0018      	movs	r0, r3
   2131e:	4b23      	ldr	r3, [pc, #140]	; (213ac <prvSwitchTimerLists+0xb0>)
   21320:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21322:	693b      	ldr	r3, [r7, #16]
   21324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21326:	693a      	ldr	r2, [r7, #16]
   21328:	0010      	movs	r0, r2
   2132a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   2132c:	693b      	ldr	r3, [r7, #16]
   2132e:	69db      	ldr	r3, [r3, #28]
   21330:	2b01      	cmp	r3, #1
   21332:	d126      	bne.n	21382 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   21334:	693b      	ldr	r3, [r7, #16]
   21336:	699a      	ldr	r2, [r3, #24]
   21338:	697b      	ldr	r3, [r7, #20]
   2133a:	18d3      	adds	r3, r2, r3
   2133c:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   2133e:	68fa      	ldr	r2, [r7, #12]
   21340:	697b      	ldr	r3, [r7, #20]
   21342:	429a      	cmp	r2, r3
   21344:	d90e      	bls.n	21364 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   21346:	693b      	ldr	r3, [r7, #16]
   21348:	68fa      	ldr	r2, [r7, #12]
   2134a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   2134c:	693b      	ldr	r3, [r7, #16]
   2134e:	693a      	ldr	r2, [r7, #16]
   21350:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21352:	4b15      	ldr	r3, [pc, #84]	; (213a8 <prvSwitchTimerLists+0xac>)
   21354:	681a      	ldr	r2, [r3, #0]
   21356:	693b      	ldr	r3, [r7, #16]
   21358:	3304      	adds	r3, #4
   2135a:	0019      	movs	r1, r3
   2135c:	0010      	movs	r0, r2
   2135e:	4b14      	ldr	r3, [pc, #80]	; (213b0 <prvSwitchTimerLists+0xb4>)
   21360:	4798      	blx	r3
   21362:	e00e      	b.n	21382 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21364:	697a      	ldr	r2, [r7, #20]
   21366:	6938      	ldr	r0, [r7, #16]
   21368:	2300      	movs	r3, #0
   2136a:	9300      	str	r3, [sp, #0]
   2136c:	2300      	movs	r3, #0
   2136e:	2100      	movs	r1, #0
   21370:	4c10      	ldr	r4, [pc, #64]	; (213b4 <prvSwitchTimerLists+0xb8>)
   21372:	47a0      	blx	r4
   21374:	0003      	movs	r3, r0
   21376:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   21378:	68bb      	ldr	r3, [r7, #8]
   2137a:	2b00      	cmp	r3, #0
   2137c:	d101      	bne.n	21382 <prvSwitchTimerLists+0x86>
   2137e:	b672      	cpsid	i
   21380:	e7fe      	b.n	21380 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21382:	4b09      	ldr	r3, [pc, #36]	; (213a8 <prvSwitchTimerLists+0xac>)
   21384:	681b      	ldr	r3, [r3, #0]
   21386:	681b      	ldr	r3, [r3, #0]
   21388:	2b00      	cmp	r3, #0
   2138a:	d1bb      	bne.n	21304 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   2138c:	4b06      	ldr	r3, [pc, #24]	; (213a8 <prvSwitchTimerLists+0xac>)
   2138e:	681b      	ldr	r3, [r3, #0]
   21390:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21392:	4b09      	ldr	r3, [pc, #36]	; (213b8 <prvSwitchTimerLists+0xbc>)
   21394:	681a      	ldr	r2, [r3, #0]
   21396:	4b04      	ldr	r3, [pc, #16]	; (213a8 <prvSwitchTimerLists+0xac>)
   21398:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   2139a:	4b07      	ldr	r3, [pc, #28]	; (213b8 <prvSwitchTimerLists+0xbc>)
   2139c:	687a      	ldr	r2, [r7, #4]
   2139e:	601a      	str	r2, [r3, #0]
}
   213a0:	46c0      	nop			; (mov r8, r8)
   213a2:	46bd      	mov	sp, r7
   213a4:	b007      	add	sp, #28
   213a6:	bd90      	pop	{r4, r7, pc}
   213a8:	200003e4 	.word	0x200003e4
   213ac:	0001ef77 	.word	0x0001ef77
   213b0:	0001ef0b 	.word	0x0001ef0b
   213b4:	00020ead 	.word	0x00020ead
   213b8:	200003e8 	.word	0x200003e8

000213bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   213bc:	b580      	push	{r7, lr}
   213be:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   213c0:	4b10      	ldr	r3, [pc, #64]	; (21404 <prvCheckForValidListAndQueue+0x48>)
   213c2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   213c4:	4b10      	ldr	r3, [pc, #64]	; (21408 <prvCheckForValidListAndQueue+0x4c>)
   213c6:	681b      	ldr	r3, [r3, #0]
   213c8:	2b00      	cmp	r3, #0
   213ca:	d115      	bne.n	213f8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   213cc:	4b0f      	ldr	r3, [pc, #60]	; (2140c <prvCheckForValidListAndQueue+0x50>)
   213ce:	0018      	movs	r0, r3
   213d0:	4b0f      	ldr	r3, [pc, #60]	; (21410 <prvCheckForValidListAndQueue+0x54>)
   213d2:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   213d4:	4b0f      	ldr	r3, [pc, #60]	; (21414 <prvCheckForValidListAndQueue+0x58>)
   213d6:	0018      	movs	r0, r3
   213d8:	4b0d      	ldr	r3, [pc, #52]	; (21410 <prvCheckForValidListAndQueue+0x54>)
   213da:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   213dc:	4b0e      	ldr	r3, [pc, #56]	; (21418 <prvCheckForValidListAndQueue+0x5c>)
   213de:	4a0b      	ldr	r2, [pc, #44]	; (2140c <prvCheckForValidListAndQueue+0x50>)
   213e0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   213e2:	4b0e      	ldr	r3, [pc, #56]	; (2141c <prvCheckForValidListAndQueue+0x60>)
   213e4:	4a0b      	ldr	r2, [pc, #44]	; (21414 <prvCheckForValidListAndQueue+0x58>)
   213e6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   213e8:	2200      	movs	r2, #0
   213ea:	2110      	movs	r1, #16
   213ec:	2005      	movs	r0, #5
   213ee:	4b0c      	ldr	r3, [pc, #48]	; (21420 <prvCheckForValidListAndQueue+0x64>)
   213f0:	4798      	blx	r3
   213f2:	0002      	movs	r2, r0
   213f4:	4b04      	ldr	r3, [pc, #16]	; (21408 <prvCheckForValidListAndQueue+0x4c>)
   213f6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   213f8:	4b0a      	ldr	r3, [pc, #40]	; (21424 <prvCheckForValidListAndQueue+0x68>)
   213fa:	4798      	blx	r3
}
   213fc:	46c0      	nop			; (mov r8, r8)
   213fe:	46bd      	mov	sp, r7
   21400:	bd80      	pop	{r7, pc}
   21402:	46c0      	nop			; (mov r8, r8)
   21404:	0001ecd1 	.word	0x0001ecd1
   21408:	200003ec 	.word	0x200003ec
   2140c:	200003bc 	.word	0x200003bc
   21410:	0001ee75 	.word	0x0001ee75
   21414:	200003d0 	.word	0x200003d0
   21418:	200003e4 	.word	0x200003e4
   2141c:	200003e8 	.word	0x200003e8
   21420:	0001f085 	.word	0x0001f085
   21424:	0001ecf5 	.word	0x0001ecf5

00021428 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   21428:	b580      	push	{r7, lr}
   2142a:	b084      	sub	sp, #16
   2142c:	af00      	add	r7, sp, #0
   2142e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   21430:	687b      	ldr	r3, [r7, #4]
   21432:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   21434:	687b      	ldr	r3, [r7, #4]
   21436:	2b00      	cmp	r3, #0
   21438:	d101      	bne.n	2143e <xTimerIsTimerActive+0x16>
   2143a:	b672      	cpsid	i
   2143c:	e7fe      	b.n	2143c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   2143e:	4b07      	ldr	r3, [pc, #28]	; (2145c <xTimerIsTimerActive+0x34>)
   21440:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   21442:	68fb      	ldr	r3, [r7, #12]
   21444:	695b      	ldr	r3, [r3, #20]
   21446:	1e5a      	subs	r2, r3, #1
   21448:	4193      	sbcs	r3, r2
   2144a:	b2db      	uxtb	r3, r3
   2144c:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   2144e:	4b04      	ldr	r3, [pc, #16]	; (21460 <xTimerIsTimerActive+0x38>)
   21450:	4798      	blx	r3

	return xTimerIsInActiveList;
   21452:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   21454:	0018      	movs	r0, r3
   21456:	46bd      	mov	sp, r7
   21458:	b004      	add	sp, #16
   2145a:	bd80      	pop	{r7, pc}
   2145c:	0001ecd1 	.word	0x0001ecd1
   21460:	0001ecf5 	.word	0x0001ecf5

00021464 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   21464:	b580      	push	{r7, lr}
   21466:	b082      	sub	sp, #8
   21468:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   2146a:	4b04      	ldr	r3, [pc, #16]	; (2147c <wdt_clear_early_warning+0x18>)
   2146c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   2146e:	687b      	ldr	r3, [r7, #4]
   21470:	2201      	movs	r2, #1
   21472:	719a      	strb	r2, [r3, #6]
}
   21474:	46c0      	nop			; (mov r8, r8)
   21476:	46bd      	mov	sp, r7
   21478:	b002      	add	sp, #8
   2147a:	bd80      	pop	{r7, pc}
   2147c:	40001000 	.word	0x40001000

00021480 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21480:	b580      	push	{r7, lr}
   21482:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21484:	4b05      	ldr	r3, [pc, #20]	; (2149c <WDT_Handler+0x1c>)
   21486:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21488:	4b05      	ldr	r3, [pc, #20]	; (214a0 <WDT_Handler+0x20>)
   2148a:	681b      	ldr	r3, [r3, #0]
   2148c:	2b00      	cmp	r3, #0
   2148e:	d002      	beq.n	21496 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21490:	4b03      	ldr	r3, [pc, #12]	; (214a0 <WDT_Handler+0x20>)
   21492:	681b      	ldr	r3, [r3, #0]
   21494:	4798      	blx	r3
	}
}
   21496:	46c0      	nop			; (mov r8, r8)
   21498:	46bd      	mov	sp, r7
   2149a:	bd80      	pop	{r7, pc}
   2149c:	00021465 	.word	0x00021465
   214a0:	20000944 	.word	0x20000944

000214a4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   214a4:	b580      	push	{r7, lr}
   214a6:	af00      	add	r7, sp, #0
   214a8:	2000      	movs	r0, #0
   214aa:	4b02      	ldr	r3, [pc, #8]	; (214b4 <TCC0_Handler+0x10>)
   214ac:	4798      	blx	r3
   214ae:	46c0      	nop			; (mov r8, r8)
   214b0:	46bd      	mov	sp, r7
   214b2:	bd80      	pop	{r7, pc}
   214b4:	000214e1 	.word	0x000214e1

000214b8 <TCC1_Handler>:
   214b8:	b580      	push	{r7, lr}
   214ba:	af00      	add	r7, sp, #0
   214bc:	2001      	movs	r0, #1
   214be:	4b02      	ldr	r3, [pc, #8]	; (214c8 <TCC1_Handler+0x10>)
   214c0:	4798      	blx	r3
   214c2:	46c0      	nop			; (mov r8, r8)
   214c4:	46bd      	mov	sp, r7
   214c6:	bd80      	pop	{r7, pc}
   214c8:	000214e1 	.word	0x000214e1

000214cc <TCC2_Handler>:
   214cc:	b580      	push	{r7, lr}
   214ce:	af00      	add	r7, sp, #0
   214d0:	2002      	movs	r0, #2
   214d2:	4b02      	ldr	r3, [pc, #8]	; (214dc <TCC2_Handler+0x10>)
   214d4:	4798      	blx	r3
   214d6:	46c0      	nop			; (mov r8, r8)
   214d8:	46bd      	mov	sp, r7
   214da:	bd80      	pop	{r7, pc}
   214dc:	000214e1 	.word	0x000214e1

000214e0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   214e0:	b580      	push	{r7, lr}
   214e2:	b086      	sub	sp, #24
   214e4:	af00      	add	r7, sp, #0
   214e6:	0002      	movs	r2, r0
   214e8:	1dfb      	adds	r3, r7, #7
   214ea:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   214ec:	1dfb      	adds	r3, r7, #7
   214ee:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   214f0:	4b18      	ldr	r3, [pc, #96]	; (21554 <_tcc_interrupt_handler+0x74>)
   214f2:	0092      	lsls	r2, r2, #2
   214f4:	58d3      	ldr	r3, [r2, r3]
   214f6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   214f8:	693b      	ldr	r3, [r7, #16]
   214fa:	681b      	ldr	r3, [r3, #0]
   214fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   214fe:	693b      	ldr	r3, [r7, #16]
   21500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21502:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21504:	693b      	ldr	r3, [r7, #16]
   21506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21508:	4013      	ands	r3, r2
   2150a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2150c:	2300      	movs	r3, #0
   2150e:	617b      	str	r3, [r7, #20]
   21510:	e019      	b.n	21546 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21512:	4b11      	ldr	r3, [pc, #68]	; (21558 <_tcc_interrupt_handler+0x78>)
   21514:	697a      	ldr	r2, [r7, #20]
   21516:	0092      	lsls	r2, r2, #2
   21518:	58d3      	ldr	r3, [r2, r3]
   2151a:	68fa      	ldr	r2, [r7, #12]
   2151c:	4013      	ands	r3, r2
   2151e:	d00f      	beq.n	21540 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   21520:	693a      	ldr	r2, [r7, #16]
   21522:	697b      	ldr	r3, [r7, #20]
   21524:	009b      	lsls	r3, r3, #2
   21526:	18d3      	adds	r3, r2, r3
   21528:	3304      	adds	r3, #4
   2152a:	681b      	ldr	r3, [r3, #0]
   2152c:	693a      	ldr	r2, [r7, #16]
   2152e:	0010      	movs	r0, r2
   21530:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   21532:	693b      	ldr	r3, [r7, #16]
   21534:	681b      	ldr	r3, [r3, #0]
   21536:	4a08      	ldr	r2, [pc, #32]	; (21558 <_tcc_interrupt_handler+0x78>)
   21538:	6979      	ldr	r1, [r7, #20]
   2153a:	0089      	lsls	r1, r1, #2
   2153c:	588a      	ldr	r2, [r1, r2]
   2153e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21540:	697b      	ldr	r3, [r7, #20]
   21542:	3301      	adds	r3, #1
   21544:	617b      	str	r3, [r7, #20]
   21546:	697b      	ldr	r3, [r7, #20]
   21548:	2b0b      	cmp	r3, #11
   2154a:	dde2      	ble.n	21512 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2154c:	46c0      	nop			; (mov r8, r8)
   2154e:	46bd      	mov	sp, r7
   21550:	b006      	add	sp, #24
   21552:	bd80      	pop	{r7, pc}
   21554:	20000948 	.word	0x20000948
   21558:	0002aac0 	.word	0x0002aac0

0002155c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   2155c:	b580      	push	{r7, lr}
   2155e:	af00      	add	r7, sp, #0
   21560:	2000      	movs	r0, #0
   21562:	4b02      	ldr	r3, [pc, #8]	; (2156c <TC3_Handler+0x10>)
   21564:	4798      	blx	r3
   21566:	46c0      	nop			; (mov r8, r8)
   21568:	46bd      	mov	sp, r7
   2156a:	bd80      	pop	{r7, pc}
   2156c:	000215c1 	.word	0x000215c1

00021570 <TC4_Handler>:
   21570:	b580      	push	{r7, lr}
   21572:	af00      	add	r7, sp, #0
   21574:	2001      	movs	r0, #1
   21576:	4b02      	ldr	r3, [pc, #8]	; (21580 <TC4_Handler+0x10>)
   21578:	4798      	blx	r3
   2157a:	46c0      	nop			; (mov r8, r8)
   2157c:	46bd      	mov	sp, r7
   2157e:	bd80      	pop	{r7, pc}
   21580:	000215c1 	.word	0x000215c1

00021584 <TC5_Handler>:
   21584:	b580      	push	{r7, lr}
   21586:	af00      	add	r7, sp, #0
   21588:	2002      	movs	r0, #2
   2158a:	4b02      	ldr	r3, [pc, #8]	; (21594 <TC5_Handler+0x10>)
   2158c:	4798      	blx	r3
   2158e:	46c0      	nop			; (mov r8, r8)
   21590:	46bd      	mov	sp, r7
   21592:	bd80      	pop	{r7, pc}
   21594:	000215c1 	.word	0x000215c1

00021598 <TC6_Handler>:
   21598:	b580      	push	{r7, lr}
   2159a:	af00      	add	r7, sp, #0
   2159c:	2003      	movs	r0, #3
   2159e:	4b02      	ldr	r3, [pc, #8]	; (215a8 <TC6_Handler+0x10>)
   215a0:	4798      	blx	r3
   215a2:	46c0      	nop			; (mov r8, r8)
   215a4:	46bd      	mov	sp, r7
   215a6:	bd80      	pop	{r7, pc}
   215a8:	000215c1 	.word	0x000215c1

000215ac <TC7_Handler>:
   215ac:	b580      	push	{r7, lr}
   215ae:	af00      	add	r7, sp, #0
   215b0:	2004      	movs	r0, #4
   215b2:	4b02      	ldr	r3, [pc, #8]	; (215bc <TC7_Handler+0x10>)
   215b4:	4798      	blx	r3
   215b6:	46c0      	nop			; (mov r8, r8)
   215b8:	46bd      	mov	sp, r7
   215ba:	bd80      	pop	{r7, pc}
   215bc:	000215c1 	.word	0x000215c1

000215c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   215c0:	b580      	push	{r7, lr}
   215c2:	b084      	sub	sp, #16
   215c4:	af00      	add	r7, sp, #0
   215c6:	0002      	movs	r2, r0
   215c8:	1dfb      	adds	r3, r7, #7
   215ca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   215cc:	1dfb      	adds	r3, r7, #7
   215ce:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   215d0:	4b28      	ldr	r3, [pc, #160]	; (21674 <_tc_interrupt_handler+0xb4>)
   215d2:	0092      	lsls	r2, r2, #2
   215d4:	58d3      	ldr	r3, [r2, r3]
   215d6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   215d8:	68fb      	ldr	r3, [r7, #12]
   215da:	681b      	ldr	r3, [r3, #0]
   215dc:	7b9b      	ldrb	r3, [r3, #14]
   215de:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   215e0:	68fa      	ldr	r2, [r7, #12]
   215e2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   215e4:	4013      	ands	r3, r2
   215e6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   215e8:	68fb      	ldr	r3, [r7, #12]
   215ea:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   215ec:	230b      	movs	r3, #11
   215ee:	18fb      	adds	r3, r7, r3
   215f0:	400a      	ands	r2, r1
   215f2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   215f4:	230b      	movs	r3, #11
   215f6:	18fb      	adds	r3, r7, r3
   215f8:	781b      	ldrb	r3, [r3, #0]
   215fa:	2201      	movs	r2, #1
   215fc:	4013      	ands	r3, r2
   215fe:	d008      	beq.n	21612 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   21600:	68fb      	ldr	r3, [r7, #12]
   21602:	689b      	ldr	r3, [r3, #8]
   21604:	68fa      	ldr	r2, [r7, #12]
   21606:	0010      	movs	r0, r2
   21608:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2160a:	68fb      	ldr	r3, [r7, #12]
   2160c:	681b      	ldr	r3, [r3, #0]
   2160e:	2201      	movs	r2, #1
   21610:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   21612:	230b      	movs	r3, #11
   21614:	18fb      	adds	r3, r7, r3
   21616:	781b      	ldrb	r3, [r3, #0]
   21618:	2202      	movs	r2, #2
   2161a:	4013      	ands	r3, r2
   2161c:	d008      	beq.n	21630 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2161e:	68fb      	ldr	r3, [r7, #12]
   21620:	68db      	ldr	r3, [r3, #12]
   21622:	68fa      	ldr	r2, [r7, #12]
   21624:	0010      	movs	r0, r2
   21626:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   21628:	68fb      	ldr	r3, [r7, #12]
   2162a:	681b      	ldr	r3, [r3, #0]
   2162c:	2202      	movs	r2, #2
   2162e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   21630:	230b      	movs	r3, #11
   21632:	18fb      	adds	r3, r7, r3
   21634:	781b      	ldrb	r3, [r3, #0]
   21636:	2210      	movs	r2, #16
   21638:	4013      	ands	r3, r2
   2163a:	d008      	beq.n	2164e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   2163c:	68fb      	ldr	r3, [r7, #12]
   2163e:	691b      	ldr	r3, [r3, #16]
   21640:	68fa      	ldr	r2, [r7, #12]
   21642:	0010      	movs	r0, r2
   21644:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   21646:	68fb      	ldr	r3, [r7, #12]
   21648:	681b      	ldr	r3, [r3, #0]
   2164a:	2210      	movs	r2, #16
   2164c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   2164e:	230b      	movs	r3, #11
   21650:	18fb      	adds	r3, r7, r3
   21652:	781b      	ldrb	r3, [r3, #0]
   21654:	2220      	movs	r2, #32
   21656:	4013      	ands	r3, r2
   21658:	d008      	beq.n	2166c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   2165a:	68fb      	ldr	r3, [r7, #12]
   2165c:	695b      	ldr	r3, [r3, #20]
   2165e:	68fa      	ldr	r2, [r7, #12]
   21660:	0010      	movs	r0, r2
   21662:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   21664:	68fb      	ldr	r3, [r7, #12]
   21666:	681b      	ldr	r3, [r3, #0]
   21668:	2220      	movs	r2, #32
   2166a:	739a      	strb	r2, [r3, #14]
	}
}
   2166c:	46c0      	nop			; (mov r8, r8)
   2166e:	46bd      	mov	sp, r7
   21670:	b004      	add	sp, #16
   21672:	bd80      	pop	{r7, pc}
   21674:	20000954 	.word	0x20000954

00021678 <system_gclk_chan_get_config_defaults>:
{
   21678:	b580      	push	{r7, lr}
   2167a:	b082      	sub	sp, #8
   2167c:	af00      	add	r7, sp, #0
   2167e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21680:	687b      	ldr	r3, [r7, #4]
   21682:	2200      	movs	r2, #0
   21684:	701a      	strb	r2, [r3, #0]
}
   21686:	46c0      	nop			; (mov r8, r8)
   21688:	46bd      	mov	sp, r7
   2168a:	b002      	add	sp, #8
   2168c:	bd80      	pop	{r7, pc}
	...

00021690 <system_apb_clock_set_mask>:
{
   21690:	b580      	push	{r7, lr}
   21692:	b082      	sub	sp, #8
   21694:	af00      	add	r7, sp, #0
   21696:	0002      	movs	r2, r0
   21698:	6039      	str	r1, [r7, #0]
   2169a:	1dfb      	adds	r3, r7, #7
   2169c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2169e:	1dfb      	adds	r3, r7, #7
   216a0:	781b      	ldrb	r3, [r3, #0]
   216a2:	2b01      	cmp	r3, #1
   216a4:	d00a      	beq.n	216bc <system_apb_clock_set_mask+0x2c>
   216a6:	2b02      	cmp	r3, #2
   216a8:	d00f      	beq.n	216ca <system_apb_clock_set_mask+0x3a>
   216aa:	2b00      	cmp	r3, #0
   216ac:	d114      	bne.n	216d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   216ae:	4b0e      	ldr	r3, [pc, #56]	; (216e8 <system_apb_clock_set_mask+0x58>)
   216b0:	4a0d      	ldr	r2, [pc, #52]	; (216e8 <system_apb_clock_set_mask+0x58>)
   216b2:	6991      	ldr	r1, [r2, #24]
   216b4:	683a      	ldr	r2, [r7, #0]
   216b6:	430a      	orrs	r2, r1
   216b8:	619a      	str	r2, [r3, #24]
			break;
   216ba:	e00f      	b.n	216dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   216bc:	4b0a      	ldr	r3, [pc, #40]	; (216e8 <system_apb_clock_set_mask+0x58>)
   216be:	4a0a      	ldr	r2, [pc, #40]	; (216e8 <system_apb_clock_set_mask+0x58>)
   216c0:	69d1      	ldr	r1, [r2, #28]
   216c2:	683a      	ldr	r2, [r7, #0]
   216c4:	430a      	orrs	r2, r1
   216c6:	61da      	str	r2, [r3, #28]
			break;
   216c8:	e008      	b.n	216dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   216ca:	4b07      	ldr	r3, [pc, #28]	; (216e8 <system_apb_clock_set_mask+0x58>)
   216cc:	4a06      	ldr	r2, [pc, #24]	; (216e8 <system_apb_clock_set_mask+0x58>)
   216ce:	6a11      	ldr	r1, [r2, #32]
   216d0:	683a      	ldr	r2, [r7, #0]
   216d2:	430a      	orrs	r2, r1
   216d4:	621a      	str	r2, [r3, #32]
			break;
   216d6:	e001      	b.n	216dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   216d8:	2317      	movs	r3, #23
   216da:	e000      	b.n	216de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   216dc:	2300      	movs	r3, #0
}
   216de:	0018      	movs	r0, r3
   216e0:	46bd      	mov	sp, r7
   216e2:	b002      	add	sp, #8
   216e4:	bd80      	pop	{r7, pc}
   216e6:	46c0      	nop			; (mov r8, r8)
   216e8:	40000400 	.word	0x40000400

000216ec <system_pinmux_get_config_defaults>:
{
   216ec:	b580      	push	{r7, lr}
   216ee:	b082      	sub	sp, #8
   216f0:	af00      	add	r7, sp, #0
   216f2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   216f4:	687b      	ldr	r3, [r7, #4]
   216f6:	2280      	movs	r2, #128	; 0x80
   216f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   216fa:	687b      	ldr	r3, [r7, #4]
   216fc:	2200      	movs	r2, #0
   216fe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   21700:	687b      	ldr	r3, [r7, #4]
   21702:	2201      	movs	r2, #1
   21704:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   21706:	687b      	ldr	r3, [r7, #4]
   21708:	2200      	movs	r2, #0
   2170a:	70da      	strb	r2, [r3, #3]
}
   2170c:	46c0      	nop			; (mov r8, r8)
   2170e:	46bd      	mov	sp, r7
   21710:	b002      	add	sp, #8
   21712:	bd80      	pop	{r7, pc}

00021714 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   21714:	b580      	push	{r7, lr}
   21716:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   21718:	4b05      	ldr	r3, [pc, #20]	; (21730 <system_is_debugger_present+0x1c>)
   2171a:	789b      	ldrb	r3, [r3, #2]
   2171c:	b2db      	uxtb	r3, r3
   2171e:	001a      	movs	r2, r3
   21720:	2302      	movs	r3, #2
   21722:	4013      	ands	r3, r2
   21724:	1e5a      	subs	r2, r3, #1
   21726:	4193      	sbcs	r3, r2
   21728:	b2db      	uxtb	r3, r3
}
   2172a:	0018      	movs	r0, r3
   2172c:	46bd      	mov	sp, r7
   2172e:	bd80      	pop	{r7, pc}
   21730:	41002000 	.word	0x41002000

00021734 <usart_is_syncing>:
{
   21734:	b580      	push	{r7, lr}
   21736:	b084      	sub	sp, #16
   21738:	af00      	add	r7, sp, #0
   2173a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2173c:	687b      	ldr	r3, [r7, #4]
   2173e:	681b      	ldr	r3, [r3, #0]
   21740:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21742:	68fb      	ldr	r3, [r7, #12]
   21744:	69db      	ldr	r3, [r3, #28]
   21746:	1e5a      	subs	r2, r3, #1
   21748:	4193      	sbcs	r3, r2
   2174a:	b2db      	uxtb	r3, r3
}
   2174c:	0018      	movs	r0, r3
   2174e:	46bd      	mov	sp, r7
   21750:	b004      	add	sp, #16
   21752:	bd80      	pop	{r7, pc}

00021754 <_usart_wait_for_sync>:
{
   21754:	b580      	push	{r7, lr}
   21756:	b082      	sub	sp, #8
   21758:	af00      	add	r7, sp, #0
   2175a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2175c:	46c0      	nop			; (mov r8, r8)
   2175e:	687b      	ldr	r3, [r7, #4]
   21760:	0018      	movs	r0, r3
   21762:	4b04      	ldr	r3, [pc, #16]	; (21774 <_usart_wait_for_sync+0x20>)
   21764:	4798      	blx	r3
   21766:	1e03      	subs	r3, r0, #0
   21768:	d1f9      	bne.n	2175e <_usart_wait_for_sync+0xa>
}
   2176a:	46c0      	nop			; (mov r8, r8)
   2176c:	46bd      	mov	sp, r7
   2176e:	b002      	add	sp, #8
   21770:	bd80      	pop	{r7, pc}
   21772:	46c0      	nop			; (mov r8, r8)
   21774:	00021735 	.word	0x00021735

00021778 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   21778:	b5b0      	push	{r4, r5, r7, lr}
   2177a:	b08c      	sub	sp, #48	; 0x30
   2177c:	af02      	add	r7, sp, #8
   2177e:	6078      	str	r0, [r7, #4]
   21780:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21782:	687b      	ldr	r3, [r7, #4]
   21784:	681b      	ldr	r3, [r3, #0]
   21786:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21788:	687b      	ldr	r3, [r7, #4]
   2178a:	681b      	ldr	r3, [r3, #0]
   2178c:	0018      	movs	r0, r3
   2178e:	4bab      	ldr	r3, [pc, #684]	; (21a3c <_usart_set_config+0x2c4>)
   21790:	4798      	blx	r3
   21792:	0003      	movs	r3, r0
   21794:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21796:	697b      	ldr	r3, [r7, #20]
   21798:	3314      	adds	r3, #20
   2179a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2179c:	2300      	movs	r3, #0
   2179e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   217a0:	2300      	movs	r3, #0
   217a2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   217a4:	230a      	movs	r3, #10
   217a6:	18fb      	adds	r3, r7, r3
   217a8:	2200      	movs	r2, #0
   217aa:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   217ac:	231f      	movs	r3, #31
   217ae:	18fb      	adds	r3, r7, r3
   217b0:	2200      	movs	r2, #0
   217b2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   217b4:	231e      	movs	r3, #30
   217b6:	18fb      	adds	r3, r7, r3
   217b8:	2210      	movs	r2, #16
   217ba:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   217bc:	683b      	ldr	r3, [r7, #0]
   217be:	8a1b      	ldrh	r3, [r3, #16]
   217c0:	2280      	movs	r2, #128	; 0x80
   217c2:	01d2      	lsls	r2, r2, #7
   217c4:	4293      	cmp	r3, r2
   217c6:	d01c      	beq.n	21802 <_usart_set_config+0x8a>
   217c8:	2280      	movs	r2, #128	; 0x80
   217ca:	01d2      	lsls	r2, r2, #7
   217cc:	4293      	cmp	r3, r2
   217ce:	dc06      	bgt.n	217de <_usart_set_config+0x66>
   217d0:	2b00      	cmp	r3, #0
   217d2:	d00d      	beq.n	217f0 <_usart_set_config+0x78>
   217d4:	2280      	movs	r2, #128	; 0x80
   217d6:	0192      	lsls	r2, r2, #6
   217d8:	4293      	cmp	r3, r2
   217da:	d024      	beq.n	21826 <_usart_set_config+0xae>
   217dc:	e035      	b.n	2184a <_usart_set_config+0xd2>
   217de:	22c0      	movs	r2, #192	; 0xc0
   217e0:	01d2      	lsls	r2, r2, #7
   217e2:	4293      	cmp	r3, r2
   217e4:	d028      	beq.n	21838 <_usart_set_config+0xc0>
   217e6:	2280      	movs	r2, #128	; 0x80
   217e8:	0212      	lsls	r2, r2, #8
   217ea:	4293      	cmp	r3, r2
   217ec:	d012      	beq.n	21814 <_usart_set_config+0x9c>
   217ee:	e02c      	b.n	2184a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   217f0:	231f      	movs	r3, #31
   217f2:	18fb      	adds	r3, r7, r3
   217f4:	2200      	movs	r2, #0
   217f6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   217f8:	231e      	movs	r3, #30
   217fa:	18fb      	adds	r3, r7, r3
   217fc:	2210      	movs	r2, #16
   217fe:	701a      	strb	r2, [r3, #0]
			break;
   21800:	e023      	b.n	2184a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21802:	231f      	movs	r3, #31
   21804:	18fb      	adds	r3, r7, r3
   21806:	2200      	movs	r2, #0
   21808:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2180a:	231e      	movs	r3, #30
   2180c:	18fb      	adds	r3, r7, r3
   2180e:	2208      	movs	r2, #8
   21810:	701a      	strb	r2, [r3, #0]
			break;
   21812:	e01a      	b.n	2184a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21814:	231f      	movs	r3, #31
   21816:	18fb      	adds	r3, r7, r3
   21818:	2200      	movs	r2, #0
   2181a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2181c:	231e      	movs	r3, #30
   2181e:	18fb      	adds	r3, r7, r3
   21820:	2203      	movs	r2, #3
   21822:	701a      	strb	r2, [r3, #0]
			break;
   21824:	e011      	b.n	2184a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21826:	231f      	movs	r3, #31
   21828:	18fb      	adds	r3, r7, r3
   2182a:	2201      	movs	r2, #1
   2182c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2182e:	231e      	movs	r3, #30
   21830:	18fb      	adds	r3, r7, r3
   21832:	2210      	movs	r2, #16
   21834:	701a      	strb	r2, [r3, #0]
			break;
   21836:	e008      	b.n	2184a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   21838:	231f      	movs	r3, #31
   2183a:	18fb      	adds	r3, r7, r3
   2183c:	2201      	movs	r2, #1
   2183e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   21840:	231e      	movs	r3, #30
   21842:	18fb      	adds	r3, r7, r3
   21844:	2208      	movs	r2, #8
   21846:	701a      	strb	r2, [r3, #0]
			break;
   21848:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2184a:	683b      	ldr	r3, [r7, #0]
   2184c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2184e:	683b      	ldr	r3, [r7, #0]
   21850:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   21852:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   21854:	683b      	ldr	r3, [r7, #0]
   21856:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   21858:	4313      	orrs	r3, r2
		config->sample_rate |
   2185a:	683a      	ldr	r2, [r7, #0]
   2185c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2185e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   21860:	683a      	ldr	r2, [r7, #0]
   21862:	7e12      	ldrb	r2, [r2, #24]
   21864:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   21866:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   21868:	683a      	ldr	r2, [r7, #0]
   2186a:	2126      	movs	r1, #38	; 0x26
   2186c:	5c52      	ldrb	r2, [r2, r1]
   2186e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   21870:	4313      	orrs	r3, r2
   21872:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   21874:	231d      	movs	r3, #29
   21876:	18fb      	adds	r3, r7, r3
   21878:	2200      	movs	r2, #0
   2187a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2187c:	683b      	ldr	r3, [r7, #0]
   2187e:	685b      	ldr	r3, [r3, #4]
   21880:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   21882:	68fb      	ldr	r3, [r7, #12]
   21884:	2b00      	cmp	r3, #0
   21886:	d01e      	beq.n	218c6 <_usart_set_config+0x14e>
   21888:	2280      	movs	r2, #128	; 0x80
   2188a:	0552      	lsls	r2, r2, #21
   2188c:	4293      	cmp	r3, r2
   2188e:	d14f      	bne.n	21930 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   21890:	683b      	ldr	r3, [r7, #0]
   21892:	2227      	movs	r2, #39	; 0x27
   21894:	5c9b      	ldrb	r3, [r3, r2]
   21896:	2201      	movs	r2, #1
   21898:	4053      	eors	r3, r2
   2189a:	b2db      	uxtb	r3, r3
   2189c:	2b00      	cmp	r3, #0
   2189e:	d046      	beq.n	2192e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   218a0:	683b      	ldr	r3, [r7, #0]
   218a2:	6a1d      	ldr	r5, [r3, #32]
   218a4:	693b      	ldr	r3, [r7, #16]
   218a6:	b2db      	uxtb	r3, r3
   218a8:	0018      	movs	r0, r3
   218aa:	4b65      	ldr	r3, [pc, #404]	; (21a40 <_usart_set_config+0x2c8>)
   218ac:	4798      	blx	r3
   218ae:	0001      	movs	r1, r0
   218b0:	231d      	movs	r3, #29
   218b2:	18fc      	adds	r4, r7, r3
   218b4:	230a      	movs	r3, #10
   218b6:	18fb      	adds	r3, r7, r3
   218b8:	001a      	movs	r2, r3
   218ba:	0028      	movs	r0, r5
   218bc:	4b61      	ldr	r3, [pc, #388]	; (21a44 <_usart_set_config+0x2cc>)
   218be:	4798      	blx	r3
   218c0:	0003      	movs	r3, r0
   218c2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   218c4:	e033      	b.n	2192e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   218c6:	683b      	ldr	r3, [r7, #0]
   218c8:	2227      	movs	r2, #39	; 0x27
   218ca:	5c9b      	ldrb	r3, [r3, r2]
   218cc:	2b00      	cmp	r3, #0
   218ce:	d014      	beq.n	218fa <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   218d0:	683b      	ldr	r3, [r7, #0]
   218d2:	6a18      	ldr	r0, [r3, #32]
   218d4:	683b      	ldr	r3, [r7, #0]
   218d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   218d8:	231d      	movs	r3, #29
   218da:	18fc      	adds	r4, r7, r3
   218dc:	231f      	movs	r3, #31
   218de:	18fb      	adds	r3, r7, r3
   218e0:	781d      	ldrb	r5, [r3, #0]
   218e2:	230a      	movs	r3, #10
   218e4:	18fa      	adds	r2, r7, r3
   218e6:	231e      	movs	r3, #30
   218e8:	18fb      	adds	r3, r7, r3
   218ea:	781b      	ldrb	r3, [r3, #0]
   218ec:	9300      	str	r3, [sp, #0]
   218ee:	002b      	movs	r3, r5
   218f0:	4d55      	ldr	r5, [pc, #340]	; (21a48 <_usart_set_config+0x2d0>)
   218f2:	47a8      	blx	r5
   218f4:	0003      	movs	r3, r0
   218f6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   218f8:	e01a      	b.n	21930 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   218fa:	683b      	ldr	r3, [r7, #0]
   218fc:	6a1d      	ldr	r5, [r3, #32]
   218fe:	693b      	ldr	r3, [r7, #16]
   21900:	b2db      	uxtb	r3, r3
   21902:	0018      	movs	r0, r3
   21904:	4b4e      	ldr	r3, [pc, #312]	; (21a40 <_usart_set_config+0x2c8>)
   21906:	4798      	blx	r3
				status_code =
   21908:	231d      	movs	r3, #29
   2190a:	18fc      	adds	r4, r7, r3
   2190c:	231f      	movs	r3, #31
   2190e:	18fb      	adds	r3, r7, r3
   21910:	7819      	ldrb	r1, [r3, #0]
   21912:	230a      	movs	r3, #10
   21914:	18fa      	adds	r2, r7, r3
   21916:	231e      	movs	r3, #30
   21918:	18fb      	adds	r3, r7, r3
   2191a:	781b      	ldrb	r3, [r3, #0]
   2191c:	9300      	str	r3, [sp, #0]
   2191e:	000b      	movs	r3, r1
   21920:	0001      	movs	r1, r0
   21922:	0028      	movs	r0, r5
   21924:	4d48      	ldr	r5, [pc, #288]	; (21a48 <_usart_set_config+0x2d0>)
   21926:	47a8      	blx	r5
   21928:	0003      	movs	r3, r0
   2192a:	7023      	strb	r3, [r4, #0]
			break;
   2192c:	e000      	b.n	21930 <_usart_set_config+0x1b8>
			break;
   2192e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   21930:	231d      	movs	r3, #29
   21932:	18fb      	adds	r3, r7, r3
   21934:	781b      	ldrb	r3, [r3, #0]
   21936:	2b00      	cmp	r3, #0
   21938:	d003      	beq.n	21942 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2193a:	231d      	movs	r3, #29
   2193c:	18fb      	adds	r3, r7, r3
   2193e:	781b      	ldrb	r3, [r3, #0]
   21940:	e077      	b.n	21a32 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   21942:	683b      	ldr	r3, [r7, #0]
   21944:	7e5b      	ldrb	r3, [r3, #25]
   21946:	2b00      	cmp	r3, #0
   21948:	d003      	beq.n	21952 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2194a:	683b      	ldr	r3, [r7, #0]
   2194c:	7e9a      	ldrb	r2, [r3, #26]
   2194e:	69bb      	ldr	r3, [r7, #24]
   21950:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21952:	687b      	ldr	r3, [r7, #4]
   21954:	0018      	movs	r0, r3
   21956:	4b3d      	ldr	r3, [pc, #244]	; (21a4c <_usart_set_config+0x2d4>)
   21958:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2195a:	230a      	movs	r3, #10
   2195c:	18fb      	adds	r3, r7, r3
   2195e:	881a      	ldrh	r2, [r3, #0]
   21960:	69bb      	ldr	r3, [r7, #24]
   21962:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   21964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21966:	68fb      	ldr	r3, [r7, #12]
   21968:	4313      	orrs	r3, r2
   2196a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2196c:	683b      	ldr	r3, [r7, #0]
   2196e:	2227      	movs	r2, #39	; 0x27
   21970:	5c9b      	ldrb	r3, [r3, r2]
   21972:	2201      	movs	r2, #1
   21974:	4053      	eors	r3, r2
   21976:	b2db      	uxtb	r3, r3
   21978:	2b00      	cmp	r3, #0
   2197a:	d003      	beq.n	21984 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2197e:	2204      	movs	r2, #4
   21980:	4313      	orrs	r3, r2
   21982:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21984:	683b      	ldr	r3, [r7, #0]
   21986:	7e5b      	ldrb	r3, [r3, #25]
   21988:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2198a:	683b      	ldr	r3, [r7, #0]
   2198c:	7f1b      	ldrb	r3, [r3, #28]
   2198e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21990:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21992:	683b      	ldr	r3, [r7, #0]
   21994:	7f5b      	ldrb	r3, [r3, #29]
   21996:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21998:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2199a:	683b      	ldr	r3, [r7, #0]
   2199c:	2124      	movs	r1, #36	; 0x24
   2199e:	5c5b      	ldrb	r3, [r3, r1]
   219a0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   219a2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   219a4:	683b      	ldr	r3, [r7, #0]
   219a6:	2125      	movs	r1, #37	; 0x25
   219a8:	5c5b      	ldrb	r3, [r3, r1]
   219aa:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   219ac:	4313      	orrs	r3, r2
	ctrlb =  
   219ae:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   219b0:	683b      	ldr	r3, [r7, #0]
   219b2:	7a9b      	ldrb	r3, [r3, #10]
   219b4:	001a      	movs	r2, r3
   219b6:	6a3b      	ldr	r3, [r7, #32]
   219b8:	4313      	orrs	r3, r2
   219ba:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   219bc:	683b      	ldr	r3, [r7, #0]
   219be:	7adb      	ldrb	r3, [r3, #11]
   219c0:	001a      	movs	r2, r3
   219c2:	6a3b      	ldr	r3, [r7, #32]
   219c4:	4313      	orrs	r3, r2
   219c6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   219c8:	683b      	ldr	r3, [r7, #0]
   219ca:	891b      	ldrh	r3, [r3, #8]
   219cc:	2bff      	cmp	r3, #255	; 0xff
   219ce:	d00b      	beq.n	219e8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   219d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   219d2:	2280      	movs	r2, #128	; 0x80
   219d4:	0452      	lsls	r2, r2, #17
   219d6:	4313      	orrs	r3, r2
   219d8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   219da:	683b      	ldr	r3, [r7, #0]
   219dc:	891b      	ldrh	r3, [r3, #8]
   219de:	001a      	movs	r2, r3
   219e0:	6a3b      	ldr	r3, [r7, #32]
   219e2:	4313      	orrs	r3, r2
   219e4:	623b      	str	r3, [r7, #32]
   219e6:	e008      	b.n	219fa <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   219e8:	683b      	ldr	r3, [r7, #0]
   219ea:	7edb      	ldrb	r3, [r3, #27]
   219ec:	2b00      	cmp	r3, #0
   219ee:	d004      	beq.n	219fa <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   219f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   219f2:	2280      	movs	r2, #128	; 0x80
   219f4:	04d2      	lsls	r2, r2, #19
   219f6:	4313      	orrs	r3, r2
   219f8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   219fa:	683b      	ldr	r3, [r7, #0]
   219fc:	222c      	movs	r2, #44	; 0x2c
   219fe:	5c9b      	ldrb	r3, [r3, r2]
   21a00:	2b00      	cmp	r3, #0
   21a02:	d103      	bne.n	21a0c <_usart_set_config+0x294>
   21a04:	4b12      	ldr	r3, [pc, #72]	; (21a50 <_usart_set_config+0x2d8>)
   21a06:	4798      	blx	r3
   21a08:	1e03      	subs	r3, r0, #0
   21a0a:	d003      	beq.n	21a14 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   21a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a0e:	2280      	movs	r2, #128	; 0x80
   21a10:	4313      	orrs	r3, r2
   21a12:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21a14:	687b      	ldr	r3, [r7, #4]
   21a16:	0018      	movs	r0, r3
   21a18:	4b0c      	ldr	r3, [pc, #48]	; (21a4c <_usart_set_config+0x2d4>)
   21a1a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   21a1c:	69bb      	ldr	r3, [r7, #24]
   21a1e:	6a3a      	ldr	r2, [r7, #32]
   21a20:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21a22:	687b      	ldr	r3, [r7, #4]
   21a24:	0018      	movs	r0, r3
   21a26:	4b09      	ldr	r3, [pc, #36]	; (21a4c <_usart_set_config+0x2d4>)
   21a28:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   21a2a:	69bb      	ldr	r3, [r7, #24]
   21a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21a2e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   21a30:	2300      	movs	r3, #0
}
   21a32:	0018      	movs	r0, r3
   21a34:	46bd      	mov	sp, r7
   21a36:	b00a      	add	sp, #40	; 0x28
   21a38:	bdb0      	pop	{r4, r5, r7, pc}
   21a3a:	46c0      	nop			; (mov r8, r8)
   21a3c:	0001eb15 	.word	0x0001eb15
   21a40:	00024ad9 	.word	0x00024ad9
   21a44:	0001e68f 	.word	0x0001e68f
   21a48:	0001e70d 	.word	0x0001e70d
   21a4c:	00021755 	.word	0x00021755
   21a50:	00021715 	.word	0x00021715

00021a54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   21a54:	b590      	push	{r4, r7, lr}
   21a56:	b093      	sub	sp, #76	; 0x4c
   21a58:	af00      	add	r7, sp, #0
   21a5a:	60f8      	str	r0, [r7, #12]
   21a5c:	60b9      	str	r1, [r7, #8]
   21a5e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   21a60:	233b      	movs	r3, #59	; 0x3b
   21a62:	18fb      	adds	r3, r7, r3
   21a64:	2200      	movs	r2, #0
   21a66:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   21a68:	68fb      	ldr	r3, [r7, #12]
   21a6a:	68ba      	ldr	r2, [r7, #8]
   21a6c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21a6e:	68fb      	ldr	r3, [r7, #12]
   21a70:	681b      	ldr	r3, [r3, #0]
   21a72:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21a74:	68fb      	ldr	r3, [r7, #12]
   21a76:	681b      	ldr	r3, [r3, #0]
   21a78:	0018      	movs	r0, r3
   21a7a:	4b86      	ldr	r3, [pc, #536]	; (21c94 <usart_init+0x240>)
   21a7c:	4798      	blx	r3
   21a7e:	0003      	movs	r3, r0
   21a80:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   21a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a84:	3302      	adds	r3, #2
   21a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a8a:	3314      	adds	r3, #20
   21a8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   21a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21a90:	681b      	ldr	r3, [r3, #0]
   21a92:	2201      	movs	r2, #1
   21a94:	4013      	ands	r3, r2
   21a96:	d001      	beq.n	21a9c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   21a98:	2305      	movs	r3, #5
   21a9a:	e0f6      	b.n	21c8a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   21a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21a9e:	681b      	ldr	r3, [r3, #0]
   21aa0:	2202      	movs	r2, #2
   21aa2:	4013      	ands	r3, r2
   21aa4:	d001      	beq.n	21aaa <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   21aa6:	231c      	movs	r3, #28
   21aa8:	e0ef      	b.n	21c8a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   21aaa:	2201      	movs	r2, #1
   21aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21aae:	409a      	lsls	r2, r3
   21ab0:	0013      	movs	r3, r2
   21ab2:	0019      	movs	r1, r3
   21ab4:	2002      	movs	r0, #2
   21ab6:	4b78      	ldr	r3, [pc, #480]	; (21c98 <usart_init+0x244>)
   21ab8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   21aba:	2324      	movs	r3, #36	; 0x24
   21abc:	18fb      	adds	r3, r7, r3
   21abe:	0018      	movs	r0, r3
   21ac0:	4b76      	ldr	r3, [pc, #472]	; (21c9c <usart_init+0x248>)
   21ac2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   21ac4:	687b      	ldr	r3, [r7, #4]
   21ac6:	222d      	movs	r2, #45	; 0x2d
   21ac8:	5c9a      	ldrb	r2, [r3, r2]
   21aca:	2324      	movs	r3, #36	; 0x24
   21acc:	18fb      	adds	r3, r7, r3
   21ace:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   21ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21ad2:	b2db      	uxtb	r3, r3
   21ad4:	2224      	movs	r2, #36	; 0x24
   21ad6:	18ba      	adds	r2, r7, r2
   21ad8:	0011      	movs	r1, r2
   21ada:	0018      	movs	r0, r3
   21adc:	4b70      	ldr	r3, [pc, #448]	; (21ca0 <usart_init+0x24c>)
   21ade:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   21ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21ae2:	b2db      	uxtb	r3, r3
   21ae4:	0018      	movs	r0, r3
   21ae6:	4b6f      	ldr	r3, [pc, #444]	; (21ca4 <usart_init+0x250>)
   21ae8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   21aea:	687b      	ldr	r3, [r7, #4]
   21aec:	222d      	movs	r2, #45	; 0x2d
   21aee:	5c9b      	ldrb	r3, [r3, r2]
   21af0:	2100      	movs	r1, #0
   21af2:	0018      	movs	r0, r3
   21af4:	4b6c      	ldr	r3, [pc, #432]	; (21ca8 <usart_init+0x254>)
   21af6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   21af8:	687b      	ldr	r3, [r7, #4]
   21afa:	7ada      	ldrb	r2, [r3, #11]
   21afc:	68fb      	ldr	r3, [r7, #12]
   21afe:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   21b00:	687b      	ldr	r3, [r7, #4]
   21b02:	2224      	movs	r2, #36	; 0x24
   21b04:	5c9a      	ldrb	r2, [r3, r2]
   21b06:	68fb      	ldr	r3, [r7, #12]
   21b08:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   21b0a:	687b      	ldr	r3, [r7, #4]
   21b0c:	2225      	movs	r2, #37	; 0x25
   21b0e:	5c9a      	ldrb	r2, [r3, r2]
   21b10:	68fb      	ldr	r3, [r7, #12]
   21b12:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   21b14:	687b      	ldr	r3, [r7, #4]
   21b16:	7eda      	ldrb	r2, [r3, #27]
   21b18:	68fb      	ldr	r3, [r7, #12]
   21b1a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   21b1c:	687b      	ldr	r3, [r7, #4]
   21b1e:	7f1a      	ldrb	r2, [r3, #28]
   21b20:	68fb      	ldr	r3, [r7, #12]
   21b22:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   21b24:	233b      	movs	r3, #59	; 0x3b
   21b26:	18fc      	adds	r4, r7, r3
   21b28:	687a      	ldr	r2, [r7, #4]
   21b2a:	68fb      	ldr	r3, [r7, #12]
   21b2c:	0011      	movs	r1, r2
   21b2e:	0018      	movs	r0, r3
   21b30:	4b5e      	ldr	r3, [pc, #376]	; (21cac <usart_init+0x258>)
   21b32:	4798      	blx	r3
   21b34:	0003      	movs	r3, r0
   21b36:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   21b38:	233b      	movs	r3, #59	; 0x3b
   21b3a:	18fb      	adds	r3, r7, r3
   21b3c:	781b      	ldrb	r3, [r3, #0]
   21b3e:	2b00      	cmp	r3, #0
   21b40:	d003      	beq.n	21b4a <usart_init+0xf6>
		return status_code;
   21b42:	233b      	movs	r3, #59	; 0x3b
   21b44:	18fb      	adds	r3, r7, r3
   21b46:	781b      	ldrb	r3, [r3, #0]
   21b48:	e09f      	b.n	21c8a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   21b4a:	2320      	movs	r3, #32
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	0018      	movs	r0, r3
   21b50:	4b57      	ldr	r3, [pc, #348]	; (21cb0 <usart_init+0x25c>)
   21b52:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   21b54:	2320      	movs	r3, #32
   21b56:	18fb      	adds	r3, r7, r3
   21b58:	2200      	movs	r2, #0
   21b5a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   21b5c:	2320      	movs	r3, #32
   21b5e:	18fb      	adds	r3, r7, r3
   21b60:	2200      	movs	r2, #0
   21b62:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   21b64:	687b      	ldr	r3, [r7, #4]
   21b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   21b68:	2310      	movs	r3, #16
   21b6a:	18fb      	adds	r3, r7, r3
   21b6c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   21b6e:	687b      	ldr	r3, [r7, #4]
   21b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   21b72:	2310      	movs	r3, #16
   21b74:	18fb      	adds	r3, r7, r3
   21b76:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   21b78:	687b      	ldr	r3, [r7, #4]
   21b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   21b7c:	2310      	movs	r3, #16
   21b7e:	18fb      	adds	r3, r7, r3
   21b80:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   21b82:	687b      	ldr	r3, [r7, #4]
   21b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   21b86:	2310      	movs	r3, #16
   21b88:	18fb      	adds	r3, r7, r3
   21b8a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   21b8c:	2347      	movs	r3, #71	; 0x47
   21b8e:	18fb      	adds	r3, r7, r3
   21b90:	2200      	movs	r2, #0
   21b92:	701a      	strb	r2, [r3, #0]
   21b94:	e02c      	b.n	21bf0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   21b96:	2347      	movs	r3, #71	; 0x47
   21b98:	18fb      	adds	r3, r7, r3
   21b9a:	781a      	ldrb	r2, [r3, #0]
   21b9c:	2310      	movs	r3, #16
   21b9e:	18fb      	adds	r3, r7, r3
   21ba0:	0092      	lsls	r2, r2, #2
   21ba2:	58d3      	ldr	r3, [r2, r3]
   21ba4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   21ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21ba8:	2b00      	cmp	r3, #0
   21baa:	d109      	bne.n	21bc0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   21bac:	2347      	movs	r3, #71	; 0x47
   21bae:	18fb      	adds	r3, r7, r3
   21bb0:	781a      	ldrb	r2, [r3, #0]
   21bb2:	68bb      	ldr	r3, [r7, #8]
   21bb4:	0011      	movs	r1, r2
   21bb6:	0018      	movs	r0, r3
   21bb8:	4b3e      	ldr	r3, [pc, #248]	; (21cb4 <usart_init+0x260>)
   21bba:	4798      	blx	r3
   21bbc:	0003      	movs	r3, r0
   21bbe:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   21bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21bc2:	3301      	adds	r3, #1
   21bc4:	d00d      	beq.n	21be2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   21bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21bc8:	b2da      	uxtb	r2, r3
   21bca:	2320      	movs	r3, #32
   21bcc:	18fb      	adds	r3, r7, r3
   21bce:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   21bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21bd2:	0c1b      	lsrs	r3, r3, #16
   21bd4:	b2db      	uxtb	r3, r3
   21bd6:	2220      	movs	r2, #32
   21bd8:	18ba      	adds	r2, r7, r2
   21bda:	0011      	movs	r1, r2
   21bdc:	0018      	movs	r0, r3
   21bde:	4b36      	ldr	r3, [pc, #216]	; (21cb8 <usart_init+0x264>)
   21be0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   21be2:	2347      	movs	r3, #71	; 0x47
   21be4:	18fb      	adds	r3, r7, r3
   21be6:	781a      	ldrb	r2, [r3, #0]
   21be8:	2347      	movs	r3, #71	; 0x47
   21bea:	18fb      	adds	r3, r7, r3
   21bec:	3201      	adds	r2, #1
   21bee:	701a      	strb	r2, [r3, #0]
   21bf0:	2347      	movs	r3, #71	; 0x47
   21bf2:	18fb      	adds	r3, r7, r3
   21bf4:	781b      	ldrb	r3, [r3, #0]
   21bf6:	2b03      	cmp	r3, #3
   21bf8:	d9cd      	bls.n	21b96 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21bfa:	2300      	movs	r3, #0
   21bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   21bfe:	e00a      	b.n	21c16 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   21c00:	68fa      	ldr	r2, [r7, #12]
   21c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21c04:	3302      	adds	r3, #2
   21c06:	009b      	lsls	r3, r3, #2
   21c08:	18d3      	adds	r3, r2, r3
   21c0a:	3304      	adds	r3, #4
   21c0c:	2200      	movs	r2, #0
   21c0e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21c12:	3301      	adds	r3, #1
   21c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   21c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21c18:	2b05      	cmp	r3, #5
   21c1a:	d9f1      	bls.n	21c00 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   21c1c:	68fb      	ldr	r3, [r7, #12]
   21c1e:	2200      	movs	r2, #0
   21c20:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   21c22:	68fb      	ldr	r3, [r7, #12]
   21c24:	2200      	movs	r2, #0
   21c26:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   21c28:	68fb      	ldr	r3, [r7, #12]
   21c2a:	2200      	movs	r2, #0
   21c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   21c2e:	68fb      	ldr	r3, [r7, #12]
   21c30:	2200      	movs	r2, #0
   21c32:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   21c34:	68fb      	ldr	r3, [r7, #12]
   21c36:	2230      	movs	r2, #48	; 0x30
   21c38:	2100      	movs	r1, #0
   21c3a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   21c3c:	68fb      	ldr	r3, [r7, #12]
   21c3e:	2231      	movs	r2, #49	; 0x31
   21c40:	2100      	movs	r1, #0
   21c42:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   21c44:	68fb      	ldr	r3, [r7, #12]
   21c46:	2232      	movs	r2, #50	; 0x32
   21c48:	2100      	movs	r1, #0
   21c4a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   21c4c:	68fb      	ldr	r3, [r7, #12]
   21c4e:	2233      	movs	r2, #51	; 0x33
   21c50:	2100      	movs	r1, #0
   21c52:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   21c54:	68fb      	ldr	r3, [r7, #12]
   21c56:	681b      	ldr	r3, [r3, #0]
   21c58:	2227      	movs	r2, #39	; 0x27
   21c5a:	18bc      	adds	r4, r7, r2
   21c5c:	0018      	movs	r0, r3
   21c5e:	4b0d      	ldr	r3, [pc, #52]	; (21c94 <usart_init+0x240>)
   21c60:	4798      	blx	r3
   21c62:	0003      	movs	r3, r0
   21c64:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   21c66:	4a15      	ldr	r2, [pc, #84]	; (21cbc <usart_init+0x268>)
   21c68:	2327      	movs	r3, #39	; 0x27
   21c6a:	18fb      	adds	r3, r7, r3
   21c6c:	781b      	ldrb	r3, [r3, #0]
   21c6e:	0011      	movs	r1, r2
   21c70:	0018      	movs	r0, r3
   21c72:	4b13      	ldr	r3, [pc, #76]	; (21cc0 <usart_init+0x26c>)
   21c74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   21c76:	2327      	movs	r3, #39	; 0x27
   21c78:	18fb      	adds	r3, r7, r3
   21c7a:	781a      	ldrb	r2, [r3, #0]
   21c7c:	4b11      	ldr	r3, [pc, #68]	; (21cc4 <usart_init+0x270>)
   21c7e:	0092      	lsls	r2, r2, #2
   21c80:	68f9      	ldr	r1, [r7, #12]
   21c82:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   21c84:	233b      	movs	r3, #59	; 0x3b
   21c86:	18fb      	adds	r3, r7, r3
   21c88:	781b      	ldrb	r3, [r3, #0]
}
   21c8a:	0018      	movs	r0, r3
   21c8c:	46bd      	mov	sp, r7
   21c8e:	b013      	add	sp, #76	; 0x4c
   21c90:	bd90      	pop	{r4, r7, pc}
   21c92:	46c0      	nop			; (mov r8, r8)
   21c94:	0001eb15 	.word	0x0001eb15
   21c98:	00021691 	.word	0x00021691
   21c9c:	00021679 	.word	0x00021679
   21ca0:	000249b5 	.word	0x000249b5
   21ca4:	000249f9 	.word	0x000249f9
   21ca8:	0001e8cd 	.word	0x0001e8cd
   21cac:	00021779 	.word	0x00021779
   21cb0:	000216ed 	.word	0x000216ed
   21cb4:	0001e959 	.word	0x0001e959
   21cb8:	00024ca1 	.word	0x00024ca1
   21cbc:	00021e9d 	.word	0x00021e9d
   21cc0:	000221f1 	.word	0x000221f1
   21cc4:	20000968 	.word	0x20000968

00021cc8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   21cc8:	b580      	push	{r7, lr}
   21cca:	b084      	sub	sp, #16
   21ccc:	af00      	add	r7, sp, #0
   21cce:	6078      	str	r0, [r7, #4]
   21cd0:	000a      	movs	r2, r1
   21cd2:	1cbb      	adds	r3, r7, #2
   21cd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21cd6:	687b      	ldr	r3, [r7, #4]
   21cd8:	681b      	ldr	r3, [r3, #0]
   21cda:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21cdc:	687b      	ldr	r3, [r7, #4]
   21cde:	79db      	ldrb	r3, [r3, #7]
   21ce0:	2201      	movs	r2, #1
   21ce2:	4053      	eors	r3, r2
   21ce4:	b2db      	uxtb	r3, r3
   21ce6:	2b00      	cmp	r3, #0
   21ce8:	d001      	beq.n	21cee <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   21cea:	231c      	movs	r3, #28
   21cec:	e017      	b.n	21d1e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   21cee:	687b      	ldr	r3, [r7, #4]
   21cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21cf2:	b29b      	uxth	r3, r3
   21cf4:	2b00      	cmp	r3, #0
   21cf6:	d001      	beq.n	21cfc <usart_write_wait+0x34>
		return STATUS_BUSY;
   21cf8:	2305      	movs	r3, #5
   21cfa:	e010      	b.n	21d1e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21cfc:	687b      	ldr	r3, [r7, #4]
   21cfe:	0018      	movs	r0, r3
   21d00:	4b09      	ldr	r3, [pc, #36]	; (21d28 <usart_write_wait+0x60>)
   21d02:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   21d04:	68fb      	ldr	r3, [r7, #12]
   21d06:	1cba      	adds	r2, r7, #2
   21d08:	8812      	ldrh	r2, [r2, #0]
   21d0a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   21d0c:	46c0      	nop			; (mov r8, r8)
   21d0e:	68fb      	ldr	r3, [r7, #12]
   21d10:	7e1b      	ldrb	r3, [r3, #24]
   21d12:	b2db      	uxtb	r3, r3
   21d14:	001a      	movs	r2, r3
   21d16:	2302      	movs	r3, #2
   21d18:	4013      	ands	r3, r2
   21d1a:	d0f8      	beq.n	21d0e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   21d1c:	2300      	movs	r3, #0
}
   21d1e:	0018      	movs	r0, r3
   21d20:	46bd      	mov	sp, r7
   21d22:	b004      	add	sp, #16
   21d24:	bd80      	pop	{r7, pc}
   21d26:	46c0      	nop			; (mov r8, r8)
   21d28:	00021755 	.word	0x00021755

00021d2c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   21d2c:	b580      	push	{r7, lr}
   21d2e:	b08a      	sub	sp, #40	; 0x28
   21d30:	af00      	add	r7, sp, #0
   21d32:	60f8      	str	r0, [r7, #12]
   21d34:	60b9      	str	r1, [r7, #8]
   21d36:	1dbb      	adds	r3, r7, #6
   21d38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   21d3a:	1dbb      	adds	r3, r7, #6
   21d3c:	881b      	ldrh	r3, [r3, #0]
   21d3e:	2b00      	cmp	r3, #0
   21d40:	d101      	bne.n	21d46 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   21d42:	2317      	movs	r3, #23
   21d44:	e07e      	b.n	21e44 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21d46:	68fb      	ldr	r3, [r7, #12]
   21d48:	79db      	ldrb	r3, [r3, #7]
   21d4a:	2201      	movs	r2, #1
   21d4c:	4053      	eors	r3, r2
   21d4e:	b2db      	uxtb	r3, r3
   21d50:	2b00      	cmp	r3, #0
   21d52:	d001      	beq.n	21d58 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   21d54:	231c      	movs	r3, #28
   21d56:	e075      	b.n	21e44 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21d58:	68fb      	ldr	r3, [r7, #12]
   21d5a:	681b      	ldr	r3, [r3, #0]
   21d5c:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21d5e:	68fb      	ldr	r3, [r7, #12]
   21d60:	0018      	movs	r0, r3
   21d62:	4b3a      	ldr	r3, [pc, #232]	; (21e4c <usart_write_buffer_wait+0x120>)
   21d64:	4798      	blx	r3

	uint16_t tx_pos = 0;
   21d66:	2326      	movs	r3, #38	; 0x26
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	2200      	movs	r2, #0
   21d6c:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   21d6e:	e048      	b.n	21e02 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21d70:	2300      	movs	r3, #0
   21d72:	623b      	str	r3, [r7, #32]
   21d74:	e00f      	b.n	21d96 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   21d76:	697b      	ldr	r3, [r7, #20]
   21d78:	7e1b      	ldrb	r3, [r3, #24]
   21d7a:	b2db      	uxtb	r3, r3
   21d7c:	001a      	movs	r2, r3
   21d7e:	2301      	movs	r3, #1
   21d80:	4013      	ands	r3, r2
   21d82:	d10d      	bne.n	21da0 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   21d84:	6a3b      	ldr	r3, [r7, #32]
   21d86:	4a32      	ldr	r2, [pc, #200]	; (21e50 <usart_write_buffer_wait+0x124>)
   21d88:	4293      	cmp	r3, r2
   21d8a:	d101      	bne.n	21d90 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   21d8c:	2312      	movs	r3, #18
   21d8e:	e059      	b.n	21e44 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21d90:	6a3b      	ldr	r3, [r7, #32]
   21d92:	3301      	adds	r3, #1
   21d94:	623b      	str	r3, [r7, #32]
   21d96:	6a3b      	ldr	r3, [r7, #32]
   21d98:	4a2d      	ldr	r2, [pc, #180]	; (21e50 <usart_write_buffer_wait+0x124>)
   21d9a:	4293      	cmp	r3, r2
   21d9c:	d9eb      	bls.n	21d76 <usart_write_buffer_wait+0x4a>
   21d9e:	e000      	b.n	21da2 <usart_write_buffer_wait+0x76>
				break;
   21da0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   21da2:	2326      	movs	r3, #38	; 0x26
   21da4:	18fb      	adds	r3, r7, r3
   21da6:	881b      	ldrh	r3, [r3, #0]
   21da8:	2226      	movs	r2, #38	; 0x26
   21daa:	18ba      	adds	r2, r7, r2
   21dac:	1c59      	adds	r1, r3, #1
   21dae:	8011      	strh	r1, [r2, #0]
   21db0:	001a      	movs	r2, r3
   21db2:	68bb      	ldr	r3, [r7, #8]
   21db4:	189b      	adds	r3, r3, r2
   21db6:	781a      	ldrb	r2, [r3, #0]
   21db8:	231e      	movs	r3, #30
   21dba:	18fb      	adds	r3, r7, r3
   21dbc:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21dbe:	68fb      	ldr	r3, [r7, #12]
   21dc0:	795b      	ldrb	r3, [r3, #5]
   21dc2:	2b01      	cmp	r3, #1
   21dc4:	d115      	bne.n	21df2 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   21dc6:	2326      	movs	r3, #38	; 0x26
   21dc8:	18fb      	adds	r3, r7, r3
   21dca:	881b      	ldrh	r3, [r3, #0]
   21dcc:	2226      	movs	r2, #38	; 0x26
   21dce:	18ba      	adds	r2, r7, r2
   21dd0:	1c59      	adds	r1, r3, #1
   21dd2:	8011      	strh	r1, [r2, #0]
   21dd4:	001a      	movs	r2, r3
   21dd6:	68bb      	ldr	r3, [r7, #8]
   21dd8:	189b      	adds	r3, r3, r2
   21dda:	781b      	ldrb	r3, [r3, #0]
   21ddc:	021b      	lsls	r3, r3, #8
   21dde:	b21a      	sxth	r2, r3
   21de0:	231e      	movs	r3, #30
   21de2:	18fb      	adds	r3, r7, r3
   21de4:	2100      	movs	r1, #0
   21de6:	5e5b      	ldrsh	r3, [r3, r1]
   21de8:	4313      	orrs	r3, r2
   21dea:	b21a      	sxth	r2, r3
   21dec:	231e      	movs	r3, #30
   21dee:	18fb      	adds	r3, r7, r3
   21df0:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   21df2:	231e      	movs	r3, #30
   21df4:	18fb      	adds	r3, r7, r3
   21df6:	881a      	ldrh	r2, [r3, #0]
   21df8:	68fb      	ldr	r3, [r7, #12]
   21dfa:	0011      	movs	r1, r2
   21dfc:	0018      	movs	r0, r3
   21dfe:	4b15      	ldr	r3, [pc, #84]	; (21e54 <usart_write_buffer_wait+0x128>)
   21e00:	4798      	blx	r3
	while (length--) {
   21e02:	1dbb      	adds	r3, r7, #6
   21e04:	881b      	ldrh	r3, [r3, #0]
   21e06:	1dba      	adds	r2, r7, #6
   21e08:	1e59      	subs	r1, r3, #1
   21e0a:	8011      	strh	r1, [r2, #0]
   21e0c:	2b00      	cmp	r3, #0
   21e0e:	d1af      	bne.n	21d70 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21e10:	2300      	movs	r3, #0
   21e12:	61bb      	str	r3, [r7, #24]
   21e14:	e00f      	b.n	21e36 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   21e16:	697b      	ldr	r3, [r7, #20]
   21e18:	7e1b      	ldrb	r3, [r3, #24]
   21e1a:	b2db      	uxtb	r3, r3
   21e1c:	001a      	movs	r2, r3
   21e1e:	2302      	movs	r3, #2
   21e20:	4013      	ands	r3, r2
   21e22:	d10d      	bne.n	21e40 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   21e24:	69bb      	ldr	r3, [r7, #24]
   21e26:	4a0a      	ldr	r2, [pc, #40]	; (21e50 <usart_write_buffer_wait+0x124>)
   21e28:	4293      	cmp	r3, r2
   21e2a:	d101      	bne.n	21e30 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   21e2c:	2312      	movs	r3, #18
   21e2e:	e009      	b.n	21e44 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21e30:	69bb      	ldr	r3, [r7, #24]
   21e32:	3301      	adds	r3, #1
   21e34:	61bb      	str	r3, [r7, #24]
   21e36:	69bb      	ldr	r3, [r7, #24]
   21e38:	4a05      	ldr	r2, [pc, #20]	; (21e50 <usart_write_buffer_wait+0x124>)
   21e3a:	4293      	cmp	r3, r2
   21e3c:	d9eb      	bls.n	21e16 <usart_write_buffer_wait+0xea>
   21e3e:	e000      	b.n	21e42 <usart_write_buffer_wait+0x116>
			break;
   21e40:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   21e42:	2300      	movs	r3, #0
}
   21e44:	0018      	movs	r0, r3
   21e46:	46bd      	mov	sp, r7
   21e48:	b00a      	add	sp, #40	; 0x28
   21e4a:	bd80      	pop	{r7, pc}
   21e4c:	00021755 	.word	0x00021755
   21e50:	0000ffff 	.word	0x0000ffff
   21e54:	00021cc9 	.word	0x00021cc9

00021e58 <usart_is_syncing>:
{
   21e58:	b580      	push	{r7, lr}
   21e5a:	b084      	sub	sp, #16
   21e5c:	af00      	add	r7, sp, #0
   21e5e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21e60:	687b      	ldr	r3, [r7, #4]
   21e62:	681b      	ldr	r3, [r3, #0]
   21e64:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21e66:	68fb      	ldr	r3, [r7, #12]
   21e68:	69db      	ldr	r3, [r3, #28]
   21e6a:	1e5a      	subs	r2, r3, #1
   21e6c:	4193      	sbcs	r3, r2
   21e6e:	b2db      	uxtb	r3, r3
}
   21e70:	0018      	movs	r0, r3
   21e72:	46bd      	mov	sp, r7
   21e74:	b004      	add	sp, #16
   21e76:	bd80      	pop	{r7, pc}

00021e78 <_usart_wait_for_sync>:
{
   21e78:	b580      	push	{r7, lr}
   21e7a:	b082      	sub	sp, #8
   21e7c:	af00      	add	r7, sp, #0
   21e7e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21e80:	46c0      	nop			; (mov r8, r8)
   21e82:	687b      	ldr	r3, [r7, #4]
   21e84:	0018      	movs	r0, r3
   21e86:	4b04      	ldr	r3, [pc, #16]	; (21e98 <_usart_wait_for_sync+0x20>)
   21e88:	4798      	blx	r3
   21e8a:	1e03      	subs	r3, r0, #0
   21e8c:	d1f9      	bne.n	21e82 <_usart_wait_for_sync+0xa>
}
   21e8e:	46c0      	nop			; (mov r8, r8)
   21e90:	46bd      	mov	sp, r7
   21e92:	b002      	add	sp, #8
   21e94:	bd80      	pop	{r7, pc}
   21e96:	46c0      	nop			; (mov r8, r8)
   21e98:	00021e59 	.word	0x00021e59

00021e9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   21e9c:	b580      	push	{r7, lr}
   21e9e:	b088      	sub	sp, #32
   21ea0:	af00      	add	r7, sp, #0
   21ea2:	0002      	movs	r2, r0
   21ea4:	1dfb      	adds	r3, r7, #7
   21ea6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   21ea8:	1dfb      	adds	r3, r7, #7
   21eaa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   21eac:	4ba3      	ldr	r3, [pc, #652]	; (2213c <_usart_interrupt_handler+0x2a0>)
   21eae:	0092      	lsls	r2, r2, #2
   21eb0:	58d3      	ldr	r3, [r2, r3]
   21eb2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   21eb4:	69bb      	ldr	r3, [r7, #24]
   21eb6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   21eb8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   21eba:	69bb      	ldr	r3, [r7, #24]
   21ebc:	0018      	movs	r0, r3
   21ebe:	4ba0      	ldr	r3, [pc, #640]	; (22140 <_usart_interrupt_handler+0x2a4>)
   21ec0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   21ec2:	697b      	ldr	r3, [r7, #20]
   21ec4:	7e1b      	ldrb	r3, [r3, #24]
   21ec6:	b2da      	uxtb	r2, r3
   21ec8:	2312      	movs	r3, #18
   21eca:	18fb      	adds	r3, r7, r3
   21ecc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   21ece:	697b      	ldr	r3, [r7, #20]
   21ed0:	7d9b      	ldrb	r3, [r3, #22]
   21ed2:	b2db      	uxtb	r3, r3
   21ed4:	b29a      	uxth	r2, r3
   21ed6:	2312      	movs	r3, #18
   21ed8:	18fb      	adds	r3, r7, r3
   21eda:	2112      	movs	r1, #18
   21edc:	1879      	adds	r1, r7, r1
   21ede:	8809      	ldrh	r1, [r1, #0]
   21ee0:	400a      	ands	r2, r1
   21ee2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   21ee4:	69bb      	ldr	r3, [r7, #24]
   21ee6:	2230      	movs	r2, #48	; 0x30
   21ee8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   21eea:	69ba      	ldr	r2, [r7, #24]
   21eec:	2131      	movs	r1, #49	; 0x31
   21eee:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   21ef0:	4013      	ands	r3, r2
   21ef2:	b2da      	uxtb	r2, r3
   21ef4:	2310      	movs	r3, #16
   21ef6:	18fb      	adds	r3, r7, r3
   21ef8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   21efa:	2312      	movs	r3, #18
   21efc:	18fb      	adds	r3, r7, r3
   21efe:	881b      	ldrh	r3, [r3, #0]
   21f00:	2201      	movs	r2, #1
   21f02:	4013      	ands	r3, r2
   21f04:	d044      	beq.n	21f90 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   21f06:	69bb      	ldr	r3, [r7, #24]
   21f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21f0a:	b29b      	uxth	r3, r3
   21f0c:	2b00      	cmp	r3, #0
   21f0e:	d03c      	beq.n	21f8a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   21f10:	69bb      	ldr	r3, [r7, #24]
   21f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f14:	781b      	ldrb	r3, [r3, #0]
   21f16:	b2da      	uxtb	r2, r3
   21f18:	231c      	movs	r3, #28
   21f1a:	18fb      	adds	r3, r7, r3
   21f1c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   21f1e:	69bb      	ldr	r3, [r7, #24]
   21f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f22:	1c5a      	adds	r2, r3, #1
   21f24:	69bb      	ldr	r3, [r7, #24]
   21f26:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21f28:	69bb      	ldr	r3, [r7, #24]
   21f2a:	795b      	ldrb	r3, [r3, #5]
   21f2c:	2b01      	cmp	r3, #1
   21f2e:	d113      	bne.n	21f58 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   21f30:	69bb      	ldr	r3, [r7, #24]
   21f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f34:	781b      	ldrb	r3, [r3, #0]
   21f36:	b2db      	uxtb	r3, r3
   21f38:	021b      	lsls	r3, r3, #8
   21f3a:	b21a      	sxth	r2, r3
   21f3c:	231c      	movs	r3, #28
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	2100      	movs	r1, #0
   21f42:	5e5b      	ldrsh	r3, [r3, r1]
   21f44:	4313      	orrs	r3, r2
   21f46:	b21a      	sxth	r2, r3
   21f48:	231c      	movs	r3, #28
   21f4a:	18fb      	adds	r3, r7, r3
   21f4c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   21f4e:	69bb      	ldr	r3, [r7, #24]
   21f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f52:	1c5a      	adds	r2, r3, #1
   21f54:	69bb      	ldr	r3, [r7, #24]
   21f56:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   21f58:	231c      	movs	r3, #28
   21f5a:	18fb      	adds	r3, r7, r3
   21f5c:	881b      	ldrh	r3, [r3, #0]
   21f5e:	05db      	lsls	r3, r3, #23
   21f60:	0ddb      	lsrs	r3, r3, #23
   21f62:	b29a      	uxth	r2, r3
   21f64:	697b      	ldr	r3, [r7, #20]
   21f66:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   21f68:	69bb      	ldr	r3, [r7, #24]
   21f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21f6c:	b29b      	uxth	r3, r3
   21f6e:	3b01      	subs	r3, #1
   21f70:	b29b      	uxth	r3, r3
   21f72:	69ba      	ldr	r2, [r7, #24]
   21f74:	1c19      	adds	r1, r3, #0
   21f76:	85d1      	strh	r1, [r2, #46]	; 0x2e
   21f78:	2b00      	cmp	r3, #0
   21f7a:	d109      	bne.n	21f90 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21f7c:	697b      	ldr	r3, [r7, #20]
   21f7e:	2201      	movs	r2, #1
   21f80:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   21f82:	697b      	ldr	r3, [r7, #20]
   21f84:	2202      	movs	r2, #2
   21f86:	759a      	strb	r2, [r3, #22]
   21f88:	e002      	b.n	21f90 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21f8a:	697b      	ldr	r3, [r7, #20]
   21f8c:	2201      	movs	r2, #1
   21f8e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   21f90:	2312      	movs	r3, #18
   21f92:	18fb      	adds	r3, r7, r3
   21f94:	881b      	ldrh	r3, [r3, #0]
   21f96:	2202      	movs	r2, #2
   21f98:	4013      	ands	r3, r2
   21f9a:	d011      	beq.n	21fc0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   21f9c:	697b      	ldr	r3, [r7, #20]
   21f9e:	2202      	movs	r2, #2
   21fa0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   21fa2:	69bb      	ldr	r3, [r7, #24]
   21fa4:	2233      	movs	r2, #51	; 0x33
   21fa6:	2100      	movs	r1, #0
   21fa8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   21faa:	2310      	movs	r3, #16
   21fac:	18fb      	adds	r3, r7, r3
   21fae:	881b      	ldrh	r3, [r3, #0]
   21fb0:	2201      	movs	r2, #1
   21fb2:	4013      	ands	r3, r2
   21fb4:	d004      	beq.n	21fc0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   21fb6:	69bb      	ldr	r3, [r7, #24]
   21fb8:	68db      	ldr	r3, [r3, #12]
   21fba:	69ba      	ldr	r2, [r7, #24]
   21fbc:	0010      	movs	r0, r2
   21fbe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   21fc0:	2312      	movs	r3, #18
   21fc2:	18fb      	adds	r3, r7, r3
   21fc4:	881b      	ldrh	r3, [r3, #0]
   21fc6:	2204      	movs	r2, #4
   21fc8:	4013      	ands	r3, r2
   21fca:	d100      	bne.n	21fce <_usart_interrupt_handler+0x132>
   21fcc:	e0bd      	b.n	2214a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   21fce:	69bb      	ldr	r3, [r7, #24]
   21fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   21fd2:	b29b      	uxth	r3, r3
   21fd4:	2b00      	cmp	r3, #0
   21fd6:	d100      	bne.n	21fda <_usart_interrupt_handler+0x13e>
   21fd8:	e0b4      	b.n	22144 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   21fda:	697b      	ldr	r3, [r7, #20]
   21fdc:	8b5b      	ldrh	r3, [r3, #26]
   21fde:	b29b      	uxth	r3, r3
   21fe0:	b2da      	uxtb	r2, r3
   21fe2:	231f      	movs	r3, #31
   21fe4:	18fb      	adds	r3, r7, r3
   21fe6:	213f      	movs	r1, #63	; 0x3f
   21fe8:	400a      	ands	r2, r1
   21fea:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   21fec:	231f      	movs	r3, #31
   21fee:	18fb      	adds	r3, r7, r3
   21ff0:	781b      	ldrb	r3, [r3, #0]
   21ff2:	2208      	movs	r2, #8
   21ff4:	4013      	ands	r3, r2
   21ff6:	d007      	beq.n	22008 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   21ff8:	231f      	movs	r3, #31
   21ffa:	18fb      	adds	r3, r7, r3
   21ffc:	221f      	movs	r2, #31
   21ffe:	18ba      	adds	r2, r7, r2
   22000:	7812      	ldrb	r2, [r2, #0]
   22002:	2108      	movs	r1, #8
   22004:	438a      	bics	r2, r1
   22006:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   22008:	231f      	movs	r3, #31
   2200a:	18fb      	adds	r3, r7, r3
   2200c:	781b      	ldrb	r3, [r3, #0]
   2200e:	2b00      	cmp	r3, #0
   22010:	d050      	beq.n	220b4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   22012:	231f      	movs	r3, #31
   22014:	18fb      	adds	r3, r7, r3
   22016:	781b      	ldrb	r3, [r3, #0]
   22018:	2202      	movs	r2, #2
   2201a:	4013      	ands	r3, r2
   2201c:	d007      	beq.n	2202e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2201e:	69bb      	ldr	r3, [r7, #24]
   22020:	2232      	movs	r2, #50	; 0x32
   22022:	211a      	movs	r1, #26
   22024:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   22026:	697b      	ldr	r3, [r7, #20]
   22028:	2202      	movs	r2, #2
   2202a:	835a      	strh	r2, [r3, #26]
   2202c:	e036      	b.n	2209c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2202e:	231f      	movs	r3, #31
   22030:	18fb      	adds	r3, r7, r3
   22032:	781b      	ldrb	r3, [r3, #0]
   22034:	2204      	movs	r2, #4
   22036:	4013      	ands	r3, r2
   22038:	d007      	beq.n	2204a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2203a:	69bb      	ldr	r3, [r7, #24]
   2203c:	2232      	movs	r2, #50	; 0x32
   2203e:	211e      	movs	r1, #30
   22040:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   22042:	697b      	ldr	r3, [r7, #20]
   22044:	2204      	movs	r2, #4
   22046:	835a      	strh	r2, [r3, #26]
   22048:	e028      	b.n	2209c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2204a:	231f      	movs	r3, #31
   2204c:	18fb      	adds	r3, r7, r3
   2204e:	781b      	ldrb	r3, [r3, #0]
   22050:	2201      	movs	r2, #1
   22052:	4013      	ands	r3, r2
   22054:	d007      	beq.n	22066 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   22056:	69bb      	ldr	r3, [r7, #24]
   22058:	2232      	movs	r2, #50	; 0x32
   2205a:	2113      	movs	r1, #19
   2205c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2205e:	697b      	ldr	r3, [r7, #20]
   22060:	2201      	movs	r2, #1
   22062:	835a      	strh	r2, [r3, #26]
   22064:	e01a      	b.n	2209c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   22066:	231f      	movs	r3, #31
   22068:	18fb      	adds	r3, r7, r3
   2206a:	781b      	ldrb	r3, [r3, #0]
   2206c:	2210      	movs	r2, #16
   2206e:	4013      	ands	r3, r2
   22070:	d007      	beq.n	22082 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   22072:	69bb      	ldr	r3, [r7, #24]
   22074:	2232      	movs	r2, #50	; 0x32
   22076:	2142      	movs	r1, #66	; 0x42
   22078:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2207a:	697b      	ldr	r3, [r7, #20]
   2207c:	2210      	movs	r2, #16
   2207e:	835a      	strh	r2, [r3, #26]
   22080:	e00c      	b.n	2209c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22082:	231f      	movs	r3, #31
   22084:	18fb      	adds	r3, r7, r3
   22086:	781b      	ldrb	r3, [r3, #0]
   22088:	2220      	movs	r2, #32
   2208a:	4013      	ands	r3, r2
   2208c:	d006      	beq.n	2209c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2208e:	69bb      	ldr	r3, [r7, #24]
   22090:	2232      	movs	r2, #50	; 0x32
   22092:	2141      	movs	r1, #65	; 0x41
   22094:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22096:	697b      	ldr	r3, [r7, #20]
   22098:	2220      	movs	r2, #32
   2209a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2209c:	2310      	movs	r3, #16
   2209e:	18fb      	adds	r3, r7, r3
   220a0:	881b      	ldrh	r3, [r3, #0]
   220a2:	2204      	movs	r2, #4
   220a4:	4013      	ands	r3, r2
				if (callback_status
   220a6:	d050      	beq.n	2214a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   220a8:	69bb      	ldr	r3, [r7, #24]
   220aa:	695b      	ldr	r3, [r3, #20]
   220ac:	69ba      	ldr	r2, [r7, #24]
   220ae:	0010      	movs	r0, r2
   220b0:	4798      	blx	r3
   220b2:	e04a      	b.n	2214a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   220b4:	697b      	ldr	r3, [r7, #20]
   220b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   220b8:	b29a      	uxth	r2, r3
   220ba:	230e      	movs	r3, #14
   220bc:	18fb      	adds	r3, r7, r3
   220be:	05d2      	lsls	r2, r2, #23
   220c0:	0dd2      	lsrs	r2, r2, #23
   220c2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   220c4:	69bb      	ldr	r3, [r7, #24]
   220c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   220c8:	220e      	movs	r2, #14
   220ca:	18ba      	adds	r2, r7, r2
   220cc:	8812      	ldrh	r2, [r2, #0]
   220ce:	b2d2      	uxtb	r2, r2
   220d0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   220d2:	69bb      	ldr	r3, [r7, #24]
   220d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   220d6:	1c5a      	adds	r2, r3, #1
   220d8:	69bb      	ldr	r3, [r7, #24]
   220da:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   220dc:	69bb      	ldr	r3, [r7, #24]
   220de:	795b      	ldrb	r3, [r3, #5]
   220e0:	2b01      	cmp	r3, #1
   220e2:	d10d      	bne.n	22100 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   220e4:	69bb      	ldr	r3, [r7, #24]
   220e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   220e8:	220e      	movs	r2, #14
   220ea:	18ba      	adds	r2, r7, r2
   220ec:	8812      	ldrh	r2, [r2, #0]
   220ee:	0a12      	lsrs	r2, r2, #8
   220f0:	b292      	uxth	r2, r2
   220f2:	b2d2      	uxtb	r2, r2
   220f4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   220f6:	69bb      	ldr	r3, [r7, #24]
   220f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   220fa:	1c5a      	adds	r2, r3, #1
   220fc:	69bb      	ldr	r3, [r7, #24]
   220fe:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22100:	69bb      	ldr	r3, [r7, #24]
   22102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22104:	b29b      	uxth	r3, r3
   22106:	3b01      	subs	r3, #1
   22108:	b29b      	uxth	r3, r3
   2210a:	69ba      	ldr	r2, [r7, #24]
   2210c:	1c19      	adds	r1, r3, #0
   2210e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22110:	2b00      	cmp	r3, #0
   22112:	d11a      	bne.n	2214a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22114:	697b      	ldr	r3, [r7, #20]
   22116:	2204      	movs	r2, #4
   22118:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2211a:	69bb      	ldr	r3, [r7, #24]
   2211c:	2232      	movs	r2, #50	; 0x32
   2211e:	2100      	movs	r1, #0
   22120:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   22122:	2310      	movs	r3, #16
   22124:	18fb      	adds	r3, r7, r3
   22126:	881b      	ldrh	r3, [r3, #0]
   22128:	2202      	movs	r2, #2
   2212a:	4013      	ands	r3, r2
					if (callback_status
   2212c:	d00d      	beq.n	2214a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2212e:	69bb      	ldr	r3, [r7, #24]
   22130:	691b      	ldr	r3, [r3, #16]
   22132:	69ba      	ldr	r2, [r7, #24]
   22134:	0010      	movs	r0, r2
   22136:	4798      	blx	r3
   22138:	e007      	b.n	2214a <_usart_interrupt_handler+0x2ae>
   2213a:	46c0      	nop			; (mov r8, r8)
   2213c:	20000968 	.word	0x20000968
   22140:	00021e79 	.word	0x00021e79
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22144:	697b      	ldr	r3, [r7, #20]
   22146:	2204      	movs	r2, #4
   22148:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2214a:	2312      	movs	r3, #18
   2214c:	18fb      	adds	r3, r7, r3
   2214e:	881b      	ldrh	r3, [r3, #0]
   22150:	2210      	movs	r2, #16
   22152:	4013      	ands	r3, r2
   22154:	d010      	beq.n	22178 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   22156:	697b      	ldr	r3, [r7, #20]
   22158:	2210      	movs	r2, #16
   2215a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2215c:	697b      	ldr	r3, [r7, #20]
   2215e:	2210      	movs	r2, #16
   22160:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   22162:	2310      	movs	r3, #16
   22164:	18fb      	adds	r3, r7, r3
   22166:	881b      	ldrh	r3, [r3, #0]
   22168:	2210      	movs	r2, #16
   2216a:	4013      	ands	r3, r2
   2216c:	d004      	beq.n	22178 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2216e:	69bb      	ldr	r3, [r7, #24]
   22170:	69db      	ldr	r3, [r3, #28]
   22172:	69ba      	ldr	r2, [r7, #24]
   22174:	0010      	movs	r0, r2
   22176:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   22178:	2312      	movs	r3, #18
   2217a:	18fb      	adds	r3, r7, r3
   2217c:	881b      	ldrh	r3, [r3, #0]
   2217e:	2220      	movs	r2, #32
   22180:	4013      	ands	r3, r2
   22182:	d010      	beq.n	221a6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22184:	697b      	ldr	r3, [r7, #20]
   22186:	2220      	movs	r2, #32
   22188:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2218a:	697b      	ldr	r3, [r7, #20]
   2218c:	2220      	movs	r2, #32
   2218e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22190:	2310      	movs	r3, #16
   22192:	18fb      	adds	r3, r7, r3
   22194:	881b      	ldrh	r3, [r3, #0]
   22196:	2208      	movs	r2, #8
   22198:	4013      	ands	r3, r2
   2219a:	d004      	beq.n	221a6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2219c:	69bb      	ldr	r3, [r7, #24]
   2219e:	699b      	ldr	r3, [r3, #24]
   221a0:	69ba      	ldr	r2, [r7, #24]
   221a2:	0010      	movs	r0, r2
   221a4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   221a6:	2312      	movs	r3, #18
   221a8:	18fb      	adds	r3, r7, r3
   221aa:	881b      	ldrh	r3, [r3, #0]
   221ac:	2208      	movs	r2, #8
   221ae:	4013      	ands	r3, r2
   221b0:	d010      	beq.n	221d4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   221b2:	697b      	ldr	r3, [r7, #20]
   221b4:	2208      	movs	r2, #8
   221b6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   221b8:	697b      	ldr	r3, [r7, #20]
   221ba:	2208      	movs	r2, #8
   221bc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   221be:	2310      	movs	r3, #16
   221c0:	18fb      	adds	r3, r7, r3
   221c2:	881b      	ldrh	r3, [r3, #0]
   221c4:	2220      	movs	r2, #32
   221c6:	4013      	ands	r3, r2
   221c8:	d004      	beq.n	221d4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   221ca:	69bb      	ldr	r3, [r7, #24]
   221cc:	6a1b      	ldr	r3, [r3, #32]
   221ce:	69ba      	ldr	r2, [r7, #24]
   221d0:	0010      	movs	r0, r2
   221d2:	4798      	blx	r3
		}
	}
#endif
}
   221d4:	46c0      	nop			; (mov r8, r8)
   221d6:	46bd      	mov	sp, r7
   221d8:	b008      	add	sp, #32
   221da:	bd80      	pop	{r7, pc}

000221dc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   221dc:	b580      	push	{r7, lr}
   221de:	b082      	sub	sp, #8
   221e0:	af00      	add	r7, sp, #0
   221e2:	0002      	movs	r2, r0
   221e4:	1dfb      	adds	r3, r7, #7
   221e6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   221e8:	46c0      	nop			; (mov r8, r8)
   221ea:	46bd      	mov	sp, r7
   221ec:	b002      	add	sp, #8
   221ee:	bd80      	pop	{r7, pc}

000221f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   221f0:	b580      	push	{r7, lr}
   221f2:	b084      	sub	sp, #16
   221f4:	af00      	add	r7, sp, #0
   221f6:	0002      	movs	r2, r0
   221f8:	6039      	str	r1, [r7, #0]
   221fa:	1dfb      	adds	r3, r7, #7
   221fc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   221fe:	4b13      	ldr	r3, [pc, #76]	; (2224c <_sercom_set_handler+0x5c>)
   22200:	781b      	ldrb	r3, [r3, #0]
   22202:	2201      	movs	r2, #1
   22204:	4053      	eors	r3, r2
   22206:	b2db      	uxtb	r3, r3
   22208:	2b00      	cmp	r3, #0
   2220a:	d015      	beq.n	22238 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2220c:	2300      	movs	r3, #0
   2220e:	60fb      	str	r3, [r7, #12]
   22210:	e00c      	b.n	2222c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22212:	4b0f      	ldr	r3, [pc, #60]	; (22250 <_sercom_set_handler+0x60>)
   22214:	68fa      	ldr	r2, [r7, #12]
   22216:	0092      	lsls	r2, r2, #2
   22218:	490e      	ldr	r1, [pc, #56]	; (22254 <_sercom_set_handler+0x64>)
   2221a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2221c:	4b0e      	ldr	r3, [pc, #56]	; (22258 <_sercom_set_handler+0x68>)
   2221e:	68fa      	ldr	r2, [r7, #12]
   22220:	0092      	lsls	r2, r2, #2
   22222:	2100      	movs	r1, #0
   22224:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   22226:	68fb      	ldr	r3, [r7, #12]
   22228:	3301      	adds	r3, #1
   2222a:	60fb      	str	r3, [r7, #12]
   2222c:	68fb      	ldr	r3, [r7, #12]
   2222e:	2b05      	cmp	r3, #5
   22230:	d9ef      	bls.n	22212 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   22232:	4b06      	ldr	r3, [pc, #24]	; (2224c <_sercom_set_handler+0x5c>)
   22234:	2201      	movs	r2, #1
   22236:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   22238:	1dfb      	adds	r3, r7, #7
   2223a:	781a      	ldrb	r2, [r3, #0]
   2223c:	4b04      	ldr	r3, [pc, #16]	; (22250 <_sercom_set_handler+0x60>)
   2223e:	0092      	lsls	r2, r2, #2
   22240:	6839      	ldr	r1, [r7, #0]
   22242:	50d1      	str	r1, [r2, r3]
}
   22244:	46c0      	nop			; (mov r8, r8)
   22246:	46bd      	mov	sp, r7
   22248:	b004      	add	sp, #16
   2224a:	bd80      	pop	{r7, pc}
   2224c:	200003f8 	.word	0x200003f8
   22250:	200003fc 	.word	0x200003fc
   22254:	000221dd 	.word	0x000221dd
   22258:	20000968 	.word	0x20000968

0002225c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2225c:	b590      	push	{r4, r7, lr}
   2225e:	b085      	sub	sp, #20
   22260:	af00      	add	r7, sp, #0
   22262:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   22264:	2308      	movs	r3, #8
   22266:	18fb      	adds	r3, r7, r3
   22268:	4a0b      	ldr	r2, [pc, #44]	; (22298 <_sercom_get_interrupt_vector+0x3c>)
   2226a:	6811      	ldr	r1, [r2, #0]
   2226c:	6019      	str	r1, [r3, #0]
   2226e:	8892      	ldrh	r2, [r2, #4]
   22270:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   22272:	230f      	movs	r3, #15
   22274:	18fc      	adds	r4, r7, r3
   22276:	687b      	ldr	r3, [r7, #4]
   22278:	0018      	movs	r0, r3
   2227a:	4b08      	ldr	r3, [pc, #32]	; (2229c <_sercom_get_interrupt_vector+0x40>)
   2227c:	4798      	blx	r3
   2227e:	0003      	movs	r3, r0
   22280:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22282:	230f      	movs	r3, #15
   22284:	18fb      	adds	r3, r7, r3
   22286:	781b      	ldrb	r3, [r3, #0]
   22288:	2208      	movs	r2, #8
   2228a:	18ba      	adds	r2, r7, r2
   2228c:	5cd3      	ldrb	r3, [r2, r3]
   2228e:	b25b      	sxtb	r3, r3
}
   22290:	0018      	movs	r0, r3
   22292:	46bd      	mov	sp, r7
   22294:	b005      	add	sp, #20
   22296:	bd90      	pop	{r4, r7, pc}
   22298:	0002aaf0 	.word	0x0002aaf0
   2229c:	0001eb15 	.word	0x0001eb15

000222a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   222a0:	b580      	push	{r7, lr}
   222a2:	af00      	add	r7, sp, #0
   222a4:	4b03      	ldr	r3, [pc, #12]	; (222b4 <SERCOM0_Handler+0x14>)
   222a6:	681b      	ldr	r3, [r3, #0]
   222a8:	2000      	movs	r0, #0
   222aa:	4798      	blx	r3
   222ac:	46c0      	nop			; (mov r8, r8)
   222ae:	46bd      	mov	sp, r7
   222b0:	bd80      	pop	{r7, pc}
   222b2:	46c0      	nop			; (mov r8, r8)
   222b4:	200003fc 	.word	0x200003fc

000222b8 <SERCOM1_Handler>:
   222b8:	b580      	push	{r7, lr}
   222ba:	af00      	add	r7, sp, #0
   222bc:	4b03      	ldr	r3, [pc, #12]	; (222cc <SERCOM1_Handler+0x14>)
   222be:	685b      	ldr	r3, [r3, #4]
   222c0:	2001      	movs	r0, #1
   222c2:	4798      	blx	r3
   222c4:	46c0      	nop			; (mov r8, r8)
   222c6:	46bd      	mov	sp, r7
   222c8:	bd80      	pop	{r7, pc}
   222ca:	46c0      	nop			; (mov r8, r8)
   222cc:	200003fc 	.word	0x200003fc

000222d0 <SERCOM2_Handler>:
   222d0:	b580      	push	{r7, lr}
   222d2:	af00      	add	r7, sp, #0
   222d4:	4b03      	ldr	r3, [pc, #12]	; (222e4 <SERCOM2_Handler+0x14>)
   222d6:	689b      	ldr	r3, [r3, #8]
   222d8:	2002      	movs	r0, #2
   222da:	4798      	blx	r3
   222dc:	46c0      	nop			; (mov r8, r8)
   222de:	46bd      	mov	sp, r7
   222e0:	bd80      	pop	{r7, pc}
   222e2:	46c0      	nop			; (mov r8, r8)
   222e4:	200003fc 	.word	0x200003fc

000222e8 <SERCOM3_Handler>:
   222e8:	b580      	push	{r7, lr}
   222ea:	af00      	add	r7, sp, #0
   222ec:	4b03      	ldr	r3, [pc, #12]	; (222fc <SERCOM3_Handler+0x14>)
   222ee:	68db      	ldr	r3, [r3, #12]
   222f0:	2003      	movs	r0, #3
   222f2:	4798      	blx	r3
   222f4:	46c0      	nop			; (mov r8, r8)
   222f6:	46bd      	mov	sp, r7
   222f8:	bd80      	pop	{r7, pc}
   222fa:	46c0      	nop			; (mov r8, r8)
   222fc:	200003fc 	.word	0x200003fc

00022300 <SERCOM4_Handler>:
   22300:	b580      	push	{r7, lr}
   22302:	af00      	add	r7, sp, #0
   22304:	4b03      	ldr	r3, [pc, #12]	; (22314 <SERCOM4_Handler+0x14>)
   22306:	691b      	ldr	r3, [r3, #16]
   22308:	2004      	movs	r0, #4
   2230a:	4798      	blx	r3
   2230c:	46c0      	nop			; (mov r8, r8)
   2230e:	46bd      	mov	sp, r7
   22310:	bd80      	pop	{r7, pc}
   22312:	46c0      	nop			; (mov r8, r8)
   22314:	200003fc 	.word	0x200003fc

00022318 <SERCOM5_Handler>:
   22318:	b580      	push	{r7, lr}
   2231a:	af00      	add	r7, sp, #0
   2231c:	4b03      	ldr	r3, [pc, #12]	; (2232c <SERCOM5_Handler+0x14>)
   2231e:	695b      	ldr	r3, [r3, #20]
   22320:	2005      	movs	r0, #5
   22322:	4798      	blx	r3
   22324:	46c0      	nop			; (mov r8, r8)
   22326:	46bd      	mov	sp, r7
   22328:	bd80      	pop	{r7, pc}
   2232a:	46c0      	nop			; (mov r8, r8)
   2232c:	200003fc 	.word	0x200003fc

00022330 <_extint_get_eic_from_channel>:
{
   22330:	b580      	push	{r7, lr}
   22332:	b084      	sub	sp, #16
   22334:	af00      	add	r7, sp, #0
   22336:	0002      	movs	r2, r0
   22338:	1dfb      	adds	r3, r7, #7
   2233a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2233c:	230f      	movs	r3, #15
   2233e:	18fb      	adds	r3, r7, r3
   22340:	1dfa      	adds	r2, r7, #7
   22342:	7812      	ldrb	r2, [r2, #0]
   22344:	0952      	lsrs	r2, r2, #5
   22346:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   22348:	230f      	movs	r3, #15
   2234a:	18fb      	adds	r3, r7, r3
   2234c:	781b      	ldrb	r3, [r3, #0]
   2234e:	2b00      	cmp	r3, #0
   22350:	d10c      	bne.n	2236c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22352:	4b09      	ldr	r3, [pc, #36]	; (22378 <_extint_get_eic_from_channel+0x48>)
   22354:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   22356:	230f      	movs	r3, #15
   22358:	18fb      	adds	r3, r7, r3
   2235a:	781b      	ldrb	r3, [r3, #0]
   2235c:	009b      	lsls	r3, r3, #2
   2235e:	2210      	movs	r2, #16
   22360:	4694      	mov	ip, r2
   22362:	44bc      	add	ip, r7
   22364:	4463      	add	r3, ip
   22366:	3b08      	subs	r3, #8
   22368:	681b      	ldr	r3, [r3, #0]
   2236a:	e000      	b.n	2236e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   2236c:	2300      	movs	r3, #0
}
   2236e:	0018      	movs	r0, r3
   22370:	46bd      	mov	sp, r7
   22372:	b004      	add	sp, #16
   22374:	bd80      	pop	{r7, pc}
   22376:	46c0      	nop			; (mov r8, r8)
   22378:	40001800 	.word	0x40001800

0002237c <extint_chan_is_detected>:
{
   2237c:	b580      	push	{r7, lr}
   2237e:	b084      	sub	sp, #16
   22380:	af00      	add	r7, sp, #0
   22382:	0002      	movs	r2, r0
   22384:	1dfb      	adds	r3, r7, #7
   22386:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22388:	1dfb      	adds	r3, r7, #7
   2238a:	781b      	ldrb	r3, [r3, #0]
   2238c:	0018      	movs	r0, r3
   2238e:	4b0b      	ldr	r3, [pc, #44]	; (223bc <extint_chan_is_detected+0x40>)
   22390:	4798      	blx	r3
   22392:	0003      	movs	r3, r0
   22394:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22396:	1dfb      	adds	r3, r7, #7
   22398:	781b      	ldrb	r3, [r3, #0]
   2239a:	221f      	movs	r2, #31
   2239c:	4013      	ands	r3, r2
   2239e:	2201      	movs	r2, #1
   223a0:	409a      	lsls	r2, r3
   223a2:	0013      	movs	r3, r2
   223a4:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   223a6:	68fb      	ldr	r3, [r7, #12]
   223a8:	691b      	ldr	r3, [r3, #16]
   223aa:	68ba      	ldr	r2, [r7, #8]
   223ac:	4013      	ands	r3, r2
   223ae:	1e5a      	subs	r2, r3, #1
   223b0:	4193      	sbcs	r3, r2
   223b2:	b2db      	uxtb	r3, r3
}
   223b4:	0018      	movs	r0, r3
   223b6:	46bd      	mov	sp, r7
   223b8:	b004      	add	sp, #16
   223ba:	bd80      	pop	{r7, pc}
   223bc:	00022331 	.word	0x00022331

000223c0 <extint_chan_clear_detected>:
{
   223c0:	b580      	push	{r7, lr}
   223c2:	b084      	sub	sp, #16
   223c4:	af00      	add	r7, sp, #0
   223c6:	0002      	movs	r2, r0
   223c8:	1dfb      	adds	r3, r7, #7
   223ca:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   223cc:	1dfb      	adds	r3, r7, #7
   223ce:	781b      	ldrb	r3, [r3, #0]
   223d0:	0018      	movs	r0, r3
   223d2:	4b09      	ldr	r3, [pc, #36]	; (223f8 <extint_chan_clear_detected+0x38>)
   223d4:	4798      	blx	r3
   223d6:	0003      	movs	r3, r0
   223d8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   223da:	1dfb      	adds	r3, r7, #7
   223dc:	781b      	ldrb	r3, [r3, #0]
   223de:	221f      	movs	r2, #31
   223e0:	4013      	ands	r3, r2
   223e2:	2201      	movs	r2, #1
   223e4:	409a      	lsls	r2, r3
   223e6:	0013      	movs	r3, r2
   223e8:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   223ea:	68fb      	ldr	r3, [r7, #12]
   223ec:	68ba      	ldr	r2, [r7, #8]
   223ee:	611a      	str	r2, [r3, #16]
}
   223f0:	46c0      	nop			; (mov r8, r8)
   223f2:	46bd      	mov	sp, r7
   223f4:	b004      	add	sp, #16
   223f6:	bd80      	pop	{r7, pc}
   223f8:	00022331 	.word	0x00022331

000223fc <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   223fc:	b580      	push	{r7, lr}
   223fe:	b082      	sub	sp, #8
   22400:	af00      	add	r7, sp, #0
   22402:	6078      	str	r0, [r7, #4]
   22404:	0008      	movs	r0, r1
   22406:	0011      	movs	r1, r2
   22408:	1cfb      	adds	r3, r7, #3
   2240a:	1c02      	adds	r2, r0, #0
   2240c:	701a      	strb	r2, [r3, #0]
   2240e:	1cbb      	adds	r3, r7, #2
   22410:	1c0a      	adds	r2, r1, #0
   22412:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22414:	1cbb      	adds	r3, r7, #2
   22416:	781b      	ldrb	r3, [r3, #0]
   22418:	2b00      	cmp	r3, #0
   2241a:	d001      	beq.n	22420 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2241c:	2317      	movs	r3, #23
   2241e:	e019      	b.n	22454 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22420:	1cfb      	adds	r3, r7, #3
   22422:	781a      	ldrb	r2, [r3, #0]
   22424:	4b0d      	ldr	r3, [pc, #52]	; (2245c <extint_register_callback+0x60>)
   22426:	0092      	lsls	r2, r2, #2
   22428:	58d3      	ldr	r3, [r2, r3]
   2242a:	2b00      	cmp	r3, #0
   2242c:	d107      	bne.n	2243e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2242e:	1cfb      	adds	r3, r7, #3
   22430:	781a      	ldrb	r2, [r3, #0]
   22432:	4b0a      	ldr	r3, [pc, #40]	; (2245c <extint_register_callback+0x60>)
   22434:	0092      	lsls	r2, r2, #2
   22436:	6879      	ldr	r1, [r7, #4]
   22438:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2243a:	2300      	movs	r3, #0
   2243c:	e00a      	b.n	22454 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2243e:	1cfb      	adds	r3, r7, #3
   22440:	781a      	ldrb	r2, [r3, #0]
   22442:	4b06      	ldr	r3, [pc, #24]	; (2245c <extint_register_callback+0x60>)
   22444:	0092      	lsls	r2, r2, #2
   22446:	58d2      	ldr	r2, [r2, r3]
   22448:	687b      	ldr	r3, [r7, #4]
   2244a:	429a      	cmp	r2, r3
   2244c:	d101      	bne.n	22452 <extint_register_callback+0x56>
		return STATUS_OK;
   2244e:	2300      	movs	r3, #0
   22450:	e000      	b.n	22454 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22452:	231d      	movs	r3, #29
}
   22454:	0018      	movs	r0, r3
   22456:	46bd      	mov	sp, r7
   22458:	b002      	add	sp, #8
   2245a:	bd80      	pop	{r7, pc}
   2245c:	20000900 	.word	0x20000900

00022460 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22460:	b580      	push	{r7, lr}
   22462:	b084      	sub	sp, #16
   22464:	af00      	add	r7, sp, #0
   22466:	0002      	movs	r2, r0
   22468:	1dfb      	adds	r3, r7, #7
   2246a:	701a      	strb	r2, [r3, #0]
   2246c:	1dbb      	adds	r3, r7, #6
   2246e:	1c0a      	adds	r2, r1, #0
   22470:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22472:	1dbb      	adds	r3, r7, #6
   22474:	781b      	ldrb	r3, [r3, #0]
   22476:	2b00      	cmp	r3, #0
   22478:	d10e      	bne.n	22498 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2247a:	1dfb      	adds	r3, r7, #7
   2247c:	781b      	ldrb	r3, [r3, #0]
   2247e:	0018      	movs	r0, r3
   22480:	4b08      	ldr	r3, [pc, #32]	; (224a4 <extint_chan_enable_callback+0x44>)
   22482:	4798      	blx	r3
   22484:	0003      	movs	r3, r0
   22486:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22488:	1dfb      	adds	r3, r7, #7
   2248a:	781b      	ldrb	r3, [r3, #0]
   2248c:	2201      	movs	r2, #1
   2248e:	409a      	lsls	r2, r3
   22490:	68fb      	ldr	r3, [r7, #12]
   22492:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22494:	2300      	movs	r3, #0
   22496:	e000      	b.n	2249a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22498:	2317      	movs	r3, #23
}
   2249a:	0018      	movs	r0, r3
   2249c:	46bd      	mov	sp, r7
   2249e:	b004      	add	sp, #16
   224a0:	bd80      	pop	{r7, pc}
   224a2:	46c0      	nop			; (mov r8, r8)
   224a4:	00022331 	.word	0x00022331

000224a8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   224a8:	b580      	push	{r7, lr}
   224aa:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   224ac:	4b15      	ldr	r3, [pc, #84]	; (22504 <EIC_Handler+0x5c>)
   224ae:	2200      	movs	r2, #0
   224b0:	701a      	strb	r2, [r3, #0]
   224b2:	e020      	b.n	224f6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   224b4:	4b13      	ldr	r3, [pc, #76]	; (22504 <EIC_Handler+0x5c>)
   224b6:	781b      	ldrb	r3, [r3, #0]
   224b8:	0018      	movs	r0, r3
   224ba:	4b13      	ldr	r3, [pc, #76]	; (22508 <EIC_Handler+0x60>)
   224bc:	4798      	blx	r3
   224be:	1e03      	subs	r3, r0, #0
   224c0:	d013      	beq.n	224ea <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   224c2:	4b10      	ldr	r3, [pc, #64]	; (22504 <EIC_Handler+0x5c>)
   224c4:	781b      	ldrb	r3, [r3, #0]
   224c6:	0018      	movs	r0, r3
   224c8:	4b10      	ldr	r3, [pc, #64]	; (2250c <EIC_Handler+0x64>)
   224ca:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   224cc:	4b0d      	ldr	r3, [pc, #52]	; (22504 <EIC_Handler+0x5c>)
   224ce:	781b      	ldrb	r3, [r3, #0]
   224d0:	001a      	movs	r2, r3
   224d2:	4b0f      	ldr	r3, [pc, #60]	; (22510 <EIC_Handler+0x68>)
   224d4:	0092      	lsls	r2, r2, #2
   224d6:	58d3      	ldr	r3, [r2, r3]
   224d8:	2b00      	cmp	r3, #0
   224da:	d006      	beq.n	224ea <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   224dc:	4b09      	ldr	r3, [pc, #36]	; (22504 <EIC_Handler+0x5c>)
   224de:	781b      	ldrb	r3, [r3, #0]
   224e0:	001a      	movs	r2, r3
   224e2:	4b0b      	ldr	r3, [pc, #44]	; (22510 <EIC_Handler+0x68>)
   224e4:	0092      	lsls	r2, r2, #2
   224e6:	58d3      	ldr	r3, [r2, r3]
   224e8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   224ea:	4b06      	ldr	r3, [pc, #24]	; (22504 <EIC_Handler+0x5c>)
   224ec:	781b      	ldrb	r3, [r3, #0]
   224ee:	3301      	adds	r3, #1
   224f0:	b2da      	uxtb	r2, r3
   224f2:	4b04      	ldr	r3, [pc, #16]	; (22504 <EIC_Handler+0x5c>)
   224f4:	701a      	strb	r2, [r3, #0]
   224f6:	4b03      	ldr	r3, [pc, #12]	; (22504 <EIC_Handler+0x5c>)
   224f8:	781b      	ldrb	r3, [r3, #0]
   224fa:	2b0f      	cmp	r3, #15
   224fc:	d9da      	bls.n	224b4 <EIC_Handler+0xc>
			}
		}
	}
}
   224fe:	46c0      	nop			; (mov r8, r8)
   22500:	46bd      	mov	sp, r7
   22502:	bd80      	pop	{r7, pc}
   22504:	20000980 	.word	0x20000980
   22508:	0002237d 	.word	0x0002237d
   2250c:	000223c1 	.word	0x000223c1
   22510:	20000900 	.word	0x20000900

00022514 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22514:	b580      	push	{r7, lr}
   22516:	b082      	sub	sp, #8
   22518:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   2251a:	4b15      	ldr	r3, [pc, #84]	; (22570 <EVSYS_Handler+0x5c>)
   2251c:	691b      	ldr	r3, [r3, #16]
   2251e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   22520:	4b14      	ldr	r3, [pc, #80]	; (22574 <EVSYS_Handler+0x60>)
   22522:	699b      	ldr	r3, [r3, #24]
   22524:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   22526:	4b12      	ldr	r3, [pc, #72]	; (22570 <EVSYS_Handler+0x5c>)
   22528:	689a      	ldr	r2, [r3, #8]
   2252a:	683b      	ldr	r3, [r7, #0]
   2252c:	431a      	orrs	r2, r3
   2252e:	4b10      	ldr	r3, [pc, #64]	; (22570 <EVSYS_Handler+0x5c>)
   22530:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   22532:	4b10      	ldr	r3, [pc, #64]	; (22574 <EVSYS_Handler+0x60>)
   22534:	4a10      	ldr	r2, [pc, #64]	; (22578 <EVSYS_Handler+0x64>)
   22536:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   22538:	e008      	b.n	2254c <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   2253a:	687b      	ldr	r3, [r7, #4]
   2253c:	685a      	ldr	r2, [r3, #4]
   2253e:	687b      	ldr	r3, [r7, #4]
   22540:	681b      	ldr	r3, [r3, #0]
   22542:	0018      	movs	r0, r3
   22544:	4790      	blx	r2
		current_hook = current_hook->next;
   22546:	687b      	ldr	r3, [r7, #4]
   22548:	689b      	ldr	r3, [r3, #8]
   2254a:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   2254c:	687b      	ldr	r3, [r7, #4]
   2254e:	2b00      	cmp	r3, #0
   22550:	d1f3      	bne.n	2253a <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   22552:	4b07      	ldr	r3, [pc, #28]	; (22570 <EVSYS_Handler+0x5c>)
   22554:	68db      	ldr	r3, [r3, #12]
   22556:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   22558:	4b05      	ldr	r3, [pc, #20]	; (22570 <EVSYS_Handler+0x5c>)
   2255a:	689b      	ldr	r3, [r3, #8]
   2255c:	683a      	ldr	r2, [r7, #0]
   2255e:	43d2      	mvns	r2, r2
   22560:	401a      	ands	r2, r3
   22562:	4b03      	ldr	r3, [pc, #12]	; (22570 <EVSYS_Handler+0x5c>)
   22564:	609a      	str	r2, [r3, #8]
}
   22566:	46c0      	nop			; (mov r8, r8)
   22568:	46bd      	mov	sp, r7
   2256a:	b002      	add	sp, #8
   2256c:	bd80      	pop	{r7, pc}
   2256e:	46c0      	nop			; (mov r8, r8)
   22570:	20000014 	.word	0x20000014
   22574:	42000400 	.word	0x42000400
   22578:	0f0fffff 	.word	0x0f0fffff

0002257c <system_gclk_chan_get_config_defaults>:
{
   2257c:	b580      	push	{r7, lr}
   2257e:	b082      	sub	sp, #8
   22580:	af00      	add	r7, sp, #0
   22582:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22584:	687b      	ldr	r3, [r7, #4]
   22586:	2200      	movs	r2, #0
   22588:	701a      	strb	r2, [r3, #0]
}
   2258a:	46c0      	nop			; (mov r8, r8)
   2258c:	46bd      	mov	sp, r7
   2258e:	b002      	add	sp, #8
   22590:	bd80      	pop	{r7, pc}
	...

00022594 <system_apb_clock_set_mask>:
{
   22594:	b580      	push	{r7, lr}
   22596:	b082      	sub	sp, #8
   22598:	af00      	add	r7, sp, #0
   2259a:	0002      	movs	r2, r0
   2259c:	6039      	str	r1, [r7, #0]
   2259e:	1dfb      	adds	r3, r7, #7
   225a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   225a2:	1dfb      	adds	r3, r7, #7
   225a4:	781b      	ldrb	r3, [r3, #0]
   225a6:	2b01      	cmp	r3, #1
   225a8:	d00a      	beq.n	225c0 <system_apb_clock_set_mask+0x2c>
   225aa:	2b02      	cmp	r3, #2
   225ac:	d00f      	beq.n	225ce <system_apb_clock_set_mask+0x3a>
   225ae:	2b00      	cmp	r3, #0
   225b0:	d114      	bne.n	225dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   225b2:	4b0e      	ldr	r3, [pc, #56]	; (225ec <system_apb_clock_set_mask+0x58>)
   225b4:	4a0d      	ldr	r2, [pc, #52]	; (225ec <system_apb_clock_set_mask+0x58>)
   225b6:	6991      	ldr	r1, [r2, #24]
   225b8:	683a      	ldr	r2, [r7, #0]
   225ba:	430a      	orrs	r2, r1
   225bc:	619a      	str	r2, [r3, #24]
			break;
   225be:	e00f      	b.n	225e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   225c0:	4b0a      	ldr	r3, [pc, #40]	; (225ec <system_apb_clock_set_mask+0x58>)
   225c2:	4a0a      	ldr	r2, [pc, #40]	; (225ec <system_apb_clock_set_mask+0x58>)
   225c4:	69d1      	ldr	r1, [r2, #28]
   225c6:	683a      	ldr	r2, [r7, #0]
   225c8:	430a      	orrs	r2, r1
   225ca:	61da      	str	r2, [r3, #28]
			break;
   225cc:	e008      	b.n	225e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   225ce:	4b07      	ldr	r3, [pc, #28]	; (225ec <system_apb_clock_set_mask+0x58>)
   225d0:	4a06      	ldr	r2, [pc, #24]	; (225ec <system_apb_clock_set_mask+0x58>)
   225d2:	6a11      	ldr	r1, [r2, #32]
   225d4:	683a      	ldr	r2, [r7, #0]
   225d6:	430a      	orrs	r2, r1
   225d8:	621a      	str	r2, [r3, #32]
			break;
   225da:	e001      	b.n	225e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   225dc:	2317      	movs	r3, #23
   225de:	e000      	b.n	225e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   225e0:	2300      	movs	r3, #0
}
   225e2:	0018      	movs	r0, r3
   225e4:	46bd      	mov	sp, r7
   225e6:	b002      	add	sp, #8
   225e8:	bd80      	pop	{r7, pc}
   225ea:	46c0      	nop			; (mov r8, r8)
   225ec:	40000400 	.word	0x40000400

000225f0 <system_interrupt_enter_critical_section>:
{
   225f0:	b580      	push	{r7, lr}
   225f2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   225f4:	4b02      	ldr	r3, [pc, #8]	; (22600 <system_interrupt_enter_critical_section+0x10>)
   225f6:	4798      	blx	r3
}
   225f8:	46c0      	nop			; (mov r8, r8)
   225fa:	46bd      	mov	sp, r7
   225fc:	bd80      	pop	{r7, pc}
   225fe:	46c0      	nop			; (mov r8, r8)
   22600:	00023bfd 	.word	0x00023bfd

00022604 <system_interrupt_leave_critical_section>:
{
   22604:	b580      	push	{r7, lr}
   22606:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   22608:	4b02      	ldr	r3, [pc, #8]	; (22614 <system_interrupt_leave_critical_section+0x10>)
   2260a:	4798      	blx	r3
}
   2260c:	46c0      	nop			; (mov r8, r8)
   2260e:	46bd      	mov	sp, r7
   22610:	bd80      	pop	{r7, pc}
   22612:	46c0      	nop			; (mov r8, r8)
   22614:	00023c51 	.word	0x00023c51

00022618 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   22618:	b580      	push	{r7, lr}
   2261a:	b084      	sub	sp, #16
   2261c:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   2261e:	1dfb      	adds	r3, r7, #7
   22620:	2200      	movs	r2, #0
   22622:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   22624:	4b21      	ldr	r3, [pc, #132]	; (226ac <_events_find_first_free_channel_and_allocate+0x94>)
   22626:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   22628:	4b21      	ldr	r3, [pc, #132]	; (226b0 <_events_find_first_free_channel_and_allocate+0x98>)
   2262a:	681b      	ldr	r3, [r3, #0]
   2262c:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   2262e:	230f      	movs	r3, #15
   22630:	18fb      	adds	r3, r7, r3
   22632:	2200      	movs	r2, #0
   22634:	701a      	strb	r2, [r3, #0]
   22636:	e022      	b.n	2267e <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   22638:	68bb      	ldr	r3, [r7, #8]
   2263a:	2201      	movs	r2, #1
   2263c:	4013      	ands	r3, r2
   2263e:	d114      	bne.n	2266a <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   22640:	4b1b      	ldr	r3, [pc, #108]	; (226b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22642:	681b      	ldr	r3, [r3, #0]
   22644:	220f      	movs	r2, #15
   22646:	18ba      	adds	r2, r7, r2
   22648:	7812      	ldrb	r2, [r2, #0]
   2264a:	2101      	movs	r1, #1
   2264c:	4091      	lsls	r1, r2
   2264e:	000a      	movs	r2, r1
   22650:	431a      	orrs	r2, r3
   22652:	4b17      	ldr	r3, [pc, #92]	; (226b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22654:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   22656:	4b16      	ldr	r3, [pc, #88]	; (226b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22658:	791b      	ldrb	r3, [r3, #4]
   2265a:	3b01      	subs	r3, #1
   2265c:	b2da      	uxtb	r2, r3
   2265e:	4b14      	ldr	r3, [pc, #80]	; (226b0 <_events_find_first_free_channel_and_allocate+0x98>)
   22660:	711a      	strb	r2, [r3, #4]
			allocated = true;
   22662:	1dfb      	adds	r3, r7, #7
   22664:	2201      	movs	r2, #1
   22666:	701a      	strb	r2, [r3, #0]

			break;
   22668:	e00e      	b.n	22688 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   2266a:	68bb      	ldr	r3, [r7, #8]
   2266c:	085b      	lsrs	r3, r3, #1
   2266e:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   22670:	230f      	movs	r3, #15
   22672:	18fb      	adds	r3, r7, r3
   22674:	220f      	movs	r2, #15
   22676:	18ba      	adds	r2, r7, r2
   22678:	7812      	ldrb	r2, [r2, #0]
   2267a:	3201      	adds	r2, #1
   2267c:	701a      	strb	r2, [r3, #0]
   2267e:	230f      	movs	r3, #15
   22680:	18fb      	adds	r3, r7, r3
   22682:	781b      	ldrb	r3, [r3, #0]
   22684:	2b0b      	cmp	r3, #11
   22686:	d9d7      	bls.n	22638 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   22688:	4b0a      	ldr	r3, [pc, #40]	; (226b4 <_events_find_first_free_channel_and_allocate+0x9c>)
   2268a:	4798      	blx	r3

	if(!allocated) {
   2268c:	1dfb      	adds	r3, r7, #7
   2268e:	781b      	ldrb	r3, [r3, #0]
   22690:	2201      	movs	r2, #1
   22692:	4053      	eors	r3, r2
   22694:	b2db      	uxtb	r3, r3
   22696:	2b00      	cmp	r3, #0
   22698:	d001      	beq.n	2269e <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   2269a:	23ff      	movs	r3, #255	; 0xff
   2269c:	e002      	b.n	226a4 <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   2269e:	230f      	movs	r3, #15
   226a0:	18fb      	adds	r3, r7, r3
   226a2:	781b      	ldrb	r3, [r3, #0]
	}
}
   226a4:	0018      	movs	r0, r3
   226a6:	46bd      	mov	sp, r7
   226a8:	b004      	add	sp, #16
   226aa:	bd80      	pop	{r7, pc}
   226ac:	000225f1 	.word	0x000225f1
   226b0:	20000014 	.word	0x20000014
   226b4:	00022605 	.word	0x00022605

000226b8 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   226b8:	b580      	push	{r7, lr}
   226ba:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   226bc:	2102      	movs	r1, #2
   226be:	2002      	movs	r0, #2
   226c0:	4b07      	ldr	r3, [pc, #28]	; (226e0 <_system_events_init+0x28>)
   226c2:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   226c4:	4b07      	ldr	r3, [pc, #28]	; (226e4 <_system_events_init+0x2c>)
   226c6:	2201      	movs	r2, #1
   226c8:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   226ca:	46c0      	nop			; (mov r8, r8)
   226cc:	4b05      	ldr	r3, [pc, #20]	; (226e4 <_system_events_init+0x2c>)
   226ce:	781b      	ldrb	r3, [r3, #0]
   226d0:	b2db      	uxtb	r3, r3
   226d2:	001a      	movs	r2, r3
   226d4:	2301      	movs	r3, #1
   226d6:	4013      	ands	r3, r2
   226d8:	d1f8      	bne.n	226cc <_system_events_init+0x14>
	}
}
   226da:	46c0      	nop			; (mov r8, r8)
   226dc:	46bd      	mov	sp, r7
   226de:	bd80      	pop	{r7, pc}
   226e0:	00022595 	.word	0x00022595
   226e4:	42000400 	.word	0x42000400

000226e8 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   226e8:	b580      	push	{r7, lr}
   226ea:	b082      	sub	sp, #8
   226ec:	af00      	add	r7, sp, #0
   226ee:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   226f0:	687b      	ldr	r3, [r7, #4]
   226f2:	2201      	movs	r2, #1
   226f4:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   226f6:	687b      	ldr	r3, [r7, #4]
   226f8:	2200      	movs	r2, #0
   226fa:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   226fc:	687b      	ldr	r3, [r7, #4]
   226fe:	2200      	movs	r2, #0
   22700:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   22702:	687b      	ldr	r3, [r7, #4]
   22704:	2200      	movs	r2, #0
   22706:	70da      	strb	r2, [r3, #3]
}
   22708:	46c0      	nop			; (mov r8, r8)
   2270a:	46bd      	mov	sp, r7
   2270c:	b002      	add	sp, #8
   2270e:	bd80      	pop	{r7, pc}

00022710 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   22710:	b590      	push	{r4, r7, lr}
   22712:	b085      	sub	sp, #20
   22714:	af00      	add	r7, sp, #0
   22716:	6078      	str	r0, [r7, #4]
   22718:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   2271a:	230f      	movs	r3, #15
   2271c:	18fc      	adds	r4, r7, r3
   2271e:	4b2a      	ldr	r3, [pc, #168]	; (227c8 <events_allocate+0xb8>)
   22720:	4798      	blx	r3
   22722:	0003      	movs	r3, r0
   22724:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   22726:	230f      	movs	r3, #15
   22728:	18fb      	adds	r3, r7, r3
   2272a:	781b      	ldrb	r3, [r3, #0]
   2272c:	2bff      	cmp	r3, #255	; 0xff
   2272e:	d101      	bne.n	22734 <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   22730:	2314      	movs	r3, #20
   22732:	e045      	b.n	227c0 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   22734:	687b      	ldr	r3, [r7, #4]
   22736:	220f      	movs	r2, #15
   22738:	18ba      	adds	r2, r7, r2
   2273a:	7812      	ldrb	r2, [r2, #0]
   2273c:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   2273e:	683b      	ldr	r3, [r7, #0]
   22740:	785b      	ldrb	r3, [r3, #1]
   22742:	2b02      	cmp	r3, #2
   22744:	d01c      	beq.n	22780 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   22746:	230c      	movs	r3, #12
   22748:	18fb      	adds	r3, r7, r3
   2274a:	0018      	movs	r0, r3
   2274c:	4b1f      	ldr	r3, [pc, #124]	; (227cc <events_allocate+0xbc>)
   2274e:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   22750:	683b      	ldr	r3, [r7, #0]
   22752:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   22754:	230c      	movs	r3, #12
   22756:	18fb      	adds	r3, r7, r3
   22758:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   2275a:	230f      	movs	r3, #15
   2275c:	18fb      	adds	r3, r7, r3
   2275e:	781b      	ldrb	r3, [r3, #0]
   22760:	3307      	adds	r3, #7
   22762:	b2db      	uxtb	r3, r3
   22764:	220c      	movs	r2, #12
   22766:	18ba      	adds	r2, r7, r2
   22768:	0011      	movs	r1, r2
   2276a:	0018      	movs	r0, r3
   2276c:	4b18      	ldr	r3, [pc, #96]	; (227d0 <events_allocate+0xc0>)
   2276e:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   22770:	230f      	movs	r3, #15
   22772:	18fb      	adds	r3, r7, r3
   22774:	781b      	ldrb	r3, [r3, #0]
   22776:	3307      	adds	r3, #7
   22778:	b2db      	uxtb	r3, r3
   2277a:	0018      	movs	r0, r3
   2277c:	4b15      	ldr	r3, [pc, #84]	; (227d4 <events_allocate+0xc4>)
   2277e:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22780:	230f      	movs	r3, #15
   22782:	18fb      	adds	r3, r7, r3
   22784:	781b      	ldrb	r3, [r3, #0]
   22786:	220f      	movs	r2, #15
   22788:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   2278a:	683b      	ldr	r3, [r7, #0]
   2278c:	789b      	ldrb	r3, [r3, #2]
   2278e:	041b      	lsls	r3, r3, #16
   22790:	0019      	movs	r1, r3
   22792:	23fe      	movs	r3, #254	; 0xfe
   22794:	03db      	lsls	r3, r3, #15
   22796:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22798:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   2279a:	683b      	ldr	r3, [r7, #0]
   2279c:	785b      	ldrb	r3, [r3, #1]
   2279e:	061b      	lsls	r3, r3, #24
   227a0:	0019      	movs	r1, r3
   227a2:	23c0      	movs	r3, #192	; 0xc0
   227a4:	049b      	lsls	r3, r3, #18
   227a6:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   227a8:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   227aa:	683b      	ldr	r3, [r7, #0]
   227ac:	781b      	ldrb	r3, [r3, #0]
   227ae:	069b      	lsls	r3, r3, #26
   227b0:	0019      	movs	r1, r3
   227b2:	23c0      	movs	r3, #192	; 0xc0
   227b4:	051b      	lsls	r3, r3, #20
   227b6:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   227b8:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   227ba:	687b      	ldr	r3, [r7, #4]
   227bc:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   227be:	2300      	movs	r3, #0
}
   227c0:	0018      	movs	r0, r3
   227c2:	46bd      	mov	sp, r7
   227c4:	b005      	add	sp, #20
   227c6:	bd90      	pop	{r4, r7, pc}
   227c8:	00022619 	.word	0x00022619
   227cc:	0002257d 	.word	0x0002257d
   227d0:	000249b5 	.word	0x000249b5
   227d4:	000249f9 	.word	0x000249f9

000227d8 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   227d8:	b580      	push	{r7, lr}
   227da:	b082      	sub	sp, #8
   227dc:	af00      	add	r7, sp, #0
   227de:	6078      	str	r0, [r7, #4]
   227e0:	000a      	movs	r2, r1
   227e2:	1cfb      	adds	r3, r7, #3
   227e4:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   227e6:	490f      	ldr	r1, [pc, #60]	; (22824 <events_attach_user+0x4c>)
   227e8:	687b      	ldr	r3, [r7, #4]
   227ea:	781b      	ldrb	r3, [r3, #0]
   227ec:	b29b      	uxth	r3, r3
   227ee:	3301      	adds	r3, #1
   227f0:	b29b      	uxth	r3, r3
   227f2:	021b      	lsls	r3, r3, #8
   227f4:	b29a      	uxth	r2, r3
   227f6:	23f8      	movs	r3, #248	; 0xf8
   227f8:	015b      	lsls	r3, r3, #5
   227fa:	4013      	ands	r3, r2
   227fc:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   227fe:	1cfb      	adds	r3, r7, #3
   22800:	781b      	ldrb	r3, [r3, #0]
   22802:	b29b      	uxth	r3, r3
   22804:	201f      	movs	r0, #31
   22806:	4003      	ands	r3, r0
   22808:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   2280a:	4313      	orrs	r3, r2
   2280c:	b29b      	uxth	r3, r3
   2280e:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   22810:	4a04      	ldr	r2, [pc, #16]	; (22824 <events_attach_user+0x4c>)
   22812:	687b      	ldr	r3, [r7, #4]
   22814:	685b      	ldr	r3, [r3, #4]
   22816:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   22818:	2300      	movs	r3, #0
}
   2281a:	0018      	movs	r0, r3
   2281c:	46bd      	mov	sp, r7
   2281e:	b002      	add	sp, #8
   22820:	bd80      	pop	{r7, pc}
   22822:	46c0      	nop			; (mov r8, r8)
   22824:	42000400 	.word	0x42000400

00022828 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   22828:	b580      	push	{r7, lr}
   2282a:	b084      	sub	sp, #16
   2282c:	af00      	add	r7, sp, #0
   2282e:	60f8      	str	r0, [r7, #12]
   22830:	60b9      	str	r1, [r7, #8]
   22832:	1dfb      	adds	r3, r7, #7
   22834:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   22836:	1dfb      	adds	r3, r7, #7
   22838:	781b      	ldrb	r3, [r3, #0]
   2283a:	68fa      	ldr	r2, [r7, #12]
   2283c:	009b      	lsls	r3, r3, #2
   2283e:	18d3      	adds	r3, r2, r3
   22840:	3304      	adds	r3, #4
   22842:	68ba      	ldr	r2, [r7, #8]
   22844:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   22846:	68fb      	ldr	r3, [r7, #12]
   22848:	7e1b      	ldrb	r3, [r3, #24]
   2284a:	b25a      	sxtb	r2, r3
   2284c:	1dfb      	adds	r3, r7, #7
   2284e:	781b      	ldrb	r3, [r3, #0]
   22850:	2101      	movs	r1, #1
   22852:	4099      	lsls	r1, r3
   22854:	000b      	movs	r3, r1
   22856:	b25b      	sxtb	r3, r3
   22858:	4313      	orrs	r3, r2
   2285a:	b25b      	sxtb	r3, r3
   2285c:	b2da      	uxtb	r2, r3
   2285e:	68fb      	ldr	r3, [r7, #12]
   22860:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   22862:	2300      	movs	r3, #0
}
   22864:	0018      	movs	r0, r3
   22866:	46bd      	mov	sp, r7
   22868:	b004      	add	sp, #16
   2286a:	bd80      	pop	{r7, pc}

0002286c <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   2286c:	b580      	push	{r7, lr}
   2286e:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   22870:	2000      	movs	r0, #0
   22872:	4b02      	ldr	r3, [pc, #8]	; (2287c <AC_Handler+0x10>)
   22874:	4798      	blx	r3
}
   22876:	46c0      	nop			; (mov r8, r8)
   22878:	46bd      	mov	sp, r7
   2287a:	bd80      	pop	{r7, pc}
   2287c:	00022881 	.word	0x00022881

00022880 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   22880:	b580      	push	{r7, lr}
   22882:	b084      	sub	sp, #16
   22884:	af00      	add	r7, sp, #0
   22886:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   22888:	4b23      	ldr	r3, [pc, #140]	; (22918 <_ac_interrupt_handler+0x98>)
   2288a:	687a      	ldr	r2, [r7, #4]
   2288c:	0092      	lsls	r2, r2, #2
   2288e:	58d3      	ldr	r3, [r2, r3]
   22890:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   22892:	4b21      	ldr	r3, [pc, #132]	; (22918 <_ac_interrupt_handler+0x98>)
   22894:	687a      	ldr	r2, [r7, #4]
   22896:	0092      	lsls	r2, r2, #2
   22898:	58d3      	ldr	r3, [r2, r3]
   2289a:	681b      	ldr	r3, [r3, #0]
   2289c:	799b      	ldrb	r3, [r3, #6]
   2289e:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   228a0:	68fb      	ldr	r3, [r7, #12]
   228a2:	7e1b      	ldrb	r3, [r3, #24]
   228a4:	68f9      	ldr	r1, [r7, #12]
   228a6:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   228a8:	400b      	ands	r3, r1
   228aa:	b2d9      	uxtb	r1, r3
   228ac:	230b      	movs	r3, #11
   228ae:	18fb      	adds	r3, r7, r3
   228b0:	400a      	ands	r2, r1
   228b2:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   228b4:	230b      	movs	r3, #11
   228b6:	18fb      	adds	r3, r7, r3
   228b8:	781b      	ldrb	r3, [r3, #0]
   228ba:	2201      	movs	r2, #1
   228bc:	4013      	ands	r3, r2
   228be:	d008      	beq.n	228d2 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   228c0:	68fb      	ldr	r3, [r7, #12]
   228c2:	685b      	ldr	r3, [r3, #4]
   228c4:	68fa      	ldr	r2, [r7, #12]
   228c6:	0010      	movs	r0, r2
   228c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   228ca:	68fb      	ldr	r3, [r7, #12]
   228cc:	681b      	ldr	r3, [r3, #0]
   228ce:	2201      	movs	r2, #1
   228d0:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   228d2:	230b      	movs	r3, #11
   228d4:	18fb      	adds	r3, r7, r3
   228d6:	781b      	ldrb	r3, [r3, #0]
   228d8:	2202      	movs	r2, #2
   228da:	4013      	ands	r3, r2
   228dc:	d008      	beq.n	228f0 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   228de:	68fb      	ldr	r3, [r7, #12]
   228e0:	689b      	ldr	r3, [r3, #8]
   228e2:	68fa      	ldr	r2, [r7, #12]
   228e4:	0010      	movs	r0, r2
   228e6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   228e8:	68fb      	ldr	r3, [r7, #12]
   228ea:	681b      	ldr	r3, [r3, #0]
   228ec:	2202      	movs	r2, #2
   228ee:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   228f0:	230b      	movs	r3, #11
   228f2:	18fb      	adds	r3, r7, r3
   228f4:	781b      	ldrb	r3, [r3, #0]
   228f6:	2210      	movs	r2, #16
   228f8:	4013      	ands	r3, r2
   228fa:	d008      	beq.n	2290e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   228fc:	68fb      	ldr	r3, [r7, #12]
   228fe:	695b      	ldr	r3, [r3, #20]
   22900:	68fa      	ldr	r2, [r7, #12]
   22902:	0010      	movs	r0, r2
   22904:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   22906:	68fb      	ldr	r3, [r7, #12]
   22908:	681b      	ldr	r3, [r3, #0]
   2290a:	2210      	movs	r2, #16
   2290c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2290e:	46c0      	nop			; (mov r8, r8)
   22910:	46bd      	mov	sp, r7
   22912:	b004      	add	sp, #16
   22914:	bd80      	pop	{r7, pc}
   22916:	46c0      	nop			; (mov r8, r8)
   22918:	20000984 	.word	0x20000984

0002291c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2291c:	b580      	push	{r7, lr}
   2291e:	af00      	add	r7, sp, #0
}
   22920:	46c0      	nop			; (mov r8, r8)
   22922:	46bd      	mov	sp, r7
   22924:	bd80      	pop	{r7, pc}
	...

00022928 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   22928:	b580      	push	{r7, lr}
   2292a:	b082      	sub	sp, #8
   2292c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2292e:	4b07      	ldr	r3, [pc, #28]	; (2294c <nvm_is_ready+0x24>)
   22930:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   22932:	687b      	ldr	r3, [r7, #4]
   22934:	7d1b      	ldrb	r3, [r3, #20]
   22936:	b2db      	uxtb	r3, r3
   22938:	001a      	movs	r2, r3
   2293a:	2301      	movs	r3, #1
   2293c:	4013      	ands	r3, r2
   2293e:	1e5a      	subs	r2, r3, #1
   22940:	4193      	sbcs	r3, r2
   22942:	b2db      	uxtb	r3, r3
}
   22944:	0018      	movs	r0, r3
   22946:	46bd      	mov	sp, r7
   22948:	b002      	add	sp, #8
   2294a:	bd80      	pop	{r7, pc}
   2294c:	41004000 	.word	0x41004000

00022950 <system_apb_clock_set_mask>:
{
   22950:	b580      	push	{r7, lr}
   22952:	b082      	sub	sp, #8
   22954:	af00      	add	r7, sp, #0
   22956:	0002      	movs	r2, r0
   22958:	6039      	str	r1, [r7, #0]
   2295a:	1dfb      	adds	r3, r7, #7
   2295c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2295e:	1dfb      	adds	r3, r7, #7
   22960:	781b      	ldrb	r3, [r3, #0]
   22962:	2b01      	cmp	r3, #1
   22964:	d00a      	beq.n	2297c <system_apb_clock_set_mask+0x2c>
   22966:	2b02      	cmp	r3, #2
   22968:	d00f      	beq.n	2298a <system_apb_clock_set_mask+0x3a>
   2296a:	2b00      	cmp	r3, #0
   2296c:	d114      	bne.n	22998 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2296e:	4b0e      	ldr	r3, [pc, #56]	; (229a8 <system_apb_clock_set_mask+0x58>)
   22970:	4a0d      	ldr	r2, [pc, #52]	; (229a8 <system_apb_clock_set_mask+0x58>)
   22972:	6991      	ldr	r1, [r2, #24]
   22974:	683a      	ldr	r2, [r7, #0]
   22976:	430a      	orrs	r2, r1
   22978:	619a      	str	r2, [r3, #24]
			break;
   2297a:	e00f      	b.n	2299c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2297c:	4b0a      	ldr	r3, [pc, #40]	; (229a8 <system_apb_clock_set_mask+0x58>)
   2297e:	4a0a      	ldr	r2, [pc, #40]	; (229a8 <system_apb_clock_set_mask+0x58>)
   22980:	69d1      	ldr	r1, [r2, #28]
   22982:	683a      	ldr	r2, [r7, #0]
   22984:	430a      	orrs	r2, r1
   22986:	61da      	str	r2, [r3, #28]
			break;
   22988:	e008      	b.n	2299c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2298a:	4b07      	ldr	r3, [pc, #28]	; (229a8 <system_apb_clock_set_mask+0x58>)
   2298c:	4a06      	ldr	r2, [pc, #24]	; (229a8 <system_apb_clock_set_mask+0x58>)
   2298e:	6a11      	ldr	r1, [r2, #32]
   22990:	683a      	ldr	r2, [r7, #0]
   22992:	430a      	orrs	r2, r1
   22994:	621a      	str	r2, [r3, #32]
			break;
   22996:	e001      	b.n	2299c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22998:	2317      	movs	r3, #23
   2299a:	e000      	b.n	2299e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2299c:	2300      	movs	r3, #0
}
   2299e:	0018      	movs	r0, r3
   229a0:	46bd      	mov	sp, r7
   229a2:	b002      	add	sp, #8
   229a4:	bd80      	pop	{r7, pc}
   229a6:	46c0      	nop			; (mov r8, r8)
   229a8:	40000400 	.word	0x40000400

000229ac <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   229ac:	b580      	push	{r7, lr}
   229ae:	b084      	sub	sp, #16
   229b0:	af00      	add	r7, sp, #0
   229b2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   229b4:	4b2f      	ldr	r3, [pc, #188]	; (22a74 <nvm_set_config+0xc8>)
   229b6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   229b8:	2104      	movs	r1, #4
   229ba:	2001      	movs	r0, #1
   229bc:	4b2e      	ldr	r3, [pc, #184]	; (22a78 <nvm_set_config+0xcc>)
   229be:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   229c0:	68fb      	ldr	r3, [r7, #12]
   229c2:	2220      	movs	r2, #32
   229c4:	32ff      	adds	r2, #255	; 0xff
   229c6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   229c8:	4b2c      	ldr	r3, [pc, #176]	; (22a7c <nvm_set_config+0xd0>)
   229ca:	4798      	blx	r3
   229cc:	0003      	movs	r3, r0
   229ce:	001a      	movs	r2, r3
   229d0:	2301      	movs	r3, #1
   229d2:	4053      	eors	r3, r2
   229d4:	b2db      	uxtb	r3, r3
   229d6:	2b00      	cmp	r3, #0
   229d8:	d001      	beq.n	229de <nvm_set_config+0x32>
		return STATUS_BUSY;
   229da:	2305      	movs	r3, #5
   229dc:	e045      	b.n	22a6a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   229de:	687b      	ldr	r3, [r7, #4]
   229e0:	781b      	ldrb	r3, [r3, #0]
   229e2:	021b      	lsls	r3, r3, #8
   229e4:	001a      	movs	r2, r3
   229e6:	23c0      	movs	r3, #192	; 0xc0
   229e8:	009b      	lsls	r3, r3, #2
   229ea:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   229ec:	687b      	ldr	r3, [r7, #4]
   229ee:	785b      	ldrb	r3, [r3, #1]
   229f0:	01db      	lsls	r3, r3, #7
   229f2:	0019      	movs	r1, r3
   229f4:	23ff      	movs	r3, #255	; 0xff
   229f6:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   229f8:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   229fa:	687b      	ldr	r3, [r7, #4]
   229fc:	789b      	ldrb	r3, [r3, #2]
   229fe:	005b      	lsls	r3, r3, #1
   22a00:	0019      	movs	r1, r3
   22a02:	231e      	movs	r3, #30
   22a04:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22a06:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22a08:	687b      	ldr	r3, [r7, #4]
   22a0a:	78db      	ldrb	r3, [r3, #3]
   22a0c:	049b      	lsls	r3, r3, #18
   22a0e:	0019      	movs	r1, r3
   22a10:	2380      	movs	r3, #128	; 0x80
   22a12:	02db      	lsls	r3, r3, #11
   22a14:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22a16:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   22a18:	687b      	ldr	r3, [r7, #4]
   22a1a:	791b      	ldrb	r3, [r3, #4]
   22a1c:	041b      	lsls	r3, r3, #16
   22a1e:	0019      	movs	r1, r3
   22a20:	23c0      	movs	r3, #192	; 0xc0
   22a22:	029b      	lsls	r3, r3, #10
   22a24:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22a26:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   22a28:	68fb      	ldr	r3, [r7, #12]
   22a2a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   22a2c:	68fb      	ldr	r3, [r7, #12]
   22a2e:	689b      	ldr	r3, [r3, #8]
   22a30:	035b      	lsls	r3, r3, #13
   22a32:	0f5b      	lsrs	r3, r3, #29
   22a34:	b2db      	uxtb	r3, r3
   22a36:	001a      	movs	r2, r3
   22a38:	2308      	movs	r3, #8
   22a3a:	4093      	lsls	r3, r2
   22a3c:	b29a      	uxth	r2, r3
   22a3e:	4b10      	ldr	r3, [pc, #64]	; (22a80 <nvm_set_config+0xd4>)
   22a40:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   22a42:	68fb      	ldr	r3, [r7, #12]
   22a44:	689b      	ldr	r3, [r3, #8]
   22a46:	b29a      	uxth	r2, r3
   22a48:	4b0d      	ldr	r3, [pc, #52]	; (22a80 <nvm_set_config+0xd4>)
   22a4a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   22a4c:	687b      	ldr	r3, [r7, #4]
   22a4e:	785a      	ldrb	r2, [r3, #1]
   22a50:	4b0b      	ldr	r3, [pc, #44]	; (22a80 <nvm_set_config+0xd4>)
   22a52:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22a54:	68fb      	ldr	r3, [r7, #12]
   22a56:	8b1b      	ldrh	r3, [r3, #24]
   22a58:	b29b      	uxth	r3, r3
   22a5a:	001a      	movs	r2, r3
   22a5c:	2380      	movs	r3, #128	; 0x80
   22a5e:	005b      	lsls	r3, r3, #1
   22a60:	4013      	ands	r3, r2
   22a62:	d001      	beq.n	22a68 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   22a64:	2310      	movs	r3, #16
   22a66:	e000      	b.n	22a6a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   22a68:	2300      	movs	r3, #0
}
   22a6a:	0018      	movs	r0, r3
   22a6c:	46bd      	mov	sp, r7
   22a6e:	b004      	add	sp, #16
   22a70:	bd80      	pop	{r7, pc}
   22a72:	46c0      	nop			; (mov r8, r8)
   22a74:	41004000 	.word	0x41004000
   22a78:	00022951 	.word	0x00022951
   22a7c:	00022929 	.word	0x00022929
   22a80:	20000414 	.word	0x20000414

00022a84 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   22a84:	b580      	push	{r7, lr}
   22a86:	b086      	sub	sp, #24
   22a88:	af00      	add	r7, sp, #0
   22a8a:	60b9      	str	r1, [r7, #8]
   22a8c:	607a      	str	r2, [r7, #4]
   22a8e:	230f      	movs	r3, #15
   22a90:	18fb      	adds	r3, r7, r3
   22a92:	1c02      	adds	r2, r0, #0
   22a94:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   22a96:	4b3a      	ldr	r3, [pc, #232]	; (22b80 <nvm_execute_command+0xfc>)
   22a98:	881b      	ldrh	r3, [r3, #0]
   22a9a:	001a      	movs	r2, r3
   22a9c:	4b38      	ldr	r3, [pc, #224]	; (22b80 <nvm_execute_command+0xfc>)
   22a9e:	885b      	ldrh	r3, [r3, #2]
   22aa0:	435a      	muls	r2, r3
   22aa2:	68bb      	ldr	r3, [r7, #8]
   22aa4:	429a      	cmp	r2, r3
   22aa6:	d209      	bcs.n	22abc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   22aa8:	68bb      	ldr	r3, [r7, #8]
   22aaa:	4a36      	ldr	r2, [pc, #216]	; (22b84 <nvm_execute_command+0x100>)
   22aac:	4293      	cmp	r3, r2
   22aae:	d903      	bls.n	22ab8 <nvm_execute_command+0x34>
   22ab0:	68bb      	ldr	r3, [r7, #8]
   22ab2:	4a35      	ldr	r2, [pc, #212]	; (22b88 <nvm_execute_command+0x104>)
   22ab4:	4293      	cmp	r3, r2
   22ab6:	d901      	bls.n	22abc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22ab8:	2318      	movs	r3, #24
   22aba:	e05c      	b.n	22b76 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22abc:	4b33      	ldr	r3, [pc, #204]	; (22b8c <nvm_execute_command+0x108>)
   22abe:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   22ac0:	697b      	ldr	r3, [r7, #20]
   22ac2:	685b      	ldr	r3, [r3, #4]
   22ac4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   22ac6:	693b      	ldr	r3, [r7, #16]
   22ac8:	2280      	movs	r2, #128	; 0x80
   22aca:	02d2      	lsls	r2, r2, #11
   22acc:	431a      	orrs	r2, r3
   22ace:	697b      	ldr	r3, [r7, #20]
   22ad0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22ad2:	697b      	ldr	r3, [r7, #20]
   22ad4:	2220      	movs	r2, #32
   22ad6:	32ff      	adds	r2, #255	; 0xff
   22ad8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22ada:	4b2d      	ldr	r3, [pc, #180]	; (22b90 <nvm_execute_command+0x10c>)
   22adc:	4798      	blx	r3
   22ade:	0003      	movs	r3, r0
   22ae0:	001a      	movs	r2, r3
   22ae2:	2301      	movs	r3, #1
   22ae4:	4053      	eors	r3, r2
   22ae6:	b2db      	uxtb	r3, r3
   22ae8:	2b00      	cmp	r3, #0
   22aea:	d004      	beq.n	22af6 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   22aec:	697b      	ldr	r3, [r7, #20]
   22aee:	693a      	ldr	r2, [r7, #16]
   22af0:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   22af2:	2305      	movs	r3, #5
   22af4:	e03f      	b.n	22b76 <nvm_execute_command+0xf2>
	}

	switch (command) {
   22af6:	230f      	movs	r3, #15
   22af8:	18fb      	adds	r3, r7, r3
   22afa:	781b      	ldrb	r3, [r3, #0]
   22afc:	2b45      	cmp	r3, #69	; 0x45
   22afe:	d81d      	bhi.n	22b3c <nvm_execute_command+0xb8>
   22b00:	009a      	lsls	r2, r3, #2
   22b02:	4b24      	ldr	r3, [pc, #144]	; (22b94 <nvm_execute_command+0x110>)
   22b04:	18d3      	adds	r3, r2, r3
   22b06:	681b      	ldr	r3, [r3, #0]
   22b08:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22b0a:	697b      	ldr	r3, [r7, #20]
   22b0c:	8b1b      	ldrh	r3, [r3, #24]
   22b0e:	b29b      	uxth	r3, r3
   22b10:	001a      	movs	r2, r3
   22b12:	2380      	movs	r3, #128	; 0x80
   22b14:	005b      	lsls	r3, r3, #1
   22b16:	4013      	ands	r3, r2
   22b18:	d004      	beq.n	22b24 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   22b1a:	697b      	ldr	r3, [r7, #20]
   22b1c:	693a      	ldr	r2, [r7, #16]
   22b1e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   22b20:	2310      	movs	r3, #16
   22b22:	e028      	b.n	22b76 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22b24:	68bb      	ldr	r3, [r7, #8]
   22b26:	089b      	lsrs	r3, r3, #2
   22b28:	005a      	lsls	r2, r3, #1
   22b2a:	697b      	ldr	r3, [r7, #20]
   22b2c:	61da      	str	r2, [r3, #28]
			break;
   22b2e:	e00b      	b.n	22b48 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22b30:	68bb      	ldr	r3, [r7, #8]
   22b32:	089b      	lsrs	r3, r3, #2
   22b34:	005a      	lsls	r2, r3, #1
   22b36:	697b      	ldr	r3, [r7, #20]
   22b38:	61da      	str	r2, [r3, #28]
			break;
   22b3a:	e005      	b.n	22b48 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   22b3c:	697b      	ldr	r3, [r7, #20]
   22b3e:	693a      	ldr	r2, [r7, #16]
   22b40:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   22b42:	2317      	movs	r3, #23
   22b44:	e017      	b.n	22b76 <nvm_execute_command+0xf2>
			break;
   22b46:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   22b48:	230f      	movs	r3, #15
   22b4a:	18fb      	adds	r3, r7, r3
   22b4c:	781b      	ldrb	r3, [r3, #0]
   22b4e:	b29b      	uxth	r3, r3
   22b50:	4a11      	ldr	r2, [pc, #68]	; (22b98 <nvm_execute_command+0x114>)
   22b52:	4313      	orrs	r3, r2
   22b54:	b29a      	uxth	r2, r3
   22b56:	697b      	ldr	r3, [r7, #20]
   22b58:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   22b5a:	46c0      	nop			; (mov r8, r8)
   22b5c:	4b0c      	ldr	r3, [pc, #48]	; (22b90 <nvm_execute_command+0x10c>)
   22b5e:	4798      	blx	r3
   22b60:	0003      	movs	r3, r0
   22b62:	001a      	movs	r2, r3
   22b64:	2301      	movs	r3, #1
   22b66:	4053      	eors	r3, r2
   22b68:	b2db      	uxtb	r3, r3
   22b6a:	2b00      	cmp	r3, #0
   22b6c:	d1f6      	bne.n	22b5c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   22b6e:	697b      	ldr	r3, [r7, #20]
   22b70:	693a      	ldr	r2, [r7, #16]
   22b72:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   22b74:	2300      	movs	r3, #0
}
   22b76:	0018      	movs	r0, r3
   22b78:	46bd      	mov	sp, r7
   22b7a:	b006      	add	sp, #24
   22b7c:	bd80      	pop	{r7, pc}
   22b7e:	46c0      	nop			; (mov r8, r8)
   22b80:	20000414 	.word	0x20000414
   22b84:	00803fff 	.word	0x00803fff
   22b88:	00806000 	.word	0x00806000
   22b8c:	41004000 	.word	0x41004000
   22b90:	00022929 	.word	0x00022929
   22b94:	0002aaf8 	.word	0x0002aaf8
   22b98:	ffffa500 	.word	0xffffa500

00022b9c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   22b9c:	b580      	push	{r7, lr}
   22b9e:	b088      	sub	sp, #32
   22ba0:	af00      	add	r7, sp, #0
   22ba2:	60f8      	str	r0, [r7, #12]
   22ba4:	60b9      	str	r1, [r7, #8]
   22ba6:	1dbb      	adds	r3, r7, #6
   22ba8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22baa:	4b4a      	ldr	r3, [pc, #296]	; (22cd4 <nvm_write_buffer+0x138>)
   22bac:	881b      	ldrh	r3, [r3, #0]
   22bae:	001a      	movs	r2, r3
   22bb0:	4b48      	ldr	r3, [pc, #288]	; (22cd4 <nvm_write_buffer+0x138>)
   22bb2:	885b      	ldrh	r3, [r3, #2]
   22bb4:	435a      	muls	r2, r3
	if (destination_address >
   22bb6:	68fb      	ldr	r3, [r7, #12]
   22bb8:	429a      	cmp	r2, r3
   22bba:	d201      	bcs.n	22bc0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22bbc:	2318      	movs	r3, #24
   22bbe:	e084      	b.n	22cca <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   22bc0:	4b44      	ldr	r3, [pc, #272]	; (22cd4 <nvm_write_buffer+0x138>)
   22bc2:	881b      	ldrh	r3, [r3, #0]
   22bc4:	3b01      	subs	r3, #1
   22bc6:	001a      	movs	r2, r3
   22bc8:	68fb      	ldr	r3, [r7, #12]
   22bca:	4013      	ands	r3, r2
   22bcc:	d001      	beq.n	22bd2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22bce:	2318      	movs	r3, #24
   22bd0:	e07b      	b.n	22cca <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22bd2:	4b40      	ldr	r3, [pc, #256]	; (22cd4 <nvm_write_buffer+0x138>)
   22bd4:	881b      	ldrh	r3, [r3, #0]
   22bd6:	1dba      	adds	r2, r7, #6
   22bd8:	8812      	ldrh	r2, [r2, #0]
   22bda:	429a      	cmp	r2, r3
   22bdc:	d901      	bls.n	22be2 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22bde:	2317      	movs	r3, #23
   22be0:	e073      	b.n	22cca <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22be2:	4b3d      	ldr	r3, [pc, #244]	; (22cd8 <nvm_write_buffer+0x13c>)
   22be4:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22be6:	4b3d      	ldr	r3, [pc, #244]	; (22cdc <nvm_write_buffer+0x140>)
   22be8:	4798      	blx	r3
   22bea:	0003      	movs	r3, r0
   22bec:	001a      	movs	r2, r3
   22bee:	2301      	movs	r3, #1
   22bf0:	4053      	eors	r3, r2
   22bf2:	b2db      	uxtb	r3, r3
   22bf4:	2b00      	cmp	r3, #0
   22bf6:	d001      	beq.n	22bfc <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   22bf8:	2305      	movs	r3, #5
   22bfa:	e066      	b.n	22cca <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   22bfc:	697b      	ldr	r3, [r7, #20]
   22bfe:	4a38      	ldr	r2, [pc, #224]	; (22ce0 <nvm_write_buffer+0x144>)
   22c00:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   22c02:	46c0      	nop			; (mov r8, r8)
   22c04:	4b35      	ldr	r3, [pc, #212]	; (22cdc <nvm_write_buffer+0x140>)
   22c06:	4798      	blx	r3
   22c08:	0003      	movs	r3, r0
   22c0a:	001a      	movs	r2, r3
   22c0c:	2301      	movs	r3, #1
   22c0e:	4053      	eors	r3, r2
   22c10:	b2db      	uxtb	r3, r3
   22c12:	2b00      	cmp	r3, #0
   22c14:	d1f6      	bne.n	22c04 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22c16:	697b      	ldr	r3, [r7, #20]
   22c18:	2220      	movs	r2, #32
   22c1a:	32ff      	adds	r2, #255	; 0xff
   22c1c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   22c1e:	68fb      	ldr	r3, [r7, #12]
   22c20:	085b      	lsrs	r3, r3, #1
   22c22:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22c24:	231a      	movs	r3, #26
   22c26:	18fb      	adds	r3, r7, r3
   22c28:	2200      	movs	r2, #0
   22c2a:	801a      	strh	r2, [r3, #0]
   22c2c:	e032      	b.n	22c94 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   22c2e:	231a      	movs	r3, #26
   22c30:	18fb      	adds	r3, r7, r3
   22c32:	881b      	ldrh	r3, [r3, #0]
   22c34:	68ba      	ldr	r2, [r7, #8]
   22c36:	18d3      	adds	r3, r2, r3
   22c38:	781a      	ldrb	r2, [r3, #0]
   22c3a:	2318      	movs	r3, #24
   22c3c:	18fb      	adds	r3, r7, r3
   22c3e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22c40:	231a      	movs	r3, #26
   22c42:	18fb      	adds	r3, r7, r3
   22c44:	881a      	ldrh	r2, [r3, #0]
   22c46:	1dbb      	adds	r3, r7, #6
   22c48:	881b      	ldrh	r3, [r3, #0]
   22c4a:	3b01      	subs	r3, #1
   22c4c:	429a      	cmp	r2, r3
   22c4e:	da11      	bge.n	22c74 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   22c50:	231a      	movs	r3, #26
   22c52:	18fb      	adds	r3, r7, r3
   22c54:	881b      	ldrh	r3, [r3, #0]
   22c56:	3301      	adds	r3, #1
   22c58:	68ba      	ldr	r2, [r7, #8]
   22c5a:	18d3      	adds	r3, r2, r3
   22c5c:	781b      	ldrb	r3, [r3, #0]
   22c5e:	021b      	lsls	r3, r3, #8
   22c60:	b21a      	sxth	r2, r3
   22c62:	2318      	movs	r3, #24
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	2100      	movs	r1, #0
   22c68:	5e5b      	ldrsh	r3, [r3, r1]
   22c6a:	4313      	orrs	r3, r2
   22c6c:	b21a      	sxth	r2, r3
   22c6e:	2318      	movs	r3, #24
   22c70:	18fb      	adds	r3, r7, r3
   22c72:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   22c74:	69fb      	ldr	r3, [r7, #28]
   22c76:	1c5a      	adds	r2, r3, #1
   22c78:	61fa      	str	r2, [r7, #28]
   22c7a:	005b      	lsls	r3, r3, #1
   22c7c:	001a      	movs	r2, r3
   22c7e:	2318      	movs	r3, #24
   22c80:	18fb      	adds	r3, r7, r3
   22c82:	881b      	ldrh	r3, [r3, #0]
   22c84:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22c86:	231a      	movs	r3, #26
   22c88:	18fb      	adds	r3, r7, r3
   22c8a:	221a      	movs	r2, #26
   22c8c:	18ba      	adds	r2, r7, r2
   22c8e:	8812      	ldrh	r2, [r2, #0]
   22c90:	3202      	adds	r2, #2
   22c92:	801a      	strh	r2, [r3, #0]
   22c94:	231a      	movs	r3, #26
   22c96:	18fa      	adds	r2, r7, r3
   22c98:	1dbb      	adds	r3, r7, #6
   22c9a:	8812      	ldrh	r2, [r2, #0]
   22c9c:	881b      	ldrh	r3, [r3, #0]
   22c9e:	429a      	cmp	r2, r3
   22ca0:	d3c5      	bcc.n	22c2e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   22ca2:	4b0c      	ldr	r3, [pc, #48]	; (22cd4 <nvm_write_buffer+0x138>)
   22ca4:	791b      	ldrb	r3, [r3, #4]
   22ca6:	2201      	movs	r2, #1
   22ca8:	4053      	eors	r3, r2
   22caa:	b2db      	uxtb	r3, r3
   22cac:	2b00      	cmp	r3, #0
   22cae:	d00b      	beq.n	22cc8 <nvm_write_buffer+0x12c>
   22cb0:	1dbb      	adds	r3, r7, #6
   22cb2:	881b      	ldrh	r3, [r3, #0]
   22cb4:	2b3f      	cmp	r3, #63	; 0x3f
   22cb6:	d807      	bhi.n	22cc8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   22cb8:	68fb      	ldr	r3, [r7, #12]
   22cba:	2200      	movs	r2, #0
   22cbc:	0019      	movs	r1, r3
   22cbe:	2004      	movs	r0, #4
   22cc0:	4b08      	ldr	r3, [pc, #32]	; (22ce4 <nvm_write_buffer+0x148>)
   22cc2:	4798      	blx	r3
   22cc4:	0003      	movs	r3, r0
   22cc6:	e000      	b.n	22cca <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   22cc8:	2300      	movs	r3, #0
}
   22cca:	0018      	movs	r0, r3
   22ccc:	46bd      	mov	sp, r7
   22cce:	b008      	add	sp, #32
   22cd0:	bd80      	pop	{r7, pc}
   22cd2:	46c0      	nop			; (mov r8, r8)
   22cd4:	20000414 	.word	0x20000414
   22cd8:	41004000 	.word	0x41004000
   22cdc:	00022929 	.word	0x00022929
   22ce0:	ffffa544 	.word	0xffffa544
   22ce4:	00022a85 	.word	0x00022a85

00022ce8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   22ce8:	b580      	push	{r7, lr}
   22cea:	b088      	sub	sp, #32
   22cec:	af00      	add	r7, sp, #0
   22cee:	60f8      	str	r0, [r7, #12]
   22cf0:	60b9      	str	r1, [r7, #8]
   22cf2:	1dbb      	adds	r3, r7, #6
   22cf4:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22cf6:	4b38      	ldr	r3, [pc, #224]	; (22dd8 <nvm_read_buffer+0xf0>)
   22cf8:	881b      	ldrh	r3, [r3, #0]
   22cfa:	001a      	movs	r2, r3
   22cfc:	4b36      	ldr	r3, [pc, #216]	; (22dd8 <nvm_read_buffer+0xf0>)
   22cfe:	885b      	ldrh	r3, [r3, #2]
   22d00:	435a      	muls	r2, r3
	if (source_address >
   22d02:	68fb      	ldr	r3, [r7, #12]
   22d04:	429a      	cmp	r2, r3
   22d06:	d201      	bcs.n	22d0c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22d08:	2318      	movs	r3, #24
   22d0a:	e060      	b.n	22dce <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   22d0c:	4b32      	ldr	r3, [pc, #200]	; (22dd8 <nvm_read_buffer+0xf0>)
   22d0e:	881b      	ldrh	r3, [r3, #0]
   22d10:	3b01      	subs	r3, #1
   22d12:	001a      	movs	r2, r3
   22d14:	68fb      	ldr	r3, [r7, #12]
   22d16:	4013      	ands	r3, r2
   22d18:	d001      	beq.n	22d1e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22d1a:	2318      	movs	r3, #24
   22d1c:	e057      	b.n	22dce <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22d1e:	4b2e      	ldr	r3, [pc, #184]	; (22dd8 <nvm_read_buffer+0xf0>)
   22d20:	881b      	ldrh	r3, [r3, #0]
   22d22:	1dba      	adds	r2, r7, #6
   22d24:	8812      	ldrh	r2, [r2, #0]
   22d26:	429a      	cmp	r2, r3
   22d28:	d901      	bls.n	22d2e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22d2a:	2317      	movs	r3, #23
   22d2c:	e04f      	b.n	22dce <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22d2e:	4b2b      	ldr	r3, [pc, #172]	; (22ddc <nvm_read_buffer+0xf4>)
   22d30:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22d32:	4b2b      	ldr	r3, [pc, #172]	; (22de0 <nvm_read_buffer+0xf8>)
   22d34:	4798      	blx	r3
   22d36:	0003      	movs	r3, r0
   22d38:	001a      	movs	r2, r3
   22d3a:	2301      	movs	r3, #1
   22d3c:	4053      	eors	r3, r2
   22d3e:	b2db      	uxtb	r3, r3
   22d40:	2b00      	cmp	r3, #0
   22d42:	d001      	beq.n	22d48 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   22d44:	2305      	movs	r3, #5
   22d46:	e042      	b.n	22dce <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22d48:	697b      	ldr	r3, [r7, #20]
   22d4a:	2220      	movs	r2, #32
   22d4c:	32ff      	adds	r2, #255	; 0xff
   22d4e:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   22d50:	68fb      	ldr	r3, [r7, #12]
   22d52:	085b      	lsrs	r3, r3, #1
   22d54:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22d56:	231a      	movs	r3, #26
   22d58:	18fb      	adds	r3, r7, r3
   22d5a:	2200      	movs	r2, #0
   22d5c:	801a      	strh	r2, [r3, #0]
   22d5e:	e02e      	b.n	22dbe <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   22d60:	69fb      	ldr	r3, [r7, #28]
   22d62:	1c5a      	adds	r2, r3, #1
   22d64:	61fa      	str	r2, [r7, #28]
   22d66:	005b      	lsls	r3, r3, #1
   22d68:	001a      	movs	r2, r3
   22d6a:	2312      	movs	r3, #18
   22d6c:	18fb      	adds	r3, r7, r3
   22d6e:	8812      	ldrh	r2, [r2, #0]
   22d70:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   22d72:	231a      	movs	r3, #26
   22d74:	18fb      	adds	r3, r7, r3
   22d76:	881b      	ldrh	r3, [r3, #0]
   22d78:	68ba      	ldr	r2, [r7, #8]
   22d7a:	18d3      	adds	r3, r2, r3
   22d7c:	2212      	movs	r2, #18
   22d7e:	18ba      	adds	r2, r7, r2
   22d80:	8812      	ldrh	r2, [r2, #0]
   22d82:	b2d2      	uxtb	r2, r2
   22d84:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22d86:	231a      	movs	r3, #26
   22d88:	18fb      	adds	r3, r7, r3
   22d8a:	881a      	ldrh	r2, [r3, #0]
   22d8c:	1dbb      	adds	r3, r7, #6
   22d8e:	881b      	ldrh	r3, [r3, #0]
   22d90:	3b01      	subs	r3, #1
   22d92:	429a      	cmp	r2, r3
   22d94:	da0c      	bge.n	22db0 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   22d96:	231a      	movs	r3, #26
   22d98:	18fb      	adds	r3, r7, r3
   22d9a:	881b      	ldrh	r3, [r3, #0]
   22d9c:	3301      	adds	r3, #1
   22d9e:	68ba      	ldr	r2, [r7, #8]
   22da0:	18d3      	adds	r3, r2, r3
   22da2:	2212      	movs	r2, #18
   22da4:	18ba      	adds	r2, r7, r2
   22da6:	8812      	ldrh	r2, [r2, #0]
   22da8:	0a12      	lsrs	r2, r2, #8
   22daa:	b292      	uxth	r2, r2
   22dac:	b2d2      	uxtb	r2, r2
   22dae:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22db0:	231a      	movs	r3, #26
   22db2:	18fb      	adds	r3, r7, r3
   22db4:	221a      	movs	r2, #26
   22db6:	18ba      	adds	r2, r7, r2
   22db8:	8812      	ldrh	r2, [r2, #0]
   22dba:	3202      	adds	r2, #2
   22dbc:	801a      	strh	r2, [r3, #0]
   22dbe:	231a      	movs	r3, #26
   22dc0:	18fa      	adds	r2, r7, r3
   22dc2:	1dbb      	adds	r3, r7, #6
   22dc4:	8812      	ldrh	r2, [r2, #0]
   22dc6:	881b      	ldrh	r3, [r3, #0]
   22dc8:	429a      	cmp	r2, r3
   22dca:	d3c9      	bcc.n	22d60 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   22dcc:	2300      	movs	r3, #0
}
   22dce:	0018      	movs	r0, r3
   22dd0:	46bd      	mov	sp, r7
   22dd2:	b008      	add	sp, #32
   22dd4:	bd80      	pop	{r7, pc}
   22dd6:	46c0      	nop			; (mov r8, r8)
   22dd8:	20000414 	.word	0x20000414
   22ddc:	41004000 	.word	0x41004000
   22de0:	00022929 	.word	0x00022929

00022de4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   22de4:	b580      	push	{r7, lr}
   22de6:	b084      	sub	sp, #16
   22de8:	af00      	add	r7, sp, #0
   22dea:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22dec:	4b23      	ldr	r3, [pc, #140]	; (22e7c <nvm_erase_row+0x98>)
   22dee:	881b      	ldrh	r3, [r3, #0]
   22df0:	001a      	movs	r2, r3
   22df2:	4b22      	ldr	r3, [pc, #136]	; (22e7c <nvm_erase_row+0x98>)
   22df4:	885b      	ldrh	r3, [r3, #2]
   22df6:	435a      	muls	r2, r3
	if (row_address >
   22df8:	687b      	ldr	r3, [r7, #4]
   22dfa:	429a      	cmp	r2, r3
   22dfc:	d201      	bcs.n	22e02 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22dfe:	2318      	movs	r3, #24
   22e00:	e037      	b.n	22e72 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   22e02:	4b1e      	ldr	r3, [pc, #120]	; (22e7c <nvm_erase_row+0x98>)
   22e04:	881b      	ldrh	r3, [r3, #0]
   22e06:	009b      	lsls	r3, r3, #2
   22e08:	3b01      	subs	r3, #1
   22e0a:	001a      	movs	r2, r3
   22e0c:	687b      	ldr	r3, [r7, #4]
   22e0e:	4013      	ands	r3, r2
   22e10:	d001      	beq.n	22e16 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   22e12:	2318      	movs	r3, #24
   22e14:	e02d      	b.n	22e72 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22e16:	4b1a      	ldr	r3, [pc, #104]	; (22e80 <nvm_erase_row+0x9c>)
   22e18:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22e1a:	4b1a      	ldr	r3, [pc, #104]	; (22e84 <nvm_erase_row+0xa0>)
   22e1c:	4798      	blx	r3
   22e1e:	0003      	movs	r3, r0
   22e20:	001a      	movs	r2, r3
   22e22:	2301      	movs	r3, #1
   22e24:	4053      	eors	r3, r2
   22e26:	b2db      	uxtb	r3, r3
   22e28:	2b00      	cmp	r3, #0
   22e2a:	d001      	beq.n	22e30 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   22e2c:	2305      	movs	r3, #5
   22e2e:	e020      	b.n	22e72 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22e30:	68fb      	ldr	r3, [r7, #12]
   22e32:	2220      	movs	r2, #32
   22e34:	32ff      	adds	r2, #255	; 0xff
   22e36:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   22e38:	687b      	ldr	r3, [r7, #4]
   22e3a:	089b      	lsrs	r3, r3, #2
   22e3c:	005a      	lsls	r2, r3, #1
   22e3e:	68fb      	ldr	r3, [r7, #12]
   22e40:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   22e42:	68fb      	ldr	r3, [r7, #12]
   22e44:	4a10      	ldr	r2, [pc, #64]	; (22e88 <nvm_erase_row+0xa4>)
   22e46:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   22e48:	46c0      	nop			; (mov r8, r8)
   22e4a:	4b0e      	ldr	r3, [pc, #56]	; (22e84 <nvm_erase_row+0xa0>)
   22e4c:	4798      	blx	r3
   22e4e:	0003      	movs	r3, r0
   22e50:	001a      	movs	r2, r3
   22e52:	2301      	movs	r3, #1
   22e54:	4053      	eors	r3, r2
   22e56:	b2db      	uxtb	r3, r3
   22e58:	2b00      	cmp	r3, #0
   22e5a:	d1f6      	bne.n	22e4a <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   22e5c:	68fb      	ldr	r3, [r7, #12]
   22e5e:	8b1b      	ldrh	r3, [r3, #24]
   22e60:	b29b      	uxth	r3, r3
   22e62:	b2db      	uxtb	r3, r3
   22e64:	001a      	movs	r2, r3
   22e66:	231c      	movs	r3, #28
   22e68:	4013      	ands	r3, r2
   22e6a:	d001      	beq.n	22e70 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   22e6c:	2304      	movs	r3, #4
   22e6e:	e000      	b.n	22e72 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   22e70:	2300      	movs	r3, #0
}
   22e72:	0018      	movs	r0, r3
   22e74:	46bd      	mov	sp, r7
   22e76:	b004      	add	sp, #16
   22e78:	bd80      	pop	{r7, pc}
   22e7a:	46c0      	nop			; (mov r8, r8)
   22e7c:	20000414 	.word	0x20000414
   22e80:	41004000 	.word	0x41004000
   22e84:	00022929 	.word	0x00022929
   22e88:	ffffa502 	.word	0xffffa502

00022e8c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   22e8c:	b580      	push	{r7, lr}
   22e8e:	b086      	sub	sp, #24
   22e90:	af00      	add	r7, sp, #0
   22e92:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22e94:	4b2a      	ldr	r3, [pc, #168]	; (22f40 <nvm_get_parameters+0xb4>)
   22e96:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22e98:	697b      	ldr	r3, [r7, #20]
   22e9a:	2220      	movs	r2, #32
   22e9c:	32ff      	adds	r2, #255	; 0xff
   22e9e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   22ea0:	697b      	ldr	r3, [r7, #20]
   22ea2:	689b      	ldr	r3, [r3, #8]
   22ea4:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   22ea6:	693b      	ldr	r3, [r7, #16]
   22ea8:	0c1b      	lsrs	r3, r3, #16
   22eaa:	2207      	movs	r2, #7
   22eac:	4013      	ands	r3, r2
   22eae:	2208      	movs	r2, #8
   22eb0:	409a      	lsls	r2, r3
   22eb2:	0013      	movs	r3, r2
	parameters->page_size =
   22eb4:	b2da      	uxtb	r2, r3
   22eb6:	687b      	ldr	r3, [r7, #4]
   22eb8:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   22eba:	693b      	ldr	r3, [r7, #16]
   22ebc:	b29a      	uxth	r2, r3
   22ebe:	687b      	ldr	r3, [r7, #4]
   22ec0:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   22ec2:	4b20      	ldr	r3, [pc, #128]	; (22f44 <nvm_get_parameters+0xb8>)
   22ec4:	881b      	ldrh	r3, [r3, #0]
   22ec6:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   22ec8:	091b      	lsrs	r3, r3, #4
   22eca:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   22ecc:	230e      	movs	r3, #14
   22ece:	18fb      	adds	r3, r7, r3
   22ed0:	2107      	movs	r1, #7
   22ed2:	400a      	ands	r2, r1
   22ed4:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   22ed6:	230e      	movs	r3, #14
   22ed8:	18fb      	adds	r3, r7, r3
   22eda:	881b      	ldrh	r3, [r3, #0]
   22edc:	2b07      	cmp	r3, #7
   22ede:	d103      	bne.n	22ee8 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   22ee0:	687b      	ldr	r3, [r7, #4]
   22ee2:	2200      	movs	r2, #0
   22ee4:	605a      	str	r2, [r3, #4]
   22ee6:	e00a      	b.n	22efe <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   22ee8:	230e      	movs	r3, #14
   22eea:	18fb      	adds	r3, r7, r3
   22eec:	881b      	ldrh	r3, [r3, #0]
   22eee:	2206      	movs	r2, #6
   22ef0:	1ad3      	subs	r3, r2, r3
   22ef2:	2204      	movs	r2, #4
   22ef4:	409a      	lsls	r2, r3
   22ef6:	0013      	movs	r3, r2
   22ef8:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   22efa:	687b      	ldr	r3, [r7, #4]
   22efc:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   22efe:	4b11      	ldr	r3, [pc, #68]	; (22f44 <nvm_get_parameters+0xb8>)
   22f00:	881b      	ldrh	r3, [r3, #0]
   22f02:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   22f04:	230c      	movs	r3, #12
   22f06:	18fb      	adds	r3, r7, r3
   22f08:	2107      	movs	r1, #7
   22f0a:	400a      	ands	r2, r1
   22f0c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   22f0e:	230c      	movs	r3, #12
   22f10:	18fb      	adds	r3, r7, r3
   22f12:	881b      	ldrh	r3, [r3, #0]
   22f14:	2b07      	cmp	r3, #7
   22f16:	d103      	bne.n	22f20 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   22f18:	687b      	ldr	r3, [r7, #4]
   22f1a:	2200      	movs	r2, #0
   22f1c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   22f1e:	e00a      	b.n	22f36 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   22f20:	230c      	movs	r3, #12
   22f22:	18fb      	adds	r3, r7, r3
   22f24:	881b      	ldrh	r3, [r3, #0]
   22f26:	2207      	movs	r2, #7
   22f28:	1ad3      	subs	r3, r2, r3
   22f2a:	2204      	movs	r2, #4
   22f2c:	409a      	lsls	r2, r3
   22f2e:	0013      	movs	r3, r2
   22f30:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   22f32:	687b      	ldr	r3, [r7, #4]
   22f34:	609a      	str	r2, [r3, #8]
}
   22f36:	46c0      	nop			; (mov r8, r8)
   22f38:	46bd      	mov	sp, r7
   22f3a:	b006      	add	sp, #24
   22f3c:	bd80      	pop	{r7, pc}
   22f3e:	46c0      	nop			; (mov r8, r8)
   22f40:	41004000 	.word	0x41004000
   22f44:	00804000 	.word	0x00804000

00022f48 <system_pinmux_get_config_defaults>:
{
   22f48:	b580      	push	{r7, lr}
   22f4a:	b082      	sub	sp, #8
   22f4c:	af00      	add	r7, sp, #0
   22f4e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22f50:	687b      	ldr	r3, [r7, #4]
   22f52:	2280      	movs	r2, #128	; 0x80
   22f54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   22f56:	687b      	ldr	r3, [r7, #4]
   22f58:	2200      	movs	r2, #0
   22f5a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22f5c:	687b      	ldr	r3, [r7, #4]
   22f5e:	2201      	movs	r2, #1
   22f60:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22f62:	687b      	ldr	r3, [r7, #4]
   22f64:	2200      	movs	r2, #0
   22f66:	70da      	strb	r2, [r3, #3]
}
   22f68:	46c0      	nop			; (mov r8, r8)
   22f6a:	46bd      	mov	sp, r7
   22f6c:	b002      	add	sp, #8
   22f6e:	bd80      	pop	{r7, pc}

00022f70 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   22f70:	b580      	push	{r7, lr}
   22f72:	b084      	sub	sp, #16
   22f74:	af00      	add	r7, sp, #0
   22f76:	0002      	movs	r2, r0
   22f78:	6039      	str	r1, [r7, #0]
   22f7a:	1dfb      	adds	r3, r7, #7
   22f7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   22f7e:	230c      	movs	r3, #12
   22f80:	18fb      	adds	r3, r7, r3
   22f82:	0018      	movs	r0, r3
   22f84:	4b10      	ldr	r3, [pc, #64]	; (22fc8 <port_pin_set_config+0x58>)
   22f86:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   22f88:	230c      	movs	r3, #12
   22f8a:	18fb      	adds	r3, r7, r3
   22f8c:	2280      	movs	r2, #128	; 0x80
   22f8e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   22f90:	683b      	ldr	r3, [r7, #0]
   22f92:	781a      	ldrb	r2, [r3, #0]
   22f94:	230c      	movs	r3, #12
   22f96:	18fb      	adds	r3, r7, r3
   22f98:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   22f9a:	683b      	ldr	r3, [r7, #0]
   22f9c:	785a      	ldrb	r2, [r3, #1]
   22f9e:	230c      	movs	r3, #12
   22fa0:	18fb      	adds	r3, r7, r3
   22fa2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   22fa4:	683b      	ldr	r3, [r7, #0]
   22fa6:	789a      	ldrb	r2, [r3, #2]
   22fa8:	230c      	movs	r3, #12
   22faa:	18fb      	adds	r3, r7, r3
   22fac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   22fae:	230c      	movs	r3, #12
   22fb0:	18fa      	adds	r2, r7, r3
   22fb2:	1dfb      	adds	r3, r7, #7
   22fb4:	781b      	ldrb	r3, [r3, #0]
   22fb6:	0011      	movs	r1, r2
   22fb8:	0018      	movs	r0, r3
   22fba:	4b04      	ldr	r3, [pc, #16]	; (22fcc <port_pin_set_config+0x5c>)
   22fbc:	4798      	blx	r3
}
   22fbe:	46c0      	nop			; (mov r8, r8)
   22fc0:	46bd      	mov	sp, r7
   22fc2:	b004      	add	sp, #16
   22fc4:	bd80      	pop	{r7, pc}
   22fc6:	46c0      	nop			; (mov r8, r8)
   22fc8:	00022f49 	.word	0x00022f49
   22fcc:	00024ca1 	.word	0x00024ca1

00022fd0 <nvm_get_config_defaults>:
{
   22fd0:	b580      	push	{r7, lr}
   22fd2:	b082      	sub	sp, #8
   22fd4:	af00      	add	r7, sp, #0
   22fd6:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   22fd8:	687b      	ldr	r3, [r7, #4]
   22fda:	2200      	movs	r2, #0
   22fdc:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   22fde:	687b      	ldr	r3, [r7, #4]
   22fe0:	2201      	movs	r2, #1
   22fe2:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   22fe4:	4b08      	ldr	r3, [pc, #32]	; (23008 <nvm_get_config_defaults+0x38>)
   22fe6:	685b      	ldr	r3, [r3, #4]
   22fe8:	06db      	lsls	r3, r3, #27
   22fea:	0f1b      	lsrs	r3, r3, #28
   22fec:	b2db      	uxtb	r3, r3
   22fee:	001a      	movs	r2, r3
   22ff0:	687b      	ldr	r3, [r7, #4]
   22ff2:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   22ff4:	687b      	ldr	r3, [r7, #4]
   22ff6:	2200      	movs	r2, #0
   22ff8:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   22ffa:	687b      	ldr	r3, [r7, #4]
   22ffc:	2200      	movs	r2, #0
   22ffe:	711a      	strb	r2, [r3, #4]
}
   23000:	46c0      	nop			; (mov r8, r8)
   23002:	46bd      	mov	sp, r7
   23004:	b002      	add	sp, #8
   23006:	bd80      	pop	{r7, pc}
   23008:	41004000 	.word	0x41004000

0002300c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   2300c:	b590      	push	{r4, r7, lr}
   2300e:	b085      	sub	sp, #20
   23010:	af00      	add	r7, sp, #0
   23012:	0002      	movs	r2, r0
   23014:	1dfb      	adds	r3, r7, #7
   23016:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23018:	230f      	movs	r3, #15
   2301a:	18fb      	adds	r3, r7, r3
   2301c:	2200      	movs	r2, #0
   2301e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   23020:	4b0a      	ldr	r3, [pc, #40]	; (2304c <_eeprom_emulator_nvm_erase_row+0x40>)
   23022:	685b      	ldr	r3, [r3, #4]
   23024:	1dfa      	adds	r2, r7, #7
   23026:	7812      	ldrb	r2, [r2, #0]
   23028:	0212      	lsls	r2, r2, #8
   2302a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   2302c:	220f      	movs	r2, #15
   2302e:	18bc      	adds	r4, r7, r2
   23030:	0018      	movs	r0, r3
   23032:	4b07      	ldr	r3, [pc, #28]	; (23050 <_eeprom_emulator_nvm_erase_row+0x44>)
   23034:	4798      	blx	r3
   23036:	0003      	movs	r3, r0
   23038:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   2303a:	230f      	movs	r3, #15
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	781b      	ldrb	r3, [r3, #0]
   23040:	2b05      	cmp	r3, #5
   23042:	d0ed      	beq.n	23020 <_eeprom_emulator_nvm_erase_row+0x14>
}
   23044:	46c0      	nop			; (mov r8, r8)
   23046:	46bd      	mov	sp, r7
   23048:	b005      	add	sp, #20
   2304a:	bd90      	pop	{r4, r7, pc}
   2304c:	2000041c 	.word	0x2000041c
   23050:	00022de5 	.word	0x00022de5

00023054 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   23054:	b590      	push	{r4, r7, lr}
   23056:	b085      	sub	sp, #20
   23058:	af00      	add	r7, sp, #0
   2305a:	0002      	movs	r2, r0
   2305c:	6039      	str	r1, [r7, #0]
   2305e:	1dbb      	adds	r3, r7, #6
   23060:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23062:	230f      	movs	r3, #15
   23064:	18fb      	adds	r3, r7, r3
   23066:	2200      	movs	r2, #0
   23068:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   2306a:	4b0c      	ldr	r3, [pc, #48]	; (2309c <_eeprom_emulator_nvm_fill_cache+0x48>)
   2306c:	685a      	ldr	r2, [r3, #4]
   2306e:	1dbb      	adds	r3, r7, #6
   23070:	881b      	ldrh	r3, [r3, #0]
   23072:	019b      	lsls	r3, r3, #6
   23074:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   23076:	0018      	movs	r0, r3
   23078:	230f      	movs	r3, #15
   2307a:	18fc      	adds	r4, r7, r3
   2307c:	683b      	ldr	r3, [r7, #0]
   2307e:	2240      	movs	r2, #64	; 0x40
   23080:	0019      	movs	r1, r3
   23082:	4b07      	ldr	r3, [pc, #28]	; (230a0 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   23084:	4798      	blx	r3
   23086:	0003      	movs	r3, r0
   23088:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   2308a:	230f      	movs	r3, #15
   2308c:	18fb      	adds	r3, r7, r3
   2308e:	781b      	ldrb	r3, [r3, #0]
   23090:	2b05      	cmp	r3, #5
   23092:	d0ea      	beq.n	2306a <_eeprom_emulator_nvm_fill_cache+0x16>
}
   23094:	46c0      	nop			; (mov r8, r8)
   23096:	46bd      	mov	sp, r7
   23098:	b005      	add	sp, #20
   2309a:	bd90      	pop	{r4, r7, pc}
   2309c:	2000041c 	.word	0x2000041c
   230a0:	00022b9d 	.word	0x00022b9d

000230a4 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   230a4:	b590      	push	{r4, r7, lr}
   230a6:	b085      	sub	sp, #20
   230a8:	af00      	add	r7, sp, #0
   230aa:	0002      	movs	r2, r0
   230ac:	1dbb      	adds	r3, r7, #6
   230ae:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   230b0:	230f      	movs	r3, #15
   230b2:	18fb      	adds	r3, r7, r3
   230b4:	2200      	movs	r2, #0
   230b6:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   230b8:	4b0b      	ldr	r3, [pc, #44]	; (230e8 <_eeprom_emulator_nvm_commit_cache+0x44>)
   230ba:	685a      	ldr	r2, [r3, #4]
   230bc:	1dbb      	adds	r3, r7, #6
   230be:	881b      	ldrh	r3, [r3, #0]
   230c0:	019b      	lsls	r3, r3, #6
   230c2:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   230c4:	220f      	movs	r2, #15
   230c6:	18bc      	adds	r4, r7, r2
   230c8:	2200      	movs	r2, #0
   230ca:	0019      	movs	r1, r3
   230cc:	2004      	movs	r0, #4
   230ce:	4b07      	ldr	r3, [pc, #28]	; (230ec <_eeprom_emulator_nvm_commit_cache+0x48>)
   230d0:	4798      	blx	r3
   230d2:	0003      	movs	r3, r0
   230d4:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   230d6:	230f      	movs	r3, #15
   230d8:	18fb      	adds	r3, r7, r3
   230da:	781b      	ldrb	r3, [r3, #0]
   230dc:	2b05      	cmp	r3, #5
   230de:	d0eb      	beq.n	230b8 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   230e0:	46c0      	nop			; (mov r8, r8)
   230e2:	46bd      	mov	sp, r7
   230e4:	b005      	add	sp, #20
   230e6:	bd90      	pop	{r4, r7, pc}
   230e8:	2000041c 	.word	0x2000041c
   230ec:	00022a85 	.word	0x00022a85

000230f0 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   230f0:	b590      	push	{r4, r7, lr}
   230f2:	b085      	sub	sp, #20
   230f4:	af00      	add	r7, sp, #0
   230f6:	0002      	movs	r2, r0
   230f8:	6039      	str	r1, [r7, #0]
   230fa:	1dbb      	adds	r3, r7, #6
   230fc:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   230fe:	230f      	movs	r3, #15
   23100:	18fb      	adds	r3, r7, r3
   23102:	2200      	movs	r2, #0
   23104:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   23106:	4b0c      	ldr	r3, [pc, #48]	; (23138 <_eeprom_emulator_nvm_read_page+0x48>)
   23108:	685a      	ldr	r2, [r3, #4]
   2310a:	1dbb      	adds	r3, r7, #6
   2310c:	881b      	ldrh	r3, [r3, #0]
   2310e:	019b      	lsls	r3, r3, #6
   23110:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   23112:	0018      	movs	r0, r3
   23114:	230f      	movs	r3, #15
   23116:	18fc      	adds	r4, r7, r3
   23118:	683b      	ldr	r3, [r7, #0]
   2311a:	2240      	movs	r2, #64	; 0x40
   2311c:	0019      	movs	r1, r3
   2311e:	4b07      	ldr	r3, [pc, #28]	; (2313c <_eeprom_emulator_nvm_read_page+0x4c>)
   23120:	4798      	blx	r3
   23122:	0003      	movs	r3, r0
   23124:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   23126:	230f      	movs	r3, #15
   23128:	18fb      	adds	r3, r7, r3
   2312a:	781b      	ldrb	r3, [r3, #0]
   2312c:	2b05      	cmp	r3, #5
   2312e:	d0ea      	beq.n	23106 <_eeprom_emulator_nvm_read_page+0x16>
}
   23130:	46c0      	nop			; (mov r8, r8)
   23132:	46bd      	mov	sp, r7
   23134:	b005      	add	sp, #20
   23136:	bd90      	pop	{r4, r7, pc}
   23138:	2000041c 	.word	0x2000041c
   2313c:	00022ce9 	.word	0x00022ce9

00023140 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   23140:	b580      	push	{r7, lr}
   23142:	b092      	sub	sp, #72	; 0x48
   23144:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   23146:	2346      	movs	r3, #70	; 0x46
   23148:	18fb      	adds	r3, r7, r3
   2314a:	2200      	movs	r2, #0
   2314c:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   2314e:	4b32      	ldr	r3, [pc, #200]	; (23218 <_eeprom_emulator_format_memory+0xd8>)
   23150:	2287      	movs	r2, #135	; 0x87
   23152:	2100      	movs	r1, #0
   23154:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   23156:	4b30      	ldr	r3, [pc, #192]	; (23218 <_eeprom_emulator_format_memory+0xd8>)
   23158:	2287      	movs	r2, #135	; 0x87
   2315a:	5c9b      	ldrb	r3, [r3, r2]
   2315c:	0018      	movs	r0, r3
   2315e:	4b2f      	ldr	r3, [pc, #188]	; (2321c <_eeprom_emulator_format_memory+0xdc>)
   23160:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23162:	2344      	movs	r3, #68	; 0x44
   23164:	18fb      	adds	r3, r7, r3
   23166:	2204      	movs	r2, #4
   23168:	801a      	strh	r2, [r3, #0]
   2316a:	e04a      	b.n	23202 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   2316c:	2344      	movs	r3, #68	; 0x44
   2316e:	18fb      	adds	r3, r7, r3
   23170:	881a      	ldrh	r2, [r3, #0]
   23172:	4b29      	ldr	r3, [pc, #164]	; (23218 <_eeprom_emulator_format_memory+0xd8>)
   23174:	891b      	ldrh	r3, [r3, #8]
   23176:	3b01      	subs	r3, #1
   23178:	429a      	cmp	r2, r3
   2317a:	d03a      	beq.n	231f2 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   2317c:	2344      	movs	r3, #68	; 0x44
   2317e:	18fb      	adds	r3, r7, r3
   23180:	881b      	ldrh	r3, [r3, #0]
   23182:	2203      	movs	r2, #3
   23184:	4013      	ands	r3, r2
   23186:	b29b      	uxth	r3, r3
   23188:	2b00      	cmp	r3, #0
   2318a:	d108      	bne.n	2319e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   2318c:	2344      	movs	r3, #68	; 0x44
   2318e:	18fb      	adds	r3, r7, r3
   23190:	881b      	ldrh	r3, [r3, #0]
   23192:	089b      	lsrs	r3, r3, #2
   23194:	b29b      	uxth	r3, r3
   23196:	b2db      	uxtb	r3, r3
   23198:	0018      	movs	r0, r3
   2319a:	4b20      	ldr	r3, [pc, #128]	; (2321c <_eeprom_emulator_format_memory+0xdc>)
   2319c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   2319e:	2344      	movs	r3, #68	; 0x44
   231a0:	18fb      	adds	r3, r7, r3
   231a2:	881b      	ldrh	r3, [r3, #0]
   231a4:	2203      	movs	r2, #3
   231a6:	4013      	ands	r3, r2
   231a8:	b29b      	uxth	r3, r3
   231aa:	2b01      	cmp	r3, #1
   231ac:	d822      	bhi.n	231f4 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   231ae:	1d3b      	adds	r3, r7, #4
   231b0:	2240      	movs	r2, #64	; 0x40
   231b2:	21ff      	movs	r1, #255	; 0xff
   231b4:	0018      	movs	r0, r3
   231b6:	4b1a      	ldr	r3, [pc, #104]	; (23220 <_eeprom_emulator_format_memory+0xe0>)
   231b8:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   231ba:	2346      	movs	r3, #70	; 0x46
   231bc:	18fb      	adds	r3, r7, r3
   231be:	881b      	ldrh	r3, [r3, #0]
   231c0:	b2da      	uxtb	r2, r3
   231c2:	1d3b      	adds	r3, r7, #4
   231c4:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   231c6:	1d3a      	adds	r2, r7, #4
   231c8:	2344      	movs	r3, #68	; 0x44
   231ca:	18fb      	adds	r3, r7, r3
   231cc:	881b      	ldrh	r3, [r3, #0]
   231ce:	0011      	movs	r1, r2
   231d0:	0018      	movs	r0, r3
   231d2:	4b14      	ldr	r3, [pc, #80]	; (23224 <_eeprom_emulator_format_memory+0xe4>)
   231d4:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   231d6:	2344      	movs	r3, #68	; 0x44
   231d8:	18fb      	adds	r3, r7, r3
   231da:	881b      	ldrh	r3, [r3, #0]
   231dc:	0018      	movs	r0, r3
   231de:	4b12      	ldr	r3, [pc, #72]	; (23228 <_eeprom_emulator_format_memory+0xe8>)
   231e0:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   231e2:	2346      	movs	r3, #70	; 0x46
   231e4:	18fb      	adds	r3, r7, r3
   231e6:	881a      	ldrh	r2, [r3, #0]
   231e8:	2346      	movs	r3, #70	; 0x46
   231ea:	18fb      	adds	r3, r7, r3
   231ec:	3201      	adds	r2, #1
   231ee:	801a      	strh	r2, [r3, #0]
   231f0:	e000      	b.n	231f4 <_eeprom_emulator_format_memory+0xb4>
			continue;
   231f2:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   231f4:	2344      	movs	r3, #68	; 0x44
   231f6:	18fb      	adds	r3, r7, r3
   231f8:	881a      	ldrh	r2, [r3, #0]
   231fa:	2344      	movs	r3, #68	; 0x44
   231fc:	18fb      	adds	r3, r7, r3
   231fe:	3201      	adds	r2, #1
   23200:	801a      	strh	r2, [r3, #0]
   23202:	4b05      	ldr	r3, [pc, #20]	; (23218 <_eeprom_emulator_format_memory+0xd8>)
   23204:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23206:	2244      	movs	r2, #68	; 0x44
   23208:	18ba      	adds	r2, r7, r2
   2320a:	8812      	ldrh	r2, [r2, #0]
   2320c:	429a      	cmp	r2, r3
   2320e:	d3ad      	bcc.n	2316c <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   23210:	46c0      	nop			; (mov r8, r8)
   23212:	46bd      	mov	sp, r7
   23214:	b012      	add	sp, #72	; 0x48
   23216:	bd80      	pop	{r7, pc}
   23218:	2000041c 	.word	0x2000041c
   2321c:	0002300d 	.word	0x0002300d
   23220:	00028e13 	.word	0x00028e13
   23224:	00023055 	.word	0x00023055
   23228:	000230a5 	.word	0x000230a5

0002322c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   2322c:	b580      	push	{r7, lr}
   2322e:	b082      	sub	sp, #8
   23230:	af00      	add	r7, sp, #0
   23232:	0002      	movs	r2, r0
   23234:	1dbb      	adds	r3, r7, #6
   23236:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23238:	4b14      	ldr	r3, [pc, #80]	; (2328c <_eeprom_emulator_is_full_row+0x60>)
   2323a:	685a      	ldr	r2, [r3, #4]
   2323c:	1dbb      	adds	r3, r7, #6
   2323e:	881b      	ldrh	r3, [r3, #0]
   23240:	019b      	lsls	r3, r3, #6
   23242:	18d3      	adds	r3, r2, r3
   23244:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   23246:	4b11      	ldr	r3, [pc, #68]	; (2328c <_eeprom_emulator_is_full_row+0x60>)
   23248:	6859      	ldr	r1, [r3, #4]
   2324a:	1dbb      	adds	r3, r7, #6
   2324c:	881b      	ldrh	r3, [r3, #0]
   2324e:	3302      	adds	r3, #2
   23250:	019b      	lsls	r3, r3, #6
   23252:	18cb      	adds	r3, r1, r3
   23254:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23256:	429a      	cmp	r2, r3
   23258:	d011      	beq.n	2327e <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   2325a:	4b0c      	ldr	r3, [pc, #48]	; (2328c <_eeprom_emulator_is_full_row+0x60>)
   2325c:	685a      	ldr	r2, [r3, #4]
   2325e:	1dbb      	adds	r3, r7, #6
   23260:	881b      	ldrh	r3, [r3, #0]
   23262:	3301      	adds	r3, #1
   23264:	019b      	lsls	r3, r3, #6
   23266:	18d3      	adds	r3, r2, r3
   23268:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   2326a:	4b08      	ldr	r3, [pc, #32]	; (2328c <_eeprom_emulator_is_full_row+0x60>)
   2326c:	6859      	ldr	r1, [r3, #4]
   2326e:	1dbb      	adds	r3, r7, #6
   23270:	881b      	ldrh	r3, [r3, #0]
   23272:	3302      	adds	r3, #2
   23274:	019b      	lsls	r3, r3, #6
   23276:	18cb      	adds	r3, r1, r3
   23278:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   2327a:	429a      	cmp	r2, r3
   2327c:	d101      	bne.n	23282 <_eeprom_emulator_is_full_row+0x56>
		return true;
   2327e:	2301      	movs	r3, #1
   23280:	e000      	b.n	23284 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   23282:	2300      	movs	r3, #0
	}
}
   23284:	0018      	movs	r0, r3
   23286:	46bd      	mov	sp, r7
   23288:	b002      	add	sp, #8
   2328a:	bd80      	pop	{r7, pc}
   2328c:	2000041c 	.word	0x2000041c

00023290 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   23290:	b580      	push	{r7, lr}
   23292:	b082      	sub	sp, #8
   23294:	af00      	add	r7, sp, #0
   23296:	0002      	movs	r2, r0
   23298:	1dbb      	adds	r3, r7, #6
   2329a:	801a      	strh	r2, [r3, #0]
   2329c:	1d3b      	adds	r3, r7, #4
   2329e:	1c0a      	adds	r2, r1, #0
   232a0:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   232a2:	1dbb      	adds	r3, r7, #6
   232a4:	881b      	ldrh	r3, [r3, #0]
   232a6:	0018      	movs	r0, r3
   232a8:	4b0c      	ldr	r3, [pc, #48]	; (232dc <_eeprom_emulator_erase_invalid_page+0x4c>)
   232aa:	4798      	blx	r3
   232ac:	1e03      	subs	r3, r0, #0
   232ae:	d008      	beq.n	232c2 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   232b0:	1dbb      	adds	r3, r7, #6
   232b2:	881b      	ldrh	r3, [r3, #0]
   232b4:	089b      	lsrs	r3, r3, #2
   232b6:	b29b      	uxth	r3, r3
   232b8:	b2db      	uxtb	r3, r3
   232ba:	0018      	movs	r0, r3
   232bc:	4b08      	ldr	r3, [pc, #32]	; (232e0 <_eeprom_emulator_erase_invalid_page+0x50>)
   232be:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   232c0:	e007      	b.n	232d2 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   232c2:	1d3b      	adds	r3, r7, #4
   232c4:	881b      	ldrh	r3, [r3, #0]
   232c6:	089b      	lsrs	r3, r3, #2
   232c8:	b29b      	uxth	r3, r3
   232ca:	b2db      	uxtb	r3, r3
   232cc:	0018      	movs	r0, r3
   232ce:	4b04      	ldr	r3, [pc, #16]	; (232e0 <_eeprom_emulator_erase_invalid_page+0x50>)
   232d0:	4798      	blx	r3
}
   232d2:	46c0      	nop			; (mov r8, r8)
   232d4:	46bd      	mov	sp, r7
   232d6:	b002      	add	sp, #8
   232d8:	bd80      	pop	{r7, pc}
   232da:	46c0      	nop			; (mov r8, r8)
   232dc:	0002322d 	.word	0x0002322d
   232e0:	0002300d 	.word	0x0002300d

000232e4 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   232e4:	b580      	push	{r7, lr}
   232e6:	b082      	sub	sp, #8
   232e8:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   232ea:	1dbb      	adds	r3, r7, #6
   232ec:	2200      	movs	r2, #0
   232ee:	801a      	strh	r2, [r3, #0]
   232f0:	1d3b      	adds	r3, r7, #4
   232f2:	2200      	movs	r2, #0
   232f4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   232f6:	1dbb      	adds	r3, r7, #6
   232f8:	2200      	movs	r2, #0
   232fa:	801a      	strh	r2, [r3, #0]
   232fc:	e04a      	b.n	23394 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   232fe:	4b2a      	ldr	r3, [pc, #168]	; (233a8 <_eeprom_emulator_check_logical_page+0xc4>)
   23300:	685a      	ldr	r2, [r3, #4]
   23302:	1dbb      	adds	r3, r7, #6
   23304:	881b      	ldrh	r3, [r3, #0]
   23306:	019b      	lsls	r3, r3, #6
   23308:	18d3      	adds	r3, r2, r3
   2330a:	781a      	ldrb	r2, [r3, #0]
   2330c:	1cbb      	adds	r3, r7, #2
   2330e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23310:	1cbb      	adds	r3, r7, #2
   23312:	881b      	ldrh	r3, [r3, #0]
   23314:	2bff      	cmp	r3, #255	; 0xff
   23316:	d037      	beq.n	23388 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23318:	1d3b      	adds	r3, r7, #4
   2331a:	1dba      	adds	r2, r7, #6
   2331c:	8812      	ldrh	r2, [r2, #0]
   2331e:	3204      	adds	r2, #4
   23320:	801a      	strh	r2, [r3, #0]
   23322:	e02a      	b.n	2337a <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   23324:	1d3b      	adds	r3, r7, #4
   23326:	881a      	ldrh	r2, [r3, #0]
   23328:	4b1f      	ldr	r3, [pc, #124]	; (233a8 <_eeprom_emulator_check_logical_page+0xc4>)
   2332a:	891b      	ldrh	r3, [r3, #8]
   2332c:	3b01      	subs	r3, #1
   2332e:	429a      	cmp	r2, r3
   23330:	d01b      	beq.n	2336a <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   23332:	4b1d      	ldr	r3, [pc, #116]	; (233a8 <_eeprom_emulator_check_logical_page+0xc4>)
   23334:	685a      	ldr	r2, [r3, #4]
   23336:	1d3b      	adds	r3, r7, #4
   23338:	881b      	ldrh	r3, [r3, #0]
   2333a:	019b      	lsls	r3, r3, #6
   2333c:	18d3      	adds	r3, r2, r3
   2333e:	781a      	ldrb	r2, [r3, #0]
   23340:	003b      	movs	r3, r7
   23342:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23344:	003b      	movs	r3, r7
   23346:	881b      	ldrh	r3, [r3, #0]
   23348:	2bff      	cmp	r3, #255	; 0xff
   2334a:	d010      	beq.n	2336e <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   2334c:	1cba      	adds	r2, r7, #2
   2334e:	003b      	movs	r3, r7
   23350:	8812      	ldrh	r2, [r2, #0]
   23352:	881b      	ldrh	r3, [r3, #0]
   23354:	429a      	cmp	r2, r3
   23356:	d10b      	bne.n	23370 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   23358:	1d3b      	adds	r3, r7, #4
   2335a:	881a      	ldrh	r2, [r3, #0]
   2335c:	1dbb      	adds	r3, r7, #6
   2335e:	881b      	ldrh	r3, [r3, #0]
   23360:	0011      	movs	r1, r2
   23362:	0018      	movs	r0, r3
   23364:	4b11      	ldr	r3, [pc, #68]	; (233ac <_eeprom_emulator_check_logical_page+0xc8>)
   23366:	4798      	blx	r3
   23368:	e002      	b.n	23370 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   2336a:	46c0      	nop			; (mov r8, r8)
   2336c:	e000      	b.n	23370 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   2336e:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23370:	1d3b      	adds	r3, r7, #4
   23372:	1d3a      	adds	r2, r7, #4
   23374:	8812      	ldrh	r2, [r2, #0]
   23376:	3204      	adds	r2, #4
   23378:	801a      	strh	r2, [r3, #0]
   2337a:	4b0b      	ldr	r3, [pc, #44]	; (233a8 <_eeprom_emulator_check_logical_page+0xc4>)
   2337c:	891b      	ldrh	r3, [r3, #8]
   2337e:	1d3a      	adds	r2, r7, #4
   23380:	8812      	ldrh	r2, [r2, #0]
   23382:	429a      	cmp	r2, r3
   23384:	d3ce      	bcc.n	23324 <_eeprom_emulator_check_logical_page+0x40>
   23386:	e000      	b.n	2338a <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   23388:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   2338a:	1dbb      	adds	r3, r7, #6
   2338c:	1dba      	adds	r2, r7, #6
   2338e:	8812      	ldrh	r2, [r2, #0]
   23390:	3204      	adds	r2, #4
   23392:	801a      	strh	r2, [r3, #0]
   23394:	4b04      	ldr	r3, [pc, #16]	; (233a8 <_eeprom_emulator_check_logical_page+0xc4>)
   23396:	891b      	ldrh	r3, [r3, #8]
   23398:	1dba      	adds	r2, r7, #6
   2339a:	8812      	ldrh	r2, [r2, #0]
   2339c:	429a      	cmp	r2, r3
   2339e:	d3ae      	bcc.n	232fe <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   233a0:	46c0      	nop			; (mov r8, r8)
   233a2:	46bd      	mov	sp, r7
   233a4:	b002      	add	sp, #8
   233a6:	bd80      	pop	{r7, pc}
   233a8:	2000041c 	.word	0x2000041c
   233ac:	00023291 	.word	0x00023291

000233b0 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   233b0:	b580      	push	{r7, lr}
   233b2:	b084      	sub	sp, #16
   233b4:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   233b6:	4b51      	ldr	r3, [pc, #324]	; (234fc <_eeprom_emulator_update_page_mapping+0x14c>)
   233b8:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   233ba:	230e      	movs	r3, #14
   233bc:	18fb      	adds	r3, r7, r3
   233be:	2200      	movs	r2, #0
   233c0:	801a      	strh	r2, [r3, #0]
   233c2:	e033      	b.n	2342c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   233c4:	230e      	movs	r3, #14
   233c6:	18fb      	adds	r3, r7, r3
   233c8:	881a      	ldrh	r2, [r3, #0]
   233ca:	4b4d      	ldr	r3, [pc, #308]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   233cc:	891b      	ldrh	r3, [r3, #8]
   233ce:	3b01      	subs	r3, #1
   233d0:	429a      	cmp	r2, r3
   233d2:	d023      	beq.n	2341c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   233d4:	4b4a      	ldr	r3, [pc, #296]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   233d6:	685a      	ldr	r2, [r3, #4]
   233d8:	230e      	movs	r3, #14
   233da:	18fb      	adds	r3, r7, r3
   233dc:	881b      	ldrh	r3, [r3, #0]
   233de:	019b      	lsls	r3, r3, #6
   233e0:	18d3      	adds	r3, r2, r3
   233e2:	781a      	ldrb	r2, [r3, #0]
   233e4:	2308      	movs	r3, #8
   233e6:	18fb      	adds	r3, r7, r3
   233e8:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   233ea:	2308      	movs	r3, #8
   233ec:	18fb      	adds	r3, r7, r3
   233ee:	881b      	ldrh	r3, [r3, #0]
   233f0:	2bff      	cmp	r3, #255	; 0xff
   233f2:	d014      	beq.n	2341e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   233f4:	4b42      	ldr	r3, [pc, #264]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   233f6:	7a9b      	ldrb	r3, [r3, #10]
   233f8:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   233fa:	2208      	movs	r2, #8
   233fc:	18ba      	adds	r2, r7, r2
   233fe:	8812      	ldrh	r2, [r2, #0]
   23400:	429a      	cmp	r2, r3
   23402:	d20c      	bcs.n	2341e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23404:	2308      	movs	r3, #8
   23406:	18fb      	adds	r3, r7, r3
   23408:	881b      	ldrh	r3, [r3, #0]
   2340a:	220e      	movs	r2, #14
   2340c:	18ba      	adds	r2, r7, r2
   2340e:	8812      	ldrh	r2, [r2, #0]
   23410:	b2d1      	uxtb	r1, r2
   23412:	4a3b      	ldr	r2, [pc, #236]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   23414:	18d3      	adds	r3, r2, r3
   23416:	1c0a      	adds	r2, r1, #0
   23418:	72da      	strb	r2, [r3, #11]
   2341a:	e000      	b.n	2341e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   2341c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2341e:	230e      	movs	r3, #14
   23420:	18fb      	adds	r3, r7, r3
   23422:	881a      	ldrh	r2, [r3, #0]
   23424:	230e      	movs	r3, #14
   23426:	18fb      	adds	r3, r7, r3
   23428:	3201      	adds	r2, #1
   2342a:	801a      	strh	r2, [r3, #0]
   2342c:	4b34      	ldr	r3, [pc, #208]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   2342e:	891b      	ldrh	r3, [r3, #8]
   23430:	220e      	movs	r2, #14
   23432:	18ba      	adds	r2, r7, r2
   23434:	8812      	ldrh	r2, [r2, #0]
   23436:	429a      	cmp	r2, r3
   23438:	d3c4      	bcc.n	233c4 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   2343a:	4b31      	ldr	r3, [pc, #196]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   2343c:	2287      	movs	r2, #135	; 0x87
   2343e:	213f      	movs	r1, #63	; 0x3f
   23440:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23442:	230c      	movs	r3, #12
   23444:	18fb      	adds	r3, r7, r3
   23446:	2200      	movs	r2, #0
   23448:	801a      	strh	r2, [r3, #0]
   2344a:	e04a      	b.n	234e2 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   2344c:	230b      	movs	r3, #11
   2344e:	18fb      	adds	r3, r7, r3
   23450:	2201      	movs	r2, #1
   23452:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23454:	230a      	movs	r3, #10
   23456:	18fb      	adds	r3, r7, r3
   23458:	2200      	movs	r2, #0
   2345a:	701a      	strb	r2, [r3, #0]
   2345c:	e028      	b.n	234b0 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   2345e:	230c      	movs	r3, #12
   23460:	18fb      	adds	r3, r7, r3
   23462:	881b      	ldrh	r3, [r3, #0]
   23464:	009b      	lsls	r3, r3, #2
   23466:	b299      	uxth	r1, r3
   23468:	230a      	movs	r3, #10
   2346a:	18fb      	adds	r3, r7, r3
   2346c:	781b      	ldrb	r3, [r3, #0]
   2346e:	b29a      	uxth	r2, r3
   23470:	1dbb      	adds	r3, r7, #6
   23472:	188a      	adds	r2, r1, r2
   23474:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23476:	1dbb      	adds	r3, r7, #6
   23478:	881a      	ldrh	r2, [r3, #0]
   2347a:	4b21      	ldr	r3, [pc, #132]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   2347c:	891b      	ldrh	r3, [r3, #8]
   2347e:	3b01      	subs	r3, #1
   23480:	429a      	cmp	r2, r3
   23482:	d00d      	beq.n	234a0 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23484:	4b1e      	ldr	r3, [pc, #120]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   23486:	685a      	ldr	r2, [r3, #4]
   23488:	1dbb      	adds	r3, r7, #6
   2348a:	881b      	ldrh	r3, [r3, #0]
   2348c:	019b      	lsls	r3, r3, #6
   2348e:	18d3      	adds	r3, r2, r3
   23490:	781b      	ldrb	r3, [r3, #0]
   23492:	2bff      	cmp	r3, #255	; 0xff
   23494:	d005      	beq.n	234a2 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23496:	230b      	movs	r3, #11
   23498:	18fb      	adds	r3, r7, r3
   2349a:	2200      	movs	r2, #0
   2349c:	701a      	strb	r2, [r3, #0]
   2349e:	e000      	b.n	234a2 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   234a0:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   234a2:	230a      	movs	r3, #10
   234a4:	18fb      	adds	r3, r7, r3
   234a6:	781a      	ldrb	r2, [r3, #0]
   234a8:	230a      	movs	r3, #10
   234aa:	18fb      	adds	r3, r7, r3
   234ac:	3201      	adds	r2, #1
   234ae:	701a      	strb	r2, [r3, #0]
   234b0:	230a      	movs	r3, #10
   234b2:	18fb      	adds	r3, r7, r3
   234b4:	781b      	ldrb	r3, [r3, #0]
   234b6:	2b03      	cmp	r3, #3
   234b8:	d9d1      	bls.n	2345e <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   234ba:	230b      	movs	r3, #11
   234bc:	18fb      	adds	r3, r7, r3
   234be:	781b      	ldrb	r3, [r3, #0]
   234c0:	2b00      	cmp	r3, #0
   234c2:	d007      	beq.n	234d4 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   234c4:	230c      	movs	r3, #12
   234c6:	18fb      	adds	r3, r7, r3
   234c8:	881b      	ldrh	r3, [r3, #0]
   234ca:	b2d9      	uxtb	r1, r3
   234cc:	4b0c      	ldr	r3, [pc, #48]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   234ce:	2287      	movs	r2, #135	; 0x87
   234d0:	5499      	strb	r1, [r3, r2]
			break;
   234d2:	e00f      	b.n	234f4 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   234d4:	230c      	movs	r3, #12
   234d6:	18fb      	adds	r3, r7, r3
   234d8:	881a      	ldrh	r2, [r3, #0]
   234da:	230c      	movs	r3, #12
   234dc:	18fb      	adds	r3, r7, r3
   234de:	3201      	adds	r2, #1
   234e0:	801a      	strh	r2, [r3, #0]
   234e2:	4b07      	ldr	r3, [pc, #28]	; (23500 <_eeprom_emulator_update_page_mapping+0x150>)
   234e4:	891b      	ldrh	r3, [r3, #8]
   234e6:	089b      	lsrs	r3, r3, #2
   234e8:	b29b      	uxth	r3, r3
   234ea:	220c      	movs	r2, #12
   234ec:	18ba      	adds	r2, r7, r2
   234ee:	8812      	ldrh	r2, [r2, #0]
   234f0:	429a      	cmp	r2, r3
   234f2:	d3ab      	bcc.n	2344c <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   234f4:	46c0      	nop			; (mov r8, r8)
   234f6:	46bd      	mov	sp, r7
   234f8:	b004      	add	sp, #16
   234fa:	bd80      	pop	{r7, pc}
   234fc:	000232e5 	.word	0x000232e5
   23500:	2000041c 	.word	0x2000041c

00023504 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23504:	b580      	push	{r7, lr}
   23506:	b084      	sub	sp, #16
   23508:	af00      	add	r7, sp, #0
   2350a:	0002      	movs	r2, r0
   2350c:	6039      	str	r1, [r7, #0]
   2350e:	1dfb      	adds	r3, r7, #7
   23510:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23512:	230e      	movs	r3, #14
   23514:	18fb      	adds	r3, r7, r3
   23516:	1dfa      	adds	r2, r7, #7
   23518:	7812      	ldrb	r2, [r2, #0]
   2351a:	0892      	lsrs	r2, r2, #2
   2351c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   2351e:	230d      	movs	r3, #13
   23520:	18fb      	adds	r3, r7, r3
   23522:	1dfa      	adds	r2, r7, #7
   23524:	7812      	ldrb	r2, [r2, #0]
   23526:	2103      	movs	r1, #3
   23528:	400a      	ands	r2, r1
   2352a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   2352c:	230f      	movs	r3, #15
   2352e:	18fb      	adds	r3, r7, r3
   23530:	220d      	movs	r2, #13
   23532:	18ba      	adds	r2, r7, r2
   23534:	7812      	ldrb	r2, [r2, #0]
   23536:	701a      	strb	r2, [r3, #0]
   23538:	e023      	b.n	23582 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   2353a:	230e      	movs	r3, #14
   2353c:	18fb      	adds	r3, r7, r3
   2353e:	781b      	ldrb	r3, [r3, #0]
   23540:	009b      	lsls	r3, r3, #2
   23542:	b2d9      	uxtb	r1, r3
   23544:	230c      	movs	r3, #12
   23546:	18fb      	adds	r3, r7, r3
   23548:	220f      	movs	r2, #15
   2354a:	18ba      	adds	r2, r7, r2
   2354c:	7812      	ldrb	r2, [r2, #0]
   2354e:	188a      	adds	r2, r1, r2
   23550:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   23552:	4b11      	ldr	r3, [pc, #68]	; (23598 <_eeprom_emulator_is_page_free_on_row+0x94>)
   23554:	685a      	ldr	r2, [r3, #4]
   23556:	230c      	movs	r3, #12
   23558:	18fb      	adds	r3, r7, r3
   2355a:	781b      	ldrb	r3, [r3, #0]
   2355c:	019b      	lsls	r3, r3, #6
   2355e:	18d3      	adds	r3, r2, r3
   23560:	781b      	ldrb	r3, [r3, #0]
   23562:	2bff      	cmp	r3, #255	; 0xff
   23564:	d106      	bne.n	23574 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   23566:	683b      	ldr	r3, [r7, #0]
   23568:	220c      	movs	r2, #12
   2356a:	18ba      	adds	r2, r7, r2
   2356c:	7812      	ldrb	r2, [r2, #0]
   2356e:	701a      	strb	r2, [r3, #0]
			return true;
   23570:	2301      	movs	r3, #1
   23572:	e00c      	b.n	2358e <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23574:	230f      	movs	r3, #15
   23576:	18fb      	adds	r3, r7, r3
   23578:	781a      	ldrb	r2, [r3, #0]
   2357a:	230f      	movs	r3, #15
   2357c:	18fb      	adds	r3, r7, r3
   2357e:	3201      	adds	r2, #1
   23580:	701a      	strb	r2, [r3, #0]
   23582:	230f      	movs	r3, #15
   23584:	18fb      	adds	r3, r7, r3
   23586:	781b      	ldrb	r3, [r3, #0]
   23588:	2b03      	cmp	r3, #3
   2358a:	d9d6      	bls.n	2353a <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   2358c:	2300      	movs	r3, #0
}
   2358e:	0018      	movs	r0, r3
   23590:	46bd      	mov	sp, r7
   23592:	b004      	add	sp, #16
   23594:	bd80      	pop	{r7, pc}
   23596:	46c0      	nop			; (mov r8, r8)
   23598:	2000041c 	.word	0x2000041c

0002359c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   2359c:	b580      	push	{r7, lr}
   2359e:	b086      	sub	sp, #24
   235a0:	af00      	add	r7, sp, #0
   235a2:	603a      	str	r2, [r7, #0]
   235a4:	1dfb      	adds	r3, r7, #7
   235a6:	1c02      	adds	r2, r0, #0
   235a8:	701a      	strb	r2, [r3, #0]
   235aa:	1dbb      	adds	r3, r7, #6
   235ac:	1c0a      	adds	r2, r1, #0
   235ae:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   235b0:	2314      	movs	r3, #20
   235b2:	18fb      	adds	r3, r7, r3
   235b4:	2200      	movs	r2, #0
   235b6:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   235b8:	4b69      	ldr	r3, [pc, #420]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   235ba:	685b      	ldr	r3, [r3, #4]
   235bc:	1dfa      	adds	r2, r7, #7
   235be:	7812      	ldrb	r2, [r2, #0]
   235c0:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   235c2:	189b      	adds	r3, r3, r2
   235c4:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   235c6:	693b      	ldr	r3, [r7, #16]
   235c8:	781a      	ldrb	r2, [r3, #0]
   235ca:	2308      	movs	r3, #8
   235cc:	18fb      	adds	r3, r7, r3
   235ce:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   235d0:	1dfb      	adds	r3, r7, #7
   235d2:	781b      	ldrb	r3, [r3, #0]
   235d4:	009b      	lsls	r3, r3, #2
   235d6:	b2da      	uxtb	r2, r3
   235d8:	2308      	movs	r3, #8
   235da:	18fb      	adds	r3, r7, r3
   235dc:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   235de:	693b      	ldr	r3, [r7, #16]
   235e0:	3340      	adds	r3, #64	; 0x40
   235e2:	781a      	ldrb	r2, [r3, #0]
   235e4:	2308      	movs	r3, #8
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   235ea:	1dfb      	adds	r3, r7, #7
   235ec:	781b      	ldrb	r3, [r3, #0]
   235ee:	009b      	lsls	r3, r3, #2
   235f0:	b2db      	uxtb	r3, r3
   235f2:	3301      	adds	r3, #1
   235f4:	b2da      	uxtb	r2, r3
   235f6:	2308      	movs	r3, #8
   235f8:	18fb      	adds	r3, r7, r3
   235fa:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   235fc:	2317      	movs	r3, #23
   235fe:	18fb      	adds	r3, r7, r3
   23600:	2200      	movs	r2, #0
   23602:	701a      	strb	r2, [r3, #0]
   23604:	e03a      	b.n	2367c <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23606:	2316      	movs	r3, #22
   23608:	18fb      	adds	r3, r7, r3
   2360a:	2202      	movs	r2, #2
   2360c:	701a      	strb	r2, [r3, #0]
   2360e:	e029      	b.n	23664 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23610:	2317      	movs	r3, #23
   23612:	18fb      	adds	r3, r7, r3
   23614:	781a      	ldrb	r2, [r3, #0]
   23616:	2308      	movs	r3, #8
   23618:	18fb      	adds	r3, r7, r3
   2361a:	0052      	lsls	r2, r2, #1
   2361c:	5cd2      	ldrb	r2, [r2, r3]
   2361e:	2316      	movs	r3, #22
   23620:	18fb      	adds	r3, r7, r3
   23622:	781b      	ldrb	r3, [r3, #0]
   23624:	019b      	lsls	r3, r3, #6
   23626:	6939      	ldr	r1, [r7, #16]
   23628:	18cb      	adds	r3, r1, r3
   2362a:	781b      	ldrb	r3, [r3, #0]
   2362c:	429a      	cmp	r2, r3
   2362e:	d112      	bne.n	23656 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23630:	2317      	movs	r3, #23
   23632:	18fb      	adds	r3, r7, r3
   23634:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23636:	1dfa      	adds	r2, r7, #7
   23638:	7812      	ldrb	r2, [r2, #0]
   2363a:	0092      	lsls	r2, r2, #2
   2363c:	b2d1      	uxtb	r1, r2
   2363e:	2216      	movs	r2, #22
   23640:	18ba      	adds	r2, r7, r2
   23642:	7812      	ldrb	r2, [r2, #0]
   23644:	188a      	adds	r2, r1, r2
   23646:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   23648:	2208      	movs	r2, #8
   2364a:	18ba      	adds	r2, r7, r2
   2364c:	005b      	lsls	r3, r3, #1
   2364e:	18d3      	adds	r3, r2, r3
   23650:	3301      	adds	r3, #1
   23652:	1c0a      	adds	r2, r1, #0
   23654:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23656:	2316      	movs	r3, #22
   23658:	18fb      	adds	r3, r7, r3
   2365a:	781a      	ldrb	r2, [r3, #0]
   2365c:	2316      	movs	r3, #22
   2365e:	18fb      	adds	r3, r7, r3
   23660:	3201      	adds	r2, #1
   23662:	701a      	strb	r2, [r3, #0]
   23664:	2316      	movs	r3, #22
   23666:	18fb      	adds	r3, r7, r3
   23668:	781b      	ldrb	r3, [r3, #0]
   2366a:	2b03      	cmp	r3, #3
   2366c:	d9d0      	bls.n	23610 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   2366e:	2317      	movs	r3, #23
   23670:	18fb      	adds	r3, r7, r3
   23672:	781a      	ldrb	r2, [r3, #0]
   23674:	2317      	movs	r3, #23
   23676:	18fb      	adds	r3, r7, r3
   23678:	3201      	adds	r2, #1
   2367a:	701a      	strb	r2, [r3, #0]
   2367c:	2317      	movs	r3, #23
   2367e:	18fb      	adds	r3, r7, r3
   23680:	781b      	ldrb	r3, [r3, #0]
   23682:	2b01      	cmp	r3, #1
   23684:	d9bf      	bls.n	23606 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23686:	2315      	movs	r3, #21
   23688:	18fb      	adds	r3, r7, r3
   2368a:	2200      	movs	r2, #0
   2368c:	701a      	strb	r2, [r3, #0]
   2368e:	e051      	b.n	23734 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23690:	4b33      	ldr	r3, [pc, #204]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23692:	2287      	movs	r2, #135	; 0x87
   23694:	5c9b      	ldrb	r3, [r3, r2]
   23696:	009a      	lsls	r2, r3, #2
   23698:	2315      	movs	r3, #21
   2369a:	18fb      	adds	r3, r7, r3
   2369c:	781b      	ldrb	r3, [r3, #0]
   2369e:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   236a0:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   236a2:	4b30      	ldr	r3, [pc, #192]	; (23764 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   236a4:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   236a6:	2315      	movs	r3, #21
   236a8:	18fb      	adds	r3, r7, r3
   236aa:	781a      	ldrb	r2, [r3, #0]
   236ac:	2308      	movs	r3, #8
   236ae:	18fb      	adds	r3, r7, r3
   236b0:	0052      	lsls	r2, r2, #1
   236b2:	5cd3      	ldrb	r3, [r2, r3]
   236b4:	1dba      	adds	r2, r7, #6
   236b6:	7812      	ldrb	r2, [r2, #0]
   236b8:	429a      	cmp	r2, r3
   236ba:	d10d      	bne.n	236d8 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   236bc:	4b28      	ldr	r3, [pc, #160]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   236be:	1dba      	adds	r2, r7, #6
   236c0:	2188      	movs	r1, #136	; 0x88
   236c2:	7812      	ldrb	r2, [r2, #0]
   236c4:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   236c6:	4b26      	ldr	r3, [pc, #152]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   236c8:	228c      	movs	r2, #140	; 0x8c
   236ca:	6839      	ldr	r1, [r7, #0]
   236cc:	189b      	adds	r3, r3, r2
   236ce:	223c      	movs	r2, #60	; 0x3c
   236d0:	0018      	movs	r0, r3
   236d2:	4b25      	ldr	r3, [pc, #148]	; (23768 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   236d4:	4798      	blx	r3
   236d6:	e00e      	b.n	236f6 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   236d8:	2315      	movs	r3, #21
   236da:	18fb      	adds	r3, r7, r3
   236dc:	781b      	ldrb	r3, [r3, #0]
   236de:	2208      	movs	r2, #8
   236e0:	18ba      	adds	r2, r7, r2
   236e2:	005b      	lsls	r3, r3, #1
   236e4:	18d3      	adds	r3, r2, r3
   236e6:	3301      	adds	r3, #1
   236e8:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   236ea:	b29b      	uxth	r3, r3
   236ec:	4a1f      	ldr	r2, [pc, #124]	; (2376c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   236ee:	0011      	movs	r1, r2
   236f0:	0018      	movs	r0, r3
   236f2:	4b1f      	ldr	r3, [pc, #124]	; (23770 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   236f4:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   236f6:	68fb      	ldr	r3, [r7, #12]
   236f8:	b29b      	uxth	r3, r3
   236fa:	4a1c      	ldr	r2, [pc, #112]	; (2376c <_eeprom_emulator_move_data_to_spare+0x1d0>)
   236fc:	0011      	movs	r1, r2
   236fe:	0018      	movs	r0, r3
   23700:	4b1c      	ldr	r3, [pc, #112]	; (23774 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23702:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23704:	2315      	movs	r3, #21
   23706:	18fb      	adds	r3, r7, r3
   23708:	781a      	ldrb	r2, [r3, #0]
   2370a:	2308      	movs	r3, #8
   2370c:	18fb      	adds	r3, r7, r3
   2370e:	0052      	lsls	r2, r2, #1
   23710:	5cd3      	ldrb	r3, [r2, r3]
   23712:	0019      	movs	r1, r3
   23714:	68fb      	ldr	r3, [r7, #12]
   23716:	b2da      	uxtb	r2, r3
   23718:	4b11      	ldr	r3, [pc, #68]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2371a:	185b      	adds	r3, r3, r1
   2371c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2371e:	4b10      	ldr	r3, [pc, #64]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23720:	22c8      	movs	r2, #200	; 0xc8
   23722:	2101      	movs	r1, #1
   23724:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23726:	2315      	movs	r3, #21
   23728:	18fb      	adds	r3, r7, r3
   2372a:	781a      	ldrb	r2, [r3, #0]
   2372c:	2315      	movs	r3, #21
   2372e:	18fb      	adds	r3, r7, r3
   23730:	3201      	adds	r2, #1
   23732:	701a      	strb	r2, [r3, #0]
   23734:	2315      	movs	r3, #21
   23736:	18fb      	adds	r3, r7, r3
   23738:	781b      	ldrb	r3, [r3, #0]
   2373a:	2b01      	cmp	r3, #1
   2373c:	d9a8      	bls.n	23690 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   2373e:	1dfb      	adds	r3, r7, #7
   23740:	781b      	ldrb	r3, [r3, #0]
   23742:	0018      	movs	r0, r3
   23744:	4b0c      	ldr	r3, [pc, #48]	; (23778 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   23746:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   23748:	4b05      	ldr	r3, [pc, #20]	; (23760 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2374a:	1dfa      	adds	r2, r7, #7
   2374c:	2187      	movs	r1, #135	; 0x87
   2374e:	7812      	ldrb	r2, [r2, #0]
   23750:	545a      	strb	r2, [r3, r1]

	return error_code;
   23752:	2314      	movs	r3, #20
   23754:	18fb      	adds	r3, r7, r3
   23756:	781b      	ldrb	r3, [r3, #0]
}
   23758:	0018      	movs	r0, r3
   2375a:	46bd      	mov	sp, r7
   2375c:	b006      	add	sp, #24
   2375e:	bd80      	pop	{r7, pc}
   23760:	2000041c 	.word	0x2000041c
   23764:	00023b99 	.word	0x00023b99
   23768:	00028ddd 	.word	0x00028ddd
   2376c:	200004a4 	.word	0x200004a4
   23770:	000230f1 	.word	0x000230f1
   23774:	00023055 	.word	0x00023055
   23778:	0002300d 	.word	0x0002300d

0002377c <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   2377c:	b590      	push	{r4, r7, lr}
   2377e:	b095      	sub	sp, #84	; 0x54
   23780:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23782:	2340      	movs	r3, #64	; 0x40
   23784:	18fb      	adds	r3, r7, r3
   23786:	4a29      	ldr	r2, [pc, #164]	; (2382c <_eeprom_emulator_create_master_page+0xb0>)
   23788:	ca13      	ldmia	r2!, {r0, r1, r4}
   2378a:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   2378c:	003b      	movs	r3, r7
   2378e:	2240      	movs	r2, #64	; 0x40
   23790:	21ff      	movs	r1, #255	; 0xff
   23792:	0018      	movs	r0, r3
   23794:	4b26      	ldr	r3, [pc, #152]	; (23830 <_eeprom_emulator_create_master_page+0xb4>)
   23796:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23798:	234f      	movs	r3, #79	; 0x4f
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	2200      	movs	r2, #0
   2379e:	701a      	strb	r2, [r3, #0]
   237a0:	e013      	b.n	237ca <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   237a2:	234f      	movs	r3, #79	; 0x4f
   237a4:	18fb      	adds	r3, r7, r3
   237a6:	781a      	ldrb	r2, [r3, #0]
   237a8:	234f      	movs	r3, #79	; 0x4f
   237aa:	18fb      	adds	r3, r7, r3
   237ac:	7819      	ldrb	r1, [r3, #0]
   237ae:	2340      	movs	r3, #64	; 0x40
   237b0:	18fb      	adds	r3, r7, r3
   237b2:	0089      	lsls	r1, r1, #2
   237b4:	58c9      	ldr	r1, [r1, r3]
   237b6:	003b      	movs	r3, r7
   237b8:	0092      	lsls	r2, r2, #2
   237ba:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   237bc:	234f      	movs	r3, #79	; 0x4f
   237be:	18fb      	adds	r3, r7, r3
   237c0:	781a      	ldrb	r2, [r3, #0]
   237c2:	234f      	movs	r3, #79	; 0x4f
   237c4:	18fb      	adds	r3, r7, r3
   237c6:	3201      	adds	r2, #1
   237c8:	701a      	strb	r2, [r3, #0]
   237ca:	234f      	movs	r3, #79	; 0x4f
   237cc:	18fb      	adds	r3, r7, r3
   237ce:	781b      	ldrb	r3, [r3, #0]
   237d0:	2b02      	cmp	r3, #2
   237d2:	d9e6      	bls.n	237a2 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   237d4:	003b      	movs	r3, r7
   237d6:	2201      	movs	r2, #1
   237d8:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   237da:	003b      	movs	r3, r7
   237dc:	2201      	movs	r2, #1
   237de:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   237e0:	003b      	movs	r3, r7
   237e2:	2200      	movs	r2, #0
   237e4:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   237e6:	003b      	movs	r3, r7
   237e8:	2200      	movs	r2, #0
   237ea:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   237ec:	4b11      	ldr	r3, [pc, #68]	; (23834 <_eeprom_emulator_create_master_page+0xb8>)
   237ee:	891b      	ldrh	r3, [r3, #8]
   237f0:	3b01      	subs	r3, #1
   237f2:	2b00      	cmp	r3, #0
   237f4:	da00      	bge.n	237f8 <_eeprom_emulator_create_master_page+0x7c>
   237f6:	3303      	adds	r3, #3
   237f8:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   237fa:	b2db      	uxtb	r3, r3
   237fc:	0018      	movs	r0, r3
   237fe:	4b0e      	ldr	r3, [pc, #56]	; (23838 <_eeprom_emulator_create_master_page+0xbc>)
   23800:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23802:	4b0c      	ldr	r3, [pc, #48]	; (23834 <_eeprom_emulator_create_master_page+0xb8>)
   23804:	891b      	ldrh	r3, [r3, #8]
   23806:	3b01      	subs	r3, #1
   23808:	b29b      	uxth	r3, r3
   2380a:	003a      	movs	r2, r7
   2380c:	0011      	movs	r1, r2
   2380e:	0018      	movs	r0, r3
   23810:	4b0a      	ldr	r3, [pc, #40]	; (2383c <_eeprom_emulator_create_master_page+0xc0>)
   23812:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23814:	4b07      	ldr	r3, [pc, #28]	; (23834 <_eeprom_emulator_create_master_page+0xb8>)
   23816:	891b      	ldrh	r3, [r3, #8]
   23818:	3b01      	subs	r3, #1
   2381a:	b29b      	uxth	r3, r3
   2381c:	0018      	movs	r0, r3
   2381e:	4b08      	ldr	r3, [pc, #32]	; (23840 <_eeprom_emulator_create_master_page+0xc4>)
   23820:	4798      	blx	r3
}
   23822:	46c0      	nop			; (mov r8, r8)
   23824:	46bd      	mov	sp, r7
   23826:	b015      	add	sp, #84	; 0x54
   23828:	bd90      	pop	{r4, r7, pc}
   2382a:	46c0      	nop			; (mov r8, r8)
   2382c:	0002ac10 	.word	0x0002ac10
   23830:	00028e13 	.word	0x00028e13
   23834:	2000041c 	.word	0x2000041c
   23838:	0002300d 	.word	0x0002300d
   2383c:	00023055 	.word	0x00023055
   23840:	000230a5 	.word	0x000230a5

00023844 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   23844:	b590      	push	{r4, r7, lr}
   23846:	b095      	sub	sp, #84	; 0x54
   23848:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   2384a:	2340      	movs	r3, #64	; 0x40
   2384c:	18fb      	adds	r3, r7, r3
   2384e:	4a22      	ldr	r2, [pc, #136]	; (238d8 <_eeprom_emulator_verify_master_page+0x94>)
   23850:	ca13      	ldmia	r2!, {r0, r1, r4}
   23852:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23854:	4b21      	ldr	r3, [pc, #132]	; (238dc <_eeprom_emulator_verify_master_page+0x98>)
   23856:	891b      	ldrh	r3, [r3, #8]
   23858:	3b01      	subs	r3, #1
   2385a:	b29b      	uxth	r3, r3
   2385c:	003a      	movs	r2, r7
   2385e:	0011      	movs	r1, r2
   23860:	0018      	movs	r0, r3
   23862:	4b1f      	ldr	r3, [pc, #124]	; (238e0 <_eeprom_emulator_verify_master_page+0x9c>)
   23864:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23866:	234f      	movs	r3, #79	; 0x4f
   23868:	18fb      	adds	r3, r7, r3
   2386a:	2200      	movs	r2, #0
   2386c:	701a      	strb	r2, [r3, #0]
   2386e:	e017      	b.n	238a0 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   23870:	234f      	movs	r3, #79	; 0x4f
   23872:	18fb      	adds	r3, r7, r3
   23874:	781a      	ldrb	r2, [r3, #0]
   23876:	003b      	movs	r3, r7
   23878:	0092      	lsls	r2, r2, #2
   2387a:	58d2      	ldr	r2, [r2, r3]
   2387c:	234f      	movs	r3, #79	; 0x4f
   2387e:	18fb      	adds	r3, r7, r3
   23880:	7819      	ldrb	r1, [r3, #0]
   23882:	2340      	movs	r3, #64	; 0x40
   23884:	18fb      	adds	r3, r7, r3
   23886:	0089      	lsls	r1, r1, #2
   23888:	58cb      	ldr	r3, [r1, r3]
   2388a:	429a      	cmp	r2, r3
   2388c:	d001      	beq.n	23892 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   2388e:	231a      	movs	r3, #26
   23890:	e01e      	b.n	238d0 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23892:	234f      	movs	r3, #79	; 0x4f
   23894:	18fb      	adds	r3, r7, r3
   23896:	781a      	ldrb	r2, [r3, #0]
   23898:	234f      	movs	r3, #79	; 0x4f
   2389a:	18fb      	adds	r3, r7, r3
   2389c:	3201      	adds	r2, #1
   2389e:	701a      	strb	r2, [r3, #0]
   238a0:	234f      	movs	r3, #79	; 0x4f
   238a2:	18fb      	adds	r3, r7, r3
   238a4:	781b      	ldrb	r3, [r3, #0]
   238a6:	2b02      	cmp	r3, #2
   238a8:	d9e2      	bls.n	23870 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   238aa:	003b      	movs	r3, r7
   238ac:	7bdb      	ldrb	r3, [r3, #15]
   238ae:	2b01      	cmp	r3, #1
   238b0:	d001      	beq.n	238b6 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   238b2:	2310      	movs	r3, #16
   238b4:	e00c      	b.n	238d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   238b6:	003b      	movs	r3, r7
   238b8:	7b1b      	ldrb	r3, [r3, #12]
   238ba:	2b01      	cmp	r3, #1
   238bc:	d001      	beq.n	238c2 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   238be:	2310      	movs	r3, #16
   238c0:	e006      	b.n	238d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   238c2:	003b      	movs	r3, r7
   238c4:	7b5b      	ldrb	r3, [r3, #13]
   238c6:	2b00      	cmp	r3, #0
   238c8:	d001      	beq.n	238ce <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   238ca:	2310      	movs	r3, #16
   238cc:	e000      	b.n	238d0 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   238ce:	2300      	movs	r3, #0
}
   238d0:	0018      	movs	r0, r3
   238d2:	46bd      	mov	sp, r7
   238d4:	b015      	add	sp, #84	; 0x54
   238d6:	bd90      	pop	{r4, r7, pc}
   238d8:	0002ac10 	.word	0x0002ac10
   238dc:	2000041c 	.word	0x2000041c
   238e0:	000230f1 	.word	0x000230f1

000238e4 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   238e4:	b590      	push	{r4, r7, lr}
   238e6:	b087      	sub	sp, #28
   238e8:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   238ea:	2317      	movs	r3, #23
   238ec:	18fb      	adds	r3, r7, r3
   238ee:	2200      	movs	r2, #0
   238f0:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   238f2:	2310      	movs	r3, #16
   238f4:	18fb      	adds	r3, r7, r3
   238f6:	0018      	movs	r0, r3
   238f8:	4b2e      	ldr	r3, [pc, #184]	; (239b4 <eeprom_emulator_init+0xd0>)
   238fa:	4798      	blx	r3
	config.manual_page_write = true;
   238fc:	2310      	movs	r3, #16
   238fe:	18fb      	adds	r3, r7, r3
   23900:	2201      	movs	r2, #1
   23902:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   23904:	2317      	movs	r3, #23
   23906:	18fc      	adds	r4, r7, r3
   23908:	2310      	movs	r3, #16
   2390a:	18fb      	adds	r3, r7, r3
   2390c:	0018      	movs	r0, r3
   2390e:	4b2a      	ldr	r3, [pc, #168]	; (239b8 <eeprom_emulator_init+0xd4>)
   23910:	4798      	blx	r3
   23912:	0003      	movs	r3, r0
   23914:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23916:	2317      	movs	r3, #23
   23918:	18fb      	adds	r3, r7, r3
   2391a:	781b      	ldrb	r3, [r3, #0]
   2391c:	2b05      	cmp	r3, #5
   2391e:	d0f1      	beq.n	23904 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   23920:	1d3b      	adds	r3, r7, #4
   23922:	0018      	movs	r0, r3
   23924:	4b25      	ldr	r3, [pc, #148]	; (239bc <eeprom_emulator_init+0xd8>)
   23926:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   23928:	1d3b      	adds	r3, r7, #4
   2392a:	685b      	ldr	r3, [r3, #4]
   2392c:	2b0b      	cmp	r3, #11
   2392e:	d801      	bhi.n	23934 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   23930:	2316      	movs	r3, #22
   23932:	e03b      	b.n	239ac <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   23934:	1d3b      	adds	r3, r7, #4
   23936:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   23938:	b29a      	uxth	r2, r3
   2393a:	4b21      	ldr	r3, [pc, #132]	; (239c0 <eeprom_emulator_init+0xdc>)
   2393c:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   2393e:	1d3b      	adds	r3, r7, #4
   23940:	685b      	ldr	r3, [r3, #4]
   23942:	3b08      	subs	r3, #8
   23944:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   23946:	b2da      	uxtb	r2, r3
   23948:	4b1d      	ldr	r3, [pc, #116]	; (239c0 <eeprom_emulator_init+0xdc>)
   2394a:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   2394c:	4b1c      	ldr	r3, [pc, #112]	; (239c0 <eeprom_emulator_init+0xdc>)
   2394e:	891b      	ldrh	r3, [r3, #8]
   23950:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   23952:	0013      	movs	r3, r2
   23954:	069b      	lsls	r3, r3, #26
   23956:	1a9b      	subs	r3, r3, r2
   23958:	019b      	lsls	r3, r3, #6
   2395a:	2280      	movs	r2, #128	; 0x80
   2395c:	02d2      	lsls	r2, r2, #11
   2395e:	4694      	mov	ip, r2
   23960:	4463      	add	r3, ip
   23962:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   23964:	4b16      	ldr	r3, [pc, #88]	; (239c0 <eeprom_emulator_init+0xdc>)
   23966:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   23968:	4b15      	ldr	r3, [pc, #84]	; (239c0 <eeprom_emulator_init+0xdc>)
   2396a:	22c8      	movs	r2, #200	; 0xc8
   2396c:	2100      	movs	r1, #0
   2396e:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   23970:	4b14      	ldr	r3, [pc, #80]	; (239c4 <eeprom_emulator_init+0xe0>)
   23972:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   23974:	4b12      	ldr	r3, [pc, #72]	; (239c0 <eeprom_emulator_init+0xdc>)
   23976:	2287      	movs	r2, #135	; 0x87
   23978:	5c9b      	ldrb	r3, [r3, r2]
   2397a:	2b3f      	cmp	r3, #63	; 0x3f
   2397c:	d101      	bne.n	23982 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   2397e:	231a      	movs	r3, #26
   23980:	e014      	b.n	239ac <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   23982:	2317      	movs	r3, #23
   23984:	18fc      	adds	r4, r7, r3
   23986:	4b10      	ldr	r3, [pc, #64]	; (239c8 <eeprom_emulator_init+0xe4>)
   23988:	4798      	blx	r3
   2398a:	0003      	movs	r3, r0
   2398c:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   2398e:	2317      	movs	r3, #23
   23990:	18fb      	adds	r3, r7, r3
   23992:	781b      	ldrb	r3, [r3, #0]
   23994:	2b00      	cmp	r3, #0
   23996:	d003      	beq.n	239a0 <eeprom_emulator_init+0xbc>
		return error_code;
   23998:	2317      	movs	r3, #23
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	781b      	ldrb	r3, [r3, #0]
   2399e:	e005      	b.n	239ac <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   239a0:	4b07      	ldr	r3, [pc, #28]	; (239c0 <eeprom_emulator_init+0xdc>)
   239a2:	2201      	movs	r2, #1
   239a4:	701a      	strb	r2, [r3, #0]

	return error_code;
   239a6:	2317      	movs	r3, #23
   239a8:	18fb      	adds	r3, r7, r3
   239aa:	781b      	ldrb	r3, [r3, #0]
}
   239ac:	0018      	movs	r0, r3
   239ae:	46bd      	mov	sp, r7
   239b0:	b007      	add	sp, #28
   239b2:	bd90      	pop	{r4, r7, pc}
   239b4:	00022fd1 	.word	0x00022fd1
   239b8:	000229ad 	.word	0x000229ad
   239bc:	00022e8d 	.word	0x00022e8d
   239c0:	2000041c 	.word	0x2000041c
   239c4:	000233b1 	.word	0x000233b1
   239c8:	00023845 	.word	0x00023845

000239cc <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   239cc:	b580      	push	{r7, lr}
   239ce:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   239d0:	4b04      	ldr	r3, [pc, #16]	; (239e4 <eeprom_emulator_erase_memory+0x18>)
   239d2:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   239d4:	4b04      	ldr	r3, [pc, #16]	; (239e8 <eeprom_emulator_erase_memory+0x1c>)
   239d6:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   239d8:	4b04      	ldr	r3, [pc, #16]	; (239ec <eeprom_emulator_erase_memory+0x20>)
   239da:	4798      	blx	r3
}
   239dc:	46c0      	nop			; (mov r8, r8)
   239de:	46bd      	mov	sp, r7
   239e0:	bd80      	pop	{r7, pc}
   239e2:	46c0      	nop			; (mov r8, r8)
   239e4:	00023141 	.word	0x00023141
   239e8:	0002377d 	.word	0x0002377d
   239ec:	000233b1 	.word	0x000233b1

000239f0 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   239f0:	b590      	push	{r4, r7, lr}
   239f2:	b085      	sub	sp, #20
   239f4:	af00      	add	r7, sp, #0
   239f6:	0002      	movs	r2, r0
   239f8:	6039      	str	r1, [r7, #0]
   239fa:	1dfb      	adds	r3, r7, #7
   239fc:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   239fe:	4b38      	ldr	r3, [pc, #224]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a00:	781b      	ldrb	r3, [r3, #0]
   23a02:	2201      	movs	r2, #1
   23a04:	4053      	eors	r3, r2
   23a06:	b2db      	uxtb	r3, r3
   23a08:	2b00      	cmp	r3, #0
   23a0a:	d001      	beq.n	23a10 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23a0c:	231f      	movs	r3, #31
   23a0e:	e063      	b.n	23ad8 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23a10:	4b33      	ldr	r3, [pc, #204]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a12:	7a9b      	ldrb	r3, [r3, #10]
   23a14:	1dfa      	adds	r2, r7, #7
   23a16:	7812      	ldrb	r2, [r2, #0]
   23a18:	429a      	cmp	r2, r3
   23a1a:	d301      	bcc.n	23a20 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23a1c:	2318      	movs	r3, #24
   23a1e:	e05b      	b.n	23ad8 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   23a20:	4b2f      	ldr	r3, [pc, #188]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a22:	22c8      	movs	r2, #200	; 0xc8
   23a24:	5c9b      	ldrb	r3, [r3, r2]
   23a26:	2b00      	cmp	r3, #0
   23a28:	d008      	beq.n	23a3c <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   23a2a:	4b2d      	ldr	r3, [pc, #180]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a2c:	2288      	movs	r2, #136	; 0x88
   23a2e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23a30:	1dfa      	adds	r2, r7, #7
   23a32:	7812      	ldrb	r2, [r2, #0]
   23a34:	429a      	cmp	r2, r3
   23a36:	d001      	beq.n	23a3c <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23a38:	4b2a      	ldr	r3, [pc, #168]	; (23ae4 <eeprom_emulator_write_page+0xf4>)
   23a3a:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   23a3c:	230e      	movs	r3, #14
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	2200      	movs	r2, #0
   23a42:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   23a44:	1dfb      	adds	r3, r7, #7
   23a46:	781b      	ldrb	r3, [r3, #0]
   23a48:	4a25      	ldr	r2, [pc, #148]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a4a:	18d3      	adds	r3, r2, r3
   23a4c:	7adb      	ldrb	r3, [r3, #11]
   23a4e:	220f      	movs	r2, #15
   23a50:	18bc      	adds	r4, r7, r2
   23a52:	220e      	movs	r2, #14
   23a54:	18ba      	adds	r2, r7, r2
   23a56:	0011      	movs	r1, r2
   23a58:	0018      	movs	r0, r3
   23a5a:	4b23      	ldr	r3, [pc, #140]	; (23ae8 <eeprom_emulator_write_page+0xf8>)
   23a5c:	4798      	blx	r3
   23a5e:	0003      	movs	r3, r0
   23a60:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   23a62:	230f      	movs	r3, #15
   23a64:	18fb      	adds	r3, r7, r3
   23a66:	781b      	ldrb	r3, [r3, #0]
   23a68:	2201      	movs	r2, #1
   23a6a:	4053      	eors	r3, r2
   23a6c:	b2db      	uxtb	r3, r3
   23a6e:	2b00      	cmp	r3, #0
   23a70:	d00e      	beq.n	23a90 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   23a72:	1dfb      	adds	r3, r7, #7
   23a74:	781b      	ldrb	r3, [r3, #0]
   23a76:	4a1a      	ldr	r2, [pc, #104]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a78:	18d3      	adds	r3, r2, r3
   23a7a:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   23a7c:	089b      	lsrs	r3, r3, #2
   23a7e:	b2d8      	uxtb	r0, r3
   23a80:	683a      	ldr	r2, [r7, #0]
   23a82:	1dfb      	adds	r3, r7, #7
   23a84:	781b      	ldrb	r3, [r3, #0]
   23a86:	0019      	movs	r1, r3
   23a88:	4b18      	ldr	r3, [pc, #96]	; (23aec <eeprom_emulator_write_page+0xfc>)
   23a8a:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   23a8c:	2300      	movs	r3, #0
   23a8e:	e023      	b.n	23ad8 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   23a90:	4b13      	ldr	r3, [pc, #76]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a92:	1dfa      	adds	r2, r7, #7
   23a94:	2188      	movs	r1, #136	; 0x88
   23a96:	7812      	ldrb	r2, [r2, #0]
   23a98:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   23a9a:	4b11      	ldr	r3, [pc, #68]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23a9c:	228c      	movs	r2, #140	; 0x8c
   23a9e:	6839      	ldr	r1, [r7, #0]
   23aa0:	189b      	adds	r3, r3, r2
   23aa2:	223c      	movs	r2, #60	; 0x3c
   23aa4:	0018      	movs	r0, r3
   23aa6:	4b12      	ldr	r3, [pc, #72]	; (23af0 <eeprom_emulator_write_page+0x100>)
   23aa8:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23aaa:	230e      	movs	r3, #14
   23aac:	18fb      	adds	r3, r7, r3
   23aae:	781b      	ldrb	r3, [r3, #0]
   23ab0:	b29b      	uxth	r3, r3
   23ab2:	4a10      	ldr	r2, [pc, #64]	; (23af4 <eeprom_emulator_write_page+0x104>)
   23ab4:	0011      	movs	r1, r2
   23ab6:	0018      	movs	r0, r3
   23ab8:	4b0f      	ldr	r3, [pc, #60]	; (23af8 <eeprom_emulator_write_page+0x108>)
   23aba:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   23abc:	1dfb      	adds	r3, r7, #7
   23abe:	781b      	ldrb	r3, [r3, #0]
   23ac0:	220e      	movs	r2, #14
   23ac2:	18ba      	adds	r2, r7, r2
   23ac4:	7811      	ldrb	r1, [r2, #0]
   23ac6:	4a06      	ldr	r2, [pc, #24]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23ac8:	18d3      	adds	r3, r2, r3
   23aca:	1c0a      	adds	r2, r1, #0
   23acc:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   23ace:	4b04      	ldr	r3, [pc, #16]	; (23ae0 <eeprom_emulator_write_page+0xf0>)
   23ad0:	22c8      	movs	r2, #200	; 0xc8
   23ad2:	2101      	movs	r1, #1
   23ad4:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   23ad6:	2300      	movs	r3, #0
}
   23ad8:	0018      	movs	r0, r3
   23ada:	46bd      	mov	sp, r7
   23adc:	b005      	add	sp, #20
   23ade:	bd90      	pop	{r4, r7, pc}
   23ae0:	2000041c 	.word	0x2000041c
   23ae4:	00023b99 	.word	0x00023b99
   23ae8:	00023505 	.word	0x00023505
   23aec:	0002359d 	.word	0x0002359d
   23af0:	00028ddd 	.word	0x00028ddd
   23af4:	200004a4 	.word	0x200004a4
   23af8:	00023055 	.word	0x00023055

00023afc <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   23afc:	b580      	push	{r7, lr}
   23afe:	b092      	sub	sp, #72	; 0x48
   23b00:	af00      	add	r7, sp, #0
   23b02:	0002      	movs	r2, r0
   23b04:	6039      	str	r1, [r7, #0]
   23b06:	1dfb      	adds	r3, r7, #7
   23b08:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   23b0a:	4b20      	ldr	r3, [pc, #128]	; (23b8c <eeprom_emulator_read_page+0x90>)
   23b0c:	781b      	ldrb	r3, [r3, #0]
   23b0e:	2201      	movs	r2, #1
   23b10:	4053      	eors	r3, r2
   23b12:	b2db      	uxtb	r3, r3
   23b14:	2b00      	cmp	r3, #0
   23b16:	d001      	beq.n	23b1c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23b18:	231f      	movs	r3, #31
   23b1a:	e033      	b.n	23b84 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23b1c:	4b1b      	ldr	r3, [pc, #108]	; (23b8c <eeprom_emulator_read_page+0x90>)
   23b1e:	7a9b      	ldrb	r3, [r3, #10]
   23b20:	1dfa      	adds	r2, r7, #7
   23b22:	7812      	ldrb	r2, [r2, #0]
   23b24:	429a      	cmp	r2, r3
   23b26:	d301      	bcc.n	23b2c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23b28:	2318      	movs	r3, #24
   23b2a:	e02b      	b.n	23b84 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   23b2c:	4b17      	ldr	r3, [pc, #92]	; (23b8c <eeprom_emulator_read_page+0x90>)
   23b2e:	22c8      	movs	r2, #200	; 0xc8
   23b30:	5c9b      	ldrb	r3, [r3, r2]
   23b32:	2b00      	cmp	r3, #0
   23b34:	d010      	beq.n	23b58 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   23b36:	4b15      	ldr	r3, [pc, #84]	; (23b8c <eeprom_emulator_read_page+0x90>)
   23b38:	2288      	movs	r2, #136	; 0x88
   23b3a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23b3c:	1dfa      	adds	r2, r7, #7
   23b3e:	7812      	ldrb	r2, [r2, #0]
   23b40:	429a      	cmp	r2, r3
   23b42:	d109      	bne.n	23b58 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   23b44:	6839      	ldr	r1, [r7, #0]
   23b46:	4b11      	ldr	r3, [pc, #68]	; (23b8c <eeprom_emulator_read_page+0x90>)
   23b48:	228c      	movs	r2, #140	; 0x8c
   23b4a:	0008      	movs	r0, r1
   23b4c:	189b      	adds	r3, r3, r2
   23b4e:	223c      	movs	r2, #60	; 0x3c
   23b50:	0019      	movs	r1, r3
   23b52:	4b0f      	ldr	r3, [pc, #60]	; (23b90 <eeprom_emulator_read_page+0x94>)
   23b54:	4798      	blx	r3
   23b56:	e014      	b.n	23b82 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   23b58:	1dfb      	adds	r3, r7, #7
   23b5a:	781b      	ldrb	r3, [r3, #0]
   23b5c:	4a0b      	ldr	r2, [pc, #44]	; (23b8c <eeprom_emulator_read_page+0x90>)
   23b5e:	18d3      	adds	r3, r2, r3
   23b60:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   23b62:	b29b      	uxth	r3, r3
   23b64:	2208      	movs	r2, #8
   23b66:	18ba      	adds	r2, r7, r2
   23b68:	0011      	movs	r1, r2
   23b6a:	0018      	movs	r0, r3
   23b6c:	4b09      	ldr	r3, [pc, #36]	; (23b94 <eeprom_emulator_read_page+0x98>)
   23b6e:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   23b70:	683a      	ldr	r2, [r7, #0]
   23b72:	2308      	movs	r3, #8
   23b74:	18fb      	adds	r3, r7, r3
   23b76:	0010      	movs	r0, r2
   23b78:	3304      	adds	r3, #4
   23b7a:	223c      	movs	r2, #60	; 0x3c
   23b7c:	0019      	movs	r1, r3
   23b7e:	4b04      	ldr	r3, [pc, #16]	; (23b90 <eeprom_emulator_read_page+0x94>)
   23b80:	4798      	blx	r3
	}

	return STATUS_OK;
   23b82:	2300      	movs	r3, #0
}
   23b84:	0018      	movs	r0, r3
   23b86:	46bd      	mov	sp, r7
   23b88:	b012      	add	sp, #72	; 0x48
   23b8a:	bd80      	pop	{r7, pc}
   23b8c:	2000041c 	.word	0x2000041c
   23b90:	00028ddd 	.word	0x00028ddd
   23b94:	000230f1 	.word	0x000230f1

00023b98 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   23b98:	b580      	push	{r7, lr}
   23b9a:	b082      	sub	sp, #8
   23b9c:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   23b9e:	1dfb      	adds	r3, r7, #7
   23ba0:	2200      	movs	r2, #0
   23ba2:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   23ba4:	4b10      	ldr	r3, [pc, #64]	; (23be8 <eeprom_emulator_commit_page_buffer+0x50>)
   23ba6:	22c8      	movs	r2, #200	; 0xc8
   23ba8:	5c9b      	ldrb	r3, [r3, r2]
   23baa:	2201      	movs	r2, #1
   23bac:	4053      	eors	r3, r2
   23bae:	b2db      	uxtb	r3, r3
   23bb0:	2b00      	cmp	r3, #0
   23bb2:	d001      	beq.n	23bb8 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   23bb4:	2300      	movs	r3, #0
   23bb6:	e013      	b.n	23be0 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   23bb8:	1dbb      	adds	r3, r7, #6
   23bba:	4a0b      	ldr	r2, [pc, #44]	; (23be8 <eeprom_emulator_commit_page_buffer+0x50>)
   23bbc:	2188      	movs	r1, #136	; 0x88
   23bbe:	5c52      	ldrb	r2, [r2, r1]
   23bc0:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   23bc2:	1dbb      	adds	r3, r7, #6
   23bc4:	781b      	ldrb	r3, [r3, #0]
   23bc6:	4a08      	ldr	r2, [pc, #32]	; (23be8 <eeprom_emulator_commit_page_buffer+0x50>)
   23bc8:	18d3      	adds	r3, r2, r3
   23bca:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   23bcc:	b29b      	uxth	r3, r3
   23bce:	0018      	movs	r0, r3
   23bd0:	4b06      	ldr	r3, [pc, #24]	; (23bec <eeprom_emulator_commit_page_buffer+0x54>)
   23bd2:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   23bd4:	4b04      	ldr	r3, [pc, #16]	; (23be8 <eeprom_emulator_commit_page_buffer+0x50>)
   23bd6:	22c8      	movs	r2, #200	; 0xc8
   23bd8:	2100      	movs	r1, #0
   23bda:	5499      	strb	r1, [r3, r2]

	return error_code;
   23bdc:	1dfb      	adds	r3, r7, #7
   23bde:	781b      	ldrb	r3, [r3, #0]
}
   23be0:	0018      	movs	r0, r3
   23be2:	46bd      	mov	sp, r7
   23be4:	b002      	add	sp, #8
   23be6:	bd80      	pop	{r7, pc}
   23be8:	2000041c 	.word	0x2000041c
   23bec:	000230a5 	.word	0x000230a5

00023bf0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23bf0:	b580      	push	{r7, lr}
   23bf2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   23bf4:	46c0      	nop			; (mov r8, r8)
   23bf6:	46bd      	mov	sp, r7
   23bf8:	bd80      	pop	{r7, pc}
	...

00023bfc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   23bfc:	b580      	push	{r7, lr}
   23bfe:	b082      	sub	sp, #8
   23c00:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   23c02:	4b10      	ldr	r3, [pc, #64]	; (23c44 <cpu_irq_enter_critical+0x48>)
   23c04:	681b      	ldr	r3, [r3, #0]
   23c06:	2b00      	cmp	r3, #0
   23c08:	d112      	bne.n	23c30 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   23c0a:	f3ef 8310 	mrs	r3, PRIMASK
   23c0e:	607b      	str	r3, [r7, #4]
  return(result);
   23c10:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   23c12:	2b00      	cmp	r3, #0
   23c14:	d109      	bne.n	23c2a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   23c16:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   23c18:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   23c1c:	4b0a      	ldr	r3, [pc, #40]	; (23c48 <cpu_irq_enter_critical+0x4c>)
   23c1e:	2200      	movs	r2, #0
   23c20:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   23c22:	4b0a      	ldr	r3, [pc, #40]	; (23c4c <cpu_irq_enter_critical+0x50>)
   23c24:	2201      	movs	r2, #1
   23c26:	701a      	strb	r2, [r3, #0]
   23c28:	e002      	b.n	23c30 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   23c2a:	4b08      	ldr	r3, [pc, #32]	; (23c4c <cpu_irq_enter_critical+0x50>)
   23c2c:	2200      	movs	r2, #0
   23c2e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   23c30:	4b04      	ldr	r3, [pc, #16]	; (23c44 <cpu_irq_enter_critical+0x48>)
   23c32:	681b      	ldr	r3, [r3, #0]
   23c34:	1c5a      	adds	r2, r3, #1
   23c36:	4b03      	ldr	r3, [pc, #12]	; (23c44 <cpu_irq_enter_critical+0x48>)
   23c38:	601a      	str	r2, [r3, #0]
}
   23c3a:	46c0      	nop			; (mov r8, r8)
   23c3c:	46bd      	mov	sp, r7
   23c3e:	b002      	add	sp, #8
   23c40:	bd80      	pop	{r7, pc}
   23c42:	46c0      	nop			; (mov r8, r8)
   23c44:	200004e8 	.word	0x200004e8
   23c48:	20000028 	.word	0x20000028
   23c4c:	200004ec 	.word	0x200004ec

00023c50 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   23c50:	b580      	push	{r7, lr}
   23c52:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   23c54:	4b0b      	ldr	r3, [pc, #44]	; (23c84 <cpu_irq_leave_critical+0x34>)
   23c56:	681b      	ldr	r3, [r3, #0]
   23c58:	1e5a      	subs	r2, r3, #1
   23c5a:	4b0a      	ldr	r3, [pc, #40]	; (23c84 <cpu_irq_leave_critical+0x34>)
   23c5c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   23c5e:	4b09      	ldr	r3, [pc, #36]	; (23c84 <cpu_irq_leave_critical+0x34>)
   23c60:	681b      	ldr	r3, [r3, #0]
   23c62:	2b00      	cmp	r3, #0
   23c64:	d10a      	bne.n	23c7c <cpu_irq_leave_critical+0x2c>
   23c66:	4b08      	ldr	r3, [pc, #32]	; (23c88 <cpu_irq_leave_critical+0x38>)
   23c68:	781b      	ldrb	r3, [r3, #0]
   23c6a:	b2db      	uxtb	r3, r3
   23c6c:	2b00      	cmp	r3, #0
   23c6e:	d005      	beq.n	23c7c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   23c70:	4b06      	ldr	r3, [pc, #24]	; (23c8c <cpu_irq_leave_critical+0x3c>)
   23c72:	2201      	movs	r2, #1
   23c74:	701a      	strb	r2, [r3, #0]
   23c76:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   23c7a:	b662      	cpsie	i
	}
}
   23c7c:	46c0      	nop			; (mov r8, r8)
   23c7e:	46bd      	mov	sp, r7
   23c80:	bd80      	pop	{r7, pc}
   23c82:	46c0      	nop			; (mov r8, r8)
   23c84:	200004e8 	.word	0x200004e8
   23c88:	200004ec 	.word	0x200004ec
   23c8c:	20000028 	.word	0x20000028

00023c90 <system_gclk_gen_get_config_defaults>:
{
   23c90:	b580      	push	{r7, lr}
   23c92:	b082      	sub	sp, #8
   23c94:	af00      	add	r7, sp, #0
   23c96:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   23c98:	687b      	ldr	r3, [r7, #4]
   23c9a:	2201      	movs	r2, #1
   23c9c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   23c9e:	687b      	ldr	r3, [r7, #4]
   23ca0:	2200      	movs	r2, #0
   23ca2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   23ca4:	687b      	ldr	r3, [r7, #4]
   23ca6:	2206      	movs	r2, #6
   23ca8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   23caa:	687b      	ldr	r3, [r7, #4]
   23cac:	2200      	movs	r2, #0
   23cae:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   23cb0:	687b      	ldr	r3, [r7, #4]
   23cb2:	2200      	movs	r2, #0
   23cb4:	725a      	strb	r2, [r3, #9]
}
   23cb6:	46c0      	nop			; (mov r8, r8)
   23cb8:	46bd      	mov	sp, r7
   23cba:	b002      	add	sp, #8
   23cbc:	bd80      	pop	{r7, pc}

00023cbe <system_gclk_chan_get_config_defaults>:
{
   23cbe:	b580      	push	{r7, lr}
   23cc0:	b082      	sub	sp, #8
   23cc2:	af00      	add	r7, sp, #0
   23cc4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23cc6:	687b      	ldr	r3, [r7, #4]
   23cc8:	2200      	movs	r2, #0
   23cca:	701a      	strb	r2, [r3, #0]
}
   23ccc:	46c0      	nop			; (mov r8, r8)
   23cce:	46bd      	mov	sp, r7
   23cd0:	b002      	add	sp, #8
   23cd2:	bd80      	pop	{r7, pc}

00023cd4 <system_clock_source_xosc32k_get_config_defaults>:
{
   23cd4:	b580      	push	{r7, lr}
   23cd6:	b082      	sub	sp, #8
   23cd8:	af00      	add	r7, sp, #0
   23cda:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   23cdc:	687b      	ldr	r3, [r7, #4]
   23cde:	2200      	movs	r2, #0
   23ce0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   23ce2:	687b      	ldr	r3, [r7, #4]
   23ce4:	2204      	movs	r2, #4
   23ce6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   23ce8:	687b      	ldr	r3, [r7, #4]
   23cea:	2200      	movs	r2, #0
   23cec:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   23cee:	687b      	ldr	r3, [r7, #4]
   23cf0:	2280      	movs	r2, #128	; 0x80
   23cf2:	0212      	lsls	r2, r2, #8
   23cf4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   23cf6:	687b      	ldr	r3, [r7, #4]
   23cf8:	2200      	movs	r2, #0
   23cfa:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   23cfc:	687b      	ldr	r3, [r7, #4]
   23cfe:	2201      	movs	r2, #1
   23d00:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   23d02:	687b      	ldr	r3, [r7, #4]
   23d04:	2200      	movs	r2, #0
   23d06:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   23d08:	687b      	ldr	r3, [r7, #4]
   23d0a:	2201      	movs	r2, #1
   23d0c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   23d0e:	687b      	ldr	r3, [r7, #4]
   23d10:	2200      	movs	r2, #0
   23d12:	739a      	strb	r2, [r3, #14]
}
   23d14:	46c0      	nop			; (mov r8, r8)
   23d16:	46bd      	mov	sp, r7
   23d18:	b002      	add	sp, #8
   23d1a:	bd80      	pop	{r7, pc}

00023d1c <system_clock_source_osc8m_get_config_defaults>:
{
   23d1c:	b580      	push	{r7, lr}
   23d1e:	b082      	sub	sp, #8
   23d20:	af00      	add	r7, sp, #0
   23d22:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   23d24:	687b      	ldr	r3, [r7, #4]
   23d26:	2203      	movs	r2, #3
   23d28:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   23d2a:	687b      	ldr	r3, [r7, #4]
   23d2c:	2200      	movs	r2, #0
   23d2e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   23d30:	687b      	ldr	r3, [r7, #4]
   23d32:	2201      	movs	r2, #1
   23d34:	709a      	strb	r2, [r3, #2]
}
   23d36:	46c0      	nop			; (mov r8, r8)
   23d38:	46bd      	mov	sp, r7
   23d3a:	b002      	add	sp, #8
   23d3c:	bd80      	pop	{r7, pc}

00023d3e <system_clock_source_dfll_get_config_defaults>:
{
   23d3e:	b580      	push	{r7, lr}
   23d40:	b082      	sub	sp, #8
   23d42:	af00      	add	r7, sp, #0
   23d44:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   23d46:	687b      	ldr	r3, [r7, #4]
   23d48:	2200      	movs	r2, #0
   23d4a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   23d4c:	687b      	ldr	r3, [r7, #4]
   23d4e:	2200      	movs	r2, #0
   23d50:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   23d52:	687b      	ldr	r3, [r7, #4]
   23d54:	2200      	movs	r2, #0
   23d56:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   23d58:	687b      	ldr	r3, [r7, #4]
   23d5a:	2200      	movs	r2, #0
   23d5c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   23d5e:	687b      	ldr	r3, [r7, #4]
   23d60:	2200      	movs	r2, #0
   23d62:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   23d64:	687b      	ldr	r3, [r7, #4]
   23d66:	2201      	movs	r2, #1
   23d68:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   23d6a:	687b      	ldr	r3, [r7, #4]
   23d6c:	2207      	movs	r2, #7
   23d6e:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   23d70:	687b      	ldr	r3, [r7, #4]
   23d72:	223f      	movs	r2, #63	; 0x3f
   23d74:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   23d76:	687b      	ldr	r3, [r7, #4]
   23d78:	2201      	movs	r2, #1
   23d7a:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   23d7c:	687b      	ldr	r3, [r7, #4]
   23d7e:	2201      	movs	r2, #1
   23d80:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   23d82:	687b      	ldr	r3, [r7, #4]
   23d84:	2206      	movs	r2, #6
   23d86:	821a      	strh	r2, [r3, #16]
}
   23d88:	46c0      	nop			; (mov r8, r8)
   23d8a:	46bd      	mov	sp, r7
   23d8c:	b002      	add	sp, #8
   23d8e:	bd80      	pop	{r7, pc}

00023d90 <system_cpu_clock_set_divider>:
{
   23d90:	b580      	push	{r7, lr}
   23d92:	b082      	sub	sp, #8
   23d94:	af00      	add	r7, sp, #0
   23d96:	0002      	movs	r2, r0
   23d98:	1dfb      	adds	r3, r7, #7
   23d9a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   23d9c:	4a03      	ldr	r2, [pc, #12]	; (23dac <system_cpu_clock_set_divider+0x1c>)
   23d9e:	1dfb      	adds	r3, r7, #7
   23da0:	781b      	ldrb	r3, [r3, #0]
   23da2:	7213      	strb	r3, [r2, #8]
}
   23da4:	46c0      	nop			; (mov r8, r8)
   23da6:	46bd      	mov	sp, r7
   23da8:	b002      	add	sp, #8
   23daa:	bd80      	pop	{r7, pc}
   23dac:	40000400 	.word	0x40000400

00023db0 <system_apb_clock_set_divider>:
{
   23db0:	b580      	push	{r7, lr}
   23db2:	b082      	sub	sp, #8
   23db4:	af00      	add	r7, sp, #0
   23db6:	0002      	movs	r2, r0
   23db8:	1dfb      	adds	r3, r7, #7
   23dba:	701a      	strb	r2, [r3, #0]
   23dbc:	1dbb      	adds	r3, r7, #6
   23dbe:	1c0a      	adds	r2, r1, #0
   23dc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   23dc2:	1dfb      	adds	r3, r7, #7
   23dc4:	781b      	ldrb	r3, [r3, #0]
   23dc6:	2b01      	cmp	r3, #1
   23dc8:	d008      	beq.n	23ddc <system_apb_clock_set_divider+0x2c>
   23dca:	2b02      	cmp	r3, #2
   23dcc:	d00b      	beq.n	23de6 <system_apb_clock_set_divider+0x36>
   23dce:	2b00      	cmp	r3, #0
   23dd0:	d10e      	bne.n	23df0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   23dd2:	4a0b      	ldr	r2, [pc, #44]	; (23e00 <system_apb_clock_set_divider+0x50>)
   23dd4:	1dbb      	adds	r3, r7, #6
   23dd6:	781b      	ldrb	r3, [r3, #0]
   23dd8:	7253      	strb	r3, [r2, #9]
			break;
   23dda:	e00b      	b.n	23df4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   23ddc:	4a08      	ldr	r2, [pc, #32]	; (23e00 <system_apb_clock_set_divider+0x50>)
   23dde:	1dbb      	adds	r3, r7, #6
   23de0:	781b      	ldrb	r3, [r3, #0]
   23de2:	7293      	strb	r3, [r2, #10]
			break;
   23de4:	e006      	b.n	23df4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   23de6:	4a06      	ldr	r2, [pc, #24]	; (23e00 <system_apb_clock_set_divider+0x50>)
   23de8:	1dbb      	adds	r3, r7, #6
   23dea:	781b      	ldrb	r3, [r3, #0]
   23dec:	72d3      	strb	r3, [r2, #11]
			break;
   23dee:	e001      	b.n	23df4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   23df0:	2317      	movs	r3, #23
   23df2:	e000      	b.n	23df6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   23df4:	2300      	movs	r3, #0
}
   23df6:	0018      	movs	r0, r3
   23df8:	46bd      	mov	sp, r7
   23dfa:	b002      	add	sp, #8
   23dfc:	bd80      	pop	{r7, pc}
   23dfe:	46c0      	nop			; (mov r8, r8)
   23e00:	40000400 	.word	0x40000400

00023e04 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   23e04:	b580      	push	{r7, lr}
   23e06:	b082      	sub	sp, #8
   23e08:	af00      	add	r7, sp, #0
   23e0a:	0002      	movs	r2, r0
   23e0c:	1dfb      	adds	r3, r7, #7
   23e0e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   23e10:	4a08      	ldr	r2, [pc, #32]	; (23e34 <system_flash_set_waitstates+0x30>)
   23e12:	1dfb      	adds	r3, r7, #7
   23e14:	781b      	ldrb	r3, [r3, #0]
   23e16:	210f      	movs	r1, #15
   23e18:	400b      	ands	r3, r1
   23e1a:	b2d9      	uxtb	r1, r3
   23e1c:	6853      	ldr	r3, [r2, #4]
   23e1e:	200f      	movs	r0, #15
   23e20:	4001      	ands	r1, r0
   23e22:	0049      	lsls	r1, r1, #1
   23e24:	201e      	movs	r0, #30
   23e26:	4383      	bics	r3, r0
   23e28:	430b      	orrs	r3, r1
   23e2a:	6053      	str	r3, [r2, #4]
}
   23e2c:	46c0      	nop			; (mov r8, r8)
   23e2e:	46bd      	mov	sp, r7
   23e30:	b002      	add	sp, #8
   23e32:	bd80      	pop	{r7, pc}
   23e34:	41004000 	.word	0x41004000

00023e38 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   23e38:	b580      	push	{r7, lr}
   23e3a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   23e3c:	46c0      	nop			; (mov r8, r8)
   23e3e:	4b04      	ldr	r3, [pc, #16]	; (23e50 <_system_dfll_wait_for_sync+0x18>)
   23e40:	68db      	ldr	r3, [r3, #12]
   23e42:	2210      	movs	r2, #16
   23e44:	4013      	ands	r3, r2
   23e46:	d0fa      	beq.n	23e3e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   23e48:	46c0      	nop			; (mov r8, r8)
   23e4a:	46bd      	mov	sp, r7
   23e4c:	bd80      	pop	{r7, pc}
   23e4e:	46c0      	nop			; (mov r8, r8)
   23e50:	40000800 	.word	0x40000800

00023e54 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   23e54:	b580      	push	{r7, lr}
   23e56:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   23e58:	4b0c      	ldr	r3, [pc, #48]	; (23e8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23e5a:	2202      	movs	r2, #2
   23e5c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23e5e:	4b0c      	ldr	r3, [pc, #48]	; (23e90 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23e60:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   23e62:	4a0a      	ldr	r2, [pc, #40]	; (23e8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23e64:	4b0b      	ldr	r3, [pc, #44]	; (23e94 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23e66:	689b      	ldr	r3, [r3, #8]
   23e68:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   23e6a:	4a08      	ldr	r2, [pc, #32]	; (23e8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23e6c:	4b09      	ldr	r3, [pc, #36]	; (23e94 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23e6e:	685b      	ldr	r3, [r3, #4]
   23e70:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   23e72:	4b06      	ldr	r3, [pc, #24]	; (23e8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23e74:	2200      	movs	r2, #0
   23e76:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23e78:	4b05      	ldr	r3, [pc, #20]	; (23e90 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23e7a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   23e7c:	4a03      	ldr	r2, [pc, #12]	; (23e8c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23e7e:	4b05      	ldr	r3, [pc, #20]	; (23e94 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23e80:	681b      	ldr	r3, [r3, #0]
   23e82:	b29b      	uxth	r3, r3
   23e84:	8493      	strh	r3, [r2, #36]	; 0x24
}
   23e86:	46c0      	nop			; (mov r8, r8)
   23e88:	46bd      	mov	sp, r7
   23e8a:	bd80      	pop	{r7, pc}
   23e8c:	40000800 	.word	0x40000800
   23e90:	00023e39 	.word	0x00023e39
   23e94:	200004f0 	.word	0x200004f0

00023e98 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   23e98:	b580      	push	{r7, lr}
   23e9a:	b082      	sub	sp, #8
   23e9c:	af00      	add	r7, sp, #0
   23e9e:	0002      	movs	r2, r0
   23ea0:	1dfb      	adds	r3, r7, #7
   23ea2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23ea4:	1dfb      	adds	r3, r7, #7
   23ea6:	781b      	ldrb	r3, [r3, #0]
   23ea8:	2b08      	cmp	r3, #8
   23eaa:	d841      	bhi.n	23f30 <system_clock_source_get_hz+0x98>
   23eac:	009a      	lsls	r2, r3, #2
   23eae:	4b23      	ldr	r3, [pc, #140]	; (23f3c <system_clock_source_get_hz+0xa4>)
   23eb0:	18d3      	adds	r3, r2, r3
   23eb2:	681b      	ldr	r3, [r3, #0]
   23eb4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   23eb6:	4b22      	ldr	r3, [pc, #136]	; (23f40 <system_clock_source_get_hz+0xa8>)
   23eb8:	691b      	ldr	r3, [r3, #16]
   23eba:	e03a      	b.n	23f32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   23ebc:	4b21      	ldr	r3, [pc, #132]	; (23f44 <system_clock_source_get_hz+0xac>)
   23ebe:	6a1b      	ldr	r3, [r3, #32]
   23ec0:	059b      	lsls	r3, r3, #22
   23ec2:	0f9b      	lsrs	r3, r3, #30
   23ec4:	b2db      	uxtb	r3, r3
   23ec6:	001a      	movs	r2, r3
   23ec8:	4b1f      	ldr	r3, [pc, #124]	; (23f48 <system_clock_source_get_hz+0xb0>)
   23eca:	40d3      	lsrs	r3, r2
   23ecc:	e031      	b.n	23f32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   23ece:	2380      	movs	r3, #128	; 0x80
   23ed0:	021b      	lsls	r3, r3, #8
   23ed2:	e02e      	b.n	23f32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   23ed4:	2380      	movs	r3, #128	; 0x80
   23ed6:	021b      	lsls	r3, r3, #8
   23ed8:	e02b      	b.n	23f32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   23eda:	4b19      	ldr	r3, [pc, #100]	; (23f40 <system_clock_source_get_hz+0xa8>)
   23edc:	695b      	ldr	r3, [r3, #20]
   23ede:	e028      	b.n	23f32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   23ee0:	4b17      	ldr	r3, [pc, #92]	; (23f40 <system_clock_source_get_hz+0xa8>)
   23ee2:	681b      	ldr	r3, [r3, #0]
   23ee4:	2202      	movs	r2, #2
   23ee6:	4013      	ands	r3, r2
   23ee8:	d101      	bne.n	23eee <system_clock_source_get_hz+0x56>
			return 0;
   23eea:	2300      	movs	r3, #0
   23eec:	e021      	b.n	23f32 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   23eee:	4b17      	ldr	r3, [pc, #92]	; (23f4c <system_clock_source_get_hz+0xb4>)
   23ef0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   23ef2:	4b13      	ldr	r3, [pc, #76]	; (23f40 <system_clock_source_get_hz+0xa8>)
   23ef4:	681b      	ldr	r3, [r3, #0]
   23ef6:	2224      	movs	r2, #36	; 0x24
   23ef8:	4013      	ands	r3, r2
   23efa:	2b04      	cmp	r3, #4
   23efc:	d109      	bne.n	23f12 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23efe:	2000      	movs	r0, #0
   23f00:	4b13      	ldr	r3, [pc, #76]	; (23f50 <system_clock_source_get_hz+0xb8>)
   23f02:	4798      	blx	r3
   23f04:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   23f06:	4b0e      	ldr	r3, [pc, #56]	; (23f40 <system_clock_source_get_hz+0xa8>)
   23f08:	689b      	ldr	r3, [r3, #8]
   23f0a:	041b      	lsls	r3, r3, #16
   23f0c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23f0e:	4353      	muls	r3, r2
   23f10:	e00f      	b.n	23f32 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   23f12:	4b10      	ldr	r3, [pc, #64]	; (23f54 <system_clock_source_get_hz+0xbc>)
   23f14:	e00d      	b.n	23f32 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   23f16:	4a0b      	ldr	r2, [pc, #44]	; (23f44 <system_clock_source_get_hz+0xac>)
   23f18:	2350      	movs	r3, #80	; 0x50
   23f1a:	5cd3      	ldrb	r3, [r2, r3]
   23f1c:	b2db      	uxtb	r3, r3
   23f1e:	001a      	movs	r2, r3
   23f20:	2304      	movs	r3, #4
   23f22:	4013      	ands	r3, r2
   23f24:	d101      	bne.n	23f2a <system_clock_source_get_hz+0x92>
			return 0;
   23f26:	2300      	movs	r3, #0
   23f28:	e003      	b.n	23f32 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   23f2a:	4b05      	ldr	r3, [pc, #20]	; (23f40 <system_clock_source_get_hz+0xa8>)
   23f2c:	68db      	ldr	r3, [r3, #12]
   23f2e:	e000      	b.n	23f32 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   23f30:	2300      	movs	r3, #0
	}
}
   23f32:	0018      	movs	r0, r3
   23f34:	46bd      	mov	sp, r7
   23f36:	b002      	add	sp, #8
   23f38:	bd80      	pop	{r7, pc}
   23f3a:	46c0      	nop			; (mov r8, r8)
   23f3c:	0002ac1c 	.word	0x0002ac1c
   23f40:	200004f0 	.word	0x200004f0
   23f44:	40000800 	.word	0x40000800
   23f48:	007a1200 	.word	0x007a1200
   23f4c:	00023e39 	.word	0x00023e39
   23f50:	00024ad9 	.word	0x00024ad9
   23f54:	02dc6c00 	.word	0x02dc6c00

00023f58 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   23f58:	b580      	push	{r7, lr}
   23f5a:	b084      	sub	sp, #16
   23f5c:	af00      	add	r7, sp, #0
   23f5e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   23f60:	4b1a      	ldr	r3, [pc, #104]	; (23fcc <system_clock_source_osc8m_set_config+0x74>)
   23f62:	6a1b      	ldr	r3, [r3, #32]
   23f64:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   23f66:	687b      	ldr	r3, [r7, #4]
   23f68:	781b      	ldrb	r3, [r3, #0]
   23f6a:	1c1a      	adds	r2, r3, #0
   23f6c:	2303      	movs	r3, #3
   23f6e:	4013      	ands	r3, r2
   23f70:	b2da      	uxtb	r2, r3
   23f72:	230d      	movs	r3, #13
   23f74:	18fb      	adds	r3, r7, r3
   23f76:	2103      	movs	r1, #3
   23f78:	400a      	ands	r2, r1
   23f7a:	0010      	movs	r0, r2
   23f7c:	781a      	ldrb	r2, [r3, #0]
   23f7e:	2103      	movs	r1, #3
   23f80:	438a      	bics	r2, r1
   23f82:	1c11      	adds	r1, r2, #0
   23f84:	1c02      	adds	r2, r0, #0
   23f86:	430a      	orrs	r2, r1
   23f88:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   23f8a:	687b      	ldr	r3, [r7, #4]
   23f8c:	789a      	ldrb	r2, [r3, #2]
   23f8e:	230c      	movs	r3, #12
   23f90:	18fb      	adds	r3, r7, r3
   23f92:	01d0      	lsls	r0, r2, #7
   23f94:	781a      	ldrb	r2, [r3, #0]
   23f96:	217f      	movs	r1, #127	; 0x7f
   23f98:	400a      	ands	r2, r1
   23f9a:	1c11      	adds	r1, r2, #0
   23f9c:	1c02      	adds	r2, r0, #0
   23f9e:	430a      	orrs	r2, r1
   23fa0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   23fa2:	687b      	ldr	r3, [r7, #4]
   23fa4:	785a      	ldrb	r2, [r3, #1]
   23fa6:	230c      	movs	r3, #12
   23fa8:	18fb      	adds	r3, r7, r3
   23faa:	2101      	movs	r1, #1
   23fac:	400a      	ands	r2, r1
   23fae:	0190      	lsls	r0, r2, #6
   23fb0:	781a      	ldrb	r2, [r3, #0]
   23fb2:	2140      	movs	r1, #64	; 0x40
   23fb4:	438a      	bics	r2, r1
   23fb6:	1c11      	adds	r1, r2, #0
   23fb8:	1c02      	adds	r2, r0, #0
   23fba:	430a      	orrs	r2, r1
   23fbc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   23fbe:	4b03      	ldr	r3, [pc, #12]	; (23fcc <system_clock_source_osc8m_set_config+0x74>)
   23fc0:	68fa      	ldr	r2, [r7, #12]
   23fc2:	621a      	str	r2, [r3, #32]
}
   23fc4:	46c0      	nop			; (mov r8, r8)
   23fc6:	46bd      	mov	sp, r7
   23fc8:	b004      	add	sp, #16
   23fca:	bd80      	pop	{r7, pc}
   23fcc:	40000800 	.word	0x40000800

00023fd0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   23fd0:	b580      	push	{r7, lr}
   23fd2:	b084      	sub	sp, #16
   23fd4:	af00      	add	r7, sp, #0
   23fd6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   23fd8:	4a43      	ldr	r2, [pc, #268]	; (240e8 <system_clock_source_xosc32k_set_config+0x118>)
   23fda:	230c      	movs	r3, #12
   23fdc:	18fb      	adds	r3, r7, r3
   23fde:	8a92      	ldrh	r2, [r2, #20]
   23fe0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   23fe2:	687b      	ldr	r3, [r7, #4]
   23fe4:	785b      	ldrb	r3, [r3, #1]
   23fe6:	1c1a      	adds	r2, r3, #0
   23fe8:	2307      	movs	r3, #7
   23fea:	4013      	ands	r3, r2
   23fec:	b2da      	uxtb	r2, r3
   23fee:	230c      	movs	r3, #12
   23ff0:	18fb      	adds	r3, r7, r3
   23ff2:	2107      	movs	r1, #7
   23ff4:	400a      	ands	r2, r1
   23ff6:	0010      	movs	r0, r2
   23ff8:	785a      	ldrb	r2, [r3, #1]
   23ffa:	2107      	movs	r1, #7
   23ffc:	438a      	bics	r2, r1
   23ffe:	1c11      	adds	r1, r2, #0
   24000:	1c02      	adds	r2, r0, #0
   24002:	430a      	orrs	r2, r1
   24004:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   24006:	687b      	ldr	r3, [r7, #4]
   24008:	781b      	ldrb	r3, [r3, #0]
   2400a:	2b00      	cmp	r3, #0
   2400c:	d106      	bne.n	2401c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   2400e:	230c      	movs	r3, #12
   24010:	18fb      	adds	r3, r7, r3
   24012:	781a      	ldrb	r2, [r3, #0]
   24014:	2104      	movs	r1, #4
   24016:	430a      	orrs	r2, r1
   24018:	701a      	strb	r2, [r3, #0]
   2401a:	e005      	b.n	24028 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   2401c:	230c      	movs	r3, #12
   2401e:	18fb      	adds	r3, r7, r3
   24020:	781a      	ldrb	r2, [r3, #0]
   24022:	2104      	movs	r1, #4
   24024:	438a      	bics	r2, r1
   24026:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   24028:	687b      	ldr	r3, [r7, #4]
   2402a:	789a      	ldrb	r2, [r3, #2]
   2402c:	230c      	movs	r3, #12
   2402e:	18fb      	adds	r3, r7, r3
   24030:	2101      	movs	r1, #1
   24032:	400a      	ands	r2, r1
   24034:	0150      	lsls	r0, r2, #5
   24036:	781a      	ldrb	r2, [r3, #0]
   24038:	2120      	movs	r1, #32
   2403a:	438a      	bics	r2, r1
   2403c:	1c11      	adds	r1, r2, #0
   2403e:	1c02      	adds	r2, r0, #0
   24040:	430a      	orrs	r2, r1
   24042:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   24044:	687b      	ldr	r3, [r7, #4]
   24046:	78da      	ldrb	r2, [r3, #3]
   24048:	230c      	movs	r3, #12
   2404a:	18fb      	adds	r3, r7, r3
   2404c:	2101      	movs	r1, #1
   2404e:	400a      	ands	r2, r1
   24050:	0110      	lsls	r0, r2, #4
   24052:	781a      	ldrb	r2, [r3, #0]
   24054:	2110      	movs	r1, #16
   24056:	438a      	bics	r2, r1
   24058:	1c11      	adds	r1, r2, #0
   2405a:	1c02      	adds	r2, r0, #0
   2405c:	430a      	orrs	r2, r1
   2405e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   24060:	687b      	ldr	r3, [r7, #4]
   24062:	791a      	ldrb	r2, [r3, #4]
   24064:	230c      	movs	r3, #12
   24066:	18fb      	adds	r3, r7, r3
   24068:	2101      	movs	r1, #1
   2406a:	400a      	ands	r2, r1
   2406c:	00d0      	lsls	r0, r2, #3
   2406e:	781a      	ldrb	r2, [r3, #0]
   24070:	2108      	movs	r1, #8
   24072:	438a      	bics	r2, r1
   24074:	1c11      	adds	r1, r2, #0
   24076:	1c02      	adds	r2, r0, #0
   24078:	430a      	orrs	r2, r1
   2407a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   2407c:	687b      	ldr	r3, [r7, #4]
   2407e:	7b5a      	ldrb	r2, [r3, #13]
   24080:	230c      	movs	r3, #12
   24082:	18fb      	adds	r3, r7, r3
   24084:	01d0      	lsls	r0, r2, #7
   24086:	781a      	ldrb	r2, [r3, #0]
   24088:	217f      	movs	r1, #127	; 0x7f
   2408a:	400a      	ands	r2, r1
   2408c:	1c11      	adds	r1, r2, #0
   2408e:	1c02      	adds	r2, r0, #0
   24090:	430a      	orrs	r2, r1
   24092:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24094:	687b      	ldr	r3, [r7, #4]
   24096:	7b1a      	ldrb	r2, [r3, #12]
   24098:	230c      	movs	r3, #12
   2409a:	18fb      	adds	r3, r7, r3
   2409c:	2101      	movs	r1, #1
   2409e:	400a      	ands	r2, r1
   240a0:	0190      	lsls	r0, r2, #6
   240a2:	781a      	ldrb	r2, [r3, #0]
   240a4:	2140      	movs	r1, #64	; 0x40
   240a6:	438a      	bics	r2, r1
   240a8:	1c11      	adds	r1, r2, #0
   240aa:	1c02      	adds	r2, r0, #0
   240ac:	430a      	orrs	r2, r1
   240ae:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   240b0:	687b      	ldr	r3, [r7, #4]
   240b2:	7b9a      	ldrb	r2, [r3, #14]
   240b4:	230c      	movs	r3, #12
   240b6:	18fb      	adds	r3, r7, r3
   240b8:	2101      	movs	r1, #1
   240ba:	400a      	ands	r2, r1
   240bc:	0110      	lsls	r0, r2, #4
   240be:	785a      	ldrb	r2, [r3, #1]
   240c0:	2110      	movs	r1, #16
   240c2:	438a      	bics	r2, r1
   240c4:	1c11      	adds	r1, r2, #0
   240c6:	1c02      	adds	r2, r0, #0
   240c8:	430a      	orrs	r2, r1
   240ca:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   240cc:	687b      	ldr	r3, [r7, #4]
   240ce:	689a      	ldr	r2, [r3, #8]
   240d0:	4b06      	ldr	r3, [pc, #24]	; (240ec <system_clock_source_xosc32k_set_config+0x11c>)
   240d2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   240d4:	4a04      	ldr	r2, [pc, #16]	; (240e8 <system_clock_source_xosc32k_set_config+0x118>)
   240d6:	230c      	movs	r3, #12
   240d8:	18fb      	adds	r3, r7, r3
   240da:	881b      	ldrh	r3, [r3, #0]
   240dc:	8293      	strh	r3, [r2, #20]
}
   240de:	46c0      	nop			; (mov r8, r8)
   240e0:	46bd      	mov	sp, r7
   240e2:	b004      	add	sp, #16
   240e4:	bd80      	pop	{r7, pc}
   240e6:	46c0      	nop			; (mov r8, r8)
   240e8:	40000800 	.word	0x40000800
   240ec:	200004f0 	.word	0x200004f0

000240f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   240f0:	b580      	push	{r7, lr}
   240f2:	b082      	sub	sp, #8
   240f4:	af00      	add	r7, sp, #0
   240f6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   240f8:	687b      	ldr	r3, [r7, #4]
   240fa:	7a1b      	ldrb	r3, [r3, #8]
   240fc:	029b      	lsls	r3, r3, #10
   240fe:	041b      	lsls	r3, r3, #16
   24100:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   24102:	687b      	ldr	r3, [r7, #4]
   24104:	895b      	ldrh	r3, [r3, #10]
   24106:	059b      	lsls	r3, r3, #22
   24108:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   2410a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   2410c:	4b2a      	ldr	r3, [pc, #168]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   2410e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   24110:	687b      	ldr	r3, [r7, #4]
   24112:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   24114:	687b      	ldr	r3, [r7, #4]
   24116:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   24118:	4313      	orrs	r3, r2
   2411a:	b2db      	uxtb	r3, r3
   2411c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   2411e:	687b      	ldr	r3, [r7, #4]
   24120:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   24122:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   24124:	687a      	ldr	r2, [r7, #4]
   24126:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   24128:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   2412a:	687b      	ldr	r3, [r7, #4]
   2412c:	785b      	ldrb	r3, [r3, #1]
   2412e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   24130:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   24132:	4b21      	ldr	r3, [pc, #132]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   24134:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   24136:	687b      	ldr	r3, [r7, #4]
   24138:	781b      	ldrb	r3, [r3, #0]
   2413a:	2b04      	cmp	r3, #4
   2413c:	d116      	bne.n	2416c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   2413e:	687b      	ldr	r3, [r7, #4]
   24140:	7b1b      	ldrb	r3, [r3, #12]
   24142:	069b      	lsls	r3, r3, #26
   24144:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24146:	687b      	ldr	r3, [r7, #4]
   24148:	89db      	ldrh	r3, [r3, #14]
   2414a:	041b      	lsls	r3, r3, #16
   2414c:	0019      	movs	r1, r3
   2414e:	4b1b      	ldr	r3, [pc, #108]	; (241bc <system_clock_source_dfll_set_config+0xcc>)
   24150:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24152:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   24154:	687a      	ldr	r2, [r7, #4]
   24156:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24158:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   2415a:	4b17      	ldr	r3, [pc, #92]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   2415c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   2415e:	4b16      	ldr	r3, [pc, #88]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   24160:	681b      	ldr	r3, [r3, #0]
   24162:	687a      	ldr	r2, [r7, #4]
   24164:	7812      	ldrb	r2, [r2, #0]
   24166:	431a      	orrs	r2, r3
   24168:	4b13      	ldr	r3, [pc, #76]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   2416a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   2416c:	687b      	ldr	r3, [r7, #4]
   2416e:	781b      	ldrb	r3, [r3, #0]
   24170:	2b20      	cmp	r3, #32
   24172:	d11c      	bne.n	241ae <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24174:	687b      	ldr	r3, [r7, #4]
   24176:	7b1b      	ldrb	r3, [r3, #12]
   24178:	069b      	lsls	r3, r3, #26
   2417a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   2417c:	687b      	ldr	r3, [r7, #4]
   2417e:	89db      	ldrh	r3, [r3, #14]
   24180:	041b      	lsls	r3, r3, #16
   24182:	0019      	movs	r1, r3
   24184:	4b0d      	ldr	r3, [pc, #52]	; (241bc <system_clock_source_dfll_set_config+0xcc>)
   24186:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24188:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   2418a:	687a      	ldr	r2, [r7, #4]
   2418c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   2418e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   24190:	4b09      	ldr	r3, [pc, #36]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   24192:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   24194:	4b08      	ldr	r3, [pc, #32]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   24196:	681b      	ldr	r3, [r3, #0]
   24198:	687a      	ldr	r2, [r7, #4]
   2419a:	7812      	ldrb	r2, [r2, #0]
   2419c:	2104      	movs	r1, #4
   2419e:	430a      	orrs	r2, r1
   241a0:	b2d2      	uxtb	r2, r2
   241a2:	4313      	orrs	r3, r2
   241a4:	2280      	movs	r2, #128	; 0x80
   241a6:	00d2      	lsls	r2, r2, #3
   241a8:	431a      	orrs	r2, r3
   241aa:	4b03      	ldr	r3, [pc, #12]	; (241b8 <system_clock_source_dfll_set_config+0xc8>)
   241ac:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   241ae:	46c0      	nop			; (mov r8, r8)
   241b0:	46bd      	mov	sp, r7
   241b2:	b002      	add	sp, #8
   241b4:	bd80      	pop	{r7, pc}
   241b6:	46c0      	nop			; (mov r8, r8)
   241b8:	200004f0 	.word	0x200004f0
   241bc:	03ff0000 	.word	0x03ff0000

000241c0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   241c0:	b580      	push	{r7, lr}
   241c2:	b082      	sub	sp, #8
   241c4:	af00      	add	r7, sp, #0
   241c6:	0002      	movs	r2, r0
   241c8:	1dfb      	adds	r3, r7, #7
   241ca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   241cc:	1dfb      	adds	r3, r7, #7
   241ce:	781b      	ldrb	r3, [r3, #0]
   241d0:	2b08      	cmp	r3, #8
   241d2:	d83b      	bhi.n	2424c <system_clock_source_enable+0x8c>
   241d4:	009a      	lsls	r2, r3, #2
   241d6:	4b21      	ldr	r3, [pc, #132]	; (2425c <system_clock_source_enable+0x9c>)
   241d8:	18d3      	adds	r3, r2, r3
   241da:	681b      	ldr	r3, [r3, #0]
   241dc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   241de:	4b20      	ldr	r3, [pc, #128]	; (24260 <system_clock_source_enable+0xa0>)
   241e0:	4a1f      	ldr	r2, [pc, #124]	; (24260 <system_clock_source_enable+0xa0>)
   241e2:	6a12      	ldr	r2, [r2, #32]
   241e4:	2102      	movs	r1, #2
   241e6:	430a      	orrs	r2, r1
   241e8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   241ea:	2300      	movs	r3, #0
   241ec:	e031      	b.n	24252 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   241ee:	4b1c      	ldr	r3, [pc, #112]	; (24260 <system_clock_source_enable+0xa0>)
   241f0:	4a1b      	ldr	r2, [pc, #108]	; (24260 <system_clock_source_enable+0xa0>)
   241f2:	6992      	ldr	r2, [r2, #24]
   241f4:	2102      	movs	r1, #2
   241f6:	430a      	orrs	r2, r1
   241f8:	619a      	str	r2, [r3, #24]
		break;
   241fa:	e029      	b.n	24250 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   241fc:	4a18      	ldr	r2, [pc, #96]	; (24260 <system_clock_source_enable+0xa0>)
   241fe:	4b18      	ldr	r3, [pc, #96]	; (24260 <system_clock_source_enable+0xa0>)
   24200:	8a1b      	ldrh	r3, [r3, #16]
   24202:	b29b      	uxth	r3, r3
   24204:	2102      	movs	r1, #2
   24206:	430b      	orrs	r3, r1
   24208:	b29b      	uxth	r3, r3
   2420a:	8213      	strh	r3, [r2, #16]
		break;
   2420c:	e020      	b.n	24250 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2420e:	4a14      	ldr	r2, [pc, #80]	; (24260 <system_clock_source_enable+0xa0>)
   24210:	4b13      	ldr	r3, [pc, #76]	; (24260 <system_clock_source_enable+0xa0>)
   24212:	8a9b      	ldrh	r3, [r3, #20]
   24214:	b29b      	uxth	r3, r3
   24216:	2102      	movs	r1, #2
   24218:	430b      	orrs	r3, r1
   2421a:	b29b      	uxth	r3, r3
   2421c:	8293      	strh	r3, [r2, #20]
		break;
   2421e:	e017      	b.n	24250 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   24220:	4b10      	ldr	r3, [pc, #64]	; (24264 <system_clock_source_enable+0xa4>)
   24222:	681b      	ldr	r3, [r3, #0]
   24224:	2202      	movs	r2, #2
   24226:	431a      	orrs	r2, r3
   24228:	4b0e      	ldr	r3, [pc, #56]	; (24264 <system_clock_source_enable+0xa4>)
   2422a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2422c:	4b0e      	ldr	r3, [pc, #56]	; (24268 <system_clock_source_enable+0xa8>)
   2422e:	4798      	blx	r3
		break;
   24230:	e00e      	b.n	24250 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   24232:	4a0b      	ldr	r2, [pc, #44]	; (24260 <system_clock_source_enable+0xa0>)
   24234:	490a      	ldr	r1, [pc, #40]	; (24260 <system_clock_source_enable+0xa0>)
   24236:	2344      	movs	r3, #68	; 0x44
   24238:	5ccb      	ldrb	r3, [r1, r3]
   2423a:	b2db      	uxtb	r3, r3
   2423c:	2102      	movs	r1, #2
   2423e:	430b      	orrs	r3, r1
   24240:	b2d9      	uxtb	r1, r3
   24242:	2344      	movs	r3, #68	; 0x44
   24244:	54d1      	strb	r1, [r2, r3]
		break;
   24246:	e003      	b.n	24250 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   24248:	2300      	movs	r3, #0
   2424a:	e002      	b.n	24252 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2424c:	2317      	movs	r3, #23
   2424e:	e000      	b.n	24252 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   24250:	2300      	movs	r3, #0
}
   24252:	0018      	movs	r0, r3
   24254:	46bd      	mov	sp, r7
   24256:	b002      	add	sp, #8
   24258:	bd80      	pop	{r7, pc}
   2425a:	46c0      	nop			; (mov r8, r8)
   2425c:	0002ac40 	.word	0x0002ac40
   24260:	40000800 	.word	0x40000800
   24264:	200004f0 	.word	0x200004f0
   24268:	00023e55 	.word	0x00023e55

0002426c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2426c:	b580      	push	{r7, lr}
   2426e:	b084      	sub	sp, #16
   24270:	af00      	add	r7, sp, #0
   24272:	0002      	movs	r2, r0
   24274:	1dfb      	adds	r3, r7, #7
   24276:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   24278:	2300      	movs	r3, #0
   2427a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2427c:	1dfb      	adds	r3, r7, #7
   2427e:	781b      	ldrb	r3, [r3, #0]
   24280:	2b08      	cmp	r3, #8
   24282:	d821      	bhi.n	242c8 <system_clock_source_is_ready+0x5c>
   24284:	009a      	lsls	r2, r3, #2
   24286:	4b18      	ldr	r3, [pc, #96]	; (242e8 <system_clock_source_is_ready+0x7c>)
   24288:	18d3      	adds	r3, r2, r3
   2428a:	681b      	ldr	r3, [r3, #0]
   2428c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2428e:	2308      	movs	r3, #8
   24290:	60fb      	str	r3, [r7, #12]
		break;
   24292:	e01b      	b.n	242cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   24294:	2304      	movs	r3, #4
   24296:	60fb      	str	r3, [r7, #12]
		break;
   24298:	e018      	b.n	242cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2429a:	2301      	movs	r3, #1
   2429c:	60fb      	str	r3, [r7, #12]
		break;
   2429e:	e015      	b.n	242cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   242a0:	2302      	movs	r3, #2
   242a2:	60fb      	str	r3, [r7, #12]
		break;
   242a4:	e012      	b.n	242cc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   242a6:	23d0      	movs	r3, #208	; 0xd0
   242a8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   242aa:	e00f      	b.n	242cc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   242ac:	4a0f      	ldr	r2, [pc, #60]	; (242ec <system_clock_source_is_ready+0x80>)
   242ae:	2350      	movs	r3, #80	; 0x50
   242b0:	5cd3      	ldrb	r3, [r2, r3]
   242b2:	b2db      	uxtb	r3, r3
   242b4:	001a      	movs	r2, r3
   242b6:	2303      	movs	r3, #3
   242b8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   242ba:	3b03      	subs	r3, #3
   242bc:	425a      	negs	r2, r3
   242be:	4153      	adcs	r3, r2
   242c0:	b2db      	uxtb	r3, r3
   242c2:	e00c      	b.n	242de <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   242c4:	2301      	movs	r3, #1
   242c6:	e00a      	b.n	242de <system_clock_source_is_ready+0x72>

	default:
		return false;
   242c8:	2300      	movs	r3, #0
   242ca:	e008      	b.n	242de <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   242cc:	4b07      	ldr	r3, [pc, #28]	; (242ec <system_clock_source_is_ready+0x80>)
   242ce:	68db      	ldr	r3, [r3, #12]
   242d0:	68fa      	ldr	r2, [r7, #12]
   242d2:	401a      	ands	r2, r3
   242d4:	68fb      	ldr	r3, [r7, #12]
   242d6:	1ad3      	subs	r3, r2, r3
   242d8:	425a      	negs	r2, r3
   242da:	4153      	adcs	r3, r2
   242dc:	b2db      	uxtb	r3, r3
}
   242de:	0018      	movs	r0, r3
   242e0:	46bd      	mov	sp, r7
   242e2:	b004      	add	sp, #16
   242e4:	bd80      	pop	{r7, pc}
   242e6:	46c0      	nop			; (mov r8, r8)
   242e8:	0002ac64 	.word	0x0002ac64
   242ec:	40000800 	.word	0x40000800

000242f0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   242f0:	b580      	push	{r7, lr}
   242f2:	b082      	sub	sp, #8
   242f4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   242f6:	003b      	movs	r3, r7
   242f8:	2202      	movs	r2, #2
   242fa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   242fc:	2300      	movs	r3, #0
   242fe:	607b      	str	r3, [r7, #4]
   24300:	e009      	b.n	24316 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24302:	687b      	ldr	r3, [r7, #4]
   24304:	b2db      	uxtb	r3, r3
   24306:	003a      	movs	r2, r7
   24308:	0011      	movs	r1, r2
   2430a:	0018      	movs	r0, r3
   2430c:	4b05      	ldr	r3, [pc, #20]	; (24324 <_switch_peripheral_gclk+0x34>)
   2430e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24310:	687b      	ldr	r3, [r7, #4]
   24312:	3301      	adds	r3, #1
   24314:	607b      	str	r3, [r7, #4]
   24316:	687b      	ldr	r3, [r7, #4]
   24318:	2b24      	cmp	r3, #36	; 0x24
   2431a:	d9f2      	bls.n	24302 <_switch_peripheral_gclk+0x12>
	}
}
   2431c:	46c0      	nop			; (mov r8, r8)
   2431e:	46bd      	mov	sp, r7
   24320:	b002      	add	sp, #8
   24322:	bd80      	pop	{r7, pc}
   24324:	000249b5 	.word	0x000249b5

00024328 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   24328:	b580      	push	{r7, lr}
   2432a:	b0aa      	sub	sp, #168	; 0xa8
   2432c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2432e:	4bc1      	ldr	r3, [pc, #772]	; (24634 <system_clock_init+0x30c>)
   24330:	22c2      	movs	r2, #194	; 0xc2
   24332:	00d2      	lsls	r2, r2, #3
   24334:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   24336:	2002      	movs	r0, #2
   24338:	4bbf      	ldr	r3, [pc, #764]	; (24638 <system_clock_init+0x310>)
   2433a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2433c:	4bbf      	ldr	r3, [pc, #764]	; (2463c <system_clock_init+0x314>)
   2433e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   24340:	2394      	movs	r3, #148	; 0x94
   24342:	18fb      	adds	r3, r7, r3
   24344:	0018      	movs	r0, r3
   24346:	4bbe      	ldr	r3, [pc, #760]	; (24640 <system_clock_init+0x318>)
   24348:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   2434a:	2394      	movs	r3, #148	; 0x94
   2434c:	18fb      	adds	r3, r7, r3
   2434e:	2280      	movs	r2, #128	; 0x80
   24350:	0212      	lsls	r2, r2, #8
   24352:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   24354:	2394      	movs	r3, #148	; 0x94
   24356:	18fb      	adds	r3, r7, r3
   24358:	2200      	movs	r2, #0
   2435a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   2435c:	2394      	movs	r3, #148	; 0x94
   2435e:	18fb      	adds	r3, r7, r3
   24360:	2206      	movs	r2, #6
   24362:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   24364:	2394      	movs	r3, #148	; 0x94
   24366:	18fb      	adds	r3, r7, r3
   24368:	2200      	movs	r2, #0
   2436a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   2436c:	2394      	movs	r3, #148	; 0x94
   2436e:	18fb      	adds	r3, r7, r3
   24370:	2200      	movs	r2, #0
   24372:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   24374:	2394      	movs	r3, #148	; 0x94
   24376:	18fb      	adds	r3, r7, r3
   24378:	2201      	movs	r2, #1
   2437a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   2437c:	2394      	movs	r3, #148	; 0x94
   2437e:	18fb      	adds	r3, r7, r3
   24380:	2200      	movs	r2, #0
   24382:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   24384:	2394      	movs	r3, #148	; 0x94
   24386:	18fb      	adds	r3, r7, r3
   24388:	2201      	movs	r2, #1
   2438a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   2438c:	2394      	movs	r3, #148	; 0x94
   2438e:	18fb      	adds	r3, r7, r3
   24390:	0018      	movs	r0, r3
   24392:	4bac      	ldr	r3, [pc, #688]	; (24644 <system_clock_init+0x31c>)
   24394:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24396:	2005      	movs	r0, #5
   24398:	4bab      	ldr	r3, [pc, #684]	; (24648 <system_clock_init+0x320>)
   2439a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   2439c:	46c0      	nop			; (mov r8, r8)
   2439e:	2005      	movs	r0, #5
   243a0:	4baa      	ldr	r3, [pc, #680]	; (2464c <system_clock_init+0x324>)
   243a2:	4798      	blx	r3
   243a4:	0003      	movs	r3, r0
   243a6:	001a      	movs	r2, r3
   243a8:	2301      	movs	r3, #1
   243aa:	4053      	eors	r3, r2
   243ac:	b2db      	uxtb	r3, r3
   243ae:	2b00      	cmp	r3, #0
   243b0:	d1f5      	bne.n	2439e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   243b2:	2380      	movs	r3, #128	; 0x80
   243b4:	18fb      	adds	r3, r7, r3
   243b6:	0018      	movs	r0, r3
   243b8:	4ba5      	ldr	r3, [pc, #660]	; (24650 <system_clock_init+0x328>)
   243ba:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   243bc:	2380      	movs	r3, #128	; 0x80
   243be:	18fb      	adds	r3, r7, r3
   243c0:	2204      	movs	r2, #4
   243c2:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   243c4:	2380      	movs	r3, #128	; 0x80
   243c6:	18fb      	adds	r3, r7, r3
   243c8:	2200      	movs	r2, #0
   243ca:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   243cc:	4ba1      	ldr	r3, [pc, #644]	; (24654 <system_clock_init+0x32c>)
   243ce:	681b      	ldr	r3, [r3, #0]
   243d0:	0e9b      	lsrs	r3, r3, #26
   243d2:	22a4      	movs	r2, #164	; 0xa4
   243d4:	18ba      	adds	r2, r7, r2
   243d6:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   243d8:	23a4      	movs	r3, #164	; 0xa4
   243da:	18fb      	adds	r3, r7, r3
   243dc:	681b      	ldr	r3, [r3, #0]
   243de:	2b3f      	cmp	r3, #63	; 0x3f
   243e0:	d103      	bne.n	243ea <system_clock_init+0xc2>
		coarse = 0x1f;
   243e2:	231f      	movs	r3, #31
   243e4:	22a4      	movs	r2, #164	; 0xa4
   243e6:	18ba      	adds	r2, r7, r2
   243e8:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   243ea:	23a4      	movs	r3, #164	; 0xa4
   243ec:	18fb      	adds	r3, r7, r3
   243ee:	681b      	ldr	r3, [r3, #0]
   243f0:	b2da      	uxtb	r2, r3
   243f2:	2380      	movs	r3, #128	; 0x80
   243f4:	18fb      	adds	r3, r7, r3
   243f6:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   243f8:	2380      	movs	r3, #128	; 0x80
   243fa:	18fb      	adds	r3, r7, r3
   243fc:	2200      	movs	r2, #0
   243fe:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24400:	2380      	movs	r3, #128	; 0x80
   24402:	18fb      	adds	r3, r7, r3
   24404:	2200      	movs	r2, #0
   24406:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24408:	2380      	movs	r3, #128	; 0x80
   2440a:	18fb      	adds	r3, r7, r3
   2440c:	2200      	movs	r2, #0
   2440e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24410:	2380      	movs	r3, #128	; 0x80
   24412:	18fb      	adds	r3, r7, r3
   24414:	2200      	movs	r2, #0
   24416:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24418:	2380      	movs	r3, #128	; 0x80
   2441a:	18fb      	adds	r3, r7, r3
   2441c:	22b7      	movs	r2, #183	; 0xb7
   2441e:	00d2      	lsls	r2, r2, #3
   24420:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24422:	2380      	movs	r3, #128	; 0x80
   24424:	18fb      	adds	r3, r7, r3
   24426:	2203      	movs	r2, #3
   24428:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   2442a:	2380      	movs	r3, #128	; 0x80
   2442c:	18fb      	adds	r3, r7, r3
   2442e:	221f      	movs	r2, #31
   24430:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24432:	2380      	movs	r3, #128	; 0x80
   24434:	18fb      	adds	r3, r7, r3
   24436:	0018      	movs	r0, r3
   24438:	4b87      	ldr	r3, [pc, #540]	; (24658 <system_clock_init+0x330>)
   2443a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2443c:	237c      	movs	r3, #124	; 0x7c
   2443e:	18fb      	adds	r3, r7, r3
   24440:	0018      	movs	r0, r3
   24442:	4b86      	ldr	r3, [pc, #536]	; (2465c <system_clock_init+0x334>)
   24444:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   24446:	237c      	movs	r3, #124	; 0x7c
   24448:	18fb      	adds	r3, r7, r3
   2444a:	2200      	movs	r2, #0
   2444c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2444e:	237c      	movs	r3, #124	; 0x7c
   24450:	18fb      	adds	r3, r7, r3
   24452:	2201      	movs	r2, #1
   24454:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   24456:	237c      	movs	r3, #124	; 0x7c
   24458:	18fb      	adds	r3, r7, r3
   2445a:	2201      	movs	r2, #1
   2445c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2445e:	237c      	movs	r3, #124	; 0x7c
   24460:	18fb      	adds	r3, r7, r3
   24462:	0018      	movs	r0, r3
   24464:	4b7e      	ldr	r3, [pc, #504]	; (24660 <system_clock_init+0x338>)
   24466:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   24468:	2006      	movs	r0, #6
   2446a:	4b77      	ldr	r3, [pc, #476]	; (24648 <system_clock_init+0x320>)
   2446c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2446e:	4b7d      	ldr	r3, [pc, #500]	; (24664 <system_clock_init+0x33c>)
   24470:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   24472:	2364      	movs	r3, #100	; 0x64
   24474:	18fb      	adds	r3, r7, r3
   24476:	0018      	movs	r0, r3
   24478:	4b7b      	ldr	r3, [pc, #492]	; (24668 <system_clock_init+0x340>)
   2447a:	4798      	blx	r3
   2447c:	2364      	movs	r3, #100	; 0x64
   2447e:	18fb      	adds	r3, r7, r3
   24480:	2205      	movs	r2, #5
   24482:	701a      	strb	r2, [r3, #0]
   24484:	2364      	movs	r3, #100	; 0x64
   24486:	18fb      	adds	r3, r7, r3
   24488:	2201      	movs	r2, #1
   2448a:	605a      	str	r2, [r3, #4]
   2448c:	2364      	movs	r3, #100	; 0x64
   2448e:	18fb      	adds	r3, r7, r3
   24490:	2200      	movs	r2, #0
   24492:	721a      	strb	r2, [r3, #8]
   24494:	2364      	movs	r3, #100	; 0x64
   24496:	18fb      	adds	r3, r7, r3
   24498:	2200      	movs	r2, #0
   2449a:	725a      	strb	r2, [r3, #9]
   2449c:	2364      	movs	r3, #100	; 0x64
   2449e:	18fb      	adds	r3, r7, r3
   244a0:	0019      	movs	r1, r3
   244a2:	2001      	movs	r0, #1
   244a4:	4b71      	ldr	r3, [pc, #452]	; (2466c <system_clock_init+0x344>)
   244a6:	4798      	blx	r3
   244a8:	2001      	movs	r0, #1
   244aa:	4b71      	ldr	r3, [pc, #452]	; (24670 <system_clock_init+0x348>)
   244ac:	4798      	blx	r3
   244ae:	234c      	movs	r3, #76	; 0x4c
   244b0:	18fb      	adds	r3, r7, r3
   244b2:	0018      	movs	r0, r3
   244b4:	4b6c      	ldr	r3, [pc, #432]	; (24668 <system_clock_init+0x340>)
   244b6:	4798      	blx	r3
   244b8:	234c      	movs	r3, #76	; 0x4c
   244ba:	18fb      	adds	r3, r7, r3
   244bc:	2206      	movs	r2, #6
   244be:	701a      	strb	r2, [r3, #0]
   244c0:	234c      	movs	r3, #76	; 0x4c
   244c2:	18fb      	adds	r3, r7, r3
   244c4:	2201      	movs	r2, #1
   244c6:	605a      	str	r2, [r3, #4]
   244c8:	234c      	movs	r3, #76	; 0x4c
   244ca:	18fb      	adds	r3, r7, r3
   244cc:	2201      	movs	r2, #1
   244ce:	721a      	strb	r2, [r3, #8]
   244d0:	234c      	movs	r3, #76	; 0x4c
   244d2:	18fb      	adds	r3, r7, r3
   244d4:	2200      	movs	r2, #0
   244d6:	725a      	strb	r2, [r3, #9]
   244d8:	234c      	movs	r3, #76	; 0x4c
   244da:	18fb      	adds	r3, r7, r3
   244dc:	0019      	movs	r1, r3
   244de:	2003      	movs	r0, #3
   244e0:	4b62      	ldr	r3, [pc, #392]	; (2466c <system_clock_init+0x344>)
   244e2:	4798      	blx	r3
   244e4:	2003      	movs	r0, #3
   244e6:	4b62      	ldr	r3, [pc, #392]	; (24670 <system_clock_init+0x348>)
   244e8:	4798      	blx	r3
   244ea:	2340      	movs	r3, #64	; 0x40
   244ec:	18fb      	adds	r3, r7, r3
   244ee:	0018      	movs	r0, r3
   244f0:	4b5d      	ldr	r3, [pc, #372]	; (24668 <system_clock_init+0x340>)
   244f2:	4798      	blx	r3
   244f4:	2340      	movs	r3, #64	; 0x40
   244f6:	18fb      	adds	r3, r7, r3
   244f8:	2203      	movs	r2, #3
   244fa:	701a      	strb	r2, [r3, #0]
   244fc:	2340      	movs	r3, #64	; 0x40
   244fe:	18fb      	adds	r3, r7, r3
   24500:	2220      	movs	r2, #32
   24502:	605a      	str	r2, [r3, #4]
   24504:	2340      	movs	r3, #64	; 0x40
   24506:	18fb      	adds	r3, r7, r3
   24508:	2200      	movs	r2, #0
   2450a:	721a      	strb	r2, [r3, #8]
   2450c:	2340      	movs	r3, #64	; 0x40
   2450e:	18fb      	adds	r3, r7, r3
   24510:	2200      	movs	r2, #0
   24512:	725a      	strb	r2, [r3, #9]
   24514:	2340      	movs	r3, #64	; 0x40
   24516:	18fb      	adds	r3, r7, r3
   24518:	0019      	movs	r1, r3
   2451a:	2004      	movs	r0, #4
   2451c:	4b53      	ldr	r3, [pc, #332]	; (2466c <system_clock_init+0x344>)
   2451e:	4798      	blx	r3
   24520:	2004      	movs	r0, #4
   24522:	4b53      	ldr	r3, [pc, #332]	; (24670 <system_clock_init+0x348>)
   24524:	4798      	blx	r3
   24526:	2334      	movs	r3, #52	; 0x34
   24528:	18fb      	adds	r3, r7, r3
   2452a:	0018      	movs	r0, r3
   2452c:	4b4e      	ldr	r3, [pc, #312]	; (24668 <system_clock_init+0x340>)
   2452e:	4798      	blx	r3
   24530:	2334      	movs	r3, #52	; 0x34
   24532:	18fb      	adds	r3, r7, r3
   24534:	2207      	movs	r2, #7
   24536:	701a      	strb	r2, [r3, #0]
   24538:	2334      	movs	r3, #52	; 0x34
   2453a:	18fb      	adds	r3, r7, r3
   2453c:	2201      	movs	r2, #1
   2453e:	605a      	str	r2, [r3, #4]
   24540:	2334      	movs	r3, #52	; 0x34
   24542:	18fb      	adds	r3, r7, r3
   24544:	2200      	movs	r2, #0
   24546:	721a      	strb	r2, [r3, #8]
   24548:	2334      	movs	r3, #52	; 0x34
   2454a:	18fb      	adds	r3, r7, r3
   2454c:	2200      	movs	r2, #0
   2454e:	725a      	strb	r2, [r3, #9]
   24550:	2334      	movs	r3, #52	; 0x34
   24552:	18fb      	adds	r3, r7, r3
   24554:	0019      	movs	r1, r3
   24556:	2005      	movs	r0, #5
   24558:	4b44      	ldr	r3, [pc, #272]	; (2466c <system_clock_init+0x344>)
   2455a:	4798      	blx	r3
   2455c:	2005      	movs	r0, #5
   2455e:	4b44      	ldr	r3, [pc, #272]	; (24670 <system_clock_init+0x348>)
   24560:	4798      	blx	r3
   24562:	2328      	movs	r3, #40	; 0x28
   24564:	18fb      	adds	r3, r7, r3
   24566:	0018      	movs	r0, r3
   24568:	4b3f      	ldr	r3, [pc, #252]	; (24668 <system_clock_init+0x340>)
   2456a:	4798      	blx	r3
   2456c:	2328      	movs	r3, #40	; 0x28
   2456e:	18fb      	adds	r3, r7, r3
   24570:	2206      	movs	r2, #6
   24572:	701a      	strb	r2, [r3, #0]
   24574:	2328      	movs	r3, #40	; 0x28
   24576:	18fb      	adds	r3, r7, r3
   24578:	2201      	movs	r2, #1
   2457a:	605a      	str	r2, [r3, #4]
   2457c:	2328      	movs	r3, #40	; 0x28
   2457e:	18fb      	adds	r3, r7, r3
   24580:	2201      	movs	r2, #1
   24582:	721a      	strb	r2, [r3, #8]
   24584:	2328      	movs	r3, #40	; 0x28
   24586:	18fb      	adds	r3, r7, r3
   24588:	2200      	movs	r2, #0
   2458a:	725a      	strb	r2, [r3, #9]
   2458c:	2328      	movs	r3, #40	; 0x28
   2458e:	18fb      	adds	r3, r7, r3
   24590:	0019      	movs	r1, r3
   24592:	2006      	movs	r0, #6
   24594:	4b35      	ldr	r3, [pc, #212]	; (2466c <system_clock_init+0x344>)
   24596:	4798      	blx	r3
   24598:	2006      	movs	r0, #6
   2459a:	4b35      	ldr	r3, [pc, #212]	; (24670 <system_clock_init+0x348>)
   2459c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   2459e:	230c      	movs	r3, #12
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	0018      	movs	r0, r3
   245a4:	4b33      	ldr	r3, [pc, #204]	; (24674 <system_clock_init+0x34c>)
   245a6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   245a8:	230c      	movs	r3, #12
   245aa:	18fb      	adds	r3, r7, r3
   245ac:	2201      	movs	r2, #1
   245ae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   245b0:	230c      	movs	r3, #12
   245b2:	18fb      	adds	r3, r7, r3
   245b4:	0019      	movs	r1, r3
   245b6:	2000      	movs	r0, #0
   245b8:	4b2f      	ldr	r3, [pc, #188]	; (24678 <system_clock_init+0x350>)
   245ba:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   245bc:	2000      	movs	r0, #0
   245be:	4b2f      	ldr	r3, [pc, #188]	; (2467c <system_clock_init+0x354>)
   245c0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   245c2:	2007      	movs	r0, #7
   245c4:	4b20      	ldr	r3, [pc, #128]	; (24648 <system_clock_init+0x320>)
   245c6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   245c8:	46c0      	nop			; (mov r8, r8)
   245ca:	2007      	movs	r0, #7
   245cc:	4b1f      	ldr	r3, [pc, #124]	; (2464c <system_clock_init+0x324>)
   245ce:	4798      	blx	r3
   245d0:	0003      	movs	r3, r0
   245d2:	001a      	movs	r2, r3
   245d4:	2301      	movs	r3, #1
   245d6:	4053      	eors	r3, r2
   245d8:	b2db      	uxtb	r3, r3
   245da:	2b00      	cmp	r3, #0
   245dc:	d1f5      	bne.n	245ca <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   245de:	2000      	movs	r0, #0
   245e0:	4b27      	ldr	r3, [pc, #156]	; (24680 <system_clock_init+0x358>)
   245e2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   245e4:	2100      	movs	r1, #0
   245e6:	2000      	movs	r0, #0
   245e8:	4b26      	ldr	r3, [pc, #152]	; (24684 <system_clock_init+0x35c>)
   245ea:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   245ec:	2100      	movs	r1, #0
   245ee:	2001      	movs	r0, #1
   245f0:	4b24      	ldr	r3, [pc, #144]	; (24684 <system_clock_init+0x35c>)
   245f2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   245f4:	2100      	movs	r1, #0
   245f6:	2002      	movs	r0, #2
   245f8:	4b22      	ldr	r3, [pc, #136]	; (24684 <system_clock_init+0x35c>)
   245fa:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   245fc:	003b      	movs	r3, r7
   245fe:	0018      	movs	r0, r3
   24600:	4b19      	ldr	r3, [pc, #100]	; (24668 <system_clock_init+0x340>)
   24602:	4798      	blx	r3
   24604:	003b      	movs	r3, r7
   24606:	2207      	movs	r2, #7
   24608:	701a      	strb	r2, [r3, #0]
   2460a:	003b      	movs	r3, r7
   2460c:	2201      	movs	r2, #1
   2460e:	605a      	str	r2, [r3, #4]
   24610:	003b      	movs	r3, r7
   24612:	2200      	movs	r2, #0
   24614:	721a      	strb	r2, [r3, #8]
   24616:	003b      	movs	r3, r7
   24618:	2200      	movs	r2, #0
   2461a:	725a      	strb	r2, [r3, #9]
   2461c:	003b      	movs	r3, r7
   2461e:	0019      	movs	r1, r3
   24620:	2000      	movs	r0, #0
   24622:	4b12      	ldr	r3, [pc, #72]	; (2466c <system_clock_init+0x344>)
   24624:	4798      	blx	r3
   24626:	2000      	movs	r0, #0
   24628:	4b11      	ldr	r3, [pc, #68]	; (24670 <system_clock_init+0x348>)
   2462a:	4798      	blx	r3
#endif
}
   2462c:	46c0      	nop			; (mov r8, r8)
   2462e:	46bd      	mov	sp, r7
   24630:	b02a      	add	sp, #168	; 0xa8
   24632:	bd80      	pop	{r7, pc}
   24634:	40000800 	.word	0x40000800
   24638:	00023e05 	.word	0x00023e05
   2463c:	000242f1 	.word	0x000242f1
   24640:	00023cd5 	.word	0x00023cd5
   24644:	00023fd1 	.word	0x00023fd1
   24648:	000241c1 	.word	0x000241c1
   2464c:	0002426d 	.word	0x0002426d
   24650:	00023d3f 	.word	0x00023d3f
   24654:	00806024 	.word	0x00806024
   24658:	000240f1 	.word	0x000240f1
   2465c:	00023d1d 	.word	0x00023d1d
   24660:	00023f59 	.word	0x00023f59
   24664:	0002472d 	.word	0x0002472d
   24668:	00023c91 	.word	0x00023c91
   2466c:	0002475d 	.word	0x0002475d
   24670:	00024881 	.word	0x00024881
   24674:	00023cbf 	.word	0x00023cbf
   24678:	000249b5 	.word	0x000249b5
   2467c:	000249f9 	.word	0x000249f9
   24680:	00023d91 	.word	0x00023d91
   24684:	00023db1 	.word	0x00023db1

00024688 <system_apb_clock_set_mask>:
{
   24688:	b580      	push	{r7, lr}
   2468a:	b082      	sub	sp, #8
   2468c:	af00      	add	r7, sp, #0
   2468e:	0002      	movs	r2, r0
   24690:	6039      	str	r1, [r7, #0]
   24692:	1dfb      	adds	r3, r7, #7
   24694:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24696:	1dfb      	adds	r3, r7, #7
   24698:	781b      	ldrb	r3, [r3, #0]
   2469a:	2b01      	cmp	r3, #1
   2469c:	d00a      	beq.n	246b4 <system_apb_clock_set_mask+0x2c>
   2469e:	2b02      	cmp	r3, #2
   246a0:	d00f      	beq.n	246c2 <system_apb_clock_set_mask+0x3a>
   246a2:	2b00      	cmp	r3, #0
   246a4:	d114      	bne.n	246d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   246a6:	4b0e      	ldr	r3, [pc, #56]	; (246e0 <system_apb_clock_set_mask+0x58>)
   246a8:	4a0d      	ldr	r2, [pc, #52]	; (246e0 <system_apb_clock_set_mask+0x58>)
   246aa:	6991      	ldr	r1, [r2, #24]
   246ac:	683a      	ldr	r2, [r7, #0]
   246ae:	430a      	orrs	r2, r1
   246b0:	619a      	str	r2, [r3, #24]
			break;
   246b2:	e00f      	b.n	246d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   246b4:	4b0a      	ldr	r3, [pc, #40]	; (246e0 <system_apb_clock_set_mask+0x58>)
   246b6:	4a0a      	ldr	r2, [pc, #40]	; (246e0 <system_apb_clock_set_mask+0x58>)
   246b8:	69d1      	ldr	r1, [r2, #28]
   246ba:	683a      	ldr	r2, [r7, #0]
   246bc:	430a      	orrs	r2, r1
   246be:	61da      	str	r2, [r3, #28]
			break;
   246c0:	e008      	b.n	246d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   246c2:	4b07      	ldr	r3, [pc, #28]	; (246e0 <system_apb_clock_set_mask+0x58>)
   246c4:	4a06      	ldr	r2, [pc, #24]	; (246e0 <system_apb_clock_set_mask+0x58>)
   246c6:	6a11      	ldr	r1, [r2, #32]
   246c8:	683a      	ldr	r2, [r7, #0]
   246ca:	430a      	orrs	r2, r1
   246cc:	621a      	str	r2, [r3, #32]
			break;
   246ce:	e001      	b.n	246d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   246d0:	2317      	movs	r3, #23
   246d2:	e000      	b.n	246d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   246d4:	2300      	movs	r3, #0
}
   246d6:	0018      	movs	r0, r3
   246d8:	46bd      	mov	sp, r7
   246da:	b002      	add	sp, #8
   246dc:	bd80      	pop	{r7, pc}
   246de:	46c0      	nop			; (mov r8, r8)
   246e0:	40000400 	.word	0x40000400

000246e4 <system_interrupt_enter_critical_section>:
{
   246e4:	b580      	push	{r7, lr}
   246e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   246e8:	4b02      	ldr	r3, [pc, #8]	; (246f4 <system_interrupt_enter_critical_section+0x10>)
   246ea:	4798      	blx	r3
}
   246ec:	46c0      	nop			; (mov r8, r8)
   246ee:	46bd      	mov	sp, r7
   246f0:	bd80      	pop	{r7, pc}
   246f2:	46c0      	nop			; (mov r8, r8)
   246f4:	00023bfd 	.word	0x00023bfd

000246f8 <system_interrupt_leave_critical_section>:
{
   246f8:	b580      	push	{r7, lr}
   246fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   246fc:	4b02      	ldr	r3, [pc, #8]	; (24708 <system_interrupt_leave_critical_section+0x10>)
   246fe:	4798      	blx	r3
}
   24700:	46c0      	nop			; (mov r8, r8)
   24702:	46bd      	mov	sp, r7
   24704:	bd80      	pop	{r7, pc}
   24706:	46c0      	nop			; (mov r8, r8)
   24708:	00023c51 	.word	0x00023c51

0002470c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2470c:	b580      	push	{r7, lr}
   2470e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24710:	4b05      	ldr	r3, [pc, #20]	; (24728 <system_gclk_is_syncing+0x1c>)
   24712:	785b      	ldrb	r3, [r3, #1]
   24714:	b2db      	uxtb	r3, r3
   24716:	b25b      	sxtb	r3, r3
   24718:	2b00      	cmp	r3, #0
   2471a:	da01      	bge.n	24720 <system_gclk_is_syncing+0x14>
		return true;
   2471c:	2301      	movs	r3, #1
   2471e:	e000      	b.n	24722 <system_gclk_is_syncing+0x16>
	}

	return false;
   24720:	2300      	movs	r3, #0
}
   24722:	0018      	movs	r0, r3
   24724:	46bd      	mov	sp, r7
   24726:	bd80      	pop	{r7, pc}
   24728:	40000c00 	.word	0x40000c00

0002472c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2472c:	b580      	push	{r7, lr}
   2472e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   24730:	2108      	movs	r1, #8
   24732:	2000      	movs	r0, #0
   24734:	4b07      	ldr	r3, [pc, #28]	; (24754 <system_gclk_init+0x28>)
   24736:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   24738:	4b07      	ldr	r3, [pc, #28]	; (24758 <system_gclk_init+0x2c>)
   2473a:	2201      	movs	r2, #1
   2473c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2473e:	46c0      	nop			; (mov r8, r8)
   24740:	4b05      	ldr	r3, [pc, #20]	; (24758 <system_gclk_init+0x2c>)
   24742:	781b      	ldrb	r3, [r3, #0]
   24744:	b2db      	uxtb	r3, r3
   24746:	001a      	movs	r2, r3
   24748:	2301      	movs	r3, #1
   2474a:	4013      	ands	r3, r2
   2474c:	d1f8      	bne.n	24740 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2474e:	46c0      	nop			; (mov r8, r8)
   24750:	46bd      	mov	sp, r7
   24752:	bd80      	pop	{r7, pc}
   24754:	00024689 	.word	0x00024689
   24758:	40000c00 	.word	0x40000c00

0002475c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2475c:	b580      	push	{r7, lr}
   2475e:	b086      	sub	sp, #24
   24760:	af00      	add	r7, sp, #0
   24762:	0002      	movs	r2, r0
   24764:	6039      	str	r1, [r7, #0]
   24766:	1dfb      	adds	r3, r7, #7
   24768:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2476a:	1dfb      	adds	r3, r7, #7
   2476c:	781b      	ldrb	r3, [r3, #0]
   2476e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   24770:	1dfb      	adds	r3, r7, #7
   24772:	781b      	ldrb	r3, [r3, #0]
   24774:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   24776:	683b      	ldr	r3, [r7, #0]
   24778:	781b      	ldrb	r3, [r3, #0]
   2477a:	021b      	lsls	r3, r3, #8
   2477c:	001a      	movs	r2, r3
   2477e:	697b      	ldr	r3, [r7, #20]
   24780:	4313      	orrs	r3, r2
   24782:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   24784:	683b      	ldr	r3, [r7, #0]
   24786:	785b      	ldrb	r3, [r3, #1]
   24788:	2b00      	cmp	r3, #0
   2478a:	d004      	beq.n	24796 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2478c:	697b      	ldr	r3, [r7, #20]
   2478e:	2280      	movs	r2, #128	; 0x80
   24790:	02d2      	lsls	r2, r2, #11
   24792:	4313      	orrs	r3, r2
   24794:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24796:	683b      	ldr	r3, [r7, #0]
   24798:	7a5b      	ldrb	r3, [r3, #9]
   2479a:	2b00      	cmp	r3, #0
   2479c:	d004      	beq.n	247a8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2479e:	697b      	ldr	r3, [r7, #20]
   247a0:	2280      	movs	r2, #128	; 0x80
   247a2:	0312      	lsls	r2, r2, #12
   247a4:	4313      	orrs	r3, r2
   247a6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   247a8:	683b      	ldr	r3, [r7, #0]
   247aa:	685b      	ldr	r3, [r3, #4]
   247ac:	2b01      	cmp	r3, #1
   247ae:	d92c      	bls.n	2480a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   247b0:	683b      	ldr	r3, [r7, #0]
   247b2:	685a      	ldr	r2, [r3, #4]
   247b4:	683b      	ldr	r3, [r7, #0]
   247b6:	685b      	ldr	r3, [r3, #4]
   247b8:	3b01      	subs	r3, #1
   247ba:	4013      	ands	r3, r2
   247bc:	d11a      	bne.n	247f4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   247be:	2300      	movs	r3, #0
   247c0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   247c2:	2302      	movs	r3, #2
   247c4:	60bb      	str	r3, [r7, #8]
   247c6:	e005      	b.n	247d4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   247c8:	68fb      	ldr	r3, [r7, #12]
   247ca:	3301      	adds	r3, #1
   247cc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   247ce:	68bb      	ldr	r3, [r7, #8]
   247d0:	005b      	lsls	r3, r3, #1
   247d2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   247d4:	683b      	ldr	r3, [r7, #0]
   247d6:	685a      	ldr	r2, [r3, #4]
   247d8:	68bb      	ldr	r3, [r7, #8]
   247da:	429a      	cmp	r2, r3
   247dc:	d8f4      	bhi.n	247c8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   247de:	68fb      	ldr	r3, [r7, #12]
   247e0:	021b      	lsls	r3, r3, #8
   247e2:	693a      	ldr	r2, [r7, #16]
   247e4:	4313      	orrs	r3, r2
   247e6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   247e8:	697b      	ldr	r3, [r7, #20]
   247ea:	2280      	movs	r2, #128	; 0x80
   247ec:	0352      	lsls	r2, r2, #13
   247ee:	4313      	orrs	r3, r2
   247f0:	617b      	str	r3, [r7, #20]
   247f2:	e00a      	b.n	2480a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   247f4:	683b      	ldr	r3, [r7, #0]
   247f6:	685b      	ldr	r3, [r3, #4]
   247f8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   247fa:	693a      	ldr	r2, [r7, #16]
   247fc:	4313      	orrs	r3, r2
   247fe:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   24800:	697b      	ldr	r3, [r7, #20]
   24802:	2280      	movs	r2, #128	; 0x80
   24804:	0292      	lsls	r2, r2, #10
   24806:	4313      	orrs	r3, r2
   24808:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2480a:	683b      	ldr	r3, [r7, #0]
   2480c:	7a1b      	ldrb	r3, [r3, #8]
   2480e:	2b00      	cmp	r3, #0
   24810:	d004      	beq.n	2481c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24812:	697b      	ldr	r3, [r7, #20]
   24814:	2280      	movs	r2, #128	; 0x80
   24816:	0392      	lsls	r2, r2, #14
   24818:	4313      	orrs	r3, r2
   2481a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2481c:	46c0      	nop			; (mov r8, r8)
   2481e:	4b13      	ldr	r3, [pc, #76]	; (2486c <system_gclk_gen_set_config+0x110>)
   24820:	4798      	blx	r3
   24822:	1e03      	subs	r3, r0, #0
   24824:	d1fb      	bne.n	2481e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24826:	4b12      	ldr	r3, [pc, #72]	; (24870 <system_gclk_gen_set_config+0x114>)
   24828:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2482a:	4a12      	ldr	r2, [pc, #72]	; (24874 <system_gclk_gen_set_config+0x118>)
   2482c:	1dfb      	adds	r3, r7, #7
   2482e:	781b      	ldrb	r3, [r3, #0]
   24830:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   24832:	46c0      	nop			; (mov r8, r8)
   24834:	4b0d      	ldr	r3, [pc, #52]	; (2486c <system_gclk_gen_set_config+0x110>)
   24836:	4798      	blx	r3
   24838:	1e03      	subs	r3, r0, #0
   2483a:	d1fb      	bne.n	24834 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2483c:	4b0e      	ldr	r3, [pc, #56]	; (24878 <system_gclk_gen_set_config+0x11c>)
   2483e:	693a      	ldr	r2, [r7, #16]
   24840:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   24842:	46c0      	nop			; (mov r8, r8)
   24844:	4b09      	ldr	r3, [pc, #36]	; (2486c <system_gclk_gen_set_config+0x110>)
   24846:	4798      	blx	r3
   24848:	1e03      	subs	r3, r0, #0
   2484a:	d1fb      	bne.n	24844 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2484c:	4b0a      	ldr	r3, [pc, #40]	; (24878 <system_gclk_gen_set_config+0x11c>)
   2484e:	4a0a      	ldr	r2, [pc, #40]	; (24878 <system_gclk_gen_set_config+0x11c>)
   24850:	6851      	ldr	r1, [r2, #4]
   24852:	2280      	movs	r2, #128	; 0x80
   24854:	0252      	lsls	r2, r2, #9
   24856:	4011      	ands	r1, r2
   24858:	697a      	ldr	r2, [r7, #20]
   2485a:	430a      	orrs	r2, r1
   2485c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2485e:	4b07      	ldr	r3, [pc, #28]	; (2487c <system_gclk_gen_set_config+0x120>)
   24860:	4798      	blx	r3
}
   24862:	46c0      	nop			; (mov r8, r8)
   24864:	46bd      	mov	sp, r7
   24866:	b006      	add	sp, #24
   24868:	bd80      	pop	{r7, pc}
   2486a:	46c0      	nop			; (mov r8, r8)
   2486c:	0002470d 	.word	0x0002470d
   24870:	000246e5 	.word	0x000246e5
   24874:	40000c08 	.word	0x40000c08
   24878:	40000c00 	.word	0x40000c00
   2487c:	000246f9 	.word	0x000246f9

00024880 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   24880:	b580      	push	{r7, lr}
   24882:	b082      	sub	sp, #8
   24884:	af00      	add	r7, sp, #0
   24886:	0002      	movs	r2, r0
   24888:	1dfb      	adds	r3, r7, #7
   2488a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2488c:	46c0      	nop			; (mov r8, r8)
   2488e:	4b0e      	ldr	r3, [pc, #56]	; (248c8 <system_gclk_gen_enable+0x48>)
   24890:	4798      	blx	r3
   24892:	1e03      	subs	r3, r0, #0
   24894:	d1fb      	bne.n	2488e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24896:	4b0d      	ldr	r3, [pc, #52]	; (248cc <system_gclk_gen_enable+0x4c>)
   24898:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2489a:	4a0d      	ldr	r2, [pc, #52]	; (248d0 <system_gclk_gen_enable+0x50>)
   2489c:	1dfb      	adds	r3, r7, #7
   2489e:	781b      	ldrb	r3, [r3, #0]
   248a0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   248a2:	46c0      	nop			; (mov r8, r8)
   248a4:	4b08      	ldr	r3, [pc, #32]	; (248c8 <system_gclk_gen_enable+0x48>)
   248a6:	4798      	blx	r3
   248a8:	1e03      	subs	r3, r0, #0
   248aa:	d1fb      	bne.n	248a4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   248ac:	4b09      	ldr	r3, [pc, #36]	; (248d4 <system_gclk_gen_enable+0x54>)
   248ae:	4a09      	ldr	r2, [pc, #36]	; (248d4 <system_gclk_gen_enable+0x54>)
   248b0:	6852      	ldr	r2, [r2, #4]
   248b2:	2180      	movs	r1, #128	; 0x80
   248b4:	0249      	lsls	r1, r1, #9
   248b6:	430a      	orrs	r2, r1
   248b8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   248ba:	4b07      	ldr	r3, [pc, #28]	; (248d8 <system_gclk_gen_enable+0x58>)
   248bc:	4798      	blx	r3
}
   248be:	46c0      	nop			; (mov r8, r8)
   248c0:	46bd      	mov	sp, r7
   248c2:	b002      	add	sp, #8
   248c4:	bd80      	pop	{r7, pc}
   248c6:	46c0      	nop			; (mov r8, r8)
   248c8:	0002470d 	.word	0x0002470d
   248cc:	000246e5 	.word	0x000246e5
   248d0:	40000c04 	.word	0x40000c04
   248d4:	40000c00 	.word	0x40000c00
   248d8:	000246f9 	.word	0x000246f9

000248dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   248dc:	b580      	push	{r7, lr}
   248de:	b086      	sub	sp, #24
   248e0:	af00      	add	r7, sp, #0
   248e2:	0002      	movs	r2, r0
   248e4:	1dfb      	adds	r3, r7, #7
   248e6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   248e8:	46c0      	nop			; (mov r8, r8)
   248ea:	4b2a      	ldr	r3, [pc, #168]	; (24994 <system_gclk_gen_get_hz+0xb8>)
   248ec:	4798      	blx	r3
   248ee:	1e03      	subs	r3, r0, #0
   248f0:	d1fb      	bne.n	248ea <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   248f2:	4b29      	ldr	r3, [pc, #164]	; (24998 <system_gclk_gen_get_hz+0xbc>)
   248f4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   248f6:	4a29      	ldr	r2, [pc, #164]	; (2499c <system_gclk_gen_get_hz+0xc0>)
   248f8:	1dfb      	adds	r3, r7, #7
   248fa:	781b      	ldrb	r3, [r3, #0]
   248fc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   248fe:	46c0      	nop			; (mov r8, r8)
   24900:	4b24      	ldr	r3, [pc, #144]	; (24994 <system_gclk_gen_get_hz+0xb8>)
   24902:	4798      	blx	r3
   24904:	1e03      	subs	r3, r0, #0
   24906:	d1fb      	bne.n	24900 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   24908:	4b25      	ldr	r3, [pc, #148]	; (249a0 <system_gclk_gen_get_hz+0xc4>)
   2490a:	685b      	ldr	r3, [r3, #4]
   2490c:	04db      	lsls	r3, r3, #19
   2490e:	0edb      	lsrs	r3, r3, #27
   24910:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   24912:	0018      	movs	r0, r3
   24914:	4b23      	ldr	r3, [pc, #140]	; (249a4 <system_gclk_gen_get_hz+0xc8>)
   24916:	4798      	blx	r3
   24918:	0003      	movs	r3, r0
   2491a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2491c:	4a1f      	ldr	r2, [pc, #124]	; (2499c <system_gclk_gen_get_hz+0xc0>)
   2491e:	1dfb      	adds	r3, r7, #7
   24920:	781b      	ldrb	r3, [r3, #0]
   24922:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   24924:	4b1e      	ldr	r3, [pc, #120]	; (249a0 <system_gclk_gen_get_hz+0xc4>)
   24926:	685b      	ldr	r3, [r3, #4]
   24928:	02db      	lsls	r3, r3, #11
   2492a:	0fdb      	lsrs	r3, r3, #31
   2492c:	b2da      	uxtb	r2, r3
   2492e:	2313      	movs	r3, #19
   24930:	18fb      	adds	r3, r7, r3
   24932:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   24934:	4a1c      	ldr	r2, [pc, #112]	; (249a8 <system_gclk_gen_get_hz+0xcc>)
   24936:	1dfb      	adds	r3, r7, #7
   24938:	781b      	ldrb	r3, [r3, #0]
   2493a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2493c:	46c0      	nop			; (mov r8, r8)
   2493e:	4b15      	ldr	r3, [pc, #84]	; (24994 <system_gclk_gen_get_hz+0xb8>)
   24940:	4798      	blx	r3
   24942:	1e03      	subs	r3, r0, #0
   24944:	d1fb      	bne.n	2493e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   24946:	4b16      	ldr	r3, [pc, #88]	; (249a0 <system_gclk_gen_get_hz+0xc4>)
   24948:	689b      	ldr	r3, [r3, #8]
   2494a:	021b      	lsls	r3, r3, #8
   2494c:	0c1b      	lsrs	r3, r3, #16
   2494e:	b29b      	uxth	r3, r3
   24950:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   24952:	4b16      	ldr	r3, [pc, #88]	; (249ac <system_gclk_gen_get_hz+0xd0>)
   24954:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   24956:	2313      	movs	r3, #19
   24958:	18fb      	adds	r3, r7, r3
   2495a:	781b      	ldrb	r3, [r3, #0]
   2495c:	2b00      	cmp	r3, #0
   2495e:	d109      	bne.n	24974 <system_gclk_gen_get_hz+0x98>
   24960:	68fb      	ldr	r3, [r7, #12]
   24962:	2b01      	cmp	r3, #1
   24964:	d906      	bls.n	24974 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   24966:	4b12      	ldr	r3, [pc, #72]	; (249b0 <system_gclk_gen_get_hz+0xd4>)
   24968:	68f9      	ldr	r1, [r7, #12]
   2496a:	6978      	ldr	r0, [r7, #20]
   2496c:	4798      	blx	r3
   2496e:	0003      	movs	r3, r0
   24970:	617b      	str	r3, [r7, #20]
   24972:	e00a      	b.n	2498a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   24974:	2313      	movs	r3, #19
   24976:	18fb      	adds	r3, r7, r3
   24978:	781b      	ldrb	r3, [r3, #0]
   2497a:	2b00      	cmp	r3, #0
   2497c:	d005      	beq.n	2498a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2497e:	68fb      	ldr	r3, [r7, #12]
   24980:	3301      	adds	r3, #1
   24982:	697a      	ldr	r2, [r7, #20]
   24984:	40da      	lsrs	r2, r3
   24986:	0013      	movs	r3, r2
   24988:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2498a:	697b      	ldr	r3, [r7, #20]
}
   2498c:	0018      	movs	r0, r3
   2498e:	46bd      	mov	sp, r7
   24990:	b006      	add	sp, #24
   24992:	bd80      	pop	{r7, pc}
   24994:	0002470d 	.word	0x0002470d
   24998:	000246e5 	.word	0x000246e5
   2499c:	40000c04 	.word	0x40000c04
   249a0:	40000c00 	.word	0x40000c00
   249a4:	00023e99 	.word	0x00023e99
   249a8:	40000c08 	.word	0x40000c08
   249ac:	000246f9 	.word	0x000246f9
   249b0:	000264fd 	.word	0x000264fd

000249b4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   249b4:	b580      	push	{r7, lr}
   249b6:	b084      	sub	sp, #16
   249b8:	af00      	add	r7, sp, #0
   249ba:	0002      	movs	r2, r0
   249bc:	6039      	str	r1, [r7, #0]
   249be:	1dfb      	adds	r3, r7, #7
   249c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   249c2:	1dfb      	adds	r3, r7, #7
   249c4:	781b      	ldrb	r3, [r3, #0]
   249c6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   249c8:	683b      	ldr	r3, [r7, #0]
   249ca:	781b      	ldrb	r3, [r3, #0]
   249cc:	021b      	lsls	r3, r3, #8
   249ce:	001a      	movs	r2, r3
   249d0:	68fb      	ldr	r3, [r7, #12]
   249d2:	4313      	orrs	r3, r2
   249d4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   249d6:	1dfb      	adds	r3, r7, #7
   249d8:	781b      	ldrb	r3, [r3, #0]
   249da:	0018      	movs	r0, r3
   249dc:	4b04      	ldr	r3, [pc, #16]	; (249f0 <system_gclk_chan_set_config+0x3c>)
   249de:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   249e0:	4b04      	ldr	r3, [pc, #16]	; (249f4 <system_gclk_chan_set_config+0x40>)
   249e2:	68fa      	ldr	r2, [r7, #12]
   249e4:	b292      	uxth	r2, r2
   249e6:	805a      	strh	r2, [r3, #2]
}
   249e8:	46c0      	nop			; (mov r8, r8)
   249ea:	46bd      	mov	sp, r7
   249ec:	b004      	add	sp, #16
   249ee:	bd80      	pop	{r7, pc}
   249f0:	00024a41 	.word	0x00024a41
   249f4:	40000c00 	.word	0x40000c00

000249f8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   249f8:	b580      	push	{r7, lr}
   249fa:	b082      	sub	sp, #8
   249fc:	af00      	add	r7, sp, #0
   249fe:	0002      	movs	r2, r0
   24a00:	1dfb      	adds	r3, r7, #7
   24a02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24a04:	4b0a      	ldr	r3, [pc, #40]	; (24a30 <system_gclk_chan_enable+0x38>)
   24a06:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24a08:	4a0a      	ldr	r2, [pc, #40]	; (24a34 <system_gclk_chan_enable+0x3c>)
   24a0a:	1dfb      	adds	r3, r7, #7
   24a0c:	781b      	ldrb	r3, [r3, #0]
   24a0e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   24a10:	4909      	ldr	r1, [pc, #36]	; (24a38 <system_gclk_chan_enable+0x40>)
   24a12:	4b09      	ldr	r3, [pc, #36]	; (24a38 <system_gclk_chan_enable+0x40>)
   24a14:	885b      	ldrh	r3, [r3, #2]
   24a16:	b29b      	uxth	r3, r3
   24a18:	2280      	movs	r2, #128	; 0x80
   24a1a:	01d2      	lsls	r2, r2, #7
   24a1c:	4313      	orrs	r3, r2
   24a1e:	b29b      	uxth	r3, r3
   24a20:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   24a22:	4b06      	ldr	r3, [pc, #24]	; (24a3c <system_gclk_chan_enable+0x44>)
   24a24:	4798      	blx	r3
}
   24a26:	46c0      	nop			; (mov r8, r8)
   24a28:	46bd      	mov	sp, r7
   24a2a:	b002      	add	sp, #8
   24a2c:	bd80      	pop	{r7, pc}
   24a2e:	46c0      	nop			; (mov r8, r8)
   24a30:	000246e5 	.word	0x000246e5
   24a34:	40000c02 	.word	0x40000c02
   24a38:	40000c00 	.word	0x40000c00
   24a3c:	000246f9 	.word	0x000246f9

00024a40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   24a40:	b580      	push	{r7, lr}
   24a42:	b084      	sub	sp, #16
   24a44:	af00      	add	r7, sp, #0
   24a46:	0002      	movs	r2, r0
   24a48:	1dfb      	adds	r3, r7, #7
   24a4a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24a4c:	4b1c      	ldr	r3, [pc, #112]	; (24ac0 <system_gclk_chan_disable+0x80>)
   24a4e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24a50:	4a1c      	ldr	r2, [pc, #112]	; (24ac4 <system_gclk_chan_disable+0x84>)
   24a52:	1dfb      	adds	r3, r7, #7
   24a54:	781b      	ldrb	r3, [r3, #0]
   24a56:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   24a58:	4b1b      	ldr	r3, [pc, #108]	; (24ac8 <system_gclk_chan_disable+0x88>)
   24a5a:	885b      	ldrh	r3, [r3, #2]
   24a5c:	051b      	lsls	r3, r3, #20
   24a5e:	0f1b      	lsrs	r3, r3, #28
   24a60:	b2db      	uxtb	r3, r3
   24a62:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   24a64:	4a18      	ldr	r2, [pc, #96]	; (24ac8 <system_gclk_chan_disable+0x88>)
   24a66:	8853      	ldrh	r3, [r2, #2]
   24a68:	4918      	ldr	r1, [pc, #96]	; (24acc <system_gclk_chan_disable+0x8c>)
   24a6a:	400b      	ands	r3, r1
   24a6c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   24a6e:	4a16      	ldr	r2, [pc, #88]	; (24ac8 <system_gclk_chan_disable+0x88>)
   24a70:	4b15      	ldr	r3, [pc, #84]	; (24ac8 <system_gclk_chan_disable+0x88>)
   24a72:	885b      	ldrh	r3, [r3, #2]
   24a74:	b29b      	uxth	r3, r3
   24a76:	4916      	ldr	r1, [pc, #88]	; (24ad0 <system_gclk_chan_disable+0x90>)
   24a78:	400b      	ands	r3, r1
   24a7a:	b29b      	uxth	r3, r3
   24a7c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   24a7e:	46c0      	nop			; (mov r8, r8)
   24a80:	4b11      	ldr	r3, [pc, #68]	; (24ac8 <system_gclk_chan_disable+0x88>)
   24a82:	885b      	ldrh	r3, [r3, #2]
   24a84:	b29b      	uxth	r3, r3
   24a86:	001a      	movs	r2, r3
   24a88:	2380      	movs	r3, #128	; 0x80
   24a8a:	01db      	lsls	r3, r3, #7
   24a8c:	4013      	ands	r3, r2
   24a8e:	d1f7      	bne.n	24a80 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   24a90:	4a0d      	ldr	r2, [pc, #52]	; (24ac8 <system_gclk_chan_disable+0x88>)
   24a92:	68fb      	ldr	r3, [r7, #12]
   24a94:	b2db      	uxtb	r3, r3
   24a96:	1c19      	adds	r1, r3, #0
   24a98:	230f      	movs	r3, #15
   24a9a:	400b      	ands	r3, r1
   24a9c:	b2d9      	uxtb	r1, r3
   24a9e:	8853      	ldrh	r3, [r2, #2]
   24aa0:	1c08      	adds	r0, r1, #0
   24aa2:	210f      	movs	r1, #15
   24aa4:	4001      	ands	r1, r0
   24aa6:	0208      	lsls	r0, r1, #8
   24aa8:	4908      	ldr	r1, [pc, #32]	; (24acc <system_gclk_chan_disable+0x8c>)
   24aaa:	400b      	ands	r3, r1
   24aac:	1c19      	adds	r1, r3, #0
   24aae:	1c03      	adds	r3, r0, #0
   24ab0:	430b      	orrs	r3, r1
   24ab2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   24ab4:	4b07      	ldr	r3, [pc, #28]	; (24ad4 <system_gclk_chan_disable+0x94>)
   24ab6:	4798      	blx	r3
}
   24ab8:	46c0      	nop			; (mov r8, r8)
   24aba:	46bd      	mov	sp, r7
   24abc:	b004      	add	sp, #16
   24abe:	bd80      	pop	{r7, pc}
   24ac0:	000246e5 	.word	0x000246e5
   24ac4:	40000c02 	.word	0x40000c02
   24ac8:	40000c00 	.word	0x40000c00
   24acc:	fffff0ff 	.word	0xfffff0ff
   24ad0:	ffffbfff 	.word	0xffffbfff
   24ad4:	000246f9 	.word	0x000246f9

00024ad8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   24ad8:	b580      	push	{r7, lr}
   24ada:	b084      	sub	sp, #16
   24adc:	af00      	add	r7, sp, #0
   24ade:	0002      	movs	r2, r0
   24ae0:	1dfb      	adds	r3, r7, #7
   24ae2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   24ae4:	4b0d      	ldr	r3, [pc, #52]	; (24b1c <system_gclk_chan_get_hz+0x44>)
   24ae6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24ae8:	4a0d      	ldr	r2, [pc, #52]	; (24b20 <system_gclk_chan_get_hz+0x48>)
   24aea:	1dfb      	adds	r3, r7, #7
   24aec:	781b      	ldrb	r3, [r3, #0]
   24aee:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   24af0:	4b0c      	ldr	r3, [pc, #48]	; (24b24 <system_gclk_chan_get_hz+0x4c>)
   24af2:	885b      	ldrh	r3, [r3, #2]
   24af4:	051b      	lsls	r3, r3, #20
   24af6:	0f1b      	lsrs	r3, r3, #28
   24af8:	b2da      	uxtb	r2, r3
   24afa:	230f      	movs	r3, #15
   24afc:	18fb      	adds	r3, r7, r3
   24afe:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   24b00:	4b09      	ldr	r3, [pc, #36]	; (24b28 <system_gclk_chan_get_hz+0x50>)
   24b02:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   24b04:	230f      	movs	r3, #15
   24b06:	18fb      	adds	r3, r7, r3
   24b08:	781b      	ldrb	r3, [r3, #0]
   24b0a:	0018      	movs	r0, r3
   24b0c:	4b07      	ldr	r3, [pc, #28]	; (24b2c <system_gclk_chan_get_hz+0x54>)
   24b0e:	4798      	blx	r3
   24b10:	0003      	movs	r3, r0
}
   24b12:	0018      	movs	r0, r3
   24b14:	46bd      	mov	sp, r7
   24b16:	b004      	add	sp, #16
   24b18:	bd80      	pop	{r7, pc}
   24b1a:	46c0      	nop			; (mov r8, r8)
   24b1c:	000246e5 	.word	0x000246e5
   24b20:	40000c02 	.word	0x40000c02
   24b24:	40000c00 	.word	0x40000c00
   24b28:	000246f9 	.word	0x000246f9
   24b2c:	000248dd 	.word	0x000248dd

00024b30 <system_pinmux_get_group_from_gpio_pin>:
{
   24b30:	b580      	push	{r7, lr}
   24b32:	b084      	sub	sp, #16
   24b34:	af00      	add	r7, sp, #0
   24b36:	0002      	movs	r2, r0
   24b38:	1dfb      	adds	r3, r7, #7
   24b3a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24b3c:	230f      	movs	r3, #15
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	1dfa      	adds	r2, r7, #7
   24b42:	7812      	ldrb	r2, [r2, #0]
   24b44:	09d2      	lsrs	r2, r2, #7
   24b46:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24b48:	230e      	movs	r3, #14
   24b4a:	18fb      	adds	r3, r7, r3
   24b4c:	1dfa      	adds	r2, r7, #7
   24b4e:	7812      	ldrb	r2, [r2, #0]
   24b50:	0952      	lsrs	r2, r2, #5
   24b52:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24b54:	4b0d      	ldr	r3, [pc, #52]	; (24b8c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24b56:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24b58:	230f      	movs	r3, #15
   24b5a:	18fb      	adds	r3, r7, r3
   24b5c:	781b      	ldrb	r3, [r3, #0]
   24b5e:	2b00      	cmp	r3, #0
   24b60:	d10f      	bne.n	24b82 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24b62:	230f      	movs	r3, #15
   24b64:	18fb      	adds	r3, r7, r3
   24b66:	781b      	ldrb	r3, [r3, #0]
   24b68:	009b      	lsls	r3, r3, #2
   24b6a:	2210      	movs	r2, #16
   24b6c:	4694      	mov	ip, r2
   24b6e:	44bc      	add	ip, r7
   24b70:	4463      	add	r3, ip
   24b72:	3b08      	subs	r3, #8
   24b74:	681a      	ldr	r2, [r3, #0]
   24b76:	230e      	movs	r3, #14
   24b78:	18fb      	adds	r3, r7, r3
   24b7a:	781b      	ldrb	r3, [r3, #0]
   24b7c:	01db      	lsls	r3, r3, #7
   24b7e:	18d3      	adds	r3, r2, r3
   24b80:	e000      	b.n	24b84 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24b82:	2300      	movs	r3, #0
}
   24b84:	0018      	movs	r0, r3
   24b86:	46bd      	mov	sp, r7
   24b88:	b004      	add	sp, #16
   24b8a:	bd80      	pop	{r7, pc}
   24b8c:	41004400 	.word	0x41004400

00024b90 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   24b90:	b580      	push	{r7, lr}
   24b92:	b088      	sub	sp, #32
   24b94:	af00      	add	r7, sp, #0
   24b96:	60f8      	str	r0, [r7, #12]
   24b98:	60b9      	str	r1, [r7, #8]
   24b9a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   24b9c:	2300      	movs	r3, #0
   24b9e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   24ba0:	687b      	ldr	r3, [r7, #4]
   24ba2:	78db      	ldrb	r3, [r3, #3]
   24ba4:	2201      	movs	r2, #1
   24ba6:	4053      	eors	r3, r2
   24ba8:	b2db      	uxtb	r3, r3
   24baa:	2b00      	cmp	r3, #0
   24bac:	d035      	beq.n	24c1a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   24bae:	687b      	ldr	r3, [r7, #4]
   24bb0:	781b      	ldrb	r3, [r3, #0]
   24bb2:	2b80      	cmp	r3, #128	; 0x80
   24bb4:	d00b      	beq.n	24bce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   24bb6:	69fb      	ldr	r3, [r7, #28]
   24bb8:	2280      	movs	r2, #128	; 0x80
   24bba:	0252      	lsls	r2, r2, #9
   24bbc:	4313      	orrs	r3, r2
   24bbe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   24bc0:	687b      	ldr	r3, [r7, #4]
   24bc2:	781b      	ldrb	r3, [r3, #0]
   24bc4:	061b      	lsls	r3, r3, #24
   24bc6:	001a      	movs	r2, r3
   24bc8:	69fb      	ldr	r3, [r7, #28]
   24bca:	4313      	orrs	r3, r2
   24bcc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   24bce:	687b      	ldr	r3, [r7, #4]
   24bd0:	785b      	ldrb	r3, [r3, #1]
   24bd2:	2b00      	cmp	r3, #0
   24bd4:	d003      	beq.n	24bde <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24bd6:	687b      	ldr	r3, [r7, #4]
   24bd8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   24bda:	2b02      	cmp	r3, #2
   24bdc:	d110      	bne.n	24c00 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   24bde:	69fb      	ldr	r3, [r7, #28]
   24be0:	2280      	movs	r2, #128	; 0x80
   24be2:	0292      	lsls	r2, r2, #10
   24be4:	4313      	orrs	r3, r2
   24be6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   24be8:	687b      	ldr	r3, [r7, #4]
   24bea:	789b      	ldrb	r3, [r3, #2]
   24bec:	2b00      	cmp	r3, #0
   24bee:	d004      	beq.n	24bfa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   24bf0:	69fb      	ldr	r3, [r7, #28]
   24bf2:	2280      	movs	r2, #128	; 0x80
   24bf4:	02d2      	lsls	r2, r2, #11
   24bf6:	4313      	orrs	r3, r2
   24bf8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   24bfa:	68fb      	ldr	r3, [r7, #12]
   24bfc:	68ba      	ldr	r2, [r7, #8]
   24bfe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24c00:	687b      	ldr	r3, [r7, #4]
   24c02:	785b      	ldrb	r3, [r3, #1]
   24c04:	2b01      	cmp	r3, #1
   24c06:	d003      	beq.n	24c10 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24c08:	687b      	ldr	r3, [r7, #4]
   24c0a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24c0c:	2b02      	cmp	r3, #2
   24c0e:	d107      	bne.n	24c20 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   24c10:	69fb      	ldr	r3, [r7, #28]
   24c12:	4a22      	ldr	r2, [pc, #136]	; (24c9c <_system_pinmux_config+0x10c>)
   24c14:	4013      	ands	r3, r2
   24c16:	61fb      	str	r3, [r7, #28]
   24c18:	e002      	b.n	24c20 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   24c1a:	68fb      	ldr	r3, [r7, #12]
   24c1c:	68ba      	ldr	r2, [r7, #8]
   24c1e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   24c20:	68bb      	ldr	r3, [r7, #8]
   24c22:	041b      	lsls	r3, r3, #16
   24c24:	0c1b      	lsrs	r3, r3, #16
   24c26:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   24c28:	68bb      	ldr	r3, [r7, #8]
   24c2a:	0c1b      	lsrs	r3, r3, #16
   24c2c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24c2e:	69ba      	ldr	r2, [r7, #24]
   24c30:	69fb      	ldr	r3, [r7, #28]
   24c32:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   24c34:	22a0      	movs	r2, #160	; 0xa0
   24c36:	05d2      	lsls	r2, r2, #23
   24c38:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24c3a:	68fb      	ldr	r3, [r7, #12]
   24c3c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24c3e:	697a      	ldr	r2, [r7, #20]
   24c40:	69fb      	ldr	r3, [r7, #28]
   24c42:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   24c44:	22d0      	movs	r2, #208	; 0xd0
   24c46:	0612      	lsls	r2, r2, #24
   24c48:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24c4a:	68fb      	ldr	r3, [r7, #12]
   24c4c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   24c4e:	687b      	ldr	r3, [r7, #4]
   24c50:	78db      	ldrb	r3, [r3, #3]
   24c52:	2201      	movs	r2, #1
   24c54:	4053      	eors	r3, r2
   24c56:	b2db      	uxtb	r3, r3
   24c58:	2b00      	cmp	r3, #0
   24c5a:	d01a      	beq.n	24c92 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   24c5c:	69fa      	ldr	r2, [r7, #28]
   24c5e:	2380      	movs	r3, #128	; 0x80
   24c60:	02db      	lsls	r3, r3, #11
   24c62:	4013      	ands	r3, r2
   24c64:	d00a      	beq.n	24c7c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   24c66:	687b      	ldr	r3, [r7, #4]
   24c68:	789b      	ldrb	r3, [r3, #2]
   24c6a:	2b01      	cmp	r3, #1
   24c6c:	d103      	bne.n	24c76 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   24c6e:	68fb      	ldr	r3, [r7, #12]
   24c70:	68ba      	ldr	r2, [r7, #8]
   24c72:	619a      	str	r2, [r3, #24]
   24c74:	e002      	b.n	24c7c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   24c76:	68fb      	ldr	r3, [r7, #12]
   24c78:	68ba      	ldr	r2, [r7, #8]
   24c7a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24c7c:	687b      	ldr	r3, [r7, #4]
   24c7e:	785b      	ldrb	r3, [r3, #1]
   24c80:	2b01      	cmp	r3, #1
   24c82:	d003      	beq.n	24c8c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24c84:	687b      	ldr	r3, [r7, #4]
   24c86:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24c88:	2b02      	cmp	r3, #2
   24c8a:	d102      	bne.n	24c92 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   24c8c:	68fb      	ldr	r3, [r7, #12]
   24c8e:	68ba      	ldr	r2, [r7, #8]
   24c90:	609a      	str	r2, [r3, #8]
		}
	}
}
   24c92:	46c0      	nop			; (mov r8, r8)
   24c94:	46bd      	mov	sp, r7
   24c96:	b008      	add	sp, #32
   24c98:	bd80      	pop	{r7, pc}
   24c9a:	46c0      	nop			; (mov r8, r8)
   24c9c:	fffbffff 	.word	0xfffbffff

00024ca0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   24ca0:	b580      	push	{r7, lr}
   24ca2:	b084      	sub	sp, #16
   24ca4:	af00      	add	r7, sp, #0
   24ca6:	0002      	movs	r2, r0
   24ca8:	6039      	str	r1, [r7, #0]
   24caa:	1dfb      	adds	r3, r7, #7
   24cac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24cae:	1dfb      	adds	r3, r7, #7
   24cb0:	781b      	ldrb	r3, [r3, #0]
   24cb2:	0018      	movs	r0, r3
   24cb4:	4b0a      	ldr	r3, [pc, #40]	; (24ce0 <system_pinmux_pin_set_config+0x40>)
   24cb6:	4798      	blx	r3
   24cb8:	0003      	movs	r3, r0
   24cba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   24cbc:	1dfb      	adds	r3, r7, #7
   24cbe:	781b      	ldrb	r3, [r3, #0]
   24cc0:	221f      	movs	r2, #31
   24cc2:	4013      	ands	r3, r2
   24cc4:	2201      	movs	r2, #1
   24cc6:	409a      	lsls	r2, r3
   24cc8:	0013      	movs	r3, r2
   24cca:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   24ccc:	683a      	ldr	r2, [r7, #0]
   24cce:	68b9      	ldr	r1, [r7, #8]
   24cd0:	68fb      	ldr	r3, [r7, #12]
   24cd2:	0018      	movs	r0, r3
   24cd4:	4b03      	ldr	r3, [pc, #12]	; (24ce4 <system_pinmux_pin_set_config+0x44>)
   24cd6:	4798      	blx	r3
}
   24cd8:	46c0      	nop			; (mov r8, r8)
   24cda:	46bd      	mov	sp, r7
   24cdc:	b004      	add	sp, #16
   24cde:	bd80      	pop	{r7, pc}
   24ce0:	00024b31 	.word	0x00024b31
   24ce4:	00024b91 	.word	0x00024b91

00024ce8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   24ce8:	b580      	push	{r7, lr}
   24cea:	af00      	add	r7, sp, #0
	return;
   24cec:	46c0      	nop			; (mov r8, r8)
}
   24cee:	46bd      	mov	sp, r7
   24cf0:	bd80      	pop	{r7, pc}
	...

00024cf4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   24cf4:	b580      	push	{r7, lr}
   24cf6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   24cf8:	4b06      	ldr	r3, [pc, #24]	; (24d14 <system_init+0x20>)
   24cfa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   24cfc:	4b06      	ldr	r3, [pc, #24]	; (24d18 <system_init+0x24>)
   24cfe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   24d00:	4b06      	ldr	r3, [pc, #24]	; (24d1c <system_init+0x28>)
   24d02:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   24d04:	4b06      	ldr	r3, [pc, #24]	; (24d20 <system_init+0x2c>)
   24d06:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   24d08:	4b06      	ldr	r3, [pc, #24]	; (24d24 <system_init+0x30>)
   24d0a:	4798      	blx	r3
}
   24d0c:	46c0      	nop			; (mov r8, r8)
   24d0e:	46bd      	mov	sp, r7
   24d10:	bd80      	pop	{r7, pc}
   24d12:	46c0      	nop			; (mov r8, r8)
   24d14:	00024329 	.word	0x00024329
   24d18:	00023bf1 	.word	0x00023bf1
   24d1c:	000226b9 	.word	0x000226b9
   24d20:	0001ddbd 	.word	0x0001ddbd
   24d24:	00024ce9 	.word	0x00024ce9

00024d28 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   24d28:	b580      	push	{r7, lr}
   24d2a:	b082      	sub	sp, #8
   24d2c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   24d2e:	4b2f      	ldr	r3, [pc, #188]	; (24dec <Reset_Handler+0xc4>)
   24d30:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   24d32:	4b2f      	ldr	r3, [pc, #188]	; (24df0 <Reset_Handler+0xc8>)
   24d34:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   24d36:	687a      	ldr	r2, [r7, #4]
   24d38:	683b      	ldr	r3, [r7, #0]
   24d3a:	429a      	cmp	r2, r3
   24d3c:	d00c      	beq.n	24d58 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   24d3e:	e007      	b.n	24d50 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   24d40:	683b      	ldr	r3, [r7, #0]
   24d42:	1d1a      	adds	r2, r3, #4
   24d44:	603a      	str	r2, [r7, #0]
   24d46:	687a      	ldr	r2, [r7, #4]
   24d48:	1d11      	adds	r1, r2, #4
   24d4a:	6079      	str	r1, [r7, #4]
   24d4c:	6812      	ldr	r2, [r2, #0]
   24d4e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   24d50:	683a      	ldr	r2, [r7, #0]
   24d52:	4b28      	ldr	r3, [pc, #160]	; (24df4 <Reset_Handler+0xcc>)
   24d54:	429a      	cmp	r2, r3
   24d56:	d3f3      	bcc.n	24d40 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   24d58:	4b27      	ldr	r3, [pc, #156]	; (24df8 <Reset_Handler+0xd0>)
   24d5a:	603b      	str	r3, [r7, #0]
   24d5c:	e004      	b.n	24d68 <Reset_Handler+0x40>
                *pDest++ = 0;
   24d5e:	683b      	ldr	r3, [r7, #0]
   24d60:	1d1a      	adds	r2, r3, #4
   24d62:	603a      	str	r2, [r7, #0]
   24d64:	2200      	movs	r2, #0
   24d66:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   24d68:	683a      	ldr	r2, [r7, #0]
   24d6a:	4b24      	ldr	r3, [pc, #144]	; (24dfc <Reset_Handler+0xd4>)
   24d6c:	429a      	cmp	r2, r3
   24d6e:	d3f6      	bcc.n	24d5e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   24d70:	4b23      	ldr	r3, [pc, #140]	; (24e00 <Reset_Handler+0xd8>)
   24d72:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   24d74:	4b23      	ldr	r3, [pc, #140]	; (24e04 <Reset_Handler+0xdc>)
   24d76:	687a      	ldr	r2, [r7, #4]
   24d78:	21ff      	movs	r1, #255	; 0xff
   24d7a:	438a      	bics	r2, r1
   24d7c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   24d7e:	4a22      	ldr	r2, [pc, #136]	; (24e08 <Reset_Handler+0xe0>)
   24d80:	2390      	movs	r3, #144	; 0x90
   24d82:	005b      	lsls	r3, r3, #1
   24d84:	2102      	movs	r1, #2
   24d86:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   24d88:	4a20      	ldr	r2, [pc, #128]	; (24e0c <Reset_Handler+0xe4>)
   24d8a:	78d3      	ldrb	r3, [r2, #3]
   24d8c:	2103      	movs	r1, #3
   24d8e:	438b      	bics	r3, r1
   24d90:	1c19      	adds	r1, r3, #0
   24d92:	2302      	movs	r3, #2
   24d94:	430b      	orrs	r3, r1
   24d96:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   24d98:	4a1c      	ldr	r2, [pc, #112]	; (24e0c <Reset_Handler+0xe4>)
   24d9a:	78d3      	ldrb	r3, [r2, #3]
   24d9c:	210c      	movs	r1, #12
   24d9e:	438b      	bics	r3, r1
   24da0:	1c19      	adds	r1, r3, #0
   24da2:	2308      	movs	r3, #8
   24da4:	430b      	orrs	r3, r1
   24da6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   24da8:	4a19      	ldr	r2, [pc, #100]	; (24e10 <Reset_Handler+0xe8>)
   24daa:	7b93      	ldrb	r3, [r2, #14]
   24dac:	2130      	movs	r1, #48	; 0x30
   24dae:	438b      	bics	r3, r1
   24db0:	1c19      	adds	r1, r3, #0
   24db2:	2320      	movs	r3, #32
   24db4:	430b      	orrs	r3, r1
   24db6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   24db8:	4a15      	ldr	r2, [pc, #84]	; (24e10 <Reset_Handler+0xe8>)
   24dba:	7b93      	ldrb	r3, [r2, #14]
   24dbc:	210c      	movs	r1, #12
   24dbe:	438b      	bics	r3, r1
   24dc0:	1c19      	adds	r1, r3, #0
   24dc2:	2308      	movs	r3, #8
   24dc4:	430b      	orrs	r3, r1
   24dc6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   24dc8:	4a11      	ldr	r2, [pc, #68]	; (24e10 <Reset_Handler+0xe8>)
   24dca:	7b93      	ldrb	r3, [r2, #14]
   24dcc:	2103      	movs	r1, #3
   24dce:	438b      	bics	r3, r1
   24dd0:	1c19      	adds	r1, r3, #0
   24dd2:	2302      	movs	r3, #2
   24dd4:	430b      	orrs	r3, r1
   24dd6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   24dd8:	4a0e      	ldr	r2, [pc, #56]	; (24e14 <Reset_Handler+0xec>)
   24dda:	6853      	ldr	r3, [r2, #4]
   24ddc:	2180      	movs	r1, #128	; 0x80
   24dde:	430b      	orrs	r3, r1
   24de0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   24de2:	4b0d      	ldr	r3, [pc, #52]	; (24e18 <Reset_Handler+0xf0>)
   24de4:	4798      	blx	r3

        /* Branch to main function */
        main();
   24de6:	4b0d      	ldr	r3, [pc, #52]	; (24e1c <Reset_Handler+0xf4>)
   24de8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   24dea:	e7fe      	b.n	24dea <Reset_Handler+0xc2>
   24dec:	0002af74 	.word	0x0002af74
   24df0:	20000000 	.word	0x20000000
   24df4:	200001fc 	.word	0x200001fc
   24df8:	20000200 	.word	0x20000200
   24dfc:	2000098c 	.word	0x2000098c
   24e00:	00010000 	.word	0x00010000
   24e04:	e000ed00 	.word	0xe000ed00
   24e08:	41007000 	.word	0x41007000
   24e0c:	41005000 	.word	0x41005000
   24e10:	41004800 	.word	0x41004800
   24e14:	41004000 	.word	0x41004000
   24e18:	00028d25 	.word	0x00028d25
   24e1c:	00025051 	.word	0x00025051

00024e20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   24e20:	b580      	push	{r7, lr}
   24e22:	af00      	add	r7, sp, #0
        while (1) {
   24e24:	e7fe      	b.n	24e24 <Dummy_Handler+0x4>
	...

00024e28 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   24e28:	b580      	push	{r7, lr}
   24e2a:	b084      	sub	sp, #16
   24e2c:	af00      	add	r7, sp, #0
   24e2e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   24e30:	4b0a      	ldr	r3, [pc, #40]	; (24e5c <_sbrk+0x34>)
   24e32:	681b      	ldr	r3, [r3, #0]
   24e34:	2b00      	cmp	r3, #0
   24e36:	d102      	bne.n	24e3e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   24e38:	4b08      	ldr	r3, [pc, #32]	; (24e5c <_sbrk+0x34>)
   24e3a:	4a09      	ldr	r2, [pc, #36]	; (24e60 <_sbrk+0x38>)
   24e3c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   24e3e:	4b07      	ldr	r3, [pc, #28]	; (24e5c <_sbrk+0x34>)
   24e40:	681b      	ldr	r3, [r3, #0]
   24e42:	60fb      	str	r3, [r7, #12]

	heap += incr;
   24e44:	4b05      	ldr	r3, [pc, #20]	; (24e5c <_sbrk+0x34>)
   24e46:	681a      	ldr	r2, [r3, #0]
   24e48:	687b      	ldr	r3, [r7, #4]
   24e4a:	18d2      	adds	r2, r2, r3
   24e4c:	4b03      	ldr	r3, [pc, #12]	; (24e5c <_sbrk+0x34>)
   24e4e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   24e50:	68fb      	ldr	r3, [r7, #12]
}
   24e52:	0018      	movs	r0, r3
   24e54:	46bd      	mov	sp, r7
   24e56:	b004      	add	sp, #16
   24e58:	bd80      	pop	{r7, pc}
   24e5a:	46c0      	nop			; (mov r8, r8)
   24e5c:	20000508 	.word	0x20000508
   24e60:	20002990 	.word	0x20002990

00024e64 <system_apb_clock_clear_mask>:
{
   24e64:	b580      	push	{r7, lr}
   24e66:	b082      	sub	sp, #8
   24e68:	af00      	add	r7, sp, #0
   24e6a:	0002      	movs	r2, r0
   24e6c:	6039      	str	r1, [r7, #0]
   24e6e:	1dfb      	adds	r3, r7, #7
   24e70:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24e72:	1dfb      	adds	r3, r7, #7
   24e74:	781b      	ldrb	r3, [r3, #0]
   24e76:	2b01      	cmp	r3, #1
   24e78:	d00b      	beq.n	24e92 <system_apb_clock_clear_mask+0x2e>
   24e7a:	2b02      	cmp	r3, #2
   24e7c:	d011      	beq.n	24ea2 <system_apb_clock_clear_mask+0x3e>
   24e7e:	2b00      	cmp	r3, #0
   24e80:	d117      	bne.n	24eb2 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   24e82:	4b0f      	ldr	r3, [pc, #60]	; (24ec0 <system_apb_clock_clear_mask+0x5c>)
   24e84:	4a0e      	ldr	r2, [pc, #56]	; (24ec0 <system_apb_clock_clear_mask+0x5c>)
   24e86:	6992      	ldr	r2, [r2, #24]
   24e88:	6839      	ldr	r1, [r7, #0]
   24e8a:	43c9      	mvns	r1, r1
   24e8c:	400a      	ands	r2, r1
   24e8e:	619a      	str	r2, [r3, #24]
			break;
   24e90:	e011      	b.n	24eb6 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   24e92:	4b0b      	ldr	r3, [pc, #44]	; (24ec0 <system_apb_clock_clear_mask+0x5c>)
   24e94:	4a0a      	ldr	r2, [pc, #40]	; (24ec0 <system_apb_clock_clear_mask+0x5c>)
   24e96:	69d2      	ldr	r2, [r2, #28]
   24e98:	6839      	ldr	r1, [r7, #0]
   24e9a:	43c9      	mvns	r1, r1
   24e9c:	400a      	ands	r2, r1
   24e9e:	61da      	str	r2, [r3, #28]
			break;
   24ea0:	e009      	b.n	24eb6 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   24ea2:	4b07      	ldr	r3, [pc, #28]	; (24ec0 <system_apb_clock_clear_mask+0x5c>)
   24ea4:	4a06      	ldr	r2, [pc, #24]	; (24ec0 <system_apb_clock_clear_mask+0x5c>)
   24ea6:	6a12      	ldr	r2, [r2, #32]
   24ea8:	6839      	ldr	r1, [r7, #0]
   24eaa:	43c9      	mvns	r1, r1
   24eac:	400a      	ands	r2, r1
   24eae:	621a      	str	r2, [r3, #32]
			break;
   24eb0:	e001      	b.n	24eb6 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   24eb2:	2317      	movs	r3, #23
   24eb4:	e000      	b.n	24eb8 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   24eb6:	2300      	movs	r3, #0
}
   24eb8:	0018      	movs	r0, r3
   24eba:	46bd      	mov	sp, r7
   24ebc:	b002      	add	sp, #8
   24ebe:	bd80      	pop	{r7, pc}
   24ec0:	40000400 	.word	0x40000400

00024ec4 <system_interrupt_enable_global>:
{
   24ec4:	b580      	push	{r7, lr}
   24ec6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   24ec8:	4b04      	ldr	r3, [pc, #16]	; (24edc <system_interrupt_enable_global+0x18>)
   24eca:	2201      	movs	r2, #1
   24ecc:	701a      	strb	r2, [r3, #0]
   24ece:	f3bf 8f5f 	dmb	sy
   24ed2:	b662      	cpsie	i
}
   24ed4:	46c0      	nop			; (mov r8, r8)
   24ed6:	46bd      	mov	sp, r7
   24ed8:	bd80      	pop	{r7, pc}
   24eda:	46c0      	nop			; (mov r8, r8)
   24edc:	20000028 	.word	0x20000028

00024ee0 <system_pinmux_get_group_from_gpio_pin>:
{
   24ee0:	b580      	push	{r7, lr}
   24ee2:	b084      	sub	sp, #16
   24ee4:	af00      	add	r7, sp, #0
   24ee6:	0002      	movs	r2, r0
   24ee8:	1dfb      	adds	r3, r7, #7
   24eea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24eec:	230f      	movs	r3, #15
   24eee:	18fb      	adds	r3, r7, r3
   24ef0:	1dfa      	adds	r2, r7, #7
   24ef2:	7812      	ldrb	r2, [r2, #0]
   24ef4:	09d2      	lsrs	r2, r2, #7
   24ef6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24ef8:	230e      	movs	r3, #14
   24efa:	18fb      	adds	r3, r7, r3
   24efc:	1dfa      	adds	r2, r7, #7
   24efe:	7812      	ldrb	r2, [r2, #0]
   24f00:	0952      	lsrs	r2, r2, #5
   24f02:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24f04:	4b0d      	ldr	r3, [pc, #52]	; (24f3c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24f06:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24f08:	230f      	movs	r3, #15
   24f0a:	18fb      	adds	r3, r7, r3
   24f0c:	781b      	ldrb	r3, [r3, #0]
   24f0e:	2b00      	cmp	r3, #0
   24f10:	d10f      	bne.n	24f32 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24f12:	230f      	movs	r3, #15
   24f14:	18fb      	adds	r3, r7, r3
   24f16:	781b      	ldrb	r3, [r3, #0]
   24f18:	009b      	lsls	r3, r3, #2
   24f1a:	2210      	movs	r2, #16
   24f1c:	4694      	mov	ip, r2
   24f1e:	44bc      	add	ip, r7
   24f20:	4463      	add	r3, ip
   24f22:	3b08      	subs	r3, #8
   24f24:	681a      	ldr	r2, [r3, #0]
   24f26:	230e      	movs	r3, #14
   24f28:	18fb      	adds	r3, r7, r3
   24f2a:	781b      	ldrb	r3, [r3, #0]
   24f2c:	01db      	lsls	r3, r3, #7
   24f2e:	18d3      	adds	r3, r2, r3
   24f30:	e000      	b.n	24f34 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24f32:	2300      	movs	r3, #0
}
   24f34:	0018      	movs	r0, r3
   24f36:	46bd      	mov	sp, r7
   24f38:	b004      	add	sp, #16
   24f3a:	bd80      	pop	{r7, pc}
   24f3c:	41004400 	.word	0x41004400

00024f40 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   24f40:	b580      	push	{r7, lr}
   24f42:	b084      	sub	sp, #16
   24f44:	af00      	add	r7, sp, #0
   24f46:	0002      	movs	r2, r0
   24f48:	1dfb      	adds	r3, r7, #7
   24f4a:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   24f4c:	4b1a      	ldr	r3, [pc, #104]	; (24fb8 <system_set_sleepmode+0x78>)
   24f4e:	699b      	ldr	r3, [r3, #24]
   24f50:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   24f52:	68fa      	ldr	r2, [r7, #12]
   24f54:	23f0      	movs	r3, #240	; 0xf0
   24f56:	011b      	lsls	r3, r3, #4
   24f58:	4013      	ands	r3, r2
   24f5a:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   24f5c:	68fb      	ldr	r3, [r7, #12]
   24f5e:	0a1b      	lsrs	r3, r3, #8
   24f60:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   24f62:	68fb      	ldr	r3, [r7, #12]
   24f64:	2b02      	cmp	r3, #2
   24f66:	d805      	bhi.n	24f74 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24f68:	4a14      	ldr	r2, [pc, #80]	; (24fbc <system_set_sleepmode+0x7c>)
   24f6a:	6853      	ldr	r3, [r2, #4]
   24f6c:	21c0      	movs	r1, #192	; 0xc0
   24f6e:	0089      	lsls	r1, r1, #2
   24f70:	430b      	orrs	r3, r1
   24f72:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   24f74:	1dfb      	adds	r3, r7, #7
   24f76:	781b      	ldrb	r3, [r3, #0]
   24f78:	2b00      	cmp	r3, #0
   24f7a:	db16      	blt.n	24faa <system_set_sleepmode+0x6a>
   24f7c:	2b02      	cmp	r3, #2
   24f7e:	dd02      	ble.n	24f86 <system_set_sleepmode+0x46>
   24f80:	2b03      	cmp	r3, #3
   24f82:	d00b      	beq.n	24f9c <system_set_sleepmode+0x5c>
   24f84:	e011      	b.n	24faa <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   24f86:	4b0e      	ldr	r3, [pc, #56]	; (24fc0 <system_set_sleepmode+0x80>)
   24f88:	4a0d      	ldr	r2, [pc, #52]	; (24fc0 <system_set_sleepmode+0x80>)
   24f8a:	6912      	ldr	r2, [r2, #16]
   24f8c:	2104      	movs	r1, #4
   24f8e:	438a      	bics	r2, r1
   24f90:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   24f92:	4a0c      	ldr	r2, [pc, #48]	; (24fc4 <system_set_sleepmode+0x84>)
   24f94:	1dfb      	adds	r3, r7, #7
   24f96:	781b      	ldrb	r3, [r3, #0]
   24f98:	7053      	strb	r3, [r2, #1]
			break;
   24f9a:	e008      	b.n	24fae <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   24f9c:	4b08      	ldr	r3, [pc, #32]	; (24fc0 <system_set_sleepmode+0x80>)
   24f9e:	4a08      	ldr	r2, [pc, #32]	; (24fc0 <system_set_sleepmode+0x80>)
   24fa0:	6912      	ldr	r2, [r2, #16]
   24fa2:	2104      	movs	r1, #4
   24fa4:	430a      	orrs	r2, r1
   24fa6:	611a      	str	r2, [r3, #16]
			break;
   24fa8:	e001      	b.n	24fae <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   24faa:	2317      	movs	r3, #23
   24fac:	e000      	b.n	24fb0 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   24fae:	2300      	movs	r3, #0
}
   24fb0:	0018      	movs	r0, r3
   24fb2:	46bd      	mov	sp, r7
   24fb4:	b004      	add	sp, #16
   24fb6:	bd80      	pop	{r7, pc}
   24fb8:	41002000 	.word	0x41002000
   24fbc:	41004000 	.word	0x41004000
   24fc0:	e000ed00 	.word	0xe000ed00
   24fc4:	40000400 	.word	0x40000400

00024fc8 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   24fc8:	b580      	push	{r7, lr}
   24fca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   24fcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   24fd0:	bf30      	wfi
	__DSB();
	__WFI();
}
   24fd2:	46c0      	nop			; (mov r8, r8)
   24fd4:	46bd      	mov	sp, r7
   24fd6:	bd80      	pop	{r7, pc}

00024fd8 <port_get_group_from_gpio_pin>:
{
   24fd8:	b580      	push	{r7, lr}
   24fda:	b082      	sub	sp, #8
   24fdc:	af00      	add	r7, sp, #0
   24fde:	0002      	movs	r2, r0
   24fe0:	1dfb      	adds	r3, r7, #7
   24fe2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24fe4:	1dfb      	adds	r3, r7, #7
   24fe6:	781b      	ldrb	r3, [r3, #0]
   24fe8:	0018      	movs	r0, r3
   24fea:	4b03      	ldr	r3, [pc, #12]	; (24ff8 <port_get_group_from_gpio_pin+0x20>)
   24fec:	4798      	blx	r3
   24fee:	0003      	movs	r3, r0
}
   24ff0:	0018      	movs	r0, r3
   24ff2:	46bd      	mov	sp, r7
   24ff4:	b002      	add	sp, #8
   24ff6:	bd80      	pop	{r7, pc}
   24ff8:	00024ee1 	.word	0x00024ee1

00024ffc <port_pin_set_output_level>:
{
   24ffc:	b580      	push	{r7, lr}
   24ffe:	b084      	sub	sp, #16
   25000:	af00      	add	r7, sp, #0
   25002:	0002      	movs	r2, r0
   25004:	1dfb      	adds	r3, r7, #7
   25006:	701a      	strb	r2, [r3, #0]
   25008:	1dbb      	adds	r3, r7, #6
   2500a:	1c0a      	adds	r2, r1, #0
   2500c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2500e:	1dfb      	adds	r3, r7, #7
   25010:	781b      	ldrb	r3, [r3, #0]
   25012:	0018      	movs	r0, r3
   25014:	4b0d      	ldr	r3, [pc, #52]	; (2504c <port_pin_set_output_level+0x50>)
   25016:	4798      	blx	r3
   25018:	0003      	movs	r3, r0
   2501a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2501c:	1dfb      	adds	r3, r7, #7
   2501e:	781b      	ldrb	r3, [r3, #0]
   25020:	221f      	movs	r2, #31
   25022:	4013      	ands	r3, r2
   25024:	2201      	movs	r2, #1
   25026:	409a      	lsls	r2, r3
   25028:	0013      	movs	r3, r2
   2502a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2502c:	1dbb      	adds	r3, r7, #6
   2502e:	781b      	ldrb	r3, [r3, #0]
   25030:	2b00      	cmp	r3, #0
   25032:	d003      	beq.n	2503c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25034:	68fb      	ldr	r3, [r7, #12]
   25036:	68ba      	ldr	r2, [r7, #8]
   25038:	619a      	str	r2, [r3, #24]
}
   2503a:	e002      	b.n	25042 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2503c:	68fb      	ldr	r3, [r7, #12]
   2503e:	68ba      	ldr	r2, [r7, #8]
   25040:	615a      	str	r2, [r3, #20]
}
   25042:	46c0      	nop			; (mov r8, r8)
   25044:	46bd      	mov	sp, r7
   25046:	b004      	add	sp, #16
   25048:	bd80      	pop	{r7, pc}
   2504a:	46c0      	nop			; (mov r8, r8)
   2504c:	00024fd9 	.word	0x00024fd9

00025050 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   25050:	b590      	push	{r4, r7, lr}
   25052:	b083      	sub	sp, #12
   25054:	af02      	add	r7, sp, #8
	system_init();
   25056:	4b18      	ldr	r3, [pc, #96]	; (250b8 <main+0x68>)
   25058:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   2505a:	2111      	movs	r1, #17
   2505c:	2000      	movs	r0, #0
   2505e:	4b17      	ldr	r3, [pc, #92]	; (250bc <main+0x6c>)
   25060:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   25062:	2103      	movs	r1, #3
   25064:	2001      	movs	r0, #1
   25066:	4b15      	ldr	r3, [pc, #84]	; (250bc <main+0x6c>)
   25068:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   2506a:	4b15      	ldr	r3, [pc, #84]	; (250c0 <main+0x70>)
   2506c:	0019      	movs	r1, r3
   2506e:	2002      	movs	r0, #2
   25070:	4b12      	ldr	r3, [pc, #72]	; (250bc <main+0x6c>)
   25072:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   25074:	4a13      	ldr	r2, [pc, #76]	; (250c4 <main+0x74>)
   25076:	6853      	ldr	r3, [r2, #4]
   25078:	21c0      	movs	r1, #192	; 0xc0
   2507a:	0089      	lsls	r1, r1, #2
   2507c:	430b      	orrs	r3, r1
   2507e:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   25080:	2003      	movs	r0, #3
   25082:	4b11      	ldr	r3, [pc, #68]	; (250c8 <main+0x78>)
   25084:	4798      	blx	r3
	
	system_interrupt_enable_global();
   25086:	4b11      	ldr	r3, [pc, #68]	; (250cc <main+0x7c>)
   25088:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   2508a:	4b11      	ldr	r3, [pc, #68]	; (250d0 <main+0x80>)
   2508c:	4798      	blx	r3
	init_eeprom();
   2508e:	4b11      	ldr	r3, [pc, #68]	; (250d4 <main+0x84>)
   25090:	4798      	blx	r3
	
	
	
	start_lcd_service();
   25092:	4b11      	ldr	r3, [pc, #68]	; (250d8 <main+0x88>)
   25094:	4798      	blx	r3
	start_gsm_service();
   25096:	4b11      	ldr	r3, [pc, #68]	; (250dc <main+0x8c>)
   25098:	4798      	blx	r3
	start_motor_service();
   2509a:	4b11      	ldr	r3, [pc, #68]	; (250e0 <main+0x90>)
   2509c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   2509e:	4811      	ldr	r0, [pc, #68]	; (250e4 <main+0x94>)
   250a0:	2300      	movs	r3, #0
   250a2:	9301      	str	r3, [sp, #4]
   250a4:	2301      	movs	r3, #1
   250a6:	9300      	str	r3, [sp, #0]
   250a8:	2300      	movs	r3, #0
   250aa:	2264      	movs	r2, #100	; 0x64
   250ac:	2100      	movs	r1, #0
   250ae:	4c0e      	ldr	r4, [pc, #56]	; (250e8 <main+0x98>)
   250b0:	47a0      	blx	r4
	
	vTaskStartScheduler();
   250b2:	4b0e      	ldr	r3, [pc, #56]	; (250ec <main+0x9c>)
   250b4:	4798      	blx	r3
	
	for (;;)
   250b6:	e7fe      	b.n	250b6 <main+0x66>
   250b8:	00024cf5 	.word	0x00024cf5
   250bc:	00024e65 	.word	0x00024e65
   250c0:	00060001 	.word	0x00060001
   250c4:	41004000 	.word	0x41004000
   250c8:	00024f41 	.word	0x00024f41
   250cc:	00024ec5 	.word	0x00024ec5
   250d0:	0002291d 	.word	0x0002291d
   250d4:	00010151 	.word	0x00010151
   250d8:	0001880d 	.word	0x0001880d
   250dc:	00017f29 	.word	0x00017f29
   250e0:	0001c245 	.word	0x0001c245
   250e4:	00025139 	.word	0x00025139
   250e8:	0001fba9 	.word	0x0001fba9
   250ec:	0002007d 	.word	0x0002007d

000250f0 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   250f0:	b580      	push	{r7, lr}
   250f2:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   250f4:	4b0d      	ldr	r3, [pc, #52]	; (2512c <checkSleepElligible+0x3c>)
   250f6:	4798      	blx	r3
   250f8:	0003      	movs	r3, r0
   250fa:	001a      	movs	r2, r3
   250fc:	2301      	movs	r3, #1
   250fe:	4053      	eors	r3, r2
   25100:	b2db      	uxtb	r3, r3
   25102:	2b00      	cmp	r3, #0
   25104:	d009      	beq.n	2511a <checkSleepElligible+0x2a>
   25106:	4b0a      	ldr	r3, [pc, #40]	; (25130 <checkSleepElligible+0x40>)
   25108:	4798      	blx	r3
   2510a:	1e03      	subs	r3, r0, #0
   2510c:	d005      	beq.n	2511a <checkSleepElligible+0x2a>
   2510e:	4b09      	ldr	r3, [pc, #36]	; (25134 <checkSleepElligible+0x44>)
   25110:	4798      	blx	r3
   25112:	1e03      	subs	r3, r0, #0
   25114:	d001      	beq.n	2511a <checkSleepElligible+0x2a>
   25116:	2301      	movs	r3, #1
   25118:	e000      	b.n	2511c <checkSleepElligible+0x2c>
   2511a:	2300      	movs	r3, #0
   2511c:	1c1a      	adds	r2, r3, #0
   2511e:	2301      	movs	r3, #1
   25120:	4013      	ands	r3, r2
   25122:	b2db      	uxtb	r3, r3
}
   25124:	0018      	movs	r0, r3
   25126:	46bd      	mov	sp, r7
   25128:	bd80      	pop	{r7, pc}
   2512a:	46c0      	nop			; (mov r8, r8)
   2512c:	0001aa59 	.word	0x0001aa59
   25130:	0001c569 	.word	0x0001c569
   25134:	00017ff1 	.word	0x00017ff1

00025138 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   25138:	b580      	push	{r7, lr}
   2513a:	b084      	sub	sp, #16
   2513c:	af00      	add	r7, sp, #0
   2513e:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   25140:	4b34      	ldr	r3, [pc, #208]	; (25214 <vTask_sleep_manager+0xdc>)
   25142:	4798      	blx	r3
   25144:	1e03      	subs	r3, r0, #0
   25146:	d060      	beq.n	2520a <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   25148:	4b33      	ldr	r3, [pc, #204]	; (25218 <vTask_sleep_manager+0xe0>)
   2514a:	781b      	ldrb	r3, [r3, #0]
   2514c:	2201      	movs	r2, #1
   2514e:	4053      	eors	r3, r2
   25150:	b2db      	uxtb	r3, r3
   25152:	2b00      	cmp	r3, #0
   25154:	d008      	beq.n	25168 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   25156:	4b31      	ldr	r3, [pc, #196]	; (2521c <vTask_sleep_manager+0xe4>)
   25158:	4798      	blx	r3
   2515a:	0002      	movs	r2, r0
   2515c:	4b30      	ldr	r3, [pc, #192]	; (25220 <vTask_sleep_manager+0xe8>)
   2515e:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   25160:	4b2d      	ldr	r3, [pc, #180]	; (25218 <vTask_sleep_manager+0xe0>)
   25162:	2201      	movs	r2, #1
   25164:	701a      	strb	r2, [r3, #0]
   25166:	e7eb      	b.n	25140 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   25168:	4b2b      	ldr	r3, [pc, #172]	; (25218 <vTask_sleep_manager+0xe0>)
   2516a:	781b      	ldrb	r3, [r3, #0]
   2516c:	2b00      	cmp	r3, #0
   2516e:	d0e7      	beq.n	25140 <vTask_sleep_manager+0x8>
   25170:	4b2a      	ldr	r3, [pc, #168]	; (2521c <vTask_sleep_manager+0xe4>)
   25172:	4798      	blx	r3
   25174:	0002      	movs	r2, r0
   25176:	4b2a      	ldr	r3, [pc, #168]	; (25220 <vTask_sleep_manager+0xe8>)
   25178:	681b      	ldr	r3, [r3, #0]
   2517a:	1ad3      	subs	r3, r2, r3
   2517c:	4a29      	ldr	r2, [pc, #164]	; (25224 <vTask_sleep_manager+0xec>)
   2517e:	4293      	cmp	r3, r2
   25180:	d9de      	bls.n	25140 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   25182:	230f      	movs	r3, #15
   25184:	18fb      	adds	r3, r7, r3
   25186:	220a      	movs	r2, #10
   25188:	701a      	strb	r2, [r3, #0]
				bool led=false;
   2518a:	230e      	movs	r3, #14
   2518c:	18fb      	adds	r3, r7, r3
   2518e:	2200      	movs	r2, #0
   25190:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   25192:	230e      	movs	r3, #14
   25194:	18fb      	adds	r3, r7, r3
   25196:	781b      	ldrb	r3, [r3, #0]
   25198:	1e5a      	subs	r2, r3, #1
   2519a:	4193      	sbcs	r3, r2
   2519c:	b2db      	uxtb	r3, r3
   2519e:	2201      	movs	r2, #1
   251a0:	4053      	eors	r3, r2
   251a2:	b2db      	uxtb	r3, r3
   251a4:	001a      	movs	r2, r3
   251a6:	230e      	movs	r3, #14
   251a8:	18fb      	adds	r3, r7, r3
   251aa:	701a      	strb	r2, [r3, #0]
   251ac:	781a      	ldrb	r2, [r3, #0]
   251ae:	2101      	movs	r1, #1
   251b0:	400a      	ands	r2, r1
   251b2:	701a      	strb	r2, [r3, #0]
					if(led)
   251b4:	230e      	movs	r3, #14
   251b6:	18fb      	adds	r3, r7, r3
   251b8:	781b      	ldrb	r3, [r3, #0]
   251ba:	2b00      	cmp	r3, #0
   251bc:	d004      	beq.n	251c8 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   251be:	2100      	movs	r1, #0
   251c0:	2027      	movs	r0, #39	; 0x27
   251c2:	4b19      	ldr	r3, [pc, #100]	; (25228 <vTask_sleep_manager+0xf0>)
   251c4:	4798      	blx	r3
   251c6:	e003      	b.n	251d0 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   251c8:	2101      	movs	r1, #1
   251ca:	2027      	movs	r0, #39	; 0x27
   251cc:	4b16      	ldr	r3, [pc, #88]	; (25228 <vTask_sleep_manager+0xf0>)
   251ce:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   251d0:	4b12      	ldr	r3, [pc, #72]	; (2521c <vTask_sleep_manager+0xe4>)
   251d2:	4798      	blx	r3
   251d4:	0002      	movs	r2, r0
   251d6:	4b12      	ldr	r3, [pc, #72]	; (25220 <vTask_sleep_manager+0xe8>)
   251d8:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   251da:	46c0      	nop			; (mov r8, r8)
   251dc:	4b0f      	ldr	r3, [pc, #60]	; (2521c <vTask_sleep_manager+0xe4>)
   251de:	4798      	blx	r3
   251e0:	0002      	movs	r2, r0
   251e2:	4b0f      	ldr	r3, [pc, #60]	; (25220 <vTask_sleep_manager+0xe8>)
   251e4:	681b      	ldr	r3, [r3, #0]
   251e6:	1ad3      	subs	r3, r2, r3
   251e8:	2bc7      	cmp	r3, #199	; 0xc7
   251ea:	d9f7      	bls.n	251dc <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   251ec:	230f      	movs	r3, #15
   251ee:	18fb      	adds	r3, r7, r3
   251f0:	220f      	movs	r2, #15
   251f2:	18ba      	adds	r2, r7, r2
   251f4:	7812      	ldrb	r2, [r2, #0]
   251f6:	3a01      	subs	r2, #1
   251f8:	701a      	strb	r2, [r3, #0]
   251fa:	230f      	movs	r3, #15
   251fc:	18fb      	adds	r3, r7, r3
   251fe:	781b      	ldrb	r3, [r3, #0]
   25200:	2b00      	cmp	r3, #0
   25202:	d1c6      	bne.n	25192 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   25204:	4b09      	ldr	r3, [pc, #36]	; (2522c <vTask_sleep_manager+0xf4>)
   25206:	4798      	blx	r3
   25208:	e79a      	b.n	25140 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   2520a:	4b03      	ldr	r3, [pc, #12]	; (25218 <vTask_sleep_manager+0xe0>)
   2520c:	2200      	movs	r2, #0
   2520e:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   25210:	e796      	b.n	25140 <vTask_sleep_manager+0x8>
   25212:	46c0      	nop			; (mov r8, r8)
   25214:	000250f1 	.word	0x000250f1
   25218:	2000050c 	.word	0x2000050c
   2521c:	0002024d 	.word	0x0002024d
   25220:	20000510 	.word	0x20000510
   25224:	00004650 	.word	0x00004650
   25228:	00024ffd 	.word	0x00024ffd
   2522c:	00025231 	.word	0x00025231

00025230 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   25230:	b580      	push	{r7, lr}
   25232:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   25234:	4b07      	ldr	r3, [pc, #28]	; (25254 <gotoSleep+0x24>)
   25236:	4798      	blx	r3
	
	lcd_in_sleep = true;
   25238:	4b07      	ldr	r3, [pc, #28]	; (25258 <gotoSleep+0x28>)
   2523a:	2201      	movs	r2, #1
   2523c:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   2523e:	4b07      	ldr	r3, [pc, #28]	; (2525c <gotoSleep+0x2c>)
   25240:	2201      	movs	r2, #1
   25242:	701a      	strb	r2, [r3, #0]
	system_sleep();
   25244:	4b06      	ldr	r3, [pc, #24]	; (25260 <gotoSleep+0x30>)
   25246:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   25248:	4b06      	ldr	r3, [pc, #24]	; (25264 <gotoSleep+0x34>)
   2524a:	2201      	movs	r2, #1
   2524c:	701a      	strb	r2, [r3, #0]
   2524e:	46c0      	nop			; (mov r8, r8)
   25250:	46bd      	mov	sp, r7
   25252:	bd80      	pop	{r7, pc}
   25254:	00013af9 	.word	0x00013af9
   25258:	2000085f 	.word	0x2000085f
   2525c:	20000860 	.word	0x20000860
   25260:	00024fc9 	.word	0x00024fc9
   25264:	2000083c 	.word	0x2000083c

00025268 <pow>:
   25268:	b5f0      	push	{r4, r5, r6, r7, lr}
   2526a:	4657      	mov	r7, sl
   2526c:	464e      	mov	r6, r9
   2526e:	46de      	mov	lr, fp
   25270:	4645      	mov	r5, r8
   25272:	b5e0      	push	{r5, r6, r7, lr}
   25274:	b08f      	sub	sp, #60	; 0x3c
   25276:	001d      	movs	r5, r3
   25278:	0006      	movs	r6, r0
   2527a:	000f      	movs	r7, r1
   2527c:	0014      	movs	r4, r2
   2527e:	f000 f9ff 	bl	25680 <__ieee754_pow>
   25282:	4bc7      	ldr	r3, [pc, #796]	; (255a0 <pow+0x338>)
   25284:	9000      	str	r0, [sp, #0]
   25286:	9101      	str	r1, [sp, #4]
   25288:	469a      	mov	sl, r3
   2528a:	781b      	ldrb	r3, [r3, #0]
   2528c:	b25b      	sxtb	r3, r3
   2528e:	4699      	mov	r9, r3
   25290:	3301      	adds	r3, #1
   25292:	d03e      	beq.n	25312 <pow+0xaa>
   25294:	0022      	movs	r2, r4
   25296:	002b      	movs	r3, r5
   25298:	0020      	movs	r0, r4
   2529a:	0029      	movs	r1, r5
   2529c:	f003 fbe2 	bl	28a64 <__aeabi_dcmpun>
   252a0:	4683      	mov	fp, r0
   252a2:	2800      	cmp	r0, #0
   252a4:	d135      	bne.n	25312 <pow+0xaa>
   252a6:	0032      	movs	r2, r6
   252a8:	003b      	movs	r3, r7
   252aa:	0030      	movs	r0, r6
   252ac:	0039      	movs	r1, r7
   252ae:	f003 fbd9 	bl	28a64 <__aeabi_dcmpun>
   252b2:	2200      	movs	r2, #0
   252b4:	9003      	str	r0, [sp, #12]
   252b6:	2800      	cmp	r0, #0
   252b8:	d000      	beq.n	252bc <pow+0x54>
   252ba:	e0b6      	b.n	2542a <pow+0x1c2>
   252bc:	2300      	movs	r3, #0
   252be:	0030      	movs	r0, r6
   252c0:	0039      	movs	r1, r7
   252c2:	f001 faa1 	bl	26808 <__aeabi_dcmpeq>
   252c6:	2800      	cmp	r0, #0
   252c8:	d02c      	beq.n	25324 <pow+0xbc>
   252ca:	2200      	movs	r2, #0
   252cc:	2300      	movs	r3, #0
   252ce:	0020      	movs	r0, r4
   252d0:	0029      	movs	r1, r5
   252d2:	f001 fa99 	bl	26808 <__aeabi_dcmpeq>
   252d6:	4683      	mov	fp, r0
   252d8:	2800      	cmp	r0, #0
   252da:	d100      	bne.n	252de <pow+0x76>
   252dc:	e077      	b.n	253ce <pow+0x166>
   252de:	ab04      	add	r3, sp, #16
   252e0:	4698      	mov	r8, r3
   252e2:	2301      	movs	r3, #1
   252e4:	4642      	mov	r2, r8
   252e6:	9304      	str	r3, [sp, #16]
   252e8:	4bae      	ldr	r3, [pc, #696]	; (255a4 <pow+0x33c>)
   252ea:	6053      	str	r3, [r2, #4]
   252ec:	4643      	mov	r3, r8
   252ee:	9a03      	ldr	r2, [sp, #12]
   252f0:	611c      	str	r4, [r3, #16]
   252f2:	615d      	str	r5, [r3, #20]
   252f4:	621a      	str	r2, [r3, #32]
   252f6:	609e      	str	r6, [r3, #8]
   252f8:	60df      	str	r7, [r3, #12]
   252fa:	4642      	mov	r2, r8
   252fc:	2300      	movs	r3, #0
   252fe:	2400      	movs	r4, #0
   25300:	6193      	str	r3, [r2, #24]
   25302:	61d4      	str	r4, [r2, #28]
   25304:	464b      	mov	r3, r9
   25306:	2b00      	cmp	r3, #0
   25308:	d04d      	beq.n	253a6 <pow+0x13e>
   2530a:	2300      	movs	r3, #0
   2530c:	4ca6      	ldr	r4, [pc, #664]	; (255a8 <pow+0x340>)
   2530e:	9300      	str	r3, [sp, #0]
   25310:	9401      	str	r4, [sp, #4]
   25312:	9800      	ldr	r0, [sp, #0]
   25314:	9901      	ldr	r1, [sp, #4]
   25316:	b00f      	add	sp, #60	; 0x3c
   25318:	bc3c      	pop	{r2, r3, r4, r5}
   2531a:	4690      	mov	r8, r2
   2531c:	4699      	mov	r9, r3
   2531e:	46a2      	mov	sl, r4
   25320:	46ab      	mov	fp, r5
   25322:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25324:	9800      	ldr	r0, [sp, #0]
   25326:	9901      	ldr	r1, [sp, #4]
   25328:	f000 ffc4 	bl	262b4 <finite>
   2532c:	4681      	mov	r9, r0
   2532e:	2800      	cmp	r0, #0
   25330:	d100      	bne.n	25334 <pow+0xcc>
   25332:	e09b      	b.n	2546c <pow+0x204>
   25334:	9800      	ldr	r0, [sp, #0]
   25336:	9901      	ldr	r1, [sp, #4]
   25338:	2200      	movs	r2, #0
   2533a:	2300      	movs	r3, #0
   2533c:	f001 fa64 	bl	26808 <__aeabi_dcmpeq>
   25340:	2800      	cmp	r0, #0
   25342:	d0e6      	beq.n	25312 <pow+0xaa>
   25344:	0030      	movs	r0, r6
   25346:	0039      	movs	r1, r7
   25348:	f000 ffb4 	bl	262b4 <finite>
   2534c:	2800      	cmp	r0, #0
   2534e:	d0e0      	beq.n	25312 <pow+0xaa>
   25350:	0020      	movs	r0, r4
   25352:	0029      	movs	r1, r5
   25354:	f000 ffae 	bl	262b4 <finite>
   25358:	2800      	cmp	r0, #0
   2535a:	d0da      	beq.n	25312 <pow+0xaa>
   2535c:	ab04      	add	r3, sp, #16
   2535e:	4698      	mov	r8, r3
   25360:	2304      	movs	r3, #4
   25362:	4642      	mov	r2, r8
   25364:	9304      	str	r3, [sp, #16]
   25366:	4b8f      	ldr	r3, [pc, #572]	; (255a4 <pow+0x33c>)
   25368:	6114      	str	r4, [r2, #16]
   2536a:	6155      	str	r5, [r2, #20]
   2536c:	6053      	str	r3, [r2, #4]
   2536e:	2300      	movs	r3, #0
   25370:	2400      	movs	r4, #0
   25372:	6213      	str	r3, [r2, #32]
   25374:	2300      	movs	r3, #0
   25376:	6193      	str	r3, [r2, #24]
   25378:	61d4      	str	r4, [r2, #28]
   2537a:	4653      	mov	r3, sl
   2537c:	781b      	ldrb	r3, [r3, #0]
   2537e:	6096      	str	r6, [r2, #8]
   25380:	60d7      	str	r7, [r2, #12]
   25382:	b25b      	sxtb	r3, r3
   25384:	2b02      	cmp	r3, #2
   25386:	d004      	beq.n	25392 <pow+0x12a>
   25388:	4640      	mov	r0, r8
   2538a:	f000 ff9d 	bl	262c8 <matherr>
   2538e:	2800      	cmp	r0, #0
   25390:	d10e      	bne.n	253b0 <pow+0x148>
   25392:	f003 fcc1 	bl	28d18 <__errno>
   25396:	2322      	movs	r3, #34	; 0x22
   25398:	6003      	str	r3, [r0, #0]
   2539a:	e009      	b.n	253b0 <pow+0x148>
   2539c:	4642      	mov	r2, r8
   2539e:	2300      	movs	r3, #0
   253a0:	2400      	movs	r4, #0
   253a2:	6193      	str	r3, [r2, #24]
   253a4:	61d4      	str	r4, [r2, #28]
   253a6:	4640      	mov	r0, r8
   253a8:	f000 ff8e 	bl	262c8 <matherr>
   253ac:	2800      	cmp	r0, #0
   253ae:	d037      	beq.n	25420 <pow+0x1b8>
   253b0:	4643      	mov	r3, r8
   253b2:	6a1b      	ldr	r3, [r3, #32]
   253b4:	2b00      	cmp	r3, #0
   253b6:	d004      	beq.n	253c2 <pow+0x15a>
   253b8:	f003 fcae 	bl	28d18 <__errno>
   253bc:	4643      	mov	r3, r8
   253be:	6a1b      	ldr	r3, [r3, #32]
   253c0:	6003      	str	r3, [r0, #0]
   253c2:	4643      	mov	r3, r8
   253c4:	69dc      	ldr	r4, [r3, #28]
   253c6:	699b      	ldr	r3, [r3, #24]
   253c8:	9300      	str	r3, [sp, #0]
   253ca:	9401      	str	r4, [sp, #4]
   253cc:	e7a1      	b.n	25312 <pow+0xaa>
   253ce:	0020      	movs	r0, r4
   253d0:	0029      	movs	r1, r5
   253d2:	f000 ff6f 	bl	262b4 <finite>
   253d6:	2800      	cmp	r0, #0
   253d8:	d09b      	beq.n	25312 <pow+0xaa>
   253da:	2200      	movs	r2, #0
   253dc:	2300      	movs	r3, #0
   253de:	0020      	movs	r0, r4
   253e0:	0029      	movs	r1, r5
   253e2:	f001 fa17 	bl	26814 <__aeabi_dcmplt>
   253e6:	2800      	cmp	r0, #0
   253e8:	d100      	bne.n	253ec <pow+0x184>
   253ea:	e792      	b.n	25312 <pow+0xaa>
   253ec:	ab04      	add	r3, sp, #16
   253ee:	4698      	mov	r8, r3
   253f0:	2301      	movs	r3, #1
   253f2:	4642      	mov	r2, r8
   253f4:	9304      	str	r3, [sp, #16]
   253f6:	4b6b      	ldr	r3, [pc, #428]	; (255a4 <pow+0x33c>)
   253f8:	6053      	str	r3, [r2, #4]
   253fa:	4643      	mov	r3, r8
   253fc:	465a      	mov	r2, fp
   253fe:	609e      	str	r6, [r3, #8]
   25400:	60df      	str	r7, [r3, #12]
   25402:	621a      	str	r2, [r3, #32]
   25404:	611c      	str	r4, [r3, #16]
   25406:	615d      	str	r5, [r3, #20]
   25408:	4653      	mov	r3, sl
   2540a:	781b      	ldrb	r3, [r3, #0]
   2540c:	b25b      	sxtb	r3, r3
   2540e:	2b00      	cmp	r3, #0
   25410:	d0c4      	beq.n	2539c <pow+0x134>
   25412:	2000      	movs	r0, #0
   25414:	4642      	mov	r2, r8
   25416:	4965      	ldr	r1, [pc, #404]	; (255ac <pow+0x344>)
   25418:	6190      	str	r0, [r2, #24]
   2541a:	61d1      	str	r1, [r2, #28]
   2541c:	2b02      	cmp	r3, #2
   2541e:	d1c2      	bne.n	253a6 <pow+0x13e>
   25420:	f003 fc7a 	bl	28d18 <__errno>
   25424:	2321      	movs	r3, #33	; 0x21
   25426:	6003      	str	r3, [r0, #0]
   25428:	e7c2      	b.n	253b0 <pow+0x148>
   2542a:	2300      	movs	r3, #0
   2542c:	0020      	movs	r0, r4
   2542e:	0029      	movs	r1, r5
   25430:	f001 f9ea 	bl	26808 <__aeabi_dcmpeq>
   25434:	2800      	cmp	r0, #0
   25436:	d100      	bne.n	2543a <pow+0x1d2>
   25438:	e76b      	b.n	25312 <pow+0xaa>
   2543a:	ab04      	add	r3, sp, #16
   2543c:	4698      	mov	r8, r3
   2543e:	2301      	movs	r3, #1
   25440:	4642      	mov	r2, r8
   25442:	9304      	str	r3, [sp, #16]
   25444:	4b57      	ldr	r3, [pc, #348]	; (255a4 <pow+0x33c>)
   25446:	4641      	mov	r1, r8
   25448:	6053      	str	r3, [r2, #4]
   2544a:	4643      	mov	r3, r8
   2544c:	465a      	mov	r2, fp
   2544e:	621a      	str	r2, [r3, #32]
   25450:	2200      	movs	r2, #0
   25452:	609e      	str	r6, [r3, #8]
   25454:	60df      	str	r7, [r3, #12]
   25456:	611c      	str	r4, [r3, #16]
   25458:	615d      	str	r5, [r3, #20]
   2545a:	4b53      	ldr	r3, [pc, #332]	; (255a8 <pow+0x340>)
   2545c:	618a      	str	r2, [r1, #24]
   2545e:	61cb      	str	r3, [r1, #28]
   25460:	9200      	str	r2, [sp, #0]
   25462:	9301      	str	r3, [sp, #4]
   25464:	464b      	mov	r3, r9
   25466:	2b02      	cmp	r3, #2
   25468:	d19d      	bne.n	253a6 <pow+0x13e>
   2546a:	e752      	b.n	25312 <pow+0xaa>
   2546c:	0030      	movs	r0, r6
   2546e:	0039      	movs	r1, r7
   25470:	f000 ff20 	bl	262b4 <finite>
   25474:	2800      	cmp	r0, #0
   25476:	d100      	bne.n	2547a <pow+0x212>
   25478:	e75c      	b.n	25334 <pow+0xcc>
   2547a:	0020      	movs	r0, r4
   2547c:	0029      	movs	r1, r5
   2547e:	f000 ff19 	bl	262b4 <finite>
   25482:	2800      	cmp	r0, #0
   25484:	d100      	bne.n	25488 <pow+0x220>
   25486:	e755      	b.n	25334 <pow+0xcc>
   25488:	9800      	ldr	r0, [sp, #0]
   2548a:	9901      	ldr	r1, [sp, #4]
   2548c:	000b      	movs	r3, r1
   2548e:	0002      	movs	r2, r0
   25490:	f003 fae8 	bl	28a64 <__aeabi_dcmpun>
   25494:	ab04      	add	r3, sp, #16
   25496:	4698      	mov	r8, r3
   25498:	2800      	cmp	r0, #0
   2549a:	d161      	bne.n	25560 <pow+0x2f8>
   2549c:	2303      	movs	r3, #3
   2549e:	4642      	mov	r2, r8
   254a0:	9304      	str	r3, [sp, #16]
   254a2:	4b40      	ldr	r3, [pc, #256]	; (255a4 <pow+0x33c>)
   254a4:	6210      	str	r0, [r2, #32]
   254a6:	6053      	str	r3, [r2, #4]
   254a8:	4653      	mov	r3, sl
   254aa:	781b      	ldrb	r3, [r3, #0]
   254ac:	6096      	str	r6, [r2, #8]
   254ae:	60d7      	str	r7, [r2, #12]
   254b0:	b25b      	sxtb	r3, r3
   254b2:	6114      	str	r4, [r2, #16]
   254b4:	6155      	str	r5, [r2, #20]
   254b6:	4699      	mov	r9, r3
   254b8:	2b00      	cmp	r3, #0
   254ba:	d12f      	bne.n	2551c <pow+0x2b4>
   254bc:	22e0      	movs	r2, #224	; 0xe0
   254be:	4641      	mov	r1, r8
   254c0:	4b3b      	ldr	r3, [pc, #236]	; (255b0 <pow+0x348>)
   254c2:	0612      	lsls	r2, r2, #24
   254c4:	618a      	str	r2, [r1, #24]
   254c6:	61cb      	str	r3, [r1, #28]
   254c8:	0030      	movs	r0, r6
   254ca:	2200      	movs	r2, #0
   254cc:	2300      	movs	r3, #0
   254ce:	0039      	movs	r1, r7
   254d0:	f001 f9a0 	bl	26814 <__aeabi_dcmplt>
   254d4:	2800      	cmp	r0, #0
   254d6:	d100      	bne.n	254da <pow+0x272>
   254d8:	e756      	b.n	25388 <pow+0x120>
   254da:	2200      	movs	r2, #0
   254dc:	4b35      	ldr	r3, [pc, #212]	; (255b4 <pow+0x34c>)
   254de:	0020      	movs	r0, r4
   254e0:	0029      	movs	r1, r5
   254e2:	f002 fd29 	bl	27f38 <__aeabi_dmul>
   254e6:	0004      	movs	r4, r0
   254e8:	000d      	movs	r5, r1
   254ea:	f000 fef5 	bl	262d8 <rint>
   254ee:	0002      	movs	r2, r0
   254f0:	000b      	movs	r3, r1
   254f2:	0020      	movs	r0, r4
   254f4:	0029      	movs	r1, r5
   254f6:	f001 f987 	bl	26808 <__aeabi_dcmpeq>
   254fa:	2800      	cmp	r0, #0
   254fc:	d105      	bne.n	2550a <pow+0x2a2>
   254fe:	22e0      	movs	r2, #224	; 0xe0
   25500:	4b2d      	ldr	r3, [pc, #180]	; (255b8 <pow+0x350>)
   25502:	0612      	lsls	r2, r2, #24
   25504:	4641      	mov	r1, r8
   25506:	618a      	str	r2, [r1, #24]
   25508:	61cb      	str	r3, [r1, #28]
   2550a:	4653      	mov	r3, sl
   2550c:	781b      	ldrb	r3, [r3, #0]
   2550e:	b25b      	sxtb	r3, r3
   25510:	4699      	mov	r9, r3
   25512:	464b      	mov	r3, r9
   25514:	2b02      	cmp	r3, #2
   25516:	d000      	beq.n	2551a <pow+0x2b2>
   25518:	e736      	b.n	25388 <pow+0x120>
   2551a:	e73a      	b.n	25392 <pow+0x12a>
   2551c:	2200      	movs	r2, #0
   2551e:	4641      	mov	r1, r8
   25520:	4b26      	ldr	r3, [pc, #152]	; (255bc <pow+0x354>)
   25522:	0030      	movs	r0, r6
   25524:	618a      	str	r2, [r1, #24]
   25526:	61cb      	str	r3, [r1, #28]
   25528:	2200      	movs	r2, #0
   2552a:	2300      	movs	r3, #0
   2552c:	0039      	movs	r1, r7
   2552e:	f001 f971 	bl	26814 <__aeabi_dcmplt>
   25532:	2800      	cmp	r0, #0
   25534:	d0ed      	beq.n	25512 <pow+0x2aa>
   25536:	2200      	movs	r2, #0
   25538:	4b1e      	ldr	r3, [pc, #120]	; (255b4 <pow+0x34c>)
   2553a:	0020      	movs	r0, r4
   2553c:	0029      	movs	r1, r5
   2553e:	f002 fcfb 	bl	27f38 <__aeabi_dmul>
   25542:	0004      	movs	r4, r0
   25544:	000d      	movs	r5, r1
   25546:	f000 fec7 	bl	262d8 <rint>
   2554a:	0002      	movs	r2, r0
   2554c:	000b      	movs	r3, r1
   2554e:	0020      	movs	r0, r4
   25550:	0029      	movs	r1, r5
   25552:	f001 f959 	bl	26808 <__aeabi_dcmpeq>
   25556:	2800      	cmp	r0, #0
   25558:	d1d7      	bne.n	2550a <pow+0x2a2>
   2555a:	2200      	movs	r2, #0
   2555c:	4b13      	ldr	r3, [pc, #76]	; (255ac <pow+0x344>)
   2555e:	e7d1      	b.n	25504 <pow+0x29c>
   25560:	2301      	movs	r3, #1
   25562:	4642      	mov	r2, r8
   25564:	9304      	str	r3, [sp, #16]
   25566:	4b0f      	ldr	r3, [pc, #60]	; (255a4 <pow+0x33c>)
   25568:	6053      	str	r3, [r2, #4]
   2556a:	4643      	mov	r3, r8
   2556c:	464a      	mov	r2, r9
   2556e:	611c      	str	r4, [r3, #16]
   25570:	615d      	str	r5, [r3, #20]
   25572:	621a      	str	r2, [r3, #32]
   25574:	609e      	str	r6, [r3, #8]
   25576:	60df      	str	r7, [r3, #12]
   25578:	2400      	movs	r4, #0
   2557a:	4653      	mov	r3, sl
   2557c:	571c      	ldrsb	r4, [r3, r4]
   2557e:	2c00      	cmp	r4, #0
   25580:	d100      	bne.n	25584 <pow+0x31c>
   25582:	e70b      	b.n	2539c <pow+0x134>
   25584:	2300      	movs	r3, #0
   25586:	2200      	movs	r2, #0
   25588:	0019      	movs	r1, r3
   2558a:	0010      	movs	r0, r2
   2558c:	f002 f8a0 	bl	276d0 <__aeabi_ddiv>
   25590:	4643      	mov	r3, r8
   25592:	6198      	str	r0, [r3, #24]
   25594:	61d9      	str	r1, [r3, #28]
   25596:	2c02      	cmp	r4, #2
   25598:	d100      	bne.n	2559c <pow+0x334>
   2559a:	e741      	b.n	25420 <pow+0x1b8>
   2559c:	e703      	b.n	253a6 <pow+0x13e>
   2559e:	46c0      	nop			; (mov r8, r8)
   255a0:	20000029 	.word	0x20000029
   255a4:	0002ac88 	.word	0x0002ac88
   255a8:	3ff00000 	.word	0x3ff00000
   255ac:	fff00000 	.word	0xfff00000
   255b0:	47efffff 	.word	0x47efffff
   255b4:	3fe00000 	.word	0x3fe00000
   255b8:	c7efffff 	.word	0xc7efffff
   255bc:	7ff00000 	.word	0x7ff00000

000255c0 <sqrt>:
   255c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   255c2:	4647      	mov	r7, r8
   255c4:	46ce      	mov	lr, r9
   255c6:	b580      	push	{r7, lr}
   255c8:	b08d      	sub	sp, #52	; 0x34
   255ca:	0004      	movs	r4, r0
   255cc:	000d      	movs	r5, r1
   255ce:	f000 fd8d 	bl	260ec <__ieee754_sqrt>
   255d2:	4b29      	ldr	r3, [pc, #164]	; (25678 <sqrt+0xb8>)
   255d4:	0006      	movs	r6, r0
   255d6:	781b      	ldrb	r3, [r3, #0]
   255d8:	000f      	movs	r7, r1
   255da:	b25b      	sxtb	r3, r3
   255dc:	4698      	mov	r8, r3
   255de:	3301      	adds	r3, #1
   255e0:	d010      	beq.n	25604 <sqrt+0x44>
   255e2:	0022      	movs	r2, r4
   255e4:	002b      	movs	r3, r5
   255e6:	0020      	movs	r0, r4
   255e8:	0029      	movs	r1, r5
   255ea:	f003 fa3b 	bl	28a64 <__aeabi_dcmpun>
   255ee:	4681      	mov	r9, r0
   255f0:	2800      	cmp	r0, #0
   255f2:	d107      	bne.n	25604 <sqrt+0x44>
   255f4:	2200      	movs	r2, #0
   255f6:	2300      	movs	r3, #0
   255f8:	0020      	movs	r0, r4
   255fa:	0029      	movs	r1, r5
   255fc:	f001 f90a 	bl	26814 <__aeabi_dcmplt>
   25600:	2800      	cmp	r0, #0
   25602:	d106      	bne.n	25612 <sqrt+0x52>
   25604:	0030      	movs	r0, r6
   25606:	0039      	movs	r1, r7
   25608:	b00d      	add	sp, #52	; 0x34
   2560a:	bc0c      	pop	{r2, r3}
   2560c:	4690      	mov	r8, r2
   2560e:	4699      	mov	r9, r3
   25610:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25612:	2301      	movs	r3, #1
   25614:	9302      	str	r3, [sp, #8]
   25616:	4b19      	ldr	r3, [pc, #100]	; (2567c <sqrt+0xbc>)
   25618:	9406      	str	r4, [sp, #24]
   2561a:	9507      	str	r5, [sp, #28]
   2561c:	9303      	str	r3, [sp, #12]
   2561e:	464b      	mov	r3, r9
   25620:	930a      	str	r3, [sp, #40]	; 0x28
   25622:	4643      	mov	r3, r8
   25624:	9404      	str	r4, [sp, #16]
   25626:	9505      	str	r5, [sp, #20]
   25628:	2b00      	cmp	r3, #0
   2562a:	d015      	beq.n	25658 <sqrt+0x98>
   2562c:	2300      	movs	r3, #0
   2562e:	2200      	movs	r2, #0
   25630:	0019      	movs	r1, r3
   25632:	0010      	movs	r0, r2
   25634:	f002 f84c 	bl	276d0 <__aeabi_ddiv>
   25638:	4643      	mov	r3, r8
   2563a:	9008      	str	r0, [sp, #32]
   2563c:	9109      	str	r1, [sp, #36]	; 0x24
   2563e:	2b02      	cmp	r3, #2
   25640:	d10e      	bne.n	25660 <sqrt+0xa0>
   25642:	f003 fb69 	bl	28d18 <__errno>
   25646:	2321      	movs	r3, #33	; 0x21
   25648:	6003      	str	r3, [r0, #0]
   2564a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2564c:	9301      	str	r3, [sp, #4]
   2564e:	2b00      	cmp	r3, #0
   25650:	d10c      	bne.n	2566c <sqrt+0xac>
   25652:	9e08      	ldr	r6, [sp, #32]
   25654:	9f09      	ldr	r7, [sp, #36]	; 0x24
   25656:	e7d5      	b.n	25604 <sqrt+0x44>
   25658:	2300      	movs	r3, #0
   2565a:	2400      	movs	r4, #0
   2565c:	9308      	str	r3, [sp, #32]
   2565e:	9409      	str	r4, [sp, #36]	; 0x24
   25660:	a802      	add	r0, sp, #8
   25662:	f000 fe31 	bl	262c8 <matherr>
   25666:	2800      	cmp	r0, #0
   25668:	d1ef      	bne.n	2564a <sqrt+0x8a>
   2566a:	e7ea      	b.n	25642 <sqrt+0x82>
   2566c:	f003 fb54 	bl	28d18 <__errno>
   25670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25672:	9301      	str	r3, [sp, #4]
   25674:	6003      	str	r3, [r0, #0]
   25676:	e7ec      	b.n	25652 <sqrt+0x92>
   25678:	20000029 	.word	0x20000029
   2567c:	0002ac8c 	.word	0x0002ac8c

00025680 <__ieee754_pow>:
   25680:	b5f0      	push	{r4, r5, r6, r7, lr}
   25682:	4657      	mov	r7, sl
   25684:	464e      	mov	r6, r9
   25686:	4645      	mov	r5, r8
   25688:	46de      	mov	lr, fp
   2568a:	001c      	movs	r4, r3
   2568c:	0013      	movs	r3, r2
   2568e:	b5e0      	push	{r5, r6, r7, lr}
   25690:	0065      	lsls	r5, r4, #1
   25692:	b091      	sub	sp, #68	; 0x44
   25694:	086d      	lsrs	r5, r5, #1
   25696:	9300      	str	r3, [sp, #0]
   25698:	9401      	str	r4, [sp, #4]
   2569a:	0007      	movs	r7, r0
   2569c:	000e      	movs	r6, r1
   2569e:	4680      	mov	r8, r0
   256a0:	4689      	mov	r9, r1
   256a2:	46a2      	mov	sl, r4
   256a4:	432b      	orrs	r3, r5
   256a6:	d031      	beq.n	2570c <__ieee754_pow+0x8c>
   256a8:	4b67      	ldr	r3, [pc, #412]	; (25848 <__ieee754_pow+0x1c8>)
   256aa:	0074      	lsls	r4, r6, #1
   256ac:	0864      	lsrs	r4, r4, #1
   256ae:	429c      	cmp	r4, r3
   256b0:	dc27      	bgt.n	25702 <__ieee754_pow+0x82>
   256b2:	d024      	beq.n	256fe <__ieee754_pow+0x7e>
   256b4:	429d      	cmp	r5, r3
   256b6:	dc24      	bgt.n	25702 <__ieee754_pow+0x82>
   256b8:	4b63      	ldr	r3, [pc, #396]	; (25848 <__ieee754_pow+0x1c8>)
   256ba:	429d      	cmp	r5, r3
   256bc:	d100      	bne.n	256c0 <__ieee754_pow+0x40>
   256be:	e081      	b.n	257c4 <__ieee754_pow+0x144>
   256c0:	2300      	movs	r3, #0
   256c2:	469b      	mov	fp, r3
   256c4:	464b      	mov	r3, r9
   256c6:	2b00      	cmp	r3, #0
   256c8:	da00      	bge.n	256cc <__ieee754_pow+0x4c>
   256ca:	e07f      	b.n	257cc <__ieee754_pow+0x14c>
   256cc:	2a00      	cmp	r2, #0
   256ce:	d12c      	bne.n	2572a <__ieee754_pow+0xaa>
   256d0:	4b5d      	ldr	r3, [pc, #372]	; (25848 <__ieee754_pow+0x1c8>)
   256d2:	429d      	cmp	r5, r3
   256d4:	d100      	bne.n	256d8 <__ieee754_pow+0x58>
   256d6:	e097      	b.n	25808 <__ieee754_pow+0x188>
   256d8:	4b5c      	ldr	r3, [pc, #368]	; (2584c <__ieee754_pow+0x1cc>)
   256da:	429d      	cmp	r5, r3
   256dc:	d066      	beq.n	257ac <__ieee754_pow+0x12c>
   256de:	2380      	movs	r3, #128	; 0x80
   256e0:	05db      	lsls	r3, r3, #23
   256e2:	459a      	cmp	sl, r3
   256e4:	d100      	bne.n	256e8 <__ieee754_pow+0x68>
   256e6:	e3b9      	b.n	25e5c <__ieee754_pow+0x7dc>
   256e8:	4b59      	ldr	r3, [pc, #356]	; (25850 <__ieee754_pow+0x1d0>)
   256ea:	459a      	cmp	sl, r3
   256ec:	d11d      	bne.n	2572a <__ieee754_pow+0xaa>
   256ee:	464b      	mov	r3, r9
   256f0:	2b00      	cmp	r3, #0
   256f2:	db1a      	blt.n	2572a <__ieee754_pow+0xaa>
   256f4:	0038      	movs	r0, r7
   256f6:	0031      	movs	r1, r6
   256f8:	f000 fcf8 	bl	260ec <__ieee754_sqrt>
   256fc:	e008      	b.n	25710 <__ieee754_pow+0x90>
   256fe:	2800      	cmp	r0, #0
   25700:	d00d      	beq.n	2571e <__ieee754_pow+0x9e>
   25702:	4b54      	ldr	r3, [pc, #336]	; (25854 <__ieee754_pow+0x1d4>)
   25704:	469c      	mov	ip, r3
   25706:	4464      	add	r4, ip
   25708:	4327      	orrs	r7, r4
   2570a:	d10a      	bne.n	25722 <__ieee754_pow+0xa2>
   2570c:	2000      	movs	r0, #0
   2570e:	494f      	ldr	r1, [pc, #316]	; (2584c <__ieee754_pow+0x1cc>)
   25710:	b011      	add	sp, #68	; 0x44
   25712:	bc3c      	pop	{r2, r3, r4, r5}
   25714:	4690      	mov	r8, r2
   25716:	4699      	mov	r9, r3
   25718:	46a2      	mov	sl, r4
   2571a:	46ab      	mov	fp, r5
   2571c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2571e:	42a5      	cmp	r5, r4
   25720:	ddca      	ble.n	256b8 <__ieee754_pow+0x38>
   25722:	484d      	ldr	r0, [pc, #308]	; (25858 <__ieee754_pow+0x1d8>)
   25724:	f000 fdd2 	bl	262cc <nan>
   25728:	e7f2      	b.n	25710 <__ieee754_pow+0x90>
   2572a:	0038      	movs	r0, r7
   2572c:	0031      	movs	r1, r6
   2572e:	f000 fdbd 	bl	262ac <fabs>
   25732:	4643      	mov	r3, r8
   25734:	2b00      	cmp	r3, #0
   25736:	d11d      	bne.n	25774 <__ieee754_pow+0xf4>
   25738:	2c00      	cmp	r4, #0
   2573a:	d004      	beq.n	25746 <__ieee754_pow+0xc6>
   2573c:	4a43      	ldr	r2, [pc, #268]	; (2584c <__ieee754_pow+0x1cc>)
   2573e:	00b3      	lsls	r3, r6, #2
   25740:	089b      	lsrs	r3, r3, #2
   25742:	4293      	cmp	r3, r2
   25744:	d116      	bne.n	25774 <__ieee754_pow+0xf4>
   25746:	4653      	mov	r3, sl
   25748:	2b00      	cmp	r3, #0
   2574a:	da00      	bge.n	2574e <__ieee754_pow+0xce>
   2574c:	e3c5      	b.n	25eda <__ieee754_pow+0x85a>
   2574e:	464b      	mov	r3, r9
   25750:	2b00      	cmp	r3, #0
   25752:	dadd      	bge.n	25710 <__ieee754_pow+0x90>
   25754:	4b3f      	ldr	r3, [pc, #252]	; (25854 <__ieee754_pow+0x1d4>)
   25756:	469c      	mov	ip, r3
   25758:	465b      	mov	r3, fp
   2575a:	4464      	add	r4, ip
   2575c:	431c      	orrs	r4, r3
   2575e:	d101      	bne.n	25764 <__ieee754_pow+0xe4>
   25760:	f000 fc53 	bl	2600a <__ieee754_pow+0x98a>
   25764:	465b      	mov	r3, fp
   25766:	2b01      	cmp	r3, #1
   25768:	d1d2      	bne.n	25710 <__ieee754_pow+0x90>
   2576a:	2480      	movs	r4, #128	; 0x80
   2576c:	0624      	lsls	r4, r4, #24
   2576e:	190b      	adds	r3, r1, r4
   25770:	0019      	movs	r1, r3
   25772:	e7cd      	b.n	25710 <__ieee754_pow+0x90>
   25774:	0ff3      	lsrs	r3, r6, #31
   25776:	3b01      	subs	r3, #1
   25778:	4698      	mov	r8, r3
   2577a:	465b      	mov	r3, fp
   2577c:	4642      	mov	r2, r8
   2577e:	4313      	orrs	r3, r2
   25780:	d057      	beq.n	25832 <__ieee754_pow+0x1b2>
   25782:	4b36      	ldr	r3, [pc, #216]	; (2585c <__ieee754_pow+0x1dc>)
   25784:	429d      	cmp	r5, r3
   25786:	dd77      	ble.n	25878 <__ieee754_pow+0x1f8>
   25788:	4b35      	ldr	r3, [pc, #212]	; (25860 <__ieee754_pow+0x1e0>)
   2578a:	429d      	cmp	r5, r3
   2578c:	dc00      	bgt.n	25790 <__ieee754_pow+0x110>
   2578e:	e3b1      	b.n	25ef4 <__ieee754_pow+0x874>
   25790:	4b34      	ldr	r3, [pc, #208]	; (25864 <__ieee754_pow+0x1e4>)
   25792:	429c      	cmp	r4, r3
   25794:	dc00      	bgt.n	25798 <__ieee754_pow+0x118>
   25796:	e3a8      	b.n	25eea <__ieee754_pow+0x86a>
   25798:	4653      	mov	r3, sl
   2579a:	2b00      	cmp	r3, #0
   2579c:	dd43      	ble.n	25826 <__ieee754_pow+0x1a6>
   2579e:	4a32      	ldr	r2, [pc, #200]	; (25868 <__ieee754_pow+0x1e8>)
   257a0:	4b32      	ldr	r3, [pc, #200]	; (2586c <__ieee754_pow+0x1ec>)
   257a2:	0010      	movs	r0, r2
   257a4:	0019      	movs	r1, r3
   257a6:	f002 fbc7 	bl	27f38 <__aeabi_dmul>
   257aa:	e7b1      	b.n	25710 <__ieee754_pow+0x90>
   257ac:	4653      	mov	r3, sl
   257ae:	0038      	movs	r0, r7
   257b0:	0031      	movs	r1, r6
   257b2:	2b00      	cmp	r3, #0
   257b4:	daac      	bge.n	25710 <__ieee754_pow+0x90>
   257b6:	003a      	movs	r2, r7
   257b8:	0033      	movs	r3, r6
   257ba:	2000      	movs	r0, #0
   257bc:	4923      	ldr	r1, [pc, #140]	; (2584c <__ieee754_pow+0x1cc>)
   257be:	f001 ff87 	bl	276d0 <__aeabi_ddiv>
   257c2:	e7a5      	b.n	25710 <__ieee754_pow+0x90>
   257c4:	2a00      	cmp	r2, #0
   257c6:	d100      	bne.n	257ca <__ieee754_pow+0x14a>
   257c8:	e77a      	b.n	256c0 <__ieee754_pow+0x40>
   257ca:	e79a      	b.n	25702 <__ieee754_pow+0x82>
   257cc:	4b28      	ldr	r3, [pc, #160]	; (25870 <__ieee754_pow+0x1f0>)
   257ce:	429d      	cmp	r5, r3
   257d0:	dc2c      	bgt.n	2582c <__ieee754_pow+0x1ac>
   257d2:	4b24      	ldr	r3, [pc, #144]	; (25864 <__ieee754_pow+0x1e4>)
   257d4:	429d      	cmp	r5, r3
   257d6:	dc00      	bgt.n	257da <__ieee754_pow+0x15a>
   257d8:	e778      	b.n	256cc <__ieee754_pow+0x4c>
   257da:	4926      	ldr	r1, [pc, #152]	; (25874 <__ieee754_pow+0x1f4>)
   257dc:	152b      	asrs	r3, r5, #20
   257de:	468c      	mov	ip, r1
   257e0:	4463      	add	r3, ip
   257e2:	2b14      	cmp	r3, #20
   257e4:	dc01      	bgt.n	257ea <__ieee754_pow+0x16a>
   257e6:	f000 fbf3 	bl	25fd0 <__ieee754_pow+0x950>
   257ea:	2134      	movs	r1, #52	; 0x34
   257ec:	1acb      	subs	r3, r1, r3
   257ee:	9900      	ldr	r1, [sp, #0]
   257f0:	40d9      	lsrs	r1, r3
   257f2:	0008      	movs	r0, r1
   257f4:	4098      	lsls	r0, r3
   257f6:	4282      	cmp	r2, r0
   257f8:	d000      	beq.n	257fc <__ieee754_pow+0x17c>
   257fa:	e767      	b.n	256cc <__ieee754_pow+0x4c>
   257fc:	2301      	movs	r3, #1
   257fe:	4019      	ands	r1, r3
   25800:	3301      	adds	r3, #1
   25802:	1a5b      	subs	r3, r3, r1
   25804:	469b      	mov	fp, r3
   25806:	e761      	b.n	256cc <__ieee754_pow+0x4c>
   25808:	4b12      	ldr	r3, [pc, #72]	; (25854 <__ieee754_pow+0x1d4>)
   2580a:	18e3      	adds	r3, r4, r3
   2580c:	431f      	orrs	r7, r3
   2580e:	d100      	bne.n	25812 <__ieee754_pow+0x192>
   25810:	e77c      	b.n	2570c <__ieee754_pow+0x8c>
   25812:	4b14      	ldr	r3, [pc, #80]	; (25864 <__ieee754_pow+0x1e4>)
   25814:	429c      	cmp	r4, r3
   25816:	dc00      	bgt.n	2581a <__ieee754_pow+0x19a>
   25818:	e327      	b.n	25e6a <__ieee754_pow+0x7ea>
   2581a:	9800      	ldr	r0, [sp, #0]
   2581c:	9901      	ldr	r1, [sp, #4]
   2581e:	4653      	mov	r3, sl
   25820:	2b00      	cmp	r3, #0
   25822:	db00      	blt.n	25826 <__ieee754_pow+0x1a6>
   25824:	e774      	b.n	25710 <__ieee754_pow+0x90>
   25826:	2000      	movs	r0, #0
   25828:	2100      	movs	r1, #0
   2582a:	e771      	b.n	25710 <__ieee754_pow+0x90>
   2582c:	2302      	movs	r3, #2
   2582e:	469b      	mov	fp, r3
   25830:	e74c      	b.n	256cc <__ieee754_pow+0x4c>
   25832:	003a      	movs	r2, r7
   25834:	0033      	movs	r3, r6
   25836:	0038      	movs	r0, r7
   25838:	0031      	movs	r1, r6
   2583a:	f002 fdfd 	bl	28438 <__aeabi_dsub>
   2583e:	0002      	movs	r2, r0
   25840:	000b      	movs	r3, r1
   25842:	f001 ff45 	bl	276d0 <__aeabi_ddiv>
   25846:	e763      	b.n	25710 <__ieee754_pow+0x90>
   25848:	7ff00000 	.word	0x7ff00000
   2584c:	3ff00000 	.word	0x3ff00000
   25850:	3fe00000 	.word	0x3fe00000
   25854:	c0100000 	.word	0xc0100000
   25858:	0002ac90 	.word	0x0002ac90
   2585c:	41e00000 	.word	0x41e00000
   25860:	43f00000 	.word	0x43f00000
   25864:	3fefffff 	.word	0x3fefffff
   25868:	8800759c 	.word	0x8800759c
   2586c:	7e37e43c 	.word	0x7e37e43c
   25870:	433fffff 	.word	0x433fffff
   25874:	fffffc01 	.word	0xfffffc01
   25878:	4be9      	ldr	r3, [pc, #932]	; (25c20 <__ieee754_pow+0x5a0>)
   2587a:	2200      	movs	r2, #0
   2587c:	429c      	cmp	r4, r3
   2587e:	dc06      	bgt.n	2588e <__ieee754_pow+0x20e>
   25880:	2200      	movs	r2, #0
   25882:	4be8      	ldr	r3, [pc, #928]	; (25c24 <__ieee754_pow+0x5a4>)
   25884:	f002 fb58 	bl	27f38 <__aeabi_dmul>
   25888:	2235      	movs	r2, #53	; 0x35
   2588a:	000c      	movs	r4, r1
   2588c:	4252      	negs	r2, r2
   2588e:	4de6      	ldr	r5, [pc, #920]	; (25c28 <__ieee754_pow+0x5a8>)
   25890:	1523      	asrs	r3, r4, #20
   25892:	46ac      	mov	ip, r5
   25894:	4463      	add	r3, ip
   25896:	4699      	mov	r9, r3
   25898:	0324      	lsls	r4, r4, #12
   2589a:	4de4      	ldr	r5, [pc, #912]	; (25c2c <__ieee754_pow+0x5ac>)
   2589c:	4be4      	ldr	r3, [pc, #912]	; (25c30 <__ieee754_pow+0x5b0>)
   2589e:	0b24      	lsrs	r4, r4, #12
   258a0:	4491      	add	r9, r2
   258a2:	4325      	orrs	r5, r4
   258a4:	429c      	cmp	r4, r3
   258a6:	dd09      	ble.n	258bc <__ieee754_pow+0x23c>
   258a8:	4be2      	ldr	r3, [pc, #904]	; (25c34 <__ieee754_pow+0x5b4>)
   258aa:	429c      	cmp	r4, r3
   258ac:	dc00      	bgt.n	258b0 <__ieee754_pow+0x230>
   258ae:	e3b6      	b.n	2601e <__ieee754_pow+0x99e>
   258b0:	2301      	movs	r3, #1
   258b2:	469c      	mov	ip, r3
   258b4:	4be0      	ldr	r3, [pc, #896]	; (25c38 <__ieee754_pow+0x5b8>)
   258b6:	44e1      	add	r9, ip
   258b8:	469c      	mov	ip, r3
   258ba:	4465      	add	r5, ip
   258bc:	2300      	movs	r3, #0
   258be:	2400      	movs	r4, #0
   258c0:	2200      	movs	r2, #0
   258c2:	9308      	str	r3, [sp, #32]
   258c4:	9409      	str	r4, [sp, #36]	; 0x24
   258c6:	930c      	str	r3, [sp, #48]	; 0x30
   258c8:	940d      	str	r4, [sp, #52]	; 0x34
   258ca:	2400      	movs	r4, #0
   258cc:	4bd7      	ldr	r3, [pc, #860]	; (25c2c <__ieee754_pow+0x5ac>)
   258ce:	9206      	str	r2, [sp, #24]
   258d0:	9307      	str	r3, [sp, #28]
   258d2:	9a06      	ldr	r2, [sp, #24]
   258d4:	9b07      	ldr	r3, [sp, #28]
   258d6:	0029      	movs	r1, r5
   258d8:	900a      	str	r0, [sp, #40]	; 0x28
   258da:	910b      	str	r1, [sp, #44]	; 0x2c
   258dc:	f002 fdac 	bl	28438 <__aeabi_dsub>
   258e0:	9a06      	ldr	r2, [sp, #24]
   258e2:	9b07      	ldr	r3, [sp, #28]
   258e4:	0006      	movs	r6, r0
   258e6:	000f      	movs	r7, r1
   258e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   258ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   258ec:	f001 fbe0 	bl	270b0 <__aeabi_dadd>
   258f0:	0002      	movs	r2, r0
   258f2:	000b      	movs	r3, r1
   258f4:	2000      	movs	r0, #0
   258f6:	49cd      	ldr	r1, [pc, #820]	; (25c2c <__ieee754_pow+0x5ac>)
   258f8:	f001 feea 	bl	276d0 <__aeabi_ddiv>
   258fc:	000a      	movs	r2, r1
   258fe:	0001      	movs	r1, r0
   25900:	0013      	movs	r3, r2
   25902:	910e      	str	r1, [sp, #56]	; 0x38
   25904:	920f      	str	r2, [sp, #60]	; 0x3c
   25906:	0002      	movs	r2, r0
   25908:	0039      	movs	r1, r7
   2590a:	0030      	movs	r0, r6
   2590c:	f002 fb14 	bl	27f38 <__aeabi_dmul>
   25910:	000a      	movs	r2, r1
   25912:	0001      	movs	r1, r0
   25914:	2080      	movs	r0, #128	; 0x80
   25916:	9104      	str	r1, [sp, #16]
   25918:	9205      	str	r2, [sp, #20]
   2591a:	0013      	movs	r3, r2
   2591c:	2200      	movs	r2, #0
   2591e:	1069      	asrs	r1, r5, #1
   25920:	2580      	movs	r5, #128	; 0x80
   25922:	0300      	lsls	r0, r0, #12
   25924:	4684      	mov	ip, r0
   25926:	9202      	str	r2, [sp, #8]
   25928:	9303      	str	r3, [sp, #12]
   2592a:	2200      	movs	r2, #0
   2592c:	05ad      	lsls	r5, r5, #22
   2592e:	430d      	orrs	r5, r1
   25930:	4465      	add	r5, ip
   25932:	192b      	adds	r3, r5, r4
   25934:	9802      	ldr	r0, [sp, #8]
   25936:	9903      	ldr	r1, [sp, #12]
   25938:	0014      	movs	r4, r2
   2593a:	001d      	movs	r5, r3
   2593c:	f002 fafc 	bl	27f38 <__aeabi_dmul>
   25940:	0002      	movs	r2, r0
   25942:	000b      	movs	r3, r1
   25944:	0030      	movs	r0, r6
   25946:	0039      	movs	r1, r7
   25948:	f002 fd76 	bl	28438 <__aeabi_dsub>
   2594c:	9a06      	ldr	r2, [sp, #24]
   2594e:	9b07      	ldr	r3, [sp, #28]
   25950:	0006      	movs	r6, r0
   25952:	000f      	movs	r7, r1
   25954:	0020      	movs	r0, r4
   25956:	0029      	movs	r1, r5
   25958:	f002 fd6e 	bl	28438 <__aeabi_dsub>
   2595c:	0002      	movs	r2, r0
   2595e:	000b      	movs	r3, r1
   25960:	980a      	ldr	r0, [sp, #40]	; 0x28
   25962:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25964:	f002 fd68 	bl	28438 <__aeabi_dsub>
   25968:	9a02      	ldr	r2, [sp, #8]
   2596a:	9b03      	ldr	r3, [sp, #12]
   2596c:	f002 fae4 	bl	27f38 <__aeabi_dmul>
   25970:	0002      	movs	r2, r0
   25972:	000b      	movs	r3, r1
   25974:	0030      	movs	r0, r6
   25976:	0039      	movs	r1, r7
   25978:	f002 fd5e 	bl	28438 <__aeabi_dsub>
   2597c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2597e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25980:	f002 fada 	bl	27f38 <__aeabi_dmul>
   25984:	9d04      	ldr	r5, [sp, #16]
   25986:	9e05      	ldr	r6, [sp, #20]
   25988:	9006      	str	r0, [sp, #24]
   2598a:	9107      	str	r1, [sp, #28]
   2598c:	002a      	movs	r2, r5
   2598e:	0033      	movs	r3, r6
   25990:	0028      	movs	r0, r5
   25992:	0031      	movs	r1, r6
   25994:	f002 fad0 	bl	27f38 <__aeabi_dmul>
   25998:	0006      	movs	r6, r0
   2599a:	000f      	movs	r7, r1
   2599c:	4aa7      	ldr	r2, [pc, #668]	; (25c3c <__ieee754_pow+0x5bc>)
   2599e:	4ba8      	ldr	r3, [pc, #672]	; (25c40 <__ieee754_pow+0x5c0>)
   259a0:	f002 faca 	bl	27f38 <__aeabi_dmul>
   259a4:	4aa7      	ldr	r2, [pc, #668]	; (25c44 <__ieee754_pow+0x5c4>)
   259a6:	4ba8      	ldr	r3, [pc, #672]	; (25c48 <__ieee754_pow+0x5c8>)
   259a8:	f001 fb82 	bl	270b0 <__aeabi_dadd>
   259ac:	0032      	movs	r2, r6
   259ae:	003b      	movs	r3, r7
   259b0:	f002 fac2 	bl	27f38 <__aeabi_dmul>
   259b4:	4aa5      	ldr	r2, [pc, #660]	; (25c4c <__ieee754_pow+0x5cc>)
   259b6:	4ba6      	ldr	r3, [pc, #664]	; (25c50 <__ieee754_pow+0x5d0>)
   259b8:	f001 fb7a 	bl	270b0 <__aeabi_dadd>
   259bc:	0032      	movs	r2, r6
   259be:	003b      	movs	r3, r7
   259c0:	f002 faba 	bl	27f38 <__aeabi_dmul>
   259c4:	4aa3      	ldr	r2, [pc, #652]	; (25c54 <__ieee754_pow+0x5d4>)
   259c6:	4ba4      	ldr	r3, [pc, #656]	; (25c58 <__ieee754_pow+0x5d8>)
   259c8:	f001 fb72 	bl	270b0 <__aeabi_dadd>
   259cc:	0032      	movs	r2, r6
   259ce:	003b      	movs	r3, r7
   259d0:	f002 fab2 	bl	27f38 <__aeabi_dmul>
   259d4:	4aa1      	ldr	r2, [pc, #644]	; (25c5c <__ieee754_pow+0x5dc>)
   259d6:	4ba2      	ldr	r3, [pc, #648]	; (25c60 <__ieee754_pow+0x5e0>)
   259d8:	f001 fb6a 	bl	270b0 <__aeabi_dadd>
   259dc:	0032      	movs	r2, r6
   259de:	003b      	movs	r3, r7
   259e0:	f002 faaa 	bl	27f38 <__aeabi_dmul>
   259e4:	4a9f      	ldr	r2, [pc, #636]	; (25c64 <__ieee754_pow+0x5e4>)
   259e6:	4ba0      	ldr	r3, [pc, #640]	; (25c68 <__ieee754_pow+0x5e8>)
   259e8:	f001 fb62 	bl	270b0 <__aeabi_dadd>
   259ec:	0032      	movs	r2, r6
   259ee:	0004      	movs	r4, r0
   259f0:	000d      	movs	r5, r1
   259f2:	003b      	movs	r3, r7
   259f4:	0030      	movs	r0, r6
   259f6:	0039      	movs	r1, r7
   259f8:	f002 fa9e 	bl	27f38 <__aeabi_dmul>
   259fc:	0002      	movs	r2, r0
   259fe:	000b      	movs	r3, r1
   25a00:	0020      	movs	r0, r4
   25a02:	0029      	movs	r1, r5
   25a04:	f002 fa98 	bl	27f38 <__aeabi_dmul>
   25a08:	9e02      	ldr	r6, [sp, #8]
   25a0a:	9f03      	ldr	r7, [sp, #12]
   25a0c:	0004      	movs	r4, r0
   25a0e:	000d      	movs	r5, r1
   25a10:	9804      	ldr	r0, [sp, #16]
   25a12:	9905      	ldr	r1, [sp, #20]
   25a14:	0032      	movs	r2, r6
   25a16:	003b      	movs	r3, r7
   25a18:	f001 fb4a 	bl	270b0 <__aeabi_dadd>
   25a1c:	9a06      	ldr	r2, [sp, #24]
   25a1e:	9b07      	ldr	r3, [sp, #28]
   25a20:	f002 fa8a 	bl	27f38 <__aeabi_dmul>
   25a24:	0022      	movs	r2, r4
   25a26:	002b      	movs	r3, r5
   25a28:	f001 fb42 	bl	270b0 <__aeabi_dadd>
   25a2c:	0032      	movs	r2, r6
   25a2e:	900a      	str	r0, [sp, #40]	; 0x28
   25a30:	910b      	str	r1, [sp, #44]	; 0x2c
   25a32:	003b      	movs	r3, r7
   25a34:	0030      	movs	r0, r6
   25a36:	0039      	movs	r1, r7
   25a38:	9602      	str	r6, [sp, #8]
   25a3a:	9703      	str	r7, [sp, #12]
   25a3c:	f002 fa7c 	bl	27f38 <__aeabi_dmul>
   25a40:	2200      	movs	r2, #0
   25a42:	4b8a      	ldr	r3, [pc, #552]	; (25c6c <__ieee754_pow+0x5ec>)
   25a44:	0004      	movs	r4, r0
   25a46:	000d      	movs	r5, r1
   25a48:	f001 fb32 	bl	270b0 <__aeabi_dadd>
   25a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25a50:	f001 fb2e 	bl	270b0 <__aeabi_dadd>
   25a54:	2600      	movs	r6, #0
   25a56:	000f      	movs	r7, r1
   25a58:	0032      	movs	r2, r6
   25a5a:	000b      	movs	r3, r1
   25a5c:	9802      	ldr	r0, [sp, #8]
   25a5e:	9903      	ldr	r1, [sp, #12]
   25a60:	f002 fa6a 	bl	27f38 <__aeabi_dmul>
   25a64:	2200      	movs	r2, #0
   25a66:	9002      	str	r0, [sp, #8]
   25a68:	9103      	str	r1, [sp, #12]
   25a6a:	4b80      	ldr	r3, [pc, #512]	; (25c6c <__ieee754_pow+0x5ec>)
   25a6c:	0030      	movs	r0, r6
   25a6e:	0039      	movs	r1, r7
   25a70:	f002 fce2 	bl	28438 <__aeabi_dsub>
   25a74:	0022      	movs	r2, r4
   25a76:	002b      	movs	r3, r5
   25a78:	f002 fcde 	bl	28438 <__aeabi_dsub>
   25a7c:	0002      	movs	r2, r0
   25a7e:	000b      	movs	r3, r1
   25a80:	980a      	ldr	r0, [sp, #40]	; 0x28
   25a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25a84:	f002 fcd8 	bl	28438 <__aeabi_dsub>
   25a88:	9a04      	ldr	r2, [sp, #16]
   25a8a:	9b05      	ldr	r3, [sp, #20]
   25a8c:	f002 fa54 	bl	27f38 <__aeabi_dmul>
   25a90:	0032      	movs	r2, r6
   25a92:	0004      	movs	r4, r0
   25a94:	000d      	movs	r5, r1
   25a96:	9806      	ldr	r0, [sp, #24]
   25a98:	9907      	ldr	r1, [sp, #28]
   25a9a:	003b      	movs	r3, r7
   25a9c:	f002 fa4c 	bl	27f38 <__aeabi_dmul>
   25aa0:	0002      	movs	r2, r0
   25aa2:	000b      	movs	r3, r1
   25aa4:	0020      	movs	r0, r4
   25aa6:	0029      	movs	r1, r5
   25aa8:	f001 fb02 	bl	270b0 <__aeabi_dadd>
   25aac:	0004      	movs	r4, r0
   25aae:	000d      	movs	r5, r1
   25ab0:	0002      	movs	r2, r0
   25ab2:	000b      	movs	r3, r1
   25ab4:	9802      	ldr	r0, [sp, #8]
   25ab6:	9903      	ldr	r1, [sp, #12]
   25ab8:	f001 fafa 	bl	270b0 <__aeabi_dadd>
   25abc:	2600      	movs	r6, #0
   25abe:	22e0      	movs	r2, #224	; 0xe0
   25ac0:	4b6b      	ldr	r3, [pc, #428]	; (25c70 <__ieee754_pow+0x5f0>)
   25ac2:	0612      	lsls	r2, r2, #24
   25ac4:	0030      	movs	r0, r6
   25ac6:	000f      	movs	r7, r1
   25ac8:	f002 fa36 	bl	27f38 <__aeabi_dmul>
   25acc:	9a02      	ldr	r2, [sp, #8]
   25ace:	9b03      	ldr	r3, [sp, #12]
   25ad0:	9004      	str	r0, [sp, #16]
   25ad2:	9105      	str	r1, [sp, #20]
   25ad4:	0030      	movs	r0, r6
   25ad6:	0039      	movs	r1, r7
   25ad8:	f002 fcae 	bl	28438 <__aeabi_dsub>
   25adc:	0002      	movs	r2, r0
   25ade:	000b      	movs	r3, r1
   25ae0:	0020      	movs	r0, r4
   25ae2:	0029      	movs	r1, r5
   25ae4:	f002 fca8 	bl	28438 <__aeabi_dsub>
   25ae8:	4a62      	ldr	r2, [pc, #392]	; (25c74 <__ieee754_pow+0x5f4>)
   25aea:	4b61      	ldr	r3, [pc, #388]	; (25c70 <__ieee754_pow+0x5f0>)
   25aec:	f002 fa24 	bl	27f38 <__aeabi_dmul>
   25af0:	4a61      	ldr	r2, [pc, #388]	; (25c78 <__ieee754_pow+0x5f8>)
   25af2:	0004      	movs	r4, r0
   25af4:	000d      	movs	r5, r1
   25af6:	4b61      	ldr	r3, [pc, #388]	; (25c7c <__ieee754_pow+0x5fc>)
   25af8:	0030      	movs	r0, r6
   25afa:	0039      	movs	r1, r7
   25afc:	f002 fa1c 	bl	27f38 <__aeabi_dmul>
   25b00:	0002      	movs	r2, r0
   25b02:	000b      	movs	r3, r1
   25b04:	0020      	movs	r0, r4
   25b06:	0029      	movs	r1, r5
   25b08:	f001 fad2 	bl	270b0 <__aeabi_dadd>
   25b0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25b10:	f001 face 	bl	270b0 <__aeabi_dadd>
   25b14:	0006      	movs	r6, r0
   25b16:	4648      	mov	r0, r9
   25b18:	000f      	movs	r7, r1
   25b1a:	f002 fff7 	bl	28b0c <__aeabi_i2d>
   25b1e:	0004      	movs	r4, r0
   25b20:	000d      	movs	r5, r1
   25b22:	9804      	ldr	r0, [sp, #16]
   25b24:	9905      	ldr	r1, [sp, #20]
   25b26:	0032      	movs	r2, r6
   25b28:	003b      	movs	r3, r7
   25b2a:	f001 fac1 	bl	270b0 <__aeabi_dadd>
   25b2e:	9a08      	ldr	r2, [sp, #32]
   25b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25b32:	f001 fabd 	bl	270b0 <__aeabi_dadd>
   25b36:	0022      	movs	r2, r4
   25b38:	002b      	movs	r3, r5
   25b3a:	f001 fab9 	bl	270b0 <__aeabi_dadd>
   25b3e:	2000      	movs	r0, #0
   25b40:	0022      	movs	r2, r4
   25b42:	002b      	movs	r3, r5
   25b44:	9002      	str	r0, [sp, #8]
   25b46:	9103      	str	r1, [sp, #12]
   25b48:	f002 fc76 	bl	28438 <__aeabi_dsub>
   25b4c:	9a08      	ldr	r2, [sp, #32]
   25b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25b50:	f002 fc72 	bl	28438 <__aeabi_dsub>
   25b54:	9a04      	ldr	r2, [sp, #16]
   25b56:	9b05      	ldr	r3, [sp, #20]
   25b58:	f002 fc6e 	bl	28438 <__aeabi_dsub>
   25b5c:	0002      	movs	r2, r0
   25b5e:	000b      	movs	r3, r1
   25b60:	0030      	movs	r0, r6
   25b62:	0039      	movs	r1, r7
   25b64:	f002 fc68 	bl	28438 <__aeabi_dsub>
   25b68:	9004      	str	r0, [sp, #16]
   25b6a:	9105      	str	r1, [sp, #20]
   25b6c:	465b      	mov	r3, fp
   25b6e:	4642      	mov	r2, r8
   25b70:	3b01      	subs	r3, #1
   25b72:	4313      	orrs	r3, r2
   25b74:	d100      	bne.n	25b78 <__ieee754_pow+0x4f8>
   25b76:	e1ab      	b.n	25ed0 <__ieee754_pow+0x850>
   25b78:	2300      	movs	r3, #0
   25b7a:	4c2c      	ldr	r4, [pc, #176]	; (25c2c <__ieee754_pow+0x5ac>)
   25b7c:	9306      	str	r3, [sp, #24]
   25b7e:	9407      	str	r4, [sp, #28]
   25b80:	9800      	ldr	r0, [sp, #0]
   25b82:	9901      	ldr	r1, [sp, #4]
   25b84:	2600      	movs	r6, #0
   25b86:	000b      	movs	r3, r1
   25b88:	0032      	movs	r2, r6
   25b8a:	000f      	movs	r7, r1
   25b8c:	f002 fc54 	bl	28438 <__aeabi_dsub>
   25b90:	9a02      	ldr	r2, [sp, #8]
   25b92:	9b03      	ldr	r3, [sp, #12]
   25b94:	f002 f9d0 	bl	27f38 <__aeabi_dmul>
   25b98:	9a00      	ldr	r2, [sp, #0]
   25b9a:	9b01      	ldr	r3, [sp, #4]
   25b9c:	0004      	movs	r4, r0
   25b9e:	000d      	movs	r5, r1
   25ba0:	9804      	ldr	r0, [sp, #16]
   25ba2:	9905      	ldr	r1, [sp, #20]
   25ba4:	f002 f9c8 	bl	27f38 <__aeabi_dmul>
   25ba8:	0002      	movs	r2, r0
   25baa:	000b      	movs	r3, r1
   25bac:	0020      	movs	r0, r4
   25bae:	0029      	movs	r1, r5
   25bb0:	f001 fa7e 	bl	270b0 <__aeabi_dadd>
   25bb4:	0004      	movs	r4, r0
   25bb6:	000d      	movs	r5, r1
   25bb8:	9802      	ldr	r0, [sp, #8]
   25bba:	9903      	ldr	r1, [sp, #12]
   25bbc:	0032      	movs	r2, r6
   25bbe:	003b      	movs	r3, r7
   25bc0:	9400      	str	r4, [sp, #0]
   25bc2:	9501      	str	r5, [sp, #4]
   25bc4:	f002 f9b8 	bl	27f38 <__aeabi_dmul>
   25bc8:	0002      	movs	r2, r0
   25bca:	000b      	movs	r3, r1
   25bcc:	0006      	movs	r6, r0
   25bce:	000f      	movs	r7, r1
   25bd0:	0020      	movs	r0, r4
   25bd2:	0029      	movs	r1, r5
   25bd4:	f001 fa6c 	bl	270b0 <__aeabi_dadd>
   25bd8:	4b29      	ldr	r3, [pc, #164]	; (25c80 <__ieee754_pow+0x600>)
   25bda:	0004      	movs	r4, r0
   25bdc:	000d      	movs	r5, r1
   25bde:	0002      	movs	r2, r0
   25be0:	468b      	mov	fp, r1
   25be2:	4299      	cmp	r1, r3
   25be4:	dc00      	bgt.n	25be8 <__ieee754_pow+0x568>
   25be6:	e14f      	b.n	25e88 <__ieee754_pow+0x808>
   25be8:	4b26      	ldr	r3, [pc, #152]	; (25c84 <__ieee754_pow+0x604>)
   25bea:	18cb      	adds	r3, r1, r3
   25bec:	4303      	orrs	r3, r0
   25bee:	d000      	beq.n	25bf2 <__ieee754_pow+0x572>
   25bf0:	e1e2      	b.n	25fb8 <__ieee754_pow+0x938>
   25bf2:	9800      	ldr	r0, [sp, #0]
   25bf4:	9901      	ldr	r1, [sp, #4]
   25bf6:	4a24      	ldr	r2, [pc, #144]	; (25c88 <__ieee754_pow+0x608>)
   25bf8:	4b24      	ldr	r3, [pc, #144]	; (25c8c <__ieee754_pow+0x60c>)
   25bfa:	f001 fa59 	bl	270b0 <__aeabi_dadd>
   25bfe:	0032      	movs	r2, r6
   25c00:	9002      	str	r0, [sp, #8]
   25c02:	9103      	str	r1, [sp, #12]
   25c04:	003b      	movs	r3, r7
   25c06:	0020      	movs	r0, r4
   25c08:	0029      	movs	r1, r5
   25c0a:	f002 fc15 	bl	28438 <__aeabi_dsub>
   25c0e:	0002      	movs	r2, r0
   25c10:	000b      	movs	r3, r1
   25c12:	9802      	ldr	r0, [sp, #8]
   25c14:	9903      	ldr	r1, [sp, #12]
   25c16:	f000 fe11 	bl	2683c <__aeabi_dcmpgt>
   25c1a:	46aa      	mov	sl, r5
   25c1c:	e038      	b.n	25c90 <__ieee754_pow+0x610>
   25c1e:	46c0      	nop			; (mov r8, r8)
   25c20:	000fffff 	.word	0x000fffff
   25c24:	43400000 	.word	0x43400000
   25c28:	fffffc01 	.word	0xfffffc01
   25c2c:	3ff00000 	.word	0x3ff00000
   25c30:	0003988e 	.word	0x0003988e
   25c34:	000bb679 	.word	0x000bb679
   25c38:	fff00000 	.word	0xfff00000
   25c3c:	4a454eef 	.word	0x4a454eef
   25c40:	3fca7e28 	.word	0x3fca7e28
   25c44:	93c9db65 	.word	0x93c9db65
   25c48:	3fcd864a 	.word	0x3fcd864a
   25c4c:	a91d4101 	.word	0xa91d4101
   25c50:	3fd17460 	.word	0x3fd17460
   25c54:	518f264d 	.word	0x518f264d
   25c58:	3fd55555 	.word	0x3fd55555
   25c5c:	db6fabff 	.word	0xdb6fabff
   25c60:	3fdb6db6 	.word	0x3fdb6db6
   25c64:	33333303 	.word	0x33333303
   25c68:	3fe33333 	.word	0x3fe33333
   25c6c:	40080000 	.word	0x40080000
   25c70:	3feec709 	.word	0x3feec709
   25c74:	dc3a03fd 	.word	0xdc3a03fd
   25c78:	145b01f5 	.word	0x145b01f5
   25c7c:	be3e2fe0 	.word	0xbe3e2fe0
   25c80:	408fffff 	.word	0x408fffff
   25c84:	bf700000 	.word	0xbf700000
   25c88:	652b82fe 	.word	0x652b82fe
   25c8c:	3c971547 	.word	0x3c971547
   25c90:	2800      	cmp	r0, #0
   25c92:	d000      	beq.n	25c96 <__ieee754_pow+0x616>
   25c94:	e190      	b.n	25fb8 <__ieee754_pow+0x938>
   25c96:	4aec      	ldr	r2, [pc, #944]	; (26048 <__ieee754_pow+0x9c8>)
   25c98:	4653      	mov	r3, sl
   25c9a:	4694      	mov	ip, r2
   25c9c:	2280      	movs	r2, #128	; 0x80
   25c9e:	0352      	lsls	r2, r2, #13
   25ca0:	0011      	movs	r1, r2
   25ca2:	151b      	asrs	r3, r3, #20
   25ca4:	4463      	add	r3, ip
   25ca6:	4119      	asrs	r1, r3
   25ca8:	000b      	movs	r3, r1
   25caa:	4690      	mov	r8, r2
   25cac:	4ae7      	ldr	r2, [pc, #924]	; (2604c <__ieee754_pow+0x9cc>)
   25cae:	445b      	add	r3, fp
   25cb0:	4694      	mov	ip, r2
   25cb2:	005c      	lsls	r4, r3, #1
   25cb4:	0d64      	lsrs	r4, r4, #21
   25cb6:	4de6      	ldr	r5, [pc, #920]	; (26050 <__ieee754_pow+0x9d0>)
   25cb8:	4464      	add	r4, ip
   25cba:	4125      	asrs	r5, r4
   25cbc:	001a      	movs	r2, r3
   25cbe:	43aa      	bics	r2, r5
   25cc0:	0011      	movs	r1, r2
   25cc2:	4642      	mov	r2, r8
   25cc4:	031b      	lsls	r3, r3, #12
   25cc6:	0b1b      	lsrs	r3, r3, #12
   25cc8:	4313      	orrs	r3, r2
   25cca:	2214      	movs	r2, #20
   25ccc:	1b14      	subs	r4, r2, r4
   25cce:	4123      	asrs	r3, r4
   25cd0:	4699      	mov	r9, r3
   25cd2:	465b      	mov	r3, fp
   25cd4:	2000      	movs	r0, #0
   25cd6:	2b00      	cmp	r3, #0
   25cd8:	da00      	bge.n	25cdc <__ieee754_pow+0x65c>
   25cda:	e1b0      	b.n	2603e <__ieee754_pow+0x9be>
   25cdc:	0002      	movs	r2, r0
   25cde:	000b      	movs	r3, r1
   25ce0:	0030      	movs	r0, r6
   25ce2:	0039      	movs	r1, r7
   25ce4:	f002 fba8 	bl	28438 <__aeabi_dsub>
   25ce8:	000b      	movs	r3, r1
   25cea:	0002      	movs	r2, r0
   25cec:	0006      	movs	r6, r0
   25cee:	000f      	movs	r7, r1
   25cf0:	9800      	ldr	r0, [sp, #0]
   25cf2:	9901      	ldr	r1, [sp, #4]
   25cf4:	f001 f9dc 	bl	270b0 <__aeabi_dadd>
   25cf8:	464b      	mov	r3, r9
   25cfa:	051b      	lsls	r3, r3, #20
   25cfc:	000d      	movs	r5, r1
   25cfe:	4698      	mov	r8, r3
   25d00:	2400      	movs	r4, #0
   25d02:	2200      	movs	r2, #0
   25d04:	4bd3      	ldr	r3, [pc, #844]	; (26054 <__ieee754_pow+0x9d4>)
   25d06:	0020      	movs	r0, r4
   25d08:	0029      	movs	r1, r5
   25d0a:	f002 f915 	bl	27f38 <__aeabi_dmul>
   25d0e:	0032      	movs	r2, r6
   25d10:	9002      	str	r0, [sp, #8]
   25d12:	9103      	str	r1, [sp, #12]
   25d14:	003b      	movs	r3, r7
   25d16:	0020      	movs	r0, r4
   25d18:	0029      	movs	r1, r5
   25d1a:	f002 fb8d 	bl	28438 <__aeabi_dsub>
   25d1e:	0002      	movs	r2, r0
   25d20:	000b      	movs	r3, r1
   25d22:	9800      	ldr	r0, [sp, #0]
   25d24:	9901      	ldr	r1, [sp, #4]
   25d26:	f002 fb87 	bl	28438 <__aeabi_dsub>
   25d2a:	4acb      	ldr	r2, [pc, #812]	; (26058 <__ieee754_pow+0x9d8>)
   25d2c:	4bcb      	ldr	r3, [pc, #812]	; (2605c <__ieee754_pow+0x9dc>)
   25d2e:	f002 f903 	bl	27f38 <__aeabi_dmul>
   25d32:	4acb      	ldr	r2, [pc, #812]	; (26060 <__ieee754_pow+0x9e0>)
   25d34:	0006      	movs	r6, r0
   25d36:	000f      	movs	r7, r1
   25d38:	4bca      	ldr	r3, [pc, #808]	; (26064 <__ieee754_pow+0x9e4>)
   25d3a:	0020      	movs	r0, r4
   25d3c:	0029      	movs	r1, r5
   25d3e:	f002 f8fb 	bl	27f38 <__aeabi_dmul>
   25d42:	0002      	movs	r2, r0
   25d44:	000b      	movs	r3, r1
   25d46:	0030      	movs	r0, r6
   25d48:	0039      	movs	r1, r7
   25d4a:	f001 f9b1 	bl	270b0 <__aeabi_dadd>
   25d4e:	0004      	movs	r4, r0
   25d50:	000d      	movs	r5, r1
   25d52:	0002      	movs	r2, r0
   25d54:	000b      	movs	r3, r1
   25d56:	9802      	ldr	r0, [sp, #8]
   25d58:	9903      	ldr	r1, [sp, #12]
   25d5a:	f001 f9a9 	bl	270b0 <__aeabi_dadd>
   25d5e:	9a02      	ldr	r2, [sp, #8]
   25d60:	9b03      	ldr	r3, [sp, #12]
   25d62:	0006      	movs	r6, r0
   25d64:	000f      	movs	r7, r1
   25d66:	f002 fb67 	bl	28438 <__aeabi_dsub>
   25d6a:	0002      	movs	r2, r0
   25d6c:	000b      	movs	r3, r1
   25d6e:	0020      	movs	r0, r4
   25d70:	0029      	movs	r1, r5
   25d72:	f002 fb61 	bl	28438 <__aeabi_dsub>
   25d76:	0032      	movs	r2, r6
   25d78:	9000      	str	r0, [sp, #0]
   25d7a:	9101      	str	r1, [sp, #4]
   25d7c:	003b      	movs	r3, r7
   25d7e:	0030      	movs	r0, r6
   25d80:	0039      	movs	r1, r7
   25d82:	f002 f8d9 	bl	27f38 <__aeabi_dmul>
   25d86:	0004      	movs	r4, r0
   25d88:	000d      	movs	r5, r1
   25d8a:	4ab7      	ldr	r2, [pc, #732]	; (26068 <__ieee754_pow+0x9e8>)
   25d8c:	4bb7      	ldr	r3, [pc, #732]	; (2606c <__ieee754_pow+0x9ec>)
   25d8e:	f002 f8d3 	bl	27f38 <__aeabi_dmul>
   25d92:	4ab7      	ldr	r2, [pc, #732]	; (26070 <__ieee754_pow+0x9f0>)
   25d94:	4bb7      	ldr	r3, [pc, #732]	; (26074 <__ieee754_pow+0x9f4>)
   25d96:	f002 fb4f 	bl	28438 <__aeabi_dsub>
   25d9a:	0022      	movs	r2, r4
   25d9c:	002b      	movs	r3, r5
   25d9e:	f002 f8cb 	bl	27f38 <__aeabi_dmul>
   25da2:	4ab5      	ldr	r2, [pc, #724]	; (26078 <__ieee754_pow+0x9f8>)
   25da4:	4bb5      	ldr	r3, [pc, #724]	; (2607c <__ieee754_pow+0x9fc>)
   25da6:	f001 f983 	bl	270b0 <__aeabi_dadd>
   25daa:	0022      	movs	r2, r4
   25dac:	002b      	movs	r3, r5
   25dae:	f002 f8c3 	bl	27f38 <__aeabi_dmul>
   25db2:	4ab3      	ldr	r2, [pc, #716]	; (26080 <__ieee754_pow+0xa00>)
   25db4:	4bb3      	ldr	r3, [pc, #716]	; (26084 <__ieee754_pow+0xa04>)
   25db6:	f002 fb3f 	bl	28438 <__aeabi_dsub>
   25dba:	0022      	movs	r2, r4
   25dbc:	002b      	movs	r3, r5
   25dbe:	f002 f8bb 	bl	27f38 <__aeabi_dmul>
   25dc2:	4ab1      	ldr	r2, [pc, #708]	; (26088 <__ieee754_pow+0xa08>)
   25dc4:	4bb1      	ldr	r3, [pc, #708]	; (2608c <__ieee754_pow+0xa0c>)
   25dc6:	f001 f973 	bl	270b0 <__aeabi_dadd>
   25dca:	0022      	movs	r2, r4
   25dcc:	002b      	movs	r3, r5
   25dce:	f002 f8b3 	bl	27f38 <__aeabi_dmul>
   25dd2:	0002      	movs	r2, r0
   25dd4:	000b      	movs	r3, r1
   25dd6:	0030      	movs	r0, r6
   25dd8:	0039      	movs	r1, r7
   25dda:	f002 fb2d 	bl	28438 <__aeabi_dsub>
   25dde:	0004      	movs	r4, r0
   25de0:	000d      	movs	r5, r1
   25de2:	0002      	movs	r2, r0
   25de4:	000b      	movs	r3, r1
   25de6:	0030      	movs	r0, r6
   25de8:	0039      	movs	r1, r7
   25dea:	f002 f8a5 	bl	27f38 <__aeabi_dmul>
   25dee:	2380      	movs	r3, #128	; 0x80
   25df0:	9002      	str	r0, [sp, #8]
   25df2:	9103      	str	r1, [sp, #12]
   25df4:	2200      	movs	r2, #0
   25df6:	05db      	lsls	r3, r3, #23
   25df8:	0020      	movs	r0, r4
   25dfa:	0029      	movs	r1, r5
   25dfc:	f002 fb1c 	bl	28438 <__aeabi_dsub>
   25e00:	0002      	movs	r2, r0
   25e02:	000b      	movs	r3, r1
   25e04:	9802      	ldr	r0, [sp, #8]
   25e06:	9903      	ldr	r1, [sp, #12]
   25e08:	f001 fc62 	bl	276d0 <__aeabi_ddiv>
   25e0c:	9a00      	ldr	r2, [sp, #0]
   25e0e:	9b01      	ldr	r3, [sp, #4]
   25e10:	0004      	movs	r4, r0
   25e12:	000d      	movs	r5, r1
   25e14:	0030      	movs	r0, r6
   25e16:	0039      	movs	r1, r7
   25e18:	f002 f88e 	bl	27f38 <__aeabi_dmul>
   25e1c:	9a00      	ldr	r2, [sp, #0]
   25e1e:	9b01      	ldr	r3, [sp, #4]
   25e20:	f001 f946 	bl	270b0 <__aeabi_dadd>
   25e24:	0002      	movs	r2, r0
   25e26:	000b      	movs	r3, r1
   25e28:	0020      	movs	r0, r4
   25e2a:	0029      	movs	r1, r5
   25e2c:	f002 fb04 	bl	28438 <__aeabi_dsub>
   25e30:	0032      	movs	r2, r6
   25e32:	003b      	movs	r3, r7
   25e34:	f002 fb00 	bl	28438 <__aeabi_dsub>
   25e38:	0002      	movs	r2, r0
   25e3a:	000b      	movs	r3, r1
   25e3c:	2000      	movs	r0, #0
   25e3e:	4994      	ldr	r1, [pc, #592]	; (26090 <__ieee754_pow+0xa10>)
   25e40:	f002 fafa 	bl	28438 <__aeabi_dsub>
   25e44:	4643      	mov	r3, r8
   25e46:	185b      	adds	r3, r3, r1
   25e48:	151a      	asrs	r2, r3, #20
   25e4a:	2a00      	cmp	r2, #0
   25e4c:	dc00      	bgt.n	25e50 <__ieee754_pow+0x7d0>
   25e4e:	e149      	b.n	260e4 <__ieee754_pow+0xa64>
   25e50:	0019      	movs	r1, r3
   25e52:	9a06      	ldr	r2, [sp, #24]
   25e54:	9b07      	ldr	r3, [sp, #28]
   25e56:	f002 f86f 	bl	27f38 <__aeabi_dmul>
   25e5a:	e459      	b.n	25710 <__ieee754_pow+0x90>
   25e5c:	003a      	movs	r2, r7
   25e5e:	0033      	movs	r3, r6
   25e60:	0038      	movs	r0, r7
   25e62:	0031      	movs	r1, r6
   25e64:	f002 f868 	bl	27f38 <__aeabi_dmul>
   25e68:	e452      	b.n	25710 <__ieee754_pow+0x90>
   25e6a:	4653      	mov	r3, sl
   25e6c:	2b00      	cmp	r3, #0
   25e6e:	db00      	blt.n	25e72 <__ieee754_pow+0x7f2>
   25e70:	e4d9      	b.n	25826 <__ieee754_pow+0x1a6>
   25e72:	9c00      	ldr	r4, [sp, #0]
   25e74:	9d01      	ldr	r5, [sp, #4]
   25e76:	2280      	movs	r2, #128	; 0x80
   25e78:	0612      	lsls	r2, r2, #24
   25e7a:	002b      	movs	r3, r5
   25e7c:	4694      	mov	ip, r2
   25e7e:	4463      	add	r3, ip
   25e80:	0020      	movs	r0, r4
   25e82:	0019      	movs	r1, r3
   25e84:	f7ff fc44 	bl	25710 <__ieee754_pow+0x90>
   25e88:	004b      	lsls	r3, r1, #1
   25e8a:	085b      	lsrs	r3, r3, #1
   25e8c:	469a      	mov	sl, r3
   25e8e:	4b81      	ldr	r3, [pc, #516]	; (26094 <__ieee754_pow+0xa14>)
   25e90:	459a      	cmp	sl, r3
   25e92:	dc00      	bgt.n	25e96 <__ieee754_pow+0x816>
   25e94:	e0b1      	b.n	25ffa <__ieee754_pow+0x97a>
   25e96:	4b80      	ldr	r3, [pc, #512]	; (26098 <__ieee754_pow+0xa18>)
   25e98:	445b      	add	r3, fp
   25e9a:	431a      	orrs	r2, r3
   25e9c:	d10c      	bne.n	25eb8 <__ieee754_pow+0x838>
   25e9e:	0032      	movs	r2, r6
   25ea0:	003b      	movs	r3, r7
   25ea2:	f002 fac9 	bl	28438 <__aeabi_dsub>
   25ea6:	0002      	movs	r2, r0
   25ea8:	000b      	movs	r3, r1
   25eaa:	9800      	ldr	r0, [sp, #0]
   25eac:	9901      	ldr	r1, [sp, #4]
   25eae:	f000 fcbb 	bl	26828 <__aeabi_dcmple>
   25eb2:	2800      	cmp	r0, #0
   25eb4:	d100      	bne.n	25eb8 <__ieee754_pow+0x838>
   25eb6:	e6ee      	b.n	25c96 <__ieee754_pow+0x616>
   25eb8:	9806      	ldr	r0, [sp, #24]
   25eba:	9907      	ldr	r1, [sp, #28]
   25ebc:	4a77      	ldr	r2, [pc, #476]	; (2609c <__ieee754_pow+0xa1c>)
   25ebe:	4b78      	ldr	r3, [pc, #480]	; (260a0 <__ieee754_pow+0xa20>)
   25ec0:	f002 f83a 	bl	27f38 <__aeabi_dmul>
   25ec4:	4a75      	ldr	r2, [pc, #468]	; (2609c <__ieee754_pow+0xa1c>)
   25ec6:	4b76      	ldr	r3, [pc, #472]	; (260a0 <__ieee754_pow+0xa20>)
   25ec8:	f002 f836 	bl	27f38 <__aeabi_dmul>
   25ecc:	f7ff fc20 	bl	25710 <__ieee754_pow+0x90>
   25ed0:	2300      	movs	r3, #0
   25ed2:	4c74      	ldr	r4, [pc, #464]	; (260a4 <__ieee754_pow+0xa24>)
   25ed4:	9306      	str	r3, [sp, #24]
   25ed6:	9407      	str	r4, [sp, #28]
   25ed8:	e652      	b.n	25b80 <__ieee754_pow+0x500>
   25eda:	0002      	movs	r2, r0
   25edc:	000b      	movs	r3, r1
   25ede:	2000      	movs	r0, #0
   25ee0:	496b      	ldr	r1, [pc, #428]	; (26090 <__ieee754_pow+0xa10>)
   25ee2:	f001 fbf5 	bl	276d0 <__aeabi_ddiv>
   25ee6:	f7ff fc32 	bl	2574e <__ieee754_pow+0xce>
   25eea:	4653      	mov	r3, sl
   25eec:	2b00      	cmp	r3, #0
   25eee:	db00      	blt.n	25ef2 <__ieee754_pow+0x872>
   25ef0:	e499      	b.n	25826 <__ieee754_pow+0x1a6>
   25ef2:	e454      	b.n	2579e <__ieee754_pow+0x11e>
   25ef4:	4b6c      	ldr	r3, [pc, #432]	; (260a8 <__ieee754_pow+0xa28>)
   25ef6:	429c      	cmp	r4, r3
   25ef8:	ddf7      	ble.n	25eea <__ieee754_pow+0x86a>
   25efa:	4b65      	ldr	r3, [pc, #404]	; (26090 <__ieee754_pow+0xa10>)
   25efc:	429c      	cmp	r4, r3
   25efe:	dd00      	ble.n	25f02 <__ieee754_pow+0x882>
   25f00:	e44a      	b.n	25798 <__ieee754_pow+0x118>
   25f02:	2200      	movs	r2, #0
   25f04:	4b62      	ldr	r3, [pc, #392]	; (26090 <__ieee754_pow+0xa10>)
   25f06:	f002 fa97 	bl	28438 <__aeabi_dsub>
   25f0a:	22c0      	movs	r2, #192	; 0xc0
   25f0c:	4b67      	ldr	r3, [pc, #412]	; (260ac <__ieee754_pow+0xa2c>)
   25f0e:	05d2      	lsls	r2, r2, #23
   25f10:	0004      	movs	r4, r0
   25f12:	000d      	movs	r5, r1
   25f14:	f002 f810 	bl	27f38 <__aeabi_dmul>
   25f18:	4a65      	ldr	r2, [pc, #404]	; (260b0 <__ieee754_pow+0xa30>)
   25f1a:	0006      	movs	r6, r0
   25f1c:	000f      	movs	r7, r1
   25f1e:	4b65      	ldr	r3, [pc, #404]	; (260b4 <__ieee754_pow+0xa34>)
   25f20:	0020      	movs	r0, r4
   25f22:	0029      	movs	r1, r5
   25f24:	f002 f808 	bl	27f38 <__aeabi_dmul>
   25f28:	2200      	movs	r2, #0
   25f2a:	9002      	str	r0, [sp, #8]
   25f2c:	9103      	str	r1, [sp, #12]
   25f2e:	4b62      	ldr	r3, [pc, #392]	; (260b8 <__ieee754_pow+0xa38>)
   25f30:	0020      	movs	r0, r4
   25f32:	0029      	movs	r1, r5
   25f34:	f002 f800 	bl	27f38 <__aeabi_dmul>
   25f38:	0002      	movs	r2, r0
   25f3a:	000b      	movs	r3, r1
   25f3c:	485f      	ldr	r0, [pc, #380]	; (260bc <__ieee754_pow+0xa3c>)
   25f3e:	4960      	ldr	r1, [pc, #384]	; (260c0 <__ieee754_pow+0xa40>)
   25f40:	f002 fa7a 	bl	28438 <__aeabi_dsub>
   25f44:	0022      	movs	r2, r4
   25f46:	002b      	movs	r3, r5
   25f48:	f001 fff6 	bl	27f38 <__aeabi_dmul>
   25f4c:	0002      	movs	r2, r0
   25f4e:	000b      	movs	r3, r1
   25f50:	2000      	movs	r0, #0
   25f52:	495c      	ldr	r1, [pc, #368]	; (260c4 <__ieee754_pow+0xa44>)
   25f54:	f002 fa70 	bl	28438 <__aeabi_dsub>
   25f58:	0022      	movs	r2, r4
   25f5a:	9004      	str	r0, [sp, #16]
   25f5c:	9105      	str	r1, [sp, #20]
   25f5e:	002b      	movs	r3, r5
   25f60:	0020      	movs	r0, r4
   25f62:	0029      	movs	r1, r5
   25f64:	f001 ffe8 	bl	27f38 <__aeabi_dmul>
   25f68:	0002      	movs	r2, r0
   25f6a:	000b      	movs	r3, r1
   25f6c:	9804      	ldr	r0, [sp, #16]
   25f6e:	9905      	ldr	r1, [sp, #20]
   25f70:	f001 ffe2 	bl	27f38 <__aeabi_dmul>
   25f74:	4a54      	ldr	r2, [pc, #336]	; (260c8 <__ieee754_pow+0xa48>)
   25f76:	4b4d      	ldr	r3, [pc, #308]	; (260ac <__ieee754_pow+0xa2c>)
   25f78:	f001 ffde 	bl	27f38 <__aeabi_dmul>
   25f7c:	0002      	movs	r2, r0
   25f7e:	000b      	movs	r3, r1
   25f80:	9802      	ldr	r0, [sp, #8]
   25f82:	9903      	ldr	r1, [sp, #12]
   25f84:	f002 fa58 	bl	28438 <__aeabi_dsub>
   25f88:	0002      	movs	r2, r0
   25f8a:	000b      	movs	r3, r1
   25f8c:	0004      	movs	r4, r0
   25f8e:	000d      	movs	r5, r1
   25f90:	0030      	movs	r0, r6
   25f92:	0039      	movs	r1, r7
   25f94:	f001 f88c 	bl	270b0 <__aeabi_dadd>
   25f98:	2000      	movs	r0, #0
   25f9a:	0032      	movs	r2, r6
   25f9c:	003b      	movs	r3, r7
   25f9e:	9002      	str	r0, [sp, #8]
   25fa0:	9103      	str	r1, [sp, #12]
   25fa2:	f002 fa49 	bl	28438 <__aeabi_dsub>
   25fa6:	0002      	movs	r2, r0
   25fa8:	000b      	movs	r3, r1
   25faa:	0020      	movs	r0, r4
   25fac:	0029      	movs	r1, r5
   25fae:	f002 fa43 	bl	28438 <__aeabi_dsub>
   25fb2:	9004      	str	r0, [sp, #16]
   25fb4:	9105      	str	r1, [sp, #20]
   25fb6:	e5d9      	b.n	25b6c <__ieee754_pow+0x4ec>
   25fb8:	4a44      	ldr	r2, [pc, #272]	; (260cc <__ieee754_pow+0xa4c>)
   25fba:	4b45      	ldr	r3, [pc, #276]	; (260d0 <__ieee754_pow+0xa50>)
   25fbc:	9806      	ldr	r0, [sp, #24]
   25fbe:	9907      	ldr	r1, [sp, #28]
   25fc0:	f001 ffba 	bl	27f38 <__aeabi_dmul>
   25fc4:	4a41      	ldr	r2, [pc, #260]	; (260cc <__ieee754_pow+0xa4c>)
   25fc6:	4b42      	ldr	r3, [pc, #264]	; (260d0 <__ieee754_pow+0xa50>)
   25fc8:	f001 ffb6 	bl	27f38 <__aeabi_dmul>
   25fcc:	f7ff fba0 	bl	25710 <__ieee754_pow+0x90>
   25fd0:	2a00      	cmp	r2, #0
   25fd2:	d001      	beq.n	25fd8 <__ieee754_pow+0x958>
   25fd4:	f7ff fba9 	bl	2572a <__ieee754_pow+0xaa>
   25fd8:	3214      	adds	r2, #20
   25fda:	1ad3      	subs	r3, r2, r3
   25fdc:	002a      	movs	r2, r5
   25fde:	411a      	asrs	r2, r3
   25fe0:	0011      	movs	r1, r2
   25fe2:	4099      	lsls	r1, r3
   25fe4:	428d      	cmp	r5, r1
   25fe6:	d001      	beq.n	25fec <__ieee754_pow+0x96c>
   25fe8:	f7ff fb76 	bl	256d8 <__ieee754_pow+0x58>
   25fec:	2301      	movs	r3, #1
   25fee:	401a      	ands	r2, r3
   25ff0:	18db      	adds	r3, r3, r3
   25ff2:	1a9b      	subs	r3, r3, r2
   25ff4:	469b      	mov	fp, r3
   25ff6:	f7ff fb6f 	bl	256d8 <__ieee754_pow+0x58>
   25ffa:	2200      	movs	r2, #0
   25ffc:	4b31      	ldr	r3, [pc, #196]	; (260c4 <__ieee754_pow+0xa44>)
   25ffe:	4690      	mov	r8, r2
   26000:	4691      	mov	r9, r2
   26002:	459a      	cmp	sl, r3
   26004:	dc00      	bgt.n	26008 <__ieee754_pow+0x988>
   26006:	e67b      	b.n	25d00 <__ieee754_pow+0x680>
   26008:	e645      	b.n	25c96 <__ieee754_pow+0x616>
   2600a:	0002      	movs	r2, r0
   2600c:	000b      	movs	r3, r1
   2600e:	f002 fa13 	bl	28438 <__aeabi_dsub>
   26012:	0002      	movs	r2, r0
   26014:	000b      	movs	r3, r1
   26016:	f001 fb5b 	bl	276d0 <__aeabi_ddiv>
   2601a:	f7ff fb79 	bl	25710 <__ieee754_pow+0x90>
   2601e:	2380      	movs	r3, #128	; 0x80
   26020:	4c2c      	ldr	r4, [pc, #176]	; (260d4 <__ieee754_pow+0xa54>)
   26022:	05db      	lsls	r3, r3, #23
   26024:	9308      	str	r3, [sp, #32]
   26026:	9409      	str	r4, [sp, #36]	; 0x24
   26028:	4b2b      	ldr	r3, [pc, #172]	; (260d8 <__ieee754_pow+0xa58>)
   2602a:	4c2c      	ldr	r4, [pc, #176]	; (260dc <__ieee754_pow+0xa5c>)
   2602c:	2200      	movs	r2, #0
   2602e:	930c      	str	r3, [sp, #48]	; 0x30
   26030:	940d      	str	r4, [sp, #52]	; 0x34
   26032:	2480      	movs	r4, #128	; 0x80
   26034:	4b2a      	ldr	r3, [pc, #168]	; (260e0 <__ieee754_pow+0xa60>)
   26036:	02e4      	lsls	r4, r4, #11
   26038:	9206      	str	r2, [sp, #24]
   2603a:	9307      	str	r3, [sp, #28]
   2603c:	e449      	b.n	258d2 <__ieee754_pow+0x252>
   2603e:	464b      	mov	r3, r9
   26040:	425b      	negs	r3, r3
   26042:	4699      	mov	r9, r3
   26044:	e64a      	b.n	25cdc <__ieee754_pow+0x65c>
   26046:	46c0      	nop			; (mov r8, r8)
   26048:	fffffc02 	.word	0xfffffc02
   2604c:	fffffc01 	.word	0xfffffc01
   26050:	000fffff 	.word	0x000fffff
   26054:	3fe62e43 	.word	0x3fe62e43
   26058:	fefa39ef 	.word	0xfefa39ef
   2605c:	3fe62e42 	.word	0x3fe62e42
   26060:	0ca86c39 	.word	0x0ca86c39
   26064:	be205c61 	.word	0xbe205c61
   26068:	72bea4d0 	.word	0x72bea4d0
   2606c:	3e663769 	.word	0x3e663769
   26070:	c5d26bf1 	.word	0xc5d26bf1
   26074:	3ebbbd41 	.word	0x3ebbbd41
   26078:	af25de2c 	.word	0xaf25de2c
   2607c:	3f11566a 	.word	0x3f11566a
   26080:	16bebd93 	.word	0x16bebd93
   26084:	3f66c16c 	.word	0x3f66c16c
   26088:	5555553e 	.word	0x5555553e
   2608c:	3fc55555 	.word	0x3fc55555
   26090:	3ff00000 	.word	0x3ff00000
   26094:	4090cbff 	.word	0x4090cbff
   26098:	3f6f3400 	.word	0x3f6f3400
   2609c:	c2f8f359 	.word	0xc2f8f359
   260a0:	01a56e1f 	.word	0x01a56e1f
   260a4:	bff00000 	.word	0xbff00000
   260a8:	3feffffe 	.word	0x3feffffe
   260ac:	3ff71547 	.word	0x3ff71547
   260b0:	f85ddf44 	.word	0xf85ddf44
   260b4:	3e54ae0b 	.word	0x3e54ae0b
   260b8:	3fd00000 	.word	0x3fd00000
   260bc:	55555555 	.word	0x55555555
   260c0:	3fd55555 	.word	0x3fd55555
   260c4:	3fe00000 	.word	0x3fe00000
   260c8:	652b82fe 	.word	0x652b82fe
   260cc:	8800759c 	.word	0x8800759c
   260d0:	7e37e43c 	.word	0x7e37e43c
   260d4:	3fe2b803 	.word	0x3fe2b803
   260d8:	43cfd006 	.word	0x43cfd006
   260dc:	3e4cfdeb 	.word	0x3e4cfdeb
   260e0:	3ff80000 	.word	0x3ff80000
   260e4:	464a      	mov	r2, r9
   260e6:	f000 f999 	bl	2641c <scalbn>
   260ea:	e6b2      	b.n	25e52 <__ieee754_pow+0x7d2>

000260ec <__ieee754_sqrt>:
   260ec:	4b6c      	ldr	r3, [pc, #432]	; (262a0 <__ieee754_sqrt+0x1b4>)
   260ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   260f0:	000a      	movs	r2, r1
   260f2:	4646      	mov	r6, r8
   260f4:	000d      	movs	r5, r1
   260f6:	46d6      	mov	lr, sl
   260f8:	464f      	mov	r7, r9
   260fa:	0019      	movs	r1, r3
   260fc:	b5c0      	push	{r6, r7, lr}
   260fe:	0004      	movs	r4, r0
   26100:	0006      	movs	r6, r0
   26102:	4029      	ands	r1, r5
   26104:	4299      	cmp	r1, r3
   26106:	d100      	bne.n	2610a <__ieee754_sqrt+0x1e>
   26108:	e0a7      	b.n	2625a <__ieee754_sqrt+0x16e>
   2610a:	2d00      	cmp	r5, #0
   2610c:	dc00      	bgt.n	26110 <__ieee754_sqrt+0x24>
   2610e:	e081      	b.n	26214 <__ieee754_sqrt+0x128>
   26110:	152f      	asrs	r7, r5, #20
   26112:	d100      	bne.n	26116 <__ieee754_sqrt+0x2a>
   26114:	e08e      	b.n	26234 <__ieee754_sqrt+0x148>
   26116:	4b63      	ldr	r3, [pc, #396]	; (262a4 <__ieee754_sqrt+0x1b8>)
   26118:	0312      	lsls	r2, r2, #12
   2611a:	469c      	mov	ip, r3
   2611c:	2380      	movs	r3, #128	; 0x80
   2611e:	0b12      	lsrs	r2, r2, #12
   26120:	035b      	lsls	r3, r3, #13
   26122:	4467      	add	r7, ip
   26124:	431a      	orrs	r2, r3
   26126:	07fb      	lsls	r3, r7, #31
   26128:	d468      	bmi.n	261fc <__ieee754_sqrt+0x110>
   2612a:	107b      	asrs	r3, r7, #1
   2612c:	469c      	mov	ip, r3
   2612e:	0fe3      	lsrs	r3, r4, #31
   26130:	189b      	adds	r3, r3, r2
   26132:	189b      	adds	r3, r3, r2
   26134:	2280      	movs	r2, #128	; 0x80
   26136:	2116      	movs	r1, #22
   26138:	2600      	movs	r6, #0
   2613a:	2500      	movs	r5, #0
   2613c:	0064      	lsls	r4, r4, #1
   2613e:	0392      	lsls	r2, r2, #14
   26140:	18a8      	adds	r0, r5, r2
   26142:	4298      	cmp	r0, r3
   26144:	dc02      	bgt.n	2614c <__ieee754_sqrt+0x60>
   26146:	1885      	adds	r5, r0, r2
   26148:	1a1b      	subs	r3, r3, r0
   2614a:	18b6      	adds	r6, r6, r2
   2614c:	0fe0      	lsrs	r0, r4, #31
   2614e:	005b      	lsls	r3, r3, #1
   26150:	3901      	subs	r1, #1
   26152:	181b      	adds	r3, r3, r0
   26154:	0064      	lsls	r4, r4, #1
   26156:	0852      	lsrs	r2, r2, #1
   26158:	2900      	cmp	r1, #0
   2615a:	d1f1      	bne.n	26140 <__ieee754_sqrt+0x54>
   2615c:	2200      	movs	r2, #0
   2615e:	4692      	mov	sl, r2
   26160:	4690      	mov	r8, r2
   26162:	2280      	movs	r2, #128	; 0x80
   26164:	2020      	movs	r0, #32
   26166:	0612      	lsls	r2, r2, #24
   26168:	e009      	b.n	2617e <__ieee754_sqrt+0x92>
   2616a:	42ab      	cmp	r3, r5
   2616c:	d038      	beq.n	261e0 <__ieee754_sqrt+0xf4>
   2616e:	0fe1      	lsrs	r1, r4, #31
   26170:	18c9      	adds	r1, r1, r3
   26172:	3801      	subs	r0, #1
   26174:	18cb      	adds	r3, r1, r3
   26176:	0064      	lsls	r4, r4, #1
   26178:	0852      	lsrs	r2, r2, #1
   2617a:	2800      	cmp	r0, #0
   2617c:	d018      	beq.n	261b0 <__ieee754_sqrt+0xc4>
   2617e:	4641      	mov	r1, r8
   26180:	1851      	adds	r1, r2, r1
   26182:	42ab      	cmp	r3, r5
   26184:	ddf1      	ble.n	2616a <__ieee754_sqrt+0x7e>
   26186:	188f      	adds	r7, r1, r2
   26188:	46b8      	mov	r8, r7
   2618a:	46a9      	mov	r9, r5
   2618c:	2900      	cmp	r1, #0
   2618e:	db30      	blt.n	261f2 <__ieee754_sqrt+0x106>
   26190:	1b5b      	subs	r3, r3, r5
   26192:	428c      	cmp	r4, r1
   26194:	41ad      	sbcs	r5, r5
   26196:	426d      	negs	r5, r5
   26198:	1b5b      	subs	r3, r3, r5
   2619a:	1a64      	subs	r4, r4, r1
   2619c:	0fe1      	lsrs	r1, r4, #31
   2619e:	18c9      	adds	r1, r1, r3
   261a0:	3801      	subs	r0, #1
   261a2:	4492      	add	sl, r2
   261a4:	464d      	mov	r5, r9
   261a6:	18cb      	adds	r3, r1, r3
   261a8:	0064      	lsls	r4, r4, #1
   261aa:	0852      	lsrs	r2, r2, #1
   261ac:	2800      	cmp	r0, #0
   261ae:	d1e6      	bne.n	2617e <__ieee754_sqrt+0x92>
   261b0:	4323      	orrs	r3, r4
   261b2:	d128      	bne.n	26206 <__ieee754_sqrt+0x11a>
   261b4:	4653      	mov	r3, sl
   261b6:	085b      	lsrs	r3, r3, #1
   261b8:	493b      	ldr	r1, [pc, #236]	; (262a8 <__ieee754_sqrt+0x1bc>)
   261ba:	1072      	asrs	r2, r6, #1
   261bc:	4688      	mov	r8, r1
   261be:	4442      	add	r2, r8
   261c0:	07f1      	lsls	r1, r6, #31
   261c2:	d502      	bpl.n	261ca <__ieee754_sqrt+0xde>
   261c4:	2180      	movs	r1, #128	; 0x80
   261c6:	0609      	lsls	r1, r1, #24
   261c8:	430b      	orrs	r3, r1
   261ca:	4661      	mov	r1, ip
   261cc:	001e      	movs	r6, r3
   261ce:	050f      	lsls	r7, r1, #20
   261d0:	18bd      	adds	r5, r7, r2
   261d2:	0030      	movs	r0, r6
   261d4:	0029      	movs	r1, r5
   261d6:	bc1c      	pop	{r2, r3, r4}
   261d8:	4690      	mov	r8, r2
   261da:	4699      	mov	r9, r3
   261dc:	46a2      	mov	sl, r4
   261de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   261e0:	42a1      	cmp	r1, r4
   261e2:	d8c4      	bhi.n	2616e <__ieee754_sqrt+0x82>
   261e4:	188f      	adds	r7, r1, r2
   261e6:	46b8      	mov	r8, r7
   261e8:	2900      	cmp	r1, #0
   261ea:	db42      	blt.n	26272 <__ieee754_sqrt+0x186>
   261ec:	4699      	mov	r9, r3
   261ee:	2300      	movs	r3, #0
   261f0:	e7d3      	b.n	2619a <__ieee754_sqrt+0xae>
   261f2:	2f00      	cmp	r7, #0
   261f4:	db2f      	blt.n	26256 <__ieee754_sqrt+0x16a>
   261f6:	1c6f      	adds	r7, r5, #1
   261f8:	46b9      	mov	r9, r7
   261fa:	e7c9      	b.n	26190 <__ieee754_sqrt+0xa4>
   261fc:	0fe1      	lsrs	r1, r4, #31
   261fe:	0052      	lsls	r2, r2, #1
   26200:	188a      	adds	r2, r1, r2
   26202:	0064      	lsls	r4, r4, #1
   26204:	e791      	b.n	2612a <__ieee754_sqrt+0x3e>
   26206:	4653      	mov	r3, sl
   26208:	3301      	adds	r3, #1
   2620a:	d035      	beq.n	26278 <__ieee754_sqrt+0x18c>
   2620c:	4653      	mov	r3, sl
   2620e:	3301      	adds	r3, #1
   26210:	085b      	lsrs	r3, r3, #1
   26212:	e7d1      	b.n	261b8 <__ieee754_sqrt+0xcc>
   26214:	006b      	lsls	r3, r5, #1
   26216:	085b      	lsrs	r3, r3, #1
   26218:	4303      	orrs	r3, r0
   2621a:	d0da      	beq.n	261d2 <__ieee754_sqrt+0xe6>
   2621c:	2700      	movs	r7, #0
   2621e:	2d00      	cmp	r5, #0
   26220:	d132      	bne.n	26288 <__ieee754_sqrt+0x19c>
   26222:	0ae2      	lsrs	r2, r4, #11
   26224:	3f15      	subs	r7, #21
   26226:	0564      	lsls	r4, r4, #21
   26228:	2a00      	cmp	r2, #0
   2622a:	d0fa      	beq.n	26222 <__ieee754_sqrt+0x136>
   2622c:	2380      	movs	r3, #128	; 0x80
   2622e:	035b      	lsls	r3, r3, #13
   26230:	421a      	tst	r2, r3
   26232:	d124      	bne.n	2627e <__ieee754_sqrt+0x192>
   26234:	2080      	movs	r0, #128	; 0x80
   26236:	2300      	movs	r3, #0
   26238:	0340      	lsls	r0, r0, #13
   2623a:	e000      	b.n	2623e <__ieee754_sqrt+0x152>
   2623c:	000b      	movs	r3, r1
   2623e:	0052      	lsls	r2, r2, #1
   26240:	1c59      	adds	r1, r3, #1
   26242:	4202      	tst	r2, r0
   26244:	d0fa      	beq.n	2623c <__ieee754_sqrt+0x150>
   26246:	2020      	movs	r0, #32
   26248:	1a40      	subs	r0, r0, r1
   2624a:	1aff      	subs	r7, r7, r3
   2624c:	0023      	movs	r3, r4
   2624e:	40c3      	lsrs	r3, r0
   26250:	408c      	lsls	r4, r1
   26252:	431a      	orrs	r2, r3
   26254:	e75f      	b.n	26116 <__ieee754_sqrt+0x2a>
   26256:	46a9      	mov	r9, r5
   26258:	e79a      	b.n	26190 <__ieee754_sqrt+0xa4>
   2625a:	002b      	movs	r3, r5
   2625c:	0002      	movs	r2, r0
   2625e:	0029      	movs	r1, r5
   26260:	f001 fe6a 	bl	27f38 <__aeabi_dmul>
   26264:	0032      	movs	r2, r6
   26266:	002b      	movs	r3, r5
   26268:	f000 ff22 	bl	270b0 <__aeabi_dadd>
   2626c:	0006      	movs	r6, r0
   2626e:	000d      	movs	r5, r1
   26270:	e7af      	b.n	261d2 <__ieee754_sqrt+0xe6>
   26272:	2f00      	cmp	r7, #0
   26274:	dabf      	bge.n	261f6 <__ieee754_sqrt+0x10a>
   26276:	e7b9      	b.n	261ec <__ieee754_sqrt+0x100>
   26278:	3601      	adds	r6, #1
   2627a:	2300      	movs	r3, #0
   2627c:	e79c      	b.n	261b8 <__ieee754_sqrt+0xcc>
   2627e:	2301      	movs	r3, #1
   26280:	2100      	movs	r1, #0
   26282:	2020      	movs	r0, #32
   26284:	425b      	negs	r3, r3
   26286:	e7e0      	b.n	2624a <__ieee754_sqrt+0x15e>
   26288:	002b      	movs	r3, r5
   2628a:	0002      	movs	r2, r0
   2628c:	0029      	movs	r1, r5
   2628e:	f002 f8d3 	bl	28438 <__aeabi_dsub>
   26292:	0002      	movs	r2, r0
   26294:	000b      	movs	r3, r1
   26296:	f001 fa1b 	bl	276d0 <__aeabi_ddiv>
   2629a:	0006      	movs	r6, r0
   2629c:	000d      	movs	r5, r1
   2629e:	e798      	b.n	261d2 <__ieee754_sqrt+0xe6>
   262a0:	7ff00000 	.word	0x7ff00000
   262a4:	fffffc01 	.word	0xfffffc01
   262a8:	3fe00000 	.word	0x3fe00000

000262ac <fabs>:
   262ac:	0049      	lsls	r1, r1, #1
   262ae:	084b      	lsrs	r3, r1, #1
   262b0:	0019      	movs	r1, r3
   262b2:	4770      	bx	lr

000262b4 <finite>:
   262b4:	4b03      	ldr	r3, [pc, #12]	; (262c4 <finite+0x10>)
   262b6:	0048      	lsls	r0, r1, #1
   262b8:	469c      	mov	ip, r3
   262ba:	0840      	lsrs	r0, r0, #1
   262bc:	4460      	add	r0, ip
   262be:	0fc0      	lsrs	r0, r0, #31
   262c0:	4770      	bx	lr
   262c2:	46c0      	nop			; (mov r8, r8)
   262c4:	80100000 	.word	0x80100000

000262c8 <matherr>:
   262c8:	2000      	movs	r0, #0
   262ca:	4770      	bx	lr

000262cc <nan>:
   262cc:	2000      	movs	r0, #0
   262ce:	4901      	ldr	r1, [pc, #4]	; (262d4 <nan+0x8>)
   262d0:	4770      	bx	lr
   262d2:	46c0      	nop			; (mov r8, r8)
   262d4:	7ff80000 	.word	0x7ff80000

000262d8 <rint>:
   262d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   262da:	46c6      	mov	lr, r8
   262dc:	b500      	push	{lr}
   262de:	0fcb      	lsrs	r3, r1, #31
   262e0:	4698      	mov	r8, r3
   262e2:	4c4a      	ldr	r4, [pc, #296]	; (2640c <rint+0x134>)
   262e4:	004b      	lsls	r3, r1, #1
   262e6:	0d5b      	lsrs	r3, r3, #21
   262e8:	191e      	adds	r6, r3, r4
   262ea:	b082      	sub	sp, #8
   262ec:	0007      	movs	r7, r0
   262ee:	000a      	movs	r2, r1
   262f0:	2e13      	cmp	r6, #19
   262f2:	dc35      	bgt.n	26360 <rint+0x88>
   262f4:	2e00      	cmp	r6, #0
   262f6:	db57      	blt.n	263a8 <rint+0xd0>
   262f8:	4b45      	ldr	r3, [pc, #276]	; (26410 <rint+0x138>)
   262fa:	0004      	movs	r4, r0
   262fc:	4133      	asrs	r3, r6
   262fe:	001f      	movs	r7, r3
   26300:	400f      	ands	r7, r1
   26302:	4307      	orrs	r7, r0
   26304:	000d      	movs	r5, r1
   26306:	2f00      	cmp	r7, #0
   26308:	d024      	beq.n	26354 <rint+0x7c>
   2630a:	085b      	lsrs	r3, r3, #1
   2630c:	001c      	movs	r4, r3
   2630e:	400c      	ands	r4, r1
   26310:	4320      	orrs	r0, r4
   26312:	2700      	movs	r7, #0
   26314:	2800      	cmp	r0, #0
   26316:	d007      	beq.n	26328 <rint+0x50>
   26318:	2e13      	cmp	r6, #19
   2631a:	d100      	bne.n	2631e <rint+0x46>
   2631c:	e073      	b.n	26406 <rint+0x12e>
   2631e:	2280      	movs	r2, #128	; 0x80
   26320:	02d2      	lsls	r2, r2, #11
   26322:	4132      	asrs	r2, r6
   26324:	4399      	bics	r1, r3
   26326:	430a      	orrs	r2, r1
   26328:	4643      	mov	r3, r8
   2632a:	00de      	lsls	r6, r3, #3
   2632c:	4b39      	ldr	r3, [pc, #228]	; (26414 <rint+0x13c>)
   2632e:	0011      	movs	r1, r2
   26330:	199e      	adds	r6, r3, r6
   26332:	6834      	ldr	r4, [r6, #0]
   26334:	6875      	ldr	r5, [r6, #4]
   26336:	0038      	movs	r0, r7
   26338:	0022      	movs	r2, r4
   2633a:	002b      	movs	r3, r5
   2633c:	f000 feb8 	bl	270b0 <__aeabi_dadd>
   26340:	9000      	str	r0, [sp, #0]
   26342:	9101      	str	r1, [sp, #4]
   26344:	9800      	ldr	r0, [sp, #0]
   26346:	9901      	ldr	r1, [sp, #4]
   26348:	0022      	movs	r2, r4
   2634a:	002b      	movs	r3, r5
   2634c:	f002 f874 	bl	28438 <__aeabi_dsub>
   26350:	0004      	movs	r4, r0
   26352:	000d      	movs	r5, r1
   26354:	0020      	movs	r0, r4
   26356:	0029      	movs	r1, r5
   26358:	b002      	add	sp, #8
   2635a:	bc04      	pop	{r2}
   2635c:	4690      	mov	r8, r2
   2635e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26360:	2e33      	cmp	r6, #51	; 0x33
   26362:	dd0c      	ble.n	2637e <rint+0xa6>
   26364:	2380      	movs	r3, #128	; 0x80
   26366:	0004      	movs	r4, r0
   26368:	00db      	lsls	r3, r3, #3
   2636a:	000d      	movs	r5, r1
   2636c:	429e      	cmp	r6, r3
   2636e:	d1f1      	bne.n	26354 <rint+0x7c>
   26370:	0002      	movs	r2, r0
   26372:	000b      	movs	r3, r1
   26374:	f000 fe9c 	bl	270b0 <__aeabi_dadd>
   26378:	0004      	movs	r4, r0
   2637a:	000d      	movs	r5, r1
   2637c:	e7ea      	b.n	26354 <rint+0x7c>
   2637e:	4c26      	ldr	r4, [pc, #152]	; (26418 <rint+0x140>)
   26380:	000d      	movs	r5, r1
   26382:	46a4      	mov	ip, r4
   26384:	2401      	movs	r4, #1
   26386:	4463      	add	r3, ip
   26388:	4264      	negs	r4, r4
   2638a:	40dc      	lsrs	r4, r3
   2638c:	46a4      	mov	ip, r4
   2638e:	4661      	mov	r1, ip
   26390:	0004      	movs	r4, r0
   26392:	4201      	tst	r1, r0
   26394:	d0de      	beq.n	26354 <rint+0x7c>
   26396:	0849      	lsrs	r1, r1, #1
   26398:	4201      	tst	r1, r0
   2639a:	d0c5      	beq.n	26328 <rint+0x50>
   2639c:	2780      	movs	r7, #128	; 0x80
   2639e:	05ff      	lsls	r7, r7, #23
   263a0:	411f      	asrs	r7, r3
   263a2:	4388      	bics	r0, r1
   263a4:	4307      	orrs	r7, r0
   263a6:	e7bf      	b.n	26328 <rint+0x50>
   263a8:	004b      	lsls	r3, r1, #1
   263aa:	085b      	lsrs	r3, r3, #1
   263ac:	4303      	orrs	r3, r0
   263ae:	0004      	movs	r4, r0
   263b0:	000d      	movs	r5, r1
   263b2:	2b00      	cmp	r3, #0
   263b4:	d0ce      	beq.n	26354 <rint+0x7c>
   263b6:	030b      	lsls	r3, r1, #12
   263b8:	0b1b      	lsrs	r3, r3, #12
   263ba:	4303      	orrs	r3, r0
   263bc:	001a      	movs	r2, r3
   263be:	425b      	negs	r3, r3
   263c0:	4313      	orrs	r3, r2
   263c2:	2280      	movs	r2, #128	; 0x80
   263c4:	0b1b      	lsrs	r3, r3, #12
   263c6:	0312      	lsls	r2, r2, #12
   263c8:	4013      	ands	r3, r2
   263ca:	0c4a      	lsrs	r2, r1, #17
   263cc:	0452      	lsls	r2, r2, #17
   263ce:	4313      	orrs	r3, r2
   263d0:	0019      	movs	r1, r3
   263d2:	4643      	mov	r3, r8
   263d4:	00da      	lsls	r2, r3, #3
   263d6:	4b0f      	ldr	r3, [pc, #60]	; (26414 <rint+0x13c>)
   263d8:	189b      	adds	r3, r3, r2
   263da:	681c      	ldr	r4, [r3, #0]
   263dc:	685d      	ldr	r5, [r3, #4]
   263de:	0022      	movs	r2, r4
   263e0:	002b      	movs	r3, r5
   263e2:	f000 fe65 	bl	270b0 <__aeabi_dadd>
   263e6:	9000      	str	r0, [sp, #0]
   263e8:	9101      	str	r1, [sp, #4]
   263ea:	9800      	ldr	r0, [sp, #0]
   263ec:	9901      	ldr	r1, [sp, #4]
   263ee:	0022      	movs	r2, r4
   263f0:	002b      	movs	r3, r5
   263f2:	f002 f821 	bl	28438 <__aeabi_dsub>
   263f6:	4642      	mov	r2, r8
   263f8:	004b      	lsls	r3, r1, #1
   263fa:	085b      	lsrs	r3, r3, #1
   263fc:	07d6      	lsls	r6, r2, #31
   263fe:	4333      	orrs	r3, r6
   26400:	0004      	movs	r4, r0
   26402:	001d      	movs	r5, r3
   26404:	e7a6      	b.n	26354 <rint+0x7c>
   26406:	2780      	movs	r7, #128	; 0x80
   26408:	063f      	lsls	r7, r7, #24
   2640a:	e788      	b.n	2631e <rint+0x46>
   2640c:	fffffc01 	.word	0xfffffc01
   26410:	000fffff 	.word	0x000fffff
   26414:	0002ac98 	.word	0x0002ac98
   26418:	fffffbed 	.word	0xfffffbed

0002641c <scalbn>:
   2641c:	004b      	lsls	r3, r1, #1
   2641e:	b570      	push	{r4, r5, r6, lr}
   26420:	0d5b      	lsrs	r3, r3, #21
   26422:	0014      	movs	r4, r2
   26424:	000a      	movs	r2, r1
   26426:	2b00      	cmp	r3, #0
   26428:	d11a      	bne.n	26460 <scalbn+0x44>
   2642a:	004b      	lsls	r3, r1, #1
   2642c:	085b      	lsrs	r3, r3, #1
   2642e:	4303      	orrs	r3, r0
   26430:	d015      	beq.n	2645e <scalbn+0x42>
   26432:	2200      	movs	r2, #0
   26434:	4b22      	ldr	r3, [pc, #136]	; (264c0 <scalbn+0xa4>)
   26436:	f001 fd7f 	bl	27f38 <__aeabi_dmul>
   2643a:	4b22      	ldr	r3, [pc, #136]	; (264c4 <scalbn+0xa8>)
   2643c:	000a      	movs	r2, r1
   2643e:	429c      	cmp	r4, r3
   26440:	db22      	blt.n	26488 <scalbn+0x6c>
   26442:	004b      	lsls	r3, r1, #1
   26444:	0d5b      	lsrs	r3, r3, #21
   26446:	3b36      	subs	r3, #54	; 0x36
   26448:	4d1f      	ldr	r5, [pc, #124]	; (264c8 <scalbn+0xac>)
   2644a:	18e3      	adds	r3, r4, r3
   2644c:	42ab      	cmp	r3, r5
   2644e:	dc20      	bgt.n	26492 <scalbn+0x76>
   26450:	2b00      	cmp	r3, #0
   26452:	dd0d      	ble.n	26470 <scalbn+0x54>
   26454:	4c1d      	ldr	r4, [pc, #116]	; (264cc <scalbn+0xb0>)
   26456:	051b      	lsls	r3, r3, #20
   26458:	4022      	ands	r2, r4
   2645a:	431a      	orrs	r2, r3
   2645c:	0011      	movs	r1, r2
   2645e:	bd70      	pop	{r4, r5, r6, pc}
   26460:	4d1b      	ldr	r5, [pc, #108]	; (264d0 <scalbn+0xb4>)
   26462:	42ab      	cmp	r3, r5
   26464:	d1f0      	bne.n	26448 <scalbn+0x2c>
   26466:	0002      	movs	r2, r0
   26468:	000b      	movs	r3, r1
   2646a:	f000 fe21 	bl	270b0 <__aeabi_dadd>
   2646e:	e7f6      	b.n	2645e <scalbn+0x42>
   26470:	001d      	movs	r5, r3
   26472:	3535      	adds	r5, #53	; 0x35
   26474:	da18      	bge.n	264a8 <scalbn+0x8c>
   26476:	4b17      	ldr	r3, [pc, #92]	; (264d4 <scalbn+0xb8>)
   26478:	0002      	movs	r2, r0
   2647a:	429c      	cmp	r4, r3
   2647c:	dc0a      	bgt.n	26494 <scalbn+0x78>
   2647e:	000b      	movs	r3, r1
   26480:	4815      	ldr	r0, [pc, #84]	; (264d8 <scalbn+0xbc>)
   26482:	4916      	ldr	r1, [pc, #88]	; (264dc <scalbn+0xc0>)
   26484:	f000 f832 	bl	264ec <copysign>
   26488:	4a13      	ldr	r2, [pc, #76]	; (264d8 <scalbn+0xbc>)
   2648a:	4b14      	ldr	r3, [pc, #80]	; (264dc <scalbn+0xc0>)
   2648c:	f001 fd54 	bl	27f38 <__aeabi_dmul>
   26490:	e7e5      	b.n	2645e <scalbn+0x42>
   26492:	0002      	movs	r2, r0
   26494:	000b      	movs	r3, r1
   26496:	4812      	ldr	r0, [pc, #72]	; (264e0 <scalbn+0xc4>)
   26498:	4912      	ldr	r1, [pc, #72]	; (264e4 <scalbn+0xc8>)
   2649a:	f000 f827 	bl	264ec <copysign>
   2649e:	4a10      	ldr	r2, [pc, #64]	; (264e0 <scalbn+0xc4>)
   264a0:	4b10      	ldr	r3, [pc, #64]	; (264e4 <scalbn+0xc8>)
   264a2:	f001 fd49 	bl	27f38 <__aeabi_dmul>
   264a6:	e7da      	b.n	2645e <scalbn+0x42>
   264a8:	4c08      	ldr	r4, [pc, #32]	; (264cc <scalbn+0xb0>)
   264aa:	3336      	adds	r3, #54	; 0x36
   264ac:	4022      	ands	r2, r4
   264ae:	051b      	lsls	r3, r3, #20
   264b0:	4313      	orrs	r3, r2
   264b2:	0019      	movs	r1, r3
   264b4:	2200      	movs	r2, #0
   264b6:	4b0c      	ldr	r3, [pc, #48]	; (264e8 <scalbn+0xcc>)
   264b8:	f001 fd3e 	bl	27f38 <__aeabi_dmul>
   264bc:	e7cf      	b.n	2645e <scalbn+0x42>
   264be:	46c0      	nop			; (mov r8, r8)
   264c0:	43500000 	.word	0x43500000
   264c4:	ffff3cb0 	.word	0xffff3cb0
   264c8:	000007fe 	.word	0x000007fe
   264cc:	800fffff 	.word	0x800fffff
   264d0:	000007ff 	.word	0x000007ff
   264d4:	0000c350 	.word	0x0000c350
   264d8:	c2f8f359 	.word	0xc2f8f359
   264dc:	01a56e1f 	.word	0x01a56e1f
   264e0:	8800759c 	.word	0x8800759c
   264e4:	7e37e43c 	.word	0x7e37e43c
   264e8:	3c900000 	.word	0x3c900000

000264ec <copysign>:
   264ec:	b530      	push	{r4, r5, lr}
   264ee:	004a      	lsls	r2, r1, #1
   264f0:	0fdb      	lsrs	r3, r3, #31
   264f2:	07db      	lsls	r3, r3, #31
   264f4:	0852      	lsrs	r2, r2, #1
   264f6:	431a      	orrs	r2, r3
   264f8:	0011      	movs	r1, r2
   264fa:	bd30      	pop	{r4, r5, pc}

000264fc <__udivsi3>:
   264fc:	2200      	movs	r2, #0
   264fe:	0843      	lsrs	r3, r0, #1
   26500:	428b      	cmp	r3, r1
   26502:	d374      	bcc.n	265ee <__udivsi3+0xf2>
   26504:	0903      	lsrs	r3, r0, #4
   26506:	428b      	cmp	r3, r1
   26508:	d35f      	bcc.n	265ca <__udivsi3+0xce>
   2650a:	0a03      	lsrs	r3, r0, #8
   2650c:	428b      	cmp	r3, r1
   2650e:	d344      	bcc.n	2659a <__udivsi3+0x9e>
   26510:	0b03      	lsrs	r3, r0, #12
   26512:	428b      	cmp	r3, r1
   26514:	d328      	bcc.n	26568 <__udivsi3+0x6c>
   26516:	0c03      	lsrs	r3, r0, #16
   26518:	428b      	cmp	r3, r1
   2651a:	d30d      	bcc.n	26538 <__udivsi3+0x3c>
   2651c:	22ff      	movs	r2, #255	; 0xff
   2651e:	0209      	lsls	r1, r1, #8
   26520:	ba12      	rev	r2, r2
   26522:	0c03      	lsrs	r3, r0, #16
   26524:	428b      	cmp	r3, r1
   26526:	d302      	bcc.n	2652e <__udivsi3+0x32>
   26528:	1212      	asrs	r2, r2, #8
   2652a:	0209      	lsls	r1, r1, #8
   2652c:	d065      	beq.n	265fa <__udivsi3+0xfe>
   2652e:	0b03      	lsrs	r3, r0, #12
   26530:	428b      	cmp	r3, r1
   26532:	d319      	bcc.n	26568 <__udivsi3+0x6c>
   26534:	e000      	b.n	26538 <__udivsi3+0x3c>
   26536:	0a09      	lsrs	r1, r1, #8
   26538:	0bc3      	lsrs	r3, r0, #15
   2653a:	428b      	cmp	r3, r1
   2653c:	d301      	bcc.n	26542 <__udivsi3+0x46>
   2653e:	03cb      	lsls	r3, r1, #15
   26540:	1ac0      	subs	r0, r0, r3
   26542:	4152      	adcs	r2, r2
   26544:	0b83      	lsrs	r3, r0, #14
   26546:	428b      	cmp	r3, r1
   26548:	d301      	bcc.n	2654e <__udivsi3+0x52>
   2654a:	038b      	lsls	r3, r1, #14
   2654c:	1ac0      	subs	r0, r0, r3
   2654e:	4152      	adcs	r2, r2
   26550:	0b43      	lsrs	r3, r0, #13
   26552:	428b      	cmp	r3, r1
   26554:	d301      	bcc.n	2655a <__udivsi3+0x5e>
   26556:	034b      	lsls	r3, r1, #13
   26558:	1ac0      	subs	r0, r0, r3
   2655a:	4152      	adcs	r2, r2
   2655c:	0b03      	lsrs	r3, r0, #12
   2655e:	428b      	cmp	r3, r1
   26560:	d301      	bcc.n	26566 <__udivsi3+0x6a>
   26562:	030b      	lsls	r3, r1, #12
   26564:	1ac0      	subs	r0, r0, r3
   26566:	4152      	adcs	r2, r2
   26568:	0ac3      	lsrs	r3, r0, #11
   2656a:	428b      	cmp	r3, r1
   2656c:	d301      	bcc.n	26572 <__udivsi3+0x76>
   2656e:	02cb      	lsls	r3, r1, #11
   26570:	1ac0      	subs	r0, r0, r3
   26572:	4152      	adcs	r2, r2
   26574:	0a83      	lsrs	r3, r0, #10
   26576:	428b      	cmp	r3, r1
   26578:	d301      	bcc.n	2657e <__udivsi3+0x82>
   2657a:	028b      	lsls	r3, r1, #10
   2657c:	1ac0      	subs	r0, r0, r3
   2657e:	4152      	adcs	r2, r2
   26580:	0a43      	lsrs	r3, r0, #9
   26582:	428b      	cmp	r3, r1
   26584:	d301      	bcc.n	2658a <__udivsi3+0x8e>
   26586:	024b      	lsls	r3, r1, #9
   26588:	1ac0      	subs	r0, r0, r3
   2658a:	4152      	adcs	r2, r2
   2658c:	0a03      	lsrs	r3, r0, #8
   2658e:	428b      	cmp	r3, r1
   26590:	d301      	bcc.n	26596 <__udivsi3+0x9a>
   26592:	020b      	lsls	r3, r1, #8
   26594:	1ac0      	subs	r0, r0, r3
   26596:	4152      	adcs	r2, r2
   26598:	d2cd      	bcs.n	26536 <__udivsi3+0x3a>
   2659a:	09c3      	lsrs	r3, r0, #7
   2659c:	428b      	cmp	r3, r1
   2659e:	d301      	bcc.n	265a4 <__udivsi3+0xa8>
   265a0:	01cb      	lsls	r3, r1, #7
   265a2:	1ac0      	subs	r0, r0, r3
   265a4:	4152      	adcs	r2, r2
   265a6:	0983      	lsrs	r3, r0, #6
   265a8:	428b      	cmp	r3, r1
   265aa:	d301      	bcc.n	265b0 <__udivsi3+0xb4>
   265ac:	018b      	lsls	r3, r1, #6
   265ae:	1ac0      	subs	r0, r0, r3
   265b0:	4152      	adcs	r2, r2
   265b2:	0943      	lsrs	r3, r0, #5
   265b4:	428b      	cmp	r3, r1
   265b6:	d301      	bcc.n	265bc <__udivsi3+0xc0>
   265b8:	014b      	lsls	r3, r1, #5
   265ba:	1ac0      	subs	r0, r0, r3
   265bc:	4152      	adcs	r2, r2
   265be:	0903      	lsrs	r3, r0, #4
   265c0:	428b      	cmp	r3, r1
   265c2:	d301      	bcc.n	265c8 <__udivsi3+0xcc>
   265c4:	010b      	lsls	r3, r1, #4
   265c6:	1ac0      	subs	r0, r0, r3
   265c8:	4152      	adcs	r2, r2
   265ca:	08c3      	lsrs	r3, r0, #3
   265cc:	428b      	cmp	r3, r1
   265ce:	d301      	bcc.n	265d4 <__udivsi3+0xd8>
   265d0:	00cb      	lsls	r3, r1, #3
   265d2:	1ac0      	subs	r0, r0, r3
   265d4:	4152      	adcs	r2, r2
   265d6:	0883      	lsrs	r3, r0, #2
   265d8:	428b      	cmp	r3, r1
   265da:	d301      	bcc.n	265e0 <__udivsi3+0xe4>
   265dc:	008b      	lsls	r3, r1, #2
   265de:	1ac0      	subs	r0, r0, r3
   265e0:	4152      	adcs	r2, r2
   265e2:	0843      	lsrs	r3, r0, #1
   265e4:	428b      	cmp	r3, r1
   265e6:	d301      	bcc.n	265ec <__udivsi3+0xf0>
   265e8:	004b      	lsls	r3, r1, #1
   265ea:	1ac0      	subs	r0, r0, r3
   265ec:	4152      	adcs	r2, r2
   265ee:	1a41      	subs	r1, r0, r1
   265f0:	d200      	bcs.n	265f4 <__udivsi3+0xf8>
   265f2:	4601      	mov	r1, r0
   265f4:	4152      	adcs	r2, r2
   265f6:	4610      	mov	r0, r2
   265f8:	4770      	bx	lr
   265fa:	e7ff      	b.n	265fc <__udivsi3+0x100>
   265fc:	b501      	push	{r0, lr}
   265fe:	2000      	movs	r0, #0
   26600:	f000 f8f0 	bl	267e4 <__aeabi_idiv0>
   26604:	bd02      	pop	{r1, pc}
   26606:	46c0      	nop			; (mov r8, r8)

00026608 <__aeabi_uidivmod>:
   26608:	2900      	cmp	r1, #0
   2660a:	d0f7      	beq.n	265fc <__udivsi3+0x100>
   2660c:	e776      	b.n	264fc <__udivsi3>
   2660e:	4770      	bx	lr

00026610 <__divsi3>:
   26610:	4603      	mov	r3, r0
   26612:	430b      	orrs	r3, r1
   26614:	d47f      	bmi.n	26716 <__divsi3+0x106>
   26616:	2200      	movs	r2, #0
   26618:	0843      	lsrs	r3, r0, #1
   2661a:	428b      	cmp	r3, r1
   2661c:	d374      	bcc.n	26708 <__divsi3+0xf8>
   2661e:	0903      	lsrs	r3, r0, #4
   26620:	428b      	cmp	r3, r1
   26622:	d35f      	bcc.n	266e4 <__divsi3+0xd4>
   26624:	0a03      	lsrs	r3, r0, #8
   26626:	428b      	cmp	r3, r1
   26628:	d344      	bcc.n	266b4 <__divsi3+0xa4>
   2662a:	0b03      	lsrs	r3, r0, #12
   2662c:	428b      	cmp	r3, r1
   2662e:	d328      	bcc.n	26682 <__divsi3+0x72>
   26630:	0c03      	lsrs	r3, r0, #16
   26632:	428b      	cmp	r3, r1
   26634:	d30d      	bcc.n	26652 <__divsi3+0x42>
   26636:	22ff      	movs	r2, #255	; 0xff
   26638:	0209      	lsls	r1, r1, #8
   2663a:	ba12      	rev	r2, r2
   2663c:	0c03      	lsrs	r3, r0, #16
   2663e:	428b      	cmp	r3, r1
   26640:	d302      	bcc.n	26648 <__divsi3+0x38>
   26642:	1212      	asrs	r2, r2, #8
   26644:	0209      	lsls	r1, r1, #8
   26646:	d065      	beq.n	26714 <__divsi3+0x104>
   26648:	0b03      	lsrs	r3, r0, #12
   2664a:	428b      	cmp	r3, r1
   2664c:	d319      	bcc.n	26682 <__divsi3+0x72>
   2664e:	e000      	b.n	26652 <__divsi3+0x42>
   26650:	0a09      	lsrs	r1, r1, #8
   26652:	0bc3      	lsrs	r3, r0, #15
   26654:	428b      	cmp	r3, r1
   26656:	d301      	bcc.n	2665c <__divsi3+0x4c>
   26658:	03cb      	lsls	r3, r1, #15
   2665a:	1ac0      	subs	r0, r0, r3
   2665c:	4152      	adcs	r2, r2
   2665e:	0b83      	lsrs	r3, r0, #14
   26660:	428b      	cmp	r3, r1
   26662:	d301      	bcc.n	26668 <__divsi3+0x58>
   26664:	038b      	lsls	r3, r1, #14
   26666:	1ac0      	subs	r0, r0, r3
   26668:	4152      	adcs	r2, r2
   2666a:	0b43      	lsrs	r3, r0, #13
   2666c:	428b      	cmp	r3, r1
   2666e:	d301      	bcc.n	26674 <__divsi3+0x64>
   26670:	034b      	lsls	r3, r1, #13
   26672:	1ac0      	subs	r0, r0, r3
   26674:	4152      	adcs	r2, r2
   26676:	0b03      	lsrs	r3, r0, #12
   26678:	428b      	cmp	r3, r1
   2667a:	d301      	bcc.n	26680 <__divsi3+0x70>
   2667c:	030b      	lsls	r3, r1, #12
   2667e:	1ac0      	subs	r0, r0, r3
   26680:	4152      	adcs	r2, r2
   26682:	0ac3      	lsrs	r3, r0, #11
   26684:	428b      	cmp	r3, r1
   26686:	d301      	bcc.n	2668c <__divsi3+0x7c>
   26688:	02cb      	lsls	r3, r1, #11
   2668a:	1ac0      	subs	r0, r0, r3
   2668c:	4152      	adcs	r2, r2
   2668e:	0a83      	lsrs	r3, r0, #10
   26690:	428b      	cmp	r3, r1
   26692:	d301      	bcc.n	26698 <__divsi3+0x88>
   26694:	028b      	lsls	r3, r1, #10
   26696:	1ac0      	subs	r0, r0, r3
   26698:	4152      	adcs	r2, r2
   2669a:	0a43      	lsrs	r3, r0, #9
   2669c:	428b      	cmp	r3, r1
   2669e:	d301      	bcc.n	266a4 <__divsi3+0x94>
   266a0:	024b      	lsls	r3, r1, #9
   266a2:	1ac0      	subs	r0, r0, r3
   266a4:	4152      	adcs	r2, r2
   266a6:	0a03      	lsrs	r3, r0, #8
   266a8:	428b      	cmp	r3, r1
   266aa:	d301      	bcc.n	266b0 <__divsi3+0xa0>
   266ac:	020b      	lsls	r3, r1, #8
   266ae:	1ac0      	subs	r0, r0, r3
   266b0:	4152      	adcs	r2, r2
   266b2:	d2cd      	bcs.n	26650 <__divsi3+0x40>
   266b4:	09c3      	lsrs	r3, r0, #7
   266b6:	428b      	cmp	r3, r1
   266b8:	d301      	bcc.n	266be <__divsi3+0xae>
   266ba:	01cb      	lsls	r3, r1, #7
   266bc:	1ac0      	subs	r0, r0, r3
   266be:	4152      	adcs	r2, r2
   266c0:	0983      	lsrs	r3, r0, #6
   266c2:	428b      	cmp	r3, r1
   266c4:	d301      	bcc.n	266ca <__divsi3+0xba>
   266c6:	018b      	lsls	r3, r1, #6
   266c8:	1ac0      	subs	r0, r0, r3
   266ca:	4152      	adcs	r2, r2
   266cc:	0943      	lsrs	r3, r0, #5
   266ce:	428b      	cmp	r3, r1
   266d0:	d301      	bcc.n	266d6 <__divsi3+0xc6>
   266d2:	014b      	lsls	r3, r1, #5
   266d4:	1ac0      	subs	r0, r0, r3
   266d6:	4152      	adcs	r2, r2
   266d8:	0903      	lsrs	r3, r0, #4
   266da:	428b      	cmp	r3, r1
   266dc:	d301      	bcc.n	266e2 <__divsi3+0xd2>
   266de:	010b      	lsls	r3, r1, #4
   266e0:	1ac0      	subs	r0, r0, r3
   266e2:	4152      	adcs	r2, r2
   266e4:	08c3      	lsrs	r3, r0, #3
   266e6:	428b      	cmp	r3, r1
   266e8:	d301      	bcc.n	266ee <__divsi3+0xde>
   266ea:	00cb      	lsls	r3, r1, #3
   266ec:	1ac0      	subs	r0, r0, r3
   266ee:	4152      	adcs	r2, r2
   266f0:	0883      	lsrs	r3, r0, #2
   266f2:	428b      	cmp	r3, r1
   266f4:	d301      	bcc.n	266fa <__divsi3+0xea>
   266f6:	008b      	lsls	r3, r1, #2
   266f8:	1ac0      	subs	r0, r0, r3
   266fa:	4152      	adcs	r2, r2
   266fc:	0843      	lsrs	r3, r0, #1
   266fe:	428b      	cmp	r3, r1
   26700:	d301      	bcc.n	26706 <__divsi3+0xf6>
   26702:	004b      	lsls	r3, r1, #1
   26704:	1ac0      	subs	r0, r0, r3
   26706:	4152      	adcs	r2, r2
   26708:	1a41      	subs	r1, r0, r1
   2670a:	d200      	bcs.n	2670e <__divsi3+0xfe>
   2670c:	4601      	mov	r1, r0
   2670e:	4152      	adcs	r2, r2
   26710:	4610      	mov	r0, r2
   26712:	4770      	bx	lr
   26714:	e05d      	b.n	267d2 <__divsi3+0x1c2>
   26716:	0fca      	lsrs	r2, r1, #31
   26718:	d000      	beq.n	2671c <__divsi3+0x10c>
   2671a:	4249      	negs	r1, r1
   2671c:	1003      	asrs	r3, r0, #32
   2671e:	d300      	bcc.n	26722 <__divsi3+0x112>
   26720:	4240      	negs	r0, r0
   26722:	4053      	eors	r3, r2
   26724:	2200      	movs	r2, #0
   26726:	469c      	mov	ip, r3
   26728:	0903      	lsrs	r3, r0, #4
   2672a:	428b      	cmp	r3, r1
   2672c:	d32d      	bcc.n	2678a <__divsi3+0x17a>
   2672e:	0a03      	lsrs	r3, r0, #8
   26730:	428b      	cmp	r3, r1
   26732:	d312      	bcc.n	2675a <__divsi3+0x14a>
   26734:	22fc      	movs	r2, #252	; 0xfc
   26736:	0189      	lsls	r1, r1, #6
   26738:	ba12      	rev	r2, r2
   2673a:	0a03      	lsrs	r3, r0, #8
   2673c:	428b      	cmp	r3, r1
   2673e:	d30c      	bcc.n	2675a <__divsi3+0x14a>
   26740:	0189      	lsls	r1, r1, #6
   26742:	1192      	asrs	r2, r2, #6
   26744:	428b      	cmp	r3, r1
   26746:	d308      	bcc.n	2675a <__divsi3+0x14a>
   26748:	0189      	lsls	r1, r1, #6
   2674a:	1192      	asrs	r2, r2, #6
   2674c:	428b      	cmp	r3, r1
   2674e:	d304      	bcc.n	2675a <__divsi3+0x14a>
   26750:	0189      	lsls	r1, r1, #6
   26752:	d03a      	beq.n	267ca <__divsi3+0x1ba>
   26754:	1192      	asrs	r2, r2, #6
   26756:	e000      	b.n	2675a <__divsi3+0x14a>
   26758:	0989      	lsrs	r1, r1, #6
   2675a:	09c3      	lsrs	r3, r0, #7
   2675c:	428b      	cmp	r3, r1
   2675e:	d301      	bcc.n	26764 <__divsi3+0x154>
   26760:	01cb      	lsls	r3, r1, #7
   26762:	1ac0      	subs	r0, r0, r3
   26764:	4152      	adcs	r2, r2
   26766:	0983      	lsrs	r3, r0, #6
   26768:	428b      	cmp	r3, r1
   2676a:	d301      	bcc.n	26770 <__divsi3+0x160>
   2676c:	018b      	lsls	r3, r1, #6
   2676e:	1ac0      	subs	r0, r0, r3
   26770:	4152      	adcs	r2, r2
   26772:	0943      	lsrs	r3, r0, #5
   26774:	428b      	cmp	r3, r1
   26776:	d301      	bcc.n	2677c <__divsi3+0x16c>
   26778:	014b      	lsls	r3, r1, #5
   2677a:	1ac0      	subs	r0, r0, r3
   2677c:	4152      	adcs	r2, r2
   2677e:	0903      	lsrs	r3, r0, #4
   26780:	428b      	cmp	r3, r1
   26782:	d301      	bcc.n	26788 <__divsi3+0x178>
   26784:	010b      	lsls	r3, r1, #4
   26786:	1ac0      	subs	r0, r0, r3
   26788:	4152      	adcs	r2, r2
   2678a:	08c3      	lsrs	r3, r0, #3
   2678c:	428b      	cmp	r3, r1
   2678e:	d301      	bcc.n	26794 <__divsi3+0x184>
   26790:	00cb      	lsls	r3, r1, #3
   26792:	1ac0      	subs	r0, r0, r3
   26794:	4152      	adcs	r2, r2
   26796:	0883      	lsrs	r3, r0, #2
   26798:	428b      	cmp	r3, r1
   2679a:	d301      	bcc.n	267a0 <__divsi3+0x190>
   2679c:	008b      	lsls	r3, r1, #2
   2679e:	1ac0      	subs	r0, r0, r3
   267a0:	4152      	adcs	r2, r2
   267a2:	d2d9      	bcs.n	26758 <__divsi3+0x148>
   267a4:	0843      	lsrs	r3, r0, #1
   267a6:	428b      	cmp	r3, r1
   267a8:	d301      	bcc.n	267ae <__divsi3+0x19e>
   267aa:	004b      	lsls	r3, r1, #1
   267ac:	1ac0      	subs	r0, r0, r3
   267ae:	4152      	adcs	r2, r2
   267b0:	1a41      	subs	r1, r0, r1
   267b2:	d200      	bcs.n	267b6 <__divsi3+0x1a6>
   267b4:	4601      	mov	r1, r0
   267b6:	4663      	mov	r3, ip
   267b8:	4152      	adcs	r2, r2
   267ba:	105b      	asrs	r3, r3, #1
   267bc:	4610      	mov	r0, r2
   267be:	d301      	bcc.n	267c4 <__divsi3+0x1b4>
   267c0:	4240      	negs	r0, r0
   267c2:	2b00      	cmp	r3, #0
   267c4:	d500      	bpl.n	267c8 <__divsi3+0x1b8>
   267c6:	4249      	negs	r1, r1
   267c8:	4770      	bx	lr
   267ca:	4663      	mov	r3, ip
   267cc:	105b      	asrs	r3, r3, #1
   267ce:	d300      	bcc.n	267d2 <__divsi3+0x1c2>
   267d0:	4240      	negs	r0, r0
   267d2:	b501      	push	{r0, lr}
   267d4:	2000      	movs	r0, #0
   267d6:	f000 f805 	bl	267e4 <__aeabi_idiv0>
   267da:	bd02      	pop	{r1, pc}

000267dc <__aeabi_idivmod>:
   267dc:	2900      	cmp	r1, #0
   267de:	d0f8      	beq.n	267d2 <__divsi3+0x1c2>
   267e0:	e716      	b.n	26610 <__divsi3>
   267e2:	4770      	bx	lr

000267e4 <__aeabi_idiv0>:
   267e4:	4770      	bx	lr
   267e6:	46c0      	nop			; (mov r8, r8)

000267e8 <__aeabi_cdrcmple>:
   267e8:	4684      	mov	ip, r0
   267ea:	1c10      	adds	r0, r2, #0
   267ec:	4662      	mov	r2, ip
   267ee:	468c      	mov	ip, r1
   267f0:	1c19      	adds	r1, r3, #0
   267f2:	4663      	mov	r3, ip
   267f4:	e000      	b.n	267f8 <__aeabi_cdcmpeq>
   267f6:	46c0      	nop			; (mov r8, r8)

000267f8 <__aeabi_cdcmpeq>:
   267f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   267fa:	f001 fb3b 	bl	27e74 <__ledf2>
   267fe:	2800      	cmp	r0, #0
   26800:	d401      	bmi.n	26806 <__aeabi_cdcmpeq+0xe>
   26802:	2100      	movs	r1, #0
   26804:	42c8      	cmn	r0, r1
   26806:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00026808 <__aeabi_dcmpeq>:
   26808:	b510      	push	{r4, lr}
   2680a:	f001 fa95 	bl	27d38 <__eqdf2>
   2680e:	4240      	negs	r0, r0
   26810:	3001      	adds	r0, #1
   26812:	bd10      	pop	{r4, pc}

00026814 <__aeabi_dcmplt>:
   26814:	b510      	push	{r4, lr}
   26816:	f001 fb2d 	bl	27e74 <__ledf2>
   2681a:	2800      	cmp	r0, #0
   2681c:	db01      	blt.n	26822 <__aeabi_dcmplt+0xe>
   2681e:	2000      	movs	r0, #0
   26820:	bd10      	pop	{r4, pc}
   26822:	2001      	movs	r0, #1
   26824:	bd10      	pop	{r4, pc}
   26826:	46c0      	nop			; (mov r8, r8)

00026828 <__aeabi_dcmple>:
   26828:	b510      	push	{r4, lr}
   2682a:	f001 fb23 	bl	27e74 <__ledf2>
   2682e:	2800      	cmp	r0, #0
   26830:	dd01      	ble.n	26836 <__aeabi_dcmple+0xe>
   26832:	2000      	movs	r0, #0
   26834:	bd10      	pop	{r4, pc}
   26836:	2001      	movs	r0, #1
   26838:	bd10      	pop	{r4, pc}
   2683a:	46c0      	nop			; (mov r8, r8)

0002683c <__aeabi_dcmpgt>:
   2683c:	b510      	push	{r4, lr}
   2683e:	f001 fab5 	bl	27dac <__gedf2>
   26842:	2800      	cmp	r0, #0
   26844:	dc01      	bgt.n	2684a <__aeabi_dcmpgt+0xe>
   26846:	2000      	movs	r0, #0
   26848:	bd10      	pop	{r4, pc}
   2684a:	2001      	movs	r0, #1
   2684c:	bd10      	pop	{r4, pc}
   2684e:	46c0      	nop			; (mov r8, r8)

00026850 <__aeabi_dcmpge>:
   26850:	b510      	push	{r4, lr}
   26852:	f001 faab 	bl	27dac <__gedf2>
   26856:	2800      	cmp	r0, #0
   26858:	da01      	bge.n	2685e <__aeabi_dcmpge+0xe>
   2685a:	2000      	movs	r0, #0
   2685c:	bd10      	pop	{r4, pc}
   2685e:	2001      	movs	r0, #1
   26860:	bd10      	pop	{r4, pc}
   26862:	46c0      	nop			; (mov r8, r8)

00026864 <__aeabi_uldivmod>:
   26864:	2b00      	cmp	r3, #0
   26866:	d111      	bne.n	2688c <__aeabi_uldivmod+0x28>
   26868:	2a00      	cmp	r2, #0
   2686a:	d10f      	bne.n	2688c <__aeabi_uldivmod+0x28>
   2686c:	2900      	cmp	r1, #0
   2686e:	d100      	bne.n	26872 <__aeabi_uldivmod+0xe>
   26870:	2800      	cmp	r0, #0
   26872:	d002      	beq.n	2687a <__aeabi_uldivmod+0x16>
   26874:	2100      	movs	r1, #0
   26876:	43c9      	mvns	r1, r1
   26878:	1c08      	adds	r0, r1, #0
   2687a:	b407      	push	{r0, r1, r2}
   2687c:	4802      	ldr	r0, [pc, #8]	; (26888 <__aeabi_uldivmod+0x24>)
   2687e:	a102      	add	r1, pc, #8	; (adr r1, 26888 <__aeabi_uldivmod+0x24>)
   26880:	1840      	adds	r0, r0, r1
   26882:	9002      	str	r0, [sp, #8]
   26884:	bd03      	pop	{r0, r1, pc}
   26886:	46c0      	nop			; (mov r8, r8)
   26888:	ffffff5d 	.word	0xffffff5d
   2688c:	b403      	push	{r0, r1}
   2688e:	4668      	mov	r0, sp
   26890:	b501      	push	{r0, lr}
   26892:	9802      	ldr	r0, [sp, #8]
   26894:	f000 f84e 	bl	26934 <__udivmoddi4>
   26898:	9b01      	ldr	r3, [sp, #4]
   2689a:	469e      	mov	lr, r3
   2689c:	b002      	add	sp, #8
   2689e:	bc0c      	pop	{r2, r3}
   268a0:	4770      	bx	lr
   268a2:	46c0      	nop			; (mov r8, r8)

000268a4 <__aeabi_lmul>:
   268a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   268a6:	46ce      	mov	lr, r9
   268a8:	4647      	mov	r7, r8
   268aa:	0415      	lsls	r5, r2, #16
   268ac:	0c2d      	lsrs	r5, r5, #16
   268ae:	002e      	movs	r6, r5
   268b0:	b580      	push	{r7, lr}
   268b2:	0407      	lsls	r7, r0, #16
   268b4:	0c14      	lsrs	r4, r2, #16
   268b6:	0c3f      	lsrs	r7, r7, #16
   268b8:	4699      	mov	r9, r3
   268ba:	0c03      	lsrs	r3, r0, #16
   268bc:	437e      	muls	r6, r7
   268be:	435d      	muls	r5, r3
   268c0:	4367      	muls	r7, r4
   268c2:	4363      	muls	r3, r4
   268c4:	197f      	adds	r7, r7, r5
   268c6:	0c34      	lsrs	r4, r6, #16
   268c8:	19e4      	adds	r4, r4, r7
   268ca:	469c      	mov	ip, r3
   268cc:	42a5      	cmp	r5, r4
   268ce:	d903      	bls.n	268d8 <__aeabi_lmul+0x34>
   268d0:	2380      	movs	r3, #128	; 0x80
   268d2:	025b      	lsls	r3, r3, #9
   268d4:	4698      	mov	r8, r3
   268d6:	44c4      	add	ip, r8
   268d8:	464b      	mov	r3, r9
   268da:	4351      	muls	r1, r2
   268dc:	4343      	muls	r3, r0
   268de:	0436      	lsls	r6, r6, #16
   268e0:	0c36      	lsrs	r6, r6, #16
   268e2:	0c25      	lsrs	r5, r4, #16
   268e4:	0424      	lsls	r4, r4, #16
   268e6:	4465      	add	r5, ip
   268e8:	19a4      	adds	r4, r4, r6
   268ea:	1859      	adds	r1, r3, r1
   268ec:	1949      	adds	r1, r1, r5
   268ee:	0020      	movs	r0, r4
   268f0:	bc0c      	pop	{r2, r3}
   268f2:	4690      	mov	r8, r2
   268f4:	4699      	mov	r9, r3
   268f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000268f8 <__aeabi_d2uiz>:
   268f8:	b570      	push	{r4, r5, r6, lr}
   268fa:	2200      	movs	r2, #0
   268fc:	4b0c      	ldr	r3, [pc, #48]	; (26930 <__aeabi_d2uiz+0x38>)
   268fe:	0004      	movs	r4, r0
   26900:	000d      	movs	r5, r1
   26902:	f7ff ffa5 	bl	26850 <__aeabi_dcmpge>
   26906:	2800      	cmp	r0, #0
   26908:	d104      	bne.n	26914 <__aeabi_d2uiz+0x1c>
   2690a:	0020      	movs	r0, r4
   2690c:	0029      	movs	r1, r5
   2690e:	f002 f8c9 	bl	28aa4 <__aeabi_d2iz>
   26912:	bd70      	pop	{r4, r5, r6, pc}
   26914:	4b06      	ldr	r3, [pc, #24]	; (26930 <__aeabi_d2uiz+0x38>)
   26916:	2200      	movs	r2, #0
   26918:	0020      	movs	r0, r4
   2691a:	0029      	movs	r1, r5
   2691c:	f001 fd8c 	bl	28438 <__aeabi_dsub>
   26920:	f002 f8c0 	bl	28aa4 <__aeabi_d2iz>
   26924:	2380      	movs	r3, #128	; 0x80
   26926:	061b      	lsls	r3, r3, #24
   26928:	469c      	mov	ip, r3
   2692a:	4460      	add	r0, ip
   2692c:	e7f1      	b.n	26912 <__aeabi_d2uiz+0x1a>
   2692e:	46c0      	nop			; (mov r8, r8)
   26930:	41e00000 	.word	0x41e00000

00026934 <__udivmoddi4>:
   26934:	b5f0      	push	{r4, r5, r6, r7, lr}
   26936:	4657      	mov	r7, sl
   26938:	464e      	mov	r6, r9
   2693a:	4645      	mov	r5, r8
   2693c:	46de      	mov	lr, fp
   2693e:	b5e0      	push	{r5, r6, r7, lr}
   26940:	0004      	movs	r4, r0
   26942:	b083      	sub	sp, #12
   26944:	000d      	movs	r5, r1
   26946:	4692      	mov	sl, r2
   26948:	4699      	mov	r9, r3
   2694a:	428b      	cmp	r3, r1
   2694c:	d82f      	bhi.n	269ae <__udivmoddi4+0x7a>
   2694e:	d02c      	beq.n	269aa <__udivmoddi4+0x76>
   26950:	4649      	mov	r1, r9
   26952:	4650      	mov	r0, sl
   26954:	f002 f9c4 	bl	28ce0 <__clzdi2>
   26958:	0029      	movs	r1, r5
   2695a:	0006      	movs	r6, r0
   2695c:	0020      	movs	r0, r4
   2695e:	f002 f9bf 	bl	28ce0 <__clzdi2>
   26962:	1a33      	subs	r3, r6, r0
   26964:	4698      	mov	r8, r3
   26966:	3b20      	subs	r3, #32
   26968:	469b      	mov	fp, r3
   2696a:	d500      	bpl.n	2696e <__udivmoddi4+0x3a>
   2696c:	e074      	b.n	26a58 <__udivmoddi4+0x124>
   2696e:	4653      	mov	r3, sl
   26970:	465a      	mov	r2, fp
   26972:	4093      	lsls	r3, r2
   26974:	001f      	movs	r7, r3
   26976:	4653      	mov	r3, sl
   26978:	4642      	mov	r2, r8
   2697a:	4093      	lsls	r3, r2
   2697c:	001e      	movs	r6, r3
   2697e:	42af      	cmp	r7, r5
   26980:	d829      	bhi.n	269d6 <__udivmoddi4+0xa2>
   26982:	d026      	beq.n	269d2 <__udivmoddi4+0x9e>
   26984:	465b      	mov	r3, fp
   26986:	1ba4      	subs	r4, r4, r6
   26988:	41bd      	sbcs	r5, r7
   2698a:	2b00      	cmp	r3, #0
   2698c:	da00      	bge.n	26990 <__udivmoddi4+0x5c>
   2698e:	e079      	b.n	26a84 <__udivmoddi4+0x150>
   26990:	2200      	movs	r2, #0
   26992:	2300      	movs	r3, #0
   26994:	9200      	str	r2, [sp, #0]
   26996:	9301      	str	r3, [sp, #4]
   26998:	2301      	movs	r3, #1
   2699a:	465a      	mov	r2, fp
   2699c:	4093      	lsls	r3, r2
   2699e:	9301      	str	r3, [sp, #4]
   269a0:	2301      	movs	r3, #1
   269a2:	4642      	mov	r2, r8
   269a4:	4093      	lsls	r3, r2
   269a6:	9300      	str	r3, [sp, #0]
   269a8:	e019      	b.n	269de <__udivmoddi4+0xaa>
   269aa:	4282      	cmp	r2, r0
   269ac:	d9d0      	bls.n	26950 <__udivmoddi4+0x1c>
   269ae:	2200      	movs	r2, #0
   269b0:	2300      	movs	r3, #0
   269b2:	9200      	str	r2, [sp, #0]
   269b4:	9301      	str	r3, [sp, #4]
   269b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   269b8:	2b00      	cmp	r3, #0
   269ba:	d001      	beq.n	269c0 <__udivmoddi4+0x8c>
   269bc:	601c      	str	r4, [r3, #0]
   269be:	605d      	str	r5, [r3, #4]
   269c0:	9800      	ldr	r0, [sp, #0]
   269c2:	9901      	ldr	r1, [sp, #4]
   269c4:	b003      	add	sp, #12
   269c6:	bc3c      	pop	{r2, r3, r4, r5}
   269c8:	4690      	mov	r8, r2
   269ca:	4699      	mov	r9, r3
   269cc:	46a2      	mov	sl, r4
   269ce:	46ab      	mov	fp, r5
   269d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   269d2:	42a3      	cmp	r3, r4
   269d4:	d9d6      	bls.n	26984 <__udivmoddi4+0x50>
   269d6:	2200      	movs	r2, #0
   269d8:	2300      	movs	r3, #0
   269da:	9200      	str	r2, [sp, #0]
   269dc:	9301      	str	r3, [sp, #4]
   269de:	4643      	mov	r3, r8
   269e0:	2b00      	cmp	r3, #0
   269e2:	d0e8      	beq.n	269b6 <__udivmoddi4+0x82>
   269e4:	07fb      	lsls	r3, r7, #31
   269e6:	0872      	lsrs	r2, r6, #1
   269e8:	431a      	orrs	r2, r3
   269ea:	4646      	mov	r6, r8
   269ec:	087b      	lsrs	r3, r7, #1
   269ee:	e00e      	b.n	26a0e <__udivmoddi4+0xda>
   269f0:	42ab      	cmp	r3, r5
   269f2:	d101      	bne.n	269f8 <__udivmoddi4+0xc4>
   269f4:	42a2      	cmp	r2, r4
   269f6:	d80c      	bhi.n	26a12 <__udivmoddi4+0xde>
   269f8:	1aa4      	subs	r4, r4, r2
   269fa:	419d      	sbcs	r5, r3
   269fc:	2001      	movs	r0, #1
   269fe:	1924      	adds	r4, r4, r4
   26a00:	416d      	adcs	r5, r5
   26a02:	2100      	movs	r1, #0
   26a04:	3e01      	subs	r6, #1
   26a06:	1824      	adds	r4, r4, r0
   26a08:	414d      	adcs	r5, r1
   26a0a:	2e00      	cmp	r6, #0
   26a0c:	d006      	beq.n	26a1c <__udivmoddi4+0xe8>
   26a0e:	42ab      	cmp	r3, r5
   26a10:	d9ee      	bls.n	269f0 <__udivmoddi4+0xbc>
   26a12:	3e01      	subs	r6, #1
   26a14:	1924      	adds	r4, r4, r4
   26a16:	416d      	adcs	r5, r5
   26a18:	2e00      	cmp	r6, #0
   26a1a:	d1f8      	bne.n	26a0e <__udivmoddi4+0xda>
   26a1c:	465b      	mov	r3, fp
   26a1e:	9800      	ldr	r0, [sp, #0]
   26a20:	9901      	ldr	r1, [sp, #4]
   26a22:	1900      	adds	r0, r0, r4
   26a24:	4169      	adcs	r1, r5
   26a26:	2b00      	cmp	r3, #0
   26a28:	db22      	blt.n	26a70 <__udivmoddi4+0x13c>
   26a2a:	002b      	movs	r3, r5
   26a2c:	465a      	mov	r2, fp
   26a2e:	40d3      	lsrs	r3, r2
   26a30:	002a      	movs	r2, r5
   26a32:	4644      	mov	r4, r8
   26a34:	40e2      	lsrs	r2, r4
   26a36:	001c      	movs	r4, r3
   26a38:	465b      	mov	r3, fp
   26a3a:	0015      	movs	r5, r2
   26a3c:	2b00      	cmp	r3, #0
   26a3e:	db2c      	blt.n	26a9a <__udivmoddi4+0x166>
   26a40:	0026      	movs	r6, r4
   26a42:	409e      	lsls	r6, r3
   26a44:	0033      	movs	r3, r6
   26a46:	0026      	movs	r6, r4
   26a48:	4647      	mov	r7, r8
   26a4a:	40be      	lsls	r6, r7
   26a4c:	0032      	movs	r2, r6
   26a4e:	1a80      	subs	r0, r0, r2
   26a50:	4199      	sbcs	r1, r3
   26a52:	9000      	str	r0, [sp, #0]
   26a54:	9101      	str	r1, [sp, #4]
   26a56:	e7ae      	b.n	269b6 <__udivmoddi4+0x82>
   26a58:	4642      	mov	r2, r8
   26a5a:	2320      	movs	r3, #32
   26a5c:	1a9b      	subs	r3, r3, r2
   26a5e:	4652      	mov	r2, sl
   26a60:	40da      	lsrs	r2, r3
   26a62:	4641      	mov	r1, r8
   26a64:	0013      	movs	r3, r2
   26a66:	464a      	mov	r2, r9
   26a68:	408a      	lsls	r2, r1
   26a6a:	0017      	movs	r7, r2
   26a6c:	431f      	orrs	r7, r3
   26a6e:	e782      	b.n	26976 <__udivmoddi4+0x42>
   26a70:	4642      	mov	r2, r8
   26a72:	2320      	movs	r3, #32
   26a74:	1a9b      	subs	r3, r3, r2
   26a76:	002a      	movs	r2, r5
   26a78:	4646      	mov	r6, r8
   26a7a:	409a      	lsls	r2, r3
   26a7c:	0023      	movs	r3, r4
   26a7e:	40f3      	lsrs	r3, r6
   26a80:	4313      	orrs	r3, r2
   26a82:	e7d5      	b.n	26a30 <__udivmoddi4+0xfc>
   26a84:	4642      	mov	r2, r8
   26a86:	2320      	movs	r3, #32
   26a88:	2100      	movs	r1, #0
   26a8a:	1a9b      	subs	r3, r3, r2
   26a8c:	2200      	movs	r2, #0
   26a8e:	9100      	str	r1, [sp, #0]
   26a90:	9201      	str	r2, [sp, #4]
   26a92:	2201      	movs	r2, #1
   26a94:	40da      	lsrs	r2, r3
   26a96:	9201      	str	r2, [sp, #4]
   26a98:	e782      	b.n	269a0 <__udivmoddi4+0x6c>
   26a9a:	4642      	mov	r2, r8
   26a9c:	2320      	movs	r3, #32
   26a9e:	0026      	movs	r6, r4
   26aa0:	1a9b      	subs	r3, r3, r2
   26aa2:	40de      	lsrs	r6, r3
   26aa4:	002f      	movs	r7, r5
   26aa6:	46b4      	mov	ip, r6
   26aa8:	4097      	lsls	r7, r2
   26aaa:	4666      	mov	r6, ip
   26aac:	003b      	movs	r3, r7
   26aae:	4333      	orrs	r3, r6
   26ab0:	e7c9      	b.n	26a46 <__udivmoddi4+0x112>
   26ab2:	46c0      	nop			; (mov r8, r8)

00026ab4 <__aeabi_fdiv>:
   26ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ab6:	4657      	mov	r7, sl
   26ab8:	464e      	mov	r6, r9
   26aba:	46de      	mov	lr, fp
   26abc:	4645      	mov	r5, r8
   26abe:	b5e0      	push	{r5, r6, r7, lr}
   26ac0:	0244      	lsls	r4, r0, #9
   26ac2:	0043      	lsls	r3, r0, #1
   26ac4:	0fc6      	lsrs	r6, r0, #31
   26ac6:	b083      	sub	sp, #12
   26ac8:	1c0f      	adds	r7, r1, #0
   26aca:	0a64      	lsrs	r4, r4, #9
   26acc:	0e1b      	lsrs	r3, r3, #24
   26ace:	46b2      	mov	sl, r6
   26ad0:	d053      	beq.n	26b7a <__aeabi_fdiv+0xc6>
   26ad2:	2bff      	cmp	r3, #255	; 0xff
   26ad4:	d027      	beq.n	26b26 <__aeabi_fdiv+0x72>
   26ad6:	2280      	movs	r2, #128	; 0x80
   26ad8:	00e4      	lsls	r4, r4, #3
   26ada:	04d2      	lsls	r2, r2, #19
   26adc:	4314      	orrs	r4, r2
   26ade:	227f      	movs	r2, #127	; 0x7f
   26ae0:	4252      	negs	r2, r2
   26ae2:	4690      	mov	r8, r2
   26ae4:	4498      	add	r8, r3
   26ae6:	2300      	movs	r3, #0
   26ae8:	4699      	mov	r9, r3
   26aea:	469b      	mov	fp, r3
   26aec:	027d      	lsls	r5, r7, #9
   26aee:	0078      	lsls	r0, r7, #1
   26af0:	0ffb      	lsrs	r3, r7, #31
   26af2:	0a6d      	lsrs	r5, r5, #9
   26af4:	0e00      	lsrs	r0, r0, #24
   26af6:	9300      	str	r3, [sp, #0]
   26af8:	d024      	beq.n	26b44 <__aeabi_fdiv+0x90>
   26afa:	28ff      	cmp	r0, #255	; 0xff
   26afc:	d046      	beq.n	26b8c <__aeabi_fdiv+0xd8>
   26afe:	2380      	movs	r3, #128	; 0x80
   26b00:	2100      	movs	r1, #0
   26b02:	00ed      	lsls	r5, r5, #3
   26b04:	04db      	lsls	r3, r3, #19
   26b06:	431d      	orrs	r5, r3
   26b08:	387f      	subs	r0, #127	; 0x7f
   26b0a:	4647      	mov	r7, r8
   26b0c:	1a38      	subs	r0, r7, r0
   26b0e:	464f      	mov	r7, r9
   26b10:	430f      	orrs	r7, r1
   26b12:	00bf      	lsls	r7, r7, #2
   26b14:	46b9      	mov	r9, r7
   26b16:	0033      	movs	r3, r6
   26b18:	9a00      	ldr	r2, [sp, #0]
   26b1a:	4f87      	ldr	r7, [pc, #540]	; (26d38 <__aeabi_fdiv+0x284>)
   26b1c:	4053      	eors	r3, r2
   26b1e:	464a      	mov	r2, r9
   26b20:	58ba      	ldr	r2, [r7, r2]
   26b22:	9301      	str	r3, [sp, #4]
   26b24:	4697      	mov	pc, r2
   26b26:	2c00      	cmp	r4, #0
   26b28:	d14e      	bne.n	26bc8 <__aeabi_fdiv+0x114>
   26b2a:	2308      	movs	r3, #8
   26b2c:	4699      	mov	r9, r3
   26b2e:	33f7      	adds	r3, #247	; 0xf7
   26b30:	4698      	mov	r8, r3
   26b32:	3bfd      	subs	r3, #253	; 0xfd
   26b34:	469b      	mov	fp, r3
   26b36:	027d      	lsls	r5, r7, #9
   26b38:	0078      	lsls	r0, r7, #1
   26b3a:	0ffb      	lsrs	r3, r7, #31
   26b3c:	0a6d      	lsrs	r5, r5, #9
   26b3e:	0e00      	lsrs	r0, r0, #24
   26b40:	9300      	str	r3, [sp, #0]
   26b42:	d1da      	bne.n	26afa <__aeabi_fdiv+0x46>
   26b44:	2d00      	cmp	r5, #0
   26b46:	d126      	bne.n	26b96 <__aeabi_fdiv+0xe2>
   26b48:	2000      	movs	r0, #0
   26b4a:	2101      	movs	r1, #1
   26b4c:	0033      	movs	r3, r6
   26b4e:	9a00      	ldr	r2, [sp, #0]
   26b50:	4f7a      	ldr	r7, [pc, #488]	; (26d3c <__aeabi_fdiv+0x288>)
   26b52:	4053      	eors	r3, r2
   26b54:	4642      	mov	r2, r8
   26b56:	1a10      	subs	r0, r2, r0
   26b58:	464a      	mov	r2, r9
   26b5a:	430a      	orrs	r2, r1
   26b5c:	0092      	lsls	r2, r2, #2
   26b5e:	58ba      	ldr	r2, [r7, r2]
   26b60:	001d      	movs	r5, r3
   26b62:	4697      	mov	pc, r2
   26b64:	9b00      	ldr	r3, [sp, #0]
   26b66:	002c      	movs	r4, r5
   26b68:	469a      	mov	sl, r3
   26b6a:	468b      	mov	fp, r1
   26b6c:	465b      	mov	r3, fp
   26b6e:	2b02      	cmp	r3, #2
   26b70:	d131      	bne.n	26bd6 <__aeabi_fdiv+0x122>
   26b72:	4653      	mov	r3, sl
   26b74:	21ff      	movs	r1, #255	; 0xff
   26b76:	2400      	movs	r4, #0
   26b78:	e038      	b.n	26bec <__aeabi_fdiv+0x138>
   26b7a:	2c00      	cmp	r4, #0
   26b7c:	d117      	bne.n	26bae <__aeabi_fdiv+0xfa>
   26b7e:	2304      	movs	r3, #4
   26b80:	4699      	mov	r9, r3
   26b82:	2300      	movs	r3, #0
   26b84:	4698      	mov	r8, r3
   26b86:	3301      	adds	r3, #1
   26b88:	469b      	mov	fp, r3
   26b8a:	e7af      	b.n	26aec <__aeabi_fdiv+0x38>
   26b8c:	20ff      	movs	r0, #255	; 0xff
   26b8e:	2d00      	cmp	r5, #0
   26b90:	d10b      	bne.n	26baa <__aeabi_fdiv+0xf6>
   26b92:	2102      	movs	r1, #2
   26b94:	e7da      	b.n	26b4c <__aeabi_fdiv+0x98>
   26b96:	0028      	movs	r0, r5
   26b98:	f002 f884 	bl	28ca4 <__clzsi2>
   26b9c:	1f43      	subs	r3, r0, #5
   26b9e:	409d      	lsls	r5, r3
   26ba0:	2376      	movs	r3, #118	; 0x76
   26ba2:	425b      	negs	r3, r3
   26ba4:	1a18      	subs	r0, r3, r0
   26ba6:	2100      	movs	r1, #0
   26ba8:	e7af      	b.n	26b0a <__aeabi_fdiv+0x56>
   26baa:	2103      	movs	r1, #3
   26bac:	e7ad      	b.n	26b0a <__aeabi_fdiv+0x56>
   26bae:	0020      	movs	r0, r4
   26bb0:	f002 f878 	bl	28ca4 <__clzsi2>
   26bb4:	1f43      	subs	r3, r0, #5
   26bb6:	409c      	lsls	r4, r3
   26bb8:	2376      	movs	r3, #118	; 0x76
   26bba:	425b      	negs	r3, r3
   26bbc:	1a1b      	subs	r3, r3, r0
   26bbe:	4698      	mov	r8, r3
   26bc0:	2300      	movs	r3, #0
   26bc2:	4699      	mov	r9, r3
   26bc4:	469b      	mov	fp, r3
   26bc6:	e791      	b.n	26aec <__aeabi_fdiv+0x38>
   26bc8:	230c      	movs	r3, #12
   26bca:	4699      	mov	r9, r3
   26bcc:	33f3      	adds	r3, #243	; 0xf3
   26bce:	4698      	mov	r8, r3
   26bd0:	3bfc      	subs	r3, #252	; 0xfc
   26bd2:	469b      	mov	fp, r3
   26bd4:	e78a      	b.n	26aec <__aeabi_fdiv+0x38>
   26bd6:	2b03      	cmp	r3, #3
   26bd8:	d100      	bne.n	26bdc <__aeabi_fdiv+0x128>
   26bda:	e0a5      	b.n	26d28 <__aeabi_fdiv+0x274>
   26bdc:	4655      	mov	r5, sl
   26bde:	2b01      	cmp	r3, #1
   26be0:	d000      	beq.n	26be4 <__aeabi_fdiv+0x130>
   26be2:	e081      	b.n	26ce8 <__aeabi_fdiv+0x234>
   26be4:	2301      	movs	r3, #1
   26be6:	2100      	movs	r1, #0
   26be8:	2400      	movs	r4, #0
   26bea:	402b      	ands	r3, r5
   26bec:	0264      	lsls	r4, r4, #9
   26bee:	05c9      	lsls	r1, r1, #23
   26bf0:	0a60      	lsrs	r0, r4, #9
   26bf2:	07db      	lsls	r3, r3, #31
   26bf4:	4308      	orrs	r0, r1
   26bf6:	4318      	orrs	r0, r3
   26bf8:	b003      	add	sp, #12
   26bfa:	bc3c      	pop	{r2, r3, r4, r5}
   26bfc:	4690      	mov	r8, r2
   26bfe:	4699      	mov	r9, r3
   26c00:	46a2      	mov	sl, r4
   26c02:	46ab      	mov	fp, r5
   26c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26c06:	2480      	movs	r4, #128	; 0x80
   26c08:	2300      	movs	r3, #0
   26c0a:	03e4      	lsls	r4, r4, #15
   26c0c:	21ff      	movs	r1, #255	; 0xff
   26c0e:	e7ed      	b.n	26bec <__aeabi_fdiv+0x138>
   26c10:	21ff      	movs	r1, #255	; 0xff
   26c12:	2400      	movs	r4, #0
   26c14:	e7ea      	b.n	26bec <__aeabi_fdiv+0x138>
   26c16:	2301      	movs	r3, #1
   26c18:	1a59      	subs	r1, r3, r1
   26c1a:	291b      	cmp	r1, #27
   26c1c:	dd66      	ble.n	26cec <__aeabi_fdiv+0x238>
   26c1e:	9a01      	ldr	r2, [sp, #4]
   26c20:	4013      	ands	r3, r2
   26c22:	2100      	movs	r1, #0
   26c24:	2400      	movs	r4, #0
   26c26:	e7e1      	b.n	26bec <__aeabi_fdiv+0x138>
   26c28:	2380      	movs	r3, #128	; 0x80
   26c2a:	03db      	lsls	r3, r3, #15
   26c2c:	421c      	tst	r4, r3
   26c2e:	d038      	beq.n	26ca2 <__aeabi_fdiv+0x1ee>
   26c30:	421d      	tst	r5, r3
   26c32:	d051      	beq.n	26cd8 <__aeabi_fdiv+0x224>
   26c34:	431c      	orrs	r4, r3
   26c36:	0264      	lsls	r4, r4, #9
   26c38:	0a64      	lsrs	r4, r4, #9
   26c3a:	0033      	movs	r3, r6
   26c3c:	21ff      	movs	r1, #255	; 0xff
   26c3e:	e7d5      	b.n	26bec <__aeabi_fdiv+0x138>
   26c40:	0163      	lsls	r3, r4, #5
   26c42:	016c      	lsls	r4, r5, #5
   26c44:	42a3      	cmp	r3, r4
   26c46:	d23b      	bcs.n	26cc0 <__aeabi_fdiv+0x20c>
   26c48:	261b      	movs	r6, #27
   26c4a:	2100      	movs	r1, #0
   26c4c:	3801      	subs	r0, #1
   26c4e:	2501      	movs	r5, #1
   26c50:	001f      	movs	r7, r3
   26c52:	0049      	lsls	r1, r1, #1
   26c54:	005b      	lsls	r3, r3, #1
   26c56:	2f00      	cmp	r7, #0
   26c58:	db01      	blt.n	26c5e <__aeabi_fdiv+0x1aa>
   26c5a:	429c      	cmp	r4, r3
   26c5c:	d801      	bhi.n	26c62 <__aeabi_fdiv+0x1ae>
   26c5e:	1b1b      	subs	r3, r3, r4
   26c60:	4329      	orrs	r1, r5
   26c62:	3e01      	subs	r6, #1
   26c64:	2e00      	cmp	r6, #0
   26c66:	d1f3      	bne.n	26c50 <__aeabi_fdiv+0x19c>
   26c68:	001c      	movs	r4, r3
   26c6a:	1e63      	subs	r3, r4, #1
   26c6c:	419c      	sbcs	r4, r3
   26c6e:	430c      	orrs	r4, r1
   26c70:	0001      	movs	r1, r0
   26c72:	317f      	adds	r1, #127	; 0x7f
   26c74:	2900      	cmp	r1, #0
   26c76:	ddce      	ble.n	26c16 <__aeabi_fdiv+0x162>
   26c78:	0763      	lsls	r3, r4, #29
   26c7a:	d004      	beq.n	26c86 <__aeabi_fdiv+0x1d2>
   26c7c:	230f      	movs	r3, #15
   26c7e:	4023      	ands	r3, r4
   26c80:	2b04      	cmp	r3, #4
   26c82:	d000      	beq.n	26c86 <__aeabi_fdiv+0x1d2>
   26c84:	3404      	adds	r4, #4
   26c86:	0123      	lsls	r3, r4, #4
   26c88:	d503      	bpl.n	26c92 <__aeabi_fdiv+0x1de>
   26c8a:	0001      	movs	r1, r0
   26c8c:	4b2c      	ldr	r3, [pc, #176]	; (26d40 <__aeabi_fdiv+0x28c>)
   26c8e:	3180      	adds	r1, #128	; 0x80
   26c90:	401c      	ands	r4, r3
   26c92:	29fe      	cmp	r1, #254	; 0xfe
   26c94:	dd0d      	ble.n	26cb2 <__aeabi_fdiv+0x1fe>
   26c96:	2301      	movs	r3, #1
   26c98:	9a01      	ldr	r2, [sp, #4]
   26c9a:	21ff      	movs	r1, #255	; 0xff
   26c9c:	4013      	ands	r3, r2
   26c9e:	2400      	movs	r4, #0
   26ca0:	e7a4      	b.n	26bec <__aeabi_fdiv+0x138>
   26ca2:	2380      	movs	r3, #128	; 0x80
   26ca4:	03db      	lsls	r3, r3, #15
   26ca6:	431c      	orrs	r4, r3
   26ca8:	0264      	lsls	r4, r4, #9
   26caa:	0a64      	lsrs	r4, r4, #9
   26cac:	0033      	movs	r3, r6
   26cae:	21ff      	movs	r1, #255	; 0xff
   26cb0:	e79c      	b.n	26bec <__aeabi_fdiv+0x138>
   26cb2:	2301      	movs	r3, #1
   26cb4:	9a01      	ldr	r2, [sp, #4]
   26cb6:	01a4      	lsls	r4, r4, #6
   26cb8:	0a64      	lsrs	r4, r4, #9
   26cba:	b2c9      	uxtb	r1, r1
   26cbc:	4013      	ands	r3, r2
   26cbe:	e795      	b.n	26bec <__aeabi_fdiv+0x138>
   26cc0:	1b1b      	subs	r3, r3, r4
   26cc2:	261a      	movs	r6, #26
   26cc4:	2101      	movs	r1, #1
   26cc6:	e7c2      	b.n	26c4e <__aeabi_fdiv+0x19a>
   26cc8:	9b00      	ldr	r3, [sp, #0]
   26cca:	468b      	mov	fp, r1
   26ccc:	469a      	mov	sl, r3
   26cce:	2400      	movs	r4, #0
   26cd0:	e74c      	b.n	26b6c <__aeabi_fdiv+0xb8>
   26cd2:	0263      	lsls	r3, r4, #9
   26cd4:	d5e5      	bpl.n	26ca2 <__aeabi_fdiv+0x1ee>
   26cd6:	2500      	movs	r5, #0
   26cd8:	2480      	movs	r4, #128	; 0x80
   26cda:	03e4      	lsls	r4, r4, #15
   26cdc:	432c      	orrs	r4, r5
   26cde:	0264      	lsls	r4, r4, #9
   26ce0:	0a64      	lsrs	r4, r4, #9
   26ce2:	9b00      	ldr	r3, [sp, #0]
   26ce4:	21ff      	movs	r1, #255	; 0xff
   26ce6:	e781      	b.n	26bec <__aeabi_fdiv+0x138>
   26ce8:	9501      	str	r5, [sp, #4]
   26cea:	e7c1      	b.n	26c70 <__aeabi_fdiv+0x1bc>
   26cec:	0023      	movs	r3, r4
   26cee:	2020      	movs	r0, #32
   26cf0:	40cb      	lsrs	r3, r1
   26cf2:	1a41      	subs	r1, r0, r1
   26cf4:	408c      	lsls	r4, r1
   26cf6:	1e61      	subs	r1, r4, #1
   26cf8:	418c      	sbcs	r4, r1
   26cfa:	431c      	orrs	r4, r3
   26cfc:	0763      	lsls	r3, r4, #29
   26cfe:	d004      	beq.n	26d0a <__aeabi_fdiv+0x256>
   26d00:	230f      	movs	r3, #15
   26d02:	4023      	ands	r3, r4
   26d04:	2b04      	cmp	r3, #4
   26d06:	d000      	beq.n	26d0a <__aeabi_fdiv+0x256>
   26d08:	3404      	adds	r4, #4
   26d0a:	0163      	lsls	r3, r4, #5
   26d0c:	d505      	bpl.n	26d1a <__aeabi_fdiv+0x266>
   26d0e:	2301      	movs	r3, #1
   26d10:	9a01      	ldr	r2, [sp, #4]
   26d12:	2101      	movs	r1, #1
   26d14:	4013      	ands	r3, r2
   26d16:	2400      	movs	r4, #0
   26d18:	e768      	b.n	26bec <__aeabi_fdiv+0x138>
   26d1a:	2301      	movs	r3, #1
   26d1c:	9a01      	ldr	r2, [sp, #4]
   26d1e:	01a4      	lsls	r4, r4, #6
   26d20:	0a64      	lsrs	r4, r4, #9
   26d22:	4013      	ands	r3, r2
   26d24:	2100      	movs	r1, #0
   26d26:	e761      	b.n	26bec <__aeabi_fdiv+0x138>
   26d28:	2380      	movs	r3, #128	; 0x80
   26d2a:	03db      	lsls	r3, r3, #15
   26d2c:	431c      	orrs	r4, r3
   26d2e:	0264      	lsls	r4, r4, #9
   26d30:	0a64      	lsrs	r4, r4, #9
   26d32:	4653      	mov	r3, sl
   26d34:	21ff      	movs	r1, #255	; 0xff
   26d36:	e759      	b.n	26bec <__aeabi_fdiv+0x138>
   26d38:	0002aca8 	.word	0x0002aca8
   26d3c:	0002ace8 	.word	0x0002ace8
   26d40:	f7ffffff 	.word	0xf7ffffff

00026d44 <__aeabi_fmul>:
   26d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d46:	4657      	mov	r7, sl
   26d48:	464e      	mov	r6, r9
   26d4a:	4645      	mov	r5, r8
   26d4c:	46de      	mov	lr, fp
   26d4e:	b5e0      	push	{r5, r6, r7, lr}
   26d50:	0247      	lsls	r7, r0, #9
   26d52:	0046      	lsls	r6, r0, #1
   26d54:	4688      	mov	r8, r1
   26d56:	0a7f      	lsrs	r7, r7, #9
   26d58:	0e36      	lsrs	r6, r6, #24
   26d5a:	0fc4      	lsrs	r4, r0, #31
   26d5c:	2e00      	cmp	r6, #0
   26d5e:	d047      	beq.n	26df0 <__aeabi_fmul+0xac>
   26d60:	2eff      	cmp	r6, #255	; 0xff
   26d62:	d024      	beq.n	26dae <__aeabi_fmul+0x6a>
   26d64:	00fb      	lsls	r3, r7, #3
   26d66:	2780      	movs	r7, #128	; 0x80
   26d68:	04ff      	lsls	r7, r7, #19
   26d6a:	431f      	orrs	r7, r3
   26d6c:	2300      	movs	r3, #0
   26d6e:	4699      	mov	r9, r3
   26d70:	469a      	mov	sl, r3
   26d72:	3e7f      	subs	r6, #127	; 0x7f
   26d74:	4643      	mov	r3, r8
   26d76:	025d      	lsls	r5, r3, #9
   26d78:	0058      	lsls	r0, r3, #1
   26d7a:	0fdb      	lsrs	r3, r3, #31
   26d7c:	0a6d      	lsrs	r5, r5, #9
   26d7e:	0e00      	lsrs	r0, r0, #24
   26d80:	4698      	mov	r8, r3
   26d82:	d043      	beq.n	26e0c <__aeabi_fmul+0xc8>
   26d84:	28ff      	cmp	r0, #255	; 0xff
   26d86:	d03b      	beq.n	26e00 <__aeabi_fmul+0xbc>
   26d88:	00eb      	lsls	r3, r5, #3
   26d8a:	2580      	movs	r5, #128	; 0x80
   26d8c:	2200      	movs	r2, #0
   26d8e:	04ed      	lsls	r5, r5, #19
   26d90:	431d      	orrs	r5, r3
   26d92:	387f      	subs	r0, #127	; 0x7f
   26d94:	1836      	adds	r6, r6, r0
   26d96:	1c73      	adds	r3, r6, #1
   26d98:	4641      	mov	r1, r8
   26d9a:	469b      	mov	fp, r3
   26d9c:	464b      	mov	r3, r9
   26d9e:	4061      	eors	r1, r4
   26da0:	4313      	orrs	r3, r2
   26da2:	2b0f      	cmp	r3, #15
   26da4:	d864      	bhi.n	26e70 <__aeabi_fmul+0x12c>
   26da6:	4875      	ldr	r0, [pc, #468]	; (26f7c <__aeabi_fmul+0x238>)
   26da8:	009b      	lsls	r3, r3, #2
   26daa:	58c3      	ldr	r3, [r0, r3]
   26dac:	469f      	mov	pc, r3
   26dae:	2f00      	cmp	r7, #0
   26db0:	d142      	bne.n	26e38 <__aeabi_fmul+0xf4>
   26db2:	2308      	movs	r3, #8
   26db4:	4699      	mov	r9, r3
   26db6:	3b06      	subs	r3, #6
   26db8:	26ff      	movs	r6, #255	; 0xff
   26dba:	469a      	mov	sl, r3
   26dbc:	e7da      	b.n	26d74 <__aeabi_fmul+0x30>
   26dbe:	4641      	mov	r1, r8
   26dc0:	2a02      	cmp	r2, #2
   26dc2:	d028      	beq.n	26e16 <__aeabi_fmul+0xd2>
   26dc4:	2a03      	cmp	r2, #3
   26dc6:	d100      	bne.n	26dca <__aeabi_fmul+0x86>
   26dc8:	e0ce      	b.n	26f68 <__aeabi_fmul+0x224>
   26dca:	2a01      	cmp	r2, #1
   26dcc:	d000      	beq.n	26dd0 <__aeabi_fmul+0x8c>
   26dce:	e0ac      	b.n	26f2a <__aeabi_fmul+0x1e6>
   26dd0:	4011      	ands	r1, r2
   26dd2:	2000      	movs	r0, #0
   26dd4:	2200      	movs	r2, #0
   26dd6:	b2cc      	uxtb	r4, r1
   26dd8:	0240      	lsls	r0, r0, #9
   26dda:	05d2      	lsls	r2, r2, #23
   26ddc:	0a40      	lsrs	r0, r0, #9
   26dde:	07e4      	lsls	r4, r4, #31
   26de0:	4310      	orrs	r0, r2
   26de2:	4320      	orrs	r0, r4
   26de4:	bc3c      	pop	{r2, r3, r4, r5}
   26de6:	4690      	mov	r8, r2
   26de8:	4699      	mov	r9, r3
   26dea:	46a2      	mov	sl, r4
   26dec:	46ab      	mov	fp, r5
   26dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26df0:	2f00      	cmp	r7, #0
   26df2:	d115      	bne.n	26e20 <__aeabi_fmul+0xdc>
   26df4:	2304      	movs	r3, #4
   26df6:	4699      	mov	r9, r3
   26df8:	3b03      	subs	r3, #3
   26dfa:	2600      	movs	r6, #0
   26dfc:	469a      	mov	sl, r3
   26dfe:	e7b9      	b.n	26d74 <__aeabi_fmul+0x30>
   26e00:	20ff      	movs	r0, #255	; 0xff
   26e02:	2202      	movs	r2, #2
   26e04:	2d00      	cmp	r5, #0
   26e06:	d0c5      	beq.n	26d94 <__aeabi_fmul+0x50>
   26e08:	2203      	movs	r2, #3
   26e0a:	e7c3      	b.n	26d94 <__aeabi_fmul+0x50>
   26e0c:	2d00      	cmp	r5, #0
   26e0e:	d119      	bne.n	26e44 <__aeabi_fmul+0x100>
   26e10:	2000      	movs	r0, #0
   26e12:	2201      	movs	r2, #1
   26e14:	e7be      	b.n	26d94 <__aeabi_fmul+0x50>
   26e16:	2401      	movs	r4, #1
   26e18:	22ff      	movs	r2, #255	; 0xff
   26e1a:	400c      	ands	r4, r1
   26e1c:	2000      	movs	r0, #0
   26e1e:	e7db      	b.n	26dd8 <__aeabi_fmul+0x94>
   26e20:	0038      	movs	r0, r7
   26e22:	f001 ff3f 	bl	28ca4 <__clzsi2>
   26e26:	2676      	movs	r6, #118	; 0x76
   26e28:	1f43      	subs	r3, r0, #5
   26e2a:	409f      	lsls	r7, r3
   26e2c:	2300      	movs	r3, #0
   26e2e:	4276      	negs	r6, r6
   26e30:	1a36      	subs	r6, r6, r0
   26e32:	4699      	mov	r9, r3
   26e34:	469a      	mov	sl, r3
   26e36:	e79d      	b.n	26d74 <__aeabi_fmul+0x30>
   26e38:	230c      	movs	r3, #12
   26e3a:	4699      	mov	r9, r3
   26e3c:	3b09      	subs	r3, #9
   26e3e:	26ff      	movs	r6, #255	; 0xff
   26e40:	469a      	mov	sl, r3
   26e42:	e797      	b.n	26d74 <__aeabi_fmul+0x30>
   26e44:	0028      	movs	r0, r5
   26e46:	f001 ff2d 	bl	28ca4 <__clzsi2>
   26e4a:	1f43      	subs	r3, r0, #5
   26e4c:	409d      	lsls	r5, r3
   26e4e:	2376      	movs	r3, #118	; 0x76
   26e50:	425b      	negs	r3, r3
   26e52:	1a18      	subs	r0, r3, r0
   26e54:	2200      	movs	r2, #0
   26e56:	e79d      	b.n	26d94 <__aeabi_fmul+0x50>
   26e58:	2080      	movs	r0, #128	; 0x80
   26e5a:	2400      	movs	r4, #0
   26e5c:	03c0      	lsls	r0, r0, #15
   26e5e:	22ff      	movs	r2, #255	; 0xff
   26e60:	e7ba      	b.n	26dd8 <__aeabi_fmul+0x94>
   26e62:	003d      	movs	r5, r7
   26e64:	4652      	mov	r2, sl
   26e66:	e7ab      	b.n	26dc0 <__aeabi_fmul+0x7c>
   26e68:	003d      	movs	r5, r7
   26e6a:	0021      	movs	r1, r4
   26e6c:	4652      	mov	r2, sl
   26e6e:	e7a7      	b.n	26dc0 <__aeabi_fmul+0x7c>
   26e70:	0c3b      	lsrs	r3, r7, #16
   26e72:	469c      	mov	ip, r3
   26e74:	042a      	lsls	r2, r5, #16
   26e76:	0c12      	lsrs	r2, r2, #16
   26e78:	0c2b      	lsrs	r3, r5, #16
   26e7a:	0014      	movs	r4, r2
   26e7c:	4660      	mov	r0, ip
   26e7e:	4665      	mov	r5, ip
   26e80:	043f      	lsls	r7, r7, #16
   26e82:	0c3f      	lsrs	r7, r7, #16
   26e84:	437c      	muls	r4, r7
   26e86:	4342      	muls	r2, r0
   26e88:	435d      	muls	r5, r3
   26e8a:	437b      	muls	r3, r7
   26e8c:	0c27      	lsrs	r7, r4, #16
   26e8e:	189b      	adds	r3, r3, r2
   26e90:	18ff      	adds	r7, r7, r3
   26e92:	42ba      	cmp	r2, r7
   26e94:	d903      	bls.n	26e9e <__aeabi_fmul+0x15a>
   26e96:	2380      	movs	r3, #128	; 0x80
   26e98:	025b      	lsls	r3, r3, #9
   26e9a:	469c      	mov	ip, r3
   26e9c:	4465      	add	r5, ip
   26e9e:	0424      	lsls	r4, r4, #16
   26ea0:	043a      	lsls	r2, r7, #16
   26ea2:	0c24      	lsrs	r4, r4, #16
   26ea4:	1912      	adds	r2, r2, r4
   26ea6:	0193      	lsls	r3, r2, #6
   26ea8:	1e5c      	subs	r4, r3, #1
   26eaa:	41a3      	sbcs	r3, r4
   26eac:	0c3f      	lsrs	r7, r7, #16
   26eae:	0e92      	lsrs	r2, r2, #26
   26eb0:	197d      	adds	r5, r7, r5
   26eb2:	431a      	orrs	r2, r3
   26eb4:	01ad      	lsls	r5, r5, #6
   26eb6:	4315      	orrs	r5, r2
   26eb8:	012b      	lsls	r3, r5, #4
   26eba:	d504      	bpl.n	26ec6 <__aeabi_fmul+0x182>
   26ebc:	2301      	movs	r3, #1
   26ebe:	465e      	mov	r6, fp
   26ec0:	086a      	lsrs	r2, r5, #1
   26ec2:	401d      	ands	r5, r3
   26ec4:	4315      	orrs	r5, r2
   26ec6:	0032      	movs	r2, r6
   26ec8:	327f      	adds	r2, #127	; 0x7f
   26eca:	2a00      	cmp	r2, #0
   26ecc:	dd25      	ble.n	26f1a <__aeabi_fmul+0x1d6>
   26ece:	076b      	lsls	r3, r5, #29
   26ed0:	d004      	beq.n	26edc <__aeabi_fmul+0x198>
   26ed2:	230f      	movs	r3, #15
   26ed4:	402b      	ands	r3, r5
   26ed6:	2b04      	cmp	r3, #4
   26ed8:	d000      	beq.n	26edc <__aeabi_fmul+0x198>
   26eda:	3504      	adds	r5, #4
   26edc:	012b      	lsls	r3, r5, #4
   26ede:	d503      	bpl.n	26ee8 <__aeabi_fmul+0x1a4>
   26ee0:	0032      	movs	r2, r6
   26ee2:	4b27      	ldr	r3, [pc, #156]	; (26f80 <__aeabi_fmul+0x23c>)
   26ee4:	3280      	adds	r2, #128	; 0x80
   26ee6:	401d      	ands	r5, r3
   26ee8:	2afe      	cmp	r2, #254	; 0xfe
   26eea:	dc94      	bgt.n	26e16 <__aeabi_fmul+0xd2>
   26eec:	2401      	movs	r4, #1
   26eee:	01a8      	lsls	r0, r5, #6
   26ef0:	0a40      	lsrs	r0, r0, #9
   26ef2:	b2d2      	uxtb	r2, r2
   26ef4:	400c      	ands	r4, r1
   26ef6:	e76f      	b.n	26dd8 <__aeabi_fmul+0x94>
   26ef8:	2080      	movs	r0, #128	; 0x80
   26efa:	03c0      	lsls	r0, r0, #15
   26efc:	4207      	tst	r7, r0
   26efe:	d007      	beq.n	26f10 <__aeabi_fmul+0x1cc>
   26f00:	4205      	tst	r5, r0
   26f02:	d105      	bne.n	26f10 <__aeabi_fmul+0x1cc>
   26f04:	4328      	orrs	r0, r5
   26f06:	0240      	lsls	r0, r0, #9
   26f08:	0a40      	lsrs	r0, r0, #9
   26f0a:	4644      	mov	r4, r8
   26f0c:	22ff      	movs	r2, #255	; 0xff
   26f0e:	e763      	b.n	26dd8 <__aeabi_fmul+0x94>
   26f10:	4338      	orrs	r0, r7
   26f12:	0240      	lsls	r0, r0, #9
   26f14:	0a40      	lsrs	r0, r0, #9
   26f16:	22ff      	movs	r2, #255	; 0xff
   26f18:	e75e      	b.n	26dd8 <__aeabi_fmul+0x94>
   26f1a:	2401      	movs	r4, #1
   26f1c:	1aa3      	subs	r3, r4, r2
   26f1e:	2b1b      	cmp	r3, #27
   26f20:	dd05      	ble.n	26f2e <__aeabi_fmul+0x1ea>
   26f22:	400c      	ands	r4, r1
   26f24:	2200      	movs	r2, #0
   26f26:	2000      	movs	r0, #0
   26f28:	e756      	b.n	26dd8 <__aeabi_fmul+0x94>
   26f2a:	465e      	mov	r6, fp
   26f2c:	e7cb      	b.n	26ec6 <__aeabi_fmul+0x182>
   26f2e:	002a      	movs	r2, r5
   26f30:	2020      	movs	r0, #32
   26f32:	40da      	lsrs	r2, r3
   26f34:	1ac3      	subs	r3, r0, r3
   26f36:	409d      	lsls	r5, r3
   26f38:	002b      	movs	r3, r5
   26f3a:	1e5d      	subs	r5, r3, #1
   26f3c:	41ab      	sbcs	r3, r5
   26f3e:	4313      	orrs	r3, r2
   26f40:	075a      	lsls	r2, r3, #29
   26f42:	d004      	beq.n	26f4e <__aeabi_fmul+0x20a>
   26f44:	220f      	movs	r2, #15
   26f46:	401a      	ands	r2, r3
   26f48:	2a04      	cmp	r2, #4
   26f4a:	d000      	beq.n	26f4e <__aeabi_fmul+0x20a>
   26f4c:	3304      	adds	r3, #4
   26f4e:	015a      	lsls	r2, r3, #5
   26f50:	d504      	bpl.n	26f5c <__aeabi_fmul+0x218>
   26f52:	2401      	movs	r4, #1
   26f54:	2201      	movs	r2, #1
   26f56:	400c      	ands	r4, r1
   26f58:	2000      	movs	r0, #0
   26f5a:	e73d      	b.n	26dd8 <__aeabi_fmul+0x94>
   26f5c:	2401      	movs	r4, #1
   26f5e:	019b      	lsls	r3, r3, #6
   26f60:	0a58      	lsrs	r0, r3, #9
   26f62:	400c      	ands	r4, r1
   26f64:	2200      	movs	r2, #0
   26f66:	e737      	b.n	26dd8 <__aeabi_fmul+0x94>
   26f68:	2080      	movs	r0, #128	; 0x80
   26f6a:	2401      	movs	r4, #1
   26f6c:	03c0      	lsls	r0, r0, #15
   26f6e:	4328      	orrs	r0, r5
   26f70:	0240      	lsls	r0, r0, #9
   26f72:	0a40      	lsrs	r0, r0, #9
   26f74:	400c      	ands	r4, r1
   26f76:	22ff      	movs	r2, #255	; 0xff
   26f78:	e72e      	b.n	26dd8 <__aeabi_fmul+0x94>
   26f7a:	46c0      	nop			; (mov r8, r8)
   26f7c:	0002ad28 	.word	0x0002ad28
   26f80:	f7ffffff 	.word	0xf7ffffff

00026f84 <__aeabi_i2f>:
   26f84:	b570      	push	{r4, r5, r6, lr}
   26f86:	2800      	cmp	r0, #0
   26f88:	d030      	beq.n	26fec <__aeabi_i2f+0x68>
   26f8a:	17c3      	asrs	r3, r0, #31
   26f8c:	18c4      	adds	r4, r0, r3
   26f8e:	405c      	eors	r4, r3
   26f90:	0fc5      	lsrs	r5, r0, #31
   26f92:	0020      	movs	r0, r4
   26f94:	f001 fe86 	bl	28ca4 <__clzsi2>
   26f98:	239e      	movs	r3, #158	; 0x9e
   26f9a:	1a1b      	subs	r3, r3, r0
   26f9c:	2b96      	cmp	r3, #150	; 0x96
   26f9e:	dc0d      	bgt.n	26fbc <__aeabi_i2f+0x38>
   26fa0:	2296      	movs	r2, #150	; 0x96
   26fa2:	1ad2      	subs	r2, r2, r3
   26fa4:	4094      	lsls	r4, r2
   26fa6:	002a      	movs	r2, r5
   26fa8:	0264      	lsls	r4, r4, #9
   26faa:	0a64      	lsrs	r4, r4, #9
   26fac:	b2db      	uxtb	r3, r3
   26fae:	0264      	lsls	r4, r4, #9
   26fb0:	05db      	lsls	r3, r3, #23
   26fb2:	0a60      	lsrs	r0, r4, #9
   26fb4:	07d2      	lsls	r2, r2, #31
   26fb6:	4318      	orrs	r0, r3
   26fb8:	4310      	orrs	r0, r2
   26fba:	bd70      	pop	{r4, r5, r6, pc}
   26fbc:	2b99      	cmp	r3, #153	; 0x99
   26fbe:	dc19      	bgt.n	26ff4 <__aeabi_i2f+0x70>
   26fc0:	2299      	movs	r2, #153	; 0x99
   26fc2:	1ad2      	subs	r2, r2, r3
   26fc4:	2a00      	cmp	r2, #0
   26fc6:	dd29      	ble.n	2701c <__aeabi_i2f+0x98>
   26fc8:	4094      	lsls	r4, r2
   26fca:	0022      	movs	r2, r4
   26fcc:	4c14      	ldr	r4, [pc, #80]	; (27020 <__aeabi_i2f+0x9c>)
   26fce:	4014      	ands	r4, r2
   26fd0:	0751      	lsls	r1, r2, #29
   26fd2:	d004      	beq.n	26fde <__aeabi_i2f+0x5a>
   26fd4:	210f      	movs	r1, #15
   26fd6:	400a      	ands	r2, r1
   26fd8:	2a04      	cmp	r2, #4
   26fda:	d000      	beq.n	26fde <__aeabi_i2f+0x5a>
   26fdc:	3404      	adds	r4, #4
   26fde:	0162      	lsls	r2, r4, #5
   26fe0:	d413      	bmi.n	2700a <__aeabi_i2f+0x86>
   26fe2:	01a4      	lsls	r4, r4, #6
   26fe4:	0a64      	lsrs	r4, r4, #9
   26fe6:	b2db      	uxtb	r3, r3
   26fe8:	002a      	movs	r2, r5
   26fea:	e7e0      	b.n	26fae <__aeabi_i2f+0x2a>
   26fec:	2200      	movs	r2, #0
   26fee:	2300      	movs	r3, #0
   26ff0:	2400      	movs	r4, #0
   26ff2:	e7dc      	b.n	26fae <__aeabi_i2f+0x2a>
   26ff4:	2205      	movs	r2, #5
   26ff6:	0021      	movs	r1, r4
   26ff8:	1a12      	subs	r2, r2, r0
   26ffa:	40d1      	lsrs	r1, r2
   26ffc:	22b9      	movs	r2, #185	; 0xb9
   26ffe:	1ad2      	subs	r2, r2, r3
   27000:	4094      	lsls	r4, r2
   27002:	1e62      	subs	r2, r4, #1
   27004:	4194      	sbcs	r4, r2
   27006:	430c      	orrs	r4, r1
   27008:	e7da      	b.n	26fc0 <__aeabi_i2f+0x3c>
   2700a:	4b05      	ldr	r3, [pc, #20]	; (27020 <__aeabi_i2f+0x9c>)
   2700c:	002a      	movs	r2, r5
   2700e:	401c      	ands	r4, r3
   27010:	239f      	movs	r3, #159	; 0x9f
   27012:	01a4      	lsls	r4, r4, #6
   27014:	1a1b      	subs	r3, r3, r0
   27016:	0a64      	lsrs	r4, r4, #9
   27018:	b2db      	uxtb	r3, r3
   2701a:	e7c8      	b.n	26fae <__aeabi_i2f+0x2a>
   2701c:	0022      	movs	r2, r4
   2701e:	e7d5      	b.n	26fcc <__aeabi_i2f+0x48>
   27020:	fbffffff 	.word	0xfbffffff

00027024 <__aeabi_ui2f>:
   27024:	b510      	push	{r4, lr}
   27026:	1e04      	subs	r4, r0, #0
   27028:	d027      	beq.n	2707a <__aeabi_ui2f+0x56>
   2702a:	f001 fe3b 	bl	28ca4 <__clzsi2>
   2702e:	239e      	movs	r3, #158	; 0x9e
   27030:	1a1b      	subs	r3, r3, r0
   27032:	2b96      	cmp	r3, #150	; 0x96
   27034:	dc0a      	bgt.n	2704c <__aeabi_ui2f+0x28>
   27036:	2296      	movs	r2, #150	; 0x96
   27038:	1ad2      	subs	r2, r2, r3
   2703a:	4094      	lsls	r4, r2
   2703c:	0264      	lsls	r4, r4, #9
   2703e:	0a64      	lsrs	r4, r4, #9
   27040:	b2db      	uxtb	r3, r3
   27042:	0264      	lsls	r4, r4, #9
   27044:	05db      	lsls	r3, r3, #23
   27046:	0a60      	lsrs	r0, r4, #9
   27048:	4318      	orrs	r0, r3
   2704a:	bd10      	pop	{r4, pc}
   2704c:	2b99      	cmp	r3, #153	; 0x99
   2704e:	dc17      	bgt.n	27080 <__aeabi_ui2f+0x5c>
   27050:	2299      	movs	r2, #153	; 0x99
   27052:	1ad2      	subs	r2, r2, r3
   27054:	2a00      	cmp	r2, #0
   27056:	dd27      	ble.n	270a8 <__aeabi_ui2f+0x84>
   27058:	4094      	lsls	r4, r2
   2705a:	0022      	movs	r2, r4
   2705c:	4c13      	ldr	r4, [pc, #76]	; (270ac <__aeabi_ui2f+0x88>)
   2705e:	4014      	ands	r4, r2
   27060:	0751      	lsls	r1, r2, #29
   27062:	d004      	beq.n	2706e <__aeabi_ui2f+0x4a>
   27064:	210f      	movs	r1, #15
   27066:	400a      	ands	r2, r1
   27068:	2a04      	cmp	r2, #4
   2706a:	d000      	beq.n	2706e <__aeabi_ui2f+0x4a>
   2706c:	3404      	adds	r4, #4
   2706e:	0162      	lsls	r2, r4, #5
   27070:	d412      	bmi.n	27098 <__aeabi_ui2f+0x74>
   27072:	01a4      	lsls	r4, r4, #6
   27074:	0a64      	lsrs	r4, r4, #9
   27076:	b2db      	uxtb	r3, r3
   27078:	e7e3      	b.n	27042 <__aeabi_ui2f+0x1e>
   2707a:	2300      	movs	r3, #0
   2707c:	2400      	movs	r4, #0
   2707e:	e7e0      	b.n	27042 <__aeabi_ui2f+0x1e>
   27080:	22b9      	movs	r2, #185	; 0xb9
   27082:	0021      	movs	r1, r4
   27084:	1ad2      	subs	r2, r2, r3
   27086:	4091      	lsls	r1, r2
   27088:	000a      	movs	r2, r1
   2708a:	1e51      	subs	r1, r2, #1
   2708c:	418a      	sbcs	r2, r1
   2708e:	2105      	movs	r1, #5
   27090:	1a09      	subs	r1, r1, r0
   27092:	40cc      	lsrs	r4, r1
   27094:	4314      	orrs	r4, r2
   27096:	e7db      	b.n	27050 <__aeabi_ui2f+0x2c>
   27098:	4b04      	ldr	r3, [pc, #16]	; (270ac <__aeabi_ui2f+0x88>)
   2709a:	401c      	ands	r4, r3
   2709c:	239f      	movs	r3, #159	; 0x9f
   2709e:	01a4      	lsls	r4, r4, #6
   270a0:	1a1b      	subs	r3, r3, r0
   270a2:	0a64      	lsrs	r4, r4, #9
   270a4:	b2db      	uxtb	r3, r3
   270a6:	e7cc      	b.n	27042 <__aeabi_ui2f+0x1e>
   270a8:	0022      	movs	r2, r4
   270aa:	e7d7      	b.n	2705c <__aeabi_ui2f+0x38>
   270ac:	fbffffff 	.word	0xfbffffff

000270b0 <__aeabi_dadd>:
   270b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270b2:	4645      	mov	r5, r8
   270b4:	46de      	mov	lr, fp
   270b6:	4657      	mov	r7, sl
   270b8:	464e      	mov	r6, r9
   270ba:	030c      	lsls	r4, r1, #12
   270bc:	b5e0      	push	{r5, r6, r7, lr}
   270be:	004e      	lsls	r6, r1, #1
   270c0:	0fc9      	lsrs	r1, r1, #31
   270c2:	4688      	mov	r8, r1
   270c4:	000d      	movs	r5, r1
   270c6:	0a61      	lsrs	r1, r4, #9
   270c8:	0f44      	lsrs	r4, r0, #29
   270ca:	430c      	orrs	r4, r1
   270cc:	00c7      	lsls	r7, r0, #3
   270ce:	0319      	lsls	r1, r3, #12
   270d0:	0058      	lsls	r0, r3, #1
   270d2:	0fdb      	lsrs	r3, r3, #31
   270d4:	469b      	mov	fp, r3
   270d6:	0a4b      	lsrs	r3, r1, #9
   270d8:	0f51      	lsrs	r1, r2, #29
   270da:	430b      	orrs	r3, r1
   270dc:	0d76      	lsrs	r6, r6, #21
   270de:	0d40      	lsrs	r0, r0, #21
   270e0:	0019      	movs	r1, r3
   270e2:	00d2      	lsls	r2, r2, #3
   270e4:	45d8      	cmp	r8, fp
   270e6:	d100      	bne.n	270ea <__aeabi_dadd+0x3a>
   270e8:	e0ae      	b.n	27248 <__aeabi_dadd+0x198>
   270ea:	1a35      	subs	r5, r6, r0
   270ec:	2d00      	cmp	r5, #0
   270ee:	dc00      	bgt.n	270f2 <__aeabi_dadd+0x42>
   270f0:	e0f6      	b.n	272e0 <__aeabi_dadd+0x230>
   270f2:	2800      	cmp	r0, #0
   270f4:	d10f      	bne.n	27116 <__aeabi_dadd+0x66>
   270f6:	4313      	orrs	r3, r2
   270f8:	d100      	bne.n	270fc <__aeabi_dadd+0x4c>
   270fa:	e0db      	b.n	272b4 <__aeabi_dadd+0x204>
   270fc:	1e6b      	subs	r3, r5, #1
   270fe:	2b00      	cmp	r3, #0
   27100:	d000      	beq.n	27104 <__aeabi_dadd+0x54>
   27102:	e137      	b.n	27374 <__aeabi_dadd+0x2c4>
   27104:	1aba      	subs	r2, r7, r2
   27106:	4297      	cmp	r7, r2
   27108:	41bf      	sbcs	r7, r7
   2710a:	1a64      	subs	r4, r4, r1
   2710c:	427f      	negs	r7, r7
   2710e:	1be4      	subs	r4, r4, r7
   27110:	2601      	movs	r6, #1
   27112:	0017      	movs	r7, r2
   27114:	e024      	b.n	27160 <__aeabi_dadd+0xb0>
   27116:	4bc6      	ldr	r3, [pc, #792]	; (27430 <__aeabi_dadd+0x380>)
   27118:	429e      	cmp	r6, r3
   2711a:	d04d      	beq.n	271b8 <__aeabi_dadd+0x108>
   2711c:	2380      	movs	r3, #128	; 0x80
   2711e:	041b      	lsls	r3, r3, #16
   27120:	4319      	orrs	r1, r3
   27122:	2d38      	cmp	r5, #56	; 0x38
   27124:	dd00      	ble.n	27128 <__aeabi_dadd+0x78>
   27126:	e107      	b.n	27338 <__aeabi_dadd+0x288>
   27128:	2d1f      	cmp	r5, #31
   2712a:	dd00      	ble.n	2712e <__aeabi_dadd+0x7e>
   2712c:	e138      	b.n	273a0 <__aeabi_dadd+0x2f0>
   2712e:	2020      	movs	r0, #32
   27130:	1b43      	subs	r3, r0, r5
   27132:	469a      	mov	sl, r3
   27134:	000b      	movs	r3, r1
   27136:	4650      	mov	r0, sl
   27138:	4083      	lsls	r3, r0
   2713a:	4699      	mov	r9, r3
   2713c:	0013      	movs	r3, r2
   2713e:	4648      	mov	r0, r9
   27140:	40eb      	lsrs	r3, r5
   27142:	4318      	orrs	r0, r3
   27144:	0003      	movs	r3, r0
   27146:	4650      	mov	r0, sl
   27148:	4082      	lsls	r2, r0
   2714a:	1e50      	subs	r0, r2, #1
   2714c:	4182      	sbcs	r2, r0
   2714e:	40e9      	lsrs	r1, r5
   27150:	431a      	orrs	r2, r3
   27152:	1aba      	subs	r2, r7, r2
   27154:	1a61      	subs	r1, r4, r1
   27156:	4297      	cmp	r7, r2
   27158:	41a4      	sbcs	r4, r4
   2715a:	0017      	movs	r7, r2
   2715c:	4264      	negs	r4, r4
   2715e:	1b0c      	subs	r4, r1, r4
   27160:	0223      	lsls	r3, r4, #8
   27162:	d562      	bpl.n	2722a <__aeabi_dadd+0x17a>
   27164:	0264      	lsls	r4, r4, #9
   27166:	0a65      	lsrs	r5, r4, #9
   27168:	2d00      	cmp	r5, #0
   2716a:	d100      	bne.n	2716e <__aeabi_dadd+0xbe>
   2716c:	e0df      	b.n	2732e <__aeabi_dadd+0x27e>
   2716e:	0028      	movs	r0, r5
   27170:	f001 fd98 	bl	28ca4 <__clzsi2>
   27174:	0003      	movs	r3, r0
   27176:	3b08      	subs	r3, #8
   27178:	2b1f      	cmp	r3, #31
   2717a:	dd00      	ble.n	2717e <__aeabi_dadd+0xce>
   2717c:	e0d2      	b.n	27324 <__aeabi_dadd+0x274>
   2717e:	2220      	movs	r2, #32
   27180:	003c      	movs	r4, r7
   27182:	1ad2      	subs	r2, r2, r3
   27184:	409d      	lsls	r5, r3
   27186:	40d4      	lsrs	r4, r2
   27188:	409f      	lsls	r7, r3
   2718a:	4325      	orrs	r5, r4
   2718c:	429e      	cmp	r6, r3
   2718e:	dd00      	ble.n	27192 <__aeabi_dadd+0xe2>
   27190:	e0c4      	b.n	2731c <__aeabi_dadd+0x26c>
   27192:	1b9e      	subs	r6, r3, r6
   27194:	1c73      	adds	r3, r6, #1
   27196:	2b1f      	cmp	r3, #31
   27198:	dd00      	ble.n	2719c <__aeabi_dadd+0xec>
   2719a:	e0f1      	b.n	27380 <__aeabi_dadd+0x2d0>
   2719c:	2220      	movs	r2, #32
   2719e:	0038      	movs	r0, r7
   271a0:	0029      	movs	r1, r5
   271a2:	1ad2      	subs	r2, r2, r3
   271a4:	40d8      	lsrs	r0, r3
   271a6:	4091      	lsls	r1, r2
   271a8:	4097      	lsls	r7, r2
   271aa:	002c      	movs	r4, r5
   271ac:	4301      	orrs	r1, r0
   271ae:	1e78      	subs	r0, r7, #1
   271b0:	4187      	sbcs	r7, r0
   271b2:	40dc      	lsrs	r4, r3
   271b4:	2600      	movs	r6, #0
   271b6:	430f      	orrs	r7, r1
   271b8:	077b      	lsls	r3, r7, #29
   271ba:	d009      	beq.n	271d0 <__aeabi_dadd+0x120>
   271bc:	230f      	movs	r3, #15
   271be:	403b      	ands	r3, r7
   271c0:	2b04      	cmp	r3, #4
   271c2:	d005      	beq.n	271d0 <__aeabi_dadd+0x120>
   271c4:	1d3b      	adds	r3, r7, #4
   271c6:	42bb      	cmp	r3, r7
   271c8:	41bf      	sbcs	r7, r7
   271ca:	427f      	negs	r7, r7
   271cc:	19e4      	adds	r4, r4, r7
   271ce:	001f      	movs	r7, r3
   271d0:	0223      	lsls	r3, r4, #8
   271d2:	d52c      	bpl.n	2722e <__aeabi_dadd+0x17e>
   271d4:	4b96      	ldr	r3, [pc, #600]	; (27430 <__aeabi_dadd+0x380>)
   271d6:	3601      	adds	r6, #1
   271d8:	429e      	cmp	r6, r3
   271da:	d100      	bne.n	271de <__aeabi_dadd+0x12e>
   271dc:	e09a      	b.n	27314 <__aeabi_dadd+0x264>
   271de:	4645      	mov	r5, r8
   271e0:	4b94      	ldr	r3, [pc, #592]	; (27434 <__aeabi_dadd+0x384>)
   271e2:	08ff      	lsrs	r7, r7, #3
   271e4:	401c      	ands	r4, r3
   271e6:	0760      	lsls	r0, r4, #29
   271e8:	0576      	lsls	r6, r6, #21
   271ea:	0264      	lsls	r4, r4, #9
   271ec:	4307      	orrs	r7, r0
   271ee:	0b24      	lsrs	r4, r4, #12
   271f0:	0d76      	lsrs	r6, r6, #21
   271f2:	2100      	movs	r1, #0
   271f4:	0324      	lsls	r4, r4, #12
   271f6:	0b23      	lsrs	r3, r4, #12
   271f8:	0d0c      	lsrs	r4, r1, #20
   271fa:	4a8f      	ldr	r2, [pc, #572]	; (27438 <__aeabi_dadd+0x388>)
   271fc:	0524      	lsls	r4, r4, #20
   271fe:	431c      	orrs	r4, r3
   27200:	4014      	ands	r4, r2
   27202:	0533      	lsls	r3, r6, #20
   27204:	4323      	orrs	r3, r4
   27206:	005b      	lsls	r3, r3, #1
   27208:	07ed      	lsls	r5, r5, #31
   2720a:	085b      	lsrs	r3, r3, #1
   2720c:	432b      	orrs	r3, r5
   2720e:	0038      	movs	r0, r7
   27210:	0019      	movs	r1, r3
   27212:	bc3c      	pop	{r2, r3, r4, r5}
   27214:	4690      	mov	r8, r2
   27216:	4699      	mov	r9, r3
   27218:	46a2      	mov	sl, r4
   2721a:	46ab      	mov	fp, r5
   2721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2721e:	4664      	mov	r4, ip
   27220:	4304      	orrs	r4, r0
   27222:	d100      	bne.n	27226 <__aeabi_dadd+0x176>
   27224:	e211      	b.n	2764a <__aeabi_dadd+0x59a>
   27226:	0004      	movs	r4, r0
   27228:	4667      	mov	r7, ip
   2722a:	077b      	lsls	r3, r7, #29
   2722c:	d1c6      	bne.n	271bc <__aeabi_dadd+0x10c>
   2722e:	4645      	mov	r5, r8
   27230:	0760      	lsls	r0, r4, #29
   27232:	08ff      	lsrs	r7, r7, #3
   27234:	4307      	orrs	r7, r0
   27236:	08e4      	lsrs	r4, r4, #3
   27238:	4b7d      	ldr	r3, [pc, #500]	; (27430 <__aeabi_dadd+0x380>)
   2723a:	429e      	cmp	r6, r3
   2723c:	d030      	beq.n	272a0 <__aeabi_dadd+0x1f0>
   2723e:	0324      	lsls	r4, r4, #12
   27240:	0576      	lsls	r6, r6, #21
   27242:	0b24      	lsrs	r4, r4, #12
   27244:	0d76      	lsrs	r6, r6, #21
   27246:	e7d4      	b.n	271f2 <__aeabi_dadd+0x142>
   27248:	1a33      	subs	r3, r6, r0
   2724a:	469a      	mov	sl, r3
   2724c:	2b00      	cmp	r3, #0
   2724e:	dd78      	ble.n	27342 <__aeabi_dadd+0x292>
   27250:	2800      	cmp	r0, #0
   27252:	d031      	beq.n	272b8 <__aeabi_dadd+0x208>
   27254:	4876      	ldr	r0, [pc, #472]	; (27430 <__aeabi_dadd+0x380>)
   27256:	4286      	cmp	r6, r0
   27258:	d0ae      	beq.n	271b8 <__aeabi_dadd+0x108>
   2725a:	2080      	movs	r0, #128	; 0x80
   2725c:	0400      	lsls	r0, r0, #16
   2725e:	4301      	orrs	r1, r0
   27260:	4653      	mov	r3, sl
   27262:	2b38      	cmp	r3, #56	; 0x38
   27264:	dc00      	bgt.n	27268 <__aeabi_dadd+0x1b8>
   27266:	e0e9      	b.n	2743c <__aeabi_dadd+0x38c>
   27268:	430a      	orrs	r2, r1
   2726a:	1e51      	subs	r1, r2, #1
   2726c:	418a      	sbcs	r2, r1
   2726e:	2100      	movs	r1, #0
   27270:	19d2      	adds	r2, r2, r7
   27272:	42ba      	cmp	r2, r7
   27274:	41bf      	sbcs	r7, r7
   27276:	1909      	adds	r1, r1, r4
   27278:	427c      	negs	r4, r7
   2727a:	0017      	movs	r7, r2
   2727c:	190c      	adds	r4, r1, r4
   2727e:	0223      	lsls	r3, r4, #8
   27280:	d5d3      	bpl.n	2722a <__aeabi_dadd+0x17a>
   27282:	4b6b      	ldr	r3, [pc, #428]	; (27430 <__aeabi_dadd+0x380>)
   27284:	3601      	adds	r6, #1
   27286:	429e      	cmp	r6, r3
   27288:	d100      	bne.n	2728c <__aeabi_dadd+0x1dc>
   2728a:	e13a      	b.n	27502 <__aeabi_dadd+0x452>
   2728c:	2001      	movs	r0, #1
   2728e:	4b69      	ldr	r3, [pc, #420]	; (27434 <__aeabi_dadd+0x384>)
   27290:	401c      	ands	r4, r3
   27292:	087b      	lsrs	r3, r7, #1
   27294:	4007      	ands	r7, r0
   27296:	431f      	orrs	r7, r3
   27298:	07e0      	lsls	r0, r4, #31
   2729a:	4307      	orrs	r7, r0
   2729c:	0864      	lsrs	r4, r4, #1
   2729e:	e78b      	b.n	271b8 <__aeabi_dadd+0x108>
   272a0:	0023      	movs	r3, r4
   272a2:	433b      	orrs	r3, r7
   272a4:	d100      	bne.n	272a8 <__aeabi_dadd+0x1f8>
   272a6:	e1cb      	b.n	27640 <__aeabi_dadd+0x590>
   272a8:	2280      	movs	r2, #128	; 0x80
   272aa:	0312      	lsls	r2, r2, #12
   272ac:	4314      	orrs	r4, r2
   272ae:	0324      	lsls	r4, r4, #12
   272b0:	0b24      	lsrs	r4, r4, #12
   272b2:	e79e      	b.n	271f2 <__aeabi_dadd+0x142>
   272b4:	002e      	movs	r6, r5
   272b6:	e77f      	b.n	271b8 <__aeabi_dadd+0x108>
   272b8:	0008      	movs	r0, r1
   272ba:	4310      	orrs	r0, r2
   272bc:	d100      	bne.n	272c0 <__aeabi_dadd+0x210>
   272be:	e0b4      	b.n	2742a <__aeabi_dadd+0x37a>
   272c0:	1e58      	subs	r0, r3, #1
   272c2:	2800      	cmp	r0, #0
   272c4:	d000      	beq.n	272c8 <__aeabi_dadd+0x218>
   272c6:	e0de      	b.n	27486 <__aeabi_dadd+0x3d6>
   272c8:	18ba      	adds	r2, r7, r2
   272ca:	42ba      	cmp	r2, r7
   272cc:	419b      	sbcs	r3, r3
   272ce:	1864      	adds	r4, r4, r1
   272d0:	425b      	negs	r3, r3
   272d2:	18e4      	adds	r4, r4, r3
   272d4:	0017      	movs	r7, r2
   272d6:	2601      	movs	r6, #1
   272d8:	0223      	lsls	r3, r4, #8
   272da:	d5a6      	bpl.n	2722a <__aeabi_dadd+0x17a>
   272dc:	2602      	movs	r6, #2
   272de:	e7d5      	b.n	2728c <__aeabi_dadd+0x1dc>
   272e0:	2d00      	cmp	r5, #0
   272e2:	d16e      	bne.n	273c2 <__aeabi_dadd+0x312>
   272e4:	1c70      	adds	r0, r6, #1
   272e6:	0540      	lsls	r0, r0, #21
   272e8:	0d40      	lsrs	r0, r0, #21
   272ea:	2801      	cmp	r0, #1
   272ec:	dc00      	bgt.n	272f0 <__aeabi_dadd+0x240>
   272ee:	e0f9      	b.n	274e4 <__aeabi_dadd+0x434>
   272f0:	1ab8      	subs	r0, r7, r2
   272f2:	4684      	mov	ip, r0
   272f4:	4287      	cmp	r7, r0
   272f6:	4180      	sbcs	r0, r0
   272f8:	1ae5      	subs	r5, r4, r3
   272fa:	4240      	negs	r0, r0
   272fc:	1a2d      	subs	r5, r5, r0
   272fe:	0228      	lsls	r0, r5, #8
   27300:	d400      	bmi.n	27304 <__aeabi_dadd+0x254>
   27302:	e089      	b.n	27418 <__aeabi_dadd+0x368>
   27304:	1bd7      	subs	r7, r2, r7
   27306:	42ba      	cmp	r2, r7
   27308:	4192      	sbcs	r2, r2
   2730a:	1b1c      	subs	r4, r3, r4
   2730c:	4252      	negs	r2, r2
   2730e:	1aa5      	subs	r5, r4, r2
   27310:	46d8      	mov	r8, fp
   27312:	e729      	b.n	27168 <__aeabi_dadd+0xb8>
   27314:	4645      	mov	r5, r8
   27316:	2400      	movs	r4, #0
   27318:	2700      	movs	r7, #0
   2731a:	e76a      	b.n	271f2 <__aeabi_dadd+0x142>
   2731c:	4c45      	ldr	r4, [pc, #276]	; (27434 <__aeabi_dadd+0x384>)
   2731e:	1af6      	subs	r6, r6, r3
   27320:	402c      	ands	r4, r5
   27322:	e749      	b.n	271b8 <__aeabi_dadd+0x108>
   27324:	003d      	movs	r5, r7
   27326:	3828      	subs	r0, #40	; 0x28
   27328:	4085      	lsls	r5, r0
   2732a:	2700      	movs	r7, #0
   2732c:	e72e      	b.n	2718c <__aeabi_dadd+0xdc>
   2732e:	0038      	movs	r0, r7
   27330:	f001 fcb8 	bl	28ca4 <__clzsi2>
   27334:	3020      	adds	r0, #32
   27336:	e71d      	b.n	27174 <__aeabi_dadd+0xc4>
   27338:	430a      	orrs	r2, r1
   2733a:	1e51      	subs	r1, r2, #1
   2733c:	418a      	sbcs	r2, r1
   2733e:	2100      	movs	r1, #0
   27340:	e707      	b.n	27152 <__aeabi_dadd+0xa2>
   27342:	2b00      	cmp	r3, #0
   27344:	d000      	beq.n	27348 <__aeabi_dadd+0x298>
   27346:	e0f3      	b.n	27530 <__aeabi_dadd+0x480>
   27348:	1c70      	adds	r0, r6, #1
   2734a:	0543      	lsls	r3, r0, #21
   2734c:	0d5b      	lsrs	r3, r3, #21
   2734e:	2b01      	cmp	r3, #1
   27350:	dc00      	bgt.n	27354 <__aeabi_dadd+0x2a4>
   27352:	e0ad      	b.n	274b0 <__aeabi_dadd+0x400>
   27354:	4b36      	ldr	r3, [pc, #216]	; (27430 <__aeabi_dadd+0x380>)
   27356:	4298      	cmp	r0, r3
   27358:	d100      	bne.n	2735c <__aeabi_dadd+0x2ac>
   2735a:	e0d1      	b.n	27500 <__aeabi_dadd+0x450>
   2735c:	18ba      	adds	r2, r7, r2
   2735e:	42ba      	cmp	r2, r7
   27360:	41bf      	sbcs	r7, r7
   27362:	1864      	adds	r4, r4, r1
   27364:	427f      	negs	r7, r7
   27366:	19e4      	adds	r4, r4, r7
   27368:	07e7      	lsls	r7, r4, #31
   2736a:	0852      	lsrs	r2, r2, #1
   2736c:	4317      	orrs	r7, r2
   2736e:	0864      	lsrs	r4, r4, #1
   27370:	0006      	movs	r6, r0
   27372:	e721      	b.n	271b8 <__aeabi_dadd+0x108>
   27374:	482e      	ldr	r0, [pc, #184]	; (27430 <__aeabi_dadd+0x380>)
   27376:	4285      	cmp	r5, r0
   27378:	d100      	bne.n	2737c <__aeabi_dadd+0x2cc>
   2737a:	e093      	b.n	274a4 <__aeabi_dadd+0x3f4>
   2737c:	001d      	movs	r5, r3
   2737e:	e6d0      	b.n	27122 <__aeabi_dadd+0x72>
   27380:	0029      	movs	r1, r5
   27382:	3e1f      	subs	r6, #31
   27384:	40f1      	lsrs	r1, r6
   27386:	2b20      	cmp	r3, #32
   27388:	d100      	bne.n	2738c <__aeabi_dadd+0x2dc>
   2738a:	e08d      	b.n	274a8 <__aeabi_dadd+0x3f8>
   2738c:	2240      	movs	r2, #64	; 0x40
   2738e:	1ad3      	subs	r3, r2, r3
   27390:	409d      	lsls	r5, r3
   27392:	432f      	orrs	r7, r5
   27394:	1e7d      	subs	r5, r7, #1
   27396:	41af      	sbcs	r7, r5
   27398:	2400      	movs	r4, #0
   2739a:	430f      	orrs	r7, r1
   2739c:	2600      	movs	r6, #0
   2739e:	e744      	b.n	2722a <__aeabi_dadd+0x17a>
   273a0:	002b      	movs	r3, r5
   273a2:	0008      	movs	r0, r1
   273a4:	3b20      	subs	r3, #32
   273a6:	40d8      	lsrs	r0, r3
   273a8:	0003      	movs	r3, r0
   273aa:	2d20      	cmp	r5, #32
   273ac:	d100      	bne.n	273b0 <__aeabi_dadd+0x300>
   273ae:	e07d      	b.n	274ac <__aeabi_dadd+0x3fc>
   273b0:	2040      	movs	r0, #64	; 0x40
   273b2:	1b45      	subs	r5, r0, r5
   273b4:	40a9      	lsls	r1, r5
   273b6:	430a      	orrs	r2, r1
   273b8:	1e51      	subs	r1, r2, #1
   273ba:	418a      	sbcs	r2, r1
   273bc:	2100      	movs	r1, #0
   273be:	431a      	orrs	r2, r3
   273c0:	e6c7      	b.n	27152 <__aeabi_dadd+0xa2>
   273c2:	2e00      	cmp	r6, #0
   273c4:	d050      	beq.n	27468 <__aeabi_dadd+0x3b8>
   273c6:	4e1a      	ldr	r6, [pc, #104]	; (27430 <__aeabi_dadd+0x380>)
   273c8:	42b0      	cmp	r0, r6
   273ca:	d057      	beq.n	2747c <__aeabi_dadd+0x3cc>
   273cc:	2680      	movs	r6, #128	; 0x80
   273ce:	426b      	negs	r3, r5
   273d0:	4699      	mov	r9, r3
   273d2:	0436      	lsls	r6, r6, #16
   273d4:	4334      	orrs	r4, r6
   273d6:	464b      	mov	r3, r9
   273d8:	2b38      	cmp	r3, #56	; 0x38
   273da:	dd00      	ble.n	273de <__aeabi_dadd+0x32e>
   273dc:	e0d6      	b.n	2758c <__aeabi_dadd+0x4dc>
   273de:	2b1f      	cmp	r3, #31
   273e0:	dd00      	ble.n	273e4 <__aeabi_dadd+0x334>
   273e2:	e135      	b.n	27650 <__aeabi_dadd+0x5a0>
   273e4:	2620      	movs	r6, #32
   273e6:	1af5      	subs	r5, r6, r3
   273e8:	0026      	movs	r6, r4
   273ea:	40ae      	lsls	r6, r5
   273ec:	46b2      	mov	sl, r6
   273ee:	003e      	movs	r6, r7
   273f0:	40de      	lsrs	r6, r3
   273f2:	46ac      	mov	ip, r5
   273f4:	0035      	movs	r5, r6
   273f6:	4656      	mov	r6, sl
   273f8:	432e      	orrs	r6, r5
   273fa:	4665      	mov	r5, ip
   273fc:	40af      	lsls	r7, r5
   273fe:	1e7d      	subs	r5, r7, #1
   27400:	41af      	sbcs	r7, r5
   27402:	40dc      	lsrs	r4, r3
   27404:	4337      	orrs	r7, r6
   27406:	1bd7      	subs	r7, r2, r7
   27408:	42ba      	cmp	r2, r7
   2740a:	4192      	sbcs	r2, r2
   2740c:	1b0c      	subs	r4, r1, r4
   2740e:	4252      	negs	r2, r2
   27410:	1aa4      	subs	r4, r4, r2
   27412:	0006      	movs	r6, r0
   27414:	46d8      	mov	r8, fp
   27416:	e6a3      	b.n	27160 <__aeabi_dadd+0xb0>
   27418:	4664      	mov	r4, ip
   2741a:	4667      	mov	r7, ip
   2741c:	432c      	orrs	r4, r5
   2741e:	d000      	beq.n	27422 <__aeabi_dadd+0x372>
   27420:	e6a2      	b.n	27168 <__aeabi_dadd+0xb8>
   27422:	2500      	movs	r5, #0
   27424:	2600      	movs	r6, #0
   27426:	2700      	movs	r7, #0
   27428:	e706      	b.n	27238 <__aeabi_dadd+0x188>
   2742a:	001e      	movs	r6, r3
   2742c:	e6c4      	b.n	271b8 <__aeabi_dadd+0x108>
   2742e:	46c0      	nop			; (mov r8, r8)
   27430:	000007ff 	.word	0x000007ff
   27434:	ff7fffff 	.word	0xff7fffff
   27438:	800fffff 	.word	0x800fffff
   2743c:	2b1f      	cmp	r3, #31
   2743e:	dc63      	bgt.n	27508 <__aeabi_dadd+0x458>
   27440:	2020      	movs	r0, #32
   27442:	1ac3      	subs	r3, r0, r3
   27444:	0008      	movs	r0, r1
   27446:	4098      	lsls	r0, r3
   27448:	469c      	mov	ip, r3
   2744a:	4683      	mov	fp, r0
   2744c:	4653      	mov	r3, sl
   2744e:	0010      	movs	r0, r2
   27450:	40d8      	lsrs	r0, r3
   27452:	0003      	movs	r3, r0
   27454:	4658      	mov	r0, fp
   27456:	4318      	orrs	r0, r3
   27458:	4663      	mov	r3, ip
   2745a:	409a      	lsls	r2, r3
   2745c:	1e53      	subs	r3, r2, #1
   2745e:	419a      	sbcs	r2, r3
   27460:	4653      	mov	r3, sl
   27462:	4302      	orrs	r2, r0
   27464:	40d9      	lsrs	r1, r3
   27466:	e703      	b.n	27270 <__aeabi_dadd+0x1c0>
   27468:	0026      	movs	r6, r4
   2746a:	433e      	orrs	r6, r7
   2746c:	d006      	beq.n	2747c <__aeabi_dadd+0x3cc>
   2746e:	43eb      	mvns	r3, r5
   27470:	4699      	mov	r9, r3
   27472:	2b00      	cmp	r3, #0
   27474:	d0c7      	beq.n	27406 <__aeabi_dadd+0x356>
   27476:	4e94      	ldr	r6, [pc, #592]	; (276c8 <__aeabi_dadd+0x618>)
   27478:	42b0      	cmp	r0, r6
   2747a:	d1ac      	bne.n	273d6 <__aeabi_dadd+0x326>
   2747c:	000c      	movs	r4, r1
   2747e:	0017      	movs	r7, r2
   27480:	0006      	movs	r6, r0
   27482:	46d8      	mov	r8, fp
   27484:	e698      	b.n	271b8 <__aeabi_dadd+0x108>
   27486:	4b90      	ldr	r3, [pc, #576]	; (276c8 <__aeabi_dadd+0x618>)
   27488:	459a      	cmp	sl, r3
   2748a:	d00b      	beq.n	274a4 <__aeabi_dadd+0x3f4>
   2748c:	4682      	mov	sl, r0
   2748e:	e6e7      	b.n	27260 <__aeabi_dadd+0x1b0>
   27490:	2800      	cmp	r0, #0
   27492:	d000      	beq.n	27496 <__aeabi_dadd+0x3e6>
   27494:	e09e      	b.n	275d4 <__aeabi_dadd+0x524>
   27496:	0018      	movs	r0, r3
   27498:	4310      	orrs	r0, r2
   2749a:	d100      	bne.n	2749e <__aeabi_dadd+0x3ee>
   2749c:	e0e9      	b.n	27672 <__aeabi_dadd+0x5c2>
   2749e:	001c      	movs	r4, r3
   274a0:	0017      	movs	r7, r2
   274a2:	46d8      	mov	r8, fp
   274a4:	4e88      	ldr	r6, [pc, #544]	; (276c8 <__aeabi_dadd+0x618>)
   274a6:	e687      	b.n	271b8 <__aeabi_dadd+0x108>
   274a8:	2500      	movs	r5, #0
   274aa:	e772      	b.n	27392 <__aeabi_dadd+0x2e2>
   274ac:	2100      	movs	r1, #0
   274ae:	e782      	b.n	273b6 <__aeabi_dadd+0x306>
   274b0:	0023      	movs	r3, r4
   274b2:	433b      	orrs	r3, r7
   274b4:	2e00      	cmp	r6, #0
   274b6:	d000      	beq.n	274ba <__aeabi_dadd+0x40a>
   274b8:	e0ab      	b.n	27612 <__aeabi_dadd+0x562>
   274ba:	2b00      	cmp	r3, #0
   274bc:	d100      	bne.n	274c0 <__aeabi_dadd+0x410>
   274be:	e0e7      	b.n	27690 <__aeabi_dadd+0x5e0>
   274c0:	000b      	movs	r3, r1
   274c2:	4313      	orrs	r3, r2
   274c4:	d100      	bne.n	274c8 <__aeabi_dadd+0x418>
   274c6:	e677      	b.n	271b8 <__aeabi_dadd+0x108>
   274c8:	18ba      	adds	r2, r7, r2
   274ca:	42ba      	cmp	r2, r7
   274cc:	41bf      	sbcs	r7, r7
   274ce:	1864      	adds	r4, r4, r1
   274d0:	427f      	negs	r7, r7
   274d2:	19e4      	adds	r4, r4, r7
   274d4:	0223      	lsls	r3, r4, #8
   274d6:	d400      	bmi.n	274da <__aeabi_dadd+0x42a>
   274d8:	e0f2      	b.n	276c0 <__aeabi_dadd+0x610>
   274da:	4b7c      	ldr	r3, [pc, #496]	; (276cc <__aeabi_dadd+0x61c>)
   274dc:	0017      	movs	r7, r2
   274de:	401c      	ands	r4, r3
   274e0:	0006      	movs	r6, r0
   274e2:	e669      	b.n	271b8 <__aeabi_dadd+0x108>
   274e4:	0020      	movs	r0, r4
   274e6:	4338      	orrs	r0, r7
   274e8:	2e00      	cmp	r6, #0
   274ea:	d1d1      	bne.n	27490 <__aeabi_dadd+0x3e0>
   274ec:	2800      	cmp	r0, #0
   274ee:	d15b      	bne.n	275a8 <__aeabi_dadd+0x4f8>
   274f0:	001c      	movs	r4, r3
   274f2:	4314      	orrs	r4, r2
   274f4:	d100      	bne.n	274f8 <__aeabi_dadd+0x448>
   274f6:	e0a8      	b.n	2764a <__aeabi_dadd+0x59a>
   274f8:	001c      	movs	r4, r3
   274fa:	0017      	movs	r7, r2
   274fc:	46d8      	mov	r8, fp
   274fe:	e65b      	b.n	271b8 <__aeabi_dadd+0x108>
   27500:	0006      	movs	r6, r0
   27502:	2400      	movs	r4, #0
   27504:	2700      	movs	r7, #0
   27506:	e697      	b.n	27238 <__aeabi_dadd+0x188>
   27508:	4650      	mov	r0, sl
   2750a:	000b      	movs	r3, r1
   2750c:	3820      	subs	r0, #32
   2750e:	40c3      	lsrs	r3, r0
   27510:	4699      	mov	r9, r3
   27512:	4653      	mov	r3, sl
   27514:	2b20      	cmp	r3, #32
   27516:	d100      	bne.n	2751a <__aeabi_dadd+0x46a>
   27518:	e095      	b.n	27646 <__aeabi_dadd+0x596>
   2751a:	2340      	movs	r3, #64	; 0x40
   2751c:	4650      	mov	r0, sl
   2751e:	1a1b      	subs	r3, r3, r0
   27520:	4099      	lsls	r1, r3
   27522:	430a      	orrs	r2, r1
   27524:	1e51      	subs	r1, r2, #1
   27526:	418a      	sbcs	r2, r1
   27528:	464b      	mov	r3, r9
   2752a:	2100      	movs	r1, #0
   2752c:	431a      	orrs	r2, r3
   2752e:	e69f      	b.n	27270 <__aeabi_dadd+0x1c0>
   27530:	2e00      	cmp	r6, #0
   27532:	d130      	bne.n	27596 <__aeabi_dadd+0x4e6>
   27534:	0026      	movs	r6, r4
   27536:	433e      	orrs	r6, r7
   27538:	d067      	beq.n	2760a <__aeabi_dadd+0x55a>
   2753a:	43db      	mvns	r3, r3
   2753c:	469a      	mov	sl, r3
   2753e:	2b00      	cmp	r3, #0
   27540:	d01c      	beq.n	2757c <__aeabi_dadd+0x4cc>
   27542:	4e61      	ldr	r6, [pc, #388]	; (276c8 <__aeabi_dadd+0x618>)
   27544:	42b0      	cmp	r0, r6
   27546:	d060      	beq.n	2760a <__aeabi_dadd+0x55a>
   27548:	4653      	mov	r3, sl
   2754a:	2b38      	cmp	r3, #56	; 0x38
   2754c:	dd00      	ble.n	27550 <__aeabi_dadd+0x4a0>
   2754e:	e096      	b.n	2767e <__aeabi_dadd+0x5ce>
   27550:	2b1f      	cmp	r3, #31
   27552:	dd00      	ble.n	27556 <__aeabi_dadd+0x4a6>
   27554:	e09f      	b.n	27696 <__aeabi_dadd+0x5e6>
   27556:	2620      	movs	r6, #32
   27558:	1af3      	subs	r3, r6, r3
   2755a:	0026      	movs	r6, r4
   2755c:	409e      	lsls	r6, r3
   2755e:	469c      	mov	ip, r3
   27560:	46b3      	mov	fp, r6
   27562:	4653      	mov	r3, sl
   27564:	003e      	movs	r6, r7
   27566:	40de      	lsrs	r6, r3
   27568:	0033      	movs	r3, r6
   2756a:	465e      	mov	r6, fp
   2756c:	431e      	orrs	r6, r3
   2756e:	4663      	mov	r3, ip
   27570:	409f      	lsls	r7, r3
   27572:	1e7b      	subs	r3, r7, #1
   27574:	419f      	sbcs	r7, r3
   27576:	4653      	mov	r3, sl
   27578:	40dc      	lsrs	r4, r3
   2757a:	4337      	orrs	r7, r6
   2757c:	18bf      	adds	r7, r7, r2
   2757e:	4297      	cmp	r7, r2
   27580:	4192      	sbcs	r2, r2
   27582:	1864      	adds	r4, r4, r1
   27584:	4252      	negs	r2, r2
   27586:	18a4      	adds	r4, r4, r2
   27588:	0006      	movs	r6, r0
   2758a:	e678      	b.n	2727e <__aeabi_dadd+0x1ce>
   2758c:	4327      	orrs	r7, r4
   2758e:	1e7c      	subs	r4, r7, #1
   27590:	41a7      	sbcs	r7, r4
   27592:	2400      	movs	r4, #0
   27594:	e737      	b.n	27406 <__aeabi_dadd+0x356>
   27596:	4e4c      	ldr	r6, [pc, #304]	; (276c8 <__aeabi_dadd+0x618>)
   27598:	42b0      	cmp	r0, r6
   2759a:	d036      	beq.n	2760a <__aeabi_dadd+0x55a>
   2759c:	2680      	movs	r6, #128	; 0x80
   2759e:	425b      	negs	r3, r3
   275a0:	0436      	lsls	r6, r6, #16
   275a2:	469a      	mov	sl, r3
   275a4:	4334      	orrs	r4, r6
   275a6:	e7cf      	b.n	27548 <__aeabi_dadd+0x498>
   275a8:	0018      	movs	r0, r3
   275aa:	4310      	orrs	r0, r2
   275ac:	d100      	bne.n	275b0 <__aeabi_dadd+0x500>
   275ae:	e603      	b.n	271b8 <__aeabi_dadd+0x108>
   275b0:	1ab8      	subs	r0, r7, r2
   275b2:	4684      	mov	ip, r0
   275b4:	4567      	cmp	r7, ip
   275b6:	41ad      	sbcs	r5, r5
   275b8:	1ae0      	subs	r0, r4, r3
   275ba:	426d      	negs	r5, r5
   275bc:	1b40      	subs	r0, r0, r5
   275be:	0205      	lsls	r5, r0, #8
   275c0:	d400      	bmi.n	275c4 <__aeabi_dadd+0x514>
   275c2:	e62c      	b.n	2721e <__aeabi_dadd+0x16e>
   275c4:	1bd7      	subs	r7, r2, r7
   275c6:	42ba      	cmp	r2, r7
   275c8:	4192      	sbcs	r2, r2
   275ca:	1b1c      	subs	r4, r3, r4
   275cc:	4252      	negs	r2, r2
   275ce:	1aa4      	subs	r4, r4, r2
   275d0:	46d8      	mov	r8, fp
   275d2:	e5f1      	b.n	271b8 <__aeabi_dadd+0x108>
   275d4:	0018      	movs	r0, r3
   275d6:	4310      	orrs	r0, r2
   275d8:	d100      	bne.n	275dc <__aeabi_dadd+0x52c>
   275da:	e763      	b.n	274a4 <__aeabi_dadd+0x3f4>
   275dc:	08f8      	lsrs	r0, r7, #3
   275de:	0767      	lsls	r7, r4, #29
   275e0:	4307      	orrs	r7, r0
   275e2:	2080      	movs	r0, #128	; 0x80
   275e4:	08e4      	lsrs	r4, r4, #3
   275e6:	0300      	lsls	r0, r0, #12
   275e8:	4204      	tst	r4, r0
   275ea:	d008      	beq.n	275fe <__aeabi_dadd+0x54e>
   275ec:	08dd      	lsrs	r5, r3, #3
   275ee:	4205      	tst	r5, r0
   275f0:	d105      	bne.n	275fe <__aeabi_dadd+0x54e>
   275f2:	08d2      	lsrs	r2, r2, #3
   275f4:	0759      	lsls	r1, r3, #29
   275f6:	4311      	orrs	r1, r2
   275f8:	000f      	movs	r7, r1
   275fa:	002c      	movs	r4, r5
   275fc:	46d8      	mov	r8, fp
   275fe:	0f7b      	lsrs	r3, r7, #29
   27600:	00e4      	lsls	r4, r4, #3
   27602:	431c      	orrs	r4, r3
   27604:	00ff      	lsls	r7, r7, #3
   27606:	4e30      	ldr	r6, [pc, #192]	; (276c8 <__aeabi_dadd+0x618>)
   27608:	e5d6      	b.n	271b8 <__aeabi_dadd+0x108>
   2760a:	000c      	movs	r4, r1
   2760c:	0017      	movs	r7, r2
   2760e:	0006      	movs	r6, r0
   27610:	e5d2      	b.n	271b8 <__aeabi_dadd+0x108>
   27612:	2b00      	cmp	r3, #0
   27614:	d038      	beq.n	27688 <__aeabi_dadd+0x5d8>
   27616:	000b      	movs	r3, r1
   27618:	4313      	orrs	r3, r2
   2761a:	d100      	bne.n	2761e <__aeabi_dadd+0x56e>
   2761c:	e742      	b.n	274a4 <__aeabi_dadd+0x3f4>
   2761e:	08f8      	lsrs	r0, r7, #3
   27620:	0767      	lsls	r7, r4, #29
   27622:	4307      	orrs	r7, r0
   27624:	2080      	movs	r0, #128	; 0x80
   27626:	08e4      	lsrs	r4, r4, #3
   27628:	0300      	lsls	r0, r0, #12
   2762a:	4204      	tst	r4, r0
   2762c:	d0e7      	beq.n	275fe <__aeabi_dadd+0x54e>
   2762e:	08cb      	lsrs	r3, r1, #3
   27630:	4203      	tst	r3, r0
   27632:	d1e4      	bne.n	275fe <__aeabi_dadd+0x54e>
   27634:	08d2      	lsrs	r2, r2, #3
   27636:	0749      	lsls	r1, r1, #29
   27638:	4311      	orrs	r1, r2
   2763a:	000f      	movs	r7, r1
   2763c:	001c      	movs	r4, r3
   2763e:	e7de      	b.n	275fe <__aeabi_dadd+0x54e>
   27640:	2700      	movs	r7, #0
   27642:	2400      	movs	r4, #0
   27644:	e5d5      	b.n	271f2 <__aeabi_dadd+0x142>
   27646:	2100      	movs	r1, #0
   27648:	e76b      	b.n	27522 <__aeabi_dadd+0x472>
   2764a:	2500      	movs	r5, #0
   2764c:	2700      	movs	r7, #0
   2764e:	e5f3      	b.n	27238 <__aeabi_dadd+0x188>
   27650:	464e      	mov	r6, r9
   27652:	0025      	movs	r5, r4
   27654:	3e20      	subs	r6, #32
   27656:	40f5      	lsrs	r5, r6
   27658:	464b      	mov	r3, r9
   2765a:	002e      	movs	r6, r5
   2765c:	2b20      	cmp	r3, #32
   2765e:	d02d      	beq.n	276bc <__aeabi_dadd+0x60c>
   27660:	2540      	movs	r5, #64	; 0x40
   27662:	1aed      	subs	r5, r5, r3
   27664:	40ac      	lsls	r4, r5
   27666:	4327      	orrs	r7, r4
   27668:	1e7c      	subs	r4, r7, #1
   2766a:	41a7      	sbcs	r7, r4
   2766c:	2400      	movs	r4, #0
   2766e:	4337      	orrs	r7, r6
   27670:	e6c9      	b.n	27406 <__aeabi_dadd+0x356>
   27672:	2480      	movs	r4, #128	; 0x80
   27674:	2500      	movs	r5, #0
   27676:	0324      	lsls	r4, r4, #12
   27678:	4e13      	ldr	r6, [pc, #76]	; (276c8 <__aeabi_dadd+0x618>)
   2767a:	2700      	movs	r7, #0
   2767c:	e5dc      	b.n	27238 <__aeabi_dadd+0x188>
   2767e:	4327      	orrs	r7, r4
   27680:	1e7c      	subs	r4, r7, #1
   27682:	41a7      	sbcs	r7, r4
   27684:	2400      	movs	r4, #0
   27686:	e779      	b.n	2757c <__aeabi_dadd+0x4cc>
   27688:	000c      	movs	r4, r1
   2768a:	0017      	movs	r7, r2
   2768c:	4e0e      	ldr	r6, [pc, #56]	; (276c8 <__aeabi_dadd+0x618>)
   2768e:	e593      	b.n	271b8 <__aeabi_dadd+0x108>
   27690:	000c      	movs	r4, r1
   27692:	0017      	movs	r7, r2
   27694:	e590      	b.n	271b8 <__aeabi_dadd+0x108>
   27696:	4656      	mov	r6, sl
   27698:	0023      	movs	r3, r4
   2769a:	3e20      	subs	r6, #32
   2769c:	40f3      	lsrs	r3, r6
   2769e:	4699      	mov	r9, r3
   276a0:	4653      	mov	r3, sl
   276a2:	2b20      	cmp	r3, #32
   276a4:	d00e      	beq.n	276c4 <__aeabi_dadd+0x614>
   276a6:	2340      	movs	r3, #64	; 0x40
   276a8:	4656      	mov	r6, sl
   276aa:	1b9b      	subs	r3, r3, r6
   276ac:	409c      	lsls	r4, r3
   276ae:	4327      	orrs	r7, r4
   276b0:	1e7c      	subs	r4, r7, #1
   276b2:	41a7      	sbcs	r7, r4
   276b4:	464b      	mov	r3, r9
   276b6:	2400      	movs	r4, #0
   276b8:	431f      	orrs	r7, r3
   276ba:	e75f      	b.n	2757c <__aeabi_dadd+0x4cc>
   276bc:	2400      	movs	r4, #0
   276be:	e7d2      	b.n	27666 <__aeabi_dadd+0x5b6>
   276c0:	0017      	movs	r7, r2
   276c2:	e5b2      	b.n	2722a <__aeabi_dadd+0x17a>
   276c4:	2400      	movs	r4, #0
   276c6:	e7f2      	b.n	276ae <__aeabi_dadd+0x5fe>
   276c8:	000007ff 	.word	0x000007ff
   276cc:	ff7fffff 	.word	0xff7fffff

000276d0 <__aeabi_ddiv>:
   276d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   276d2:	4657      	mov	r7, sl
   276d4:	4645      	mov	r5, r8
   276d6:	46de      	mov	lr, fp
   276d8:	464e      	mov	r6, r9
   276da:	b5e0      	push	{r5, r6, r7, lr}
   276dc:	004c      	lsls	r4, r1, #1
   276de:	030e      	lsls	r6, r1, #12
   276e0:	b087      	sub	sp, #28
   276e2:	4683      	mov	fp, r0
   276e4:	4692      	mov	sl, r2
   276e6:	001d      	movs	r5, r3
   276e8:	4680      	mov	r8, r0
   276ea:	0b36      	lsrs	r6, r6, #12
   276ec:	0d64      	lsrs	r4, r4, #21
   276ee:	0fcf      	lsrs	r7, r1, #31
   276f0:	2c00      	cmp	r4, #0
   276f2:	d04f      	beq.n	27794 <__aeabi_ddiv+0xc4>
   276f4:	4b6f      	ldr	r3, [pc, #444]	; (278b4 <__aeabi_ddiv+0x1e4>)
   276f6:	429c      	cmp	r4, r3
   276f8:	d035      	beq.n	27766 <__aeabi_ddiv+0x96>
   276fa:	2380      	movs	r3, #128	; 0x80
   276fc:	0f42      	lsrs	r2, r0, #29
   276fe:	041b      	lsls	r3, r3, #16
   27700:	00f6      	lsls	r6, r6, #3
   27702:	4313      	orrs	r3, r2
   27704:	4333      	orrs	r3, r6
   27706:	4699      	mov	r9, r3
   27708:	00c3      	lsls	r3, r0, #3
   2770a:	4698      	mov	r8, r3
   2770c:	4b6a      	ldr	r3, [pc, #424]	; (278b8 <__aeabi_ddiv+0x1e8>)
   2770e:	2600      	movs	r6, #0
   27710:	469c      	mov	ip, r3
   27712:	2300      	movs	r3, #0
   27714:	4464      	add	r4, ip
   27716:	9303      	str	r3, [sp, #12]
   27718:	032b      	lsls	r3, r5, #12
   2771a:	0b1b      	lsrs	r3, r3, #12
   2771c:	469b      	mov	fp, r3
   2771e:	006b      	lsls	r3, r5, #1
   27720:	0fed      	lsrs	r5, r5, #31
   27722:	4650      	mov	r0, sl
   27724:	0d5b      	lsrs	r3, r3, #21
   27726:	9501      	str	r5, [sp, #4]
   27728:	d05e      	beq.n	277e8 <__aeabi_ddiv+0x118>
   2772a:	4a62      	ldr	r2, [pc, #392]	; (278b4 <__aeabi_ddiv+0x1e4>)
   2772c:	4293      	cmp	r3, r2
   2772e:	d053      	beq.n	277d8 <__aeabi_ddiv+0x108>
   27730:	465a      	mov	r2, fp
   27732:	00d1      	lsls	r1, r2, #3
   27734:	2280      	movs	r2, #128	; 0x80
   27736:	0f40      	lsrs	r0, r0, #29
   27738:	0412      	lsls	r2, r2, #16
   2773a:	4302      	orrs	r2, r0
   2773c:	430a      	orrs	r2, r1
   2773e:	4693      	mov	fp, r2
   27740:	4652      	mov	r2, sl
   27742:	00d1      	lsls	r1, r2, #3
   27744:	4a5c      	ldr	r2, [pc, #368]	; (278b8 <__aeabi_ddiv+0x1e8>)
   27746:	4694      	mov	ip, r2
   27748:	2200      	movs	r2, #0
   2774a:	4463      	add	r3, ip
   2774c:	0038      	movs	r0, r7
   2774e:	4068      	eors	r0, r5
   27750:	4684      	mov	ip, r0
   27752:	9002      	str	r0, [sp, #8]
   27754:	1ae4      	subs	r4, r4, r3
   27756:	4316      	orrs	r6, r2
   27758:	2e0f      	cmp	r6, #15
   2775a:	d900      	bls.n	2775e <__aeabi_ddiv+0x8e>
   2775c:	e0b4      	b.n	278c8 <__aeabi_ddiv+0x1f8>
   2775e:	4b57      	ldr	r3, [pc, #348]	; (278bc <__aeabi_ddiv+0x1ec>)
   27760:	00b6      	lsls	r6, r6, #2
   27762:	599b      	ldr	r3, [r3, r6]
   27764:	469f      	mov	pc, r3
   27766:	0003      	movs	r3, r0
   27768:	4333      	orrs	r3, r6
   2776a:	4699      	mov	r9, r3
   2776c:	d16c      	bne.n	27848 <__aeabi_ddiv+0x178>
   2776e:	2300      	movs	r3, #0
   27770:	4698      	mov	r8, r3
   27772:	3302      	adds	r3, #2
   27774:	2608      	movs	r6, #8
   27776:	9303      	str	r3, [sp, #12]
   27778:	e7ce      	b.n	27718 <__aeabi_ddiv+0x48>
   2777a:	46cb      	mov	fp, r9
   2777c:	4641      	mov	r1, r8
   2777e:	9a03      	ldr	r2, [sp, #12]
   27780:	9701      	str	r7, [sp, #4]
   27782:	2a02      	cmp	r2, #2
   27784:	d165      	bne.n	27852 <__aeabi_ddiv+0x182>
   27786:	9b01      	ldr	r3, [sp, #4]
   27788:	4c4a      	ldr	r4, [pc, #296]	; (278b4 <__aeabi_ddiv+0x1e4>)
   2778a:	469c      	mov	ip, r3
   2778c:	2300      	movs	r3, #0
   2778e:	2200      	movs	r2, #0
   27790:	4698      	mov	r8, r3
   27792:	e06b      	b.n	2786c <__aeabi_ddiv+0x19c>
   27794:	0003      	movs	r3, r0
   27796:	4333      	orrs	r3, r6
   27798:	4699      	mov	r9, r3
   2779a:	d04e      	beq.n	2783a <__aeabi_ddiv+0x16a>
   2779c:	2e00      	cmp	r6, #0
   2779e:	d100      	bne.n	277a2 <__aeabi_ddiv+0xd2>
   277a0:	e1bc      	b.n	27b1c <__aeabi_ddiv+0x44c>
   277a2:	0030      	movs	r0, r6
   277a4:	f001 fa7e 	bl	28ca4 <__clzsi2>
   277a8:	0003      	movs	r3, r0
   277aa:	3b0b      	subs	r3, #11
   277ac:	2b1c      	cmp	r3, #28
   277ae:	dd00      	ble.n	277b2 <__aeabi_ddiv+0xe2>
   277b0:	e1ac      	b.n	27b0c <__aeabi_ddiv+0x43c>
   277b2:	221d      	movs	r2, #29
   277b4:	1ad3      	subs	r3, r2, r3
   277b6:	465a      	mov	r2, fp
   277b8:	0001      	movs	r1, r0
   277ba:	40da      	lsrs	r2, r3
   277bc:	3908      	subs	r1, #8
   277be:	408e      	lsls	r6, r1
   277c0:	0013      	movs	r3, r2
   277c2:	4333      	orrs	r3, r6
   277c4:	4699      	mov	r9, r3
   277c6:	465b      	mov	r3, fp
   277c8:	408b      	lsls	r3, r1
   277ca:	4698      	mov	r8, r3
   277cc:	2300      	movs	r3, #0
   277ce:	4c3c      	ldr	r4, [pc, #240]	; (278c0 <__aeabi_ddiv+0x1f0>)
   277d0:	2600      	movs	r6, #0
   277d2:	1a24      	subs	r4, r4, r0
   277d4:	9303      	str	r3, [sp, #12]
   277d6:	e79f      	b.n	27718 <__aeabi_ddiv+0x48>
   277d8:	4651      	mov	r1, sl
   277da:	465a      	mov	r2, fp
   277dc:	4311      	orrs	r1, r2
   277de:	d129      	bne.n	27834 <__aeabi_ddiv+0x164>
   277e0:	2200      	movs	r2, #0
   277e2:	4693      	mov	fp, r2
   277e4:	3202      	adds	r2, #2
   277e6:	e7b1      	b.n	2774c <__aeabi_ddiv+0x7c>
   277e8:	4659      	mov	r1, fp
   277ea:	4301      	orrs	r1, r0
   277ec:	d01e      	beq.n	2782c <__aeabi_ddiv+0x15c>
   277ee:	465b      	mov	r3, fp
   277f0:	2b00      	cmp	r3, #0
   277f2:	d100      	bne.n	277f6 <__aeabi_ddiv+0x126>
   277f4:	e19e      	b.n	27b34 <__aeabi_ddiv+0x464>
   277f6:	4658      	mov	r0, fp
   277f8:	f001 fa54 	bl	28ca4 <__clzsi2>
   277fc:	0003      	movs	r3, r0
   277fe:	3b0b      	subs	r3, #11
   27800:	2b1c      	cmp	r3, #28
   27802:	dd00      	ble.n	27806 <__aeabi_ddiv+0x136>
   27804:	e18f      	b.n	27b26 <__aeabi_ddiv+0x456>
   27806:	0002      	movs	r2, r0
   27808:	4659      	mov	r1, fp
   2780a:	3a08      	subs	r2, #8
   2780c:	4091      	lsls	r1, r2
   2780e:	468b      	mov	fp, r1
   27810:	211d      	movs	r1, #29
   27812:	1acb      	subs	r3, r1, r3
   27814:	4651      	mov	r1, sl
   27816:	40d9      	lsrs	r1, r3
   27818:	000b      	movs	r3, r1
   2781a:	4659      	mov	r1, fp
   2781c:	430b      	orrs	r3, r1
   2781e:	4651      	mov	r1, sl
   27820:	469b      	mov	fp, r3
   27822:	4091      	lsls	r1, r2
   27824:	4b26      	ldr	r3, [pc, #152]	; (278c0 <__aeabi_ddiv+0x1f0>)
   27826:	2200      	movs	r2, #0
   27828:	1a1b      	subs	r3, r3, r0
   2782a:	e78f      	b.n	2774c <__aeabi_ddiv+0x7c>
   2782c:	2300      	movs	r3, #0
   2782e:	2201      	movs	r2, #1
   27830:	469b      	mov	fp, r3
   27832:	e78b      	b.n	2774c <__aeabi_ddiv+0x7c>
   27834:	4651      	mov	r1, sl
   27836:	2203      	movs	r2, #3
   27838:	e788      	b.n	2774c <__aeabi_ddiv+0x7c>
   2783a:	2300      	movs	r3, #0
   2783c:	4698      	mov	r8, r3
   2783e:	3301      	adds	r3, #1
   27840:	2604      	movs	r6, #4
   27842:	2400      	movs	r4, #0
   27844:	9303      	str	r3, [sp, #12]
   27846:	e767      	b.n	27718 <__aeabi_ddiv+0x48>
   27848:	2303      	movs	r3, #3
   2784a:	46b1      	mov	r9, r6
   2784c:	9303      	str	r3, [sp, #12]
   2784e:	260c      	movs	r6, #12
   27850:	e762      	b.n	27718 <__aeabi_ddiv+0x48>
   27852:	2a03      	cmp	r2, #3
   27854:	d100      	bne.n	27858 <__aeabi_ddiv+0x188>
   27856:	e25c      	b.n	27d12 <__aeabi_ddiv+0x642>
   27858:	9b01      	ldr	r3, [sp, #4]
   2785a:	2a01      	cmp	r2, #1
   2785c:	d000      	beq.n	27860 <__aeabi_ddiv+0x190>
   2785e:	e1e4      	b.n	27c2a <__aeabi_ddiv+0x55a>
   27860:	4013      	ands	r3, r2
   27862:	469c      	mov	ip, r3
   27864:	2300      	movs	r3, #0
   27866:	2400      	movs	r4, #0
   27868:	2200      	movs	r2, #0
   2786a:	4698      	mov	r8, r3
   2786c:	2100      	movs	r1, #0
   2786e:	0312      	lsls	r2, r2, #12
   27870:	0b13      	lsrs	r3, r2, #12
   27872:	0d0a      	lsrs	r2, r1, #20
   27874:	0512      	lsls	r2, r2, #20
   27876:	431a      	orrs	r2, r3
   27878:	0523      	lsls	r3, r4, #20
   2787a:	4c12      	ldr	r4, [pc, #72]	; (278c4 <__aeabi_ddiv+0x1f4>)
   2787c:	4640      	mov	r0, r8
   2787e:	4022      	ands	r2, r4
   27880:	4313      	orrs	r3, r2
   27882:	4662      	mov	r2, ip
   27884:	005b      	lsls	r3, r3, #1
   27886:	07d2      	lsls	r2, r2, #31
   27888:	085b      	lsrs	r3, r3, #1
   2788a:	4313      	orrs	r3, r2
   2788c:	0019      	movs	r1, r3
   2788e:	b007      	add	sp, #28
   27890:	bc3c      	pop	{r2, r3, r4, r5}
   27892:	4690      	mov	r8, r2
   27894:	4699      	mov	r9, r3
   27896:	46a2      	mov	sl, r4
   27898:	46ab      	mov	fp, r5
   2789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2789c:	2300      	movs	r3, #0
   2789e:	2280      	movs	r2, #128	; 0x80
   278a0:	469c      	mov	ip, r3
   278a2:	0312      	lsls	r2, r2, #12
   278a4:	4698      	mov	r8, r3
   278a6:	4c03      	ldr	r4, [pc, #12]	; (278b4 <__aeabi_ddiv+0x1e4>)
   278a8:	e7e0      	b.n	2786c <__aeabi_ddiv+0x19c>
   278aa:	2300      	movs	r3, #0
   278ac:	4c01      	ldr	r4, [pc, #4]	; (278b4 <__aeabi_ddiv+0x1e4>)
   278ae:	2200      	movs	r2, #0
   278b0:	4698      	mov	r8, r3
   278b2:	e7db      	b.n	2786c <__aeabi_ddiv+0x19c>
   278b4:	000007ff 	.word	0x000007ff
   278b8:	fffffc01 	.word	0xfffffc01
   278bc:	0002ad68 	.word	0x0002ad68
   278c0:	fffffc0d 	.word	0xfffffc0d
   278c4:	800fffff 	.word	0x800fffff
   278c8:	45d9      	cmp	r9, fp
   278ca:	d900      	bls.n	278ce <__aeabi_ddiv+0x1fe>
   278cc:	e139      	b.n	27b42 <__aeabi_ddiv+0x472>
   278ce:	d100      	bne.n	278d2 <__aeabi_ddiv+0x202>
   278d0:	e134      	b.n	27b3c <__aeabi_ddiv+0x46c>
   278d2:	2300      	movs	r3, #0
   278d4:	4646      	mov	r6, r8
   278d6:	464d      	mov	r5, r9
   278d8:	469a      	mov	sl, r3
   278da:	3c01      	subs	r4, #1
   278dc:	465b      	mov	r3, fp
   278de:	0e0a      	lsrs	r2, r1, #24
   278e0:	021b      	lsls	r3, r3, #8
   278e2:	431a      	orrs	r2, r3
   278e4:	020b      	lsls	r3, r1, #8
   278e6:	0c17      	lsrs	r7, r2, #16
   278e8:	9303      	str	r3, [sp, #12]
   278ea:	0413      	lsls	r3, r2, #16
   278ec:	0c1b      	lsrs	r3, r3, #16
   278ee:	0039      	movs	r1, r7
   278f0:	0028      	movs	r0, r5
   278f2:	4690      	mov	r8, r2
   278f4:	9301      	str	r3, [sp, #4]
   278f6:	f7fe fe01 	bl	264fc <__udivsi3>
   278fa:	0002      	movs	r2, r0
   278fc:	9b01      	ldr	r3, [sp, #4]
   278fe:	4683      	mov	fp, r0
   27900:	435a      	muls	r2, r3
   27902:	0028      	movs	r0, r5
   27904:	0039      	movs	r1, r7
   27906:	4691      	mov	r9, r2
   27908:	f7fe fe7e 	bl	26608 <__aeabi_uidivmod>
   2790c:	0c35      	lsrs	r5, r6, #16
   2790e:	0409      	lsls	r1, r1, #16
   27910:	430d      	orrs	r5, r1
   27912:	45a9      	cmp	r9, r5
   27914:	d90d      	bls.n	27932 <__aeabi_ddiv+0x262>
   27916:	465b      	mov	r3, fp
   27918:	4445      	add	r5, r8
   2791a:	3b01      	subs	r3, #1
   2791c:	45a8      	cmp	r8, r5
   2791e:	d900      	bls.n	27922 <__aeabi_ddiv+0x252>
   27920:	e13a      	b.n	27b98 <__aeabi_ddiv+0x4c8>
   27922:	45a9      	cmp	r9, r5
   27924:	d800      	bhi.n	27928 <__aeabi_ddiv+0x258>
   27926:	e137      	b.n	27b98 <__aeabi_ddiv+0x4c8>
   27928:	2302      	movs	r3, #2
   2792a:	425b      	negs	r3, r3
   2792c:	469c      	mov	ip, r3
   2792e:	4445      	add	r5, r8
   27930:	44e3      	add	fp, ip
   27932:	464b      	mov	r3, r9
   27934:	1aeb      	subs	r3, r5, r3
   27936:	0039      	movs	r1, r7
   27938:	0018      	movs	r0, r3
   2793a:	9304      	str	r3, [sp, #16]
   2793c:	f7fe fdde 	bl	264fc <__udivsi3>
   27940:	9b01      	ldr	r3, [sp, #4]
   27942:	0005      	movs	r5, r0
   27944:	4343      	muls	r3, r0
   27946:	0039      	movs	r1, r7
   27948:	9804      	ldr	r0, [sp, #16]
   2794a:	4699      	mov	r9, r3
   2794c:	f7fe fe5c 	bl	26608 <__aeabi_uidivmod>
   27950:	0433      	lsls	r3, r6, #16
   27952:	0409      	lsls	r1, r1, #16
   27954:	0c1b      	lsrs	r3, r3, #16
   27956:	430b      	orrs	r3, r1
   27958:	4599      	cmp	r9, r3
   2795a:	d909      	bls.n	27970 <__aeabi_ddiv+0x2a0>
   2795c:	4443      	add	r3, r8
   2795e:	1e6a      	subs	r2, r5, #1
   27960:	4598      	cmp	r8, r3
   27962:	d900      	bls.n	27966 <__aeabi_ddiv+0x296>
   27964:	e11a      	b.n	27b9c <__aeabi_ddiv+0x4cc>
   27966:	4599      	cmp	r9, r3
   27968:	d800      	bhi.n	2796c <__aeabi_ddiv+0x29c>
   2796a:	e117      	b.n	27b9c <__aeabi_ddiv+0x4cc>
   2796c:	3d02      	subs	r5, #2
   2796e:	4443      	add	r3, r8
   27970:	464a      	mov	r2, r9
   27972:	1a9b      	subs	r3, r3, r2
   27974:	465a      	mov	r2, fp
   27976:	0412      	lsls	r2, r2, #16
   27978:	432a      	orrs	r2, r5
   2797a:	9903      	ldr	r1, [sp, #12]
   2797c:	4693      	mov	fp, r2
   2797e:	0c10      	lsrs	r0, r2, #16
   27980:	0c0a      	lsrs	r2, r1, #16
   27982:	4691      	mov	r9, r2
   27984:	0409      	lsls	r1, r1, #16
   27986:	465a      	mov	r2, fp
   27988:	0c09      	lsrs	r1, r1, #16
   2798a:	464e      	mov	r6, r9
   2798c:	000d      	movs	r5, r1
   2798e:	0412      	lsls	r2, r2, #16
   27990:	0c12      	lsrs	r2, r2, #16
   27992:	4345      	muls	r5, r0
   27994:	9105      	str	r1, [sp, #20]
   27996:	4351      	muls	r1, r2
   27998:	4372      	muls	r2, r6
   2799a:	4370      	muls	r0, r6
   2799c:	1952      	adds	r2, r2, r5
   2799e:	0c0e      	lsrs	r6, r1, #16
   279a0:	18b2      	adds	r2, r6, r2
   279a2:	4295      	cmp	r5, r2
   279a4:	d903      	bls.n	279ae <__aeabi_ddiv+0x2de>
   279a6:	2580      	movs	r5, #128	; 0x80
   279a8:	026d      	lsls	r5, r5, #9
   279aa:	46ac      	mov	ip, r5
   279ac:	4460      	add	r0, ip
   279ae:	0c15      	lsrs	r5, r2, #16
   279b0:	0409      	lsls	r1, r1, #16
   279b2:	0412      	lsls	r2, r2, #16
   279b4:	0c09      	lsrs	r1, r1, #16
   279b6:	1828      	adds	r0, r5, r0
   279b8:	1852      	adds	r2, r2, r1
   279ba:	4283      	cmp	r3, r0
   279bc:	d200      	bcs.n	279c0 <__aeabi_ddiv+0x2f0>
   279be:	e0ce      	b.n	27b5e <__aeabi_ddiv+0x48e>
   279c0:	d100      	bne.n	279c4 <__aeabi_ddiv+0x2f4>
   279c2:	e0c8      	b.n	27b56 <__aeabi_ddiv+0x486>
   279c4:	1a1d      	subs	r5, r3, r0
   279c6:	4653      	mov	r3, sl
   279c8:	1a9e      	subs	r6, r3, r2
   279ca:	45b2      	cmp	sl, r6
   279cc:	4192      	sbcs	r2, r2
   279ce:	4252      	negs	r2, r2
   279d0:	1aab      	subs	r3, r5, r2
   279d2:	469a      	mov	sl, r3
   279d4:	4598      	cmp	r8, r3
   279d6:	d100      	bne.n	279da <__aeabi_ddiv+0x30a>
   279d8:	e117      	b.n	27c0a <__aeabi_ddiv+0x53a>
   279da:	0039      	movs	r1, r7
   279dc:	0018      	movs	r0, r3
   279de:	f7fe fd8d 	bl	264fc <__udivsi3>
   279e2:	9b01      	ldr	r3, [sp, #4]
   279e4:	0005      	movs	r5, r0
   279e6:	4343      	muls	r3, r0
   279e8:	0039      	movs	r1, r7
   279ea:	4650      	mov	r0, sl
   279ec:	9304      	str	r3, [sp, #16]
   279ee:	f7fe fe0b 	bl	26608 <__aeabi_uidivmod>
   279f2:	9804      	ldr	r0, [sp, #16]
   279f4:	040b      	lsls	r3, r1, #16
   279f6:	0c31      	lsrs	r1, r6, #16
   279f8:	4319      	orrs	r1, r3
   279fa:	4288      	cmp	r0, r1
   279fc:	d909      	bls.n	27a12 <__aeabi_ddiv+0x342>
   279fe:	4441      	add	r1, r8
   27a00:	1e6b      	subs	r3, r5, #1
   27a02:	4588      	cmp	r8, r1
   27a04:	d900      	bls.n	27a08 <__aeabi_ddiv+0x338>
   27a06:	e107      	b.n	27c18 <__aeabi_ddiv+0x548>
   27a08:	4288      	cmp	r0, r1
   27a0a:	d800      	bhi.n	27a0e <__aeabi_ddiv+0x33e>
   27a0c:	e104      	b.n	27c18 <__aeabi_ddiv+0x548>
   27a0e:	3d02      	subs	r5, #2
   27a10:	4441      	add	r1, r8
   27a12:	9b04      	ldr	r3, [sp, #16]
   27a14:	1acb      	subs	r3, r1, r3
   27a16:	0018      	movs	r0, r3
   27a18:	0039      	movs	r1, r7
   27a1a:	9304      	str	r3, [sp, #16]
   27a1c:	f7fe fd6e 	bl	264fc <__udivsi3>
   27a20:	9b01      	ldr	r3, [sp, #4]
   27a22:	4682      	mov	sl, r0
   27a24:	4343      	muls	r3, r0
   27a26:	0039      	movs	r1, r7
   27a28:	9804      	ldr	r0, [sp, #16]
   27a2a:	9301      	str	r3, [sp, #4]
   27a2c:	f7fe fdec 	bl	26608 <__aeabi_uidivmod>
   27a30:	9801      	ldr	r0, [sp, #4]
   27a32:	040b      	lsls	r3, r1, #16
   27a34:	0431      	lsls	r1, r6, #16
   27a36:	0c09      	lsrs	r1, r1, #16
   27a38:	4319      	orrs	r1, r3
   27a3a:	4288      	cmp	r0, r1
   27a3c:	d90d      	bls.n	27a5a <__aeabi_ddiv+0x38a>
   27a3e:	4653      	mov	r3, sl
   27a40:	4441      	add	r1, r8
   27a42:	3b01      	subs	r3, #1
   27a44:	4588      	cmp	r8, r1
   27a46:	d900      	bls.n	27a4a <__aeabi_ddiv+0x37a>
   27a48:	e0e8      	b.n	27c1c <__aeabi_ddiv+0x54c>
   27a4a:	4288      	cmp	r0, r1
   27a4c:	d800      	bhi.n	27a50 <__aeabi_ddiv+0x380>
   27a4e:	e0e5      	b.n	27c1c <__aeabi_ddiv+0x54c>
   27a50:	2302      	movs	r3, #2
   27a52:	425b      	negs	r3, r3
   27a54:	469c      	mov	ip, r3
   27a56:	4441      	add	r1, r8
   27a58:	44e2      	add	sl, ip
   27a5a:	9b01      	ldr	r3, [sp, #4]
   27a5c:	042d      	lsls	r5, r5, #16
   27a5e:	1ace      	subs	r6, r1, r3
   27a60:	4651      	mov	r1, sl
   27a62:	4329      	orrs	r1, r5
   27a64:	9d05      	ldr	r5, [sp, #20]
   27a66:	464f      	mov	r7, r9
   27a68:	002a      	movs	r2, r5
   27a6a:	040b      	lsls	r3, r1, #16
   27a6c:	0c08      	lsrs	r0, r1, #16
   27a6e:	0c1b      	lsrs	r3, r3, #16
   27a70:	435a      	muls	r2, r3
   27a72:	4345      	muls	r5, r0
   27a74:	437b      	muls	r3, r7
   27a76:	4378      	muls	r0, r7
   27a78:	195b      	adds	r3, r3, r5
   27a7a:	0c17      	lsrs	r7, r2, #16
   27a7c:	18fb      	adds	r3, r7, r3
   27a7e:	429d      	cmp	r5, r3
   27a80:	d903      	bls.n	27a8a <__aeabi_ddiv+0x3ba>
   27a82:	2580      	movs	r5, #128	; 0x80
   27a84:	026d      	lsls	r5, r5, #9
   27a86:	46ac      	mov	ip, r5
   27a88:	4460      	add	r0, ip
   27a8a:	0c1d      	lsrs	r5, r3, #16
   27a8c:	0412      	lsls	r2, r2, #16
   27a8e:	041b      	lsls	r3, r3, #16
   27a90:	0c12      	lsrs	r2, r2, #16
   27a92:	1828      	adds	r0, r5, r0
   27a94:	189b      	adds	r3, r3, r2
   27a96:	4286      	cmp	r6, r0
   27a98:	d200      	bcs.n	27a9c <__aeabi_ddiv+0x3cc>
   27a9a:	e093      	b.n	27bc4 <__aeabi_ddiv+0x4f4>
   27a9c:	d100      	bne.n	27aa0 <__aeabi_ddiv+0x3d0>
   27a9e:	e08e      	b.n	27bbe <__aeabi_ddiv+0x4ee>
   27aa0:	2301      	movs	r3, #1
   27aa2:	4319      	orrs	r1, r3
   27aa4:	4ba0      	ldr	r3, [pc, #640]	; (27d28 <__aeabi_ddiv+0x658>)
   27aa6:	18e3      	adds	r3, r4, r3
   27aa8:	2b00      	cmp	r3, #0
   27aaa:	dc00      	bgt.n	27aae <__aeabi_ddiv+0x3de>
   27aac:	e099      	b.n	27be2 <__aeabi_ddiv+0x512>
   27aae:	074a      	lsls	r2, r1, #29
   27ab0:	d000      	beq.n	27ab4 <__aeabi_ddiv+0x3e4>
   27ab2:	e09e      	b.n	27bf2 <__aeabi_ddiv+0x522>
   27ab4:	465a      	mov	r2, fp
   27ab6:	01d2      	lsls	r2, r2, #7
   27ab8:	d506      	bpl.n	27ac8 <__aeabi_ddiv+0x3f8>
   27aba:	465a      	mov	r2, fp
   27abc:	4b9b      	ldr	r3, [pc, #620]	; (27d2c <__aeabi_ddiv+0x65c>)
   27abe:	401a      	ands	r2, r3
   27ac0:	2380      	movs	r3, #128	; 0x80
   27ac2:	4693      	mov	fp, r2
   27ac4:	00db      	lsls	r3, r3, #3
   27ac6:	18e3      	adds	r3, r4, r3
   27ac8:	4a99      	ldr	r2, [pc, #612]	; (27d30 <__aeabi_ddiv+0x660>)
   27aca:	4293      	cmp	r3, r2
   27acc:	dd68      	ble.n	27ba0 <__aeabi_ddiv+0x4d0>
   27ace:	2301      	movs	r3, #1
   27ad0:	9a02      	ldr	r2, [sp, #8]
   27ad2:	4c98      	ldr	r4, [pc, #608]	; (27d34 <__aeabi_ddiv+0x664>)
   27ad4:	401a      	ands	r2, r3
   27ad6:	2300      	movs	r3, #0
   27ad8:	4694      	mov	ip, r2
   27ada:	4698      	mov	r8, r3
   27adc:	2200      	movs	r2, #0
   27ade:	e6c5      	b.n	2786c <__aeabi_ddiv+0x19c>
   27ae0:	2280      	movs	r2, #128	; 0x80
   27ae2:	464b      	mov	r3, r9
   27ae4:	0312      	lsls	r2, r2, #12
   27ae6:	4213      	tst	r3, r2
   27ae8:	d00a      	beq.n	27b00 <__aeabi_ddiv+0x430>
   27aea:	465b      	mov	r3, fp
   27aec:	4213      	tst	r3, r2
   27aee:	d106      	bne.n	27afe <__aeabi_ddiv+0x42e>
   27af0:	431a      	orrs	r2, r3
   27af2:	0312      	lsls	r2, r2, #12
   27af4:	0b12      	lsrs	r2, r2, #12
   27af6:	46ac      	mov	ip, r5
   27af8:	4688      	mov	r8, r1
   27afa:	4c8e      	ldr	r4, [pc, #568]	; (27d34 <__aeabi_ddiv+0x664>)
   27afc:	e6b6      	b.n	2786c <__aeabi_ddiv+0x19c>
   27afe:	464b      	mov	r3, r9
   27b00:	431a      	orrs	r2, r3
   27b02:	0312      	lsls	r2, r2, #12
   27b04:	0b12      	lsrs	r2, r2, #12
   27b06:	46bc      	mov	ip, r7
   27b08:	4c8a      	ldr	r4, [pc, #552]	; (27d34 <__aeabi_ddiv+0x664>)
   27b0a:	e6af      	b.n	2786c <__aeabi_ddiv+0x19c>
   27b0c:	0003      	movs	r3, r0
   27b0e:	465a      	mov	r2, fp
   27b10:	3b28      	subs	r3, #40	; 0x28
   27b12:	409a      	lsls	r2, r3
   27b14:	2300      	movs	r3, #0
   27b16:	4691      	mov	r9, r2
   27b18:	4698      	mov	r8, r3
   27b1a:	e657      	b.n	277cc <__aeabi_ddiv+0xfc>
   27b1c:	4658      	mov	r0, fp
   27b1e:	f001 f8c1 	bl	28ca4 <__clzsi2>
   27b22:	3020      	adds	r0, #32
   27b24:	e640      	b.n	277a8 <__aeabi_ddiv+0xd8>
   27b26:	0003      	movs	r3, r0
   27b28:	4652      	mov	r2, sl
   27b2a:	3b28      	subs	r3, #40	; 0x28
   27b2c:	409a      	lsls	r2, r3
   27b2e:	2100      	movs	r1, #0
   27b30:	4693      	mov	fp, r2
   27b32:	e677      	b.n	27824 <__aeabi_ddiv+0x154>
   27b34:	f001 f8b6 	bl	28ca4 <__clzsi2>
   27b38:	3020      	adds	r0, #32
   27b3a:	e65f      	b.n	277fc <__aeabi_ddiv+0x12c>
   27b3c:	4588      	cmp	r8, r1
   27b3e:	d200      	bcs.n	27b42 <__aeabi_ddiv+0x472>
   27b40:	e6c7      	b.n	278d2 <__aeabi_ddiv+0x202>
   27b42:	464b      	mov	r3, r9
   27b44:	07de      	lsls	r6, r3, #31
   27b46:	085d      	lsrs	r5, r3, #1
   27b48:	4643      	mov	r3, r8
   27b4a:	085b      	lsrs	r3, r3, #1
   27b4c:	431e      	orrs	r6, r3
   27b4e:	4643      	mov	r3, r8
   27b50:	07db      	lsls	r3, r3, #31
   27b52:	469a      	mov	sl, r3
   27b54:	e6c2      	b.n	278dc <__aeabi_ddiv+0x20c>
   27b56:	2500      	movs	r5, #0
   27b58:	4592      	cmp	sl, r2
   27b5a:	d300      	bcc.n	27b5e <__aeabi_ddiv+0x48e>
   27b5c:	e733      	b.n	279c6 <__aeabi_ddiv+0x2f6>
   27b5e:	9e03      	ldr	r6, [sp, #12]
   27b60:	4659      	mov	r1, fp
   27b62:	46b4      	mov	ip, r6
   27b64:	44e2      	add	sl, ip
   27b66:	45b2      	cmp	sl, r6
   27b68:	41ad      	sbcs	r5, r5
   27b6a:	426d      	negs	r5, r5
   27b6c:	4445      	add	r5, r8
   27b6e:	18eb      	adds	r3, r5, r3
   27b70:	3901      	subs	r1, #1
   27b72:	4598      	cmp	r8, r3
   27b74:	d207      	bcs.n	27b86 <__aeabi_ddiv+0x4b6>
   27b76:	4298      	cmp	r0, r3
   27b78:	d900      	bls.n	27b7c <__aeabi_ddiv+0x4ac>
   27b7a:	e07f      	b.n	27c7c <__aeabi_ddiv+0x5ac>
   27b7c:	d100      	bne.n	27b80 <__aeabi_ddiv+0x4b0>
   27b7e:	e0bc      	b.n	27cfa <__aeabi_ddiv+0x62a>
   27b80:	1a1d      	subs	r5, r3, r0
   27b82:	468b      	mov	fp, r1
   27b84:	e71f      	b.n	279c6 <__aeabi_ddiv+0x2f6>
   27b86:	4598      	cmp	r8, r3
   27b88:	d1fa      	bne.n	27b80 <__aeabi_ddiv+0x4b0>
   27b8a:	9d03      	ldr	r5, [sp, #12]
   27b8c:	4555      	cmp	r5, sl
   27b8e:	d9f2      	bls.n	27b76 <__aeabi_ddiv+0x4a6>
   27b90:	4643      	mov	r3, r8
   27b92:	468b      	mov	fp, r1
   27b94:	1a1d      	subs	r5, r3, r0
   27b96:	e716      	b.n	279c6 <__aeabi_ddiv+0x2f6>
   27b98:	469b      	mov	fp, r3
   27b9a:	e6ca      	b.n	27932 <__aeabi_ddiv+0x262>
   27b9c:	0015      	movs	r5, r2
   27b9e:	e6e7      	b.n	27970 <__aeabi_ddiv+0x2a0>
   27ba0:	465a      	mov	r2, fp
   27ba2:	08c9      	lsrs	r1, r1, #3
   27ba4:	0752      	lsls	r2, r2, #29
   27ba6:	430a      	orrs	r2, r1
   27ba8:	055b      	lsls	r3, r3, #21
   27baa:	4690      	mov	r8, r2
   27bac:	0d5c      	lsrs	r4, r3, #21
   27bae:	465a      	mov	r2, fp
   27bb0:	2301      	movs	r3, #1
   27bb2:	9902      	ldr	r1, [sp, #8]
   27bb4:	0252      	lsls	r2, r2, #9
   27bb6:	4019      	ands	r1, r3
   27bb8:	0b12      	lsrs	r2, r2, #12
   27bba:	468c      	mov	ip, r1
   27bbc:	e656      	b.n	2786c <__aeabi_ddiv+0x19c>
   27bbe:	2b00      	cmp	r3, #0
   27bc0:	d100      	bne.n	27bc4 <__aeabi_ddiv+0x4f4>
   27bc2:	e76f      	b.n	27aa4 <__aeabi_ddiv+0x3d4>
   27bc4:	4446      	add	r6, r8
   27bc6:	1e4a      	subs	r2, r1, #1
   27bc8:	45b0      	cmp	r8, r6
   27bca:	d929      	bls.n	27c20 <__aeabi_ddiv+0x550>
   27bcc:	0011      	movs	r1, r2
   27bce:	4286      	cmp	r6, r0
   27bd0:	d000      	beq.n	27bd4 <__aeabi_ddiv+0x504>
   27bd2:	e765      	b.n	27aa0 <__aeabi_ddiv+0x3d0>
   27bd4:	9a03      	ldr	r2, [sp, #12]
   27bd6:	4293      	cmp	r3, r2
   27bd8:	d000      	beq.n	27bdc <__aeabi_ddiv+0x50c>
   27bda:	e761      	b.n	27aa0 <__aeabi_ddiv+0x3d0>
   27bdc:	e762      	b.n	27aa4 <__aeabi_ddiv+0x3d4>
   27bde:	2101      	movs	r1, #1
   27be0:	4249      	negs	r1, r1
   27be2:	2001      	movs	r0, #1
   27be4:	1ac2      	subs	r2, r0, r3
   27be6:	2a38      	cmp	r2, #56	; 0x38
   27be8:	dd21      	ble.n	27c2e <__aeabi_ddiv+0x55e>
   27bea:	9b02      	ldr	r3, [sp, #8]
   27bec:	4003      	ands	r3, r0
   27bee:	469c      	mov	ip, r3
   27bf0:	e638      	b.n	27864 <__aeabi_ddiv+0x194>
   27bf2:	220f      	movs	r2, #15
   27bf4:	400a      	ands	r2, r1
   27bf6:	2a04      	cmp	r2, #4
   27bf8:	d100      	bne.n	27bfc <__aeabi_ddiv+0x52c>
   27bfa:	e75b      	b.n	27ab4 <__aeabi_ddiv+0x3e4>
   27bfc:	000a      	movs	r2, r1
   27bfe:	1d11      	adds	r1, r2, #4
   27c00:	4291      	cmp	r1, r2
   27c02:	4192      	sbcs	r2, r2
   27c04:	4252      	negs	r2, r2
   27c06:	4493      	add	fp, r2
   27c08:	e754      	b.n	27ab4 <__aeabi_ddiv+0x3e4>
   27c0a:	4b47      	ldr	r3, [pc, #284]	; (27d28 <__aeabi_ddiv+0x658>)
   27c0c:	18e3      	adds	r3, r4, r3
   27c0e:	2b00      	cmp	r3, #0
   27c10:	dde5      	ble.n	27bde <__aeabi_ddiv+0x50e>
   27c12:	2201      	movs	r2, #1
   27c14:	4252      	negs	r2, r2
   27c16:	e7f2      	b.n	27bfe <__aeabi_ddiv+0x52e>
   27c18:	001d      	movs	r5, r3
   27c1a:	e6fa      	b.n	27a12 <__aeabi_ddiv+0x342>
   27c1c:	469a      	mov	sl, r3
   27c1e:	e71c      	b.n	27a5a <__aeabi_ddiv+0x38a>
   27c20:	42b0      	cmp	r0, r6
   27c22:	d839      	bhi.n	27c98 <__aeabi_ddiv+0x5c8>
   27c24:	d06e      	beq.n	27d04 <__aeabi_ddiv+0x634>
   27c26:	0011      	movs	r1, r2
   27c28:	e73a      	b.n	27aa0 <__aeabi_ddiv+0x3d0>
   27c2a:	9302      	str	r3, [sp, #8]
   27c2c:	e73a      	b.n	27aa4 <__aeabi_ddiv+0x3d4>
   27c2e:	2a1f      	cmp	r2, #31
   27c30:	dc3c      	bgt.n	27cac <__aeabi_ddiv+0x5dc>
   27c32:	2320      	movs	r3, #32
   27c34:	1a9b      	subs	r3, r3, r2
   27c36:	000c      	movs	r4, r1
   27c38:	4658      	mov	r0, fp
   27c3a:	4099      	lsls	r1, r3
   27c3c:	4098      	lsls	r0, r3
   27c3e:	1e4b      	subs	r3, r1, #1
   27c40:	4199      	sbcs	r1, r3
   27c42:	465b      	mov	r3, fp
   27c44:	40d4      	lsrs	r4, r2
   27c46:	40d3      	lsrs	r3, r2
   27c48:	4320      	orrs	r0, r4
   27c4a:	4308      	orrs	r0, r1
   27c4c:	001a      	movs	r2, r3
   27c4e:	0743      	lsls	r3, r0, #29
   27c50:	d009      	beq.n	27c66 <__aeabi_ddiv+0x596>
   27c52:	230f      	movs	r3, #15
   27c54:	4003      	ands	r3, r0
   27c56:	2b04      	cmp	r3, #4
   27c58:	d005      	beq.n	27c66 <__aeabi_ddiv+0x596>
   27c5a:	0001      	movs	r1, r0
   27c5c:	1d08      	adds	r0, r1, #4
   27c5e:	4288      	cmp	r0, r1
   27c60:	419b      	sbcs	r3, r3
   27c62:	425b      	negs	r3, r3
   27c64:	18d2      	adds	r2, r2, r3
   27c66:	0213      	lsls	r3, r2, #8
   27c68:	d53a      	bpl.n	27ce0 <__aeabi_ddiv+0x610>
   27c6a:	2301      	movs	r3, #1
   27c6c:	9a02      	ldr	r2, [sp, #8]
   27c6e:	2401      	movs	r4, #1
   27c70:	401a      	ands	r2, r3
   27c72:	2300      	movs	r3, #0
   27c74:	4694      	mov	ip, r2
   27c76:	4698      	mov	r8, r3
   27c78:	2200      	movs	r2, #0
   27c7a:	e5f7      	b.n	2786c <__aeabi_ddiv+0x19c>
   27c7c:	2102      	movs	r1, #2
   27c7e:	4249      	negs	r1, r1
   27c80:	468c      	mov	ip, r1
   27c82:	9d03      	ldr	r5, [sp, #12]
   27c84:	44e3      	add	fp, ip
   27c86:	46ac      	mov	ip, r5
   27c88:	44e2      	add	sl, ip
   27c8a:	45aa      	cmp	sl, r5
   27c8c:	41ad      	sbcs	r5, r5
   27c8e:	426d      	negs	r5, r5
   27c90:	4445      	add	r5, r8
   27c92:	18ed      	adds	r5, r5, r3
   27c94:	1a2d      	subs	r5, r5, r0
   27c96:	e696      	b.n	279c6 <__aeabi_ddiv+0x2f6>
   27c98:	1e8a      	subs	r2, r1, #2
   27c9a:	9903      	ldr	r1, [sp, #12]
   27c9c:	004d      	lsls	r5, r1, #1
   27c9e:	428d      	cmp	r5, r1
   27ca0:	4189      	sbcs	r1, r1
   27ca2:	4249      	negs	r1, r1
   27ca4:	4441      	add	r1, r8
   27ca6:	1876      	adds	r6, r6, r1
   27ca8:	9503      	str	r5, [sp, #12]
   27caa:	e78f      	b.n	27bcc <__aeabi_ddiv+0x4fc>
   27cac:	201f      	movs	r0, #31
   27cae:	4240      	negs	r0, r0
   27cb0:	1ac3      	subs	r3, r0, r3
   27cb2:	4658      	mov	r0, fp
   27cb4:	40d8      	lsrs	r0, r3
   27cb6:	0003      	movs	r3, r0
   27cb8:	2a20      	cmp	r2, #32
   27cba:	d028      	beq.n	27d0e <__aeabi_ddiv+0x63e>
   27cbc:	2040      	movs	r0, #64	; 0x40
   27cbe:	465d      	mov	r5, fp
   27cc0:	1a82      	subs	r2, r0, r2
   27cc2:	4095      	lsls	r5, r2
   27cc4:	4329      	orrs	r1, r5
   27cc6:	1e4a      	subs	r2, r1, #1
   27cc8:	4191      	sbcs	r1, r2
   27cca:	4319      	orrs	r1, r3
   27ccc:	2307      	movs	r3, #7
   27cce:	2200      	movs	r2, #0
   27cd0:	400b      	ands	r3, r1
   27cd2:	d009      	beq.n	27ce8 <__aeabi_ddiv+0x618>
   27cd4:	230f      	movs	r3, #15
   27cd6:	2200      	movs	r2, #0
   27cd8:	400b      	ands	r3, r1
   27cda:	0008      	movs	r0, r1
   27cdc:	2b04      	cmp	r3, #4
   27cde:	d1bd      	bne.n	27c5c <__aeabi_ddiv+0x58c>
   27ce0:	0001      	movs	r1, r0
   27ce2:	0753      	lsls	r3, r2, #29
   27ce4:	0252      	lsls	r2, r2, #9
   27ce6:	0b12      	lsrs	r2, r2, #12
   27ce8:	08c9      	lsrs	r1, r1, #3
   27cea:	4319      	orrs	r1, r3
   27cec:	2301      	movs	r3, #1
   27cee:	4688      	mov	r8, r1
   27cf0:	9902      	ldr	r1, [sp, #8]
   27cf2:	2400      	movs	r4, #0
   27cf4:	4019      	ands	r1, r3
   27cf6:	468c      	mov	ip, r1
   27cf8:	e5b8      	b.n	2786c <__aeabi_ddiv+0x19c>
   27cfa:	4552      	cmp	r2, sl
   27cfc:	d8be      	bhi.n	27c7c <__aeabi_ddiv+0x5ac>
   27cfe:	468b      	mov	fp, r1
   27d00:	2500      	movs	r5, #0
   27d02:	e660      	b.n	279c6 <__aeabi_ddiv+0x2f6>
   27d04:	9d03      	ldr	r5, [sp, #12]
   27d06:	429d      	cmp	r5, r3
   27d08:	d3c6      	bcc.n	27c98 <__aeabi_ddiv+0x5c8>
   27d0a:	0011      	movs	r1, r2
   27d0c:	e762      	b.n	27bd4 <__aeabi_ddiv+0x504>
   27d0e:	2500      	movs	r5, #0
   27d10:	e7d8      	b.n	27cc4 <__aeabi_ddiv+0x5f4>
   27d12:	2280      	movs	r2, #128	; 0x80
   27d14:	465b      	mov	r3, fp
   27d16:	0312      	lsls	r2, r2, #12
   27d18:	431a      	orrs	r2, r3
   27d1a:	9b01      	ldr	r3, [sp, #4]
   27d1c:	0312      	lsls	r2, r2, #12
   27d1e:	0b12      	lsrs	r2, r2, #12
   27d20:	469c      	mov	ip, r3
   27d22:	4688      	mov	r8, r1
   27d24:	4c03      	ldr	r4, [pc, #12]	; (27d34 <__aeabi_ddiv+0x664>)
   27d26:	e5a1      	b.n	2786c <__aeabi_ddiv+0x19c>
   27d28:	000003ff 	.word	0x000003ff
   27d2c:	feffffff 	.word	0xfeffffff
   27d30:	000007fe 	.word	0x000007fe
   27d34:	000007ff 	.word	0x000007ff

00027d38 <__eqdf2>:
   27d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d3a:	464f      	mov	r7, r9
   27d3c:	4646      	mov	r6, r8
   27d3e:	46d6      	mov	lr, sl
   27d40:	005c      	lsls	r4, r3, #1
   27d42:	b5c0      	push	{r6, r7, lr}
   27d44:	031f      	lsls	r7, r3, #12
   27d46:	0fdb      	lsrs	r3, r3, #31
   27d48:	469a      	mov	sl, r3
   27d4a:	4b17      	ldr	r3, [pc, #92]	; (27da8 <__eqdf2+0x70>)
   27d4c:	030e      	lsls	r6, r1, #12
   27d4e:	004d      	lsls	r5, r1, #1
   27d50:	4684      	mov	ip, r0
   27d52:	4680      	mov	r8, r0
   27d54:	0b36      	lsrs	r6, r6, #12
   27d56:	0d6d      	lsrs	r5, r5, #21
   27d58:	0fc9      	lsrs	r1, r1, #31
   27d5a:	4691      	mov	r9, r2
   27d5c:	0b3f      	lsrs	r7, r7, #12
   27d5e:	0d64      	lsrs	r4, r4, #21
   27d60:	2001      	movs	r0, #1
   27d62:	429d      	cmp	r5, r3
   27d64:	d008      	beq.n	27d78 <__eqdf2+0x40>
   27d66:	429c      	cmp	r4, r3
   27d68:	d001      	beq.n	27d6e <__eqdf2+0x36>
   27d6a:	42a5      	cmp	r5, r4
   27d6c:	d00b      	beq.n	27d86 <__eqdf2+0x4e>
   27d6e:	bc1c      	pop	{r2, r3, r4}
   27d70:	4690      	mov	r8, r2
   27d72:	4699      	mov	r9, r3
   27d74:	46a2      	mov	sl, r4
   27d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27d78:	4663      	mov	r3, ip
   27d7a:	4333      	orrs	r3, r6
   27d7c:	d1f7      	bne.n	27d6e <__eqdf2+0x36>
   27d7e:	42ac      	cmp	r4, r5
   27d80:	d1f5      	bne.n	27d6e <__eqdf2+0x36>
   27d82:	433a      	orrs	r2, r7
   27d84:	d1f3      	bne.n	27d6e <__eqdf2+0x36>
   27d86:	2001      	movs	r0, #1
   27d88:	42be      	cmp	r6, r7
   27d8a:	d1f0      	bne.n	27d6e <__eqdf2+0x36>
   27d8c:	45c8      	cmp	r8, r9
   27d8e:	d1ee      	bne.n	27d6e <__eqdf2+0x36>
   27d90:	4551      	cmp	r1, sl
   27d92:	d007      	beq.n	27da4 <__eqdf2+0x6c>
   27d94:	2d00      	cmp	r5, #0
   27d96:	d1ea      	bne.n	27d6e <__eqdf2+0x36>
   27d98:	4663      	mov	r3, ip
   27d9a:	431e      	orrs	r6, r3
   27d9c:	0030      	movs	r0, r6
   27d9e:	1e46      	subs	r6, r0, #1
   27da0:	41b0      	sbcs	r0, r6
   27da2:	e7e4      	b.n	27d6e <__eqdf2+0x36>
   27da4:	2000      	movs	r0, #0
   27da6:	e7e2      	b.n	27d6e <__eqdf2+0x36>
   27da8:	000007ff 	.word	0x000007ff

00027dac <__gedf2>:
   27dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   27dae:	4645      	mov	r5, r8
   27db0:	46de      	mov	lr, fp
   27db2:	4657      	mov	r7, sl
   27db4:	464e      	mov	r6, r9
   27db6:	b5e0      	push	{r5, r6, r7, lr}
   27db8:	031f      	lsls	r7, r3, #12
   27dba:	0b3d      	lsrs	r5, r7, #12
   27dbc:	4f2c      	ldr	r7, [pc, #176]	; (27e70 <__gedf2+0xc4>)
   27dbe:	030e      	lsls	r6, r1, #12
   27dc0:	004c      	lsls	r4, r1, #1
   27dc2:	46ab      	mov	fp, r5
   27dc4:	005d      	lsls	r5, r3, #1
   27dc6:	4684      	mov	ip, r0
   27dc8:	0b36      	lsrs	r6, r6, #12
   27dca:	0d64      	lsrs	r4, r4, #21
   27dcc:	0fc9      	lsrs	r1, r1, #31
   27dce:	4690      	mov	r8, r2
   27dd0:	0d6d      	lsrs	r5, r5, #21
   27dd2:	0fdb      	lsrs	r3, r3, #31
   27dd4:	42bc      	cmp	r4, r7
   27dd6:	d02a      	beq.n	27e2e <__gedf2+0x82>
   27dd8:	4f25      	ldr	r7, [pc, #148]	; (27e70 <__gedf2+0xc4>)
   27dda:	42bd      	cmp	r5, r7
   27ddc:	d02d      	beq.n	27e3a <__gedf2+0x8e>
   27dde:	2c00      	cmp	r4, #0
   27de0:	d10f      	bne.n	27e02 <__gedf2+0x56>
   27de2:	4330      	orrs	r0, r6
   27de4:	0007      	movs	r7, r0
   27de6:	4681      	mov	r9, r0
   27de8:	4278      	negs	r0, r7
   27dea:	4178      	adcs	r0, r7
   27dec:	b2c0      	uxtb	r0, r0
   27dee:	2d00      	cmp	r5, #0
   27df0:	d117      	bne.n	27e22 <__gedf2+0x76>
   27df2:	465f      	mov	r7, fp
   27df4:	433a      	orrs	r2, r7
   27df6:	d114      	bne.n	27e22 <__gedf2+0x76>
   27df8:	464b      	mov	r3, r9
   27dfa:	2000      	movs	r0, #0
   27dfc:	2b00      	cmp	r3, #0
   27dfe:	d00a      	beq.n	27e16 <__gedf2+0x6a>
   27e00:	e006      	b.n	27e10 <__gedf2+0x64>
   27e02:	2d00      	cmp	r5, #0
   27e04:	d102      	bne.n	27e0c <__gedf2+0x60>
   27e06:	4658      	mov	r0, fp
   27e08:	4302      	orrs	r2, r0
   27e0a:	d001      	beq.n	27e10 <__gedf2+0x64>
   27e0c:	4299      	cmp	r1, r3
   27e0e:	d018      	beq.n	27e42 <__gedf2+0x96>
   27e10:	4248      	negs	r0, r1
   27e12:	2101      	movs	r1, #1
   27e14:	4308      	orrs	r0, r1
   27e16:	bc3c      	pop	{r2, r3, r4, r5}
   27e18:	4690      	mov	r8, r2
   27e1a:	4699      	mov	r9, r3
   27e1c:	46a2      	mov	sl, r4
   27e1e:	46ab      	mov	fp, r5
   27e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27e22:	2800      	cmp	r0, #0
   27e24:	d0f2      	beq.n	27e0c <__gedf2+0x60>
   27e26:	2001      	movs	r0, #1
   27e28:	3b01      	subs	r3, #1
   27e2a:	4318      	orrs	r0, r3
   27e2c:	e7f3      	b.n	27e16 <__gedf2+0x6a>
   27e2e:	0037      	movs	r7, r6
   27e30:	4307      	orrs	r7, r0
   27e32:	d0d1      	beq.n	27dd8 <__gedf2+0x2c>
   27e34:	2002      	movs	r0, #2
   27e36:	4240      	negs	r0, r0
   27e38:	e7ed      	b.n	27e16 <__gedf2+0x6a>
   27e3a:	465f      	mov	r7, fp
   27e3c:	4317      	orrs	r7, r2
   27e3e:	d0ce      	beq.n	27dde <__gedf2+0x32>
   27e40:	e7f8      	b.n	27e34 <__gedf2+0x88>
   27e42:	42ac      	cmp	r4, r5
   27e44:	dce4      	bgt.n	27e10 <__gedf2+0x64>
   27e46:	da03      	bge.n	27e50 <__gedf2+0xa4>
   27e48:	1e48      	subs	r0, r1, #1
   27e4a:	2101      	movs	r1, #1
   27e4c:	4308      	orrs	r0, r1
   27e4e:	e7e2      	b.n	27e16 <__gedf2+0x6a>
   27e50:	455e      	cmp	r6, fp
   27e52:	d8dd      	bhi.n	27e10 <__gedf2+0x64>
   27e54:	d006      	beq.n	27e64 <__gedf2+0xb8>
   27e56:	2000      	movs	r0, #0
   27e58:	455e      	cmp	r6, fp
   27e5a:	d2dc      	bcs.n	27e16 <__gedf2+0x6a>
   27e5c:	2301      	movs	r3, #1
   27e5e:	1e48      	subs	r0, r1, #1
   27e60:	4318      	orrs	r0, r3
   27e62:	e7d8      	b.n	27e16 <__gedf2+0x6a>
   27e64:	45c4      	cmp	ip, r8
   27e66:	d8d3      	bhi.n	27e10 <__gedf2+0x64>
   27e68:	2000      	movs	r0, #0
   27e6a:	45c4      	cmp	ip, r8
   27e6c:	d3f6      	bcc.n	27e5c <__gedf2+0xb0>
   27e6e:	e7d2      	b.n	27e16 <__gedf2+0x6a>
   27e70:	000007ff 	.word	0x000007ff

00027e74 <__ledf2>:
   27e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   27e76:	464e      	mov	r6, r9
   27e78:	4645      	mov	r5, r8
   27e7a:	46de      	mov	lr, fp
   27e7c:	4657      	mov	r7, sl
   27e7e:	005c      	lsls	r4, r3, #1
   27e80:	b5e0      	push	{r5, r6, r7, lr}
   27e82:	031f      	lsls	r7, r3, #12
   27e84:	0fdb      	lsrs	r3, r3, #31
   27e86:	4699      	mov	r9, r3
   27e88:	4b2a      	ldr	r3, [pc, #168]	; (27f34 <__ledf2+0xc0>)
   27e8a:	030e      	lsls	r6, r1, #12
   27e8c:	004d      	lsls	r5, r1, #1
   27e8e:	0fc9      	lsrs	r1, r1, #31
   27e90:	4684      	mov	ip, r0
   27e92:	0b36      	lsrs	r6, r6, #12
   27e94:	0d6d      	lsrs	r5, r5, #21
   27e96:	468b      	mov	fp, r1
   27e98:	4690      	mov	r8, r2
   27e9a:	0b3f      	lsrs	r7, r7, #12
   27e9c:	0d64      	lsrs	r4, r4, #21
   27e9e:	429d      	cmp	r5, r3
   27ea0:	d020      	beq.n	27ee4 <__ledf2+0x70>
   27ea2:	4b24      	ldr	r3, [pc, #144]	; (27f34 <__ledf2+0xc0>)
   27ea4:	429c      	cmp	r4, r3
   27ea6:	d022      	beq.n	27eee <__ledf2+0x7a>
   27ea8:	2d00      	cmp	r5, #0
   27eaa:	d112      	bne.n	27ed2 <__ledf2+0x5e>
   27eac:	4330      	orrs	r0, r6
   27eae:	4243      	negs	r3, r0
   27eb0:	4143      	adcs	r3, r0
   27eb2:	b2db      	uxtb	r3, r3
   27eb4:	2c00      	cmp	r4, #0
   27eb6:	d01f      	beq.n	27ef8 <__ledf2+0x84>
   27eb8:	2b00      	cmp	r3, #0
   27eba:	d00c      	beq.n	27ed6 <__ledf2+0x62>
   27ebc:	464b      	mov	r3, r9
   27ebe:	2001      	movs	r0, #1
   27ec0:	3b01      	subs	r3, #1
   27ec2:	4303      	orrs	r3, r0
   27ec4:	0018      	movs	r0, r3
   27ec6:	bc3c      	pop	{r2, r3, r4, r5}
   27ec8:	4690      	mov	r8, r2
   27eca:	4699      	mov	r9, r3
   27ecc:	46a2      	mov	sl, r4
   27ece:	46ab      	mov	fp, r5
   27ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27ed2:	2c00      	cmp	r4, #0
   27ed4:	d016      	beq.n	27f04 <__ledf2+0x90>
   27ed6:	45cb      	cmp	fp, r9
   27ed8:	d017      	beq.n	27f0a <__ledf2+0x96>
   27eda:	465b      	mov	r3, fp
   27edc:	4259      	negs	r1, r3
   27ede:	2301      	movs	r3, #1
   27ee0:	430b      	orrs	r3, r1
   27ee2:	e7ef      	b.n	27ec4 <__ledf2+0x50>
   27ee4:	0031      	movs	r1, r6
   27ee6:	2302      	movs	r3, #2
   27ee8:	4301      	orrs	r1, r0
   27eea:	d1eb      	bne.n	27ec4 <__ledf2+0x50>
   27eec:	e7d9      	b.n	27ea2 <__ledf2+0x2e>
   27eee:	0039      	movs	r1, r7
   27ef0:	2302      	movs	r3, #2
   27ef2:	4311      	orrs	r1, r2
   27ef4:	d1e6      	bne.n	27ec4 <__ledf2+0x50>
   27ef6:	e7d7      	b.n	27ea8 <__ledf2+0x34>
   27ef8:	433a      	orrs	r2, r7
   27efa:	d1dd      	bne.n	27eb8 <__ledf2+0x44>
   27efc:	2300      	movs	r3, #0
   27efe:	2800      	cmp	r0, #0
   27f00:	d0e0      	beq.n	27ec4 <__ledf2+0x50>
   27f02:	e7ea      	b.n	27eda <__ledf2+0x66>
   27f04:	433a      	orrs	r2, r7
   27f06:	d1e6      	bne.n	27ed6 <__ledf2+0x62>
   27f08:	e7e7      	b.n	27eda <__ledf2+0x66>
   27f0a:	42a5      	cmp	r5, r4
   27f0c:	dce5      	bgt.n	27eda <__ledf2+0x66>
   27f0e:	db05      	blt.n	27f1c <__ledf2+0xa8>
   27f10:	42be      	cmp	r6, r7
   27f12:	d8e2      	bhi.n	27eda <__ledf2+0x66>
   27f14:	d007      	beq.n	27f26 <__ledf2+0xb2>
   27f16:	2300      	movs	r3, #0
   27f18:	42be      	cmp	r6, r7
   27f1a:	d2d3      	bcs.n	27ec4 <__ledf2+0x50>
   27f1c:	4659      	mov	r1, fp
   27f1e:	2301      	movs	r3, #1
   27f20:	3901      	subs	r1, #1
   27f22:	430b      	orrs	r3, r1
   27f24:	e7ce      	b.n	27ec4 <__ledf2+0x50>
   27f26:	45c4      	cmp	ip, r8
   27f28:	d8d7      	bhi.n	27eda <__ledf2+0x66>
   27f2a:	2300      	movs	r3, #0
   27f2c:	45c4      	cmp	ip, r8
   27f2e:	d3f5      	bcc.n	27f1c <__ledf2+0xa8>
   27f30:	e7c8      	b.n	27ec4 <__ledf2+0x50>
   27f32:	46c0      	nop			; (mov r8, r8)
   27f34:	000007ff 	.word	0x000007ff

00027f38 <__aeabi_dmul>:
   27f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f3a:	4657      	mov	r7, sl
   27f3c:	4645      	mov	r5, r8
   27f3e:	46de      	mov	lr, fp
   27f40:	464e      	mov	r6, r9
   27f42:	b5e0      	push	{r5, r6, r7, lr}
   27f44:	030c      	lsls	r4, r1, #12
   27f46:	4698      	mov	r8, r3
   27f48:	004e      	lsls	r6, r1, #1
   27f4a:	0b23      	lsrs	r3, r4, #12
   27f4c:	b087      	sub	sp, #28
   27f4e:	0007      	movs	r7, r0
   27f50:	4692      	mov	sl, r2
   27f52:	469b      	mov	fp, r3
   27f54:	0d76      	lsrs	r6, r6, #21
   27f56:	0fcd      	lsrs	r5, r1, #31
   27f58:	2e00      	cmp	r6, #0
   27f5a:	d06b      	beq.n	28034 <__aeabi_dmul+0xfc>
   27f5c:	4b6d      	ldr	r3, [pc, #436]	; (28114 <__aeabi_dmul+0x1dc>)
   27f5e:	429e      	cmp	r6, r3
   27f60:	d035      	beq.n	27fce <__aeabi_dmul+0x96>
   27f62:	2480      	movs	r4, #128	; 0x80
   27f64:	465b      	mov	r3, fp
   27f66:	0f42      	lsrs	r2, r0, #29
   27f68:	0424      	lsls	r4, r4, #16
   27f6a:	00db      	lsls	r3, r3, #3
   27f6c:	4314      	orrs	r4, r2
   27f6e:	431c      	orrs	r4, r3
   27f70:	00c3      	lsls	r3, r0, #3
   27f72:	4699      	mov	r9, r3
   27f74:	4b68      	ldr	r3, [pc, #416]	; (28118 <__aeabi_dmul+0x1e0>)
   27f76:	46a3      	mov	fp, r4
   27f78:	469c      	mov	ip, r3
   27f7a:	2300      	movs	r3, #0
   27f7c:	2700      	movs	r7, #0
   27f7e:	4466      	add	r6, ip
   27f80:	9302      	str	r3, [sp, #8]
   27f82:	4643      	mov	r3, r8
   27f84:	031c      	lsls	r4, r3, #12
   27f86:	005a      	lsls	r2, r3, #1
   27f88:	0fdb      	lsrs	r3, r3, #31
   27f8a:	4650      	mov	r0, sl
   27f8c:	0b24      	lsrs	r4, r4, #12
   27f8e:	0d52      	lsrs	r2, r2, #21
   27f90:	4698      	mov	r8, r3
   27f92:	d100      	bne.n	27f96 <__aeabi_dmul+0x5e>
   27f94:	e076      	b.n	28084 <__aeabi_dmul+0x14c>
   27f96:	4b5f      	ldr	r3, [pc, #380]	; (28114 <__aeabi_dmul+0x1dc>)
   27f98:	429a      	cmp	r2, r3
   27f9a:	d06d      	beq.n	28078 <__aeabi_dmul+0x140>
   27f9c:	2380      	movs	r3, #128	; 0x80
   27f9e:	0f41      	lsrs	r1, r0, #29
   27fa0:	041b      	lsls	r3, r3, #16
   27fa2:	430b      	orrs	r3, r1
   27fa4:	495c      	ldr	r1, [pc, #368]	; (28118 <__aeabi_dmul+0x1e0>)
   27fa6:	00e4      	lsls	r4, r4, #3
   27fa8:	468c      	mov	ip, r1
   27faa:	431c      	orrs	r4, r3
   27fac:	00c3      	lsls	r3, r0, #3
   27fae:	2000      	movs	r0, #0
   27fb0:	4462      	add	r2, ip
   27fb2:	4641      	mov	r1, r8
   27fb4:	18b6      	adds	r6, r6, r2
   27fb6:	4069      	eors	r1, r5
   27fb8:	1c72      	adds	r2, r6, #1
   27fba:	9101      	str	r1, [sp, #4]
   27fbc:	4694      	mov	ip, r2
   27fbe:	4307      	orrs	r7, r0
   27fc0:	2f0f      	cmp	r7, #15
   27fc2:	d900      	bls.n	27fc6 <__aeabi_dmul+0x8e>
   27fc4:	e0b0      	b.n	28128 <__aeabi_dmul+0x1f0>
   27fc6:	4a55      	ldr	r2, [pc, #340]	; (2811c <__aeabi_dmul+0x1e4>)
   27fc8:	00bf      	lsls	r7, r7, #2
   27fca:	59d2      	ldr	r2, [r2, r7]
   27fcc:	4697      	mov	pc, r2
   27fce:	465b      	mov	r3, fp
   27fd0:	4303      	orrs	r3, r0
   27fd2:	4699      	mov	r9, r3
   27fd4:	d000      	beq.n	27fd8 <__aeabi_dmul+0xa0>
   27fd6:	e087      	b.n	280e8 <__aeabi_dmul+0x1b0>
   27fd8:	2300      	movs	r3, #0
   27fda:	469b      	mov	fp, r3
   27fdc:	3302      	adds	r3, #2
   27fde:	2708      	movs	r7, #8
   27fe0:	9302      	str	r3, [sp, #8]
   27fe2:	e7ce      	b.n	27f82 <__aeabi_dmul+0x4a>
   27fe4:	4642      	mov	r2, r8
   27fe6:	9201      	str	r2, [sp, #4]
   27fe8:	2802      	cmp	r0, #2
   27fea:	d067      	beq.n	280bc <__aeabi_dmul+0x184>
   27fec:	2803      	cmp	r0, #3
   27fee:	d100      	bne.n	27ff2 <__aeabi_dmul+0xba>
   27ff0:	e20e      	b.n	28410 <__aeabi_dmul+0x4d8>
   27ff2:	2801      	cmp	r0, #1
   27ff4:	d000      	beq.n	27ff8 <__aeabi_dmul+0xc0>
   27ff6:	e162      	b.n	282be <__aeabi_dmul+0x386>
   27ff8:	2300      	movs	r3, #0
   27ffa:	2400      	movs	r4, #0
   27ffc:	2200      	movs	r2, #0
   27ffe:	4699      	mov	r9, r3
   28000:	9901      	ldr	r1, [sp, #4]
   28002:	4001      	ands	r1, r0
   28004:	b2cd      	uxtb	r5, r1
   28006:	2100      	movs	r1, #0
   28008:	0312      	lsls	r2, r2, #12
   2800a:	0d0b      	lsrs	r3, r1, #20
   2800c:	0b12      	lsrs	r2, r2, #12
   2800e:	051b      	lsls	r3, r3, #20
   28010:	4313      	orrs	r3, r2
   28012:	4a43      	ldr	r2, [pc, #268]	; (28120 <__aeabi_dmul+0x1e8>)
   28014:	0524      	lsls	r4, r4, #20
   28016:	4013      	ands	r3, r2
   28018:	431c      	orrs	r4, r3
   2801a:	0064      	lsls	r4, r4, #1
   2801c:	07ed      	lsls	r5, r5, #31
   2801e:	0864      	lsrs	r4, r4, #1
   28020:	432c      	orrs	r4, r5
   28022:	4648      	mov	r0, r9
   28024:	0021      	movs	r1, r4
   28026:	b007      	add	sp, #28
   28028:	bc3c      	pop	{r2, r3, r4, r5}
   2802a:	4690      	mov	r8, r2
   2802c:	4699      	mov	r9, r3
   2802e:	46a2      	mov	sl, r4
   28030:	46ab      	mov	fp, r5
   28032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28034:	4303      	orrs	r3, r0
   28036:	4699      	mov	r9, r3
   28038:	d04f      	beq.n	280da <__aeabi_dmul+0x1a2>
   2803a:	465b      	mov	r3, fp
   2803c:	2b00      	cmp	r3, #0
   2803e:	d100      	bne.n	28042 <__aeabi_dmul+0x10a>
   28040:	e189      	b.n	28356 <__aeabi_dmul+0x41e>
   28042:	4658      	mov	r0, fp
   28044:	f000 fe2e 	bl	28ca4 <__clzsi2>
   28048:	0003      	movs	r3, r0
   2804a:	3b0b      	subs	r3, #11
   2804c:	2b1c      	cmp	r3, #28
   2804e:	dd00      	ble.n	28052 <__aeabi_dmul+0x11a>
   28050:	e17a      	b.n	28348 <__aeabi_dmul+0x410>
   28052:	221d      	movs	r2, #29
   28054:	1ad3      	subs	r3, r2, r3
   28056:	003a      	movs	r2, r7
   28058:	0001      	movs	r1, r0
   2805a:	465c      	mov	r4, fp
   2805c:	40da      	lsrs	r2, r3
   2805e:	3908      	subs	r1, #8
   28060:	408c      	lsls	r4, r1
   28062:	0013      	movs	r3, r2
   28064:	408f      	lsls	r7, r1
   28066:	4323      	orrs	r3, r4
   28068:	469b      	mov	fp, r3
   2806a:	46b9      	mov	r9, r7
   2806c:	2300      	movs	r3, #0
   2806e:	4e2d      	ldr	r6, [pc, #180]	; (28124 <__aeabi_dmul+0x1ec>)
   28070:	2700      	movs	r7, #0
   28072:	1a36      	subs	r6, r6, r0
   28074:	9302      	str	r3, [sp, #8]
   28076:	e784      	b.n	27f82 <__aeabi_dmul+0x4a>
   28078:	4653      	mov	r3, sl
   2807a:	4323      	orrs	r3, r4
   2807c:	d12a      	bne.n	280d4 <__aeabi_dmul+0x19c>
   2807e:	2400      	movs	r4, #0
   28080:	2002      	movs	r0, #2
   28082:	e796      	b.n	27fb2 <__aeabi_dmul+0x7a>
   28084:	4653      	mov	r3, sl
   28086:	4323      	orrs	r3, r4
   28088:	d020      	beq.n	280cc <__aeabi_dmul+0x194>
   2808a:	2c00      	cmp	r4, #0
   2808c:	d100      	bne.n	28090 <__aeabi_dmul+0x158>
   2808e:	e157      	b.n	28340 <__aeabi_dmul+0x408>
   28090:	0020      	movs	r0, r4
   28092:	f000 fe07 	bl	28ca4 <__clzsi2>
   28096:	0003      	movs	r3, r0
   28098:	3b0b      	subs	r3, #11
   2809a:	2b1c      	cmp	r3, #28
   2809c:	dd00      	ble.n	280a0 <__aeabi_dmul+0x168>
   2809e:	e149      	b.n	28334 <__aeabi_dmul+0x3fc>
   280a0:	211d      	movs	r1, #29
   280a2:	1acb      	subs	r3, r1, r3
   280a4:	4651      	mov	r1, sl
   280a6:	0002      	movs	r2, r0
   280a8:	40d9      	lsrs	r1, r3
   280aa:	4653      	mov	r3, sl
   280ac:	3a08      	subs	r2, #8
   280ae:	4094      	lsls	r4, r2
   280b0:	4093      	lsls	r3, r2
   280b2:	430c      	orrs	r4, r1
   280b4:	4a1b      	ldr	r2, [pc, #108]	; (28124 <__aeabi_dmul+0x1ec>)
   280b6:	1a12      	subs	r2, r2, r0
   280b8:	2000      	movs	r0, #0
   280ba:	e77a      	b.n	27fb2 <__aeabi_dmul+0x7a>
   280bc:	2501      	movs	r5, #1
   280be:	9b01      	ldr	r3, [sp, #4]
   280c0:	4c14      	ldr	r4, [pc, #80]	; (28114 <__aeabi_dmul+0x1dc>)
   280c2:	401d      	ands	r5, r3
   280c4:	2300      	movs	r3, #0
   280c6:	2200      	movs	r2, #0
   280c8:	4699      	mov	r9, r3
   280ca:	e79c      	b.n	28006 <__aeabi_dmul+0xce>
   280cc:	2400      	movs	r4, #0
   280ce:	2200      	movs	r2, #0
   280d0:	2001      	movs	r0, #1
   280d2:	e76e      	b.n	27fb2 <__aeabi_dmul+0x7a>
   280d4:	4653      	mov	r3, sl
   280d6:	2003      	movs	r0, #3
   280d8:	e76b      	b.n	27fb2 <__aeabi_dmul+0x7a>
   280da:	2300      	movs	r3, #0
   280dc:	469b      	mov	fp, r3
   280de:	3301      	adds	r3, #1
   280e0:	2704      	movs	r7, #4
   280e2:	2600      	movs	r6, #0
   280e4:	9302      	str	r3, [sp, #8]
   280e6:	e74c      	b.n	27f82 <__aeabi_dmul+0x4a>
   280e8:	2303      	movs	r3, #3
   280ea:	4681      	mov	r9, r0
   280ec:	270c      	movs	r7, #12
   280ee:	9302      	str	r3, [sp, #8]
   280f0:	e747      	b.n	27f82 <__aeabi_dmul+0x4a>
   280f2:	2280      	movs	r2, #128	; 0x80
   280f4:	2300      	movs	r3, #0
   280f6:	2500      	movs	r5, #0
   280f8:	0312      	lsls	r2, r2, #12
   280fa:	4699      	mov	r9, r3
   280fc:	4c05      	ldr	r4, [pc, #20]	; (28114 <__aeabi_dmul+0x1dc>)
   280fe:	e782      	b.n	28006 <__aeabi_dmul+0xce>
   28100:	465c      	mov	r4, fp
   28102:	464b      	mov	r3, r9
   28104:	9802      	ldr	r0, [sp, #8]
   28106:	e76f      	b.n	27fe8 <__aeabi_dmul+0xb0>
   28108:	465c      	mov	r4, fp
   2810a:	464b      	mov	r3, r9
   2810c:	9501      	str	r5, [sp, #4]
   2810e:	9802      	ldr	r0, [sp, #8]
   28110:	e76a      	b.n	27fe8 <__aeabi_dmul+0xb0>
   28112:	46c0      	nop			; (mov r8, r8)
   28114:	000007ff 	.word	0x000007ff
   28118:	fffffc01 	.word	0xfffffc01
   2811c:	0002ada8 	.word	0x0002ada8
   28120:	800fffff 	.word	0x800fffff
   28124:	fffffc0d 	.word	0xfffffc0d
   28128:	464a      	mov	r2, r9
   2812a:	4649      	mov	r1, r9
   2812c:	0c17      	lsrs	r7, r2, #16
   2812e:	0c1a      	lsrs	r2, r3, #16
   28130:	041b      	lsls	r3, r3, #16
   28132:	0c1b      	lsrs	r3, r3, #16
   28134:	0408      	lsls	r0, r1, #16
   28136:	0019      	movs	r1, r3
   28138:	0c00      	lsrs	r0, r0, #16
   2813a:	4341      	muls	r1, r0
   2813c:	0015      	movs	r5, r2
   2813e:	4688      	mov	r8, r1
   28140:	0019      	movs	r1, r3
   28142:	437d      	muls	r5, r7
   28144:	4379      	muls	r1, r7
   28146:	9503      	str	r5, [sp, #12]
   28148:	4689      	mov	r9, r1
   2814a:	0029      	movs	r1, r5
   2814c:	0015      	movs	r5, r2
   2814e:	4345      	muls	r5, r0
   28150:	444d      	add	r5, r9
   28152:	9502      	str	r5, [sp, #8]
   28154:	4645      	mov	r5, r8
   28156:	0c2d      	lsrs	r5, r5, #16
   28158:	46aa      	mov	sl, r5
   2815a:	9d02      	ldr	r5, [sp, #8]
   2815c:	4455      	add	r5, sl
   2815e:	45a9      	cmp	r9, r5
   28160:	d906      	bls.n	28170 <__aeabi_dmul+0x238>
   28162:	468a      	mov	sl, r1
   28164:	2180      	movs	r1, #128	; 0x80
   28166:	0249      	lsls	r1, r1, #9
   28168:	4689      	mov	r9, r1
   2816a:	44ca      	add	sl, r9
   2816c:	4651      	mov	r1, sl
   2816e:	9103      	str	r1, [sp, #12]
   28170:	0c29      	lsrs	r1, r5, #16
   28172:	9104      	str	r1, [sp, #16]
   28174:	4641      	mov	r1, r8
   28176:	0409      	lsls	r1, r1, #16
   28178:	042d      	lsls	r5, r5, #16
   2817a:	0c09      	lsrs	r1, r1, #16
   2817c:	4688      	mov	r8, r1
   2817e:	0029      	movs	r1, r5
   28180:	0c25      	lsrs	r5, r4, #16
   28182:	0424      	lsls	r4, r4, #16
   28184:	4441      	add	r1, r8
   28186:	0c24      	lsrs	r4, r4, #16
   28188:	9105      	str	r1, [sp, #20]
   2818a:	0021      	movs	r1, r4
   2818c:	4341      	muls	r1, r0
   2818e:	4688      	mov	r8, r1
   28190:	0021      	movs	r1, r4
   28192:	4379      	muls	r1, r7
   28194:	468a      	mov	sl, r1
   28196:	4368      	muls	r0, r5
   28198:	4641      	mov	r1, r8
   2819a:	4450      	add	r0, sl
   2819c:	4681      	mov	r9, r0
   2819e:	0c08      	lsrs	r0, r1, #16
   281a0:	4448      	add	r0, r9
   281a2:	436f      	muls	r7, r5
   281a4:	4582      	cmp	sl, r0
   281a6:	d903      	bls.n	281b0 <__aeabi_dmul+0x278>
   281a8:	2180      	movs	r1, #128	; 0x80
   281aa:	0249      	lsls	r1, r1, #9
   281ac:	4689      	mov	r9, r1
   281ae:	444f      	add	r7, r9
   281b0:	0c01      	lsrs	r1, r0, #16
   281b2:	4689      	mov	r9, r1
   281b4:	0039      	movs	r1, r7
   281b6:	4449      	add	r1, r9
   281b8:	9102      	str	r1, [sp, #8]
   281ba:	4641      	mov	r1, r8
   281bc:	040f      	lsls	r7, r1, #16
   281be:	9904      	ldr	r1, [sp, #16]
   281c0:	0c3f      	lsrs	r7, r7, #16
   281c2:	4688      	mov	r8, r1
   281c4:	0400      	lsls	r0, r0, #16
   281c6:	19c0      	adds	r0, r0, r7
   281c8:	4480      	add	r8, r0
   281ca:	4641      	mov	r1, r8
   281cc:	9104      	str	r1, [sp, #16]
   281ce:	4659      	mov	r1, fp
   281d0:	0c0f      	lsrs	r7, r1, #16
   281d2:	0409      	lsls	r1, r1, #16
   281d4:	0c09      	lsrs	r1, r1, #16
   281d6:	4688      	mov	r8, r1
   281d8:	4359      	muls	r1, r3
   281da:	468a      	mov	sl, r1
   281dc:	0039      	movs	r1, r7
   281de:	4351      	muls	r1, r2
   281e0:	4689      	mov	r9, r1
   281e2:	4641      	mov	r1, r8
   281e4:	434a      	muls	r2, r1
   281e6:	4651      	mov	r1, sl
   281e8:	0c09      	lsrs	r1, r1, #16
   281ea:	468b      	mov	fp, r1
   281ec:	437b      	muls	r3, r7
   281ee:	18d2      	adds	r2, r2, r3
   281f0:	445a      	add	r2, fp
   281f2:	4293      	cmp	r3, r2
   281f4:	d903      	bls.n	281fe <__aeabi_dmul+0x2c6>
   281f6:	2380      	movs	r3, #128	; 0x80
   281f8:	025b      	lsls	r3, r3, #9
   281fa:	469b      	mov	fp, r3
   281fc:	44d9      	add	r9, fp
   281fe:	4651      	mov	r1, sl
   28200:	0409      	lsls	r1, r1, #16
   28202:	0c09      	lsrs	r1, r1, #16
   28204:	468a      	mov	sl, r1
   28206:	4641      	mov	r1, r8
   28208:	4361      	muls	r1, r4
   2820a:	437c      	muls	r4, r7
   2820c:	0c13      	lsrs	r3, r2, #16
   2820e:	0412      	lsls	r2, r2, #16
   28210:	444b      	add	r3, r9
   28212:	4452      	add	r2, sl
   28214:	46a1      	mov	r9, r4
   28216:	468a      	mov	sl, r1
   28218:	003c      	movs	r4, r7
   2821a:	4641      	mov	r1, r8
   2821c:	436c      	muls	r4, r5
   2821e:	434d      	muls	r5, r1
   28220:	4651      	mov	r1, sl
   28222:	444d      	add	r5, r9
   28224:	0c0f      	lsrs	r7, r1, #16
   28226:	197d      	adds	r5, r7, r5
   28228:	45a9      	cmp	r9, r5
   2822a:	d903      	bls.n	28234 <__aeabi_dmul+0x2fc>
   2822c:	2180      	movs	r1, #128	; 0x80
   2822e:	0249      	lsls	r1, r1, #9
   28230:	4688      	mov	r8, r1
   28232:	4444      	add	r4, r8
   28234:	9f04      	ldr	r7, [sp, #16]
   28236:	9903      	ldr	r1, [sp, #12]
   28238:	46b8      	mov	r8, r7
   2823a:	4441      	add	r1, r8
   2823c:	468b      	mov	fp, r1
   2823e:	4583      	cmp	fp, r0
   28240:	4180      	sbcs	r0, r0
   28242:	4241      	negs	r1, r0
   28244:	4688      	mov	r8, r1
   28246:	4651      	mov	r1, sl
   28248:	0408      	lsls	r0, r1, #16
   2824a:	042f      	lsls	r7, r5, #16
   2824c:	0c00      	lsrs	r0, r0, #16
   2824e:	183f      	adds	r7, r7, r0
   28250:	4658      	mov	r0, fp
   28252:	9902      	ldr	r1, [sp, #8]
   28254:	1810      	adds	r0, r2, r0
   28256:	4689      	mov	r9, r1
   28258:	4290      	cmp	r0, r2
   2825a:	4192      	sbcs	r2, r2
   2825c:	444f      	add	r7, r9
   2825e:	46ba      	mov	sl, r7
   28260:	4252      	negs	r2, r2
   28262:	4699      	mov	r9, r3
   28264:	4693      	mov	fp, r2
   28266:	44c2      	add	sl, r8
   28268:	44d1      	add	r9, sl
   2826a:	44cb      	add	fp, r9
   2826c:	428f      	cmp	r7, r1
   2826e:	41bf      	sbcs	r7, r7
   28270:	45c2      	cmp	sl, r8
   28272:	4189      	sbcs	r1, r1
   28274:	4599      	cmp	r9, r3
   28276:	419b      	sbcs	r3, r3
   28278:	4593      	cmp	fp, r2
   2827a:	4192      	sbcs	r2, r2
   2827c:	427f      	negs	r7, r7
   2827e:	4249      	negs	r1, r1
   28280:	0c2d      	lsrs	r5, r5, #16
   28282:	4252      	negs	r2, r2
   28284:	430f      	orrs	r7, r1
   28286:	425b      	negs	r3, r3
   28288:	4313      	orrs	r3, r2
   2828a:	197f      	adds	r7, r7, r5
   2828c:	18ff      	adds	r7, r7, r3
   2828e:	465b      	mov	r3, fp
   28290:	193c      	adds	r4, r7, r4
   28292:	0ddb      	lsrs	r3, r3, #23
   28294:	9a05      	ldr	r2, [sp, #20]
   28296:	0264      	lsls	r4, r4, #9
   28298:	431c      	orrs	r4, r3
   2829a:	0243      	lsls	r3, r0, #9
   2829c:	4313      	orrs	r3, r2
   2829e:	1e5d      	subs	r5, r3, #1
   282a0:	41ab      	sbcs	r3, r5
   282a2:	465a      	mov	r2, fp
   282a4:	0dc0      	lsrs	r0, r0, #23
   282a6:	4303      	orrs	r3, r0
   282a8:	0252      	lsls	r2, r2, #9
   282aa:	4313      	orrs	r3, r2
   282ac:	01e2      	lsls	r2, r4, #7
   282ae:	d556      	bpl.n	2835e <__aeabi_dmul+0x426>
   282b0:	2001      	movs	r0, #1
   282b2:	085a      	lsrs	r2, r3, #1
   282b4:	4003      	ands	r3, r0
   282b6:	4313      	orrs	r3, r2
   282b8:	07e2      	lsls	r2, r4, #31
   282ba:	4313      	orrs	r3, r2
   282bc:	0864      	lsrs	r4, r4, #1
   282be:	485a      	ldr	r0, [pc, #360]	; (28428 <__aeabi_dmul+0x4f0>)
   282c0:	4460      	add	r0, ip
   282c2:	2800      	cmp	r0, #0
   282c4:	dd4d      	ble.n	28362 <__aeabi_dmul+0x42a>
   282c6:	075a      	lsls	r2, r3, #29
   282c8:	d009      	beq.n	282de <__aeabi_dmul+0x3a6>
   282ca:	220f      	movs	r2, #15
   282cc:	401a      	ands	r2, r3
   282ce:	2a04      	cmp	r2, #4
   282d0:	d005      	beq.n	282de <__aeabi_dmul+0x3a6>
   282d2:	1d1a      	adds	r2, r3, #4
   282d4:	429a      	cmp	r2, r3
   282d6:	419b      	sbcs	r3, r3
   282d8:	425b      	negs	r3, r3
   282da:	18e4      	adds	r4, r4, r3
   282dc:	0013      	movs	r3, r2
   282de:	01e2      	lsls	r2, r4, #7
   282e0:	d504      	bpl.n	282ec <__aeabi_dmul+0x3b4>
   282e2:	2080      	movs	r0, #128	; 0x80
   282e4:	4a51      	ldr	r2, [pc, #324]	; (2842c <__aeabi_dmul+0x4f4>)
   282e6:	00c0      	lsls	r0, r0, #3
   282e8:	4014      	ands	r4, r2
   282ea:	4460      	add	r0, ip
   282ec:	4a50      	ldr	r2, [pc, #320]	; (28430 <__aeabi_dmul+0x4f8>)
   282ee:	4290      	cmp	r0, r2
   282f0:	dd00      	ble.n	282f4 <__aeabi_dmul+0x3bc>
   282f2:	e6e3      	b.n	280bc <__aeabi_dmul+0x184>
   282f4:	2501      	movs	r5, #1
   282f6:	08db      	lsrs	r3, r3, #3
   282f8:	0762      	lsls	r2, r4, #29
   282fa:	431a      	orrs	r2, r3
   282fc:	0264      	lsls	r4, r4, #9
   282fe:	9b01      	ldr	r3, [sp, #4]
   28300:	4691      	mov	r9, r2
   28302:	0b22      	lsrs	r2, r4, #12
   28304:	0544      	lsls	r4, r0, #21
   28306:	0d64      	lsrs	r4, r4, #21
   28308:	401d      	ands	r5, r3
   2830a:	e67c      	b.n	28006 <__aeabi_dmul+0xce>
   2830c:	2280      	movs	r2, #128	; 0x80
   2830e:	4659      	mov	r1, fp
   28310:	0312      	lsls	r2, r2, #12
   28312:	4211      	tst	r1, r2
   28314:	d008      	beq.n	28328 <__aeabi_dmul+0x3f0>
   28316:	4214      	tst	r4, r2
   28318:	d106      	bne.n	28328 <__aeabi_dmul+0x3f0>
   2831a:	4322      	orrs	r2, r4
   2831c:	0312      	lsls	r2, r2, #12
   2831e:	0b12      	lsrs	r2, r2, #12
   28320:	4645      	mov	r5, r8
   28322:	4699      	mov	r9, r3
   28324:	4c43      	ldr	r4, [pc, #268]	; (28434 <__aeabi_dmul+0x4fc>)
   28326:	e66e      	b.n	28006 <__aeabi_dmul+0xce>
   28328:	465b      	mov	r3, fp
   2832a:	431a      	orrs	r2, r3
   2832c:	0312      	lsls	r2, r2, #12
   2832e:	0b12      	lsrs	r2, r2, #12
   28330:	4c40      	ldr	r4, [pc, #256]	; (28434 <__aeabi_dmul+0x4fc>)
   28332:	e668      	b.n	28006 <__aeabi_dmul+0xce>
   28334:	0003      	movs	r3, r0
   28336:	4654      	mov	r4, sl
   28338:	3b28      	subs	r3, #40	; 0x28
   2833a:	409c      	lsls	r4, r3
   2833c:	2300      	movs	r3, #0
   2833e:	e6b9      	b.n	280b4 <__aeabi_dmul+0x17c>
   28340:	f000 fcb0 	bl	28ca4 <__clzsi2>
   28344:	3020      	adds	r0, #32
   28346:	e6a6      	b.n	28096 <__aeabi_dmul+0x15e>
   28348:	0003      	movs	r3, r0
   2834a:	3b28      	subs	r3, #40	; 0x28
   2834c:	409f      	lsls	r7, r3
   2834e:	2300      	movs	r3, #0
   28350:	46bb      	mov	fp, r7
   28352:	4699      	mov	r9, r3
   28354:	e68a      	b.n	2806c <__aeabi_dmul+0x134>
   28356:	f000 fca5 	bl	28ca4 <__clzsi2>
   2835a:	3020      	adds	r0, #32
   2835c:	e674      	b.n	28048 <__aeabi_dmul+0x110>
   2835e:	46b4      	mov	ip, r6
   28360:	e7ad      	b.n	282be <__aeabi_dmul+0x386>
   28362:	2501      	movs	r5, #1
   28364:	1a2a      	subs	r2, r5, r0
   28366:	2a38      	cmp	r2, #56	; 0x38
   28368:	dd06      	ble.n	28378 <__aeabi_dmul+0x440>
   2836a:	9b01      	ldr	r3, [sp, #4]
   2836c:	2400      	movs	r4, #0
   2836e:	401d      	ands	r5, r3
   28370:	2300      	movs	r3, #0
   28372:	2200      	movs	r2, #0
   28374:	4699      	mov	r9, r3
   28376:	e646      	b.n	28006 <__aeabi_dmul+0xce>
   28378:	2a1f      	cmp	r2, #31
   2837a:	dc21      	bgt.n	283c0 <__aeabi_dmul+0x488>
   2837c:	2520      	movs	r5, #32
   2837e:	0020      	movs	r0, r4
   28380:	1aad      	subs	r5, r5, r2
   28382:	001e      	movs	r6, r3
   28384:	40ab      	lsls	r3, r5
   28386:	40a8      	lsls	r0, r5
   28388:	40d6      	lsrs	r6, r2
   2838a:	1e5d      	subs	r5, r3, #1
   2838c:	41ab      	sbcs	r3, r5
   2838e:	4330      	orrs	r0, r6
   28390:	4318      	orrs	r0, r3
   28392:	40d4      	lsrs	r4, r2
   28394:	0743      	lsls	r3, r0, #29
   28396:	d009      	beq.n	283ac <__aeabi_dmul+0x474>
   28398:	230f      	movs	r3, #15
   2839a:	4003      	ands	r3, r0
   2839c:	2b04      	cmp	r3, #4
   2839e:	d005      	beq.n	283ac <__aeabi_dmul+0x474>
   283a0:	0003      	movs	r3, r0
   283a2:	1d18      	adds	r0, r3, #4
   283a4:	4298      	cmp	r0, r3
   283a6:	419b      	sbcs	r3, r3
   283a8:	425b      	negs	r3, r3
   283aa:	18e4      	adds	r4, r4, r3
   283ac:	0223      	lsls	r3, r4, #8
   283ae:	d521      	bpl.n	283f4 <__aeabi_dmul+0x4bc>
   283b0:	2501      	movs	r5, #1
   283b2:	9b01      	ldr	r3, [sp, #4]
   283b4:	2401      	movs	r4, #1
   283b6:	401d      	ands	r5, r3
   283b8:	2300      	movs	r3, #0
   283ba:	2200      	movs	r2, #0
   283bc:	4699      	mov	r9, r3
   283be:	e622      	b.n	28006 <__aeabi_dmul+0xce>
   283c0:	251f      	movs	r5, #31
   283c2:	0021      	movs	r1, r4
   283c4:	426d      	negs	r5, r5
   283c6:	1a28      	subs	r0, r5, r0
   283c8:	40c1      	lsrs	r1, r0
   283ca:	0008      	movs	r0, r1
   283cc:	2a20      	cmp	r2, #32
   283ce:	d01d      	beq.n	2840c <__aeabi_dmul+0x4d4>
   283d0:	355f      	adds	r5, #95	; 0x5f
   283d2:	1aaa      	subs	r2, r5, r2
   283d4:	4094      	lsls	r4, r2
   283d6:	4323      	orrs	r3, r4
   283d8:	1e5c      	subs	r4, r3, #1
   283da:	41a3      	sbcs	r3, r4
   283dc:	2507      	movs	r5, #7
   283de:	4303      	orrs	r3, r0
   283e0:	401d      	ands	r5, r3
   283e2:	2200      	movs	r2, #0
   283e4:	2d00      	cmp	r5, #0
   283e6:	d009      	beq.n	283fc <__aeabi_dmul+0x4c4>
   283e8:	220f      	movs	r2, #15
   283ea:	2400      	movs	r4, #0
   283ec:	401a      	ands	r2, r3
   283ee:	0018      	movs	r0, r3
   283f0:	2a04      	cmp	r2, #4
   283f2:	d1d6      	bne.n	283a2 <__aeabi_dmul+0x46a>
   283f4:	0003      	movs	r3, r0
   283f6:	0765      	lsls	r5, r4, #29
   283f8:	0264      	lsls	r4, r4, #9
   283fa:	0b22      	lsrs	r2, r4, #12
   283fc:	08db      	lsrs	r3, r3, #3
   283fe:	432b      	orrs	r3, r5
   28400:	2501      	movs	r5, #1
   28402:	4699      	mov	r9, r3
   28404:	9b01      	ldr	r3, [sp, #4]
   28406:	2400      	movs	r4, #0
   28408:	401d      	ands	r5, r3
   2840a:	e5fc      	b.n	28006 <__aeabi_dmul+0xce>
   2840c:	2400      	movs	r4, #0
   2840e:	e7e2      	b.n	283d6 <__aeabi_dmul+0x49e>
   28410:	2280      	movs	r2, #128	; 0x80
   28412:	2501      	movs	r5, #1
   28414:	0312      	lsls	r2, r2, #12
   28416:	4322      	orrs	r2, r4
   28418:	9901      	ldr	r1, [sp, #4]
   2841a:	0312      	lsls	r2, r2, #12
   2841c:	0b12      	lsrs	r2, r2, #12
   2841e:	400d      	ands	r5, r1
   28420:	4699      	mov	r9, r3
   28422:	4c04      	ldr	r4, [pc, #16]	; (28434 <__aeabi_dmul+0x4fc>)
   28424:	e5ef      	b.n	28006 <__aeabi_dmul+0xce>
   28426:	46c0      	nop			; (mov r8, r8)
   28428:	000003ff 	.word	0x000003ff
   2842c:	feffffff 	.word	0xfeffffff
   28430:	000007fe 	.word	0x000007fe
   28434:	000007ff 	.word	0x000007ff

00028438 <__aeabi_dsub>:
   28438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2843a:	4646      	mov	r6, r8
   2843c:	46d6      	mov	lr, sl
   2843e:	464f      	mov	r7, r9
   28440:	030c      	lsls	r4, r1, #12
   28442:	b5c0      	push	{r6, r7, lr}
   28444:	0fcd      	lsrs	r5, r1, #31
   28446:	004e      	lsls	r6, r1, #1
   28448:	0a61      	lsrs	r1, r4, #9
   2844a:	0f44      	lsrs	r4, r0, #29
   2844c:	430c      	orrs	r4, r1
   2844e:	00c1      	lsls	r1, r0, #3
   28450:	0058      	lsls	r0, r3, #1
   28452:	0d40      	lsrs	r0, r0, #21
   28454:	4684      	mov	ip, r0
   28456:	468a      	mov	sl, r1
   28458:	000f      	movs	r7, r1
   2845a:	0319      	lsls	r1, r3, #12
   2845c:	0f50      	lsrs	r0, r2, #29
   2845e:	0a49      	lsrs	r1, r1, #9
   28460:	4301      	orrs	r1, r0
   28462:	48c6      	ldr	r0, [pc, #792]	; (2877c <__aeabi_dsub+0x344>)
   28464:	0d76      	lsrs	r6, r6, #21
   28466:	46a8      	mov	r8, r5
   28468:	0fdb      	lsrs	r3, r3, #31
   2846a:	00d2      	lsls	r2, r2, #3
   2846c:	4584      	cmp	ip, r0
   2846e:	d100      	bne.n	28472 <__aeabi_dsub+0x3a>
   28470:	e0d8      	b.n	28624 <__aeabi_dsub+0x1ec>
   28472:	2001      	movs	r0, #1
   28474:	4043      	eors	r3, r0
   28476:	42ab      	cmp	r3, r5
   28478:	d100      	bne.n	2847c <__aeabi_dsub+0x44>
   2847a:	e0a6      	b.n	285ca <__aeabi_dsub+0x192>
   2847c:	4660      	mov	r0, ip
   2847e:	1a35      	subs	r5, r6, r0
   28480:	2d00      	cmp	r5, #0
   28482:	dc00      	bgt.n	28486 <__aeabi_dsub+0x4e>
   28484:	e105      	b.n	28692 <__aeabi_dsub+0x25a>
   28486:	2800      	cmp	r0, #0
   28488:	d110      	bne.n	284ac <__aeabi_dsub+0x74>
   2848a:	000b      	movs	r3, r1
   2848c:	4313      	orrs	r3, r2
   2848e:	d100      	bne.n	28492 <__aeabi_dsub+0x5a>
   28490:	e0d7      	b.n	28642 <__aeabi_dsub+0x20a>
   28492:	1e6b      	subs	r3, r5, #1
   28494:	2b00      	cmp	r3, #0
   28496:	d000      	beq.n	2849a <__aeabi_dsub+0x62>
   28498:	e14b      	b.n	28732 <__aeabi_dsub+0x2fa>
   2849a:	4653      	mov	r3, sl
   2849c:	1a9f      	subs	r7, r3, r2
   2849e:	45ba      	cmp	sl, r7
   284a0:	4180      	sbcs	r0, r0
   284a2:	1a64      	subs	r4, r4, r1
   284a4:	4240      	negs	r0, r0
   284a6:	1a24      	subs	r4, r4, r0
   284a8:	2601      	movs	r6, #1
   284aa:	e01e      	b.n	284ea <__aeabi_dsub+0xb2>
   284ac:	4bb3      	ldr	r3, [pc, #716]	; (2877c <__aeabi_dsub+0x344>)
   284ae:	429e      	cmp	r6, r3
   284b0:	d048      	beq.n	28544 <__aeabi_dsub+0x10c>
   284b2:	2380      	movs	r3, #128	; 0x80
   284b4:	041b      	lsls	r3, r3, #16
   284b6:	4319      	orrs	r1, r3
   284b8:	2d38      	cmp	r5, #56	; 0x38
   284ba:	dd00      	ble.n	284be <__aeabi_dsub+0x86>
   284bc:	e119      	b.n	286f2 <__aeabi_dsub+0x2ba>
   284be:	2d1f      	cmp	r5, #31
   284c0:	dd00      	ble.n	284c4 <__aeabi_dsub+0x8c>
   284c2:	e14c      	b.n	2875e <__aeabi_dsub+0x326>
   284c4:	2320      	movs	r3, #32
   284c6:	000f      	movs	r7, r1
   284c8:	1b5b      	subs	r3, r3, r5
   284ca:	0010      	movs	r0, r2
   284cc:	409a      	lsls	r2, r3
   284ce:	409f      	lsls	r7, r3
   284d0:	40e8      	lsrs	r0, r5
   284d2:	1e53      	subs	r3, r2, #1
   284d4:	419a      	sbcs	r2, r3
   284d6:	40e9      	lsrs	r1, r5
   284d8:	4307      	orrs	r7, r0
   284da:	4317      	orrs	r7, r2
   284dc:	4653      	mov	r3, sl
   284de:	1bdf      	subs	r7, r3, r7
   284e0:	1a61      	subs	r1, r4, r1
   284e2:	45ba      	cmp	sl, r7
   284e4:	41a4      	sbcs	r4, r4
   284e6:	4264      	negs	r4, r4
   284e8:	1b0c      	subs	r4, r1, r4
   284ea:	0223      	lsls	r3, r4, #8
   284ec:	d400      	bmi.n	284f0 <__aeabi_dsub+0xb8>
   284ee:	e0c5      	b.n	2867c <__aeabi_dsub+0x244>
   284f0:	0264      	lsls	r4, r4, #9
   284f2:	0a65      	lsrs	r5, r4, #9
   284f4:	2d00      	cmp	r5, #0
   284f6:	d100      	bne.n	284fa <__aeabi_dsub+0xc2>
   284f8:	e0f6      	b.n	286e8 <__aeabi_dsub+0x2b0>
   284fa:	0028      	movs	r0, r5
   284fc:	f000 fbd2 	bl	28ca4 <__clzsi2>
   28500:	0003      	movs	r3, r0
   28502:	3b08      	subs	r3, #8
   28504:	2b1f      	cmp	r3, #31
   28506:	dd00      	ble.n	2850a <__aeabi_dsub+0xd2>
   28508:	e0e9      	b.n	286de <__aeabi_dsub+0x2a6>
   2850a:	2220      	movs	r2, #32
   2850c:	003c      	movs	r4, r7
   2850e:	1ad2      	subs	r2, r2, r3
   28510:	409d      	lsls	r5, r3
   28512:	40d4      	lsrs	r4, r2
   28514:	409f      	lsls	r7, r3
   28516:	4325      	orrs	r5, r4
   28518:	429e      	cmp	r6, r3
   2851a:	dd00      	ble.n	2851e <__aeabi_dsub+0xe6>
   2851c:	e0db      	b.n	286d6 <__aeabi_dsub+0x29e>
   2851e:	1b9e      	subs	r6, r3, r6
   28520:	1c73      	adds	r3, r6, #1
   28522:	2b1f      	cmp	r3, #31
   28524:	dd00      	ble.n	28528 <__aeabi_dsub+0xf0>
   28526:	e10a      	b.n	2873e <__aeabi_dsub+0x306>
   28528:	2220      	movs	r2, #32
   2852a:	0038      	movs	r0, r7
   2852c:	1ad2      	subs	r2, r2, r3
   2852e:	0029      	movs	r1, r5
   28530:	4097      	lsls	r7, r2
   28532:	002c      	movs	r4, r5
   28534:	4091      	lsls	r1, r2
   28536:	40d8      	lsrs	r0, r3
   28538:	1e7a      	subs	r2, r7, #1
   2853a:	4197      	sbcs	r7, r2
   2853c:	40dc      	lsrs	r4, r3
   2853e:	2600      	movs	r6, #0
   28540:	4301      	orrs	r1, r0
   28542:	430f      	orrs	r7, r1
   28544:	077b      	lsls	r3, r7, #29
   28546:	d009      	beq.n	2855c <__aeabi_dsub+0x124>
   28548:	230f      	movs	r3, #15
   2854a:	403b      	ands	r3, r7
   2854c:	2b04      	cmp	r3, #4
   2854e:	d005      	beq.n	2855c <__aeabi_dsub+0x124>
   28550:	1d3b      	adds	r3, r7, #4
   28552:	42bb      	cmp	r3, r7
   28554:	41bf      	sbcs	r7, r7
   28556:	427f      	negs	r7, r7
   28558:	19e4      	adds	r4, r4, r7
   2855a:	001f      	movs	r7, r3
   2855c:	0223      	lsls	r3, r4, #8
   2855e:	d525      	bpl.n	285ac <__aeabi_dsub+0x174>
   28560:	4b86      	ldr	r3, [pc, #536]	; (2877c <__aeabi_dsub+0x344>)
   28562:	3601      	adds	r6, #1
   28564:	429e      	cmp	r6, r3
   28566:	d100      	bne.n	2856a <__aeabi_dsub+0x132>
   28568:	e0af      	b.n	286ca <__aeabi_dsub+0x292>
   2856a:	4b85      	ldr	r3, [pc, #532]	; (28780 <__aeabi_dsub+0x348>)
   2856c:	2501      	movs	r5, #1
   2856e:	401c      	ands	r4, r3
   28570:	4643      	mov	r3, r8
   28572:	0762      	lsls	r2, r4, #29
   28574:	08ff      	lsrs	r7, r7, #3
   28576:	0264      	lsls	r4, r4, #9
   28578:	0576      	lsls	r6, r6, #21
   2857a:	4317      	orrs	r7, r2
   2857c:	0b24      	lsrs	r4, r4, #12
   2857e:	0d76      	lsrs	r6, r6, #21
   28580:	401d      	ands	r5, r3
   28582:	2100      	movs	r1, #0
   28584:	0324      	lsls	r4, r4, #12
   28586:	0b23      	lsrs	r3, r4, #12
   28588:	0d0c      	lsrs	r4, r1, #20
   2858a:	4a7e      	ldr	r2, [pc, #504]	; (28784 <__aeabi_dsub+0x34c>)
   2858c:	0524      	lsls	r4, r4, #20
   2858e:	431c      	orrs	r4, r3
   28590:	4014      	ands	r4, r2
   28592:	0533      	lsls	r3, r6, #20
   28594:	4323      	orrs	r3, r4
   28596:	005b      	lsls	r3, r3, #1
   28598:	07ed      	lsls	r5, r5, #31
   2859a:	085b      	lsrs	r3, r3, #1
   2859c:	432b      	orrs	r3, r5
   2859e:	0038      	movs	r0, r7
   285a0:	0019      	movs	r1, r3
   285a2:	bc1c      	pop	{r2, r3, r4}
   285a4:	4690      	mov	r8, r2
   285a6:	4699      	mov	r9, r3
   285a8:	46a2      	mov	sl, r4
   285aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   285ac:	2501      	movs	r5, #1
   285ae:	4643      	mov	r3, r8
   285b0:	0762      	lsls	r2, r4, #29
   285b2:	08ff      	lsrs	r7, r7, #3
   285b4:	4317      	orrs	r7, r2
   285b6:	08e4      	lsrs	r4, r4, #3
   285b8:	401d      	ands	r5, r3
   285ba:	4b70      	ldr	r3, [pc, #448]	; (2877c <__aeabi_dsub+0x344>)
   285bc:	429e      	cmp	r6, r3
   285be:	d036      	beq.n	2862e <__aeabi_dsub+0x1f6>
   285c0:	0324      	lsls	r4, r4, #12
   285c2:	0576      	lsls	r6, r6, #21
   285c4:	0b24      	lsrs	r4, r4, #12
   285c6:	0d76      	lsrs	r6, r6, #21
   285c8:	e7db      	b.n	28582 <__aeabi_dsub+0x14a>
   285ca:	4663      	mov	r3, ip
   285cc:	1af3      	subs	r3, r6, r3
   285ce:	2b00      	cmp	r3, #0
   285d0:	dc00      	bgt.n	285d4 <__aeabi_dsub+0x19c>
   285d2:	e094      	b.n	286fe <__aeabi_dsub+0x2c6>
   285d4:	4660      	mov	r0, ip
   285d6:	2800      	cmp	r0, #0
   285d8:	d035      	beq.n	28646 <__aeabi_dsub+0x20e>
   285da:	4868      	ldr	r0, [pc, #416]	; (2877c <__aeabi_dsub+0x344>)
   285dc:	4286      	cmp	r6, r0
   285de:	d0b1      	beq.n	28544 <__aeabi_dsub+0x10c>
   285e0:	2780      	movs	r7, #128	; 0x80
   285e2:	043f      	lsls	r7, r7, #16
   285e4:	4339      	orrs	r1, r7
   285e6:	2b38      	cmp	r3, #56	; 0x38
   285e8:	dc00      	bgt.n	285ec <__aeabi_dsub+0x1b4>
   285ea:	e0fd      	b.n	287e8 <__aeabi_dsub+0x3b0>
   285ec:	430a      	orrs	r2, r1
   285ee:	0017      	movs	r7, r2
   285f0:	2100      	movs	r1, #0
   285f2:	1e7a      	subs	r2, r7, #1
   285f4:	4197      	sbcs	r7, r2
   285f6:	4457      	add	r7, sl
   285f8:	4557      	cmp	r7, sl
   285fa:	4180      	sbcs	r0, r0
   285fc:	1909      	adds	r1, r1, r4
   285fe:	4244      	negs	r4, r0
   28600:	190c      	adds	r4, r1, r4
   28602:	0223      	lsls	r3, r4, #8
   28604:	d53a      	bpl.n	2867c <__aeabi_dsub+0x244>
   28606:	4b5d      	ldr	r3, [pc, #372]	; (2877c <__aeabi_dsub+0x344>)
   28608:	3601      	adds	r6, #1
   2860a:	429e      	cmp	r6, r3
   2860c:	d100      	bne.n	28610 <__aeabi_dsub+0x1d8>
   2860e:	e14b      	b.n	288a8 <__aeabi_dsub+0x470>
   28610:	2201      	movs	r2, #1
   28612:	4b5b      	ldr	r3, [pc, #364]	; (28780 <__aeabi_dsub+0x348>)
   28614:	401c      	ands	r4, r3
   28616:	087b      	lsrs	r3, r7, #1
   28618:	4017      	ands	r7, r2
   2861a:	431f      	orrs	r7, r3
   2861c:	07e2      	lsls	r2, r4, #31
   2861e:	4317      	orrs	r7, r2
   28620:	0864      	lsrs	r4, r4, #1
   28622:	e78f      	b.n	28544 <__aeabi_dsub+0x10c>
   28624:	0008      	movs	r0, r1
   28626:	4310      	orrs	r0, r2
   28628:	d000      	beq.n	2862c <__aeabi_dsub+0x1f4>
   2862a:	e724      	b.n	28476 <__aeabi_dsub+0x3e>
   2862c:	e721      	b.n	28472 <__aeabi_dsub+0x3a>
   2862e:	0023      	movs	r3, r4
   28630:	433b      	orrs	r3, r7
   28632:	d100      	bne.n	28636 <__aeabi_dsub+0x1fe>
   28634:	e1b9      	b.n	289aa <__aeabi_dsub+0x572>
   28636:	2280      	movs	r2, #128	; 0x80
   28638:	0312      	lsls	r2, r2, #12
   2863a:	4314      	orrs	r4, r2
   2863c:	0324      	lsls	r4, r4, #12
   2863e:	0b24      	lsrs	r4, r4, #12
   28640:	e79f      	b.n	28582 <__aeabi_dsub+0x14a>
   28642:	002e      	movs	r6, r5
   28644:	e77e      	b.n	28544 <__aeabi_dsub+0x10c>
   28646:	0008      	movs	r0, r1
   28648:	4310      	orrs	r0, r2
   2864a:	d100      	bne.n	2864e <__aeabi_dsub+0x216>
   2864c:	e0ca      	b.n	287e4 <__aeabi_dsub+0x3ac>
   2864e:	1e58      	subs	r0, r3, #1
   28650:	4684      	mov	ip, r0
   28652:	2800      	cmp	r0, #0
   28654:	d000      	beq.n	28658 <__aeabi_dsub+0x220>
   28656:	e0e7      	b.n	28828 <__aeabi_dsub+0x3f0>
   28658:	4452      	add	r2, sl
   2865a:	4552      	cmp	r2, sl
   2865c:	4180      	sbcs	r0, r0
   2865e:	1864      	adds	r4, r4, r1
   28660:	4240      	negs	r0, r0
   28662:	1824      	adds	r4, r4, r0
   28664:	0017      	movs	r7, r2
   28666:	2601      	movs	r6, #1
   28668:	0223      	lsls	r3, r4, #8
   2866a:	d507      	bpl.n	2867c <__aeabi_dsub+0x244>
   2866c:	2602      	movs	r6, #2
   2866e:	e7cf      	b.n	28610 <__aeabi_dsub+0x1d8>
   28670:	4664      	mov	r4, ip
   28672:	432c      	orrs	r4, r5
   28674:	d100      	bne.n	28678 <__aeabi_dsub+0x240>
   28676:	e1b3      	b.n	289e0 <__aeabi_dsub+0x5a8>
   28678:	002c      	movs	r4, r5
   2867a:	4667      	mov	r7, ip
   2867c:	077b      	lsls	r3, r7, #29
   2867e:	d000      	beq.n	28682 <__aeabi_dsub+0x24a>
   28680:	e762      	b.n	28548 <__aeabi_dsub+0x110>
   28682:	0763      	lsls	r3, r4, #29
   28684:	08ff      	lsrs	r7, r7, #3
   28686:	431f      	orrs	r7, r3
   28688:	2501      	movs	r5, #1
   2868a:	4643      	mov	r3, r8
   2868c:	08e4      	lsrs	r4, r4, #3
   2868e:	401d      	ands	r5, r3
   28690:	e793      	b.n	285ba <__aeabi_dsub+0x182>
   28692:	2d00      	cmp	r5, #0
   28694:	d178      	bne.n	28788 <__aeabi_dsub+0x350>
   28696:	1c75      	adds	r5, r6, #1
   28698:	056d      	lsls	r5, r5, #21
   2869a:	0d6d      	lsrs	r5, r5, #21
   2869c:	2d01      	cmp	r5, #1
   2869e:	dc00      	bgt.n	286a2 <__aeabi_dsub+0x26a>
   286a0:	e0f2      	b.n	28888 <__aeabi_dsub+0x450>
   286a2:	4650      	mov	r0, sl
   286a4:	1a80      	subs	r0, r0, r2
   286a6:	4582      	cmp	sl, r0
   286a8:	41bf      	sbcs	r7, r7
   286aa:	1a65      	subs	r5, r4, r1
   286ac:	427f      	negs	r7, r7
   286ae:	1bed      	subs	r5, r5, r7
   286b0:	4684      	mov	ip, r0
   286b2:	0228      	lsls	r0, r5, #8
   286b4:	d400      	bmi.n	286b8 <__aeabi_dsub+0x280>
   286b6:	e08c      	b.n	287d2 <__aeabi_dsub+0x39a>
   286b8:	4650      	mov	r0, sl
   286ba:	1a17      	subs	r7, r2, r0
   286bc:	42ba      	cmp	r2, r7
   286be:	4192      	sbcs	r2, r2
   286c0:	1b0c      	subs	r4, r1, r4
   286c2:	4255      	negs	r5, r2
   286c4:	1b65      	subs	r5, r4, r5
   286c6:	4698      	mov	r8, r3
   286c8:	e714      	b.n	284f4 <__aeabi_dsub+0xbc>
   286ca:	2501      	movs	r5, #1
   286cc:	4643      	mov	r3, r8
   286ce:	2400      	movs	r4, #0
   286d0:	401d      	ands	r5, r3
   286d2:	2700      	movs	r7, #0
   286d4:	e755      	b.n	28582 <__aeabi_dsub+0x14a>
   286d6:	4c2a      	ldr	r4, [pc, #168]	; (28780 <__aeabi_dsub+0x348>)
   286d8:	1af6      	subs	r6, r6, r3
   286da:	402c      	ands	r4, r5
   286dc:	e732      	b.n	28544 <__aeabi_dsub+0x10c>
   286de:	003d      	movs	r5, r7
   286e0:	3828      	subs	r0, #40	; 0x28
   286e2:	4085      	lsls	r5, r0
   286e4:	2700      	movs	r7, #0
   286e6:	e717      	b.n	28518 <__aeabi_dsub+0xe0>
   286e8:	0038      	movs	r0, r7
   286ea:	f000 fadb 	bl	28ca4 <__clzsi2>
   286ee:	3020      	adds	r0, #32
   286f0:	e706      	b.n	28500 <__aeabi_dsub+0xc8>
   286f2:	430a      	orrs	r2, r1
   286f4:	0017      	movs	r7, r2
   286f6:	2100      	movs	r1, #0
   286f8:	1e7a      	subs	r2, r7, #1
   286fa:	4197      	sbcs	r7, r2
   286fc:	e6ee      	b.n	284dc <__aeabi_dsub+0xa4>
   286fe:	2b00      	cmp	r3, #0
   28700:	d000      	beq.n	28704 <__aeabi_dsub+0x2cc>
   28702:	e0e5      	b.n	288d0 <__aeabi_dsub+0x498>
   28704:	1c73      	adds	r3, r6, #1
   28706:	469c      	mov	ip, r3
   28708:	055b      	lsls	r3, r3, #21
   2870a:	0d5b      	lsrs	r3, r3, #21
   2870c:	2b01      	cmp	r3, #1
   2870e:	dc00      	bgt.n	28712 <__aeabi_dsub+0x2da>
   28710:	e09f      	b.n	28852 <__aeabi_dsub+0x41a>
   28712:	4b1a      	ldr	r3, [pc, #104]	; (2877c <__aeabi_dsub+0x344>)
   28714:	459c      	cmp	ip, r3
   28716:	d100      	bne.n	2871a <__aeabi_dsub+0x2e2>
   28718:	e0c5      	b.n	288a6 <__aeabi_dsub+0x46e>
   2871a:	4452      	add	r2, sl
   2871c:	4552      	cmp	r2, sl
   2871e:	4180      	sbcs	r0, r0
   28720:	1864      	adds	r4, r4, r1
   28722:	4240      	negs	r0, r0
   28724:	1824      	adds	r4, r4, r0
   28726:	07e7      	lsls	r7, r4, #31
   28728:	0852      	lsrs	r2, r2, #1
   2872a:	4317      	orrs	r7, r2
   2872c:	0864      	lsrs	r4, r4, #1
   2872e:	4666      	mov	r6, ip
   28730:	e708      	b.n	28544 <__aeabi_dsub+0x10c>
   28732:	4812      	ldr	r0, [pc, #72]	; (2877c <__aeabi_dsub+0x344>)
   28734:	4285      	cmp	r5, r0
   28736:	d100      	bne.n	2873a <__aeabi_dsub+0x302>
   28738:	e085      	b.n	28846 <__aeabi_dsub+0x40e>
   2873a:	001d      	movs	r5, r3
   2873c:	e6bc      	b.n	284b8 <__aeabi_dsub+0x80>
   2873e:	0029      	movs	r1, r5
   28740:	3e1f      	subs	r6, #31
   28742:	40f1      	lsrs	r1, r6
   28744:	2b20      	cmp	r3, #32
   28746:	d100      	bne.n	2874a <__aeabi_dsub+0x312>
   28748:	e07f      	b.n	2884a <__aeabi_dsub+0x412>
   2874a:	2240      	movs	r2, #64	; 0x40
   2874c:	1ad3      	subs	r3, r2, r3
   2874e:	409d      	lsls	r5, r3
   28750:	432f      	orrs	r7, r5
   28752:	1e7d      	subs	r5, r7, #1
   28754:	41af      	sbcs	r7, r5
   28756:	2400      	movs	r4, #0
   28758:	430f      	orrs	r7, r1
   2875a:	2600      	movs	r6, #0
   2875c:	e78e      	b.n	2867c <__aeabi_dsub+0x244>
   2875e:	002b      	movs	r3, r5
   28760:	000f      	movs	r7, r1
   28762:	3b20      	subs	r3, #32
   28764:	40df      	lsrs	r7, r3
   28766:	2d20      	cmp	r5, #32
   28768:	d071      	beq.n	2884e <__aeabi_dsub+0x416>
   2876a:	2340      	movs	r3, #64	; 0x40
   2876c:	1b5d      	subs	r5, r3, r5
   2876e:	40a9      	lsls	r1, r5
   28770:	430a      	orrs	r2, r1
   28772:	1e51      	subs	r1, r2, #1
   28774:	418a      	sbcs	r2, r1
   28776:	2100      	movs	r1, #0
   28778:	4317      	orrs	r7, r2
   2877a:	e6af      	b.n	284dc <__aeabi_dsub+0xa4>
   2877c:	000007ff 	.word	0x000007ff
   28780:	ff7fffff 	.word	0xff7fffff
   28784:	800fffff 	.word	0x800fffff
   28788:	2e00      	cmp	r6, #0
   2878a:	d03e      	beq.n	2880a <__aeabi_dsub+0x3d2>
   2878c:	4eb3      	ldr	r6, [pc, #716]	; (28a5c <__aeabi_dsub+0x624>)
   2878e:	45b4      	cmp	ip, r6
   28790:	d045      	beq.n	2881e <__aeabi_dsub+0x3e6>
   28792:	2680      	movs	r6, #128	; 0x80
   28794:	0436      	lsls	r6, r6, #16
   28796:	426d      	negs	r5, r5
   28798:	4334      	orrs	r4, r6
   2879a:	2d38      	cmp	r5, #56	; 0x38
   2879c:	dd00      	ble.n	287a0 <__aeabi_dsub+0x368>
   2879e:	e0a8      	b.n	288f2 <__aeabi_dsub+0x4ba>
   287a0:	2d1f      	cmp	r5, #31
   287a2:	dd00      	ble.n	287a6 <__aeabi_dsub+0x36e>
   287a4:	e11f      	b.n	289e6 <__aeabi_dsub+0x5ae>
   287a6:	2620      	movs	r6, #32
   287a8:	0027      	movs	r7, r4
   287aa:	4650      	mov	r0, sl
   287ac:	1b76      	subs	r6, r6, r5
   287ae:	40b7      	lsls	r7, r6
   287b0:	40e8      	lsrs	r0, r5
   287b2:	4307      	orrs	r7, r0
   287b4:	4650      	mov	r0, sl
   287b6:	40b0      	lsls	r0, r6
   287b8:	1e46      	subs	r6, r0, #1
   287ba:	41b0      	sbcs	r0, r6
   287bc:	40ec      	lsrs	r4, r5
   287be:	4338      	orrs	r0, r7
   287c0:	1a17      	subs	r7, r2, r0
   287c2:	42ba      	cmp	r2, r7
   287c4:	4192      	sbcs	r2, r2
   287c6:	1b0c      	subs	r4, r1, r4
   287c8:	4252      	negs	r2, r2
   287ca:	1aa4      	subs	r4, r4, r2
   287cc:	4666      	mov	r6, ip
   287ce:	4698      	mov	r8, r3
   287d0:	e68b      	b.n	284ea <__aeabi_dsub+0xb2>
   287d2:	4664      	mov	r4, ip
   287d4:	4667      	mov	r7, ip
   287d6:	432c      	orrs	r4, r5
   287d8:	d000      	beq.n	287dc <__aeabi_dsub+0x3a4>
   287da:	e68b      	b.n	284f4 <__aeabi_dsub+0xbc>
   287dc:	2500      	movs	r5, #0
   287de:	2600      	movs	r6, #0
   287e0:	2700      	movs	r7, #0
   287e2:	e6ea      	b.n	285ba <__aeabi_dsub+0x182>
   287e4:	001e      	movs	r6, r3
   287e6:	e6ad      	b.n	28544 <__aeabi_dsub+0x10c>
   287e8:	2b1f      	cmp	r3, #31
   287ea:	dc60      	bgt.n	288ae <__aeabi_dsub+0x476>
   287ec:	2720      	movs	r7, #32
   287ee:	1af8      	subs	r0, r7, r3
   287f0:	000f      	movs	r7, r1
   287f2:	4684      	mov	ip, r0
   287f4:	4087      	lsls	r7, r0
   287f6:	0010      	movs	r0, r2
   287f8:	40d8      	lsrs	r0, r3
   287fa:	4307      	orrs	r7, r0
   287fc:	4660      	mov	r0, ip
   287fe:	4082      	lsls	r2, r0
   28800:	1e50      	subs	r0, r2, #1
   28802:	4182      	sbcs	r2, r0
   28804:	40d9      	lsrs	r1, r3
   28806:	4317      	orrs	r7, r2
   28808:	e6f5      	b.n	285f6 <__aeabi_dsub+0x1be>
   2880a:	0026      	movs	r6, r4
   2880c:	4650      	mov	r0, sl
   2880e:	4306      	orrs	r6, r0
   28810:	d005      	beq.n	2881e <__aeabi_dsub+0x3e6>
   28812:	43ed      	mvns	r5, r5
   28814:	2d00      	cmp	r5, #0
   28816:	d0d3      	beq.n	287c0 <__aeabi_dsub+0x388>
   28818:	4e90      	ldr	r6, [pc, #576]	; (28a5c <__aeabi_dsub+0x624>)
   2881a:	45b4      	cmp	ip, r6
   2881c:	d1bd      	bne.n	2879a <__aeabi_dsub+0x362>
   2881e:	000c      	movs	r4, r1
   28820:	0017      	movs	r7, r2
   28822:	4666      	mov	r6, ip
   28824:	4698      	mov	r8, r3
   28826:	e68d      	b.n	28544 <__aeabi_dsub+0x10c>
   28828:	488c      	ldr	r0, [pc, #560]	; (28a5c <__aeabi_dsub+0x624>)
   2882a:	4283      	cmp	r3, r0
   2882c:	d00b      	beq.n	28846 <__aeabi_dsub+0x40e>
   2882e:	4663      	mov	r3, ip
   28830:	e6d9      	b.n	285e6 <__aeabi_dsub+0x1ae>
   28832:	2d00      	cmp	r5, #0
   28834:	d000      	beq.n	28838 <__aeabi_dsub+0x400>
   28836:	e096      	b.n	28966 <__aeabi_dsub+0x52e>
   28838:	0008      	movs	r0, r1
   2883a:	4310      	orrs	r0, r2
   2883c:	d100      	bne.n	28840 <__aeabi_dsub+0x408>
   2883e:	e0e2      	b.n	28a06 <__aeabi_dsub+0x5ce>
   28840:	000c      	movs	r4, r1
   28842:	0017      	movs	r7, r2
   28844:	4698      	mov	r8, r3
   28846:	4e85      	ldr	r6, [pc, #532]	; (28a5c <__aeabi_dsub+0x624>)
   28848:	e67c      	b.n	28544 <__aeabi_dsub+0x10c>
   2884a:	2500      	movs	r5, #0
   2884c:	e780      	b.n	28750 <__aeabi_dsub+0x318>
   2884e:	2100      	movs	r1, #0
   28850:	e78e      	b.n	28770 <__aeabi_dsub+0x338>
   28852:	0023      	movs	r3, r4
   28854:	4650      	mov	r0, sl
   28856:	4303      	orrs	r3, r0
   28858:	2e00      	cmp	r6, #0
   2885a:	d000      	beq.n	2885e <__aeabi_dsub+0x426>
   2885c:	e0a8      	b.n	289b0 <__aeabi_dsub+0x578>
   2885e:	2b00      	cmp	r3, #0
   28860:	d100      	bne.n	28864 <__aeabi_dsub+0x42c>
   28862:	e0de      	b.n	28a22 <__aeabi_dsub+0x5ea>
   28864:	000b      	movs	r3, r1
   28866:	4313      	orrs	r3, r2
   28868:	d100      	bne.n	2886c <__aeabi_dsub+0x434>
   2886a:	e66b      	b.n	28544 <__aeabi_dsub+0x10c>
   2886c:	4452      	add	r2, sl
   2886e:	4552      	cmp	r2, sl
   28870:	4180      	sbcs	r0, r0
   28872:	1864      	adds	r4, r4, r1
   28874:	4240      	negs	r0, r0
   28876:	1824      	adds	r4, r4, r0
   28878:	0017      	movs	r7, r2
   2887a:	0223      	lsls	r3, r4, #8
   2887c:	d400      	bmi.n	28880 <__aeabi_dsub+0x448>
   2887e:	e6fd      	b.n	2867c <__aeabi_dsub+0x244>
   28880:	4b77      	ldr	r3, [pc, #476]	; (28a60 <__aeabi_dsub+0x628>)
   28882:	4666      	mov	r6, ip
   28884:	401c      	ands	r4, r3
   28886:	e65d      	b.n	28544 <__aeabi_dsub+0x10c>
   28888:	0025      	movs	r5, r4
   2888a:	4650      	mov	r0, sl
   2888c:	4305      	orrs	r5, r0
   2888e:	2e00      	cmp	r6, #0
   28890:	d1cf      	bne.n	28832 <__aeabi_dsub+0x3fa>
   28892:	2d00      	cmp	r5, #0
   28894:	d14f      	bne.n	28936 <__aeabi_dsub+0x4fe>
   28896:	000c      	movs	r4, r1
   28898:	4314      	orrs	r4, r2
   2889a:	d100      	bne.n	2889e <__aeabi_dsub+0x466>
   2889c:	e0a0      	b.n	289e0 <__aeabi_dsub+0x5a8>
   2889e:	000c      	movs	r4, r1
   288a0:	0017      	movs	r7, r2
   288a2:	4698      	mov	r8, r3
   288a4:	e64e      	b.n	28544 <__aeabi_dsub+0x10c>
   288a6:	4666      	mov	r6, ip
   288a8:	2400      	movs	r4, #0
   288aa:	2700      	movs	r7, #0
   288ac:	e685      	b.n	285ba <__aeabi_dsub+0x182>
   288ae:	001f      	movs	r7, r3
   288b0:	0008      	movs	r0, r1
   288b2:	3f20      	subs	r7, #32
   288b4:	40f8      	lsrs	r0, r7
   288b6:	0007      	movs	r7, r0
   288b8:	2b20      	cmp	r3, #32
   288ba:	d100      	bne.n	288be <__aeabi_dsub+0x486>
   288bc:	e08e      	b.n	289dc <__aeabi_dsub+0x5a4>
   288be:	2040      	movs	r0, #64	; 0x40
   288c0:	1ac3      	subs	r3, r0, r3
   288c2:	4099      	lsls	r1, r3
   288c4:	430a      	orrs	r2, r1
   288c6:	1e51      	subs	r1, r2, #1
   288c8:	418a      	sbcs	r2, r1
   288ca:	2100      	movs	r1, #0
   288cc:	4317      	orrs	r7, r2
   288ce:	e692      	b.n	285f6 <__aeabi_dsub+0x1be>
   288d0:	2e00      	cmp	r6, #0
   288d2:	d114      	bne.n	288fe <__aeabi_dsub+0x4c6>
   288d4:	0026      	movs	r6, r4
   288d6:	4650      	mov	r0, sl
   288d8:	4306      	orrs	r6, r0
   288da:	d062      	beq.n	289a2 <__aeabi_dsub+0x56a>
   288dc:	43db      	mvns	r3, r3
   288de:	2b00      	cmp	r3, #0
   288e0:	d15c      	bne.n	2899c <__aeabi_dsub+0x564>
   288e2:	1887      	adds	r7, r0, r2
   288e4:	4297      	cmp	r7, r2
   288e6:	4192      	sbcs	r2, r2
   288e8:	1864      	adds	r4, r4, r1
   288ea:	4252      	negs	r2, r2
   288ec:	18a4      	adds	r4, r4, r2
   288ee:	4666      	mov	r6, ip
   288f0:	e687      	b.n	28602 <__aeabi_dsub+0x1ca>
   288f2:	4650      	mov	r0, sl
   288f4:	4320      	orrs	r0, r4
   288f6:	1e44      	subs	r4, r0, #1
   288f8:	41a0      	sbcs	r0, r4
   288fa:	2400      	movs	r4, #0
   288fc:	e760      	b.n	287c0 <__aeabi_dsub+0x388>
   288fe:	4e57      	ldr	r6, [pc, #348]	; (28a5c <__aeabi_dsub+0x624>)
   28900:	45b4      	cmp	ip, r6
   28902:	d04e      	beq.n	289a2 <__aeabi_dsub+0x56a>
   28904:	2680      	movs	r6, #128	; 0x80
   28906:	0436      	lsls	r6, r6, #16
   28908:	425b      	negs	r3, r3
   2890a:	4334      	orrs	r4, r6
   2890c:	2b38      	cmp	r3, #56	; 0x38
   2890e:	dd00      	ble.n	28912 <__aeabi_dsub+0x4da>
   28910:	e07f      	b.n	28a12 <__aeabi_dsub+0x5da>
   28912:	2b1f      	cmp	r3, #31
   28914:	dd00      	ble.n	28918 <__aeabi_dsub+0x4e0>
   28916:	e08b      	b.n	28a30 <__aeabi_dsub+0x5f8>
   28918:	2620      	movs	r6, #32
   2891a:	0027      	movs	r7, r4
   2891c:	4650      	mov	r0, sl
   2891e:	1af6      	subs	r6, r6, r3
   28920:	40b7      	lsls	r7, r6
   28922:	40d8      	lsrs	r0, r3
   28924:	4307      	orrs	r7, r0
   28926:	4650      	mov	r0, sl
   28928:	40b0      	lsls	r0, r6
   2892a:	1e46      	subs	r6, r0, #1
   2892c:	41b0      	sbcs	r0, r6
   2892e:	4307      	orrs	r7, r0
   28930:	40dc      	lsrs	r4, r3
   28932:	18bf      	adds	r7, r7, r2
   28934:	e7d6      	b.n	288e4 <__aeabi_dsub+0x4ac>
   28936:	000d      	movs	r5, r1
   28938:	4315      	orrs	r5, r2
   2893a:	d100      	bne.n	2893e <__aeabi_dsub+0x506>
   2893c:	e602      	b.n	28544 <__aeabi_dsub+0x10c>
   2893e:	4650      	mov	r0, sl
   28940:	1a80      	subs	r0, r0, r2
   28942:	4582      	cmp	sl, r0
   28944:	41bf      	sbcs	r7, r7
   28946:	1a65      	subs	r5, r4, r1
   28948:	427f      	negs	r7, r7
   2894a:	1bed      	subs	r5, r5, r7
   2894c:	4684      	mov	ip, r0
   2894e:	0228      	lsls	r0, r5, #8
   28950:	d400      	bmi.n	28954 <__aeabi_dsub+0x51c>
   28952:	e68d      	b.n	28670 <__aeabi_dsub+0x238>
   28954:	4650      	mov	r0, sl
   28956:	1a17      	subs	r7, r2, r0
   28958:	42ba      	cmp	r2, r7
   2895a:	4192      	sbcs	r2, r2
   2895c:	1b0c      	subs	r4, r1, r4
   2895e:	4252      	negs	r2, r2
   28960:	1aa4      	subs	r4, r4, r2
   28962:	4698      	mov	r8, r3
   28964:	e5ee      	b.n	28544 <__aeabi_dsub+0x10c>
   28966:	000d      	movs	r5, r1
   28968:	4315      	orrs	r5, r2
   2896a:	d100      	bne.n	2896e <__aeabi_dsub+0x536>
   2896c:	e76b      	b.n	28846 <__aeabi_dsub+0x40e>
   2896e:	4650      	mov	r0, sl
   28970:	0767      	lsls	r7, r4, #29
   28972:	08c0      	lsrs	r0, r0, #3
   28974:	4307      	orrs	r7, r0
   28976:	2080      	movs	r0, #128	; 0x80
   28978:	08e4      	lsrs	r4, r4, #3
   2897a:	0300      	lsls	r0, r0, #12
   2897c:	4204      	tst	r4, r0
   2897e:	d007      	beq.n	28990 <__aeabi_dsub+0x558>
   28980:	08cd      	lsrs	r5, r1, #3
   28982:	4205      	tst	r5, r0
   28984:	d104      	bne.n	28990 <__aeabi_dsub+0x558>
   28986:	002c      	movs	r4, r5
   28988:	4698      	mov	r8, r3
   2898a:	08d7      	lsrs	r7, r2, #3
   2898c:	0749      	lsls	r1, r1, #29
   2898e:	430f      	orrs	r7, r1
   28990:	0f7b      	lsrs	r3, r7, #29
   28992:	00e4      	lsls	r4, r4, #3
   28994:	431c      	orrs	r4, r3
   28996:	00ff      	lsls	r7, r7, #3
   28998:	4e30      	ldr	r6, [pc, #192]	; (28a5c <__aeabi_dsub+0x624>)
   2899a:	e5d3      	b.n	28544 <__aeabi_dsub+0x10c>
   2899c:	4e2f      	ldr	r6, [pc, #188]	; (28a5c <__aeabi_dsub+0x624>)
   2899e:	45b4      	cmp	ip, r6
   289a0:	d1b4      	bne.n	2890c <__aeabi_dsub+0x4d4>
   289a2:	000c      	movs	r4, r1
   289a4:	0017      	movs	r7, r2
   289a6:	4666      	mov	r6, ip
   289a8:	e5cc      	b.n	28544 <__aeabi_dsub+0x10c>
   289aa:	2700      	movs	r7, #0
   289ac:	2400      	movs	r4, #0
   289ae:	e5e8      	b.n	28582 <__aeabi_dsub+0x14a>
   289b0:	2b00      	cmp	r3, #0
   289b2:	d039      	beq.n	28a28 <__aeabi_dsub+0x5f0>
   289b4:	000b      	movs	r3, r1
   289b6:	4313      	orrs	r3, r2
   289b8:	d100      	bne.n	289bc <__aeabi_dsub+0x584>
   289ba:	e744      	b.n	28846 <__aeabi_dsub+0x40e>
   289bc:	08c0      	lsrs	r0, r0, #3
   289be:	0767      	lsls	r7, r4, #29
   289c0:	4307      	orrs	r7, r0
   289c2:	2080      	movs	r0, #128	; 0x80
   289c4:	08e4      	lsrs	r4, r4, #3
   289c6:	0300      	lsls	r0, r0, #12
   289c8:	4204      	tst	r4, r0
   289ca:	d0e1      	beq.n	28990 <__aeabi_dsub+0x558>
   289cc:	08cb      	lsrs	r3, r1, #3
   289ce:	4203      	tst	r3, r0
   289d0:	d1de      	bne.n	28990 <__aeabi_dsub+0x558>
   289d2:	08d7      	lsrs	r7, r2, #3
   289d4:	0749      	lsls	r1, r1, #29
   289d6:	430f      	orrs	r7, r1
   289d8:	001c      	movs	r4, r3
   289da:	e7d9      	b.n	28990 <__aeabi_dsub+0x558>
   289dc:	2100      	movs	r1, #0
   289de:	e771      	b.n	288c4 <__aeabi_dsub+0x48c>
   289e0:	2500      	movs	r5, #0
   289e2:	2700      	movs	r7, #0
   289e4:	e5e9      	b.n	285ba <__aeabi_dsub+0x182>
   289e6:	002e      	movs	r6, r5
   289e8:	0027      	movs	r7, r4
   289ea:	3e20      	subs	r6, #32
   289ec:	40f7      	lsrs	r7, r6
   289ee:	2d20      	cmp	r5, #32
   289f0:	d02f      	beq.n	28a52 <__aeabi_dsub+0x61a>
   289f2:	2640      	movs	r6, #64	; 0x40
   289f4:	1b75      	subs	r5, r6, r5
   289f6:	40ac      	lsls	r4, r5
   289f8:	4650      	mov	r0, sl
   289fa:	4320      	orrs	r0, r4
   289fc:	1e44      	subs	r4, r0, #1
   289fe:	41a0      	sbcs	r0, r4
   28a00:	2400      	movs	r4, #0
   28a02:	4338      	orrs	r0, r7
   28a04:	e6dc      	b.n	287c0 <__aeabi_dsub+0x388>
   28a06:	2480      	movs	r4, #128	; 0x80
   28a08:	2500      	movs	r5, #0
   28a0a:	0324      	lsls	r4, r4, #12
   28a0c:	4e13      	ldr	r6, [pc, #76]	; (28a5c <__aeabi_dsub+0x624>)
   28a0e:	2700      	movs	r7, #0
   28a10:	e5d3      	b.n	285ba <__aeabi_dsub+0x182>
   28a12:	4650      	mov	r0, sl
   28a14:	4320      	orrs	r0, r4
   28a16:	0007      	movs	r7, r0
   28a18:	1e78      	subs	r0, r7, #1
   28a1a:	4187      	sbcs	r7, r0
   28a1c:	2400      	movs	r4, #0
   28a1e:	18bf      	adds	r7, r7, r2
   28a20:	e760      	b.n	288e4 <__aeabi_dsub+0x4ac>
   28a22:	000c      	movs	r4, r1
   28a24:	0017      	movs	r7, r2
   28a26:	e58d      	b.n	28544 <__aeabi_dsub+0x10c>
   28a28:	000c      	movs	r4, r1
   28a2a:	0017      	movs	r7, r2
   28a2c:	4e0b      	ldr	r6, [pc, #44]	; (28a5c <__aeabi_dsub+0x624>)
   28a2e:	e589      	b.n	28544 <__aeabi_dsub+0x10c>
   28a30:	001e      	movs	r6, r3
   28a32:	0027      	movs	r7, r4
   28a34:	3e20      	subs	r6, #32
   28a36:	40f7      	lsrs	r7, r6
   28a38:	2b20      	cmp	r3, #32
   28a3a:	d00c      	beq.n	28a56 <__aeabi_dsub+0x61e>
   28a3c:	2640      	movs	r6, #64	; 0x40
   28a3e:	1af3      	subs	r3, r6, r3
   28a40:	409c      	lsls	r4, r3
   28a42:	4650      	mov	r0, sl
   28a44:	4320      	orrs	r0, r4
   28a46:	1e44      	subs	r4, r0, #1
   28a48:	41a0      	sbcs	r0, r4
   28a4a:	4307      	orrs	r7, r0
   28a4c:	2400      	movs	r4, #0
   28a4e:	18bf      	adds	r7, r7, r2
   28a50:	e748      	b.n	288e4 <__aeabi_dsub+0x4ac>
   28a52:	2400      	movs	r4, #0
   28a54:	e7d0      	b.n	289f8 <__aeabi_dsub+0x5c0>
   28a56:	2400      	movs	r4, #0
   28a58:	e7f3      	b.n	28a42 <__aeabi_dsub+0x60a>
   28a5a:	46c0      	nop			; (mov r8, r8)
   28a5c:	000007ff 	.word	0x000007ff
   28a60:	ff7fffff 	.word	0xff7fffff

00028a64 <__aeabi_dcmpun>:
   28a64:	b570      	push	{r4, r5, r6, lr}
   28a66:	4e0e      	ldr	r6, [pc, #56]	; (28aa0 <__aeabi_dcmpun+0x3c>)
   28a68:	030d      	lsls	r5, r1, #12
   28a6a:	031c      	lsls	r4, r3, #12
   28a6c:	0049      	lsls	r1, r1, #1
   28a6e:	005b      	lsls	r3, r3, #1
   28a70:	0b2d      	lsrs	r5, r5, #12
   28a72:	0d49      	lsrs	r1, r1, #21
   28a74:	0b24      	lsrs	r4, r4, #12
   28a76:	0d5b      	lsrs	r3, r3, #21
   28a78:	42b1      	cmp	r1, r6
   28a7a:	d004      	beq.n	28a86 <__aeabi_dcmpun+0x22>
   28a7c:	4908      	ldr	r1, [pc, #32]	; (28aa0 <__aeabi_dcmpun+0x3c>)
   28a7e:	2000      	movs	r0, #0
   28a80:	428b      	cmp	r3, r1
   28a82:	d008      	beq.n	28a96 <__aeabi_dcmpun+0x32>
   28a84:	bd70      	pop	{r4, r5, r6, pc}
   28a86:	4305      	orrs	r5, r0
   28a88:	2001      	movs	r0, #1
   28a8a:	2d00      	cmp	r5, #0
   28a8c:	d1fa      	bne.n	28a84 <__aeabi_dcmpun+0x20>
   28a8e:	4904      	ldr	r1, [pc, #16]	; (28aa0 <__aeabi_dcmpun+0x3c>)
   28a90:	2000      	movs	r0, #0
   28a92:	428b      	cmp	r3, r1
   28a94:	d1f6      	bne.n	28a84 <__aeabi_dcmpun+0x20>
   28a96:	4314      	orrs	r4, r2
   28a98:	0020      	movs	r0, r4
   28a9a:	1e44      	subs	r4, r0, #1
   28a9c:	41a0      	sbcs	r0, r4
   28a9e:	e7f1      	b.n	28a84 <__aeabi_dcmpun+0x20>
   28aa0:	000007ff 	.word	0x000007ff

00028aa4 <__aeabi_d2iz>:
   28aa4:	b530      	push	{r4, r5, lr}
   28aa6:	4d13      	ldr	r5, [pc, #76]	; (28af4 <__aeabi_d2iz+0x50>)
   28aa8:	030a      	lsls	r2, r1, #12
   28aaa:	004b      	lsls	r3, r1, #1
   28aac:	0b12      	lsrs	r2, r2, #12
   28aae:	0d5b      	lsrs	r3, r3, #21
   28ab0:	0fc9      	lsrs	r1, r1, #31
   28ab2:	2400      	movs	r4, #0
   28ab4:	42ab      	cmp	r3, r5
   28ab6:	dd10      	ble.n	28ada <__aeabi_d2iz+0x36>
   28ab8:	4c0f      	ldr	r4, [pc, #60]	; (28af8 <__aeabi_d2iz+0x54>)
   28aba:	42a3      	cmp	r3, r4
   28abc:	dc0f      	bgt.n	28ade <__aeabi_d2iz+0x3a>
   28abe:	2480      	movs	r4, #128	; 0x80
   28ac0:	4d0e      	ldr	r5, [pc, #56]	; (28afc <__aeabi_d2iz+0x58>)
   28ac2:	0364      	lsls	r4, r4, #13
   28ac4:	4322      	orrs	r2, r4
   28ac6:	1aed      	subs	r5, r5, r3
   28ac8:	2d1f      	cmp	r5, #31
   28aca:	dd0b      	ble.n	28ae4 <__aeabi_d2iz+0x40>
   28acc:	480c      	ldr	r0, [pc, #48]	; (28b00 <__aeabi_d2iz+0x5c>)
   28ace:	1ac3      	subs	r3, r0, r3
   28ad0:	40da      	lsrs	r2, r3
   28ad2:	4254      	negs	r4, r2
   28ad4:	2900      	cmp	r1, #0
   28ad6:	d100      	bne.n	28ada <__aeabi_d2iz+0x36>
   28ad8:	0014      	movs	r4, r2
   28ada:	0020      	movs	r0, r4
   28adc:	bd30      	pop	{r4, r5, pc}
   28ade:	4b09      	ldr	r3, [pc, #36]	; (28b04 <__aeabi_d2iz+0x60>)
   28ae0:	18cc      	adds	r4, r1, r3
   28ae2:	e7fa      	b.n	28ada <__aeabi_d2iz+0x36>
   28ae4:	4c08      	ldr	r4, [pc, #32]	; (28b08 <__aeabi_d2iz+0x64>)
   28ae6:	40e8      	lsrs	r0, r5
   28ae8:	46a4      	mov	ip, r4
   28aea:	4463      	add	r3, ip
   28aec:	409a      	lsls	r2, r3
   28aee:	4302      	orrs	r2, r0
   28af0:	e7ef      	b.n	28ad2 <__aeabi_d2iz+0x2e>
   28af2:	46c0      	nop			; (mov r8, r8)
   28af4:	000003fe 	.word	0x000003fe
   28af8:	0000041d 	.word	0x0000041d
   28afc:	00000433 	.word	0x00000433
   28b00:	00000413 	.word	0x00000413
   28b04:	7fffffff 	.word	0x7fffffff
   28b08:	fffffbed 	.word	0xfffffbed

00028b0c <__aeabi_i2d>:
   28b0c:	b570      	push	{r4, r5, r6, lr}
   28b0e:	2800      	cmp	r0, #0
   28b10:	d030      	beq.n	28b74 <__aeabi_i2d+0x68>
   28b12:	17c3      	asrs	r3, r0, #31
   28b14:	18c4      	adds	r4, r0, r3
   28b16:	405c      	eors	r4, r3
   28b18:	0fc5      	lsrs	r5, r0, #31
   28b1a:	0020      	movs	r0, r4
   28b1c:	f000 f8c2 	bl	28ca4 <__clzsi2>
   28b20:	4b17      	ldr	r3, [pc, #92]	; (28b80 <__aeabi_i2d+0x74>)
   28b22:	4a18      	ldr	r2, [pc, #96]	; (28b84 <__aeabi_i2d+0x78>)
   28b24:	1a1b      	subs	r3, r3, r0
   28b26:	1ad2      	subs	r2, r2, r3
   28b28:	2a1f      	cmp	r2, #31
   28b2a:	dd18      	ble.n	28b5e <__aeabi_i2d+0x52>
   28b2c:	4a16      	ldr	r2, [pc, #88]	; (28b88 <__aeabi_i2d+0x7c>)
   28b2e:	1ad2      	subs	r2, r2, r3
   28b30:	4094      	lsls	r4, r2
   28b32:	2200      	movs	r2, #0
   28b34:	0324      	lsls	r4, r4, #12
   28b36:	055b      	lsls	r3, r3, #21
   28b38:	0b24      	lsrs	r4, r4, #12
   28b3a:	0d5b      	lsrs	r3, r3, #21
   28b3c:	2100      	movs	r1, #0
   28b3e:	0010      	movs	r0, r2
   28b40:	0324      	lsls	r4, r4, #12
   28b42:	0d0a      	lsrs	r2, r1, #20
   28b44:	0b24      	lsrs	r4, r4, #12
   28b46:	0512      	lsls	r2, r2, #20
   28b48:	4322      	orrs	r2, r4
   28b4a:	4c10      	ldr	r4, [pc, #64]	; (28b8c <__aeabi_i2d+0x80>)
   28b4c:	051b      	lsls	r3, r3, #20
   28b4e:	4022      	ands	r2, r4
   28b50:	4313      	orrs	r3, r2
   28b52:	005b      	lsls	r3, r3, #1
   28b54:	07ed      	lsls	r5, r5, #31
   28b56:	085b      	lsrs	r3, r3, #1
   28b58:	432b      	orrs	r3, r5
   28b5a:	0019      	movs	r1, r3
   28b5c:	bd70      	pop	{r4, r5, r6, pc}
   28b5e:	0021      	movs	r1, r4
   28b60:	4091      	lsls	r1, r2
   28b62:	000a      	movs	r2, r1
   28b64:	210b      	movs	r1, #11
   28b66:	1a08      	subs	r0, r1, r0
   28b68:	40c4      	lsrs	r4, r0
   28b6a:	055b      	lsls	r3, r3, #21
   28b6c:	0324      	lsls	r4, r4, #12
   28b6e:	0b24      	lsrs	r4, r4, #12
   28b70:	0d5b      	lsrs	r3, r3, #21
   28b72:	e7e3      	b.n	28b3c <__aeabi_i2d+0x30>
   28b74:	2500      	movs	r5, #0
   28b76:	2300      	movs	r3, #0
   28b78:	2400      	movs	r4, #0
   28b7a:	2200      	movs	r2, #0
   28b7c:	e7de      	b.n	28b3c <__aeabi_i2d+0x30>
   28b7e:	46c0      	nop			; (mov r8, r8)
   28b80:	0000041e 	.word	0x0000041e
   28b84:	00000433 	.word	0x00000433
   28b88:	00000413 	.word	0x00000413
   28b8c:	800fffff 	.word	0x800fffff

00028b90 <__aeabi_ui2d>:
   28b90:	b510      	push	{r4, lr}
   28b92:	1e04      	subs	r4, r0, #0
   28b94:	d028      	beq.n	28be8 <__aeabi_ui2d+0x58>
   28b96:	f000 f885 	bl	28ca4 <__clzsi2>
   28b9a:	4b15      	ldr	r3, [pc, #84]	; (28bf0 <__aeabi_ui2d+0x60>)
   28b9c:	4a15      	ldr	r2, [pc, #84]	; (28bf4 <__aeabi_ui2d+0x64>)
   28b9e:	1a1b      	subs	r3, r3, r0
   28ba0:	1ad2      	subs	r2, r2, r3
   28ba2:	2a1f      	cmp	r2, #31
   28ba4:	dd15      	ble.n	28bd2 <__aeabi_ui2d+0x42>
   28ba6:	4a14      	ldr	r2, [pc, #80]	; (28bf8 <__aeabi_ui2d+0x68>)
   28ba8:	1ad2      	subs	r2, r2, r3
   28baa:	4094      	lsls	r4, r2
   28bac:	2200      	movs	r2, #0
   28bae:	0324      	lsls	r4, r4, #12
   28bb0:	055b      	lsls	r3, r3, #21
   28bb2:	0b24      	lsrs	r4, r4, #12
   28bb4:	0d5b      	lsrs	r3, r3, #21
   28bb6:	2100      	movs	r1, #0
   28bb8:	0010      	movs	r0, r2
   28bba:	0324      	lsls	r4, r4, #12
   28bbc:	0d0a      	lsrs	r2, r1, #20
   28bbe:	0b24      	lsrs	r4, r4, #12
   28bc0:	0512      	lsls	r2, r2, #20
   28bc2:	4322      	orrs	r2, r4
   28bc4:	4c0d      	ldr	r4, [pc, #52]	; (28bfc <__aeabi_ui2d+0x6c>)
   28bc6:	051b      	lsls	r3, r3, #20
   28bc8:	4022      	ands	r2, r4
   28bca:	4313      	orrs	r3, r2
   28bcc:	005b      	lsls	r3, r3, #1
   28bce:	0859      	lsrs	r1, r3, #1
   28bd0:	bd10      	pop	{r4, pc}
   28bd2:	0021      	movs	r1, r4
   28bd4:	4091      	lsls	r1, r2
   28bd6:	000a      	movs	r2, r1
   28bd8:	210b      	movs	r1, #11
   28bda:	1a08      	subs	r0, r1, r0
   28bdc:	40c4      	lsrs	r4, r0
   28bde:	055b      	lsls	r3, r3, #21
   28be0:	0324      	lsls	r4, r4, #12
   28be2:	0b24      	lsrs	r4, r4, #12
   28be4:	0d5b      	lsrs	r3, r3, #21
   28be6:	e7e6      	b.n	28bb6 <__aeabi_ui2d+0x26>
   28be8:	2300      	movs	r3, #0
   28bea:	2400      	movs	r4, #0
   28bec:	2200      	movs	r2, #0
   28bee:	e7e2      	b.n	28bb6 <__aeabi_ui2d+0x26>
   28bf0:	0000041e 	.word	0x0000041e
   28bf4:	00000433 	.word	0x00000433
   28bf8:	00000413 	.word	0x00000413
   28bfc:	800fffff 	.word	0x800fffff

00028c00 <__aeabi_f2d>:
   28c00:	0041      	lsls	r1, r0, #1
   28c02:	0e09      	lsrs	r1, r1, #24
   28c04:	1c4b      	adds	r3, r1, #1
   28c06:	b570      	push	{r4, r5, r6, lr}
   28c08:	b2db      	uxtb	r3, r3
   28c0a:	0246      	lsls	r6, r0, #9
   28c0c:	0a75      	lsrs	r5, r6, #9
   28c0e:	0fc4      	lsrs	r4, r0, #31
   28c10:	2b01      	cmp	r3, #1
   28c12:	dd14      	ble.n	28c3e <__aeabi_f2d+0x3e>
   28c14:	23e0      	movs	r3, #224	; 0xe0
   28c16:	009b      	lsls	r3, r3, #2
   28c18:	076d      	lsls	r5, r5, #29
   28c1a:	0b36      	lsrs	r6, r6, #12
   28c1c:	18cb      	adds	r3, r1, r3
   28c1e:	2100      	movs	r1, #0
   28c20:	0d0a      	lsrs	r2, r1, #20
   28c22:	0028      	movs	r0, r5
   28c24:	0512      	lsls	r2, r2, #20
   28c26:	4d1c      	ldr	r5, [pc, #112]	; (28c98 <__aeabi_f2d+0x98>)
   28c28:	4332      	orrs	r2, r6
   28c2a:	055b      	lsls	r3, r3, #21
   28c2c:	402a      	ands	r2, r5
   28c2e:	085b      	lsrs	r3, r3, #1
   28c30:	4313      	orrs	r3, r2
   28c32:	005b      	lsls	r3, r3, #1
   28c34:	07e4      	lsls	r4, r4, #31
   28c36:	085b      	lsrs	r3, r3, #1
   28c38:	4323      	orrs	r3, r4
   28c3a:	0019      	movs	r1, r3
   28c3c:	bd70      	pop	{r4, r5, r6, pc}
   28c3e:	2900      	cmp	r1, #0
   28c40:	d114      	bne.n	28c6c <__aeabi_f2d+0x6c>
   28c42:	2d00      	cmp	r5, #0
   28c44:	d01e      	beq.n	28c84 <__aeabi_f2d+0x84>
   28c46:	0028      	movs	r0, r5
   28c48:	f000 f82c 	bl	28ca4 <__clzsi2>
   28c4c:	280a      	cmp	r0, #10
   28c4e:	dc1c      	bgt.n	28c8a <__aeabi_f2d+0x8a>
   28c50:	230b      	movs	r3, #11
   28c52:	002a      	movs	r2, r5
   28c54:	1a1b      	subs	r3, r3, r0
   28c56:	40da      	lsrs	r2, r3
   28c58:	0003      	movs	r3, r0
   28c5a:	3315      	adds	r3, #21
   28c5c:	409d      	lsls	r5, r3
   28c5e:	4b0f      	ldr	r3, [pc, #60]	; (28c9c <__aeabi_f2d+0x9c>)
   28c60:	0312      	lsls	r2, r2, #12
   28c62:	1a1b      	subs	r3, r3, r0
   28c64:	055b      	lsls	r3, r3, #21
   28c66:	0b16      	lsrs	r6, r2, #12
   28c68:	0d5b      	lsrs	r3, r3, #21
   28c6a:	e7d8      	b.n	28c1e <__aeabi_f2d+0x1e>
   28c6c:	2d00      	cmp	r5, #0
   28c6e:	d006      	beq.n	28c7e <__aeabi_f2d+0x7e>
   28c70:	0b32      	lsrs	r2, r6, #12
   28c72:	2680      	movs	r6, #128	; 0x80
   28c74:	0336      	lsls	r6, r6, #12
   28c76:	076d      	lsls	r5, r5, #29
   28c78:	4316      	orrs	r6, r2
   28c7a:	4b09      	ldr	r3, [pc, #36]	; (28ca0 <__aeabi_f2d+0xa0>)
   28c7c:	e7cf      	b.n	28c1e <__aeabi_f2d+0x1e>
   28c7e:	4b08      	ldr	r3, [pc, #32]	; (28ca0 <__aeabi_f2d+0xa0>)
   28c80:	2600      	movs	r6, #0
   28c82:	e7cc      	b.n	28c1e <__aeabi_f2d+0x1e>
   28c84:	2300      	movs	r3, #0
   28c86:	2600      	movs	r6, #0
   28c88:	e7c9      	b.n	28c1e <__aeabi_f2d+0x1e>
   28c8a:	0003      	movs	r3, r0
   28c8c:	002a      	movs	r2, r5
   28c8e:	3b0b      	subs	r3, #11
   28c90:	409a      	lsls	r2, r3
   28c92:	2500      	movs	r5, #0
   28c94:	e7e3      	b.n	28c5e <__aeabi_f2d+0x5e>
   28c96:	46c0      	nop			; (mov r8, r8)
   28c98:	800fffff 	.word	0x800fffff
   28c9c:	00000389 	.word	0x00000389
   28ca0:	000007ff 	.word	0x000007ff

00028ca4 <__clzsi2>:
   28ca4:	211c      	movs	r1, #28
   28ca6:	2301      	movs	r3, #1
   28ca8:	041b      	lsls	r3, r3, #16
   28caa:	4298      	cmp	r0, r3
   28cac:	d301      	bcc.n	28cb2 <__clzsi2+0xe>
   28cae:	0c00      	lsrs	r0, r0, #16
   28cb0:	3910      	subs	r1, #16
   28cb2:	0a1b      	lsrs	r3, r3, #8
   28cb4:	4298      	cmp	r0, r3
   28cb6:	d301      	bcc.n	28cbc <__clzsi2+0x18>
   28cb8:	0a00      	lsrs	r0, r0, #8
   28cba:	3908      	subs	r1, #8
   28cbc:	091b      	lsrs	r3, r3, #4
   28cbe:	4298      	cmp	r0, r3
   28cc0:	d301      	bcc.n	28cc6 <__clzsi2+0x22>
   28cc2:	0900      	lsrs	r0, r0, #4
   28cc4:	3904      	subs	r1, #4
   28cc6:	a202      	add	r2, pc, #8	; (adr r2, 28cd0 <__clzsi2+0x2c>)
   28cc8:	5c10      	ldrb	r0, [r2, r0]
   28cca:	1840      	adds	r0, r0, r1
   28ccc:	4770      	bx	lr
   28cce:	46c0      	nop			; (mov r8, r8)
   28cd0:	02020304 	.word	0x02020304
   28cd4:	01010101 	.word	0x01010101
	...

00028ce0 <__clzdi2>:
   28ce0:	b510      	push	{r4, lr}
   28ce2:	2900      	cmp	r1, #0
   28ce4:	d103      	bne.n	28cee <__clzdi2+0xe>
   28ce6:	f7ff ffdd 	bl	28ca4 <__clzsi2>
   28cea:	3020      	adds	r0, #32
   28cec:	e002      	b.n	28cf4 <__clzdi2+0x14>
   28cee:	1c08      	adds	r0, r1, #0
   28cf0:	f7ff ffd8 	bl	28ca4 <__clzsi2>
   28cf4:	bd10      	pop	{r4, pc}
   28cf6:	46c0      	nop			; (mov r8, r8)

00028cf8 <atoi>:
   28cf8:	b510      	push	{r4, lr}
   28cfa:	220a      	movs	r2, #10
   28cfc:	2100      	movs	r1, #0
   28cfe:	f000 fadd 	bl	292bc <strtol>
   28d02:	bd10      	pop	{r4, pc}

00028d04 <calloc>:
   28d04:	b510      	push	{r4, lr}
   28d06:	4b03      	ldr	r3, [pc, #12]	; (28d14 <calloc+0x10>)
   28d08:	000a      	movs	r2, r1
   28d0a:	0001      	movs	r1, r0
   28d0c:	6818      	ldr	r0, [r3, #0]
   28d0e:	f000 f888 	bl	28e22 <_calloc_r>
   28d12:	bd10      	pop	{r4, pc}
   28d14:	2000002c 	.word	0x2000002c

00028d18 <__errno>:
   28d18:	4b01      	ldr	r3, [pc, #4]	; (28d20 <__errno+0x8>)
   28d1a:	6818      	ldr	r0, [r3, #0]
   28d1c:	4770      	bx	lr
   28d1e:	46c0      	nop			; (mov r8, r8)
   28d20:	2000002c 	.word	0x2000002c

00028d24 <__libc_init_array>:
   28d24:	b570      	push	{r4, r5, r6, lr}
   28d26:	2600      	movs	r6, #0
   28d28:	4d0c      	ldr	r5, [pc, #48]	; (28d5c <__libc_init_array+0x38>)
   28d2a:	4c0d      	ldr	r4, [pc, #52]	; (28d60 <__libc_init_array+0x3c>)
   28d2c:	1b64      	subs	r4, r4, r5
   28d2e:	10a4      	asrs	r4, r4, #2
   28d30:	42a6      	cmp	r6, r4
   28d32:	d109      	bne.n	28d48 <__libc_init_array+0x24>
   28d34:	2600      	movs	r6, #0
   28d36:	f002 f909 	bl	2af4c <_init>
   28d3a:	4d0a      	ldr	r5, [pc, #40]	; (28d64 <__libc_init_array+0x40>)
   28d3c:	4c0a      	ldr	r4, [pc, #40]	; (28d68 <__libc_init_array+0x44>)
   28d3e:	1b64      	subs	r4, r4, r5
   28d40:	10a4      	asrs	r4, r4, #2
   28d42:	42a6      	cmp	r6, r4
   28d44:	d105      	bne.n	28d52 <__libc_init_array+0x2e>
   28d46:	bd70      	pop	{r4, r5, r6, pc}
   28d48:	00b3      	lsls	r3, r6, #2
   28d4a:	58eb      	ldr	r3, [r5, r3]
   28d4c:	4798      	blx	r3
   28d4e:	3601      	adds	r6, #1
   28d50:	e7ee      	b.n	28d30 <__libc_init_array+0xc>
   28d52:	00b3      	lsls	r3, r6, #2
   28d54:	58eb      	ldr	r3, [r5, r3]
   28d56:	4798      	blx	r3
   28d58:	3601      	adds	r6, #1
   28d5a:	e7f2      	b.n	28d42 <__libc_init_array+0x1e>
   28d5c:	0002af58 	.word	0x0002af58
   28d60:	0002af58 	.word	0x0002af58
   28d64:	0002af58 	.word	0x0002af58
   28d68:	0002af5c 	.word	0x0002af5c

00028d6c <__locale_ctype_ptr_l>:
   28d6c:	30ec      	adds	r0, #236	; 0xec
   28d6e:	6800      	ldr	r0, [r0, #0]
   28d70:	4770      	bx	lr
	...

00028d74 <__locale_ctype_ptr>:
   28d74:	4b04      	ldr	r3, [pc, #16]	; (28d88 <__locale_ctype_ptr+0x14>)
   28d76:	681b      	ldr	r3, [r3, #0]
   28d78:	6a1b      	ldr	r3, [r3, #32]
   28d7a:	2b00      	cmp	r3, #0
   28d7c:	d100      	bne.n	28d80 <__locale_ctype_ptr+0xc>
   28d7e:	4b03      	ldr	r3, [pc, #12]	; (28d8c <__locale_ctype_ptr+0x18>)
   28d80:	33ec      	adds	r3, #236	; 0xec
   28d82:	6818      	ldr	r0, [r3, #0]
   28d84:	4770      	bx	lr
   28d86:	46c0      	nop			; (mov r8, r8)
   28d88:	2000002c 	.word	0x2000002c
   28d8c:	20000090 	.word	0x20000090

00028d90 <malloc>:
   28d90:	b510      	push	{r4, lr}
   28d92:	4b03      	ldr	r3, [pc, #12]	; (28da0 <malloc+0x10>)
   28d94:	0001      	movs	r1, r0
   28d96:	6818      	ldr	r0, [r3, #0]
   28d98:	f000 f89c 	bl	28ed4 <_malloc_r>
   28d9c:	bd10      	pop	{r4, pc}
   28d9e:	46c0      	nop			; (mov r8, r8)
   28da0:	2000002c 	.word	0x2000002c

00028da4 <free>:
   28da4:	b510      	push	{r4, lr}
   28da6:	4b03      	ldr	r3, [pc, #12]	; (28db4 <free+0x10>)
   28da8:	0001      	movs	r1, r0
   28daa:	6818      	ldr	r0, [r3, #0]
   28dac:	f000 f848 	bl	28e40 <_free_r>
   28db0:	bd10      	pop	{r4, pc}
   28db2:	46c0      	nop			; (mov r8, r8)
   28db4:	2000002c 	.word	0x2000002c

00028db8 <__ascii_mbtowc>:
   28db8:	b082      	sub	sp, #8
   28dba:	2900      	cmp	r1, #0
   28dbc:	d100      	bne.n	28dc0 <__ascii_mbtowc+0x8>
   28dbe:	a901      	add	r1, sp, #4
   28dc0:	1e10      	subs	r0, r2, #0
   28dc2:	d006      	beq.n	28dd2 <__ascii_mbtowc+0x1a>
   28dc4:	2b00      	cmp	r3, #0
   28dc6:	d006      	beq.n	28dd6 <__ascii_mbtowc+0x1e>
   28dc8:	7813      	ldrb	r3, [r2, #0]
   28dca:	600b      	str	r3, [r1, #0]
   28dcc:	7810      	ldrb	r0, [r2, #0]
   28dce:	1e43      	subs	r3, r0, #1
   28dd0:	4198      	sbcs	r0, r3
   28dd2:	b002      	add	sp, #8
   28dd4:	4770      	bx	lr
   28dd6:	2002      	movs	r0, #2
   28dd8:	4240      	negs	r0, r0
   28dda:	e7fa      	b.n	28dd2 <__ascii_mbtowc+0x1a>

00028ddc <memcpy>:
   28ddc:	2300      	movs	r3, #0
   28dde:	b510      	push	{r4, lr}
   28de0:	429a      	cmp	r2, r3
   28de2:	d100      	bne.n	28de6 <memcpy+0xa>
   28de4:	bd10      	pop	{r4, pc}
   28de6:	5ccc      	ldrb	r4, [r1, r3]
   28de8:	54c4      	strb	r4, [r0, r3]
   28dea:	3301      	adds	r3, #1
   28dec:	e7f8      	b.n	28de0 <memcpy+0x4>

00028dee <memmove>:
   28dee:	b510      	push	{r4, lr}
   28df0:	4288      	cmp	r0, r1
   28df2:	d902      	bls.n	28dfa <memmove+0xc>
   28df4:	188b      	adds	r3, r1, r2
   28df6:	4298      	cmp	r0, r3
   28df8:	d308      	bcc.n	28e0c <memmove+0x1e>
   28dfa:	2300      	movs	r3, #0
   28dfc:	429a      	cmp	r2, r3
   28dfe:	d007      	beq.n	28e10 <memmove+0x22>
   28e00:	5ccc      	ldrb	r4, [r1, r3]
   28e02:	54c4      	strb	r4, [r0, r3]
   28e04:	3301      	adds	r3, #1
   28e06:	e7f9      	b.n	28dfc <memmove+0xe>
   28e08:	5c8b      	ldrb	r3, [r1, r2]
   28e0a:	5483      	strb	r3, [r0, r2]
   28e0c:	3a01      	subs	r2, #1
   28e0e:	d2fb      	bcs.n	28e08 <memmove+0x1a>
   28e10:	bd10      	pop	{r4, pc}

00028e12 <memset>:
   28e12:	0003      	movs	r3, r0
   28e14:	1882      	adds	r2, r0, r2
   28e16:	4293      	cmp	r3, r2
   28e18:	d100      	bne.n	28e1c <memset+0xa>
   28e1a:	4770      	bx	lr
   28e1c:	7019      	strb	r1, [r3, #0]
   28e1e:	3301      	adds	r3, #1
   28e20:	e7f9      	b.n	28e16 <memset+0x4>

00028e22 <_calloc_r>:
   28e22:	434a      	muls	r2, r1
   28e24:	b570      	push	{r4, r5, r6, lr}
   28e26:	0011      	movs	r1, r2
   28e28:	0014      	movs	r4, r2
   28e2a:	f000 f853 	bl	28ed4 <_malloc_r>
   28e2e:	1e05      	subs	r5, r0, #0
   28e30:	d003      	beq.n	28e3a <_calloc_r+0x18>
   28e32:	0022      	movs	r2, r4
   28e34:	2100      	movs	r1, #0
   28e36:	f7ff ffec 	bl	28e12 <memset>
   28e3a:	0028      	movs	r0, r5
   28e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

00028e40 <_free_r>:
   28e40:	b570      	push	{r4, r5, r6, lr}
   28e42:	0005      	movs	r5, r0
   28e44:	2900      	cmp	r1, #0
   28e46:	d010      	beq.n	28e6a <_free_r+0x2a>
   28e48:	1f0c      	subs	r4, r1, #4
   28e4a:	6823      	ldr	r3, [r4, #0]
   28e4c:	2b00      	cmp	r3, #0
   28e4e:	da00      	bge.n	28e52 <_free_r+0x12>
   28e50:	18e4      	adds	r4, r4, r3
   28e52:	0028      	movs	r0, r5
   28e54:	f000 fab4 	bl	293c0 <__malloc_lock>
   28e58:	4a1d      	ldr	r2, [pc, #116]	; (28ed0 <_free_r+0x90>)
   28e5a:	6813      	ldr	r3, [r2, #0]
   28e5c:	2b00      	cmp	r3, #0
   28e5e:	d105      	bne.n	28e6c <_free_r+0x2c>
   28e60:	6063      	str	r3, [r4, #4]
   28e62:	6014      	str	r4, [r2, #0]
   28e64:	0028      	movs	r0, r5
   28e66:	f000 faac 	bl	293c2 <__malloc_unlock>
   28e6a:	bd70      	pop	{r4, r5, r6, pc}
   28e6c:	42a3      	cmp	r3, r4
   28e6e:	d909      	bls.n	28e84 <_free_r+0x44>
   28e70:	6821      	ldr	r1, [r4, #0]
   28e72:	1860      	adds	r0, r4, r1
   28e74:	4283      	cmp	r3, r0
   28e76:	d1f3      	bne.n	28e60 <_free_r+0x20>
   28e78:	6818      	ldr	r0, [r3, #0]
   28e7a:	685b      	ldr	r3, [r3, #4]
   28e7c:	1841      	adds	r1, r0, r1
   28e7e:	6021      	str	r1, [r4, #0]
   28e80:	e7ee      	b.n	28e60 <_free_r+0x20>
   28e82:	0013      	movs	r3, r2
   28e84:	685a      	ldr	r2, [r3, #4]
   28e86:	2a00      	cmp	r2, #0
   28e88:	d001      	beq.n	28e8e <_free_r+0x4e>
   28e8a:	42a2      	cmp	r2, r4
   28e8c:	d9f9      	bls.n	28e82 <_free_r+0x42>
   28e8e:	6819      	ldr	r1, [r3, #0]
   28e90:	1858      	adds	r0, r3, r1
   28e92:	42a0      	cmp	r0, r4
   28e94:	d10b      	bne.n	28eae <_free_r+0x6e>
   28e96:	6820      	ldr	r0, [r4, #0]
   28e98:	1809      	adds	r1, r1, r0
   28e9a:	1858      	adds	r0, r3, r1
   28e9c:	6019      	str	r1, [r3, #0]
   28e9e:	4282      	cmp	r2, r0
   28ea0:	d1e0      	bne.n	28e64 <_free_r+0x24>
   28ea2:	6810      	ldr	r0, [r2, #0]
   28ea4:	6852      	ldr	r2, [r2, #4]
   28ea6:	1841      	adds	r1, r0, r1
   28ea8:	6019      	str	r1, [r3, #0]
   28eaa:	605a      	str	r2, [r3, #4]
   28eac:	e7da      	b.n	28e64 <_free_r+0x24>
   28eae:	42a0      	cmp	r0, r4
   28eb0:	d902      	bls.n	28eb8 <_free_r+0x78>
   28eb2:	230c      	movs	r3, #12
   28eb4:	602b      	str	r3, [r5, #0]
   28eb6:	e7d5      	b.n	28e64 <_free_r+0x24>
   28eb8:	6821      	ldr	r1, [r4, #0]
   28eba:	1860      	adds	r0, r4, r1
   28ebc:	4282      	cmp	r2, r0
   28ebe:	d103      	bne.n	28ec8 <_free_r+0x88>
   28ec0:	6810      	ldr	r0, [r2, #0]
   28ec2:	6852      	ldr	r2, [r2, #4]
   28ec4:	1841      	adds	r1, r0, r1
   28ec6:	6021      	str	r1, [r4, #0]
   28ec8:	6062      	str	r2, [r4, #4]
   28eca:	605c      	str	r4, [r3, #4]
   28ecc:	e7ca      	b.n	28e64 <_free_r+0x24>
   28ece:	46c0      	nop			; (mov r8, r8)
   28ed0:	20000514 	.word	0x20000514

00028ed4 <_malloc_r>:
   28ed4:	2303      	movs	r3, #3
   28ed6:	b570      	push	{r4, r5, r6, lr}
   28ed8:	1ccd      	adds	r5, r1, #3
   28eda:	439d      	bics	r5, r3
   28edc:	3508      	adds	r5, #8
   28ede:	0006      	movs	r6, r0
   28ee0:	2d0c      	cmp	r5, #12
   28ee2:	d21e      	bcs.n	28f22 <_malloc_r+0x4e>
   28ee4:	250c      	movs	r5, #12
   28ee6:	42a9      	cmp	r1, r5
   28ee8:	d81d      	bhi.n	28f26 <_malloc_r+0x52>
   28eea:	0030      	movs	r0, r6
   28eec:	f000 fa68 	bl	293c0 <__malloc_lock>
   28ef0:	4a25      	ldr	r2, [pc, #148]	; (28f88 <_malloc_r+0xb4>)
   28ef2:	6814      	ldr	r4, [r2, #0]
   28ef4:	0021      	movs	r1, r4
   28ef6:	2900      	cmp	r1, #0
   28ef8:	d119      	bne.n	28f2e <_malloc_r+0x5a>
   28efa:	4c24      	ldr	r4, [pc, #144]	; (28f8c <_malloc_r+0xb8>)
   28efc:	6823      	ldr	r3, [r4, #0]
   28efe:	2b00      	cmp	r3, #0
   28f00:	d103      	bne.n	28f0a <_malloc_r+0x36>
   28f02:	0030      	movs	r0, r6
   28f04:	f000 f844 	bl	28f90 <_sbrk_r>
   28f08:	6020      	str	r0, [r4, #0]
   28f0a:	0029      	movs	r1, r5
   28f0c:	0030      	movs	r0, r6
   28f0e:	f000 f83f 	bl	28f90 <_sbrk_r>
   28f12:	1c43      	adds	r3, r0, #1
   28f14:	d12c      	bne.n	28f70 <_malloc_r+0x9c>
   28f16:	230c      	movs	r3, #12
   28f18:	0030      	movs	r0, r6
   28f1a:	6033      	str	r3, [r6, #0]
   28f1c:	f000 fa51 	bl	293c2 <__malloc_unlock>
   28f20:	e003      	b.n	28f2a <_malloc_r+0x56>
   28f22:	2d00      	cmp	r5, #0
   28f24:	dadf      	bge.n	28ee6 <_malloc_r+0x12>
   28f26:	230c      	movs	r3, #12
   28f28:	6033      	str	r3, [r6, #0]
   28f2a:	2000      	movs	r0, #0
   28f2c:	bd70      	pop	{r4, r5, r6, pc}
   28f2e:	680b      	ldr	r3, [r1, #0]
   28f30:	1b5b      	subs	r3, r3, r5
   28f32:	d41a      	bmi.n	28f6a <_malloc_r+0x96>
   28f34:	2b0b      	cmp	r3, #11
   28f36:	d903      	bls.n	28f40 <_malloc_r+0x6c>
   28f38:	600b      	str	r3, [r1, #0]
   28f3a:	18cc      	adds	r4, r1, r3
   28f3c:	6025      	str	r5, [r4, #0]
   28f3e:	e003      	b.n	28f48 <_malloc_r+0x74>
   28f40:	428c      	cmp	r4, r1
   28f42:	d10e      	bne.n	28f62 <_malloc_r+0x8e>
   28f44:	6863      	ldr	r3, [r4, #4]
   28f46:	6013      	str	r3, [r2, #0]
   28f48:	0030      	movs	r0, r6
   28f4a:	f000 fa3a 	bl	293c2 <__malloc_unlock>
   28f4e:	0020      	movs	r0, r4
   28f50:	2207      	movs	r2, #7
   28f52:	300b      	adds	r0, #11
   28f54:	1d23      	adds	r3, r4, #4
   28f56:	4390      	bics	r0, r2
   28f58:	1ac3      	subs	r3, r0, r3
   28f5a:	d0e7      	beq.n	28f2c <_malloc_r+0x58>
   28f5c:	425a      	negs	r2, r3
   28f5e:	50e2      	str	r2, [r4, r3]
   28f60:	e7e4      	b.n	28f2c <_malloc_r+0x58>
   28f62:	684b      	ldr	r3, [r1, #4]
   28f64:	6063      	str	r3, [r4, #4]
   28f66:	000c      	movs	r4, r1
   28f68:	e7ee      	b.n	28f48 <_malloc_r+0x74>
   28f6a:	000c      	movs	r4, r1
   28f6c:	6849      	ldr	r1, [r1, #4]
   28f6e:	e7c2      	b.n	28ef6 <_malloc_r+0x22>
   28f70:	2303      	movs	r3, #3
   28f72:	1cc4      	adds	r4, r0, #3
   28f74:	439c      	bics	r4, r3
   28f76:	42a0      	cmp	r0, r4
   28f78:	d0e0      	beq.n	28f3c <_malloc_r+0x68>
   28f7a:	1a21      	subs	r1, r4, r0
   28f7c:	0030      	movs	r0, r6
   28f7e:	f000 f807 	bl	28f90 <_sbrk_r>
   28f82:	1c43      	adds	r3, r0, #1
   28f84:	d1da      	bne.n	28f3c <_malloc_r+0x68>
   28f86:	e7c6      	b.n	28f16 <_malloc_r+0x42>
   28f88:	20000514 	.word	0x20000514
   28f8c:	20000518 	.word	0x20000518

00028f90 <_sbrk_r>:
   28f90:	2300      	movs	r3, #0
   28f92:	b570      	push	{r4, r5, r6, lr}
   28f94:	4c06      	ldr	r4, [pc, #24]	; (28fb0 <_sbrk_r+0x20>)
   28f96:	0005      	movs	r5, r0
   28f98:	0008      	movs	r0, r1
   28f9a:	6023      	str	r3, [r4, #0]
   28f9c:	f7fb ff44 	bl	24e28 <_sbrk>
   28fa0:	1c43      	adds	r3, r0, #1
   28fa2:	d103      	bne.n	28fac <_sbrk_r+0x1c>
   28fa4:	6823      	ldr	r3, [r4, #0]
   28fa6:	2b00      	cmp	r3, #0
   28fa8:	d000      	beq.n	28fac <_sbrk_r+0x1c>
   28faa:	602b      	str	r3, [r5, #0]
   28fac:	bd70      	pop	{r4, r5, r6, pc}
   28fae:	46c0      	nop			; (mov r8, r8)
   28fb0:	20000988 	.word	0x20000988

00028fb4 <sniprintf>:
   28fb4:	b40c      	push	{r2, r3}
   28fb6:	b530      	push	{r4, r5, lr}
   28fb8:	4b16      	ldr	r3, [pc, #88]	; (29014 <sniprintf+0x60>)
   28fba:	b09d      	sub	sp, #116	; 0x74
   28fbc:	1e0c      	subs	r4, r1, #0
   28fbe:	681d      	ldr	r5, [r3, #0]
   28fc0:	da08      	bge.n	28fd4 <sniprintf+0x20>
   28fc2:	238b      	movs	r3, #139	; 0x8b
   28fc4:	2001      	movs	r0, #1
   28fc6:	602b      	str	r3, [r5, #0]
   28fc8:	4240      	negs	r0, r0
   28fca:	b01d      	add	sp, #116	; 0x74
   28fcc:	bc30      	pop	{r4, r5}
   28fce:	bc08      	pop	{r3}
   28fd0:	b002      	add	sp, #8
   28fd2:	4718      	bx	r3
   28fd4:	2382      	movs	r3, #130	; 0x82
   28fd6:	a902      	add	r1, sp, #8
   28fd8:	009b      	lsls	r3, r3, #2
   28fda:	818b      	strh	r3, [r1, #12]
   28fdc:	2300      	movs	r3, #0
   28fde:	9002      	str	r0, [sp, #8]
   28fe0:	6108      	str	r0, [r1, #16]
   28fe2:	429c      	cmp	r4, r3
   28fe4:	d000      	beq.n	28fe8 <sniprintf+0x34>
   28fe6:	1e63      	subs	r3, r4, #1
   28fe8:	608b      	str	r3, [r1, #8]
   28fea:	614b      	str	r3, [r1, #20]
   28fec:	2301      	movs	r3, #1
   28fee:	425b      	negs	r3, r3
   28ff0:	81cb      	strh	r3, [r1, #14]
   28ff2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   28ff4:	ab21      	add	r3, sp, #132	; 0x84
   28ff6:	0028      	movs	r0, r5
   28ff8:	9301      	str	r3, [sp, #4]
   28ffa:	f000 fa45 	bl	29488 <_svfiprintf_r>
   28ffe:	1c43      	adds	r3, r0, #1
   29000:	da01      	bge.n	29006 <sniprintf+0x52>
   29002:	238b      	movs	r3, #139	; 0x8b
   29004:	602b      	str	r3, [r5, #0]
   29006:	2c00      	cmp	r4, #0
   29008:	d0df      	beq.n	28fca <sniprintf+0x16>
   2900a:	2300      	movs	r3, #0
   2900c:	9a02      	ldr	r2, [sp, #8]
   2900e:	7013      	strb	r3, [r2, #0]
   29010:	e7db      	b.n	28fca <sniprintf+0x16>
   29012:	46c0      	nop			; (mov r8, r8)
   29014:	2000002c 	.word	0x2000002c

00029018 <siprintf>:
   29018:	b40e      	push	{r1, r2, r3}
   2901a:	b510      	push	{r4, lr}
   2901c:	b09d      	sub	sp, #116	; 0x74
   2901e:	a902      	add	r1, sp, #8
   29020:	9002      	str	r0, [sp, #8]
   29022:	6108      	str	r0, [r1, #16]
   29024:	480b      	ldr	r0, [pc, #44]	; (29054 <siprintf+0x3c>)
   29026:	2482      	movs	r4, #130	; 0x82
   29028:	6088      	str	r0, [r1, #8]
   2902a:	6148      	str	r0, [r1, #20]
   2902c:	2001      	movs	r0, #1
   2902e:	4240      	negs	r0, r0
   29030:	ab1f      	add	r3, sp, #124	; 0x7c
   29032:	81c8      	strh	r0, [r1, #14]
   29034:	4808      	ldr	r0, [pc, #32]	; (29058 <siprintf+0x40>)
   29036:	cb04      	ldmia	r3!, {r2}
   29038:	00a4      	lsls	r4, r4, #2
   2903a:	6800      	ldr	r0, [r0, #0]
   2903c:	9301      	str	r3, [sp, #4]
   2903e:	818c      	strh	r4, [r1, #12]
   29040:	f000 fa22 	bl	29488 <_svfiprintf_r>
   29044:	2300      	movs	r3, #0
   29046:	9a02      	ldr	r2, [sp, #8]
   29048:	7013      	strb	r3, [r2, #0]
   2904a:	b01d      	add	sp, #116	; 0x74
   2904c:	bc10      	pop	{r4}
   2904e:	bc08      	pop	{r3}
   29050:	b003      	add	sp, #12
   29052:	4718      	bx	r3
   29054:	7fffffff 	.word	0x7fffffff
   29058:	2000002c 	.word	0x2000002c

0002905c <strcat>:
   2905c:	0002      	movs	r2, r0
   2905e:	b510      	push	{r4, lr}
   29060:	7813      	ldrb	r3, [r2, #0]
   29062:	2b00      	cmp	r3, #0
   29064:	d105      	bne.n	29072 <strcat+0x16>
   29066:	5ccc      	ldrb	r4, [r1, r3]
   29068:	54d4      	strb	r4, [r2, r3]
   2906a:	3301      	adds	r3, #1
   2906c:	2c00      	cmp	r4, #0
   2906e:	d1fa      	bne.n	29066 <strcat+0xa>
   29070:	bd10      	pop	{r4, pc}
   29072:	3201      	adds	r2, #1
   29074:	e7f4      	b.n	29060 <strcat+0x4>

00029076 <strchr>:
   29076:	b2c9      	uxtb	r1, r1
   29078:	7803      	ldrb	r3, [r0, #0]
   2907a:	2b00      	cmp	r3, #0
   2907c:	d004      	beq.n	29088 <strchr+0x12>
   2907e:	4299      	cmp	r1, r3
   29080:	d100      	bne.n	29084 <strchr+0xe>
   29082:	4770      	bx	lr
   29084:	3001      	adds	r0, #1
   29086:	e7f7      	b.n	29078 <strchr+0x2>
   29088:	424b      	negs	r3, r1
   2908a:	4159      	adcs	r1, r3
   2908c:	4249      	negs	r1, r1
   2908e:	4008      	ands	r0, r1
   29090:	e7f7      	b.n	29082 <strchr+0xc>

00029092 <strcpy>:
   29092:	1c03      	adds	r3, r0, #0
   29094:	780a      	ldrb	r2, [r1, #0]
   29096:	3101      	adds	r1, #1
   29098:	701a      	strb	r2, [r3, #0]
   2909a:	3301      	adds	r3, #1
   2909c:	2a00      	cmp	r2, #0
   2909e:	d1f9      	bne.n	29094 <strcpy+0x2>
   290a0:	4770      	bx	lr

000290a2 <strlen>:
   290a2:	2300      	movs	r3, #0
   290a4:	5cc2      	ldrb	r2, [r0, r3]
   290a6:	3301      	adds	r3, #1
   290a8:	2a00      	cmp	r2, #0
   290aa:	d1fb      	bne.n	290a4 <strlen+0x2>
   290ac:	1e58      	subs	r0, r3, #1
   290ae:	4770      	bx	lr

000290b0 <strncmp>:
   290b0:	2300      	movs	r3, #0
   290b2:	b530      	push	{r4, r5, lr}
   290b4:	429a      	cmp	r2, r3
   290b6:	d00a      	beq.n	290ce <strncmp+0x1e>
   290b8:	3a01      	subs	r2, #1
   290ba:	5cc4      	ldrb	r4, [r0, r3]
   290bc:	5ccd      	ldrb	r5, [r1, r3]
   290be:	42ac      	cmp	r4, r5
   290c0:	d104      	bne.n	290cc <strncmp+0x1c>
   290c2:	429a      	cmp	r2, r3
   290c4:	d002      	beq.n	290cc <strncmp+0x1c>
   290c6:	3301      	adds	r3, #1
   290c8:	2c00      	cmp	r4, #0
   290ca:	d1f6      	bne.n	290ba <strncmp+0xa>
   290cc:	1b63      	subs	r3, r4, r5
   290ce:	0018      	movs	r0, r3
   290d0:	bd30      	pop	{r4, r5, pc}

000290d2 <strstr>:
   290d2:	b510      	push	{r4, lr}
   290d4:	0002      	movs	r2, r0
   290d6:	7800      	ldrb	r0, [r0, #0]
   290d8:	2800      	cmp	r0, #0
   290da:	d104      	bne.n	290e6 <strstr+0x14>
   290dc:	7809      	ldrb	r1, [r1, #0]
   290de:	2900      	cmp	r1, #0
   290e0:	d00d      	beq.n	290fe <strstr+0x2c>
   290e2:	bd10      	pop	{r4, pc}
   290e4:	3201      	adds	r2, #1
   290e6:	7810      	ldrb	r0, [r2, #0]
   290e8:	2800      	cmp	r0, #0
   290ea:	d0fa      	beq.n	290e2 <strstr+0x10>
   290ec:	2300      	movs	r3, #0
   290ee:	5cc8      	ldrb	r0, [r1, r3]
   290f0:	2800      	cmp	r0, #0
   290f2:	d004      	beq.n	290fe <strstr+0x2c>
   290f4:	5cd4      	ldrb	r4, [r2, r3]
   290f6:	4284      	cmp	r4, r0
   290f8:	d1f4      	bne.n	290e4 <strstr+0x12>
   290fa:	3301      	adds	r3, #1
   290fc:	e7f7      	b.n	290ee <strstr+0x1c>
   290fe:	0010      	movs	r0, r2
   29100:	e7ef      	b.n	290e2 <strstr+0x10>
	...

00029104 <strtok>:
   29104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29106:	4b12      	ldr	r3, [pc, #72]	; (29150 <strtok+0x4c>)
   29108:	0006      	movs	r6, r0
   2910a:	681d      	ldr	r5, [r3, #0]
   2910c:	000f      	movs	r7, r1
   2910e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   29110:	2c00      	cmp	r4, #0
   29112:	d116      	bne.n	29142 <strtok+0x3e>
   29114:	2050      	movs	r0, #80	; 0x50
   29116:	f7ff fe3b 	bl	28d90 <malloc>
   2911a:	65a8      	str	r0, [r5, #88]	; 0x58
   2911c:	6004      	str	r4, [r0, #0]
   2911e:	6044      	str	r4, [r0, #4]
   29120:	6084      	str	r4, [r0, #8]
   29122:	60c4      	str	r4, [r0, #12]
   29124:	6104      	str	r4, [r0, #16]
   29126:	6144      	str	r4, [r0, #20]
   29128:	6184      	str	r4, [r0, #24]
   2912a:	6284      	str	r4, [r0, #40]	; 0x28
   2912c:	62c4      	str	r4, [r0, #44]	; 0x2c
   2912e:	6304      	str	r4, [r0, #48]	; 0x30
   29130:	6344      	str	r4, [r0, #52]	; 0x34
   29132:	6384      	str	r4, [r0, #56]	; 0x38
   29134:	63c4      	str	r4, [r0, #60]	; 0x3c
   29136:	6404      	str	r4, [r0, #64]	; 0x40
   29138:	6444      	str	r4, [r0, #68]	; 0x44
   2913a:	6484      	str	r4, [r0, #72]	; 0x48
   2913c:	64c4      	str	r4, [r0, #76]	; 0x4c
   2913e:	7704      	strb	r4, [r0, #28]
   29140:	6244      	str	r4, [r0, #36]	; 0x24
   29142:	6daa      	ldr	r2, [r5, #88]	; 0x58
   29144:	0039      	movs	r1, r7
   29146:	0030      	movs	r0, r6
   29148:	2301      	movs	r3, #1
   2914a:	f000 f803 	bl	29154 <__strtok_r>
   2914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29150:	2000002c 	.word	0x2000002c

00029154 <__strtok_r>:
   29154:	b5f0      	push	{r4, r5, r6, r7, lr}
   29156:	2800      	cmp	r0, #0
   29158:	d104      	bne.n	29164 <__strtok_r+0x10>
   2915a:	6810      	ldr	r0, [r2, #0]
   2915c:	2800      	cmp	r0, #0
   2915e:	d101      	bne.n	29164 <__strtok_r+0x10>
   29160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29162:	0020      	movs	r0, r4
   29164:	000e      	movs	r6, r1
   29166:	7805      	ldrb	r5, [r0, #0]
   29168:	1c44      	adds	r4, r0, #1
   2916a:	7837      	ldrb	r7, [r6, #0]
   2916c:	2f00      	cmp	r7, #0
   2916e:	d104      	bne.n	2917a <__strtok_r+0x26>
   29170:	2d00      	cmp	r5, #0
   29172:	d110      	bne.n	29196 <__strtok_r+0x42>
   29174:	6015      	str	r5, [r2, #0]
   29176:	0028      	movs	r0, r5
   29178:	e7f2      	b.n	29160 <__strtok_r+0xc>
   2917a:	3601      	adds	r6, #1
   2917c:	42bd      	cmp	r5, r7
   2917e:	d1f4      	bne.n	2916a <__strtok_r+0x16>
   29180:	2b00      	cmp	r3, #0
   29182:	d1ee      	bne.n	29162 <__strtok_r+0xe>
   29184:	6014      	str	r4, [r2, #0]
   29186:	7003      	strb	r3, [r0, #0]
   29188:	e7ea      	b.n	29160 <__strtok_r+0xc>
   2918a:	0033      	movs	r3, r6
   2918c:	e00e      	b.n	291ac <__strtok_r+0x58>
   2918e:	3501      	adds	r5, #1
   29190:	001c      	movs	r4, r3
   29192:	2f00      	cmp	r7, #0
   29194:	d102      	bne.n	2919c <__strtok_r+0x48>
   29196:	000d      	movs	r5, r1
   29198:	7826      	ldrb	r6, [r4, #0]
   2919a:	1c63      	adds	r3, r4, #1
   2919c:	782f      	ldrb	r7, [r5, #0]
   2919e:	42be      	cmp	r6, r7
   291a0:	d1f5      	bne.n	2918e <__strtok_r+0x3a>
   291a2:	2e00      	cmp	r6, #0
   291a4:	d0f1      	beq.n	2918a <__strtok_r+0x36>
   291a6:	2400      	movs	r4, #0
   291a8:	1e59      	subs	r1, r3, #1
   291aa:	700c      	strb	r4, [r1, #0]
   291ac:	6013      	str	r3, [r2, #0]
   291ae:	e7d7      	b.n	29160 <__strtok_r+0xc>

000291b0 <_strtol_l.isra.0>:
   291b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   291b2:	001f      	movs	r7, r3
   291b4:	000e      	movs	r6, r1
   291b6:	b087      	sub	sp, #28
   291b8:	9005      	str	r0, [sp, #20]
   291ba:	9103      	str	r1, [sp, #12]
   291bc:	9202      	str	r2, [sp, #8]
   291be:	980c      	ldr	r0, [sp, #48]	; 0x30
   291c0:	7834      	ldrb	r4, [r6, #0]
   291c2:	f7ff fdd3 	bl	28d6c <__locale_ctype_ptr_l>
   291c6:	2208      	movs	r2, #8
   291c8:	1900      	adds	r0, r0, r4
   291ca:	7843      	ldrb	r3, [r0, #1]
   291cc:	1c75      	adds	r5, r6, #1
   291ce:	4013      	ands	r3, r2
   291d0:	d10c      	bne.n	291ec <_strtol_l.isra.0+0x3c>
   291d2:	2c2d      	cmp	r4, #45	; 0x2d
   291d4:	d10c      	bne.n	291f0 <_strtol_l.isra.0+0x40>
   291d6:	3301      	adds	r3, #1
   291d8:	782c      	ldrb	r4, [r5, #0]
   291da:	9301      	str	r3, [sp, #4]
   291dc:	1cb5      	adds	r5, r6, #2
   291de:	2f00      	cmp	r7, #0
   291e0:	d00c      	beq.n	291fc <_strtol_l.isra.0+0x4c>
   291e2:	2f10      	cmp	r7, #16
   291e4:	d114      	bne.n	29210 <_strtol_l.isra.0+0x60>
   291e6:	2c30      	cmp	r4, #48	; 0x30
   291e8:	d00a      	beq.n	29200 <_strtol_l.isra.0+0x50>
   291ea:	e011      	b.n	29210 <_strtol_l.isra.0+0x60>
   291ec:	002e      	movs	r6, r5
   291ee:	e7e6      	b.n	291be <_strtol_l.isra.0+0xe>
   291f0:	9301      	str	r3, [sp, #4]
   291f2:	2c2b      	cmp	r4, #43	; 0x2b
   291f4:	d1f3      	bne.n	291de <_strtol_l.isra.0+0x2e>
   291f6:	782c      	ldrb	r4, [r5, #0]
   291f8:	1cb5      	adds	r5, r6, #2
   291fa:	e7f0      	b.n	291de <_strtol_l.isra.0+0x2e>
   291fc:	2c30      	cmp	r4, #48	; 0x30
   291fe:	d12f      	bne.n	29260 <_strtol_l.isra.0+0xb0>
   29200:	2220      	movs	r2, #32
   29202:	782b      	ldrb	r3, [r5, #0]
   29204:	4393      	bics	r3, r2
   29206:	2b58      	cmp	r3, #88	; 0x58
   29208:	d151      	bne.n	292ae <_strtol_l.isra.0+0xfe>
   2920a:	2710      	movs	r7, #16
   2920c:	786c      	ldrb	r4, [r5, #1]
   2920e:	3502      	adds	r5, #2
   29210:	9b01      	ldr	r3, [sp, #4]
   29212:	4a29      	ldr	r2, [pc, #164]	; (292b8 <_strtol_l.isra.0+0x108>)
   29214:	0039      	movs	r1, r7
   29216:	189e      	adds	r6, r3, r2
   29218:	0030      	movs	r0, r6
   2921a:	f7fd f9f5 	bl	26608 <__aeabi_uidivmod>
   2921e:	0030      	movs	r0, r6
   29220:	9104      	str	r1, [sp, #16]
   29222:	0039      	movs	r1, r7
   29224:	f7fd f96a 	bl	264fc <__udivsi3>
   29228:	2101      	movs	r1, #1
   2922a:	2300      	movs	r3, #0
   2922c:	4249      	negs	r1, r1
   2922e:	0002      	movs	r2, r0
   29230:	468c      	mov	ip, r1
   29232:	0018      	movs	r0, r3
   29234:	0021      	movs	r1, r4
   29236:	3930      	subs	r1, #48	; 0x30
   29238:	2909      	cmp	r1, #9
   2923a:	d813      	bhi.n	29264 <_strtol_l.isra.0+0xb4>
   2923c:	000c      	movs	r4, r1
   2923e:	42a7      	cmp	r7, r4
   29240:	dd1c      	ble.n	2927c <_strtol_l.isra.0+0xcc>
   29242:	1c59      	adds	r1, r3, #1
   29244:	d009      	beq.n	2925a <_strtol_l.isra.0+0xaa>
   29246:	4663      	mov	r3, ip
   29248:	4282      	cmp	r2, r0
   2924a:	d306      	bcc.n	2925a <_strtol_l.isra.0+0xaa>
   2924c:	d102      	bne.n	29254 <_strtol_l.isra.0+0xa4>
   2924e:	9904      	ldr	r1, [sp, #16]
   29250:	42a1      	cmp	r1, r4
   29252:	db02      	blt.n	2925a <_strtol_l.isra.0+0xaa>
   29254:	2301      	movs	r3, #1
   29256:	4378      	muls	r0, r7
   29258:	1820      	adds	r0, r4, r0
   2925a:	782c      	ldrb	r4, [r5, #0]
   2925c:	3501      	adds	r5, #1
   2925e:	e7e9      	b.n	29234 <_strtol_l.isra.0+0x84>
   29260:	270a      	movs	r7, #10
   29262:	e7d5      	b.n	29210 <_strtol_l.isra.0+0x60>
   29264:	0021      	movs	r1, r4
   29266:	3941      	subs	r1, #65	; 0x41
   29268:	2919      	cmp	r1, #25
   2926a:	d801      	bhi.n	29270 <_strtol_l.isra.0+0xc0>
   2926c:	3c37      	subs	r4, #55	; 0x37
   2926e:	e7e6      	b.n	2923e <_strtol_l.isra.0+0x8e>
   29270:	0021      	movs	r1, r4
   29272:	3961      	subs	r1, #97	; 0x61
   29274:	2919      	cmp	r1, #25
   29276:	d801      	bhi.n	2927c <_strtol_l.isra.0+0xcc>
   29278:	3c57      	subs	r4, #87	; 0x57
   2927a:	e7e0      	b.n	2923e <_strtol_l.isra.0+0x8e>
   2927c:	1c5a      	adds	r2, r3, #1
   2927e:	d108      	bne.n	29292 <_strtol_l.isra.0+0xe2>
   29280:	9a05      	ldr	r2, [sp, #20]
   29282:	3323      	adds	r3, #35	; 0x23
   29284:	6013      	str	r3, [r2, #0]
   29286:	9b02      	ldr	r3, [sp, #8]
   29288:	0030      	movs	r0, r6
   2928a:	2b00      	cmp	r3, #0
   2928c:	d10b      	bne.n	292a6 <_strtol_l.isra.0+0xf6>
   2928e:	b007      	add	sp, #28
   29290:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29292:	9a01      	ldr	r2, [sp, #4]
   29294:	2a00      	cmp	r2, #0
   29296:	d000      	beq.n	2929a <_strtol_l.isra.0+0xea>
   29298:	4240      	negs	r0, r0
   2929a:	9a02      	ldr	r2, [sp, #8]
   2929c:	2a00      	cmp	r2, #0
   2929e:	d0f6      	beq.n	2928e <_strtol_l.isra.0+0xde>
   292a0:	9a03      	ldr	r2, [sp, #12]
   292a2:	2b00      	cmp	r3, #0
   292a4:	d000      	beq.n	292a8 <_strtol_l.isra.0+0xf8>
   292a6:	1e6a      	subs	r2, r5, #1
   292a8:	9b02      	ldr	r3, [sp, #8]
   292aa:	601a      	str	r2, [r3, #0]
   292ac:	e7ef      	b.n	2928e <_strtol_l.isra.0+0xde>
   292ae:	2430      	movs	r4, #48	; 0x30
   292b0:	2f00      	cmp	r7, #0
   292b2:	d1ad      	bne.n	29210 <_strtol_l.isra.0+0x60>
   292b4:	3708      	adds	r7, #8
   292b6:	e7ab      	b.n	29210 <_strtol_l.isra.0+0x60>
   292b8:	7fffffff 	.word	0x7fffffff

000292bc <strtol>:
   292bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   292be:	0013      	movs	r3, r2
   292c0:	4a06      	ldr	r2, [pc, #24]	; (292dc <strtol+0x20>)
   292c2:	0005      	movs	r5, r0
   292c4:	6810      	ldr	r0, [r2, #0]
   292c6:	6a04      	ldr	r4, [r0, #32]
   292c8:	2c00      	cmp	r4, #0
   292ca:	d100      	bne.n	292ce <strtol+0x12>
   292cc:	4c04      	ldr	r4, [pc, #16]	; (292e0 <strtol+0x24>)
   292ce:	000a      	movs	r2, r1
   292d0:	9400      	str	r4, [sp, #0]
   292d2:	0029      	movs	r1, r5
   292d4:	f7ff ff6c 	bl	291b0 <_strtol_l.isra.0>
   292d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   292da:	46c0      	nop			; (mov r8, r8)
   292dc:	2000002c 	.word	0x2000002c
   292e0:	20000090 	.word	0x20000090

000292e4 <__utoa>:
   292e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   292e6:	0017      	movs	r7, r2
   292e8:	b08f      	sub	sp, #60	; 0x3c
   292ea:	2225      	movs	r2, #37	; 0x25
   292ec:	0006      	movs	r6, r0
   292ee:	000d      	movs	r5, r1
   292f0:	a804      	add	r0, sp, #16
   292f2:	4918      	ldr	r1, [pc, #96]	; (29354 <__utoa+0x70>)
   292f4:	f7ff fd72 	bl	28ddc <memcpy>
   292f8:	aa04      	add	r2, sp, #16
   292fa:	1ebb      	subs	r3, r7, #2
   292fc:	2400      	movs	r4, #0
   292fe:	9203      	str	r2, [sp, #12]
   29300:	2b22      	cmp	r3, #34	; 0x22
   29302:	d905      	bls.n	29310 <__utoa+0x2c>
   29304:	702c      	strb	r4, [r5, #0]
   29306:	0025      	movs	r5, r4
   29308:	0028      	movs	r0, r5
   2930a:	b00f      	add	sp, #60	; 0x3c
   2930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2930e:	9c01      	ldr	r4, [sp, #4]
   29310:	1c63      	adds	r3, r4, #1
   29312:	9301      	str	r3, [sp, #4]
   29314:	18eb      	adds	r3, r5, r3
   29316:	9300      	str	r3, [sp, #0]
   29318:	0030      	movs	r0, r6
   2931a:	3b01      	subs	r3, #1
   2931c:	0039      	movs	r1, r7
   2931e:	9302      	str	r3, [sp, #8]
   29320:	f7fd f972 	bl	26608 <__aeabi_uidivmod>
   29324:	9b03      	ldr	r3, [sp, #12]
   29326:	9a02      	ldr	r2, [sp, #8]
   29328:	5c5b      	ldrb	r3, [r3, r1]
   2932a:	0030      	movs	r0, r6
   2932c:	7013      	strb	r3, [r2, #0]
   2932e:	0039      	movs	r1, r7
   29330:	f7fd f8e4 	bl	264fc <__udivsi3>
   29334:	1e06      	subs	r6, r0, #0
   29336:	d1ea      	bne.n	2930e <__utoa+0x2a>
   29338:	9b00      	ldr	r3, [sp, #0]
   2933a:	7018      	strb	r0, [r3, #0]
   2933c:	002b      	movs	r3, r5
   2933e:	1b5a      	subs	r2, r3, r5
   29340:	4294      	cmp	r4, r2
   29342:	dde1      	ble.n	29308 <__utoa+0x24>
   29344:	781a      	ldrb	r2, [r3, #0]
   29346:	5d29      	ldrb	r1, [r5, r4]
   29348:	7019      	strb	r1, [r3, #0]
   2934a:	552a      	strb	r2, [r5, r4]
   2934c:	3301      	adds	r3, #1
   2934e:	3c01      	subs	r4, #1
   29350:	e7f5      	b.n	2933e <__utoa+0x5a>
   29352:	46c0      	nop			; (mov r8, r8)
   29354:	0002adf2 	.word	0x0002adf2

00029358 <utoa>:
   29358:	b510      	push	{r4, lr}
   2935a:	f7ff ffc3 	bl	292e4 <__utoa>
   2935e:	bd10      	pop	{r4, pc}

00029360 <_vsiprintf_r>:
   29360:	b530      	push	{r4, r5, lr}
   29362:	b09b      	sub	sp, #108	; 0x6c
   29364:	9100      	str	r1, [sp, #0]
   29366:	9104      	str	r1, [sp, #16]
   29368:	4908      	ldr	r1, [pc, #32]	; (2938c <_vsiprintf_r+0x2c>)
   2936a:	466d      	mov	r5, sp
   2936c:	9102      	str	r1, [sp, #8]
   2936e:	9105      	str	r1, [sp, #20]
   29370:	2101      	movs	r1, #1
   29372:	2482      	movs	r4, #130	; 0x82
   29374:	4249      	negs	r1, r1
   29376:	81e9      	strh	r1, [r5, #14]
   29378:	00a4      	lsls	r4, r4, #2
   2937a:	4669      	mov	r1, sp
   2937c:	81ac      	strh	r4, [r5, #12]
   2937e:	f000 f883 	bl	29488 <_svfiprintf_r>
   29382:	2300      	movs	r3, #0
   29384:	9a00      	ldr	r2, [sp, #0]
   29386:	7013      	strb	r3, [r2, #0]
   29388:	b01b      	add	sp, #108	; 0x6c
   2938a:	bd30      	pop	{r4, r5, pc}
   2938c:	7fffffff 	.word	0x7fffffff

00029390 <vsiprintf>:
   29390:	b510      	push	{r4, lr}
   29392:	0013      	movs	r3, r2
   29394:	000a      	movs	r2, r1
   29396:	0001      	movs	r1, r0
   29398:	4802      	ldr	r0, [pc, #8]	; (293a4 <vsiprintf+0x14>)
   2939a:	6800      	ldr	r0, [r0, #0]
   2939c:	f7ff ffe0 	bl	29360 <_vsiprintf_r>
   293a0:	bd10      	pop	{r4, pc}
   293a2:	46c0      	nop			; (mov r8, r8)
   293a4:	2000002c 	.word	0x2000002c

000293a8 <__ascii_wctomb>:
   293a8:	1e0b      	subs	r3, r1, #0
   293aa:	d004      	beq.n	293b6 <__ascii_wctomb+0xe>
   293ac:	2aff      	cmp	r2, #255	; 0xff
   293ae:	d904      	bls.n	293ba <__ascii_wctomb+0x12>
   293b0:	238a      	movs	r3, #138	; 0x8a
   293b2:	6003      	str	r3, [r0, #0]
   293b4:	3b8b      	subs	r3, #139	; 0x8b
   293b6:	0018      	movs	r0, r3
   293b8:	4770      	bx	lr
   293ba:	700a      	strb	r2, [r1, #0]
   293bc:	2301      	movs	r3, #1
   293be:	e7fa      	b.n	293b6 <__ascii_wctomb+0xe>

000293c0 <__malloc_lock>:
   293c0:	4770      	bx	lr

000293c2 <__malloc_unlock>:
   293c2:	4770      	bx	lr

000293c4 <__ssputs_r>:
   293c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   293c6:	688e      	ldr	r6, [r1, #8]
   293c8:	b085      	sub	sp, #20
   293ca:	0007      	movs	r7, r0
   293cc:	000c      	movs	r4, r1
   293ce:	9203      	str	r2, [sp, #12]
   293d0:	9301      	str	r3, [sp, #4]
   293d2:	429e      	cmp	r6, r3
   293d4:	d839      	bhi.n	2944a <__ssputs_r+0x86>
   293d6:	2390      	movs	r3, #144	; 0x90
   293d8:	898a      	ldrh	r2, [r1, #12]
   293da:	00db      	lsls	r3, r3, #3
   293dc:	421a      	tst	r2, r3
   293de:	d034      	beq.n	2944a <__ssputs_r+0x86>
   293e0:	2503      	movs	r5, #3
   293e2:	6909      	ldr	r1, [r1, #16]
   293e4:	6823      	ldr	r3, [r4, #0]
   293e6:	1a5b      	subs	r3, r3, r1
   293e8:	9302      	str	r3, [sp, #8]
   293ea:	6963      	ldr	r3, [r4, #20]
   293ec:	9802      	ldr	r0, [sp, #8]
   293ee:	435d      	muls	r5, r3
   293f0:	0feb      	lsrs	r3, r5, #31
   293f2:	195d      	adds	r5, r3, r5
   293f4:	9b01      	ldr	r3, [sp, #4]
   293f6:	106d      	asrs	r5, r5, #1
   293f8:	3301      	adds	r3, #1
   293fa:	181b      	adds	r3, r3, r0
   293fc:	42ab      	cmp	r3, r5
   293fe:	d900      	bls.n	29402 <__ssputs_r+0x3e>
   29400:	001d      	movs	r5, r3
   29402:	0553      	lsls	r3, r2, #21
   29404:	d532      	bpl.n	2946c <__ssputs_r+0xa8>
   29406:	0029      	movs	r1, r5
   29408:	0038      	movs	r0, r7
   2940a:	f7ff fd63 	bl	28ed4 <_malloc_r>
   2940e:	1e06      	subs	r6, r0, #0
   29410:	d109      	bne.n	29426 <__ssputs_r+0x62>
   29412:	230c      	movs	r3, #12
   29414:	603b      	str	r3, [r7, #0]
   29416:	2340      	movs	r3, #64	; 0x40
   29418:	2001      	movs	r0, #1
   2941a:	89a2      	ldrh	r2, [r4, #12]
   2941c:	4240      	negs	r0, r0
   2941e:	4313      	orrs	r3, r2
   29420:	81a3      	strh	r3, [r4, #12]
   29422:	b005      	add	sp, #20
   29424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29426:	9a02      	ldr	r2, [sp, #8]
   29428:	6921      	ldr	r1, [r4, #16]
   2942a:	f7ff fcd7 	bl	28ddc <memcpy>
   2942e:	89a3      	ldrh	r3, [r4, #12]
   29430:	4a14      	ldr	r2, [pc, #80]	; (29484 <__ssputs_r+0xc0>)
   29432:	401a      	ands	r2, r3
   29434:	2380      	movs	r3, #128	; 0x80
   29436:	4313      	orrs	r3, r2
   29438:	81a3      	strh	r3, [r4, #12]
   2943a:	9b02      	ldr	r3, [sp, #8]
   2943c:	6126      	str	r6, [r4, #16]
   2943e:	18f6      	adds	r6, r6, r3
   29440:	6026      	str	r6, [r4, #0]
   29442:	6165      	str	r5, [r4, #20]
   29444:	9e01      	ldr	r6, [sp, #4]
   29446:	1aed      	subs	r5, r5, r3
   29448:	60a5      	str	r5, [r4, #8]
   2944a:	9b01      	ldr	r3, [sp, #4]
   2944c:	42b3      	cmp	r3, r6
   2944e:	d200      	bcs.n	29452 <__ssputs_r+0x8e>
   29450:	001e      	movs	r6, r3
   29452:	0032      	movs	r2, r6
   29454:	9903      	ldr	r1, [sp, #12]
   29456:	6820      	ldr	r0, [r4, #0]
   29458:	f7ff fcc9 	bl	28dee <memmove>
   2945c:	68a3      	ldr	r3, [r4, #8]
   2945e:	2000      	movs	r0, #0
   29460:	1b9b      	subs	r3, r3, r6
   29462:	60a3      	str	r3, [r4, #8]
   29464:	6823      	ldr	r3, [r4, #0]
   29466:	199e      	adds	r6, r3, r6
   29468:	6026      	str	r6, [r4, #0]
   2946a:	e7da      	b.n	29422 <__ssputs_r+0x5e>
   2946c:	002a      	movs	r2, r5
   2946e:	0038      	movs	r0, r7
   29470:	f000 faa1 	bl	299b6 <_realloc_r>
   29474:	1e06      	subs	r6, r0, #0
   29476:	d1e0      	bne.n	2943a <__ssputs_r+0x76>
   29478:	6921      	ldr	r1, [r4, #16]
   2947a:	0038      	movs	r0, r7
   2947c:	f7ff fce0 	bl	28e40 <_free_r>
   29480:	e7c7      	b.n	29412 <__ssputs_r+0x4e>
   29482:	46c0      	nop			; (mov r8, r8)
   29484:	fffffb7f 	.word	0xfffffb7f

00029488 <_svfiprintf_r>:
   29488:	b5f0      	push	{r4, r5, r6, r7, lr}
   2948a:	b09f      	sub	sp, #124	; 0x7c
   2948c:	9002      	str	r0, [sp, #8]
   2948e:	9305      	str	r3, [sp, #20]
   29490:	898b      	ldrh	r3, [r1, #12]
   29492:	000f      	movs	r7, r1
   29494:	0016      	movs	r6, r2
   29496:	061b      	lsls	r3, r3, #24
   29498:	d511      	bpl.n	294be <_svfiprintf_r+0x36>
   2949a:	690b      	ldr	r3, [r1, #16]
   2949c:	2b00      	cmp	r3, #0
   2949e:	d10e      	bne.n	294be <_svfiprintf_r+0x36>
   294a0:	2140      	movs	r1, #64	; 0x40
   294a2:	f7ff fd17 	bl	28ed4 <_malloc_r>
   294a6:	6038      	str	r0, [r7, #0]
   294a8:	6138      	str	r0, [r7, #16]
   294aa:	2800      	cmp	r0, #0
   294ac:	d105      	bne.n	294ba <_svfiprintf_r+0x32>
   294ae:	230c      	movs	r3, #12
   294b0:	9a02      	ldr	r2, [sp, #8]
   294b2:	3801      	subs	r0, #1
   294b4:	6013      	str	r3, [r2, #0]
   294b6:	b01f      	add	sp, #124	; 0x7c
   294b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   294ba:	2340      	movs	r3, #64	; 0x40
   294bc:	617b      	str	r3, [r7, #20]
   294be:	2300      	movs	r3, #0
   294c0:	ad06      	add	r5, sp, #24
   294c2:	616b      	str	r3, [r5, #20]
   294c4:	3320      	adds	r3, #32
   294c6:	766b      	strb	r3, [r5, #25]
   294c8:	3310      	adds	r3, #16
   294ca:	76ab      	strb	r3, [r5, #26]
   294cc:	0034      	movs	r4, r6
   294ce:	7823      	ldrb	r3, [r4, #0]
   294d0:	2b00      	cmp	r3, #0
   294d2:	d147      	bne.n	29564 <_svfiprintf_r+0xdc>
   294d4:	1ba3      	subs	r3, r4, r6
   294d6:	9304      	str	r3, [sp, #16]
   294d8:	d00d      	beq.n	294f6 <_svfiprintf_r+0x6e>
   294da:	1ba3      	subs	r3, r4, r6
   294dc:	0032      	movs	r2, r6
   294de:	0039      	movs	r1, r7
   294e0:	9802      	ldr	r0, [sp, #8]
   294e2:	f7ff ff6f 	bl	293c4 <__ssputs_r>
   294e6:	1c43      	adds	r3, r0, #1
   294e8:	d100      	bne.n	294ec <_svfiprintf_r+0x64>
   294ea:	e0b5      	b.n	29658 <_svfiprintf_r+0x1d0>
   294ec:	696a      	ldr	r2, [r5, #20]
   294ee:	9b04      	ldr	r3, [sp, #16]
   294f0:	4694      	mov	ip, r2
   294f2:	4463      	add	r3, ip
   294f4:	616b      	str	r3, [r5, #20]
   294f6:	7823      	ldrb	r3, [r4, #0]
   294f8:	2b00      	cmp	r3, #0
   294fa:	d100      	bne.n	294fe <_svfiprintf_r+0x76>
   294fc:	e0ac      	b.n	29658 <_svfiprintf_r+0x1d0>
   294fe:	2201      	movs	r2, #1
   29500:	2300      	movs	r3, #0
   29502:	4252      	negs	r2, r2
   29504:	606a      	str	r2, [r5, #4]
   29506:	a902      	add	r1, sp, #8
   29508:	3254      	adds	r2, #84	; 0x54
   2950a:	1852      	adds	r2, r2, r1
   2950c:	3401      	adds	r4, #1
   2950e:	602b      	str	r3, [r5, #0]
   29510:	60eb      	str	r3, [r5, #12]
   29512:	60ab      	str	r3, [r5, #8]
   29514:	7013      	strb	r3, [r2, #0]
   29516:	65ab      	str	r3, [r5, #88]	; 0x58
   29518:	4e58      	ldr	r6, [pc, #352]	; (2967c <_svfiprintf_r+0x1f4>)
   2951a:	2205      	movs	r2, #5
   2951c:	7821      	ldrb	r1, [r4, #0]
   2951e:	0030      	movs	r0, r6
   29520:	f000 fa3e 	bl	299a0 <memchr>
   29524:	1c62      	adds	r2, r4, #1
   29526:	2800      	cmp	r0, #0
   29528:	d120      	bne.n	2956c <_svfiprintf_r+0xe4>
   2952a:	6829      	ldr	r1, [r5, #0]
   2952c:	06cb      	lsls	r3, r1, #27
   2952e:	d504      	bpl.n	2953a <_svfiprintf_r+0xb2>
   29530:	2353      	movs	r3, #83	; 0x53
   29532:	ae02      	add	r6, sp, #8
   29534:	3020      	adds	r0, #32
   29536:	199b      	adds	r3, r3, r6
   29538:	7018      	strb	r0, [r3, #0]
   2953a:	070b      	lsls	r3, r1, #28
   2953c:	d504      	bpl.n	29548 <_svfiprintf_r+0xc0>
   2953e:	2353      	movs	r3, #83	; 0x53
   29540:	202b      	movs	r0, #43	; 0x2b
   29542:	ae02      	add	r6, sp, #8
   29544:	199b      	adds	r3, r3, r6
   29546:	7018      	strb	r0, [r3, #0]
   29548:	7823      	ldrb	r3, [r4, #0]
   2954a:	2b2a      	cmp	r3, #42	; 0x2a
   2954c:	d016      	beq.n	2957c <_svfiprintf_r+0xf4>
   2954e:	2000      	movs	r0, #0
   29550:	210a      	movs	r1, #10
   29552:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29554:	7822      	ldrb	r2, [r4, #0]
   29556:	3a30      	subs	r2, #48	; 0x30
   29558:	2a09      	cmp	r2, #9
   2955a:	d955      	bls.n	29608 <_svfiprintf_r+0x180>
   2955c:	2800      	cmp	r0, #0
   2955e:	d015      	beq.n	2958c <_svfiprintf_r+0x104>
   29560:	9309      	str	r3, [sp, #36]	; 0x24
   29562:	e013      	b.n	2958c <_svfiprintf_r+0x104>
   29564:	2b25      	cmp	r3, #37	; 0x25
   29566:	d0b5      	beq.n	294d4 <_svfiprintf_r+0x4c>
   29568:	3401      	adds	r4, #1
   2956a:	e7b0      	b.n	294ce <_svfiprintf_r+0x46>
   2956c:	2301      	movs	r3, #1
   2956e:	1b80      	subs	r0, r0, r6
   29570:	4083      	lsls	r3, r0
   29572:	6829      	ldr	r1, [r5, #0]
   29574:	0014      	movs	r4, r2
   29576:	430b      	orrs	r3, r1
   29578:	602b      	str	r3, [r5, #0]
   2957a:	e7cd      	b.n	29518 <_svfiprintf_r+0x90>
   2957c:	9b05      	ldr	r3, [sp, #20]
   2957e:	1d18      	adds	r0, r3, #4
   29580:	681b      	ldr	r3, [r3, #0]
   29582:	9005      	str	r0, [sp, #20]
   29584:	2b00      	cmp	r3, #0
   29586:	db39      	blt.n	295fc <_svfiprintf_r+0x174>
   29588:	9309      	str	r3, [sp, #36]	; 0x24
   2958a:	0014      	movs	r4, r2
   2958c:	7823      	ldrb	r3, [r4, #0]
   2958e:	2b2e      	cmp	r3, #46	; 0x2e
   29590:	d10b      	bne.n	295aa <_svfiprintf_r+0x122>
   29592:	7863      	ldrb	r3, [r4, #1]
   29594:	1c62      	adds	r2, r4, #1
   29596:	2b2a      	cmp	r3, #42	; 0x2a
   29598:	d13e      	bne.n	29618 <_svfiprintf_r+0x190>
   2959a:	9b05      	ldr	r3, [sp, #20]
   2959c:	3402      	adds	r4, #2
   2959e:	1d1a      	adds	r2, r3, #4
   295a0:	681b      	ldr	r3, [r3, #0]
   295a2:	9205      	str	r2, [sp, #20]
   295a4:	2b00      	cmp	r3, #0
   295a6:	db34      	blt.n	29612 <_svfiprintf_r+0x18a>
   295a8:	9307      	str	r3, [sp, #28]
   295aa:	4e35      	ldr	r6, [pc, #212]	; (29680 <_svfiprintf_r+0x1f8>)
   295ac:	7821      	ldrb	r1, [r4, #0]
   295ae:	2203      	movs	r2, #3
   295b0:	0030      	movs	r0, r6
   295b2:	f000 f9f5 	bl	299a0 <memchr>
   295b6:	2800      	cmp	r0, #0
   295b8:	d006      	beq.n	295c8 <_svfiprintf_r+0x140>
   295ba:	2340      	movs	r3, #64	; 0x40
   295bc:	1b80      	subs	r0, r0, r6
   295be:	4083      	lsls	r3, r0
   295c0:	682a      	ldr	r2, [r5, #0]
   295c2:	3401      	adds	r4, #1
   295c4:	4313      	orrs	r3, r2
   295c6:	602b      	str	r3, [r5, #0]
   295c8:	7821      	ldrb	r1, [r4, #0]
   295ca:	2206      	movs	r2, #6
   295cc:	482d      	ldr	r0, [pc, #180]	; (29684 <_svfiprintf_r+0x1fc>)
   295ce:	1c66      	adds	r6, r4, #1
   295d0:	7629      	strb	r1, [r5, #24]
   295d2:	f000 f9e5 	bl	299a0 <memchr>
   295d6:	2800      	cmp	r0, #0
   295d8:	d046      	beq.n	29668 <_svfiprintf_r+0x1e0>
   295da:	4b2b      	ldr	r3, [pc, #172]	; (29688 <_svfiprintf_r+0x200>)
   295dc:	2b00      	cmp	r3, #0
   295de:	d12f      	bne.n	29640 <_svfiprintf_r+0x1b8>
   295e0:	6829      	ldr	r1, [r5, #0]
   295e2:	9b05      	ldr	r3, [sp, #20]
   295e4:	2207      	movs	r2, #7
   295e6:	05c9      	lsls	r1, r1, #23
   295e8:	d528      	bpl.n	2963c <_svfiprintf_r+0x1b4>
   295ea:	189b      	adds	r3, r3, r2
   295ec:	4393      	bics	r3, r2
   295ee:	3308      	adds	r3, #8
   295f0:	9305      	str	r3, [sp, #20]
   295f2:	696b      	ldr	r3, [r5, #20]
   295f4:	9a03      	ldr	r2, [sp, #12]
   295f6:	189b      	adds	r3, r3, r2
   295f8:	616b      	str	r3, [r5, #20]
   295fa:	e767      	b.n	294cc <_svfiprintf_r+0x44>
   295fc:	425b      	negs	r3, r3
   295fe:	60eb      	str	r3, [r5, #12]
   29600:	2302      	movs	r3, #2
   29602:	430b      	orrs	r3, r1
   29604:	602b      	str	r3, [r5, #0]
   29606:	e7c0      	b.n	2958a <_svfiprintf_r+0x102>
   29608:	434b      	muls	r3, r1
   2960a:	3401      	adds	r4, #1
   2960c:	189b      	adds	r3, r3, r2
   2960e:	2001      	movs	r0, #1
   29610:	e7a0      	b.n	29554 <_svfiprintf_r+0xcc>
   29612:	2301      	movs	r3, #1
   29614:	425b      	negs	r3, r3
   29616:	e7c7      	b.n	295a8 <_svfiprintf_r+0x120>
   29618:	2300      	movs	r3, #0
   2961a:	0014      	movs	r4, r2
   2961c:	200a      	movs	r0, #10
   2961e:	001a      	movs	r2, r3
   29620:	606b      	str	r3, [r5, #4]
   29622:	7821      	ldrb	r1, [r4, #0]
   29624:	3930      	subs	r1, #48	; 0x30
   29626:	2909      	cmp	r1, #9
   29628:	d903      	bls.n	29632 <_svfiprintf_r+0x1aa>
   2962a:	2b00      	cmp	r3, #0
   2962c:	d0bd      	beq.n	295aa <_svfiprintf_r+0x122>
   2962e:	9207      	str	r2, [sp, #28]
   29630:	e7bb      	b.n	295aa <_svfiprintf_r+0x122>
   29632:	4342      	muls	r2, r0
   29634:	3401      	adds	r4, #1
   29636:	1852      	adds	r2, r2, r1
   29638:	2301      	movs	r3, #1
   2963a:	e7f2      	b.n	29622 <_svfiprintf_r+0x19a>
   2963c:	3307      	adds	r3, #7
   2963e:	e7d5      	b.n	295ec <_svfiprintf_r+0x164>
   29640:	ab05      	add	r3, sp, #20
   29642:	9300      	str	r3, [sp, #0]
   29644:	003a      	movs	r2, r7
   29646:	4b11      	ldr	r3, [pc, #68]	; (2968c <_svfiprintf_r+0x204>)
   29648:	0029      	movs	r1, r5
   2964a:	9802      	ldr	r0, [sp, #8]
   2964c:	e000      	b.n	29650 <_svfiprintf_r+0x1c8>
   2964e:	bf00      	nop
   29650:	9003      	str	r0, [sp, #12]
   29652:	9b03      	ldr	r3, [sp, #12]
   29654:	3301      	adds	r3, #1
   29656:	d1cc      	bne.n	295f2 <_svfiprintf_r+0x16a>
   29658:	89bb      	ldrh	r3, [r7, #12]
   2965a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2965c:	065b      	lsls	r3, r3, #25
   2965e:	d400      	bmi.n	29662 <_svfiprintf_r+0x1da>
   29660:	e729      	b.n	294b6 <_svfiprintf_r+0x2e>
   29662:	2001      	movs	r0, #1
   29664:	4240      	negs	r0, r0
   29666:	e726      	b.n	294b6 <_svfiprintf_r+0x2e>
   29668:	ab05      	add	r3, sp, #20
   2966a:	9300      	str	r3, [sp, #0]
   2966c:	003a      	movs	r2, r7
   2966e:	4b07      	ldr	r3, [pc, #28]	; (2968c <_svfiprintf_r+0x204>)
   29670:	0029      	movs	r1, r5
   29672:	9802      	ldr	r0, [sp, #8]
   29674:	f000 f87a 	bl	2976c <_printf_i>
   29678:	e7ea      	b.n	29650 <_svfiprintf_r+0x1c8>
   2967a:	46c0      	nop			; (mov r8, r8)
   2967c:	0002af18 	.word	0x0002af18
   29680:	0002af1e 	.word	0x0002af1e
   29684:	0002af22 	.word	0x0002af22
   29688:	00000000 	.word	0x00000000
   2968c:	000293c5 	.word	0x000293c5

00029690 <_printf_common>:
   29690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29692:	0015      	movs	r5, r2
   29694:	9301      	str	r3, [sp, #4]
   29696:	688a      	ldr	r2, [r1, #8]
   29698:	690b      	ldr	r3, [r1, #16]
   2969a:	9000      	str	r0, [sp, #0]
   2969c:	000c      	movs	r4, r1
   2969e:	4293      	cmp	r3, r2
   296a0:	da00      	bge.n	296a4 <_printf_common+0x14>
   296a2:	0013      	movs	r3, r2
   296a4:	0022      	movs	r2, r4
   296a6:	602b      	str	r3, [r5, #0]
   296a8:	3243      	adds	r2, #67	; 0x43
   296aa:	7812      	ldrb	r2, [r2, #0]
   296ac:	2a00      	cmp	r2, #0
   296ae:	d001      	beq.n	296b4 <_printf_common+0x24>
   296b0:	3301      	adds	r3, #1
   296b2:	602b      	str	r3, [r5, #0]
   296b4:	6823      	ldr	r3, [r4, #0]
   296b6:	069b      	lsls	r3, r3, #26
   296b8:	d502      	bpl.n	296c0 <_printf_common+0x30>
   296ba:	682b      	ldr	r3, [r5, #0]
   296bc:	3302      	adds	r3, #2
   296be:	602b      	str	r3, [r5, #0]
   296c0:	2706      	movs	r7, #6
   296c2:	6823      	ldr	r3, [r4, #0]
   296c4:	401f      	ands	r7, r3
   296c6:	d027      	beq.n	29718 <_printf_common+0x88>
   296c8:	0023      	movs	r3, r4
   296ca:	3343      	adds	r3, #67	; 0x43
   296cc:	781b      	ldrb	r3, [r3, #0]
   296ce:	1e5a      	subs	r2, r3, #1
   296d0:	4193      	sbcs	r3, r2
   296d2:	6822      	ldr	r2, [r4, #0]
   296d4:	0692      	lsls	r2, r2, #26
   296d6:	d430      	bmi.n	2973a <_printf_common+0xaa>
   296d8:	0022      	movs	r2, r4
   296da:	9901      	ldr	r1, [sp, #4]
   296dc:	3243      	adds	r2, #67	; 0x43
   296de:	9800      	ldr	r0, [sp, #0]
   296e0:	9e08      	ldr	r6, [sp, #32]
   296e2:	47b0      	blx	r6
   296e4:	1c43      	adds	r3, r0, #1
   296e6:	d025      	beq.n	29734 <_printf_common+0xa4>
   296e8:	2306      	movs	r3, #6
   296ea:	6820      	ldr	r0, [r4, #0]
   296ec:	682a      	ldr	r2, [r5, #0]
   296ee:	68e1      	ldr	r1, [r4, #12]
   296f0:	4003      	ands	r3, r0
   296f2:	2500      	movs	r5, #0
   296f4:	2b04      	cmp	r3, #4
   296f6:	d103      	bne.n	29700 <_printf_common+0x70>
   296f8:	1a8d      	subs	r5, r1, r2
   296fa:	43eb      	mvns	r3, r5
   296fc:	17db      	asrs	r3, r3, #31
   296fe:	401d      	ands	r5, r3
   29700:	68a3      	ldr	r3, [r4, #8]
   29702:	6922      	ldr	r2, [r4, #16]
   29704:	4293      	cmp	r3, r2
   29706:	dd01      	ble.n	2970c <_printf_common+0x7c>
   29708:	1a9b      	subs	r3, r3, r2
   2970a:	18ed      	adds	r5, r5, r3
   2970c:	2700      	movs	r7, #0
   2970e:	42bd      	cmp	r5, r7
   29710:	d120      	bne.n	29754 <_printf_common+0xc4>
   29712:	2000      	movs	r0, #0
   29714:	e010      	b.n	29738 <_printf_common+0xa8>
   29716:	3701      	adds	r7, #1
   29718:	68e3      	ldr	r3, [r4, #12]
   2971a:	682a      	ldr	r2, [r5, #0]
   2971c:	1a9b      	subs	r3, r3, r2
   2971e:	429f      	cmp	r7, r3
   29720:	dad2      	bge.n	296c8 <_printf_common+0x38>
   29722:	0022      	movs	r2, r4
   29724:	2301      	movs	r3, #1
   29726:	3219      	adds	r2, #25
   29728:	9901      	ldr	r1, [sp, #4]
   2972a:	9800      	ldr	r0, [sp, #0]
   2972c:	9e08      	ldr	r6, [sp, #32]
   2972e:	47b0      	blx	r6
   29730:	1c43      	adds	r3, r0, #1
   29732:	d1f0      	bne.n	29716 <_printf_common+0x86>
   29734:	2001      	movs	r0, #1
   29736:	4240      	negs	r0, r0
   29738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2973a:	2030      	movs	r0, #48	; 0x30
   2973c:	18e1      	adds	r1, r4, r3
   2973e:	3143      	adds	r1, #67	; 0x43
   29740:	7008      	strb	r0, [r1, #0]
   29742:	0021      	movs	r1, r4
   29744:	1c5a      	adds	r2, r3, #1
   29746:	3145      	adds	r1, #69	; 0x45
   29748:	7809      	ldrb	r1, [r1, #0]
   2974a:	18a2      	adds	r2, r4, r2
   2974c:	3243      	adds	r2, #67	; 0x43
   2974e:	3302      	adds	r3, #2
   29750:	7011      	strb	r1, [r2, #0]
   29752:	e7c1      	b.n	296d8 <_printf_common+0x48>
   29754:	0022      	movs	r2, r4
   29756:	2301      	movs	r3, #1
   29758:	321a      	adds	r2, #26
   2975a:	9901      	ldr	r1, [sp, #4]
   2975c:	9800      	ldr	r0, [sp, #0]
   2975e:	9e08      	ldr	r6, [sp, #32]
   29760:	47b0      	blx	r6
   29762:	1c43      	adds	r3, r0, #1
   29764:	d0e6      	beq.n	29734 <_printf_common+0xa4>
   29766:	3701      	adds	r7, #1
   29768:	e7d1      	b.n	2970e <_printf_common+0x7e>
	...

0002976c <_printf_i>:
   2976c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2976e:	b08b      	sub	sp, #44	; 0x2c
   29770:	9206      	str	r2, [sp, #24]
   29772:	000a      	movs	r2, r1
   29774:	3243      	adds	r2, #67	; 0x43
   29776:	9307      	str	r3, [sp, #28]
   29778:	9005      	str	r0, [sp, #20]
   2977a:	9204      	str	r2, [sp, #16]
   2977c:	7e0a      	ldrb	r2, [r1, #24]
   2977e:	000c      	movs	r4, r1
   29780:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29782:	2a6e      	cmp	r2, #110	; 0x6e
   29784:	d100      	bne.n	29788 <_printf_i+0x1c>
   29786:	e08f      	b.n	298a8 <_printf_i+0x13c>
   29788:	d817      	bhi.n	297ba <_printf_i+0x4e>
   2978a:	2a63      	cmp	r2, #99	; 0x63
   2978c:	d02c      	beq.n	297e8 <_printf_i+0x7c>
   2978e:	d808      	bhi.n	297a2 <_printf_i+0x36>
   29790:	2a00      	cmp	r2, #0
   29792:	d100      	bne.n	29796 <_printf_i+0x2a>
   29794:	e099      	b.n	298ca <_printf_i+0x15e>
   29796:	2a58      	cmp	r2, #88	; 0x58
   29798:	d054      	beq.n	29844 <_printf_i+0xd8>
   2979a:	0026      	movs	r6, r4
   2979c:	3642      	adds	r6, #66	; 0x42
   2979e:	7032      	strb	r2, [r6, #0]
   297a0:	e029      	b.n	297f6 <_printf_i+0x8a>
   297a2:	2a64      	cmp	r2, #100	; 0x64
   297a4:	d001      	beq.n	297aa <_printf_i+0x3e>
   297a6:	2a69      	cmp	r2, #105	; 0x69
   297a8:	d1f7      	bne.n	2979a <_printf_i+0x2e>
   297aa:	6821      	ldr	r1, [r4, #0]
   297ac:	681a      	ldr	r2, [r3, #0]
   297ae:	0608      	lsls	r0, r1, #24
   297b0:	d523      	bpl.n	297fa <_printf_i+0x8e>
   297b2:	1d11      	adds	r1, r2, #4
   297b4:	6019      	str	r1, [r3, #0]
   297b6:	6815      	ldr	r5, [r2, #0]
   297b8:	e025      	b.n	29806 <_printf_i+0x9a>
   297ba:	2a73      	cmp	r2, #115	; 0x73
   297bc:	d100      	bne.n	297c0 <_printf_i+0x54>
   297be:	e088      	b.n	298d2 <_printf_i+0x166>
   297c0:	d808      	bhi.n	297d4 <_printf_i+0x68>
   297c2:	2a6f      	cmp	r2, #111	; 0x6f
   297c4:	d029      	beq.n	2981a <_printf_i+0xae>
   297c6:	2a70      	cmp	r2, #112	; 0x70
   297c8:	d1e7      	bne.n	2979a <_printf_i+0x2e>
   297ca:	2220      	movs	r2, #32
   297cc:	6809      	ldr	r1, [r1, #0]
   297ce:	430a      	orrs	r2, r1
   297d0:	6022      	str	r2, [r4, #0]
   297d2:	e003      	b.n	297dc <_printf_i+0x70>
   297d4:	2a75      	cmp	r2, #117	; 0x75
   297d6:	d020      	beq.n	2981a <_printf_i+0xae>
   297d8:	2a78      	cmp	r2, #120	; 0x78
   297da:	d1de      	bne.n	2979a <_printf_i+0x2e>
   297dc:	0022      	movs	r2, r4
   297de:	2178      	movs	r1, #120	; 0x78
   297e0:	3245      	adds	r2, #69	; 0x45
   297e2:	7011      	strb	r1, [r2, #0]
   297e4:	4a6c      	ldr	r2, [pc, #432]	; (29998 <_printf_i+0x22c>)
   297e6:	e030      	b.n	2984a <_printf_i+0xde>
   297e8:	000e      	movs	r6, r1
   297ea:	681a      	ldr	r2, [r3, #0]
   297ec:	3642      	adds	r6, #66	; 0x42
   297ee:	1d11      	adds	r1, r2, #4
   297f0:	6019      	str	r1, [r3, #0]
   297f2:	6813      	ldr	r3, [r2, #0]
   297f4:	7033      	strb	r3, [r6, #0]
   297f6:	2301      	movs	r3, #1
   297f8:	e079      	b.n	298ee <_printf_i+0x182>
   297fa:	0649      	lsls	r1, r1, #25
   297fc:	d5d9      	bpl.n	297b2 <_printf_i+0x46>
   297fe:	1d11      	adds	r1, r2, #4
   29800:	6019      	str	r1, [r3, #0]
   29802:	2300      	movs	r3, #0
   29804:	5ed5      	ldrsh	r5, [r2, r3]
   29806:	2d00      	cmp	r5, #0
   29808:	da03      	bge.n	29812 <_printf_i+0xa6>
   2980a:	232d      	movs	r3, #45	; 0x2d
   2980c:	9a04      	ldr	r2, [sp, #16]
   2980e:	426d      	negs	r5, r5
   29810:	7013      	strb	r3, [r2, #0]
   29812:	4b62      	ldr	r3, [pc, #392]	; (2999c <_printf_i+0x230>)
   29814:	270a      	movs	r7, #10
   29816:	9303      	str	r3, [sp, #12]
   29818:	e02f      	b.n	2987a <_printf_i+0x10e>
   2981a:	6820      	ldr	r0, [r4, #0]
   2981c:	6819      	ldr	r1, [r3, #0]
   2981e:	0605      	lsls	r5, r0, #24
   29820:	d503      	bpl.n	2982a <_printf_i+0xbe>
   29822:	1d08      	adds	r0, r1, #4
   29824:	6018      	str	r0, [r3, #0]
   29826:	680d      	ldr	r5, [r1, #0]
   29828:	e005      	b.n	29836 <_printf_i+0xca>
   2982a:	0640      	lsls	r0, r0, #25
   2982c:	d5f9      	bpl.n	29822 <_printf_i+0xb6>
   2982e:	680d      	ldr	r5, [r1, #0]
   29830:	1d08      	adds	r0, r1, #4
   29832:	6018      	str	r0, [r3, #0]
   29834:	b2ad      	uxth	r5, r5
   29836:	4b59      	ldr	r3, [pc, #356]	; (2999c <_printf_i+0x230>)
   29838:	2708      	movs	r7, #8
   2983a:	9303      	str	r3, [sp, #12]
   2983c:	2a6f      	cmp	r2, #111	; 0x6f
   2983e:	d018      	beq.n	29872 <_printf_i+0x106>
   29840:	270a      	movs	r7, #10
   29842:	e016      	b.n	29872 <_printf_i+0x106>
   29844:	3145      	adds	r1, #69	; 0x45
   29846:	700a      	strb	r2, [r1, #0]
   29848:	4a54      	ldr	r2, [pc, #336]	; (2999c <_printf_i+0x230>)
   2984a:	9203      	str	r2, [sp, #12]
   2984c:	681a      	ldr	r2, [r3, #0]
   2984e:	6821      	ldr	r1, [r4, #0]
   29850:	1d10      	adds	r0, r2, #4
   29852:	6018      	str	r0, [r3, #0]
   29854:	6815      	ldr	r5, [r2, #0]
   29856:	0608      	lsls	r0, r1, #24
   29858:	d522      	bpl.n	298a0 <_printf_i+0x134>
   2985a:	07cb      	lsls	r3, r1, #31
   2985c:	d502      	bpl.n	29864 <_printf_i+0xf8>
   2985e:	2320      	movs	r3, #32
   29860:	4319      	orrs	r1, r3
   29862:	6021      	str	r1, [r4, #0]
   29864:	2710      	movs	r7, #16
   29866:	2d00      	cmp	r5, #0
   29868:	d103      	bne.n	29872 <_printf_i+0x106>
   2986a:	2320      	movs	r3, #32
   2986c:	6822      	ldr	r2, [r4, #0]
   2986e:	439a      	bics	r2, r3
   29870:	6022      	str	r2, [r4, #0]
   29872:	0023      	movs	r3, r4
   29874:	2200      	movs	r2, #0
   29876:	3343      	adds	r3, #67	; 0x43
   29878:	701a      	strb	r2, [r3, #0]
   2987a:	6863      	ldr	r3, [r4, #4]
   2987c:	60a3      	str	r3, [r4, #8]
   2987e:	2b00      	cmp	r3, #0
   29880:	db5c      	blt.n	2993c <_printf_i+0x1d0>
   29882:	2204      	movs	r2, #4
   29884:	6821      	ldr	r1, [r4, #0]
   29886:	4391      	bics	r1, r2
   29888:	6021      	str	r1, [r4, #0]
   2988a:	2d00      	cmp	r5, #0
   2988c:	d158      	bne.n	29940 <_printf_i+0x1d4>
   2988e:	9e04      	ldr	r6, [sp, #16]
   29890:	2b00      	cmp	r3, #0
   29892:	d064      	beq.n	2995e <_printf_i+0x1f2>
   29894:	0026      	movs	r6, r4
   29896:	9b03      	ldr	r3, [sp, #12]
   29898:	3642      	adds	r6, #66	; 0x42
   2989a:	781b      	ldrb	r3, [r3, #0]
   2989c:	7033      	strb	r3, [r6, #0]
   2989e:	e05e      	b.n	2995e <_printf_i+0x1f2>
   298a0:	0648      	lsls	r0, r1, #25
   298a2:	d5da      	bpl.n	2985a <_printf_i+0xee>
   298a4:	b2ad      	uxth	r5, r5
   298a6:	e7d8      	b.n	2985a <_printf_i+0xee>
   298a8:	6809      	ldr	r1, [r1, #0]
   298aa:	681a      	ldr	r2, [r3, #0]
   298ac:	0608      	lsls	r0, r1, #24
   298ae:	d505      	bpl.n	298bc <_printf_i+0x150>
   298b0:	1d11      	adds	r1, r2, #4
   298b2:	6019      	str	r1, [r3, #0]
   298b4:	6813      	ldr	r3, [r2, #0]
   298b6:	6962      	ldr	r2, [r4, #20]
   298b8:	601a      	str	r2, [r3, #0]
   298ba:	e006      	b.n	298ca <_printf_i+0x15e>
   298bc:	0649      	lsls	r1, r1, #25
   298be:	d5f7      	bpl.n	298b0 <_printf_i+0x144>
   298c0:	1d11      	adds	r1, r2, #4
   298c2:	6019      	str	r1, [r3, #0]
   298c4:	6813      	ldr	r3, [r2, #0]
   298c6:	8aa2      	ldrh	r2, [r4, #20]
   298c8:	801a      	strh	r2, [r3, #0]
   298ca:	2300      	movs	r3, #0
   298cc:	9e04      	ldr	r6, [sp, #16]
   298ce:	6123      	str	r3, [r4, #16]
   298d0:	e054      	b.n	2997c <_printf_i+0x210>
   298d2:	681a      	ldr	r2, [r3, #0]
   298d4:	1d11      	adds	r1, r2, #4
   298d6:	6019      	str	r1, [r3, #0]
   298d8:	6816      	ldr	r6, [r2, #0]
   298da:	2100      	movs	r1, #0
   298dc:	6862      	ldr	r2, [r4, #4]
   298de:	0030      	movs	r0, r6
   298e0:	f000 f85e 	bl	299a0 <memchr>
   298e4:	2800      	cmp	r0, #0
   298e6:	d001      	beq.n	298ec <_printf_i+0x180>
   298e8:	1b80      	subs	r0, r0, r6
   298ea:	6060      	str	r0, [r4, #4]
   298ec:	6863      	ldr	r3, [r4, #4]
   298ee:	6123      	str	r3, [r4, #16]
   298f0:	2300      	movs	r3, #0
   298f2:	9a04      	ldr	r2, [sp, #16]
   298f4:	7013      	strb	r3, [r2, #0]
   298f6:	e041      	b.n	2997c <_printf_i+0x210>
   298f8:	6923      	ldr	r3, [r4, #16]
   298fa:	0032      	movs	r2, r6
   298fc:	9906      	ldr	r1, [sp, #24]
   298fe:	9805      	ldr	r0, [sp, #20]
   29900:	9d07      	ldr	r5, [sp, #28]
   29902:	47a8      	blx	r5
   29904:	1c43      	adds	r3, r0, #1
   29906:	d043      	beq.n	29990 <_printf_i+0x224>
   29908:	6823      	ldr	r3, [r4, #0]
   2990a:	2500      	movs	r5, #0
   2990c:	079b      	lsls	r3, r3, #30
   2990e:	d40f      	bmi.n	29930 <_printf_i+0x1c4>
   29910:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29912:	68e0      	ldr	r0, [r4, #12]
   29914:	4298      	cmp	r0, r3
   29916:	da3d      	bge.n	29994 <_printf_i+0x228>
   29918:	0018      	movs	r0, r3
   2991a:	e03b      	b.n	29994 <_printf_i+0x228>
   2991c:	0022      	movs	r2, r4
   2991e:	2301      	movs	r3, #1
   29920:	3219      	adds	r2, #25
   29922:	9906      	ldr	r1, [sp, #24]
   29924:	9805      	ldr	r0, [sp, #20]
   29926:	9e07      	ldr	r6, [sp, #28]
   29928:	47b0      	blx	r6
   2992a:	1c43      	adds	r3, r0, #1
   2992c:	d030      	beq.n	29990 <_printf_i+0x224>
   2992e:	3501      	adds	r5, #1
   29930:	68e3      	ldr	r3, [r4, #12]
   29932:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29934:	1a9b      	subs	r3, r3, r2
   29936:	429d      	cmp	r5, r3
   29938:	dbf0      	blt.n	2991c <_printf_i+0x1b0>
   2993a:	e7e9      	b.n	29910 <_printf_i+0x1a4>
   2993c:	2d00      	cmp	r5, #0
   2993e:	d0a9      	beq.n	29894 <_printf_i+0x128>
   29940:	9e04      	ldr	r6, [sp, #16]
   29942:	0028      	movs	r0, r5
   29944:	0039      	movs	r1, r7
   29946:	f7fc fe5f 	bl	26608 <__aeabi_uidivmod>
   2994a:	9b03      	ldr	r3, [sp, #12]
   2994c:	3e01      	subs	r6, #1
   2994e:	5c5b      	ldrb	r3, [r3, r1]
   29950:	0028      	movs	r0, r5
   29952:	7033      	strb	r3, [r6, #0]
   29954:	0039      	movs	r1, r7
   29956:	f7fc fdd1 	bl	264fc <__udivsi3>
   2995a:	1e05      	subs	r5, r0, #0
   2995c:	d1f1      	bne.n	29942 <_printf_i+0x1d6>
   2995e:	2f08      	cmp	r7, #8
   29960:	d109      	bne.n	29976 <_printf_i+0x20a>
   29962:	6823      	ldr	r3, [r4, #0]
   29964:	07db      	lsls	r3, r3, #31
   29966:	d506      	bpl.n	29976 <_printf_i+0x20a>
   29968:	6863      	ldr	r3, [r4, #4]
   2996a:	6922      	ldr	r2, [r4, #16]
   2996c:	4293      	cmp	r3, r2
   2996e:	dc02      	bgt.n	29976 <_printf_i+0x20a>
   29970:	2330      	movs	r3, #48	; 0x30
   29972:	3e01      	subs	r6, #1
   29974:	7033      	strb	r3, [r6, #0]
   29976:	9b04      	ldr	r3, [sp, #16]
   29978:	1b9b      	subs	r3, r3, r6
   2997a:	6123      	str	r3, [r4, #16]
   2997c:	9b07      	ldr	r3, [sp, #28]
   2997e:	aa09      	add	r2, sp, #36	; 0x24
   29980:	9300      	str	r3, [sp, #0]
   29982:	0021      	movs	r1, r4
   29984:	9b06      	ldr	r3, [sp, #24]
   29986:	9805      	ldr	r0, [sp, #20]
   29988:	f7ff fe82 	bl	29690 <_printf_common>
   2998c:	1c43      	adds	r3, r0, #1
   2998e:	d1b3      	bne.n	298f8 <_printf_i+0x18c>
   29990:	2001      	movs	r0, #1
   29992:	4240      	negs	r0, r0
   29994:	b00b      	add	sp, #44	; 0x2c
   29996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29998:	0002af3a 	.word	0x0002af3a
   2999c:	0002af29 	.word	0x0002af29

000299a0 <memchr>:
   299a0:	b2c9      	uxtb	r1, r1
   299a2:	1882      	adds	r2, r0, r2
   299a4:	4290      	cmp	r0, r2
   299a6:	d101      	bne.n	299ac <memchr+0xc>
   299a8:	2000      	movs	r0, #0
   299aa:	4770      	bx	lr
   299ac:	7803      	ldrb	r3, [r0, #0]
   299ae:	428b      	cmp	r3, r1
   299b0:	d0fb      	beq.n	299aa <memchr+0xa>
   299b2:	3001      	adds	r0, #1
   299b4:	e7f6      	b.n	299a4 <memchr+0x4>

000299b6 <_realloc_r>:
   299b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   299b8:	0007      	movs	r7, r0
   299ba:	000d      	movs	r5, r1
   299bc:	0016      	movs	r6, r2
   299be:	2900      	cmp	r1, #0
   299c0:	d105      	bne.n	299ce <_realloc_r+0x18>
   299c2:	0011      	movs	r1, r2
   299c4:	f7ff fa86 	bl	28ed4 <_malloc_r>
   299c8:	0004      	movs	r4, r0
   299ca:	0020      	movs	r0, r4
   299cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   299ce:	2a00      	cmp	r2, #0
   299d0:	d103      	bne.n	299da <_realloc_r+0x24>
   299d2:	f7ff fa35 	bl	28e40 <_free_r>
   299d6:	0034      	movs	r4, r6
   299d8:	e7f7      	b.n	299ca <_realloc_r+0x14>
   299da:	f000 f812 	bl	29a02 <_malloc_usable_size_r>
   299de:	002c      	movs	r4, r5
   299e0:	4286      	cmp	r6, r0
   299e2:	d9f2      	bls.n	299ca <_realloc_r+0x14>
   299e4:	0031      	movs	r1, r6
   299e6:	0038      	movs	r0, r7
   299e8:	f7ff fa74 	bl	28ed4 <_malloc_r>
   299ec:	1e04      	subs	r4, r0, #0
   299ee:	d0ec      	beq.n	299ca <_realloc_r+0x14>
   299f0:	0029      	movs	r1, r5
   299f2:	0032      	movs	r2, r6
   299f4:	f7ff f9f2 	bl	28ddc <memcpy>
   299f8:	0029      	movs	r1, r5
   299fa:	0038      	movs	r0, r7
   299fc:	f7ff fa20 	bl	28e40 <_free_r>
   29a00:	e7e3      	b.n	299ca <_realloc_r+0x14>

00029a02 <_malloc_usable_size_r>:
   29a02:	1f0b      	subs	r3, r1, #4
   29a04:	681b      	ldr	r3, [r3, #0]
   29a06:	1f18      	subs	r0, r3, #4
   29a08:	2b00      	cmp	r3, #0
   29a0a:	da01      	bge.n	29a10 <_malloc_usable_size_r+0xe>
   29a0c:	580b      	ldr	r3, [r1, r0]
   29a0e:	18c0      	adds	r0, r0, r3
   29a10:	4770      	bx	lr
   29a12:	0000      	movs	r0, r0
   29a14:	30303030 	.word	0x30303030
   29a18:	30303030 	.word	0x30303030
   29a1c:	00003030 	.word	0x00003030
   29a20:	2e707466 	.word	0x2e707466
   29a24:	76697264 	.word	0x76697264
   29a28:	2e716865 	.word	0x2e716865
   29a2c:	006d6f63 	.word	0x006d6f63
   29a30:	7269662f 	.word	0x7269662f
   29a34:	7261776d 	.word	0x7261776d
   29a38:	00002f65 	.word	0x00002f65
   29a3c:	75686172 	.word	0x75686172
   29a40:	61726e6c 	.word	0x61726e6c
   29a44:	646f6874 	.word	0x646f6874
   29a48:	006c636b 	.word	0x006c636b
   29a4c:	34333231 	.word	0x34333231
   29a50:	38373635 	.word	0x38373635
   29a54:	00000039 	.word	0x00000039
   29a58:	6d726966 	.word	0x6d726966
   29a5c:	65726177 	.word	0x65726177
   29a60:	6e69622e 	.word	0x6e69622e
   29a64:	00000000 	.word	0x00000000
   29a68:	31343037 	.word	0x31343037
   29a6c:	39363931 	.word	0x39363931
   29a70:	00003935 	.word	0x00003935
   29a74:	38393637 	.word	0x38393637
   29a78:	32393334 	.word	0x32393334
   29a7c:	00003130 	.word	0x00003130
   29a80:	33383337 	.word	0x33383337
   29a84:	32343136 	.word	0x32343136
   29a88:	00003431 	.word	0x00003431
   29a8c:	33383337 	.word	0x33383337
   29a90:	36323236 	.word	0x36323236
   29a94:	00003837 	.word	0x00003837
   29a98:	36383539 	.word	0x36383539
   29a9c:	39353331 	.word	0x39353331
   29aa0:	00003837 	.word	0x00003837
   29aa4:	00003a50 	.word	0x00003a50
   29aa8:	00003a53 	.word	0x00003a53
   29aac:	0000000a 	.word	0x0000000a
   29ab0:	00006425 	.word	0x00006425
   29ab4:	204d5347 	.word	0x204d5347
   29ab8:	656d6954 	.word	0x656d6954
   29abc:	0074756f 	.word	0x0074756f
   29ac0:	4f525245 	.word	0x4f525245
   29ac4:	00000052 	.word	0x00000052
   29ac8:	00004b4f 	.word	0x00004b4f
   29acc:	000d5441 	.word	0x000d5441
   29ad0:	492b5441 	.word	0x492b5441
   29ad4:	303d4346 	.word	0x303d4346
   29ad8:	000d302c 	.word	0x000d302c
   29adc:	4552432b 	.word	0x4552432b
   29ae0:	30203a47 	.word	0x30203a47
   29ae4:	0000312c 	.word	0x0000312c
   29ae8:	432b5441 	.word	0x432b5441
   29aec:	3f474552 	.word	0x3f474552
   29af0:	0000000d 	.word	0x0000000d
   29af4:	4552432b 	.word	0x4552432b
   29af8:	30203a47 	.word	0x30203a47
   29afc:	0000352c 	.word	0x0000352c
   29b00:	492b5441 	.word	0x492b5441
   29b04:	253d5250 	.word	0x253d5250
   29b08:	00000d64 	.word	0x00000d64
   29b0c:	492b5441 	.word	0x492b5441
   29b10:	303d5250 	.word	0x303d5250
   29b14:	0000000d 	.word	0x0000000d
   29b18:	432b5441 	.word	0x432b5441
   29b1c:	3d474552 	.word	0x3d474552
   29b20:	00000d31 	.word	0x00000d31
   29b24:	432b5441 	.word	0x432b5441
   29b28:	3d4e5546 	.word	0x3d4e5546
   29b2c:	00000d31 	.word	0x00000d31
   29b30:	5546432b 	.word	0x5546432b
   29b34:	31203a4e 	.word	0x31203a4e
   29b38:	00000000 	.word	0x00000000
   29b3c:	432b5441 	.word	0x432b5441
   29b40:	3f4e5546 	.word	0x3f4e5546
   29b44:	0000000d 	.word	0x0000000d
   29b48:	432b5441 	.word	0x432b5441
   29b4c:	3d4e5546 	.word	0x3d4e5546
   29b50:	00000d30 	.word	0x00000d30
   29b54:	5546432b 	.word	0x5546432b
   29b58:	30203a4e 	.word	0x30203a4e
   29b5c:	00000000 	.word	0x00000000
   29b60:	432b5441 	.word	0x432b5441
   29b64:	3d4e5546 	.word	0x3d4e5546
   29b68:	0d312c31 	.word	0x0d312c31
   29b6c:	00000000 	.word	0x00000000
   29b70:	4950432b 	.word	0x4950432b
   29b74:	52203a4e 	.word	0x52203a4e
   29b78:	59444145 	.word	0x59444145
   29b7c:	00000000 	.word	0x00000000
   29b80:	432b5441 	.word	0x432b5441
   29b84:	3f4e4950 	.word	0x3f4e4950
   29b88:	0000000d 	.word	0x0000000d
   29b8c:	432b5441 	.word	0x432b5441
   29b90:	4144474d 	.word	0x4144474d
   29b94:	4544223d 	.word	0x4544223d
   29b98:	4c41204c 	.word	0x4c41204c
   29b9c:	000d224c 	.word	0x000d224c
   29ba0:	57265441 	.word	0x57265441
   29ba4:	0000000d 	.word	0x0000000d
   29ba8:	432b5441 	.word	0x432b5441
   29bac:	3d50494c 	.word	0x3d50494c
   29bb0:	00000d31 	.word	0x00000d31
   29bb4:	432b5441 	.word	0x432b5441
   29bb8:	3d504c4f 	.word	0x3d504c4f
   29bbc:	00000d31 	.word	0x00000d31
   29bc0:	432b5441 	.word	0x432b5441
   29bc4:	4b4c4353 	.word	0x4b4c4353
   29bc8:	000d313d 	.word	0x000d313d
   29bcc:	432b5441 	.word	0x432b5441
   29bd0:	3f504c4f 	.word	0x3f504c4f
   29bd4:	0000000d 	.word	0x0000000d
   29bd8:	4c4f432b 	.word	0x4c4f432b
   29bdc:	00000050 	.word	0x00000050
   29be0:	0000003a 	.word	0x0000003a
   29be4:	0000002c 	.word	0x0000002c
   29be8:	432b5441 	.word	0x432b5441
   29bec:	3d43434c 	.word	0x3d43434c
   29bf0:	00000d31 	.word	0x00000d31
   29bf4:	46265441 	.word	0x46265441
   29bf8:	0000000d 	.word	0x0000000d
   29bfc:	30455441 	.word	0x30455441
   29c00:	0000000d 	.word	0x0000000d
   29c04:	432b5441 	.word	0x432b5441
   29c08:	3d46474d 	.word	0x3d46474d
   29c0c:	00000d31 	.word	0x00000d31
   29c10:	432b5441 	.word	0x432b5441
   29c14:	3d504d53 	.word	0x3d504d53
   29c18:	312c3731 	.word	0x312c3731
   29c1c:	302c3736 	.word	0x302c3736
   29c20:	000d302c 	.word	0x000d302c
   29c24:	432b5441 	.word	0x432b5441
   29c28:	3d534153 	.word	0x3d534153
   29c2c:	00000d30 	.word	0x00000d30
   29c30:	432b5441 	.word	0x432b5441
   29c34:	3d534153 	.word	0x3d534153
   29c38:	00000d31 	.word	0x00000d31
   29c3c:	432b5441 	.word	0x432b5441
   29c40:	000d5153 	.word	0x000d5153
   29c44:	00003939 	.word	0x00003939
   29c48:	432b5441 	.word	0x432b5441
   29c4c:	3d494d4e 	.word	0x3d494d4e
   29c50:	2c312c32 	.word	0x2c312c32
   29c54:	2c302c30 	.word	0x2c302c30
   29c58:	00000d30 	.word	0x00000d30
   29c5c:	432b5441 	.word	0x432b5441
   29c60:	3d494d4e 	.word	0x3d494d4e
   29c64:	2c302c31 	.word	0x2c302c31
   29c68:	2c302c30 	.word	0x2c302c30
   29c6c:	00000d30 	.word	0x00000d30
   29c70:	432b5441 	.word	0x432b5441
   29c74:	3d53474d 	.word	0x3d53474d
   29c78:	22732522 	.word	0x22732522
   29c7c:	0000000d 	.word	0x0000000d
   29c80:	0000003e 	.word	0x0000003e
   29c84:	0d1a7325 	.word	0x0d1a7325
   29c88:	00000000 	.word	0x00000000
   29c8c:	432b5441 	.word	0x432b5441
   29c90:	3d4c474d 	.word	0x3d4c474d
   29c94:	43455222 	.word	0x43455222
   29c98:	524e5520 	.word	0x524e5520
   29c9c:	22444145 	.word	0x22444145
   29ca0:	0000000d 	.word	0x0000000d
   29ca4:	432b5441 	.word	0x432b5441
   29ca8:	3d4c474d 	.word	0x3d4c474d
   29cac:	43455222 	.word	0x43455222
   29cb0:	41455220 	.word	0x41455220
   29cb4:	000d2244 	.word	0x000d2244
   29cb8:	432b5441 	.word	0x432b5441
   29cbc:	3d4c474d 	.word	0x3d4c474d
   29cc0:	4c4c4122 	.word	0x4c4c4122
   29cc4:	00000d22 	.word	0x00000d22
   29cc8:	4c474d43 	.word	0x4c474d43
   29ccc:	00000000 	.word	0x00000000
   29cd0:	432b5441 	.word	0x432b5441
   29cd4:	3d52474d 	.word	0x3d52474d
   29cd8:	000d6425 	.word	0x000d6425
   29cdc:	474d432b 	.word	0x474d432b
   29ce0:	00000052 	.word	0x00000052
   29ce4:	25445441 	.word	0x25445441
   29ce8:	000d3b73 	.word	0x000d3b73
   29cec:	0d415441 	.word	0x0d415441
   29cf0:	00000000 	.word	0x00000000
   29cf4:	432b5441 	.word	0x432b5441
   29cf8:	3d53544c 	.word	0x3d53544c
   29cfc:	00000d31 	.word	0x00000d31
   29d00:	432b5441 	.word	0x432b5441
   29d04:	3d53544c 	.word	0x3d53544c
   29d08:	00000d30 	.word	0x00000d30
   29d0c:	442b5441 	.word	0x442b5441
   29d10:	3d544544 	.word	0x3d544544
   29d14:	00000d31 	.word	0x00000d31
   29d18:	562b5441 	.word	0x562b5441
   29d1c:	223d5354 	.word	0x223d5354
   29d20:	0d227325 	.word	0x0d227325
   29d24:	00000000 	.word	0x00000000
   29d28:	432b5441 	.word	0x432b5441
   29d2c:	0d505548 	.word	0x0d505548
   29d30:	00000000 	.word	0x00000000
   29d34:	432b5441 	.word	0x432b5441
   29d38:	3d415743 	.word	0x3d415743
   29d3c:	0d302c30 	.word	0x0d302c30
   29d40:	00000000 	.word	0x00000000
   29d44:	472b5441 	.word	0x472b5441
   29d48:	55424d53 	.word	0x55424d53
   29d4c:	313d5953 	.word	0x313d5953
   29d50:	0000000d 	.word	0x0000000d
   29d54:	472b5441 	.word	0x472b5441
   29d58:	55424d53 	.word	0x55424d53
   29d5c:	303d5953 	.word	0x303d5953
   29d60:	0000000d 	.word	0x0000000d
   29d64:	432b5441 	.word	0x432b5441
   29d68:	3d434552 	.word	0x3d434552
   29d6c:	00000d35 	.word	0x00000d35
   29d70:	432b5441 	.word	0x432b5441
   29d74:	3d434552 	.word	0x3d434552
   29d78:	43222c34 	.word	0x43222c34
   29d7c:	73555c3a 	.word	0x73555c3a
   29d80:	255c7265 	.word	0x255c7265
   29d84:	6d612e63 	.word	0x6d612e63
   29d88:	302c2272 	.word	0x302c2272
   29d8c:	2c30392c 	.word	0x2c30392c
   29d90:	000d7525 	.word	0x000d7525
   29d94:	432b5441 	.word	0x432b5441
   29d98:	3f4b4c43 	.word	0x3f4b4c43
   29d9c:	0000000d 	.word	0x0000000d
   29da0:	00000022 	.word	0x00000022
   29da4:	0000002f 	.word	0x0000002f
   29da8:	0000002b 	.word	0x0000002b
   29dac:	544d432b 	.word	0x544d432b
   29db0:	00003a49 	.word	0x00003a49
   29db4:	474e4952 	.word	0x474e4952
   29db8:	00000000 	.word	0x00000000
   29dbc:	494c432b 	.word	0x494c432b
   29dc0:	00000050 	.word	0x00000050
   29dc4:	43204f4e 	.word	0x43204f4e
   29dc8:	49525241 	.word	0x49525241
   29dcc:	00005245 	.word	0x00005245
   29dd0:	59535542 	.word	0x59535542
   29dd4:	00000000 	.word	0x00000000
   29dd8:	41204f4e 	.word	0x41204f4e
   29ddc:	4557534e 	.word	0x4557534e
   29de0:	00000052 	.word	0x00000052
   29de4:	4d54442b 	.word	0x4d54442b
   29de8:	00003a46 	.word	0x00003a46
   29dec:	4552432b 	.word	0x4552432b
   29df0:	30203a43 	.word	0x30203a43
   29df4:	00000000 	.word	0x00000000
   29df8:	532b5441 	.word	0x532b5441
   29dfc:	52425041 	.word	0x52425041
   29e00:	312c333d 	.word	0x312c333d
   29e04:	4f43222c 	.word	0x4f43222c
   29e08:	5059544e 	.word	0x5059544e
   29e0c:	222c2245 	.word	0x222c2245
   29e10:	53525047 	.word	0x53525047
   29e14:	00000d22 	.word	0x00000d22
   29e18:	432b5441 	.word	0x432b5441
   29e1c:	3f53504f 	.word	0x3f53504f
   29e20:	0000000d 	.word	0x0000000d
   29e24:	504f432b 	.word	0x504f432b
   29e28:	00003a53 	.word	0x00003a53
   29e2c:	41454449 	.word	0x41454449
   29e30:	00000000 	.word	0x00000000
   29e34:	532b5441 	.word	0x532b5441
   29e38:	52425041 	.word	0x52425041
   29e3c:	312c333d 	.word	0x312c333d
   29e40:	5041222c 	.word	0x5041222c
   29e44:	222c224e 	.word	0x222c224e
   29e48:	65746e69 	.word	0x65746e69
   29e4c:	74656e72 	.word	0x74656e72
   29e50:	00000d22 	.word	0x00000d22
   29e54:	41444f56 	.word	0x41444f56
   29e58:	00000000 	.word	0x00000000
   29e5c:	532b5441 	.word	0x532b5441
   29e60:	52425041 	.word	0x52425041
   29e64:	312c333d 	.word	0x312c333d
   29e68:	5041222c 	.word	0x5041222c
   29e6c:	222c224e 	.word	0x222c224e
   29e70:	22777777 	.word	0x22777777
   29e74:	0000000d 	.word	0x0000000d
   29e78:	4c4e5342 	.word	0x4c4e5342
   29e7c:	00000000 	.word	0x00000000
   29e80:	532b5441 	.word	0x532b5441
   29e84:	52425041 	.word	0x52425041
   29e88:	312c333d 	.word	0x312c333d
   29e8c:	5041222c 	.word	0x5041222c
   29e90:	222c224e 	.word	0x222c224e
   29e94:	6c6e7362 	.word	0x6c6e7362
   29e98:	2274656e 	.word	0x2274656e
   29e9c:	0000000d 	.word	0x0000000d
   29ea0:	54524941 	.word	0x54524941
   29ea4:	00004c45 	.word	0x00004c45
   29ea8:	532b5441 	.word	0x532b5441
   29eac:	52425041 	.word	0x52425041
   29eb0:	312c333d 	.word	0x312c333d
   29eb4:	5041222c 	.word	0x5041222c
   29eb8:	222c224e 	.word	0x222c224e
   29ebc:	74726961 	.word	0x74726961
   29ec0:	70676c65 	.word	0x70676c65
   29ec4:	632e7372 	.word	0x632e7372
   29ec8:	0d226d6f 	.word	0x0d226d6f
   29ecc:	00000000 	.word	0x00000000
   29ed0:	532b5441 	.word	0x532b5441
   29ed4:	52425041 	.word	0x52425041
   29ed8:	312c333d 	.word	0x312c333d
   29edc:	5041222c 	.word	0x5041222c
   29ee0:	222c224e 	.word	0x222c224e
   29ee4:	00000d22 	.word	0x00000d22
   29ee8:	532b5441 	.word	0x532b5441
   29eec:	52425041 	.word	0x52425041
   29ef0:	312c323d 	.word	0x312c323d
   29ef4:	0000000d 	.word	0x0000000d
   29ef8:	5041532b 	.word	0x5041532b
   29efc:	203a5242 	.word	0x203a5242
   29f00:	00302c31 	.word	0x00302c31
   29f04:	5041532b 	.word	0x5041532b
   29f08:	203a5242 	.word	0x203a5242
   29f0c:	00312c31 	.word	0x00312c31
   29f10:	5041532b 	.word	0x5041532b
   29f14:	203a5242 	.word	0x203a5242
   29f18:	00322c31 	.word	0x00322c31
   29f1c:	5041532b 	.word	0x5041532b
   29f20:	203a5242 	.word	0x203a5242
   29f24:	00332c31 	.word	0x00332c31
   29f28:	532b5441 	.word	0x532b5441
   29f2c:	52425041 	.word	0x52425041
   29f30:	312c313d 	.word	0x312c313d
   29f34:	0000000d 	.word	0x0000000d
   29f38:	532b5441 	.word	0x532b5441
   29f3c:	52425041 	.word	0x52425041
   29f40:	312c303d 	.word	0x312c303d
   29f44:	0000000d 	.word	0x0000000d
   29f48:	462b5441 	.word	0x462b5441
   29f4c:	49435054 	.word	0x49435054
   29f50:	0d313d44 	.word	0x0d313d44
   29f54:	00000000 	.word	0x00000000
   29f58:	462b5441 	.word	0x462b5441
   29f5c:	45535054 	.word	0x45535054
   29f60:	223d5652 	.word	0x223d5652
   29f64:	0d227325 	.word	0x0d227325
   29f68:	00000000 	.word	0x00000000
   29f6c:	462b5441 	.word	0x462b5441
   29f70:	4e555054 	.word	0x4e555054
   29f74:	7325223d 	.word	0x7325223d
   29f78:	00000d22 	.word	0x00000d22
   29f7c:	462b5441 	.word	0x462b5441
   29f80:	57505054 	.word	0x57505054
   29f84:	7325223d 	.word	0x7325223d
   29f88:	00000d22 	.word	0x00000d22
   29f8c:	462b5441 	.word	0x462b5441
   29f90:	45475054 	.word	0x45475054
   29f94:	4d414e54 	.word	0x4d414e54
   29f98:	25223d45 	.word	0x25223d45
   29f9c:	000d2273 	.word	0x000d2273
   29fa0:	462b5441 	.word	0x462b5441
   29fa4:	45475054 	.word	0x45475054
   29fa8:	54415054 	.word	0x54415054
   29fac:	25223d48 	.word	0x25223d48
   29fb0:	000d2273 	.word	0x000d2273
   29fb4:	5054462b 	.word	0x5054462b
   29fb8:	455a4953 	.word	0x455a4953
   29fbc:	2c31203a 	.word	0x2c31203a
   29fc0:	00000000 	.word	0x00000000
   29fc4:	462b5441 	.word	0x462b5441
   29fc8:	49535054 	.word	0x49535054
   29fcc:	000d455a 	.word	0x000d455a
   29fd0:	5054462b 	.word	0x5054462b
   29fd4:	3a544547 	.word	0x3a544547
   29fd8:	312c3120 	.word	0x312c3120
   29fdc:	00000000 	.word	0x00000000
   29fe0:	462b5441 	.word	0x462b5441
   29fe4:	45475054 	.word	0x45475054
   29fe8:	0d313d54 	.word	0x0d313d54
   29fec:	00000000 	.word	0x00000000
   29ff0:	462b5441 	.word	0x462b5441
   29ff4:	45475054 	.word	0x45475054
   29ff8:	2c323d54 	.word	0x2c323d54
   29ffc:	000d6425 	.word	0x000d6425
   2a000:	5054462b 	.word	0x5054462b
   2a004:	3a544547 	.word	0x3a544547
   2a008:	00000020 	.word	0x00000020
   2a00c:	434c432b 	.word	0x434c432b
   2a010:	31203a43 	.word	0x31203a43
   2a014:	322c302c 	.word	0x322c302c
   2a018:	00000000 	.word	0x00000000
   2a01c:	434c432b 	.word	0x434c432b
   2a020:	31203a43 	.word	0x31203a43
   2a024:	332c302c 	.word	0x332c302c
   2a028:	00000000 	.word	0x00000000
   2a02c:	434c432b 	.word	0x434c432b
   2a030:	31203a43 	.word	0x31203a43
   2a034:	302c302c 	.word	0x302c302c
   2a038:	00000000 	.word	0x00000000
   2a03c:	434c432b 	.word	0x434c432b
   2a040:	31203a43 	.word	0x31203a43
   2a044:	362c302c 	.word	0x362c302c
	...
   2a050:	4e4f4d41 	.word	0x4e4f4d41
   2a054:	00000000 	.word	0x00000000
   2a058:	55475250 	.word	0x55475250
   2a05c:	00004450 	.word	0x00004450
   2a060:	54494157 	.word	0x54494157
   2a064:	00000000 	.word	0x00000000
   2a068:	204d5347 	.word	0x204d5347
   2a06c:	4c4c4143 	.word	0x4c4c4143
   2a070:	49415720 	.word	0x49415720
   2a074:	4e495454 	.word	0x4e495454
   2a078:	49442047 	.word	0x49442047
   2a07c:	4c424153 	.word	0x4c424153
   2a080:	203a2045 	.word	0x203a2045
   2a084:	43435553 	.word	0x43435553
   2a088:	00535345 	.word	0x00535345
   2a08c:	204d5347 	.word	0x204d5347
   2a090:	4c4c4143 	.word	0x4c4c4143
   2a094:	49415720 	.word	0x49415720
   2a098:	4e495454 	.word	0x4e495454
   2a09c:	49442047 	.word	0x49442047
   2a0a0:	4c424153 	.word	0x4c424153
   2a0a4:	203a2045 	.word	0x203a2045
   2a0a8:	4c494146 	.word	0x4c494146
   2a0ac:	00004445 	.word	0x00004445
   2a0b0:	41454c43 	.word	0x41454c43
   2a0b4:	4c4c4152 	.word	0x4c4c4152
   2a0b8:	00000000 	.word	0x00000000
   2a0bc:	204c4c41 	.word	0x204c4c41
   2a0c0:	52455355 	.word	0x52455355
   2a0c4:	4d554e20 	.word	0x4d554e20
   2a0c8:	53524542 	.word	0x53524542
   2a0cc:	454c4320 	.word	0x454c4320
   2a0d0:	44455241 	.word	0x44455241
   2a0d4:	00000000 	.word	0x00000000
   2a0d8:	41464544 	.word	0x41464544
   2a0dc:	00544c55 	.word	0x00544c55
   2a0e0:	204c4c41 	.word	0x204c4c41
   2a0e4:	54544553 	.word	0x54544553
   2a0e8:	53474e49 	.word	0x53474e49
   2a0ec:	45524120 	.word	0x45524120
   2a0f0:	574f4e20 	.word	0x574f4e20
   2a0f4:	43414620 	.word	0x43414620
   2a0f8:	59524f54 	.word	0x59524f54
   2a0fc:	46454420 	.word	0x46454420
   2a100:	544c5541 	.word	0x544c5541
   2a104:	00000000 	.word	0x00000000
   2a108:	004d554e 	.word	0x004d554e
   2a10c:	4e206f4e 	.word	0x4e206f4e
   2a110:	65626d75 	.word	0x65626d75
   2a114:	45207372 	.word	0x45207372
   2a118:	74736978 	.word	0x74736978
   2a11c:	00000073 	.word	0x00000073
   2a120:	45534552 	.word	0x45534552
   2a124:	00000054 	.word	0x00000054
   2a128:	00444944 	.word	0x00444944
   2a12c:	00756c25 	.word	0x00756c25
   2a130:	4f545541 	.word	0x4f545541
   2a134:	00004e4f 	.word	0x00004e4f
   2a138:	4f544f4d 	.word	0x4f544f4d
   2a13c:	55412052 	.word	0x55412052
   2a140:	4e4f4f54 	.word	0x4e4f4f54
   2a144:	004e4f20 	.word	0x004e4f20
   2a148:	4f545541 	.word	0x4f545541
   2a14c:	0046464f 	.word	0x0046464f
   2a150:	4f544f4d 	.word	0x4f544f4d
   2a154:	55412052 	.word	0x55412052
   2a158:	4e4f4f54 	.word	0x4e4f4f54
   2a15c:	46464f20 	.word	0x46464f20
   2a160:	00000000 	.word	0x00000000
   2a164:	50594257 	.word	0x50594257
   2a168:	00004e4f 	.word	0x00004e4f
   2a16c:	45544157 	.word	0x45544157
   2a170:	59422052 	.word	0x59422052
   2a174:	53534150 	.word	0x53534150
   2a178:	004e4f20 	.word	0x004e4f20
   2a17c:	50594257 	.word	0x50594257
   2a180:	0046464f 	.word	0x0046464f
   2a184:	45544157 	.word	0x45544157
   2a188:	59422052 	.word	0x59422052
   2a18c:	53534150 	.word	0x53534150
   2a190:	46464f20 	.word	0x46464f20
   2a194:	00000000 	.word	0x00000000
   2a198:	4f505053 	.word	0x4f505053
   2a19c:	0000004e 	.word	0x0000004e
   2a1a0:	20505053 	.word	0x20505053
   2a1a4:	00004e4f 	.word	0x00004e4f
   2a1a8:	4f505053 	.word	0x4f505053
   2a1ac:	00004646 	.word	0x00004646
   2a1b0:	20505053 	.word	0x20505053
   2a1b4:	0046464f 	.word	0x0046464f
   2a1b8:	56505053 	.word	0x56505053
   2a1bc:	00000000 	.word	0x00000000
   2a1c0:	20505053 	.word	0x20505053
   2a1c4:	544c4f56 	.word	0x544c4f56
   2a1c8:	54455320 	.word	0x54455320
   2a1cc:	00000000 	.word	0x00000000
   2a1d0:	4f514553 	.word	0x4f514553
   2a1d4:	0000004e 	.word	0x0000004e
   2a1d8:	50514553 	.word	0x50514553
   2a1dc:	004e4f20 	.word	0x004e4f20
   2a1e0:	4f514553 	.word	0x4f514553
   2a1e4:	00004646 	.word	0x00004646
   2a1e8:	50514553 	.word	0x50514553
   2a1ec:	46464f20 	.word	0x46464f20
   2a1f0:	00000000 	.word	0x00000000
   2a1f4:	00444e44 	.word	0x00444e44
   2a1f8:	20444e44 	.word	0x20444e44
   2a1fc:	0000203a 	.word	0x0000203a
   2a200:	004b4f20 	.word	0x004b4f20
   2a204:	4b424446 	.word	0x4b424446
   2a208:	00000000 	.word	0x00000000
   2a20c:	4b424446 	.word	0x4b424446
   2a210:	25203a20 	.word	0x25203a20
   2a214:	00000064 	.word	0x00000064
   2a218:	454d4f55 	.word	0x454d4f55
   2a21c:	444f4854 	.word	0x444f4854
   2a220:	00000000 	.word	0x00000000
   2a224:	454d4f55 	.word	0x454d4f55
   2a228:	444f4854 	.word	0x444f4854
   2a22c:	00203a20 	.word	0x00203a20
   2a230:	5942564d 	.word	0x5942564d
   2a234:	004e4f50 	.word	0x004e4f50
   2a238:	4f544f4d 	.word	0x4f544f4d
   2a23c:	4f562052 	.word	0x4f562052
   2a240:	4741544c 	.word	0x4741544c
   2a244:	59422045 	.word	0x59422045
   2a248:	53534150 	.word	0x53534150
   2a24c:	004e4f20 	.word	0x004e4f20
   2a250:	5942564d 	.word	0x5942564d
   2a254:	46464f50 	.word	0x46464f50
   2a258:	00000000 	.word	0x00000000
   2a25c:	4f544f4d 	.word	0x4f544f4d
   2a260:	4f562052 	.word	0x4f562052
   2a264:	4741544c 	.word	0x4741544c
   2a268:	59422045 	.word	0x59422045
   2a26c:	53534150 	.word	0x53534150
   2a270:	46464f20 	.word	0x46464f20
   2a274:	00000000 	.word	0x00000000
   2a278:	5942564d 	.word	0x5942564d
   2a27c:	00005650 	.word	0x00005650
   2a280:	6f746f4d 	.word	0x6f746f4d
   2a284:	6f562072 	.word	0x6f562072
   2a288:	6761746c 	.word	0x6761746c
   2a28c:	79422065 	.word	0x79422065
   2a290:	73736170 	.word	0x73736170
   2a294:	6d695420 	.word	0x6d695420
   2a298:	65532065 	.word	0x65532065
   2a29c:	6f742074 	.word	0x6f742074
   2a2a0:	00642520 	.word	0x00642520
   2a2a4:	50534552 	.word	0x50534552
   2a2a8:	00000000 	.word	0x00000000
   2a2ac:	50534552 	.word	0x50534552
   2a2b0:	00203a20 	.word	0x00203a20
   2a2b4:	0052564f 	.word	0x0052564f
   2a2b8:	2052564f 	.word	0x2052564f
   2a2bc:	20544553 	.word	0x20544553
   2a2c0:	00004b4f 	.word	0x00004b4f
   2a2c4:	52444e55 	.word	0x52444e55
   2a2c8:	00000000 	.word	0x00000000
   2a2cc:	52444e55 	.word	0x52444e55
   2a2d0:	54455320 	.word	0x54455320
   2a2d4:	004b4f20 	.word	0x004b4f20
   2a2d8:	41545341 	.word	0x41545341
   2a2dc:	00000054 	.word	0x00000054
   2a2e0:	75253a43 	.word	0x75253a43
   2a2e4:	0a75252e 	.word	0x0a75252e
   2a2e8:	75253a4e 	.word	0x75253a4e
   2a2ec:	253a4f0a 	.word	0x253a4f0a
   2a2f0:	3a550a75 	.word	0x3a550a75
   2a2f4:	4f0a7525 	.word	0x4f0a7525
   2a2f8:	75253a50 	.word	0x75253a50
   2a2fc:	3a50550a 	.word	0x3a50550a
   2a300:	00007525 	.word	0x00007525
   2a304:	4f46564f 	.word	0x4f46564f
   2a308:	0000004e 	.word	0x0000004e
   2a30c:	56455250 	.word	0x56455250
   2a310:	20544e45 	.word	0x20544e45
   2a314:	5245564f 	.word	0x5245564f
   2a318:	574f4c46 	.word	0x574f4c46
   2a31c:	54455320 	.word	0x54455320
   2a320:	474e4954 	.word	0x474e4954
   2a324:	004e4f20 	.word	0x004e4f20
   2a328:	4f46564f 	.word	0x4f46564f
   2a32c:	00004646 	.word	0x00004646
   2a330:	56455250 	.word	0x56455250
   2a334:	20544e45 	.word	0x20544e45
   2a338:	5245564f 	.word	0x5245564f
   2a33c:	574f4c46 	.word	0x574f4c46
   2a340:	54455320 	.word	0x54455320
   2a344:	474e4954 	.word	0x474e4954
   2a348:	46464f20 	.word	0x46464f20
   2a34c:	00000000 	.word	0x00000000
   2a350:	4f4d324d 	.word	0x4f4d324d
   2a354:	0000004e 	.word	0x0000004e
   2a358:	204d324d 	.word	0x204d324d
   2a35c:	6e727554 	.word	0x6e727554
   2a360:	4f206465 	.word	0x4f206465
   2a364:	52202c6e 	.word	0x52202c6e
   2a368:	746f6d65 	.word	0x746f6d65
   2a36c:	754e2065 	.word	0x754e2065
   2a370:	7265626d 	.word	0x7265626d
   2a374:	726c4120 	.word	0x726c4120
   2a378:	79646165 	.word	0x79646165
   2a37c:	72655620 	.word	0x72655620
   2a380:	65696669 	.word	0x65696669
   2a384:	00000064 	.word	0x00000064
   2a388:	6f727245 	.word	0x6f727245
   2a38c:	4d203a72 	.word	0x4d203a72
   2a390:	52204d32 	.word	0x52204d32
   2a394:	746f6d65 	.word	0x746f6d65
   2a398:	754e2065 	.word	0x754e2065
   2a39c:	7265626d 	.word	0x7265626d
   2a3a0:	746f4e20 	.word	0x746f4e20
   2a3a4:	65725020 	.word	0x65725020
   2a3a8:	746e6573 	.word	0x746e6573
   2a3ac:	00000000 	.word	0x00000000
   2a3b0:	4f4d324d 	.word	0x4f4d324d
   2a3b4:	00004646 	.word	0x00004646
   2a3b8:	204d324d 	.word	0x204d324d
   2a3bc:	54544553 	.word	0x54544553
   2a3c0:	20474e49 	.word	0x20474e49
   2a3c4:	0046464f 	.word	0x0046464f
   2a3c8:	54415453 	.word	0x54415453
   2a3cc:	00005355 	.word	0x00005355
   2a3d0:	45544c41 	.word	0x45544c41
   2a3d4:	54414e52 	.word	0x54414e52
   2a3d8:	554e2045 	.word	0x554e2045
   2a3dc:	5245424d 	.word	0x5245424d
   2a3e0:	004e4f20 	.word	0x004e4f20
   2a3e4:	45544c41 	.word	0x45544c41
   2a3e8:	54414e52 	.word	0x54414e52
   2a3ec:	554e2045 	.word	0x554e2045
   2a3f0:	5245424d 	.word	0x5245424d
   2a3f4:	544f4e20 	.word	0x544f4e20
   2a3f8:	45525020 	.word	0x45525020
   2a3fc:	544e4553 	.word	0x544e4553
   2a400:	00000000 	.word	0x00000000
   2a404:	464f4d41 	.word	0x464f4d41
   2a408:	00000046 	.word	0x00000046
   2a40c:	45544c41 	.word	0x45544c41
   2a410:	54414e52 	.word	0x54414e52
   2a414:	4f4d2045 	.word	0x4f4d2045
   2a418:	454c4942 	.word	0x454c4942
   2a41c:	4d554e20 	.word	0x4d554e20
   2a420:	20524542 	.word	0x20524542
   2a424:	0046464f 	.word	0x0046464f
   2a428:	464f434e 	.word	0x464f434e
   2a42c:	00000046 	.word	0x00000046
   2a430:	43204f4e 	.word	0x43204f4e
   2a434:	204c4c41 	.word	0x204c4c41
   2a438:	54544553 	.word	0x54544553
   2a43c:	20474e49 	.word	0x20474e49
   2a440:	0046464f 	.word	0x0046464f
   2a444:	54544547 	.word	0x54544547
   2a448:	00454d49 	.word	0x00454d49
   2a44c:	454d4954 	.word	0x454d4954
   2a450:	25203a20 	.word	0x25203a20
   2a454:	75253a75 	.word	0x75253a75
   2a458:	00000000 	.word	0x00000000
   2a45c:	54544553 	.word	0x54544553
   2a460:	00454d49 	.word	0x00454d49
   2a464:	4954434e 	.word	0x4954434e
   2a468:	0000454d 	.word	0x0000454d
   2a46c:	0000002d 	.word	0x0000002d
   2a470:	0000003a 	.word	0x0000003a
   2a474:	43204f4e 	.word	0x43204f4e
   2a478:	204c4c41 	.word	0x204c4c41
   2a47c:	494d4954 	.word	0x494d4954
   2a480:	2053474e 	.word	0x2053474e
   2a484:	00544553 	.word	0x00544553
   2a488:	47415453 	.word	0x47415453
   2a48c:	00000045 	.word	0x00000045
   2a490:	4c4c4143 	.word	0x4c4c4143
   2a494:	41545320 	.word	0x41545320
   2a498:	53204547 	.word	0x53204547
   2a49c:	54205445 	.word	0x54205445
   2a4a0:	203a204f 	.word	0x203a204f
   2a4a4:	00006425 	.word	0x00006425
   2a4a8:	52415453 	.word	0x52415453
   2a4ac:	454d4954 	.word	0x454d4954
   2a4b0:	00000000 	.word	0x00000000
   2a4b4:	41545320 	.word	0x41545320
   2a4b8:	4d495452 	.word	0x4d495452
   2a4bc:	45532045 	.word	0x45532045
   2a4c0:	4f542054 	.word	0x4f542054
   2a4c4:	25203a20 	.word	0x25203a20
   2a4c8:	00000064 	.word	0x00000064
   2a4cc:	4f545541 	.word	0x4f545541
   2a4d0:	454d4954 	.word	0x454d4954
   2a4d4:	00000000 	.word	0x00000000
   2a4d8:	54554120 	.word	0x54554120
   2a4dc:	4d49544f 	.word	0x4d49544f
   2a4e0:	45532045 	.word	0x45532045
   2a4e4:	4f542054 	.word	0x4f542054
   2a4e8:	25203a20 	.word	0x25203a20
   2a4ec:	00000064 	.word	0x00000064
   2a4f0:	004c4142 	.word	0x004c4142
   2a4f4:	002b504d 	.word	0x002b504d
   2a4f8:	4f4e2050 	.word	0x4f4e2050
   2a4fc:	44444120 	.word	0x44444120
   2a500:	00444544 	.word	0x00444544
   2a504:	002b534d 	.word	0x002b534d
   2a508:	4f4e2053 	.word	0x4f4e2053
   2a50c:	44444120 	.word	0x44444120
   2a510:	00444544 	.word	0x00444544
   2a514:	00002b4d 	.word	0x00002b4d
   2a518:	49424f4d 	.word	0x49424f4d
   2a51c:	4e20454c 	.word	0x4e20454c
   2a520:	00003a4f 	.word	0x00003a4f
   2a524:	0000000a 	.word	0x0000000a
   2a528:	45444441 	.word	0x45444441
   2a52c:	55532044 	.word	0x55532044
   2a530:	53454343 	.word	0x53454343
   2a534:	4c554653 	.word	0x4c554653
   2a538:	0000594c 	.word	0x0000594c
   2a53c:	00002d4d 	.word	0x00002d4d
   2a540:	4f4d4552 	.word	0x4f4d4552
   2a544:	20444556 	.word	0x20444556
   2a548:	43435553 	.word	0x43435553
   2a54c:	46535345 	.word	0x46535345
   2a550:	594c4c55 	.word	0x594c4c55
   2a554:	00000000 	.word	0x00000000
   2a558:	002b4d41 	.word	0x002b4d41
   2a55c:	45544c41 	.word	0x45544c41
   2a560:	54414e52 	.word	0x54414e52
   2a564:	4f4d2045 	.word	0x4f4d2045
   2a568:	454c4942 	.word	0x454c4942
   2a56c:	204f4e20 	.word	0x204f4e20
   2a570:	20444441 	.word	0x20444441
   2a574:	43435553 	.word	0x43435553
   2a578:	00535345 	.word	0x00535345
   2a57c:	002b4d4d 	.word	0x002b4d4d
   2a580:	204d324d 	.word	0x204d324d
   2a584:	202e4f4e 	.word	0x202e4f4e
   2a588:	45444441 	.word	0x45444441
   2a58c:	00000044 	.word	0x00000044
   2a590:	002b524d 	.word	0x002b524d
   2a594:	204d324d 	.word	0x204d324d
   2a598:	4f4d4552 	.word	0x4f4d4552
   2a59c:	4e204554 	.word	0x4e204554
   2a5a0:	41202e4f 	.word	0x41202e4f
   2a5a4:	44454444 	.word	0x44454444
   2a5a8:	00000000 	.word	0x00000000
   2a5ac:	4f525245 	.word	0x4f525245
   2a5b0:	203a2052 	.word	0x203a2052
   2a5b4:	00007325 	.word	0x00007325
   2a5b8:	00004e4f 	.word	0x00004e4f
   2a5bc:	48502032 	.word	0x48502032
   2a5c0:	00455341 	.word	0x00455341
   2a5c4:	00004b4f 	.word	0x00004b4f
   2a5c8:	4f525245 	.word	0x4f525245
   2a5cc:	00000052 	.word	0x00000052
   2a5d0:	203a5952 	.word	0x203a5952
   2a5d4:	59206425 	.word	0x59206425
   2a5d8:	25203a42 	.word	0x25203a42
   2a5dc:	52422064 	.word	0x52422064
   2a5e0:	6425203a 	.word	0x6425203a
   2a5e4:	3a43410a 	.word	0x3a43410a
   2a5e8:	0a732520 	.word	0x0a732520
   2a5ec:	75716553 	.word	0x75716553
   2a5f0:	65636e65 	.word	0x65636e65
   2a5f4:	7325203a 	.word	0x7325203a
   2a5f8:	746f4d0a 	.word	0x746f4d0a
   2a5fc:	203a726f 	.word	0x203a726f
   2a600:	430a7325 	.word	0x430a7325
   2a604:	65727275 	.word	0x65727275
   2a608:	203a746e 	.word	0x203a746e
   2a60c:	0a416425 	.word	0x0a416425
   2a610:	7774654e 	.word	0x7774654e
   2a614:	3a6b726f 	.word	0x3a6b726f
   2a618:	00642520 	.word	0x00642520
   2a61c:	304d4d56 	.word	0x304d4d56
   2a620:	00000031 	.word	0x00000031
   2a624:	4f544f4d 	.word	0x4f544f4d
   2a628:	00002052 	.word	0x00002052
   2a62c:	0046464f 	.word	0x0046464f
   2a630:	494d4441 	.word	0x494d4441
   2a634:	0000004e 	.word	0x0000004e
   2a638:	00000023 	.word	0x00000023
   2a63c:	30524d56 	.word	0x30524d56
   2a640:	00000032 	.word	0x00000032
   2a644:	204d324d 	.word	0x204d324d
   2a648:	4e525554 	.word	0x4e525554
   2a64c:	4f204445 	.word	0x4f204445
   2a650:	0000004e 	.word	0x0000004e
   2a654:	0000203a 	.word	0x0000203a
   2a658:	00017214 	.word	0x00017214
   2a65c:	000172fa 	.word	0x000172fa
   2a660:	000172fa 	.word	0x000172fa
   2a664:	00017214 	.word	0x00017214
   2a668:	000172fa 	.word	0x000172fa
   2a66c:	000172fa 	.word	0x000172fa
   2a670:	000172fa 	.word	0x000172fa
   2a674:	000172fa 	.word	0x000172fa
   2a678:	000172fa 	.word	0x000172fa
   2a67c:	000172fa 	.word	0x000172fa
   2a680:	000172fa 	.word	0x000172fa
   2a684:	000172fa 	.word	0x000172fa
   2a688:	00017214 	.word	0x00017214
   2a68c:	000172fa 	.word	0x000172fa
   2a690:	000172fa 	.word	0x000172fa
   2a694:	000172fa 	.word	0x000172fa
   2a698:	000171d6 	.word	0x000171d6
   2a69c:	000172fa 	.word	0x000172fa
   2a6a0:	00017214 	.word	0x00017214
   2a6a4:	49524b20 	.word	0x49524b20
   2a6a8:	414e4853 	.word	0x414e4853
   2a6ac:	4d532020 	.word	0x4d532020
   2a6b0:	20545241 	.word	0x20545241
   2a6b4:	00000000 	.word	0x00000000
   2a6b8:	54202020 	.word	0x54202020
   2a6bc:	4e484345 	.word	0x4e484345
   2a6c0:	474f4c4f 	.word	0x474f4c4f
   2a6c4:	20202059 	.word	0x20202059
   2a6c8:	00000000 	.word	0x00000000
   2a6cc:	4f532020 	.word	0x4f532020
   2a6d0:	41575446 	.word	0x41575446
   2a6d4:	56204552 	.word	0x56204552
   2a6d8:	20205245 	.word	0x20205245
   2a6dc:	00000000 	.word	0x00000000
   2a6e0:	31422020 	.word	0x31422020
   2a6e4:	30332d37 	.word	0x30332d37
   2a6e8:	2d37302d 	.word	0x2d37302d
   2a6ec:	20203931 	.word	0x20203931
   2a6f0:	00000000 	.word	0x00000000
   2a6f4:	00007325 	.word	0x00007325
   2a6f8:	74696e49 	.word	0x74696e49
   2a6fc:	696c6169 	.word	0x696c6169
   2a700:	676e697a 	.word	0x676e697a
   2a704:	202e2e2e 	.word	0x202e2e2e
   2a708:	00000000 	.word	0x00000000
   2a70c:	4d4d4f43 	.word	0x4d4d4f43
   2a710:	45444e41 	.word	0x45444e41
   2a714:	32762052 	.word	0x32762052
   2a718:	20202020 	.word	0x20202020
   2a71c:	00000000 	.word	0x00000000
   2a720:	20595256 	.word	0x20595256
   2a724:	59562020 	.word	0x59562020
   2a728:	20202042 	.word	0x20202042
   2a72c:	20524256 	.word	0x20524256
   2a730:	00000000 	.word	0x00000000
   2a734:	6c333025 	.word	0x6c333025
   2a738:	20202075 	.word	0x20202075
   2a73c:	00000000 	.word	0x00000000
   2a740:	6c333025 	.word	0x6c333025
   2a744:	00002075 	.word	0x00002075
   2a748:	4f544f4d 	.word	0x4f544f4d
   2a74c:	20203a52 	.word	0x20203a52
   2a750:	2046464f 	.word	0x2046464f
   2a754:	20202020 	.word	0x20202020
   2a758:	00000000 	.word	0x00000000
   2a75c:	20202020 	.word	0x20202020
   2a760:	20202020 	.word	0x20202020
   2a764:	20202020 	.word	0x20202020
   2a768:	20202020 	.word	0x20202020
   2a76c:	00000000 	.word	0x00000000
   2a770:	4f544f4d 	.word	0x4f544f4d
   2a774:	55432052 	.word	0x55432052
   2a778:	4e455252 	.word	0x4e455252
   2a77c:	20203a54 	.word	0x20203a54
   2a780:	00000000 	.word	0x00000000
   2a784:	6c333025 	.word	0x6c333025
   2a788:	30252e75 	.word	0x30252e75
   2a78c:	20756c32 	.word	0x20756c32
   2a790:	20202020 	.word	0x20202020
   2a794:	20202020 	.word	0x20202020
   2a798:	00202020 	.word	0x00202020
   2a79c:	4f544f4d 	.word	0x4f544f4d
   2a7a0:	41572052 	.word	0x41572052
   2a7a4:	47415454 	.word	0x47415454
   2a7a8:	20203a45 	.word	0x20203a45
   2a7ac:	00000000 	.word	0x00000000
   2a7b0:	6c333025 	.word	0x6c333025
   2a7b4:	30252e75 	.word	0x30252e75
   2a7b8:	20756c32 	.word	0x20756c32
   2a7bc:	2020576b 	.word	0x2020576b
   2a7c0:	20202020 	.word	0x20202020
   2a7c4:	00202020 	.word	0x00202020
   2a7c8:	48502033 	.word	0x48502033
   2a7cc:	20455341 	.word	0x20455341
   2a7d0:	3a514553 	.word	0x3a514553
   2a7d4:	00000000 	.word	0x00000000
   2a7d8:	204b4f20 	.word	0x204b4f20
   2a7dc:	00000000 	.word	0x00000000
   2a7e0:	52524520 	.word	0x52524520
   2a7e4:	00000000 	.word	0x00000000
   2a7e8:	53414850 	.word	0x53414850
   2a7ec:	54532045 	.word	0x54532045
   2a7f0:	3a455441 	.word	0x3a455441
   2a7f4:	00000000 	.word	0x00000000
   2a7f8:	48503320 	.word	0x48503320
   2a7fc:	00000020 	.word	0x00000020
   2a800:	48503220 	.word	0x48503220
   2a804:	00000020 	.word	0x00000020
   2a808:	46464f20 	.word	0x46464f20
   2a80c:	00000000 	.word	0x00000000
   2a810:	454c2d4f 	.word	0x454c2d4f
   2a814:	204c4556 	.word	0x204c4556
   2a818:	0000203a 	.word	0x0000203a
   2a81c:	48474948 	.word	0x48474948
   2a820:	00002020 	.word	0x00002020
   2a824:	2044494d 	.word	0x2044494d
   2a828:	00002020 	.word	0x00002020
   2a82c:	20574f4c 	.word	0x20574f4c
   2a830:	00002020 	.word	0x00002020
   2a834:	454c2d55 	.word	0x454c2d55
   2a838:	204c4556 	.word	0x204c4556
   2a83c:	0000203a 	.word	0x0000203a
   2a840:	43545243 	.word	0x43545243
   2a844:	0000204c 	.word	0x0000204c
   2a848:	74746142 	.word	0x74746142
   2a84c:	50797265 	.word	0x50797265
   2a850:	203a7265 	.word	0x203a7265
   2a854:	25257525 	.word	0x25257525
   2a858:	00000020 	.word	0x00000020
   2a85c:	4e474953 	.word	0x4e474953
   2a860:	3a204c41 	.word	0x3a204c41
   2a864:	00000020 	.word	0x00000020
   2a868:	20202020 	.word	0x20202020
   2a86c:	00202020 	.word	0x00202020
   2a870:	4f434e49 	.word	0x4f434e49
   2a874:	474e494d 	.word	0x474e494d
   2a878:	4c414320 	.word	0x4c414320
   2a87c:	202e2e4c 	.word	0x202e2e4c
   2a880:	00000000 	.word	0x00000000
   2a884:	36312d25 	.word	0x36312d25
   2a888:	00000073 	.word	0x00000073
   2a88c:	43204e49 	.word	0x43204e49
   2a890:	2e4c4c41 	.word	0x2e4c4c41
   2a894:	20202e2e 	.word	0x20202e2e
   2a898:	20202020 	.word	0x20202020
   2a89c:	00000000 	.word	0x00000000
   2a8a0:	4c414944 	.word	0x4c414944
   2a8a4:	2e474e49 	.word	0x2e474e49
   2a8a8:	20202e2e 	.word	0x20202e2e
   2a8ac:	20202020 	.word	0x20202020
   2a8b0:	00000000 	.word	0x00000000
   2a8b4:	4f434e49 	.word	0x4f434e49
   2a8b8:	474e494d 	.word	0x474e494d
   2a8bc:	534d5320 	.word	0x534d5320
   2a8c0:	202e2e2e 	.word	0x202e2e2e
   2a8c4:	00000000 	.word	0x00000000
   2a8c8:	4754554f 	.word	0x4754554f
   2a8cc:	474e494f 	.word	0x474e494f
   2a8d0:	534d5320 	.word	0x534d5320
   2a8d4:	202e2e2e 	.word	0x202e2e2e
	...
   2a8e0:	1f1f0000 	.word	0x1f1f0000
   2a8e4:	00000000 	.word	0x00000000
   2a8e8:	1f1f1f00 	.word	0x1f1f1f00
   2a8ec:	00000000 	.word	0x00000000
   2a8f0:	1f1f1f1f 	.word	0x1f1f1f1f
   2a8f4:	1f1f0000 	.word	0x1f1f0000
   2a8f8:	1f1f1f1f 	.word	0x1f1f1f1f
   2a8fc:	1f1f1f1f 	.word	0x1f1f1f1f
   2a900:	1f1f1f1f 	.word	0x1f1f1f1f
   2a904:	000186a6 	.word	0x000186a6
   2a908:	00018262 	.word	0x00018262
   2a90c:	000182a6 	.word	0x000182a6
   2a910:	0001830c 	.word	0x0001830c
   2a914:	0001836e 	.word	0x0001836e
   2a918:	000183dc 	.word	0x000183dc
   2a91c:	00018558 	.word	0x00018558
   2a920:	000185da 	.word	0x000185da
   2a924:	000186a4 	.word	0x000186a4
   2a928:	000185f4 	.word	0x000185f4
   2a92c:	00018612 	.word	0x00018612
   2a930:	00018630 	.word	0x00018630
   2a934:	0001864e 	.word	0x0001864e
   2a938:	00018676 	.word	0x00018676
   2a93c:	756c255d 	.word	0x756c255d
   2a940:	756c257b 	.word	0x756c257b
   2a944:	756c257d 	.word	0x756c257d
   2a948:	00000000 	.word	0x00000000
   2a94c:	00000002 	.word	0x00000002
   2a950:	00000003 	.word	0x00000003
   2a954:	00000028 	.word	0x00000028
   2a958:	00000029 	.word	0x00000029
   2a95c:	00000004 	.word	0x00000004
   2a960:	00000005 	.word	0x00000005
   2a964:	00000006 	.word	0x00000006
   2a968:	00000007 	.word	0x00000007
   2a96c:	00000020 	.word	0x00000020
   2a970:	00000021 	.word	0x00000021
   2a974:	00000022 	.word	0x00000022
   2a978:	00000023 	.word	0x00000023
   2a97c:	00000024 	.word	0x00000024
   2a980:	00000025 	.word	0x00000025
   2a984:	00000026 	.word	0x00000026
   2a988:	00000027 	.word	0x00000027
   2a98c:	00000008 	.word	0x00000008
   2a990:	00000009 	.word	0x00000009
   2a994:	0000000a 	.word	0x0000000a
   2a998:	0000000b 	.word	0x0000000b
   2a99c:	0001d282 	.word	0x0001d282
   2a9a0:	0001d288 	.word	0x0001d288
   2a9a4:	0001d288 	.word	0x0001d288
   2a9a8:	0001d288 	.word	0x0001d288
   2a9ac:	0001d288 	.word	0x0001d288
   2a9b0:	0001d288 	.word	0x0001d288
   2a9b4:	0001d288 	.word	0x0001d288
   2a9b8:	0001d288 	.word	0x0001d288
   2a9bc:	0001d288 	.word	0x0001d288
   2a9c0:	0001d288 	.word	0x0001d288
   2a9c4:	0001d288 	.word	0x0001d288
   2a9c8:	0001d288 	.word	0x0001d288
   2a9cc:	0001d288 	.word	0x0001d288
   2a9d0:	0001d288 	.word	0x0001d288
   2a9d4:	0001d288 	.word	0x0001d288
   2a9d8:	0001d288 	.word	0x0001d288
   2a9dc:	0001d260 	.word	0x0001d260
   2a9e0:	0001d288 	.word	0x0001d288
   2a9e4:	0001d288 	.word	0x0001d288
   2a9e8:	0001d288 	.word	0x0001d288
   2a9ec:	0001d288 	.word	0x0001d288
   2a9f0:	0001d288 	.word	0x0001d288
   2a9f4:	0001d288 	.word	0x0001d288
   2a9f8:	0001d288 	.word	0x0001d288
   2a9fc:	0001d288 	.word	0x0001d288
   2aa00:	0001d288 	.word	0x0001d288
   2aa04:	0001d288 	.word	0x0001d288
   2aa08:	0001d288 	.word	0x0001d288
   2aa0c:	0001d288 	.word	0x0001d288
   2aa10:	0001d288 	.word	0x0001d288
   2aa14:	0001d288 	.word	0x0001d288
   2aa18:	0001d288 	.word	0x0001d288
   2aa1c:	0001d27c 	.word	0x0001d27c
   2aa20:	0001d288 	.word	0x0001d288
   2aa24:	0001d288 	.word	0x0001d288
   2aa28:	0001d288 	.word	0x0001d288
   2aa2c:	0001d288 	.word	0x0001d288
   2aa30:	0001d288 	.word	0x0001d288
   2aa34:	0001d288 	.word	0x0001d288
   2aa38:	0001d288 	.word	0x0001d288
   2aa3c:	0001d288 	.word	0x0001d288
   2aa40:	0001d288 	.word	0x0001d288
   2aa44:	0001d288 	.word	0x0001d288
   2aa48:	0001d288 	.word	0x0001d288
   2aa4c:	0001d288 	.word	0x0001d288
   2aa50:	0001d288 	.word	0x0001d288
   2aa54:	0001d288 	.word	0x0001d288
   2aa58:	0001d288 	.word	0x0001d288
   2aa5c:	0001d276 	.word	0x0001d276
   2aa60:	0001d21e 	.word	0x0001d21e
   2aa64:	0001d234 	.word	0x0001d234
   2aa68:	0001d24a 	.word	0x0001d24a
   2aa6c:	0001d204 	.word	0x0001d204
   2aa70:	42000800 	.word	0x42000800
   2aa74:	42000c00 	.word	0x42000c00
   2aa78:	42001000 	.word	0x42001000
   2aa7c:	42001400 	.word	0x42001400
   2aa80:	42001800 	.word	0x42001800
   2aa84:	42001c00 	.word	0x42001c00
   2aa88:	454c4449 	.word	0x454c4449
   2aa8c:	00000000 	.word	0x00000000
   2aa90:	20726d54 	.word	0x20726d54
   2aa94:	00637653 	.word	0x00637653
   2aa98:	00021230 	.word	0x00021230
   2aa9c:	00021230 	.word	0x00021230
   2aaa0:	00021230 	.word	0x00021230
   2aaa4:	000212be 	.word	0x000212be
   2aaa8:	00021288 	.word	0x00021288
   2aaac:	000212b2 	.word	0x000212b2
   2aab0:	00021230 	.word	0x00021230
   2aab4:	00021230 	.word	0x00021230
   2aab8:	000212be 	.word	0x000212be
   2aabc:	00021288 	.word	0x00021288

0002aac0 <_tcc_intflag>:
   2aac0:	00000001 00000002 00000004 00000008     ................
   2aad0:	00001000 00002000 00004000 00008000     ..... ...@......
   2aae0:	00010000 00020000 00040000 00080000     ................
   2aaf0:	0c0b0a09 00000e0d 00022b3c 00022b3c     ........<+..<+..
   2ab00:	00022b30 00022b3c 00022b30 00022b0a     0+..<+..0+...+..
   2ab10:	00022b0a 00022b3c 00022b3c 00022b3c     .+..<+..<+..<+..
   2ab20:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab30:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab40:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab50:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab60:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab70:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab80:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2ab90:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2aba0:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2abb0:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2abc0:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2abd0:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2abe0:	00022b3c 00022b3c 00022b3c 00022b3c     <+..<+..<+..<+..
   2abf0:	00022b3c 00022b3c 00022b30 00022b30     <+..<+..0+..0+..
   2ac00:	00022b46 00022b46 00022b46 00022b46     F+..F+..F+..F+..
   2ac10:	41744545 50524f4d 456d752e 00023eb6     EEtAMORP.umE.>..
   2ac20:	00023f30 00023f30 00023ed4 00023ece     0?..0?...>...>..
   2ac30:	00023eda 00023ebc 00023ee0 00023f16     .>...>...>...?..
   2ac40:	000241fc 0002424c 0002424c 00024248     .A..LB..LB..HB..
   2ac50:	000241ee 0002420e 000241de 00024220     .A...B...A.. B..
   2ac60:	00024232 0002429a 000242c8 000242c8     2B...B...B...B..
   2ac70:	000242c4 00024294 000242a0 0002428e     .B...B...B...B..
   2ac80:	000242a6 000242ac 00776f70 74727173     .B...B..pow.sqrt
	...

0002ac98 <TWO52>:
   2ac98:	00000000 43300000 00000000 c3300000     ......0C......0.
   2aca8:	00026c40 00026c10 00026c22 00026b64     @l...l.."l..dk..
   2acb8:	00026c22 00026c06 00026c22 00026b64     "l...l.."l..dk..
   2acc8:	00026c10 00026c10 00026c06 00026b64     .l...l...l..dk..
   2acd8:	00026b6c 00026b6c 00026b6c 00026c28     lk..lk..lk..(l..
   2ace8:	00026c10 00026c10 00026be4 00026cc8     .l...l...k...l..
   2acf8:	00026be4 00026c06 00026be4 00026cc8     .k...l...k...l..
   2ad08:	00026c10 00026c10 00026c06 00026cc8     .l...l...l...l..
   2ad18:	00026b6c 00026b6c 00026b6c 00026cd2     lk..lk..lk...l..
   2ad28:	00026e70 00026dc0 00026dc0 00026dbe     pn...m...m...m..
   2ad38:	00026e62 00026e62 00026e58 00026dbe     bn..bn..Xn...m..
   2ad48:	00026e62 00026e58 00026e62 00026dbe     bn..Xn..bn...m..
   2ad58:	00026e68 00026e68 00026e68 00026ef8     hn..hn..hn...n..
   2ad68:	000278c8 000278aa 00027864 00027782     .x...x..dx...w..
   2ad78:	00027864 0002789c 00027864 00027782     dx...x..dx...w..
   2ad88:	000278aa 000278aa 0002789c 00027782     .x...x...x...w..
   2ad98:	0002777a 0002777a 0002777a 00027ae0     zw..zw..zw...z..
   2ada8:	00028128 00027fe8 00027fe8 00027fe4     (...............
   2adb8:	00028100 00028100 000280f2 00027fe4     ................
   2adc8:	00028100 000280f2 00028100 00027fe4     ................
   2add8:	00028108 00028108 00028108 0002830c     ................
   2ade8:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2adf8:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2ae08:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002ae17 <_ctype_>:
   2ae17:	20202000 20202020 28282020 20282828     .         ((((( 
   2ae27:	20202020 20202020 20202020 20202020                     
   2ae37:	10108820 10101010 10101010 10101010      ...............
   2ae47:	04040410 04040404 10040404 10101010     ................
   2ae57:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2ae67:	01010101 01010101 01010101 10101010     ................
   2ae77:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2ae87:	02020202 02020202 02020202 10101010     ................
   2ae97:	00000020 00000000 00000000 00000000      ...............
	...
   2af17:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2af27:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2af37:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2af47:	00666564 c0b5f800                                def..

0002af4c <_init>:
   2af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2af4e:	46c0      	nop			; (mov r8, r8)
   2af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2af52:	bc08      	pop	{r3}
   2af54:	469e      	mov	lr, r3
   2af56:	4770      	bx	lr

0002af58 <__init_array_start>:
   2af58:	000100dd 	.word	0x000100dd

0002af5c <_fini>:
   2af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2af5e:	46c0      	nop			; (mov r8, r8)
   2af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2af62:	bc08      	pop	{r3}
   2af64:	469e      	mov	lr, r3
   2af66:	4770      	bx	lr

0002af68 <__fini_array_start>:
   2af68:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	93a9 0002 8db9 0002 0000 0000 ae17 0002     ................
20000180:	adf0 0002 af1d 0002 af1d 0002 af1d 0002     ................
20000190:	af1d 0002 af1d 0002 af1d 0002 af1d 0002     ................
200001a0:	af1d 0002 af1d 0002 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
