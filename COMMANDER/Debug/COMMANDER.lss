
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b02c  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002b02c  0002b02c  0002b02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0002b034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000078c  20000200  0002b240  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000098c  0002b9cc  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007f8ef  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008aa3  00000000  00000000  000afb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000aa99  00000000  00000000  000b860f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d88  00000000  00000000  000c30a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b90  00000000  00000000  000c4e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287d2  00000000  00000000  000c69c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027a4f  00000000  00000000  000ef192  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a27e9  00000000  00000000  00116be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007414  00000000  00000000  001b93cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	90 29 00 20 a9 4d 02 00 a1 4e 02 00 a1 4e 02 00     .). .M...N...N..
	...
   1002c:	95 ec 01 00 00 00 00 00 00 00 00 00 c1 ed 01 00     ................
   1003c:	09 ee 01 00 a1 4e 02 00 a1 4e 02 00 01 15 02 00     .....N...N......
   1004c:	11 e6 01 00 29 25 02 00 a1 4e 02 00 a9 db 01 00     ....)%...N......
   1005c:	a1 4e 02 00 95 25 02 00 21 23 02 00 39 23 02 00     .N...%..!#..9#..
   1006c:	51 23 02 00 69 23 02 00 81 23 02 00 99 23 02 00     Q#..i#...#...#..
   1007c:	25 15 02 00 39 15 02 00 4d 15 02 00 dd 15 02 00     %...9...M.......
   1008c:	f1 15 02 00 05 16 02 00 19 16 02 00 2d 16 02 00     ............-...
   1009c:	89 d9 01 00 ed 28 02 00 6d db 01 00 a1 4e 02 00     .....(..m....N..
   100ac:	a1 4e 02 00 00 00 00 00                             .N......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000200 	.word	0x20000200
   100d4:	00000000 	.word	0x00000000
   100d8:	0002b034 	.word	0x0002b034

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000204 	.word	0x20000204
   10108:	0002b034 	.word	0x0002b034
   1010c:	0002b034 	.word	0x0002b034
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	00023965 	.word	0x00023965
   1014c:	00023a4d 	.word	0x00023a4d

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf6      	ldr	r3, [pc, #984]	; (10530 <init_eeprom+0x3e0>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf6      	ldr	r3, [pc, #984]	; (10534 <init_eeprom+0x3e4>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf6      	ldr	r3, [pc, #984]	; (10538 <init_eeprom+0x3e8>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f4      	ldr	r1, [pc, #976]	; (10534 <init_eeprom+0x3e4>)
   10164:	4bf5      	ldr	r3, [pc, #980]	; (1053c <init_eeprom+0x3ec>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf5      	ldr	r3, [pc, #980]	; (10540 <init_eeprom+0x3f0>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf3      	ldr	r3, [pc, #972]	; (1053c <init_eeprom+0x3ec>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf1      	ldr	r3, [pc, #964]	; (1053c <init_eeprom+0x3ec>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bef      	ldr	r3, [pc, #956]	; (1053c <init_eeprom+0x3ec>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bee      	ldr	r3, [pc, #952]	; (1053c <init_eeprom+0x3ec>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bec      	ldr	r3, [pc, #944]	; (1053c <init_eeprom+0x3ec>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4beb      	ldr	r3, [pc, #940]	; (1053c <init_eeprom+0x3ec>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4be9      	ldr	r3, [pc, #932]	; (1053c <init_eeprom+0x3ec>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4bea      	ldr	r3, [pc, #936]	; (10544 <init_eeprom+0x3f4>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4be9      	ldr	r3, [pc, #932]	; (10548 <init_eeprom+0x3f8>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be7      	ldr	r3, [pc, #924]	; (10544 <init_eeprom+0x3f4>)
   101a8:	4ae8      	ldr	r2, [pc, #928]	; (1054c <init_eeprom+0x3fc>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e1      	ldr	r1, [pc, #900]	; (1053c <init_eeprom+0x3ec>)
   101b8:	4bde      	ldr	r3, [pc, #888]	; (10534 <init_eeprom+0x3e4>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be0      	ldr	r3, [pc, #896]	; (10540 <init_eeprom+0x3f0>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdc      	ldr	r3, [pc, #880]	; (10534 <init_eeprom+0x3e4>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be1      	ldr	r3, [pc, #900]	; (10550 <init_eeprom+0x400>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be1      	ldr	r3, [pc, #900]	; (10554 <init_eeprom+0x404>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd8      	ldr	r3, [pc, #864]	; (10534 <init_eeprom+0x3e4>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd8      	ldr	r3, [pc, #864]	; (10538 <init_eeprom+0x3e8>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d6      	ldr	r1, [pc, #856]	; (10534 <init_eeprom+0x3e4>)
   101dc:	4bde      	ldr	r3, [pc, #888]	; (10558 <init_eeprom+0x408>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd7      	ldr	r3, [pc, #860]	; (10540 <init_eeprom+0x3f0>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdc      	ldr	r3, [pc, #880]	; (10558 <init_eeprom+0x408>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bda      	ldr	r3, [pc, #872]	; (10558 <init_eeprom+0x408>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd8      	ldr	r3, [pc, #864]	; (10558 <init_eeprom+0x408>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd8      	ldr	r3, [pc, #864]	; (1055c <init_eeprom+0x40c>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd1      	ldr	r3, [pc, #836]	; (10548 <init_eeprom+0x3f8>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad5      	ldr	r2, [pc, #852]	; (1055c <init_eeprom+0x40c>)
   10208:	4bd5      	ldr	r3, [pc, #852]	; (10560 <init_eeprom+0x410>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcb      	ldr	r3, [pc, #812]	; (10540 <init_eeprom+0x3f0>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd3      	ldr	r3, [pc, #844]	; (10564 <init_eeprom+0x414>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bca      	ldr	r3, [pc, #808]	; (10548 <init_eeprom+0x3f8>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad0      	ldr	r2, [pc, #832]	; (10564 <init_eeprom+0x414>)
   10224:	4bd0      	ldr	r3, [pc, #832]	; (10568 <init_eeprom+0x418>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc4      	ldr	r3, [pc, #784]	; (10540 <init_eeprom+0x3f0>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49c9      	ldr	r1, [pc, #804]	; (10558 <init_eeprom+0x408>)
   10234:	4bbf      	ldr	r3, [pc, #764]	; (10534 <init_eeprom+0x3e4>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc1      	ldr	r3, [pc, #772]	; (10540 <init_eeprom+0x3f0>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbd      	ldr	r3, [pc, #756]	; (10534 <init_eeprom+0x3e4>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc2      	ldr	r3, [pc, #776]	; (10550 <init_eeprom+0x400>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc2      	ldr	r3, [pc, #776]	; (10554 <init_eeprom+0x404>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bb9      	ldr	r3, [pc, #740]	; (10534 <init_eeprom+0x3e4>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bb9      	ldr	r3, [pc, #740]	; (10538 <init_eeprom+0x3e8>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b7      	ldr	r1, [pc, #732]	; (10534 <init_eeprom+0x3e4>)
   10258:	4bc4      	ldr	r3, [pc, #784]	; (1056c <init_eeprom+0x41c>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb8      	ldr	r3, [pc, #736]	; (10540 <init_eeprom+0x3f0>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc2      	ldr	r3, [pc, #776]	; (1056c <init_eeprom+0x41c>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc0      	ldr	r3, [pc, #768]	; (1056c <init_eeprom+0x41c>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbe      	ldr	r3, [pc, #760]	; (1056c <init_eeprom+0x41c>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbe      	ldr	r3, [pc, #760]	; (10570 <init_eeprom+0x420>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb2      	ldr	r3, [pc, #712]	; (10548 <init_eeprom+0x3f8>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bba      	ldr	r3, [pc, #744]	; (1056c <init_eeprom+0x41c>)
   10284:	2205      	movs	r2, #5
   10286:	49bb      	ldr	r1, [pc, #748]	; (10574 <init_eeprom+0x424>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bac      	ldr	r3, [pc, #688]	; (10540 <init_eeprom+0x3f0>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bb9      	ldr	r3, [pc, #740]	; (10578 <init_eeprom+0x428>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bab      	ldr	r3, [pc, #684]	; (10548 <init_eeprom+0x3f8>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab7      	ldr	r2, [pc, #732]	; (1057c <init_eeprom+0x42c>)
   102a0:	4bb7      	ldr	r3, [pc, #732]	; (10580 <init_eeprom+0x430>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba5      	ldr	r3, [pc, #660]	; (10540 <init_eeprom+0x3f0>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb2      	ldr	r3, [pc, #712]	; (10578 <init_eeprom+0x428>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba4      	ldr	r3, [pc, #656]	; (10548 <init_eeprom+0x3f8>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4aaf      	ldr	r2, [pc, #700]	; (10578 <init_eeprom+0x428>)
   102bc:	4bb1      	ldr	r3, [pc, #708]	; (10584 <init_eeprom+0x434>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9e      	ldr	r3, [pc, #632]	; (10540 <init_eeprom+0x3f0>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a8      	ldr	r1, [pc, #672]	; (1056c <init_eeprom+0x41c>)
   102cc:	4b99      	ldr	r3, [pc, #612]	; (10534 <init_eeprom+0x3e4>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9b      	ldr	r3, [pc, #620]	; (10540 <init_eeprom+0x3f0>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b97      	ldr	r3, [pc, #604]	; (10534 <init_eeprom+0x3e4>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9c      	ldr	r3, [pc, #624]	; (10550 <init_eeprom+0x400>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9c      	ldr	r3, [pc, #624]	; (10554 <init_eeprom+0x404>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b93      	ldr	r3, [pc, #588]	; (10534 <init_eeprom+0x3e4>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b93      	ldr	r3, [pc, #588]	; (10538 <init_eeprom+0x3e8>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa6      	ldr	r2, [pc, #664]	; (10588 <init_eeprom+0x438>)
   102f0:	4b90      	ldr	r3, [pc, #576]	; (10534 <init_eeprom+0x3e4>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b91      	ldr	r3, [pc, #580]	; (10540 <init_eeprom+0x3f0>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba2      	ldr	r3, [pc, #648]	; (10588 <init_eeprom+0x438>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba0      	ldr	r3, [pc, #640]	; (10588 <init_eeprom+0x438>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9e      	ldr	r3, [pc, #632]	; (10588 <init_eeprom+0x438>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9d      	ldr	r3, [pc, #628]	; (10588 <init_eeprom+0x438>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9b      	ldr	r3, [pc, #620]	; (10588 <init_eeprom+0x438>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9a      	ldr	r3, [pc, #616]	; (10588 <init_eeprom+0x438>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a83      	ldr	r2, [pc, #524]	; (10534 <init_eeprom+0x3e4>)
   10326:	4b98      	ldr	r3, [pc, #608]	; (10588 <init_eeprom+0x438>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b83      	ldr	r3, [pc, #524]	; (10540 <init_eeprom+0x3f0>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b7f      	ldr	r3, [pc, #508]	; (10534 <init_eeprom+0x3e4>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b85      	ldr	r3, [pc, #532]	; (10550 <init_eeprom+0x400>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b85      	ldr	r3, [pc, #532]	; (10554 <init_eeprom+0x404>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b92      	ldr	r3, [pc, #584]	; (1058c <init_eeprom+0x43c>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b91      	ldr	r3, [pc, #580]	; (10590 <init_eeprom+0x440>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b91      	ldr	r3, [pc, #580]	; (10594 <init_eeprom+0x444>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b8f      	ldr	r3, [pc, #572]	; (10590 <init_eeprom+0x440>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b90      	ldr	r3, [pc, #576]	; (10598 <init_eeprom+0x448>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8c      	ldr	r3, [pc, #560]	; (10590 <init_eeprom+0x440>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8e      	ldr	r3, [pc, #568]	; (1059c <init_eeprom+0x44c>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8a      	ldr	r3, [pc, #552]	; (10590 <init_eeprom+0x440>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8d      	ldr	r3, [pc, #564]	; (105a0 <init_eeprom+0x450>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b87      	ldr	r3, [pc, #540]	; (10590 <init_eeprom+0x440>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b75      	ldr	r3, [pc, #468]	; (1054c <init_eeprom+0x3fc>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b85      	ldr	r3, [pc, #532]	; (10590 <init_eeprom+0x440>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b73      	ldr	r3, [pc, #460]	; (1054c <init_eeprom+0x3fc>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b82      	ldr	r3, [pc, #520]	; (10590 <init_eeprom+0x440>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b70      	ldr	r3, [pc, #448]	; (1054c <init_eeprom+0x3fc>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b80      	ldr	r3, [pc, #512]	; (10590 <init_eeprom+0x440>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6e      	ldr	r3, [pc, #440]	; (1054c <init_eeprom+0x3fc>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7d      	ldr	r3, [pc, #500]	; (10590 <init_eeprom+0x440>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6b      	ldr	r3, [pc, #428]	; (1054c <init_eeprom+0x3fc>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7b      	ldr	r3, [pc, #492]	; (10590 <init_eeprom+0x440>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b69      	ldr	r3, [pc, #420]	; (1054c <init_eeprom+0x3fc>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b78      	ldr	r3, [pc, #480]	; (10590 <init_eeprom+0x440>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b66      	ldr	r3, [pc, #408]	; (1054c <init_eeprom+0x3fc>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b76      	ldr	r3, [pc, #472]	; (10590 <init_eeprom+0x440>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b64      	ldr	r3, [pc, #400]	; (1054c <init_eeprom+0x3fc>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b73      	ldr	r3, [pc, #460]	; (10590 <init_eeprom+0x440>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b61      	ldr	r3, [pc, #388]	; (1054c <init_eeprom+0x3fc>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b71      	ldr	r3, [pc, #452]	; (10590 <init_eeprom+0x440>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b5f      	ldr	r3, [pc, #380]	; (1054c <init_eeprom+0x3fc>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6e      	ldr	r3, [pc, #440]	; (10590 <init_eeprom+0x440>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5c      	ldr	r3, [pc, #368]	; (1054c <init_eeprom+0x3fc>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6c      	ldr	r3, [pc, #432]	; (10590 <init_eeprom+0x440>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5a      	ldr	r3, [pc, #360]	; (1054c <init_eeprom+0x3fc>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b69      	ldr	r3, [pc, #420]	; (10590 <init_eeprom+0x440>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b57      	ldr	r3, [pc, #348]	; (1054c <init_eeprom+0x3fc>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b67      	ldr	r3, [pc, #412]	; (10590 <init_eeprom+0x440>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b55      	ldr	r3, [pc, #340]	; (1054c <init_eeprom+0x3fc>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b64      	ldr	r3, [pc, #400]	; (10590 <init_eeprom+0x440>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b52      	ldr	r3, [pc, #328]	; (1054c <init_eeprom+0x3fc>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b62      	ldr	r3, [pc, #392]	; (10590 <init_eeprom+0x440>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4a      	ldr	r3, [pc, #296]	; (10534 <init_eeprom+0x3e4>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b49      	ldr	r3, [pc, #292]	; (10538 <init_eeprom+0x3e8>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a63      	ldr	r2, [pc, #396]	; (105a4 <init_eeprom+0x454>)
   10416:	4b47      	ldr	r3, [pc, #284]	; (10534 <init_eeprom+0x3e4>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b47      	ldr	r3, [pc, #284]	; (10540 <init_eeprom+0x3f0>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b5f      	ldr	r3, [pc, #380]	; (105a4 <init_eeprom+0x454>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5d      	ldr	r3, [pc, #372]	; (105a4 <init_eeprom+0x454>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5c      	ldr	r3, [pc, #368]	; (105a4 <init_eeprom+0x454>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5a      	ldr	r3, [pc, #360]	; (105a4 <init_eeprom+0x454>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5a      	ldr	r3, [pc, #360]	; (105a8 <init_eeprom+0x458>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b40      	ldr	r3, [pc, #256]	; (10548 <init_eeprom+0x3f8>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a57      	ldr	r2, [pc, #348]	; (105a8 <init_eeprom+0x458>)
   1044c:	4b3f      	ldr	r3, [pc, #252]	; (1054c <init_eeprom+0x3fc>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3a      	ldr	r3, [pc, #232]	; (10540 <init_eeprom+0x3f0>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a36      	ldr	r2, [pc, #216]	; (10534 <init_eeprom+0x3e4>)
   1045c:	4b51      	ldr	r3, [pc, #324]	; (105a4 <init_eeprom+0x454>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b36      	ldr	r3, [pc, #216]	; (10540 <init_eeprom+0x3f0>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b32      	ldr	r3, [pc, #200]	; (10534 <init_eeprom+0x3e4>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b37      	ldr	r3, [pc, #220]	; (10550 <init_eeprom+0x400>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b37      	ldr	r3, [pc, #220]	; (10554 <init_eeprom+0x404>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2e      	ldr	r3, [pc, #184]	; (10534 <init_eeprom+0x3e4>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2e      	ldr	r3, [pc, #184]	; (10538 <init_eeprom+0x3e8>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4a      	ldr	r2, [pc, #296]	; (105ac <init_eeprom+0x45c>)
   10484:	4b2b      	ldr	r3, [pc, #172]	; (10534 <init_eeprom+0x3e4>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2c      	ldr	r3, [pc, #176]	; (10540 <init_eeprom+0x3f0>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b46      	ldr	r3, [pc, #280]	; (105ac <init_eeprom+0x45c>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b44      	ldr	r3, [pc, #272]	; (105ac <init_eeprom+0x45c>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b43      	ldr	r3, [pc, #268]	; (105b0 <init_eeprom+0x460>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b27      	ldr	r3, [pc, #156]	; (10548 <init_eeprom+0x3f8>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a40      	ldr	r2, [pc, #256]	; (105b0 <init_eeprom+0x460>)
   104ae:	4b27      	ldr	r3, [pc, #156]	; (1054c <init_eeprom+0x3fc>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b21      	ldr	r3, [pc, #132]	; (10540 <init_eeprom+0x3f0>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3d      	ldr	r3, [pc, #244]	; (105b4 <init_eeprom+0x464>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b20      	ldr	r3, [pc, #128]	; (10548 <init_eeprom+0x3f8>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3a      	ldr	r2, [pc, #232]	; (105b4 <init_eeprom+0x464>)
   104ca:	4b20      	ldr	r3, [pc, #128]	; (1054c <init_eeprom+0x3fc>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1a      	ldr	r3, [pc, #104]	; (10540 <init_eeprom+0x3f0>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b34      	ldr	r3, [pc, #208]	; (105ac <init_eeprom+0x45c>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b33      	ldr	r3, [pc, #204]	; (105ac <init_eeprom+0x45c>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b31      	ldr	r3, [pc, #196]	; (105ac <init_eeprom+0x45c>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b30      	ldr	r3, [pc, #192]	; (105ac <init_eeprom+0x45c>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2e      	ldr	r3, [pc, #184]	; (105ac <init_eeprom+0x45c>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a0f      	ldr	r2, [pc, #60]	; (10534 <init_eeprom+0x3e4>)
   104f8:	4b2c      	ldr	r3, [pc, #176]	; (105ac <init_eeprom+0x45c>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b0f      	ldr	r3, [pc, #60]	; (10540 <init_eeprom+0x3f0>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0b      	ldr	r3, [pc, #44]	; (10534 <init_eeprom+0x3e4>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b10      	ldr	r3, [pc, #64]	; (10550 <init_eeprom+0x400>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b10      	ldr	r3, [pc, #64]	; (10554 <init_eeprom+0x404>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b07      	ldr	r3, [pc, #28]	; (10534 <init_eeprom+0x3e4>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b07      	ldr	r3, [pc, #28]	; (10538 <init_eeprom+0x3e8>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4905      	ldr	r1, [pc, #20]	; (10534 <init_eeprom+0x3e4>)
   10520:	4b25      	ldr	r3, [pc, #148]	; (105b8 <init_eeprom+0x468>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b06      	ldr	r3, [pc, #24]	; (10540 <init_eeprom+0x3f0>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b23      	ldr	r3, [pc, #140]	; (105b8 <init_eeprom+0x468>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	e045      	b.n	105bc <init_eeprom+0x46c>
   10530:	00010115 	.word	0x00010115
   10534:	20000584 	.word	0x20000584
   10538:	00023b7d 	.word	0x00023b7d
   1053c:	200005f8 	.word	0x200005f8
   10540:	00028e5d 	.word	0x00028e5d
   10544:	20000604 	.word	0x20000604
   10548:	00028e93 	.word	0x00028e93
   1054c:	00029a94 	.word	0x00029a94
   10550:	00023a71 	.word	0x00023a71
   10554:	00023c19 	.word	0x00023c19
   10558:	2000051c 	.word	0x2000051c
   1055c:	20000521 	.word	0x20000521
   10560:	00029aa0 	.word	0x00029aa0
   10564:	2000053f 	.word	0x2000053f
   10568:	00029ab0 	.word	0x00029ab0
   1056c:	200005c0 	.word	0x200005c0
   10570:	200005c5 	.word	0x200005c5
   10574:	00029abc 	.word	0x00029abc
   10578:	200005e5 	.word	0x200005e5
   1057c:	200005d5 	.word	0x200005d5
   10580:	00029acc 	.word	0x00029acc
   10584:	00029ad8 	.word	0x00029ad8
   10588:	20000614 	.word	0x20000614
   1058c:	00029ae8 	.word	0x00029ae8
   10590:	00010729 	.word	0x00010729
   10594:	00029af4 	.word	0x00029af4
   10598:	00029b00 	.word	0x00029b00
   1059c:	00029b0c 	.word	0x00029b0c
   105a0:	00029b18 	.word	0x00029b18
   105a4:	2000063c 	.word	0x2000063c
   105a8:	20000640 	.word	0x20000640
   105ac:	20000554 	.word	0x20000554
   105b0:	2000055c 	.word	0x2000055c
   105b4:	20000570 	.word	0x20000570
   105b8:	20000654 	.word	0x20000654
   105bc:	2b55      	cmp	r3, #85	; 0x55
   105be:	d065      	beq.n	1068c <init_eeprom+0x53c>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c0:	4b51      	ldr	r3, [pc, #324]	; (10708 <init_eeprom+0x5b8>)
   105c2:	2255      	movs	r2, #85	; 0x55
   105c4:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105c6:	4b50      	ldr	r3, [pc, #320]	; (10708 <init_eeprom+0x5b8>)
   105c8:	2200      	movs	r2, #0
   105ca:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105cc:	4b4e      	ldr	r3, [pc, #312]	; (10708 <init_eeprom+0x5b8>)
   105ce:	2232      	movs	r2, #50	; 0x32
   105d0:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d2:	4b4d      	ldr	r3, [pc, #308]	; (10708 <init_eeprom+0x5b8>)
   105d4:	224f      	movs	r2, #79	; 0x4f
   105d6:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105d8:	4b4b      	ldr	r3, [pc, #300]	; (10708 <init_eeprom+0x5b8>)
   105da:	2254      	movs	r2, #84	; 0x54
   105dc:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105de:	4b4a      	ldr	r3, [pc, #296]	; (10708 <init_eeprom+0x5b8>)
   105e0:	2202      	movs	r2, #2
   105e2:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e4:	4b48      	ldr	r3, [pc, #288]	; (10708 <init_eeprom+0x5b8>)
   105e6:	2200      	movs	r2, #0
   105e8:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ea:	4b47      	ldr	r3, [pc, #284]	; (10708 <init_eeprom+0x5b8>)
   105ec:	2200      	movs	r2, #0
   105ee:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f0:	4b45      	ldr	r3, [pc, #276]	; (10708 <init_eeprom+0x5b8>)
   105f2:	2200      	movs	r2, #0
   105f4:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105f6:	4b44      	ldr	r3, [pc, #272]	; (10708 <init_eeprom+0x5b8>)
   105f8:	2200      	movs	r2, #0
   105fa:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   105fc:	4b42      	ldr	r3, [pc, #264]	; (10708 <init_eeprom+0x5b8>)
   105fe:	2200      	movs	r2, #0
   10600:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10602:	4b41      	ldr	r3, [pc, #260]	; (10708 <init_eeprom+0x5b8>)
   10604:	2200      	movs	r2, #0
   10606:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   10608:	4b3f      	ldr	r3, [pc, #252]	; (10708 <init_eeprom+0x5b8>)
   1060a:	2200      	movs	r2, #0
   1060c:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   1060e:	4b3e      	ldr	r3, [pc, #248]	; (10708 <init_eeprom+0x5b8>)
   10610:	2200      	movs	r2, #0
   10612:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10614:	4b3c      	ldr	r3, [pc, #240]	; (10708 <init_eeprom+0x5b8>)
   10616:	2200      	movs	r2, #0
   10618:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061a:	4b3b      	ldr	r3, [pc, #236]	; (10708 <init_eeprom+0x5b8>)
   1061c:	2200      	movs	r2, #0
   1061e:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10620:	4b39      	ldr	r3, [pc, #228]	; (10708 <init_eeprom+0x5b8>)
   10622:	2200      	movs	r2, #0
   10624:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   10626:	4b38      	ldr	r3, [pc, #224]	; (10708 <init_eeprom+0x5b8>)
   10628:	2255      	movs	r2, #85	; 0x55
   1062a:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   1062c:	4b36      	ldr	r3, [pc, #216]	; (10708 <init_eeprom+0x5b8>)
   1062e:	2278      	movs	r2, #120	; 0x78
   10630:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10632:	4b35      	ldr	r3, [pc, #212]	; (10708 <init_eeprom+0x5b8>)
   10634:	2200      	movs	r2, #0
   10636:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   10638:	4b33      	ldr	r3, [pc, #204]	; (10708 <init_eeprom+0x5b8>)
   1063a:	2200      	movs	r2, #0
   1063c:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   1063e:	4b32      	ldr	r3, [pc, #200]	; (10708 <init_eeprom+0x5b8>)
   10640:	2220      	movs	r2, #32
   10642:	2101      	movs	r1, #1
   10644:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 100;
   10646:	4b30      	ldr	r3, [pc, #192]	; (10708 <init_eeprom+0x5b8>)
   10648:	2264      	movs	r2, #100	; 0x64
   1064a:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   1064c:	4b2e      	ldr	r3, [pc, #184]	; (10708 <init_eeprom+0x5b8>)
   1064e:	2224      	movs	r2, #36	; 0x24
   10650:	2101      	movs	r1, #1
   10652:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10654:	4b2c      	ldr	r3, [pc, #176]	; (10708 <init_eeprom+0x5b8>)
   10656:	2225      	movs	r2, #37	; 0x25
   10658:	2102      	movs	r1, #2
   1065a:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   1065c:	4b2a      	ldr	r3, [pc, #168]	; (10708 <init_eeprom+0x5b8>)
   1065e:	2226      	movs	r2, #38	; 0x26
   10660:	2102      	movs	r1, #2
   10662:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10664:	4b28      	ldr	r3, [pc, #160]	; (10708 <init_eeprom+0x5b8>)
   10666:	2227      	movs	r2, #39	; 0x27
   10668:	2100      	movs	r1, #0
   1066a:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   1066c:	4b26      	ldr	r3, [pc, #152]	; (10708 <init_eeprom+0x5b8>)
   1066e:	4a27      	ldr	r2, [pc, #156]	; (1070c <init_eeprom+0x5bc>)
   10670:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10672:	4925      	ldr	r1, [pc, #148]	; (10708 <init_eeprom+0x5b8>)
   10674:	4b26      	ldr	r3, [pc, #152]	; (10710 <init_eeprom+0x5c0>)
   10676:	2230      	movs	r2, #48	; 0x30
   10678:	0018      	movs	r0, r3
   1067a:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1067e:	4b24      	ldr	r3, [pc, #144]	; (10710 <init_eeprom+0x5c0>)
   10680:	0019      	movs	r1, r3
   10682:	201a      	movs	r0, #26
   10684:	4b24      	ldr	r3, [pc, #144]	; (10718 <init_eeprom+0x5c8>)
   10686:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   1068c:	4b20      	ldr	r3, [pc, #128]	; (10710 <init_eeprom+0x5c0>)
   1068e:	0019      	movs	r1, r3
   10690:	201b      	movs	r0, #27
   10692:	4b23      	ldr	r3, [pc, #140]	; (10720 <init_eeprom+0x5d0>)
   10694:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   10696:	491e      	ldr	r1, [pc, #120]	; (10710 <init_eeprom+0x5c0>)
   10698:	4b22      	ldr	r3, [pc, #136]	; (10724 <init_eeprom+0x5d4>)
   1069a:	2210      	movs	r2, #16
   1069c:	0018      	movs	r0, r3
   1069e:	4b1d      	ldr	r3, [pc, #116]	; (10714 <init_eeprom+0x5c4>)
   106a0:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a2:	4b20      	ldr	r3, [pc, #128]	; (10724 <init_eeprom+0x5d4>)
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	2b55      	cmp	r3, #85	; 0x55
   106a8:	d02a      	beq.n	10700 <init_eeprom+0x5b0>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106aa:	4b1e      	ldr	r3, [pc, #120]	; (10724 <init_eeprom+0x5d4>)
   106ac:	2255      	movs	r2, #85	; 0x55
   106ae:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b0:	4b1c      	ldr	r3, [pc, #112]	; (10724 <init_eeprom+0x5d4>)
   106b2:	2201      	movs	r2, #1
   106b4:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106b6:	4b1b      	ldr	r3, [pc, #108]	; (10724 <init_eeprom+0x5d4>)
   106b8:	2201      	movs	r2, #1
   106ba:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106bc:	4b19      	ldr	r3, [pc, #100]	; (10724 <init_eeprom+0x5d4>)
   106be:	2200      	movs	r2, #0
   106c0:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c2:	4b18      	ldr	r3, [pc, #96]	; (10724 <init_eeprom+0x5d4>)
   106c4:	2200      	movs	r2, #0
   106c6:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106c8:	4b16      	ldr	r3, [pc, #88]	; (10724 <init_eeprom+0x5d4>)
   106ca:	2200      	movs	r2, #0
   106cc:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106ce:	4b15      	ldr	r3, [pc, #84]	; (10724 <init_eeprom+0x5d4>)
   106d0:	2200      	movs	r2, #0
   106d2:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d4:	4b13      	ldr	r3, [pc, #76]	; (10724 <init_eeprom+0x5d4>)
   106d6:	2200      	movs	r2, #0
   106d8:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106da:	4b12      	ldr	r3, [pc, #72]	; (10724 <init_eeprom+0x5d4>)
   106dc:	2200      	movs	r2, #0
   106de:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e0:	4b10      	ldr	r3, [pc, #64]	; (10724 <init_eeprom+0x5d4>)
   106e2:	2200      	movs	r2, #0
   106e4:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106e6:	490f      	ldr	r1, [pc, #60]	; (10724 <init_eeprom+0x5d4>)
   106e8:	4b09      	ldr	r3, [pc, #36]	; (10710 <init_eeprom+0x5c0>)
   106ea:	2210      	movs	r2, #16
   106ec:	0018      	movs	r0, r3
   106ee:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106f0:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f2:	4b07      	ldr	r3, [pc, #28]	; (10710 <init_eeprom+0x5c0>)
   106f4:	0019      	movs	r1, r3
   106f6:	201b      	movs	r0, #27
   106f8:	4b07      	ldr	r3, [pc, #28]	; (10718 <init_eeprom+0x5c8>)
   106fa:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
	}
}
   10700:	46c0      	nop			; (mov r8, r8)
   10702:	46bd      	mov	sp, r7
   10704:	bd80      	pop	{r7, pc}
   10706:	46c0      	nop			; (mov r8, r8)
   10708:	20000654 	.word	0x20000654
   1070c:	00002710 	.word	0x00002710
   10710:	20000584 	.word	0x20000584
   10714:	00028e5d 	.word	0x00028e5d
   10718:	00023a71 	.word	0x00023a71
   1071c:	00023c19 	.word	0x00023c19
   10720:	00023b7d 	.word	0x00023b7d
   10724:	2000062c 	.word	0x2000062c

00010728 <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   10728:	b580      	push	{r7, lr}
   1072a:	b088      	sub	sp, #32
   1072c:	af00      	add	r7, sp, #0
   1072e:	0002      	movs	r2, r0
   10730:	6039      	str	r1, [r7, #0]
   10732:	1dfb      	adds	r3, r7, #7
   10734:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   10736:	4b28      	ldr	r3, [pc, #160]	; (107d8 <config_mobile_no_ee+0xb0>)
   10738:	223c      	movs	r2, #60	; 0x3c
   1073a:	2100      	movs	r1, #0
   1073c:	0018      	movs	r0, r3
   1073e:	4b27      	ldr	r3, [pc, #156]	; (107dc <config_mobile_no_ee+0xb4>)
   10740:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10742:	4a25      	ldr	r2, [pc, #148]	; (107d8 <config_mobile_no_ee+0xb0>)
   10744:	1dfb      	adds	r3, r7, #7
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	0011      	movs	r1, r2
   1074a:	0018      	movs	r0, r3
   1074c:	4b24      	ldr	r3, [pc, #144]	; (107e0 <config_mobile_no_ee+0xb8>)
   1074e:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10750:	2308      	movs	r3, #8
   10752:	18fa      	adds	r2, r7, r3
   10754:	4b20      	ldr	r3, [pc, #128]	; (107d8 <config_mobile_no_ee+0xb0>)
   10756:	0010      	movs	r0, r2
   10758:	0019      	movs	r1, r3
   1075a:	2318      	movs	r3, #24
   1075c:	001a      	movs	r2, r3
   1075e:	4b21      	ldr	r3, [pc, #132]	; (107e4 <config_mobile_no_ee+0xbc>)
   10760:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10762:	2308      	movs	r3, #8
   10764:	18fb      	adds	r3, r7, r3
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	2b55      	cmp	r3, #85	; 0x55
   1076a:	d031      	beq.n	107d0 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   1076c:	2308      	movs	r3, #8
   1076e:	18fb      	adds	r3, r7, r3
   10770:	2255      	movs	r2, #85	; 0x55
   10772:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10774:	2308      	movs	r3, #8
   10776:	18fb      	adds	r3, r7, r3
   10778:	2200      	movs	r2, #0
   1077a:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   1077c:	2308      	movs	r3, #8
   1077e:	18fb      	adds	r3, r7, r3
   10780:	2200      	movs	r2, #0
   10782:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10784:	2308      	movs	r3, #8
   10786:	18fb      	adds	r3, r7, r3
   10788:	2200      	movs	r2, #0
   1078a:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   1078c:	2308      	movs	r3, #8
   1078e:	18fb      	adds	r3, r7, r3
   10790:	3304      	adds	r3, #4
   10792:	2214      	movs	r2, #20
   10794:	2100      	movs	r1, #0
   10796:	0018      	movs	r0, r3
   10798:	4b10      	ldr	r3, [pc, #64]	; (107dc <config_mobile_no_ee+0xb4>)
   1079a:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   1079c:	683a      	ldr	r2, [r7, #0]
   1079e:	2308      	movs	r3, #8
   107a0:	18fb      	adds	r3, r7, r3
   107a2:	3304      	adds	r3, #4
   107a4:	0011      	movs	r1, r2
   107a6:	0018      	movs	r0, r3
   107a8:	4b0f      	ldr	r3, [pc, #60]	; (107e8 <config_mobile_no_ee+0xc0>)
   107aa:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107ac:	4a0a      	ldr	r2, [pc, #40]	; (107d8 <config_mobile_no_ee+0xb0>)
   107ae:	2308      	movs	r3, #8
   107b0:	18fb      	adds	r3, r7, r3
   107b2:	0010      	movs	r0, r2
   107b4:	0019      	movs	r1, r3
   107b6:	2318      	movs	r3, #24
   107b8:	001a      	movs	r2, r3
   107ba:	4b0a      	ldr	r3, [pc, #40]	; (107e4 <config_mobile_no_ee+0xbc>)
   107bc:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107be:	4a06      	ldr	r2, [pc, #24]	; (107d8 <config_mobile_no_ee+0xb0>)
   107c0:	1dfb      	adds	r3, r7, #7
   107c2:	781b      	ldrb	r3, [r3, #0]
   107c4:	0011      	movs	r1, r2
   107c6:	0018      	movs	r0, r3
   107c8:	4b08      	ldr	r3, [pc, #32]	; (107ec <config_mobile_no_ee+0xc4>)
   107ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc8>)
   107ce:	4798      	blx	r3
	}
}
   107d0:	46c0      	nop			; (mov r8, r8)
   107d2:	46bd      	mov	sp, r7
   107d4:	b008      	add	sp, #32
   107d6:	bd80      	pop	{r7, pc}
   107d8:	20000584 	.word	0x20000584
   107dc:	00028e93 	.word	0x00028e93
   107e0:	00023b7d 	.word	0x00023b7d
   107e4:	00028e5d 	.word	0x00028e5d
   107e8:	00029113 	.word	0x00029113
   107ec:	00023a71 	.word	0x00023a71
   107f0:	00023c19 	.word	0x00023c19

000107f4 <getNumbers>:


void getNumbers(char *string)
{
   107f4:	b580      	push	{r7, lr}
   107f6:	b08a      	sub	sp, #40	; 0x28
   107f8:	af00      	add	r7, sp, #0
   107fa:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   107fc:	687b      	ldr	r3, [r7, #4]
   107fe:	2200      	movs	r2, #0
   10800:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10802:	2327      	movs	r3, #39	; 0x27
   10804:	18fb      	adds	r3, r7, r3
   10806:	2200      	movs	r2, #0
   10808:	701a      	strb	r2, [r3, #0]
   1080a:	e063      	b.n	108d4 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   1080c:	4b37      	ldr	r3, [pc, #220]	; (108ec <getNumbers+0xf8>)
   1080e:	223c      	movs	r2, #60	; 0x3c
   10810:	2100      	movs	r1, #0
   10812:	0018      	movs	r0, r3
   10814:	4b36      	ldr	r3, [pc, #216]	; (108f0 <getNumbers+0xfc>)
   10816:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10818:	2327      	movs	r3, #39	; 0x27
   1081a:	18fb      	adds	r3, r7, r3
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	3309      	adds	r3, #9
   10820:	b2db      	uxtb	r3, r3
   10822:	4a32      	ldr	r2, [pc, #200]	; (108ec <getNumbers+0xf8>)
   10824:	0011      	movs	r1, r2
   10826:	0018      	movs	r0, r3
   10828:	4b32      	ldr	r3, [pc, #200]	; (108f4 <getNumbers+0x100>)
   1082a:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1082c:	230c      	movs	r3, #12
   1082e:	18fa      	adds	r2, r7, r3
   10830:	4b2e      	ldr	r3, [pc, #184]	; (108ec <getNumbers+0xf8>)
   10832:	0010      	movs	r0, r2
   10834:	0019      	movs	r1, r3
   10836:	2318      	movs	r3, #24
   10838:	001a      	movs	r2, r3
   1083a:	4b2f      	ldr	r3, [pc, #188]	; (108f8 <getNumbers+0x104>)
   1083c:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x108>)
   10840:	78db      	ldrb	r3, [r3, #3]
   10842:	2227      	movs	r2, #39	; 0x27
   10844:	18ba      	adds	r2, r7, r2
   10846:	7812      	ldrb	r2, [r2, #0]
   10848:	429a      	cmp	r2, r3
   1084a:	d10f      	bne.n	1086c <getNumbers+0x78>
		{
			strcat(string,"P:");
   1084c:	687b      	ldr	r3, [r7, #4]
   1084e:	0018      	movs	r0, r3
   10850:	4b2b      	ldr	r3, [pc, #172]	; (10900 <getNumbers+0x10c>)
   10852:	4798      	blx	r3
   10854:	0003      	movs	r3, r0
   10856:	001a      	movs	r2, r3
   10858:	687b      	ldr	r3, [r7, #4]
   1085a:	189a      	adds	r2, r3, r2
   1085c:	4b29      	ldr	r3, [pc, #164]	; (10904 <getNumbers+0x110>)
   1085e:	0010      	movs	r0, r2
   10860:	0019      	movs	r1, r3
   10862:	2303      	movs	r3, #3
   10864:	001a      	movs	r2, r3
   10866:	4b24      	ldr	r3, [pc, #144]	; (108f8 <getNumbers+0x104>)
   10868:	4798      	blx	r3
   1086a:	e015      	b.n	10898 <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   1086c:	4b23      	ldr	r3, [pc, #140]	; (108fc <getNumbers+0x108>)
   1086e:	791b      	ldrb	r3, [r3, #4]
   10870:	2227      	movs	r2, #39	; 0x27
   10872:	18ba      	adds	r2, r7, r2
   10874:	7812      	ldrb	r2, [r2, #0]
   10876:	429a      	cmp	r2, r3
   10878:	d10e      	bne.n	10898 <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087a:	687b      	ldr	r3, [r7, #4]
   1087c:	0018      	movs	r0, r3
   1087e:	4b20      	ldr	r3, [pc, #128]	; (10900 <getNumbers+0x10c>)
   10880:	4798      	blx	r3
   10882:	0003      	movs	r3, r0
   10884:	001a      	movs	r2, r3
   10886:	687b      	ldr	r3, [r7, #4]
   10888:	189a      	adds	r2, r3, r2
   1088a:	4b1f      	ldr	r3, [pc, #124]	; (10908 <getNumbers+0x114>)
   1088c:	0010      	movs	r0, r2
   1088e:	0019      	movs	r1, r3
   10890:	2303      	movs	r3, #3
   10892:	001a      	movs	r2, r3
   10894:	4b18      	ldr	r3, [pc, #96]	; (108f8 <getNumbers+0x104>)
   10896:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   10898:	230c      	movs	r3, #12
   1089a:	18fb      	adds	r3, r7, r3
   1089c:	1d1a      	adds	r2, r3, #4
   1089e:	687b      	ldr	r3, [r7, #4]
   108a0:	0011      	movs	r1, r2
   108a2:	0018      	movs	r0, r3
   108a4:	4b19      	ldr	r3, [pc, #100]	; (1090c <getNumbers+0x118>)
   108a6:	4798      	blx	r3
		strcat(string,"\n");
   108a8:	687b      	ldr	r3, [r7, #4]
   108aa:	0018      	movs	r0, r3
   108ac:	4b14      	ldr	r3, [pc, #80]	; (10900 <getNumbers+0x10c>)
   108ae:	4798      	blx	r3
   108b0:	0003      	movs	r3, r0
   108b2:	001a      	movs	r2, r3
   108b4:	687b      	ldr	r3, [r7, #4]
   108b6:	189a      	adds	r2, r3, r2
   108b8:	4b15      	ldr	r3, [pc, #84]	; (10910 <getNumbers+0x11c>)
   108ba:	0010      	movs	r0, r2
   108bc:	0019      	movs	r1, r3
   108be:	2302      	movs	r3, #2
   108c0:	001a      	movs	r2, r3
   108c2:	4b0d      	ldr	r3, [pc, #52]	; (108f8 <getNumbers+0x104>)
   108c4:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108c6:	2327      	movs	r3, #39	; 0x27
   108c8:	18fb      	adds	r3, r7, r3
   108ca:	781a      	ldrb	r2, [r3, #0]
   108cc:	2327      	movs	r3, #39	; 0x27
   108ce:	18fb      	adds	r3, r7, r3
   108d0:	3201      	adds	r2, #1
   108d2:	701a      	strb	r2, [r3, #0]
   108d4:	4b09      	ldr	r3, [pc, #36]	; (108fc <getNumbers+0x108>)
   108d6:	789b      	ldrb	r3, [r3, #2]
   108d8:	2227      	movs	r2, #39	; 0x27
   108da:	18ba      	adds	r2, r7, r2
   108dc:	7812      	ldrb	r2, [r2, #0]
   108de:	429a      	cmp	r2, r3
   108e0:	d394      	bcc.n	1080c <getNumbers+0x18>
	}
}
   108e2:	46c0      	nop			; (mov r8, r8)
   108e4:	46bd      	mov	sp, r7
   108e6:	b00a      	add	sp, #40	; 0x28
   108e8:	bd80      	pop	{r7, pc}
   108ea:	46c0      	nop			; (mov r8, r8)
   108ec:	20000584 	.word	0x20000584
   108f0:	00028e93 	.word	0x00028e93
   108f4:	00023b7d 	.word	0x00023b7d
   108f8:	00028e5d 	.word	0x00028e5d
   108fc:	20000614 	.word	0x20000614
   10900:	00029123 	.word	0x00029123
   10904:	00029b24 	.word	0x00029b24
   10908:	00029b28 	.word	0x00029b28
   1090c:	000290dd 	.word	0x000290dd
   10910:	00029b2c 	.word	0x00029b2c

00010914 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10914:	b580      	push	{r7, lr}
   10916:	b088      	sub	sp, #32
   10918:	af00      	add	r7, sp, #0
   1091a:	6078      	str	r0, [r7, #4]
   1091c:	000a      	movs	r2, r1
   1091e:	1cfb      	adds	r3, r7, #3
   10920:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10922:	687b      	ldr	r3, [r7, #4]
   10924:	2200      	movs	r2, #0
   10926:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   10928:	4b15      	ldr	r3, [pc, #84]	; (10980 <getIndexedNumber+0x6c>)
   1092a:	789b      	ldrb	r3, [r3, #2]
   1092c:	1cfa      	adds	r2, r7, #3
   1092e:	7812      	ldrb	r2, [r2, #0]
   10930:	429a      	cmp	r2, r3
   10932:	d21f      	bcs.n	10974 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10934:	4b13      	ldr	r3, [pc, #76]	; (10984 <getIndexedNumber+0x70>)
   10936:	223c      	movs	r2, #60	; 0x3c
   10938:	2100      	movs	r1, #0
   1093a:	0018      	movs	r0, r3
   1093c:	4b12      	ldr	r3, [pc, #72]	; (10988 <getIndexedNumber+0x74>)
   1093e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10940:	1cfb      	adds	r3, r7, #3
   10942:	781b      	ldrb	r3, [r3, #0]
   10944:	3309      	adds	r3, #9
   10946:	b2db      	uxtb	r3, r3
   10948:	4a0e      	ldr	r2, [pc, #56]	; (10984 <getIndexedNumber+0x70>)
   1094a:	0011      	movs	r1, r2
   1094c:	0018      	movs	r0, r3
   1094e:	4b0f      	ldr	r3, [pc, #60]	; (1098c <getIndexedNumber+0x78>)
   10950:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10952:	2308      	movs	r3, #8
   10954:	18fa      	adds	r2, r7, r3
   10956:	4b0b      	ldr	r3, [pc, #44]	; (10984 <getIndexedNumber+0x70>)
   10958:	0010      	movs	r0, r2
   1095a:	0019      	movs	r1, r3
   1095c:	2318      	movs	r3, #24
   1095e:	001a      	movs	r2, r3
   10960:	4b0b      	ldr	r3, [pc, #44]	; (10990 <getIndexedNumber+0x7c>)
   10962:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10964:	2308      	movs	r3, #8
   10966:	18fb      	adds	r3, r7, r3
   10968:	1d1a      	adds	r2, r3, #4
   1096a:	687b      	ldr	r3, [r7, #4]
   1096c:	0011      	movs	r1, r2
   1096e:	0018      	movs	r0, r3
   10970:	4b08      	ldr	r3, [pc, #32]	; (10994 <getIndexedNumber+0x80>)
   10972:	4798      	blx	r3
	}
	return IndexNo;
   10974:	687b      	ldr	r3, [r7, #4]
}
   10976:	0018      	movs	r0, r3
   10978:	46bd      	mov	sp, r7
   1097a:	b008      	add	sp, #32
   1097c:	bd80      	pop	{r7, pc}
   1097e:	46c0      	nop			; (mov r8, r8)
   10980:	20000614 	.word	0x20000614
   10984:	20000584 	.word	0x20000584
   10988:	00028e93 	.word	0x00028e93
   1098c:	00023b7d 	.word	0x00023b7d
   10990:	00028e5d 	.word	0x00028e5d
   10994:	000290dd 	.word	0x000290dd

00010998 <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   10998:	b580      	push	{r7, lr}
   1099a:	b088      	sub	sp, #32
   1099c:	af00      	add	r7, sp, #0
   1099e:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a0:	4b14      	ldr	r3, [pc, #80]	; (109f4 <isPrimaryNumber+0x5c>)
   109a2:	789b      	ldrb	r3, [r3, #2]
   109a4:	2b00      	cmp	r3, #0
   109a6:	d020      	beq.n	109ea <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109a8:	230c      	movs	r3, #12
   109aa:	18fb      	adds	r3, r7, r3
   109ac:	0018      	movs	r0, r3
   109ae:	2314      	movs	r3, #20
   109b0:	001a      	movs	r2, r3
   109b2:	2100      	movs	r1, #0
   109b4:	4b10      	ldr	r3, [pc, #64]	; (109f8 <isPrimaryNumber+0x60>)
   109b6:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109b8:	4b0e      	ldr	r3, [pc, #56]	; (109f4 <isPrimaryNumber+0x5c>)
   109ba:	78da      	ldrb	r2, [r3, #3]
   109bc:	230c      	movs	r3, #12
   109be:	18fb      	adds	r3, r7, r3
   109c0:	0011      	movs	r1, r2
   109c2:	0018      	movs	r0, r3
   109c4:	4b0d      	ldr	r3, [pc, #52]	; (109fc <isPrimaryNumber+0x64>)
   109c6:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109c8:	230c      	movs	r3, #12
   109ca:	18fa      	adds	r2, r7, r3
   109cc:	687b      	ldr	r3, [r7, #4]
   109ce:	0011      	movs	r1, r2
   109d0:	0018      	movs	r0, r3
   109d2:	4b0b      	ldr	r3, [pc, #44]	; (10a00 <isPrimaryNumber+0x68>)
   109d4:	4798      	blx	r3
   109d6:	1e03      	subs	r3, r0, #0
   109d8:	d001      	beq.n	109de <isPrimaryNumber+0x46>
		{
			return true;
   109da:	2301      	movs	r3, #1
   109dc:	e006      	b.n	109ec <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109de:	687b      	ldr	r3, [r7, #4]
   109e0:	0018      	movs	r0, r3
   109e2:	4b08      	ldr	r3, [pc, #32]	; (10a04 <isPrimaryNumber+0x6c>)
   109e4:	4798      	blx	r3
   109e6:	0003      	movs	r3, r0
   109e8:	e000      	b.n	109ec <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ea:	2300      	movs	r3, #0
}
   109ec:	0018      	movs	r0, r3
   109ee:	46bd      	mov	sp, r7
   109f0:	b008      	add	sp, #32
   109f2:	bd80      	pop	{r7, pc}
   109f4:	20000614 	.word	0x20000614
   109f8:	00028e93 	.word	0x00028e93
   109fc:	00010915 	.word	0x00010915
   10a00:	00029153 	.word	0x00029153
   10a04:	00010a09 	.word	0x00010a09

00010a08 <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a08:	b580      	push	{r7, lr}
   10a0a:	b082      	sub	sp, #8
   10a0c:	af00      	add	r7, sp, #0
   10a0e:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a10:	4b0b      	ldr	r3, [pc, #44]	; (10a40 <isAlterNumber+0x38>)
   10a12:	789b      	ldrb	r3, [r3, #2]
   10a14:	2b00      	cmp	r3, #0
   10a16:	d00d      	beq.n	10a34 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a18:	4b0a      	ldr	r3, [pc, #40]	; (10a44 <isAlterNumber+0x3c>)
   10a1a:	789b      	ldrb	r3, [r3, #2]
   10a1c:	2b00      	cmp	r3, #0
   10a1e:	d009      	beq.n	10a34 <isAlterNumber+0x2c>
   10a20:	4a09      	ldr	r2, [pc, #36]	; (10a48 <isAlterNumber+0x40>)
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	0011      	movs	r1, r2
   10a26:	0018      	movs	r0, r3
   10a28:	4b08      	ldr	r3, [pc, #32]	; (10a4c <isAlterNumber+0x44>)
   10a2a:	4798      	blx	r3
   10a2c:	1e03      	subs	r3, r0, #0
   10a2e:	d001      	beq.n	10a34 <isAlterNumber+0x2c>
		{
			return true;
   10a30:	2301      	movs	r3, #1
   10a32:	e000      	b.n	10a36 <isAlterNumber+0x2e>
		}
	}
	return false;
   10a34:	2300      	movs	r3, #0
}
   10a36:	0018      	movs	r0, r3
   10a38:	46bd      	mov	sp, r7
   10a3a:	b002      	add	sp, #8
   10a3c:	bd80      	pop	{r7, pc}
   10a3e:	46c0      	nop			; (mov r8, r8)
   10a40:	20000614 	.word	0x20000614
   10a44:	2000063c 	.word	0x2000063c
   10a48:	20000640 	.word	0x20000640
   10a4c:	00029153 	.word	0x00029153

00010a50 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a50:	b580      	push	{r7, lr}
   10a52:	b082      	sub	sp, #8
   10a54:	af00      	add	r7, sp, #0
   10a56:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a58:	4b09      	ldr	r3, [pc, #36]	; (10a80 <isM2MNumber+0x30>)
   10a5a:	785b      	ldrb	r3, [r3, #1]
   10a5c:	2b00      	cmp	r3, #0
   10a5e:	d009      	beq.n	10a74 <isM2MNumber+0x24>
   10a60:	4a08      	ldr	r2, [pc, #32]	; (10a84 <isM2MNumber+0x34>)
   10a62:	687b      	ldr	r3, [r7, #4]
   10a64:	0011      	movs	r1, r2
   10a66:	0018      	movs	r0, r3
   10a68:	4b07      	ldr	r3, [pc, #28]	; (10a88 <isM2MNumber+0x38>)
   10a6a:	4798      	blx	r3
   10a6c:	1e03      	subs	r3, r0, #0
   10a6e:	d001      	beq.n	10a74 <isM2MNumber+0x24>
	{
		return true;
   10a70:	2301      	movs	r3, #1
   10a72:	e000      	b.n	10a76 <isM2MNumber+0x26>
	}
	return false;
   10a74:	2300      	movs	r3, #0
}
   10a76:	0018      	movs	r0, r3
   10a78:	46bd      	mov	sp, r7
   10a7a:	b002      	add	sp, #8
   10a7c:	bd80      	pop	{r7, pc}
   10a7e:	46c0      	nop			; (mov r8, r8)
   10a80:	20000554 	.word	0x20000554
   10a84:	2000055c 	.word	0x2000055c
   10a88:	00029153 	.word	0x00029153

00010a8c <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a8c:	b580      	push	{r7, lr}
   10a8e:	b082      	sub	sp, #8
   10a90:	af00      	add	r7, sp, #0
   10a92:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a94:	4b09      	ldr	r3, [pc, #36]	; (10abc <isM2MRemoteNumber+0x30>)
   10a96:	78db      	ldrb	r3, [r3, #3]
   10a98:	2b00      	cmp	r3, #0
   10a9a:	d009      	beq.n	10ab0 <isM2MRemoteNumber+0x24>
   10a9c:	4a08      	ldr	r2, [pc, #32]	; (10ac0 <isM2MRemoteNumber+0x34>)
   10a9e:	687b      	ldr	r3, [r7, #4]
   10aa0:	0011      	movs	r1, r2
   10aa2:	0018      	movs	r0, r3
   10aa4:	4b07      	ldr	r3, [pc, #28]	; (10ac4 <isM2MRemoteNumber+0x38>)
   10aa6:	4798      	blx	r3
   10aa8:	1e03      	subs	r3, r0, #0
   10aaa:	d001      	beq.n	10ab0 <isM2MRemoteNumber+0x24>
	{
		return true;
   10aac:	2301      	movs	r3, #1
   10aae:	e000      	b.n	10ab2 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab0:	2300      	movs	r3, #0
}
   10ab2:	0018      	movs	r0, r3
   10ab4:	46bd      	mov	sp, r7
   10ab6:	b002      	add	sp, #8
   10ab8:	bd80      	pop	{r7, pc}
   10aba:	46c0      	nop			; (mov r8, r8)
   10abc:	20000554 	.word	0x20000554
   10ac0:	20000570 	.word	0x20000570
   10ac4:	00029153 	.word	0x00029153

00010ac8 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10ac8:	b580      	push	{r7, lr}
   10aca:	b082      	sub	sp, #8
   10acc:	af00      	add	r7, sp, #0
   10ace:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad0:	4b09      	ldr	r3, [pc, #36]	; (10af8 <getM2MNumber+0x30>)
   10ad2:	785b      	ldrb	r3, [r3, #1]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d006      	beq.n	10ae6 <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10ad8:	4a08      	ldr	r2, [pc, #32]	; (10afc <getM2MNumber+0x34>)
   10ada:	687b      	ldr	r3, [r7, #4]
   10adc:	0011      	movs	r1, r2
   10ade:	0018      	movs	r0, r3
   10ae0:	4b07      	ldr	r3, [pc, #28]	; (10b00 <getM2MNumber+0x38>)
   10ae2:	4798      	blx	r3
   10ae4:	e002      	b.n	10aec <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	2200      	movs	r2, #0
   10aea:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10aec:	687b      	ldr	r3, [r7, #4]
}
   10aee:	0018      	movs	r0, r3
   10af0:	46bd      	mov	sp, r7
   10af2:	b002      	add	sp, #8
   10af4:	bd80      	pop	{r7, pc}
   10af6:	46c0      	nop			; (mov r8, r8)
   10af8:	20000554 	.word	0x20000554
   10afc:	2000055c 	.word	0x2000055c
   10b00:	00029113 	.word	0x00029113

00010b04 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b04:	b580      	push	{r7, lr}
   10b06:	b082      	sub	sp, #8
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b0c:	4b09      	ldr	r3, [pc, #36]	; (10b34 <getM2MRemoteNumber+0x30>)
   10b0e:	78db      	ldrb	r3, [r3, #3]
   10b10:	2b00      	cmp	r3, #0
   10b12:	d006      	beq.n	10b22 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b14:	4a08      	ldr	r2, [pc, #32]	; (10b38 <getM2MRemoteNumber+0x34>)
   10b16:	687b      	ldr	r3, [r7, #4]
   10b18:	0011      	movs	r1, r2
   10b1a:	0018      	movs	r0, r3
   10b1c:	4b07      	ldr	r3, [pc, #28]	; (10b3c <getM2MRemoteNumber+0x38>)
   10b1e:	4798      	blx	r3
   10b20:	e002      	b.n	10b28 <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b22:	687b      	ldr	r3, [r7, #4]
   10b24:	2200      	movs	r2, #0
   10b26:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b28:	687b      	ldr	r3, [r7, #4]
}
   10b2a:	0018      	movs	r0, r3
   10b2c:	46bd      	mov	sp, r7
   10b2e:	b002      	add	sp, #8
   10b30:	bd80      	pop	{r7, pc}
   10b32:	46c0      	nop			; (mov r8, r8)
   10b34:	20000554 	.word	0x20000554
   10b38:	20000570 	.word	0x20000570
   10b3c:	00029113 	.word	0x00029113

00010b40 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b40:	b580      	push	{r7, lr}
   10b42:	b082      	sub	sp, #8
   10b44:	af00      	add	r7, sp, #0
   10b46:	0002      	movs	r2, r0
   10b48:	1dfb      	adds	r3, r7, #7
   10b4a:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	781a      	ldrb	r2, [r3, #0]
   10b50:	4b0a      	ldr	r3, [pc, #40]	; (10b7c <setM2MVerify+0x3c>)
   10b52:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b54:	4a0a      	ldr	r2, [pc, #40]	; (10b80 <setM2MVerify+0x40>)
   10b56:	4b09      	ldr	r3, [pc, #36]	; (10b7c <setM2MVerify+0x3c>)
   10b58:	0010      	movs	r0, r2
   10b5a:	0019      	movs	r1, r3
   10b5c:	2330      	movs	r3, #48	; 0x30
   10b5e:	001a      	movs	r2, r3
   10b60:	4b08      	ldr	r3, [pc, #32]	; (10b84 <setM2MVerify+0x44>)
   10b62:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b64:	4b06      	ldr	r3, [pc, #24]	; (10b80 <setM2MVerify+0x40>)
   10b66:	0019      	movs	r1, r3
   10b68:	2019      	movs	r0, #25
   10b6a:	4b07      	ldr	r3, [pc, #28]	; (10b88 <setM2MVerify+0x48>)
   10b6c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x4c>)
   10b70:	4798      	blx	r3
}
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	46bd      	mov	sp, r7
   10b76:	b002      	add	sp, #8
   10b78:	bd80      	pop	{r7, pc}
   10b7a:	46c0      	nop			; (mov r8, r8)
   10b7c:	20000554 	.word	0x20000554
   10b80:	20000584 	.word	0x20000584
   10b84:	00028e5d 	.word	0x00028e5d
   10b88:	00023a71 	.word	0x00023a71
   10b8c:	00023c19 	.word	0x00023c19

00010b90 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b90:	b580      	push	{r7, lr}
   10b92:	b082      	sub	sp, #8
   10b94:	af00      	add	r7, sp, #0
   10b96:	0002      	movs	r2, r0
   10b98:	1dfb      	adds	r3, r7, #7
   10b9a:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	781a      	ldrb	r2, [r3, #0]
   10ba0:	4b0a      	ldr	r3, [pc, #40]	; (10bcc <setM2MRemoteVerified+0x3c>)
   10ba2:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba4:	4a0a      	ldr	r2, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x40>)
   10ba6:	4b09      	ldr	r3, [pc, #36]	; (10bcc <setM2MRemoteVerified+0x3c>)
   10ba8:	0010      	movs	r0, r2
   10baa:	0019      	movs	r1, r3
   10bac:	2330      	movs	r3, #48	; 0x30
   10bae:	001a      	movs	r2, r3
   10bb0:	4b08      	ldr	r3, [pc, #32]	; (10bd4 <setM2MRemoteVerified+0x44>)
   10bb2:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb4:	4b06      	ldr	r3, [pc, #24]	; (10bd0 <setM2MRemoteVerified+0x40>)
   10bb6:	0019      	movs	r1, r3
   10bb8:	2019      	movs	r0, #25
   10bba:	4b07      	ldr	r3, [pc, #28]	; (10bd8 <setM2MRemoteVerified+0x48>)
   10bbc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x4c>)
   10bc0:	4798      	blx	r3
}
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	46bd      	mov	sp, r7
   10bc6:	b002      	add	sp, #8
   10bc8:	bd80      	pop	{r7, pc}
   10bca:	46c0      	nop			; (mov r8, r8)
   10bcc:	20000554 	.word	0x20000554
   10bd0:	20000584 	.word	0x20000584
   10bd4:	00028e5d 	.word	0x00028e5d
   10bd8:	00023a71 	.word	0x00023a71
   10bdc:	00023c19 	.word	0x00023c19

00010be0 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be0:	b580      	push	{r7, lr}
   10be2:	b082      	sub	sp, #8
   10be4:	af00      	add	r7, sp, #0
   10be6:	0002      	movs	r2, r0
   10be8:	1dfb      	adds	r3, r7, #7
   10bea:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	781a      	ldrb	r2, [r3, #0]
   10bf0:	4b0f      	ldr	r3, [pc, #60]	; (10c30 <saveM2MSettings+0x50>)
   10bf2:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf4:	1dfb      	adds	r3, r7, #7
   10bf6:	781b      	ldrb	r3, [r3, #0]
   10bf8:	2201      	movs	r2, #1
   10bfa:	4053      	eors	r3, r2
   10bfc:	b2db      	uxtb	r3, r3
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d002      	beq.n	10c08 <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c02:	4b0b      	ldr	r3, [pc, #44]	; (10c30 <saveM2MSettings+0x50>)
   10c04:	2200      	movs	r2, #0
   10c06:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c08:	4a0a      	ldr	r2, [pc, #40]	; (10c34 <saveM2MSettings+0x54>)
   10c0a:	4b09      	ldr	r3, [pc, #36]	; (10c30 <saveM2MSettings+0x50>)
   10c0c:	0010      	movs	r0, r2
   10c0e:	0019      	movs	r1, r3
   10c10:	2330      	movs	r3, #48	; 0x30
   10c12:	001a      	movs	r2, r3
   10c14:	4b08      	ldr	r3, [pc, #32]	; (10c38 <saveM2MSettings+0x58>)
   10c16:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c18:	4b06      	ldr	r3, [pc, #24]	; (10c34 <saveM2MSettings+0x54>)
   10c1a:	0019      	movs	r1, r3
   10c1c:	2019      	movs	r0, #25
   10c1e:	4b07      	ldr	r3, [pc, #28]	; (10c3c <saveM2MSettings+0x5c>)
   10c20:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x60>)
   10c24:	4798      	blx	r3
}
   10c26:	46c0      	nop			; (mov r8, r8)
   10c28:	46bd      	mov	sp, r7
   10c2a:	b002      	add	sp, #8
   10c2c:	bd80      	pop	{r7, pc}
   10c2e:	46c0      	nop			; (mov r8, r8)
   10c30:	20000554 	.word	0x20000554
   10c34:	20000584 	.word	0x20000584
   10c38:	00028e5d 	.word	0x00028e5d
   10c3c:	00023a71 	.word	0x00023a71
   10c40:	00023c19 	.word	0x00023c19

00010c44 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c44:	b580      	push	{r7, lr}
   10c46:	b082      	sub	sp, #8
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c4c:	4b0f      	ldr	r3, [pc, #60]	; (10c8c <addM2MNumber+0x48>)
   10c4e:	2201      	movs	r2, #1
   10c50:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c52:	687a      	ldr	r2, [r7, #4]
   10c54:	4b0e      	ldr	r3, [pc, #56]	; (10c90 <addM2MNumber+0x4c>)
   10c56:	0011      	movs	r1, r2
   10c58:	0018      	movs	r0, r3
   10c5a:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x50>)
   10c5c:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c5e:	4a0e      	ldr	r2, [pc, #56]	; (10c98 <addM2MNumber+0x54>)
   10c60:	4b0a      	ldr	r3, [pc, #40]	; (10c8c <addM2MNumber+0x48>)
   10c62:	0010      	movs	r0, r2
   10c64:	0019      	movs	r1, r3
   10c66:	2330      	movs	r3, #48	; 0x30
   10c68:	001a      	movs	r2, r3
   10c6a:	4b0c      	ldr	r3, [pc, #48]	; (10c9c <addM2MNumber+0x58>)
   10c6c:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c6e:	4b0a      	ldr	r3, [pc, #40]	; (10c98 <addM2MNumber+0x54>)
   10c70:	0019      	movs	r1, r3
   10c72:	2019      	movs	r0, #25
   10c74:	4b0a      	ldr	r3, [pc, #40]	; (10ca0 <addM2MNumber+0x5c>)
   10c76:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x60>)
   10c7a:	4798      	blx	r3
	setM2MVerify(false);
   10c7c:	2000      	movs	r0, #0
   10c7e:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x64>)
   10c80:	4798      	blx	r3
}
   10c82:	46c0      	nop			; (mov r8, r8)
   10c84:	46bd      	mov	sp, r7
   10c86:	b002      	add	sp, #8
   10c88:	bd80      	pop	{r7, pc}
   10c8a:	46c0      	nop			; (mov r8, r8)
   10c8c:	20000554 	.word	0x20000554
   10c90:	2000055c 	.word	0x2000055c
   10c94:	00029113 	.word	0x00029113
   10c98:	20000584 	.word	0x20000584
   10c9c:	00028e5d 	.word	0x00028e5d
   10ca0:	00023a71 	.word	0x00023a71
   10ca4:	00023c19 	.word	0x00023c19
   10ca8:	00010b41 	.word	0x00010b41

00010cac <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cac:	b580      	push	{r7, lr}
   10cae:	b082      	sub	sp, #8
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb4:	4b10      	ldr	r3, [pc, #64]	; (10cf8 <addM2MRemoteNumber+0x4c>)
   10cb6:	2201      	movs	r2, #1
   10cb8:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cba:	687a      	ldr	r2, [r7, #4]
   10cbc:	4b0f      	ldr	r3, [pc, #60]	; (10cfc <addM2MRemoteNumber+0x50>)
   10cbe:	0011      	movs	r1, r2
   10cc0:	0018      	movs	r0, r3
   10cc2:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x54>)
   10cc4:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cc6:	4a0f      	ldr	r2, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x58>)
   10cc8:	4b0b      	ldr	r3, [pc, #44]	; (10cf8 <addM2MRemoteNumber+0x4c>)
   10cca:	0010      	movs	r0, r2
   10ccc:	0019      	movs	r1, r3
   10cce:	2330      	movs	r3, #48	; 0x30
   10cd0:	001a      	movs	r2, r3
   10cd2:	4b0d      	ldr	r3, [pc, #52]	; (10d08 <addM2MRemoteNumber+0x5c>)
   10cd4:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cd6:	4b0b      	ldr	r3, [pc, #44]	; (10d04 <addM2MRemoteNumber+0x58>)
   10cd8:	0019      	movs	r1, r3
   10cda:	2019      	movs	r0, #25
   10cdc:	4b0b      	ldr	r3, [pc, #44]	; (10d0c <addM2MRemoteNumber+0x60>)
   10cde:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x64>)
   10ce2:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce4:	2000      	movs	r0, #0
   10ce6:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x68>)
   10ce8:	4798      	blx	r3
	saveM2MSettings(false);
   10cea:	2000      	movs	r0, #0
   10cec:	4b0a      	ldr	r3, [pc, #40]	; (10d18 <addM2MRemoteNumber+0x6c>)
   10cee:	4798      	blx	r3
}
   10cf0:	46c0      	nop			; (mov r8, r8)
   10cf2:	46bd      	mov	sp, r7
   10cf4:	b002      	add	sp, #8
   10cf6:	bd80      	pop	{r7, pc}
   10cf8:	20000554 	.word	0x20000554
   10cfc:	20000570 	.word	0x20000570
   10d00:	00029113 	.word	0x00029113
   10d04:	20000584 	.word	0x20000584
   10d08:	00028e5d 	.word	0x00028e5d
   10d0c:	00023a71 	.word	0x00023a71
   10d10:	00023c19 	.word	0x00023c19
   10d14:	00010b91 	.word	0x00010b91
   10d18:	00010be1 	.word	0x00010be1

00010d1c <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d1c:	b580      	push	{r7, lr}
   10d1e:	b08e      	sub	sp, #56	; 0x38
   10d20:	af00      	add	r7, sp, #0
   10d22:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d24:	4b28      	ldr	r3, [pc, #160]	; (10dc8 <getActiveNumber+0xac>)
   10d26:	789b      	ldrb	r3, [r3, #2]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d02b      	beq.n	10d84 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d2c:	4b27      	ldr	r3, [pc, #156]	; (10dcc <getActiveNumber+0xb0>)
   10d2e:	785b      	ldrb	r3, [r3, #1]
   10d30:	2b00      	cmp	r3, #0
   10d32:	d006      	beq.n	10d42 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d34:	4a26      	ldr	r2, [pc, #152]	; (10dd0 <getActiveNumber+0xb4>)
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	0011      	movs	r1, r2
   10d3a:	0018      	movs	r0, r3
   10d3c:	4b25      	ldr	r3, [pc, #148]	; (10dd4 <getActiveNumber+0xb8>)
   10d3e:	4798      	blx	r3
   10d40:	e03c      	b.n	10dbc <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d42:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xbc>)
   10d44:	223c      	movs	r2, #60	; 0x3c
   10d46:	2100      	movs	r1, #0
   10d48:	0018      	movs	r0, r3
   10d4a:	4b24      	ldr	r3, [pc, #144]	; (10ddc <getActiveNumber+0xc0>)
   10d4c:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d4e:	4b1e      	ldr	r3, [pc, #120]	; (10dc8 <getActiveNumber+0xac>)
   10d50:	78db      	ldrb	r3, [r3, #3]
   10d52:	3309      	adds	r3, #9
   10d54:	b2db      	uxtb	r3, r3
   10d56:	4a20      	ldr	r2, [pc, #128]	; (10dd8 <getActiveNumber+0xbc>)
   10d58:	0011      	movs	r1, r2
   10d5a:	0018      	movs	r0, r3
   10d5c:	4b20      	ldr	r3, [pc, #128]	; (10de0 <getActiveNumber+0xc4>)
   10d5e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d60:	2320      	movs	r3, #32
   10d62:	18fa      	adds	r2, r7, r3
   10d64:	4b1c      	ldr	r3, [pc, #112]	; (10dd8 <getActiveNumber+0xbc>)
   10d66:	0010      	movs	r0, r2
   10d68:	0019      	movs	r1, r3
   10d6a:	2318      	movs	r3, #24
   10d6c:	001a      	movs	r2, r3
   10d6e:	4b1d      	ldr	r3, [pc, #116]	; (10de4 <getActiveNumber+0xc8>)
   10d70:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d72:	2320      	movs	r3, #32
   10d74:	18fb      	adds	r3, r7, r3
   10d76:	1d1a      	adds	r2, r3, #4
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	0011      	movs	r1, r2
   10d7c:	0018      	movs	r0, r3
   10d7e:	4b15      	ldr	r3, [pc, #84]	; (10dd4 <getActiveNumber+0xb8>)
   10d80:	4798      	blx	r3
   10d82:	e01b      	b.n	10dbc <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d84:	4b14      	ldr	r3, [pc, #80]	; (10dd8 <getActiveNumber+0xbc>)
   10d86:	223c      	movs	r2, #60	; 0x3c
   10d88:	2100      	movs	r1, #0
   10d8a:	0018      	movs	r0, r3
   10d8c:	4b13      	ldr	r3, [pc, #76]	; (10ddc <getActiveNumber+0xc0>)
   10d8e:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d90:	4b11      	ldr	r3, [pc, #68]	; (10dd8 <getActiveNumber+0xbc>)
   10d92:	0019      	movs	r1, r3
   10d94:	2003      	movs	r0, #3
   10d96:	4b12      	ldr	r3, [pc, #72]	; (10de0 <getActiveNumber+0xc4>)
   10d98:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9a:	2308      	movs	r3, #8
   10d9c:	18fa      	adds	r2, r7, r3
   10d9e:	4b0e      	ldr	r3, [pc, #56]	; (10dd8 <getActiveNumber+0xbc>)
   10da0:	0010      	movs	r0, r2
   10da2:	0019      	movs	r1, r3
   10da4:	2318      	movs	r3, #24
   10da6:	001a      	movs	r2, r3
   10da8:	4b0e      	ldr	r3, [pc, #56]	; (10de4 <getActiveNumber+0xc8>)
   10daa:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10dac:	2308      	movs	r3, #8
   10dae:	18fb      	adds	r3, r7, r3
   10db0:	1d1a      	adds	r2, r3, #4
   10db2:	687b      	ldr	r3, [r7, #4]
   10db4:	0011      	movs	r1, r2
   10db6:	0018      	movs	r0, r3
   10db8:	4b06      	ldr	r3, [pc, #24]	; (10dd4 <getActiveNumber+0xb8>)
   10dba:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dbc:	687b      	ldr	r3, [r7, #4]
}
   10dbe:	0018      	movs	r0, r3
   10dc0:	46bd      	mov	sp, r7
   10dc2:	b00e      	add	sp, #56	; 0x38
   10dc4:	bd80      	pop	{r7, pc}
   10dc6:	46c0      	nop			; (mov r8, r8)
   10dc8:	20000614 	.word	0x20000614
   10dcc:	2000063c 	.word	0x2000063c
   10dd0:	20000640 	.word	0x20000640
   10dd4:	00029113 	.word	0x00029113
   10dd8:	20000584 	.word	0x20000584
   10ddc:	00028e93 	.word	0x00028e93
   10de0:	00023b7d 	.word	0x00023b7d
   10de4:	00028e5d 	.word	0x00028e5d

00010de8 <checkExists>:
uint8_t checkExists(char *number)
{
   10de8:	b580      	push	{r7, lr}
   10dea:	b08a      	sub	sp, #40	; 0x28
   10dec:	af00      	add	r7, sp, #0
   10dee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df0:	4b33      	ldr	r3, [pc, #204]	; (10ec0 <checkExists+0xd8>)
   10df2:	789b      	ldrb	r3, [r3, #2]
   10df4:	2b00      	cmp	r3, #0
   10df6:	d039      	beq.n	10e6c <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10df8:	2327      	movs	r3, #39	; 0x27
   10dfa:	18fb      	adds	r3, r7, r3
   10dfc:	2200      	movs	r2, #0
   10dfe:	701a      	strb	r2, [r3, #0]
   10e00:	e02d      	b.n	10e5e <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e02:	4b30      	ldr	r3, [pc, #192]	; (10ec4 <checkExists+0xdc>)
   10e04:	223c      	movs	r2, #60	; 0x3c
   10e06:	2100      	movs	r1, #0
   10e08:	0018      	movs	r0, r3
   10e0a:	4b2f      	ldr	r3, [pc, #188]	; (10ec8 <checkExists+0xe0>)
   10e0c:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e0e:	2327      	movs	r3, #39	; 0x27
   10e10:	18fb      	adds	r3, r7, r3
   10e12:	781b      	ldrb	r3, [r3, #0]
   10e14:	3309      	adds	r3, #9
   10e16:	b2db      	uxtb	r3, r3
   10e18:	4a2a      	ldr	r2, [pc, #168]	; (10ec4 <checkExists+0xdc>)
   10e1a:	0011      	movs	r1, r2
   10e1c:	0018      	movs	r0, r3
   10e1e:	4b2b      	ldr	r3, [pc, #172]	; (10ecc <checkExists+0xe4>)
   10e20:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e22:	230c      	movs	r3, #12
   10e24:	18fa      	adds	r2, r7, r3
   10e26:	4b27      	ldr	r3, [pc, #156]	; (10ec4 <checkExists+0xdc>)
   10e28:	0010      	movs	r0, r2
   10e2a:	0019      	movs	r1, r3
   10e2c:	2318      	movs	r3, #24
   10e2e:	001a      	movs	r2, r3
   10e30:	4b27      	ldr	r3, [pc, #156]	; (10ed0 <checkExists+0xe8>)
   10e32:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e34:	230c      	movs	r3, #12
   10e36:	18fb      	adds	r3, r7, r3
   10e38:	1d1a      	adds	r2, r3, #4
   10e3a:	687b      	ldr	r3, [r7, #4]
   10e3c:	0011      	movs	r1, r2
   10e3e:	0018      	movs	r0, r3
   10e40:	4b24      	ldr	r3, [pc, #144]	; (10ed4 <checkExists+0xec>)
   10e42:	4798      	blx	r3
   10e44:	1e03      	subs	r3, r0, #0
   10e46:	d003      	beq.n	10e50 <checkExists+0x68>
			{
				return i;
   10e48:	2327      	movs	r3, #39	; 0x27
   10e4a:	18fb      	adds	r3, r7, r3
   10e4c:	781b      	ldrb	r3, [r3, #0]
   10e4e:	e032      	b.n	10eb6 <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e50:	2327      	movs	r3, #39	; 0x27
   10e52:	18fb      	adds	r3, r7, r3
   10e54:	781a      	ldrb	r2, [r3, #0]
   10e56:	2327      	movs	r3, #39	; 0x27
   10e58:	18fb      	adds	r3, r7, r3
   10e5a:	3201      	adds	r2, #1
   10e5c:	701a      	strb	r2, [r3, #0]
   10e5e:	4b18      	ldr	r3, [pc, #96]	; (10ec0 <checkExists+0xd8>)
   10e60:	789b      	ldrb	r3, [r3, #2]
   10e62:	2227      	movs	r2, #39	; 0x27
   10e64:	18ba      	adds	r2, r7, r2
   10e66:	7812      	ldrb	r2, [r2, #0]
   10e68:	429a      	cmp	r2, r3
   10e6a:	d3ca      	bcc.n	10e02 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e6c:	687b      	ldr	r3, [r7, #4]
   10e6e:	0018      	movs	r0, r3
   10e70:	4b19      	ldr	r3, [pc, #100]	; (10ed8 <checkExists+0xf0>)
   10e72:	4798      	blx	r3
   10e74:	1e03      	subs	r3, r0, #0
   10e76:	d001      	beq.n	10e7c <checkExists+0x94>
	{
		return 0xFD;
   10e78:	23fd      	movs	r3, #253	; 0xfd
   10e7a:	e01c      	b.n	10eb6 <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e7c:	4b17      	ldr	r3, [pc, #92]	; (10edc <checkExists+0xf4>)
   10e7e:	789b      	ldrb	r3, [r3, #2]
   10e80:	2b00      	cmp	r3, #0
   10e82:	d007      	beq.n	10e94 <checkExists+0xac>
   10e84:	687b      	ldr	r3, [r7, #4]
   10e86:	0018      	movs	r0, r3
   10e88:	4b15      	ldr	r3, [pc, #84]	; (10ee0 <checkExists+0xf8>)
   10e8a:	4798      	blx	r3
   10e8c:	1e03      	subs	r3, r0, #0
   10e8e:	d001      	beq.n	10e94 <checkExists+0xac>
	{
		return 0xFE;
   10e90:	23fe      	movs	r3, #254	; 0xfe
   10e92:	e010      	b.n	10eb6 <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e94:	4b13      	ldr	r3, [pc, #76]	; (10ee4 <checkExists+0xfc>)
   10e96:	78db      	ldrb	r3, [r3, #3]
   10e98:	2b00      	cmp	r3, #0
   10e9a:	d00b      	beq.n	10eb4 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10e9c:	4b0f      	ldr	r3, [pc, #60]	; (10edc <checkExists+0xf4>)
   10e9e:	791b      	ldrb	r3, [r3, #4]
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	d007      	beq.n	10eb4 <checkExists+0xcc>
   10ea4:	687b      	ldr	r3, [r7, #4]
   10ea6:	0018      	movs	r0, r3
   10ea8:	4b0f      	ldr	r3, [pc, #60]	; (10ee8 <checkExists+0x100>)
   10eaa:	4798      	blx	r3
   10eac:	1e03      	subs	r3, r0, #0
   10eae:	d001      	beq.n	10eb4 <checkExists+0xcc>
		{
			return 0xFE;
   10eb0:	23fe      	movs	r3, #254	; 0xfe
   10eb2:	e000      	b.n	10eb6 <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb4:	23ff      	movs	r3, #255	; 0xff
}
   10eb6:	0018      	movs	r0, r3
   10eb8:	46bd      	mov	sp, r7
   10eba:	b00a      	add	sp, #40	; 0x28
   10ebc:	bd80      	pop	{r7, pc}
   10ebe:	46c0      	nop			; (mov r8, r8)
   10ec0:	20000614 	.word	0x20000614
   10ec4:	20000584 	.word	0x20000584
   10ec8:	00028e93 	.word	0x00028e93
   10ecc:	00023b7d 	.word	0x00023b7d
   10ed0:	00028e5d 	.word	0x00028e5d
   10ed4:	00029153 	.word	0x00029153
   10ed8:	00010a09 	.word	0x00010a09
   10edc:	20000554 	.word	0x20000554
   10ee0:	00010a51 	.word	0x00010a51
   10ee4:	2000062c 	.word	0x2000062c
   10ee8:	00010a8d 	.word	0x00010a8d

00010eec <addNumber>:

bool addNumber(char *number)
{
   10eec:	b580      	push	{r7, lr}
   10eee:	b088      	sub	sp, #32
   10ef0:	af00      	add	r7, sp, #0
   10ef2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef4:	4b33      	ldr	r3, [pc, #204]	; (10fc4 <addNumber+0xd8>)
   10ef6:	789a      	ldrb	r2, [r3, #2]
   10ef8:	4b32      	ldr	r3, [pc, #200]	; (10fc4 <addNumber+0xd8>)
   10efa:	785b      	ldrb	r3, [r3, #1]
   10efc:	429a      	cmp	r2, r3
   10efe:	d101      	bne.n	10f04 <addNumber+0x18>
	{
		return false;
   10f00:	2300      	movs	r3, #0
   10f02:	e05a      	b.n	10fba <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f04:	687b      	ldr	r3, [r7, #4]
   10f06:	0018      	movs	r0, r3
   10f08:	4b2f      	ldr	r3, [pc, #188]	; (10fc8 <addNumber+0xdc>)
   10f0a:	4798      	blx	r3
   10f0c:	0003      	movs	r3, r0
   10f0e:	2bf0      	cmp	r3, #240	; 0xf0
   10f10:	d952      	bls.n	10fb8 <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f12:	4b2e      	ldr	r3, [pc, #184]	; (10fcc <addNumber+0xe0>)
   10f14:	223c      	movs	r2, #60	; 0x3c
   10f16:	2100      	movs	r1, #0
   10f18:	0018      	movs	r0, r3
   10f1a:	4b2d      	ldr	r3, [pc, #180]	; (10fd0 <addNumber+0xe4>)
   10f1c:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f1e:	4b29      	ldr	r3, [pc, #164]	; (10fc4 <addNumber+0xd8>)
   10f20:	789b      	ldrb	r3, [r3, #2]
   10f22:	3309      	adds	r3, #9
   10f24:	b2db      	uxtb	r3, r3
   10f26:	4a29      	ldr	r2, [pc, #164]	; (10fcc <addNumber+0xe0>)
   10f28:	0011      	movs	r1, r2
   10f2a:	0018      	movs	r0, r3
   10f2c:	4b29      	ldr	r3, [pc, #164]	; (10fd4 <addNumber+0xe8>)
   10f2e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f30:	2308      	movs	r3, #8
   10f32:	18fa      	adds	r2, r7, r3
   10f34:	4b25      	ldr	r3, [pc, #148]	; (10fcc <addNumber+0xe0>)
   10f36:	0010      	movs	r0, r2
   10f38:	0019      	movs	r1, r3
   10f3a:	2318      	movs	r3, #24
   10f3c:	001a      	movs	r2, r3
   10f3e:	4b26      	ldr	r3, [pc, #152]	; (10fd8 <addNumber+0xec>)
   10f40:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f42:	2308      	movs	r3, #8
   10f44:	18fb      	adds	r3, r7, r3
   10f46:	3304      	adds	r3, #4
   10f48:	2214      	movs	r2, #20
   10f4a:	2100      	movs	r1, #0
   10f4c:	0018      	movs	r0, r3
   10f4e:	4b20      	ldr	r3, [pc, #128]	; (10fd0 <addNumber+0xe4>)
   10f50:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f52:	687a      	ldr	r2, [r7, #4]
   10f54:	2308      	movs	r3, #8
   10f56:	18fb      	adds	r3, r7, r3
   10f58:	3304      	adds	r3, #4
   10f5a:	0011      	movs	r1, r2
   10f5c:	0018      	movs	r0, r3
   10f5e:	4b1f      	ldr	r3, [pc, #124]	; (10fdc <addNumber+0xf0>)
   10f60:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f62:	4a1a      	ldr	r2, [pc, #104]	; (10fcc <addNumber+0xe0>)
   10f64:	2308      	movs	r3, #8
   10f66:	18fb      	adds	r3, r7, r3
   10f68:	0010      	movs	r0, r2
   10f6a:	0019      	movs	r1, r3
   10f6c:	2318      	movs	r3, #24
   10f6e:	001a      	movs	r2, r3
   10f70:	4b19      	ldr	r3, [pc, #100]	; (10fd8 <addNumber+0xec>)
   10f72:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f74:	4b13      	ldr	r3, [pc, #76]	; (10fc4 <addNumber+0xd8>)
   10f76:	789b      	ldrb	r3, [r3, #2]
   10f78:	3309      	adds	r3, #9
   10f7a:	b2db      	uxtb	r3, r3
   10f7c:	4a13      	ldr	r2, [pc, #76]	; (10fcc <addNumber+0xe0>)
   10f7e:	0011      	movs	r1, r2
   10f80:	0018      	movs	r0, r3
   10f82:	4b17      	ldr	r3, [pc, #92]	; (10fe0 <addNumber+0xf4>)
   10f84:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf8>)
   10f88:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8a:	4b0e      	ldr	r3, [pc, #56]	; (10fc4 <addNumber+0xd8>)
   10f8c:	789b      	ldrb	r3, [r3, #2]
   10f8e:	3301      	adds	r3, #1
   10f90:	b2da      	uxtb	r2, r3
   10f92:	4b0c      	ldr	r3, [pc, #48]	; (10fc4 <addNumber+0xd8>)
   10f94:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f96:	4a0d      	ldr	r2, [pc, #52]	; (10fcc <addNumber+0xe0>)
   10f98:	4b0a      	ldr	r3, [pc, #40]	; (10fc4 <addNumber+0xd8>)
   10f9a:	0010      	movs	r0, r2
   10f9c:	0019      	movs	r1, r3
   10f9e:	2308      	movs	r3, #8
   10fa0:	001a      	movs	r2, r3
   10fa2:	4b0d      	ldr	r3, [pc, #52]	; (10fd8 <addNumber+0xec>)
   10fa4:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10fa6:	4b09      	ldr	r3, [pc, #36]	; (10fcc <addNumber+0xe0>)
   10fa8:	0019      	movs	r1, r3
   10faa:	2008      	movs	r0, #8
   10fac:	4b0c      	ldr	r3, [pc, #48]	; (10fe0 <addNumber+0xf4>)
   10fae:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf8>)
   10fb2:	4798      	blx	r3
			
			return true;
   10fb4:	2301      	movs	r3, #1
   10fb6:	e000      	b.n	10fba <addNumber+0xce>
		}
	}
	return false;
   10fb8:	2300      	movs	r3, #0
}
   10fba:	0018      	movs	r0, r3
   10fbc:	46bd      	mov	sp, r7
   10fbe:	b008      	add	sp, #32
   10fc0:	bd80      	pop	{r7, pc}
   10fc2:	46c0      	nop			; (mov r8, r8)
   10fc4:	20000614 	.word	0x20000614
   10fc8:	00010de9 	.word	0x00010de9
   10fcc:	20000584 	.word	0x20000584
   10fd0:	00028e93 	.word	0x00028e93
   10fd4:	00023b7d 	.word	0x00023b7d
   10fd8:	00028e5d 	.word	0x00028e5d
   10fdc:	00029113 	.word	0x00029113
   10fe0:	00023a71 	.word	0x00023a71
   10fe4:	00023c19 	.word	0x00023c19

00010fe8 <removeNumber>:

bool removeNumber(char *numer)
{
   10fe8:	b590      	push	{r4, r7, lr}
   10fea:	b085      	sub	sp, #20
   10fec:	af00      	add	r7, sp, #0
   10fee:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff0:	4b3d      	ldr	r3, [pc, #244]	; (110e8 <removeNumber+0x100>)
   10ff2:	789b      	ldrb	r3, [r3, #2]
   10ff4:	2b01      	cmp	r3, #1
   10ff6:	d801      	bhi.n	10ffc <removeNumber+0x14>
	{
		return false;
   10ff8:	2300      	movs	r3, #0
   10ffa:	e071      	b.n	110e0 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   10ffc:	230e      	movs	r3, #14
   10ffe:	18fc      	adds	r4, r7, r3
   11000:	687b      	ldr	r3, [r7, #4]
   11002:	0018      	movs	r0, r3
   11004:	4b39      	ldr	r3, [pc, #228]	; (110ec <removeNumber+0x104>)
   11006:	4798      	blx	r3
   11008:	0003      	movs	r3, r0
   1100a:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   1100c:	4b36      	ldr	r3, [pc, #216]	; (110e8 <removeNumber+0x100>)
   1100e:	785b      	ldrb	r3, [r3, #1]
   11010:	220e      	movs	r2, #14
   11012:	18ba      	adds	r2, r7, r2
   11014:	7812      	ldrb	r2, [r2, #0]
   11016:	429a      	cmp	r2, r3
   11018:	d261      	bcs.n	110de <removeNumber+0xf6>
   1101a:	4b33      	ldr	r3, [pc, #204]	; (110e8 <removeNumber+0x100>)
   1101c:	78db      	ldrb	r3, [r3, #3]
   1101e:	220e      	movs	r2, #14
   11020:	18ba      	adds	r2, r7, r2
   11022:	7812      	ldrb	r2, [r2, #0]
   11024:	429a      	cmp	r2, r3
   11026:	d05a      	beq.n	110de <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11028:	230f      	movs	r3, #15
   1102a:	18fb      	adds	r3, r7, r3
   1102c:	220e      	movs	r2, #14
   1102e:	18ba      	adds	r2, r7, r2
   11030:	7812      	ldrb	r2, [r2, #0]
   11032:	701a      	strb	r2, [r3, #0]
   11034:	e022      	b.n	1107c <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   11036:	4b2e      	ldr	r3, [pc, #184]	; (110f0 <removeNumber+0x108>)
   11038:	223c      	movs	r2, #60	; 0x3c
   1103a:	2100      	movs	r1, #0
   1103c:	0018      	movs	r0, r3
   1103e:	4b2d      	ldr	r3, [pc, #180]	; (110f4 <removeNumber+0x10c>)
   11040:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11042:	230f      	movs	r3, #15
   11044:	18fb      	adds	r3, r7, r3
   11046:	781b      	ldrb	r3, [r3, #0]
   11048:	330a      	adds	r3, #10
   1104a:	b2db      	uxtb	r3, r3
   1104c:	4a28      	ldr	r2, [pc, #160]	; (110f0 <removeNumber+0x108>)
   1104e:	0011      	movs	r1, r2
   11050:	0018      	movs	r0, r3
   11052:	4b29      	ldr	r3, [pc, #164]	; (110f8 <removeNumber+0x110>)
   11054:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   11056:	230f      	movs	r3, #15
   11058:	18fb      	adds	r3, r7, r3
   1105a:	781b      	ldrb	r3, [r3, #0]
   1105c:	3309      	adds	r3, #9
   1105e:	b2db      	uxtb	r3, r3
   11060:	4a23      	ldr	r2, [pc, #140]	; (110f0 <removeNumber+0x108>)
   11062:	0011      	movs	r1, r2
   11064:	0018      	movs	r0, r3
   11066:	4b25      	ldr	r3, [pc, #148]	; (110fc <removeNumber+0x114>)
   11068:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x118>)
   1106c:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1106e:	230f      	movs	r3, #15
   11070:	18fb      	adds	r3, r7, r3
   11072:	781a      	ldrb	r2, [r3, #0]
   11074:	230f      	movs	r3, #15
   11076:	18fb      	adds	r3, r7, r3
   11078:	3201      	adds	r2, #1
   1107a:	701a      	strb	r2, [r3, #0]
   1107c:	230f      	movs	r3, #15
   1107e:	18fb      	adds	r3, r7, r3
   11080:	781a      	ldrb	r2, [r3, #0]
   11082:	4b19      	ldr	r3, [pc, #100]	; (110e8 <removeNumber+0x100>)
   11084:	789b      	ldrb	r3, [r3, #2]
   11086:	3b01      	subs	r3, #1
   11088:	429a      	cmp	r2, r3
   1108a:	dbd4      	blt.n	11036 <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   1108c:	4b16      	ldr	r3, [pc, #88]	; (110e8 <removeNumber+0x100>)
   1108e:	789b      	ldrb	r3, [r3, #2]
   11090:	3b01      	subs	r3, #1
   11092:	b2da      	uxtb	r2, r3
   11094:	4b14      	ldr	r3, [pc, #80]	; (110e8 <removeNumber+0x100>)
   11096:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   11098:	4b13      	ldr	r3, [pc, #76]	; (110e8 <removeNumber+0x100>)
   1109a:	791b      	ldrb	r3, [r3, #4]
   1109c:	220e      	movs	r2, #14
   1109e:	18ba      	adds	r2, r7, r2
   110a0:	7812      	ldrb	r2, [r2, #0]
   110a2:	429a      	cmp	r2, r3
   110a4:	d007      	beq.n	110b6 <removeNumber+0xce>
   110a6:	230e      	movs	r3, #14
   110a8:	18fb      	adds	r3, r7, r3
   110aa:	781a      	ldrb	r2, [r3, #0]
   110ac:	4b0e      	ldr	r3, [pc, #56]	; (110e8 <removeNumber+0x100>)
   110ae:	789b      	ldrb	r3, [r3, #2]
   110b0:	3b01      	subs	r3, #1
   110b2:	429a      	cmp	r2, r3
   110b4:	dd02      	ble.n	110bc <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110b6:	4b0c      	ldr	r3, [pc, #48]	; (110e8 <removeNumber+0x100>)
   110b8:	2201      	movs	r2, #1
   110ba:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110bc:	4a0c      	ldr	r2, [pc, #48]	; (110f0 <removeNumber+0x108>)
   110be:	4b0a      	ldr	r3, [pc, #40]	; (110e8 <removeNumber+0x100>)
   110c0:	0010      	movs	r0, r2
   110c2:	0019      	movs	r1, r3
   110c4:	2308      	movs	r3, #8
   110c6:	001a      	movs	r2, r3
   110c8:	4b0e      	ldr	r3, [pc, #56]	; (11104 <removeNumber+0x11c>)
   110ca:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110cc:	4b08      	ldr	r3, [pc, #32]	; (110f0 <removeNumber+0x108>)
   110ce:	0019      	movs	r1, r3
   110d0:	2008      	movs	r0, #8
   110d2:	4b0a      	ldr	r3, [pc, #40]	; (110fc <removeNumber+0x114>)
   110d4:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x118>)
   110d8:	4798      	blx	r3
			return true;
   110da:	2301      	movs	r3, #1
   110dc:	e000      	b.n	110e0 <removeNumber+0xf8>
		}
	}
	return false;
   110de:	2300      	movs	r3, #0
}
   110e0:	0018      	movs	r0, r3
   110e2:	46bd      	mov	sp, r7
   110e4:	b005      	add	sp, #20
   110e6:	bd90      	pop	{r4, r7, pc}
   110e8:	20000614 	.word	0x20000614
   110ec:	00010de9 	.word	0x00010de9
   110f0:	20000584 	.word	0x20000584
   110f4:	00028e93 	.word	0x00028e93
   110f8:	00023b7d 	.word	0x00023b7d
   110fc:	00023a71 	.word	0x00023a71
   11100:	00023c19 	.word	0x00023c19
   11104:	00028e5d 	.word	0x00028e5d

00011108 <clearNumbers>:

void clearNumbers(bool admin)
{
   11108:	b580      	push	{r7, lr}
   1110a:	b082      	sub	sp, #8
   1110c:	af00      	add	r7, sp, #0
   1110e:	0002      	movs	r2, r0
   11110:	1dfb      	adds	r3, r7, #7
   11112:	701a      	strb	r2, [r3, #0]
	if (admin)
   11114:	1dfb      	adds	r3, r7, #7
   11116:	781b      	ldrb	r3, [r3, #0]
   11118:	2b00      	cmp	r3, #0
   1111a:	d003      	beq.n	11124 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   1111c:	4b28      	ldr	r3, [pc, #160]	; (111c0 <clearNumbers+0xb8>)
   1111e:	2200      	movs	r2, #0
   11120:	709a      	strb	r2, [r3, #2]
   11122:	e018      	b.n	11156 <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11124:	4b27      	ldr	r3, [pc, #156]	; (111c4 <clearNumbers+0xbc>)
   11126:	223c      	movs	r2, #60	; 0x3c
   11128:	2100      	movs	r1, #0
   1112a:	0018      	movs	r0, r3
   1112c:	4b26      	ldr	r3, [pc, #152]	; (111c8 <clearNumbers+0xc0>)
   1112e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11130:	4b23      	ldr	r3, [pc, #140]	; (111c0 <clearNumbers+0xb8>)
   11132:	78db      	ldrb	r3, [r3, #3]
   11134:	3309      	adds	r3, #9
   11136:	b2db      	uxtb	r3, r3
   11138:	4a22      	ldr	r2, [pc, #136]	; (111c4 <clearNumbers+0xbc>)
   1113a:	0011      	movs	r1, r2
   1113c:	0018      	movs	r0, r3
   1113e:	4b23      	ldr	r3, [pc, #140]	; (111cc <clearNumbers+0xc4>)
   11140:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11142:	4b20      	ldr	r3, [pc, #128]	; (111c4 <clearNumbers+0xbc>)
   11144:	0019      	movs	r1, r3
   11146:	2009      	movs	r0, #9
   11148:	4b21      	ldr	r3, [pc, #132]	; (111d0 <clearNumbers+0xc8>)
   1114a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xcc>)
   1114e:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11150:	4b1b      	ldr	r3, [pc, #108]	; (111c0 <clearNumbers+0xb8>)
   11152:	2201      	movs	r2, #1
   11154:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   11156:	4b1a      	ldr	r3, [pc, #104]	; (111c0 <clearNumbers+0xb8>)
   11158:	2200      	movs	r2, #0
   1115a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1115c:	4b18      	ldr	r3, [pc, #96]	; (111c0 <clearNumbers+0xb8>)
   1115e:	2201      	movs	r2, #1
   11160:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11162:	4a18      	ldr	r2, [pc, #96]	; (111c4 <clearNumbers+0xbc>)
   11164:	4b16      	ldr	r3, [pc, #88]	; (111c0 <clearNumbers+0xb8>)
   11166:	0010      	movs	r0, r2
   11168:	0019      	movs	r1, r3
   1116a:	2308      	movs	r3, #8
   1116c:	001a      	movs	r2, r3
   1116e:	4b1a      	ldr	r3, [pc, #104]	; (111d8 <clearNumbers+0xd0>)
   11170:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11172:	4b13      	ldr	r3, [pc, #76]	; (111c0 <clearNumbers+0xb8>)
   11174:	2200      	movs	r2, #0
   11176:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11178:	4b11      	ldr	r3, [pc, #68]	; (111c0 <clearNumbers+0xb8>)
   1117a:	2201      	movs	r2, #1
   1117c:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   1117e:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xbc>)
   11180:	0019      	movs	r1, r3
   11182:	2008      	movs	r0, #8
   11184:	4b12      	ldr	r3, [pc, #72]	; (111d0 <clearNumbers+0xc8>)
   11186:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xcc>)
   1118a:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   1118c:	2000      	movs	r0, #0
   1118e:	4b13      	ldr	r3, [pc, #76]	; (111dc <clearNumbers+0xd4>)
   11190:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd8>)
   11194:	2200      	movs	r2, #0
   11196:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11198:	4a0a      	ldr	r2, [pc, #40]	; (111c4 <clearNumbers+0xbc>)
   1119a:	4b11      	ldr	r3, [pc, #68]	; (111e0 <clearNumbers+0xd8>)
   1119c:	0010      	movs	r0, r2
   1119e:	0019      	movs	r1, r3
   111a0:	2318      	movs	r3, #24
   111a2:	001a      	movs	r2, r3
   111a4:	4b0c      	ldr	r3, [pc, #48]	; (111d8 <clearNumbers+0xd0>)
   111a6:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111a8:	4b06      	ldr	r3, [pc, #24]	; (111c4 <clearNumbers+0xbc>)
   111aa:	0019      	movs	r1, r3
   111ac:	2018      	movs	r0, #24
   111ae:	4b08      	ldr	r3, [pc, #32]	; (111d0 <clearNumbers+0xc8>)
   111b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xcc>)
   111b4:	4798      	blx	r3
}
   111b6:	46c0      	nop			; (mov r8, r8)
   111b8:	46bd      	mov	sp, r7
   111ba:	b002      	add	sp, #8
   111bc:	bd80      	pop	{r7, pc}
   111be:	46c0      	nop			; (mov r8, r8)
   111c0:	20000614 	.word	0x20000614
   111c4:	20000584 	.word	0x20000584
   111c8:	00028e93 	.word	0x00028e93
   111cc:	00023b7d 	.word	0x00023b7d
   111d0:	00023a71 	.word	0x00023a71
   111d4:	00023c19 	.word	0x00023c19
   111d8:	00028e5d 	.word	0x00028e5d
   111dc:	000111e5 	.word	0x000111e5
   111e0:	2000063c 	.word	0x2000063c

000111e4 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e4:	b580      	push	{r7, lr}
   111e6:	b082      	sub	sp, #8
   111e8:	af00      	add	r7, sp, #0
   111ea:	0002      	movs	r2, r0
   111ec:	1dfb      	adds	r3, r7, #7
   111ee:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	781a      	ldrb	r2, [r3, #0]
   111f4:	4b0a      	ldr	r3, [pc, #40]	; (11220 <saveAlterNumberSetting+0x3c>)
   111f6:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111f8:	4a0a      	ldr	r2, [pc, #40]	; (11224 <saveAlterNumberSetting+0x40>)
   111fa:	4b09      	ldr	r3, [pc, #36]	; (11220 <saveAlterNumberSetting+0x3c>)
   111fc:	0010      	movs	r0, r2
   111fe:	0019      	movs	r1, r3
   11200:	2318      	movs	r3, #24
   11202:	001a      	movs	r2, r3
   11204:	4b08      	ldr	r3, [pc, #32]	; (11228 <saveAlterNumberSetting+0x44>)
   11206:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11208:	4b06      	ldr	r3, [pc, #24]	; (11224 <saveAlterNumberSetting+0x40>)
   1120a:	0019      	movs	r1, r3
   1120c:	2018      	movs	r0, #24
   1120e:	4b07      	ldr	r3, [pc, #28]	; (1122c <saveAlterNumberSetting+0x48>)
   11210:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x4c>)
   11214:	4798      	blx	r3
}
   11216:	46c0      	nop			; (mov r8, r8)
   11218:	46bd      	mov	sp, r7
   1121a:	b002      	add	sp, #8
   1121c:	bd80      	pop	{r7, pc}
   1121e:	46c0      	nop			; (mov r8, r8)
   11220:	2000063c 	.word	0x2000063c
   11224:	20000584 	.word	0x20000584
   11228:	00028e5d 	.word	0x00028e5d
   1122c:	00023a71 	.word	0x00023a71
   11230:	00023c19 	.word	0x00023c19

00011234 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11234:	b580      	push	{r7, lr}
   11236:	b082      	sub	sp, #8
   11238:	af00      	add	r7, sp, #0
   1123a:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   1123c:	4b11      	ldr	r3, [pc, #68]	; (11284 <addAlternateNumber+0x50>)
   1123e:	789b      	ldrb	r3, [r3, #2]
   11240:	2b00      	cmp	r3, #0
   11242:	d019      	beq.n	11278 <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11244:	4b10      	ldr	r3, [pc, #64]	; (11288 <addAlternateNumber+0x54>)
   11246:	2201      	movs	r2, #1
   11248:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124a:	687a      	ldr	r2, [r7, #4]
   1124c:	4b0f      	ldr	r3, [pc, #60]	; (1128c <addAlternateNumber+0x58>)
   1124e:	0011      	movs	r1, r2
   11250:	0018      	movs	r0, r3
   11252:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x5c>)
   11254:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   11256:	4a0f      	ldr	r2, [pc, #60]	; (11294 <addAlternateNumber+0x60>)
   11258:	4b0b      	ldr	r3, [pc, #44]	; (11288 <addAlternateNumber+0x54>)
   1125a:	0010      	movs	r0, r2
   1125c:	0019      	movs	r1, r3
   1125e:	2318      	movs	r3, #24
   11260:	001a      	movs	r2, r3
   11262:	4b0d      	ldr	r3, [pc, #52]	; (11298 <addAlternateNumber+0x64>)
   11264:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   11266:	4b0b      	ldr	r3, [pc, #44]	; (11294 <addAlternateNumber+0x60>)
   11268:	0019      	movs	r1, r3
   1126a:	2018      	movs	r0, #24
   1126c:	4b0b      	ldr	r3, [pc, #44]	; (1129c <addAlternateNumber+0x68>)
   1126e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x6c>)
   11272:	4798      	blx	r3
		
		return true;
   11274:	2301      	movs	r3, #1
   11276:	e000      	b.n	1127a <addAlternateNumber+0x46>
	}
	return false;
   11278:	2300      	movs	r3, #0
}
   1127a:	0018      	movs	r0, r3
   1127c:	46bd      	mov	sp, r7
   1127e:	b002      	add	sp, #8
   11280:	bd80      	pop	{r7, pc}
   11282:	46c0      	nop			; (mov r8, r8)
   11284:	20000614 	.word	0x20000614
   11288:	2000063c 	.word	0x2000063c
   1128c:	20000640 	.word	0x20000640
   11290:	00029113 	.word	0x00029113
   11294:	20000584 	.word	0x20000584
   11298:	00028e5d 	.word	0x00028e5d
   1129c:	00023a71 	.word	0x00023a71
   112a0:	00023c19 	.word	0x00023c19

000112a4 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a4:	b580      	push	{r7, lr}
   112a6:	b082      	sub	sp, #8
   112a8:	af00      	add	r7, sp, #0
   112aa:	0002      	movs	r2, r0
   112ac:	1dfb      	adds	r3, r7, #7
   112ae:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	781a      	ldrb	r2, [r3, #0]
   112b4:	4b09      	ldr	r3, [pc, #36]	; (112dc <saveAutoStartSettings+0x38>)
   112b6:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112b8:	4908      	ldr	r1, [pc, #32]	; (112dc <saveAutoStartSettings+0x38>)
   112ba:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x3c>)
   112bc:	2230      	movs	r2, #48	; 0x30
   112be:	0018      	movs	r0, r3
   112c0:	4b08      	ldr	r3, [pc, #32]	; (112e4 <saveAutoStartSettings+0x40>)
   112c2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c4:	4b06      	ldr	r3, [pc, #24]	; (112e0 <saveAutoStartSettings+0x3c>)
   112c6:	0019      	movs	r1, r3
   112c8:	201a      	movs	r0, #26
   112ca:	4b07      	ldr	r3, [pc, #28]	; (112e8 <saveAutoStartSettings+0x44>)
   112cc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x48>)
   112d0:	4798      	blx	r3
}
   112d2:	46c0      	nop			; (mov r8, r8)
   112d4:	46bd      	mov	sp, r7
   112d6:	b002      	add	sp, #8
   112d8:	bd80      	pop	{r7, pc}
   112da:	46c0      	nop			; (mov r8, r8)
   112dc:	20000654 	.word	0x20000654
   112e0:	20000584 	.word	0x20000584
   112e4:	00028e5d 	.word	0x00028e5d
   112e8:	00023a71 	.word	0x00023a71
   112ec:	00023c19 	.word	0x00023c19

000112f0 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f0:	b580      	push	{r7, lr}
   112f2:	b082      	sub	sp, #8
   112f4:	af00      	add	r7, sp, #0
   112f6:	0002      	movs	r2, r0
   112f8:	1dbb      	adds	r3, r7, #6
   112fa:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   112fc:	4b0a      	ldr	r3, [pc, #40]	; (11328 <saveAutoStartTimeSettings+0x38>)
   112fe:	1dba      	adds	r2, r7, #6
   11300:	8812      	ldrh	r2, [r2, #0]
   11302:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11304:	4908      	ldr	r1, [pc, #32]	; (11328 <saveAutoStartTimeSettings+0x38>)
   11306:	4b09      	ldr	r3, [pc, #36]	; (1132c <saveAutoStartTimeSettings+0x3c>)
   11308:	2230      	movs	r2, #48	; 0x30
   1130a:	0018      	movs	r0, r3
   1130c:	4b08      	ldr	r3, [pc, #32]	; (11330 <saveAutoStartTimeSettings+0x40>)
   1130e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11310:	4b06      	ldr	r3, [pc, #24]	; (1132c <saveAutoStartTimeSettings+0x3c>)
   11312:	0019      	movs	r1, r3
   11314:	201a      	movs	r0, #26
   11316:	4b07      	ldr	r3, [pc, #28]	; (11334 <saveAutoStartTimeSettings+0x44>)
   11318:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x48>)
   1131c:	4798      	blx	r3
}
   1131e:	46c0      	nop			; (mov r8, r8)
   11320:	46bd      	mov	sp, r7
   11322:	b002      	add	sp, #8
   11324:	bd80      	pop	{r7, pc}
   11326:	46c0      	nop			; (mov r8, r8)
   11328:	20000654 	.word	0x20000654
   1132c:	20000584 	.word	0x20000584
   11330:	00028e5d 	.word	0x00028e5d
   11334:	00023a71 	.word	0x00023a71
   11338:	00023c19 	.word	0x00023c19

0001133c <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   1133c:	b580      	push	{r7, lr}
   1133e:	b082      	sub	sp, #8
   11340:	af00      	add	r7, sp, #0
   11342:	0002      	movs	r2, r0
   11344:	1dfb      	adds	r3, r7, #7
   11346:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   11348:	4b0a      	ldr	r3, [pc, #40]	; (11374 <saveDNDSettings+0x38>)
   1134a:	1dfa      	adds	r2, r7, #7
   1134c:	7812      	ldrb	r2, [r2, #0]
   1134e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11350:	4908      	ldr	r1, [pc, #32]	; (11374 <saveDNDSettings+0x38>)
   11352:	4b09      	ldr	r3, [pc, #36]	; (11378 <saveDNDSettings+0x3c>)
   11354:	2230      	movs	r2, #48	; 0x30
   11356:	0018      	movs	r0, r3
   11358:	4b08      	ldr	r3, [pc, #32]	; (1137c <saveDNDSettings+0x40>)
   1135a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1135c:	4b06      	ldr	r3, [pc, #24]	; (11378 <saveDNDSettings+0x3c>)
   1135e:	0019      	movs	r1, r3
   11360:	201a      	movs	r0, #26
   11362:	4b07      	ldr	r3, [pc, #28]	; (11380 <saveDNDSettings+0x44>)
   11364:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x48>)
   11368:	4798      	blx	r3
}
   1136a:	46c0      	nop			; (mov r8, r8)
   1136c:	46bd      	mov	sp, r7
   1136e:	b002      	add	sp, #8
   11370:	bd80      	pop	{r7, pc}
   11372:	46c0      	nop			; (mov r8, r8)
   11374:	20000654 	.word	0x20000654
   11378:	20000584 	.word	0x20000584
   1137c:	00028e5d 	.word	0x00028e5d
   11380:	00023a71 	.word	0x00023a71
   11384:	00023c19 	.word	0x00023c19

00011388 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   11388:	b580      	push	{r7, lr}
   1138a:	b082      	sub	sp, #8
   1138c:	af00      	add	r7, sp, #0
   1138e:	0002      	movs	r2, r0
   11390:	1dfb      	adds	r3, r7, #7
   11392:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11394:	4b0a      	ldr	r3, [pc, #40]	; (113c0 <saveResponseSettings+0x38>)
   11396:	1dfa      	adds	r2, r7, #7
   11398:	7812      	ldrb	r2, [r2, #0]
   1139a:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1139c:	4908      	ldr	r1, [pc, #32]	; (113c0 <saveResponseSettings+0x38>)
   1139e:	4b09      	ldr	r3, [pc, #36]	; (113c4 <saveResponseSettings+0x3c>)
   113a0:	2230      	movs	r2, #48	; 0x30
   113a2:	0018      	movs	r0, r3
   113a4:	4b08      	ldr	r3, [pc, #32]	; (113c8 <saveResponseSettings+0x40>)
   113a6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113a8:	4b06      	ldr	r3, [pc, #24]	; (113c4 <saveResponseSettings+0x3c>)
   113aa:	0019      	movs	r1, r3
   113ac:	201a      	movs	r0, #26
   113ae:	4b07      	ldr	r3, [pc, #28]	; (113cc <saveResponseSettings+0x44>)
   113b0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x48>)
   113b4:	4798      	blx	r3
}
   113b6:	46c0      	nop			; (mov r8, r8)
   113b8:	46bd      	mov	sp, r7
   113ba:	b002      	add	sp, #8
   113bc:	bd80      	pop	{r7, pc}
   113be:	46c0      	nop			; (mov r8, r8)
   113c0:	20000654 	.word	0x20000654
   113c4:	20000584 	.word	0x20000584
   113c8:	00028e5d 	.word	0x00028e5d
   113cc:	00023a71 	.word	0x00023a71
   113d0:	00023c19 	.word	0x00023c19

000113d4 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d4:	b5b0      	push	{r4, r5, r7, lr}
   113d6:	b082      	sub	sp, #8
   113d8:	af00      	add	r7, sp, #0
   113da:	0005      	movs	r5, r0
   113dc:	000c      	movs	r4, r1
   113de:	0010      	movs	r0, r2
   113e0:	0019      	movs	r1, r3
   113e2:	1dfb      	adds	r3, r7, #7
   113e4:	1c2a      	adds	r2, r5, #0
   113e6:	701a      	strb	r2, [r3, #0]
   113e8:	1dbb      	adds	r3, r7, #6
   113ea:	1c22      	adds	r2, r4, #0
   113ec:	701a      	strb	r2, [r3, #0]
   113ee:	1d7b      	adds	r3, r7, #5
   113f0:	1c02      	adds	r2, r0, #0
   113f2:	701a      	strb	r2, [r3, #0]
   113f4:	1d3b      	adds	r3, r7, #4
   113f6:	1c0a      	adds	r2, r1, #0
   113f8:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fa:	1dfb      	adds	r3, r7, #7
   113fc:	781a      	ldrb	r2, [r3, #0]
   113fe:	4b14      	ldr	r3, [pc, #80]	; (11450 <saveNoCallSettings+0x7c>)
   11400:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11402:	4b13      	ldr	r3, [pc, #76]	; (11450 <saveNoCallSettings+0x7c>)
   11404:	7a5b      	ldrb	r3, [r3, #9]
   11406:	2b00      	cmp	r3, #0
   11408:	d010      	beq.n	1142c <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   1140a:	4b11      	ldr	r3, [pc, #68]	; (11450 <saveNoCallSettings+0x7c>)
   1140c:	1dba      	adds	r2, r7, #6
   1140e:	7812      	ldrb	r2, [r2, #0]
   11410:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11412:	4b0f      	ldr	r3, [pc, #60]	; (11450 <saveNoCallSettings+0x7c>)
   11414:	1d7a      	adds	r2, r7, #5
   11416:	7812      	ldrb	r2, [r2, #0]
   11418:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   1141a:	4b0d      	ldr	r3, [pc, #52]	; (11450 <saveNoCallSettings+0x7c>)
   1141c:	1d3a      	adds	r2, r7, #4
   1141e:	7812      	ldrb	r2, [r2, #0]
   11420:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11422:	4b0b      	ldr	r3, [pc, #44]	; (11450 <saveNoCallSettings+0x7c>)
   11424:	2218      	movs	r2, #24
   11426:	18ba      	adds	r2, r7, r2
   11428:	7812      	ldrb	r2, [r2, #0]
   1142a:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1142c:	4908      	ldr	r1, [pc, #32]	; (11450 <saveNoCallSettings+0x7c>)
   1142e:	4b09      	ldr	r3, [pc, #36]	; (11454 <saveNoCallSettings+0x80>)
   11430:	2230      	movs	r2, #48	; 0x30
   11432:	0018      	movs	r0, r3
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x84>)
   11436:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11438:	4b06      	ldr	r3, [pc, #24]	; (11454 <saveNoCallSettings+0x80>)
   1143a:	0019      	movs	r1, r3
   1143c:	201a      	movs	r0, #26
   1143e:	4b07      	ldr	r3, [pc, #28]	; (1145c <saveNoCallSettings+0x88>)
   11440:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11442:	4b07      	ldr	r3, [pc, #28]	; (11460 <saveNoCallSettings+0x8c>)
   11444:	4798      	blx	r3
}
   11446:	46c0      	nop			; (mov r8, r8)
   11448:	46bd      	mov	sp, r7
   1144a:	b002      	add	sp, #8
   1144c:	bdb0      	pop	{r4, r5, r7, pc}
   1144e:	46c0      	nop			; (mov r8, r8)
   11450:	20000654 	.word	0x20000654
   11454:	20000584 	.word	0x20000584
   11458:	00028e5d 	.word	0x00028e5d
   1145c:	00023a71 	.word	0x00023a71
   11460:	00023c19 	.word	0x00023c19

00011464 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11464:	b580      	push	{r7, lr}
   11466:	b082      	sub	sp, #8
   11468:	af00      	add	r7, sp, #0
   1146a:	0002      	movs	r2, r0
   1146c:	1dfb      	adds	r3, r7, #7
   1146e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11470:	1dfb      	adds	r3, r7, #7
   11472:	781a      	ldrb	r2, [r3, #0]
   11474:	4b09      	ldr	r3, [pc, #36]	; (1149c <saveWaterBypassSettings+0x38>)
   11476:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11478:	4908      	ldr	r1, [pc, #32]	; (1149c <saveWaterBypassSettings+0x38>)
   1147a:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x3c>)
   1147c:	2230      	movs	r2, #48	; 0x30
   1147e:	0018      	movs	r0, r3
   11480:	4b08      	ldr	r3, [pc, #32]	; (114a4 <saveWaterBypassSettings+0x40>)
   11482:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11484:	4b06      	ldr	r3, [pc, #24]	; (114a0 <saveWaterBypassSettings+0x3c>)
   11486:	0019      	movs	r1, r3
   11488:	201a      	movs	r0, #26
   1148a:	4b07      	ldr	r3, [pc, #28]	; (114a8 <saveWaterBypassSettings+0x44>)
   1148c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x48>)
   11490:	4798      	blx	r3
}
   11492:	46c0      	nop			; (mov r8, r8)
   11494:	46bd      	mov	sp, r7
   11496:	b002      	add	sp, #8
   11498:	bd80      	pop	{r7, pc}
   1149a:	46c0      	nop			; (mov r8, r8)
   1149c:	20000654 	.word	0x20000654
   114a0:	20000584 	.word	0x20000584
   114a4:	00028e5d 	.word	0x00028e5d
   114a8:	00023a71 	.word	0x00023a71
   114ac:	00023c19 	.word	0x00023c19

000114b0 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b0:	b580      	push	{r7, lr}
   114b2:	b082      	sub	sp, #8
   114b4:	af00      	add	r7, sp, #0
   114b6:	0002      	movs	r2, r0
   114b8:	1dfb      	adds	r3, r7, #7
   114ba:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	781a      	ldrb	r2, [r3, #0]
   114c0:	4b09      	ldr	r3, [pc, #36]	; (114e8 <savePreventOverFlowSettings+0x38>)
   114c2:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c4:	4908      	ldr	r1, [pc, #32]	; (114e8 <savePreventOverFlowSettings+0x38>)
   114c6:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x3c>)
   114c8:	2230      	movs	r2, #48	; 0x30
   114ca:	0018      	movs	r0, r3
   114cc:	4b08      	ldr	r3, [pc, #32]	; (114f0 <savePreventOverFlowSettings+0x40>)
   114ce:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d0:	4b06      	ldr	r3, [pc, #24]	; (114ec <savePreventOverFlowSettings+0x3c>)
   114d2:	0019      	movs	r1, r3
   114d4:	201a      	movs	r0, #26
   114d6:	4b07      	ldr	r3, [pc, #28]	; (114f4 <savePreventOverFlowSettings+0x44>)
   114d8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x48>)
   114dc:	4798      	blx	r3
}
   114de:	46c0      	nop			; (mov r8, r8)
   114e0:	46bd      	mov	sp, r7
   114e2:	b002      	add	sp, #8
   114e4:	bd80      	pop	{r7, pc}
   114e6:	46c0      	nop			; (mov r8, r8)
   114e8:	20000654 	.word	0x20000654
   114ec:	20000584 	.word	0x20000584
   114f0:	00028e5d 	.word	0x00028e5d
   114f4:	00023a71 	.word	0x00023a71
   114f8:	00023c19 	.word	0x00023c19

000114fc <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   114fc:	b580      	push	{r7, lr}
   114fe:	b082      	sub	sp, #8
   11500:	af00      	add	r7, sp, #0
   11502:	0002      	movs	r2, r0
   11504:	1dfb      	adds	r3, r7, #7
   11506:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	781b      	ldrb	r3, [r3, #0]
   1150c:	2b64      	cmp	r3, #100	; 0x64
   1150e:	d918      	bls.n	11542 <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11510:	4b0e      	ldr	r3, [pc, #56]	; (1154c <setOverloadPer+0x50>)
   11512:	1dfa      	adds	r2, r7, #7
   11514:	7812      	ldrb	r2, [r2, #0]
   11516:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11518:	490c      	ldr	r1, [pc, #48]	; (1154c <setOverloadPer+0x50>)
   1151a:	4b0d      	ldr	r3, [pc, #52]	; (11550 <setOverloadPer+0x54>)
   1151c:	2230      	movs	r2, #48	; 0x30
   1151e:	0018      	movs	r0, r3
   11520:	4b0c      	ldr	r3, [pc, #48]	; (11554 <setOverloadPer+0x58>)
   11522:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11524:	4b0a      	ldr	r3, [pc, #40]	; (11550 <setOverloadPer+0x54>)
   11526:	0019      	movs	r1, r3
   11528:	201a      	movs	r0, #26
   1152a:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x5c>)
   1152c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1152e:	4b0b      	ldr	r3, [pc, #44]	; (1155c <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11532:	4b06      	ldr	r3, [pc, #24]	; (1154c <setOverloadPer+0x50>)
   11534:	7bdb      	ldrb	r3, [r3, #15]
   11536:	2b00      	cmp	r3, #0
   11538:	d001      	beq.n	1153e <setOverloadPer+0x42>
		{
			calcCurrentValues();
   1153a:	4b09      	ldr	r3, [pc, #36]	; (11560 <setOverloadPer+0x64>)
   1153c:	4798      	blx	r3
		}
		return true;
   1153e:	2301      	movs	r3, #1
   11540:	e000      	b.n	11544 <setOverloadPer+0x48>
	}
	return false;
   11542:	2300      	movs	r3, #0
}
   11544:	0018      	movs	r0, r3
   11546:	46bd      	mov	sp, r7
   11548:	b002      	add	sp, #8
   1154a:	bd80      	pop	{r7, pc}
   1154c:	20000654 	.word	0x20000654
   11550:	20000584 	.word	0x20000584
   11554:	00028e5d 	.word	0x00028e5d
   11558:	00023a71 	.word	0x00023a71
   1155c:	00023c19 	.word	0x00023c19
   11560:	000117e1 	.word	0x000117e1

00011564 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   11564:	b580      	push	{r7, lr}
   11566:	b082      	sub	sp, #8
   11568:	af00      	add	r7, sp, #0
   1156a:	0002      	movs	r2, r0
   1156c:	1dfb      	adds	r3, r7, #7
   1156e:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11570:	1dfb      	adds	r3, r7, #7
   11572:	781b      	ldrb	r3, [r3, #0]
   11574:	2b00      	cmp	r3, #0
   11576:	d01c      	beq.n	115b2 <setUnderloadPer+0x4e>
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b63      	cmp	r3, #99	; 0x63
   1157e:	d818      	bhi.n	115b2 <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11580:	4b0e      	ldr	r3, [pc, #56]	; (115bc <setUnderloadPer+0x58>)
   11582:	1dfa      	adds	r2, r7, #7
   11584:	7812      	ldrb	r2, [r2, #0]
   11586:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11588:	490c      	ldr	r1, [pc, #48]	; (115bc <setUnderloadPer+0x58>)
   1158a:	4b0d      	ldr	r3, [pc, #52]	; (115c0 <setUnderloadPer+0x5c>)
   1158c:	2230      	movs	r2, #48	; 0x30
   1158e:	0018      	movs	r0, r3
   11590:	4b0c      	ldr	r3, [pc, #48]	; (115c4 <setUnderloadPer+0x60>)
   11592:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11594:	4b0a      	ldr	r3, [pc, #40]	; (115c0 <setUnderloadPer+0x5c>)
   11596:	0019      	movs	r1, r3
   11598:	201a      	movs	r0, #26
   1159a:	4b0b      	ldr	r3, [pc, #44]	; (115c8 <setUnderloadPer+0x64>)
   1159c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1159e:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x68>)
   115a0:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115a2:	4b06      	ldr	r3, [pc, #24]	; (115bc <setUnderloadPer+0x58>)
   115a4:	7bdb      	ldrb	r3, [r3, #15]
   115a6:	2b00      	cmp	r3, #0
   115a8:	d001      	beq.n	115ae <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
   115aa:	4b09      	ldr	r3, [pc, #36]	; (115d0 <setUnderloadPer+0x6c>)
   115ac:	4798      	blx	r3
		}
		return true;
   115ae:	2301      	movs	r3, #1
   115b0:	e000      	b.n	115b4 <setUnderloadPer+0x50>
	}
	return false;
   115b2:	2300      	movs	r3, #0
}
   115b4:	0018      	movs	r0, r3
   115b6:	46bd      	mov	sp, r7
   115b8:	b002      	add	sp, #8
   115ba:	bd80      	pop	{r7, pc}
   115bc:	20000654 	.word	0x20000654
   115c0:	20000584 	.word	0x20000584
   115c4:	00028e5d 	.word	0x00028e5d
   115c8:	00023a71 	.word	0x00023a71
   115cc:	00023c19 	.word	0x00023c19
   115d0:	000117e1 	.word	0x000117e1

000115d4 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115d4:	b580      	push	{r7, lr}
   115d6:	b082      	sub	sp, #8
   115d8:	af00      	add	r7, sp, #0
   115da:	0002      	movs	r2, r0
   115dc:	1dfb      	adds	r3, r7, #7
   115de:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115e0:	1dfb      	adds	r3, r7, #7
   115e2:	7819      	ldrb	r1, [r3, #0]
   115e4:	4b09      	ldr	r3, [pc, #36]	; (1160c <saveSinglePhasingSettings+0x38>)
   115e6:	2220      	movs	r2, #32
   115e8:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115ea:	4908      	ldr	r1, [pc, #32]	; (1160c <saveSinglePhasingSettings+0x38>)
   115ec:	4b08      	ldr	r3, [pc, #32]	; (11610 <saveSinglePhasingSettings+0x3c>)
   115ee:	2230      	movs	r2, #48	; 0x30
   115f0:	0018      	movs	r0, r3
   115f2:	4b08      	ldr	r3, [pc, #32]	; (11614 <saveSinglePhasingSettings+0x40>)
   115f4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   115f6:	4b06      	ldr	r3, [pc, #24]	; (11610 <saveSinglePhasingSettings+0x3c>)
   115f8:	0019      	movs	r1, r3
   115fa:	201a      	movs	r0, #26
   115fc:	4b06      	ldr	r3, [pc, #24]	; (11618 <saveSinglePhasingSettings+0x44>)
   115fe:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11600:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x48>)
   11602:	4798      	blx	r3
}
   11604:	46c0      	nop			; (mov r8, r8)
   11606:	46bd      	mov	sp, r7
   11608:	b002      	add	sp, #8
   1160a:	bd80      	pop	{r7, pc}
   1160c:	20000654 	.word	0x20000654
   11610:	20000584 	.word	0x20000584
   11614:	00028e5d 	.word	0x00028e5d
   11618:	00023a71 	.word	0x00023a71
   1161c:	00023c19 	.word	0x00023c19

00011620 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   11620:	b580      	push	{r7, lr}
   11622:	b082      	sub	sp, #8
   11624:	af00      	add	r7, sp, #0
   11626:	0002      	movs	r2, r0
   11628:	1dbb      	adds	r3, r7, #6
   1162a:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   1162c:	4b0a      	ldr	r3, [pc, #40]	; (11658 <saveSinglePhasingVoltage+0x38>)
   1162e:	1dba      	adds	r2, r7, #6
   11630:	8812      	ldrh	r2, [r2, #0]
   11632:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11634:	4908      	ldr	r1, [pc, #32]	; (11658 <saveSinglePhasingVoltage+0x38>)
   11636:	4b09      	ldr	r3, [pc, #36]	; (1165c <saveSinglePhasingVoltage+0x3c>)
   11638:	2230      	movs	r2, #48	; 0x30
   1163a:	0018      	movs	r0, r3
   1163c:	4b08      	ldr	r3, [pc, #32]	; (11660 <saveSinglePhasingVoltage+0x40>)
   1163e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11640:	4b06      	ldr	r3, [pc, #24]	; (1165c <saveSinglePhasingVoltage+0x3c>)
   11642:	0019      	movs	r1, r3
   11644:	201a      	movs	r0, #26
   11646:	4b07      	ldr	r3, [pc, #28]	; (11664 <saveSinglePhasingVoltage+0x44>)
   11648:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1164a:	4b07      	ldr	r3, [pc, #28]	; (11668 <saveSinglePhasingVoltage+0x48>)
   1164c:	4798      	blx	r3
}
   1164e:	46c0      	nop			; (mov r8, r8)
   11650:	46bd      	mov	sp, r7
   11652:	b002      	add	sp, #8
   11654:	bd80      	pop	{r7, pc}
   11656:	46c0      	nop			; (mov r8, r8)
   11658:	20000654 	.word	0x20000654
   1165c:	20000584 	.word	0x20000584
   11660:	00028e5d 	.word	0x00028e5d
   11664:	00023a71 	.word	0x00023a71
   11668:	00023c19 	.word	0x00023c19

0001166c <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   1166c:	b580      	push	{r7, lr}
   1166e:	b082      	sub	sp, #8
   11670:	af00      	add	r7, sp, #0
   11672:	0002      	movs	r2, r0
   11674:	1dfb      	adds	r3, r7, #7
   11676:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11678:	1dfb      	adds	r3, r7, #7
   1167a:	7819      	ldrb	r1, [r3, #0]
   1167c:	4b09      	ldr	r3, [pc, #36]	; (116a4 <savePhaseSequenceProtectionSettings+0x38>)
   1167e:	2224      	movs	r2, #36	; 0x24
   11680:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11682:	4908      	ldr	r1, [pc, #32]	; (116a4 <savePhaseSequenceProtectionSettings+0x38>)
   11684:	4b08      	ldr	r3, [pc, #32]	; (116a8 <savePhaseSequenceProtectionSettings+0x3c>)
   11686:	2230      	movs	r2, #48	; 0x30
   11688:	0018      	movs	r0, r3
   1168a:	4b08      	ldr	r3, [pc, #32]	; (116ac <savePhaseSequenceProtectionSettings+0x40>)
   1168c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1168e:	4b06      	ldr	r3, [pc, #24]	; (116a8 <savePhaseSequenceProtectionSettings+0x3c>)
   11690:	0019      	movs	r1, r3
   11692:	201a      	movs	r0, #26
   11694:	4b06      	ldr	r3, [pc, #24]	; (116b0 <savePhaseSequenceProtectionSettings+0x44>)
   11696:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11698:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x48>)
   1169a:	4798      	blx	r3
}
   1169c:	46c0      	nop			; (mov r8, r8)
   1169e:	46bd      	mov	sp, r7
   116a0:	b002      	add	sp, #8
   116a2:	bd80      	pop	{r7, pc}
   116a4:	20000654 	.word	0x20000654
   116a8:	20000584 	.word	0x20000584
   116ac:	00028e5d 	.word	0x00028e5d
   116b0:	00023a71 	.word	0x00023a71
   116b4:	00023c19 	.word	0x00023c19

000116b8 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116b8:	b580      	push	{r7, lr}
   116ba:	b082      	sub	sp, #8
   116bc:	af00      	add	r7, sp, #0
   116be:	0002      	movs	r2, r0
   116c0:	1dfb      	adds	r3, r7, #7
   116c2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116c4:	4b0a      	ldr	r3, [pc, #40]	; (116f0 <saveUnderOverDetectionMethodSettings+0x38>)
   116c6:	1dfa      	adds	r2, r7, #7
   116c8:	2126      	movs	r1, #38	; 0x26
   116ca:	7812      	ldrb	r2, [r2, #0]
   116cc:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116ce:	4908      	ldr	r1, [pc, #32]	; (116f0 <saveUnderOverDetectionMethodSettings+0x38>)
   116d0:	4b08      	ldr	r3, [pc, #32]	; (116f4 <saveUnderOverDetectionMethodSettings+0x3c>)
   116d2:	2230      	movs	r2, #48	; 0x30
   116d4:	0018      	movs	r0, r3
   116d6:	4b08      	ldr	r3, [pc, #32]	; (116f8 <saveUnderOverDetectionMethodSettings+0x40>)
   116d8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116da:	4b06      	ldr	r3, [pc, #24]	; (116f4 <saveUnderOverDetectionMethodSettings+0x3c>)
   116dc:	0019      	movs	r1, r3
   116de:	201a      	movs	r0, #26
   116e0:	4b06      	ldr	r3, [pc, #24]	; (116fc <saveUnderOverDetectionMethodSettings+0x44>)
   116e2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116e4:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x48>)
   116e6:	4798      	blx	r3
}
   116e8:	46c0      	nop			; (mov r8, r8)
   116ea:	46bd      	mov	sp, r7
   116ec:	b002      	add	sp, #8
   116ee:	bd80      	pop	{r7, pc}
   116f0:	20000654 	.word	0x20000654
   116f4:	20000584 	.word	0x20000584
   116f8:	00028e5d 	.word	0x00028e5d
   116fc:	00023a71 	.word	0x00023a71
   11700:	00023c19 	.word	0x00023c19

00011704 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11704:	b580      	push	{r7, lr}
   11706:	b082      	sub	sp, #8
   11708:	af00      	add	r7, sp, #0
   1170a:	0002      	movs	r2, r0
   1170c:	1dfb      	adds	r3, r7, #7
   1170e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   11710:	1dfb      	adds	r3, r7, #7
   11712:	7819      	ldrb	r1, [r3, #0]
   11714:	4b09      	ldr	r3, [pc, #36]	; (1173c <saveMotorVoltageBypassSettings+0x38>)
   11716:	2227      	movs	r2, #39	; 0x27
   11718:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1171a:	4908      	ldr	r1, [pc, #32]	; (1173c <saveMotorVoltageBypassSettings+0x38>)
   1171c:	4b08      	ldr	r3, [pc, #32]	; (11740 <saveMotorVoltageBypassSettings+0x3c>)
   1171e:	2230      	movs	r2, #48	; 0x30
   11720:	0018      	movs	r0, r3
   11722:	4b08      	ldr	r3, [pc, #32]	; (11744 <saveMotorVoltageBypassSettings+0x40>)
   11724:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11726:	4b06      	ldr	r3, [pc, #24]	; (11740 <saveMotorVoltageBypassSettings+0x3c>)
   11728:	0019      	movs	r1, r3
   1172a:	201a      	movs	r0, #26
   1172c:	4b06      	ldr	r3, [pc, #24]	; (11748 <saveMotorVoltageBypassSettings+0x44>)
   1172e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11730:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x48>)
   11732:	4798      	blx	r3
}
   11734:	46c0      	nop			; (mov r8, r8)
   11736:	46bd      	mov	sp, r7
   11738:	b002      	add	sp, #8
   1173a:	bd80      	pop	{r7, pc}
   1173c:	20000654 	.word	0x20000654
   11740:	20000584 	.word	0x20000584
   11744:	00028e5d 	.word	0x00028e5d
   11748:	00023a71 	.word	0x00023a71
   1174c:	00023c19 	.word	0x00023c19

00011750 <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   11750:	b580      	push	{r7, lr}
   11752:	b082      	sub	sp, #8
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11758:	4b09      	ldr	r3, [pc, #36]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x30>)
   1175a:	687a      	ldr	r2, [r7, #4]
   1175c:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1175e:	4908      	ldr	r1, [pc, #32]	; (11780 <saveMotorVoltageBypasssTimeSettings+0x30>)
   11760:	4b08      	ldr	r3, [pc, #32]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11762:	2230      	movs	r2, #48	; 0x30
   11764:	0018      	movs	r0, r3
   11766:	4b08      	ldr	r3, [pc, #32]	; (11788 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11768:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1176a:	4b06      	ldr	r3, [pc, #24]	; (11784 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176c:	0019      	movs	r1, r3
   1176e:	201a      	movs	r0, #26
   11770:	4b06      	ldr	r3, [pc, #24]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x3c>)
   11772:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11774:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x40>)
   11776:	4798      	blx	r3
}
   11778:	46c0      	nop			; (mov r8, r8)
   1177a:	46bd      	mov	sp, r7
   1177c:	b002      	add	sp, #8
   1177e:	bd80      	pop	{r7, pc}
   11780:	20000654 	.word	0x20000654
   11784:	20000584 	.word	0x20000584
   11788:	00028e5d 	.word	0x00028e5d
   1178c:	00023a71 	.word	0x00023a71
   11790:	00023c19 	.word	0x00023c19

00011794 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   11794:	b580      	push	{r7, lr}
   11796:	b082      	sub	sp, #8
   11798:	af00      	add	r7, sp, #0
   1179a:	0002      	movs	r2, r0
   1179c:	1dfb      	adds	r3, r7, #7
   1179e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117a0:	4b0a      	ldr	r3, [pc, #40]	; (117cc <saveMotorFeedbackDetectionSettings+0x38>)
   117a2:	1dfa      	adds	r2, r7, #7
   117a4:	2125      	movs	r1, #37	; 0x25
   117a6:	7812      	ldrb	r2, [r2, #0]
   117a8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117aa:	4908      	ldr	r1, [pc, #32]	; (117cc <saveMotorFeedbackDetectionSettings+0x38>)
   117ac:	4b08      	ldr	r3, [pc, #32]	; (117d0 <saveMotorFeedbackDetectionSettings+0x3c>)
   117ae:	2230      	movs	r2, #48	; 0x30
   117b0:	0018      	movs	r0, r3
   117b2:	4b08      	ldr	r3, [pc, #32]	; (117d4 <saveMotorFeedbackDetectionSettings+0x40>)
   117b4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117b6:	4b06      	ldr	r3, [pc, #24]	; (117d0 <saveMotorFeedbackDetectionSettings+0x3c>)
   117b8:	0019      	movs	r1, r3
   117ba:	201a      	movs	r0, #26
   117bc:	4b06      	ldr	r3, [pc, #24]	; (117d8 <saveMotorFeedbackDetectionSettings+0x44>)
   117be:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117c0:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x48>)
   117c2:	4798      	blx	r3
}
   117c4:	46c0      	nop			; (mov r8, r8)
   117c6:	46bd      	mov	sp, r7
   117c8:	b002      	add	sp, #8
   117ca:	bd80      	pop	{r7, pc}
   117cc:	20000654 	.word	0x20000654
   117d0:	20000584 	.word	0x20000584
   117d4:	00028e5d 	.word	0x00028e5d
   117d8:	00023a71 	.word	0x00023a71
   117dc:	00023c19 	.word	0x00023c19

000117e0 <calcCurrentValues>:


void calcCurrentValues(void)
{
   117e0:	b590      	push	{r4, r7, lr}
   117e2:	b083      	sub	sp, #12
   117e4:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117e6:	4b2b      	ldr	r3, [pc, #172]	; (11894 <calcCurrentValues+0xb4>)
   117e8:	691a      	ldr	r2, [r3, #16]
   117ea:	4b2b      	ldr	r3, [pc, #172]	; (11898 <calcCurrentValues+0xb8>)
   117ec:	0010      	movs	r0, r2
   117ee:	4798      	blx	r3
   117f0:	1c04      	adds	r4, r0, #0
   117f2:	4b28      	ldr	r3, [pc, #160]	; (11894 <calcCurrentValues+0xb4>)
   117f4:	7f1a      	ldrb	r2, [r3, #28]
   117f6:	4b28      	ldr	r3, [pc, #160]	; (11898 <calcCurrentValues+0xb8>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c02      	adds	r2, r0, #0
   117fe:	4b27      	ldr	r3, [pc, #156]	; (1189c <calcCurrentValues+0xbc>)
   11800:	1c11      	adds	r1, r2, #0
   11802:	1c20      	adds	r0, r4, #0
   11804:	4798      	blx	r3
   11806:	1c03      	adds	r3, r0, #0
   11808:	1c1a      	adds	r2, r3, #0
   1180a:	4b25      	ldr	r3, [pc, #148]	; (118a0 <calcCurrentValues+0xc0>)
   1180c:	1c10      	adds	r0, r2, #0
   1180e:	4798      	blx	r3
   11810:	4c24      	ldr	r4, [pc, #144]	; (118a4 <calcCurrentValues+0xc4>)
   11812:	2200      	movs	r2, #0
   11814:	4b24      	ldr	r3, [pc, #144]	; (118a8 <calcCurrentValues+0xc8>)
   11816:	47a0      	blx	r4
   11818:	0003      	movs	r3, r0
   1181a:	000c      	movs	r4, r1
   1181c:	0019      	movs	r1, r3
   1181e:	0022      	movs	r2, r4
   11820:	1dbc      	adds	r4, r7, #6
   11822:	4b22      	ldr	r3, [pc, #136]	; (118ac <calcCurrentValues+0xcc>)
   11824:	0008      	movs	r0, r1
   11826:	0011      	movs	r1, r2
   11828:	4798      	blx	r3
   1182a:	0003      	movs	r3, r0
   1182c:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1182e:	1dbb      	adds	r3, r7, #6
   11830:	881b      	ldrh	r3, [r3, #0]
   11832:	0018      	movs	r0, r3
   11834:	4b1e      	ldr	r3, [pc, #120]	; (118b0 <calcCurrentValues+0xd0>)
   11836:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11838:	4b16      	ldr	r3, [pc, #88]	; (11894 <calcCurrentValues+0xb4>)
   1183a:	691a      	ldr	r2, [r3, #16]
   1183c:	4b16      	ldr	r3, [pc, #88]	; (11898 <calcCurrentValues+0xb8>)
   1183e:	0010      	movs	r0, r2
   11840:	4798      	blx	r3
   11842:	1c04      	adds	r4, r0, #0
   11844:	4b13      	ldr	r3, [pc, #76]	; (11894 <calcCurrentValues+0xb4>)
   11846:	7f5a      	ldrb	r2, [r3, #29]
   11848:	4b13      	ldr	r3, [pc, #76]	; (11898 <calcCurrentValues+0xb8>)
   1184a:	0010      	movs	r0, r2
   1184c:	4798      	blx	r3
   1184e:	1c02      	adds	r2, r0, #0
   11850:	4b12      	ldr	r3, [pc, #72]	; (1189c <calcCurrentValues+0xbc>)
   11852:	1c11      	adds	r1, r2, #0
   11854:	1c20      	adds	r0, r4, #0
   11856:	4798      	blx	r3
   11858:	1c03      	adds	r3, r0, #0
   1185a:	1c1a      	adds	r2, r3, #0
   1185c:	4b10      	ldr	r3, [pc, #64]	; (118a0 <calcCurrentValues+0xc0>)
   1185e:	1c10      	adds	r0, r2, #0
   11860:	4798      	blx	r3
   11862:	4c10      	ldr	r4, [pc, #64]	; (118a4 <calcCurrentValues+0xc4>)
   11864:	2200      	movs	r2, #0
   11866:	4b10      	ldr	r3, [pc, #64]	; (118a8 <calcCurrentValues+0xc8>)
   11868:	47a0      	blx	r4
   1186a:	0003      	movs	r3, r0
   1186c:	000c      	movs	r4, r1
   1186e:	0019      	movs	r1, r3
   11870:	0022      	movs	r2, r4
   11872:	1dbc      	adds	r4, r7, #6
   11874:	4b0d      	ldr	r3, [pc, #52]	; (118ac <calcCurrentValues+0xcc>)
   11876:	0008      	movs	r0, r1
   11878:	0011      	movs	r1, r2
   1187a:	4798      	blx	r3
   1187c:	0003      	movs	r3, r0
   1187e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11880:	1dbb      	adds	r3, r7, #6
   11882:	881b      	ldrh	r3, [r3, #0]
   11884:	0018      	movs	r0, r3
   11886:	4b0b      	ldr	r3, [pc, #44]	; (118b4 <calcCurrentValues+0xd4>)
   11888:	4798      	blx	r3
}
   1188a:	46c0      	nop			; (mov r8, r8)
   1188c:	46bd      	mov	sp, r7
   1188e:	b003      	add	sp, #12
   11890:	bd90      	pop	{r4, r7, pc}
   11892:	46c0      	nop			; (mov r8, r8)
   11894:	20000654 	.word	0x20000654
   11898:	000270a5 	.word	0x000270a5
   1189c:	00026dc5 	.word	0x00026dc5
   118a0:	00028c81 	.word	0x00028c81
   118a4:	00027751 	.word	0x00027751
   118a8:	40590000 	.word	0x40590000
   118ac:	00026979 	.word	0x00026979
   118b0:	000118b9 	.word	0x000118b9
   118b4:	000118fd 	.word	0x000118fd

000118b8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118b8:	b580      	push	{r7, lr}
   118ba:	b082      	sub	sp, #8
   118bc:	af00      	add	r7, sp, #0
   118be:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118c0:	4b09      	ldr	r3, [pc, #36]	; (118e8 <setUnderloadValue+0x30>)
   118c2:	687a      	ldr	r2, [r7, #4]
   118c4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118c6:	4908      	ldr	r1, [pc, #32]	; (118e8 <setUnderloadValue+0x30>)
   118c8:	4b08      	ldr	r3, [pc, #32]	; (118ec <setUnderloadValue+0x34>)
   118ca:	2230      	movs	r2, #48	; 0x30
   118cc:	0018      	movs	r0, r3
   118ce:	4b08      	ldr	r3, [pc, #32]	; (118f0 <setUnderloadValue+0x38>)
   118d0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118d2:	4b06      	ldr	r3, [pc, #24]	; (118ec <setUnderloadValue+0x34>)
   118d4:	0019      	movs	r1, r3
   118d6:	201a      	movs	r0, #26
   118d8:	4b06      	ldr	r3, [pc, #24]	; (118f4 <setUnderloadValue+0x3c>)
   118da:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118dc:	4b06      	ldr	r3, [pc, #24]	; (118f8 <setUnderloadValue+0x40>)
   118de:	4798      	blx	r3
}
   118e0:	46c0      	nop			; (mov r8, r8)
   118e2:	46bd      	mov	sp, r7
   118e4:	b002      	add	sp, #8
   118e6:	bd80      	pop	{r7, pc}
   118e8:	20000654 	.word	0x20000654
   118ec:	20000584 	.word	0x20000584
   118f0:	00028e5d 	.word	0x00028e5d
   118f4:	00023a71 	.word	0x00023a71
   118f8:	00023c19 	.word	0x00023c19

000118fc <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   118fc:	b580      	push	{r7, lr}
   118fe:	b082      	sub	sp, #8
   11900:	af00      	add	r7, sp, #0
   11902:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11904:	4b09      	ldr	r3, [pc, #36]	; (1192c <setOverloadValue+0x30>)
   11906:	687a      	ldr	r2, [r7, #4]
   11908:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1190a:	4908      	ldr	r1, [pc, #32]	; (1192c <setOverloadValue+0x30>)
   1190c:	4b08      	ldr	r3, [pc, #32]	; (11930 <setOverloadValue+0x34>)
   1190e:	2230      	movs	r2, #48	; 0x30
   11910:	0018      	movs	r0, r3
   11912:	4b08      	ldr	r3, [pc, #32]	; (11934 <setOverloadValue+0x38>)
   11914:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11916:	4b06      	ldr	r3, [pc, #24]	; (11930 <setOverloadValue+0x34>)
   11918:	0019      	movs	r1, r3
   1191a:	201a      	movs	r0, #26
   1191c:	4b06      	ldr	r3, [pc, #24]	; (11938 <setOverloadValue+0x3c>)
   1191e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11920:	4b06      	ldr	r3, [pc, #24]	; (1193c <setOverloadValue+0x40>)
   11922:	4798      	blx	r3
}
   11924:	46c0      	nop			; (mov r8, r8)
   11926:	46bd      	mov	sp, r7
   11928:	b002      	add	sp, #8
   1192a:	bd80      	pop	{r7, pc}
   1192c:	20000654 	.word	0x20000654
   11930:	20000584 	.word	0x20000584
   11934:	00028e5d 	.word	0x00028e5d
   11938:	00023a71 	.word	0x00023a71
   1193c:	00023c19 	.word	0x00023c19

00011940 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11940:	b580      	push	{r7, lr}
   11942:	b082      	sub	sp, #8
   11944:	af00      	add	r7, sp, #0
   11946:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11948:	4b09      	ldr	r3, [pc, #36]	; (11970 <setNormalLoadValue+0x30>)
   1194a:	687a      	ldr	r2, [r7, #4]
   1194c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1194e:	4908      	ldr	r1, [pc, #32]	; (11970 <setNormalLoadValue+0x30>)
   11950:	4b08      	ldr	r3, [pc, #32]	; (11974 <setNormalLoadValue+0x34>)
   11952:	2230      	movs	r2, #48	; 0x30
   11954:	0018      	movs	r0, r3
   11956:	4b08      	ldr	r3, [pc, #32]	; (11978 <setNormalLoadValue+0x38>)
   11958:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1195a:	4b06      	ldr	r3, [pc, #24]	; (11974 <setNormalLoadValue+0x34>)
   1195c:	0019      	movs	r1, r3
   1195e:	201a      	movs	r0, #26
   11960:	4b06      	ldr	r3, [pc, #24]	; (1197c <setNormalLoadValue+0x3c>)
   11962:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11964:	4b06      	ldr	r3, [pc, #24]	; (11980 <setNormalLoadValue+0x40>)
   11966:	4798      	blx	r3
}
   11968:	46c0      	nop			; (mov r8, r8)
   1196a:	46bd      	mov	sp, r7
   1196c:	b002      	add	sp, #8
   1196e:	bd80      	pop	{r7, pc}
   11970:	20000654 	.word	0x20000654
   11974:	20000584 	.word	0x20000584
   11978:	00028e5d 	.word	0x00028e5d
   1197c:	00023a71 	.word	0x00023a71
   11980:	00023c19 	.word	0x00023c19

00011984 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11984:	b580      	push	{r7, lr}
   11986:	b082      	sub	sp, #8
   11988:	af00      	add	r7, sp, #0
   1198a:	0002      	movs	r2, r0
   1198c:	1dfb      	adds	r3, r7, #7
   1198e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   11990:	1dfb      	adds	r3, r7, #7
   11992:	781a      	ldrb	r2, [r3, #0]
   11994:	4b09      	ldr	r3, [pc, #36]	; (119bc <setCurrentDetection+0x38>)
   11996:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11998:	4908      	ldr	r1, [pc, #32]	; (119bc <setCurrentDetection+0x38>)
   1199a:	4b09      	ldr	r3, [pc, #36]	; (119c0 <setCurrentDetection+0x3c>)
   1199c:	2230      	movs	r2, #48	; 0x30
   1199e:	0018      	movs	r0, r3
   119a0:	4b08      	ldr	r3, [pc, #32]	; (119c4 <setCurrentDetection+0x40>)
   119a2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119a4:	4b06      	ldr	r3, [pc, #24]	; (119c0 <setCurrentDetection+0x3c>)
   119a6:	0019      	movs	r1, r3
   119a8:	201a      	movs	r0, #26
   119aa:	4b07      	ldr	r3, [pc, #28]	; (119c8 <setCurrentDetection+0x44>)
   119ac:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119ae:	4b07      	ldr	r3, [pc, #28]	; (119cc <setCurrentDetection+0x48>)
   119b0:	4798      	blx	r3
}
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	46bd      	mov	sp, r7
   119b6:	b002      	add	sp, #8
   119b8:	bd80      	pop	{r7, pc}
   119ba:	46c0      	nop			; (mov r8, r8)
   119bc:	20000654 	.word	0x20000654
   119c0:	20000584 	.word	0x20000584
   119c4:	00028e5d 	.word	0x00028e5d
   119c8:	00023a71 	.word	0x00023a71
   119cc:	00023c19 	.word	0x00023c19

000119d0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	b082      	sub	sp, #8
   119d4:	af00      	add	r7, sp, #0
   119d6:	0002      	movs	r2, r0
   119d8:	1dbb      	adds	r3, r7, #6
   119da:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119dc:	4b0a      	ldr	r3, [pc, #40]	; (11a08 <saveStarDeltaTimer+0x38>)
   119de:	1dba      	adds	r2, r7, #6
   119e0:	8812      	ldrh	r2, [r2, #0]
   119e2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119e4:	4908      	ldr	r1, [pc, #32]	; (11a08 <saveStarDeltaTimer+0x38>)
   119e6:	4b09      	ldr	r3, [pc, #36]	; (11a0c <saveStarDeltaTimer+0x3c>)
   119e8:	2230      	movs	r2, #48	; 0x30
   119ea:	0018      	movs	r0, r3
   119ec:	4b08      	ldr	r3, [pc, #32]	; (11a10 <saveStarDeltaTimer+0x40>)
   119ee:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119f0:	4b06      	ldr	r3, [pc, #24]	; (11a0c <saveStarDeltaTimer+0x3c>)
   119f2:	0019      	movs	r1, r3
   119f4:	201a      	movs	r0, #26
   119f6:	4b07      	ldr	r3, [pc, #28]	; (11a14 <saveStarDeltaTimer+0x44>)
   119f8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119fa:	4b07      	ldr	r3, [pc, #28]	; (11a18 <saveStarDeltaTimer+0x48>)
   119fc:	4798      	blx	r3
}
   119fe:	46c0      	nop			; (mov r8, r8)
   11a00:	46bd      	mov	sp, r7
   11a02:	b002      	add	sp, #8
   11a04:	bd80      	pop	{r7, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	20000654 	.word	0x20000654
   11a0c:	20000584 	.word	0x20000584
   11a10:	00028e5d 	.word	0x00028e5d
   11a14:	00023a71 	.word	0x00023a71
   11a18:	00023c19 	.word	0x00023c19

00011a1c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a1c:	b580      	push	{r7, lr}
   11a1e:	b082      	sub	sp, #8
   11a20:	af00      	add	r7, sp, #0
   11a22:	0002      	movs	r2, r0
   11a24:	1dfb      	adds	r3, r7, #7
   11a26:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a28:	4b0a      	ldr	r3, [pc, #40]	; (11a54 <saveEventStageSettings+0x38>)
   11a2a:	1dfa      	adds	r2, r7, #7
   11a2c:	7812      	ldrb	r2, [r2, #0]
   11a2e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a30:	4908      	ldr	r1, [pc, #32]	; (11a54 <saveEventStageSettings+0x38>)
   11a32:	4b09      	ldr	r3, [pc, #36]	; (11a58 <saveEventStageSettings+0x3c>)
   11a34:	2230      	movs	r2, #48	; 0x30
   11a36:	0018      	movs	r0, r3
   11a38:	4b08      	ldr	r3, [pc, #32]	; (11a5c <saveEventStageSettings+0x40>)
   11a3a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a3c:	4b06      	ldr	r3, [pc, #24]	; (11a58 <saveEventStageSettings+0x3c>)
   11a3e:	0019      	movs	r1, r3
   11a40:	201a      	movs	r0, #26
   11a42:	4b07      	ldr	r3, [pc, #28]	; (11a60 <saveEventStageSettings+0x44>)
   11a44:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a46:	4b07      	ldr	r3, [pc, #28]	; (11a64 <saveEventStageSettings+0x48>)
   11a48:	4798      	blx	r3
}
   11a4a:	46c0      	nop			; (mov r8, r8)
   11a4c:	46bd      	mov	sp, r7
   11a4e:	b002      	add	sp, #8
   11a50:	bd80      	pop	{r7, pc}
   11a52:	46c0      	nop			; (mov r8, r8)
   11a54:	20000654 	.word	0x20000654
   11a58:	20000584 	.word	0x20000584
   11a5c:	00028e5d 	.word	0x00028e5d
   11a60:	00023a71 	.word	0x00023a71
   11a64:	00023c19 	.word	0x00023c19

00011a68 <isAdmin>:

bool isAdmin(char *number)
{
   11a68:	b580      	push	{r7, lr}
   11a6a:	b08a      	sub	sp, #40	; 0x28
   11a6c:	af00      	add	r7, sp, #0
   11a6e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a70:	2327      	movs	r3, #39	; 0x27
   11a72:	18fb      	adds	r3, r7, r3
   11a74:	2200      	movs	r2, #0
   11a76:	701a      	strb	r2, [r3, #0]
   11a78:	e02b      	b.n	11ad2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a7a:	4b1b      	ldr	r3, [pc, #108]	; (11ae8 <isAdmin+0x80>)
   11a7c:	223c      	movs	r2, #60	; 0x3c
   11a7e:	2100      	movs	r1, #0
   11a80:	0018      	movs	r0, r3
   11a82:	4b1a      	ldr	r3, [pc, #104]	; (11aec <isAdmin+0x84>)
   11a84:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a86:	2327      	movs	r3, #39	; 0x27
   11a88:	18fb      	adds	r3, r7, r3
   11a8a:	781b      	ldrb	r3, [r3, #0]
   11a8c:	3303      	adds	r3, #3
   11a8e:	b2db      	uxtb	r3, r3
   11a90:	4a15      	ldr	r2, [pc, #84]	; (11ae8 <isAdmin+0x80>)
   11a92:	0011      	movs	r1, r2
   11a94:	0018      	movs	r0, r3
   11a96:	4b16      	ldr	r3, [pc, #88]	; (11af0 <isAdmin+0x88>)
   11a98:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11a9a:	230c      	movs	r3, #12
   11a9c:	18fa      	adds	r2, r7, r3
   11a9e:	4b12      	ldr	r3, [pc, #72]	; (11ae8 <isAdmin+0x80>)
   11aa0:	0010      	movs	r0, r2
   11aa2:	0019      	movs	r1, r3
   11aa4:	2318      	movs	r3, #24
   11aa6:	001a      	movs	r2, r3
   11aa8:	4b12      	ldr	r3, [pc, #72]	; (11af4 <isAdmin+0x8c>)
   11aaa:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11aac:	230c      	movs	r3, #12
   11aae:	18fb      	adds	r3, r7, r3
   11ab0:	1d1a      	adds	r2, r3, #4
   11ab2:	687b      	ldr	r3, [r7, #4]
   11ab4:	0011      	movs	r1, r2
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b0f      	ldr	r3, [pc, #60]	; (11af8 <isAdmin+0x90>)
   11aba:	4798      	blx	r3
   11abc:	1e03      	subs	r3, r0, #0
   11abe:	d001      	beq.n	11ac4 <isAdmin+0x5c>
		{
			return true;
   11ac0:	2301      	movs	r3, #1
   11ac2:	e00c      	b.n	11ade <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ac4:	2327      	movs	r3, #39	; 0x27
   11ac6:	18fb      	adds	r3, r7, r3
   11ac8:	781a      	ldrb	r2, [r3, #0]
   11aca:	2327      	movs	r3, #39	; 0x27
   11acc:	18fb      	adds	r3, r7, r3
   11ace:	3201      	adds	r2, #1
   11ad0:	701a      	strb	r2, [r3, #0]
   11ad2:	2327      	movs	r3, #39	; 0x27
   11ad4:	18fb      	adds	r3, r7, r3
   11ad6:	781b      	ldrb	r3, [r3, #0]
   11ad8:	2b04      	cmp	r3, #4
   11ada:	d9ce      	bls.n	11a7a <isAdmin+0x12>
		}
	}
	return false;
   11adc:	2300      	movs	r3, #0
}
   11ade:	0018      	movs	r0, r3
   11ae0:	46bd      	mov	sp, r7
   11ae2:	b00a      	add	sp, #40	; 0x28
   11ae4:	bd80      	pop	{r7, pc}
   11ae6:	46c0      	nop			; (mov r8, r8)
   11ae8:	20000584 	.word	0x20000584
   11aec:	00028e93 	.word	0x00028e93
   11af0:	00023b7d 	.word	0x00023b7d
   11af4:	00028e5d 	.word	0x00028e5d
   11af8:	00029153 	.word	0x00029153

00011afc <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11afc:	b580      	push	{r7, lr}
   11afe:	b082      	sub	sp, #8
   11b00:	af00      	add	r7, sp, #0
   11b02:	0002      	movs	r2, r0
   11b04:	1dfb      	adds	r3, r7, #7
   11b06:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b08:	4b0b      	ldr	r3, [pc, #44]	; (11b38 <setPrimaryNumberIndex+0x3c>)
   11b0a:	1dfa      	adds	r2, r7, #7
   11b0c:	7812      	ldrb	r2, [r2, #0]
   11b0e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b10:	4a0a      	ldr	r2, [pc, #40]	; (11b3c <setPrimaryNumberIndex+0x40>)
   11b12:	4b09      	ldr	r3, [pc, #36]	; (11b38 <setPrimaryNumberIndex+0x3c>)
   11b14:	0010      	movs	r0, r2
   11b16:	0019      	movs	r1, r3
   11b18:	2308      	movs	r3, #8
   11b1a:	001a      	movs	r2, r3
   11b1c:	4b08      	ldr	r3, [pc, #32]	; (11b40 <setPrimaryNumberIndex+0x44>)
   11b1e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b20:	4b06      	ldr	r3, [pc, #24]	; (11b3c <setPrimaryNumberIndex+0x40>)
   11b22:	0019      	movs	r1, r3
   11b24:	2008      	movs	r0, #8
   11b26:	4b07      	ldr	r3, [pc, #28]	; (11b44 <setPrimaryNumberIndex+0x48>)
   11b28:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b2a:	4b07      	ldr	r3, [pc, #28]	; (11b48 <setPrimaryNumberIndex+0x4c>)
   11b2c:	4798      	blx	r3

}
   11b2e:	46c0      	nop			; (mov r8, r8)
   11b30:	46bd      	mov	sp, r7
   11b32:	b002      	add	sp, #8
   11b34:	bd80      	pop	{r7, pc}
   11b36:	46c0      	nop			; (mov r8, r8)
   11b38:	20000614 	.word	0x20000614
   11b3c:	20000584 	.word	0x20000584
   11b40:	00028e5d 	.word	0x00028e5d
   11b44:	00023a71 	.word	0x00023a71
   11b48:	00023c19 	.word	0x00023c19

00011b4c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b4c:	b580      	push	{r7, lr}
   11b4e:	b082      	sub	sp, #8
   11b50:	af00      	add	r7, sp, #0
   11b52:	0002      	movs	r2, r0
   11b54:	1dfb      	adds	r3, r7, #7
   11b56:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b58:	4b0b      	ldr	r3, [pc, #44]	; (11b88 <setSecondaryNumberIndex+0x3c>)
   11b5a:	1dfa      	adds	r2, r7, #7
   11b5c:	7812      	ldrb	r2, [r2, #0]
   11b5e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b60:	4a0a      	ldr	r2, [pc, #40]	; (11b8c <setSecondaryNumberIndex+0x40>)
   11b62:	4b09      	ldr	r3, [pc, #36]	; (11b88 <setSecondaryNumberIndex+0x3c>)
   11b64:	0010      	movs	r0, r2
   11b66:	0019      	movs	r1, r3
   11b68:	2308      	movs	r3, #8
   11b6a:	001a      	movs	r2, r3
   11b6c:	4b08      	ldr	r3, [pc, #32]	; (11b90 <setSecondaryNumberIndex+0x44>)
   11b6e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b70:	4b06      	ldr	r3, [pc, #24]	; (11b8c <setSecondaryNumberIndex+0x40>)
   11b72:	0019      	movs	r1, r3
   11b74:	2008      	movs	r0, #8
   11b76:	4b07      	ldr	r3, [pc, #28]	; (11b94 <setSecondaryNumberIndex+0x48>)
   11b78:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b7a:	4b07      	ldr	r3, [pc, #28]	; (11b98 <setSecondaryNumberIndex+0x4c>)
   11b7c:	4798      	blx	r3
}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	46bd      	mov	sp, r7
   11b82:	b002      	add	sp, #8
   11b84:	bd80      	pop	{r7, pc}
   11b86:	46c0      	nop			; (mov r8, r8)
   11b88:	20000614 	.word	0x20000614
   11b8c:	20000584 	.word	0x20000584
   11b90:	00028e5d 	.word	0x00028e5d
   11b94:	00023a71 	.word	0x00023a71
   11b98:	00023c19 	.word	0x00023c19

00011b9c <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11b9c:	b590      	push	{r4, r7, lr}
   11b9e:	b085      	sub	sp, #20
   11ba0:	af00      	add	r7, sp, #0
   11ba2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11ba4:	230e      	movs	r3, #14
   11ba6:	18fc      	adds	r4, r7, r3
   11ba8:	687b      	ldr	r3, [r7, #4]
   11baa:	0018      	movs	r0, r3
   11bac:	4b21      	ldr	r3, [pc, #132]	; (11c34 <addPrimaryIndexedNumber+0x98>)
   11bae:	4798      	blx	r3
   11bb0:	0003      	movs	r3, r0
   11bb2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bb4:	230f      	movs	r3, #15
   11bb6:	18fb      	adds	r3, r7, r3
   11bb8:	22ff      	movs	r2, #255	; 0xff
   11bba:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bbc:	4b1e      	ldr	r3, [pc, #120]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bbe:	785b      	ldrb	r3, [r3, #1]
   11bc0:	220e      	movs	r2, #14
   11bc2:	18ba      	adds	r2, r7, r2
   11bc4:	7812      	ldrb	r2, [r2, #0]
   11bc6:	429a      	cmp	r2, r3
   11bc8:	d309      	bcc.n	11bde <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bca:	230f      	movs	r3, #15
   11bcc:	18fb      	adds	r3, r7, r3
   11bce:	4a1a      	ldr	r2, [pc, #104]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bd0:	7892      	ldrb	r2, [r2, #2]
   11bd2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	0018      	movs	r0, r3
   11bd8:	4b18      	ldr	r3, [pc, #96]	; (11c3c <addPrimaryIndexedNumber+0xa0>)
   11bda:	4798      	blx	r3
   11bdc:	e00c      	b.n	11bf8 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bde:	4b16      	ldr	r3, [pc, #88]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11be0:	785b      	ldrb	r3, [r3, #1]
   11be2:	220e      	movs	r2, #14
   11be4:	18ba      	adds	r2, r7, r2
   11be6:	7812      	ldrb	r2, [r2, #0]
   11be8:	429a      	cmp	r2, r3
   11bea:	d205      	bcs.n	11bf8 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bec:	230f      	movs	r3, #15
   11bee:	18fb      	adds	r3, r7, r3
   11bf0:	220e      	movs	r2, #14
   11bf2:	18ba      	adds	r2, r7, r2
   11bf4:	7812      	ldrb	r2, [r2, #0]
   11bf6:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11bf8:	4b0f      	ldr	r3, [pc, #60]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11bfa:	785b      	ldrb	r3, [r3, #1]
   11bfc:	220f      	movs	r2, #15
   11bfe:	18ba      	adds	r2, r7, r2
   11c00:	7812      	ldrb	r2, [r2, #0]
   11c02:	429a      	cmp	r2, r3
   11c04:	d210      	bcs.n	11c28 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c06:	4b0c      	ldr	r3, [pc, #48]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11c08:	789b      	ldrb	r3, [r3, #2]
   11c0a:	2b01      	cmp	r3, #1
   11c0c:	d904      	bls.n	11c18 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c0e:	4b0a      	ldr	r3, [pc, #40]	; (11c38 <addPrimaryIndexedNumber+0x9c>)
   11c10:	78db      	ldrb	r3, [r3, #3]
   11c12:	0018      	movs	r0, r3
   11c14:	4b0a      	ldr	r3, [pc, #40]	; (11c40 <addPrimaryIndexedNumber+0xa4>)
   11c16:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c18:	230f      	movs	r3, #15
   11c1a:	18fb      	adds	r3, r7, r3
   11c1c:	781b      	ldrb	r3, [r3, #0]
   11c1e:	0018      	movs	r0, r3
   11c20:	4b08      	ldr	r3, [pc, #32]	; (11c44 <addPrimaryIndexedNumber+0xa8>)
   11c22:	4798      	blx	r3
		return true;
   11c24:	2301      	movs	r3, #1
   11c26:	e000      	b.n	11c2a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c28:	2300      	movs	r3, #0
}
   11c2a:	0018      	movs	r0, r3
   11c2c:	46bd      	mov	sp, r7
   11c2e:	b005      	add	sp, #20
   11c30:	bd90      	pop	{r4, r7, pc}
   11c32:	46c0      	nop			; (mov r8, r8)
   11c34:	00010de9 	.word	0x00010de9
   11c38:	20000614 	.word	0x20000614
   11c3c:	00010eed 	.word	0x00010eed
   11c40:	00011b4d 	.word	0x00011b4d
   11c44:	00011afd 	.word	0x00011afd

00011c48 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c48:	b590      	push	{r4, r7, lr}
   11c4a:	b085      	sub	sp, #20
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c50:	4b21      	ldr	r3, [pc, #132]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c52:	789b      	ldrb	r3, [r3, #2]
   11c54:	2b01      	cmp	r3, #1
   11c56:	d801      	bhi.n	11c5c <addSecondaryIndexedNumber+0x14>
	return false;
   11c58:	2300      	movs	r3, #0
   11c5a:	e039      	b.n	11cd0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c5c:	230e      	movs	r3, #14
   11c5e:	18fc      	adds	r4, r7, r3
   11c60:	687b      	ldr	r3, [r7, #4]
   11c62:	0018      	movs	r0, r3
   11c64:	4b1d      	ldr	r3, [pc, #116]	; (11cdc <addSecondaryIndexedNumber+0x94>)
   11c66:	4798      	blx	r3
   11c68:	0003      	movs	r3, r0
   11c6a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c6c:	230f      	movs	r3, #15
   11c6e:	18fb      	adds	r3, r7, r3
   11c70:	22ff      	movs	r2, #255	; 0xff
   11c72:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c74:	4b18      	ldr	r3, [pc, #96]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c76:	785b      	ldrb	r3, [r3, #1]
   11c78:	220e      	movs	r2, #14
   11c7a:	18ba      	adds	r2, r7, r2
   11c7c:	7812      	ldrb	r2, [r2, #0]
   11c7e:	429a      	cmp	r2, r3
   11c80:	d309      	bcc.n	11c96 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c82:	230f      	movs	r3, #15
   11c84:	18fb      	adds	r3, r7, r3
   11c86:	4a14      	ldr	r2, [pc, #80]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c88:	7892      	ldrb	r2, [r2, #2]
   11c8a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c8c:	687b      	ldr	r3, [r7, #4]
   11c8e:	0018      	movs	r0, r3
   11c90:	4b13      	ldr	r3, [pc, #76]	; (11ce0 <addSecondaryIndexedNumber+0x98>)
   11c92:	4798      	blx	r3
   11c94:	e00c      	b.n	11cb0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11c96:	4b10      	ldr	r3, [pc, #64]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11c98:	785b      	ldrb	r3, [r3, #1]
   11c9a:	220e      	movs	r2, #14
   11c9c:	18ba      	adds	r2, r7, r2
   11c9e:	7812      	ldrb	r2, [r2, #0]
   11ca0:	429a      	cmp	r2, r3
   11ca2:	d205      	bcs.n	11cb0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11ca4:	230f      	movs	r3, #15
   11ca6:	18fb      	adds	r3, r7, r3
   11ca8:	220e      	movs	r2, #14
   11caa:	18ba      	adds	r2, r7, r2
   11cac:	7812      	ldrb	r2, [r2, #0]
   11cae:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cb0:	4b09      	ldr	r3, [pc, #36]	; (11cd8 <addSecondaryIndexedNumber+0x90>)
   11cb2:	785b      	ldrb	r3, [r3, #1]
   11cb4:	220f      	movs	r2, #15
   11cb6:	18ba      	adds	r2, r7, r2
   11cb8:	7812      	ldrb	r2, [r2, #0]
   11cba:	429a      	cmp	r2, r3
   11cbc:	d207      	bcs.n	11cce <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cbe:	230f      	movs	r3, #15
   11cc0:	18fb      	adds	r3, r7, r3
   11cc2:	781b      	ldrb	r3, [r3, #0]
   11cc4:	0018      	movs	r0, r3
   11cc6:	4b07      	ldr	r3, [pc, #28]	; (11ce4 <addSecondaryIndexedNumber+0x9c>)
   11cc8:	4798      	blx	r3
		return true;
   11cca:	2301      	movs	r3, #1
   11ccc:	e000      	b.n	11cd0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cce:	2300      	movs	r3, #0
}
   11cd0:	0018      	movs	r0, r3
   11cd2:	46bd      	mov	sp, r7
   11cd4:	b005      	add	sp, #20
   11cd6:	bd90      	pop	{r4, r7, pc}
   11cd8:	20000614 	.word	0x20000614
   11cdc:	00010de9 	.word	0x00010de9
   11ce0:	00010eed 	.word	0x00010eed
   11ce4:	00011b4d 	.word	0x00011b4d

00011ce8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11ce8:	b580      	push	{r7, lr}
   11cea:	b082      	sub	sp, #8
   11cec:	af00      	add	r7, sp, #0
   11cee:	0002      	movs	r2, r0
   11cf0:	1dfb      	adds	r3, r7, #7
   11cf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11cf4:	4b06      	ldr	r3, [pc, #24]	; (11d10 <system_interrupt_enable+0x28>)
   11cf6:	1dfa      	adds	r2, r7, #7
   11cf8:	7812      	ldrb	r2, [r2, #0]
   11cfa:	0011      	movs	r1, r2
   11cfc:	221f      	movs	r2, #31
   11cfe:	400a      	ands	r2, r1
   11d00:	2101      	movs	r1, #1
   11d02:	4091      	lsls	r1, r2
   11d04:	000a      	movs	r2, r1
   11d06:	601a      	str	r2, [r3, #0]
}
   11d08:	46c0      	nop			; (mov r8, r8)
   11d0a:	46bd      	mov	sp, r7
   11d0c:	b002      	add	sp, #8
   11d0e:	bd80      	pop	{r7, pc}
   11d10:	e000e100 	.word	0xe000e100

00011d14 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d14:	b580      	push	{r7, lr}
   11d16:	b082      	sub	sp, #8
   11d18:	af00      	add	r7, sp, #0
   11d1a:	0002      	movs	r2, r0
   11d1c:	1dfb      	adds	r3, r7, #7
   11d1e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d20:	4a07      	ldr	r2, [pc, #28]	; (11d40 <system_interrupt_disable+0x2c>)
   11d22:	1dfb      	adds	r3, r7, #7
   11d24:	781b      	ldrb	r3, [r3, #0]
   11d26:	0019      	movs	r1, r3
   11d28:	231f      	movs	r3, #31
   11d2a:	400b      	ands	r3, r1
   11d2c:	2101      	movs	r1, #1
   11d2e:	4099      	lsls	r1, r3
   11d30:	000b      	movs	r3, r1
   11d32:	0019      	movs	r1, r3
   11d34:	2380      	movs	r3, #128	; 0x80
   11d36:	50d1      	str	r1, [r2, r3]
}
   11d38:	46c0      	nop			; (mov r8, r8)
   11d3a:	46bd      	mov	sp, r7
   11d3c:	b002      	add	sp, #8
   11d3e:	bd80      	pop	{r7, pc}
   11d40:	e000e100 	.word	0xe000e100

00011d44 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d44:	b580      	push	{r7, lr}
   11d46:	b084      	sub	sp, #16
   11d48:	af00      	add	r7, sp, #0
   11d4a:	0002      	movs	r2, r0
   11d4c:	1dfb      	adds	r3, r7, #7
   11d4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d50:	230f      	movs	r3, #15
   11d52:	18fb      	adds	r3, r7, r3
   11d54:	1dfa      	adds	r2, r7, #7
   11d56:	7812      	ldrb	r2, [r2, #0]
   11d58:	09d2      	lsrs	r2, r2, #7
   11d5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d5c:	230e      	movs	r3, #14
   11d5e:	18fb      	adds	r3, r7, r3
   11d60:	1dfa      	adds	r2, r7, #7
   11d62:	7812      	ldrb	r2, [r2, #0]
   11d64:	0952      	lsrs	r2, r2, #5
   11d66:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d68:	4b0d      	ldr	r3, [pc, #52]	; (11da0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d6a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d6c:	230f      	movs	r3, #15
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	781b      	ldrb	r3, [r3, #0]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d10f      	bne.n	11d96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d76:	230f      	movs	r3, #15
   11d78:	18fb      	adds	r3, r7, r3
   11d7a:	781b      	ldrb	r3, [r3, #0]
   11d7c:	009b      	lsls	r3, r3, #2
   11d7e:	2210      	movs	r2, #16
   11d80:	4694      	mov	ip, r2
   11d82:	44bc      	add	ip, r7
   11d84:	4463      	add	r3, ip
   11d86:	3b08      	subs	r3, #8
   11d88:	681a      	ldr	r2, [r3, #0]
   11d8a:	230e      	movs	r3, #14
   11d8c:	18fb      	adds	r3, r7, r3
   11d8e:	781b      	ldrb	r3, [r3, #0]
   11d90:	01db      	lsls	r3, r3, #7
   11d92:	18d3      	adds	r3, r2, r3
   11d94:	e000      	b.n	11d98 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11d96:	2300      	movs	r3, #0
	}
}
   11d98:	0018      	movs	r0, r3
   11d9a:	46bd      	mov	sp, r7
   11d9c:	b004      	add	sp, #16
   11d9e:	bd80      	pop	{r7, pc}
   11da0:	41004400 	.word	0x41004400

00011da4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11da4:	b580      	push	{r7, lr}
   11da6:	b082      	sub	sp, #8
   11da8:	af00      	add	r7, sp, #0
   11daa:	0002      	movs	r2, r0
   11dac:	1dfb      	adds	r3, r7, #7
   11dae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11db0:	1dfb      	adds	r3, r7, #7
   11db2:	781b      	ldrb	r3, [r3, #0]
   11db4:	0018      	movs	r0, r3
   11db6:	4b03      	ldr	r3, [pc, #12]	; (11dc4 <port_get_group_from_gpio_pin+0x20>)
   11db8:	4798      	blx	r3
   11dba:	0003      	movs	r3, r0
}
   11dbc:	0018      	movs	r0, r3
   11dbe:	46bd      	mov	sp, r7
   11dc0:	b002      	add	sp, #8
   11dc2:	bd80      	pop	{r7, pc}
   11dc4:	00011d45 	.word	0x00011d45

00011dc8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dc8:	b580      	push	{r7, lr}
   11dca:	b082      	sub	sp, #8
   11dcc:	af00      	add	r7, sp, #0
   11dce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11dd0:	687b      	ldr	r3, [r7, #4]
   11dd2:	2200      	movs	r2, #0
   11dd4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11dd6:	687b      	ldr	r3, [r7, #4]
   11dd8:	2201      	movs	r2, #1
   11dda:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11ddc:	687b      	ldr	r3, [r7, #4]
   11dde:	2200      	movs	r2, #0
   11de0:	709a      	strb	r2, [r3, #2]
}
   11de2:	46c0      	nop			; (mov r8, r8)
   11de4:	46bd      	mov	sp, r7
   11de6:	b002      	add	sp, #8
   11de8:	bd80      	pop	{r7, pc}
	...

00011dec <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dec:	b580      	push	{r7, lr}
   11dee:	b084      	sub	sp, #16
   11df0:	af00      	add	r7, sp, #0
   11df2:	0002      	movs	r2, r0
   11df4:	1dfb      	adds	r3, r7, #7
   11df6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11df8:	1dfb      	adds	r3, r7, #7
   11dfa:	781b      	ldrb	r3, [r3, #0]
   11dfc:	0018      	movs	r0, r3
   11dfe:	4b0b      	ldr	r3, [pc, #44]	; (11e2c <port_pin_get_input_level+0x40>)
   11e00:	4798      	blx	r3
   11e02:	0003      	movs	r3, r0
   11e04:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e06:	1dfb      	adds	r3, r7, #7
   11e08:	781b      	ldrb	r3, [r3, #0]
   11e0a:	221f      	movs	r2, #31
   11e0c:	4013      	ands	r3, r2
   11e0e:	2201      	movs	r2, #1
   11e10:	409a      	lsls	r2, r3
   11e12:	0013      	movs	r3, r2
   11e14:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e16:	68fb      	ldr	r3, [r7, #12]
   11e18:	6a1b      	ldr	r3, [r3, #32]
   11e1a:	68ba      	ldr	r2, [r7, #8]
   11e1c:	4013      	ands	r3, r2
   11e1e:	1e5a      	subs	r2, r3, #1
   11e20:	4193      	sbcs	r3, r2
   11e22:	b2db      	uxtb	r3, r3
}
   11e24:	0018      	movs	r0, r3
   11e26:	46bd      	mov	sp, r7
   11e28:	b004      	add	sp, #16
   11e2a:	bd80      	pop	{r7, pc}
   11e2c:	00011da5 	.word	0x00011da5

00011e30 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e30:	b580      	push	{r7, lr}
   11e32:	b084      	sub	sp, #16
   11e34:	af00      	add	r7, sp, #0
   11e36:	0002      	movs	r2, r0
   11e38:	1dfb      	adds	r3, r7, #7
   11e3a:	701a      	strb	r2, [r3, #0]
   11e3c:	1dbb      	adds	r3, r7, #6
   11e3e:	1c0a      	adds	r2, r1, #0
   11e40:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e42:	1dfb      	adds	r3, r7, #7
   11e44:	781b      	ldrb	r3, [r3, #0]
   11e46:	0018      	movs	r0, r3
   11e48:	4b0d      	ldr	r3, [pc, #52]	; (11e80 <port_pin_set_output_level+0x50>)
   11e4a:	4798      	blx	r3
   11e4c:	0003      	movs	r3, r0
   11e4e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e50:	1dfb      	adds	r3, r7, #7
   11e52:	781b      	ldrb	r3, [r3, #0]
   11e54:	221f      	movs	r2, #31
   11e56:	4013      	ands	r3, r2
   11e58:	2201      	movs	r2, #1
   11e5a:	409a      	lsls	r2, r3
   11e5c:	0013      	movs	r3, r2
   11e5e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e60:	1dbb      	adds	r3, r7, #6
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	2b00      	cmp	r3, #0
   11e66:	d003      	beq.n	11e70 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e68:	68fb      	ldr	r3, [r7, #12]
   11e6a:	68ba      	ldr	r2, [r7, #8]
   11e6c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e6e:	e002      	b.n	11e76 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e70:	68fb      	ldr	r3, [r7, #12]
   11e72:	68ba      	ldr	r2, [r7, #8]
   11e74:	615a      	str	r2, [r3, #20]
}
   11e76:	46c0      	nop			; (mov r8, r8)
   11e78:	46bd      	mov	sp, r7
   11e7a:	b004      	add	sp, #16
   11e7c:	bd80      	pop	{r7, pc}
   11e7e:	46c0      	nop			; (mov r8, r8)
   11e80:	00011da5 	.word	0x00011da5

00011e84 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e84:	b580      	push	{r7, lr}
   11e86:	b084      	sub	sp, #16
   11e88:	af00      	add	r7, sp, #0
   11e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e8c:	687b      	ldr	r3, [r7, #4]
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11e92:	68fb      	ldr	r3, [r7, #12]
   11e94:	69db      	ldr	r3, [r3, #28]
   11e96:	1e5a      	subs	r2, r3, #1
   11e98:	4193      	sbcs	r3, r2
   11e9a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11e9c:	0018      	movs	r0, r3
   11e9e:	46bd      	mov	sp, r7
   11ea0:	b004      	add	sp, #16
   11ea2:	bd80      	pop	{r7, pc}

00011ea4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11ea4:	b580      	push	{r7, lr}
   11ea6:	b082      	sub	sp, #8
   11ea8:	af00      	add	r7, sp, #0
   11eaa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11eac:	46c0      	nop			; (mov r8, r8)
   11eae:	687b      	ldr	r3, [r7, #4]
   11eb0:	0018      	movs	r0, r3
   11eb2:	4b04      	ldr	r3, [pc, #16]	; (11ec4 <_usart_wait_for_sync+0x20>)
   11eb4:	4798      	blx	r3
   11eb6:	1e03      	subs	r3, r0, #0
   11eb8:	d1f9      	bne.n	11eae <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eba:	46c0      	nop			; (mov r8, r8)
   11ebc:	46bd      	mov	sp, r7
   11ebe:	b002      	add	sp, #8
   11ec0:	bd80      	pop	{r7, pc}
   11ec2:	46c0      	nop			; (mov r8, r8)
   11ec4:	00011e85 	.word	0x00011e85

00011ec8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ec8:	b580      	push	{r7, lr}
   11eca:	b082      	sub	sp, #8
   11ecc:	af00      	add	r7, sp, #0
   11ece:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ed0:	687b      	ldr	r3, [r7, #4]
   11ed2:	2280      	movs	r2, #128	; 0x80
   11ed4:	05d2      	lsls	r2, r2, #23
   11ed6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ed8:	687b      	ldr	r3, [r7, #4]
   11eda:	2200      	movs	r2, #0
   11edc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11ede:	687b      	ldr	r3, [r7, #4]
   11ee0:	22ff      	movs	r2, #255	; 0xff
   11ee2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	2200      	movs	r2, #0
   11ee8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11eea:	687b      	ldr	r3, [r7, #4]
   11eec:	2200      	movs	r2, #0
   11eee:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11ef0:	687b      	ldr	r3, [r7, #4]
   11ef2:	2296      	movs	r2, #150	; 0x96
   11ef4:	0192      	lsls	r2, r2, #6
   11ef6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11ef8:	687b      	ldr	r3, [r7, #4]
   11efa:	2224      	movs	r2, #36	; 0x24
   11efc:	2101      	movs	r1, #1
   11efe:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2225      	movs	r2, #37	; 0x25
   11f04:	2101      	movs	r1, #1
   11f06:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2226      	movs	r2, #38	; 0x26
   11f0c:	2100      	movs	r1, #0
   11f0e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2227      	movs	r2, #39	; 0x27
   11f14:	2100      	movs	r1, #0
   11f16:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2200      	movs	r2, #0
   11f1c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f1e:	687b      	ldr	r3, [r7, #4]
   11f20:	2288      	movs	r2, #136	; 0x88
   11f22:	0352      	lsls	r2, r2, #13
   11f24:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f26:	687b      	ldr	r3, [r7, #4]
   11f28:	222c      	movs	r2, #44	; 0x2c
   11f2a:	2100      	movs	r1, #0
   11f2c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	222d      	movs	r2, #45	; 0x2d
   11f32:	2100      	movs	r1, #0
   11f34:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	2200      	movs	r2, #0
   11f3a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f3c:	687b      	ldr	r3, [r7, #4]
   11f3e:	2200      	movs	r2, #0
   11f40:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f42:	687b      	ldr	r3, [r7, #4]
   11f44:	2200      	movs	r2, #0
   11f46:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f48:	687b      	ldr	r3, [r7, #4]
   11f4a:	2200      	movs	r2, #0
   11f4c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f4e:	687b      	ldr	r3, [r7, #4]
   11f50:	2200      	movs	r2, #0
   11f52:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f54:	687b      	ldr	r3, [r7, #4]
   11f56:	2200      	movs	r2, #0
   11f58:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f5a:	687b      	ldr	r3, [r7, #4]
   11f5c:	2200      	movs	r2, #0
   11f5e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f60:	687b      	ldr	r3, [r7, #4]
   11f62:	2200      	movs	r2, #0
   11f64:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	2200      	movs	r2, #0
   11f6a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f6c:	687b      	ldr	r3, [r7, #4]
   11f6e:	2200      	movs	r2, #0
   11f70:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f72:	687b      	ldr	r3, [r7, #4]
   11f74:	2213      	movs	r2, #19
   11f76:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f78:	687b      	ldr	r3, [r7, #4]
   11f7a:	2200      	movs	r2, #0
   11f7c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f7e:	46c0      	nop			; (mov r8, r8)
   11f80:	46bd      	mov	sp, r7
   11f82:	b002      	add	sp, #8
   11f84:	bd80      	pop	{r7, pc}
	...

00011f88 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f88:	b580      	push	{r7, lr}
   11f8a:	b084      	sub	sp, #16
   11f8c:	af00      	add	r7, sp, #0
   11f8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11f90:	687b      	ldr	r3, [r7, #4]
   11f92:	681b      	ldr	r3, [r3, #0]
   11f94:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11f96:	687b      	ldr	r3, [r7, #4]
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	0018      	movs	r0, r3
   11f9c:	4b09      	ldr	r3, [pc, #36]	; (11fc4 <usart_enable+0x3c>)
   11f9e:	4798      	blx	r3
   11fa0:	0003      	movs	r3, r0
   11fa2:	0018      	movs	r0, r3
   11fa4:	4b08      	ldr	r3, [pc, #32]	; (11fc8 <usart_enable+0x40>)
   11fa6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fa8:	687b      	ldr	r3, [r7, #4]
   11faa:	0018      	movs	r0, r3
   11fac:	4b07      	ldr	r3, [pc, #28]	; (11fcc <usart_enable+0x44>)
   11fae:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fb0:	68fb      	ldr	r3, [r7, #12]
   11fb2:	681b      	ldr	r3, [r3, #0]
   11fb4:	2202      	movs	r2, #2
   11fb6:	431a      	orrs	r2, r3
   11fb8:	68fb      	ldr	r3, [r7, #12]
   11fba:	601a      	str	r2, [r3, #0]
}
   11fbc:	46c0      	nop			; (mov r8, r8)
   11fbe:	46bd      	mov	sp, r7
   11fc0:	b004      	add	sp, #16
   11fc2:	bd80      	pop	{r7, pc}
   11fc4:	000222dd 	.word	0x000222dd
   11fc8:	00011ce9 	.word	0x00011ce9
   11fcc:	00011ea5 	.word	0x00011ea5

00011fd0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b084      	sub	sp, #16
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fd8:	687b      	ldr	r3, [r7, #4]
   11fda:	681b      	ldr	r3, [r3, #0]
   11fdc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	681b      	ldr	r3, [r3, #0]
   11fe2:	0018      	movs	r0, r3
   11fe4:	4b0a      	ldr	r3, [pc, #40]	; (12010 <usart_disable+0x40>)
   11fe6:	4798      	blx	r3
   11fe8:	0003      	movs	r3, r0
   11fea:	0018      	movs	r0, r3
   11fec:	4b09      	ldr	r3, [pc, #36]	; (12014 <usart_disable+0x44>)
   11fee:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11ff0:	687b      	ldr	r3, [r7, #4]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b08      	ldr	r3, [pc, #32]	; (12018 <usart_disable+0x48>)
   11ff6:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   11ff8:	68fb      	ldr	r3, [r7, #12]
   11ffa:	681b      	ldr	r3, [r3, #0]
   11ffc:	2202      	movs	r2, #2
   11ffe:	4393      	bics	r3, r2
   12000:	001a      	movs	r2, r3
   12002:	68fb      	ldr	r3, [r7, #12]
   12004:	601a      	str	r2, [r3, #0]
}
   12006:	46c0      	nop			; (mov r8, r8)
   12008:	46bd      	mov	sp, r7
   1200a:	b004      	add	sp, #16
   1200c:	bd80      	pop	{r7, pc}
   1200e:	46c0      	nop			; (mov r8, r8)
   12010:	000222dd 	.word	0x000222dd
   12014:	00011d15 	.word	0x00011d15
   12018:	00011ea5 	.word	0x00011ea5

0001201c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1201c:	b580      	push	{r7, lr}
   1201e:	b084      	sub	sp, #16
   12020:	af00      	add	r7, sp, #0
   12022:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12024:	687b      	ldr	r3, [r7, #4]
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1202a:	687b      	ldr	r3, [r7, #4]
   1202c:	0018      	movs	r0, r3
   1202e:	4b06      	ldr	r3, [pc, #24]	; (12048 <usart_reset+0x2c>)
   12030:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12032:	687b      	ldr	r3, [r7, #4]
   12034:	0018      	movs	r0, r3
   12036:	4b05      	ldr	r3, [pc, #20]	; (1204c <usart_reset+0x30>)
   12038:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1203a:	68fb      	ldr	r3, [r7, #12]
   1203c:	2201      	movs	r2, #1
   1203e:	601a      	str	r2, [r3, #0]
}
   12040:	46c0      	nop			; (mov r8, r8)
   12042:	46bd      	mov	sp, r7
   12044:	b004      	add	sp, #16
   12046:	bd80      	pop	{r7, pc}
   12048:	00011fd1 	.word	0x00011fd1
   1204c:	00011ea5 	.word	0x00011ea5

00012050 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12050:	b580      	push	{r7, lr}
   12052:	b082      	sub	sp, #8
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
}
   12058:	46c0      	nop			; (mov r8, r8)
   1205a:	46bd      	mov	sp, r7
   1205c:	b002      	add	sp, #8
   1205e:	bd80      	pop	{r7, pc}

00012060 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12066:	4b09      	ldr	r3, [pc, #36]	; (1208c <Flush_RX_Buffer+0x2c>)
   12068:	681b      	ldr	r3, [r3, #0]
   1206a:	1cf9      	adds	r1, r7, #3
   1206c:	2200      	movs	r2, #0
   1206e:	0018      	movs	r0, r3
   12070:	4b07      	ldr	r3, [pc, #28]	; (12090 <Flush_RX_Buffer+0x30>)
   12072:	4798      	blx	r3
   12074:	0003      	movs	r3, r0
   12076:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12078:	687b      	ldr	r3, [r7, #4]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d000      	beq.n	12080 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1207e:	e7f2      	b.n	12066 <Flush_RX_Buffer+0x6>
		{
			break;
   12080:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12082:	46c0      	nop			; (mov r8, r8)
   12084:	46bd      	mov	sp, r7
   12086:	b002      	add	sp, #8
   12088:	bd80      	pop	{r7, pc}
   1208a:	46c0      	nop			; (mov r8, r8)
   1208c:	20000220 	.word	0x20000220
   12090:	0001f4c1 	.word	0x0001f4c1

00012094 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   12094:	b590      	push	{r4, r7, lr}
   12096:	b085      	sub	sp, #20
   12098:	af00      	add	r7, sp, #0
   1209a:	0002      	movs	r2, r0
   1209c:	1dfb      	adds	r3, r7, #7
   1209e:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120a0:	4b19      	ldr	r3, [pc, #100]	; (12108 <gsm_rx_handler+0x74>)
   120a2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120a4:	68fb      	ldr	r3, [r7, #12]
   120a6:	7e1b      	ldrb	r3, [r3, #24]
   120a8:	b2db      	uxtb	r3, r3
   120aa:	001a      	movs	r2, r3
   120ac:	2304      	movs	r3, #4
   120ae:	4013      	ands	r3, r2
   120b0:	d026      	beq.n	12100 <gsm_rx_handler+0x6c>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120b2:	68fb      	ldr	r3, [r7, #12]
   120b4:	8b5b      	ldrh	r3, [r3, #26]
   120b6:	b29b      	uxth	r3, r3
   120b8:	b2da      	uxtb	r2, r3
   120ba:	230b      	movs	r3, #11
   120bc:	18fb      	adds	r3, r7, r3
   120be:	2106      	movs	r1, #6
   120c0:	400a      	ands	r2, r1
   120c2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120c4:	230b      	movs	r3, #11
   120c6:	18fb      	adds	r3, r7, r3
   120c8:	781b      	ldrb	r3, [r3, #0]
   120ca:	2b00      	cmp	r3, #0
   120cc:	d006      	beq.n	120dc <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120ce:	230b      	movs	r3, #11
   120d0:	18fb      	adds	r3, r7, r3
   120d2:	781b      	ldrb	r3, [r3, #0]
   120d4:	b29a      	uxth	r2, r3
   120d6:	68fb      	ldr	r3, [r7, #12]
   120d8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			gsm_module_exit_sleep(true);
		}
	}
}
   120da:	e011      	b.n	12100 <gsm_rx_handler+0x6c>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120dc:	68fb      	ldr	r3, [r7, #12]
   120de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120e0:	b29b      	uxth	r3, r3
   120e2:	b2da      	uxtb	r2, r3
   120e4:	230a      	movs	r3, #10
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120ea:	4b08      	ldr	r3, [pc, #32]	; (1210c <gsm_rx_handler+0x78>)
   120ec:	6818      	ldr	r0, [r3, #0]
   120ee:	230a      	movs	r3, #10
   120f0:	18f9      	adds	r1, r7, r3
   120f2:	2300      	movs	r3, #0
   120f4:	2200      	movs	r2, #0
   120f6:	4c06      	ldr	r4, [pc, #24]	; (12110 <gsm_rx_handler+0x7c>)
   120f8:	47a0      	blx	r4
			gsm_module_exit_sleep(true);
   120fa:	2001      	movs	r0, #1
   120fc:	4b05      	ldr	r3, [pc, #20]	; (12114 <gsm_rx_handler+0x80>)
   120fe:	4798      	blx	r3
}
   12100:	46c0      	nop			; (mov r8, r8)
   12102:	46bd      	mov	sp, r7
   12104:	b005      	add	sp, #20
   12106:	bd90      	pop	{r4, r7, pc}
   12108:	42001400 	.word	0x42001400
   1210c:	20000220 	.word	0x20000220
   12110:	0001f3a1 	.word	0x0001f3a1
   12114:	00012301 	.word	0x00012301

00012118 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12118:	b580      	push	{r7, lr}
   1211a:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   1211c:	2031      	movs	r0, #49	; 0x31
   1211e:	4b09      	ldr	r3, [pc, #36]	; (12144 <gsm_ring_detect_pin_callback+0x2c>)
   12120:	4798      	blx	r3
   12122:	0003      	movs	r3, r0
   12124:	1e5a      	subs	r2, r3, #1
   12126:	4193      	sbcs	r3, r2
   12128:	b2db      	uxtb	r3, r3
   1212a:	2201      	movs	r2, #1
   1212c:	4053      	eors	r3, r2
   1212e:	b2db      	uxtb	r3, r3
   12130:	1c1a      	adds	r2, r3, #0
   12132:	2301      	movs	r3, #1
   12134:	4013      	ands	r3, r2
   12136:	b2da      	uxtb	r2, r3
   12138:	4b03      	ldr	r3, [pc, #12]	; (12148 <gsm_ring_detect_pin_callback+0x30>)
   1213a:	701a      	strb	r2, [r3, #0]
}
   1213c:	46c0      	nop			; (mov r8, r8)
   1213e:	46bd      	mov	sp, r7
   12140:	bd80      	pop	{r7, pc}
   12142:	46c0      	nop			; (mov r8, r8)
   12144:	00011ded 	.word	0x00011ded
   12148:	2000068e 	.word	0x2000068e

0001214c <gsm_init>:

void gsm_init(void)
{
   1214c:	b590      	push	{r4, r7, lr}
   1214e:	b097      	sub	sp, #92	; 0x5c
   12150:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   12152:	234c      	movs	r3, #76	; 0x4c
   12154:	18fb      	adds	r3, r7, r3
   12156:	0018      	movs	r0, r3
   12158:	4b4d      	ldr	r3, [pc, #308]	; (12290 <gsm_init+0x144>)
   1215a:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   1215c:	234c      	movs	r3, #76	; 0x4c
   1215e:	18fb      	adds	r3, r7, r3
   12160:	2201      	movs	r2, #1
   12162:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   12164:	234c      	movs	r3, #76	; 0x4c
   12166:	18fb      	adds	r3, r7, r3
   12168:	0019      	movs	r1, r3
   1216a:	2014      	movs	r0, #20
   1216c:	4b49      	ldr	r3, [pc, #292]	; (12294 <gsm_init+0x148>)
   1216e:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12170:	2100      	movs	r1, #0
   12172:	2014      	movs	r0, #20
   12174:	4b48      	ldr	r3, [pc, #288]	; (12298 <gsm_init+0x14c>)
   12176:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12178:	2340      	movs	r3, #64	; 0x40
   1217a:	18fb      	adds	r3, r7, r3
   1217c:	0018      	movs	r0, r3
   1217e:	4b47      	ldr	r3, [pc, #284]	; (1229c <gsm_init+0x150>)
   12180:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   12182:	2340      	movs	r3, #64	; 0x40
   12184:	18fb      	adds	r3, r7, r3
   12186:	2231      	movs	r2, #49	; 0x31
   12188:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   1218a:	2340      	movs	r3, #64	; 0x40
   1218c:	18fb      	adds	r3, r7, r3
   1218e:	2200      	movs	r2, #0
   12190:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   12192:	2340      	movs	r3, #64	; 0x40
   12194:	18fb      	adds	r3, r7, r3
   12196:	2201      	movs	r2, #1
   12198:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2203      	movs	r2, #3
   121a0:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	0019      	movs	r1, r3
   121a8:	2001      	movs	r0, #1
   121aa:	4b3d      	ldr	r3, [pc, #244]	; (122a0 <gsm_init+0x154>)
   121ac:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121ae:	2100      	movs	r1, #0
   121b0:	2001      	movs	r0, #1
   121b2:	4b3c      	ldr	r3, [pc, #240]	; (122a4 <gsm_init+0x158>)
   121b4:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121b6:	4b3c      	ldr	r3, [pc, #240]	; (122a8 <gsm_init+0x15c>)
   121b8:	2200      	movs	r2, #0
   121ba:	2101      	movs	r1, #1
   121bc:	0018      	movs	r0, r3
   121be:	4b3b      	ldr	r3, [pc, #236]	; (122ac <gsm_init+0x160>)
   121c0:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121c2:	2200      	movs	r2, #0
   121c4:	2101      	movs	r1, #1
   121c6:	20f0      	movs	r0, #240	; 0xf0
   121c8:	4b39      	ldr	r3, [pc, #228]	; (122b0 <gsm_init+0x164>)
   121ca:	4798      	blx	r3
   121cc:	0002      	movs	r2, r0
   121ce:	4b39      	ldr	r3, [pc, #228]	; (122b4 <gsm_init+0x168>)
   121d0:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121d2:	4939      	ldr	r1, [pc, #228]	; (122b8 <gsm_init+0x16c>)
   121d4:	4839      	ldr	r0, [pc, #228]	; (122bc <gsm_init+0x170>)
   121d6:	4b3a      	ldr	r3, [pc, #232]	; (122c0 <gsm_init+0x174>)
   121d8:	9300      	str	r3, [sp, #0]
   121da:	2300      	movs	r3, #0
   121dc:	2200      	movs	r2, #0
   121de:	4c39      	ldr	r4, [pc, #228]	; (122c4 <gsm_init+0x178>)
   121e0:	47a0      	blx	r4
   121e2:	0002      	movs	r2, r0
   121e4:	4b38      	ldr	r3, [pc, #224]	; (122c8 <gsm_init+0x17c>)
   121e6:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   121e8:	2203      	movs	r2, #3
   121ea:	2100      	movs	r1, #0
   121ec:	2001      	movs	r0, #1
   121ee:	4b30      	ldr	r3, [pc, #192]	; (122b0 <gsm_init+0x164>)
   121f0:	4798      	blx	r3
   121f2:	0002      	movs	r2, r0
   121f4:	4b35      	ldr	r3, [pc, #212]	; (122cc <gsm_init+0x180>)
   121f6:	601a      	str	r2, [r3, #0]
   121f8:	4b34      	ldr	r3, [pc, #208]	; (122cc <gsm_init+0x180>)
   121fa:	681b      	ldr	r3, [r3, #0]
   121fc:	2b00      	cmp	r3, #0
   121fe:	d006      	beq.n	1220e <gsm_init+0xc2>
   12200:	4b32      	ldr	r3, [pc, #200]	; (122cc <gsm_init+0x180>)
   12202:	6818      	ldr	r0, [r3, #0]
   12204:	2300      	movs	r3, #0
   12206:	2200      	movs	r2, #0
   12208:	2100      	movs	r1, #0
   1220a:	4c31      	ldr	r4, [pc, #196]	; (122d0 <gsm_init+0x184>)
   1220c:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   1220e:	003b      	movs	r3, r7
   12210:	0018      	movs	r0, r3
   12212:	4b30      	ldr	r3, [pc, #192]	; (122d4 <gsm_init+0x188>)
   12214:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   12216:	003b      	movs	r3, r7
   12218:	22e1      	movs	r2, #225	; 0xe1
   1221a:	0252      	lsls	r2, r2, #9
   1221c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   1221e:	003b      	movs	r3, r7
   12220:	2280      	movs	r2, #128	; 0x80
   12222:	0352      	lsls	r2, r2, #13
   12224:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   12226:	003b      	movs	r3, r7
   12228:	4a2b      	ldr	r2, [pc, #172]	; (122d8 <gsm_init+0x18c>)
   1222a:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   1222c:	003b      	movs	r3, r7
   1222e:	4a2b      	ldr	r2, [pc, #172]	; (122dc <gsm_init+0x190>)
   12230:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   12232:	003b      	movs	r3, r7
   12234:	2201      	movs	r2, #1
   12236:	4252      	negs	r2, r2
   12238:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   1223a:	003b      	movs	r3, r7
   1223c:	2201      	movs	r2, #1
   1223e:	4252      	negs	r2, r2
   12240:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   12242:	003b      	movs	r3, r7
   12244:	222c      	movs	r2, #44	; 0x2c
   12246:	2101      	movs	r1, #1
   12248:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1224a:	e003      	b.n	12254 <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   1224c:	4b24      	ldr	r3, [pc, #144]	; (122e0 <gsm_init+0x194>)
   1224e:	0018      	movs	r0, r3
   12250:	4b24      	ldr	r3, [pc, #144]	; (122e4 <gsm_init+0x198>)
   12252:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12254:	003a      	movs	r2, r7
   12256:	4924      	ldr	r1, [pc, #144]	; (122e8 <gsm_init+0x19c>)
   12258:	4b21      	ldr	r3, [pc, #132]	; (122e0 <gsm_init+0x194>)
   1225a:	0018      	movs	r0, r3
   1225c:	4b23      	ldr	r3, [pc, #140]	; (122ec <gsm_init+0x1a0>)
   1225e:	4798      	blx	r3
   12260:	1e03      	subs	r3, r0, #0
   12262:	d1f3      	bne.n	1224c <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   12264:	4b1e      	ldr	r3, [pc, #120]	; (122e0 <gsm_init+0x194>)
   12266:	0018      	movs	r0, r3
   12268:	4b21      	ldr	r3, [pc, #132]	; (122f0 <gsm_init+0x1a4>)
   1226a:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   1226c:	4b1e      	ldr	r3, [pc, #120]	; (122e8 <gsm_init+0x19c>)
   1226e:	0018      	movs	r0, r3
   12270:	4b20      	ldr	r3, [pc, #128]	; (122f4 <gsm_init+0x1a8>)
   12272:	4798      	blx	r3
   12274:	0003      	movs	r3, r0
   12276:	001a      	movs	r2, r3
   12278:	4b1f      	ldr	r3, [pc, #124]	; (122f8 <gsm_init+0x1ac>)
   1227a:	0019      	movs	r1, r3
   1227c:	0010      	movs	r0, r2
   1227e:	4b1f      	ldr	r3, [pc, #124]	; (122fc <gsm_init+0x1b0>)
   12280:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   12282:	4b19      	ldr	r3, [pc, #100]	; (122e8 <gsm_init+0x19c>)
   12284:	2204      	movs	r2, #4
   12286:	759a      	strb	r2, [r3, #22]
}
   12288:	46c0      	nop			; (mov r8, r8)
   1228a:	46bd      	mov	sp, r7
   1228c:	b015      	add	sp, #84	; 0x54
   1228e:	bd90      	pop	{r4, r7, pc}
   12290:	00011dc9 	.word	0x00011dc9
   12294:	00022ff1 	.word	0x00022ff1
   12298:	00011e31 	.word	0x00011e31
   1229c:	0001df8d 	.word	0x0001df8d
   122a0:	0001dfc1 	.word	0x0001dfc1
   122a4:	000224e1 	.word	0x000224e1
   122a8:	00012119 	.word	0x00012119
   122ac:	0002247d 	.word	0x0002247d
   122b0:	0001f105 	.word	0x0001f105
   122b4:	20000220 	.word	0x20000220
   122b8:	00001388 	.word	0x00001388
   122bc:	00029b34 	.word	0x00029b34
   122c0:	00012051 	.word	0x00012051
   122c4:	00020e89 	.word	0x00020e89
   122c8:	20000224 	.word	0x20000224
   122cc:	20000228 	.word	0x20000228
   122d0:	0001f1c1 	.word	0x0001f1c1
   122d4:	00011ec9 	.word	0x00011ec9
   122d8:	00160002 	.word	0x00160002
   122dc:	00170002 	.word	0x00170002
   122e0:	20000690 	.word	0x20000690
   122e4:	0001201d 	.word	0x0001201d
   122e8:	42001400 	.word	0x42001400
   122ec:	00021ad5 	.word	0x00021ad5
   122f0:	00011f89 	.word	0x00011f89
   122f4:	0001eba1 	.word	0x0001eba1
   122f8:	00012095 	.word	0x00012095
   122fc:	00022271 	.word	0x00022271

00012300 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12300:	b580      	push	{r7, lr}
   12302:	b082      	sub	sp, #8
   12304:	af00      	add	r7, sp, #0
   12306:	0002      	movs	r2, r0
   12308:	1dfb      	adds	r3, r7, #7
   1230a:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   1230c:	4b10      	ldr	r3, [pc, #64]	; (12350 <gsm_module_exit_sleep+0x50>)
   1230e:	781b      	ldrb	r3, [r3, #0]
   12310:	b2db      	uxtb	r3, r3
   12312:	2201      	movs	r2, #1
   12314:	4053      	eors	r3, r2
   12316:	b2db      	uxtb	r3, r3
   12318:	2b00      	cmp	r3, #0
   1231a:	d010      	beq.n	1233e <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   1231c:	2101      	movs	r1, #1
   1231e:	2014      	movs	r0, #20
   12320:	4b0c      	ldr	r3, [pc, #48]	; (12354 <gsm_module_exit_sleep+0x54>)
   12322:	4798      	blx	r3
		isGSMModuleAwake = true;
   12324:	4b0a      	ldr	r3, [pc, #40]	; (12350 <gsm_module_exit_sleep+0x50>)
   12326:	2201      	movs	r2, #1
   12328:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   1232a:	1dfb      	adds	r3, r7, #7
   1232c:	781b      	ldrb	r3, [r3, #0]
   1232e:	2201      	movs	r2, #1
   12330:	4053      	eors	r3, r2
   12332:	b2db      	uxtb	r3, r3
   12334:	2b00      	cmp	r3, #0
   12336:	d002      	beq.n	1233e <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12338:	2064      	movs	r0, #100	; 0x64
   1233a:	4b07      	ldr	r3, [pc, #28]	; (12358 <gsm_module_exit_sleep+0x58>)
   1233c:	4798      	blx	r3
		}
	}
	
	lastGSMCommunicationTime=xTaskGetTickCount();
   1233e:	4b07      	ldr	r3, [pc, #28]	; (1235c <gsm_module_exit_sleep+0x5c>)
   12340:	4798      	blx	r3
   12342:	0002      	movs	r2, r0
   12344:	4b06      	ldr	r3, [pc, #24]	; (12360 <gsm_module_exit_sleep+0x60>)
   12346:	601a      	str	r2, [r3, #0]
}
   12348:	46c0      	nop			; (mov r8, r8)
   1234a:	46bd      	mov	sp, r7
   1234c:	b002      	add	sp, #8
   1234e:	bd80      	pop	{r7, pc}
   12350:	20000684 	.word	0x20000684
   12354:	00011e31 	.word	0x00011e31
   12358:	0001ff69 	.word	0x0001ff69
   1235c:	000202cd 	.word	0x000202cd
   12360:	2000021c 	.word	0x2000021c

00012364 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12364:	b580      	push	{r7, lr}
   12366:	af00      	add	r7, sp, #0
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
   12368:	2100      	movs	r1, #0
   1236a:	2014      	movs	r0, #20
   1236c:	4b03      	ldr	r3, [pc, #12]	; (1237c <gsm_module_enter_sleep+0x18>)
   1236e:	4798      	blx	r3
	isGSMModuleAwake = false;
   12370:	4b03      	ldr	r3, [pc, #12]	; (12380 <gsm_module_enter_sleep+0x1c>)
   12372:	2200      	movs	r2, #0
   12374:	701a      	strb	r2, [r3, #0]
}
   12376:	46c0      	nop			; (mov r8, r8)
   12378:	46bd      	mov	sp, r7
   1237a:	bd80      	pop	{r7, pc}
   1237c:	00011e31 	.word	0x00011e31
   12380:	20000684 	.word	0x20000684

00012384 <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   12384:	b580      	push	{r7, lr}
   12386:	b082      	sub	sp, #8
   12388:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   1238a:	4b0e      	ldr	r3, [pc, #56]	; (123c4 <gsm_module_sleep_elligible+0x40>)
   1238c:	781b      	ldrb	r3, [r3, #0]
   1238e:	b2db      	uxtb	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d011      	beq.n	123b8 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   12394:	1dfb      	adds	r3, r7, #7
   12396:	2200      	movs	r2, #0
   12398:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=50000L);
   1239a:	4b0b      	ldr	r3, [pc, #44]	; (123c8 <gsm_module_sleep_elligible+0x44>)
   1239c:	4798      	blx	r3
   1239e:	0002      	movs	r2, r0
   123a0:	4b0a      	ldr	r3, [pc, #40]	; (123cc <gsm_module_sleep_elligible+0x48>)
   123a2:	681b      	ldr	r3, [r3, #0]
   123a4:	1ad2      	subs	r2, r2, r3
   123a6:	1dfb      	adds	r3, r7, #7
   123a8:	4909      	ldr	r1, [pc, #36]	; (123d0 <gsm_module_sleep_elligible+0x4c>)
   123aa:	4291      	cmp	r1, r2
   123ac:	4192      	sbcs	r2, r2
   123ae:	4252      	negs	r2, r2
   123b0:	701a      	strb	r2, [r3, #0]
		return ret;
   123b2:	1dfb      	adds	r3, r7, #7
   123b4:	781b      	ldrb	r3, [r3, #0]
   123b6:	e000      	b.n	123ba <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123b8:	2301      	movs	r3, #1
}
   123ba:	0018      	movs	r0, r3
   123bc:	46bd      	mov	sp, r7
   123be:	b002      	add	sp, #8
   123c0:	bd80      	pop	{r7, pc}
   123c2:	46c0      	nop			; (mov r8, r8)
   123c4:	20000684 	.word	0x20000684
   123c8:	000202cd 	.word	0x000202cd
   123cc:	2000021c 	.word	0x2000021c
   123d0:	0000c34f 	.word	0x0000c34f

000123d4 <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123d4:	b590      	push	{r4, r7, lr}
   123d6:	b08b      	sub	sp, #44	; 0x2c
   123d8:	af02      	add	r7, sp, #8
   123da:	60f8      	str	r0, [r7, #12]
   123dc:	60b9      	str	r1, [r7, #8]
   123de:	607a      	str	r2, [r7, #4]
   123e0:	001a      	movs	r2, r3
   123e2:	1cfb      	adds	r3, r7, #3
   123e4:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123e6:	4b66      	ldr	r3, [pc, #408]	; (12580 <gsm_send_at_command+0x1ac>)
   123e8:	681b      	ldr	r3, [r3, #0]
   123ea:	2101      	movs	r1, #1
   123ec:	0018      	movs	r0, r3
   123ee:	4b65      	ldr	r3, [pc, #404]	; (12584 <gsm_send_at_command+0x1b0>)
   123f0:	4798      	blx	r3
   123f2:	1e03      	subs	r3, r0, #0
   123f4:	d101      	bne.n	123fa <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   123f6:	2302      	movs	r3, #2
   123f8:	e0bd      	b.n	12576 <gsm_send_at_command+0x1a2>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   123fa:	2000      	movs	r0, #0
   123fc:	4b62      	ldr	r3, [pc, #392]	; (12588 <gsm_send_at_command+0x1b4>)
   123fe:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   12400:	4b62      	ldr	r3, [pc, #392]	; (1258c <gsm_send_at_command+0x1b8>)
   12402:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   12404:	231f      	movs	r3, #31
   12406:	18fb      	adds	r3, r7, r3
   12408:	2200      	movs	r2, #0
   1240a:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   1240c:	231e      	movs	r3, #30
   1240e:	18fb      	adds	r3, r7, r3
   12410:	2200      	movs	r2, #0
   12412:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   12414:	2313      	movs	r3, #19
   12416:	18fb      	adds	r3, r7, r3
   12418:	2200      	movs	r2, #0
   1241a:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   1241c:	2101      	movs	r1, #1
   1241e:	20f0      	movs	r0, #240	; 0xf0
   12420:	4b5b      	ldr	r3, [pc, #364]	; (12590 <gsm_send_at_command+0x1bc>)
   12422:	4798      	blx	r3
   12424:	0003      	movs	r3, r0
   12426:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12428:	69bb      	ldr	r3, [r7, #24]
   1242a:	2b00      	cmp	r3, #0
   1242c:	d101      	bne.n	12432 <gsm_send_at_command+0x5e>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
   1242e:	2300      	movs	r3, #0
   12430:	e0a1      	b.n	12576 <gsm_send_at_command+0x1a2>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   12432:	69bb      	ldr	r3, [r7, #24]
   12434:	22f0      	movs	r2, #240	; 0xf0
   12436:	2100      	movs	r1, #0
   12438:	0018      	movs	r0, r3
   1243a:	4b56      	ldr	r3, [pc, #344]	; (12594 <gsm_send_at_command+0x1c0>)
   1243c:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   1243e:	68fb      	ldr	r3, [r7, #12]
   12440:	0018      	movs	r0, r3
   12442:	4b55      	ldr	r3, [pc, #340]	; (12598 <gsm_send_at_command+0x1c4>)
   12444:	4798      	blx	r3
   12446:	0003      	movs	r3, r0
   12448:	b29a      	uxth	r2, r3
   1244a:	68f9      	ldr	r1, [r7, #12]
   1244c:	4b53      	ldr	r3, [pc, #332]	; (1259c <gsm_send_at_command+0x1c8>)
   1244e:	0018      	movs	r0, r3
   12450:	4b53      	ldr	r3, [pc, #332]	; (125a0 <gsm_send_at_command+0x1cc>)
   12452:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   12454:	4b53      	ldr	r3, [pc, #332]	; (125a4 <gsm_send_at_command+0x1d0>)
   12456:	6818      	ldr	r0, [r3, #0]
   12458:	687a      	ldr	r2, [r7, #4]
   1245a:	2301      	movs	r3, #1
   1245c:	425b      	negs	r3, r3
   1245e:	9300      	str	r3, [sp, #0]
   12460:	2300      	movs	r3, #0
   12462:	2104      	movs	r1, #4
   12464:	4c50      	ldr	r4, [pc, #320]	; (125a8 <gsm_send_at_command+0x1d4>)
   12466:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   12468:	4b4e      	ldr	r3, [pc, #312]	; (125a4 <gsm_send_at_command+0x1d0>)
   1246a:	681b      	ldr	r3, [r3, #0]
   1246c:	0018      	movs	r0, r3
   1246e:	4b4f      	ldr	r3, [pc, #316]	; (125ac <gsm_send_at_command+0x1d8>)
   12470:	4798      	blx	r3
   12472:	1e03      	subs	r3, r0, #0
   12474:	d03e      	beq.n	124f4 <gsm_send_at_command+0x120>
		{
			if (u8tRx_Index<240)
   12476:	231e      	movs	r3, #30
   12478:	18fb      	adds	r3, r7, r3
   1247a:	781b      	ldrb	r3, [r3, #0]
   1247c:	2bef      	cmp	r3, #239	; 0xef
   1247e:	d81c      	bhi.n	124ba <gsm_send_at_command+0xe6>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   12480:	4b4b      	ldr	r3, [pc, #300]	; (125b0 <gsm_send_at_command+0x1dc>)
   12482:	681b      	ldr	r3, [r3, #0]
   12484:	2213      	movs	r2, #19
   12486:	18b9      	adds	r1, r7, r2
   12488:	2200      	movs	r2, #0
   1248a:	0018      	movs	r0, r3
   1248c:	4b49      	ldr	r3, [pc, #292]	; (125b4 <gsm_send_at_command+0x1e0>)
   1248e:	4798      	blx	r3
   12490:	0003      	movs	r3, r0
   12492:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   12494:	697b      	ldr	r3, [r7, #20]
   12496:	2b00      	cmp	r3, #0
   12498:	d00f      	beq.n	124ba <gsm_send_at_command+0xe6>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   1249a:	231e      	movs	r3, #30
   1249c:	18fb      	adds	r3, r7, r3
   1249e:	781b      	ldrb	r3, [r3, #0]
   124a0:	69ba      	ldr	r2, [r7, #24]
   124a2:	18d3      	adds	r3, r2, r3
   124a4:	2213      	movs	r2, #19
   124a6:	18ba      	adds	r2, r7, r2
   124a8:	7812      	ldrb	r2, [r2, #0]
   124aa:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124ac:	231e      	movs	r3, #30
   124ae:	18fb      	adds	r3, r7, r3
   124b0:	781a      	ldrb	r2, [r3, #0]
   124b2:	231e      	movs	r3, #30
   124b4:	18fb      	adds	r3, r7, r3
   124b6:	3201      	adds	r2, #1
   124b8:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124ba:	68bb      	ldr	r3, [r7, #8]
   124bc:	2b00      	cmp	r3, #0
   124be:	d00c      	beq.n	124da <gsm_send_at_command+0x106>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124c0:	68ba      	ldr	r2, [r7, #8]
   124c2:	69bb      	ldr	r3, [r7, #24]
   124c4:	0011      	movs	r1, r2
   124c6:	0018      	movs	r0, r3
   124c8:	4b3b      	ldr	r3, [pc, #236]	; (125b8 <gsm_send_at_command+0x1e4>)
   124ca:	4798      	blx	r3
   124cc:	1e03      	subs	r3, r0, #0
   124ce:	d004      	beq.n	124da <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
   124d0:	231f      	movs	r3, #31
   124d2:	18fb      	adds	r3, r7, r3
   124d4:	2200      	movs	r2, #0
   124d6:	701a      	strb	r2, [r3, #0]
					break;
   124d8:	e024      	b.n	12524 <gsm_send_at_command+0x150>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   124da:	4a38      	ldr	r2, [pc, #224]	; (125bc <gsm_send_at_command+0x1e8>)
   124dc:	69bb      	ldr	r3, [r7, #24]
   124de:	0011      	movs	r1, r2
   124e0:	0018      	movs	r0, r3
   124e2:	4b35      	ldr	r3, [pc, #212]	; (125b8 <gsm_send_at_command+0x1e4>)
   124e4:	4798      	blx	r3
   124e6:	1e03      	subs	r3, r0, #0
   124e8:	d0be      	beq.n	12468 <gsm_send_at_command+0x94>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   124ea:	231f      	movs	r3, #31
   124ec:	18fb      	adds	r3, r7, r3
   124ee:	220b      	movs	r2, #11
   124f0:	701a      	strb	r2, [r3, #0]
				break;
   124f2:	e017      	b.n	12524 <gsm_send_at_command+0x150>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   124f4:	4b2b      	ldr	r3, [pc, #172]	; (125a4 <gsm_send_at_command+0x1d0>)
   124f6:	6818      	ldr	r0, [r3, #0]
   124f8:	2301      	movs	r3, #1
   124fa:	425b      	negs	r3, r3
   124fc:	9300      	str	r3, [sp, #0]
   124fe:	2300      	movs	r3, #0
   12500:	2200      	movs	r2, #0
   12502:	2103      	movs	r1, #3
   12504:	4c28      	ldr	r4, [pc, #160]	; (125a8 <gsm_send_at_command+0x1d4>)
   12506:	47a0      	blx	r4
			if (u8tRx_Index==0)
   12508:	231e      	movs	r3, #30
   1250a:	18fb      	adds	r3, r7, r3
   1250c:	781b      	ldrb	r3, [r3, #0]
   1250e:	2b00      	cmp	r3, #0
   12510:	d104      	bne.n	1251c <gsm_send_at_command+0x148>
			{
				err_no = GSM_ERROR_TIMEOUT;
   12512:	231f      	movs	r3, #31
   12514:	18fb      	adds	r3, r7, r3
   12516:	2207      	movs	r2, #7
   12518:	701a      	strb	r2, [r3, #0]
				break;
   1251a:	e003      	b.n	12524 <gsm_send_at_command+0x150>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   1251c:	231f      	movs	r3, #31
   1251e:	18fb      	adds	r3, r7, r3
   12520:	2208      	movs	r2, #8
   12522:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   12524:	1cfb      	adds	r3, r7, #3
   12526:	781b      	ldrb	r3, [r3, #0]
   12528:	2b00      	cmp	r3, #0
   1252a:	d016      	beq.n	1255a <gsm_send_at_command+0x186>
   1252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1252e:	2b00      	cmp	r3, #0
   12530:	d013      	beq.n	1255a <gsm_send_at_command+0x186>
   12532:	1cfa      	adds	r2, r7, #3
   12534:	231e      	movs	r3, #30
   12536:	18fb      	adds	r3, r7, r3
   12538:	7812      	ldrb	r2, [r2, #0]
   1253a:	781b      	ldrb	r3, [r3, #0]
   1253c:	429a      	cmp	r2, r3
   1253e:	d90c      	bls.n	1255a <gsm_send_at_command+0x186>
   12540:	231f      	movs	r3, #31
   12542:	18fb      	adds	r3, r7, r3
   12544:	781b      	ldrb	r3, [r3, #0]
   12546:	2b00      	cmp	r3, #0
   12548:	d107      	bne.n	1255a <gsm_send_at_command+0x186>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   1254a:	231e      	movs	r3, #30
   1254c:	18fb      	adds	r3, r7, r3
   1254e:	781a      	ldrb	r2, [r3, #0]
   12550:	69b9      	ldr	r1, [r7, #24]
   12552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12554:	0018      	movs	r0, r3
   12556:	4b1a      	ldr	r3, [pc, #104]	; (125c0 <gsm_send_at_command+0x1ec>)
   12558:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   1255a:	4b09      	ldr	r3, [pc, #36]	; (12580 <gsm_send_at_command+0x1ac>)
   1255c:	6818      	ldr	r0, [r3, #0]
   1255e:	2300      	movs	r3, #0
   12560:	2200      	movs	r2, #0
   12562:	2100      	movs	r1, #0
   12564:	4c17      	ldr	r4, [pc, #92]	; (125c4 <gsm_send_at_command+0x1f0>)
   12566:	47a0      	blx	r4
	free(aDataBuffer);
   12568:	69bb      	ldr	r3, [r7, #24]
   1256a:	0018      	movs	r0, r3
   1256c:	4b16      	ldr	r3, [pc, #88]	; (125c8 <gsm_send_at_command+0x1f4>)
   1256e:	4798      	blx	r3
	return err_no;
   12570:	231f      	movs	r3, #31
   12572:	18fb      	adds	r3, r7, r3
   12574:	781b      	ldrb	r3, [r3, #0]
}
   12576:	0018      	movs	r0, r3
   12578:	46bd      	mov	sp, r7
   1257a:	b009      	add	sp, #36	; 0x24
   1257c:	bd90      	pop	{r4, r7, pc}
   1257e:	46c0      	nop			; (mov r8, r8)
   12580:	20000228 	.word	0x20000228
   12584:	0001f661 	.word	0x0001f661
   12588:	00012301 	.word	0x00012301
   1258c:	00012061 	.word	0x00012061
   12590:	00028d85 	.word	0x00028d85
   12594:	00028e93 	.word	0x00028e93
   12598:	00029123 	.word	0x00029123
   1259c:	20000690 	.word	0x20000690
   125a0:	00021dad 	.word	0x00021dad
   125a4:	20000224 	.word	0x20000224
   125a8:	00020f2d 	.word	0x00020f2d
   125ac:	000214a9 	.word	0x000214a9
   125b0:	20000220 	.word	0x20000220
   125b4:	0001f4c1 	.word	0x0001f4c1
   125b8:	00029153 	.word	0x00029153
   125bc:	00029b40 	.word	0x00029b40
   125c0:	00028e5d 	.word	0x00028e5d
   125c4:	0001f1c1 	.word	0x0001f1c1
   125c8:	00028e25 	.word	0x00028e25

000125cc <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125cc:	b590      	push	{r4, r7, lr}
   125ce:	b083      	sub	sp, #12
   125d0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125d2:	4a06      	ldr	r2, [pc, #24]	; (125ec <gsm_check_module+0x20>)
   125d4:	4906      	ldr	r1, [pc, #24]	; (125f0 <gsm_check_module+0x24>)
   125d6:	4807      	ldr	r0, [pc, #28]	; (125f4 <gsm_check_module+0x28>)
   125d8:	2300      	movs	r3, #0
   125da:	9300      	str	r3, [sp, #0]
   125dc:	2300      	movs	r3, #0
   125de:	4c06      	ldr	r4, [pc, #24]	; (125f8 <gsm_check_module+0x2c>)
   125e0:	47a0      	blx	r4
   125e2:	0003      	movs	r3, r0
}
   125e4:	0018      	movs	r0, r3
   125e6:	46bd      	mov	sp, r7
   125e8:	b001      	add	sp, #4
   125ea:	bd90      	pop	{r4, r7, pc}
   125ec:	00001388 	.word	0x00001388
   125f0:	00029b48 	.word	0x00029b48
   125f4:	00029b4c 	.word	0x00029b4c
   125f8:	000123d5 	.word	0x000123d5

000125fc <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   125fc:	b5b0      	push	{r4, r5, r7, lr}
   125fe:	b084      	sub	sp, #16
   12600:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   12602:	1dfc      	adds	r4, r7, #7
   12604:	4a12      	ldr	r2, [pc, #72]	; (12650 <gsm_is_network_registered+0x54>)
   12606:	4913      	ldr	r1, [pc, #76]	; (12654 <gsm_is_network_registered+0x58>)
   12608:	4813      	ldr	r0, [pc, #76]	; (12658 <gsm_is_network_registered+0x5c>)
   1260a:	2300      	movs	r3, #0
   1260c:	9300      	str	r3, [sp, #0]
   1260e:	2300      	movs	r3, #0
   12610:	4d12      	ldr	r5, [pc, #72]	; (1265c <gsm_is_network_registered+0x60>)
   12612:	47a8      	blx	r5
   12614:	0003      	movs	r3, r0
   12616:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   12618:	1dfb      	adds	r3, r7, #7
   1261a:	781b      	ldrb	r3, [r3, #0]
   1261c:	2b00      	cmp	r3, #0
   1261e:	d101      	bne.n	12624 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12620:	2309      	movs	r3, #9
   12622:	e011      	b.n	12648 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   12624:	1dbc      	adds	r4, r7, #6
   12626:	4a0a      	ldr	r2, [pc, #40]	; (12650 <gsm_is_network_registered+0x54>)
   12628:	490d      	ldr	r1, [pc, #52]	; (12660 <gsm_is_network_registered+0x64>)
   1262a:	480b      	ldr	r0, [pc, #44]	; (12658 <gsm_is_network_registered+0x5c>)
   1262c:	2300      	movs	r3, #0
   1262e:	9300      	str	r3, [sp, #0]
   12630:	2300      	movs	r3, #0
   12632:	4d0a      	ldr	r5, [pc, #40]	; (1265c <gsm_is_network_registered+0x60>)
   12634:	47a8      	blx	r5
   12636:	0003      	movs	r3, r0
   12638:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   1263a:	1dbb      	adds	r3, r7, #6
   1263c:	781b      	ldrb	r3, [r3, #0]
   1263e:	2b00      	cmp	r3, #0
   12640:	d101      	bne.n	12646 <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   12642:	2309      	movs	r3, #9
   12644:	e000      	b.n	12648 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   12646:	230a      	movs	r3, #10
			}
		}
	}
}
   12648:	0018      	movs	r0, r3
   1264a:	46bd      	mov	sp, r7
   1264c:	b002      	add	sp, #8
   1264e:	bdb0      	pop	{r4, r5, r7, pc}
   12650:	00001388 	.word	0x00001388
   12654:	00029b5c 	.word	0x00029b5c
   12658:	00029b68 	.word	0x00029b68
   1265c:	000123d5 	.word	0x000123d5
   12660:	00029b74 	.word	0x00029b74

00012664 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   12664:	b590      	push	{r4, r7, lr}
   12666:	b089      	sub	sp, #36	; 0x24
   12668:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   1266a:	1d3b      	adds	r3, r7, #4
   1266c:	0018      	movs	r0, r3
   1266e:	2314      	movs	r3, #20
   12670:	001a      	movs	r2, r3
   12672:	2100      	movs	r1, #0
   12674:	4b0a      	ldr	r3, [pc, #40]	; (126a0 <gsm_set_baudrate+0x3c>)
   12676:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   12678:	23e1      	movs	r3, #225	; 0xe1
   1267a:	025a      	lsls	r2, r3, #9
   1267c:	4909      	ldr	r1, [pc, #36]	; (126a4 <gsm_set_baudrate+0x40>)
   1267e:	1d3b      	adds	r3, r7, #4
   12680:	0018      	movs	r0, r3
   12682:	4b09      	ldr	r3, [pc, #36]	; (126a8 <gsm_set_baudrate+0x44>)
   12684:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   12686:	4a09      	ldr	r2, [pc, #36]	; (126ac <gsm_set_baudrate+0x48>)
   12688:	4909      	ldr	r1, [pc, #36]	; (126b0 <gsm_set_baudrate+0x4c>)
   1268a:	1d38      	adds	r0, r7, #4
   1268c:	2300      	movs	r3, #0
   1268e:	9300      	str	r3, [sp, #0]
   12690:	2300      	movs	r3, #0
   12692:	4c08      	ldr	r4, [pc, #32]	; (126b4 <gsm_set_baudrate+0x50>)
   12694:	47a0      	blx	r4
   12696:	0003      	movs	r3, r0
}
   12698:	0018      	movs	r0, r3
   1269a:	46bd      	mov	sp, r7
   1269c:	b007      	add	sp, #28
   1269e:	bd90      	pop	{r4, r7, pc}
   126a0:	00028e93 	.word	0x00028e93
   126a4:	00029b80 	.word	0x00029b80
   126a8:	00029099 	.word	0x00029099
   126ac:	00001388 	.word	0x00001388
   126b0:	00029b48 	.word	0x00029b48
   126b4:	000123d5 	.word	0x000123d5

000126b8 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126b8:	b590      	push	{r4, r7, lr}
   126ba:	b083      	sub	sp, #12
   126bc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126be:	4a06      	ldr	r2, [pc, #24]	; (126d8 <gsm_detect_simcard+0x20>)
   126c0:	4906      	ldr	r1, [pc, #24]	; (126dc <gsm_detect_simcard+0x24>)
   126c2:	4807      	ldr	r0, [pc, #28]	; (126e0 <gsm_detect_simcard+0x28>)
   126c4:	2300      	movs	r3, #0
   126c6:	9300      	str	r3, [sp, #0]
   126c8:	2300      	movs	r3, #0
   126ca:	4c06      	ldr	r4, [pc, #24]	; (126e4 <gsm_detect_simcard+0x2c>)
   126cc:	47a0      	blx	r4
   126ce:	0003      	movs	r3, r0
}
   126d0:	0018      	movs	r0, r3
   126d2:	46bd      	mov	sp, r7
   126d4:	b001      	add	sp, #4
   126d6:	bd90      	pop	{r4, r7, pc}
   126d8:	00001388 	.word	0x00001388
   126dc:	00029bf0 	.word	0x00029bf0
   126e0:	00029c00 	.word	0x00029c00
   126e4:	000123d5 	.word	0x000123d5

000126e8 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   126e8:	b590      	push	{r4, r7, lr}
   126ea:	b083      	sub	sp, #12
   126ec:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   126ee:	4a06      	ldr	r2, [pc, #24]	; (12708 <gsm_delete_all_sms+0x20>)
   126f0:	4906      	ldr	r1, [pc, #24]	; (1270c <gsm_delete_all_sms+0x24>)
   126f2:	4807      	ldr	r0, [pc, #28]	; (12710 <gsm_delete_all_sms+0x28>)
   126f4:	2300      	movs	r3, #0
   126f6:	9300      	str	r3, [sp, #0]
   126f8:	2300      	movs	r3, #0
   126fa:	4c06      	ldr	r4, [pc, #24]	; (12714 <gsm_delete_all_sms+0x2c>)
   126fc:	47a0      	blx	r4
   126fe:	0003      	movs	r3, r0
}
   12700:	0018      	movs	r0, r3
   12702:	46bd      	mov	sp, r7
   12704:	b001      	add	sp, #4
   12706:	bd90      	pop	{r4, r7, pc}
   12708:	000061a8 	.word	0x000061a8
   1270c:	00029b48 	.word	0x00029b48
   12710:	00029c0c 	.word	0x00029c0c
   12714:	000123d5 	.word	0x000123d5

00012718 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   12718:	b590      	push	{r4, r7, lr}
   1271a:	b083      	sub	sp, #12
   1271c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1271e:	4a06      	ldr	r2, [pc, #24]	; (12738 <gsm_store_active_profile+0x20>)
   12720:	4906      	ldr	r1, [pc, #24]	; (1273c <gsm_store_active_profile+0x24>)
   12722:	4807      	ldr	r0, [pc, #28]	; (12740 <gsm_store_active_profile+0x28>)
   12724:	2300      	movs	r3, #0
   12726:	9300      	str	r3, [sp, #0]
   12728:	2300      	movs	r3, #0
   1272a:	4c06      	ldr	r4, [pc, #24]	; (12744 <gsm_store_active_profile+0x2c>)
   1272c:	47a0      	blx	r4
   1272e:	0003      	movs	r3, r0
}
   12730:	0018      	movs	r0, r3
   12732:	46bd      	mov	sp, r7
   12734:	b001      	add	sp, #4
   12736:	bd90      	pop	{r4, r7, pc}
   12738:	00001388 	.word	0x00001388
   1273c:	00029b48 	.word	0x00029b48
   12740:	00029c20 	.word	0x00029c20
   12744:	000123d5 	.word	0x000123d5

00012748 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   12748:	b590      	push	{r4, r7, lr}
   1274a:	b083      	sub	sp, #12
   1274c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   1274e:	4a06      	ldr	r2, [pc, #24]	; (12768 <gsm_enable_calling_line_identification+0x20>)
   12750:	4906      	ldr	r1, [pc, #24]	; (1276c <gsm_enable_calling_line_identification+0x24>)
   12752:	4807      	ldr	r0, [pc, #28]	; (12770 <gsm_enable_calling_line_identification+0x28>)
   12754:	2300      	movs	r3, #0
   12756:	9300      	str	r3, [sp, #0]
   12758:	2300      	movs	r3, #0
   1275a:	4c06      	ldr	r4, [pc, #24]	; (12774 <gsm_enable_calling_line_identification+0x2c>)
   1275c:	47a0      	blx	r4
   1275e:	0003      	movs	r3, r0
}
   12760:	0018      	movs	r0, r3
   12762:	46bd      	mov	sp, r7
   12764:	b001      	add	sp, #4
   12766:	bd90      	pop	{r4, r7, pc}
   12768:	00003a98 	.word	0x00003a98
   1276c:	00029b48 	.word	0x00029b48
   12770:	00029c28 	.word	0x00029c28
   12774:	000123d5 	.word	0x000123d5

00012778 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   12778:	b590      	push	{r4, r7, lr}
   1277a:	b083      	sub	sp, #12
   1277c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1277e:	4a06      	ldr	r2, [pc, #24]	; (12798 <gsm_enable_connected_line_identification_presentation+0x20>)
   12780:	4906      	ldr	r1, [pc, #24]	; (1279c <gsm_enable_connected_line_identification_presentation+0x24>)
   12782:	4807      	ldr	r0, [pc, #28]	; (127a0 <gsm_enable_connected_line_identification_presentation+0x28>)
   12784:	2300      	movs	r3, #0
   12786:	9300      	str	r3, [sp, #0]
   12788:	2300      	movs	r3, #0
   1278a:	4c06      	ldr	r4, [pc, #24]	; (127a4 <gsm_enable_connected_line_identification_presentation+0x2c>)
   1278c:	47a0      	blx	r4
   1278e:	0003      	movs	r3, r0
}
   12790:	0018      	movs	r0, r3
   12792:	46bd      	mov	sp, r7
   12794:	b001      	add	sp, #4
   12796:	bd90      	pop	{r4, r7, pc}
   12798:	00001388 	.word	0x00001388
   1279c:	00029b48 	.word	0x00029b48
   127a0:	00029c34 	.word	0x00029c34
   127a4:	000123d5 	.word	0x000123d5

000127a8 <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127a8:	b590      	push	{r4, r7, lr}
   127aa:	b083      	sub	sp, #12
   127ac:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127ae:	4a06      	ldr	r2, [pc, #24]	; (127c8 <gsm_enable_sleep_mode+0x20>)
   127b0:	4906      	ldr	r1, [pc, #24]	; (127cc <gsm_enable_sleep_mode+0x24>)
   127b2:	4807      	ldr	r0, [pc, #28]	; (127d0 <gsm_enable_sleep_mode+0x28>)
   127b4:	2300      	movs	r3, #0
   127b6:	9300      	str	r3, [sp, #0]
   127b8:	2300      	movs	r3, #0
   127ba:	4c06      	ldr	r4, [pc, #24]	; (127d4 <gsm_enable_sleep_mode+0x2c>)
   127bc:	47a0      	blx	r4
   127be:	0003      	movs	r3, r0
}
   127c0:	0018      	movs	r0, r3
   127c2:	46bd      	mov	sp, r7
   127c4:	b001      	add	sp, #4
   127c6:	bd90      	pop	{r4, r7, pc}
   127c8:	00002710 	.word	0x00002710
   127cc:	00029b48 	.word	0x00029b48
   127d0:	00029c40 	.word	0x00029c40
   127d4:	000123d5 	.word	0x000123d5

000127d8 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127d8:	b590      	push	{r4, r7, lr}
   127da:	b083      	sub	sp, #12
   127dc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127de:	4a06      	ldr	r2, [pc, #24]	; (127f8 <gsm_enable_list_current_calls_of_ME+0x20>)
   127e0:	4906      	ldr	r1, [pc, #24]	; (127fc <gsm_enable_list_current_calls_of_ME+0x24>)
   127e2:	4807      	ldr	r0, [pc, #28]	; (12800 <gsm_enable_list_current_calls_of_ME+0x28>)
   127e4:	2300      	movs	r3, #0
   127e6:	9300      	str	r3, [sp, #0]
   127e8:	2300      	movs	r3, #0
   127ea:	4c06      	ldr	r4, [pc, #24]	; (12804 <gsm_enable_list_current_calls_of_ME+0x2c>)
   127ec:	47a0      	blx	r4
   127ee:	0003      	movs	r3, r0
}
   127f0:	0018      	movs	r0, r3
   127f2:	46bd      	mov	sp, r7
   127f4:	b001      	add	sp, #4
   127f6:	bd90      	pop	{r4, r7, pc}
   127f8:	00001388 	.word	0x00001388
   127fc:	00029b48 	.word	0x00029b48
   12800:	00029c68 	.word	0x00029c68
   12804:	000123d5 	.word	0x000123d5

00012808 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   12808:	b590      	push	{r4, r7, lr}
   1280a:	b083      	sub	sp, #12
   1280c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   1280e:	4a06      	ldr	r2, [pc, #24]	; (12828 <gsm_factory_reset+0x20>)
   12810:	4906      	ldr	r1, [pc, #24]	; (1282c <gsm_factory_reset+0x24>)
   12812:	4807      	ldr	r0, [pc, #28]	; (12830 <gsm_factory_reset+0x28>)
   12814:	2300      	movs	r3, #0
   12816:	9300      	str	r3, [sp, #0]
   12818:	2300      	movs	r3, #0
   1281a:	4c06      	ldr	r4, [pc, #24]	; (12834 <gsm_factory_reset+0x2c>)
   1281c:	47a0      	blx	r4
   1281e:	0003      	movs	r3, r0
}
   12820:	0018      	movs	r0, r3
   12822:	46bd      	mov	sp, r7
   12824:	b001      	add	sp, #4
   12826:	bd90      	pop	{r4, r7, pc}
   12828:	00003a98 	.word	0x00003a98
   1282c:	00029b48 	.word	0x00029b48
   12830:	00029c74 	.word	0x00029c74
   12834:	000123d5 	.word	0x000123d5

00012838 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   12838:	b590      	push	{r4, r7, lr}
   1283a:	b083      	sub	sp, #12
   1283c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1283e:	4a06      	ldr	r2, [pc, #24]	; (12858 <gsm_echo_off+0x20>)
   12840:	4906      	ldr	r1, [pc, #24]	; (1285c <gsm_echo_off+0x24>)
   12842:	4807      	ldr	r0, [pc, #28]	; (12860 <gsm_echo_off+0x28>)
   12844:	2300      	movs	r3, #0
   12846:	9300      	str	r3, [sp, #0]
   12848:	2300      	movs	r3, #0
   1284a:	4c06      	ldr	r4, [pc, #24]	; (12864 <gsm_echo_off+0x2c>)
   1284c:	47a0      	blx	r4
   1284e:	0003      	movs	r3, r0
}
   12850:	0018      	movs	r0, r3
   12852:	46bd      	mov	sp, r7
   12854:	b001      	add	sp, #4
   12856:	bd90      	pop	{r4, r7, pc}
   12858:	00001388 	.word	0x00001388
   1285c:	00029b48 	.word	0x00029b48
   12860:	00029c7c 	.word	0x00029c7c
   12864:	000123d5 	.word	0x000123d5

00012868 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   12868:	b590      	push	{r4, r7, lr}
   1286a:	b083      	sub	sp, #12
   1286c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   1286e:	4a06      	ldr	r2, [pc, #24]	; (12888 <gsm_select_sms_message_formate_text_mode+0x20>)
   12870:	4906      	ldr	r1, [pc, #24]	; (1288c <gsm_select_sms_message_formate_text_mode+0x24>)
   12872:	4807      	ldr	r0, [pc, #28]	; (12890 <gsm_select_sms_message_formate_text_mode+0x28>)
   12874:	2300      	movs	r3, #0
   12876:	9300      	str	r3, [sp, #0]
   12878:	2300      	movs	r3, #0
   1287a:	4c06      	ldr	r4, [pc, #24]	; (12894 <gsm_select_sms_message_formate_text_mode+0x2c>)
   1287c:	47a0      	blx	r4
   1287e:	0003      	movs	r3, r0
}
   12880:	0018      	movs	r0, r3
   12882:	46bd      	mov	sp, r7
   12884:	b001      	add	sp, #4
   12886:	bd90      	pop	{r4, r7, pc}
   12888:	00001388 	.word	0x00001388
   1288c:	00029b48 	.word	0x00029b48
   12890:	00029c84 	.word	0x00029c84
   12894:	000123d5 	.word	0x000123d5

00012898 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   12898:	b590      	push	{r4, r7, lr}
   1289a:	b083      	sub	sp, #12
   1289c:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   1289e:	4a06      	ldr	r2, [pc, #24]	; (128b8 <gsm_set_sms_text_mode_parameter+0x20>)
   128a0:	4906      	ldr	r1, [pc, #24]	; (128bc <gsm_set_sms_text_mode_parameter+0x24>)
   128a2:	4807      	ldr	r0, [pc, #28]	; (128c0 <gsm_set_sms_text_mode_parameter+0x28>)
   128a4:	2300      	movs	r3, #0
   128a6:	9300      	str	r3, [sp, #0]
   128a8:	2300      	movs	r3, #0
   128aa:	4c06      	ldr	r4, [pc, #24]	; (128c4 <gsm_set_sms_text_mode_parameter+0x2c>)
   128ac:	47a0      	blx	r4
   128ae:	0003      	movs	r3, r0
}
   128b0:	0018      	movs	r0, r3
   128b2:	46bd      	mov	sp, r7
   128b4:	b001      	add	sp, #4
   128b6:	bd90      	pop	{r4, r7, pc}
   128b8:	00001b58 	.word	0x00001b58
   128bc:	00029b48 	.word	0x00029b48
   128c0:	00029c90 	.word	0x00029c90
   128c4:	000123d5 	.word	0x000123d5

000128c8 <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128c8:	b5b0      	push	{r4, r5, r7, lr}
   128ca:	b088      	sub	sp, #32
   128cc:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128ce:	2316      	movs	r3, #22
   128d0:	18fb      	adds	r3, r7, r3
   128d2:	2264      	movs	r2, #100	; 0x64
   128d4:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128d6:	2316      	movs	r3, #22
   128d8:	18fb      	adds	r3, r7, r3
   128da:	781b      	ldrb	r3, [r3, #0]
   128dc:	2101      	movs	r1, #1
   128de:	0018      	movs	r0, r3
   128e0:	4b60      	ldr	r3, [pc, #384]	; (12a64 <gsm_getsignalstrength+0x19c>)
   128e2:	4798      	blx	r3
   128e4:	0003      	movs	r3, r0
   128e6:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   128e8:	693b      	ldr	r3, [r7, #16]
   128ea:	2b00      	cmp	r3, #0
   128ec:	d105      	bne.n	128fa <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   128ee:	693b      	ldr	r3, [r7, #16]
   128f0:	0018      	movs	r0, r3
   128f2:	4b5d      	ldr	r3, [pc, #372]	; (12a68 <gsm_getsignalstrength+0x1a0>)
   128f4:	4798      	blx	r3
		return 0;
   128f6:	2300      	movs	r3, #0
   128f8:	e0af      	b.n	12a5a <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   128fa:	2316      	movs	r3, #22
   128fc:	18fb      	adds	r3, r7, r3
   128fe:	781a      	ldrb	r2, [r3, #0]
   12900:	693b      	ldr	r3, [r7, #16]
   12902:	2100      	movs	r1, #0
   12904:	0018      	movs	r0, r3
   12906:	4b59      	ldr	r3, [pc, #356]	; (12a6c <gsm_getsignalstrength+0x1a4>)
   12908:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   1290a:	230f      	movs	r3, #15
   1290c:	18fc      	adds	r4, r7, r3
   1290e:	2316      	movs	r3, #22
   12910:	18fb      	adds	r3, r7, r3
   12912:	781a      	ldrb	r2, [r3, #0]
   12914:	4d56      	ldr	r5, [pc, #344]	; (12a70 <gsm_getsignalstrength+0x1a8>)
   12916:	4957      	ldr	r1, [pc, #348]	; (12a74 <gsm_getsignalstrength+0x1ac>)
   12918:	4857      	ldr	r0, [pc, #348]	; (12a78 <gsm_getsignalstrength+0x1b0>)
   1291a:	693b      	ldr	r3, [r7, #16]
   1291c:	9300      	str	r3, [sp, #0]
   1291e:	0013      	movs	r3, r2
   12920:	002a      	movs	r2, r5
   12922:	4d56      	ldr	r5, [pc, #344]	; (12a7c <gsm_getsignalstrength+0x1b4>)
   12924:	47a8      	blx	r5
   12926:	0003      	movs	r3, r0
   12928:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   1292a:	230f      	movs	r3, #15
   1292c:	18fb      	adds	r3, r7, r3
   1292e:	781b      	ldrb	r3, [r3, #0]
   12930:	2b00      	cmp	r3, #0
   12932:	d000      	beq.n	12936 <gsm_getsignalstrength+0x6e>
   12934:	e086      	b.n	12a44 <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
   12936:	4a52      	ldr	r2, [pc, #328]	; (12a80 <gsm_getsignalstrength+0x1b8>)
   12938:	693b      	ldr	r3, [r7, #16]
   1293a:	0011      	movs	r1, r2
   1293c:	0018      	movs	r0, r3
   1293e:	4b51      	ldr	r3, [pc, #324]	; (12a84 <gsm_getsignalstrength+0x1bc>)
   12940:	4798      	blx	r3
   12942:	1e03      	subs	r3, r0, #0
   12944:	d000      	beq.n	12948 <gsm_getsignalstrength+0x80>
   12946:	e078      	b.n	12a3a <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
   12948:	4a4f      	ldr	r2, [pc, #316]	; (12a88 <gsm_getsignalstrength+0x1c0>)
   1294a:	693b      	ldr	r3, [r7, #16]
   1294c:	0011      	movs	r1, r2
   1294e:	0018      	movs	r0, r3
   12950:	4b4e      	ldr	r3, [pc, #312]	; (12a8c <gsm_getsignalstrength+0x1c4>)
   12952:	4798      	blx	r3
   12954:	0003      	movs	r3, r0
   12956:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
   12958:	4b4b      	ldr	r3, [pc, #300]	; (12a88 <gsm_getsignalstrength+0x1c0>)
   1295a:	0019      	movs	r1, r3
   1295c:	2000      	movs	r0, #0
   1295e:	4b4b      	ldr	r3, [pc, #300]	; (12a8c <gsm_getsignalstrength+0x1c4>)
   12960:	4798      	blx	r3
   12962:	0003      	movs	r3, r0
   12964:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
   12966:	4a4a      	ldr	r2, [pc, #296]	; (12a90 <gsm_getsignalstrength+0x1c8>)
   12968:	68bb      	ldr	r3, [r7, #8]
   1296a:	0011      	movs	r1, r2
   1296c:	0018      	movs	r0, r3
   1296e:	4b47      	ldr	r3, [pc, #284]	; (12a8c <gsm_getsignalstrength+0x1c4>)
   12970:	4798      	blx	r3
   12972:	0003      	movs	r3, r0
   12974:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
   12976:	68bb      	ldr	r3, [r7, #8]
   12978:	0018      	movs	r0, r3
   1297a:	4b46      	ldr	r3, [pc, #280]	; (12a94 <gsm_getsignalstrength+0x1cc>)
   1297c:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
   1297e:	68bb      	ldr	r3, [r7, #8]
   12980:	0018      	movs	r0, r3
   12982:	4b45      	ldr	r3, [pc, #276]	; (12a98 <gsm_getsignalstrength+0x1d0>)
   12984:	4798      	blx	r3
   12986:	0002      	movs	r2, r0
   12988:	1dfb      	adds	r3, r7, #7
   1298a:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   1298c:	1dfb      	adds	r3, r7, #7
   1298e:	781b      	ldrb	r3, [r3, #0]
   12990:	2b00      	cmp	r3, #0
   12992:	d007      	beq.n	129a4 <gsm_getsignalstrength+0xdc>
   12994:	1dfb      	adds	r3, r7, #7
   12996:	781b      	ldrb	r3, [r3, #0]
   12998:	2b01      	cmp	r3, #1
   1299a:	d003      	beq.n	129a4 <gsm_getsignalstrength+0xdc>
   1299c:	1dfb      	adds	r3, r7, #7
   1299e:	781b      	ldrb	r3, [r3, #0]
   129a0:	2b63      	cmp	r3, #99	; 0x63
   129a2:	d104      	bne.n	129ae <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
   129a4:	2317      	movs	r3, #23
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	2200      	movs	r2, #0
   129aa:	701a      	strb	r2, [r3, #0]
   129ac:	e04e      	b.n	12a4c <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
   129ae:	1dfb      	adds	r3, r7, #7
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b01      	cmp	r3, #1
   129b4:	d908      	bls.n	129c8 <gsm_getsignalstrength+0x100>
   129b6:	1dfb      	adds	r3, r7, #7
   129b8:	781b      	ldrb	r3, [r3, #0]
   129ba:	2b07      	cmp	r3, #7
   129bc:	d804      	bhi.n	129c8 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
   129be:	2317      	movs	r3, #23
   129c0:	18fb      	adds	r3, r7, r3
   129c2:	2201      	movs	r2, #1
   129c4:	701a      	strb	r2, [r3, #0]
   129c6:	e041      	b.n	12a4c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	781b      	ldrb	r3, [r3, #0]
   129cc:	2b07      	cmp	r3, #7
   129ce:	d908      	bls.n	129e2 <gsm_getsignalstrength+0x11a>
   129d0:	1dfb      	adds	r3, r7, #7
   129d2:	781b      	ldrb	r3, [r3, #0]
   129d4:	2b0d      	cmp	r3, #13
   129d6:	d804      	bhi.n	129e2 <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
   129d8:	2317      	movs	r3, #23
   129da:	18fb      	adds	r3, r7, r3
   129dc:	2202      	movs	r2, #2
   129de:	701a      	strb	r2, [r3, #0]
   129e0:	e034      	b.n	12a4c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
   129e2:	1dfb      	adds	r3, r7, #7
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	2b0d      	cmp	r3, #13
   129e8:	d908      	bls.n	129fc <gsm_getsignalstrength+0x134>
   129ea:	1dfb      	adds	r3, r7, #7
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	2b13      	cmp	r3, #19
   129f0:	d804      	bhi.n	129fc <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
   129f2:	2317      	movs	r3, #23
   129f4:	18fb      	adds	r3, r7, r3
   129f6:	2203      	movs	r2, #3
   129f8:	701a      	strb	r2, [r3, #0]
   129fa:	e027      	b.n	12a4c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
   129fc:	1dfb      	adds	r3, r7, #7
   129fe:	781b      	ldrb	r3, [r3, #0]
   12a00:	2b13      	cmp	r3, #19
   12a02:	d908      	bls.n	12a16 <gsm_getsignalstrength+0x14e>
   12a04:	1dfb      	adds	r3, r7, #7
   12a06:	781b      	ldrb	r3, [r3, #0]
   12a08:	2b19      	cmp	r3, #25
   12a0a:	d804      	bhi.n	12a16 <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
   12a0c:	2317      	movs	r3, #23
   12a0e:	18fb      	adds	r3, r7, r3
   12a10:	2204      	movs	r2, #4
   12a12:	701a      	strb	r2, [r3, #0]
   12a14:	e01a      	b.n	12a4c <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
   12a16:	1dfb      	adds	r3, r7, #7
   12a18:	781b      	ldrb	r3, [r3, #0]
   12a1a:	2b19      	cmp	r3, #25
   12a1c:	d908      	bls.n	12a30 <gsm_getsignalstrength+0x168>
   12a1e:	1dfb      	adds	r3, r7, #7
   12a20:	781b      	ldrb	r3, [r3, #0]
   12a22:	2b1f      	cmp	r3, #31
   12a24:	d804      	bhi.n	12a30 <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
   12a26:	2317      	movs	r3, #23
   12a28:	18fb      	adds	r3, r7, r3
   12a2a:	2205      	movs	r2, #5
   12a2c:	701a      	strb	r2, [r3, #0]
   12a2e:	e00d      	b.n	12a4c <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
   12a30:	2317      	movs	r3, #23
   12a32:	18fb      	adds	r3, r7, r3
   12a34:	2200      	movs	r2, #0
   12a36:	701a      	strb	r2, [r3, #0]
   12a38:	e008      	b.n	12a4c <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
   12a3a:	2317      	movs	r3, #23
   12a3c:	18fb      	adds	r3, r7, r3
   12a3e:	2200      	movs	r2, #0
   12a40:	701a      	strb	r2, [r3, #0]
   12a42:	e003      	b.n	12a4c <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
   12a44:	2317      	movs	r3, #23
   12a46:	18fb      	adds	r3, r7, r3
   12a48:	2200      	movs	r2, #0
   12a4a:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a4c:	693b      	ldr	r3, [r7, #16]
   12a4e:	0018      	movs	r0, r3
   12a50:	4b05      	ldr	r3, [pc, #20]	; (12a68 <gsm_getsignalstrength+0x1a0>)
   12a52:	4798      	blx	r3
	
	return sig_strength;
   12a54:	2317      	movs	r3, #23
   12a56:	18fb      	adds	r3, r7, r3
   12a58:	781b      	ldrb	r3, [r3, #0]
}
   12a5a:	0018      	movs	r0, r3
   12a5c:	46bd      	mov	sp, r7
   12a5e:	b006      	add	sp, #24
   12a60:	bdb0      	pop	{r4, r5, r7, pc}
   12a62:	46c0      	nop			; (mov r8, r8)
   12a64:	00028d85 	.word	0x00028d85
   12a68:	00028e25 	.word	0x00028e25
   12a6c:	00028e93 	.word	0x00028e93
   12a70:	00001388 	.word	0x00001388
   12a74:	00029b48 	.word	0x00029b48
   12a78:	00029cbc 	.word	0x00029cbc
   12a7c:	000123d5 	.word	0x000123d5
   12a80:	00029cc4 	.word	0x00029cc4
   12a84:	00029153 	.word	0x00029153
   12a88:	00029c60 	.word	0x00029c60
   12a8c:	00029185 	.word	0x00029185
   12a90:	00029c64 	.word	0x00029c64
   12a94:	00012a9d 	.word	0x00012a9d
   12a98:	00028d79 	.word	0x00028d79

00012a9c <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12a9c:	b580      	push	{r7, lr}
   12a9e:	b084      	sub	sp, #16
   12aa0:	af00      	add	r7, sp, #0
   12aa2:	6078      	str	r0, [r7, #4]
	char* i = source;
   12aa4:	687b      	ldr	r3, [r7, #4]
   12aa6:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12aa8:	687b      	ldr	r3, [r7, #4]
   12aaa:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12aac:	e00c      	b.n	12ac8 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12aae:	68bb      	ldr	r3, [r7, #8]
   12ab0:	1c5a      	adds	r2, r3, #1
   12ab2:	60ba      	str	r2, [r7, #8]
   12ab4:	781a      	ldrb	r2, [r3, #0]
   12ab6:	68fb      	ldr	r3, [r7, #12]
   12ab8:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12aba:	68fb      	ldr	r3, [r7, #12]
   12abc:	781b      	ldrb	r3, [r3, #0]
   12abe:	2b20      	cmp	r3, #32
   12ac0:	d002      	beq.n	12ac8 <RemoveSpaces+0x2c>
		i++;
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	3301      	adds	r3, #1
   12ac6:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12ac8:	68bb      	ldr	r3, [r7, #8]
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	2b00      	cmp	r3, #0
   12ace:	d1ee      	bne.n	12aae <RemoveSpaces+0x12>
	}
	*i = 0;
   12ad0:	68fb      	ldr	r3, [r7, #12]
   12ad2:	2200      	movs	r2, #0
   12ad4:	701a      	strb	r2, [r3, #0]
}
   12ad6:	46c0      	nop			; (mov r8, r8)
   12ad8:	46bd      	mov	sp, r7
   12ada:	b004      	add	sp, #16
   12adc:	bd80      	pop	{r7, pc}
	...

00012ae0 <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12ae0:	b590      	push	{r4, r7, lr}
   12ae2:	b083      	sub	sp, #12
   12ae4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12ae6:	4a06      	ldr	r2, [pc, #24]	; (12b00 <gsm_enable_new_sms_message_indications+0x20>)
   12ae8:	4906      	ldr	r1, [pc, #24]	; (12b04 <gsm_enable_new_sms_message_indications+0x24>)
   12aea:	4807      	ldr	r0, [pc, #28]	; (12b08 <gsm_enable_new_sms_message_indications+0x28>)
   12aec:	2300      	movs	r3, #0
   12aee:	9300      	str	r3, [sp, #0]
   12af0:	2300      	movs	r3, #0
   12af2:	4c06      	ldr	r4, [pc, #24]	; (12b0c <gsm_enable_new_sms_message_indications+0x2c>)
   12af4:	47a0      	blx	r4
   12af6:	0003      	movs	r3, r0
}
   12af8:	0018      	movs	r0, r3
   12afa:	46bd      	mov	sp, r7
   12afc:	b001      	add	sp, #4
   12afe:	bd90      	pop	{r4, r7, pc}
   12b00:	00001388 	.word	0x00001388
   12b04:	00029b48 	.word	0x00029b48
   12b08:	00029cc8 	.word	0x00029cc8
   12b0c:	000123d5 	.word	0x000123d5

00012b10 <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b10:	b5b0      	push	{r4, r5, r7, lr}
   12b12:	b088      	sub	sp, #32
   12b14:	af02      	add	r7, sp, #8
   12b16:	6078      	str	r0, [r7, #4]
   12b18:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	0018      	movs	r0, r3
   12b1e:	4b3b      	ldr	r3, [pc, #236]	; (12c0c <gsm_send_sms+0xfc>)
   12b20:	4798      	blx	r3
   12b22:	0003      	movs	r3, r0
   12b24:	2bfa      	cmp	r3, #250	; 0xfa
   12b26:	d901      	bls.n	12b2c <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12b28:	2303      	movs	r3, #3
   12b2a:	e06b      	b.n	12c04 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12b2c:	687b      	ldr	r3, [r7, #4]
   12b2e:	0018      	movs	r0, r3
   12b30:	4b36      	ldr	r3, [pc, #216]	; (12c0c <gsm_send_sms+0xfc>)
   12b32:	4798      	blx	r3
   12b34:	0003      	movs	r3, r0
   12b36:	2b05      	cmp	r3, #5
   12b38:	d801      	bhi.n	12b3e <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12b3a:	2304      	movs	r3, #4
   12b3c:	e062      	b.n	12c04 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12b3e:	2317      	movs	r3, #23
   12b40:	18fb      	adds	r3, r7, r3
   12b42:	22fa      	movs	r2, #250	; 0xfa
   12b44:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12b46:	2317      	movs	r3, #23
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	781b      	ldrb	r3, [r3, #0]
   12b4c:	2101      	movs	r1, #1
   12b4e:	0018      	movs	r0, r3
   12b50:	4b2f      	ldr	r3, [pc, #188]	; (12c10 <gsm_send_sms+0x100>)
   12b52:	4798      	blx	r3
   12b54:	0003      	movs	r3, r0
   12b56:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12b58:	693b      	ldr	r3, [r7, #16]
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	d101      	bne.n	12b62 <gsm_send_sms+0x52>
	{
		return 0;
   12b5e:	2300      	movs	r3, #0
   12b60:	e050      	b.n	12c04 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12b62:	2317      	movs	r3, #23
   12b64:	18fb      	adds	r3, r7, r3
   12b66:	781a      	ldrb	r2, [r3, #0]
   12b68:	693b      	ldr	r3, [r7, #16]
   12b6a:	2100      	movs	r1, #0
   12b6c:	0018      	movs	r0, r3
   12b6e:	4b29      	ldr	r3, [pc, #164]	; (12c14 <gsm_send_sms+0x104>)
   12b70:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12b72:	2317      	movs	r3, #23
   12b74:	18fb      	adds	r3, r7, r3
   12b76:	7819      	ldrb	r1, [r3, #0]
   12b78:	687b      	ldr	r3, [r7, #4]
   12b7a:	4a27      	ldr	r2, [pc, #156]	; (12c18 <gsm_send_sms+0x108>)
   12b7c:	6938      	ldr	r0, [r7, #16]
   12b7e:	4c27      	ldr	r4, [pc, #156]	; (12c1c <gsm_send_sms+0x10c>)
   12b80:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12b82:	4a27      	ldr	r2, [pc, #156]	; (12c20 <gsm_send_sms+0x110>)
   12b84:	4927      	ldr	r1, [pc, #156]	; (12c24 <gsm_send_sms+0x114>)
   12b86:	6938      	ldr	r0, [r7, #16]
   12b88:	2300      	movs	r3, #0
   12b8a:	9300      	str	r3, [sp, #0]
   12b8c:	2300      	movs	r3, #0
   12b8e:	4c26      	ldr	r4, [pc, #152]	; (12c28 <gsm_send_sms+0x118>)
   12b90:	47a0      	blx	r4
   12b92:	1e03      	subs	r3, r0, #0
   12b94:	d131      	bne.n	12bfa <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12b96:	23fa      	movs	r3, #250	; 0xfa
   12b98:	005b      	lsls	r3, r3, #1
   12b9a:	0018      	movs	r0, r3
   12b9c:	4b23      	ldr	r3, [pc, #140]	; (12c2c <gsm_send_sms+0x11c>)
   12b9e:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12ba0:	2317      	movs	r3, #23
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	781a      	ldrb	r2, [r3, #0]
   12ba6:	693b      	ldr	r3, [r7, #16]
   12ba8:	2100      	movs	r1, #0
   12baa:	0018      	movs	r0, r3
   12bac:	4b19      	ldr	r3, [pc, #100]	; (12c14 <gsm_send_sms+0x104>)
   12bae:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12bb0:	2317      	movs	r3, #23
   12bb2:	18fb      	adds	r3, r7, r3
   12bb4:	7819      	ldrb	r1, [r3, #0]
   12bb6:	683b      	ldr	r3, [r7, #0]
   12bb8:	4a1d      	ldr	r2, [pc, #116]	; (12c30 <gsm_send_sms+0x120>)
   12bba:	6938      	ldr	r0, [r7, #16]
   12bbc:	4c17      	ldr	r4, [pc, #92]	; (12c1c <gsm_send_sms+0x10c>)
   12bbe:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12bc0:	230f      	movs	r3, #15
   12bc2:	18fc      	adds	r4, r7, r3
   12bc4:	4a16      	ldr	r2, [pc, #88]	; (12c20 <gsm_send_sms+0x110>)
   12bc6:	491b      	ldr	r1, [pc, #108]	; (12c34 <gsm_send_sms+0x124>)
   12bc8:	6938      	ldr	r0, [r7, #16]
   12bca:	2300      	movs	r3, #0
   12bcc:	9300      	str	r3, [sp, #0]
   12bce:	2300      	movs	r3, #0
   12bd0:	4d15      	ldr	r5, [pc, #84]	; (12c28 <gsm_send_sms+0x118>)
   12bd2:	47a8      	blx	r5
   12bd4:	0003      	movs	r3, r0
   12bd6:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12bd8:	230f      	movs	r3, #15
   12bda:	18fb      	adds	r3, r7, r3
   12bdc:	781b      	ldrb	r3, [r3, #0]
   12bde:	2b00      	cmp	r3, #0
   12be0:	d105      	bne.n	12bee <gsm_send_sms+0xde>
		{
			free(cmdx);
   12be2:	693b      	ldr	r3, [r7, #16]
   12be4:	0018      	movs	r0, r3
   12be6:	4b14      	ldr	r3, [pc, #80]	; (12c38 <gsm_send_sms+0x128>)
   12be8:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12bea:	2300      	movs	r3, #0
   12bec:	e00a      	b.n	12c04 <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12bee:	693b      	ldr	r3, [r7, #16]
   12bf0:	0018      	movs	r0, r3
   12bf2:	4b11      	ldr	r3, [pc, #68]	; (12c38 <gsm_send_sms+0x128>)
   12bf4:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12bf6:	2306      	movs	r3, #6
   12bf8:	e004      	b.n	12c04 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12bfa:	693b      	ldr	r3, [r7, #16]
   12bfc:	0018      	movs	r0, r3
   12bfe:	4b0e      	ldr	r3, [pc, #56]	; (12c38 <gsm_send_sms+0x128>)
   12c00:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12c02:	2306      	movs	r3, #6
	}
}
   12c04:	0018      	movs	r0, r3
   12c06:	46bd      	mov	sp, r7
   12c08:	b006      	add	sp, #24
   12c0a:	bdb0      	pop	{r4, r5, r7, pc}
   12c0c:	00029123 	.word	0x00029123
   12c10:	00028d85 	.word	0x00028d85
   12c14:	00028e93 	.word	0x00028e93
   12c18:	00029cf0 	.word	0x00029cf0
   12c1c:	00029035 	.word	0x00029035
   12c20:	0000ea60 	.word	0x0000ea60
   12c24:	00029d00 	.word	0x00029d00
   12c28:	000123d5 	.word	0x000123d5
   12c2c:	0001ff69 	.word	0x0001ff69
   12c30:	00029d04 	.word	0x00029d04
   12c34:	00029b48 	.word	0x00029b48
   12c38:	00028e25 	.word	0x00028e25

00012c3c <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12c3c:	b590      	push	{r4, r7, lr}
   12c3e:	b08f      	sub	sp, #60	; 0x3c
   12c40:	af02      	add	r7, sp, #8
   12c42:	60b9      	str	r1, [r7, #8]
   12c44:	0011      	movs	r1, r2
   12c46:	607b      	str	r3, [r7, #4]
   12c48:	230f      	movs	r3, #15
   12c4a:	18fb      	adds	r3, r7, r3
   12c4c:	1c02      	adds	r2, r0, #0
   12c4e:	701a      	strb	r2, [r3, #0]
   12c50:	230e      	movs	r3, #14
   12c52:	18fb      	adds	r3, r7, r3
   12c54:	1c0a      	adds	r2, r1, #0
   12c56:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12c58:	232f      	movs	r3, #47	; 0x2f
   12c5a:	18fb      	adds	r3, r7, r3
   12c5c:	22e6      	movs	r2, #230	; 0xe6
   12c5e:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12c60:	232f      	movs	r3, #47	; 0x2f
   12c62:	18fb      	adds	r3, r7, r3
   12c64:	781b      	ldrb	r3, [r3, #0]
   12c66:	2101      	movs	r1, #1
   12c68:	0018      	movs	r0, r3
   12c6a:	4b6e      	ldr	r3, [pc, #440]	; (12e24 <gsm_read_sms+0x1e8>)
   12c6c:	4798      	blx	r3
   12c6e:	0003      	movs	r3, r0
   12c70:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c74:	2b00      	cmp	r3, #0
   12c76:	d105      	bne.n	12c84 <gsm_read_sms+0x48>
	{
		free(cmdx);
   12c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c7a:	0018      	movs	r0, r3
   12c7c:	4b6a      	ldr	r3, [pc, #424]	; (12e28 <gsm_read_sms+0x1ec>)
   12c7e:	4798      	blx	r3
		return 0;
   12c80:	2300      	movs	r3, #0
   12c82:	e0ca      	b.n	12e1a <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12c84:	232f      	movs	r3, #47	; 0x2f
   12c86:	18fb      	adds	r3, r7, r3
   12c88:	781a      	ldrb	r2, [r3, #0]
   12c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c8c:	2100      	movs	r1, #0
   12c8e:	0018      	movs	r0, r3
   12c90:	4b66      	ldr	r3, [pc, #408]	; (12e2c <gsm_read_sms+0x1f0>)
   12c92:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12c94:	2310      	movs	r3, #16
   12c96:	18fb      	adds	r3, r7, r3
   12c98:	0018      	movs	r0, r3
   12c9a:	230a      	movs	r3, #10
   12c9c:	001a      	movs	r2, r3
   12c9e:	2100      	movs	r1, #0
   12ca0:	4b62      	ldr	r3, [pc, #392]	; (12e2c <gsm_read_sms+0x1f0>)
   12ca2:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12ca4:	232f      	movs	r3, #47	; 0x2f
   12ca6:	18fb      	adds	r3, r7, r3
   12ca8:	7819      	ldrb	r1, [r3, #0]
   12caa:	230f      	movs	r3, #15
   12cac:	18fb      	adds	r3, r7, r3
   12cae:	781b      	ldrb	r3, [r3, #0]
   12cb0:	4a5f      	ldr	r2, [pc, #380]	; (12e30 <gsm_read_sms+0x1f4>)
   12cb2:	2010      	movs	r0, #16
   12cb4:	1838      	adds	r0, r7, r0
   12cb6:	4c5f      	ldr	r4, [pc, #380]	; (12e34 <gsm_read_sms+0x1f8>)
   12cb8:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12cba:	232f      	movs	r3, #47	; 0x2f
   12cbc:	18fb      	adds	r3, r7, r3
   12cbe:	781a      	ldrb	r2, [r3, #0]
   12cc0:	4c5d      	ldr	r4, [pc, #372]	; (12e38 <gsm_read_sms+0x1fc>)
   12cc2:	495e      	ldr	r1, [pc, #376]	; (12e3c <gsm_read_sms+0x200>)
   12cc4:	2310      	movs	r3, #16
   12cc6:	18f8      	adds	r0, r7, r3
   12cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cca:	9300      	str	r3, [sp, #0]
   12ccc:	0013      	movs	r3, r2
   12cce:	0022      	movs	r2, r4
   12cd0:	4c5b      	ldr	r4, [pc, #364]	; (12e40 <gsm_read_sms+0x204>)
   12cd2:	47a0      	blx	r4
   12cd4:	1e03      	subs	r3, r0, #0
   12cd6:	d000      	beq.n	12cda <gsm_read_sms+0x9e>
   12cd8:	e094      	b.n	12e04 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12cda:	4a5a      	ldr	r2, [pc, #360]	; (12e44 <gsm_read_sms+0x208>)
   12cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cde:	0011      	movs	r1, r2
   12ce0:	0018      	movs	r0, r3
   12ce2:	4b59      	ldr	r3, [pc, #356]	; (12e48 <gsm_read_sms+0x20c>)
   12ce4:	4798      	blx	r3
   12ce6:	0003      	movs	r3, r0
   12ce8:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cec:	2b00      	cmp	r3, #0
   12cee:	d100      	bne.n	12cf2 <gsm_read_sms+0xb6>
   12cf0:	e082      	b.n	12df8 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cf4:	212c      	movs	r1, #44	; 0x2c
   12cf6:	0018      	movs	r0, r3
   12cf8:	4b54      	ldr	r3, [pc, #336]	; (12e4c <gsm_read_sms+0x210>)
   12cfa:	4798      	blx	r3
   12cfc:	0003      	movs	r3, r0
   12cfe:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12d00:	6a3b      	ldr	r3, [r7, #32]
   12d02:	3302      	adds	r3, #2
   12d04:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12d06:	69fb      	ldr	r3, [r7, #28]
   12d08:	2122      	movs	r1, #34	; 0x22
   12d0a:	0018      	movs	r0, r3
   12d0c:	4b4f      	ldr	r3, [pc, #316]	; (12e4c <gsm_read_sms+0x210>)
   12d0e:	4798      	blx	r3
   12d10:	0003      	movs	r3, r0
   12d12:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12d14:	6a3b      	ldr	r3, [r7, #32]
   12d16:	2b00      	cmp	r3, #0
   12d18:	d02a      	beq.n	12d70 <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12d1a:	6a3b      	ldr	r3, [r7, #32]
   12d1c:	2200      	movs	r2, #0
   12d1e:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12d20:	69fb      	ldr	r3, [r7, #28]
   12d22:	0018      	movs	r0, r3
   12d24:	4b4a      	ldr	r3, [pc, #296]	; (12e50 <gsm_read_sms+0x214>)
   12d26:	4798      	blx	r3
   12d28:	0002      	movs	r2, r0
   12d2a:	231b      	movs	r3, #27
   12d2c:	18fb      	adds	r3, r7, r3
   12d2e:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12d30:	231b      	movs	r3, #27
   12d32:	18fa      	adds	r2, r7, r3
   12d34:	230e      	movs	r3, #14
   12d36:	18fb      	adds	r3, r7, r3
   12d38:	7812      	ldrb	r2, [r2, #0]
   12d3a:	781b      	ldrb	r3, [r3, #0]
   12d3c:	429a      	cmp	r2, r3
   12d3e:	d206      	bcs.n	12d4e <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12d40:	69fa      	ldr	r2, [r7, #28]
   12d42:	68bb      	ldr	r3, [r7, #8]
   12d44:	0011      	movs	r1, r2
   12d46:	0018      	movs	r0, r3
   12d48:	4b42      	ldr	r3, [pc, #264]	; (12e54 <gsm_read_sms+0x218>)
   12d4a:	4798      	blx	r3
   12d4c:	e010      	b.n	12d70 <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12d4e:	230e      	movs	r3, #14
   12d50:	18fb      	adds	r3, r7, r3
   12d52:	781b      	ldrb	r3, [r3, #0]
   12d54:	3b01      	subs	r3, #1
   12d56:	001a      	movs	r2, r3
   12d58:	69f9      	ldr	r1, [r7, #28]
   12d5a:	68bb      	ldr	r3, [r7, #8]
   12d5c:	0018      	movs	r0, r3
   12d5e:	4b3e      	ldr	r3, [pc, #248]	; (12e58 <gsm_read_sms+0x21c>)
   12d60:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12d62:	230e      	movs	r3, #14
   12d64:	18fb      	adds	r3, r7, r3
   12d66:	781b      	ldrb	r3, [r3, #0]
   12d68:	68ba      	ldr	r2, [r7, #8]
   12d6a:	18d3      	adds	r3, r2, r3
   12d6c:	2200      	movs	r2, #0
   12d6e:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12d70:	6a3b      	ldr	r3, [r7, #32]
   12d72:	3301      	adds	r3, #1
   12d74:	210a      	movs	r1, #10
   12d76:	0018      	movs	r0, r3
   12d78:	4b34      	ldr	r3, [pc, #208]	; (12e4c <gsm_read_sms+0x210>)
   12d7a:	4798      	blx	r3
   12d7c:	0003      	movs	r3, r0
   12d7e:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12d80:	6a3b      	ldr	r3, [r7, #32]
   12d82:	2b00      	cmp	r3, #0
   12d84:	d044      	beq.n	12e10 <gsm_read_sms+0x1d4>
			{
				p_char++;
   12d86:	6a3b      	ldr	r3, [r7, #32]
   12d88:	3301      	adds	r3, #1
   12d8a:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12d8c:	6a3b      	ldr	r3, [r7, #32]
   12d8e:	210d      	movs	r1, #13
   12d90:	0018      	movs	r0, r3
   12d92:	4b2e      	ldr	r3, [pc, #184]	; (12e4c <gsm_read_sms+0x210>)
   12d94:	4798      	blx	r3
   12d96:	0003      	movs	r3, r0
   12d98:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12d9a:	69fb      	ldr	r3, [r7, #28]
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	d002      	beq.n	12da6 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12da0:	69fb      	ldr	r3, [r7, #28]
   12da2:	2200      	movs	r2, #0
   12da4:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12da6:	6a3b      	ldr	r3, [r7, #32]
   12da8:	0018      	movs	r0, r3
   12daa:	4b29      	ldr	r3, [pc, #164]	; (12e50 <gsm_read_sms+0x214>)
   12dac:	4798      	blx	r3
   12dae:	0002      	movs	r2, r0
   12db0:	231b      	movs	r3, #27
   12db2:	18fb      	adds	r3, r7, r3
   12db4:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12db6:	231b      	movs	r3, #27
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	2240      	movs	r2, #64	; 0x40
   12dbc:	18b9      	adds	r1, r7, r2
   12dbe:	781a      	ldrb	r2, [r3, #0]
   12dc0:	780b      	ldrb	r3, [r1, #0]
   12dc2:	429a      	cmp	r2, r3
   12dc4:	d206      	bcs.n	12dd4 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12dc6:	6a3a      	ldr	r2, [r7, #32]
   12dc8:	687b      	ldr	r3, [r7, #4]
   12dca:	0011      	movs	r1, r2
   12dcc:	0018      	movs	r0, r3
   12dce:	4b21      	ldr	r3, [pc, #132]	; (12e54 <gsm_read_sms+0x218>)
   12dd0:	4798      	blx	r3
   12dd2:	e01d      	b.n	12e10 <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12dd4:	2340      	movs	r3, #64	; 0x40
   12dd6:	18fb      	adds	r3, r7, r3
   12dd8:	781b      	ldrb	r3, [r3, #0]
   12dda:	3b01      	subs	r3, #1
   12ddc:	001a      	movs	r2, r3
   12dde:	6a39      	ldr	r1, [r7, #32]
   12de0:	687b      	ldr	r3, [r7, #4]
   12de2:	0018      	movs	r0, r3
   12de4:	4b1c      	ldr	r3, [pc, #112]	; (12e58 <gsm_read_sms+0x21c>)
   12de6:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12de8:	2340      	movs	r3, #64	; 0x40
   12dea:	18fb      	adds	r3, r7, r3
   12dec:	781b      	ldrb	r3, [r3, #0]
   12dee:	687a      	ldr	r2, [r7, #4]
   12df0:	18d3      	adds	r3, r2, r3
   12df2:	2200      	movs	r2, #0
   12df4:	701a      	strb	r2, [r3, #0]
   12df6:	e00b      	b.n	12e10 <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12dfa:	0018      	movs	r0, r3
   12dfc:	4b0a      	ldr	r3, [pc, #40]	; (12e28 <gsm_read_sms+0x1ec>)
   12dfe:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e00:	230c      	movs	r3, #12
   12e02:	e00a      	b.n	12e1a <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e06:	0018      	movs	r0, r3
   12e08:	4b07      	ldr	r3, [pc, #28]	; (12e28 <gsm_read_sms+0x1ec>)
   12e0a:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e0c:	230c      	movs	r3, #12
   12e0e:	e004      	b.n	12e1a <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e12:	0018      	movs	r0, r3
   12e14:	4b04      	ldr	r3, [pc, #16]	; (12e28 <gsm_read_sms+0x1ec>)
   12e16:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12e18:	2300      	movs	r3, #0
}
   12e1a:	0018      	movs	r0, r3
   12e1c:	46bd      	mov	sp, r7
   12e1e:	b00d      	add	sp, #52	; 0x34
   12e20:	bd90      	pop	{r4, r7, pc}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	00028d85 	.word	0x00028d85
   12e28:	00028e25 	.word	0x00028e25
   12e2c:	00028e93 	.word	0x00028e93
   12e30:	00029d50 	.word	0x00029d50
   12e34:	00029035 	.word	0x00029035
   12e38:	00001388 	.word	0x00001388
   12e3c:	00029b48 	.word	0x00029b48
   12e40:	000123d5 	.word	0x000123d5
   12e44:	00029d5c 	.word	0x00029d5c
   12e48:	00029153 	.word	0x00029153
   12e4c:	000290f7 	.word	0x000290f7
   12e50:	00029123 	.word	0x00029123
   12e54:	00029113 	.word	0x00029113
   12e58:	00028e5d 	.word	0x00028e5d

00012e5c <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12e5c:	b5b0      	push	{r4, r5, r7, lr}
   12e5e:	b088      	sub	sp, #32
   12e60:	af02      	add	r7, sp, #8
   12e62:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12e64:	2317      	movs	r3, #23
   12e66:	18fb      	adds	r3, r7, r3
   12e68:	221e      	movs	r2, #30
   12e6a:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12e6c:	2317      	movs	r3, #23
   12e6e:	18fb      	adds	r3, r7, r3
   12e70:	781b      	ldrb	r3, [r3, #0]
   12e72:	2101      	movs	r1, #1
   12e74:	0018      	movs	r0, r3
   12e76:	4b18      	ldr	r3, [pc, #96]	; (12ed8 <gsm_call_to_dial_a_number+0x7c>)
   12e78:	4798      	blx	r3
   12e7a:	0003      	movs	r3, r0
   12e7c:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12e7e:	693b      	ldr	r3, [r7, #16]
   12e80:	2b00      	cmp	r3, #0
   12e82:	d101      	bne.n	12e88 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12e84:	2300      	movs	r3, #0
   12e86:	e023      	b.n	12ed0 <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12e88:	2317      	movs	r3, #23
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	781a      	ldrb	r2, [r3, #0]
   12e8e:	693b      	ldr	r3, [r7, #16]
   12e90:	2100      	movs	r1, #0
   12e92:	0018      	movs	r0, r3
   12e94:	4b11      	ldr	r3, [pc, #68]	; (12edc <gsm_call_to_dial_a_number+0x80>)
   12e96:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12e98:	2317      	movs	r3, #23
   12e9a:	18fb      	adds	r3, r7, r3
   12e9c:	7819      	ldrb	r1, [r3, #0]
   12e9e:	687b      	ldr	r3, [r7, #4]
   12ea0:	4a0f      	ldr	r2, [pc, #60]	; (12ee0 <gsm_call_to_dial_a_number+0x84>)
   12ea2:	6938      	ldr	r0, [r7, #16]
   12ea4:	4c0f      	ldr	r4, [pc, #60]	; (12ee4 <gsm_call_to_dial_a_number+0x88>)
   12ea6:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12ea8:	230f      	movs	r3, #15
   12eaa:	18fc      	adds	r4, r7, r3
   12eac:	23fa      	movs	r3, #250	; 0xfa
   12eae:	00da      	lsls	r2, r3, #3
   12eb0:	490d      	ldr	r1, [pc, #52]	; (12ee8 <gsm_call_to_dial_a_number+0x8c>)
   12eb2:	6938      	ldr	r0, [r7, #16]
   12eb4:	2300      	movs	r3, #0
   12eb6:	9300      	str	r3, [sp, #0]
   12eb8:	2300      	movs	r3, #0
   12eba:	4d0c      	ldr	r5, [pc, #48]	; (12eec <gsm_call_to_dial_a_number+0x90>)
   12ebc:	47a8      	blx	r5
   12ebe:	0003      	movs	r3, r0
   12ec0:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12ec2:	693b      	ldr	r3, [r7, #16]
   12ec4:	0018      	movs	r0, r3
   12ec6:	4b0a      	ldr	r3, [pc, #40]	; (12ef0 <gsm_call_to_dial_a_number+0x94>)
   12ec8:	4798      	blx	r3
	return err;
   12eca:	230f      	movs	r3, #15
   12ecc:	18fb      	adds	r3, r7, r3
   12ece:	781b      	ldrb	r3, [r3, #0]
	
}
   12ed0:	0018      	movs	r0, r3
   12ed2:	46bd      	mov	sp, r7
   12ed4:	b006      	add	sp, #24
   12ed6:	bdb0      	pop	{r4, r5, r7, pc}
   12ed8:	00028d85 	.word	0x00028d85
   12edc:	00028e93 	.word	0x00028e93
   12ee0:	00029d64 	.word	0x00029d64
   12ee4:	00029035 	.word	0x00029035
   12ee8:	00029b48 	.word	0x00029b48
   12eec:	000123d5 	.word	0x000123d5
   12ef0:	00028e25 	.word	0x00028e25

00012ef4 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12ef4:	b590      	push	{r4, r7, lr}
   12ef6:	b083      	sub	sp, #12
   12ef8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12efa:	4a06      	ldr	r2, [pc, #24]	; (12f14 <gsm_answer_an_incomming_call+0x20>)
   12efc:	4906      	ldr	r1, [pc, #24]	; (12f18 <gsm_answer_an_incomming_call+0x24>)
   12efe:	4807      	ldr	r0, [pc, #28]	; (12f1c <gsm_answer_an_incomming_call+0x28>)
   12f00:	2300      	movs	r3, #0
   12f02:	9300      	str	r3, [sp, #0]
   12f04:	2300      	movs	r3, #0
   12f06:	4c06      	ldr	r4, [pc, #24]	; (12f20 <gsm_answer_an_incomming_call+0x2c>)
   12f08:	47a0      	blx	r4
   12f0a:	0003      	movs	r3, r0
}
   12f0c:	0018      	movs	r0, r3
   12f0e:	46bd      	mov	sp, r7
   12f10:	b001      	add	sp, #4
   12f12:	bd90      	pop	{r4, r7, pc}
   12f14:	00001388 	.word	0x00001388
   12f18:	00029b48 	.word	0x00029b48
   12f1c:	00029d6c 	.word	0x00029d6c
   12f20:	000123d5 	.word	0x000123d5

00012f24 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12f24:	b590      	push	{r4, r7, lr}
   12f26:	b083      	sub	sp, #12
   12f28:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12f2a:	4a06      	ldr	r2, [pc, #24]	; (12f44 <gsm_enable_network_time_update+0x20>)
   12f2c:	4906      	ldr	r1, [pc, #24]	; (12f48 <gsm_enable_network_time_update+0x24>)
   12f2e:	4807      	ldr	r0, [pc, #28]	; (12f4c <gsm_enable_network_time_update+0x28>)
   12f30:	2300      	movs	r3, #0
   12f32:	9300      	str	r3, [sp, #0]
   12f34:	2300      	movs	r3, #0
   12f36:	4c06      	ldr	r4, [pc, #24]	; (12f50 <gsm_enable_network_time_update+0x2c>)
   12f38:	47a0      	blx	r4
   12f3a:	0003      	movs	r3, r0
}
   12f3c:	0018      	movs	r0, r3
   12f3e:	46bd      	mov	sp, r7
   12f40:	b001      	add	sp, #4
   12f42:	bd90      	pop	{r4, r7, pc}
   12f44:	00002710 	.word	0x00002710
   12f48:	00029b48 	.word	0x00029b48
   12f4c:	00029d74 	.word	0x00029d74
   12f50:	000123d5 	.word	0x000123d5

00012f54 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12f54:	b590      	push	{r4, r7, lr}
   12f56:	b083      	sub	sp, #12
   12f58:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f5a:	4a06      	ldr	r2, [pc, #24]	; (12f74 <gsm_enable_DTMF_detection+0x20>)
   12f5c:	4906      	ldr	r1, [pc, #24]	; (12f78 <gsm_enable_DTMF_detection+0x24>)
   12f5e:	4807      	ldr	r0, [pc, #28]	; (12f7c <gsm_enable_DTMF_detection+0x28>)
   12f60:	2300      	movs	r3, #0
   12f62:	9300      	str	r3, [sp, #0]
   12f64:	2300      	movs	r3, #0
   12f66:	4c06      	ldr	r4, [pc, #24]	; (12f80 <gsm_enable_DTMF_detection+0x2c>)
   12f68:	47a0      	blx	r4
   12f6a:	0003      	movs	r3, r0
}
   12f6c:	0018      	movs	r0, r3
   12f6e:	46bd      	mov	sp, r7
   12f70:	b001      	add	sp, #4
   12f72:	bd90      	pop	{r4, r7, pc}
   12f74:	00001388 	.word	0x00001388
   12f78:	00029b48 	.word	0x00029b48
   12f7c:	00029d8c 	.word	0x00029d8c
   12f80:	000123d5 	.word	0x000123d5

00012f84 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   12f84:	b5b0      	push	{r4, r5, r7, lr}
   12f86:	b088      	sub	sp, #32
   12f88:	af02      	add	r7, sp, #8
   12f8a:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12f8c:	2317      	movs	r3, #23
   12f8e:	18fb      	adds	r3, r7, r3
   12f90:	221e      	movs	r2, #30
   12f92:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12f94:	2317      	movs	r3, #23
   12f96:	18fb      	adds	r3, r7, r3
   12f98:	781b      	ldrb	r3, [r3, #0]
   12f9a:	2101      	movs	r1, #1
   12f9c:	0018      	movs	r0, r3
   12f9e:	4b18      	ldr	r3, [pc, #96]	; (13000 <gsm_send_DTMF_Tone+0x7c>)
   12fa0:	4798      	blx	r3
   12fa2:	0003      	movs	r3, r0
   12fa4:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12fa6:	693b      	ldr	r3, [r7, #16]
   12fa8:	2b00      	cmp	r3, #0
   12faa:	d101      	bne.n	12fb0 <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   12fac:	2300      	movs	r3, #0
   12fae:	e022      	b.n	12ff6 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12fb0:	2317      	movs	r3, #23
   12fb2:	18fb      	adds	r3, r7, r3
   12fb4:	781a      	ldrb	r2, [r3, #0]
   12fb6:	693b      	ldr	r3, [r7, #16]
   12fb8:	2100      	movs	r1, #0
   12fba:	0018      	movs	r0, r3
   12fbc:	4b11      	ldr	r3, [pc, #68]	; (13004 <gsm_send_DTMF_Tone+0x80>)
   12fbe:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   12fc0:	2317      	movs	r3, #23
   12fc2:	18fb      	adds	r3, r7, r3
   12fc4:	7819      	ldrb	r1, [r3, #0]
   12fc6:	687b      	ldr	r3, [r7, #4]
   12fc8:	4a0f      	ldr	r2, [pc, #60]	; (13008 <gsm_send_DTMF_Tone+0x84>)
   12fca:	6938      	ldr	r0, [r7, #16]
   12fcc:	4c0f      	ldr	r4, [pc, #60]	; (1300c <gsm_send_DTMF_Tone+0x88>)
   12fce:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   12fd0:	230f      	movs	r3, #15
   12fd2:	18fc      	adds	r4, r7, r3
   12fd4:	4a0e      	ldr	r2, [pc, #56]	; (13010 <gsm_send_DTMF_Tone+0x8c>)
   12fd6:	490f      	ldr	r1, [pc, #60]	; (13014 <gsm_send_DTMF_Tone+0x90>)
   12fd8:	6938      	ldr	r0, [r7, #16]
   12fda:	2300      	movs	r3, #0
   12fdc:	9300      	str	r3, [sp, #0]
   12fde:	2300      	movs	r3, #0
   12fe0:	4d0d      	ldr	r5, [pc, #52]	; (13018 <gsm_send_DTMF_Tone+0x94>)
   12fe2:	47a8      	blx	r5
   12fe4:	0003      	movs	r3, r0
   12fe6:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12fe8:	693b      	ldr	r3, [r7, #16]
   12fea:	0018      	movs	r0, r3
   12fec:	4b0b      	ldr	r3, [pc, #44]	; (1301c <gsm_send_DTMF_Tone+0x98>)
   12fee:	4798      	blx	r3
	return err;
   12ff0:	230f      	movs	r3, #15
   12ff2:	18fb      	adds	r3, r7, r3
   12ff4:	781b      	ldrb	r3, [r3, #0]
}
   12ff6:	0018      	movs	r0, r3
   12ff8:	46bd      	mov	sp, r7
   12ffa:	b006      	add	sp, #24
   12ffc:	bdb0      	pop	{r4, r5, r7, pc}
   12ffe:	46c0      	nop			; (mov r8, r8)
   13000:	00028d85 	.word	0x00028d85
   13004:	00028e93 	.word	0x00028e93
   13008:	00029d98 	.word	0x00029d98
   1300c:	00029035 	.word	0x00029035
   13010:	00001388 	.word	0x00001388
   13014:	00029b48 	.word	0x00029b48
   13018:	000123d5 	.word	0x000123d5
   1301c:	00028e25 	.word	0x00028e25

00013020 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   13020:	b590      	push	{r4, r7, lr}
   13022:	b083      	sub	sp, #12
   13024:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   13026:	4a06      	ldr	r2, [pc, #24]	; (13040 <gsm_hangup_call+0x20>)
   13028:	4906      	ldr	r1, [pc, #24]	; (13044 <gsm_hangup_call+0x24>)
   1302a:	4807      	ldr	r0, [pc, #28]	; (13048 <gsm_hangup_call+0x28>)
   1302c:	2300      	movs	r3, #0
   1302e:	9300      	str	r3, [sp, #0]
   13030:	2300      	movs	r3, #0
   13032:	4c06      	ldr	r4, [pc, #24]	; (1304c <gsm_hangup_call+0x2c>)
   13034:	47a0      	blx	r4
   13036:	0003      	movs	r3, r0
}
   13038:	0018      	movs	r0, r3
   1303a:	46bd      	mov	sp, r7
   1303c:	b001      	add	sp, #4
   1303e:	bd90      	pop	{r4, r7, pc}
   13040:	00001388 	.word	0x00001388
   13044:	00029b48 	.word	0x00029b48
   13048:	00029da8 	.word	0x00029da8
   1304c:	000123d5 	.word	0x000123d5

00013050 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   13050:	b590      	push	{r4, r7, lr}
   13052:	b083      	sub	sp, #12
   13054:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   13056:	4a06      	ldr	r2, [pc, #24]	; (13070 <gsm_disable_call_waiting+0x20>)
   13058:	4906      	ldr	r1, [pc, #24]	; (13074 <gsm_disable_call_waiting+0x24>)
   1305a:	4807      	ldr	r0, [pc, #28]	; (13078 <gsm_disable_call_waiting+0x28>)
   1305c:	2300      	movs	r3, #0
   1305e:	9300      	str	r3, [sp, #0]
   13060:	2300      	movs	r3, #0
   13062:	4c06      	ldr	r4, [pc, #24]	; (1307c <gsm_disable_call_waiting+0x2c>)
   13064:	47a0      	blx	r4
   13066:	0003      	movs	r3, r0
}
   13068:	0018      	movs	r0, r3
   1306a:	46bd      	mov	sp, r7
   1306c:	b001      	add	sp, #4
   1306e:	bd90      	pop	{r4, r7, pc}
   13070:	00004650 	.word	0x00004650
   13074:	00029b48 	.word	0x00029b48
   13078:	00029db4 	.word	0x00029db4
   1307c:	000123d5 	.word	0x000123d5

00013080 <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   13080:	b590      	push	{r4, r7, lr}
   13082:	b083      	sub	sp, #12
   13084:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
   13086:	23fa      	movs	r3, #250	; 0xfa
   13088:	00da      	lsls	r2, r3, #3
   1308a:	4906      	ldr	r1, [pc, #24]	; (130a4 <gsm_stop_play_record_file+0x24>)
   1308c:	4806      	ldr	r0, [pc, #24]	; (130a8 <gsm_stop_play_record_file+0x28>)
   1308e:	2300      	movs	r3, #0
   13090:	9300      	str	r3, [sp, #0]
   13092:	2300      	movs	r3, #0
   13094:	4c05      	ldr	r4, [pc, #20]	; (130ac <gsm_stop_play_record_file+0x2c>)
   13096:	47a0      	blx	r4
   13098:	0003      	movs	r3, r0
}
   1309a:	0018      	movs	r0, r3
   1309c:	46bd      	mov	sp, r7
   1309e:	b001      	add	sp, #4
   130a0:	bd90      	pop	{r4, r7, pc}
   130a2:	46c0      	nop			; (mov r8, r8)
   130a4:	00029b48 	.word	0x00029b48
   130a8:	00029de4 	.word	0x00029de4
   130ac:	000123d5 	.word	0x000123d5

000130b0 <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   130b0:	b590      	push	{r4, r7, lr}
   130b2:	b087      	sub	sp, #28
   130b4:	af02      	add	r7, sp, #8
   130b6:	6078      	str	r0, [r7, #4]
   130b8:	000a      	movs	r2, r1
   130ba:	1cfb      	adds	r3, r7, #3
   130bc:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   130be:	230f      	movs	r3, #15
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	2200      	movs	r2, #0
   130c4:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   130c6:	1cfb      	adds	r3, r7, #3
   130c8:	781b      	ldrb	r3, [r3, #0]
   130ca:	2b00      	cmp	r3, #0
   130cc:	d003      	beq.n	130d6 <gsm_play_record_file+0x26>
	{
		repeat = 1;
   130ce:	230f      	movs	r3, #15
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	2201      	movs	r2, #1
   130d4:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   130d6:	230e      	movs	r3, #14
   130d8:	18fb      	adds	r3, r7, r3
   130da:	2232      	movs	r2, #50	; 0x32
   130dc:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   130de:	230e      	movs	r3, #14
   130e0:	18fb      	adds	r3, r7, r3
   130e2:	781b      	ldrb	r3, [r3, #0]
   130e4:	2101      	movs	r1, #1
   130e6:	0018      	movs	r0, r3
   130e8:	4b17      	ldr	r3, [pc, #92]	; (13148 <gsm_play_record_file+0x98>)
   130ea:	4798      	blx	r3
   130ec:	0003      	movs	r3, r0
   130ee:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   130f0:	68bb      	ldr	r3, [r7, #8]
   130f2:	2b00      	cmp	r3, #0
   130f4:	d101      	bne.n	130fa <gsm_play_record_file+0x4a>
	{
		return 0;
   130f6:	2300      	movs	r3, #0
   130f8:	e022      	b.n	13140 <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   130fa:	230e      	movs	r3, #14
   130fc:	18fb      	adds	r3, r7, r3
   130fe:	781a      	ldrb	r2, [r3, #0]
   13100:	68bb      	ldr	r3, [r7, #8]
   13102:	2100      	movs	r1, #0
   13104:	0018      	movs	r0, r3
   13106:	4b11      	ldr	r3, [pc, #68]	; (1314c <gsm_play_record_file+0x9c>)
   13108:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   1310a:	230e      	movs	r3, #14
   1310c:	18fb      	adds	r3, r7, r3
   1310e:	7819      	ldrb	r1, [r3, #0]
   13110:	230f      	movs	r3, #15
   13112:	18fb      	adds	r3, r7, r3
   13114:	781b      	ldrb	r3, [r3, #0]
   13116:	687c      	ldr	r4, [r7, #4]
   13118:	4a0d      	ldr	r2, [pc, #52]	; (13150 <gsm_play_record_file+0xa0>)
   1311a:	68b8      	ldr	r0, [r7, #8]
   1311c:	9300      	str	r3, [sp, #0]
   1311e:	0023      	movs	r3, r4
   13120:	4c0c      	ldr	r4, [pc, #48]	; (13154 <gsm_play_record_file+0xa4>)
   13122:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   13124:	23fa      	movs	r3, #250	; 0xfa
   13126:	00da      	lsls	r2, r3, #3
   13128:	490b      	ldr	r1, [pc, #44]	; (13158 <gsm_play_record_file+0xa8>)
   1312a:	68b8      	ldr	r0, [r7, #8]
   1312c:	2300      	movs	r3, #0
   1312e:	9300      	str	r3, [sp, #0]
   13130:	2300      	movs	r3, #0
   13132:	4c0a      	ldr	r4, [pc, #40]	; (1315c <gsm_play_record_file+0xac>)
   13134:	47a0      	blx	r4
	free(cmdx);
   13136:	68bb      	ldr	r3, [r7, #8]
   13138:	0018      	movs	r0, r3
   1313a:	4b09      	ldr	r3, [pc, #36]	; (13160 <gsm_play_record_file+0xb0>)
   1313c:	4798      	blx	r3
	return GSM_ERROR_NONE;
   1313e:	2300      	movs	r3, #0
	
}
   13140:	0018      	movs	r0, r3
   13142:	46bd      	mov	sp, r7
   13144:	b005      	add	sp, #20
   13146:	bd90      	pop	{r4, r7, pc}
   13148:	00028d85 	.word	0x00028d85
   1314c:	00028e93 	.word	0x00028e93
   13150:	00029df0 	.word	0x00029df0
   13154:	00029035 	.word	0x00029035
   13158:	00029b48 	.word	0x00029b48
   1315c:	000123d5 	.word	0x000123d5
   13160:	00028e25 	.word	0x00028e25

00013164 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   13164:	b5b0      	push	{r4, r5, r7, lr}
   13166:	b086      	sub	sp, #24
   13168:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   1316a:	230f      	movs	r3, #15
   1316c:	18fb      	adds	r3, r7, r3
   1316e:	2246      	movs	r2, #70	; 0x46
   13170:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13172:	230f      	movs	r3, #15
   13174:	18fb      	adds	r3, r7, r3
   13176:	781b      	ldrb	r3, [r3, #0]
   13178:	2101      	movs	r1, #1
   1317a:	0018      	movs	r0, r3
   1317c:	4b57      	ldr	r3, [pc, #348]	; (132dc <gsm_get_internal_rtc_time+0x178>)
   1317e:	4798      	blx	r3
   13180:	0003      	movs	r3, r0
   13182:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   13184:	68bb      	ldr	r3, [r7, #8]
   13186:	2b00      	cmp	r3, #0
   13188:	d105      	bne.n	13196 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   1318a:	68bb      	ldr	r3, [r7, #8]
   1318c:	0018      	movs	r0, r3
   1318e:	4b54      	ldr	r3, [pc, #336]	; (132e0 <gsm_get_internal_rtc_time+0x17c>)
   13190:	4798      	blx	r3
		return 0;
   13192:	2300      	movs	r3, #0
   13194:	e09d      	b.n	132d2 <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13196:	230f      	movs	r3, #15
   13198:	18fb      	adds	r3, r7, r3
   1319a:	781a      	ldrb	r2, [r3, #0]
   1319c:	68bb      	ldr	r3, [r7, #8]
   1319e:	2100      	movs	r1, #0
   131a0:	0018      	movs	r0, r3
   131a2:	4b50      	ldr	r3, [pc, #320]	; (132e4 <gsm_get_internal_rtc_time+0x180>)
   131a4:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   131a6:	1dfc      	adds	r4, r7, #7
   131a8:	230f      	movs	r3, #15
   131aa:	18fb      	adds	r3, r7, r3
   131ac:	781a      	ldrb	r2, [r3, #0]
   131ae:	4d4e      	ldr	r5, [pc, #312]	; (132e8 <gsm_get_internal_rtc_time+0x184>)
   131b0:	494e      	ldr	r1, [pc, #312]	; (132ec <gsm_get_internal_rtc_time+0x188>)
   131b2:	484f      	ldr	r0, [pc, #316]	; (132f0 <gsm_get_internal_rtc_time+0x18c>)
   131b4:	68bb      	ldr	r3, [r7, #8]
   131b6:	9300      	str	r3, [sp, #0]
   131b8:	0013      	movs	r3, r2
   131ba:	002a      	movs	r2, r5
   131bc:	4d4d      	ldr	r5, [pc, #308]	; (132f4 <gsm_get_internal_rtc_time+0x190>)
   131be:	47a8      	blx	r5
   131c0:	0003      	movs	r3, r0
   131c2:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   131c4:	1dfb      	adds	r3, r7, #7
   131c6:	781b      	ldrb	r3, [r3, #0]
   131c8:	2b00      	cmp	r3, #0
   131ca:	d16a      	bne.n	132a2 <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   131cc:	4a4a      	ldr	r2, [pc, #296]	; (132f8 <gsm_get_internal_rtc_time+0x194>)
   131ce:	68bb      	ldr	r3, [r7, #8]
   131d0:	0011      	movs	r1, r2
   131d2:	0018      	movs	r0, r3
   131d4:	4b49      	ldr	r3, [pc, #292]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   131d6:	4798      	blx	r3
   131d8:	0003      	movs	r3, r0
   131da:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   131dc:	4b46      	ldr	r3, [pc, #280]	; (132f8 <gsm_get_internal_rtc_time+0x194>)
   131de:	0019      	movs	r1, r3
   131e0:	2000      	movs	r0, #0
   131e2:	4b46      	ldr	r3, [pc, #280]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   131e4:	4798      	blx	r3
   131e6:	0003      	movs	r3, r0
   131e8:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   131ea:	4a45      	ldr	r2, [pc, #276]	; (13300 <gsm_get_internal_rtc_time+0x19c>)
   131ec:	683b      	ldr	r3, [r7, #0]
   131ee:	0011      	movs	r1, r2
   131f0:	0018      	movs	r0, r3
   131f2:	4b42      	ldr	r3, [pc, #264]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   131f4:	4798      	blx	r3
   131f6:	0003      	movs	r3, r0
   131f8:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   131fa:	683b      	ldr	r3, [r7, #0]
   131fc:	0018      	movs	r0, r3
   131fe:	4b41      	ldr	r3, [pc, #260]	; (13304 <gsm_get_internal_rtc_time+0x1a0>)
   13200:	4798      	blx	r3
   13202:	0003      	movs	r3, r0
   13204:	b2da      	uxtb	r2, r3
   13206:	4b40      	ldr	r3, [pc, #256]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   13208:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   1320a:	4b3d      	ldr	r3, [pc, #244]	; (13300 <gsm_get_internal_rtc_time+0x19c>)
   1320c:	0019      	movs	r1, r3
   1320e:	2000      	movs	r0, #0
   13210:	4b3a      	ldr	r3, [pc, #232]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   13212:	4798      	blx	r3
   13214:	0003      	movs	r3, r0
   13216:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   13218:	683b      	ldr	r3, [r7, #0]
   1321a:	0018      	movs	r0, r3
   1321c:	4b39      	ldr	r3, [pc, #228]	; (13304 <gsm_get_internal_rtc_time+0x1a0>)
   1321e:	4798      	blx	r3
   13220:	0003      	movs	r3, r0
   13222:	b2da      	uxtb	r2, r3
   13224:	4b38      	ldr	r3, [pc, #224]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   13226:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   13228:	4b38      	ldr	r3, [pc, #224]	; (1330c <gsm_get_internal_rtc_time+0x1a8>)
   1322a:	0019      	movs	r1, r3
   1322c:	2000      	movs	r0, #0
   1322e:	4b33      	ldr	r3, [pc, #204]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   13230:	4798      	blx	r3
   13232:	0003      	movs	r3, r0
   13234:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   13236:	683b      	ldr	r3, [r7, #0]
   13238:	0018      	movs	r0, r3
   1323a:	4b32      	ldr	r3, [pc, #200]	; (13304 <gsm_get_internal_rtc_time+0x1a0>)
   1323c:	4798      	blx	r3
   1323e:	0003      	movs	r3, r0
   13240:	b2da      	uxtb	r2, r3
   13242:	4b31      	ldr	r3, [pc, #196]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   13244:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   13246:	4b32      	ldr	r3, [pc, #200]	; (13310 <gsm_get_internal_rtc_time+0x1ac>)
   13248:	0019      	movs	r1, r3
   1324a:	2000      	movs	r0, #0
   1324c:	4b2b      	ldr	r3, [pc, #172]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   1324e:	4798      	blx	r3
   13250:	0003      	movs	r3, r0
   13252:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   13254:	683b      	ldr	r3, [r7, #0]
   13256:	0018      	movs	r0, r3
   13258:	4b2a      	ldr	r3, [pc, #168]	; (13304 <gsm_get_internal_rtc_time+0x1a0>)
   1325a:	4798      	blx	r3
   1325c:	0003      	movs	r3, r0
   1325e:	b2da      	uxtb	r2, r3
   13260:	4b29      	ldr	r3, [pc, #164]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   13262:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   13264:	4b2a      	ldr	r3, [pc, #168]	; (13310 <gsm_get_internal_rtc_time+0x1ac>)
   13266:	0019      	movs	r1, r3
   13268:	2000      	movs	r0, #0
   1326a:	4b24      	ldr	r3, [pc, #144]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   1326c:	4798      	blx	r3
   1326e:	0003      	movs	r3, r0
   13270:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   13272:	683b      	ldr	r3, [r7, #0]
   13274:	0018      	movs	r0, r3
   13276:	4b23      	ldr	r3, [pc, #140]	; (13304 <gsm_get_internal_rtc_time+0x1a0>)
   13278:	4798      	blx	r3
   1327a:	0003      	movs	r3, r0
   1327c:	b2da      	uxtb	r2, r3
   1327e:	4b22      	ldr	r3, [pc, #136]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   13280:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   13282:	4b24      	ldr	r3, [pc, #144]	; (13314 <gsm_get_internal_rtc_time+0x1b0>)
   13284:	0019      	movs	r1, r3
   13286:	2000      	movs	r0, #0
   13288:	4b1c      	ldr	r3, [pc, #112]	; (132fc <gsm_get_internal_rtc_time+0x198>)
   1328a:	4798      	blx	r3
   1328c:	0003      	movs	r3, r0
   1328e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   13290:	683b      	ldr	r3, [r7, #0]
   13292:	0018      	movs	r0, r3
   13294:	4b1b      	ldr	r3, [pc, #108]	; (13304 <gsm_get_internal_rtc_time+0x1a0>)
   13296:	4798      	blx	r3
   13298:	0003      	movs	r3, r0
   1329a:	b2da      	uxtb	r2, r3
   1329c:	4b1a      	ldr	r3, [pc, #104]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   1329e:	715a      	strb	r2, [r3, #5]
   132a0:	e011      	b.n	132c6 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   132a2:	4b19      	ldr	r3, [pc, #100]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   132a4:	2200      	movs	r2, #0
   132a6:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   132a8:	4b17      	ldr	r3, [pc, #92]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   132aa:	2200      	movs	r2, #0
   132ac:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   132ae:	4b16      	ldr	r3, [pc, #88]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   132b0:	2200      	movs	r2, #0
   132b2:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   132b4:	4b14      	ldr	r3, [pc, #80]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   132b6:	2200      	movs	r2, #0
   132b8:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   132ba:	4b13      	ldr	r3, [pc, #76]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   132bc:	2200      	movs	r2, #0
   132be:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   132c0:	4b11      	ldr	r3, [pc, #68]	; (13308 <gsm_get_internal_rtc_time+0x1a4>)
   132c2:	2200      	movs	r2, #0
   132c4:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   132c6:	68bb      	ldr	r3, [r7, #8]
   132c8:	0018      	movs	r0, r3
   132ca:	4b05      	ldr	r3, [pc, #20]	; (132e0 <gsm_get_internal_rtc_time+0x17c>)
   132cc:	4798      	blx	r3
	return err;
   132ce:	1dfb      	adds	r3, r7, #7
   132d0:	781b      	ldrb	r3, [r3, #0]
}
   132d2:	0018      	movs	r0, r3
   132d4:	46bd      	mov	sp, r7
   132d6:	b004      	add	sp, #16
   132d8:	bdb0      	pop	{r4, r5, r7, pc}
   132da:	46c0      	nop			; (mov r8, r8)
   132dc:	00028d85 	.word	0x00028d85
   132e0:	00028e25 	.word	0x00028e25
   132e4:	00028e93 	.word	0x00028e93
   132e8:	00001388 	.word	0x00001388
   132ec:	00029b48 	.word	0x00029b48
   132f0:	00029e14 	.word	0x00029e14
   132f4:	000123d5 	.word	0x000123d5
   132f8:	00029e20 	.word	0x00029e20
   132fc:	00029185 	.word	0x00029185
   13300:	00029e24 	.word	0x00029e24
   13304:	00028d79 	.word	0x00028d79
   13308:	20000688 	.word	0x20000688
   1330c:	00029c64 	.word	0x00029c64
   13310:	00029c60 	.word	0x00029c60
   13314:	00029e28 	.word	0x00029e28

00013318 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   13318:	b580      	push	{r7, lr}
   1331a:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   1331c:	4b34      	ldr	r3, [pc, #208]	; (133f0 <gsm_config_module+0xd8>)
   1331e:	4798      	blx	r3
   13320:	1e03      	subs	r3, r0, #0
   13322:	d000      	beq.n	13326 <gsm_config_module+0xe>
   13324:	e05e      	b.n	133e4 <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   13326:	4b33      	ldr	r3, [pc, #204]	; (133f4 <gsm_config_module+0xdc>)
   13328:	4798      	blx	r3
   1332a:	1e03      	subs	r3, r0, #0
   1332c:	d000      	beq.n	13330 <gsm_config_module+0x18>
   1332e:	e057      	b.n	133e0 <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   13330:	23fa      	movs	r3, #250	; 0xfa
   13332:	00db      	lsls	r3, r3, #3
   13334:	0018      	movs	r0, r3
   13336:	4b30      	ldr	r3, [pc, #192]	; (133f8 <gsm_config_module+0xe0>)
   13338:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   1333a:	4b30      	ldr	r3, [pc, #192]	; (133fc <gsm_config_module+0xe4>)
   1333c:	4798      	blx	r3
   1333e:	1e03      	subs	r3, r0, #0
   13340:	d14c      	bne.n	133dc <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   13342:	4b2f      	ldr	r3, [pc, #188]	; (13400 <gsm_config_module+0xe8>)
   13344:	4798      	blx	r3
   13346:	1e03      	subs	r3, r0, #0
   13348:	d14e      	bne.n	133e8 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   1334a:	4b2e      	ldr	r3, [pc, #184]	; (13404 <gsm_config_module+0xec>)
   1334c:	4798      	blx	r3
   1334e:	1e03      	subs	r3, r0, #0
   13350:	d142      	bne.n	133d8 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   13352:	23fa      	movs	r3, #250	; 0xfa
   13354:	00db      	lsls	r3, r3, #3
   13356:	0018      	movs	r0, r3
   13358:	4b27      	ldr	r3, [pc, #156]	; (133f8 <gsm_config_module+0xe0>)
   1335a:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   1335c:	4b2a      	ldr	r3, [pc, #168]	; (13408 <gsm_config_module+0xf0>)
   1335e:	4798      	blx	r3
   13360:	1e03      	subs	r3, r0, #0
   13362:	d137      	bne.n	133d4 <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   13364:	4b29      	ldr	r3, [pc, #164]	; (1340c <gsm_config_module+0xf4>)
   13366:	4798      	blx	r3
   13368:	1e03      	subs	r3, r0, #0
   1336a:	d131      	bne.n	133d0 <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   1336c:	4b28      	ldr	r3, [pc, #160]	; (13410 <gsm_config_module+0xf8>)
   1336e:	4798      	blx	r3
   13370:	1e03      	subs	r3, r0, #0
   13372:	d12b      	bne.n	133cc <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   13374:	4b27      	ldr	r3, [pc, #156]	; (13414 <gsm_config_module+0xfc>)
   13376:	4798      	blx	r3
   13378:	1e03      	subs	r3, r0, #0
   1337a:	d125      	bne.n	133c8 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   1337c:	4b26      	ldr	r3, [pc, #152]	; (13418 <gsm_config_module+0x100>)
   1337e:	4798      	blx	r3
   13380:	1e03      	subs	r3, r0, #0
   13382:	d11f      	bne.n	133c4 <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   13384:	4b25      	ldr	r3, [pc, #148]	; (1341c <gsm_config_module+0x104>)
   13386:	4798      	blx	r3
   13388:	1e03      	subs	r3, r0, #0
   1338a:	d119      	bne.n	133c0 <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   1338c:	4b24      	ldr	r3, [pc, #144]	; (13420 <gsm_config_module+0x108>)
   1338e:	4798      	blx	r3
   13390:	1e03      	subs	r3, r0, #0
   13392:	d113      	bne.n	133bc <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   13394:	4b23      	ldr	r3, [pc, #140]	; (13424 <gsm_config_module+0x10c>)
   13396:	4798      	blx	r3
   13398:	1e03      	subs	r3, r0, #0
   1339a:	d10d      	bne.n	133b8 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   1339c:	4b22      	ldr	r3, [pc, #136]	; (13428 <gsm_config_module+0x110>)
   1339e:	4798      	blx	r3
   133a0:	1e03      	subs	r3, r0, #0
   133a2:	d107      	bne.n	133b4 <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   133a4:	4b21      	ldr	r3, [pc, #132]	; (1342c <gsm_config_module+0x114>)
   133a6:	4798      	blx	r3
   133a8:	1e03      	subs	r3, r0, #0
   133aa:	d101      	bne.n	133b0 <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   133ac:	2300      	movs	r3, #0
   133ae:	e01c      	b.n	133ea <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   133b0:	2310      	movs	r3, #16
   133b2:	e01a      	b.n	133ea <gsm_config_module+0xd2>
															}
														}
														else
														{
																return GSM_ERROR_CONFIG_FAILED;
   133b4:	2310      	movs	r3, #16
   133b6:	e018      	b.n	133ea <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   133b8:	2310      	movs	r3, #16
   133ba:	e016      	b.n	133ea <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   133bc:	2310      	movs	r3, #16
   133be:	e014      	b.n	133ea <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   133c0:	2310      	movs	r3, #16
   133c2:	e012      	b.n	133ea <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   133c4:	2310      	movs	r3, #16
   133c6:	e010      	b.n	133ea <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   133c8:	2310      	movs	r3, #16
   133ca:	e00e      	b.n	133ea <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   133cc:	2310      	movs	r3, #16
   133ce:	e00c      	b.n	133ea <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   133d0:	2310      	movs	r3, #16
   133d2:	e00a      	b.n	133ea <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   133d4:	2310      	movs	r3, #16
   133d6:	e008      	b.n	133ea <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   133d8:	2310      	movs	r3, #16
   133da:	e006      	b.n	133ea <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   133dc:	2310      	movs	r3, #16
   133de:	e004      	b.n	133ea <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   133e0:	2310      	movs	r3, #16
   133e2:	e002      	b.n	133ea <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   133e4:	2310      	movs	r3, #16
   133e6:	e000      	b.n	133ea <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   133e8:	2310      	movs	r3, #16
}
   133ea:	0018      	movs	r0, r3
   133ec:	46bd      	mov	sp, r7
   133ee:	bd80      	pop	{r7, pc}
   133f0:	000125cd 	.word	0x000125cd
   133f4:	00012809 	.word	0x00012809
   133f8:	0001ff69 	.word	0x0001ff69
   133fc:	000126b9 	.word	0x000126b9
   13400:	00012839 	.word	0x00012839
   13404:	00012665 	.word	0x00012665
   13408:	00012749 	.word	0x00012749
   1340c:	00012779 	.word	0x00012779
   13410:	000127d9 	.word	0x000127d9
   13414:	00012869 	.word	0x00012869
   13418:	00012899 	.word	0x00012899
   1341c:	00012ae1 	.word	0x00012ae1
   13420:	00012f25 	.word	0x00012f25
   13424:	00012f55 	.word	0x00012f55
   13428:	000127a9 	.word	0x000127a9
   1342c:	00012719 	.word	0x00012719

00013430 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   13430:	b580      	push	{r7, lr}
   13432:	b084      	sub	sp, #16
   13434:	af00      	add	r7, sp, #0
   13436:	6078      	str	r0, [r7, #4]
   13438:	000a      	movs	r2, r1
   1343a:	1cfb      	adds	r3, r7, #3
   1343c:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   1343e:	230f      	movs	r3, #15
   13440:	18fb      	adds	r3, r7, r3
   13442:	2200      	movs	r2, #0
   13444:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13446:	e026      	b.n	13496 <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   13448:	4b1b      	ldr	r3, [pc, #108]	; (134b8 <gsm_read_response_line+0x88>)
   1344a:	6818      	ldr	r0, [r3, #0]
   1344c:	23fa      	movs	r3, #250	; 0xfa
   1344e:	005a      	lsls	r2, r3, #1
   13450:	230e      	movs	r3, #14
   13452:	18fb      	adds	r3, r7, r3
   13454:	0019      	movs	r1, r3
   13456:	4b19      	ldr	r3, [pc, #100]	; (134bc <gsm_read_response_line+0x8c>)
   13458:	4798      	blx	r3
   1345a:	1e03      	subs	r3, r0, #0
   1345c:	d101      	bne.n	13462 <gsm_read_response_line+0x32>
		{
			return false;
   1345e:	2300      	movs	r3, #0
   13460:	e025      	b.n	134ae <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n')
   13462:	230e      	movs	r3, #14
   13464:	18fb      	adds	r3, r7, r3
   13466:	781b      	ldrb	r3, [r3, #0]
   13468:	2b0a      	cmp	r3, #10
   1346a:	d014      	beq.n	13496 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   1346c:	230e      	movs	r3, #14
   1346e:	18fb      	adds	r3, r7, r3
   13470:	781b      	ldrb	r3, [r3, #0]
   13472:	2b0d      	cmp	r3, #13
   13474:	d014      	beq.n	134a0 <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	1c5a      	adds	r2, r3, #1
   1347a:	607a      	str	r2, [r7, #4]
   1347c:	220e      	movs	r2, #14
   1347e:	18ba      	adds	r2, r7, r2
   13480:	7812      	ldrb	r2, [r2, #0]
   13482:	701a      	strb	r2, [r3, #0]
			length--;
   13484:	1cfb      	adds	r3, r7, #3
   13486:	781a      	ldrb	r2, [r3, #0]
   13488:	1cfb      	adds	r3, r7, #3
   1348a:	3a01      	subs	r2, #1
   1348c:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   1348e:	230f      	movs	r3, #15
   13490:	18fb      	adds	r3, r7, r3
   13492:	2201      	movs	r2, #1
   13494:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13496:	1cfb      	adds	r3, r7, #3
   13498:	781b      	ldrb	r3, [r3, #0]
   1349a:	2b01      	cmp	r3, #1
   1349c:	d8d4      	bhi.n	13448 <gsm_read_response_line+0x18>
   1349e:	e000      	b.n	134a2 <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   134a0:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
   134a2:	687b      	ldr	r3, [r7, #4]
   134a4:	2200      	movs	r2, #0
   134a6:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   134a8:	230f      	movs	r3, #15
   134aa:	18fb      	adds	r3, r7, r3
   134ac:	781b      	ldrb	r3, [r3, #0]
}
   134ae:	0018      	movs	r0, r3
   134b0:	46bd      	mov	sp, r7
   134b2:	b004      	add	sp, #16
   134b4:	bd80      	pop	{r7, pc}
   134b6:	46c0      	nop			; (mov r8, r8)
   134b8:	20000220 	.word	0x20000220
   134bc:	0001f4c1 	.word	0x0001f4c1

000134c0 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   134c0:	b580      	push	{r7, lr}
   134c2:	b084      	sub	sp, #16
   134c4:	af00      	add	r7, sp, #0
   134c6:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   134c8:	230f      	movs	r3, #15
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	2200      	movs	r2, #0
   134ce:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   134d0:	4a17      	ldr	r2, [pc, #92]	; (13530 <gsm_responseLine_isNew_SMS_Received+0x70>)
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	0011      	movs	r1, r2
   134d6:	0018      	movs	r0, r3
   134d8:	4b16      	ldr	r3, [pc, #88]	; (13534 <gsm_responseLine_isNew_SMS_Received+0x74>)
   134da:	4798      	blx	r3
   134dc:	1e03      	subs	r3, r0, #0
   134de:	d01b      	beq.n	13518 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   134e0:	4a15      	ldr	r2, [pc, #84]	; (13538 <gsm_responseLine_isNew_SMS_Received+0x78>)
   134e2:	687b      	ldr	r3, [r7, #4]
   134e4:	0011      	movs	r1, r2
   134e6:	0018      	movs	r0, r3
   134e8:	4b14      	ldr	r3, [pc, #80]	; (1353c <gsm_responseLine_isNew_SMS_Received+0x7c>)
   134ea:	4798      	blx	r3
   134ec:	0003      	movs	r3, r0
   134ee:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   134f0:	4b11      	ldr	r3, [pc, #68]	; (13538 <gsm_responseLine_isNew_SMS_Received+0x78>)
   134f2:	0019      	movs	r1, r3
   134f4:	2000      	movs	r0, #0
   134f6:	4b11      	ldr	r3, [pc, #68]	; (1353c <gsm_responseLine_isNew_SMS_Received+0x7c>)
   134f8:	4798      	blx	r3
   134fa:	0003      	movs	r3, r0
   134fc:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
   134fe:	68bb      	ldr	r3, [r7, #8]
   13500:	0018      	movs	r0, r3
   13502:	4b0f      	ldr	r3, [pc, #60]	; (13540 <gsm_responseLine_isNew_SMS_Received+0x80>)
   13504:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
   13506:	68bb      	ldr	r3, [r7, #8]
   13508:	0018      	movs	r0, r3
   1350a:	4b0e      	ldr	r3, [pc, #56]	; (13544 <gsm_responseLine_isNew_SMS_Received+0x84>)
   1350c:	4798      	blx	r3
   1350e:	0002      	movs	r2, r0
   13510:	230f      	movs	r3, #15
   13512:	18fb      	adds	r3, r7, r3
   13514:	701a      	strb	r2, [r3, #0]
   13516:	e003      	b.n	13520 <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
   13518:	230f      	movs	r3, #15
   1351a:	18fb      	adds	r3, r7, r3
   1351c:	2200      	movs	r2, #0
   1351e:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   13520:	230f      	movs	r3, #15
   13522:	18fb      	adds	r3, r7, r3
   13524:	781b      	ldrb	r3, [r3, #0]
}
   13526:	0018      	movs	r0, r3
   13528:	46bd      	mov	sp, r7
   1352a:	b004      	add	sp, #16
   1352c:	bd80      	pop	{r7, pc}
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	00029e2c 	.word	0x00029e2c
   13534:	00029153 	.word	0x00029153
   13538:	00029c64 	.word	0x00029c64
   1353c:	00029185 	.word	0x00029185
   13540:	00012a9d 	.word	0x00012a9d
   13544:	00028d79 	.word	0x00028d79

00013548 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   13548:	b580      	push	{r7, lr}
   1354a:	b082      	sub	sp, #8
   1354c:	af00      	add	r7, sp, #0
   1354e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   13550:	4a07      	ldr	r2, [pc, #28]	; (13570 <gsm_responseLine_isRinging+0x28>)
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	0011      	movs	r1, r2
   13556:	0018      	movs	r0, r3
   13558:	4b06      	ldr	r3, [pc, #24]	; (13574 <gsm_responseLine_isRinging+0x2c>)
   1355a:	4798      	blx	r3
   1355c:	1e03      	subs	r3, r0, #0
   1355e:	d001      	beq.n	13564 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   13560:	2301      	movs	r3, #1
   13562:	e000      	b.n	13566 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   13564:	2300      	movs	r3, #0
	}
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00029e34 	.word	0x00029e34
   13574:	00029153 	.word	0x00029153

00013578 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13578:	b580      	push	{r7, lr}
   1357a:	b084      	sub	sp, #16
   1357c:	af00      	add	r7, sp, #0
   1357e:	6078      	str	r0, [r7, #4]
   13580:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   13582:	4a1e      	ldr	r2, [pc, #120]	; (135fc <gsm_responseLine_get_IncommingCallNo+0x84>)
   13584:	687b      	ldr	r3, [r7, #4]
   13586:	0011      	movs	r1, r2
   13588:	0018      	movs	r0, r3
   1358a:	4b1d      	ldr	r3, [pc, #116]	; (13600 <gsm_responseLine_get_IncommingCallNo+0x88>)
   1358c:	4798      	blx	r3
   1358e:	1e03      	subs	r3, r0, #0
   13590:	d02e      	beq.n	135f0 <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   13592:	4a1c      	ldr	r2, [pc, #112]	; (13604 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13594:	687b      	ldr	r3, [r7, #4]
   13596:	0011      	movs	r1, r2
   13598:	0018      	movs	r0, r3
   1359a:	4b1b      	ldr	r3, [pc, #108]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x90>)
   1359c:	4798      	blx	r3
   1359e:	0003      	movs	r3, r0
   135a0:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   135a2:	4b1a      	ldr	r3, [pc, #104]	; (1360c <gsm_responseLine_get_IncommingCallNo+0x94>)
   135a4:	0019      	movs	r1, r3
   135a6:	2000      	movs	r0, #0
   135a8:	4b17      	ldr	r3, [pc, #92]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x90>)
   135aa:	4798      	blx	r3
   135ac:	0003      	movs	r3, r0
   135ae:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   135b0:	4a17      	ldr	r2, [pc, #92]	; (13610 <gsm_responseLine_get_IncommingCallNo+0x98>)
   135b2:	68fb      	ldr	r3, [r7, #12]
   135b4:	0011      	movs	r1, r2
   135b6:	0018      	movs	r0, r3
   135b8:	4b13      	ldr	r3, [pc, #76]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x90>)
   135ba:	4798      	blx	r3
   135bc:	0003      	movs	r3, r0
   135be:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   135c0:	4b13      	ldr	r3, [pc, #76]	; (13610 <gsm_responseLine_get_IncommingCallNo+0x98>)
   135c2:	0019      	movs	r1, r3
   135c4:	2000      	movs	r0, #0
   135c6:	4b10      	ldr	r3, [pc, #64]	; (13608 <gsm_responseLine_get_IncommingCallNo+0x90>)
   135c8:	4798      	blx	r3
   135ca:	0003      	movs	r3, r0
   135cc:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   135ce:	68fb      	ldr	r3, [r7, #12]
   135d0:	212b      	movs	r1, #43	; 0x2b
   135d2:	0018      	movs	r0, r3
   135d4:	4b0f      	ldr	r3, [pc, #60]	; (13614 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   135d6:	4798      	blx	r3
   135d8:	1e03      	subs	r3, r0, #0
   135da:	d101      	bne.n	135e0 <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   135dc:	2300      	movs	r3, #0
   135de:	e008      	b.n	135f2 <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   135e0:	68fa      	ldr	r2, [r7, #12]
   135e2:	683b      	ldr	r3, [r7, #0]
   135e4:	0011      	movs	r1, r2
   135e6:	0018      	movs	r0, r3
   135e8:	4b0b      	ldr	r3, [pc, #44]	; (13618 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   135ea:	4798      	blx	r3
		return true;
   135ec:	2301      	movs	r3, #1
   135ee:	e000      	b.n	135f2 <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   135f0:	2300      	movs	r3, #0
	}
}
   135f2:	0018      	movs	r0, r3
   135f4:	46bd      	mov	sp, r7
   135f6:	b004      	add	sp, #16
   135f8:	bd80      	pop	{r7, pc}
   135fa:	46c0      	nop			; (mov r8, r8)
   135fc:	00029e3c 	.word	0x00029e3c
   13600:	00029153 	.word	0x00029153
   13604:	00029c60 	.word	0x00029c60
   13608:	00029185 	.word	0x00029185
   1360c:	00029c64 	.word	0x00029c64
   13610:	00029e20 	.word	0x00029e20
   13614:	000290f7 	.word	0x000290f7
   13618:	00029113 	.word	0x00029113

0001361c <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   1361c:	b580      	push	{r7, lr}
   1361e:	b082      	sub	sp, #8
   13620:	af00      	add	r7, sp, #0
   13622:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13624:	4a16      	ldr	r2, [pc, #88]	; (13680 <gsm_responseLine_isCallCut+0x64>)
   13626:	687b      	ldr	r3, [r7, #4]
   13628:	0011      	movs	r1, r2
   1362a:	0018      	movs	r0, r3
   1362c:	4b15      	ldr	r3, [pc, #84]	; (13684 <gsm_responseLine_isCallCut+0x68>)
   1362e:	4798      	blx	r3
   13630:	1e03      	subs	r3, r0, #0
   13632:	d001      	beq.n	13638 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13634:	2301      	movs	r3, #1
   13636:	e01e      	b.n	13676 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13638:	4a13      	ldr	r2, [pc, #76]	; (13688 <gsm_responseLine_isCallCut+0x6c>)
   1363a:	687b      	ldr	r3, [r7, #4]
   1363c:	0011      	movs	r1, r2
   1363e:	0018      	movs	r0, r3
   13640:	4b10      	ldr	r3, [pc, #64]	; (13684 <gsm_responseLine_isCallCut+0x68>)
   13642:	4798      	blx	r3
   13644:	1e03      	subs	r3, r0, #0
   13646:	d001      	beq.n	1364c <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13648:	2301      	movs	r3, #1
   1364a:	e014      	b.n	13676 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   1364c:	4a0f      	ldr	r2, [pc, #60]	; (1368c <gsm_responseLine_isCallCut+0x70>)
   1364e:	687b      	ldr	r3, [r7, #4]
   13650:	0011      	movs	r1, r2
   13652:	0018      	movs	r0, r3
   13654:	4b0b      	ldr	r3, [pc, #44]	; (13684 <gsm_responseLine_isCallCut+0x68>)
   13656:	4798      	blx	r3
   13658:	1e03      	subs	r3, r0, #0
   1365a:	d001      	beq.n	13660 <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   1365c:	2301      	movs	r3, #1
   1365e:	e00a      	b.n	13676 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   13660:	4a0b      	ldr	r2, [pc, #44]	; (13690 <gsm_responseLine_isCallCut+0x74>)
   13662:	687b      	ldr	r3, [r7, #4]
   13664:	0011      	movs	r1, r2
   13666:	0018      	movs	r0, r3
   13668:	4b06      	ldr	r3, [pc, #24]	; (13684 <gsm_responseLine_isCallCut+0x68>)
   1366a:	4798      	blx	r3
   1366c:	1e03      	subs	r3, r0, #0
   1366e:	d001      	beq.n	13674 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   13670:	2301      	movs	r3, #1
   13672:	e000      	b.n	13676 <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13674:	2300      	movs	r3, #0
}
   13676:	0018      	movs	r0, r3
   13678:	46bd      	mov	sp, r7
   1367a:	b002      	add	sp, #8
   1367c:	bd80      	pop	{r7, pc}
   1367e:	46c0      	nop			; (mov r8, r8)
   13680:	00029e44 	.word	0x00029e44
   13684:	00029153 	.word	0x00029153
   13688:	00029e50 	.word	0x00029e50
   1368c:	00029e58 	.word	0x00029e58
   13690:	00029b40 	.word	0x00029b40

00013694 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13694:	b580      	push	{r7, lr}
   13696:	b082      	sub	sp, #8
   13698:	af00      	add	r7, sp, #0
   1369a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   1369c:	4a07      	ldr	r2, [pc, #28]	; (136bc <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1369e:	687b      	ldr	r3, [r7, #4]
   136a0:	0011      	movs	r1, r2
   136a2:	0018      	movs	r0, r3
   136a4:	4b06      	ldr	r3, [pc, #24]	; (136c0 <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   136a6:	4798      	blx	r3
   136a8:	1e03      	subs	r3, r0, #0
   136aa:	d001      	beq.n	136b0 <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   136ac:	2301      	movs	r3, #1
   136ae:	e000      	b.n	136b2 <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   136b0:	2300      	movs	r3, #0
	}
}
   136b2:	0018      	movs	r0, r3
   136b4:	46bd      	mov	sp, r7
   136b6:	b002      	add	sp, #8
   136b8:	bd80      	pop	{r7, pc}
   136ba:	46c0      	nop			; (mov r8, r8)
   136bc:	00029e64 	.word	0x00029e64
   136c0:	00029153 	.word	0x00029153

000136c4 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   136c4:	b580      	push	{r7, lr}
   136c6:	b082      	sub	sp, #8
   136c8:	af00      	add	r7, sp, #0
   136ca:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   136cc:	4a07      	ldr	r2, [pc, #28]	; (136ec <gsm_responseLine_is_StopSound_Received+0x28>)
   136ce:	687b      	ldr	r3, [r7, #4]
   136d0:	0011      	movs	r1, r2
   136d2:	0018      	movs	r0, r3
   136d4:	4b06      	ldr	r3, [pc, #24]	; (136f0 <gsm_responseLine_is_StopSound_Received+0x2c>)
   136d6:	4798      	blx	r3
   136d8:	1e03      	subs	r3, r0, #0
   136da:	d001      	beq.n	136e0 <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   136dc:	2301      	movs	r3, #1
   136de:	e000      	b.n	136e2 <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   136e0:	2300      	movs	r3, #0
	}
}
   136e2:	0018      	movs	r0, r3
   136e4:	46bd      	mov	sp, r7
   136e6:	b002      	add	sp, #8
   136e8:	bd80      	pop	{r7, pc}
   136ea:	46c0      	nop			; (mov r8, r8)
   136ec:	00029e6c 	.word	0x00029e6c
   136f0:	00029153 	.word	0x00029153

000136f4 <system_pinmux_get_group_from_gpio_pin>:
{
   136f4:	b580      	push	{r7, lr}
   136f6:	b084      	sub	sp, #16
   136f8:	af00      	add	r7, sp, #0
   136fa:	0002      	movs	r2, r0
   136fc:	1dfb      	adds	r3, r7, #7
   136fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13700:	230f      	movs	r3, #15
   13702:	18fb      	adds	r3, r7, r3
   13704:	1dfa      	adds	r2, r7, #7
   13706:	7812      	ldrb	r2, [r2, #0]
   13708:	09d2      	lsrs	r2, r2, #7
   1370a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1370c:	230e      	movs	r3, #14
   1370e:	18fb      	adds	r3, r7, r3
   13710:	1dfa      	adds	r2, r7, #7
   13712:	7812      	ldrb	r2, [r2, #0]
   13714:	0952      	lsrs	r2, r2, #5
   13716:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13718:	4b0d      	ldr	r3, [pc, #52]	; (13750 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1371a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1371c:	230f      	movs	r3, #15
   1371e:	18fb      	adds	r3, r7, r3
   13720:	781b      	ldrb	r3, [r3, #0]
   13722:	2b00      	cmp	r3, #0
   13724:	d10f      	bne.n	13746 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13726:	230f      	movs	r3, #15
   13728:	18fb      	adds	r3, r7, r3
   1372a:	781b      	ldrb	r3, [r3, #0]
   1372c:	009b      	lsls	r3, r3, #2
   1372e:	2210      	movs	r2, #16
   13730:	4694      	mov	ip, r2
   13732:	44bc      	add	ip, r7
   13734:	4463      	add	r3, ip
   13736:	3b08      	subs	r3, #8
   13738:	681a      	ldr	r2, [r3, #0]
   1373a:	230e      	movs	r3, #14
   1373c:	18fb      	adds	r3, r7, r3
   1373e:	781b      	ldrb	r3, [r3, #0]
   13740:	01db      	lsls	r3, r3, #7
   13742:	18d3      	adds	r3, r2, r3
   13744:	e000      	b.n	13748 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13746:	2300      	movs	r3, #0
}
   13748:	0018      	movs	r0, r3
   1374a:	46bd      	mov	sp, r7
   1374c:	b004      	add	sp, #16
   1374e:	bd80      	pop	{r7, pc}
   13750:	41004400 	.word	0x41004400

00013754 <port_get_group_from_gpio_pin>:
{
   13754:	b580      	push	{r7, lr}
   13756:	b082      	sub	sp, #8
   13758:	af00      	add	r7, sp, #0
   1375a:	0002      	movs	r2, r0
   1375c:	1dfb      	adds	r3, r7, #7
   1375e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13760:	1dfb      	adds	r3, r7, #7
   13762:	781b      	ldrb	r3, [r3, #0]
   13764:	0018      	movs	r0, r3
   13766:	4b03      	ldr	r3, [pc, #12]	; (13774 <port_get_group_from_gpio_pin+0x20>)
   13768:	4798      	blx	r3
   1376a:	0003      	movs	r3, r0
}
   1376c:	0018      	movs	r0, r3
   1376e:	46bd      	mov	sp, r7
   13770:	b002      	add	sp, #8
   13772:	bd80      	pop	{r7, pc}
   13774:	000136f5 	.word	0x000136f5

00013778 <port_get_config_defaults>:
{
   13778:	b580      	push	{r7, lr}
   1377a:	b082      	sub	sp, #8
   1377c:	af00      	add	r7, sp, #0
   1377e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	2200      	movs	r2, #0
   13784:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13786:	687b      	ldr	r3, [r7, #4]
   13788:	2201      	movs	r2, #1
   1378a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1378c:	687b      	ldr	r3, [r7, #4]
   1378e:	2200      	movs	r2, #0
   13790:	709a      	strb	r2, [r3, #2]
}
   13792:	46c0      	nop			; (mov r8, r8)
   13794:	46bd      	mov	sp, r7
   13796:	b002      	add	sp, #8
   13798:	bd80      	pop	{r7, pc}
	...

0001379c <port_pin_set_output_level>:
{
   1379c:	b580      	push	{r7, lr}
   1379e:	b084      	sub	sp, #16
   137a0:	af00      	add	r7, sp, #0
   137a2:	0002      	movs	r2, r0
   137a4:	1dfb      	adds	r3, r7, #7
   137a6:	701a      	strb	r2, [r3, #0]
   137a8:	1dbb      	adds	r3, r7, #6
   137aa:	1c0a      	adds	r2, r1, #0
   137ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   137ae:	1dfb      	adds	r3, r7, #7
   137b0:	781b      	ldrb	r3, [r3, #0]
   137b2:	0018      	movs	r0, r3
   137b4:	4b0d      	ldr	r3, [pc, #52]	; (137ec <port_pin_set_output_level+0x50>)
   137b6:	4798      	blx	r3
   137b8:	0003      	movs	r3, r0
   137ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   137bc:	1dfb      	adds	r3, r7, #7
   137be:	781b      	ldrb	r3, [r3, #0]
   137c0:	221f      	movs	r2, #31
   137c2:	4013      	ands	r3, r2
   137c4:	2201      	movs	r2, #1
   137c6:	409a      	lsls	r2, r3
   137c8:	0013      	movs	r3, r2
   137ca:	60bb      	str	r3, [r7, #8]
	if (level) {
   137cc:	1dbb      	adds	r3, r7, #6
   137ce:	781b      	ldrb	r3, [r3, #0]
   137d0:	2b00      	cmp	r3, #0
   137d2:	d003      	beq.n	137dc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   137d4:	68fb      	ldr	r3, [r7, #12]
   137d6:	68ba      	ldr	r2, [r7, #8]
   137d8:	619a      	str	r2, [r3, #24]
}
   137da:	e002      	b.n	137e2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   137dc:	68fb      	ldr	r3, [r7, #12]
   137de:	68ba      	ldr	r2, [r7, #8]
   137e0:	615a      	str	r2, [r3, #20]
}
   137e2:	46c0      	nop			; (mov r8, r8)
   137e4:	46bd      	mov	sp, r7
   137e6:	b004      	add	sp, #16
   137e8:	bd80      	pop	{r7, pc}
   137ea:	46c0      	nop			; (mov r8, r8)
   137ec:	00013755 	.word	0x00013755

000137f0 <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   137f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   137f2:	b08b      	sub	sp, #44	; 0x2c
   137f4:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   137f6:	230b      	movs	r3, #11
   137f8:	2218      	movs	r2, #24
   137fa:	4694      	mov	ip, r2
   137fc:	44bc      	add	ip, r7
   137fe:	4463      	add	r3, ip
   13800:	2210      	movs	r2, #16
   13802:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   13804:	230a      	movs	r3, #10
   13806:	2218      	movs	r2, #24
   13808:	4694      	mov	ip, r2
   1380a:	44bc      	add	ip, r7
   1380c:	4463      	add	r3, ip
   1380e:	2202      	movs	r2, #2
   13810:	701a      	strb	r2, [r3, #0]
	delay_init();
   13812:	4b90      	ldr	r3, [pc, #576]	; (13a54 <LCD_init+0x264>)
   13814:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   13816:	4b90      	ldr	r3, [pc, #576]	; (13a58 <LCD_init+0x268>)
   13818:	223f      	movs	r2, #63	; 0x3f
   1381a:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   1381c:	4b8f      	ldr	r3, [pc, #572]	; (13a5c <LCD_init+0x26c>)
   1381e:	223e      	movs	r2, #62	; 0x3e
   13820:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13822:	4b8f      	ldr	r3, [pc, #572]	; (13a60 <LCD_init+0x270>)
   13824:	2221      	movs	r2, #33	; 0x21
   13826:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13828:	4b8d      	ldr	r3, [pc, #564]	; (13a60 <LCD_init+0x270>)
   1382a:	2220      	movs	r2, #32
   1382c:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   1382e:	4b8c      	ldr	r3, [pc, #560]	; (13a60 <LCD_init+0x270>)
   13830:	2223      	movs	r2, #35	; 0x23
   13832:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13834:	4b8a      	ldr	r3, [pc, #552]	; (13a60 <LCD_init+0x270>)
   13836:	2222      	movs	r2, #34	; 0x22
   13838:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   1383a:	4b8a      	ldr	r3, [pc, #552]	; (13a64 <LCD_init+0x274>)
   1383c:	2200      	movs	r2, #0
   1383e:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13840:	230a      	movs	r3, #10
   13842:	2218      	movs	r2, #24
   13844:	4694      	mov	ip, r2
   13846:	44bc      	add	ip, r7
   13848:	4463      	add	r3, ip
   1384a:	781b      	ldrb	r3, [r3, #0]
   1384c:	2b01      	cmp	r3, #1
   1384e:	d906      	bls.n	1385e <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13850:	4b84      	ldr	r3, [pc, #528]	; (13a64 <LCD_init+0x274>)
   13852:	781b      	ldrb	r3, [r3, #0]
   13854:	2208      	movs	r2, #8
   13856:	4313      	orrs	r3, r2
   13858:	b2da      	uxtb	r2, r3
   1385a:	4b82      	ldr	r3, [pc, #520]	; (13a64 <LCD_init+0x274>)
   1385c:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   1385e:	4b82      	ldr	r3, [pc, #520]	; (13a68 <LCD_init+0x278>)
   13860:	220a      	movs	r2, #10
   13862:	2118      	movs	r1, #24
   13864:	468c      	mov	ip, r1
   13866:	44bc      	add	ip, r7
   13868:	4462      	add	r2, ip
   1386a:	7812      	ldrb	r2, [r2, #0]
   1386c:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   1386e:	230b      	movs	r3, #11
   13870:	2218      	movs	r2, #24
   13872:	4694      	mov	ip, r2
   13874:	44bc      	add	ip, r7
   13876:	4463      	add	r3, ip
   13878:	781a      	ldrb	r2, [r3, #0]
   1387a:	230b      	movs	r3, #11
   1387c:	2118      	movs	r1, #24
   1387e:	468c      	mov	ip, r1
   13880:	44bc      	add	ip, r7
   13882:	4463      	add	r3, ip
   13884:	781b      	ldrb	r3, [r3, #0]
   13886:	3340      	adds	r3, #64	; 0x40
   13888:	2140      	movs	r1, #64	; 0x40
   1388a:	2000      	movs	r0, #0
   1388c:	4c77      	ldr	r4, [pc, #476]	; (13a6c <LCD_init+0x27c>)
   1388e:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13890:	231c      	movs	r3, #28
   13892:	18fb      	adds	r3, r7, r3
   13894:	0018      	movs	r0, r3
   13896:	4b76      	ldr	r3, [pc, #472]	; (13a70 <LCD_init+0x280>)
   13898:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1389a:	231c      	movs	r3, #28
   1389c:	18fb      	adds	r3, r7, r3
   1389e:	2201      	movs	r2, #1
   138a0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   138a2:	4b6d      	ldr	r3, [pc, #436]	; (13a58 <LCD_init+0x268>)
   138a4:	781b      	ldrb	r3, [r3, #0]
   138a6:	221c      	movs	r2, #28
   138a8:	18ba      	adds	r2, r7, r2
   138aa:	0011      	movs	r1, r2
   138ac:	0018      	movs	r0, r3
   138ae:	4b71      	ldr	r3, [pc, #452]	; (13a74 <LCD_init+0x284>)
   138b0:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   138b2:	4b6a      	ldr	r3, [pc, #424]	; (13a5c <LCD_init+0x26c>)
   138b4:	781b      	ldrb	r3, [r3, #0]
   138b6:	221c      	movs	r2, #28
   138b8:	18ba      	adds	r2, r7, r2
   138ba:	0011      	movs	r1, r2
   138bc:	0018      	movs	r0, r3
   138be:	4b6d      	ldr	r3, [pc, #436]	; (13a74 <LCD_init+0x284>)
   138c0:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   138c2:	2300      	movs	r3, #0
   138c4:	627b      	str	r3, [r7, #36]	; 0x24
   138c6:	e00c      	b.n	138e2 <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   138c8:	4a65      	ldr	r2, [pc, #404]	; (13a60 <LCD_init+0x270>)
   138ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138cc:	18d3      	adds	r3, r2, r3
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	221c      	movs	r2, #28
   138d2:	18ba      	adds	r2, r7, r2
   138d4:	0011      	movs	r1, r2
   138d6:	0018      	movs	r0, r3
   138d8:	4b66      	ldr	r3, [pc, #408]	; (13a74 <LCD_init+0x284>)
   138da:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   138dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138de:	3301      	adds	r3, #1
   138e0:	627b      	str	r3, [r7, #36]	; 0x24
   138e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138e4:	2b03      	cmp	r3, #3
   138e6:	ddef      	ble.n	138c8 <LCD_init+0xd8>
	}
	delay_us(50000);
   138e8:	2000      	movs	r0, #0
   138ea:	4b63      	ldr	r3, [pc, #396]	; (13a78 <LCD_init+0x288>)
   138ec:	4798      	blx	r3
   138ee:	0003      	movs	r3, r0
   138f0:	613b      	str	r3, [r7, #16]
   138f2:	2300      	movs	r3, #0
   138f4:	617b      	str	r3, [r7, #20]
   138f6:	4c61      	ldr	r4, [pc, #388]	; (13a7c <LCD_init+0x28c>)
   138f8:	4a61      	ldr	r2, [pc, #388]	; (13a80 <LCD_init+0x290>)
   138fa:	2300      	movs	r3, #0
   138fc:	6938      	ldr	r0, [r7, #16]
   138fe:	6979      	ldr	r1, [r7, #20]
   13900:	47a0      	blx	r4
   13902:	0003      	movs	r3, r0
   13904:	000c      	movs	r4, r1
   13906:	0019      	movs	r1, r3
   13908:	0022      	movs	r2, r4
   1390a:	4b5e      	ldr	r3, [pc, #376]	; (13a84 <LCD_init+0x294>)
   1390c:	2400      	movs	r4, #0
   1390e:	18c9      	adds	r1, r1, r3
   13910:	4162      	adcs	r2, r4
   13912:	0008      	movs	r0, r1
   13914:	0011      	movs	r1, r2
   13916:	4c5c      	ldr	r4, [pc, #368]	; (13a88 <LCD_init+0x298>)
   13918:	4a5c      	ldr	r2, [pc, #368]	; (13a8c <LCD_init+0x29c>)
   1391a:	2300      	movs	r3, #0
   1391c:	47a0      	blx	r4
   1391e:	0003      	movs	r3, r0
   13920:	000c      	movs	r4, r1
   13922:	0018      	movs	r0, r3
   13924:	4b5a      	ldr	r3, [pc, #360]	; (13a90 <LCD_init+0x2a0>)
   13926:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13928:	4b4b      	ldr	r3, [pc, #300]	; (13a58 <LCD_init+0x268>)
   1392a:	781b      	ldrb	r3, [r3, #0]
   1392c:	2100      	movs	r1, #0
   1392e:	0018      	movs	r0, r3
   13930:	4b58      	ldr	r3, [pc, #352]	; (13a94 <LCD_init+0x2a4>)
   13932:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13934:	4b49      	ldr	r3, [pc, #292]	; (13a5c <LCD_init+0x26c>)
   13936:	781b      	ldrb	r3, [r3, #0]
   13938:	2100      	movs	r1, #0
   1393a:	0018      	movs	r0, r3
   1393c:	4b55      	ldr	r3, [pc, #340]	; (13a94 <LCD_init+0x2a4>)
   1393e:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13940:	2003      	movs	r0, #3
   13942:	4b55      	ldr	r3, [pc, #340]	; (13a98 <LCD_init+0x2a8>)
   13944:	4798      	blx	r3
	 delay_us(4500); 
   13946:	2000      	movs	r0, #0
   13948:	4b4b      	ldr	r3, [pc, #300]	; (13a78 <LCD_init+0x288>)
   1394a:	4798      	blx	r3
   1394c:	0003      	movs	r3, r0
   1394e:	60bb      	str	r3, [r7, #8]
   13950:	2300      	movs	r3, #0
   13952:	60fb      	str	r3, [r7, #12]
   13954:	4c49      	ldr	r4, [pc, #292]	; (13a7c <LCD_init+0x28c>)
   13956:	4a51      	ldr	r2, [pc, #324]	; (13a9c <LCD_init+0x2ac>)
   13958:	2300      	movs	r3, #0
   1395a:	68b8      	ldr	r0, [r7, #8]
   1395c:	68f9      	ldr	r1, [r7, #12]
   1395e:	47a0      	blx	r4
   13960:	0003      	movs	r3, r0
   13962:	000c      	movs	r4, r1
   13964:	0019      	movs	r1, r3
   13966:	0022      	movs	r2, r4
   13968:	4b46      	ldr	r3, [pc, #280]	; (13a84 <LCD_init+0x294>)
   1396a:	2400      	movs	r4, #0
   1396c:	18c9      	adds	r1, r1, r3
   1396e:	4162      	adcs	r2, r4
   13970:	0008      	movs	r0, r1
   13972:	0011      	movs	r1, r2
   13974:	4c44      	ldr	r4, [pc, #272]	; (13a88 <LCD_init+0x298>)
   13976:	4a45      	ldr	r2, [pc, #276]	; (13a8c <LCD_init+0x29c>)
   13978:	2300      	movs	r3, #0
   1397a:	47a0      	blx	r4
   1397c:	0003      	movs	r3, r0
   1397e:	000c      	movs	r4, r1
   13980:	0018      	movs	r0, r3
   13982:	4b43      	ldr	r3, [pc, #268]	; (13a90 <LCD_init+0x2a0>)
   13984:	4798      	blx	r3
	 
	 write4bits(0x03);
   13986:	2003      	movs	r0, #3
   13988:	4b43      	ldr	r3, [pc, #268]	; (13a98 <LCD_init+0x2a8>)
   1398a:	4798      	blx	r3
	 delay_us(4500); 
   1398c:	2000      	movs	r0, #0
   1398e:	4b3a      	ldr	r3, [pc, #232]	; (13a78 <LCD_init+0x288>)
   13990:	4798      	blx	r3
   13992:	0003      	movs	r3, r0
   13994:	603b      	str	r3, [r7, #0]
   13996:	2300      	movs	r3, #0
   13998:	607b      	str	r3, [r7, #4]
   1399a:	4c38      	ldr	r4, [pc, #224]	; (13a7c <LCD_init+0x28c>)
   1399c:	4a3f      	ldr	r2, [pc, #252]	; (13a9c <LCD_init+0x2ac>)
   1399e:	2300      	movs	r3, #0
   139a0:	6838      	ldr	r0, [r7, #0]
   139a2:	6879      	ldr	r1, [r7, #4]
   139a4:	47a0      	blx	r4
   139a6:	0003      	movs	r3, r0
   139a8:	000c      	movs	r4, r1
   139aa:	0019      	movs	r1, r3
   139ac:	0022      	movs	r2, r4
   139ae:	4b35      	ldr	r3, [pc, #212]	; (13a84 <LCD_init+0x294>)
   139b0:	2400      	movs	r4, #0
   139b2:	18c9      	adds	r1, r1, r3
   139b4:	4162      	adcs	r2, r4
   139b6:	0008      	movs	r0, r1
   139b8:	0011      	movs	r1, r2
   139ba:	4c33      	ldr	r4, [pc, #204]	; (13a88 <LCD_init+0x298>)
   139bc:	4a33      	ldr	r2, [pc, #204]	; (13a8c <LCD_init+0x29c>)
   139be:	2300      	movs	r3, #0
   139c0:	47a0      	blx	r4
   139c2:	0003      	movs	r3, r0
   139c4:	000c      	movs	r4, r1
   139c6:	0018      	movs	r0, r3
   139c8:	4b31      	ldr	r3, [pc, #196]	; (13a90 <LCD_init+0x2a0>)
   139ca:	4798      	blx	r3
	
	 write4bits(0x03);
   139cc:	2003      	movs	r0, #3
   139ce:	4b32      	ldr	r3, [pc, #200]	; (13a98 <LCD_init+0x2a8>)
   139d0:	4798      	blx	r3
	 delay_us(150);
   139d2:	2000      	movs	r0, #0
   139d4:	4b28      	ldr	r3, [pc, #160]	; (13a78 <LCD_init+0x288>)
   139d6:	4798      	blx	r3
   139d8:	0003      	movs	r3, r0
   139da:	001d      	movs	r5, r3
   139dc:	2300      	movs	r3, #0
   139de:	001e      	movs	r6, r3
   139e0:	4c26      	ldr	r4, [pc, #152]	; (13a7c <LCD_init+0x28c>)
   139e2:	2296      	movs	r2, #150	; 0x96
   139e4:	2300      	movs	r3, #0
   139e6:	0028      	movs	r0, r5
   139e8:	0031      	movs	r1, r6
   139ea:	47a0      	blx	r4
   139ec:	0003      	movs	r3, r0
   139ee:	000c      	movs	r4, r1
   139f0:	0019      	movs	r1, r3
   139f2:	0022      	movs	r2, r4
   139f4:	4b23      	ldr	r3, [pc, #140]	; (13a84 <LCD_init+0x294>)
   139f6:	2400      	movs	r4, #0
   139f8:	18c9      	adds	r1, r1, r3
   139fa:	4162      	adcs	r2, r4
   139fc:	0008      	movs	r0, r1
   139fe:	0011      	movs	r1, r2
   13a00:	4c21      	ldr	r4, [pc, #132]	; (13a88 <LCD_init+0x298>)
   13a02:	4a22      	ldr	r2, [pc, #136]	; (13a8c <LCD_init+0x29c>)
   13a04:	2300      	movs	r3, #0
   13a06:	47a0      	blx	r4
   13a08:	0003      	movs	r3, r0
   13a0a:	000c      	movs	r4, r1
   13a0c:	0018      	movs	r0, r3
   13a0e:	4b20      	ldr	r3, [pc, #128]	; (13a90 <LCD_init+0x2a0>)
   13a10:	4798      	blx	r3

	 write4bits(0x02);
   13a12:	2002      	movs	r0, #2
   13a14:	4b20      	ldr	r3, [pc, #128]	; (13a98 <LCD_init+0x2a8>)
   13a16:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13a18:	4b12      	ldr	r3, [pc, #72]	; (13a64 <LCD_init+0x274>)
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2220      	movs	r2, #32
   13a1e:	4313      	orrs	r3, r2
   13a20:	b2db      	uxtb	r3, r3
   13a22:	0018      	movs	r0, r3
   13a24:	4b1e      	ldr	r3, [pc, #120]	; (13aa0 <LCD_init+0x2b0>)
   13a26:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13a28:	4b1e      	ldr	r3, [pc, #120]	; (13aa4 <LCD_init+0x2b4>)
   13a2a:	2204      	movs	r2, #4
   13a2c:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13a2e:	4b1e      	ldr	r3, [pc, #120]	; (13aa8 <LCD_init+0x2b8>)
   13a30:	4798      	blx	r3
	LCD_clear();
   13a32:	4b1e      	ldr	r3, [pc, #120]	; (13aac <LCD_init+0x2bc>)
   13a34:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13a36:	4b1e      	ldr	r3, [pc, #120]	; (13ab0 <LCD_init+0x2c0>)
   13a38:	2202      	movs	r2, #2
   13a3a:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13a3c:	4b1c      	ldr	r3, [pc, #112]	; (13ab0 <LCD_init+0x2c0>)
   13a3e:	781b      	ldrb	r3, [r3, #0]
   13a40:	2204      	movs	r2, #4
   13a42:	4313      	orrs	r3, r2
   13a44:	b2db      	uxtb	r3, r3
   13a46:	0018      	movs	r0, r3
   13a48:	4b15      	ldr	r3, [pc, #84]	; (13aa0 <LCD_init+0x2b0>)
   13a4a:	4798      	blx	r3
}
   13a4c:	46c0      	nop			; (mov r8, r8)
   13a4e:	46bd      	mov	sp, r7
   13a50:	b00b      	add	sp, #44	; 0x2c
   13a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a54:	0002299d 	.word	0x0002299d
   13a58:	200006d3 	.word	0x200006d3
   13a5c:	200006d2 	.word	0x200006d2
   13a60:	200006cc 	.word	0x200006cc
   13a64:	200006d1 	.word	0x200006d1
   13a68:	200006ca 	.word	0x200006ca
   13a6c:	00013b61 	.word	0x00013b61
   13a70:	00013779 	.word	0x00013779
   13a74:	00022ff1 	.word	0x00022ff1
   13a78:	0002495d 	.word	0x0002495d
   13a7c:	00026925 	.word	0x00026925
   13a80:	0000c350 	.word	0x0000c350
   13a84:	006acfbf 	.word	0x006acfbf
   13a88:	000268e5 	.word	0x000268e5
   13a8c:	006acfc0 	.word	0x006acfc0
   13a90:	20000001 	.word	0x20000001
   13a94:	0001379d 	.word	0x0001379d
   13a98:	00013b9d 	.word	0x00013b9d
   13a9c:	00001194 	.word	0x00001194
   13aa0:	00013ce1 	.word	0x00013ce1
   13aa4:	200006c9 	.word	0x200006c9
   13aa8:	00013ec9 	.word	0x00013ec9
   13aac:	00013d81 	.word	0x00013d81
   13ab0:	200006d0 	.word	0x200006d0

00013ab4 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13ab4:	b580      	push	{r7, lr}
   13ab6:	b082      	sub	sp, #8
   13ab8:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13aba:	1d3b      	adds	r3, r7, #4
   13abc:	0018      	movs	r0, r3
   13abe:	4b08      	ldr	r3, [pc, #32]	; (13ae0 <LCD_PWR_CONFIG+0x2c>)
   13ac0:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13ac2:	1d3b      	adds	r3, r7, #4
   13ac4:	2201      	movs	r2, #1
   13ac6:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13ac8:	1d3b      	adds	r3, r7, #4
   13aca:	2200      	movs	r2, #0
   13acc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13ace:	1d3b      	adds	r3, r7, #4
   13ad0:	0019      	movs	r1, r3
   13ad2:	2024      	movs	r0, #36	; 0x24
   13ad4:	4b03      	ldr	r3, [pc, #12]	; (13ae4 <LCD_PWR_CONFIG+0x30>)
   13ad6:	4798      	blx	r3
}
   13ad8:	46c0      	nop			; (mov r8, r8)
   13ada:	46bd      	mov	sp, r7
   13adc:	b002      	add	sp, #8
   13ade:	bd80      	pop	{r7, pc}
   13ae0:	00013779 	.word	0x00013779
   13ae4:	00022ff1 	.word	0x00022ff1

00013ae8 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13ae8:	b580      	push	{r7, lr}
   13aea:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13aec:	2101      	movs	r1, #1
   13aee:	2024      	movs	r0, #36	; 0x24
   13af0:	4b02      	ldr	r3, [pc, #8]	; (13afc <LCD_PWR_EN+0x14>)
   13af2:	4798      	blx	r3
}
   13af4:	46c0      	nop			; (mov r8, r8)
   13af6:	46bd      	mov	sp, r7
   13af8:	bd80      	pop	{r7, pc}
   13afa:	46c0      	nop			; (mov r8, r8)
   13afc:	0001379d 	.word	0x0001379d

00013b00 <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13b00:	b580      	push	{r7, lr}
   13b02:	b082      	sub	sp, #8
   13b04:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13b06:	2100      	movs	r1, #0
   13b08:	2024      	movs	r0, #36	; 0x24
   13b0a:	4b11      	ldr	r3, [pc, #68]	; (13b50 <LCD_PWR_DIS+0x50>)
   13b0c:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13b0e:	2300      	movs	r3, #0
   13b10:	607b      	str	r3, [r7, #4]
   13b12:	e00a      	b.n	13b2a <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13b14:	4a0f      	ldr	r2, [pc, #60]	; (13b54 <LCD_PWR_DIS+0x54>)
   13b16:	687b      	ldr	r3, [r7, #4]
   13b18:	18d3      	adds	r3, r2, r3
   13b1a:	781b      	ldrb	r3, [r3, #0]
   13b1c:	2100      	movs	r1, #0
   13b1e:	0018      	movs	r0, r3
   13b20:	4b0b      	ldr	r3, [pc, #44]	; (13b50 <LCD_PWR_DIS+0x50>)
   13b22:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13b24:	687b      	ldr	r3, [r7, #4]
   13b26:	3301      	adds	r3, #1
   13b28:	607b      	str	r3, [r7, #4]
   13b2a:	687b      	ldr	r3, [r7, #4]
   13b2c:	2b03      	cmp	r3, #3
   13b2e:	ddf1      	ble.n	13b14 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13b30:	4b09      	ldr	r3, [pc, #36]	; (13b58 <LCD_PWR_DIS+0x58>)
   13b32:	781b      	ldrb	r3, [r3, #0]
   13b34:	2100      	movs	r1, #0
   13b36:	0018      	movs	r0, r3
   13b38:	4b05      	ldr	r3, [pc, #20]	; (13b50 <LCD_PWR_DIS+0x50>)
   13b3a:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13b3c:	4b07      	ldr	r3, [pc, #28]	; (13b5c <LCD_PWR_DIS+0x5c>)
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	2100      	movs	r1, #0
   13b42:	0018      	movs	r0, r3
   13b44:	4b02      	ldr	r3, [pc, #8]	; (13b50 <LCD_PWR_DIS+0x50>)
   13b46:	4798      	blx	r3
	
}
   13b48:	46c0      	nop			; (mov r8, r8)
   13b4a:	46bd      	mov	sp, r7
   13b4c:	b002      	add	sp, #8
   13b4e:	bd80      	pop	{r7, pc}
   13b50:	0001379d 	.word	0x0001379d
   13b54:	200006cc 	.word	0x200006cc
   13b58:	200006d2 	.word	0x200006d2
   13b5c:	200006d3 	.word	0x200006d3

00013b60 <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13b60:	b580      	push	{r7, lr}
   13b62:	b084      	sub	sp, #16
   13b64:	af00      	add	r7, sp, #0
   13b66:	60f8      	str	r0, [r7, #12]
   13b68:	60b9      	str	r1, [r7, #8]
   13b6a:	607a      	str	r2, [r7, #4]
   13b6c:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13b6e:	68fb      	ldr	r3, [r7, #12]
   13b70:	b2da      	uxtb	r2, r3
   13b72:	4b09      	ldr	r3, [pc, #36]	; (13b98 <LCD_setRowOffsets+0x38>)
   13b74:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13b76:	68bb      	ldr	r3, [r7, #8]
   13b78:	b2da      	uxtb	r2, r3
   13b7a:	4b07      	ldr	r3, [pc, #28]	; (13b98 <LCD_setRowOffsets+0x38>)
   13b7c:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13b7e:	687b      	ldr	r3, [r7, #4]
   13b80:	b2da      	uxtb	r2, r3
   13b82:	4b05      	ldr	r3, [pc, #20]	; (13b98 <LCD_setRowOffsets+0x38>)
   13b84:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13b86:	683b      	ldr	r3, [r7, #0]
   13b88:	b2da      	uxtb	r2, r3
   13b8a:	4b03      	ldr	r3, [pc, #12]	; (13b98 <LCD_setRowOffsets+0x38>)
   13b8c:	70da      	strb	r2, [r3, #3]
}
   13b8e:	46c0      	nop			; (mov r8, r8)
   13b90:	46bd      	mov	sp, r7
   13b92:	b004      	add	sp, #16
   13b94:	bd80      	pop	{r7, pc}
   13b96:	46c0      	nop			; (mov r8, r8)
   13b98:	200006c4 	.word	0x200006c4

00013b9c <write4bits>:

void write4bits(uint8_t value)
{
   13b9c:	b580      	push	{r7, lr}
   13b9e:	b084      	sub	sp, #16
   13ba0:	af00      	add	r7, sp, #0
   13ba2:	0002      	movs	r2, r0
   13ba4:	1dfb      	adds	r3, r7, #7
   13ba6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13ba8:	2300      	movs	r3, #0
   13baa:	60fb      	str	r3, [r7, #12]
   13bac:	e013      	b.n	13bd6 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13bae:	4a0e      	ldr	r2, [pc, #56]	; (13be8 <write4bits+0x4c>)
   13bb0:	68fb      	ldr	r3, [r7, #12]
   13bb2:	18d3      	adds	r3, r2, r3
   13bb4:	7818      	ldrb	r0, [r3, #0]
   13bb6:	1dfb      	adds	r3, r7, #7
   13bb8:	781a      	ldrb	r2, [r3, #0]
   13bba:	68fb      	ldr	r3, [r7, #12]
   13bbc:	411a      	asrs	r2, r3
   13bbe:	0013      	movs	r3, r2
   13bc0:	2201      	movs	r2, #1
   13bc2:	4013      	ands	r3, r2
   13bc4:	1e5a      	subs	r2, r3, #1
   13bc6:	4193      	sbcs	r3, r2
   13bc8:	b2db      	uxtb	r3, r3
   13bca:	0019      	movs	r1, r3
   13bcc:	4b07      	ldr	r3, [pc, #28]	; (13bec <write4bits+0x50>)
   13bce:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13bd0:	68fb      	ldr	r3, [r7, #12]
   13bd2:	3301      	adds	r3, #1
   13bd4:	60fb      	str	r3, [r7, #12]
   13bd6:	68fb      	ldr	r3, [r7, #12]
   13bd8:	2b03      	cmp	r3, #3
   13bda:	dde8      	ble.n	13bae <write4bits+0x12>
	}
	pulseEnable();
   13bdc:	4b04      	ldr	r3, [pc, #16]	; (13bf0 <write4bits+0x54>)
   13bde:	4798      	blx	r3
}
   13be0:	46c0      	nop			; (mov r8, r8)
   13be2:	46bd      	mov	sp, r7
   13be4:	b004      	add	sp, #16
   13be6:	bd80      	pop	{r7, pc}
   13be8:	200006cc 	.word	0x200006cc
   13bec:	0001379d 	.word	0x0001379d
   13bf0:	00013bf5 	.word	0x00013bf5

00013bf4 <pulseEnable>:



void pulseEnable(void)
{
   13bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bf6:	b085      	sub	sp, #20
   13bf8:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13bfa:	4b31      	ldr	r3, [pc, #196]	; (13cc0 <pulseEnable+0xcc>)
   13bfc:	781b      	ldrb	r3, [r3, #0]
   13bfe:	2100      	movs	r1, #0
   13c00:	0018      	movs	r0, r3
   13c02:	4b30      	ldr	r3, [pc, #192]	; (13cc4 <pulseEnable+0xd0>)
   13c04:	4798      	blx	r3
 	delay_us(1);
   13c06:	2000      	movs	r0, #0
   13c08:	4b2f      	ldr	r3, [pc, #188]	; (13cc8 <pulseEnable+0xd4>)
   13c0a:	4798      	blx	r3
   13c0c:	0003      	movs	r3, r0
   13c0e:	60bb      	str	r3, [r7, #8]
   13c10:	2300      	movs	r3, #0
   13c12:	60fb      	str	r3, [r7, #12]
   13c14:	4b2d      	ldr	r3, [pc, #180]	; (13ccc <pulseEnable+0xd8>)
   13c16:	2400      	movs	r4, #0
   13c18:	68b8      	ldr	r0, [r7, #8]
   13c1a:	68f9      	ldr	r1, [r7, #12]
   13c1c:	18c0      	adds	r0, r0, r3
   13c1e:	4161      	adcs	r1, r4
   13c20:	4c2b      	ldr	r4, [pc, #172]	; (13cd0 <pulseEnable+0xdc>)
   13c22:	4a2c      	ldr	r2, [pc, #176]	; (13cd4 <pulseEnable+0xe0>)
   13c24:	2300      	movs	r3, #0
   13c26:	47a0      	blx	r4
   13c28:	0003      	movs	r3, r0
   13c2a:	000c      	movs	r4, r1
   13c2c:	0018      	movs	r0, r3
   13c2e:	4b2a      	ldr	r3, [pc, #168]	; (13cd8 <pulseEnable+0xe4>)
   13c30:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13c32:	4b23      	ldr	r3, [pc, #140]	; (13cc0 <pulseEnable+0xcc>)
   13c34:	781b      	ldrb	r3, [r3, #0]
   13c36:	2101      	movs	r1, #1
   13c38:	0018      	movs	r0, r3
   13c3a:	4b22      	ldr	r3, [pc, #136]	; (13cc4 <pulseEnable+0xd0>)
   13c3c:	4798      	blx	r3
 	delay_us(1);
   13c3e:	2000      	movs	r0, #0
   13c40:	4b21      	ldr	r3, [pc, #132]	; (13cc8 <pulseEnable+0xd4>)
   13c42:	4798      	blx	r3
   13c44:	0003      	movs	r3, r0
   13c46:	001d      	movs	r5, r3
   13c48:	2300      	movs	r3, #0
   13c4a:	001e      	movs	r6, r3
   13c4c:	4b1f      	ldr	r3, [pc, #124]	; (13ccc <pulseEnable+0xd8>)
   13c4e:	2400      	movs	r4, #0
   13c50:	0028      	movs	r0, r5
   13c52:	0031      	movs	r1, r6
   13c54:	18c0      	adds	r0, r0, r3
   13c56:	4161      	adcs	r1, r4
   13c58:	4c1d      	ldr	r4, [pc, #116]	; (13cd0 <pulseEnable+0xdc>)
   13c5a:	4a1e      	ldr	r2, [pc, #120]	; (13cd4 <pulseEnable+0xe0>)
   13c5c:	2300      	movs	r3, #0
   13c5e:	47a0      	blx	r4
   13c60:	0003      	movs	r3, r0
   13c62:	000c      	movs	r4, r1
   13c64:	0018      	movs	r0, r3
   13c66:	4b1c      	ldr	r3, [pc, #112]	; (13cd8 <pulseEnable+0xe4>)
   13c68:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13c6a:	4b15      	ldr	r3, [pc, #84]	; (13cc0 <pulseEnable+0xcc>)
   13c6c:	781b      	ldrb	r3, [r3, #0]
   13c6e:	2100      	movs	r1, #0
   13c70:	0018      	movs	r0, r3
   13c72:	4b14      	ldr	r3, [pc, #80]	; (13cc4 <pulseEnable+0xd0>)
   13c74:	4798      	blx	r3
 	delay_us(100);
   13c76:	2000      	movs	r0, #0
   13c78:	4b13      	ldr	r3, [pc, #76]	; (13cc8 <pulseEnable+0xd4>)
   13c7a:	4798      	blx	r3
   13c7c:	0003      	movs	r3, r0
   13c7e:	603b      	str	r3, [r7, #0]
   13c80:	2300      	movs	r3, #0
   13c82:	607b      	str	r3, [r7, #4]
   13c84:	4c15      	ldr	r4, [pc, #84]	; (13cdc <pulseEnable+0xe8>)
   13c86:	2264      	movs	r2, #100	; 0x64
   13c88:	2300      	movs	r3, #0
   13c8a:	6838      	ldr	r0, [r7, #0]
   13c8c:	6879      	ldr	r1, [r7, #4]
   13c8e:	47a0      	blx	r4
   13c90:	0003      	movs	r3, r0
   13c92:	000c      	movs	r4, r1
   13c94:	0019      	movs	r1, r3
   13c96:	0022      	movs	r2, r4
   13c98:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <pulseEnable+0xd8>)
   13c9a:	2400      	movs	r4, #0
   13c9c:	18c9      	adds	r1, r1, r3
   13c9e:	4162      	adcs	r2, r4
   13ca0:	0008      	movs	r0, r1
   13ca2:	0011      	movs	r1, r2
   13ca4:	4c0a      	ldr	r4, [pc, #40]	; (13cd0 <pulseEnable+0xdc>)
   13ca6:	4a0b      	ldr	r2, [pc, #44]	; (13cd4 <pulseEnable+0xe0>)
   13ca8:	2300      	movs	r3, #0
   13caa:	47a0      	blx	r4
   13cac:	0003      	movs	r3, r0
   13cae:	000c      	movs	r4, r1
   13cb0:	0018      	movs	r0, r3
   13cb2:	4b09      	ldr	r3, [pc, #36]	; (13cd8 <pulseEnable+0xe4>)
   13cb4:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13cb6:	46c0      	nop			; (mov r8, r8)
   13cb8:	46bd      	mov	sp, r7
   13cba:	b005      	add	sp, #20
   13cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cbe:	46c0      	nop			; (mov r8, r8)
   13cc0:	200006d2 	.word	0x200006d2
   13cc4:	0001379d 	.word	0x0001379d
   13cc8:	0002495d 	.word	0x0002495d
   13ccc:	006acfbf 	.word	0x006acfbf
   13cd0:	000268e5 	.word	0x000268e5
   13cd4:	006acfc0 	.word	0x006acfc0
   13cd8:	20000001 	.word	0x20000001
   13cdc:	00026925 	.word	0x00026925

00013ce0 <command>:

inline void command(uint8_t value) 
{
   13ce0:	b580      	push	{r7, lr}
   13ce2:	b082      	sub	sp, #8
   13ce4:	af00      	add	r7, sp, #0
   13ce6:	0002      	movs	r2, r0
   13ce8:	1dfb      	adds	r3, r7, #7
   13cea:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13cec:	1dfb      	adds	r3, r7, #7
   13cee:	781b      	ldrb	r3, [r3, #0]
   13cf0:	2100      	movs	r1, #0
   13cf2:	0018      	movs	r0, r3
   13cf4:	4b02      	ldr	r3, [pc, #8]	; (13d00 <command+0x20>)
   13cf6:	4798      	blx	r3
}
   13cf8:	46c0      	nop			; (mov r8, r8)
   13cfa:	46bd      	mov	sp, r7
   13cfc:	b002      	add	sp, #8
   13cfe:	bd80      	pop	{r7, pc}
   13d00:	00013d2d 	.word	0x00013d2d

00013d04 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13d04:	b580      	push	{r7, lr}
   13d06:	b082      	sub	sp, #8
   13d08:	af00      	add	r7, sp, #0
   13d0a:	0002      	movs	r2, r0
   13d0c:	1dfb      	adds	r3, r7, #7
   13d0e:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13d10:	1dfb      	adds	r3, r7, #7
   13d12:	781b      	ldrb	r3, [r3, #0]
   13d14:	2101      	movs	r1, #1
   13d16:	0018      	movs	r0, r3
   13d18:	4b03      	ldr	r3, [pc, #12]	; (13d28 <LCD_write+0x24>)
   13d1a:	4798      	blx	r3
	return 1;
   13d1c:	2301      	movs	r3, #1
}
   13d1e:	0018      	movs	r0, r3
   13d20:	46bd      	mov	sp, r7
   13d22:	b002      	add	sp, #8
   13d24:	bd80      	pop	{r7, pc}
   13d26:	46c0      	nop			; (mov r8, r8)
   13d28:	00013d2d 	.word	0x00013d2d

00013d2c <send>:

void send(uint8_t value, uint8_t mode) 
{
   13d2c:	b580      	push	{r7, lr}
   13d2e:	b082      	sub	sp, #8
   13d30:	af00      	add	r7, sp, #0
   13d32:	0002      	movs	r2, r0
   13d34:	1dfb      	adds	r3, r7, #7
   13d36:	701a      	strb	r2, [r3, #0]
   13d38:	1dbb      	adds	r3, r7, #6
   13d3a:	1c0a      	adds	r2, r1, #0
   13d3c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13d3e:	4b0d      	ldr	r3, [pc, #52]	; (13d74 <send+0x48>)
   13d40:	781a      	ldrb	r2, [r3, #0]
   13d42:	1dbb      	adds	r3, r7, #6
   13d44:	781b      	ldrb	r3, [r3, #0]
   13d46:	1e59      	subs	r1, r3, #1
   13d48:	418b      	sbcs	r3, r1
   13d4a:	b2db      	uxtb	r3, r3
   13d4c:	0019      	movs	r1, r3
   13d4e:	0010      	movs	r0, r2
   13d50:	4b09      	ldr	r3, [pc, #36]	; (13d78 <send+0x4c>)
   13d52:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13d54:	1dfb      	adds	r3, r7, #7
   13d56:	781b      	ldrb	r3, [r3, #0]
   13d58:	091b      	lsrs	r3, r3, #4
   13d5a:	b2db      	uxtb	r3, r3
   13d5c:	0018      	movs	r0, r3
   13d5e:	4b07      	ldr	r3, [pc, #28]	; (13d7c <send+0x50>)
   13d60:	4798      	blx	r3
		write4bits(value);
   13d62:	1dfb      	adds	r3, r7, #7
   13d64:	781b      	ldrb	r3, [r3, #0]
   13d66:	0018      	movs	r0, r3
   13d68:	4b04      	ldr	r3, [pc, #16]	; (13d7c <send+0x50>)
   13d6a:	4798      	blx	r3
	}
}
   13d6c:	46c0      	nop			; (mov r8, r8)
   13d6e:	46bd      	mov	sp, r7
   13d70:	b002      	add	sp, #8
   13d72:	bd80      	pop	{r7, pc}
   13d74:	200006d3 	.word	0x200006d3
   13d78:	0001379d 	.word	0x0001379d
   13d7c:	00013b9d 	.word	0x00013b9d

00013d80 <LCD_clear>:

void LCD_clear(void)
{
   13d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d82:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13d84:	2001      	movs	r0, #1
   13d86:	4b13      	ldr	r3, [pc, #76]	; (13dd4 <LCD_clear+0x54>)
   13d88:	4798      	blx	r3
	delay_us(2000);
   13d8a:	2000      	movs	r0, #0
   13d8c:	4b12      	ldr	r3, [pc, #72]	; (13dd8 <LCD_clear+0x58>)
   13d8e:	4798      	blx	r3
   13d90:	0003      	movs	r3, r0
   13d92:	001d      	movs	r5, r3
   13d94:	2300      	movs	r3, #0
   13d96:	001e      	movs	r6, r3
   13d98:	4c10      	ldr	r4, [pc, #64]	; (13ddc <LCD_clear+0x5c>)
   13d9a:	22fa      	movs	r2, #250	; 0xfa
   13d9c:	00d2      	lsls	r2, r2, #3
   13d9e:	2300      	movs	r3, #0
   13da0:	0028      	movs	r0, r5
   13da2:	0031      	movs	r1, r6
   13da4:	47a0      	blx	r4
   13da6:	0003      	movs	r3, r0
   13da8:	000c      	movs	r4, r1
   13daa:	0019      	movs	r1, r3
   13dac:	0022      	movs	r2, r4
   13dae:	4b0c      	ldr	r3, [pc, #48]	; (13de0 <LCD_clear+0x60>)
   13db0:	2400      	movs	r4, #0
   13db2:	18c9      	adds	r1, r1, r3
   13db4:	4162      	adcs	r2, r4
   13db6:	0008      	movs	r0, r1
   13db8:	0011      	movs	r1, r2
   13dba:	4c0a      	ldr	r4, [pc, #40]	; (13de4 <LCD_clear+0x64>)
   13dbc:	4a0a      	ldr	r2, [pc, #40]	; (13de8 <LCD_clear+0x68>)
   13dbe:	2300      	movs	r3, #0
   13dc0:	47a0      	blx	r4
   13dc2:	0003      	movs	r3, r0
   13dc4:	000c      	movs	r4, r1
   13dc6:	0018      	movs	r0, r3
   13dc8:	4b08      	ldr	r3, [pc, #32]	; (13dec <LCD_clear+0x6c>)
   13dca:	4798      	blx	r3
}
   13dcc:	46c0      	nop			; (mov r8, r8)
   13dce:	46bd      	mov	sp, r7
   13dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13dd2:	46c0      	nop			; (mov r8, r8)
   13dd4:	00013ce1 	.word	0x00013ce1
   13dd8:	0002495d 	.word	0x0002495d
   13ddc:	00026925 	.word	0x00026925
   13de0:	006acfbf 	.word	0x006acfbf
   13de4:	000268e5 	.word	0x000268e5
   13de8:	006acfc0 	.word	0x006acfc0
   13dec:	20000001 	.word	0x20000001

00013df0 <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13df0:	b580      	push	{r7, lr}
   13df2:	b084      	sub	sp, #16
   13df4:	af00      	add	r7, sp, #0
   13df6:	0002      	movs	r2, r0
   13df8:	6039      	str	r1, [r7, #0]
   13dfa:	1dfb      	adds	r3, r7, #7
   13dfc:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13dfe:	1dfb      	adds	r3, r7, #7
   13e00:	1dfa      	adds	r2, r7, #7
   13e02:	7812      	ldrb	r2, [r2, #0]
   13e04:	2107      	movs	r1, #7
   13e06:	400a      	ands	r2, r1
   13e08:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13e0a:	1dfb      	adds	r3, r7, #7
   13e0c:	781b      	ldrb	r3, [r3, #0]
   13e0e:	00db      	lsls	r3, r3, #3
   13e10:	b25b      	sxtb	r3, r3
   13e12:	2240      	movs	r2, #64	; 0x40
   13e14:	4313      	orrs	r3, r2
   13e16:	b25b      	sxtb	r3, r3
   13e18:	b2db      	uxtb	r3, r3
   13e1a:	0018      	movs	r0, r3
   13e1c:	4b0a      	ldr	r3, [pc, #40]	; (13e48 <LCD_Create_Custom_createChar+0x58>)
   13e1e:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13e20:	2300      	movs	r3, #0
   13e22:	60fb      	str	r3, [r7, #12]
   13e24:	e009      	b.n	13e3a <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   13e26:	68fb      	ldr	r3, [r7, #12]
   13e28:	683a      	ldr	r2, [r7, #0]
   13e2a:	18d3      	adds	r3, r2, r3
   13e2c:	781b      	ldrb	r3, [r3, #0]
   13e2e:	0018      	movs	r0, r3
   13e30:	4b06      	ldr	r3, [pc, #24]	; (13e4c <LCD_Create_Custom_createChar+0x5c>)
   13e32:	4798      	blx	r3
	for (int i=0; i<8; i++)
   13e34:	68fb      	ldr	r3, [r7, #12]
   13e36:	3301      	adds	r3, #1
   13e38:	60fb      	str	r3, [r7, #12]
   13e3a:	68fb      	ldr	r3, [r7, #12]
   13e3c:	2b07      	cmp	r3, #7
   13e3e:	ddf2      	ble.n	13e26 <LCD_Create_Custom_createChar+0x36>
	}
}
   13e40:	46c0      	nop			; (mov r8, r8)
   13e42:	46bd      	mov	sp, r7
   13e44:	b004      	add	sp, #16
   13e46:	bd80      	pop	{r7, pc}
   13e48:	00013ce1 	.word	0x00013ce1
   13e4c:	00013d05 	.word	0x00013d05

00013e50 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   13e50:	b580      	push	{r7, lr}
   13e52:	b084      	sub	sp, #16
   13e54:	af00      	add	r7, sp, #0
   13e56:	0002      	movs	r2, r0
   13e58:	1dfb      	adds	r3, r7, #7
   13e5a:	701a      	strb	r2, [r3, #0]
   13e5c:	1dbb      	adds	r3, r7, #6
   13e5e:	1c0a      	adds	r2, r1, #0
   13e60:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   13e62:	2304      	movs	r3, #4
   13e64:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   13e66:	1dbb      	adds	r3, r7, #6
   13e68:	781a      	ldrb	r2, [r3, #0]
   13e6a:	68fb      	ldr	r3, [r7, #12]
   13e6c:	429a      	cmp	r2, r3
   13e6e:	d304      	bcc.n	13e7a <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   13e70:	68fb      	ldr	r3, [r7, #12]
   13e72:	b2da      	uxtb	r2, r3
   13e74:	1dbb      	adds	r3, r7, #6
   13e76:	3a01      	subs	r2, #1
   13e78:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   13e7a:	4b10      	ldr	r3, [pc, #64]	; (13ebc <LCD_setCursor+0x6c>)
   13e7c:	781b      	ldrb	r3, [r3, #0]
   13e7e:	1dba      	adds	r2, r7, #6
   13e80:	7812      	ldrb	r2, [r2, #0]
   13e82:	429a      	cmp	r2, r3
   13e84:	d304      	bcc.n	13e90 <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   13e86:	4b0d      	ldr	r3, [pc, #52]	; (13ebc <LCD_setCursor+0x6c>)
   13e88:	781a      	ldrb	r2, [r3, #0]
   13e8a:	1dbb      	adds	r3, r7, #6
   13e8c:	3a01      	subs	r2, #1
   13e8e:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   13e90:	1dbb      	adds	r3, r7, #6
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	4a0a      	ldr	r2, [pc, #40]	; (13ec0 <LCD_setCursor+0x70>)
   13e96:	5cd2      	ldrb	r2, [r2, r3]
   13e98:	1dfb      	adds	r3, r7, #7
   13e9a:	781b      	ldrb	r3, [r3, #0]
   13e9c:	18d3      	adds	r3, r2, r3
   13e9e:	b2db      	uxtb	r3, r3
   13ea0:	b25b      	sxtb	r3, r3
   13ea2:	2280      	movs	r2, #128	; 0x80
   13ea4:	4252      	negs	r2, r2
   13ea6:	4313      	orrs	r3, r2
   13ea8:	b25b      	sxtb	r3, r3
   13eaa:	b2db      	uxtb	r3, r3
   13eac:	0018      	movs	r0, r3
   13eae:	4b05      	ldr	r3, [pc, #20]	; (13ec4 <LCD_setCursor+0x74>)
   13eb0:	4798      	blx	r3
}
   13eb2:	46c0      	nop			; (mov r8, r8)
   13eb4:	46bd      	mov	sp, r7
   13eb6:	b004      	add	sp, #16
   13eb8:	bd80      	pop	{r7, pc}
   13eba:	46c0      	nop			; (mov r8, r8)
   13ebc:	200006ca 	.word	0x200006ca
   13ec0:	200006c4 	.word	0x200006c4
   13ec4:	00013ce1 	.word	0x00013ce1

00013ec8 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   13ec8:	b580      	push	{r7, lr}
   13eca:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   13ecc:	4b08      	ldr	r3, [pc, #32]	; (13ef0 <LCD_display+0x28>)
   13ece:	781b      	ldrb	r3, [r3, #0]
   13ed0:	2204      	movs	r2, #4
   13ed2:	4313      	orrs	r3, r2
   13ed4:	b2da      	uxtb	r2, r3
   13ed6:	4b06      	ldr	r3, [pc, #24]	; (13ef0 <LCD_display+0x28>)
   13ed8:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   13eda:	4b05      	ldr	r3, [pc, #20]	; (13ef0 <LCD_display+0x28>)
   13edc:	781b      	ldrb	r3, [r3, #0]
   13ede:	2208      	movs	r2, #8
   13ee0:	4313      	orrs	r3, r2
   13ee2:	b2db      	uxtb	r3, r3
   13ee4:	0018      	movs	r0, r3
   13ee6:	4b03      	ldr	r3, [pc, #12]	; (13ef4 <LCD_display+0x2c>)
   13ee8:	4798      	blx	r3
}
   13eea:	46c0      	nop			; (mov r8, r8)
   13eec:	46bd      	mov	sp, r7
   13eee:	bd80      	pop	{r7, pc}
   13ef0:	200006c9 	.word	0x200006c9
   13ef4:	00013ce1 	.word	0x00013ce1

00013ef8 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   13ef8:	b580      	push	{r7, lr}
   13efa:	b084      	sub	sp, #16
   13efc:	af00      	add	r7, sp, #0
   13efe:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   13f00:	687b      	ldr	r3, [r7, #4]
   13f02:	0018      	movs	r0, r3
   13f04:	4b0f      	ldr	r3, [pc, #60]	; (13f44 <Buffer_writer+0x4c>)
   13f06:	4798      	blx	r3
   13f08:	0003      	movs	r3, r0
   13f0a:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   13f0c:	2300      	movs	r3, #0
   13f0e:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13f10:	e00b      	b.n	13f2a <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	1c5a      	adds	r2, r3, #1
   13f16:	607a      	str	r2, [r7, #4]
   13f18:	781b      	ldrb	r3, [r3, #0]
   13f1a:	0018      	movs	r0, r3
   13f1c:	4b0a      	ldr	r3, [pc, #40]	; (13f48 <Buffer_writer+0x50>)
   13f1e:	4798      	blx	r3
   13f20:	1e03      	subs	r3, r0, #0
   13f22:	d008      	beq.n	13f36 <Buffer_writer+0x3e>
   13f24:	68bb      	ldr	r3, [r7, #8]
   13f26:	3301      	adds	r3, #1
   13f28:	60bb      	str	r3, [r7, #8]
	while (size--) {
   13f2a:	68fb      	ldr	r3, [r7, #12]
   13f2c:	1e5a      	subs	r2, r3, #1
   13f2e:	60fa      	str	r2, [r7, #12]
   13f30:	2b00      	cmp	r3, #0
   13f32:	d1ee      	bne.n	13f12 <Buffer_writer+0x1a>
   13f34:	e000      	b.n	13f38 <Buffer_writer+0x40>
		else break;
   13f36:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   13f38:	68bb      	ldr	r3, [r7, #8]
}
   13f3a:	0018      	movs	r0, r3
   13f3c:	46bd      	mov	sp, r7
   13f3e:	b004      	add	sp, #16
   13f40:	bd80      	pop	{r7, pc}
   13f42:	46c0      	nop			; (mov r8, r8)
   13f44:	00029123 	.word	0x00029123
   13f48:	00013d05 	.word	0x00013d05

00013f4c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   13f4c:	b40f      	push	{r0, r1, r2, r3}
   13f4e:	b580      	push	{r7, lr}
   13f50:	b084      	sub	sp, #16
   13f52:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   13f54:	69bb      	ldr	r3, [r7, #24]
   13f56:	0018      	movs	r0, r3
   13f58:	4b11      	ldr	r3, [pc, #68]	; (13fa0 <lcd_printf+0x54>)
   13f5a:	4798      	blx	r3
   13f5c:	0003      	movs	r3, r0
   13f5e:	3303      	adds	r3, #3
   13f60:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   13f62:	68fb      	ldr	r3, [r7, #12]
   13f64:	0018      	movs	r0, r3
   13f66:	4b0f      	ldr	r3, [pc, #60]	; (13fa4 <lcd_printf+0x58>)
   13f68:	4798      	blx	r3
   13f6a:	0003      	movs	r3, r0
   13f6c:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   13f6e:	231c      	movs	r3, #28
   13f70:	18fb      	adds	r3, r7, r3
   13f72:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   13f74:	687a      	ldr	r2, [r7, #4]
   13f76:	69b9      	ldr	r1, [r7, #24]
   13f78:	68bb      	ldr	r3, [r7, #8]
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b0a      	ldr	r3, [pc, #40]	; (13fa8 <lcd_printf+0x5c>)
   13f7e:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   13f80:	68bb      	ldr	r3, [r7, #8]
   13f82:	0018      	movs	r0, r3
   13f84:	4b09      	ldr	r3, [pc, #36]	; (13fac <lcd_printf+0x60>)
   13f86:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   13f88:	68bb      	ldr	r3, [r7, #8]
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b08      	ldr	r3, [pc, #32]	; (13fb0 <lcd_printf+0x64>)
   13f8e:	4798      	blx	r3
}
   13f90:	46c0      	nop			; (mov r8, r8)
   13f92:	46bd      	mov	sp, r7
   13f94:	b004      	add	sp, #16
   13f96:	bc80      	pop	{r7}
   13f98:	bc08      	pop	{r3}
   13f9a:	b004      	add	sp, #16
   13f9c:	4718      	bx	r3
   13f9e:	46c0      	nop			; (mov r8, r8)
   13fa0:	00029123 	.word	0x00029123
   13fa4:	00028e11 	.word	0x00028e11
   13fa8:	00029411 	.word	0x00029411
   13fac:	00013ef9 	.word	0x00013ef9
   13fb0:	00028e25 	.word	0x00028e25

00013fb4 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   13fb4:	b580      	push	{r7, lr}
   13fb6:	b084      	sub	sp, #16
   13fb8:	af00      	add	r7, sp, #0
   13fba:	6078      	str	r0, [r7, #4]
	if (!str) return;
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	2b00      	cmp	r3, #0
   13fc0:	d028      	beq.n	14014 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	60fb      	str	r3, [r7, #12]
   13fc6:	e020      	b.n	1400a <StringtoUpperCase+0x56>
		*p = toupper(*p);
   13fc8:	230b      	movs	r3, #11
   13fca:	18fb      	adds	r3, r7, r3
   13fcc:	68fa      	ldr	r2, [r7, #12]
   13fce:	7812      	ldrb	r2, [r2, #0]
   13fd0:	701a      	strb	r2, [r3, #0]
   13fd2:	4b12      	ldr	r3, [pc, #72]	; (1401c <StringtoUpperCase+0x68>)
   13fd4:	4798      	blx	r3
   13fd6:	0002      	movs	r2, r0
   13fd8:	230b      	movs	r3, #11
   13fda:	18fb      	adds	r3, r7, r3
   13fdc:	781b      	ldrb	r3, [r3, #0]
   13fde:	3301      	adds	r3, #1
   13fe0:	18d3      	adds	r3, r2, r3
   13fe2:	781b      	ldrb	r3, [r3, #0]
   13fe4:	001a      	movs	r2, r3
   13fe6:	2303      	movs	r3, #3
   13fe8:	4013      	ands	r3, r2
   13fea:	2b02      	cmp	r3, #2
   13fec:	d104      	bne.n	13ff8 <StringtoUpperCase+0x44>
   13fee:	230b      	movs	r3, #11
   13ff0:	18fb      	adds	r3, r7, r3
   13ff2:	781b      	ldrb	r3, [r3, #0]
   13ff4:	3b20      	subs	r3, #32
   13ff6:	e002      	b.n	13ffe <StringtoUpperCase+0x4a>
   13ff8:	230b      	movs	r3, #11
   13ffa:	18fb      	adds	r3, r7, r3
   13ffc:	781b      	ldrb	r3, [r3, #0]
   13ffe:	b2da      	uxtb	r2, r3
   14000:	68fb      	ldr	r3, [r7, #12]
   14002:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   14004:	68fb      	ldr	r3, [r7, #12]
   14006:	3301      	adds	r3, #1
   14008:	60fb      	str	r3, [r7, #12]
   1400a:	68fb      	ldr	r3, [r7, #12]
   1400c:	781b      	ldrb	r3, [r3, #0]
   1400e:	2b00      	cmp	r3, #0
   14010:	d1da      	bne.n	13fc8 <StringtoUpperCase+0x14>
   14012:	e000      	b.n	14016 <StringtoUpperCase+0x62>
	if (!str) return;
   14014:	46c0      	nop			; (mov r8, r8)
	}
}
   14016:	46bd      	mov	sp, r7
   14018:	b004      	add	sp, #16
   1401a:	bd80      	pop	{r7, pc}
   1401c:	00028df5 	.word	0x00028df5

00014020 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   14020:	b580      	push	{r7, lr}
   14022:	b084      	sub	sp, #16
   14024:	af00      	add	r7, sp, #0
   14026:	6078      	str	r0, [r7, #4]
   14028:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   1402a:	683b      	ldr	r3, [r7, #0]
   1402c:	0018      	movs	r0, r3
   1402e:	4b10      	ldr	r3, [pc, #64]	; (14070 <StringstartsWith+0x50>)
   14030:	4798      	blx	r3
   14032:	0003      	movs	r3, r0
   14034:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   14036:	687b      	ldr	r3, [r7, #4]
   14038:	0018      	movs	r0, r3
   1403a:	4b0d      	ldr	r3, [pc, #52]	; (14070 <StringstartsWith+0x50>)
   1403c:	4798      	blx	r3
   1403e:	0003      	movs	r3, r0
   14040:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   14042:	68ba      	ldr	r2, [r7, #8]
   14044:	68fb      	ldr	r3, [r7, #12]
   14046:	429a      	cmp	r2, r3
   14048:	d309      	bcc.n	1405e <StringstartsWith+0x3e>
   1404a:	68fa      	ldr	r2, [r7, #12]
   1404c:	6879      	ldr	r1, [r7, #4]
   1404e:	683b      	ldr	r3, [r7, #0]
   14050:	0018      	movs	r0, r3
   14052:	4b08      	ldr	r3, [pc, #32]	; (14074 <StringstartsWith+0x54>)
   14054:	4798      	blx	r3
   14056:	1e03      	subs	r3, r0, #0
   14058:	d101      	bne.n	1405e <StringstartsWith+0x3e>
   1405a:	2301      	movs	r3, #1
   1405c:	e000      	b.n	14060 <StringstartsWith+0x40>
   1405e:	2300      	movs	r3, #0
   14060:	1c1a      	adds	r2, r3, #0
   14062:	2301      	movs	r3, #1
   14064:	4013      	ands	r3, r2
   14066:	b2db      	uxtb	r3, r3
}
   14068:	0018      	movs	r0, r3
   1406a:	46bd      	mov	sp, r7
   1406c:	b004      	add	sp, #16
   1406e:	bd80      	pop	{r7, pc}
   14070:	00029123 	.word	0x00029123
   14074:	00029131 	.word	0x00029131

00014078 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14078:	b580      	push	{r7, lr}
   1407a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1407c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14080:	4b02      	ldr	r3, [pc, #8]	; (1408c <NVIC_SystemReset+0x14>)
   14082:	4a03      	ldr	r2, [pc, #12]	; (14090 <NVIC_SystemReset+0x18>)
   14084:	60da      	str	r2, [r3, #12]
   14086:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1408a:	e7fe      	b.n	1408a <NVIC_SystemReset+0x12>
   1408c:	e000ed00 	.word	0xe000ed00
   14090:	05fa0004 	.word	0x05fa0004

00014094 <system_pinmux_get_group_from_gpio_pin>:
{
   14094:	b580      	push	{r7, lr}
   14096:	b084      	sub	sp, #16
   14098:	af00      	add	r7, sp, #0
   1409a:	0002      	movs	r2, r0
   1409c:	1dfb      	adds	r3, r7, #7
   1409e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   140a0:	230f      	movs	r3, #15
   140a2:	18fb      	adds	r3, r7, r3
   140a4:	1dfa      	adds	r2, r7, #7
   140a6:	7812      	ldrb	r2, [r2, #0]
   140a8:	09d2      	lsrs	r2, r2, #7
   140aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   140ac:	230e      	movs	r3, #14
   140ae:	18fb      	adds	r3, r7, r3
   140b0:	1dfa      	adds	r2, r7, #7
   140b2:	7812      	ldrb	r2, [r2, #0]
   140b4:	0952      	lsrs	r2, r2, #5
   140b6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   140b8:	4b0d      	ldr	r3, [pc, #52]	; (140f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   140ba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   140bc:	230f      	movs	r3, #15
   140be:	18fb      	adds	r3, r7, r3
   140c0:	781b      	ldrb	r3, [r3, #0]
   140c2:	2b00      	cmp	r3, #0
   140c4:	d10f      	bne.n	140e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   140c6:	230f      	movs	r3, #15
   140c8:	18fb      	adds	r3, r7, r3
   140ca:	781b      	ldrb	r3, [r3, #0]
   140cc:	009b      	lsls	r3, r3, #2
   140ce:	2210      	movs	r2, #16
   140d0:	4694      	mov	ip, r2
   140d2:	44bc      	add	ip, r7
   140d4:	4463      	add	r3, ip
   140d6:	3b08      	subs	r3, #8
   140d8:	681a      	ldr	r2, [r3, #0]
   140da:	230e      	movs	r3, #14
   140dc:	18fb      	adds	r3, r7, r3
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	01db      	lsls	r3, r3, #7
   140e2:	18d3      	adds	r3, r2, r3
   140e4:	e000      	b.n	140e8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   140e6:	2300      	movs	r3, #0
}
   140e8:	0018      	movs	r0, r3
   140ea:	46bd      	mov	sp, r7
   140ec:	b004      	add	sp, #16
   140ee:	bd80      	pop	{r7, pc}
   140f0:	41004400 	.word	0x41004400

000140f4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   140f4:	b580      	push	{r7, lr}
   140f6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   140f8:	4b02      	ldr	r3, [pc, #8]	; (14104 <system_reset+0x10>)
   140fa:	4798      	blx	r3
}
   140fc:	46c0      	nop			; (mov r8, r8)
   140fe:	46bd      	mov	sp, r7
   14100:	bd80      	pop	{r7, pc}
   14102:	46c0      	nop			; (mov r8, r8)
   14104:	00014079 	.word	0x00014079

00014108 <port_get_group_from_gpio_pin>:
{
   14108:	b580      	push	{r7, lr}
   1410a:	b082      	sub	sp, #8
   1410c:	af00      	add	r7, sp, #0
   1410e:	0002      	movs	r2, r0
   14110:	1dfb      	adds	r3, r7, #7
   14112:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14114:	1dfb      	adds	r3, r7, #7
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	0018      	movs	r0, r3
   1411a:	4b03      	ldr	r3, [pc, #12]	; (14128 <port_get_group_from_gpio_pin+0x20>)
   1411c:	4798      	blx	r3
   1411e:	0003      	movs	r3, r0
}
   14120:	0018      	movs	r0, r3
   14122:	46bd      	mov	sp, r7
   14124:	b002      	add	sp, #8
   14126:	bd80      	pop	{r7, pc}
   14128:	00014095 	.word	0x00014095

0001412c <port_get_config_defaults>:
{
   1412c:	b580      	push	{r7, lr}
   1412e:	b082      	sub	sp, #8
   14130:	af00      	add	r7, sp, #0
   14132:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14134:	687b      	ldr	r3, [r7, #4]
   14136:	2200      	movs	r2, #0
   14138:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1413a:	687b      	ldr	r3, [r7, #4]
   1413c:	2201      	movs	r2, #1
   1413e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   14140:	687b      	ldr	r3, [r7, #4]
   14142:	2200      	movs	r2, #0
   14144:	709a      	strb	r2, [r3, #2]
}
   14146:	46c0      	nop			; (mov r8, r8)
   14148:	46bd      	mov	sp, r7
   1414a:	b002      	add	sp, #8
   1414c:	bd80      	pop	{r7, pc}
	...

00014150 <port_pin_get_input_level>:
{
   14150:	b580      	push	{r7, lr}
   14152:	b084      	sub	sp, #16
   14154:	af00      	add	r7, sp, #0
   14156:	0002      	movs	r2, r0
   14158:	1dfb      	adds	r3, r7, #7
   1415a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1415c:	1dfb      	adds	r3, r7, #7
   1415e:	781b      	ldrb	r3, [r3, #0]
   14160:	0018      	movs	r0, r3
   14162:	4b0b      	ldr	r3, [pc, #44]	; (14190 <port_pin_get_input_level+0x40>)
   14164:	4798      	blx	r3
   14166:	0003      	movs	r3, r0
   14168:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1416a:	1dfb      	adds	r3, r7, #7
   1416c:	781b      	ldrb	r3, [r3, #0]
   1416e:	221f      	movs	r2, #31
   14170:	4013      	ands	r3, r2
   14172:	2201      	movs	r2, #1
   14174:	409a      	lsls	r2, r3
   14176:	0013      	movs	r3, r2
   14178:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1417a:	68fb      	ldr	r3, [r7, #12]
   1417c:	6a1b      	ldr	r3, [r3, #32]
   1417e:	68ba      	ldr	r2, [r7, #8]
   14180:	4013      	ands	r3, r2
   14182:	1e5a      	subs	r2, r3, #1
   14184:	4193      	sbcs	r3, r2
   14186:	b2db      	uxtb	r3, r3
}
   14188:	0018      	movs	r0, r3
   1418a:	46bd      	mov	sp, r7
   1418c:	b004      	add	sp, #16
   1418e:	bd80      	pop	{r7, pc}
   14190:	00014109 	.word	0x00014109

00014194 <port_pin_set_output_level>:
{
   14194:	b580      	push	{r7, lr}
   14196:	b084      	sub	sp, #16
   14198:	af00      	add	r7, sp, #0
   1419a:	0002      	movs	r2, r0
   1419c:	1dfb      	adds	r3, r7, #7
   1419e:	701a      	strb	r2, [r3, #0]
   141a0:	1dbb      	adds	r3, r7, #6
   141a2:	1c0a      	adds	r2, r1, #0
   141a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   141a6:	1dfb      	adds	r3, r7, #7
   141a8:	781b      	ldrb	r3, [r3, #0]
   141aa:	0018      	movs	r0, r3
   141ac:	4b0d      	ldr	r3, [pc, #52]	; (141e4 <port_pin_set_output_level+0x50>)
   141ae:	4798      	blx	r3
   141b0:	0003      	movs	r3, r0
   141b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   141b4:	1dfb      	adds	r3, r7, #7
   141b6:	781b      	ldrb	r3, [r3, #0]
   141b8:	221f      	movs	r2, #31
   141ba:	4013      	ands	r3, r2
   141bc:	2201      	movs	r2, #1
   141be:	409a      	lsls	r2, r3
   141c0:	0013      	movs	r3, r2
   141c2:	60bb      	str	r3, [r7, #8]
	if (level) {
   141c4:	1dbb      	adds	r3, r7, #6
   141c6:	781b      	ldrb	r3, [r3, #0]
   141c8:	2b00      	cmp	r3, #0
   141ca:	d003      	beq.n	141d4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   141cc:	68fb      	ldr	r3, [r7, #12]
   141ce:	68ba      	ldr	r2, [r7, #8]
   141d0:	619a      	str	r2, [r3, #24]
}
   141d2:	e002      	b.n	141da <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   141d4:	68fb      	ldr	r3, [r7, #12]
   141d6:	68ba      	ldr	r2, [r7, #8]
   141d8:	615a      	str	r2, [r3, #20]
}
   141da:	46c0      	nop			; (mov r8, r8)
   141dc:	46bd      	mov	sp, r7
   141de:	b004      	add	sp, #16
   141e0:	bd80      	pop	{r7, pc}
   141e2:	46c0      	nop			; (mov r8, r8)
   141e4:	00014109 	.word	0x00014109

000141e8 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   141e8:	b580      	push	{r7, lr}
   141ea:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   141ec:	4b0b      	ldr	r3, [pc, #44]	; (1421c <setObtainEvent+0x34>)
   141ee:	781b      	ldrb	r3, [r3, #0]
   141f0:	2201      	movs	r2, #1
   141f2:	4053      	eors	r3, r2
   141f4:	b2db      	uxtb	r3, r3
   141f6:	2b00      	cmp	r3, #0
   141f8:	d00c      	beq.n	14214 <setObtainEvent+0x2c>
   141fa:	4b09      	ldr	r3, [pc, #36]	; (14220 <setObtainEvent+0x38>)
   141fc:	4798      	blx	r3
   141fe:	0002      	movs	r2, r0
   14200:	4b08      	ldr	r3, [pc, #32]	; (14224 <setObtainEvent+0x3c>)
   14202:	681b      	ldr	r3, [r3, #0]
   14204:	1ad2      	subs	r2, r2, r3
   14206:	23fa      	movs	r3, #250	; 0xfa
   14208:	009b      	lsls	r3, r3, #2
   1420a:	429a      	cmp	r2, r3
   1420c:	d902      	bls.n	14214 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   1420e:	4b03      	ldr	r3, [pc, #12]	; (1421c <setObtainEvent+0x34>)
   14210:	2201      	movs	r2, #1
   14212:	701a      	strb	r2, [r3, #0]
	}
}
   14214:	46c0      	nop			; (mov r8, r8)
   14216:	46bd      	mov	sp, r7
   14218:	bd80      	pop	{r7, pc}
   1421a:	46c0      	nop			; (mov r8, r8)
   1421c:	2000076a 	.word	0x2000076a
   14220:	000202cd 	.word	0x000202cd
   14224:	20000810 	.word	0x20000810

00014228 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14228:	b580      	push	{r7, lr}
   1422a:	b082      	sub	sp, #8
   1422c:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   1422e:	1dfb      	adds	r3, r7, #7
   14230:	2201      	movs	r2, #1
   14232:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14234:	4b23      	ldr	r3, [pc, #140]	; (142c4 <operateOnStagedEvent+0x9c>)
   14236:	781b      	ldrb	r3, [r3, #0]
   14238:	2b00      	cmp	r3, #0
   1423a:	d003      	beq.n	14244 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   1423c:	1dfb      	adds	r3, r7, #7
   1423e:	4a22      	ldr	r2, [pc, #136]	; (142c8 <operateOnStagedEvent+0xa0>)
   14240:	7a12      	ldrb	r2, [r2, #8]
   14242:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14244:	4b21      	ldr	r3, [pc, #132]	; (142cc <operateOnStagedEvent+0xa4>)
   14246:	781b      	ldrb	r3, [r3, #0]
   14248:	2b00      	cmp	r3, #0
   1424a:	d037      	beq.n	142bc <operateOnStagedEvent+0x94>
   1424c:	4b20      	ldr	r3, [pc, #128]	; (142d0 <operateOnStagedEvent+0xa8>)
   1424e:	781b      	ldrb	r3, [r3, #0]
   14250:	2b01      	cmp	r3, #1
   14252:	d00b      	beq.n	1426c <operateOnStagedEvent+0x44>
   14254:	4b1f      	ldr	r3, [pc, #124]	; (142d4 <operateOnStagedEvent+0xac>)
   14256:	4798      	blx	r3
   14258:	0002      	movs	r2, r0
   1425a:	4b1f      	ldr	r3, [pc, #124]	; (142d8 <operateOnStagedEvent+0xb0>)
   1425c:	681b      	ldr	r3, [r3, #0]
   1425e:	1ad2      	subs	r2, r2, r3
   14260:	1dfb      	adds	r3, r7, #7
   14262:	781b      	ldrb	r3, [r3, #0]
   14264:	491d      	ldr	r1, [pc, #116]	; (142dc <operateOnStagedEvent+0xb4>)
   14266:	434b      	muls	r3, r1
   14268:	429a      	cmp	r2, r3
   1426a:	d927      	bls.n	142bc <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1426c:	4b1c      	ldr	r3, [pc, #112]	; (142e0 <operateOnStagedEvent+0xb8>)
   1426e:	78db      	ldrb	r3, [r3, #3]
   14270:	2b00      	cmp	r3, #0
   14272:	d01a      	beq.n	142aa <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14274:	4b13      	ldr	r3, [pc, #76]	; (142c4 <operateOnStagedEvent+0x9c>)
   14276:	781b      	ldrb	r3, [r3, #0]
   14278:	2b00      	cmp	r3, #0
   1427a:	d007      	beq.n	1428c <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   1427c:	4b19      	ldr	r3, [pc, #100]	; (142e4 <operateOnStagedEvent+0xbc>)
   1427e:	781a      	ldrb	r2, [r3, #0]
   14280:	4b19      	ldr	r3, [pc, #100]	; (142e8 <operateOnStagedEvent+0xc0>)
   14282:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14284:	4b0f      	ldr	r3, [pc, #60]	; (142c4 <operateOnStagedEvent+0x9c>)
   14286:	2200      	movs	r2, #0
   14288:	701a      	strb	r2, [r3, #0]
   1428a:	e015      	b.n	142b8 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   1428c:	4b17      	ldr	r3, [pc, #92]	; (142ec <operateOnStagedEvent+0xc4>)
   1428e:	781b      	ldrb	r3, [r3, #0]
   14290:	2b00      	cmp	r3, #0
   14292:	d011      	beq.n	142b8 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14294:	4b13      	ldr	r3, [pc, #76]	; (142e4 <operateOnStagedEvent+0xbc>)
   14296:	781a      	ldrb	r2, [r3, #0]
   14298:	4b15      	ldr	r3, [pc, #84]	; (142f0 <operateOnStagedEvent+0xc8>)
   1429a:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   1429c:	4b15      	ldr	r3, [pc, #84]	; (142f4 <operateOnStagedEvent+0xcc>)
   1429e:	2201      	movs	r2, #1
   142a0:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   142a2:	4b12      	ldr	r3, [pc, #72]	; (142ec <operateOnStagedEvent+0xc4>)
   142a4:	2200      	movs	r2, #0
   142a6:	701a      	strb	r2, [r3, #0]
   142a8:	e006      	b.n	142b8 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   142aa:	4b0e      	ldr	r3, [pc, #56]	; (142e4 <operateOnStagedEvent+0xbc>)
   142ac:	781a      	ldrb	r2, [r3, #0]
   142ae:	4b0e      	ldr	r3, [pc, #56]	; (142e8 <operateOnStagedEvent+0xc0>)
   142b0:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   142b2:	4b04      	ldr	r3, [pc, #16]	; (142c4 <operateOnStagedEvent+0x9c>)
   142b4:	2200      	movs	r2, #0
   142b6:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   142b8:	4b0f      	ldr	r3, [pc, #60]	; (142f8 <operateOnStagedEvent+0xd0>)
   142ba:	4798      	blx	r3
	}
}
   142bc:	46c0      	nop			; (mov r8, r8)
   142be:	46bd      	mov	sp, r7
   142c0:	b002      	add	sp, #8
   142c2:	bd80      	pop	{r7, pc}
   142c4:	200007ce 	.word	0x200007ce
   142c8:	20000654 	.word	0x20000654
   142cc:	2000076a 	.word	0x2000076a
   142d0:	200006d9 	.word	0x200006d9
   142d4:	000202cd 	.word	0x000202cd
   142d8:	200007f0 	.word	0x200007f0
   142dc:	0000ea60 	.word	0x0000ea60
   142e0:	2000062c 	.word	0x2000062c
   142e4:	2000076d 	.word	0x2000076d
   142e8:	2000075b 	.word	0x2000075b
   142ec:	20000786 	.word	0x20000786
   142f0:	20000721 	.word	0x20000721
   142f4:	2000073b 	.word	0x2000073b
   142f8:	000142fd 	.word	0x000142fd

000142fc <makeResponseAction>:

void makeResponseAction(void)
{
   142fc:	b580      	push	{r7, lr}
   142fe:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   14300:	4b07      	ldr	r3, [pc, #28]	; (14320 <makeResponseAction+0x24>)
   14302:	795b      	ldrb	r3, [r3, #5]
   14304:	2b4e      	cmp	r3, #78	; 0x4e
   14306:	d103      	bne.n	14310 <makeResponseAction+0x14>
   14308:	4b06      	ldr	r3, [pc, #24]	; (14324 <makeResponseAction+0x28>)
   1430a:	781b      	ldrb	r3, [r3, #0]
   1430c:	2b00      	cmp	r3, #0
   1430e:	d004      	beq.n	1431a <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
   14310:	4b05      	ldr	r3, [pc, #20]	; (14328 <makeResponseAction+0x2c>)
   14312:	2201      	movs	r2, #1
   14314:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   14316:	4b05      	ldr	r3, [pc, #20]	; (1432c <makeResponseAction+0x30>)
   14318:	4798      	blx	r3
	}
}
   1431a:	46c0      	nop			; (mov r8, r8)
   1431c:	46bd      	mov	sp, r7
   1431e:	bd80      	pop	{r7, pc}
   14320:	20000654 	.word	0x20000654
   14324:	2000073b 	.word	0x2000073b
   14328:	2000073c 	.word	0x2000073c
   1432c:	00014565 	.word	0x00014565

00014330 <endCall>:

void endCall(void)
{
   14330:	b580      	push	{r7, lr}
   14332:	af00      	add	r7, sp, #0
	nr  = 0;
   14334:	4b6d      	ldr	r3, [pc, #436]	; (144ec <endCall+0x1bc>)
   14336:	2200      	movs	r2, #0
   14338:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1433a:	4b6d      	ldr	r3, [pc, #436]	; (144f0 <endCall+0x1c0>)
   1433c:	2200      	movs	r2, #0
   1433e:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14340:	4b6c      	ldr	r3, [pc, #432]	; (144f4 <endCall+0x1c4>)
   14342:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14344:	2200      	movs	r2, #0
   14346:	2100      	movs	r1, #0
   14348:	2000      	movs	r0, #0
   1434a:	4b6b      	ldr	r3, [pc, #428]	; (144f8 <endCall+0x1c8>)
   1434c:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   1434e:	23fa      	movs	r3, #250	; 0xfa
   14350:	009b      	lsls	r3, r3, #2
   14352:	0018      	movs	r0, r3
   14354:	4b69      	ldr	r3, [pc, #420]	; (144fc <endCall+0x1cc>)
   14356:	4798      	blx	r3
	freezeIncomingCalls = false;
   14358:	4b69      	ldr	r3, [pc, #420]	; (14500 <endCall+0x1d0>)
   1435a:	2200      	movs	r2, #0
   1435c:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1435e:	4b69      	ldr	r3, [pc, #420]	; (14504 <endCall+0x1d4>)
   14360:	785b      	ldrb	r3, [r3, #1]
   14362:	2b00      	cmp	r3, #0
   14364:	d002      	beq.n	1436c <endCall+0x3c>
	{
		zeroPressed=false;
   14366:	4b68      	ldr	r3, [pc, #416]	; (14508 <endCall+0x1d8>)
   14368:	2200      	movs	r2, #0
   1436a:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1436c:	4b65      	ldr	r3, [pc, #404]	; (14504 <endCall+0x1d4>)
   1436e:	78db      	ldrb	r3, [r3, #3]
   14370:	2b01      	cmp	r3, #1
   14372:	d11d      	bne.n	143b0 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14374:	4b65      	ldr	r3, [pc, #404]	; (1450c <endCall+0x1dc>)
   14376:	781b      	ldrb	r3, [r3, #0]
   14378:	b2db      	uxtb	r3, r3
   1437a:	2b4e      	cmp	r3, #78	; 0x4e
   1437c:	d004      	beq.n	14388 <endCall+0x58>
   1437e:	4b63      	ldr	r3, [pc, #396]	; (1450c <endCall+0x1dc>)
   14380:	781b      	ldrb	r3, [r3, #0]
   14382:	b2db      	uxtb	r3, r3
   14384:	2b52      	cmp	r3, #82	; 0x52
   14386:	d10d      	bne.n	143a4 <endCall+0x74>
   14388:	4b61      	ldr	r3, [pc, #388]	; (14510 <endCall+0x1e0>)
   1438a:	781b      	ldrb	r3, [r3, #0]
   1438c:	b2db      	uxtb	r3, r3
   1438e:	2b4f      	cmp	r3, #79	; 0x4f
   14390:	d108      	bne.n	143a4 <endCall+0x74>
   14392:	4b60      	ldr	r3, [pc, #384]	; (14514 <endCall+0x1e4>)
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	2201      	movs	r2, #1
   14398:	4053      	eors	r3, r2
   1439a:	b2db      	uxtb	r3, r3
   1439c:	2b00      	cmp	r3, #0
   1439e:	d001      	beq.n	143a4 <endCall+0x74>
   143a0:	2301      	movs	r3, #1
   143a2:	e000      	b.n	143a6 <endCall+0x76>
   143a4:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   143a6:	1c1a      	adds	r2, r3, #0
   143a8:	2301      	movs	r3, #1
   143aa:	4013      	ands	r3, r2
   143ac:	b2db      	uxtb	r3, r3
   143ae:	e015      	b.n	143dc <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   143b0:	4b56      	ldr	r3, [pc, #344]	; (1450c <endCall+0x1dc>)
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	b2db      	uxtb	r3, r3
   143b6:	2b4e      	cmp	r3, #78	; 0x4e
   143b8:	d004      	beq.n	143c4 <endCall+0x94>
   143ba:	4b54      	ldr	r3, [pc, #336]	; (1450c <endCall+0x1dc>)
   143bc:	781b      	ldrb	r3, [r3, #0]
   143be:	b2db      	uxtb	r3, r3
   143c0:	2b52      	cmp	r3, #82	; 0x52
   143c2:	d106      	bne.n	143d2 <endCall+0xa2>
   143c4:	4b52      	ldr	r3, [pc, #328]	; (14510 <endCall+0x1e0>)
   143c6:	781b      	ldrb	r3, [r3, #0]
   143c8:	b2db      	uxtb	r3, r3
   143ca:	2b4f      	cmp	r3, #79	; 0x4f
   143cc:	d101      	bne.n	143d2 <endCall+0xa2>
   143ce:	2301      	movs	r3, #1
   143d0:	e000      	b.n	143d4 <endCall+0xa4>
   143d2:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   143d4:	1c1a      	adds	r2, r3, #0
   143d6:	2301      	movs	r3, #1
   143d8:	4013      	ands	r3, r2
   143da:	b2db      	uxtb	r3, r3
   143dc:	2b00      	cmp	r3, #0
   143de:	d021      	beq.n	14424 <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   143e0:	4b4d      	ldr	r3, [pc, #308]	; (14518 <endCall+0x1e8>)
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	2b00      	cmp	r3, #0
   143e6:	d11d      	bne.n	14424 <endCall+0xf4>
   143e8:	4b4c      	ldr	r3, [pc, #304]	; (1451c <endCall+0x1ec>)
   143ea:	781b      	ldrb	r3, [r3, #0]
   143ec:	2201      	movs	r2, #1
   143ee:	4053      	eors	r3, r2
   143f0:	b2db      	uxtb	r3, r3
   143f2:	2b00      	cmp	r3, #0
   143f4:	d016      	beq.n	14424 <endCall+0xf4>
   143f6:	4b4a      	ldr	r3, [pc, #296]	; (14520 <endCall+0x1f0>)
   143f8:	795b      	ldrb	r3, [r3, #5]
   143fa:	2b54      	cmp	r3, #84	; 0x54
   143fc:	d112      	bne.n	14424 <endCall+0xf4>
   143fe:	4b49      	ldr	r3, [pc, #292]	; (14524 <endCall+0x1f4>)
   14400:	789b      	ldrb	r3, [r3, #2]
   14402:	2b01      	cmp	r3, #1
   14404:	d90e      	bls.n	14424 <endCall+0xf4>
		{
			retries=1;
   14406:	4b44      	ldr	r3, [pc, #272]	; (14518 <endCall+0x1e8>)
   14408:	2201      	movs	r2, #1
   1440a:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   1440c:	4b46      	ldr	r3, [pc, #280]	; (14528 <endCall+0x1f8>)
   1440e:	2201      	movs	r2, #1
   14410:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   14412:	4b46      	ldr	r3, [pc, #280]	; (1452c <endCall+0x1fc>)
   14414:	4798      	blx	r3
   14416:	0002      	movs	r2, r0
   14418:	4b45      	ldr	r3, [pc, #276]	; (14530 <endCall+0x200>)
   1441a:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   1441c:	4b45      	ldr	r3, [pc, #276]	; (14534 <endCall+0x204>)
   1441e:	781a      	ldrb	r2, [r3, #0]
   14420:	4b45      	ldr	r3, [pc, #276]	; (14538 <endCall+0x208>)
   14422:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14424:	4b37      	ldr	r3, [pc, #220]	; (14504 <endCall+0x1d4>)
   14426:	78db      	ldrb	r3, [r3, #3]
   14428:	2b00      	cmp	r3, #0
   1442a:	d047      	beq.n	144bc <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   1442c:	4b37      	ldr	r3, [pc, #220]	; (1450c <endCall+0x1dc>)
   1442e:	781b      	ldrb	r3, [r3, #0]
   14430:	b2db      	uxtb	r3, r3
   14432:	2b49      	cmp	r3, #73	; 0x49
   14434:	d004      	beq.n	14440 <endCall+0x110>
   14436:	4b35      	ldr	r3, [pc, #212]	; (1450c <endCall+0x1dc>)
   14438:	781b      	ldrb	r3, [r3, #0]
   1443a:	b2db      	uxtb	r3, r3
   1443c:	2b52      	cmp	r3, #82	; 0x52
   1443e:	d137      	bne.n	144b0 <endCall+0x180>
   14440:	4b33      	ldr	r3, [pc, #204]	; (14510 <endCall+0x1e0>)
   14442:	781b      	ldrb	r3, [r3, #0]
   14444:	b2db      	uxtb	r3, r3
   14446:	2b4f      	cmp	r3, #79	; 0x4f
   14448:	d132      	bne.n	144b0 <endCall+0x180>
   1444a:	4b32      	ldr	r3, [pc, #200]	; (14514 <endCall+0x1e4>)
   1444c:	781b      	ldrb	r3, [r3, #0]
   1444e:	2b00      	cmp	r3, #0
   14450:	d02e      	beq.n	144b0 <endCall+0x180>
   14452:	4b3a      	ldr	r3, [pc, #232]	; (1453c <endCall+0x20c>)
   14454:	795b      	ldrb	r3, [r3, #5]
   14456:	2b00      	cmp	r3, #0
   14458:	d02a      	beq.n	144b0 <endCall+0x180>
		{
			m2mEventCalls++;
   1445a:	4b39      	ldr	r3, [pc, #228]	; (14540 <endCall+0x210>)
   1445c:	781b      	ldrb	r3, [r3, #0]
   1445e:	3301      	adds	r3, #1
   14460:	b2da      	uxtb	r2, r3
   14462:	4b37      	ldr	r3, [pc, #220]	; (14540 <endCall+0x210>)
   14464:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   14466:	4b37      	ldr	r3, [pc, #220]	; (14544 <endCall+0x214>)
   14468:	781b      	ldrb	r3, [r3, #0]
   1446a:	2b00      	cmp	r3, #0
   1446c:	d006      	beq.n	1447c <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   1446e:	4b36      	ldr	r3, [pc, #216]	; (14548 <endCall+0x218>)
   14470:	781b      	ldrb	r3, [r3, #0]
   14472:	2100      	movs	r1, #0
   14474:	0018      	movs	r0, r3
   14476:	4b35      	ldr	r3, [pc, #212]	; (1454c <endCall+0x21c>)
   14478:	4798      	blx	r3
   1447a:	e016      	b.n	144aa <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
   1447c:	4b30      	ldr	r3, [pc, #192]	; (14540 <endCall+0x210>)
   1447e:	781b      	ldrb	r3, [r3, #0]
   14480:	2b01      	cmp	r3, #1
   14482:	d80c      	bhi.n	1449e <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
   14484:	4b29      	ldr	r3, [pc, #164]	; (1452c <endCall+0x1fc>)
   14486:	4798      	blx	r3
   14488:	0002      	movs	r2, r0
   1448a:	4b29      	ldr	r3, [pc, #164]	; (14530 <endCall+0x200>)
   1448c:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   1448e:	4b2e      	ldr	r3, [pc, #184]	; (14548 <endCall+0x218>)
   14490:	781a      	ldrb	r2, [r3, #0]
   14492:	4b29      	ldr	r3, [pc, #164]	; (14538 <endCall+0x208>)
   14494:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   14496:	4b2e      	ldr	r3, [pc, #184]	; (14550 <endCall+0x220>)
   14498:	2201      	movs	r2, #1
   1449a:	701a      	strb	r2, [r3, #0]
   1449c:	e005      	b.n	144aa <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   1449e:	4b2a      	ldr	r3, [pc, #168]	; (14548 <endCall+0x218>)
   144a0:	781b      	ldrb	r3, [r3, #0]
   144a2:	2103      	movs	r1, #3
   144a4:	0018      	movs	r0, r3
   144a6:	4b29      	ldr	r3, [pc, #164]	; (1454c <endCall+0x21c>)
   144a8:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   144aa:	4b1a      	ldr	r3, [pc, #104]	; (14514 <endCall+0x1e4>)
   144ac:	2200      	movs	r2, #0
   144ae:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   144b0:	4b28      	ldr	r3, [pc, #160]	; (14554 <endCall+0x224>)
   144b2:	2200      	movs	r2, #0
   144b4:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   144b6:	4b23      	ldr	r3, [pc, #140]	; (14544 <endCall+0x214>)
   144b8:	2200      	movs	r2, #0
   144ba:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   144bc:	4b17      	ldr	r3, [pc, #92]	; (1451c <endCall+0x1ec>)
   144be:	2200      	movs	r2, #0
   144c0:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   144c2:	4b12      	ldr	r3, [pc, #72]	; (1450c <endCall+0x1dc>)
   144c4:	224e      	movs	r2, #78	; 0x4e
   144c6:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   144c8:	4b11      	ldr	r3, [pc, #68]	; (14510 <endCall+0x1e0>)
   144ca:	224e      	movs	r2, #78	; 0x4e
   144cc:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   144ce:	4b22      	ldr	r3, [pc, #136]	; (14558 <endCall+0x228>)
   144d0:	2200      	movs	r2, #0
   144d2:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   144d4:	4b15      	ldr	r3, [pc, #84]	; (1452c <endCall+0x1fc>)
   144d6:	4798      	blx	r3
   144d8:	0002      	movs	r2, r0
   144da:	4b20      	ldr	r3, [pc, #128]	; (1455c <endCall+0x22c>)
   144dc:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   144de:	4b20      	ldr	r3, [pc, #128]	; (14560 <endCall+0x230>)
   144e0:	2200      	movs	r2, #0
   144e2:	701a      	strb	r2, [r3, #0]
}
   144e4:	46c0      	nop			; (mov r8, r8)
   144e6:	46bd      	mov	sp, r7
   144e8:	bd80      	pop	{r7, pc}
   144ea:	46c0      	nop			; (mov r8, r8)
   144ec:	200006d8 	.word	0x200006d8
   144f0:	20000794 	.word	0x20000794
   144f4:	00013021 	.word	0x00013021
   144f8:	0001cbbd 	.word	0x0001cbbd
   144fc:	0001ff69 	.word	0x0001ff69
   14500:	2000073c 	.word	0x2000073c
   14504:	2000062c 	.word	0x2000062c
   14508:	2000080b 	.word	0x2000080b
   1450c:	200007d8 	.word	0x200007d8
   14510:	20000787 	.word	0x20000787
   14514:	2000073b 	.word	0x2000073b
   14518:	200006d9 	.word	0x200006d9
   1451c:	20000796 	.word	0x20000796
   14520:	20000654 	.word	0x20000654
   14524:	20000614 	.word	0x20000614
   14528:	200007ce 	.word	0x200007ce
   1452c:	000202cd 	.word	0x000202cd
   14530:	200007f0 	.word	0x200007f0
   14534:	2000075b 	.word	0x2000075b
   14538:	2000076d 	.word	0x2000076d
   1453c:	20000554 	.word	0x20000554
   14540:	200007cf 	.word	0x200007cf
   14544:	20000720 	.word	0x20000720
   14548:	20000721 	.word	0x20000721
   1454c:	0001ba69 	.word	0x0001ba69
   14550:	20000786 	.word	0x20000786
   14554:	200007cc 	.word	0x200007cc
   14558:	20000790 	.word	0x20000790
   1455c:	20000810 	.word	0x20000810
   14560:	2000076a 	.word	0x2000076a

00014564 <makeCall>:


void makeCall(void)
{
   14564:	b580      	push	{r7, lr}
   14566:	b086      	sub	sp, #24
   14568:	af00      	add	r7, sp, #0
	inCall=true;
   1456a:	4b20      	ldr	r3, [pc, #128]	; (145ec <makeCall+0x88>)
   1456c:	2201      	movs	r2, #1
   1456e:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14570:	1d3b      	adds	r3, r7, #4
   14572:	0018      	movs	r0, r3
   14574:	2314      	movs	r3, #20
   14576:	001a      	movs	r2, r3
   14578:	2100      	movs	r1, #0
   1457a:	4b1d      	ldr	r3, [pc, #116]	; (145f0 <makeCall+0x8c>)
   1457c:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   1457e:	4b1d      	ldr	r3, [pc, #116]	; (145f4 <makeCall+0x90>)
   14580:	795b      	ldrb	r3, [r3, #5]
   14582:	2b00      	cmp	r3, #0
   14584:	d008      	beq.n	14598 <makeCall+0x34>
   14586:	4b1c      	ldr	r3, [pc, #112]	; (145f8 <makeCall+0x94>)
   14588:	781b      	ldrb	r3, [r3, #0]
   1458a:	2b00      	cmp	r3, #0
   1458c:	d004      	beq.n	14598 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   1458e:	1d3b      	adds	r3, r7, #4
   14590:	0018      	movs	r0, r3
   14592:	4b1a      	ldr	r3, [pc, #104]	; (145fc <makeCall+0x98>)
   14594:	4798      	blx	r3
   14596:	e00f      	b.n	145b8 <makeCall+0x54>
	}
	else
	{
		if(retries)
   14598:	4b19      	ldr	r3, [pc, #100]	; (14600 <makeCall+0x9c>)
   1459a:	781b      	ldrb	r3, [r3, #0]
   1459c:	2b00      	cmp	r3, #0
   1459e:	d007      	beq.n	145b0 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   145a0:	4b18      	ldr	r3, [pc, #96]	; (14604 <makeCall+0xa0>)
   145a2:	791a      	ldrb	r2, [r3, #4]
   145a4:	1d3b      	adds	r3, r7, #4
   145a6:	0011      	movs	r1, r2
   145a8:	0018      	movs	r0, r3
   145aa:	4b17      	ldr	r3, [pc, #92]	; (14608 <makeCall+0xa4>)
   145ac:	4798      	blx	r3
   145ae:	e003      	b.n	145b8 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   145b0:	1d3b      	adds	r3, r7, #4
   145b2:	0018      	movs	r0, r3
   145b4:	4b15      	ldr	r3, [pc, #84]	; (1460c <makeCall+0xa8>)
   145b6:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   145b8:	1d3b      	adds	r3, r7, #4
   145ba:	0018      	movs	r0, r3
   145bc:	4b14      	ldr	r3, [pc, #80]	; (14610 <makeCall+0xac>)
   145be:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   145c0:	1d3b      	adds	r3, r7, #4
   145c2:	2200      	movs	r2, #0
   145c4:	0019      	movs	r1, r3
   145c6:	2003      	movs	r0, #3
   145c8:	4b12      	ldr	r3, [pc, #72]	; (14614 <makeCall+0xb0>)
   145ca:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   145cc:	4b12      	ldr	r3, [pc, #72]	; (14618 <makeCall+0xb4>)
   145ce:	4798      	blx	r3
   145d0:	0002      	movs	r2, r0
   145d2:	4b12      	ldr	r3, [pc, #72]	; (1461c <makeCall+0xb8>)
   145d4:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   145d6:	4b12      	ldr	r3, [pc, #72]	; (14620 <makeCall+0xbc>)
   145d8:	2252      	movs	r2, #82	; 0x52
   145da:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   145dc:	4b11      	ldr	r3, [pc, #68]	; (14624 <makeCall+0xc0>)
   145de:	224f      	movs	r2, #79	; 0x4f
   145e0:	701a      	strb	r2, [r3, #0]
}
   145e2:	46c0      	nop			; (mov r8, r8)
   145e4:	46bd      	mov	sp, r7
   145e6:	b006      	add	sp, #24
   145e8:	bd80      	pop	{r7, pc}
   145ea:	46c0      	nop			; (mov r8, r8)
   145ec:	20000794 	.word	0x20000794
   145f0:	00028e93 	.word	0x00028e93
   145f4:	20000554 	.word	0x20000554
   145f8:	2000073b 	.word	0x2000073b
   145fc:	00010b05 	.word	0x00010b05
   14600:	200006d9 	.word	0x200006d9
   14604:	20000614 	.word	0x20000614
   14608:	00010915 	.word	0x00010915
   1460c:	00010d1d 	.word	0x00010d1d
   14610:	00012e5d 	.word	0x00012e5d
   14614:	0001cbbd 	.word	0x0001cbbd
   14618:	000202cd 	.word	0x000202cd
   1461c:	20000814 	.word	0x20000814
   14620:	200007d8 	.word	0x200007d8
   14624:	20000787 	.word	0x20000787

00014628 <acceptCall>:

void acceptCall(void)
{
   14628:	b580      	push	{r7, lr}
   1462a:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   1462c:	4b0a      	ldr	r3, [pc, #40]	; (14658 <acceptCall+0x30>)
   1462e:	2200      	movs	r2, #0
   14630:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14632:	4b0a      	ldr	r3, [pc, #40]	; (1465c <acceptCall+0x34>)
   14634:	2201      	movs	r2, #1
   14636:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   14638:	4b09      	ldr	r3, [pc, #36]	; (14660 <acceptCall+0x38>)
   1463a:	4798      	blx	r3
	currentStatus = 'I';
   1463c:	4b09      	ldr	r3, [pc, #36]	; (14664 <acceptCall+0x3c>)
   1463e:	2249      	movs	r2, #73	; 0x49
   14640:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14642:	4b09      	ldr	r3, [pc, #36]	; (14668 <acceptCall+0x40>)
   14644:	2249      	movs	r2, #73	; 0x49
   14646:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   14648:	2101      	movs	r1, #1
   1464a:	204d      	movs	r0, #77	; 0x4d
   1464c:	4b07      	ldr	r3, [pc, #28]	; (1466c <acceptCall+0x44>)
   1464e:	4798      	blx	r3
	//displayInIncomingCall
}
   14650:	46c0      	nop			; (mov r8, r8)
   14652:	46bd      	mov	sp, r7
   14654:	bd80      	pop	{r7, pc}
   14656:	46c0      	nop			; (mov r8, r8)
   14658:	20000790 	.word	0x20000790
   1465c:	20000796 	.word	0x20000796
   14660:	00012ef5 	.word	0x00012ef5
   14664:	200007d8 	.word	0x200007d8
   14668:	20000787 	.word	0x20000787
   1466c:	00014671 	.word	0x00014671

00014670 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14670:	b580      	push	{r7, lr}
   14672:	b082      	sub	sp, #8
   14674:	af00      	add	r7, sp, #0
   14676:	0002      	movs	r2, r0
   14678:	1dfb      	adds	r3, r7, #7
   1467a:	701a      	strb	r2, [r3, #0]
   1467c:	1dbb      	adds	r3, r7, #6
   1467e:	1c0a      	adds	r2, r1, #0
   14680:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   14682:	4b14      	ldr	r3, [pc, #80]	; (146d4 <playSound+0x64>)
   14684:	4798      	blx	r3
	bplaySound = true;
   14686:	4b14      	ldr	r3, [pc, #80]	; (146d8 <playSound+0x68>)
   14688:	2201      	movs	r2, #1
   1468a:	701a      	strb	r2, [r3, #0]
	if (newAction)
   1468c:	1dbb      	adds	r3, r7, #6
   1468e:	781b      	ldrb	r3, [r3, #0]
   14690:	2b00      	cmp	r3, #0
   14692:	d016      	beq.n	146c2 <playSound+0x52>
	{
		maxPlayingFiles=1;
   14694:	4b11      	ldr	r3, [pc, #68]	; (146dc <playSound+0x6c>)
   14696:	2201      	movs	r2, #1
   14698:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   1469a:	4b11      	ldr	r3, [pc, #68]	; (146e0 <playSound+0x70>)
   1469c:	2200      	movs	r2, #0
   1469e:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   146a0:	4b0f      	ldr	r3, [pc, #60]	; (146e0 <playSound+0x70>)
   146a2:	781b      	ldrb	r3, [r3, #0]
   146a4:	0019      	movs	r1, r3
   146a6:	4b0f      	ldr	r3, [pc, #60]	; (146e4 <playSound+0x74>)
   146a8:	1dfa      	adds	r2, r7, #7
   146aa:	7812      	ldrb	r2, [r2, #0]
   146ac:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   146ae:	4b0c      	ldr	r3, [pc, #48]	; (146e0 <playSound+0x70>)
   146b0:	781b      	ldrb	r3, [r3, #0]
   146b2:	3301      	adds	r3, #1
   146b4:	4a0b      	ldr	r2, [pc, #44]	; (146e4 <playSound+0x74>)
   146b6:	2100      	movs	r1, #0
   146b8:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   146ba:	4b0b      	ldr	r3, [pc, #44]	; (146e8 <playSound+0x78>)
   146bc:	1dfa      	adds	r2, r7, #7
   146be:	7812      	ldrb	r2, [r2, #0]
   146c0:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   146c2:	4b0a      	ldr	r3, [pc, #40]	; (146ec <playSound+0x7c>)
   146c4:	1dfa      	adds	r2, r7, #7
   146c6:	7812      	ldrb	r2, [r2, #0]
   146c8:	701a      	strb	r2, [r3, #0]
}
   146ca:	46c0      	nop			; (mov r8, r8)
   146cc:	46bd      	mov	sp, r7
   146ce:	b002      	add	sp, #8
   146d0:	bd80      	pop	{r7, pc}
   146d2:	46c0      	nop			; (mov r8, r8)
   146d4:	00013081 	.word	0x00013081
   146d8:	20000861 	.word	0x20000861
   146dc:	200007d0 	.word	0x200007d0
   146e0:	200007c0 	.word	0x200007c0
   146e4:	20000744 	.word	0x20000744
   146e8:	2000075b 	.word	0x2000075b
   146ec:	200007bf 	.word	0x200007bf

000146f0 <playSoundElligible>:

bool playSoundElligible(void)
{
   146f0:	b580      	push	{r7, lr}
   146f2:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   146f4:	4b0d      	ldr	r3, [pc, #52]	; (1472c <playSoundElligible+0x3c>)
   146f6:	781b      	ldrb	r3, [r3, #0]
   146f8:	2b00      	cmp	r3, #0
   146fa:	d00e      	beq.n	1471a <playSoundElligible+0x2a>
   146fc:	4b0c      	ldr	r3, [pc, #48]	; (14730 <playSoundElligible+0x40>)
   146fe:	4798      	blx	r3
   14700:	0002      	movs	r2, r0
   14702:	4b0c      	ldr	r3, [pc, #48]	; (14734 <playSoundElligible+0x44>)
   14704:	681b      	ldr	r3, [r3, #0]
   14706:	1ad3      	subs	r3, r2, r3
   14708:	4a0b      	ldr	r2, [pc, #44]	; (14738 <playSoundElligible+0x48>)
   1470a:	7812      	ldrb	r2, [r2, #0]
   1470c:	0011      	movs	r1, r2
   1470e:	2264      	movs	r2, #100	; 0x64
   14710:	434a      	muls	r2, r1
   14712:	4293      	cmp	r3, r2
   14714:	d901      	bls.n	1471a <playSoundElligible+0x2a>
   14716:	2301      	movs	r3, #1
   14718:	e000      	b.n	1471c <playSoundElligible+0x2c>
   1471a:	2300      	movs	r3, #0
   1471c:	1c1a      	adds	r2, r3, #0
   1471e:	2301      	movs	r3, #1
   14720:	4013      	ands	r3, r2
   14722:	b2db      	uxtb	r3, r3
}
   14724:	0018      	movs	r0, r3
   14726:	46bd      	mov	sp, r7
   14728:	bd80      	pop	{r7, pc}
   1472a:	46c0      	nop			; (mov r8, r8)
   1472c:	20000861 	.word	0x20000861
   14730:	000202cd 	.word	0x000202cd
   14734:	2000083c 	.word	0x2000083c
   14738:	200007d1 	.word	0x200007d1

0001473c <triggerPlaySound>:

void triggerPlaySound(void)
{
   1473c:	b580      	push	{r7, lr}
   1473e:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14740:	4b0b      	ldr	r3, [pc, #44]	; (14770 <triggerPlaySound+0x34>)
   14742:	781b      	ldrb	r3, [r3, #0]
   14744:	2b01      	cmp	r3, #1
   14746:	d906      	bls.n	14756 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   14748:	4b0a      	ldr	r3, [pc, #40]	; (14774 <triggerPlaySound+0x38>)
   1474a:	781b      	ldrb	r3, [r3, #0]
   1474c:	2100      	movs	r1, #0
   1474e:	0018      	movs	r0, r3
   14750:	4b09      	ldr	r3, [pc, #36]	; (14778 <triggerPlaySound+0x3c>)
   14752:	4798      	blx	r3
   14754:	e005      	b.n	14762 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   14756:	4b07      	ldr	r3, [pc, #28]	; (14774 <triggerPlaySound+0x38>)
   14758:	781b      	ldrb	r3, [r3, #0]
   1475a:	2101      	movs	r1, #1
   1475c:	0018      	movs	r0, r3
   1475e:	4b06      	ldr	r3, [pc, #24]	; (14778 <triggerPlaySound+0x3c>)
   14760:	4798      	blx	r3
	}
	bplaySound = false;
   14762:	4b06      	ldr	r3, [pc, #24]	; (1477c <triggerPlaySound+0x40>)
   14764:	2200      	movs	r2, #0
   14766:	701a      	strb	r2, [r3, #0]
}
   14768:	46c0      	nop			; (mov r8, r8)
   1476a:	46bd      	mov	sp, r7
   1476c:	bd80      	pop	{r7, pc}
   1476e:	46c0      	nop			; (mov r8, r8)
   14770:	200007d0 	.word	0x200007d0
   14774:	200007bf 	.word	0x200007bf
   14778:	000130b1 	.word	0x000130b1
   1477c:	20000861 	.word	0x20000861

00014780 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14780:	b580      	push	{r7, lr}
   14782:	b082      	sub	sp, #8
   14784:	af00      	add	r7, sp, #0
   14786:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   14788:	4b18      	ldr	r3, [pc, #96]	; (147ec <playSoundAgain+0x6c>)
   1478a:	781b      	ldrb	r3, [r3, #0]
   1478c:	2201      	movs	r2, #1
   1478e:	4053      	eors	r3, r2
   14790:	b2db      	uxtb	r3, r3
   14792:	2b00      	cmp	r3, #0
   14794:	d025      	beq.n	147e2 <playSoundAgain+0x62>
   14796:	687b      	ldr	r3, [r7, #4]
   14798:	0018      	movs	r0, r3
   1479a:	4b15      	ldr	r3, [pc, #84]	; (147f0 <playSoundAgain+0x70>)
   1479c:	4798      	blx	r3
   1479e:	1e03      	subs	r3, r0, #0
   147a0:	d01f      	beq.n	147e2 <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
   147a2:	4b14      	ldr	r3, [pc, #80]	; (147f4 <playSoundAgain+0x74>)
   147a4:	781b      	ldrb	r3, [r3, #0]
   147a6:	2b01      	cmp	r3, #1
   147a8:	d91b      	bls.n	147e2 <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   147aa:	4b13      	ldr	r3, [pc, #76]	; (147f8 <playSoundAgain+0x78>)
   147ac:	781b      	ldrb	r3, [r3, #0]
   147ae:	001a      	movs	r2, r3
   147b0:	4b10      	ldr	r3, [pc, #64]	; (147f4 <playSoundAgain+0x74>)
   147b2:	781b      	ldrb	r3, [r3, #0]
   147b4:	3b01      	subs	r3, #1
   147b6:	429a      	cmp	r2, r3
   147b8:	da0f      	bge.n	147da <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   147ba:	4b0f      	ldr	r3, [pc, #60]	; (147f8 <playSoundAgain+0x78>)
   147bc:	781b      	ldrb	r3, [r3, #0]
   147be:	3301      	adds	r3, #1
   147c0:	b2da      	uxtb	r2, r3
   147c2:	4b0d      	ldr	r3, [pc, #52]	; (147f8 <playSoundAgain+0x78>)
   147c4:	701a      	strb	r2, [r3, #0]
   147c6:	4b0c      	ldr	r3, [pc, #48]	; (147f8 <playSoundAgain+0x78>)
   147c8:	781b      	ldrb	r3, [r3, #0]
   147ca:	001a      	movs	r2, r3
   147cc:	4b0b      	ldr	r3, [pc, #44]	; (147fc <playSoundAgain+0x7c>)
   147ce:	5c9b      	ldrb	r3, [r3, r2]
   147d0:	2100      	movs	r1, #0
   147d2:	0018      	movs	r0, r3
   147d4:	4b0a      	ldr	r3, [pc, #40]	; (14800 <playSoundAgain+0x80>)
   147d6:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
   147d8:	e003      	b.n	147e2 <playSoundAgain+0x62>
				playSound('M',true);
   147da:	2101      	movs	r1, #1
   147dc:	204d      	movs	r0, #77	; 0x4d
   147de:	4b08      	ldr	r3, [pc, #32]	; (14800 <playSoundAgain+0x80>)
   147e0:	4798      	blx	r3
}
   147e2:	46c0      	nop			; (mov r8, r8)
   147e4:	46bd      	mov	sp, r7
   147e6:	b002      	add	sp, #8
   147e8:	bd80      	pop	{r7, pc}
   147ea:	46c0      	nop			; (mov r8, r8)
   147ec:	20000861 	.word	0x20000861
   147f0:	000136c5 	.word	0x000136c5
   147f4:	200007d0 	.word	0x200007d0
   147f8:	200007c0 	.word	0x200007c0
   147fc:	20000744 	.word	0x20000744
   14800:	00014671 	.word	0x00014671

00014804 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   14804:	b580      	push	{r7, lr}
   14806:	b082      	sub	sp, #8
   14808:	af00      	add	r7, sp, #0
   1480a:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   1480c:	687b      	ldr	r3, [r7, #4]
   1480e:	0018      	movs	r0, r3
   14810:	4b14      	ldr	r3, [pc, #80]	; (14864 <playRepeatedFiles+0x60>)
   14812:	4798      	blx	r3
   14814:	0003      	movs	r3, r0
   14816:	2b0e      	cmp	r3, #14
   14818:	d81f      	bhi.n	1485a <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   1481a:	4b13      	ldr	r3, [pc, #76]	; (14868 <playRepeatedFiles+0x64>)
   1481c:	2200      	movs	r2, #0
   1481e:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14820:	687b      	ldr	r3, [r7, #4]
   14822:	0018      	movs	r0, r3
   14824:	4b0f      	ldr	r3, [pc, #60]	; (14864 <playRepeatedFiles+0x60>)
   14826:	4798      	blx	r3
   14828:	0003      	movs	r3, r0
   1482a:	b2da      	uxtb	r2, r3
   1482c:	4b0f      	ldr	r3, [pc, #60]	; (1486c <playRepeatedFiles+0x68>)
   1482e:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14830:	687a      	ldr	r2, [r7, #4]
   14832:	4b0f      	ldr	r3, [pc, #60]	; (14870 <playRepeatedFiles+0x6c>)
   14834:	0011      	movs	r1, r2
   14836:	0018      	movs	r0, r3
   14838:	4b0e      	ldr	r3, [pc, #56]	; (14874 <playRepeatedFiles+0x70>)
   1483a:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   1483c:	4b0e      	ldr	r3, [pc, #56]	; (14878 <playRepeatedFiles+0x74>)
   1483e:	4798      	blx	r3
   14840:	0002      	movs	r2, r0
   14842:	4b0e      	ldr	r3, [pc, #56]	; (1487c <playRepeatedFiles+0x78>)
   14844:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14846:	4b08      	ldr	r3, [pc, #32]	; (14868 <playRepeatedFiles+0x64>)
   14848:	781b      	ldrb	r3, [r3, #0]
   1484a:	001a      	movs	r2, r3
   1484c:	4b08      	ldr	r3, [pc, #32]	; (14870 <playRepeatedFiles+0x6c>)
   1484e:	5c9a      	ldrb	r2, [r3, r2]
   14850:	4b0b      	ldr	r3, [pc, #44]	; (14880 <playRepeatedFiles+0x7c>)
   14852:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14854:	4b0b      	ldr	r3, [pc, #44]	; (14884 <playRepeatedFiles+0x80>)
   14856:	2201      	movs	r2, #1
   14858:	701a      	strb	r2, [r3, #0]
	}
}
   1485a:	46c0      	nop			; (mov r8, r8)
   1485c:	46bd      	mov	sp, r7
   1485e:	b002      	add	sp, #8
   14860:	bd80      	pop	{r7, pc}
   14862:	46c0      	nop			; (mov r8, r8)
   14864:	00029123 	.word	0x00029123
   14868:	200007c0 	.word	0x200007c0
   1486c:	200007d0 	.word	0x200007d0
   14870:	20000744 	.word	0x20000744
   14874:	00029113 	.word	0x00029113
   14878:	000202cd 	.word	0x000202cd
   1487c:	2000083c 	.word	0x2000083c
   14880:	200007bf 	.word	0x200007bf
   14884:	20000861 	.word	0x20000861

00014888 <callTimerExpire>:

bool callTimerExpire(void)
{
   14888:	b580      	push	{r7, lr}
   1488a:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   1488c:	4b09      	ldr	r3, [pc, #36]	; (148b4 <callTimerExpire+0x2c>)
   1488e:	4798      	blx	r3
   14890:	0002      	movs	r2, r0
   14892:	4b09      	ldr	r3, [pc, #36]	; (148b8 <callTimerExpire+0x30>)
   14894:	681b      	ldr	r3, [r3, #0]
   14896:	1ad2      	subs	r2, r2, r3
   14898:	4b08      	ldr	r3, [pc, #32]	; (148bc <callTimerExpire+0x34>)
   1489a:	881b      	ldrh	r3, [r3, #0]
   1489c:	0019      	movs	r1, r3
   1489e:	2364      	movs	r3, #100	; 0x64
   148a0:	434b      	muls	r3, r1
   148a2:	0019      	movs	r1, r3
   148a4:	2300      	movs	r3, #0
   148a6:	428a      	cmp	r2, r1
   148a8:	415b      	adcs	r3, r3
   148aa:	b2db      	uxtb	r3, r3
}
   148ac:	0018      	movs	r0, r3
   148ae:	46bd      	mov	sp, r7
   148b0:	bd80      	pop	{r7, pc}
   148b2:	46c0      	nop			; (mov r8, r8)
   148b4:	000202cd 	.word	0x000202cd
   148b8:	20000814 	.word	0x20000814
   148bc:	2000075c 	.word	0x2000075c

000148c0 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   148c0:	b580      	push	{r7, lr}
   148c2:	b082      	sub	sp, #8
   148c4:	af00      	add	r7, sp, #0
   148c6:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   148c8:	4a16      	ldr	r2, [pc, #88]	; (14924 <OutGoingcallState+0x64>)
   148ca:	687b      	ldr	r3, [r7, #4]
   148cc:	0011      	movs	r1, r2
   148ce:	0018      	movs	r0, r3
   148d0:	4b15      	ldr	r3, [pc, #84]	; (14928 <OutGoingcallState+0x68>)
   148d2:	4798      	blx	r3
   148d4:	1e03      	subs	r3, r0, #0
   148d6:	d001      	beq.n	148dc <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   148d8:	2344      	movs	r3, #68	; 0x44
   148da:	e01e      	b.n	1491a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   148dc:	4a13      	ldr	r2, [pc, #76]	; (1492c <OutGoingcallState+0x6c>)
   148de:	687b      	ldr	r3, [r7, #4]
   148e0:	0011      	movs	r1, r2
   148e2:	0018      	movs	r0, r3
   148e4:	4b10      	ldr	r3, [pc, #64]	; (14928 <OutGoingcallState+0x68>)
   148e6:	4798      	blx	r3
   148e8:	1e03      	subs	r3, r0, #0
   148ea:	d001      	beq.n	148f0 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   148ec:	2352      	movs	r3, #82	; 0x52
   148ee:	e014      	b.n	1491a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   148f0:	4a0f      	ldr	r2, [pc, #60]	; (14930 <OutGoingcallState+0x70>)
   148f2:	687b      	ldr	r3, [r7, #4]
   148f4:	0011      	movs	r1, r2
   148f6:	0018      	movs	r0, r3
   148f8:	4b0b      	ldr	r3, [pc, #44]	; (14928 <OutGoingcallState+0x68>)
   148fa:	4798      	blx	r3
   148fc:	1e03      	subs	r3, r0, #0
   148fe:	d001      	beq.n	14904 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   14900:	2349      	movs	r3, #73	; 0x49
   14902:	e00a      	b.n	1491a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   14904:	4a0b      	ldr	r2, [pc, #44]	; (14934 <OutGoingcallState+0x74>)
   14906:	687b      	ldr	r3, [r7, #4]
   14908:	0011      	movs	r1, r2
   1490a:	0018      	movs	r0, r3
   1490c:	4b06      	ldr	r3, [pc, #24]	; (14928 <OutGoingcallState+0x68>)
   1490e:	4798      	blx	r3
   14910:	1e03      	subs	r3, r0, #0
   14912:	d001      	beq.n	14918 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14914:	2345      	movs	r3, #69	; 0x45
   14916:	e000      	b.n	1491a <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14918:	234e      	movs	r3, #78	; 0x4e
	}
}
   1491a:	0018      	movs	r0, r3
   1491c:	46bd      	mov	sp, r7
   1491e:	b002      	add	sp, #8
   14920:	bd80      	pop	{r7, pc}
   14922:	46c0      	nop			; (mov r8, r8)
   14924:	0002a08c 	.word	0x0002a08c
   14928:	00029153 	.word	0x00029153
   1492c:	0002a09c 	.word	0x0002a09c
   14930:	0002a0ac 	.word	0x0002a0ac
   14934:	0002a0bc 	.word	0x0002a0bc

00014938 <registerEvent>:

bool registerEvent(char eventType)
{
   14938:	b580      	push	{r7, lr}
   1493a:	b082      	sub	sp, #8
   1493c:	af00      	add	r7, sp, #0
   1493e:	0002      	movs	r2, r0
   14940:	1dfb      	adds	r3, r7, #7
   14942:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14944:	4b34      	ldr	r3, [pc, #208]	; (14a18 <registerEvent+0xe0>)
   14946:	789b      	ldrb	r3, [r3, #2]
   14948:	2b00      	cmp	r3, #0
   1494a:	d003      	beq.n	14954 <registerEvent+0x1c>
   1494c:	4b33      	ldr	r3, [pc, #204]	; (14a1c <registerEvent+0xe4>)
   1494e:	795b      	ldrb	r3, [r3, #5]
   14950:	2b4e      	cmp	r3, #78	; 0x4e
   14952:	d101      	bne.n	14958 <registerEvent+0x20>
	{
		return true;
   14954:	2301      	movs	r3, #1
   14956:	e05b      	b.n	14a10 <registerEvent+0xd8>
	}
	if (!initialized)
   14958:	4b31      	ldr	r3, [pc, #196]	; (14a20 <registerEvent+0xe8>)
   1495a:	781b      	ldrb	r3, [r3, #0]
   1495c:	b2db      	uxtb	r3, r3
   1495e:	2201      	movs	r2, #1
   14960:	4053      	eors	r3, r2
   14962:	b2db      	uxtb	r3, r3
   14964:	2b00      	cmp	r3, #0
   14966:	d001      	beq.n	1496c <registerEvent+0x34>
	{
		return true;
   14968:	2301      	movs	r3, #1
   1496a:	e051      	b.n	14a10 <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
   1496c:	4b2d      	ldr	r3, [pc, #180]	; (14a24 <registerEvent+0xec>)
   1496e:	781b      	ldrb	r3, [r3, #0]
   14970:	2201      	movs	r2, #1
   14972:	4053      	eors	r3, r2
   14974:	b2db      	uxtb	r3, r3
   14976:	2b00      	cmp	r3, #0
   14978:	d007      	beq.n	1498a <registerEvent+0x52>
   1497a:	4b2b      	ldr	r3, [pc, #172]	; (14a28 <registerEvent+0xf0>)
   1497c:	781b      	ldrb	r3, [r3, #0]
   1497e:	1dfa      	adds	r2, r7, #7
   14980:	7812      	ldrb	r2, [r2, #0]
   14982:	429a      	cmp	r2, r3
   14984:	d101      	bne.n	1498a <registerEvent+0x52>
	{
		return true;
   14986:	2301      	movs	r3, #1
   14988:	e042      	b.n	14a10 <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   1498a:	4b28      	ldr	r3, [pc, #160]	; (14a2c <registerEvent+0xf4>)
   1498c:	781b      	ldrb	r3, [r3, #0]
   1498e:	b2db      	uxtb	r3, r3
   14990:	2b4e      	cmp	r3, #78	; 0x4e
   14992:	d13c      	bne.n	14a0e <registerEvent+0xd6>
   14994:	4b26      	ldr	r3, [pc, #152]	; (14a30 <registerEvent+0xf8>)
   14996:	781b      	ldrb	r3, [r3, #0]
   14998:	b2db      	uxtb	r3, r3
   1499a:	2b4e      	cmp	r3, #78	; 0x4e
   1499c:	d137      	bne.n	14a0e <registerEvent+0xd6>
   1499e:	4b25      	ldr	r3, [pc, #148]	; (14a34 <registerEvent+0xfc>)
   149a0:	781b      	ldrb	r3, [r3, #0]
   149a2:	2b00      	cmp	r3, #0
   149a4:	d033      	beq.n	14a0e <registerEvent+0xd6>
   149a6:	4b1f      	ldr	r3, [pc, #124]	; (14a24 <registerEvent+0xec>)
   149a8:	781b      	ldrb	r3, [r3, #0]
   149aa:	2201      	movs	r2, #1
   149ac:	4053      	eors	r3, r2
   149ae:	b2db      	uxtb	r3, r3
   149b0:	2b00      	cmp	r3, #0
   149b2:	d02c      	beq.n	14a0e <registerEvent+0xd6>
   149b4:	4b20      	ldr	r3, [pc, #128]	; (14a38 <registerEvent+0x100>)
   149b6:	781b      	ldrb	r3, [r3, #0]
   149b8:	2201      	movs	r2, #1
   149ba:	4053      	eors	r3, r2
   149bc:	b2db      	uxtb	r3, r3
   149be:	2b00      	cmp	r3, #0
   149c0:	d025      	beq.n	14a0e <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   149c2:	4b16      	ldr	r3, [pc, #88]	; (14a1c <registerEvent+0xe4>)
   149c4:	7a5b      	ldrb	r3, [r3, #9]
   149c6:	2b00      	cmp	r3, #0
   149c8:	d005      	beq.n	149d6 <registerEvent+0x9e>
   149ca:	4b1c      	ldr	r3, [pc, #112]	; (14a3c <registerEvent+0x104>)
   149cc:	4798      	blx	r3
   149ce:	1e03      	subs	r3, r0, #0
   149d0:	d001      	beq.n	149d6 <registerEvent+0x9e>
		{
			return true;
   149d2:	2301      	movs	r3, #1
   149d4:	e01c      	b.n	14a10 <registerEvent+0xd8>
		}
		retries=0;
   149d6:	4b1a      	ldr	r3, [pc, #104]	; (14a40 <registerEvent+0x108>)
   149d8:	2200      	movs	r2, #0
   149da:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   149dc:	4b0f      	ldr	r3, [pc, #60]	; (14a1c <registerEvent+0xe4>)
   149de:	7a1b      	ldrb	r3, [r3, #8]
   149e0:	2b00      	cmp	r3, #0
   149e2:	d00c      	beq.n	149fe <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
   149e4:	4b17      	ldr	r3, [pc, #92]	; (14a44 <registerEvent+0x10c>)
   149e6:	4798      	blx	r3
   149e8:	0002      	movs	r2, r0
   149ea:	4b17      	ldr	r3, [pc, #92]	; (14a48 <registerEvent+0x110>)
   149ec:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   149ee:	4b17      	ldr	r3, [pc, #92]	; (14a4c <registerEvent+0x114>)
   149f0:	1dfa      	adds	r2, r7, #7
   149f2:	7812      	ldrb	r2, [r2, #0]
   149f4:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   149f6:	4b0b      	ldr	r3, [pc, #44]	; (14a24 <registerEvent+0xec>)
   149f8:	2201      	movs	r2, #1
   149fa:	701a      	strb	r2, [r3, #0]
   149fc:	e005      	b.n	14a0a <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
   149fe:	4b0a      	ldr	r3, [pc, #40]	; (14a28 <registerEvent+0xf0>)
   14a00:	1dfa      	adds	r2, r7, #7
   14a02:	7812      	ldrb	r2, [r2, #0]
   14a04:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   14a06:	4b12      	ldr	r3, [pc, #72]	; (14a50 <registerEvent+0x118>)
   14a08:	4798      	blx	r3
		}
		return true;
   14a0a:	2301      	movs	r3, #1
   14a0c:	e000      	b.n	14a10 <registerEvent+0xd8>
	}
	else
	{
		return false;
   14a0e:	2300      	movs	r3, #0
	}
}
   14a10:	0018      	movs	r0, r3
   14a12:	46bd      	mov	sp, r7
   14a14:	b002      	add	sp, #8
   14a16:	bd80      	pop	{r7, pc}
   14a18:	20000614 	.word	0x20000614
   14a1c:	20000654 	.word	0x20000654
   14a20:	20000795 	.word	0x20000795
   14a24:	200007ce 	.word	0x200007ce
   14a28:	2000075b 	.word	0x2000075b
   14a2c:	200007d8 	.word	0x200007d8
   14a30:	20000787 	.word	0x20000787
   14a34:	2000076a 	.word	0x2000076a
   14a38:	20000786 	.word	0x20000786
   14a3c:	00017135 	.word	0x00017135
   14a40:	200006d9 	.word	0x200006d9
   14a44:	000202cd 	.word	0x000202cd
   14a48:	200007f0 	.word	0x200007f0
   14a4c:	2000076d 	.word	0x2000076d
   14a50:	000142fd 	.word	0x000142fd

00014a54 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14a54:	b580      	push	{r7, lr}
   14a56:	b082      	sub	sp, #8
   14a58:	af00      	add	r7, sp, #0
   14a5a:	0002      	movs	r2, r0
   14a5c:	1dfb      	adds	r3, r7, #7
   14a5e:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14a60:	4b20      	ldr	r3, [pc, #128]	; (14ae4 <registerM2MEvent+0x90>)
   14a62:	781b      	ldrb	r3, [r3, #0]
   14a64:	b2db      	uxtb	r3, r3
   14a66:	2201      	movs	r2, #1
   14a68:	4053      	eors	r3, r2
   14a6a:	b2db      	uxtb	r3, r3
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	d006      	beq.n	14a7e <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14a70:	1dfb      	adds	r3, r7, #7
   14a72:	781b      	ldrb	r3, [r3, #0]
   14a74:	2100      	movs	r1, #0
   14a76:	0018      	movs	r0, r3
   14a78:	4b1b      	ldr	r3, [pc, #108]	; (14ae8 <registerM2MEvent+0x94>)
   14a7a:	4798      	blx	r3
		return;
   14a7c:	e02e      	b.n	14adc <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14a7e:	4b1b      	ldr	r3, [pc, #108]	; (14aec <registerM2MEvent+0x98>)
   14a80:	781b      	ldrb	r3, [r3, #0]
   14a82:	b2db      	uxtb	r3, r3
   14a84:	2b4e      	cmp	r3, #78	; 0x4e
   14a86:	d129      	bne.n	14adc <registerM2MEvent+0x88>
   14a88:	4b19      	ldr	r3, [pc, #100]	; (14af0 <registerM2MEvent+0x9c>)
   14a8a:	781b      	ldrb	r3, [r3, #0]
   14a8c:	b2db      	uxtb	r3, r3
   14a8e:	2b4e      	cmp	r3, #78	; 0x4e
   14a90:	d124      	bne.n	14adc <registerM2MEvent+0x88>
   14a92:	4b18      	ldr	r3, [pc, #96]	; (14af4 <registerM2MEvent+0xa0>)
   14a94:	781b      	ldrb	r3, [r3, #0]
   14a96:	2b00      	cmp	r3, #0
   14a98:	d020      	beq.n	14adc <registerM2MEvent+0x88>
   14a9a:	4b17      	ldr	r3, [pc, #92]	; (14af8 <registerM2MEvent+0xa4>)
   14a9c:	781b      	ldrb	r3, [r3, #0]
   14a9e:	2201      	movs	r2, #1
   14aa0:	4053      	eors	r3, r2
   14aa2:	b2db      	uxtb	r3, r3
   14aa4:	2b00      	cmp	r3, #0
   14aa6:	d019      	beq.n	14adc <registerM2MEvent+0x88>
   14aa8:	4b14      	ldr	r3, [pc, #80]	; (14afc <registerM2MEvent+0xa8>)
   14aaa:	781b      	ldrb	r3, [r3, #0]
   14aac:	2201      	movs	r2, #1
   14aae:	4053      	eors	r3, r2
   14ab0:	b2db      	uxtb	r3, r3
   14ab2:	2b00      	cmp	r3, #0
   14ab4:	d012      	beq.n	14adc <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14ab6:	1dfb      	adds	r3, r7, #7
   14ab8:	781b      	ldrb	r3, [r3, #0]
   14aba:	2102      	movs	r1, #2
   14abc:	0018      	movs	r0, r3
   14abe:	4b0a      	ldr	r3, [pc, #40]	; (14ae8 <registerM2MEvent+0x94>)
   14ac0:	4798      	blx	r3
		m2mEvent=true;
   14ac2:	4b0f      	ldr	r3, [pc, #60]	; (14b00 <registerM2MEvent+0xac>)
   14ac4:	2201      	movs	r2, #1
   14ac6:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14ac8:	4b0e      	ldr	r3, [pc, #56]	; (14b04 <registerM2MEvent+0xb0>)
   14aca:	1dfa      	adds	r2, r7, #7
   14acc:	7812      	ldrb	r2, [r2, #0]
   14ace:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14ad0:	4b0d      	ldr	r3, [pc, #52]	; (14b08 <registerM2MEvent+0xb4>)
   14ad2:	2200      	movs	r2, #0
   14ad4:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14ad6:	4b0d      	ldr	r3, [pc, #52]	; (14b0c <registerM2MEvent+0xb8>)
   14ad8:	4798      	blx	r3
		return;
   14ada:	46c0      	nop			; (mov r8, r8)
	}
}
   14adc:	46bd      	mov	sp, r7
   14ade:	b002      	add	sp, #8
   14ae0:	bd80      	pop	{r7, pc}
   14ae2:	46c0      	nop			; (mov r8, r8)
   14ae4:	20000795 	.word	0x20000795
   14ae8:	0001ba69 	.word	0x0001ba69
   14aec:	200007d8 	.word	0x200007d8
   14af0:	20000787 	.word	0x20000787
   14af4:	2000076a 	.word	0x2000076a
   14af8:	200007ce 	.word	0x200007ce
   14afc:	20000786 	.word	0x20000786
   14b00:	2000073b 	.word	0x2000073b
   14b04:	20000721 	.word	0x20000721
   14b08:	200007cf 	.word	0x200007cf
   14b0c:	000142fd 	.word	0x000142fd

00014b10 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14b10:	b580      	push	{r7, lr}
   14b12:	b082      	sub	sp, #8
   14b14:	af00      	add	r7, sp, #0
   14b16:	0002      	movs	r2, r0
   14b18:	1dfb      	adds	r3, r7, #7
   14b1a:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14b1c:	4b07      	ldr	r3, [pc, #28]	; (14b3c <setMotorMGRResponse+0x2c>)
   14b1e:	781b      	ldrb	r3, [r3, #0]
   14b20:	b2db      	uxtb	r3, r3
   14b22:	2b49      	cmp	r3, #73	; 0x49
   14b24:	d106      	bne.n	14b34 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14b26:	1dfb      	adds	r3, r7, #7
   14b28:	781b      	ldrb	r3, [r3, #0]
   14b2a:	2101      	movs	r1, #1
   14b2c:	0018      	movs	r0, r3
   14b2e:	4b04      	ldr	r3, [pc, #16]	; (14b40 <setMotorMGRResponse+0x30>)
   14b30:	4798      	blx	r3
   14b32:	e000      	b.n	14b36 <setMotorMGRResponse+0x26>
		return;
   14b34:	46c0      	nop			; (mov r8, r8)
}
   14b36:	46bd      	mov	sp, r7
   14b38:	b002      	add	sp, #8
   14b3a:	bd80      	pop	{r7, pc}
   14b3c:	200007d8 	.word	0x200007d8
   14b40:	00014671 	.word	0x00014671

00014b44 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14b44:	b580      	push	{r7, lr}
   14b46:	b082      	sub	sp, #8
   14b48:	af00      	add	r7, sp, #0
   14b4a:	0002      	movs	r2, r0
   14b4c:	1dfb      	adds	r3, r7, #7
   14b4e:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14b50:	4b0c      	ldr	r3, [pc, #48]	; (14b84 <checkRespSMS+0x40>)
   14b52:	781b      	ldrb	r3, [r3, #0]
   14b54:	2201      	movs	r2, #1
   14b56:	4053      	eors	r3, r2
   14b58:	b2db      	uxtb	r3, r3
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	d00d      	beq.n	14b7a <checkRespSMS+0x36>
   14b5e:	4b0a      	ldr	r3, [pc, #40]	; (14b88 <checkRespSMS+0x44>)
   14b60:	795b      	ldrb	r3, [r3, #5]
   14b62:	2b41      	cmp	r3, #65	; 0x41
   14b64:	d109      	bne.n	14b7a <checkRespSMS+0x36>
	{
		actionType = t1;
   14b66:	4b09      	ldr	r3, [pc, #36]	; (14b8c <checkRespSMS+0x48>)
   14b68:	1dfa      	adds	r2, r7, #7
   14b6a:	7812      	ldrb	r2, [r2, #0]
   14b6c:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14b6e:	4b08      	ldr	r3, [pc, #32]	; (14b90 <checkRespSMS+0x4c>)
   14b70:	2200      	movs	r2, #0
   14b72:	2100      	movs	r1, #0
   14b74:	0018      	movs	r0, r3
   14b76:	4b07      	ldr	r3, [pc, #28]	; (14b94 <checkRespSMS+0x50>)
   14b78:	4798      	blx	r3
	}
}
   14b7a:	46c0      	nop			; (mov r8, r8)
   14b7c:	46bd      	mov	sp, r7
   14b7e:	b002      	add	sp, #8
   14b80:	bd80      	pop	{r7, pc}
   14b82:	46c0      	nop			; (mov r8, r8)
   14b84:	20000796 	.word	0x20000796
   14b88:	20000654 	.word	0x20000654
   14b8c:	2000075b 	.word	0x2000075b
   14b90:	0002a0cc 	.word	0x0002a0cc
   14b94:	00017219 	.word	0x00017219

00014b98 <subDTMF>:

void subDTMF(void)
{
   14b98:	b580      	push	{r7, lr}
   14b9a:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14b9c:	4b04      	ldr	r3, [pc, #16]	; (14bb0 <subDTMF+0x18>)
   14b9e:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   14ba0:	4b04      	ldr	r3, [pc, #16]	; (14bb4 <subDTMF+0x1c>)
   14ba2:	4798      	blx	r3
   14ba4:	0002      	movs	r2, r0
   14ba6:	4b04      	ldr	r3, [pc, #16]	; (14bb8 <subDTMF+0x20>)
   14ba8:	601a      	str	r2, [r3, #0]
}
   14baa:	46c0      	nop			; (mov r8, r8)
   14bac:	46bd      	mov	sp, r7
   14bae:	bd80      	pop	{r7, pc}
   14bb0:	00013081 	.word	0x00013081
   14bb4:	000202cd 	.word	0x000202cd
   14bb8:	20000814 	.word	0x20000814

00014bbc <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14bbc:	b580      	push	{r7, lr}
   14bbe:	b084      	sub	sp, #16
   14bc0:	af00      	add	r7, sp, #0
   14bc2:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14bc4:	230f      	movs	r3, #15
   14bc6:	18fb      	adds	r3, r7, r3
   14bc8:	687a      	ldr	r2, [r7, #4]
   14bca:	7812      	ldrb	r2, [r2, #0]
   14bcc:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14bce:	4b6a      	ldr	r3, [pc, #424]	; (14d78 <processOnDTMF+0x1bc>)
   14bd0:	78db      	ldrb	r3, [r3, #3]
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d010      	beq.n	14bf8 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14bd6:	4b69      	ldr	r3, [pc, #420]	; (14d7c <processOnDTMF+0x1c0>)
   14bd8:	781b      	ldrb	r3, [r3, #0]
   14bda:	2b00      	cmp	r3, #0
   14bdc:	d100      	bne.n	14be0 <processOnDTMF+0x24>
   14bde:	e0c7      	b.n	14d70 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14be0:	230f      	movs	r3, #15
   14be2:	18fb      	adds	r3, r7, r3
   14be4:	781b      	ldrb	r3, [r3, #0]
   14be6:	2b41      	cmp	r3, #65	; 0x41
   14be8:	d000      	beq.n	14bec <processOnDTMF+0x30>
   14bea:	e0c1      	b.n	14d70 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14bec:	4b64      	ldr	r3, [pc, #400]	; (14d80 <processOnDTMF+0x1c4>)
   14bee:	2201      	movs	r2, #1
   14bf0:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14bf2:	4b64      	ldr	r3, [pc, #400]	; (14d84 <processOnDTMF+0x1c8>)
   14bf4:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14bf6:	e0bb      	b.n	14d70 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14bf8:	230f      	movs	r3, #15
   14bfa:	18fb      	adds	r3, r7, r3
   14bfc:	781b      	ldrb	r3, [r3, #0]
   14bfe:	2b31      	cmp	r3, #49	; 0x31
   14c00:	d106      	bne.n	14c10 <processOnDTMF+0x54>
			subDTMF();
   14c02:	4b61      	ldr	r3, [pc, #388]	; (14d88 <processOnDTMF+0x1cc>)
   14c04:	4798      	blx	r3
			startMotor(true,false);
   14c06:	2100      	movs	r1, #0
   14c08:	2001      	movs	r0, #1
   14c0a:	4b60      	ldr	r3, [pc, #384]	; (14d8c <processOnDTMF+0x1d0>)
   14c0c:	4798      	blx	r3
}
   14c0e:	e0af      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14c10:	230f      	movs	r3, #15
   14c12:	18fb      	adds	r3, r7, r3
   14c14:	781b      	ldrb	r3, [r3, #0]
   14c16:	2b32      	cmp	r3, #50	; 0x32
   14c18:	d107      	bne.n	14c2a <processOnDTMF+0x6e>
			subDTMF();
   14c1a:	4b5b      	ldr	r3, [pc, #364]	; (14d88 <processOnDTMF+0x1cc>)
   14c1c:	4798      	blx	r3
			stopMotor(true,false,false);
   14c1e:	2200      	movs	r2, #0
   14c20:	2100      	movs	r1, #0
   14c22:	2001      	movs	r0, #1
   14c24:	4b5a      	ldr	r3, [pc, #360]	; (14d90 <processOnDTMF+0x1d4>)
   14c26:	4798      	blx	r3
}
   14c28:	e0a2      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14c2a:	230f      	movs	r3, #15
   14c2c:	18fb      	adds	r3, r7, r3
   14c2e:	781b      	ldrb	r3, [r3, #0]
   14c30:	2b33      	cmp	r3, #51	; 0x33
   14c32:	d104      	bne.n	14c3e <processOnDTMF+0x82>
			subDTMF();
   14c34:	4b54      	ldr	r3, [pc, #336]	; (14d88 <processOnDTMF+0x1cc>)
   14c36:	4798      	blx	r3
			statusOnCall();
   14c38:	4b56      	ldr	r3, [pc, #344]	; (14d94 <processOnDTMF+0x1d8>)
   14c3a:	4798      	blx	r3
}
   14c3c:	e098      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14c3e:	230f      	movs	r3, #15
   14c40:	18fb      	adds	r3, r7, r3
   14c42:	781b      	ldrb	r3, [r3, #0]
   14c44:	2b34      	cmp	r3, #52	; 0x34
   14c46:	d10a      	bne.n	14c5e <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14c48:	4b4b      	ldr	r3, [pc, #300]	; (14d78 <processOnDTMF+0x1bc>)
   14c4a:	795b      	ldrb	r3, [r3, #5]
   14c4c:	2b00      	cmp	r3, #0
   14c4e:	d100      	bne.n	14c52 <processOnDTMF+0x96>
   14c50:	e08e      	b.n	14d70 <processOnDTMF+0x1b4>
				subDTMF();
   14c52:	4b4d      	ldr	r3, [pc, #308]	; (14d88 <processOnDTMF+0x1cc>)
   14c54:	4798      	blx	r3
				waterStatusOnCall(false);
   14c56:	2000      	movs	r0, #0
   14c58:	4b4f      	ldr	r3, [pc, #316]	; (14d98 <processOnDTMF+0x1dc>)
   14c5a:	4798      	blx	r3
}
   14c5c:	e088      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14c5e:	230f      	movs	r3, #15
   14c60:	18fb      	adds	r3, r7, r3
   14c62:	781b      	ldrb	r3, [r3, #0]
   14c64:	2b35      	cmp	r3, #53	; 0x35
   14c66:	d10a      	bne.n	14c7e <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14c68:	4b43      	ldr	r3, [pc, #268]	; (14d78 <processOnDTMF+0x1bc>)
   14c6a:	791b      	ldrb	r3, [r3, #4]
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d100      	bne.n	14c72 <processOnDTMF+0xb6>
   14c70:	e07e      	b.n	14d70 <processOnDTMF+0x1b4>
				subDTMF();
   14c72:	4b45      	ldr	r3, [pc, #276]	; (14d88 <processOnDTMF+0x1cc>)
   14c74:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14c76:	2000      	movs	r0, #0
   14c78:	4b48      	ldr	r3, [pc, #288]	; (14d9c <processOnDTMF+0x1e0>)
   14c7a:	4798      	blx	r3
}
   14c7c:	e078      	b.n	14d70 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14c7e:	230f      	movs	r3, #15
   14c80:	18fb      	adds	r3, r7, r3
   14c82:	781b      	ldrb	r3, [r3, #0]
   14c84:	2b30      	cmp	r3, #48	; 0x30
   14c86:	d114      	bne.n	14cb2 <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14c88:	4b3b      	ldr	r3, [pc, #236]	; (14d78 <processOnDTMF+0x1bc>)
   14c8a:	785b      	ldrb	r3, [r3, #1]
   14c8c:	2b00      	cmp	r3, #0
   14c8e:	d100      	bne.n	14c92 <processOnDTMF+0xd6>
   14c90:	e06e      	b.n	14d70 <processOnDTMF+0x1b4>
				if(zeroPressed)
   14c92:	4b43      	ldr	r3, [pc, #268]	; (14da0 <processOnDTMF+0x1e4>)
   14c94:	781b      	ldrb	r3, [r3, #0]
   14c96:	2b00      	cmp	r3, #0
   14c98:	d007      	beq.n	14caa <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14c9a:	4b42      	ldr	r3, [pc, #264]	; (14da4 <processOnDTMF+0x1e8>)
   14c9c:	4798      	blx	r3
					subDTMF();
   14c9e:	4b3a      	ldr	r3, [pc, #232]	; (14d88 <processOnDTMF+0x1cc>)
   14ca0:	4798      	blx	r3
					zeroPressed=false;
   14ca2:	4b3f      	ldr	r3, [pc, #252]	; (14da0 <processOnDTMF+0x1e4>)
   14ca4:	2200      	movs	r2, #0
   14ca6:	701a      	strb	r2, [r3, #0]
}
   14ca8:	e062      	b.n	14d70 <processOnDTMF+0x1b4>
					zeroPressed=true;
   14caa:	4b3d      	ldr	r3, [pc, #244]	; (14da0 <processOnDTMF+0x1e4>)
   14cac:	2201      	movs	r2, #1
   14cae:	701a      	strb	r2, [r3, #0]
}
   14cb0:	e05e      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14cb2:	230f      	movs	r3, #15
   14cb4:	18fb      	adds	r3, r7, r3
   14cb6:	781b      	ldrb	r3, [r3, #0]
   14cb8:	2b37      	cmp	r3, #55	; 0x37
   14cba:	d108      	bne.n	14cce <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14cbc:	4b2e      	ldr	r3, [pc, #184]	; (14d78 <processOnDTMF+0x1bc>)
   14cbe:	789b      	ldrb	r3, [r3, #2]
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d055      	beq.n	14d70 <processOnDTMF+0x1b4>
				subDTMF();
   14cc4:	4b30      	ldr	r3, [pc, #192]	; (14d88 <processOnDTMF+0x1cc>)
   14cc6:	4798      	blx	r3
				speakAmpere();
   14cc8:	4b37      	ldr	r3, [pc, #220]	; (14da8 <processOnDTMF+0x1ec>)
   14cca:	4798      	blx	r3
}
   14ccc:	e050      	b.n	14d70 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14cce:	230f      	movs	r3, #15
   14cd0:	18fb      	adds	r3, r7, r3
   14cd2:	781b      	ldrb	r3, [r3, #0]
   14cd4:	2b44      	cmp	r3, #68	; 0x44
   14cd6:	d10d      	bne.n	14cf4 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14cd8:	2001      	movs	r0, #1
   14cda:	4b34      	ldr	r3, [pc, #208]	; (14dac <processOnDTMF+0x1f0>)
   14cdc:	4798      	blx	r3
			resetAutoStart(true);
   14cde:	2001      	movs	r0, #1
   14ce0:	4b33      	ldr	r3, [pc, #204]	; (14db0 <processOnDTMF+0x1f4>)
   14ce2:	4798      	blx	r3
			startMotor(false,false);
   14ce4:	2100      	movs	r1, #0
   14ce6:	2000      	movs	r0, #0
   14ce8:	4b28      	ldr	r3, [pc, #160]	; (14d8c <processOnDTMF+0x1d0>)
   14cea:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14cec:	20ff      	movs	r0, #255	; 0xff
   14cee:	4b31      	ldr	r3, [pc, #196]	; (14db4 <processOnDTMF+0x1f8>)
   14cf0:	4798      	blx	r3
}
   14cf2:	e03d      	b.n	14d70 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14cf4:	230f      	movs	r3, #15
   14cf6:	18fb      	adds	r3, r7, r3
   14cf8:	781b      	ldrb	r3, [r3, #0]
   14cfa:	2b43      	cmp	r3, #67	; 0x43
   14cfc:	d10b      	bne.n	14d16 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14cfe:	2000      	movs	r0, #0
   14d00:	4b2a      	ldr	r3, [pc, #168]	; (14dac <processOnDTMF+0x1f0>)
   14d02:	4798      	blx	r3
			stopMotor(false,false,true);
   14d04:	2201      	movs	r2, #1
   14d06:	2100      	movs	r1, #0
   14d08:	2000      	movs	r0, #0
   14d0a:	4b21      	ldr	r3, [pc, #132]	; (14d90 <processOnDTMF+0x1d4>)
   14d0c:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14d0e:	20ff      	movs	r0, #255	; 0xff
   14d10:	4b28      	ldr	r3, [pc, #160]	; (14db4 <processOnDTMF+0x1f8>)
   14d12:	4798      	blx	r3
}
   14d14:	e02c      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14d16:	230f      	movs	r3, #15
   14d18:	18fb      	adds	r3, r7, r3
   14d1a:	781b      	ldrb	r3, [r3, #0]
   14d1c:	2b38      	cmp	r3, #56	; 0x38
   14d1e:	d10c      	bne.n	14d3a <processOnDTMF+0x17e>
			subDTMF();
   14d20:	4b19      	ldr	r3, [pc, #100]	; (14d88 <processOnDTMF+0x1cc>)
   14d22:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14d24:	2001      	movs	r0, #1
   14d26:	4b21      	ldr	r3, [pc, #132]	; (14dac <processOnDTMF+0x1f0>)
   14d28:	4798      	blx	r3
			resetAutoStart(true);
   14d2a:	2001      	movs	r0, #1
   14d2c:	4b20      	ldr	r3, [pc, #128]	; (14db0 <processOnDTMF+0x1f4>)
   14d2e:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14d30:	2101      	movs	r1, #1
   14d32:	2029      	movs	r0, #41	; 0x29
   14d34:	4b20      	ldr	r3, [pc, #128]	; (14db8 <processOnDTMF+0x1fc>)
   14d36:	4798      	blx	r3
}
   14d38:	e01a      	b.n	14d70 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14d3a:	230f      	movs	r3, #15
   14d3c:	18fb      	adds	r3, r7, r3
   14d3e:	781b      	ldrb	r3, [r3, #0]
   14d40:	2b39      	cmp	r3, #57	; 0x39
   14d42:	d10c      	bne.n	14d5e <processOnDTMF+0x1a2>
			subDTMF();
   14d44:	4b10      	ldr	r3, [pc, #64]	; (14d88 <processOnDTMF+0x1cc>)
   14d46:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14d48:	2000      	movs	r0, #0
   14d4a:	4b18      	ldr	r3, [pc, #96]	; (14dac <processOnDTMF+0x1f0>)
   14d4c:	4798      	blx	r3
			resetAutoStart(true);
   14d4e:	2001      	movs	r0, #1
   14d50:	4b17      	ldr	r3, [pc, #92]	; (14db0 <processOnDTMF+0x1f4>)
   14d52:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14d54:	2101      	movs	r1, #1
   14d56:	205b      	movs	r0, #91	; 0x5b
   14d58:	4b17      	ldr	r3, [pc, #92]	; (14db8 <processOnDTMF+0x1fc>)
   14d5a:	4798      	blx	r3
}
   14d5c:	e008      	b.n	14d70 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14d5e:	230f      	movs	r3, #15
   14d60:	18fb      	adds	r3, r7, r3
   14d62:	781b      	ldrb	r3, [r3, #0]
   14d64:	2b2a      	cmp	r3, #42	; 0x2a
   14d66:	d103      	bne.n	14d70 <processOnDTMF+0x1b4>
			subDTMF();
   14d68:	4b07      	ldr	r3, [pc, #28]	; (14d88 <processOnDTMF+0x1cc>)
   14d6a:	4798      	blx	r3
			voltageOnCall();
   14d6c:	4b13      	ldr	r3, [pc, #76]	; (14dbc <processOnDTMF+0x200>)
   14d6e:	4798      	blx	r3
}
   14d70:	46c0      	nop			; (mov r8, r8)
   14d72:	46bd      	mov	sp, r7
   14d74:	b004      	add	sp, #16
   14d76:	bd80      	pop	{r7, pc}
   14d78:	2000062c 	.word	0x2000062c
   14d7c:	2000073b 	.word	0x2000073b
   14d80:	20000720 	.word	0x20000720
   14d84:	00013021 	.word	0x00013021
   14d88:	00014b99 	.word	0x00014b99
   14d8c:	0001b2fd 	.word	0x0001b2fd
   14d90:	0001b4d9 	.word	0x0001b4d9
   14d94:	0001b919 	.word	0x0001b919
   14d98:	0001949d 	.word	0x0001949d
   14d9c:	00019355 	.word	0x00019355
   14da0:	2000080b 	.word	0x2000080b
   14da4:	00019f65 	.word	0x00019f65
   14da8:	0001a059 	.word	0x0001a059
   14dac:	000112a5 	.word	0x000112a5
   14db0:	0001aefd 	.word	0x0001aefd
   14db4:	000173d5 	.word	0x000173d5
   14db8:	00014671 	.word	0x00014671
   14dbc:	0001ba29 	.word	0x0001ba29

00014dc0 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dc2:	46c6      	mov	lr, r8
   14dc4:	b500      	push	{lr}
   14dc6:	b0d2      	sub	sp, #328	; 0x148
   14dc8:	af06      	add	r7, sp, #24
   14dca:	60f8      	str	r0, [r7, #12]
   14dcc:	000c      	movs	r4, r1
   14dce:	0010      	movs	r0, r2
   14dd0:	0019      	movs	r1, r3
   14dd2:	4be1      	ldr	r3, [pc, #900]	; (15158 <processOnSMS+0x398>)
   14dd4:	2294      	movs	r2, #148	; 0x94
   14dd6:	0052      	lsls	r2, r2, #1
   14dd8:	4694      	mov	ip, r2
   14dda:	2208      	movs	r2, #8
   14ddc:	4690      	mov	r8, r2
   14dde:	44b8      	add	r8, r7
   14de0:	44c4      	add	ip, r8
   14de2:	4463      	add	r3, ip
   14de4:	1c22      	adds	r2, r4, #0
   14de6:	701a      	strb	r2, [r3, #0]
   14de8:	4bdc      	ldr	r3, [pc, #880]	; (1515c <processOnSMS+0x39c>)
   14dea:	2294      	movs	r2, #148	; 0x94
   14dec:	0052      	lsls	r2, r2, #1
   14dee:	4694      	mov	ip, r2
   14df0:	2208      	movs	r2, #8
   14df2:	4690      	mov	r8, r2
   14df4:	44b8      	add	r8, r7
   14df6:	44c4      	add	ip, r8
   14df8:	4463      	add	r3, ip
   14dfa:	1c02      	adds	r2, r0, #0
   14dfc:	701a      	strb	r2, [r3, #0]
   14dfe:	4bd8      	ldr	r3, [pc, #864]	; (15160 <processOnSMS+0x3a0>)
   14e00:	2294      	movs	r2, #148	; 0x94
   14e02:	0052      	lsls	r2, r2, #1
   14e04:	4694      	mov	ip, r2
   14e06:	2208      	movs	r2, #8
   14e08:	4690      	mov	r8, r2
   14e0a:	44b8      	add	r8, r7
   14e0c:	44c4      	add	ip, r8
   14e0e:	4463      	add	r3, ip
   14e10:	1c0a      	adds	r2, r1, #0
   14e12:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   14e14:	2328      	movs	r3, #40	; 0x28
   14e16:	33ff      	adds	r3, #255	; 0xff
   14e18:	2208      	movs	r2, #8
   14e1a:	4694      	mov	ip, r2
   14e1c:	44bc      	add	ip, r7
   14e1e:	4463      	add	r3, ip
   14e20:	2200      	movs	r2, #0
   14e22:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   14e24:	68fb      	ldr	r3, [r7, #12]
   14e26:	228c      	movs	r2, #140	; 0x8c
   14e28:	0052      	lsls	r2, r2, #1
   14e2a:	2108      	movs	r1, #8
   14e2c:	468c      	mov	ip, r1
   14e2e:	44bc      	add	ip, r7
   14e30:	4462      	add	r2, ip
   14e32:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   14e34:	4bca      	ldr	r3, [pc, #808]	; (15160 <processOnSMS+0x3a0>)
   14e36:	2294      	movs	r2, #148	; 0x94
   14e38:	0052      	lsls	r2, r2, #1
   14e3a:	4694      	mov	ip, r2
   14e3c:	2208      	movs	r2, #8
   14e3e:	4690      	mov	r8, r2
   14e40:	44b8      	add	r8, r7
   14e42:	44c4      	add	ip, r8
   14e44:	4463      	add	r3, ip
   14e46:	781b      	ldrb	r3, [r3, #0]
   14e48:	2b00      	cmp	r3, #0
   14e4a:	d00e      	beq.n	14e6a <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
   14e4c:	4ac5      	ldr	r2, [pc, #788]	; (15164 <processOnSMS+0x3a4>)
   14e4e:	68fb      	ldr	r3, [r7, #12]
   14e50:	0011      	movs	r1, r2
   14e52:	0018      	movs	r0, r3
   14e54:	4bc4      	ldr	r3, [pc, #784]	; (15168 <processOnSMS+0x3a8>)
   14e56:	4798      	blx	r3
   14e58:	0003      	movs	r3, r0
   14e5a:	001a      	movs	r2, r3
   14e5c:	2301      	movs	r3, #1
   14e5e:	4053      	eors	r3, r2
   14e60:	b2db      	uxtb	r3, r3
   14e62:	2b00      	cmp	r3, #0
   14e64:	d001      	beq.n	14e6a <processOnSMS+0xaa>
   14e66:	f002 f8a3 	bl	16fb0 <processOnSMS+0x21f0>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   14e6a:	4ac0      	ldr	r2, [pc, #768]	; (1516c <processOnSMS+0x3ac>)
   14e6c:	68fb      	ldr	r3, [r7, #12]
   14e6e:	0011      	movs	r1, r2
   14e70:	0018      	movs	r0, r3
   14e72:	4bbd      	ldr	r3, [pc, #756]	; (15168 <processOnSMS+0x3a8>)
   14e74:	4798      	blx	r3
   14e76:	1e03      	subs	r3, r0, #0
   14e78:	d029      	beq.n	14ece <processOnSMS+0x10e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   14e7a:	4bbd      	ldr	r3, [pc, #756]	; (15170 <processOnSMS+0x3b0>)
   14e7c:	2201      	movs	r2, #1
   14e7e:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   14e80:	4bbc      	ldr	r3, [pc, #752]	; (15174 <processOnSMS+0x3b4>)
   14e82:	2210      	movs	r2, #16
   14e84:	2100      	movs	r1, #0
   14e86:	0018      	movs	r0, r3
   14e88:	4bbb      	ldr	r3, [pc, #748]	; (15178 <processOnSMS+0x3b8>)
   14e8a:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   14e8c:	23a0      	movs	r3, #160	; 0xa0
   14e8e:	005b      	lsls	r3, r3, #1
   14e90:	2208      	movs	r2, #8
   14e92:	4694      	mov	ip, r2
   14e94:	44bc      	add	ip, r7
   14e96:	4463      	add	r3, ip
   14e98:	681a      	ldr	r2, [r3, #0]
   14e9a:	4bb6      	ldr	r3, [pc, #728]	; (15174 <processOnSMS+0x3b4>)
   14e9c:	0011      	movs	r1, r2
   14e9e:	0018      	movs	r0, r3
   14ea0:	4bb6      	ldr	r3, [pc, #728]	; (1517c <processOnSMS+0x3bc>)
   14ea2:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   14ea4:	2000      	movs	r0, #0
   14ea6:	4bb6      	ldr	r3, [pc, #728]	; (15180 <processOnSMS+0x3c0>)
   14ea8:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   14eaa:	49b1      	ldr	r1, [pc, #708]	; (15170 <processOnSMS+0x3b0>)
   14eac:	4bb5      	ldr	r3, [pc, #724]	; (15184 <processOnSMS+0x3c4>)
   14eae:	221c      	movs	r2, #28
   14eb0:	0018      	movs	r0, r3
   14eb2:	4bb5      	ldr	r3, [pc, #724]	; (15188 <processOnSMS+0x3c8>)
   14eb4:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   14eb6:	4bb3      	ldr	r3, [pc, #716]	; (15184 <processOnSMS+0x3c4>)
   14eb8:	0019      	movs	r1, r3
   14eba:	2000      	movs	r0, #0
   14ebc:	4bb3      	ldr	r3, [pc, #716]	; (1518c <processOnSMS+0x3cc>)
   14ebe:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   14ec0:	4bb3      	ldr	r3, [pc, #716]	; (15190 <processOnSMS+0x3d0>)
   14ec2:	4798      	blx	r3
			vTaskDelay(100);
   14ec4:	2064      	movs	r0, #100	; 0x64
   14ec6:	4bb3      	ldr	r3, [pc, #716]	; (15194 <processOnSMS+0x3d4>)
   14ec8:	4798      	blx	r3
			system_reset();
   14eca:	4bb3      	ldr	r3, [pc, #716]	; (15198 <processOnSMS+0x3d8>)
   14ecc:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   14ece:	4ab3      	ldr	r2, [pc, #716]	; (1519c <processOnSMS+0x3dc>)
   14ed0:	68fb      	ldr	r3, [r7, #12]
   14ed2:	0011      	movs	r1, r2
   14ed4:	0018      	movs	r0, r3
   14ed6:	4ba4      	ldr	r3, [pc, #656]	; (15168 <processOnSMS+0x3a8>)
   14ed8:	4798      	blx	r3
   14eda:	1e03      	subs	r3, r0, #0
   14edc:	d047      	beq.n	14f6e <processOnSMS+0x1ae>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   14ede:	2318      	movs	r3, #24
   14ee0:	33ff      	adds	r3, #255	; 0xff
   14ee2:	2208      	movs	r2, #8
   14ee4:	18ba      	adds	r2, r7, r2
   14ee6:	18d4      	adds	r4, r2, r3
   14ee8:	4bad      	ldr	r3, [pc, #692]	; (151a0 <processOnSMS+0x3e0>)
   14eea:	4798      	blx	r3
   14eec:	0003      	movs	r3, r0
   14eee:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   14ef0:	2328      	movs	r3, #40	; 0x28
   14ef2:	33ff      	adds	r3, #255	; 0xff
   14ef4:	2208      	movs	r2, #8
   14ef6:	4694      	mov	ip, r2
   14ef8:	44bc      	add	ip, r7
   14efa:	4463      	add	r3, ip
   14efc:	2201      	movs	r2, #1
   14efe:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14f00:	4b96      	ldr	r3, [pc, #600]	; (1515c <processOnSMS+0x39c>)
   14f02:	2294      	movs	r2, #148	; 0x94
   14f04:	0052      	lsls	r2, r2, #1
   14f06:	4694      	mov	ip, r2
   14f08:	2208      	movs	r2, #8
   14f0a:	4690      	mov	r8, r2
   14f0c:	44b8      	add	r8, r7
   14f0e:	44c4      	add	ip, r8
   14f10:	4463      	add	r3, ip
   14f12:	781b      	ldrb	r3, [r3, #0]
   14f14:	2b00      	cmp	r3, #0
   14f16:	d101      	bne.n	14f1c <processOnSMS+0x15c>
   14f18:	f002 f804 	bl	16f24 <processOnSMS+0x2164>
		{
			if (err == GSM_ERROR_NONE)
   14f1c:	2318      	movs	r3, #24
   14f1e:	33ff      	adds	r3, #255	; 0xff
   14f20:	2208      	movs	r2, #8
   14f22:	4694      	mov	ip, r2
   14f24:	44bc      	add	ip, r7
   14f26:	4463      	add	r3, ip
   14f28:	781b      	ldrb	r3, [r3, #0]
   14f2a:	2b00      	cmp	r3, #0
   14f2c:	d10d      	bne.n	14f4a <processOnSMS+0x18a>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
   14f2e:	230c      	movs	r3, #12
   14f30:	2208      	movs	r2, #8
   14f32:	4694      	mov	ip, r2
   14f34:	44bc      	add	ip, r7
   14f36:	4463      	add	r3, ip
   14f38:	4a9a      	ldr	r2, [pc, #616]	; (151a4 <processOnSMS+0x3e4>)
   14f3a:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f3c:	c313      	stmia	r3!, {r0, r1, r4}
   14f3e:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f40:	c313      	stmia	r3!, {r0, r1, r4}
   14f42:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f44:	c313      	stmia	r3!, {r0, r1, r4}
   14f46:	f001 ffed 	bl	16f24 <processOnSMS+0x2164>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
   14f4a:	230c      	movs	r3, #12
   14f4c:	2208      	movs	r2, #8
   14f4e:	4694      	mov	ip, r2
   14f50:	44bc      	add	ip, r7
   14f52:	4463      	add	r3, ip
   14f54:	4a94      	ldr	r2, [pc, #592]	; (151a8 <processOnSMS+0x3e8>)
   14f56:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f58:	c313      	stmia	r3!, {r0, r1, r4}
   14f5a:	ca13      	ldmia	r2!, {r0, r1, r4}
   14f5c:	c313      	stmia	r3!, {r0, r1, r4}
   14f5e:	ca03      	ldmia	r2!, {r0, r1}
   14f60:	c303      	stmia	r3!, {r0, r1}
   14f62:	8811      	ldrh	r1, [r2, #0]
   14f64:	8019      	strh	r1, [r3, #0]
   14f66:	7892      	ldrb	r2, [r2, #2]
   14f68:	709a      	strb	r2, [r3, #2]
   14f6a:	f001 ffdb 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   14f6e:	4a8f      	ldr	r2, [pc, #572]	; (151ac <processOnSMS+0x3ec>)
   14f70:	68fb      	ldr	r3, [r7, #12]
   14f72:	0011      	movs	r1, r2
   14f74:	0018      	movs	r0, r3
   14f76:	4b7c      	ldr	r3, [pc, #496]	; (15168 <processOnSMS+0x3a8>)
   14f78:	4798      	blx	r3
   14f7a:	1e03      	subs	r3, r0, #0
   14f7c:	d030      	beq.n	14fe0 <processOnSMS+0x220>
	{
		clearNumbers(admin);
   14f7e:	4b76      	ldr	r3, [pc, #472]	; (15158 <processOnSMS+0x398>)
   14f80:	2294      	movs	r2, #148	; 0x94
   14f82:	0052      	lsls	r2, r2, #1
   14f84:	4694      	mov	ip, r2
   14f86:	2208      	movs	r2, #8
   14f88:	4690      	mov	r8, r2
   14f8a:	44b8      	add	r8, r7
   14f8c:	44c4      	add	ip, r8
   14f8e:	4463      	add	r3, ip
   14f90:	781b      	ldrb	r3, [r3, #0]
   14f92:	0018      	movs	r0, r3
   14f94:	4b86      	ldr	r3, [pc, #536]	; (151b0 <processOnSMS+0x3f0>)
   14f96:	4798      	blx	r3
		incomingSMSProcessed=true;
   14f98:	2328      	movs	r3, #40	; 0x28
   14f9a:	33ff      	adds	r3, #255	; 0xff
   14f9c:	2208      	movs	r2, #8
   14f9e:	4694      	mov	ip, r2
   14fa0:	44bc      	add	ip, r7
   14fa2:	4463      	add	r3, ip
   14fa4:	2201      	movs	r2, #1
   14fa6:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   14fa8:	4b6c      	ldr	r3, [pc, #432]	; (1515c <processOnSMS+0x39c>)
   14faa:	2294      	movs	r2, #148	; 0x94
   14fac:	0052      	lsls	r2, r2, #1
   14fae:	4694      	mov	ip, r2
   14fb0:	2208      	movs	r2, #8
   14fb2:	4690      	mov	r8, r2
   14fb4:	44b8      	add	r8, r7
   14fb6:	44c4      	add	ip, r8
   14fb8:	4463      	add	r3, ip
   14fba:	781b      	ldrb	r3, [r3, #0]
   14fbc:	2b00      	cmp	r3, #0
   14fbe:	d101      	bne.n	14fc4 <processOnSMS+0x204>
   14fc0:	f001 ffb0 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   14fc4:	230c      	movs	r3, #12
   14fc6:	2208      	movs	r2, #8
   14fc8:	4694      	mov	ip, r2
   14fca:	44bc      	add	ip, r7
   14fcc:	4463      	add	r3, ip
   14fce:	4a79      	ldr	r2, [pc, #484]	; (151b4 <processOnSMS+0x3f4>)
   14fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fd2:	c313      	stmia	r3!, {r0, r1, r4}
   14fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
   14fd6:	c313      	stmia	r3!, {r0, r1, r4}
   14fd8:	7812      	ldrb	r2, [r2, #0]
   14fda:	701a      	strb	r2, [r3, #0]
   14fdc:	f001 ffa2 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   14fe0:	4a75      	ldr	r2, [pc, #468]	; (151b8 <processOnSMS+0x3f8>)
   14fe2:	68fb      	ldr	r3, [r7, #12]
   14fe4:	0011      	movs	r1, r2
   14fe6:	0018      	movs	r0, r3
   14fe8:	4b5f      	ldr	r3, [pc, #380]	; (15168 <processOnSMS+0x3a8>)
   14fea:	4798      	blx	r3
   14fec:	1e03      	subs	r3, r0, #0
   14fee:	d065      	beq.n	150bc <processOnSMS+0x2fc>
	{
		saveAutoStartSettings(false);
   14ff0:	2000      	movs	r0, #0
   14ff2:	4b72      	ldr	r3, [pc, #456]	; (151bc <processOnSMS+0x3fc>)
   14ff4:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   14ff6:	4b72      	ldr	r3, [pc, #456]	; (151c0 <processOnSMS+0x400>)
   14ff8:	795b      	ldrb	r3, [r3, #5]
   14ffa:	2b00      	cmp	r3, #0
   14ffc:	d00d      	beq.n	1501a <processOnSMS+0x25a>
		{
			saveWaterBypassSettings(false);
   14ffe:	2000      	movs	r0, #0
   15000:	4b70      	ldr	r3, [pc, #448]	; (151c4 <processOnSMS+0x404>)
   15002:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   15004:	4b6e      	ldr	r3, [pc, #440]	; (151c0 <processOnSMS+0x400>)
   15006:	78db      	ldrb	r3, [r3, #3]
   15008:	2b00      	cmp	r3, #0
   1500a:	d003      	beq.n	15014 <processOnSMS+0x254>
			{
				saveM2MSettings(false);
   1500c:	2000      	movs	r0, #0
   1500e:	4b6e      	ldr	r3, [pc, #440]	; (151c8 <processOnSMS+0x408>)
   15010:	4798      	blx	r3
   15012:	e002      	b.n	1501a <processOnSMS+0x25a>
			}
			else
			{
				savePreventOverFlowSettings(false);
   15014:	2000      	movs	r0, #0
   15016:	4b6d      	ldr	r3, [pc, #436]	; (151cc <processOnSMS+0x40c>)
   15018:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1501a:	4b69      	ldr	r3, [pc, #420]	; (151c0 <processOnSMS+0x400>)
   1501c:	785b      	ldrb	r3, [r3, #1]
   1501e:	2b00      	cmp	r3, #0
   15020:	d008      	beq.n	15034 <processOnSMS+0x274>
		{
			setOverloadPer(120);
   15022:	2078      	movs	r0, #120	; 0x78
   15024:	4b6a      	ldr	r3, [pc, #424]	; (151d0 <processOnSMS+0x410>)
   15026:	4798      	blx	r3
			setUnderloadPer(85);
   15028:	2055      	movs	r0, #85	; 0x55
   1502a:	4b6a      	ldr	r3, [pc, #424]	; (151d4 <processOnSMS+0x414>)
   1502c:	4798      	blx	r3
			setCurrentDetection(false);
   1502e:	2000      	movs	r0, #0
   15030:	4b69      	ldr	r3, [pc, #420]	; (151d8 <processOnSMS+0x418>)
   15032:	4798      	blx	r3
		}
		saveEventStageSettings(0);
   15034:	2000      	movs	r0, #0
   15036:	4b69      	ldr	r3, [pc, #420]	; (151dc <processOnSMS+0x41c>)
   15038:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
   1503a:	2000      	movs	r0, #0
   1503c:	4b68      	ldr	r3, [pc, #416]	; (151e0 <processOnSMS+0x420>)
   1503e:	4798      	blx	r3
		saveResponseSettings('C');
   15040:	2043      	movs	r0, #67	; 0x43
   15042:	4b68      	ldr	r3, [pc, #416]	; (151e4 <processOnSMS+0x424>)
   15044:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   15046:	2032      	movs	r0, #50	; 0x32
   15048:	4b67      	ldr	r3, [pc, #412]	; (151e8 <processOnSMS+0x428>)
   1504a:	4798      	blx	r3
		saveStarDeltaTimer(2);
   1504c:	2002      	movs	r0, #2
   1504e:	4b67      	ldr	r3, [pc, #412]	; (151ec <processOnSMS+0x42c>)
   15050:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
   15052:	2001      	movs	r0, #1
   15054:	4b66      	ldr	r3, [pc, #408]	; (151f0 <processOnSMS+0x430>)
   15056:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   15058:	2050      	movs	r0, #80	; 0x50
   1505a:	4b66      	ldr	r3, [pc, #408]	; (151f4 <processOnSMS+0x434>)
   1505c:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   1505e:	2001      	movs	r0, #1
   15060:	4b65      	ldr	r3, [pc, #404]	; (151f8 <processOnSMS+0x438>)
   15062:	4798      	blx	r3
		setPrimaryNumberIndex(0);
   15064:	2000      	movs	r0, #0
   15066:	4b65      	ldr	r3, [pc, #404]	; (151fc <processOnSMS+0x43c>)
   15068:	4798      	blx	r3
		setSecondaryNumberIndex(1);
   1506a:	2001      	movs	r0, #1
   1506c:	4b64      	ldr	r3, [pc, #400]	; (15200 <processOnSMS+0x440>)
   1506e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15070:	2328      	movs	r3, #40	; 0x28
   15072:	33ff      	adds	r3, #255	; 0xff
   15074:	2208      	movs	r2, #8
   15076:	4694      	mov	ip, r2
   15078:	44bc      	add	ip, r7
   1507a:	4463      	add	r3, ip
   1507c:	2201      	movs	r2, #1
   1507e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15080:	4b36      	ldr	r3, [pc, #216]	; (1515c <processOnSMS+0x39c>)
   15082:	2294      	movs	r2, #148	; 0x94
   15084:	0052      	lsls	r2, r2, #1
   15086:	4694      	mov	ip, r2
   15088:	2208      	movs	r2, #8
   1508a:	4690      	mov	r8, r2
   1508c:	44b8      	add	r8, r7
   1508e:	44c4      	add	ip, r8
   15090:	4463      	add	r3, ip
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	2b00      	cmp	r3, #0
   15096:	d101      	bne.n	1509c <processOnSMS+0x2dc>
   15098:	f001 ff44 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   1509c:	230c      	movs	r3, #12
   1509e:	2208      	movs	r2, #8
   150a0:	4694      	mov	ip, r2
   150a2:	44bc      	add	ip, r7
   150a4:	4463      	add	r3, ip
   150a6:	4a57      	ldr	r2, [pc, #348]	; (15204 <processOnSMS+0x444>)
   150a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   150aa:	c313      	stmia	r3!, {r0, r1, r4}
   150ac:	ca13      	ldmia	r2!, {r0, r1, r4}
   150ae:	c313      	stmia	r3!, {r0, r1, r4}
   150b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   150b2:	c313      	stmia	r3!, {r0, r1, r4}
   150b4:	7812      	ldrb	r2, [r2, #0]
   150b6:	701a      	strb	r2, [r3, #0]
   150b8:	f001 ff34 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   150bc:	4a52      	ldr	r2, [pc, #328]	; (15208 <processOnSMS+0x448>)
   150be:	68fb      	ldr	r3, [r7, #12]
   150c0:	0011      	movs	r1, r2
   150c2:	0018      	movs	r0, r3
   150c4:	4b28      	ldr	r3, [pc, #160]	; (15168 <processOnSMS+0x3a8>)
   150c6:	4798      	blx	r3
   150c8:	1e03      	subs	r3, r0, #0
   150ca:	d038      	beq.n	1513e <processOnSMS+0x37e>
	{
		response_sms_processed_cmd = true;
   150cc:	4b23      	ldr	r3, [pc, #140]	; (1515c <processOnSMS+0x39c>)
   150ce:	2294      	movs	r2, #148	; 0x94
   150d0:	0052      	lsls	r2, r2, #1
   150d2:	4694      	mov	ip, r2
   150d4:	2208      	movs	r2, #8
   150d6:	4690      	mov	r8, r2
   150d8:	44b8      	add	r8, r7
   150da:	44c4      	add	ip, r8
   150dc:	4463      	add	r3, ip
   150de:	2201      	movs	r2, #1
   150e0:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   150e2:	2328      	movs	r3, #40	; 0x28
   150e4:	33ff      	adds	r3, #255	; 0xff
   150e6:	2208      	movs	r2, #8
   150e8:	4694      	mov	ip, r2
   150ea:	44bc      	add	ip, r7
   150ec:	4463      	add	r3, ip
   150ee:	2201      	movs	r2, #1
   150f0:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   150f2:	230c      	movs	r3, #12
   150f4:	2208      	movs	r2, #8
   150f6:	4694      	mov	ip, r2
   150f8:	44bc      	add	ip, r7
   150fa:	4463      	add	r3, ip
   150fc:	22fa      	movs	r2, #250	; 0xfa
   150fe:	2100      	movs	r1, #0
   15100:	0018      	movs	r0, r3
   15102:	4b1d      	ldr	r3, [pc, #116]	; (15178 <processOnSMS+0x3b8>)
   15104:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   15106:	4b41      	ldr	r3, [pc, #260]	; (1520c <processOnSMS+0x44c>)
   15108:	789b      	ldrb	r3, [r3, #2]
   1510a:	2b00      	cmp	r3, #0
   1510c:	d10d      	bne.n	1512a <processOnSMS+0x36a>
		{
			strcpy(resep_msg,"No Numbers Exists");
   1510e:	230c      	movs	r3, #12
   15110:	2208      	movs	r2, #8
   15112:	4694      	mov	ip, r2
   15114:	44bc      	add	ip, r7
   15116:	4463      	add	r3, ip
   15118:	4a3d      	ldr	r2, [pc, #244]	; (15210 <processOnSMS+0x450>)
   1511a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1511c:	c313      	stmia	r3!, {r0, r1, r4}
   1511e:	6811      	ldr	r1, [r2, #0]
   15120:	6019      	str	r1, [r3, #0]
   15122:	8892      	ldrh	r2, [r2, #4]
   15124:	809a      	strh	r2, [r3, #4]
   15126:	f001 fefd 	bl	16f24 <processOnSMS+0x2164>
		}
		else
		{
			getNumbers(resep_msg);
   1512a:	230c      	movs	r3, #12
   1512c:	2208      	movs	r2, #8
   1512e:	4694      	mov	ip, r2
   15130:	44bc      	add	ip, r7
   15132:	4463      	add	r3, ip
   15134:	0018      	movs	r0, r3
   15136:	4b37      	ldr	r3, [pc, #220]	; (15214 <processOnSMS+0x454>)
   15138:	4798      	blx	r3
   1513a:	f001 fef3 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   1513e:	4a36      	ldr	r2, [pc, #216]	; (15218 <processOnSMS+0x458>)
   15140:	68fb      	ldr	r3, [r7, #12]
   15142:	0011      	movs	r1, r2
   15144:	0018      	movs	r0, r3
   15146:	4b08      	ldr	r3, [pc, #32]	; (15168 <processOnSMS+0x3a8>)
   15148:	4798      	blx	r3
   1514a:	1e03      	subs	r3, r0, #0
   1514c:	d066      	beq.n	1521c <processOnSMS+0x45c>
	{
		system_reset();
   1514e:	4b12      	ldr	r3, [pc, #72]	; (15198 <processOnSMS+0x3d8>)
   15150:	4798      	blx	r3
   15152:	f001 fee7 	bl	16f24 <processOnSMS+0x2164>
   15156:	46c0      	nop			; (mov r8, r8)
   15158:	fffffedb 	.word	0xfffffedb
   1515c:	fffffeda 	.word	0xfffffeda
   15160:	fffffed9 	.word	0xfffffed9
   15164:	0002a0d0 	.word	0x0002a0d0
   15168:	00014021 	.word	0x00014021
   1516c:	0002a0d8 	.word	0x0002a0d8
   15170:	200005f8 	.word	0x200005f8
   15174:	20000604 	.word	0x20000604
   15178:	00028e93 	.word	0x00028e93
   1517c:	00029113 	.word	0x00029113
   15180:	00012301 	.word	0x00012301
   15184:	20000584 	.word	0x20000584
   15188:	00028e5d 	.word	0x00028e5d
   1518c:	00023a71 	.word	0x00023a71
   15190:	00023c19 	.word	0x00023c19
   15194:	0001ff69 	.word	0x0001ff69
   15198:	000140f5 	.word	0x000140f5
   1519c:	0002a0e0 	.word	0x0002a0e0
   151a0:	00013051 	.word	0x00013051
   151a4:	0002a0e8 	.word	0x0002a0e8
   151a8:	0002a10c 	.word	0x0002a10c
   151ac:	0002a130 	.word	0x0002a130
   151b0:	00011109 	.word	0x00011109
   151b4:	0002a13c 	.word	0x0002a13c
   151b8:	0002a158 	.word	0x0002a158
   151bc:	000112a5 	.word	0x000112a5
   151c0:	2000062c 	.word	0x2000062c
   151c4:	00011465 	.word	0x00011465
   151c8:	00010be1 	.word	0x00010be1
   151cc:	000114b1 	.word	0x000114b1
   151d0:	000114fd 	.word	0x000114fd
   151d4:	00011565 	.word	0x00011565
   151d8:	00011985 	.word	0x00011985
   151dc:	00011a1d 	.word	0x00011a1d
   151e0:	0001133d 	.word	0x0001133d
   151e4:	00011389 	.word	0x00011389
   151e8:	000112f1 	.word	0x000112f1
   151ec:	000119d1 	.word	0x000119d1
   151f0:	000115d5 	.word	0x000115d5
   151f4:	00011621 	.word	0x00011621
   151f8:	0001166d 	.word	0x0001166d
   151fc:	00011afd 	.word	0x00011afd
   15200:	00011b4d 	.word	0x00011b4d
   15204:	0002a160 	.word	0x0002a160
   15208:	0002a188 	.word	0x0002a188
   1520c:	20000614 	.word	0x20000614
   15210:	0002a18c 	.word	0x0002a18c
   15214:	000107f5 	.word	0x000107f5
   15218:	0002a1a0 	.word	0x0002a1a0
	}
	else if (StringstartsWith(received_command,"DID"))
   1521c:	4aea      	ldr	r2, [pc, #936]	; (155c8 <processOnSMS+0x808>)
   1521e:	68fb      	ldr	r3, [r7, #12]
   15220:	0011      	movs	r1, r2
   15222:	0018      	movs	r0, r3
   15224:	4be9      	ldr	r3, [pc, #932]	; (155cc <processOnSMS+0x80c>)
   15226:	4798      	blx	r3
   15228:	1e03      	subs	r3, r0, #0
   1522a:	d01f      	beq.n	1526c <processOnSMS+0x4ac>
	{
		response_sms_processed_cmd=true;
   1522c:	4be8      	ldr	r3, [pc, #928]	; (155d0 <processOnSMS+0x810>)
   1522e:	2294      	movs	r2, #148	; 0x94
   15230:	0052      	lsls	r2, r2, #1
   15232:	4694      	mov	ip, r2
   15234:	2208      	movs	r2, #8
   15236:	4690      	mov	r8, r2
   15238:	44b8      	add	r8, r7
   1523a:	44c4      	add	ip, r8
   1523c:	4463      	add	r3, ip
   1523e:	2201      	movs	r2, #1
   15240:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15242:	2328      	movs	r3, #40	; 0x28
   15244:	33ff      	adds	r3, #255	; 0xff
   15246:	2208      	movs	r2, #8
   15248:	4694      	mov	ip, r2
   1524a:	44bc      	add	ip, r7
   1524c:	4463      	add	r3, ip
   1524e:	2201      	movs	r2, #1
   15250:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   15252:	4be0      	ldr	r3, [pc, #896]	; (155d4 <processOnSMS+0x814>)
   15254:	689a      	ldr	r2, [r3, #8]
   15256:	4be0      	ldr	r3, [pc, #896]	; (155d8 <processOnSMS+0x818>)
   15258:	49e0      	ldr	r1, [pc, #896]	; (155dc <processOnSMS+0x81c>)
   1525a:	200c      	movs	r0, #12
   1525c:	2408      	movs	r4, #8
   1525e:	46a4      	mov	ip, r4
   15260:	44bc      	add	ip, r7
   15262:	4460      	add	r0, ip
   15264:	4cde      	ldr	r4, [pc, #888]	; (155e0 <processOnSMS+0x820>)
   15266:	47a0      	blx	r4
   15268:	f001 fe5c 	bl	16f24 <processOnSMS+0x2164>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   1526c:	4add      	ldr	r2, [pc, #884]	; (155e4 <processOnSMS+0x824>)
   1526e:	68fb      	ldr	r3, [r7, #12]
   15270:	0011      	movs	r1, r2
   15272:	0018      	movs	r0, r3
   15274:	4bd5      	ldr	r3, [pc, #852]	; (155cc <processOnSMS+0x80c>)
   15276:	4798      	blx	r3
   15278:	1e03      	subs	r3, r0, #0
   1527a:	d027      	beq.n	152cc <processOnSMS+0x50c>
	{
		saveAutoStartSettings(true);
   1527c:	2001      	movs	r0, #1
   1527e:	4bda      	ldr	r3, [pc, #872]	; (155e8 <processOnSMS+0x828>)
   15280:	4798      	blx	r3
		resetAutoStart(true);
   15282:	2001      	movs	r0, #1
   15284:	4bd9      	ldr	r3, [pc, #868]	; (155ec <processOnSMS+0x82c>)
   15286:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15288:	2328      	movs	r3, #40	; 0x28
   1528a:	33ff      	adds	r3, #255	; 0xff
   1528c:	2208      	movs	r2, #8
   1528e:	4694      	mov	ip, r2
   15290:	44bc      	add	ip, r7
   15292:	4463      	add	r3, ip
   15294:	2201      	movs	r2, #1
   15296:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15298:	4bcd      	ldr	r3, [pc, #820]	; (155d0 <processOnSMS+0x810>)
   1529a:	2294      	movs	r2, #148	; 0x94
   1529c:	0052      	lsls	r2, r2, #1
   1529e:	4694      	mov	ip, r2
   152a0:	2208      	movs	r2, #8
   152a2:	4690      	mov	r8, r2
   152a4:	44b8      	add	r8, r7
   152a6:	44c4      	add	ip, r8
   152a8:	4463      	add	r3, ip
   152aa:	781b      	ldrb	r3, [r3, #0]
   152ac:	2b00      	cmp	r3, #0
   152ae:	d101      	bne.n	152b4 <processOnSMS+0x4f4>
   152b0:	f001 fe38 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
   152b4:	230c      	movs	r3, #12
   152b6:	2208      	movs	r2, #8
   152b8:	4694      	mov	ip, r2
   152ba:	44bc      	add	ip, r7
   152bc:	4463      	add	r3, ip
   152be:	4acc      	ldr	r2, [pc, #816]	; (155f0 <processOnSMS+0x830>)
   152c0:	ca13      	ldmia	r2!, {r0, r1, r4}
   152c2:	c313      	stmia	r3!, {r0, r1, r4}
   152c4:	6812      	ldr	r2, [r2, #0]
   152c6:	601a      	str	r2, [r3, #0]
   152c8:	f001 fe2c 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   152cc:	4ac9      	ldr	r2, [pc, #804]	; (155f4 <processOnSMS+0x834>)
   152ce:	68fb      	ldr	r3, [r7, #12]
   152d0:	0011      	movs	r1, r2
   152d2:	0018      	movs	r0, r3
   152d4:	4bbd      	ldr	r3, [pc, #756]	; (155cc <processOnSMS+0x80c>)
   152d6:	4798      	blx	r3
   152d8:	1e03      	subs	r3, r0, #0
   152da:	d029      	beq.n	15330 <processOnSMS+0x570>
	{
		saveAutoStartSettings(false);
   152dc:	2000      	movs	r0, #0
   152de:	4bc2      	ldr	r3, [pc, #776]	; (155e8 <processOnSMS+0x828>)
   152e0:	4798      	blx	r3
		resetAutoStart(true);
   152e2:	2001      	movs	r0, #1
   152e4:	4bc1      	ldr	r3, [pc, #772]	; (155ec <processOnSMS+0x82c>)
   152e6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   152e8:	2328      	movs	r3, #40	; 0x28
   152ea:	33ff      	adds	r3, #255	; 0xff
   152ec:	2208      	movs	r2, #8
   152ee:	4694      	mov	ip, r2
   152f0:	44bc      	add	ip, r7
   152f2:	4463      	add	r3, ip
   152f4:	2201      	movs	r2, #1
   152f6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   152f8:	4bb5      	ldr	r3, [pc, #724]	; (155d0 <processOnSMS+0x810>)
   152fa:	2294      	movs	r2, #148	; 0x94
   152fc:	0052      	lsls	r2, r2, #1
   152fe:	4694      	mov	ip, r2
   15300:	2208      	movs	r2, #8
   15302:	4690      	mov	r8, r2
   15304:	44b8      	add	r8, r7
   15306:	44c4      	add	ip, r8
   15308:	4463      	add	r3, ip
   1530a:	781b      	ldrb	r3, [r3, #0]
   1530c:	2b00      	cmp	r3, #0
   1530e:	d101      	bne.n	15314 <processOnSMS+0x554>
   15310:	f001 fe08 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
   15314:	230c      	movs	r3, #12
   15316:	2208      	movs	r2, #8
   15318:	4694      	mov	ip, r2
   1531a:	44bc      	add	ip, r7
   1531c:	4463      	add	r3, ip
   1531e:	4ab6      	ldr	r2, [pc, #728]	; (155f8 <processOnSMS+0x838>)
   15320:	ca13      	ldmia	r2!, {r0, r1, r4}
   15322:	c313      	stmia	r3!, {r0, r1, r4}
   15324:	6811      	ldr	r1, [r2, #0]
   15326:	6019      	str	r1, [r3, #0]
   15328:	7912      	ldrb	r2, [r2, #4]
   1532a:	711a      	strb	r2, [r3, #4]
   1532c:	f001 fdfa 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   15330:	4ab2      	ldr	r2, [pc, #712]	; (155fc <processOnSMS+0x83c>)
   15332:	68fb      	ldr	r3, [r7, #12]
   15334:	0011      	movs	r1, r2
   15336:	0018      	movs	r0, r3
   15338:	4ba4      	ldr	r3, [pc, #656]	; (155cc <processOnSMS+0x80c>)
   1533a:	4798      	blx	r3
   1533c:	1e03      	subs	r3, r0, #0
   1533e:	d02a      	beq.n	15396 <processOnSMS+0x5d6>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15340:	4ba4      	ldr	r3, [pc, #656]	; (155d4 <processOnSMS+0x814>)
   15342:	795b      	ldrb	r3, [r3, #5]
   15344:	2b00      	cmp	r3, #0
   15346:	d101      	bne.n	1534c <processOnSMS+0x58c>
   15348:	f001 fdec 	bl	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   1534c:	2328      	movs	r3, #40	; 0x28
   1534e:	33ff      	adds	r3, #255	; 0xff
   15350:	2208      	movs	r2, #8
   15352:	4694      	mov	ip, r2
   15354:	44bc      	add	ip, r7
   15356:	4463      	add	r3, ip
   15358:	2201      	movs	r2, #1
   1535a:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   1535c:	2001      	movs	r0, #1
   1535e:	4ba8      	ldr	r3, [pc, #672]	; (15600 <processOnSMS+0x840>)
   15360:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15362:	4b9b      	ldr	r3, [pc, #620]	; (155d0 <processOnSMS+0x810>)
   15364:	2294      	movs	r2, #148	; 0x94
   15366:	0052      	lsls	r2, r2, #1
   15368:	4694      	mov	ip, r2
   1536a:	2208      	movs	r2, #8
   1536c:	4690      	mov	r8, r2
   1536e:	44b8      	add	r8, r7
   15370:	44c4      	add	ip, r8
   15372:	4463      	add	r3, ip
   15374:	781b      	ldrb	r3, [r3, #0]
   15376:	2b00      	cmp	r3, #0
   15378:	d101      	bne.n	1537e <processOnSMS+0x5be>
   1537a:	f001 fdd3 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   1537e:	230c      	movs	r3, #12
   15380:	2208      	movs	r2, #8
   15382:	4694      	mov	ip, r2
   15384:	44bc      	add	ip, r7
   15386:	4463      	add	r3, ip
   15388:	4a9e      	ldr	r2, [pc, #632]	; (15604 <processOnSMS+0x844>)
   1538a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1538c:	c313      	stmia	r3!, {r0, r1, r4}
   1538e:	6812      	ldr	r2, [r2, #0]
   15390:	601a      	str	r2, [r3, #0]
   15392:	f001 fdc7 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   15396:	4a9c      	ldr	r2, [pc, #624]	; (15608 <processOnSMS+0x848>)
   15398:	68fb      	ldr	r3, [r7, #12]
   1539a:	0011      	movs	r1, r2
   1539c:	0018      	movs	r0, r3
   1539e:	4b8b      	ldr	r3, [pc, #556]	; (155cc <processOnSMS+0x80c>)
   153a0:	4798      	blx	r3
   153a2:	1e03      	subs	r3, r0, #0
   153a4:	d02c      	beq.n	15400 <processOnSMS+0x640>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   153a6:	4b8b      	ldr	r3, [pc, #556]	; (155d4 <processOnSMS+0x814>)
   153a8:	795b      	ldrb	r3, [r3, #5]
   153aa:	2b00      	cmp	r3, #0
   153ac:	d101      	bne.n	153b2 <processOnSMS+0x5f2>
   153ae:	f001 fdb9 	bl	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   153b2:	2328      	movs	r3, #40	; 0x28
   153b4:	33ff      	adds	r3, #255	; 0xff
   153b6:	2208      	movs	r2, #8
   153b8:	4694      	mov	ip, r2
   153ba:	44bc      	add	ip, r7
   153bc:	4463      	add	r3, ip
   153be:	2201      	movs	r2, #1
   153c0:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   153c2:	2000      	movs	r0, #0
   153c4:	4b8e      	ldr	r3, [pc, #568]	; (15600 <processOnSMS+0x840>)
   153c6:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   153c8:	4b81      	ldr	r3, [pc, #516]	; (155d0 <processOnSMS+0x810>)
   153ca:	2294      	movs	r2, #148	; 0x94
   153cc:	0052      	lsls	r2, r2, #1
   153ce:	4694      	mov	ip, r2
   153d0:	2208      	movs	r2, #8
   153d2:	4690      	mov	r8, r2
   153d4:	44b8      	add	r8, r7
   153d6:	44c4      	add	ip, r8
   153d8:	4463      	add	r3, ip
   153da:	781b      	ldrb	r3, [r3, #0]
   153dc:	2b00      	cmp	r3, #0
   153de:	d101      	bne.n	153e4 <processOnSMS+0x624>
   153e0:	f001 fda0 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   153e4:	230c      	movs	r3, #12
   153e6:	2208      	movs	r2, #8
   153e8:	4694      	mov	ip, r2
   153ea:	44bc      	add	ip, r7
   153ec:	4463      	add	r3, ip
   153ee:	4a87      	ldr	r2, [pc, #540]	; (1560c <processOnSMS+0x84c>)
   153f0:	ca13      	ldmia	r2!, {r0, r1, r4}
   153f2:	c313      	stmia	r3!, {r0, r1, r4}
   153f4:	6811      	ldr	r1, [r2, #0]
   153f6:	6019      	str	r1, [r3, #0]
   153f8:	7912      	ldrb	r2, [r2, #4]
   153fa:	711a      	strb	r2, [r3, #4]
   153fc:	f001 fd92 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   15400:	4a83      	ldr	r2, [pc, #524]	; (15610 <processOnSMS+0x850>)
   15402:	68fb      	ldr	r3, [r7, #12]
   15404:	0011      	movs	r1, r2
   15406:	0018      	movs	r0, r3
   15408:	4b70      	ldr	r3, [pc, #448]	; (155cc <processOnSMS+0x80c>)
   1540a:	4798      	blx	r3
   1540c:	1e03      	subs	r3, r0, #0
   1540e:	d026      	beq.n	1545e <processOnSMS+0x69e>
	{
		saveSinglePhasingSettings(true);
   15410:	2001      	movs	r0, #1
   15412:	4b80      	ldr	r3, [pc, #512]	; (15614 <processOnSMS+0x854>)
   15414:	4798      	blx	r3
		incomingSMSProcessed=true;
   15416:	2328      	movs	r3, #40	; 0x28
   15418:	33ff      	adds	r3, #255	; 0xff
   1541a:	2208      	movs	r2, #8
   1541c:	4694      	mov	ip, r2
   1541e:	44bc      	add	ip, r7
   15420:	4463      	add	r3, ip
   15422:	2201      	movs	r2, #1
   15424:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15426:	4b6a      	ldr	r3, [pc, #424]	; (155d0 <processOnSMS+0x810>)
   15428:	2294      	movs	r2, #148	; 0x94
   1542a:	0052      	lsls	r2, r2, #1
   1542c:	4694      	mov	ip, r2
   1542e:	2208      	movs	r2, #8
   15430:	4690      	mov	r8, r2
   15432:	44b8      	add	r8, r7
   15434:	44c4      	add	ip, r8
   15436:	4463      	add	r3, ip
   15438:	781b      	ldrb	r3, [r3, #0]
   1543a:	2b00      	cmp	r3, #0
   1543c:	d101      	bne.n	15442 <processOnSMS+0x682>
   1543e:	f001 fd71 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"SPP ON");
   15442:	230c      	movs	r3, #12
   15444:	2208      	movs	r2, #8
   15446:	4694      	mov	ip, r2
   15448:	44bc      	add	ip, r7
   1544a:	4463      	add	r3, ip
   1544c:	4a72      	ldr	r2, [pc, #456]	; (15618 <processOnSMS+0x858>)
   1544e:	6811      	ldr	r1, [r2, #0]
   15450:	6019      	str	r1, [r3, #0]
   15452:	8891      	ldrh	r1, [r2, #4]
   15454:	8099      	strh	r1, [r3, #4]
   15456:	7992      	ldrb	r2, [r2, #6]
   15458:	719a      	strb	r2, [r3, #6]
   1545a:	f001 fd63 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   1545e:	4a6f      	ldr	r2, [pc, #444]	; (1561c <processOnSMS+0x85c>)
   15460:	68fb      	ldr	r3, [r7, #12]
   15462:	0011      	movs	r1, r2
   15464:	0018      	movs	r0, r3
   15466:	4b59      	ldr	r3, [pc, #356]	; (155cc <processOnSMS+0x80c>)
   15468:	4798      	blx	r3
   1546a:	1e03      	subs	r3, r0, #0
   1546c:	d022      	beq.n	154b4 <processOnSMS+0x6f4>
	{
		saveSinglePhasingSettings(false);
   1546e:	2000      	movs	r0, #0
   15470:	4b68      	ldr	r3, [pc, #416]	; (15614 <processOnSMS+0x854>)
   15472:	4798      	blx	r3
		incomingSMSProcessed=true;
   15474:	2328      	movs	r3, #40	; 0x28
   15476:	33ff      	adds	r3, #255	; 0xff
   15478:	2208      	movs	r2, #8
   1547a:	4694      	mov	ip, r2
   1547c:	44bc      	add	ip, r7
   1547e:	4463      	add	r3, ip
   15480:	2201      	movs	r2, #1
   15482:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15484:	4b52      	ldr	r3, [pc, #328]	; (155d0 <processOnSMS+0x810>)
   15486:	2294      	movs	r2, #148	; 0x94
   15488:	0052      	lsls	r2, r2, #1
   1548a:	4694      	mov	ip, r2
   1548c:	2208      	movs	r2, #8
   1548e:	4690      	mov	r8, r2
   15490:	44b8      	add	r8, r7
   15492:	44c4      	add	ip, r8
   15494:	4463      	add	r3, ip
   15496:	781b      	ldrb	r3, [r3, #0]
   15498:	2b00      	cmp	r3, #0
   1549a:	d101      	bne.n	154a0 <processOnSMS+0x6e0>
   1549c:	f001 fd42 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"SPP OFF");
   154a0:	230c      	movs	r3, #12
   154a2:	2208      	movs	r2, #8
   154a4:	4694      	mov	ip, r2
   154a6:	44bc      	add	ip, r7
   154a8:	4463      	add	r3, ip
   154aa:	4a5d      	ldr	r2, [pc, #372]	; (15620 <processOnSMS+0x860>)
   154ac:	ca03      	ldmia	r2!, {r0, r1}
   154ae:	c303      	stmia	r3!, {r0, r1}
   154b0:	f001 fd38 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   154b4:	4a5b      	ldr	r2, [pc, #364]	; (15624 <processOnSMS+0x864>)
   154b6:	68fb      	ldr	r3, [r7, #12]
   154b8:	0011      	movs	r1, r2
   154ba:	0018      	movs	r0, r3
   154bc:	4b43      	ldr	r3, [pc, #268]	; (155cc <processOnSMS+0x80c>)
   154be:	4798      	blx	r3
   154c0:	1e03      	subs	r3, r0, #0
   154c2:	d055      	beq.n	15570 <processOnSMS+0x7b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   154c4:	68fb      	ldr	r3, [r7, #12]
   154c6:	1d1c      	adds	r4, r3, #4
   154c8:	68fb      	ldr	r3, [r7, #12]
   154ca:	0018      	movs	r0, r3
   154cc:	4b56      	ldr	r3, [pc, #344]	; (15628 <processOnSMS+0x868>)
   154ce:	4798      	blx	r3
   154d0:	0002      	movs	r2, r0
   154d2:	68fb      	ldr	r3, [r7, #12]
   154d4:	0021      	movs	r1, r4
   154d6:	0018      	movs	r0, r3
   154d8:	4b54      	ldr	r3, [pc, #336]	; (1562c <processOnSMS+0x86c>)
   154da:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
   154dc:	68fb      	ldr	r3, [r7, #12]
   154de:	0018      	movs	r0, r3
   154e0:	4b53      	ldr	r3, [pc, #332]	; (15630 <processOnSMS+0x870>)
   154e2:	4798      	blx	r3
   154e4:	0002      	movs	r2, r0
   154e6:	2393      	movs	r3, #147	; 0x93
   154e8:	005b      	lsls	r3, r3, #1
   154ea:	2108      	movs	r1, #8
   154ec:	468c      	mov	ip, r1
   154ee:	44bc      	add	ip, r7
   154f0:	4463      	add	r3, ip
   154f2:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   154f4:	2393      	movs	r3, #147	; 0x93
   154f6:	005b      	lsls	r3, r3, #1
   154f8:	2208      	movs	r2, #8
   154fa:	4694      	mov	ip, r2
   154fc:	44bc      	add	ip, r7
   154fe:	4463      	add	r3, ip
   15500:	781b      	ldrb	r3, [r3, #0]
   15502:	2b13      	cmp	r3, #19
   15504:	d807      	bhi.n	15516 <processOnSMS+0x756>
   15506:	2393      	movs	r3, #147	; 0x93
   15508:	005b      	lsls	r3, r3, #1
   1550a:	2208      	movs	r2, #8
   1550c:	4694      	mov	ip, r2
   1550e:	44bc      	add	ip, r7
   15510:	4463      	add	r3, ip
   15512:	2214      	movs	r2, #20
   15514:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
   15516:	2393      	movs	r3, #147	; 0x93
   15518:	005b      	lsls	r3, r3, #1
   1551a:	2208      	movs	r2, #8
   1551c:	4694      	mov	ip, r2
   1551e:	44bc      	add	ip, r7
   15520:	4463      	add	r3, ip
   15522:	781b      	ldrb	r3, [r3, #0]
   15524:	b29b      	uxth	r3, r3
   15526:	0018      	movs	r0, r3
   15528:	4b42      	ldr	r3, [pc, #264]	; (15634 <processOnSMS+0x874>)
   1552a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1552c:	2328      	movs	r3, #40	; 0x28
   1552e:	33ff      	adds	r3, #255	; 0xff
   15530:	2208      	movs	r2, #8
   15532:	4694      	mov	ip, r2
   15534:	44bc      	add	ip, r7
   15536:	4463      	add	r3, ip
   15538:	2201      	movs	r2, #1
   1553a:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   1553c:	4b24      	ldr	r3, [pc, #144]	; (155d0 <processOnSMS+0x810>)
   1553e:	2294      	movs	r2, #148	; 0x94
   15540:	0052      	lsls	r2, r2, #1
   15542:	4694      	mov	ip, r2
   15544:	2208      	movs	r2, #8
   15546:	4690      	mov	r8, r2
   15548:	44b8      	add	r8, r7
   1554a:	44c4      	add	ip, r8
   1554c:	4463      	add	r3, ip
   1554e:	781b      	ldrb	r3, [r3, #0]
   15550:	2b00      	cmp	r3, #0
   15552:	d101      	bne.n	15558 <processOnSMS+0x798>
   15554:	f001 fce6 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   15558:	230c      	movs	r3, #12
   1555a:	2208      	movs	r2, #8
   1555c:	4694      	mov	ip, r2
   1555e:	44bc      	add	ip, r7
   15560:	4463      	add	r3, ip
   15562:	4a35      	ldr	r2, [pc, #212]	; (15638 <processOnSMS+0x878>)
   15564:	ca13      	ldmia	r2!, {r0, r1, r4}
   15566:	c313      	stmia	r3!, {r0, r1, r4}
   15568:	7812      	ldrb	r2, [r2, #0]
   1556a:	701a      	strb	r2, [r3, #0]
   1556c:	f001 fcda 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15570:	4a32      	ldr	r2, [pc, #200]	; (1563c <processOnSMS+0x87c>)
   15572:	68fb      	ldr	r3, [r7, #12]
   15574:	0011      	movs	r1, r2
   15576:	0018      	movs	r0, r3
   15578:	4b14      	ldr	r3, [pc, #80]	; (155cc <processOnSMS+0x80c>)
   1557a:	4798      	blx	r3
   1557c:	1e03      	subs	r3, r0, #0
   1557e:	d063      	beq.n	15648 <processOnSMS+0x888>
	{
		savePhaseSequenceProtectionSettings(true);
   15580:	2001      	movs	r0, #1
   15582:	4b2f      	ldr	r3, [pc, #188]	; (15640 <processOnSMS+0x880>)
   15584:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15586:	2328      	movs	r3, #40	; 0x28
   15588:	33ff      	adds	r3, #255	; 0xff
   1558a:	2208      	movs	r2, #8
   1558c:	4694      	mov	ip, r2
   1558e:	44bc      	add	ip, r7
   15590:	4463      	add	r3, ip
   15592:	2201      	movs	r2, #1
   15594:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15596:	4b0e      	ldr	r3, [pc, #56]	; (155d0 <processOnSMS+0x810>)
   15598:	2294      	movs	r2, #148	; 0x94
   1559a:	0052      	lsls	r2, r2, #1
   1559c:	4694      	mov	ip, r2
   1559e:	2208      	movs	r2, #8
   155a0:	4690      	mov	r8, r2
   155a2:	44b8      	add	r8, r7
   155a4:	44c4      	add	ip, r8
   155a6:	4463      	add	r3, ip
   155a8:	781b      	ldrb	r3, [r3, #0]
   155aa:	2b00      	cmp	r3, #0
   155ac:	d101      	bne.n	155b2 <processOnSMS+0x7f2>
   155ae:	f001 fcb9 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"SEQP ON");
   155b2:	230c      	movs	r3, #12
   155b4:	2208      	movs	r2, #8
   155b6:	4694      	mov	ip, r2
   155b8:	44bc      	add	ip, r7
   155ba:	4463      	add	r3, ip
   155bc:	4a21      	ldr	r2, [pc, #132]	; (15644 <processOnSMS+0x884>)
   155be:	ca03      	ldmia	r2!, {r0, r1}
   155c0:	c303      	stmia	r3!, {r0, r1}
   155c2:	f001 fcaf 	bl	16f24 <processOnSMS+0x2164>
   155c6:	46c0      	nop			; (mov r8, r8)
   155c8:	0002a1a8 	.word	0x0002a1a8
   155cc:	00014021 	.word	0x00014021
   155d0:	fffffeda 	.word	0xfffffeda
   155d4:	2000062c 	.word	0x2000062c
   155d8:	0002a1ac 	.word	0x0002a1ac
   155dc:	0002a1c0 	.word	0x0002a1c0
   155e0:	00029099 	.word	0x00029099
   155e4:	0002a1c8 	.word	0x0002a1c8
   155e8:	000112a5 	.word	0x000112a5
   155ec:	0001aefd 	.word	0x0001aefd
   155f0:	0002a1d0 	.word	0x0002a1d0
   155f4:	0002a1e0 	.word	0x0002a1e0
   155f8:	0002a1e8 	.word	0x0002a1e8
   155fc:	0002a1fc 	.word	0x0002a1fc
   15600:	00011465 	.word	0x00011465
   15604:	0002a204 	.word	0x0002a204
   15608:	0002a214 	.word	0x0002a214
   1560c:	0002a21c 	.word	0x0002a21c
   15610:	0002a230 	.word	0x0002a230
   15614:	000115d5 	.word	0x000115d5
   15618:	0002a238 	.word	0x0002a238
   1561c:	0002a240 	.word	0x0002a240
   15620:	0002a248 	.word	0x0002a248
   15624:	0002a250 	.word	0x0002a250
   15628:	00029123 	.word	0x00029123
   1562c:	00028e6f 	.word	0x00028e6f
   15630:	00028d79 	.word	0x00028d79
   15634:	00011621 	.word	0x00011621
   15638:	0002a258 	.word	0x0002a258
   1563c:	0002a268 	.word	0x0002a268
   15640:	0001166d 	.word	0x0001166d
   15644:	0002a270 	.word	0x0002a270
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   15648:	4adc      	ldr	r2, [pc, #880]	; (159bc <processOnSMS+0xbfc>)
   1564a:	68fb      	ldr	r3, [r7, #12]
   1564c:	0011      	movs	r1, r2
   1564e:	0018      	movs	r0, r3
   15650:	4bdb      	ldr	r3, [pc, #876]	; (159c0 <processOnSMS+0xc00>)
   15652:	4798      	blx	r3
   15654:	1e03      	subs	r3, r0, #0
   15656:	d024      	beq.n	156a2 <processOnSMS+0x8e2>
	{
		savePhaseSequenceProtectionSettings(false);
   15658:	2000      	movs	r0, #0
   1565a:	4bda      	ldr	r3, [pc, #872]	; (159c4 <processOnSMS+0xc04>)
   1565c:	4798      	blx	r3

		incomingSMSProcessed=true;
   1565e:	2328      	movs	r3, #40	; 0x28
   15660:	33ff      	adds	r3, #255	; 0xff
   15662:	2208      	movs	r2, #8
   15664:	4694      	mov	ip, r2
   15666:	44bc      	add	ip, r7
   15668:	4463      	add	r3, ip
   1566a:	2201      	movs	r2, #1
   1566c:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1566e:	4bd6      	ldr	r3, [pc, #856]	; (159c8 <processOnSMS+0xc08>)
   15670:	2294      	movs	r2, #148	; 0x94
   15672:	0052      	lsls	r2, r2, #1
   15674:	4694      	mov	ip, r2
   15676:	2208      	movs	r2, #8
   15678:	4690      	mov	r8, r2
   1567a:	44b8      	add	r8, r7
   1567c:	44c4      	add	ip, r8
   1567e:	4463      	add	r3, ip
   15680:	781b      	ldrb	r3, [r3, #0]
   15682:	2b00      	cmp	r3, #0
   15684:	d101      	bne.n	1568a <processOnSMS+0x8ca>
   15686:	f001 fc4d 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"SEQP OFF");
   1568a:	230c      	movs	r3, #12
   1568c:	2208      	movs	r2, #8
   1568e:	4694      	mov	ip, r2
   15690:	44bc      	add	ip, r7
   15692:	4463      	add	r3, ip
   15694:	4acd      	ldr	r2, [pc, #820]	; (159cc <processOnSMS+0xc0c>)
   15696:	ca03      	ldmia	r2!, {r0, r1}
   15698:	c303      	stmia	r3!, {r0, r1}
   1569a:	7812      	ldrb	r2, [r2, #0]
   1569c:	701a      	strb	r2, [r3, #0]
   1569e:	f001 fc41 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   156a2:	4acb      	ldr	r2, [pc, #812]	; (159d0 <processOnSMS+0xc10>)
   156a4:	68fb      	ldr	r3, [r7, #12]
   156a6:	0011      	movs	r1, r2
   156a8:	0018      	movs	r0, r3
   156aa:	4bc5      	ldr	r3, [pc, #788]	; (159c0 <processOnSMS+0xc00>)
   156ac:	4798      	blx	r3
   156ae:	1e03      	subs	r3, r0, #0
   156b0:	d06c      	beq.n	1578c <processOnSMS+0x9cc>
	{
		if (strlen(received_command)>3)
   156b2:	68fb      	ldr	r3, [r7, #12]
   156b4:	0018      	movs	r0, r3
   156b6:	4bc7      	ldr	r3, [pc, #796]	; (159d4 <processOnSMS+0xc14>)
   156b8:	4798      	blx	r3
   156ba:	0003      	movs	r3, r0
   156bc:	2b03      	cmp	r3, #3
   156be:	d801      	bhi.n	156c4 <processOnSMS+0x904>
   156c0:	f001 fc30 	bl	16f24 <processOnSMS+0x2164>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   156c4:	68fb      	ldr	r3, [r7, #12]
   156c6:	1cdc      	adds	r4, r3, #3
   156c8:	68fb      	ldr	r3, [r7, #12]
   156ca:	0018      	movs	r0, r3
   156cc:	4bc1      	ldr	r3, [pc, #772]	; (159d4 <processOnSMS+0xc14>)
   156ce:	4798      	blx	r3
   156d0:	0002      	movs	r2, r0
   156d2:	68fb      	ldr	r3, [r7, #12]
   156d4:	0021      	movs	r1, r4
   156d6:	0018      	movs	r0, r3
   156d8:	4bbf      	ldr	r3, [pc, #764]	; (159d8 <processOnSMS+0xc18>)
   156da:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   156dc:	68fb      	ldr	r3, [r7, #12]
   156de:	781b      	ldrb	r3, [r3, #0]
   156e0:	2b4c      	cmp	r3, #76	; 0x4c
   156e2:	d009      	beq.n	156f8 <processOnSMS+0x938>
   156e4:	68fb      	ldr	r3, [r7, #12]
   156e6:	781b      	ldrb	r3, [r3, #0]
   156e8:	2b53      	cmp	r3, #83	; 0x53
   156ea:	d005      	beq.n	156f8 <processOnSMS+0x938>
   156ec:	68fb      	ldr	r3, [r7, #12]
   156ee:	781b      	ldrb	r3, [r3, #0]
   156f0:	2b4f      	cmp	r3, #79	; 0x4f
   156f2:	d001      	beq.n	156f8 <processOnSMS+0x938>
   156f4:	f001 fc16 	bl	16f24 <processOnSMS+0x2164>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
   156f8:	68fb      	ldr	r3, [r7, #12]
   156fa:	b2db      	uxtb	r3, r3
   156fc:	0018      	movs	r0, r3
   156fe:	4bb7      	ldr	r3, [pc, #732]	; (159dc <processOnSMS+0xc1c>)
   15700:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15702:	2328      	movs	r3, #40	; 0x28
   15704:	33ff      	adds	r3, #255	; 0xff
   15706:	2208      	movs	r2, #8
   15708:	4694      	mov	ip, r2
   1570a:	44bc      	add	ip, r7
   1570c:	4463      	add	r3, ip
   1570e:	2201      	movs	r2, #1
   15710:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15712:	4bad      	ldr	r3, [pc, #692]	; (159c8 <processOnSMS+0xc08>)
   15714:	2294      	movs	r2, #148	; 0x94
   15716:	0052      	lsls	r2, r2, #1
   15718:	4694      	mov	ip, r2
   1571a:	2208      	movs	r2, #8
   1571c:	4690      	mov	r8, r2
   1571e:	44b8      	add	r8, r7
   15720:	44c4      	add	ip, r8
   15722:	4463      	add	r3, ip
   15724:	781b      	ldrb	r3, [r3, #0]
   15726:	2b00      	cmp	r3, #0
   15728:	d101      	bne.n	1572e <processOnSMS+0x96e>
   1572a:	f001 fbfb 	bl	16f24 <processOnSMS+0x2164>
				{
					strcpy(resep_msg,"DND : ");
   1572e:	230c      	movs	r3, #12
   15730:	2208      	movs	r2, #8
   15732:	4694      	mov	ip, r2
   15734:	44bc      	add	ip, r7
   15736:	4463      	add	r3, ip
   15738:	4aa9      	ldr	r2, [pc, #676]	; (159e0 <processOnSMS+0xc20>)
   1573a:	6811      	ldr	r1, [r2, #0]
   1573c:	6019      	str	r1, [r3, #0]
   1573e:	8891      	ldrh	r1, [r2, #4]
   15740:	8099      	strh	r1, [r3, #4]
   15742:	7992      	ldrb	r2, [r2, #6]
   15744:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   15746:	68fa      	ldr	r2, [r7, #12]
   15748:	230c      	movs	r3, #12
   1574a:	2108      	movs	r1, #8
   1574c:	468c      	mov	ip, r1
   1574e:	44bc      	add	ip, r7
   15750:	4463      	add	r3, ip
   15752:	0011      	movs	r1, r2
   15754:	0018      	movs	r0, r3
   15756:	4ba3      	ldr	r3, [pc, #652]	; (159e4 <processOnSMS+0xc24>)
   15758:	4798      	blx	r3
					strcat(resep_msg," OK");
   1575a:	230c      	movs	r3, #12
   1575c:	2208      	movs	r2, #8
   1575e:	4694      	mov	ip, r2
   15760:	44bc      	add	ip, r7
   15762:	4463      	add	r3, ip
   15764:	0018      	movs	r0, r3
   15766:	4b9b      	ldr	r3, [pc, #620]	; (159d4 <processOnSMS+0xc14>)
   15768:	4798      	blx	r3
   1576a:	0003      	movs	r3, r0
   1576c:	001a      	movs	r2, r3
   1576e:	230c      	movs	r3, #12
   15770:	2108      	movs	r1, #8
   15772:	468c      	mov	ip, r1
   15774:	44bc      	add	ip, r7
   15776:	4463      	add	r3, ip
   15778:	189a      	adds	r2, r3, r2
   1577a:	4b9b      	ldr	r3, [pc, #620]	; (159e8 <processOnSMS+0xc28>)
   1577c:	0010      	movs	r0, r2
   1577e:	0019      	movs	r1, r3
   15780:	2304      	movs	r3, #4
   15782:	001a      	movs	r2, r3
   15784:	4b99      	ldr	r3, [pc, #612]	; (159ec <processOnSMS+0xc2c>)
   15786:	4798      	blx	r3
   15788:	f001 fbcc 	bl	16f24 <processOnSMS+0x2164>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   1578c:	4a98      	ldr	r2, [pc, #608]	; (159f0 <processOnSMS+0xc30>)
   1578e:	68fb      	ldr	r3, [r7, #12]
   15790:	0011      	movs	r1, r2
   15792:	0018      	movs	r0, r3
   15794:	4b8a      	ldr	r3, [pc, #552]	; (159c0 <processOnSMS+0xc00>)
   15796:	4798      	blx	r3
   15798:	1e03      	subs	r3, r0, #0
   1579a:	d072      	beq.n	15882 <processOnSMS+0xac2>
	{
		if (strlen(received_command)>4)
   1579c:	68fb      	ldr	r3, [r7, #12]
   1579e:	0018      	movs	r0, r3
   157a0:	4b8c      	ldr	r3, [pc, #560]	; (159d4 <processOnSMS+0xc14>)
   157a2:	4798      	blx	r3
   157a4:	0003      	movs	r3, r0
   157a6:	2b04      	cmp	r3, #4
   157a8:	d801      	bhi.n	157ae <processOnSMS+0x9ee>
   157aa:	f001 fbbb 	bl	16f24 <processOnSMS+0x2164>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   157ae:	68fb      	ldr	r3, [r7, #12]
   157b0:	1d1c      	adds	r4, r3, #4
   157b2:	68fb      	ldr	r3, [r7, #12]
   157b4:	0018      	movs	r0, r3
   157b6:	4b87      	ldr	r3, [pc, #540]	; (159d4 <processOnSMS+0xc14>)
   157b8:	4798      	blx	r3
   157ba:	0002      	movs	r2, r0
   157bc:	68fb      	ldr	r3, [r7, #12]
   157be:	0021      	movs	r1, r4
   157c0:	0018      	movs	r0, r3
   157c2:	4b85      	ldr	r3, [pc, #532]	; (159d8 <processOnSMS+0xc18>)
   157c4:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   157c6:	68fb      	ldr	r3, [r7, #12]
   157c8:	0018      	movs	r0, r3
   157ca:	4b8a      	ldr	r3, [pc, #552]	; (159f4 <processOnSMS+0xc34>)
   157cc:	4798      	blx	r3
   157ce:	0002      	movs	r2, r0
   157d0:	2326      	movs	r3, #38	; 0x26
   157d2:	33ff      	adds	r3, #255	; 0xff
   157d4:	2108      	movs	r1, #8
   157d6:	468c      	mov	ip, r1
   157d8:	44bc      	add	ip, r7
   157da:	4463      	add	r3, ip
   157dc:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   157de:	2326      	movs	r3, #38	; 0x26
   157e0:	33ff      	adds	r3, #255	; 0xff
   157e2:	2208      	movs	r2, #8
   157e4:	4694      	mov	ip, r2
   157e6:	44bc      	add	ip, r7
   157e8:	4463      	add	r3, ip
   157ea:	781b      	ldrb	r3, [r3, #0]
   157ec:	2b02      	cmp	r3, #2
   157ee:	d901      	bls.n	157f4 <processOnSMS+0xa34>
   157f0:	f001 fb98 	bl	16f24 <processOnSMS+0x2164>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   157f4:	2326      	movs	r3, #38	; 0x26
   157f6:	33ff      	adds	r3, #255	; 0xff
   157f8:	2208      	movs	r2, #8
   157fa:	4694      	mov	ip, r2
   157fc:	44bc      	add	ip, r7
   157fe:	4463      	add	r3, ip
   15800:	781b      	ldrb	r3, [r3, #0]
   15802:	2b01      	cmp	r3, #1
   15804:	d10b      	bne.n	1581e <processOnSMS+0xa5e>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   15806:	4b7c      	ldr	r3, [pc, #496]	; (159f8 <processOnSMS+0xc38>)
   15808:	785b      	ldrb	r3, [r3, #1]
   1580a:	2b00      	cmp	r3, #0
   1580c:	d107      	bne.n	1581e <processOnSMS+0xa5e>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   1580e:	2326      	movs	r3, #38	; 0x26
   15810:	33ff      	adds	r3, #255	; 0xff
   15812:	2208      	movs	r2, #8
   15814:	4694      	mov	ip, r2
   15816:	44bc      	add	ip, r7
   15818:	4463      	add	r3, ip
   1581a:	2200      	movs	r2, #0
   1581c:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   1581e:	2326      	movs	r3, #38	; 0x26
   15820:	33ff      	adds	r3, #255	; 0xff
   15822:	2208      	movs	r2, #8
   15824:	4694      	mov	ip, r2
   15826:	44bc      	add	ip, r7
   15828:	4463      	add	r3, ip
   1582a:	781b      	ldrb	r3, [r3, #0]
   1582c:	0018      	movs	r0, r3
   1582e:	4b73      	ldr	r3, [pc, #460]	; (159fc <processOnSMS+0xc3c>)
   15830:	4798      	blx	r3
				incomingSMSProcessed=true;
   15832:	2328      	movs	r3, #40	; 0x28
   15834:	33ff      	adds	r3, #255	; 0xff
   15836:	2208      	movs	r2, #8
   15838:	4694      	mov	ip, r2
   1583a:	44bc      	add	ip, r7
   1583c:	4463      	add	r3, ip
   1583e:	2201      	movs	r2, #1
   15840:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15842:	4b61      	ldr	r3, [pc, #388]	; (159c8 <processOnSMS+0xc08>)
   15844:	2294      	movs	r2, #148	; 0x94
   15846:	0052      	lsls	r2, r2, #1
   15848:	4694      	mov	ip, r2
   1584a:	2208      	movs	r2, #8
   1584c:	4690      	mov	r8, r2
   1584e:	44b8      	add	r8, r7
   15850:	44c4      	add	ip, r8
   15852:	4463      	add	r3, ip
   15854:	781b      	ldrb	r3, [r3, #0]
   15856:	2b00      	cmp	r3, #0
   15858:	d101      	bne.n	1585e <processOnSMS+0xa9e>
   1585a:	f001 fb63 	bl	16f24 <processOnSMS+0x2164>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   1585e:	2326      	movs	r3, #38	; 0x26
   15860:	33ff      	adds	r3, #255	; 0xff
   15862:	2208      	movs	r2, #8
   15864:	4694      	mov	ip, r2
   15866:	44bc      	add	ip, r7
   15868:	4463      	add	r3, ip
   1586a:	781a      	ldrb	r2, [r3, #0]
   1586c:	4964      	ldr	r1, [pc, #400]	; (15a00 <processOnSMS+0xc40>)
   1586e:	230c      	movs	r3, #12
   15870:	2008      	movs	r0, #8
   15872:	4684      	mov	ip, r0
   15874:	44bc      	add	ip, r7
   15876:	4463      	add	r3, ip
   15878:	0018      	movs	r0, r3
   1587a:	4b62      	ldr	r3, [pc, #392]	; (15a04 <processOnSMS+0xc44>)
   1587c:	4798      	blx	r3
   1587e:	f001 fb51 	bl	16f24 <processOnSMS+0x2164>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15882:	4a61      	ldr	r2, [pc, #388]	; (15a08 <processOnSMS+0xc48>)
   15884:	68fb      	ldr	r3, [r7, #12]
   15886:	0011      	movs	r1, r2
   15888:	0018      	movs	r0, r3
   1588a:	4b4d      	ldr	r3, [pc, #308]	; (159c0 <processOnSMS+0xc00>)
   1588c:	4798      	blx	r3
   1588e:	1e03      	subs	r3, r0, #0
   15890:	d100      	bne.n	15894 <processOnSMS+0xad4>
   15892:	e0bf      	b.n	15a14 <processOnSMS+0xc54>
	{
		if (strlen(received_command)>8)
   15894:	68fb      	ldr	r3, [r7, #12]
   15896:	0018      	movs	r0, r3
   15898:	4b4e      	ldr	r3, [pc, #312]	; (159d4 <processOnSMS+0xc14>)
   1589a:	4798      	blx	r3
   1589c:	0003      	movs	r3, r0
   1589e:	2b08      	cmp	r3, #8
   158a0:	d801      	bhi.n	158a6 <processOnSMS+0xae6>
   158a2:	f001 fb3f 	bl	16f24 <processOnSMS+0x2164>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   158a6:	68fb      	ldr	r3, [r7, #12]
   158a8:	3308      	adds	r3, #8
   158aa:	001c      	movs	r4, r3
   158ac:	68fb      	ldr	r3, [r7, #12]
   158ae:	0018      	movs	r0, r3
   158b0:	4b48      	ldr	r3, [pc, #288]	; (159d4 <processOnSMS+0xc14>)
   158b2:	4798      	blx	r3
   158b4:	0002      	movs	r2, r0
   158b6:	68fb      	ldr	r3, [r7, #12]
   158b8:	0021      	movs	r1, r4
   158ba:	0018      	movs	r0, r3
   158bc:	4b46      	ldr	r3, [pc, #280]	; (159d8 <processOnSMS+0xc18>)
   158be:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   158c0:	4b4d      	ldr	r3, [pc, #308]	; (159f8 <processOnSMS+0xc38>)
   158c2:	785b      	ldrb	r3, [r3, #1]
   158c4:	2b00      	cmp	r3, #0
   158c6:	d101      	bne.n	158cc <processOnSMS+0xb0c>
   158c8:	f001 fb2c 	bl	16f24 <processOnSMS+0x2164>
			{
				uint8_t detectionMethod=0;
   158cc:	2392      	movs	r3, #146	; 0x92
   158ce:	005b      	lsls	r3, r3, #1
   158d0:	2208      	movs	r2, #8
   158d2:	4694      	mov	ip, r2
   158d4:	44bc      	add	ip, r7
   158d6:	4463      	add	r3, ip
   158d8:	2200      	movs	r2, #0
   158da:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   158dc:	68fb      	ldr	r3, [r7, #12]
   158de:	781b      	ldrb	r3, [r3, #0]
   158e0:	2b43      	cmp	r3, #67	; 0x43
   158e2:	d108      	bne.n	158f6 <processOnSMS+0xb36>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   158e4:	2392      	movs	r3, #146	; 0x92
   158e6:	005b      	lsls	r3, r3, #1
   158e8:	2208      	movs	r2, #8
   158ea:	4694      	mov	ip, r2
   158ec:	44bc      	add	ip, r7
   158ee:	4463      	add	r3, ip
   158f0:	2202      	movs	r2, #2
   158f2:	701a      	strb	r2, [r3, #0]
   158f4:	e00b      	b.n	1590e <processOnSMS+0xb4e>
				}
				else if(received_command[0]=='P')
   158f6:	68fb      	ldr	r3, [r7, #12]
   158f8:	781b      	ldrb	r3, [r3, #0]
   158fa:	2b50      	cmp	r3, #80	; 0x50
   158fc:	d107      	bne.n	1590e <processOnSMS+0xb4e>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   158fe:	2392      	movs	r3, #146	; 0x92
   15900:	005b      	lsls	r3, r3, #1
   15902:	2208      	movs	r2, #8
   15904:	4694      	mov	ip, r2
   15906:	44bc      	add	ip, r7
   15908:	4463      	add	r3, ip
   1590a:	2201      	movs	r2, #1
   1590c:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   1590e:	2392      	movs	r3, #146	; 0x92
   15910:	005b      	lsls	r3, r3, #1
   15912:	2208      	movs	r2, #8
   15914:	4694      	mov	ip, r2
   15916:	44bc      	add	ip, r7
   15918:	4463      	add	r3, ip
   1591a:	781b      	ldrb	r3, [r3, #0]
   1591c:	2b00      	cmp	r3, #0
   1591e:	d101      	bne.n	15924 <processOnSMS+0xb64>
   15920:	f001 fb00 	bl	16f24 <processOnSMS+0x2164>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15924:	2392      	movs	r3, #146	; 0x92
   15926:	005b      	lsls	r3, r3, #1
   15928:	2208      	movs	r2, #8
   1592a:	4694      	mov	ip, r2
   1592c:	44bc      	add	ip, r7
   1592e:	4463      	add	r3, ip
   15930:	781b      	ldrb	r3, [r3, #0]
   15932:	0018      	movs	r0, r3
   15934:	4b35      	ldr	r3, [pc, #212]	; (15a0c <processOnSMS+0xc4c>)
   15936:	4798      	blx	r3
					incomingSMSProcessed=true;
   15938:	2328      	movs	r3, #40	; 0x28
   1593a:	33ff      	adds	r3, #255	; 0xff
   1593c:	2208      	movs	r2, #8
   1593e:	4694      	mov	ip, r2
   15940:	44bc      	add	ip, r7
   15942:	4463      	add	r3, ip
   15944:	2201      	movs	r2, #1
   15946:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   15948:	4b1f      	ldr	r3, [pc, #124]	; (159c8 <processOnSMS+0xc08>)
   1594a:	2294      	movs	r2, #148	; 0x94
   1594c:	0052      	lsls	r2, r2, #1
   1594e:	4694      	mov	ip, r2
   15950:	2208      	movs	r2, #8
   15952:	4690      	mov	r8, r2
   15954:	44b8      	add	r8, r7
   15956:	44c4      	add	ip, r8
   15958:	4463      	add	r3, ip
   1595a:	781b      	ldrb	r3, [r3, #0]
   1595c:	2b00      	cmp	r3, #0
   1595e:	d101      	bne.n	15964 <processOnSMS+0xba4>
   15960:	f001 fae0 	bl	16f24 <processOnSMS+0x2164>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   15964:	230c      	movs	r3, #12
   15966:	2208      	movs	r2, #8
   15968:	4694      	mov	ip, r2
   1596a:	44bc      	add	ip, r7
   1596c:	4463      	add	r3, ip
   1596e:	4a28      	ldr	r2, [pc, #160]	; (15a10 <processOnSMS+0xc50>)
   15970:	ca13      	ldmia	r2!, {r0, r1, r4}
   15972:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   15974:	68fa      	ldr	r2, [r7, #12]
   15976:	230c      	movs	r3, #12
   15978:	2108      	movs	r1, #8
   1597a:	468c      	mov	ip, r1
   1597c:	44bc      	add	ip, r7
   1597e:	4463      	add	r3, ip
   15980:	0011      	movs	r1, r2
   15982:	0018      	movs	r0, r3
   15984:	4b17      	ldr	r3, [pc, #92]	; (159e4 <processOnSMS+0xc24>)
   15986:	4798      	blx	r3
						strcat(resep_msg," OK");
   15988:	230c      	movs	r3, #12
   1598a:	2208      	movs	r2, #8
   1598c:	4694      	mov	ip, r2
   1598e:	44bc      	add	ip, r7
   15990:	4463      	add	r3, ip
   15992:	0018      	movs	r0, r3
   15994:	4b0f      	ldr	r3, [pc, #60]	; (159d4 <processOnSMS+0xc14>)
   15996:	4798      	blx	r3
   15998:	0003      	movs	r3, r0
   1599a:	001a      	movs	r2, r3
   1599c:	230c      	movs	r3, #12
   1599e:	2108      	movs	r1, #8
   159a0:	468c      	mov	ip, r1
   159a2:	44bc      	add	ip, r7
   159a4:	4463      	add	r3, ip
   159a6:	189a      	adds	r2, r3, r2
   159a8:	4b0f      	ldr	r3, [pc, #60]	; (159e8 <processOnSMS+0xc28>)
   159aa:	0010      	movs	r0, r2
   159ac:	0019      	movs	r1, r3
   159ae:	2304      	movs	r3, #4
   159b0:	001a      	movs	r2, r3
   159b2:	4b0e      	ldr	r3, [pc, #56]	; (159ec <processOnSMS+0xc2c>)
   159b4:	4798      	blx	r3
   159b6:	f001 fab5 	bl	16f24 <processOnSMS+0x2164>
   159ba:	46c0      	nop			; (mov r8, r8)
   159bc:	0002a278 	.word	0x0002a278
   159c0:	00014021 	.word	0x00014021
   159c4:	0001166d 	.word	0x0001166d
   159c8:	fffffeda 	.word	0xfffffeda
   159cc:	0002a280 	.word	0x0002a280
   159d0:	0002a28c 	.word	0x0002a28c
   159d4:	00029123 	.word	0x00029123
   159d8:	00028e6f 	.word	0x00028e6f
   159dc:	0001133d 	.word	0x0001133d
   159e0:	0002a290 	.word	0x0002a290
   159e4:	000290dd 	.word	0x000290dd
   159e8:	0002a298 	.word	0x0002a298
   159ec:	00028e5d 	.word	0x00028e5d
   159f0:	0002a29c 	.word	0x0002a29c
   159f4:	00028d79 	.word	0x00028d79
   159f8:	2000062c 	.word	0x2000062c
   159fc:	00011795 	.word	0x00011795
   15a00:	0002a2a4 	.word	0x0002a2a4
   15a04:	00029099 	.word	0x00029099
   15a08:	0002a2b0 	.word	0x0002a2b0
   15a0c:	000116b9 	.word	0x000116b9
   15a10:	0002a2bc 	.word	0x0002a2bc
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15a14:	4acf      	ldr	r2, [pc, #828]	; (15d54 <processOnSMS+0xf94>)
   15a16:	68fb      	ldr	r3, [r7, #12]
   15a18:	0011      	movs	r1, r2
   15a1a:	0018      	movs	r0, r3
   15a1c:	4bce      	ldr	r3, [pc, #824]	; (15d58 <processOnSMS+0xf98>)
   15a1e:	4798      	blx	r3
   15a20:	1e03      	subs	r3, r0, #0
   15a22:	d024      	beq.n	15a6e <processOnSMS+0xcae>
	{
		saveMotorVoltageBypassSettings(true);
   15a24:	2001      	movs	r0, #1
   15a26:	4bcd      	ldr	r3, [pc, #820]	; (15d5c <processOnSMS+0xf9c>)
   15a28:	4798      	blx	r3
		incomingSMSProcessed=true;
   15a2a:	2328      	movs	r3, #40	; 0x28
   15a2c:	33ff      	adds	r3, #255	; 0xff
   15a2e:	2208      	movs	r2, #8
   15a30:	4694      	mov	ip, r2
   15a32:	44bc      	add	ip, r7
   15a34:	4463      	add	r3, ip
   15a36:	2201      	movs	r2, #1
   15a38:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15a3a:	4bc9      	ldr	r3, [pc, #804]	; (15d60 <processOnSMS+0xfa0>)
   15a3c:	2294      	movs	r2, #148	; 0x94
   15a3e:	0052      	lsls	r2, r2, #1
   15a40:	4694      	mov	ip, r2
   15a42:	2208      	movs	r2, #8
   15a44:	4690      	mov	r8, r2
   15a46:	44b8      	add	r8, r7
   15a48:	44c4      	add	ip, r8
   15a4a:	4463      	add	r3, ip
   15a4c:	781b      	ldrb	r3, [r3, #0]
   15a4e:	2b00      	cmp	r3, #0
   15a50:	d101      	bne.n	15a56 <processOnSMS+0xc96>
   15a52:	f001 fa67 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   15a56:	230c      	movs	r3, #12
   15a58:	2208      	movs	r2, #8
   15a5a:	4694      	mov	ip, r2
   15a5c:	44bc      	add	ip, r7
   15a5e:	4463      	add	r3, ip
   15a60:	4ac0      	ldr	r2, [pc, #768]	; (15d64 <processOnSMS+0xfa4>)
   15a62:	ca13      	ldmia	r2!, {r0, r1, r4}
   15a64:	c313      	stmia	r3!, {r0, r1, r4}
   15a66:	ca13      	ldmia	r2!, {r0, r1, r4}
   15a68:	c313      	stmia	r3!, {r0, r1, r4}
   15a6a:	f001 fa5b 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   15a6e:	4abe      	ldr	r2, [pc, #760]	; (15d68 <processOnSMS+0xfa8>)
   15a70:	68fb      	ldr	r3, [r7, #12]
   15a72:	0011      	movs	r1, r2
   15a74:	0018      	movs	r0, r3
   15a76:	4bb8      	ldr	r3, [pc, #736]	; (15d58 <processOnSMS+0xf98>)
   15a78:	4798      	blx	r3
   15a7a:	1e03      	subs	r3, r0, #0
   15a7c:	d026      	beq.n	15acc <processOnSMS+0xd0c>
	{
		saveMotorVoltageBypassSettings(false);
   15a7e:	2000      	movs	r0, #0
   15a80:	4bb6      	ldr	r3, [pc, #728]	; (15d5c <processOnSMS+0xf9c>)
   15a82:	4798      	blx	r3
		incomingSMSProcessed=true;
   15a84:	2328      	movs	r3, #40	; 0x28
   15a86:	33ff      	adds	r3, #255	; 0xff
   15a88:	2208      	movs	r2, #8
   15a8a:	4694      	mov	ip, r2
   15a8c:	44bc      	add	ip, r7
   15a8e:	4463      	add	r3, ip
   15a90:	2201      	movs	r2, #1
   15a92:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15a94:	4bb2      	ldr	r3, [pc, #712]	; (15d60 <processOnSMS+0xfa0>)
   15a96:	2294      	movs	r2, #148	; 0x94
   15a98:	0052      	lsls	r2, r2, #1
   15a9a:	4694      	mov	ip, r2
   15a9c:	2208      	movs	r2, #8
   15a9e:	4690      	mov	r8, r2
   15aa0:	44b8      	add	r8, r7
   15aa2:	44c4      	add	ip, r8
   15aa4:	4463      	add	r3, ip
   15aa6:	781b      	ldrb	r3, [r3, #0]
   15aa8:	2b00      	cmp	r3, #0
   15aaa:	d101      	bne.n	15ab0 <processOnSMS+0xcf0>
   15aac:	f001 fa3a 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   15ab0:	230c      	movs	r3, #12
   15ab2:	2208      	movs	r2, #8
   15ab4:	4694      	mov	ip, r2
   15ab6:	44bc      	add	ip, r7
   15ab8:	4463      	add	r3, ip
   15aba:	4aac      	ldr	r2, [pc, #688]	; (15d6c <processOnSMS+0xfac>)
   15abc:	ca13      	ldmia	r2!, {r0, r1, r4}
   15abe:	c313      	stmia	r3!, {r0, r1, r4}
   15ac0:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ac2:	c313      	stmia	r3!, {r0, r1, r4}
   15ac4:	7812      	ldrb	r2, [r2, #0]
   15ac6:	701a      	strb	r2, [r3, #0]
   15ac8:	f001 fa2c 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   15acc:	4aa8      	ldr	r2, [pc, #672]	; (15d70 <processOnSMS+0xfb0>)
   15ace:	68fb      	ldr	r3, [r7, #12]
   15ad0:	0011      	movs	r1, r2
   15ad2:	0018      	movs	r0, r3
   15ad4:	4ba0      	ldr	r3, [pc, #640]	; (15d58 <processOnSMS+0xf98>)
   15ad6:	4798      	blx	r3
   15ad8:	1e03      	subs	r3, r0, #0
   15ada:	d06b      	beq.n	15bb4 <processOnSMS+0xdf4>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   15adc:	68fb      	ldr	r3, [r7, #12]
   15ade:	1d9c      	adds	r4, r3, #6
   15ae0:	68fb      	ldr	r3, [r7, #12]
   15ae2:	0018      	movs	r0, r3
   15ae4:	4ba3      	ldr	r3, [pc, #652]	; (15d74 <processOnSMS+0xfb4>)
   15ae6:	4798      	blx	r3
   15ae8:	0002      	movs	r2, r0
   15aea:	68fb      	ldr	r3, [r7, #12]
   15aec:	0021      	movs	r1, r4
   15aee:	0018      	movs	r0, r3
   15af0:	4ba1      	ldr	r3, [pc, #644]	; (15d78 <processOnSMS+0xfb8>)
   15af2:	4798      	blx	r3
		uint8_t voltageBypTime = atoi(received_command);
   15af4:	68fb      	ldr	r3, [r7, #12]
   15af6:	0018      	movs	r0, r3
   15af8:	4ba0      	ldr	r3, [pc, #640]	; (15d7c <processOnSMS+0xfbc>)
   15afa:	4798      	blx	r3
   15afc:	0002      	movs	r2, r0
   15afe:	2324      	movs	r3, #36	; 0x24
   15b00:	33ff      	adds	r3, #255	; 0xff
   15b02:	2108      	movs	r1, #8
   15b04:	468c      	mov	ip, r1
   15b06:	44bc      	add	ip, r7
   15b08:	4463      	add	r3, ip
   15b0a:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   15b0c:	2324      	movs	r3, #36	; 0x24
   15b0e:	33ff      	adds	r3, #255	; 0xff
   15b10:	2208      	movs	r2, #8
   15b12:	4694      	mov	ip, r2
   15b14:	44bc      	add	ip, r7
   15b16:	4463      	add	r3, ip
   15b18:	781b      	ldrb	r3, [r3, #0]
   15b1a:	2b09      	cmp	r3, #9
   15b1c:	d807      	bhi.n	15b2e <processOnSMS+0xd6e>
   15b1e:	2324      	movs	r3, #36	; 0x24
   15b20:	33ff      	adds	r3, #255	; 0xff
   15b22:	2208      	movs	r2, #8
   15b24:	4694      	mov	ip, r2
   15b26:	44bc      	add	ip, r7
   15b28:	4463      	add	r3, ip
   15b2a:	220a      	movs	r2, #10
   15b2c:	701a      	strb	r2, [r3, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
		
		voltageBypTime=voltageBypTime*1000L;
   15b2e:	2324      	movs	r3, #36	; 0x24
   15b30:	33ff      	adds	r3, #255	; 0xff
   15b32:	2208      	movs	r2, #8
   15b34:	4694      	mov	ip, r2
   15b36:	44bc      	add	ip, r7
   15b38:	4463      	add	r3, ip
   15b3a:	2224      	movs	r2, #36	; 0x24
   15b3c:	32ff      	adds	r2, #255	; 0xff
   15b3e:	2108      	movs	r1, #8
   15b40:	468c      	mov	ip, r1
   15b42:	44bc      	add	ip, r7
   15b44:	4462      	add	r2, ip
   15b46:	7812      	ldrb	r2, [r2, #0]
   15b48:	2118      	movs	r1, #24
   15b4a:	4249      	negs	r1, r1
   15b4c:	434a      	muls	r2, r1
   15b4e:	701a      	strb	r2, [r3, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   15b50:	2324      	movs	r3, #36	; 0x24
   15b52:	33ff      	adds	r3, #255	; 0xff
   15b54:	2208      	movs	r2, #8
   15b56:	4694      	mov	ip, r2
   15b58:	44bc      	add	ip, r7
   15b5a:	4463      	add	r3, ip
   15b5c:	781b      	ldrb	r3, [r3, #0]
   15b5e:	0018      	movs	r0, r3
   15b60:	4b87      	ldr	r3, [pc, #540]	; (15d80 <processOnSMS+0xfc0>)
   15b62:	4798      	blx	r3
		incomingSMSProcessed=true;
   15b64:	2328      	movs	r3, #40	; 0x28
   15b66:	33ff      	adds	r3, #255	; 0xff
   15b68:	2208      	movs	r2, #8
   15b6a:	4694      	mov	ip, r2
   15b6c:	44bc      	add	ip, r7
   15b6e:	4463      	add	r3, ip
   15b70:	2201      	movs	r2, #1
   15b72:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15b74:	4b7a      	ldr	r3, [pc, #488]	; (15d60 <processOnSMS+0xfa0>)
   15b76:	2294      	movs	r2, #148	; 0x94
   15b78:	0052      	lsls	r2, r2, #1
   15b7a:	4694      	mov	ip, r2
   15b7c:	2208      	movs	r2, #8
   15b7e:	4690      	mov	r8, r2
   15b80:	44b8      	add	r8, r7
   15b82:	44c4      	add	ip, r8
   15b84:	4463      	add	r3, ip
   15b86:	781b      	ldrb	r3, [r3, #0]
   15b88:	2b00      	cmp	r3, #0
   15b8a:	d101      	bne.n	15b90 <processOnSMS+0xdd0>
   15b8c:	f001 f9ca 	bl	16f24 <processOnSMS+0x2164>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   15b90:	2324      	movs	r3, #36	; 0x24
   15b92:	33ff      	adds	r3, #255	; 0xff
   15b94:	2208      	movs	r2, #8
   15b96:	4694      	mov	ip, r2
   15b98:	44bc      	add	ip, r7
   15b9a:	4463      	add	r3, ip
   15b9c:	781a      	ldrb	r2, [r3, #0]
   15b9e:	4979      	ldr	r1, [pc, #484]	; (15d84 <processOnSMS+0xfc4>)
   15ba0:	230c      	movs	r3, #12
   15ba2:	2008      	movs	r0, #8
   15ba4:	4684      	mov	ip, r0
   15ba6:	44bc      	add	ip, r7
   15ba8:	4463      	add	r3, ip
   15baa:	0018      	movs	r0, r3
   15bac:	4b76      	ldr	r3, [pc, #472]	; (15d88 <processOnSMS+0xfc8>)
   15bae:	4798      	blx	r3
   15bb0:	f001 f9b8 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   15bb4:	4a75      	ldr	r2, [pc, #468]	; (15d8c <processOnSMS+0xfcc>)
   15bb6:	68fb      	ldr	r3, [r7, #12]
   15bb8:	0011      	movs	r1, r2
   15bba:	0018      	movs	r0, r3
   15bbc:	4b66      	ldr	r3, [pc, #408]	; (15d58 <processOnSMS+0xf98>)
   15bbe:	4798      	blx	r3
   15bc0:	1e03      	subs	r3, r0, #0
   15bc2:	d06c      	beq.n	15c9e <processOnSMS+0xede>
	{
		if (strlen(received_command)>4)
   15bc4:	68fb      	ldr	r3, [r7, #12]
   15bc6:	0018      	movs	r0, r3
   15bc8:	4b6a      	ldr	r3, [pc, #424]	; (15d74 <processOnSMS+0xfb4>)
   15bca:	4798      	blx	r3
   15bcc:	0003      	movs	r3, r0
   15bce:	2b04      	cmp	r3, #4
   15bd0:	d801      	bhi.n	15bd6 <processOnSMS+0xe16>
   15bd2:	f001 f9a7 	bl	16f24 <processOnSMS+0x2164>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15bd6:	68fb      	ldr	r3, [r7, #12]
   15bd8:	1d1c      	adds	r4, r3, #4
   15bda:	68fb      	ldr	r3, [r7, #12]
   15bdc:	0018      	movs	r0, r3
   15bde:	4b65      	ldr	r3, [pc, #404]	; (15d74 <processOnSMS+0xfb4>)
   15be0:	4798      	blx	r3
   15be2:	0002      	movs	r2, r0
   15be4:	68fb      	ldr	r3, [r7, #12]
   15be6:	0021      	movs	r1, r4
   15be8:	0018      	movs	r0, r3
   15bea:	4b63      	ldr	r3, [pc, #396]	; (15d78 <processOnSMS+0xfb8>)
   15bec:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   15bee:	68fb      	ldr	r3, [r7, #12]
   15bf0:	781b      	ldrb	r3, [r3, #0]
   15bf2:	2b43      	cmp	r3, #67	; 0x43
   15bf4:	d00d      	beq.n	15c12 <processOnSMS+0xe52>
   15bf6:	68fb      	ldr	r3, [r7, #12]
   15bf8:	781b      	ldrb	r3, [r3, #0]
   15bfa:	2b41      	cmp	r3, #65	; 0x41
   15bfc:	d009      	beq.n	15c12 <processOnSMS+0xe52>
   15bfe:	68fb      	ldr	r3, [r7, #12]
   15c00:	781b      	ldrb	r3, [r3, #0]
   15c02:	2b54      	cmp	r3, #84	; 0x54
   15c04:	d005      	beq.n	15c12 <processOnSMS+0xe52>
   15c06:	68fb      	ldr	r3, [r7, #12]
   15c08:	781b      	ldrb	r3, [r3, #0]
   15c0a:	2b4e      	cmp	r3, #78	; 0x4e
   15c0c:	d001      	beq.n	15c12 <processOnSMS+0xe52>
   15c0e:	f001 f989 	bl	16f24 <processOnSMS+0x2164>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
   15c12:	68fb      	ldr	r3, [r7, #12]
   15c14:	b2db      	uxtb	r3, r3
   15c16:	0018      	movs	r0, r3
   15c18:	4b5d      	ldr	r3, [pc, #372]	; (15d90 <processOnSMS+0xfd0>)
   15c1a:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15c1c:	2328      	movs	r3, #40	; 0x28
   15c1e:	33ff      	adds	r3, #255	; 0xff
   15c20:	2208      	movs	r2, #8
   15c22:	4694      	mov	ip, r2
   15c24:	44bc      	add	ip, r7
   15c26:	4463      	add	r3, ip
   15c28:	2201      	movs	r2, #1
   15c2a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15c2c:	4b4c      	ldr	r3, [pc, #304]	; (15d60 <processOnSMS+0xfa0>)
   15c2e:	2294      	movs	r2, #148	; 0x94
   15c30:	0052      	lsls	r2, r2, #1
   15c32:	4694      	mov	ip, r2
   15c34:	2208      	movs	r2, #8
   15c36:	4690      	mov	r8, r2
   15c38:	44b8      	add	r8, r7
   15c3a:	44c4      	add	ip, r8
   15c3c:	4463      	add	r3, ip
   15c3e:	781b      	ldrb	r3, [r3, #0]
   15c40:	2b00      	cmp	r3, #0
   15c42:	d101      	bne.n	15c48 <processOnSMS+0xe88>
   15c44:	f001 f96e 	bl	16f24 <processOnSMS+0x2164>
				{
					strcpy(resep_msg,"RESP : ");
   15c48:	230c      	movs	r3, #12
   15c4a:	2208      	movs	r2, #8
   15c4c:	4694      	mov	ip, r2
   15c4e:	44bc      	add	ip, r7
   15c50:	4463      	add	r3, ip
   15c52:	4a50      	ldr	r2, [pc, #320]	; (15d94 <processOnSMS+0xfd4>)
   15c54:	ca03      	ldmia	r2!, {r0, r1}
   15c56:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   15c58:	68fa      	ldr	r2, [r7, #12]
   15c5a:	230c      	movs	r3, #12
   15c5c:	2108      	movs	r1, #8
   15c5e:	468c      	mov	ip, r1
   15c60:	44bc      	add	ip, r7
   15c62:	4463      	add	r3, ip
   15c64:	0011      	movs	r1, r2
   15c66:	0018      	movs	r0, r3
   15c68:	4b4b      	ldr	r3, [pc, #300]	; (15d98 <processOnSMS+0xfd8>)
   15c6a:	4798      	blx	r3
					strcat(resep_msg," OK");
   15c6c:	230c      	movs	r3, #12
   15c6e:	2208      	movs	r2, #8
   15c70:	4694      	mov	ip, r2
   15c72:	44bc      	add	ip, r7
   15c74:	4463      	add	r3, ip
   15c76:	0018      	movs	r0, r3
   15c78:	4b3e      	ldr	r3, [pc, #248]	; (15d74 <processOnSMS+0xfb4>)
   15c7a:	4798      	blx	r3
   15c7c:	0003      	movs	r3, r0
   15c7e:	001a      	movs	r2, r3
   15c80:	230c      	movs	r3, #12
   15c82:	2108      	movs	r1, #8
   15c84:	468c      	mov	ip, r1
   15c86:	44bc      	add	ip, r7
   15c88:	4463      	add	r3, ip
   15c8a:	189a      	adds	r2, r3, r2
   15c8c:	4b43      	ldr	r3, [pc, #268]	; (15d9c <processOnSMS+0xfdc>)
   15c8e:	0010      	movs	r0, r2
   15c90:	0019      	movs	r1, r3
   15c92:	2304      	movs	r3, #4
   15c94:	001a      	movs	r2, r3
   15c96:	4b42      	ldr	r3, [pc, #264]	; (15da0 <processOnSMS+0xfe0>)
   15c98:	4798      	blx	r3
   15c9a:	f001 f943 	bl	16f24 <processOnSMS+0x2164>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   15c9e:	4a41      	ldr	r2, [pc, #260]	; (15da4 <processOnSMS+0xfe4>)
   15ca0:	68fb      	ldr	r3, [r7, #12]
   15ca2:	0011      	movs	r1, r2
   15ca4:	0018      	movs	r0, r3
   15ca6:	4b2c      	ldr	r3, [pc, #176]	; (15d58 <processOnSMS+0xf98>)
   15ca8:	4798      	blx	r3
   15caa:	1e03      	subs	r3, r0, #0
   15cac:	d100      	bne.n	15cb0 <processOnSMS+0xef0>
   15cae:	e07f      	b.n	15db0 <processOnSMS+0xff0>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   15cb0:	68fb      	ldr	r3, [r7, #12]
   15cb2:	1cdc      	adds	r4, r3, #3
   15cb4:	68fb      	ldr	r3, [r7, #12]
   15cb6:	0018      	movs	r0, r3
   15cb8:	4b2e      	ldr	r3, [pc, #184]	; (15d74 <processOnSMS+0xfb4>)
   15cba:	4798      	blx	r3
   15cbc:	0002      	movs	r2, r0
   15cbe:	68fb      	ldr	r3, [r7, #12]
   15cc0:	0021      	movs	r1, r4
   15cc2:	0018      	movs	r0, r3
   15cc4:	4b2c      	ldr	r3, [pc, #176]	; (15d78 <processOnSMS+0xfb8>)
   15cc6:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   15cc8:	68fb      	ldr	r3, [r7, #12]
   15cca:	0018      	movs	r0, r3
   15ccc:	4b2b      	ldr	r3, [pc, #172]	; (15d7c <processOnSMS+0xfbc>)
   15cce:	4798      	blx	r3
   15cd0:	0002      	movs	r2, r0
   15cd2:	238b      	movs	r3, #139	; 0x8b
   15cd4:	005b      	lsls	r3, r3, #1
   15cd6:	2108      	movs	r1, #8
   15cd8:	468c      	mov	ip, r1
   15cda:	44bc      	add	ip, r7
   15cdc:	4463      	add	r3, ip
   15cde:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   15ce0:	238b      	movs	r3, #139	; 0x8b
   15ce2:	005b      	lsls	r3, r3, #1
   15ce4:	2208      	movs	r2, #8
   15ce6:	4694      	mov	ip, r2
   15ce8:	44bc      	add	ip, r7
   15cea:	4463      	add	r3, ip
   15cec:	781b      	ldrb	r3, [r3, #0]
   15cee:	2b68      	cmp	r3, #104	; 0x68
   15cf0:	d801      	bhi.n	15cf6 <processOnSMS+0xf36>
   15cf2:	f001 f917 	bl	16f24 <processOnSMS+0x2164>
		{
			setOverloadPer(ovr_per);
   15cf6:	238b      	movs	r3, #139	; 0x8b
   15cf8:	005b      	lsls	r3, r3, #1
   15cfa:	2208      	movs	r2, #8
   15cfc:	4694      	mov	ip, r2
   15cfe:	44bc      	add	ip, r7
   15d00:	4463      	add	r3, ip
   15d02:	781b      	ldrb	r3, [r3, #0]
   15d04:	0018      	movs	r0, r3
   15d06:	4b28      	ldr	r3, [pc, #160]	; (15da8 <processOnSMS+0xfe8>)
   15d08:	4798      	blx	r3
			incomingSMSProcessed=true;
   15d0a:	2328      	movs	r3, #40	; 0x28
   15d0c:	33ff      	adds	r3, #255	; 0xff
   15d0e:	2208      	movs	r2, #8
   15d10:	4694      	mov	ip, r2
   15d12:	44bc      	add	ip, r7
   15d14:	4463      	add	r3, ip
   15d16:	2201      	movs	r2, #1
   15d18:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   15d1a:	4b11      	ldr	r3, [pc, #68]	; (15d60 <processOnSMS+0xfa0>)
   15d1c:	2294      	movs	r2, #148	; 0x94
   15d1e:	0052      	lsls	r2, r2, #1
   15d20:	4694      	mov	ip, r2
   15d22:	2208      	movs	r2, #8
   15d24:	4690      	mov	r8, r2
   15d26:	44b8      	add	r8, r7
   15d28:	44c4      	add	ip, r8
   15d2a:	4463      	add	r3, ip
   15d2c:	781b      	ldrb	r3, [r3, #0]
   15d2e:	2b00      	cmp	r3, #0
   15d30:	d101      	bne.n	15d36 <processOnSMS+0xf76>
   15d32:	f001 f8f7 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"OVR SET OK");
   15d36:	230c      	movs	r3, #12
   15d38:	2208      	movs	r2, #8
   15d3a:	4694      	mov	ip, r2
   15d3c:	44bc      	add	ip, r7
   15d3e:	4463      	add	r3, ip
   15d40:	4a1a      	ldr	r2, [pc, #104]	; (15dac <processOnSMS+0xfec>)
   15d42:	ca03      	ldmia	r2!, {r0, r1}
   15d44:	c303      	stmia	r3!, {r0, r1}
   15d46:	8811      	ldrh	r1, [r2, #0]
   15d48:	8019      	strh	r1, [r3, #0]
   15d4a:	7892      	ldrb	r2, [r2, #2]
   15d4c:	709a      	strb	r2, [r3, #2]
   15d4e:	f001 f8e9 	bl	16f24 <processOnSMS+0x2164>
   15d52:	46c0      	nop			; (mov r8, r8)
   15d54:	0002a2c8 	.word	0x0002a2c8
   15d58:	00014021 	.word	0x00014021
   15d5c:	00011705 	.word	0x00011705
   15d60:	fffffeda 	.word	0xfffffeda
   15d64:	0002a2d0 	.word	0x0002a2d0
   15d68:	0002a2e8 	.word	0x0002a2e8
   15d6c:	0002a2f4 	.word	0x0002a2f4
   15d70:	0002a310 	.word	0x0002a310
   15d74:	00029123 	.word	0x00029123
   15d78:	00028e6f 	.word	0x00028e6f
   15d7c:	00028d79 	.word	0x00028d79
   15d80:	00011751 	.word	0x00011751
   15d84:	0002a318 	.word	0x0002a318
   15d88:	00029099 	.word	0x00029099
   15d8c:	0002a33c 	.word	0x0002a33c
   15d90:	00011389 	.word	0x00011389
   15d94:	0002a344 	.word	0x0002a344
   15d98:	000290dd 	.word	0x000290dd
   15d9c:	0002a298 	.word	0x0002a298
   15da0:	00028e5d 	.word	0x00028e5d
   15da4:	0002a34c 	.word	0x0002a34c
   15da8:	000114fd 	.word	0x000114fd
   15dac:	0002a350 	.word	0x0002a350
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   15db0:	4aee      	ldr	r2, [pc, #952]	; (1616c <processOnSMS+0x13ac>)
   15db2:	68fb      	ldr	r3, [r7, #12]
   15db4:	0011      	movs	r1, r2
   15db6:	0018      	movs	r0, r3
   15db8:	4bed      	ldr	r3, [pc, #948]	; (16170 <processOnSMS+0x13b0>)
   15dba:	4798      	blx	r3
   15dbc:	1e03      	subs	r3, r0, #0
   15dbe:	d057      	beq.n	15e70 <processOnSMS+0x10b0>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15dc0:	68fb      	ldr	r3, [r7, #12]
   15dc2:	1d1c      	adds	r4, r3, #4
   15dc4:	68fb      	ldr	r3, [r7, #12]
   15dc6:	0018      	movs	r0, r3
   15dc8:	4bea      	ldr	r3, [pc, #936]	; (16174 <processOnSMS+0x13b4>)
   15dca:	4798      	blx	r3
   15dcc:	0002      	movs	r2, r0
   15dce:	68fb      	ldr	r3, [r7, #12]
   15dd0:	0021      	movs	r1, r4
   15dd2:	0018      	movs	r0, r3
   15dd4:	4be8      	ldr	r3, [pc, #928]	; (16178 <processOnSMS+0x13b8>)
   15dd6:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   15dd8:	68fb      	ldr	r3, [r7, #12]
   15dda:	0018      	movs	r0, r3
   15ddc:	4be7      	ldr	r3, [pc, #924]	; (1617c <processOnSMS+0x13bc>)
   15dde:	4798      	blx	r3
   15de0:	0002      	movs	r2, r0
   15de2:	2316      	movs	r3, #22
   15de4:	33ff      	adds	r3, #255	; 0xff
   15de6:	2108      	movs	r1, #8
   15de8:	468c      	mov	ip, r1
   15dea:	44bc      	add	ip, r7
   15dec:	4463      	add	r3, ip
   15dee:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   15df0:	2316      	movs	r3, #22
   15df2:	33ff      	adds	r3, #255	; 0xff
   15df4:	2208      	movs	r2, #8
   15df6:	4694      	mov	ip, r2
   15df8:	44bc      	add	ip, r7
   15dfa:	4463      	add	r3, ip
   15dfc:	781b      	ldrb	r3, [r3, #0]
   15dfe:	2b61      	cmp	r3, #97	; 0x61
   15e00:	d901      	bls.n	15e06 <processOnSMS+0x1046>
   15e02:	f001 f88f 	bl	16f24 <processOnSMS+0x2164>
   15e06:	2316      	movs	r3, #22
   15e08:	33ff      	adds	r3, #255	; 0xff
   15e0a:	2208      	movs	r2, #8
   15e0c:	4694      	mov	ip, r2
   15e0e:	44bc      	add	ip, r7
   15e10:	4463      	add	r3, ip
   15e12:	781b      	ldrb	r3, [r3, #0]
   15e14:	2b00      	cmp	r3, #0
   15e16:	d101      	bne.n	15e1c <processOnSMS+0x105c>
   15e18:	f001 f884 	bl	16f24 <processOnSMS+0x2164>
		{

			setUnderloadPer(undr_per);
   15e1c:	2316      	movs	r3, #22
   15e1e:	33ff      	adds	r3, #255	; 0xff
   15e20:	2208      	movs	r2, #8
   15e22:	4694      	mov	ip, r2
   15e24:	44bc      	add	ip, r7
   15e26:	4463      	add	r3, ip
   15e28:	781b      	ldrb	r3, [r3, #0]
   15e2a:	0018      	movs	r0, r3
   15e2c:	4bd4      	ldr	r3, [pc, #848]	; (16180 <processOnSMS+0x13c0>)
   15e2e:	4798      	blx	r3

			incomingSMSProcessed=true;
   15e30:	2328      	movs	r3, #40	; 0x28
   15e32:	33ff      	adds	r3, #255	; 0xff
   15e34:	2208      	movs	r2, #8
   15e36:	4694      	mov	ip, r2
   15e38:	44bc      	add	ip, r7
   15e3a:	4463      	add	r3, ip
   15e3c:	2201      	movs	r2, #1
   15e3e:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   15e40:	4bd0      	ldr	r3, [pc, #832]	; (16184 <processOnSMS+0x13c4>)
   15e42:	2294      	movs	r2, #148	; 0x94
   15e44:	0052      	lsls	r2, r2, #1
   15e46:	4694      	mov	ip, r2
   15e48:	2208      	movs	r2, #8
   15e4a:	4690      	mov	r8, r2
   15e4c:	44b8      	add	r8, r7
   15e4e:	44c4      	add	ip, r8
   15e50:	4463      	add	r3, ip
   15e52:	781b      	ldrb	r3, [r3, #0]
   15e54:	2b00      	cmp	r3, #0
   15e56:	d101      	bne.n	15e5c <processOnSMS+0x109c>
   15e58:	f001 f864 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"UNDR SET OK");
   15e5c:	230c      	movs	r3, #12
   15e5e:	2208      	movs	r2, #8
   15e60:	4694      	mov	ip, r2
   15e62:	44bc      	add	ip, r7
   15e64:	4463      	add	r3, ip
   15e66:	4ac8      	ldr	r2, [pc, #800]	; (16188 <processOnSMS+0x13c8>)
   15e68:	ca13      	ldmia	r2!, {r0, r1, r4}
   15e6a:	c313      	stmia	r3!, {r0, r1, r4}
   15e6c:	f001 f85a 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   15e70:	4ac6      	ldr	r2, [pc, #792]	; (1618c <processOnSMS+0x13cc>)
   15e72:	68fb      	ldr	r3, [r7, #12]
   15e74:	0011      	movs	r1, r2
   15e76:	0018      	movs	r0, r3
   15e78:	4bbd      	ldr	r3, [pc, #756]	; (16170 <processOnSMS+0x13b0>)
   15e7a:	4798      	blx	r3
   15e7c:	1e03      	subs	r3, r0, #0
   15e7e:	d040      	beq.n	15f02 <processOnSMS+0x1142>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15e80:	4bc3      	ldr	r3, [pc, #780]	; (16190 <processOnSMS+0x13d0>)
   15e82:	785b      	ldrb	r3, [r3, #1]
   15e84:	2b00      	cmp	r3, #0
   15e86:	d101      	bne.n	15e8c <processOnSMS+0x10cc>
   15e88:	f001 f84c 	bl	16f24 <processOnSMS+0x2164>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   15e8c:	4bc1      	ldr	r3, [pc, #772]	; (16194 <processOnSMS+0x13d4>)
   15e8e:	8a9b      	ldrh	r3, [r3, #20]
   15e90:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e92:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
   15e94:	4bbf      	ldr	r3, [pc, #764]	; (16194 <processOnSMS+0x13d4>)
   15e96:	8adb      	ldrh	r3, [r3, #22]
   15e98:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15e9a:	603b      	str	r3, [r7, #0]
   15e9c:	4bbe      	ldr	r3, [pc, #760]	; (16198 <processOnSMS+0x13d8>)
   15e9e:	691a      	ldr	r2, [r3, #16]
   15ea0:	4bbd      	ldr	r3, [pc, #756]	; (16198 <processOnSMS+0x13d8>)
   15ea2:	6959      	ldr	r1, [r3, #20]
   15ea4:	4bbc      	ldr	r3, [pc, #752]	; (16198 <processOnSMS+0x13d8>)
   15ea6:	699b      	ldr	r3, [r3, #24]
   15ea8:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   15eaa:	48bb      	ldr	r0, [pc, #748]	; (16198 <processOnSMS+0x13d8>)
   15eac:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15eae:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   15eb0:	48b9      	ldr	r0, [pc, #740]	; (16198 <processOnSMS+0x13d8>)
   15eb2:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   15eb4:	0006      	movs	r6, r0
   15eb6:	4cb9      	ldr	r4, [pc, #740]	; (1619c <processOnSMS+0x13dc>)
   15eb8:	200c      	movs	r0, #12
   15eba:	2308      	movs	r3, #8
   15ebc:	469c      	mov	ip, r3
   15ebe:	44bc      	add	ip, r7
   15ec0:	4460      	add	r0, ip
   15ec2:	9604      	str	r6, [sp, #16]
   15ec4:	9503      	str	r5, [sp, #12]
   15ec6:	4643      	mov	r3, r8
   15ec8:	9302      	str	r3, [sp, #8]
   15eca:	9101      	str	r1, [sp, #4]
   15ecc:	9200      	str	r2, [sp, #0]
   15ece:	683b      	ldr	r3, [r7, #0]
   15ed0:	687a      	ldr	r2, [r7, #4]
   15ed2:	0021      	movs	r1, r4
   15ed4:	4cb2      	ldr	r4, [pc, #712]	; (161a0 <processOnSMS+0x13e0>)
   15ed6:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   15ed8:	4baa      	ldr	r3, [pc, #680]	; (16184 <processOnSMS+0x13c4>)
   15eda:	2294      	movs	r2, #148	; 0x94
   15edc:	0052      	lsls	r2, r2, #1
   15ede:	4694      	mov	ip, r2
   15ee0:	2208      	movs	r2, #8
   15ee2:	4690      	mov	r8, r2
   15ee4:	44b8      	add	r8, r7
   15ee6:	44c4      	add	ip, r8
   15ee8:	4463      	add	r3, ip
   15eea:	2201      	movs	r2, #1
   15eec:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   15eee:	2328      	movs	r3, #40	; 0x28
   15ef0:	33ff      	adds	r3, #255	; 0xff
   15ef2:	2208      	movs	r2, #8
   15ef4:	4694      	mov	ip, r2
   15ef6:	44bc      	add	ip, r7
   15ef8:	4463      	add	r3, ip
   15efa:	2201      	movs	r2, #1
   15efc:	701a      	strb	r2, [r3, #0]
   15efe:	f001 f811 	bl	16f24 <processOnSMS+0x2164>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   15f02:	4aa8      	ldr	r2, [pc, #672]	; (161a4 <processOnSMS+0x13e4>)
   15f04:	68fb      	ldr	r3, [r7, #12]
   15f06:	0011      	movs	r1, r2
   15f08:	0018      	movs	r0, r3
   15f0a:	4b99      	ldr	r3, [pc, #612]	; (16170 <processOnSMS+0x13b0>)
   15f0c:	4798      	blx	r3
   15f0e:	1e03      	subs	r3, r0, #0
   15f10:	d032      	beq.n	15f78 <processOnSMS+0x11b8>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15f12:	4b9f      	ldr	r3, [pc, #636]	; (16190 <processOnSMS+0x13d0>)
   15f14:	795b      	ldrb	r3, [r3, #5]
   15f16:	2b00      	cmp	r3, #0
   15f18:	d101      	bne.n	15f1e <processOnSMS+0x115e>
   15f1a:	f001 f803 	bl	16f24 <processOnSMS+0x2164>
   15f1e:	4b9c      	ldr	r3, [pc, #624]	; (16190 <processOnSMS+0x13d0>)
   15f20:	78db      	ldrb	r3, [r3, #3]
   15f22:	2b00      	cmp	r3, #0
   15f24:	d001      	beq.n	15f2a <processOnSMS+0x116a>
   15f26:	f000 fffd 	bl	16f24 <processOnSMS+0x2164>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   15f2a:	2001      	movs	r0, #1
   15f2c:	4b9e      	ldr	r3, [pc, #632]	; (161a8 <processOnSMS+0x13e8>)
   15f2e:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   15f30:	2328      	movs	r3, #40	; 0x28
   15f32:	33ff      	adds	r3, #255	; 0xff
   15f34:	2208      	movs	r2, #8
   15f36:	4694      	mov	ip, r2
   15f38:	44bc      	add	ip, r7
   15f3a:	4463      	add	r3, ip
   15f3c:	2201      	movs	r2, #1
   15f3e:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   15f40:	4b90      	ldr	r3, [pc, #576]	; (16184 <processOnSMS+0x13c4>)
   15f42:	2294      	movs	r2, #148	; 0x94
   15f44:	0052      	lsls	r2, r2, #1
   15f46:	4694      	mov	ip, r2
   15f48:	2208      	movs	r2, #8
   15f4a:	4690      	mov	r8, r2
   15f4c:	44b8      	add	r8, r7
   15f4e:	44c4      	add	ip, r8
   15f50:	4463      	add	r3, ip
   15f52:	781b      	ldrb	r3, [r3, #0]
   15f54:	2b00      	cmp	r3, #0
   15f56:	d101      	bne.n	15f5c <processOnSMS+0x119c>
   15f58:	f000 ffe4 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   15f5c:	230c      	movs	r3, #12
   15f5e:	2208      	movs	r2, #8
   15f60:	4694      	mov	ip, r2
   15f62:	44bc      	add	ip, r7
   15f64:	4463      	add	r3, ip
   15f66:	4a91      	ldr	r2, [pc, #580]	; (161ac <processOnSMS+0x13ec>)
   15f68:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f6a:	c313      	stmia	r3!, {r0, r1, r4}
   15f6c:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f6e:	c313      	stmia	r3!, {r0, r1, r4}
   15f70:	6812      	ldr	r2, [r2, #0]
   15f72:	601a      	str	r2, [r3, #0]
   15f74:	f000 ffd6 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   15f78:	4a8d      	ldr	r2, [pc, #564]	; (161b0 <processOnSMS+0x13f0>)
   15f7a:	68fb      	ldr	r3, [r7, #12]
   15f7c:	0011      	movs	r1, r2
   15f7e:	0018      	movs	r0, r3
   15f80:	4b7b      	ldr	r3, [pc, #492]	; (16170 <processOnSMS+0x13b0>)
   15f82:	4798      	blx	r3
   15f84:	1e03      	subs	r3, r0, #0
   15f86:	d034      	beq.n	15ff2 <processOnSMS+0x1232>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   15f88:	4b81      	ldr	r3, [pc, #516]	; (16190 <processOnSMS+0x13d0>)
   15f8a:	795b      	ldrb	r3, [r3, #5]
   15f8c:	2b00      	cmp	r3, #0
   15f8e:	d101      	bne.n	15f94 <processOnSMS+0x11d4>
   15f90:	f000 ffc8 	bl	16f24 <processOnSMS+0x2164>
   15f94:	4b7e      	ldr	r3, [pc, #504]	; (16190 <processOnSMS+0x13d0>)
   15f96:	78db      	ldrb	r3, [r3, #3]
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d001      	beq.n	15fa0 <processOnSMS+0x11e0>
   15f9c:	f000 ffc2 	bl	16f24 <processOnSMS+0x2164>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   15fa0:	2000      	movs	r0, #0
   15fa2:	4b81      	ldr	r3, [pc, #516]	; (161a8 <processOnSMS+0x13e8>)
   15fa4:	4798      	blx	r3

			incomingSMSProcessed=true;
   15fa6:	2328      	movs	r3, #40	; 0x28
   15fa8:	33ff      	adds	r3, #255	; 0xff
   15faa:	2208      	movs	r2, #8
   15fac:	4694      	mov	ip, r2
   15fae:	44bc      	add	ip, r7
   15fb0:	4463      	add	r3, ip
   15fb2:	2201      	movs	r2, #1
   15fb4:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   15fb6:	4b73      	ldr	r3, [pc, #460]	; (16184 <processOnSMS+0x13c4>)
   15fb8:	2294      	movs	r2, #148	; 0x94
   15fba:	0052      	lsls	r2, r2, #1
   15fbc:	4694      	mov	ip, r2
   15fbe:	2208      	movs	r2, #8
   15fc0:	4690      	mov	r8, r2
   15fc2:	44b8      	add	r8, r7
   15fc4:	44c4      	add	ip, r8
   15fc6:	4463      	add	r3, ip
   15fc8:	781b      	ldrb	r3, [r3, #0]
   15fca:	2b00      	cmp	r3, #0
   15fcc:	d101      	bne.n	15fd2 <processOnSMS+0x1212>
   15fce:	f000 ffa9 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   15fd2:	230c      	movs	r3, #12
   15fd4:	2208      	movs	r2, #8
   15fd6:	4694      	mov	ip, r2
   15fd8:	44bc      	add	ip, r7
   15fda:	4463      	add	r3, ip
   15fdc:	4a75      	ldr	r2, [pc, #468]	; (161b4 <processOnSMS+0x13f4>)
   15fde:	ca13      	ldmia	r2!, {r0, r1, r4}
   15fe0:	c313      	stmia	r3!, {r0, r1, r4}
   15fe2:	ca13      	ldmia	r2!, {r0, r1, r4}
   15fe4:	c313      	stmia	r3!, {r0, r1, r4}
   15fe6:	6811      	ldr	r1, [r2, #0]
   15fe8:	6019      	str	r1, [r3, #0]
   15fea:	7912      	ldrb	r2, [r2, #4]
   15fec:	711a      	strb	r2, [r3, #4]
   15fee:	f000 ff99 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   15ff2:	4a71      	ldr	r2, [pc, #452]	; (161b8 <processOnSMS+0x13f8>)
   15ff4:	68fb      	ldr	r3, [r7, #12]
   15ff6:	0011      	movs	r1, r2
   15ff8:	0018      	movs	r0, r3
   15ffa:	4b5d      	ldr	r3, [pc, #372]	; (16170 <processOnSMS+0x13b0>)
   15ffc:	4798      	blx	r3
   15ffe:	1e03      	subs	r3, r0, #0
   16000:	d05c      	beq.n	160bc <processOnSMS+0x12fc>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16002:	4b63      	ldr	r3, [pc, #396]	; (16190 <processOnSMS+0x13d0>)
   16004:	78db      	ldrb	r3, [r3, #3]
   16006:	2b00      	cmp	r3, #0
   16008:	d101      	bne.n	1600e <processOnSMS+0x124e>
   1600a:	f000 ff8b 	bl	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   1600e:	2328      	movs	r3, #40	; 0x28
   16010:	33ff      	adds	r3, #255	; 0xff
   16012:	2208      	movs	r2, #8
   16014:	4694      	mov	ip, r2
   16016:	44bc      	add	ip, r7
   16018:	4463      	add	r3, ip
   1601a:	2201      	movs	r2, #1
   1601c:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   1601e:	4b67      	ldr	r3, [pc, #412]	; (161bc <processOnSMS+0x13fc>)
   16020:	78db      	ldrb	r3, [r3, #3]
   16022:	2b00      	cmp	r3, #0
   16024:	d02f      	beq.n	16086 <processOnSMS+0x12c6>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   16026:	4b65      	ldr	r3, [pc, #404]	; (161bc <processOnSMS+0x13fc>)
   16028:	791b      	ldrb	r3, [r3, #4]
   1602a:	2b00      	cmp	r3, #0
   1602c:	d10e      	bne.n	1604c <processOnSMS+0x128c>
				{
					response_sms_processed_cmd = false;
   1602e:	4b55      	ldr	r3, [pc, #340]	; (16184 <processOnSMS+0x13c4>)
   16030:	2294      	movs	r2, #148	; 0x94
   16032:	0052      	lsls	r2, r2, #1
   16034:	4694      	mov	ip, r2
   16036:	2208      	movs	r2, #8
   16038:	4690      	mov	r8, r2
   1603a:	44b8      	add	r8, r7
   1603c:	44c4      	add	ip, r8
   1603e:	4463      	add	r3, ip
   16040:	2200      	movs	r2, #0
   16042:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   16044:	4b5e      	ldr	r3, [pc, #376]	; (161c0 <processOnSMS+0x1400>)
   16046:	4798      	blx	r3
   16048:	f000 ff6c 	bl	16f24 <processOnSMS+0x2164>
				}
				else
				{
					response_sms_processed_cmd = true;
   1604c:	4b4d      	ldr	r3, [pc, #308]	; (16184 <processOnSMS+0x13c4>)
   1604e:	2294      	movs	r2, #148	; 0x94
   16050:	0052      	lsls	r2, r2, #1
   16052:	4694      	mov	ip, r2
   16054:	2208      	movs	r2, #8
   16056:	4690      	mov	r8, r2
   16058:	44b8      	add	r8, r7
   1605a:	44c4      	add	ip, r8
   1605c:	4463      	add	r3, ip
   1605e:	2201      	movs	r2, #1
   16060:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   16062:	230c      	movs	r3, #12
   16064:	2208      	movs	r2, #8
   16066:	4694      	mov	ip, r2
   16068:	44bc      	add	ip, r7
   1606a:	4463      	add	r3, ip
   1606c:	4a55      	ldr	r2, [pc, #340]	; (161c4 <processOnSMS+0x1404>)
   1606e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16070:	c313      	stmia	r3!, {r0, r1, r4}
   16072:	ca13      	ldmia	r2!, {r0, r1, r4}
   16074:	c313      	stmia	r3!, {r0, r1, r4}
   16076:	ca13      	ldmia	r2!, {r0, r1, r4}
   16078:	c313      	stmia	r3!, {r0, r1, r4}
   1607a:	ca03      	ldmia	r2!, {r0, r1}
   1607c:	c303      	stmia	r3!, {r0, r1}
   1607e:	8812      	ldrh	r2, [r2, #0]
   16080:	801a      	strh	r2, [r3, #0]
   16082:	f000 ff4f 	bl	16f24 <processOnSMS+0x2164>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   16086:	4b3f      	ldr	r3, [pc, #252]	; (16184 <processOnSMS+0x13c4>)
   16088:	2294      	movs	r2, #148	; 0x94
   1608a:	0052      	lsls	r2, r2, #1
   1608c:	4694      	mov	ip, r2
   1608e:	2208      	movs	r2, #8
   16090:	4690      	mov	r8, r2
   16092:	44b8      	add	r8, r7
   16094:	44c4      	add	ip, r8
   16096:	4463      	add	r3, ip
   16098:	2201      	movs	r2, #1
   1609a:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   1609c:	230c      	movs	r3, #12
   1609e:	2208      	movs	r2, #8
   160a0:	4694      	mov	ip, r2
   160a2:	44bc      	add	ip, r7
   160a4:	4463      	add	r3, ip
   160a6:	4a48      	ldr	r2, [pc, #288]	; (161c8 <processOnSMS+0x1408>)
   160a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   160aa:	c313      	stmia	r3!, {r0, r1, r4}
   160ac:	ca13      	ldmia	r2!, {r0, r1, r4}
   160ae:	c313      	stmia	r3!, {r0, r1, r4}
   160b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   160b2:	c313      	stmia	r3!, {r0, r1, r4}
   160b4:	7812      	ldrb	r2, [r2, #0]
   160b6:	701a      	strb	r2, [r3, #0]
   160b8:	f000 ff34 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   160bc:	4a43      	ldr	r2, [pc, #268]	; (161cc <processOnSMS+0x140c>)
   160be:	68fb      	ldr	r3, [r7, #12]
   160c0:	0011      	movs	r1, r2
   160c2:	0018      	movs	r0, r3
   160c4:	4b2a      	ldr	r3, [pc, #168]	; (16170 <processOnSMS+0x13b0>)
   160c6:	4798      	blx	r3
   160c8:	1e03      	subs	r3, r0, #0
   160ca:	d02a      	beq.n	16122 <processOnSMS+0x1362>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   160cc:	4b30      	ldr	r3, [pc, #192]	; (16190 <processOnSMS+0x13d0>)
   160ce:	78db      	ldrb	r3, [r3, #3]
   160d0:	2b00      	cmp	r3, #0
   160d2:	d101      	bne.n	160d8 <processOnSMS+0x1318>
   160d4:	f000 ff26 	bl	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   160d8:	2328      	movs	r3, #40	; 0x28
   160da:	33ff      	adds	r3, #255	; 0xff
   160dc:	2208      	movs	r2, #8
   160de:	4694      	mov	ip, r2
   160e0:	44bc      	add	ip, r7
   160e2:	4463      	add	r3, ip
   160e4:	2201      	movs	r2, #1
   160e6:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   160e8:	2000      	movs	r0, #0
   160ea:	4b39      	ldr	r3, [pc, #228]	; (161d0 <processOnSMS+0x1410>)
   160ec:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   160ee:	4b25      	ldr	r3, [pc, #148]	; (16184 <processOnSMS+0x13c4>)
   160f0:	2294      	movs	r2, #148	; 0x94
   160f2:	0052      	lsls	r2, r2, #1
   160f4:	4694      	mov	ip, r2
   160f6:	2208      	movs	r2, #8
   160f8:	4690      	mov	r8, r2
   160fa:	44b8      	add	r8, r7
   160fc:	44c4      	add	ip, r8
   160fe:	4463      	add	r3, ip
   16100:	781b      	ldrb	r3, [r3, #0]
   16102:	2b00      	cmp	r3, #0
   16104:	d101      	bne.n	1610a <processOnSMS+0x134a>
   16106:	f000 ff0d 	bl	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   1610a:	230c      	movs	r3, #12
   1610c:	2208      	movs	r2, #8
   1610e:	4694      	mov	ip, r2
   16110:	44bc      	add	ip, r7
   16112:	4463      	add	r3, ip
   16114:	4a2f      	ldr	r2, [pc, #188]	; (161d4 <processOnSMS+0x1414>)
   16116:	ca13      	ldmia	r2!, {r0, r1, r4}
   16118:	c313      	stmia	r3!, {r0, r1, r4}
   1611a:	6812      	ldr	r2, [r2, #0]
   1611c:	601a      	str	r2, [r3, #0]
   1611e:	f000 ff01 	bl	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   16122:	4a2d      	ldr	r2, [pc, #180]	; (161d8 <processOnSMS+0x1418>)
   16124:	68fb      	ldr	r3, [r7, #12]
   16126:	0011      	movs	r1, r2
   16128:	0018      	movs	r0, r3
   1612a:	4b11      	ldr	r3, [pc, #68]	; (16170 <processOnSMS+0x13b0>)
   1612c:	4798      	blx	r3
   1612e:	1e03      	subs	r3, r0, #0
   16130:	d056      	beq.n	161e0 <processOnSMS+0x1420>
	{
		incomingSMSProcessed=true;
   16132:	2328      	movs	r3, #40	; 0x28
   16134:	33ff      	adds	r3, #255	; 0xff
   16136:	2208      	movs	r2, #8
   16138:	4694      	mov	ip, r2
   1613a:	44bc      	add	ip, r7
   1613c:	4463      	add	r3, ip
   1613e:	2201      	movs	r2, #1
   16140:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   16142:	4b10      	ldr	r3, [pc, #64]	; (16184 <processOnSMS+0x13c4>)
   16144:	2294      	movs	r2, #148	; 0x94
   16146:	0052      	lsls	r2, r2, #1
   16148:	4694      	mov	ip, r2
   1614a:	2208      	movs	r2, #8
   1614c:	4690      	mov	r8, r2
   1614e:	44b8      	add	r8, r7
   16150:	44c4      	add	ip, r8
   16152:	4463      	add	r3, ip
   16154:	2201      	movs	r2, #1
   16156:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
   16158:	230c      	movs	r3, #12
   1615a:	2208      	movs	r2, #8
   1615c:	4694      	mov	ip, r2
   1615e:	44bc      	add	ip, r7
   16160:	4463      	add	r3, ip
   16162:	0018      	movs	r0, r3
   16164:	4b1d      	ldr	r3, [pc, #116]	; (161dc <processOnSMS+0x141c>)
   16166:	4798      	blx	r3
   16168:	f000 fedc 	bl	16f24 <processOnSMS+0x2164>
   1616c:	0002a35c 	.word	0x0002a35c
   16170:	00014021 	.word	0x00014021
   16174:	00029123 	.word	0x00029123
   16178:	00028e6f 	.word	0x00028e6f
   1617c:	00028d79 	.word	0x00028d79
   16180:	00011565 	.word	0x00011565
   16184:	fffffeda 	.word	0xfffffeda
   16188:	0002a364 	.word	0x0002a364
   1618c:	0002a370 	.word	0x0002a370
   16190:	2000062c 	.word	0x2000062c
   16194:	200006dc 	.word	0x200006dc
   16198:	20000654 	.word	0x20000654
   1619c:	0002a378 	.word	0x0002a378
   161a0:	00029099 	.word	0x00029099
   161a4:	0002a39c 	.word	0x0002a39c
   161a8:	000114b1 	.word	0x000114b1
   161ac:	0002a3a4 	.word	0x0002a3a4
   161b0:	0002a3c0 	.word	0x0002a3c0
   161b4:	0002a3c8 	.word	0x0002a3c8
   161b8:	0002a3e8 	.word	0x0002a3e8
   161bc:	20000554 	.word	0x20000554
   161c0:	000171f9 	.word	0x000171f9
   161c4:	0002a3f0 	.word	0x0002a3f0
   161c8:	0002a420 	.word	0x0002a420
   161cc:	0002a448 	.word	0x0002a448
   161d0:	00010be1 	.word	0x00010be1
   161d4:	0002a450 	.word	0x0002a450
   161d8:	0002a460 	.word	0x0002a460
   161dc:	00016fed 	.word	0x00016fed
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   161e0:	4a87      	ldr	r2, [pc, #540]	; (16400 <processOnSMS+0x1640>)
   161e2:	68fb      	ldr	r3, [r7, #12]
   161e4:	0011      	movs	r1, r2
   161e6:	0018      	movs	r0, r3
   161e8:	4b86      	ldr	r3, [pc, #536]	; (16404 <processOnSMS+0x1644>)
   161ea:	4798      	blx	r3
   161ec:	1e03      	subs	r3, r0, #0
   161ee:	d05e      	beq.n	162ae <processOnSMS+0x14ee>
   161f0:	4b85      	ldr	r3, [pc, #532]	; (16408 <processOnSMS+0x1648>)
   161f2:	2294      	movs	r2, #148	; 0x94
   161f4:	0052      	lsls	r2, r2, #1
   161f6:	4694      	mov	ip, r2
   161f8:	2208      	movs	r2, #8
   161fa:	4690      	mov	r8, r2
   161fc:	44b8      	add	r8, r7
   161fe:	44c4      	add	ip, r8
   16200:	4463      	add	r3, ip
   16202:	781b      	ldrb	r3, [r3, #0]
   16204:	2b00      	cmp	r3, #0
   16206:	d10b      	bne.n	16220 <processOnSMS+0x1460>
   16208:	4b80      	ldr	r3, [pc, #512]	; (1640c <processOnSMS+0x164c>)
   1620a:	2294      	movs	r2, #148	; 0x94
   1620c:	0052      	lsls	r2, r2, #1
   1620e:	4694      	mov	ip, r2
   16210:	2208      	movs	r2, #8
   16212:	4690      	mov	r8, r2
   16214:	44b8      	add	r8, r7
   16216:	44c4      	add	ip, r8
   16218:	4463      	add	r3, ip
   1621a:	781b      	ldrb	r3, [r3, #0]
   1621c:	2b00      	cmp	r3, #0
   1621e:	d046      	beq.n	162ae <processOnSMS+0x14ee>
	{
		incomingSMSProcessed=true;
   16220:	2328      	movs	r3, #40	; 0x28
   16222:	33ff      	adds	r3, #255	; 0xff
   16224:	2208      	movs	r2, #8
   16226:	4694      	mov	ip, r2
   16228:	44bc      	add	ip, r7
   1622a:	4463      	add	r3, ip
   1622c:	2201      	movs	r2, #1
   1622e:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16230:	4b77      	ldr	r3, [pc, #476]	; (16410 <processOnSMS+0x1650>)
   16232:	789b      	ldrb	r3, [r3, #2]
   16234:	2b00      	cmp	r3, #0
   16236:	d01c      	beq.n	16272 <processOnSMS+0x14b2>
		{
			saveAlterNumberSetting(true);
   16238:	2001      	movs	r0, #1
   1623a:	4b76      	ldr	r3, [pc, #472]	; (16414 <processOnSMS+0x1654>)
   1623c:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   1623e:	4b76      	ldr	r3, [pc, #472]	; (16418 <processOnSMS+0x1658>)
   16240:	2294      	movs	r2, #148	; 0x94
   16242:	0052      	lsls	r2, r2, #1
   16244:	4694      	mov	ip, r2
   16246:	2208      	movs	r2, #8
   16248:	4690      	mov	r8, r2
   1624a:	44b8      	add	r8, r7
   1624c:	44c4      	add	ip, r8
   1624e:	4463      	add	r3, ip
   16250:	781b      	ldrb	r3, [r3, #0]
   16252:	2b00      	cmp	r3, #0
   16254:	d101      	bne.n	1625a <processOnSMS+0x149a>
   16256:	f000 fe64 	bl	16f22 <processOnSMS+0x2162>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   1625a:	230c      	movs	r3, #12
   1625c:	2208      	movs	r2, #8
   1625e:	4694      	mov	ip, r2
   16260:	44bc      	add	ip, r7
   16262:	4463      	add	r3, ip
   16264:	4a6d      	ldr	r2, [pc, #436]	; (1641c <processOnSMS+0x165c>)
   16266:	ca13      	ldmia	r2!, {r0, r1, r4}
   16268:	c313      	stmia	r3!, {r0, r1, r4}
   1626a:	ca03      	ldmia	r2!, {r0, r1}
   1626c:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   1626e:	f000 fe58 	bl	16f22 <processOnSMS+0x2162>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   16272:	4b69      	ldr	r3, [pc, #420]	; (16418 <processOnSMS+0x1658>)
   16274:	2294      	movs	r2, #148	; 0x94
   16276:	0052      	lsls	r2, r2, #1
   16278:	4694      	mov	ip, r2
   1627a:	2208      	movs	r2, #8
   1627c:	4690      	mov	r8, r2
   1627e:	44b8      	add	r8, r7
   16280:	44c4      	add	ip, r8
   16282:	4463      	add	r3, ip
   16284:	781b      	ldrb	r3, [r3, #0]
   16286:	2b00      	cmp	r3, #0
   16288:	d101      	bne.n	1628e <processOnSMS+0x14ce>
   1628a:	f000 fe4a 	bl	16f22 <processOnSMS+0x2162>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   1628e:	230c      	movs	r3, #12
   16290:	2208      	movs	r2, #8
   16292:	4694      	mov	ip, r2
   16294:	44bc      	add	ip, r7
   16296:	4463      	add	r3, ip
   16298:	4a61      	ldr	r2, [pc, #388]	; (16420 <processOnSMS+0x1660>)
   1629a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1629c:	c313      	stmia	r3!, {r0, r1, r4}
   1629e:	ca13      	ldmia	r2!, {r0, r1, r4}
   162a0:	c313      	stmia	r3!, {r0, r1, r4}
   162a2:	6811      	ldr	r1, [r2, #0]
   162a4:	6019      	str	r1, [r3, #0]
   162a6:	7912      	ldrb	r2, [r2, #4]
   162a8:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   162aa:	f000 fe3a 	bl	16f22 <processOnSMS+0x2162>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   162ae:	4a5d      	ldr	r2, [pc, #372]	; (16424 <processOnSMS+0x1664>)
   162b0:	68fb      	ldr	r3, [r7, #12]
   162b2:	0011      	movs	r1, r2
   162b4:	0018      	movs	r0, r3
   162b6:	4b53      	ldr	r3, [pc, #332]	; (16404 <processOnSMS+0x1644>)
   162b8:	4798      	blx	r3
   162ba:	1e03      	subs	r3, r0, #0
   162bc:	d026      	beq.n	1630c <processOnSMS+0x154c>
	{
		saveAlterNumberSetting(false);
   162be:	2000      	movs	r0, #0
   162c0:	4b54      	ldr	r3, [pc, #336]	; (16414 <processOnSMS+0x1654>)
   162c2:	4798      	blx	r3
		incomingSMSProcessed=true;
   162c4:	2328      	movs	r3, #40	; 0x28
   162c6:	33ff      	adds	r3, #255	; 0xff
   162c8:	2208      	movs	r2, #8
   162ca:	4694      	mov	ip, r2
   162cc:	44bc      	add	ip, r7
   162ce:	4463      	add	r3, ip
   162d0:	2201      	movs	r2, #1
   162d2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   162d4:	4b50      	ldr	r3, [pc, #320]	; (16418 <processOnSMS+0x1658>)
   162d6:	2294      	movs	r2, #148	; 0x94
   162d8:	0052      	lsls	r2, r2, #1
   162da:	4694      	mov	ip, r2
   162dc:	2208      	movs	r2, #8
   162de:	4690      	mov	r8, r2
   162e0:	44b8      	add	r8, r7
   162e2:	44c4      	add	ip, r8
   162e4:	4463      	add	r3, ip
   162e6:	781b      	ldrb	r3, [r3, #0]
   162e8:	2b00      	cmp	r3, #0
   162ea:	d101      	bne.n	162f0 <processOnSMS+0x1530>
   162ec:	f000 fe1a 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   162f0:	230c      	movs	r3, #12
   162f2:	2208      	movs	r2, #8
   162f4:	4694      	mov	ip, r2
   162f6:	44bc      	add	ip, r7
   162f8:	4463      	add	r3, ip
   162fa:	4a4b      	ldr	r2, [pc, #300]	; (16428 <processOnSMS+0x1668>)
   162fc:	ca13      	ldmia	r2!, {r0, r1, r4}
   162fe:	c313      	stmia	r3!, {r0, r1, r4}
   16300:	ca13      	ldmia	r2!, {r0, r1, r4}
   16302:	c313      	stmia	r3!, {r0, r1, r4}
   16304:	6812      	ldr	r2, [r2, #0]
   16306:	601a      	str	r2, [r3, #0]
   16308:	f000 fe0c 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   1630c:	4a47      	ldr	r2, [pc, #284]	; (1642c <processOnSMS+0x166c>)
   1630e:	68fb      	ldr	r3, [r7, #12]
   16310:	0011      	movs	r1, r2
   16312:	0018      	movs	r0, r3
   16314:	4b3b      	ldr	r3, [pc, #236]	; (16404 <processOnSMS+0x1644>)
   16316:	4798      	blx	r3
   16318:	1e03      	subs	r3, r0, #0
   1631a:	d029      	beq.n	16370 <processOnSMS+0x15b0>
	{
		saveNoCallSettings(false,0,0,0,0);
   1631c:	2300      	movs	r3, #0
   1631e:	9300      	str	r3, [sp, #0]
   16320:	2300      	movs	r3, #0
   16322:	2200      	movs	r2, #0
   16324:	2100      	movs	r1, #0
   16326:	2000      	movs	r0, #0
   16328:	4c41      	ldr	r4, [pc, #260]	; (16430 <processOnSMS+0x1670>)
   1632a:	47a0      	blx	r4
		incomingSMSProcessed=true;
   1632c:	2328      	movs	r3, #40	; 0x28
   1632e:	33ff      	adds	r3, #255	; 0xff
   16330:	2208      	movs	r2, #8
   16332:	4694      	mov	ip, r2
   16334:	44bc      	add	ip, r7
   16336:	4463      	add	r3, ip
   16338:	2201      	movs	r2, #1
   1633a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1633c:	4b36      	ldr	r3, [pc, #216]	; (16418 <processOnSMS+0x1658>)
   1633e:	2294      	movs	r2, #148	; 0x94
   16340:	0052      	lsls	r2, r2, #1
   16342:	4694      	mov	ip, r2
   16344:	2208      	movs	r2, #8
   16346:	4690      	mov	r8, r2
   16348:	44b8      	add	r8, r7
   1634a:	44c4      	add	ip, r8
   1634c:	4463      	add	r3, ip
   1634e:	781b      	ldrb	r3, [r3, #0]
   16350:	2b00      	cmp	r3, #0
   16352:	d101      	bne.n	16358 <processOnSMS+0x1598>
   16354:	f000 fde6 	bl	16f24 <processOnSMS+0x2164>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   16358:	230c      	movs	r3, #12
   1635a:	2208      	movs	r2, #8
   1635c:	4694      	mov	ip, r2
   1635e:	44bc      	add	ip, r7
   16360:	4463      	add	r3, ip
   16362:	4a34      	ldr	r2, [pc, #208]	; (16434 <processOnSMS+0x1674>)
   16364:	ca13      	ldmia	r2!, {r0, r1, r4}
   16366:	c313      	stmia	r3!, {r0, r1, r4}
   16368:	ca03      	ldmia	r2!, {r0, r1}
   1636a:	c303      	stmia	r3!, {r0, r1}
   1636c:	f000 fdda 	bl	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   16370:	4a31      	ldr	r2, [pc, #196]	; (16438 <processOnSMS+0x1678>)
   16372:	68fb      	ldr	r3, [r7, #12]
   16374:	0011      	movs	r1, r2
   16376:	0018      	movs	r0, r3
   16378:	4b22      	ldr	r3, [pc, #136]	; (16404 <processOnSMS+0x1644>)
   1637a:	4798      	blx	r3
   1637c:	1e03      	subs	r3, r0, #0
   1637e:	d067      	beq.n	16450 <processOnSMS+0x1690>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   16380:	230a      	movs	r3, #10
   16382:	2208      	movs	r2, #8
   16384:	18ba      	adds	r2, r7, r2
   16386:	18d2      	adds	r2, r2, r3
   16388:	230b      	movs	r3, #11
   1638a:	2108      	movs	r1, #8
   1638c:	468c      	mov	ip, r1
   1638e:	44bc      	add	ip, r7
   16390:	4463      	add	r3, ip
   16392:	0011      	movs	r1, r2
   16394:	0018      	movs	r0, r3
   16396:	4b29      	ldr	r3, [pc, #164]	; (1643c <processOnSMS+0x167c>)
   16398:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   1639a:	4b29      	ldr	r3, [pc, #164]	; (16440 <processOnSMS+0x1680>)
   1639c:	2294      	movs	r2, #148	; 0x94
   1639e:	0052      	lsls	r2, r2, #1
   163a0:	4694      	mov	ip, r2
   163a2:	2208      	movs	r2, #8
   163a4:	4690      	mov	r8, r2
   163a6:	44b8      	add	r8, r7
   163a8:	44c4      	add	ip, r8
   163aa:	4463      	add	r3, ip
   163ac:	781b      	ldrb	r3, [r3, #0]
   163ae:	001a      	movs	r2, r3
   163b0:	4b24      	ldr	r3, [pc, #144]	; (16444 <processOnSMS+0x1684>)
   163b2:	2194      	movs	r1, #148	; 0x94
   163b4:	0049      	lsls	r1, r1, #1
   163b6:	468c      	mov	ip, r1
   163b8:	2108      	movs	r1, #8
   163ba:	4688      	mov	r8, r1
   163bc:	44b8      	add	r8, r7
   163be:	44c4      	add	ip, r8
   163c0:	4463      	add	r3, ip
   163c2:	781b      	ldrb	r3, [r3, #0]
   163c4:	4920      	ldr	r1, [pc, #128]	; (16448 <processOnSMS+0x1688>)
   163c6:	200c      	movs	r0, #12
   163c8:	2408      	movs	r4, #8
   163ca:	46a4      	mov	ip, r4
   163cc:	44bc      	add	ip, r7
   163ce:	4460      	add	r0, ip
   163d0:	4c1e      	ldr	r4, [pc, #120]	; (1644c <processOnSMS+0x168c>)
   163d2:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   163d4:	2328      	movs	r3, #40	; 0x28
   163d6:	33ff      	adds	r3, #255	; 0xff
   163d8:	2208      	movs	r2, #8
   163da:	4694      	mov	ip, r2
   163dc:	44bc      	add	ip, r7
   163de:	4463      	add	r3, ip
   163e0:	2201      	movs	r2, #1
   163e2:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   163e4:	4b0c      	ldr	r3, [pc, #48]	; (16418 <processOnSMS+0x1658>)
   163e6:	2294      	movs	r2, #148	; 0x94
   163e8:	0052      	lsls	r2, r2, #1
   163ea:	4694      	mov	ip, r2
   163ec:	2208      	movs	r2, #8
   163ee:	4690      	mov	r8, r2
   163f0:	44b8      	add	r8, r7
   163f2:	44c4      	add	ip, r8
   163f4:	4463      	add	r3, ip
   163f6:	2201      	movs	r2, #1
   163f8:	701a      	strb	r2, [r3, #0]
   163fa:	f000 fd93 	bl	16f24 <processOnSMS+0x2164>
   163fe:	46c0      	nop			; (mov r8, r8)
   16400:	0002a0d0 	.word	0x0002a0d0
   16404:	00014021 	.word	0x00014021
   16408:	fffffedb 	.word	0xfffffedb
   1640c:	fffffed9 	.word	0xfffffed9
   16410:	2000063c 	.word	0x2000063c
   16414:	000111e5 	.word	0x000111e5
   16418:	fffffeda 	.word	0xfffffeda
   1641c:	0002a468 	.word	0x0002a468
   16420:	0002a47c 	.word	0x0002a47c
   16424:	0002a49c 	.word	0x0002a49c
   16428:	0002a4a4 	.word	0x0002a4a4
   1642c:	0002a4c0 	.word	0x0002a4c0
   16430:	000113d5 	.word	0x000113d5
   16434:	0002a4c8 	.word	0x0002a4c8
   16438:	0002a4dc 	.word	0x0002a4dc
   1643c:	00017431 	.word	0x00017431
   16440:	fffffee3 	.word	0xfffffee3
   16444:	fffffee2 	.word	0xfffffee2
   16448:	0002a4e4 	.word	0x0002a4e4
   1644c:	00029099 	.word	0x00029099
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   16450:	4ada      	ldr	r2, [pc, #872]	; (167bc <processOnSMS+0x19fc>)
   16452:	68fb      	ldr	r3, [r7, #12]
   16454:	0011      	movs	r1, r2
   16456:	0018      	movs	r0, r3
   16458:	4bd9      	ldr	r3, [pc, #868]	; (167c0 <processOnSMS+0x1a00>)
   1645a:	4798      	blx	r3
   1645c:	1e03      	subs	r3, r0, #0
   1645e:	d001      	beq.n	16464 <processOnSMS+0x16a4>
   16460:	f000 fd60 	bl	16f24 <processOnSMS+0x2164>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   16464:	4ad7      	ldr	r2, [pc, #860]	; (167c4 <processOnSMS+0x1a04>)
   16466:	68fb      	ldr	r3, [r7, #12]
   16468:	0011      	movs	r1, r2
   1646a:	0018      	movs	r0, r3
   1646c:	4bd4      	ldr	r3, [pc, #848]	; (167c0 <processOnSMS+0x1a00>)
   1646e:	4798      	blx	r3
   16470:	1e03      	subs	r3, r0, #0
   16472:	d100      	bne.n	16476 <processOnSMS+0x16b6>
   16474:	e13c      	b.n	166f0 <processOnSMS+0x1930>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   16476:	4ad4      	ldr	r2, [pc, #848]	; (167c8 <processOnSMS+0x1a08>)
   16478:	68fb      	ldr	r3, [r7, #12]
   1647a:	0011      	movs	r1, r2
   1647c:	0018      	movs	r0, r3
   1647e:	4bd3      	ldr	r3, [pc, #844]	; (167cc <processOnSMS+0x1a0c>)
   16480:	4798      	blx	r3
   16482:	0003      	movs	r3, r0
   16484:	2288      	movs	r2, #136	; 0x88
   16486:	0052      	lsls	r2, r2, #1
   16488:	2108      	movs	r1, #8
   1648a:	468c      	mov	ip, r1
   1648c:	44bc      	add	ip, r7
   1648e:	4462      	add	r2, ip
   16490:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   16492:	4bcf      	ldr	r3, [pc, #828]	; (167d0 <processOnSMS+0x1a10>)
   16494:	0019      	movs	r1, r3
   16496:	2000      	movs	r0, #0
   16498:	4bcc      	ldr	r3, [pc, #816]	; (167cc <processOnSMS+0x1a0c>)
   1649a:	4798      	blx	r3
   1649c:	0003      	movs	r3, r0
   1649e:	2288      	movs	r2, #136	; 0x88
   164a0:	0052      	lsls	r2, r2, #1
   164a2:	2108      	movs	r1, #8
   164a4:	468c      	mov	ip, r1
   164a6:	44bc      	add	ip, r7
   164a8:	4462      	add	r2, ip
   164aa:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   164ac:	2388      	movs	r3, #136	; 0x88
   164ae:	005b      	lsls	r3, r3, #1
   164b0:	2208      	movs	r2, #8
   164b2:	4694      	mov	ip, r2
   164b4:	44bc      	add	ip, r7
   164b6:	4463      	add	r3, ip
   164b8:	681b      	ldr	r3, [r3, #0]
   164ba:	781b      	ldrb	r3, [r3, #0]
   164bc:	0018      	movs	r0, r3
   164be:	4bc5      	ldr	r3, [pc, #788]	; (167d4 <processOnSMS+0x1a14>)
   164c0:	4798      	blx	r3
   164c2:	0002      	movs	r2, r0
   164c4:	2310      	movs	r3, #16
   164c6:	33ff      	adds	r3, #255	; 0xff
   164c8:	2108      	movs	r1, #8
   164ca:	468c      	mov	ip, r1
   164cc:	44bc      	add	ip, r7
   164ce:	4463      	add	r3, ip
   164d0:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   164d2:	4bbd      	ldr	r3, [pc, #756]	; (167c8 <processOnSMS+0x1a08>)
   164d4:	0019      	movs	r1, r3
   164d6:	2000      	movs	r0, #0
   164d8:	4bbc      	ldr	r3, [pc, #752]	; (167cc <processOnSMS+0x1a0c>)
   164da:	4798      	blx	r3
   164dc:	0003      	movs	r3, r0
   164de:	2288      	movs	r2, #136	; 0x88
   164e0:	0052      	lsls	r2, r2, #1
   164e2:	2108      	movs	r1, #8
   164e4:	468c      	mov	ip, r1
   164e6:	44bc      	add	ip, r7
   164e8:	4462      	add	r2, ip
   164ea:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   164ec:	2388      	movs	r3, #136	; 0x88
   164ee:	005b      	lsls	r3, r3, #1
   164f0:	2208      	movs	r2, #8
   164f2:	4694      	mov	ip, r2
   164f4:	44bc      	add	ip, r7
   164f6:	4463      	add	r3, ip
   164f8:	681b      	ldr	r3, [r3, #0]
   164fa:	781b      	ldrb	r3, [r3, #0]
   164fc:	0018      	movs	r0, r3
   164fe:	4bb5      	ldr	r3, [pc, #724]	; (167d4 <processOnSMS+0x1a14>)
   16500:	4798      	blx	r3
   16502:	0002      	movs	r2, r0
   16504:	2387      	movs	r3, #135	; 0x87
   16506:	005b      	lsls	r3, r3, #1
   16508:	2108      	movs	r1, #8
   1650a:	468c      	mov	ip, r1
   1650c:	44bc      	add	ip, r7
   1650e:	4463      	add	r3, ip
   16510:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16512:	4baf      	ldr	r3, [pc, #700]	; (167d0 <processOnSMS+0x1a10>)
   16514:	0019      	movs	r1, r3
   16516:	2000      	movs	r0, #0
   16518:	4bac      	ldr	r3, [pc, #688]	; (167cc <processOnSMS+0x1a0c>)
   1651a:	4798      	blx	r3
   1651c:	0003      	movs	r3, r0
   1651e:	2288      	movs	r2, #136	; 0x88
   16520:	0052      	lsls	r2, r2, #1
   16522:	2108      	movs	r1, #8
   16524:	468c      	mov	ip, r1
   16526:	44bc      	add	ip, r7
   16528:	4462      	add	r2, ip
   1652a:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   1652c:	2388      	movs	r3, #136	; 0x88
   1652e:	005b      	lsls	r3, r3, #1
   16530:	2208      	movs	r2, #8
   16532:	4694      	mov	ip, r2
   16534:	44bc      	add	ip, r7
   16536:	4463      	add	r3, ip
   16538:	681b      	ldr	r3, [r3, #0]
   1653a:	781b      	ldrb	r3, [r3, #0]
   1653c:	0018      	movs	r0, r3
   1653e:	4ba5      	ldr	r3, [pc, #660]	; (167d4 <processOnSMS+0x1a14>)
   16540:	4798      	blx	r3
   16542:	0002      	movs	r2, r0
   16544:	230e      	movs	r3, #14
   16546:	33ff      	adds	r3, #255	; 0xff
   16548:	2108      	movs	r1, #8
   1654a:	468c      	mov	ip, r1
   1654c:	44bc      	add	ip, r7
   1654e:	4463      	add	r3, ip
   16550:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16552:	4b9f      	ldr	r3, [pc, #636]	; (167d0 <processOnSMS+0x1a10>)
   16554:	0019      	movs	r1, r3
   16556:	2000      	movs	r0, #0
   16558:	4b9c      	ldr	r3, [pc, #624]	; (167cc <processOnSMS+0x1a0c>)
   1655a:	4798      	blx	r3
   1655c:	0003      	movs	r3, r0
   1655e:	2288      	movs	r2, #136	; 0x88
   16560:	0052      	lsls	r2, r2, #1
   16562:	2108      	movs	r1, #8
   16564:	468c      	mov	ip, r1
   16566:	44bc      	add	ip, r7
   16568:	4462      	add	r2, ip
   1656a:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   1656c:	2388      	movs	r3, #136	; 0x88
   1656e:	005b      	lsls	r3, r3, #1
   16570:	2208      	movs	r2, #8
   16572:	4694      	mov	ip, r2
   16574:	44bc      	add	ip, r7
   16576:	4463      	add	r3, ip
   16578:	681b      	ldr	r3, [r3, #0]
   1657a:	781b      	ldrb	r3, [r3, #0]
   1657c:	0018      	movs	r0, r3
   1657e:	4b95      	ldr	r3, [pc, #596]	; (167d4 <processOnSMS+0x1a14>)
   16580:	4798      	blx	r3
   16582:	0002      	movs	r2, r0
   16584:	2386      	movs	r3, #134	; 0x86
   16586:	005b      	lsls	r3, r3, #1
   16588:	2108      	movs	r1, #8
   1658a:	468c      	mov	ip, r1
   1658c:	44bc      	add	ip, r7
   1658e:	4463      	add	r3, ip
   16590:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   16592:	2310      	movs	r3, #16
   16594:	33ff      	adds	r3, #255	; 0xff
   16596:	2208      	movs	r2, #8
   16598:	4694      	mov	ip, r2
   1659a:	44bc      	add	ip, r7
   1659c:	4463      	add	r3, ip
   1659e:	781b      	ldrb	r3, [r3, #0]
   165a0:	2b17      	cmp	r3, #23
   165a2:	d901      	bls.n	165a8 <processOnSMS+0x17e8>
   165a4:	f000 fcbe 	bl	16f24 <processOnSMS+0x2164>
   165a8:	2387      	movs	r3, #135	; 0x87
   165aa:	005b      	lsls	r3, r3, #1
   165ac:	2208      	movs	r2, #8
   165ae:	4694      	mov	ip, r2
   165b0:	44bc      	add	ip, r7
   165b2:	4463      	add	r3, ip
   165b4:	781b      	ldrb	r3, [r3, #0]
   165b6:	2b3b      	cmp	r3, #59	; 0x3b
   165b8:	d901      	bls.n	165be <processOnSMS+0x17fe>
   165ba:	f000 fcb3 	bl	16f24 <processOnSMS+0x2164>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   165be:	230e      	movs	r3, #14
   165c0:	33ff      	adds	r3, #255	; 0xff
   165c2:	2208      	movs	r2, #8
   165c4:	4694      	mov	ip, r2
   165c6:	44bc      	add	ip, r7
   165c8:	4463      	add	r3, ip
   165ca:	781b      	ldrb	r3, [r3, #0]
   165cc:	2b17      	cmp	r3, #23
   165ce:	d901      	bls.n	165d4 <processOnSMS+0x1814>
   165d0:	f000 fca8 	bl	16f24 <processOnSMS+0x2164>
   165d4:	2386      	movs	r3, #134	; 0x86
   165d6:	005b      	lsls	r3, r3, #1
   165d8:	2208      	movs	r2, #8
   165da:	4694      	mov	ip, r2
   165dc:	44bc      	add	ip, r7
   165de:	4463      	add	r3, ip
   165e0:	781b      	ldrb	r3, [r3, #0]
   165e2:	2b3b      	cmp	r3, #59	; 0x3b
   165e4:	d901      	bls.n	165ea <processOnSMS+0x182a>
   165e6:	f000 fc9d 	bl	16f24 <processOnSMS+0x2164>
			{
				incomingSMSProcessed=true;
   165ea:	2328      	movs	r3, #40	; 0x28
   165ec:	33ff      	adds	r3, #255	; 0xff
   165ee:	2208      	movs	r2, #8
   165f0:	4694      	mov	ip, r2
   165f2:	44bc      	add	ip, r7
   165f4:	4463      	add	r3, ip
   165f6:	2201      	movs	r2, #1
   165f8:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   165fa:	2310      	movs	r3, #16
   165fc:	33ff      	adds	r3, #255	; 0xff
   165fe:	2208      	movs	r2, #8
   16600:	18ba      	adds	r2, r7, r2
   16602:	18d2      	adds	r2, r2, r3
   16604:	230e      	movs	r3, #14
   16606:	33ff      	adds	r3, #255	; 0xff
   16608:	2108      	movs	r1, #8
   1660a:	468c      	mov	ip, r1
   1660c:	44bc      	add	ip, r7
   1660e:	4463      	add	r3, ip
   16610:	7812      	ldrb	r2, [r2, #0]
   16612:	781b      	ldrb	r3, [r3, #0]
   16614:	429a      	cmp	r2, r3
   16616:	d130      	bne.n	1667a <processOnSMS+0x18ba>
   16618:	2387      	movs	r3, #135	; 0x87
   1661a:	005b      	lsls	r3, r3, #1
   1661c:	2208      	movs	r2, #8
   1661e:	18ba      	adds	r2, r7, r2
   16620:	18d2      	adds	r2, r2, r3
   16622:	2386      	movs	r3, #134	; 0x86
   16624:	005b      	lsls	r3, r3, #1
   16626:	2108      	movs	r1, #8
   16628:	468c      	mov	ip, r1
   1662a:	44bc      	add	ip, r7
   1662c:	4463      	add	r3, ip
   1662e:	7812      	ldrb	r2, [r2, #0]
   16630:	781b      	ldrb	r3, [r3, #0]
   16632:	429a      	cmp	r2, r3
   16634:	d121      	bne.n	1667a <processOnSMS+0x18ba>
				{
					saveNoCallSettings(false,0,0,0,0);
   16636:	2300      	movs	r3, #0
   16638:	9300      	str	r3, [sp, #0]
   1663a:	2300      	movs	r3, #0
   1663c:	2200      	movs	r2, #0
   1663e:	2100      	movs	r1, #0
   16640:	2000      	movs	r0, #0
   16642:	4c65      	ldr	r4, [pc, #404]	; (167d8 <processOnSMS+0x1a18>)
   16644:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16646:	4b65      	ldr	r3, [pc, #404]	; (167dc <processOnSMS+0x1a1c>)
   16648:	2294      	movs	r2, #148	; 0x94
   1664a:	0052      	lsls	r2, r2, #1
   1664c:	4694      	mov	ip, r2
   1664e:	2208      	movs	r2, #8
   16650:	4690      	mov	r8, r2
   16652:	44b8      	add	r8, r7
   16654:	44c4      	add	ip, r8
   16656:	4463      	add	r3, ip
   16658:	781b      	ldrb	r3, [r3, #0]
   1665a:	2b00      	cmp	r3, #0
   1665c:	d101      	bne.n	16662 <processOnSMS+0x18a2>
   1665e:	f000 fc61 	bl	16f24 <processOnSMS+0x2164>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   16662:	230c      	movs	r3, #12
   16664:	2208      	movs	r2, #8
   16666:	4694      	mov	ip, r2
   16668:	44bc      	add	ip, r7
   1666a:	4463      	add	r3, ip
   1666c:	4a5c      	ldr	r2, [pc, #368]	; (167e0 <processOnSMS+0x1a20>)
   1666e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16670:	c313      	stmia	r3!, {r0, r1, r4}
   16672:	ca03      	ldmia	r2!, {r0, r1}
   16674:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   16676:	f000 fc55 	bl	16f24 <processOnSMS+0x2164>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   1667a:	230e      	movs	r3, #14
   1667c:	33ff      	adds	r3, #255	; 0xff
   1667e:	2208      	movs	r2, #8
   16680:	4694      	mov	ip, r2
   16682:	44bc      	add	ip, r7
   16684:	4463      	add	r3, ip
   16686:	7818      	ldrb	r0, [r3, #0]
   16688:	2387      	movs	r3, #135	; 0x87
   1668a:	005b      	lsls	r3, r3, #1
   1668c:	2208      	movs	r2, #8
   1668e:	4694      	mov	ip, r2
   16690:	44bc      	add	ip, r7
   16692:	4463      	add	r3, ip
   16694:	781a      	ldrb	r2, [r3, #0]
   16696:	2310      	movs	r3, #16
   16698:	33ff      	adds	r3, #255	; 0xff
   1669a:	2108      	movs	r1, #8
   1669c:	468c      	mov	ip, r1
   1669e:	44bc      	add	ip, r7
   166a0:	4463      	add	r3, ip
   166a2:	7819      	ldrb	r1, [r3, #0]
   166a4:	2386      	movs	r3, #134	; 0x86
   166a6:	005b      	lsls	r3, r3, #1
   166a8:	2408      	movs	r4, #8
   166aa:	46a4      	mov	ip, r4
   166ac:	44bc      	add	ip, r7
   166ae:	4463      	add	r3, ip
   166b0:	781b      	ldrb	r3, [r3, #0]
   166b2:	9300      	str	r3, [sp, #0]
   166b4:	0003      	movs	r3, r0
   166b6:	2001      	movs	r0, #1
   166b8:	4c47      	ldr	r4, [pc, #284]	; (167d8 <processOnSMS+0x1a18>)
   166ba:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   166bc:	4b47      	ldr	r3, [pc, #284]	; (167dc <processOnSMS+0x1a1c>)
   166be:	2294      	movs	r2, #148	; 0x94
   166c0:	0052      	lsls	r2, r2, #1
   166c2:	4694      	mov	ip, r2
   166c4:	2208      	movs	r2, #8
   166c6:	4690      	mov	r8, r2
   166c8:	44b8      	add	r8, r7
   166ca:	44c4      	add	ip, r8
   166cc:	4463      	add	r3, ip
   166ce:	781b      	ldrb	r3, [r3, #0]
   166d0:	2b00      	cmp	r3, #0
   166d2:	d101      	bne.n	166d8 <processOnSMS+0x1918>
   166d4:	f000 fc26 	bl	16f24 <processOnSMS+0x2164>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   166d8:	230c      	movs	r3, #12
   166da:	2208      	movs	r2, #8
   166dc:	4694      	mov	ip, r2
   166de:	44bc      	add	ip, r7
   166e0:	4463      	add	r3, ip
   166e2:	4a40      	ldr	r2, [pc, #256]	; (167e4 <processOnSMS+0x1a24>)
   166e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   166e6:	c313      	stmia	r3!, {r0, r1, r4}
   166e8:	ca03      	ldmia	r2!, {r0, r1}
   166ea:	c303      	stmia	r3!, {r0, r1}
   166ec:	f000 fc1a 	bl	16f24 <processOnSMS+0x2164>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   166f0:	4a3d      	ldr	r2, [pc, #244]	; (167e8 <processOnSMS+0x1a28>)
   166f2:	68fb      	ldr	r3, [r7, #12]
   166f4:	0011      	movs	r1, r2
   166f6:	0018      	movs	r0, r3
   166f8:	4b31      	ldr	r3, [pc, #196]	; (167c0 <processOnSMS+0x1a00>)
   166fa:	4798      	blx	r3
   166fc:	1e03      	subs	r3, r0, #0
   166fe:	d100      	bne.n	16702 <processOnSMS+0x1942>
   16700:	e07e      	b.n	16800 <processOnSMS+0x1a40>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   16702:	68fb      	ldr	r3, [r7, #12]
   16704:	1d5c      	adds	r4, r3, #5
   16706:	68fb      	ldr	r3, [r7, #12]
   16708:	0018      	movs	r0, r3
   1670a:	4b38      	ldr	r3, [pc, #224]	; (167ec <processOnSMS+0x1a2c>)
   1670c:	4798      	blx	r3
   1670e:	0002      	movs	r2, r0
   16710:	68fb      	ldr	r3, [r7, #12]
   16712:	0021      	movs	r1, r4
   16714:	0018      	movs	r0, r3
   16716:	4b36      	ldr	r3, [pc, #216]	; (167f0 <processOnSMS+0x1a30>)
   16718:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   1671a:	68fb      	ldr	r3, [r7, #12]
   1671c:	0018      	movs	r0, r3
   1671e:	4b2d      	ldr	r3, [pc, #180]	; (167d4 <processOnSMS+0x1a14>)
   16720:	4798      	blx	r3
   16722:	0002      	movs	r2, r0
   16724:	2390      	movs	r3, #144	; 0x90
   16726:	005b      	lsls	r3, r3, #1
   16728:	2108      	movs	r1, #8
   1672a:	468c      	mov	ip, r1
   1672c:	44bc      	add	ip, r7
   1672e:	4463      	add	r3, ip
   16730:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   16732:	2390      	movs	r3, #144	; 0x90
   16734:	005b      	lsls	r3, r3, #1
   16736:	2208      	movs	r2, #8
   16738:	4694      	mov	ip, r2
   1673a:	44bc      	add	ip, r7
   1673c:	4463      	add	r3, ip
   1673e:	881b      	ldrh	r3, [r3, #0]
   16740:	2b05      	cmp	r3, #5
   16742:	d907      	bls.n	16754 <processOnSMS+0x1994>
   16744:	2390      	movs	r3, #144	; 0x90
   16746:	005b      	lsls	r3, r3, #1
   16748:	2208      	movs	r2, #8
   1674a:	4694      	mov	ip, r2
   1674c:	44bc      	add	ip, r7
   1674e:	4463      	add	r3, ip
   16750:	2205      	movs	r2, #5
   16752:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   16754:	2390      	movs	r3, #144	; 0x90
   16756:	005b      	lsls	r3, r3, #1
   16758:	2208      	movs	r2, #8
   1675a:	4694      	mov	ip, r2
   1675c:	44bc      	add	ip, r7
   1675e:	4463      	add	r3, ip
   16760:	881b      	ldrh	r3, [r3, #0]
   16762:	b2db      	uxtb	r3, r3
   16764:	0018      	movs	r0, r3
   16766:	4b23      	ldr	r3, [pc, #140]	; (167f4 <processOnSMS+0x1a34>)
   16768:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1676a:	2328      	movs	r3, #40	; 0x28
   1676c:	33ff      	adds	r3, #255	; 0xff
   1676e:	2208      	movs	r2, #8
   16770:	4694      	mov	ip, r2
   16772:	44bc      	add	ip, r7
   16774:	4463      	add	r3, ip
   16776:	2201      	movs	r2, #1
   16778:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   1677a:	4b18      	ldr	r3, [pc, #96]	; (167dc <processOnSMS+0x1a1c>)
   1677c:	2294      	movs	r2, #148	; 0x94
   1677e:	0052      	lsls	r2, r2, #1
   16780:	4694      	mov	ip, r2
   16782:	2208      	movs	r2, #8
   16784:	4690      	mov	r8, r2
   16786:	44b8      	add	r8, r7
   16788:	44c4      	add	ip, r8
   1678a:	4463      	add	r3, ip
   1678c:	781b      	ldrb	r3, [r3, #0]
   1678e:	2b00      	cmp	r3, #0
   16790:	d101      	bne.n	16796 <processOnSMS+0x19d6>
   16792:	f000 fbc7 	bl	16f24 <processOnSMS+0x2164>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   16796:	2390      	movs	r3, #144	; 0x90
   16798:	005b      	lsls	r3, r3, #1
   1679a:	2208      	movs	r2, #8
   1679c:	4694      	mov	ip, r2
   1679e:	44bc      	add	ip, r7
   167a0:	4463      	add	r3, ip
   167a2:	881a      	ldrh	r2, [r3, #0]
   167a4:	4914      	ldr	r1, [pc, #80]	; (167f8 <processOnSMS+0x1a38>)
   167a6:	230c      	movs	r3, #12
   167a8:	2008      	movs	r0, #8
   167aa:	4684      	mov	ip, r0
   167ac:	44bc      	add	ip, r7
   167ae:	4463      	add	r3, ip
   167b0:	0018      	movs	r0, r3
   167b2:	4b12      	ldr	r3, [pc, #72]	; (167fc <processOnSMS+0x1a3c>)
   167b4:	4798      	blx	r3
   167b6:	f000 fbb5 	bl	16f24 <processOnSMS+0x2164>
   167ba:	46c0      	nop			; (mov r8, r8)
   167bc:	0002a4f4 	.word	0x0002a4f4
   167c0:	00014021 	.word	0x00014021
   167c4:	0002a4fc 	.word	0x0002a4fc
   167c8:	0002a504 	.word	0x0002a504
   167cc:	00029185 	.word	0x00029185
   167d0:	0002a508 	.word	0x0002a508
   167d4:	00028d79 	.word	0x00028d79
   167d8:	000113d5 	.word	0x000113d5
   167dc:	fffffeda 	.word	0xfffffeda
   167e0:	0002a4c8 	.word	0x0002a4c8
   167e4:	0002a50c 	.word	0x0002a50c
   167e8:	0002a520 	.word	0x0002a520
   167ec:	00029123 	.word	0x00029123
   167f0:	00028e6f 	.word	0x00028e6f
   167f4:	00011a1d 	.word	0x00011a1d
   167f8:	0002a528 	.word	0x0002a528
   167fc:	00029099 	.word	0x00029099
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   16800:	4aa6      	ldr	r2, [pc, #664]	; (16a9c <processOnSMS+0x1cdc>)
   16802:	68fb      	ldr	r3, [r7, #12]
   16804:	0011      	movs	r1, r2
   16806:	0018      	movs	r0, r3
   16808:	4ba5      	ldr	r3, [pc, #660]	; (16aa0 <processOnSMS+0x1ce0>)
   1680a:	4798      	blx	r3
   1680c:	1e03      	subs	r3, r0, #0
   1680e:	d06d      	beq.n	168ec <processOnSMS+0x1b2c>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   16810:	68fb      	ldr	r3, [r7, #12]
   16812:	3308      	adds	r3, #8
   16814:	001c      	movs	r4, r3
   16816:	68fb      	ldr	r3, [r7, #12]
   16818:	0018      	movs	r0, r3
   1681a:	4ba2      	ldr	r3, [pc, #648]	; (16aa4 <processOnSMS+0x1ce4>)
   1681c:	4798      	blx	r3
   1681e:	0002      	movs	r2, r0
   16820:	68fb      	ldr	r3, [r7, #12]
   16822:	0021      	movs	r1, r4
   16824:	0018      	movs	r0, r3
   16826:	4ba0      	ldr	r3, [pc, #640]	; (16aa8 <processOnSMS+0x1ce8>)
   16828:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   1682a:	68fb      	ldr	r3, [r7, #12]
   1682c:	0018      	movs	r0, r3
   1682e:	4b9f      	ldr	r3, [pc, #636]	; (16aac <processOnSMS+0x1cec>)
   16830:	4798      	blx	r3
   16832:	0002      	movs	r2, r0
   16834:	238f      	movs	r3, #143	; 0x8f
   16836:	005b      	lsls	r3, r3, #1
   16838:	2108      	movs	r1, #8
   1683a:	468c      	mov	ip, r1
   1683c:	44bc      	add	ip, r7
   1683e:	4463      	add	r3, ip
   16840:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   16842:	238f      	movs	r3, #143	; 0x8f
   16844:	005b      	lsls	r3, r3, #1
   16846:	2208      	movs	r2, #8
   16848:	4694      	mov	ip, r2
   1684a:	44bc      	add	ip, r7
   1684c:	4463      	add	r3, ip
   1684e:	881b      	ldrh	r3, [r3, #0]
   16850:	2b01      	cmp	r3, #1
   16852:	d807      	bhi.n	16864 <processOnSMS+0x1aa4>
		{
			STARTIME = 2;
   16854:	238f      	movs	r3, #143	; 0x8f
   16856:	005b      	lsls	r3, r3, #1
   16858:	2208      	movs	r2, #8
   1685a:	4694      	mov	ip, r2
   1685c:	44bc      	add	ip, r7
   1685e:	4463      	add	r3, ip
   16860:	2202      	movs	r2, #2
   16862:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
   16864:	238f      	movs	r3, #143	; 0x8f
   16866:	005b      	lsls	r3, r3, #1
   16868:	2208      	movs	r2, #8
   1686a:	4694      	mov	ip, r2
   1686c:	44bc      	add	ip, r7
   1686e:	4463      	add	r3, ip
   16870:	881a      	ldrh	r2, [r3, #0]
   16872:	2396      	movs	r3, #150	; 0x96
   16874:	00db      	lsls	r3, r3, #3
   16876:	429a      	cmp	r2, r3
   16878:	d908      	bls.n	1688c <processOnSMS+0x1acc>
		{
			STARTIME = 1200;
   1687a:	238f      	movs	r3, #143	; 0x8f
   1687c:	005b      	lsls	r3, r3, #1
   1687e:	2208      	movs	r2, #8
   16880:	4694      	mov	ip, r2
   16882:	44bc      	add	ip, r7
   16884:	4463      	add	r3, ip
   16886:	2296      	movs	r2, #150	; 0x96
   16888:	00d2      	lsls	r2, r2, #3
   1688a:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   1688c:	238f      	movs	r3, #143	; 0x8f
   1688e:	005b      	lsls	r3, r3, #1
   16890:	2208      	movs	r2, #8
   16892:	4694      	mov	ip, r2
   16894:	44bc      	add	ip, r7
   16896:	4463      	add	r3, ip
   16898:	881b      	ldrh	r3, [r3, #0]
   1689a:	0018      	movs	r0, r3
   1689c:	4b84      	ldr	r3, [pc, #528]	; (16ab0 <processOnSMS+0x1cf0>)
   1689e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   168a0:	2328      	movs	r3, #40	; 0x28
   168a2:	33ff      	adds	r3, #255	; 0xff
   168a4:	2208      	movs	r2, #8
   168a6:	4694      	mov	ip, r2
   168a8:	44bc      	add	ip, r7
   168aa:	4463      	add	r3, ip
   168ac:	2201      	movs	r2, #1
   168ae:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   168b0:	4b80      	ldr	r3, [pc, #512]	; (16ab4 <processOnSMS+0x1cf4>)
   168b2:	2294      	movs	r2, #148	; 0x94
   168b4:	0052      	lsls	r2, r2, #1
   168b6:	4694      	mov	ip, r2
   168b8:	2208      	movs	r2, #8
   168ba:	4690      	mov	r8, r2
   168bc:	44b8      	add	r8, r7
   168be:	44c4      	add	ip, r8
   168c0:	4463      	add	r3, ip
   168c2:	781b      	ldrb	r3, [r3, #0]
   168c4:	2b00      	cmp	r3, #0
   168c6:	d100      	bne.n	168ca <processOnSMS+0x1b0a>
   168c8:	e32c      	b.n	16f24 <processOnSMS+0x2164>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   168ca:	238f      	movs	r3, #143	; 0x8f
   168cc:	005b      	lsls	r3, r3, #1
   168ce:	2208      	movs	r2, #8
   168d0:	4694      	mov	ip, r2
   168d2:	44bc      	add	ip, r7
   168d4:	4463      	add	r3, ip
   168d6:	881a      	ldrh	r2, [r3, #0]
   168d8:	4977      	ldr	r1, [pc, #476]	; (16ab8 <processOnSMS+0x1cf8>)
   168da:	230c      	movs	r3, #12
   168dc:	2008      	movs	r0, #8
   168de:	4684      	mov	ip, r0
   168e0:	44bc      	add	ip, r7
   168e2:	4463      	add	r3, ip
   168e4:	0018      	movs	r0, r3
   168e6:	4b75      	ldr	r3, [pc, #468]	; (16abc <processOnSMS+0x1cfc>)
   168e8:	4798      	blx	r3
   168ea:	e31b      	b.n	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   168ec:	4a74      	ldr	r2, [pc, #464]	; (16ac0 <processOnSMS+0x1d00>)
   168ee:	68fb      	ldr	r3, [r7, #12]
   168f0:	0011      	movs	r1, r2
   168f2:	0018      	movs	r0, r3
   168f4:	4b6a      	ldr	r3, [pc, #424]	; (16aa0 <processOnSMS+0x1ce0>)
   168f6:	4798      	blx	r3
   168f8:	1e03      	subs	r3, r0, #0
   168fa:	d06d      	beq.n	169d8 <processOnSMS+0x1c18>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   168fc:	68fb      	ldr	r3, [r7, #12]
   168fe:	3308      	adds	r3, #8
   16900:	001c      	movs	r4, r3
   16902:	68fb      	ldr	r3, [r7, #12]
   16904:	0018      	movs	r0, r3
   16906:	4b67      	ldr	r3, [pc, #412]	; (16aa4 <processOnSMS+0x1ce4>)
   16908:	4798      	blx	r3
   1690a:	0002      	movs	r2, r0
   1690c:	68fb      	ldr	r3, [r7, #12]
   1690e:	0021      	movs	r1, r4
   16910:	0018      	movs	r0, r3
   16912:	4b65      	ldr	r3, [pc, #404]	; (16aa8 <processOnSMS+0x1ce8>)
   16914:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   16916:	68fb      	ldr	r3, [r7, #12]
   16918:	0018      	movs	r0, r3
   1691a:	4b64      	ldr	r3, [pc, #400]	; (16aac <processOnSMS+0x1cec>)
   1691c:	4798      	blx	r3
   1691e:	0002      	movs	r2, r0
   16920:	238e      	movs	r3, #142	; 0x8e
   16922:	005b      	lsls	r3, r3, #1
   16924:	2108      	movs	r1, #8
   16926:	468c      	mov	ip, r1
   16928:	44bc      	add	ip, r7
   1692a:	4463      	add	r3, ip
   1692c:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   1692e:	238e      	movs	r3, #142	; 0x8e
   16930:	005b      	lsls	r3, r3, #1
   16932:	2208      	movs	r2, #8
   16934:	4694      	mov	ip, r2
   16936:	44bc      	add	ip, r7
   16938:	4463      	add	r3, ip
   1693a:	881b      	ldrh	r3, [r3, #0]
   1693c:	2b31      	cmp	r3, #49	; 0x31
   1693e:	d807      	bhi.n	16950 <processOnSMS+0x1b90>
		{
			AUTOTIME = 50;
   16940:	238e      	movs	r3, #142	; 0x8e
   16942:	005b      	lsls	r3, r3, #1
   16944:	2208      	movs	r2, #8
   16946:	4694      	mov	ip, r2
   16948:	44bc      	add	ip, r7
   1694a:	4463      	add	r3, ip
   1694c:	2232      	movs	r2, #50	; 0x32
   1694e:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   16950:	238e      	movs	r3, #142	; 0x8e
   16952:	005b      	lsls	r3, r3, #1
   16954:	2208      	movs	r2, #8
   16956:	4694      	mov	ip, r2
   16958:	44bc      	add	ip, r7
   1695a:	4463      	add	r3, ip
   1695c:	881a      	ldrh	r2, [r3, #0]
   1695e:	23e1      	movs	r3, #225	; 0xe1
   16960:	01db      	lsls	r3, r3, #7
   16962:	429a      	cmp	r2, r3
   16964:	d908      	bls.n	16978 <processOnSMS+0x1bb8>
		{
			AUTOTIME = 28800;
   16966:	238e      	movs	r3, #142	; 0x8e
   16968:	005b      	lsls	r3, r3, #1
   1696a:	2208      	movs	r2, #8
   1696c:	4694      	mov	ip, r2
   1696e:	44bc      	add	ip, r7
   16970:	4463      	add	r3, ip
   16972:	22e1      	movs	r2, #225	; 0xe1
   16974:	01d2      	lsls	r2, r2, #7
   16976:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   16978:	238e      	movs	r3, #142	; 0x8e
   1697a:	005b      	lsls	r3, r3, #1
   1697c:	2208      	movs	r2, #8
   1697e:	4694      	mov	ip, r2
   16980:	44bc      	add	ip, r7
   16982:	4463      	add	r3, ip
   16984:	881b      	ldrh	r3, [r3, #0]
   16986:	0018      	movs	r0, r3
   16988:	4b4e      	ldr	r3, [pc, #312]	; (16ac4 <processOnSMS+0x1d04>)
   1698a:	4798      	blx	r3
		incomingSMSProcessed=true;
   1698c:	2328      	movs	r3, #40	; 0x28
   1698e:	33ff      	adds	r3, #255	; 0xff
   16990:	2208      	movs	r2, #8
   16992:	4694      	mov	ip, r2
   16994:	44bc      	add	ip, r7
   16996:	4463      	add	r3, ip
   16998:	2201      	movs	r2, #1
   1699a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1699c:	4b45      	ldr	r3, [pc, #276]	; (16ab4 <processOnSMS+0x1cf4>)
   1699e:	2294      	movs	r2, #148	; 0x94
   169a0:	0052      	lsls	r2, r2, #1
   169a2:	4694      	mov	ip, r2
   169a4:	2208      	movs	r2, #8
   169a6:	4690      	mov	r8, r2
   169a8:	44b8      	add	r8, r7
   169aa:	44c4      	add	ip, r8
   169ac:	4463      	add	r3, ip
   169ae:	781b      	ldrb	r3, [r3, #0]
   169b0:	2b00      	cmp	r3, #0
   169b2:	d100      	bne.n	169b6 <processOnSMS+0x1bf6>
   169b4:	e2b6      	b.n	16f24 <processOnSMS+0x2164>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   169b6:	238e      	movs	r3, #142	; 0x8e
   169b8:	005b      	lsls	r3, r3, #1
   169ba:	2208      	movs	r2, #8
   169bc:	4694      	mov	ip, r2
   169be:	44bc      	add	ip, r7
   169c0:	4463      	add	r3, ip
   169c2:	881a      	ldrh	r2, [r3, #0]
   169c4:	4940      	ldr	r1, [pc, #256]	; (16ac8 <processOnSMS+0x1d08>)
   169c6:	230c      	movs	r3, #12
   169c8:	2008      	movs	r0, #8
   169ca:	4684      	mov	ip, r0
   169cc:	44bc      	add	ip, r7
   169ce:	4463      	add	r3, ip
   169d0:	0018      	movs	r0, r3
   169d2:	4b3a      	ldr	r3, [pc, #232]	; (16abc <processOnSMS+0x1cfc>)
   169d4:	4798      	blx	r3
   169d6:	e2a5      	b.n	16f24 <processOnSMS+0x2164>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   169d8:	4a3c      	ldr	r2, [pc, #240]	; (16acc <processOnSMS+0x1d0c>)
   169da:	68fb      	ldr	r3, [r7, #12]
   169dc:	0011      	movs	r1, r2
   169de:	0018      	movs	r0, r3
   169e0:	4b2f      	ldr	r3, [pc, #188]	; (16aa0 <processOnSMS+0x1ce0>)
   169e2:	4798      	blx	r3
   169e4:	1e03      	subs	r3, r0, #0
   169e6:	d000      	beq.n	169ea <processOnSMS+0x1c2a>
   169e8:	e29c      	b.n	16f24 <processOnSMS+0x2164>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   169ea:	4a39      	ldr	r2, [pc, #228]	; (16ad0 <processOnSMS+0x1d10>)
   169ec:	68fb      	ldr	r3, [r7, #12]
   169ee:	0011      	movs	r1, r2
   169f0:	0018      	movs	r0, r3
   169f2:	4b2b      	ldr	r3, [pc, #172]	; (16aa0 <processOnSMS+0x1ce0>)
   169f4:	4798      	blx	r3
   169f6:	1e03      	subs	r3, r0, #0
   169f8:	d023      	beq.n	16a42 <processOnSMS+0x1c82>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   169fa:	68fb      	ldr	r3, [r7, #12]
   169fc:	1cdc      	adds	r4, r3, #3
   169fe:	68fb      	ldr	r3, [r7, #12]
   16a00:	0018      	movs	r0, r3
   16a02:	4b28      	ldr	r3, [pc, #160]	; (16aa4 <processOnSMS+0x1ce4>)
   16a04:	4798      	blx	r3
   16a06:	0002      	movs	r2, r0
   16a08:	68fb      	ldr	r3, [r7, #12]
   16a0a:	0021      	movs	r1, r4
   16a0c:	0018      	movs	r0, r3
   16a0e:	4b26      	ldr	r3, [pc, #152]	; (16aa8 <processOnSMS+0x1ce8>)
   16a10:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   16a12:	68fb      	ldr	r3, [r7, #12]
   16a14:	0018      	movs	r0, r3
   16a16:	4b2f      	ldr	r3, [pc, #188]	; (16ad4 <processOnSMS+0x1d14>)
   16a18:	4798      	blx	r3
   16a1a:	1e03      	subs	r3, r0, #0
   16a1c:	d100      	bne.n	16a20 <processOnSMS+0x1c60>
   16a1e:	e281      	b.n	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   16a20:	2328      	movs	r3, #40	; 0x28
   16a22:	33ff      	adds	r3, #255	; 0xff
   16a24:	2208      	movs	r2, #8
   16a26:	4694      	mov	ip, r2
   16a28:	44bc      	add	ip, r7
   16a2a:	4463      	add	r3, ip
   16a2c:	2201      	movs	r2, #1
   16a2e:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   16a30:	230c      	movs	r3, #12
   16a32:	2208      	movs	r2, #8
   16a34:	4694      	mov	ip, r2
   16a36:	44bc      	add	ip, r7
   16a38:	4463      	add	r3, ip
   16a3a:	4a27      	ldr	r2, [pc, #156]	; (16ad8 <processOnSMS+0x1d18>)
   16a3c:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a3e:	c313      	stmia	r3!, {r0, r1, r4}
   16a40:	e270      	b.n	16f24 <processOnSMS+0x2164>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   16a42:	4a26      	ldr	r2, [pc, #152]	; (16adc <processOnSMS+0x1d1c>)
   16a44:	68fb      	ldr	r3, [r7, #12]
   16a46:	0011      	movs	r1, r2
   16a48:	0018      	movs	r0, r3
   16a4a:	4b15      	ldr	r3, [pc, #84]	; (16aa0 <processOnSMS+0x1ce0>)
   16a4c:	4798      	blx	r3
   16a4e:	1e03      	subs	r3, r0, #0
   16a50:	d04a      	beq.n	16ae8 <processOnSMS+0x1d28>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16a52:	68fb      	ldr	r3, [r7, #12]
   16a54:	1cdc      	adds	r4, r3, #3
   16a56:	68fb      	ldr	r3, [r7, #12]
   16a58:	0018      	movs	r0, r3
   16a5a:	4b12      	ldr	r3, [pc, #72]	; (16aa4 <processOnSMS+0x1ce4>)
   16a5c:	4798      	blx	r3
   16a5e:	0002      	movs	r2, r0
   16a60:	68fb      	ldr	r3, [r7, #12]
   16a62:	0021      	movs	r1, r4
   16a64:	0018      	movs	r0, r3
   16a66:	4b10      	ldr	r3, [pc, #64]	; (16aa8 <processOnSMS+0x1ce8>)
   16a68:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   16a6a:	68fb      	ldr	r3, [r7, #12]
   16a6c:	0018      	movs	r0, r3
   16a6e:	4b1c      	ldr	r3, [pc, #112]	; (16ae0 <processOnSMS+0x1d20>)
   16a70:	4798      	blx	r3
   16a72:	1e03      	subs	r3, r0, #0
   16a74:	d100      	bne.n	16a78 <processOnSMS+0x1cb8>
   16a76:	e255      	b.n	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   16a78:	2328      	movs	r3, #40	; 0x28
   16a7a:	33ff      	adds	r3, #255	; 0xff
   16a7c:	2208      	movs	r2, #8
   16a7e:	4694      	mov	ip, r2
   16a80:	44bc      	add	ip, r7
   16a82:	4463      	add	r3, ip
   16a84:	2201      	movs	r2, #1
   16a86:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   16a88:	230c      	movs	r3, #12
   16a8a:	2208      	movs	r2, #8
   16a8c:	4694      	mov	ip, r2
   16a8e:	44bc      	add	ip, r7
   16a90:	4463      	add	r3, ip
   16a92:	4a14      	ldr	r2, [pc, #80]	; (16ae4 <processOnSMS+0x1d24>)
   16a94:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a96:	c313      	stmia	r3!, {r0, r1, r4}
   16a98:	e244      	b.n	16f24 <processOnSMS+0x2164>
   16a9a:	46c0      	nop			; (mov r8, r8)
   16a9c:	0002a540 	.word	0x0002a540
   16aa0:	00014021 	.word	0x00014021
   16aa4:	00029123 	.word	0x00029123
   16aa8:	00028e6f 	.word	0x00028e6f
   16aac:	00028d79 	.word	0x00028d79
   16ab0:	000119d1 	.word	0x000119d1
   16ab4:	fffffeda 	.word	0xfffffeda
   16ab8:	0002a54c 	.word	0x0002a54c
   16abc:	00029099 	.word	0x00029099
   16ac0:	0002a564 	.word	0x0002a564
   16ac4:	000112f1 	.word	0x000112f1
   16ac8:	0002a570 	.word	0x0002a570
   16acc:	0002a588 	.word	0x0002a588
   16ad0:	0002a58c 	.word	0x0002a58c
   16ad4:	00011b9d 	.word	0x00011b9d
   16ad8:	0002a590 	.word	0x0002a590
   16adc:	0002a59c 	.word	0x0002a59c
   16ae0:	00011c49 	.word	0x00011c49
   16ae4:	0002a5a0 	.word	0x0002a5a0
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   16ae8:	4adb      	ldr	r2, [pc, #876]	; (16e58 <processOnSMS+0x2098>)
   16aea:	68fb      	ldr	r3, [r7, #12]
   16aec:	0011      	movs	r1, r2
   16aee:	0018      	movs	r0, r3
   16af0:	4bda      	ldr	r3, [pc, #872]	; (16e5c <processOnSMS+0x209c>)
   16af2:	4798      	blx	r3
   16af4:	1e03      	subs	r3, r0, #0
   16af6:	d100      	bne.n	16afa <processOnSMS+0x1d3a>
   16af8:	e091      	b.n	16c1e <processOnSMS+0x1e5e>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16afa:	68fb      	ldr	r3, [r7, #12]
   16afc:	1c9c      	adds	r4, r3, #2
   16afe:	68fb      	ldr	r3, [r7, #12]
   16b00:	0018      	movs	r0, r3
   16b02:	4bd7      	ldr	r3, [pc, #860]	; (16e60 <processOnSMS+0x20a0>)
   16b04:	4798      	blx	r3
   16b06:	0002      	movs	r2, r0
   16b08:	68fb      	ldr	r3, [r7, #12]
   16b0a:	0021      	movs	r1, r4
   16b0c:	0018      	movs	r0, r3
   16b0e:	4bd5      	ldr	r3, [pc, #852]	; (16e64 <processOnSMS+0x20a4>)
   16b10:	4798      	blx	r3
		bool result = addNumber(received_command);
   16b12:	230c      	movs	r3, #12
   16b14:	33ff      	adds	r3, #255	; 0xff
   16b16:	2208      	movs	r2, #8
   16b18:	18ba      	adds	r2, r7, r2
   16b1a:	18d4      	adds	r4, r2, r3
   16b1c:	68fb      	ldr	r3, [r7, #12]
   16b1e:	0018      	movs	r0, r3
   16b20:	4bd1      	ldr	r3, [pc, #836]	; (16e68 <processOnSMS+0x20a8>)
   16b22:	4798      	blx	r3
   16b24:	0003      	movs	r3, r0
   16b26:	7023      	strb	r3, [r4, #0]
		if(result)
   16b28:	230c      	movs	r3, #12
   16b2a:	33ff      	adds	r3, #255	; 0xff
   16b2c:	2208      	movs	r2, #8
   16b2e:	4694      	mov	ip, r2
   16b30:	44bc      	add	ip, r7
   16b32:	4463      	add	r3, ip
   16b34:	781b      	ldrb	r3, [r3, #0]
   16b36:	2b00      	cmp	r3, #0
   16b38:	d100      	bne.n	16b3c <processOnSMS+0x1d7c>
   16b3a:	e1f3      	b.n	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   16b3c:	2328      	movs	r3, #40	; 0x28
   16b3e:	33ff      	adds	r3, #255	; 0xff
   16b40:	2208      	movs	r2, #8
   16b42:	4694      	mov	ip, r2
   16b44:	44bc      	add	ip, r7
   16b46:	4463      	add	r3, ip
   16b48:	2201      	movs	r2, #1
   16b4a:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   16b4c:	4bc7      	ldr	r3, [pc, #796]	; (16e6c <processOnSMS+0x20ac>)
   16b4e:	2294      	movs	r2, #148	; 0x94
   16b50:	0052      	lsls	r2, r2, #1
   16b52:	4694      	mov	ip, r2
   16b54:	2208      	movs	r2, #8
   16b56:	4690      	mov	r8, r2
   16b58:	44b8      	add	r8, r7
   16b5a:	44c4      	add	ip, r8
   16b5c:	4463      	add	r3, ip
   16b5e:	781b      	ldrb	r3, [r3, #0]
   16b60:	2b00      	cmp	r3, #0
   16b62:	d100      	bne.n	16b66 <processOnSMS+0x1da6>
   16b64:	e1de      	b.n	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16b66:	230c      	movs	r3, #12
   16b68:	2208      	movs	r2, #8
   16b6a:	4694      	mov	ip, r2
   16b6c:	44bc      	add	ip, r7
   16b6e:	4463      	add	r3, ip
   16b70:	4abf      	ldr	r2, [pc, #764]	; (16e70 <processOnSMS+0x20b0>)
   16b72:	ca03      	ldmia	r2!, {r0, r1}
   16b74:	c303      	stmia	r3!, {r0, r1}
   16b76:	8811      	ldrh	r1, [r2, #0]
   16b78:	8019      	strh	r1, [r3, #0]
   16b7a:	7892      	ldrb	r2, [r2, #2]
   16b7c:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16b7e:	230c      	movs	r3, #12
   16b80:	2208      	movs	r2, #8
   16b82:	4694      	mov	ip, r2
   16b84:	44bc      	add	ip, r7
   16b86:	4463      	add	r3, ip
   16b88:	0018      	movs	r0, r3
   16b8a:	4bb5      	ldr	r3, [pc, #724]	; (16e60 <processOnSMS+0x20a0>)
   16b8c:	4798      	blx	r3
   16b8e:	0003      	movs	r3, r0
   16b90:	001a      	movs	r2, r3
   16b92:	230c      	movs	r3, #12
   16b94:	2108      	movs	r1, #8
   16b96:	468c      	mov	ip, r1
   16b98:	44bc      	add	ip, r7
   16b9a:	4463      	add	r3, ip
   16b9c:	189a      	adds	r2, r3, r2
   16b9e:	4bb5      	ldr	r3, [pc, #724]	; (16e74 <processOnSMS+0x20b4>)
   16ba0:	0010      	movs	r0, r2
   16ba2:	0019      	movs	r1, r3
   16ba4:	2302      	movs	r3, #2
   16ba6:	001a      	movs	r2, r3
   16ba8:	4bb3      	ldr	r3, [pc, #716]	; (16e78 <processOnSMS+0x20b8>)
   16baa:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16bac:	68fa      	ldr	r2, [r7, #12]
   16bae:	230c      	movs	r3, #12
   16bb0:	2108      	movs	r1, #8
   16bb2:	468c      	mov	ip, r1
   16bb4:	44bc      	add	ip, r7
   16bb6:	4463      	add	r3, ip
   16bb8:	0011      	movs	r1, r2
   16bba:	0018      	movs	r0, r3
   16bbc:	4baf      	ldr	r3, [pc, #700]	; (16e7c <processOnSMS+0x20bc>)
   16bbe:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16bc0:	230c      	movs	r3, #12
   16bc2:	2208      	movs	r2, #8
   16bc4:	4694      	mov	ip, r2
   16bc6:	44bc      	add	ip, r7
   16bc8:	4463      	add	r3, ip
   16bca:	0018      	movs	r0, r3
   16bcc:	4ba4      	ldr	r3, [pc, #656]	; (16e60 <processOnSMS+0x20a0>)
   16bce:	4798      	blx	r3
   16bd0:	0003      	movs	r3, r0
   16bd2:	001a      	movs	r2, r3
   16bd4:	230c      	movs	r3, #12
   16bd6:	2108      	movs	r1, #8
   16bd8:	468c      	mov	ip, r1
   16bda:	44bc      	add	ip, r7
   16bdc:	4463      	add	r3, ip
   16bde:	189a      	adds	r2, r3, r2
   16be0:	4ba4      	ldr	r3, [pc, #656]	; (16e74 <processOnSMS+0x20b4>)
   16be2:	0010      	movs	r0, r2
   16be4:	0019      	movs	r1, r3
   16be6:	2302      	movs	r3, #2
   16be8:	001a      	movs	r2, r3
   16bea:	4ba3      	ldr	r3, [pc, #652]	; (16e78 <processOnSMS+0x20b8>)
   16bec:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   16bee:	230c      	movs	r3, #12
   16bf0:	2208      	movs	r2, #8
   16bf2:	4694      	mov	ip, r2
   16bf4:	44bc      	add	ip, r7
   16bf6:	4463      	add	r3, ip
   16bf8:	0018      	movs	r0, r3
   16bfa:	4b99      	ldr	r3, [pc, #612]	; (16e60 <processOnSMS+0x20a0>)
   16bfc:	4798      	blx	r3
   16bfe:	0003      	movs	r3, r0
   16c00:	001a      	movs	r2, r3
   16c02:	230c      	movs	r3, #12
   16c04:	2108      	movs	r1, #8
   16c06:	468c      	mov	ip, r1
   16c08:	44bc      	add	ip, r7
   16c0a:	4463      	add	r3, ip
   16c0c:	189a      	adds	r2, r3, r2
   16c0e:	4b9c      	ldr	r3, [pc, #624]	; (16e80 <processOnSMS+0x20c0>)
   16c10:	0010      	movs	r0, r2
   16c12:	0019      	movs	r1, r3
   16c14:	2313      	movs	r3, #19
   16c16:	001a      	movs	r2, r3
   16c18:	4b97      	ldr	r3, [pc, #604]	; (16e78 <processOnSMS+0x20b8>)
   16c1a:	4798      	blx	r3
   16c1c:	e182      	b.n	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   16c1e:	4a99      	ldr	r2, [pc, #612]	; (16e84 <processOnSMS+0x20c4>)
   16c20:	68fb      	ldr	r3, [r7, #12]
   16c22:	0011      	movs	r1, r2
   16c24:	0018      	movs	r0, r3
   16c26:	4b8d      	ldr	r3, [pc, #564]	; (16e5c <processOnSMS+0x209c>)
   16c28:	4798      	blx	r3
   16c2a:	1e03      	subs	r3, r0, #0
   16c2c:	d100      	bne.n	16c30 <processOnSMS+0x1e70>
   16c2e:	e091      	b.n	16d54 <processOnSMS+0x1f94>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   16c30:	68fb      	ldr	r3, [r7, #12]
   16c32:	1c9c      	adds	r4, r3, #2
   16c34:	68fb      	ldr	r3, [r7, #12]
   16c36:	0018      	movs	r0, r3
   16c38:	4b89      	ldr	r3, [pc, #548]	; (16e60 <processOnSMS+0x20a0>)
   16c3a:	4798      	blx	r3
   16c3c:	0002      	movs	r2, r0
   16c3e:	68fb      	ldr	r3, [r7, #12]
   16c40:	0021      	movs	r1, r4
   16c42:	0018      	movs	r0, r3
   16c44:	4b87      	ldr	r3, [pc, #540]	; (16e64 <processOnSMS+0x20a4>)
   16c46:	4798      	blx	r3
		bool result = removeNumber(received_command);
   16c48:	2385      	movs	r3, #133	; 0x85
   16c4a:	005b      	lsls	r3, r3, #1
   16c4c:	2208      	movs	r2, #8
   16c4e:	18ba      	adds	r2, r7, r2
   16c50:	18d4      	adds	r4, r2, r3
   16c52:	68fb      	ldr	r3, [r7, #12]
   16c54:	0018      	movs	r0, r3
   16c56:	4b8c      	ldr	r3, [pc, #560]	; (16e88 <processOnSMS+0x20c8>)
   16c58:	4798      	blx	r3
   16c5a:	0003      	movs	r3, r0
   16c5c:	7023      	strb	r3, [r4, #0]
		if(result)
   16c5e:	2385      	movs	r3, #133	; 0x85
   16c60:	005b      	lsls	r3, r3, #1
   16c62:	2208      	movs	r2, #8
   16c64:	4694      	mov	ip, r2
   16c66:	44bc      	add	ip, r7
   16c68:	4463      	add	r3, ip
   16c6a:	781b      	ldrb	r3, [r3, #0]
   16c6c:	2b00      	cmp	r3, #0
   16c6e:	d100      	bne.n	16c72 <processOnSMS+0x1eb2>
   16c70:	e158      	b.n	16f24 <processOnSMS+0x2164>
		{
			incomingSMSProcessed=true;
   16c72:	2328      	movs	r3, #40	; 0x28
   16c74:	33ff      	adds	r3, #255	; 0xff
   16c76:	2208      	movs	r2, #8
   16c78:	4694      	mov	ip, r2
   16c7a:	44bc      	add	ip, r7
   16c7c:	4463      	add	r3, ip
   16c7e:	2201      	movs	r2, #1
   16c80:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   16c82:	4b7a      	ldr	r3, [pc, #488]	; (16e6c <processOnSMS+0x20ac>)
   16c84:	2294      	movs	r2, #148	; 0x94
   16c86:	0052      	lsls	r2, r2, #1
   16c88:	4694      	mov	ip, r2
   16c8a:	2208      	movs	r2, #8
   16c8c:	4690      	mov	r8, r2
   16c8e:	44b8      	add	r8, r7
   16c90:	44c4      	add	ip, r8
   16c92:	4463      	add	r3, ip
   16c94:	781b      	ldrb	r3, [r3, #0]
   16c96:	2b00      	cmp	r3, #0
   16c98:	d100      	bne.n	16c9c <processOnSMS+0x1edc>
   16c9a:	e143      	b.n	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"MOBILE NO:");
   16c9c:	230c      	movs	r3, #12
   16c9e:	2208      	movs	r2, #8
   16ca0:	4694      	mov	ip, r2
   16ca2:	44bc      	add	ip, r7
   16ca4:	4463      	add	r3, ip
   16ca6:	4a72      	ldr	r2, [pc, #456]	; (16e70 <processOnSMS+0x20b0>)
   16ca8:	ca03      	ldmia	r2!, {r0, r1}
   16caa:	c303      	stmia	r3!, {r0, r1}
   16cac:	8811      	ldrh	r1, [r2, #0]
   16cae:	8019      	strh	r1, [r3, #0]
   16cb0:	7892      	ldrb	r2, [r2, #2]
   16cb2:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   16cb4:	230c      	movs	r3, #12
   16cb6:	2208      	movs	r2, #8
   16cb8:	4694      	mov	ip, r2
   16cba:	44bc      	add	ip, r7
   16cbc:	4463      	add	r3, ip
   16cbe:	0018      	movs	r0, r3
   16cc0:	4b67      	ldr	r3, [pc, #412]	; (16e60 <processOnSMS+0x20a0>)
   16cc2:	4798      	blx	r3
   16cc4:	0003      	movs	r3, r0
   16cc6:	001a      	movs	r2, r3
   16cc8:	230c      	movs	r3, #12
   16cca:	2108      	movs	r1, #8
   16ccc:	468c      	mov	ip, r1
   16cce:	44bc      	add	ip, r7
   16cd0:	4463      	add	r3, ip
   16cd2:	189a      	adds	r2, r3, r2
   16cd4:	4b67      	ldr	r3, [pc, #412]	; (16e74 <processOnSMS+0x20b4>)
   16cd6:	0010      	movs	r0, r2
   16cd8:	0019      	movs	r1, r3
   16cda:	2302      	movs	r3, #2
   16cdc:	001a      	movs	r2, r3
   16cde:	4b66      	ldr	r3, [pc, #408]	; (16e78 <processOnSMS+0x20b8>)
   16ce0:	4798      	blx	r3
				strcat(resep_msg,received_command);
   16ce2:	68fa      	ldr	r2, [r7, #12]
   16ce4:	230c      	movs	r3, #12
   16ce6:	2108      	movs	r1, #8
   16ce8:	468c      	mov	ip, r1
   16cea:	44bc      	add	ip, r7
   16cec:	4463      	add	r3, ip
   16cee:	0011      	movs	r1, r2
   16cf0:	0018      	movs	r0, r3
   16cf2:	4b62      	ldr	r3, [pc, #392]	; (16e7c <processOnSMS+0x20bc>)
   16cf4:	4798      	blx	r3
				strcat(resep_msg,"\n");
   16cf6:	230c      	movs	r3, #12
   16cf8:	2208      	movs	r2, #8
   16cfa:	4694      	mov	ip, r2
   16cfc:	44bc      	add	ip, r7
   16cfe:	4463      	add	r3, ip
   16d00:	0018      	movs	r0, r3
   16d02:	4b57      	ldr	r3, [pc, #348]	; (16e60 <processOnSMS+0x20a0>)
   16d04:	4798      	blx	r3
   16d06:	0003      	movs	r3, r0
   16d08:	001a      	movs	r2, r3
   16d0a:	230c      	movs	r3, #12
   16d0c:	2108      	movs	r1, #8
   16d0e:	468c      	mov	ip, r1
   16d10:	44bc      	add	ip, r7
   16d12:	4463      	add	r3, ip
   16d14:	189a      	adds	r2, r3, r2
   16d16:	4b57      	ldr	r3, [pc, #348]	; (16e74 <processOnSMS+0x20b4>)
   16d18:	0010      	movs	r0, r2
   16d1a:	0019      	movs	r1, r3
   16d1c:	2302      	movs	r3, #2
   16d1e:	001a      	movs	r2, r3
   16d20:	4b55      	ldr	r3, [pc, #340]	; (16e78 <processOnSMS+0x20b8>)
   16d22:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   16d24:	230c      	movs	r3, #12
   16d26:	2208      	movs	r2, #8
   16d28:	4694      	mov	ip, r2
   16d2a:	44bc      	add	ip, r7
   16d2c:	4463      	add	r3, ip
   16d2e:	0018      	movs	r0, r3
   16d30:	4b4b      	ldr	r3, [pc, #300]	; (16e60 <processOnSMS+0x20a0>)
   16d32:	4798      	blx	r3
   16d34:	0003      	movs	r3, r0
   16d36:	001a      	movs	r2, r3
   16d38:	230c      	movs	r3, #12
   16d3a:	2108      	movs	r1, #8
   16d3c:	468c      	mov	ip, r1
   16d3e:	44bc      	add	ip, r7
   16d40:	4463      	add	r3, ip
   16d42:	189a      	adds	r2, r3, r2
   16d44:	4b51      	ldr	r3, [pc, #324]	; (16e8c <processOnSMS+0x20cc>)
   16d46:	0010      	movs	r0, r2
   16d48:	0019      	movs	r1, r3
   16d4a:	2315      	movs	r3, #21
   16d4c:	001a      	movs	r2, r3
   16d4e:	4b4a      	ldr	r3, [pc, #296]	; (16e78 <processOnSMS+0x20b8>)
   16d50:	4798      	blx	r3
   16d52:	e0e7      	b.n	16f24 <processOnSMS+0x2164>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   16d54:	4a4e      	ldr	r2, [pc, #312]	; (16e90 <processOnSMS+0x20d0>)
   16d56:	68fb      	ldr	r3, [r7, #12]
   16d58:	0011      	movs	r1, r2
   16d5a:	0018      	movs	r0, r3
   16d5c:	4b3f      	ldr	r3, [pc, #252]	; (16e5c <processOnSMS+0x209c>)
   16d5e:	4798      	blx	r3
   16d60:	1e03      	subs	r3, r0, #0
   16d62:	d042      	beq.n	16dea <processOnSMS+0x202a>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16d64:	68fb      	ldr	r3, [r7, #12]
   16d66:	1cdc      	adds	r4, r3, #3
   16d68:	68fb      	ldr	r3, [r7, #12]
   16d6a:	0018      	movs	r0, r3
   16d6c:	4b3c      	ldr	r3, [pc, #240]	; (16e60 <processOnSMS+0x20a0>)
   16d6e:	4798      	blx	r3
   16d70:	0002      	movs	r2, r0
   16d72:	68fb      	ldr	r3, [r7, #12]
   16d74:	0021      	movs	r1, r4
   16d76:	0018      	movs	r0, r3
   16d78:	4b3a      	ldr	r3, [pc, #232]	; (16e64 <processOnSMS+0x20a4>)
   16d7a:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   16d7c:	230a      	movs	r3, #10
   16d7e:	33ff      	adds	r3, #255	; 0xff
   16d80:	2208      	movs	r2, #8
   16d82:	18ba      	adds	r2, r7, r2
   16d84:	18d4      	adds	r4, r2, r3
   16d86:	68fb      	ldr	r3, [r7, #12]
   16d88:	0018      	movs	r0, r3
   16d8a:	4b42      	ldr	r3, [pc, #264]	; (16e94 <processOnSMS+0x20d4>)
   16d8c:	4798      	blx	r3
   16d8e:	0003      	movs	r3, r0
   16d90:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   16d92:	2328      	movs	r3, #40	; 0x28
   16d94:	33ff      	adds	r3, #255	; 0xff
   16d96:	2208      	movs	r2, #8
   16d98:	4694      	mov	ip, r2
   16d9a:	44bc      	add	ip, r7
   16d9c:	4463      	add	r3, ip
   16d9e:	2201      	movs	r2, #1
   16da0:	701a      	strb	r2, [r3, #0]
			if(result)
   16da2:	230a      	movs	r3, #10
   16da4:	33ff      	adds	r3, #255	; 0xff
   16da6:	2208      	movs	r2, #8
   16da8:	4694      	mov	ip, r2
   16daa:	44bc      	add	ip, r7
   16dac:	4463      	add	r3, ip
   16dae:	781b      	ldrb	r3, [r3, #0]
   16db0:	2b00      	cmp	r3, #0
   16db2:	d100      	bne.n	16db6 <processOnSMS+0x1ff6>
   16db4:	e0b6      	b.n	16f24 <processOnSMS+0x2164>
			{
				if (response_sms_processed_cmd == true)
   16db6:	4b2d      	ldr	r3, [pc, #180]	; (16e6c <processOnSMS+0x20ac>)
   16db8:	2294      	movs	r2, #148	; 0x94
   16dba:	0052      	lsls	r2, r2, #1
   16dbc:	4694      	mov	ip, r2
   16dbe:	2208      	movs	r2, #8
   16dc0:	4690      	mov	r8, r2
   16dc2:	44b8      	add	r8, r7
   16dc4:	44c4      	add	ip, r8
   16dc6:	4463      	add	r3, ip
   16dc8:	781b      	ldrb	r3, [r3, #0]
   16dca:	2b00      	cmp	r3, #0
   16dcc:	d100      	bne.n	16dd0 <processOnSMS+0x2010>
   16dce:	e0a9      	b.n	16f24 <processOnSMS+0x2164>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
   16dd0:	230c      	movs	r3, #12
   16dd2:	2208      	movs	r2, #8
   16dd4:	4694      	mov	ip, r2
   16dd6:	44bc      	add	ip, r7
   16dd8:	4463      	add	r3, ip
   16dda:	4a2f      	ldr	r2, [pc, #188]	; (16e98 <processOnSMS+0x20d8>)
   16ddc:	ca13      	ldmia	r2!, {r0, r1, r4}
   16dde:	c313      	stmia	r3!, {r0, r1, r4}
   16de0:	ca13      	ldmia	r2!, {r0, r1, r4}
   16de2:	c313      	stmia	r3!, {r0, r1, r4}
   16de4:	ca03      	ldmia	r2!, {r0, r1}
   16de6:	c303      	stmia	r3!, {r0, r1}
   16de8:	e09c      	b.n	16f24 <processOnSMS+0x2164>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   16dea:	4a2c      	ldr	r2, [pc, #176]	; (16e9c <processOnSMS+0x20dc>)
   16dec:	68fb      	ldr	r3, [r7, #12]
   16dee:	0011      	movs	r1, r2
   16df0:	0018      	movs	r0, r3
   16df2:	4b1a      	ldr	r3, [pc, #104]	; (16e5c <processOnSMS+0x209c>)
   16df4:	4798      	blx	r3
   16df6:	1e03      	subs	r3, r0, #0
   16df8:	d056      	beq.n	16ea8 <processOnSMS+0x20e8>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16dfa:	68fb      	ldr	r3, [r7, #12]
   16dfc:	1cdc      	adds	r4, r3, #3
   16dfe:	68fb      	ldr	r3, [r7, #12]
   16e00:	0018      	movs	r0, r3
   16e02:	4b17      	ldr	r3, [pc, #92]	; (16e60 <processOnSMS+0x20a0>)
   16e04:	4798      	blx	r3
   16e06:	0002      	movs	r2, r0
   16e08:	68fb      	ldr	r3, [r7, #12]
   16e0a:	0021      	movs	r1, r4
   16e0c:	0018      	movs	r0, r3
   16e0e:	4b15      	ldr	r3, [pc, #84]	; (16e64 <processOnSMS+0x20a4>)
   16e10:	4798      	blx	r3
			addM2MNumber(received_command);
   16e12:	68fb      	ldr	r3, [r7, #12]
   16e14:	0018      	movs	r0, r3
   16e16:	4b22      	ldr	r3, [pc, #136]	; (16ea0 <processOnSMS+0x20e0>)
   16e18:	4798      	blx	r3
			incomingSMSProcessed=true;
   16e1a:	2328      	movs	r3, #40	; 0x28
   16e1c:	33ff      	adds	r3, #255	; 0xff
   16e1e:	2208      	movs	r2, #8
   16e20:	4694      	mov	ip, r2
   16e22:	44bc      	add	ip, r7
   16e24:	4463      	add	r3, ip
   16e26:	2201      	movs	r2, #1
   16e28:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   16e2a:	4b10      	ldr	r3, [pc, #64]	; (16e6c <processOnSMS+0x20ac>)
   16e2c:	2294      	movs	r2, #148	; 0x94
   16e2e:	0052      	lsls	r2, r2, #1
   16e30:	4694      	mov	ip, r2
   16e32:	2208      	movs	r2, #8
   16e34:	4690      	mov	r8, r2
   16e36:	44b8      	add	r8, r7
   16e38:	44c4      	add	ip, r8
   16e3a:	4463      	add	r3, ip
   16e3c:	781b      	ldrb	r3, [r3, #0]
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d070      	beq.n	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   16e42:	230c      	movs	r3, #12
   16e44:	2208      	movs	r2, #8
   16e46:	4694      	mov	ip, r2
   16e48:	44bc      	add	ip, r7
   16e4a:	4463      	add	r3, ip
   16e4c:	4a15      	ldr	r2, [pc, #84]	; (16ea4 <processOnSMS+0x20e4>)
   16e4e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16e50:	c313      	stmia	r3!, {r0, r1, r4}
   16e52:	8812      	ldrh	r2, [r2, #0]
   16e54:	801a      	strh	r2, [r3, #0]
   16e56:	e065      	b.n	16f24 <processOnSMS+0x2164>
   16e58:	0002a5ac 	.word	0x0002a5ac
   16e5c:	00014021 	.word	0x00014021
   16e60:	00029123 	.word	0x00029123
   16e64:	00028e6f 	.word	0x00028e6f
   16e68:	00010eed 	.word	0x00010eed
   16e6c:	fffffeda 	.word	0xfffffeda
   16e70:	0002a5b0 	.word	0x0002a5b0
   16e74:	0002a5bc 	.word	0x0002a5bc
   16e78:	00028e5d 	.word	0x00028e5d
   16e7c:	000290dd 	.word	0x000290dd
   16e80:	0002a5c0 	.word	0x0002a5c0
   16e84:	0002a5d4 	.word	0x0002a5d4
   16e88:	00010fe9 	.word	0x00010fe9
   16e8c:	0002a5d8 	.word	0x0002a5d8
   16e90:	0002a5f0 	.word	0x0002a5f0
   16e94:	00011235 	.word	0x00011235
   16e98:	0002a5f4 	.word	0x0002a5f4
   16e9c:	0002a614 	.word	0x0002a614
   16ea0:	00010c45 	.word	0x00010c45
   16ea4:	0002a618 	.word	0x0002a618
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   16ea8:	4a44      	ldr	r2, [pc, #272]	; (16fbc <processOnSMS+0x21fc>)
   16eaa:	68fb      	ldr	r3, [r7, #12]
   16eac:	0011      	movs	r1, r2
   16eae:	0018      	movs	r0, r3
   16eb0:	4b43      	ldr	r3, [pc, #268]	; (16fc0 <processOnSMS+0x2200>)
   16eb2:	4798      	blx	r3
   16eb4:	1e03      	subs	r3, r0, #0
   16eb6:	d035      	beq.n	16f24 <processOnSMS+0x2164>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   16eb8:	4b42      	ldr	r3, [pc, #264]	; (16fc4 <processOnSMS+0x2204>)
   16eba:	78db      	ldrb	r3, [r3, #3]
   16ebc:	2b00      	cmp	r3, #0
   16ebe:	d031      	beq.n	16f24 <processOnSMS+0x2164>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   16ec0:	68fb      	ldr	r3, [r7, #12]
   16ec2:	1cdc      	adds	r4, r3, #3
   16ec4:	68fb      	ldr	r3, [r7, #12]
   16ec6:	0018      	movs	r0, r3
   16ec8:	4b3f      	ldr	r3, [pc, #252]	; (16fc8 <processOnSMS+0x2208>)
   16eca:	4798      	blx	r3
   16ecc:	0002      	movs	r2, r0
   16ece:	68fb      	ldr	r3, [r7, #12]
   16ed0:	0021      	movs	r1, r4
   16ed2:	0018      	movs	r0, r3
   16ed4:	4b3d      	ldr	r3, [pc, #244]	; (16fcc <processOnSMS+0x220c>)
   16ed6:	4798      	blx	r3
			incomingSMSProcessed=true;
   16ed8:	2328      	movs	r3, #40	; 0x28
   16eda:	33ff      	adds	r3, #255	; 0xff
   16edc:	2208      	movs	r2, #8
   16ede:	4694      	mov	ip, r2
   16ee0:	44bc      	add	ip, r7
   16ee2:	4463      	add	r3, ip
   16ee4:	2201      	movs	r2, #1
   16ee6:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   16ee8:	68fb      	ldr	r3, [r7, #12]
   16eea:	0018      	movs	r0, r3
   16eec:	4b38      	ldr	r3, [pc, #224]	; (16fd0 <processOnSMS+0x2210>)
   16eee:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   16ef0:	4b38      	ldr	r3, [pc, #224]	; (16fd4 <processOnSMS+0x2214>)
   16ef2:	2294      	movs	r2, #148	; 0x94
   16ef4:	0052      	lsls	r2, r2, #1
   16ef6:	4694      	mov	ip, r2
   16ef8:	2208      	movs	r2, #8
   16efa:	4690      	mov	r8, r2
   16efc:	44b8      	add	r8, r7
   16efe:	44c4      	add	ip, r8
   16f00:	4463      	add	r3, ip
   16f02:	781b      	ldrb	r3, [r3, #0]
   16f04:	2b00      	cmp	r3, #0
   16f06:	d00d      	beq.n	16f24 <processOnSMS+0x2164>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   16f08:	230c      	movs	r3, #12
   16f0a:	2208      	movs	r2, #8
   16f0c:	4694      	mov	ip, r2
   16f0e:	44bc      	add	ip, r7
   16f10:	4463      	add	r3, ip
   16f12:	4a31      	ldr	r2, [pc, #196]	; (16fd8 <processOnSMS+0x2218>)
   16f14:	ca13      	ldmia	r2!, {r0, r1, r4}
   16f16:	c313      	stmia	r3!, {r0, r1, r4}
   16f18:	ca03      	ldmia	r2!, {r0, r1}
   16f1a:	c303      	stmia	r3!, {r0, r1}
   16f1c:	7812      	ldrb	r2, [r2, #0]
   16f1e:	701a      	strb	r2, [r3, #0]
   16f20:	e000      	b.n	16f24 <processOnSMS+0x2164>
		if (alternateNumber_struct.alterNumberPresent)
   16f22:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   16f24:	4b2b      	ldr	r3, [pc, #172]	; (16fd4 <processOnSMS+0x2214>)
   16f26:	2294      	movs	r2, #148	; 0x94
   16f28:	0052      	lsls	r2, r2, #1
   16f2a:	4694      	mov	ip, r2
   16f2c:	2208      	movs	r2, #8
   16f2e:	4690      	mov	r8, r2
   16f30:	44b8      	add	r8, r7
   16f32:	44c4      	add	ip, r8
   16f34:	4463      	add	r3, ip
   16f36:	781b      	ldrb	r3, [r3, #0]
   16f38:	2b00      	cmp	r3, #0
   16f3a:	d03a      	beq.n	16fb2 <processOnSMS+0x21f2>
	{
		if(!incomingSMSProcessed)
   16f3c:	2328      	movs	r3, #40	; 0x28
   16f3e:	33ff      	adds	r3, #255	; 0xff
   16f40:	2208      	movs	r2, #8
   16f42:	4694      	mov	ip, r2
   16f44:	44bc      	add	ip, r7
   16f46:	4463      	add	r3, ip
   16f48:	781b      	ldrb	r3, [r3, #0]
   16f4a:	2201      	movs	r2, #1
   16f4c:	4053      	eors	r3, r2
   16f4e:	b2db      	uxtb	r3, r3
   16f50:	2b00      	cmp	r3, #0
   16f52:	d011      	beq.n	16f78 <processOnSMS+0x21b8>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
   16f54:	238c      	movs	r3, #140	; 0x8c
   16f56:	005b      	lsls	r3, r3, #1
   16f58:	2208      	movs	r2, #8
   16f5a:	4694      	mov	ip, r2
   16f5c:	44bc      	add	ip, r7
   16f5e:	4463      	add	r3, ip
   16f60:	681b      	ldr	r3, [r3, #0]
   16f62:	781b      	ldrb	r3, [r3, #0]
   16f64:	001a      	movs	r2, r3
   16f66:	491d      	ldr	r1, [pc, #116]	; (16fdc <processOnSMS+0x221c>)
   16f68:	230c      	movs	r3, #12
   16f6a:	2008      	movs	r0, #8
   16f6c:	4684      	mov	ip, r0
   16f6e:	44bc      	add	ip, r7
   16f70:	4463      	add	r3, ip
   16f72:	0018      	movs	r0, r3
   16f74:	4b1a      	ldr	r3, [pc, #104]	; (16fe0 <processOnSMS+0x2220>)
   16f76:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   16f78:	23a0      	movs	r3, #160	; 0xa0
   16f7a:	005b      	lsls	r3, r3, #1
   16f7c:	2208      	movs	r2, #8
   16f7e:	4694      	mov	ip, r2
   16f80:	44bc      	add	ip, r7
   16f82:	4463      	add	r3, ip
   16f84:	681b      	ldr	r3, [r3, #0]
   16f86:	2200      	movs	r2, #0
   16f88:	0019      	movs	r1, r3
   16f8a:	2005      	movs	r0, #5
   16f8c:	4b15      	ldr	r3, [pc, #84]	; (16fe4 <processOnSMS+0x2224>)
   16f8e:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   16f90:	230c      	movs	r3, #12
   16f92:	2208      	movs	r2, #8
   16f94:	18ba      	adds	r2, r7, r2
   16f96:	18d2      	adds	r2, r2, r3
   16f98:	23a0      	movs	r3, #160	; 0xa0
   16f9a:	005b      	lsls	r3, r3, #1
   16f9c:	2108      	movs	r1, #8
   16f9e:	468c      	mov	ip, r1
   16fa0:	44bc      	add	ip, r7
   16fa2:	4463      	add	r3, ip
   16fa4:	681b      	ldr	r3, [r3, #0]
   16fa6:	0011      	movs	r1, r2
   16fa8:	0018      	movs	r0, r3
   16faa:	4b0f      	ldr	r3, [pc, #60]	; (16fe8 <processOnSMS+0x2228>)
   16fac:	4798      	blx	r3
   16fae:	e000      	b.n	16fb2 <processOnSMS+0x21f2>
		return;
   16fb0:	46c0      	nop			; (mov r8, r8)
	}
}
   16fb2:	46bd      	mov	sp, r7
   16fb4:	b04c      	add	sp, #304	; 0x130
   16fb6:	bc04      	pop	{r2}
   16fb8:	4690      	mov	r8, r2
   16fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fbc:	0002a628 	.word	0x0002a628
   16fc0:	00014021 	.word	0x00014021
   16fc4:	2000062c 	.word	0x2000062c
   16fc8:	00029123 	.word	0x00029123
   16fcc:	00028e6f 	.word	0x00028e6f
   16fd0:	00010cad 	.word	0x00010cad
   16fd4:	fffffeda 	.word	0xfffffeda
   16fd8:	0002a62c 	.word	0x0002a62c
   16fdc:	0002a644 	.word	0x0002a644
   16fe0:	00029099 	.word	0x00029099
   16fe4:	0001cbbd 	.word	0x0001cbbd
   16fe8:	00012b11 	.word	0x00012b11

00016fec <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   16fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fee:	b091      	sub	sp, #68	; 0x44
   16ff0:	af06      	add	r7, sp, #24
   16ff2:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   16ff4:	2327      	movs	r3, #39	; 0x27
   16ff6:	18fc      	adds	r4, r7, r3
   16ff8:	4b32      	ldr	r3, [pc, #200]	; (170c4 <buildStatusMessage+0xd8>)
   16ffa:	4798      	blx	r3
   16ffc:	0003      	movs	r3, r0
   16ffe:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   17000:	4b31      	ldr	r3, [pc, #196]	; (170c8 <buildStatusMessage+0xdc>)
   17002:	785b      	ldrb	r3, [r3, #1]
   17004:	b2db      	uxtb	r3, r3
   17006:	2b02      	cmp	r3, #2
   17008:	d009      	beq.n	1701e <buildStatusMessage+0x32>
   1700a:	2b03      	cmp	r3, #3
   1700c:	d10d      	bne.n	1702a <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   1700e:	231c      	movs	r3, #28
   17010:	18fb      	adds	r3, r7, r3
   17012:	4a2e      	ldr	r2, [pc, #184]	; (170cc <buildStatusMessage+0xe0>)
   17014:	8811      	ldrh	r1, [r2, #0]
   17016:	8019      	strh	r1, [r3, #0]
   17018:	7892      	ldrb	r2, [r2, #2]
   1701a:	709a      	strb	r2, [r3, #2]
		break;
   1701c:	e00a      	b.n	17034 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   1701e:	231c      	movs	r3, #28
   17020:	18fb      	adds	r3, r7, r3
   17022:	4a2b      	ldr	r2, [pc, #172]	; (170d0 <buildStatusMessage+0xe4>)
   17024:	ca03      	ldmia	r2!, {r0, r1}
   17026:	c303      	stmia	r3!, {r0, r1}
		break;
   17028:	e004      	b.n	17034 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   1702a:	231c      	movs	r3, #28
   1702c:	18fb      	adds	r3, r7, r3
   1702e:	4a29      	ldr	r2, [pc, #164]	; (170d4 <buildStatusMessage+0xe8>)
   17030:	601a      	str	r2, [r3, #0]
		break;
   17032:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   17034:	4b24      	ldr	r3, [pc, #144]	; (170c8 <buildStatusMessage+0xdc>)
   17036:	781b      	ldrb	r3, [r3, #0]
   17038:	b2db      	uxtb	r3, r3
   1703a:	2b02      	cmp	r3, #2
   1703c:	d107      	bne.n	1704e <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   1703e:	2314      	movs	r3, #20
   17040:	18fb      	adds	r3, r7, r3
   17042:	4a25      	ldr	r2, [pc, #148]	; (170d8 <buildStatusMessage+0xec>)
   17044:	8811      	ldrh	r1, [r2, #0]
   17046:	8019      	strh	r1, [r3, #0]
   17048:	7892      	ldrb	r2, [r2, #2]
   1704a:	709a      	strb	r2, [r3, #2]
   1704c:	e006      	b.n	1705c <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   1704e:	2314      	movs	r3, #20
   17050:	18fb      	adds	r3, r7, r3
   17052:	4a22      	ldr	r2, [pc, #136]	; (170dc <buildStatusMessage+0xf0>)
   17054:	6811      	ldr	r1, [r2, #0]
   17056:	6019      	str	r1, [r3, #0]
   17058:	8892      	ldrh	r2, [r2, #4]
   1705a:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   1705c:	4b20      	ldr	r3, [pc, #128]	; (170e0 <buildStatusMessage+0xf4>)
   1705e:	4798      	blx	r3
   17060:	1e03      	subs	r3, r0, #0
   17062:	d007      	beq.n	17074 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   17064:	230c      	movs	r3, #12
   17066:	18fb      	adds	r3, r7, r3
   17068:	4a18      	ldr	r2, [pc, #96]	; (170cc <buildStatusMessage+0xe0>)
   1706a:	8811      	ldrh	r1, [r2, #0]
   1706c:	8019      	strh	r1, [r3, #0]
   1706e:	7892      	ldrb	r2, [r2, #2]
   17070:	709a      	strb	r2, [r3, #2]
   17072:	e003      	b.n	1707c <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   17074:	230c      	movs	r3, #12
   17076:	18fb      	adds	r3, r7, r3
   17078:	4a16      	ldr	r2, [pc, #88]	; (170d4 <buildStatusMessage+0xe8>)
   1707a:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   1707c:	4b19      	ldr	r3, [pc, #100]	; (170e4 <buildStatusMessage+0xf8>)
   1707e:	681c      	ldr	r4, [r3, #0]
   17080:	4b18      	ldr	r3, [pc, #96]	; (170e4 <buildStatusMessage+0xf8>)
   17082:	685d      	ldr	r5, [r3, #4]
   17084:	4b17      	ldr	r3, [pc, #92]	; (170e4 <buildStatusMessage+0xf8>)
   17086:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
   17088:	4a16      	ldr	r2, [pc, #88]	; (170e4 <buildStatusMessage+0xf8>)
   1708a:	8a92      	ldrh	r2, [r2, #20]
   1708c:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
   1708e:	0016      	movs	r6, r2
   17090:	2227      	movs	r2, #39	; 0x27
   17092:	18ba      	adds	r2, r7, r2
   17094:	7812      	ldrb	r2, [r2, #0]
   17096:	4914      	ldr	r1, [pc, #80]	; (170e8 <buildStatusMessage+0xfc>)
   17098:	6878      	ldr	r0, [r7, #4]
   1709a:	9205      	str	r2, [sp, #20]
   1709c:	9604      	str	r6, [sp, #16]
   1709e:	220c      	movs	r2, #12
   170a0:	18ba      	adds	r2, r7, r2
   170a2:	9203      	str	r2, [sp, #12]
   170a4:	2214      	movs	r2, #20
   170a6:	18ba      	adds	r2, r7, r2
   170a8:	9202      	str	r2, [sp, #8]
   170aa:	221c      	movs	r2, #28
   170ac:	18ba      	adds	r2, r7, r2
   170ae:	9201      	str	r2, [sp, #4]
   170b0:	9300      	str	r3, [sp, #0]
   170b2:	002b      	movs	r3, r5
   170b4:	0022      	movs	r2, r4
   170b6:	4c0d      	ldr	r4, [pc, #52]	; (170ec <buildStatusMessage+0x100>)
   170b8:	47a0      	blx	r4
}
   170ba:	46c0      	nop			; (mov r8, r8)
   170bc:	46bd      	mov	sp, r7
   170be:	b00b      	add	sp, #44	; 0x2c
   170c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170c2:	46c0      	nop			; (mov r8, r8)
   170c4:	000128c9 	.word	0x000128c9
   170c8:	20000740 	.word	0x20000740
   170cc:	0002a650 	.word	0x0002a650
   170d0:	0002a654 	.word	0x0002a654
   170d4:	0046464f 	.word	0x0046464f
   170d8:	0002a65c 	.word	0x0002a65c
   170dc:	0002a660 	.word	0x0002a660
   170e0:	0001ac01 	.word	0x0001ac01
   170e4:	200006dc 	.word	0x200006dc
   170e8:	0002a668 	.word	0x0002a668
   170ec:	00029099 	.word	0x00029099

000170f0 <checkNumber>:


bool checkNumber(char *number)
{
   170f0:	b580      	push	{r7, lr}
   170f2:	b082      	sub	sp, #8
   170f4:	af00      	add	r7, sp, #0
   170f6:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   170f8:	687b      	ldr	r3, [r7, #4]
   170fa:	0018      	movs	r0, r3
   170fc:	4b0a      	ldr	r3, [pc, #40]	; (17128 <checkNumber+0x38>)
   170fe:	4798      	blx	r3
   17100:	1e03      	subs	r3, r0, #0
   17102:	d109      	bne.n	17118 <checkNumber+0x28>
   17104:	687b      	ldr	r3, [r7, #4]
   17106:	0018      	movs	r0, r3
   17108:	4b08      	ldr	r3, [pc, #32]	; (1712c <checkNumber+0x3c>)
   1710a:	4798      	blx	r3
   1710c:	0003      	movs	r3, r0
   1710e:	001a      	movs	r2, r3
   17110:	4b07      	ldr	r3, [pc, #28]	; (17130 <checkNumber+0x40>)
   17112:	785b      	ldrb	r3, [r3, #1]
   17114:	429a      	cmp	r2, r3
   17116:	d201      	bcs.n	1711c <checkNumber+0x2c>
	{
		return true;
   17118:	2301      	movs	r3, #1
   1711a:	e000      	b.n	1711e <checkNumber+0x2e>
	}
	else
	{
		return false;
   1711c:	2300      	movs	r3, #0
	}
}
   1711e:	0018      	movs	r0, r3
   17120:	46bd      	mov	sp, r7
   17122:	b002      	add	sp, #8
   17124:	bd80      	pop	{r7, pc}
   17126:	46c0      	nop			; (mov r8, r8)
   17128:	00011a69 	.word	0x00011a69
   1712c:	00010de9 	.word	0x00010de9
   17130:	20000614 	.word	0x20000614

00017134 <checkNoCallTime>:

bool checkNoCallTime(void)
{
   17134:	b580      	push	{r7, lr}
   17136:	b082      	sub	sp, #8
   17138:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   1713a:	1dba      	adds	r2, r7, #6
   1713c:	1dfb      	adds	r3, r7, #7
   1713e:	0011      	movs	r1, r2
   17140:	0018      	movs	r0, r3
   17142:	4b2b      	ldr	r3, [pc, #172]	; (171f0 <checkNoCallTime+0xbc>)
   17144:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   17146:	4b2b      	ldr	r3, [pc, #172]	; (171f4 <checkNoCallTime+0xc0>)
   17148:	7a9a      	ldrb	r2, [r3, #10]
   1714a:	1dfb      	adds	r3, r7, #7
   1714c:	781b      	ldrb	r3, [r3, #0]
   1714e:	429a      	cmp	r2, r3
   17150:	d849      	bhi.n	171e6 <checkNoCallTime+0xb2>
   17152:	4b28      	ldr	r3, [pc, #160]	; (171f4 <checkNoCallTime+0xc0>)
   17154:	7b1a      	ldrb	r2, [r3, #12]
   17156:	1dfb      	adds	r3, r7, #7
   17158:	781b      	ldrb	r3, [r3, #0]
   1715a:	429a      	cmp	r2, r3
   1715c:	d343      	bcc.n	171e6 <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   1715e:	4b25      	ldr	r3, [pc, #148]	; (171f4 <checkNoCallTime+0xc0>)
   17160:	7a9a      	ldrb	r2, [r3, #10]
   17162:	4b24      	ldr	r3, [pc, #144]	; (171f4 <checkNoCallTime+0xc0>)
   17164:	7b1b      	ldrb	r3, [r3, #12]
   17166:	429a      	cmp	r2, r3
   17168:	d10f      	bne.n	1718a <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   1716a:	4b22      	ldr	r3, [pc, #136]	; (171f4 <checkNoCallTime+0xc0>)
   1716c:	7ada      	ldrb	r2, [r3, #11]
   1716e:	1dbb      	adds	r3, r7, #6
   17170:	781b      	ldrb	r3, [r3, #0]
   17172:	429a      	cmp	r2, r3
   17174:	d807      	bhi.n	17186 <checkNoCallTime+0x52>
   17176:	4b1f      	ldr	r3, [pc, #124]	; (171f4 <checkNoCallTime+0xc0>)
   17178:	7b5a      	ldrb	r2, [r3, #13]
   1717a:	1dbb      	adds	r3, r7, #6
   1717c:	781b      	ldrb	r3, [r3, #0]
   1717e:	429a      	cmp	r2, r3
   17180:	d301      	bcc.n	17186 <checkNoCallTime+0x52>
			return true;
   17182:	2301      	movs	r3, #1
   17184:	e030      	b.n	171e8 <checkNoCallTime+0xb4>
			else
			return false;
   17186:	2300      	movs	r3, #0
   17188:	e02e      	b.n	171e8 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   1718a:	4b1a      	ldr	r3, [pc, #104]	; (171f4 <checkNoCallTime+0xc0>)
   1718c:	7a9a      	ldrb	r2, [r3, #10]
   1718e:	1dfb      	adds	r3, r7, #7
   17190:	781b      	ldrb	r3, [r3, #0]
   17192:	429a      	cmp	r2, r3
   17194:	d109      	bne.n	171aa <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   17196:	4b17      	ldr	r3, [pc, #92]	; (171f4 <checkNoCallTime+0xc0>)
   17198:	7ada      	ldrb	r2, [r3, #11]
   1719a:	1dbb      	adds	r3, r7, #6
   1719c:	781b      	ldrb	r3, [r3, #0]
   1719e:	429a      	cmp	r2, r3
   171a0:	d801      	bhi.n	171a6 <checkNoCallTime+0x72>
			return true;
   171a2:	2301      	movs	r3, #1
   171a4:	e020      	b.n	171e8 <checkNoCallTime+0xb4>
			else
			return false;
   171a6:	2300      	movs	r3, #0
   171a8:	e01e      	b.n	171e8 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   171aa:	4b12      	ldr	r3, [pc, #72]	; (171f4 <checkNoCallTime+0xc0>)
   171ac:	7b1a      	ldrb	r2, [r3, #12]
   171ae:	1dfb      	adds	r3, r7, #7
   171b0:	781b      	ldrb	r3, [r3, #0]
   171b2:	429a      	cmp	r2, r3
   171b4:	d109      	bne.n	171ca <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   171b6:	4b0f      	ldr	r3, [pc, #60]	; (171f4 <checkNoCallTime+0xc0>)
   171b8:	7b5a      	ldrb	r2, [r3, #13]
   171ba:	1dbb      	adds	r3, r7, #6
   171bc:	781b      	ldrb	r3, [r3, #0]
   171be:	429a      	cmp	r2, r3
   171c0:	d301      	bcc.n	171c6 <checkNoCallTime+0x92>
			return true;
   171c2:	2301      	movs	r3, #1
   171c4:	e010      	b.n	171e8 <checkNoCallTime+0xb4>
			else
			return false;
   171c6:	2300      	movs	r3, #0
   171c8:	e00e      	b.n	171e8 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   171ca:	4b0a      	ldr	r3, [pc, #40]	; (171f4 <checkNoCallTime+0xc0>)
   171cc:	7a9a      	ldrb	r2, [r3, #10]
   171ce:	1dfb      	adds	r3, r7, #7
   171d0:	781b      	ldrb	r3, [r3, #0]
   171d2:	429a      	cmp	r2, r3
   171d4:	d207      	bcs.n	171e6 <checkNoCallTime+0xb2>
   171d6:	4b07      	ldr	r3, [pc, #28]	; (171f4 <checkNoCallTime+0xc0>)
   171d8:	7b1a      	ldrb	r2, [r3, #12]
   171da:	1dfb      	adds	r3, r7, #7
   171dc:	781b      	ldrb	r3, [r3, #0]
   171de:	429a      	cmp	r2, r3
   171e0:	d901      	bls.n	171e6 <checkNoCallTime+0xb2>
		return true;
   171e2:	2301      	movs	r3, #1
   171e4:	e000      	b.n	171e8 <checkNoCallTime+0xb4>
	}
	return false;
   171e6:	2300      	movs	r3, #0
}
   171e8:	0018      	movs	r0, r3
   171ea:	46bd      	mov	sp, r7
   171ec:	b002      	add	sp, #8
   171ee:	bd80      	pop	{r7, pc}
   171f0:	00017431 	.word	0x00017431
   171f4:	20000654 	.word	0x20000654

000171f8 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   171f8:	b580      	push	{r7, lr}
   171fa:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   171fc:	4b04      	ldr	r3, [pc, #16]	; (17210 <verifyRemoteNumber+0x18>)
   171fe:	2201      	movs	r2, #1
   17200:	2101      	movs	r1, #1
   17202:	0018      	movs	r0, r3
   17204:	4b03      	ldr	r3, [pc, #12]	; (17214 <verifyRemoteNumber+0x1c>)
   17206:	4798      	blx	r3
}
   17208:	46c0      	nop			; (mov r8, r8)
   1720a:	46bd      	mov	sp, r7
   1720c:	bd80      	pop	{r7, pc}
   1720e:	46c0      	nop			; (mov r8, r8)
   17210:	0002a6b4 	.word	0x0002a6b4
   17214:	00017219 	.word	0x00017219

00017218 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   17218:	b580      	push	{r7, lr}
   1721a:	b08e      	sub	sp, #56	; 0x38
   1721c:	af00      	add	r7, sp, #0
   1721e:	6078      	str	r0, [r7, #4]
   17220:	0008      	movs	r0, r1
   17222:	0011      	movs	r1, r2
   17224:	1cfb      	adds	r3, r7, #3
   17226:	1c02      	adds	r2, r0, #0
   17228:	701a      	strb	r2, [r3, #0]
   1722a:	1cbb      	adds	r3, r7, #2
   1722c:	1c0a      	adds	r2, r1, #0
   1722e:	701a      	strb	r2, [r3, #0]
	inCall=true;
   17230:	4b55      	ldr	r3, [pc, #340]	; (17388 <sendSMS+0x170>)
   17232:	2201      	movs	r2, #1
   17234:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   17236:	1cfb      	adds	r3, r7, #3
   17238:	781b      	ldrb	r3, [r3, #0]
   1723a:	2201      	movs	r2, #1
   1723c:	4053      	eors	r3, r2
   1723e:	b2db      	uxtb	r3, r3
   17240:	2b00      	cmp	r3, #0
   17242:	d048      	beq.n	172d6 <sendSMS+0xbe>
	{
		switch(actionType)
   17244:	4b51      	ldr	r3, [pc, #324]	; (1738c <sendSMS+0x174>)
   17246:	781b      	ldrb	r3, [r3, #0]
   17248:	3b43      	subs	r3, #67	; 0x43
   1724a:	2b12      	cmp	r3, #18
   1724c:	d900      	bls.n	17250 <sendSMS+0x38>
   1724e:	e096      	b.n	1737e <sendSMS+0x166>
   17250:	009a      	lsls	r2, r3, #2
   17252:	4b4f      	ldr	r3, [pc, #316]	; (17390 <sendSMS+0x178>)
   17254:	18d3      	adds	r3, r2, r3
   17256:	681b      	ldr	r3, [r3, #0]
   17258:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   1725a:	687b      	ldr	r3, [r7, #4]
   1725c:	0018      	movs	r0, r3
   1725e:	4b4d      	ldr	r3, [pc, #308]	; (17394 <sendSMS+0x17c>)
   17260:	4798      	blx	r3
   17262:	0003      	movs	r3, r0
   17264:	001a      	movs	r2, r3
   17266:	687b      	ldr	r3, [r7, #4]
   17268:	189a      	adds	r2, r3, r2
   1726a:	4b4b      	ldr	r3, [pc, #300]	; (17398 <sendSMS+0x180>)
   1726c:	0010      	movs	r0, r2
   1726e:	0019      	movs	r1, r3
   17270:	2307      	movs	r3, #7
   17272:	001a      	movs	r2, r3
   17274:	4b49      	ldr	r3, [pc, #292]	; (1739c <sendSMS+0x184>)
   17276:	4798      	blx	r3
			strcat(msg,STR_ON);
   17278:	687b      	ldr	r3, [r7, #4]
   1727a:	0018      	movs	r0, r3
   1727c:	4b45      	ldr	r3, [pc, #276]	; (17394 <sendSMS+0x17c>)
   1727e:	4798      	blx	r3
   17280:	0003      	movs	r3, r0
   17282:	001a      	movs	r2, r3
   17284:	687b      	ldr	r3, [r7, #4]
   17286:	189a      	adds	r2, r3, r2
   17288:	4b45      	ldr	r3, [pc, #276]	; (173a0 <sendSMS+0x188>)
   1728a:	0010      	movs	r0, r2
   1728c:	0019      	movs	r1, r3
   1728e:	2303      	movs	r3, #3
   17290:	001a      	movs	r2, r3
   17292:	4b42      	ldr	r3, [pc, #264]	; (1739c <sendSMS+0x184>)
   17294:	4798      	blx	r3
			break;
   17296:	e01e      	b.n	172d6 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   17298:	687b      	ldr	r3, [r7, #4]
   1729a:	0018      	movs	r0, r3
   1729c:	4b3d      	ldr	r3, [pc, #244]	; (17394 <sendSMS+0x17c>)
   1729e:	4798      	blx	r3
   172a0:	0003      	movs	r3, r0
   172a2:	001a      	movs	r2, r3
   172a4:	687b      	ldr	r3, [r7, #4]
   172a6:	189a      	adds	r2, r3, r2
   172a8:	4b3b      	ldr	r3, [pc, #236]	; (17398 <sendSMS+0x180>)
   172aa:	0010      	movs	r0, r2
   172ac:	0019      	movs	r1, r3
   172ae:	2307      	movs	r3, #7
   172b0:	001a      	movs	r2, r3
   172b2:	4b3a      	ldr	r3, [pc, #232]	; (1739c <sendSMS+0x184>)
   172b4:	4798      	blx	r3
			strcat(msg,STR_OFF);
   172b6:	687b      	ldr	r3, [r7, #4]
   172b8:	0018      	movs	r0, r3
   172ba:	4b36      	ldr	r3, [pc, #216]	; (17394 <sendSMS+0x17c>)
   172bc:	4798      	blx	r3
   172be:	0003      	movs	r3, r0
   172c0:	001a      	movs	r2, r3
   172c2:	687b      	ldr	r3, [r7, #4]
   172c4:	189a      	adds	r2, r3, r2
   172c6:	4b37      	ldr	r3, [pc, #220]	; (173a4 <sendSMS+0x18c>)
   172c8:	0010      	movs	r0, r2
   172ca:	0019      	movs	r1, r3
   172cc:	2304      	movs	r3, #4
   172ce:	001a      	movs	r2, r3
   172d0:	4b32      	ldr	r3, [pc, #200]	; (1739c <sendSMS+0x184>)
   172d2:	4798      	blx	r3
			break;
   172d4:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   172d6:	1cbb      	adds	r3, r7, #2
   172d8:	781b      	ldrb	r3, [r3, #0]
   172da:	2b02      	cmp	r3, #2
   172dc:	d105      	bne.n	172ea <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   172de:	2324      	movs	r3, #36	; 0x24
   172e0:	18fb      	adds	r3, r7, r3
   172e2:	0018      	movs	r0, r3
   172e4:	4b30      	ldr	r3, [pc, #192]	; (173a8 <sendSMS+0x190>)
   172e6:	4798      	blx	r3
   172e8:	e034      	b.n	17354 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   172ea:	1cbb      	adds	r3, r7, #2
   172ec:	781b      	ldrb	r3, [r3, #0]
   172ee:	2b01      	cmp	r3, #1
   172f0:	d109      	bne.n	17306 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   172f2:	4b2e      	ldr	r3, [pc, #184]	; (173ac <sendSMS+0x194>)
   172f4:	78db      	ldrb	r3, [r3, #3]
   172f6:	2b00      	cmp	r3, #0
   172f8:	d02c      	beq.n	17354 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   172fa:	2324      	movs	r3, #36	; 0x24
   172fc:	18fb      	adds	r3, r7, r3
   172fe:	0018      	movs	r0, r3
   17300:	4b2b      	ldr	r3, [pc, #172]	; (173b0 <sendSMS+0x198>)
   17302:	4798      	blx	r3
   17304:	e026      	b.n	17354 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   17306:	4b2b      	ldr	r3, [pc, #172]	; (173b4 <sendSMS+0x19c>)
   17308:	781b      	ldrb	r3, [r3, #0]
   1730a:	2b00      	cmp	r3, #0
   1730c:	d01d      	beq.n	1734a <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   1730e:	4b2a      	ldr	r3, [pc, #168]	; (173b8 <sendSMS+0x1a0>)
   17310:	223c      	movs	r2, #60	; 0x3c
   17312:	2100      	movs	r1, #0
   17314:	0018      	movs	r0, r3
   17316:	4b29      	ldr	r3, [pc, #164]	; (173bc <sendSMS+0x1a4>)
   17318:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   1731a:	4b27      	ldr	r3, [pc, #156]	; (173b8 <sendSMS+0x1a0>)
   1731c:	0019      	movs	r1, r3
   1731e:	2003      	movs	r0, #3
   17320:	4b27      	ldr	r3, [pc, #156]	; (173c0 <sendSMS+0x1a8>)
   17322:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   17324:	230c      	movs	r3, #12
   17326:	18fa      	adds	r2, r7, r3
   17328:	4b23      	ldr	r3, [pc, #140]	; (173b8 <sendSMS+0x1a0>)
   1732a:	0010      	movs	r0, r2
   1732c:	0019      	movs	r1, r3
   1732e:	2318      	movs	r3, #24
   17330:	001a      	movs	r2, r3
   17332:	4b1a      	ldr	r3, [pc, #104]	; (1739c <sendSMS+0x184>)
   17334:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   17336:	230c      	movs	r3, #12
   17338:	18fb      	adds	r3, r7, r3
   1733a:	1d1a      	adds	r2, r3, #4
   1733c:	2324      	movs	r3, #36	; 0x24
   1733e:	18fb      	adds	r3, r7, r3
   17340:	0011      	movs	r1, r2
   17342:	0018      	movs	r0, r3
   17344:	4b1f      	ldr	r3, [pc, #124]	; (173c4 <sendSMS+0x1ac>)
   17346:	4798      	blx	r3
   17348:	e004      	b.n	17354 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   1734a:	2324      	movs	r3, #36	; 0x24
   1734c:	18fb      	adds	r3, r7, r3
   1734e:	0018      	movs	r0, r3
   17350:	4b1d      	ldr	r3, [pc, #116]	; (173c8 <sendSMS+0x1b0>)
   17352:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17354:	2324      	movs	r3, #36	; 0x24
   17356:	18fb      	adds	r3, r7, r3
   17358:	2200      	movs	r2, #0
   1735a:	0019      	movs	r1, r3
   1735c:	2005      	movs	r0, #5
   1735e:	4b1b      	ldr	r3, [pc, #108]	; (173cc <sendSMS+0x1b4>)
   17360:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   17362:	687a      	ldr	r2, [r7, #4]
   17364:	2324      	movs	r3, #36	; 0x24
   17366:	18fb      	adds	r3, r7, r3
   17368:	0011      	movs	r1, r2
   1736a:	0018      	movs	r0, r3
   1736c:	4b18      	ldr	r3, [pc, #96]	; (173d0 <sendSMS+0x1b8>)
   1736e:	4798      	blx	r3
	isMsgFromAdmin = false;
   17370:	4b10      	ldr	r3, [pc, #64]	; (173b4 <sendSMS+0x19c>)
   17372:	2200      	movs	r2, #0
   17374:	701a      	strb	r2, [r3, #0]
	inCall=false;
   17376:	4b04      	ldr	r3, [pc, #16]	; (17388 <sendSMS+0x170>)
   17378:	2200      	movs	r2, #0
   1737a:	701a      	strb	r2, [r3, #0]
   1737c:	e000      	b.n	17380 <sendSMS+0x168>
			return;
   1737e:	46c0      	nop			; (mov r8, r8)
}
   17380:	46bd      	mov	sp, r7
   17382:	b00e      	add	sp, #56	; 0x38
   17384:	bd80      	pop	{r7, pc}
   17386:	46c0      	nop			; (mov r8, r8)
   17388:	20000794 	.word	0x20000794
   1738c:	2000075b 	.word	0x2000075b
   17390:	0002a71c 	.word	0x0002a71c
   17394:	00029123 	.word	0x00029123
   17398:	0002a6bc 	.word	0x0002a6bc
   1739c:	00028e5d 	.word	0x00028e5d
   173a0:	0002a650 	.word	0x0002a650
   173a4:	0002a6c4 	.word	0x0002a6c4
   173a8:	00010ac9 	.word	0x00010ac9
   173ac:	2000062c 	.word	0x2000062c
   173b0:	00010b05 	.word	0x00010b05
   173b4:	2000076f 	.word	0x2000076f
   173b8:	20000584 	.word	0x20000584
   173bc:	00028e93 	.word	0x00028e93
   173c0:	00023b7d 	.word	0x00023b7d
   173c4:	00029113 	.word	0x00029113
   173c8:	00010d1d 	.word	0x00010d1d
   173cc:	0001cbbd 	.word	0x0001cbbd
   173d0:	00012b11 	.word	0x00012b11

000173d4 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   173d4:	b580      	push	{r7, lr}
   173d6:	b082      	sub	sp, #8
   173d8:	af00      	add	r7, sp, #0
   173da:	0002      	movs	r2, r0
   173dc:	1dfb      	adds	r3, r7, #7
   173de:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   173e0:	1dfb      	adds	r3, r7, #7
   173e2:	781b      	ldrb	r3, [r3, #0]
   173e4:	2bff      	cmp	r3, #255	; 0xff
   173e6:	d103      	bne.n	173f0 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   173e8:	2041      	movs	r0, #65	; 0x41
   173ea:	4b0f      	ldr	r3, [pc, #60]	; (17428 <sendDTMFTone+0x54>)
   173ec:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   173ee:	e016      	b.n	1741e <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   173f0:	1dfb      	adds	r3, r7, #7
   173f2:	781b      	ldrb	r3, [r3, #0]
   173f4:	2b00      	cmp	r3, #0
   173f6:	d107      	bne.n	17408 <sendDTMFTone+0x34>
   173f8:	4b0c      	ldr	r3, [pc, #48]	; (1742c <sendDTMFTone+0x58>)
   173fa:	78db      	ldrb	r3, [r3, #3]
   173fc:	2b00      	cmp	r3, #0
   173fe:	d003      	beq.n	17408 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   17400:	2044      	movs	r0, #68	; 0x44
   17402:	4b09      	ldr	r3, [pc, #36]	; (17428 <sendDTMFTone+0x54>)
   17404:	4798      	blx	r3
}
   17406:	e00a      	b.n	1741e <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17408:	1dfb      	adds	r3, r7, #7
   1740a:	781b      	ldrb	r3, [r3, #0]
   1740c:	2b01      	cmp	r3, #1
   1740e:	d106      	bne.n	1741e <sendDTMFTone+0x4a>
   17410:	4b06      	ldr	r3, [pc, #24]	; (1742c <sendDTMFTone+0x58>)
   17412:	78db      	ldrb	r3, [r3, #3]
   17414:	2b00      	cmp	r3, #0
   17416:	d002      	beq.n	1741e <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17418:	2043      	movs	r0, #67	; 0x43
   1741a:	4b03      	ldr	r3, [pc, #12]	; (17428 <sendDTMFTone+0x54>)
   1741c:	4798      	blx	r3
}
   1741e:	46c0      	nop			; (mov r8, r8)
   17420:	46bd      	mov	sp, r7
   17422:	b002      	add	sp, #8
   17424:	bd80      	pop	{r7, pc}
   17426:	46c0      	nop			; (mov r8, r8)
   17428:	00012f85 	.word	0x00012f85
   1742c:	2000062c 	.word	0x2000062c

00017430 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   17430:	b580      	push	{r7, lr}
   17432:	b082      	sub	sp, #8
   17434:	af00      	add	r7, sp, #0
   17436:	6078      	str	r0, [r7, #4]
   17438:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   1743a:	4b09      	ldr	r3, [pc, #36]	; (17460 <getSystemTime+0x30>)
   1743c:	4798      	blx	r3
   1743e:	1e03      	subs	r3, r0, #0
   17440:	d109      	bne.n	17456 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   17442:	4b08      	ldr	r3, [pc, #32]	; (17464 <getSystemTime+0x34>)
   17444:	78db      	ldrb	r3, [r3, #3]
   17446:	b2da      	uxtb	r2, r3
   17448:	687b      	ldr	r3, [r7, #4]
   1744a:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   1744c:	4b05      	ldr	r3, [pc, #20]	; (17464 <getSystemTime+0x34>)
   1744e:	791b      	ldrb	r3, [r3, #4]
   17450:	b2da      	uxtb	r2, r3
   17452:	683b      	ldr	r3, [r7, #0]
   17454:	701a      	strb	r2, [r3, #0]
	}
}
   17456:	46c0      	nop			; (mov r8, r8)
   17458:	46bd      	mov	sp, r7
   1745a:	b002      	add	sp, #8
   1745c:	bd80      	pop	{r7, pc}
   1745e:	46c0      	nop			; (mov r8, r8)
   17460:	00013165 	.word	0x00013165
   17464:	20000688 	.word	0x20000688

00017468 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   17468:	b590      	push	{r4, r7, lr}
   1746a:	b0d7      	sub	sp, #348	; 0x15c
   1746c:	af02      	add	r7, sp, #8
   1746e:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   17470:	2300      	movs	r3, #0
   17472:	22a6      	movs	r2, #166	; 0xa6
   17474:	0052      	lsls	r2, r2, #1
   17476:	18ba      	adds	r2, r7, r2
   17478:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
   1747a:	4bd7      	ldr	r3, [pc, #860]	; (177d8 <vTask_GSM_service+0x370>)
   1747c:	4ad6      	ldr	r2, [pc, #856]	; (177d8 <vTask_GSM_service+0x370>)
   1747e:	6812      	ldr	r2, [r2, #0]
   17480:	2180      	movs	r1, #128	; 0x80
   17482:	0249      	lsls	r1, r1, #9
   17484:	430a      	orrs	r2, r1
   17486:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   17488:	2398      	movs	r3, #152	; 0x98
   1748a:	005b      	lsls	r3, r3, #1
   1748c:	18fb      	adds	r3, r7, r3
   1748e:	0018      	movs	r0, r3
   17490:	4bd2      	ldr	r3, [pc, #840]	; (177dc <vTask_GSM_service+0x374>)
   17492:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   17494:	2398      	movs	r3, #152	; 0x98
   17496:	005b      	lsls	r3, r3, #1
   17498:	18fb      	adds	r3, r7, r3
   1749a:	2200      	movs	r2, #0
   1749c:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   1749e:	2398      	movs	r3, #152	; 0x98
   174a0:	005b      	lsls	r3, r3, #1
   174a2:	18fb      	adds	r3, r7, r3
   174a4:	2200      	movs	r2, #0
   174a6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   174a8:	2398      	movs	r3, #152	; 0x98
   174aa:	005b      	lsls	r3, r3, #1
   174ac:	18fb      	adds	r3, r7, r3
   174ae:	0019      	movs	r1, r3
   174b0:	201b      	movs	r0, #27
   174b2:	4bcb      	ldr	r3, [pc, #812]	; (177e0 <vTask_GSM_service+0x378>)
   174b4:	4798      	blx	r3
	
	gsm_init();
   174b6:	4bcb      	ldr	r3, [pc, #812]	; (177e4 <vTask_GSM_service+0x37c>)
   174b8:	4798      	blx	r3
	
	initialized = false;
   174ba:	4bcb      	ldr	r3, [pc, #812]	; (177e8 <vTask_GSM_service+0x380>)
   174bc:	2200      	movs	r2, #0
   174be:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   174c0:	4bca      	ldr	r3, [pc, #808]	; (177ec <vTask_GSM_service+0x384>)
   174c2:	2200      	movs	r2, #0
   174c4:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   174c6:	4bca      	ldr	r3, [pc, #808]	; (177f0 <vTask_GSM_service+0x388>)
   174c8:	2200      	movs	r2, #0
   174ca:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
   174cc:	234c      	movs	r3, #76	; 0x4c
   174ce:	33ff      	adds	r3, #255	; 0xff
   174d0:	18fb      	adds	r3, r7, r3
   174d2:	2200      	movs	r2, #0
   174d4:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
   174d6:	23a5      	movs	r3, #165	; 0xa5
   174d8:	005b      	lsls	r3, r3, #1
   174da:	18fb      	adds	r3, r7, r3
   174dc:	2200      	movs	r2, #0
   174de:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
   174e0:	4bc4      	ldr	r3, [pc, #784]	; (177f4 <vTask_GSM_service+0x38c>)
   174e2:	2200      	movs	r2, #0
   174e4:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   174e6:	4bc4      	ldr	r3, [pc, #784]	; (177f8 <vTask_GSM_service+0x390>)
   174e8:	2205      	movs	r2, #5
   174ea:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   174ec:	4bc3      	ldr	r3, [pc, #780]	; (177fc <vTask_GSM_service+0x394>)
   174ee:	2200      	movs	r2, #0
   174f0:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   174f2:	4bc3      	ldr	r3, [pc, #780]	; (17800 <vTask_GSM_service+0x398>)
   174f4:	2291      	movs	r2, #145	; 0x91
   174f6:	0092      	lsls	r2, r2, #2
   174f8:	801a      	strh	r2, [r3, #0]
	nr = 0;
   174fa:	4bc2      	ldr	r3, [pc, #776]	; (17804 <vTask_GSM_service+0x39c>)
   174fc:	2200      	movs	r2, #0
   174fe:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   17500:	4bc1      	ldr	r3, [pc, #772]	; (17808 <vTask_GSM_service+0x3a0>)
   17502:	224e      	movs	r2, #78	; 0x4e
   17504:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   17506:	4bc1      	ldr	r3, [pc, #772]	; (1780c <vTask_GSM_service+0x3a4>)
   17508:	224e      	movs	r2, #78	; 0x4e
   1750a:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   1750c:	4bc0      	ldr	r3, [pc, #768]	; (17810 <vTask_GSM_service+0x3a8>)
   1750e:	2200      	movs	r2, #0
   17510:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   17512:	4bc0      	ldr	r3, [pc, #768]	; (17814 <vTask_GSM_service+0x3ac>)
   17514:	2200      	movs	r2, #0
   17516:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   17518:	4bbf      	ldr	r3, [pc, #764]	; (17818 <vTask_GSM_service+0x3b0>)
   1751a:	2201      	movs	r2, #1
   1751c:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   1751e:	4bbf      	ldr	r3, [pc, #764]	; (1781c <vTask_GSM_service+0x3b4>)
   17520:	2200      	movs	r2, #0
   17522:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   17524:	4bbe      	ldr	r3, [pc, #760]	; (17820 <vTask_GSM_service+0x3b8>)
   17526:	2200      	movs	r2, #0
   17528:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   1752a:	4bbe      	ldr	r3, [pc, #760]	; (17824 <vTask_GSM_service+0x3bc>)
   1752c:	224e      	movs	r2, #78	; 0x4e
   1752e:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   17530:	4bbd      	ldr	r3, [pc, #756]	; (17828 <vTask_GSM_service+0x3c0>)
   17532:	2200      	movs	r2, #0
   17534:	701a      	strb	r2, [r3, #0]
	retries=0;
   17536:	4bbd      	ldr	r3, [pc, #756]	; (1782c <vTask_GSM_service+0x3c4>)
   17538:	2200      	movs	r2, #0
   1753a:	701a      	strb	r2, [r3, #0]
	
	mcuWakeUpFromSleep=false;
   1753c:	4bbc      	ldr	r3, [pc, #752]	; (17830 <vTask_GSM_service+0x3c8>)
   1753e:	2200      	movs	r2, #0
   17540:	701a      	strb	r2, [r3, #0]
	isGSMModuleAwake=false;
   17542:	4bbc      	ldr	r3, [pc, #752]	; (17834 <vTask_GSM_service+0x3cc>)
   17544:	2200      	movs	r2, #0
   17546:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   17548:	2101      	movs	r1, #1
   1754a:	2014      	movs	r0, #20
   1754c:	4bba      	ldr	r3, [pc, #744]	; (17838 <vTask_GSM_service+0x3d0>)
   1754e:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   17550:	4bba      	ldr	r3, [pc, #744]	; (1783c <vTask_GSM_service+0x3d4>)
   17552:	2200      	movs	r2, #0
   17554:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   17556:	2000      	movs	r0, #0
   17558:	4bb9      	ldr	r3, [pc, #740]	; (17840 <vTask_GSM_service+0x3d8>)
   1755a:	4798      	blx	r3
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1755c:	4bb9      	ldr	r3, [pc, #740]	; (17844 <vTask_GSM_service+0x3dc>)
   1755e:	785b      	ldrb	r3, [r3, #1]
   17560:	2b00      	cmp	r3, #0
   17562:	d002      	beq.n	1756a <vTask_GSM_service+0x102>
	{
		zeroPressed=false;
   17564:	4bb8      	ldr	r3, [pc, #736]	; (17848 <vTask_GSM_service+0x3e0>)
   17566:	2200      	movs	r2, #0
   17568:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1756a:	4bb6      	ldr	r3, [pc, #728]	; (17844 <vTask_GSM_service+0x3dc>)
   1756c:	78db      	ldrb	r3, [r3, #3]
   1756e:	2b00      	cmp	r3, #0
   17570:	d012      	beq.n	17598 <vTask_GSM_service+0x130>
	{
		m2mAck=false;
   17572:	4bb6      	ldr	r3, [pc, #728]	; (1784c <vTask_GSM_service+0x3e4>)
   17574:	2200      	movs	r2, #0
   17576:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   17578:	4bb5      	ldr	r3, [pc, #724]	; (17850 <vTask_GSM_service+0x3e8>)
   1757a:	2200      	movs	r2, #0
   1757c:	701a      	strb	r2, [r3, #0]
   1757e:	4bb4      	ldr	r3, [pc, #720]	; (17850 <vTask_GSM_service+0x3e8>)
   17580:	781a      	ldrb	r2, [r3, #0]
   17582:	4bb4      	ldr	r3, [pc, #720]	; (17854 <vTask_GSM_service+0x3ec>)
   17584:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   17586:	4bb4      	ldr	r3, [pc, #720]	; (17858 <vTask_GSM_service+0x3f0>)
   17588:	2200      	movs	r2, #0
   1758a:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   1758c:	4bb3      	ldr	r3, [pc, #716]	; (1785c <vTask_GSM_service+0x3f4>)
   1758e:	2200      	movs	r2, #0
   17590:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   17592:	4bb3      	ldr	r3, [pc, #716]	; (17860 <vTask_GSM_service+0x3f8>)
   17594:	2200      	movs	r2, #0
   17596:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   17598:	201b      	movs	r0, #27
   1759a:	4bb2      	ldr	r3, [pc, #712]	; (17864 <vTask_GSM_service+0x3fc>)
   1759c:	4798      	blx	r3
   1759e:	1e03      	subs	r3, r0, #0
   175a0:	d01e      	beq.n	175e0 <vTask_GSM_service+0x178>
	{
		boolGsm_config_flag			=false;
   175a2:	234c      	movs	r3, #76	; 0x4c
   175a4:	33ff      	adds	r3, #255	; 0xff
   175a6:	18fb      	adds	r3, r7, r3
   175a8:	2200      	movs	r2, #0
   175aa:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   175ac:	23a5      	movs	r3, #165	; 0xa5
   175ae:	005b      	lsls	r3, r3, #1
   175b0:	18fb      	adds	r3, r7, r3
   175b2:	2200      	movs	r2, #0
   175b4:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   175b6:	4bac      	ldr	r3, [pc, #688]	; (17868 <vTask_GSM_service+0x400>)
   175b8:	4aab      	ldr	r2, [pc, #684]	; (17868 <vTask_GSM_service+0x400>)
   175ba:	6812      	ldr	r2, [r2, #0]
   175bc:	2180      	movs	r1, #128	; 0x80
   175be:	0249      	lsls	r1, r1, #9
   175c0:	430a      	orrs	r2, r1
   175c2:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   175c4:	4ba9      	ldr	r3, [pc, #676]	; (1786c <vTask_GSM_service+0x404>)
   175c6:	0018      	movs	r0, r3
   175c8:	4ba9      	ldr	r3, [pc, #676]	; (17870 <vTask_GSM_service+0x408>)
   175ca:	4798      	blx	r3
		GSM_PWR_OFF;
   175cc:	4ba6      	ldr	r3, [pc, #664]	; (17868 <vTask_GSM_service+0x400>)
   175ce:	4aa6      	ldr	r2, [pc, #664]	; (17868 <vTask_GSM_service+0x400>)
   175d0:	6812      	ldr	r2, [r2, #0]
   175d2:	49a8      	ldr	r1, [pc, #672]	; (17874 <vTask_GSM_service+0x40c>)
   175d4:	400a      	ands	r2, r1
   175d6:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   175d8:	4ba7      	ldr	r3, [pc, #668]	; (17878 <vTask_GSM_service+0x410>)
   175da:	0018      	movs	r0, r3
   175dc:	4ba4      	ldr	r3, [pc, #656]	; (17870 <vTask_GSM_service+0x408>)
   175de:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
   175e0:	201b      	movs	r0, #27
   175e2:	4ba0      	ldr	r3, [pc, #640]	; (17864 <vTask_GSM_service+0x3fc>)
   175e4:	4798      	blx	r3
   175e6:	1e03      	subs	r3, r0, #0
   175e8:	d101      	bne.n	175ee <vTask_GSM_service+0x186>
   175ea:	f000 fcc5 	bl	17f78 <vTask_GSM_service+0xb10>
		{
			if (boolGsm_config_flag == false)
   175ee:	234c      	movs	r3, #76	; 0x4c
   175f0:	33ff      	adds	r3, #255	; 0xff
   175f2:	18fb      	adds	r3, r7, r3
   175f4:	781b      	ldrb	r3, [r3, #0]
   175f6:	2201      	movs	r2, #1
   175f8:	4053      	eors	r3, r2
   175fa:	b2db      	uxtb	r3, r3
   175fc:	2b00      	cmp	r3, #0
   175fe:	d038      	beq.n	17672 <vTask_GSM_service+0x20a>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   17600:	4b9e      	ldr	r3, [pc, #632]	; (1787c <vTask_GSM_service+0x414>)
   17602:	4798      	blx	r3
   17604:	0003      	movs	r3, r0
   17606:	2b09      	cmp	r3, #9
   17608:	d12d      	bne.n	17666 <vTask_GSM_service+0x1fe>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   1760a:	4b9d      	ldr	r3, [pc, #628]	; (17880 <vTask_GSM_service+0x418>)
   1760c:	4798      	blx	r3
   1760e:	1e03      	subs	r3, r0, #0
   17610:	d123      	bne.n	1765a <vTask_GSM_service+0x1f2>
					{
						for (uint8_t i=0;i<20;i++)
   17612:	234a      	movs	r3, #74	; 0x4a
   17614:	33ff      	adds	r3, #255	; 0xff
   17616:	18fb      	adds	r3, r7, r3
   17618:	2200      	movs	r2, #0
   1761a:	701a      	strb	r2, [r3, #0]
   1761c:	e011      	b.n	17642 <vTask_GSM_service+0x1da>
						{
							Signal_Strength = gsm_getsignalstrength();
   1761e:	4b99      	ldr	r3, [pc, #612]	; (17884 <vTask_GSM_service+0x41c>)
   17620:	4798      	blx	r3
   17622:	0003      	movs	r3, r0
   17624:	001a      	movs	r2, r3
   17626:	4b73      	ldr	r3, [pc, #460]	; (177f4 <vTask_GSM_service+0x38c>)
   17628:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
   1762a:	2032      	movs	r0, #50	; 0x32
   1762c:	4b90      	ldr	r3, [pc, #576]	; (17870 <vTask_GSM_service+0x408>)
   1762e:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
   17630:	234a      	movs	r3, #74	; 0x4a
   17632:	33ff      	adds	r3, #255	; 0xff
   17634:	18fb      	adds	r3, r7, r3
   17636:	781a      	ldrb	r2, [r3, #0]
   17638:	234a      	movs	r3, #74	; 0x4a
   1763a:	33ff      	adds	r3, #255	; 0xff
   1763c:	18fb      	adds	r3, r7, r3
   1763e:	3201      	adds	r2, #1
   17640:	701a      	strb	r2, [r3, #0]
   17642:	234a      	movs	r3, #74	; 0x4a
   17644:	33ff      	adds	r3, #255	; 0xff
   17646:	18fb      	adds	r3, r7, r3
   17648:	781b      	ldrb	r3, [r3, #0]
   1764a:	2b13      	cmp	r3, #19
   1764c:	d9e7      	bls.n	1761e <vTask_GSM_service+0x1b6>
						}
						boolGsm_config_flag = true;
   1764e:	234c      	movs	r3, #76	; 0x4c
   17650:	33ff      	adds	r3, #255	; 0xff
   17652:	18fb      	adds	r3, r7, r3
   17654:	2201      	movs	r2, #1
   17656:	701a      	strb	r2, [r3, #0]
   17658:	e7c2      	b.n	175e0 <vTask_GSM_service+0x178>
					}
					else
					{
						boolGsm_config_flag = false;
   1765a:	234c      	movs	r3, #76	; 0x4c
   1765c:	33ff      	adds	r3, #255	; 0xff
   1765e:	18fb      	adds	r3, r7, r3
   17660:	2200      	movs	r2, #0
   17662:	701a      	strb	r2, [r3, #0]
   17664:	e7bc      	b.n	175e0 <vTask_GSM_service+0x178>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   17666:	23fa      	movs	r3, #250	; 0xfa
   17668:	00db      	lsls	r3, r3, #3
   1766a:	0018      	movs	r0, r3
   1766c:	4b80      	ldr	r3, [pc, #512]	; (17870 <vTask_GSM_service+0x408>)
   1766e:	4798      	blx	r3
   17670:	e7b6      	b.n	175e0 <vTask_GSM_service+0x178>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   17672:	4b6f      	ldr	r3, [pc, #444]	; (17830 <vTask_GSM_service+0x3c8>)
   17674:	781b      	ldrb	r3, [r3, #0]
   17676:	b2db      	uxtb	r3, r3
   17678:	2b00      	cmp	r3, #0
   1767a:	d005      	beq.n	17688 <vTask_GSM_service+0x220>
				{
					mcuWakeUpFromSleep=false;
   1767c:	4b6c      	ldr	r3, [pc, #432]	; (17830 <vTask_GSM_service+0x3c8>)
   1767e:	2200      	movs	r2, #0
   17680:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   17682:	2000      	movs	r0, #0
   17684:	4b6e      	ldr	r3, [pc, #440]	; (17840 <vTask_GSM_service+0x3d8>)
   17686:	4798      	blx	r3
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   17688:	4b7f      	ldr	r3, [pc, #508]	; (17888 <vTask_GSM_service+0x420>)
   1768a:	799b      	ldrb	r3, [r3, #6]
   1768c:	2b00      	cmp	r3, #0
   1768e:	d034      	beq.n	176fa <vTask_GSM_service+0x292>
				{
					char uResp_SMS[30];
					memset(uResp_SMS, '\0', sizeof(uResp_SMS));
   17690:	2388      	movs	r3, #136	; 0x88
   17692:	005b      	lsls	r3, r3, #1
   17694:	18fb      	adds	r3, r7, r3
   17696:	221e      	movs	r2, #30
   17698:	2100      	movs	r1, #0
   1769a:	0018      	movs	r0, r3
   1769c:	4b7b      	ldr	r3, [pc, #492]	; (1788c <vTask_GSM_service+0x424>)
   1769e:	4798      	blx	r3
					/*Firmware update Completed Successfully*/
					if(bootloader_parameter.firmware_update_error_code==0)
   176a0:	4b79      	ldr	r3, [pc, #484]	; (17888 <vTask_GSM_service+0x420>)
   176a2:	79db      	ldrb	r3, [r3, #7]
   176a4:	2b00      	cmp	r3, #0
   176a6:	d10a      	bne.n	176be <vTask_GSM_service+0x256>
					{
						strcpy(uResp_SMS,"F/W Update Completed");
   176a8:	2388      	movs	r3, #136	; 0x88
   176aa:	005b      	lsls	r3, r3, #1
   176ac:	18fb      	adds	r3, r7, r3
   176ae:	4a78      	ldr	r2, [pc, #480]	; (17890 <vTask_GSM_service+0x428>)
   176b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   176b2:	c313      	stmia	r3!, {r0, r1, r4}
   176b4:	ca03      	ldmia	r2!, {r0, r1}
   176b6:	c303      	stmia	r3!, {r0, r1}
   176b8:	7812      	ldrb	r2, [r2, #0]
   176ba:	701a      	strb	r2, [r3, #0]
   176bc:	e009      	b.n	176d2 <vTask_GSM_service+0x26a>
					}
					/*Error in Firmware update*/
					else
					{
						strcpy(uResp_SMS,"F/W Update Error");
   176be:	2388      	movs	r3, #136	; 0x88
   176c0:	005b      	lsls	r3, r3, #1
   176c2:	18fb      	adds	r3, r7, r3
   176c4:	4a73      	ldr	r2, [pc, #460]	; (17894 <vTask_GSM_service+0x42c>)
   176c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   176c8:	c313      	stmia	r3!, {r0, r1, r4}
   176ca:	6811      	ldr	r1, [r2, #0]
   176cc:	6019      	str	r1, [r3, #0]
   176ce:	7912      	ldrb	r2, [r2, #4]
   176d0:	711a      	strb	r2, [r3, #4]
					}
				
					if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   176d2:	4b6d      	ldr	r3, [pc, #436]	; (17888 <vTask_GSM_service+0x420>)
   176d4:	7b1b      	ldrb	r3, [r3, #12]
   176d6:	2b30      	cmp	r3, #48	; 0x30
   176d8:	d008      	beq.n	176ec <vTask_GSM_service+0x284>
					{
						gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   176da:	2388      	movs	r3, #136	; 0x88
   176dc:	005b      	lsls	r3, r3, #1
   176de:	18fa      	adds	r2, r7, r3
   176e0:	4b6d      	ldr	r3, [pc, #436]	; (17898 <vTask_GSM_service+0x430>)
   176e2:	0011      	movs	r1, r2
   176e4:	0018      	movs	r0, r3
   176e6:	4b6d      	ldr	r3, [pc, #436]	; (1789c <vTask_GSM_service+0x434>)
   176e8:	4798      	blx	r3
   176ea:	e006      	b.n	176fa <vTask_GSM_service+0x292>
					}
					else
					{
						gsm_send_sms(ADMIN_1_MOBILE_NUMBER_PAGE,uResp_SMS);
   176ec:	2388      	movs	r3, #136	; 0x88
   176ee:	005b      	lsls	r3, r3, #1
   176f0:	18fb      	adds	r3, r7, r3
   176f2:	0019      	movs	r1, r3
   176f4:	2003      	movs	r0, #3
   176f6:	4b69      	ldr	r3, [pc, #420]	; (1789c <vTask_GSM_service+0x434>)
   176f8:	4798      	blx	r3
					}
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   176fa:	23a5      	movs	r3, #165	; 0xa5
   176fc:	005b      	lsls	r3, r3, #1
   176fe:	18fb      	adds	r3, r7, r3
   17700:	781b      	ldrb	r3, [r3, #0]
   17702:	2201      	movs	r2, #1
   17704:	4053      	eors	r3, r2
   17706:	b2db      	uxtb	r3, r3
   17708:	2b00      	cmp	r3, #0
   1770a:	d01a      	beq.n	17742 <vTask_GSM_service+0x2da>
   1770c:	234c      	movs	r3, #76	; 0x4c
   1770e:	33ff      	adds	r3, #255	; 0xff
   17710:	18fb      	adds	r3, r7, r3
   17712:	781b      	ldrb	r3, [r3, #0]
   17714:	2b00      	cmp	r3, #0
   17716:	d014      	beq.n	17742 <vTask_GSM_service+0x2da>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17718:	4b61      	ldr	r3, [pc, #388]	; (178a0 <vTask_GSM_service+0x438>)
   1771a:	4798      	blx	r3
   1771c:	1e03      	subs	r3, r0, #0
   1771e:	d109      	bne.n	17734 <vTask_GSM_service+0x2cc>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   17720:	23a5      	movs	r3, #165	; 0xa5
   17722:	005b      	lsls	r3, r3, #1
   17724:	18fb      	adds	r3, r7, r3
   17726:	2201      	movs	r2, #1
   17728:	701a      	strb	r2, [r3, #0]
						initialized = true;
   1772a:	4b2f      	ldr	r3, [pc, #188]	; (177e8 <vTask_GSM_service+0x380>)
   1772c:	2201      	movs	r2, #1
   1772e:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   17730:	f000 fc47 	bl	17fc2 <vTask_GSM_service+0xb5a>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   17734:	23a5      	movs	r3, #165	; 0xa5
   17736:	005b      	lsls	r3, r3, #1
   17738:	18fb      	adds	r3, r7, r3
   1773a:	2200      	movs	r2, #0
   1773c:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   1773e:	f000 fc40 	bl	17fc2 <vTask_GSM_service+0xb5a>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   17742:	4b31      	ldr	r3, [pc, #196]	; (17808 <vTask_GSM_service+0x3a0>)
   17744:	781b      	ldrb	r3, [r3, #0]
   17746:	b2db      	uxtb	r3, r3
   17748:	2b4e      	cmp	r3, #78	; 0x4e
   1774a:	d000      	beq.n	1774e <vTask_GSM_service+0x2e6>
   1774c:	e0b8      	b.n	178c0 <vTask_GSM_service+0x458>
   1774e:	4b2f      	ldr	r3, [pc, #188]	; (1780c <vTask_GSM_service+0x3a4>)
   17750:	781b      	ldrb	r3, [r3, #0]
   17752:	b2db      	uxtb	r3, r3
   17754:	2b4e      	cmp	r3, #78	; 0x4e
   17756:	d000      	beq.n	1775a <vTask_GSM_service+0x2f2>
   17758:	e0b2      	b.n	178c0 <vTask_GSM_service+0x458>
					{
						if(!getACPowerState() &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   1775a:	4b52      	ldr	r3, [pc, #328]	; (178a4 <vTask_GSM_service+0x43c>)
   1775c:	4798      	blx	r3
   1775e:	0003      	movs	r3, r0
   17760:	001a      	movs	r2, r3
   17762:	2301      	movs	r3, #1
   17764:	4053      	eors	r3, r2
   17766:	b2db      	uxtb	r3, r3
   17768:	2b00      	cmp	r3, #0
   1776a:	d00a      	beq.n	17782 <vTask_GSM_service+0x31a>
   1776c:	4b31      	ldr	r3, [pc, #196]	; (17834 <vTask_GSM_service+0x3cc>)
   1776e:	781b      	ldrb	r3, [r3, #0]
   17770:	b2db      	uxtb	r3, r3
   17772:	2b00      	cmp	r3, #0
   17774:	d005      	beq.n	17782 <vTask_GSM_service+0x31a>
   17776:	4b4c      	ldr	r3, [pc, #304]	; (178a8 <vTask_GSM_service+0x440>)
   17778:	4798      	blx	r3
   1777a:	1e03      	subs	r3, r0, #0
   1777c:	d001      	beq.n	17782 <vTask_GSM_service+0x31a>
						{
							gsm_module_enter_sleep();
   1777e:	4b4b      	ldr	r3, [pc, #300]	; (178ac <vTask_GSM_service+0x444>)
   17780:	4798      	blx	r3
						}

						if(isGSMModuleAwake)
   17782:	4b2c      	ldr	r3, [pc, #176]	; (17834 <vTask_GSM_service+0x3cc>)
   17784:	781b      	ldrb	r3, [r3, #0]
   17786:	b2db      	uxtb	r3, r3
   17788:	2b00      	cmp	r3, #0
   1778a:	d017      	beq.n	177bc <vTask_GSM_service+0x354>
						{
							////Update network
							if (xTaskGetTickCount() - network_update_time>= (1*60*1000))
   1778c:	4b48      	ldr	r3, [pc, #288]	; (178b0 <vTask_GSM_service+0x448>)
   1778e:	4798      	blx	r3
   17790:	0002      	movs	r2, r0
   17792:	23a6      	movs	r3, #166	; 0xa6
   17794:	005b      	lsls	r3, r3, #1
   17796:	18fb      	adds	r3, r7, r3
   17798:	681b      	ldr	r3, [r3, #0]
   1779a:	1ad3      	subs	r3, r2, r3
   1779c:	4a45      	ldr	r2, [pc, #276]	; (178b4 <vTask_GSM_service+0x44c>)
   1779e:	4293      	cmp	r3, r2
   177a0:	d90c      	bls.n	177bc <vTask_GSM_service+0x354>
							{
								network_update_time = xTaskGetTickCount();
   177a2:	4b43      	ldr	r3, [pc, #268]	; (178b0 <vTask_GSM_service+0x448>)
   177a4:	4798      	blx	r3
   177a6:	0003      	movs	r3, r0
   177a8:	22a6      	movs	r2, #166	; 0xa6
   177aa:	0052      	lsls	r2, r2, #1
   177ac:	18ba      	adds	r2, r7, r2
   177ae:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   177b0:	4b34      	ldr	r3, [pc, #208]	; (17884 <vTask_GSM_service+0x41c>)
   177b2:	4798      	blx	r3
   177b4:	0003      	movs	r3, r0
   177b6:	001a      	movs	r2, r3
   177b8:	4b0e      	ldr	r3, [pc, #56]	; (177f4 <vTask_GSM_service+0x38c>)
   177ba:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   177bc:	4b3e      	ldr	r3, [pc, #248]	; (178b8 <vTask_GSM_service+0x450>)
   177be:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   177c0:	4b17      	ldr	r3, [pc, #92]	; (17820 <vTask_GSM_service+0x3b8>)
   177c2:	781b      	ldrb	r3, [r3, #0]
   177c4:	2b00      	cmp	r3, #0
   177c6:	d104      	bne.n	177d2 <vTask_GSM_service+0x36a>
   177c8:	4b23      	ldr	r3, [pc, #140]	; (17858 <vTask_GSM_service+0x3f0>)
   177ca:	781b      	ldrb	r3, [r3, #0]
   177cc:	2b00      	cmp	r3, #0
   177ce:	d100      	bne.n	177d2 <vTask_GSM_service+0x36a>
   177d0:	e0bf      	b.n	17952 <vTask_GSM_service+0x4ea>
						{
							operateOnStagedEvent();
   177d2:	4b3a      	ldr	r3, [pc, #232]	; (178bc <vTask_GSM_service+0x454>)
   177d4:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   177d6:	e0bc      	b.n	17952 <vTask_GSM_service+0x4ea>
   177d8:	41004480 	.word	0x41004480
   177dc:	0001412d 	.word	0x0001412d
   177e0:	00022ff1 	.word	0x00022ff1
   177e4:	0001214d 	.word	0x0001214d
   177e8:	20000795 	.word	0x20000795
   177ec:	20000794 	.word	0x20000794
   177f0:	20000777 	.word	0x20000777
   177f4:	20000781 	.word	0x20000781
   177f8:	200007d1 	.word	0x200007d1
   177fc:	20000861 	.word	0x20000861
   17800:	2000075c 	.word	0x2000075c
   17804:	200006d8 	.word	0x200006d8
   17808:	200007d8 	.word	0x200007d8
   1780c:	20000787 	.word	0x20000787
   17810:	20000796 	.word	0x20000796
   17814:	2000073c 	.word	0x2000073c
   17818:	2000076a 	.word	0x2000076a
   1781c:	2000076f 	.word	0x2000076f
   17820:	200007ce 	.word	0x200007ce
   17824:	2000076d 	.word	0x2000076d
   17828:	20000790 	.word	0x20000790
   1782c:	200006d9 	.word	0x200006d9
   17830:	20000840 	.word	0x20000840
   17834:	20000684 	.word	0x20000684
   17838:	00014195 	.word	0x00014195
   1783c:	2000022c 	.word	0x2000022c
   17840:	00012301 	.word	0x00012301
   17844:	2000062c 	.word	0x2000062c
   17848:	2000080b 	.word	0x2000080b
   1784c:	20000720 	.word	0x20000720
   17850:	20000721 	.word	0x20000721
   17854:	200007cf 	.word	0x200007cf
   17858:	20000786 	.word	0x20000786
   1785c:	2000073b 	.word	0x2000073b
   17860:	200007cc 	.word	0x200007cc
   17864:	00014151 	.word	0x00014151
   17868:	41004490 	.word	0x41004490
   1786c:	00000bb8 	.word	0x00000bb8
   17870:	0001ff69 	.word	0x0001ff69
   17874:	fffeffff 	.word	0xfffeffff
   17878:	00001388 	.word	0x00001388
   1787c:	000125fd 	.word	0x000125fd
   17880:	00013319 	.word	0x00013319
   17884:	000128c9 	.word	0x000128c9
   17888:	200005f8 	.word	0x200005f8
   1788c:	00028e93 	.word	0x00028e93
   17890:	0002a6c8 	.word	0x0002a6c8
   17894:	0002a6e0 	.word	0x0002a6e0
   17898:	20000604 	.word	0x20000604
   1789c:	00012b11 	.word	0x00012b11
   178a0:	000126e9 	.word	0x000126e9
   178a4:	0001ab65 	.word	0x0001ab65
   178a8:	00012385 	.word	0x00012385
   178ac:	00012365 	.word	0x00012365
   178b0:	000202cd 	.word	0x000202cd
   178b4:	0000ea5f 	.word	0x0000ea5f
   178b8:	000141e9 	.word	0x000141e9
   178bc:	00014229 	.word	0x00014229
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   178c0:	4bd7      	ldr	r3, [pc, #860]	; (17c20 <vTask_GSM_service+0x7b8>)
   178c2:	781b      	ldrb	r3, [r3, #0]
   178c4:	b2db      	uxtb	r3, r3
   178c6:	2b49      	cmp	r3, #73	; 0x49
   178c8:	d004      	beq.n	178d4 <vTask_GSM_service+0x46c>
   178ca:	4bd5      	ldr	r3, [pc, #852]	; (17c20 <vTask_GSM_service+0x7b8>)
   178cc:	781b      	ldrb	r3, [r3, #0]
   178ce:	b2db      	uxtb	r3, r3
   178d0:	2b52      	cmp	r3, #82	; 0x52
   178d2:	d13f      	bne.n	17954 <vTask_GSM_service+0x4ec>
					{
						if (callTimerExpire())
   178d4:	4bd3      	ldr	r3, [pc, #844]	; (17c24 <vTask_GSM_service+0x7bc>)
   178d6:	4798      	blx	r3
   178d8:	1e03      	subs	r3, r0, #0
   178da:	d00e      	beq.n	178fa <vTask_GSM_service+0x492>
						{
							char t1 = actionType;
   178dc:	2346      	movs	r3, #70	; 0x46
   178de:	33ff      	adds	r3, #255	; 0xff
   178e0:	18fb      	adds	r3, r7, r3
   178e2:	4ad1      	ldr	r2, [pc, #836]	; (17c28 <vTask_GSM_service+0x7c0>)
   178e4:	7812      	ldrb	r2, [r2, #0]
   178e6:	701a      	strb	r2, [r3, #0]
							endCall();
   178e8:	4bd0      	ldr	r3, [pc, #832]	; (17c2c <vTask_GSM_service+0x7c4>)
   178ea:	4798      	blx	r3
							checkRespSMS(t1);
   178ec:	2346      	movs	r3, #70	; 0x46
   178ee:	33ff      	adds	r3, #255	; 0xff
   178f0:	18fb      	adds	r3, r7, r3
   178f2:	781b      	ldrb	r3, [r3, #0]
   178f4:	0018      	movs	r0, r3
   178f6:	4bce      	ldr	r3, [pc, #824]	; (17c30 <vTask_GSM_service+0x7c8>)
   178f8:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   178fa:	4bce      	ldr	r3, [pc, #824]	; (17c34 <vTask_GSM_service+0x7cc>)
   178fc:	78db      	ldrb	r3, [r3, #3]
   178fe:	2b00      	cmp	r3, #0
   17900:	d020      	beq.n	17944 <vTask_GSM_service+0x4dc>
						{
							if(m2mEvent && callAccepted)
   17902:	4bcd      	ldr	r3, [pc, #820]	; (17c38 <vTask_GSM_service+0x7d0>)
   17904:	781b      	ldrb	r3, [r3, #0]
   17906:	2b00      	cmp	r3, #0
   17908:	d01c      	beq.n	17944 <vTask_GSM_service+0x4dc>
   1790a:	4bcc      	ldr	r3, [pc, #816]	; (17c3c <vTask_GSM_service+0x7d4>)
   1790c:	781b      	ldrb	r3, [r3, #0]
   1790e:	2b00      	cmp	r3, #0
   17910:	d018      	beq.n	17944 <vTask_GSM_service+0x4dc>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   17912:	4bcb      	ldr	r3, [pc, #812]	; (17c40 <vTask_GSM_service+0x7d8>)
   17914:	781b      	ldrb	r3, [r3, #0]
   17916:	2201      	movs	r2, #1
   17918:	4053      	eors	r3, r2
   1791a:	b2db      	uxtb	r3, r3
   1791c:	2b00      	cmp	r3, #0
   1791e:	d011      	beq.n	17944 <vTask_GSM_service+0x4dc>
   17920:	4bc8      	ldr	r3, [pc, #800]	; (17c44 <vTask_GSM_service+0x7dc>)
   17922:	4798      	blx	r3
   17924:	0002      	movs	r2, r0
   17926:	4bc8      	ldr	r3, [pc, #800]	; (17c48 <vTask_GSM_service+0x7e0>)
   17928:	681b      	ldr	r3, [r3, #0]
   1792a:	1ad2      	subs	r2, r2, r3
   1792c:	23fa      	movs	r3, #250	; 0xfa
   1792e:	00db      	lsls	r3, r3, #3
   17930:	429a      	cmp	r2, r3
   17932:	d907      	bls.n	17944 <vTask_GSM_service+0x4dc>
								{
									keyPressed=true;
   17934:	4bc2      	ldr	r3, [pc, #776]	; (17c40 <vTask_GSM_service+0x7d8>)
   17936:	2201      	movs	r2, #1
   17938:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   1793a:	4bc4      	ldr	r3, [pc, #784]	; (17c4c <vTask_GSM_service+0x7e4>)
   1793c:	781b      	ldrb	r3, [r3, #0]
   1793e:	0018      	movs	r0, r3
   17940:	4bc3      	ldr	r3, [pc, #780]	; (17c50 <vTask_GSM_service+0x7e8>)
   17942:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   17944:	4bc3      	ldr	r3, [pc, #780]	; (17c54 <vTask_GSM_service+0x7ec>)
   17946:	4798      	blx	r3
   17948:	1e03      	subs	r3, r0, #0
   1794a:	d003      	beq.n	17954 <vTask_GSM_service+0x4ec>
						{
							triggerPlaySound();
   1794c:	4bc2      	ldr	r3, [pc, #776]	; (17c58 <vTask_GSM_service+0x7f0>)
   1794e:	4798      	blx	r3
   17950:	e000      	b.n	17954 <vTask_GSM_service+0x4ec>
						if (eventStaged || m2mEventStaged)
   17952:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   17954:	4bc1      	ldr	r3, [pc, #772]	; (17c5c <vTask_GSM_service+0x7f4>)
   17956:	22a8      	movs	r2, #168	; 0xa8
   17958:	0052      	lsls	r2, r2, #1
   1795a:	4694      	mov	ip, r2
   1795c:	44bc      	add	ip, r7
   1795e:	4463      	add	r3, ip
   17960:	0018      	movs	r0, r3
   17962:	2340      	movs	r3, #64	; 0x40
   17964:	001a      	movs	r2, r3
   17966:	2100      	movs	r1, #0
   17968:	4bbd      	ldr	r3, [pc, #756]	; (17c60 <vTask_GSM_service+0x7f8>)
   1796a:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   1796c:	230c      	movs	r3, #12
   1796e:	18fb      	adds	r3, r7, r3
   17970:	2140      	movs	r1, #64	; 0x40
   17972:	0018      	movs	r0, r3
   17974:	4bbb      	ldr	r3, [pc, #748]	; (17c64 <vTask_GSM_service+0x7fc>)
   17976:	4798      	blx	r3
   17978:	1e03      	subs	r3, r0, #0
   1797a:	d100      	bne.n	1797e <vTask_GSM_service+0x516>
   1797c:	e630      	b.n	175e0 <vTask_GSM_service+0x178>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   1797e:	23a2      	movs	r3, #162	; 0xa2
   17980:	005b      	lsls	r3, r3, #1
   17982:	18fc      	adds	r4, r7, r3
   17984:	230c      	movs	r3, #12
   17986:	18fb      	adds	r3, r7, r3
   17988:	0018      	movs	r0, r3
   1798a:	4bb7      	ldr	r3, [pc, #732]	; (17c68 <vTask_GSM_service+0x800>)
   1798c:	4798      	blx	r3
   1798e:	0003      	movs	r3, r0
   17990:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   17992:	23a2      	movs	r3, #162	; 0xa2
   17994:	005b      	lsls	r3, r3, #1
   17996:	18fb      	adds	r3, r7, r3
   17998:	781b      	ldrb	r3, [r3, #0]
   1799a:	2b00      	cmp	r3, #0
   1799c:	d100      	bne.n	179a0 <vTask_GSM_service+0x538>
   1799e:	e0d5      	b.n	17b4c <vTask_GSM_service+0x6e4>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   179a0:	234c      	movs	r3, #76	; 0x4c
   179a2:	18fa      	adds	r2, r7, r3
   179a4:	1c79      	adds	r1, r7, #1
   179a6:	31ff      	adds	r1, #255	; 0xff
   179a8:	23a2      	movs	r3, #162	; 0xa2
   179aa:	005b      	lsls	r3, r3, #1
   179ac:	18fb      	adds	r3, r7, r3
   179ae:	7818      	ldrb	r0, [r3, #0]
   179b0:	23a0      	movs	r3, #160	; 0xa0
   179b2:	9300      	str	r3, [sp, #0]
   179b4:	0013      	movs	r3, r2
   179b6:	220f      	movs	r2, #15
   179b8:	4cac      	ldr	r4, [pc, #688]	; (17c6c <vTask_GSM_service+0x804>)
   179ba:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   179bc:	2344      	movs	r3, #68	; 0x44
   179be:	33ff      	adds	r3, #255	; 0xff
   179c0:	18fc      	adds	r4, r7, r3
   179c2:	1c7b      	adds	r3, r7, #1
   179c4:	33ff      	adds	r3, #255	; 0xff
   179c6:	0018      	movs	r0, r3
   179c8:	4ba9      	ldr	r3, [pc, #676]	; (17c70 <vTask_GSM_service+0x808>)
   179ca:	4798      	blx	r3
   179cc:	0003      	movs	r3, r0
   179ce:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   179d0:	23a1      	movs	r3, #161	; 0xa1
   179d2:	005b      	lsls	r3, r3, #1
   179d4:	18fc      	adds	r4, r7, r3
   179d6:	1c7b      	adds	r3, r7, #1
   179d8:	33ff      	adds	r3, #255	; 0xff
   179da:	0018      	movs	r0, r3
   179dc:	4ba5      	ldr	r3, [pc, #660]	; (17c74 <vTask_GSM_service+0x80c>)
   179de:	4798      	blx	r3
   179e0:	0003      	movs	r3, r0
   179e2:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   179e4:	2342      	movs	r3, #66	; 0x42
   179e6:	33ff      	adds	r3, #255	; 0xff
   179e8:	18fc      	adds	r4, r7, r3
   179ea:	1c7b      	adds	r3, r7, #1
   179ec:	33ff      	adds	r3, #255	; 0xff
   179ee:	0018      	movs	r0, r3
   179f0:	4ba1      	ldr	r3, [pc, #644]	; (17c78 <vTask_GSM_service+0x810>)
   179f2:	4798      	blx	r3
   179f4:	0003      	movs	r3, r0
   179f6:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   179f8:	23a4      	movs	r3, #164	; 0xa4
   179fa:	005b      	lsls	r3, r3, #1
   179fc:	18fb      	adds	r3, r7, r3
   179fe:	2201      	movs	r2, #1
   17a00:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   17a02:	4b9e      	ldr	r3, [pc, #632]	; (17c7c <vTask_GSM_service+0x814>)
   17a04:	2200      	movs	r2, #0
   17a06:	0019      	movs	r1, r3
   17a08:	2004      	movs	r0, #4
   17a0a:	4b9d      	ldr	r3, [pc, #628]	; (17c80 <vTask_GSM_service+0x818>)
   17a0c:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
   17a0e:	234c      	movs	r3, #76	; 0x4c
   17a10:	18fb      	adds	r3, r7, r3
   17a12:	0018      	movs	r0, r3
   17a14:	4b9b      	ldr	r3, [pc, #620]	; (17c84 <vTask_GSM_service+0x81c>)
   17a16:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+7,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
   17a18:	2344      	movs	r3, #68	; 0x44
   17a1a:	33ff      	adds	r3, #255	; 0xff
   17a1c:	18fb      	adds	r3, r7, r3
   17a1e:	781b      	ldrb	r3, [r3, #0]
   17a20:	2b00      	cmp	r3, #0
   17a22:	d10b      	bne.n	17a3c <vTask_GSM_service+0x5d4>
   17a24:	23a1      	movs	r3, #161	; 0xa1
   17a26:	005b      	lsls	r3, r3, #1
   17a28:	18fb      	adds	r3, r7, r3
   17a2a:	781b      	ldrb	r3, [r3, #0]
   17a2c:	2b00      	cmp	r3, #0
   17a2e:	d105      	bne.n	17a3c <vTask_GSM_service+0x5d4>
   17a30:	2342      	movs	r3, #66	; 0x42
   17a32:	33ff      	adds	r3, #255	; 0xff
   17a34:	18fb      	adds	r3, r7, r3
   17a36:	781b      	ldrb	r3, [r3, #0]
   17a38:	2b00      	cmp	r3, #0
   17a3a:	d031      	beq.n	17aa0 <vTask_GSM_service+0x638>
							{
								if(StringstartsWith(Received_SMS,"#"))
   17a3c:	4a92      	ldr	r2, [pc, #584]	; (17c88 <vTask_GSM_service+0x820>)
   17a3e:	234c      	movs	r3, #76	; 0x4c
   17a40:	18fb      	adds	r3, r7, r3
   17a42:	0011      	movs	r1, r2
   17a44:	0018      	movs	r0, r3
   17a46:	4b91      	ldr	r3, [pc, #580]	; (17c8c <vTask_GSM_service+0x824>)
   17a48:	4798      	blx	r3
   17a4a:	1e03      	subs	r3, r0, #0
   17a4c:	d013      	beq.n	17a76 <vTask_GSM_service+0x60e>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   17a4e:	234c      	movs	r3, #76	; 0x4c
   17a50:	18fc      	adds	r4, r7, r3
   17a52:	3401      	adds	r4, #1
   17a54:	234c      	movs	r3, #76	; 0x4c
   17a56:	18fb      	adds	r3, r7, r3
   17a58:	0018      	movs	r0, r3
   17a5a:	4b8d      	ldr	r3, [pc, #564]	; (17c90 <vTask_GSM_service+0x828>)
   17a5c:	4798      	blx	r3
   17a5e:	0002      	movs	r2, r0
   17a60:	234c      	movs	r3, #76	; 0x4c
   17a62:	18fb      	adds	r3, r7, r3
   17a64:	0021      	movs	r1, r4
   17a66:	0018      	movs	r0, r3
   17a68:	4b8a      	ldr	r3, [pc, #552]	; (17c94 <vTask_GSM_service+0x82c>)
   17a6a:	4798      	blx	r3
									response_sms_processed_cmd=false;
   17a6c:	23a4      	movs	r3, #164	; 0xa4
   17a6e:	005b      	lsls	r3, r3, #1
   17a70:	18fb      	adds	r3, r7, r3
   17a72:	2200      	movs	r2, #0
   17a74:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   17a76:	2342      	movs	r3, #66	; 0x42
   17a78:	33ff      	adds	r3, #255	; 0xff
   17a7a:	18fb      	adds	r3, r7, r3
   17a7c:	781c      	ldrb	r4, [r3, #0]
   17a7e:	23a4      	movs	r3, #164	; 0xa4
   17a80:	005b      	lsls	r3, r3, #1
   17a82:	18fb      	adds	r3, r7, r3
   17a84:	781a      	ldrb	r2, [r3, #0]
   17a86:	2344      	movs	r3, #68	; 0x44
   17a88:	33ff      	adds	r3, #255	; 0xff
   17a8a:	18fb      	adds	r3, r7, r3
   17a8c:	7819      	ldrb	r1, [r3, #0]
   17a8e:	234c      	movs	r3, #76	; 0x4c
   17a90:	18f8      	adds	r0, r7, r3
   17a92:	1c7b      	adds	r3, r7, #1
   17a94:	33ff      	adds	r3, #255	; 0xff
   17a96:	9300      	str	r3, [sp, #0]
   17a98:	0023      	movs	r3, r4
   17a9a:	4c7f      	ldr	r4, [pc, #508]	; (17c98 <vTask_GSM_service+0x830>)
   17a9c:	47a0      	blx	r4
   17a9e:	e053      	b.n	17b48 <vTask_GSM_service+0x6e0>
							}
							else if(isM2MNumber(phone_number))
   17aa0:	1c7b      	adds	r3, r7, #1
   17aa2:	33ff      	adds	r3, #255	; 0xff
   17aa4:	0018      	movs	r0, r3
   17aa6:	4b7d      	ldr	r3, [pc, #500]	; (17c9c <vTask_GSM_service+0x834>)
   17aa8:	4798      	blx	r3
   17aaa:	1e03      	subs	r3, r0, #0
   17aac:	d01f      	beq.n	17aee <vTask_GSM_service+0x686>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   17aae:	4a7c      	ldr	r2, [pc, #496]	; (17ca0 <vTask_GSM_service+0x838>)
   17ab0:	234c      	movs	r3, #76	; 0x4c
   17ab2:	18fb      	adds	r3, r7, r3
   17ab4:	0011      	movs	r1, r2
   17ab6:	0018      	movs	r0, r3
   17ab8:	4b74      	ldr	r3, [pc, #464]	; (17c8c <vTask_GSM_service+0x824>)
   17aba:	4798      	blx	r3
   17abc:	1e03      	subs	r3, r0, #0
   17abe:	d043      	beq.n	17b48 <vTask_GSM_service+0x6e0>
								{
									setM2MVerify(true);
   17ac0:	2001      	movs	r0, #1
   17ac2:	4b78      	ldr	r3, [pc, #480]	; (17ca4 <vTask_GSM_service+0x83c>)
   17ac4:	4798      	blx	r3
									getM2MNumber(phone_number);
   17ac6:	1c7b      	adds	r3, r7, #1
   17ac8:	33ff      	adds	r3, #255	; 0xff
   17aca:	0018      	movs	r0, r3
   17acc:	4b76      	ldr	r3, [pc, #472]	; (17ca8 <vTask_GSM_service+0x840>)
   17ace:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17ad0:	1c7b      	adds	r3, r7, #1
   17ad2:	33ff      	adds	r3, #255	; 0xff
   17ad4:	2200      	movs	r2, #0
   17ad6:	0019      	movs	r1, r3
   17ad8:	2005      	movs	r0, #5
   17ada:	4b69      	ldr	r3, [pc, #420]	; (17c80 <vTask_GSM_service+0x818>)
   17adc:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   17ade:	4a73      	ldr	r2, [pc, #460]	; (17cac <vTask_GSM_service+0x844>)
   17ae0:	1c7b      	adds	r3, r7, #1
   17ae2:	33ff      	adds	r3, #255	; 0xff
   17ae4:	0011      	movs	r1, r2
   17ae6:	0018      	movs	r0, r3
   17ae8:	4b71      	ldr	r3, [pc, #452]	; (17cb0 <vTask_GSM_service+0x848>)
   17aea:	4798      	blx	r3
   17aec:	e02c      	b.n	17b48 <vTask_GSM_service+0x6e0>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   17aee:	4b51      	ldr	r3, [pc, #324]	; (17c34 <vTask_GSM_service+0x7cc>)
   17af0:	78db      	ldrb	r3, [r3, #3]
   17af2:	2b00      	cmp	r3, #0
   17af4:	d028      	beq.n	17b48 <vTask_GSM_service+0x6e0>
   17af6:	1c7b      	adds	r3, r7, #1
   17af8:	33ff      	adds	r3, #255	; 0xff
   17afa:	0018      	movs	r0, r3
   17afc:	4b6d      	ldr	r3, [pc, #436]	; (17cb4 <vTask_GSM_service+0x84c>)
   17afe:	4798      	blx	r3
   17b00:	1e03      	subs	r3, r0, #0
   17b02:	d021      	beq.n	17b48 <vTask_GSM_service+0x6e0>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   17b04:	4a69      	ldr	r2, [pc, #420]	; (17cac <vTask_GSM_service+0x844>)
   17b06:	234c      	movs	r3, #76	; 0x4c
   17b08:	18fb      	adds	r3, r7, r3
   17b0a:	0011      	movs	r1, r2
   17b0c:	0018      	movs	r0, r3
   17b0e:	4b5f      	ldr	r3, [pc, #380]	; (17c8c <vTask_GSM_service+0x824>)
   17b10:	4798      	blx	r3
   17b12:	1e03      	subs	r3, r0, #0
   17b14:	d018      	beq.n	17b48 <vTask_GSM_service+0x6e0>
								{
									setM2MRemoteVerified(true);
   17b16:	2001      	movs	r0, #1
   17b18:	4b67      	ldr	r3, [pc, #412]	; (17cb8 <vTask_GSM_service+0x850>)
   17b1a:	4798      	blx	r3
									saveM2MSettings(true);
   17b1c:	2001      	movs	r0, #1
   17b1e:	4b67      	ldr	r3, [pc, #412]	; (17cbc <vTask_GSM_service+0x854>)
   17b20:	4798      	blx	r3
									getActiveNumber(phone_number);
   17b22:	1c7b      	adds	r3, r7, #1
   17b24:	33ff      	adds	r3, #255	; 0xff
   17b26:	0018      	movs	r0, r3
   17b28:	4b65      	ldr	r3, [pc, #404]	; (17cc0 <vTask_GSM_service+0x858>)
   17b2a:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17b2c:	1c7b      	adds	r3, r7, #1
   17b2e:	33ff      	adds	r3, #255	; 0xff
   17b30:	2200      	movs	r2, #0
   17b32:	0019      	movs	r1, r3
   17b34:	2005      	movs	r0, #5
   17b36:	4b52      	ldr	r3, [pc, #328]	; (17c80 <vTask_GSM_service+0x818>)
   17b38:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   17b3a:	4a62      	ldr	r2, [pc, #392]	; (17cc4 <vTask_GSM_service+0x85c>)
   17b3c:	1c7b      	adds	r3, r7, #1
   17b3e:	33ff      	adds	r3, #255	; 0xff
   17b40:	0011      	movs	r1, r2
   17b42:	0018      	movs	r0, r3
   17b44:	4b5a      	ldr	r3, [pc, #360]	; (17cb0 <vTask_GSM_service+0x848>)
   17b46:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   17b48:	4b5f      	ldr	r3, [pc, #380]	; (17cc8 <vTask_GSM_service+0x860>)
   17b4a:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   17b4c:	4b5f      	ldr	r3, [pc, #380]	; (17ccc <vTask_GSM_service+0x864>)
   17b4e:	781b      	ldrb	r3, [r3, #0]
   17b50:	2201      	movs	r2, #1
   17b52:	4053      	eors	r3, r2
   17b54:	b2db      	uxtb	r3, r3
   17b56:	2b00      	cmp	r3, #0
   17b58:	d100      	bne.n	17b5c <vTask_GSM_service+0x6f4>
   17b5a:	e0fe      	b.n	17d5a <vTask_GSM_service+0x8f2>
   17b5c:	4b30      	ldr	r3, [pc, #192]	; (17c20 <vTask_GSM_service+0x7b8>)
   17b5e:	781b      	ldrb	r3, [r3, #0]
   17b60:	b2db      	uxtb	r3, r3
   17b62:	2b4e      	cmp	r3, #78	; 0x4e
   17b64:	d005      	beq.n	17b72 <vTask_GSM_service+0x70a>
   17b66:	4b2e      	ldr	r3, [pc, #184]	; (17c20 <vTask_GSM_service+0x7b8>)
   17b68:	781b      	ldrb	r3, [r3, #0]
   17b6a:	b2db      	uxtb	r3, r3
   17b6c:	2b52      	cmp	r3, #82	; 0x52
   17b6e:	d000      	beq.n	17b72 <vTask_GSM_service+0x70a>
   17b70:	e0f3      	b.n	17d5a <vTask_GSM_service+0x8f2>
   17b72:	4b57      	ldr	r3, [pc, #348]	; (17cd0 <vTask_GSM_service+0x868>)
   17b74:	781b      	ldrb	r3, [r3, #0]
   17b76:	b2db      	uxtb	r3, r3
   17b78:	2b4e      	cmp	r3, #78	; 0x4e
   17b7a:	d005      	beq.n	17b88 <vTask_GSM_service+0x720>
   17b7c:	4b54      	ldr	r3, [pc, #336]	; (17cd0 <vTask_GSM_service+0x868>)
   17b7e:	781b      	ldrb	r3, [r3, #0]
   17b80:	b2db      	uxtb	r3, r3
   17b82:	2b49      	cmp	r3, #73	; 0x49
   17b84:	d000      	beq.n	17b88 <vTask_GSM_service+0x720>
   17b86:	e0e8      	b.n	17d5a <vTask_GSM_service+0x8f2>
						{
							if (gsm_responseLine_isRinging(response))
   17b88:	230c      	movs	r3, #12
   17b8a:	18fb      	adds	r3, r7, r3
   17b8c:	0018      	movs	r0, r3
   17b8e:	4b51      	ldr	r3, [pc, #324]	; (17cd4 <vTask_GSM_service+0x86c>)
   17b90:	4798      	blx	r3
   17b92:	1e03      	subs	r3, r0, #0
   17b94:	d100      	bne.n	17b98 <vTask_GSM_service+0x730>
   17b96:	e0d5      	b.n	17d44 <vTask_GSM_service+0x8dc>
							{
								currentStatus = 'R';
   17b98:	4b21      	ldr	r3, [pc, #132]	; (17c20 <vTask_GSM_service+0x7b8>)
   17b9a:	2252      	movs	r2, #82	; 0x52
   17b9c:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   17b9e:	4b4c      	ldr	r3, [pc, #304]	; (17cd0 <vTask_GSM_service+0x868>)
   17ba0:	2249      	movs	r2, #73	; 0x49
   17ba2:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   17ba4:	23ec      	movs	r3, #236	; 0xec
   17ba6:	18fb      	adds	r3, r7, r3
   17ba8:	0018      	movs	r0, r3
   17baa:	2314      	movs	r3, #20
   17bac:	001a      	movs	r2, r3
   17bae:	2100      	movs	r1, #0
   17bb0:	4b2b      	ldr	r3, [pc, #172]	; (17c60 <vTask_GSM_service+0x7f8>)
   17bb2:	4798      	blx	r3
								inCall = true;
   17bb4:	4b48      	ldr	r3, [pc, #288]	; (17cd8 <vTask_GSM_service+0x870>)
   17bb6:	2201      	movs	r2, #1
   17bb8:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   17bba:	2348      	movs	r3, #72	; 0x48
   17bbc:	33ff      	adds	r3, #255	; 0xff
   17bbe:	18fb      	adds	r3, r7, r3
   17bc0:	2200      	movs	r2, #0
   17bc2:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   17bc4:	23a3      	movs	r3, #163	; 0xa3
   17bc6:	005b      	lsls	r3, r3, #1
   17bc8:	18fb      	adds	r3, r7, r3
   17bca:	2200      	movs	r2, #0
   17bcc:	701a      	strb	r2, [r3, #0]
   17bce:	e092      	b.n	17cf6 <vTask_GSM_service+0x88e>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   17bd0:	23fa      	movs	r3, #250	; 0xfa
   17bd2:	005b      	lsls	r3, r3, #1
   17bd4:	0018      	movs	r0, r3
   17bd6:	4b41      	ldr	r3, [pc, #260]	; (17cdc <vTask_GSM_service+0x874>)
   17bd8:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   17bda:	230c      	movs	r3, #12
   17bdc:	18fb      	adds	r3, r7, r3
   17bde:	2140      	movs	r1, #64	; 0x40
   17be0:	0018      	movs	r0, r3
   17be2:	4b20      	ldr	r3, [pc, #128]	; (17c64 <vTask_GSM_service+0x7fc>)
   17be4:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   17be6:	23ec      	movs	r3, #236	; 0xec
   17be8:	18fa      	adds	r2, r7, r3
   17bea:	230c      	movs	r3, #12
   17bec:	18fb      	adds	r3, r7, r3
   17bee:	0011      	movs	r1, r2
   17bf0:	0018      	movs	r0, r3
   17bf2:	4b3b      	ldr	r3, [pc, #236]	; (17ce0 <vTask_GSM_service+0x878>)
   17bf4:	4798      	blx	r3
   17bf6:	1e03      	subs	r3, r0, #0
   17bf8:	d074      	beq.n	17ce4 <vTask_GSM_service+0x87c>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   17bfa:	23ec      	movs	r3, #236	; 0xec
   17bfc:	18fb      	adds	r3, r7, r3
   17bfe:	2200      	movs	r2, #0
   17c00:	0019      	movs	r1, r3
   17c02:	2001      	movs	r0, #1
   17c04:	4b1e      	ldr	r3, [pc, #120]	; (17c80 <vTask_GSM_service+0x818>)
   17c06:	4798      	blx	r3
										new_call = true;
   17c08:	2348      	movs	r3, #72	; 0x48
   17c0a:	33ff      	adds	r3, #255	; 0xff
   17c0c:	18fb      	adds	r3, r7, r3
   17c0e:	2201      	movs	r2, #1
   17c10:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   17c12:	4b0c      	ldr	r3, [pc, #48]	; (17c44 <vTask_GSM_service+0x7dc>)
   17c14:	4798      	blx	r3
   17c16:	0002      	movs	r2, r0
   17c18:	4b0b      	ldr	r3, [pc, #44]	; (17c48 <vTask_GSM_service+0x7e0>)
   17c1a:	601a      	str	r2, [r3, #0]
										break;
   17c1c:	e072      	b.n	17d04 <vTask_GSM_service+0x89c>
   17c1e:	46c0      	nop			; (mov r8, r8)
   17c20:	200007d8 	.word	0x200007d8
   17c24:	00014889 	.word	0x00014889
   17c28:	2000075b 	.word	0x2000075b
   17c2c:	00014331 	.word	0x00014331
   17c30:	00014b45 	.word	0x00014b45
   17c34:	2000062c 	.word	0x2000062c
   17c38:	2000073b 	.word	0x2000073b
   17c3c:	20000796 	.word	0x20000796
   17c40:	200007cc 	.word	0x200007cc
   17c44:	000202cd 	.word	0x000202cd
   17c48:	20000814 	.word	0x20000814
   17c4c:	20000721 	.word	0x20000721
   17c50:	000173d5 	.word	0x000173d5
   17c54:	000146f1 	.word	0x000146f1
   17c58:	0001473d 	.word	0x0001473d
   17c5c:	fffffebc 	.word	0xfffffebc
   17c60:	00028e93 	.word	0x00028e93
   17c64:	00013431 	.word	0x00013431
   17c68:	000134c1 	.word	0x000134c1
   17c6c:	00012c3d 	.word	0x00012c3d
   17c70:	00011a69 	.word	0x00011a69
   17c74:	00010999 	.word	0x00010999
   17c78:	00010a09 	.word	0x00010a09
   17c7c:	0002a6f4 	.word	0x0002a6f4
   17c80:	0001cbbd 	.word	0x0001cbbd
   17c84:	00013fb5 	.word	0x00013fb5
   17c88:	0002a6fc 	.word	0x0002a6fc
   17c8c:	00014021 	.word	0x00014021
   17c90:	00029123 	.word	0x00029123
   17c94:	00028e6f 	.word	0x00028e6f
   17c98:	00014dc1 	.word	0x00014dc1
   17c9c:	00010a51 	.word	0x00010a51
   17ca0:	0002a6b4 	.word	0x0002a6b4
   17ca4:	00010b41 	.word	0x00010b41
   17ca8:	00010ac9 	.word	0x00010ac9
   17cac:	0002a700 	.word	0x0002a700
   17cb0:	00012b11 	.word	0x00012b11
   17cb4:	00010a8d 	.word	0x00010a8d
   17cb8:	00010b91 	.word	0x00010b91
   17cbc:	00010be1 	.word	0x00010be1
   17cc0:	00010d1d 	.word	0x00010d1d
   17cc4:	0002a708 	.word	0x0002a708
   17cc8:	000126e9 	.word	0x000126e9
   17ccc:	2000073c 	.word	0x2000073c
   17cd0:	20000787 	.word	0x20000787
   17cd4:	00013549 	.word	0x00013549
   17cd8:	20000794 	.word	0x20000794
   17cdc:	0001ff69 	.word	0x0001ff69
   17ce0:	00013579 	.word	0x00013579
								for (uint8_t i=0;i<4;i++)
   17ce4:	23a3      	movs	r3, #163	; 0xa3
   17ce6:	005b      	lsls	r3, r3, #1
   17ce8:	18fb      	adds	r3, r7, r3
   17cea:	781a      	ldrb	r2, [r3, #0]
   17cec:	23a3      	movs	r3, #163	; 0xa3
   17cee:	005b      	lsls	r3, r3, #1
   17cf0:	18fb      	adds	r3, r7, r3
   17cf2:	3201      	adds	r2, #1
   17cf4:	701a      	strb	r2, [r3, #0]
   17cf6:	23a3      	movs	r3, #163	; 0xa3
   17cf8:	005b      	lsls	r3, r3, #1
   17cfa:	18fb      	adds	r3, r7, r3
   17cfc:	781b      	ldrb	r3, [r3, #0]
   17cfe:	2b03      	cmp	r3, #3
   17d00:	d800      	bhi.n	17d04 <vTask_GSM_service+0x89c>
   17d02:	e765      	b.n	17bd0 <vTask_GSM_service+0x768>
									}
								}
								if (new_call)
   17d04:	2348      	movs	r3, #72	; 0x48
   17d06:	33ff      	adds	r3, #255	; 0xff
   17d08:	18fb      	adds	r3, r7, r3
   17d0a:	781b      	ldrb	r3, [r3, #0]
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	d100      	bne.n	17d12 <vTask_GSM_service+0x8aa>
   17d10:	e153      	b.n	17fba <vTask_GSM_service+0xb52>
								{
									new_call = false;
   17d12:	2348      	movs	r3, #72	; 0x48
   17d14:	33ff      	adds	r3, #255	; 0xff
   17d16:	18fb      	adds	r3, r7, r3
   17d18:	2200      	movs	r2, #0
   17d1a:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   17d1c:	23ec      	movs	r3, #236	; 0xec
   17d1e:	18fb      	adds	r3, r7, r3
   17d20:	0018      	movs	r0, r3
   17d22:	4ba9      	ldr	r3, [pc, #676]	; (17fc8 <vTask_GSM_service+0xb60>)
   17d24:	4798      	blx	r3
   17d26:	1e03      	subs	r3, r0, #0
   17d28:	d009      	beq.n	17d3e <vTask_GSM_service+0x8d6>
									{
										acceptCall();
   17d2a:	4ba8      	ldr	r3, [pc, #672]	; (17fcc <vTask_GSM_service+0xb64>)
   17d2c:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   17d2e:	23ec      	movs	r3, #236	; 0xec
   17d30:	18fb      	adds	r3, r7, r3
   17d32:	2200      	movs	r2, #0
   17d34:	0019      	movs	r1, r3
   17d36:	2002      	movs	r0, #2
   17d38:	4ba5      	ldr	r3, [pc, #660]	; (17fd0 <vTask_GSM_service+0xb68>)
   17d3a:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17d3c:	e13d      	b.n	17fba <vTask_GSM_service+0xb52>
									}
									else
									{
										endCall();
   17d3e:	4ba5      	ldr	r3, [pc, #660]	; (17fd4 <vTask_GSM_service+0xb6c>)
   17d40:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17d42:	e13a      	b.n	17fba <vTask_GSM_service+0xb52>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   17d44:	230c      	movs	r3, #12
   17d46:	18fb      	adds	r3, r7, r3
   17d48:	0018      	movs	r0, r3
   17d4a:	4ba3      	ldr	r3, [pc, #652]	; (17fd8 <vTask_GSM_service+0xb70>)
   17d4c:	4798      	blx	r3
   17d4e:	1e03      	subs	r3, r0, #0
   17d50:	d100      	bne.n	17d54 <vTask_GSM_service+0x8ec>
   17d52:	e132      	b.n	17fba <vTask_GSM_service+0xb52>
							{
								endCall();
   17d54:	4b9f      	ldr	r3, [pc, #636]	; (17fd4 <vTask_GSM_service+0xb6c>)
   17d56:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   17d58:	e12f      	b.n	17fba <vTask_GSM_service+0xb52>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   17d5a:	4ba0      	ldr	r3, [pc, #640]	; (17fdc <vTask_GSM_service+0xb74>)
   17d5c:	781b      	ldrb	r3, [r3, #0]
   17d5e:	2201      	movs	r2, #1
   17d60:	4053      	eors	r3, r2
   17d62:	b2db      	uxtb	r3, r3
   17d64:	2b00      	cmp	r3, #0
   17d66:	d045      	beq.n	17df4 <vTask_GSM_service+0x98c>
   17d68:	4b9d      	ldr	r3, [pc, #628]	; (17fe0 <vTask_GSM_service+0xb78>)
   17d6a:	781b      	ldrb	r3, [r3, #0]
   17d6c:	b2db      	uxtb	r3, r3
   17d6e:	2b49      	cmp	r3, #73	; 0x49
   17d70:	d140      	bne.n	17df4 <vTask_GSM_service+0x98c>
   17d72:	4b9c      	ldr	r3, [pc, #624]	; (17fe4 <vTask_GSM_service+0xb7c>)
   17d74:	781b      	ldrb	r3, [r3, #0]
   17d76:	b2db      	uxtb	r3, r3
   17d78:	2b49      	cmp	r3, #73	; 0x49
   17d7a:	d13b      	bne.n	17df4 <vTask_GSM_service+0x98c>
						{
							if (gsm_responseLine_isCallCut(response))
   17d7c:	230c      	movs	r3, #12
   17d7e:	18fb      	adds	r3, r7, r3
   17d80:	0018      	movs	r0, r3
   17d82:	4b95      	ldr	r3, [pc, #596]	; (17fd8 <vTask_GSM_service+0xb70>)
   17d84:	4798      	blx	r3
   17d86:	1e03      	subs	r3, r0, #0
   17d88:	d002      	beq.n	17d90 <vTask_GSM_service+0x928>
							{
								endCall();
   17d8a:	4b92      	ldr	r3, [pc, #584]	; (17fd4 <vTask_GSM_service+0xb6c>)
   17d8c:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17d8e:	e118      	b.n	17fc2 <vTask_GSM_service+0xb5a>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   17d90:	230c      	movs	r3, #12
   17d92:	18fb      	adds	r3, r7, r3
   17d94:	0018      	movs	r0, r3
   17d96:	4b94      	ldr	r3, [pc, #592]	; (17fe8 <vTask_GSM_service+0xb80>)
   17d98:	4798      	blx	r3
   17d9a:	1e03      	subs	r3, r0, #0
   17d9c:	d024      	beq.n	17de8 <vTask_GSM_service+0x980>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17d9e:	4a93      	ldr	r2, [pc, #588]	; (17fec <vTask_GSM_service+0xb84>)
   17da0:	230c      	movs	r3, #12
   17da2:	18fb      	adds	r3, r7, r3
   17da4:	0011      	movs	r1, r2
   17da6:	0018      	movs	r0, r3
   17da8:	4b91      	ldr	r3, [pc, #580]	; (17ff0 <vTask_GSM_service+0xb88>)
   17daa:	4798      	blx	r3
   17dac:	0003      	movs	r3, r0
   17dae:	229e      	movs	r2, #158	; 0x9e
   17db0:	0052      	lsls	r2, r2, #1
   17db2:	18ba      	adds	r2, r7, r2
   17db4:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   17db6:	4b8d      	ldr	r3, [pc, #564]	; (17fec <vTask_GSM_service+0xb84>)
   17db8:	0019      	movs	r1, r3
   17dba:	2000      	movs	r0, #0
   17dbc:	4b8c      	ldr	r3, [pc, #560]	; (17ff0 <vTask_GSM_service+0xb88>)
   17dbe:	4798      	blx	r3
   17dc0:	0003      	movs	r3, r0
   17dc2:	229e      	movs	r2, #158	; 0x9e
   17dc4:	0052      	lsls	r2, r2, #1
   17dc6:	18ba      	adds	r2, r7, r2
   17dc8:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   17dca:	239e      	movs	r3, #158	; 0x9e
   17dcc:	005b      	lsls	r3, r3, #1
   17dce:	18fb      	adds	r3, r7, r3
   17dd0:	681b      	ldr	r3, [r3, #0]
   17dd2:	0018      	movs	r0, r3
   17dd4:	4b87      	ldr	r3, [pc, #540]	; (17ff4 <vTask_GSM_service+0xb8c>)
   17dd6:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   17dd8:	239e      	movs	r3, #158	; 0x9e
   17dda:	005b      	lsls	r3, r3, #1
   17ddc:	18fb      	adds	r3, r7, r3
   17dde:	681b      	ldr	r3, [r3, #0]
   17de0:	0018      	movs	r0, r3
   17de2:	4b85      	ldr	r3, [pc, #532]	; (17ff8 <vTask_GSM_service+0xb90>)
   17de4:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17de6:	e0ec      	b.n	17fc2 <vTask_GSM_service+0xb5a>
							}
							else
							{
								playSoundAgain(response);
   17de8:	230c      	movs	r3, #12
   17dea:	18fb      	adds	r3, r7, r3
   17dec:	0018      	movs	r0, r3
   17dee:	4b83      	ldr	r3, [pc, #524]	; (17ffc <vTask_GSM_service+0xb94>)
   17df0:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   17df2:	e0e6      	b.n	17fc2 <vTask_GSM_service+0xb5a>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   17df4:	4b7a      	ldr	r3, [pc, #488]	; (17fe0 <vTask_GSM_service+0xb78>)
   17df6:	781b      	ldrb	r3, [r3, #0]
   17df8:	b2db      	uxtb	r3, r3
   17dfa:	2b4e      	cmp	r3, #78	; 0x4e
   17dfc:	d004      	beq.n	17e08 <vTask_GSM_service+0x9a0>
   17dfe:	4b78      	ldr	r3, [pc, #480]	; (17fe0 <vTask_GSM_service+0xb78>)
   17e00:	781b      	ldrb	r3, [r3, #0]
   17e02:	b2db      	uxtb	r3, r3
   17e04:	2b52      	cmp	r3, #82	; 0x52
   17e06:	d163      	bne.n	17ed0 <vTask_GSM_service+0xa68>
   17e08:	4b76      	ldr	r3, [pc, #472]	; (17fe4 <vTask_GSM_service+0xb7c>)
   17e0a:	781b      	ldrb	r3, [r3, #0]
   17e0c:	b2db      	uxtb	r3, r3
   17e0e:	2b4f      	cmp	r3, #79	; 0x4f
   17e10:	d15e      	bne.n	17ed0 <vTask_GSM_service+0xa68>
						{
							if (OutGoingcallState(response) == 'R')
   17e12:	230c      	movs	r3, #12
   17e14:	18fb      	adds	r3, r7, r3
   17e16:	0018      	movs	r0, r3
   17e18:	4b79      	ldr	r3, [pc, #484]	; (18000 <vTask_GSM_service+0xb98>)
   17e1a:	4798      	blx	r3
   17e1c:	0003      	movs	r3, r0
   17e1e:	2b52      	cmp	r3, #82	; 0x52
   17e20:	d10b      	bne.n	17e3a <vTask_GSM_service+0x9d2>
							{
								callCutWait = xTaskGetTickCount();
   17e22:	4b78      	ldr	r3, [pc, #480]	; (18004 <vTask_GSM_service+0xb9c>)
   17e24:	4798      	blx	r3
   17e26:	0002      	movs	r2, r0
   17e28:	4b77      	ldr	r3, [pc, #476]	; (18008 <vTask_GSM_service+0xba0>)
   17e2a:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   17e2c:	4b6c      	ldr	r3, [pc, #432]	; (17fe0 <vTask_GSM_service+0xb78>)
   17e2e:	2252      	movs	r2, #82	; 0x52
   17e30:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17e32:	4b6c      	ldr	r3, [pc, #432]	; (17fe4 <vTask_GSM_service+0xb7c>)
   17e34:	224f      	movs	r2, #79	; 0x4f
   17e36:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   17e38:	e0c2      	b.n	17fc0 <vTask_GSM_service+0xb58>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   17e3a:	230c      	movs	r3, #12
   17e3c:	18fb      	adds	r3, r7, r3
   17e3e:	0018      	movs	r0, r3
   17e40:	4b65      	ldr	r3, [pc, #404]	; (17fd8 <vTask_GSM_service+0xb70>)
   17e42:	4798      	blx	r3
   17e44:	1e03      	subs	r3, r0, #0
   17e46:	d107      	bne.n	17e58 <vTask_GSM_service+0x9f0>
   17e48:	230c      	movs	r3, #12
   17e4a:	18fb      	adds	r3, r7, r3
   17e4c:	0018      	movs	r0, r3
   17e4e:	4b6c      	ldr	r3, [pc, #432]	; (18000 <vTask_GSM_service+0xb98>)
   17e50:	4798      	blx	r3
   17e52:	0003      	movs	r3, r0
   17e54:	2b45      	cmp	r3, #69	; 0x45
   17e56:	d110      	bne.n	17e7a <vTask_GSM_service+0xa12>
							{
								char t1 = actionType;
   17e58:	233c      	movs	r3, #60	; 0x3c
   17e5a:	33ff      	adds	r3, #255	; 0xff
   17e5c:	18fb      	adds	r3, r7, r3
   17e5e:	4a6b      	ldr	r2, [pc, #428]	; (1800c <vTask_GSM_service+0xba4>)
   17e60:	7812      	ldrb	r2, [r2, #0]
   17e62:	701a      	strb	r2, [r3, #0]
								endCall();
   17e64:	4b5b      	ldr	r3, [pc, #364]	; (17fd4 <vTask_GSM_service+0xb6c>)
   17e66:	4798      	blx	r3
								checkRespSMS(t1);
   17e68:	233c      	movs	r3, #60	; 0x3c
   17e6a:	33ff      	adds	r3, #255	; 0xff
   17e6c:	18fb      	adds	r3, r7, r3
   17e6e:	781b      	ldrb	r3, [r3, #0]
   17e70:	0018      	movs	r0, r3
   17e72:	4b67      	ldr	r3, [pc, #412]	; (18010 <vTask_GSM_service+0xba8>)
   17e74:	4798      	blx	r3
							{
   17e76:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   17e78:	e0a2      	b.n	17fc0 <vTask_GSM_service+0xb58>
							}
							else if (OutGoingcallState(response) == 'I')
   17e7a:	230c      	movs	r3, #12
   17e7c:	18fb      	adds	r3, r7, r3
   17e7e:	0018      	movs	r0, r3
   17e80:	4b5f      	ldr	r3, [pc, #380]	; (18000 <vTask_GSM_service+0xb98>)
   17e82:	4798      	blx	r3
   17e84:	0003      	movs	r3, r0
   17e86:	2b49      	cmp	r3, #73	; 0x49
   17e88:	d000      	beq.n	17e8c <vTask_GSM_service+0xa24>
   17e8a:	e099      	b.n	17fc0 <vTask_GSM_service+0xb58>
							{
								callCutWait = xTaskGetTickCount();
   17e8c:	4b5d      	ldr	r3, [pc, #372]	; (18004 <vTask_GSM_service+0xb9c>)
   17e8e:	4798      	blx	r3
   17e90:	0002      	movs	r2, r0
   17e92:	4b5d      	ldr	r3, [pc, #372]	; (18008 <vTask_GSM_service+0xba0>)
   17e94:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   17e96:	4b52      	ldr	r3, [pc, #328]	; (17fe0 <vTask_GSM_service+0xb78>)
   17e98:	2249      	movs	r2, #73	; 0x49
   17e9a:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   17e9c:	4b51      	ldr	r3, [pc, #324]	; (17fe4 <vTask_GSM_service+0xb7c>)
   17e9e:	224f      	movs	r2, #79	; 0x4f
   17ea0:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   17ea2:	4b5c      	ldr	r3, [pc, #368]	; (18014 <vTask_GSM_service+0xbac>)
   17ea4:	2201      	movs	r2, #1
   17ea6:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   17ea8:	2201      	movs	r2, #1
   17eaa:	2100      	movs	r1, #0
   17eac:	2002      	movs	r0, #2
   17eae:	4b48      	ldr	r3, [pc, #288]	; (17fd0 <vTask_GSM_service+0xb68>)
   17eb0:	4798      	blx	r3
								if (!m2mEvent)
   17eb2:	4b59      	ldr	r3, [pc, #356]	; (18018 <vTask_GSM_service+0xbb0>)
   17eb4:	781b      	ldrb	r3, [r3, #0]
   17eb6:	2201      	movs	r2, #1
   17eb8:	4053      	eors	r3, r2
   17eba:	b2db      	uxtb	r3, r3
   17ebc:	2b00      	cmp	r3, #0
   17ebe:	d100      	bne.n	17ec2 <vTask_GSM_service+0xa5a>
   17ec0:	e07e      	b.n	17fc0 <vTask_GSM_service+0xb58>
								{
									playSound(actionType,true);
   17ec2:	4b52      	ldr	r3, [pc, #328]	; (1800c <vTask_GSM_service+0xba4>)
   17ec4:	781b      	ldrb	r3, [r3, #0]
   17ec6:	2101      	movs	r1, #1
   17ec8:	0018      	movs	r0, r3
   17eca:	4b54      	ldr	r3, [pc, #336]	; (1801c <vTask_GSM_service+0xbb4>)
   17ecc:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   17ece:	e077      	b.n	17fc0 <vTask_GSM_service+0xb58>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   17ed0:	4b43      	ldr	r3, [pc, #268]	; (17fe0 <vTask_GSM_service+0xb78>)
   17ed2:	781b      	ldrb	r3, [r3, #0]
   17ed4:	b2db      	uxtb	r3, r3
   17ed6:	2b49      	cmp	r3, #73	; 0x49
   17ed8:	d001      	beq.n	17ede <vTask_GSM_service+0xa76>
   17eda:	f7ff fb81 	bl	175e0 <vTask_GSM_service+0x178>
   17ede:	4b41      	ldr	r3, [pc, #260]	; (17fe4 <vTask_GSM_service+0xb7c>)
   17ee0:	781b      	ldrb	r3, [r3, #0]
   17ee2:	b2db      	uxtb	r3, r3
   17ee4:	2b4f      	cmp	r3, #79	; 0x4f
   17ee6:	d001      	beq.n	17eec <vTask_GSM_service+0xa84>
   17ee8:	f7ff fb7a 	bl	175e0 <vTask_GSM_service+0x178>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   17eec:	230c      	movs	r3, #12
   17eee:	18fb      	adds	r3, r7, r3
   17ef0:	0018      	movs	r0, r3
   17ef2:	4b39      	ldr	r3, [pc, #228]	; (17fd8 <vTask_GSM_service+0xb70>)
   17ef4:	4798      	blx	r3
   17ef6:	1e03      	subs	r3, r0, #0
   17ef8:	d107      	bne.n	17f0a <vTask_GSM_service+0xaa2>
   17efa:	230c      	movs	r3, #12
   17efc:	18fb      	adds	r3, r7, r3
   17efe:	0018      	movs	r0, r3
   17f00:	4b3f      	ldr	r3, [pc, #252]	; (18000 <vTask_GSM_service+0xb98>)
   17f02:	4798      	blx	r3
   17f04:	0003      	movs	r3, r0
   17f06:	2b45      	cmp	r3, #69	; 0x45
   17f08:	d102      	bne.n	17f10 <vTask_GSM_service+0xaa8>
							{
								endCall();
   17f0a:	4b32      	ldr	r3, [pc, #200]	; (17fd4 <vTask_GSM_service+0xb6c>)
   17f0c:	4798      	blx	r3
   17f0e:	e058      	b.n	17fc2 <vTask_GSM_service+0xb5a>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   17f10:	230c      	movs	r3, #12
   17f12:	18fb      	adds	r3, r7, r3
   17f14:	0018      	movs	r0, r3
   17f16:	4b34      	ldr	r3, [pc, #208]	; (17fe8 <vTask_GSM_service+0xb80>)
   17f18:	4798      	blx	r3
   17f1a:	1e03      	subs	r3, r0, #0
   17f1c:	d025      	beq.n	17f6a <vTask_GSM_service+0xb02>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   17f1e:	4a33      	ldr	r2, [pc, #204]	; (17fec <vTask_GSM_service+0xb84>)
   17f20:	230c      	movs	r3, #12
   17f22:	18fb      	adds	r3, r7, r3
   17f24:	0011      	movs	r1, r2
   17f26:	0018      	movs	r0, r3
   17f28:	4b31      	ldr	r3, [pc, #196]	; (17ff0 <vTask_GSM_service+0xb88>)
   17f2a:	4798      	blx	r3
   17f2c:	0003      	movs	r3, r0
   17f2e:	229a      	movs	r2, #154	; 0x9a
   17f30:	0052      	lsls	r2, r2, #1
   17f32:	18ba      	adds	r2, r7, r2
   17f34:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   17f36:	4b2d      	ldr	r3, [pc, #180]	; (17fec <vTask_GSM_service+0xb84>)
   17f38:	0019      	movs	r1, r3
   17f3a:	2000      	movs	r0, #0
   17f3c:	4b2c      	ldr	r3, [pc, #176]	; (17ff0 <vTask_GSM_service+0xb88>)
   17f3e:	4798      	blx	r3
   17f40:	0003      	movs	r3, r0
   17f42:	229a      	movs	r2, #154	; 0x9a
   17f44:	0052      	lsls	r2, r2, #1
   17f46:	18ba      	adds	r2, r7, r2
   17f48:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   17f4a:	239a      	movs	r3, #154	; 0x9a
   17f4c:	005b      	lsls	r3, r3, #1
   17f4e:	18fb      	adds	r3, r7, r3
   17f50:	681b      	ldr	r3, [r3, #0]
   17f52:	0018      	movs	r0, r3
   17f54:	4b27      	ldr	r3, [pc, #156]	; (17ff4 <vTask_GSM_service+0xb8c>)
   17f56:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   17f58:	239a      	movs	r3, #154	; 0x9a
   17f5a:	005b      	lsls	r3, r3, #1
   17f5c:	18fb      	adds	r3, r7, r3
   17f5e:	681b      	ldr	r3, [r3, #0]
   17f60:	0018      	movs	r0, r3
   17f62:	4b25      	ldr	r3, [pc, #148]	; (17ff8 <vTask_GSM_service+0xb90>)
   17f64:	4798      	blx	r3
   17f66:	f7ff fb3b 	bl	175e0 <vTask_GSM_service+0x178>
							}
							else
							{
								playSoundAgain(response);
   17f6a:	230c      	movs	r3, #12
   17f6c:	18fb      	adds	r3, r7, r3
   17f6e:	0018      	movs	r0, r3
   17f70:	4b22      	ldr	r3, [pc, #136]	; (17ffc <vTask_GSM_service+0xb94>)
   17f72:	4798      	blx	r3
   17f74:	f7ff fb34 	bl	175e0 <vTask_GSM_service+0x178>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   17f78:	234c      	movs	r3, #76	; 0x4c
   17f7a:	33ff      	adds	r3, #255	; 0xff
   17f7c:	18fb      	adds	r3, r7, r3
   17f7e:	2200      	movs	r2, #0
   17f80:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   17f82:	23a5      	movs	r3, #165	; 0xa5
   17f84:	005b      	lsls	r3, r3, #1
   17f86:	18fb      	adds	r3, r7, r3
   17f88:	2200      	movs	r2, #0
   17f8a:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   17f8c:	4b24      	ldr	r3, [pc, #144]	; (18020 <vTask_GSM_service+0xbb8>)
   17f8e:	4a24      	ldr	r2, [pc, #144]	; (18020 <vTask_GSM_service+0xbb8>)
   17f90:	6812      	ldr	r2, [r2, #0]
   17f92:	2180      	movs	r1, #128	; 0x80
   17f94:	0249      	lsls	r1, r1, #9
   17f96:	430a      	orrs	r2, r1
   17f98:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   17f9a:	4b22      	ldr	r3, [pc, #136]	; (18024 <vTask_GSM_service+0xbbc>)
   17f9c:	0018      	movs	r0, r3
   17f9e:	4b22      	ldr	r3, [pc, #136]	; (18028 <vTask_GSM_service+0xbc0>)
   17fa0:	4798      	blx	r3
			GSM_PWR_OFF;
   17fa2:	4b1f      	ldr	r3, [pc, #124]	; (18020 <vTask_GSM_service+0xbb8>)
   17fa4:	4a1e      	ldr	r2, [pc, #120]	; (18020 <vTask_GSM_service+0xbb8>)
   17fa6:	6812      	ldr	r2, [r2, #0]
   17fa8:	4920      	ldr	r1, [pc, #128]	; (1802c <vTask_GSM_service+0xbc4>)
   17faa:	400a      	ands	r2, r1
   17fac:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   17fae:	4b20      	ldr	r3, [pc, #128]	; (18030 <vTask_GSM_service+0xbc8>)
   17fb0:	0018      	movs	r0, r3
   17fb2:	4b1d      	ldr	r3, [pc, #116]	; (18028 <vTask_GSM_service+0xbc0>)
   17fb4:	4798      	blx	r3
   17fb6:	f7ff fb13 	bl	175e0 <vTask_GSM_service+0x178>
							if (gsm_responseLine_isRinging(response))
   17fba:	46c0      	nop			; (mov r8, r8)
   17fbc:	f7ff fb10 	bl	175e0 <vTask_GSM_service+0x178>
							if (OutGoingcallState(response) == 'R')
   17fc0:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
   17fc2:	f7ff fb0d 	bl	175e0 <vTask_GSM_service+0x178>
   17fc6:	46c0      	nop			; (mov r8, r8)
   17fc8:	000170f1 	.word	0x000170f1
   17fcc:	00014629 	.word	0x00014629
   17fd0:	0001cbbd 	.word	0x0001cbbd
   17fd4:	00014331 	.word	0x00014331
   17fd8:	0001361d 	.word	0x0001361d
   17fdc:	2000073c 	.word	0x2000073c
   17fe0:	200007d8 	.word	0x200007d8
   17fe4:	20000787 	.word	0x20000787
   17fe8:	00013695 	.word	0x00013695
   17fec:	0002a718 	.word	0x0002a718
   17ff0:	00029185 	.word	0x00029185
   17ff4:	00012a9d 	.word	0x00012a9d
   17ff8:	00014bbd 	.word	0x00014bbd
   17ffc:	00014781 	.word	0x00014781
   18000:	000148c1 	.word	0x000148c1
   18004:	000202cd 	.word	0x000202cd
   18008:	20000814 	.word	0x20000814
   1800c:	2000075b 	.word	0x2000075b
   18010:	00014b45 	.word	0x00014b45
   18014:	20000796 	.word	0x20000796
   18018:	2000073b 	.word	0x2000073b
   1801c:	00014671 	.word	0x00014671
   18020:	41004490 	.word	0x41004490
   18024:	00000bb8 	.word	0x00000bb8
   18028:	0001ff69 	.word	0x0001ff69
   1802c:	fffeffff 	.word	0xfffeffff
   18030:	00001388 	.word	0x00001388

00018034 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   18034:	b590      	push	{r4, r7, lr}
   18036:	b083      	sub	sp, #12
   18038:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
   1803a:	23eb      	movs	r3, #235	; 0xeb
   1803c:	009a      	lsls	r2, r3, #2
   1803e:	4806      	ldr	r0, [pc, #24]	; (18058 <start_gsm_service+0x24>)
   18040:	2300      	movs	r3, #0
   18042:	9301      	str	r3, [sp, #4]
   18044:	2301      	movs	r3, #1
   18046:	9300      	str	r3, [sp, #0]
   18048:	2300      	movs	r3, #0
   1804a:	2100      	movs	r1, #0
   1804c:	4c03      	ldr	r4, [pc, #12]	; (1805c <start_gsm_service+0x28>)
   1804e:	47a0      	blx	r4
}
   18050:	46c0      	nop			; (mov r8, r8)
   18052:	46bd      	mov	sp, r7
   18054:	b001      	add	sp, #4
   18056:	bd90      	pop	{r4, r7, pc}
   18058:	00017469 	.word	0x00017469
   1805c:	0001fc29 	.word	0x0001fc29

00018060 <busy>:

bool busy(void)
{
   18060:	b580      	push	{r7, lr}
   18062:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   18064:	4b09      	ldr	r3, [pc, #36]	; (1808c <busy+0x2c>)
   18066:	781b      	ldrb	r3, [r3, #0]
   18068:	2b00      	cmp	r3, #0
   1806a:	d104      	bne.n	18076 <busy+0x16>
   1806c:	4b08      	ldr	r3, [pc, #32]	; (18090 <busy+0x30>)
   1806e:	781b      	ldrb	r3, [r3, #0]
   18070:	b2db      	uxtb	r3, r3
   18072:	2b00      	cmp	r3, #0
   18074:	d001      	beq.n	1807a <busy+0x1a>
   18076:	2301      	movs	r3, #1
   18078:	e000      	b.n	1807c <busy+0x1c>
   1807a:	2300      	movs	r3, #0
   1807c:	1c1a      	adds	r2, r3, #0
   1807e:	2301      	movs	r3, #1
   18080:	4013      	ands	r3, r2
   18082:	b2db      	uxtb	r3, r3
}
   18084:	0018      	movs	r0, r3
   18086:	46bd      	mov	sp, r7
   18088:	bd80      	pop	{r7, pc}
   1808a:	46c0      	nop			; (mov r8, r8)
   1808c:	20000794 	.word	0x20000794
   18090:	2000068e 	.word	0x2000068e

00018094 <checkNotInCall>:

bool checkNotInCall(void)
{
   18094:	b580      	push	{r7, lr}
   18096:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   18098:	4b13      	ldr	r3, [pc, #76]	; (180e8 <checkNotInCall+0x54>)
   1809a:	781b      	ldrb	r3, [r3, #0]
   1809c:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   1809e:	2b4e      	cmp	r3, #78	; 0x4e
   180a0:	d11a      	bne.n	180d8 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   180a2:	4b12      	ldr	r3, [pc, #72]	; (180ec <checkNotInCall+0x58>)
   180a4:	781b      	ldrb	r3, [r3, #0]
   180a6:	b2db      	uxtb	r3, r3
   180a8:	2b4e      	cmp	r3, #78	; 0x4e
   180aa:	d115      	bne.n	180d8 <checkNotInCall+0x44>
   180ac:	4b10      	ldr	r3, [pc, #64]	; (180f0 <checkNotInCall+0x5c>)
   180ae:	781b      	ldrb	r3, [r3, #0]
   180b0:	2b00      	cmp	r3, #0
   180b2:	d011      	beq.n	180d8 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   180b4:	4b0f      	ldr	r3, [pc, #60]	; (180f4 <checkNotInCall+0x60>)
   180b6:	781b      	ldrb	r3, [r3, #0]
   180b8:	2201      	movs	r2, #1
   180ba:	4053      	eors	r3, r2
   180bc:	b2db      	uxtb	r3, r3
   180be:	2b00      	cmp	r3, #0
   180c0:	d00a      	beq.n	180d8 <checkNotInCall+0x44>
   180c2:	4b0d      	ldr	r3, [pc, #52]	; (180f8 <checkNotInCall+0x64>)
   180c4:	4798      	blx	r3
   180c6:	0003      	movs	r3, r0
   180c8:	001a      	movs	r2, r3
   180ca:	2301      	movs	r3, #1
   180cc:	4053      	eors	r3, r2
   180ce:	b2db      	uxtb	r3, r3
   180d0:	2b00      	cmp	r3, #0
   180d2:	d001      	beq.n	180d8 <checkNotInCall+0x44>
   180d4:	2301      	movs	r3, #1
   180d6:	e000      	b.n	180da <checkNotInCall+0x46>
   180d8:	2300      	movs	r3, #0
   180da:	1c1a      	adds	r2, r3, #0
   180dc:	2301      	movs	r3, #1
   180de:	4013      	ands	r3, r2
   180e0:	b2db      	uxtb	r3, r3
}
   180e2:	0018      	movs	r0, r3
   180e4:	46bd      	mov	sp, r7
   180e6:	bd80      	pop	{r7, pc}
   180e8:	200007d8 	.word	0x200007d8
   180ec:	20000787 	.word	0x20000787
   180f0:	2000076a 	.word	0x2000076a
   180f4:	2000073c 	.word	0x2000073c
   180f8:	00018061 	.word	0x00018061

000180fc <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   180fc:	b580      	push	{r7, lr}
   180fe:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18100:	4b21      	ldr	r3, [pc, #132]	; (18188 <gsm_checkSleepElligible+0x8c>)
   18102:	78db      	ldrb	r3, [r3, #3]
   18104:	2b00      	cmp	r3, #0
   18106:	d021      	beq.n	1814c <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   18108:	4b20      	ldr	r3, [pc, #128]	; (1818c <gsm_checkSleepElligible+0x90>)
   1810a:	781b      	ldrb	r3, [r3, #0]
   1810c:	b2db      	uxtb	r3, r3
   1810e:	2201      	movs	r2, #1
   18110:	4053      	eors	r3, r2
   18112:	b2db      	uxtb	r3, r3
   18114:	2b00      	cmp	r3, #0
   18116:	d013      	beq.n	18140 <gsm_checkSleepElligible+0x44>
   18118:	4b1d      	ldr	r3, [pc, #116]	; (18190 <gsm_checkSleepElligible+0x94>)
   1811a:	4798      	blx	r3
   1811c:	1e03      	subs	r3, r0, #0
   1811e:	d00f      	beq.n	18140 <gsm_checkSleepElligible+0x44>
   18120:	4b1c      	ldr	r3, [pc, #112]	; (18194 <gsm_checkSleepElligible+0x98>)
   18122:	781b      	ldrb	r3, [r3, #0]
   18124:	2201      	movs	r2, #1
   18126:	4053      	eors	r3, r2
   18128:	b2db      	uxtb	r3, r3
   1812a:	2b00      	cmp	r3, #0
   1812c:	d008      	beq.n	18140 <gsm_checkSleepElligible+0x44>
   1812e:	4b1a      	ldr	r3, [pc, #104]	; (18198 <gsm_checkSleepElligible+0x9c>)
   18130:	781b      	ldrb	r3, [r3, #0]
   18132:	2201      	movs	r2, #1
   18134:	4053      	eors	r3, r2
   18136:	b2db      	uxtb	r3, r3
   18138:	2b00      	cmp	r3, #0
   1813a:	d001      	beq.n	18140 <gsm_checkSleepElligible+0x44>
   1813c:	2301      	movs	r3, #1
   1813e:	e000      	b.n	18142 <gsm_checkSleepElligible+0x46>
   18140:	2300      	movs	r3, #0
   18142:	1c1a      	adds	r2, r3, #0
   18144:	2301      	movs	r3, #1
   18146:	4013      	ands	r3, r2
   18148:	b2db      	uxtb	r3, r3
   1814a:	e019      	b.n	18180 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   1814c:	4b0f      	ldr	r3, [pc, #60]	; (1818c <gsm_checkSleepElligible+0x90>)
   1814e:	781b      	ldrb	r3, [r3, #0]
   18150:	b2db      	uxtb	r3, r3
   18152:	2201      	movs	r2, #1
   18154:	4053      	eors	r3, r2
   18156:	b2db      	uxtb	r3, r3
   18158:	2b00      	cmp	r3, #0
   1815a:	d00c      	beq.n	18176 <gsm_checkSleepElligible+0x7a>
   1815c:	4b0c      	ldr	r3, [pc, #48]	; (18190 <gsm_checkSleepElligible+0x94>)
   1815e:	4798      	blx	r3
   18160:	1e03      	subs	r3, r0, #0
   18162:	d008      	beq.n	18176 <gsm_checkSleepElligible+0x7a>
   18164:	4b0c      	ldr	r3, [pc, #48]	; (18198 <gsm_checkSleepElligible+0x9c>)
   18166:	781b      	ldrb	r3, [r3, #0]
   18168:	2201      	movs	r2, #1
   1816a:	4053      	eors	r3, r2
   1816c:	b2db      	uxtb	r3, r3
   1816e:	2b00      	cmp	r3, #0
   18170:	d001      	beq.n	18176 <gsm_checkSleepElligible+0x7a>
   18172:	2301      	movs	r3, #1
   18174:	e000      	b.n	18178 <gsm_checkSleepElligible+0x7c>
   18176:	2300      	movs	r3, #0
   18178:	1c1a      	adds	r2, r3, #0
   1817a:	2301      	movs	r3, #1
   1817c:	4013      	ands	r3, r2
   1817e:	b2db      	uxtb	r3, r3
	}
   18180:	0018      	movs	r0, r3
   18182:	46bd      	mov	sp, r7
   18184:	bd80      	pop	{r7, pc}
   18186:	46c0      	nop			; (mov r8, r8)
   18188:	2000062c 	.word	0x2000062c
   1818c:	20000684 	.word	0x20000684
   18190:	00018095 	.word	0x00018095
   18194:	20000786 	.word	0x20000786
   18198:	200007ce 	.word	0x200007ce

0001819c <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   1819c:	b590      	push	{r4, r7, lr}
   1819e:	b093      	sub	sp, #76	; 0x4c
   181a0:	af02      	add	r7, sp, #8
   181a2:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
   181a4:	4bde      	ldr	r3, [pc, #888]	; (18520 <lcd_displaying_task+0x384>)
   181a6:	2200      	movs	r2, #0
   181a8:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   181aa:	4bde      	ldr	r3, [pc, #888]	; (18524 <lcd_displaying_task+0x388>)
   181ac:	2201      	movs	r2, #1
   181ae:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   181b0:	4bdd      	ldr	r3, [pc, #884]	; (18528 <lcd_displaying_task+0x38c>)
   181b2:	4798      	blx	r3
	LCD_PWR_EN();
   181b4:	4bdd      	ldr	r3, [pc, #884]	; (1852c <lcd_displaying_task+0x390>)
   181b6:	4798      	blx	r3
	vTaskDelay(500);
   181b8:	23fa      	movs	r3, #250	; 0xfa
   181ba:	005b      	lsls	r3, r3, #1
   181bc:	0018      	movs	r0, r3
   181be:	4bdc      	ldr	r3, [pc, #880]	; (18530 <lcd_displaying_task+0x394>)
   181c0:	4798      	blx	r3
	
	LCD_init();
   181c2:	4bdc      	ldr	r3, [pc, #880]	; (18534 <lcd_displaying_task+0x398>)
   181c4:	4798      	blx	r3
	
	uint8_t screen=1;
   181c6:	233f      	movs	r3, #63	; 0x3f
   181c8:	18fb      	adds	r3, r7, r3
   181ca:	2201      	movs	r2, #1
   181cc:	701a      	strb	r2, [r3, #0]
	bool four_sec_timer_is_active = true;
   181ce:	233d      	movs	r3, #61	; 0x3d
   181d0:	18fb      	adds	r3, r7, r3
   181d2:	2201      	movs	r2, #1
   181d4:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
   181d6:	233c      	movs	r3, #60	; 0x3c
   181d8:	18fb      	adds	r3, r7, r3
   181da:	2200      	movs	r2, #0
   181dc:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
   181de:	233a      	movs	r3, #58	; 0x3a
   181e0:	18fb      	adds	r3, r7, r3
   181e2:	2200      	movs	r2, #0
   181e4:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   181e6:	4bd4      	ldr	r3, [pc, #848]	; (18538 <lcd_displaying_task+0x39c>)
   181e8:	4798      	blx	r3
	LCD_setCursor(0,0);
   181ea:	2100      	movs	r1, #0
   181ec:	2000      	movs	r0, #0
   181ee:	4bd3      	ldr	r3, [pc, #844]	; (1853c <lcd_displaying_task+0x3a0>)
   181f0:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   181f2:	4bd3      	ldr	r3, [pc, #844]	; (18540 <lcd_displaying_task+0x3a4>)
   181f4:	0018      	movs	r0, r3
   181f6:	4bd3      	ldr	r3, [pc, #844]	; (18544 <lcd_displaying_task+0x3a8>)
   181f8:	4798      	blx	r3
	LCD_setCursor(0,1);
   181fa:	2101      	movs	r1, #1
   181fc:	2000      	movs	r0, #0
   181fe:	4bcf      	ldr	r3, [pc, #828]	; (1853c <lcd_displaying_task+0x3a0>)
   18200:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   18202:	4bd1      	ldr	r3, [pc, #836]	; (18548 <lcd_displaying_task+0x3ac>)
   18204:	0018      	movs	r0, r3
   18206:	4bcf      	ldr	r3, [pc, #828]	; (18544 <lcd_displaying_task+0x3a8>)
   18208:	4798      	blx	r3
	vTaskDelay(3000);
   1820a:	4bd0      	ldr	r3, [pc, #832]	; (1854c <lcd_displaying_task+0x3b0>)
   1820c:	0018      	movs	r0, r3
   1820e:	4bc8      	ldr	r3, [pc, #800]	; (18530 <lcd_displaying_task+0x394>)
   18210:	4798      	blx	r3
	
	LCD_clear();
   18212:	4bc9      	ldr	r3, [pc, #804]	; (18538 <lcd_displaying_task+0x39c>)
   18214:	4798      	blx	r3
	LCD_setCursor(0,0);
   18216:	2100      	movs	r1, #0
   18218:	2000      	movs	r0, #0
   1821a:	4bc8      	ldr	r3, [pc, #800]	; (1853c <lcd_displaying_task+0x3a0>)
   1821c:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   1821e:	4bcc      	ldr	r3, [pc, #816]	; (18550 <lcd_displaying_task+0x3b4>)
   18220:	0018      	movs	r0, r3
   18222:	4bc8      	ldr	r3, [pc, #800]	; (18544 <lcd_displaying_task+0x3a8>)
   18224:	4798      	blx	r3
	LCD_setCursor(0,1);
   18226:	2101      	movs	r1, #1
   18228:	2000      	movs	r0, #0
   1822a:	4bc4      	ldr	r3, [pc, #784]	; (1853c <lcd_displaying_task+0x3a0>)
   1822c:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   1822e:	4ac9      	ldr	r2, [pc, #804]	; (18554 <lcd_displaying_task+0x3b8>)
   18230:	4bc9      	ldr	r3, [pc, #804]	; (18558 <lcd_displaying_task+0x3bc>)
   18232:	0011      	movs	r1, r2
   18234:	0018      	movs	r0, r3
   18236:	4bc3      	ldr	r3, [pc, #780]	; (18544 <lcd_displaying_task+0x3a8>)
   18238:	4798      	blx	r3
	vTaskDelay(2000);
   1823a:	23fa      	movs	r3, #250	; 0xfa
   1823c:	00db      	lsls	r3, r3, #3
   1823e:	0018      	movs	r0, r3
   18240:	4bbb      	ldr	r3, [pc, #748]	; (18530 <lcd_displaying_task+0x394>)
   18242:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   18244:	23fa      	movs	r3, #250	; 0xfa
   18246:	0119      	lsls	r1, r3, #4
   18248:	4bc4      	ldr	r3, [pc, #784]	; (1855c <lcd_displaying_task+0x3c0>)
   1824a:	9300      	str	r3, [sp, #0]
   1824c:	2300      	movs	r3, #0
   1824e:	2201      	movs	r2, #1
   18250:	2000      	movs	r0, #0
   18252:	4cc3      	ldr	r4, [pc, #780]	; (18560 <lcd_displaying_task+0x3c4>)
   18254:	47a0      	blx	r4
   18256:	0002      	movs	r2, r0
   18258:	4bc2      	ldr	r3, [pc, #776]	; (18564 <lcd_displaying_task+0x3c8>)
   1825a:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   1825c:	4bc1      	ldr	r3, [pc, #772]	; (18564 <lcd_displaying_task+0x3c8>)
   1825e:	681c      	ldr	r4, [r3, #0]
   18260:	4bc1      	ldr	r3, [pc, #772]	; (18568 <lcd_displaying_task+0x3cc>)
   18262:	4798      	blx	r3
   18264:	0002      	movs	r2, r0
   18266:	2300      	movs	r3, #0
   18268:	9300      	str	r3, [sp, #0]
   1826a:	2300      	movs	r3, #0
   1826c:	2101      	movs	r1, #1
   1826e:	0020      	movs	r0, r4
   18270:	4cbe      	ldr	r4, [pc, #760]	; (1856c <lcd_displaying_task+0x3d0>)
   18272:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   18274:	4baa      	ldr	r3, [pc, #680]	; (18520 <lcd_displaying_task+0x384>)
   18276:	781b      	ldrb	r3, [r3, #0]
   18278:	b2db      	uxtb	r3, r3
   1827a:	2b00      	cmp	r3, #0
   1827c:	d009      	beq.n	18292 <lcd_displaying_task+0xf6>
		{
			lcd_in_sleep = false;
   1827e:	4ba8      	ldr	r3, [pc, #672]	; (18520 <lcd_displaying_task+0x384>)
   18280:	2200      	movs	r2, #0
   18282:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   18284:	4ba9      	ldr	r3, [pc, #676]	; (1852c <lcd_displaying_task+0x390>)
   18286:	4798      	blx	r3
			vTaskDelay(100);
   18288:	2064      	movs	r0, #100	; 0x64
   1828a:	4ba9      	ldr	r3, [pc, #676]	; (18530 <lcd_displaying_task+0x394>)
   1828c:	4798      	blx	r3
			LCD_init();
   1828e:	4ba9      	ldr	r3, [pc, #676]	; (18534 <lcd_displaying_task+0x398>)
   18290:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   18292:	4ba4      	ldr	r3, [pc, #656]	; (18524 <lcd_displaying_task+0x388>)
   18294:	781b      	ldrb	r3, [r3, #0]
   18296:	b2db      	uxtb	r3, r3
   18298:	2b00      	cmp	r3, #0
   1829a:	d047      	beq.n	1832c <lcd_displaying_task+0x190>
		{
			setNetworkCharacter=false;
   1829c:	4ba1      	ldr	r3, [pc, #644]	; (18524 <lcd_displaying_task+0x388>)
   1829e:	2200      	movs	r2, #0
   182a0:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   182a2:	2330      	movs	r3, #48	; 0x30
   182a4:	18fb      	adds	r3, r7, r3
   182a6:	0018      	movs	r0, r3
   182a8:	2308      	movs	r3, #8
   182aa:	001a      	movs	r2, r3
   182ac:	2100      	movs	r1, #0
   182ae:	4bb0      	ldr	r3, [pc, #704]	; (18570 <lcd_displaying_task+0x3d4>)
   182b0:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   182b2:	2328      	movs	r3, #40	; 0x28
   182b4:	18fb      	adds	r3, r7, r3
   182b6:	4aaf      	ldr	r2, [pc, #700]	; (18574 <lcd_displaying_task+0x3d8>)
   182b8:	ca03      	ldmia	r2!, {r0, r1}
   182ba:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   182bc:	2320      	movs	r3, #32
   182be:	18fb      	adds	r3, r7, r3
   182c0:	4aad      	ldr	r2, [pc, #692]	; (18578 <lcd_displaying_task+0x3dc>)
   182c2:	ca03      	ldmia	r2!, {r0, r1}
   182c4:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   182c6:	2318      	movs	r3, #24
   182c8:	18fb      	adds	r3, r7, r3
   182ca:	4aac      	ldr	r2, [pc, #688]	; (1857c <lcd_displaying_task+0x3e0>)
   182cc:	ca03      	ldmia	r2!, {r0, r1}
   182ce:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   182d0:	2310      	movs	r3, #16
   182d2:	18fb      	adds	r3, r7, r3
   182d4:	4aaa      	ldr	r2, [pc, #680]	; (18580 <lcd_displaying_task+0x3e4>)
   182d6:	ca03      	ldmia	r2!, {r0, r1}
   182d8:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   182da:	2308      	movs	r3, #8
   182dc:	18fb      	adds	r3, r7, r3
   182de:	4aa9      	ldr	r2, [pc, #676]	; (18584 <lcd_displaying_task+0x3e8>)
   182e0:	ca03      	ldmia	r2!, {r0, r1}
   182e2:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   182e4:	2330      	movs	r3, #48	; 0x30
   182e6:	18fb      	adds	r3, r7, r3
   182e8:	0019      	movs	r1, r3
   182ea:	2000      	movs	r0, #0
   182ec:	4ba6      	ldr	r3, [pc, #664]	; (18588 <lcd_displaying_task+0x3ec>)
   182ee:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   182f0:	2328      	movs	r3, #40	; 0x28
   182f2:	18fb      	adds	r3, r7, r3
   182f4:	0019      	movs	r1, r3
   182f6:	2001      	movs	r0, #1
   182f8:	4ba3      	ldr	r3, [pc, #652]	; (18588 <lcd_displaying_task+0x3ec>)
   182fa:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   182fc:	2320      	movs	r3, #32
   182fe:	18fb      	adds	r3, r7, r3
   18300:	0019      	movs	r1, r3
   18302:	2002      	movs	r0, #2
   18304:	4ba0      	ldr	r3, [pc, #640]	; (18588 <lcd_displaying_task+0x3ec>)
   18306:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   18308:	2318      	movs	r3, #24
   1830a:	18fb      	adds	r3, r7, r3
   1830c:	0019      	movs	r1, r3
   1830e:	2003      	movs	r0, #3
   18310:	4b9d      	ldr	r3, [pc, #628]	; (18588 <lcd_displaying_task+0x3ec>)
   18312:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   18314:	2310      	movs	r3, #16
   18316:	18fb      	adds	r3, r7, r3
   18318:	0019      	movs	r1, r3
   1831a:	2004      	movs	r0, #4
   1831c:	4b9a      	ldr	r3, [pc, #616]	; (18588 <lcd_displaying_task+0x3ec>)
   1831e:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   18320:	2308      	movs	r3, #8
   18322:	18fb      	adds	r3, r7, r3
   18324:	0019      	movs	r1, r3
   18326:	2005      	movs	r0, #5
   18328:	4b97      	ldr	r3, [pc, #604]	; (18588 <lcd_displaying_task+0x3ec>)
   1832a:	4798      	blx	r3

			
		}
		
		
		if(firstEvent)
   1832c:	4b97      	ldr	r3, [pc, #604]	; (1858c <lcd_displaying_task+0x3f0>)
   1832e:	781b      	ldrb	r3, [r3, #0]
   18330:	b2db      	uxtb	r3, r3
   18332:	2b00      	cmp	r3, #0
   18334:	d010      	beq.n	18358 <lcd_displaying_task+0x1bc>
		{
			LCD_setCursor(0,0);
   18336:	2100      	movs	r1, #0
   18338:	2000      	movs	r0, #0
   1833a:	4b80      	ldr	r3, [pc, #512]	; (1853c <lcd_displaying_task+0x3a0>)
   1833c:	4798      	blx	r3
			lcd_printf("Initializing... ");
   1833e:	4b94      	ldr	r3, [pc, #592]	; (18590 <lcd_displaying_task+0x3f4>)
   18340:	0018      	movs	r0, r3
   18342:	4b80      	ldr	r3, [pc, #512]	; (18544 <lcd_displaying_task+0x3a8>)
   18344:	4798      	blx	r3
			LCD_setCursor(0,1);
   18346:	2101      	movs	r1, #1
   18348:	2000      	movs	r0, #0
   1834a:	4b7c      	ldr	r3, [pc, #496]	; (1853c <lcd_displaying_task+0x3a0>)
   1834c:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   1834e:	4b91      	ldr	r3, [pc, #580]	; (18594 <lcd_displaying_task+0x3f8>)
   18350:	0018      	movs	r0, r3
   18352:	4b7c      	ldr	r3, [pc, #496]	; (18544 <lcd_displaying_task+0x3a8>)
   18354:	4798      	blx	r3
   18356:	e22c      	b.n	187b2 <lcd_displaying_task+0x616>
		}
		else
		{
			switch(screen)
   18358:	233f      	movs	r3, #63	; 0x3f
   1835a:	18fb      	adds	r3, r7, r3
   1835c:	781b      	ldrb	r3, [r3, #0]
   1835e:	2b07      	cmp	r3, #7
   18360:	d900      	bls.n	18364 <lcd_displaying_task+0x1c8>
   18362:	e226      	b.n	187b2 <lcd_displaying_task+0x616>
   18364:	009a      	lsls	r2, r3, #2
   18366:	4b8c      	ldr	r3, [pc, #560]	; (18598 <lcd_displaying_task+0x3fc>)
   18368:	18d3      	adds	r3, r2, r3
   1836a:	681b      	ldr	r3, [r3, #0]
   1836c:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   1836e:	2100      	movs	r1, #0
   18370:	2000      	movs	r0, #0
   18372:	4b72      	ldr	r3, [pc, #456]	; (1853c <lcd_displaying_task+0x3a0>)
   18374:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   18376:	4b89      	ldr	r3, [pc, #548]	; (1859c <lcd_displaying_task+0x400>)
   18378:	0018      	movs	r0, r3
   1837a:	4b72      	ldr	r3, [pc, #456]	; (18544 <lcd_displaying_task+0x3a8>)
   1837c:	4798      	blx	r3
					LCD_setCursor(0,1);
   1837e:	2101      	movs	r1, #1
   18380:	2000      	movs	r0, #0
   18382:	4b6e      	ldr	r3, [pc, #440]	; (1853c <lcd_displaying_task+0x3a0>)
   18384:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   18386:	4b86      	ldr	r3, [pc, #536]	; (185a0 <lcd_displaying_task+0x404>)
   18388:	681a      	ldr	r2, [r3, #0]
   1838a:	4b86      	ldr	r3, [pc, #536]	; (185a4 <lcd_displaying_task+0x408>)
   1838c:	0011      	movs	r1, r2
   1838e:	0018      	movs	r0, r3
   18390:	4b6c      	ldr	r3, [pc, #432]	; (18544 <lcd_displaying_task+0x3a8>)
   18392:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   18394:	4b82      	ldr	r3, [pc, #520]	; (185a0 <lcd_displaying_task+0x404>)
   18396:	685a      	ldr	r2, [r3, #4]
   18398:	4b82      	ldr	r3, [pc, #520]	; (185a4 <lcd_displaying_task+0x408>)
   1839a:	0011      	movs	r1, r2
   1839c:	0018      	movs	r0, r3
   1839e:	4b69      	ldr	r3, [pc, #420]	; (18544 <lcd_displaying_task+0x3a8>)
   183a0:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   183a2:	4b7f      	ldr	r3, [pc, #508]	; (185a0 <lcd_displaying_task+0x404>)
   183a4:	689a      	ldr	r2, [r3, #8]
   183a6:	4b80      	ldr	r3, [pc, #512]	; (185a8 <lcd_displaying_task+0x40c>)
   183a8:	0011      	movs	r1, r2
   183aa:	0018      	movs	r0, r3
   183ac:	4b65      	ldr	r3, [pc, #404]	; (18544 <lcd_displaying_task+0x3a8>)
   183ae:	4798      	blx	r3
					break;
   183b0:	e1ff      	b.n	187b2 <lcd_displaying_task+0x616>
				}
				case  2:
				{
					if(!getMotorState())
   183b2:	4b7e      	ldr	r3, [pc, #504]	; (185ac <lcd_displaying_task+0x410>)
   183b4:	4798      	blx	r3
   183b6:	0003      	movs	r3, r0
   183b8:	001a      	movs	r2, r3
   183ba:	2301      	movs	r3, #1
   183bc:	4053      	eors	r3, r2
   183be:	b2db      	uxtb	r3, r3
   183c0:	2b00      	cmp	r3, #0
   183c2:	d010      	beq.n	183e6 <lcd_displaying_task+0x24a>
					{
						LCD_setCursor(0,0);
   183c4:	2100      	movs	r1, #0
   183c6:	2000      	movs	r0, #0
   183c8:	4b5c      	ldr	r3, [pc, #368]	; (1853c <lcd_displaying_task+0x3a0>)
   183ca:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   183cc:	4b78      	ldr	r3, [pc, #480]	; (185b0 <lcd_displaying_task+0x414>)
   183ce:	0018      	movs	r0, r3
   183d0:	4b5c      	ldr	r3, [pc, #368]	; (18544 <lcd_displaying_task+0x3a8>)
   183d2:	4798      	blx	r3
						LCD_setCursor(0,1);
   183d4:	2101      	movs	r1, #1
   183d6:	2000      	movs	r0, #0
   183d8:	4b58      	ldr	r3, [pc, #352]	; (1853c <lcd_displaying_task+0x3a0>)
   183da:	4798      	blx	r3
						lcd_printf("                ");
   183dc:	4b75      	ldr	r3, [pc, #468]	; (185b4 <lcd_displaying_task+0x418>)
   183de:	0018      	movs	r0, r3
   183e0:	4b58      	ldr	r3, [pc, #352]	; (18544 <lcd_displaying_task+0x3a8>)
   183e2:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR CURRENT:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
					}
					break;
   183e4:	e1e5      	b.n	187b2 <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   183e6:	2100      	movs	r1, #0
   183e8:	2000      	movs	r0, #0
   183ea:	4b54      	ldr	r3, [pc, #336]	; (1853c <lcd_displaying_task+0x3a0>)
   183ec:	4798      	blx	r3
						lcd_printf("MOTOR CURRENT:  ");
   183ee:	4b72      	ldr	r3, [pc, #456]	; (185b8 <lcd_displaying_task+0x41c>)
   183f0:	0018      	movs	r0, r3
   183f2:	4b54      	ldr	r3, [pc, #336]	; (18544 <lcd_displaying_task+0x3a8>)
   183f4:	4798      	blx	r3
						LCD_setCursor(0,1);
   183f6:	2101      	movs	r1, #1
   183f8:	2000      	movs	r0, #0
   183fa:	4b50      	ldr	r3, [pc, #320]	; (1853c <lcd_displaying_task+0x3a0>)
   183fc:	4798      	blx	r3
						lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   183fe:	4b68      	ldr	r3, [pc, #416]	; (185a0 <lcd_displaying_task+0x404>)
   18400:	8a9b      	ldrh	r3, [r3, #20]
   18402:	b29b      	uxth	r3, r3
   18404:	0019      	movs	r1, r3
   18406:	4b66      	ldr	r3, [pc, #408]	; (185a0 <lcd_displaying_task+0x404>)
   18408:	8adb      	ldrh	r3, [r3, #22]
   1840a:	b29b      	uxth	r3, r3
   1840c:	001a      	movs	r2, r3
   1840e:	4b6b      	ldr	r3, [pc, #428]	; (185bc <lcd_displaying_task+0x420>)
   18410:	0018      	movs	r0, r3
   18412:	4b4c      	ldr	r3, [pc, #304]	; (18544 <lcd_displaying_task+0x3a8>)
   18414:	4798      	blx	r3
					break;
   18416:	e1cc      	b.n	187b2 <lcd_displaying_task+0x616>
				}
				case  3:
				{
					if(!getMotorState())
   18418:	4b64      	ldr	r3, [pc, #400]	; (185ac <lcd_displaying_task+0x410>)
   1841a:	4798      	blx	r3
   1841c:	0003      	movs	r3, r0
   1841e:	001a      	movs	r2, r3
   18420:	2301      	movs	r3, #1
   18422:	4053      	eors	r3, r2
   18424:	b2db      	uxtb	r3, r3
   18426:	2b00      	cmp	r3, #0
   18428:	d010      	beq.n	1844c <lcd_displaying_task+0x2b0>
					{
						LCD_setCursor(0,0);
   1842a:	2100      	movs	r1, #0
   1842c:	2000      	movs	r0, #0
   1842e:	4b43      	ldr	r3, [pc, #268]	; (1853c <lcd_displaying_task+0x3a0>)
   18430:	4798      	blx	r3
						lcd_printf("MOTOR:  OFF     ");
   18432:	4b5f      	ldr	r3, [pc, #380]	; (185b0 <lcd_displaying_task+0x414>)
   18434:	0018      	movs	r0, r3
   18436:	4b43      	ldr	r3, [pc, #268]	; (18544 <lcd_displaying_task+0x3a8>)
   18438:	4798      	blx	r3
						LCD_setCursor(0,1);
   1843a:	2101      	movs	r1, #1
   1843c:	2000      	movs	r0, #0
   1843e:	4b3f      	ldr	r3, [pc, #252]	; (1853c <lcd_displaying_task+0x3a0>)
   18440:	4798      	blx	r3
						lcd_printf("                ");
   18442:	4b5c      	ldr	r3, [pc, #368]	; (185b4 <lcd_displaying_task+0x418>)
   18444:	0018      	movs	r0, r3
   18446:	4b3f      	ldr	r3, [pc, #252]	; (18544 <lcd_displaying_task+0x3a8>)
   18448:	4798      	blx	r3
						LCD_setCursor(0,0);
						lcd_printf("MOTOR WATTAGE:  ");
						LCD_setCursor(0,1);
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					}
					break;
   1844a:	e1b2      	b.n	187b2 <lcd_displaying_task+0x616>
						LCD_setCursor(0,0);
   1844c:	2100      	movs	r1, #0
   1844e:	2000      	movs	r0, #0
   18450:	4b3a      	ldr	r3, [pc, #232]	; (1853c <lcd_displaying_task+0x3a0>)
   18452:	4798      	blx	r3
						lcd_printf("MOTOR WATTAGE:  ");
   18454:	4b5a      	ldr	r3, [pc, #360]	; (185c0 <lcd_displaying_task+0x424>)
   18456:	0018      	movs	r0, r3
   18458:	4b3a      	ldr	r3, [pc, #232]	; (18544 <lcd_displaying_task+0x3a8>)
   1845a:	4798      	blx	r3
						LCD_setCursor(0,1);
   1845c:	2101      	movs	r1, #1
   1845e:	2000      	movs	r0, #0
   18460:	4b36      	ldr	r3, [pc, #216]	; (1853c <lcd_displaying_task+0x3a0>)
   18462:	4798      	blx	r3
						lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
   18464:	4b4e      	ldr	r3, [pc, #312]	; (185a0 <lcd_displaying_task+0x404>)
   18466:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18468:	b29b      	uxth	r3, r3
   1846a:	0019      	movs	r1, r3
   1846c:	4b4c      	ldr	r3, [pc, #304]	; (185a0 <lcd_displaying_task+0x404>)
   1846e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18470:	4b54      	ldr	r3, [pc, #336]	; (185c4 <lcd_displaying_task+0x428>)
   18472:	0018      	movs	r0, r3
   18474:	4b33      	ldr	r3, [pc, #204]	; (18544 <lcd_displaying_task+0x3a8>)
   18476:	4798      	blx	r3
					break;
   18478:	e19b      	b.n	187b2 <lcd_displaying_task+0x616>
				}
				case 4:
				{
					LCD_setCursor(0,0);
   1847a:	2100      	movs	r1, #0
   1847c:	2000      	movs	r0, #0
   1847e:	4b2f      	ldr	r3, [pc, #188]	; (1853c <lcd_displaying_task+0x3a0>)
   18480:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   18482:	4b51      	ldr	r3, [pc, #324]	; (185c8 <lcd_displaying_task+0x42c>)
   18484:	0018      	movs	r0, r3
   18486:	4b2f      	ldr	r3, [pc, #188]	; (18544 <lcd_displaying_task+0x3a8>)
   18488:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1848a:	4b50      	ldr	r3, [pc, #320]	; (185cc <lcd_displaying_task+0x430>)
   1848c:	781b      	ldrb	r3, [r3, #0]
   1848e:	b2db      	uxtb	r3, r3
   18490:	2b02      	cmp	r3, #2
   18492:	d104      	bne.n	1849e <lcd_displaying_task+0x302>
					{
						lcd_printf(" OK ");
   18494:	4b4e      	ldr	r3, [pc, #312]	; (185d0 <lcd_displaying_task+0x434>)
   18496:	0018      	movs	r0, r3
   18498:	4b2a      	ldr	r3, [pc, #168]	; (18544 <lcd_displaying_task+0x3a8>)
   1849a:	4798      	blx	r3
   1849c:	e003      	b.n	184a6 <lcd_displaying_task+0x30a>
					}
					else
					{
						lcd_printf(" ERR");
   1849e:	4b4d      	ldr	r3, [pc, #308]	; (185d4 <lcd_displaying_task+0x438>)
   184a0:	0018      	movs	r0, r3
   184a2:	4b28      	ldr	r3, [pc, #160]	; (18544 <lcd_displaying_task+0x3a8>)
   184a4:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   184a6:	2101      	movs	r1, #1
   184a8:	2000      	movs	r0, #0
   184aa:	4b24      	ldr	r3, [pc, #144]	; (1853c <lcd_displaying_task+0x3a0>)
   184ac:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   184ae:	4b4a      	ldr	r3, [pc, #296]	; (185d8 <lcd_displaying_task+0x43c>)
   184b0:	0018      	movs	r0, r3
   184b2:	4b24      	ldr	r3, [pc, #144]	; (18544 <lcd_displaying_task+0x3a8>)
   184b4:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   184b6:	4b45      	ldr	r3, [pc, #276]	; (185cc <lcd_displaying_task+0x430>)
   184b8:	785b      	ldrb	r3, [r3, #1]
   184ba:	b2db      	uxtb	r3, r3
   184bc:	2b03      	cmp	r3, #3
   184be:	d104      	bne.n	184ca <lcd_displaying_task+0x32e>
					{
						lcd_printf(" 3PH ");
   184c0:	4b46      	ldr	r3, [pc, #280]	; (185dc <lcd_displaying_task+0x440>)
   184c2:	0018      	movs	r0, r3
   184c4:	4b1f      	ldr	r3, [pc, #124]	; (18544 <lcd_displaying_task+0x3a8>)
   184c6:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   184c8:	e173      	b.n	187b2 <lcd_displaying_task+0x616>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   184ca:	4b40      	ldr	r3, [pc, #256]	; (185cc <lcd_displaying_task+0x430>)
   184cc:	785b      	ldrb	r3, [r3, #1]
   184ce:	b2db      	uxtb	r3, r3
   184d0:	2b02      	cmp	r3, #2
   184d2:	d104      	bne.n	184de <lcd_displaying_task+0x342>
						lcd_printf(" 2PH ");
   184d4:	4b42      	ldr	r3, [pc, #264]	; (185e0 <lcd_displaying_task+0x444>)
   184d6:	0018      	movs	r0, r3
   184d8:	4b1a      	ldr	r3, [pc, #104]	; (18544 <lcd_displaying_task+0x3a8>)
   184da:	4798      	blx	r3
					break;
   184dc:	e169      	b.n	187b2 <lcd_displaying_task+0x616>
						lcd_printf(" OFF");
   184de:	4b41      	ldr	r3, [pc, #260]	; (185e4 <lcd_displaying_task+0x448>)
   184e0:	0018      	movs	r0, r3
   184e2:	4b18      	ldr	r3, [pc, #96]	; (18544 <lcd_displaying_task+0x3a8>)
   184e4:	4798      	blx	r3
					break;
   184e6:	e164      	b.n	187b2 <lcd_displaying_task+0x616>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   184e8:	2100      	movs	r1, #0
   184ea:	2000      	movs	r0, #0
   184ec:	4b13      	ldr	r3, [pc, #76]	; (1853c <lcd_displaying_task+0x3a0>)
   184ee:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   184f0:	4b3d      	ldr	r3, [pc, #244]	; (185e8 <lcd_displaying_task+0x44c>)
   184f2:	0018      	movs	r0, r3
   184f4:	4b13      	ldr	r3, [pc, #76]	; (18544 <lcd_displaying_task+0x3a8>)
   184f6:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   184f8:	4b3c      	ldr	r3, [pc, #240]	; (185ec <lcd_displaying_task+0x450>)
   184fa:	781b      	ldrb	r3, [r3, #0]
   184fc:	b2db      	uxtb	r3, r3
   184fe:	2b02      	cmp	r3, #2
   18500:	d104      	bne.n	1850c <lcd_displaying_task+0x370>
					{
						lcd_printf("HIGH  ");
   18502:	4b3b      	ldr	r3, [pc, #236]	; (185f0 <lcd_displaying_task+0x454>)
   18504:	0018      	movs	r0, r3
   18506:	4b0f      	ldr	r3, [pc, #60]	; (18544 <lcd_displaying_task+0x3a8>)
   18508:	4798      	blx	r3
   1850a:	e07e      	b.n	1860a <lcd_displaying_task+0x46e>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   1850c:	4b37      	ldr	r3, [pc, #220]	; (185ec <lcd_displaying_task+0x450>)
   1850e:	781b      	ldrb	r3, [r3, #0]
   18510:	b2db      	uxtb	r3, r3
   18512:	2b01      	cmp	r3, #1
   18514:	d170      	bne.n	185f8 <lcd_displaying_task+0x45c>
					{
						lcd_printf("MID   ");
   18516:	4b37      	ldr	r3, [pc, #220]	; (185f4 <lcd_displaying_task+0x458>)
   18518:	0018      	movs	r0, r3
   1851a:	4b0a      	ldr	r3, [pc, #40]	; (18544 <lcd_displaying_task+0x3a8>)
   1851c:	4798      	blx	r3
   1851e:	e074      	b.n	1860a <lcd_displaying_task+0x46e>
   18520:	20000863 	.word	0x20000863
   18524:	20000864 	.word	0x20000864
   18528:	00013ab5 	.word	0x00013ab5
   1852c:	00013ae9 	.word	0x00013ae9
   18530:	0001ff69 	.word	0x0001ff69
   18534:	000137f1 	.word	0x000137f1
   18538:	00013d81 	.word	0x00013d81
   1853c:	00013e51 	.word	0x00013e51
   18540:	0002a768 	.word	0x0002a768
   18544:	00013f4d 	.word	0x00013f4d
   18548:	0002a77c 	.word	0x0002a77c
   1854c:	00000bb8 	.word	0x00000bb8
   18550:	0002a790 	.word	0x0002a790
   18554:	0002a7a4 	.word	0x0002a7a4
   18558:	0002a7b8 	.word	0x0002a7b8
   1855c:	0001895d 	.word	0x0001895d
   18560:	00020e89 	.word	0x00020e89
   18564:	20000234 	.word	0x20000234
   18568:	000202cd 	.word	0x000202cd
   1856c:	00020f2d 	.word	0x00020f2d
   18570:	00028e93 	.word	0x00028e93
   18574:	0002a9a0 	.word	0x0002a9a0
   18578:	0002a9a8 	.word	0x0002a9a8
   1857c:	0002a9b0 	.word	0x0002a9b0
   18580:	0002a9b8 	.word	0x0002a9b8
   18584:	0002a9c0 	.word	0x0002a9c0
   18588:	00013df1 	.word	0x00013df1
   1858c:	2000076e 	.word	0x2000076e
   18590:	0002a7bc 	.word	0x0002a7bc
   18594:	0002a7d0 	.word	0x0002a7d0
   18598:	0002a9c8 	.word	0x0002a9c8
   1859c:	0002a7e4 	.word	0x0002a7e4
   185a0:	200006dc 	.word	0x200006dc
   185a4:	0002a7f8 	.word	0x0002a7f8
   185a8:	0002a804 	.word	0x0002a804
   185ac:	0001ac01 	.word	0x0001ac01
   185b0:	0002a80c 	.word	0x0002a80c
   185b4:	0002a820 	.word	0x0002a820
   185b8:	0002a834 	.word	0x0002a834
   185bc:	0002a848 	.word	0x0002a848
   185c0:	0002a860 	.word	0x0002a860
   185c4:	0002a874 	.word	0x0002a874
   185c8:	0002a88c 	.word	0x0002a88c
   185cc:	20000740 	.word	0x20000740
   185d0:	0002a89c 	.word	0x0002a89c
   185d4:	0002a8a4 	.word	0x0002a8a4
   185d8:	0002a8ac 	.word	0x0002a8ac
   185dc:	0002a8bc 	.word	0x0002a8bc
   185e0:	0002a8c4 	.word	0x0002a8c4
   185e4:	0002a8cc 	.word	0x0002a8cc
   185e8:	0002a8d4 	.word	0x0002a8d4
   185ec:	20000788 	.word	0x20000788
   185f0:	0002a8e0 	.word	0x0002a8e0
   185f4:	0002a8e8 	.word	0x0002a8e8
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   185f8:	4ba6      	ldr	r3, [pc, #664]	; (18894 <lcd_displaying_task+0x6f8>)
   185fa:	781b      	ldrb	r3, [r3, #0]
   185fc:	b2db      	uxtb	r3, r3
   185fe:	2b00      	cmp	r3, #0
   18600:	d103      	bne.n	1860a <lcd_displaying_task+0x46e>
					{
						lcd_printf("LOW   ");
   18602:	4ba5      	ldr	r3, [pc, #660]	; (18898 <lcd_displaying_task+0x6fc>)
   18604:	0018      	movs	r0, r3
   18606:	4ba5      	ldr	r3, [pc, #660]	; (1889c <lcd_displaying_task+0x700>)
   18608:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   1860a:	2101      	movs	r1, #1
   1860c:	2000      	movs	r0, #0
   1860e:	4ba4      	ldr	r3, [pc, #656]	; (188a0 <lcd_displaying_task+0x704>)
   18610:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   18612:	4ba4      	ldr	r3, [pc, #656]	; (188a4 <lcd_displaying_task+0x708>)
   18614:	0018      	movs	r0, r3
   18616:	4ba1      	ldr	r3, [pc, #644]	; (1889c <lcd_displaying_task+0x700>)
   18618:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   1861a:	4ba3      	ldr	r3, [pc, #652]	; (188a8 <lcd_displaying_task+0x70c>)
   1861c:	781b      	ldrb	r3, [r3, #0]
   1861e:	2b00      	cmp	r3, #0
   18620:	d104      	bne.n	1862c <lcd_displaying_task+0x490>
					{
						lcd_printf("CRTCL ");
   18622:	4ba2      	ldr	r3, [pc, #648]	; (188ac <lcd_displaying_task+0x710>)
   18624:	0018      	movs	r0, r3
   18626:	4b9d      	ldr	r3, [pc, #628]	; (1889c <lcd_displaying_task+0x700>)
   18628:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   1862a:	e0bf      	b.n	187ac <lcd_displaying_task+0x610>
					else if (undergroundLevel == LOWLEVEL)
   1862c:	4b9e      	ldr	r3, [pc, #632]	; (188a8 <lcd_displaying_task+0x70c>)
   1862e:	781b      	ldrb	r3, [r3, #0]
   18630:	2b01      	cmp	r3, #1
   18632:	d104      	bne.n	1863e <lcd_displaying_task+0x4a2>
						lcd_printf("LOW   ");
   18634:	4b98      	ldr	r3, [pc, #608]	; (18898 <lcd_displaying_task+0x6fc>)
   18636:	0018      	movs	r0, r3
   18638:	4b98      	ldr	r3, [pc, #608]	; (1889c <lcd_displaying_task+0x700>)
   1863a:	4798      	blx	r3
					break;
   1863c:	e0b6      	b.n	187ac <lcd_displaying_task+0x610>
					else if (undergroundLevel == MIDLEVEL)
   1863e:	4b9a      	ldr	r3, [pc, #616]	; (188a8 <lcd_displaying_task+0x70c>)
   18640:	781b      	ldrb	r3, [r3, #0]
   18642:	2b02      	cmp	r3, #2
   18644:	d104      	bne.n	18650 <lcd_displaying_task+0x4b4>
						lcd_printf("MID   ");
   18646:	4b9a      	ldr	r3, [pc, #616]	; (188b0 <lcd_displaying_task+0x714>)
   18648:	0018      	movs	r0, r3
   1864a:	4b94      	ldr	r3, [pc, #592]	; (1889c <lcd_displaying_task+0x700>)
   1864c:	4798      	blx	r3
					break;
   1864e:	e0ad      	b.n	187ac <lcd_displaying_task+0x610>
					else if (undergroundLevel == HIGHLEVEL)
   18650:	4b95      	ldr	r3, [pc, #596]	; (188a8 <lcd_displaying_task+0x70c>)
   18652:	781b      	ldrb	r3, [r3, #0]
   18654:	2b03      	cmp	r3, #3
   18656:	d000      	beq.n	1865a <lcd_displaying_task+0x4be>
   18658:	e0a8      	b.n	187ac <lcd_displaying_task+0x610>
						lcd_printf("HIGH  ");
   1865a:	4b96      	ldr	r3, [pc, #600]	; (188b4 <lcd_displaying_task+0x718>)
   1865c:	0018      	movs	r0, r3
   1865e:	4b8f      	ldr	r3, [pc, #572]	; (1889c <lcd_displaying_task+0x700>)
   18660:	4798      	blx	r3
					break;
   18662:	e0a3      	b.n	187ac <lcd_displaying_task+0x610>
				}
				case 6:
				{
					LCD_setCursor(0,0);
   18664:	2100      	movs	r1, #0
   18666:	2000      	movs	r0, #0
   18668:	4b8d      	ldr	r3, [pc, #564]	; (188a0 <lcd_displaying_task+0x704>)
   1866a:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   1866c:	4b92      	ldr	r3, [pc, #584]	; (188b8 <lcd_displaying_task+0x71c>)
   1866e:	7f1b      	ldrb	r3, [r3, #28]
   18670:	b2db      	uxtb	r3, r3
   18672:	001a      	movs	r2, r3
   18674:	4b91      	ldr	r3, [pc, #580]	; (188bc <lcd_displaying_task+0x720>)
   18676:	0011      	movs	r1, r2
   18678:	0018      	movs	r0, r3
   1867a:	4b88      	ldr	r3, [pc, #544]	; (1889c <lcd_displaying_task+0x700>)
   1867c:	4798      	blx	r3
					LCD_setCursor(0,1);
   1867e:	2101      	movs	r1, #1
   18680:	2000      	movs	r0, #0
   18682:	4b87      	ldr	r3, [pc, #540]	; (188a0 <lcd_displaying_task+0x704>)
   18684:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   18686:	4b8e      	ldr	r3, [pc, #568]	; (188c0 <lcd_displaying_task+0x724>)
   18688:	0018      	movs	r0, r3
   1868a:	4b84      	ldr	r3, [pc, #528]	; (1889c <lcd_displaying_task+0x700>)
   1868c:	4798      	blx	r3
					LCD_setCursor(9,1);
   1868e:	2101      	movs	r1, #1
   18690:	2009      	movs	r0, #9
   18692:	4b83      	ldr	r3, [pc, #524]	; (188a0 <lcd_displaying_task+0x704>)
   18694:	4798      	blx	r3
					lcd_printf("       ");
   18696:	4b8b      	ldr	r3, [pc, #556]	; (188c4 <lcd_displaying_task+0x728>)
   18698:	0018      	movs	r0, r3
   1869a:	4b80      	ldr	r3, [pc, #512]	; (1889c <lcd_displaying_task+0x700>)
   1869c:	4798      	blx	r3
					LCD_setCursor(9,1);
   1869e:	2101      	movs	r1, #1
   186a0:	2009      	movs	r0, #9
   186a2:	4b7f      	ldr	r3, [pc, #508]	; (188a0 <lcd_displaying_task+0x704>)
   186a4:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   186a6:	233b      	movs	r3, #59	; 0x3b
   186a8:	18fb      	adds	r3, r7, r3
   186aa:	4a87      	ldr	r2, [pc, #540]	; (188c8 <lcd_displaying_task+0x72c>)
   186ac:	7812      	ldrb	r2, [r2, #0]
   186ae:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   186b0:	233e      	movs	r3, #62	; 0x3e
   186b2:	18fb      	adds	r3, r7, r3
   186b4:	2200      	movs	r2, #0
   186b6:	701a      	strb	r2, [r3, #0]
   186b8:	e00c      	b.n	186d4 <lcd_displaying_task+0x538>
					{
						LCD_write(i);
   186ba:	233e      	movs	r3, #62	; 0x3e
   186bc:	18fb      	adds	r3, r7, r3
   186be:	781b      	ldrb	r3, [r3, #0]
   186c0:	0018      	movs	r0, r3
   186c2:	4b82      	ldr	r3, [pc, #520]	; (188cc <lcd_displaying_task+0x730>)
   186c4:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   186c6:	233e      	movs	r3, #62	; 0x3e
   186c8:	18fb      	adds	r3, r7, r3
   186ca:	781a      	ldrb	r2, [r3, #0]
   186cc:	233e      	movs	r3, #62	; 0x3e
   186ce:	18fb      	adds	r3, r7, r3
   186d0:	3201      	adds	r2, #1
   186d2:	701a      	strb	r2, [r3, #0]
   186d4:	233e      	movs	r3, #62	; 0x3e
   186d6:	18fa      	adds	r2, r7, r3
   186d8:	233b      	movs	r3, #59	; 0x3b
   186da:	18fb      	adds	r3, r7, r3
   186dc:	7812      	ldrb	r2, [r2, #0]
   186de:	781b      	ldrb	r3, [r3, #0]
   186e0:	429a      	cmp	r2, r3
   186e2:	d9ea      	bls.n	186ba <lcd_displaying_task+0x51e>
					}

					break;
   186e4:	e065      	b.n	187b2 <lcd_displaying_task+0x616>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   186e6:	2100      	movs	r1, #0
   186e8:	2000      	movs	r0, #0
   186ea:	4b6d      	ldr	r3, [pc, #436]	; (188a0 <lcd_displaying_task+0x704>)
   186ec:	4798      	blx	r3
					switch(callStateOnLCD)
   186ee:	4b78      	ldr	r3, [pc, #480]	; (188d0 <lcd_displaying_task+0x734>)
   186f0:	781b      	ldrb	r3, [r3, #0]
   186f2:	2b05      	cmp	r3, #5
   186f4:	d85c      	bhi.n	187b0 <lcd_displaying_task+0x614>
   186f6:	009a      	lsls	r2, r3, #2
   186f8:	4b76      	ldr	r3, [pc, #472]	; (188d4 <lcd_displaying_task+0x738>)
   186fa:	18d3      	adds	r3, r2, r3
   186fc:	681b      	ldr	r3, [r3, #0]
   186fe:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   18700:	4b75      	ldr	r3, [pc, #468]	; (188d8 <lcd_displaying_task+0x73c>)
   18702:	0018      	movs	r0, r3
   18704:	4b65      	ldr	r3, [pc, #404]	; (1889c <lcd_displaying_task+0x700>)
   18706:	4798      	blx	r3
							LCD_setCursor(0,1);
   18708:	2101      	movs	r1, #1
   1870a:	2000      	movs	r0, #0
   1870c:	4b64      	ldr	r3, [pc, #400]	; (188a0 <lcd_displaying_task+0x704>)
   1870e:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18710:	4a72      	ldr	r2, [pc, #456]	; (188dc <lcd_displaying_task+0x740>)
   18712:	4b73      	ldr	r3, [pc, #460]	; (188e0 <lcd_displaying_task+0x744>)
   18714:	0011      	movs	r1, r2
   18716:	0018      	movs	r0, r3
   18718:	4b60      	ldr	r3, [pc, #384]	; (1889c <lcd_displaying_task+0x700>)
   1871a:	4798      	blx	r3
							break;
   1871c:	e045      	b.n	187aa <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   1871e:	4b71      	ldr	r3, [pc, #452]	; (188e4 <lcd_displaying_task+0x748>)
   18720:	0018      	movs	r0, r3
   18722:	4b5e      	ldr	r3, [pc, #376]	; (1889c <lcd_displaying_task+0x700>)
   18724:	4798      	blx	r3
							LCD_setCursor(0,1);
   18726:	2101      	movs	r1, #1
   18728:	2000      	movs	r0, #0
   1872a:	4b5d      	ldr	r3, [pc, #372]	; (188a0 <lcd_displaying_task+0x704>)
   1872c:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1872e:	4a6b      	ldr	r2, [pc, #428]	; (188dc <lcd_displaying_task+0x740>)
   18730:	4b6b      	ldr	r3, [pc, #428]	; (188e0 <lcd_displaying_task+0x744>)
   18732:	0011      	movs	r1, r2
   18734:	0018      	movs	r0, r3
   18736:	4b59      	ldr	r3, [pc, #356]	; (1889c <lcd_displaying_task+0x700>)
   18738:	4798      	blx	r3
							break;
   1873a:	e036      	b.n	187aa <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   1873c:	4b6a      	ldr	r3, [pc, #424]	; (188e8 <lcd_displaying_task+0x74c>)
   1873e:	0018      	movs	r0, r3
   18740:	4b56      	ldr	r3, [pc, #344]	; (1889c <lcd_displaying_task+0x700>)
   18742:	4798      	blx	r3
							LCD_setCursor(0,1);
   18744:	2101      	movs	r1, #1
   18746:	2000      	movs	r0, #0
   18748:	4b55      	ldr	r3, [pc, #340]	; (188a0 <lcd_displaying_task+0x704>)
   1874a:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1874c:	4a63      	ldr	r2, [pc, #396]	; (188dc <lcd_displaying_task+0x740>)
   1874e:	4b64      	ldr	r3, [pc, #400]	; (188e0 <lcd_displaying_task+0x744>)
   18750:	0011      	movs	r1, r2
   18752:	0018      	movs	r0, r3
   18754:	4b51      	ldr	r3, [pc, #324]	; (1889c <lcd_displaying_task+0x700>)
   18756:	4798      	blx	r3
							break;
   18758:	e027      	b.n	187aa <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   1875a:	4b64      	ldr	r3, [pc, #400]	; (188ec <lcd_displaying_task+0x750>)
   1875c:	0018      	movs	r0, r3
   1875e:	4b4f      	ldr	r3, [pc, #316]	; (1889c <lcd_displaying_task+0x700>)
   18760:	4798      	blx	r3
							LCD_setCursor(0,1);
   18762:	2101      	movs	r1, #1
   18764:	2000      	movs	r0, #0
   18766:	4b4e      	ldr	r3, [pc, #312]	; (188a0 <lcd_displaying_task+0x704>)
   18768:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1876a:	4a5c      	ldr	r2, [pc, #368]	; (188dc <lcd_displaying_task+0x740>)
   1876c:	4b5c      	ldr	r3, [pc, #368]	; (188e0 <lcd_displaying_task+0x744>)
   1876e:	0011      	movs	r1, r2
   18770:	0018      	movs	r0, r3
   18772:	4b4a      	ldr	r3, [pc, #296]	; (1889c <lcd_displaying_task+0x700>)
   18774:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   18776:	2200      	movs	r2, #0
   18778:	2100      	movs	r1, #0
   1877a:	2000      	movs	r0, #0
   1877c:	4b5c      	ldr	r3, [pc, #368]	; (188f0 <lcd_displaying_task+0x754>)
   1877e:	4798      	blx	r3
							break;
   18780:	e013      	b.n	187aa <lcd_displaying_task+0x60e>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   18782:	4b5c      	ldr	r3, [pc, #368]	; (188f4 <lcd_displaying_task+0x758>)
   18784:	0018      	movs	r0, r3
   18786:	4b45      	ldr	r3, [pc, #276]	; (1889c <lcd_displaying_task+0x700>)
   18788:	4798      	blx	r3
							LCD_setCursor(0,1);
   1878a:	2101      	movs	r1, #1
   1878c:	2000      	movs	r0, #0
   1878e:	4b44      	ldr	r3, [pc, #272]	; (188a0 <lcd_displaying_task+0x704>)
   18790:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   18792:	4a52      	ldr	r2, [pc, #328]	; (188dc <lcd_displaying_task+0x740>)
   18794:	4b52      	ldr	r3, [pc, #328]	; (188e0 <lcd_displaying_task+0x744>)
   18796:	0011      	movs	r1, r2
   18798:	0018      	movs	r0, r3
   1879a:	4b40      	ldr	r3, [pc, #256]	; (1889c <lcd_displaying_task+0x700>)
   1879c:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   1879e:	2200      	movs	r2, #0
   187a0:	2100      	movs	r1, #0
   187a2:	2000      	movs	r0, #0
   187a4:	4b52      	ldr	r3, [pc, #328]	; (188f0 <lcd_displaying_task+0x754>)
   187a6:	4798      	blx	r3
							break;
   187a8:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   187aa:	e001      	b.n	187b0 <lcd_displaying_task+0x614>
					break;
   187ac:	46c0      	nop			; (mov r8, r8)
   187ae:	e000      	b.n	187b2 <lcd_displaying_task+0x616>
					break;
   187b0:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   187b2:	4b51      	ldr	r3, [pc, #324]	; (188f8 <lcd_displaying_task+0x75c>)
   187b4:	681b      	ldr	r3, [r3, #0]
   187b6:	223a      	movs	r2, #58	; 0x3a
   187b8:	18b9      	adds	r1, r7, r2
   187ba:	2200      	movs	r2, #0
   187bc:	0018      	movs	r0, r3
   187be:	4b4f      	ldr	r3, [pc, #316]	; (188fc <lcd_displaying_task+0x760>)
   187c0:	4798      	blx	r3
   187c2:	1e03      	subs	r3, r0, #0
   187c4:	d057      	beq.n	18876 <lcd_displaying_task+0x6da>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   187c6:	4b4e      	ldr	r3, [pc, #312]	; (18900 <lcd_displaying_task+0x764>)
   187c8:	6818      	ldr	r0, [r3, #0]
   187ca:	23fa      	movs	r3, #250	; 0xfa
   187cc:	011a      	lsls	r2, r3, #4
   187ce:	2301      	movs	r3, #1
   187d0:	425b      	negs	r3, r3
   187d2:	9300      	str	r3, [sp, #0]
   187d4:	2300      	movs	r3, #0
   187d6:	2104      	movs	r1, #4
   187d8:	4c4a      	ldr	r4, [pc, #296]	; (18904 <lcd_displaying_task+0x768>)
   187da:	47a0      	blx	r4
			if(varPauseDisplay==false)
   187dc:	4b4a      	ldr	r3, [pc, #296]	; (18908 <lcd_displaying_task+0x76c>)
   187de:	781b      	ldrb	r3, [r3, #0]
   187e0:	b2db      	uxtb	r3, r3
   187e2:	2201      	movs	r2, #1
   187e4:	4053      	eors	r3, r2
   187e6:	b2db      	uxtb	r3, r3
   187e8:	2b00      	cmp	r3, #0
   187ea:	d044      	beq.n	18876 <lcd_displaying_task+0x6da>
			{
				screen++;
   187ec:	233f      	movs	r3, #63	; 0x3f
   187ee:	18fb      	adds	r3, r7, r3
   187f0:	781a      	ldrb	r2, [r3, #0]
   187f2:	233f      	movs	r3, #63	; 0x3f
   187f4:	18fb      	adds	r3, r7, r3
   187f6:	3201      	adds	r2, #1
   187f8:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==3)
   187fa:	4b44      	ldr	r3, [pc, #272]	; (1890c <lcd_displaying_task+0x770>)
   187fc:	4798      	blx	r3
   187fe:	0003      	movs	r3, r0
   18800:	001a      	movs	r2, r3
   18802:	2301      	movs	r3, #1
   18804:	4053      	eors	r3, r2
   18806:	b2db      	uxtb	r3, r3
   18808:	2b00      	cmp	r3, #0
   1880a:	d00b      	beq.n	18824 <lcd_displaying_task+0x688>
   1880c:	233f      	movs	r3, #63	; 0x3f
   1880e:	18fb      	adds	r3, r7, r3
   18810:	781b      	ldrb	r3, [r3, #0]
   18812:	2b03      	cmp	r3, #3
   18814:	d106      	bne.n	18824 <lcd_displaying_task+0x688>
				{
					screen++;
   18816:	233f      	movs	r3, #63	; 0x3f
   18818:	18fb      	adds	r3, r7, r3
   1881a:	781a      	ldrb	r2, [r3, #0]
   1881c:	233f      	movs	r3, #63	; 0x3f
   1881e:	18fb      	adds	r3, r7, r3
   18820:	3201      	adds	r2, #1
   18822:	701a      	strb	r2, [r3, #0]
				}
				
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==5)
   18824:	4b3a      	ldr	r3, [pc, #232]	; (18910 <lcd_displaying_task+0x774>)
   18826:	795b      	ldrb	r3, [r3, #5]
   18828:	2b00      	cmp	r3, #0
   1882a:	d10b      	bne.n	18844 <lcd_displaying_task+0x6a8>
   1882c:	233f      	movs	r3, #63	; 0x3f
   1882e:	18fb      	adds	r3, r7, r3
   18830:	781b      	ldrb	r3, [r3, #0]
   18832:	2b05      	cmp	r3, #5
   18834:	d106      	bne.n	18844 <lcd_displaying_task+0x6a8>
				{
					screen++;
   18836:	233f      	movs	r3, #63	; 0x3f
   18838:	18fb      	adds	r3, r7, r3
   1883a:	781a      	ldrb	r2, [r3, #0]
   1883c:	233f      	movs	r3, #63	; 0x3f
   1883e:	18fb      	adds	r3, r7, r3
   18840:	3201      	adds	r2, #1
   18842:	701a      	strb	r2, [r3, #0]
				}
				
				{
					if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==7)
   18844:	4b22      	ldr	r3, [pc, #136]	; (188d0 <lcd_displaying_task+0x734>)
   18846:	781b      	ldrb	r3, [r3, #0]
   18848:	2b00      	cmp	r3, #0
   1884a:	d10c      	bne.n	18866 <lcd_displaying_task+0x6ca>
   1884c:	233f      	movs	r3, #63	; 0x3f
   1884e:	18fb      	adds	r3, r7, r3
   18850:	781b      	ldrb	r3, [r3, #0]
   18852:	2b07      	cmp	r3, #7
   18854:	d107      	bne.n	18866 <lcd_displaying_task+0x6ca>
					{
						screen++;
   18856:	233f      	movs	r3, #63	; 0x3f
   18858:	18fb      	adds	r3, r7, r3
   1885a:	781a      	ldrb	r2, [r3, #0]
   1885c:	233f      	movs	r3, #63	; 0x3f
   1885e:	18fb      	adds	r3, r7, r3
   18860:	3201      	adds	r2, #1
   18862:	701a      	strb	r2, [r3, #0]
   18864:	e007      	b.n	18876 <lcd_displaying_task+0x6da>
					}
					else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   18866:	4b1a      	ldr	r3, [pc, #104]	; (188d0 <lcd_displaying_task+0x734>)
   18868:	781b      	ldrb	r3, [r3, #0]
   1886a:	2b00      	cmp	r3, #0
   1886c:	d003      	beq.n	18876 <lcd_displaying_task+0x6da>
					{
						screen=7;
   1886e:	233f      	movs	r3, #63	; 0x3f
   18870:	18fb      	adds	r3, r7, r3
   18872:	2207      	movs	r2, #7
   18874:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		
		if (screen>7)
   18876:	233f      	movs	r3, #63	; 0x3f
   18878:	18fb      	adds	r3, r7, r3
   1887a:	781b      	ldrb	r3, [r3, #0]
   1887c:	2b07      	cmp	r3, #7
   1887e:	d903      	bls.n	18888 <lcd_displaying_task+0x6ec>
		{
			screen=1;
   18880:	233f      	movs	r3, #63	; 0x3f
   18882:	18fb      	adds	r3, r7, r3
   18884:	2201      	movs	r2, #1
   18886:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
   18888:	23fa      	movs	r3, #250	; 0xfa
   1888a:	005b      	lsls	r3, r3, #1
   1888c:	0018      	movs	r0, r3
   1888e:	4b21      	ldr	r3, [pc, #132]	; (18914 <lcd_displaying_task+0x778>)
   18890:	4798      	blx	r3
		if (lcd_in_sleep)
   18892:	e4ef      	b.n	18274 <lcd_displaying_task+0xd8>
   18894:	20000788 	.word	0x20000788
   18898:	0002a8f0 	.word	0x0002a8f0
   1889c:	00013f4d 	.word	0x00013f4d
   188a0:	00013e51 	.word	0x00013e51
   188a4:	0002a8f8 	.word	0x0002a8f8
   188a8:	20000858 	.word	0x20000858
   188ac:	0002a904 	.word	0x0002a904
   188b0:	0002a8e8 	.word	0x0002a8e8
   188b4:	0002a8e0 	.word	0x0002a8e0
   188b8:	200006dc 	.word	0x200006dc
   188bc:	0002a90c 	.word	0x0002a90c
   188c0:	0002a920 	.word	0x0002a920
   188c4:	0002a92c 	.word	0x0002a92c
   188c8:	20000781 	.word	0x20000781
   188cc:	00013d05 	.word	0x00013d05
   188d0:	200007cd 	.word	0x200007cd
   188d4:	0002a9e8 	.word	0x0002a9e8
   188d8:	0002a934 	.word	0x0002a934
   188dc:	20000844 	.word	0x20000844
   188e0:	0002a948 	.word	0x0002a948
   188e4:	0002a950 	.word	0x0002a950
   188e8:	0002a964 	.word	0x0002a964
   188ec:	0002a978 	.word	0x0002a978
   188f0:	0001cbbd 	.word	0x0001cbbd
   188f4:	0002a98c 	.word	0x0002a98c
   188f8:	20000230 	.word	0x20000230
   188fc:	0001f4c1 	.word	0x0001f4c1
   18900:	20000234 	.word	0x20000234
   18904:	00020f2d 	.word	0x00020f2d
   18908:	200007a4 	.word	0x200007a4
   1890c:	0001ac01 	.word	0x0001ac01
   18910:	2000062c 	.word	0x2000062c
   18914:	0001ff69 	.word	0x0001ff69

00018918 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   18918:	b590      	push	{r4, r7, lr}
   1891a:	b083      	sub	sp, #12
   1891c:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   1891e:	2200      	movs	r2, #0
   18920:	2101      	movs	r1, #1
   18922:	2001      	movs	r0, #1
   18924:	4b09      	ldr	r3, [pc, #36]	; (1894c <start_lcd_service+0x34>)
   18926:	4798      	blx	r3
   18928:	0002      	movs	r2, r0
   1892a:	4b09      	ldr	r3, [pc, #36]	; (18950 <start_lcd_service+0x38>)
   1892c:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
   1892e:	23c8      	movs	r3, #200	; 0xc8
   18930:	005a      	lsls	r2, r3, #1
   18932:	4808      	ldr	r0, [pc, #32]	; (18954 <start_lcd_service+0x3c>)
   18934:	2300      	movs	r3, #0
   18936:	9301      	str	r3, [sp, #4]
   18938:	2301      	movs	r3, #1
   1893a:	9300      	str	r3, [sp, #0]
   1893c:	2300      	movs	r3, #0
   1893e:	2100      	movs	r1, #0
   18940:	4c05      	ldr	r4, [pc, #20]	; (18958 <start_lcd_service+0x40>)
   18942:	47a0      	blx	r4
	
}
   18944:	46c0      	nop			; (mov r8, r8)
   18946:	46bd      	mov	sp, r7
   18948:	b001      	add	sp, #4
   1894a:	bd90      	pop	{r4, r7, pc}
   1894c:	0001f105 	.word	0x0001f105
   18950:	20000230 	.word	0x20000230
   18954:	0001819d 	.word	0x0001819d
   18958:	0001fc29 	.word	0x0001fc29

0001895c <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   1895c:	b590      	push	{r4, r7, lr}
   1895e:	b085      	sub	sp, #20
   18960:	af00      	add	r7, sp, #0
   18962:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   18964:	230f      	movs	r3, #15
   18966:	18fb      	adds	r3, r7, r3
   18968:	2201      	movs	r2, #1
   1896a:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   1896c:	4b05      	ldr	r3, [pc, #20]	; (18984 <four_second_timer_callback+0x28>)
   1896e:	6818      	ldr	r0, [r3, #0]
   18970:	230f      	movs	r3, #15
   18972:	18f9      	adds	r1, r7, r3
   18974:	2300      	movs	r3, #0
   18976:	2200      	movs	r2, #0
   18978:	4c03      	ldr	r4, [pc, #12]	; (18988 <four_second_timer_callback+0x2c>)
   1897a:	47a0      	blx	r4
}
   1897c:	46c0      	nop			; (mov r8, r8)
   1897e:	46bd      	mov	sp, r7
   18980:	b005      	add	sp, #20
   18982:	bd90      	pop	{r4, r7, pc}
   18984:	20000230 	.word	0x20000230
   18988:	0001f3a1 	.word	0x0001f3a1

0001898c <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   1898c:	b580      	push	{r7, lr}
   1898e:	b084      	sub	sp, #16
   18990:	af00      	add	r7, sp, #0
   18992:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	681b      	ldr	r3, [r3, #0]
   18998:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1899a:	68fb      	ldr	r3, [r7, #12]
   1899c:	7a5b      	ldrb	r3, [r3, #9]
   1899e:	b2db      	uxtb	r3, r3
   189a0:	b25b      	sxtb	r3, r3
   189a2:	2b00      	cmp	r3, #0
   189a4:	da01      	bge.n	189aa <ac_is_syncing+0x1e>
		return true;
   189a6:	2301      	movs	r3, #1
   189a8:	e000      	b.n	189ac <ac_is_syncing+0x20>
	}

	return false;
   189aa:	2300      	movs	r3, #0
#endif
}
   189ac:	0018      	movs	r0, r3
   189ae:	46bd      	mov	sp, r7
   189b0:	b004      	add	sp, #16
   189b2:	bd80      	pop	{r7, pc}

000189b4 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   189b4:	b580      	push	{r7, lr}
   189b6:	b084      	sub	sp, #16
   189b8:	af00      	add	r7, sp, #0
   189ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   189bc:	2300      	movs	r3, #0
   189be:	60fb      	str	r3, [r7, #12]
   189c0:	e007      	b.n	189d2 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   189c2:	687a      	ldr	r2, [r7, #4]
   189c4:	68fb      	ldr	r3, [r7, #12]
   189c6:	18d3      	adds	r3, r2, r3
   189c8:	2200      	movs	r2, #0
   189ca:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   189cc:	68fb      	ldr	r3, [r7, #12]
   189ce:	3301      	adds	r3, #1
   189d0:	60fb      	str	r3, [r7, #12]
   189d2:	68fb      	ldr	r3, [r7, #12]
   189d4:	2b00      	cmp	r3, #0
   189d6:	d0f4      	beq.n	189c2 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   189d8:	687b      	ldr	r3, [r7, #4]
   189da:	2200      	movs	r2, #0
   189dc:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   189de:	687b      	ldr	r3, [r7, #4]
   189e0:	2203      	movs	r2, #3
   189e2:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   189e4:	46c0      	nop			; (mov r8, r8)
   189e6:	46bd      	mov	sp, r7
   189e8:	b004      	add	sp, #16
   189ea:	bd80      	pop	{r7, pc}

000189ec <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   189ec:	b580      	push	{r7, lr}
   189ee:	b084      	sub	sp, #16
   189f0:	af00      	add	r7, sp, #0
   189f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   189f4:	687b      	ldr	r3, [r7, #4]
   189f6:	681b      	ldr	r3, [r3, #0]
   189f8:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   189fa:	46c0      	nop			; (mov r8, r8)
   189fc:	687b      	ldr	r3, [r7, #4]
   189fe:	0018      	movs	r0, r3
   18a00:	4b07      	ldr	r3, [pc, #28]	; (18a20 <ac_enable+0x34>)
   18a02:	4798      	blx	r3
   18a04:	1e03      	subs	r3, r0, #0
   18a06:	d1f9      	bne.n	189fc <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   18a08:	68fb      	ldr	r3, [r7, #12]
   18a0a:	781b      	ldrb	r3, [r3, #0]
   18a0c:	b2db      	uxtb	r3, r3
   18a0e:	2202      	movs	r2, #2
   18a10:	4313      	orrs	r3, r2
   18a12:	b2da      	uxtb	r2, r3
   18a14:	68fb      	ldr	r3, [r7, #12]
   18a16:	701a      	strb	r2, [r3, #0]
}
   18a18:	46c0      	nop			; (mov r8, r8)
   18a1a:	46bd      	mov	sp, r7
   18a1c:	b004      	add	sp, #16
   18a1e:	bd80      	pop	{r7, pc}
   18a20:	0001898d 	.word	0x0001898d

00018a24 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   18a24:	b580      	push	{r7, lr}
   18a26:	b086      	sub	sp, #24
   18a28:	af00      	add	r7, sp, #0
   18a2a:	6078      	str	r0, [r7, #4]
   18a2c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   18a2e:	687b      	ldr	r3, [r7, #4]
   18a30:	681b      	ldr	r3, [r3, #0]
   18a32:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   18a34:	2300      	movs	r3, #0
   18a36:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18a38:	2313      	movs	r3, #19
   18a3a:	18fb      	adds	r3, r7, r3
   18a3c:	2200      	movs	r2, #0
   18a3e:	701a      	strb	r2, [r3, #0]
   18a40:	e017      	b.n	18a72 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   18a42:	2313      	movs	r3, #19
   18a44:	18fb      	adds	r3, r7, r3
   18a46:	781b      	ldrb	r3, [r3, #0]
   18a48:	683a      	ldr	r2, [r7, #0]
   18a4a:	5cd3      	ldrb	r3, [r2, r3]
   18a4c:	2b00      	cmp	r3, #0
   18a4e:	d009      	beq.n	18a64 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   18a50:	2313      	movs	r3, #19
   18a52:	18fb      	adds	r3, r7, r3
   18a54:	781b      	ldrb	r3, [r3, #0]
   18a56:	2210      	movs	r2, #16
   18a58:	409a      	lsls	r2, r3
   18a5a:	0013      	movs	r3, r2
   18a5c:	001a      	movs	r2, r3
   18a5e:	697b      	ldr	r3, [r7, #20]
   18a60:	4313      	orrs	r3, r2
   18a62:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   18a64:	2313      	movs	r3, #19
   18a66:	18fb      	adds	r3, r7, r3
   18a68:	781a      	ldrb	r2, [r3, #0]
   18a6a:	2313      	movs	r3, #19
   18a6c:	18fb      	adds	r3, r7, r3
   18a6e:	3201      	adds	r2, #1
   18a70:	701a      	strb	r2, [r3, #0]
   18a72:	2313      	movs	r3, #19
   18a74:	18fb      	adds	r3, r7, r3
   18a76:	781b      	ldrb	r3, [r3, #0]
   18a78:	2b00      	cmp	r3, #0
   18a7a:	d0e2      	beq.n	18a42 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18a7c:	2312      	movs	r3, #18
   18a7e:	18fb      	adds	r3, r7, r3
   18a80:	2200      	movs	r2, #0
   18a82:	701a      	strb	r2, [r3, #0]
   18a84:	e02b      	b.n	18ade <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   18a86:	2312      	movs	r3, #18
   18a88:	18fb      	adds	r3, r7, r3
   18a8a:	781b      	ldrb	r3, [r3, #0]
   18a8c:	683a      	ldr	r2, [r7, #0]
   18a8e:	18d3      	adds	r3, r2, r3
   18a90:	78db      	ldrb	r3, [r3, #3]
   18a92:	2b00      	cmp	r3, #0
   18a94:	d00a      	beq.n	18aac <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   18a96:	2312      	movs	r3, #18
   18a98:	18fb      	adds	r3, r7, r3
   18a9a:	781b      	ldrb	r3, [r3, #0]
   18a9c:	2280      	movs	r2, #128	; 0x80
   18a9e:	0052      	lsls	r2, r2, #1
   18aa0:	409a      	lsls	r2, r3
   18aa2:	0013      	movs	r3, r2
   18aa4:	001a      	movs	r2, r3
   18aa6:	697b      	ldr	r3, [r7, #20]
   18aa8:	4313      	orrs	r3, r2
   18aaa:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   18aac:	2312      	movs	r3, #18
   18aae:	18fb      	adds	r3, r7, r3
   18ab0:	781b      	ldrb	r3, [r3, #0]
   18ab2:	683a      	ldr	r2, [r7, #0]
   18ab4:	18d3      	adds	r3, r2, r3
   18ab6:	785b      	ldrb	r3, [r3, #1]
   18ab8:	2b00      	cmp	r3, #0
   18aba:	d009      	beq.n	18ad0 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   18abc:	2312      	movs	r3, #18
   18abe:	18fb      	adds	r3, r7, r3
   18ac0:	781b      	ldrb	r3, [r3, #0]
   18ac2:	2201      	movs	r2, #1
   18ac4:	409a      	lsls	r2, r3
   18ac6:	0013      	movs	r3, r2
   18ac8:	001a      	movs	r2, r3
   18aca:	697b      	ldr	r3, [r7, #20]
   18acc:	4313      	orrs	r3, r2
   18ace:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   18ad0:	2312      	movs	r3, #18
   18ad2:	18fb      	adds	r3, r7, r3
   18ad4:	781a      	ldrb	r2, [r3, #0]
   18ad6:	2312      	movs	r3, #18
   18ad8:	18fb      	adds	r3, r7, r3
   18ada:	3201      	adds	r2, #1
   18adc:	701a      	strb	r2, [r3, #0]
   18ade:	2312      	movs	r3, #18
   18ae0:	18fb      	adds	r3, r7, r3
   18ae2:	781b      	ldrb	r3, [r3, #0]
   18ae4:	2b01      	cmp	r3, #1
   18ae6:	d9ce      	bls.n	18a86 <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   18ae8:	68fb      	ldr	r3, [r7, #12]
   18aea:	885b      	ldrh	r3, [r3, #2]
   18aec:	b29a      	uxth	r2, r3
   18aee:	697b      	ldr	r3, [r7, #20]
   18af0:	b29b      	uxth	r3, r3
   18af2:	4313      	orrs	r3, r2
   18af4:	b29a      	uxth	r2, r3
   18af6:	68fb      	ldr	r3, [r7, #12]
   18af8:	805a      	strh	r2, [r3, #2]
}
   18afa:	46c0      	nop			; (mov r8, r8)
   18afc:	46bd      	mov	sp, r7
   18afe:	b006      	add	sp, #24
   18b00:	bd80      	pop	{r7, pc}
	...

00018b04 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18b04:	b580      	push	{r7, lr}
   18b06:	b084      	sub	sp, #16
   18b08:	af00      	add	r7, sp, #0
   18b0a:	6078      	str	r0, [r7, #4]
   18b0c:	000a      	movs	r2, r1
   18b0e:	1cfb      	adds	r3, r7, #3
   18b10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18b12:	687b      	ldr	r3, [r7, #4]
   18b14:	681b      	ldr	r3, [r3, #0]
   18b16:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   18b18:	46c0      	nop			; (mov r8, r8)
   18b1a:	687b      	ldr	r3, [r7, #4]
   18b1c:	0018      	movs	r0, r3
   18b1e:	4b0b      	ldr	r3, [pc, #44]	; (18b4c <ac_chan_enable+0x48>)
   18b20:	4798      	blx	r3
   18b22:	1e03      	subs	r3, r0, #0
   18b24:	d1f9      	bne.n	18b1a <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   18b26:	1cfb      	adds	r3, r7, #3
   18b28:	781a      	ldrb	r2, [r3, #0]
   18b2a:	1cfb      	adds	r3, r7, #3
   18b2c:	7819      	ldrb	r1, [r3, #0]
   18b2e:	68fb      	ldr	r3, [r7, #12]
   18b30:	3104      	adds	r1, #4
   18b32:	0089      	lsls	r1, r1, #2
   18b34:	58cb      	ldr	r3, [r1, r3]
   18b36:	2101      	movs	r1, #1
   18b38:	4319      	orrs	r1, r3
   18b3a:	68fb      	ldr	r3, [r7, #12]
   18b3c:	3204      	adds	r2, #4
   18b3e:	0092      	lsls	r2, r2, #2
   18b40:	50d1      	str	r1, [r2, r3]
}
   18b42:	46c0      	nop			; (mov r8, r8)
   18b44:	46bd      	mov	sp, r7
   18b46:	b004      	add	sp, #16
   18b48:	bd80      	pop	{r7, pc}
   18b4a:	46c0      	nop			; (mov r8, r8)
   18b4c:	0001898d 	.word	0x0001898d

00018b50 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18b50:	b580      	push	{r7, lr}
   18b52:	b084      	sub	sp, #16
   18b54:	af00      	add	r7, sp, #0
   18b56:	6078      	str	r0, [r7, #4]
   18b58:	000a      	movs	r2, r1
   18b5a:	1cfb      	adds	r3, r7, #3
   18b5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18b5e:	687b      	ldr	r3, [r7, #4]
   18b60:	681b      	ldr	r3, [r3, #0]
   18b62:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   18b64:	68fb      	ldr	r3, [r7, #12]
   18b66:	7a5b      	ldrb	r3, [r3, #9]
   18b68:	b2db      	uxtb	r3, r3
   18b6a:	0019      	movs	r1, r3
   18b6c:	1cfb      	adds	r3, r7, #3
   18b6e:	781b      	ldrb	r3, [r3, #0]
   18b70:	2201      	movs	r2, #1
   18b72:	409a      	lsls	r2, r3
   18b74:	0013      	movs	r3, r2
   18b76:	400b      	ands	r3, r1
   18b78:	1e5a      	subs	r2, r3, #1
   18b7a:	4193      	sbcs	r3, r2
   18b7c:	b2db      	uxtb	r3, r3
}
   18b7e:	0018      	movs	r0, r3
   18b80:	46bd      	mov	sp, r7
   18b82:	b004      	add	sp, #16
   18b84:	bd80      	pop	{r7, pc}
	...

00018b88 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   18b88:	b580      	push	{r7, lr}
   18b8a:	b084      	sub	sp, #16
   18b8c:	af00      	add	r7, sp, #0
   18b8e:	6078      	str	r0, [r7, #4]
   18b90:	000a      	movs	r2, r1
   18b92:	1cfb      	adds	r3, r7, #3
   18b94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   18b96:	687b      	ldr	r3, [r7, #4]
   18b98:	681b      	ldr	r3, [r3, #0]
   18b9a:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   18b9c:	230f      	movs	r3, #15
   18b9e:	18fb      	adds	r3, r7, r3
   18ba0:	2200      	movs	r2, #0
   18ba2:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   18ba4:	68bb      	ldr	r3, [r7, #8]
   18ba6:	799b      	ldrb	r3, [r3, #6]
   18ba8:	b2db      	uxtb	r3, r3
   18baa:	001a      	movs	r2, r3
   18bac:	1cfb      	adds	r3, r7, #3
   18bae:	781b      	ldrb	r3, [r3, #0]
   18bb0:	411a      	asrs	r2, r3
   18bb2:	0013      	movs	r3, r2
   18bb4:	2201      	movs	r2, #1
   18bb6:	4013      	ands	r3, r2
   18bb8:	d003      	beq.n	18bc2 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   18bba:	230f      	movs	r3, #15
   18bbc:	18fb      	adds	r3, r7, r3
   18bbe:	2208      	movs	r2, #8
   18bc0:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   18bc2:	1cfb      	adds	r3, r7, #3
   18bc4:	781a      	ldrb	r2, [r3, #0]
   18bc6:	687b      	ldr	r3, [r7, #4]
   18bc8:	0011      	movs	r1, r2
   18bca:	0018      	movs	r0, r3
   18bcc:	4b1b      	ldr	r3, [pc, #108]	; (18c3c <ac_chan_get_status+0xb4>)
   18bce:	4798      	blx	r3
   18bd0:	0003      	movs	r3, r0
   18bd2:	001a      	movs	r2, r3
   18bd4:	2301      	movs	r3, #1
   18bd6:	4053      	eors	r3, r2
   18bd8:	b2db      	uxtb	r3, r3
   18bda:	2b00      	cmp	r3, #0
   18bdc:	d00b      	beq.n	18bf6 <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   18bde:	230f      	movs	r3, #15
   18be0:	18fb      	adds	r3, r7, r3
   18be2:	220f      	movs	r2, #15
   18be4:	18ba      	adds	r2, r7, r2
   18be6:	7812      	ldrb	r2, [r2, #0]
   18be8:	2101      	movs	r1, #1
   18bea:	430a      	orrs	r2, r1
   18bec:	701a      	strb	r2, [r3, #0]
		return status_mask;
   18bee:	230f      	movs	r3, #15
   18bf0:	18fb      	adds	r3, r7, r3
   18bf2:	781b      	ldrb	r3, [r3, #0]
   18bf4:	e01e      	b.n	18c34 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   18bf6:	68bb      	ldr	r3, [r7, #8]
   18bf8:	7a1b      	ldrb	r3, [r3, #8]
   18bfa:	b2db      	uxtb	r3, r3
   18bfc:	001a      	movs	r2, r3
   18bfe:	1cfb      	adds	r3, r7, #3
   18c00:	781b      	ldrb	r3, [r3, #0]
   18c02:	411a      	asrs	r2, r3
   18c04:	0013      	movs	r3, r2
   18c06:	2201      	movs	r2, #1
   18c08:	4013      	ands	r3, r2
   18c0a:	d008      	beq.n	18c1e <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   18c0c:	230f      	movs	r3, #15
   18c0e:	18fb      	adds	r3, r7, r3
   18c10:	220f      	movs	r2, #15
   18c12:	18ba      	adds	r2, r7, r2
   18c14:	7812      	ldrb	r2, [r2, #0]
   18c16:	2104      	movs	r1, #4
   18c18:	430a      	orrs	r2, r1
   18c1a:	701a      	strb	r2, [r3, #0]
   18c1c:	e007      	b.n	18c2e <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   18c1e:	230f      	movs	r3, #15
   18c20:	18fb      	adds	r3, r7, r3
   18c22:	220f      	movs	r2, #15
   18c24:	18ba      	adds	r2, r7, r2
   18c26:	7812      	ldrb	r2, [r2, #0]
   18c28:	2102      	movs	r1, #2
   18c2a:	430a      	orrs	r2, r1
   18c2c:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   18c2e:	230f      	movs	r3, #15
   18c30:	18fb      	adds	r3, r7, r3
   18c32:	781b      	ldrb	r3, [r3, #0]
}
   18c34:	0018      	movs	r0, r3
   18c36:	46bd      	mov	sp, r7
   18c38:	b004      	add	sp, #16
   18c3a:	bd80      	pop	{r7, pc}
   18c3c:	00018b51 	.word	0x00018b51

00018c40 <system_interrupt_enable>:
{
   18c40:	b580      	push	{r7, lr}
   18c42:	b082      	sub	sp, #8
   18c44:	af00      	add	r7, sp, #0
   18c46:	0002      	movs	r2, r0
   18c48:	1dfb      	adds	r3, r7, #7
   18c4a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18c4c:	4b06      	ldr	r3, [pc, #24]	; (18c68 <system_interrupt_enable+0x28>)
   18c4e:	1dfa      	adds	r2, r7, #7
   18c50:	7812      	ldrb	r2, [r2, #0]
   18c52:	0011      	movs	r1, r2
   18c54:	221f      	movs	r2, #31
   18c56:	400a      	ands	r2, r1
   18c58:	2101      	movs	r1, #1
   18c5a:	4091      	lsls	r1, r2
   18c5c:	000a      	movs	r2, r1
   18c5e:	601a      	str	r2, [r3, #0]
}
   18c60:	46c0      	nop			; (mov r8, r8)
   18c62:	46bd      	mov	sp, r7
   18c64:	b002      	add	sp, #8
   18c66:	bd80      	pop	{r7, pc}
   18c68:	e000e100 	.word	0xe000e100

00018c6c <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   18c6c:	b580      	push	{r7, lr}
   18c6e:	b084      	sub	sp, #16
   18c70:	af00      	add	r7, sp, #0
   18c72:	6078      	str	r0, [r7, #4]
   18c74:	000a      	movs	r2, r1
   18c76:	1cfb      	adds	r3, r7, #3
   18c78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   18c7a:	687b      	ldr	r3, [r7, #4]
   18c7c:	7e5b      	ldrb	r3, [r3, #25]
   18c7e:	b25a      	sxtb	r2, r3
   18c80:	1cfb      	adds	r3, r7, #3
   18c82:	781b      	ldrb	r3, [r3, #0]
   18c84:	2101      	movs	r1, #1
   18c86:	4099      	lsls	r1, r3
   18c88:	000b      	movs	r3, r1
   18c8a:	b25b      	sxtb	r3, r3
   18c8c:	4313      	orrs	r3, r2
   18c8e:	b25b      	sxtb	r3, r3
   18c90:	b2da      	uxtb	r2, r3
   18c92:	687b      	ldr	r3, [r7, #4]
   18c94:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   18c96:	2300      	movs	r3, #0
   18c98:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   18c9a:	1cfb      	adds	r3, r7, #3
   18c9c:	781b      	ldrb	r3, [r3, #0]
   18c9e:	2b01      	cmp	r3, #1
   18ca0:	d009      	beq.n	18cb6 <ac_enable_callback+0x4a>
   18ca2:	2b04      	cmp	r3, #4
   18ca4:	d00c      	beq.n	18cc0 <ac_enable_callback+0x54>
   18ca6:	2b00      	cmp	r3, #0
   18ca8:	d000      	beq.n	18cac <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   18caa:	e00e      	b.n	18cca <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   18cac:	68fb      	ldr	r3, [r7, #12]
   18cae:	2201      	movs	r2, #1
   18cb0:	4313      	orrs	r3, r2
   18cb2:	60fb      	str	r3, [r7, #12]
			break;
   18cb4:	e009      	b.n	18cca <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   18cb6:	68fb      	ldr	r3, [r7, #12]
   18cb8:	2202      	movs	r2, #2
   18cba:	4313      	orrs	r3, r2
   18cbc:	60fb      	str	r3, [r7, #12]
			break;
   18cbe:	e004      	b.n	18cca <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   18cc0:	68fb      	ldr	r3, [r7, #12]
   18cc2:	2210      	movs	r2, #16
   18cc4:	4313      	orrs	r3, r2
   18cc6:	60fb      	str	r3, [r7, #12]
			break;
   18cc8:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   18cca:	687b      	ldr	r3, [r7, #4]
   18ccc:	681b      	ldr	r3, [r3, #0]
   18cce:	68fa      	ldr	r2, [r7, #12]
   18cd0:	b2d2      	uxtb	r2, r2
   18cd2:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   18cd4:	2018      	movs	r0, #24
   18cd6:	4b03      	ldr	r3, [pc, #12]	; (18ce4 <ac_enable_callback+0x78>)
   18cd8:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   18cda:	46c0      	nop			; (mov r8, r8)
   18cdc:	46bd      	mov	sp, r7
   18cde:	b004      	add	sp, #16
   18ce0:	bd80      	pop	{r7, pc}
   18ce2:	46c0      	nop			; (mov r8, r8)
   18ce4:	00018c41 	.word	0x00018c41

00018ce8 <system_pinmux_get_group_from_gpio_pin>:
{
   18ce8:	b580      	push	{r7, lr}
   18cea:	b084      	sub	sp, #16
   18cec:	af00      	add	r7, sp, #0
   18cee:	0002      	movs	r2, r0
   18cf0:	1dfb      	adds	r3, r7, #7
   18cf2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   18cf4:	230f      	movs	r3, #15
   18cf6:	18fb      	adds	r3, r7, r3
   18cf8:	1dfa      	adds	r2, r7, #7
   18cfa:	7812      	ldrb	r2, [r2, #0]
   18cfc:	09d2      	lsrs	r2, r2, #7
   18cfe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18d00:	230e      	movs	r3, #14
   18d02:	18fb      	adds	r3, r7, r3
   18d04:	1dfa      	adds	r2, r7, #7
   18d06:	7812      	ldrb	r2, [r2, #0]
   18d08:	0952      	lsrs	r2, r2, #5
   18d0a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18d0c:	4b0d      	ldr	r3, [pc, #52]	; (18d44 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18d0e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   18d10:	230f      	movs	r3, #15
   18d12:	18fb      	adds	r3, r7, r3
   18d14:	781b      	ldrb	r3, [r3, #0]
   18d16:	2b00      	cmp	r3, #0
   18d18:	d10f      	bne.n	18d3a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18d1a:	230f      	movs	r3, #15
   18d1c:	18fb      	adds	r3, r7, r3
   18d1e:	781b      	ldrb	r3, [r3, #0]
   18d20:	009b      	lsls	r3, r3, #2
   18d22:	2210      	movs	r2, #16
   18d24:	4694      	mov	ip, r2
   18d26:	44bc      	add	ip, r7
   18d28:	4463      	add	r3, ip
   18d2a:	3b08      	subs	r3, #8
   18d2c:	681a      	ldr	r2, [r3, #0]
   18d2e:	230e      	movs	r3, #14
   18d30:	18fb      	adds	r3, r7, r3
   18d32:	781b      	ldrb	r3, [r3, #0]
   18d34:	01db      	lsls	r3, r3, #7
   18d36:	18d3      	adds	r3, r2, r3
   18d38:	e000      	b.n	18d3c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18d3a:	2300      	movs	r3, #0
}
   18d3c:	0018      	movs	r0, r3
   18d3e:	46bd      	mov	sp, r7
   18d40:	b004      	add	sp, #16
   18d42:	bd80      	pop	{r7, pc}
   18d44:	41004400 	.word	0x41004400

00018d48 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   18d48:	b580      	push	{r7, lr}
   18d4a:	b084      	sub	sp, #16
   18d4c:	af00      	add	r7, sp, #0
   18d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   18d50:	687b      	ldr	r3, [r7, #4]
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   18d56:	68fb      	ldr	r3, [r7, #12]
   18d58:	7e5b      	ldrb	r3, [r3, #25]
   18d5a:	b2db      	uxtb	r3, r3
   18d5c:	b25b      	sxtb	r3, r3
   18d5e:	2b00      	cmp	r3, #0
   18d60:	da01      	bge.n	18d66 <adc_is_syncing+0x1e>
		return true;
   18d62:	2301      	movs	r3, #1
   18d64:	e000      	b.n	18d68 <adc_is_syncing+0x20>
	}

	return false;
   18d66:	2300      	movs	r3, #0
}
   18d68:	0018      	movs	r0, r3
   18d6a:	46bd      	mov	sp, r7
   18d6c:	b004      	add	sp, #16
   18d6e:	bd80      	pop	{r7, pc}

00018d70 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   18d70:	b580      	push	{r7, lr}
   18d72:	b086      	sub	sp, #24
   18d74:	af00      	add	r7, sp, #0
   18d76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18d78:	687b      	ldr	r3, [r7, #4]
   18d7a:	681b      	ldr	r3, [r3, #0]
   18d7c:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   18d7e:	693b      	ldr	r3, [r7, #16]
   18d80:	7e1b      	ldrb	r3, [r3, #24]
   18d82:	b2db      	uxtb	r3, r3
   18d84:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   18d86:	2300      	movs	r3, #0
   18d88:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   18d8a:	68fb      	ldr	r3, [r7, #12]
   18d8c:	2201      	movs	r2, #1
   18d8e:	4013      	ands	r3, r2
   18d90:	d003      	beq.n	18d9a <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   18d92:	697b      	ldr	r3, [r7, #20]
   18d94:	2201      	movs	r2, #1
   18d96:	4313      	orrs	r3, r2
   18d98:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   18d9a:	68fb      	ldr	r3, [r7, #12]
   18d9c:	2204      	movs	r2, #4
   18d9e:	4013      	ands	r3, r2
   18da0:	d003      	beq.n	18daa <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   18da2:	697b      	ldr	r3, [r7, #20]
   18da4:	2202      	movs	r2, #2
   18da6:	4313      	orrs	r3, r2
   18da8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   18daa:	68fb      	ldr	r3, [r7, #12]
   18dac:	2202      	movs	r2, #2
   18dae:	4013      	ands	r3, r2
   18db0:	d003      	beq.n	18dba <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   18db2:	697b      	ldr	r3, [r7, #20]
   18db4:	2204      	movs	r2, #4
   18db6:	4313      	orrs	r3, r2
   18db8:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   18dba:	697b      	ldr	r3, [r7, #20]
}
   18dbc:	0018      	movs	r0, r3
   18dbe:	46bd      	mov	sp, r7
   18dc0:	b006      	add	sp, #24
   18dc2:	bd80      	pop	{r7, pc}

00018dc4 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   18dc4:	b580      	push	{r7, lr}
   18dc6:	b084      	sub	sp, #16
   18dc8:	af00      	add	r7, sp, #0
   18dca:	6078      	str	r0, [r7, #4]
   18dcc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18dce:	687b      	ldr	r3, [r7, #4]
   18dd0:	681b      	ldr	r3, [r3, #0]
   18dd2:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   18dd4:	2300      	movs	r3, #0
   18dd6:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   18dd8:	683b      	ldr	r3, [r7, #0]
   18dda:	2201      	movs	r2, #1
   18ddc:	4013      	ands	r3, r2
   18dde:	d003      	beq.n	18de8 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   18de0:	68fb      	ldr	r3, [r7, #12]
   18de2:	2201      	movs	r2, #1
   18de4:	4313      	orrs	r3, r2
   18de6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   18de8:	683b      	ldr	r3, [r7, #0]
   18dea:	2202      	movs	r2, #2
   18dec:	4013      	ands	r3, r2
   18dee:	d003      	beq.n	18df8 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   18df0:	68fb      	ldr	r3, [r7, #12]
   18df2:	2204      	movs	r2, #4
   18df4:	4313      	orrs	r3, r2
   18df6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   18df8:	683b      	ldr	r3, [r7, #0]
   18dfa:	2204      	movs	r2, #4
   18dfc:	4013      	ands	r3, r2
   18dfe:	d003      	beq.n	18e08 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   18e00:	68fb      	ldr	r3, [r7, #12]
   18e02:	2202      	movs	r2, #2
   18e04:	4313      	orrs	r3, r2
   18e06:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   18e08:	68fb      	ldr	r3, [r7, #12]
   18e0a:	b2da      	uxtb	r2, r3
   18e0c:	68bb      	ldr	r3, [r7, #8]
   18e0e:	761a      	strb	r2, [r3, #24]
}
   18e10:	46c0      	nop			; (mov r8, r8)
   18e12:	46bd      	mov	sp, r7
   18e14:	b004      	add	sp, #16
   18e16:	bd80      	pop	{r7, pc}

00018e18 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   18e18:	b580      	push	{r7, lr}
   18e1a:	b084      	sub	sp, #16
   18e1c:	af00      	add	r7, sp, #0
   18e1e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18e20:	687b      	ldr	r3, [r7, #4]
   18e22:	681b      	ldr	r3, [r3, #0]
   18e24:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18e26:	46c0      	nop			; (mov r8, r8)
   18e28:	687b      	ldr	r3, [r7, #4]
   18e2a:	0018      	movs	r0, r3
   18e2c:	4b10      	ldr	r3, [pc, #64]	; (18e70 <adc_enable+0x58>)
   18e2e:	4798      	blx	r3
   18e30:	1e03      	subs	r3, r0, #0
   18e32:	d1f9      	bne.n	18e28 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   18e34:	2017      	movs	r0, #23
   18e36:	4b0f      	ldr	r3, [pc, #60]	; (18e74 <adc_enable+0x5c>)
   18e38:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   18e3a:	68fb      	ldr	r3, [r7, #12]
   18e3c:	220f      	movs	r2, #15
   18e3e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   18e40:	68fb      	ldr	r3, [r7, #12]
   18e42:	220f      	movs	r2, #15
   18e44:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   18e46:	68fb      	ldr	r3, [r7, #12]
   18e48:	781b      	ldrb	r3, [r3, #0]
   18e4a:	b2db      	uxtb	r3, r3
   18e4c:	2202      	movs	r2, #2
   18e4e:	4313      	orrs	r3, r2
   18e50:	b2da      	uxtb	r2, r3
   18e52:	68fb      	ldr	r3, [r7, #12]
   18e54:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   18e56:	46c0      	nop			; (mov r8, r8)
   18e58:	687b      	ldr	r3, [r7, #4]
   18e5a:	0018      	movs	r0, r3
   18e5c:	4b04      	ldr	r3, [pc, #16]	; (18e70 <adc_enable+0x58>)
   18e5e:	4798      	blx	r3
   18e60:	1e03      	subs	r3, r0, #0
   18e62:	d1f9      	bne.n	18e58 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   18e64:	2300      	movs	r3, #0
}
   18e66:	0018      	movs	r0, r3
   18e68:	46bd      	mov	sp, r7
   18e6a:	b004      	add	sp, #16
   18e6c:	bd80      	pop	{r7, pc}
   18e6e:	46c0      	nop			; (mov r8, r8)
   18e70:	00018d49 	.word	0x00018d49
   18e74:	00018c41 	.word	0x00018c41

00018e78 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   18e78:	b580      	push	{r7, lr}
   18e7a:	b084      	sub	sp, #16
   18e7c:	af00      	add	r7, sp, #0
   18e7e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18e80:	687b      	ldr	r3, [r7, #4]
   18e82:	681b      	ldr	r3, [r3, #0]
   18e84:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18e86:	46c0      	nop			; (mov r8, r8)
   18e88:	687b      	ldr	r3, [r7, #4]
   18e8a:	0018      	movs	r0, r3
   18e8c:	4b0b      	ldr	r3, [pc, #44]	; (18ebc <adc_start_conversion+0x44>)
   18e8e:	4798      	blx	r3
   18e90:	1e03      	subs	r3, r0, #0
   18e92:	d1f9      	bne.n	18e88 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   18e94:	68fb      	ldr	r3, [r7, #12]
   18e96:	7b1b      	ldrb	r3, [r3, #12]
   18e98:	b2db      	uxtb	r3, r3
   18e9a:	2202      	movs	r2, #2
   18e9c:	4313      	orrs	r3, r2
   18e9e:	b2da      	uxtb	r2, r3
   18ea0:	68fb      	ldr	r3, [r7, #12]
   18ea2:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   18ea4:	46c0      	nop			; (mov r8, r8)
   18ea6:	687b      	ldr	r3, [r7, #4]
   18ea8:	0018      	movs	r0, r3
   18eaa:	4b04      	ldr	r3, [pc, #16]	; (18ebc <adc_start_conversion+0x44>)
   18eac:	4798      	blx	r3
   18eae:	1e03      	subs	r3, r0, #0
   18eb0:	d1f9      	bne.n	18ea6 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   18eb2:	46c0      	nop			; (mov r8, r8)
   18eb4:	46bd      	mov	sp, r7
   18eb6:	b004      	add	sp, #16
   18eb8:	bd80      	pop	{r7, pc}
   18eba:	46c0      	nop			; (mov r8, r8)
   18ebc:	00018d49 	.word	0x00018d49

00018ec0 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   18ec0:	b580      	push	{r7, lr}
   18ec2:	b084      	sub	sp, #16
   18ec4:	af00      	add	r7, sp, #0
   18ec6:	6078      	str	r0, [r7, #4]
   18ec8:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   18eca:	687b      	ldr	r3, [r7, #4]
   18ecc:	0018      	movs	r0, r3
   18ece:	4b18      	ldr	r3, [pc, #96]	; (18f30 <adc_read+0x70>)
   18ed0:	4798      	blx	r3
   18ed2:	0002      	movs	r2, r0
   18ed4:	2301      	movs	r3, #1
   18ed6:	4013      	ands	r3, r2
   18ed8:	d101      	bne.n	18ede <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   18eda:	2305      	movs	r3, #5
   18edc:	e023      	b.n	18f26 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   18ede:	687b      	ldr	r3, [r7, #4]
   18ee0:	681b      	ldr	r3, [r3, #0]
   18ee2:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   18ee4:	46c0      	nop			; (mov r8, r8)
   18ee6:	687b      	ldr	r3, [r7, #4]
   18ee8:	0018      	movs	r0, r3
   18eea:	4b12      	ldr	r3, [pc, #72]	; (18f34 <adc_read+0x74>)
   18eec:	4798      	blx	r3
   18eee:	1e03      	subs	r3, r0, #0
   18ef0:	d1f9      	bne.n	18ee6 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   18ef2:	68fb      	ldr	r3, [r7, #12]
   18ef4:	8b5b      	ldrh	r3, [r3, #26]
   18ef6:	b29a      	uxth	r2, r3
   18ef8:	683b      	ldr	r3, [r7, #0]
   18efa:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   18efc:	687b      	ldr	r3, [r7, #4]
   18efe:	2101      	movs	r1, #1
   18f00:	0018      	movs	r0, r3
   18f02:	4b0d      	ldr	r3, [pc, #52]	; (18f38 <adc_read+0x78>)
   18f04:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   18f06:	687b      	ldr	r3, [r7, #4]
   18f08:	0018      	movs	r0, r3
   18f0a:	4b09      	ldr	r3, [pc, #36]	; (18f30 <adc_read+0x70>)
   18f0c:	4798      	blx	r3
   18f0e:	0002      	movs	r2, r0
   18f10:	2304      	movs	r3, #4
   18f12:	4013      	ands	r3, r2
   18f14:	d006      	beq.n	18f24 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   18f16:	687b      	ldr	r3, [r7, #4]
   18f18:	2104      	movs	r1, #4
   18f1a:	0018      	movs	r0, r3
   18f1c:	4b06      	ldr	r3, [pc, #24]	; (18f38 <adc_read+0x78>)
   18f1e:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   18f20:	231e      	movs	r3, #30
   18f22:	e000      	b.n	18f26 <adc_read+0x66>
	}

	return STATUS_OK;
   18f24:	2300      	movs	r3, #0
}
   18f26:	0018      	movs	r0, r3
   18f28:	46bd      	mov	sp, r7
   18f2a:	b004      	add	sp, #16
   18f2c:	bd80      	pop	{r7, pc}
   18f2e:	46c0      	nop			; (mov r8, r8)
   18f30:	00018d71 	.word	0x00018d71
   18f34:	00018d49 	.word	0x00018d49
   18f38:	00018dc5 	.word	0x00018dc5

00018f3c <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   18f3c:	b580      	push	{r7, lr}
   18f3e:	b084      	sub	sp, #16
   18f40:	af00      	add	r7, sp, #0
   18f42:	6078      	str	r0, [r7, #4]
   18f44:	000a      	movs	r2, r1
   18f46:	1cfb      	adds	r3, r7, #3
   18f48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18f4a:	687b      	ldr	r3, [r7, #4]
   18f4c:	681b      	ldr	r3, [r3, #0]
   18f4e:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   18f50:	46c0      	nop			; (mov r8, r8)
   18f52:	687b      	ldr	r3, [r7, #4]
   18f54:	0018      	movs	r0, r3
   18f56:	4b0c      	ldr	r3, [pc, #48]	; (18f88 <adc_set_positive_input+0x4c>)
   18f58:	4798      	blx	r3
   18f5a:	1e03      	subs	r3, r0, #0
   18f5c:	d1f9      	bne.n	18f52 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   18f5e:	68fb      	ldr	r3, [r7, #12]
   18f60:	691b      	ldr	r3, [r3, #16]
   18f62:	221f      	movs	r2, #31
   18f64:	4393      	bics	r3, r2
   18f66:	001a      	movs	r2, r3
   18f68:	1cfb      	adds	r3, r7, #3
   18f6a:	781b      	ldrb	r3, [r3, #0]
   18f6c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   18f6e:	68fb      	ldr	r3, [r7, #12]
   18f70:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   18f72:	46c0      	nop			; (mov r8, r8)
   18f74:	687b      	ldr	r3, [r7, #4]
   18f76:	0018      	movs	r0, r3
   18f78:	4b03      	ldr	r3, [pc, #12]	; (18f88 <adc_set_positive_input+0x4c>)
   18f7a:	4798      	blx	r3
   18f7c:	1e03      	subs	r3, r0, #0
   18f7e:	d1f9      	bne.n	18f74 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   18f80:	46c0      	nop			; (mov r8, r8)
   18f82:	46bd      	mov	sp, r7
   18f84:	b004      	add	sp, #16
   18f86:	bd80      	pop	{r7, pc}
   18f88:	00018d49 	.word	0x00018d49

00018f8c <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   18f8c:	b580      	push	{r7, lr}
   18f8e:	b084      	sub	sp, #16
   18f90:	af00      	add	r7, sp, #0
   18f92:	6078      	str	r0, [r7, #4]
   18f94:	000a      	movs	r2, r1
   18f96:	1cfb      	adds	r3, r7, #3
   18f98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   18f9a:	687b      	ldr	r3, [r7, #4]
   18f9c:	681b      	ldr	r3, [r3, #0]
   18f9e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   18fa0:	68fb      	ldr	r3, [r7, #12]
   18fa2:	1cfa      	adds	r2, r7, #3
   18fa4:	7812      	ldrb	r2, [r2, #0]
   18fa6:	75da      	strb	r2, [r3, #23]
}
   18fa8:	46c0      	nop			; (mov r8, r8)
   18faa:	46bd      	mov	sp, r7
   18fac:	b004      	add	sp, #16
   18fae:	bd80      	pop	{r7, pc}

00018fb0 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   18fb0:	b580      	push	{r7, lr}
   18fb2:	b082      	sub	sp, #8
   18fb4:	af00      	add	r7, sp, #0
   18fb6:	6078      	str	r0, [r7, #4]
   18fb8:	000a      	movs	r2, r1
   18fba:	1cfb      	adds	r3, r7, #3
   18fbc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   18fbe:	687b      	ldr	r3, [r7, #4]
   18fc0:	7edb      	ldrb	r3, [r3, #27]
   18fc2:	b25a      	sxtb	r2, r3
   18fc4:	1cfb      	adds	r3, r7, #3
   18fc6:	781b      	ldrb	r3, [r3, #0]
   18fc8:	2101      	movs	r1, #1
   18fca:	4099      	lsls	r1, r3
   18fcc:	000b      	movs	r3, r1
   18fce:	b25b      	sxtb	r3, r3
   18fd0:	4313      	orrs	r3, r2
   18fd2:	b25b      	sxtb	r3, r3
   18fd4:	b2da      	uxtb	r2, r3
   18fd6:	687b      	ldr	r3, [r7, #4]
   18fd8:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   18fda:	1cfb      	adds	r3, r7, #3
   18fdc:	781b      	ldrb	r3, [r3, #0]
   18fde:	2b01      	cmp	r3, #1
   18fe0:	d104      	bne.n	18fec <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   18fe2:	687b      	ldr	r3, [r7, #4]
   18fe4:	2104      	movs	r1, #4
   18fe6:	0018      	movs	r0, r3
   18fe8:	4b07      	ldr	r3, [pc, #28]	; (19008 <adc_enable_callback+0x58>)
   18fea:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   18fec:	1cfb      	adds	r3, r7, #3
   18fee:	781b      	ldrb	r3, [r3, #0]
   18ff0:	2b02      	cmp	r3, #2
   18ff2:	d104      	bne.n	18ffe <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   18ff4:	687b      	ldr	r3, [r7, #4]
   18ff6:	2102      	movs	r1, #2
   18ff8:	0018      	movs	r0, r3
   18ffa:	4b03      	ldr	r3, [pc, #12]	; (19008 <adc_enable_callback+0x58>)
   18ffc:	4798      	blx	r3
	}
}
   18ffe:	46c0      	nop			; (mov r8, r8)
   19000:	46bd      	mov	sp, r7
   19002:	b002      	add	sp, #8
   19004:	bd80      	pop	{r7, pc}
   19006:	46c0      	nop			; (mov r8, r8)
   19008:	00018f8d 	.word	0x00018f8d

0001900c <port_get_group_from_gpio_pin>:
{
   1900c:	b580      	push	{r7, lr}
   1900e:	b082      	sub	sp, #8
   19010:	af00      	add	r7, sp, #0
   19012:	0002      	movs	r2, r0
   19014:	1dfb      	adds	r3, r7, #7
   19016:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   19018:	1dfb      	adds	r3, r7, #7
   1901a:	781b      	ldrb	r3, [r3, #0]
   1901c:	0018      	movs	r0, r3
   1901e:	4b03      	ldr	r3, [pc, #12]	; (1902c <port_get_group_from_gpio_pin+0x20>)
   19020:	4798      	blx	r3
   19022:	0003      	movs	r3, r0
}
   19024:	0018      	movs	r0, r3
   19026:	46bd      	mov	sp, r7
   19028:	b002      	add	sp, #8
   1902a:	bd80      	pop	{r7, pc}
   1902c:	00018ce9 	.word	0x00018ce9

00019030 <port_get_config_defaults>:
{
   19030:	b580      	push	{r7, lr}
   19032:	b082      	sub	sp, #8
   19034:	af00      	add	r7, sp, #0
   19036:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   19038:	687b      	ldr	r3, [r7, #4]
   1903a:	2200      	movs	r2, #0
   1903c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1903e:	687b      	ldr	r3, [r7, #4]
   19040:	2201      	movs	r2, #1
   19042:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   19044:	687b      	ldr	r3, [r7, #4]
   19046:	2200      	movs	r2, #0
   19048:	709a      	strb	r2, [r3, #2]
}
   1904a:	46c0      	nop			; (mov r8, r8)
   1904c:	46bd      	mov	sp, r7
   1904e:	b002      	add	sp, #8
   19050:	bd80      	pop	{r7, pc}
	...

00019054 <port_pin_get_input_level>:
{
   19054:	b580      	push	{r7, lr}
   19056:	b084      	sub	sp, #16
   19058:	af00      	add	r7, sp, #0
   1905a:	0002      	movs	r2, r0
   1905c:	1dfb      	adds	r3, r7, #7
   1905e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19060:	1dfb      	adds	r3, r7, #7
   19062:	781b      	ldrb	r3, [r3, #0]
   19064:	0018      	movs	r0, r3
   19066:	4b0b      	ldr	r3, [pc, #44]	; (19094 <port_pin_get_input_level+0x40>)
   19068:	4798      	blx	r3
   1906a:	0003      	movs	r3, r0
   1906c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1906e:	1dfb      	adds	r3, r7, #7
   19070:	781b      	ldrb	r3, [r3, #0]
   19072:	221f      	movs	r2, #31
   19074:	4013      	ands	r3, r2
   19076:	2201      	movs	r2, #1
   19078:	409a      	lsls	r2, r3
   1907a:	0013      	movs	r3, r2
   1907c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1907e:	68fb      	ldr	r3, [r7, #12]
   19080:	6a1b      	ldr	r3, [r3, #32]
   19082:	68ba      	ldr	r2, [r7, #8]
   19084:	4013      	ands	r3, r2
   19086:	1e5a      	subs	r2, r3, #1
   19088:	4193      	sbcs	r3, r2
   1908a:	b2db      	uxtb	r3, r3
}
   1908c:	0018      	movs	r0, r3
   1908e:	46bd      	mov	sp, r7
   19090:	b004      	add	sp, #16
   19092:	bd80      	pop	{r7, pc}
   19094:	0001900d 	.word	0x0001900d

00019098 <port_pin_set_output_level>:
{
   19098:	b580      	push	{r7, lr}
   1909a:	b084      	sub	sp, #16
   1909c:	af00      	add	r7, sp, #0
   1909e:	0002      	movs	r2, r0
   190a0:	1dfb      	adds	r3, r7, #7
   190a2:	701a      	strb	r2, [r3, #0]
   190a4:	1dbb      	adds	r3, r7, #6
   190a6:	1c0a      	adds	r2, r1, #0
   190a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   190aa:	1dfb      	adds	r3, r7, #7
   190ac:	781b      	ldrb	r3, [r3, #0]
   190ae:	0018      	movs	r0, r3
   190b0:	4b0d      	ldr	r3, [pc, #52]	; (190e8 <port_pin_set_output_level+0x50>)
   190b2:	4798      	blx	r3
   190b4:	0003      	movs	r3, r0
   190b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   190b8:	1dfb      	adds	r3, r7, #7
   190ba:	781b      	ldrb	r3, [r3, #0]
   190bc:	221f      	movs	r2, #31
   190be:	4013      	ands	r3, r2
   190c0:	2201      	movs	r2, #1
   190c2:	409a      	lsls	r2, r3
   190c4:	0013      	movs	r3, r2
   190c6:	60bb      	str	r3, [r7, #8]
	if (level) {
   190c8:	1dbb      	adds	r3, r7, #6
   190ca:	781b      	ldrb	r3, [r3, #0]
   190cc:	2b00      	cmp	r3, #0
   190ce:	d003      	beq.n	190d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   190d0:	68fb      	ldr	r3, [r7, #12]
   190d2:	68ba      	ldr	r2, [r7, #8]
   190d4:	619a      	str	r2, [r3, #24]
}
   190d6:	e002      	b.n	190de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   190d8:	68fb      	ldr	r3, [r7, #12]
   190da:	68ba      	ldr	r2, [r7, #8]
   190dc:	615a      	str	r2, [r3, #20]
}
   190de:	46c0      	nop			; (mov r8, r8)
   190e0:	46bd      	mov	sp, r7
   190e2:	b004      	add	sp, #16
   190e4:	bd80      	pop	{r7, pc}
   190e6:	46c0      	nop			; (mov r8, r8)
   190e8:	0001900d 	.word	0x0001900d

000190ec <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   190ec:	b580      	push	{r7, lr}
   190ee:	b084      	sub	sp, #16
   190f0:	af00      	add	r7, sp, #0
   190f2:	0002      	movs	r2, r0
   190f4:	1dfb      	adds	r3, r7, #7
   190f6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   190f8:	230f      	movs	r3, #15
   190fa:	18fb      	adds	r3, r7, r3
   190fc:	1dfa      	adds	r2, r7, #7
   190fe:	7812      	ldrb	r2, [r2, #0]
   19100:	0952      	lsrs	r2, r2, #5
   19102:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   19104:	230f      	movs	r3, #15
   19106:	18fb      	adds	r3, r7, r3
   19108:	781b      	ldrb	r3, [r3, #0]
   1910a:	2b00      	cmp	r3, #0
   1910c:	d10c      	bne.n	19128 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1910e:	4b09      	ldr	r3, [pc, #36]	; (19134 <_extint_get_eic_from_channel+0x48>)
   19110:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   19112:	230f      	movs	r3, #15
   19114:	18fb      	adds	r3, r7, r3
   19116:	781b      	ldrb	r3, [r3, #0]
   19118:	009b      	lsls	r3, r3, #2
   1911a:	2210      	movs	r2, #16
   1911c:	4694      	mov	ip, r2
   1911e:	44bc      	add	ip, r7
   19120:	4463      	add	r3, ip
   19122:	3b08      	subs	r3, #8
   19124:	681b      	ldr	r3, [r3, #0]
   19126:	e000      	b.n	1912a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   19128:	2300      	movs	r3, #0
	}
}
   1912a:	0018      	movs	r0, r3
   1912c:	46bd      	mov	sp, r7
   1912e:	b004      	add	sp, #16
   19130:	bd80      	pop	{r7, pc}
   19132:	46c0      	nop			; (mov r8, r8)
   19134:	40001800 	.word	0x40001800

00019138 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   19138:	b580      	push	{r7, lr}
   1913a:	b084      	sub	sp, #16
   1913c:	af00      	add	r7, sp, #0
   1913e:	0002      	movs	r2, r0
   19140:	1dfb      	adds	r3, r7, #7
   19142:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   19144:	1dfb      	adds	r3, r7, #7
   19146:	781b      	ldrb	r3, [r3, #0]
   19148:	0018      	movs	r0, r3
   1914a:	4b09      	ldr	r3, [pc, #36]	; (19170 <extint_chan_clear_detected+0x38>)
   1914c:	4798      	blx	r3
   1914e:	0003      	movs	r3, r0
   19150:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   19152:	1dfb      	adds	r3, r7, #7
   19154:	781b      	ldrb	r3, [r3, #0]
   19156:	221f      	movs	r2, #31
   19158:	4013      	ands	r3, r2
   1915a:	2201      	movs	r2, #1
   1915c:	409a      	lsls	r2, r3
   1915e:	0013      	movs	r3, r2
   19160:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   19162:	68fb      	ldr	r3, [r7, #12]
   19164:	68ba      	ldr	r2, [r7, #8]
   19166:	611a      	str	r2, [r3, #16]
}
   19168:	46c0      	nop			; (mov r8, r8)
   1916a:	46bd      	mov	sp, r7
   1916c:	b004      	add	sp, #16
   1916e:	bd80      	pop	{r7, pc}
   19170:	000190ed 	.word	0x000190ed

00019174 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   19174:	b580      	push	{r7, lr}
   19176:	b084      	sub	sp, #16
   19178:	af00      	add	r7, sp, #0
   1917a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   1917c:	687b      	ldr	r3, [r7, #4]
   1917e:	22a0      	movs	r2, #160	; 0xa0
   19180:	0112      	lsls	r2, r2, #4
   19182:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   19184:	687b      	ldr	r3, [r7, #4]
   19186:	2201      	movs	r2, #1
   19188:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   1918a:	687b      	ldr	r3, [r7, #4]
   1918c:	2200      	movs	r2, #0
   1918e:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   19190:	687b      	ldr	r3, [r7, #4]
   19192:	2200      	movs	r2, #0
   19194:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   19196:	230f      	movs	r3, #15
   19198:	18fb      	adds	r3, r7, r3
   1919a:	2200      	movs	r2, #0
   1919c:	701a      	strb	r2, [r3, #0]
   1919e:	e00e      	b.n	191be <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   191a0:	230f      	movs	r3, #15
   191a2:	18fb      	adds	r3, r7, r3
   191a4:	781a      	ldrb	r2, [r3, #0]
   191a6:	687b      	ldr	r3, [r7, #4]
   191a8:	3202      	adds	r2, #2
   191aa:	0092      	lsls	r2, r2, #2
   191ac:	2100      	movs	r1, #0
   191ae:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   191b0:	230f      	movs	r3, #15
   191b2:	18fb      	adds	r3, r7, r3
   191b4:	781a      	ldrb	r2, [r3, #0]
   191b6:	230f      	movs	r3, #15
   191b8:	18fb      	adds	r3, r7, r3
   191ba:	3201      	adds	r2, #1
   191bc:	701a      	strb	r2, [r3, #0]
   191be:	230f      	movs	r3, #15
   191c0:	18fb      	adds	r3, r7, r3
   191c2:	781b      	ldrb	r3, [r3, #0]
   191c4:	2b01      	cmp	r3, #1
   191c6:	d9eb      	bls.n	191a0 <rtc_count_get_config_defaults+0x2c>
	}
}
   191c8:	46c0      	nop			; (mov r8, r8)
   191ca:	46bd      	mov	sp, r7
   191cc:	b004      	add	sp, #16
   191ce:	bd80      	pop	{r7, pc}

000191d0 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
   191d0:	b580      	push	{r7, lr}
   191d2:	b086      	sub	sp, #24
   191d4:	af00      	add	r7, sp, #0
   191d6:	6078      	str	r0, [r7, #4]
   191d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   191da:	687b      	ldr	r3, [r7, #4]
   191dc:	681b      	ldr	r3, [r3, #0]
   191de:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   191e0:	2300      	movs	r3, #0
   191e2:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
   191e4:	683b      	ldr	r3, [r7, #0]
   191e6:	781b      	ldrb	r3, [r3, #0]
   191e8:	2b00      	cmp	r3, #0
   191ea:	d004      	beq.n	191f6 <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
   191ec:	697b      	ldr	r3, [r7, #20]
   191ee:	2280      	movs	r2, #128	; 0x80
   191f0:	0212      	lsls	r2, r2, #8
   191f2:	4313      	orrs	r3, r2
   191f4:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   191f6:	2313      	movs	r3, #19
   191f8:	18fb      	adds	r3, r7, r3
   191fa:	2200      	movs	r2, #0
   191fc:	701a      	strb	r2, [r3, #0]
   191fe:	e01c      	b.n	1923a <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
   19200:	2313      	movs	r3, #19
   19202:	18fb      	adds	r3, r7, r3
   19204:	781b      	ldrb	r3, [r3, #0]
   19206:	683a      	ldr	r2, [r7, #0]
   19208:	18d3      	adds	r3, r2, r3
   1920a:	785b      	ldrb	r3, [r3, #1]
   1920c:	2b00      	cmp	r3, #0
   1920e:	d00d      	beq.n	1922c <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
   19210:	2313      	movs	r3, #19
   19212:	18fb      	adds	r3, r7, r3
   19214:	781b      	ldrb	r3, [r3, #0]
   19216:	2201      	movs	r2, #1
   19218:	409a      	lsls	r2, r3
   1921a:	0013      	movs	r3, r2
   1921c:	021b      	lsls	r3, r3, #8
   1921e:	001a      	movs	r2, r3
   19220:	2380      	movs	r3, #128	; 0x80
   19222:	005b      	lsls	r3, r3, #1
   19224:	4013      	ands	r3, r2
   19226:	697a      	ldr	r2, [r7, #20]
   19228:	4313      	orrs	r3, r2
   1922a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1922c:	2313      	movs	r3, #19
   1922e:	18fb      	adds	r3, r7, r3
   19230:	781a      	ldrb	r2, [r3, #0]
   19232:	2313      	movs	r3, #19
   19234:	18fb      	adds	r3, r7, r3
   19236:	3201      	adds	r2, #1
   19238:	701a      	strb	r2, [r3, #0]
   1923a:	2313      	movs	r3, #19
   1923c:	18fb      	adds	r3, r7, r3
   1923e:	781b      	ldrb	r3, [r3, #0]
   19240:	2b01      	cmp	r3, #1
   19242:	d9dd      	bls.n	19200 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
   19244:	2312      	movs	r3, #18
   19246:	18fb      	adds	r3, r7, r3
   19248:	2200      	movs	r2, #0
   1924a:	701a      	strb	r2, [r3, #0]
   1924c:	e01a      	b.n	19284 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
   1924e:	2312      	movs	r3, #18
   19250:	18fb      	adds	r3, r7, r3
   19252:	781b      	ldrb	r3, [r3, #0]
   19254:	683a      	ldr	r2, [r7, #0]
   19256:	18d3      	adds	r3, r2, r3
   19258:	78db      	ldrb	r3, [r3, #3]
   1925a:	2b00      	cmp	r3, #0
   1925c:	d00b      	beq.n	19276 <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
   1925e:	2312      	movs	r3, #18
   19260:	18fb      	adds	r3, r7, r3
   19262:	781b      	ldrb	r3, [r3, #0]
   19264:	2201      	movs	r2, #1
   19266:	409a      	lsls	r2, r3
   19268:	0013      	movs	r3, r2
   1926a:	001a      	movs	r2, r3
   1926c:	23ff      	movs	r3, #255	; 0xff
   1926e:	4013      	ands	r3, r2
   19270:	697a      	ldr	r2, [r7, #20]
   19272:	4313      	orrs	r3, r2
   19274:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
   19276:	2312      	movs	r3, #18
   19278:	18fb      	adds	r3, r7, r3
   1927a:	781a      	ldrb	r2, [r3, #0]
   1927c:	2312      	movs	r3, #18
   1927e:	18fb      	adds	r3, r7, r3
   19280:	3201      	adds	r2, #1
   19282:	701a      	strb	r2, [r3, #0]
   19284:	2312      	movs	r3, #18
   19286:	18fb      	adds	r3, r7, r3
   19288:	781b      	ldrb	r3, [r3, #0]
   1928a:	2b07      	cmp	r3, #7
   1928c:	d9df      	bls.n	1924e <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
   1928e:	68fb      	ldr	r3, [r7, #12]
   19290:	889b      	ldrh	r3, [r3, #4]
   19292:	b29a      	uxth	r2, r3
   19294:	697b      	ldr	r3, [r7, #20]
   19296:	b29b      	uxth	r3, r3
   19298:	4313      	orrs	r3, r2
   1929a:	b29a      	uxth	r2, r3
   1929c:	68fb      	ldr	r3, [r7, #12]
   1929e:	809a      	strh	r2, [r3, #4]
}
   192a0:	46c0      	nop			; (mov r8, r8)
   192a2:	46bd      	mov	sp, r7
   192a4:	b006      	add	sp, #24
   192a6:	bd80      	pop	{r7, pc}

000192a8 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   192a8:	b580      	push	{r7, lr}
   192aa:	b082      	sub	sp, #8
   192ac:	af00      	add	r7, sp, #0
   192ae:	6078      	str	r0, [r7, #4]
   192b0:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   192b2:	200d      	movs	r0, #13
   192b4:	4b08      	ldr	r3, [pc, #32]	; (192d8 <readOverHeadWaterSensorState+0x30>)
   192b6:	4798      	blx	r3
   192b8:	0003      	movs	r3, r0
   192ba:	001a      	movs	r2, r3
   192bc:	687b      	ldr	r3, [r7, #4]
   192be:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   192c0:	202f      	movs	r0, #47	; 0x2f
   192c2:	4b05      	ldr	r3, [pc, #20]	; (192d8 <readOverHeadWaterSensorState+0x30>)
   192c4:	4798      	blx	r3
   192c6:	0003      	movs	r3, r0
   192c8:	001a      	movs	r2, r3
   192ca:	683b      	ldr	r3, [r7, #0]
   192cc:	701a      	strb	r2, [r3, #0]
}
   192ce:	46c0      	nop			; (mov r8, r8)
   192d0:	46bd      	mov	sp, r7
   192d2:	b002      	add	sp, #8
   192d4:	bd80      	pop	{r7, pc}
   192d6:	46c0      	nop			; (mov r8, r8)
   192d8:	00019055 	.word	0x00019055

000192dc <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   192dc:	b580      	push	{r7, lr}
   192de:	b082      	sub	sp, #8
   192e0:	af00      	add	r7, sp, #0
   192e2:	0002      	movs	r2, r0
   192e4:	1dfb      	adds	r3, r7, #7
   192e6:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   192e8:	4b03      	ldr	r3, [pc, #12]	; (192f8 <updateOverheadLevel+0x1c>)
   192ea:	1dfa      	adds	r2, r7, #7
   192ec:	7812      	ldrb	r2, [r2, #0]
   192ee:	701a      	strb	r2, [r3, #0]
}
   192f0:	46c0      	nop			; (mov r8, r8)
   192f2:	46bd      	mov	sp, r7
   192f4:	b002      	add	sp, #8
   192f6:	bd80      	pop	{r7, pc}
   192f8:	20000788 	.word	0x20000788

000192fc <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   192fc:	b580      	push	{r7, lr}
   192fe:	b082      	sub	sp, #8
   19300:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   19302:	1d7a      	adds	r2, r7, #5
   19304:	1dbb      	adds	r3, r7, #6
   19306:	0011      	movs	r1, r2
   19308:	0018      	movs	r0, r3
   1930a:	4b11      	ldr	r3, [pc, #68]	; (19350 <getOverHeadWaterSensorState+0x54>)
   1930c:	4798      	blx	r3
	uint8_t ans=0;
   1930e:	1dfb      	adds	r3, r7, #7
   19310:	2200      	movs	r2, #0
   19312:	701a      	strb	r2, [r3, #0]
	if(!olow)
   19314:	1dbb      	adds	r3, r7, #6
   19316:	781b      	ldrb	r3, [r3, #0]
   19318:	2201      	movs	r2, #1
   1931a:	4053      	eors	r3, r2
   1931c:	b2db      	uxtb	r3, r3
   1931e:	2b00      	cmp	r3, #0
   19320:	d010      	beq.n	19344 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   19322:	1dfb      	adds	r3, r7, #7
   19324:	781a      	ldrb	r2, [r3, #0]
   19326:	1dfb      	adds	r3, r7, #7
   19328:	3201      	adds	r2, #1
   1932a:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   1932c:	1d7b      	adds	r3, r7, #5
   1932e:	781b      	ldrb	r3, [r3, #0]
   19330:	2201      	movs	r2, #1
   19332:	4053      	eors	r3, r2
   19334:	b2db      	uxtb	r3, r3
   19336:	2b00      	cmp	r3, #0
   19338:	d004      	beq.n	19344 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   1933a:	1dfb      	adds	r3, r7, #7
   1933c:	781a      	ldrb	r2, [r3, #0]
   1933e:	1dfb      	adds	r3, r7, #7
   19340:	3201      	adds	r2, #1
   19342:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   19344:	1dfb      	adds	r3, r7, #7
   19346:	781b      	ldrb	r3, [r3, #0]
}
   19348:	0018      	movs	r0, r3
   1934a:	46bd      	mov	sp, r7
   1934c:	b002      	add	sp, #8
   1934e:	bd80      	pop	{r7, pc}
   19350:	000192a9 	.word	0x000192a9

00019354 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   19354:	b590      	push	{r4, r7, lr}
   19356:	b085      	sub	sp, #20
   19358:	af00      	add	r7, sp, #0
   1935a:	0002      	movs	r2, r0
   1935c:	1dfb      	adds	r3, r7, #7
   1935e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   19360:	230f      	movs	r3, #15
   19362:	18fc      	adds	r4, r7, r3
   19364:	4b15      	ldr	r3, [pc, #84]	; (193bc <overHeadWaterStatusOnCall+0x68>)
   19366:	4798      	blx	r3
   19368:	0003      	movs	r3, r0
   1936a:	7023      	strb	r3, [r4, #0]
	if(current)
   1936c:	1dfb      	adds	r3, r7, #7
   1936e:	781b      	ldrb	r3, [r3, #0]
   19370:	2b00      	cmp	r3, #0
   19372:	d004      	beq.n	1937e <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   19374:	230f      	movs	r3, #15
   19376:	18fb      	adds	r3, r7, r3
   19378:	4a11      	ldr	r2, [pc, #68]	; (193c0 <overHeadWaterStatusOnCall+0x6c>)
   1937a:	7812      	ldrb	r2, [r2, #0]
   1937c:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   1937e:	230f      	movs	r3, #15
   19380:	18fb      	adds	r3, r7, r3
   19382:	781b      	ldrb	r3, [r3, #0]
   19384:	2b02      	cmp	r3, #2
   19386:	d103      	bne.n	19390 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   19388:	2056      	movs	r0, #86	; 0x56
   1938a:	4b0e      	ldr	r3, [pc, #56]	; (193c4 <overHeadWaterStatusOnCall+0x70>)
   1938c:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   1938e:	e010      	b.n	193b2 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   19390:	230f      	movs	r3, #15
   19392:	18fb      	adds	r3, r7, r3
   19394:	781b      	ldrb	r3, [r3, #0]
   19396:	2b01      	cmp	r3, #1
   19398:	d103      	bne.n	193a2 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   1939a:	2058      	movs	r0, #88	; 0x58
   1939c:	4b09      	ldr	r3, [pc, #36]	; (193c4 <overHeadWaterStatusOnCall+0x70>)
   1939e:	4798      	blx	r3
}
   193a0:	e007      	b.n	193b2 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   193a2:	230f      	movs	r3, #15
   193a4:	18fb      	adds	r3, r7, r3
   193a6:	781b      	ldrb	r3, [r3, #0]
   193a8:	2b00      	cmp	r3, #0
   193aa:	d102      	bne.n	193b2 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   193ac:	2057      	movs	r0, #87	; 0x57
   193ae:	4b05      	ldr	r3, [pc, #20]	; (193c4 <overHeadWaterStatusOnCall+0x70>)
   193b0:	4798      	blx	r3
}
   193b2:	46c0      	nop			; (mov r8, r8)
   193b4:	46bd      	mov	sp, r7
   193b6:	b005      	add	sp, #20
   193b8:	bd90      	pop	{r4, r7, pc}
   193ba:	46c0      	nop			; (mov r8, r8)
   193bc:	000192fd 	.word	0x000192fd
   193c0:	20000788 	.word	0x20000788
   193c4:	00014b11 	.word	0x00014b11

000193c8 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   193c8:	b580      	push	{r7, lr}
   193ca:	b084      	sub	sp, #16
   193cc:	af00      	add	r7, sp, #0
   193ce:	60f8      	str	r0, [r7, #12]
   193d0:	60b9      	str	r1, [r7, #8]
   193d2:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   193d4:	2037      	movs	r0, #55	; 0x37
   193d6:	4b0c      	ldr	r3, [pc, #48]	; (19408 <readWaterSensorState+0x40>)
   193d8:	4798      	blx	r3
   193da:	0003      	movs	r3, r0
   193dc:	001a      	movs	r2, r3
   193de:	68fb      	ldr	r3, [r7, #12]
   193e0:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   193e2:	200f      	movs	r0, #15
   193e4:	4b08      	ldr	r3, [pc, #32]	; (19408 <readWaterSensorState+0x40>)
   193e6:	4798      	blx	r3
   193e8:	0003      	movs	r3, r0
   193ea:	001a      	movs	r2, r3
   193ec:	68bb      	ldr	r3, [r7, #8]
   193ee:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   193f0:	200e      	movs	r0, #14
   193f2:	4b05      	ldr	r3, [pc, #20]	; (19408 <readWaterSensorState+0x40>)
   193f4:	4798      	blx	r3
   193f6:	0003      	movs	r3, r0
   193f8:	001a      	movs	r2, r3
   193fa:	687b      	ldr	r3, [r7, #4]
   193fc:	701a      	strb	r2, [r3, #0]
}
   193fe:	46c0      	nop			; (mov r8, r8)
   19400:	46bd      	mov	sp, r7
   19402:	b004      	add	sp, #16
   19404:	bd80      	pop	{r7, pc}
   19406:	46c0      	nop			; (mov r8, r8)
   19408:	00019055 	.word	0x00019055

0001940c <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   1940c:	b580      	push	{r7, lr}
   1940e:	b082      	sub	sp, #8
   19410:	af00      	add	r7, sp, #0
   19412:	0002      	movs	r2, r0
   19414:	1dfb      	adds	r3, r7, #7
   19416:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   19418:	4b03      	ldr	r3, [pc, #12]	; (19428 <updateUndergroundLevel+0x1c>)
   1941a:	1dfa      	adds	r2, r7, #7
   1941c:	7812      	ldrb	r2, [r2, #0]
   1941e:	701a      	strb	r2, [r3, #0]
}
   19420:	46c0      	nop			; (mov r8, r8)
   19422:	46bd      	mov	sp, r7
   19424:	b002      	add	sp, #8
   19426:	bd80      	pop	{r7, pc}
   19428:	20000858 	.word	0x20000858

0001942c <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   1942c:	b580      	push	{r7, lr}
   1942e:	b082      	sub	sp, #8
   19430:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   19432:	1d3a      	adds	r2, r7, #4
   19434:	1d79      	adds	r1, r7, #5
   19436:	1dbb      	adds	r3, r7, #6
   19438:	0018      	movs	r0, r3
   1943a:	4b17      	ldr	r3, [pc, #92]	; (19498 <getWaterSensorState+0x6c>)
   1943c:	4798      	blx	r3
	uint8_t ans=0;
   1943e:	1dfb      	adds	r3, r7, #7
   19440:	2200      	movs	r2, #0
   19442:	701a      	strb	r2, [r3, #0]

	if(!l)
   19444:	1dbb      	adds	r3, r7, #6
   19446:	781b      	ldrb	r3, [r3, #0]
   19448:	2201      	movs	r2, #1
   1944a:	4053      	eors	r3, r2
   1944c:	b2db      	uxtb	r3, r3
   1944e:	2b00      	cmp	r3, #0
   19450:	d01c      	beq.n	1948c <getWaterSensorState+0x60>
	{
		ans++;
   19452:	1dfb      	adds	r3, r7, #7
   19454:	781a      	ldrb	r2, [r3, #0]
   19456:	1dfb      	adds	r3, r7, #7
   19458:	3201      	adds	r2, #1
   1945a:	701a      	strb	r2, [r3, #0]
		if(!m)
   1945c:	1d7b      	adds	r3, r7, #5
   1945e:	781b      	ldrb	r3, [r3, #0]
   19460:	2201      	movs	r2, #1
   19462:	4053      	eors	r3, r2
   19464:	b2db      	uxtb	r3, r3
   19466:	2b00      	cmp	r3, #0
   19468:	d010      	beq.n	1948c <getWaterSensorState+0x60>
		{
			ans++;
   1946a:	1dfb      	adds	r3, r7, #7
   1946c:	781a      	ldrb	r2, [r3, #0]
   1946e:	1dfb      	adds	r3, r7, #7
   19470:	3201      	adds	r2, #1
   19472:	701a      	strb	r2, [r3, #0]
			if(!h)
   19474:	1d3b      	adds	r3, r7, #4
   19476:	781b      	ldrb	r3, [r3, #0]
   19478:	2201      	movs	r2, #1
   1947a:	4053      	eors	r3, r2
   1947c:	b2db      	uxtb	r3, r3
   1947e:	2b00      	cmp	r3, #0
   19480:	d004      	beq.n	1948c <getWaterSensorState+0x60>
			{
				ans++;
   19482:	1dfb      	adds	r3, r7, #7
   19484:	781a      	ldrb	r2, [r3, #0]
   19486:	1dfb      	adds	r3, r7, #7
   19488:	3201      	adds	r2, #1
   1948a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1948c:	1dfb      	adds	r3, r7, #7
   1948e:	781b      	ldrb	r3, [r3, #0]
}
   19490:	0018      	movs	r0, r3
   19492:	46bd      	mov	sp, r7
   19494:	b002      	add	sp, #8
   19496:	bd80      	pop	{r7, pc}
   19498:	000193c9 	.word	0x000193c9

0001949c <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   1949c:	b590      	push	{r4, r7, lr}
   1949e:	b085      	sub	sp, #20
   194a0:	af00      	add	r7, sp, #0
   194a2:	0002      	movs	r2, r0
   194a4:	1dfb      	adds	r3, r7, #7
   194a6:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   194a8:	230f      	movs	r3, #15
   194aa:	18fc      	adds	r4, r7, r3
   194ac:	4b19      	ldr	r3, [pc, #100]	; (19514 <waterStatusOnCall+0x78>)
   194ae:	4798      	blx	r3
   194b0:	0003      	movs	r3, r0
   194b2:	7023      	strb	r3, [r4, #0]
	if(current)
   194b4:	1dfb      	adds	r3, r7, #7
   194b6:	781b      	ldrb	r3, [r3, #0]
   194b8:	2b00      	cmp	r3, #0
   194ba:	d004      	beq.n	194c6 <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   194bc:	230f      	movs	r3, #15
   194be:	18fb      	adds	r3, r7, r3
   194c0:	4a15      	ldr	r2, [pc, #84]	; (19518 <waterStatusOnCall+0x7c>)
   194c2:	7812      	ldrb	r2, [r2, #0]
   194c4:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   194c6:	230f      	movs	r3, #15
   194c8:	18fb      	adds	r3, r7, r3
   194ca:	781b      	ldrb	r3, [r3, #0]
   194cc:	2b00      	cmp	r3, #0
   194ce:	d103      	bne.n	194d8 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   194d0:	2054      	movs	r0, #84	; 0x54
   194d2:	4b12      	ldr	r3, [pc, #72]	; (1951c <waterStatusOnCall+0x80>)
   194d4:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   194d6:	e019      	b.n	1950c <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   194d8:	230f      	movs	r3, #15
   194da:	18fb      	adds	r3, r7, r3
   194dc:	781b      	ldrb	r3, [r3, #0]
   194de:	2b01      	cmp	r3, #1
   194e0:	d103      	bne.n	194ea <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   194e2:	2051      	movs	r0, #81	; 0x51
   194e4:	4b0d      	ldr	r3, [pc, #52]	; (1951c <waterStatusOnCall+0x80>)
   194e6:	4798      	blx	r3
}
   194e8:	e010      	b.n	1950c <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   194ea:	230f      	movs	r3, #15
   194ec:	18fb      	adds	r3, r7, r3
   194ee:	781b      	ldrb	r3, [r3, #0]
   194f0:	2b02      	cmp	r3, #2
   194f2:	d103      	bne.n	194fc <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   194f4:	2052      	movs	r0, #82	; 0x52
   194f6:	4b09      	ldr	r3, [pc, #36]	; (1951c <waterStatusOnCall+0x80>)
   194f8:	4798      	blx	r3
}
   194fa:	e007      	b.n	1950c <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   194fc:	230f      	movs	r3, #15
   194fe:	18fb      	adds	r3, r7, r3
   19500:	781b      	ldrb	r3, [r3, #0]
   19502:	2b03      	cmp	r3, #3
   19504:	d102      	bne.n	1950c <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   19506:	2045      	movs	r0, #69	; 0x45
   19508:	4b04      	ldr	r3, [pc, #16]	; (1951c <waterStatusOnCall+0x80>)
   1950a:	4798      	blx	r3
}
   1950c:	46c0      	nop			; (mov r8, r8)
   1950e:	46bd      	mov	sp, r7
   19510:	b005      	add	sp, #20
   19512:	bd90      	pop	{r4, r7, pc}
   19514:	0001942d 	.word	0x0001942d
   19518:	20000858 	.word	0x20000858
   1951c:	00014b11 	.word	0x00014b11

00019520 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   19520:	b590      	push	{r4, r7, lr}
   19522:	b085      	sub	sp, #20
   19524:	af00      	add	r7, sp, #0
   19526:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   19528:	2308      	movs	r3, #8
   1952a:	18fb      	adds	r3, r7, r3
   1952c:	0018      	movs	r0, r3
   1952e:	4b8b      	ldr	r3, [pc, #556]	; (1975c <Water_Level_Task+0x23c>)
   19530:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   19532:	2308      	movs	r3, #8
   19534:	18fb      	adds	r3, r7, r3
   19536:	2200      	movs	r2, #0
   19538:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   1953a:	2308      	movs	r3, #8
   1953c:	18fb      	adds	r3, r7, r3
   1953e:	2201      	movs	r2, #1
   19540:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   19542:	2308      	movs	r3, #8
   19544:	18fb      	adds	r3, r7, r3
   19546:	0019      	movs	r1, r3
   19548:	202f      	movs	r0, #47	; 0x2f
   1954a:	4b85      	ldr	r3, [pc, #532]	; (19760 <Water_Level_Task+0x240>)
   1954c:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   1954e:	2308      	movs	r3, #8
   19550:	18fb      	adds	r3, r7, r3
   19552:	0019      	movs	r1, r3
   19554:	200c      	movs	r0, #12
   19556:	4b82      	ldr	r3, [pc, #520]	; (19760 <Water_Level_Task+0x240>)
   19558:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   1955a:	2308      	movs	r3, #8
   1955c:	18fb      	adds	r3, r7, r3
   1955e:	0019      	movs	r1, r3
   19560:	200d      	movs	r0, #13
   19562:	4b7f      	ldr	r3, [pc, #508]	; (19760 <Water_Level_Task+0x240>)
   19564:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   19566:	2308      	movs	r3, #8
   19568:	18fb      	adds	r3, r7, r3
   1956a:	0019      	movs	r1, r3
   1956c:	200e      	movs	r0, #14
   1956e:	4b7c      	ldr	r3, [pc, #496]	; (19760 <Water_Level_Task+0x240>)
   19570:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   19572:	2308      	movs	r3, #8
   19574:	18fb      	adds	r3, r7, r3
   19576:	0019      	movs	r1, r3
   19578:	200f      	movs	r0, #15
   1957a:	4b79      	ldr	r3, [pc, #484]	; (19760 <Water_Level_Task+0x240>)
   1957c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   1957e:	2308      	movs	r3, #8
   19580:	18fb      	adds	r3, r7, r3
   19582:	0019      	movs	r1, r3
   19584:	2037      	movs	r0, #55	; 0x37
   19586:	4b76      	ldr	r3, [pc, #472]	; (19760 <Water_Level_Task+0x240>)
   19588:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   1958a:	4b76      	ldr	r3, [pc, #472]	; (19764 <Water_Level_Task+0x244>)
   1958c:	2202      	movs	r2, #2
   1958e:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   19590:	4b75      	ldr	r3, [pc, #468]	; (19768 <Water_Level_Task+0x248>)
   19592:	2202      	movs	r2, #2
   19594:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   19596:	4b75      	ldr	r3, [pc, #468]	; (1976c <Water_Level_Task+0x24c>)
   19598:	2201      	movs	r2, #1
   1959a:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   1959c:	4b74      	ldr	r3, [pc, #464]	; (19770 <Water_Level_Task+0x250>)
   1959e:	2201      	movs	r2, #1
   195a0:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   195a2:	4b74      	ldr	r3, [pc, #464]	; (19774 <Water_Level_Task+0x254>)
   195a4:	2200      	movs	r2, #0
   195a6:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   195a8:	230f      	movs	r3, #15
   195aa:	18fb      	adds	r3, r7, r3
   195ac:	2200      	movs	r2, #0
   195ae:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   195b0:	4b71      	ldr	r3, [pc, #452]	; (19778 <Water_Level_Task+0x258>)
   195b2:	791b      	ldrb	r3, [r3, #4]
   195b4:	2b00      	cmp	r3, #0
   195b6:	d004      	beq.n	195c2 <Water_Level_Task+0xa2>
	{
		j = 19;
   195b8:	230f      	movs	r3, #15
   195ba:	18fb      	adds	r3, r7, r3
   195bc:	2213      	movs	r2, #19
   195be:	701a      	strb	r2, [r3, #0]
   195c0:	e003      	b.n	195ca <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   195c2:	230f      	movs	r3, #15
   195c4:	18fb      	adds	r3, r7, r3
   195c6:	2211      	movs	r2, #17
   195c8:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   195ca:	230e      	movs	r3, #14
   195cc:	18fb      	adds	r3, r7, r3
   195ce:	220c      	movs	r2, #12
   195d0:	701a      	strb	r2, [r3, #0]
   195d2:	e00c      	b.n	195ee <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   195d4:	230e      	movs	r3, #14
   195d6:	18fb      	adds	r3, r7, r3
   195d8:	781b      	ldrb	r3, [r3, #0]
   195da:	4a68      	ldr	r2, [pc, #416]	; (1977c <Water_Level_Task+0x25c>)
   195dc:	2101      	movs	r1, #1
   195de:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   195e0:	230e      	movs	r3, #14
   195e2:	18fb      	adds	r3, r7, r3
   195e4:	781a      	ldrb	r2, [r3, #0]
   195e6:	230e      	movs	r3, #14
   195e8:	18fb      	adds	r3, r7, r3
   195ea:	3201      	adds	r2, #1
   195ec:	701a      	strb	r2, [r3, #0]
   195ee:	230e      	movs	r3, #14
   195f0:	18fa      	adds	r2, r7, r3
   195f2:	230f      	movs	r3, #15
   195f4:	18fb      	adds	r3, r7, r3
   195f6:	7812      	ldrb	r2, [r2, #0]
   195f8:	781b      	ldrb	r3, [r3, #0]
   195fa:	429a      	cmp	r2, r3
   195fc:	d3ea      	bcc.n	195d4 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   195fe:	4b60      	ldr	r3, [pc, #384]	; (19780 <Water_Level_Task+0x260>)
   19600:	2249      	movs	r2, #73	; 0x49
   19602:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   19604:	4b5e      	ldr	r3, [pc, #376]	; (19780 <Water_Level_Task+0x260>)
   19606:	2244      	movs	r2, #68	; 0x44
   19608:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   1960a:	4b5d      	ldr	r3, [pc, #372]	; (19780 <Water_Level_Task+0x260>)
   1960c:	2248      	movs	r2, #72	; 0x48
   1960e:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   19610:	4b5b      	ldr	r3, [pc, #364]	; (19780 <Water_Level_Task+0x260>)
   19612:	2245      	movs	r2, #69	; 0x45
   19614:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   19616:	4b5a      	ldr	r3, [pc, #360]	; (19780 <Water_Level_Task+0x260>)
   19618:	225a      	movs	r2, #90	; 0x5a
   1961a:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   1961c:	4b56      	ldr	r3, [pc, #344]	; (19778 <Water_Level_Task+0x258>)
   1961e:	791b      	ldrb	r3, [r3, #4]
   19620:	2b00      	cmp	r3, #0
   19622:	d005      	beq.n	19630 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   19624:	4b56      	ldr	r3, [pc, #344]	; (19780 <Water_Level_Task+0x260>)
   19626:	2256      	movs	r2, #86	; 0x56
   19628:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   1962a:	4b55      	ldr	r3, [pc, #340]	; (19780 <Water_Level_Task+0x260>)
   1962c:	2257      	movs	r2, #87	; 0x57
   1962e:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   19630:	4b51      	ldr	r3, [pc, #324]	; (19778 <Water_Level_Task+0x258>)
   19632:	78db      	ldrb	r3, [r3, #3]
   19634:	2b00      	cmp	r3, #0
   19636:	d00b      	beq.n	19650 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   19638:	4b52      	ldr	r3, [pc, #328]	; (19784 <Water_Level_Task+0x264>)
   1963a:	2200      	movs	r2, #0
   1963c:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   1963e:	4b51      	ldr	r3, [pc, #324]	; (19784 <Water_Level_Task+0x264>)
   19640:	2200      	movs	r2, #0
   19642:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   19644:	4b50      	ldr	r3, [pc, #320]	; (19788 <Water_Level_Task+0x268>)
   19646:	220d      	movs	r2, #13
   19648:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   1964a:	4b4f      	ldr	r3, [pc, #316]	; (19788 <Water_Level_Task+0x268>)
   1964c:	220f      	movs	r2, #15
   1964e:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   19650:	230c      	movs	r3, #12
   19652:	18fb      	adds	r3, r7, r3
   19654:	2200      	movs	r2, #0
   19656:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   19658:	4b4c      	ldr	r3, [pc, #304]	; (1978c <Water_Level_Task+0x26c>)
   1965a:	7fdb      	ldrb	r3, [r3, #31]
   1965c:	2b00      	cmp	r3, #0
   1965e:	d000      	beq.n	19662 <Water_Level_Task+0x142>
   19660:	e073      	b.n	1974a <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   19662:	230b      	movs	r3, #11
   19664:	18fc      	adds	r4, r7, r3
   19666:	4b4a      	ldr	r3, [pc, #296]	; (19790 <Water_Level_Task+0x270>)
   19668:	4798      	blx	r3
   1966a:	0003      	movs	r3, r0
   1966c:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   1966e:	4b42      	ldr	r3, [pc, #264]	; (19778 <Water_Level_Task+0x258>)
   19670:	791b      	ldrb	r3, [r3, #4]
   19672:	2b00      	cmp	r3, #0
   19674:	d005      	beq.n	19682 <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
   19676:	230d      	movs	r3, #13
   19678:	18fc      	adds	r4, r7, r3
   1967a:	4b46      	ldr	r3, [pc, #280]	; (19794 <Water_Level_Task+0x274>)
   1967c:	4798      	blx	r3
   1967e:	0003      	movs	r3, r0
   19680:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   19682:	4b3d      	ldr	r3, [pc, #244]	; (19778 <Water_Level_Task+0x258>)
   19684:	791b      	ldrb	r3, [r3, #4]
   19686:	2b01      	cmp	r3, #1
   19688:	d125      	bne.n	196d6 <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   1968a:	4b36      	ldr	r3, [pc, #216]	; (19764 <Water_Level_Task+0x244>)
   1968c:	781b      	ldrb	r3, [r3, #0]
   1968e:	220b      	movs	r2, #11
   19690:	18ba      	adds	r2, r7, r2
   19692:	7812      	ldrb	r2, [r2, #0]
   19694:	429a      	cmp	r2, r3
   19696:	d006      	beq.n	196a6 <Water_Level_Task+0x186>
   19698:	4b33      	ldr	r3, [pc, #204]	; (19768 <Water_Level_Task+0x248>)
   1969a:	781b      	ldrb	r3, [r3, #0]
   1969c:	220b      	movs	r2, #11
   1969e:	18ba      	adds	r2, r7, r2
   196a0:	7812      	ldrb	r2, [r2, #0]
   196a2:	429a      	cmp	r2, r3
   196a4:	d00f      	beq.n	196c6 <Water_Level_Task+0x1a6>
   196a6:	4b31      	ldr	r3, [pc, #196]	; (1976c <Water_Level_Task+0x24c>)
   196a8:	781b      	ldrb	r3, [r3, #0]
   196aa:	b2db      	uxtb	r3, r3
   196ac:	220d      	movs	r2, #13
   196ae:	18ba      	adds	r2, r7, r2
   196b0:	7812      	ldrb	r2, [r2, #0]
   196b2:	429a      	cmp	r2, r3
   196b4:	d009      	beq.n	196ca <Water_Level_Task+0x1aa>
   196b6:	4b2e      	ldr	r3, [pc, #184]	; (19770 <Water_Level_Task+0x250>)
   196b8:	781b      	ldrb	r3, [r3, #0]
   196ba:	b2db      	uxtb	r3, r3
   196bc:	220d      	movs	r2, #13
   196be:	18ba      	adds	r2, r7, r2
   196c0:	7812      	ldrb	r2, [r2, #0]
   196c2:	429a      	cmp	r2, r3
   196c4:	d101      	bne.n	196ca <Water_Level_Task+0x1aa>
   196c6:	2301      	movs	r3, #1
   196c8:	e000      	b.n	196cc <Water_Level_Task+0x1ac>
   196ca:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   196cc:	1c1a      	adds	r2, r3, #0
   196ce:	2301      	movs	r3, #1
   196d0:	4013      	ands	r3, r2
   196d2:	b2db      	uxtb	r3, r3
   196d4:	e014      	b.n	19700 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   196d6:	4b23      	ldr	r3, [pc, #140]	; (19764 <Water_Level_Task+0x244>)
   196d8:	781b      	ldrb	r3, [r3, #0]
   196da:	220b      	movs	r2, #11
   196dc:	18ba      	adds	r2, r7, r2
   196de:	7812      	ldrb	r2, [r2, #0]
   196e0:	429a      	cmp	r2, r3
   196e2:	d008      	beq.n	196f6 <Water_Level_Task+0x1d6>
   196e4:	4b20      	ldr	r3, [pc, #128]	; (19768 <Water_Level_Task+0x248>)
   196e6:	781b      	ldrb	r3, [r3, #0]
   196e8:	220b      	movs	r2, #11
   196ea:	18ba      	adds	r2, r7, r2
   196ec:	7812      	ldrb	r2, [r2, #0]
   196ee:	429a      	cmp	r2, r3
   196f0:	d101      	bne.n	196f6 <Water_Level_Task+0x1d6>
   196f2:	2301      	movs	r3, #1
   196f4:	e000      	b.n	196f8 <Water_Level_Task+0x1d8>
   196f6:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   196f8:	1c1a      	adds	r2, r3, #0
   196fa:	2301      	movs	r3, #1
   196fc:	4013      	ands	r3, r2
   196fe:	b2db      	uxtb	r3, r3
   19700:	2b00      	cmp	r3, #0
   19702:	d010      	beq.n	19726 <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
   19704:	4b1b      	ldr	r3, [pc, #108]	; (19774 <Water_Level_Task+0x254>)
   19706:	781b      	ldrb	r3, [r3, #0]
   19708:	3301      	adds	r3, #1
   1970a:	b2da      	uxtb	r2, r3
   1970c:	4b19      	ldr	r3, [pc, #100]	; (19774 <Water_Level_Task+0x254>)
   1970e:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   19710:	4b18      	ldr	r3, [pc, #96]	; (19774 <Water_Level_Task+0x254>)
   19712:	781b      	ldrb	r3, [r3, #0]
   19714:	2b09      	cmp	r3, #9
   19716:	d909      	bls.n	1972c <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
   19718:	4b1f      	ldr	r3, [pc, #124]	; (19798 <Water_Level_Task+0x278>)
   1971a:	4798      	blx	r3
					result=true;
   1971c:	230c      	movs	r3, #12
   1971e:	18fb      	adds	r3, r7, r3
   19720:	2201      	movs	r2, #1
   19722:	701a      	strb	r2, [r3, #0]
   19724:	e002      	b.n	1972c <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
   19726:	4b13      	ldr	r3, [pc, #76]	; (19774 <Water_Level_Task+0x254>)
   19728:	2200      	movs	r2, #0
   1972a:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   1972c:	4b0e      	ldr	r3, [pc, #56]	; (19768 <Water_Level_Task+0x248>)
   1972e:	220b      	movs	r2, #11
   19730:	18ba      	adds	r2, r7, r2
   19732:	7812      	ldrb	r2, [r2, #0]
   19734:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   19736:	4b10      	ldr	r3, [pc, #64]	; (19778 <Water_Level_Task+0x258>)
   19738:	791b      	ldrb	r3, [r3, #4]
   1973a:	2b00      	cmp	r3, #0
   1973c:	d009      	beq.n	19752 <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
   1973e:	4b0c      	ldr	r3, [pc, #48]	; (19770 <Water_Level_Task+0x250>)
   19740:	220d      	movs	r2, #13
   19742:	18ba      	adds	r2, r7, r2
   19744:	7812      	ldrb	r2, [r2, #0]
   19746:	701a      	strb	r2, [r3, #0]
   19748:	e003      	b.n	19752 <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   1974a:	4b14      	ldr	r3, [pc, #80]	; (1979c <Water_Level_Task+0x27c>)
   1974c:	0018      	movs	r0, r3
   1974e:	4b14      	ldr	r3, [pc, #80]	; (197a0 <Water_Level_Task+0x280>)
   19750:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   19752:	2064      	movs	r0, #100	; 0x64
   19754:	4b12      	ldr	r3, [pc, #72]	; (197a0 <Water_Level_Task+0x280>)
   19756:	4798      	blx	r3
	{
   19758:	e77a      	b.n	19650 <Water_Level_Task+0x130>
   1975a:	46c0      	nop			; (mov r8, r8)
   1975c:	00019031 	.word	0x00019031
   19760:	00022ff1 	.word	0x00022ff1
   19764:	20000858 	.word	0x20000858
   19768:	20000769 	.word	0x20000769
   1976c:	20000788 	.word	0x20000788
   19770:	2000075a 	.word	0x2000075a
   19774:	20000784 	.word	0x20000784
   19778:	2000062c 	.word	0x2000062c
   1977c:	2000070c 	.word	0x2000070c
   19780:	200007f8 	.word	0x200007f8
   19784:	200007bc 	.word	0x200007bc
   19788:	20000738 	.word	0x20000738
   1978c:	20000654 	.word	0x20000654
   19790:	0001942d 	.word	0x0001942d
   19794:	000192fd 	.word	0x000192fd
   19798:	000197a5 	.word	0x000197a5
   1979c:	00001388 	.word	0x00001388
   197a0:	0001ff69 	.word	0x0001ff69

000197a4 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   197a4:	b580      	push	{r7, lr}
   197a6:	b082      	sub	sp, #8
   197a8:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   197aa:	1dfb      	adds	r3, r7, #7
   197ac:	4abb      	ldr	r2, [pc, #748]	; (19a9c <operateOnWaterEvent+0x2f8>)
   197ae:	7812      	ldrb	r2, [r2, #0]
   197b0:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   197b2:	1dbb      	adds	r3, r7, #6
   197b4:	4aba      	ldr	r2, [pc, #744]	; (19aa0 <operateOnWaterEvent+0x2fc>)
   197b6:	7812      	ldrb	r2, [r2, #0]
   197b8:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   197ba:	4bba      	ldr	r3, [pc, #744]	; (19aa4 <operateOnWaterEvent+0x300>)
   197bc:	781b      	ldrb	r3, [r3, #0]
   197be:	1dfa      	adds	r2, r7, #7
   197c0:	7812      	ldrb	r2, [r2, #0]
   197c2:	429a      	cmp	r2, r3
   197c4:	d10c      	bne.n	197e0 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   197c6:	4bb8      	ldr	r3, [pc, #736]	; (19aa8 <operateOnWaterEvent+0x304>)
   197c8:	791b      	ldrb	r3, [r3, #4]
   197ca:	2b00      	cmp	r3, #0
   197cc:	d000      	beq.n	197d0 <operateOnWaterEvent+0x2c>
   197ce:	e15e      	b.n	19a8e <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   197d0:	4bb6      	ldr	r3, [pc, #728]	; (19aac <operateOnWaterEvent+0x308>)
   197d2:	781b      	ldrb	r3, [r3, #0]
   197d4:	b2db      	uxtb	r3, r3
   197d6:	1dba      	adds	r2, r7, #6
   197d8:	7812      	ldrb	r2, [r2, #0]
   197da:	429a      	cmp	r2, r3
   197dc:	d100      	bne.n	197e0 <operateOnWaterEvent+0x3c>
   197de:	e158      	b.n	19a92 <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
   197e0:	4bb3      	ldr	r3, [pc, #716]	; (19ab0 <operateOnWaterEvent+0x30c>)
   197e2:	4798      	blx	r3
   197e4:	1e03      	subs	r3, r0, #0
   197e6:	d100      	bne.n	197ea <operateOnWaterEvent+0x46>
   197e8:	e0c3      	b.n	19972 <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   197ea:	1dfb      	adds	r3, r7, #7
   197ec:	781b      	ldrb	r3, [r3, #0]
   197ee:	2b00      	cmp	r3, #0
   197f0:	d122      	bne.n	19838 <operateOnWaterEvent+0x94>
   197f2:	4bac      	ldr	r3, [pc, #688]	; (19aa4 <operateOnWaterEvent+0x300>)
   197f4:	781b      	ldrb	r3, [r3, #0]
   197f6:	2b00      	cmp	r3, #0
   197f8:	d01e      	beq.n	19838 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   197fa:	2200      	movs	r2, #0
   197fc:	2101      	movs	r1, #1
   197fe:	2000      	movs	r0, #0
   19800:	4bac      	ldr	r3, [pc, #688]	; (19ab4 <operateOnWaterEvent+0x310>)
   19802:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   19804:	2049      	movs	r0, #73	; 0x49
   19806:	4bac      	ldr	r3, [pc, #688]	; (19ab8 <operateOnWaterEvent+0x314>)
   19808:	4798      	blx	r3
   1980a:	0003      	movs	r3, r0
   1980c:	001a      	movs	r2, r3
   1980e:	4bab      	ldr	r3, [pc, #684]	; (19abc <operateOnWaterEvent+0x318>)
   19810:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19812:	4ba5      	ldr	r3, [pc, #660]	; (19aa8 <operateOnWaterEvent+0x304>)
   19814:	78db      	ldrb	r3, [r3, #3]
   19816:	2b00      	cmp	r3, #0
   19818:	d100      	bne.n	1981c <operateOnWaterEvent+0x78>
   1981a:	e071      	b.n	19900 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   1981c:	4ba8      	ldr	r3, [pc, #672]	; (19ac0 <operateOnWaterEvent+0x31c>)
   1981e:	795b      	ldrb	r3, [r3, #5]
   19820:	2b00      	cmp	r3, #0
   19822:	d100      	bne.n	19826 <operateOnWaterEvent+0x82>
   19824:	e06c      	b.n	19900 <operateOnWaterEvent+0x15c>
   19826:	4b9f      	ldr	r3, [pc, #636]	; (19aa4 <operateOnWaterEvent+0x300>)
   19828:	781b      	ldrb	r3, [r3, #0]
   1982a:	2b01      	cmp	r3, #1
   1982c:	d800      	bhi.n	19830 <operateOnWaterEvent+0x8c>
   1982e:	e067      	b.n	19900 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   19830:	4ba4      	ldr	r3, [pc, #656]	; (19ac4 <operateOnWaterEvent+0x320>)
   19832:	2201      	movs	r2, #1
   19834:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19836:	e063      	b.n	19900 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   19838:	1dfb      	adds	r3, r7, #7
   1983a:	781b      	ldrb	r3, [r3, #0]
   1983c:	2b03      	cmp	r3, #3
   1983e:	d12f      	bne.n	198a0 <operateOnWaterEvent+0xfc>
   19840:	4b98      	ldr	r3, [pc, #608]	; (19aa4 <operateOnWaterEvent+0x300>)
   19842:	781b      	ldrb	r3, [r3, #0]
   19844:	2b02      	cmp	r3, #2
   19846:	d82b      	bhi.n	198a0 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19848:	4b97      	ldr	r3, [pc, #604]	; (19aa8 <operateOnWaterEvent+0x304>)
   1984a:	78db      	ldrb	r3, [r3, #3]
   1984c:	2b00      	cmp	r3, #0
   1984e:	d05a      	beq.n	19906 <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
   19850:	4b9b      	ldr	r3, [pc, #620]	; (19ac0 <operateOnWaterEvent+0x31c>)
   19852:	795b      	ldrb	r3, [r3, #5]
   19854:	2b00      	cmp	r3, #0
   19856:	d003      	beq.n	19860 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   19858:	4b9a      	ldr	r3, [pc, #616]	; (19ac4 <operateOnWaterEvent+0x320>)
   1985a:	2201      	movs	r2, #1
   1985c:	705a      	strb	r2, [r3, #1]
   1985e:	e006      	b.n	1986e <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   19860:	2045      	movs	r0, #69	; 0x45
   19862:	4b95      	ldr	r3, [pc, #596]	; (19ab8 <operateOnWaterEvent+0x314>)
   19864:	4798      	blx	r3
   19866:	0003      	movs	r3, r0
   19868:	001a      	movs	r2, r3
   1986a:	4b94      	ldr	r3, [pc, #592]	; (19abc <operateOnWaterEvent+0x318>)
   1986c:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   1986e:	4b96      	ldr	r3, [pc, #600]	; (19ac8 <operateOnWaterEvent+0x324>)
   19870:	7f9b      	ldrb	r3, [r3, #30]
   19872:	2b00      	cmp	r3, #0
   19874:	d00c      	beq.n	19890 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
   19876:	2200      	movs	r2, #0
   19878:	2101      	movs	r1, #1
   1987a:	2000      	movs	r0, #0
   1987c:	4b8d      	ldr	r3, [pc, #564]	; (19ab4 <operateOnWaterEvent+0x310>)
   1987e:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   19880:	2048      	movs	r0, #72	; 0x48
   19882:	4b8d      	ldr	r3, [pc, #564]	; (19ab8 <operateOnWaterEvent+0x314>)
   19884:	4798      	blx	r3
   19886:	0003      	movs	r3, r0
   19888:	001a      	movs	r2, r3
   1988a:	4b8c      	ldr	r3, [pc, #560]	; (19abc <operateOnWaterEvent+0x318>)
   1988c:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1988e:	e03a      	b.n	19906 <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   19890:	2045      	movs	r0, #69	; 0x45
   19892:	4b89      	ldr	r3, [pc, #548]	; (19ab8 <operateOnWaterEvent+0x314>)
   19894:	4798      	blx	r3
   19896:	0003      	movs	r3, r0
   19898:	001a      	movs	r2, r3
   1989a:	4b88      	ldr	r3, [pc, #544]	; (19abc <operateOnWaterEvent+0x318>)
   1989c:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1989e:	e032      	b.n	19906 <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   198a0:	1dfb      	adds	r3, r7, #7
   198a2:	781b      	ldrb	r3, [r3, #0]
   198a4:	2b01      	cmp	r3, #1
   198a6:	d11b      	bne.n	198e0 <operateOnWaterEvent+0x13c>
   198a8:	4b7e      	ldr	r3, [pc, #504]	; (19aa4 <operateOnWaterEvent+0x300>)
   198aa:	781b      	ldrb	r3, [r3, #0]
   198ac:	2b01      	cmp	r3, #1
   198ae:	d917      	bls.n	198e0 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   198b0:	4b7d      	ldr	r3, [pc, #500]	; (19aa8 <operateOnWaterEvent+0x304>)
   198b2:	78db      	ldrb	r3, [r3, #3]
   198b4:	2b00      	cmp	r3, #0
   198b6:	d007      	beq.n	198c8 <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
   198b8:	4b81      	ldr	r3, [pc, #516]	; (19ac0 <operateOnWaterEvent+0x31c>)
   198ba:	795b      	ldrb	r3, [r3, #5]
   198bc:	2b00      	cmp	r3, #0
   198be:	d021      	beq.n	19904 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   198c0:	4b80      	ldr	r3, [pc, #512]	; (19ac4 <operateOnWaterEvent+0x320>)
   198c2:	2201      	movs	r2, #1
   198c4:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   198c6:	e01d      	b.n	19904 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   198c8:	4b77      	ldr	r3, [pc, #476]	; (19aa8 <operateOnWaterEvent+0x304>)
   198ca:	79db      	ldrb	r3, [r3, #7]
   198cc:	2b00      	cmp	r3, #0
   198ce:	d019      	beq.n	19904 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   198d0:	2044      	movs	r0, #68	; 0x44
   198d2:	4b79      	ldr	r3, [pc, #484]	; (19ab8 <operateOnWaterEvent+0x314>)
   198d4:	4798      	blx	r3
   198d6:	0003      	movs	r3, r0
   198d8:	001a      	movs	r2, r3
   198da:	4b78      	ldr	r3, [pc, #480]	; (19abc <operateOnWaterEvent+0x318>)
   198dc:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   198de:	e011      	b.n	19904 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   198e0:	1dfb      	adds	r3, r7, #7
   198e2:	781b      	ldrb	r3, [r3, #0]
   198e4:	2b02      	cmp	r3, #2
   198e6:	d10e      	bne.n	19906 <operateOnWaterEvent+0x162>
   198e8:	4b6e      	ldr	r3, [pc, #440]	; (19aa4 <operateOnWaterEvent+0x300>)
   198ea:	781b      	ldrb	r3, [r3, #0]
   198ec:	2b01      	cmp	r3, #1
   198ee:	d80a      	bhi.n	19906 <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   198f0:	205a      	movs	r0, #90	; 0x5a
   198f2:	4b71      	ldr	r3, [pc, #452]	; (19ab8 <operateOnWaterEvent+0x314>)
   198f4:	4798      	blx	r3
   198f6:	0003      	movs	r3, r0
   198f8:	001a      	movs	r2, r3
   198fa:	4b70      	ldr	r3, [pc, #448]	; (19abc <operateOnWaterEvent+0x318>)
   198fc:	741a      	strb	r2, [r3, #16]
   198fe:	e002      	b.n	19906 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19900:	46c0      	nop			; (mov r8, r8)
   19902:	e000      	b.n	19906 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   19904:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19906:	4b68      	ldr	r3, [pc, #416]	; (19aa8 <operateOnWaterEvent+0x304>)
   19908:	791b      	ldrb	r3, [r3, #4]
   1990a:	2b00      	cmp	r3, #0
   1990c:	d100      	bne.n	19910 <operateOnWaterEvent+0x16c>
   1990e:	e0af      	b.n	19a70 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
   19910:	4b66      	ldr	r3, [pc, #408]	; (19aac <operateOnWaterEvent+0x308>)
   19912:	781b      	ldrb	r3, [r3, #0]
   19914:	b2db      	uxtb	r3, r3
   19916:	1dba      	adds	r2, r7, #6
   19918:	7812      	ldrb	r2, [r2, #0]
   1991a:	429a      	cmp	r2, r3
   1991c:	d100      	bne.n	19920 <operateOnWaterEvent+0x17c>
   1991e:	e0a7      	b.n	19a70 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   19920:	1dbb      	adds	r3, r7, #6
   19922:	781b      	ldrb	r3, [r3, #0]
   19924:	2b02      	cmp	r3, #2
   19926:	d111      	bne.n	1994c <operateOnWaterEvent+0x1a8>
   19928:	4b60      	ldr	r3, [pc, #384]	; (19aac <operateOnWaterEvent+0x308>)
   1992a:	781b      	ldrb	r3, [r3, #0]
   1992c:	b2db      	uxtb	r3, r3
   1992e:	2b01      	cmp	r3, #1
   19930:	d80c      	bhi.n	1994c <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
   19932:	2200      	movs	r2, #0
   19934:	2101      	movs	r1, #1
   19936:	2000      	movs	r0, #0
   19938:	4b5e      	ldr	r3, [pc, #376]	; (19ab4 <operateOnWaterEvent+0x310>)
   1993a:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   1993c:	2056      	movs	r0, #86	; 0x56
   1993e:	4b5e      	ldr	r3, [pc, #376]	; (19ab8 <operateOnWaterEvent+0x314>)
   19940:	4798      	blx	r3
   19942:	0003      	movs	r3, r0
   19944:	001a      	movs	r2, r3
   19946:	4b5d      	ldr	r3, [pc, #372]	; (19abc <operateOnWaterEvent+0x318>)
   19948:	745a      	strb	r2, [r3, #17]
   1994a:	e091      	b.n	19a70 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   1994c:	1dbb      	adds	r3, r7, #6
   1994e:	781b      	ldrb	r3, [r3, #0]
   19950:	2b00      	cmp	r3, #0
   19952:	d000      	beq.n	19956 <operateOnWaterEvent+0x1b2>
   19954:	e08c      	b.n	19a70 <operateOnWaterEvent+0x2cc>
   19956:	4b55      	ldr	r3, [pc, #340]	; (19aac <operateOnWaterEvent+0x308>)
   19958:	781b      	ldrb	r3, [r3, #0]
   1995a:	b2db      	uxtb	r3, r3
   1995c:	2b00      	cmp	r3, #0
   1995e:	d100      	bne.n	19962 <operateOnWaterEvent+0x1be>
   19960:	e086      	b.n	19a70 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   19962:	2057      	movs	r0, #87	; 0x57
   19964:	4b54      	ldr	r3, [pc, #336]	; (19ab8 <operateOnWaterEvent+0x314>)
   19966:	4798      	blx	r3
   19968:	0003      	movs	r3, r0
   1996a:	001a      	movs	r2, r3
   1996c:	4b53      	ldr	r3, [pc, #332]	; (19abc <operateOnWaterEvent+0x318>)
   1996e:	749a      	strb	r2, [r3, #18]
   19970:	e07e      	b.n	19a70 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   19972:	4b4d      	ldr	r3, [pc, #308]	; (19aa8 <operateOnWaterEvent+0x304>)
   19974:	78db      	ldrb	r3, [r3, #3]
   19976:	2b00      	cmp	r3, #0
   19978:	d027      	beq.n	199ca <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   1997a:	4b51      	ldr	r3, [pc, #324]	; (19ac0 <operateOnWaterEvent+0x31c>)
   1997c:	795b      	ldrb	r3, [r3, #5]
   1997e:	2b00      	cmp	r3, #0
   19980:	d00b      	beq.n	1999a <operateOnWaterEvent+0x1f6>
   19982:	1dfb      	adds	r3, r7, #7
   19984:	781b      	ldrb	r3, [r3, #0]
   19986:	2b01      	cmp	r3, #1
   19988:	d807      	bhi.n	1999a <operateOnWaterEvent+0x1f6>
   1998a:	4b46      	ldr	r3, [pc, #280]	; (19aa4 <operateOnWaterEvent+0x300>)
   1998c:	781b      	ldrb	r3, [r3, #0]
   1998e:	2b01      	cmp	r3, #1
   19990:	d903      	bls.n	1999a <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   19992:	4b4c      	ldr	r3, [pc, #304]	; (19ac4 <operateOnWaterEvent+0x320>)
   19994:	2201      	movs	r2, #1
   19996:	701a      	strb	r2, [r3, #0]
   19998:	e04b      	b.n	19a32 <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   1999a:	1dfb      	adds	r3, r7, #7
   1999c:	781b      	ldrb	r3, [r3, #0]
   1999e:	2b03      	cmp	r3, #3
   199a0:	d147      	bne.n	19a32 <operateOnWaterEvent+0x28e>
   199a2:	4b40      	ldr	r3, [pc, #256]	; (19aa4 <operateOnWaterEvent+0x300>)
   199a4:	781b      	ldrb	r3, [r3, #0]
   199a6:	2b02      	cmp	r3, #2
   199a8:	d843      	bhi.n	19a32 <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
   199aa:	4b45      	ldr	r3, [pc, #276]	; (19ac0 <operateOnWaterEvent+0x31c>)
   199ac:	795b      	ldrb	r3, [r3, #5]
   199ae:	2b00      	cmp	r3, #0
   199b0:	d003      	beq.n	199ba <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   199b2:	4b44      	ldr	r3, [pc, #272]	; (19ac4 <operateOnWaterEvent+0x320>)
   199b4:	2201      	movs	r2, #1
   199b6:	705a      	strb	r2, [r3, #1]
   199b8:	e03b      	b.n	19a32 <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   199ba:	2045      	movs	r0, #69	; 0x45
   199bc:	4b3e      	ldr	r3, [pc, #248]	; (19ab8 <operateOnWaterEvent+0x314>)
   199be:	4798      	blx	r3
   199c0:	0003      	movs	r3, r0
   199c2:	001a      	movs	r2, r3
   199c4:	4b3d      	ldr	r3, [pc, #244]	; (19abc <operateOnWaterEvent+0x318>)
   199c6:	73da      	strb	r2, [r3, #15]
   199c8:	e033      	b.n	19a32 <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   199ca:	1dfb      	adds	r3, r7, #7
   199cc:	781b      	ldrb	r3, [r3, #0]
   199ce:	2b03      	cmp	r3, #3
   199d0:	d10b      	bne.n	199ea <operateOnWaterEvent+0x246>
   199d2:	4b34      	ldr	r3, [pc, #208]	; (19aa4 <operateOnWaterEvent+0x300>)
   199d4:	781b      	ldrb	r3, [r3, #0]
   199d6:	2b02      	cmp	r3, #2
   199d8:	d807      	bhi.n	199ea <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   199da:	2045      	movs	r0, #69	; 0x45
   199dc:	4b36      	ldr	r3, [pc, #216]	; (19ab8 <operateOnWaterEvent+0x314>)
   199de:	4798      	blx	r3
   199e0:	0003      	movs	r3, r0
   199e2:	001a      	movs	r2, r3
   199e4:	4b35      	ldr	r3, [pc, #212]	; (19abc <operateOnWaterEvent+0x318>)
   199e6:	73da      	strb	r2, [r3, #15]
   199e8:	e023      	b.n	19a32 <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   199ea:	1dfb      	adds	r3, r7, #7
   199ec:	781b      	ldrb	r3, [r3, #0]
   199ee:	2b02      	cmp	r3, #2
   199f0:	d11f      	bne.n	19a32 <operateOnWaterEvent+0x28e>
   199f2:	4b2c      	ldr	r3, [pc, #176]	; (19aa4 <operateOnWaterEvent+0x300>)
   199f4:	781b      	ldrb	r3, [r3, #0]
   199f6:	2b01      	cmp	r3, #1
   199f8:	d81b      	bhi.n	19a32 <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   199fa:	4b2b      	ldr	r3, [pc, #172]	; (19aa8 <operateOnWaterEvent+0x304>)
   199fc:	791b      	ldrb	r3, [r3, #4]
   199fe:	2b00      	cmp	r3, #0
   19a00:	d00d      	beq.n	19a1e <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   19a02:	4b29      	ldr	r3, [pc, #164]	; (19aa8 <operateOnWaterEvent+0x304>)
   19a04:	799b      	ldrb	r3, [r3, #6]
   19a06:	2b00      	cmp	r3, #0
   19a08:	d009      	beq.n	19a1e <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   19a0a:	1dbb      	adds	r3, r7, #6
   19a0c:	781b      	ldrb	r3, [r3, #0]
   19a0e:	2b01      	cmp	r3, #1
   19a10:	d805      	bhi.n	19a1e <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19a12:	4b2d      	ldr	r3, [pc, #180]	; (19ac8 <operateOnWaterEvent+0x324>)
   19a14:	785b      	ldrb	r3, [r3, #1]
   19a16:	2b00      	cmp	r3, #0
   19a18:	d001      	beq.n	19a1e <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
   19a1a:	4b2c      	ldr	r3, [pc, #176]	; (19acc <operateOnWaterEvent+0x328>)
   19a1c:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   19a1e:	4b22      	ldr	r3, [pc, #136]	; (19aa8 <operateOnWaterEvent+0x304>)
   19a20:	799b      	ldrb	r3, [r3, #6]
   19a22:	2b00      	cmp	r3, #0
   19a24:	d005      	beq.n	19a32 <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   19a26:	4b28      	ldr	r3, [pc, #160]	; (19ac8 <operateOnWaterEvent+0x324>)
   19a28:	785b      	ldrb	r3, [r3, #1]
   19a2a:	2b00      	cmp	r3, #0
   19a2c:	d001      	beq.n	19a32 <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
   19a2e:	4b27      	ldr	r3, [pc, #156]	; (19acc <operateOnWaterEvent+0x328>)
   19a30:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   19a32:	4b1d      	ldr	r3, [pc, #116]	; (19aa8 <operateOnWaterEvent+0x304>)
   19a34:	791b      	ldrb	r3, [r3, #4]
   19a36:	2b00      	cmp	r3, #0
   19a38:	d01a      	beq.n	19a70 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   19a3a:	1dbb      	adds	r3, r7, #6
   19a3c:	781b      	ldrb	r3, [r3, #0]
   19a3e:	2b00      	cmp	r3, #0
   19a40:	d116      	bne.n	19a70 <operateOnWaterEvent+0x2cc>
   19a42:	4b1a      	ldr	r3, [pc, #104]	; (19aac <operateOnWaterEvent+0x308>)
   19a44:	781b      	ldrb	r3, [r3, #0]
   19a46:	b2db      	uxtb	r3, r3
   19a48:	2b00      	cmp	r3, #0
   19a4a:	d011      	beq.n	19a70 <operateOnWaterEvent+0x2cc>
   19a4c:	1dfb      	adds	r3, r7, #7
   19a4e:	781b      	ldrb	r3, [r3, #0]
   19a50:	2b00      	cmp	r3, #0
   19a52:	d00d      	beq.n	19a70 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   19a54:	4b1c      	ldr	r3, [pc, #112]	; (19ac8 <operateOnWaterEvent+0x324>)
   19a56:	785b      	ldrb	r3, [r3, #1]
   19a58:	2b00      	cmp	r3, #0
   19a5a:	d002      	beq.n	19a62 <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
   19a5c:	4b1b      	ldr	r3, [pc, #108]	; (19acc <operateOnWaterEvent+0x328>)
   19a5e:	4798      	blx	r3
   19a60:	e006      	b.n	19a70 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   19a62:	2057      	movs	r0, #87	; 0x57
   19a64:	4b14      	ldr	r3, [pc, #80]	; (19ab8 <operateOnWaterEvent+0x314>)
   19a66:	4798      	blx	r3
   19a68:	0003      	movs	r3, r0
   19a6a:	001a      	movs	r2, r3
   19a6c:	4b13      	ldr	r3, [pc, #76]	; (19abc <operateOnWaterEvent+0x318>)
   19a6e:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   19a70:	4b0d      	ldr	r3, [pc, #52]	; (19aa8 <operateOnWaterEvent+0x304>)
   19a72:	791b      	ldrb	r3, [r3, #4]
   19a74:	2b00      	cmp	r3, #0
   19a76:	d004      	beq.n	19a82 <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
   19a78:	1dbb      	adds	r3, r7, #6
   19a7a:	781b      	ldrb	r3, [r3, #0]
   19a7c:	0018      	movs	r0, r3
   19a7e:	4b14      	ldr	r3, [pc, #80]	; (19ad0 <operateOnWaterEvent+0x32c>)
   19a80:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   19a82:	1dfb      	adds	r3, r7, #7
   19a84:	781b      	ldrb	r3, [r3, #0]
   19a86:	0018      	movs	r0, r3
   19a88:	4b12      	ldr	r3, [pc, #72]	; (19ad4 <operateOnWaterEvent+0x330>)
   19a8a:	4798      	blx	r3
   19a8c:	e002      	b.n	19a94 <operateOnWaterEvent+0x2f0>
			return;
   19a8e:	46c0      	nop			; (mov r8, r8)
   19a90:	e000      	b.n	19a94 <operateOnWaterEvent+0x2f0>
				return;
   19a92:	46c0      	nop			; (mov r8, r8)
}
   19a94:	46bd      	mov	sp, r7
   19a96:	b002      	add	sp, #8
   19a98:	bd80      	pop	{r7, pc}
   19a9a:	46c0      	nop			; (mov r8, r8)
   19a9c:	20000769 	.word	0x20000769
   19aa0:	2000075a 	.word	0x2000075a
   19aa4:	20000858 	.word	0x20000858
   19aa8:	2000062c 	.word	0x2000062c
   19aac:	20000788 	.word	0x20000788
   19ab0:	0001ac01 	.word	0x0001ac01
   19ab4:	0001b4d9 	.word	0x0001b4d9
   19ab8:	00014939 	.word	0x00014939
   19abc:	2000070c 	.word	0x2000070c
   19ac0:	20000554 	.word	0x20000554
   19ac4:	200007bc 	.word	0x200007bc
   19ac8:	20000654 	.word	0x20000654
   19acc:	0001af55 	.word	0x0001af55
   19ad0:	000192dd 	.word	0x000192dd
   19ad4:	0001940d 	.word	0x0001940d

00019ad8 <Configure_ADC0>:

void Configure_ADC0(void)
{
   19ad8:	b580      	push	{r7, lr}
   19ada:	b08c      	sub	sp, #48	; 0x30
   19adc:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   19ade:	003b      	movs	r3, r7
   19ae0:	0018      	movs	r0, r3
   19ae2:	4b1a      	ldr	r3, [pc, #104]	; (19b4c <Configure_ADC0+0x74>)
   19ae4:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   19ae6:	003b      	movs	r3, r7
   19ae8:	2213      	movs	r2, #19
   19aea:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   19aec:	003b      	movs	r3, r7
   19aee:	22c0      	movs	r2, #192	; 0xc0
   19af0:	0152      	lsls	r2, r2, #5
   19af2:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   19af4:	003b      	movs	r3, r7
   19af6:	2203      	movs	r2, #3
   19af8:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   19afa:	003b      	movs	r3, r7
   19afc:	2203      	movs	r2, #3
   19afe:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   19b00:	003b      	movs	r3, r7
   19b02:	2200      	movs	r2, #0
   19b04:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   19b06:	003b      	movs	r3, r7
   19b08:	2200      	movs	r2, #0
   19b0a:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   19b0c:	003b      	movs	r3, r7
   19b0e:	2280      	movs	r2, #128	; 0x80
   19b10:	00d2      	lsls	r2, r2, #3
   19b12:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   19b14:	003b      	movs	r3, r7
   19b16:	2201      	movs	r2, #1
   19b18:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   19b1a:	003a      	movs	r2, r7
   19b1c:	490c      	ldr	r1, [pc, #48]	; (19b50 <Configure_ADC0+0x78>)
   19b1e:	4b0d      	ldr	r3, [pc, #52]	; (19b54 <Configure_ADC0+0x7c>)
   19b20:	0018      	movs	r0, r3
   19b22:	4b0d      	ldr	r3, [pc, #52]	; (19b58 <Configure_ADC0+0x80>)
   19b24:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   19b26:	490d      	ldr	r1, [pc, #52]	; (19b5c <Configure_ADC0+0x84>)
   19b28:	4b0a      	ldr	r3, [pc, #40]	; (19b54 <Configure_ADC0+0x7c>)
   19b2a:	2200      	movs	r2, #0
   19b2c:	0018      	movs	r0, r3
   19b2e:	4b0c      	ldr	r3, [pc, #48]	; (19b60 <Configure_ADC0+0x88>)
   19b30:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   19b32:	4b08      	ldr	r3, [pc, #32]	; (19b54 <Configure_ADC0+0x7c>)
   19b34:	2100      	movs	r1, #0
   19b36:	0018      	movs	r0, r3
   19b38:	4b0a      	ldr	r3, [pc, #40]	; (19b64 <Configure_ADC0+0x8c>)
   19b3a:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   19b3c:	4b05      	ldr	r3, [pc, #20]	; (19b54 <Configure_ADC0+0x7c>)
   19b3e:	0018      	movs	r0, r3
   19b40:	4b09      	ldr	r3, [pc, #36]	; (19b68 <Configure_ADC0+0x90>)
   19b42:	4798      	blx	r3
}
   19b44:	46c0      	nop			; (mov r8, r8)
   19b46:	46bd      	mov	sp, r7
   19b48:	b00c      	add	sp, #48	; 0x30
   19b4a:	bd80      	pop	{r7, pc}
   19b4c:	0001d04d 	.word	0x0001d04d
   19b50:	42004000 	.word	0x42004000
   19b54:	2000081c 	.word	0x2000081c
   19b58:	0001d69d 	.word	0x0001d69d
   19b5c:	00019b6d 	.word	0x00019b6d
   19b60:	0001d99d 	.word	0x0001d99d
   19b64:	00018fb1 	.word	0x00018fb1
   19b68:	00018e19 	.word	0x00018e19

00019b6c <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   19b6c:	b580      	push	{r7, lr}
   19b6e:	b082      	sub	sp, #8
   19b70:	af00      	add	r7, sp, #0
   19b72:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   19b74:	4b06      	ldr	r3, [pc, #24]	; (19b90 <adc_buffer_complete_callback+0x24>)
   19b76:	2201      	movs	r2, #1
   19b78:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   19b7a:	4b06      	ldr	r3, [pc, #24]	; (19b94 <adc_buffer_complete_callback+0x28>)
   19b7c:	681b      	ldr	r3, [r3, #0]
   19b7e:	2100      	movs	r1, #0
   19b80:	0018      	movs	r0, r3
   19b82:	4b05      	ldr	r3, [pc, #20]	; (19b98 <adc_buffer_complete_callback+0x2c>)
   19b84:	4798      	blx	r3
}
   19b86:	46c0      	nop			; (mov r8, r8)
   19b88:	46bd      	mov	sp, r7
   19b8a:	b002      	add	sp, #8
   19b8c:	bd80      	pop	{r7, pc}
   19b8e:	46c0      	nop			; (mov r8, r8)
   19b90:	2000073d 	.word	0x2000073d
   19b94:	20000240 	.word	0x20000240
   19b98:	00020c75 	.word	0x00020c75

00019b9c <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   19b9c:	b580      	push	{r7, lr}
   19b9e:	b084      	sub	sp, #16
   19ba0:	af00      	add	r7, sp, #0
   19ba2:	6078      	str	r0, [r7, #4]
   19ba4:	000a      	movs	r2, r1
   19ba6:	1cbb      	adds	r3, r7, #2
   19ba8:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   19baa:	687b      	ldr	r3, [r7, #4]
   19bac:	b2da      	uxtb	r2, r3
   19bae:	4b24      	ldr	r3, [pc, #144]	; (19c40 <Read_ADC0+0xa4>)
   19bb0:	0011      	movs	r1, r2
   19bb2:	0018      	movs	r0, r3
   19bb4:	4b23      	ldr	r3, [pc, #140]	; (19c44 <Read_ADC0+0xa8>)
   19bb6:	4798      	blx	r3
	uint16_t current_value = 0;
   19bb8:	2308      	movs	r3, #8
   19bba:	18fb      	adds	r3, r7, r3
   19bbc:	2200      	movs	r2, #0
   19bbe:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   19bc0:	2300      	movs	r3, #0
   19bc2:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19bc4:	230a      	movs	r3, #10
   19bc6:	18fb      	adds	r3, r7, r3
   19bc8:	2200      	movs	r2, #0
   19bca:	801a      	strh	r2, [r3, #0]
   19bcc:	e026      	b.n	19c1c <Read_ADC0+0x80>
	{
		current_value = 0;
   19bce:	2308      	movs	r3, #8
   19bd0:	18fb      	adds	r3, r7, r3
   19bd2:	2200      	movs	r2, #0
   19bd4:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   19bd6:	4b1a      	ldr	r3, [pc, #104]	; (19c40 <Read_ADC0+0xa4>)
   19bd8:	0018      	movs	r0, r3
   19bda:	4b1b      	ldr	r3, [pc, #108]	; (19c48 <Read_ADC0+0xac>)
   19bdc:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   19bde:	46c0      	nop			; (mov r8, r8)
   19be0:	4b17      	ldr	r3, [pc, #92]	; (19c40 <Read_ADC0+0xa4>)
   19be2:	0018      	movs	r0, r3
   19be4:	4b19      	ldr	r3, [pc, #100]	; (19c4c <Read_ADC0+0xb0>)
   19be6:	4798      	blx	r3
   19be8:	0002      	movs	r2, r0
   19bea:	2301      	movs	r3, #1
   19bec:	4013      	ands	r3, r2
   19bee:	2b01      	cmp	r3, #1
   19bf0:	d1f6      	bne.n	19be0 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   19bf2:	2308      	movs	r3, #8
   19bf4:	18fa      	adds	r2, r7, r3
   19bf6:	4b12      	ldr	r3, [pc, #72]	; (19c40 <Read_ADC0+0xa4>)
   19bf8:	0011      	movs	r1, r2
   19bfa:	0018      	movs	r0, r3
   19bfc:	4b14      	ldr	r3, [pc, #80]	; (19c50 <Read_ADC0+0xb4>)
   19bfe:	4798      	blx	r3
		total_value+=current_value;
   19c00:	2308      	movs	r3, #8
   19c02:	18fb      	adds	r3, r7, r3
   19c04:	881b      	ldrh	r3, [r3, #0]
   19c06:	001a      	movs	r2, r3
   19c08:	68fb      	ldr	r3, [r7, #12]
   19c0a:	189b      	adds	r3, r3, r2
   19c0c:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   19c0e:	230a      	movs	r3, #10
   19c10:	18fb      	adds	r3, r7, r3
   19c12:	881a      	ldrh	r2, [r3, #0]
   19c14:	230a      	movs	r3, #10
   19c16:	18fb      	adds	r3, r7, r3
   19c18:	3201      	adds	r2, #1
   19c1a:	801a      	strh	r2, [r3, #0]
   19c1c:	230a      	movs	r3, #10
   19c1e:	18fa      	adds	r2, r7, r3
   19c20:	1cbb      	adds	r3, r7, #2
   19c22:	8812      	ldrh	r2, [r2, #0]
   19c24:	881b      	ldrh	r3, [r3, #0]
   19c26:	429a      	cmp	r2, r3
   19c28:	d3d1      	bcc.n	19bce <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   19c2a:	1cbb      	adds	r3, r7, #2
   19c2c:	881a      	ldrh	r2, [r3, #0]
   19c2e:	4b09      	ldr	r3, [pc, #36]	; (19c54 <Read_ADC0+0xb8>)
   19c30:	0011      	movs	r1, r2
   19c32:	68f8      	ldr	r0, [r7, #12]
   19c34:	4798      	blx	r3
   19c36:	0003      	movs	r3, r0
}
   19c38:	0018      	movs	r0, r3
   19c3a:	46bd      	mov	sp, r7
   19c3c:	b004      	add	sp, #16
   19c3e:	bd80      	pop	{r7, pc}
   19c40:	2000081c 	.word	0x2000081c
   19c44:	00018f3d 	.word	0x00018f3d
   19c48:	00018e79 	.word	0x00018e79
   19c4c:	00018d71 	.word	0x00018d71
   19c50:	00018ec1 	.word	0x00018ec1
   19c54:	0002657d 	.word	0x0002657d

00019c58 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
   19c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c5a:	b099      	sub	sp, #100	; 0x64
   19c5c:	af00      	add	r7, sp, #0
   19c5e:	6378      	str	r0, [r7, #52]	; 0x34
   19c60:	466b      	mov	r3, sp
   19c62:	633b      	str	r3, [r7, #48]	; 0x30
	delay_ms(5);
   19c64:	2000      	movs	r0, #0
   19c66:	4ba3      	ldr	r3, [pc, #652]	; (19ef4 <Read_Voltage_ADC0+0x29c>)
   19c68:	4798      	blx	r3
   19c6a:	0003      	movs	r3, r0
   19c6c:	61bb      	str	r3, [r7, #24]
   19c6e:	2300      	movs	r3, #0
   19c70:	61fb      	str	r3, [r7, #28]
   19c72:	69b8      	ldr	r0, [r7, #24]
   19c74:	69f9      	ldr	r1, [r7, #28]
   19c76:	0003      	movs	r3, r0
   19c78:	000c      	movs	r4, r1
   19c7a:	0f9a      	lsrs	r2, r3, #30
   19c7c:	00a6      	lsls	r6, r4, #2
   19c7e:	4316      	orrs	r6, r2
   19c80:	009d      	lsls	r5, r3, #2
   19c82:	000a      	movs	r2, r1
   19c84:	0001      	movs	r1, r0
   19c86:	1949      	adds	r1, r1, r5
   19c88:	4172      	adcs	r2, r6
   19c8a:	4b9b      	ldr	r3, [pc, #620]	; (19ef8 <Read_Voltage_ADC0+0x2a0>)
   19c8c:	2400      	movs	r4, #0
   19c8e:	18c9      	adds	r1, r1, r3
   19c90:	4162      	adcs	r2, r4
   19c92:	0008      	movs	r0, r1
   19c94:	0011      	movs	r1, r2
   19c96:	4c99      	ldr	r4, [pc, #612]	; (19efc <Read_Voltage_ADC0+0x2a4>)
   19c98:	4a99      	ldr	r2, [pc, #612]	; (19f00 <Read_Voltage_ADC0+0x2a8>)
   19c9a:	2300      	movs	r3, #0
   19c9c:	47a0      	blx	r4
   19c9e:	0003      	movs	r3, r0
   19ca0:	000c      	movs	r4, r1
   19ca2:	0018      	movs	r0, r3
   19ca4:	4b97      	ldr	r3, [pc, #604]	; (19f04 <Read_Voltage_ADC0+0x2ac>)
   19ca6:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   19ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19caa:	b2db      	uxtb	r3, r3
   19cac:	4a96      	ldr	r2, [pc, #600]	; (19f08 <Read_Voltage_ADC0+0x2b0>)
   19cae:	0019      	movs	r1, r3
   19cb0:	0010      	movs	r0, r2
   19cb2:	4b96      	ldr	r3, [pc, #600]	; (19f0c <Read_Voltage_ADC0+0x2b4>)
   19cb4:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   19cb6:	2328      	movs	r3, #40	; 0x28
   19cb8:	2230      	movs	r2, #48	; 0x30
   19cba:	18ba      	adds	r2, r7, r2
   19cbc:	18d2      	adds	r2, r2, r3
   19cbe:	2388      	movs	r3, #136	; 0x88
   19cc0:	009b      	lsls	r3, r3, #2
   19cc2:	8013      	strh	r3, [r2, #0]
	uint16_t samples_buffer[no_of_samples];
   19cc4:	2328      	movs	r3, #40	; 0x28
   19cc6:	2230      	movs	r2, #48	; 0x30
   19cc8:	4694      	mov	ip, r2
   19cca:	44bc      	add	ip, r7
   19ccc:	4463      	add	r3, ip
   19cce:	881a      	ldrh	r2, [r3, #0]
   19cd0:	0013      	movs	r3, r2
   19cd2:	3b01      	subs	r3, #1
   19cd4:	657b      	str	r3, [r7, #84]	; 0x54
   19cd6:	613a      	str	r2, [r7, #16]
   19cd8:	2300      	movs	r3, #0
   19cda:	617b      	str	r3, [r7, #20]
   19cdc:	6938      	ldr	r0, [r7, #16]
   19cde:	6979      	ldr	r1, [r7, #20]
   19ce0:	0003      	movs	r3, r0
   19ce2:	0f1b      	lsrs	r3, r3, #28
   19ce4:	000c      	movs	r4, r1
   19ce6:	0124      	lsls	r4, r4, #4
   19ce8:	62fc      	str	r4, [r7, #44]	; 0x2c
   19cea:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   19cec:	431c      	orrs	r4, r3
   19cee:	62fc      	str	r4, [r7, #44]	; 0x2c
   19cf0:	0003      	movs	r3, r0
   19cf2:	011b      	lsls	r3, r3, #4
   19cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   19cf6:	60ba      	str	r2, [r7, #8]
   19cf8:	2300      	movs	r3, #0
   19cfa:	60fb      	str	r3, [r7, #12]
   19cfc:	68b8      	ldr	r0, [r7, #8]
   19cfe:	68f9      	ldr	r1, [r7, #12]
   19d00:	0003      	movs	r3, r0
   19d02:	0f1b      	lsrs	r3, r3, #28
   19d04:	000c      	movs	r4, r1
   19d06:	0124      	lsls	r4, r4, #4
   19d08:	627c      	str	r4, [r7, #36]	; 0x24
   19d0a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   19d0c:	431c      	orrs	r4, r3
   19d0e:	627c      	str	r4, [r7, #36]	; 0x24
   19d10:	0003      	movs	r3, r0
   19d12:	011b      	lsls	r3, r3, #4
   19d14:	623b      	str	r3, [r7, #32]
   19d16:	0013      	movs	r3, r2
   19d18:	005b      	lsls	r3, r3, #1
   19d1a:	3301      	adds	r3, #1
   19d1c:	3307      	adds	r3, #7
   19d1e:	08db      	lsrs	r3, r3, #3
   19d20:	00db      	lsls	r3, r3, #3
   19d22:	466a      	mov	r2, sp
   19d24:	1ad3      	subs	r3, r2, r3
   19d26:	469d      	mov	sp, r3
   19d28:	466b      	mov	r3, sp
   19d2a:	3301      	adds	r3, #1
   19d2c:	085b      	lsrs	r3, r3, #1
   19d2e:	005b      	lsls	r3, r3, #1
   19d30:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t temp = xTaskGetTickCount();
   19d32:	4b77      	ldr	r3, [pc, #476]	; (19f10 <Read_Voltage_ADC0+0x2b8>)
   19d34:	4798      	blx	r3
   19d36:	0003      	movs	r3, r0
   19d38:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   19d3a:	4b76      	ldr	r3, [pc, #472]	; (19f14 <Read_Voltage_ADC0+0x2bc>)
   19d3c:	2200      	movs	r2, #0
   19d3e:	701a      	strb	r2, [r3, #0]
	
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   19d40:	46c0      	nop			; (mov r8, r8)
   19d42:	6d39      	ldr	r1, [r7, #80]	; 0x50
   19d44:	2328      	movs	r3, #40	; 0x28
   19d46:	2230      	movs	r2, #48	; 0x30
   19d48:	4694      	mov	ip, r2
   19d4a:	44bc      	add	ip, r7
   19d4c:	4463      	add	r3, ip
   19d4e:	881a      	ldrh	r2, [r3, #0]
   19d50:	4b6d      	ldr	r3, [pc, #436]	; (19f08 <Read_Voltage_ADC0+0x2b0>)
   19d52:	0018      	movs	r0, r3
   19d54:	4b70      	ldr	r3, [pc, #448]	; (19f18 <Read_Voltage_ADC0+0x2c0>)
   19d56:	4798      	blx	r3
   19d58:	1e03      	subs	r3, r0, #0
   19d5a:	d1f2      	bne.n	19d42 <Read_Voltage_ADC0+0xea>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   19d5c:	2164      	movs	r1, #100	; 0x64
   19d5e:	2001      	movs	r0, #1
   19d60:	4b6e      	ldr	r3, [pc, #440]	; (19f1c <Read_Voltage_ADC0+0x2c4>)
   19d62:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   19d64:	4b6b      	ldr	r3, [pc, #428]	; (19f14 <Read_Voltage_ADC0+0x2bc>)
   19d66:	781b      	ldrb	r3, [r3, #0]
   19d68:	2b00      	cmp	r3, #0
   19d6a:	d100      	bne.n	19d6e <Read_Voltage_ADC0+0x116>
   19d6c:	e0bb      	b.n	19ee6 <Read_Voltage_ADC0+0x28e>
	{
		uint32_t square = 0;
   19d6e:	2300      	movs	r3, #0
   19d70:	65fb      	str	r3, [r7, #92]	; 0x5c
		double  mean = 0.0;
   19d72:	2300      	movs	r3, #0
   19d74:	2400      	movs	r4, #0
   19d76:	643b      	str	r3, [r7, #64]	; 0x40
   19d78:	647c      	str	r4, [r7, #68]	; 0x44
		double  root = 0.0;
   19d7a:	2300      	movs	r3, #0
   19d7c:	2400      	movs	r4, #0
   19d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   19d80:	63fc      	str	r4, [r7, #60]	; 0x3c
		
		for (uint16_t i = 0; i < no_of_samples; i++)
   19d82:	232a      	movs	r3, #42	; 0x2a
   19d84:	2230      	movs	r2, #48	; 0x30
   19d86:	4694      	mov	ip, r2
   19d88:	44bc      	add	ip, r7
   19d8a:	4463      	add	r3, ip
   19d8c:	2200      	movs	r2, #0
   19d8e:	801a      	strh	r2, [r3, #0]
   19d90:	e032      	b.n	19df8 <Read_Voltage_ADC0+0x1a0>
		{
			square += pow(samples_buffer[i], 2);
   19d92:	232a      	movs	r3, #42	; 0x2a
   19d94:	2230      	movs	r2, #48	; 0x30
   19d96:	4694      	mov	ip, r2
   19d98:	44bc      	add	ip, r7
   19d9a:	4463      	add	r3, ip
   19d9c:	881a      	ldrh	r2, [r3, #0]
   19d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19da0:	0052      	lsls	r2, r2, #1
   19da2:	5ad2      	ldrh	r2, [r2, r3]
   19da4:	4b5e      	ldr	r3, [pc, #376]	; (19f20 <Read_Voltage_ADC0+0x2c8>)
   19da6:	0010      	movs	r0, r2
   19da8:	4798      	blx	r3
   19daa:	2300      	movs	r3, #0
   19dac:	2480      	movs	r4, #128	; 0x80
   19dae:	05e4      	lsls	r4, r4, #23
   19db0:	001a      	movs	r2, r3
   19db2:	0023      	movs	r3, r4
   19db4:	4c5b      	ldr	r4, [pc, #364]	; (19f24 <Read_Voltage_ADC0+0x2cc>)
   19db6:	47a0      	blx	r4
   19db8:	0005      	movs	r5, r0
   19dba:	000e      	movs	r6, r1
   19dbc:	4b58      	ldr	r3, [pc, #352]	; (19f20 <Read_Voltage_ADC0+0x2c8>)
   19dbe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19dc0:	4798      	blx	r3
   19dc2:	4c59      	ldr	r4, [pc, #356]	; (19f28 <Read_Voltage_ADC0+0x2d0>)
   19dc4:	002a      	movs	r2, r5
   19dc6:	0033      	movs	r3, r6
   19dc8:	47a0      	blx	r4
   19dca:	0003      	movs	r3, r0
   19dcc:	000c      	movs	r4, r1
   19dce:	0019      	movs	r1, r3
   19dd0:	0022      	movs	r2, r4
   19dd2:	4b56      	ldr	r3, [pc, #344]	; (19f2c <Read_Voltage_ADC0+0x2d4>)
   19dd4:	0008      	movs	r0, r1
   19dd6:	0011      	movs	r1, r2
   19dd8:	4798      	blx	r3
   19dda:	0003      	movs	r3, r0
   19ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (uint16_t i = 0; i < no_of_samples; i++)
   19dde:	232a      	movs	r3, #42	; 0x2a
   19de0:	2230      	movs	r2, #48	; 0x30
   19de2:	4694      	mov	ip, r2
   19de4:	44bc      	add	ip, r7
   19de6:	4463      	add	r3, ip
   19de8:	881a      	ldrh	r2, [r3, #0]
   19dea:	232a      	movs	r3, #42	; 0x2a
   19dec:	2130      	movs	r1, #48	; 0x30
   19dee:	468c      	mov	ip, r1
   19df0:	44bc      	add	ip, r7
   19df2:	4463      	add	r3, ip
   19df4:	3201      	adds	r2, #1
   19df6:	801a      	strh	r2, [r3, #0]
   19df8:	232a      	movs	r3, #42	; 0x2a
   19dfa:	2230      	movs	r2, #48	; 0x30
   19dfc:	18ba      	adds	r2, r7, r2
   19dfe:	18d2      	adds	r2, r2, r3
   19e00:	2328      	movs	r3, #40	; 0x28
   19e02:	2130      	movs	r1, #48	; 0x30
   19e04:	468c      	mov	ip, r1
   19e06:	44bc      	add	ip, r7
   19e08:	4463      	add	r3, ip
   19e0a:	8812      	ldrh	r2, [r2, #0]
   19e0c:	881b      	ldrh	r3, [r3, #0]
   19e0e:	429a      	cmp	r2, r3
   19e10:	d3bf      	bcc.n	19d92 <Read_Voltage_ADC0+0x13a>
		}
		
		mean = (square / (float)(no_of_samples));
   19e12:	4b47      	ldr	r3, [pc, #284]	; (19f30 <Read_Voltage_ADC0+0x2d8>)
   19e14:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   19e16:	4798      	blx	r3
   19e18:	1c04      	adds	r4, r0, #0
   19e1a:	2328      	movs	r3, #40	; 0x28
   19e1c:	2230      	movs	r2, #48	; 0x30
   19e1e:	4694      	mov	ip, r2
   19e20:	44bc      	add	ip, r7
   19e22:	4463      	add	r3, ip
   19e24:	881a      	ldrh	r2, [r3, #0]
   19e26:	4b42      	ldr	r3, [pc, #264]	; (19f30 <Read_Voltage_ADC0+0x2d8>)
   19e28:	0010      	movs	r0, r2
   19e2a:	4798      	blx	r3
   19e2c:	1c02      	adds	r2, r0, #0
   19e2e:	4b41      	ldr	r3, [pc, #260]	; (19f34 <Read_Voltage_ADC0+0x2dc>)
   19e30:	1c11      	adds	r1, r2, #0
   19e32:	1c20      	adds	r0, r4, #0
   19e34:	4798      	blx	r3
   19e36:	1c03      	adds	r3, r0, #0
   19e38:	1c1a      	adds	r2, r3, #0
   19e3a:	4b3f      	ldr	r3, [pc, #252]	; (19f38 <Read_Voltage_ADC0+0x2e0>)
   19e3c:	1c10      	adds	r0, r2, #0
   19e3e:	4798      	blx	r3
   19e40:	0003      	movs	r3, r0
   19e42:	000c      	movs	r4, r1
   19e44:	643b      	str	r3, [r7, #64]	; 0x40
   19e46:	647c      	str	r4, [r7, #68]	; 0x44
		// Calculate Root.
		root = sqrt(mean);
   19e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19e4a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   19e4c:	0018      	movs	r0, r3
   19e4e:	0021      	movs	r1, r4
   19e50:	4b3a      	ldr	r3, [pc, #232]	; (19f3c <Read_Voltage_ADC0+0x2e4>)
   19e52:	4798      	blx	r3
   19e54:	0003      	movs	r3, r0
   19e56:	000c      	movs	r4, r1
   19e58:	63bb      	str	r3, [r7, #56]	; 0x38
   19e5a:	63fc      	str	r4, [r7, #60]	; 0x3c

		//
		temp = (root-20)*655/1000;
   19e5c:	4c38      	ldr	r4, [pc, #224]	; (19f40 <Read_Voltage_ADC0+0x2e8>)
   19e5e:	2200      	movs	r2, #0
   19e60:	4b38      	ldr	r3, [pc, #224]	; (19f44 <Read_Voltage_ADC0+0x2ec>)
   19e62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19e66:	47a0      	blx	r4
   19e68:	0003      	movs	r3, r0
   19e6a:	000c      	movs	r4, r1
   19e6c:	0018      	movs	r0, r3
   19e6e:	0021      	movs	r1, r4
   19e70:	4c35      	ldr	r4, [pc, #212]	; (19f48 <Read_Voltage_ADC0+0x2f0>)
   19e72:	2200      	movs	r2, #0
   19e74:	4b35      	ldr	r3, [pc, #212]	; (19f4c <Read_Voltage_ADC0+0x2f4>)
   19e76:	47a0      	blx	r4
   19e78:	0003      	movs	r3, r0
   19e7a:	000c      	movs	r4, r1
   19e7c:	0018      	movs	r0, r3
   19e7e:	0021      	movs	r1, r4
   19e80:	4c33      	ldr	r4, [pc, #204]	; (19f50 <Read_Voltage_ADC0+0x2f8>)
   19e82:	2200      	movs	r2, #0
   19e84:	4b33      	ldr	r3, [pc, #204]	; (19f54 <Read_Voltage_ADC0+0x2fc>)
   19e86:	47a0      	blx	r4
   19e88:	0003      	movs	r3, r0
   19e8a:	000c      	movs	r4, r1
   19e8c:	0019      	movs	r1, r3
   19e8e:	0022      	movs	r2, r4
   19e90:	4b26      	ldr	r3, [pc, #152]	; (19f2c <Read_Voltage_ADC0+0x2d4>)
   19e92:	0008      	movs	r0, r1
   19e94:	0011      	movs	r1, r2
   19e96:	4798      	blx	r3
   19e98:	0003      	movs	r3, r0
   19e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (abs(Analog_Parameter_Struct.PhaseRY_Voltage - temp)> 80)
   19e9c:	4b2e      	ldr	r3, [pc, #184]	; (19f58 <Read_Voltage_ADC0+0x300>)
   19e9e:	681a      	ldr	r2, [r3, #0]
   19ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19ea2:	1ad3      	subs	r3, r2, r3
   19ea4:	17da      	asrs	r2, r3, #31
   19ea6:	189b      	adds	r3, r3, r2
   19ea8:	4053      	eors	r3, r2
   19eaa:	2b50      	cmp	r3, #80	; 0x50
   19eac:	dd15      	ble.n	19eda <Read_Voltage_ADC0+0x282>
		{
			delay_us(1);
   19eae:	2000      	movs	r0, #0
   19eb0:	4b10      	ldr	r3, [pc, #64]	; (19ef4 <Read_Voltage_ADC0+0x29c>)
   19eb2:	4798      	blx	r3
   19eb4:	0003      	movs	r3, r0
   19eb6:	603b      	str	r3, [r7, #0]
   19eb8:	2300      	movs	r3, #0
   19eba:	607b      	str	r3, [r7, #4]
   19ebc:	4b27      	ldr	r3, [pc, #156]	; (19f5c <Read_Voltage_ADC0+0x304>)
   19ebe:	2400      	movs	r4, #0
   19ec0:	6838      	ldr	r0, [r7, #0]
   19ec2:	6879      	ldr	r1, [r7, #4]
   19ec4:	18c0      	adds	r0, r0, r3
   19ec6:	4161      	adcs	r1, r4
   19ec8:	4c0c      	ldr	r4, [pc, #48]	; (19efc <Read_Voltage_ADC0+0x2a4>)
   19eca:	4a25      	ldr	r2, [pc, #148]	; (19f60 <Read_Voltage_ADC0+0x308>)
   19ecc:	2300      	movs	r3, #0
   19ece:	47a0      	blx	r4
   19ed0:	0003      	movs	r3, r0
   19ed2:	000c      	movs	r4, r1
   19ed4:	0018      	movs	r0, r3
   19ed6:	4b0b      	ldr	r3, [pc, #44]	; (19f04 <Read_Voltage_ADC0+0x2ac>)
   19ed8:	4798      	blx	r3
		}
		//
		
		return (uint32_t)root;
   19eda:	4b14      	ldr	r3, [pc, #80]	; (19f2c <Read_Voltage_ADC0+0x2d4>)
   19edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19ede:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   19ee0:	4798      	blx	r3
   19ee2:	0003      	movs	r3, r0
   19ee4:	e000      	b.n	19ee8 <Read_Voltage_ADC0+0x290>
	}
	else
	{
		return 0;
   19ee6:	2300      	movs	r3, #0
   19ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19eea:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   19eec:	0018      	movs	r0, r3
   19eee:	46bd      	mov	sp, r7
   19ef0:	b019      	add	sp, #100	; 0x64
   19ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ef4:	0002495d 	.word	0x0002495d
   19ef8:	00001b57 	.word	0x00001b57
   19efc:	000268e5 	.word	0x000268e5
   19f00:	00001b58 	.word	0x00001b58
   19f04:	20000001 	.word	0x20000001
   19f08:	2000081c 	.word	0x2000081c
   19f0c:	00018f3d 	.word	0x00018f3d
   19f10:	000202cd 	.word	0x000202cd
   19f14:	2000073d 	.word	0x2000073d
   19f18:	0001d9dd 	.word	0x0001d9dd
   19f1c:	00020be1 	.word	0x00020be1
   19f20:	00028c11 	.word	0x00028c11
   19f24:	000252e9 	.word	0x000252e9
   19f28:	00027131 	.word	0x00027131
   19f2c:	00026979 	.word	0x00026979
   19f30:	000270a5 	.word	0x000270a5
   19f34:	00026b35 	.word	0x00026b35
   19f38:	00028c81 	.word	0x00028c81
   19f3c:	00025641 	.word	0x00025641
   19f40:	000284b9 	.word	0x000284b9
   19f44:	40340000 	.word	0x40340000
   19f48:	00027fb9 	.word	0x00027fb9
   19f4c:	40847800 	.word	0x40847800
   19f50:	00027751 	.word	0x00027751
   19f54:	408f4000 	.word	0x408f4000
   19f58:	200006dc 	.word	0x200006dc
   19f5c:	006acfbf 	.word	0x006acfbf
   19f60:	006acfc0 	.word	0x006acfc0

00019f64 <autoSetCurrent>:

void autoSetCurrent(void)
{
   19f64:	b580      	push	{r7, lr}
   19f66:	b084      	sub	sp, #16
   19f68:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   19f6a:	4b2e      	ldr	r3, [pc, #184]	; (1a024 <autoSetCurrent+0xc0>)
   19f6c:	4798      	blx	r3
   19f6e:	1e03      	subs	r3, r0, #0
   19f70:	d04e      	beq.n	1a010 <autoSetCurrent+0xac>
   19f72:	4b2d      	ldr	r3, [pc, #180]	; (1a028 <autoSetCurrent+0xc4>)
   19f74:	781b      	ldrb	r3, [r3, #0]
   19f76:	2201      	movs	r2, #1
   19f78:	4053      	eors	r3, r2
   19f7a:	b2db      	uxtb	r3, r3
   19f7c:	2b00      	cmp	r3, #0
   19f7e:	d047      	beq.n	1a010 <autoSetCurrent+0xac>
   19f80:	4b2a      	ldr	r3, [pc, #168]	; (1a02c <autoSetCurrent+0xc8>)
   19f82:	781b      	ldrb	r3, [r3, #0]
   19f84:	2201      	movs	r2, #1
   19f86:	4053      	eors	r3, r2
   19f88:	b2db      	uxtb	r3, r3
   19f8a:	2b00      	cmp	r3, #0
   19f8c:	d040      	beq.n	1a010 <autoSetCurrent+0xac>
   19f8e:	4b28      	ldr	r3, [pc, #160]	; (1a030 <autoSetCurrent+0xcc>)
   19f90:	781b      	ldrb	r3, [r3, #0]
   19f92:	2201      	movs	r2, #1
   19f94:	4053      	eors	r3, r2
   19f96:	b2db      	uxtb	r3, r3
   19f98:	2b00      	cmp	r3, #0
   19f9a:	d039      	beq.n	1a010 <autoSetCurrent+0xac>
   19f9c:	4b25      	ldr	r3, [pc, #148]	; (1a034 <autoSetCurrent+0xd0>)
   19f9e:	4798      	blx	r3
   19fa0:	1e03      	subs	r3, r0, #0
   19fa2:	d035      	beq.n	1a010 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   19fa4:	4b24      	ldr	r3, [pc, #144]	; (1a038 <autoSetCurrent+0xd4>)
   19fa6:	691b      	ldr	r3, [r3, #16]
   19fa8:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   19faa:	68fb      	ldr	r3, [r7, #12]
   19fac:	2bf9      	cmp	r3, #249	; 0xf9
   19fae:	d806      	bhi.n	19fbe <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   19fb0:	2000      	movs	r0, #0
   19fb2:	4b22      	ldr	r3, [pc, #136]	; (1a03c <autoSetCurrent+0xd8>)
   19fb4:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   19fb6:	2059      	movs	r0, #89	; 0x59
   19fb8:	4b21      	ldr	r3, [pc, #132]	; (1a040 <autoSetCurrent+0xdc>)
   19fba:	4798      	blx	r3
			return;
   19fbc:	e02e      	b.n	1a01c <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   19fbe:	4b21      	ldr	r3, [pc, #132]	; (1a044 <autoSetCurrent+0xe0>)
   19fc0:	7f1b      	ldrb	r3, [r3, #28]
   19fc2:	001a      	movs	r2, r3
   19fc4:	68fb      	ldr	r3, [r7, #12]
   19fc6:	435a      	muls	r2, r3
   19fc8:	4b1f      	ldr	r3, [pc, #124]	; (1a048 <autoSetCurrent+0xe4>)
   19fca:	2164      	movs	r1, #100	; 0x64
   19fcc:	0010      	movs	r0, r2
   19fce:	4798      	blx	r3
   19fd0:	0003      	movs	r3, r0
   19fd2:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   19fd4:	4b1b      	ldr	r3, [pc, #108]	; (1a044 <autoSetCurrent+0xe0>)
   19fd6:	7f5b      	ldrb	r3, [r3, #29]
   19fd8:	001a      	movs	r2, r3
   19fda:	68fb      	ldr	r3, [r7, #12]
   19fdc:	435a      	muls	r2, r3
   19fde:	4b1a      	ldr	r3, [pc, #104]	; (1a048 <autoSetCurrent+0xe4>)
   19fe0:	2164      	movs	r1, #100	; 0x64
   19fe2:	0010      	movs	r0, r2
   19fe4:	4798      	blx	r3
   19fe6:	0003      	movs	r3, r0
   19fe8:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   19fea:	68fb      	ldr	r3, [r7, #12]
   19fec:	0018      	movs	r0, r3
   19fee:	4b17      	ldr	r3, [pc, #92]	; (1a04c <autoSetCurrent+0xe8>)
   19ff0:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   19ff2:	68bb      	ldr	r3, [r7, #8]
   19ff4:	0018      	movs	r0, r3
   19ff6:	4b16      	ldr	r3, [pc, #88]	; (1a050 <autoSetCurrent+0xec>)
   19ff8:	4798      	blx	r3
		setOverloadValue(tempOver);
   19ffa:	687b      	ldr	r3, [r7, #4]
   19ffc:	0018      	movs	r0, r3
   19ffe:	4b15      	ldr	r3, [pc, #84]	; (1a054 <autoSetCurrent+0xf0>)
   1a000:	4798      	blx	r3
		setCurrentDetection(true);
   1a002:	2001      	movs	r0, #1
   1a004:	4b0d      	ldr	r3, [pc, #52]	; (1a03c <autoSetCurrent+0xd8>)
   1a006:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1a008:	204b      	movs	r0, #75	; 0x4b
   1a00a:	4b0d      	ldr	r3, [pc, #52]	; (1a040 <autoSetCurrent+0xdc>)
   1a00c:	4798      	blx	r3
	{
   1a00e:	e005      	b.n	1a01c <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
   1a010:	2000      	movs	r0, #0
   1a012:	4b0a      	ldr	r3, [pc, #40]	; (1a03c <autoSetCurrent+0xd8>)
   1a014:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1a016:	2059      	movs	r0, #89	; 0x59
   1a018:	4b09      	ldr	r3, [pc, #36]	; (1a040 <autoSetCurrent+0xdc>)
   1a01a:	4798      	blx	r3
	}
}
   1a01c:	46bd      	mov	sp, r7
   1a01e:	b004      	add	sp, #16
   1a020:	bd80      	pop	{r7, pc}
   1a022:	46c0      	nop			; (mov r8, r8)
   1a024:	0001ac01 	.word	0x0001ac01
   1a028:	20000791 	.word	0x20000791
   1a02c:	20000793 	.word	0x20000793
   1a030:	20000780 	.word	0x20000780
   1a034:	0001ab99 	.word	0x0001ab99
   1a038:	200006dc 	.word	0x200006dc
   1a03c:	00011985 	.word	0x00011985
   1a040:	00014b11 	.word	0x00014b11
   1a044:	20000654 	.word	0x20000654
   1a048:	0002657d 	.word	0x0002657d
   1a04c:	00011941 	.word	0x00011941
   1a050:	000118b9 	.word	0x000118b9
   1a054:	000118fd 	.word	0x000118fd

0001a058 <speakAmpere>:

void speakAmpere(void)
{
   1a058:	b580      	push	{r7, lr}
   1a05a:	b084      	sub	sp, #16
   1a05c:	af00      	add	r7, sp, #0
	if(getMotorState())
   1a05e:	4b0d      	ldr	r3, [pc, #52]	; (1a094 <speakAmpere+0x3c>)
   1a060:	4798      	blx	r3
   1a062:	1e03      	subs	r3, r0, #0
   1a064:	d00f      	beq.n	1a086 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1a066:	4b0c      	ldr	r3, [pc, #48]	; (1a098 <speakAmpere+0x40>)
   1a068:	8a9b      	ldrh	r3, [r3, #20]
   1a06a:	b29b      	uxth	r3, r3
   1a06c:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1a06e:	1d39      	adds	r1, r7, #4
   1a070:	68fb      	ldr	r3, [r7, #12]
   1a072:	220a      	movs	r2, #10
   1a074:	0018      	movs	r0, r3
   1a076:	4b09      	ldr	r3, [pc, #36]	; (1a09c <speakAmpere+0x44>)
   1a078:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1a07a:	1d3b      	adds	r3, r7, #4
   1a07c:	0018      	movs	r0, r3
   1a07e:	4b08      	ldr	r3, [pc, #32]	; (1a0a0 <speakAmpere+0x48>)
   1a080:	4798      	blx	r3
		return;
   1a082:	46c0      	nop			; (mov r8, r8)
   1a084:	e002      	b.n	1a08c <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1a086:	202d      	movs	r0, #45	; 0x2d
   1a088:	4b06      	ldr	r3, [pc, #24]	; (1a0a4 <speakAmpere+0x4c>)
   1a08a:	4798      	blx	r3
}
   1a08c:	46bd      	mov	sp, r7
   1a08e:	b004      	add	sp, #16
   1a090:	bd80      	pop	{r7, pc}
   1a092:	46c0      	nop			; (mov r8, r8)
   1a094:	0001ac01 	.word	0x0001ac01
   1a098:	200006dc 	.word	0x200006dc
   1a09c:	000293d9 	.word	0x000293d9
   1a0a0:	00014805 	.word	0x00014805
   1a0a4:	00014b11 	.word	0x00014b11

0001a0a8 <PR2_ISR>:

void PR2_ISR(void)
{
   1a0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0aa:	b08b      	sub	sp, #44	; 0x2c
   1a0ac:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1a0ae:	4b77      	ldr	r3, [pc, #476]	; (1a28c <PR2_ISR+0x1e4>)
   1a0b0:	781b      	ldrb	r3, [r3, #0]
   1a0b2:	b2db      	uxtb	r3, r3
   1a0b4:	2b01      	cmp	r3, #1
   1a0b6:	d000      	beq.n	1a0ba <PR2_ISR+0x12>
   1a0b8:	e0e3      	b.n	1a282 <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1a0ba:	4b75      	ldr	r3, [pc, #468]	; (1a290 <PR2_ISR+0x1e8>)
   1a0bc:	2200      	movs	r2, #0
   1a0be:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1a0c0:	2000      	movs	r0, #0
   1a0c2:	4b74      	ldr	r3, [pc, #464]	; (1a294 <PR2_ISR+0x1ec>)
   1a0c4:	4798      	blx	r3
   1a0c6:	0003      	movs	r3, r0
   1a0c8:	60bb      	str	r3, [r7, #8]
   1a0ca:	2300      	movs	r3, #0
   1a0cc:	60fb      	str	r3, [r7, #12]
   1a0ce:	68bb      	ldr	r3, [r7, #8]
   1a0d0:	68fc      	ldr	r4, [r7, #12]
   1a0d2:	0f9a      	lsrs	r2, r3, #30
   1a0d4:	00a0      	lsls	r0, r4, #2
   1a0d6:	61f8      	str	r0, [r7, #28]
   1a0d8:	69f8      	ldr	r0, [r7, #28]
   1a0da:	4310      	orrs	r0, r2
   1a0dc:	61f8      	str	r0, [r7, #28]
   1a0de:	009b      	lsls	r3, r3, #2
   1a0e0:	61bb      	str	r3, [r7, #24]
   1a0e2:	69bb      	ldr	r3, [r7, #24]
   1a0e4:	69fc      	ldr	r4, [r7, #28]
   1a0e6:	68b9      	ldr	r1, [r7, #8]
   1a0e8:	68fa      	ldr	r2, [r7, #12]
   1a0ea:	185b      	adds	r3, r3, r1
   1a0ec:	4154      	adcs	r4, r2
   1a0ee:	496a      	ldr	r1, [pc, #424]	; (1a298 <PR2_ISR+0x1f0>)
   1a0f0:	2200      	movs	r2, #0
   1a0f2:	185b      	adds	r3, r3, r1
   1a0f4:	4154      	adcs	r4, r2
   1a0f6:	0018      	movs	r0, r3
   1a0f8:	0021      	movs	r1, r4
   1a0fa:	4c68      	ldr	r4, [pc, #416]	; (1a29c <PR2_ISR+0x1f4>)
   1a0fc:	4a68      	ldr	r2, [pc, #416]	; (1a2a0 <PR2_ISR+0x1f8>)
   1a0fe:	2300      	movs	r3, #0
   1a100:	47a0      	blx	r4
   1a102:	0003      	movs	r3, r0
   1a104:	000c      	movs	r4, r1
   1a106:	0018      	movs	r0, r3
   1a108:	4b66      	ldr	r3, [pc, #408]	; (1a2a4 <PR2_ISR+0x1fc>)
   1a10a:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1a10c:	2323      	movs	r3, #35	; 0x23
   1a10e:	18fb      	adds	r3, r7, r3
   1a110:	2200      	movs	r2, #0
   1a112:	701a      	strb	r2, [r3, #0]
   1a114:	2322      	movs	r3, #34	; 0x22
   1a116:	18fb      	adds	r3, r7, r3
   1a118:	2200      	movs	r2, #0
   1a11a:	701a      	strb	r2, [r3, #0]
   1a11c:	2321      	movs	r3, #33	; 0x21
   1a11e:	18fb      	adds	r3, r7, r3
   1a120:	2200      	movs	r2, #0
   1a122:	701a      	strb	r2, [r3, #0]
   1a124:	2320      	movs	r3, #32
   1a126:	18fb      	adds	r3, r7, r3
   1a128:	2200      	movs	r2, #0
   1a12a:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1a12c:	202b      	movs	r0, #43	; 0x2b
   1a12e:	4b5e      	ldr	r3, [pc, #376]	; (1a2a8 <PR2_ISR+0x200>)
   1a130:	4798      	blx	r3
   1a132:	1e03      	subs	r3, r0, #0
   1a134:	d100      	bne.n	1a138 <PR2_ISR+0x90>
   1a136:	e08e      	b.n	1a256 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a138:	2300      	movs	r3, #0
   1a13a:	627b      	str	r3, [r7, #36]	; 0x24
   1a13c:	e085      	b.n	1a24a <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1a13e:	2000      	movs	r0, #0
   1a140:	4b54      	ldr	r3, [pc, #336]	; (1a294 <PR2_ISR+0x1ec>)
   1a142:	4798      	blx	r3
   1a144:	0003      	movs	r3, r0
   1a146:	603b      	str	r3, [r7, #0]
   1a148:	2300      	movs	r3, #0
   1a14a:	607b      	str	r3, [r7, #4]
   1a14c:	6838      	ldr	r0, [r7, #0]
   1a14e:	6879      	ldr	r1, [r7, #4]
   1a150:	0003      	movs	r3, r0
   1a152:	000c      	movs	r4, r1
   1a154:	0f9a      	lsrs	r2, r3, #30
   1a156:	00a6      	lsls	r6, r4, #2
   1a158:	4316      	orrs	r6, r2
   1a15a:	009d      	lsls	r5, r3, #2
   1a15c:	0003      	movs	r3, r0
   1a15e:	000c      	movs	r4, r1
   1a160:	195b      	adds	r3, r3, r5
   1a162:	4174      	adcs	r4, r6
   1a164:	0f9a      	lsrs	r2, r3, #30
   1a166:	00a1      	lsls	r1, r4, #2
   1a168:	6179      	str	r1, [r7, #20]
   1a16a:	6979      	ldr	r1, [r7, #20]
   1a16c:	4311      	orrs	r1, r2
   1a16e:	6179      	str	r1, [r7, #20]
   1a170:	009a      	lsls	r2, r3, #2
   1a172:	613a      	str	r2, [r7, #16]
   1a174:	6939      	ldr	r1, [r7, #16]
   1a176:	697a      	ldr	r2, [r7, #20]
   1a178:	185b      	adds	r3, r3, r1
   1a17a:	4154      	adcs	r4, r2
   1a17c:	494b      	ldr	r1, [pc, #300]	; (1a2ac <PR2_ISR+0x204>)
   1a17e:	2200      	movs	r2, #0
   1a180:	185b      	adds	r3, r3, r1
   1a182:	4154      	adcs	r4, r2
   1a184:	0018      	movs	r0, r3
   1a186:	0021      	movs	r1, r4
   1a188:	4c44      	ldr	r4, [pc, #272]	; (1a29c <PR2_ISR+0x1f4>)
   1a18a:	4a49      	ldr	r2, [pc, #292]	; (1a2b0 <PR2_ISR+0x208>)
   1a18c:	2300      	movs	r3, #0
   1a18e:	47a0      	blx	r4
   1a190:	0003      	movs	r3, r0
   1a192:	000c      	movs	r4, r1
   1a194:	0018      	movs	r0, r3
   1a196:	4b43      	ldr	r3, [pc, #268]	; (1a2a4 <PR2_ISR+0x1fc>)
   1a198:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1a19a:	202a      	movs	r0, #42	; 0x2a
   1a19c:	4b42      	ldr	r3, [pc, #264]	; (1a2a8 <PR2_ISR+0x200>)
   1a19e:	4798      	blx	r3
   1a1a0:	1e03      	subs	r3, r0, #0
   1a1a2:	d014      	beq.n	1a1ce <PR2_ISR+0x126>
   1a1a4:	2323      	movs	r3, #35	; 0x23
   1a1a6:	18fb      	adds	r3, r7, r3
   1a1a8:	781b      	ldrb	r3, [r3, #0]
   1a1aa:	b2db      	uxtb	r3, r3
   1a1ac:	2b00      	cmp	r3, #0
   1a1ae:	d10e      	bne.n	1a1ce <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1a1b0:	2323      	movs	r3, #35	; 0x23
   1a1b2:	18fb      	adds	r3, r7, r3
   1a1b4:	2201      	movs	r2, #1
   1a1b6:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1a1b8:	2322      	movs	r3, #34	; 0x22
   1a1ba:	18fb      	adds	r3, r7, r3
   1a1bc:	781b      	ldrb	r3, [r3, #0]
   1a1be:	b2db      	uxtb	r3, r3
   1a1c0:	2b01      	cmp	r3, #1
   1a1c2:	d104      	bne.n	1a1ce <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1a1c4:	2320      	movs	r3, #32
   1a1c6:	18fb      	adds	r3, r7, r3
   1a1c8:	2201      	movs	r2, #1
   1a1ca:	701a      	strb	r2, [r3, #0]
						break;
   1a1cc:	e043      	b.n	1a256 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1a1ce:	202a      	movs	r0, #42	; 0x2a
   1a1d0:	4b35      	ldr	r3, [pc, #212]	; (1a2a8 <PR2_ISR+0x200>)
   1a1d2:	4798      	blx	r3
   1a1d4:	0003      	movs	r3, r0
   1a1d6:	001a      	movs	r2, r3
   1a1d8:	2301      	movs	r3, #1
   1a1da:	4053      	eors	r3, r2
   1a1dc:	b2db      	uxtb	r3, r3
   1a1de:	2b00      	cmp	r3, #0
   1a1e0:	d013      	beq.n	1a20a <PR2_ISR+0x162>
   1a1e2:	2322      	movs	r3, #34	; 0x22
   1a1e4:	18fb      	adds	r3, r7, r3
   1a1e6:	781b      	ldrb	r3, [r3, #0]
   1a1e8:	b2db      	uxtb	r3, r3
   1a1ea:	2b00      	cmp	r3, #0
   1a1ec:	d10d      	bne.n	1a20a <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1a1ee:	2322      	movs	r3, #34	; 0x22
   1a1f0:	18fb      	adds	r3, r7, r3
   1a1f2:	2201      	movs	r2, #1
   1a1f4:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1a1f6:	2323      	movs	r3, #35	; 0x23
   1a1f8:	18fb      	adds	r3, r7, r3
   1a1fa:	781b      	ldrb	r3, [r3, #0]
   1a1fc:	b2db      	uxtb	r3, r3
   1a1fe:	2b01      	cmp	r3, #1
   1a200:	d103      	bne.n	1a20a <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1a202:	2321      	movs	r3, #33	; 0x21
   1a204:	18fb      	adds	r3, r7, r3
   1a206:	2201      	movs	r2, #1
   1a208:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1a20a:	2321      	movs	r3, #33	; 0x21
   1a20c:	18fb      	adds	r3, r7, r3
   1a20e:	781b      	ldrb	r3, [r3, #0]
   1a210:	b2db      	uxtb	r3, r3
   1a212:	2b01      	cmp	r3, #1
   1a214:	d10c      	bne.n	1a230 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1a216:	4b27      	ldr	r3, [pc, #156]	; (1a2b4 <PR2_ISR+0x20c>)
   1a218:	2202      	movs	r2, #2
   1a21a:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1a21c:	4b26      	ldr	r3, [pc, #152]	; (1a2b8 <PR2_ISR+0x210>)
   1a21e:	2202      	movs	r2, #2
   1a220:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1a222:	4b26      	ldr	r3, [pc, #152]	; (1a2bc <PR2_ISR+0x214>)
   1a224:	2200      	movs	r2, #0
   1a226:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1a228:	4b18      	ldr	r3, [pc, #96]	; (1a28c <PR2_ISR+0x1e4>)
   1a22a:	2200      	movs	r2, #0
   1a22c:	701a      	strb	r2, [r3, #0]
					break;
   1a22e:	e012      	b.n	1a256 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1a230:	202b      	movs	r0, #43	; 0x2b
   1a232:	4b1d      	ldr	r3, [pc, #116]	; (1a2a8 <PR2_ISR+0x200>)
   1a234:	4798      	blx	r3
   1a236:	0003      	movs	r3, r0
   1a238:	001a      	movs	r2, r3
   1a23a:	2301      	movs	r3, #1
   1a23c:	4053      	eors	r3, r2
   1a23e:	b2db      	uxtb	r3, r3
   1a240:	2b00      	cmp	r3, #0
   1a242:	d107      	bne.n	1a254 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a246:	3301      	adds	r3, #1
   1a248:	627b      	str	r3, [r7, #36]	; 0x24
   1a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a24c:	2b77      	cmp	r3, #119	; 0x77
   1a24e:	d800      	bhi.n	1a252 <PR2_ISR+0x1aa>
   1a250:	e775      	b.n	1a13e <PR2_ISR+0x96>
   1a252:	e000      	b.n	1a256 <PR2_ISR+0x1ae>
				{
					break;
   1a254:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1a256:	4b19      	ldr	r3, [pc, #100]	; (1a2bc <PR2_ISR+0x214>)
   1a258:	781b      	ldrb	r3, [r3, #0]
   1a25a:	b2db      	uxtb	r3, r3
   1a25c:	3301      	adds	r3, #1
   1a25e:	b2db      	uxtb	r3, r3
   1a260:	4a16      	ldr	r2, [pc, #88]	; (1a2bc <PR2_ISR+0x214>)
   1a262:	1c19      	adds	r1, r3, #0
   1a264:	7011      	strb	r1, [r2, #0]
   1a266:	2b02      	cmp	r3, #2
   1a268:	d90b      	bls.n	1a282 <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1a26a:	4b14      	ldr	r3, [pc, #80]	; (1a2bc <PR2_ISR+0x214>)
   1a26c:	2200      	movs	r2, #0
   1a26e:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a270:	4b10      	ldr	r3, [pc, #64]	; (1a2b4 <PR2_ISR+0x20c>)
   1a272:	2201      	movs	r2, #1
   1a274:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a276:	4b10      	ldr	r3, [pc, #64]	; (1a2b8 <PR2_ISR+0x210>)
   1a278:	2201      	movs	r2, #1
   1a27a:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1a27c:	4b03      	ldr	r3, [pc, #12]	; (1a28c <PR2_ISR+0x1e4>)
   1a27e:	2200      	movs	r2, #0
   1a280:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a282:	46c0      	nop			; (mov r8, r8)
   1a284:	46bd      	mov	sp, r7
   1a286:	b00b      	add	sp, #44	; 0x2c
   1a288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a28a:	46c0      	nop			; (mov r8, r8)
   1a28c:	2000000c 	.word	0x2000000c
   1a290:	2000024c 	.word	0x2000024c
   1a294:	0002495d 	.word	0x0002495d
   1a298:	00001b57 	.word	0x00001b57
   1a29c:	000268e5 	.word	0x000268e5
   1a2a0:	00001b58 	.word	0x00001b58
   1a2a4:	20000001 	.word	0x20000001
   1a2a8:	00019055 	.word	0x00019055
   1a2ac:	006acfbf 	.word	0x006acfbf
   1a2b0:	006acfc0 	.word	0x006acfc0
   1a2b4:	20000740 	.word	0x20000740
   1a2b8:	20000248 	.word	0x20000248
   1a2bc:	20000249 	.word	0x20000249

0001a2c0 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1a2c0:	b580      	push	{r7, lr}
   1a2c2:	b084      	sub	sp, #16
   1a2c4:	af00      	add	r7, sp, #0
   1a2c6:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a2c8:	4b12      	ldr	r3, [pc, #72]	; (1a314 <vTask_10ms_Timer+0x54>)
   1a2ca:	4798      	blx	r3
   1a2cc:	0003      	movs	r3, r0
   1a2ce:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a2d0:	230c      	movs	r3, #12
   1a2d2:	18fb      	adds	r3, r7, r3
   1a2d4:	210a      	movs	r1, #10
   1a2d6:	0018      	movs	r0, r3
   1a2d8:	4b0f      	ldr	r3, [pc, #60]	; (1a318 <vTask_10ms_Timer+0x58>)
   1a2da:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1a2dc:	4b0f      	ldr	r3, [pc, #60]	; (1a31c <vTask_10ms_Timer+0x5c>)
   1a2de:	781b      	ldrb	r3, [r3, #0]
   1a2e0:	b2db      	uxtb	r3, r3
   1a2e2:	2b01      	cmp	r3, #1
   1a2e4:	d1f4      	bne.n	1a2d0 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1a2e6:	4b0e      	ldr	r3, [pc, #56]	; (1a320 <vTask_10ms_Timer+0x60>)
   1a2e8:	781b      	ldrb	r3, [r3, #0]
   1a2ea:	3301      	adds	r3, #1
   1a2ec:	b2da      	uxtb	r2, r3
   1a2ee:	4b0c      	ldr	r3, [pc, #48]	; (1a320 <vTask_10ms_Timer+0x60>)
   1a2f0:	701a      	strb	r2, [r3, #0]
   1a2f2:	4b0b      	ldr	r3, [pc, #44]	; (1a320 <vTask_10ms_Timer+0x60>)
   1a2f4:	781b      	ldrb	r3, [r3, #0]
   1a2f6:	2b13      	cmp	r3, #19
   1a2f8:	d9ea      	bls.n	1a2d0 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1a2fa:	4b09      	ldr	r3, [pc, #36]	; (1a320 <vTask_10ms_Timer+0x60>)
   1a2fc:	2200      	movs	r2, #0
   1a2fe:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1a300:	4b08      	ldr	r3, [pc, #32]	; (1a324 <vTask_10ms_Timer+0x64>)
   1a302:	2201      	movs	r2, #1
   1a304:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1a306:	4b08      	ldr	r3, [pc, #32]	; (1a328 <vTask_10ms_Timer+0x68>)
   1a308:	2201      	movs	r2, #1
   1a30a:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1a30c:	4b03      	ldr	r3, [pc, #12]	; (1a31c <vTask_10ms_Timer+0x5c>)
   1a30e:	2200      	movs	r2, #0
   1a310:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1a312:	e7dd      	b.n	1a2d0 <vTask_10ms_Timer+0x10>
   1a314:	000202cd 	.word	0x000202cd
   1a318:	0001fea1 	.word	0x0001fea1
   1a31c:	2000000c 	.word	0x2000000c
   1a320:	2000024c 	.word	0x2000024c
   1a324:	20000740 	.word	0x20000740
   1a328:	20000248 	.word	0x20000248

0001a32c <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1a32c:	b580      	push	{r7, lr}
   1a32e:	b084      	sub	sp, #16
   1a330:	af00      	add	r7, sp, #0
   1a332:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1a334:	4b17      	ldr	r3, [pc, #92]	; (1a394 <vTask_100ms_Timer+0x68>)
   1a336:	4798      	blx	r3
   1a338:	0003      	movs	r3, r0
   1a33a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a33c:	230c      	movs	r3, #12
   1a33e:	18fb      	adds	r3, r7, r3
   1a340:	2164      	movs	r1, #100	; 0x64
   1a342:	0018      	movs	r0, r3
   1a344:	4b14      	ldr	r3, [pc, #80]	; (1a398 <vTask_100ms_Timer+0x6c>)
   1a346:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1a348:	4b14      	ldr	r3, [pc, #80]	; (1a39c <vTask_100ms_Timer+0x70>)
   1a34a:	781b      	ldrb	r3, [r3, #0]
   1a34c:	b2db      	uxtb	r3, r3
   1a34e:	1c5a      	adds	r2, r3, #1
   1a350:	b2d1      	uxtb	r1, r2
   1a352:	4a12      	ldr	r2, [pc, #72]	; (1a39c <vTask_100ms_Timer+0x70>)
   1a354:	7011      	strb	r1, [r2, #0]
   1a356:	2b04      	cmp	r3, #4
   1a358:	d905      	bls.n	1a366 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1a35a:	4b10      	ldr	r3, [pc, #64]	; (1a39c <vTask_100ms_Timer+0x70>)
   1a35c:	2200      	movs	r2, #0
   1a35e:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1a360:	4b0f      	ldr	r3, [pc, #60]	; (1a3a0 <vTask_100ms_Timer+0x74>)
   1a362:	2201      	movs	r2, #1
   1a364:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1a366:	4b0f      	ldr	r3, [pc, #60]	; (1a3a4 <vTask_100ms_Timer+0x78>)
   1a368:	781b      	ldrb	r3, [r3, #0]
   1a36a:	b2db      	uxtb	r3, r3
   1a36c:	1c5a      	adds	r2, r3, #1
   1a36e:	b2d1      	uxtb	r1, r2
   1a370:	4a0c      	ldr	r2, [pc, #48]	; (1a3a4 <vTask_100ms_Timer+0x78>)
   1a372:	7011      	strb	r1, [r2, #0]
   1a374:	2b04      	cmp	r3, #4
   1a376:	d9e1      	bls.n	1a33c <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1a378:	4b0a      	ldr	r3, [pc, #40]	; (1a3a4 <vTask_100ms_Timer+0x78>)
   1a37a:	2200      	movs	r2, #0
   1a37c:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1a37e:	4b0a      	ldr	r3, [pc, #40]	; (1a3a8 <vTask_100ms_Timer+0x7c>)
   1a380:	2201      	movs	r2, #1
   1a382:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1a384:	4b09      	ldr	r3, [pc, #36]	; (1a3ac <vTask_100ms_Timer+0x80>)
   1a386:	2200      	movs	r2, #0
   1a388:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1a38a:	200b      	movs	r0, #11
   1a38c:	4b08      	ldr	r3, [pc, #32]	; (1a3b0 <vTask_100ms_Timer+0x84>)
   1a38e:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1a390:	e7d4      	b.n	1a33c <vTask_100ms_Timer+0x10>
   1a392:	46c0      	nop			; (mov r8, r8)
   1a394:	000202cd 	.word	0x000202cd
   1a398:	0001fea1 	.word	0x0001fea1
   1a39c:	2000000d 	.word	0x2000000d
   1a3a0:	2000024b 	.word	0x2000024b
   1a3a4:	2000024a 	.word	0x2000024a
   1a3a8:	2000000c 	.word	0x2000000c
   1a3ac:	2000024c 	.word	0x2000024c
   1a3b0:	00019139 	.word	0x00019139

0001a3b4 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1a3b4:	b580      	push	{r7, lr}
   1a3b6:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1a3b8:	4b04      	ldr	r3, [pc, #16]	; (1a3cc <should_Detect_New_Voltage+0x18>)
   1a3ba:	781b      	ldrb	r3, [r3, #0]
   1a3bc:	b2db      	uxtb	r3, r3
   1a3be:	425a      	negs	r2, r3
   1a3c0:	4153      	adcs	r3, r2
   1a3c2:	b2db      	uxtb	r3, r3
}
   1a3c4:	0018      	movs	r0, r3
   1a3c6:	46bd      	mov	sp, r7
   1a3c8:	bd80      	pop	{r7, pc}
   1a3ca:	46c0      	nop			; (mov r8, r8)
   1a3cc:	2000000d 	.word	0x2000000d

0001a3d0 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1a3d0:	b590      	push	{r4, r7, lr}
   1a3d2:	b083      	sub	sp, #12
   1a3d4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a3d6:	4b25      	ldr	r3, [pc, #148]	; (1a46c <detect_battery_voltage_and_percentage+0x9c>)
   1a3d8:	681a      	ldr	r2, [r3, #0]
   1a3da:	2301      	movs	r3, #1
   1a3dc:	425b      	negs	r3, r3
   1a3de:	0019      	movs	r1, r3
   1a3e0:	0010      	movs	r0, r2
   1a3e2:	4b23      	ldr	r3, [pc, #140]	; (1a470 <detect_battery_voltage_and_percentage+0xa0>)
   1a3e4:	4798      	blx	r3
   1a3e6:	0003      	movs	r3, r0
   1a3e8:	2b01      	cmp	r3, #1
   1a3ea:	d13b      	bne.n	1a464 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1a3ec:	21c8      	movs	r1, #200	; 0xc8
   1a3ee:	2007      	movs	r0, #7
   1a3f0:	4b20      	ldr	r3, [pc, #128]	; (1a474 <detect_battery_voltage_and_percentage+0xa4>)
   1a3f2:	4798      	blx	r3
   1a3f4:	0003      	movs	r3, r0
   1a3f6:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1a3f8:	683b      	ldr	r3, [r7, #0]
   1a3fa:	4a1f      	ldr	r2, [pc, #124]	; (1a478 <detect_battery_voltage_and_percentage+0xa8>)
   1a3fc:	435a      	muls	r2, r3
   1a3fe:	0010      	movs	r0, r2
   1a400:	4b1e      	ldr	r3, [pc, #120]	; (1a47c <detect_battery_voltage_and_percentage+0xac>)
   1a402:	22fa      	movs	r2, #250	; 0xfa
   1a404:	0091      	lsls	r1, r2, #2
   1a406:	4798      	blx	r3
   1a408:	0003      	movs	r3, r0
   1a40a:	001a      	movs	r2, r3
   1a40c:	4b1c      	ldr	r3, [pc, #112]	; (1a480 <detect_battery_voltage_and_percentage+0xb0>)
   1a40e:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1a410:	1dfb      	adds	r3, r7, #7
   1a412:	2200      	movs	r2, #0
   1a414:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1a416:	4b1a      	ldr	r3, [pc, #104]	; (1a480 <detect_battery_voltage_and_percentage+0xb0>)
   1a418:	699b      	ldr	r3, [r3, #24]
   1a41a:	4a1a      	ldr	r2, [pc, #104]	; (1a484 <detect_battery_voltage_and_percentage+0xb4>)
   1a41c:	4293      	cmp	r3, r2
   1a41e:	d803      	bhi.n	1a428 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1a420:	1dfb      	adds	r3, r7, #7
   1a422:	2200      	movs	r2, #0
   1a424:	701a      	strb	r2, [r3, #0]
   1a426:	e012      	b.n	1a44e <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1a428:	4b15      	ldr	r3, [pc, #84]	; (1a480 <detect_battery_voltage_and_percentage+0xb0>)
   1a42a:	699b      	ldr	r3, [r3, #24]
   1a42c:	4a16      	ldr	r2, [pc, #88]	; (1a488 <detect_battery_voltage_and_percentage+0xb8>)
   1a42e:	189a      	adds	r2, r3, r2
   1a430:	4b12      	ldr	r3, [pc, #72]	; (1a47c <detect_battery_voltage_and_percentage+0xac>)
   1a432:	2109      	movs	r1, #9
   1a434:	0010      	movs	r0, r2
   1a436:	4798      	blx	r3
   1a438:	0003      	movs	r3, r0
   1a43a:	001a      	movs	r2, r3
   1a43c:	1dfb      	adds	r3, r7, #7
   1a43e:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1a440:	1dfb      	adds	r3, r7, #7
   1a442:	781b      	ldrb	r3, [r3, #0]
   1a444:	2b64      	cmp	r3, #100	; 0x64
   1a446:	d902      	bls.n	1a44e <detect_battery_voltage_and_percentage+0x7e>
   1a448:	1dfb      	adds	r3, r7, #7
   1a44a:	2264      	movs	r2, #100	; 0x64
   1a44c:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1a44e:	4b0c      	ldr	r3, [pc, #48]	; (1a480 <detect_battery_voltage_and_percentage+0xb0>)
   1a450:	1dfa      	adds	r2, r7, #7
   1a452:	7812      	ldrb	r2, [r2, #0]
   1a454:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1a456:	4b05      	ldr	r3, [pc, #20]	; (1a46c <detect_battery_voltage_and_percentage+0x9c>)
   1a458:	6818      	ldr	r0, [r3, #0]
   1a45a:	2300      	movs	r3, #0
   1a45c:	2200      	movs	r2, #0
   1a45e:	2100      	movs	r1, #0
   1a460:	4c0a      	ldr	r4, [pc, #40]	; (1a48c <detect_battery_voltage_and_percentage+0xbc>)
   1a462:	47a0      	blx	r4
	}
}
   1a464:	46c0      	nop			; (mov r8, r8)
   1a466:	46bd      	mov	sp, r7
   1a468:	b003      	add	sp, #12
   1a46a:	bd90      	pop	{r4, r7, pc}
   1a46c:	20000238 	.word	0x20000238
   1a470:	0001f661 	.word	0x0001f661
   1a474:	00019b9d 	.word	0x00019b9d
   1a478:	000005b1 	.word	0x000005b1
   1a47c:	0002657d 	.word	0x0002657d
   1a480:	200006dc 	.word	0x200006dc
   1a484:	00000ce4 	.word	0x00000ce4
   1a488:	fffff31c 	.word	0xfffff31c
   1a48c:	0001f1c1 	.word	0x0001f1c1

0001a490 <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1a490:	b580      	push	{r7, lr}
   1a492:	b084      	sub	sp, #16
   1a494:	af00      	add	r7, sp, #0
   1a496:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1a498:	687b      	ldr	r3, [r7, #4]
   1a49a:	2201      	movs	r2, #1
   1a49c:	74da      	strb	r2, [r3, #19]
	phaseRMSStruct->index=0;
   1a49e:	687b      	ldr	r3, [r7, #4]
   1a4a0:	2200      	movs	r2, #0
   1a4a2:	749a      	strb	r2, [r3, #18]
	phaseRMSStruct->rmsVoltage=0;
   1a4a4:	687b      	ldr	r3, [r7, #4]
   1a4a6:	2200      	movs	r2, #0
   1a4a8:	821a      	strh	r2, [r3, #16]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a4aa:	230f      	movs	r3, #15
   1a4ac:	18fb      	adds	r3, r7, r3
   1a4ae:	2200      	movs	r2, #0
   1a4b0:	701a      	strb	r2, [r3, #0]
   1a4b2:	e00d      	b.n	1a4d0 <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1a4b4:	230f      	movs	r3, #15
   1a4b6:	18fb      	adds	r3, r7, r3
   1a4b8:	781a      	ldrb	r2, [r3, #0]
   1a4ba:	687b      	ldr	r3, [r7, #4]
   1a4bc:	0052      	lsls	r2, r2, #1
   1a4be:	2100      	movs	r1, #0
   1a4c0:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1a4c2:	230f      	movs	r3, #15
   1a4c4:	18fb      	adds	r3, r7, r3
   1a4c6:	781a      	ldrb	r2, [r3, #0]
   1a4c8:	230f      	movs	r3, #15
   1a4ca:	18fb      	adds	r3, r7, r3
   1a4cc:	3201      	adds	r2, #1
   1a4ce:	701a      	strb	r2, [r3, #0]
   1a4d0:	230f      	movs	r3, #15
   1a4d2:	18fb      	adds	r3, r7, r3
   1a4d4:	781b      	ldrb	r3, [r3, #0]
   1a4d6:	2b07      	cmp	r3, #7
   1a4d8:	d9ec      	bls.n	1a4b4 <initPhaseRMStruct+0x24>
	}
}
   1a4da:	46c0      	nop			; (mov r8, r8)
   1a4dc:	46bd      	mov	sp, r7
   1a4de:	b004      	add	sp, #16
   1a4e0:	bd80      	pop	{r7, pc}
	...

0001a4e4 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4e6:	b089      	sub	sp, #36	; 0x24
   1a4e8:	af00      	add	r7, sp, #0
   1a4ea:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1a4ec:	2300      	movs	r3, #0
   1a4ee:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1a4f0:	2300      	movs	r3, #0
   1a4f2:	2400      	movs	r4, #0
   1a4f4:	613b      	str	r3, [r7, #16]
   1a4f6:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1a4f8:	2300      	movs	r3, #0
   1a4fa:	2400      	movs	r4, #0
   1a4fc:	60bb      	str	r3, [r7, #8]
   1a4fe:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1a500:	687b      	ldr	r3, [r7, #4]
   1a502:	2200      	movs	r2, #0
   1a504:	74da      	strb	r2, [r3, #19]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a506:	231f      	movs	r3, #31
   1a508:	18fb      	adds	r3, r7, r3
   1a50a:	2200      	movs	r2, #0
   1a50c:	701a      	strb	r2, [r3, #0]
   1a50e:	e036      	b.n	1a57e <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1a510:	231f      	movs	r3, #31
   1a512:	18fb      	adds	r3, r7, r3
   1a514:	781a      	ldrb	r2, [r3, #0]
   1a516:	687b      	ldr	r3, [r7, #4]
   1a518:	0052      	lsls	r2, r2, #1
   1a51a:	5ad3      	ldrh	r3, [r2, r3]
   1a51c:	2b00      	cmp	r3, #0
   1a51e:	d102      	bne.n	1a526 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1a520:	687b      	ldr	r3, [r7, #4]
   1a522:	2201      	movs	r2, #1
   1a524:	74da      	strb	r2, [r3, #19]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1a526:	4b31      	ldr	r3, [pc, #196]	; (1a5ec <updateRMSValues+0x108>)
   1a528:	69b8      	ldr	r0, [r7, #24]
   1a52a:	4798      	blx	r3
   1a52c:	0005      	movs	r5, r0
   1a52e:	000e      	movs	r6, r1
   1a530:	231f      	movs	r3, #31
   1a532:	18fb      	adds	r3, r7, r3
   1a534:	781a      	ldrb	r2, [r3, #0]
   1a536:	687b      	ldr	r3, [r7, #4]
   1a538:	0052      	lsls	r2, r2, #1
   1a53a:	5ad2      	ldrh	r2, [r2, r3]
   1a53c:	4b2b      	ldr	r3, [pc, #172]	; (1a5ec <updateRMSValues+0x108>)
   1a53e:	0010      	movs	r0, r2
   1a540:	4798      	blx	r3
   1a542:	2300      	movs	r3, #0
   1a544:	2480      	movs	r4, #128	; 0x80
   1a546:	05e4      	lsls	r4, r4, #23
   1a548:	001a      	movs	r2, r3
   1a54a:	0023      	movs	r3, r4
   1a54c:	4c28      	ldr	r4, [pc, #160]	; (1a5f0 <updateRMSValues+0x10c>)
   1a54e:	47a0      	blx	r4
   1a550:	0002      	movs	r2, r0
   1a552:	000b      	movs	r3, r1
   1a554:	4c27      	ldr	r4, [pc, #156]	; (1a5f4 <updateRMSValues+0x110>)
   1a556:	0028      	movs	r0, r5
   1a558:	0031      	movs	r1, r6
   1a55a:	47a0      	blx	r4
   1a55c:	0003      	movs	r3, r0
   1a55e:	000c      	movs	r4, r1
   1a560:	0019      	movs	r1, r3
   1a562:	0022      	movs	r2, r4
   1a564:	4b24      	ldr	r3, [pc, #144]	; (1a5f8 <updateRMSValues+0x114>)
   1a566:	0008      	movs	r0, r1
   1a568:	0011      	movs	r1, r2
   1a56a:	4798      	blx	r3
   1a56c:	0003      	movs	r3, r0
   1a56e:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1a570:	231f      	movs	r3, #31
   1a572:	18fb      	adds	r3, r7, r3
   1a574:	781a      	ldrb	r2, [r3, #0]
   1a576:	231f      	movs	r3, #31
   1a578:	18fb      	adds	r3, r7, r3
   1a57a:	3201      	adds	r2, #1
   1a57c:	701a      	strb	r2, [r3, #0]
   1a57e:	231f      	movs	r3, #31
   1a580:	18fb      	adds	r3, r7, r3
   1a582:	781b      	ldrb	r3, [r3, #0]
   1a584:	2b07      	cmp	r3, #7
   1a586:	d9c3      	bls.n	1a510 <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1a588:	4b1c      	ldr	r3, [pc, #112]	; (1a5fc <updateRMSValues+0x118>)
   1a58a:	69b8      	ldr	r0, [r7, #24]
   1a58c:	4798      	blx	r3
   1a58e:	1c02      	adds	r2, r0, #0
   1a590:	4b1b      	ldr	r3, [pc, #108]	; (1a600 <updateRMSValues+0x11c>)
   1a592:	2182      	movs	r1, #130	; 0x82
   1a594:	05c9      	lsls	r1, r1, #23
   1a596:	1c10      	adds	r0, r2, #0
   1a598:	4798      	blx	r3
   1a59a:	1c03      	adds	r3, r0, #0
   1a59c:	1c1a      	adds	r2, r3, #0
   1a59e:	4b19      	ldr	r3, [pc, #100]	; (1a604 <updateRMSValues+0x120>)
   1a5a0:	1c10      	adds	r0, r2, #0
   1a5a2:	4798      	blx	r3
   1a5a4:	0003      	movs	r3, r0
   1a5a6:	000c      	movs	r4, r1
   1a5a8:	613b      	str	r3, [r7, #16]
   1a5aa:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1a5ac:	693b      	ldr	r3, [r7, #16]
   1a5ae:	697c      	ldr	r4, [r7, #20]
   1a5b0:	0018      	movs	r0, r3
   1a5b2:	0021      	movs	r1, r4
   1a5b4:	4b14      	ldr	r3, [pc, #80]	; (1a608 <updateRMSValues+0x124>)
   1a5b6:	4798      	blx	r3
   1a5b8:	000a      	movs	r2, r1
   1a5ba:	0001      	movs	r1, r0
   1a5bc:	4b0e      	ldr	r3, [pc, #56]	; (1a5f8 <updateRMSValues+0x114>)
   1a5be:	0008      	movs	r0, r1
   1a5c0:	0011      	movs	r1, r2
   1a5c2:	4798      	blx	r3
   1a5c4:	0002      	movs	r2, r0
   1a5c6:	4b09      	ldr	r3, [pc, #36]	; (1a5ec <updateRMSValues+0x108>)
   1a5c8:	0010      	movs	r0, r2
   1a5ca:	4798      	blx	r3
   1a5cc:	0003      	movs	r3, r0
   1a5ce:	000c      	movs	r4, r1
   1a5d0:	60bb      	str	r3, [r7, #8]
   1a5d2:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1a5d4:	4b08      	ldr	r3, [pc, #32]	; (1a5f8 <updateRMSValues+0x114>)
   1a5d6:	68b8      	ldr	r0, [r7, #8]
   1a5d8:	68f9      	ldr	r1, [r7, #12]
   1a5da:	4798      	blx	r3
   1a5dc:	0003      	movs	r3, r0
   1a5de:	b29a      	uxth	r2, r3
   1a5e0:	687b      	ldr	r3, [r7, #4]
   1a5e2:	821a      	strh	r2, [r3, #16]
}
   1a5e4:	46c0      	nop			; (mov r8, r8)
   1a5e6:	46bd      	mov	sp, r7
   1a5e8:	b009      	add	sp, #36	; 0x24
   1a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a5ec:	00028c11 	.word	0x00028c11
   1a5f0:	000252e9 	.word	0x000252e9
   1a5f4:	00027131 	.word	0x00027131
   1a5f8:	00026979 	.word	0x00026979
   1a5fc:	000270a5 	.word	0x000270a5
   1a600:	00026b35 	.word	0x00026b35
   1a604:	00028c81 	.word	0x00028c81
   1a608:	00025641 	.word	0x00025641

0001a60c <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1a60c:	b590      	push	{r4, r7, lr}
   1a60e:	b085      	sub	sp, #20
   1a610:	af00      	add	r7, sp, #0
   1a612:	0002      	movs	r2, r0
   1a614:	1dfb      	adds	r3, r7, #7
   1a616:	701a      	strb	r2, [r3, #0]
   1a618:	1d3b      	adds	r3, r7, #4
   1a61a:	1c0a      	adds	r2, r1, #0
   1a61c:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1a61e:	1dfb      	adds	r3, r7, #7
   1a620:	781b      	ldrb	r3, [r3, #0]
   1a622:	2b00      	cmp	r3, #0
   1a624:	d102      	bne.n	1a62c <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1a626:	4b28      	ldr	r3, [pc, #160]	; (1a6c8 <filterVoltage+0xbc>)
   1a628:	60fb      	str	r3, [r7, #12]
   1a62a:	e00c      	b.n	1a646 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1a62c:	1dfb      	adds	r3, r7, #7
   1a62e:	781b      	ldrb	r3, [r3, #0]
   1a630:	2b01      	cmp	r3, #1
   1a632:	d102      	bne.n	1a63a <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1a634:	4b25      	ldr	r3, [pc, #148]	; (1a6cc <filterVoltage+0xc0>)
   1a636:	60fb      	str	r3, [r7, #12]
   1a638:	e005      	b.n	1a646 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1a63a:	1dfb      	adds	r3, r7, #7
   1a63c:	781b      	ldrb	r3, [r3, #0]
   1a63e:	2b02      	cmp	r3, #2
   1a640:	d101      	bne.n	1a646 <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1a642:	4b23      	ldr	r3, [pc, #140]	; (1a6d0 <filterVoltage+0xc4>)
   1a644:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1a646:	68fb      	ldr	r3, [r7, #12]
   1a648:	7c9b      	ldrb	r3, [r3, #18]
   1a64a:	001a      	movs	r2, r3
   1a64c:	2307      	movs	r3, #7
   1a64e:	401a      	ands	r2, r3
   1a650:	68fb      	ldr	r3, [r7, #12]
   1a652:	0052      	lsls	r2, r2, #1
   1a654:	1d39      	adds	r1, r7, #4
   1a656:	8809      	ldrh	r1, [r1, #0]
   1a658:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1a65a:	68fb      	ldr	r3, [r7, #12]
   1a65c:	7c9b      	ldrb	r3, [r3, #18]
   1a65e:	3301      	adds	r3, #1
   1a660:	4a1c      	ldr	r2, [pc, #112]	; (1a6d4 <filterVoltage+0xc8>)
   1a662:	4013      	ands	r3, r2
   1a664:	d504      	bpl.n	1a670 <filterVoltage+0x64>
   1a666:	3b01      	subs	r3, #1
   1a668:	2208      	movs	r2, #8
   1a66a:	4252      	negs	r2, r2
   1a66c:	4313      	orrs	r3, r2
   1a66e:	3301      	adds	r3, #1
   1a670:	b2da      	uxtb	r2, r3
   1a672:	68fb      	ldr	r3, [r7, #12]
   1a674:	749a      	strb	r2, [r3, #18]
	
	updateRMSValues(p1);
   1a676:	68fb      	ldr	r3, [r7, #12]
   1a678:	0018      	movs	r0, r3
   1a67a:	4b17      	ldr	r3, [pc, #92]	; (1a6d8 <filterVoltage+0xcc>)
   1a67c:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1a67e:	68fb      	ldr	r3, [r7, #12]
   1a680:	7cdb      	ldrb	r3, [r3, #19]
   1a682:	2b00      	cmp	r3, #0
   1a684:	d002      	beq.n	1a68c <filterVoltage+0x80>
		{
			return voltReading;
   1a686:	1d3b      	adds	r3, r7, #4
   1a688:	881b      	ldrh	r3, [r3, #0]
   1a68a:	e019      	b.n	1a6c0 <filterVoltage+0xb4>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 10/100))
   1a68c:	68fb      	ldr	r3, [r7, #12]
   1a68e:	8a1b      	ldrh	r3, [r3, #16]
   1a690:	001a      	movs	r2, r3
   1a692:	1d3b      	adds	r3, r7, #4
   1a694:	881b      	ldrh	r3, [r3, #0]
   1a696:	1ad4      	subs	r4, r2, r3
   1a698:	68fb      	ldr	r3, [r7, #12]
   1a69a:	8a1b      	ldrh	r3, [r3, #16]
   1a69c:	001a      	movs	r2, r3
   1a69e:	0013      	movs	r3, r2
   1a6a0:	009b      	lsls	r3, r3, #2
   1a6a2:	189b      	adds	r3, r3, r2
   1a6a4:	005b      	lsls	r3, r3, #1
   1a6a6:	001a      	movs	r2, r3
   1a6a8:	4b0c      	ldr	r3, [pc, #48]	; (1a6dc <filterVoltage+0xd0>)
   1a6aa:	2164      	movs	r1, #100	; 0x64
   1a6ac:	0010      	movs	r0, r2
   1a6ae:	4798      	blx	r3
   1a6b0:	0003      	movs	r3, r0
   1a6b2:	429c      	cmp	r4, r3
   1a6b4:	da02      	bge.n	1a6bc <filterVoltage+0xb0>
		{
			return p1->rmsVoltage;
   1a6b6:	68fb      	ldr	r3, [r7, #12]
   1a6b8:	8a1b      	ldrh	r3, [r3, #16]
   1a6ba:	e001      	b.n	1a6c0 <filterVoltage+0xb4>
		}
		else
		{
			return voltReading;
   1a6bc:	1d3b      	adds	r3, r7, #4
   1a6be:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1a6c0:	0018      	movs	r0, r3
   1a6c2:	46bd      	mov	sp, r7
   1a6c4:	b005      	add	sp, #20
   1a6c6:	bd90      	pop	{r4, r7, pc}
   1a6c8:	200007a8 	.word	0x200007a8
   1a6cc:	20000724 	.word	0x20000724
   1a6d0:	200007dc 	.word	0x200007dc
   1a6d4:	80000007 	.word	0x80000007
   1a6d8:	0001a4e5 	.word	0x0001a4e5
   1a6dc:	00026691 	.word	0x00026691

0001a6e0 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1a6e0:	b590      	push	{r4, r7, lr}
   1a6e2:	b085      	sub	sp, #20
   1a6e4:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a6e6:	4b48      	ldr	r3, [pc, #288]	; (1a808 <detect_Three_Phase_Voltage+0x128>)
   1a6e8:	681a      	ldr	r2, [r3, #0]
   1a6ea:	2301      	movs	r3, #1
   1a6ec:	425b      	negs	r3, r3
   1a6ee:	0019      	movs	r1, r3
   1a6f0:	0010      	movs	r0, r2
   1a6f2:	4b46      	ldr	r3, [pc, #280]	; (1a80c <detect_Three_Phase_Voltage+0x12c>)
   1a6f4:	4798      	blx	r3
   1a6f6:	0003      	movs	r3, r0
   1a6f8:	2b01      	cmp	r3, #1
   1a6fa:	d000      	beq.n	1a6fe <detect_Three_Phase_Voltage+0x1e>
   1a6fc:	e080      	b.n	1a800 <detect_Three_Phase_Voltage+0x120>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
   1a6fe:	2013      	movs	r0, #19
   1a700:	4b43      	ldr	r3, [pc, #268]	; (1a810 <detect_Three_Phase_Voltage+0x130>)
   1a702:	4798      	blx	r3
   1a704:	0003      	movs	r3, r0
   1a706:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
   1a708:	68fb      	ldr	r3, [r7, #12]
   1a70a:	3b0a      	subs	r3, #10
   1a70c:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1a70e:	68fb      	ldr	r3, [r7, #12]
   1a710:	2b00      	cmp	r3, #0
   1a712:	da02      	bge.n	1a71a <detect_Three_Phase_Voltage+0x3a>
		{
			adcRY = 0;
   1a714:	2300      	movs	r3, #0
   1a716:	60fb      	str	r3, [r7, #12]
   1a718:	e00f      	b.n	1a73a <detect_Three_Phase_Voltage+0x5a>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
   1a71a:	68fb      	ldr	r3, [r7, #12]
   1a71c:	3b0a      	subs	r3, #10
   1a71e:	4a3d      	ldr	r2, [pc, #244]	; (1a814 <detect_Three_Phase_Voltage+0x134>)
   1a720:	435a      	muls	r2, r3
   1a722:	0010      	movs	r0, r2
   1a724:	4b3c      	ldr	r3, [pc, #240]	; (1a818 <detect_Three_Phase_Voltage+0x138>)
   1a726:	22fa      	movs	r2, #250	; 0xfa
   1a728:	0091      	lsls	r1, r2, #2
   1a72a:	4798      	blx	r3
   1a72c:	0003      	movs	r3, r0
   1a72e:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1a730:	68fb      	ldr	r3, [r7, #12]
   1a732:	2b00      	cmp	r3, #0
   1a734:	da01      	bge.n	1a73a <detect_Three_Phase_Voltage+0x5a>
			{
				adcRY = 0;
   1a736:	2300      	movs	r3, #0
   1a738:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
   1a73a:	2012      	movs	r0, #18
   1a73c:	4b34      	ldr	r3, [pc, #208]	; (1a810 <detect_Three_Phase_Voltage+0x130>)
   1a73e:	4798      	blx	r3
   1a740:	0003      	movs	r3, r0
   1a742:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
   1a744:	68bb      	ldr	r3, [r7, #8]
   1a746:	3b0a      	subs	r3, #10
   1a748:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1a74a:	68bb      	ldr	r3, [r7, #8]
   1a74c:	2b00      	cmp	r3, #0
   1a74e:	da02      	bge.n	1a756 <detect_Three_Phase_Voltage+0x76>
		{
			adcYB = 0;
   1a750:	2300      	movs	r3, #0
   1a752:	60bb      	str	r3, [r7, #8]
   1a754:	e00f      	b.n	1a776 <detect_Three_Phase_Voltage+0x96>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
   1a756:	68bb      	ldr	r3, [r7, #8]
   1a758:	3b0a      	subs	r3, #10
   1a75a:	4a2e      	ldr	r2, [pc, #184]	; (1a814 <detect_Three_Phase_Voltage+0x134>)
   1a75c:	435a      	muls	r2, r3
   1a75e:	0010      	movs	r0, r2
   1a760:	4b2d      	ldr	r3, [pc, #180]	; (1a818 <detect_Three_Phase_Voltage+0x138>)
   1a762:	22fa      	movs	r2, #250	; 0xfa
   1a764:	0091      	lsls	r1, r2, #2
   1a766:	4798      	blx	r3
   1a768:	0003      	movs	r3, r0
   1a76a:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1a76c:	68bb      	ldr	r3, [r7, #8]
   1a76e:	2b00      	cmp	r3, #0
   1a770:	da01      	bge.n	1a776 <detect_Three_Phase_Voltage+0x96>
			{
				adcYB = 0;
   1a772:	2300      	movs	r3, #0
   1a774:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
   1a776:	2011      	movs	r0, #17
   1a778:	4b25      	ldr	r3, [pc, #148]	; (1a810 <detect_Three_Phase_Voltage+0x130>)
   1a77a:	4798      	blx	r3
   1a77c:	0003      	movs	r3, r0
   1a77e:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
   1a780:	687b      	ldr	r3, [r7, #4]
   1a782:	3b0c      	subs	r3, #12
   1a784:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1a786:	687b      	ldr	r3, [r7, #4]
   1a788:	2b00      	cmp	r3, #0
   1a78a:	da02      	bge.n	1a792 <detect_Three_Phase_Voltage+0xb2>
		{
			adcBR = 0;
   1a78c:	2300      	movs	r3, #0
   1a78e:	607b      	str	r3, [r7, #4]
   1a790:	e00f      	b.n	1a7b2 <detect_Three_Phase_Voltage+0xd2>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1a792:	687b      	ldr	r3, [r7, #4]
   1a794:	3b0c      	subs	r3, #12
   1a796:	4a21      	ldr	r2, [pc, #132]	; (1a81c <detect_Three_Phase_Voltage+0x13c>)
   1a798:	435a      	muls	r2, r3
   1a79a:	0010      	movs	r0, r2
   1a79c:	4b1e      	ldr	r3, [pc, #120]	; (1a818 <detect_Three_Phase_Voltage+0x138>)
   1a79e:	22fa      	movs	r2, #250	; 0xfa
   1a7a0:	0091      	lsls	r1, r2, #2
   1a7a2:	4798      	blx	r3
   1a7a4:	0003      	movs	r3, r0
   1a7a6:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1a7a8:	687b      	ldr	r3, [r7, #4]
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	da01      	bge.n	1a7b2 <detect_Three_Phase_Voltage+0xd2>
			{
				adcBR = 0;
   1a7ae:	2300      	movs	r3, #0
   1a7b0:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1a7b2:	68fb      	ldr	r3, [r7, #12]
   1a7b4:	b29b      	uxth	r3, r3
   1a7b6:	0019      	movs	r1, r3
   1a7b8:	2000      	movs	r0, #0
   1a7ba:	4b19      	ldr	r3, [pc, #100]	; (1a820 <detect_Three_Phase_Voltage+0x140>)
   1a7bc:	4798      	blx	r3
   1a7be:	0003      	movs	r3, r0
   1a7c0:	001a      	movs	r2, r3
   1a7c2:	4b18      	ldr	r3, [pc, #96]	; (1a824 <detect_Three_Phase_Voltage+0x144>)
   1a7c4:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1a7c6:	68bb      	ldr	r3, [r7, #8]
   1a7c8:	b29b      	uxth	r3, r3
   1a7ca:	0019      	movs	r1, r3
   1a7cc:	2001      	movs	r0, #1
   1a7ce:	4b14      	ldr	r3, [pc, #80]	; (1a820 <detect_Three_Phase_Voltage+0x140>)
   1a7d0:	4798      	blx	r3
   1a7d2:	0003      	movs	r3, r0
   1a7d4:	001a      	movs	r2, r3
   1a7d6:	4b13      	ldr	r3, [pc, #76]	; (1a824 <detect_Three_Phase_Voltage+0x144>)
   1a7d8:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	b29b      	uxth	r3, r3
   1a7de:	0019      	movs	r1, r3
   1a7e0:	2002      	movs	r0, #2
   1a7e2:	4b0f      	ldr	r3, [pc, #60]	; (1a820 <detect_Three_Phase_Voltage+0x140>)
   1a7e4:	4798      	blx	r3
   1a7e6:	0003      	movs	r3, r0
   1a7e8:	001a      	movs	r2, r3
   1a7ea:	4b0e      	ldr	r3, [pc, #56]	; (1a824 <detect_Three_Phase_Voltage+0x144>)
   1a7ec:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1a7ee:	4b0e      	ldr	r3, [pc, #56]	; (1a828 <detect_Three_Phase_Voltage+0x148>)
   1a7f0:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1a7f2:	4b05      	ldr	r3, [pc, #20]	; (1a808 <detect_Three_Phase_Voltage+0x128>)
   1a7f4:	6818      	ldr	r0, [r3, #0]
   1a7f6:	2300      	movs	r3, #0
   1a7f8:	2200      	movs	r2, #0
   1a7fa:	2100      	movs	r1, #0
   1a7fc:	4c0b      	ldr	r4, [pc, #44]	; (1a82c <detect_Three_Phase_Voltage+0x14c>)
   1a7fe:	47a0      	blx	r4
	}
}
   1a800:	46c0      	nop			; (mov r8, r8)
   1a802:	46bd      	mov	sp, r7
   1a804:	b005      	add	sp, #20
   1a806:	bd90      	pop	{r4, r7, pc}
   1a808:	20000238 	.word	0x20000238
   1a80c:	0001f661 	.word	0x0001f661
   1a810:	00019c59 	.word	0x00019c59
   1a814:	0000028f 	.word	0x0000028f
   1a818:	00026691 	.word	0x00026691
   1a81c:	0000029e 	.word	0x0000029e
   1a820:	0001a60d 	.word	0x0001a60d
   1a824:	200006dc 	.word	0x200006dc
   1a828:	0001a831 	.word	0x0001a831
   1a82c:	0001f1c1 	.word	0x0001f1c1

0001a830 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1a830:	b580      	push	{r7, lr}
   1a832:	b082      	sub	sp, #8
   1a834:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1a836:	1dfb      	adds	r3, r7, #7
   1a838:	4a2e      	ldr	r2, [pc, #184]	; (1a8f4 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a83a:	7852      	ldrb	r2, [r2, #1]
   1a83c:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a83e:	4b2e      	ldr	r3, [pc, #184]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a840:	681b      	ldr	r3, [r3, #0]
   1a842:	2b27      	cmp	r3, #39	; 0x27
   1a844:	d80b      	bhi.n	1a85e <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a846:	4b2c      	ldr	r3, [pc, #176]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a848:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
   1a84a:	2b27      	cmp	r3, #39	; 0x27
   1a84c:	d807      	bhi.n	1a85e <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
   1a84e:	4b2a      	ldr	r3, [pc, #168]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a850:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
   1a852:	2b27      	cmp	r3, #39	; 0x27
   1a854:	d803      	bhi.n	1a85e <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1a856:	4b27      	ldr	r3, [pc, #156]	; (1a8f4 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a858:	2200      	movs	r2, #0
   1a85a:	705a      	strb	r2, [r3, #1]
   1a85c:	e02a      	b.n	1a8b4 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a85e:	4b26      	ldr	r3, [pc, #152]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a860:	681a      	ldr	r2, [r3, #0]
   1a862:	4b25      	ldr	r3, [pc, #148]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a864:	685b      	ldr	r3, [r3, #4]
   1a866:	1ad3      	subs	r3, r2, r3
   1a868:	17da      	asrs	r2, r3, #31
   1a86a:	189b      	adds	r3, r3, r2
   1a86c:	4053      	eors	r3, r2
   1a86e:	4a23      	ldr	r2, [pc, #140]	; (1a8fc <set_Three_Phase_State_From_Voltage+0xcc>)
   1a870:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1a872:	4293      	cmp	r3, r2
   1a874:	dc17      	bgt.n	1a8a6 <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a876:	4b20      	ldr	r3, [pc, #128]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a878:	685a      	ldr	r2, [r3, #4]
   1a87a:	4b1f      	ldr	r3, [pc, #124]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a87c:	689b      	ldr	r3, [r3, #8]
   1a87e:	1ad3      	subs	r3, r2, r3
   1a880:	17da      	asrs	r2, r3, #31
   1a882:	189b      	adds	r3, r3, r2
   1a884:	4053      	eors	r3, r2
   1a886:	4a1d      	ldr	r2, [pc, #116]	; (1a8fc <set_Three_Phase_State_From_Voltage+0xcc>)
   1a888:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a88a:	4293      	cmp	r3, r2
   1a88c:	dc0b      	bgt.n	1a8a6 <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1a88e:	4b1a      	ldr	r3, [pc, #104]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a890:	689a      	ldr	r2, [r3, #8]
   1a892:	4b19      	ldr	r3, [pc, #100]	; (1a8f8 <set_Three_Phase_State_From_Voltage+0xc8>)
   1a894:	681b      	ldr	r3, [r3, #0]
   1a896:	1ad3      	subs	r3, r2, r3
   1a898:	17da      	asrs	r2, r3, #31
   1a89a:	189b      	adds	r3, r3, r2
   1a89c:	4053      	eors	r3, r2
   1a89e:	4a17      	ldr	r2, [pc, #92]	; (1a8fc <set_Three_Phase_State_From_Voltage+0xcc>)
   1a8a0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1a8a2:	4293      	cmp	r3, r2
   1a8a4:	dd03      	ble.n	1a8ae <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1a8a6:	4b13      	ldr	r3, [pc, #76]	; (1a8f4 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a8a8:	2202      	movs	r2, #2
   1a8aa:	705a      	strb	r2, [r3, #1]
   1a8ac:	e002      	b.n	1a8b4 <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1a8ae:	4b11      	ldr	r3, [pc, #68]	; (1a8f4 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a8b0:	2203      	movs	r2, #3
   1a8b2:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1a8b4:	4b0f      	ldr	r3, [pc, #60]	; (1a8f4 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a8b6:	785b      	ldrb	r3, [r3, #1]
   1a8b8:	b2da      	uxtb	r2, r3
   1a8ba:	4b11      	ldr	r3, [pc, #68]	; (1a900 <set_Three_Phase_State_From_Voltage+0xd0>)
   1a8bc:	781b      	ldrb	r3, [r3, #0]
   1a8be:	b2db      	uxtb	r3, r3
   1a8c0:	429a      	cmp	r2, r3
   1a8c2:	d012      	beq.n	1a8ea <set_Three_Phase_State_From_Voltage+0xba>
	{
		if(!motorRelatedVoltageBypassOn)
   1a8c4:	4b0f      	ldr	r3, [pc, #60]	; (1a904 <set_Three_Phase_State_From_Voltage+0xd4>)
   1a8c6:	781b      	ldrb	r3, [r3, #0]
   1a8c8:	2201      	movs	r2, #1
   1a8ca:	4053      	eors	r3, r2
   1a8cc:	b2db      	uxtb	r3, r3
   1a8ce:	2b00      	cmp	r3, #0
   1a8d0:	d00b      	beq.n	1a8ea <set_Three_Phase_State_From_Voltage+0xba>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1a8d2:	4b0d      	ldr	r3, [pc, #52]	; (1a908 <set_Three_Phase_State_From_Voltage+0xd8>)
   1a8d4:	1dfa      	adds	r2, r7, #7
   1a8d6:	7812      	ldrb	r2, [r2, #0]
   1a8d8:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1a8da:	4b06      	ldr	r3, [pc, #24]	; (1a8f4 <set_Three_Phase_State_From_Voltage+0xc4>)
   1a8dc:	785b      	ldrb	r3, [r3, #1]
   1a8de:	b2da      	uxtb	r2, r3
   1a8e0:	4b07      	ldr	r3, [pc, #28]	; (1a900 <set_Three_Phase_State_From_Voltage+0xd0>)
   1a8e2:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1a8e4:	4b09      	ldr	r3, [pc, #36]	; (1a90c <set_Three_Phase_State_From_Voltage+0xdc>)
   1a8e6:	2201      	movs	r2, #1
   1a8e8:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1a8ea:	46c0      	nop			; (mov r8, r8)
   1a8ec:	46bd      	mov	sp, r7
   1a8ee:	b002      	add	sp, #8
   1a8f0:	bd80      	pop	{r7, pc}
   1a8f2:	46c0      	nop			; (mov r8, r8)
   1a8f4:	20000740 	.word	0x20000740
   1a8f8:	200006dc 	.word	0x200006dc
   1a8fc:	20000654 	.word	0x20000654
   1a900:	20000841 	.word	0x20000841
   1a904:	2000076b 	.word	0x2000076b
   1a908:	2000071f 	.word	0x2000071f
   1a90c:	20000722 	.word	0x20000722

0001a910 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1a910:	b590      	push	{r4, r7, lr}
   1a912:	b083      	sub	sp, #12
   1a914:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1a916:	4b33      	ldr	r3, [pc, #204]	; (1a9e4 <detect_Motor_Current+0xd4>)
   1a918:	681a      	ldr	r2, [r3, #0]
   1a91a:	2301      	movs	r3, #1
   1a91c:	425b      	negs	r3, r3
   1a91e:	0019      	movs	r1, r3
   1a920:	0010      	movs	r0, r2
   1a922:	4b31      	ldr	r3, [pc, #196]	; (1a9e8 <detect_Motor_Current+0xd8>)
   1a924:	4798      	blx	r3
   1a926:	0003      	movs	r3, r0
   1a928:	2b01      	cmp	r3, #1
   1a92a:	d157      	bne.n	1a9dc <detect_Motor_Current+0xcc>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1a92c:	21c8      	movs	r1, #200	; 0xc8
   1a92e:	2010      	movs	r0, #16
   1a930:	4b2e      	ldr	r3, [pc, #184]	; (1a9ec <detect_Motor_Current+0xdc>)
   1a932:	4798      	blx	r3
   1a934:	0003      	movs	r3, r0
   1a936:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1a938:	687b      	ldr	r3, [r7, #4]
   1a93a:	2b0f      	cmp	r3, #15
   1a93c:	d906      	bls.n	1a94c <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
   1a93e:	687b      	ldr	r3, [r7, #4]
   1a940:	3b0f      	subs	r3, #15
   1a942:	17da      	asrs	r2, r3, #31
   1a944:	189b      	adds	r3, r3, r2
   1a946:	4053      	eors	r3, r2
   1a948:	607b      	str	r3, [r7, #4]
   1a94a:	e004      	b.n	1a956 <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
   1a94c:	687b      	ldr	r3, [r7, #4]
   1a94e:	2b0f      	cmp	r3, #15
   1a950:	d801      	bhi.n	1a956 <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
   1a952:	2300      	movs	r3, #0
   1a954:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
   1a956:	4b23      	ldr	r3, [pc, #140]	; (1a9e4 <detect_Motor_Current+0xd4>)
   1a958:	6818      	ldr	r0, [r3, #0]
   1a95a:	2300      	movs	r3, #0
   1a95c:	2200      	movs	r2, #0
   1a95e:	2100      	movs	r1, #0
   1a960:	4c23      	ldr	r4, [pc, #140]	; (1a9f0 <detect_Motor_Current+0xe0>)
   1a962:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1a964:	4b23      	ldr	r3, [pc, #140]	; (1a9f4 <detect_Motor_Current+0xe4>)
   1a966:	687a      	ldr	r2, [r7, #4]
   1a968:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1a96a:	687b      	ldr	r3, [r7, #4]
   1a96c:	4a22      	ldr	r2, [pc, #136]	; (1a9f8 <detect_Motor_Current+0xe8>)
   1a96e:	435a      	muls	r2, r3
   1a970:	0010      	movs	r0, r2
   1a972:	4b22      	ldr	r3, [pc, #136]	; (1a9fc <detect_Motor_Current+0xec>)
   1a974:	22fa      	movs	r2, #250	; 0xfa
   1a976:	0091      	lsls	r1, r2, #2
   1a978:	4798      	blx	r3
   1a97a:	0003      	movs	r3, r0
   1a97c:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1a97e:	687b      	ldr	r3, [r7, #4]
   1a980:	4a1f      	ldr	r2, [pc, #124]	; (1aa00 <detect_Motor_Current+0xf0>)
   1a982:	4293      	cmp	r3, r2
   1a984:	d810      	bhi.n	1a9a8 <detect_Motor_Current+0x98>
   1a986:	687b      	ldr	r3, [r7, #4]
   1a988:	2b00      	cmp	r3, #0
   1a98a:	d00d      	beq.n	1a9a8 <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1a98c:	687b      	ldr	r3, [r7, #4]
   1a98e:	4a1d      	ldr	r2, [pc, #116]	; (1aa04 <detect_Motor_Current+0xf4>)
   1a990:	4353      	muls	r3, r2
   1a992:	4a1d      	ldr	r2, [pc, #116]	; (1aa08 <detect_Motor_Current+0xf8>)
   1a994:	1898      	adds	r0, r3, r2
   1a996:	4b19      	ldr	r3, [pc, #100]	; (1a9fc <detect_Motor_Current+0xec>)
   1a998:	22fa      	movs	r2, #250	; 0xfa
   1a99a:	0091      	lsls	r1, r2, #2
   1a99c:	4798      	blx	r3
   1a99e:	0003      	movs	r3, r0
   1a9a0:	001a      	movs	r2, r3
   1a9a2:	687b      	ldr	r3, [r7, #4]
   1a9a4:	189b      	adds	r3, r3, r2
   1a9a6:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1a9a8:	4b12      	ldr	r3, [pc, #72]	; (1a9f4 <detect_Motor_Current+0xe4>)
   1a9aa:	687a      	ldr	r2, [r7, #4]
   1a9ac:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1a9ae:	687a      	ldr	r2, [r7, #4]
   1a9b0:	4b12      	ldr	r3, [pc, #72]	; (1a9fc <detect_Motor_Current+0xec>)
   1a9b2:	2164      	movs	r1, #100	; 0x64
   1a9b4:	0010      	movs	r0, r2
   1a9b6:	4798      	blx	r3
   1a9b8:	0003      	movs	r3, r0
   1a9ba:	b29a      	uxth	r2, r3
   1a9bc:	4b0d      	ldr	r3, [pc, #52]	; (1a9f4 <detect_Motor_Current+0xe4>)
   1a9be:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1a9c0:	687a      	ldr	r2, [r7, #4]
   1a9c2:	4b12      	ldr	r3, [pc, #72]	; (1aa0c <detect_Motor_Current+0xfc>)
   1a9c4:	2164      	movs	r1, #100	; 0x64
   1a9c6:	0010      	movs	r0, r2
   1a9c8:	4798      	blx	r3
   1a9ca:	000b      	movs	r3, r1
   1a9cc:	b29a      	uxth	r2, r3
   1a9ce:	4b09      	ldr	r3, [pc, #36]	; (1a9f4 <detect_Motor_Current+0xe4>)
   1a9d0:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1a9d2:	4b0f      	ldr	r3, [pc, #60]	; (1aa10 <detect_Motor_Current+0x100>)
   1a9d4:	2200      	movs	r2, #0
   1a9d6:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1a9d8:	4b0e      	ldr	r3, [pc, #56]	; (1aa14 <detect_Motor_Current+0x104>)
   1a9da:	4798      	blx	r3
	}
}
   1a9dc:	46c0      	nop			; (mov r8, r8)
   1a9de:	46bd      	mov	sp, r7
   1a9e0:	b003      	add	sp, #12
   1a9e2:	bd90      	pop	{r4, r7, pc}
   1a9e4:	20000238 	.word	0x20000238
   1a9e8:	0001f661 	.word	0x0001f661
   1a9ec:	00019b9d 	.word	0x00019b9d
   1a9f0:	0001f1c1 	.word	0x0001f1c1
   1a9f4:	200006dc 	.word	0x200006dc
   1a9f8:	00000d61 	.word	0x00000d61
   1a9fc:	0002657d 	.word	0x0002657d
   1aa00:	000004af 	.word	0x000004af
   1aa04:	fffffef0 	.word	0xfffffef0
   1aa08:	0004fb00 	.word	0x0004fb00
   1aa0c:	00026689 	.word	0x00026689
   1aa10:	2000024b 	.word	0x2000024b
   1aa14:	0001aa19 	.word	0x0001aa19

0001aa18 <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1aa18:	b590      	push	{r4, r7, lr}
   1aa1a:	b085      	sub	sp, #20
   1aa1c:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1aa1e:	4b39      	ldr	r3, [pc, #228]	; (1ab04 <calcPowerConsumption+0xec>)
   1aa20:	681b      	ldr	r3, [r3, #0]
   1aa22:	b29a      	uxth	r2, r3
   1aa24:	4b37      	ldr	r3, [pc, #220]	; (1ab04 <calcPowerConsumption+0xec>)
   1aa26:	685b      	ldr	r3, [r3, #4]
   1aa28:	b29b      	uxth	r3, r3
   1aa2a:	18d3      	adds	r3, r2, r3
   1aa2c:	b299      	uxth	r1, r3
   1aa2e:	4b35      	ldr	r3, [pc, #212]	; (1ab04 <calcPowerConsumption+0xec>)
   1aa30:	689b      	ldr	r3, [r3, #8]
   1aa32:	b29a      	uxth	r2, r3
   1aa34:	230e      	movs	r3, #14
   1aa36:	18fb      	adds	r3, r7, r3
   1aa38:	188a      	adds	r2, r1, r2
   1aa3a:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/(float)3) * (Analog_Parameter_Struct.Motor_Current/(float)100);
   1aa3c:	230e      	movs	r3, #14
   1aa3e:	18fb      	adds	r3, r7, r3
   1aa40:	881a      	ldrh	r2, [r3, #0]
   1aa42:	4b31      	ldr	r3, [pc, #196]	; (1ab08 <calcPowerConsumption+0xf0>)
   1aa44:	0010      	movs	r0, r2
   1aa46:	4798      	blx	r3
   1aa48:	1c02      	adds	r2, r0, #0
   1aa4a:	4b30      	ldr	r3, [pc, #192]	; (1ab0c <calcPowerConsumption+0xf4>)
   1aa4c:	4930      	ldr	r1, [pc, #192]	; (1ab10 <calcPowerConsumption+0xf8>)
   1aa4e:	1c10      	adds	r0, r2, #0
   1aa50:	4798      	blx	r3
   1aa52:	1c03      	adds	r3, r0, #0
   1aa54:	1c1c      	adds	r4, r3, #0
   1aa56:	4b2b      	ldr	r3, [pc, #172]	; (1ab04 <calcPowerConsumption+0xec>)
   1aa58:	691a      	ldr	r2, [r3, #16]
   1aa5a:	4b2e      	ldr	r3, [pc, #184]	; (1ab14 <calcPowerConsumption+0xfc>)
   1aa5c:	0010      	movs	r0, r2
   1aa5e:	4798      	blx	r3
   1aa60:	1c02      	adds	r2, r0, #0
   1aa62:	4b2a      	ldr	r3, [pc, #168]	; (1ab0c <calcPowerConsumption+0xf4>)
   1aa64:	492c      	ldr	r1, [pc, #176]	; (1ab18 <calcPowerConsumption+0x100>)
   1aa66:	1c10      	adds	r0, r2, #0
   1aa68:	4798      	blx	r3
   1aa6a:	1c03      	adds	r3, r0, #0
   1aa6c:	1c1a      	adds	r2, r3, #0
   1aa6e:	4b2b      	ldr	r3, [pc, #172]	; (1ab1c <calcPowerConsumption+0x104>)
   1aa70:	1c11      	adds	r1, r2, #0
   1aa72:	1c20      	adds	r0, r4, #0
   1aa74:	4798      	blx	r3
   1aa76:	1c03      	adds	r3, r0, #0
   1aa78:	1c1a      	adds	r2, r3, #0
   1aa7a:	4b29      	ldr	r3, [pc, #164]	; (1ab20 <calcPowerConsumption+0x108>)
   1aa7c:	1c10      	adds	r0, r2, #0
   1aa7e:	4798      	blx	r3
   1aa80:	0003      	movs	r3, r0
   1aa82:	000c      	movs	r4, r1
   1aa84:	603b      	str	r3, [r7, #0]
   1aa86:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85 / (float)100;
   1aa88:	4c26      	ldr	r4, [pc, #152]	; (1ab24 <calcPowerConsumption+0x10c>)
   1aa8a:	4a27      	ldr	r2, [pc, #156]	; (1ab28 <calcPowerConsumption+0x110>)
   1aa8c:	4b27      	ldr	r3, [pc, #156]	; (1ab2c <calcPowerConsumption+0x114>)
   1aa8e:	6838      	ldr	r0, [r7, #0]
   1aa90:	6879      	ldr	r1, [r7, #4]
   1aa92:	47a0      	blx	r4
   1aa94:	0003      	movs	r3, r0
   1aa96:	000c      	movs	r4, r1
   1aa98:	0018      	movs	r0, r3
   1aa9a:	0021      	movs	r1, r4
   1aa9c:	4c21      	ldr	r4, [pc, #132]	; (1ab24 <calcPowerConsumption+0x10c>)
   1aa9e:	2200      	movs	r2, #0
   1aaa0:	4b23      	ldr	r3, [pc, #140]	; (1ab30 <calcPowerConsumption+0x118>)
   1aaa2:	47a0      	blx	r4
   1aaa4:	0003      	movs	r3, r0
   1aaa6:	000c      	movs	r4, r1
   1aaa8:	0018      	movs	r0, r3
   1aaaa:	0021      	movs	r1, r4
   1aaac:	4c21      	ldr	r4, [pc, #132]	; (1ab34 <calcPowerConsumption+0x11c>)
   1aaae:	2200      	movs	r2, #0
   1aab0:	4b21      	ldr	r3, [pc, #132]	; (1ab38 <calcPowerConsumption+0x120>)
   1aab2:	47a0      	blx	r4
   1aab4:	0003      	movs	r3, r0
   1aab6:	000c      	movs	r4, r1
   1aab8:	603b      	str	r3, [r7, #0]
   1aaba:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1aabc:	4b1f      	ldr	r3, [pc, #124]	; (1ab3c <calcPowerConsumption+0x124>)
   1aabe:	6838      	ldr	r0, [r7, #0]
   1aac0:	6879      	ldr	r1, [r7, #4]
   1aac2:	4798      	blx	r3
   1aac4:	0002      	movs	r2, r0
   1aac6:	4b0f      	ldr	r3, [pc, #60]	; (1ab04 <calcPowerConsumption+0xec>)
   1aac8:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1aaca:	4b1c      	ldr	r3, [pc, #112]	; (1ab3c <calcPowerConsumption+0x124>)
   1aacc:	6838      	ldr	r0, [r7, #0]
   1aace:	6879      	ldr	r1, [r7, #4]
   1aad0:	4798      	blx	r3
   1aad2:	4b1b      	ldr	r3, [pc, #108]	; (1ab40 <calcPowerConsumption+0x128>)
   1aad4:	22fa      	movs	r2, #250	; 0xfa
   1aad6:	0091      	lsls	r1, r2, #2
   1aad8:	4798      	blx	r3
   1aada:	0003      	movs	r3, r0
   1aadc:	b29a      	uxth	r2, r3
   1aade:	4b09      	ldr	r3, [pc, #36]	; (1ab04 <calcPowerConsumption+0xec>)
   1aae0:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1aae2:	4b16      	ldr	r3, [pc, #88]	; (1ab3c <calcPowerConsumption+0x124>)
   1aae4:	6838      	ldr	r0, [r7, #0]
   1aae6:	6879      	ldr	r1, [r7, #4]
   1aae8:	4798      	blx	r3
   1aaea:	4b16      	ldr	r3, [pc, #88]	; (1ab44 <calcPowerConsumption+0x12c>)
   1aaec:	22fa      	movs	r2, #250	; 0xfa
   1aaee:	0091      	lsls	r1, r2, #2
   1aaf0:	4798      	blx	r3
   1aaf2:	000b      	movs	r3, r1
   1aaf4:	001a      	movs	r2, r3
   1aaf6:	4b03      	ldr	r3, [pc, #12]	; (1ab04 <calcPowerConsumption+0xec>)
   1aaf8:	629a      	str	r2, [r3, #40]	; 0x28
}
   1aafa:	46c0      	nop			; (mov r8, r8)
   1aafc:	46bd      	mov	sp, r7
   1aafe:	b005      	add	sp, #20
   1ab00:	bd90      	pop	{r4, r7, pc}
   1ab02:	46c0      	nop			; (mov r8, r8)
   1ab04:	200006dc 	.word	0x200006dc
   1ab08:	00027005 	.word	0x00027005
   1ab0c:	00026b35 	.word	0x00026b35
   1ab10:	40400000 	.word	0x40400000
   1ab14:	000270a5 	.word	0x000270a5
   1ab18:	42c80000 	.word	0x42c80000
   1ab1c:	00026dc5 	.word	0x00026dc5
   1ab20:	00028c81 	.word	0x00028c81
   1ab24:	00027fb9 	.word	0x00027fb9
   1ab28:	e8584caa 	.word	0xe8584caa
   1ab2c:	3ffbb67a 	.word	0x3ffbb67a
   1ab30:	40554000 	.word	0x40554000
   1ab34:	00027751 	.word	0x00027751
   1ab38:	40590000 	.word	0x40590000
   1ab3c:	00026979 	.word	0x00026979
   1ab40:	0002657d 	.word	0x0002657d
   1ab44:	00026689 	.word	0x00026689

0001ab48 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1ab48:	b580      	push	{r7, lr}
   1ab4a:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1ab4c:	4b04      	ldr	r3, [pc, #16]	; (1ab60 <should_Detect_New_Current+0x18>)
   1ab4e:	781b      	ldrb	r3, [r3, #0]
   1ab50:	b2db      	uxtb	r3, r3
   1ab52:	3b01      	subs	r3, #1
   1ab54:	425a      	negs	r2, r3
   1ab56:	4153      	adcs	r3, r2
   1ab58:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1ab5a:	0018      	movs	r0, r3
   1ab5c:	46bd      	mov	sp, r7
   1ab5e:	bd80      	pop	{r7, pc}
   1ab60:	2000024b 	.word	0x2000024b

0001ab64 <getACPowerState>:

bool getACPowerState(void)
{
   1ab64:	b580      	push	{r7, lr}
   1ab66:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1ab68:	4b02      	ldr	r3, [pc, #8]	; (1ab74 <getACPowerState+0x10>)
   1ab6a:	781b      	ldrb	r3, [r3, #0]
   1ab6c:	b2db      	uxtb	r3, r3
}
   1ab6e:	0018      	movs	r0, r3
   1ab70:	46bd      	mov	sp, r7
   1ab72:	bd80      	pop	{r7, pc}
   1ab74:	200007be 	.word	0x200007be

0001ab78 <setACPowerState>:

void setACPowerState(bool state)
{
   1ab78:	b580      	push	{r7, lr}
   1ab7a:	b082      	sub	sp, #8
   1ab7c:	af00      	add	r7, sp, #0
   1ab7e:	0002      	movs	r2, r0
   1ab80:	1dfb      	adds	r3, r7, #7
   1ab82:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1ab84:	4b03      	ldr	r3, [pc, #12]	; (1ab94 <setACPowerState+0x1c>)
   1ab86:	1dfa      	adds	r2, r7, #7
   1ab88:	7812      	ldrb	r2, [r2, #0]
   1ab8a:	701a      	strb	r2, [r3, #0]
}
   1ab8c:	46c0      	nop			; (mov r8, r8)
   1ab8e:	46bd      	mov	sp, r7
   1ab90:	b002      	add	sp, #8
   1ab92:	bd80      	pop	{r7, pc}
   1ab94:	200007be 	.word	0x200007be

0001ab98 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1ab98:	b580      	push	{r7, lr}
   1ab9a:	af00      	add	r7, sp, #0
	return allPhase;
   1ab9c:	4b02      	ldr	r3, [pc, #8]	; (1aba8 <getAllPhaseState+0x10>)
   1ab9e:	781b      	ldrb	r3, [r3, #0]
   1aba0:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1aba2:	0018      	movs	r0, r3
   1aba4:	46bd      	mov	sp, r7
   1aba6:	bd80      	pop	{r7, pc}
   1aba8:	20000759 	.word	0x20000759

0001abac <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1abac:	b580      	push	{r7, lr}
   1abae:	b082      	sub	sp, #8
   1abb0:	af00      	add	r7, sp, #0
   1abb2:	0002      	movs	r2, r0
   1abb4:	1dfb      	adds	r3, r7, #7
   1abb6:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1abb8:	4b03      	ldr	r3, [pc, #12]	; (1abc8 <setAllPhaseState+0x1c>)
   1abba:	1dfa      	adds	r2, r7, #7
   1abbc:	7812      	ldrb	r2, [r2, #0]
   1abbe:	701a      	strb	r2, [r3, #0]
}
   1abc0:	46c0      	nop			; (mov r8, r8)
   1abc2:	46bd      	mov	sp, r7
   1abc4:	b002      	add	sp, #8
   1abc6:	bd80      	pop	{r7, pc}
   1abc8:	20000759 	.word	0x20000759

0001abcc <getPhaseSequence>:

bool getPhaseSequence()
{
   1abcc:	b580      	push	{r7, lr}
   1abce:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1abd0:	4b02      	ldr	r3, [pc, #8]	; (1abdc <getPhaseSequence+0x10>)
   1abd2:	781b      	ldrb	r3, [r3, #0]
   1abd4:	b2db      	uxtb	r3, r3
}
   1abd6:	0018      	movs	r0, r3
   1abd8:	46bd      	mov	sp, r7
   1abda:	bd80      	pop	{r7, pc}
   1abdc:	2000076c 	.word	0x2000076c

0001abe0 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1abe0:	b580      	push	{r7, lr}
   1abe2:	b082      	sub	sp, #8
   1abe4:	af00      	add	r7, sp, #0
   1abe6:	0002      	movs	r2, r0
   1abe8:	1dfb      	adds	r3, r7, #7
   1abea:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1abec:	4b03      	ldr	r3, [pc, #12]	; (1abfc <setPhaseSequence+0x1c>)
   1abee:	1dfa      	adds	r2, r7, #7
   1abf0:	7812      	ldrb	r2, [r2, #0]
   1abf2:	701a      	strb	r2, [r3, #0]
}
   1abf4:	46c0      	nop			; (mov r8, r8)
   1abf6:	46bd      	mov	sp, r7
   1abf8:	b002      	add	sp, #8
   1abfa:	bd80      	pop	{r7, pc}
   1abfc:	2000076c 	.word	0x2000076c

0001ac00 <getMotorState>:


bool getMotorState(void)
{
   1ac00:	b580      	push	{r7, lr}
   1ac02:	af00      	add	r7, sp, #0
	return mFeedback;
   1ac04:	4b02      	ldr	r3, [pc, #8]	; (1ac10 <getMotorState+0x10>)
   1ac06:	781b      	ldrb	r3, [r3, #0]
   1ac08:	b2db      	uxtb	r3, r3
}
   1ac0a:	0018      	movs	r0, r3
   1ac0c:	46bd      	mov	sp, r7
   1ac0e:	bd80      	pop	{r7, pc}
   1ac10:	2000073a 	.word	0x2000073a

0001ac14 <setMotorState>:

void setMotorState(bool state)
{
   1ac14:	b580      	push	{r7, lr}
   1ac16:	b082      	sub	sp, #8
   1ac18:	af00      	add	r7, sp, #0
   1ac1a:	0002      	movs	r2, r0
   1ac1c:	1dfb      	adds	r3, r7, #7
   1ac1e:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1ac20:	4b0a      	ldr	r3, [pc, #40]	; (1ac4c <setMotorState+0x38>)
   1ac22:	1dfa      	adds	r2, r7, #7
   1ac24:	7812      	ldrb	r2, [r2, #0]
   1ac26:	701a      	strb	r2, [r3, #0]
	if (state)
   1ac28:	1dfb      	adds	r3, r7, #7
   1ac2a:	781b      	ldrb	r3, [r3, #0]
   1ac2c:	2b00      	cmp	r3, #0
   1ac2e:	d004      	beq.n	1ac3a <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1ac30:	2100      	movs	r1, #0
   1ac32:	2005      	movs	r0, #5
   1ac34:	4b06      	ldr	r3, [pc, #24]	; (1ac50 <setMotorState+0x3c>)
   1ac36:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1ac38:	e003      	b.n	1ac42 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1ac3a:	2101      	movs	r1, #1
   1ac3c:	2005      	movs	r0, #5
   1ac3e:	4b04      	ldr	r3, [pc, #16]	; (1ac50 <setMotorState+0x3c>)
   1ac40:	4798      	blx	r3
}
   1ac42:	46c0      	nop			; (mov r8, r8)
   1ac44:	46bd      	mov	sp, r7
   1ac46:	b002      	add	sp, #8
   1ac48:	bd80      	pop	{r7, pc}
   1ac4a:	46c0      	nop			; (mov r8, r8)
   1ac4c:	2000073a 	.word	0x2000073a
   1ac50:	00019099 	.word	0x00019099

0001ac54 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1ac54:	b590      	push	{r4, r7, lr}
   1ac56:	b083      	sub	sp, #12
   1ac58:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1ac5a:	1d3b      	adds	r3, r7, #4
   1ac5c:	1d7a      	adds	r2, r7, #5
   1ac5e:	1db9      	adds	r1, r7, #6
   1ac60:	1df8      	adds	r0, r7, #7
   1ac62:	4c06      	ldr	r4, [pc, #24]	; (1ac7c <getMotorState_from_pin+0x28>)
   1ac64:	47a0      	blx	r4
	setMotorState(p3);
   1ac66:	1d7b      	adds	r3, r7, #5
   1ac68:	781b      	ldrb	r3, [r3, #0]
   1ac6a:	0018      	movs	r0, r3
   1ac6c:	4b04      	ldr	r3, [pc, #16]	; (1ac80 <getMotorState_from_pin+0x2c>)
   1ac6e:	4798      	blx	r3
	return p3;
   1ac70:	1d7b      	adds	r3, r7, #5
   1ac72:	781b      	ldrb	r3, [r3, #0]
}
   1ac74:	0018      	movs	r0, r3
   1ac76:	46bd      	mov	sp, r7
   1ac78:	b003      	add	sp, #12
   1ac7a:	bd90      	pop	{r4, r7, pc}
   1ac7c:	0001ac85 	.word	0x0001ac85
   1ac80:	0001ac15 	.word	0x0001ac15

0001ac84 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1ac84:	b590      	push	{r4, r7, lr}
   1ac86:	b087      	sub	sp, #28
   1ac88:	af00      	add	r7, sp, #0
   1ac8a:	60f8      	str	r0, [r7, #12]
   1ac8c:	60b9      	str	r1, [r7, #8]
   1ac8e:	607a      	str	r2, [r7, #4]
   1ac90:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
   1ac92:	4b37      	ldr	r3, [pc, #220]	; (1ad70 <readSensorState+0xec>)
   1ac94:	785b      	ldrb	r3, [r3, #1]
   1ac96:	b2da      	uxtb	r2, r3
   1ac98:	68fb      	ldr	r3, [r7, #12]
   1ac9a:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1ac9c:	4b34      	ldr	r3, [pc, #208]	; (1ad70 <readSensorState+0xec>)
   1ac9e:	781b      	ldrb	r3, [r3, #0]
   1aca0:	b2db      	uxtb	r3, r3
   1aca2:	2b02      	cmp	r3, #2
   1aca4:	d103      	bne.n	1acae <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1aca6:	68bb      	ldr	r3, [r7, #8]
   1aca8:	2201      	movs	r2, #1
   1acaa:	701a      	strb	r2, [r3, #0]
   1acac:	e002      	b.n	1acb4 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1acae:	68bb      	ldr	r3, [r7, #8]
   1acb0:	2200      	movs	r2, #0
   1acb2:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1acb4:	4b2f      	ldr	r3, [pc, #188]	; (1ad74 <readSensorState+0xf0>)
   1acb6:	2225      	movs	r2, #37	; 0x25
   1acb8:	5c9b      	ldrb	r3, [r3, r2]
   1acba:	2b00      	cmp	r3, #0
   1acbc:	d106      	bne.n	1accc <readSensorState+0x48>
	{
		*motor  = getMotorState();
   1acbe:	4b2e      	ldr	r3, [pc, #184]	; (1ad78 <readSensorState+0xf4>)
   1acc0:	4798      	blx	r3
   1acc2:	0003      	movs	r3, r0
   1acc4:	001a      	movs	r2, r3
   1acc6:	687b      	ldr	r3, [r7, #4]
   1acc8:	701a      	strb	r2, [r3, #0]
   1acca:	e020      	b.n	1ad0e <readSensorState+0x8a>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1accc:	4b29      	ldr	r3, [pc, #164]	; (1ad74 <readSensorState+0xf0>)
   1acce:	2225      	movs	r2, #37	; 0x25
   1acd0:	5c9b      	ldrb	r3, [r3, r2]
   1acd2:	2b01      	cmp	r3, #1
   1acd4:	d106      	bne.n	1ace4 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
   1acd6:	4b29      	ldr	r3, [pc, #164]	; (1ad7c <readSensorState+0xf8>)
   1acd8:	4798      	blx	r3
   1acda:	0003      	movs	r3, r0
   1acdc:	001a      	movs	r2, r3
   1acde:	687b      	ldr	r3, [r7, #4]
   1ace0:	701a      	strb	r2, [r3, #0]
   1ace2:	e014      	b.n	1ad0e <readSensorState+0x8a>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1ace4:	4b23      	ldr	r3, [pc, #140]	; (1ad74 <readSensorState+0xf0>)
   1ace6:	2225      	movs	r2, #37	; 0x25
   1ace8:	5c9b      	ldrb	r3, [r3, r2]
   1acea:	2b02      	cmp	r3, #2
   1acec:	d10f      	bne.n	1ad0e <readSensorState+0x8a>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1acee:	202e      	movs	r0, #46	; 0x2e
   1acf0:	4b23      	ldr	r3, [pc, #140]	; (1ad80 <readSensorState+0xfc>)
   1acf2:	4798      	blx	r3
   1acf4:	0003      	movs	r3, r0
   1acf6:	1e5a      	subs	r2, r3, #1
   1acf8:	4193      	sbcs	r3, r2
   1acfa:	b2db      	uxtb	r3, r3
   1acfc:	2201      	movs	r2, #1
   1acfe:	4053      	eors	r3, r2
   1ad00:	b2db      	uxtb	r3, r3
   1ad02:	1c1a      	adds	r2, r3, #0
   1ad04:	2301      	movs	r3, #1
   1ad06:	4013      	ands	r3, r2
   1ad08:	b2da      	uxtb	r2, r3
   1ad0a:	687b      	ldr	r3, [r7, #4]
   1ad0c:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1ad0e:	2317      	movs	r3, #23
   1ad10:	18fb      	adds	r3, r7, r3
   1ad12:	2201      	movs	r2, #1
   1ad14:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1ad16:	2317      	movs	r3, #23
   1ad18:	18fc      	adds	r4, r7, r3
   1ad1a:	4b1a      	ldr	r3, [pc, #104]	; (1ad84 <readSensorState+0x100>)
   1ad1c:	2100      	movs	r1, #0
   1ad1e:	0018      	movs	r0, r3
   1ad20:	4b19      	ldr	r3, [pc, #100]	; (1ad88 <readSensorState+0x104>)
   1ad22:	4798      	blx	r3
   1ad24:	0003      	movs	r3, r0
   1ad26:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1ad28:	23fa      	movs	r3, #250	; 0xfa
   1ad2a:	005b      	lsls	r3, r3, #1
   1ad2c:	0018      	movs	r0, r3
   1ad2e:	4b17      	ldr	r3, [pc, #92]	; (1ad8c <readSensorState+0x108>)
   1ad30:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1ad32:	2317      	movs	r3, #23
   1ad34:	18fc      	adds	r4, r7, r3
   1ad36:	4b13      	ldr	r3, [pc, #76]	; (1ad84 <readSensorState+0x100>)
   1ad38:	2100      	movs	r1, #0
   1ad3a:	0018      	movs	r0, r3
   1ad3c:	4b12      	ldr	r3, [pc, #72]	; (1ad88 <readSensorState+0x104>)
   1ad3e:	4798      	blx	r3
   1ad40:	0003      	movs	r3, r0
   1ad42:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1ad44:	2317      	movs	r3, #23
   1ad46:	18fb      	adds	r3, r7, r3
   1ad48:	781b      	ldrb	r3, [r3, #0]
   1ad4a:	2204      	movs	r2, #4
   1ad4c:	4013      	ands	r3, r2
   1ad4e:	d003      	beq.n	1ad58 <readSensorState+0xd4>
	{
		isACpowerAvailable = true;
   1ad50:	4b0f      	ldr	r3, [pc, #60]	; (1ad90 <readSensorState+0x10c>)
   1ad52:	2201      	movs	r2, #1
   1ad54:	701a      	strb	r2, [r3, #0]
   1ad56:	e002      	b.n	1ad5e <readSensorState+0xda>
	}
	else
	{
		isACpowerAvailable = false;
   1ad58:	4b0d      	ldr	r3, [pc, #52]	; (1ad90 <readSensorState+0x10c>)
   1ad5a:	2200      	movs	r2, #0
   1ad5c:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1ad5e:	4b0c      	ldr	r3, [pc, #48]	; (1ad90 <readSensorState+0x10c>)
   1ad60:	781b      	ldrb	r3, [r3, #0]
   1ad62:	b2da      	uxtb	r2, r3
   1ad64:	683b      	ldr	r3, [r7, #0]
   1ad66:	701a      	strb	r2, [r3, #0]
}
   1ad68:	46c0      	nop			; (mov r8, r8)
   1ad6a:	46bd      	mov	sp, r7
   1ad6c:	b007      	add	sp, #28
   1ad6e:	bd90      	pop	{r4, r7, pc}
   1ad70:	20000740 	.word	0x20000740
   1ad74:	20000654 	.word	0x20000654
   1ad78:	0001ac01 	.word	0x0001ac01
   1ad7c:	0001ad95 	.word	0x0001ad95
   1ad80:	00019055 	.word	0x00019055
   1ad84:	2000088c 	.word	0x2000088c
   1ad88:	00018b89 	.word	0x00018b89
   1ad8c:	0001ff69 	.word	0x0001ff69
   1ad90:	20000785 	.word	0x20000785

0001ad94 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1ad94:	b580      	push	{r7, lr}
   1ad96:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1ad98:	4b0e      	ldr	r3, [pc, #56]	; (1add4 <checkMotorStatusUsingCurrent+0x40>)
   1ad9a:	781b      	ldrb	r3, [r3, #0]
   1ad9c:	2b00      	cmp	r3, #0
   1ad9e:	d00d      	beq.n	1adbc <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1ada0:	4b0d      	ldr	r3, [pc, #52]	; (1add8 <checkMotorStatusUsingCurrent+0x44>)
   1ada2:	8a9b      	ldrh	r3, [r3, #20]
   1ada4:	b29a      	uxth	r2, r3
   1ada6:	4b0d      	ldr	r3, [pc, #52]	; (1addc <checkMotorStatusUsingCurrent+0x48>)
   1ada8:	781b      	ldrb	r3, [r3, #0]
   1adaa:	085b      	lsrs	r3, r3, #1
   1adac:	b2db      	uxtb	r3, r3
   1adae:	b29b      	uxth	r3, r3
   1adb0:	429a      	cmp	r2, r3
   1adb2:	d801      	bhi.n	1adb8 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1adb4:	2300      	movs	r3, #0
   1adb6:	e009      	b.n	1adcc <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1adb8:	2301      	movs	r3, #1
   1adba:	e007      	b.n	1adcc <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1adbc:	4b06      	ldr	r3, [pc, #24]	; (1add8 <checkMotorStatusUsingCurrent+0x44>)
   1adbe:	8a9b      	ldrh	r3, [r3, #20]
   1adc0:	b29b      	uxth	r3, r3
   1adc2:	2b04      	cmp	r3, #4
   1adc4:	d901      	bls.n	1adca <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1adc6:	2301      	movs	r3, #1
   1adc8:	e000      	b.n	1adcc <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1adca:	2300      	movs	r3, #0
		}
	}
}
   1adcc:	0018      	movs	r0, r3
   1adce:	46bd      	mov	sp, r7
   1add0:	bd80      	pop	{r7, pc}
   1add2:	46c0      	nop			; (mov r8, r8)
   1add4:	20000860 	.word	0x20000860
   1add8:	200006dc 	.word	0x200006dc
   1addc:	200007f4 	.word	0x200007f4

0001ade0 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1ade0:	b5b0      	push	{r4, r5, r7, lr}
   1ade2:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1ade4:	4b07      	ldr	r3, [pc, #28]	; (1ae04 <detectMotorStateChangeUsingCurrent+0x24>)
   1ade6:	4798      	blx	r3
   1ade8:	0003      	movs	r3, r0
   1adea:	001c      	movs	r4, r3
   1adec:	4b06      	ldr	r3, [pc, #24]	; (1ae08 <detectMotorStateChangeUsingCurrent+0x28>)
   1adee:	4798      	blx	r3
   1adf0:	0003      	movs	r3, r0
   1adf2:	429c      	cmp	r4, r3
   1adf4:	d001      	beq.n	1adfa <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1adf6:	2301      	movs	r3, #1
   1adf8:	e000      	b.n	1adfc <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1adfa:	2300      	movs	r3, #0
	}
}
   1adfc:	0018      	movs	r0, r3
   1adfe:	46bd      	mov	sp, r7
   1ae00:	bdb0      	pop	{r4, r5, r7, pc}
   1ae02:	46c0      	nop			; (mov r8, r8)
   1ae04:	0001ac01 	.word	0x0001ac01
   1ae08:	0001ad95 	.word	0x0001ad95

0001ae0c <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1ae0c:	b5b0      	push	{r4, r5, r7, lr}
   1ae0e:	b084      	sub	sp, #16
   1ae10:	af00      	add	r7, sp, #0
   1ae12:	0005      	movs	r5, r0
   1ae14:	000c      	movs	r4, r1
   1ae16:	0010      	movs	r0, r2
   1ae18:	0019      	movs	r1, r3
   1ae1a:	1dfb      	adds	r3, r7, #7
   1ae1c:	1c2a      	adds	r2, r5, #0
   1ae1e:	701a      	strb	r2, [r3, #0]
   1ae20:	1dbb      	adds	r3, r7, #6
   1ae22:	1c22      	adds	r2, r4, #0
   1ae24:	701a      	strb	r2, [r3, #0]
   1ae26:	1d7b      	adds	r3, r7, #5
   1ae28:	1c02      	adds	r2, r0, #0
   1ae2a:	701a      	strb	r2, [r3, #0]
   1ae2c:	1d3b      	adds	r3, r7, #4
   1ae2e:	1c0a      	adds	r2, r1, #0
   1ae30:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1ae32:	1dfb      	adds	r3, r7, #7
   1ae34:	781b      	ldrb	r3, [r3, #0]
   1ae36:	0018      	movs	r0, r3
   1ae38:	4b27      	ldr	r3, [pc, #156]	; (1aed8 <updateSensorState+0xcc>)
   1ae3a:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1ae3c:	1dbb      	adds	r3, r7, #6
   1ae3e:	781b      	ldrb	r3, [r3, #0]
   1ae40:	0018      	movs	r0, r3
   1ae42:	4b26      	ldr	r3, [pc, #152]	; (1aedc <updateSensorState+0xd0>)
   1ae44:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1ae46:	1d7b      	adds	r3, r7, #5
   1ae48:	781b      	ldrb	r3, [r3, #0]
   1ae4a:	0018      	movs	r0, r3
   1ae4c:	4b24      	ldr	r3, [pc, #144]	; (1aee0 <updateSensorState+0xd4>)
   1ae4e:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1ae50:	1d3b      	adds	r3, r7, #4
   1ae52:	781b      	ldrb	r3, [r3, #0]
   1ae54:	0018      	movs	r0, r3
   1ae56:	4b23      	ldr	r3, [pc, #140]	; (1aee4 <updateSensorState+0xd8>)
   1ae58:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1ae5a:	4b23      	ldr	r3, [pc, #140]	; (1aee8 <updateSensorState+0xdc>)
   1ae5c:	4798      	blx	r3
   1ae5e:	0003      	movs	r3, r0
   1ae60:	2b03      	cmp	r3, #3
   1ae62:	d12a      	bne.n	1aeba <updateSensorState+0xae>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1ae64:	230f      	movs	r3, #15
   1ae66:	18fb      	adds	r3, r7, r3
   1ae68:	2201      	movs	r2, #1
   1ae6a:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1ae6c:	4b1f      	ldr	r3, [pc, #124]	; (1aeec <updateSensorState+0xe0>)
   1ae6e:	2224      	movs	r2, #36	; 0x24
   1ae70:	5c9b      	ldrb	r3, [r3, r2]
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d005      	beq.n	1ae82 <updateSensorState+0x76>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1ae76:	230f      	movs	r3, #15
   1ae78:	18fc      	adds	r4, r7, r3
   1ae7a:	4b1d      	ldr	r3, [pc, #116]	; (1aef0 <updateSensorState+0xe4>)
   1ae7c:	4798      	blx	r3
   1ae7e:	0003      	movs	r3, r0
   1ae80:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1ae82:	230f      	movs	r3, #15
   1ae84:	18fb      	adds	r3, r7, r3
   1ae86:	781b      	ldrb	r3, [r3, #0]
   1ae88:	2b00      	cmp	r3, #0
   1ae8a:	d004      	beq.n	1ae96 <updateSensorState+0x8a>
		{
			THREEPHASE_OK_LED_ON;
   1ae8c:	2100      	movs	r1, #0
   1ae8e:	2027      	movs	r0, #39	; 0x27
   1ae90:	4b18      	ldr	r3, [pc, #96]	; (1aef4 <updateSensorState+0xe8>)
   1ae92:	4798      	blx	r3
   1ae94:	e003      	b.n	1ae9e <updateSensorState+0x92>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1ae96:	2101      	movs	r1, #1
   1ae98:	2027      	movs	r0, #39	; 0x27
   1ae9a:	4b16      	ldr	r3, [pc, #88]	; (1aef4 <updateSensorState+0xe8>)
   1ae9c:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1ae9e:	4b13      	ldr	r3, [pc, #76]	; (1aeec <updateSensorState+0xe0>)
   1aea0:	785b      	ldrb	r3, [r3, #1]
   1aea2:	2b00      	cmp	r3, #0
   1aea4:	d004      	beq.n	1aeb0 <updateSensorState+0xa4>
		{
			AUTO_ON_LED_ON;
   1aea6:	2100      	movs	r1, #0
   1aea8:	2028      	movs	r0, #40	; 0x28
   1aeaa:	4b12      	ldr	r3, [pc, #72]	; (1aef4 <updateSensorState+0xe8>)
   1aeac:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1aeae:	e00f      	b.n	1aed0 <updateSensorState+0xc4>
			AUTO_ON_LED_OFF;
   1aeb0:	2101      	movs	r1, #1
   1aeb2:	2028      	movs	r0, #40	; 0x28
   1aeb4:	4b0f      	ldr	r3, [pc, #60]	; (1aef4 <updateSensorState+0xe8>)
   1aeb6:	4798      	blx	r3
}
   1aeb8:	e00a      	b.n	1aed0 <updateSensorState+0xc4>
		THREEPHASE_OK_LED_OFF;
   1aeba:	2101      	movs	r1, #1
   1aebc:	2027      	movs	r0, #39	; 0x27
   1aebe:	4b0d      	ldr	r3, [pc, #52]	; (1aef4 <updateSensorState+0xe8>)
   1aec0:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1aec2:	2101      	movs	r1, #1
   1aec4:	2028      	movs	r0, #40	; 0x28
   1aec6:	4b0b      	ldr	r3, [pc, #44]	; (1aef4 <updateSensorState+0xe8>)
   1aec8:	4798      	blx	r3
		startTimerOn=false;
   1aeca:	4b0b      	ldr	r3, [pc, #44]	; (1aef8 <updateSensorState+0xec>)
   1aecc:	2200      	movs	r2, #0
   1aece:	701a      	strb	r2, [r3, #0]
}
   1aed0:	46c0      	nop			; (mov r8, r8)
   1aed2:	46bd      	mov	sp, r7
   1aed4:	b004      	add	sp, #16
   1aed6:	bdb0      	pop	{r4, r5, r7, pc}
   1aed8:	0001abad 	.word	0x0001abad
   1aedc:	0001abe1 	.word	0x0001abe1
   1aee0:	0001ac15 	.word	0x0001ac15
   1aee4:	0001ab79 	.word	0x0001ab79
   1aee8:	0001ab99 	.word	0x0001ab99
   1aeec:	20000654 	.word	0x20000654
   1aef0:	0001abcd 	.word	0x0001abcd
   1aef4:	00019099 	.word	0x00019099
   1aef8:	20000792 	.word	0x20000792

0001aefc <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1aefc:	b580      	push	{r7, lr}
   1aefe:	b082      	sub	sp, #8
   1af00:	af00      	add	r7, sp, #0
   1af02:	0002      	movs	r2, r0
   1af04:	1dfb      	adds	r3, r7, #7
   1af06:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1af08:	4b0e      	ldr	r3, [pc, #56]	; (1af44 <resetAutoStart+0x48>)
   1af0a:	785b      	ldrb	r3, [r3, #1]
   1af0c:	2b00      	cmp	r3, #0
   1af0e:	d107      	bne.n	1af20 <resetAutoStart+0x24>
	{
		startTimerOn=false;
   1af10:	4b0d      	ldr	r3, [pc, #52]	; (1af48 <resetAutoStart+0x4c>)
   1af12:	2200      	movs	r2, #0
   1af14:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1af16:	2101      	movs	r1, #1
   1af18:	2028      	movs	r0, #40	; 0x28
   1af1a:	4b0c      	ldr	r3, [pc, #48]	; (1af4c <resetAutoStart+0x50>)
   1af1c:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1af1e:	e00d      	b.n	1af3c <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1af20:	4b08      	ldr	r3, [pc, #32]	; (1af44 <resetAutoStart+0x48>)
   1af22:	785b      	ldrb	r3, [r3, #1]
   1af24:	2b00      	cmp	r3, #0
   1af26:	d009      	beq.n	1af3c <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
   1af28:	2100      	movs	r1, #0
   1af2a:	2028      	movs	r0, #40	; 0x28
   1af2c:	4b07      	ldr	r3, [pc, #28]	; (1af4c <resetAutoStart+0x50>)
   1af2e:	4798      	blx	r3
		if (setChange)
   1af30:	1dfb      	adds	r3, r7, #7
   1af32:	781b      	ldrb	r3, [r3, #0]
   1af34:	2b00      	cmp	r3, #0
   1af36:	d001      	beq.n	1af3c <resetAutoStart+0x40>
			triggerAutoStart();
   1af38:	4b05      	ldr	r3, [pc, #20]	; (1af50 <resetAutoStart+0x54>)
   1af3a:	4798      	blx	r3
}
   1af3c:	46c0      	nop			; (mov r8, r8)
   1af3e:	46bd      	mov	sp, r7
   1af40:	b002      	add	sp, #8
   1af42:	bd80      	pop	{r7, pc}
   1af44:	20000654 	.word	0x20000654
   1af48:	20000792 	.word	0x20000792
   1af4c:	00019099 	.word	0x00019099
   1af50:	0001af55 	.word	0x0001af55

0001af54 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1af54:	b580      	push	{r7, lr}
   1af56:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1af58:	4b0b      	ldr	r3, [pc, #44]	; (1af88 <triggerAutoStart+0x34>)
   1af5a:	4798      	blx	r3
   1af5c:	0003      	movs	r3, r0
   1af5e:	001a      	movs	r2, r3
   1af60:	2301      	movs	r3, #1
   1af62:	4053      	eors	r3, r2
   1af64:	b2db      	uxtb	r3, r3
   1af66:	2b00      	cmp	r3, #0
   1af68:	d00b      	beq.n	1af82 <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1af6a:	4b08      	ldr	r3, [pc, #32]	; (1af8c <triggerAutoStart+0x38>)
   1af6c:	4798      	blx	r3
   1af6e:	1e03      	subs	r3, r0, #0
   1af70:	d007      	beq.n	1af82 <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1af72:	4b07      	ldr	r3, [pc, #28]	; (1af90 <triggerAutoStart+0x3c>)
   1af74:	2201      	movs	r2, #1
   1af76:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1af78:	4b06      	ldr	r3, [pc, #24]	; (1af94 <triggerAutoStart+0x40>)
   1af7a:	4798      	blx	r3
   1af7c:	0002      	movs	r2, r0
   1af7e:	4b06      	ldr	r3, [pc, #24]	; (1af98 <triggerAutoStart+0x44>)
   1af80:	601a      	str	r2, [r3, #0]
		}
	}
}
   1af82:	46c0      	nop			; (mov r8, r8)
   1af84:	46bd      	mov	sp, r7
   1af86:	bd80      	pop	{r7, pc}
   1af88:	0001ac01 	.word	0x0001ac01
   1af8c:	0001ab99 	.word	0x0001ab99
   1af90:	20000792 	.word	0x20000792
   1af94:	000202cd 	.word	0x000202cd
   1af98:	20000798 	.word	0x20000798

0001af9c <operateOnEvent>:

void operateOnEvent(void)
{
   1af9c:	b590      	push	{r4, r7, lr}
   1af9e:	b083      	sub	sp, #12
   1afa0:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1afa2:	1d3b      	adds	r3, r7, #4
   1afa4:	1d7a      	adds	r2, r7, #5
   1afa6:	1db9      	adds	r1, r7, #6
   1afa8:	1df8      	adds	r0, r7, #7
   1afaa:	4c5e      	ldr	r4, [pc, #376]	; (1b124 <operateOnEvent+0x188>)
   1afac:	47a0      	blx	r4
	eventOccured = false;
   1afae:	4b5e      	ldr	r3, [pc, #376]	; (1b128 <operateOnEvent+0x18c>)
   1afb0:	2200      	movs	r2, #0
   1afb2:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1afb4:	4b5d      	ldr	r3, [pc, #372]	; (1b12c <operateOnEvent+0x190>)
   1afb6:	4798      	blx	r3
   1afb8:	0003      	movs	r3, r0
   1afba:	001a      	movs	r2, r3
   1afbc:	1dfb      	adds	r3, r7, #7
   1afbe:	781b      	ldrb	r3, [r3, #0]
   1afc0:	429a      	cmp	r2, r3
   1afc2:	d108      	bne.n	1afd6 <operateOnEvent+0x3a>
   1afc4:	4b5a      	ldr	r3, [pc, #360]	; (1b130 <operateOnEvent+0x194>)
   1afc6:	4798      	blx	r3
   1afc8:	0003      	movs	r3, r0
   1afca:	001a      	movs	r2, r3
   1afcc:	1d7b      	adds	r3, r7, #5
   1afce:	781b      	ldrb	r3, [r3, #0]
   1afd0:	429a      	cmp	r2, r3
   1afd2:	d100      	bne.n	1afd6 <operateOnEvent+0x3a>
   1afd4:	e0a2      	b.n	1b11c <operateOnEvent+0x180>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1afd6:	4b56      	ldr	r3, [pc, #344]	; (1b130 <operateOnEvent+0x194>)
   1afd8:	4798      	blx	r3
   1afda:	1e03      	subs	r3, r0, #0
   1afdc:	d05e      	beq.n	1b09c <operateOnEvent+0x100>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1afde:	1dfb      	adds	r3, r7, #7
   1afe0:	781b      	ldrb	r3, [r3, #0]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d11e      	bne.n	1b024 <operateOnEvent+0x88>
   1afe6:	1d7b      	adds	r3, r7, #5
   1afe8:	781b      	ldrb	r3, [r3, #0]
   1afea:	2201      	movs	r2, #1
   1afec:	4053      	eors	r3, r2
   1afee:	b2db      	uxtb	r3, r3
   1aff0:	2b00      	cmp	r3, #0
   1aff2:	d017      	beq.n	1b024 <operateOnEvent+0x88>
   1aff4:	1d3b      	adds	r3, r7, #4
   1aff6:	781b      	ldrb	r3, [r3, #0]
   1aff8:	2201      	movs	r2, #1
   1affa:	4053      	eors	r3, r2
   1affc:	b2db      	uxtb	r3, r3
   1affe:	2b00      	cmp	r3, #0
   1b000:	d010      	beq.n	1b024 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1b002:	2200      	movs	r2, #0
   1b004:	2101      	movs	r1, #1
   1b006:	2000      	movs	r0, #0
   1b008:	4b4a      	ldr	r3, [pc, #296]	; (1b134 <operateOnEvent+0x198>)
   1b00a:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1b00c:	2101      	movs	r1, #1
   1b00e:	2027      	movs	r0, #39	; 0x27
   1b010:	4b49      	ldr	r3, [pc, #292]	; (1b138 <operateOnEvent+0x19c>)
   1b012:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1b014:	2043      	movs	r0, #67	; 0x43
   1b016:	4b49      	ldr	r3, [pc, #292]	; (1b13c <operateOnEvent+0x1a0>)
   1b018:	4798      	blx	r3
   1b01a:	0003      	movs	r3, r0
   1b01c:	001a      	movs	r2, r3
   1b01e:	4b48      	ldr	r3, [pc, #288]	; (1b140 <operateOnEvent+0x1a4>)
   1b020:	719a      	strb	r2, [r3, #6]
   1b022:	e070      	b.n	1b106 <operateOnEvent+0x16a>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b024:	4b47      	ldr	r3, [pc, #284]	; (1b144 <operateOnEvent+0x1a8>)
   1b026:	2220      	movs	r2, #32
   1b028:	5c9b      	ldrb	r3, [r3, r2]
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	d008      	beq.n	1b040 <operateOnEvent+0xa4>
   1b02e:	1dfb      	adds	r3, r7, #7
   1b030:	781b      	ldrb	r3, [r3, #0]
   1b032:	2b03      	cmp	r3, #3
   1b034:	d104      	bne.n	1b040 <operateOnEvent+0xa4>
   1b036:	4b3d      	ldr	r3, [pc, #244]	; (1b12c <operateOnEvent+0x190>)
   1b038:	4798      	blx	r3
   1b03a:	0003      	movs	r3, r0
   1b03c:	2b03      	cmp	r3, #3
   1b03e:	d00d      	beq.n	1b05c <operateOnEvent+0xc0>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b040:	4b40      	ldr	r3, [pc, #256]	; (1b144 <operateOnEvent+0x1a8>)
   1b042:	2220      	movs	r2, #32
   1b044:	5c9b      	ldrb	r3, [r3, r2]
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1b046:	2b00      	cmp	r3, #0
   1b048:	d112      	bne.n	1b070 <operateOnEvent+0xd4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b04a:	1dfb      	adds	r3, r7, #7
   1b04c:	781b      	ldrb	r3, [r3, #0]
   1b04e:	2b01      	cmp	r3, #1
   1b050:	d90e      	bls.n	1b070 <operateOnEvent+0xd4>
   1b052:	4b36      	ldr	r3, [pc, #216]	; (1b12c <operateOnEvent+0x190>)
   1b054:	4798      	blx	r3
   1b056:	0003      	movs	r3, r0
   1b058:	2b01      	cmp	r3, #1
   1b05a:	d909      	bls.n	1b070 <operateOnEvent+0xd4>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1b05c:	1d7b      	adds	r3, r7, #5
   1b05e:	781b      	ldrb	r3, [r3, #0]
   1b060:	2201      	movs	r2, #1
   1b062:	4053      	eors	r3, r2
   1b064:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1b066:	2b00      	cmp	r3, #0
   1b068:	d002      	beq.n	1b070 <operateOnEvent+0xd4>
		{
			unknownMotorOff();
   1b06a:	4b37      	ldr	r3, [pc, #220]	; (1b148 <operateOnEvent+0x1ac>)
   1b06c:	4798      	blx	r3
   1b06e:	e04a      	b.n	1b106 <operateOnEvent+0x16a>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b070:	4b34      	ldr	r3, [pc, #208]	; (1b144 <operateOnEvent+0x1a8>)
   1b072:	2220      	movs	r2, #32
   1b074:	5c9b      	ldrb	r3, [r3, r2]
   1b076:	2b00      	cmp	r3, #0
   1b078:	d045      	beq.n	1b106 <operateOnEvent+0x16a>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
   1b07a:	1dfb      	adds	r3, r7, #7
   1b07c:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1b07e:	2b02      	cmp	r3, #2
   1b080:	d141      	bne.n	1b106 <operateOnEvent+0x16a>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
   1b082:	1d3b      	adds	r3, r7, #4
   1b084:	781b      	ldrb	r3, [r3, #0]
   1b086:	2b00      	cmp	r3, #0
   1b088:	d03d      	beq.n	1b106 <operateOnEvent+0x16a>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1b08a:	4b30      	ldr	r3, [pc, #192]	; (1b14c <operateOnEvent+0x1b0>)
   1b08c:	4798      	blx	r3
   1b08e:	0002      	movs	r2, r0
   1b090:	4b2f      	ldr	r3, [pc, #188]	; (1b150 <operateOnEvent+0x1b4>)
   1b092:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1b094:	4b2f      	ldr	r3, [pc, #188]	; (1b154 <operateOnEvent+0x1b8>)
   1b096:	2201      	movs	r2, #1
   1b098:	701a      	strb	r2, [r3, #0]
   1b09a:	e034      	b.n	1b106 <operateOnEvent+0x16a>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1b09c:	1d7b      	adds	r3, r7, #5
   1b09e:	781b      	ldrb	r3, [r3, #0]
   1b0a0:	2b00      	cmp	r3, #0
   1b0a2:	d028      	beq.n	1b0f6 <operateOnEvent+0x15a>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1b0a4:	1dfb      	adds	r3, r7, #7
   1b0a6:	781b      	ldrb	r3, [r3, #0]
   1b0a8:	2b03      	cmp	r3, #3
   1b0aa:	d11e      	bne.n	1b0ea <operateOnEvent+0x14e>
   1b0ac:	1dbb      	adds	r3, r7, #6
   1b0ae:	781b      	ldrb	r3, [r3, #0]
   1b0b0:	2b00      	cmp	r3, #0
   1b0b2:	d01a      	beq.n	1b0ea <operateOnEvent+0x14e>
   1b0b4:	1d3b      	adds	r3, r7, #4
   1b0b6:	781b      	ldrb	r3, [r3, #0]
   1b0b8:	2b00      	cmp	r3, #0
   1b0ba:	d016      	beq.n	1b0ea <operateOnEvent+0x14e>
			{
				if (startTimerOn)
   1b0bc:	4b26      	ldr	r3, [pc, #152]	; (1b158 <operateOnEvent+0x1bc>)
   1b0be:	781b      	ldrb	r3, [r3, #0]
   1b0c0:	2b00      	cmp	r3, #0
   1b0c2:	d002      	beq.n	1b0ca <operateOnEvent+0x12e>
				{
					startTimerOn = false;
   1b0c4:	4b24      	ldr	r3, [pc, #144]	; (1b158 <operateOnEvent+0x1bc>)
   1b0c6:	2200      	movs	r2, #0
   1b0c8:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1b0ca:	2100      	movs	r1, #0
   1b0cc:	2027      	movs	r0, #39	; 0x27
   1b0ce:	4b1a      	ldr	r3, [pc, #104]	; (1b138 <operateOnEvent+0x19c>)
   1b0d0:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1b0d2:	2053      	movs	r0, #83	; 0x53
   1b0d4:	4b19      	ldr	r3, [pc, #100]	; (1b13c <operateOnEvent+0x1a0>)
   1b0d6:	4798      	blx	r3
   1b0d8:	0003      	movs	r3, r0
   1b0da:	001a      	movs	r2, r3
   1b0dc:	4b18      	ldr	r3, [pc, #96]	; (1b140 <operateOnEvent+0x1a4>)
   1b0de:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1b0e0:	2101      	movs	r1, #1
   1b0e2:	2001      	movs	r0, #1
   1b0e4:	4b1d      	ldr	r3, [pc, #116]	; (1b15c <operateOnEvent+0x1c0>)
   1b0e6:	4798      	blx	r3
   1b0e8:	e00d      	b.n	1b106 <operateOnEvent+0x16a>
			}
			else
			{
				stopMotor(false,true,false);
   1b0ea:	2200      	movs	r2, #0
   1b0ec:	2101      	movs	r1, #1
   1b0ee:	2000      	movs	r0, #0
   1b0f0:	4b10      	ldr	r3, [pc, #64]	; (1b134 <operateOnEvent+0x198>)
   1b0f2:	4798      	blx	r3
   1b0f4:	e007      	b.n	1b106 <operateOnEvent+0x16a>
			}
		}
		else
		{
			waitStableLineOn = true;
   1b0f6:	4b1a      	ldr	r3, [pc, #104]	; (1b160 <operateOnEvent+0x1c4>)
   1b0f8:	2201      	movs	r2, #1
   1b0fa:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1b0fc:	4b13      	ldr	r3, [pc, #76]	; (1b14c <operateOnEvent+0x1b0>)
   1b0fe:	4798      	blx	r3
   1b100:	0002      	movs	r2, r0
   1b102:	4b18      	ldr	r3, [pc, #96]	; (1b164 <operateOnEvent+0x1c8>)
   1b104:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1b106:	1dfb      	adds	r3, r7, #7
   1b108:	7818      	ldrb	r0, [r3, #0]
   1b10a:	1dbb      	adds	r3, r7, #6
   1b10c:	7819      	ldrb	r1, [r3, #0]
   1b10e:	1d7b      	adds	r3, r7, #5
   1b110:	781a      	ldrb	r2, [r3, #0]
   1b112:	1d3b      	adds	r3, r7, #4
   1b114:	781b      	ldrb	r3, [r3, #0]
   1b116:	4c14      	ldr	r4, [pc, #80]	; (1b168 <operateOnEvent+0x1cc>)
   1b118:	47a0      	blx	r4
   1b11a:	e000      	b.n	1b11e <operateOnEvent+0x182>
		return;
   1b11c:	46c0      	nop			; (mov r8, r8)
}
   1b11e:	46bd      	mov	sp, r7
   1b120:	b003      	add	sp, #12
   1b122:	bd90      	pop	{r4, r7, pc}
   1b124:	0001ac85 	.word	0x0001ac85
   1b128:	20000722 	.word	0x20000722
   1b12c:	0001ab99 	.word	0x0001ab99
   1b130:	0001ac01 	.word	0x0001ac01
   1b134:	0001b4d9 	.word	0x0001b4d9
   1b138:	00019099 	.word	0x00019099
   1b13c:	00014939 	.word	0x00014939
   1b140:	2000070c 	.word	0x2000070c
   1b144:	20000654 	.word	0x20000654
   1b148:	0001b601 	.word	0x0001b601
   1b14c:	000202cd 	.word	0x000202cd
   1b150:	20000770 	.word	0x20000770
   1b154:	20000789 	.word	0x20000789
   1b158:	20000792 	.word	0x20000792
   1b15c:	0001b2fd 	.word	0x0001b2fd
   1b160:	2000080d 	.word	0x2000080d
   1b164:	200007c8 	.word	0x200007c8
   1b168:	0001ae0d 	.word	0x0001ae0d

0001b16c <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1b16c:	b580      	push	{r7, lr}
   1b16e:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1b170:	4b02      	ldr	r3, [pc, #8]	; (1b17c <checkLineSensors+0x10>)
   1b172:	785b      	ldrb	r3, [r3, #1]
   1b174:	b2db      	uxtb	r3, r3
}
   1b176:	0018      	movs	r0, r3
   1b178:	46bd      	mov	sp, r7
   1b17a:	bd80      	pop	{r7, pc}
   1b17c:	20000740 	.word	0x20000740

0001b180 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1b180:	b590      	push	{r4, r7, lr}
   1b182:	b083      	sub	sp, #12
   1b184:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1b186:	4b41      	ldr	r3, [pc, #260]	; (1b28c <operateOnStableLine+0x10c>)
   1b188:	2200      	movs	r2, #0
   1b18a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1b18c:	1dbc      	adds	r4, r7, #6
   1b18e:	4b40      	ldr	r3, [pc, #256]	; (1b290 <operateOnStableLine+0x110>)
   1b190:	4798      	blx	r3
   1b192:	0003      	movs	r3, r0
   1b194:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1b196:	1dbb      	adds	r3, r7, #6
   1b198:	781b      	ldrb	r3, [r3, #0]
   1b19a:	2b03      	cmp	r3, #3
   1b19c:	d133      	bne.n	1b206 <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1b19e:	1dfb      	adds	r3, r7, #7
   1b1a0:	2201      	movs	r2, #1
   1b1a2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1b1a4:	4b3b      	ldr	r3, [pc, #236]	; (1b294 <operateOnStableLine+0x114>)
   1b1a6:	2224      	movs	r2, #36	; 0x24
   1b1a8:	5c9b      	ldrb	r3, [r3, r2]
   1b1aa:	2b00      	cmp	r3, #0
   1b1ac:	d004      	beq.n	1b1b8 <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1b1ae:	1dfc      	adds	r4, r7, #7
   1b1b0:	4b39      	ldr	r3, [pc, #228]	; (1b298 <operateOnStableLine+0x118>)
   1b1b2:	4798      	blx	r3
   1b1b4:	0003      	movs	r3, r0
   1b1b6:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1b1b8:	1dfb      	adds	r3, r7, #7
   1b1ba:	781b      	ldrb	r3, [r3, #0]
   1b1bc:	2b00      	cmp	r3, #0
   1b1be:	d016      	beq.n	1b1ee <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
   1b1c0:	2100      	movs	r1, #0
   1b1c2:	2027      	movs	r0, #39	; 0x27
   1b1c4:	4b35      	ldr	r3, [pc, #212]	; (1b29c <operateOnStableLine+0x11c>)
   1b1c6:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1b1c8:	4b32      	ldr	r3, [pc, #200]	; (1b294 <operateOnStableLine+0x114>)
   1b1ca:	785b      	ldrb	r3, [r3, #1]
   1b1cc:	2b00      	cmp	r3, #0
   1b1ce:	d002      	beq.n	1b1d6 <operateOnStableLine+0x56>
			{
				triggerAutoStart();
   1b1d0:	4b33      	ldr	r3, [pc, #204]	; (1b2a0 <operateOnStableLine+0x120>)
   1b1d2:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1b1d4:	e055      	b.n	1b282 <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1b1d6:	4b2f      	ldr	r3, [pc, #188]	; (1b294 <operateOnStableLine+0x114>)
   1b1d8:	791b      	ldrb	r3, [r3, #4]
   1b1da:	2b4c      	cmp	r3, #76	; 0x4c
   1b1dc:	d051      	beq.n	1b282 <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1b1de:	2047      	movs	r0, #71	; 0x47
   1b1e0:	4b30      	ldr	r3, [pc, #192]	; (1b2a4 <operateOnStableLine+0x124>)
   1b1e2:	4798      	blx	r3
   1b1e4:	0003      	movs	r3, r0
   1b1e6:	001a      	movs	r2, r3
   1b1e8:	4b2f      	ldr	r3, [pc, #188]	; (1b2a8 <operateOnStableLine+0x128>)
   1b1ea:	711a      	strb	r2, [r3, #4]
}
   1b1ec:	e049      	b.n	1b282 <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
   1b1ee:	2101      	movs	r1, #1
   1b1f0:	2027      	movs	r0, #39	; 0x27
   1b1f2:	4b2a      	ldr	r3, [pc, #168]	; (1b29c <operateOnStableLine+0x11c>)
   1b1f4:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1b1f6:	2041      	movs	r0, #65	; 0x41
   1b1f8:	4b2a      	ldr	r3, [pc, #168]	; (1b2a4 <operateOnStableLine+0x124>)
   1b1fa:	4798      	blx	r3
   1b1fc:	0003      	movs	r3, r0
   1b1fe:	001a      	movs	r2, r3
   1b200:	4b29      	ldr	r3, [pc, #164]	; (1b2a8 <operateOnStableLine+0x128>)
   1b202:	725a      	strb	r2, [r3, #9]
}
   1b204:	e03d      	b.n	1b282 <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1b206:	1dbb      	adds	r3, r7, #6
   1b208:	781b      	ldrb	r3, [r3, #0]
   1b20a:	2b02      	cmp	r3, #2
   1b20c:	d114      	bne.n	1b238 <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
   1b20e:	2101      	movs	r1, #1
   1b210:	2027      	movs	r0, #39	; 0x27
   1b212:	4b22      	ldr	r3, [pc, #136]	; (1b29c <operateOnStableLine+0x11c>)
   1b214:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b216:	4b1f      	ldr	r3, [pc, #124]	; (1b294 <operateOnStableLine+0x114>)
   1b218:	791b      	ldrb	r3, [r3, #4]
   1b21a:	2b4f      	cmp	r3, #79	; 0x4f
   1b21c:	d131      	bne.n	1b282 <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1b21e:	4b1d      	ldr	r3, [pc, #116]	; (1b294 <operateOnStableLine+0x114>)
   1b220:	2220      	movs	r2, #32
   1b222:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1b224:	2b00      	cmp	r3, #0
   1b226:	d12c      	bne.n	1b282 <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1b228:	2041      	movs	r0, #65	; 0x41
   1b22a:	4b1e      	ldr	r3, [pc, #120]	; (1b2a4 <operateOnStableLine+0x124>)
   1b22c:	4798      	blx	r3
   1b22e:	0003      	movs	r3, r0
   1b230:	001a      	movs	r2, r3
   1b232:	4b1d      	ldr	r3, [pc, #116]	; (1b2a8 <operateOnStableLine+0x128>)
   1b234:	725a      	strb	r2, [r3, #9]
}
   1b236:	e024      	b.n	1b282 <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1b238:	1dbb      	adds	r3, r7, #6
   1b23a:	781b      	ldrb	r3, [r3, #0]
   1b23c:	2b00      	cmp	r3, #0
   1b23e:	d120      	bne.n	1b282 <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
   1b240:	2101      	movs	r1, #1
   1b242:	2027      	movs	r0, #39	; 0x27
   1b244:	4b15      	ldr	r3, [pc, #84]	; (1b29c <operateOnStableLine+0x11c>)
   1b246:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b248:	4b12      	ldr	r3, [pc, #72]	; (1b294 <operateOnStableLine+0x114>)
   1b24a:	791b      	ldrb	r3, [r3, #4]
   1b24c:	2b4f      	cmp	r3, #79	; 0x4f
   1b24e:	d011      	beq.n	1b274 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b250:	4b16      	ldr	r3, [pc, #88]	; (1b2ac <operateOnStableLine+0x12c>)
   1b252:	781b      	ldrb	r3, [r3, #0]
   1b254:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1b256:	2b02      	cmp	r3, #2
   1b258:	d103      	bne.n	1b262 <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b25a:	4b0e      	ldr	r3, [pc, #56]	; (1b294 <operateOnStableLine+0x114>)
   1b25c:	791b      	ldrb	r3, [r3, #4]
   1b25e:	2b4f      	cmp	r3, #79	; 0x4f
   1b260:	d008      	beq.n	1b274 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b262:	4b12      	ldr	r3, [pc, #72]	; (1b2ac <operateOnStableLine+0x12c>)
   1b264:	781b      	ldrb	r3, [r3, #0]
   1b266:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1b268:	2b03      	cmp	r3, #3
   1b26a:	d10a      	bne.n	1b282 <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1b26c:	4b09      	ldr	r3, [pc, #36]	; (1b294 <operateOnStableLine+0x114>)
   1b26e:	791b      	ldrb	r3, [r3, #4]
   1b270:	2b4c      	cmp	r3, #76	; 0x4c
   1b272:	d006      	beq.n	1b282 <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1b274:	204c      	movs	r0, #76	; 0x4c
   1b276:	4b0b      	ldr	r3, [pc, #44]	; (1b2a4 <operateOnStableLine+0x124>)
   1b278:	4798      	blx	r3
   1b27a:	0003      	movs	r3, r0
   1b27c:	001a      	movs	r2, r3
   1b27e:	4b0a      	ldr	r3, [pc, #40]	; (1b2a8 <operateOnStableLine+0x128>)
   1b280:	715a      	strb	r2, [r3, #5]
}
   1b282:	46c0      	nop			; (mov r8, r8)
   1b284:	46bd      	mov	sp, r7
   1b286:	b003      	add	sp, #12
   1b288:	bd90      	pop	{r4, r7, pc}
   1b28a:	46c0      	nop			; (mov r8, r8)
   1b28c:	2000080d 	.word	0x2000080d
   1b290:	0001b16d 	.word	0x0001b16d
   1b294:	20000654 	.word	0x20000654
   1b298:	0001abcd 	.word	0x0001abcd
   1b29c:	00019099 	.word	0x00019099
   1b2a0:	0001af55 	.word	0x0001af55
   1b2a4:	00014939 	.word	0x00014939
   1b2a8:	2000070c 	.word	0x2000070c
   1b2ac:	2000071f 	.word	0x2000071f

0001b2b0 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1b2b0:	b580      	push	{r7, lr}
   1b2b2:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1b2b4:	4b0d      	ldr	r3, [pc, #52]	; (1b2ec <waitStableLineOver+0x3c>)
   1b2b6:	781b      	ldrb	r3, [r3, #0]
   1b2b8:	2b00      	cmp	r3, #0
   1b2ba:	d00e      	beq.n	1b2da <waitStableLineOver+0x2a>
   1b2bc:	4b0c      	ldr	r3, [pc, #48]	; (1b2f0 <waitStableLineOver+0x40>)
   1b2be:	4798      	blx	r3
   1b2c0:	0002      	movs	r2, r0
   1b2c2:	4b0c      	ldr	r3, [pc, #48]	; (1b2f4 <waitStableLineOver+0x44>)
   1b2c4:	681b      	ldr	r3, [r3, #0]
   1b2c6:	1ad3      	subs	r3, r2, r3
   1b2c8:	4a0b      	ldr	r2, [pc, #44]	; (1b2f8 <waitStableLineOver+0x48>)
   1b2ca:	7812      	ldrb	r2, [r2, #0]
   1b2cc:	0011      	movs	r1, r2
   1b2ce:	2264      	movs	r2, #100	; 0x64
   1b2d0:	434a      	muls	r2, r1
   1b2d2:	4293      	cmp	r3, r2
   1b2d4:	d301      	bcc.n	1b2da <waitStableLineOver+0x2a>
   1b2d6:	2301      	movs	r3, #1
   1b2d8:	e000      	b.n	1b2dc <waitStableLineOver+0x2c>
   1b2da:	2300      	movs	r3, #0
   1b2dc:	1c1a      	adds	r2, r3, #0
   1b2de:	2301      	movs	r3, #1
   1b2e0:	4013      	ands	r3, r2
   1b2e2:	b2db      	uxtb	r3, r3
}
   1b2e4:	0018      	movs	r0, r3
   1b2e6:	46bd      	mov	sp, r7
   1b2e8:	bd80      	pop	{r7, pc}
   1b2ea:	46c0      	nop			; (mov r8, r8)
   1b2ec:	2000080d 	.word	0x2000080d
   1b2f0:	000202cd 	.word	0x000202cd
   1b2f4:	200007c8 	.word	0x200007c8
   1b2f8:	200007d9 	.word	0x200007d9

0001b2fc <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1b2fc:	b580      	push	{r7, lr}
   1b2fe:	b082      	sub	sp, #8
   1b300:	af00      	add	r7, sp, #0
   1b302:	0002      	movs	r2, r0
   1b304:	1dfb      	adds	r3, r7, #7
   1b306:	701a      	strb	r2, [r3, #0]
   1b308:	1dbb      	adds	r3, r7, #6
   1b30a:	1c0a      	adds	r2, r1, #0
   1b30c:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1b30e:	4b5c      	ldr	r3, [pc, #368]	; (1b480 <startMotor+0x184>)
   1b310:	2200      	movs	r2, #0
   1b312:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1b314:	1dbb      	adds	r3, r7, #6
   1b316:	781b      	ldrb	r3, [r3, #0]
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d11f      	bne.n	1b35c <startMotor+0x60>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b31c:	4b59      	ldr	r3, [pc, #356]	; (1b484 <startMotor+0x188>)
   1b31e:	4798      	blx	r3
   1b320:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1b322:	2b03      	cmp	r3, #3
   1b324:	d00b      	beq.n	1b33e <startMotor+0x42>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b326:	4b57      	ldr	r3, [pc, #348]	; (1b484 <startMotor+0x188>)
   1b328:	4798      	blx	r3
   1b32a:	0003      	movs	r3, r0
   1b32c:	2b02      	cmp	r3, #2
   1b32e:	d000      	beq.n	1b332 <startMotor+0x36>
   1b330:	e091      	b.n	1b456 <startMotor+0x15a>
   1b332:	4b55      	ldr	r3, [pc, #340]	; (1b488 <startMotor+0x18c>)
   1b334:	2220      	movs	r2, #32
   1b336:	5c9b      	ldrb	r3, [r3, r2]
   1b338:	2b00      	cmp	r3, #0
   1b33a:	d000      	beq.n	1b33e <startMotor+0x42>
   1b33c:	e08b      	b.n	1b456 <startMotor+0x15a>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b33e:	4b52      	ldr	r3, [pc, #328]	; (1b488 <startMotor+0x18c>)
   1b340:	2224      	movs	r2, #36	; 0x24
   1b342:	5c9b      	ldrb	r3, [r3, r2]
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1b344:	2b00      	cmp	r3, #0
   1b346:	d003      	beq.n	1b350 <startMotor+0x54>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1b348:	4b50      	ldr	r3, [pc, #320]	; (1b48c <startMotor+0x190>)
   1b34a:	4798      	blx	r3
   1b34c:	1e03      	subs	r3, r0, #0
   1b34e:	d105      	bne.n	1b35c <startMotor+0x60>
   1b350:	4b4d      	ldr	r3, [pc, #308]	; (1b488 <startMotor+0x18c>)
   1b352:	2224      	movs	r2, #36	; 0x24
   1b354:	5c9b      	ldrb	r3, [r3, r2]
   1b356:	2b00      	cmp	r3, #0
   1b358:	d000      	beq.n	1b35c <startMotor+0x60>
   1b35a:	e07c      	b.n	1b456 <startMotor+0x15a>
	{
		if (!getMotorState())
   1b35c:	4b4c      	ldr	r3, [pc, #304]	; (1b490 <startMotor+0x194>)
   1b35e:	4798      	blx	r3
   1b360:	0003      	movs	r3, r0
   1b362:	001a      	movs	r2, r3
   1b364:	2301      	movs	r3, #1
   1b366:	4053      	eors	r3, r2
   1b368:	b2db      	uxtb	r3, r3
   1b36a:	2b00      	cmp	r3, #0
   1b36c:	d100      	bne.n	1b370 <startMotor+0x74>
   1b36e:	e06a      	b.n	1b446 <startMotor+0x14a>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1b370:	4b48      	ldr	r3, [pc, #288]	; (1b494 <startMotor+0x198>)
   1b372:	795b      	ldrb	r3, [r3, #5]
   1b374:	2b00      	cmp	r3, #0
   1b376:	d034      	beq.n	1b3e2 <startMotor+0xe6>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1b378:	4b43      	ldr	r3, [pc, #268]	; (1b488 <startMotor+0x18c>)
   1b37a:	7fdb      	ldrb	r3, [r3, #31]
   1b37c:	2b00      	cmp	r3, #0
   1b37e:	d113      	bne.n	1b3a8 <startMotor+0xac>
   1b380:	4b45      	ldr	r3, [pc, #276]	; (1b498 <startMotor+0x19c>)
   1b382:	4798      	blx	r3
   1b384:	1e03      	subs	r3, r0, #0
   1b386:	d10f      	bne.n	1b3a8 <startMotor+0xac>
				{
					if (commanded)
   1b388:	1dfb      	adds	r3, r7, #7
   1b38a:	781b      	ldrb	r3, [r3, #0]
   1b38c:	2b00      	cmp	r3, #0
   1b38e:	d003      	beq.n	1b398 <startMotor+0x9c>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1b390:	2054      	movs	r0, #84	; 0x54
   1b392:	4b42      	ldr	r3, [pc, #264]	; (1b49c <startMotor+0x1a0>)
   1b394:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1b396:	e06f      	b.n	1b478 <startMotor+0x17c>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b398:	204e      	movs	r0, #78	; 0x4e
   1b39a:	4b41      	ldr	r3, [pc, #260]	; (1b4a0 <startMotor+0x1a4>)
   1b39c:	4798      	blx	r3
   1b39e:	0003      	movs	r3, r0
   1b3a0:	001a      	movs	r2, r3
   1b3a2:	4b40      	ldr	r3, [pc, #256]	; (1b4a4 <startMotor+0x1a8>)
   1b3a4:	701a      	strb	r2, [r3, #0]
					return;
   1b3a6:	e067      	b.n	1b478 <startMotor+0x17c>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1b3a8:	4b3a      	ldr	r3, [pc, #232]	; (1b494 <startMotor+0x198>)
   1b3aa:	791b      	ldrb	r3, [r3, #4]
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	d018      	beq.n	1b3e2 <startMotor+0xe6>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1b3b0:	4b35      	ldr	r3, [pc, #212]	; (1b488 <startMotor+0x18c>)
   1b3b2:	7fdb      	ldrb	r3, [r3, #31]
   1b3b4:	2b00      	cmp	r3, #0
   1b3b6:	d114      	bne.n	1b3e2 <startMotor+0xe6>
   1b3b8:	4b3b      	ldr	r3, [pc, #236]	; (1b4a8 <startMotor+0x1ac>)
   1b3ba:	4798      	blx	r3
   1b3bc:	0003      	movs	r3, r0
   1b3be:	2b02      	cmp	r3, #2
   1b3c0:	d10f      	bne.n	1b3e2 <startMotor+0xe6>
					{
						if(commanded)
   1b3c2:	1dfb      	adds	r3, r7, #7
   1b3c4:	781b      	ldrb	r3, [r3, #0]
   1b3c6:	2b00      	cmp	r3, #0
   1b3c8:	d003      	beq.n	1b3d2 <startMotor+0xd6>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1b3ca:	2056      	movs	r0, #86	; 0x56
   1b3cc:	4b33      	ldr	r3, [pc, #204]	; (1b49c <startMotor+0x1a0>)
   1b3ce:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1b3d0:	e052      	b.n	1b478 <startMotor+0x17c>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1b3d2:	2056      	movs	r0, #86	; 0x56
   1b3d4:	4b32      	ldr	r3, [pc, #200]	; (1b4a0 <startMotor+0x1a4>)
   1b3d6:	4798      	blx	r3
   1b3d8:	0003      	movs	r3, r0
   1b3da:	001a      	movs	r2, r3
   1b3dc:	4b31      	ldr	r3, [pc, #196]	; (1b4a4 <startMotor+0x1a8>)
   1b3de:	745a      	strb	r2, [r3, #17]
						return;
   1b3e0:	e04a      	b.n	1b478 <startMotor+0x17c>
					}
				}
			}

			STOP_RELAY_ON;
   1b3e2:	2101      	movs	r1, #1
   1b3e4:	202c      	movs	r0, #44	; 0x2c
   1b3e6:	4b31      	ldr	r3, [pc, #196]	; (1b4ac <startMotor+0x1b0>)
   1b3e8:	4798      	blx	r3
			START_RELAY_ON;
   1b3ea:	2101      	movs	r1, #1
   1b3ec:	202d      	movs	r0, #45	; 0x2d
   1b3ee:	4b2f      	ldr	r3, [pc, #188]	; (1b4ac <startMotor+0x1b0>)
   1b3f0:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1b3f2:	4b2f      	ldr	r3, [pc, #188]	; (1b4b0 <startMotor+0x1b4>)
   1b3f4:	2200      	movs	r2, #0
   1b3f6:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1b3f8:	4b2e      	ldr	r3, [pc, #184]	; (1b4b4 <startMotor+0x1b8>)
   1b3fa:	4798      	blx	r3
   1b3fc:	0002      	movs	r2, r0
   1b3fe:	4b2e      	ldr	r3, [pc, #184]	; (1b4b8 <startMotor+0x1bc>)
   1b400:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1b402:	4b2e      	ldr	r3, [pc, #184]	; (1b4bc <startMotor+0x1c0>)
   1b404:	2201      	movs	r2, #1
   1b406:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1b408:	4b1f      	ldr	r3, [pc, #124]	; (1b488 <startMotor+0x18c>)
   1b40a:	2227      	movs	r2, #39	; 0x27
   1b40c:	5c9b      	ldrb	r3, [r3, r2]
   1b40e:	2b01      	cmp	r3, #1
   1b410:	d107      	bne.n	1b422 <startMotor+0x126>
			{
				motorRelatedVoltageBypassOn=true;
   1b412:	4b2b      	ldr	r3, [pc, #172]	; (1b4c0 <startMotor+0x1c4>)
   1b414:	2201      	movs	r2, #1
   1b416:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1b418:	4b26      	ldr	r3, [pc, #152]	; (1b4b4 <startMotor+0x1b8>)
   1b41a:	4798      	blx	r3
   1b41c:	0002      	movs	r2, r0
   1b41e:	4b29      	ldr	r3, [pc, #164]	; (1b4c4 <startMotor+0x1c8>)
   1b420:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1b422:	2001      	movs	r0, #1
   1b424:	4b28      	ldr	r3, [pc, #160]	; (1b4c8 <startMotor+0x1cc>)
   1b426:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b428:	4b1a      	ldr	r3, [pc, #104]	; (1b494 <startMotor+0x198>)
   1b42a:	785b      	ldrb	r3, [r3, #1]
   1b42c:	2b00      	cmp	r3, #0
   1b42e:	d005      	beq.n	1b43c <startMotor+0x140>
			{
				enableCurrentBuffer=false;
   1b430:	4b26      	ldr	r3, [pc, #152]	; (1b4cc <startMotor+0x1d0>)
   1b432:	2200      	movs	r2, #0
   1b434:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1b436:	4b26      	ldr	r3, [pc, #152]	; (1b4d0 <startMotor+0x1d4>)
   1b438:	2200      	movs	r2, #0
   1b43a:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1b43c:	4b25      	ldr	r3, [pc, #148]	; (1b4d4 <startMotor+0x1d8>)
   1b43e:	1dfa      	adds	r2, r7, #7
   1b440:	7812      	ldrb	r2, [r2, #0]
   1b442:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1b444:	e017      	b.n	1b476 <startMotor+0x17a>
		}
		else
		{
			if (commanded)
   1b446:	1dfb      	adds	r3, r7, #7
   1b448:	781b      	ldrb	r3, [r3, #0]
   1b44a:	2b00      	cmp	r3, #0
   1b44c:	d013      	beq.n	1b476 <startMotor+0x17a>
			{
				setMotorMGRResponse('+');		//motor is already on
   1b44e:	202b      	movs	r0, #43	; 0x2b
   1b450:	4b12      	ldr	r3, [pc, #72]	; (1b49c <startMotor+0x1a0>)
   1b452:	4798      	blx	r3
		if (!getMotorState())
   1b454:	e00f      	b.n	1b476 <startMotor+0x17a>
			}
		}
	}
	else
	{
		if (commanded)
   1b456:	1dfb      	adds	r3, r7, #7
   1b458:	781b      	ldrb	r3, [r3, #0]
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	d003      	beq.n	1b466 <startMotor+0x16a>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b45e:	204e      	movs	r0, #78	; 0x4e
   1b460:	4b0e      	ldr	r3, [pc, #56]	; (1b49c <startMotor+0x1a0>)
   1b462:	4798      	blx	r3
   1b464:	e008      	b.n	1b478 <startMotor+0x17c>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b466:	204e      	movs	r0, #78	; 0x4e
   1b468:	4b0d      	ldr	r3, [pc, #52]	; (1b4a0 <startMotor+0x1a4>)
   1b46a:	4798      	blx	r3
   1b46c:	0003      	movs	r3, r0
   1b46e:	001a      	movs	r2, r3
   1b470:	4b0c      	ldr	r3, [pc, #48]	; (1b4a4 <startMotor+0x1a8>)
   1b472:	701a      	strb	r2, [r3, #0]
   1b474:	e000      	b.n	1b478 <startMotor+0x17c>
		if (!getMotorState())
   1b476:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b478:	46bd      	mov	sp, r7
   1b47a:	b002      	add	sp, #8
   1b47c:	bd80      	pop	{r7, pc}
   1b47e:	46c0      	nop			; (mov r8, r8)
   1b480:	20000792 	.word	0x20000792
   1b484:	0001ab99 	.word	0x0001ab99
   1b488:	20000654 	.word	0x20000654
   1b48c:	0001abcd 	.word	0x0001abcd
   1b490:	0001ac01 	.word	0x0001ac01
   1b494:	2000062c 	.word	0x2000062c
   1b498:	0001942d 	.word	0x0001942d
   1b49c:	00014b11 	.word	0x00014b11
   1b4a0:	00014939 	.word	0x00014939
   1b4a4:	2000070c 	.word	0x2000070c
   1b4a8:	000192fd 	.word	0x000192fd
   1b4ac:	00019099 	.word	0x00019099
   1b4b0:	20000860 	.word	0x20000860
   1b4b4:	000202cd 	.word	0x000202cd
   1b4b8:	2000078c 	.word	0x2000078c
   1b4bc:	20000791 	.word	0x20000791
   1b4c0:	2000076b 	.word	0x2000076b
   1b4c4:	2000077c 	.word	0x2000077c
   1b4c8:	0001ac15 	.word	0x0001ac15
   1b4cc:	20000758 	.word	0x20000758
   1b4d0:	20000776 	.word	0x20000776
   1b4d4:	20000708 	.word	0x20000708

0001b4d8 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1b4d8:	b590      	push	{r4, r7, lr}
   1b4da:	b083      	sub	sp, #12
   1b4dc:	af00      	add	r7, sp, #0
   1b4de:	0004      	movs	r4, r0
   1b4e0:	0008      	movs	r0, r1
   1b4e2:	0011      	movs	r1, r2
   1b4e4:	1dfb      	adds	r3, r7, #7
   1b4e6:	1c22      	adds	r2, r4, #0
   1b4e8:	701a      	strb	r2, [r3, #0]
   1b4ea:	1dbb      	adds	r3, r7, #6
   1b4ec:	1c02      	adds	r2, r0, #0
   1b4ee:	701a      	strb	r2, [r3, #0]
   1b4f0:	1d7b      	adds	r3, r7, #5
   1b4f2:	1c0a      	adds	r2, r1, #0
   1b4f4:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1b4f6:	1dbb      	adds	r3, r7, #6
   1b4f8:	781b      	ldrb	r3, [r3, #0]
   1b4fa:	2b00      	cmp	r3, #0
   1b4fc:	d103      	bne.n	1b506 <stopMotor+0x2e>
   1b4fe:	4b21      	ldr	r3, [pc, #132]	; (1b584 <stopMotor+0xac>)
   1b500:	4798      	blx	r3
   1b502:	1e03      	subs	r3, r0, #0
   1b504:	d032      	beq.n	1b56c <stopMotor+0x94>
	{
		singlePhasingTimerOn = false;
   1b506:	4b20      	ldr	r3, [pc, #128]	; (1b588 <stopMotor+0xb0>)
   1b508:	2200      	movs	r2, #0
   1b50a:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1b50c:	4b1f      	ldr	r3, [pc, #124]	; (1b58c <stopMotor+0xb4>)
   1b50e:	2225      	movs	r2, #37	; 0x25
   1b510:	5c9b      	ldrb	r3, [r3, r2]
   1b512:	2b01      	cmp	r3, #1
   1b514:	d105      	bne.n	1b522 <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1b516:	4b1e      	ldr	r3, [pc, #120]	; (1b590 <stopMotor+0xb8>)
   1b518:	8a9b      	ldrh	r3, [r3, #20]
   1b51a:	b29b      	uxth	r3, r3
   1b51c:	b2da      	uxtb	r2, r3
   1b51e:	4b1d      	ldr	r3, [pc, #116]	; (1b594 <stopMotor+0xbc>)
   1b520:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1b522:	4b1d      	ldr	r3, [pc, #116]	; (1b598 <stopMotor+0xc0>)
   1b524:	2200      	movs	r2, #0
   1b526:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1b528:	2100      	movs	r1, #0
   1b52a:	202c      	movs	r0, #44	; 0x2c
   1b52c:	4b1b      	ldr	r3, [pc, #108]	; (1b59c <stopMotor+0xc4>)
   1b52e:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1b530:	4b1b      	ldr	r3, [pc, #108]	; (1b5a0 <stopMotor+0xc8>)
   1b532:	2201      	movs	r2, #1
   1b534:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1b536:	4b1b      	ldr	r3, [pc, #108]	; (1b5a4 <stopMotor+0xcc>)
   1b538:	4798      	blx	r3
   1b53a:	0002      	movs	r2, r0
   1b53c:	4b1a      	ldr	r3, [pc, #104]	; (1b5a8 <stopMotor+0xd0>)
   1b53e:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1b540:	4b1a      	ldr	r3, [pc, #104]	; (1b5ac <stopMotor+0xd4>)
   1b542:	2201      	movs	r2, #1
   1b544:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1b546:	2000      	movs	r0, #0
   1b548:	4b19      	ldr	r3, [pc, #100]	; (1b5b0 <stopMotor+0xd8>)
   1b54a:	4798      	blx	r3
		gotOffCommand = commanded;
   1b54c:	4b19      	ldr	r3, [pc, #100]	; (1b5b4 <stopMotor+0xdc>)
   1b54e:	1dfa      	adds	r2, r7, #7
   1b550:	7812      	ldrb	r2, [r2, #0]
   1b552:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1b554:	4b18      	ldr	r3, [pc, #96]	; (1b5b8 <stopMotor+0xe0>)
   1b556:	1d7a      	adds	r2, r7, #5
   1b558:	7812      	ldrb	r2, [r2, #0]
   1b55a:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b55c:	4b17      	ldr	r3, [pc, #92]	; (1b5bc <stopMotor+0xe4>)
   1b55e:	785b      	ldrb	r3, [r3, #1]
   1b560:	2b00      	cmp	r3, #0
   1b562:	d00b      	beq.n	1b57c <stopMotor+0xa4>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1b564:	4b16      	ldr	r3, [pc, #88]	; (1b5c0 <stopMotor+0xe8>)
   1b566:	2200      	movs	r2, #0
   1b568:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b56a:	e007      	b.n	1b57c <stopMotor+0xa4>
		}
	}
	else
	{
		if (commanded)
   1b56c:	1dfb      	adds	r3, r7, #7
   1b56e:	781b      	ldrb	r3, [r3, #0]
   1b570:	2b00      	cmp	r3, #0
   1b572:	d003      	beq.n	1b57c <stopMotor+0xa4>
		{
			setMotorMGRResponse('-');	//motor is already off
   1b574:	202d      	movs	r0, #45	; 0x2d
   1b576:	4b13      	ldr	r3, [pc, #76]	; (1b5c4 <stopMotor+0xec>)
   1b578:	4798      	blx	r3
		}
	}
}
   1b57a:	e7ff      	b.n	1b57c <stopMotor+0xa4>
   1b57c:	46c0      	nop			; (mov r8, r8)
   1b57e:	46bd      	mov	sp, r7
   1b580:	b003      	add	sp, #12
   1b582:	bd90      	pop	{r4, r7, pc}
   1b584:	0001ac01 	.word	0x0001ac01
   1b588:	20000789 	.word	0x20000789
   1b58c:	20000654 	.word	0x20000654
   1b590:	200006dc 	.word	0x200006dc
   1b594:	200007f4 	.word	0x200007f4
   1b598:	2000076b 	.word	0x2000076b
   1b59c:	00019099 	.word	0x00019099
   1b5a0:	20000860 	.word	0x20000860
   1b5a4:	000202cd 	.word	0x000202cd
   1b5a8:	200007a0 	.word	0x200007a0
   1b5ac:	20000780 	.word	0x20000780
   1b5b0:	0001ac15 	.word	0x0001ac15
   1b5b4:	2000080c 	.word	0x2000080c
   1b5b8:	2000079c 	.word	0x2000079c
   1b5bc:	2000062c 	.word	0x2000062c
   1b5c0:	20000776 	.word	0x20000776
   1b5c4:	00014b11 	.word	0x00014b11

0001b5c8 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1b5c8:	b580      	push	{r7, lr}
   1b5ca:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
   1b5cc:	4b09      	ldr	r3, [pc, #36]	; (1b5f4 <startMotorTimerOver+0x2c>)
   1b5ce:	4798      	blx	r3
   1b5d0:	0002      	movs	r2, r0
   1b5d2:	4b09      	ldr	r3, [pc, #36]	; (1b5f8 <startMotorTimerOver+0x30>)
   1b5d4:	681b      	ldr	r3, [r3, #0]
   1b5d6:	1ad1      	subs	r1, r2, r3
   1b5d8:	4b08      	ldr	r3, [pc, #32]	; (1b5fc <startMotorTimerOver+0x34>)
   1b5da:	885b      	ldrh	r3, [r3, #2]
   1b5dc:	001a      	movs	r2, r3
   1b5de:	23fa      	movs	r3, #250	; 0xfa
   1b5e0:	009b      	lsls	r3, r3, #2
   1b5e2:	435a      	muls	r2, r3
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	4291      	cmp	r1, r2
   1b5e8:	415b      	adcs	r3, r3
   1b5ea:	b2db      	uxtb	r3, r3
}
   1b5ec:	0018      	movs	r0, r3
   1b5ee:	46bd      	mov	sp, r7
   1b5f0:	bd80      	pop	{r7, pc}
   1b5f2:	46c0      	nop			; (mov r8, r8)
   1b5f4:	000202cd 	.word	0x000202cd
   1b5f8:	20000798 	.word	0x20000798
   1b5fc:	20000654 	.word	0x20000654

0001b600 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1b600:	b580      	push	{r7, lr}
   1b602:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1b604:	2200      	movs	r2, #0
   1b606:	2101      	movs	r1, #1
   1b608:	2000      	movs	r0, #0
   1b60a:	4b06      	ldr	r3, [pc, #24]	; (1b624 <unknownMotorOff+0x24>)
   1b60c:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1b60e:	205f      	movs	r0, #95	; 0x5f
   1b610:	4b05      	ldr	r3, [pc, #20]	; (1b628 <unknownMotorOff+0x28>)
   1b612:	4798      	blx	r3
   1b614:	0003      	movs	r3, r0
   1b616:	001a      	movs	r2, r3
   1b618:	4b04      	ldr	r3, [pc, #16]	; (1b62c <unknownMotorOff+0x2c>)
   1b61a:	709a      	strb	r2, [r3, #2]
}
   1b61c:	46c0      	nop			; (mov r8, r8)
   1b61e:	46bd      	mov	sp, r7
   1b620:	bd80      	pop	{r7, pc}
   1b622:	46c0      	nop			; (mov r8, r8)
   1b624:	0001b4d9 	.word	0x0001b4d9
   1b628:	00014939 	.word	0x00014939
   1b62c:	2000070c 	.word	0x2000070c

0001b630 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1b630:	b580      	push	{r7, lr}
   1b632:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
   1b634:	4b0d      	ldr	r3, [pc, #52]	; (1b66c <singlePhasingTimerOver+0x3c>)
   1b636:	781b      	ldrb	r3, [r3, #0]
   1b638:	2b00      	cmp	r3, #0
   1b63a:	d00e      	beq.n	1b65a <singlePhasingTimerOver+0x2a>
   1b63c:	4b0c      	ldr	r3, [pc, #48]	; (1b670 <singlePhasingTimerOver+0x40>)
   1b63e:	4798      	blx	r3
   1b640:	0002      	movs	r2, r0
   1b642:	4b0c      	ldr	r3, [pc, #48]	; (1b674 <singlePhasingTimerOver+0x44>)
   1b644:	681b      	ldr	r3, [r3, #0]
   1b646:	1ad2      	subs	r2, r2, r3
   1b648:	4b0b      	ldr	r3, [pc, #44]	; (1b678 <singlePhasingTimerOver+0x48>)
   1b64a:	781b      	ldrb	r3, [r3, #0]
   1b64c:	0019      	movs	r1, r3
   1b64e:	2364      	movs	r3, #100	; 0x64
   1b650:	434b      	muls	r3, r1
   1b652:	429a      	cmp	r2, r3
   1b654:	d901      	bls.n	1b65a <singlePhasingTimerOver+0x2a>
   1b656:	2301      	movs	r3, #1
   1b658:	e000      	b.n	1b65c <singlePhasingTimerOver+0x2c>
   1b65a:	2300      	movs	r3, #0
   1b65c:	1c1a      	adds	r2, r3, #0
   1b65e:	2301      	movs	r3, #1
   1b660:	4013      	ands	r3, r2
   1b662:	b2db      	uxtb	r3, r3
}
   1b664:	0018      	movs	r0, r3
   1b666:	46bd      	mov	sp, r7
   1b668:	bd80      	pop	{r7, pc}
   1b66a:	46c0      	nop			; (mov r8, r8)
   1b66c:	20000789 	.word	0x20000789
   1b670:	000202cd 	.word	0x000202cd
   1b674:	20000770 	.word	0x20000770
   1b678:	20000768 	.word	0x20000768

0001b67c <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1b67c:	b580      	push	{r7, lr}
   1b67e:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1b680:	2101      	movs	r1, #1
   1b682:	2027      	movs	r0, #39	; 0x27
   1b684:	4b08      	ldr	r3, [pc, #32]	; (1b6a8 <operateOnSinglePhasing+0x2c>)
   1b686:	4798      	blx	r3
	stopMotor(false,true,false);
   1b688:	2200      	movs	r2, #0
   1b68a:	2101      	movs	r1, #1
   1b68c:	2000      	movs	r0, #0
   1b68e:	4b07      	ldr	r3, [pc, #28]	; (1b6ac <operateOnSinglePhasing+0x30>)
   1b690:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1b692:	2046      	movs	r0, #70	; 0x46
   1b694:	4b06      	ldr	r3, [pc, #24]	; (1b6b0 <operateOnSinglePhasing+0x34>)
   1b696:	4798      	blx	r3
   1b698:	0003      	movs	r3, r0
   1b69a:	001a      	movs	r2, r3
   1b69c:	4b05      	ldr	r3, [pc, #20]	; (1b6b4 <operateOnSinglePhasing+0x38>)
   1b69e:	70da      	strb	r2, [r3, #3]
}
   1b6a0:	46c0      	nop			; (mov r8, r8)
   1b6a2:	46bd      	mov	sp, r7
   1b6a4:	bd80      	pop	{r7, pc}
   1b6a6:	46c0      	nop			; (mov r8, r8)
   1b6a8:	00019099 	.word	0x00019099
   1b6ac:	0001b4d9 	.word	0x0001b4d9
   1b6b0:	00014939 	.word	0x00014939
   1b6b4:	2000070c 	.word	0x2000070c

0001b6b8 <terminateStopRelay>:

void terminateStopRelay(void)
{
   1b6b8:	b580      	push	{r7, lr}
   1b6ba:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1b6bc:	4b28      	ldr	r3, [pc, #160]	; (1b760 <terminateStopRelay+0xa8>)
   1b6be:	781b      	ldrb	r3, [r3, #0]
   1b6c0:	2b00      	cmp	r3, #0
   1b6c2:	d04a      	beq.n	1b75a <terminateStopRelay+0xa2>
   1b6c4:	4b27      	ldr	r3, [pc, #156]	; (1b764 <terminateStopRelay+0xac>)
   1b6c6:	4798      	blx	r3
   1b6c8:	0002      	movs	r2, r0
   1b6ca:	4b27      	ldr	r3, [pc, #156]	; (1b768 <terminateStopRelay+0xb0>)
   1b6cc:	681b      	ldr	r3, [r3, #0]
   1b6ce:	1ad3      	subs	r3, r2, r3
   1b6d0:	4a26      	ldr	r2, [pc, #152]	; (1b76c <terminateStopRelay+0xb4>)
   1b6d2:	7812      	ldrb	r2, [r2, #0]
   1b6d4:	0011      	movs	r1, r2
   1b6d6:	2264      	movs	r2, #100	; 0x64
   1b6d8:	434a      	muls	r2, r1
   1b6da:	4293      	cmp	r3, r2
   1b6dc:	d93d      	bls.n	1b75a <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1b6de:	4b20      	ldr	r3, [pc, #128]	; (1b760 <terminateStopRelay+0xa8>)
   1b6e0:	2200      	movs	r2, #0
   1b6e2:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1b6e4:	4b22      	ldr	r3, [pc, #136]	; (1b770 <terminateStopRelay+0xb8>)
   1b6e6:	2201      	movs	r2, #1
   1b6e8:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1b6ea:	4b22      	ldr	r3, [pc, #136]	; (1b774 <terminateStopRelay+0xbc>)
   1b6ec:	4798      	blx	r3
   1b6ee:	0003      	movs	r3, r0
   1b6f0:	001a      	movs	r2, r3
   1b6f2:	2301      	movs	r3, #1
   1b6f4:	4053      	eors	r3, r2
   1b6f6:	b2db      	uxtb	r3, r3
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	d019      	beq.n	1b730 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1b6fc:	4b1e      	ldr	r3, [pc, #120]	; (1b778 <terminateStopRelay+0xc0>)
   1b6fe:	781b      	ldrb	r3, [r3, #0]
   1b700:	2b00      	cmp	r3, #0
   1b702:	d006      	beq.n	1b712 <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1b704:	4b1c      	ldr	r3, [pc, #112]	; (1b778 <terminateStopRelay+0xc0>)
   1b706:	2200      	movs	r2, #0
   1b708:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1b70a:	204f      	movs	r0, #79	; 0x4f
   1b70c:	4b1b      	ldr	r3, [pc, #108]	; (1b77c <terminateStopRelay+0xc4>)
   1b70e:	4798      	blx	r3
   1b710:	e020      	b.n	1b754 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1b712:	4b1b      	ldr	r3, [pc, #108]	; (1b780 <terminateStopRelay+0xc8>)
   1b714:	781b      	ldrb	r3, [r3, #0]
   1b716:	2b00      	cmp	r3, #0
   1b718:	d01c      	beq.n	1b754 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1b71a:	4b19      	ldr	r3, [pc, #100]	; (1b780 <terminateStopRelay+0xc8>)
   1b71c:	2200      	movs	r2, #0
   1b71e:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1b720:	204f      	movs	r0, #79	; 0x4f
   1b722:	4b18      	ldr	r3, [pc, #96]	; (1b784 <terminateStopRelay+0xcc>)
   1b724:	4798      	blx	r3
   1b726:	0003      	movs	r3, r0
   1b728:	001a      	movs	r2, r3
   1b72a:	4b17      	ldr	r3, [pc, #92]	; (1b788 <terminateStopRelay+0xd0>)
   1b72c:	721a      	strb	r2, [r3, #8]
   1b72e:	e011      	b.n	1b754 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1b730:	4b11      	ldr	r3, [pc, #68]	; (1b778 <terminateStopRelay+0xc0>)
   1b732:	781b      	ldrb	r3, [r3, #0]
   1b734:	2b00      	cmp	r3, #0
   1b736:	d006      	beq.n	1b746 <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1b738:	4b0f      	ldr	r3, [pc, #60]	; (1b778 <terminateStopRelay+0xc0>)
   1b73a:	2200      	movs	r2, #0
   1b73c:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1b73e:	2050      	movs	r0, #80	; 0x50
   1b740:	4b0e      	ldr	r3, [pc, #56]	; (1b77c <terminateStopRelay+0xc4>)
   1b742:	4798      	blx	r3
   1b744:	e006      	b.n	1b754 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1b746:	2050      	movs	r0, #80	; 0x50
   1b748:	4b0e      	ldr	r3, [pc, #56]	; (1b784 <terminateStopRelay+0xcc>)
   1b74a:	4798      	blx	r3
   1b74c:	0003      	movs	r3, r0
   1b74e:	001a      	movs	r2, r3
   1b750:	4b0d      	ldr	r3, [pc, #52]	; (1b788 <terminateStopRelay+0xd0>)
   1b752:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1b754:	4b0a      	ldr	r3, [pc, #40]	; (1b780 <terminateStopRelay+0xc8>)
   1b756:	2200      	movs	r2, #0
   1b758:	701a      	strb	r2, [r3, #0]
	}
}
   1b75a:	46c0      	nop			; (mov r8, r8)
   1b75c:	46bd      	mov	sp, r7
   1b75e:	bd80      	pop	{r7, pc}
   1b760:	20000780 	.word	0x20000780
   1b764:	000202cd 	.word	0x000202cd
   1b768:	200007a0 	.word	0x200007a0
   1b76c:	20000862 	.word	0x20000862
   1b770:	20000860 	.word	0x20000860
   1b774:	0001ac55 	.word	0x0001ac55
   1b778:	2000080c 	.word	0x2000080c
   1b77c:	00014b11 	.word	0x00014b11
   1b780:	2000079c 	.word	0x2000079c
   1b784:	00014939 	.word	0x00014939
   1b788:	2000070c 	.word	0x2000070c

0001b78c <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1b78c:	b580      	push	{r7, lr}
   1b78e:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1b790:	4b13      	ldr	r3, [pc, #76]	; (1b7e0 <terminateStarDeltaTimer+0x54>)
   1b792:	781b      	ldrb	r3, [r3, #0]
   1b794:	2b00      	cmp	r3, #0
   1b796:	d020      	beq.n	1b7da <terminateStarDeltaTimer+0x4e>
   1b798:	4b12      	ldr	r3, [pc, #72]	; (1b7e4 <terminateStarDeltaTimer+0x58>)
   1b79a:	4798      	blx	r3
   1b79c:	0002      	movs	r2, r0
   1b79e:	4b12      	ldr	r3, [pc, #72]	; (1b7e8 <terminateStarDeltaTimer+0x5c>)
   1b7a0:	681b      	ldr	r3, [r3, #0]
   1b7a2:	1ad2      	subs	r2, r2, r3
   1b7a4:	4b11      	ldr	r3, [pc, #68]	; (1b7ec <terminateStarDeltaTimer+0x60>)
   1b7a6:	88db      	ldrh	r3, [r3, #6]
   1b7a8:	0019      	movs	r1, r3
   1b7aa:	23fa      	movs	r3, #250	; 0xfa
   1b7ac:	009b      	lsls	r3, r3, #2
   1b7ae:	434b      	muls	r3, r1
   1b7b0:	429a      	cmp	r2, r3
   1b7b2:	d912      	bls.n	1b7da <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
   1b7b4:	2100      	movs	r1, #0
   1b7b6:	202d      	movs	r0, #45	; 0x2d
   1b7b8:	4b0d      	ldr	r3, [pc, #52]	; (1b7f0 <terminateStarDeltaTimer+0x64>)
   1b7ba:	4798      	blx	r3
		starDeltaTimerOn=false;
   1b7bc:	4b08      	ldr	r3, [pc, #32]	; (1b7e0 <terminateStarDeltaTimer+0x54>)
   1b7be:	2200      	movs	r2, #0
   1b7c0:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b7c2:	4b0c      	ldr	r3, [pc, #48]	; (1b7f4 <terminateStarDeltaTimer+0x68>)
   1b7c4:	785b      	ldrb	r3, [r3, #1]
   1b7c6:	2b00      	cmp	r3, #0
   1b7c8:	d007      	beq.n	1b7da <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
   1b7ca:	4b0b      	ldr	r3, [pc, #44]	; (1b7f8 <terminateStarDeltaTimer+0x6c>)
   1b7cc:	2201      	movs	r2, #1
   1b7ce:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1b7d0:	4b04      	ldr	r3, [pc, #16]	; (1b7e4 <terminateStarDeltaTimer+0x58>)
   1b7d2:	4798      	blx	r3
   1b7d4:	0002      	movs	r2, r0
   1b7d6:	4b04      	ldr	r3, [pc, #16]	; (1b7e8 <terminateStarDeltaTimer+0x5c>)
   1b7d8:	601a      	str	r2, [r3, #0]
		}
	}
}
   1b7da:	46c0      	nop			; (mov r8, r8)
   1b7dc:	46bd      	mov	sp, r7
   1b7de:	bd80      	pop	{r7, pc}
   1b7e0:	20000793 	.word	0x20000793
   1b7e4:	000202cd 	.word	0x000202cd
   1b7e8:	2000078c 	.word	0x2000078c
   1b7ec:	20000654 	.word	0x20000654
   1b7f0:	00019099 	.word	0x00019099
   1b7f4:	2000062c 	.word	0x2000062c
   1b7f8:	20000758 	.word	0x20000758

0001b7fc <terminateStartRelay>:

void terminateStartRelay(void)
{
   1b7fc:	b590      	push	{r4, r7, lr}
   1b7fe:	b083      	sub	sp, #12
   1b800:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1b802:	4b36      	ldr	r3, [pc, #216]	; (1b8dc <terminateStartRelay+0xe0>)
   1b804:	781b      	ldrb	r3, [r3, #0]
   1b806:	2b00      	cmp	r3, #0
   1b808:	d064      	beq.n	1b8d4 <terminateStartRelay+0xd8>
   1b80a:	4b35      	ldr	r3, [pc, #212]	; (1b8e0 <terminateStartRelay+0xe4>)
   1b80c:	4798      	blx	r3
   1b80e:	0002      	movs	r2, r0
   1b810:	4b34      	ldr	r3, [pc, #208]	; (1b8e4 <terminateStartRelay+0xe8>)
   1b812:	681b      	ldr	r3, [r3, #0]
   1b814:	1ad3      	subs	r3, r2, r3
   1b816:	4a34      	ldr	r2, [pc, #208]	; (1b8e8 <terminateStartRelay+0xec>)
   1b818:	7812      	ldrb	r2, [r2, #0]
   1b81a:	0011      	movs	r1, r2
   1b81c:	2264      	movs	r2, #100	; 0x64
   1b81e:	434a      	muls	r2, r1
   1b820:	4293      	cmp	r3, r2
   1b822:	d957      	bls.n	1b8d4 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
   1b824:	4b31      	ldr	r3, [pc, #196]	; (1b8ec <terminateStartRelay+0xf0>)
   1b826:	88db      	ldrh	r3, [r3, #6]
   1b828:	001a      	movs	r2, r3
   1b82a:	0013      	movs	r3, r2
   1b82c:	009b      	lsls	r3, r3, #2
   1b82e:	189b      	adds	r3, r3, r2
   1b830:	005b      	lsls	r3, r3, #1
   1b832:	001a      	movs	r2, r3
   1b834:	4b2c      	ldr	r3, [pc, #176]	; (1b8e8 <terminateStartRelay+0xec>)
   1b836:	781b      	ldrb	r3, [r3, #0]
   1b838:	429a      	cmp	r2, r3
   1b83a:	d810      	bhi.n	1b85e <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
   1b83c:	2100      	movs	r1, #0
   1b83e:	202d      	movs	r0, #45	; 0x2d
   1b840:	4b2b      	ldr	r3, [pc, #172]	; (1b8f0 <terminateStartRelay+0xf4>)
   1b842:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1b844:	4b26      	ldr	r3, [pc, #152]	; (1b8e0 <terminateStartRelay+0xe4>)
   1b846:	4798      	blx	r3
   1b848:	0002      	movs	r2, r0
   1b84a:	4b26      	ldr	r3, [pc, #152]	; (1b8e4 <terminateStartRelay+0xe8>)
   1b84c:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1b84e:	4b29      	ldr	r3, [pc, #164]	; (1b8f4 <terminateStartRelay+0xf8>)
   1b850:	785b      	ldrb	r3, [r3, #1]
   1b852:	2b00      	cmp	r3, #0
   1b854:	d006      	beq.n	1b864 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
   1b856:	4b28      	ldr	r3, [pc, #160]	; (1b8f8 <terminateStartRelay+0xfc>)
   1b858:	2201      	movs	r2, #1
   1b85a:	701a      	strb	r2, [r3, #0]
   1b85c:	e002      	b.n	1b864 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1b85e:	4b27      	ldr	r3, [pc, #156]	; (1b8fc <terminateStartRelay+0x100>)
   1b860:	2201      	movs	r2, #1
   1b862:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1b864:	4b1d      	ldr	r3, [pc, #116]	; (1b8dc <terminateStartRelay+0xe0>)
   1b866:	2200      	movs	r2, #0
   1b868:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1b86a:	1dfc      	adds	r4, r7, #7
   1b86c:	4b24      	ldr	r3, [pc, #144]	; (1b900 <terminateStartRelay+0x104>)
   1b86e:	4798      	blx	r3
   1b870:	0003      	movs	r3, r0
   1b872:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1b874:	4b23      	ldr	r3, [pc, #140]	; (1b904 <terminateStartRelay+0x108>)
   1b876:	781b      	ldrb	r3, [r3, #0]
   1b878:	2b00      	cmp	r3, #0
   1b87a:	d013      	beq.n	1b8a4 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
   1b87c:	4b21      	ldr	r3, [pc, #132]	; (1b904 <terminateStartRelay+0x108>)
   1b87e:	2200      	movs	r2, #0
   1b880:	701a      	strb	r2, [r3, #0]
			if (motor)
   1b882:	1dfb      	adds	r3, r7, #7
   1b884:	781b      	ldrb	r3, [r3, #0]
   1b886:	2b00      	cmp	r3, #0
   1b888:	d003      	beq.n	1b892 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
   1b88a:	2053      	movs	r0, #83	; 0x53
   1b88c:	4b1e      	ldr	r3, [pc, #120]	; (1b908 <terminateStartRelay+0x10c>)
   1b88e:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1b890:	e020      	b.n	1b8d4 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
   1b892:	2200      	movs	r2, #0
   1b894:	2101      	movs	r1, #1
   1b896:	2000      	movs	r0, #0
   1b898:	4b1c      	ldr	r3, [pc, #112]	; (1b90c <terminateStartRelay+0x110>)
   1b89a:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1b89c:	204e      	movs	r0, #78	; 0x4e
   1b89e:	4b1a      	ldr	r3, [pc, #104]	; (1b908 <terminateStartRelay+0x10c>)
   1b8a0:	4798      	blx	r3
}
   1b8a2:	e017      	b.n	1b8d4 <terminateStartRelay+0xd8>
			if (motor)
   1b8a4:	1dfb      	adds	r3, r7, #7
   1b8a6:	781b      	ldrb	r3, [r3, #0]
   1b8a8:	2b00      	cmp	r3, #0
   1b8aa:	d007      	beq.n	1b8bc <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1b8ac:	2053      	movs	r0, #83	; 0x53
   1b8ae:	4b18      	ldr	r3, [pc, #96]	; (1b910 <terminateStartRelay+0x114>)
   1b8b0:	4798      	blx	r3
   1b8b2:	0003      	movs	r3, r0
   1b8b4:	001a      	movs	r2, r3
   1b8b6:	4b17      	ldr	r3, [pc, #92]	; (1b914 <terminateStartRelay+0x118>)
   1b8b8:	71da      	strb	r2, [r3, #7]
}
   1b8ba:	e00b      	b.n	1b8d4 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
   1b8bc:	2200      	movs	r2, #0
   1b8be:	2101      	movs	r1, #1
   1b8c0:	2000      	movs	r0, #0
   1b8c2:	4b12      	ldr	r3, [pc, #72]	; (1b90c <terminateStartRelay+0x110>)
   1b8c4:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1b8c6:	204e      	movs	r0, #78	; 0x4e
   1b8c8:	4b11      	ldr	r3, [pc, #68]	; (1b910 <terminateStartRelay+0x114>)
   1b8ca:	4798      	blx	r3
   1b8cc:	0003      	movs	r3, r0
   1b8ce:	001a      	movs	r2, r3
   1b8d0:	4b10      	ldr	r3, [pc, #64]	; (1b914 <terminateStartRelay+0x118>)
   1b8d2:	701a      	strb	r2, [r3, #0]
}
   1b8d4:	46c0      	nop			; (mov r8, r8)
   1b8d6:	46bd      	mov	sp, r7
   1b8d8:	b003      	add	sp, #12
   1b8da:	bd90      	pop	{r4, r7, pc}
   1b8dc:	20000791 	.word	0x20000791
   1b8e0:	000202cd 	.word	0x000202cd
   1b8e4:	2000078c 	.word	0x2000078c
   1b8e8:	20000818 	.word	0x20000818
   1b8ec:	20000654 	.word	0x20000654
   1b8f0:	00019099 	.word	0x00019099
   1b8f4:	2000062c 	.word	0x2000062c
   1b8f8:	20000758 	.word	0x20000758
   1b8fc:	20000793 	.word	0x20000793
   1b900:	0001ac55 	.word	0x0001ac55
   1b904:	20000708 	.word	0x20000708
   1b908:	00014b11 	.word	0x00014b11
   1b90c:	0001b4d9 	.word	0x0001b4d9
   1b910:	00014939 	.word	0x00014939
   1b914:	2000070c 	.word	0x2000070c

0001b918 <statusOnCall>:

void statusOnCall(void)
{
   1b918:	b590      	push	{r4, r7, lr}
   1b91a:	b083      	sub	sp, #12
   1b91c:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1b91e:	1dfb      	adds	r3, r7, #7
   1b920:	2200      	movs	r2, #0
   1b922:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1b924:	1dbc      	adds	r4, r7, #6
   1b926:	4b3b      	ldr	r3, [pc, #236]	; (1ba14 <statusOnCall+0xfc>)
   1b928:	4798      	blx	r3
   1b92a:	0003      	movs	r3, r0
   1b92c:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1b92e:	1dbb      	adds	r3, r7, #6
   1b930:	781b      	ldrb	r3, [r3, #0]
   1b932:	2b00      	cmp	r3, #0
   1b934:	d109      	bne.n	1b94a <statusOnCall+0x32>
	{
		status[index++]='L';
   1b936:	1dfb      	adds	r3, r7, #7
   1b938:	781b      	ldrb	r3, [r3, #0]
   1b93a:	1dfa      	adds	r2, r7, #7
   1b93c:	1c59      	adds	r1, r3, #1
   1b93e:	7011      	strb	r1, [r2, #0]
   1b940:	001a      	movs	r2, r3
   1b942:	003b      	movs	r3, r7
   1b944:	214c      	movs	r1, #76	; 0x4c
   1b946:	5499      	strb	r1, [r3, r2]
   1b948:	e03b      	b.n	1b9c2 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1b94a:	1dbb      	adds	r3, r7, #6
   1b94c:	781b      	ldrb	r3, [r3, #0]
   1b94e:	2b02      	cmp	r3, #2
   1b950:	d109      	bne.n	1b966 <statusOnCall+0x4e>
	{
		status[index++]='A';
   1b952:	1dfb      	adds	r3, r7, #7
   1b954:	781b      	ldrb	r3, [r3, #0]
   1b956:	1dfa      	adds	r2, r7, #7
   1b958:	1c59      	adds	r1, r3, #1
   1b95a:	7011      	strb	r1, [r2, #0]
   1b95c:	001a      	movs	r2, r3
   1b95e:	003b      	movs	r3, r7
   1b960:	2141      	movs	r1, #65	; 0x41
   1b962:	5499      	strb	r1, [r3, r2]
   1b964:	e02d      	b.n	1b9c2 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1b966:	1dbb      	adds	r3, r7, #6
   1b968:	781b      	ldrb	r3, [r3, #0]
   1b96a:	2b03      	cmp	r3, #3
   1b96c:	d129      	bne.n	1b9c2 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1b96e:	1d7c      	adds	r4, r7, #5
   1b970:	4b29      	ldr	r3, [pc, #164]	; (1ba18 <statusOnCall+0x100>)
   1b972:	4798      	blx	r3
   1b974:	0003      	movs	r3, r0
   1b976:	7023      	strb	r3, [r4, #0]
		if (temp)
   1b978:	1d7b      	adds	r3, r7, #5
   1b97a:	781b      	ldrb	r3, [r3, #0]
   1b97c:	2b00      	cmp	r3, #0
   1b97e:	d009      	beq.n	1b994 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1b980:	1dfb      	adds	r3, r7, #7
   1b982:	781b      	ldrb	r3, [r3, #0]
   1b984:	1dfa      	adds	r2, r7, #7
   1b986:	1c59      	adds	r1, r3, #1
   1b988:	7011      	strb	r1, [r2, #0]
   1b98a:	001a      	movs	r2, r3
   1b98c:	003b      	movs	r3, r7
   1b98e:	212b      	movs	r1, #43	; 0x2b
   1b990:	5499      	strb	r1, [r3, r2]
   1b992:	e016      	b.n	1b9c2 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1b994:	1dfb      	adds	r3, r7, #7
   1b996:	781b      	ldrb	r3, [r3, #0]
   1b998:	1dfa      	adds	r2, r7, #7
   1b99a:	1c59      	adds	r1, r3, #1
   1b99c:	7011      	strb	r1, [r2, #0]
   1b99e:	001a      	movs	r2, r3
   1b9a0:	003b      	movs	r3, r7
   1b9a2:	215f      	movs	r1, #95	; 0x5f
   1b9a4:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1b9a6:	4b1d      	ldr	r3, [pc, #116]	; (1ba1c <statusOnCall+0x104>)
   1b9a8:	781b      	ldrb	r3, [r3, #0]
   1b9aa:	b2db      	uxtb	r3, r3
   1b9ac:	2b02      	cmp	r3, #2
   1b9ae:	d008      	beq.n	1b9c2 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1b9b0:	1dfb      	adds	r3, r7, #7
   1b9b2:	781b      	ldrb	r3, [r3, #0]
   1b9b4:	1dfa      	adds	r2, r7, #7
   1b9b6:	1c59      	adds	r1, r3, #1
   1b9b8:	7011      	strb	r1, [r2, #0]
   1b9ba:	001a      	movs	r2, r3
   1b9bc:	003b      	movs	r3, r7
   1b9be:	2141      	movs	r1, #65	; 0x41
   1b9c0:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1b9c2:	4b17      	ldr	r3, [pc, #92]	; (1ba20 <statusOnCall+0x108>)
   1b9c4:	785b      	ldrb	r3, [r3, #1]
   1b9c6:	2b00      	cmp	r3, #0
   1b9c8:	d009      	beq.n	1b9de <statusOnCall+0xc6>
	{
		status[index++]=')';
   1b9ca:	1dfb      	adds	r3, r7, #7
   1b9cc:	781b      	ldrb	r3, [r3, #0]
   1b9ce:	1dfa      	adds	r2, r7, #7
   1b9d0:	1c59      	adds	r1, r3, #1
   1b9d2:	7011      	strb	r1, [r2, #0]
   1b9d4:	001a      	movs	r2, r3
   1b9d6:	003b      	movs	r3, r7
   1b9d8:	2129      	movs	r1, #41	; 0x29
   1b9da:	5499      	strb	r1, [r3, r2]
   1b9dc:	e008      	b.n	1b9f0 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
   1b9de:	1dfb      	adds	r3, r7, #7
   1b9e0:	781b      	ldrb	r3, [r3, #0]
   1b9e2:	1dfa      	adds	r2, r7, #7
   1b9e4:	1c59      	adds	r1, r3, #1
   1b9e6:	7011      	strb	r1, [r2, #0]
   1b9e8:	001a      	movs	r2, r3
   1b9ea:	003b      	movs	r3, r7
   1b9ec:	215b      	movs	r1, #91	; 0x5b
   1b9ee:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1b9f0:	1dfb      	adds	r3, r7, #7
   1b9f2:	781b      	ldrb	r3, [r3, #0]
   1b9f4:	1dfa      	adds	r2, r7, #7
   1b9f6:	1c59      	adds	r1, r3, #1
   1b9f8:	7011      	strb	r1, [r2, #0]
   1b9fa:	001a      	movs	r2, r3
   1b9fc:	003b      	movs	r3, r7
   1b9fe:	2100      	movs	r1, #0
   1ba00:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1ba02:	003b      	movs	r3, r7
   1ba04:	0018      	movs	r0, r3
   1ba06:	4b07      	ldr	r3, [pc, #28]	; (1ba24 <statusOnCall+0x10c>)
   1ba08:	4798      	blx	r3
}
   1ba0a:	46c0      	nop			; (mov r8, r8)
   1ba0c:	46bd      	mov	sp, r7
   1ba0e:	b003      	add	sp, #12
   1ba10:	bd90      	pop	{r4, r7, pc}
   1ba12:	46c0      	nop			; (mov r8, r8)
   1ba14:	0001b16d 	.word	0x0001b16d
   1ba18:	0001ac55 	.word	0x0001ac55
   1ba1c:	20000740 	.word	0x20000740
   1ba20:	20000654 	.word	0x20000654
   1ba24:	00014805 	.word	0x00014805

0001ba28 <voltageOnCall>:

void voltageOnCall(void)
{
   1ba28:	b590      	push	{r4, r7, lr}
   1ba2a:	b087      	sub	sp, #28
   1ba2c:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1ba2e:	4b0a      	ldr	r3, [pc, #40]	; (1ba58 <voltageOnCall+0x30>)
   1ba30:	681a      	ldr	r2, [r3, #0]
   1ba32:	4b09      	ldr	r3, [pc, #36]	; (1ba58 <voltageOnCall+0x30>)
   1ba34:	685c      	ldr	r4, [r3, #4]
   1ba36:	4b08      	ldr	r3, [pc, #32]	; (1ba58 <voltageOnCall+0x30>)
   1ba38:	689b      	ldr	r3, [r3, #8]
   1ba3a:	4908      	ldr	r1, [pc, #32]	; (1ba5c <voltageOnCall+0x34>)
   1ba3c:	0038      	movs	r0, r7
   1ba3e:	9300      	str	r3, [sp, #0]
   1ba40:	0023      	movs	r3, r4
   1ba42:	4c07      	ldr	r4, [pc, #28]	; (1ba60 <voltageOnCall+0x38>)
   1ba44:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1ba46:	003b      	movs	r3, r7
   1ba48:	0018      	movs	r0, r3
   1ba4a:	4b06      	ldr	r3, [pc, #24]	; (1ba64 <voltageOnCall+0x3c>)
   1ba4c:	4798      	blx	r3
}
   1ba4e:	46c0      	nop			; (mov r8, r8)
   1ba50:	46bd      	mov	sp, r7
   1ba52:	b005      	add	sp, #20
   1ba54:	bd90      	pop	{r4, r7, pc}
   1ba56:	46c0      	nop			; (mov r8, r8)
   1ba58:	200006dc 	.word	0x200006dc
   1ba5c:	0002aa00 	.word	0x0002aa00
   1ba60:	00029099 	.word	0x00029099
   1ba64:	00014805 	.word	0x00014805

0001ba68 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1ba68:	b580      	push	{r7, lr}
   1ba6a:	b082      	sub	sp, #8
   1ba6c:	af00      	add	r7, sp, #0
   1ba6e:	0002      	movs	r2, r0
   1ba70:	1dfb      	adds	r3, r7, #7
   1ba72:	701a      	strb	r2, [r3, #0]
   1ba74:	1dbb      	adds	r3, r7, #6
   1ba76:	1c0a      	adds	r2, r1, #0
   1ba78:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1ba7a:	1dfb      	adds	r3, r7, #7
   1ba7c:	781b      	ldrb	r3, [r3, #0]
   1ba7e:	4a0e      	ldr	r2, [pc, #56]	; (1bab8 <setM2MEventState+0x50>)
   1ba80:	5cd3      	ldrb	r3, [r2, r3]
   1ba82:	2b02      	cmp	r3, #2
   1ba84:	d10e      	bne.n	1baa4 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1ba86:	1dbb      	adds	r3, r7, #6
   1ba88:	781b      	ldrb	r3, [r3, #0]
   1ba8a:	2b03      	cmp	r3, #3
   1ba8c:	d10a      	bne.n	1baa4 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1ba8e:	1dbb      	adds	r3, r7, #6
   1ba90:	2200      	movs	r2, #0
   1ba92:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1ba94:	1dfb      	adds	r3, r7, #7
   1ba96:	781b      	ldrb	r3, [r3, #0]
   1ba98:	4a08      	ldr	r2, [pc, #32]	; (1babc <setM2MEventState+0x54>)
   1ba9a:	5cd3      	ldrb	r3, [r2, r3]
   1ba9c:	001a      	movs	r2, r3
   1ba9e:	4b08      	ldr	r3, [pc, #32]	; (1bac0 <setM2MEventState+0x58>)
   1baa0:	2100      	movs	r1, #0
   1baa2:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1baa4:	1dfb      	adds	r3, r7, #7
   1baa6:	781b      	ldrb	r3, [r3, #0]
   1baa8:	4a03      	ldr	r2, [pc, #12]	; (1bab8 <setM2MEventState+0x50>)
   1baaa:	1db9      	adds	r1, r7, #6
   1baac:	7809      	ldrb	r1, [r1, #0]
   1baae:	54d1      	strb	r1, [r2, r3]
}
   1bab0:	46c0      	nop			; (mov r8, r8)
   1bab2:	46bd      	mov	sp, r7
   1bab4:	b002      	add	sp, #8
   1bab6:	bd80      	pop	{r7, pc}
   1bab8:	200007bc 	.word	0x200007bc
   1babc:	20000738 	.word	0x20000738
   1bac0:	2000070c 	.word	0x2000070c

0001bac4 <M2MEventManager>:

void M2MEventManager(void)
{
   1bac4:	b580      	push	{r7, lr}
   1bac6:	b082      	sub	sp, #8
   1bac8:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1baca:	1dfb      	adds	r3, r7, #7
   1bacc:	2202      	movs	r2, #2
   1bace:	701a      	strb	r2, [r3, #0]
	while(j--)
   1bad0:	e00a      	b.n	1bae8 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1bad2:	1dfb      	adds	r3, r7, #7
   1bad4:	781b      	ldrb	r3, [r3, #0]
   1bad6:	4a0a      	ldr	r2, [pc, #40]	; (1bb00 <M2MEventManager+0x3c>)
   1bad8:	5cd3      	ldrb	r3, [r2, r3]
   1bada:	2b01      	cmp	r3, #1
   1badc:	d104      	bne.n	1bae8 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1bade:	1dfb      	adds	r3, r7, #7
   1bae0:	781b      	ldrb	r3, [r3, #0]
   1bae2:	0018      	movs	r0, r3
   1bae4:	4b07      	ldr	r3, [pc, #28]	; (1bb04 <M2MEventManager+0x40>)
   1bae6:	4798      	blx	r3
	while(j--)
   1bae8:	1dfb      	adds	r3, r7, #7
   1baea:	781b      	ldrb	r3, [r3, #0]
   1baec:	1dfa      	adds	r2, r7, #7
   1baee:	1e59      	subs	r1, r3, #1
   1baf0:	7011      	strb	r1, [r2, #0]
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d1ed      	bne.n	1bad2 <M2MEventManager+0xe>
		}
	}
}
   1baf6:	46c0      	nop			; (mov r8, r8)
   1baf8:	46bd      	mov	sp, r7
   1bafa:	b002      	add	sp, #8
   1bafc:	bd80      	pop	{r7, pc}
   1bafe:	46c0      	nop			; (mov r8, r8)
   1bb00:	200007bc 	.word	0x200007bc
   1bb04:	00014a55 	.word	0x00014a55

0001bb08 <SIMEventManager>:

void SIMEventManager(void)
{
   1bb08:	b590      	push	{r4, r7, lr}
   1bb0a:	b083      	sub	sp, #12
   1bb0c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1bb0e:	1dfb      	adds	r3, r7, #7
   1bb10:	2200      	movs	r2, #0
   1bb12:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1bb14:	4b1e      	ldr	r3, [pc, #120]	; (1bb90 <SIMEventManager+0x88>)
   1bb16:	795b      	ldrb	r3, [r3, #5]
   1bb18:	2b00      	cmp	r3, #0
   1bb1a:	d00b      	beq.n	1bb34 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1bb1c:	4b1c      	ldr	r3, [pc, #112]	; (1bb90 <SIMEventManager+0x88>)
   1bb1e:	791b      	ldrb	r3, [r3, #4]
   1bb20:	2b00      	cmp	r3, #0
   1bb22:	d003      	beq.n	1bb2c <SIMEventManager+0x24>
		{
			i = 19;
   1bb24:	1dfb      	adds	r3, r7, #7
   1bb26:	2213      	movs	r2, #19
   1bb28:	701a      	strb	r2, [r3, #0]
   1bb2a:	e025      	b.n	1bb78 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1bb2c:	1dfb      	adds	r3, r7, #7
   1bb2e:	2211      	movs	r2, #17
   1bb30:	701a      	strb	r2, [r3, #0]
   1bb32:	e021      	b.n	1bb78 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bb34:	4b16      	ldr	r3, [pc, #88]	; (1bb90 <SIMEventManager+0x88>)
   1bb36:	785b      	ldrb	r3, [r3, #1]
   1bb38:	2b00      	cmp	r3, #0
   1bb3a:	d003      	beq.n	1bb44 <SIMEventManager+0x3c>
		{
			i = 14;
   1bb3c:	1dfb      	adds	r3, r7, #7
   1bb3e:	220e      	movs	r2, #14
   1bb40:	701a      	strb	r2, [r3, #0]
   1bb42:	e019      	b.n	1bb78 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1bb44:	1dfb      	adds	r3, r7, #7
   1bb46:	220c      	movs	r2, #12
   1bb48:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1bb4a:	e015      	b.n	1bb78 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1bb4c:	1dfb      	adds	r3, r7, #7
   1bb4e:	781b      	ldrb	r3, [r3, #0]
   1bb50:	4a10      	ldr	r2, [pc, #64]	; (1bb94 <SIMEventManager+0x8c>)
   1bb52:	5cd3      	ldrb	r3, [r2, r3]
   1bb54:	2201      	movs	r2, #1
   1bb56:	4053      	eors	r3, r2
   1bb58:	b2db      	uxtb	r3, r3
   1bb5a:	2b00      	cmp	r3, #0
   1bb5c:	d00c      	beq.n	1bb78 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1bb5e:	1dfb      	adds	r3, r7, #7
   1bb60:	781c      	ldrb	r4, [r3, #0]
   1bb62:	1dfb      	adds	r3, r7, #7
   1bb64:	781b      	ldrb	r3, [r3, #0]
   1bb66:	4a0c      	ldr	r2, [pc, #48]	; (1bb98 <SIMEventManager+0x90>)
   1bb68:	5cd3      	ldrb	r3, [r2, r3]
   1bb6a:	0018      	movs	r0, r3
   1bb6c:	4b0b      	ldr	r3, [pc, #44]	; (1bb9c <SIMEventManager+0x94>)
   1bb6e:	4798      	blx	r3
   1bb70:	0003      	movs	r3, r0
   1bb72:	001a      	movs	r2, r3
   1bb74:	4b07      	ldr	r3, [pc, #28]	; (1bb94 <SIMEventManager+0x8c>)
   1bb76:	551a      	strb	r2, [r3, r4]
	while(i--)
   1bb78:	1dfb      	adds	r3, r7, #7
   1bb7a:	781b      	ldrb	r3, [r3, #0]
   1bb7c:	1dfa      	adds	r2, r7, #7
   1bb7e:	1e59      	subs	r1, r3, #1
   1bb80:	7011      	strb	r1, [r2, #0]
   1bb82:	2b00      	cmp	r3, #0
   1bb84:	d1e2      	bne.n	1bb4c <SIMEventManager+0x44>
	}
}
   1bb86:	46c0      	nop			; (mov r8, r8)
   1bb88:	46bd      	mov	sp, r7
   1bb8a:	b003      	add	sp, #12
   1bb8c:	bd90      	pop	{r4, r7, pc}
   1bb8e:	46c0      	nop			; (mov r8, r8)
   1bb90:	2000062c 	.word	0x2000062c
   1bb94:	2000070c 	.word	0x2000070c
   1bb98:	200007f8 	.word	0x200007f8
   1bb9c:	00014939 	.word	0x00014939

0001bba0 <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1bba0:	b580      	push	{r7, lr}
   1bba2:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1bba4:	4b07      	ldr	r3, [pc, #28]	; (1bbc4 <MotorVoltageBypassTimerOver+0x24>)
   1bba6:	4798      	blx	r3
   1bba8:	0002      	movs	r2, r0
   1bbaa:	4b07      	ldr	r3, [pc, #28]	; (1bbc8 <MotorVoltageBypassTimerOver+0x28>)
   1bbac:	681b      	ldr	r3, [r3, #0]
   1bbae:	1ad2      	subs	r2, r2, r3
   1bbb0:	4b06      	ldr	r3, [pc, #24]	; (1bbcc <MotorVoltageBypassTimerOver+0x2c>)
   1bbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bbb4:	4293      	cmp	r3, r2
   1bbb6:	419b      	sbcs	r3, r3
   1bbb8:	425b      	negs	r3, r3
   1bbba:	b2db      	uxtb	r3, r3
}
   1bbbc:	0018      	movs	r0, r3
   1bbbe:	46bd      	mov	sp, r7
   1bbc0:	bd80      	pop	{r7, pc}
   1bbc2:	46c0      	nop			; (mov r8, r8)
   1bbc4:	000202cd 	.word	0x000202cd
   1bbc8:	2000077c 	.word	0x2000077c
   1bbcc:	20000654 	.word	0x20000654

0001bbd0 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1bbd0:	b580      	push	{r7, lr}
   1bbd2:	b084      	sub	sp, #16
   1bbd4:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress))
   1bbd6:	4b77      	ldr	r3, [pc, #476]	; (1bdb4 <checkCurrentConsumption+0x1e4>)
   1bbd8:	781b      	ldrb	r3, [r3, #0]
   1bbda:	2b00      	cmp	r3, #0
   1bbdc:	d000      	beq.n	1bbe0 <checkCurrentConsumption+0x10>
   1bbde:	e0e4      	b.n	1bdaa <checkCurrentConsumption+0x1da>
   1bbe0:	4b75      	ldr	r3, [pc, #468]	; (1bdb8 <checkCurrentConsumption+0x1e8>)
   1bbe2:	781b      	ldrb	r3, [r3, #0]
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d000      	beq.n	1bbea <checkCurrentConsumption+0x1a>
   1bbe8:	e0df      	b.n	1bdaa <checkCurrentConsumption+0x1da>
   1bbea:	4b74      	ldr	r3, [pc, #464]	; (1bdbc <checkCurrentConsumption+0x1ec>)
   1bbec:	4798      	blx	r3
   1bbee:	0003      	movs	r3, r0
   1bbf0:	001a      	movs	r2, r3
   1bbf2:	2301      	movs	r3, #1
   1bbf4:	4053      	eors	r3, r2
   1bbf6:	b2db      	uxtb	r3, r3
   1bbf8:	2b00      	cmp	r3, #0
   1bbfa:	d000      	beq.n	1bbfe <checkCurrentConsumption+0x2e>
   1bbfc:	e0d5      	b.n	1bdaa <checkCurrentConsumption+0x1da>
   1bbfe:	4b70      	ldr	r3, [pc, #448]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bc00:	7bdb      	ldrb	r3, [r3, #15]
   1bc02:	2b00      	cmp	r3, #0
   1bc04:	d100      	bne.n	1bc08 <checkCurrentConsumption+0x38>
   1bc06:	e0d0      	b.n	1bdaa <checkCurrentConsumption+0x1da>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1bc08:	4b6e      	ldr	r3, [pc, #440]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bc0a:	781b      	ldrb	r3, [r3, #0]
   1bc0c:	2b00      	cmp	r3, #0
   1bc0e:	d00b      	beq.n	1bc28 <checkCurrentConsumption+0x58>
   1bc10:	4b6d      	ldr	r3, [pc, #436]	; (1bdc8 <checkCurrentConsumption+0x1f8>)
   1bc12:	4798      	blx	r3
   1bc14:	0002      	movs	r2, r0
   1bc16:	4b6d      	ldr	r3, [pc, #436]	; (1bdcc <checkCurrentConsumption+0x1fc>)
   1bc18:	681b      	ldr	r3, [r3, #0]
   1bc1a:	1ad3      	subs	r3, r2, r3
   1bc1c:	4a6c      	ldr	r2, [pc, #432]	; (1bdd0 <checkCurrentConsumption+0x200>)
   1bc1e:	4293      	cmp	r3, r2
   1bc20:	d902      	bls.n	1bc28 <checkCurrentConsumption+0x58>
	{
		enableCurrentBuffer=false;
   1bc22:	4b68      	ldr	r3, [pc, #416]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bc24:	2200      	movs	r2, #0
   1bc26:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1bc28:	2300      	movs	r3, #0
   1bc2a:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1bc2c:	4b64      	ldr	r3, [pc, #400]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bc2e:	2226      	movs	r2, #38	; 0x26
   1bc30:	5c9b      	ldrb	r3, [r3, r2]
   1bc32:	2b01      	cmp	r3, #1
   1bc34:	d103      	bne.n	1bc3e <checkCurrentConsumption+0x6e>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1bc36:	4b67      	ldr	r3, [pc, #412]	; (1bdd4 <checkCurrentConsumption+0x204>)
   1bc38:	6a1b      	ldr	r3, [r3, #32]
   1bc3a:	60fb      	str	r3, [r7, #12]
   1bc3c:	e002      	b.n	1bc44 <checkCurrentConsumption+0x74>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1bc3e:	4b65      	ldr	r3, [pc, #404]	; (1bdd4 <checkCurrentConsumption+0x204>)
   1bc40:	691b      	ldr	r3, [r3, #16]
   1bc42:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1bc44:	4b64      	ldr	r3, [pc, #400]	; (1bdd8 <checkCurrentConsumption+0x208>)
   1bc46:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1bc48:	4b5e      	ldr	r3, [pc, #376]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bc4a:	781b      	ldrb	r3, [r3, #0]
   1bc4c:	2b00      	cmp	r3, #0
   1bc4e:	d00b      	beq.n	1bc68 <checkCurrentConsumption+0x98>
   1bc50:	4b5b      	ldr	r3, [pc, #364]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bc52:	691b      	ldr	r3, [r3, #16]
   1bc54:	005a      	lsls	r2, r3, #1
   1bc56:	68fb      	ldr	r3, [r7, #12]
   1bc58:	429a      	cmp	r2, r3
   1bc5a:	d205      	bcs.n	1bc68 <checkCurrentConsumption+0x98>
	{
		temp2 = CR_OVER2;
   1bc5c:	1dfb      	adds	r3, r7, #7
   1bc5e:	2202      	movs	r2, #2
   1bc60:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1bc62:	4b5e      	ldr	r3, [pc, #376]	; (1bddc <checkCurrentConsumption+0x20c>)
   1bc64:	60bb      	str	r3, [r7, #8]
   1bc66:	e065      	b.n	1bd34 <checkCurrentConsumption+0x164>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1bc68:	4b56      	ldr	r3, [pc, #344]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bc6a:	781b      	ldrb	r3, [r3, #0]
   1bc6c:	2201      	movs	r2, #1
   1bc6e:	4053      	eors	r3, r2
   1bc70:	b2db      	uxtb	r3, r3
   1bc72:	2b00      	cmp	r3, #0
   1bc74:	d00c      	beq.n	1bc90 <checkCurrentConsumption+0xc0>
   1bc76:	4b52      	ldr	r3, [pc, #328]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bc78:	691b      	ldr	r3, [r3, #16]
   1bc7a:	005a      	lsls	r2, r3, #1
   1bc7c:	68fb      	ldr	r3, [r7, #12]
   1bc7e:	429a      	cmp	r2, r3
   1bc80:	d206      	bcs.n	1bc90 <checkCurrentConsumption+0xc0>
	{
		temp2 = CR_OVER;
   1bc82:	1dfb      	adds	r3, r7, #7
   1bc84:	2201      	movs	r2, #1
   1bc86:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bc88:	68bb      	ldr	r3, [r7, #8]
   1bc8a:	089b      	lsrs	r3, r3, #2
   1bc8c:	60bb      	str	r3, [r7, #8]
   1bc8e:	e051      	b.n	1bd34 <checkCurrentConsumption+0x164>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1bc90:	4b4c      	ldr	r3, [pc, #304]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bc92:	781b      	ldrb	r3, [r3, #0]
   1bc94:	2201      	movs	r2, #1
   1bc96:	4053      	eors	r3, r2
   1bc98:	b2db      	uxtb	r3, r3
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d00f      	beq.n	1bcbe <checkCurrentConsumption+0xee>
   1bc9e:	4b48      	ldr	r3, [pc, #288]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bca0:	691a      	ldr	r2, [r3, #16]
   1bca2:	4b47      	ldr	r3, [pc, #284]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bca4:	691b      	ldr	r3, [r3, #16]
   1bca6:	085b      	lsrs	r3, r3, #1
   1bca8:	18d2      	adds	r2, r2, r3
   1bcaa:	68fb      	ldr	r3, [r7, #12]
   1bcac:	429a      	cmp	r2, r3
   1bcae:	d206      	bcs.n	1bcbe <checkCurrentConsumption+0xee>
	{
		temp2 = CR_OVER;
   1bcb0:	1dfb      	adds	r3, r7, #7
   1bcb2:	2201      	movs	r2, #1
   1bcb4:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1bcb6:	68bb      	ldr	r3, [r7, #8]
   1bcb8:	085b      	lsrs	r3, r3, #1
   1bcba:	60bb      	str	r3, [r7, #8]
   1bcbc:	e03a      	b.n	1bd34 <checkCurrentConsumption+0x164>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1bcbe:	4b41      	ldr	r3, [pc, #260]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bcc0:	781b      	ldrb	r3, [r3, #0]
   1bcc2:	2201      	movs	r2, #1
   1bcc4:	4053      	eors	r3, r2
   1bcc6:	b2db      	uxtb	r3, r3
   1bcc8:	2b00      	cmp	r3, #0
   1bcca:	d008      	beq.n	1bcde <checkCurrentConsumption+0x10e>
   1bccc:	4b3c      	ldr	r3, [pc, #240]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bcce:	695a      	ldr	r2, [r3, #20]
   1bcd0:	68fb      	ldr	r3, [r7, #12]
   1bcd2:	429a      	cmp	r2, r3
   1bcd4:	d203      	bcs.n	1bcde <checkCurrentConsumption+0x10e>
	{
		temp2 = CR_OVER;
   1bcd6:	1dfb      	adds	r3, r7, #7
   1bcd8:	2201      	movs	r2, #1
   1bcda:	701a      	strb	r2, [r3, #0]
   1bcdc:	e02a      	b.n	1bd34 <checkCurrentConsumption+0x164>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1bcde:	4b39      	ldr	r3, [pc, #228]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bce0:	781b      	ldrb	r3, [r3, #0]
   1bce2:	2201      	movs	r2, #1
   1bce4:	4053      	eors	r3, r2
   1bce6:	b2db      	uxtb	r3, r3
   1bce8:	2b00      	cmp	r3, #0
   1bcea:	d00b      	beq.n	1bd04 <checkCurrentConsumption+0x134>
   1bcec:	4b34      	ldr	r3, [pc, #208]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bcee:	699a      	ldr	r2, [r3, #24]
   1bcf0:	68fb      	ldr	r3, [r7, #12]
   1bcf2:	429a      	cmp	r2, r3
   1bcf4:	d906      	bls.n	1bd04 <checkCurrentConsumption+0x134>
	{
		temp2 = CR_UNDER;
   1bcf6:	1dfb      	adds	r3, r7, #7
   1bcf8:	2202      	movs	r2, #2
   1bcfa:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bcfc:	68bb      	ldr	r3, [r7, #8]
   1bcfe:	089b      	lsrs	r3, r3, #2
   1bd00:	60bb      	str	r3, [r7, #8]
   1bd02:	e017      	b.n	1bd34 <checkCurrentConsumption+0x164>
	}
	else if(starDeltaTimerOn && enableCurrentBuffer && temp < (user_settings_parameter_struct.underloadAddress>>1))
   1bd04:	4b36      	ldr	r3, [pc, #216]	; (1bde0 <checkCurrentConsumption+0x210>)
   1bd06:	781b      	ldrb	r3, [r3, #0]
   1bd08:	2b00      	cmp	r3, #0
   1bd0a:	d010      	beq.n	1bd2e <checkCurrentConsumption+0x15e>
   1bd0c:	4b2d      	ldr	r3, [pc, #180]	; (1bdc4 <checkCurrentConsumption+0x1f4>)
   1bd0e:	781b      	ldrb	r3, [r3, #0]
   1bd10:	2b00      	cmp	r3, #0
   1bd12:	d00c      	beq.n	1bd2e <checkCurrentConsumption+0x15e>
   1bd14:	4b2a      	ldr	r3, [pc, #168]	; (1bdc0 <checkCurrentConsumption+0x1f0>)
   1bd16:	699b      	ldr	r3, [r3, #24]
   1bd18:	085a      	lsrs	r2, r3, #1
   1bd1a:	68fb      	ldr	r3, [r7, #12]
   1bd1c:	429a      	cmp	r2, r3
   1bd1e:	d906      	bls.n	1bd2e <checkCurrentConsumption+0x15e>
	{
		temp2 = CR_UNDER;
   1bd20:	1dfb      	adds	r3, r7, #7
   1bd22:	2202      	movs	r2, #2
   1bd24:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1bd26:	68bb      	ldr	r3, [r7, #8]
   1bd28:	089b      	lsrs	r3, r3, #2
   1bd2a:	60bb      	str	r3, [r7, #8]
   1bd2c:	e002      	b.n	1bd34 <checkCurrentConsumption+0x164>
	}
	else
	{
		temp2= CR_NORMAL;
   1bd2e:	1dfb      	adds	r3, r7, #7
   1bd30:	2200      	movs	r2, #0
   1bd32:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1bd34:	4b2b      	ldr	r3, [pc, #172]	; (1bde4 <checkCurrentConsumption+0x214>)
   1bd36:	781b      	ldrb	r3, [r3, #0]
   1bd38:	1dfa      	adds	r2, r7, #7
   1bd3a:	7812      	ldrb	r2, [r2, #0]
   1bd3c:	429a      	cmp	r2, r3
   1bd3e:	d12a      	bne.n	1bd96 <checkCurrentConsumption+0x1c6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1bd40:	4b21      	ldr	r3, [pc, #132]	; (1bdc8 <checkCurrentConsumption+0x1f8>)
   1bd42:	4798      	blx	r3
   1bd44:	0002      	movs	r2, r0
   1bd46:	4b28      	ldr	r3, [pc, #160]	; (1bde8 <checkCurrentConsumption+0x218>)
   1bd48:	681b      	ldr	r3, [r3, #0]
   1bd4a:	1ad2      	subs	r2, r2, r3
   1bd4c:	68bb      	ldr	r3, [r7, #8]
   1bd4e:	429a      	cmp	r2, r3
   1bd50:	d92c      	bls.n	1bdac <checkCurrentConsumption+0x1dc>
		{
			if(temp2==CR_OVER)
   1bd52:	1dfb      	adds	r3, r7, #7
   1bd54:	781b      	ldrb	r3, [r3, #0]
   1bd56:	2b01      	cmp	r3, #1
   1bd58:	d10c      	bne.n	1bd74 <checkCurrentConsumption+0x1a4>
			{
				stopMotor(false,true,false);
   1bd5a:	2200      	movs	r2, #0
   1bd5c:	2101      	movs	r1, #1
   1bd5e:	2000      	movs	r0, #0
   1bd60:	4b22      	ldr	r3, [pc, #136]	; (1bdec <checkCurrentConsumption+0x21c>)
   1bd62:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1bd64:	2042      	movs	r0, #66	; 0x42
   1bd66:	4b22      	ldr	r3, [pc, #136]	; (1bdf0 <checkCurrentConsumption+0x220>)
   1bd68:	4798      	blx	r3
   1bd6a:	0003      	movs	r3, r0
   1bd6c:	001a      	movs	r2, r3
   1bd6e:	4b21      	ldr	r3, [pc, #132]	; (1bdf4 <checkCurrentConsumption+0x224>)
   1bd70:	731a      	strb	r2, [r3, #12]
   1bd72:	e01b      	b.n	1bdac <checkCurrentConsumption+0x1dc>
			}
			else if(temp2==CR_UNDER)
   1bd74:	1dfb      	adds	r3, r7, #7
   1bd76:	781b      	ldrb	r3, [r3, #0]
   1bd78:	2b02      	cmp	r3, #2
   1bd7a:	d117      	bne.n	1bdac <checkCurrentConsumption+0x1dc>
			{
				stopMotor(false,true,false);
   1bd7c:	2200      	movs	r2, #0
   1bd7e:	2101      	movs	r1, #1
   1bd80:	2000      	movs	r0, #0
   1bd82:	4b1a      	ldr	r3, [pc, #104]	; (1bdec <checkCurrentConsumption+0x21c>)
   1bd84:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1bd86:	204a      	movs	r0, #74	; 0x4a
   1bd88:	4b19      	ldr	r3, [pc, #100]	; (1bdf0 <checkCurrentConsumption+0x220>)
   1bd8a:	4798      	blx	r3
   1bd8c:	0003      	movs	r3, r0
   1bd8e:	001a      	movs	r2, r3
   1bd90:	4b18      	ldr	r3, [pc, #96]	; (1bdf4 <checkCurrentConsumption+0x224>)
   1bd92:	735a      	strb	r2, [r3, #13]
   1bd94:	e00a      	b.n	1bdac <checkCurrentConsumption+0x1dc>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1bd96:	4b0c      	ldr	r3, [pc, #48]	; (1bdc8 <checkCurrentConsumption+0x1f8>)
   1bd98:	4798      	blx	r3
   1bd9a:	0002      	movs	r2, r0
   1bd9c:	4b12      	ldr	r3, [pc, #72]	; (1bde8 <checkCurrentConsumption+0x218>)
   1bd9e:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1bda0:	4b10      	ldr	r3, [pc, #64]	; (1bde4 <checkCurrentConsumption+0x214>)
   1bda2:	1dfa      	adds	r2, r7, #7
   1bda4:	7812      	ldrb	r2, [r2, #0]
   1bda6:	701a      	strb	r2, [r3, #0]
   1bda8:	e000      	b.n	1bdac <checkCurrentConsumption+0x1dc>
		return;
   1bdaa:	46c0      	nop			; (mov r8, r8)
	}
}
   1bdac:	46bd      	mov	sp, r7
   1bdae:	b004      	add	sp, #16
   1bdb0:	bd80      	pop	{r7, pc}
   1bdb2:	46c0      	nop			; (mov r8, r8)
   1bdb4:	20000791 	.word	0x20000791
   1bdb8:	20000780 	.word	0x20000780
   1bdbc:	0001ac01 	.word	0x0001ac01
   1bdc0:	20000654 	.word	0x20000654
   1bdc4:	20000758 	.word	0x20000758
   1bdc8:	000202cd 	.word	0x000202cd
   1bdcc:	2000078c 	.word	0x2000078c
   1bdd0:	00007530 	.word	0x00007530
   1bdd4:	200006dc 	.word	0x200006dc
   1bdd8:	00002ee0 	.word	0x00002ee0
   1bddc:	00004650 	.word	0x00004650
   1bde0:	20000793 	.word	0x20000793
   1bde4:	20000776 	.word	0x20000776
   1bde8:	20000764 	.word	0x20000764
   1bdec:	0001b4d9 	.word	0x0001b4d9
   1bdf0:	00014939 	.word	0x00014939
   1bdf4:	2000070c 	.word	0x2000070c

0001bdf8 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1bdf8:	b580      	push	{r7, lr}
   1bdfa:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1bdfc:	4b02      	ldr	r3, [pc, #8]	; (1be08 <button_detect_pin_callback+0x10>)
   1bdfe:	2201      	movs	r2, #1
   1be00:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1be02:	46c0      	nop			; (mov r8, r8)
   1be04:	46bd      	mov	sp, r7
   1be06:	bd80      	pop	{r7, pc}
   1be08:	20000797 	.word	0x20000797

0001be0c <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1be0c:	b590      	push	{r4, r7, lr}
   1be0e:	b087      	sub	sp, #28
   1be10:	af00      	add	r7, sp, #0
   1be12:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1be14:	4bce      	ldr	r3, [pc, #824]	; (1c150 <vTask_MOTORCONTROL+0x344>)
   1be16:	4798      	blx	r3
	
	configure_ac();
   1be18:	4bce      	ldr	r3, [pc, #824]	; (1c154 <vTask_MOTORCONTROL+0x348>)
   1be1a:	4798      	blx	r3
	configure_rtc();
   1be1c:	4bce      	ldr	r3, [pc, #824]	; (1c158 <vTask_MOTORCONTROL+0x34c>)
   1be1e:	4798      	blx	r3
	configure_event();
   1be20:	4bce      	ldr	r3, [pc, #824]	; (1c15c <vTask_MOTORCONTROL+0x350>)
   1be22:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1be24:	4bce      	ldr	r3, [pc, #824]	; (1c160 <vTask_MOTORCONTROL+0x354>)
   1be26:	2200      	movs	r2, #0
   1be28:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1be2a:	4bce      	ldr	r3, [pc, #824]	; (1c164 <vTask_MOTORCONTROL+0x358>)
   1be2c:	2200      	movs	r2, #0
   1be2e:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1be30:	4bcd      	ldr	r3, [pc, #820]	; (1c168 <vTask_MOTORCONTROL+0x35c>)
   1be32:	2200      	movs	r2, #0
   1be34:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1be36:	2315      	movs	r3, #21
   1be38:	18fb      	adds	r3, r7, r3
   1be3a:	2201      	movs	r2, #1
   1be3c:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1be3e:	4bcb      	ldr	r3, [pc, #812]	; (1c16c <vTask_MOTORCONTROL+0x360>)
   1be40:	4798      	blx	r3
   1be42:	0003      	movs	r3, r0
   1be44:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1be46:	4bca      	ldr	r3, [pc, #808]	; (1c170 <vTask_MOTORCONTROL+0x364>)
   1be48:	2201      	movs	r2, #1
   1be4a:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1be4c:	2315      	movs	r3, #21
   1be4e:	18fc      	adds	r4, r7, r3
   1be50:	4bc8      	ldr	r3, [pc, #800]	; (1c174 <vTask_MOTORCONTROL+0x368>)
   1be52:	2100      	movs	r1, #0
   1be54:	0018      	movs	r0, r3
   1be56:	4bc8      	ldr	r3, [pc, #800]	; (1c178 <vTask_MOTORCONTROL+0x36c>)
   1be58:	4798      	blx	r3
   1be5a:	0003      	movs	r3, r0
   1be5c:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1be5e:	23fa      	movs	r3, #250	; 0xfa
   1be60:	005b      	lsls	r3, r3, #1
   1be62:	0018      	movs	r0, r3
   1be64:	4bc5      	ldr	r3, [pc, #788]	; (1c17c <vTask_MOTORCONTROL+0x370>)
   1be66:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1be68:	2315      	movs	r3, #21
   1be6a:	18fc      	adds	r4, r7, r3
   1be6c:	4bc1      	ldr	r3, [pc, #772]	; (1c174 <vTask_MOTORCONTROL+0x368>)
   1be6e:	2100      	movs	r1, #0
   1be70:	0018      	movs	r0, r3
   1be72:	4bc1      	ldr	r3, [pc, #772]	; (1c178 <vTask_MOTORCONTROL+0x36c>)
   1be74:	4798      	blx	r3
   1be76:	0003      	movs	r3, r0
   1be78:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1be7a:	2315      	movs	r3, #21
   1be7c:	18fb      	adds	r3, r7, r3
   1be7e:	781b      	ldrb	r3, [r3, #0]
   1be80:	2204      	movs	r2, #4
   1be82:	4013      	ands	r3, r2
   1be84:	d003      	beq.n	1be8e <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
   1be86:	4bbe      	ldr	r3, [pc, #760]	; (1c180 <vTask_MOTORCONTROL+0x374>)
   1be88:	2201      	movs	r2, #1
   1be8a:	701a      	strb	r2, [r3, #0]
   1be8c:	e002      	b.n	1be94 <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
   1be8e:	4bbc      	ldr	r3, [pc, #752]	; (1c180 <vTask_MOTORCONTROL+0x374>)
   1be90:	2200      	movs	r2, #0
   1be92:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1be94:	4bbb      	ldr	r3, [pc, #748]	; (1c184 <vTask_MOTORCONTROL+0x378>)
   1be96:	2200      	movs	r2, #0
   1be98:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
   1be9a:	4bbb      	ldr	r3, [pc, #748]	; (1c188 <vTask_MOTORCONTROL+0x37c>)
   1be9c:	2200      	movs	r2, #0
   1be9e:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
   1bea0:	4bba      	ldr	r3, [pc, #744]	; (1c18c <vTask_MOTORCONTROL+0x380>)
   1bea2:	220a      	movs	r2, #10
   1bea4:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1bea6:	4bba      	ldr	r3, [pc, #744]	; (1c190 <vTask_MOTORCONTROL+0x384>)
   1bea8:	2200      	movs	r2, #0
   1beaa:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1beac:	4bb9      	ldr	r3, [pc, #740]	; (1c194 <vTask_MOTORCONTROL+0x388>)
   1beae:	2214      	movs	r2, #20
   1beb0:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1beb2:	4bb9      	ldr	r3, [pc, #740]	; (1c198 <vTask_MOTORCONTROL+0x38c>)
   1beb4:	2200      	movs	r2, #0
   1beb6:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1beb8:	4bb8      	ldr	r3, [pc, #736]	; (1c19c <vTask_MOTORCONTROL+0x390>)
   1beba:	2200      	movs	r2, #0
   1bebc:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1bebe:	4bb8      	ldr	r3, [pc, #736]	; (1c1a0 <vTask_MOTORCONTROL+0x394>)
   1bec0:	2214      	movs	r2, #20
   1bec2:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1bec4:	4bb7      	ldr	r3, [pc, #732]	; (1c1a4 <vTask_MOTORCONTROL+0x398>)
   1bec6:	2200      	movs	r2, #0
   1bec8:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1beca:	2000      	movs	r0, #0
   1becc:	4bb6      	ldr	r3, [pc, #728]	; (1c1a8 <vTask_MOTORCONTROL+0x39c>)
   1bece:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1bed0:	2000      	movs	r0, #0
   1bed2:	4bb6      	ldr	r3, [pc, #728]	; (1c1ac <vTask_MOTORCONTROL+0x3a0>)
   1bed4:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1bed6:	2000      	movs	r0, #0
   1bed8:	4bb5      	ldr	r3, [pc, #724]	; (1c1b0 <vTask_MOTORCONTROL+0x3a4>)
   1beda:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1bedc:	4bb5      	ldr	r3, [pc, #724]	; (1c1b4 <vTask_MOTORCONTROL+0x3a8>)
   1bede:	0018      	movs	r0, r3
   1bee0:	4bb5      	ldr	r3, [pc, #724]	; (1c1b8 <vTask_MOTORCONTROL+0x3ac>)
   1bee2:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1bee4:	4bb5      	ldr	r3, [pc, #724]	; (1c1bc <vTask_MOTORCONTROL+0x3b0>)
   1bee6:	0018      	movs	r0, r3
   1bee8:	4bb3      	ldr	r3, [pc, #716]	; (1c1b8 <vTask_MOTORCONTROL+0x3ac>)
   1beea:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1beec:	4bb4      	ldr	r3, [pc, #720]	; (1c1c0 <vTask_MOTORCONTROL+0x3b4>)
   1beee:	0018      	movs	r0, r3
   1bef0:	4bb1      	ldr	r3, [pc, #708]	; (1c1b8 <vTask_MOTORCONTROL+0x3ac>)
   1bef2:	4798      	blx	r3
	
	lastPressTime=0;
   1bef4:	4bb3      	ldr	r3, [pc, #716]	; (1c1c4 <vTask_MOTORCONTROL+0x3b8>)
   1bef6:	2200      	movs	r2, #0
   1bef8:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1befa:	4bb3      	ldr	r3, [pc, #716]	; (1c1c8 <vTask_MOTORCONTROL+0x3bc>)
   1befc:	2200      	movs	r2, #0
   1befe:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1bf00:	4bb2      	ldr	r3, [pc, #712]	; (1c1cc <vTask_MOTORCONTROL+0x3c0>)
   1bf02:	2200      	movs	r2, #0
   1bf04:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1bf06:	4bb2      	ldr	r3, [pc, #712]	; (1c1d0 <vTask_MOTORCONTROL+0x3c4>)
   1bf08:	2200      	movs	r2, #0
   1bf0a:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1bf0c:	2317      	movs	r3, #23
   1bf0e:	18fb      	adds	r3, r7, r3
   1bf10:	2200      	movs	r2, #0
   1bf12:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bf14:	4baf      	ldr	r3, [pc, #700]	; (1c1d4 <vTask_MOTORCONTROL+0x3c8>)
   1bf16:	785b      	ldrb	r3, [r3, #1]
   1bf18:	2b00      	cmp	r3, #0
   1bf1a:	d004      	beq.n	1bf26 <vTask_MOTORCONTROL+0x11a>
	{
		i=14;
   1bf1c:	2317      	movs	r3, #23
   1bf1e:	18fb      	adds	r3, r7, r3
   1bf20:	220e      	movs	r2, #14
   1bf22:	701a      	strb	r2, [r3, #0]
   1bf24:	e00a      	b.n	1bf3c <vTask_MOTORCONTROL+0x130>
	}
	else
	{
		i = 12;
   1bf26:	2317      	movs	r3, #23
   1bf28:	18fb      	adds	r3, r7, r3
   1bf2a:	220c      	movs	r2, #12
   1bf2c:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1bf2e:	e005      	b.n	1bf3c <vTask_MOTORCONTROL+0x130>
	{
		simEventTemp[i] = true;
   1bf30:	2317      	movs	r3, #23
   1bf32:	18fb      	adds	r3, r7, r3
   1bf34:	781b      	ldrb	r3, [r3, #0]
   1bf36:	4aa8      	ldr	r2, [pc, #672]	; (1c1d8 <vTask_MOTORCONTROL+0x3cc>)
   1bf38:	2101      	movs	r1, #1
   1bf3a:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1bf3c:	2317      	movs	r3, #23
   1bf3e:	18fb      	adds	r3, r7, r3
   1bf40:	781b      	ldrb	r3, [r3, #0]
   1bf42:	2217      	movs	r2, #23
   1bf44:	18ba      	adds	r2, r7, r2
   1bf46:	1e59      	subs	r1, r3, #1
   1bf48:	7011      	strb	r1, [r2, #0]
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d1f0      	bne.n	1bf30 <vTask_MOTORCONTROL+0x124>
	}
	simEvent[0] = 'N';
   1bf4e:	4ba3      	ldr	r3, [pc, #652]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf50:	224e      	movs	r2, #78	; 0x4e
   1bf52:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1bf54:	4ba1      	ldr	r3, [pc, #644]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf56:	2250      	movs	r2, #80	; 0x50
   1bf58:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1bf5a:	4ba0      	ldr	r3, [pc, #640]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf5c:	225f      	movs	r2, #95	; 0x5f
   1bf5e:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1bf60:	4b9e      	ldr	r3, [pc, #632]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf62:	2246      	movs	r2, #70	; 0x46
   1bf64:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1bf66:	4b9d      	ldr	r3, [pc, #628]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf68:	2247      	movs	r2, #71	; 0x47
   1bf6a:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1bf6c:	4b9b      	ldr	r3, [pc, #620]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf6e:	224c      	movs	r2, #76	; 0x4c
   1bf70:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1bf72:	4b9a      	ldr	r3, [pc, #616]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf74:	2243      	movs	r2, #67	; 0x43
   1bf76:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1bf78:	4b98      	ldr	r3, [pc, #608]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf7a:	2253      	movs	r2, #83	; 0x53
   1bf7c:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1bf7e:	4b97      	ldr	r3, [pc, #604]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf80:	224f      	movs	r2, #79	; 0x4f
   1bf82:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1bf84:	4b95      	ldr	r3, [pc, #596]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf86:	2241      	movs	r2, #65	; 0x41
   1bf88:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1bf8a:	4b94      	ldr	r3, [pc, #592]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf8c:	2229      	movs	r2, #41	; 0x29
   1bf8e:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1bf90:	4b92      	ldr	r3, [pc, #584]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bf92:	225b      	movs	r2, #91	; 0x5b
   1bf94:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1bf96:	4b8f      	ldr	r3, [pc, #572]	; (1c1d4 <vTask_MOTORCONTROL+0x3c8>)
   1bf98:	785b      	ldrb	r3, [r3, #1]
   1bf9a:	2b00      	cmp	r3, #0
   1bf9c:	d005      	beq.n	1bfaa <vTask_MOTORCONTROL+0x19e>
	{
		simEvent[12] = 'B';		//Overload Event
   1bf9e:	4b8f      	ldr	r3, [pc, #572]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bfa0:	2242      	movs	r2, #66	; 0x42
   1bfa2:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1bfa4:	4b8d      	ldr	r3, [pc, #564]	; (1c1dc <vTask_MOTORCONTROL+0x3d0>)
   1bfa6:	224a      	movs	r2, #74	; 0x4a
   1bfa8:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1bfaa:	2001      	movs	r0, #1
   1bfac:	4b8c      	ldr	r3, [pc, #560]	; (1c1e0 <vTask_MOTORCONTROL+0x3d4>)
   1bfae:	4798      	blx	r3
	eventOccured=true;
   1bfb0:	4b6d      	ldr	r3, [pc, #436]	; (1c168 <vTask_MOTORCONTROL+0x35c>)
   1bfb2:	2201      	movs	r2, #1
   1bfb4:	701a      	strb	r2, [r3, #0]
	//////////////////////////////

	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1bfb6:	4b8b      	ldr	r3, [pc, #556]	; (1c1e4 <vTask_MOTORCONTROL+0x3d8>)
   1bfb8:	681a      	ldr	r2, [r3, #0]
   1bfba:	2301      	movs	r3, #1
   1bfbc:	425b      	negs	r3, r3
   1bfbe:	0019      	movs	r1, r3
   1bfc0:	0010      	movs	r0, r2
   1bfc2:	4b89      	ldr	r3, [pc, #548]	; (1c1e8 <vTask_MOTORCONTROL+0x3dc>)
   1bfc4:	4798      	blx	r3
		if(taskPSet)
   1bfc6:	4b89      	ldr	r3, [pc, #548]	; (1c1ec <vTask_MOTORCONTROL+0x3e0>)
   1bfc8:	781b      	ldrb	r3, [r3, #0]
   1bfca:	b2db      	uxtb	r3, r3
   1bfcc:	2b00      	cmp	r3, #0
   1bfce:	d006      	beq.n	1bfde <vTask_MOTORCONTROL+0x1d2>
		{
			vTaskPrioritySet(NULL,1);
   1bfd0:	2101      	movs	r1, #1
   1bfd2:	2000      	movs	r0, #0
   1bfd4:	4b86      	ldr	r3, [pc, #536]	; (1c1f0 <vTask_MOTORCONTROL+0x3e4>)
   1bfd6:	4798      	blx	r3
			taskPSet=false;
   1bfd8:	4b84      	ldr	r3, [pc, #528]	; (1c1ec <vTask_MOTORCONTROL+0x3e0>)
   1bfda:	2200      	movs	r2, #0
   1bfdc:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1bfde:	4b81      	ldr	r3, [pc, #516]	; (1c1e4 <vTask_MOTORCONTROL+0x3d8>)
   1bfe0:	6818      	ldr	r0, [r3, #0]
   1bfe2:	2300      	movs	r3, #0
   1bfe4:	2200      	movs	r2, #0
   1bfe6:	2100      	movs	r1, #0
   1bfe8:	4c82      	ldr	r4, [pc, #520]	; (1c1f4 <vTask_MOTORCONTROL+0x3e8>)
   1bfea:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1bfec:	4b6b      	ldr	r3, [pc, #428]	; (1c19c <vTask_MOTORCONTROL+0x390>)
   1bfee:	781b      	ldrb	r3, [r3, #0]
   1bff0:	2201      	movs	r2, #1
   1bff2:	4053      	eors	r3, r2
   1bff4:	b2db      	uxtb	r3, r3
   1bff6:	2b00      	cmp	r3, #0
   1bff8:	d046      	beq.n	1c088 <vTask_MOTORCONTROL+0x27c>
   1bffa:	4b6a      	ldr	r3, [pc, #424]	; (1c1a4 <vTask_MOTORCONTROL+0x398>)
   1bffc:	781b      	ldrb	r3, [r3, #0]
   1bffe:	2201      	movs	r2, #1
   1c000:	4053      	eors	r3, r2
   1c002:	b2db      	uxtb	r3, r3
   1c004:	2b00      	cmp	r3, #0
   1c006:	d03f      	beq.n	1c088 <vTask_MOTORCONTROL+0x27c>
		{
			uint8_t tempEventOccured=eventOccured;
   1c008:	4b57      	ldr	r3, [pc, #348]	; (1c168 <vTask_MOTORCONTROL+0x35c>)
   1c00a:	781b      	ldrb	r3, [r3, #0]
   1c00c:	b2da      	uxtb	r2, r3
   1c00e:	230f      	movs	r3, #15
   1c010:	18fb      	adds	r3, r7, r3
   1c012:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
   1c014:	4b78      	ldr	r3, [pc, #480]	; (1c1f8 <vTask_MOTORCONTROL+0x3ec>)
   1c016:	781b      	ldrb	r3, [r3, #0]
   1c018:	b2da      	uxtb	r2, r3
   1c01a:	230e      	movs	r3, #14
   1c01c:	18fb      	adds	r3, r7, r3
   1c01e:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
   1c020:	230f      	movs	r3, #15
   1c022:	18fb      	adds	r3, r7, r3
   1c024:	781b      	ldrb	r3, [r3, #0]
   1c026:	2b00      	cmp	r3, #0
   1c028:	d027      	beq.n	1c07a <vTask_MOTORCONTROL+0x26e>
			{
				if(firstEvent)
   1c02a:	4b51      	ldr	r3, [pc, #324]	; (1c170 <vTask_MOTORCONTROL+0x364>)
   1c02c:	781b      	ldrb	r3, [r3, #0]
   1c02e:	b2db      	uxtb	r3, r3
   1c030:	2b00      	cmp	r3, #0
   1c032:	d00b      	beq.n	1c04c <vTask_MOTORCONTROL+0x240>
				{
					if(xTaskGetTickCount()-delayForFirstEvent>35000L)
   1c034:	4b4d      	ldr	r3, [pc, #308]	; (1c16c <vTask_MOTORCONTROL+0x360>)
   1c036:	4798      	blx	r3
   1c038:	0002      	movs	r2, r0
   1c03a:	693b      	ldr	r3, [r7, #16]
   1c03c:	1ad3      	subs	r3, r2, r3
   1c03e:	4a6f      	ldr	r2, [pc, #444]	; (1c1fc <vTask_MOTORCONTROL+0x3f0>)
   1c040:	4293      	cmp	r3, r2
   1c042:	d91a      	bls.n	1c07a <vTask_MOTORCONTROL+0x26e>
					{
						firstEvent = false;
   1c044:	4b4a      	ldr	r3, [pc, #296]	; (1c170 <vTask_MOTORCONTROL+0x364>)
   1c046:	2200      	movs	r2, #0
   1c048:	701a      	strb	r2, [r3, #0]
   1c04a:	e016      	b.n	1c07a <vTask_MOTORCONTROL+0x26e>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1c04c:	4b6c      	ldr	r3, [pc, #432]	; (1c200 <vTask_MOTORCONTROL+0x3f4>)
   1c04e:	781b      	ldrb	r3, [r3, #0]
   1c050:	b2db      	uxtb	r3, r3
   1c052:	2b00      	cmp	r3, #0
   1c054:	d00f      	beq.n	1c076 <vTask_MOTORCONTROL+0x26a>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1c056:	4b45      	ldr	r3, [pc, #276]	; (1c16c <vTask_MOTORCONTROL+0x360>)
   1c058:	4798      	blx	r3
   1c05a:	0002      	movs	r2, r0
   1c05c:	4b69      	ldr	r3, [pc, #420]	; (1c204 <vTask_MOTORCONTROL+0x3f8>)
   1c05e:	681b      	ldr	r3, [r3, #0]
   1c060:	1ad2      	subs	r2, r2, r3
   1c062:	23e1      	movs	r3, #225	; 0xe1
   1c064:	00db      	lsls	r3, r3, #3
   1c066:	429a      	cmp	r2, r3
   1c068:	d907      	bls.n	1c07a <vTask_MOTORCONTROL+0x26e>
						{
							motorFeedbackEvent=false;
   1c06a:	4b65      	ldr	r3, [pc, #404]	; (1c200 <vTask_MOTORCONTROL+0x3f4>)
   1c06c:	2200      	movs	r2, #0
   1c06e:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1c070:	4b65      	ldr	r3, [pc, #404]	; (1c208 <vTask_MOTORCONTROL+0x3fc>)
   1c072:	4798      	blx	r3
   1c074:	e001      	b.n	1c07a <vTask_MOTORCONTROL+0x26e>
						}
					}
					else
					{
						operateOnEvent();
   1c076:	4b64      	ldr	r3, [pc, #400]	; (1c208 <vTask_MOTORCONTROL+0x3fc>)
   1c078:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1c07a:	4b53      	ldr	r3, [pc, #332]	; (1c1c8 <vTask_MOTORCONTROL+0x3bc>)
   1c07c:	781b      	ldrb	r3, [r3, #0]
   1c07e:	b2db      	uxtb	r3, r3
   1c080:	2b00      	cmp	r3, #0
   1c082:	d001      	beq.n	1c088 <vTask_MOTORCONTROL+0x27c>
			{
				buttonFilter();
   1c084:	4b61      	ldr	r3, [pc, #388]	; (1c20c <vTask_MOTORCONTROL+0x400>)
   1c086:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1c088:	4b61      	ldr	r3, [pc, #388]	; (1c210 <vTask_MOTORCONTROL+0x404>)
   1c08a:	4798      	blx	r3
   1c08c:	1e03      	subs	r3, r0, #0
   1c08e:	d003      	beq.n	1c098 <vTask_MOTORCONTROL+0x28c>
			detect_battery_voltage_and_percentage();
   1c090:	4b60      	ldr	r3, [pc, #384]	; (1c214 <vTask_MOTORCONTROL+0x408>)
   1c092:	4798      	blx	r3
			detect_Three_Phase_Voltage();
   1c094:	4b60      	ldr	r3, [pc, #384]	; (1c218 <vTask_MOTORCONTROL+0x40c>)
   1c096:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c098:	4b4e      	ldr	r3, [pc, #312]	; (1c1d4 <vTask_MOTORCONTROL+0x3c8>)
   1c09a:	785b      	ldrb	r3, [r3, #1]
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d013      	beq.n	1c0c8 <vTask_MOTORCONTROL+0x2bc>
		{
			if(should_Detect_New_Current()) {
   1c0a0:	4b5e      	ldr	r3, [pc, #376]	; (1c21c <vTask_MOTORCONTROL+0x410>)
   1c0a2:	4798      	blx	r3
   1c0a4:	1e03      	subs	r3, r0, #0
   1c0a6:	d00f      	beq.n	1c0c8 <vTask_MOTORCONTROL+0x2bc>
				detect_Motor_Current();
   1c0a8:	4b5d      	ldr	r3, [pc, #372]	; (1c220 <vTask_MOTORCONTROL+0x414>)
   1c0aa:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1c0ac:	4b5d      	ldr	r3, [pc, #372]	; (1c224 <vTask_MOTORCONTROL+0x418>)
   1c0ae:	2225      	movs	r2, #37	; 0x25
   1c0b0:	5c9b      	ldrb	r3, [r3, r2]
   1c0b2:	2b01      	cmp	r3, #1
   1c0b4:	d106      	bne.n	1c0c4 <vTask_MOTORCONTROL+0x2b8>
				{
					if(detectMotorStateChangeUsingCurrent())
   1c0b6:	4b5c      	ldr	r3, [pc, #368]	; (1c228 <vTask_MOTORCONTROL+0x41c>)
   1c0b8:	4798      	blx	r3
   1c0ba:	1e03      	subs	r3, r0, #0
   1c0bc:	d002      	beq.n	1c0c4 <vTask_MOTORCONTROL+0x2b8>
					{
						eventOccured=true;
   1c0be:	4b2a      	ldr	r3, [pc, #168]	; (1c168 <vTask_MOTORCONTROL+0x35c>)
   1c0c0:	2201      	movs	r2, #1
   1c0c2:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1c0c4:	4b59      	ldr	r3, [pc, #356]	; (1c22c <vTask_MOTORCONTROL+0x420>)
   1c0c6:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1c0c8:	4b59      	ldr	r3, [pc, #356]	; (1c230 <vTask_MOTORCONTROL+0x424>)
   1c0ca:	781b      	ldrb	r3, [r3, #0]
   1c0cc:	2b00      	cmp	r3, #0
   1c0ce:	d005      	beq.n	1c0dc <vTask_MOTORCONTROL+0x2d0>
   1c0d0:	4b58      	ldr	r3, [pc, #352]	; (1c234 <vTask_MOTORCONTROL+0x428>)
   1c0d2:	4798      	blx	r3
   1c0d4:	1e03      	subs	r3, r0, #0
   1c0d6:	d001      	beq.n	1c0dc <vTask_MOTORCONTROL+0x2d0>
		{
			operateOnStableLine();
   1c0d8:	4b57      	ldr	r3, [pc, #348]	; (1c238 <vTask_MOTORCONTROL+0x42c>)
   1c0da:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
   1c0dc:	4b57      	ldr	r3, [pc, #348]	; (1c23c <vTask_MOTORCONTROL+0x430>)
   1c0de:	781b      	ldrb	r3, [r3, #0]
   1c0e0:	2b00      	cmp	r3, #0
   1c0e2:	d00b      	beq.n	1c0fc <vTask_MOTORCONTROL+0x2f0>
   1c0e4:	4b21      	ldr	r3, [pc, #132]	; (1c16c <vTask_MOTORCONTROL+0x360>)
   1c0e6:	4798      	blx	r3
   1c0e8:	0002      	movs	r2, r0
   1c0ea:	4b55      	ldr	r3, [pc, #340]	; (1c240 <vTask_MOTORCONTROL+0x434>)
   1c0ec:	681b      	ldr	r3, [r3, #0]
   1c0ee:	1ad3      	subs	r3, r2, r3
   1c0f0:	4a54      	ldr	r2, [pc, #336]	; (1c244 <vTask_MOTORCONTROL+0x438>)
   1c0f2:	4293      	cmp	r3, r2
   1c0f4:	d902      	bls.n	1c0fc <vTask_MOTORCONTROL+0x2f0>
		{
			stopMotorCommandGiven=false;
   1c0f6:	4b51      	ldr	r3, [pc, #324]	; (1c23c <vTask_MOTORCONTROL+0x430>)
   1c0f8:	2200      	movs	r2, #0
   1c0fa:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1c0fc:	4b33      	ldr	r3, [pc, #204]	; (1c1cc <vTask_MOTORCONTROL+0x3c0>)
   1c0fe:	781b      	ldrb	r3, [r3, #0]
   1c100:	2b00      	cmp	r3, #0
   1c102:	d006      	beq.n	1c112 <vTask_MOTORCONTROL+0x306>
		{
			if(MotorVoltageBypassTimerOver())
   1c104:	4b50      	ldr	r3, [pc, #320]	; (1c248 <vTask_MOTORCONTROL+0x43c>)
   1c106:	4798      	blx	r3
   1c108:	1e03      	subs	r3, r0, #0
   1c10a:	d002      	beq.n	1c112 <vTask_MOTORCONTROL+0x306>
			{
				motorRelatedVoltageBypassOn=false;
   1c10c:	4b2f      	ldr	r3, [pc, #188]	; (1c1cc <vTask_MOTORCONTROL+0x3c0>)
   1c10e:	2200      	movs	r2, #0
   1c110:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1c112:	4b1f      	ldr	r3, [pc, #124]	; (1c190 <vTask_MOTORCONTROL+0x384>)
   1c114:	781b      	ldrb	r3, [r3, #0]
   1c116:	2b00      	cmp	r3, #0
   1c118:	d100      	bne.n	1c11c <vTask_MOTORCONTROL+0x310>
   1c11a:	e0a0      	b.n	1c25e <vTask_MOTORCONTROL+0x452>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1c11c:	4b4b      	ldr	r3, [pc, #300]	; (1c24c <vTask_MOTORCONTROL+0x440>)
   1c11e:	785b      	ldrb	r3, [r3, #1]
   1c120:	b2db      	uxtb	r3, r3
   1c122:	2b03      	cmp	r3, #3
   1c124:	d003      	beq.n	1c12e <vTask_MOTORCONTROL+0x322>
			{
				b = false;
   1c126:	2316      	movs	r3, #22
   1c128:	18fb      	adds	r3, r7, r3
   1c12a:	2200      	movs	r2, #0
   1c12c:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1c12e:	2316      	movs	r3, #22
   1c130:	18fb      	adds	r3, r7, r3
   1c132:	781b      	ldrb	r3, [r3, #0]
   1c134:	2201      	movs	r2, #1
   1c136:	4053      	eors	r3, r2
   1c138:	b2db      	uxtb	r3, r3
   1c13a:	2b00      	cmp	r3, #0
   1c13c:	d100      	bne.n	1c140 <vTask_MOTORCONTROL+0x334>
   1c13e:	e08b      	b.n	1c258 <vTask_MOTORCONTROL+0x44c>
			{
				if(singlePhasingTimerOver())
   1c140:	4b43      	ldr	r3, [pc, #268]	; (1c250 <vTask_MOTORCONTROL+0x444>)
   1c142:	4798      	blx	r3
   1c144:	1e03      	subs	r3, r0, #0
   1c146:	d100      	bne.n	1c14a <vTask_MOTORCONTROL+0x33e>
   1c148:	e089      	b.n	1c25e <vTask_MOTORCONTROL+0x452>
				{
					operateOnSinglePhasing();
   1c14a:	4b42      	ldr	r3, [pc, #264]	; (1c254 <vTask_MOTORCONTROL+0x448>)
   1c14c:	4798      	blx	r3
   1c14e:	e086      	b.n	1c25e <vTask_MOTORCONTROL+0x452>
   1c150:	00019ad9 	.word	0x00019ad9
   1c154:	0001c77d 	.word	0x0001c77d
   1c158:	0001c871 	.word	0x0001c871
   1c15c:	0001c941 	.word	0x0001c941
   1c160:	2000080c 	.word	0x2000080c
   1c164:	20000708 	.word	0x20000708
   1c168:	20000722 	.word	0x20000722
   1c16c:	000202cd 	.word	0x000202cd
   1c170:	2000076e 	.word	0x2000076e
   1c174:	2000088c 	.word	0x2000088c
   1c178:	00018b89 	.word	0x00018b89
   1c17c:	0001ff69 	.word	0x0001ff69
   1c180:	20000785 	.word	0x20000785
   1c184:	20000841 	.word	0x20000841
   1c188:	20000792 	.word	0x20000792
   1c18c:	20000768 	.word	0x20000768
   1c190:	20000789 	.word	0x20000789
   1c194:	20000818 	.word	0x20000818
   1c198:	20000793 	.word	0x20000793
   1c19c:	20000791 	.word	0x20000791
   1c1a0:	20000862 	.word	0x20000862
   1c1a4:	20000780 	.word	0x20000780
   1c1a8:	0001abad 	.word	0x0001abad
   1c1ac:	0001ac15 	.word	0x0001ac15
   1c1b0:	0001ab79 	.word	0x0001ab79
   1c1b4:	200007a8 	.word	0x200007a8
   1c1b8:	0001a491 	.word	0x0001a491
   1c1bc:	20000724 	.word	0x20000724
   1c1c0:	200007dc 	.word	0x200007dc
   1c1c4:	20000760 	.word	0x20000760
   1c1c8:	20000778 	.word	0x20000778
   1c1cc:	2000076b 	.word	0x2000076b
   1c1d0:	2000077c 	.word	0x2000077c
   1c1d4:	2000062c 	.word	0x2000062c
   1c1d8:	2000070c 	.word	0x2000070c
   1c1dc:	200007f8 	.word	0x200007f8
   1c1e0:	0001aefd 	.word	0x0001aefd
   1c1e4:	2000023c 	.word	0x2000023c
   1c1e8:	0001f661 	.word	0x0001f661
   1c1ec:	20000880 	.word	0x20000880
   1c1f0:	0001ffc5 	.word	0x0001ffc5
   1c1f4:	0001f1c1 	.word	0x0001f1c1
   1c1f8:	20000797 	.word	0x20000797
   1c1fc:	000088b8 	.word	0x000088b8
   1c200:	20000782 	.word	0x20000782
   1c204:	2000085c 	.word	0x2000085c
   1c208:	0001af9d 	.word	0x0001af9d
   1c20c:	0001ca4d 	.word	0x0001ca4d
   1c210:	0001a3b5 	.word	0x0001a3b5
   1c214:	0001a3d1 	.word	0x0001a3d1
   1c218:	0001a6e1 	.word	0x0001a6e1
   1c21c:	0001ab49 	.word	0x0001ab49
   1c220:	0001a911 	.word	0x0001a911
   1c224:	20000654 	.word	0x20000654
   1c228:	0001ade1 	.word	0x0001ade1
   1c22c:	0001bbd1 	.word	0x0001bbd1
   1c230:	2000080d 	.word	0x2000080d
   1c234:	0001b2b1 	.word	0x0001b2b1
   1c238:	0001b181 	.word	0x0001b181
   1c23c:	20000860 	.word	0x20000860
   1c240:	200007a0 	.word	0x200007a0
   1c244:	00001388 	.word	0x00001388
   1c248:	0001bba1 	.word	0x0001bba1
   1c24c:	20000740 	.word	0x20000740
   1c250:	0001b631 	.word	0x0001b631
   1c254:	0001b67d 	.word	0x0001b67d
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1c258:	4b15      	ldr	r3, [pc, #84]	; (1c2b0 <vTask_MOTORCONTROL+0x4a4>)
   1c25a:	2200      	movs	r2, #0
   1c25c:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1c25e:	4b15      	ldr	r3, [pc, #84]	; (1c2b4 <vTask_MOTORCONTROL+0x4a8>)
   1c260:	781b      	ldrb	r3, [r3, #0]
   1c262:	2b00      	cmp	r3, #0
   1c264:	d007      	beq.n	1c276 <vTask_MOTORCONTROL+0x46a>
		{
			if (startMotorTimerOver())
   1c266:	4b14      	ldr	r3, [pc, #80]	; (1c2b8 <vTask_MOTORCONTROL+0x4ac>)
   1c268:	4798      	blx	r3
   1c26a:	1e03      	subs	r3, r0, #0
   1c26c:	d003      	beq.n	1c276 <vTask_MOTORCONTROL+0x46a>
			{
				startMotor(false,false);
   1c26e:	2100      	movs	r1, #0
   1c270:	2000      	movs	r0, #0
   1c272:	4b12      	ldr	r3, [pc, #72]	; (1c2bc <vTask_MOTORCONTROL+0x4b0>)
   1c274:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1c276:	4b12      	ldr	r3, [pc, #72]	; (1c2c0 <vTask_MOTORCONTROL+0x4b4>)
   1c278:	781b      	ldrb	r3, [r3, #0]
   1c27a:	2b00      	cmp	r3, #0
   1c27c:	d001      	beq.n	1c282 <vTask_MOTORCONTROL+0x476>
		{
			terminateStartRelay();
   1c27e:	4b11      	ldr	r3, [pc, #68]	; (1c2c4 <vTask_MOTORCONTROL+0x4b8>)
   1c280:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1c282:	4b11      	ldr	r3, [pc, #68]	; (1c2c8 <vTask_MOTORCONTROL+0x4bc>)
   1c284:	781b      	ldrb	r3, [r3, #0]
   1c286:	2b00      	cmp	r3, #0
   1c288:	d001      	beq.n	1c28e <vTask_MOTORCONTROL+0x482>
		{
			terminateStarDeltaTimer();
   1c28a:	4b10      	ldr	r3, [pc, #64]	; (1c2cc <vTask_MOTORCONTROL+0x4c0>)
   1c28c:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1c28e:	4b10      	ldr	r3, [pc, #64]	; (1c2d0 <vTask_MOTORCONTROL+0x4c4>)
   1c290:	781b      	ldrb	r3, [r3, #0]
   1c292:	2b00      	cmp	r3, #0
   1c294:	d001      	beq.n	1c29a <vTask_MOTORCONTROL+0x48e>
		{
			terminateStopRelay();
   1c296:	4b0f      	ldr	r3, [pc, #60]	; (1c2d4 <vTask_MOTORCONTROL+0x4c8>)
   1c298:	4798      	blx	r3
		}
		
		SIMEventManager();
   1c29a:	4b0f      	ldr	r3, [pc, #60]	; (1c2d8 <vTask_MOTORCONTROL+0x4cc>)
   1c29c:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1c29e:	4b0f      	ldr	r3, [pc, #60]	; (1c2dc <vTask_MOTORCONTROL+0x4d0>)
   1c2a0:	78db      	ldrb	r3, [r3, #3]
   1c2a2:	2b00      	cmp	r3, #0
   1c2a4:	d100      	bne.n	1c2a8 <vTask_MOTORCONTROL+0x49c>
   1c2a6:	e686      	b.n	1bfb6 <vTask_MOTORCONTROL+0x1aa>
		{
			M2MEventManager();
   1c2a8:	4b0d      	ldr	r3, [pc, #52]	; (1c2e0 <vTask_MOTORCONTROL+0x4d4>)
   1c2aa:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1c2ac:	e683      	b.n	1bfb6 <vTask_MOTORCONTROL+0x1aa>
   1c2ae:	46c0      	nop			; (mov r8, r8)
   1c2b0:	20000789 	.word	0x20000789
   1c2b4:	20000792 	.word	0x20000792
   1c2b8:	0001b5c9 	.word	0x0001b5c9
   1c2bc:	0001b2fd 	.word	0x0001b2fd
   1c2c0:	20000791 	.word	0x20000791
   1c2c4:	0001b7fd 	.word	0x0001b7fd
   1c2c8:	20000793 	.word	0x20000793
   1c2cc:	0001b78d 	.word	0x0001b78d
   1c2d0:	20000780 	.word	0x20000780
   1c2d4:	0001b6b9 	.word	0x0001b6b9
   1c2d8:	0001bb09 	.word	0x0001bb09
   1c2dc:	2000062c 	.word	0x2000062c
   1c2e0:	0001bac5 	.word	0x0001bac5

0001c2e4 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1c2e4:	b590      	push	{r4, r7, lr}
   1c2e6:	b08b      	sub	sp, #44	; 0x2c
   1c2e8:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1c2ea:	2314      	movs	r3, #20
   1c2ec:	18fb      	adds	r3, r7, r3
   1c2ee:	0018      	movs	r0, r3
   1c2f0:	4bad      	ldr	r3, [pc, #692]	; (1c5a8 <start_motor_service+0x2c4>)
   1c2f2:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1c2f4:	2314      	movs	r3, #20
   1c2f6:	18fb      	adds	r3, r7, r3
   1c2f8:	222b      	movs	r2, #43	; 0x2b
   1c2fa:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1c2fc:	2314      	movs	r3, #20
   1c2fe:	18fb      	adds	r3, r7, r3
   1c300:	2200      	movs	r2, #0
   1c302:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1c304:	2314      	movs	r3, #20
   1c306:	18fb      	adds	r3, r7, r3
   1c308:	2201      	movs	r2, #1
   1c30a:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1c30c:	2314      	movs	r3, #20
   1c30e:	18fb      	adds	r3, r7, r3
   1c310:	2201      	movs	r2, #1
   1c312:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
   1c314:	2314      	movs	r3, #20
   1c316:	18fb      	adds	r3, r7, r3
   1c318:	2200      	movs	r2, #0
   1c31a:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1c31c:	2314      	movs	r3, #20
   1c31e:	18fb      	adds	r3, r7, r3
   1c320:	0019      	movs	r1, r3
   1c322:	200b      	movs	r0, #11
   1c324:	4ba1      	ldr	r3, [pc, #644]	; (1c5ac <start_motor_service+0x2c8>)
   1c326:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1c328:	4ba1      	ldr	r3, [pc, #644]	; (1c5b0 <start_motor_service+0x2cc>)
   1c32a:	2200      	movs	r2, #0
   1c32c:	210b      	movs	r1, #11
   1c32e:	0018      	movs	r0, r3
   1c330:	4ba0      	ldr	r3, [pc, #640]	; (1c5b4 <start_motor_service+0x2d0>)
   1c332:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1c334:	2100      	movs	r1, #0
   1c336:	200b      	movs	r0, #11
   1c338:	4b9f      	ldr	r3, [pc, #636]	; (1c5b8 <start_motor_service+0x2d4>)
   1c33a:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1c33c:	2310      	movs	r3, #16
   1c33e:	18fb      	adds	r3, r7, r3
   1c340:	0018      	movs	r0, r3
   1c342:	4b9e      	ldr	r3, [pc, #632]	; (1c5bc <start_motor_service+0x2d8>)
   1c344:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1c346:	2310      	movs	r3, #16
   1c348:	18fb      	adds	r3, r7, r3
   1c34a:	2200      	movs	r2, #0
   1c34c:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1c34e:	2310      	movs	r3, #16
   1c350:	18fb      	adds	r3, r7, r3
   1c352:	2201      	movs	r2, #1
   1c354:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1c356:	2310      	movs	r3, #16
   1c358:	18fb      	adds	r3, r7, r3
   1c35a:	0019      	movs	r1, r3
   1c35c:	202a      	movs	r0, #42	; 0x2a
   1c35e:	4b98      	ldr	r3, [pc, #608]	; (1c5c0 <start_motor_service+0x2dc>)
   1c360:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1c362:	2203      	movs	r2, #3
   1c364:	2100      	movs	r1, #0
   1c366:	2001      	movs	r0, #1
   1c368:	4b96      	ldr	r3, [pc, #600]	; (1c5c4 <start_motor_service+0x2e0>)
   1c36a:	4798      	blx	r3
   1c36c:	0002      	movs	r2, r0
   1c36e:	4b96      	ldr	r3, [pc, #600]	; (1c5c8 <start_motor_service+0x2e4>)
   1c370:	601a      	str	r2, [r3, #0]
   1c372:	4b95      	ldr	r3, [pc, #596]	; (1c5c8 <start_motor_service+0x2e4>)
   1c374:	681b      	ldr	r3, [r3, #0]
   1c376:	2b00      	cmp	r3, #0
   1c378:	d006      	beq.n	1c388 <start_motor_service+0xa4>
   1c37a:	4b93      	ldr	r3, [pc, #588]	; (1c5c8 <start_motor_service+0x2e4>)
   1c37c:	6818      	ldr	r0, [r3, #0]
   1c37e:	2300      	movs	r3, #0
   1c380:	2200      	movs	r2, #0
   1c382:	2100      	movs	r1, #0
   1c384:	4c91      	ldr	r4, [pc, #580]	; (1c5cc <start_motor_service+0x2e8>)
   1c386:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1c388:	2203      	movs	r2, #3
   1c38a:	2100      	movs	r1, #0
   1c38c:	2001      	movs	r0, #1
   1c38e:	4b8d      	ldr	r3, [pc, #564]	; (1c5c4 <start_motor_service+0x2e0>)
   1c390:	4798      	blx	r3
   1c392:	0002      	movs	r2, r0
   1c394:	4b8e      	ldr	r3, [pc, #568]	; (1c5d0 <start_motor_service+0x2ec>)
   1c396:	601a      	str	r2, [r3, #0]
   1c398:	4b8d      	ldr	r3, [pc, #564]	; (1c5d0 <start_motor_service+0x2ec>)
   1c39a:	681b      	ldr	r3, [r3, #0]
   1c39c:	2b00      	cmp	r3, #0
   1c39e:	d006      	beq.n	1c3ae <start_motor_service+0xca>
   1c3a0:	4b8b      	ldr	r3, [pc, #556]	; (1c5d0 <start_motor_service+0x2ec>)
   1c3a2:	6818      	ldr	r0, [r3, #0]
   1c3a4:	2300      	movs	r3, #0
   1c3a6:	2200      	movs	r2, #0
   1c3a8:	2100      	movs	r1, #0
   1c3aa:	4c88      	ldr	r4, [pc, #544]	; (1c5cc <start_motor_service+0x2e8>)
   1c3ac:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1c3ae:	230c      	movs	r3, #12
   1c3b0:	18fb      	adds	r3, r7, r3
   1c3b2:	0018      	movs	r0, r3
   1c3b4:	4b81      	ldr	r3, [pc, #516]	; (1c5bc <start_motor_service+0x2d8>)
   1c3b6:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1c3b8:	230c      	movs	r3, #12
   1c3ba:	18fb      	adds	r3, r7, r3
   1c3bc:	2201      	movs	r2, #1
   1c3be:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1c3c0:	230c      	movs	r3, #12
   1c3c2:	18fb      	adds	r3, r7, r3
   1c3c4:	2200      	movs	r2, #0
   1c3c6:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1c3c8:	230c      	movs	r3, #12
   1c3ca:	18fb      	adds	r3, r7, r3
   1c3cc:	0019      	movs	r1, r3
   1c3ce:	202d      	movs	r0, #45	; 0x2d
   1c3d0:	4b7b      	ldr	r3, [pc, #492]	; (1c5c0 <start_motor_service+0x2dc>)
   1c3d2:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1c3d4:	230c      	movs	r3, #12
   1c3d6:	18fb      	adds	r3, r7, r3
   1c3d8:	0019      	movs	r1, r3
   1c3da:	202c      	movs	r0, #44	; 0x2c
   1c3dc:	4b78      	ldr	r3, [pc, #480]	; (1c5c0 <start_motor_service+0x2dc>)
   1c3de:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1c3e0:	230c      	movs	r3, #12
   1c3e2:	18fb      	adds	r3, r7, r3
   1c3e4:	0019      	movs	r1, r3
   1c3e6:	2028      	movs	r0, #40	; 0x28
   1c3e8:	4b75      	ldr	r3, [pc, #468]	; (1c5c0 <start_motor_service+0x2dc>)
   1c3ea:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1c3ec:	230c      	movs	r3, #12
   1c3ee:	18fb      	adds	r3, r7, r3
   1c3f0:	0019      	movs	r1, r3
   1c3f2:	2027      	movs	r0, #39	; 0x27
   1c3f4:	4b72      	ldr	r3, [pc, #456]	; (1c5c0 <start_motor_service+0x2dc>)
   1c3f6:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1c3f8:	230c      	movs	r3, #12
   1c3fa:	18fb      	adds	r3, r7, r3
   1c3fc:	0019      	movs	r1, r3
   1c3fe:	2005      	movs	r0, #5
   1c400:	4b6f      	ldr	r3, [pc, #444]	; (1c5c0 <start_motor_service+0x2dc>)
   1c402:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1c404:	2101      	movs	r1, #1
   1c406:	2028      	movs	r0, #40	; 0x28
   1c408:	4b72      	ldr	r3, [pc, #456]	; (1c5d4 <start_motor_service+0x2f0>)
   1c40a:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1c40c:	2101      	movs	r1, #1
   1c40e:	2005      	movs	r0, #5
   1c410:	4b70      	ldr	r3, [pc, #448]	; (1c5d4 <start_motor_service+0x2f0>)
   1c412:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1c414:	2101      	movs	r1, #1
   1c416:	2027      	movs	r0, #39	; 0x27
   1c418:	4b6e      	ldr	r3, [pc, #440]	; (1c5d4 <start_motor_service+0x2f0>)
   1c41a:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1c41c:	003b      	movs	r3, r7
   1c41e:	0018      	movs	r0, r3
   1c420:	4b61      	ldr	r3, [pc, #388]	; (1c5a8 <start_motor_service+0x2c4>)
   1c422:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1c424:	003b      	movs	r3, r7
   1c426:	222e      	movs	r2, #46	; 0x2e
   1c428:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1c42a:	003b      	movs	r3, r7
   1c42c:	2200      	movs	r2, #0
   1c42e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1c430:	003b      	movs	r3, r7
   1c432:	2200      	movs	r2, #0
   1c434:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1c436:	003b      	movs	r3, r7
   1c438:	2203      	movs	r2, #3
   1c43a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1c43c:	003b      	movs	r3, r7
   1c43e:	0019      	movs	r1, r3
   1c440:	200e      	movs	r0, #14
   1c442:	4b5a      	ldr	r3, [pc, #360]	; (1c5ac <start_motor_service+0x2c8>)
   1c444:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c446:	2100      	movs	r1, #0
   1c448:	200e      	movs	r0, #14
   1c44a:	4b5b      	ldr	r3, [pc, #364]	; (1c5b8 <start_motor_service+0x2d4>)
   1c44c:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c44e:	4b62      	ldr	r3, [pc, #392]	; (1c5d8 <start_motor_service+0x2f4>)
   1c450:	2200      	movs	r2, #0
   1c452:	210e      	movs	r1, #14
   1c454:	0018      	movs	r0, r3
   1c456:	4b57      	ldr	r3, [pc, #348]	; (1c5b4 <start_motor_service+0x2d0>)
   1c458:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1c45a:	003b      	movs	r3, r7
   1c45c:	2226      	movs	r2, #38	; 0x26
   1c45e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1c460:	003b      	movs	r3, r7
   1c462:	2200      	movs	r2, #0
   1c464:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c466:	003b      	movs	r3, r7
   1c468:	2201      	movs	r2, #1
   1c46a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c46c:	003b      	movs	r3, r7
   1c46e:	2202      	movs	r2, #2
   1c470:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1c472:	003b      	movs	r3, r7
   1c474:	0019      	movs	r1, r3
   1c476:	2006      	movs	r0, #6
   1c478:	4b4c      	ldr	r3, [pc, #304]	; (1c5ac <start_motor_service+0x2c8>)
   1c47a:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c47c:	2100      	movs	r1, #0
   1c47e:	2006      	movs	r0, #6
   1c480:	4b4d      	ldr	r3, [pc, #308]	; (1c5b8 <start_motor_service+0x2d4>)
   1c482:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c484:	4b55      	ldr	r3, [pc, #340]	; (1c5dc <start_motor_service+0x2f8>)
   1c486:	2200      	movs	r2, #0
   1c488:	2106      	movs	r1, #6
   1c48a:	0018      	movs	r0, r3
   1c48c:	4b49      	ldr	r3, [pc, #292]	; (1c5b4 <start_motor_service+0x2d0>)
   1c48e:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1c490:	003b      	movs	r3, r7
   1c492:	2225      	movs	r2, #37	; 0x25
   1c494:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1c496:	003b      	movs	r3, r7
   1c498:	2200      	movs	r2, #0
   1c49a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c49c:	003b      	movs	r3, r7
   1c49e:	2201      	movs	r2, #1
   1c4a0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c4a2:	003b      	movs	r3, r7
   1c4a4:	2202      	movs	r2, #2
   1c4a6:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1c4a8:	003b      	movs	r3, r7
   1c4aa:	0019      	movs	r1, r3
   1c4ac:	2005      	movs	r0, #5
   1c4ae:	4b3f      	ldr	r3, [pc, #252]	; (1c5ac <start_motor_service+0x2c8>)
   1c4b0:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c4b2:	2100      	movs	r1, #0
   1c4b4:	2005      	movs	r0, #5
   1c4b6:	4b40      	ldr	r3, [pc, #256]	; (1c5b8 <start_motor_service+0x2d4>)
   1c4b8:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c4ba:	4b48      	ldr	r3, [pc, #288]	; (1c5dc <start_motor_service+0x2f8>)
   1c4bc:	2200      	movs	r2, #0
   1c4be:	2105      	movs	r1, #5
   1c4c0:	0018      	movs	r0, r3
   1c4c2:	4b3c      	ldr	r3, [pc, #240]	; (1c5b4 <start_motor_service+0x2d0>)
   1c4c4:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1c4c6:	003b      	movs	r3, r7
   1c4c8:	221c      	movs	r2, #28
   1c4ca:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1c4cc:	003b      	movs	r3, r7
   1c4ce:	2200      	movs	r2, #0
   1c4d0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c4d2:	003b      	movs	r3, r7
   1c4d4:	2201      	movs	r2, #1
   1c4d6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c4d8:	003b      	movs	r3, r7
   1c4da:	2202      	movs	r2, #2
   1c4dc:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1c4de:	003b      	movs	r3, r7
   1c4e0:	0019      	movs	r1, r3
   1c4e2:	2008      	movs	r0, #8
   1c4e4:	4b31      	ldr	r3, [pc, #196]	; (1c5ac <start_motor_service+0x2c8>)
   1c4e6:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c4e8:	2100      	movs	r1, #0
   1c4ea:	2008      	movs	r0, #8
   1c4ec:	4b32      	ldr	r3, [pc, #200]	; (1c5b8 <start_motor_service+0x2d4>)
   1c4ee:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c4f0:	4b3a      	ldr	r3, [pc, #232]	; (1c5dc <start_motor_service+0x2f8>)
   1c4f2:	2200      	movs	r2, #0
   1c4f4:	2108      	movs	r1, #8
   1c4f6:	0018      	movs	r0, r3
   1c4f8:	4b2e      	ldr	r3, [pc, #184]	; (1c5b4 <start_motor_service+0x2d0>)
   1c4fa:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1c4fc:	003b      	movs	r3, r7
   1c4fe:	2229      	movs	r2, #41	; 0x29
   1c500:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1c502:	003b      	movs	r3, r7
   1c504:	2200      	movs	r2, #0
   1c506:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1c508:	003b      	movs	r3, r7
   1c50a:	2201      	movs	r2, #1
   1c50c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1c50e:	003b      	movs	r3, r7
   1c510:	2202      	movs	r2, #2
   1c512:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1c514:	003b      	movs	r3, r7
   1c516:	0019      	movs	r1, r3
   1c518:	2009      	movs	r0, #9
   1c51a:	4b24      	ldr	r3, [pc, #144]	; (1c5ac <start_motor_service+0x2c8>)
   1c51c:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1c51e:	2100      	movs	r1, #0
   1c520:	2009      	movs	r0, #9
   1c522:	4b25      	ldr	r3, [pc, #148]	; (1c5b8 <start_motor_service+0x2d4>)
   1c524:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1c526:	4b2d      	ldr	r3, [pc, #180]	; (1c5dc <start_motor_service+0x2f8>)
   1c528:	2200      	movs	r2, #0
   1c52a:	2109      	movs	r1, #9
   1c52c:	0018      	movs	r0, r3
   1c52e:	4b21      	ldr	r3, [pc, #132]	; (1c5b4 <start_motor_service+0x2d0>)
   1c530:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c532:	482b      	ldr	r0, [pc, #172]	; (1c5e0 <start_motor_service+0x2fc>)
   1c534:	2300      	movs	r3, #0
   1c536:	9301      	str	r3, [sp, #4]
   1c538:	2301      	movs	r3, #1
   1c53a:	9300      	str	r3, [sp, #0]
   1c53c:	2300      	movs	r3, #0
   1c53e:	2282      	movs	r2, #130	; 0x82
   1c540:	2100      	movs	r1, #0
   1c542:	4c28      	ldr	r4, [pc, #160]	; (1c5e4 <start_motor_service+0x300>)
   1c544:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1c546:	4828      	ldr	r0, [pc, #160]	; (1c5e8 <start_motor_service+0x304>)
   1c548:	2300      	movs	r3, #0
   1c54a:	9301      	str	r3, [sp, #4]
   1c54c:	2301      	movs	r3, #1
   1c54e:	9300      	str	r3, [sp, #0]
   1c550:	2300      	movs	r3, #0
   1c552:	2282      	movs	r2, #130	; 0x82
   1c554:	2100      	movs	r1, #0
   1c556:	4c23      	ldr	r4, [pc, #140]	; (1c5e4 <start_motor_service+0x300>)
   1c558:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1c55a:	4824      	ldr	r0, [pc, #144]	; (1c5ec <start_motor_service+0x308>)
   1c55c:	4b24      	ldr	r3, [pc, #144]	; (1c5f0 <start_motor_service+0x30c>)
   1c55e:	9301      	str	r3, [sp, #4]
   1c560:	2301      	movs	r3, #1
   1c562:	9300      	str	r3, [sp, #0]
   1c564:	2300      	movs	r3, #0
   1c566:	2282      	movs	r2, #130	; 0x82
   1c568:	2100      	movs	r1, #0
   1c56a:	4c1e      	ldr	r4, [pc, #120]	; (1c5e4 <start_motor_service+0x300>)
   1c56c:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1c56e:	4b21      	ldr	r3, [pc, #132]	; (1c5f4 <start_motor_service+0x310>)
   1c570:	795b      	ldrb	r3, [r3, #5]
   1c572:	2b00      	cmp	r3, #0
   1c574:	d00a      	beq.n	1c58c <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1c576:	23af      	movs	r3, #175	; 0xaf
   1c578:	009a      	lsls	r2, r3, #2
   1c57a:	481f      	ldr	r0, [pc, #124]	; (1c5f8 <start_motor_service+0x314>)
   1c57c:	2300      	movs	r3, #0
   1c57e:	9301      	str	r3, [sp, #4]
   1c580:	2301      	movs	r3, #1
   1c582:	9300      	str	r3, [sp, #0]
   1c584:	2300      	movs	r3, #0
   1c586:	2100      	movs	r1, #0
   1c588:	4c16      	ldr	r4, [pc, #88]	; (1c5e4 <start_motor_service+0x300>)
   1c58a:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)750,NULL,1, &motorTask);
   1c58c:	4a1b      	ldr	r2, [pc, #108]	; (1c5fc <start_motor_service+0x318>)
   1c58e:	481c      	ldr	r0, [pc, #112]	; (1c600 <start_motor_service+0x31c>)
   1c590:	4b1c      	ldr	r3, [pc, #112]	; (1c604 <start_motor_service+0x320>)
   1c592:	9301      	str	r3, [sp, #4]
   1c594:	2301      	movs	r3, #1
   1c596:	9300      	str	r3, [sp, #0]
   1c598:	2300      	movs	r3, #0
   1c59a:	2100      	movs	r1, #0
   1c59c:	4c11      	ldr	r4, [pc, #68]	; (1c5e4 <start_motor_service+0x300>)
   1c59e:	47a0      	blx	r4

}
   1c5a0:	46c0      	nop			; (mov r8, r8)
   1c5a2:	46bd      	mov	sp, r7
   1c5a4:	b009      	add	sp, #36	; 0x24
   1c5a6:	bd90      	pop	{r4, r7, pc}
   1c5a8:	0001df8d 	.word	0x0001df8d
   1c5ac:	0001dfc1 	.word	0x0001dfc1
   1c5b0:	0001a0a9 	.word	0x0001a0a9
   1c5b4:	0002247d 	.word	0x0002247d
   1c5b8:	000224e1 	.word	0x000224e1
   1c5bc:	00019031 	.word	0x00019031
   1c5c0:	00022ff1 	.word	0x00022ff1
   1c5c4:	0001f105 	.word	0x0001f105
   1c5c8:	20000238 	.word	0x20000238
   1c5cc:	0001f1c1 	.word	0x0001f1c1
   1c5d0:	2000023c 	.word	0x2000023c
   1c5d4:	00019099 	.word	0x00019099
   1c5d8:	0001c911 	.word	0x0001c911
   1c5dc:	0001bdf9 	.word	0x0001bdf9
   1c5e0:	0001a2c1 	.word	0x0001a2c1
   1c5e4:	0001fc29 	.word	0x0001fc29
   1c5e8:	0001a32d 	.word	0x0001a32d
   1c5ec:	0001cc21 	.word	0x0001cc21
   1c5f0:	20000244 	.word	0x20000244
   1c5f4:	2000062c 	.word	0x2000062c
   1c5f8:	00019521 	.word	0x00019521
   1c5fc:	000002ee 	.word	0x000002ee
   1c600:	0001be0d 	.word	0x0001be0d
   1c604:	20000240 	.word	0x20000240

0001c608 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1c608:	b580      	push	{r7, lr}
   1c60a:	b082      	sub	sp, #8
   1c60c:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1c60e:	1dfb      	adds	r3, r7, #7
   1c610:	2200      	movs	r2, #0
   1c612:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1c614:	4b4c      	ldr	r3, [pc, #304]	; (1c748 <motor_checkSleepElligible+0x140>)
   1c616:	795b      	ldrb	r3, [r3, #5]
   1c618:	2b00      	cmp	r3, #0
   1c61a:	d00b      	beq.n	1c634 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1c61c:	4b4a      	ldr	r3, [pc, #296]	; (1c748 <motor_checkSleepElligible+0x140>)
   1c61e:	791b      	ldrb	r3, [r3, #4]
   1c620:	2b00      	cmp	r3, #0
   1c622:	d003      	beq.n	1c62c <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1c624:	1dfb      	adds	r3, r7, #7
   1c626:	2213      	movs	r2, #19
   1c628:	701a      	strb	r2, [r3, #0]
   1c62a:	e00e      	b.n	1c64a <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1c62c:	1dfb      	adds	r3, r7, #7
   1c62e:	2211      	movs	r2, #17
   1c630:	701a      	strb	r2, [r3, #0]
   1c632:	e00a      	b.n	1c64a <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c634:	4b44      	ldr	r3, [pc, #272]	; (1c748 <motor_checkSleepElligible+0x140>)
   1c636:	785b      	ldrb	r3, [r3, #1]
   1c638:	2b00      	cmp	r3, #0
   1c63a:	d003      	beq.n	1c644 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1c63c:	1dfb      	adds	r3, r7, #7
   1c63e:	220e      	movs	r2, #14
   1c640:	701a      	strb	r2, [r3, #0]
   1c642:	e002      	b.n	1c64a <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1c644:	1dfb      	adds	r3, r7, #7
   1c646:	220c      	movs	r2, #12
   1c648:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1c64a:	1dbb      	adds	r3, r7, #6
   1c64c:	2201      	movs	r2, #1
   1c64e:	701a      	strb	r2, [r3, #0]
	while(j--)
   1c650:	e00c      	b.n	1c66c <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1c652:	1dfb      	adds	r3, r7, #7
   1c654:	781b      	ldrb	r3, [r3, #0]
   1c656:	4a3d      	ldr	r2, [pc, #244]	; (1c74c <motor_checkSleepElligible+0x144>)
   1c658:	5cd3      	ldrb	r3, [r2, r3]
   1c65a:	2201      	movs	r2, #1
   1c65c:	4053      	eors	r3, r2
   1c65e:	b2db      	uxtb	r3, r3
   1c660:	2b00      	cmp	r3, #0
   1c662:	d003      	beq.n	1c66c <motor_checkSleepElligible+0x64>
		{
			event=false;
   1c664:	1dbb      	adds	r3, r7, #6
   1c666:	2200      	movs	r2, #0
   1c668:	701a      	strb	r2, [r3, #0]
			break;
   1c66a:	e006      	b.n	1c67a <motor_checkSleepElligible+0x72>
	while(j--)
   1c66c:	1dfb      	adds	r3, r7, #7
   1c66e:	781b      	ldrb	r3, [r3, #0]
   1c670:	1dfa      	adds	r2, r7, #7
   1c672:	1e59      	subs	r1, r3, #1
   1c674:	7011      	strb	r1, [r2, #0]
   1c676:	2b00      	cmp	r3, #0
   1c678:	d1eb      	bne.n	1c652 <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1c67a:	4b33      	ldr	r3, [pc, #204]	; (1c748 <motor_checkSleepElligible+0x140>)
   1c67c:	78db      	ldrb	r3, [r3, #3]
   1c67e:	2b00      	cmp	r3, #0
   1c680:	d00e      	beq.n	1c6a0 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1c682:	1dbb      	adds	r3, r7, #6
   1c684:	781b      	ldrb	r3, [r3, #0]
   1c686:	2b00      	cmp	r3, #0
   1c688:	d003      	beq.n	1c692 <motor_checkSleepElligible+0x8a>
   1c68a:	4b31      	ldr	r3, [pc, #196]	; (1c750 <motor_checkSleepElligible+0x148>)
   1c68c:	781b      	ldrb	r3, [r3, #0]
   1c68e:	2b01      	cmp	r3, #1
   1c690:	d003      	beq.n	1c69a <motor_checkSleepElligible+0x92>
   1c692:	4b2f      	ldr	r3, [pc, #188]	; (1c750 <motor_checkSleepElligible+0x148>)
   1c694:	785b      	ldrb	r3, [r3, #1]
   1c696:	2b01      	cmp	r3, #1
   1c698:	d102      	bne.n	1c6a0 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1c69a:	1dbb      	adds	r3, r7, #6
   1c69c:	2200      	movs	r2, #0
   1c69e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c6a0:	4b2c      	ldr	r3, [pc, #176]	; (1c754 <motor_checkSleepElligible+0x14c>)
   1c6a2:	4798      	blx	r3
   1c6a4:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1c6a6:	d145      	bne.n	1c734 <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1c6a8:	4b2b      	ldr	r3, [pc, #172]	; (1c758 <motor_checkSleepElligible+0x150>)
   1c6aa:	781b      	ldrb	r3, [r3, #0]
   1c6ac:	b2db      	uxtb	r3, r3
   1c6ae:	2201      	movs	r2, #1
   1c6b0:	4053      	eors	r3, r2
   1c6b2:	b2db      	uxtb	r3, r3
   1c6b4:	2b00      	cmp	r3, #0
   1c6b6:	d03d      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c6b8:	1dbb      	adds	r3, r7, #6
   1c6ba:	781b      	ldrb	r3, [r3, #0]
   1c6bc:	2b00      	cmp	r3, #0
   1c6be:	d039      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c6c0:	4b26      	ldr	r3, [pc, #152]	; (1c75c <motor_checkSleepElligible+0x154>)
   1c6c2:	781b      	ldrb	r3, [r3, #0]
   1c6c4:	2201      	movs	r2, #1
   1c6c6:	4053      	eors	r3, r2
   1c6c8:	b2db      	uxtb	r3, r3
   1c6ca:	2b00      	cmp	r3, #0
   1c6cc:	d032      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c6ce:	4b24      	ldr	r3, [pc, #144]	; (1c760 <motor_checkSleepElligible+0x158>)
   1c6d0:	781b      	ldrb	r3, [r3, #0]
   1c6d2:	2201      	movs	r2, #1
   1c6d4:	4053      	eors	r3, r2
   1c6d6:	b2db      	uxtb	r3, r3
   1c6d8:	2b00      	cmp	r3, #0
   1c6da:	d02b      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1c6dc:	4b21      	ldr	r3, [pc, #132]	; (1c764 <motor_checkSleepElligible+0x15c>)
   1c6de:	781b      	ldrb	r3, [r3, #0]
   1c6e0:	2201      	movs	r2, #1
   1c6e2:	4053      	eors	r3, r2
   1c6e4:	b2db      	uxtb	r3, r3
   1c6e6:	2b00      	cmp	r3, #0
   1c6e8:	d024      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c6ea:	4b1f      	ldr	r3, [pc, #124]	; (1c768 <motor_checkSleepElligible+0x160>)
   1c6ec:	781b      	ldrb	r3, [r3, #0]
   1c6ee:	2201      	movs	r2, #1
   1c6f0:	4053      	eors	r3, r2
   1c6f2:	b2db      	uxtb	r3, r3
   1c6f4:	2b00      	cmp	r3, #0
   1c6f6:	d01d      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c6f8:	4b1c      	ldr	r3, [pc, #112]	; (1c76c <motor_checkSleepElligible+0x164>)
   1c6fa:	781b      	ldrb	r3, [r3, #0]
   1c6fc:	2201      	movs	r2, #1
   1c6fe:	4053      	eors	r3, r2
   1c700:	b2db      	uxtb	r3, r3
   1c702:	2b00      	cmp	r3, #0
   1c704:	d016      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c706:	4b1a      	ldr	r3, [pc, #104]	; (1c770 <motor_checkSleepElligible+0x168>)
   1c708:	781b      	ldrb	r3, [r3, #0]
   1c70a:	b2db      	uxtb	r3, r3
   1c70c:	2201      	movs	r2, #1
   1c70e:	4053      	eors	r3, r2
   1c710:	b2db      	uxtb	r3, r3
   1c712:	2b00      	cmp	r3, #0
   1c714:	d00e      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c716:	4b17      	ldr	r3, [pc, #92]	; (1c774 <motor_checkSleepElligible+0x16c>)
   1c718:	781b      	ldrb	r3, [r3, #0]
   1c71a:	b2db      	uxtb	r3, r3
   1c71c:	2201      	movs	r2, #1
   1c71e:	4053      	eors	r3, r2
   1c720:	b2db      	uxtb	r3, r3
   1c722:	2b00      	cmp	r3, #0
   1c724:	d006      	beq.n	1c734 <motor_checkSleepElligible+0x12c>
   1c726:	4b14      	ldr	r3, [pc, #80]	; (1c778 <motor_checkSleepElligible+0x170>)
   1c728:	781b      	ldrb	r3, [r3, #0]
   1c72a:	b2db      	uxtb	r3, r3
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d101      	bne.n	1c734 <motor_checkSleepElligible+0x12c>
   1c730:	2301      	movs	r3, #1
   1c732:	e000      	b.n	1c736 <motor_checkSleepElligible+0x12e>
   1c734:	2300      	movs	r3, #0
   1c736:	1c1a      	adds	r2, r3, #0
   1c738:	2301      	movs	r3, #1
   1c73a:	4013      	ands	r3, r2
   1c73c:	b2db      	uxtb	r3, r3
	
}
   1c73e:	0018      	movs	r0, r3
   1c740:	46bd      	mov	sp, r7
   1c742:	b002      	add	sp, #8
   1c744:	bd80      	pop	{r7, pc}
   1c746:	46c0      	nop			; (mov r8, r8)
   1c748:	2000062c 	.word	0x2000062c
   1c74c:	2000070c 	.word	0x2000070c
   1c750:	200007bc 	.word	0x200007bc
   1c754:	0001ab99 	.word	0x0001ab99
   1c758:	20000722 	.word	0x20000722
   1c75c:	2000080d 	.word	0x2000080d
   1c760:	20000789 	.word	0x20000789
   1c764:	20000792 	.word	0x20000792
   1c768:	20000791 	.word	0x20000791
   1c76c:	20000780 	.word	0x20000780
   1c770:	2000076e 	.word	0x2000076e
   1c774:	20000797 	.word	0x20000797
   1c778:	20000778 	.word	0x20000778

0001c77c <configure_ac>:


void configure_ac(void)
{
   1c77c:	b580      	push	{r7, lr}
   1c77e:	b08a      	sub	sp, #40	; 0x28
   1c780:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1c782:	231c      	movs	r3, #28
   1c784:	18fb      	adds	r3, r7, r3
   1c786:	0018      	movs	r0, r3
   1c788:	2305      	movs	r3, #5
   1c78a:	001a      	movs	r2, r3
   1c78c:	2100      	movs	r1, #0
   1c78e:	4b2c      	ldr	r3, [pc, #176]	; (1c840 <configure_ac+0xc4>)
   1c790:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1c792:	2324      	movs	r3, #36	; 0x24
   1c794:	18fb      	adds	r3, r7, r3
   1c796:	0018      	movs	r0, r3
   1c798:	4b2a      	ldr	r3, [pc, #168]	; (1c844 <configure_ac+0xc8>)
   1c79a:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1c79c:	2324      	movs	r3, #36	; 0x24
   1c79e:	18fb      	adds	r3, r7, r3
   1c7a0:	2201      	movs	r2, #1
   1c7a2:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1c7a4:	2324      	movs	r3, #36	; 0x24
   1c7a6:	18fb      	adds	r3, r7, r3
   1c7a8:	2206      	movs	r2, #6
   1c7aa:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1c7ac:	2324      	movs	r3, #36	; 0x24
   1c7ae:	18fa      	adds	r2, r7, r3
   1c7b0:	4925      	ldr	r1, [pc, #148]	; (1c848 <configure_ac+0xcc>)
   1c7b2:	4b26      	ldr	r3, [pc, #152]	; (1c84c <configure_ac+0xd0>)
   1c7b4:	0018      	movs	r0, r3
   1c7b6:	4b26      	ldr	r3, [pc, #152]	; (1c850 <configure_ac+0xd4>)
   1c7b8:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1c7ba:	1d3b      	adds	r3, r7, #4
   1c7bc:	2200      	movs	r2, #0
   1c7be:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1c7c0:	1d3b      	adds	r3, r7, #4
   1c7c2:	2200      	movs	r2, #0
   1c7c4:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1c7c6:	1d3b      	adds	r3, r7, #4
   1c7c8:	2200      	movs	r2, #0
   1c7ca:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1c7cc:	1d3b      	adds	r3, r7, #4
   1c7ce:	2200      	movs	r2, #0
   1c7d0:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1c7d2:	1d3b      	adds	r3, r7, #4
   1c7d4:	2200      	movs	r2, #0
   1c7d6:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1c7d8:	1d3b      	adds	r3, r7, #4
   1c7da:	22a0      	movs	r2, #160	; 0xa0
   1c7dc:	00d2      	lsls	r2, r2, #3
   1c7de:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1c7e0:	1d3b      	adds	r3, r7, #4
   1c7e2:	222d      	movs	r2, #45	; 0x2d
   1c7e4:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1c7e6:	1d3b      	adds	r3, r7, #4
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1c7ec:	1d3a      	adds	r2, r7, #4
   1c7ee:	4b17      	ldr	r3, [pc, #92]	; (1c84c <configure_ac+0xd0>)
   1c7f0:	2100      	movs	r1, #0
   1c7f2:	0018      	movs	r0, r3
   1c7f4:	4b17      	ldr	r3, [pc, #92]	; (1c854 <configure_ac+0xd8>)
   1c7f6:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1c7f8:	4b14      	ldr	r3, [pc, #80]	; (1c84c <configure_ac+0xd0>)
   1c7fa:	2100      	movs	r1, #0
   1c7fc:	0018      	movs	r0, r3
   1c7fe:	4b16      	ldr	r3, [pc, #88]	; (1c858 <configure_ac+0xdc>)
   1c800:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1c802:	231c      	movs	r3, #28
   1c804:	18fb      	adds	r3, r7, r3
   1c806:	2201      	movs	r2, #1
   1c808:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1c80a:	231c      	movs	r3, #28
   1c80c:	18fa      	adds	r2, r7, r3
   1c80e:	4b0f      	ldr	r3, [pc, #60]	; (1c84c <configure_ac+0xd0>)
   1c810:	0011      	movs	r1, r2
   1c812:	0018      	movs	r0, r3
   1c814:	4b11      	ldr	r3, [pc, #68]	; (1c85c <configure_ac+0xe0>)
   1c816:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1c818:	4b0c      	ldr	r3, [pc, #48]	; (1c84c <configure_ac+0xd0>)
   1c81a:	0018      	movs	r0, r3
   1c81c:	4b10      	ldr	r3, [pc, #64]	; (1c860 <configure_ac+0xe4>)
   1c81e:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1c820:	4910      	ldr	r1, [pc, #64]	; (1c864 <configure_ac+0xe8>)
   1c822:	4b0a      	ldr	r3, [pc, #40]	; (1c84c <configure_ac+0xd0>)
   1c824:	2200      	movs	r2, #0
   1c826:	0018      	movs	r0, r3
   1c828:	4b0f      	ldr	r3, [pc, #60]	; (1c868 <configure_ac+0xec>)
   1c82a:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1c82c:	4b07      	ldr	r3, [pc, #28]	; (1c84c <configure_ac+0xd0>)
   1c82e:	2100      	movs	r1, #0
   1c830:	0018      	movs	r0, r3
   1c832:	4b0e      	ldr	r3, [pc, #56]	; (1c86c <configure_ac+0xf0>)
   1c834:	4798      	blx	r3
}
   1c836:	46c0      	nop			; (mov r8, r8)
   1c838:	46bd      	mov	sp, r7
   1c83a:	b00a      	add	sp, #40	; 0x28
   1c83c:	bd80      	pop	{r7, pc}
   1c83e:	46c0      	nop			; (mov r8, r8)
   1c840:	00028e93 	.word	0x00028e93
   1c844:	000189b5 	.word	0x000189b5
   1c848:	42004400 	.word	0x42004400
   1c84c:	2000088c 	.word	0x2000088c
   1c850:	0001cdb5 	.word	0x0001cdb5
   1c854:	0001ce95 	.word	0x0001ce95
   1c858:	00018b05 	.word	0x00018b05
   1c85c:	00018a25 	.word	0x00018a25
   1c860:	000189ed 	.word	0x000189ed
   1c864:	0001c901 	.word	0x0001c901
   1c868:	000228a9 	.word	0x000228a9
   1c86c:	00018c6d 	.word	0x00018c6d

0001c870 <configure_rtc>:

void configure_rtc(void)
{
   1c870:	b580      	push	{r7, lr}
   1c872:	b088      	sub	sp, #32
   1c874:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
   1c876:	1d3b      	adds	r3, r7, #4
   1c878:	0018      	movs	r0, r3
   1c87a:	230b      	movs	r3, #11
   1c87c:	001a      	movs	r2, r3
   1c87e:	2100      	movs	r1, #0
   1c880:	4b17      	ldr	r3, [pc, #92]	; (1c8e0 <configure_rtc+0x70>)
   1c882:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
   1c884:	2310      	movs	r3, #16
   1c886:	18fb      	adds	r3, r7, r3
   1c888:	0018      	movs	r0, r3
   1c88a:	4b16      	ldr	r3, [pc, #88]	; (1c8e4 <configure_rtc+0x74>)
   1c88c:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
   1c88e:	2310      	movs	r3, #16
   1c890:	18fb      	adds	r3, r7, r3
   1c892:	2200      	movs	r2, #0
   1c894:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
   1c896:	2310      	movs	r3, #16
   1c898:	18fb      	adds	r3, r7, r3
   1c89a:	2200      	movs	r2, #0
   1c89c:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
   1c89e:	2310      	movs	r3, #16
   1c8a0:	18fb      	adds	r3, r7, r3
   1c8a2:	2201      	movs	r2, #1
   1c8a4:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
   1c8a6:	2310      	movs	r3, #16
   1c8a8:	18fa      	adds	r2, r7, r3
   1c8aa:	490f      	ldr	r1, [pc, #60]	; (1c8e8 <configure_rtc+0x78>)
   1c8ac:	4b0f      	ldr	r3, [pc, #60]	; (1c8ec <configure_rtc+0x7c>)
   1c8ae:	0018      	movs	r0, r3
   1c8b0:	4b0f      	ldr	r3, [pc, #60]	; (1c8f0 <configure_rtc+0x80>)
   1c8b2:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
   1c8b4:	4b0d      	ldr	r3, [pc, #52]	; (1c8ec <configure_rtc+0x7c>)
   1c8b6:	210a      	movs	r1, #10
   1c8b8:	0018      	movs	r0, r3
   1c8ba:	4b0e      	ldr	r3, [pc, #56]	; (1c8f4 <configure_rtc+0x84>)
   1c8bc:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
   1c8be:	1d3b      	adds	r3, r7, #4
   1c8c0:	2201      	movs	r2, #1
   1c8c2:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
   1c8c4:	1d3a      	adds	r2, r7, #4
   1c8c6:	4b09      	ldr	r3, [pc, #36]	; (1c8ec <configure_rtc+0x7c>)
   1c8c8:	0011      	movs	r1, r2
   1c8ca:	0018      	movs	r0, r3
   1c8cc:	4b0a      	ldr	r3, [pc, #40]	; (1c8f8 <configure_rtc+0x88>)
   1c8ce:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
   1c8d0:	4b06      	ldr	r3, [pc, #24]	; (1c8ec <configure_rtc+0x7c>)
   1c8d2:	0018      	movs	r0, r3
   1c8d4:	4b09      	ldr	r3, [pc, #36]	; (1c8fc <configure_rtc+0x8c>)
   1c8d6:	4798      	blx	r3
}
   1c8d8:	46c0      	nop			; (mov r8, r8)
   1c8da:	46bd      	mov	sp, r7
   1c8dc:	b008      	add	sp, #32
   1c8de:	bd80      	pop	{r7, pc}
   1c8e0:	00028e93 	.word	0x00028e93
   1c8e4:	00019175 	.word	0x00019175
   1c8e8:	40001400 	.word	0x40001400
   1c8ec:	20000868 	.word	0x20000868
   1c8f0:	0001e3dd 	.word	0x0001e3dd
   1c8f4:	0001e4f9 	.word	0x0001e4f9
   1c8f8:	000191d1 	.word	0x000191d1
   1c8fc:	0001e1b5 	.word	0x0001e1b5

0001c900 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
   1c900:	b580      	push	{r7, lr}
   1c902:	b082      	sub	sp, #8
   1c904:	af00      	add	r7, sp, #0
   1c906:	6078      	str	r0, [r7, #4]
	;
	//eventOccured = true;
}
   1c908:	46c0      	nop			; (mov r8, r8)
   1c90a:	46bd      	mov	sp, r7
   1c90c:	b002      	add	sp, #8
   1c90e:	bd80      	pop	{r7, pc}

0001c910 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1c910:	b580      	push	{r7, lr}
   1c912:	af00      	add	r7, sp, #0
	eventOccured = true;
   1c914:	4b06      	ldr	r3, [pc, #24]	; (1c930 <motor_feedback_callback+0x20>)
   1c916:	2201      	movs	r2, #1
   1c918:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1c91a:	4b06      	ldr	r3, [pc, #24]	; (1c934 <motor_feedback_callback+0x24>)
   1c91c:	2201      	movs	r2, #1
   1c91e:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1c920:	4b05      	ldr	r3, [pc, #20]	; (1c938 <motor_feedback_callback+0x28>)
   1c922:	4798      	blx	r3
   1c924:	0002      	movs	r2, r0
   1c926:	4b05      	ldr	r3, [pc, #20]	; (1c93c <motor_feedback_callback+0x2c>)
   1c928:	601a      	str	r2, [r3, #0]
}
   1c92a:	46c0      	nop			; (mov r8, r8)
   1c92c:	46bd      	mov	sp, r7
   1c92e:	bd80      	pop	{r7, pc}
   1c930:	20000722 	.word	0x20000722
   1c934:	20000782 	.word	0x20000782
   1c938:	000202e9 	.word	0x000202e9
   1c93c:	2000085c 	.word	0x2000085c

0001c940 <configure_event>:

void configure_event(void)
{
   1c940:	b580      	push	{r7, lr}
   1c942:	b082      	sub	sp, #8
   1c944:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
   1c946:	1d3b      	adds	r3, r7, #4
   1c948:	0018      	movs	r0, r3
   1c94a:	4b0d      	ldr	r3, [pc, #52]	; (1c980 <configure_event+0x40>)
   1c94c:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
   1c94e:	1d3b      	adds	r3, r7, #4
   1c950:	2203      	movs	r2, #3
   1c952:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
   1c954:	1d3b      	adds	r3, r7, #4
   1c956:	2200      	movs	r2, #0
   1c958:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
   1c95a:	1d3b      	adds	r3, r7, #4
   1c95c:	2202      	movs	r2, #2
   1c95e:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
   1c960:	1d3a      	adds	r2, r7, #4
   1c962:	4b08      	ldr	r3, [pc, #32]	; (1c984 <configure_event+0x44>)
   1c964:	0011      	movs	r1, r2
   1c966:	0018      	movs	r0, r3
   1c968:	4b07      	ldr	r3, [pc, #28]	; (1c988 <configure_event+0x48>)
   1c96a:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
   1c96c:	4b05      	ldr	r3, [pc, #20]	; (1c984 <configure_event+0x44>)
   1c96e:	2119      	movs	r1, #25
   1c970:	0018      	movs	r0, r3
   1c972:	4b06      	ldr	r3, [pc, #24]	; (1c98c <configure_event+0x4c>)
   1c974:	4798      	blx	r3
}
   1c976:	46c0      	nop			; (mov r8, r8)
   1c978:	46bd      	mov	sp, r7
   1c97a:	b002      	add	sp, #8
   1c97c:	bd80      	pop	{r7, pc}
   1c97e:	46c0      	nop			; (mov r8, r8)
   1c980:	00022769 	.word	0x00022769
   1c984:	20000884 	.word	0x20000884
   1c988:	00022791 	.word	0x00022791
   1c98c:	00022859 	.word	0x00022859

0001c990 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
   1c990:	b580      	push	{r7, lr}
   1c992:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1c994:	4b28      	ldr	r3, [pc, #160]	; (1ca38 <operateOnButtonEvent+0xa8>)
   1c996:	2200      	movs	r2, #0
   1c998:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1c99a:	2026      	movs	r0, #38	; 0x26
   1c99c:	4b27      	ldr	r3, [pc, #156]	; (1ca3c <operateOnButtonEvent+0xac>)
   1c99e:	4798      	blx	r3
   1c9a0:	0003      	movs	r3, r0
   1c9a2:	001a      	movs	r2, r3
   1c9a4:	2301      	movs	r3, #1
   1c9a6:	4053      	eors	r3, r2
   1c9a8:	b2db      	uxtb	r3, r3
   1c9aa:	2b00      	cmp	r3, #0
   1c9ac:	d008      	beq.n	1c9c0 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1c9ae:	4b24      	ldr	r3, [pc, #144]	; (1ca40 <operateOnButtonEvent+0xb0>)
   1c9b0:	4798      	blx	r3
   1c9b2:	0002      	movs	r2, r0
   1c9b4:	4b23      	ldr	r3, [pc, #140]	; (1ca44 <operateOnButtonEvent+0xb4>)
   1c9b6:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1c9b8:	4b23      	ldr	r3, [pc, #140]	; (1ca48 <operateOnButtonEvent+0xb8>)
   1c9ba:	2201      	movs	r2, #1
   1c9bc:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1c9be:	e037      	b.n	1ca30 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1c9c0:	2025      	movs	r0, #37	; 0x25
   1c9c2:	4b1e      	ldr	r3, [pc, #120]	; (1ca3c <operateOnButtonEvent+0xac>)
   1c9c4:	4798      	blx	r3
   1c9c6:	0003      	movs	r3, r0
   1c9c8:	001a      	movs	r2, r3
   1c9ca:	2301      	movs	r3, #1
   1c9cc:	4053      	eors	r3, r2
   1c9ce:	b2db      	uxtb	r3, r3
   1c9d0:	2b00      	cmp	r3, #0
   1c9d2:	d008      	beq.n	1c9e6 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1c9d4:	4b1a      	ldr	r3, [pc, #104]	; (1ca40 <operateOnButtonEvent+0xb0>)
   1c9d6:	4798      	blx	r3
   1c9d8:	0002      	movs	r2, r0
   1c9da:	4b1a      	ldr	r3, [pc, #104]	; (1ca44 <operateOnButtonEvent+0xb4>)
   1c9dc:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1c9de:	4b1a      	ldr	r3, [pc, #104]	; (1ca48 <operateOnButtonEvent+0xb8>)
   1c9e0:	2202      	movs	r2, #2
   1c9e2:	701a      	strb	r2, [r3, #0]
}
   1c9e4:	e024      	b.n	1ca30 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1c9e6:	201c      	movs	r0, #28
   1c9e8:	4b14      	ldr	r3, [pc, #80]	; (1ca3c <operateOnButtonEvent+0xac>)
   1c9ea:	4798      	blx	r3
   1c9ec:	0003      	movs	r3, r0
   1c9ee:	001a      	movs	r2, r3
   1c9f0:	2301      	movs	r3, #1
   1c9f2:	4053      	eors	r3, r2
   1c9f4:	b2db      	uxtb	r3, r3
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	d008      	beq.n	1ca0c <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1c9fa:	4b11      	ldr	r3, [pc, #68]	; (1ca40 <operateOnButtonEvent+0xb0>)
   1c9fc:	4798      	blx	r3
   1c9fe:	0002      	movs	r2, r0
   1ca00:	4b10      	ldr	r3, [pc, #64]	; (1ca44 <operateOnButtonEvent+0xb4>)
   1ca02:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1ca04:	4b10      	ldr	r3, [pc, #64]	; (1ca48 <operateOnButtonEvent+0xb8>)
   1ca06:	2203      	movs	r2, #3
   1ca08:	701a      	strb	r2, [r3, #0]
}
   1ca0a:	e011      	b.n	1ca30 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1ca0c:	2029      	movs	r0, #41	; 0x29
   1ca0e:	4b0b      	ldr	r3, [pc, #44]	; (1ca3c <operateOnButtonEvent+0xac>)
   1ca10:	4798      	blx	r3
   1ca12:	0003      	movs	r3, r0
   1ca14:	001a      	movs	r2, r3
   1ca16:	2301      	movs	r3, #1
   1ca18:	4053      	eors	r3, r2
   1ca1a:	b2db      	uxtb	r3, r3
   1ca1c:	2b00      	cmp	r3, #0
   1ca1e:	d007      	beq.n	1ca30 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1ca20:	4b07      	ldr	r3, [pc, #28]	; (1ca40 <operateOnButtonEvent+0xb0>)
   1ca22:	4798      	blx	r3
   1ca24:	0002      	movs	r2, r0
   1ca26:	4b07      	ldr	r3, [pc, #28]	; (1ca44 <operateOnButtonEvent+0xb4>)
   1ca28:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1ca2a:	4b07      	ldr	r3, [pc, #28]	; (1ca48 <operateOnButtonEvent+0xb8>)
   1ca2c:	2204      	movs	r2, #4
   1ca2e:	701a      	strb	r2, [r3, #0]
}
   1ca30:	46c0      	nop			; (mov r8, r8)
   1ca32:	46bd      	mov	sp, r7
   1ca34:	bd80      	pop	{r7, pc}
   1ca36:	46c0      	nop			; (mov r8, r8)
   1ca38:	20000797 	.word	0x20000797
   1ca3c:	00019055 	.word	0x00019055
   1ca40:	000202cd 	.word	0x000202cd
   1ca44:	20000760 	.word	0x20000760
   1ca48:	20000778 	.word	0x20000778

0001ca4c <buttonFilter>:

void buttonFilter(void)
{
   1ca4c:	b580      	push	{r7, lr}
   1ca4e:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1ca50:	4b47      	ldr	r3, [pc, #284]	; (1cb70 <buttonFilter+0x124>)
   1ca52:	781b      	ldrb	r3, [r3, #0]
   1ca54:	b2db      	uxtb	r3, r3
   1ca56:	2b00      	cmp	r3, #0
   1ca58:	d100      	bne.n	1ca5c <buttonFilter+0x10>
   1ca5a:	e086      	b.n	1cb6a <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1ca5c:	4b44      	ldr	r3, [pc, #272]	; (1cb70 <buttonFilter+0x124>)
   1ca5e:	781b      	ldrb	r3, [r3, #0]
   1ca60:	b2db      	uxtb	r3, r3
   1ca62:	2b01      	cmp	r3, #1
   1ca64:	d111      	bne.n	1ca8a <buttonFilter+0x3e>
   1ca66:	2026      	movs	r0, #38	; 0x26
   1ca68:	4b42      	ldr	r3, [pc, #264]	; (1cb74 <buttonFilter+0x128>)
   1ca6a:	4798      	blx	r3
   1ca6c:	0003      	movs	r3, r0
   1ca6e:	001a      	movs	r2, r3
   1ca70:	2301      	movs	r3, #1
   1ca72:	4053      	eors	r3, r2
   1ca74:	b2db      	uxtb	r3, r3
   1ca76:	2b00      	cmp	r3, #0
   1ca78:	d007      	beq.n	1ca8a <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1ca7a:	4b3d      	ldr	r3, [pc, #244]	; (1cb70 <buttonFilter+0x124>)
   1ca7c:	2200      	movs	r2, #0
   1ca7e:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1ca80:	2100      	movs	r1, #0
   1ca82:	2000      	movs	r0, #0
   1ca84:	4b3c      	ldr	r3, [pc, #240]	; (1cb78 <buttonFilter+0x12c>)
   1ca86:	4798      	blx	r3
   1ca88:	e06f      	b.n	1cb6a <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1ca8a:	4b39      	ldr	r3, [pc, #228]	; (1cb70 <buttonFilter+0x124>)
   1ca8c:	781b      	ldrb	r3, [r3, #0]
   1ca8e:	b2db      	uxtb	r3, r3
   1ca90:	2b02      	cmp	r3, #2
   1ca92:	d112      	bne.n	1caba <buttonFilter+0x6e>
   1ca94:	2025      	movs	r0, #37	; 0x25
   1ca96:	4b37      	ldr	r3, [pc, #220]	; (1cb74 <buttonFilter+0x128>)
   1ca98:	4798      	blx	r3
   1ca9a:	0003      	movs	r3, r0
   1ca9c:	001a      	movs	r2, r3
   1ca9e:	2301      	movs	r3, #1
   1caa0:	4053      	eors	r3, r2
   1caa2:	b2db      	uxtb	r3, r3
   1caa4:	2b00      	cmp	r3, #0
   1caa6:	d008      	beq.n	1caba <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1caa8:	4b31      	ldr	r3, [pc, #196]	; (1cb70 <buttonFilter+0x124>)
   1caaa:	2200      	movs	r2, #0
   1caac:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1caae:	2201      	movs	r2, #1
   1cab0:	2100      	movs	r1, #0
   1cab2:	2000      	movs	r0, #0
   1cab4:	4b31      	ldr	r3, [pc, #196]	; (1cb7c <buttonFilter+0x130>)
   1cab6:	4798      	blx	r3
   1cab8:	e057      	b.n	1cb6a <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1caba:	4b2d      	ldr	r3, [pc, #180]	; (1cb70 <buttonFilter+0x124>)
   1cabc:	781b      	ldrb	r3, [r3, #0]
   1cabe:	b2db      	uxtb	r3, r3
   1cac0:	2b03      	cmp	r3, #3
   1cac2:	d12b      	bne.n	1cb1c <buttonFilter+0xd0>
   1cac4:	201c      	movs	r0, #28
   1cac6:	4b2b      	ldr	r3, [pc, #172]	; (1cb74 <buttonFilter+0x128>)
   1cac8:	4798      	blx	r3
   1caca:	0003      	movs	r3, r0
   1cacc:	001a      	movs	r2, r3
   1cace:	2301      	movs	r3, #1
   1cad0:	4053      	eors	r3, r2
   1cad2:	b2db      	uxtb	r3, r3
   1cad4:	2b00      	cmp	r3, #0
   1cad6:	d021      	beq.n	1cb1c <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
   1cad8:	4b25      	ldr	r3, [pc, #148]	; (1cb70 <buttonFilter+0x124>)
   1cada:	2200      	movs	r2, #0
   1cadc:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1cade:	4b28      	ldr	r3, [pc, #160]	; (1cb80 <buttonFilter+0x134>)
   1cae0:	785b      	ldrb	r3, [r3, #1]
   1cae2:	425a      	negs	r2, r3
   1cae4:	4153      	adcs	r3, r2
   1cae6:	b2db      	uxtb	r3, r3
   1cae8:	0018      	movs	r0, r3
   1caea:	4b26      	ldr	r3, [pc, #152]	; (1cb84 <buttonFilter+0x138>)
   1caec:	4798      	blx	r3
			resetAutoStart(true);
   1caee:	2001      	movs	r0, #1
   1caf0:	4b25      	ldr	r3, [pc, #148]	; (1cb88 <buttonFilter+0x13c>)
   1caf2:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1caf4:	4b22      	ldr	r3, [pc, #136]	; (1cb80 <buttonFilter+0x134>)
   1caf6:	785b      	ldrb	r3, [r3, #1]
   1caf8:	2b00      	cmp	r3, #0
   1cafa:	d007      	beq.n	1cb0c <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
   1cafc:	2029      	movs	r0, #41	; 0x29
   1cafe:	4b23      	ldr	r3, [pc, #140]	; (1cb8c <buttonFilter+0x140>)
   1cb00:	4798      	blx	r3
   1cb02:	0003      	movs	r3, r0
   1cb04:	001a      	movs	r2, r3
   1cb06:	4b22      	ldr	r3, [pc, #136]	; (1cb90 <buttonFilter+0x144>)
   1cb08:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1cb0a:	e02e      	b.n	1cb6a <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1cb0c:	205b      	movs	r0, #91	; 0x5b
   1cb0e:	4b1f      	ldr	r3, [pc, #124]	; (1cb8c <buttonFilter+0x140>)
   1cb10:	4798      	blx	r3
   1cb12:	0003      	movs	r3, r0
   1cb14:	001a      	movs	r2, r3
   1cb16:	4b1e      	ldr	r3, [pc, #120]	; (1cb90 <buttonFilter+0x144>)
   1cb18:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1cb1a:	e026      	b.n	1cb6a <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1cb1c:	4b14      	ldr	r3, [pc, #80]	; (1cb70 <buttonFilter+0x124>)
   1cb1e:	781b      	ldrb	r3, [r3, #0]
   1cb20:	b2db      	uxtb	r3, r3
   1cb22:	2b04      	cmp	r3, #4
   1cb24:	d11d      	bne.n	1cb62 <buttonFilter+0x116>
   1cb26:	2029      	movs	r0, #41	; 0x29
   1cb28:	4b12      	ldr	r3, [pc, #72]	; (1cb74 <buttonFilter+0x128>)
   1cb2a:	4798      	blx	r3
   1cb2c:	0003      	movs	r3, r0
   1cb2e:	001a      	movs	r2, r3
   1cb30:	2301      	movs	r3, #1
   1cb32:	4053      	eors	r3, r2
   1cb34:	b2db      	uxtb	r3, r3
   1cb36:	2b00      	cmp	r3, #0
   1cb38:	d013      	beq.n	1cb62 <buttonFilter+0x116>
		{
			lastButtonEvent=0;
   1cb3a:	4b0d      	ldr	r3, [pc, #52]	; (1cb70 <buttonFilter+0x124>)
   1cb3c:	2200      	movs	r2, #0
   1cb3e:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1cb40:	4b14      	ldr	r3, [pc, #80]	; (1cb94 <buttonFilter+0x148>)
   1cb42:	781b      	ldrb	r3, [r3, #0]
   1cb44:	b2db      	uxtb	r3, r3
   1cb46:	1e5a      	subs	r2, r3, #1
   1cb48:	4193      	sbcs	r3, r2
   1cb4a:	b2db      	uxtb	r3, r3
   1cb4c:	2201      	movs	r2, #1
   1cb4e:	4053      	eors	r3, r2
   1cb50:	b2db      	uxtb	r3, r3
   1cb52:	1c1a      	adds	r2, r3, #0
   1cb54:	2301      	movs	r3, #1
   1cb56:	4013      	ands	r3, r2
   1cb58:	b2db      	uxtb	r3, r3
   1cb5a:	0018      	movs	r0, r3
   1cb5c:	4b0e      	ldr	r3, [pc, #56]	; (1cb98 <buttonFilter+0x14c>)
   1cb5e:	4798      	blx	r3
   1cb60:	e003      	b.n	1cb6a <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
   1cb62:	4b03      	ldr	r3, [pc, #12]	; (1cb70 <buttonFilter+0x124>)
   1cb64:	2200      	movs	r2, #0
   1cb66:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1cb68:	e7ff      	b.n	1cb6a <buttonFilter+0x11e>
   1cb6a:	46c0      	nop			; (mov r8, r8)
   1cb6c:	46bd      	mov	sp, r7
   1cb6e:	bd80      	pop	{r7, pc}
   1cb70:	20000778 	.word	0x20000778
   1cb74:	00019055 	.word	0x00019055
   1cb78:	0001b2fd 	.word	0x0001b2fd
   1cb7c:	0001b4d9 	.word	0x0001b4d9
   1cb80:	20000654 	.word	0x20000654
   1cb84:	000112a5 	.word	0x000112a5
   1cb88:	0001aefd 	.word	0x0001aefd
   1cb8c:	00014939 	.word	0x00014939
   1cb90:	2000070c 	.word	0x2000070c
   1cb94:	200007a4 	.word	0x200007a4
   1cb98:	0001cb9d 	.word	0x0001cb9d

0001cb9c <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1cb9c:	b580      	push	{r7, lr}
   1cb9e:	b082      	sub	sp, #8
   1cba0:	af00      	add	r7, sp, #0
   1cba2:	0002      	movs	r2, r0
   1cba4:	1dfb      	adds	r3, r7, #7
   1cba6:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1cba8:	4b03      	ldr	r3, [pc, #12]	; (1cbb8 <setDisplayPause+0x1c>)
   1cbaa:	1dfa      	adds	r2, r7, #7
   1cbac:	7812      	ldrb	r2, [r2, #0]
   1cbae:	701a      	strb	r2, [r3, #0]
}
   1cbb0:	46c0      	nop			; (mov r8, r8)
   1cbb2:	46bd      	mov	sp, r7
   1cbb4:	b002      	add	sp, #8
   1cbb6:	bd80      	pop	{r7, pc}
   1cbb8:	200007a4 	.word	0x200007a4

0001cbbc <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1cbbc:	b580      	push	{r7, lr}
   1cbbe:	b082      	sub	sp, #8
   1cbc0:	af00      	add	r7, sp, #0
   1cbc2:	6039      	str	r1, [r7, #0]
   1cbc4:	0011      	movs	r1, r2
   1cbc6:	1dfb      	adds	r3, r7, #7
   1cbc8:	1c02      	adds	r2, r0, #0
   1cbca:	701a      	strb	r2, [r3, #0]
   1cbcc:	1dbb      	adds	r3, r7, #6
   1cbce:	1c0a      	adds	r2, r1, #0
   1cbd0:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1cbd2:	4b0f      	ldr	r3, [pc, #60]	; (1cc10 <setCallStateOnLCD+0x54>)
   1cbd4:	1dfa      	adds	r2, r7, #7
   1cbd6:	7812      	ldrb	r2, [r2, #0]
   1cbd8:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1cbda:	1dbb      	adds	r3, r7, #6
   1cbdc:	781b      	ldrb	r3, [r3, #0]
   1cbde:	2201      	movs	r2, #1
   1cbe0:	4053      	eors	r3, r2
   1cbe2:	b2db      	uxtb	r3, r3
   1cbe4:	2b00      	cmp	r3, #0
   1cbe6:	d00f      	beq.n	1cc08 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1cbe8:	4b0a      	ldr	r3, [pc, #40]	; (1cc14 <setCallStateOnLCD+0x58>)
   1cbea:	2214      	movs	r2, #20
   1cbec:	2100      	movs	r1, #0
   1cbee:	0018      	movs	r0, r3
   1cbf0:	4b09      	ldr	r3, [pc, #36]	; (1cc18 <setCallStateOnLCD+0x5c>)
   1cbf2:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1cbf4:	4b06      	ldr	r3, [pc, #24]	; (1cc10 <setCallStateOnLCD+0x54>)
   1cbf6:	781b      	ldrb	r3, [r3, #0]
   1cbf8:	2b00      	cmp	r3, #0
   1cbfa:	d005      	beq.n	1cc08 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
   1cbfc:	683a      	ldr	r2, [r7, #0]
   1cbfe:	4b05      	ldr	r3, [pc, #20]	; (1cc14 <setCallStateOnLCD+0x58>)
   1cc00:	0011      	movs	r1, r2
   1cc02:	0018      	movs	r0, r3
   1cc04:	4b05      	ldr	r3, [pc, #20]	; (1cc1c <setCallStateOnLCD+0x60>)
   1cc06:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1cc08:	46c0      	nop			; (mov r8, r8)
   1cc0a:	46bd      	mov	sp, r7
   1cc0c:	b002      	add	sp, #8
   1cc0e:	bd80      	pop	{r7, pc}
   1cc10:	200007cd 	.word	0x200007cd
   1cc14:	20000844 	.word	0x20000844
   1cc18:	00028e93 	.word	0x00028e93
   1cc1c:	00029113 	.word	0x00029113

0001cc20 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1cc20:	b590      	push	{r4, r7, lr}
   1cc22:	b085      	sub	sp, #20
   1cc24:	af00      	add	r7, sp, #0
   1cc26:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1cc28:	4b17      	ldr	r3, [pc, #92]	; (1cc88 <vTask_50ms_Timer+0x68>)
   1cc2a:	4798      	blx	r3
   1cc2c:	0003      	movs	r3, r0
   1cc2e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cc30:	230c      	movs	r3, #12
   1cc32:	18fb      	adds	r3, r7, r3
   1cc34:	2119      	movs	r1, #25
   1cc36:	0018      	movs	r0, r3
   1cc38:	4b14      	ldr	r3, [pc, #80]	; (1cc8c <vTask_50ms_Timer+0x6c>)
   1cc3a:	4798      	blx	r3
		if(buttonEventOccured)
   1cc3c:	4b14      	ldr	r3, [pc, #80]	; (1cc90 <vTask_50ms_Timer+0x70>)
   1cc3e:	781b      	ldrb	r3, [r3, #0]
   1cc40:	b2db      	uxtb	r3, r3
   1cc42:	2b00      	cmp	r3, #0
   1cc44:	d001      	beq.n	1cc4a <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1cc46:	4b13      	ldr	r3, [pc, #76]	; (1cc94 <vTask_50ms_Timer+0x74>)
   1cc48:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1cc4a:	4b13      	ldr	r3, [pc, #76]	; (1cc98 <vTask_50ms_Timer+0x78>)
   1cc4c:	681a      	ldr	r2, [r3, #0]
   1cc4e:	2301      	movs	r3, #1
   1cc50:	425b      	negs	r3, r3
   1cc52:	0019      	movs	r1, r3
   1cc54:	0010      	movs	r0, r2
   1cc56:	4b11      	ldr	r3, [pc, #68]	; (1cc9c <vTask_50ms_Timer+0x7c>)
   1cc58:	4798      	blx	r3
		if(lastButtonEvent>0)
   1cc5a:	4b11      	ldr	r3, [pc, #68]	; (1cca0 <vTask_50ms_Timer+0x80>)
   1cc5c:	781b      	ldrb	r3, [r3, #0]
   1cc5e:	b2db      	uxtb	r3, r3
   1cc60:	2b00      	cmp	r3, #0
   1cc62:	d008      	beq.n	1cc76 <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1cc64:	4b0f      	ldr	r3, [pc, #60]	; (1cca4 <vTask_50ms_Timer+0x84>)
   1cc66:	2201      	movs	r2, #1
   1cc68:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1cc6a:	4b0f      	ldr	r3, [pc, #60]	; (1cca8 <vTask_50ms_Timer+0x88>)
   1cc6c:	681b      	ldr	r3, [r3, #0]
   1cc6e:	2102      	movs	r1, #2
   1cc70:	0018      	movs	r0, r3
   1cc72:	4b0e      	ldr	r3, [pc, #56]	; (1ccac <vTask_50ms_Timer+0x8c>)
   1cc74:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1cc76:	4b08      	ldr	r3, [pc, #32]	; (1cc98 <vTask_50ms_Timer+0x78>)
   1cc78:	6818      	ldr	r0, [r3, #0]
   1cc7a:	2300      	movs	r3, #0
   1cc7c:	2200      	movs	r2, #0
   1cc7e:	2100      	movs	r1, #0
   1cc80:	4c0b      	ldr	r4, [pc, #44]	; (1ccb0 <vTask_50ms_Timer+0x90>)
   1cc82:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1cc84:	e7d4      	b.n	1cc30 <vTask_50ms_Timer+0x10>
   1cc86:	46c0      	nop			; (mov r8, r8)
   1cc88:	000202cd 	.word	0x000202cd
   1cc8c:	0001fea1 	.word	0x0001fea1
   1cc90:	20000797 	.word	0x20000797
   1cc94:	0001c991 	.word	0x0001c991
   1cc98:	2000023c 	.word	0x2000023c
   1cc9c:	0001f661 	.word	0x0001f661
   1cca0:	20000778 	.word	0x20000778
   1cca4:	20000880 	.word	0x20000880
   1cca8:	20000240 	.word	0x20000240
   1ccac:	0001ffc5 	.word	0x0001ffc5
   1ccb0:	0001f1c1 	.word	0x0001f1c1

0001ccb4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1ccb4:	b580      	push	{r7, lr}
   1ccb6:	b082      	sub	sp, #8
   1ccb8:	af00      	add	r7, sp, #0
   1ccba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1ccbc:	687b      	ldr	r3, [r7, #4]
   1ccbe:	2200      	movs	r2, #0
   1ccc0:	701a      	strb	r2, [r3, #0]
}
   1ccc2:	46c0      	nop			; (mov r8, r8)
   1ccc4:	46bd      	mov	sp, r7
   1ccc6:	b002      	add	sp, #8
   1ccc8:	bd80      	pop	{r7, pc}
	...

0001cccc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1cccc:	b580      	push	{r7, lr}
   1ccce:	b082      	sub	sp, #8
   1ccd0:	af00      	add	r7, sp, #0
   1ccd2:	0002      	movs	r2, r0
   1ccd4:	6039      	str	r1, [r7, #0]
   1ccd6:	1dfb      	adds	r3, r7, #7
   1ccd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1ccda:	1dfb      	adds	r3, r7, #7
   1ccdc:	781b      	ldrb	r3, [r3, #0]
   1ccde:	2b01      	cmp	r3, #1
   1cce0:	d00a      	beq.n	1ccf8 <system_apb_clock_set_mask+0x2c>
   1cce2:	2b02      	cmp	r3, #2
   1cce4:	d00f      	beq.n	1cd06 <system_apb_clock_set_mask+0x3a>
   1cce6:	2b00      	cmp	r3, #0
   1cce8:	d114      	bne.n	1cd14 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1ccea:	4b0e      	ldr	r3, [pc, #56]	; (1cd24 <system_apb_clock_set_mask+0x58>)
   1ccec:	4a0d      	ldr	r2, [pc, #52]	; (1cd24 <system_apb_clock_set_mask+0x58>)
   1ccee:	6991      	ldr	r1, [r2, #24]
   1ccf0:	683a      	ldr	r2, [r7, #0]
   1ccf2:	430a      	orrs	r2, r1
   1ccf4:	619a      	str	r2, [r3, #24]
			break;
   1ccf6:	e00f      	b.n	1cd18 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1ccf8:	4b0a      	ldr	r3, [pc, #40]	; (1cd24 <system_apb_clock_set_mask+0x58>)
   1ccfa:	4a0a      	ldr	r2, [pc, #40]	; (1cd24 <system_apb_clock_set_mask+0x58>)
   1ccfc:	69d1      	ldr	r1, [r2, #28]
   1ccfe:	683a      	ldr	r2, [r7, #0]
   1cd00:	430a      	orrs	r2, r1
   1cd02:	61da      	str	r2, [r3, #28]
			break;
   1cd04:	e008      	b.n	1cd18 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1cd06:	4b07      	ldr	r3, [pc, #28]	; (1cd24 <system_apb_clock_set_mask+0x58>)
   1cd08:	4a06      	ldr	r2, [pc, #24]	; (1cd24 <system_apb_clock_set_mask+0x58>)
   1cd0a:	6a11      	ldr	r1, [r2, #32]
   1cd0c:	683a      	ldr	r2, [r7, #0]
   1cd0e:	430a      	orrs	r2, r1
   1cd10:	621a      	str	r2, [r3, #32]
			break;
   1cd12:	e001      	b.n	1cd18 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1cd14:	2317      	movs	r3, #23
   1cd16:	e000      	b.n	1cd1a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1cd18:	2300      	movs	r3, #0
}
   1cd1a:	0018      	movs	r0, r3
   1cd1c:	46bd      	mov	sp, r7
   1cd1e:	b002      	add	sp, #8
   1cd20:	bd80      	pop	{r7, pc}
   1cd22:	46c0      	nop			; (mov r8, r8)
   1cd24:	40000400 	.word	0x40000400

0001cd28 <ac_is_syncing>:
{
   1cd28:	b580      	push	{r7, lr}
   1cd2a:	b084      	sub	sp, #16
   1cd2c:	af00      	add	r7, sp, #0
   1cd2e:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1cd30:	687b      	ldr	r3, [r7, #4]
   1cd32:	681b      	ldr	r3, [r3, #0]
   1cd34:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1cd36:	68fb      	ldr	r3, [r7, #12]
   1cd38:	7a5b      	ldrb	r3, [r3, #9]
   1cd3a:	b2db      	uxtb	r3, r3
   1cd3c:	b25b      	sxtb	r3, r3
   1cd3e:	2b00      	cmp	r3, #0
   1cd40:	da01      	bge.n	1cd46 <ac_is_syncing+0x1e>
		return true;
   1cd42:	2301      	movs	r3, #1
   1cd44:	e000      	b.n	1cd48 <ac_is_syncing+0x20>
	return false;
   1cd46:	2300      	movs	r3, #0
}
   1cd48:	0018      	movs	r0, r3
   1cd4a:	46bd      	mov	sp, r7
   1cd4c:	b004      	add	sp, #16
   1cd4e:	bd80      	pop	{r7, pc}

0001cd50 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1cd50:	b580      	push	{r7, lr}
   1cd52:	b086      	sub	sp, #24
   1cd54:	af00      	add	r7, sp, #0
   1cd56:	6078      	str	r0, [r7, #4]
   1cd58:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1cd5a:	687b      	ldr	r3, [r7, #4]
   1cd5c:	681b      	ldr	r3, [r3, #0]
   1cd5e:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1cd60:	2300      	movs	r3, #0
   1cd62:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1cd64:	2300      	movs	r3, #0
   1cd66:	613b      	str	r3, [r7, #16]
   1cd68:	e00f      	b.n	1cd8a <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1cd6a:	683a      	ldr	r2, [r7, #0]
   1cd6c:	693b      	ldr	r3, [r7, #16]
   1cd6e:	18d3      	adds	r3, r2, r3
   1cd70:	781b      	ldrb	r3, [r3, #0]
   1cd72:	2b00      	cmp	r3, #0
   1cd74:	d006      	beq.n	1cd84 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1cd76:	2204      	movs	r2, #4
   1cd78:	693b      	ldr	r3, [r7, #16]
   1cd7a:	409a      	lsls	r2, r3
   1cd7c:	0013      	movs	r3, r2
   1cd7e:	697a      	ldr	r2, [r7, #20]
   1cd80:	4313      	orrs	r3, r2
   1cd82:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1cd84:	693b      	ldr	r3, [r7, #16]
   1cd86:	3301      	adds	r3, #1
   1cd88:	613b      	str	r3, [r7, #16]
   1cd8a:	693b      	ldr	r3, [r7, #16]
   1cd8c:	2b00      	cmp	r3, #0
   1cd8e:	d0ec      	beq.n	1cd6a <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1cd90:	46c0      	nop			; (mov r8, r8)
   1cd92:	687b      	ldr	r3, [r7, #4]
   1cd94:	0018      	movs	r0, r3
   1cd96:	4b06      	ldr	r3, [pc, #24]	; (1cdb0 <_ac_set_config+0x60>)
   1cd98:	4798      	blx	r3
   1cd9a:	1e03      	subs	r3, r0, #0
   1cd9c:	d1f9      	bne.n	1cd92 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1cd9e:	697b      	ldr	r3, [r7, #20]
   1cda0:	b2da      	uxtb	r2, r3
   1cda2:	68fb      	ldr	r3, [r7, #12]
   1cda4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1cda6:	2300      	movs	r3, #0
}
   1cda8:	0018      	movs	r0, r3
   1cdaa:	46bd      	mov	sp, r7
   1cdac:	b006      	add	sp, #24
   1cdae:	bd80      	pop	{r7, pc}
   1cdb0:	0001cd29 	.word	0x0001cd29

0001cdb4 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1cdb4:	b580      	push	{r7, lr}
   1cdb6:	b086      	sub	sp, #24
   1cdb8:	af00      	add	r7, sp, #0
   1cdba:	60f8      	str	r0, [r7, #12]
   1cdbc:	60b9      	str	r1, [r7, #8]
   1cdbe:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1cdc0:	68fb      	ldr	r3, [r7, #12]
   1cdc2:	68ba      	ldr	r2, [r7, #8]
   1cdc4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1cdc6:	2314      	movs	r3, #20
   1cdc8:	18fb      	adds	r3, r7, r3
   1cdca:	0018      	movs	r0, r3
   1cdcc:	4b2a      	ldr	r3, [pc, #168]	; (1ce78 <ac_init+0xc4>)
   1cdce:	4798      	blx	r3

	if (hw == AC) {
   1cdd0:	68bb      	ldr	r3, [r7, #8]
   1cdd2:	4a2a      	ldr	r2, [pc, #168]	; (1ce7c <ac_init+0xc8>)
   1cdd4:	4293      	cmp	r3, r2
   1cdd6:	d121      	bne.n	1ce1c <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1cdd8:	2380      	movs	r3, #128	; 0x80
   1cdda:	029b      	lsls	r3, r3, #10
   1cddc:	0019      	movs	r1, r3
   1cdde:	2002      	movs	r0, #2
   1cde0:	4b27      	ldr	r3, [pc, #156]	; (1ce80 <ac_init+0xcc>)
   1cde2:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1cde4:	687b      	ldr	r3, [r7, #4]
   1cde6:	785a      	ldrb	r2, [r3, #1]
   1cde8:	2314      	movs	r3, #20
   1cdea:	18fb      	adds	r3, r7, r3
   1cdec:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1cdee:	2314      	movs	r3, #20
   1cdf0:	18fb      	adds	r3, r7, r3
   1cdf2:	0019      	movs	r1, r3
   1cdf4:	201f      	movs	r0, #31
   1cdf6:	4b23      	ldr	r3, [pc, #140]	; (1ce84 <ac_init+0xd0>)
   1cdf8:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1cdfa:	201f      	movs	r0, #31
   1cdfc:	4b22      	ldr	r3, [pc, #136]	; (1ce88 <ac_init+0xd4>)
   1cdfe:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1ce00:	687b      	ldr	r3, [r7, #4]
   1ce02:	789a      	ldrb	r2, [r3, #2]
   1ce04:	2314      	movs	r3, #20
   1ce06:	18fb      	adds	r3, r7, r3
   1ce08:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1ce0a:	2314      	movs	r3, #20
   1ce0c:	18fb      	adds	r3, r7, r3
   1ce0e:	0019      	movs	r1, r3
   1ce10:	2020      	movs	r0, #32
   1ce12:	4b1c      	ldr	r3, [pc, #112]	; (1ce84 <ac_init+0xd0>)
   1ce14:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1ce16:	2020      	movs	r0, #32
   1ce18:	4b1b      	ldr	r3, [pc, #108]	; (1ce88 <ac_init+0xd4>)
   1ce1a:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1ce1c:	2317      	movs	r3, #23
   1ce1e:	18fb      	adds	r3, r7, r3
   1ce20:	2200      	movs	r2, #0
   1ce22:	701a      	strb	r2, [r3, #0]
   1ce24:	e00f      	b.n	1ce46 <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1ce26:	2317      	movs	r3, #23
   1ce28:	18fb      	adds	r3, r7, r3
   1ce2a:	781b      	ldrb	r3, [r3, #0]
   1ce2c:	68fa      	ldr	r2, [r7, #12]
   1ce2e:	009b      	lsls	r3, r3, #2
   1ce30:	18d3      	adds	r3, r2, r3
   1ce32:	3304      	adds	r3, #4
   1ce34:	2200      	movs	r2, #0
   1ce36:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1ce38:	2317      	movs	r3, #23
   1ce3a:	18fb      	adds	r3, r7, r3
   1ce3c:	781a      	ldrb	r2, [r3, #0]
   1ce3e:	2317      	movs	r3, #23
   1ce40:	18fb      	adds	r3, r7, r3
   1ce42:	3201      	adds	r2, #1
   1ce44:	701a      	strb	r2, [r3, #0]
   1ce46:	2317      	movs	r3, #23
   1ce48:	18fb      	adds	r3, r7, r3
   1ce4a:	781b      	ldrb	r3, [r3, #0]
   1ce4c:	2b04      	cmp	r3, #4
   1ce4e:	d9ea      	bls.n	1ce26 <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1ce50:	68fb      	ldr	r3, [r7, #12]
   1ce52:	2200      	movs	r2, #0
   1ce54:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1ce56:	68fb      	ldr	r3, [r7, #12]
   1ce58:	2200      	movs	r2, #0
   1ce5a:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1ce5c:	4b0b      	ldr	r3, [pc, #44]	; (1ce8c <ac_init+0xd8>)
   1ce5e:	68fa      	ldr	r2, [r7, #12]
   1ce60:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1ce62:	687a      	ldr	r2, [r7, #4]
   1ce64:	68fb      	ldr	r3, [r7, #12]
   1ce66:	0011      	movs	r1, r2
   1ce68:	0018      	movs	r0, r3
   1ce6a:	4b09      	ldr	r3, [pc, #36]	; (1ce90 <ac_init+0xdc>)
   1ce6c:	4798      	blx	r3
   1ce6e:	0003      	movs	r3, r0
}
   1ce70:	0018      	movs	r0, r3
   1ce72:	46bd      	mov	sp, r7
   1ce74:	b006      	add	sp, #24
   1ce76:	bd80      	pop	{r7, pc}
   1ce78:	0001ccb5 	.word	0x0001ccb5
   1ce7c:	42004400 	.word	0x42004400
   1ce80:	0001cccd 	.word	0x0001cccd
   1ce84:	00024a35 	.word	0x00024a35
   1ce88:	00024a79 	.word	0x00024a79
   1ce8c:	20000984 	.word	0x20000984
   1ce90:	0001cd51 	.word	0x0001cd51

0001ce94 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1ce94:	b580      	push	{r7, lr}
   1ce96:	b086      	sub	sp, #24
   1ce98:	af00      	add	r7, sp, #0
   1ce9a:	60f8      	str	r0, [r7, #12]
   1ce9c:	607a      	str	r2, [r7, #4]
   1ce9e:	230b      	movs	r3, #11
   1cea0:	18fb      	adds	r3, r7, r3
   1cea2:	1c0a      	adds	r2, r1, #0
   1cea4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1cea6:	68fb      	ldr	r3, [r7, #12]
   1cea8:	681b      	ldr	r3, [r3, #0]
   1ceaa:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1ceac:	2300      	movs	r3, #0
   1ceae:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1ceb0:	687b      	ldr	r3, [r7, #4]
   1ceb2:	685b      	ldr	r3, [r3, #4]
   1ceb4:	697a      	ldr	r2, [r7, #20]
   1ceb6:	4313      	orrs	r3, r2
   1ceb8:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1ceba:	687b      	ldr	r3, [r7, #4]
   1cebc:	7a1b      	ldrb	r3, [r3, #8]
   1cebe:	2b00      	cmp	r3, #0
   1cec0:	d004      	beq.n	1cecc <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1cec2:	697b      	ldr	r3, [r7, #20]
   1cec4:	2280      	movs	r2, #128	; 0x80
   1cec6:	0312      	lsls	r2, r2, #12
   1cec8:	4313      	orrs	r3, r2
   1ceca:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1cecc:	687b      	ldr	r3, [r7, #4]
   1cece:	68db      	ldr	r3, [r3, #12]
   1ced0:	697a      	ldr	r2, [r7, #20]
   1ced2:	4313      	orrs	r3, r2
   1ced4:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1ced6:	687b      	ldr	r3, [r7, #4]
   1ced8:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1ceda:	687b      	ldr	r3, [r7, #4]
   1cedc:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1cede:	4313      	orrs	r3, r2
   1cee0:	b29b      	uxth	r3, r3
   1cee2:	001a      	movs	r2, r3
	compctrl_temp |=
   1cee4:	697b      	ldr	r3, [r7, #20]
   1cee6:	4313      	orrs	r3, r2
   1cee8:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1ceea:	687b      	ldr	r3, [r7, #4]
   1ceec:	781b      	ldrb	r3, [r3, #0]
   1ceee:	001a      	movs	r2, r3
   1cef0:	697b      	ldr	r3, [r7, #20]
   1cef2:	4313      	orrs	r3, r2
   1cef4:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1cef6:	687b      	ldr	r3, [r7, #4]
   1cef8:	7d5b      	ldrb	r3, [r3, #21]
   1cefa:	001a      	movs	r2, r3
   1cefc:	697b      	ldr	r3, [r7, #20]
   1cefe:	4313      	orrs	r3, r2
   1cf00:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1cf02:	46c0      	nop			; (mov r8, r8)
   1cf04:	68fb      	ldr	r3, [r7, #12]
   1cf06:	0018      	movs	r0, r3
   1cf08:	4b0e      	ldr	r3, [pc, #56]	; (1cf44 <ac_chan_set_config+0xb0>)
   1cf0a:	4798      	blx	r3
   1cf0c:	1e03      	subs	r3, r0, #0
   1cf0e:	d1f9      	bne.n	1cf04 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1cf10:	230b      	movs	r3, #11
   1cf12:	18fb      	adds	r3, r7, r3
   1cf14:	781a      	ldrb	r2, [r3, #0]
   1cf16:	693b      	ldr	r3, [r7, #16]
   1cf18:	3204      	adds	r2, #4
   1cf1a:	0092      	lsls	r2, r2, #2
   1cf1c:	6979      	ldr	r1, [r7, #20]
   1cf1e:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1cf20:	230b      	movs	r3, #11
   1cf22:	18fb      	adds	r3, r7, r3
   1cf24:	781b      	ldrb	r3, [r3, #0]
   1cf26:	687a      	ldr	r2, [r7, #4]
   1cf28:	7d12      	ldrb	r2, [r2, #20]
   1cf2a:	3a01      	subs	r2, #1
   1cf2c:	b2d0      	uxtb	r0, r2
   1cf2e:	693a      	ldr	r2, [r7, #16]
   1cf30:	2120      	movs	r1, #32
   1cf32:	18d3      	adds	r3, r2, r3
   1cf34:	185b      	adds	r3, r3, r1
   1cf36:	1c02      	adds	r2, r0, #0
   1cf38:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1cf3a:	2300      	movs	r3, #0
}
   1cf3c:	0018      	movs	r0, r3
   1cf3e:	46bd      	mov	sp, r7
   1cf40:	b006      	add	sp, #24
   1cf42:	bd80      	pop	{r7, pc}
   1cf44:	0001cd29 	.word	0x0001cd29

0001cf48 <system_gclk_chan_get_config_defaults>:
{
   1cf48:	b580      	push	{r7, lr}
   1cf4a:	b082      	sub	sp, #8
   1cf4c:	af00      	add	r7, sp, #0
   1cf4e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1cf50:	687b      	ldr	r3, [r7, #4]
   1cf52:	2200      	movs	r2, #0
   1cf54:	701a      	strb	r2, [r3, #0]
}
   1cf56:	46c0      	nop			; (mov r8, r8)
   1cf58:	46bd      	mov	sp, r7
   1cf5a:	b002      	add	sp, #8
   1cf5c:	bd80      	pop	{r7, pc}
	...

0001cf60 <system_apb_clock_set_mask>:
{
   1cf60:	b580      	push	{r7, lr}
   1cf62:	b082      	sub	sp, #8
   1cf64:	af00      	add	r7, sp, #0
   1cf66:	0002      	movs	r2, r0
   1cf68:	6039      	str	r1, [r7, #0]
   1cf6a:	1dfb      	adds	r3, r7, #7
   1cf6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1cf6e:	1dfb      	adds	r3, r7, #7
   1cf70:	781b      	ldrb	r3, [r3, #0]
   1cf72:	2b01      	cmp	r3, #1
   1cf74:	d00a      	beq.n	1cf8c <system_apb_clock_set_mask+0x2c>
   1cf76:	2b02      	cmp	r3, #2
   1cf78:	d00f      	beq.n	1cf9a <system_apb_clock_set_mask+0x3a>
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	d114      	bne.n	1cfa8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1cf7e:	4b0e      	ldr	r3, [pc, #56]	; (1cfb8 <system_apb_clock_set_mask+0x58>)
   1cf80:	4a0d      	ldr	r2, [pc, #52]	; (1cfb8 <system_apb_clock_set_mask+0x58>)
   1cf82:	6991      	ldr	r1, [r2, #24]
   1cf84:	683a      	ldr	r2, [r7, #0]
   1cf86:	430a      	orrs	r2, r1
   1cf88:	619a      	str	r2, [r3, #24]
			break;
   1cf8a:	e00f      	b.n	1cfac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1cf8c:	4b0a      	ldr	r3, [pc, #40]	; (1cfb8 <system_apb_clock_set_mask+0x58>)
   1cf8e:	4a0a      	ldr	r2, [pc, #40]	; (1cfb8 <system_apb_clock_set_mask+0x58>)
   1cf90:	69d1      	ldr	r1, [r2, #28]
   1cf92:	683a      	ldr	r2, [r7, #0]
   1cf94:	430a      	orrs	r2, r1
   1cf96:	61da      	str	r2, [r3, #28]
			break;
   1cf98:	e008      	b.n	1cfac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1cf9a:	4b07      	ldr	r3, [pc, #28]	; (1cfb8 <system_apb_clock_set_mask+0x58>)
   1cf9c:	4a06      	ldr	r2, [pc, #24]	; (1cfb8 <system_apb_clock_set_mask+0x58>)
   1cf9e:	6a11      	ldr	r1, [r2, #32]
   1cfa0:	683a      	ldr	r2, [r7, #0]
   1cfa2:	430a      	orrs	r2, r1
   1cfa4:	621a      	str	r2, [r3, #32]
			break;
   1cfa6:	e001      	b.n	1cfac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1cfa8:	2317      	movs	r3, #23
   1cfaa:	e000      	b.n	1cfae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1cfac:	2300      	movs	r3, #0
}
   1cfae:	0018      	movs	r0, r3
   1cfb0:	46bd      	mov	sp, r7
   1cfb2:	b002      	add	sp, #8
   1cfb4:	bd80      	pop	{r7, pc}
   1cfb6:	46c0      	nop			; (mov r8, r8)
   1cfb8:	40000400 	.word	0x40000400

0001cfbc <system_pinmux_get_config_defaults>:
{
   1cfbc:	b580      	push	{r7, lr}
   1cfbe:	b082      	sub	sp, #8
   1cfc0:	af00      	add	r7, sp, #0
   1cfc2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1cfc4:	687b      	ldr	r3, [r7, #4]
   1cfc6:	2280      	movs	r2, #128	; 0x80
   1cfc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1cfca:	687b      	ldr	r3, [r7, #4]
   1cfcc:	2200      	movs	r2, #0
   1cfce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1cfd0:	687b      	ldr	r3, [r7, #4]
   1cfd2:	2201      	movs	r2, #1
   1cfd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1cfd6:	687b      	ldr	r3, [r7, #4]
   1cfd8:	2200      	movs	r2, #0
   1cfda:	70da      	strb	r2, [r3, #3]
}
   1cfdc:	46c0      	nop			; (mov r8, r8)
   1cfde:	46bd      	mov	sp, r7
   1cfe0:	b002      	add	sp, #8
   1cfe2:	bd80      	pop	{r7, pc}

0001cfe4 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1cfe4:	b580      	push	{r7, lr}
   1cfe6:	b082      	sub	sp, #8
   1cfe8:	af00      	add	r7, sp, #0
   1cfea:	0002      	movs	r2, r0
   1cfec:	1dfb      	adds	r3, r7, #7
   1cfee:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1cff0:	1dfb      	adds	r3, r7, #7
   1cff2:	781b      	ldrb	r3, [r3, #0]
   1cff4:	2b00      	cmp	r3, #0
   1cff6:	d002      	beq.n	1cffe <system_voltage_reference_enable+0x1a>
   1cff8:	2b01      	cmp	r3, #1
   1cffa:	d007      	beq.n	1d00c <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1cffc:	e00d      	b.n	1d01a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1cffe:	4b08      	ldr	r3, [pc, #32]	; (1d020 <system_voltage_reference_enable+0x3c>)
   1d000:	4a07      	ldr	r2, [pc, #28]	; (1d020 <system_voltage_reference_enable+0x3c>)
   1d002:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d004:	2102      	movs	r1, #2
   1d006:	430a      	orrs	r2, r1
   1d008:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d00a:	e006      	b.n	1d01a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1d00c:	4b04      	ldr	r3, [pc, #16]	; (1d020 <system_voltage_reference_enable+0x3c>)
   1d00e:	4a04      	ldr	r2, [pc, #16]	; (1d020 <system_voltage_reference_enable+0x3c>)
   1d010:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1d012:	2104      	movs	r1, #4
   1d014:	430a      	orrs	r2, r1
   1d016:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1d018:	46c0      	nop			; (mov r8, r8)
	}
}
   1d01a:	46bd      	mov	sp, r7
   1d01c:	b002      	add	sp, #8
   1d01e:	bd80      	pop	{r7, pc}
   1d020:	40000800 	.word	0x40000800

0001d024 <adc_is_syncing>:
{
   1d024:	b580      	push	{r7, lr}
   1d026:	b084      	sub	sp, #16
   1d028:	af00      	add	r7, sp, #0
   1d02a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d02c:	687b      	ldr	r3, [r7, #4]
   1d02e:	681b      	ldr	r3, [r3, #0]
   1d030:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d032:	68fb      	ldr	r3, [r7, #12]
   1d034:	7e5b      	ldrb	r3, [r3, #25]
   1d036:	b2db      	uxtb	r3, r3
   1d038:	b25b      	sxtb	r3, r3
   1d03a:	2b00      	cmp	r3, #0
   1d03c:	da01      	bge.n	1d042 <adc_is_syncing+0x1e>
		return true;
   1d03e:	2301      	movs	r3, #1
   1d040:	e000      	b.n	1d044 <adc_is_syncing+0x20>
	return false;
   1d042:	2300      	movs	r3, #0
}
   1d044:	0018      	movs	r0, r3
   1d046:	46bd      	mov	sp, r7
   1d048:	b004      	add	sp, #16
   1d04a:	bd80      	pop	{r7, pc}

0001d04c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1d04c:	b580      	push	{r7, lr}
   1d04e:	b082      	sub	sp, #8
   1d050:	af00      	add	r7, sp, #0
   1d052:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1d054:	687b      	ldr	r3, [r7, #4]
   1d056:	2200      	movs	r2, #0
   1d058:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1d05a:	687b      	ldr	r3, [r7, #4]
   1d05c:	2200      	movs	r2, #0
   1d05e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1d060:	687b      	ldr	r3, [r7, #4]
   1d062:	2200      	movs	r2, #0
   1d064:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1d066:	687b      	ldr	r3, [r7, #4]
   1d068:	2200      	movs	r2, #0
   1d06a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1d06c:	687b      	ldr	r3, [r7, #4]
   1d06e:	2200      	movs	r2, #0
   1d070:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1d072:	687b      	ldr	r3, [r7, #4]
   1d074:	2200      	movs	r2, #0
   1d076:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1d078:	687b      	ldr	r3, [r7, #4]
   1d07a:	2200      	movs	r2, #0
   1d07c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1d07e:	687b      	ldr	r3, [r7, #4]
   1d080:	2200      	movs	r2, #0
   1d082:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1d084:	687b      	ldr	r3, [r7, #4]
   1d086:	2200      	movs	r2, #0
   1d088:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1d08a:	687b      	ldr	r3, [r7, #4]
   1d08c:	22c0      	movs	r2, #192	; 0xc0
   1d08e:	0152      	lsls	r2, r2, #5
   1d090:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1d092:	687b      	ldr	r3, [r7, #4]
   1d094:	2200      	movs	r2, #0
   1d096:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1d098:	687b      	ldr	r3, [r7, #4]
   1d09a:	2200      	movs	r2, #0
   1d09c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1d09e:	687b      	ldr	r3, [r7, #4]
   1d0a0:	2200      	movs	r2, #0
   1d0a2:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1d0a4:	687b      	ldr	r3, [r7, #4]
   1d0a6:	2200      	movs	r2, #0
   1d0a8:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1d0aa:	687b      	ldr	r3, [r7, #4]
   1d0ac:	2200      	movs	r2, #0
   1d0ae:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1d0b0:	687b      	ldr	r3, [r7, #4]
   1d0b2:	222a      	movs	r2, #42	; 0x2a
   1d0b4:	2100      	movs	r1, #0
   1d0b6:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1d0b8:	687b      	ldr	r3, [r7, #4]
   1d0ba:	2200      	movs	r2, #0
   1d0bc:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1d0be:	687b      	ldr	r3, [r7, #4]
   1d0c0:	2200      	movs	r2, #0
   1d0c2:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1d0c4:	687b      	ldr	r3, [r7, #4]
   1d0c6:	2224      	movs	r2, #36	; 0x24
   1d0c8:	2100      	movs	r1, #0
   1d0ca:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1d0cc:	687b      	ldr	r3, [r7, #4]
   1d0ce:	2200      	movs	r2, #0
   1d0d0:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1d0d2:	687b      	ldr	r3, [r7, #4]
   1d0d4:	2200      	movs	r2, #0
   1d0d6:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1d0d8:	687b      	ldr	r3, [r7, #4]
   1d0da:	2200      	movs	r2, #0
   1d0dc:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1d0de:	687b      	ldr	r3, [r7, #4]
   1d0e0:	222b      	movs	r2, #43	; 0x2b
   1d0e2:	2100      	movs	r1, #0
   1d0e4:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1d0e6:	687b      	ldr	r3, [r7, #4]
   1d0e8:	222c      	movs	r2, #44	; 0x2c
   1d0ea:	2100      	movs	r1, #0
   1d0ec:	5499      	strb	r1, [r3, r2]
}
   1d0ee:	46c0      	nop			; (mov r8, r8)
   1d0f0:	46bd      	mov	sp, r7
   1d0f2:	b002      	add	sp, #8
   1d0f4:	bd80      	pop	{r7, pc}
	...

0001d0f8 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1d0f8:	b580      	push	{r7, lr}
   1d0fa:	b098      	sub	sp, #96	; 0x60
   1d0fc:	af00      	add	r7, sp, #0
   1d0fe:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1d100:	230c      	movs	r3, #12
   1d102:	18fa      	adds	r2, r7, r3
   1d104:	4b15      	ldr	r3, [pc, #84]	; (1d15c <_adc_configure_ain_pin+0x64>)
   1d106:	0010      	movs	r0, r2
   1d108:	0019      	movs	r1, r3
   1d10a:	2350      	movs	r3, #80	; 0x50
   1d10c:	001a      	movs	r2, r3
   1d10e:	4b14      	ldr	r3, [pc, #80]	; (1d160 <_adc_configure_ain_pin+0x68>)
   1d110:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1d112:	4b14      	ldr	r3, [pc, #80]	; (1d164 <_adc_configure_ain_pin+0x6c>)
   1d114:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1d116:	687b      	ldr	r3, [r7, #4]
   1d118:	2b13      	cmp	r3, #19
   1d11a:	d81a      	bhi.n	1d152 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1d11c:	230c      	movs	r3, #12
   1d11e:	18fb      	adds	r3, r7, r3
   1d120:	687a      	ldr	r2, [r7, #4]
   1d122:	0092      	lsls	r2, r2, #2
   1d124:	58d3      	ldr	r3, [r2, r3]
   1d126:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1d128:	2308      	movs	r3, #8
   1d12a:	18fb      	adds	r3, r7, r3
   1d12c:	0018      	movs	r0, r3
   1d12e:	4b0e      	ldr	r3, [pc, #56]	; (1d168 <_adc_configure_ain_pin+0x70>)
   1d130:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1d132:	2308      	movs	r3, #8
   1d134:	18fb      	adds	r3, r7, r3
   1d136:	2200      	movs	r2, #0
   1d138:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1d13a:	2308      	movs	r3, #8
   1d13c:	18fb      	adds	r3, r7, r3
   1d13e:	2201      	movs	r2, #1
   1d140:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1d142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d144:	b2db      	uxtb	r3, r3
   1d146:	2208      	movs	r2, #8
   1d148:	18ba      	adds	r2, r7, r2
   1d14a:	0011      	movs	r1, r2
   1d14c:	0018      	movs	r0, r3
   1d14e:	4b07      	ldr	r3, [pc, #28]	; (1d16c <_adc_configure_ain_pin+0x74>)
   1d150:	4798      	blx	r3
	}
}
   1d152:	46c0      	nop			; (mov r8, r8)
   1d154:	46bd      	mov	sp, r7
   1d156:	b018      	add	sp, #96	; 0x60
   1d158:	bd80      	pop	{r7, pc}
   1d15a:	46c0      	nop			; (mov r8, r8)
   1d15c:	0002aa10 	.word	0x0002aa10
   1d160:	00028e5d 	.word	0x00028e5d
   1d164:	0000ffff 	.word	0x0000ffff
   1d168:	0001cfbd 	.word	0x0001cfbd
   1d16c:	00024d21 	.word	0x00024d21

0001d170 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1d170:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d172:	b089      	sub	sp, #36	; 0x24
   1d174:	af00      	add	r7, sp, #0
   1d176:	6078      	str	r0, [r7, #4]
   1d178:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1d17a:	231f      	movs	r3, #31
   1d17c:	18fb      	adds	r3, r7, r3
   1d17e:	2200      	movs	r2, #0
   1d180:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1d182:	2310      	movs	r3, #16
   1d184:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1d186:	2317      	movs	r3, #23
   1d188:	18fb      	adds	r3, r7, r3
   1d18a:	2200      	movs	r2, #0
   1d18c:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1d18e:	687b      	ldr	r3, [r7, #4]
   1d190:	681b      	ldr	r3, [r3, #0]
   1d192:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1d194:	230c      	movs	r3, #12
   1d196:	18fb      	adds	r3, r7, r3
   1d198:	0018      	movs	r0, r3
   1d19a:	4bce      	ldr	r3, [pc, #824]	; (1d4d4 <_adc_set_config+0x364>)
   1d19c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1d19e:	683b      	ldr	r3, [r7, #0]
   1d1a0:	781a      	ldrb	r2, [r3, #0]
   1d1a2:	230c      	movs	r3, #12
   1d1a4:	18fb      	adds	r3, r7, r3
   1d1a6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1d1a8:	230c      	movs	r3, #12
   1d1aa:	18fb      	adds	r3, r7, r3
   1d1ac:	0019      	movs	r1, r3
   1d1ae:	201e      	movs	r0, #30
   1d1b0:	4bc9      	ldr	r3, [pc, #804]	; (1d4d8 <_adc_set_config+0x368>)
   1d1b2:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1d1b4:	201e      	movs	r0, #30
   1d1b6:	4bc9      	ldr	r3, [pc, #804]	; (1d4dc <_adc_set_config+0x36c>)
   1d1b8:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1d1ba:	683b      	ldr	r3, [r7, #0]
   1d1bc:	222c      	movs	r2, #44	; 0x2c
   1d1be:	5c9b      	ldrb	r3, [r3, r2]
   1d1c0:	2b00      	cmp	r3, #0
   1d1c2:	d040      	beq.n	1d246 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1d1c4:	2316      	movs	r3, #22
   1d1c6:	18fb      	adds	r3, r7, r3
   1d1c8:	683a      	ldr	r2, [r7, #0]
   1d1ca:	212b      	movs	r1, #43	; 0x2b
   1d1cc:	5c52      	ldrb	r2, [r2, r1]
   1d1ce:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1d1d0:	683b      	ldr	r3, [r7, #0]
   1d1d2:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1d1d4:	2315      	movs	r3, #21
   1d1d6:	18fb      	adds	r3, r7, r3
   1d1d8:	2216      	movs	r2, #22
   1d1da:	18ba      	adds	r2, r7, r2
   1d1dc:	7812      	ldrb	r2, [r2, #0]
   1d1de:	188a      	adds	r2, r1, r2
   1d1e0:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1d1e2:	683b      	ldr	r3, [r7, #0]
   1d1e4:	222c      	movs	r2, #44	; 0x2c
   1d1e6:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1d1e8:	230f      	movs	r3, #15
   1d1ea:	18fb      	adds	r3, r7, r3
   1d1ec:	2215      	movs	r2, #21
   1d1ee:	18ba      	adds	r2, r7, r2
   1d1f0:	7812      	ldrb	r2, [r2, #0]
   1d1f2:	188a      	adds	r2, r1, r2
   1d1f4:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1d1f6:	e018      	b.n	1d22a <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1d1f8:	2316      	movs	r3, #22
   1d1fa:	18fb      	adds	r3, r7, r3
   1d1fc:	781b      	ldrb	r3, [r3, #0]
   1d1fe:	220f      	movs	r2, #15
   1d200:	4013      	ands	r3, r2
   1d202:	683a      	ldr	r2, [r7, #0]
   1d204:	7b12      	ldrb	r2, [r2, #12]
   1d206:	189b      	adds	r3, r3, r2
   1d208:	0018      	movs	r0, r3
   1d20a:	4bb5      	ldr	r3, [pc, #724]	; (1d4e0 <_adc_set_config+0x370>)
   1d20c:	4798      	blx	r3
			start_pin++;
   1d20e:	2315      	movs	r3, #21
   1d210:	18fb      	adds	r3, r7, r3
   1d212:	781a      	ldrb	r2, [r3, #0]
   1d214:	2315      	movs	r3, #21
   1d216:	18fb      	adds	r3, r7, r3
   1d218:	3201      	adds	r2, #1
   1d21a:	701a      	strb	r2, [r3, #0]
			offset++;
   1d21c:	2316      	movs	r3, #22
   1d21e:	18fb      	adds	r3, r7, r3
   1d220:	781a      	ldrb	r2, [r3, #0]
   1d222:	2316      	movs	r3, #22
   1d224:	18fb      	adds	r3, r7, r3
   1d226:	3201      	adds	r2, #1
   1d228:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1d22a:	2315      	movs	r3, #21
   1d22c:	18fa      	adds	r2, r7, r3
   1d22e:	230f      	movs	r3, #15
   1d230:	18fb      	adds	r3, r7, r3
   1d232:	7812      	ldrb	r2, [r2, #0]
   1d234:	781b      	ldrb	r3, [r3, #0]
   1d236:	429a      	cmp	r2, r3
   1d238:	d3de      	bcc.n	1d1f8 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1d23a:	683b      	ldr	r3, [r7, #0]
   1d23c:	89db      	ldrh	r3, [r3, #14]
   1d23e:	0018      	movs	r0, r3
   1d240:	4ba7      	ldr	r3, [pc, #668]	; (1d4e0 <_adc_set_config+0x370>)
   1d242:	4798      	blx	r3
   1d244:	e009      	b.n	1d25a <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1d246:	683b      	ldr	r3, [r7, #0]
   1d248:	7b1b      	ldrb	r3, [r3, #12]
   1d24a:	0018      	movs	r0, r3
   1d24c:	4ba4      	ldr	r3, [pc, #656]	; (1d4e0 <_adc_set_config+0x370>)
   1d24e:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1d250:	683b      	ldr	r3, [r7, #0]
   1d252:	89db      	ldrh	r3, [r3, #14]
   1d254:	0018      	movs	r0, r3
   1d256:	4ba2      	ldr	r3, [pc, #648]	; (1d4e0 <_adc_set_config+0x370>)
   1d258:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1d25a:	683b      	ldr	r3, [r7, #0]
   1d25c:	7d5b      	ldrb	r3, [r3, #21]
   1d25e:	009b      	lsls	r3, r3, #2
   1d260:	b2da      	uxtb	r2, r3
   1d262:	693b      	ldr	r3, [r7, #16]
   1d264:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d266:	683b      	ldr	r3, [r7, #0]
   1d268:	7d9b      	ldrb	r3, [r3, #22]
   1d26a:	01db      	lsls	r3, r3, #7
   1d26c:	b25a      	sxtb	r2, r3
			(config->reference);
   1d26e:	683b      	ldr	r3, [r7, #0]
   1d270:	785b      	ldrb	r3, [r3, #1]
   1d272:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1d274:	4313      	orrs	r3, r2
   1d276:	b25b      	sxtb	r3, r3
   1d278:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1d27a:	693b      	ldr	r3, [r7, #16]
   1d27c:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1d27e:	683b      	ldr	r3, [r7, #0]
   1d280:	791b      	ldrb	r3, [r3, #4]
   1d282:	2b34      	cmp	r3, #52	; 0x34
   1d284:	d846      	bhi.n	1d314 <_adc_set_config+0x1a4>
   1d286:	009a      	lsls	r2, r3, #2
   1d288:	4b96      	ldr	r3, [pc, #600]	; (1d4e4 <_adc_set_config+0x374>)
   1d28a:	18d3      	adds	r3, r2, r3
   1d28c:	681b      	ldr	r3, [r3, #0]
   1d28e:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1d290:	231f      	movs	r3, #31
   1d292:	18fb      	adds	r3, r7, r3
   1d294:	683a      	ldr	r2, [r7, #0]
   1d296:	7c52      	ldrb	r2, [r2, #17]
   1d298:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1d29a:	2317      	movs	r3, #23
   1d29c:	18fb      	adds	r3, r7, r3
   1d29e:	683a      	ldr	r2, [r7, #0]
   1d2a0:	7c12      	ldrb	r2, [r2, #16]
   1d2a2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d2a4:	2310      	movs	r3, #16
   1d2a6:	61bb      	str	r3, [r7, #24]
		break;
   1d2a8:	e036      	b.n	1d318 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d2aa:	231f      	movs	r3, #31
   1d2ac:	18fb      	adds	r3, r7, r3
   1d2ae:	2201      	movs	r2, #1
   1d2b0:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1d2b2:	2317      	movs	r3, #23
   1d2b4:	18fb      	adds	r3, r7, r3
   1d2b6:	2202      	movs	r2, #2
   1d2b8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d2ba:	2310      	movs	r3, #16
   1d2bc:	61bb      	str	r3, [r7, #24]
		break;
   1d2be:	e02b      	b.n	1d318 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1d2c0:	231f      	movs	r3, #31
   1d2c2:	18fb      	adds	r3, r7, r3
   1d2c4:	2202      	movs	r2, #2
   1d2c6:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1d2c8:	2317      	movs	r3, #23
   1d2ca:	18fb      	adds	r3, r7, r3
   1d2cc:	2204      	movs	r2, #4
   1d2ce:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d2d0:	2310      	movs	r3, #16
   1d2d2:	61bb      	str	r3, [r7, #24]
		break;
   1d2d4:	e020      	b.n	1d318 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1d2d6:	231f      	movs	r3, #31
   1d2d8:	18fb      	adds	r3, r7, r3
   1d2da:	2201      	movs	r2, #1
   1d2dc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1d2de:	2317      	movs	r3, #23
   1d2e0:	18fb      	adds	r3, r7, r3
   1d2e2:	2206      	movs	r2, #6
   1d2e4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d2e6:	2310      	movs	r3, #16
   1d2e8:	61bb      	str	r3, [r7, #24]
		break;
   1d2ea:	e015      	b.n	1d318 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1d2ec:	231f      	movs	r3, #31
   1d2ee:	18fb      	adds	r3, r7, r3
   1d2f0:	2200      	movs	r2, #0
   1d2f2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1d2f4:	2317      	movs	r3, #23
   1d2f6:	18fb      	adds	r3, r7, r3
   1d2f8:	2208      	movs	r2, #8
   1d2fa:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1d2fc:	2310      	movs	r3, #16
   1d2fe:	61bb      	str	r3, [r7, #24]
		break;
   1d300:	e00a      	b.n	1d318 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1d302:	2330      	movs	r3, #48	; 0x30
   1d304:	61bb      	str	r3, [r7, #24]
		break;
   1d306:	e007      	b.n	1d318 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1d308:	2320      	movs	r3, #32
   1d30a:	61bb      	str	r3, [r7, #24]
		break;
   1d30c:	e004      	b.n	1d318 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1d30e:	2300      	movs	r3, #0
   1d310:	61bb      	str	r3, [r7, #24]
		break;
   1d312:	e001      	b.n	1d318 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1d314:	2317      	movs	r3, #23
   1d316:	e1ae      	b.n	1d676 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1d318:	231f      	movs	r3, #31
   1d31a:	18fb      	adds	r3, r7, r3
   1d31c:	781b      	ldrb	r3, [r3, #0]
   1d31e:	011b      	lsls	r3, r3, #4
   1d320:	b2db      	uxtb	r3, r3
   1d322:	2270      	movs	r2, #112	; 0x70
   1d324:	4013      	ands	r3, r2
   1d326:	b2da      	uxtb	r2, r3
   1d328:	2317      	movs	r3, #23
   1d32a:	18fb      	adds	r3, r7, r3
   1d32c:	781b      	ldrb	r3, [r3, #0]
   1d32e:	4313      	orrs	r3, r2
   1d330:	b2da      	uxtb	r2, r3
   1d332:	693b      	ldr	r3, [r7, #16]
   1d334:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1d336:	683b      	ldr	r3, [r7, #0]
   1d338:	7ddb      	ldrb	r3, [r3, #23]
   1d33a:	2b3f      	cmp	r3, #63	; 0x3f
   1d33c:	d901      	bls.n	1d342 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1d33e:	2317      	movs	r3, #23
   1d340:	e199      	b.n	1d676 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1d342:	683b      	ldr	r3, [r7, #0]
   1d344:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1d346:	693b      	ldr	r3, [r7, #16]
   1d348:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1d34a:	46c0      	nop			; (mov r8, r8)
   1d34c:	687b      	ldr	r3, [r7, #4]
   1d34e:	0018      	movs	r0, r3
   1d350:	4b65      	ldr	r3, [pc, #404]	; (1d4e8 <_adc_set_config+0x378>)
   1d352:	4798      	blx	r3
   1d354:	1e03      	subs	r3, r0, #0
   1d356:	d1f9      	bne.n	1d34c <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1d358:	683b      	ldr	r3, [r7, #0]
   1d35a:	885a      	ldrh	r2, [r3, #2]
   1d35c:	69bb      	ldr	r3, [r7, #24]
   1d35e:	b29b      	uxth	r3, r3
   1d360:	4313      	orrs	r3, r2
   1d362:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d364:	683b      	ldr	r3, [r7, #0]
   1d366:	2124      	movs	r1, #36	; 0x24
   1d368:	5c5b      	ldrb	r3, [r3, r1]
   1d36a:	b29b      	uxth	r3, r3
   1d36c:	00db      	lsls	r3, r3, #3
   1d36e:	b29b      	uxth	r3, r3
			resolution |
   1d370:	4313      	orrs	r3, r2
   1d372:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d374:	683b      	ldr	r3, [r7, #0]
   1d376:	7d1b      	ldrb	r3, [r3, #20]
   1d378:	b29b      	uxth	r3, r3
   1d37a:	009b      	lsls	r3, r3, #2
   1d37c:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1d37e:	4313      	orrs	r3, r2
   1d380:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d382:	683b      	ldr	r3, [r7, #0]
   1d384:	7c9b      	ldrb	r3, [r3, #18]
   1d386:	b29b      	uxth	r3, r3
   1d388:	18db      	adds	r3, r3, r3
   1d38a:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1d38c:	4313      	orrs	r3, r2
   1d38e:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1d390:	683b      	ldr	r3, [r7, #0]
   1d392:	7cdb      	ldrb	r3, [r3, #19]
   1d394:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1d396:	4313      	orrs	r3, r2
   1d398:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1d39a:	693b      	ldr	r3, [r7, #16]
   1d39c:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1d39e:	683b      	ldr	r3, [r7, #0]
   1d3a0:	7e1b      	ldrb	r3, [r3, #24]
   1d3a2:	2b00      	cmp	r3, #0
   1d3a4:	d100      	bne.n	1d3a8 <_adc_set_config+0x238>
   1d3a6:	e0c4      	b.n	1d532 <_adc_set_config+0x3c2>
		switch (resolution) {
   1d3a8:	69bb      	ldr	r3, [r7, #24]
   1d3aa:	2b10      	cmp	r3, #16
   1d3ac:	d100      	bne.n	1d3b0 <_adc_set_config+0x240>
   1d3ae:	e076      	b.n	1d49e <_adc_set_config+0x32e>
   1d3b0:	d802      	bhi.n	1d3b8 <_adc_set_config+0x248>
   1d3b2:	2b00      	cmp	r3, #0
   1d3b4:	d04d      	beq.n	1d452 <_adc_set_config+0x2e2>
   1d3b6:	e0bc      	b.n	1d532 <_adc_set_config+0x3c2>
   1d3b8:	2b20      	cmp	r3, #32
   1d3ba:	d023      	beq.n	1d404 <_adc_set_config+0x294>
   1d3bc:	2b30      	cmp	r3, #48	; 0x30
   1d3be:	d000      	beq.n	1d3c2 <_adc_set_config+0x252>
   1d3c0:	e0b7      	b.n	1d532 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1d3c2:	683b      	ldr	r3, [r7, #0]
   1d3c4:	7cdb      	ldrb	r3, [r3, #19]
   1d3c6:	2b00      	cmp	r3, #0
   1d3c8:	d011      	beq.n	1d3ee <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1d3ca:	683b      	ldr	r3, [r7, #0]
   1d3cc:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d3ce:	2b7f      	cmp	r3, #127	; 0x7f
   1d3d0:	dc0b      	bgt.n	1d3ea <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1d3d2:	683b      	ldr	r3, [r7, #0]
   1d3d4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1d3d6:	3380      	adds	r3, #128	; 0x80
   1d3d8:	db07      	blt.n	1d3ea <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1d3da:	683b      	ldr	r3, [r7, #0]
   1d3dc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1d3de:	2b7f      	cmp	r3, #127	; 0x7f
   1d3e0:	dc03      	bgt.n	1d3ea <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1d3e2:	683b      	ldr	r3, [r7, #0]
   1d3e4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1d3e6:	3380      	adds	r3, #128	; 0x80
   1d3e8:	da01      	bge.n	1d3ee <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d3ea:	2317      	movs	r3, #23
   1d3ec:	e143      	b.n	1d676 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1d3ee:	683b      	ldr	r3, [r7, #0]
   1d3f0:	69db      	ldr	r3, [r3, #28]
   1d3f2:	2bff      	cmp	r3, #255	; 0xff
   1d3f4:	dc04      	bgt.n	1d400 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1d3f6:	683b      	ldr	r3, [r7, #0]
   1d3f8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1d3fa:	2bff      	cmp	r3, #255	; 0xff
   1d3fc:	dc00      	bgt.n	1d400 <_adc_set_config+0x290>
   1d3fe:	e091      	b.n	1d524 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d400:	2317      	movs	r3, #23
   1d402:	e138      	b.n	1d676 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1d404:	683b      	ldr	r3, [r7, #0]
   1d406:	7cdb      	ldrb	r3, [r3, #19]
   1d408:	2b00      	cmp	r3, #0
   1d40a:	d015      	beq.n	1d438 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1d40c:	683b      	ldr	r3, [r7, #0]
   1d40e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d410:	4a36      	ldr	r2, [pc, #216]	; (1d4ec <_adc_set_config+0x37c>)
   1d412:	4293      	cmp	r3, r2
   1d414:	dc0e      	bgt.n	1d434 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1d416:	683b      	ldr	r3, [r7, #0]
   1d418:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1d41a:	4a35      	ldr	r2, [pc, #212]	; (1d4f0 <_adc_set_config+0x380>)
   1d41c:	4293      	cmp	r3, r2
   1d41e:	db09      	blt.n	1d434 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1d420:	683b      	ldr	r3, [r7, #0]
   1d422:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1d424:	4a31      	ldr	r2, [pc, #196]	; (1d4ec <_adc_set_config+0x37c>)
   1d426:	4293      	cmp	r3, r2
   1d428:	dc04      	bgt.n	1d434 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1d42a:	683b      	ldr	r3, [r7, #0]
   1d42c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1d42e:	4a30      	ldr	r2, [pc, #192]	; (1d4f0 <_adc_set_config+0x380>)
   1d430:	4293      	cmp	r3, r2
   1d432:	da01      	bge.n	1d438 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d434:	2317      	movs	r3, #23
   1d436:	e11e      	b.n	1d676 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1d438:	683b      	ldr	r3, [r7, #0]
   1d43a:	69db      	ldr	r3, [r3, #28]
   1d43c:	4a2d      	ldr	r2, [pc, #180]	; (1d4f4 <_adc_set_config+0x384>)
   1d43e:	4293      	cmp	r3, r2
   1d440:	dc05      	bgt.n	1d44e <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1d442:	683b      	ldr	r3, [r7, #0]
   1d444:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1d446:	4a2b      	ldr	r2, [pc, #172]	; (1d4f4 <_adc_set_config+0x384>)
   1d448:	4293      	cmp	r3, r2
   1d44a:	dc00      	bgt.n	1d44e <_adc_set_config+0x2de>
   1d44c:	e06c      	b.n	1d528 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d44e:	2317      	movs	r3, #23
   1d450:	e111      	b.n	1d676 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1d452:	683b      	ldr	r3, [r7, #0]
   1d454:	7cdb      	ldrb	r3, [r3, #19]
   1d456:	2b00      	cmp	r3, #0
   1d458:	d015      	beq.n	1d486 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1d45a:	683b      	ldr	r3, [r7, #0]
   1d45c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d45e:	4a26      	ldr	r2, [pc, #152]	; (1d4f8 <_adc_set_config+0x388>)
   1d460:	4293      	cmp	r3, r2
   1d462:	dc0e      	bgt.n	1d482 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1d464:	683b      	ldr	r3, [r7, #0]
   1d466:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1d468:	4a24      	ldr	r2, [pc, #144]	; (1d4fc <_adc_set_config+0x38c>)
   1d46a:	4293      	cmp	r3, r2
   1d46c:	db09      	blt.n	1d482 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1d46e:	683b      	ldr	r3, [r7, #0]
   1d470:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1d472:	4a21      	ldr	r2, [pc, #132]	; (1d4f8 <_adc_set_config+0x388>)
   1d474:	4293      	cmp	r3, r2
   1d476:	dc04      	bgt.n	1d482 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1d478:	683b      	ldr	r3, [r7, #0]
   1d47a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1d47c:	4a1f      	ldr	r2, [pc, #124]	; (1d4fc <_adc_set_config+0x38c>)
   1d47e:	4293      	cmp	r3, r2
   1d480:	da01      	bge.n	1d486 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d482:	2317      	movs	r3, #23
   1d484:	e0f7      	b.n	1d676 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1d486:	683b      	ldr	r3, [r7, #0]
   1d488:	69db      	ldr	r3, [r3, #28]
   1d48a:	4a1d      	ldr	r2, [pc, #116]	; (1d500 <_adc_set_config+0x390>)
   1d48c:	4293      	cmp	r3, r2
   1d48e:	dc04      	bgt.n	1d49a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1d490:	683b      	ldr	r3, [r7, #0]
   1d492:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1d494:	4a1a      	ldr	r2, [pc, #104]	; (1d500 <_adc_set_config+0x390>)
   1d496:	4293      	cmp	r3, r2
   1d498:	dd48      	ble.n	1d52c <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d49a:	2317      	movs	r3, #23
   1d49c:	e0eb      	b.n	1d676 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1d49e:	683b      	ldr	r3, [r7, #0]
   1d4a0:	7cdb      	ldrb	r3, [r3, #19]
   1d4a2:	2b00      	cmp	r3, #0
   1d4a4:	d032      	beq.n	1d50c <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1d4a6:	683b      	ldr	r3, [r7, #0]
   1d4a8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1d4aa:	4a16      	ldr	r2, [pc, #88]	; (1d504 <_adc_set_config+0x394>)
   1d4ac:	4293      	cmp	r3, r2
   1d4ae:	dc0e      	bgt.n	1d4ce <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1d4b0:	683b      	ldr	r3, [r7, #0]
   1d4b2:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1d4b4:	4a14      	ldr	r2, [pc, #80]	; (1d508 <_adc_set_config+0x398>)
   1d4b6:	4293      	cmp	r3, r2
   1d4b8:	db09      	blt.n	1d4ce <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1d4ba:	683b      	ldr	r3, [r7, #0]
   1d4bc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1d4be:	4a11      	ldr	r2, [pc, #68]	; (1d504 <_adc_set_config+0x394>)
   1d4c0:	4293      	cmp	r3, r2
   1d4c2:	dc04      	bgt.n	1d4ce <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1d4c4:	683b      	ldr	r3, [r7, #0]
   1d4c6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1d4c8:	4a0f      	ldr	r2, [pc, #60]	; (1d508 <_adc_set_config+0x398>)
   1d4ca:	4293      	cmp	r3, r2
   1d4cc:	da1e      	bge.n	1d50c <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d4ce:	2317      	movs	r3, #23
   1d4d0:	e0d1      	b.n	1d676 <_adc_set_config+0x506>
   1d4d2:	46c0      	nop			; (mov r8, r8)
   1d4d4:	0001cf49 	.word	0x0001cf49
   1d4d8:	00024a35 	.word	0x00024a35
   1d4dc:	00024a79 	.word	0x00024a79
   1d4e0:	0001d0f9 	.word	0x0001d0f9
   1d4e4:	0002aa60 	.word	0x0002aa60
   1d4e8:	0001d025 	.word	0x0001d025
   1d4ec:	000001ff 	.word	0x000001ff
   1d4f0:	fffffe00 	.word	0xfffffe00
   1d4f4:	000003ff 	.word	0x000003ff
   1d4f8:	000007ff 	.word	0x000007ff
   1d4fc:	fffff800 	.word	0xfffff800
   1d500:	00000fff 	.word	0x00000fff
   1d504:	00007fff 	.word	0x00007fff
   1d508:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1d50c:	683b      	ldr	r3, [r7, #0]
   1d50e:	69db      	ldr	r3, [r3, #28]
   1d510:	4a5b      	ldr	r2, [pc, #364]	; (1d680 <_adc_set_config+0x510>)
   1d512:	4293      	cmp	r3, r2
   1d514:	dc04      	bgt.n	1d520 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1d516:	683b      	ldr	r3, [r7, #0]
   1d518:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1d51a:	4a59      	ldr	r2, [pc, #356]	; (1d680 <_adc_set_config+0x510>)
   1d51c:	4293      	cmp	r3, r2
   1d51e:	dd07      	ble.n	1d530 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1d520:	2317      	movs	r3, #23
   1d522:	e0a8      	b.n	1d676 <_adc_set_config+0x506>
			break;
   1d524:	46c0      	nop			; (mov r8, r8)
   1d526:	e004      	b.n	1d532 <_adc_set_config+0x3c2>
			break;
   1d528:	46c0      	nop			; (mov r8, r8)
   1d52a:	e002      	b.n	1d532 <_adc_set_config+0x3c2>
			break;
   1d52c:	46c0      	nop			; (mov r8, r8)
   1d52e:	e000      	b.n	1d532 <_adc_set_config+0x3c2>
			}
			break;
   1d530:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1d532:	46c0      	nop			; (mov r8, r8)
   1d534:	687b      	ldr	r3, [r7, #4]
   1d536:	0018      	movs	r0, r3
   1d538:	4b52      	ldr	r3, [pc, #328]	; (1d684 <_adc_set_config+0x514>)
   1d53a:	4798      	blx	r3
   1d53c:	1e03      	subs	r3, r0, #0
   1d53e:	d1f9      	bne.n	1d534 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1d540:	683b      	ldr	r3, [r7, #0]
   1d542:	7e1a      	ldrb	r2, [r3, #24]
   1d544:	693b      	ldr	r3, [r7, #16]
   1d546:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1d548:	46c0      	nop			; (mov r8, r8)
   1d54a:	687b      	ldr	r3, [r7, #4]
   1d54c:	0018      	movs	r0, r3
   1d54e:	4b4d      	ldr	r3, [pc, #308]	; (1d684 <_adc_set_config+0x514>)
   1d550:	4798      	blx	r3
   1d552:	1e03      	subs	r3, r0, #0
   1d554:	d1f9      	bne.n	1d54a <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1d556:	683b      	ldr	r3, [r7, #0]
   1d558:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1d55a:	b29a      	uxth	r2, r3
   1d55c:	693b      	ldr	r3, [r7, #16]
   1d55e:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1d560:	46c0      	nop			; (mov r8, r8)
   1d562:	687b      	ldr	r3, [r7, #4]
   1d564:	0018      	movs	r0, r3
   1d566:	4b47      	ldr	r3, [pc, #284]	; (1d684 <_adc_set_config+0x514>)
   1d568:	4798      	blx	r3
   1d56a:	1e03      	subs	r3, r0, #0
   1d56c:	d1f9      	bne.n	1d562 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1d56e:	683b      	ldr	r3, [r7, #0]
   1d570:	6a1b      	ldr	r3, [r3, #32]
   1d572:	b29a      	uxth	r2, r3
   1d574:	693b      	ldr	r3, [r7, #16]
   1d576:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1d578:	2314      	movs	r3, #20
   1d57a:	18fb      	adds	r3, r7, r3
   1d57c:	683a      	ldr	r2, [r7, #0]
   1d57e:	212c      	movs	r1, #44	; 0x2c
   1d580:	5c52      	ldrb	r2, [r2, r1]
   1d582:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1d584:	2314      	movs	r3, #20
   1d586:	18fb      	adds	r3, r7, r3
   1d588:	781b      	ldrb	r3, [r3, #0]
   1d58a:	2b00      	cmp	r3, #0
   1d58c:	d006      	beq.n	1d59c <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1d58e:	2314      	movs	r3, #20
   1d590:	18fb      	adds	r3, r7, r3
   1d592:	781a      	ldrb	r2, [r3, #0]
   1d594:	2314      	movs	r3, #20
   1d596:	18fb      	adds	r3, r7, r3
   1d598:	3a01      	subs	r2, #1
   1d59a:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d59c:	2314      	movs	r3, #20
   1d59e:	18fb      	adds	r3, r7, r3
   1d5a0:	781b      	ldrb	r3, [r3, #0]
   1d5a2:	2b0f      	cmp	r3, #15
   1d5a4:	d804      	bhi.n	1d5b0 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1d5a6:	683b      	ldr	r3, [r7, #0]
   1d5a8:	222b      	movs	r2, #43	; 0x2b
   1d5aa:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1d5ac:	2b0f      	cmp	r3, #15
   1d5ae:	d901      	bls.n	1d5b4 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1d5b0:	2317      	movs	r3, #23
   1d5b2:	e060      	b.n	1d676 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1d5b4:	46c0      	nop			; (mov r8, r8)
   1d5b6:	687b      	ldr	r3, [r7, #4]
   1d5b8:	0018      	movs	r0, r3
   1d5ba:	4b32      	ldr	r3, [pc, #200]	; (1d684 <_adc_set_config+0x514>)
   1d5bc:	4798      	blx	r3
   1d5be:	1e03      	subs	r3, r0, #0
   1d5c0:	d1f9      	bne.n	1d5b6 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1d5c2:	683b      	ldr	r3, [r7, #0]
   1d5c4:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1d5c6:	683a      	ldr	r2, [r7, #0]
   1d5c8:	212b      	movs	r1, #43	; 0x2b
   1d5ca:	5c52      	ldrb	r2, [r2, r1]
   1d5cc:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1d5ce:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d5d0:	2214      	movs	r2, #20
   1d5d2:	18ba      	adds	r2, r7, r2
   1d5d4:	7812      	ldrb	r2, [r2, #0]
   1d5d6:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1d5d8:	4313      	orrs	r3, r2
			config->negative_input |
   1d5da:	683a      	ldr	r2, [r7, #0]
   1d5dc:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1d5de:	4313      	orrs	r3, r2
			config->positive_input;
   1d5e0:	683a      	ldr	r2, [r7, #0]
   1d5e2:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1d5e4:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1d5e6:	693b      	ldr	r3, [r7, #16]
   1d5e8:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1d5ea:	683b      	ldr	r3, [r7, #0]
   1d5ec:	222a      	movs	r2, #42	; 0x2a
   1d5ee:	5c9a      	ldrb	r2, [r3, r2]
   1d5f0:	693b      	ldr	r3, [r7, #16]
   1d5f2:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1d5f4:	693b      	ldr	r3, [r7, #16]
   1d5f6:	220f      	movs	r2, #15
   1d5f8:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1d5fa:	683b      	ldr	r3, [r7, #0]
   1d5fc:	2224      	movs	r2, #36	; 0x24
   1d5fe:	5c9b      	ldrb	r3, [r3, r2]
   1d600:	2b00      	cmp	r3, #0
   1d602:	d01e      	beq.n	1d642 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1d604:	683b      	ldr	r3, [r7, #0]
   1d606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d608:	4a1f      	ldr	r2, [pc, #124]	; (1d688 <_adc_set_config+0x518>)
   1d60a:	4293      	cmp	r3, r2
   1d60c:	d901      	bls.n	1d612 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1d60e:	2317      	movs	r3, #23
   1d610:	e031      	b.n	1d676 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1d612:	683b      	ldr	r3, [r7, #0]
   1d614:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1d616:	693b      	ldr	r3, [r7, #16]
   1d618:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1d61a:	683b      	ldr	r3, [r7, #0]
   1d61c:	2228      	movs	r2, #40	; 0x28
   1d61e:	5e9b      	ldrsh	r3, [r3, r2]
   1d620:	4a1a      	ldr	r2, [pc, #104]	; (1d68c <_adc_set_config+0x51c>)
   1d622:	4293      	cmp	r3, r2
   1d624:	dc05      	bgt.n	1d632 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1d626:	683b      	ldr	r3, [r7, #0]
   1d628:	2228      	movs	r2, #40	; 0x28
   1d62a:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1d62c:	4a18      	ldr	r2, [pc, #96]	; (1d690 <_adc_set_config+0x520>)
   1d62e:	4293      	cmp	r3, r2
   1d630:	da01      	bge.n	1d636 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1d632:	2317      	movs	r3, #23
   1d634:	e01f      	b.n	1d676 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1d636:	683b      	ldr	r3, [r7, #0]
   1d638:	2228      	movs	r2, #40	; 0x28
   1d63a:	5e9b      	ldrsh	r3, [r3, r2]
   1d63c:	b29a      	uxth	r2, r3
   1d63e:	693b      	ldr	r3, [r7, #16]
   1d640:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1d642:	4b14      	ldr	r3, [pc, #80]	; (1d694 <_adc_set_config+0x524>)
   1d644:	681b      	ldr	r3, [r3, #0]
   1d646:	08db      	lsrs	r3, r3, #3
   1d648:	b29b      	uxth	r3, r3
   1d64a:	021b      	lsls	r3, r3, #8
   1d64c:	b29a      	uxth	r2, r3
   1d64e:	23e0      	movs	r3, #224	; 0xe0
   1d650:	00db      	lsls	r3, r3, #3
   1d652:	4013      	ands	r3, r2
   1d654:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1d656:	4b10      	ldr	r3, [pc, #64]	; (1d698 <_adc_set_config+0x528>)
   1d658:	685c      	ldr	r4, [r3, #4]
   1d65a:	681b      	ldr	r3, [r3, #0]
   1d65c:	0161      	lsls	r1, r4, #5
   1d65e:	0edd      	lsrs	r5, r3, #27
   1d660:	430d      	orrs	r5, r1
   1d662:	0ee6      	lsrs	r6, r4, #27
   1d664:	b2ab      	uxth	r3, r5
   1d666:	21ff      	movs	r1, #255	; 0xff
   1d668:	400b      	ands	r3, r1
   1d66a:	b29b      	uxth	r3, r3
			) |
   1d66c:	4313      	orrs	r3, r2
   1d66e:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1d670:	693b      	ldr	r3, [r7, #16]
   1d672:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1d674:	2300      	movs	r3, #0
}
   1d676:	0018      	movs	r0, r3
   1d678:	46bd      	mov	sp, r7
   1d67a:	b009      	add	sp, #36	; 0x24
   1d67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d67e:	46c0      	nop			; (mov r8, r8)
   1d680:	0000ffff 	.word	0x0000ffff
   1d684:	0001d025 	.word	0x0001d025
   1d688:	00000fff 	.word	0x00000fff
   1d68c:	000007ff 	.word	0x000007ff
   1d690:	fffff800 	.word	0xfffff800
   1d694:	00806024 	.word	0x00806024
   1d698:	00806020 	.word	0x00806020

0001d69c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1d69c:	b580      	push	{r7, lr}
   1d69e:	b086      	sub	sp, #24
   1d6a0:	af00      	add	r7, sp, #0
   1d6a2:	60f8      	str	r0, [r7, #12]
   1d6a4:	60b9      	str	r1, [r7, #8]
   1d6a6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1d6a8:	68fb      	ldr	r3, [r7, #12]
   1d6aa:	68ba      	ldr	r2, [r7, #8]
   1d6ac:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1d6ae:	2380      	movs	r3, #128	; 0x80
   1d6b0:	025b      	lsls	r3, r3, #9
   1d6b2:	0019      	movs	r1, r3
   1d6b4:	2002      	movs	r0, #2
   1d6b6:	4b32      	ldr	r3, [pc, #200]	; (1d780 <adc_init+0xe4>)
   1d6b8:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1d6ba:	68bb      	ldr	r3, [r7, #8]
   1d6bc:	781b      	ldrb	r3, [r3, #0]
   1d6be:	b2db      	uxtb	r3, r3
   1d6c0:	001a      	movs	r2, r3
   1d6c2:	2301      	movs	r3, #1
   1d6c4:	4013      	ands	r3, r2
   1d6c6:	d001      	beq.n	1d6cc <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1d6c8:	2305      	movs	r3, #5
   1d6ca:	e055      	b.n	1d778 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1d6cc:	68bb      	ldr	r3, [r7, #8]
   1d6ce:	781b      	ldrb	r3, [r3, #0]
   1d6d0:	b2db      	uxtb	r3, r3
   1d6d2:	001a      	movs	r2, r3
   1d6d4:	2302      	movs	r3, #2
   1d6d6:	4013      	ands	r3, r2
   1d6d8:	d001      	beq.n	1d6de <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1d6da:	231c      	movs	r3, #28
   1d6dc:	e04c      	b.n	1d778 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1d6de:	687b      	ldr	r3, [r7, #4]
   1d6e0:	785a      	ldrb	r2, [r3, #1]
   1d6e2:	68fb      	ldr	r3, [r7, #12]
   1d6e4:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1d6e6:	68fb      	ldr	r3, [r7, #12]
   1d6e8:	791b      	ldrb	r3, [r3, #4]
   1d6ea:	2b00      	cmp	r3, #0
   1d6ec:	d102      	bne.n	1d6f4 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1d6ee:	2001      	movs	r0, #1
   1d6f0:	4b24      	ldr	r3, [pc, #144]	; (1d784 <adc_init+0xe8>)
   1d6f2:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d6f4:	2317      	movs	r3, #23
   1d6f6:	18fb      	adds	r3, r7, r3
   1d6f8:	2200      	movs	r2, #0
   1d6fa:	701a      	strb	r2, [r3, #0]
   1d6fc:	e00e      	b.n	1d71c <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1d6fe:	2317      	movs	r3, #23
   1d700:	18fb      	adds	r3, r7, r3
   1d702:	781a      	ldrb	r2, [r3, #0]
   1d704:	68fb      	ldr	r3, [r7, #12]
   1d706:	3202      	adds	r2, #2
   1d708:	0092      	lsls	r2, r2, #2
   1d70a:	2100      	movs	r1, #0
   1d70c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1d70e:	2317      	movs	r3, #23
   1d710:	18fb      	adds	r3, r7, r3
   1d712:	781a      	ldrb	r2, [r3, #0]
   1d714:	2317      	movs	r3, #23
   1d716:	18fb      	adds	r3, r7, r3
   1d718:	3201      	adds	r2, #1
   1d71a:	701a      	strb	r2, [r3, #0]
   1d71c:	2317      	movs	r3, #23
   1d71e:	18fb      	adds	r3, r7, r3
   1d720:	781b      	ldrb	r3, [r3, #0]
   1d722:	2b02      	cmp	r3, #2
   1d724:	d9eb      	bls.n	1d6fe <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1d726:	68fb      	ldr	r3, [r7, #12]
   1d728:	2200      	movs	r2, #0
   1d72a:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1d72c:	68fb      	ldr	r3, [r7, #12]
   1d72e:	2200      	movs	r2, #0
   1d730:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1d732:	68fb      	ldr	r3, [r7, #12]
   1d734:	2200      	movs	r2, #0
   1d736:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1d738:	68fb      	ldr	r3, [r7, #12]
   1d73a:	2200      	movs	r2, #0
   1d73c:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1d73e:	4b12      	ldr	r3, [pc, #72]	; (1d788 <adc_init+0xec>)
   1d740:	68fa      	ldr	r2, [r7, #12]
   1d742:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d744:	687b      	ldr	r3, [r7, #4]
   1d746:	222a      	movs	r2, #42	; 0x2a
   1d748:	5c9b      	ldrb	r3, [r3, r2]
   1d74a:	2b00      	cmp	r3, #0
   1d74c:	d10a      	bne.n	1d764 <adc_init+0xc8>
			!config->freerunning) {
   1d74e:	687b      	ldr	r3, [r7, #4]
   1d750:	7d1b      	ldrb	r3, [r3, #20]
   1d752:	2201      	movs	r2, #1
   1d754:	4053      	eors	r3, r2
   1d756:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1d758:	2b00      	cmp	r3, #0
   1d75a:	d003      	beq.n	1d764 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1d75c:	68fb      	ldr	r3, [r7, #12]
   1d75e:	2201      	movs	r2, #1
   1d760:	775a      	strb	r2, [r3, #29]
   1d762:	e002      	b.n	1d76a <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1d764:	68fb      	ldr	r3, [r7, #12]
   1d766:	2200      	movs	r2, #0
   1d768:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1d76a:	687a      	ldr	r2, [r7, #4]
   1d76c:	68fb      	ldr	r3, [r7, #12]
   1d76e:	0011      	movs	r1, r2
   1d770:	0018      	movs	r0, r3
   1d772:	4b06      	ldr	r3, [pc, #24]	; (1d78c <adc_init+0xf0>)
   1d774:	4798      	blx	r3
   1d776:	0003      	movs	r3, r0
}
   1d778:	0018      	movs	r0, r3
   1d77a:	46bd      	mov	sp, r7
   1d77c:	b006      	add	sp, #24
   1d77e:	bd80      	pop	{r7, pc}
   1d780:	0001cf61 	.word	0x0001cf61
   1d784:	0001cfe5 	.word	0x0001cfe5
   1d788:	200008a8 	.word	0x200008a8
   1d78c:	0001d171 	.word	0x0001d171

0001d790 <adc_is_syncing>:
{
   1d790:	b580      	push	{r7, lr}
   1d792:	b084      	sub	sp, #16
   1d794:	af00      	add	r7, sp, #0
   1d796:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d798:	687b      	ldr	r3, [r7, #4]
   1d79a:	681b      	ldr	r3, [r3, #0]
   1d79c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1d79e:	68fb      	ldr	r3, [r7, #12]
   1d7a0:	7e5b      	ldrb	r3, [r3, #25]
   1d7a2:	b2db      	uxtb	r3, r3
   1d7a4:	b25b      	sxtb	r3, r3
   1d7a6:	2b00      	cmp	r3, #0
   1d7a8:	da01      	bge.n	1d7ae <adc_is_syncing+0x1e>
		return true;
   1d7aa:	2301      	movs	r3, #1
   1d7ac:	e000      	b.n	1d7b0 <adc_is_syncing+0x20>
	return false;
   1d7ae:	2300      	movs	r3, #0
}
   1d7b0:	0018      	movs	r0, r3
   1d7b2:	46bd      	mov	sp, r7
   1d7b4:	b004      	add	sp, #16
   1d7b6:	bd80      	pop	{r7, pc}

0001d7b8 <adc_start_conversion>:
{
   1d7b8:	b580      	push	{r7, lr}
   1d7ba:	b084      	sub	sp, #16
   1d7bc:	af00      	add	r7, sp, #0
   1d7be:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1d7c0:	687b      	ldr	r3, [r7, #4]
   1d7c2:	681b      	ldr	r3, [r3, #0]
   1d7c4:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1d7c6:	46c0      	nop			; (mov r8, r8)
   1d7c8:	687b      	ldr	r3, [r7, #4]
   1d7ca:	0018      	movs	r0, r3
   1d7cc:	4b0b      	ldr	r3, [pc, #44]	; (1d7fc <adc_start_conversion+0x44>)
   1d7ce:	4798      	blx	r3
   1d7d0:	1e03      	subs	r3, r0, #0
   1d7d2:	d1f9      	bne.n	1d7c8 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	7b1b      	ldrb	r3, [r3, #12]
   1d7d8:	b2db      	uxtb	r3, r3
   1d7da:	2202      	movs	r2, #2
   1d7dc:	4313      	orrs	r3, r2
   1d7de:	b2da      	uxtb	r2, r3
   1d7e0:	68fb      	ldr	r3, [r7, #12]
   1d7e2:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1d7e4:	46c0      	nop			; (mov r8, r8)
   1d7e6:	687b      	ldr	r3, [r7, #4]
   1d7e8:	0018      	movs	r0, r3
   1d7ea:	4b04      	ldr	r3, [pc, #16]	; (1d7fc <adc_start_conversion+0x44>)
   1d7ec:	4798      	blx	r3
   1d7ee:	1e03      	subs	r3, r0, #0
   1d7f0:	d1f9      	bne.n	1d7e6 <adc_start_conversion+0x2e>
}
   1d7f2:	46c0      	nop			; (mov r8, r8)
   1d7f4:	46bd      	mov	sp, r7
   1d7f6:	b004      	add	sp, #16
   1d7f8:	bd80      	pop	{r7, pc}
   1d7fa:	46c0      	nop			; (mov r8, r8)
   1d7fc:	0001d791 	.word	0x0001d791

0001d800 <adc_enable_interrupt>:
{
   1d800:	b580      	push	{r7, lr}
   1d802:	b084      	sub	sp, #16
   1d804:	af00      	add	r7, sp, #0
   1d806:	6078      	str	r0, [r7, #4]
   1d808:	000a      	movs	r2, r1
   1d80a:	1cfb      	adds	r3, r7, #3
   1d80c:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1d80e:	687b      	ldr	r3, [r7, #4]
   1d810:	681b      	ldr	r3, [r3, #0]
   1d812:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1d814:	68fb      	ldr	r3, [r7, #12]
   1d816:	1cfa      	adds	r2, r7, #3
   1d818:	7812      	ldrb	r2, [r2, #0]
   1d81a:	75da      	strb	r2, [r3, #23]
}
   1d81c:	46c0      	nop			; (mov r8, r8)
   1d81e:	46bd      	mov	sp, r7
   1d820:	b004      	add	sp, #16
   1d822:	bd80      	pop	{r7, pc}

0001d824 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1d824:	b580      	push	{r7, lr}
   1d826:	b084      	sub	sp, #16
   1d828:	af00      	add	r7, sp, #0
   1d82a:	6078      	str	r0, [r7, #4]
   1d82c:	000a      	movs	r2, r1
   1d82e:	1cfb      	adds	r3, r7, #3
   1d830:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1d832:	687b      	ldr	r3, [r7, #4]
   1d834:	681b      	ldr	r3, [r3, #0]
   1d836:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1d838:	68fb      	ldr	r3, [r7, #12]
   1d83a:	1cfa      	adds	r2, r7, #3
   1d83c:	7812      	ldrb	r2, [r2, #0]
   1d83e:	759a      	strb	r2, [r3, #22]
}
   1d840:	46c0      	nop			; (mov r8, r8)
   1d842:	46bd      	mov	sp, r7
   1d844:	b004      	add	sp, #16
   1d846:	bd80      	pop	{r7, pc}

0001d848 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1d848:	b580      	push	{r7, lr}
   1d84a:	b084      	sub	sp, #16
   1d84c:	af00      	add	r7, sp, #0
   1d84e:	0002      	movs	r2, r0
   1d850:	1dfb      	adds	r3, r7, #7
   1d852:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1d854:	1dfb      	adds	r3, r7, #7
   1d856:	781a      	ldrb	r2, [r3, #0]
   1d858:	4b47      	ldr	r3, [pc, #284]	; (1d978 <_adc_interrupt_handler+0x130>)
   1d85a:	0092      	lsls	r2, r2, #2
   1d85c:	58d3      	ldr	r3, [r2, r3]
   1d85e:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1d860:	68fb      	ldr	r3, [r7, #12]
   1d862:	681b      	ldr	r3, [r3, #0]
   1d864:	7e1b      	ldrb	r3, [r3, #24]
   1d866:	b2da      	uxtb	r2, r3
   1d868:	68fb      	ldr	r3, [r7, #12]
   1d86a:	681b      	ldr	r3, [r3, #0]
   1d86c:	7ddb      	ldrb	r3, [r3, #23]
   1d86e:	b2db      	uxtb	r3, r3
   1d870:	4013      	ands	r3, r2
   1d872:	b2db      	uxtb	r3, r3
   1d874:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1d876:	68bb      	ldr	r3, [r7, #8]
   1d878:	2201      	movs	r2, #1
   1d87a:	4013      	ands	r3, r2
   1d87c:	d045      	beq.n	1d90a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1d87e:	68fb      	ldr	r3, [r7, #12]
   1d880:	681b      	ldr	r3, [r3, #0]
   1d882:	2201      	movs	r2, #1
   1d884:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1d886:	46c0      	nop			; (mov r8, r8)
   1d888:	68fb      	ldr	r3, [r7, #12]
   1d88a:	0018      	movs	r0, r3
   1d88c:	4b3b      	ldr	r3, [pc, #236]	; (1d97c <_adc_interrupt_handler+0x134>)
   1d88e:	4798      	blx	r3
   1d890:	1e03      	subs	r3, r0, #0
   1d892:	d1f9      	bne.n	1d888 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1d894:	68fb      	ldr	r3, [r7, #12]
   1d896:	695b      	ldr	r3, [r3, #20]
   1d898:	1c99      	adds	r1, r3, #2
   1d89a:	68fa      	ldr	r2, [r7, #12]
   1d89c:	6151      	str	r1, [r2, #20]
   1d89e:	68fa      	ldr	r2, [r7, #12]
   1d8a0:	6812      	ldr	r2, [r2, #0]
   1d8a2:	8b52      	ldrh	r2, [r2, #26]
   1d8a4:	b292      	uxth	r2, r2
   1d8a6:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1d8a8:	68fb      	ldr	r3, [r7, #12]
   1d8aa:	8b1b      	ldrh	r3, [r3, #24]
   1d8ac:	b29b      	uxth	r3, r3
   1d8ae:	3b01      	subs	r3, #1
   1d8b0:	b29b      	uxth	r3, r3
   1d8b2:	68fa      	ldr	r2, [r7, #12]
   1d8b4:	1c19      	adds	r1, r3, #0
   1d8b6:	8311      	strh	r1, [r2, #24]
   1d8b8:	2b00      	cmp	r3, #0
   1d8ba:	d008      	beq.n	1d8ce <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1d8bc:	68fb      	ldr	r3, [r7, #12]
   1d8be:	7f5b      	ldrb	r3, [r3, #29]
   1d8c0:	2b00      	cmp	r3, #0
   1d8c2:	d022      	beq.n	1d90a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1d8c4:	68fb      	ldr	r3, [r7, #12]
   1d8c6:	0018      	movs	r0, r3
   1d8c8:	4b2d      	ldr	r3, [pc, #180]	; (1d980 <_adc_interrupt_handler+0x138>)
   1d8ca:	4798      	blx	r3
   1d8cc:	e01d      	b.n	1d90a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1d8ce:	68fb      	ldr	r3, [r7, #12]
   1d8d0:	2101      	movs	r1, #1
   1d8d2:	0018      	movs	r0, r3
   1d8d4:	4b2b      	ldr	r3, [pc, #172]	; (1d984 <_adc_interrupt_handler+0x13c>)
   1d8d6:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1d8d8:	68fb      	ldr	r3, [r7, #12]
   1d8da:	7f1b      	ldrb	r3, [r3, #28]
   1d8dc:	b2db      	uxtb	r3, r3
   1d8de:	2b05      	cmp	r3, #5
   1d8e0:	d113      	bne.n	1d90a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1d8e2:	68fb      	ldr	r3, [r7, #12]
   1d8e4:	2200      	movs	r2, #0
   1d8e6:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1d8e8:	68fb      	ldr	r3, [r7, #12]
   1d8ea:	7edb      	ldrb	r3, [r3, #27]
   1d8ec:	001a      	movs	r2, r3
   1d8ee:	2301      	movs	r3, #1
   1d8f0:	4013      	ands	r3, r2
   1d8f2:	d00a      	beq.n	1d90a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1d8f4:	68fb      	ldr	r3, [r7, #12]
   1d8f6:	7e9b      	ldrb	r3, [r3, #26]
   1d8f8:	001a      	movs	r2, r3
   1d8fa:	2301      	movs	r3, #1
   1d8fc:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1d8fe:	d004      	beq.n	1d90a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1d900:	68fb      	ldr	r3, [r7, #12]
   1d902:	689b      	ldr	r3, [r3, #8]
   1d904:	68fa      	ldr	r2, [r7, #12]
   1d906:	0010      	movs	r0, r2
   1d908:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1d90a:	68bb      	ldr	r3, [r7, #8]
   1d90c:	2204      	movs	r2, #4
   1d90e:	4013      	ands	r3, r2
   1d910:	d014      	beq.n	1d93c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1d912:	68fb      	ldr	r3, [r7, #12]
   1d914:	681b      	ldr	r3, [r3, #0]
   1d916:	2204      	movs	r2, #4
   1d918:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d91a:	68fb      	ldr	r3, [r7, #12]
   1d91c:	7edb      	ldrb	r3, [r3, #27]
   1d91e:	001a      	movs	r2, r3
   1d920:	2302      	movs	r3, #2
   1d922:	4013      	ands	r3, r2
   1d924:	d00a      	beq.n	1d93c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1d926:	68fb      	ldr	r3, [r7, #12]
   1d928:	7e9b      	ldrb	r3, [r3, #26]
   1d92a:	001a      	movs	r2, r3
   1d92c:	2302      	movs	r3, #2
   1d92e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1d930:	d004      	beq.n	1d93c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1d932:	68fb      	ldr	r3, [r7, #12]
   1d934:	68db      	ldr	r3, [r3, #12]
   1d936:	68fa      	ldr	r2, [r7, #12]
   1d938:	0010      	movs	r0, r2
   1d93a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1d93c:	68bb      	ldr	r3, [r7, #8]
   1d93e:	2202      	movs	r2, #2
   1d940:	4013      	ands	r3, r2
   1d942:	d014      	beq.n	1d96e <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1d944:	68fb      	ldr	r3, [r7, #12]
   1d946:	681b      	ldr	r3, [r3, #0]
   1d948:	2202      	movs	r2, #2
   1d94a:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d94c:	68fb      	ldr	r3, [r7, #12]
   1d94e:	7edb      	ldrb	r3, [r3, #27]
   1d950:	001a      	movs	r2, r3
   1d952:	2304      	movs	r3, #4
   1d954:	4013      	ands	r3, r2
   1d956:	d00a      	beq.n	1d96e <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1d958:	68fb      	ldr	r3, [r7, #12]
   1d95a:	7e9b      	ldrb	r3, [r3, #26]
   1d95c:	001a      	movs	r2, r3
   1d95e:	2304      	movs	r3, #4
   1d960:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1d962:	d004      	beq.n	1d96e <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1d964:	68fb      	ldr	r3, [r7, #12]
   1d966:	691b      	ldr	r3, [r3, #16]
   1d968:	68fa      	ldr	r2, [r7, #12]
   1d96a:	0010      	movs	r0, r2
   1d96c:	4798      	blx	r3
		}
	}
}
   1d96e:	46c0      	nop			; (mov r8, r8)
   1d970:	46bd      	mov	sp, r7
   1d972:	b004      	add	sp, #16
   1d974:	bd80      	pop	{r7, pc}
   1d976:	46c0      	nop			; (mov r8, r8)
   1d978:	200008a8 	.word	0x200008a8
   1d97c:	0001d791 	.word	0x0001d791
   1d980:	0001d7b9 	.word	0x0001d7b9
   1d984:	0001d825 	.word	0x0001d825

0001d988 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1d988:	b580      	push	{r7, lr}
   1d98a:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1d98c:	2000      	movs	r0, #0
   1d98e:	4b02      	ldr	r3, [pc, #8]	; (1d998 <ADC_Handler+0x10>)
   1d990:	4798      	blx	r3
}
   1d992:	46c0      	nop			; (mov r8, r8)
   1d994:	46bd      	mov	sp, r7
   1d996:	bd80      	pop	{r7, pc}
   1d998:	0001d849 	.word	0x0001d849

0001d99c <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1d99c:	b580      	push	{r7, lr}
   1d99e:	b084      	sub	sp, #16
   1d9a0:	af00      	add	r7, sp, #0
   1d9a2:	60f8      	str	r0, [r7, #12]
   1d9a4:	60b9      	str	r1, [r7, #8]
   1d9a6:	1dfb      	adds	r3, r7, #7
   1d9a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1d9aa:	1dfb      	adds	r3, r7, #7
   1d9ac:	781a      	ldrb	r2, [r3, #0]
   1d9ae:	68fb      	ldr	r3, [r7, #12]
   1d9b0:	3202      	adds	r2, #2
   1d9b2:	0092      	lsls	r2, r2, #2
   1d9b4:	68b9      	ldr	r1, [r7, #8]
   1d9b6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1d9b8:	68fb      	ldr	r3, [r7, #12]
   1d9ba:	7e9b      	ldrb	r3, [r3, #26]
   1d9bc:	b25a      	sxtb	r2, r3
   1d9be:	1dfb      	adds	r3, r7, #7
   1d9c0:	781b      	ldrb	r3, [r3, #0]
   1d9c2:	2101      	movs	r1, #1
   1d9c4:	4099      	lsls	r1, r3
   1d9c6:	000b      	movs	r3, r1
   1d9c8:	b25b      	sxtb	r3, r3
   1d9ca:	4313      	orrs	r3, r2
   1d9cc:	b25b      	sxtb	r3, r3
   1d9ce:	b2da      	uxtb	r2, r3
   1d9d0:	68fb      	ldr	r3, [r7, #12]
   1d9d2:	769a      	strb	r2, [r3, #26]
}
   1d9d4:	46c0      	nop			; (mov r8, r8)
   1d9d6:	46bd      	mov	sp, r7
   1d9d8:	b004      	add	sp, #16
   1d9da:	bd80      	pop	{r7, pc}

0001d9dc <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1d9dc:	b580      	push	{r7, lr}
   1d9de:	b084      	sub	sp, #16
   1d9e0:	af00      	add	r7, sp, #0
   1d9e2:	60f8      	str	r0, [r7, #12]
   1d9e4:	60b9      	str	r1, [r7, #8]
   1d9e6:	1dbb      	adds	r3, r7, #6
   1d9e8:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1d9ea:	68fb      	ldr	r3, [r7, #12]
   1d9ec:	8b1b      	ldrh	r3, [r3, #24]
   1d9ee:	b29b      	uxth	r3, r3
   1d9f0:	2b00      	cmp	r3, #0
   1d9f2:	d104      	bne.n	1d9fe <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1d9f4:	68fb      	ldr	r3, [r7, #12]
   1d9f6:	7f1b      	ldrb	r3, [r3, #28]
   1d9f8:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1d9fa:	2b05      	cmp	r3, #5
   1d9fc:	d101      	bne.n	1da02 <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1d9fe:	2305      	movs	r3, #5
   1da00:	e017      	b.n	1da32 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1da02:	68fb      	ldr	r3, [r7, #12]
   1da04:	2205      	movs	r2, #5
   1da06:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1da08:	68fb      	ldr	r3, [r7, #12]
   1da0a:	1dba      	adds	r2, r7, #6
   1da0c:	8812      	ldrh	r2, [r2, #0]
   1da0e:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1da10:	68fb      	ldr	r3, [r7, #12]
   1da12:	68ba      	ldr	r2, [r7, #8]
   1da14:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1da16:	68fb      	ldr	r3, [r7, #12]
   1da18:	2101      	movs	r1, #1
   1da1a:	0018      	movs	r0, r3
   1da1c:	4b07      	ldr	r3, [pc, #28]	; (1da3c <adc_read_buffer_job+0x60>)
   1da1e:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1da20:	68fb      	ldr	r3, [r7, #12]
   1da22:	7f5b      	ldrb	r3, [r3, #29]
   1da24:	2b00      	cmp	r3, #0
   1da26:	d003      	beq.n	1da30 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1da28:	68fb      	ldr	r3, [r7, #12]
   1da2a:	0018      	movs	r0, r3
   1da2c:	4b04      	ldr	r3, [pc, #16]	; (1da40 <adc_read_buffer_job+0x64>)
   1da2e:	4798      	blx	r3
	}

	return STATUS_OK;
   1da30:	2300      	movs	r3, #0
}
   1da32:	0018      	movs	r0, r3
   1da34:	46bd      	mov	sp, r7
   1da36:	b004      	add	sp, #16
   1da38:	bd80      	pop	{r7, pc}
   1da3a:	46c0      	nop			; (mov r8, r8)
   1da3c:	0001d801 	.word	0x0001d801
   1da40:	0001d7b9 	.word	0x0001d7b9

0001da44 <system_interrupt_disable>:
{
   1da44:	b580      	push	{r7, lr}
   1da46:	b082      	sub	sp, #8
   1da48:	af00      	add	r7, sp, #0
   1da4a:	0002      	movs	r2, r0
   1da4c:	1dfb      	adds	r3, r7, #7
   1da4e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1da50:	4a07      	ldr	r2, [pc, #28]	; (1da70 <system_interrupt_disable+0x2c>)
   1da52:	1dfb      	adds	r3, r7, #7
   1da54:	781b      	ldrb	r3, [r3, #0]
   1da56:	0019      	movs	r1, r3
   1da58:	231f      	movs	r3, #31
   1da5a:	400b      	ands	r3, r1
   1da5c:	2101      	movs	r1, #1
   1da5e:	4099      	lsls	r1, r3
   1da60:	000b      	movs	r3, r1
   1da62:	0019      	movs	r1, r3
   1da64:	2380      	movs	r3, #128	; 0x80
   1da66:	50d1      	str	r1, [r2, r3]
}
   1da68:	46c0      	nop			; (mov r8, r8)
   1da6a:	46bd      	mov	sp, r7
   1da6c:	b002      	add	sp, #8
   1da6e:	bd80      	pop	{r7, pc}
   1da70:	e000e100 	.word	0xe000e100

0001da74 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1da74:	b580      	push	{r7, lr}
   1da76:	b084      	sub	sp, #16
   1da78:	af00      	add	r7, sp, #0
   1da7a:	0002      	movs	r2, r0
   1da7c:	1dfb      	adds	r3, r7, #7
   1da7e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1da80:	1dfb      	adds	r3, r7, #7
   1da82:	781a      	ldrb	r2, [r3, #0]
   1da84:	4b37      	ldr	r3, [pc, #220]	; (1db64 <_dac_interrupt_handler+0xf0>)
   1da86:	0092      	lsls	r2, r2, #2
   1da88:	58d3      	ldr	r3, [r2, r3]
   1da8a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1da8c:	68fb      	ldr	r3, [r7, #12]
   1da8e:	681b      	ldr	r3, [r3, #0]
   1da90:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1da92:	68bb      	ldr	r3, [r7, #8]
   1da94:	799b      	ldrb	r3, [r3, #6]
   1da96:	b2db      	uxtb	r3, r3
   1da98:	001a      	movs	r2, r3
   1da9a:	2301      	movs	r3, #1
   1da9c:	4013      	ands	r3, r2
   1da9e:	d00e      	beq.n	1dabe <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1daa0:	68bb      	ldr	r3, [r7, #8]
   1daa2:	2201      	movs	r2, #1
   1daa4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1daa6:	68fb      	ldr	r3, [r7, #12]
   1daa8:	3314      	adds	r3, #20
   1daaa:	2b00      	cmp	r3, #0
   1daac:	d007      	beq.n	1dabe <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1daae:	68fb      	ldr	r3, [r7, #12]
   1dab0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1dab2:	2b00      	cmp	r3, #0
   1dab4:	d003      	beq.n	1dabe <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1dab6:	68fb      	ldr	r3, [r7, #12]
   1dab8:	699b      	ldr	r3, [r3, #24]
   1daba:	2000      	movs	r0, #0
   1dabc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1dabe:	68bb      	ldr	r3, [r7, #8]
   1dac0:	799b      	ldrb	r3, [r3, #6]
   1dac2:	b2db      	uxtb	r3, r3
   1dac4:	001a      	movs	r2, r3
   1dac6:	2302      	movs	r3, #2
   1dac8:	4013      	ands	r3, r2
   1daca:	d047      	beq.n	1db5c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1dacc:	68bb      	ldr	r3, [r7, #8]
   1dace:	2202      	movs	r2, #2
   1dad0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1dad2:	68fb      	ldr	r3, [r7, #12]
   1dad4:	899b      	ldrh	r3, [r3, #12]
   1dad6:	b29b      	uxth	r3, r3
   1dad8:	2b00      	cmp	r3, #0
   1dada:	d033      	beq.n	1db44 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1dadc:	68fb      	ldr	r3, [r7, #12]
   1dade:	689a      	ldr	r2, [r3, #8]
   1dae0:	68fb      	ldr	r3, [r7, #12]
   1dae2:	89db      	ldrh	r3, [r3, #14]
   1dae4:	b29b      	uxth	r3, r3
   1dae6:	1c59      	adds	r1, r3, #1
   1dae8:	b288      	uxth	r0, r1
   1daea:	68f9      	ldr	r1, [r7, #12]
   1daec:	81c8      	strh	r0, [r1, #14]
   1daee:	005b      	lsls	r3, r3, #1
   1daf0:	18d3      	adds	r3, r2, r3
   1daf2:	881b      	ldrh	r3, [r3, #0]
   1daf4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1daf6:	68bb      	ldr	r3, [r7, #8]
   1daf8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1dafa:	68fb      	ldr	r3, [r7, #12]
   1dafc:	899b      	ldrh	r3, [r3, #12]
   1dafe:	b29b      	uxth	r3, r3
   1db00:	3b01      	subs	r3, #1
   1db02:	b29a      	uxth	r2, r3
   1db04:	68fb      	ldr	r3, [r7, #12]
   1db06:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1db08:	68fb      	ldr	r3, [r7, #12]
   1db0a:	899b      	ldrh	r3, [r3, #12]
   1db0c:	b29b      	uxth	r3, r3
   1db0e:	2b00      	cmp	r3, #0
   1db10:	d118      	bne.n	1db44 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1db12:	68fb      	ldr	r3, [r7, #12]
   1db14:	2220      	movs	r2, #32
   1db16:	2100      	movs	r1, #0
   1db18:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1db1a:	68bb      	ldr	r3, [r7, #8]
   1db1c:	2202      	movs	r2, #2
   1db1e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1db20:	68bb      	ldr	r3, [r7, #8]
   1db22:	2202      	movs	r2, #2
   1db24:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1db26:	2019      	movs	r0, #25
   1db28:	4b0f      	ldr	r3, [pc, #60]	; (1db68 <_dac_interrupt_handler+0xf4>)
   1db2a:	4798      	blx	r3

				if ((module->callback) &&
   1db2c:	68fb      	ldr	r3, [r7, #12]
   1db2e:	3314      	adds	r3, #20
   1db30:	2b00      	cmp	r3, #0
   1db32:	d007      	beq.n	1db44 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1db34:	68fb      	ldr	r3, [r7, #12]
   1db36:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1db38:	2b00      	cmp	r3, #0
   1db3a:	d003      	beq.n	1db44 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1db3c:	68fb      	ldr	r3, [r7, #12]
   1db3e:	69db      	ldr	r3, [r3, #28]
   1db40:	2000      	movs	r0, #0
   1db42:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1db44:	68fb      	ldr	r3, [r7, #12]
   1db46:	3314      	adds	r3, #20
   1db48:	2b00      	cmp	r3, #0
   1db4a:	d007      	beq.n	1db5c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1db4c:	68fb      	ldr	r3, [r7, #12]
   1db4e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1db50:	2b00      	cmp	r3, #0
   1db52:	d003      	beq.n	1db5c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1db54:	68fb      	ldr	r3, [r7, #12]
   1db56:	695b      	ldr	r3, [r3, #20]
   1db58:	2000      	movs	r0, #0
   1db5a:	4798      	blx	r3
		}
	}
}
   1db5c:	46c0      	nop			; (mov r8, r8)
   1db5e:	46bd      	mov	sp, r7
   1db60:	b004      	add	sp, #16
   1db62:	bd80      	pop	{r7, pc}
   1db64:	200008ac 	.word	0x200008ac
   1db68:	0001da45 	.word	0x0001da45

0001db6c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1db6c:	b580      	push	{r7, lr}
   1db6e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1db70:	2000      	movs	r0, #0
   1db72:	4b02      	ldr	r3, [pc, #8]	; (1db7c <DAC_Handler+0x10>)
   1db74:	4798      	blx	r3
}
   1db76:	46c0      	nop			; (mov r8, r8)
   1db78:	46bd      	mov	sp, r7
   1db7a:	bd80      	pop	{r7, pc}
   1db7c:	0001da75 	.word	0x0001da75

0001db80 <system_interrupt_enter_critical_section>:
{
   1db80:	b580      	push	{r7, lr}
   1db82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1db84:	4b02      	ldr	r3, [pc, #8]	; (1db90 <system_interrupt_enter_critical_section+0x10>)
   1db86:	4798      	blx	r3
}
   1db88:	46c0      	nop			; (mov r8, r8)
   1db8a:	46bd      	mov	sp, r7
   1db8c:	bd80      	pop	{r7, pc}
   1db8e:	46c0      	nop			; (mov r8, r8)
   1db90:	00023c7d 	.word	0x00023c7d

0001db94 <system_interrupt_leave_critical_section>:
{
   1db94:	b580      	push	{r7, lr}
   1db96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1db98:	4b02      	ldr	r3, [pc, #8]	; (1dba4 <system_interrupt_leave_critical_section+0x10>)
   1db9a:	4798      	blx	r3
}
   1db9c:	46c0      	nop			; (mov r8, r8)
   1db9e:	46bd      	mov	sp, r7
   1dba0:	bd80      	pop	{r7, pc}
   1dba2:	46c0      	nop			; (mov r8, r8)
   1dba4:	00023cd1 	.word	0x00023cd1

0001dba8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1dba8:	b580      	push	{r7, lr}
   1dbaa:	b086      	sub	sp, #24
   1dbac:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1dbae:	4b49      	ldr	r3, [pc, #292]	; (1dcd4 <DMAC_Handler+0x12c>)
   1dbb0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1dbb2:	4b49      	ldr	r3, [pc, #292]	; (1dcd8 <DMAC_Handler+0x130>)
   1dbb4:	8c1b      	ldrh	r3, [r3, #32]
   1dbb6:	b29b      	uxth	r3, r3
   1dbb8:	b2da      	uxtb	r2, r3
   1dbba:	2317      	movs	r3, #23
   1dbbc:	18fb      	adds	r3, r7, r3
   1dbbe:	210f      	movs	r1, #15
   1dbc0:	400a      	ands	r2, r1
   1dbc2:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1dbc4:	2317      	movs	r3, #23
   1dbc6:	18fb      	adds	r3, r7, r3
   1dbc8:	781a      	ldrb	r2, [r3, #0]
   1dbca:	4b44      	ldr	r3, [pc, #272]	; (1dcdc <DMAC_Handler+0x134>)
   1dbcc:	0092      	lsls	r2, r2, #2
   1dbce:	58d3      	ldr	r3, [r2, r3]
   1dbd0:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1dbd2:	4a41      	ldr	r2, [pc, #260]	; (1dcd8 <DMAC_Handler+0x130>)
   1dbd4:	693b      	ldr	r3, [r7, #16]
   1dbd6:	781b      	ldrb	r3, [r3, #0]
   1dbd8:	210f      	movs	r1, #15
   1dbda:	400b      	ands	r3, r1
   1dbdc:	b2d9      	uxtb	r1, r3
   1dbde:	233f      	movs	r3, #63	; 0x3f
   1dbe0:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1dbe2:	493d      	ldr	r1, [pc, #244]	; (1dcd8 <DMAC_Handler+0x130>)
   1dbe4:	230f      	movs	r3, #15
   1dbe6:	18fb      	adds	r3, r7, r3
   1dbe8:	224e      	movs	r2, #78	; 0x4e
   1dbea:	5c8a      	ldrb	r2, [r1, r2]
   1dbec:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1dbee:	693b      	ldr	r3, [r7, #16]
   1dbf0:	781b      	ldrb	r3, [r3, #0]
   1dbf2:	4a3b      	ldr	r2, [pc, #236]	; (1dce0 <DMAC_Handler+0x138>)
   1dbf4:	011b      	lsls	r3, r3, #4
   1dbf6:	18d3      	adds	r3, r2, r3
   1dbf8:	3302      	adds	r3, #2
   1dbfa:	881b      	ldrh	r3, [r3, #0]
   1dbfc:	b29b      	uxth	r3, r3
   1dbfe:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1dc00:	693b      	ldr	r3, [r7, #16]
   1dc02:	781b      	ldrb	r3, [r3, #0]
   1dc04:	4a37      	ldr	r2, [pc, #220]	; (1dce4 <DMAC_Handler+0x13c>)
   1dc06:	011b      	lsls	r3, r3, #4
   1dc08:	18d3      	adds	r3, r2, r3
   1dc0a:	3302      	adds	r3, #2
   1dc0c:	881b      	ldrh	r3, [r3, #0]
   1dc0e:	b29b      	uxth	r3, r3
   1dc10:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1dc12:	68ba      	ldr	r2, [r7, #8]
   1dc14:	687b      	ldr	r3, [r7, #4]
   1dc16:	1ad2      	subs	r2, r2, r3
   1dc18:	693b      	ldr	r3, [r7, #16]
   1dc1a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1dc1c:	230f      	movs	r3, #15
   1dc1e:	18fb      	adds	r3, r7, r3
   1dc20:	781b      	ldrb	r3, [r3, #0]
   1dc22:	2201      	movs	r2, #1
   1dc24:	4013      	ands	r3, r2
   1dc26:	d016      	beq.n	1dc56 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1dc28:	4a2b      	ldr	r2, [pc, #172]	; (1dcd8 <DMAC_Handler+0x130>)
   1dc2a:	234e      	movs	r3, #78	; 0x4e
   1dc2c:	2101      	movs	r1, #1
   1dc2e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1dc30:	693b      	ldr	r3, [r7, #16]
   1dc32:	2210      	movs	r2, #16
   1dc34:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dc36:	693b      	ldr	r3, [r7, #16]
   1dc38:	7c1b      	ldrb	r3, [r3, #16]
   1dc3a:	001a      	movs	r2, r3
   1dc3c:	2301      	movs	r3, #1
   1dc3e:	4013      	ands	r3, r2
   1dc40:	d042      	beq.n	1dcc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1dc42:	693b      	ldr	r3, [r7, #16]
   1dc44:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1dc46:	2b00      	cmp	r3, #0
   1dc48:	d03e      	beq.n	1dcc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1dc4a:	693b      	ldr	r3, [r7, #16]
   1dc4c:	685b      	ldr	r3, [r3, #4]
   1dc4e:	693a      	ldr	r2, [r7, #16]
   1dc50:	0010      	movs	r0, r2
   1dc52:	4798      	blx	r3
   1dc54:	e038      	b.n	1dcc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1dc56:	230f      	movs	r3, #15
   1dc58:	18fb      	adds	r3, r7, r3
   1dc5a:	781b      	ldrb	r3, [r3, #0]
   1dc5c:	2202      	movs	r2, #2
   1dc5e:	4013      	ands	r3, r2
   1dc60:	d016      	beq.n	1dc90 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1dc62:	4a1d      	ldr	r2, [pc, #116]	; (1dcd8 <DMAC_Handler+0x130>)
   1dc64:	234e      	movs	r3, #78	; 0x4e
   1dc66:	2102      	movs	r1, #2
   1dc68:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1dc6a:	693b      	ldr	r3, [r7, #16]
   1dc6c:	2200      	movs	r2, #0
   1dc6e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dc70:	693b      	ldr	r3, [r7, #16]
   1dc72:	7c1b      	ldrb	r3, [r3, #16]
   1dc74:	001a      	movs	r2, r3
   1dc76:	2302      	movs	r3, #2
   1dc78:	4013      	ands	r3, r2
   1dc7a:	d025      	beq.n	1dcc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1dc7c:	693b      	ldr	r3, [r7, #16]
   1dc7e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1dc80:	2b00      	cmp	r3, #0
   1dc82:	d021      	beq.n	1dcc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1dc84:	693b      	ldr	r3, [r7, #16]
   1dc86:	689b      	ldr	r3, [r3, #8]
   1dc88:	693a      	ldr	r2, [r7, #16]
   1dc8a:	0010      	movs	r0, r2
   1dc8c:	4798      	blx	r3
   1dc8e:	e01b      	b.n	1dcc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1dc90:	230f      	movs	r3, #15
   1dc92:	18fb      	adds	r3, r7, r3
   1dc94:	781b      	ldrb	r3, [r3, #0]
   1dc96:	2204      	movs	r2, #4
   1dc98:	4013      	ands	r3, r2
   1dc9a:	d015      	beq.n	1dcc8 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1dc9c:	4a0e      	ldr	r2, [pc, #56]	; (1dcd8 <DMAC_Handler+0x130>)
   1dc9e:	234e      	movs	r3, #78	; 0x4e
   1dca0:	2104      	movs	r1, #4
   1dca2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1dca4:	693b      	ldr	r3, [r7, #16]
   1dca6:	2206      	movs	r2, #6
   1dca8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1dcaa:	693b      	ldr	r3, [r7, #16]
   1dcac:	7c1b      	ldrb	r3, [r3, #16]
   1dcae:	001a      	movs	r2, r3
   1dcb0:	2304      	movs	r3, #4
   1dcb2:	4013      	ands	r3, r2
   1dcb4:	d008      	beq.n	1dcc8 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1dcb6:	693b      	ldr	r3, [r7, #16]
   1dcb8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1dcba:	2b00      	cmp	r3, #0
   1dcbc:	d004      	beq.n	1dcc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1dcbe:	693b      	ldr	r3, [r7, #16]
   1dcc0:	68db      	ldr	r3, [r3, #12]
   1dcc2:	693a      	ldr	r2, [r7, #16]
   1dcc4:	0010      	movs	r0, r2
   1dcc6:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1dcc8:	4b07      	ldr	r3, [pc, #28]	; (1dce8 <DMAC_Handler+0x140>)
   1dcca:	4798      	blx	r3
}
   1dccc:	46c0      	nop			; (mov r8, r8)
   1dcce:	46bd      	mov	sp, r7
   1dcd0:	b006      	add	sp, #24
   1dcd2:	bd80      	pop	{r7, pc}
   1dcd4:	0001db81 	.word	0x0001db81
   1dcd8:	41004800 	.word	0x41004800
   1dcdc:	200002a0 	.word	0x200002a0
   1dce0:	200008b0 	.word	0x200008b0
   1dce4:	20000250 	.word	0x20000250
   1dce8:	0001db95 	.word	0x0001db95

0001dcec <system_gclk_chan_get_config_defaults>:
{
   1dcec:	b580      	push	{r7, lr}
   1dcee:	b082      	sub	sp, #8
   1dcf0:	af00      	add	r7, sp, #0
   1dcf2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1dcf4:	687b      	ldr	r3, [r7, #4]
   1dcf6:	2200      	movs	r2, #0
   1dcf8:	701a      	strb	r2, [r3, #0]
}
   1dcfa:	46c0      	nop			; (mov r8, r8)
   1dcfc:	46bd      	mov	sp, r7
   1dcfe:	b002      	add	sp, #8
   1dd00:	bd80      	pop	{r7, pc}
	...

0001dd04 <system_apb_clock_set_mask>:
{
   1dd04:	b580      	push	{r7, lr}
   1dd06:	b082      	sub	sp, #8
   1dd08:	af00      	add	r7, sp, #0
   1dd0a:	0002      	movs	r2, r0
   1dd0c:	6039      	str	r1, [r7, #0]
   1dd0e:	1dfb      	adds	r3, r7, #7
   1dd10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dd12:	1dfb      	adds	r3, r7, #7
   1dd14:	781b      	ldrb	r3, [r3, #0]
   1dd16:	2b01      	cmp	r3, #1
   1dd18:	d00a      	beq.n	1dd30 <system_apb_clock_set_mask+0x2c>
   1dd1a:	2b02      	cmp	r3, #2
   1dd1c:	d00f      	beq.n	1dd3e <system_apb_clock_set_mask+0x3a>
   1dd1e:	2b00      	cmp	r3, #0
   1dd20:	d114      	bne.n	1dd4c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dd22:	4b0e      	ldr	r3, [pc, #56]	; (1dd5c <system_apb_clock_set_mask+0x58>)
   1dd24:	4a0d      	ldr	r2, [pc, #52]	; (1dd5c <system_apb_clock_set_mask+0x58>)
   1dd26:	6991      	ldr	r1, [r2, #24]
   1dd28:	683a      	ldr	r2, [r7, #0]
   1dd2a:	430a      	orrs	r2, r1
   1dd2c:	619a      	str	r2, [r3, #24]
			break;
   1dd2e:	e00f      	b.n	1dd50 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1dd30:	4b0a      	ldr	r3, [pc, #40]	; (1dd5c <system_apb_clock_set_mask+0x58>)
   1dd32:	4a0a      	ldr	r2, [pc, #40]	; (1dd5c <system_apb_clock_set_mask+0x58>)
   1dd34:	69d1      	ldr	r1, [r2, #28]
   1dd36:	683a      	ldr	r2, [r7, #0]
   1dd38:	430a      	orrs	r2, r1
   1dd3a:	61da      	str	r2, [r3, #28]
			break;
   1dd3c:	e008      	b.n	1dd50 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1dd3e:	4b07      	ldr	r3, [pc, #28]	; (1dd5c <system_apb_clock_set_mask+0x58>)
   1dd40:	4a06      	ldr	r2, [pc, #24]	; (1dd5c <system_apb_clock_set_mask+0x58>)
   1dd42:	6a11      	ldr	r1, [r2, #32]
   1dd44:	683a      	ldr	r2, [r7, #0]
   1dd46:	430a      	orrs	r2, r1
   1dd48:	621a      	str	r2, [r3, #32]
			break;
   1dd4a:	e001      	b.n	1dd50 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1dd4c:	2317      	movs	r3, #23
   1dd4e:	e000      	b.n	1dd52 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1dd50:	2300      	movs	r3, #0
}
   1dd52:	0018      	movs	r0, r3
   1dd54:	46bd      	mov	sp, r7
   1dd56:	b002      	add	sp, #8
   1dd58:	bd80      	pop	{r7, pc}
   1dd5a:	46c0      	nop			; (mov r8, r8)
   1dd5c:	40000400 	.word	0x40000400

0001dd60 <system_pinmux_get_config_defaults>:
{
   1dd60:	b580      	push	{r7, lr}
   1dd62:	b082      	sub	sp, #8
   1dd64:	af00      	add	r7, sp, #0
   1dd66:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1dd68:	687b      	ldr	r3, [r7, #4]
   1dd6a:	2280      	movs	r2, #128	; 0x80
   1dd6c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1dd6e:	687b      	ldr	r3, [r7, #4]
   1dd70:	2200      	movs	r2, #0
   1dd72:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1dd74:	687b      	ldr	r3, [r7, #4]
   1dd76:	2201      	movs	r2, #1
   1dd78:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1dd7a:	687b      	ldr	r3, [r7, #4]
   1dd7c:	2200      	movs	r2, #0
   1dd7e:	70da      	strb	r2, [r3, #3]
}
   1dd80:	46c0      	nop			; (mov r8, r8)
   1dd82:	46bd      	mov	sp, r7
   1dd84:	b002      	add	sp, #8
   1dd86:	bd80      	pop	{r7, pc}

0001dd88 <system_interrupt_enable>:
{
   1dd88:	b580      	push	{r7, lr}
   1dd8a:	b082      	sub	sp, #8
   1dd8c:	af00      	add	r7, sp, #0
   1dd8e:	0002      	movs	r2, r0
   1dd90:	1dfb      	adds	r3, r7, #7
   1dd92:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dd94:	4b06      	ldr	r3, [pc, #24]	; (1ddb0 <system_interrupt_enable+0x28>)
   1dd96:	1dfa      	adds	r2, r7, #7
   1dd98:	7812      	ldrb	r2, [r2, #0]
   1dd9a:	0011      	movs	r1, r2
   1dd9c:	221f      	movs	r2, #31
   1dd9e:	400a      	ands	r2, r1
   1dda0:	2101      	movs	r1, #1
   1dda2:	4091      	lsls	r1, r2
   1dda4:	000a      	movs	r2, r1
   1dda6:	601a      	str	r2, [r3, #0]
}
   1dda8:	46c0      	nop			; (mov r8, r8)
   1ddaa:	46bd      	mov	sp, r7
   1ddac:	b002      	add	sp, #8
   1ddae:	bd80      	pop	{r7, pc}
   1ddb0:	e000e100 	.word	0xe000e100

0001ddb4 <_extint_get_eic_from_channel>:
{
   1ddb4:	b580      	push	{r7, lr}
   1ddb6:	b084      	sub	sp, #16
   1ddb8:	af00      	add	r7, sp, #0
   1ddba:	0002      	movs	r2, r0
   1ddbc:	1dfb      	adds	r3, r7, #7
   1ddbe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1ddc0:	230f      	movs	r3, #15
   1ddc2:	18fb      	adds	r3, r7, r3
   1ddc4:	1dfa      	adds	r2, r7, #7
   1ddc6:	7812      	ldrb	r2, [r2, #0]
   1ddc8:	0952      	lsrs	r2, r2, #5
   1ddca:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1ddcc:	230f      	movs	r3, #15
   1ddce:	18fb      	adds	r3, r7, r3
   1ddd0:	781b      	ldrb	r3, [r3, #0]
   1ddd2:	2b00      	cmp	r3, #0
   1ddd4:	d10c      	bne.n	1ddf0 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ddd6:	4b09      	ldr	r3, [pc, #36]	; (1ddfc <_extint_get_eic_from_channel+0x48>)
   1ddd8:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1ddda:	230f      	movs	r3, #15
   1dddc:	18fb      	adds	r3, r7, r3
   1ddde:	781b      	ldrb	r3, [r3, #0]
   1dde0:	009b      	lsls	r3, r3, #2
   1dde2:	2210      	movs	r2, #16
   1dde4:	4694      	mov	ip, r2
   1dde6:	44bc      	add	ip, r7
   1dde8:	4463      	add	r3, ip
   1ddea:	3b08      	subs	r3, #8
   1ddec:	681b      	ldr	r3, [r3, #0]
   1ddee:	e000      	b.n	1ddf2 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1ddf0:	2300      	movs	r3, #0
}
   1ddf2:	0018      	movs	r0, r3
   1ddf4:	46bd      	mov	sp, r7
   1ddf6:	b004      	add	sp, #16
   1ddf8:	bd80      	pop	{r7, pc}
   1ddfa:	46c0      	nop			; (mov r8, r8)
   1ddfc:	40001800 	.word	0x40001800

0001de00 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1de00:	b580      	push	{r7, lr}
   1de02:	b082      	sub	sp, #8
   1de04:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1de06:	4b0f      	ldr	r3, [pc, #60]	; (1de44 <extint_is_syncing+0x44>)
   1de08:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1de0a:	2300      	movs	r3, #0
   1de0c:	607b      	str	r3, [r7, #4]
   1de0e:	e011      	b.n	1de34 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1de10:	687b      	ldr	r3, [r7, #4]
   1de12:	009b      	lsls	r3, r3, #2
   1de14:	2208      	movs	r2, #8
   1de16:	4694      	mov	ip, r2
   1de18:	44bc      	add	ip, r7
   1de1a:	4463      	add	r3, ip
   1de1c:	3b08      	subs	r3, #8
   1de1e:	681b      	ldr	r3, [r3, #0]
   1de20:	785b      	ldrb	r3, [r3, #1]
   1de22:	b2db      	uxtb	r3, r3
   1de24:	b25b      	sxtb	r3, r3
   1de26:	2b00      	cmp	r3, #0
   1de28:	da01      	bge.n	1de2e <extint_is_syncing+0x2e>
			return true;
   1de2a:	2301      	movs	r3, #1
   1de2c:	e006      	b.n	1de3c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1de2e:	687b      	ldr	r3, [r7, #4]
   1de30:	3301      	adds	r3, #1
   1de32:	607b      	str	r3, [r7, #4]
   1de34:	687b      	ldr	r3, [r7, #4]
   1de36:	2b00      	cmp	r3, #0
   1de38:	d0ea      	beq.n	1de10 <extint_is_syncing+0x10>
		}
	}
	return false;
   1de3a:	2300      	movs	r3, #0
}
   1de3c:	0018      	movs	r0, r3
   1de3e:	46bd      	mov	sp, r7
   1de40:	b002      	add	sp, #8
   1de42:	bd80      	pop	{r7, pc}
   1de44:	40001800 	.word	0x40001800

0001de48 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1de48:	b580      	push	{r7, lr}
   1de4a:	b084      	sub	sp, #16
   1de4c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1de4e:	4b2d      	ldr	r3, [pc, #180]	; (1df04 <_system_extint_init+0xbc>)
   1de50:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1de52:	2140      	movs	r1, #64	; 0x40
   1de54:	2000      	movs	r0, #0
   1de56:	4b2c      	ldr	r3, [pc, #176]	; (1df08 <_system_extint_init+0xc0>)
   1de58:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1de5a:	003b      	movs	r3, r7
   1de5c:	0018      	movs	r0, r3
   1de5e:	4b2b      	ldr	r3, [pc, #172]	; (1df0c <_system_extint_init+0xc4>)
   1de60:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1de62:	003b      	movs	r3, r7
   1de64:	2206      	movs	r2, #6
   1de66:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1de68:	003b      	movs	r3, r7
   1de6a:	0019      	movs	r1, r3
   1de6c:	2005      	movs	r0, #5
   1de6e:	4b28      	ldr	r3, [pc, #160]	; (1df10 <_system_extint_init+0xc8>)
   1de70:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1de72:	2005      	movs	r0, #5
   1de74:	4b27      	ldr	r3, [pc, #156]	; (1df14 <_system_extint_init+0xcc>)
   1de76:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1de78:	2300      	movs	r3, #0
   1de7a:	60fb      	str	r3, [r7, #12]
   1de7c:	e018      	b.n	1deb0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1de7e:	68fb      	ldr	r3, [r7, #12]
   1de80:	009b      	lsls	r3, r3, #2
   1de82:	2210      	movs	r2, #16
   1de84:	4694      	mov	ip, r2
   1de86:	44bc      	add	ip, r7
   1de88:	4463      	add	r3, ip
   1de8a:	3b0c      	subs	r3, #12
   1de8c:	681a      	ldr	r2, [r3, #0]
   1de8e:	68fb      	ldr	r3, [r7, #12]
   1de90:	009b      	lsls	r3, r3, #2
   1de92:	2110      	movs	r1, #16
   1de94:	468c      	mov	ip, r1
   1de96:	44bc      	add	ip, r7
   1de98:	4463      	add	r3, ip
   1de9a:	3b0c      	subs	r3, #12
   1de9c:	681b      	ldr	r3, [r3, #0]
   1de9e:	781b      	ldrb	r3, [r3, #0]
   1dea0:	b2db      	uxtb	r3, r3
   1dea2:	2101      	movs	r1, #1
   1dea4:	430b      	orrs	r3, r1
   1dea6:	b2db      	uxtb	r3, r3
   1dea8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1deaa:	68fb      	ldr	r3, [r7, #12]
   1deac:	3301      	adds	r3, #1
   1deae:	60fb      	str	r3, [r7, #12]
   1deb0:	68fb      	ldr	r3, [r7, #12]
   1deb2:	2b00      	cmp	r3, #0
   1deb4:	d0e3      	beq.n	1de7e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1deb6:	46c0      	nop			; (mov r8, r8)
   1deb8:	4b17      	ldr	r3, [pc, #92]	; (1df18 <_system_extint_init+0xd0>)
   1deba:	4798      	blx	r3
   1debc:	1e03      	subs	r3, r0, #0
   1debe:	d1fb      	bne.n	1deb8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1dec0:	230b      	movs	r3, #11
   1dec2:	18fb      	adds	r3, r7, r3
   1dec4:	2200      	movs	r2, #0
   1dec6:	701a      	strb	r2, [r3, #0]
   1dec8:	e00d      	b.n	1dee6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1deca:	230b      	movs	r3, #11
   1decc:	18fb      	adds	r3, r7, r3
   1dece:	781a      	ldrb	r2, [r3, #0]
   1ded0:	4b12      	ldr	r3, [pc, #72]	; (1df1c <_system_extint_init+0xd4>)
   1ded2:	0092      	lsls	r2, r2, #2
   1ded4:	2100      	movs	r1, #0
   1ded6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1ded8:	230b      	movs	r3, #11
   1deda:	18fb      	adds	r3, r7, r3
   1dedc:	781a      	ldrb	r2, [r3, #0]
   1dede:	230b      	movs	r3, #11
   1dee0:	18fb      	adds	r3, r7, r3
   1dee2:	3201      	adds	r2, #1
   1dee4:	701a      	strb	r2, [r3, #0]
   1dee6:	230b      	movs	r3, #11
   1dee8:	18fb      	adds	r3, r7, r3
   1deea:	781b      	ldrb	r3, [r3, #0]
   1deec:	2b0f      	cmp	r3, #15
   1deee:	d9ec      	bls.n	1deca <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1def0:	2004      	movs	r0, #4
   1def2:	4b0b      	ldr	r3, [pc, #44]	; (1df20 <_system_extint_init+0xd8>)
   1def4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1def6:	4b0b      	ldr	r3, [pc, #44]	; (1df24 <_system_extint_init+0xdc>)
   1def8:	4798      	blx	r3
}
   1defa:	46c0      	nop			; (mov r8, r8)
   1defc:	46bd      	mov	sp, r7
   1defe:	b004      	add	sp, #16
   1df00:	bd80      	pop	{r7, pc}
   1df02:	46c0      	nop			; (mov r8, r8)
   1df04:	40001800 	.word	0x40001800
   1df08:	0001dd05 	.word	0x0001dd05
   1df0c:	0001dced 	.word	0x0001dced
   1df10:	00024a35 	.word	0x00024a35
   1df14:	00024a79 	.word	0x00024a79
   1df18:	0001de01 	.word	0x0001de01
   1df1c:	20000900 	.word	0x20000900
   1df20:	0001dd89 	.word	0x0001dd89
   1df24:	0001df29 	.word	0x0001df29

0001df28 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1df28:	b580      	push	{r7, lr}
   1df2a:	b082      	sub	sp, #8
   1df2c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1df2e:	4b15      	ldr	r3, [pc, #84]	; (1df84 <_extint_enable+0x5c>)
   1df30:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1df32:	2300      	movs	r3, #0
   1df34:	607b      	str	r3, [r7, #4]
   1df36:	e018      	b.n	1df6a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1df38:	687b      	ldr	r3, [r7, #4]
   1df3a:	009b      	lsls	r3, r3, #2
   1df3c:	2208      	movs	r2, #8
   1df3e:	4694      	mov	ip, r2
   1df40:	44bc      	add	ip, r7
   1df42:	4463      	add	r3, ip
   1df44:	3b08      	subs	r3, #8
   1df46:	681a      	ldr	r2, [r3, #0]
   1df48:	687b      	ldr	r3, [r7, #4]
   1df4a:	009b      	lsls	r3, r3, #2
   1df4c:	2108      	movs	r1, #8
   1df4e:	468c      	mov	ip, r1
   1df50:	44bc      	add	ip, r7
   1df52:	4463      	add	r3, ip
   1df54:	3b08      	subs	r3, #8
   1df56:	681b      	ldr	r3, [r3, #0]
   1df58:	781b      	ldrb	r3, [r3, #0]
   1df5a:	b2db      	uxtb	r3, r3
   1df5c:	2102      	movs	r1, #2
   1df5e:	430b      	orrs	r3, r1
   1df60:	b2db      	uxtb	r3, r3
   1df62:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1df64:	687b      	ldr	r3, [r7, #4]
   1df66:	3301      	adds	r3, #1
   1df68:	607b      	str	r3, [r7, #4]
   1df6a:	687b      	ldr	r3, [r7, #4]
   1df6c:	2b00      	cmp	r3, #0
   1df6e:	d0e3      	beq.n	1df38 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1df70:	46c0      	nop			; (mov r8, r8)
   1df72:	4b05      	ldr	r3, [pc, #20]	; (1df88 <_extint_enable+0x60>)
   1df74:	4798      	blx	r3
   1df76:	1e03      	subs	r3, r0, #0
   1df78:	d1fb      	bne.n	1df72 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1df7a:	46c0      	nop			; (mov r8, r8)
   1df7c:	46bd      	mov	sp, r7
   1df7e:	b002      	add	sp, #8
   1df80:	bd80      	pop	{r7, pc}
   1df82:	46c0      	nop			; (mov r8, r8)
   1df84:	40001800 	.word	0x40001800
   1df88:	0001de01 	.word	0x0001de01

0001df8c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1df8c:	b580      	push	{r7, lr}
   1df8e:	b082      	sub	sp, #8
   1df90:	af00      	add	r7, sp, #0
   1df92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1df94:	687b      	ldr	r3, [r7, #4]
   1df96:	2200      	movs	r2, #0
   1df98:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1df9a:	687b      	ldr	r3, [r7, #4]
   1df9c:	2200      	movs	r2, #0
   1df9e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1dfa0:	687b      	ldr	r3, [r7, #4]
   1dfa2:	2201      	movs	r2, #1
   1dfa4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1dfa6:	687b      	ldr	r3, [r7, #4]
   1dfa8:	2201      	movs	r2, #1
   1dfaa:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1dfac:	687b      	ldr	r3, [r7, #4]
   1dfae:	2200      	movs	r2, #0
   1dfb0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1dfb2:	687b      	ldr	r3, [r7, #4]
   1dfb4:	2202      	movs	r2, #2
   1dfb6:	72da      	strb	r2, [r3, #11]
}
   1dfb8:	46c0      	nop			; (mov r8, r8)
   1dfba:	46bd      	mov	sp, r7
   1dfbc:	b002      	add	sp, #8
   1dfbe:	bd80      	pop	{r7, pc}

0001dfc0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1dfc0:	b580      	push	{r7, lr}
   1dfc2:	b086      	sub	sp, #24
   1dfc4:	af00      	add	r7, sp, #0
   1dfc6:	0002      	movs	r2, r0
   1dfc8:	6039      	str	r1, [r7, #0]
   1dfca:	1dfb      	adds	r3, r7, #7
   1dfcc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1dfce:	2308      	movs	r3, #8
   1dfd0:	18fb      	adds	r3, r7, r3
   1dfd2:	0018      	movs	r0, r3
   1dfd4:	4b36      	ldr	r3, [pc, #216]	; (1e0b0 <extint_chan_set_config+0xf0>)
   1dfd6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1dfd8:	683b      	ldr	r3, [r7, #0]
   1dfda:	685b      	ldr	r3, [r3, #4]
   1dfdc:	b2da      	uxtb	r2, r3
   1dfde:	2308      	movs	r3, #8
   1dfe0:	18fb      	adds	r3, r7, r3
   1dfe2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1dfe4:	2308      	movs	r3, #8
   1dfe6:	18fb      	adds	r3, r7, r3
   1dfe8:	2200      	movs	r2, #0
   1dfea:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1dfec:	683b      	ldr	r3, [r7, #0]
   1dfee:	7a1a      	ldrb	r2, [r3, #8]
   1dff0:	2308      	movs	r3, #8
   1dff2:	18fb      	adds	r3, r7, r3
   1dff4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1dff6:	683b      	ldr	r3, [r7, #0]
   1dff8:	681b      	ldr	r3, [r3, #0]
   1dffa:	b2db      	uxtb	r3, r3
   1dffc:	2208      	movs	r2, #8
   1dffe:	18ba      	adds	r2, r7, r2
   1e000:	0011      	movs	r1, r2
   1e002:	0018      	movs	r0, r3
   1e004:	4b2b      	ldr	r3, [pc, #172]	; (1e0b4 <extint_chan_set_config+0xf4>)
   1e006:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1e008:	1dfb      	adds	r3, r7, #7
   1e00a:	781b      	ldrb	r3, [r3, #0]
   1e00c:	0018      	movs	r0, r3
   1e00e:	4b2a      	ldr	r3, [pc, #168]	; (1e0b8 <extint_chan_set_config+0xf8>)
   1e010:	4798      	blx	r3
   1e012:	0003      	movs	r3, r0
   1e014:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1e016:	1dfb      	adds	r3, r7, #7
   1e018:	781b      	ldrb	r3, [r3, #0]
   1e01a:	2207      	movs	r2, #7
   1e01c:	4013      	ands	r3, r2
   1e01e:	009b      	lsls	r3, r3, #2
   1e020:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1e022:	683b      	ldr	r3, [r7, #0]
   1e024:	7adb      	ldrb	r3, [r3, #11]
   1e026:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1e028:	683b      	ldr	r3, [r7, #0]
   1e02a:	7a9b      	ldrb	r3, [r3, #10]
   1e02c:	2b00      	cmp	r3, #0
   1e02e:	d003      	beq.n	1e038 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1e030:	697b      	ldr	r3, [r7, #20]
   1e032:	2208      	movs	r2, #8
   1e034:	4313      	orrs	r3, r2
   1e036:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1e038:	1dfb      	adds	r3, r7, #7
   1e03a:	781b      	ldrb	r3, [r3, #0]
   1e03c:	08db      	lsrs	r3, r3, #3
   1e03e:	b2db      	uxtb	r3, r3
   1e040:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1e042:	1dfb      	adds	r3, r7, #7
   1e044:	781b      	ldrb	r3, [r3, #0]
   1e046:	08db      	lsrs	r3, r3, #3
   1e048:	b2db      	uxtb	r3, r3
   1e04a:	001a      	movs	r2, r3
   1e04c:	693b      	ldr	r3, [r7, #16]
   1e04e:	3206      	adds	r2, #6
   1e050:	0092      	lsls	r2, r2, #2
   1e052:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e054:	210f      	movs	r1, #15
   1e056:	68fa      	ldr	r2, [r7, #12]
   1e058:	4091      	lsls	r1, r2
   1e05a:	000a      	movs	r2, r1
   1e05c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e05e:	401a      	ands	r2, r3
			(new_config << config_pos);
   1e060:	6979      	ldr	r1, [r7, #20]
   1e062:	68fb      	ldr	r3, [r7, #12]
   1e064:	4099      	lsls	r1, r3
   1e066:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1e068:	431a      	orrs	r2, r3
   1e06a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1e06c:	693b      	ldr	r3, [r7, #16]
   1e06e:	1d82      	adds	r2, r0, #6
   1e070:	0092      	lsls	r2, r2, #2
   1e072:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1e074:	683b      	ldr	r3, [r7, #0]
   1e076:	7a5b      	ldrb	r3, [r3, #9]
   1e078:	2b00      	cmp	r3, #0
   1e07a:	d00a      	beq.n	1e092 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1e07c:	693b      	ldr	r3, [r7, #16]
   1e07e:	695a      	ldr	r2, [r3, #20]
   1e080:	1dfb      	adds	r3, r7, #7
   1e082:	781b      	ldrb	r3, [r3, #0]
   1e084:	2101      	movs	r1, #1
   1e086:	4099      	lsls	r1, r3
   1e088:	000b      	movs	r3, r1
   1e08a:	431a      	orrs	r2, r3
   1e08c:	693b      	ldr	r3, [r7, #16]
   1e08e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1e090:	e00a      	b.n	1e0a8 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1e092:	693b      	ldr	r3, [r7, #16]
   1e094:	695b      	ldr	r3, [r3, #20]
   1e096:	1dfa      	adds	r2, r7, #7
   1e098:	7812      	ldrb	r2, [r2, #0]
   1e09a:	2101      	movs	r1, #1
   1e09c:	4091      	lsls	r1, r2
   1e09e:	000a      	movs	r2, r1
   1e0a0:	43d2      	mvns	r2, r2
   1e0a2:	401a      	ands	r2, r3
   1e0a4:	693b      	ldr	r3, [r7, #16]
   1e0a6:	615a      	str	r2, [r3, #20]
}
   1e0a8:	46c0      	nop			; (mov r8, r8)
   1e0aa:	46bd      	mov	sp, r7
   1e0ac:	b006      	add	sp, #24
   1e0ae:	bd80      	pop	{r7, pc}
   1e0b0:	0001dd61 	.word	0x0001dd61
   1e0b4:	00024d21 	.word	0x00024d21
   1e0b8:	0001ddb5 	.word	0x0001ddb5

0001e0bc <system_gclk_chan_get_config_defaults>:
{
   1e0bc:	b580      	push	{r7, lr}
   1e0be:	b082      	sub	sp, #8
   1e0c0:	af00      	add	r7, sp, #0
   1e0c2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e0c4:	687b      	ldr	r3, [r7, #4]
   1e0c6:	2200      	movs	r2, #0
   1e0c8:	701a      	strb	r2, [r3, #0]
}
   1e0ca:	46c0      	nop			; (mov r8, r8)
   1e0cc:	46bd      	mov	sp, r7
   1e0ce:	b002      	add	sp, #8
   1e0d0:	bd80      	pop	{r7, pc}
	...

0001e0d4 <system_apb_clock_set_mask>:
{
   1e0d4:	b580      	push	{r7, lr}
   1e0d6:	b082      	sub	sp, #8
   1e0d8:	af00      	add	r7, sp, #0
   1e0da:	0002      	movs	r2, r0
   1e0dc:	6039      	str	r1, [r7, #0]
   1e0de:	1dfb      	adds	r3, r7, #7
   1e0e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e0e2:	1dfb      	adds	r3, r7, #7
   1e0e4:	781b      	ldrb	r3, [r3, #0]
   1e0e6:	2b01      	cmp	r3, #1
   1e0e8:	d00a      	beq.n	1e100 <system_apb_clock_set_mask+0x2c>
   1e0ea:	2b02      	cmp	r3, #2
   1e0ec:	d00f      	beq.n	1e10e <system_apb_clock_set_mask+0x3a>
   1e0ee:	2b00      	cmp	r3, #0
   1e0f0:	d114      	bne.n	1e11c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e0f2:	4b0e      	ldr	r3, [pc, #56]	; (1e12c <system_apb_clock_set_mask+0x58>)
   1e0f4:	4a0d      	ldr	r2, [pc, #52]	; (1e12c <system_apb_clock_set_mask+0x58>)
   1e0f6:	6991      	ldr	r1, [r2, #24]
   1e0f8:	683a      	ldr	r2, [r7, #0]
   1e0fa:	430a      	orrs	r2, r1
   1e0fc:	619a      	str	r2, [r3, #24]
			break;
   1e0fe:	e00f      	b.n	1e120 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e100:	4b0a      	ldr	r3, [pc, #40]	; (1e12c <system_apb_clock_set_mask+0x58>)
   1e102:	4a0a      	ldr	r2, [pc, #40]	; (1e12c <system_apb_clock_set_mask+0x58>)
   1e104:	69d1      	ldr	r1, [r2, #28]
   1e106:	683a      	ldr	r2, [r7, #0]
   1e108:	430a      	orrs	r2, r1
   1e10a:	61da      	str	r2, [r3, #28]
			break;
   1e10c:	e008      	b.n	1e120 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e10e:	4b07      	ldr	r3, [pc, #28]	; (1e12c <system_apb_clock_set_mask+0x58>)
   1e110:	4a06      	ldr	r2, [pc, #24]	; (1e12c <system_apb_clock_set_mask+0x58>)
   1e112:	6a11      	ldr	r1, [r2, #32]
   1e114:	683a      	ldr	r2, [r7, #0]
   1e116:	430a      	orrs	r2, r1
   1e118:	621a      	str	r2, [r3, #32]
			break;
   1e11a:	e001      	b.n	1e120 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e11c:	2317      	movs	r3, #23
   1e11e:	e000      	b.n	1e122 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e120:	2300      	movs	r3, #0
}
   1e122:	0018      	movs	r0, r3
   1e124:	46bd      	mov	sp, r7
   1e126:	b002      	add	sp, #8
   1e128:	bd80      	pop	{r7, pc}
   1e12a:	46c0      	nop			; (mov r8, r8)
   1e12c:	40000400 	.word	0x40000400

0001e130 <system_interrupt_enable>:
{
   1e130:	b580      	push	{r7, lr}
   1e132:	b082      	sub	sp, #8
   1e134:	af00      	add	r7, sp, #0
   1e136:	0002      	movs	r2, r0
   1e138:	1dfb      	adds	r3, r7, #7
   1e13a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e13c:	4b06      	ldr	r3, [pc, #24]	; (1e158 <system_interrupt_enable+0x28>)
   1e13e:	1dfa      	adds	r2, r7, #7
   1e140:	7812      	ldrb	r2, [r2, #0]
   1e142:	0011      	movs	r1, r2
   1e144:	221f      	movs	r2, #31
   1e146:	400a      	ands	r2, r1
   1e148:	2101      	movs	r1, #1
   1e14a:	4091      	lsls	r1, r2
   1e14c:	000a      	movs	r2, r1
   1e14e:	601a      	str	r2, [r3, #0]
}
   1e150:	46c0      	nop			; (mov r8, r8)
   1e152:	46bd      	mov	sp, r7
   1e154:	b002      	add	sp, #8
   1e156:	bd80      	pop	{r7, pc}
   1e158:	e000e100 	.word	0xe000e100

0001e15c <system_interrupt_disable>:
{
   1e15c:	b580      	push	{r7, lr}
   1e15e:	b082      	sub	sp, #8
   1e160:	af00      	add	r7, sp, #0
   1e162:	0002      	movs	r2, r0
   1e164:	1dfb      	adds	r3, r7, #7
   1e166:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e168:	4a07      	ldr	r2, [pc, #28]	; (1e188 <system_interrupt_disable+0x2c>)
   1e16a:	1dfb      	adds	r3, r7, #7
   1e16c:	781b      	ldrb	r3, [r3, #0]
   1e16e:	0019      	movs	r1, r3
   1e170:	231f      	movs	r3, #31
   1e172:	400b      	ands	r3, r1
   1e174:	2101      	movs	r1, #1
   1e176:	4099      	lsls	r1, r3
   1e178:	000b      	movs	r3, r1
   1e17a:	0019      	movs	r1, r3
   1e17c:	2380      	movs	r3, #128	; 0x80
   1e17e:	50d1      	str	r1, [r2, r3]
}
   1e180:	46c0      	nop			; (mov r8, r8)
   1e182:	46bd      	mov	sp, r7
   1e184:	b002      	add	sp, #8
   1e186:	bd80      	pop	{r7, pc}
   1e188:	e000e100 	.word	0xe000e100

0001e18c <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
   1e18c:	b580      	push	{r7, lr}
   1e18e:	b084      	sub	sp, #16
   1e190:	af00      	add	r7, sp, #0
   1e192:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e194:	687b      	ldr	r3, [r7, #4]
   1e196:	681b      	ldr	r3, [r3, #0]
   1e198:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1e19a:	68fb      	ldr	r3, [r7, #12]
   1e19c:	7a9b      	ldrb	r3, [r3, #10]
   1e19e:	b2db      	uxtb	r3, r3
   1e1a0:	b25b      	sxtb	r3, r3
   1e1a2:	2b00      	cmp	r3, #0
   1e1a4:	da01      	bge.n	1e1aa <rtc_count_is_syncing+0x1e>
                return true;
   1e1a6:	2301      	movs	r3, #1
   1e1a8:	e000      	b.n	1e1ac <rtc_count_is_syncing+0x20>
        }

        return false;
   1e1aa:	2300      	movs	r3, #0
}
   1e1ac:	0018      	movs	r0, r3
   1e1ae:	46bd      	mov	sp, r7
   1e1b0:	b004      	add	sp, #16
   1e1b2:	bd80      	pop	{r7, pc}

0001e1b4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
   1e1b4:	b580      	push	{r7, lr}
   1e1b6:	b084      	sub	sp, #16
   1e1b8:	af00      	add	r7, sp, #0
   1e1ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e1bc:	687b      	ldr	r3, [r7, #4]
   1e1be:	681b      	ldr	r3, [r3, #0]
   1e1c0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e1c2:	2003      	movs	r0, #3
   1e1c4:	4b0a      	ldr	r3, [pc, #40]	; (1e1f0 <rtc_count_enable+0x3c>)
   1e1c6:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e1c8:	46c0      	nop			; (mov r8, r8)
   1e1ca:	687b      	ldr	r3, [r7, #4]
   1e1cc:	0018      	movs	r0, r3
   1e1ce:	4b09      	ldr	r3, [pc, #36]	; (1e1f4 <rtc_count_enable+0x40>)
   1e1d0:	4798      	blx	r3
   1e1d2:	1e03      	subs	r3, r0, #0
   1e1d4:	d1f9      	bne.n	1e1ca <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
   1e1d6:	68fb      	ldr	r3, [r7, #12]
   1e1d8:	881b      	ldrh	r3, [r3, #0]
   1e1da:	b29b      	uxth	r3, r3
   1e1dc:	2202      	movs	r2, #2
   1e1de:	4313      	orrs	r3, r2
   1e1e0:	b29a      	uxth	r2, r3
   1e1e2:	68fb      	ldr	r3, [r7, #12]
   1e1e4:	801a      	strh	r2, [r3, #0]
}
   1e1e6:	46c0      	nop			; (mov r8, r8)
   1e1e8:	46bd      	mov	sp, r7
   1e1ea:	b004      	add	sp, #16
   1e1ec:	bd80      	pop	{r7, pc}
   1e1ee:	46c0      	nop			; (mov r8, r8)
   1e1f0:	0001e131 	.word	0x0001e131
   1e1f4:	0001e18d 	.word	0x0001e18d

0001e1f8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
   1e1f8:	b580      	push	{r7, lr}
   1e1fa:	b084      	sub	sp, #16
   1e1fc:	af00      	add	r7, sp, #0
   1e1fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e200:	687b      	ldr	r3, [r7, #4]
   1e202:	681b      	ldr	r3, [r3, #0]
   1e204:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   1e206:	2003      	movs	r0, #3
   1e208:	4b0d      	ldr	r3, [pc, #52]	; (1e240 <rtc_count_disable+0x48>)
   1e20a:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
   1e20c:	46c0      	nop			; (mov r8, r8)
   1e20e:	687b      	ldr	r3, [r7, #4]
   1e210:	0018      	movs	r0, r3
   1e212:	4b0c      	ldr	r3, [pc, #48]	; (1e244 <rtc_count_disable+0x4c>)
   1e214:	4798      	blx	r3
   1e216:	1e03      	subs	r3, r0, #0
   1e218:	d1f9      	bne.n	1e20e <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
   1e21a:	68fb      	ldr	r3, [r7, #12]
   1e21c:	22c1      	movs	r2, #193	; 0xc1
   1e21e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
   1e220:	68fb      	ldr	r3, [r7, #12]
   1e222:	22c1      	movs	r2, #193	; 0xc1
   1e224:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
   1e226:	68fb      	ldr	r3, [r7, #12]
   1e228:	881b      	ldrh	r3, [r3, #0]
   1e22a:	b29b      	uxth	r3, r3
   1e22c:	2202      	movs	r2, #2
   1e22e:	4393      	bics	r3, r2
   1e230:	b29a      	uxth	r2, r3
   1e232:	68fb      	ldr	r3, [r7, #12]
   1e234:	801a      	strh	r2, [r3, #0]
}
   1e236:	46c0      	nop			; (mov r8, r8)
   1e238:	46bd      	mov	sp, r7
   1e23a:	b004      	add	sp, #16
   1e23c:	bd80      	pop	{r7, pc}
   1e23e:	46c0      	nop			; (mov r8, r8)
   1e240:	0001e15d 	.word	0x0001e15d
   1e244:	0001e18d 	.word	0x0001e18d

0001e248 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
   1e248:	b580      	push	{r7, lr}
   1e24a:	b084      	sub	sp, #16
   1e24c:	af00      	add	r7, sp, #0
   1e24e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e250:	687b      	ldr	r3, [r7, #4]
   1e252:	681b      	ldr	r3, [r3, #0]
   1e254:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
   1e256:	687b      	ldr	r3, [r7, #4]
   1e258:	0018      	movs	r0, r3
   1e25a:	4b0d      	ldr	r3, [pc, #52]	; (1e290 <rtc_count_reset+0x48>)
   1e25c:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
   1e25e:	687b      	ldr	r3, [r7, #4]
   1e260:	2200      	movs	r2, #0
   1e262:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
   1e264:	687b      	ldr	r3, [r7, #4]
   1e266:	2200      	movs	r2, #0
   1e268:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
   1e26a:	46c0      	nop			; (mov r8, r8)
   1e26c:	687b      	ldr	r3, [r7, #4]
   1e26e:	0018      	movs	r0, r3
   1e270:	4b08      	ldr	r3, [pc, #32]	; (1e294 <rtc_count_reset+0x4c>)
   1e272:	4798      	blx	r3
   1e274:	1e03      	subs	r3, r0, #0
   1e276:	d1f9      	bne.n	1e26c <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
   1e278:	68fb      	ldr	r3, [r7, #12]
   1e27a:	881b      	ldrh	r3, [r3, #0]
   1e27c:	b29b      	uxth	r3, r3
   1e27e:	2201      	movs	r2, #1
   1e280:	4313      	orrs	r3, r2
   1e282:	b29a      	uxth	r2, r3
   1e284:	68fb      	ldr	r3, [r7, #12]
   1e286:	801a      	strh	r2, [r3, #0]
}
   1e288:	46c0      	nop			; (mov r8, r8)
   1e28a:	46bd      	mov	sp, r7
   1e28c:	b004      	add	sp, #16
   1e28e:	bd80      	pop	{r7, pc}
   1e290:	0001e1f9 	.word	0x0001e1f9
   1e294:	0001e18d 	.word	0x0001e18d

0001e298 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
   1e298:	b580      	push	{r7, lr}
   1e29a:	b084      	sub	sp, #16
   1e29c:	af00      	add	r7, sp, #0
   1e29e:	6078      	str	r0, [r7, #4]
   1e2a0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e2a2:	687b      	ldr	r3, [r7, #4]
   1e2a4:	681b      	ldr	r3, [r3, #0]
   1e2a6:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
   1e2a8:	683b      	ldr	r3, [r7, #0]
   1e2aa:	881a      	ldrh	r2, [r3, #0]
   1e2ac:	68bb      	ldr	r3, [r7, #8]
   1e2ae:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
   1e2b0:	683b      	ldr	r3, [r7, #0]
   1e2b2:	789b      	ldrb	r3, [r3, #2]
   1e2b4:	2b00      	cmp	r3, #0
   1e2b6:	d03a      	beq.n	1e32e <_rtc_count_set_config+0x96>
   1e2b8:	2b01      	cmp	r3, #1
   1e2ba:	d000      	beq.n	1e2be <_rtc_count_set_config+0x26>
   1e2bc:	e06c      	b.n	1e398 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
   1e2be:	68bb      	ldr	r3, [r7, #8]
   1e2c0:	881b      	ldrh	r3, [r3, #0]
   1e2c2:	b29a      	uxth	r2, r3
   1e2c4:	68bb      	ldr	r3, [r7, #8]
   1e2c6:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
   1e2c8:	683b      	ldr	r3, [r7, #0]
   1e2ca:	78db      	ldrb	r3, [r3, #3]
   1e2cc:	2b00      	cmp	r3, #0
   1e2ce:	d007      	beq.n	1e2e0 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
   1e2d0:	68bb      	ldr	r3, [r7, #8]
   1e2d2:	881b      	ldrh	r3, [r3, #0]
   1e2d4:	b29b      	uxth	r3, r3
   1e2d6:	2280      	movs	r2, #128	; 0x80
   1e2d8:	4313      	orrs	r3, r2
   1e2da:	b29a      	uxth	r2, r3
   1e2dc:	68bb      	ldr	r3, [r7, #8]
   1e2de:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e2e0:	230f      	movs	r3, #15
   1e2e2:	18fb      	adds	r3, r7, r3
   1e2e4:	2200      	movs	r2, #0
   1e2e6:	701a      	strb	r2, [r3, #0]
   1e2e8:	e01b      	b.n	1e322 <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
   1e2ea:	46c0      	nop			; (mov r8, r8)
   1e2ec:	687b      	ldr	r3, [r7, #4]
   1e2ee:	0018      	movs	r0, r3
   1e2f0:	4b37      	ldr	r3, [pc, #220]	; (1e3d0 <_rtc_count_set_config+0x138>)
   1e2f2:	4798      	blx	r3
   1e2f4:	1e03      	subs	r3, r0, #0
   1e2f6:	d1f9      	bne.n	1e2ec <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e2f8:	230f      	movs	r3, #15
   1e2fa:	18fb      	adds	r3, r7, r3
   1e2fc:	781a      	ldrb	r2, [r3, #0]
   1e2fe:	683b      	ldr	r3, [r7, #0]
   1e300:	3202      	adds	r2, #2
   1e302:	0092      	lsls	r2, r2, #2
   1e304:	58d1      	ldr	r1, [r2, r3]
   1e306:	230f      	movs	r3, #15
   1e308:	18fb      	adds	r3, r7, r3
   1e30a:	781a      	ldrb	r2, [r3, #0]
   1e30c:	687b      	ldr	r3, [r7, #4]
   1e30e:	0018      	movs	r0, r3
   1e310:	4b30      	ldr	r3, [pc, #192]	; (1e3d4 <_rtc_count_set_config+0x13c>)
   1e312:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
   1e314:	230f      	movs	r3, #15
   1e316:	18fb      	adds	r3, r7, r3
   1e318:	781a      	ldrb	r2, [r3, #0]
   1e31a:	230f      	movs	r3, #15
   1e31c:	18fb      	adds	r3, r7, r3
   1e31e:	3201      	adds	r2, #1
   1e320:	701a      	strb	r2, [r3, #0]
   1e322:	230f      	movs	r3, #15
   1e324:	18fb      	adds	r3, r7, r3
   1e326:	781b      	ldrb	r3, [r3, #0]
   1e328:	2b00      	cmp	r3, #0
   1e32a:	d0de      	beq.n	1e2ea <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
   1e32c:	e036      	b.n	1e39c <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
   1e32e:	68bb      	ldr	r3, [r7, #8]
   1e330:	881b      	ldrh	r3, [r3, #0]
   1e332:	b29b      	uxth	r3, r3
   1e334:	2204      	movs	r2, #4
   1e336:	4313      	orrs	r3, r2
   1e338:	b29a      	uxth	r2, r3
   1e33a:	68bb      	ldr	r3, [r7, #8]
   1e33c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
   1e33e:	683b      	ldr	r3, [r7, #0]
   1e340:	78db      	ldrb	r3, [r3, #3]
   1e342:	2b00      	cmp	r3, #0
   1e344:	d001      	beq.n	1e34a <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e346:	2317      	movs	r3, #23
   1e348:	e03e      	b.n	1e3c8 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1e34a:	230e      	movs	r3, #14
   1e34c:	18fb      	adds	r3, r7, r3
   1e34e:	2200      	movs	r2, #0
   1e350:	701a      	strb	r2, [r3, #0]
   1e352:	e01b      	b.n	1e38c <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
   1e354:	46c0      	nop			; (mov r8, r8)
   1e356:	687b      	ldr	r3, [r7, #4]
   1e358:	0018      	movs	r0, r3
   1e35a:	4b1d      	ldr	r3, [pc, #116]	; (1e3d0 <_rtc_count_set_config+0x138>)
   1e35c:	4798      	blx	r3
   1e35e:	1e03      	subs	r3, r0, #0
   1e360:	d1f9      	bne.n	1e356 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
   1e362:	230e      	movs	r3, #14
   1e364:	18fb      	adds	r3, r7, r3
   1e366:	781a      	ldrb	r2, [r3, #0]
   1e368:	683b      	ldr	r3, [r7, #0]
   1e36a:	3202      	adds	r2, #2
   1e36c:	0092      	lsls	r2, r2, #2
   1e36e:	58d1      	ldr	r1, [r2, r3]
   1e370:	230e      	movs	r3, #14
   1e372:	18fb      	adds	r3, r7, r3
   1e374:	781a      	ldrb	r2, [r3, #0]
   1e376:	687b      	ldr	r3, [r7, #4]
   1e378:	0018      	movs	r0, r3
   1e37a:	4b16      	ldr	r3, [pc, #88]	; (1e3d4 <_rtc_count_set_config+0x13c>)
   1e37c:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   1e37e:	230e      	movs	r3, #14
   1e380:	18fb      	adds	r3, r7, r3
   1e382:	781a      	ldrb	r2, [r3, #0]
   1e384:	230e      	movs	r3, #14
   1e386:	18fb      	adds	r3, r7, r3
   1e388:	3201      	adds	r2, #1
   1e38a:	701a      	strb	r2, [r3, #0]
   1e38c:	230e      	movs	r3, #14
   1e38e:	18fb      	adds	r3, r7, r3
   1e390:	781b      	ldrb	r3, [r3, #0]
   1e392:	2b01      	cmp	r3, #1
   1e394:	d9de      	bls.n	1e354 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
   1e396:	e001      	b.n	1e39c <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1e398:	2317      	movs	r3, #23
   1e39a:	e015      	b.n	1e3c8 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1e39c:	683b      	ldr	r3, [r7, #0]
   1e39e:	791b      	ldrb	r3, [r3, #4]
   1e3a0:	2b00      	cmp	r3, #0
   1e3a2:	d010      	beq.n	1e3c6 <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
   1e3a4:	68bb      	ldr	r3, [r7, #8]
   1e3a6:	885b      	ldrh	r3, [r3, #2]
   1e3a8:	b29b      	uxth	r3, r3
   1e3aa:	2280      	movs	r2, #128	; 0x80
   1e3ac:	01d2      	lsls	r2, r2, #7
   1e3ae:	4313      	orrs	r3, r2
   1e3b0:	b29a      	uxth	r2, r3
   1e3b2:	68bb      	ldr	r3, [r7, #8]
   1e3b4:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
   1e3b6:	68bb      	ldr	r3, [r7, #8]
   1e3b8:	885b      	ldrh	r3, [r3, #2]
   1e3ba:	b29b      	uxth	r3, r3
   1e3bc:	4a06      	ldr	r2, [pc, #24]	; (1e3d8 <_rtc_count_set_config+0x140>)
   1e3be:	4313      	orrs	r3, r2
   1e3c0:	b29a      	uxth	r2, r3
   1e3c2:	68bb      	ldr	r3, [r7, #8]
   1e3c4:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
   1e3c6:	2300      	movs	r3, #0
}
   1e3c8:	0018      	movs	r0, r3
   1e3ca:	46bd      	mov	sp, r7
   1e3cc:	b004      	add	sp, #16
   1e3ce:	bd80      	pop	{r7, pc}
   1e3d0:	0001e18d 	.word	0x0001e18d
   1e3d4:	0001e46d 	.word	0x0001e46d
   1e3d8:	ffff8000 	.word	0xffff8000

0001e3dc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
   1e3dc:	b580      	push	{r7, lr}
   1e3de:	b086      	sub	sp, #24
   1e3e0:	af00      	add	r7, sp, #0
   1e3e2:	60f8      	str	r0, [r7, #12]
   1e3e4:	60b9      	str	r1, [r7, #8]
   1e3e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1e3e8:	68fb      	ldr	r3, [r7, #12]
   1e3ea:	68ba      	ldr	r2, [r7, #8]
   1e3ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1e3ee:	2120      	movs	r1, #32
   1e3f0:	2000      	movs	r0, #0
   1e3f2:	4b17      	ldr	r3, [pc, #92]	; (1e450 <rtc_count_init+0x74>)
   1e3f4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e3f6:	2314      	movs	r3, #20
   1e3f8:	18fb      	adds	r3, r7, r3
   1e3fa:	0018      	movs	r0, r3
   1e3fc:	4b15      	ldr	r3, [pc, #84]	; (1e454 <rtc_count_init+0x78>)
   1e3fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1e400:	2314      	movs	r3, #20
   1e402:	18fb      	adds	r3, r7, r3
   1e404:	2202      	movs	r2, #2
   1e406:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1e408:	2314      	movs	r3, #20
   1e40a:	18fb      	adds	r3, r7, r3
   1e40c:	0019      	movs	r1, r3
   1e40e:	2004      	movs	r0, #4
   1e410:	4b11      	ldr	r3, [pc, #68]	; (1e458 <rtc_count_init+0x7c>)
   1e412:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1e414:	2004      	movs	r0, #4
   1e416:	4b11      	ldr	r3, [pc, #68]	; (1e45c <rtc_count_init+0x80>)
   1e418:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
   1e41a:	68fb      	ldr	r3, [r7, #12]
   1e41c:	0018      	movs	r0, r3
   1e41e:	4b10      	ldr	r3, [pc, #64]	; (1e460 <rtc_count_init+0x84>)
   1e420:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
   1e422:	687b      	ldr	r3, [r7, #4]
   1e424:	789a      	ldrb	r2, [r3, #2]
   1e426:	68fb      	ldr	r3, [r7, #12]
   1e428:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   1e42a:	687b      	ldr	r3, [r7, #4]
   1e42c:	791a      	ldrb	r2, [r3, #4]
   1e42e:	68fb      	ldr	r3, [r7, #12]
   1e430:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   1e432:	4b0c      	ldr	r3, [pc, #48]	; (1e464 <rtc_count_init+0x88>)
   1e434:	68fa      	ldr	r2, [r7, #12]
   1e436:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
   1e438:	687a      	ldr	r2, [r7, #4]
   1e43a:	68fb      	ldr	r3, [r7, #12]
   1e43c:	0011      	movs	r1, r2
   1e43e:	0018      	movs	r0, r3
   1e440:	4b09      	ldr	r3, [pc, #36]	; (1e468 <rtc_count_init+0x8c>)
   1e442:	4798      	blx	r3
   1e444:	0003      	movs	r3, r0
}
   1e446:	0018      	movs	r0, r3
   1e448:	46bd      	mov	sp, r7
   1e44a:	b006      	add	sp, #24
   1e44c:	bd80      	pop	{r7, pc}
   1e44e:	46c0      	nop			; (mov r8, r8)
   1e450:	0001e0d5 	.word	0x0001e0d5
   1e454:	0001e0bd 	.word	0x0001e0bd
   1e458:	00024a35 	.word	0x00024a35
   1e45c:	00024a79 	.word	0x00024a79
   1e460:	0001e249 	.word	0x0001e249
   1e464:	20000940 	.word	0x20000940
   1e468:	0001e299 	.word	0x0001e299

0001e46c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
   1e46c:	b580      	push	{r7, lr}
   1e46e:	b086      	sub	sp, #24
   1e470:	af00      	add	r7, sp, #0
   1e472:	60f8      	str	r0, [r7, #12]
   1e474:	60b9      	str	r1, [r7, #8]
   1e476:	1dfb      	adds	r3, r7, #7
   1e478:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e47a:	68fb      	ldr	r3, [r7, #12]
   1e47c:	681b      	ldr	r3, [r3, #0]
   1e47e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
   1e480:	46c0      	nop			; (mov r8, r8)
   1e482:	68fb      	ldr	r3, [r7, #12]
   1e484:	0018      	movs	r0, r3
   1e486:	4b1a      	ldr	r3, [pc, #104]	; (1e4f0 <rtc_count_set_compare+0x84>)
   1e488:	4798      	blx	r3
   1e48a:	1e03      	subs	r3, r0, #0
   1e48c:	d1f9      	bne.n	1e482 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
   1e48e:	68fb      	ldr	r3, [r7, #12]
   1e490:	791b      	ldrb	r3, [r3, #4]
   1e492:	2b00      	cmp	r3, #0
   1e494:	d00f      	beq.n	1e4b6 <rtc_count_set_compare+0x4a>
   1e496:	2b01      	cmp	r3, #1
   1e498:	d122      	bne.n	1e4e0 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
   1e49a:	1dfb      	adds	r3, r7, #7
   1e49c:	781b      	ldrb	r3, [r3, #0]
   1e49e:	2b01      	cmp	r3, #1
   1e4a0:	d901      	bls.n	1e4a6 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
   1e4a2:	2317      	movs	r3, #23
   1e4a4:	e01f      	b.n	1e4e6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
   1e4a6:	1dfb      	adds	r3, r7, #7
   1e4a8:	781a      	ldrb	r2, [r3, #0]
   1e4aa:	697b      	ldr	r3, [r7, #20]
   1e4ac:	3206      	adds	r2, #6
   1e4ae:	0092      	lsls	r2, r2, #2
   1e4b0:	68b9      	ldr	r1, [r7, #8]
   1e4b2:	50d1      	str	r1, [r2, r3]

			break;
   1e4b4:	e016      	b.n	1e4e4 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
   1e4b6:	1dfb      	adds	r3, r7, #7
   1e4b8:	781b      	ldrb	r3, [r3, #0]
   1e4ba:	2b02      	cmp	r3, #2
   1e4bc:	d901      	bls.n	1e4c2 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
   1e4be:	2317      	movs	r3, #23
   1e4c0:	e011      	b.n	1e4e6 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
   1e4c2:	68bb      	ldr	r3, [r7, #8]
   1e4c4:	4a0b      	ldr	r2, [pc, #44]	; (1e4f4 <rtc_count_set_compare+0x88>)
   1e4c6:	4293      	cmp	r3, r2
   1e4c8:	d901      	bls.n	1e4ce <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
   1e4ca:	2317      	movs	r3, #23
   1e4cc:	e00b      	b.n	1e4e6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
   1e4ce:	1dfb      	adds	r3, r7, #7
   1e4d0:	781a      	ldrb	r2, [r3, #0]
   1e4d2:	68bb      	ldr	r3, [r7, #8]
   1e4d4:	b299      	uxth	r1, r3
   1e4d6:	697b      	ldr	r3, [r7, #20]
   1e4d8:	320c      	adds	r2, #12
   1e4da:	0052      	lsls	r2, r2, #1
   1e4dc:	52d1      	strh	r1, [r2, r3]

			break;
   1e4de:	e001      	b.n	1e4e4 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
   1e4e0:	231a      	movs	r3, #26
   1e4e2:	e000      	b.n	1e4e6 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
   1e4e4:	2300      	movs	r3, #0
}
   1e4e6:	0018      	movs	r0, r3
   1e4e8:	46bd      	mov	sp, r7
   1e4ea:	b006      	add	sp, #24
   1e4ec:	bd80      	pop	{r7, pc}
   1e4ee:	46c0      	nop			; (mov r8, r8)
   1e4f0:	0001e18d 	.word	0x0001e18d
   1e4f4:	0000ffff 	.word	0x0000ffff

0001e4f8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
   1e4f8:	b580      	push	{r7, lr}
   1e4fa:	b084      	sub	sp, #16
   1e4fc:	af00      	add	r7, sp, #0
   1e4fe:	6078      	str	r0, [r7, #4]
   1e500:	000a      	movs	r2, r1
   1e502:	1cbb      	adds	r3, r7, #2
   1e504:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1e506:	687b      	ldr	r3, [r7, #4]
   1e508:	681b      	ldr	r3, [r3, #0]
   1e50a:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
   1e50c:	687b      	ldr	r3, [r7, #4]
   1e50e:	791b      	ldrb	r3, [r3, #4]
   1e510:	2b00      	cmp	r3, #0
   1e512:	d001      	beq.n	1e518 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e514:	2315      	movs	r3, #21
   1e516:	e00b      	b.n	1e530 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
   1e518:	46c0      	nop			; (mov r8, r8)
   1e51a:	687b      	ldr	r3, [r7, #4]
   1e51c:	0018      	movs	r0, r3
   1e51e:	4b06      	ldr	r3, [pc, #24]	; (1e538 <rtc_count_set_period+0x40>)
   1e520:	4798      	blx	r3
   1e522:	1e03      	subs	r3, r0, #0
   1e524:	d1f9      	bne.n	1e51a <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
   1e526:	68fb      	ldr	r3, [r7, #12]
   1e528:	1cba      	adds	r2, r7, #2
   1e52a:	8812      	ldrh	r2, [r2, #0]
   1e52c:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
   1e52e:	2300      	movs	r3, #0
}
   1e530:	0018      	movs	r0, r3
   1e532:	46bd      	mov	sp, r7
   1e534:	b004      	add	sp, #16
   1e536:	bd80      	pop	{r7, pc}
   1e538:	0001e18d 	.word	0x0001e18d

0001e53c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1e53c:	b580      	push	{r7, lr}
   1e53e:	b086      	sub	sp, #24
   1e540:	af00      	add	r7, sp, #0
   1e542:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1e544:	4b31      	ldr	r3, [pc, #196]	; (1e60c <_rtc_interrupt_handler+0xd0>)
   1e546:	687a      	ldr	r2, [r7, #4]
   1e548:	0092      	lsls	r2, r2, #2
   1e54a:	58d3      	ldr	r3, [r2, r3]
   1e54c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1e54e:	697b      	ldr	r3, [r7, #20]
   1e550:	681b      	ldr	r3, [r3, #0]
   1e552:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1e554:	230e      	movs	r3, #14
   1e556:	18fb      	adds	r3, r7, r3
   1e558:	697a      	ldr	r2, [r7, #20]
   1e55a:	8ad2      	ldrh	r2, [r2, #22]
   1e55c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1e55e:	697b      	ldr	r3, [r7, #20]
   1e560:	8a9b      	ldrh	r3, [r3, #20]
   1e562:	b29a      	uxth	r2, r3
   1e564:	230e      	movs	r3, #14
   1e566:	18fb      	adds	r3, r7, r3
   1e568:	210e      	movs	r1, #14
   1e56a:	1879      	adds	r1, r7, r1
   1e56c:	8809      	ldrh	r1, [r1, #0]
   1e56e:	400a      	ands	r2, r1
   1e570:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1e572:	693b      	ldr	r3, [r7, #16]
   1e574:	7a1b      	ldrb	r3, [r3, #8]
   1e576:	b2da      	uxtb	r2, r3
   1e578:	230c      	movs	r3, #12
   1e57a:	18fb      	adds	r3, r7, r3
   1e57c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1e57e:	693b      	ldr	r3, [r7, #16]
   1e580:	79db      	ldrb	r3, [r3, #7]
   1e582:	b2db      	uxtb	r3, r3
   1e584:	b29a      	uxth	r2, r3
   1e586:	230c      	movs	r3, #12
   1e588:	18fb      	adds	r3, r7, r3
   1e58a:	210c      	movs	r1, #12
   1e58c:	1879      	adds	r1, r7, r1
   1e58e:	8809      	ldrh	r1, [r1, #0]
   1e590:	400a      	ands	r2, r1
   1e592:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1e594:	230c      	movs	r3, #12
   1e596:	18fb      	adds	r3, r7, r3
   1e598:	881b      	ldrh	r3, [r3, #0]
   1e59a:	2280      	movs	r2, #128	; 0x80
   1e59c:	4013      	ands	r3, r2
   1e59e:	d00c      	beq.n	1e5ba <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1e5a0:	230e      	movs	r3, #14
   1e5a2:	18fb      	adds	r3, r7, r3
   1e5a4:	881b      	ldrh	r3, [r3, #0]
   1e5a6:	2204      	movs	r2, #4
   1e5a8:	4013      	ands	r3, r2
   1e5aa:	d002      	beq.n	1e5b2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1e5ac:	697b      	ldr	r3, [r7, #20]
   1e5ae:	691b      	ldr	r3, [r3, #16]
   1e5b0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1e5b2:	693b      	ldr	r3, [r7, #16]
   1e5b4:	2280      	movs	r2, #128	; 0x80
   1e5b6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1e5b8:	e024      	b.n	1e604 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1e5ba:	230c      	movs	r3, #12
   1e5bc:	18fb      	adds	r3, r7, r3
   1e5be:	881b      	ldrh	r3, [r3, #0]
   1e5c0:	2201      	movs	r2, #1
   1e5c2:	4013      	ands	r3, r2
   1e5c4:	d00c      	beq.n	1e5e0 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1e5c6:	230e      	movs	r3, #14
   1e5c8:	18fb      	adds	r3, r7, r3
   1e5ca:	881b      	ldrh	r3, [r3, #0]
   1e5cc:	2201      	movs	r2, #1
   1e5ce:	4013      	ands	r3, r2
   1e5d0:	d002      	beq.n	1e5d8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1e5d2:	697b      	ldr	r3, [r7, #20]
   1e5d4:	689b      	ldr	r3, [r3, #8]
   1e5d6:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1e5d8:	693b      	ldr	r3, [r7, #16]
   1e5da:	2201      	movs	r2, #1
   1e5dc:	721a      	strb	r2, [r3, #8]
}
   1e5de:	e011      	b.n	1e604 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1e5e0:	230c      	movs	r3, #12
   1e5e2:	18fb      	adds	r3, r7, r3
   1e5e4:	881b      	ldrh	r3, [r3, #0]
   1e5e6:	2202      	movs	r2, #2
   1e5e8:	4013      	ands	r3, r2
   1e5ea:	d00b      	beq.n	1e604 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1e5ec:	230e      	movs	r3, #14
   1e5ee:	18fb      	adds	r3, r7, r3
   1e5f0:	881b      	ldrh	r3, [r3, #0]
   1e5f2:	2202      	movs	r2, #2
   1e5f4:	4013      	ands	r3, r2
   1e5f6:	d002      	beq.n	1e5fe <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1e5f8:	697b      	ldr	r3, [r7, #20]
   1e5fa:	68db      	ldr	r3, [r3, #12]
   1e5fc:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1e5fe:	693b      	ldr	r3, [r7, #16]
   1e600:	2202      	movs	r2, #2
   1e602:	721a      	strb	r2, [r3, #8]
}
   1e604:	46c0      	nop			; (mov r8, r8)
   1e606:	46bd      	mov	sp, r7
   1e608:	b006      	add	sp, #24
   1e60a:	bd80      	pop	{r7, pc}
   1e60c:	20000940 	.word	0x20000940

0001e610 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1e610:	b580      	push	{r7, lr}
   1e612:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1e614:	2000      	movs	r0, #0
   1e616:	4b02      	ldr	r3, [pc, #8]	; (1e620 <RTC_Handler+0x10>)
   1e618:	4798      	blx	r3
}
   1e61a:	46c0      	nop			; (mov r8, r8)
   1e61c:	46bd      	mov	sp, r7
   1e61e:	bd80      	pop	{r7, pc}
   1e620:	0001e53d 	.word	0x0001e53d

0001e624 <system_gclk_chan_get_config_defaults>:
{
   1e624:	b580      	push	{r7, lr}
   1e626:	b082      	sub	sp, #8
   1e628:	af00      	add	r7, sp, #0
   1e62a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e62c:	687b      	ldr	r3, [r7, #4]
   1e62e:	2200      	movs	r2, #0
   1e630:	701a      	strb	r2, [r3, #0]
}
   1e632:	46c0      	nop			; (mov r8, r8)
   1e634:	46bd      	mov	sp, r7
   1e636:	b002      	add	sp, #8
   1e638:	bd80      	pop	{r7, pc}

0001e63a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1e63a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e63c:	b08d      	sub	sp, #52	; 0x34
   1e63e:	af00      	add	r7, sp, #0
   1e640:	60b8      	str	r0, [r7, #8]
   1e642:	60f9      	str	r1, [r7, #12]
   1e644:	603a      	str	r2, [r7, #0]
   1e646:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1e648:	2300      	movs	r3, #0
   1e64a:	2400      	movs	r4, #0
   1e64c:	623b      	str	r3, [r7, #32]
   1e64e:	627c      	str	r4, [r7, #36]	; 0x24
   1e650:	2300      	movs	r3, #0
   1e652:	2400      	movs	r4, #0
   1e654:	61bb      	str	r3, [r7, #24]
   1e656:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1e658:	233f      	movs	r3, #63	; 0x3f
   1e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e65c:	e053      	b.n	1e706 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1e65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e660:	3b20      	subs	r3, #32
   1e662:	2b00      	cmp	r3, #0
   1e664:	db04      	blt.n	1e670 <long_division+0x36>
   1e666:	2201      	movs	r2, #1
   1e668:	409a      	lsls	r2, r3
   1e66a:	0013      	movs	r3, r2
   1e66c:	617b      	str	r3, [r7, #20]
   1e66e:	e00b      	b.n	1e688 <long_division+0x4e>
   1e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e672:	2220      	movs	r2, #32
   1e674:	1ad3      	subs	r3, r2, r3
   1e676:	2201      	movs	r2, #1
   1e678:	40da      	lsrs	r2, r3
   1e67a:	0013      	movs	r3, r2
   1e67c:	2100      	movs	r1, #0
   1e67e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e680:	4091      	lsls	r1, r2
   1e682:	000a      	movs	r2, r1
   1e684:	4313      	orrs	r3, r2
   1e686:	617b      	str	r3, [r7, #20]
   1e688:	2201      	movs	r2, #1
   1e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e68c:	409a      	lsls	r2, r3
   1e68e:	0013      	movs	r3, r2
   1e690:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1e692:	69bb      	ldr	r3, [r7, #24]
   1e694:	69fc      	ldr	r4, [r7, #28]
   1e696:	18db      	adds	r3, r3, r3
   1e698:	4164      	adcs	r4, r4
   1e69a:	61bb      	str	r3, [r7, #24]
   1e69c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1e69e:	68bb      	ldr	r3, [r7, #8]
   1e6a0:	693a      	ldr	r2, [r7, #16]
   1e6a2:	401a      	ands	r2, r3
   1e6a4:	0015      	movs	r5, r2
   1e6a6:	68fb      	ldr	r3, [r7, #12]
   1e6a8:	697a      	ldr	r2, [r7, #20]
   1e6aa:	401a      	ands	r2, r3
   1e6ac:	0016      	movs	r6, r2
   1e6ae:	002b      	movs	r3, r5
   1e6b0:	4333      	orrs	r3, r6
   1e6b2:	d007      	beq.n	1e6c4 <long_division+0x8a>
			r |= 0x01;
   1e6b4:	69bb      	ldr	r3, [r7, #24]
   1e6b6:	2201      	movs	r2, #1
   1e6b8:	4313      	orrs	r3, r2
   1e6ba:	61bb      	str	r3, [r7, #24]
   1e6bc:	69fb      	ldr	r3, [r7, #28]
   1e6be:	2200      	movs	r2, #0
   1e6c0:	4313      	orrs	r3, r2
   1e6c2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1e6c4:	687a      	ldr	r2, [r7, #4]
   1e6c6:	69fb      	ldr	r3, [r7, #28]
   1e6c8:	429a      	cmp	r2, r3
   1e6ca:	d819      	bhi.n	1e700 <long_division+0xc6>
   1e6cc:	687a      	ldr	r2, [r7, #4]
   1e6ce:	69fb      	ldr	r3, [r7, #28]
   1e6d0:	429a      	cmp	r2, r3
   1e6d2:	d103      	bne.n	1e6dc <long_division+0xa2>
   1e6d4:	683a      	ldr	r2, [r7, #0]
   1e6d6:	69bb      	ldr	r3, [r7, #24]
   1e6d8:	429a      	cmp	r2, r3
   1e6da:	d811      	bhi.n	1e700 <long_division+0xc6>
			r = r - d;
   1e6dc:	69b9      	ldr	r1, [r7, #24]
   1e6de:	69fa      	ldr	r2, [r7, #28]
   1e6e0:	683b      	ldr	r3, [r7, #0]
   1e6e2:	687c      	ldr	r4, [r7, #4]
   1e6e4:	1ac9      	subs	r1, r1, r3
   1e6e6:	41a2      	sbcs	r2, r4
   1e6e8:	000b      	movs	r3, r1
   1e6ea:	0014      	movs	r4, r2
   1e6ec:	61bb      	str	r3, [r7, #24]
   1e6ee:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1e6f0:	6a3a      	ldr	r2, [r7, #32]
   1e6f2:	693b      	ldr	r3, [r7, #16]
   1e6f4:	4313      	orrs	r3, r2
   1e6f6:	623b      	str	r3, [r7, #32]
   1e6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e6fa:	697b      	ldr	r3, [r7, #20]
   1e6fc:	4313      	orrs	r3, r2
   1e6fe:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e702:	3b01      	subs	r3, #1
   1e704:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e708:	2b00      	cmp	r3, #0
   1e70a:	daa8      	bge.n	1e65e <long_division+0x24>
		}
	}

	return q;
   1e70c:	6a3b      	ldr	r3, [r7, #32]
   1e70e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1e710:	0018      	movs	r0, r3
   1e712:	0021      	movs	r1, r4
   1e714:	46bd      	mov	sp, r7
   1e716:	b00d      	add	sp, #52	; 0x34
   1e718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e71a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1e71a:	b580      	push	{r7, lr}
   1e71c:	b086      	sub	sp, #24
   1e71e:	af00      	add	r7, sp, #0
   1e720:	60f8      	str	r0, [r7, #12]
   1e722:	60b9      	str	r1, [r7, #8]
   1e724:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1e726:	2316      	movs	r3, #22
   1e728:	18fb      	adds	r3, r7, r3
   1e72a:	2200      	movs	r2, #0
   1e72c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1e72e:	68bb      	ldr	r3, [r7, #8]
   1e730:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1e732:	68bb      	ldr	r3, [r7, #8]
   1e734:	085a      	lsrs	r2, r3, #1
   1e736:	68fb      	ldr	r3, [r7, #12]
   1e738:	429a      	cmp	r2, r3
   1e73a:	d201      	bcs.n	1e740 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e73c:	2340      	movs	r3, #64	; 0x40
   1e73e:	e026      	b.n	1e78e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1e740:	68bb      	ldr	r3, [r7, #8]
   1e742:	085b      	lsrs	r3, r3, #1
   1e744:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1e746:	e00a      	b.n	1e75e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1e748:	693a      	ldr	r2, [r7, #16]
   1e74a:	68fb      	ldr	r3, [r7, #12]
   1e74c:	1ad3      	subs	r3, r2, r3
   1e74e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1e750:	2316      	movs	r3, #22
   1e752:	18fb      	adds	r3, r7, r3
   1e754:	881a      	ldrh	r2, [r3, #0]
   1e756:	2316      	movs	r3, #22
   1e758:	18fb      	adds	r3, r7, r3
   1e75a:	3201      	adds	r2, #1
   1e75c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1e75e:	693a      	ldr	r2, [r7, #16]
   1e760:	68fb      	ldr	r3, [r7, #12]
   1e762:	429a      	cmp	r2, r3
   1e764:	d2f0      	bcs.n	1e748 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1e766:	2316      	movs	r3, #22
   1e768:	18fb      	adds	r3, r7, r3
   1e76a:	2216      	movs	r2, #22
   1e76c:	18ba      	adds	r2, r7, r2
   1e76e:	8812      	ldrh	r2, [r2, #0]
   1e770:	3a01      	subs	r2, #1
   1e772:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1e774:	2316      	movs	r3, #22
   1e776:	18fb      	adds	r3, r7, r3
   1e778:	881b      	ldrh	r3, [r3, #0]
   1e77a:	2bff      	cmp	r3, #255	; 0xff
   1e77c:	d901      	bls.n	1e782 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e77e:	2340      	movs	r3, #64	; 0x40
   1e780:	e005      	b.n	1e78e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1e782:	687b      	ldr	r3, [r7, #4]
   1e784:	2216      	movs	r2, #22
   1e786:	18ba      	adds	r2, r7, r2
   1e788:	8812      	ldrh	r2, [r2, #0]
   1e78a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1e78c:	2300      	movs	r3, #0
	}
}
   1e78e:	0018      	movs	r0, r3
   1e790:	46bd      	mov	sp, r7
   1e792:	b006      	add	sp, #24
   1e794:	bd80      	pop	{r7, pc}
	...

0001e798 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1e798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e79a:	b0a1      	sub	sp, #132	; 0x84
   1e79c:	af00      	add	r7, sp, #0
   1e79e:	64f8      	str	r0, [r7, #76]	; 0x4c
   1e7a0:	64b9      	str	r1, [r7, #72]	; 0x48
   1e7a2:	647a      	str	r2, [r7, #68]	; 0x44
   1e7a4:	2243      	movs	r2, #67	; 0x43
   1e7a6:	18ba      	adds	r2, r7, r2
   1e7a8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1e7aa:	2300      	movs	r3, #0
   1e7ac:	2400      	movs	r4, #0
   1e7ae:	673b      	str	r3, [r7, #112]	; 0x70
   1e7b0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1e7b2:	2300      	movs	r3, #0
   1e7b4:	2400      	movs	r4, #0
   1e7b6:	66bb      	str	r3, [r7, #104]	; 0x68
   1e7b8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1e7ba:	2300      	movs	r3, #0
   1e7bc:	2400      	movs	r4, #0
   1e7be:	67bb      	str	r3, [r7, #120]	; 0x78
   1e7c0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1e7c2:	2300      	movs	r3, #0
   1e7c4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1e7c6:	2358      	movs	r3, #88	; 0x58
   1e7c8:	2240      	movs	r2, #64	; 0x40
   1e7ca:	4694      	mov	ip, r2
   1e7cc:	44bc      	add	ip, r7
   1e7ce:	4463      	add	r3, ip
   1e7d0:	781a      	ldrb	r2, [r3, #0]
   1e7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e7d4:	435a      	muls	r2, r3
   1e7d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e7d8:	429a      	cmp	r2, r3
   1e7da:	d901      	bls.n	1e7e0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e7dc:	2340      	movs	r3, #64	; 0x40
   1e7de:	e0b3      	b.n	1e948 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1e7e0:	2343      	movs	r3, #67	; 0x43
   1e7e2:	18fb      	adds	r3, r7, r3
   1e7e4:	781b      	ldrb	r3, [r3, #0]
   1e7e6:	2b00      	cmp	r3, #0
   1e7e8:	d13d      	bne.n	1e866 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1e7ea:	2358      	movs	r3, #88	; 0x58
   1e7ec:	2240      	movs	r2, #64	; 0x40
   1e7ee:	4694      	mov	ip, r2
   1e7f0:	44bc      	add	ip, r7
   1e7f2:	4463      	add	r3, ip
   1e7f4:	781b      	ldrb	r3, [r3, #0]
   1e7f6:	b2db      	uxtb	r3, r3
   1e7f8:	613b      	str	r3, [r7, #16]
   1e7fa:	2300      	movs	r3, #0
   1e7fc:	617b      	str	r3, [r7, #20]
   1e7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e800:	60bb      	str	r3, [r7, #8]
   1e802:	2300      	movs	r3, #0
   1e804:	60fb      	str	r3, [r7, #12]
   1e806:	4c52      	ldr	r4, [pc, #328]	; (1e950 <_sercom_get_async_baud_val+0x1b8>)
   1e808:	68ba      	ldr	r2, [r7, #8]
   1e80a:	68fb      	ldr	r3, [r7, #12]
   1e80c:	6938      	ldr	r0, [r7, #16]
   1e80e:	6979      	ldr	r1, [r7, #20]
   1e810:	47a0      	blx	r4
   1e812:	0003      	movs	r3, r0
   1e814:	000c      	movs	r4, r1
   1e816:	001b      	movs	r3, r3
   1e818:	65fb      	str	r3, [r7, #92]	; 0x5c
   1e81a:	2300      	movs	r3, #0
   1e81c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1e81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e820:	603b      	str	r3, [r7, #0]
   1e822:	2300      	movs	r3, #0
   1e824:	607b      	str	r3, [r7, #4]
   1e826:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1e828:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e82a:	683a      	ldr	r2, [r7, #0]
   1e82c:	687b      	ldr	r3, [r7, #4]
   1e82e:	4c49      	ldr	r4, [pc, #292]	; (1e954 <_sercom_get_async_baud_val+0x1bc>)
   1e830:	47a0      	blx	r4
   1e832:	0003      	movs	r3, r0
   1e834:	000c      	movs	r4, r1
   1e836:	673b      	str	r3, [r7, #112]	; 0x70
   1e838:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1e83a:	2100      	movs	r1, #0
   1e83c:	2201      	movs	r2, #1
   1e83e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e840:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1e842:	1ac9      	subs	r1, r1, r3
   1e844:	41a2      	sbcs	r2, r4
   1e846:	000b      	movs	r3, r1
   1e848:	0014      	movs	r4, r2
   1e84a:	66bb      	str	r3, [r7, #104]	; 0x68
   1e84c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1e84e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e850:	0c1b      	lsrs	r3, r3, #16
   1e852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1e854:	0416      	lsls	r6, r2, #16
   1e856:	431e      	orrs	r6, r3
   1e858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e85a:	041d      	lsls	r5, r3, #16
   1e85c:	0033      	movs	r3, r6
   1e85e:	67bb      	str	r3, [r7, #120]	; 0x78
   1e860:	2300      	movs	r3, #0
   1e862:	67fb      	str	r3, [r7, #124]	; 0x7c
   1e864:	e06a      	b.n	1e93c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1e866:	2343      	movs	r3, #67	; 0x43
   1e868:	18fb      	adds	r3, r7, r3
   1e86a:	781b      	ldrb	r3, [r3, #0]
   1e86c:	2b01      	cmp	r3, #1
   1e86e:	d165      	bne.n	1e93c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1e870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1e872:	633b      	str	r3, [r7, #48]	; 0x30
   1e874:	2300      	movs	r3, #0
   1e876:	637b      	str	r3, [r7, #52]	; 0x34
   1e878:	2358      	movs	r3, #88	; 0x58
   1e87a:	2240      	movs	r2, #64	; 0x40
   1e87c:	4694      	mov	ip, r2
   1e87e:	44bc      	add	ip, r7
   1e880:	4463      	add	r3, ip
   1e882:	781b      	ldrb	r3, [r3, #0]
   1e884:	b2db      	uxtb	r3, r3
   1e886:	62bb      	str	r3, [r7, #40]	; 0x28
   1e888:	2300      	movs	r3, #0
   1e88a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e88c:	4c30      	ldr	r4, [pc, #192]	; (1e950 <_sercom_get_async_baud_val+0x1b8>)
   1e88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e892:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1e894:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e896:	47a0      	blx	r4
   1e898:	0003      	movs	r3, r0
   1e89a:	000c      	movs	r4, r1
   1e89c:	65bb      	str	r3, [r7, #88]	; 0x58
   1e89e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1e8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e8a2:	623b      	str	r3, [r7, #32]
   1e8a4:	2300      	movs	r3, #0
   1e8a6:	627b      	str	r3, [r7, #36]	; 0x24
   1e8a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e8aa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e8ac:	001a      	movs	r2, r3
   1e8ae:	0023      	movs	r3, r4
   1e8b0:	6a38      	ldr	r0, [r7, #32]
   1e8b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e8b4:	4c27      	ldr	r4, [pc, #156]	; (1e954 <_sercom_get_async_baud_val+0x1bc>)
   1e8b6:	47a0      	blx	r4
   1e8b8:	0003      	movs	r3, r0
   1e8ba:	000c      	movs	r4, r1
   1e8bc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1e8be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1e8c0:	2380      	movs	r3, #128	; 0x80
   1e8c2:	019b      	lsls	r3, r3, #6
   1e8c4:	429a      	cmp	r2, r3
   1e8c6:	d901      	bls.n	1e8cc <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1e8c8:	2340      	movs	r3, #64	; 0x40
   1e8ca:	e03d      	b.n	1e948 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1e8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e8ce:	61bb      	str	r3, [r7, #24]
   1e8d0:	2300      	movs	r3, #0
   1e8d2:	61fb      	str	r3, [r7, #28]
   1e8d4:	69b9      	ldr	r1, [r7, #24]
   1e8d6:	69fa      	ldr	r2, [r7, #28]
   1e8d8:	000b      	movs	r3, r1
   1e8da:	0f5b      	lsrs	r3, r3, #29
   1e8dc:	0010      	movs	r0, r2
   1e8de:	00c0      	lsls	r0, r0, #3
   1e8e0:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e8e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e8e4:	4318      	orrs	r0, r3
   1e8e6:	63f8      	str	r0, [r7, #60]	; 0x3c
   1e8e8:	000b      	movs	r3, r1
   1e8ea:	00db      	lsls	r3, r3, #3
   1e8ec:	63bb      	str	r3, [r7, #56]	; 0x38
   1e8ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e8f0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e8f2:	001a      	movs	r2, r3
   1e8f4:	0023      	movs	r3, r4
   1e8f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e8f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1e8fa:	4c16      	ldr	r4, [pc, #88]	; (1e954 <_sercom_get_async_baud_val+0x1bc>)
   1e8fc:	47a0      	blx	r4
   1e8fe:	0003      	movs	r3, r0
   1e900:	000c      	movs	r4, r1
   1e902:	65bb      	str	r3, [r7, #88]	; 0x58
   1e904:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1e906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1e908:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1e90a:	b2d9      	uxtb	r1, r3
   1e90c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e90e:	b2db      	uxtb	r3, r3
   1e910:	00db      	lsls	r3, r3, #3
   1e912:	b2da      	uxtb	r2, r3
   1e914:	2317      	movs	r3, #23
   1e916:	2040      	movs	r0, #64	; 0x40
   1e918:	4684      	mov	ip, r0
   1e91a:	44bc      	add	ip, r7
   1e91c:	4463      	add	r3, ip
   1e91e:	1a8a      	subs	r2, r1, r2
   1e920:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1e922:	2317      	movs	r3, #23
   1e924:	2240      	movs	r2, #64	; 0x40
   1e926:	4694      	mov	ip, r2
   1e928:	44bc      	add	ip, r7
   1e92a:	4463      	add	r3, ip
   1e92c:	781b      	ldrb	r3, [r3, #0]
   1e92e:	035b      	lsls	r3, r3, #13
   1e930:	001a      	movs	r2, r3
   1e932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e934:	4313      	orrs	r3, r2
   1e936:	67bb      	str	r3, [r7, #120]	; 0x78
   1e938:	2300      	movs	r3, #0
   1e93a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1e93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1e93e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1e940:	b29a      	uxth	r2, r3
   1e942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1e944:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1e946:	2300      	movs	r3, #0
}
   1e948:	0018      	movs	r0, r3
   1e94a:	46bd      	mov	sp, r7
   1e94c:	b021      	add	sp, #132	; 0x84
   1e94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e950:	00026925 	.word	0x00026925
   1e954:	0001e63b 	.word	0x0001e63b

0001e958 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1e958:	b580      	push	{r7, lr}
   1e95a:	b084      	sub	sp, #16
   1e95c:	af00      	add	r7, sp, #0
   1e95e:	0002      	movs	r2, r0
   1e960:	1dfb      	adds	r3, r7, #7
   1e962:	701a      	strb	r2, [r3, #0]
   1e964:	1dbb      	adds	r3, r7, #6
   1e966:	1c0a      	adds	r2, r1, #0
   1e968:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1e96a:	4b1a      	ldr	r3, [pc, #104]	; (1e9d4 <sercom_set_gclk_generator+0x7c>)
   1e96c:	781b      	ldrb	r3, [r3, #0]
   1e96e:	2201      	movs	r2, #1
   1e970:	4053      	eors	r3, r2
   1e972:	b2db      	uxtb	r3, r3
   1e974:	2b00      	cmp	r3, #0
   1e976:	d103      	bne.n	1e980 <sercom_set_gclk_generator+0x28>
   1e978:	1dbb      	adds	r3, r7, #6
   1e97a:	781b      	ldrb	r3, [r3, #0]
   1e97c:	2b00      	cmp	r3, #0
   1e97e:	d01b      	beq.n	1e9b8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e980:	230c      	movs	r3, #12
   1e982:	18fb      	adds	r3, r7, r3
   1e984:	0018      	movs	r0, r3
   1e986:	4b14      	ldr	r3, [pc, #80]	; (1e9d8 <sercom_set_gclk_generator+0x80>)
   1e988:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1e98a:	230c      	movs	r3, #12
   1e98c:	18fb      	adds	r3, r7, r3
   1e98e:	1dfa      	adds	r2, r7, #7
   1e990:	7812      	ldrb	r2, [r2, #0]
   1e992:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1e994:	230c      	movs	r3, #12
   1e996:	18fb      	adds	r3, r7, r3
   1e998:	0019      	movs	r1, r3
   1e99a:	2013      	movs	r0, #19
   1e99c:	4b0f      	ldr	r3, [pc, #60]	; (1e9dc <sercom_set_gclk_generator+0x84>)
   1e99e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1e9a0:	2013      	movs	r0, #19
   1e9a2:	4b0f      	ldr	r3, [pc, #60]	; (1e9e0 <sercom_set_gclk_generator+0x88>)
   1e9a4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1e9a6:	4b0b      	ldr	r3, [pc, #44]	; (1e9d4 <sercom_set_gclk_generator+0x7c>)
   1e9a8:	1dfa      	adds	r2, r7, #7
   1e9aa:	7812      	ldrb	r2, [r2, #0]
   1e9ac:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1e9ae:	4b09      	ldr	r3, [pc, #36]	; (1e9d4 <sercom_set_gclk_generator+0x7c>)
   1e9b0:	2201      	movs	r2, #1
   1e9b2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1e9b4:	2300      	movs	r3, #0
   1e9b6:	e008      	b.n	1e9ca <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1e9b8:	4b06      	ldr	r3, [pc, #24]	; (1e9d4 <sercom_set_gclk_generator+0x7c>)
   1e9ba:	785b      	ldrb	r3, [r3, #1]
   1e9bc:	1dfa      	adds	r2, r7, #7
   1e9be:	7812      	ldrb	r2, [r2, #0]
   1e9c0:	429a      	cmp	r2, r3
   1e9c2:	d101      	bne.n	1e9c8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1e9c4:	2300      	movs	r3, #0
   1e9c6:	e000      	b.n	1e9ca <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1e9c8:	231d      	movs	r3, #29
}
   1e9ca:	0018      	movs	r0, r3
   1e9cc:	46bd      	mov	sp, r7
   1e9ce:	b004      	add	sp, #16
   1e9d0:	bd80      	pop	{r7, pc}
   1e9d2:	46c0      	nop			; (mov r8, r8)
   1e9d4:	200002b4 	.word	0x200002b4
   1e9d8:	0001e625 	.word	0x0001e625
   1e9dc:	00024a35 	.word	0x00024a35
   1e9e0:	00024a79 	.word	0x00024a79

0001e9e4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1e9e4:	b580      	push	{r7, lr}
   1e9e6:	b082      	sub	sp, #8
   1e9e8:	af00      	add	r7, sp, #0
   1e9ea:	6078      	str	r0, [r7, #4]
   1e9ec:	000a      	movs	r2, r1
   1e9ee:	1cfb      	adds	r3, r7, #3
   1e9f0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1e9f2:	687b      	ldr	r3, [r7, #4]
   1e9f4:	4a4d      	ldr	r2, [pc, #308]	; (1eb2c <_sercom_get_default_pad+0x148>)
   1e9f6:	4293      	cmp	r3, r2
   1e9f8:	d03f      	beq.n	1ea7a <_sercom_get_default_pad+0x96>
   1e9fa:	4a4c      	ldr	r2, [pc, #304]	; (1eb2c <_sercom_get_default_pad+0x148>)
   1e9fc:	4293      	cmp	r3, r2
   1e9fe:	d806      	bhi.n	1ea0e <_sercom_get_default_pad+0x2a>
   1ea00:	4a4b      	ldr	r2, [pc, #300]	; (1eb30 <_sercom_get_default_pad+0x14c>)
   1ea02:	4293      	cmp	r3, r2
   1ea04:	d00f      	beq.n	1ea26 <_sercom_get_default_pad+0x42>
   1ea06:	4a4b      	ldr	r2, [pc, #300]	; (1eb34 <_sercom_get_default_pad+0x150>)
   1ea08:	4293      	cmp	r3, r2
   1ea0a:	d021      	beq.n	1ea50 <_sercom_get_default_pad+0x6c>
   1ea0c:	e089      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea0e:	4a4a      	ldr	r2, [pc, #296]	; (1eb38 <_sercom_get_default_pad+0x154>)
   1ea10:	4293      	cmp	r3, r2
   1ea12:	d100      	bne.n	1ea16 <_sercom_get_default_pad+0x32>
   1ea14:	e05b      	b.n	1eace <_sercom_get_default_pad+0xea>
   1ea16:	4a49      	ldr	r2, [pc, #292]	; (1eb3c <_sercom_get_default_pad+0x158>)
   1ea18:	4293      	cmp	r3, r2
   1ea1a:	d100      	bne.n	1ea1e <_sercom_get_default_pad+0x3a>
   1ea1c:	e06c      	b.n	1eaf8 <_sercom_get_default_pad+0x114>
   1ea1e:	4a48      	ldr	r2, [pc, #288]	; (1eb40 <_sercom_get_default_pad+0x15c>)
   1ea20:	4293      	cmp	r3, r2
   1ea22:	d03f      	beq.n	1eaa4 <_sercom_get_default_pad+0xc0>
   1ea24:	e07d      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1ea26:	1cfb      	adds	r3, r7, #3
   1ea28:	781b      	ldrb	r3, [r3, #0]
   1ea2a:	2b01      	cmp	r3, #1
   1ea2c:	d00a      	beq.n	1ea44 <_sercom_get_default_pad+0x60>
   1ea2e:	dc02      	bgt.n	1ea36 <_sercom_get_default_pad+0x52>
   1ea30:	2b00      	cmp	r3, #0
   1ea32:	d005      	beq.n	1ea40 <_sercom_get_default_pad+0x5c>
   1ea34:	e075      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea36:	2b02      	cmp	r3, #2
   1ea38:	d006      	beq.n	1ea48 <_sercom_get_default_pad+0x64>
   1ea3a:	2b03      	cmp	r3, #3
   1ea3c:	d006      	beq.n	1ea4c <_sercom_get_default_pad+0x68>
   1ea3e:	e070      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea40:	4b40      	ldr	r3, [pc, #256]	; (1eb44 <_sercom_get_default_pad+0x160>)
   1ea42:	e06f      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea44:	4b40      	ldr	r3, [pc, #256]	; (1eb48 <_sercom_get_default_pad+0x164>)
   1ea46:	e06d      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea48:	4b40      	ldr	r3, [pc, #256]	; (1eb4c <_sercom_get_default_pad+0x168>)
   1ea4a:	e06b      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea4c:	4b40      	ldr	r3, [pc, #256]	; (1eb50 <_sercom_get_default_pad+0x16c>)
   1ea4e:	e069      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea50:	1cfb      	adds	r3, r7, #3
   1ea52:	781b      	ldrb	r3, [r3, #0]
   1ea54:	2b01      	cmp	r3, #1
   1ea56:	d00a      	beq.n	1ea6e <_sercom_get_default_pad+0x8a>
   1ea58:	dc02      	bgt.n	1ea60 <_sercom_get_default_pad+0x7c>
   1ea5a:	2b00      	cmp	r3, #0
   1ea5c:	d005      	beq.n	1ea6a <_sercom_get_default_pad+0x86>
   1ea5e:	e060      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea60:	2b02      	cmp	r3, #2
   1ea62:	d006      	beq.n	1ea72 <_sercom_get_default_pad+0x8e>
   1ea64:	2b03      	cmp	r3, #3
   1ea66:	d006      	beq.n	1ea76 <_sercom_get_default_pad+0x92>
   1ea68:	e05b      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea6a:	2303      	movs	r3, #3
   1ea6c:	e05a      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea6e:	4b39      	ldr	r3, [pc, #228]	; (1eb54 <_sercom_get_default_pad+0x170>)
   1ea70:	e058      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea72:	4b39      	ldr	r3, [pc, #228]	; (1eb58 <_sercom_get_default_pad+0x174>)
   1ea74:	e056      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea76:	4b39      	ldr	r3, [pc, #228]	; (1eb5c <_sercom_get_default_pad+0x178>)
   1ea78:	e054      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea7a:	1cfb      	adds	r3, r7, #3
   1ea7c:	781b      	ldrb	r3, [r3, #0]
   1ea7e:	2b01      	cmp	r3, #1
   1ea80:	d00a      	beq.n	1ea98 <_sercom_get_default_pad+0xb4>
   1ea82:	dc02      	bgt.n	1ea8a <_sercom_get_default_pad+0xa6>
   1ea84:	2b00      	cmp	r3, #0
   1ea86:	d005      	beq.n	1ea94 <_sercom_get_default_pad+0xb0>
   1ea88:	e04b      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea8a:	2b02      	cmp	r3, #2
   1ea8c:	d006      	beq.n	1ea9c <_sercom_get_default_pad+0xb8>
   1ea8e:	2b03      	cmp	r3, #3
   1ea90:	d006      	beq.n	1eaa0 <_sercom_get_default_pad+0xbc>
   1ea92:	e046      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1ea94:	4b32      	ldr	r3, [pc, #200]	; (1eb60 <_sercom_get_default_pad+0x17c>)
   1ea96:	e045      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea98:	4b32      	ldr	r3, [pc, #200]	; (1eb64 <_sercom_get_default_pad+0x180>)
   1ea9a:	e043      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1ea9c:	4b32      	ldr	r3, [pc, #200]	; (1eb68 <_sercom_get_default_pad+0x184>)
   1ea9e:	e041      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaa0:	4b32      	ldr	r3, [pc, #200]	; (1eb6c <_sercom_get_default_pad+0x188>)
   1eaa2:	e03f      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaa4:	1cfb      	adds	r3, r7, #3
   1eaa6:	781b      	ldrb	r3, [r3, #0]
   1eaa8:	2b01      	cmp	r3, #1
   1eaaa:	d00a      	beq.n	1eac2 <_sercom_get_default_pad+0xde>
   1eaac:	dc02      	bgt.n	1eab4 <_sercom_get_default_pad+0xd0>
   1eaae:	2b00      	cmp	r3, #0
   1eab0:	d005      	beq.n	1eabe <_sercom_get_default_pad+0xda>
   1eab2:	e036      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1eab4:	2b02      	cmp	r3, #2
   1eab6:	d006      	beq.n	1eac6 <_sercom_get_default_pad+0xe2>
   1eab8:	2b03      	cmp	r3, #3
   1eaba:	d006      	beq.n	1eaca <_sercom_get_default_pad+0xe6>
   1eabc:	e031      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1eabe:	4b2c      	ldr	r3, [pc, #176]	; (1eb70 <_sercom_get_default_pad+0x18c>)
   1eac0:	e030      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eac2:	4b2c      	ldr	r3, [pc, #176]	; (1eb74 <_sercom_get_default_pad+0x190>)
   1eac4:	e02e      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eac6:	4b2c      	ldr	r3, [pc, #176]	; (1eb78 <_sercom_get_default_pad+0x194>)
   1eac8:	e02c      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaca:	4b2c      	ldr	r3, [pc, #176]	; (1eb7c <_sercom_get_default_pad+0x198>)
   1eacc:	e02a      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eace:	1cfb      	adds	r3, r7, #3
   1ead0:	781b      	ldrb	r3, [r3, #0]
   1ead2:	2b01      	cmp	r3, #1
   1ead4:	d00a      	beq.n	1eaec <_sercom_get_default_pad+0x108>
   1ead6:	dc02      	bgt.n	1eade <_sercom_get_default_pad+0xfa>
   1ead8:	2b00      	cmp	r3, #0
   1eada:	d005      	beq.n	1eae8 <_sercom_get_default_pad+0x104>
   1eadc:	e021      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1eade:	2b02      	cmp	r3, #2
   1eae0:	d006      	beq.n	1eaf0 <_sercom_get_default_pad+0x10c>
   1eae2:	2b03      	cmp	r3, #3
   1eae4:	d006      	beq.n	1eaf4 <_sercom_get_default_pad+0x110>
   1eae6:	e01c      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1eae8:	4b25      	ldr	r3, [pc, #148]	; (1eb80 <_sercom_get_default_pad+0x19c>)
   1eaea:	e01b      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaec:	4b25      	ldr	r3, [pc, #148]	; (1eb84 <_sercom_get_default_pad+0x1a0>)
   1eaee:	e019      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaf0:	4b25      	ldr	r3, [pc, #148]	; (1eb88 <_sercom_get_default_pad+0x1a4>)
   1eaf2:	e017      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaf4:	4b25      	ldr	r3, [pc, #148]	; (1eb8c <_sercom_get_default_pad+0x1a8>)
   1eaf6:	e015      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eaf8:	1cfb      	adds	r3, r7, #3
   1eafa:	781b      	ldrb	r3, [r3, #0]
   1eafc:	2b01      	cmp	r3, #1
   1eafe:	d00a      	beq.n	1eb16 <_sercom_get_default_pad+0x132>
   1eb00:	dc02      	bgt.n	1eb08 <_sercom_get_default_pad+0x124>
   1eb02:	2b00      	cmp	r3, #0
   1eb04:	d005      	beq.n	1eb12 <_sercom_get_default_pad+0x12e>
   1eb06:	e00c      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1eb08:	2b02      	cmp	r3, #2
   1eb0a:	d006      	beq.n	1eb1a <_sercom_get_default_pad+0x136>
   1eb0c:	2b03      	cmp	r3, #3
   1eb0e:	d006      	beq.n	1eb1e <_sercom_get_default_pad+0x13a>
   1eb10:	e007      	b.n	1eb22 <_sercom_get_default_pad+0x13e>
   1eb12:	4b1f      	ldr	r3, [pc, #124]	; (1eb90 <_sercom_get_default_pad+0x1ac>)
   1eb14:	e006      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eb16:	4b1f      	ldr	r3, [pc, #124]	; (1eb94 <_sercom_get_default_pad+0x1b0>)
   1eb18:	e004      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eb1a:	4b1f      	ldr	r3, [pc, #124]	; (1eb98 <_sercom_get_default_pad+0x1b4>)
   1eb1c:	e002      	b.n	1eb24 <_sercom_get_default_pad+0x140>
   1eb1e:	4b1f      	ldr	r3, [pc, #124]	; (1eb9c <_sercom_get_default_pad+0x1b8>)
   1eb20:	e000      	b.n	1eb24 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1eb22:	2300      	movs	r3, #0
}
   1eb24:	0018      	movs	r0, r3
   1eb26:	46bd      	mov	sp, r7
   1eb28:	b002      	add	sp, #8
   1eb2a:	bd80      	pop	{r7, pc}
   1eb2c:	42001000 	.word	0x42001000
   1eb30:	42000800 	.word	0x42000800
   1eb34:	42000c00 	.word	0x42000c00
   1eb38:	42001800 	.word	0x42001800
   1eb3c:	42001c00 	.word	0x42001c00
   1eb40:	42001400 	.word	0x42001400
   1eb44:	00040003 	.word	0x00040003
   1eb48:	00050003 	.word	0x00050003
   1eb4c:	00060003 	.word	0x00060003
   1eb50:	00070003 	.word	0x00070003
   1eb54:	00010003 	.word	0x00010003
   1eb58:	001e0003 	.word	0x001e0003
   1eb5c:	001f0003 	.word	0x001f0003
   1eb60:	00080003 	.word	0x00080003
   1eb64:	00090003 	.word	0x00090003
   1eb68:	000a0003 	.word	0x000a0003
   1eb6c:	000b0003 	.word	0x000b0003
   1eb70:	00100003 	.word	0x00100003
   1eb74:	00110003 	.word	0x00110003
   1eb78:	00120003 	.word	0x00120003
   1eb7c:	00130003 	.word	0x00130003
   1eb80:	000c0003 	.word	0x000c0003
   1eb84:	000d0003 	.word	0x000d0003
   1eb88:	000e0003 	.word	0x000e0003
   1eb8c:	000f0003 	.word	0x000f0003
   1eb90:	00160003 	.word	0x00160003
   1eb94:	00170003 	.word	0x00170003
   1eb98:	00180003 	.word	0x00180003
   1eb9c:	00190003 	.word	0x00190003

0001eba0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1eba0:	b590      	push	{r4, r7, lr}
   1eba2:	b08b      	sub	sp, #44	; 0x2c
   1eba4:	af00      	add	r7, sp, #0
   1eba6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1eba8:	230c      	movs	r3, #12
   1ebaa:	18fb      	adds	r3, r7, r3
   1ebac:	4a0f      	ldr	r2, [pc, #60]	; (1ebec <_sercom_get_sercom_inst_index+0x4c>)
   1ebae:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ebb0:	c313      	stmia	r3!, {r0, r1, r4}
   1ebb2:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ebb4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ebb6:	2300      	movs	r3, #0
   1ebb8:	627b      	str	r3, [r7, #36]	; 0x24
   1ebba:	e00e      	b.n	1ebda <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1ebbc:	230c      	movs	r3, #12
   1ebbe:	18fb      	adds	r3, r7, r3
   1ebc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ebc2:	0092      	lsls	r2, r2, #2
   1ebc4:	58d3      	ldr	r3, [r2, r3]
   1ebc6:	001a      	movs	r2, r3
   1ebc8:	687b      	ldr	r3, [r7, #4]
   1ebca:	429a      	cmp	r2, r3
   1ebcc:	d102      	bne.n	1ebd4 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebd0:	b2db      	uxtb	r3, r3
   1ebd2:	e006      	b.n	1ebe2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebd6:	3301      	adds	r3, #1
   1ebd8:	627b      	str	r3, [r7, #36]	; 0x24
   1ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebdc:	2b05      	cmp	r3, #5
   1ebde:	d9ed      	bls.n	1ebbc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1ebe0:	2300      	movs	r3, #0
}
   1ebe2:	0018      	movs	r0, r3
   1ebe4:	46bd      	mov	sp, r7
   1ebe6:	b00b      	add	sp, #44	; 0x2c
   1ebe8:	bd90      	pop	{r4, r7, pc}
   1ebea:	46c0      	nop			; (mov r8, r8)
   1ebec:	0002ab34 	.word	0x0002ab34

0001ebf0 <system_cpu_clock_get_hz>:
{
   1ebf0:	b580      	push	{r7, lr}
   1ebf2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1ebf4:	2000      	movs	r0, #0
   1ebf6:	4b05      	ldr	r3, [pc, #20]	; (1ec0c <system_cpu_clock_get_hz+0x1c>)
   1ebf8:	4798      	blx	r3
   1ebfa:	0002      	movs	r2, r0
   1ebfc:	4b04      	ldr	r3, [pc, #16]	; (1ec10 <system_cpu_clock_get_hz+0x20>)
   1ebfe:	7a1b      	ldrb	r3, [r3, #8]
   1ec00:	b2db      	uxtb	r3, r3
   1ec02:	40da      	lsrs	r2, r3
   1ec04:	0013      	movs	r3, r2
}
   1ec06:	0018      	movs	r0, r3
   1ec08:	46bd      	mov	sp, r7
   1ec0a:	bd80      	pop	{r7, pc}
   1ec0c:	0002495d 	.word	0x0002495d
   1ec10:	40000400 	.word	0x40000400

0001ec14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ec14:	b580      	push	{r7, lr}
   1ec16:	b084      	sub	sp, #16
   1ec18:	af00      	add	r7, sp, #0
   1ec1a:	60f8      	str	r0, [r7, #12]
   1ec1c:	60b9      	str	r1, [r7, #8]
   1ec1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ec20:	68fb      	ldr	r3, [r7, #12]
   1ec22:	3b04      	subs	r3, #4
   1ec24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ec26:	68fb      	ldr	r3, [r7, #12]
   1ec28:	2280      	movs	r2, #128	; 0x80
   1ec2a:	0452      	lsls	r2, r2, #17
   1ec2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ec2e:	68fb      	ldr	r3, [r7, #12]
   1ec30:	3b04      	subs	r3, #4
   1ec32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ec34:	68ba      	ldr	r2, [r7, #8]
   1ec36:	68fb      	ldr	r3, [r7, #12]
   1ec38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ec3a:	68fb      	ldr	r3, [r7, #12]
   1ec3c:	3b04      	subs	r3, #4
   1ec3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ec40:	4a08      	ldr	r2, [pc, #32]	; (1ec64 <pxPortInitialiseStack+0x50>)
   1ec42:	68fb      	ldr	r3, [r7, #12]
   1ec44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ec46:	68fb      	ldr	r3, [r7, #12]
   1ec48:	3b14      	subs	r3, #20
   1ec4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ec4c:	687a      	ldr	r2, [r7, #4]
   1ec4e:	68fb      	ldr	r3, [r7, #12]
   1ec50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ec52:	68fb      	ldr	r3, [r7, #12]
   1ec54:	3b20      	subs	r3, #32
   1ec56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ec58:	68fb      	ldr	r3, [r7, #12]
}
   1ec5a:	0018      	movs	r0, r3
   1ec5c:	46bd      	mov	sp, r7
   1ec5e:	b004      	add	sp, #16
   1ec60:	bd80      	pop	{r7, pc}
   1ec62:	46c0      	nop			; (mov r8, r8)
   1ec64:	0001ec69 	.word	0x0001ec69

0001ec68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ec68:	b580      	push	{r7, lr}
   1ec6a:	b082      	sub	sp, #8
   1ec6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ec6e:	2300      	movs	r3, #0
   1ec70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ec72:	4b07      	ldr	r3, [pc, #28]	; (1ec90 <prvTaskExitError+0x28>)
   1ec74:	681b      	ldr	r3, [r3, #0]
   1ec76:	3301      	adds	r3, #1
   1ec78:	d001      	beq.n	1ec7e <prvTaskExitError+0x16>
   1ec7a:	b672      	cpsid	i
   1ec7c:	e7fe      	b.n	1ec7c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ec7e:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ec80:	46c0      	nop			; (mov r8, r8)
   1ec82:	687b      	ldr	r3, [r7, #4]
   1ec84:	2b00      	cmp	r3, #0
   1ec86:	d0fc      	beq.n	1ec82 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ec88:	46c0      	nop			; (mov r8, r8)
   1ec8a:	46bd      	mov	sp, r7
   1ec8c:	b002      	add	sp, #8
   1ec8e:	bd80      	pop	{r7, pc}
   1ec90:	20000010 	.word	0x20000010

0001ec94 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ec94:	b580      	push	{r7, lr}
   1ec96:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ec98:	46c0      	nop			; (mov r8, r8)
   1ec9a:	46bd      	mov	sp, r7
   1ec9c:	bd80      	pop	{r7, pc}
	...

0001eca0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1eca0:	4a0b      	ldr	r2, [pc, #44]	; (1ecd0 <pxCurrentTCBConst2>)
   1eca2:	6813      	ldr	r3, [r2, #0]
   1eca4:	6818      	ldr	r0, [r3, #0]
   1eca6:	3020      	adds	r0, #32
   1eca8:	f380 8809 	msr	PSP, r0
   1ecac:	2002      	movs	r0, #2
   1ecae:	f380 8814 	msr	CONTROL, r0
   1ecb2:	f3bf 8f6f 	isb	sy
   1ecb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ecb8:	46ae      	mov	lr, r5
   1ecba:	bc08      	pop	{r3}
   1ecbc:	bc04      	pop	{r2}
   1ecbe:	b662      	cpsie	i
   1ecc0:	4718      	bx	r3
   1ecc2:	46c0      	nop			; (mov r8, r8)
   1ecc4:	46c0      	nop			; (mov r8, r8)
   1ecc6:	46c0      	nop			; (mov r8, r8)
   1ecc8:	46c0      	nop			; (mov r8, r8)
   1ecca:	46c0      	nop			; (mov r8, r8)
   1eccc:	46c0      	nop			; (mov r8, r8)
   1ecce:	46c0      	nop			; (mov r8, r8)

0001ecd0 <pxCurrentTCBConst2>:
   1ecd0:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ecd4:	46c0      	nop			; (mov r8, r8)
   1ecd6:	46c0      	nop			; (mov r8, r8)

0001ecd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ecd8:	b580      	push	{r7, lr}
   1ecda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ecdc:	4b0e      	ldr	r3, [pc, #56]	; (1ed18 <xPortStartScheduler+0x40>)
   1ecde:	4a0e      	ldr	r2, [pc, #56]	; (1ed18 <xPortStartScheduler+0x40>)
   1ece0:	6812      	ldr	r2, [r2, #0]
   1ece2:	21ff      	movs	r1, #255	; 0xff
   1ece4:	0409      	lsls	r1, r1, #16
   1ece6:	430a      	orrs	r2, r1
   1ece8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ecea:	4b0b      	ldr	r3, [pc, #44]	; (1ed18 <xPortStartScheduler+0x40>)
   1ecec:	4a0a      	ldr	r2, [pc, #40]	; (1ed18 <xPortStartScheduler+0x40>)
   1ecee:	6812      	ldr	r2, [r2, #0]
   1ecf0:	21ff      	movs	r1, #255	; 0xff
   1ecf2:	0609      	lsls	r1, r1, #24
   1ecf4:	430a      	orrs	r2, r1
   1ecf6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ecf8:	4b08      	ldr	r3, [pc, #32]	; (1ed1c <xPortStartScheduler+0x44>)
   1ecfa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ecfc:	4b08      	ldr	r3, [pc, #32]	; (1ed20 <xPortStartScheduler+0x48>)
   1ecfe:	2200      	movs	r2, #0
   1ed00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ed02:	4b08      	ldr	r3, [pc, #32]	; (1ed24 <xPortStartScheduler+0x4c>)
   1ed04:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ed06:	4b08      	ldr	r3, [pc, #32]	; (1ed28 <xPortStartScheduler+0x50>)
   1ed08:	4798      	blx	r3
	prvTaskExitError();
   1ed0a:	4b08      	ldr	r3, [pc, #32]	; (1ed2c <xPortStartScheduler+0x54>)
   1ed0c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ed0e:	2300      	movs	r3, #0
}
   1ed10:	0018      	movs	r0, r3
   1ed12:	46bd      	mov	sp, r7
   1ed14:	bd80      	pop	{r7, pc}
   1ed16:	46c0      	nop			; (mov r8, r8)
   1ed18:	e000ed20 	.word	0xe000ed20
   1ed1c:	0001ee49 	.word	0x0001ee49
   1ed20:	20000010 	.word	0x20000010
   1ed24:	0001eca1 	.word	0x0001eca1
   1ed28:	0002047d 	.word	0x0002047d
   1ed2c:	0001ec69 	.word	0x0001ec69

0001ed30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1ed30:	b580      	push	{r7, lr}
   1ed32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1ed34:	4b05      	ldr	r3, [pc, #20]	; (1ed4c <vPortYield+0x1c>)
   1ed36:	2280      	movs	r2, #128	; 0x80
   1ed38:	0552      	lsls	r2, r2, #21
   1ed3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1ed3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ed40:	f3bf 8f6f 	isb	sy
}
   1ed44:	46c0      	nop			; (mov r8, r8)
   1ed46:	46bd      	mov	sp, r7
   1ed48:	bd80      	pop	{r7, pc}
   1ed4a:	46c0      	nop			; (mov r8, r8)
   1ed4c:	e000ed04 	.word	0xe000ed04

0001ed50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1ed50:	b580      	push	{r7, lr}
   1ed52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1ed54:	b672      	cpsid	i
    uxCriticalNesting++;
   1ed56:	4b06      	ldr	r3, [pc, #24]	; (1ed70 <vPortEnterCritical+0x20>)
   1ed58:	681b      	ldr	r3, [r3, #0]
   1ed5a:	1c5a      	adds	r2, r3, #1
   1ed5c:	4b04      	ldr	r3, [pc, #16]	; (1ed70 <vPortEnterCritical+0x20>)
   1ed5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ed60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ed64:	f3bf 8f6f 	isb	sy
}
   1ed68:	46c0      	nop			; (mov r8, r8)
   1ed6a:	46bd      	mov	sp, r7
   1ed6c:	bd80      	pop	{r7, pc}
   1ed6e:	46c0      	nop			; (mov r8, r8)
   1ed70:	20000010 	.word	0x20000010

0001ed74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1ed74:	b580      	push	{r7, lr}
   1ed76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1ed78:	4b09      	ldr	r3, [pc, #36]	; (1eda0 <vPortExitCritical+0x2c>)
   1ed7a:	681b      	ldr	r3, [r3, #0]
   1ed7c:	2b00      	cmp	r3, #0
   1ed7e:	d101      	bne.n	1ed84 <vPortExitCritical+0x10>
   1ed80:	b672      	cpsid	i
   1ed82:	e7fe      	b.n	1ed82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ed84:	4b06      	ldr	r3, [pc, #24]	; (1eda0 <vPortExitCritical+0x2c>)
   1ed86:	681b      	ldr	r3, [r3, #0]
   1ed88:	1e5a      	subs	r2, r3, #1
   1ed8a:	4b05      	ldr	r3, [pc, #20]	; (1eda0 <vPortExitCritical+0x2c>)
   1ed8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ed8e:	4b04      	ldr	r3, [pc, #16]	; (1eda0 <vPortExitCritical+0x2c>)
   1ed90:	681b      	ldr	r3, [r3, #0]
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	d100      	bne.n	1ed98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ed96:	b662      	cpsie	i
    }
}
   1ed98:	46c0      	nop			; (mov r8, r8)
   1ed9a:	46bd      	mov	sp, r7
   1ed9c:	bd80      	pop	{r7, pc}
   1ed9e:	46c0      	nop			; (mov r8, r8)
   1eda0:	20000010 	.word	0x20000010

0001eda4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1eda4:	f3ef 8010 	mrs	r0, PRIMASK
   1eda8:	b672      	cpsid	i
   1edaa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1edac:	46c0      	nop			; (mov r8, r8)
   1edae:	0018      	movs	r0, r3

0001edb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1edb0:	f380 8810 	msr	PRIMASK, r0
   1edb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1edb6:	46c0      	nop			; (mov r8, r8)
	...

0001edc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1edc0:	f3ef 8009 	mrs	r0, PSP
   1edc4:	4b0e      	ldr	r3, [pc, #56]	; (1ee00 <pxCurrentTCBConst>)
   1edc6:	681a      	ldr	r2, [r3, #0]
   1edc8:	3820      	subs	r0, #32
   1edca:	6010      	str	r0, [r2, #0]
   1edcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1edce:	4644      	mov	r4, r8
   1edd0:	464d      	mov	r5, r9
   1edd2:	4656      	mov	r6, sl
   1edd4:	465f      	mov	r7, fp
   1edd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1edd8:	b508      	push	{r3, lr}
   1edda:	b672      	cpsid	i
   1eddc:	f001 fb4e 	bl	2047c <vTaskSwitchContext>
   1ede0:	b662      	cpsie	i
   1ede2:	bc0c      	pop	{r2, r3}
   1ede4:	6811      	ldr	r1, [r2, #0]
   1ede6:	6808      	ldr	r0, [r1, #0]
   1ede8:	3010      	adds	r0, #16
   1edea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1edec:	46a0      	mov	r8, r4
   1edee:	46a9      	mov	r9, r5
   1edf0:	46b2      	mov	sl, r6
   1edf2:	46bb      	mov	fp, r7
   1edf4:	f380 8809 	msr	PSP, r0
   1edf8:	3820      	subs	r0, #32
   1edfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1edfc:	4718      	bx	r3
   1edfe:	46c0      	nop			; (mov r8, r8)

0001ee00 <pxCurrentTCBConst>:
   1ee00:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ee04:	46c0      	nop			; (mov r8, r8)
   1ee06:	46c0      	nop			; (mov r8, r8)

0001ee08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ee08:	b580      	push	{r7, lr}
   1ee0a:	b082      	sub	sp, #8
   1ee0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ee0e:	4b0a      	ldr	r3, [pc, #40]	; (1ee38 <SysTick_Handler+0x30>)
   1ee10:	4798      	blx	r3
   1ee12:	0003      	movs	r3, r0
   1ee14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ee16:	4b09      	ldr	r3, [pc, #36]	; (1ee3c <SysTick_Handler+0x34>)
   1ee18:	4798      	blx	r3
   1ee1a:	1e03      	subs	r3, r0, #0
   1ee1c:	d003      	beq.n	1ee26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ee1e:	4b08      	ldr	r3, [pc, #32]	; (1ee40 <SysTick_Handler+0x38>)
   1ee20:	2280      	movs	r2, #128	; 0x80
   1ee22:	0552      	lsls	r2, r2, #21
   1ee24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1ee26:	687b      	ldr	r3, [r7, #4]
   1ee28:	0018      	movs	r0, r3
   1ee2a:	4b06      	ldr	r3, [pc, #24]	; (1ee44 <SysTick_Handler+0x3c>)
   1ee2c:	4798      	blx	r3
}
   1ee2e:	46c0      	nop			; (mov r8, r8)
   1ee30:	46bd      	mov	sp, r7
   1ee32:	b002      	add	sp, #8
   1ee34:	bd80      	pop	{r7, pc}
   1ee36:	46c0      	nop			; (mov r8, r8)
   1ee38:	0001eda5 	.word	0x0001eda5
   1ee3c:	00020309 	.word	0x00020309
   1ee40:	e000ed04 	.word	0xe000ed04
   1ee44:	0001edb1 	.word	0x0001edb1

0001ee48 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1ee48:	b5b0      	push	{r4, r5, r7, lr}
   1ee4a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1ee4c:	4b0a      	ldr	r3, [pc, #40]	; (1ee78 <prvSetupTimerInterrupt+0x30>)
   1ee4e:	2200      	movs	r2, #0
   1ee50:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1ee52:	4b0a      	ldr	r3, [pc, #40]	; (1ee7c <prvSetupTimerInterrupt+0x34>)
   1ee54:	2200      	movs	r2, #0
   1ee56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1ee58:	4c09      	ldr	r4, [pc, #36]	; (1ee80 <prvSetupTimerInterrupt+0x38>)
   1ee5a:	4b0a      	ldr	r3, [pc, #40]	; (1ee84 <prvSetupTimerInterrupt+0x3c>)
   1ee5c:	4798      	blx	r3
   1ee5e:	4b0a      	ldr	r3, [pc, #40]	; (1ee88 <prvSetupTimerInterrupt+0x40>)
   1ee60:	22fa      	movs	r2, #250	; 0xfa
   1ee62:	0091      	lsls	r1, r2, #2
   1ee64:	4798      	blx	r3
   1ee66:	0003      	movs	r3, r0
   1ee68:	3b01      	subs	r3, #1
   1ee6a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1ee6c:	4b02      	ldr	r3, [pc, #8]	; (1ee78 <prvSetupTimerInterrupt+0x30>)
   1ee6e:	2207      	movs	r2, #7
   1ee70:	601a      	str	r2, [r3, #0]
}
   1ee72:	46c0      	nop			; (mov r8, r8)
   1ee74:	46bd      	mov	sp, r7
   1ee76:	bdb0      	pop	{r4, r5, r7, pc}
   1ee78:	e000e010 	.word	0xe000e010
   1ee7c:	e000e018 	.word	0xe000e018
   1ee80:	e000e014 	.word	0xe000e014
   1ee84:	0001ebf1 	.word	0x0001ebf1
   1ee88:	0002657d 	.word	0x0002657d

0001ee8c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ee8c:	b580      	push	{r7, lr}
   1ee8e:	b084      	sub	sp, #16
   1ee90:	af00      	add	r7, sp, #0
   1ee92:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1ee94:	4b07      	ldr	r3, [pc, #28]	; (1eeb4 <pvPortMalloc+0x28>)
   1ee96:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1ee98:	687b      	ldr	r3, [r7, #4]
   1ee9a:	0018      	movs	r0, r3
   1ee9c:	4b06      	ldr	r3, [pc, #24]	; (1eeb8 <pvPortMalloc+0x2c>)
   1ee9e:	4798      	blx	r3
   1eea0:	0003      	movs	r3, r0
   1eea2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1eea4:	4b05      	ldr	r3, [pc, #20]	; (1eebc <pvPortMalloc+0x30>)
   1eea6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1eea8:	68fb      	ldr	r3, [r7, #12]
}
   1eeaa:	0018      	movs	r0, r3
   1eeac:	46bd      	mov	sp, r7
   1eeae:	b004      	add	sp, #16
   1eeb0:	bd80      	pop	{r7, pc}
   1eeb2:	46c0      	nop			; (mov r8, r8)
   1eeb4:	00020181 	.word	0x00020181
   1eeb8:	00028e11 	.word	0x00028e11
   1eebc:	00020199 	.word	0x00020199

0001eec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1eec0:	b580      	push	{r7, lr}
   1eec2:	b082      	sub	sp, #8
   1eec4:	af00      	add	r7, sp, #0
   1eec6:	6078      	str	r0, [r7, #4]
	if( pv )
   1eec8:	687b      	ldr	r3, [r7, #4]
   1eeca:	2b00      	cmp	r3, #0
   1eecc:	d007      	beq.n	1eede <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1eece:	4b06      	ldr	r3, [pc, #24]	; (1eee8 <vPortFree+0x28>)
   1eed0:	4798      	blx	r3
		{
			free( pv );
   1eed2:	687b      	ldr	r3, [r7, #4]
   1eed4:	0018      	movs	r0, r3
   1eed6:	4b05      	ldr	r3, [pc, #20]	; (1eeec <vPortFree+0x2c>)
   1eed8:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1eeda:	4b05      	ldr	r3, [pc, #20]	; (1eef0 <vPortFree+0x30>)
   1eedc:	4798      	blx	r3
	}
}
   1eede:	46c0      	nop			; (mov r8, r8)
   1eee0:	46bd      	mov	sp, r7
   1eee2:	b002      	add	sp, #8
   1eee4:	bd80      	pop	{r7, pc}
   1eee6:	46c0      	nop			; (mov r8, r8)
   1eee8:	00020181 	.word	0x00020181
   1eeec:	00028e25 	.word	0x00028e25
   1eef0:	00020199 	.word	0x00020199

0001eef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1eef4:	b580      	push	{r7, lr}
   1eef6:	b082      	sub	sp, #8
   1eef8:	af00      	add	r7, sp, #0
   1eefa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1eefc:	687b      	ldr	r3, [r7, #4]
   1eefe:	3308      	adds	r3, #8
   1ef00:	001a      	movs	r2, r3
   1ef02:	687b      	ldr	r3, [r7, #4]
   1ef04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ef06:	687b      	ldr	r3, [r7, #4]
   1ef08:	2201      	movs	r2, #1
   1ef0a:	4252      	negs	r2, r2
   1ef0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ef0e:	687b      	ldr	r3, [r7, #4]
   1ef10:	3308      	adds	r3, #8
   1ef12:	001a      	movs	r2, r3
   1ef14:	687b      	ldr	r3, [r7, #4]
   1ef16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ef18:	687b      	ldr	r3, [r7, #4]
   1ef1a:	3308      	adds	r3, #8
   1ef1c:	001a      	movs	r2, r3
   1ef1e:	687b      	ldr	r3, [r7, #4]
   1ef20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ef22:	687b      	ldr	r3, [r7, #4]
   1ef24:	2200      	movs	r2, #0
   1ef26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ef28:	46c0      	nop			; (mov r8, r8)
   1ef2a:	46bd      	mov	sp, r7
   1ef2c:	b002      	add	sp, #8
   1ef2e:	bd80      	pop	{r7, pc}

0001ef30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1ef30:	b580      	push	{r7, lr}
   1ef32:	b082      	sub	sp, #8
   1ef34:	af00      	add	r7, sp, #0
   1ef36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1ef38:	687b      	ldr	r3, [r7, #4]
   1ef3a:	2200      	movs	r2, #0
   1ef3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1ef3e:	46c0      	nop			; (mov r8, r8)
   1ef40:	46bd      	mov	sp, r7
   1ef42:	b002      	add	sp, #8
   1ef44:	bd80      	pop	{r7, pc}

0001ef46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ef46:	b580      	push	{r7, lr}
   1ef48:	b084      	sub	sp, #16
   1ef4a:	af00      	add	r7, sp, #0
   1ef4c:	6078      	str	r0, [r7, #4]
   1ef4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ef50:	687b      	ldr	r3, [r7, #4]
   1ef52:	685b      	ldr	r3, [r3, #4]
   1ef54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ef56:	683b      	ldr	r3, [r7, #0]
   1ef58:	68fa      	ldr	r2, [r7, #12]
   1ef5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ef5c:	68fb      	ldr	r3, [r7, #12]
   1ef5e:	689a      	ldr	r2, [r3, #8]
   1ef60:	683b      	ldr	r3, [r7, #0]
   1ef62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ef64:	68fb      	ldr	r3, [r7, #12]
   1ef66:	689b      	ldr	r3, [r3, #8]
   1ef68:	683a      	ldr	r2, [r7, #0]
   1ef6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ef6c:	68fb      	ldr	r3, [r7, #12]
   1ef6e:	683a      	ldr	r2, [r7, #0]
   1ef70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ef72:	683b      	ldr	r3, [r7, #0]
   1ef74:	687a      	ldr	r2, [r7, #4]
   1ef76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ef78:	687b      	ldr	r3, [r7, #4]
   1ef7a:	681b      	ldr	r3, [r3, #0]
   1ef7c:	1c5a      	adds	r2, r3, #1
   1ef7e:	687b      	ldr	r3, [r7, #4]
   1ef80:	601a      	str	r2, [r3, #0]
}
   1ef82:	46c0      	nop			; (mov r8, r8)
   1ef84:	46bd      	mov	sp, r7
   1ef86:	b004      	add	sp, #16
   1ef88:	bd80      	pop	{r7, pc}

0001ef8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ef8a:	b580      	push	{r7, lr}
   1ef8c:	b084      	sub	sp, #16
   1ef8e:	af00      	add	r7, sp, #0
   1ef90:	6078      	str	r0, [r7, #4]
   1ef92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1ef94:	683b      	ldr	r3, [r7, #0]
   1ef96:	681b      	ldr	r3, [r3, #0]
   1ef98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1ef9a:	68bb      	ldr	r3, [r7, #8]
   1ef9c:	3301      	adds	r3, #1
   1ef9e:	d103      	bne.n	1efa8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1efa0:	687b      	ldr	r3, [r7, #4]
   1efa2:	691b      	ldr	r3, [r3, #16]
   1efa4:	60fb      	str	r3, [r7, #12]
   1efa6:	e00c      	b.n	1efc2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1efa8:	687b      	ldr	r3, [r7, #4]
   1efaa:	3308      	adds	r3, #8
   1efac:	60fb      	str	r3, [r7, #12]
   1efae:	e002      	b.n	1efb6 <vListInsert+0x2c>
   1efb0:	68fb      	ldr	r3, [r7, #12]
   1efb2:	685b      	ldr	r3, [r3, #4]
   1efb4:	60fb      	str	r3, [r7, #12]
   1efb6:	68fb      	ldr	r3, [r7, #12]
   1efb8:	685b      	ldr	r3, [r3, #4]
   1efba:	681a      	ldr	r2, [r3, #0]
   1efbc:	68bb      	ldr	r3, [r7, #8]
   1efbe:	429a      	cmp	r2, r3
   1efc0:	d9f6      	bls.n	1efb0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1efc2:	68fb      	ldr	r3, [r7, #12]
   1efc4:	685a      	ldr	r2, [r3, #4]
   1efc6:	683b      	ldr	r3, [r7, #0]
   1efc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1efca:	683b      	ldr	r3, [r7, #0]
   1efcc:	685b      	ldr	r3, [r3, #4]
   1efce:	683a      	ldr	r2, [r7, #0]
   1efd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1efd2:	683b      	ldr	r3, [r7, #0]
   1efd4:	68fa      	ldr	r2, [r7, #12]
   1efd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1efd8:	68fb      	ldr	r3, [r7, #12]
   1efda:	683a      	ldr	r2, [r7, #0]
   1efdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1efde:	683b      	ldr	r3, [r7, #0]
   1efe0:	687a      	ldr	r2, [r7, #4]
   1efe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1efe4:	687b      	ldr	r3, [r7, #4]
   1efe6:	681b      	ldr	r3, [r3, #0]
   1efe8:	1c5a      	adds	r2, r3, #1
   1efea:	687b      	ldr	r3, [r7, #4]
   1efec:	601a      	str	r2, [r3, #0]
}
   1efee:	46c0      	nop			; (mov r8, r8)
   1eff0:	46bd      	mov	sp, r7
   1eff2:	b004      	add	sp, #16
   1eff4:	bd80      	pop	{r7, pc}

0001eff6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1eff6:	b580      	push	{r7, lr}
   1eff8:	b084      	sub	sp, #16
   1effa:	af00      	add	r7, sp, #0
   1effc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1effe:	687b      	ldr	r3, [r7, #4]
   1f000:	691b      	ldr	r3, [r3, #16]
   1f002:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1f004:	687b      	ldr	r3, [r7, #4]
   1f006:	685b      	ldr	r3, [r3, #4]
   1f008:	687a      	ldr	r2, [r7, #4]
   1f00a:	6892      	ldr	r2, [r2, #8]
   1f00c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1f00e:	687b      	ldr	r3, [r7, #4]
   1f010:	689b      	ldr	r3, [r3, #8]
   1f012:	687a      	ldr	r2, [r7, #4]
   1f014:	6852      	ldr	r2, [r2, #4]
   1f016:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1f018:	68fb      	ldr	r3, [r7, #12]
   1f01a:	685a      	ldr	r2, [r3, #4]
   1f01c:	687b      	ldr	r3, [r7, #4]
   1f01e:	429a      	cmp	r2, r3
   1f020:	d103      	bne.n	1f02a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1f022:	687b      	ldr	r3, [r7, #4]
   1f024:	689a      	ldr	r2, [r3, #8]
   1f026:	68fb      	ldr	r3, [r7, #12]
   1f028:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1f02a:	687b      	ldr	r3, [r7, #4]
   1f02c:	2200      	movs	r2, #0
   1f02e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1f030:	68fb      	ldr	r3, [r7, #12]
   1f032:	681b      	ldr	r3, [r3, #0]
   1f034:	1e5a      	subs	r2, r3, #1
   1f036:	68fb      	ldr	r3, [r7, #12]
   1f038:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1f03a:	68fb      	ldr	r3, [r7, #12]
   1f03c:	681b      	ldr	r3, [r3, #0]
}
   1f03e:	0018      	movs	r0, r3
   1f040:	46bd      	mov	sp, r7
   1f042:	b004      	add	sp, #16
   1f044:	bd80      	pop	{r7, pc}
	...

0001f048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1f048:	b580      	push	{r7, lr}
   1f04a:	b084      	sub	sp, #16
   1f04c:	af00      	add	r7, sp, #0
   1f04e:	6078      	str	r0, [r7, #4]
   1f050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f052:	687b      	ldr	r3, [r7, #4]
   1f054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1f056:	68fb      	ldr	r3, [r7, #12]
   1f058:	2b00      	cmp	r3, #0
   1f05a:	d101      	bne.n	1f060 <xQueueGenericReset+0x18>
   1f05c:	b672      	cpsid	i
   1f05e:	e7fe      	b.n	1f05e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1f060:	4b23      	ldr	r3, [pc, #140]	; (1f0f0 <xQueueGenericReset+0xa8>)
   1f062:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1f064:	68fb      	ldr	r3, [r7, #12]
   1f066:	681a      	ldr	r2, [r3, #0]
   1f068:	68fb      	ldr	r3, [r7, #12]
   1f06a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1f06c:	68fb      	ldr	r3, [r7, #12]
   1f06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f070:	434b      	muls	r3, r1
   1f072:	18d2      	adds	r2, r2, r3
   1f074:	68fb      	ldr	r3, [r7, #12]
   1f076:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1f078:	68fb      	ldr	r3, [r7, #12]
   1f07a:	2200      	movs	r2, #0
   1f07c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1f07e:	68fb      	ldr	r3, [r7, #12]
   1f080:	681a      	ldr	r2, [r3, #0]
   1f082:	68fb      	ldr	r3, [r7, #12]
   1f084:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1f086:	68fb      	ldr	r3, [r7, #12]
   1f088:	681a      	ldr	r2, [r3, #0]
   1f08a:	68fb      	ldr	r3, [r7, #12]
   1f08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f08e:	1e59      	subs	r1, r3, #1
   1f090:	68fb      	ldr	r3, [r7, #12]
   1f092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f094:	434b      	muls	r3, r1
   1f096:	18d2      	adds	r2, r2, r3
   1f098:	68fb      	ldr	r3, [r7, #12]
   1f09a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1f09c:	68fb      	ldr	r3, [r7, #12]
   1f09e:	2244      	movs	r2, #68	; 0x44
   1f0a0:	21ff      	movs	r1, #255	; 0xff
   1f0a2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1f0a4:	68fb      	ldr	r3, [r7, #12]
   1f0a6:	2245      	movs	r2, #69	; 0x45
   1f0a8:	21ff      	movs	r1, #255	; 0xff
   1f0aa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1f0ac:	683b      	ldr	r3, [r7, #0]
   1f0ae:	2b00      	cmp	r3, #0
   1f0b0:	d10d      	bne.n	1f0ce <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f0b2:	68fb      	ldr	r3, [r7, #12]
   1f0b4:	691b      	ldr	r3, [r3, #16]
   1f0b6:	2b00      	cmp	r3, #0
   1f0b8:	d013      	beq.n	1f0e2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f0ba:	68fb      	ldr	r3, [r7, #12]
   1f0bc:	3310      	adds	r3, #16
   1f0be:	0018      	movs	r0, r3
   1f0c0:	4b0c      	ldr	r3, [pc, #48]	; (1f0f4 <xQueueGenericReset+0xac>)
   1f0c2:	4798      	blx	r3
   1f0c4:	1e03      	subs	r3, r0, #0
   1f0c6:	d00c      	beq.n	1f0e2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1f0c8:	4b0b      	ldr	r3, [pc, #44]	; (1f0f8 <xQueueGenericReset+0xb0>)
   1f0ca:	4798      	blx	r3
   1f0cc:	e009      	b.n	1f0e2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1f0ce:	68fb      	ldr	r3, [r7, #12]
   1f0d0:	3310      	adds	r3, #16
   1f0d2:	0018      	movs	r0, r3
   1f0d4:	4b09      	ldr	r3, [pc, #36]	; (1f0fc <xQueueGenericReset+0xb4>)
   1f0d6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1f0d8:	68fb      	ldr	r3, [r7, #12]
   1f0da:	3324      	adds	r3, #36	; 0x24
   1f0dc:	0018      	movs	r0, r3
   1f0de:	4b07      	ldr	r3, [pc, #28]	; (1f0fc <xQueueGenericReset+0xb4>)
   1f0e0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1f0e2:	4b07      	ldr	r3, [pc, #28]	; (1f100 <xQueueGenericReset+0xb8>)
   1f0e4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1f0e6:	2301      	movs	r3, #1
}
   1f0e8:	0018      	movs	r0, r3
   1f0ea:	46bd      	mov	sp, r7
   1f0ec:	b004      	add	sp, #16
   1f0ee:	bd80      	pop	{r7, pc}
   1f0f0:	0001ed51 	.word	0x0001ed51
   1f0f4:	000205b9 	.word	0x000205b9
   1f0f8:	0001ed31 	.word	0x0001ed31
   1f0fc:	0001eef5 	.word	0x0001eef5
   1f100:	0001ed75 	.word	0x0001ed75

0001f104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1f104:	b590      	push	{r4, r7, lr}
   1f106:	b08b      	sub	sp, #44	; 0x2c
   1f108:	af02      	add	r7, sp, #8
   1f10a:	60f8      	str	r0, [r7, #12]
   1f10c:	60b9      	str	r1, [r7, #8]
   1f10e:	1dfb      	adds	r3, r7, #7
   1f110:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1f112:	68fb      	ldr	r3, [r7, #12]
   1f114:	2b00      	cmp	r3, #0
   1f116:	d101      	bne.n	1f11c <xQueueGenericCreate+0x18>
   1f118:	b672      	cpsid	i
   1f11a:	e7fe      	b.n	1f11a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1f11c:	68bb      	ldr	r3, [r7, #8]
   1f11e:	2b00      	cmp	r3, #0
   1f120:	d102      	bne.n	1f128 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1f122:	2300      	movs	r3, #0
   1f124:	61fb      	str	r3, [r7, #28]
   1f126:	e003      	b.n	1f130 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f128:	68fb      	ldr	r3, [r7, #12]
   1f12a:	68ba      	ldr	r2, [r7, #8]
   1f12c:	4353      	muls	r3, r2
   1f12e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1f130:	69fb      	ldr	r3, [r7, #28]
   1f132:	334c      	adds	r3, #76	; 0x4c
   1f134:	0018      	movs	r0, r3
   1f136:	4b0c      	ldr	r3, [pc, #48]	; (1f168 <xQueueGenericCreate+0x64>)
   1f138:	4798      	blx	r3
   1f13a:	0003      	movs	r3, r0
   1f13c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1f13e:	69bb      	ldr	r3, [r7, #24]
   1f140:	2b00      	cmp	r3, #0
   1f142:	d00c      	beq.n	1f15e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1f144:	69bb      	ldr	r3, [r7, #24]
   1f146:	334c      	adds	r3, #76	; 0x4c
   1f148:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1f14a:	1dfb      	adds	r3, r7, #7
   1f14c:	781c      	ldrb	r4, [r3, #0]
   1f14e:	697a      	ldr	r2, [r7, #20]
   1f150:	68b9      	ldr	r1, [r7, #8]
   1f152:	68f8      	ldr	r0, [r7, #12]
   1f154:	69bb      	ldr	r3, [r7, #24]
   1f156:	9300      	str	r3, [sp, #0]
   1f158:	0023      	movs	r3, r4
   1f15a:	4c04      	ldr	r4, [pc, #16]	; (1f16c <xQueueGenericCreate+0x68>)
   1f15c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1f15e:	69bb      	ldr	r3, [r7, #24]
	}
   1f160:	0018      	movs	r0, r3
   1f162:	46bd      	mov	sp, r7
   1f164:	b009      	add	sp, #36	; 0x24
   1f166:	bd90      	pop	{r4, r7, pc}
   1f168:	0001ee8d 	.word	0x0001ee8d
   1f16c:	0001f171 	.word	0x0001f171

0001f170 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1f170:	b580      	push	{r7, lr}
   1f172:	b084      	sub	sp, #16
   1f174:	af00      	add	r7, sp, #0
   1f176:	60f8      	str	r0, [r7, #12]
   1f178:	60b9      	str	r1, [r7, #8]
   1f17a:	607a      	str	r2, [r7, #4]
   1f17c:	001a      	movs	r2, r3
   1f17e:	1cfb      	adds	r3, r7, #3
   1f180:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1f182:	68bb      	ldr	r3, [r7, #8]
   1f184:	2b00      	cmp	r3, #0
   1f186:	d103      	bne.n	1f190 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1f188:	69bb      	ldr	r3, [r7, #24]
   1f18a:	69ba      	ldr	r2, [r7, #24]
   1f18c:	601a      	str	r2, [r3, #0]
   1f18e:	e002      	b.n	1f196 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1f190:	69bb      	ldr	r3, [r7, #24]
   1f192:	687a      	ldr	r2, [r7, #4]
   1f194:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1f196:	69bb      	ldr	r3, [r7, #24]
   1f198:	68fa      	ldr	r2, [r7, #12]
   1f19a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1f19c:	69bb      	ldr	r3, [r7, #24]
   1f19e:	68ba      	ldr	r2, [r7, #8]
   1f1a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1f1a2:	69bb      	ldr	r3, [r7, #24]
   1f1a4:	2101      	movs	r1, #1
   1f1a6:	0018      	movs	r0, r3
   1f1a8:	4b04      	ldr	r3, [pc, #16]	; (1f1bc <prvInitialiseNewQueue+0x4c>)
   1f1aa:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1f1ac:	69bb      	ldr	r3, [r7, #24]
   1f1ae:	2200      	movs	r2, #0
   1f1b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1f1b2:	46c0      	nop			; (mov r8, r8)
   1f1b4:	46bd      	mov	sp, r7
   1f1b6:	b004      	add	sp, #16
   1f1b8:	bd80      	pop	{r7, pc}
   1f1ba:	46c0      	nop			; (mov r8, r8)
   1f1bc:	0001f049 	.word	0x0001f049

0001f1c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1f1c0:	b580      	push	{r7, lr}
   1f1c2:	b08a      	sub	sp, #40	; 0x28
   1f1c4:	af00      	add	r7, sp, #0
   1f1c6:	60f8      	str	r0, [r7, #12]
   1f1c8:	60b9      	str	r1, [r7, #8]
   1f1ca:	607a      	str	r2, [r7, #4]
   1f1cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1f1ce:	2300      	movs	r3, #0
   1f1d0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f1d2:	68fb      	ldr	r3, [r7, #12]
   1f1d4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1f1d6:	6a3b      	ldr	r3, [r7, #32]
   1f1d8:	2b00      	cmp	r3, #0
   1f1da:	d101      	bne.n	1f1e0 <xQueueGenericSend+0x20>
   1f1dc:	b672      	cpsid	i
   1f1de:	e7fe      	b.n	1f1de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f1e0:	68bb      	ldr	r3, [r7, #8]
   1f1e2:	2b00      	cmp	r3, #0
   1f1e4:	d103      	bne.n	1f1ee <xQueueGenericSend+0x2e>
   1f1e6:	6a3b      	ldr	r3, [r7, #32]
   1f1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f1ea:	2b00      	cmp	r3, #0
   1f1ec:	d101      	bne.n	1f1f2 <xQueueGenericSend+0x32>
   1f1ee:	2301      	movs	r3, #1
   1f1f0:	e000      	b.n	1f1f4 <xQueueGenericSend+0x34>
   1f1f2:	2300      	movs	r3, #0
   1f1f4:	2b00      	cmp	r3, #0
   1f1f6:	d101      	bne.n	1f1fc <xQueueGenericSend+0x3c>
   1f1f8:	b672      	cpsid	i
   1f1fa:	e7fe      	b.n	1f1fa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f1fc:	683b      	ldr	r3, [r7, #0]
   1f1fe:	2b02      	cmp	r3, #2
   1f200:	d103      	bne.n	1f20a <xQueueGenericSend+0x4a>
   1f202:	6a3b      	ldr	r3, [r7, #32]
   1f204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f206:	2b01      	cmp	r3, #1
   1f208:	d101      	bne.n	1f20e <xQueueGenericSend+0x4e>
   1f20a:	2301      	movs	r3, #1
   1f20c:	e000      	b.n	1f210 <xQueueGenericSend+0x50>
   1f20e:	2300      	movs	r3, #0
   1f210:	2b00      	cmp	r3, #0
   1f212:	d101      	bne.n	1f218 <xQueueGenericSend+0x58>
   1f214:	b672      	cpsid	i
   1f216:	e7fe      	b.n	1f216 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f218:	4b53      	ldr	r3, [pc, #332]	; (1f368 <xQueueGenericSend+0x1a8>)
   1f21a:	4798      	blx	r3
   1f21c:	1e03      	subs	r3, r0, #0
   1f21e:	d102      	bne.n	1f226 <xQueueGenericSend+0x66>
   1f220:	687b      	ldr	r3, [r7, #4]
   1f222:	2b00      	cmp	r3, #0
   1f224:	d101      	bne.n	1f22a <xQueueGenericSend+0x6a>
   1f226:	2301      	movs	r3, #1
   1f228:	e000      	b.n	1f22c <xQueueGenericSend+0x6c>
   1f22a:	2300      	movs	r3, #0
   1f22c:	2b00      	cmp	r3, #0
   1f22e:	d101      	bne.n	1f234 <xQueueGenericSend+0x74>
   1f230:	b672      	cpsid	i
   1f232:	e7fe      	b.n	1f232 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1f234:	4b4d      	ldr	r3, [pc, #308]	; (1f36c <xQueueGenericSend+0x1ac>)
   1f236:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f238:	6a3b      	ldr	r3, [r7, #32]
   1f23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f23c:	6a3b      	ldr	r3, [r7, #32]
   1f23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f240:	429a      	cmp	r2, r3
   1f242:	d302      	bcc.n	1f24a <xQueueGenericSend+0x8a>
   1f244:	683b      	ldr	r3, [r7, #0]
   1f246:	2b02      	cmp	r3, #2
   1f248:	d12d      	bne.n	1f2a6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f24a:	683a      	ldr	r2, [r7, #0]
   1f24c:	68b9      	ldr	r1, [r7, #8]
   1f24e:	6a3b      	ldr	r3, [r7, #32]
   1f250:	0018      	movs	r0, r3
   1f252:	4b47      	ldr	r3, [pc, #284]	; (1f370 <xQueueGenericSend+0x1b0>)
   1f254:	4798      	blx	r3
   1f256:	0003      	movs	r3, r0
   1f258:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f25a:	6a3b      	ldr	r3, [r7, #32]
   1f25c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f25e:	2b00      	cmp	r3, #0
   1f260:	d00a      	beq.n	1f278 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f262:	683a      	ldr	r2, [r7, #0]
   1f264:	6a3b      	ldr	r3, [r7, #32]
   1f266:	0011      	movs	r1, r2
   1f268:	0018      	movs	r0, r3
   1f26a:	4b42      	ldr	r3, [pc, #264]	; (1f374 <xQueueGenericSend+0x1b4>)
   1f26c:	4798      	blx	r3
   1f26e:	1e03      	subs	r3, r0, #0
   1f270:	d015      	beq.n	1f29e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1f272:	4b41      	ldr	r3, [pc, #260]	; (1f378 <xQueueGenericSend+0x1b8>)
   1f274:	4798      	blx	r3
   1f276:	e012      	b.n	1f29e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f278:	6a3b      	ldr	r3, [r7, #32]
   1f27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f27c:	2b00      	cmp	r3, #0
   1f27e:	d009      	beq.n	1f294 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f280:	6a3b      	ldr	r3, [r7, #32]
   1f282:	3324      	adds	r3, #36	; 0x24
   1f284:	0018      	movs	r0, r3
   1f286:	4b3d      	ldr	r3, [pc, #244]	; (1f37c <xQueueGenericSend+0x1bc>)
   1f288:	4798      	blx	r3
   1f28a:	1e03      	subs	r3, r0, #0
   1f28c:	d007      	beq.n	1f29e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1f28e:	4b3a      	ldr	r3, [pc, #232]	; (1f378 <xQueueGenericSend+0x1b8>)
   1f290:	4798      	blx	r3
   1f292:	e004      	b.n	1f29e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1f294:	69fb      	ldr	r3, [r7, #28]
   1f296:	2b00      	cmp	r3, #0
   1f298:	d001      	beq.n	1f29e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1f29a:	4b37      	ldr	r3, [pc, #220]	; (1f378 <xQueueGenericSend+0x1b8>)
   1f29c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1f29e:	4b38      	ldr	r3, [pc, #224]	; (1f380 <xQueueGenericSend+0x1c0>)
   1f2a0:	4798      	blx	r3
				return pdPASS;
   1f2a2:	2301      	movs	r3, #1
   1f2a4:	e05c      	b.n	1f360 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f2a6:	687b      	ldr	r3, [r7, #4]
   1f2a8:	2b00      	cmp	r3, #0
   1f2aa:	d103      	bne.n	1f2b4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f2ac:	4b34      	ldr	r3, [pc, #208]	; (1f380 <xQueueGenericSend+0x1c0>)
   1f2ae:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1f2b0:	2300      	movs	r3, #0
   1f2b2:	e055      	b.n	1f360 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f2b6:	2b00      	cmp	r3, #0
   1f2b8:	d106      	bne.n	1f2c8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f2ba:	2314      	movs	r3, #20
   1f2bc:	18fb      	adds	r3, r7, r3
   1f2be:	0018      	movs	r0, r3
   1f2c0:	4b30      	ldr	r3, [pc, #192]	; (1f384 <xQueueGenericSend+0x1c4>)
   1f2c2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f2c4:	2301      	movs	r3, #1
   1f2c6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f2c8:	4b2d      	ldr	r3, [pc, #180]	; (1f380 <xQueueGenericSend+0x1c0>)
   1f2ca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f2cc:	4b2e      	ldr	r3, [pc, #184]	; (1f388 <xQueueGenericSend+0x1c8>)
   1f2ce:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f2d0:	4b26      	ldr	r3, [pc, #152]	; (1f36c <xQueueGenericSend+0x1ac>)
   1f2d2:	4798      	blx	r3
   1f2d4:	6a3b      	ldr	r3, [r7, #32]
   1f2d6:	2244      	movs	r2, #68	; 0x44
   1f2d8:	5c9b      	ldrb	r3, [r3, r2]
   1f2da:	b25b      	sxtb	r3, r3
   1f2dc:	3301      	adds	r3, #1
   1f2de:	d103      	bne.n	1f2e8 <xQueueGenericSend+0x128>
   1f2e0:	6a3b      	ldr	r3, [r7, #32]
   1f2e2:	2244      	movs	r2, #68	; 0x44
   1f2e4:	2100      	movs	r1, #0
   1f2e6:	5499      	strb	r1, [r3, r2]
   1f2e8:	6a3b      	ldr	r3, [r7, #32]
   1f2ea:	2245      	movs	r2, #69	; 0x45
   1f2ec:	5c9b      	ldrb	r3, [r3, r2]
   1f2ee:	b25b      	sxtb	r3, r3
   1f2f0:	3301      	adds	r3, #1
   1f2f2:	d103      	bne.n	1f2fc <xQueueGenericSend+0x13c>
   1f2f4:	6a3b      	ldr	r3, [r7, #32]
   1f2f6:	2245      	movs	r2, #69	; 0x45
   1f2f8:	2100      	movs	r1, #0
   1f2fa:	5499      	strb	r1, [r3, r2]
   1f2fc:	4b20      	ldr	r3, [pc, #128]	; (1f380 <xQueueGenericSend+0x1c0>)
   1f2fe:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f300:	1d3a      	adds	r2, r7, #4
   1f302:	2314      	movs	r3, #20
   1f304:	18fb      	adds	r3, r7, r3
   1f306:	0011      	movs	r1, r2
   1f308:	0018      	movs	r0, r3
   1f30a:	4b20      	ldr	r3, [pc, #128]	; (1f38c <xQueueGenericSend+0x1cc>)
   1f30c:	4798      	blx	r3
   1f30e:	1e03      	subs	r3, r0, #0
   1f310:	d11f      	bne.n	1f352 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1f312:	6a3b      	ldr	r3, [r7, #32]
   1f314:	0018      	movs	r0, r3
   1f316:	4b1e      	ldr	r3, [pc, #120]	; (1f390 <xQueueGenericSend+0x1d0>)
   1f318:	4798      	blx	r3
   1f31a:	1e03      	subs	r3, r0, #0
   1f31c:	d012      	beq.n	1f344 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1f31e:	6a3b      	ldr	r3, [r7, #32]
   1f320:	3310      	adds	r3, #16
   1f322:	687a      	ldr	r2, [r7, #4]
   1f324:	0011      	movs	r1, r2
   1f326:	0018      	movs	r0, r3
   1f328:	4b1a      	ldr	r3, [pc, #104]	; (1f394 <xQueueGenericSend+0x1d4>)
   1f32a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1f32c:	6a3b      	ldr	r3, [r7, #32]
   1f32e:	0018      	movs	r0, r3
   1f330:	4b19      	ldr	r3, [pc, #100]	; (1f398 <xQueueGenericSend+0x1d8>)
   1f332:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1f334:	4b19      	ldr	r3, [pc, #100]	; (1f39c <xQueueGenericSend+0x1dc>)
   1f336:	4798      	blx	r3
   1f338:	1e03      	subs	r3, r0, #0
   1f33a:	d000      	beq.n	1f33e <xQueueGenericSend+0x17e>
   1f33c:	e77a      	b.n	1f234 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1f33e:	4b0e      	ldr	r3, [pc, #56]	; (1f378 <xQueueGenericSend+0x1b8>)
   1f340:	4798      	blx	r3
   1f342:	e777      	b.n	1f234 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1f344:	6a3b      	ldr	r3, [r7, #32]
   1f346:	0018      	movs	r0, r3
   1f348:	4b13      	ldr	r3, [pc, #76]	; (1f398 <xQueueGenericSend+0x1d8>)
   1f34a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f34c:	4b13      	ldr	r3, [pc, #76]	; (1f39c <xQueueGenericSend+0x1dc>)
   1f34e:	4798      	blx	r3
   1f350:	e770      	b.n	1f234 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1f352:	6a3b      	ldr	r3, [r7, #32]
   1f354:	0018      	movs	r0, r3
   1f356:	4b10      	ldr	r3, [pc, #64]	; (1f398 <xQueueGenericSend+0x1d8>)
   1f358:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f35a:	4b10      	ldr	r3, [pc, #64]	; (1f39c <xQueueGenericSend+0x1dc>)
   1f35c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1f35e:	2300      	movs	r3, #0
		}
	}
}
   1f360:	0018      	movs	r0, r3
   1f362:	46bd      	mov	sp, r7
   1f364:	b00a      	add	sp, #40	; 0x28
   1f366:	bd80      	pop	{r7, pc}
   1f368:	000208f1 	.word	0x000208f1
   1f36c:	0001ed51 	.word	0x0001ed51
   1f370:	0001f881 	.word	0x0001f881
   1f374:	0001fb85 	.word	0x0001fb85
   1f378:	0001ed31 	.word	0x0001ed31
   1f37c:	000205b9 	.word	0x000205b9
   1f380:	0001ed75 	.word	0x0001ed75
   1f384:	00020679 	.word	0x00020679
   1f388:	00020181 	.word	0x00020181
   1f38c:	000206a1 	.word	0x000206a1
   1f390:	0001fad5 	.word	0x0001fad5
   1f394:	00020521 	.word	0x00020521
   1f398:	0001f9b1 	.word	0x0001f9b1
   1f39c:	00020199 	.word	0x00020199

0001f3a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1f3a0:	b580      	push	{r7, lr}
   1f3a2:	b088      	sub	sp, #32
   1f3a4:	af00      	add	r7, sp, #0
   1f3a6:	60f8      	str	r0, [r7, #12]
   1f3a8:	60b9      	str	r1, [r7, #8]
   1f3aa:	607a      	str	r2, [r7, #4]
   1f3ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f3ae:	68fb      	ldr	r3, [r7, #12]
   1f3b0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1f3b2:	69bb      	ldr	r3, [r7, #24]
   1f3b4:	2b00      	cmp	r3, #0
   1f3b6:	d101      	bne.n	1f3bc <xQueueGenericSendFromISR+0x1c>
   1f3b8:	b672      	cpsid	i
   1f3ba:	e7fe      	b.n	1f3ba <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f3bc:	68bb      	ldr	r3, [r7, #8]
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	d103      	bne.n	1f3ca <xQueueGenericSendFromISR+0x2a>
   1f3c2:	69bb      	ldr	r3, [r7, #24]
   1f3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f3c6:	2b00      	cmp	r3, #0
   1f3c8:	d101      	bne.n	1f3ce <xQueueGenericSendFromISR+0x2e>
   1f3ca:	2301      	movs	r3, #1
   1f3cc:	e000      	b.n	1f3d0 <xQueueGenericSendFromISR+0x30>
   1f3ce:	2300      	movs	r3, #0
   1f3d0:	2b00      	cmp	r3, #0
   1f3d2:	d101      	bne.n	1f3d8 <xQueueGenericSendFromISR+0x38>
   1f3d4:	b672      	cpsid	i
   1f3d6:	e7fe      	b.n	1f3d6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1f3d8:	683b      	ldr	r3, [r7, #0]
   1f3da:	2b02      	cmp	r3, #2
   1f3dc:	d103      	bne.n	1f3e6 <xQueueGenericSendFromISR+0x46>
   1f3de:	69bb      	ldr	r3, [r7, #24]
   1f3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f3e2:	2b01      	cmp	r3, #1
   1f3e4:	d101      	bne.n	1f3ea <xQueueGenericSendFromISR+0x4a>
   1f3e6:	2301      	movs	r3, #1
   1f3e8:	e000      	b.n	1f3ec <xQueueGenericSendFromISR+0x4c>
   1f3ea:	2300      	movs	r3, #0
   1f3ec:	2b00      	cmp	r3, #0
   1f3ee:	d101      	bne.n	1f3f4 <xQueueGenericSendFromISR+0x54>
   1f3f0:	b672      	cpsid	i
   1f3f2:	e7fe      	b.n	1f3f2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1f3f4:	4b2d      	ldr	r3, [pc, #180]	; (1f4ac <xQueueGenericSendFromISR+0x10c>)
   1f3f6:	4798      	blx	r3
   1f3f8:	0003      	movs	r3, r0
   1f3fa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1f3fc:	69bb      	ldr	r3, [r7, #24]
   1f3fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f400:	69bb      	ldr	r3, [r7, #24]
   1f402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1f404:	429a      	cmp	r2, r3
   1f406:	d302      	bcc.n	1f40e <xQueueGenericSendFromISR+0x6e>
   1f408:	683b      	ldr	r3, [r7, #0]
   1f40a:	2b02      	cmp	r3, #2
   1f40c:	d142      	bne.n	1f494 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1f40e:	2313      	movs	r3, #19
   1f410:	18fb      	adds	r3, r7, r3
   1f412:	69ba      	ldr	r2, [r7, #24]
   1f414:	2145      	movs	r1, #69	; 0x45
   1f416:	5c52      	ldrb	r2, [r2, r1]
   1f418:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1f41a:	683a      	ldr	r2, [r7, #0]
   1f41c:	68b9      	ldr	r1, [r7, #8]
   1f41e:	69bb      	ldr	r3, [r7, #24]
   1f420:	0018      	movs	r0, r3
   1f422:	4b23      	ldr	r3, [pc, #140]	; (1f4b0 <xQueueGenericSendFromISR+0x110>)
   1f424:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1f426:	2313      	movs	r3, #19
   1f428:	18fb      	adds	r3, r7, r3
   1f42a:	781b      	ldrb	r3, [r3, #0]
   1f42c:	b25b      	sxtb	r3, r3
   1f42e:	3301      	adds	r3, #1
   1f430:	d124      	bne.n	1f47c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1f432:	69bb      	ldr	r3, [r7, #24]
   1f434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f436:	2b00      	cmp	r3, #0
   1f438:	d00e      	beq.n	1f458 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1f43a:	683a      	ldr	r2, [r7, #0]
   1f43c:	69bb      	ldr	r3, [r7, #24]
   1f43e:	0011      	movs	r1, r2
   1f440:	0018      	movs	r0, r3
   1f442:	4b1c      	ldr	r3, [pc, #112]	; (1f4b4 <xQueueGenericSendFromISR+0x114>)
   1f444:	4798      	blx	r3
   1f446:	1e03      	subs	r3, r0, #0
   1f448:	d021      	beq.n	1f48e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1f44a:	687b      	ldr	r3, [r7, #4]
   1f44c:	2b00      	cmp	r3, #0
   1f44e:	d01e      	beq.n	1f48e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1f450:	687b      	ldr	r3, [r7, #4]
   1f452:	2201      	movs	r2, #1
   1f454:	601a      	str	r2, [r3, #0]
   1f456:	e01a      	b.n	1f48e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f458:	69bb      	ldr	r3, [r7, #24]
   1f45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f45c:	2b00      	cmp	r3, #0
   1f45e:	d016      	beq.n	1f48e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f460:	69bb      	ldr	r3, [r7, #24]
   1f462:	3324      	adds	r3, #36	; 0x24
   1f464:	0018      	movs	r0, r3
   1f466:	4b14      	ldr	r3, [pc, #80]	; (1f4b8 <xQueueGenericSendFromISR+0x118>)
   1f468:	4798      	blx	r3
   1f46a:	1e03      	subs	r3, r0, #0
   1f46c:	d00f      	beq.n	1f48e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1f46e:	687b      	ldr	r3, [r7, #4]
   1f470:	2b00      	cmp	r3, #0
   1f472:	d00c      	beq.n	1f48e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1f474:	687b      	ldr	r3, [r7, #4]
   1f476:	2201      	movs	r2, #1
   1f478:	601a      	str	r2, [r3, #0]
   1f47a:	e008      	b.n	1f48e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1f47c:	2313      	movs	r3, #19
   1f47e:	18fb      	adds	r3, r7, r3
   1f480:	781b      	ldrb	r3, [r3, #0]
   1f482:	3301      	adds	r3, #1
   1f484:	b2db      	uxtb	r3, r3
   1f486:	b259      	sxtb	r1, r3
   1f488:	69bb      	ldr	r3, [r7, #24]
   1f48a:	2245      	movs	r2, #69	; 0x45
   1f48c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1f48e:	2301      	movs	r3, #1
   1f490:	61fb      	str	r3, [r7, #28]
		{
   1f492:	e001      	b.n	1f498 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1f494:	2300      	movs	r3, #0
   1f496:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1f498:	697b      	ldr	r3, [r7, #20]
   1f49a:	0018      	movs	r0, r3
   1f49c:	4b07      	ldr	r3, [pc, #28]	; (1f4bc <xQueueGenericSendFromISR+0x11c>)
   1f49e:	4798      	blx	r3

	return xReturn;
   1f4a0:	69fb      	ldr	r3, [r7, #28]
}
   1f4a2:	0018      	movs	r0, r3
   1f4a4:	46bd      	mov	sp, r7
   1f4a6:	b008      	add	sp, #32
   1f4a8:	bd80      	pop	{r7, pc}
   1f4aa:	46c0      	nop			; (mov r8, r8)
   1f4ac:	0001eda5 	.word	0x0001eda5
   1f4b0:	0001f881 	.word	0x0001f881
   1f4b4:	0001fb85 	.word	0x0001fb85
   1f4b8:	000205b9 	.word	0x000205b9
   1f4bc:	0001edb1 	.word	0x0001edb1

0001f4c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1f4c0:	b580      	push	{r7, lr}
   1f4c2:	b08a      	sub	sp, #40	; 0x28
   1f4c4:	af00      	add	r7, sp, #0
   1f4c6:	60f8      	str	r0, [r7, #12]
   1f4c8:	60b9      	str	r1, [r7, #8]
   1f4ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1f4cc:	2300      	movs	r3, #0
   1f4ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f4d0:	68fb      	ldr	r3, [r7, #12]
   1f4d2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f4d4:	6a3b      	ldr	r3, [r7, #32]
   1f4d6:	2b00      	cmp	r3, #0
   1f4d8:	d101      	bne.n	1f4de <xQueueReceive+0x1e>
   1f4da:	b672      	cpsid	i
   1f4dc:	e7fe      	b.n	1f4dc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1f4de:	68bb      	ldr	r3, [r7, #8]
   1f4e0:	2b00      	cmp	r3, #0
   1f4e2:	d103      	bne.n	1f4ec <xQueueReceive+0x2c>
   1f4e4:	6a3b      	ldr	r3, [r7, #32]
   1f4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f4e8:	2b00      	cmp	r3, #0
   1f4ea:	d101      	bne.n	1f4f0 <xQueueReceive+0x30>
   1f4ec:	2301      	movs	r3, #1
   1f4ee:	e000      	b.n	1f4f2 <xQueueReceive+0x32>
   1f4f0:	2300      	movs	r3, #0
   1f4f2:	2b00      	cmp	r3, #0
   1f4f4:	d101      	bne.n	1f4fa <xQueueReceive+0x3a>
   1f4f6:	b672      	cpsid	i
   1f4f8:	e7fe      	b.n	1f4f8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f4fa:	4b4c      	ldr	r3, [pc, #304]	; (1f62c <xQueueReceive+0x16c>)
   1f4fc:	4798      	blx	r3
   1f4fe:	1e03      	subs	r3, r0, #0
   1f500:	d102      	bne.n	1f508 <xQueueReceive+0x48>
   1f502:	687b      	ldr	r3, [r7, #4]
   1f504:	2b00      	cmp	r3, #0
   1f506:	d101      	bne.n	1f50c <xQueueReceive+0x4c>
   1f508:	2301      	movs	r3, #1
   1f50a:	e000      	b.n	1f50e <xQueueReceive+0x4e>
   1f50c:	2300      	movs	r3, #0
   1f50e:	2b00      	cmp	r3, #0
   1f510:	d101      	bne.n	1f516 <xQueueReceive+0x56>
   1f512:	b672      	cpsid	i
   1f514:	e7fe      	b.n	1f514 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f516:	4b46      	ldr	r3, [pc, #280]	; (1f630 <xQueueReceive+0x170>)
   1f518:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f51a:	6a3b      	ldr	r3, [r7, #32]
   1f51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f51e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f520:	69fb      	ldr	r3, [r7, #28]
   1f522:	2b00      	cmp	r3, #0
   1f524:	d01a      	beq.n	1f55c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1f526:	68ba      	ldr	r2, [r7, #8]
   1f528:	6a3b      	ldr	r3, [r7, #32]
   1f52a:	0011      	movs	r1, r2
   1f52c:	0018      	movs	r0, r3
   1f52e:	4b41      	ldr	r3, [pc, #260]	; (1f634 <xQueueReceive+0x174>)
   1f530:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1f532:	69fb      	ldr	r3, [r7, #28]
   1f534:	1e5a      	subs	r2, r3, #1
   1f536:	6a3b      	ldr	r3, [r7, #32]
   1f538:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f53a:	6a3b      	ldr	r3, [r7, #32]
   1f53c:	691b      	ldr	r3, [r3, #16]
   1f53e:	2b00      	cmp	r3, #0
   1f540:	d008      	beq.n	1f554 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f542:	6a3b      	ldr	r3, [r7, #32]
   1f544:	3310      	adds	r3, #16
   1f546:	0018      	movs	r0, r3
   1f548:	4b3b      	ldr	r3, [pc, #236]	; (1f638 <xQueueReceive+0x178>)
   1f54a:	4798      	blx	r3
   1f54c:	1e03      	subs	r3, r0, #0
   1f54e:	d001      	beq.n	1f554 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f550:	4b3a      	ldr	r3, [pc, #232]	; (1f63c <xQueueReceive+0x17c>)
   1f552:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f554:	4b3a      	ldr	r3, [pc, #232]	; (1f640 <xQueueReceive+0x180>)
   1f556:	4798      	blx	r3
				return pdPASS;
   1f558:	2301      	movs	r3, #1
   1f55a:	e062      	b.n	1f622 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f55c:	687b      	ldr	r3, [r7, #4]
   1f55e:	2b00      	cmp	r3, #0
   1f560:	d103      	bne.n	1f56a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1f562:	4b37      	ldr	r3, [pc, #220]	; (1f640 <xQueueReceive+0x180>)
   1f564:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f566:	2300      	movs	r3, #0
   1f568:	e05b      	b.n	1f622 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f56c:	2b00      	cmp	r3, #0
   1f56e:	d106      	bne.n	1f57e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f570:	2314      	movs	r3, #20
   1f572:	18fb      	adds	r3, r7, r3
   1f574:	0018      	movs	r0, r3
   1f576:	4b33      	ldr	r3, [pc, #204]	; (1f644 <xQueueReceive+0x184>)
   1f578:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f57a:	2301      	movs	r3, #1
   1f57c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f57e:	4b30      	ldr	r3, [pc, #192]	; (1f640 <xQueueReceive+0x180>)
   1f580:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f582:	4b31      	ldr	r3, [pc, #196]	; (1f648 <xQueueReceive+0x188>)
   1f584:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f586:	4b2a      	ldr	r3, [pc, #168]	; (1f630 <xQueueReceive+0x170>)
   1f588:	4798      	blx	r3
   1f58a:	6a3b      	ldr	r3, [r7, #32]
   1f58c:	2244      	movs	r2, #68	; 0x44
   1f58e:	5c9b      	ldrb	r3, [r3, r2]
   1f590:	b25b      	sxtb	r3, r3
   1f592:	3301      	adds	r3, #1
   1f594:	d103      	bne.n	1f59e <xQueueReceive+0xde>
   1f596:	6a3b      	ldr	r3, [r7, #32]
   1f598:	2244      	movs	r2, #68	; 0x44
   1f59a:	2100      	movs	r1, #0
   1f59c:	5499      	strb	r1, [r3, r2]
   1f59e:	6a3b      	ldr	r3, [r7, #32]
   1f5a0:	2245      	movs	r2, #69	; 0x45
   1f5a2:	5c9b      	ldrb	r3, [r3, r2]
   1f5a4:	b25b      	sxtb	r3, r3
   1f5a6:	3301      	adds	r3, #1
   1f5a8:	d103      	bne.n	1f5b2 <xQueueReceive+0xf2>
   1f5aa:	6a3b      	ldr	r3, [r7, #32]
   1f5ac:	2245      	movs	r2, #69	; 0x45
   1f5ae:	2100      	movs	r1, #0
   1f5b0:	5499      	strb	r1, [r3, r2]
   1f5b2:	4b23      	ldr	r3, [pc, #140]	; (1f640 <xQueueReceive+0x180>)
   1f5b4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f5b6:	1d3a      	adds	r2, r7, #4
   1f5b8:	2314      	movs	r3, #20
   1f5ba:	18fb      	adds	r3, r7, r3
   1f5bc:	0011      	movs	r1, r2
   1f5be:	0018      	movs	r0, r3
   1f5c0:	4b22      	ldr	r3, [pc, #136]	; (1f64c <xQueueReceive+0x18c>)
   1f5c2:	4798      	blx	r3
   1f5c4:	1e03      	subs	r3, r0, #0
   1f5c6:	d11e      	bne.n	1f606 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f5c8:	6a3b      	ldr	r3, [r7, #32]
   1f5ca:	0018      	movs	r0, r3
   1f5cc:	4b20      	ldr	r3, [pc, #128]	; (1f650 <xQueueReceive+0x190>)
   1f5ce:	4798      	blx	r3
   1f5d0:	1e03      	subs	r3, r0, #0
   1f5d2:	d011      	beq.n	1f5f8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f5d4:	6a3b      	ldr	r3, [r7, #32]
   1f5d6:	3324      	adds	r3, #36	; 0x24
   1f5d8:	687a      	ldr	r2, [r7, #4]
   1f5da:	0011      	movs	r1, r2
   1f5dc:	0018      	movs	r0, r3
   1f5de:	4b1d      	ldr	r3, [pc, #116]	; (1f654 <xQueueReceive+0x194>)
   1f5e0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f5e2:	6a3b      	ldr	r3, [r7, #32]
   1f5e4:	0018      	movs	r0, r3
   1f5e6:	4b1c      	ldr	r3, [pc, #112]	; (1f658 <xQueueReceive+0x198>)
   1f5e8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f5ea:	4b1c      	ldr	r3, [pc, #112]	; (1f65c <xQueueReceive+0x19c>)
   1f5ec:	4798      	blx	r3
   1f5ee:	1e03      	subs	r3, r0, #0
   1f5f0:	d191      	bne.n	1f516 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1f5f2:	4b12      	ldr	r3, [pc, #72]	; (1f63c <xQueueReceive+0x17c>)
   1f5f4:	4798      	blx	r3
   1f5f6:	e78e      	b.n	1f516 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1f5f8:	6a3b      	ldr	r3, [r7, #32]
   1f5fa:	0018      	movs	r0, r3
   1f5fc:	4b16      	ldr	r3, [pc, #88]	; (1f658 <xQueueReceive+0x198>)
   1f5fe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f600:	4b16      	ldr	r3, [pc, #88]	; (1f65c <xQueueReceive+0x19c>)
   1f602:	4798      	blx	r3
   1f604:	e787      	b.n	1f516 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1f606:	6a3b      	ldr	r3, [r7, #32]
   1f608:	0018      	movs	r0, r3
   1f60a:	4b13      	ldr	r3, [pc, #76]	; (1f658 <xQueueReceive+0x198>)
   1f60c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f60e:	4b13      	ldr	r3, [pc, #76]	; (1f65c <xQueueReceive+0x19c>)
   1f610:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f612:	6a3b      	ldr	r3, [r7, #32]
   1f614:	0018      	movs	r0, r3
   1f616:	4b0e      	ldr	r3, [pc, #56]	; (1f650 <xQueueReceive+0x190>)
   1f618:	4798      	blx	r3
   1f61a:	1e03      	subs	r3, r0, #0
   1f61c:	d100      	bne.n	1f620 <xQueueReceive+0x160>
   1f61e:	e77a      	b.n	1f516 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f620:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f622:	0018      	movs	r0, r3
   1f624:	46bd      	mov	sp, r7
   1f626:	b00a      	add	sp, #40	; 0x28
   1f628:	bd80      	pop	{r7, pc}
   1f62a:	46c0      	nop			; (mov r8, r8)
   1f62c:	000208f1 	.word	0x000208f1
   1f630:	0001ed51 	.word	0x0001ed51
   1f634:	0001f961 	.word	0x0001f961
   1f638:	000205b9 	.word	0x000205b9
   1f63c:	0001ed31 	.word	0x0001ed31
   1f640:	0001ed75 	.word	0x0001ed75
   1f644:	00020679 	.word	0x00020679
   1f648:	00020181 	.word	0x00020181
   1f64c:	000206a1 	.word	0x000206a1
   1f650:	0001faa1 	.word	0x0001faa1
   1f654:	00020521 	.word	0x00020521
   1f658:	0001f9b1 	.word	0x0001f9b1
   1f65c:	00020199 	.word	0x00020199

0001f660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1f660:	b580      	push	{r7, lr}
   1f662:	b08a      	sub	sp, #40	; 0x28
   1f664:	af00      	add	r7, sp, #0
   1f666:	6078      	str	r0, [r7, #4]
   1f668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1f66a:	2300      	movs	r3, #0
   1f66c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1f66e:	687b      	ldr	r3, [r7, #4]
   1f670:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1f672:	2300      	movs	r3, #0
   1f674:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1f676:	69fb      	ldr	r3, [r7, #28]
   1f678:	2b00      	cmp	r3, #0
   1f67a:	d101      	bne.n	1f680 <xQueueSemaphoreTake+0x20>
   1f67c:	b672      	cpsid	i
   1f67e:	e7fe      	b.n	1f67e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1f680:	69fb      	ldr	r3, [r7, #28]
   1f682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f684:	2b00      	cmp	r3, #0
   1f686:	d001      	beq.n	1f68c <xQueueSemaphoreTake+0x2c>
   1f688:	b672      	cpsid	i
   1f68a:	e7fe      	b.n	1f68a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1f68c:	4b61      	ldr	r3, [pc, #388]	; (1f814 <xQueueSemaphoreTake+0x1b4>)
   1f68e:	4798      	blx	r3
   1f690:	1e03      	subs	r3, r0, #0
   1f692:	d102      	bne.n	1f69a <xQueueSemaphoreTake+0x3a>
   1f694:	683b      	ldr	r3, [r7, #0]
   1f696:	2b00      	cmp	r3, #0
   1f698:	d101      	bne.n	1f69e <xQueueSemaphoreTake+0x3e>
   1f69a:	2301      	movs	r3, #1
   1f69c:	e000      	b.n	1f6a0 <xQueueSemaphoreTake+0x40>
   1f69e:	2300      	movs	r3, #0
   1f6a0:	2b00      	cmp	r3, #0
   1f6a2:	d101      	bne.n	1f6a8 <xQueueSemaphoreTake+0x48>
   1f6a4:	b672      	cpsid	i
   1f6a6:	e7fe      	b.n	1f6a6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1f6a8:	4b5b      	ldr	r3, [pc, #364]	; (1f818 <xQueueSemaphoreTake+0x1b8>)
   1f6aa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1f6ac:	69fb      	ldr	r3, [r7, #28]
   1f6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f6b0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1f6b2:	69bb      	ldr	r3, [r7, #24]
   1f6b4:	2b00      	cmp	r3, #0
   1f6b6:	d01d      	beq.n	1f6f4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1f6b8:	69bb      	ldr	r3, [r7, #24]
   1f6ba:	1e5a      	subs	r2, r3, #1
   1f6bc:	69fb      	ldr	r3, [r7, #28]
   1f6be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f6c0:	69fb      	ldr	r3, [r7, #28]
   1f6c2:	681b      	ldr	r3, [r3, #0]
   1f6c4:	2b00      	cmp	r3, #0
   1f6c6:	d104      	bne.n	1f6d2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1f6c8:	4b54      	ldr	r3, [pc, #336]	; (1f81c <xQueueSemaphoreTake+0x1bc>)
   1f6ca:	4798      	blx	r3
   1f6cc:	0002      	movs	r2, r0
   1f6ce:	69fb      	ldr	r3, [r7, #28]
   1f6d0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1f6d2:	69fb      	ldr	r3, [r7, #28]
   1f6d4:	691b      	ldr	r3, [r3, #16]
   1f6d6:	2b00      	cmp	r3, #0
   1f6d8:	d008      	beq.n	1f6ec <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1f6da:	69fb      	ldr	r3, [r7, #28]
   1f6dc:	3310      	adds	r3, #16
   1f6de:	0018      	movs	r0, r3
   1f6e0:	4b4f      	ldr	r3, [pc, #316]	; (1f820 <xQueueSemaphoreTake+0x1c0>)
   1f6e2:	4798      	blx	r3
   1f6e4:	1e03      	subs	r3, r0, #0
   1f6e6:	d001      	beq.n	1f6ec <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1f6e8:	4b4e      	ldr	r3, [pc, #312]	; (1f824 <xQueueSemaphoreTake+0x1c4>)
   1f6ea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1f6ec:	4b4e      	ldr	r3, [pc, #312]	; (1f828 <xQueueSemaphoreTake+0x1c8>)
   1f6ee:	4798      	blx	r3
				return pdPASS;
   1f6f0:	2301      	movs	r3, #1
   1f6f2:	e08b      	b.n	1f80c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1f6f4:	683b      	ldr	r3, [r7, #0]
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	d108      	bne.n	1f70c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1f6fa:	6a3b      	ldr	r3, [r7, #32]
   1f6fc:	2b00      	cmp	r3, #0
   1f6fe:	d001      	beq.n	1f704 <xQueueSemaphoreTake+0xa4>
   1f700:	b672      	cpsid	i
   1f702:	e7fe      	b.n	1f702 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1f704:	4b48      	ldr	r3, [pc, #288]	; (1f828 <xQueueSemaphoreTake+0x1c8>)
   1f706:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1f708:	2300      	movs	r3, #0
   1f70a:	e07f      	b.n	1f80c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   1f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f70e:	2b00      	cmp	r3, #0
   1f710:	d106      	bne.n	1f720 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1f712:	230c      	movs	r3, #12
   1f714:	18fb      	adds	r3, r7, r3
   1f716:	0018      	movs	r0, r3
   1f718:	4b44      	ldr	r3, [pc, #272]	; (1f82c <xQueueSemaphoreTake+0x1cc>)
   1f71a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1f71c:	2301      	movs	r3, #1
   1f71e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1f720:	4b41      	ldr	r3, [pc, #260]	; (1f828 <xQueueSemaphoreTake+0x1c8>)
   1f722:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1f724:	4b42      	ldr	r3, [pc, #264]	; (1f830 <xQueueSemaphoreTake+0x1d0>)
   1f726:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1f728:	4b3b      	ldr	r3, [pc, #236]	; (1f818 <xQueueSemaphoreTake+0x1b8>)
   1f72a:	4798      	blx	r3
   1f72c:	69fb      	ldr	r3, [r7, #28]
   1f72e:	2244      	movs	r2, #68	; 0x44
   1f730:	5c9b      	ldrb	r3, [r3, r2]
   1f732:	b25b      	sxtb	r3, r3
   1f734:	3301      	adds	r3, #1
   1f736:	d103      	bne.n	1f740 <xQueueSemaphoreTake+0xe0>
   1f738:	69fb      	ldr	r3, [r7, #28]
   1f73a:	2244      	movs	r2, #68	; 0x44
   1f73c:	2100      	movs	r1, #0
   1f73e:	5499      	strb	r1, [r3, r2]
   1f740:	69fb      	ldr	r3, [r7, #28]
   1f742:	2245      	movs	r2, #69	; 0x45
   1f744:	5c9b      	ldrb	r3, [r3, r2]
   1f746:	b25b      	sxtb	r3, r3
   1f748:	3301      	adds	r3, #1
   1f74a:	d103      	bne.n	1f754 <xQueueSemaphoreTake+0xf4>
   1f74c:	69fb      	ldr	r3, [r7, #28]
   1f74e:	2245      	movs	r2, #69	; 0x45
   1f750:	2100      	movs	r1, #0
   1f752:	5499      	strb	r1, [r3, r2]
   1f754:	4b34      	ldr	r3, [pc, #208]	; (1f828 <xQueueSemaphoreTake+0x1c8>)
   1f756:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1f758:	003a      	movs	r2, r7
   1f75a:	230c      	movs	r3, #12
   1f75c:	18fb      	adds	r3, r7, r3
   1f75e:	0011      	movs	r1, r2
   1f760:	0018      	movs	r0, r3
   1f762:	4b34      	ldr	r3, [pc, #208]	; (1f834 <xQueueSemaphoreTake+0x1d4>)
   1f764:	4798      	blx	r3
   1f766:	1e03      	subs	r3, r0, #0
   1f768:	d12e      	bne.n	1f7c8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f76a:	69fb      	ldr	r3, [r7, #28]
   1f76c:	0018      	movs	r0, r3
   1f76e:	4b32      	ldr	r3, [pc, #200]	; (1f838 <xQueueSemaphoreTake+0x1d8>)
   1f770:	4798      	blx	r3
   1f772:	1e03      	subs	r3, r0, #0
   1f774:	d021      	beq.n	1f7ba <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f776:	69fb      	ldr	r3, [r7, #28]
   1f778:	681b      	ldr	r3, [r3, #0]
   1f77a:	2b00      	cmp	r3, #0
   1f77c:	d10a      	bne.n	1f794 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   1f77e:	4b26      	ldr	r3, [pc, #152]	; (1f818 <xQueueSemaphoreTake+0x1b8>)
   1f780:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1f782:	69fb      	ldr	r3, [r7, #28]
   1f784:	685b      	ldr	r3, [r3, #4]
   1f786:	0018      	movs	r0, r3
   1f788:	4b2c      	ldr	r3, [pc, #176]	; (1f83c <xQueueSemaphoreTake+0x1dc>)
   1f78a:	4798      	blx	r3
   1f78c:	0003      	movs	r3, r0
   1f78e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1f790:	4b25      	ldr	r3, [pc, #148]	; (1f828 <xQueueSemaphoreTake+0x1c8>)
   1f792:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1f794:	69fb      	ldr	r3, [r7, #28]
   1f796:	3324      	adds	r3, #36	; 0x24
   1f798:	683a      	ldr	r2, [r7, #0]
   1f79a:	0011      	movs	r1, r2
   1f79c:	0018      	movs	r0, r3
   1f79e:	4b28      	ldr	r3, [pc, #160]	; (1f840 <xQueueSemaphoreTake+0x1e0>)
   1f7a0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1f7a2:	69fb      	ldr	r3, [r7, #28]
   1f7a4:	0018      	movs	r0, r3
   1f7a6:	4b27      	ldr	r3, [pc, #156]	; (1f844 <xQueueSemaphoreTake+0x1e4>)
   1f7a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f7aa:	4b27      	ldr	r3, [pc, #156]	; (1f848 <xQueueSemaphoreTake+0x1e8>)
   1f7ac:	4798      	blx	r3
   1f7ae:	1e03      	subs	r3, r0, #0
   1f7b0:	d000      	beq.n	1f7b4 <xQueueSemaphoreTake+0x154>
   1f7b2:	e779      	b.n	1f6a8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1f7b4:	4b1b      	ldr	r3, [pc, #108]	; (1f824 <xQueueSemaphoreTake+0x1c4>)
   1f7b6:	4798      	blx	r3
   1f7b8:	e776      	b.n	1f6a8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1f7ba:	69fb      	ldr	r3, [r7, #28]
   1f7bc:	0018      	movs	r0, r3
   1f7be:	4b21      	ldr	r3, [pc, #132]	; (1f844 <xQueueSemaphoreTake+0x1e4>)
   1f7c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1f7c2:	4b21      	ldr	r3, [pc, #132]	; (1f848 <xQueueSemaphoreTake+0x1e8>)
   1f7c4:	4798      	blx	r3
   1f7c6:	e76f      	b.n	1f6a8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1f7c8:	69fb      	ldr	r3, [r7, #28]
   1f7ca:	0018      	movs	r0, r3
   1f7cc:	4b1d      	ldr	r3, [pc, #116]	; (1f844 <xQueueSemaphoreTake+0x1e4>)
   1f7ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1f7d0:	4b1d      	ldr	r3, [pc, #116]	; (1f848 <xQueueSemaphoreTake+0x1e8>)
   1f7d2:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1f7d4:	69fb      	ldr	r3, [r7, #28]
   1f7d6:	0018      	movs	r0, r3
   1f7d8:	4b17      	ldr	r3, [pc, #92]	; (1f838 <xQueueSemaphoreTake+0x1d8>)
   1f7da:	4798      	blx	r3
   1f7dc:	1e03      	subs	r3, r0, #0
   1f7de:	d100      	bne.n	1f7e2 <xQueueSemaphoreTake+0x182>
   1f7e0:	e762      	b.n	1f6a8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1f7e2:	6a3b      	ldr	r3, [r7, #32]
   1f7e4:	2b00      	cmp	r3, #0
   1f7e6:	d010      	beq.n	1f80a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   1f7e8:	4b0b      	ldr	r3, [pc, #44]	; (1f818 <xQueueSemaphoreTake+0x1b8>)
   1f7ea:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1f7ec:	69fb      	ldr	r3, [r7, #28]
   1f7ee:	0018      	movs	r0, r3
   1f7f0:	4b16      	ldr	r3, [pc, #88]	; (1f84c <xQueueSemaphoreTake+0x1ec>)
   1f7f2:	4798      	blx	r3
   1f7f4:	0003      	movs	r3, r0
   1f7f6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1f7f8:	69fb      	ldr	r3, [r7, #28]
   1f7fa:	685b      	ldr	r3, [r3, #4]
   1f7fc:	697a      	ldr	r2, [r7, #20]
   1f7fe:	0011      	movs	r1, r2
   1f800:	0018      	movs	r0, r3
   1f802:	4b13      	ldr	r3, [pc, #76]	; (1f850 <xQueueSemaphoreTake+0x1f0>)
   1f804:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1f806:	4b08      	ldr	r3, [pc, #32]	; (1f828 <xQueueSemaphoreTake+0x1c8>)
   1f808:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1f80a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1f80c:	0018      	movs	r0, r3
   1f80e:	46bd      	mov	sp, r7
   1f810:	b00a      	add	sp, #40	; 0x28
   1f812:	bd80      	pop	{r7, pc}
   1f814:	000208f1 	.word	0x000208f1
   1f818:	0001ed51 	.word	0x0001ed51
   1f81c:	00020bbd 	.word	0x00020bbd
   1f820:	000205b9 	.word	0x000205b9
   1f824:	0001ed31 	.word	0x0001ed31
   1f828:	0001ed75 	.word	0x0001ed75
   1f82c:	00020679 	.word	0x00020679
   1f830:	00020181 	.word	0x00020181
   1f834:	000206a1 	.word	0x000206a1
   1f838:	0001faa1 	.word	0x0001faa1
   1f83c:	00020929 	.word	0x00020929
   1f840:	00020521 	.word	0x00020521
   1f844:	0001f9b1 	.word	0x0001f9b1
   1f848:	00020199 	.word	0x00020199
   1f84c:	0001f855 	.word	0x0001f855
   1f850:	00020acd 	.word	0x00020acd

0001f854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1f854:	b580      	push	{r7, lr}
   1f856:	b084      	sub	sp, #16
   1f858:	af00      	add	r7, sp, #0
   1f85a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1f85c:	687b      	ldr	r3, [r7, #4]
   1f85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f860:	2b00      	cmp	r3, #0
   1f862:	d006      	beq.n	1f872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1f864:	687b      	ldr	r3, [r7, #4]
   1f866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f868:	681b      	ldr	r3, [r3, #0]
   1f86a:	2205      	movs	r2, #5
   1f86c:	1ad3      	subs	r3, r2, r3
   1f86e:	60fb      	str	r3, [r7, #12]
   1f870:	e001      	b.n	1f876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1f872:	2300      	movs	r3, #0
   1f874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1f876:	68fb      	ldr	r3, [r7, #12]
	}
   1f878:	0018      	movs	r0, r3
   1f87a:	46bd      	mov	sp, r7
   1f87c:	b004      	add	sp, #16
   1f87e:	bd80      	pop	{r7, pc}

0001f880 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1f880:	b580      	push	{r7, lr}
   1f882:	b086      	sub	sp, #24
   1f884:	af00      	add	r7, sp, #0
   1f886:	60f8      	str	r0, [r7, #12]
   1f888:	60b9      	str	r1, [r7, #8]
   1f88a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1f88c:	2300      	movs	r3, #0
   1f88e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1f890:	68fb      	ldr	r3, [r7, #12]
   1f892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f894:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1f896:	68fb      	ldr	r3, [r7, #12]
   1f898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f89a:	2b00      	cmp	r3, #0
   1f89c:	d10e      	bne.n	1f8bc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1f89e:	68fb      	ldr	r3, [r7, #12]
   1f8a0:	681b      	ldr	r3, [r3, #0]
   1f8a2:	2b00      	cmp	r3, #0
   1f8a4:	d14e      	bne.n	1f944 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1f8a6:	68fb      	ldr	r3, [r7, #12]
   1f8a8:	685b      	ldr	r3, [r3, #4]
   1f8aa:	0018      	movs	r0, r3
   1f8ac:	4b2a      	ldr	r3, [pc, #168]	; (1f958 <prvCopyDataToQueue+0xd8>)
   1f8ae:	4798      	blx	r3
   1f8b0:	0003      	movs	r3, r0
   1f8b2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1f8b4:	68fb      	ldr	r3, [r7, #12]
   1f8b6:	2200      	movs	r2, #0
   1f8b8:	605a      	str	r2, [r3, #4]
   1f8ba:	e043      	b.n	1f944 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1f8bc:	687b      	ldr	r3, [r7, #4]
   1f8be:	2b00      	cmp	r3, #0
   1f8c0:	d119      	bne.n	1f8f6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1f8c2:	68fb      	ldr	r3, [r7, #12]
   1f8c4:	6898      	ldr	r0, [r3, #8]
   1f8c6:	68fb      	ldr	r3, [r7, #12]
   1f8c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f8ca:	68bb      	ldr	r3, [r7, #8]
   1f8cc:	0019      	movs	r1, r3
   1f8ce:	4b23      	ldr	r3, [pc, #140]	; (1f95c <prvCopyDataToQueue+0xdc>)
   1f8d0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1f8d2:	68fb      	ldr	r3, [r7, #12]
   1f8d4:	689a      	ldr	r2, [r3, #8]
   1f8d6:	68fb      	ldr	r3, [r7, #12]
   1f8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f8da:	18d2      	adds	r2, r2, r3
   1f8dc:	68fb      	ldr	r3, [r7, #12]
   1f8de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f8e0:	68fb      	ldr	r3, [r7, #12]
   1f8e2:	689a      	ldr	r2, [r3, #8]
   1f8e4:	68fb      	ldr	r3, [r7, #12]
   1f8e6:	685b      	ldr	r3, [r3, #4]
   1f8e8:	429a      	cmp	r2, r3
   1f8ea:	d32b      	bcc.n	1f944 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1f8ec:	68fb      	ldr	r3, [r7, #12]
   1f8ee:	681a      	ldr	r2, [r3, #0]
   1f8f0:	68fb      	ldr	r3, [r7, #12]
   1f8f2:	609a      	str	r2, [r3, #8]
   1f8f4:	e026      	b.n	1f944 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f8f6:	68fb      	ldr	r3, [r7, #12]
   1f8f8:	68d8      	ldr	r0, [r3, #12]
   1f8fa:	68fb      	ldr	r3, [r7, #12]
   1f8fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f8fe:	68bb      	ldr	r3, [r7, #8]
   1f900:	0019      	movs	r1, r3
   1f902:	4b16      	ldr	r3, [pc, #88]	; (1f95c <prvCopyDataToQueue+0xdc>)
   1f904:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1f906:	68fb      	ldr	r3, [r7, #12]
   1f908:	68da      	ldr	r2, [r3, #12]
   1f90a:	68fb      	ldr	r3, [r7, #12]
   1f90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f90e:	425b      	negs	r3, r3
   1f910:	18d2      	adds	r2, r2, r3
   1f912:	68fb      	ldr	r3, [r7, #12]
   1f914:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1f916:	68fb      	ldr	r3, [r7, #12]
   1f918:	68da      	ldr	r2, [r3, #12]
   1f91a:	68fb      	ldr	r3, [r7, #12]
   1f91c:	681b      	ldr	r3, [r3, #0]
   1f91e:	429a      	cmp	r2, r3
   1f920:	d207      	bcs.n	1f932 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1f922:	68fb      	ldr	r3, [r7, #12]
   1f924:	685a      	ldr	r2, [r3, #4]
   1f926:	68fb      	ldr	r3, [r7, #12]
   1f928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f92a:	425b      	negs	r3, r3
   1f92c:	18d2      	adds	r2, r2, r3
   1f92e:	68fb      	ldr	r3, [r7, #12]
   1f930:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1f932:	687b      	ldr	r3, [r7, #4]
   1f934:	2b02      	cmp	r3, #2
   1f936:	d105      	bne.n	1f944 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1f938:	693b      	ldr	r3, [r7, #16]
   1f93a:	2b00      	cmp	r3, #0
   1f93c:	d002      	beq.n	1f944 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1f93e:	693b      	ldr	r3, [r7, #16]
   1f940:	3b01      	subs	r3, #1
   1f942:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1f944:	693b      	ldr	r3, [r7, #16]
   1f946:	1c5a      	adds	r2, r3, #1
   1f948:	68fb      	ldr	r3, [r7, #12]
   1f94a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1f94c:	697b      	ldr	r3, [r7, #20]
}
   1f94e:	0018      	movs	r0, r3
   1f950:	46bd      	mov	sp, r7
   1f952:	b006      	add	sp, #24
   1f954:	bd80      	pop	{r7, pc}
   1f956:	46c0      	nop			; (mov r8, r8)
   1f958:	00020a0d 	.word	0x00020a0d
   1f95c:	00028e5d 	.word	0x00028e5d

0001f960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1f960:	b580      	push	{r7, lr}
   1f962:	b082      	sub	sp, #8
   1f964:	af00      	add	r7, sp, #0
   1f966:	6078      	str	r0, [r7, #4]
   1f968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1f96a:	687b      	ldr	r3, [r7, #4]
   1f96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f96e:	2b00      	cmp	r3, #0
   1f970:	d018      	beq.n	1f9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1f972:	687b      	ldr	r3, [r7, #4]
   1f974:	68da      	ldr	r2, [r3, #12]
   1f976:	687b      	ldr	r3, [r7, #4]
   1f978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f97a:	18d2      	adds	r2, r2, r3
   1f97c:	687b      	ldr	r3, [r7, #4]
   1f97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1f980:	687b      	ldr	r3, [r7, #4]
   1f982:	68da      	ldr	r2, [r3, #12]
   1f984:	687b      	ldr	r3, [r7, #4]
   1f986:	685b      	ldr	r3, [r3, #4]
   1f988:	429a      	cmp	r2, r3
   1f98a:	d303      	bcc.n	1f994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1f98c:	687b      	ldr	r3, [r7, #4]
   1f98e:	681a      	ldr	r2, [r3, #0]
   1f990:	687b      	ldr	r3, [r7, #4]
   1f992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1f994:	687b      	ldr	r3, [r7, #4]
   1f996:	68d9      	ldr	r1, [r3, #12]
   1f998:	687b      	ldr	r3, [r7, #4]
   1f99a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1f99c:	683b      	ldr	r3, [r7, #0]
   1f99e:	0018      	movs	r0, r3
   1f9a0:	4b02      	ldr	r3, [pc, #8]	; (1f9ac <prvCopyDataFromQueue+0x4c>)
   1f9a2:	4798      	blx	r3
	}
}
   1f9a4:	46c0      	nop			; (mov r8, r8)
   1f9a6:	46bd      	mov	sp, r7
   1f9a8:	b002      	add	sp, #8
   1f9aa:	bd80      	pop	{r7, pc}
   1f9ac:	00028e5d 	.word	0x00028e5d

0001f9b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1f9b0:	b580      	push	{r7, lr}
   1f9b2:	b084      	sub	sp, #16
   1f9b4:	af00      	add	r7, sp, #0
   1f9b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1f9b8:	4b34      	ldr	r3, [pc, #208]	; (1fa8c <prvUnlockQueue+0xdc>)
   1f9ba:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1f9bc:	230f      	movs	r3, #15
   1f9be:	18fb      	adds	r3, r7, r3
   1f9c0:	687a      	ldr	r2, [r7, #4]
   1f9c2:	2145      	movs	r1, #69	; 0x45
   1f9c4:	5c52      	ldrb	r2, [r2, r1]
   1f9c6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1f9c8:	e022      	b.n	1fa10 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1f9ca:	687b      	ldr	r3, [r7, #4]
   1f9cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f9ce:	2b00      	cmp	r3, #0
   1f9d0:	d009      	beq.n	1f9e6 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1f9d2:	687b      	ldr	r3, [r7, #4]
   1f9d4:	2100      	movs	r1, #0
   1f9d6:	0018      	movs	r0, r3
   1f9d8:	4b2d      	ldr	r3, [pc, #180]	; (1fa90 <prvUnlockQueue+0xe0>)
   1f9da:	4798      	blx	r3
   1f9dc:	1e03      	subs	r3, r0, #0
   1f9de:	d00f      	beq.n	1fa00 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1f9e0:	4b2c      	ldr	r3, [pc, #176]	; (1fa94 <prvUnlockQueue+0xe4>)
   1f9e2:	4798      	blx	r3
   1f9e4:	e00c      	b.n	1fa00 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1f9e6:	687b      	ldr	r3, [r7, #4]
   1f9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f9ea:	2b00      	cmp	r3, #0
   1f9ec:	d017      	beq.n	1fa1e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1f9ee:	687b      	ldr	r3, [r7, #4]
   1f9f0:	3324      	adds	r3, #36	; 0x24
   1f9f2:	0018      	movs	r0, r3
   1f9f4:	4b28      	ldr	r3, [pc, #160]	; (1fa98 <prvUnlockQueue+0xe8>)
   1f9f6:	4798      	blx	r3
   1f9f8:	1e03      	subs	r3, r0, #0
   1f9fa:	d001      	beq.n	1fa00 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1f9fc:	4b25      	ldr	r3, [pc, #148]	; (1fa94 <prvUnlockQueue+0xe4>)
   1f9fe:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1fa00:	230f      	movs	r3, #15
   1fa02:	18fb      	adds	r3, r7, r3
   1fa04:	781b      	ldrb	r3, [r3, #0]
   1fa06:	3b01      	subs	r3, #1
   1fa08:	b2da      	uxtb	r2, r3
   1fa0a:	230f      	movs	r3, #15
   1fa0c:	18fb      	adds	r3, r7, r3
   1fa0e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1fa10:	230f      	movs	r3, #15
   1fa12:	18fb      	adds	r3, r7, r3
   1fa14:	781b      	ldrb	r3, [r3, #0]
   1fa16:	b25b      	sxtb	r3, r3
   1fa18:	2b00      	cmp	r3, #0
   1fa1a:	dcd6      	bgt.n	1f9ca <prvUnlockQueue+0x1a>
   1fa1c:	e000      	b.n	1fa20 <prvUnlockQueue+0x70>
						break;
   1fa1e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1fa20:	687b      	ldr	r3, [r7, #4]
   1fa22:	2245      	movs	r2, #69	; 0x45
   1fa24:	21ff      	movs	r1, #255	; 0xff
   1fa26:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1fa28:	4b1c      	ldr	r3, [pc, #112]	; (1fa9c <prvUnlockQueue+0xec>)
   1fa2a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1fa2c:	4b17      	ldr	r3, [pc, #92]	; (1fa8c <prvUnlockQueue+0xdc>)
   1fa2e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1fa30:	230e      	movs	r3, #14
   1fa32:	18fb      	adds	r3, r7, r3
   1fa34:	687a      	ldr	r2, [r7, #4]
   1fa36:	2144      	movs	r1, #68	; 0x44
   1fa38:	5c52      	ldrb	r2, [r2, r1]
   1fa3a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fa3c:	e014      	b.n	1fa68 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fa3e:	687b      	ldr	r3, [r7, #4]
   1fa40:	691b      	ldr	r3, [r3, #16]
   1fa42:	2b00      	cmp	r3, #0
   1fa44:	d017      	beq.n	1fa76 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fa46:	687b      	ldr	r3, [r7, #4]
   1fa48:	3310      	adds	r3, #16
   1fa4a:	0018      	movs	r0, r3
   1fa4c:	4b12      	ldr	r3, [pc, #72]	; (1fa98 <prvUnlockQueue+0xe8>)
   1fa4e:	4798      	blx	r3
   1fa50:	1e03      	subs	r3, r0, #0
   1fa52:	d001      	beq.n	1fa58 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1fa54:	4b0f      	ldr	r3, [pc, #60]	; (1fa94 <prvUnlockQueue+0xe4>)
   1fa56:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1fa58:	230e      	movs	r3, #14
   1fa5a:	18fb      	adds	r3, r7, r3
   1fa5c:	781b      	ldrb	r3, [r3, #0]
   1fa5e:	3b01      	subs	r3, #1
   1fa60:	b2da      	uxtb	r2, r3
   1fa62:	230e      	movs	r3, #14
   1fa64:	18fb      	adds	r3, r7, r3
   1fa66:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1fa68:	230e      	movs	r3, #14
   1fa6a:	18fb      	adds	r3, r7, r3
   1fa6c:	781b      	ldrb	r3, [r3, #0]
   1fa6e:	b25b      	sxtb	r3, r3
   1fa70:	2b00      	cmp	r3, #0
   1fa72:	dce4      	bgt.n	1fa3e <prvUnlockQueue+0x8e>
   1fa74:	e000      	b.n	1fa78 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1fa76:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1fa78:	687b      	ldr	r3, [r7, #4]
   1fa7a:	2244      	movs	r2, #68	; 0x44
   1fa7c:	21ff      	movs	r1, #255	; 0xff
   1fa7e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1fa80:	4b06      	ldr	r3, [pc, #24]	; (1fa9c <prvUnlockQueue+0xec>)
   1fa82:	4798      	blx	r3
}
   1fa84:	46c0      	nop			; (mov r8, r8)
   1fa86:	46bd      	mov	sp, r7
   1fa88:	b004      	add	sp, #16
   1fa8a:	bd80      	pop	{r7, pc}
   1fa8c:	0001ed51 	.word	0x0001ed51
   1fa90:	0001fb85 	.word	0x0001fb85
   1fa94:	0002074d 	.word	0x0002074d
   1fa98:	000205b9 	.word	0x000205b9
   1fa9c:	0001ed75 	.word	0x0001ed75

0001faa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1faa0:	b580      	push	{r7, lr}
   1faa2:	b084      	sub	sp, #16
   1faa4:	af00      	add	r7, sp, #0
   1faa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1faa8:	4b08      	ldr	r3, [pc, #32]	; (1facc <prvIsQueueEmpty+0x2c>)
   1faaa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1faac:	687b      	ldr	r3, [r7, #4]
   1faae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fab0:	2b00      	cmp	r3, #0
   1fab2:	d102      	bne.n	1faba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1fab4:	2301      	movs	r3, #1
   1fab6:	60fb      	str	r3, [r7, #12]
   1fab8:	e001      	b.n	1fabe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1faba:	2300      	movs	r3, #0
   1fabc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1fabe:	4b04      	ldr	r3, [pc, #16]	; (1fad0 <prvIsQueueEmpty+0x30>)
   1fac0:	4798      	blx	r3

	return xReturn;
   1fac2:	68fb      	ldr	r3, [r7, #12]
}
   1fac4:	0018      	movs	r0, r3
   1fac6:	46bd      	mov	sp, r7
   1fac8:	b004      	add	sp, #16
   1faca:	bd80      	pop	{r7, pc}
   1facc:	0001ed51 	.word	0x0001ed51
   1fad0:	0001ed75 	.word	0x0001ed75

0001fad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1fad4:	b580      	push	{r7, lr}
   1fad6:	b084      	sub	sp, #16
   1fad8:	af00      	add	r7, sp, #0
   1fada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1fadc:	4b09      	ldr	r3, [pc, #36]	; (1fb04 <prvIsQueueFull+0x30>)
   1fade:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1fae0:	687b      	ldr	r3, [r7, #4]
   1fae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fae4:	687b      	ldr	r3, [r7, #4]
   1fae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fae8:	429a      	cmp	r2, r3
   1faea:	d102      	bne.n	1faf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1faec:	2301      	movs	r3, #1
   1faee:	60fb      	str	r3, [r7, #12]
   1faf0:	e001      	b.n	1faf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1faf2:	2300      	movs	r3, #0
   1faf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1faf6:	4b04      	ldr	r3, [pc, #16]	; (1fb08 <prvIsQueueFull+0x34>)
   1faf8:	4798      	blx	r3

	return xReturn;
   1fafa:	68fb      	ldr	r3, [r7, #12]
}
   1fafc:	0018      	movs	r0, r3
   1fafe:	46bd      	mov	sp, r7
   1fb00:	b004      	add	sp, #16
   1fb02:	bd80      	pop	{r7, pc}
   1fb04:	0001ed51 	.word	0x0001ed51
   1fb08:	0001ed75 	.word	0x0001ed75

0001fb0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1fb0c:	b580      	push	{r7, lr}
   1fb0e:	b086      	sub	sp, #24
   1fb10:	af00      	add	r7, sp, #0
   1fb12:	60f8      	str	r0, [r7, #12]
   1fb14:	60b9      	str	r1, [r7, #8]
   1fb16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fb18:	68fb      	ldr	r3, [r7, #12]
   1fb1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1fb1c:	4b15      	ldr	r3, [pc, #84]	; (1fb74 <vQueueWaitForMessageRestricted+0x68>)
   1fb1e:	4798      	blx	r3
   1fb20:	697b      	ldr	r3, [r7, #20]
   1fb22:	2244      	movs	r2, #68	; 0x44
   1fb24:	5c9b      	ldrb	r3, [r3, r2]
   1fb26:	b25b      	sxtb	r3, r3
   1fb28:	3301      	adds	r3, #1
   1fb2a:	d103      	bne.n	1fb34 <vQueueWaitForMessageRestricted+0x28>
   1fb2c:	697b      	ldr	r3, [r7, #20]
   1fb2e:	2244      	movs	r2, #68	; 0x44
   1fb30:	2100      	movs	r1, #0
   1fb32:	5499      	strb	r1, [r3, r2]
   1fb34:	697b      	ldr	r3, [r7, #20]
   1fb36:	2245      	movs	r2, #69	; 0x45
   1fb38:	5c9b      	ldrb	r3, [r3, r2]
   1fb3a:	b25b      	sxtb	r3, r3
   1fb3c:	3301      	adds	r3, #1
   1fb3e:	d103      	bne.n	1fb48 <vQueueWaitForMessageRestricted+0x3c>
   1fb40:	697b      	ldr	r3, [r7, #20]
   1fb42:	2245      	movs	r2, #69	; 0x45
   1fb44:	2100      	movs	r1, #0
   1fb46:	5499      	strb	r1, [r3, r2]
   1fb48:	4b0b      	ldr	r3, [pc, #44]	; (1fb78 <vQueueWaitForMessageRestricted+0x6c>)
   1fb4a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1fb4c:	697b      	ldr	r3, [r7, #20]
   1fb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fb50:	2b00      	cmp	r3, #0
   1fb52:	d106      	bne.n	1fb62 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1fb54:	697b      	ldr	r3, [r7, #20]
   1fb56:	3324      	adds	r3, #36	; 0x24
   1fb58:	687a      	ldr	r2, [r7, #4]
   1fb5a:	68b9      	ldr	r1, [r7, #8]
   1fb5c:	0018      	movs	r0, r3
   1fb5e:	4b07      	ldr	r3, [pc, #28]	; (1fb7c <vQueueWaitForMessageRestricted+0x70>)
   1fb60:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1fb62:	697b      	ldr	r3, [r7, #20]
   1fb64:	0018      	movs	r0, r3
   1fb66:	4b06      	ldr	r3, [pc, #24]	; (1fb80 <vQueueWaitForMessageRestricted+0x74>)
   1fb68:	4798      	blx	r3
	}
   1fb6a:	46c0      	nop			; (mov r8, r8)
   1fb6c:	46bd      	mov	sp, r7
   1fb6e:	b006      	add	sp, #24
   1fb70:	bd80      	pop	{r7, pc}
   1fb72:	46c0      	nop			; (mov r8, r8)
   1fb74:	0001ed51 	.word	0x0001ed51
   1fb78:	0001ed75 	.word	0x0001ed75
   1fb7c:	00020565 	.word	0x00020565
   1fb80:	0001f9b1 	.word	0x0001f9b1

0001fb84 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1fb84:	b580      	push	{r7, lr}
   1fb86:	b086      	sub	sp, #24
   1fb88:	af00      	add	r7, sp, #0
   1fb8a:	6078      	str	r0, [r7, #4]
   1fb8c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1fb8e:	687b      	ldr	r3, [r7, #4]
   1fb90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fb92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1fb94:	2300      	movs	r3, #0
   1fb96:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1fb98:	693b      	ldr	r3, [r7, #16]
   1fb9a:	2b00      	cmp	r3, #0
   1fb9c:	d101      	bne.n	1fba2 <prvNotifyQueueSetContainer+0x1e>
   1fb9e:	b672      	cpsid	i
   1fba0:	e7fe      	b.n	1fba0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1fba2:	693b      	ldr	r3, [r7, #16]
   1fba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fba6:	693b      	ldr	r3, [r7, #16]
   1fba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fbaa:	429a      	cmp	r2, r3
   1fbac:	d301      	bcc.n	1fbb2 <prvNotifyQueueSetContainer+0x2e>
   1fbae:	b672      	cpsid	i
   1fbb0:	e7fe      	b.n	1fbb0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1fbb2:	693b      	ldr	r3, [r7, #16]
   1fbb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fbb6:	693b      	ldr	r3, [r7, #16]
   1fbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fbba:	429a      	cmp	r2, r3
   1fbbc:	d22a      	bcs.n	1fc14 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1fbbe:	230f      	movs	r3, #15
   1fbc0:	18fb      	adds	r3, r7, r3
   1fbc2:	693a      	ldr	r2, [r7, #16]
   1fbc4:	2145      	movs	r1, #69	; 0x45
   1fbc6:	5c52      	ldrb	r2, [r2, r1]
   1fbc8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1fbca:	683a      	ldr	r2, [r7, #0]
   1fbcc:	1d39      	adds	r1, r7, #4
   1fbce:	693b      	ldr	r3, [r7, #16]
   1fbd0:	0018      	movs	r0, r3
   1fbd2:	4b13      	ldr	r3, [pc, #76]	; (1fc20 <prvNotifyQueueSetContainer+0x9c>)
   1fbd4:	4798      	blx	r3
   1fbd6:	0003      	movs	r3, r0
   1fbd8:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1fbda:	230f      	movs	r3, #15
   1fbdc:	18fb      	adds	r3, r7, r3
   1fbde:	781b      	ldrb	r3, [r3, #0]
   1fbe0:	b25b      	sxtb	r3, r3
   1fbe2:	3301      	adds	r3, #1
   1fbe4:	d10d      	bne.n	1fc02 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1fbe6:	693b      	ldr	r3, [r7, #16]
   1fbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fbea:	2b00      	cmp	r3, #0
   1fbec:	d012      	beq.n	1fc14 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1fbee:	693b      	ldr	r3, [r7, #16]
   1fbf0:	3324      	adds	r3, #36	; 0x24
   1fbf2:	0018      	movs	r0, r3
   1fbf4:	4b0b      	ldr	r3, [pc, #44]	; (1fc24 <prvNotifyQueueSetContainer+0xa0>)
   1fbf6:	4798      	blx	r3
   1fbf8:	1e03      	subs	r3, r0, #0
   1fbfa:	d00b      	beq.n	1fc14 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1fbfc:	2301      	movs	r3, #1
   1fbfe:	617b      	str	r3, [r7, #20]
   1fc00:	e008      	b.n	1fc14 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fc02:	230f      	movs	r3, #15
   1fc04:	18fb      	adds	r3, r7, r3
   1fc06:	781b      	ldrb	r3, [r3, #0]
   1fc08:	3301      	adds	r3, #1
   1fc0a:	b2db      	uxtb	r3, r3
   1fc0c:	b259      	sxtb	r1, r3
   1fc0e:	693b      	ldr	r3, [r7, #16]
   1fc10:	2245      	movs	r2, #69	; 0x45
   1fc12:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fc14:	697b      	ldr	r3, [r7, #20]
	}
   1fc16:	0018      	movs	r0, r3
   1fc18:	46bd      	mov	sp, r7
   1fc1a:	b006      	add	sp, #24
   1fc1c:	bd80      	pop	{r7, pc}
   1fc1e:	46c0      	nop			; (mov r8, r8)
   1fc20:	0001f881 	.word	0x0001f881
   1fc24:	000205b9 	.word	0x000205b9

0001fc28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1fc28:	b590      	push	{r4, r7, lr}
   1fc2a:	b08d      	sub	sp, #52	; 0x34
   1fc2c:	af04      	add	r7, sp, #16
   1fc2e:	60f8      	str	r0, [r7, #12]
   1fc30:	60b9      	str	r1, [r7, #8]
   1fc32:	603b      	str	r3, [r7, #0]
   1fc34:	1dbb      	adds	r3, r7, #6
   1fc36:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fc38:	1dbb      	adds	r3, r7, #6
   1fc3a:	881b      	ldrh	r3, [r3, #0]
   1fc3c:	009b      	lsls	r3, r3, #2
   1fc3e:	0018      	movs	r0, r3
   1fc40:	4b1d      	ldr	r3, [pc, #116]	; (1fcb8 <xTaskCreate+0x90>)
   1fc42:	4798      	blx	r3
   1fc44:	0003      	movs	r3, r0
   1fc46:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1fc48:	697b      	ldr	r3, [r7, #20]
   1fc4a:	2b00      	cmp	r3, #0
   1fc4c:	d010      	beq.n	1fc70 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1fc4e:	2050      	movs	r0, #80	; 0x50
   1fc50:	4b19      	ldr	r3, [pc, #100]	; (1fcb8 <xTaskCreate+0x90>)
   1fc52:	4798      	blx	r3
   1fc54:	0003      	movs	r3, r0
   1fc56:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1fc58:	69fb      	ldr	r3, [r7, #28]
   1fc5a:	2b00      	cmp	r3, #0
   1fc5c:	d003      	beq.n	1fc66 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1fc5e:	69fb      	ldr	r3, [r7, #28]
   1fc60:	697a      	ldr	r2, [r7, #20]
   1fc62:	631a      	str	r2, [r3, #48]	; 0x30
   1fc64:	e006      	b.n	1fc74 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1fc66:	697b      	ldr	r3, [r7, #20]
   1fc68:	0018      	movs	r0, r3
   1fc6a:	4b14      	ldr	r3, [pc, #80]	; (1fcbc <xTaskCreate+0x94>)
   1fc6c:	4798      	blx	r3
   1fc6e:	e001      	b.n	1fc74 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1fc70:	2300      	movs	r3, #0
   1fc72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1fc74:	69fb      	ldr	r3, [r7, #28]
   1fc76:	2b00      	cmp	r3, #0
   1fc78:	d016      	beq.n	1fca8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1fc7a:	1dbb      	adds	r3, r7, #6
   1fc7c:	881a      	ldrh	r2, [r3, #0]
   1fc7e:	683c      	ldr	r4, [r7, #0]
   1fc80:	68b9      	ldr	r1, [r7, #8]
   1fc82:	68f8      	ldr	r0, [r7, #12]
   1fc84:	2300      	movs	r3, #0
   1fc86:	9303      	str	r3, [sp, #12]
   1fc88:	69fb      	ldr	r3, [r7, #28]
   1fc8a:	9302      	str	r3, [sp, #8]
   1fc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fc8e:	9301      	str	r3, [sp, #4]
   1fc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fc92:	9300      	str	r3, [sp, #0]
   1fc94:	0023      	movs	r3, r4
   1fc96:	4c0a      	ldr	r4, [pc, #40]	; (1fcc0 <xTaskCreate+0x98>)
   1fc98:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1fc9a:	69fb      	ldr	r3, [r7, #28]
   1fc9c:	0018      	movs	r0, r3
   1fc9e:	4b09      	ldr	r3, [pc, #36]	; (1fcc4 <xTaskCreate+0x9c>)
   1fca0:	4798      	blx	r3
			xReturn = pdPASS;
   1fca2:	2301      	movs	r3, #1
   1fca4:	61bb      	str	r3, [r7, #24]
   1fca6:	e002      	b.n	1fcae <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1fca8:	2301      	movs	r3, #1
   1fcaa:	425b      	negs	r3, r3
   1fcac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1fcae:	69bb      	ldr	r3, [r7, #24]
	}
   1fcb0:	0018      	movs	r0, r3
   1fcb2:	46bd      	mov	sp, r7
   1fcb4:	b009      	add	sp, #36	; 0x24
   1fcb6:	bd90      	pop	{r4, r7, pc}
   1fcb8:	0001ee8d 	.word	0x0001ee8d
   1fcbc:	0001eec1 	.word	0x0001eec1
   1fcc0:	0001fcc9 	.word	0x0001fcc9
   1fcc4:	0001fdc5 	.word	0x0001fdc5

0001fcc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1fcc8:	b580      	push	{r7, lr}
   1fcca:	b086      	sub	sp, #24
   1fccc:	af00      	add	r7, sp, #0
   1fcce:	60f8      	str	r0, [r7, #12]
   1fcd0:	60b9      	str	r1, [r7, #8]
   1fcd2:	607a      	str	r2, [r7, #4]
   1fcd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fcd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1fcda:	687b      	ldr	r3, [r7, #4]
   1fcdc:	4936      	ldr	r1, [pc, #216]	; (1fdb8 <prvInitialiseNewTask+0xf0>)
   1fcde:	468c      	mov	ip, r1
   1fce0:	4463      	add	r3, ip
   1fce2:	009b      	lsls	r3, r3, #2
   1fce4:	18d3      	adds	r3, r2, r3
   1fce6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1fce8:	693b      	ldr	r3, [r7, #16]
   1fcea:	2207      	movs	r2, #7
   1fcec:	4393      	bics	r3, r2
   1fcee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1fcf0:	693b      	ldr	r3, [r7, #16]
   1fcf2:	2207      	movs	r2, #7
   1fcf4:	4013      	ands	r3, r2
   1fcf6:	d001      	beq.n	1fcfc <prvInitialiseNewTask+0x34>
   1fcf8:	b672      	cpsid	i
   1fcfa:	e7fe      	b.n	1fcfa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fcfc:	2300      	movs	r3, #0
   1fcfe:	617b      	str	r3, [r7, #20]
   1fd00:	e013      	b.n	1fd2a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1fd02:	68ba      	ldr	r2, [r7, #8]
   1fd04:	697b      	ldr	r3, [r7, #20]
   1fd06:	18d3      	adds	r3, r2, r3
   1fd08:	7818      	ldrb	r0, [r3, #0]
   1fd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fd0c:	2134      	movs	r1, #52	; 0x34
   1fd0e:	697b      	ldr	r3, [r7, #20]
   1fd10:	18d3      	adds	r3, r2, r3
   1fd12:	185b      	adds	r3, r3, r1
   1fd14:	1c02      	adds	r2, r0, #0
   1fd16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1fd18:	68ba      	ldr	r2, [r7, #8]
   1fd1a:	697b      	ldr	r3, [r7, #20]
   1fd1c:	18d3      	adds	r3, r2, r3
   1fd1e:	781b      	ldrb	r3, [r3, #0]
   1fd20:	2b00      	cmp	r3, #0
   1fd22:	d006      	beq.n	1fd32 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1fd24:	697b      	ldr	r3, [r7, #20]
   1fd26:	3301      	adds	r3, #1
   1fd28:	617b      	str	r3, [r7, #20]
   1fd2a:	697b      	ldr	r3, [r7, #20]
   1fd2c:	2b09      	cmp	r3, #9
   1fd2e:	d9e8      	bls.n	1fd02 <prvInitialiseNewTask+0x3a>
   1fd30:	e000      	b.n	1fd34 <prvInitialiseNewTask+0x6c>
		{
			break;
   1fd32:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1fd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd36:	223d      	movs	r2, #61	; 0x3d
   1fd38:	2100      	movs	r1, #0
   1fd3a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1fd3c:	6a3b      	ldr	r3, [r7, #32]
   1fd3e:	2b04      	cmp	r3, #4
   1fd40:	d901      	bls.n	1fd46 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1fd42:	2304      	movs	r3, #4
   1fd44:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1fd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd48:	6a3a      	ldr	r2, [r7, #32]
   1fd4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1fd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd4e:	6a3a      	ldr	r2, [r7, #32]
   1fd50:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   1fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd54:	2200      	movs	r2, #0
   1fd56:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd5a:	3304      	adds	r3, #4
   1fd5c:	0018      	movs	r0, r3
   1fd5e:	4b17      	ldr	r3, [pc, #92]	; (1fdbc <prvInitialiseNewTask+0xf4>)
   1fd60:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1fd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd64:	3318      	adds	r3, #24
   1fd66:	0018      	movs	r0, r3
   1fd68:	4b14      	ldr	r3, [pc, #80]	; (1fdbc <prvInitialiseNewTask+0xf4>)
   1fd6a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1fd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fd70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fd72:	6a3b      	ldr	r3, [r7, #32]
   1fd74:	2205      	movs	r2, #5
   1fd76:	1ad2      	subs	r2, r2, r3
   1fd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1fd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fd80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd84:	2200      	movs	r2, #0
   1fd86:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fd8a:	224c      	movs	r2, #76	; 0x4c
   1fd8c:	2100      	movs	r1, #0
   1fd8e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1fd90:	683a      	ldr	r2, [r7, #0]
   1fd92:	68f9      	ldr	r1, [r7, #12]
   1fd94:	693b      	ldr	r3, [r7, #16]
   1fd96:	0018      	movs	r0, r3
   1fd98:	4b09      	ldr	r3, [pc, #36]	; (1fdc0 <prvInitialiseNewTask+0xf8>)
   1fd9a:	4798      	blx	r3
   1fd9c:	0002      	movs	r2, r0
   1fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fda0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fda4:	2b00      	cmp	r3, #0
   1fda6:	d002      	beq.n	1fdae <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fdaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1fdac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fdae:	46c0      	nop			; (mov r8, r8)
   1fdb0:	46bd      	mov	sp, r7
   1fdb2:	b006      	add	sp, #24
   1fdb4:	bd80      	pop	{r7, pc}
   1fdb6:	46c0      	nop			; (mov r8, r8)
   1fdb8:	3fffffff 	.word	0x3fffffff
   1fdbc:	0001ef31 	.word	0x0001ef31
   1fdc0:	0001ec15 	.word	0x0001ec15

0001fdc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1fdc4:	b580      	push	{r7, lr}
   1fdc6:	b082      	sub	sp, #8
   1fdc8:	af00      	add	r7, sp, #0
   1fdca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1fdcc:	4b29      	ldr	r3, [pc, #164]	; (1fe74 <prvAddNewTaskToReadyList+0xb0>)
   1fdce:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1fdd0:	4b29      	ldr	r3, [pc, #164]	; (1fe78 <prvAddNewTaskToReadyList+0xb4>)
   1fdd2:	681b      	ldr	r3, [r3, #0]
   1fdd4:	1c5a      	adds	r2, r3, #1
   1fdd6:	4b28      	ldr	r3, [pc, #160]	; (1fe78 <prvAddNewTaskToReadyList+0xb4>)
   1fdd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1fdda:	4b28      	ldr	r3, [pc, #160]	; (1fe7c <prvAddNewTaskToReadyList+0xb8>)
   1fddc:	681b      	ldr	r3, [r3, #0]
   1fdde:	2b00      	cmp	r3, #0
   1fde0:	d109      	bne.n	1fdf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1fde2:	4b26      	ldr	r3, [pc, #152]	; (1fe7c <prvAddNewTaskToReadyList+0xb8>)
   1fde4:	687a      	ldr	r2, [r7, #4]
   1fde6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1fde8:	4b23      	ldr	r3, [pc, #140]	; (1fe78 <prvAddNewTaskToReadyList+0xb4>)
   1fdea:	681b      	ldr	r3, [r3, #0]
   1fdec:	2b01      	cmp	r3, #1
   1fdee:	d110      	bne.n	1fe12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1fdf0:	4b23      	ldr	r3, [pc, #140]	; (1fe80 <prvAddNewTaskToReadyList+0xbc>)
   1fdf2:	4798      	blx	r3
   1fdf4:	e00d      	b.n	1fe12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1fdf6:	4b23      	ldr	r3, [pc, #140]	; (1fe84 <prvAddNewTaskToReadyList+0xc0>)
   1fdf8:	681b      	ldr	r3, [r3, #0]
   1fdfa:	2b00      	cmp	r3, #0
   1fdfc:	d109      	bne.n	1fe12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1fdfe:	4b1f      	ldr	r3, [pc, #124]	; (1fe7c <prvAddNewTaskToReadyList+0xb8>)
   1fe00:	681b      	ldr	r3, [r3, #0]
   1fe02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe04:	687b      	ldr	r3, [r7, #4]
   1fe06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe08:	429a      	cmp	r2, r3
   1fe0a:	d802      	bhi.n	1fe12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1fe0c:	4b1b      	ldr	r3, [pc, #108]	; (1fe7c <prvAddNewTaskToReadyList+0xb8>)
   1fe0e:	687a      	ldr	r2, [r7, #4]
   1fe10:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1fe12:	4b1d      	ldr	r3, [pc, #116]	; (1fe88 <prvAddNewTaskToReadyList+0xc4>)
   1fe14:	681b      	ldr	r3, [r3, #0]
   1fe16:	1c5a      	adds	r2, r3, #1
   1fe18:	4b1b      	ldr	r3, [pc, #108]	; (1fe88 <prvAddNewTaskToReadyList+0xc4>)
   1fe1a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1fe1c:	687b      	ldr	r3, [r7, #4]
   1fe1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe20:	4b1a      	ldr	r3, [pc, #104]	; (1fe8c <prvAddNewTaskToReadyList+0xc8>)
   1fe22:	681b      	ldr	r3, [r3, #0]
   1fe24:	429a      	cmp	r2, r3
   1fe26:	d903      	bls.n	1fe30 <prvAddNewTaskToReadyList+0x6c>
   1fe28:	687b      	ldr	r3, [r7, #4]
   1fe2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe2c:	4b17      	ldr	r3, [pc, #92]	; (1fe8c <prvAddNewTaskToReadyList+0xc8>)
   1fe2e:	601a      	str	r2, [r3, #0]
   1fe30:	687b      	ldr	r3, [r7, #4]
   1fe32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe34:	0013      	movs	r3, r2
   1fe36:	009b      	lsls	r3, r3, #2
   1fe38:	189b      	adds	r3, r3, r2
   1fe3a:	009b      	lsls	r3, r3, #2
   1fe3c:	4a14      	ldr	r2, [pc, #80]	; (1fe90 <prvAddNewTaskToReadyList+0xcc>)
   1fe3e:	189a      	adds	r2, r3, r2
   1fe40:	687b      	ldr	r3, [r7, #4]
   1fe42:	3304      	adds	r3, #4
   1fe44:	0019      	movs	r1, r3
   1fe46:	0010      	movs	r0, r2
   1fe48:	4b12      	ldr	r3, [pc, #72]	; (1fe94 <prvAddNewTaskToReadyList+0xd0>)
   1fe4a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1fe4c:	4b12      	ldr	r3, [pc, #72]	; (1fe98 <prvAddNewTaskToReadyList+0xd4>)
   1fe4e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1fe50:	4b0c      	ldr	r3, [pc, #48]	; (1fe84 <prvAddNewTaskToReadyList+0xc0>)
   1fe52:	681b      	ldr	r3, [r3, #0]
   1fe54:	2b00      	cmp	r3, #0
   1fe56:	d008      	beq.n	1fe6a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1fe58:	4b08      	ldr	r3, [pc, #32]	; (1fe7c <prvAddNewTaskToReadyList+0xb8>)
   1fe5a:	681b      	ldr	r3, [r3, #0]
   1fe5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fe5e:	687b      	ldr	r3, [r7, #4]
   1fe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe62:	429a      	cmp	r2, r3
   1fe64:	d201      	bcs.n	1fe6a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1fe66:	4b0d      	ldr	r3, [pc, #52]	; (1fe9c <prvAddNewTaskToReadyList+0xd8>)
   1fe68:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1fe6a:	46c0      	nop			; (mov r8, r8)
   1fe6c:	46bd      	mov	sp, r7
   1fe6e:	b002      	add	sp, #8
   1fe70:	bd80      	pop	{r7, pc}
   1fe72:	46c0      	nop			; (mov r8, r8)
   1fe74:	0001ed51 	.word	0x0001ed51
   1fe78:	20000390 	.word	0x20000390
   1fe7c:	200002b8 	.word	0x200002b8
   1fe80:	00020789 	.word	0x00020789
   1fe84:	2000039c 	.word	0x2000039c
   1fe88:	200003ac 	.word	0x200003ac
   1fe8c:	20000398 	.word	0x20000398
   1fe90:	200002bc 	.word	0x200002bc
   1fe94:	0001ef47 	.word	0x0001ef47
   1fe98:	0001ed75 	.word	0x0001ed75
   1fe9c:	0001ed31 	.word	0x0001ed31

0001fea0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1fea0:	b580      	push	{r7, lr}
   1fea2:	b086      	sub	sp, #24
   1fea4:	af00      	add	r7, sp, #0
   1fea6:	6078      	str	r0, [r7, #4]
   1fea8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1feaa:	2300      	movs	r3, #0
   1feac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1feae:	687b      	ldr	r3, [r7, #4]
   1feb0:	2b00      	cmp	r3, #0
   1feb2:	d101      	bne.n	1feb8 <vTaskDelayUntil+0x18>
   1feb4:	b672      	cpsid	i
   1feb6:	e7fe      	b.n	1feb6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   1feb8:	683b      	ldr	r3, [r7, #0]
   1feba:	2b00      	cmp	r3, #0
   1febc:	d101      	bne.n	1fec2 <vTaskDelayUntil+0x22>
   1febe:	b672      	cpsid	i
   1fec0:	e7fe      	b.n	1fec0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   1fec2:	4b23      	ldr	r3, [pc, #140]	; (1ff50 <vTaskDelayUntil+0xb0>)
   1fec4:	681b      	ldr	r3, [r3, #0]
   1fec6:	2b00      	cmp	r3, #0
   1fec8:	d001      	beq.n	1fece <vTaskDelayUntil+0x2e>
   1feca:	b672      	cpsid	i
   1fecc:	e7fe      	b.n	1fecc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   1fece:	4b21      	ldr	r3, [pc, #132]	; (1ff54 <vTaskDelayUntil+0xb4>)
   1fed0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1fed2:	4b21      	ldr	r3, [pc, #132]	; (1ff58 <vTaskDelayUntil+0xb8>)
   1fed4:	681b      	ldr	r3, [r3, #0]
   1fed6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1fed8:	687b      	ldr	r3, [r7, #4]
   1feda:	681a      	ldr	r2, [r3, #0]
   1fedc:	683b      	ldr	r3, [r7, #0]
   1fede:	18d3      	adds	r3, r2, r3
   1fee0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1fee2:	687b      	ldr	r3, [r7, #4]
   1fee4:	681a      	ldr	r2, [r3, #0]
   1fee6:	693b      	ldr	r3, [r7, #16]
   1fee8:	429a      	cmp	r2, r3
   1feea:	d90b      	bls.n	1ff04 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1feec:	687b      	ldr	r3, [r7, #4]
   1feee:	681a      	ldr	r2, [r3, #0]
   1fef0:	68fb      	ldr	r3, [r7, #12]
   1fef2:	429a      	cmp	r2, r3
   1fef4:	d911      	bls.n	1ff1a <vTaskDelayUntil+0x7a>
   1fef6:	68fa      	ldr	r2, [r7, #12]
   1fef8:	693b      	ldr	r3, [r7, #16]
   1fefa:	429a      	cmp	r2, r3
   1fefc:	d90d      	bls.n	1ff1a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1fefe:	2301      	movs	r3, #1
   1ff00:	617b      	str	r3, [r7, #20]
   1ff02:	e00a      	b.n	1ff1a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1ff04:	687b      	ldr	r3, [r7, #4]
   1ff06:	681a      	ldr	r2, [r3, #0]
   1ff08:	68fb      	ldr	r3, [r7, #12]
   1ff0a:	429a      	cmp	r2, r3
   1ff0c:	d803      	bhi.n	1ff16 <vTaskDelayUntil+0x76>
   1ff0e:	68fa      	ldr	r2, [r7, #12]
   1ff10:	693b      	ldr	r3, [r7, #16]
   1ff12:	429a      	cmp	r2, r3
   1ff14:	d901      	bls.n	1ff1a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   1ff16:	2301      	movs	r3, #1
   1ff18:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1ff1a:	687b      	ldr	r3, [r7, #4]
   1ff1c:	68fa      	ldr	r2, [r7, #12]
   1ff1e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1ff20:	697b      	ldr	r3, [r7, #20]
   1ff22:	2b00      	cmp	r3, #0
   1ff24:	d006      	beq.n	1ff34 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1ff26:	68fa      	ldr	r2, [r7, #12]
   1ff28:	693b      	ldr	r3, [r7, #16]
   1ff2a:	1ad3      	subs	r3, r2, r3
   1ff2c:	2100      	movs	r1, #0
   1ff2e:	0018      	movs	r0, r3
   1ff30:	4b0a      	ldr	r3, [pc, #40]	; (1ff5c <vTaskDelayUntil+0xbc>)
   1ff32:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1ff34:	4b0a      	ldr	r3, [pc, #40]	; (1ff60 <vTaskDelayUntil+0xc0>)
   1ff36:	4798      	blx	r3
   1ff38:	0003      	movs	r3, r0
   1ff3a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1ff3c:	68bb      	ldr	r3, [r7, #8]
   1ff3e:	2b00      	cmp	r3, #0
   1ff40:	d101      	bne.n	1ff46 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   1ff42:	4b08      	ldr	r3, [pc, #32]	; (1ff64 <vTaskDelayUntil+0xc4>)
   1ff44:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ff46:	46c0      	nop			; (mov r8, r8)
   1ff48:	46bd      	mov	sp, r7
   1ff4a:	b006      	add	sp, #24
   1ff4c:	bd80      	pop	{r7, pc}
   1ff4e:	46c0      	nop			; (mov r8, r8)
   1ff50:	200003b8 	.word	0x200003b8
   1ff54:	00020181 	.word	0x00020181
   1ff58:	20000394 	.word	0x20000394
   1ff5c:	00020d79 	.word	0x00020d79
   1ff60:	00020199 	.word	0x00020199
   1ff64:	0001ed31 	.word	0x0001ed31

0001ff68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1ff68:	b580      	push	{r7, lr}
   1ff6a:	b084      	sub	sp, #16
   1ff6c:	af00      	add	r7, sp, #0
   1ff6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1ff70:	2300      	movs	r3, #0
   1ff72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1ff74:	687b      	ldr	r3, [r7, #4]
   1ff76:	2b00      	cmp	r3, #0
   1ff78:	d010      	beq.n	1ff9c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1ff7a:	4b0d      	ldr	r3, [pc, #52]	; (1ffb0 <vTaskDelay+0x48>)
   1ff7c:	681b      	ldr	r3, [r3, #0]
   1ff7e:	2b00      	cmp	r3, #0
   1ff80:	d001      	beq.n	1ff86 <vTaskDelay+0x1e>
   1ff82:	b672      	cpsid	i
   1ff84:	e7fe      	b.n	1ff84 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1ff86:	4b0b      	ldr	r3, [pc, #44]	; (1ffb4 <vTaskDelay+0x4c>)
   1ff88:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1ff8a:	687b      	ldr	r3, [r7, #4]
   1ff8c:	2100      	movs	r1, #0
   1ff8e:	0018      	movs	r0, r3
   1ff90:	4b09      	ldr	r3, [pc, #36]	; (1ffb8 <vTaskDelay+0x50>)
   1ff92:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1ff94:	4b09      	ldr	r3, [pc, #36]	; (1ffbc <vTaskDelay+0x54>)
   1ff96:	4798      	blx	r3
   1ff98:	0003      	movs	r3, r0
   1ff9a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1ff9c:	68fb      	ldr	r3, [r7, #12]
   1ff9e:	2b00      	cmp	r3, #0
   1ffa0:	d101      	bne.n	1ffa6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   1ffa2:	4b07      	ldr	r3, [pc, #28]	; (1ffc0 <vTaskDelay+0x58>)
   1ffa4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ffa6:	46c0      	nop			; (mov r8, r8)
   1ffa8:	46bd      	mov	sp, r7
   1ffaa:	b004      	add	sp, #16
   1ffac:	bd80      	pop	{r7, pc}
   1ffae:	46c0      	nop			; (mov r8, r8)
   1ffb0:	200003b8 	.word	0x200003b8
   1ffb4:	00020181 	.word	0x00020181
   1ffb8:	00020d79 	.word	0x00020d79
   1ffbc:	00020199 	.word	0x00020199
   1ffc0:	0001ed31 	.word	0x0001ed31

0001ffc4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   1ffc4:	b580      	push	{r7, lr}
   1ffc6:	b086      	sub	sp, #24
   1ffc8:	af00      	add	r7, sp, #0
   1ffca:	6078      	str	r0, [r7, #4]
   1ffcc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   1ffce:	2300      	movs	r3, #0
   1ffd0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   1ffd2:	683b      	ldr	r3, [r7, #0]
   1ffd4:	2b04      	cmp	r3, #4
   1ffd6:	d901      	bls.n	1ffdc <vTaskPrioritySet+0x18>
   1ffd8:	b672      	cpsid	i
   1ffda:	e7fe      	b.n	1ffda <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ffdc:	683b      	ldr	r3, [r7, #0]
   1ffde:	2b04      	cmp	r3, #4
   1ffe0:	d901      	bls.n	1ffe6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ffe2:	2304      	movs	r3, #4
   1ffe4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   1ffe6:	4b3d      	ldr	r3, [pc, #244]	; (200dc <vTaskPrioritySet+0x118>)
   1ffe8:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   1ffea:	687b      	ldr	r3, [r7, #4]
   1ffec:	2b00      	cmp	r3, #0
   1ffee:	d102      	bne.n	1fff6 <vTaskPrioritySet+0x32>
   1fff0:	4b3b      	ldr	r3, [pc, #236]	; (200e0 <vTaskPrioritySet+0x11c>)
   1fff2:	681b      	ldr	r3, [r3, #0]
   1fff4:	e000      	b.n	1fff8 <vTaskPrioritySet+0x34>
   1fff6:	687b      	ldr	r3, [r7, #4]
   1fff8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   1fffa:	693b      	ldr	r3, [r7, #16]
   1fffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fffe:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   20000:	68fa      	ldr	r2, [r7, #12]
   20002:	683b      	ldr	r3, [r7, #0]
   20004:	429a      	cmp	r2, r3
   20006:	d062      	beq.n	200ce <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   20008:	683a      	ldr	r2, [r7, #0]
   2000a:	68fb      	ldr	r3, [r7, #12]
   2000c:	429a      	cmp	r2, r3
   2000e:	d90d      	bls.n	2002c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   20010:	4b33      	ldr	r3, [pc, #204]	; (200e0 <vTaskPrioritySet+0x11c>)
   20012:	681b      	ldr	r3, [r3, #0]
   20014:	693a      	ldr	r2, [r7, #16]
   20016:	429a      	cmp	r2, r3
   20018:	d00f      	beq.n	2003a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   2001a:	4b31      	ldr	r3, [pc, #196]	; (200e0 <vTaskPrioritySet+0x11c>)
   2001c:	681b      	ldr	r3, [r3, #0]
   2001e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20020:	683b      	ldr	r3, [r7, #0]
   20022:	429a      	cmp	r2, r3
   20024:	d809      	bhi.n	2003a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   20026:	2301      	movs	r3, #1
   20028:	617b      	str	r3, [r7, #20]
   2002a:	e006      	b.n	2003a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   2002c:	4b2c      	ldr	r3, [pc, #176]	; (200e0 <vTaskPrioritySet+0x11c>)
   2002e:	681b      	ldr	r3, [r3, #0]
   20030:	693a      	ldr	r2, [r7, #16]
   20032:	429a      	cmp	r2, r3
   20034:	d101      	bne.n	2003a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   20036:	2301      	movs	r3, #1
   20038:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   2003a:	693b      	ldr	r3, [r7, #16]
   2003c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2003e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   20040:	693b      	ldr	r3, [r7, #16]
   20042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20044:	693b      	ldr	r3, [r7, #16]
   20046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20048:	429a      	cmp	r2, r3
   2004a:	d102      	bne.n	20052 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   2004c:	693b      	ldr	r3, [r7, #16]
   2004e:	683a      	ldr	r2, [r7, #0]
   20050:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   20052:	693b      	ldr	r3, [r7, #16]
   20054:	683a      	ldr	r2, [r7, #0]
   20056:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20058:	693b      	ldr	r3, [r7, #16]
   2005a:	699b      	ldr	r3, [r3, #24]
   2005c:	2b00      	cmp	r3, #0
   2005e:	db04      	blt.n	2006a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20060:	683b      	ldr	r3, [r7, #0]
   20062:	2205      	movs	r2, #5
   20064:	1ad2      	subs	r2, r2, r3
   20066:	693b      	ldr	r3, [r7, #16]
   20068:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   2006a:	693b      	ldr	r3, [r7, #16]
   2006c:	6959      	ldr	r1, [r3, #20]
   2006e:	68ba      	ldr	r2, [r7, #8]
   20070:	0013      	movs	r3, r2
   20072:	009b      	lsls	r3, r3, #2
   20074:	189b      	adds	r3, r3, r2
   20076:	009b      	lsls	r3, r3, #2
   20078:	4a1a      	ldr	r2, [pc, #104]	; (200e4 <vTaskPrioritySet+0x120>)
   2007a:	189b      	adds	r3, r3, r2
   2007c:	4299      	cmp	r1, r3
   2007e:	d101      	bne.n	20084 <vTaskPrioritySet+0xc0>
   20080:	2301      	movs	r3, #1
   20082:	e000      	b.n	20086 <vTaskPrioritySet+0xc2>
   20084:	2300      	movs	r3, #0
   20086:	2b00      	cmp	r3, #0
   20088:	d01c      	beq.n	200c4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2008a:	693b      	ldr	r3, [r7, #16]
   2008c:	3304      	adds	r3, #4
   2008e:	0018      	movs	r0, r3
   20090:	4b15      	ldr	r3, [pc, #84]	; (200e8 <vTaskPrioritySet+0x124>)
   20092:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   20094:	693b      	ldr	r3, [r7, #16]
   20096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20098:	4b14      	ldr	r3, [pc, #80]	; (200ec <vTaskPrioritySet+0x128>)
   2009a:	681b      	ldr	r3, [r3, #0]
   2009c:	429a      	cmp	r2, r3
   2009e:	d903      	bls.n	200a8 <vTaskPrioritySet+0xe4>
   200a0:	693b      	ldr	r3, [r7, #16]
   200a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   200a4:	4b11      	ldr	r3, [pc, #68]	; (200ec <vTaskPrioritySet+0x128>)
   200a6:	601a      	str	r2, [r3, #0]
   200a8:	693b      	ldr	r3, [r7, #16]
   200aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   200ac:	0013      	movs	r3, r2
   200ae:	009b      	lsls	r3, r3, #2
   200b0:	189b      	adds	r3, r3, r2
   200b2:	009b      	lsls	r3, r3, #2
   200b4:	4a0b      	ldr	r2, [pc, #44]	; (200e4 <vTaskPrioritySet+0x120>)
   200b6:	189a      	adds	r2, r3, r2
   200b8:	693b      	ldr	r3, [r7, #16]
   200ba:	3304      	adds	r3, #4
   200bc:	0019      	movs	r1, r3
   200be:	0010      	movs	r0, r2
   200c0:	4b0b      	ldr	r3, [pc, #44]	; (200f0 <vTaskPrioritySet+0x12c>)
   200c2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   200c4:	697b      	ldr	r3, [r7, #20]
   200c6:	2b00      	cmp	r3, #0
   200c8:	d001      	beq.n	200ce <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   200ca:	4b0a      	ldr	r3, [pc, #40]	; (200f4 <vTaskPrioritySet+0x130>)
   200cc:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   200ce:	4b0a      	ldr	r3, [pc, #40]	; (200f8 <vTaskPrioritySet+0x134>)
   200d0:	4798      	blx	r3
	}
   200d2:	46c0      	nop			; (mov r8, r8)
   200d4:	46bd      	mov	sp, r7
   200d6:	b006      	add	sp, #24
   200d8:	bd80      	pop	{r7, pc}
   200da:	46c0      	nop			; (mov r8, r8)
   200dc:	0001ed51 	.word	0x0001ed51
   200e0:	200002b8 	.word	0x200002b8
   200e4:	200002bc 	.word	0x200002bc
   200e8:	0001eff7 	.word	0x0001eff7
   200ec:	20000398 	.word	0x20000398
   200f0:	0001ef47 	.word	0x0001ef47
   200f4:	0001ed31 	.word	0x0001ed31
   200f8:	0001ed75 	.word	0x0001ed75

000200fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   200fc:	b590      	push	{r4, r7, lr}
   200fe:	b085      	sub	sp, #20
   20100:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20102:	4916      	ldr	r1, [pc, #88]	; (2015c <vTaskStartScheduler+0x60>)
   20104:	4816      	ldr	r0, [pc, #88]	; (20160 <vTaskStartScheduler+0x64>)
   20106:	4b17      	ldr	r3, [pc, #92]	; (20164 <vTaskStartScheduler+0x68>)
   20108:	9301      	str	r3, [sp, #4]
   2010a:	2300      	movs	r3, #0
   2010c:	9300      	str	r3, [sp, #0]
   2010e:	2300      	movs	r3, #0
   20110:	2282      	movs	r2, #130	; 0x82
   20112:	4c15      	ldr	r4, [pc, #84]	; (20168 <vTaskStartScheduler+0x6c>)
   20114:	47a0      	blx	r4
   20116:	0003      	movs	r3, r0
   20118:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   2011a:	687b      	ldr	r3, [r7, #4]
   2011c:	2b01      	cmp	r3, #1
   2011e:	d103      	bne.n	20128 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   20120:	4b12      	ldr	r3, [pc, #72]	; (2016c <vTaskStartScheduler+0x70>)
   20122:	4798      	blx	r3
   20124:	0003      	movs	r3, r0
   20126:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   20128:	687b      	ldr	r3, [r7, #4]
   2012a:	2b01      	cmp	r3, #1
   2012c:	d10d      	bne.n	2014a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   2012e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   20130:	4b0f      	ldr	r3, [pc, #60]	; (20170 <vTaskStartScheduler+0x74>)
   20132:	2201      	movs	r2, #1
   20134:	4252      	negs	r2, r2
   20136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   20138:	4b0e      	ldr	r3, [pc, #56]	; (20174 <vTaskStartScheduler+0x78>)
   2013a:	2201      	movs	r2, #1
   2013c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   2013e:	4b0e      	ldr	r3, [pc, #56]	; (20178 <vTaskStartScheduler+0x7c>)
   20140:	2200      	movs	r2, #0
   20142:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   20144:	4b0d      	ldr	r3, [pc, #52]	; (2017c <vTaskStartScheduler+0x80>)
   20146:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   20148:	e004      	b.n	20154 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   2014a:	687b      	ldr	r3, [r7, #4]
   2014c:	3301      	adds	r3, #1
   2014e:	d101      	bne.n	20154 <vTaskStartScheduler+0x58>
   20150:	b672      	cpsid	i
   20152:	e7fe      	b.n	20152 <vTaskStartScheduler+0x56>
}
   20154:	46c0      	nop			; (mov r8, r8)
   20156:	46bd      	mov	sp, r7
   20158:	b003      	add	sp, #12
   2015a:	bd90      	pop	{r4, r7, pc}
   2015c:	0002ab4c 	.word	0x0002ab4c
   20160:	00020761 	.word	0x00020761
   20164:	200003b4 	.word	0x200003b4
   20168:	0001fc29 	.word	0x0001fc29
   2016c:	00020e2d 	.word	0x00020e2d
   20170:	200003b0 	.word	0x200003b0
   20174:	2000039c 	.word	0x2000039c
   20178:	20000394 	.word	0x20000394
   2017c:	0001ecd9 	.word	0x0001ecd9

00020180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20180:	b580      	push	{r7, lr}
   20182:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20184:	4b03      	ldr	r3, [pc, #12]	; (20194 <vTaskSuspendAll+0x14>)
   20186:	681b      	ldr	r3, [r3, #0]
   20188:	1c5a      	adds	r2, r3, #1
   2018a:	4b02      	ldr	r3, [pc, #8]	; (20194 <vTaskSuspendAll+0x14>)
   2018c:	601a      	str	r2, [r3, #0]
}
   2018e:	46c0      	nop			; (mov r8, r8)
   20190:	46bd      	mov	sp, r7
   20192:	bd80      	pop	{r7, pc}
   20194:	200003b8 	.word	0x200003b8

00020198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20198:	b580      	push	{r7, lr}
   2019a:	b084      	sub	sp, #16
   2019c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   2019e:	2300      	movs	r3, #0
   201a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   201a2:	2300      	movs	r3, #0
   201a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   201a6:	4b3a      	ldr	r3, [pc, #232]	; (20290 <xTaskResumeAll+0xf8>)
   201a8:	681b      	ldr	r3, [r3, #0]
   201aa:	2b00      	cmp	r3, #0
   201ac:	d101      	bne.n	201b2 <xTaskResumeAll+0x1a>
   201ae:	b672      	cpsid	i
   201b0:	e7fe      	b.n	201b0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   201b2:	4b38      	ldr	r3, [pc, #224]	; (20294 <xTaskResumeAll+0xfc>)
   201b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   201b6:	4b36      	ldr	r3, [pc, #216]	; (20290 <xTaskResumeAll+0xf8>)
   201b8:	681b      	ldr	r3, [r3, #0]
   201ba:	1e5a      	subs	r2, r3, #1
   201bc:	4b34      	ldr	r3, [pc, #208]	; (20290 <xTaskResumeAll+0xf8>)
   201be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   201c0:	4b33      	ldr	r3, [pc, #204]	; (20290 <xTaskResumeAll+0xf8>)
   201c2:	681b      	ldr	r3, [r3, #0]
   201c4:	2b00      	cmp	r3, #0
   201c6:	d15b      	bne.n	20280 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   201c8:	4b33      	ldr	r3, [pc, #204]	; (20298 <xTaskResumeAll+0x100>)
   201ca:	681b      	ldr	r3, [r3, #0]
   201cc:	2b00      	cmp	r3, #0
   201ce:	d057      	beq.n	20280 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   201d0:	e02f      	b.n	20232 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   201d2:	4b32      	ldr	r3, [pc, #200]	; (2029c <xTaskResumeAll+0x104>)
   201d4:	68db      	ldr	r3, [r3, #12]
   201d6:	68db      	ldr	r3, [r3, #12]
   201d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   201da:	68fb      	ldr	r3, [r7, #12]
   201dc:	3318      	adds	r3, #24
   201de:	0018      	movs	r0, r3
   201e0:	4b2f      	ldr	r3, [pc, #188]	; (202a0 <xTaskResumeAll+0x108>)
   201e2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   201e4:	68fb      	ldr	r3, [r7, #12]
   201e6:	3304      	adds	r3, #4
   201e8:	0018      	movs	r0, r3
   201ea:	4b2d      	ldr	r3, [pc, #180]	; (202a0 <xTaskResumeAll+0x108>)
   201ec:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   201ee:	68fb      	ldr	r3, [r7, #12]
   201f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201f2:	4b2c      	ldr	r3, [pc, #176]	; (202a4 <xTaskResumeAll+0x10c>)
   201f4:	681b      	ldr	r3, [r3, #0]
   201f6:	429a      	cmp	r2, r3
   201f8:	d903      	bls.n	20202 <xTaskResumeAll+0x6a>
   201fa:	68fb      	ldr	r3, [r7, #12]
   201fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   201fe:	4b29      	ldr	r3, [pc, #164]	; (202a4 <xTaskResumeAll+0x10c>)
   20200:	601a      	str	r2, [r3, #0]
   20202:	68fb      	ldr	r3, [r7, #12]
   20204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20206:	0013      	movs	r3, r2
   20208:	009b      	lsls	r3, r3, #2
   2020a:	189b      	adds	r3, r3, r2
   2020c:	009b      	lsls	r3, r3, #2
   2020e:	4a26      	ldr	r2, [pc, #152]	; (202a8 <xTaskResumeAll+0x110>)
   20210:	189a      	adds	r2, r3, r2
   20212:	68fb      	ldr	r3, [r7, #12]
   20214:	3304      	adds	r3, #4
   20216:	0019      	movs	r1, r3
   20218:	0010      	movs	r0, r2
   2021a:	4b24      	ldr	r3, [pc, #144]	; (202ac <xTaskResumeAll+0x114>)
   2021c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2021e:	68fb      	ldr	r3, [r7, #12]
   20220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20222:	4b23      	ldr	r3, [pc, #140]	; (202b0 <xTaskResumeAll+0x118>)
   20224:	681b      	ldr	r3, [r3, #0]
   20226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20228:	429a      	cmp	r2, r3
   2022a:	d302      	bcc.n	20232 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   2022c:	4b21      	ldr	r3, [pc, #132]	; (202b4 <xTaskResumeAll+0x11c>)
   2022e:	2201      	movs	r2, #1
   20230:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20232:	4b1a      	ldr	r3, [pc, #104]	; (2029c <xTaskResumeAll+0x104>)
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	2b00      	cmp	r3, #0
   20238:	d1cb      	bne.n	201d2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   2023a:	68fb      	ldr	r3, [r7, #12]
   2023c:	2b00      	cmp	r3, #0
   2023e:	d001      	beq.n	20244 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   20240:	4b1d      	ldr	r3, [pc, #116]	; (202b8 <xTaskResumeAll+0x120>)
   20242:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   20244:	4b1d      	ldr	r3, [pc, #116]	; (202bc <xTaskResumeAll+0x124>)
   20246:	681b      	ldr	r3, [r3, #0]
   20248:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   2024a:	687b      	ldr	r3, [r7, #4]
   2024c:	2b00      	cmp	r3, #0
   2024e:	d00f      	beq.n	20270 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   20250:	4b1b      	ldr	r3, [pc, #108]	; (202c0 <xTaskResumeAll+0x128>)
   20252:	4798      	blx	r3
   20254:	1e03      	subs	r3, r0, #0
   20256:	d002      	beq.n	2025e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   20258:	4b16      	ldr	r3, [pc, #88]	; (202b4 <xTaskResumeAll+0x11c>)
   2025a:	2201      	movs	r2, #1
   2025c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   2025e:	687b      	ldr	r3, [r7, #4]
   20260:	3b01      	subs	r3, #1
   20262:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   20264:	687b      	ldr	r3, [r7, #4]
   20266:	2b00      	cmp	r3, #0
   20268:	d1f2      	bne.n	20250 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   2026a:	4b14      	ldr	r3, [pc, #80]	; (202bc <xTaskResumeAll+0x124>)
   2026c:	2200      	movs	r2, #0
   2026e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   20270:	4b10      	ldr	r3, [pc, #64]	; (202b4 <xTaskResumeAll+0x11c>)
   20272:	681b      	ldr	r3, [r3, #0]
   20274:	2b00      	cmp	r3, #0
   20276:	d003      	beq.n	20280 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   20278:	2301      	movs	r3, #1
   2027a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   2027c:	4b11      	ldr	r3, [pc, #68]	; (202c4 <xTaskResumeAll+0x12c>)
   2027e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20280:	4b11      	ldr	r3, [pc, #68]	; (202c8 <xTaskResumeAll+0x130>)
   20282:	4798      	blx	r3

	return xAlreadyYielded;
   20284:	68bb      	ldr	r3, [r7, #8]
}
   20286:	0018      	movs	r0, r3
   20288:	46bd      	mov	sp, r7
   2028a:	b004      	add	sp, #16
   2028c:	bd80      	pop	{r7, pc}
   2028e:	46c0      	nop			; (mov r8, r8)
   20290:	200003b8 	.word	0x200003b8
   20294:	0001ed51 	.word	0x0001ed51
   20298:	20000390 	.word	0x20000390
   2029c:	20000350 	.word	0x20000350
   202a0:	0001eff7 	.word	0x0001eff7
   202a4:	20000398 	.word	0x20000398
   202a8:	200002bc 	.word	0x200002bc
   202ac:	0001ef47 	.word	0x0001ef47
   202b0:	200002b8 	.word	0x200002b8
   202b4:	200003a4 	.word	0x200003a4
   202b8:	000208a9 	.word	0x000208a9
   202bc:	200003a0 	.word	0x200003a0
   202c0:	00020309 	.word	0x00020309
   202c4:	0001ed31 	.word	0x0001ed31
   202c8:	0001ed75 	.word	0x0001ed75

000202cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   202cc:	b580      	push	{r7, lr}
   202ce:	b082      	sub	sp, #8
   202d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   202d2:	4b04      	ldr	r3, [pc, #16]	; (202e4 <xTaskGetTickCount+0x18>)
   202d4:	681b      	ldr	r3, [r3, #0]
   202d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   202d8:	687b      	ldr	r3, [r7, #4]
}
   202da:	0018      	movs	r0, r3
   202dc:	46bd      	mov	sp, r7
   202de:	b002      	add	sp, #8
   202e0:	bd80      	pop	{r7, pc}
   202e2:	46c0      	nop			; (mov r8, r8)
   202e4:	20000394 	.word	0x20000394

000202e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   202e8:	b580      	push	{r7, lr}
   202ea:	b082      	sub	sp, #8
   202ec:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   202ee:	2300      	movs	r3, #0
   202f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   202f2:	4b04      	ldr	r3, [pc, #16]	; (20304 <xTaskGetTickCountFromISR+0x1c>)
   202f4:	681b      	ldr	r3, [r3, #0]
   202f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   202f8:	683b      	ldr	r3, [r7, #0]
}
   202fa:	0018      	movs	r0, r3
   202fc:	46bd      	mov	sp, r7
   202fe:	b002      	add	sp, #8
   20300:	bd80      	pop	{r7, pc}
   20302:	46c0      	nop			; (mov r8, r8)
   20304:	20000394 	.word	0x20000394

00020308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20308:	b580      	push	{r7, lr}
   2030a:	b086      	sub	sp, #24
   2030c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   2030e:	2300      	movs	r3, #0
   20310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20312:	4b4c      	ldr	r3, [pc, #304]	; (20444 <xTaskIncrementTick+0x13c>)
   20314:	681b      	ldr	r3, [r3, #0]
   20316:	2b00      	cmp	r3, #0
   20318:	d000      	beq.n	2031c <xTaskIncrementTick+0x14>
   2031a:	e083      	b.n	20424 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2031c:	4b4a      	ldr	r3, [pc, #296]	; (20448 <xTaskIncrementTick+0x140>)
   2031e:	681b      	ldr	r3, [r3, #0]
   20320:	3301      	adds	r3, #1
   20322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   20324:	4b48      	ldr	r3, [pc, #288]	; (20448 <xTaskIncrementTick+0x140>)
   20326:	693a      	ldr	r2, [r7, #16]
   20328:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2032a:	693b      	ldr	r3, [r7, #16]
   2032c:	2b00      	cmp	r3, #0
   2032e:	d117      	bne.n	20360 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   20330:	4b46      	ldr	r3, [pc, #280]	; (2044c <xTaskIncrementTick+0x144>)
   20332:	681b      	ldr	r3, [r3, #0]
   20334:	681b      	ldr	r3, [r3, #0]
   20336:	2b00      	cmp	r3, #0
   20338:	d001      	beq.n	2033e <xTaskIncrementTick+0x36>
   2033a:	b672      	cpsid	i
   2033c:	e7fe      	b.n	2033c <xTaskIncrementTick+0x34>
   2033e:	4b43      	ldr	r3, [pc, #268]	; (2044c <xTaskIncrementTick+0x144>)
   20340:	681b      	ldr	r3, [r3, #0]
   20342:	60fb      	str	r3, [r7, #12]
   20344:	4b42      	ldr	r3, [pc, #264]	; (20450 <xTaskIncrementTick+0x148>)
   20346:	681a      	ldr	r2, [r3, #0]
   20348:	4b40      	ldr	r3, [pc, #256]	; (2044c <xTaskIncrementTick+0x144>)
   2034a:	601a      	str	r2, [r3, #0]
   2034c:	4b40      	ldr	r3, [pc, #256]	; (20450 <xTaskIncrementTick+0x148>)
   2034e:	68fa      	ldr	r2, [r7, #12]
   20350:	601a      	str	r2, [r3, #0]
   20352:	4b40      	ldr	r3, [pc, #256]	; (20454 <xTaskIncrementTick+0x14c>)
   20354:	681b      	ldr	r3, [r3, #0]
   20356:	1c5a      	adds	r2, r3, #1
   20358:	4b3e      	ldr	r3, [pc, #248]	; (20454 <xTaskIncrementTick+0x14c>)
   2035a:	601a      	str	r2, [r3, #0]
   2035c:	4b3e      	ldr	r3, [pc, #248]	; (20458 <xTaskIncrementTick+0x150>)
   2035e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   20360:	4b3e      	ldr	r3, [pc, #248]	; (2045c <xTaskIncrementTick+0x154>)
   20362:	681b      	ldr	r3, [r3, #0]
   20364:	693a      	ldr	r2, [r7, #16]
   20366:	429a      	cmp	r2, r3
   20368:	d34e      	bcc.n	20408 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2036a:	4b38      	ldr	r3, [pc, #224]	; (2044c <xTaskIncrementTick+0x144>)
   2036c:	681b      	ldr	r3, [r3, #0]
   2036e:	681b      	ldr	r3, [r3, #0]
   20370:	2b00      	cmp	r3, #0
   20372:	d101      	bne.n	20378 <xTaskIncrementTick+0x70>
   20374:	2301      	movs	r3, #1
   20376:	e000      	b.n	2037a <xTaskIncrementTick+0x72>
   20378:	2300      	movs	r3, #0
   2037a:	2b00      	cmp	r3, #0
   2037c:	d004      	beq.n	20388 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2037e:	4b37      	ldr	r3, [pc, #220]	; (2045c <xTaskIncrementTick+0x154>)
   20380:	2201      	movs	r2, #1
   20382:	4252      	negs	r2, r2
   20384:	601a      	str	r2, [r3, #0]
					break;
   20386:	e03f      	b.n	20408 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20388:	4b30      	ldr	r3, [pc, #192]	; (2044c <xTaskIncrementTick+0x144>)
   2038a:	681b      	ldr	r3, [r3, #0]
   2038c:	68db      	ldr	r3, [r3, #12]
   2038e:	68db      	ldr	r3, [r3, #12]
   20390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20392:	68bb      	ldr	r3, [r7, #8]
   20394:	685b      	ldr	r3, [r3, #4]
   20396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20398:	693a      	ldr	r2, [r7, #16]
   2039a:	687b      	ldr	r3, [r7, #4]
   2039c:	429a      	cmp	r2, r3
   2039e:	d203      	bcs.n	203a8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   203a0:	4b2e      	ldr	r3, [pc, #184]	; (2045c <xTaskIncrementTick+0x154>)
   203a2:	687a      	ldr	r2, [r7, #4]
   203a4:	601a      	str	r2, [r3, #0]
						break;
   203a6:	e02f      	b.n	20408 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   203a8:	68bb      	ldr	r3, [r7, #8]
   203aa:	3304      	adds	r3, #4
   203ac:	0018      	movs	r0, r3
   203ae:	4b2c      	ldr	r3, [pc, #176]	; (20460 <xTaskIncrementTick+0x158>)
   203b0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   203b2:	68bb      	ldr	r3, [r7, #8]
   203b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   203b6:	2b00      	cmp	r3, #0
   203b8:	d004      	beq.n	203c4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   203ba:	68bb      	ldr	r3, [r7, #8]
   203bc:	3318      	adds	r3, #24
   203be:	0018      	movs	r0, r3
   203c0:	4b27      	ldr	r3, [pc, #156]	; (20460 <xTaskIncrementTick+0x158>)
   203c2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   203c4:	68bb      	ldr	r3, [r7, #8]
   203c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   203c8:	4b26      	ldr	r3, [pc, #152]	; (20464 <xTaskIncrementTick+0x15c>)
   203ca:	681b      	ldr	r3, [r3, #0]
   203cc:	429a      	cmp	r2, r3
   203ce:	d903      	bls.n	203d8 <xTaskIncrementTick+0xd0>
   203d0:	68bb      	ldr	r3, [r7, #8]
   203d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   203d4:	4b23      	ldr	r3, [pc, #140]	; (20464 <xTaskIncrementTick+0x15c>)
   203d6:	601a      	str	r2, [r3, #0]
   203d8:	68bb      	ldr	r3, [r7, #8]
   203da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   203dc:	0013      	movs	r3, r2
   203de:	009b      	lsls	r3, r3, #2
   203e0:	189b      	adds	r3, r3, r2
   203e2:	009b      	lsls	r3, r3, #2
   203e4:	4a20      	ldr	r2, [pc, #128]	; (20468 <xTaskIncrementTick+0x160>)
   203e6:	189a      	adds	r2, r3, r2
   203e8:	68bb      	ldr	r3, [r7, #8]
   203ea:	3304      	adds	r3, #4
   203ec:	0019      	movs	r1, r3
   203ee:	0010      	movs	r0, r2
   203f0:	4b1e      	ldr	r3, [pc, #120]	; (2046c <xTaskIncrementTick+0x164>)
   203f2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   203f4:	68bb      	ldr	r3, [r7, #8]
   203f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   203f8:	4b1d      	ldr	r3, [pc, #116]	; (20470 <xTaskIncrementTick+0x168>)
   203fa:	681b      	ldr	r3, [r3, #0]
   203fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   203fe:	429a      	cmp	r2, r3
   20400:	d3b3      	bcc.n	2036a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20402:	2301      	movs	r3, #1
   20404:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20406:	e7b0      	b.n	2036a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20408:	4b19      	ldr	r3, [pc, #100]	; (20470 <xTaskIncrementTick+0x168>)
   2040a:	681b      	ldr	r3, [r3, #0]
   2040c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2040e:	4916      	ldr	r1, [pc, #88]	; (20468 <xTaskIncrementTick+0x160>)
   20410:	0013      	movs	r3, r2
   20412:	009b      	lsls	r3, r3, #2
   20414:	189b      	adds	r3, r3, r2
   20416:	009b      	lsls	r3, r3, #2
   20418:	585b      	ldr	r3, [r3, r1]
   2041a:	2b01      	cmp	r3, #1
   2041c:	d907      	bls.n	2042e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   2041e:	2301      	movs	r3, #1
   20420:	617b      	str	r3, [r7, #20]
   20422:	e004      	b.n	2042e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   20424:	4b13      	ldr	r3, [pc, #76]	; (20474 <xTaskIncrementTick+0x16c>)
   20426:	681b      	ldr	r3, [r3, #0]
   20428:	1c5a      	adds	r2, r3, #1
   2042a:	4b12      	ldr	r3, [pc, #72]	; (20474 <xTaskIncrementTick+0x16c>)
   2042c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   2042e:	4b12      	ldr	r3, [pc, #72]	; (20478 <xTaskIncrementTick+0x170>)
   20430:	681b      	ldr	r3, [r3, #0]
   20432:	2b00      	cmp	r3, #0
   20434:	d001      	beq.n	2043a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   20436:	2301      	movs	r3, #1
   20438:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   2043a:	697b      	ldr	r3, [r7, #20]
}
   2043c:	0018      	movs	r0, r3
   2043e:	46bd      	mov	sp, r7
   20440:	b006      	add	sp, #24
   20442:	bd80      	pop	{r7, pc}
   20444:	200003b8 	.word	0x200003b8
   20448:	20000394 	.word	0x20000394
   2044c:	20000348 	.word	0x20000348
   20450:	2000034c 	.word	0x2000034c
   20454:	200003a8 	.word	0x200003a8
   20458:	000208a9 	.word	0x000208a9
   2045c:	200003b0 	.word	0x200003b0
   20460:	0001eff7 	.word	0x0001eff7
   20464:	20000398 	.word	0x20000398
   20468:	200002bc 	.word	0x200002bc
   2046c:	0001ef47 	.word	0x0001ef47
   20470:	200002b8 	.word	0x200002b8
   20474:	200003a0 	.word	0x200003a0
   20478:	200003a4 	.word	0x200003a4

0002047c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   2047c:	b580      	push	{r7, lr}
   2047e:	b082      	sub	sp, #8
   20480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20482:	4b22      	ldr	r3, [pc, #136]	; (2050c <vTaskSwitchContext+0x90>)
   20484:	681b      	ldr	r3, [r3, #0]
   20486:	2b00      	cmp	r3, #0
   20488:	d003      	beq.n	20492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   2048a:	4b21      	ldr	r3, [pc, #132]	; (20510 <vTaskSwitchContext+0x94>)
   2048c:	2201      	movs	r2, #1
   2048e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20490:	e037      	b.n	20502 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20492:	4b1f      	ldr	r3, [pc, #124]	; (20510 <vTaskSwitchContext+0x94>)
   20494:	2200      	movs	r2, #0
   20496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20498:	4b1e      	ldr	r3, [pc, #120]	; (20514 <vTaskSwitchContext+0x98>)
   2049a:	681b      	ldr	r3, [r3, #0]
   2049c:	607b      	str	r3, [r7, #4]
   2049e:	e007      	b.n	204b0 <vTaskSwitchContext+0x34>
   204a0:	687b      	ldr	r3, [r7, #4]
   204a2:	2b00      	cmp	r3, #0
   204a4:	d101      	bne.n	204aa <vTaskSwitchContext+0x2e>
   204a6:	b672      	cpsid	i
   204a8:	e7fe      	b.n	204a8 <vTaskSwitchContext+0x2c>
   204aa:	687b      	ldr	r3, [r7, #4]
   204ac:	3b01      	subs	r3, #1
   204ae:	607b      	str	r3, [r7, #4]
   204b0:	4919      	ldr	r1, [pc, #100]	; (20518 <vTaskSwitchContext+0x9c>)
   204b2:	687a      	ldr	r2, [r7, #4]
   204b4:	0013      	movs	r3, r2
   204b6:	009b      	lsls	r3, r3, #2
   204b8:	189b      	adds	r3, r3, r2
   204ba:	009b      	lsls	r3, r3, #2
   204bc:	585b      	ldr	r3, [r3, r1]
   204be:	2b00      	cmp	r3, #0
   204c0:	d0ee      	beq.n	204a0 <vTaskSwitchContext+0x24>
   204c2:	687a      	ldr	r2, [r7, #4]
   204c4:	0013      	movs	r3, r2
   204c6:	009b      	lsls	r3, r3, #2
   204c8:	189b      	adds	r3, r3, r2
   204ca:	009b      	lsls	r3, r3, #2
   204cc:	4a12      	ldr	r2, [pc, #72]	; (20518 <vTaskSwitchContext+0x9c>)
   204ce:	189b      	adds	r3, r3, r2
   204d0:	603b      	str	r3, [r7, #0]
   204d2:	683b      	ldr	r3, [r7, #0]
   204d4:	685b      	ldr	r3, [r3, #4]
   204d6:	685a      	ldr	r2, [r3, #4]
   204d8:	683b      	ldr	r3, [r7, #0]
   204da:	605a      	str	r2, [r3, #4]
   204dc:	683b      	ldr	r3, [r7, #0]
   204de:	685a      	ldr	r2, [r3, #4]
   204e0:	683b      	ldr	r3, [r7, #0]
   204e2:	3308      	adds	r3, #8
   204e4:	429a      	cmp	r2, r3
   204e6:	d104      	bne.n	204f2 <vTaskSwitchContext+0x76>
   204e8:	683b      	ldr	r3, [r7, #0]
   204ea:	685b      	ldr	r3, [r3, #4]
   204ec:	685a      	ldr	r2, [r3, #4]
   204ee:	683b      	ldr	r3, [r7, #0]
   204f0:	605a      	str	r2, [r3, #4]
   204f2:	683b      	ldr	r3, [r7, #0]
   204f4:	685b      	ldr	r3, [r3, #4]
   204f6:	68da      	ldr	r2, [r3, #12]
   204f8:	4b08      	ldr	r3, [pc, #32]	; (2051c <vTaskSwitchContext+0xa0>)
   204fa:	601a      	str	r2, [r3, #0]
   204fc:	4b05      	ldr	r3, [pc, #20]	; (20514 <vTaskSwitchContext+0x98>)
   204fe:	687a      	ldr	r2, [r7, #4]
   20500:	601a      	str	r2, [r3, #0]
}
   20502:	46c0      	nop			; (mov r8, r8)
   20504:	46bd      	mov	sp, r7
   20506:	b002      	add	sp, #8
   20508:	bd80      	pop	{r7, pc}
   2050a:	46c0      	nop			; (mov r8, r8)
   2050c:	200003b8 	.word	0x200003b8
   20510:	200003a4 	.word	0x200003a4
   20514:	20000398 	.word	0x20000398
   20518:	200002bc 	.word	0x200002bc
   2051c:	200002b8 	.word	0x200002b8

00020520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   20520:	b580      	push	{r7, lr}
   20522:	b082      	sub	sp, #8
   20524:	af00      	add	r7, sp, #0
   20526:	6078      	str	r0, [r7, #4]
   20528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   2052a:	687b      	ldr	r3, [r7, #4]
   2052c:	2b00      	cmp	r3, #0
   2052e:	d101      	bne.n	20534 <vTaskPlaceOnEventList+0x14>
   20530:	b672      	cpsid	i
   20532:	e7fe      	b.n	20532 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20534:	4b08      	ldr	r3, [pc, #32]	; (20558 <vTaskPlaceOnEventList+0x38>)
   20536:	681b      	ldr	r3, [r3, #0]
   20538:	3318      	adds	r3, #24
   2053a:	001a      	movs	r2, r3
   2053c:	687b      	ldr	r3, [r7, #4]
   2053e:	0011      	movs	r1, r2
   20540:	0018      	movs	r0, r3
   20542:	4b06      	ldr	r3, [pc, #24]	; (2055c <vTaskPlaceOnEventList+0x3c>)
   20544:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20546:	683b      	ldr	r3, [r7, #0]
   20548:	2101      	movs	r1, #1
   2054a:	0018      	movs	r0, r3
   2054c:	4b04      	ldr	r3, [pc, #16]	; (20560 <vTaskPlaceOnEventList+0x40>)
   2054e:	4798      	blx	r3
}
   20550:	46c0      	nop			; (mov r8, r8)
   20552:	46bd      	mov	sp, r7
   20554:	b002      	add	sp, #8
   20556:	bd80      	pop	{r7, pc}
   20558:	200002b8 	.word	0x200002b8
   2055c:	0001ef8b 	.word	0x0001ef8b
   20560:	00020d79 	.word	0x00020d79

00020564 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   20564:	b580      	push	{r7, lr}
   20566:	b084      	sub	sp, #16
   20568:	af00      	add	r7, sp, #0
   2056a:	60f8      	str	r0, [r7, #12]
   2056c:	60b9      	str	r1, [r7, #8]
   2056e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   20570:	68fb      	ldr	r3, [r7, #12]
   20572:	2b00      	cmp	r3, #0
   20574:	d101      	bne.n	2057a <vTaskPlaceOnEventListRestricted+0x16>
   20576:	b672      	cpsid	i
   20578:	e7fe      	b.n	20578 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   2057a:	4b0c      	ldr	r3, [pc, #48]	; (205ac <vTaskPlaceOnEventListRestricted+0x48>)
   2057c:	681b      	ldr	r3, [r3, #0]
   2057e:	3318      	adds	r3, #24
   20580:	001a      	movs	r2, r3
   20582:	68fb      	ldr	r3, [r7, #12]
   20584:	0011      	movs	r1, r2
   20586:	0018      	movs	r0, r3
   20588:	4b09      	ldr	r3, [pc, #36]	; (205b0 <vTaskPlaceOnEventListRestricted+0x4c>)
   2058a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   2058c:	687b      	ldr	r3, [r7, #4]
   2058e:	2b00      	cmp	r3, #0
   20590:	d002      	beq.n	20598 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20592:	2301      	movs	r3, #1
   20594:	425b      	negs	r3, r3
   20596:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20598:	687a      	ldr	r2, [r7, #4]
   2059a:	68bb      	ldr	r3, [r7, #8]
   2059c:	0011      	movs	r1, r2
   2059e:	0018      	movs	r0, r3
   205a0:	4b04      	ldr	r3, [pc, #16]	; (205b4 <vTaskPlaceOnEventListRestricted+0x50>)
   205a2:	4798      	blx	r3
	}
   205a4:	46c0      	nop			; (mov r8, r8)
   205a6:	46bd      	mov	sp, r7
   205a8:	b004      	add	sp, #16
   205aa:	bd80      	pop	{r7, pc}
   205ac:	200002b8 	.word	0x200002b8
   205b0:	0001ef47 	.word	0x0001ef47
   205b4:	00020d79 	.word	0x00020d79

000205b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   205b8:	b580      	push	{r7, lr}
   205ba:	b084      	sub	sp, #16
   205bc:	af00      	add	r7, sp, #0
   205be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   205c0:	687b      	ldr	r3, [r7, #4]
   205c2:	68db      	ldr	r3, [r3, #12]
   205c4:	68db      	ldr	r3, [r3, #12]
   205c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   205c8:	68bb      	ldr	r3, [r7, #8]
   205ca:	2b00      	cmp	r3, #0
   205cc:	d101      	bne.n	205d2 <xTaskRemoveFromEventList+0x1a>
   205ce:	b672      	cpsid	i
   205d0:	e7fe      	b.n	205d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   205d2:	68bb      	ldr	r3, [r7, #8]
   205d4:	3318      	adds	r3, #24
   205d6:	0018      	movs	r0, r3
   205d8:	4b1f      	ldr	r3, [pc, #124]	; (20658 <xTaskRemoveFromEventList+0xa0>)
   205da:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   205dc:	4b1f      	ldr	r3, [pc, #124]	; (2065c <xTaskRemoveFromEventList+0xa4>)
   205de:	681b      	ldr	r3, [r3, #0]
   205e0:	2b00      	cmp	r3, #0
   205e2:	d11d      	bne.n	20620 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   205e4:	68bb      	ldr	r3, [r7, #8]
   205e6:	3304      	adds	r3, #4
   205e8:	0018      	movs	r0, r3
   205ea:	4b1b      	ldr	r3, [pc, #108]	; (20658 <xTaskRemoveFromEventList+0xa0>)
   205ec:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   205ee:	68bb      	ldr	r3, [r7, #8]
   205f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   205f2:	4b1b      	ldr	r3, [pc, #108]	; (20660 <xTaskRemoveFromEventList+0xa8>)
   205f4:	681b      	ldr	r3, [r3, #0]
   205f6:	429a      	cmp	r2, r3
   205f8:	d903      	bls.n	20602 <xTaskRemoveFromEventList+0x4a>
   205fa:	68bb      	ldr	r3, [r7, #8]
   205fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   205fe:	4b18      	ldr	r3, [pc, #96]	; (20660 <xTaskRemoveFromEventList+0xa8>)
   20600:	601a      	str	r2, [r3, #0]
   20602:	68bb      	ldr	r3, [r7, #8]
   20604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20606:	0013      	movs	r3, r2
   20608:	009b      	lsls	r3, r3, #2
   2060a:	189b      	adds	r3, r3, r2
   2060c:	009b      	lsls	r3, r3, #2
   2060e:	4a15      	ldr	r2, [pc, #84]	; (20664 <xTaskRemoveFromEventList+0xac>)
   20610:	189a      	adds	r2, r3, r2
   20612:	68bb      	ldr	r3, [r7, #8]
   20614:	3304      	adds	r3, #4
   20616:	0019      	movs	r1, r3
   20618:	0010      	movs	r0, r2
   2061a:	4b13      	ldr	r3, [pc, #76]	; (20668 <xTaskRemoveFromEventList+0xb0>)
   2061c:	4798      	blx	r3
   2061e:	e007      	b.n	20630 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   20620:	68bb      	ldr	r3, [r7, #8]
   20622:	3318      	adds	r3, #24
   20624:	001a      	movs	r2, r3
   20626:	4b11      	ldr	r3, [pc, #68]	; (2066c <xTaskRemoveFromEventList+0xb4>)
   20628:	0011      	movs	r1, r2
   2062a:	0018      	movs	r0, r3
   2062c:	4b0e      	ldr	r3, [pc, #56]	; (20668 <xTaskRemoveFromEventList+0xb0>)
   2062e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   20630:	68bb      	ldr	r3, [r7, #8]
   20632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20634:	4b0e      	ldr	r3, [pc, #56]	; (20670 <xTaskRemoveFromEventList+0xb8>)
   20636:	681b      	ldr	r3, [r3, #0]
   20638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2063a:	429a      	cmp	r2, r3
   2063c:	d905      	bls.n	2064a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   2063e:	2301      	movs	r3, #1
   20640:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   20642:	4b0c      	ldr	r3, [pc, #48]	; (20674 <xTaskRemoveFromEventList+0xbc>)
   20644:	2201      	movs	r2, #1
   20646:	601a      	str	r2, [r3, #0]
   20648:	e001      	b.n	2064e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   2064a:	2300      	movs	r3, #0
   2064c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   2064e:	68fb      	ldr	r3, [r7, #12]
}
   20650:	0018      	movs	r0, r3
   20652:	46bd      	mov	sp, r7
   20654:	b004      	add	sp, #16
   20656:	bd80      	pop	{r7, pc}
   20658:	0001eff7 	.word	0x0001eff7
   2065c:	200003b8 	.word	0x200003b8
   20660:	20000398 	.word	0x20000398
   20664:	200002bc 	.word	0x200002bc
   20668:	0001ef47 	.word	0x0001ef47
   2066c:	20000350 	.word	0x20000350
   20670:	200002b8 	.word	0x200002b8
   20674:	200003a4 	.word	0x200003a4

00020678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   20678:	b580      	push	{r7, lr}
   2067a:	b082      	sub	sp, #8
   2067c:	af00      	add	r7, sp, #0
   2067e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   20680:	4b05      	ldr	r3, [pc, #20]	; (20698 <vTaskInternalSetTimeOutState+0x20>)
   20682:	681a      	ldr	r2, [r3, #0]
   20684:	687b      	ldr	r3, [r7, #4]
   20686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   20688:	4b04      	ldr	r3, [pc, #16]	; (2069c <vTaskInternalSetTimeOutState+0x24>)
   2068a:	681a      	ldr	r2, [r3, #0]
   2068c:	687b      	ldr	r3, [r7, #4]
   2068e:	605a      	str	r2, [r3, #4]
}
   20690:	46c0      	nop			; (mov r8, r8)
   20692:	46bd      	mov	sp, r7
   20694:	b002      	add	sp, #8
   20696:	bd80      	pop	{r7, pc}
   20698:	200003a8 	.word	0x200003a8
   2069c:	20000394 	.word	0x20000394

000206a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   206a0:	b580      	push	{r7, lr}
   206a2:	b086      	sub	sp, #24
   206a4:	af00      	add	r7, sp, #0
   206a6:	6078      	str	r0, [r7, #4]
   206a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   206aa:	687b      	ldr	r3, [r7, #4]
   206ac:	2b00      	cmp	r3, #0
   206ae:	d101      	bne.n	206b4 <xTaskCheckForTimeOut+0x14>
   206b0:	b672      	cpsid	i
   206b2:	e7fe      	b.n	206b2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   206b4:	683b      	ldr	r3, [r7, #0]
   206b6:	2b00      	cmp	r3, #0
   206b8:	d101      	bne.n	206be <xTaskCheckForTimeOut+0x1e>
   206ba:	b672      	cpsid	i
   206bc:	e7fe      	b.n	206bc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   206be:	4b1e      	ldr	r3, [pc, #120]	; (20738 <xTaskCheckForTimeOut+0x98>)
   206c0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   206c2:	4b1e      	ldr	r3, [pc, #120]	; (2073c <xTaskCheckForTimeOut+0x9c>)
   206c4:	681b      	ldr	r3, [r3, #0]
   206c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   206c8:	687b      	ldr	r3, [r7, #4]
   206ca:	685b      	ldr	r3, [r3, #4]
   206cc:	693a      	ldr	r2, [r7, #16]
   206ce:	1ad3      	subs	r3, r2, r3
   206d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   206d2:	683b      	ldr	r3, [r7, #0]
   206d4:	681b      	ldr	r3, [r3, #0]
   206d6:	3301      	adds	r3, #1
   206d8:	d102      	bne.n	206e0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   206da:	2300      	movs	r3, #0
   206dc:	617b      	str	r3, [r7, #20]
   206de:	e024      	b.n	2072a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   206e0:	687b      	ldr	r3, [r7, #4]
   206e2:	681a      	ldr	r2, [r3, #0]
   206e4:	4b16      	ldr	r3, [pc, #88]	; (20740 <xTaskCheckForTimeOut+0xa0>)
   206e6:	681b      	ldr	r3, [r3, #0]
   206e8:	429a      	cmp	r2, r3
   206ea:	d007      	beq.n	206fc <xTaskCheckForTimeOut+0x5c>
   206ec:	687b      	ldr	r3, [r7, #4]
   206ee:	685a      	ldr	r2, [r3, #4]
   206f0:	693b      	ldr	r3, [r7, #16]
   206f2:	429a      	cmp	r2, r3
   206f4:	d802      	bhi.n	206fc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   206f6:	2301      	movs	r3, #1
   206f8:	617b      	str	r3, [r7, #20]
   206fa:	e016      	b.n	2072a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   206fc:	683b      	ldr	r3, [r7, #0]
   206fe:	681a      	ldr	r2, [r3, #0]
   20700:	68fb      	ldr	r3, [r7, #12]
   20702:	429a      	cmp	r2, r3
   20704:	d90c      	bls.n	20720 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   20706:	683b      	ldr	r3, [r7, #0]
   20708:	681a      	ldr	r2, [r3, #0]
   2070a:	68fb      	ldr	r3, [r7, #12]
   2070c:	1ad2      	subs	r2, r2, r3
   2070e:	683b      	ldr	r3, [r7, #0]
   20710:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   20712:	687b      	ldr	r3, [r7, #4]
   20714:	0018      	movs	r0, r3
   20716:	4b0b      	ldr	r3, [pc, #44]	; (20744 <xTaskCheckForTimeOut+0xa4>)
   20718:	4798      	blx	r3
			xReturn = pdFALSE;
   2071a:	2300      	movs	r3, #0
   2071c:	617b      	str	r3, [r7, #20]
   2071e:	e004      	b.n	2072a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   20720:	683b      	ldr	r3, [r7, #0]
   20722:	2200      	movs	r2, #0
   20724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   20726:	2301      	movs	r3, #1
   20728:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   2072a:	4b07      	ldr	r3, [pc, #28]	; (20748 <xTaskCheckForTimeOut+0xa8>)
   2072c:	4798      	blx	r3

	return xReturn;
   2072e:	697b      	ldr	r3, [r7, #20]
}
   20730:	0018      	movs	r0, r3
   20732:	46bd      	mov	sp, r7
   20734:	b006      	add	sp, #24
   20736:	bd80      	pop	{r7, pc}
   20738:	0001ed51 	.word	0x0001ed51
   2073c:	20000394 	.word	0x20000394
   20740:	200003a8 	.word	0x200003a8
   20744:	00020679 	.word	0x00020679
   20748:	0001ed75 	.word	0x0001ed75

0002074c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   2074c:	b580      	push	{r7, lr}
   2074e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   20750:	4b02      	ldr	r3, [pc, #8]	; (2075c <vTaskMissedYield+0x10>)
   20752:	2201      	movs	r2, #1
   20754:	601a      	str	r2, [r3, #0]
}
   20756:	46c0      	nop			; (mov r8, r8)
   20758:	46bd      	mov	sp, r7
   2075a:	bd80      	pop	{r7, pc}
   2075c:	200003a4 	.word	0x200003a4

00020760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   20760:	b580      	push	{r7, lr}
   20762:	b082      	sub	sp, #8
   20764:	af00      	add	r7, sp, #0
   20766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   20768:	4b04      	ldr	r3, [pc, #16]	; (2077c <prvIdleTask+0x1c>)
   2076a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   2076c:	4b04      	ldr	r3, [pc, #16]	; (20780 <prvIdleTask+0x20>)
   2076e:	681b      	ldr	r3, [r3, #0]
   20770:	2b01      	cmp	r3, #1
   20772:	d9f9      	bls.n	20768 <prvIdleTask+0x8>
			{
				taskYIELD();
   20774:	4b03      	ldr	r3, [pc, #12]	; (20784 <prvIdleTask+0x24>)
   20776:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   20778:	e7f6      	b.n	20768 <prvIdleTask+0x8>
   2077a:	46c0      	nop			; (mov r8, r8)
   2077c:	00020815 	.word	0x00020815
   20780:	200002bc 	.word	0x200002bc
   20784:	0001ed31 	.word	0x0001ed31

00020788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   20788:	b580      	push	{r7, lr}
   2078a:	b082      	sub	sp, #8
   2078c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2078e:	2300      	movs	r3, #0
   20790:	607b      	str	r3, [r7, #4]
   20792:	e00c      	b.n	207ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   20794:	687a      	ldr	r2, [r7, #4]
   20796:	0013      	movs	r3, r2
   20798:	009b      	lsls	r3, r3, #2
   2079a:	189b      	adds	r3, r3, r2
   2079c:	009b      	lsls	r3, r3, #2
   2079e:	4a14      	ldr	r2, [pc, #80]	; (207f0 <prvInitialiseTaskLists+0x68>)
   207a0:	189b      	adds	r3, r3, r2
   207a2:	0018      	movs	r0, r3
   207a4:	4b13      	ldr	r3, [pc, #76]	; (207f4 <prvInitialiseTaskLists+0x6c>)
   207a6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   207a8:	687b      	ldr	r3, [r7, #4]
   207aa:	3301      	adds	r3, #1
   207ac:	607b      	str	r3, [r7, #4]
   207ae:	687b      	ldr	r3, [r7, #4]
   207b0:	2b04      	cmp	r3, #4
   207b2:	d9ef      	bls.n	20794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   207b4:	4b10      	ldr	r3, [pc, #64]	; (207f8 <prvInitialiseTaskLists+0x70>)
   207b6:	0018      	movs	r0, r3
   207b8:	4b0e      	ldr	r3, [pc, #56]	; (207f4 <prvInitialiseTaskLists+0x6c>)
   207ba:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   207bc:	4b0f      	ldr	r3, [pc, #60]	; (207fc <prvInitialiseTaskLists+0x74>)
   207be:	0018      	movs	r0, r3
   207c0:	4b0c      	ldr	r3, [pc, #48]	; (207f4 <prvInitialiseTaskLists+0x6c>)
   207c2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   207c4:	4b0e      	ldr	r3, [pc, #56]	; (20800 <prvInitialiseTaskLists+0x78>)
   207c6:	0018      	movs	r0, r3
   207c8:	4b0a      	ldr	r3, [pc, #40]	; (207f4 <prvInitialiseTaskLists+0x6c>)
   207ca:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   207cc:	4b0d      	ldr	r3, [pc, #52]	; (20804 <prvInitialiseTaskLists+0x7c>)
   207ce:	0018      	movs	r0, r3
   207d0:	4b08      	ldr	r3, [pc, #32]	; (207f4 <prvInitialiseTaskLists+0x6c>)
   207d2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   207d4:	4b0c      	ldr	r3, [pc, #48]	; (20808 <prvInitialiseTaskLists+0x80>)
   207d6:	0018      	movs	r0, r3
   207d8:	4b06      	ldr	r3, [pc, #24]	; (207f4 <prvInitialiseTaskLists+0x6c>)
   207da:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   207dc:	4b0b      	ldr	r3, [pc, #44]	; (2080c <prvInitialiseTaskLists+0x84>)
   207de:	4a06      	ldr	r2, [pc, #24]	; (207f8 <prvInitialiseTaskLists+0x70>)
   207e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   207e2:	4b0b      	ldr	r3, [pc, #44]	; (20810 <prvInitialiseTaskLists+0x88>)
   207e4:	4a05      	ldr	r2, [pc, #20]	; (207fc <prvInitialiseTaskLists+0x74>)
   207e6:	601a      	str	r2, [r3, #0]
}
   207e8:	46c0      	nop			; (mov r8, r8)
   207ea:	46bd      	mov	sp, r7
   207ec:	b002      	add	sp, #8
   207ee:	bd80      	pop	{r7, pc}
   207f0:	200002bc 	.word	0x200002bc
   207f4:	0001eef5 	.word	0x0001eef5
   207f8:	20000320 	.word	0x20000320
   207fc:	20000334 	.word	0x20000334
   20800:	20000350 	.word	0x20000350
   20804:	20000364 	.word	0x20000364
   20808:	2000037c 	.word	0x2000037c
   2080c:	20000348 	.word	0x20000348
   20810:	2000034c 	.word	0x2000034c

00020814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   20814:	b580      	push	{r7, lr}
   20816:	b082      	sub	sp, #8
   20818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2081a:	e01a      	b.n	20852 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2081c:	4b11      	ldr	r3, [pc, #68]	; (20864 <prvCheckTasksWaitingTermination+0x50>)
   2081e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   20820:	4b11      	ldr	r3, [pc, #68]	; (20868 <prvCheckTasksWaitingTermination+0x54>)
   20822:	68db      	ldr	r3, [r3, #12]
   20824:	68db      	ldr	r3, [r3, #12]
   20826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20828:	687b      	ldr	r3, [r7, #4]
   2082a:	3304      	adds	r3, #4
   2082c:	0018      	movs	r0, r3
   2082e:	4b0f      	ldr	r3, [pc, #60]	; (2086c <prvCheckTasksWaitingTermination+0x58>)
   20830:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   20832:	4b0f      	ldr	r3, [pc, #60]	; (20870 <prvCheckTasksWaitingTermination+0x5c>)
   20834:	681b      	ldr	r3, [r3, #0]
   20836:	1e5a      	subs	r2, r3, #1
   20838:	4b0d      	ldr	r3, [pc, #52]	; (20870 <prvCheckTasksWaitingTermination+0x5c>)
   2083a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   2083c:	4b0d      	ldr	r3, [pc, #52]	; (20874 <prvCheckTasksWaitingTermination+0x60>)
   2083e:	681b      	ldr	r3, [r3, #0]
   20840:	1e5a      	subs	r2, r3, #1
   20842:	4b0c      	ldr	r3, [pc, #48]	; (20874 <prvCheckTasksWaitingTermination+0x60>)
   20844:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   20846:	4b0c      	ldr	r3, [pc, #48]	; (20878 <prvCheckTasksWaitingTermination+0x64>)
   20848:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   2084a:	687b      	ldr	r3, [r7, #4]
   2084c:	0018      	movs	r0, r3
   2084e:	4b0b      	ldr	r3, [pc, #44]	; (2087c <prvCheckTasksWaitingTermination+0x68>)
   20850:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   20852:	4b08      	ldr	r3, [pc, #32]	; (20874 <prvCheckTasksWaitingTermination+0x60>)
   20854:	681b      	ldr	r3, [r3, #0]
   20856:	2b00      	cmp	r3, #0
   20858:	d1e0      	bne.n	2081c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   2085a:	46c0      	nop			; (mov r8, r8)
   2085c:	46bd      	mov	sp, r7
   2085e:	b002      	add	sp, #8
   20860:	bd80      	pop	{r7, pc}
   20862:	46c0      	nop			; (mov r8, r8)
   20864:	0001ed51 	.word	0x0001ed51
   20868:	20000364 	.word	0x20000364
   2086c:	0001eff7 	.word	0x0001eff7
   20870:	20000390 	.word	0x20000390
   20874:	20000378 	.word	0x20000378
   20878:	0001ed75 	.word	0x0001ed75
   2087c:	00020881 	.word	0x00020881

00020880 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   20880:	b580      	push	{r7, lr}
   20882:	b082      	sub	sp, #8
   20884:	af00      	add	r7, sp, #0
   20886:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   20888:	687b      	ldr	r3, [r7, #4]
   2088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2088c:	0018      	movs	r0, r3
   2088e:	4b05      	ldr	r3, [pc, #20]	; (208a4 <prvDeleteTCB+0x24>)
   20890:	4798      	blx	r3
			vPortFree( pxTCB );
   20892:	687b      	ldr	r3, [r7, #4]
   20894:	0018      	movs	r0, r3
   20896:	4b03      	ldr	r3, [pc, #12]	; (208a4 <prvDeleteTCB+0x24>)
   20898:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2089a:	46c0      	nop			; (mov r8, r8)
   2089c:	46bd      	mov	sp, r7
   2089e:	b002      	add	sp, #8
   208a0:	bd80      	pop	{r7, pc}
   208a2:	46c0      	nop			; (mov r8, r8)
   208a4:	0001eec1 	.word	0x0001eec1

000208a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   208a8:	b580      	push	{r7, lr}
   208aa:	b082      	sub	sp, #8
   208ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   208ae:	4b0e      	ldr	r3, [pc, #56]	; (208e8 <prvResetNextTaskUnblockTime+0x40>)
   208b0:	681b      	ldr	r3, [r3, #0]
   208b2:	681b      	ldr	r3, [r3, #0]
   208b4:	2b00      	cmp	r3, #0
   208b6:	d101      	bne.n	208bc <prvResetNextTaskUnblockTime+0x14>
   208b8:	2301      	movs	r3, #1
   208ba:	e000      	b.n	208be <prvResetNextTaskUnblockTime+0x16>
   208bc:	2300      	movs	r3, #0
   208be:	2b00      	cmp	r3, #0
   208c0:	d004      	beq.n	208cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   208c2:	4b0a      	ldr	r3, [pc, #40]	; (208ec <prvResetNextTaskUnblockTime+0x44>)
   208c4:	2201      	movs	r2, #1
   208c6:	4252      	negs	r2, r2
   208c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   208ca:	e008      	b.n	208de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   208cc:	4b06      	ldr	r3, [pc, #24]	; (208e8 <prvResetNextTaskUnblockTime+0x40>)
   208ce:	681b      	ldr	r3, [r3, #0]
   208d0:	68db      	ldr	r3, [r3, #12]
   208d2:	68db      	ldr	r3, [r3, #12]
   208d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   208d6:	687b      	ldr	r3, [r7, #4]
   208d8:	685a      	ldr	r2, [r3, #4]
   208da:	4b04      	ldr	r3, [pc, #16]	; (208ec <prvResetNextTaskUnblockTime+0x44>)
   208dc:	601a      	str	r2, [r3, #0]
}
   208de:	46c0      	nop			; (mov r8, r8)
   208e0:	46bd      	mov	sp, r7
   208e2:	b002      	add	sp, #8
   208e4:	bd80      	pop	{r7, pc}
   208e6:	46c0      	nop			; (mov r8, r8)
   208e8:	20000348 	.word	0x20000348
   208ec:	200003b0 	.word	0x200003b0

000208f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   208f0:	b580      	push	{r7, lr}
   208f2:	b082      	sub	sp, #8
   208f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   208f6:	4b0a      	ldr	r3, [pc, #40]	; (20920 <xTaskGetSchedulerState+0x30>)
   208f8:	681b      	ldr	r3, [r3, #0]
   208fa:	2b00      	cmp	r3, #0
   208fc:	d102      	bne.n	20904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   208fe:	2301      	movs	r3, #1
   20900:	607b      	str	r3, [r7, #4]
   20902:	e008      	b.n	20916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20904:	4b07      	ldr	r3, [pc, #28]	; (20924 <xTaskGetSchedulerState+0x34>)
   20906:	681b      	ldr	r3, [r3, #0]
   20908:	2b00      	cmp	r3, #0
   2090a:	d102      	bne.n	20912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2090c:	2302      	movs	r3, #2
   2090e:	607b      	str	r3, [r7, #4]
   20910:	e001      	b.n	20916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   20912:	2300      	movs	r3, #0
   20914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   20916:	687b      	ldr	r3, [r7, #4]
	}
   20918:	0018      	movs	r0, r3
   2091a:	46bd      	mov	sp, r7
   2091c:	b002      	add	sp, #8
   2091e:	bd80      	pop	{r7, pc}
   20920:	2000039c 	.word	0x2000039c
   20924:	200003b8 	.word	0x200003b8

00020928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   20928:	b580      	push	{r7, lr}
   2092a:	b084      	sub	sp, #16
   2092c:	af00      	add	r7, sp, #0
   2092e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   20930:	687b      	ldr	r3, [r7, #4]
   20932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20934:	2300      	movs	r3, #0
   20936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   20938:	687b      	ldr	r3, [r7, #4]
   2093a:	2b00      	cmp	r3, #0
   2093c:	d056      	beq.n	209ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   2093e:	68bb      	ldr	r3, [r7, #8]
   20940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20942:	4b2d      	ldr	r3, [pc, #180]	; (209f8 <xTaskPriorityInherit+0xd0>)
   20944:	681b      	ldr	r3, [r3, #0]
   20946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20948:	429a      	cmp	r2, r3
   2094a:	d246      	bcs.n	209da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   2094c:	68bb      	ldr	r3, [r7, #8]
   2094e:	699b      	ldr	r3, [r3, #24]
   20950:	2b00      	cmp	r3, #0
   20952:	db06      	blt.n	20962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20954:	4b28      	ldr	r3, [pc, #160]	; (209f8 <xTaskPriorityInherit+0xd0>)
   20956:	681b      	ldr	r3, [r3, #0]
   20958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2095a:	2205      	movs	r2, #5
   2095c:	1ad2      	subs	r2, r2, r3
   2095e:	68bb      	ldr	r3, [r7, #8]
   20960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   20962:	68bb      	ldr	r3, [r7, #8]
   20964:	6959      	ldr	r1, [r3, #20]
   20966:	68bb      	ldr	r3, [r7, #8]
   20968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2096a:	0013      	movs	r3, r2
   2096c:	009b      	lsls	r3, r3, #2
   2096e:	189b      	adds	r3, r3, r2
   20970:	009b      	lsls	r3, r3, #2
   20972:	4a22      	ldr	r2, [pc, #136]	; (209fc <xTaskPriorityInherit+0xd4>)
   20974:	189b      	adds	r3, r3, r2
   20976:	4299      	cmp	r1, r3
   20978:	d101      	bne.n	2097e <xTaskPriorityInherit+0x56>
   2097a:	2301      	movs	r3, #1
   2097c:	e000      	b.n	20980 <xTaskPriorityInherit+0x58>
   2097e:	2300      	movs	r3, #0
   20980:	2b00      	cmp	r3, #0
   20982:	d022      	beq.n	209ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20984:	68bb      	ldr	r3, [r7, #8]
   20986:	3304      	adds	r3, #4
   20988:	0018      	movs	r0, r3
   2098a:	4b1d      	ldr	r3, [pc, #116]	; (20a00 <xTaskPriorityInherit+0xd8>)
   2098c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2098e:	4b1a      	ldr	r3, [pc, #104]	; (209f8 <xTaskPriorityInherit+0xd0>)
   20990:	681b      	ldr	r3, [r3, #0]
   20992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20994:	68bb      	ldr	r3, [r7, #8]
   20996:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   20998:	68bb      	ldr	r3, [r7, #8]
   2099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2099c:	4b19      	ldr	r3, [pc, #100]	; (20a04 <xTaskPriorityInherit+0xdc>)
   2099e:	681b      	ldr	r3, [r3, #0]
   209a0:	429a      	cmp	r2, r3
   209a2:	d903      	bls.n	209ac <xTaskPriorityInherit+0x84>
   209a4:	68bb      	ldr	r3, [r7, #8]
   209a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209a8:	4b16      	ldr	r3, [pc, #88]	; (20a04 <xTaskPriorityInherit+0xdc>)
   209aa:	601a      	str	r2, [r3, #0]
   209ac:	68bb      	ldr	r3, [r7, #8]
   209ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209b0:	0013      	movs	r3, r2
   209b2:	009b      	lsls	r3, r3, #2
   209b4:	189b      	adds	r3, r3, r2
   209b6:	009b      	lsls	r3, r3, #2
   209b8:	4a10      	ldr	r2, [pc, #64]	; (209fc <xTaskPriorityInherit+0xd4>)
   209ba:	189a      	adds	r2, r3, r2
   209bc:	68bb      	ldr	r3, [r7, #8]
   209be:	3304      	adds	r3, #4
   209c0:	0019      	movs	r1, r3
   209c2:	0010      	movs	r0, r2
   209c4:	4b10      	ldr	r3, [pc, #64]	; (20a08 <xTaskPriorityInherit+0xe0>)
   209c6:	4798      	blx	r3
   209c8:	e004      	b.n	209d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   209ca:	4b0b      	ldr	r3, [pc, #44]	; (209f8 <xTaskPriorityInherit+0xd0>)
   209cc:	681b      	ldr	r3, [r3, #0]
   209ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   209d0:	68bb      	ldr	r3, [r7, #8]
   209d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   209d4:	2301      	movs	r3, #1
   209d6:	60fb      	str	r3, [r7, #12]
   209d8:	e008      	b.n	209ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   209da:	68bb      	ldr	r3, [r7, #8]
   209dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   209de:	4b06      	ldr	r3, [pc, #24]	; (209f8 <xTaskPriorityInherit+0xd0>)
   209e0:	681b      	ldr	r3, [r3, #0]
   209e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   209e4:	429a      	cmp	r2, r3
   209e6:	d201      	bcs.n	209ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   209e8:	2301      	movs	r3, #1
   209ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   209ec:	68fb      	ldr	r3, [r7, #12]
	}
   209ee:	0018      	movs	r0, r3
   209f0:	46bd      	mov	sp, r7
   209f2:	b004      	add	sp, #16
   209f4:	bd80      	pop	{r7, pc}
   209f6:	46c0      	nop			; (mov r8, r8)
   209f8:	200002b8 	.word	0x200002b8
   209fc:	200002bc 	.word	0x200002bc
   20a00:	0001eff7 	.word	0x0001eff7
   20a04:	20000398 	.word	0x20000398
   20a08:	0001ef47 	.word	0x0001ef47

00020a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   20a0c:	b580      	push	{r7, lr}
   20a0e:	b084      	sub	sp, #16
   20a10:	af00      	add	r7, sp, #0
   20a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20a14:	687b      	ldr	r3, [r7, #4]
   20a16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   20a18:	2300      	movs	r3, #0
   20a1a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   20a1c:	687b      	ldr	r3, [r7, #4]
   20a1e:	2b00      	cmp	r3, #0
   20a20:	d044      	beq.n	20aac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   20a22:	4b25      	ldr	r3, [pc, #148]	; (20ab8 <xTaskPriorityDisinherit+0xac>)
   20a24:	681b      	ldr	r3, [r3, #0]
   20a26:	68ba      	ldr	r2, [r7, #8]
   20a28:	429a      	cmp	r2, r3
   20a2a:	d001      	beq.n	20a30 <xTaskPriorityDisinherit+0x24>
   20a2c:	b672      	cpsid	i
   20a2e:	e7fe      	b.n	20a2e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   20a30:	68bb      	ldr	r3, [r7, #8]
   20a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20a34:	2b00      	cmp	r3, #0
   20a36:	d101      	bne.n	20a3c <xTaskPriorityDisinherit+0x30>
   20a38:	b672      	cpsid	i
   20a3a:	e7fe      	b.n	20a3a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   20a3c:	68bb      	ldr	r3, [r7, #8]
   20a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20a40:	1e5a      	subs	r2, r3, #1
   20a42:	68bb      	ldr	r3, [r7, #8]
   20a44:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   20a46:	68bb      	ldr	r3, [r7, #8]
   20a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a4a:	68bb      	ldr	r3, [r7, #8]
   20a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20a4e:	429a      	cmp	r2, r3
   20a50:	d02c      	beq.n	20aac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   20a52:	68bb      	ldr	r3, [r7, #8]
   20a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20a56:	2b00      	cmp	r3, #0
   20a58:	d128      	bne.n	20aac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20a5a:	68bb      	ldr	r3, [r7, #8]
   20a5c:	3304      	adds	r3, #4
   20a5e:	0018      	movs	r0, r3
   20a60:	4b16      	ldr	r3, [pc, #88]	; (20abc <xTaskPriorityDisinherit+0xb0>)
   20a62:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   20a64:	68bb      	ldr	r3, [r7, #8]
   20a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20a68:	68bb      	ldr	r3, [r7, #8]
   20a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20a6c:	68bb      	ldr	r3, [r7, #8]
   20a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20a70:	2205      	movs	r2, #5
   20a72:	1ad2      	subs	r2, r2, r3
   20a74:	68bb      	ldr	r3, [r7, #8]
   20a76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   20a78:	68bb      	ldr	r3, [r7, #8]
   20a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a7c:	4b10      	ldr	r3, [pc, #64]	; (20ac0 <xTaskPriorityDisinherit+0xb4>)
   20a7e:	681b      	ldr	r3, [r3, #0]
   20a80:	429a      	cmp	r2, r3
   20a82:	d903      	bls.n	20a8c <xTaskPriorityDisinherit+0x80>
   20a84:	68bb      	ldr	r3, [r7, #8]
   20a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a88:	4b0d      	ldr	r3, [pc, #52]	; (20ac0 <xTaskPriorityDisinherit+0xb4>)
   20a8a:	601a      	str	r2, [r3, #0]
   20a8c:	68bb      	ldr	r3, [r7, #8]
   20a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a90:	0013      	movs	r3, r2
   20a92:	009b      	lsls	r3, r3, #2
   20a94:	189b      	adds	r3, r3, r2
   20a96:	009b      	lsls	r3, r3, #2
   20a98:	4a0a      	ldr	r2, [pc, #40]	; (20ac4 <xTaskPriorityDisinherit+0xb8>)
   20a9a:	189a      	adds	r2, r3, r2
   20a9c:	68bb      	ldr	r3, [r7, #8]
   20a9e:	3304      	adds	r3, #4
   20aa0:	0019      	movs	r1, r3
   20aa2:	0010      	movs	r0, r2
   20aa4:	4b08      	ldr	r3, [pc, #32]	; (20ac8 <xTaskPriorityDisinherit+0xbc>)
   20aa6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   20aa8:	2301      	movs	r3, #1
   20aaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   20aac:	68fb      	ldr	r3, [r7, #12]
	}
   20aae:	0018      	movs	r0, r3
   20ab0:	46bd      	mov	sp, r7
   20ab2:	b004      	add	sp, #16
   20ab4:	bd80      	pop	{r7, pc}
   20ab6:	46c0      	nop			; (mov r8, r8)
   20ab8:	200002b8 	.word	0x200002b8
   20abc:	0001eff7 	.word	0x0001eff7
   20ac0:	20000398 	.word	0x20000398
   20ac4:	200002bc 	.word	0x200002bc
   20ac8:	0001ef47 	.word	0x0001ef47

00020acc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   20acc:	b580      	push	{r7, lr}
   20ace:	b086      	sub	sp, #24
   20ad0:	af00      	add	r7, sp, #0
   20ad2:	6078      	str	r0, [r7, #4]
   20ad4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   20ad6:	687b      	ldr	r3, [r7, #4]
   20ad8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   20ada:	2301      	movs	r3, #1
   20adc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   20ade:	687b      	ldr	r3, [r7, #4]
   20ae0:	2b00      	cmp	r3, #0
   20ae2:	d05d      	beq.n	20ba0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   20ae4:	693b      	ldr	r3, [r7, #16]
   20ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20ae8:	2b00      	cmp	r3, #0
   20aea:	d101      	bne.n	20af0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   20aec:	b672      	cpsid	i
   20aee:	e7fe      	b.n	20aee <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   20af0:	693b      	ldr	r3, [r7, #16]
   20af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20af4:	683b      	ldr	r3, [r7, #0]
   20af6:	429a      	cmp	r2, r3
   20af8:	d202      	bcs.n	20b00 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   20afa:	683b      	ldr	r3, [r7, #0]
   20afc:	617b      	str	r3, [r7, #20]
   20afe:	e002      	b.n	20b06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   20b00:	693b      	ldr	r3, [r7, #16]
   20b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20b04:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20b06:	693b      	ldr	r3, [r7, #16]
   20b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b0a:	697b      	ldr	r3, [r7, #20]
   20b0c:	429a      	cmp	r2, r3
   20b0e:	d047      	beq.n	20ba0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20b10:	693b      	ldr	r3, [r7, #16]
   20b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20b14:	68fb      	ldr	r3, [r7, #12]
   20b16:	429a      	cmp	r2, r3
   20b18:	d142      	bne.n	20ba0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   20b1a:	4b23      	ldr	r3, [pc, #140]	; (20ba8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   20b1c:	681b      	ldr	r3, [r3, #0]
   20b1e:	693a      	ldr	r2, [r7, #16]
   20b20:	429a      	cmp	r2, r3
   20b22:	d101      	bne.n	20b28 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   20b24:	b672      	cpsid	i
   20b26:	e7fe      	b.n	20b26 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20b28:	693b      	ldr	r3, [r7, #16]
   20b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20b2c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   20b2e:	693b      	ldr	r3, [r7, #16]
   20b30:	697a      	ldr	r2, [r7, #20]
   20b32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20b34:	693b      	ldr	r3, [r7, #16]
   20b36:	699b      	ldr	r3, [r3, #24]
   20b38:	2b00      	cmp	r3, #0
   20b3a:	db04      	blt.n	20b46 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20b3c:	697b      	ldr	r3, [r7, #20]
   20b3e:	2205      	movs	r2, #5
   20b40:	1ad2      	subs	r2, r2, r3
   20b42:	693b      	ldr	r3, [r7, #16]
   20b44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20b46:	693b      	ldr	r3, [r7, #16]
   20b48:	6959      	ldr	r1, [r3, #20]
   20b4a:	68ba      	ldr	r2, [r7, #8]
   20b4c:	0013      	movs	r3, r2
   20b4e:	009b      	lsls	r3, r3, #2
   20b50:	189b      	adds	r3, r3, r2
   20b52:	009b      	lsls	r3, r3, #2
   20b54:	4a15      	ldr	r2, [pc, #84]	; (20bac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20b56:	189b      	adds	r3, r3, r2
   20b58:	4299      	cmp	r1, r3
   20b5a:	d101      	bne.n	20b60 <vTaskPriorityDisinheritAfterTimeout+0x94>
   20b5c:	2301      	movs	r3, #1
   20b5e:	e000      	b.n	20b62 <vTaskPriorityDisinheritAfterTimeout+0x96>
   20b60:	2300      	movs	r3, #0
   20b62:	2b00      	cmp	r3, #0
   20b64:	d01c      	beq.n	20ba0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20b66:	693b      	ldr	r3, [r7, #16]
   20b68:	3304      	adds	r3, #4
   20b6a:	0018      	movs	r0, r3
   20b6c:	4b10      	ldr	r3, [pc, #64]	; (20bb0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   20b6e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   20b70:	693b      	ldr	r3, [r7, #16]
   20b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b74:	4b0f      	ldr	r3, [pc, #60]	; (20bb4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20b76:	681b      	ldr	r3, [r3, #0]
   20b78:	429a      	cmp	r2, r3
   20b7a:	d903      	bls.n	20b84 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   20b7c:	693b      	ldr	r3, [r7, #16]
   20b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b80:	4b0c      	ldr	r3, [pc, #48]	; (20bb4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   20b82:	601a      	str	r2, [r3, #0]
   20b84:	693b      	ldr	r3, [r7, #16]
   20b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b88:	0013      	movs	r3, r2
   20b8a:	009b      	lsls	r3, r3, #2
   20b8c:	189b      	adds	r3, r3, r2
   20b8e:	009b      	lsls	r3, r3, #2
   20b90:	4a06      	ldr	r2, [pc, #24]	; (20bac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   20b92:	189a      	adds	r2, r3, r2
   20b94:	693b      	ldr	r3, [r7, #16]
   20b96:	3304      	adds	r3, #4
   20b98:	0019      	movs	r1, r3
   20b9a:	0010      	movs	r0, r2
   20b9c:	4b06      	ldr	r3, [pc, #24]	; (20bb8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   20b9e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20ba0:	46c0      	nop			; (mov r8, r8)
   20ba2:	46bd      	mov	sp, r7
   20ba4:	b006      	add	sp, #24
   20ba6:	bd80      	pop	{r7, pc}
   20ba8:	200002b8 	.word	0x200002b8
   20bac:	200002bc 	.word	0x200002bc
   20bb0:	0001eff7 	.word	0x0001eff7
   20bb4:	20000398 	.word	0x20000398
   20bb8:	0001ef47 	.word	0x0001ef47

00020bbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   20bbc:	b580      	push	{r7, lr}
   20bbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   20bc0:	4b06      	ldr	r3, [pc, #24]	; (20bdc <pvTaskIncrementMutexHeldCount+0x20>)
   20bc2:	681b      	ldr	r3, [r3, #0]
   20bc4:	2b00      	cmp	r3, #0
   20bc6:	d004      	beq.n	20bd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   20bc8:	4b04      	ldr	r3, [pc, #16]	; (20bdc <pvTaskIncrementMutexHeldCount+0x20>)
   20bca:	681b      	ldr	r3, [r3, #0]
   20bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   20bce:	3201      	adds	r2, #1
   20bd0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   20bd2:	4b02      	ldr	r3, [pc, #8]	; (20bdc <pvTaskIncrementMutexHeldCount+0x20>)
   20bd4:	681b      	ldr	r3, [r3, #0]
	}
   20bd6:	0018      	movs	r0, r3
   20bd8:	46bd      	mov	sp, r7
   20bda:	bd80      	pop	{r7, pc}
   20bdc:	200002b8 	.word	0x200002b8

00020be0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   20be0:	b580      	push	{r7, lr}
   20be2:	b084      	sub	sp, #16
   20be4:	af00      	add	r7, sp, #0
   20be6:	6078      	str	r0, [r7, #4]
   20be8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   20bea:	4b1d      	ldr	r3, [pc, #116]	; (20c60 <ulTaskNotifyTake+0x80>)
   20bec:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   20bee:	4b1d      	ldr	r3, [pc, #116]	; (20c64 <ulTaskNotifyTake+0x84>)
   20bf0:	681b      	ldr	r3, [r3, #0]
   20bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20bf4:	2b00      	cmp	r3, #0
   20bf6:	d10e      	bne.n	20c16 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   20bf8:	4b1a      	ldr	r3, [pc, #104]	; (20c64 <ulTaskNotifyTake+0x84>)
   20bfa:	681b      	ldr	r3, [r3, #0]
   20bfc:	224c      	movs	r2, #76	; 0x4c
   20bfe:	2101      	movs	r1, #1
   20c00:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   20c02:	683b      	ldr	r3, [r7, #0]
   20c04:	2b00      	cmp	r3, #0
   20c06:	d006      	beq.n	20c16 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20c08:	683b      	ldr	r3, [r7, #0]
   20c0a:	2101      	movs	r1, #1
   20c0c:	0018      	movs	r0, r3
   20c0e:	4b16      	ldr	r3, [pc, #88]	; (20c68 <ulTaskNotifyTake+0x88>)
   20c10:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   20c12:	4b16      	ldr	r3, [pc, #88]	; (20c6c <ulTaskNotifyTake+0x8c>)
   20c14:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   20c16:	4b16      	ldr	r3, [pc, #88]	; (20c70 <ulTaskNotifyTake+0x90>)
   20c18:	4798      	blx	r3

		taskENTER_CRITICAL();
   20c1a:	4b11      	ldr	r3, [pc, #68]	; (20c60 <ulTaskNotifyTake+0x80>)
   20c1c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   20c1e:	4b11      	ldr	r3, [pc, #68]	; (20c64 <ulTaskNotifyTake+0x84>)
   20c20:	681b      	ldr	r3, [r3, #0]
   20c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20c24:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   20c26:	68fb      	ldr	r3, [r7, #12]
   20c28:	2b00      	cmp	r3, #0
   20c2a:	d00c      	beq.n	20c46 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   20c2c:	687b      	ldr	r3, [r7, #4]
   20c2e:	2b00      	cmp	r3, #0
   20c30:	d004      	beq.n	20c3c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   20c32:	4b0c      	ldr	r3, [pc, #48]	; (20c64 <ulTaskNotifyTake+0x84>)
   20c34:	681b      	ldr	r3, [r3, #0]
   20c36:	2200      	movs	r2, #0
   20c38:	649a      	str	r2, [r3, #72]	; 0x48
   20c3a:	e004      	b.n	20c46 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   20c3c:	4b09      	ldr	r3, [pc, #36]	; (20c64 <ulTaskNotifyTake+0x84>)
   20c3e:	681b      	ldr	r3, [r3, #0]
   20c40:	68fa      	ldr	r2, [r7, #12]
   20c42:	3a01      	subs	r2, #1
   20c44:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20c46:	4b07      	ldr	r3, [pc, #28]	; (20c64 <ulTaskNotifyTake+0x84>)
   20c48:	681b      	ldr	r3, [r3, #0]
   20c4a:	224c      	movs	r2, #76	; 0x4c
   20c4c:	2100      	movs	r1, #0
   20c4e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   20c50:	4b07      	ldr	r3, [pc, #28]	; (20c70 <ulTaskNotifyTake+0x90>)
   20c52:	4798      	blx	r3

		return ulReturn;
   20c54:	68fb      	ldr	r3, [r7, #12]
	}
   20c56:	0018      	movs	r0, r3
   20c58:	46bd      	mov	sp, r7
   20c5a:	b004      	add	sp, #16
   20c5c:	bd80      	pop	{r7, pc}
   20c5e:	46c0      	nop			; (mov r8, r8)
   20c60:	0001ed51 	.word	0x0001ed51
   20c64:	200002b8 	.word	0x200002b8
   20c68:	00020d79 	.word	0x00020d79
   20c6c:	0001ed31 	.word	0x0001ed31
   20c70:	0001ed75 	.word	0x0001ed75

00020c74 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20c74:	b580      	push	{r7, lr}
   20c76:	b086      	sub	sp, #24
   20c78:	af00      	add	r7, sp, #0
   20c7a:	6078      	str	r0, [r7, #4]
   20c7c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   20c7e:	687b      	ldr	r3, [r7, #4]
   20c80:	2b00      	cmp	r3, #0
   20c82:	d101      	bne.n	20c88 <vTaskNotifyGiveFromISR+0x14>
   20c84:	b672      	cpsid	i
   20c86:	e7fe      	b.n	20c86 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   20c88:	687b      	ldr	r3, [r7, #4]
   20c8a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   20c8c:	4b30      	ldr	r3, [pc, #192]	; (20d50 <vTaskNotifyGiveFromISR+0xdc>)
   20c8e:	4798      	blx	r3
   20c90:	0003      	movs	r3, r0
   20c92:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   20c94:	230f      	movs	r3, #15
   20c96:	18fb      	adds	r3, r7, r3
   20c98:	697a      	ldr	r2, [r7, #20]
   20c9a:	214c      	movs	r1, #76	; 0x4c
   20c9c:	5c52      	ldrb	r2, [r2, r1]
   20c9e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   20ca0:	697b      	ldr	r3, [r7, #20]
   20ca2:	224c      	movs	r2, #76	; 0x4c
   20ca4:	2102      	movs	r1, #2
   20ca6:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   20ca8:	697b      	ldr	r3, [r7, #20]
   20caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20cac:	1c5a      	adds	r2, r3, #1
   20cae:	697b      	ldr	r3, [r7, #20]
   20cb0:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   20cb2:	230f      	movs	r3, #15
   20cb4:	18fb      	adds	r3, r7, r3
   20cb6:	781b      	ldrb	r3, [r3, #0]
   20cb8:	2b01      	cmp	r3, #1
   20cba:	d140      	bne.n	20d3e <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   20cbc:	697b      	ldr	r3, [r7, #20]
   20cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20cc0:	2b00      	cmp	r3, #0
   20cc2:	d001      	beq.n	20cc8 <vTaskNotifyGiveFromISR+0x54>
   20cc4:	b672      	cpsid	i
   20cc6:	e7fe      	b.n	20cc6 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20cc8:	4b22      	ldr	r3, [pc, #136]	; (20d54 <vTaskNotifyGiveFromISR+0xe0>)
   20cca:	681b      	ldr	r3, [r3, #0]
   20ccc:	2b00      	cmp	r3, #0
   20cce:	d11d      	bne.n	20d0c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20cd0:	697b      	ldr	r3, [r7, #20]
   20cd2:	3304      	adds	r3, #4
   20cd4:	0018      	movs	r0, r3
   20cd6:	4b20      	ldr	r3, [pc, #128]	; (20d58 <vTaskNotifyGiveFromISR+0xe4>)
   20cd8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20cda:	697b      	ldr	r3, [r7, #20]
   20cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cde:	4b1f      	ldr	r3, [pc, #124]	; (20d5c <vTaskNotifyGiveFromISR+0xe8>)
   20ce0:	681b      	ldr	r3, [r3, #0]
   20ce2:	429a      	cmp	r2, r3
   20ce4:	d903      	bls.n	20cee <vTaskNotifyGiveFromISR+0x7a>
   20ce6:	697b      	ldr	r3, [r7, #20]
   20ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cea:	4b1c      	ldr	r3, [pc, #112]	; (20d5c <vTaskNotifyGiveFromISR+0xe8>)
   20cec:	601a      	str	r2, [r3, #0]
   20cee:	697b      	ldr	r3, [r7, #20]
   20cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cf2:	0013      	movs	r3, r2
   20cf4:	009b      	lsls	r3, r3, #2
   20cf6:	189b      	adds	r3, r3, r2
   20cf8:	009b      	lsls	r3, r3, #2
   20cfa:	4a19      	ldr	r2, [pc, #100]	; (20d60 <vTaskNotifyGiveFromISR+0xec>)
   20cfc:	189a      	adds	r2, r3, r2
   20cfe:	697b      	ldr	r3, [r7, #20]
   20d00:	3304      	adds	r3, #4
   20d02:	0019      	movs	r1, r3
   20d04:	0010      	movs	r0, r2
   20d06:	4b17      	ldr	r3, [pc, #92]	; (20d64 <vTaskNotifyGiveFromISR+0xf0>)
   20d08:	4798      	blx	r3
   20d0a:	e007      	b.n	20d1c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   20d0c:	697b      	ldr	r3, [r7, #20]
   20d0e:	3318      	adds	r3, #24
   20d10:	001a      	movs	r2, r3
   20d12:	4b15      	ldr	r3, [pc, #84]	; (20d68 <vTaskNotifyGiveFromISR+0xf4>)
   20d14:	0011      	movs	r1, r2
   20d16:	0018      	movs	r0, r3
   20d18:	4b12      	ldr	r3, [pc, #72]	; (20d64 <vTaskNotifyGiveFromISR+0xf0>)
   20d1a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   20d1c:	697b      	ldr	r3, [r7, #20]
   20d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d20:	4b12      	ldr	r3, [pc, #72]	; (20d6c <vTaskNotifyGiveFromISR+0xf8>)
   20d22:	681b      	ldr	r3, [r3, #0]
   20d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20d26:	429a      	cmp	r2, r3
   20d28:	d909      	bls.n	20d3e <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   20d2a:	683b      	ldr	r3, [r7, #0]
   20d2c:	2b00      	cmp	r3, #0
   20d2e:	d003      	beq.n	20d38 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   20d30:	683b      	ldr	r3, [r7, #0]
   20d32:	2201      	movs	r2, #1
   20d34:	601a      	str	r2, [r3, #0]
   20d36:	e002      	b.n	20d3e <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   20d38:	4b0d      	ldr	r3, [pc, #52]	; (20d70 <vTaskNotifyGiveFromISR+0xfc>)
   20d3a:	2201      	movs	r2, #1
   20d3c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   20d3e:	693b      	ldr	r3, [r7, #16]
   20d40:	0018      	movs	r0, r3
   20d42:	4b0c      	ldr	r3, [pc, #48]	; (20d74 <vTaskNotifyGiveFromISR+0x100>)
   20d44:	4798      	blx	r3
	}
   20d46:	46c0      	nop			; (mov r8, r8)
   20d48:	46bd      	mov	sp, r7
   20d4a:	b006      	add	sp, #24
   20d4c:	bd80      	pop	{r7, pc}
   20d4e:	46c0      	nop			; (mov r8, r8)
   20d50:	0001eda5 	.word	0x0001eda5
   20d54:	200003b8 	.word	0x200003b8
   20d58:	0001eff7 	.word	0x0001eff7
   20d5c:	20000398 	.word	0x20000398
   20d60:	200002bc 	.word	0x200002bc
   20d64:	0001ef47 	.word	0x0001ef47
   20d68:	20000350 	.word	0x20000350
   20d6c:	200002b8 	.word	0x200002b8
   20d70:	200003a4 	.word	0x200003a4
   20d74:	0001edb1 	.word	0x0001edb1

00020d78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   20d78:	b580      	push	{r7, lr}
   20d7a:	b084      	sub	sp, #16
   20d7c:	af00      	add	r7, sp, #0
   20d7e:	6078      	str	r0, [r7, #4]
   20d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20d82:	4b21      	ldr	r3, [pc, #132]	; (20e08 <prvAddCurrentTaskToDelayedList+0x90>)
   20d84:	681b      	ldr	r3, [r3, #0]
   20d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20d88:	4b20      	ldr	r3, [pc, #128]	; (20e0c <prvAddCurrentTaskToDelayedList+0x94>)
   20d8a:	681b      	ldr	r3, [r3, #0]
   20d8c:	3304      	adds	r3, #4
   20d8e:	0018      	movs	r0, r3
   20d90:	4b1f      	ldr	r3, [pc, #124]	; (20e10 <prvAddCurrentTaskToDelayedList+0x98>)
   20d92:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   20d94:	687b      	ldr	r3, [r7, #4]
   20d96:	3301      	adds	r3, #1
   20d98:	d10b      	bne.n	20db2 <prvAddCurrentTaskToDelayedList+0x3a>
   20d9a:	683b      	ldr	r3, [r7, #0]
   20d9c:	2b00      	cmp	r3, #0
   20d9e:	d008      	beq.n	20db2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20da0:	4b1a      	ldr	r3, [pc, #104]	; (20e0c <prvAddCurrentTaskToDelayedList+0x94>)
   20da2:	681b      	ldr	r3, [r3, #0]
   20da4:	1d1a      	adds	r2, r3, #4
   20da6:	4b1b      	ldr	r3, [pc, #108]	; (20e14 <prvAddCurrentTaskToDelayedList+0x9c>)
   20da8:	0011      	movs	r1, r2
   20daa:	0018      	movs	r0, r3
   20dac:	4b1a      	ldr	r3, [pc, #104]	; (20e18 <prvAddCurrentTaskToDelayedList+0xa0>)
   20dae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   20db0:	e026      	b.n	20e00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   20db2:	68fa      	ldr	r2, [r7, #12]
   20db4:	687b      	ldr	r3, [r7, #4]
   20db6:	18d3      	adds	r3, r2, r3
   20db8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   20dba:	4b14      	ldr	r3, [pc, #80]	; (20e0c <prvAddCurrentTaskToDelayedList+0x94>)
   20dbc:	681b      	ldr	r3, [r3, #0]
   20dbe:	68ba      	ldr	r2, [r7, #8]
   20dc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   20dc2:	68ba      	ldr	r2, [r7, #8]
   20dc4:	68fb      	ldr	r3, [r7, #12]
   20dc6:	429a      	cmp	r2, r3
   20dc8:	d209      	bcs.n	20dde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20dca:	4b14      	ldr	r3, [pc, #80]	; (20e1c <prvAddCurrentTaskToDelayedList+0xa4>)
   20dcc:	681a      	ldr	r2, [r3, #0]
   20dce:	4b0f      	ldr	r3, [pc, #60]	; (20e0c <prvAddCurrentTaskToDelayedList+0x94>)
   20dd0:	681b      	ldr	r3, [r3, #0]
   20dd2:	3304      	adds	r3, #4
   20dd4:	0019      	movs	r1, r3
   20dd6:	0010      	movs	r0, r2
   20dd8:	4b11      	ldr	r3, [pc, #68]	; (20e20 <prvAddCurrentTaskToDelayedList+0xa8>)
   20dda:	4798      	blx	r3
}
   20ddc:	e010      	b.n	20e00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   20dde:	4b11      	ldr	r3, [pc, #68]	; (20e24 <prvAddCurrentTaskToDelayedList+0xac>)
   20de0:	681a      	ldr	r2, [r3, #0]
   20de2:	4b0a      	ldr	r3, [pc, #40]	; (20e0c <prvAddCurrentTaskToDelayedList+0x94>)
   20de4:	681b      	ldr	r3, [r3, #0]
   20de6:	3304      	adds	r3, #4
   20de8:	0019      	movs	r1, r3
   20dea:	0010      	movs	r0, r2
   20dec:	4b0c      	ldr	r3, [pc, #48]	; (20e20 <prvAddCurrentTaskToDelayedList+0xa8>)
   20dee:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20df0:	4b0d      	ldr	r3, [pc, #52]	; (20e28 <prvAddCurrentTaskToDelayedList+0xb0>)
   20df2:	681b      	ldr	r3, [r3, #0]
   20df4:	68ba      	ldr	r2, [r7, #8]
   20df6:	429a      	cmp	r2, r3
   20df8:	d202      	bcs.n	20e00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   20dfa:	4b0b      	ldr	r3, [pc, #44]	; (20e28 <prvAddCurrentTaskToDelayedList+0xb0>)
   20dfc:	68ba      	ldr	r2, [r7, #8]
   20dfe:	601a      	str	r2, [r3, #0]
}
   20e00:	46c0      	nop			; (mov r8, r8)
   20e02:	46bd      	mov	sp, r7
   20e04:	b004      	add	sp, #16
   20e06:	bd80      	pop	{r7, pc}
   20e08:	20000394 	.word	0x20000394
   20e0c:	200002b8 	.word	0x200002b8
   20e10:	0001eff7 	.word	0x0001eff7
   20e14:	2000037c 	.word	0x2000037c
   20e18:	0001ef47 	.word	0x0001ef47
   20e1c:	2000034c 	.word	0x2000034c
   20e20:	0001ef8b 	.word	0x0001ef8b
   20e24:	20000348 	.word	0x20000348
   20e28:	200003b0 	.word	0x200003b0

00020e2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   20e2c:	b590      	push	{r4, r7, lr}
   20e2e:	b085      	sub	sp, #20
   20e30:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   20e32:	2300      	movs	r3, #0
   20e34:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   20e36:	4b0e      	ldr	r3, [pc, #56]	; (20e70 <xTimerCreateTimerTask+0x44>)
   20e38:	4798      	blx	r3

	if( xTimerQueue != NULL )
   20e3a:	4b0e      	ldr	r3, [pc, #56]	; (20e74 <xTimerCreateTimerTask+0x48>)
   20e3c:	681b      	ldr	r3, [r3, #0]
   20e3e:	2b00      	cmp	r3, #0
   20e40:	d00c      	beq.n	20e5c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   20e42:	2382      	movs	r3, #130	; 0x82
   20e44:	005a      	lsls	r2, r3, #1
   20e46:	490c      	ldr	r1, [pc, #48]	; (20e78 <xTimerCreateTimerTask+0x4c>)
   20e48:	480c      	ldr	r0, [pc, #48]	; (20e7c <xTimerCreateTimerTask+0x50>)
   20e4a:	4b0d      	ldr	r3, [pc, #52]	; (20e80 <xTimerCreateTimerTask+0x54>)
   20e4c:	9301      	str	r3, [sp, #4]
   20e4e:	2304      	movs	r3, #4
   20e50:	9300      	str	r3, [sp, #0]
   20e52:	2300      	movs	r3, #0
   20e54:	4c0b      	ldr	r4, [pc, #44]	; (20e84 <xTimerCreateTimerTask+0x58>)
   20e56:	47a0      	blx	r4
   20e58:	0003      	movs	r3, r0
   20e5a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   20e5c:	687b      	ldr	r3, [r7, #4]
   20e5e:	2b00      	cmp	r3, #0
   20e60:	d101      	bne.n	20e66 <xTimerCreateTimerTask+0x3a>
   20e62:	b672      	cpsid	i
   20e64:	e7fe      	b.n	20e64 <xTimerCreateTimerTask+0x38>
	return xReturn;
   20e66:	687b      	ldr	r3, [r7, #4]
}
   20e68:	0018      	movs	r0, r3
   20e6a:	46bd      	mov	sp, r7
   20e6c:	b003      	add	sp, #12
   20e6e:	bd90      	pop	{r4, r7, pc}
   20e70:	0002143d 	.word	0x0002143d
   20e74:	200003ec 	.word	0x200003ec
   20e78:	0002ab54 	.word	0x0002ab54
   20e7c:	00021051 	.word	0x00021051
   20e80:	200003f0 	.word	0x200003f0
   20e84:	0001fc29 	.word	0x0001fc29

00020e88 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   20e88:	b590      	push	{r4, r7, lr}
   20e8a:	b089      	sub	sp, #36	; 0x24
   20e8c:	af02      	add	r7, sp, #8
   20e8e:	60f8      	str	r0, [r7, #12]
   20e90:	60b9      	str	r1, [r7, #8]
   20e92:	607a      	str	r2, [r7, #4]
   20e94:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   20e96:	2028      	movs	r0, #40	; 0x28
   20e98:	4b0b      	ldr	r3, [pc, #44]	; (20ec8 <xTimerCreate+0x40>)
   20e9a:	4798      	blx	r3
   20e9c:	0003      	movs	r3, r0
   20e9e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   20ea0:	697b      	ldr	r3, [r7, #20]
   20ea2:	2b00      	cmp	r3, #0
   20ea4:	d00a      	beq.n	20ebc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   20ea6:	683c      	ldr	r4, [r7, #0]
   20ea8:	687a      	ldr	r2, [r7, #4]
   20eaa:	68b9      	ldr	r1, [r7, #8]
   20eac:	68f8      	ldr	r0, [r7, #12]
   20eae:	697b      	ldr	r3, [r7, #20]
   20eb0:	9301      	str	r3, [sp, #4]
   20eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20eb4:	9300      	str	r3, [sp, #0]
   20eb6:	0023      	movs	r3, r4
   20eb8:	4c04      	ldr	r4, [pc, #16]	; (20ecc <xTimerCreate+0x44>)
   20eba:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   20ebc:	697b      	ldr	r3, [r7, #20]
	}
   20ebe:	0018      	movs	r0, r3
   20ec0:	46bd      	mov	sp, r7
   20ec2:	b007      	add	sp, #28
   20ec4:	bd90      	pop	{r4, r7, pc}
   20ec6:	46c0      	nop			; (mov r8, r8)
   20ec8:	0001ee8d 	.word	0x0001ee8d
   20ecc:	00020ed1 	.word	0x00020ed1

00020ed0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   20ed0:	b580      	push	{r7, lr}
   20ed2:	b084      	sub	sp, #16
   20ed4:	af00      	add	r7, sp, #0
   20ed6:	60f8      	str	r0, [r7, #12]
   20ed8:	60b9      	str	r1, [r7, #8]
   20eda:	607a      	str	r2, [r7, #4]
   20edc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   20ede:	68bb      	ldr	r3, [r7, #8]
   20ee0:	2b00      	cmp	r3, #0
   20ee2:	d101      	bne.n	20ee8 <prvInitialiseNewTimer+0x18>
   20ee4:	b672      	cpsid	i
   20ee6:	e7fe      	b.n	20ee6 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   20ee8:	69fb      	ldr	r3, [r7, #28]
   20eea:	2b00      	cmp	r3, #0
   20eec:	d015      	beq.n	20f1a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   20eee:	4b0d      	ldr	r3, [pc, #52]	; (20f24 <prvInitialiseNewTimer+0x54>)
   20ef0:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   20ef2:	69fb      	ldr	r3, [r7, #28]
   20ef4:	68fa      	ldr	r2, [r7, #12]
   20ef6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   20ef8:	69fb      	ldr	r3, [r7, #28]
   20efa:	68ba      	ldr	r2, [r7, #8]
   20efc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   20efe:	69fb      	ldr	r3, [r7, #28]
   20f00:	687a      	ldr	r2, [r7, #4]
   20f02:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   20f04:	69fb      	ldr	r3, [r7, #28]
   20f06:	683a      	ldr	r2, [r7, #0]
   20f08:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   20f0a:	69fb      	ldr	r3, [r7, #28]
   20f0c:	69ba      	ldr	r2, [r7, #24]
   20f0e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   20f10:	69fb      	ldr	r3, [r7, #28]
   20f12:	3304      	adds	r3, #4
   20f14:	0018      	movs	r0, r3
   20f16:	4b04      	ldr	r3, [pc, #16]	; (20f28 <prvInitialiseNewTimer+0x58>)
   20f18:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   20f1a:	46c0      	nop			; (mov r8, r8)
   20f1c:	46bd      	mov	sp, r7
   20f1e:	b004      	add	sp, #16
   20f20:	bd80      	pop	{r7, pc}
   20f22:	46c0      	nop			; (mov r8, r8)
   20f24:	0002143d 	.word	0x0002143d
   20f28:	0001ef31 	.word	0x0001ef31

00020f2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20f2c:	b590      	push	{r4, r7, lr}
   20f2e:	b08b      	sub	sp, #44	; 0x2c
   20f30:	af00      	add	r7, sp, #0
   20f32:	60f8      	str	r0, [r7, #12]
   20f34:	60b9      	str	r1, [r7, #8]
   20f36:	607a      	str	r2, [r7, #4]
   20f38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   20f3a:	2300      	movs	r3, #0
   20f3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   20f3e:	68fb      	ldr	r3, [r7, #12]
   20f40:	2b00      	cmp	r3, #0
   20f42:	d101      	bne.n	20f48 <xTimerGenericCommand+0x1c>
   20f44:	b672      	cpsid	i
   20f46:	e7fe      	b.n	20f46 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   20f48:	4b1e      	ldr	r3, [pc, #120]	; (20fc4 <xTimerGenericCommand+0x98>)
   20f4a:	681b      	ldr	r3, [r3, #0]
   20f4c:	2b00      	cmp	r3, #0
   20f4e:	d033      	beq.n	20fb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   20f50:	2314      	movs	r3, #20
   20f52:	18fb      	adds	r3, r7, r3
   20f54:	68ba      	ldr	r2, [r7, #8]
   20f56:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   20f58:	2314      	movs	r3, #20
   20f5a:	18fb      	adds	r3, r7, r3
   20f5c:	687a      	ldr	r2, [r7, #4]
   20f5e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   20f60:	2314      	movs	r3, #20
   20f62:	18fb      	adds	r3, r7, r3
   20f64:	68fa      	ldr	r2, [r7, #12]
   20f66:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   20f68:	68bb      	ldr	r3, [r7, #8]
   20f6a:	2b05      	cmp	r3, #5
   20f6c:	dc1a      	bgt.n	20fa4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   20f6e:	4b16      	ldr	r3, [pc, #88]	; (20fc8 <xTimerGenericCommand+0x9c>)
   20f70:	4798      	blx	r3
   20f72:	0003      	movs	r3, r0
   20f74:	2b02      	cmp	r3, #2
   20f76:	d10a      	bne.n	20f8e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   20f78:	4b12      	ldr	r3, [pc, #72]	; (20fc4 <xTimerGenericCommand+0x98>)
   20f7a:	6818      	ldr	r0, [r3, #0]
   20f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   20f7e:	2314      	movs	r3, #20
   20f80:	18f9      	adds	r1, r7, r3
   20f82:	2300      	movs	r3, #0
   20f84:	4c11      	ldr	r4, [pc, #68]	; (20fcc <xTimerGenericCommand+0xa0>)
   20f86:	47a0      	blx	r4
   20f88:	0003      	movs	r3, r0
   20f8a:	627b      	str	r3, [r7, #36]	; 0x24
   20f8c:	e014      	b.n	20fb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   20f8e:	4b0d      	ldr	r3, [pc, #52]	; (20fc4 <xTimerGenericCommand+0x98>)
   20f90:	6818      	ldr	r0, [r3, #0]
   20f92:	2314      	movs	r3, #20
   20f94:	18f9      	adds	r1, r7, r3
   20f96:	2300      	movs	r3, #0
   20f98:	2200      	movs	r2, #0
   20f9a:	4c0c      	ldr	r4, [pc, #48]	; (20fcc <xTimerGenericCommand+0xa0>)
   20f9c:	47a0      	blx	r4
   20f9e:	0003      	movs	r3, r0
   20fa0:	627b      	str	r3, [r7, #36]	; 0x24
   20fa2:	e009      	b.n	20fb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20fa4:	4b07      	ldr	r3, [pc, #28]	; (20fc4 <xTimerGenericCommand+0x98>)
   20fa6:	6818      	ldr	r0, [r3, #0]
   20fa8:	683a      	ldr	r2, [r7, #0]
   20faa:	2314      	movs	r3, #20
   20fac:	18f9      	adds	r1, r7, r3
   20fae:	2300      	movs	r3, #0
   20fb0:	4c07      	ldr	r4, [pc, #28]	; (20fd0 <xTimerGenericCommand+0xa4>)
   20fb2:	47a0      	blx	r4
   20fb4:	0003      	movs	r3, r0
   20fb6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   20fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20fba:	0018      	movs	r0, r3
   20fbc:	46bd      	mov	sp, r7
   20fbe:	b00b      	add	sp, #44	; 0x2c
   20fc0:	bd90      	pop	{r4, r7, pc}
   20fc2:	46c0      	nop			; (mov r8, r8)
   20fc4:	200003ec 	.word	0x200003ec
   20fc8:	000208f1 	.word	0x000208f1
   20fcc:	0001f1c1 	.word	0x0001f1c1
   20fd0:	0001f3a1 	.word	0x0001f3a1

00020fd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   20fd4:	b590      	push	{r4, r7, lr}
   20fd6:	b087      	sub	sp, #28
   20fd8:	af02      	add	r7, sp, #8
   20fda:	6078      	str	r0, [r7, #4]
   20fdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   20fde:	4b18      	ldr	r3, [pc, #96]	; (21040 <prvProcessExpiredTimer+0x6c>)
   20fe0:	681b      	ldr	r3, [r3, #0]
   20fe2:	68db      	ldr	r3, [r3, #12]
   20fe4:	68db      	ldr	r3, [r3, #12]
   20fe6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20fe8:	68fb      	ldr	r3, [r7, #12]
   20fea:	3304      	adds	r3, #4
   20fec:	0018      	movs	r0, r3
   20fee:	4b15      	ldr	r3, [pc, #84]	; (21044 <prvProcessExpiredTimer+0x70>)
   20ff0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20ff2:	68fb      	ldr	r3, [r7, #12]
   20ff4:	69db      	ldr	r3, [r3, #28]
   20ff6:	2b01      	cmp	r3, #1
   20ff8:	d119      	bne.n	2102e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   20ffa:	68fb      	ldr	r3, [r7, #12]
   20ffc:	699a      	ldr	r2, [r3, #24]
   20ffe:	687b      	ldr	r3, [r7, #4]
   21000:	18d1      	adds	r1, r2, r3
   21002:	687b      	ldr	r3, [r7, #4]
   21004:	683a      	ldr	r2, [r7, #0]
   21006:	68f8      	ldr	r0, [r7, #12]
   21008:	4c0f      	ldr	r4, [pc, #60]	; (21048 <prvProcessExpiredTimer+0x74>)
   2100a:	47a0      	blx	r4
   2100c:	1e03      	subs	r3, r0, #0
   2100e:	d00e      	beq.n	2102e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21010:	687a      	ldr	r2, [r7, #4]
   21012:	68f8      	ldr	r0, [r7, #12]
   21014:	2300      	movs	r3, #0
   21016:	9300      	str	r3, [sp, #0]
   21018:	2300      	movs	r3, #0
   2101a:	2100      	movs	r1, #0
   2101c:	4c0b      	ldr	r4, [pc, #44]	; (2104c <prvProcessExpiredTimer+0x78>)
   2101e:	47a0      	blx	r4
   21020:	0003      	movs	r3, r0
   21022:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   21024:	68bb      	ldr	r3, [r7, #8]
   21026:	2b00      	cmp	r3, #0
   21028:	d101      	bne.n	2102e <prvProcessExpiredTimer+0x5a>
   2102a:	b672      	cpsid	i
   2102c:	e7fe      	b.n	2102c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2102e:	68fb      	ldr	r3, [r7, #12]
   21030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21032:	68fa      	ldr	r2, [r7, #12]
   21034:	0010      	movs	r0, r2
   21036:	4798      	blx	r3
}
   21038:	46c0      	nop			; (mov r8, r8)
   2103a:	46bd      	mov	sp, r7
   2103c:	b005      	add	sp, #20
   2103e:	bd90      	pop	{r4, r7, pc}
   21040:	200003e4 	.word	0x200003e4
   21044:	0001eff7 	.word	0x0001eff7
   21048:	000211b1 	.word	0x000211b1
   2104c:	00020f2d 	.word	0x00020f2d

00021050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   21050:	b580      	push	{r7, lr}
   21052:	b084      	sub	sp, #16
   21054:	af00      	add	r7, sp, #0
   21056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21058:	2308      	movs	r3, #8
   2105a:	18fb      	adds	r3, r7, r3
   2105c:	0018      	movs	r0, r3
   2105e:	4b06      	ldr	r3, [pc, #24]	; (21078 <prvTimerTask+0x28>)
   21060:	4798      	blx	r3
   21062:	0003      	movs	r3, r0
   21064:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   21066:	68ba      	ldr	r2, [r7, #8]
   21068:	68fb      	ldr	r3, [r7, #12]
   2106a:	0011      	movs	r1, r2
   2106c:	0018      	movs	r0, r3
   2106e:	4b03      	ldr	r3, [pc, #12]	; (2107c <prvTimerTask+0x2c>)
   21070:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   21072:	4b03      	ldr	r3, [pc, #12]	; (21080 <prvTimerTask+0x30>)
   21074:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21076:	e7ef      	b.n	21058 <prvTimerTask+0x8>
   21078:	00021129 	.word	0x00021129
   2107c:	00021085 	.word	0x00021085
   21080:	00021239 	.word	0x00021239

00021084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   21084:	b580      	push	{r7, lr}
   21086:	b084      	sub	sp, #16
   21088:	af00      	add	r7, sp, #0
   2108a:	6078      	str	r0, [r7, #4]
   2108c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   2108e:	4b1e      	ldr	r3, [pc, #120]	; (21108 <prvProcessTimerOrBlockTask+0x84>)
   21090:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21092:	2308      	movs	r3, #8
   21094:	18fb      	adds	r3, r7, r3
   21096:	0018      	movs	r0, r3
   21098:	4b1c      	ldr	r3, [pc, #112]	; (2110c <prvProcessTimerOrBlockTask+0x88>)
   2109a:	4798      	blx	r3
   2109c:	0003      	movs	r3, r0
   2109e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   210a0:	68bb      	ldr	r3, [r7, #8]
   210a2:	2b00      	cmp	r3, #0
   210a4:	d129      	bne.n	210fa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   210a6:	683b      	ldr	r3, [r7, #0]
   210a8:	2b00      	cmp	r3, #0
   210aa:	d10c      	bne.n	210c6 <prvProcessTimerOrBlockTask+0x42>
   210ac:	687a      	ldr	r2, [r7, #4]
   210ae:	68fb      	ldr	r3, [r7, #12]
   210b0:	429a      	cmp	r2, r3
   210b2:	d808      	bhi.n	210c6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   210b4:	4b16      	ldr	r3, [pc, #88]	; (21110 <prvProcessTimerOrBlockTask+0x8c>)
   210b6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   210b8:	68fa      	ldr	r2, [r7, #12]
   210ba:	687b      	ldr	r3, [r7, #4]
   210bc:	0011      	movs	r1, r2
   210be:	0018      	movs	r0, r3
   210c0:	4b14      	ldr	r3, [pc, #80]	; (21114 <prvProcessTimerOrBlockTask+0x90>)
   210c2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   210c4:	e01b      	b.n	210fe <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   210c6:	683b      	ldr	r3, [r7, #0]
   210c8:	2b00      	cmp	r3, #0
   210ca:	d006      	beq.n	210da <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   210cc:	4b12      	ldr	r3, [pc, #72]	; (21118 <prvProcessTimerOrBlockTask+0x94>)
   210ce:	681b      	ldr	r3, [r3, #0]
   210d0:	681b      	ldr	r3, [r3, #0]
   210d2:	425a      	negs	r2, r3
   210d4:	4153      	adcs	r3, r2
   210d6:	b2db      	uxtb	r3, r3
   210d8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   210da:	4b10      	ldr	r3, [pc, #64]	; (2111c <prvProcessTimerOrBlockTask+0x98>)
   210dc:	6818      	ldr	r0, [r3, #0]
   210de:	687a      	ldr	r2, [r7, #4]
   210e0:	68fb      	ldr	r3, [r7, #12]
   210e2:	1ad3      	subs	r3, r2, r3
   210e4:	683a      	ldr	r2, [r7, #0]
   210e6:	0019      	movs	r1, r3
   210e8:	4b0d      	ldr	r3, [pc, #52]	; (21120 <prvProcessTimerOrBlockTask+0x9c>)
   210ea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   210ec:	4b08      	ldr	r3, [pc, #32]	; (21110 <prvProcessTimerOrBlockTask+0x8c>)
   210ee:	4798      	blx	r3
   210f0:	1e03      	subs	r3, r0, #0
   210f2:	d104      	bne.n	210fe <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   210f4:	4b0b      	ldr	r3, [pc, #44]	; (21124 <prvProcessTimerOrBlockTask+0xa0>)
   210f6:	4798      	blx	r3
}
   210f8:	e001      	b.n	210fe <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   210fa:	4b05      	ldr	r3, [pc, #20]	; (21110 <prvProcessTimerOrBlockTask+0x8c>)
   210fc:	4798      	blx	r3
}
   210fe:	46c0      	nop			; (mov r8, r8)
   21100:	46bd      	mov	sp, r7
   21102:	b004      	add	sp, #16
   21104:	bd80      	pop	{r7, pc}
   21106:	46c0      	nop			; (mov r8, r8)
   21108:	00020181 	.word	0x00020181
   2110c:	00021169 	.word	0x00021169
   21110:	00020199 	.word	0x00020199
   21114:	00020fd5 	.word	0x00020fd5
   21118:	200003e8 	.word	0x200003e8
   2111c:	200003ec 	.word	0x200003ec
   21120:	0001fb0d 	.word	0x0001fb0d
   21124:	0001ed31 	.word	0x0001ed31

00021128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   21128:	b580      	push	{r7, lr}
   2112a:	b084      	sub	sp, #16
   2112c:	af00      	add	r7, sp, #0
   2112e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   21130:	4b0c      	ldr	r3, [pc, #48]	; (21164 <prvGetNextExpireTime+0x3c>)
   21132:	681b      	ldr	r3, [r3, #0]
   21134:	681b      	ldr	r3, [r3, #0]
   21136:	425a      	negs	r2, r3
   21138:	4153      	adcs	r3, r2
   2113a:	b2db      	uxtb	r3, r3
   2113c:	001a      	movs	r2, r3
   2113e:	687b      	ldr	r3, [r7, #4]
   21140:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   21142:	687b      	ldr	r3, [r7, #4]
   21144:	681b      	ldr	r3, [r3, #0]
   21146:	2b00      	cmp	r3, #0
   21148:	d105      	bne.n	21156 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   2114a:	4b06      	ldr	r3, [pc, #24]	; (21164 <prvGetNextExpireTime+0x3c>)
   2114c:	681b      	ldr	r3, [r3, #0]
   2114e:	68db      	ldr	r3, [r3, #12]
   21150:	681b      	ldr	r3, [r3, #0]
   21152:	60fb      	str	r3, [r7, #12]
   21154:	e001      	b.n	2115a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   21156:	2300      	movs	r3, #0
   21158:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   2115a:	68fb      	ldr	r3, [r7, #12]
}
   2115c:	0018      	movs	r0, r3
   2115e:	46bd      	mov	sp, r7
   21160:	b004      	add	sp, #16
   21162:	bd80      	pop	{r7, pc}
   21164:	200003e4 	.word	0x200003e4

00021168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   21168:	b580      	push	{r7, lr}
   2116a:	b084      	sub	sp, #16
   2116c:	af00      	add	r7, sp, #0
   2116e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   21170:	4b0c      	ldr	r3, [pc, #48]	; (211a4 <prvSampleTimeNow+0x3c>)
   21172:	4798      	blx	r3
   21174:	0003      	movs	r3, r0
   21176:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   21178:	4b0b      	ldr	r3, [pc, #44]	; (211a8 <prvSampleTimeNow+0x40>)
   2117a:	681b      	ldr	r3, [r3, #0]
   2117c:	68fa      	ldr	r2, [r7, #12]
   2117e:	429a      	cmp	r2, r3
   21180:	d205      	bcs.n	2118e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21182:	4b0a      	ldr	r3, [pc, #40]	; (211ac <prvSampleTimeNow+0x44>)
   21184:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21186:	687b      	ldr	r3, [r7, #4]
   21188:	2201      	movs	r2, #1
   2118a:	601a      	str	r2, [r3, #0]
   2118c:	e002      	b.n	21194 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2118e:	687b      	ldr	r3, [r7, #4]
   21190:	2200      	movs	r2, #0
   21192:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21194:	4b04      	ldr	r3, [pc, #16]	; (211a8 <prvSampleTimeNow+0x40>)
   21196:	68fa      	ldr	r2, [r7, #12]
   21198:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2119a:	68fb      	ldr	r3, [r7, #12]
}
   2119c:	0018      	movs	r0, r3
   2119e:	46bd      	mov	sp, r7
   211a0:	b004      	add	sp, #16
   211a2:	bd80      	pop	{r7, pc}
   211a4:	000202cd 	.word	0x000202cd
   211a8:	200003f4 	.word	0x200003f4
   211ac:	0002137d 	.word	0x0002137d

000211b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   211b0:	b580      	push	{r7, lr}
   211b2:	b086      	sub	sp, #24
   211b4:	af00      	add	r7, sp, #0
   211b6:	60f8      	str	r0, [r7, #12]
   211b8:	60b9      	str	r1, [r7, #8]
   211ba:	607a      	str	r2, [r7, #4]
   211bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   211be:	2300      	movs	r3, #0
   211c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   211c2:	68fb      	ldr	r3, [r7, #12]
   211c4:	68ba      	ldr	r2, [r7, #8]
   211c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   211c8:	68fb      	ldr	r3, [r7, #12]
   211ca:	68fa      	ldr	r2, [r7, #12]
   211cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   211ce:	68ba      	ldr	r2, [r7, #8]
   211d0:	687b      	ldr	r3, [r7, #4]
   211d2:	429a      	cmp	r2, r3
   211d4:	d812      	bhi.n	211fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   211d6:	687a      	ldr	r2, [r7, #4]
   211d8:	683b      	ldr	r3, [r7, #0]
   211da:	1ad2      	subs	r2, r2, r3
   211dc:	68fb      	ldr	r3, [r7, #12]
   211de:	699b      	ldr	r3, [r3, #24]
   211e0:	429a      	cmp	r2, r3
   211e2:	d302      	bcc.n	211ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   211e4:	2301      	movs	r3, #1
   211e6:	617b      	str	r3, [r7, #20]
   211e8:	e01b      	b.n	21222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   211ea:	4b10      	ldr	r3, [pc, #64]	; (2122c <prvInsertTimerInActiveList+0x7c>)
   211ec:	681a      	ldr	r2, [r3, #0]
   211ee:	68fb      	ldr	r3, [r7, #12]
   211f0:	3304      	adds	r3, #4
   211f2:	0019      	movs	r1, r3
   211f4:	0010      	movs	r0, r2
   211f6:	4b0e      	ldr	r3, [pc, #56]	; (21230 <prvInsertTimerInActiveList+0x80>)
   211f8:	4798      	blx	r3
   211fa:	e012      	b.n	21222 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   211fc:	687a      	ldr	r2, [r7, #4]
   211fe:	683b      	ldr	r3, [r7, #0]
   21200:	429a      	cmp	r2, r3
   21202:	d206      	bcs.n	21212 <prvInsertTimerInActiveList+0x62>
   21204:	68ba      	ldr	r2, [r7, #8]
   21206:	683b      	ldr	r3, [r7, #0]
   21208:	429a      	cmp	r2, r3
   2120a:	d302      	bcc.n	21212 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   2120c:	2301      	movs	r3, #1
   2120e:	617b      	str	r3, [r7, #20]
   21210:	e007      	b.n	21222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21212:	4b08      	ldr	r3, [pc, #32]	; (21234 <prvInsertTimerInActiveList+0x84>)
   21214:	681a      	ldr	r2, [r3, #0]
   21216:	68fb      	ldr	r3, [r7, #12]
   21218:	3304      	adds	r3, #4
   2121a:	0019      	movs	r1, r3
   2121c:	0010      	movs	r0, r2
   2121e:	4b04      	ldr	r3, [pc, #16]	; (21230 <prvInsertTimerInActiveList+0x80>)
   21220:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   21222:	697b      	ldr	r3, [r7, #20]
}
   21224:	0018      	movs	r0, r3
   21226:	46bd      	mov	sp, r7
   21228:	b006      	add	sp, #24
   2122a:	bd80      	pop	{r7, pc}
   2122c:	200003e8 	.word	0x200003e8
   21230:	0001ef8b 	.word	0x0001ef8b
   21234:	200003e4 	.word	0x200003e4

00021238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   21238:	b590      	push	{r4, r7, lr}
   2123a:	b08d      	sub	sp, #52	; 0x34
   2123c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2123e:	e07e      	b.n	2133e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   21240:	2308      	movs	r3, #8
   21242:	18fb      	adds	r3, r7, r3
   21244:	681b      	ldr	r3, [r3, #0]
   21246:	2b00      	cmp	r3, #0
   21248:	da10      	bge.n	2126c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   2124a:	2308      	movs	r3, #8
   2124c:	18fb      	adds	r3, r7, r3
   2124e:	3304      	adds	r3, #4
   21250:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   21252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21254:	2b00      	cmp	r3, #0
   21256:	d101      	bne.n	2125c <prvProcessReceivedCommands+0x24>
   21258:	b672      	cpsid	i
   2125a:	e7fe      	b.n	2125a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2125e:	681a      	ldr	r2, [r3, #0]
   21260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21262:	6858      	ldr	r0, [r3, #4]
   21264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21266:	689b      	ldr	r3, [r3, #8]
   21268:	0019      	movs	r1, r3
   2126a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   2126c:	2308      	movs	r3, #8
   2126e:	18fb      	adds	r3, r7, r3
   21270:	681b      	ldr	r3, [r3, #0]
   21272:	2b00      	cmp	r3, #0
   21274:	db63      	blt.n	2133e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   21276:	2308      	movs	r3, #8
   21278:	18fb      	adds	r3, r7, r3
   2127a:	689b      	ldr	r3, [r3, #8]
   2127c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   2127e:	6a3b      	ldr	r3, [r7, #32]
   21280:	695b      	ldr	r3, [r3, #20]
   21282:	2b00      	cmp	r3, #0
   21284:	d004      	beq.n	21290 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21286:	6a3b      	ldr	r3, [r7, #32]
   21288:	3304      	adds	r3, #4
   2128a:	0018      	movs	r0, r3
   2128c:	4b33      	ldr	r3, [pc, #204]	; (2135c <prvProcessReceivedCommands+0x124>)
   2128e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21290:	1d3b      	adds	r3, r7, #4
   21292:	0018      	movs	r0, r3
   21294:	4b32      	ldr	r3, [pc, #200]	; (21360 <prvProcessReceivedCommands+0x128>)
   21296:	4798      	blx	r3
   21298:	0003      	movs	r3, r0
   2129a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   2129c:	2308      	movs	r3, #8
   2129e:	18fb      	adds	r3, r7, r3
   212a0:	681b      	ldr	r3, [r3, #0]
   212a2:	2b09      	cmp	r3, #9
   212a4:	d84a      	bhi.n	2133c <prvProcessReceivedCommands+0x104>
   212a6:	009a      	lsls	r2, r3, #2
   212a8:	4b2e      	ldr	r3, [pc, #184]	; (21364 <prvProcessReceivedCommands+0x12c>)
   212aa:	18d3      	adds	r3, r2, r3
   212ac:	681b      	ldr	r3, [r3, #0]
   212ae:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   212b0:	2308      	movs	r3, #8
   212b2:	18fb      	adds	r3, r7, r3
   212b4:	685a      	ldr	r2, [r3, #4]
   212b6:	6a3b      	ldr	r3, [r7, #32]
   212b8:	699b      	ldr	r3, [r3, #24]
   212ba:	18d1      	adds	r1, r2, r3
   212bc:	2308      	movs	r3, #8
   212be:	18fb      	adds	r3, r7, r3
   212c0:	685b      	ldr	r3, [r3, #4]
   212c2:	69fa      	ldr	r2, [r7, #28]
   212c4:	6a38      	ldr	r0, [r7, #32]
   212c6:	4c28      	ldr	r4, [pc, #160]	; (21368 <prvProcessReceivedCommands+0x130>)
   212c8:	47a0      	blx	r4
   212ca:	1e03      	subs	r3, r0, #0
   212cc:	d037      	beq.n	2133e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   212ce:	6a3b      	ldr	r3, [r7, #32]
   212d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   212d2:	6a3a      	ldr	r2, [r7, #32]
   212d4:	0010      	movs	r0, r2
   212d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   212d8:	6a3b      	ldr	r3, [r7, #32]
   212da:	69db      	ldr	r3, [r3, #28]
   212dc:	2b01      	cmp	r3, #1
   212de:	d12e      	bne.n	2133e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   212e0:	2308      	movs	r3, #8
   212e2:	18fb      	adds	r3, r7, r3
   212e4:	685a      	ldr	r2, [r3, #4]
   212e6:	6a3b      	ldr	r3, [r7, #32]
   212e8:	699b      	ldr	r3, [r3, #24]
   212ea:	18d2      	adds	r2, r2, r3
   212ec:	6a38      	ldr	r0, [r7, #32]
   212ee:	2300      	movs	r3, #0
   212f0:	9300      	str	r3, [sp, #0]
   212f2:	2300      	movs	r3, #0
   212f4:	2100      	movs	r1, #0
   212f6:	4c1d      	ldr	r4, [pc, #116]	; (2136c <prvProcessReceivedCommands+0x134>)
   212f8:	47a0      	blx	r4
   212fa:	0003      	movs	r3, r0
   212fc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   212fe:	69bb      	ldr	r3, [r7, #24]
   21300:	2b00      	cmp	r3, #0
   21302:	d11c      	bne.n	2133e <prvProcessReceivedCommands+0x106>
   21304:	b672      	cpsid	i
   21306:	e7fe      	b.n	21306 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21308:	2308      	movs	r3, #8
   2130a:	18fb      	adds	r3, r7, r3
   2130c:	685a      	ldr	r2, [r3, #4]
   2130e:	6a3b      	ldr	r3, [r7, #32]
   21310:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21312:	6a3b      	ldr	r3, [r7, #32]
   21314:	699b      	ldr	r3, [r3, #24]
   21316:	2b00      	cmp	r3, #0
   21318:	d101      	bne.n	2131e <prvProcessReceivedCommands+0xe6>
   2131a:	b672      	cpsid	i
   2131c:	e7fe      	b.n	2131c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2131e:	6a3b      	ldr	r3, [r7, #32]
   21320:	699a      	ldr	r2, [r3, #24]
   21322:	69fb      	ldr	r3, [r7, #28]
   21324:	18d1      	adds	r1, r2, r3
   21326:	69fb      	ldr	r3, [r7, #28]
   21328:	69fa      	ldr	r2, [r7, #28]
   2132a:	6a38      	ldr	r0, [r7, #32]
   2132c:	4c0e      	ldr	r4, [pc, #56]	; (21368 <prvProcessReceivedCommands+0x130>)
   2132e:	47a0      	blx	r4
					break;
   21330:	e005      	b.n	2133e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   21332:	6a3b      	ldr	r3, [r7, #32]
   21334:	0018      	movs	r0, r3
   21336:	4b0e      	ldr	r3, [pc, #56]	; (21370 <prvProcessReceivedCommands+0x138>)
   21338:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   2133a:	e000      	b.n	2133e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   2133c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2133e:	4b0d      	ldr	r3, [pc, #52]	; (21374 <prvProcessReceivedCommands+0x13c>)
   21340:	681b      	ldr	r3, [r3, #0]
   21342:	2208      	movs	r2, #8
   21344:	18b9      	adds	r1, r7, r2
   21346:	2200      	movs	r2, #0
   21348:	0018      	movs	r0, r3
   2134a:	4b0b      	ldr	r3, [pc, #44]	; (21378 <prvProcessReceivedCommands+0x140>)
   2134c:	4798      	blx	r3
   2134e:	1e03      	subs	r3, r0, #0
   21350:	d000      	beq.n	21354 <prvProcessReceivedCommands+0x11c>
   21352:	e775      	b.n	21240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   21354:	46c0      	nop			; (mov r8, r8)
   21356:	46bd      	mov	sp, r7
   21358:	b00b      	add	sp, #44	; 0x2c
   2135a:	bd90      	pop	{r4, r7, pc}
   2135c:	0001eff7 	.word	0x0001eff7
   21360:	00021169 	.word	0x00021169
   21364:	0002ab5c 	.word	0x0002ab5c
   21368:	000211b1 	.word	0x000211b1
   2136c:	00020f2d 	.word	0x00020f2d
   21370:	0001eec1 	.word	0x0001eec1
   21374:	200003ec 	.word	0x200003ec
   21378:	0001f4c1 	.word	0x0001f4c1

0002137c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   2137c:	b590      	push	{r4, r7, lr}
   2137e:	b089      	sub	sp, #36	; 0x24
   21380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21382:	e03e      	b.n	21402 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21384:	4b28      	ldr	r3, [pc, #160]	; (21428 <prvSwitchTimerLists+0xac>)
   21386:	681b      	ldr	r3, [r3, #0]
   21388:	68db      	ldr	r3, [r3, #12]
   2138a:	681b      	ldr	r3, [r3, #0]
   2138c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2138e:	4b26      	ldr	r3, [pc, #152]	; (21428 <prvSwitchTimerLists+0xac>)
   21390:	681b      	ldr	r3, [r3, #0]
   21392:	68db      	ldr	r3, [r3, #12]
   21394:	68db      	ldr	r3, [r3, #12]
   21396:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21398:	693b      	ldr	r3, [r7, #16]
   2139a:	3304      	adds	r3, #4
   2139c:	0018      	movs	r0, r3
   2139e:	4b23      	ldr	r3, [pc, #140]	; (2142c <prvSwitchTimerLists+0xb0>)
   213a0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   213a2:	693b      	ldr	r3, [r7, #16]
   213a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   213a6:	693a      	ldr	r2, [r7, #16]
   213a8:	0010      	movs	r0, r2
   213aa:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   213ac:	693b      	ldr	r3, [r7, #16]
   213ae:	69db      	ldr	r3, [r3, #28]
   213b0:	2b01      	cmp	r3, #1
   213b2:	d126      	bne.n	21402 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   213b4:	693b      	ldr	r3, [r7, #16]
   213b6:	699a      	ldr	r2, [r3, #24]
   213b8:	697b      	ldr	r3, [r7, #20]
   213ba:	18d3      	adds	r3, r2, r3
   213bc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   213be:	68fa      	ldr	r2, [r7, #12]
   213c0:	697b      	ldr	r3, [r7, #20]
   213c2:	429a      	cmp	r2, r3
   213c4:	d90e      	bls.n	213e4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   213c6:	693b      	ldr	r3, [r7, #16]
   213c8:	68fa      	ldr	r2, [r7, #12]
   213ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   213cc:	693b      	ldr	r3, [r7, #16]
   213ce:	693a      	ldr	r2, [r7, #16]
   213d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   213d2:	4b15      	ldr	r3, [pc, #84]	; (21428 <prvSwitchTimerLists+0xac>)
   213d4:	681a      	ldr	r2, [r3, #0]
   213d6:	693b      	ldr	r3, [r7, #16]
   213d8:	3304      	adds	r3, #4
   213da:	0019      	movs	r1, r3
   213dc:	0010      	movs	r0, r2
   213de:	4b14      	ldr	r3, [pc, #80]	; (21430 <prvSwitchTimerLists+0xb4>)
   213e0:	4798      	blx	r3
   213e2:	e00e      	b.n	21402 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   213e4:	697a      	ldr	r2, [r7, #20]
   213e6:	6938      	ldr	r0, [r7, #16]
   213e8:	2300      	movs	r3, #0
   213ea:	9300      	str	r3, [sp, #0]
   213ec:	2300      	movs	r3, #0
   213ee:	2100      	movs	r1, #0
   213f0:	4c10      	ldr	r4, [pc, #64]	; (21434 <prvSwitchTimerLists+0xb8>)
   213f2:	47a0      	blx	r4
   213f4:	0003      	movs	r3, r0
   213f6:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   213f8:	68bb      	ldr	r3, [r7, #8]
   213fa:	2b00      	cmp	r3, #0
   213fc:	d101      	bne.n	21402 <prvSwitchTimerLists+0x86>
   213fe:	b672      	cpsid	i
   21400:	e7fe      	b.n	21400 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21402:	4b09      	ldr	r3, [pc, #36]	; (21428 <prvSwitchTimerLists+0xac>)
   21404:	681b      	ldr	r3, [r3, #0]
   21406:	681b      	ldr	r3, [r3, #0]
   21408:	2b00      	cmp	r3, #0
   2140a:	d1bb      	bne.n	21384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   2140c:	4b06      	ldr	r3, [pc, #24]	; (21428 <prvSwitchTimerLists+0xac>)
   2140e:	681b      	ldr	r3, [r3, #0]
   21410:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21412:	4b09      	ldr	r3, [pc, #36]	; (21438 <prvSwitchTimerLists+0xbc>)
   21414:	681a      	ldr	r2, [r3, #0]
   21416:	4b04      	ldr	r3, [pc, #16]	; (21428 <prvSwitchTimerLists+0xac>)
   21418:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   2141a:	4b07      	ldr	r3, [pc, #28]	; (21438 <prvSwitchTimerLists+0xbc>)
   2141c:	687a      	ldr	r2, [r7, #4]
   2141e:	601a      	str	r2, [r3, #0]
}
   21420:	46c0      	nop			; (mov r8, r8)
   21422:	46bd      	mov	sp, r7
   21424:	b007      	add	sp, #28
   21426:	bd90      	pop	{r4, r7, pc}
   21428:	200003e4 	.word	0x200003e4
   2142c:	0001eff7 	.word	0x0001eff7
   21430:	0001ef8b 	.word	0x0001ef8b
   21434:	00020f2d 	.word	0x00020f2d
   21438:	200003e8 	.word	0x200003e8

0002143c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   2143c:	b580      	push	{r7, lr}
   2143e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   21440:	4b10      	ldr	r3, [pc, #64]	; (21484 <prvCheckForValidListAndQueue+0x48>)
   21442:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   21444:	4b10      	ldr	r3, [pc, #64]	; (21488 <prvCheckForValidListAndQueue+0x4c>)
   21446:	681b      	ldr	r3, [r3, #0]
   21448:	2b00      	cmp	r3, #0
   2144a:	d115      	bne.n	21478 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   2144c:	4b0f      	ldr	r3, [pc, #60]	; (2148c <prvCheckForValidListAndQueue+0x50>)
   2144e:	0018      	movs	r0, r3
   21450:	4b0f      	ldr	r3, [pc, #60]	; (21490 <prvCheckForValidListAndQueue+0x54>)
   21452:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   21454:	4b0f      	ldr	r3, [pc, #60]	; (21494 <prvCheckForValidListAndQueue+0x58>)
   21456:	0018      	movs	r0, r3
   21458:	4b0d      	ldr	r3, [pc, #52]	; (21490 <prvCheckForValidListAndQueue+0x54>)
   2145a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   2145c:	4b0e      	ldr	r3, [pc, #56]	; (21498 <prvCheckForValidListAndQueue+0x5c>)
   2145e:	4a0b      	ldr	r2, [pc, #44]	; (2148c <prvCheckForValidListAndQueue+0x50>)
   21460:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   21462:	4b0e      	ldr	r3, [pc, #56]	; (2149c <prvCheckForValidListAndQueue+0x60>)
   21464:	4a0b      	ldr	r2, [pc, #44]	; (21494 <prvCheckForValidListAndQueue+0x58>)
   21466:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   21468:	2200      	movs	r2, #0
   2146a:	2110      	movs	r1, #16
   2146c:	2005      	movs	r0, #5
   2146e:	4b0c      	ldr	r3, [pc, #48]	; (214a0 <prvCheckForValidListAndQueue+0x64>)
   21470:	4798      	blx	r3
   21472:	0002      	movs	r2, r0
   21474:	4b04      	ldr	r3, [pc, #16]	; (21488 <prvCheckForValidListAndQueue+0x4c>)
   21476:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21478:	4b0a      	ldr	r3, [pc, #40]	; (214a4 <prvCheckForValidListAndQueue+0x68>)
   2147a:	4798      	blx	r3
}
   2147c:	46c0      	nop			; (mov r8, r8)
   2147e:	46bd      	mov	sp, r7
   21480:	bd80      	pop	{r7, pc}
   21482:	46c0      	nop			; (mov r8, r8)
   21484:	0001ed51 	.word	0x0001ed51
   21488:	200003ec 	.word	0x200003ec
   2148c:	200003bc 	.word	0x200003bc
   21490:	0001eef5 	.word	0x0001eef5
   21494:	200003d0 	.word	0x200003d0
   21498:	200003e4 	.word	0x200003e4
   2149c:	200003e8 	.word	0x200003e8
   214a0:	0001f105 	.word	0x0001f105
   214a4:	0001ed75 	.word	0x0001ed75

000214a8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   214a8:	b580      	push	{r7, lr}
   214aa:	b084      	sub	sp, #16
   214ac:	af00      	add	r7, sp, #0
   214ae:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   214b0:	687b      	ldr	r3, [r7, #4]
   214b2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   214b4:	687b      	ldr	r3, [r7, #4]
   214b6:	2b00      	cmp	r3, #0
   214b8:	d101      	bne.n	214be <xTimerIsTimerActive+0x16>
   214ba:	b672      	cpsid	i
   214bc:	e7fe      	b.n	214bc <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   214be:	4b07      	ldr	r3, [pc, #28]	; (214dc <xTimerIsTimerActive+0x34>)
   214c0:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   214c2:	68fb      	ldr	r3, [r7, #12]
   214c4:	695b      	ldr	r3, [r3, #20]
   214c6:	1e5a      	subs	r2, r3, #1
   214c8:	4193      	sbcs	r3, r2
   214ca:	b2db      	uxtb	r3, r3
   214cc:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   214ce:	4b04      	ldr	r3, [pc, #16]	; (214e0 <xTimerIsTimerActive+0x38>)
   214d0:	4798      	blx	r3

	return xTimerIsInActiveList;
   214d2:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   214d4:	0018      	movs	r0, r3
   214d6:	46bd      	mov	sp, r7
   214d8:	b004      	add	sp, #16
   214da:	bd80      	pop	{r7, pc}
   214dc:	0001ed51 	.word	0x0001ed51
   214e0:	0001ed75 	.word	0x0001ed75

000214e4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   214e4:	b580      	push	{r7, lr}
   214e6:	b082      	sub	sp, #8
   214e8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   214ea:	4b04      	ldr	r3, [pc, #16]	; (214fc <wdt_clear_early_warning+0x18>)
   214ec:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   214ee:	687b      	ldr	r3, [r7, #4]
   214f0:	2201      	movs	r2, #1
   214f2:	719a      	strb	r2, [r3, #6]
}
   214f4:	46c0      	nop			; (mov r8, r8)
   214f6:	46bd      	mov	sp, r7
   214f8:	b002      	add	sp, #8
   214fa:	bd80      	pop	{r7, pc}
   214fc:	40001000 	.word	0x40001000

00021500 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21500:	b580      	push	{r7, lr}
   21502:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21504:	4b05      	ldr	r3, [pc, #20]	; (2151c <WDT_Handler+0x1c>)
   21506:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21508:	4b05      	ldr	r3, [pc, #20]	; (21520 <WDT_Handler+0x20>)
   2150a:	681b      	ldr	r3, [r3, #0]
   2150c:	2b00      	cmp	r3, #0
   2150e:	d002      	beq.n	21516 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21510:	4b03      	ldr	r3, [pc, #12]	; (21520 <WDT_Handler+0x20>)
   21512:	681b      	ldr	r3, [r3, #0]
   21514:	4798      	blx	r3
	}
}
   21516:	46c0      	nop			; (mov r8, r8)
   21518:	46bd      	mov	sp, r7
   2151a:	bd80      	pop	{r7, pc}
   2151c:	000214e5 	.word	0x000214e5
   21520:	20000944 	.word	0x20000944

00021524 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   21524:	b580      	push	{r7, lr}
   21526:	af00      	add	r7, sp, #0
   21528:	2000      	movs	r0, #0
   2152a:	4b02      	ldr	r3, [pc, #8]	; (21534 <TCC0_Handler+0x10>)
   2152c:	4798      	blx	r3
   2152e:	46c0      	nop			; (mov r8, r8)
   21530:	46bd      	mov	sp, r7
   21532:	bd80      	pop	{r7, pc}
   21534:	00021561 	.word	0x00021561

00021538 <TCC1_Handler>:
   21538:	b580      	push	{r7, lr}
   2153a:	af00      	add	r7, sp, #0
   2153c:	2001      	movs	r0, #1
   2153e:	4b02      	ldr	r3, [pc, #8]	; (21548 <TCC1_Handler+0x10>)
   21540:	4798      	blx	r3
   21542:	46c0      	nop			; (mov r8, r8)
   21544:	46bd      	mov	sp, r7
   21546:	bd80      	pop	{r7, pc}
   21548:	00021561 	.word	0x00021561

0002154c <TCC2_Handler>:
   2154c:	b580      	push	{r7, lr}
   2154e:	af00      	add	r7, sp, #0
   21550:	2002      	movs	r0, #2
   21552:	4b02      	ldr	r3, [pc, #8]	; (2155c <TCC2_Handler+0x10>)
   21554:	4798      	blx	r3
   21556:	46c0      	nop			; (mov r8, r8)
   21558:	46bd      	mov	sp, r7
   2155a:	bd80      	pop	{r7, pc}
   2155c:	00021561 	.word	0x00021561

00021560 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   21560:	b580      	push	{r7, lr}
   21562:	b086      	sub	sp, #24
   21564:	af00      	add	r7, sp, #0
   21566:	0002      	movs	r2, r0
   21568:	1dfb      	adds	r3, r7, #7
   2156a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2156c:	1dfb      	adds	r3, r7, #7
   2156e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   21570:	4b18      	ldr	r3, [pc, #96]	; (215d4 <_tcc_interrupt_handler+0x74>)
   21572:	0092      	lsls	r2, r2, #2
   21574:	58d3      	ldr	r3, [r2, r3]
   21576:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21578:	693b      	ldr	r3, [r7, #16]
   2157a:	681b      	ldr	r3, [r3, #0]
   2157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2157e:	693b      	ldr	r3, [r7, #16]
   21580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21582:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21584:	693b      	ldr	r3, [r7, #16]
   21586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21588:	4013      	ands	r3, r2
   2158a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2158c:	2300      	movs	r3, #0
   2158e:	617b      	str	r3, [r7, #20]
   21590:	e019      	b.n	215c6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21592:	4b11      	ldr	r3, [pc, #68]	; (215d8 <_tcc_interrupt_handler+0x78>)
   21594:	697a      	ldr	r2, [r7, #20]
   21596:	0092      	lsls	r2, r2, #2
   21598:	58d3      	ldr	r3, [r2, r3]
   2159a:	68fa      	ldr	r2, [r7, #12]
   2159c:	4013      	ands	r3, r2
   2159e:	d00f      	beq.n	215c0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   215a0:	693a      	ldr	r2, [r7, #16]
   215a2:	697b      	ldr	r3, [r7, #20]
   215a4:	009b      	lsls	r3, r3, #2
   215a6:	18d3      	adds	r3, r2, r3
   215a8:	3304      	adds	r3, #4
   215aa:	681b      	ldr	r3, [r3, #0]
   215ac:	693a      	ldr	r2, [r7, #16]
   215ae:	0010      	movs	r0, r2
   215b0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   215b2:	693b      	ldr	r3, [r7, #16]
   215b4:	681b      	ldr	r3, [r3, #0]
   215b6:	4a08      	ldr	r2, [pc, #32]	; (215d8 <_tcc_interrupt_handler+0x78>)
   215b8:	6979      	ldr	r1, [r7, #20]
   215ba:	0089      	lsls	r1, r1, #2
   215bc:	588a      	ldr	r2, [r1, r2]
   215be:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   215c0:	697b      	ldr	r3, [r7, #20]
   215c2:	3301      	adds	r3, #1
   215c4:	617b      	str	r3, [r7, #20]
   215c6:	697b      	ldr	r3, [r7, #20]
   215c8:	2b0b      	cmp	r3, #11
   215ca:	dde2      	ble.n	21592 <_tcc_interrupt_handler+0x32>
		}
	}
}
   215cc:	46c0      	nop			; (mov r8, r8)
   215ce:	46bd      	mov	sp, r7
   215d0:	b006      	add	sp, #24
   215d2:	bd80      	pop	{r7, pc}
   215d4:	20000948 	.word	0x20000948
   215d8:	0002ab84 	.word	0x0002ab84

000215dc <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   215dc:	b580      	push	{r7, lr}
   215de:	af00      	add	r7, sp, #0
   215e0:	2000      	movs	r0, #0
   215e2:	4b02      	ldr	r3, [pc, #8]	; (215ec <TC3_Handler+0x10>)
   215e4:	4798      	blx	r3
   215e6:	46c0      	nop			; (mov r8, r8)
   215e8:	46bd      	mov	sp, r7
   215ea:	bd80      	pop	{r7, pc}
   215ec:	00021641 	.word	0x00021641

000215f0 <TC4_Handler>:
   215f0:	b580      	push	{r7, lr}
   215f2:	af00      	add	r7, sp, #0
   215f4:	2001      	movs	r0, #1
   215f6:	4b02      	ldr	r3, [pc, #8]	; (21600 <TC4_Handler+0x10>)
   215f8:	4798      	blx	r3
   215fa:	46c0      	nop			; (mov r8, r8)
   215fc:	46bd      	mov	sp, r7
   215fe:	bd80      	pop	{r7, pc}
   21600:	00021641 	.word	0x00021641

00021604 <TC5_Handler>:
   21604:	b580      	push	{r7, lr}
   21606:	af00      	add	r7, sp, #0
   21608:	2002      	movs	r0, #2
   2160a:	4b02      	ldr	r3, [pc, #8]	; (21614 <TC5_Handler+0x10>)
   2160c:	4798      	blx	r3
   2160e:	46c0      	nop			; (mov r8, r8)
   21610:	46bd      	mov	sp, r7
   21612:	bd80      	pop	{r7, pc}
   21614:	00021641 	.word	0x00021641

00021618 <TC6_Handler>:
   21618:	b580      	push	{r7, lr}
   2161a:	af00      	add	r7, sp, #0
   2161c:	2003      	movs	r0, #3
   2161e:	4b02      	ldr	r3, [pc, #8]	; (21628 <TC6_Handler+0x10>)
   21620:	4798      	blx	r3
   21622:	46c0      	nop			; (mov r8, r8)
   21624:	46bd      	mov	sp, r7
   21626:	bd80      	pop	{r7, pc}
   21628:	00021641 	.word	0x00021641

0002162c <TC7_Handler>:
   2162c:	b580      	push	{r7, lr}
   2162e:	af00      	add	r7, sp, #0
   21630:	2004      	movs	r0, #4
   21632:	4b02      	ldr	r3, [pc, #8]	; (2163c <TC7_Handler+0x10>)
   21634:	4798      	blx	r3
   21636:	46c0      	nop			; (mov r8, r8)
   21638:	46bd      	mov	sp, r7
   2163a:	bd80      	pop	{r7, pc}
   2163c:	00021641 	.word	0x00021641

00021640 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   21640:	b580      	push	{r7, lr}
   21642:	b084      	sub	sp, #16
   21644:	af00      	add	r7, sp, #0
   21646:	0002      	movs	r2, r0
   21648:	1dfb      	adds	r3, r7, #7
   2164a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   2164c:	1dfb      	adds	r3, r7, #7
   2164e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   21650:	4b28      	ldr	r3, [pc, #160]	; (216f4 <_tc_interrupt_handler+0xb4>)
   21652:	0092      	lsls	r2, r2, #2
   21654:	58d3      	ldr	r3, [r2, r3]
   21656:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21658:	68fb      	ldr	r3, [r7, #12]
   2165a:	681b      	ldr	r3, [r3, #0]
   2165c:	7b9b      	ldrb	r3, [r3, #14]
   2165e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   21660:	68fa      	ldr	r2, [r7, #12]
   21662:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   21664:	4013      	ands	r3, r2
   21666:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   21668:	68fb      	ldr	r3, [r7, #12]
   2166a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   2166c:	230b      	movs	r3, #11
   2166e:	18fb      	adds	r3, r7, r3
   21670:	400a      	ands	r2, r1
   21672:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   21674:	230b      	movs	r3, #11
   21676:	18fb      	adds	r3, r7, r3
   21678:	781b      	ldrb	r3, [r3, #0]
   2167a:	2201      	movs	r2, #1
   2167c:	4013      	ands	r3, r2
   2167e:	d008      	beq.n	21692 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   21680:	68fb      	ldr	r3, [r7, #12]
   21682:	689b      	ldr	r3, [r3, #8]
   21684:	68fa      	ldr	r2, [r7, #12]
   21686:	0010      	movs	r0, r2
   21688:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2168a:	68fb      	ldr	r3, [r7, #12]
   2168c:	681b      	ldr	r3, [r3, #0]
   2168e:	2201      	movs	r2, #1
   21690:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   21692:	230b      	movs	r3, #11
   21694:	18fb      	adds	r3, r7, r3
   21696:	781b      	ldrb	r3, [r3, #0]
   21698:	2202      	movs	r2, #2
   2169a:	4013      	ands	r3, r2
   2169c:	d008      	beq.n	216b0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2169e:	68fb      	ldr	r3, [r7, #12]
   216a0:	68db      	ldr	r3, [r3, #12]
   216a2:	68fa      	ldr	r2, [r7, #12]
   216a4:	0010      	movs	r0, r2
   216a6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   216a8:	68fb      	ldr	r3, [r7, #12]
   216aa:	681b      	ldr	r3, [r3, #0]
   216ac:	2202      	movs	r2, #2
   216ae:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   216b0:	230b      	movs	r3, #11
   216b2:	18fb      	adds	r3, r7, r3
   216b4:	781b      	ldrb	r3, [r3, #0]
   216b6:	2210      	movs	r2, #16
   216b8:	4013      	ands	r3, r2
   216ba:	d008      	beq.n	216ce <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   216bc:	68fb      	ldr	r3, [r7, #12]
   216be:	691b      	ldr	r3, [r3, #16]
   216c0:	68fa      	ldr	r2, [r7, #12]
   216c2:	0010      	movs	r0, r2
   216c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   216c6:	68fb      	ldr	r3, [r7, #12]
   216c8:	681b      	ldr	r3, [r3, #0]
   216ca:	2210      	movs	r2, #16
   216cc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   216ce:	230b      	movs	r3, #11
   216d0:	18fb      	adds	r3, r7, r3
   216d2:	781b      	ldrb	r3, [r3, #0]
   216d4:	2220      	movs	r2, #32
   216d6:	4013      	ands	r3, r2
   216d8:	d008      	beq.n	216ec <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   216da:	68fb      	ldr	r3, [r7, #12]
   216dc:	695b      	ldr	r3, [r3, #20]
   216de:	68fa      	ldr	r2, [r7, #12]
   216e0:	0010      	movs	r0, r2
   216e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   216e4:	68fb      	ldr	r3, [r7, #12]
   216e6:	681b      	ldr	r3, [r3, #0]
   216e8:	2220      	movs	r2, #32
   216ea:	739a      	strb	r2, [r3, #14]
	}
}
   216ec:	46c0      	nop			; (mov r8, r8)
   216ee:	46bd      	mov	sp, r7
   216f0:	b004      	add	sp, #16
   216f2:	bd80      	pop	{r7, pc}
   216f4:	20000954 	.word	0x20000954

000216f8 <system_gclk_chan_get_config_defaults>:
{
   216f8:	b580      	push	{r7, lr}
   216fa:	b082      	sub	sp, #8
   216fc:	af00      	add	r7, sp, #0
   216fe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   21700:	687b      	ldr	r3, [r7, #4]
   21702:	2200      	movs	r2, #0
   21704:	701a      	strb	r2, [r3, #0]
}
   21706:	46c0      	nop			; (mov r8, r8)
   21708:	46bd      	mov	sp, r7
   2170a:	b002      	add	sp, #8
   2170c:	bd80      	pop	{r7, pc}
	...

00021710 <system_apb_clock_set_mask>:
{
   21710:	b580      	push	{r7, lr}
   21712:	b082      	sub	sp, #8
   21714:	af00      	add	r7, sp, #0
   21716:	0002      	movs	r2, r0
   21718:	6039      	str	r1, [r7, #0]
   2171a:	1dfb      	adds	r3, r7, #7
   2171c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2171e:	1dfb      	adds	r3, r7, #7
   21720:	781b      	ldrb	r3, [r3, #0]
   21722:	2b01      	cmp	r3, #1
   21724:	d00a      	beq.n	2173c <system_apb_clock_set_mask+0x2c>
   21726:	2b02      	cmp	r3, #2
   21728:	d00f      	beq.n	2174a <system_apb_clock_set_mask+0x3a>
   2172a:	2b00      	cmp	r3, #0
   2172c:	d114      	bne.n	21758 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2172e:	4b0e      	ldr	r3, [pc, #56]	; (21768 <system_apb_clock_set_mask+0x58>)
   21730:	4a0d      	ldr	r2, [pc, #52]	; (21768 <system_apb_clock_set_mask+0x58>)
   21732:	6991      	ldr	r1, [r2, #24]
   21734:	683a      	ldr	r2, [r7, #0]
   21736:	430a      	orrs	r2, r1
   21738:	619a      	str	r2, [r3, #24]
			break;
   2173a:	e00f      	b.n	2175c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2173c:	4b0a      	ldr	r3, [pc, #40]	; (21768 <system_apb_clock_set_mask+0x58>)
   2173e:	4a0a      	ldr	r2, [pc, #40]	; (21768 <system_apb_clock_set_mask+0x58>)
   21740:	69d1      	ldr	r1, [r2, #28]
   21742:	683a      	ldr	r2, [r7, #0]
   21744:	430a      	orrs	r2, r1
   21746:	61da      	str	r2, [r3, #28]
			break;
   21748:	e008      	b.n	2175c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2174a:	4b07      	ldr	r3, [pc, #28]	; (21768 <system_apb_clock_set_mask+0x58>)
   2174c:	4a06      	ldr	r2, [pc, #24]	; (21768 <system_apb_clock_set_mask+0x58>)
   2174e:	6a11      	ldr	r1, [r2, #32]
   21750:	683a      	ldr	r2, [r7, #0]
   21752:	430a      	orrs	r2, r1
   21754:	621a      	str	r2, [r3, #32]
			break;
   21756:	e001      	b.n	2175c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   21758:	2317      	movs	r3, #23
   2175a:	e000      	b.n	2175e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2175c:	2300      	movs	r3, #0
}
   2175e:	0018      	movs	r0, r3
   21760:	46bd      	mov	sp, r7
   21762:	b002      	add	sp, #8
   21764:	bd80      	pop	{r7, pc}
   21766:	46c0      	nop			; (mov r8, r8)
   21768:	40000400 	.word	0x40000400

0002176c <system_pinmux_get_config_defaults>:
{
   2176c:	b580      	push	{r7, lr}
   2176e:	b082      	sub	sp, #8
   21770:	af00      	add	r7, sp, #0
   21772:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   21774:	687b      	ldr	r3, [r7, #4]
   21776:	2280      	movs	r2, #128	; 0x80
   21778:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2177a:	687b      	ldr	r3, [r7, #4]
   2177c:	2200      	movs	r2, #0
   2177e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   21780:	687b      	ldr	r3, [r7, #4]
   21782:	2201      	movs	r2, #1
   21784:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   21786:	687b      	ldr	r3, [r7, #4]
   21788:	2200      	movs	r2, #0
   2178a:	70da      	strb	r2, [r3, #3]
}
   2178c:	46c0      	nop			; (mov r8, r8)
   2178e:	46bd      	mov	sp, r7
   21790:	b002      	add	sp, #8
   21792:	bd80      	pop	{r7, pc}

00021794 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   21794:	b580      	push	{r7, lr}
   21796:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   21798:	4b05      	ldr	r3, [pc, #20]	; (217b0 <system_is_debugger_present+0x1c>)
   2179a:	789b      	ldrb	r3, [r3, #2]
   2179c:	b2db      	uxtb	r3, r3
   2179e:	001a      	movs	r2, r3
   217a0:	2302      	movs	r3, #2
   217a2:	4013      	ands	r3, r2
   217a4:	1e5a      	subs	r2, r3, #1
   217a6:	4193      	sbcs	r3, r2
   217a8:	b2db      	uxtb	r3, r3
}
   217aa:	0018      	movs	r0, r3
   217ac:	46bd      	mov	sp, r7
   217ae:	bd80      	pop	{r7, pc}
   217b0:	41002000 	.word	0x41002000

000217b4 <usart_is_syncing>:
{
   217b4:	b580      	push	{r7, lr}
   217b6:	b084      	sub	sp, #16
   217b8:	af00      	add	r7, sp, #0
   217ba:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   217bc:	687b      	ldr	r3, [r7, #4]
   217be:	681b      	ldr	r3, [r3, #0]
   217c0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   217c2:	68fb      	ldr	r3, [r7, #12]
   217c4:	69db      	ldr	r3, [r3, #28]
   217c6:	1e5a      	subs	r2, r3, #1
   217c8:	4193      	sbcs	r3, r2
   217ca:	b2db      	uxtb	r3, r3
}
   217cc:	0018      	movs	r0, r3
   217ce:	46bd      	mov	sp, r7
   217d0:	b004      	add	sp, #16
   217d2:	bd80      	pop	{r7, pc}

000217d4 <_usart_wait_for_sync>:
{
   217d4:	b580      	push	{r7, lr}
   217d6:	b082      	sub	sp, #8
   217d8:	af00      	add	r7, sp, #0
   217da:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   217dc:	46c0      	nop			; (mov r8, r8)
   217de:	687b      	ldr	r3, [r7, #4]
   217e0:	0018      	movs	r0, r3
   217e2:	4b04      	ldr	r3, [pc, #16]	; (217f4 <_usart_wait_for_sync+0x20>)
   217e4:	4798      	blx	r3
   217e6:	1e03      	subs	r3, r0, #0
   217e8:	d1f9      	bne.n	217de <_usart_wait_for_sync+0xa>
}
   217ea:	46c0      	nop			; (mov r8, r8)
   217ec:	46bd      	mov	sp, r7
   217ee:	b002      	add	sp, #8
   217f0:	bd80      	pop	{r7, pc}
   217f2:	46c0      	nop			; (mov r8, r8)
   217f4:	000217b5 	.word	0x000217b5

000217f8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   217f8:	b5b0      	push	{r4, r5, r7, lr}
   217fa:	b08c      	sub	sp, #48	; 0x30
   217fc:	af02      	add	r7, sp, #8
   217fe:	6078      	str	r0, [r7, #4]
   21800:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21802:	687b      	ldr	r3, [r7, #4]
   21804:	681b      	ldr	r3, [r3, #0]
   21806:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21808:	687b      	ldr	r3, [r7, #4]
   2180a:	681b      	ldr	r3, [r3, #0]
   2180c:	0018      	movs	r0, r3
   2180e:	4bab      	ldr	r3, [pc, #684]	; (21abc <_usart_set_config+0x2c4>)
   21810:	4798      	blx	r3
   21812:	0003      	movs	r3, r0
   21814:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21816:	697b      	ldr	r3, [r7, #20]
   21818:	3314      	adds	r3, #20
   2181a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2181c:	2300      	movs	r3, #0
   2181e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   21820:	2300      	movs	r3, #0
   21822:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   21824:	230a      	movs	r3, #10
   21826:	18fb      	adds	r3, r7, r3
   21828:	2200      	movs	r2, #0
   2182a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2182c:	231f      	movs	r3, #31
   2182e:	18fb      	adds	r3, r7, r3
   21830:	2200      	movs	r2, #0
   21832:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21834:	231e      	movs	r3, #30
   21836:	18fb      	adds	r3, r7, r3
   21838:	2210      	movs	r2, #16
   2183a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2183c:	683b      	ldr	r3, [r7, #0]
   2183e:	8a1b      	ldrh	r3, [r3, #16]
   21840:	2280      	movs	r2, #128	; 0x80
   21842:	01d2      	lsls	r2, r2, #7
   21844:	4293      	cmp	r3, r2
   21846:	d01c      	beq.n	21882 <_usart_set_config+0x8a>
   21848:	2280      	movs	r2, #128	; 0x80
   2184a:	01d2      	lsls	r2, r2, #7
   2184c:	4293      	cmp	r3, r2
   2184e:	dc06      	bgt.n	2185e <_usart_set_config+0x66>
   21850:	2b00      	cmp	r3, #0
   21852:	d00d      	beq.n	21870 <_usart_set_config+0x78>
   21854:	2280      	movs	r2, #128	; 0x80
   21856:	0192      	lsls	r2, r2, #6
   21858:	4293      	cmp	r3, r2
   2185a:	d024      	beq.n	218a6 <_usart_set_config+0xae>
   2185c:	e035      	b.n	218ca <_usart_set_config+0xd2>
   2185e:	22c0      	movs	r2, #192	; 0xc0
   21860:	01d2      	lsls	r2, r2, #7
   21862:	4293      	cmp	r3, r2
   21864:	d028      	beq.n	218b8 <_usart_set_config+0xc0>
   21866:	2280      	movs	r2, #128	; 0x80
   21868:	0212      	lsls	r2, r2, #8
   2186a:	4293      	cmp	r3, r2
   2186c:	d012      	beq.n	21894 <_usart_set_config+0x9c>
   2186e:	e02c      	b.n	218ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21870:	231f      	movs	r3, #31
   21872:	18fb      	adds	r3, r7, r3
   21874:	2200      	movs	r2, #0
   21876:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   21878:	231e      	movs	r3, #30
   2187a:	18fb      	adds	r3, r7, r3
   2187c:	2210      	movs	r2, #16
   2187e:	701a      	strb	r2, [r3, #0]
			break;
   21880:	e023      	b.n	218ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21882:	231f      	movs	r3, #31
   21884:	18fb      	adds	r3, r7, r3
   21886:	2200      	movs	r2, #0
   21888:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2188a:	231e      	movs	r3, #30
   2188c:	18fb      	adds	r3, r7, r3
   2188e:	2208      	movs	r2, #8
   21890:	701a      	strb	r2, [r3, #0]
			break;
   21892:	e01a      	b.n	218ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   21894:	231f      	movs	r3, #31
   21896:	18fb      	adds	r3, r7, r3
   21898:	2200      	movs	r2, #0
   2189a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2189c:	231e      	movs	r3, #30
   2189e:	18fb      	adds	r3, r7, r3
   218a0:	2203      	movs	r2, #3
   218a2:	701a      	strb	r2, [r3, #0]
			break;
   218a4:	e011      	b.n	218ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   218a6:	231f      	movs	r3, #31
   218a8:	18fb      	adds	r3, r7, r3
   218aa:	2201      	movs	r2, #1
   218ac:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   218ae:	231e      	movs	r3, #30
   218b0:	18fb      	adds	r3, r7, r3
   218b2:	2210      	movs	r2, #16
   218b4:	701a      	strb	r2, [r3, #0]
			break;
   218b6:	e008      	b.n	218ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   218b8:	231f      	movs	r3, #31
   218ba:	18fb      	adds	r3, r7, r3
   218bc:	2201      	movs	r2, #1
   218be:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   218c0:	231e      	movs	r3, #30
   218c2:	18fb      	adds	r3, r7, r3
   218c4:	2208      	movs	r2, #8
   218c6:	701a      	strb	r2, [r3, #0]
			break;
   218c8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   218ca:	683b      	ldr	r3, [r7, #0]
   218cc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   218ce:	683b      	ldr	r3, [r7, #0]
   218d0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   218d2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   218d4:	683b      	ldr	r3, [r7, #0]
   218d6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   218d8:	4313      	orrs	r3, r2
		config->sample_rate |
   218da:	683a      	ldr	r2, [r7, #0]
   218dc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   218de:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   218e0:	683a      	ldr	r2, [r7, #0]
   218e2:	7e12      	ldrb	r2, [r2, #24]
   218e4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   218e6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   218e8:	683a      	ldr	r2, [r7, #0]
   218ea:	2126      	movs	r1, #38	; 0x26
   218ec:	5c52      	ldrb	r2, [r2, r1]
   218ee:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   218f0:	4313      	orrs	r3, r2
   218f2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   218f4:	231d      	movs	r3, #29
   218f6:	18fb      	adds	r3, r7, r3
   218f8:	2200      	movs	r2, #0
   218fa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   218fc:	683b      	ldr	r3, [r7, #0]
   218fe:	685b      	ldr	r3, [r3, #4]
   21900:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   21902:	68fb      	ldr	r3, [r7, #12]
   21904:	2b00      	cmp	r3, #0
   21906:	d01e      	beq.n	21946 <_usart_set_config+0x14e>
   21908:	2280      	movs	r2, #128	; 0x80
   2190a:	0552      	lsls	r2, r2, #21
   2190c:	4293      	cmp	r3, r2
   2190e:	d14f      	bne.n	219b0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   21910:	683b      	ldr	r3, [r7, #0]
   21912:	2227      	movs	r2, #39	; 0x27
   21914:	5c9b      	ldrb	r3, [r3, r2]
   21916:	2201      	movs	r2, #1
   21918:	4053      	eors	r3, r2
   2191a:	b2db      	uxtb	r3, r3
   2191c:	2b00      	cmp	r3, #0
   2191e:	d046      	beq.n	219ae <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   21920:	683b      	ldr	r3, [r7, #0]
   21922:	6a1d      	ldr	r5, [r3, #32]
   21924:	693b      	ldr	r3, [r7, #16]
   21926:	b2db      	uxtb	r3, r3
   21928:	0018      	movs	r0, r3
   2192a:	4b65      	ldr	r3, [pc, #404]	; (21ac0 <_usart_set_config+0x2c8>)
   2192c:	4798      	blx	r3
   2192e:	0001      	movs	r1, r0
   21930:	231d      	movs	r3, #29
   21932:	18fc      	adds	r4, r7, r3
   21934:	230a      	movs	r3, #10
   21936:	18fb      	adds	r3, r7, r3
   21938:	001a      	movs	r2, r3
   2193a:	0028      	movs	r0, r5
   2193c:	4b61      	ldr	r3, [pc, #388]	; (21ac4 <_usart_set_config+0x2cc>)
   2193e:	4798      	blx	r3
   21940:	0003      	movs	r3, r0
   21942:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   21944:	e033      	b.n	219ae <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   21946:	683b      	ldr	r3, [r7, #0]
   21948:	2227      	movs	r2, #39	; 0x27
   2194a:	5c9b      	ldrb	r3, [r3, r2]
   2194c:	2b00      	cmp	r3, #0
   2194e:	d014      	beq.n	2197a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   21950:	683b      	ldr	r3, [r7, #0]
   21952:	6a18      	ldr	r0, [r3, #32]
   21954:	683b      	ldr	r3, [r7, #0]
   21956:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   21958:	231d      	movs	r3, #29
   2195a:	18fc      	adds	r4, r7, r3
   2195c:	231f      	movs	r3, #31
   2195e:	18fb      	adds	r3, r7, r3
   21960:	781d      	ldrb	r5, [r3, #0]
   21962:	230a      	movs	r3, #10
   21964:	18fa      	adds	r2, r7, r3
   21966:	231e      	movs	r3, #30
   21968:	18fb      	adds	r3, r7, r3
   2196a:	781b      	ldrb	r3, [r3, #0]
   2196c:	9300      	str	r3, [sp, #0]
   2196e:	002b      	movs	r3, r5
   21970:	4d55      	ldr	r5, [pc, #340]	; (21ac8 <_usart_set_config+0x2d0>)
   21972:	47a8      	blx	r5
   21974:	0003      	movs	r3, r0
   21976:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   21978:	e01a      	b.n	219b0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2197a:	683b      	ldr	r3, [r7, #0]
   2197c:	6a1d      	ldr	r5, [r3, #32]
   2197e:	693b      	ldr	r3, [r7, #16]
   21980:	b2db      	uxtb	r3, r3
   21982:	0018      	movs	r0, r3
   21984:	4b4e      	ldr	r3, [pc, #312]	; (21ac0 <_usart_set_config+0x2c8>)
   21986:	4798      	blx	r3
				status_code =
   21988:	231d      	movs	r3, #29
   2198a:	18fc      	adds	r4, r7, r3
   2198c:	231f      	movs	r3, #31
   2198e:	18fb      	adds	r3, r7, r3
   21990:	7819      	ldrb	r1, [r3, #0]
   21992:	230a      	movs	r3, #10
   21994:	18fa      	adds	r2, r7, r3
   21996:	231e      	movs	r3, #30
   21998:	18fb      	adds	r3, r7, r3
   2199a:	781b      	ldrb	r3, [r3, #0]
   2199c:	9300      	str	r3, [sp, #0]
   2199e:	000b      	movs	r3, r1
   219a0:	0001      	movs	r1, r0
   219a2:	0028      	movs	r0, r5
   219a4:	4d48      	ldr	r5, [pc, #288]	; (21ac8 <_usart_set_config+0x2d0>)
   219a6:	47a8      	blx	r5
   219a8:	0003      	movs	r3, r0
   219aa:	7023      	strb	r3, [r4, #0]
			break;
   219ac:	e000      	b.n	219b0 <_usart_set_config+0x1b8>
			break;
   219ae:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   219b0:	231d      	movs	r3, #29
   219b2:	18fb      	adds	r3, r7, r3
   219b4:	781b      	ldrb	r3, [r3, #0]
   219b6:	2b00      	cmp	r3, #0
   219b8:	d003      	beq.n	219c2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   219ba:	231d      	movs	r3, #29
   219bc:	18fb      	adds	r3, r7, r3
   219be:	781b      	ldrb	r3, [r3, #0]
   219c0:	e077      	b.n	21ab2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   219c2:	683b      	ldr	r3, [r7, #0]
   219c4:	7e5b      	ldrb	r3, [r3, #25]
   219c6:	2b00      	cmp	r3, #0
   219c8:	d003      	beq.n	219d2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   219ca:	683b      	ldr	r3, [r7, #0]
   219cc:	7e9a      	ldrb	r2, [r3, #26]
   219ce:	69bb      	ldr	r3, [r7, #24]
   219d0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   219d2:	687b      	ldr	r3, [r7, #4]
   219d4:	0018      	movs	r0, r3
   219d6:	4b3d      	ldr	r3, [pc, #244]	; (21acc <_usart_set_config+0x2d4>)
   219d8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   219da:	230a      	movs	r3, #10
   219dc:	18fb      	adds	r3, r7, r3
   219de:	881a      	ldrh	r2, [r3, #0]
   219e0:	69bb      	ldr	r3, [r7, #24]
   219e2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   219e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   219e6:	68fb      	ldr	r3, [r7, #12]
   219e8:	4313      	orrs	r3, r2
   219ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   219ec:	683b      	ldr	r3, [r7, #0]
   219ee:	2227      	movs	r2, #39	; 0x27
   219f0:	5c9b      	ldrb	r3, [r3, r2]
   219f2:	2201      	movs	r2, #1
   219f4:	4053      	eors	r3, r2
   219f6:	b2db      	uxtb	r3, r3
   219f8:	2b00      	cmp	r3, #0
   219fa:	d003      	beq.n	21a04 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   219fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   219fe:	2204      	movs	r2, #4
   21a00:	4313      	orrs	r3, r2
   21a02:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21a04:	683b      	ldr	r3, [r7, #0]
   21a06:	7e5b      	ldrb	r3, [r3, #25]
   21a08:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21a0a:	683b      	ldr	r3, [r7, #0]
   21a0c:	7f1b      	ldrb	r3, [r3, #28]
   21a0e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   21a10:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21a12:	683b      	ldr	r3, [r7, #0]
   21a14:	7f5b      	ldrb	r3, [r3, #29]
   21a16:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   21a18:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   21a1a:	683b      	ldr	r3, [r7, #0]
   21a1c:	2124      	movs	r1, #36	; 0x24
   21a1e:	5c5b      	ldrb	r3, [r3, r1]
   21a20:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   21a22:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   21a24:	683b      	ldr	r3, [r7, #0]
   21a26:	2125      	movs	r1, #37	; 0x25
   21a28:	5c5b      	ldrb	r3, [r3, r1]
   21a2a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   21a2c:	4313      	orrs	r3, r2
	ctrlb =  
   21a2e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   21a30:	683b      	ldr	r3, [r7, #0]
   21a32:	7a9b      	ldrb	r3, [r3, #10]
   21a34:	001a      	movs	r2, r3
   21a36:	6a3b      	ldr	r3, [r7, #32]
   21a38:	4313      	orrs	r3, r2
   21a3a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   21a3c:	683b      	ldr	r3, [r7, #0]
   21a3e:	7adb      	ldrb	r3, [r3, #11]
   21a40:	001a      	movs	r2, r3
   21a42:	6a3b      	ldr	r3, [r7, #32]
   21a44:	4313      	orrs	r3, r2
   21a46:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   21a48:	683b      	ldr	r3, [r7, #0]
   21a4a:	891b      	ldrh	r3, [r3, #8]
   21a4c:	2bff      	cmp	r3, #255	; 0xff
   21a4e:	d00b      	beq.n	21a68 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   21a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a52:	2280      	movs	r2, #128	; 0x80
   21a54:	0452      	lsls	r2, r2, #17
   21a56:	4313      	orrs	r3, r2
   21a58:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   21a5a:	683b      	ldr	r3, [r7, #0]
   21a5c:	891b      	ldrh	r3, [r3, #8]
   21a5e:	001a      	movs	r2, r3
   21a60:	6a3b      	ldr	r3, [r7, #32]
   21a62:	4313      	orrs	r3, r2
   21a64:	623b      	str	r3, [r7, #32]
   21a66:	e008      	b.n	21a7a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   21a68:	683b      	ldr	r3, [r7, #0]
   21a6a:	7edb      	ldrb	r3, [r3, #27]
   21a6c:	2b00      	cmp	r3, #0
   21a6e:	d004      	beq.n	21a7a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   21a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a72:	2280      	movs	r2, #128	; 0x80
   21a74:	04d2      	lsls	r2, r2, #19
   21a76:	4313      	orrs	r3, r2
   21a78:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   21a7a:	683b      	ldr	r3, [r7, #0]
   21a7c:	222c      	movs	r2, #44	; 0x2c
   21a7e:	5c9b      	ldrb	r3, [r3, r2]
   21a80:	2b00      	cmp	r3, #0
   21a82:	d103      	bne.n	21a8c <_usart_set_config+0x294>
   21a84:	4b12      	ldr	r3, [pc, #72]	; (21ad0 <_usart_set_config+0x2d8>)
   21a86:	4798      	blx	r3
   21a88:	1e03      	subs	r3, r0, #0
   21a8a:	d003      	beq.n	21a94 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   21a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21a8e:	2280      	movs	r2, #128	; 0x80
   21a90:	4313      	orrs	r3, r2
   21a92:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21a94:	687b      	ldr	r3, [r7, #4]
   21a96:	0018      	movs	r0, r3
   21a98:	4b0c      	ldr	r3, [pc, #48]	; (21acc <_usart_set_config+0x2d4>)
   21a9a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   21a9c:	69bb      	ldr	r3, [r7, #24]
   21a9e:	6a3a      	ldr	r2, [r7, #32]
   21aa0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21aa2:	687b      	ldr	r3, [r7, #4]
   21aa4:	0018      	movs	r0, r3
   21aa6:	4b09      	ldr	r3, [pc, #36]	; (21acc <_usart_set_config+0x2d4>)
   21aa8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   21aaa:	69bb      	ldr	r3, [r7, #24]
   21aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21aae:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   21ab0:	2300      	movs	r3, #0
}
   21ab2:	0018      	movs	r0, r3
   21ab4:	46bd      	mov	sp, r7
   21ab6:	b00a      	add	sp, #40	; 0x28
   21ab8:	bdb0      	pop	{r4, r5, r7, pc}
   21aba:	46c0      	nop			; (mov r8, r8)
   21abc:	0001eba1 	.word	0x0001eba1
   21ac0:	00024b59 	.word	0x00024b59
   21ac4:	0001e71b 	.word	0x0001e71b
   21ac8:	0001e799 	.word	0x0001e799
   21acc:	000217d5 	.word	0x000217d5
   21ad0:	00021795 	.word	0x00021795

00021ad4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   21ad4:	b590      	push	{r4, r7, lr}
   21ad6:	b093      	sub	sp, #76	; 0x4c
   21ad8:	af00      	add	r7, sp, #0
   21ada:	60f8      	str	r0, [r7, #12]
   21adc:	60b9      	str	r1, [r7, #8]
   21ade:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   21ae0:	233b      	movs	r3, #59	; 0x3b
   21ae2:	18fb      	adds	r3, r7, r3
   21ae4:	2200      	movs	r2, #0
   21ae6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   21ae8:	68fb      	ldr	r3, [r7, #12]
   21aea:	68ba      	ldr	r2, [r7, #8]
   21aec:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21aee:	68fb      	ldr	r3, [r7, #12]
   21af0:	681b      	ldr	r3, [r3, #0]
   21af2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   21af4:	68fb      	ldr	r3, [r7, #12]
   21af6:	681b      	ldr	r3, [r3, #0]
   21af8:	0018      	movs	r0, r3
   21afa:	4b86      	ldr	r3, [pc, #536]	; (21d14 <usart_init+0x240>)
   21afc:	4798      	blx	r3
   21afe:	0003      	movs	r3, r0
   21b00:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   21b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21b04:	3302      	adds	r3, #2
   21b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   21b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21b0a:	3314      	adds	r3, #20
   21b0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   21b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21b10:	681b      	ldr	r3, [r3, #0]
   21b12:	2201      	movs	r2, #1
   21b14:	4013      	ands	r3, r2
   21b16:	d001      	beq.n	21b1c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   21b18:	2305      	movs	r3, #5
   21b1a:	e0f6      	b.n	21d0a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   21b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21b1e:	681b      	ldr	r3, [r3, #0]
   21b20:	2202      	movs	r2, #2
   21b22:	4013      	ands	r3, r2
   21b24:	d001      	beq.n	21b2a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   21b26:	231c      	movs	r3, #28
   21b28:	e0ef      	b.n	21d0a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   21b2a:	2201      	movs	r2, #1
   21b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21b2e:	409a      	lsls	r2, r3
   21b30:	0013      	movs	r3, r2
   21b32:	0019      	movs	r1, r3
   21b34:	2002      	movs	r0, #2
   21b36:	4b78      	ldr	r3, [pc, #480]	; (21d18 <usart_init+0x244>)
   21b38:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   21b3a:	2324      	movs	r3, #36	; 0x24
   21b3c:	18fb      	adds	r3, r7, r3
   21b3e:	0018      	movs	r0, r3
   21b40:	4b76      	ldr	r3, [pc, #472]	; (21d1c <usart_init+0x248>)
   21b42:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   21b44:	687b      	ldr	r3, [r7, #4]
   21b46:	222d      	movs	r2, #45	; 0x2d
   21b48:	5c9a      	ldrb	r2, [r3, r2]
   21b4a:	2324      	movs	r3, #36	; 0x24
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   21b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21b52:	b2db      	uxtb	r3, r3
   21b54:	2224      	movs	r2, #36	; 0x24
   21b56:	18ba      	adds	r2, r7, r2
   21b58:	0011      	movs	r1, r2
   21b5a:	0018      	movs	r0, r3
   21b5c:	4b70      	ldr	r3, [pc, #448]	; (21d20 <usart_init+0x24c>)
   21b5e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   21b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21b62:	b2db      	uxtb	r3, r3
   21b64:	0018      	movs	r0, r3
   21b66:	4b6f      	ldr	r3, [pc, #444]	; (21d24 <usart_init+0x250>)
   21b68:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   21b6a:	687b      	ldr	r3, [r7, #4]
   21b6c:	222d      	movs	r2, #45	; 0x2d
   21b6e:	5c9b      	ldrb	r3, [r3, r2]
   21b70:	2100      	movs	r1, #0
   21b72:	0018      	movs	r0, r3
   21b74:	4b6c      	ldr	r3, [pc, #432]	; (21d28 <usart_init+0x254>)
   21b76:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   21b78:	687b      	ldr	r3, [r7, #4]
   21b7a:	7ada      	ldrb	r2, [r3, #11]
   21b7c:	68fb      	ldr	r3, [r7, #12]
   21b7e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   21b80:	687b      	ldr	r3, [r7, #4]
   21b82:	2224      	movs	r2, #36	; 0x24
   21b84:	5c9a      	ldrb	r2, [r3, r2]
   21b86:	68fb      	ldr	r3, [r7, #12]
   21b88:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   21b8a:	687b      	ldr	r3, [r7, #4]
   21b8c:	2225      	movs	r2, #37	; 0x25
   21b8e:	5c9a      	ldrb	r2, [r3, r2]
   21b90:	68fb      	ldr	r3, [r7, #12]
   21b92:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   21b94:	687b      	ldr	r3, [r7, #4]
   21b96:	7eda      	ldrb	r2, [r3, #27]
   21b98:	68fb      	ldr	r3, [r7, #12]
   21b9a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   21b9c:	687b      	ldr	r3, [r7, #4]
   21b9e:	7f1a      	ldrb	r2, [r3, #28]
   21ba0:	68fb      	ldr	r3, [r7, #12]
   21ba2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   21ba4:	233b      	movs	r3, #59	; 0x3b
   21ba6:	18fc      	adds	r4, r7, r3
   21ba8:	687a      	ldr	r2, [r7, #4]
   21baa:	68fb      	ldr	r3, [r7, #12]
   21bac:	0011      	movs	r1, r2
   21bae:	0018      	movs	r0, r3
   21bb0:	4b5e      	ldr	r3, [pc, #376]	; (21d2c <usart_init+0x258>)
   21bb2:	4798      	blx	r3
   21bb4:	0003      	movs	r3, r0
   21bb6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   21bb8:	233b      	movs	r3, #59	; 0x3b
   21bba:	18fb      	adds	r3, r7, r3
   21bbc:	781b      	ldrb	r3, [r3, #0]
   21bbe:	2b00      	cmp	r3, #0
   21bc0:	d003      	beq.n	21bca <usart_init+0xf6>
		return status_code;
   21bc2:	233b      	movs	r3, #59	; 0x3b
   21bc4:	18fb      	adds	r3, r7, r3
   21bc6:	781b      	ldrb	r3, [r3, #0]
   21bc8:	e09f      	b.n	21d0a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   21bca:	2320      	movs	r3, #32
   21bcc:	18fb      	adds	r3, r7, r3
   21bce:	0018      	movs	r0, r3
   21bd0:	4b57      	ldr	r3, [pc, #348]	; (21d30 <usart_init+0x25c>)
   21bd2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   21bd4:	2320      	movs	r3, #32
   21bd6:	18fb      	adds	r3, r7, r3
   21bd8:	2200      	movs	r2, #0
   21bda:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   21bdc:	2320      	movs	r3, #32
   21bde:	18fb      	adds	r3, r7, r3
   21be0:	2200      	movs	r2, #0
   21be2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   21be4:	687b      	ldr	r3, [r7, #4]
   21be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   21be8:	2310      	movs	r3, #16
   21bea:	18fb      	adds	r3, r7, r3
   21bec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   21bee:	687b      	ldr	r3, [r7, #4]
   21bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   21bf2:	2310      	movs	r3, #16
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   21bf8:	687b      	ldr	r3, [r7, #4]
   21bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   21bfc:	2310      	movs	r3, #16
   21bfe:	18fb      	adds	r3, r7, r3
   21c00:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   21c02:	687b      	ldr	r3, [r7, #4]
   21c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   21c06:	2310      	movs	r3, #16
   21c08:	18fb      	adds	r3, r7, r3
   21c0a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   21c0c:	2347      	movs	r3, #71	; 0x47
   21c0e:	18fb      	adds	r3, r7, r3
   21c10:	2200      	movs	r2, #0
   21c12:	701a      	strb	r2, [r3, #0]
   21c14:	e02c      	b.n	21c70 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   21c16:	2347      	movs	r3, #71	; 0x47
   21c18:	18fb      	adds	r3, r7, r3
   21c1a:	781a      	ldrb	r2, [r3, #0]
   21c1c:	2310      	movs	r3, #16
   21c1e:	18fb      	adds	r3, r7, r3
   21c20:	0092      	lsls	r2, r2, #2
   21c22:	58d3      	ldr	r3, [r2, r3]
   21c24:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   21c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21c28:	2b00      	cmp	r3, #0
   21c2a:	d109      	bne.n	21c40 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   21c2c:	2347      	movs	r3, #71	; 0x47
   21c2e:	18fb      	adds	r3, r7, r3
   21c30:	781a      	ldrb	r2, [r3, #0]
   21c32:	68bb      	ldr	r3, [r7, #8]
   21c34:	0011      	movs	r1, r2
   21c36:	0018      	movs	r0, r3
   21c38:	4b3e      	ldr	r3, [pc, #248]	; (21d34 <usart_init+0x260>)
   21c3a:	4798      	blx	r3
   21c3c:	0003      	movs	r3, r0
   21c3e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   21c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21c42:	3301      	adds	r3, #1
   21c44:	d00d      	beq.n	21c62 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   21c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21c48:	b2da      	uxtb	r2, r3
   21c4a:	2320      	movs	r3, #32
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   21c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21c52:	0c1b      	lsrs	r3, r3, #16
   21c54:	b2db      	uxtb	r3, r3
   21c56:	2220      	movs	r2, #32
   21c58:	18ba      	adds	r2, r7, r2
   21c5a:	0011      	movs	r1, r2
   21c5c:	0018      	movs	r0, r3
   21c5e:	4b36      	ldr	r3, [pc, #216]	; (21d38 <usart_init+0x264>)
   21c60:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   21c62:	2347      	movs	r3, #71	; 0x47
   21c64:	18fb      	adds	r3, r7, r3
   21c66:	781a      	ldrb	r2, [r3, #0]
   21c68:	2347      	movs	r3, #71	; 0x47
   21c6a:	18fb      	adds	r3, r7, r3
   21c6c:	3201      	adds	r2, #1
   21c6e:	701a      	strb	r2, [r3, #0]
   21c70:	2347      	movs	r3, #71	; 0x47
   21c72:	18fb      	adds	r3, r7, r3
   21c74:	781b      	ldrb	r3, [r3, #0]
   21c76:	2b03      	cmp	r3, #3
   21c78:	d9cd      	bls.n	21c16 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21c7a:	2300      	movs	r3, #0
   21c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   21c7e:	e00a      	b.n	21c96 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   21c80:	68fa      	ldr	r2, [r7, #12]
   21c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21c84:	3302      	adds	r3, #2
   21c86:	009b      	lsls	r3, r3, #2
   21c88:	18d3      	adds	r3, r2, r3
   21c8a:	3304      	adds	r3, #4
   21c8c:	2200      	movs	r2, #0
   21c8e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   21c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21c92:	3301      	adds	r3, #1
   21c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   21c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21c98:	2b05      	cmp	r3, #5
   21c9a:	d9f1      	bls.n	21c80 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   21c9c:	68fb      	ldr	r3, [r7, #12]
   21c9e:	2200      	movs	r2, #0
   21ca0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   21ca2:	68fb      	ldr	r3, [r7, #12]
   21ca4:	2200      	movs	r2, #0
   21ca6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   21ca8:	68fb      	ldr	r3, [r7, #12]
   21caa:	2200      	movs	r2, #0
   21cac:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   21cae:	68fb      	ldr	r3, [r7, #12]
   21cb0:	2200      	movs	r2, #0
   21cb2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   21cb4:	68fb      	ldr	r3, [r7, #12]
   21cb6:	2230      	movs	r2, #48	; 0x30
   21cb8:	2100      	movs	r1, #0
   21cba:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   21cbc:	68fb      	ldr	r3, [r7, #12]
   21cbe:	2231      	movs	r2, #49	; 0x31
   21cc0:	2100      	movs	r1, #0
   21cc2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   21cc4:	68fb      	ldr	r3, [r7, #12]
   21cc6:	2232      	movs	r2, #50	; 0x32
   21cc8:	2100      	movs	r1, #0
   21cca:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   21ccc:	68fb      	ldr	r3, [r7, #12]
   21cce:	2233      	movs	r2, #51	; 0x33
   21cd0:	2100      	movs	r1, #0
   21cd2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   21cd4:	68fb      	ldr	r3, [r7, #12]
   21cd6:	681b      	ldr	r3, [r3, #0]
   21cd8:	2227      	movs	r2, #39	; 0x27
   21cda:	18bc      	adds	r4, r7, r2
   21cdc:	0018      	movs	r0, r3
   21cde:	4b0d      	ldr	r3, [pc, #52]	; (21d14 <usart_init+0x240>)
   21ce0:	4798      	blx	r3
   21ce2:	0003      	movs	r3, r0
   21ce4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   21ce6:	4a15      	ldr	r2, [pc, #84]	; (21d3c <usart_init+0x268>)
   21ce8:	2327      	movs	r3, #39	; 0x27
   21cea:	18fb      	adds	r3, r7, r3
   21cec:	781b      	ldrb	r3, [r3, #0]
   21cee:	0011      	movs	r1, r2
   21cf0:	0018      	movs	r0, r3
   21cf2:	4b13      	ldr	r3, [pc, #76]	; (21d40 <usart_init+0x26c>)
   21cf4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   21cf6:	2327      	movs	r3, #39	; 0x27
   21cf8:	18fb      	adds	r3, r7, r3
   21cfa:	781a      	ldrb	r2, [r3, #0]
   21cfc:	4b11      	ldr	r3, [pc, #68]	; (21d44 <usart_init+0x270>)
   21cfe:	0092      	lsls	r2, r2, #2
   21d00:	68f9      	ldr	r1, [r7, #12]
   21d02:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   21d04:	233b      	movs	r3, #59	; 0x3b
   21d06:	18fb      	adds	r3, r7, r3
   21d08:	781b      	ldrb	r3, [r3, #0]
}
   21d0a:	0018      	movs	r0, r3
   21d0c:	46bd      	mov	sp, r7
   21d0e:	b013      	add	sp, #76	; 0x4c
   21d10:	bd90      	pop	{r4, r7, pc}
   21d12:	46c0      	nop			; (mov r8, r8)
   21d14:	0001eba1 	.word	0x0001eba1
   21d18:	00021711 	.word	0x00021711
   21d1c:	000216f9 	.word	0x000216f9
   21d20:	00024a35 	.word	0x00024a35
   21d24:	00024a79 	.word	0x00024a79
   21d28:	0001e959 	.word	0x0001e959
   21d2c:	000217f9 	.word	0x000217f9
   21d30:	0002176d 	.word	0x0002176d
   21d34:	0001e9e5 	.word	0x0001e9e5
   21d38:	00024d21 	.word	0x00024d21
   21d3c:	00021f1d 	.word	0x00021f1d
   21d40:	00022271 	.word	0x00022271
   21d44:	20000968 	.word	0x20000968

00021d48 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   21d48:	b580      	push	{r7, lr}
   21d4a:	b084      	sub	sp, #16
   21d4c:	af00      	add	r7, sp, #0
   21d4e:	6078      	str	r0, [r7, #4]
   21d50:	000a      	movs	r2, r1
   21d52:	1cbb      	adds	r3, r7, #2
   21d54:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21d56:	687b      	ldr	r3, [r7, #4]
   21d58:	681b      	ldr	r3, [r3, #0]
   21d5a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21d5c:	687b      	ldr	r3, [r7, #4]
   21d5e:	79db      	ldrb	r3, [r3, #7]
   21d60:	2201      	movs	r2, #1
   21d62:	4053      	eors	r3, r2
   21d64:	b2db      	uxtb	r3, r3
   21d66:	2b00      	cmp	r3, #0
   21d68:	d001      	beq.n	21d6e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   21d6a:	231c      	movs	r3, #28
   21d6c:	e017      	b.n	21d9e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   21d6e:	687b      	ldr	r3, [r7, #4]
   21d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21d72:	b29b      	uxth	r3, r3
   21d74:	2b00      	cmp	r3, #0
   21d76:	d001      	beq.n	21d7c <usart_write_wait+0x34>
		return STATUS_BUSY;
   21d78:	2305      	movs	r3, #5
   21d7a:	e010      	b.n	21d9e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21d7c:	687b      	ldr	r3, [r7, #4]
   21d7e:	0018      	movs	r0, r3
   21d80:	4b09      	ldr	r3, [pc, #36]	; (21da8 <usart_write_wait+0x60>)
   21d82:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   21d84:	68fb      	ldr	r3, [r7, #12]
   21d86:	1cba      	adds	r2, r7, #2
   21d88:	8812      	ldrh	r2, [r2, #0]
   21d8a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   21d8c:	46c0      	nop			; (mov r8, r8)
   21d8e:	68fb      	ldr	r3, [r7, #12]
   21d90:	7e1b      	ldrb	r3, [r3, #24]
   21d92:	b2db      	uxtb	r3, r3
   21d94:	001a      	movs	r2, r3
   21d96:	2302      	movs	r3, #2
   21d98:	4013      	ands	r3, r2
   21d9a:	d0f8      	beq.n	21d8e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   21d9c:	2300      	movs	r3, #0
}
   21d9e:	0018      	movs	r0, r3
   21da0:	46bd      	mov	sp, r7
   21da2:	b004      	add	sp, #16
   21da4:	bd80      	pop	{r7, pc}
   21da6:	46c0      	nop			; (mov r8, r8)
   21da8:	000217d5 	.word	0x000217d5

00021dac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   21dac:	b580      	push	{r7, lr}
   21dae:	b08a      	sub	sp, #40	; 0x28
   21db0:	af00      	add	r7, sp, #0
   21db2:	60f8      	str	r0, [r7, #12]
   21db4:	60b9      	str	r1, [r7, #8]
   21db6:	1dbb      	adds	r3, r7, #6
   21db8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   21dba:	1dbb      	adds	r3, r7, #6
   21dbc:	881b      	ldrh	r3, [r3, #0]
   21dbe:	2b00      	cmp	r3, #0
   21dc0:	d101      	bne.n	21dc6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   21dc2:	2317      	movs	r3, #23
   21dc4:	e07e      	b.n	21ec4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   21dc6:	68fb      	ldr	r3, [r7, #12]
   21dc8:	79db      	ldrb	r3, [r3, #7]
   21dca:	2201      	movs	r2, #1
   21dcc:	4053      	eors	r3, r2
   21dce:	b2db      	uxtb	r3, r3
   21dd0:	2b00      	cmp	r3, #0
   21dd2:	d001      	beq.n	21dd8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   21dd4:	231c      	movs	r3, #28
   21dd6:	e075      	b.n	21ec4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   21dd8:	68fb      	ldr	r3, [r7, #12]
   21dda:	681b      	ldr	r3, [r3, #0]
   21ddc:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   21dde:	68fb      	ldr	r3, [r7, #12]
   21de0:	0018      	movs	r0, r3
   21de2:	4b3a      	ldr	r3, [pc, #232]	; (21ecc <usart_write_buffer_wait+0x120>)
   21de4:	4798      	blx	r3

	uint16_t tx_pos = 0;
   21de6:	2326      	movs	r3, #38	; 0x26
   21de8:	18fb      	adds	r3, r7, r3
   21dea:	2200      	movs	r2, #0
   21dec:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   21dee:	e048      	b.n	21e82 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21df0:	2300      	movs	r3, #0
   21df2:	623b      	str	r3, [r7, #32]
   21df4:	e00f      	b.n	21e16 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   21df6:	697b      	ldr	r3, [r7, #20]
   21df8:	7e1b      	ldrb	r3, [r3, #24]
   21dfa:	b2db      	uxtb	r3, r3
   21dfc:	001a      	movs	r2, r3
   21dfe:	2301      	movs	r3, #1
   21e00:	4013      	ands	r3, r2
   21e02:	d10d      	bne.n	21e20 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   21e04:	6a3b      	ldr	r3, [r7, #32]
   21e06:	4a32      	ldr	r2, [pc, #200]	; (21ed0 <usart_write_buffer_wait+0x124>)
   21e08:	4293      	cmp	r3, r2
   21e0a:	d101      	bne.n	21e10 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   21e0c:	2312      	movs	r3, #18
   21e0e:	e059      	b.n	21ec4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21e10:	6a3b      	ldr	r3, [r7, #32]
   21e12:	3301      	adds	r3, #1
   21e14:	623b      	str	r3, [r7, #32]
   21e16:	6a3b      	ldr	r3, [r7, #32]
   21e18:	4a2d      	ldr	r2, [pc, #180]	; (21ed0 <usart_write_buffer_wait+0x124>)
   21e1a:	4293      	cmp	r3, r2
   21e1c:	d9eb      	bls.n	21df6 <usart_write_buffer_wait+0x4a>
   21e1e:	e000      	b.n	21e22 <usart_write_buffer_wait+0x76>
				break;
   21e20:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   21e22:	2326      	movs	r3, #38	; 0x26
   21e24:	18fb      	adds	r3, r7, r3
   21e26:	881b      	ldrh	r3, [r3, #0]
   21e28:	2226      	movs	r2, #38	; 0x26
   21e2a:	18ba      	adds	r2, r7, r2
   21e2c:	1c59      	adds	r1, r3, #1
   21e2e:	8011      	strh	r1, [r2, #0]
   21e30:	001a      	movs	r2, r3
   21e32:	68bb      	ldr	r3, [r7, #8]
   21e34:	189b      	adds	r3, r3, r2
   21e36:	781a      	ldrb	r2, [r3, #0]
   21e38:	231e      	movs	r3, #30
   21e3a:	18fb      	adds	r3, r7, r3
   21e3c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21e3e:	68fb      	ldr	r3, [r7, #12]
   21e40:	795b      	ldrb	r3, [r3, #5]
   21e42:	2b01      	cmp	r3, #1
   21e44:	d115      	bne.n	21e72 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   21e46:	2326      	movs	r3, #38	; 0x26
   21e48:	18fb      	adds	r3, r7, r3
   21e4a:	881b      	ldrh	r3, [r3, #0]
   21e4c:	2226      	movs	r2, #38	; 0x26
   21e4e:	18ba      	adds	r2, r7, r2
   21e50:	1c59      	adds	r1, r3, #1
   21e52:	8011      	strh	r1, [r2, #0]
   21e54:	001a      	movs	r2, r3
   21e56:	68bb      	ldr	r3, [r7, #8]
   21e58:	189b      	adds	r3, r3, r2
   21e5a:	781b      	ldrb	r3, [r3, #0]
   21e5c:	021b      	lsls	r3, r3, #8
   21e5e:	b21a      	sxth	r2, r3
   21e60:	231e      	movs	r3, #30
   21e62:	18fb      	adds	r3, r7, r3
   21e64:	2100      	movs	r1, #0
   21e66:	5e5b      	ldrsh	r3, [r3, r1]
   21e68:	4313      	orrs	r3, r2
   21e6a:	b21a      	sxth	r2, r3
   21e6c:	231e      	movs	r3, #30
   21e6e:	18fb      	adds	r3, r7, r3
   21e70:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   21e72:	231e      	movs	r3, #30
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	881a      	ldrh	r2, [r3, #0]
   21e78:	68fb      	ldr	r3, [r7, #12]
   21e7a:	0011      	movs	r1, r2
   21e7c:	0018      	movs	r0, r3
   21e7e:	4b15      	ldr	r3, [pc, #84]	; (21ed4 <usart_write_buffer_wait+0x128>)
   21e80:	4798      	blx	r3
	while (length--) {
   21e82:	1dbb      	adds	r3, r7, #6
   21e84:	881b      	ldrh	r3, [r3, #0]
   21e86:	1dba      	adds	r2, r7, #6
   21e88:	1e59      	subs	r1, r3, #1
   21e8a:	8011      	strh	r1, [r2, #0]
   21e8c:	2b00      	cmp	r3, #0
   21e8e:	d1af      	bne.n	21df0 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21e90:	2300      	movs	r3, #0
   21e92:	61bb      	str	r3, [r7, #24]
   21e94:	e00f      	b.n	21eb6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   21e96:	697b      	ldr	r3, [r7, #20]
   21e98:	7e1b      	ldrb	r3, [r3, #24]
   21e9a:	b2db      	uxtb	r3, r3
   21e9c:	001a      	movs	r2, r3
   21e9e:	2302      	movs	r3, #2
   21ea0:	4013      	ands	r3, r2
   21ea2:	d10d      	bne.n	21ec0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   21ea4:	69bb      	ldr	r3, [r7, #24]
   21ea6:	4a0a      	ldr	r2, [pc, #40]	; (21ed0 <usart_write_buffer_wait+0x124>)
   21ea8:	4293      	cmp	r3, r2
   21eaa:	d101      	bne.n	21eb0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   21eac:	2312      	movs	r3, #18
   21eae:	e009      	b.n	21ec4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   21eb0:	69bb      	ldr	r3, [r7, #24]
   21eb2:	3301      	adds	r3, #1
   21eb4:	61bb      	str	r3, [r7, #24]
   21eb6:	69bb      	ldr	r3, [r7, #24]
   21eb8:	4a05      	ldr	r2, [pc, #20]	; (21ed0 <usart_write_buffer_wait+0x124>)
   21eba:	4293      	cmp	r3, r2
   21ebc:	d9eb      	bls.n	21e96 <usart_write_buffer_wait+0xea>
   21ebe:	e000      	b.n	21ec2 <usart_write_buffer_wait+0x116>
			break;
   21ec0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   21ec2:	2300      	movs	r3, #0
}
   21ec4:	0018      	movs	r0, r3
   21ec6:	46bd      	mov	sp, r7
   21ec8:	b00a      	add	sp, #40	; 0x28
   21eca:	bd80      	pop	{r7, pc}
   21ecc:	000217d5 	.word	0x000217d5
   21ed0:	0000ffff 	.word	0x0000ffff
   21ed4:	00021d49 	.word	0x00021d49

00021ed8 <usart_is_syncing>:
{
   21ed8:	b580      	push	{r7, lr}
   21eda:	b084      	sub	sp, #16
   21edc:	af00      	add	r7, sp, #0
   21ede:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   21ee0:	687b      	ldr	r3, [r7, #4]
   21ee2:	681b      	ldr	r3, [r3, #0]
   21ee4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   21ee6:	68fb      	ldr	r3, [r7, #12]
   21ee8:	69db      	ldr	r3, [r3, #28]
   21eea:	1e5a      	subs	r2, r3, #1
   21eec:	4193      	sbcs	r3, r2
   21eee:	b2db      	uxtb	r3, r3
}
   21ef0:	0018      	movs	r0, r3
   21ef2:	46bd      	mov	sp, r7
   21ef4:	b004      	add	sp, #16
   21ef6:	bd80      	pop	{r7, pc}

00021ef8 <_usart_wait_for_sync>:
{
   21ef8:	b580      	push	{r7, lr}
   21efa:	b082      	sub	sp, #8
   21efc:	af00      	add	r7, sp, #0
   21efe:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   21f00:	46c0      	nop			; (mov r8, r8)
   21f02:	687b      	ldr	r3, [r7, #4]
   21f04:	0018      	movs	r0, r3
   21f06:	4b04      	ldr	r3, [pc, #16]	; (21f18 <_usart_wait_for_sync+0x20>)
   21f08:	4798      	blx	r3
   21f0a:	1e03      	subs	r3, r0, #0
   21f0c:	d1f9      	bne.n	21f02 <_usart_wait_for_sync+0xa>
}
   21f0e:	46c0      	nop			; (mov r8, r8)
   21f10:	46bd      	mov	sp, r7
   21f12:	b002      	add	sp, #8
   21f14:	bd80      	pop	{r7, pc}
   21f16:	46c0      	nop			; (mov r8, r8)
   21f18:	00021ed9 	.word	0x00021ed9

00021f1c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   21f1c:	b580      	push	{r7, lr}
   21f1e:	b088      	sub	sp, #32
   21f20:	af00      	add	r7, sp, #0
   21f22:	0002      	movs	r2, r0
   21f24:	1dfb      	adds	r3, r7, #7
   21f26:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   21f28:	1dfb      	adds	r3, r7, #7
   21f2a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   21f2c:	4ba3      	ldr	r3, [pc, #652]	; (221bc <_usart_interrupt_handler+0x2a0>)
   21f2e:	0092      	lsls	r2, r2, #2
   21f30:	58d3      	ldr	r3, [r2, r3]
   21f32:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   21f34:	69bb      	ldr	r3, [r7, #24]
   21f36:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   21f38:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   21f3a:	69bb      	ldr	r3, [r7, #24]
   21f3c:	0018      	movs	r0, r3
   21f3e:	4ba0      	ldr	r3, [pc, #640]	; (221c0 <_usart_interrupt_handler+0x2a4>)
   21f40:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   21f42:	697b      	ldr	r3, [r7, #20]
   21f44:	7e1b      	ldrb	r3, [r3, #24]
   21f46:	b2da      	uxtb	r2, r3
   21f48:	2312      	movs	r3, #18
   21f4a:	18fb      	adds	r3, r7, r3
   21f4c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   21f4e:	697b      	ldr	r3, [r7, #20]
   21f50:	7d9b      	ldrb	r3, [r3, #22]
   21f52:	b2db      	uxtb	r3, r3
   21f54:	b29a      	uxth	r2, r3
   21f56:	2312      	movs	r3, #18
   21f58:	18fb      	adds	r3, r7, r3
   21f5a:	2112      	movs	r1, #18
   21f5c:	1879      	adds	r1, r7, r1
   21f5e:	8809      	ldrh	r1, [r1, #0]
   21f60:	400a      	ands	r2, r1
   21f62:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   21f64:	69bb      	ldr	r3, [r7, #24]
   21f66:	2230      	movs	r2, #48	; 0x30
   21f68:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   21f6a:	69ba      	ldr	r2, [r7, #24]
   21f6c:	2131      	movs	r1, #49	; 0x31
   21f6e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   21f70:	4013      	ands	r3, r2
   21f72:	b2da      	uxtb	r2, r3
   21f74:	2310      	movs	r3, #16
   21f76:	18fb      	adds	r3, r7, r3
   21f78:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   21f7a:	2312      	movs	r3, #18
   21f7c:	18fb      	adds	r3, r7, r3
   21f7e:	881b      	ldrh	r3, [r3, #0]
   21f80:	2201      	movs	r2, #1
   21f82:	4013      	ands	r3, r2
   21f84:	d044      	beq.n	22010 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   21f86:	69bb      	ldr	r3, [r7, #24]
   21f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21f8a:	b29b      	uxth	r3, r3
   21f8c:	2b00      	cmp	r3, #0
   21f8e:	d03c      	beq.n	2200a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   21f90:	69bb      	ldr	r3, [r7, #24]
   21f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f94:	781b      	ldrb	r3, [r3, #0]
   21f96:	b2da      	uxtb	r2, r3
   21f98:	231c      	movs	r3, #28
   21f9a:	18fb      	adds	r3, r7, r3
   21f9c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   21f9e:	69bb      	ldr	r3, [r7, #24]
   21fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21fa2:	1c5a      	adds	r2, r3, #1
   21fa4:	69bb      	ldr	r3, [r7, #24]
   21fa6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   21fa8:	69bb      	ldr	r3, [r7, #24]
   21faa:	795b      	ldrb	r3, [r3, #5]
   21fac:	2b01      	cmp	r3, #1
   21fae:	d113      	bne.n	21fd8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   21fb0:	69bb      	ldr	r3, [r7, #24]
   21fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21fb4:	781b      	ldrb	r3, [r3, #0]
   21fb6:	b2db      	uxtb	r3, r3
   21fb8:	021b      	lsls	r3, r3, #8
   21fba:	b21a      	sxth	r2, r3
   21fbc:	231c      	movs	r3, #28
   21fbe:	18fb      	adds	r3, r7, r3
   21fc0:	2100      	movs	r1, #0
   21fc2:	5e5b      	ldrsh	r3, [r3, r1]
   21fc4:	4313      	orrs	r3, r2
   21fc6:	b21a      	sxth	r2, r3
   21fc8:	231c      	movs	r3, #28
   21fca:	18fb      	adds	r3, r7, r3
   21fcc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   21fce:	69bb      	ldr	r3, [r7, #24]
   21fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21fd2:	1c5a      	adds	r2, r3, #1
   21fd4:	69bb      	ldr	r3, [r7, #24]
   21fd6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   21fd8:	231c      	movs	r3, #28
   21fda:	18fb      	adds	r3, r7, r3
   21fdc:	881b      	ldrh	r3, [r3, #0]
   21fde:	05db      	lsls	r3, r3, #23
   21fe0:	0ddb      	lsrs	r3, r3, #23
   21fe2:	b29a      	uxth	r2, r3
   21fe4:	697b      	ldr	r3, [r7, #20]
   21fe6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   21fe8:	69bb      	ldr	r3, [r7, #24]
   21fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   21fec:	b29b      	uxth	r3, r3
   21fee:	3b01      	subs	r3, #1
   21ff0:	b29b      	uxth	r3, r3
   21ff2:	69ba      	ldr	r2, [r7, #24]
   21ff4:	1c19      	adds	r1, r3, #0
   21ff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   21ff8:	2b00      	cmp	r3, #0
   21ffa:	d109      	bne.n	22010 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   21ffc:	697b      	ldr	r3, [r7, #20]
   21ffe:	2201      	movs	r2, #1
   22000:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   22002:	697b      	ldr	r3, [r7, #20]
   22004:	2202      	movs	r2, #2
   22006:	759a      	strb	r2, [r3, #22]
   22008:	e002      	b.n	22010 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2200a:	697b      	ldr	r3, [r7, #20]
   2200c:	2201      	movs	r2, #1
   2200e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   22010:	2312      	movs	r3, #18
   22012:	18fb      	adds	r3, r7, r3
   22014:	881b      	ldrh	r3, [r3, #0]
   22016:	2202      	movs	r2, #2
   22018:	4013      	ands	r3, r2
   2201a:	d011      	beq.n	22040 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2201c:	697b      	ldr	r3, [r7, #20]
   2201e:	2202      	movs	r2, #2
   22020:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   22022:	69bb      	ldr	r3, [r7, #24]
   22024:	2233      	movs	r2, #51	; 0x33
   22026:	2100      	movs	r1, #0
   22028:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2202a:	2310      	movs	r3, #16
   2202c:	18fb      	adds	r3, r7, r3
   2202e:	881b      	ldrh	r3, [r3, #0]
   22030:	2201      	movs	r2, #1
   22032:	4013      	ands	r3, r2
   22034:	d004      	beq.n	22040 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   22036:	69bb      	ldr	r3, [r7, #24]
   22038:	68db      	ldr	r3, [r3, #12]
   2203a:	69ba      	ldr	r2, [r7, #24]
   2203c:	0010      	movs	r0, r2
   2203e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   22040:	2312      	movs	r3, #18
   22042:	18fb      	adds	r3, r7, r3
   22044:	881b      	ldrh	r3, [r3, #0]
   22046:	2204      	movs	r2, #4
   22048:	4013      	ands	r3, r2
   2204a:	d100      	bne.n	2204e <_usart_interrupt_handler+0x132>
   2204c:	e0bd      	b.n	221ca <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2204e:	69bb      	ldr	r3, [r7, #24]
   22050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22052:	b29b      	uxth	r3, r3
   22054:	2b00      	cmp	r3, #0
   22056:	d100      	bne.n	2205a <_usart_interrupt_handler+0x13e>
   22058:	e0b4      	b.n	221c4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2205a:	697b      	ldr	r3, [r7, #20]
   2205c:	8b5b      	ldrh	r3, [r3, #26]
   2205e:	b29b      	uxth	r3, r3
   22060:	b2da      	uxtb	r2, r3
   22062:	231f      	movs	r3, #31
   22064:	18fb      	adds	r3, r7, r3
   22066:	213f      	movs	r1, #63	; 0x3f
   22068:	400a      	ands	r2, r1
   2206a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2206c:	231f      	movs	r3, #31
   2206e:	18fb      	adds	r3, r7, r3
   22070:	781b      	ldrb	r3, [r3, #0]
   22072:	2208      	movs	r2, #8
   22074:	4013      	ands	r3, r2
   22076:	d007      	beq.n	22088 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   22078:	231f      	movs	r3, #31
   2207a:	18fb      	adds	r3, r7, r3
   2207c:	221f      	movs	r2, #31
   2207e:	18ba      	adds	r2, r7, r2
   22080:	7812      	ldrb	r2, [r2, #0]
   22082:	2108      	movs	r1, #8
   22084:	438a      	bics	r2, r1
   22086:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   22088:	231f      	movs	r3, #31
   2208a:	18fb      	adds	r3, r7, r3
   2208c:	781b      	ldrb	r3, [r3, #0]
   2208e:	2b00      	cmp	r3, #0
   22090:	d050      	beq.n	22134 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   22092:	231f      	movs	r3, #31
   22094:	18fb      	adds	r3, r7, r3
   22096:	781b      	ldrb	r3, [r3, #0]
   22098:	2202      	movs	r2, #2
   2209a:	4013      	ands	r3, r2
   2209c:	d007      	beq.n	220ae <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2209e:	69bb      	ldr	r3, [r7, #24]
   220a0:	2232      	movs	r2, #50	; 0x32
   220a2:	211a      	movs	r1, #26
   220a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   220a6:	697b      	ldr	r3, [r7, #20]
   220a8:	2202      	movs	r2, #2
   220aa:	835a      	strh	r2, [r3, #26]
   220ac:	e036      	b.n	2211c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   220ae:	231f      	movs	r3, #31
   220b0:	18fb      	adds	r3, r7, r3
   220b2:	781b      	ldrb	r3, [r3, #0]
   220b4:	2204      	movs	r2, #4
   220b6:	4013      	ands	r3, r2
   220b8:	d007      	beq.n	220ca <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   220ba:	69bb      	ldr	r3, [r7, #24]
   220bc:	2232      	movs	r2, #50	; 0x32
   220be:	211e      	movs	r1, #30
   220c0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   220c2:	697b      	ldr	r3, [r7, #20]
   220c4:	2204      	movs	r2, #4
   220c6:	835a      	strh	r2, [r3, #26]
   220c8:	e028      	b.n	2211c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   220ca:	231f      	movs	r3, #31
   220cc:	18fb      	adds	r3, r7, r3
   220ce:	781b      	ldrb	r3, [r3, #0]
   220d0:	2201      	movs	r2, #1
   220d2:	4013      	ands	r3, r2
   220d4:	d007      	beq.n	220e6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   220d6:	69bb      	ldr	r3, [r7, #24]
   220d8:	2232      	movs	r2, #50	; 0x32
   220da:	2113      	movs	r1, #19
   220dc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   220de:	697b      	ldr	r3, [r7, #20]
   220e0:	2201      	movs	r2, #1
   220e2:	835a      	strh	r2, [r3, #26]
   220e4:	e01a      	b.n	2211c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   220e6:	231f      	movs	r3, #31
   220e8:	18fb      	adds	r3, r7, r3
   220ea:	781b      	ldrb	r3, [r3, #0]
   220ec:	2210      	movs	r2, #16
   220ee:	4013      	ands	r3, r2
   220f0:	d007      	beq.n	22102 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   220f2:	69bb      	ldr	r3, [r7, #24]
   220f4:	2232      	movs	r2, #50	; 0x32
   220f6:	2142      	movs	r1, #66	; 0x42
   220f8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   220fa:	697b      	ldr	r3, [r7, #20]
   220fc:	2210      	movs	r2, #16
   220fe:	835a      	strh	r2, [r3, #26]
   22100:	e00c      	b.n	2211c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22102:	231f      	movs	r3, #31
   22104:	18fb      	adds	r3, r7, r3
   22106:	781b      	ldrb	r3, [r3, #0]
   22108:	2220      	movs	r2, #32
   2210a:	4013      	ands	r3, r2
   2210c:	d006      	beq.n	2211c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2210e:	69bb      	ldr	r3, [r7, #24]
   22110:	2232      	movs	r2, #50	; 0x32
   22112:	2141      	movs	r1, #65	; 0x41
   22114:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22116:	697b      	ldr	r3, [r7, #20]
   22118:	2220      	movs	r2, #32
   2211a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2211c:	2310      	movs	r3, #16
   2211e:	18fb      	adds	r3, r7, r3
   22120:	881b      	ldrh	r3, [r3, #0]
   22122:	2204      	movs	r2, #4
   22124:	4013      	ands	r3, r2
				if (callback_status
   22126:	d050      	beq.n	221ca <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   22128:	69bb      	ldr	r3, [r7, #24]
   2212a:	695b      	ldr	r3, [r3, #20]
   2212c:	69ba      	ldr	r2, [r7, #24]
   2212e:	0010      	movs	r0, r2
   22130:	4798      	blx	r3
   22132:	e04a      	b.n	221ca <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   22134:	697b      	ldr	r3, [r7, #20]
   22136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   22138:	b29a      	uxth	r2, r3
   2213a:	230e      	movs	r3, #14
   2213c:	18fb      	adds	r3, r7, r3
   2213e:	05d2      	lsls	r2, r2, #23
   22140:	0dd2      	lsrs	r2, r2, #23
   22142:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   22144:	69bb      	ldr	r3, [r7, #24]
   22146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22148:	220e      	movs	r2, #14
   2214a:	18ba      	adds	r2, r7, r2
   2214c:	8812      	ldrh	r2, [r2, #0]
   2214e:	b2d2      	uxtb	r2, r2
   22150:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   22152:	69bb      	ldr	r3, [r7, #24]
   22154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22156:	1c5a      	adds	r2, r3, #1
   22158:	69bb      	ldr	r3, [r7, #24]
   2215a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2215c:	69bb      	ldr	r3, [r7, #24]
   2215e:	795b      	ldrb	r3, [r3, #5]
   22160:	2b01      	cmp	r3, #1
   22162:	d10d      	bne.n	22180 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   22164:	69bb      	ldr	r3, [r7, #24]
   22166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22168:	220e      	movs	r2, #14
   2216a:	18ba      	adds	r2, r7, r2
   2216c:	8812      	ldrh	r2, [r2, #0]
   2216e:	0a12      	lsrs	r2, r2, #8
   22170:	b292      	uxth	r2, r2
   22172:	b2d2      	uxtb	r2, r2
   22174:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   22176:	69bb      	ldr	r3, [r7, #24]
   22178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2217a:	1c5a      	adds	r2, r3, #1
   2217c:	69bb      	ldr	r3, [r7, #24]
   2217e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22180:	69bb      	ldr	r3, [r7, #24]
   22182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22184:	b29b      	uxth	r3, r3
   22186:	3b01      	subs	r3, #1
   22188:	b29b      	uxth	r3, r3
   2218a:	69ba      	ldr	r2, [r7, #24]
   2218c:	1c19      	adds	r1, r3, #0
   2218e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22190:	2b00      	cmp	r3, #0
   22192:	d11a      	bne.n	221ca <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22194:	697b      	ldr	r3, [r7, #20]
   22196:	2204      	movs	r2, #4
   22198:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2219a:	69bb      	ldr	r3, [r7, #24]
   2219c:	2232      	movs	r2, #50	; 0x32
   2219e:	2100      	movs	r1, #0
   221a0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   221a2:	2310      	movs	r3, #16
   221a4:	18fb      	adds	r3, r7, r3
   221a6:	881b      	ldrh	r3, [r3, #0]
   221a8:	2202      	movs	r2, #2
   221aa:	4013      	ands	r3, r2
					if (callback_status
   221ac:	d00d      	beq.n	221ca <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   221ae:	69bb      	ldr	r3, [r7, #24]
   221b0:	691b      	ldr	r3, [r3, #16]
   221b2:	69ba      	ldr	r2, [r7, #24]
   221b4:	0010      	movs	r0, r2
   221b6:	4798      	blx	r3
   221b8:	e007      	b.n	221ca <_usart_interrupt_handler+0x2ae>
   221ba:	46c0      	nop			; (mov r8, r8)
   221bc:	20000968 	.word	0x20000968
   221c0:	00021ef9 	.word	0x00021ef9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   221c4:	697b      	ldr	r3, [r7, #20]
   221c6:	2204      	movs	r2, #4
   221c8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   221ca:	2312      	movs	r3, #18
   221cc:	18fb      	adds	r3, r7, r3
   221ce:	881b      	ldrh	r3, [r3, #0]
   221d0:	2210      	movs	r2, #16
   221d2:	4013      	ands	r3, r2
   221d4:	d010      	beq.n	221f8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   221d6:	697b      	ldr	r3, [r7, #20]
   221d8:	2210      	movs	r2, #16
   221da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   221dc:	697b      	ldr	r3, [r7, #20]
   221de:	2210      	movs	r2, #16
   221e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   221e2:	2310      	movs	r3, #16
   221e4:	18fb      	adds	r3, r7, r3
   221e6:	881b      	ldrh	r3, [r3, #0]
   221e8:	2210      	movs	r2, #16
   221ea:	4013      	ands	r3, r2
   221ec:	d004      	beq.n	221f8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   221ee:	69bb      	ldr	r3, [r7, #24]
   221f0:	69db      	ldr	r3, [r3, #28]
   221f2:	69ba      	ldr	r2, [r7, #24]
   221f4:	0010      	movs	r0, r2
   221f6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   221f8:	2312      	movs	r3, #18
   221fa:	18fb      	adds	r3, r7, r3
   221fc:	881b      	ldrh	r3, [r3, #0]
   221fe:	2220      	movs	r2, #32
   22200:	4013      	ands	r3, r2
   22202:	d010      	beq.n	22226 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22204:	697b      	ldr	r3, [r7, #20]
   22206:	2220      	movs	r2, #32
   22208:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2220a:	697b      	ldr	r3, [r7, #20]
   2220c:	2220      	movs	r2, #32
   2220e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22210:	2310      	movs	r3, #16
   22212:	18fb      	adds	r3, r7, r3
   22214:	881b      	ldrh	r3, [r3, #0]
   22216:	2208      	movs	r2, #8
   22218:	4013      	ands	r3, r2
   2221a:	d004      	beq.n	22226 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2221c:	69bb      	ldr	r3, [r7, #24]
   2221e:	699b      	ldr	r3, [r3, #24]
   22220:	69ba      	ldr	r2, [r7, #24]
   22222:	0010      	movs	r0, r2
   22224:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   22226:	2312      	movs	r3, #18
   22228:	18fb      	adds	r3, r7, r3
   2222a:	881b      	ldrh	r3, [r3, #0]
   2222c:	2208      	movs	r2, #8
   2222e:	4013      	ands	r3, r2
   22230:	d010      	beq.n	22254 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   22232:	697b      	ldr	r3, [r7, #20]
   22234:	2208      	movs	r2, #8
   22236:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   22238:	697b      	ldr	r3, [r7, #20]
   2223a:	2208      	movs	r2, #8
   2223c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2223e:	2310      	movs	r3, #16
   22240:	18fb      	adds	r3, r7, r3
   22242:	881b      	ldrh	r3, [r3, #0]
   22244:	2220      	movs	r2, #32
   22246:	4013      	ands	r3, r2
   22248:	d004      	beq.n	22254 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2224a:	69bb      	ldr	r3, [r7, #24]
   2224c:	6a1b      	ldr	r3, [r3, #32]
   2224e:	69ba      	ldr	r2, [r7, #24]
   22250:	0010      	movs	r0, r2
   22252:	4798      	blx	r3
		}
	}
#endif
}
   22254:	46c0      	nop			; (mov r8, r8)
   22256:	46bd      	mov	sp, r7
   22258:	b008      	add	sp, #32
   2225a:	bd80      	pop	{r7, pc}

0002225c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2225c:	b580      	push	{r7, lr}
   2225e:	b082      	sub	sp, #8
   22260:	af00      	add	r7, sp, #0
   22262:	0002      	movs	r2, r0
   22264:	1dfb      	adds	r3, r7, #7
   22266:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   22268:	46c0      	nop			; (mov r8, r8)
   2226a:	46bd      	mov	sp, r7
   2226c:	b002      	add	sp, #8
   2226e:	bd80      	pop	{r7, pc}

00022270 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   22270:	b580      	push	{r7, lr}
   22272:	b084      	sub	sp, #16
   22274:	af00      	add	r7, sp, #0
   22276:	0002      	movs	r2, r0
   22278:	6039      	str	r1, [r7, #0]
   2227a:	1dfb      	adds	r3, r7, #7
   2227c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2227e:	4b13      	ldr	r3, [pc, #76]	; (222cc <_sercom_set_handler+0x5c>)
   22280:	781b      	ldrb	r3, [r3, #0]
   22282:	2201      	movs	r2, #1
   22284:	4053      	eors	r3, r2
   22286:	b2db      	uxtb	r3, r3
   22288:	2b00      	cmp	r3, #0
   2228a:	d015      	beq.n	222b8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2228c:	2300      	movs	r3, #0
   2228e:	60fb      	str	r3, [r7, #12]
   22290:	e00c      	b.n	222ac <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22292:	4b0f      	ldr	r3, [pc, #60]	; (222d0 <_sercom_set_handler+0x60>)
   22294:	68fa      	ldr	r2, [r7, #12]
   22296:	0092      	lsls	r2, r2, #2
   22298:	490e      	ldr	r1, [pc, #56]	; (222d4 <_sercom_set_handler+0x64>)
   2229a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2229c:	4b0e      	ldr	r3, [pc, #56]	; (222d8 <_sercom_set_handler+0x68>)
   2229e:	68fa      	ldr	r2, [r7, #12]
   222a0:	0092      	lsls	r2, r2, #2
   222a2:	2100      	movs	r1, #0
   222a4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   222a6:	68fb      	ldr	r3, [r7, #12]
   222a8:	3301      	adds	r3, #1
   222aa:	60fb      	str	r3, [r7, #12]
   222ac:	68fb      	ldr	r3, [r7, #12]
   222ae:	2b05      	cmp	r3, #5
   222b0:	d9ef      	bls.n	22292 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   222b2:	4b06      	ldr	r3, [pc, #24]	; (222cc <_sercom_set_handler+0x5c>)
   222b4:	2201      	movs	r2, #1
   222b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   222b8:	1dfb      	adds	r3, r7, #7
   222ba:	781a      	ldrb	r2, [r3, #0]
   222bc:	4b04      	ldr	r3, [pc, #16]	; (222d0 <_sercom_set_handler+0x60>)
   222be:	0092      	lsls	r2, r2, #2
   222c0:	6839      	ldr	r1, [r7, #0]
   222c2:	50d1      	str	r1, [r2, r3]
}
   222c4:	46c0      	nop			; (mov r8, r8)
   222c6:	46bd      	mov	sp, r7
   222c8:	b004      	add	sp, #16
   222ca:	bd80      	pop	{r7, pc}
   222cc:	200003f8 	.word	0x200003f8
   222d0:	200003fc 	.word	0x200003fc
   222d4:	0002225d 	.word	0x0002225d
   222d8:	20000968 	.word	0x20000968

000222dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   222dc:	b590      	push	{r4, r7, lr}
   222de:	b085      	sub	sp, #20
   222e0:	af00      	add	r7, sp, #0
   222e2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   222e4:	2308      	movs	r3, #8
   222e6:	18fb      	adds	r3, r7, r3
   222e8:	4a0b      	ldr	r2, [pc, #44]	; (22318 <_sercom_get_interrupt_vector+0x3c>)
   222ea:	6811      	ldr	r1, [r2, #0]
   222ec:	6019      	str	r1, [r3, #0]
   222ee:	8892      	ldrh	r2, [r2, #4]
   222f0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   222f2:	230f      	movs	r3, #15
   222f4:	18fc      	adds	r4, r7, r3
   222f6:	687b      	ldr	r3, [r7, #4]
   222f8:	0018      	movs	r0, r3
   222fa:	4b08      	ldr	r3, [pc, #32]	; (2231c <_sercom_get_interrupt_vector+0x40>)
   222fc:	4798      	blx	r3
   222fe:	0003      	movs	r3, r0
   22300:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22302:	230f      	movs	r3, #15
   22304:	18fb      	adds	r3, r7, r3
   22306:	781b      	ldrb	r3, [r3, #0]
   22308:	2208      	movs	r2, #8
   2230a:	18ba      	adds	r2, r7, r2
   2230c:	5cd3      	ldrb	r3, [r2, r3]
   2230e:	b25b      	sxtb	r3, r3
}
   22310:	0018      	movs	r0, r3
   22312:	46bd      	mov	sp, r7
   22314:	b005      	add	sp, #20
   22316:	bd90      	pop	{r4, r7, pc}
   22318:	0002abb4 	.word	0x0002abb4
   2231c:	0001eba1 	.word	0x0001eba1

00022320 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   22320:	b580      	push	{r7, lr}
   22322:	af00      	add	r7, sp, #0
   22324:	4b03      	ldr	r3, [pc, #12]	; (22334 <SERCOM0_Handler+0x14>)
   22326:	681b      	ldr	r3, [r3, #0]
   22328:	2000      	movs	r0, #0
   2232a:	4798      	blx	r3
   2232c:	46c0      	nop			; (mov r8, r8)
   2232e:	46bd      	mov	sp, r7
   22330:	bd80      	pop	{r7, pc}
   22332:	46c0      	nop			; (mov r8, r8)
   22334:	200003fc 	.word	0x200003fc

00022338 <SERCOM1_Handler>:
   22338:	b580      	push	{r7, lr}
   2233a:	af00      	add	r7, sp, #0
   2233c:	4b03      	ldr	r3, [pc, #12]	; (2234c <SERCOM1_Handler+0x14>)
   2233e:	685b      	ldr	r3, [r3, #4]
   22340:	2001      	movs	r0, #1
   22342:	4798      	blx	r3
   22344:	46c0      	nop			; (mov r8, r8)
   22346:	46bd      	mov	sp, r7
   22348:	bd80      	pop	{r7, pc}
   2234a:	46c0      	nop			; (mov r8, r8)
   2234c:	200003fc 	.word	0x200003fc

00022350 <SERCOM2_Handler>:
   22350:	b580      	push	{r7, lr}
   22352:	af00      	add	r7, sp, #0
   22354:	4b03      	ldr	r3, [pc, #12]	; (22364 <SERCOM2_Handler+0x14>)
   22356:	689b      	ldr	r3, [r3, #8]
   22358:	2002      	movs	r0, #2
   2235a:	4798      	blx	r3
   2235c:	46c0      	nop			; (mov r8, r8)
   2235e:	46bd      	mov	sp, r7
   22360:	bd80      	pop	{r7, pc}
   22362:	46c0      	nop			; (mov r8, r8)
   22364:	200003fc 	.word	0x200003fc

00022368 <SERCOM3_Handler>:
   22368:	b580      	push	{r7, lr}
   2236a:	af00      	add	r7, sp, #0
   2236c:	4b03      	ldr	r3, [pc, #12]	; (2237c <SERCOM3_Handler+0x14>)
   2236e:	68db      	ldr	r3, [r3, #12]
   22370:	2003      	movs	r0, #3
   22372:	4798      	blx	r3
   22374:	46c0      	nop			; (mov r8, r8)
   22376:	46bd      	mov	sp, r7
   22378:	bd80      	pop	{r7, pc}
   2237a:	46c0      	nop			; (mov r8, r8)
   2237c:	200003fc 	.word	0x200003fc

00022380 <SERCOM4_Handler>:
   22380:	b580      	push	{r7, lr}
   22382:	af00      	add	r7, sp, #0
   22384:	4b03      	ldr	r3, [pc, #12]	; (22394 <SERCOM4_Handler+0x14>)
   22386:	691b      	ldr	r3, [r3, #16]
   22388:	2004      	movs	r0, #4
   2238a:	4798      	blx	r3
   2238c:	46c0      	nop			; (mov r8, r8)
   2238e:	46bd      	mov	sp, r7
   22390:	bd80      	pop	{r7, pc}
   22392:	46c0      	nop			; (mov r8, r8)
   22394:	200003fc 	.word	0x200003fc

00022398 <SERCOM5_Handler>:
   22398:	b580      	push	{r7, lr}
   2239a:	af00      	add	r7, sp, #0
   2239c:	4b03      	ldr	r3, [pc, #12]	; (223ac <SERCOM5_Handler+0x14>)
   2239e:	695b      	ldr	r3, [r3, #20]
   223a0:	2005      	movs	r0, #5
   223a2:	4798      	blx	r3
   223a4:	46c0      	nop			; (mov r8, r8)
   223a6:	46bd      	mov	sp, r7
   223a8:	bd80      	pop	{r7, pc}
   223aa:	46c0      	nop			; (mov r8, r8)
   223ac:	200003fc 	.word	0x200003fc

000223b0 <_extint_get_eic_from_channel>:
{
   223b0:	b580      	push	{r7, lr}
   223b2:	b084      	sub	sp, #16
   223b4:	af00      	add	r7, sp, #0
   223b6:	0002      	movs	r2, r0
   223b8:	1dfb      	adds	r3, r7, #7
   223ba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   223bc:	230f      	movs	r3, #15
   223be:	18fb      	adds	r3, r7, r3
   223c0:	1dfa      	adds	r2, r7, #7
   223c2:	7812      	ldrb	r2, [r2, #0]
   223c4:	0952      	lsrs	r2, r2, #5
   223c6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   223c8:	230f      	movs	r3, #15
   223ca:	18fb      	adds	r3, r7, r3
   223cc:	781b      	ldrb	r3, [r3, #0]
   223ce:	2b00      	cmp	r3, #0
   223d0:	d10c      	bne.n	223ec <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   223d2:	4b09      	ldr	r3, [pc, #36]	; (223f8 <_extint_get_eic_from_channel+0x48>)
   223d4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   223d6:	230f      	movs	r3, #15
   223d8:	18fb      	adds	r3, r7, r3
   223da:	781b      	ldrb	r3, [r3, #0]
   223dc:	009b      	lsls	r3, r3, #2
   223de:	2210      	movs	r2, #16
   223e0:	4694      	mov	ip, r2
   223e2:	44bc      	add	ip, r7
   223e4:	4463      	add	r3, ip
   223e6:	3b08      	subs	r3, #8
   223e8:	681b      	ldr	r3, [r3, #0]
   223ea:	e000      	b.n	223ee <_extint_get_eic_from_channel+0x3e>
		return NULL;
   223ec:	2300      	movs	r3, #0
}
   223ee:	0018      	movs	r0, r3
   223f0:	46bd      	mov	sp, r7
   223f2:	b004      	add	sp, #16
   223f4:	bd80      	pop	{r7, pc}
   223f6:	46c0      	nop			; (mov r8, r8)
   223f8:	40001800 	.word	0x40001800

000223fc <extint_chan_is_detected>:
{
   223fc:	b580      	push	{r7, lr}
   223fe:	b084      	sub	sp, #16
   22400:	af00      	add	r7, sp, #0
   22402:	0002      	movs	r2, r0
   22404:	1dfb      	adds	r3, r7, #7
   22406:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22408:	1dfb      	adds	r3, r7, #7
   2240a:	781b      	ldrb	r3, [r3, #0]
   2240c:	0018      	movs	r0, r3
   2240e:	4b0b      	ldr	r3, [pc, #44]	; (2243c <extint_chan_is_detected+0x40>)
   22410:	4798      	blx	r3
   22412:	0003      	movs	r3, r0
   22414:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22416:	1dfb      	adds	r3, r7, #7
   22418:	781b      	ldrb	r3, [r3, #0]
   2241a:	221f      	movs	r2, #31
   2241c:	4013      	ands	r3, r2
   2241e:	2201      	movs	r2, #1
   22420:	409a      	lsls	r2, r3
   22422:	0013      	movs	r3, r2
   22424:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   22426:	68fb      	ldr	r3, [r7, #12]
   22428:	691b      	ldr	r3, [r3, #16]
   2242a:	68ba      	ldr	r2, [r7, #8]
   2242c:	4013      	ands	r3, r2
   2242e:	1e5a      	subs	r2, r3, #1
   22430:	4193      	sbcs	r3, r2
   22432:	b2db      	uxtb	r3, r3
}
   22434:	0018      	movs	r0, r3
   22436:	46bd      	mov	sp, r7
   22438:	b004      	add	sp, #16
   2243a:	bd80      	pop	{r7, pc}
   2243c:	000223b1 	.word	0x000223b1

00022440 <extint_chan_clear_detected>:
{
   22440:	b580      	push	{r7, lr}
   22442:	b084      	sub	sp, #16
   22444:	af00      	add	r7, sp, #0
   22446:	0002      	movs	r2, r0
   22448:	1dfb      	adds	r3, r7, #7
   2244a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2244c:	1dfb      	adds	r3, r7, #7
   2244e:	781b      	ldrb	r3, [r3, #0]
   22450:	0018      	movs	r0, r3
   22452:	4b09      	ldr	r3, [pc, #36]	; (22478 <extint_chan_clear_detected+0x38>)
   22454:	4798      	blx	r3
   22456:	0003      	movs	r3, r0
   22458:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2245a:	1dfb      	adds	r3, r7, #7
   2245c:	781b      	ldrb	r3, [r3, #0]
   2245e:	221f      	movs	r2, #31
   22460:	4013      	ands	r3, r2
   22462:	2201      	movs	r2, #1
   22464:	409a      	lsls	r2, r3
   22466:	0013      	movs	r3, r2
   22468:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   2246a:	68fb      	ldr	r3, [r7, #12]
   2246c:	68ba      	ldr	r2, [r7, #8]
   2246e:	611a      	str	r2, [r3, #16]
}
   22470:	46c0      	nop			; (mov r8, r8)
   22472:	46bd      	mov	sp, r7
   22474:	b004      	add	sp, #16
   22476:	bd80      	pop	{r7, pc}
   22478:	000223b1 	.word	0x000223b1

0002247c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2247c:	b580      	push	{r7, lr}
   2247e:	b082      	sub	sp, #8
   22480:	af00      	add	r7, sp, #0
   22482:	6078      	str	r0, [r7, #4]
   22484:	0008      	movs	r0, r1
   22486:	0011      	movs	r1, r2
   22488:	1cfb      	adds	r3, r7, #3
   2248a:	1c02      	adds	r2, r0, #0
   2248c:	701a      	strb	r2, [r3, #0]
   2248e:	1cbb      	adds	r3, r7, #2
   22490:	1c0a      	adds	r2, r1, #0
   22492:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22494:	1cbb      	adds	r3, r7, #2
   22496:	781b      	ldrb	r3, [r3, #0]
   22498:	2b00      	cmp	r3, #0
   2249a:	d001      	beq.n	224a0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2249c:	2317      	movs	r3, #23
   2249e:	e019      	b.n	224d4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   224a0:	1cfb      	adds	r3, r7, #3
   224a2:	781a      	ldrb	r2, [r3, #0]
   224a4:	4b0d      	ldr	r3, [pc, #52]	; (224dc <extint_register_callback+0x60>)
   224a6:	0092      	lsls	r2, r2, #2
   224a8:	58d3      	ldr	r3, [r2, r3]
   224aa:	2b00      	cmp	r3, #0
   224ac:	d107      	bne.n	224be <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   224ae:	1cfb      	adds	r3, r7, #3
   224b0:	781a      	ldrb	r2, [r3, #0]
   224b2:	4b0a      	ldr	r3, [pc, #40]	; (224dc <extint_register_callback+0x60>)
   224b4:	0092      	lsls	r2, r2, #2
   224b6:	6879      	ldr	r1, [r7, #4]
   224b8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   224ba:	2300      	movs	r3, #0
   224bc:	e00a      	b.n	224d4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   224be:	1cfb      	adds	r3, r7, #3
   224c0:	781a      	ldrb	r2, [r3, #0]
   224c2:	4b06      	ldr	r3, [pc, #24]	; (224dc <extint_register_callback+0x60>)
   224c4:	0092      	lsls	r2, r2, #2
   224c6:	58d2      	ldr	r2, [r2, r3]
   224c8:	687b      	ldr	r3, [r7, #4]
   224ca:	429a      	cmp	r2, r3
   224cc:	d101      	bne.n	224d2 <extint_register_callback+0x56>
		return STATUS_OK;
   224ce:	2300      	movs	r3, #0
   224d0:	e000      	b.n	224d4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   224d2:	231d      	movs	r3, #29
}
   224d4:	0018      	movs	r0, r3
   224d6:	46bd      	mov	sp, r7
   224d8:	b002      	add	sp, #8
   224da:	bd80      	pop	{r7, pc}
   224dc:	20000900 	.word	0x20000900

000224e0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   224e0:	b580      	push	{r7, lr}
   224e2:	b084      	sub	sp, #16
   224e4:	af00      	add	r7, sp, #0
   224e6:	0002      	movs	r2, r0
   224e8:	1dfb      	adds	r3, r7, #7
   224ea:	701a      	strb	r2, [r3, #0]
   224ec:	1dbb      	adds	r3, r7, #6
   224ee:	1c0a      	adds	r2, r1, #0
   224f0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   224f2:	1dbb      	adds	r3, r7, #6
   224f4:	781b      	ldrb	r3, [r3, #0]
   224f6:	2b00      	cmp	r3, #0
   224f8:	d10e      	bne.n	22518 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   224fa:	1dfb      	adds	r3, r7, #7
   224fc:	781b      	ldrb	r3, [r3, #0]
   224fe:	0018      	movs	r0, r3
   22500:	4b08      	ldr	r3, [pc, #32]	; (22524 <extint_chan_enable_callback+0x44>)
   22502:	4798      	blx	r3
   22504:	0003      	movs	r3, r0
   22506:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22508:	1dfb      	adds	r3, r7, #7
   2250a:	781b      	ldrb	r3, [r3, #0]
   2250c:	2201      	movs	r2, #1
   2250e:	409a      	lsls	r2, r3
   22510:	68fb      	ldr	r3, [r7, #12]
   22512:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22514:	2300      	movs	r3, #0
   22516:	e000      	b.n	2251a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22518:	2317      	movs	r3, #23
}
   2251a:	0018      	movs	r0, r3
   2251c:	46bd      	mov	sp, r7
   2251e:	b004      	add	sp, #16
   22520:	bd80      	pop	{r7, pc}
   22522:	46c0      	nop			; (mov r8, r8)
   22524:	000223b1 	.word	0x000223b1

00022528 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22528:	b580      	push	{r7, lr}
   2252a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2252c:	4b15      	ldr	r3, [pc, #84]	; (22584 <EIC_Handler+0x5c>)
   2252e:	2200      	movs	r2, #0
   22530:	701a      	strb	r2, [r3, #0]
   22532:	e020      	b.n	22576 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   22534:	4b13      	ldr	r3, [pc, #76]	; (22584 <EIC_Handler+0x5c>)
   22536:	781b      	ldrb	r3, [r3, #0]
   22538:	0018      	movs	r0, r3
   2253a:	4b13      	ldr	r3, [pc, #76]	; (22588 <EIC_Handler+0x60>)
   2253c:	4798      	blx	r3
   2253e:	1e03      	subs	r3, r0, #0
   22540:	d013      	beq.n	2256a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   22542:	4b10      	ldr	r3, [pc, #64]	; (22584 <EIC_Handler+0x5c>)
   22544:	781b      	ldrb	r3, [r3, #0]
   22546:	0018      	movs	r0, r3
   22548:	4b10      	ldr	r3, [pc, #64]	; (2258c <EIC_Handler+0x64>)
   2254a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2254c:	4b0d      	ldr	r3, [pc, #52]	; (22584 <EIC_Handler+0x5c>)
   2254e:	781b      	ldrb	r3, [r3, #0]
   22550:	001a      	movs	r2, r3
   22552:	4b0f      	ldr	r3, [pc, #60]	; (22590 <EIC_Handler+0x68>)
   22554:	0092      	lsls	r2, r2, #2
   22556:	58d3      	ldr	r3, [r2, r3]
   22558:	2b00      	cmp	r3, #0
   2255a:	d006      	beq.n	2256a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2255c:	4b09      	ldr	r3, [pc, #36]	; (22584 <EIC_Handler+0x5c>)
   2255e:	781b      	ldrb	r3, [r3, #0]
   22560:	001a      	movs	r2, r3
   22562:	4b0b      	ldr	r3, [pc, #44]	; (22590 <EIC_Handler+0x68>)
   22564:	0092      	lsls	r2, r2, #2
   22566:	58d3      	ldr	r3, [r2, r3]
   22568:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2256a:	4b06      	ldr	r3, [pc, #24]	; (22584 <EIC_Handler+0x5c>)
   2256c:	781b      	ldrb	r3, [r3, #0]
   2256e:	3301      	adds	r3, #1
   22570:	b2da      	uxtb	r2, r3
   22572:	4b04      	ldr	r3, [pc, #16]	; (22584 <EIC_Handler+0x5c>)
   22574:	701a      	strb	r2, [r3, #0]
   22576:	4b03      	ldr	r3, [pc, #12]	; (22584 <EIC_Handler+0x5c>)
   22578:	781b      	ldrb	r3, [r3, #0]
   2257a:	2b0f      	cmp	r3, #15
   2257c:	d9da      	bls.n	22534 <EIC_Handler+0xc>
			}
		}
	}
}
   2257e:	46c0      	nop			; (mov r8, r8)
   22580:	46bd      	mov	sp, r7
   22582:	bd80      	pop	{r7, pc}
   22584:	20000980 	.word	0x20000980
   22588:	000223fd 	.word	0x000223fd
   2258c:	00022441 	.word	0x00022441
   22590:	20000900 	.word	0x20000900

00022594 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22594:	b580      	push	{r7, lr}
   22596:	b082      	sub	sp, #8
   22598:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   2259a:	4b15      	ldr	r3, [pc, #84]	; (225f0 <EVSYS_Handler+0x5c>)
   2259c:	691b      	ldr	r3, [r3, #16]
   2259e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   225a0:	4b14      	ldr	r3, [pc, #80]	; (225f4 <EVSYS_Handler+0x60>)
   225a2:	699b      	ldr	r3, [r3, #24]
   225a4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   225a6:	4b12      	ldr	r3, [pc, #72]	; (225f0 <EVSYS_Handler+0x5c>)
   225a8:	689a      	ldr	r2, [r3, #8]
   225aa:	683b      	ldr	r3, [r7, #0]
   225ac:	431a      	orrs	r2, r3
   225ae:	4b10      	ldr	r3, [pc, #64]	; (225f0 <EVSYS_Handler+0x5c>)
   225b0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   225b2:	4b10      	ldr	r3, [pc, #64]	; (225f4 <EVSYS_Handler+0x60>)
   225b4:	4a10      	ldr	r2, [pc, #64]	; (225f8 <EVSYS_Handler+0x64>)
   225b6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   225b8:	e008      	b.n	225cc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   225ba:	687b      	ldr	r3, [r7, #4]
   225bc:	685a      	ldr	r2, [r3, #4]
   225be:	687b      	ldr	r3, [r7, #4]
   225c0:	681b      	ldr	r3, [r3, #0]
   225c2:	0018      	movs	r0, r3
   225c4:	4790      	blx	r2
		current_hook = current_hook->next;
   225c6:	687b      	ldr	r3, [r7, #4]
   225c8:	689b      	ldr	r3, [r3, #8]
   225ca:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   225cc:	687b      	ldr	r3, [r7, #4]
   225ce:	2b00      	cmp	r3, #0
   225d0:	d1f3      	bne.n	225ba <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   225d2:	4b07      	ldr	r3, [pc, #28]	; (225f0 <EVSYS_Handler+0x5c>)
   225d4:	68db      	ldr	r3, [r3, #12]
   225d6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   225d8:	4b05      	ldr	r3, [pc, #20]	; (225f0 <EVSYS_Handler+0x5c>)
   225da:	689b      	ldr	r3, [r3, #8]
   225dc:	683a      	ldr	r2, [r7, #0]
   225de:	43d2      	mvns	r2, r2
   225e0:	401a      	ands	r2, r3
   225e2:	4b03      	ldr	r3, [pc, #12]	; (225f0 <EVSYS_Handler+0x5c>)
   225e4:	609a      	str	r2, [r3, #8]
}
   225e6:	46c0      	nop			; (mov r8, r8)
   225e8:	46bd      	mov	sp, r7
   225ea:	b002      	add	sp, #8
   225ec:	bd80      	pop	{r7, pc}
   225ee:	46c0      	nop			; (mov r8, r8)
   225f0:	20000014 	.word	0x20000014
   225f4:	42000400 	.word	0x42000400
   225f8:	0f0fffff 	.word	0x0f0fffff

000225fc <system_gclk_chan_get_config_defaults>:
{
   225fc:	b580      	push	{r7, lr}
   225fe:	b082      	sub	sp, #8
   22600:	af00      	add	r7, sp, #0
   22602:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22604:	687b      	ldr	r3, [r7, #4]
   22606:	2200      	movs	r2, #0
   22608:	701a      	strb	r2, [r3, #0]
}
   2260a:	46c0      	nop			; (mov r8, r8)
   2260c:	46bd      	mov	sp, r7
   2260e:	b002      	add	sp, #8
   22610:	bd80      	pop	{r7, pc}
	...

00022614 <system_apb_clock_set_mask>:
{
   22614:	b580      	push	{r7, lr}
   22616:	b082      	sub	sp, #8
   22618:	af00      	add	r7, sp, #0
   2261a:	0002      	movs	r2, r0
   2261c:	6039      	str	r1, [r7, #0]
   2261e:	1dfb      	adds	r3, r7, #7
   22620:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   22622:	1dfb      	adds	r3, r7, #7
   22624:	781b      	ldrb	r3, [r3, #0]
   22626:	2b01      	cmp	r3, #1
   22628:	d00a      	beq.n	22640 <system_apb_clock_set_mask+0x2c>
   2262a:	2b02      	cmp	r3, #2
   2262c:	d00f      	beq.n	2264e <system_apb_clock_set_mask+0x3a>
   2262e:	2b00      	cmp	r3, #0
   22630:	d114      	bne.n	2265c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   22632:	4b0e      	ldr	r3, [pc, #56]	; (2266c <system_apb_clock_set_mask+0x58>)
   22634:	4a0d      	ldr	r2, [pc, #52]	; (2266c <system_apb_clock_set_mask+0x58>)
   22636:	6991      	ldr	r1, [r2, #24]
   22638:	683a      	ldr	r2, [r7, #0]
   2263a:	430a      	orrs	r2, r1
   2263c:	619a      	str	r2, [r3, #24]
			break;
   2263e:	e00f      	b.n	22660 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   22640:	4b0a      	ldr	r3, [pc, #40]	; (2266c <system_apb_clock_set_mask+0x58>)
   22642:	4a0a      	ldr	r2, [pc, #40]	; (2266c <system_apb_clock_set_mask+0x58>)
   22644:	69d1      	ldr	r1, [r2, #28]
   22646:	683a      	ldr	r2, [r7, #0]
   22648:	430a      	orrs	r2, r1
   2264a:	61da      	str	r2, [r3, #28]
			break;
   2264c:	e008      	b.n	22660 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2264e:	4b07      	ldr	r3, [pc, #28]	; (2266c <system_apb_clock_set_mask+0x58>)
   22650:	4a06      	ldr	r2, [pc, #24]	; (2266c <system_apb_clock_set_mask+0x58>)
   22652:	6a11      	ldr	r1, [r2, #32]
   22654:	683a      	ldr	r2, [r7, #0]
   22656:	430a      	orrs	r2, r1
   22658:	621a      	str	r2, [r3, #32]
			break;
   2265a:	e001      	b.n	22660 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2265c:	2317      	movs	r3, #23
   2265e:	e000      	b.n	22662 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22660:	2300      	movs	r3, #0
}
   22662:	0018      	movs	r0, r3
   22664:	46bd      	mov	sp, r7
   22666:	b002      	add	sp, #8
   22668:	bd80      	pop	{r7, pc}
   2266a:	46c0      	nop			; (mov r8, r8)
   2266c:	40000400 	.word	0x40000400

00022670 <system_interrupt_enter_critical_section>:
{
   22670:	b580      	push	{r7, lr}
   22672:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   22674:	4b02      	ldr	r3, [pc, #8]	; (22680 <system_interrupt_enter_critical_section+0x10>)
   22676:	4798      	blx	r3
}
   22678:	46c0      	nop			; (mov r8, r8)
   2267a:	46bd      	mov	sp, r7
   2267c:	bd80      	pop	{r7, pc}
   2267e:	46c0      	nop			; (mov r8, r8)
   22680:	00023c7d 	.word	0x00023c7d

00022684 <system_interrupt_leave_critical_section>:
{
   22684:	b580      	push	{r7, lr}
   22686:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   22688:	4b02      	ldr	r3, [pc, #8]	; (22694 <system_interrupt_leave_critical_section+0x10>)
   2268a:	4798      	blx	r3
}
   2268c:	46c0      	nop			; (mov r8, r8)
   2268e:	46bd      	mov	sp, r7
   22690:	bd80      	pop	{r7, pc}
   22692:	46c0      	nop			; (mov r8, r8)
   22694:	00023cd1 	.word	0x00023cd1

00022698 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   22698:	b580      	push	{r7, lr}
   2269a:	b084      	sub	sp, #16
   2269c:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   2269e:	1dfb      	adds	r3, r7, #7
   226a0:	2200      	movs	r2, #0
   226a2:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   226a4:	4b21      	ldr	r3, [pc, #132]	; (2272c <_events_find_first_free_channel_and_allocate+0x94>)
   226a6:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   226a8:	4b21      	ldr	r3, [pc, #132]	; (22730 <_events_find_first_free_channel_and_allocate+0x98>)
   226aa:	681b      	ldr	r3, [r3, #0]
   226ac:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   226ae:	230f      	movs	r3, #15
   226b0:	18fb      	adds	r3, r7, r3
   226b2:	2200      	movs	r2, #0
   226b4:	701a      	strb	r2, [r3, #0]
   226b6:	e022      	b.n	226fe <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   226b8:	68bb      	ldr	r3, [r7, #8]
   226ba:	2201      	movs	r2, #1
   226bc:	4013      	ands	r3, r2
   226be:	d114      	bne.n	226ea <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   226c0:	4b1b      	ldr	r3, [pc, #108]	; (22730 <_events_find_first_free_channel_and_allocate+0x98>)
   226c2:	681b      	ldr	r3, [r3, #0]
   226c4:	220f      	movs	r2, #15
   226c6:	18ba      	adds	r2, r7, r2
   226c8:	7812      	ldrb	r2, [r2, #0]
   226ca:	2101      	movs	r1, #1
   226cc:	4091      	lsls	r1, r2
   226ce:	000a      	movs	r2, r1
   226d0:	431a      	orrs	r2, r3
   226d2:	4b17      	ldr	r3, [pc, #92]	; (22730 <_events_find_first_free_channel_and_allocate+0x98>)
   226d4:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   226d6:	4b16      	ldr	r3, [pc, #88]	; (22730 <_events_find_first_free_channel_and_allocate+0x98>)
   226d8:	791b      	ldrb	r3, [r3, #4]
   226da:	3b01      	subs	r3, #1
   226dc:	b2da      	uxtb	r2, r3
   226de:	4b14      	ldr	r3, [pc, #80]	; (22730 <_events_find_first_free_channel_and_allocate+0x98>)
   226e0:	711a      	strb	r2, [r3, #4]
			allocated = true;
   226e2:	1dfb      	adds	r3, r7, #7
   226e4:	2201      	movs	r2, #1
   226e6:	701a      	strb	r2, [r3, #0]

			break;
   226e8:	e00e      	b.n	22708 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   226ea:	68bb      	ldr	r3, [r7, #8]
   226ec:	085b      	lsrs	r3, r3, #1
   226ee:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   226f0:	230f      	movs	r3, #15
   226f2:	18fb      	adds	r3, r7, r3
   226f4:	220f      	movs	r2, #15
   226f6:	18ba      	adds	r2, r7, r2
   226f8:	7812      	ldrb	r2, [r2, #0]
   226fa:	3201      	adds	r2, #1
   226fc:	701a      	strb	r2, [r3, #0]
   226fe:	230f      	movs	r3, #15
   22700:	18fb      	adds	r3, r7, r3
   22702:	781b      	ldrb	r3, [r3, #0]
   22704:	2b0b      	cmp	r3, #11
   22706:	d9d7      	bls.n	226b8 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   22708:	4b0a      	ldr	r3, [pc, #40]	; (22734 <_events_find_first_free_channel_and_allocate+0x9c>)
   2270a:	4798      	blx	r3

	if(!allocated) {
   2270c:	1dfb      	adds	r3, r7, #7
   2270e:	781b      	ldrb	r3, [r3, #0]
   22710:	2201      	movs	r2, #1
   22712:	4053      	eors	r3, r2
   22714:	b2db      	uxtb	r3, r3
   22716:	2b00      	cmp	r3, #0
   22718:	d001      	beq.n	2271e <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   2271a:	23ff      	movs	r3, #255	; 0xff
   2271c:	e002      	b.n	22724 <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   2271e:	230f      	movs	r3, #15
   22720:	18fb      	adds	r3, r7, r3
   22722:	781b      	ldrb	r3, [r3, #0]
	}
}
   22724:	0018      	movs	r0, r3
   22726:	46bd      	mov	sp, r7
   22728:	b004      	add	sp, #16
   2272a:	bd80      	pop	{r7, pc}
   2272c:	00022671 	.word	0x00022671
   22730:	20000014 	.word	0x20000014
   22734:	00022685 	.word	0x00022685

00022738 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   22738:	b580      	push	{r7, lr}
   2273a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   2273c:	2102      	movs	r1, #2
   2273e:	2002      	movs	r0, #2
   22740:	4b07      	ldr	r3, [pc, #28]	; (22760 <_system_events_init+0x28>)
   22742:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   22744:	4b07      	ldr	r3, [pc, #28]	; (22764 <_system_events_init+0x2c>)
   22746:	2201      	movs	r2, #1
   22748:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   2274a:	46c0      	nop			; (mov r8, r8)
   2274c:	4b05      	ldr	r3, [pc, #20]	; (22764 <_system_events_init+0x2c>)
   2274e:	781b      	ldrb	r3, [r3, #0]
   22750:	b2db      	uxtb	r3, r3
   22752:	001a      	movs	r2, r3
   22754:	2301      	movs	r3, #1
   22756:	4013      	ands	r3, r2
   22758:	d1f8      	bne.n	2274c <_system_events_init+0x14>
	}
}
   2275a:	46c0      	nop			; (mov r8, r8)
   2275c:	46bd      	mov	sp, r7
   2275e:	bd80      	pop	{r7, pc}
   22760:	00022615 	.word	0x00022615
   22764:	42000400 	.word	0x42000400

00022768 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   22768:	b580      	push	{r7, lr}
   2276a:	b082      	sub	sp, #8
   2276c:	af00      	add	r7, sp, #0
   2276e:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   22770:	687b      	ldr	r3, [r7, #4]
   22772:	2201      	movs	r2, #1
   22774:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   22776:	687b      	ldr	r3, [r7, #4]
   22778:	2200      	movs	r2, #0
   2277a:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   2277c:	687b      	ldr	r3, [r7, #4]
   2277e:	2200      	movs	r2, #0
   22780:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   22782:	687b      	ldr	r3, [r7, #4]
   22784:	2200      	movs	r2, #0
   22786:	70da      	strb	r2, [r3, #3]
}
   22788:	46c0      	nop			; (mov r8, r8)
   2278a:	46bd      	mov	sp, r7
   2278c:	b002      	add	sp, #8
   2278e:	bd80      	pop	{r7, pc}

00022790 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   22790:	b590      	push	{r4, r7, lr}
   22792:	b085      	sub	sp, #20
   22794:	af00      	add	r7, sp, #0
   22796:	6078      	str	r0, [r7, #4]
   22798:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   2279a:	230f      	movs	r3, #15
   2279c:	18fc      	adds	r4, r7, r3
   2279e:	4b2a      	ldr	r3, [pc, #168]	; (22848 <events_allocate+0xb8>)
   227a0:	4798      	blx	r3
   227a2:	0003      	movs	r3, r0
   227a4:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   227a6:	230f      	movs	r3, #15
   227a8:	18fb      	adds	r3, r7, r3
   227aa:	781b      	ldrb	r3, [r3, #0]
   227ac:	2bff      	cmp	r3, #255	; 0xff
   227ae:	d101      	bne.n	227b4 <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   227b0:	2314      	movs	r3, #20
   227b2:	e045      	b.n	22840 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   227b4:	687b      	ldr	r3, [r7, #4]
   227b6:	220f      	movs	r2, #15
   227b8:	18ba      	adds	r2, r7, r2
   227ba:	7812      	ldrb	r2, [r2, #0]
   227bc:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   227be:	683b      	ldr	r3, [r7, #0]
   227c0:	785b      	ldrb	r3, [r3, #1]
   227c2:	2b02      	cmp	r3, #2
   227c4:	d01c      	beq.n	22800 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   227c6:	230c      	movs	r3, #12
   227c8:	18fb      	adds	r3, r7, r3
   227ca:	0018      	movs	r0, r3
   227cc:	4b1f      	ldr	r3, [pc, #124]	; (2284c <events_allocate+0xbc>)
   227ce:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   227d0:	683b      	ldr	r3, [r7, #0]
   227d2:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   227d4:	230c      	movs	r3, #12
   227d6:	18fb      	adds	r3, r7, r3
   227d8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   227da:	230f      	movs	r3, #15
   227dc:	18fb      	adds	r3, r7, r3
   227de:	781b      	ldrb	r3, [r3, #0]
   227e0:	3307      	adds	r3, #7
   227e2:	b2db      	uxtb	r3, r3
   227e4:	220c      	movs	r2, #12
   227e6:	18ba      	adds	r2, r7, r2
   227e8:	0011      	movs	r1, r2
   227ea:	0018      	movs	r0, r3
   227ec:	4b18      	ldr	r3, [pc, #96]	; (22850 <events_allocate+0xc0>)
   227ee:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   227f0:	230f      	movs	r3, #15
   227f2:	18fb      	adds	r3, r7, r3
   227f4:	781b      	ldrb	r3, [r3, #0]
   227f6:	3307      	adds	r3, #7
   227f8:	b2db      	uxtb	r3, r3
   227fa:	0018      	movs	r0, r3
   227fc:	4b15      	ldr	r3, [pc, #84]	; (22854 <events_allocate+0xc4>)
   227fe:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22800:	230f      	movs	r3, #15
   22802:	18fb      	adds	r3, r7, r3
   22804:	781b      	ldrb	r3, [r3, #0]
   22806:	220f      	movs	r2, #15
   22808:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   2280a:	683b      	ldr	r3, [r7, #0]
   2280c:	789b      	ldrb	r3, [r3, #2]
   2280e:	041b      	lsls	r3, r3, #16
   22810:	0019      	movs	r1, r3
   22812:	23fe      	movs	r3, #254	; 0xfe
   22814:	03db      	lsls	r3, r3, #15
   22816:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   22818:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   2281a:	683b      	ldr	r3, [r7, #0]
   2281c:	785b      	ldrb	r3, [r3, #1]
   2281e:	061b      	lsls	r3, r3, #24
   22820:	0019      	movs	r1, r3
   22822:	23c0      	movs	r3, #192	; 0xc0
   22824:	049b      	lsls	r3, r3, #18
   22826:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   22828:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   2282a:	683b      	ldr	r3, [r7, #0]
   2282c:	781b      	ldrb	r3, [r3, #0]
   2282e:	069b      	lsls	r3, r3, #26
   22830:	0019      	movs	r1, r3
   22832:	23c0      	movs	r3, #192	; 0xc0
   22834:	051b      	lsls	r3, r3, #20
   22836:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   22838:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   2283a:	687b      	ldr	r3, [r7, #4]
   2283c:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   2283e:	2300      	movs	r3, #0
}
   22840:	0018      	movs	r0, r3
   22842:	46bd      	mov	sp, r7
   22844:	b005      	add	sp, #20
   22846:	bd90      	pop	{r4, r7, pc}
   22848:	00022699 	.word	0x00022699
   2284c:	000225fd 	.word	0x000225fd
   22850:	00024a35 	.word	0x00024a35
   22854:	00024a79 	.word	0x00024a79

00022858 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   22858:	b580      	push	{r7, lr}
   2285a:	b082      	sub	sp, #8
   2285c:	af00      	add	r7, sp, #0
   2285e:	6078      	str	r0, [r7, #4]
   22860:	000a      	movs	r2, r1
   22862:	1cfb      	adds	r3, r7, #3
   22864:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   22866:	490f      	ldr	r1, [pc, #60]	; (228a4 <events_attach_user+0x4c>)
   22868:	687b      	ldr	r3, [r7, #4]
   2286a:	781b      	ldrb	r3, [r3, #0]
   2286c:	b29b      	uxth	r3, r3
   2286e:	3301      	adds	r3, #1
   22870:	b29b      	uxth	r3, r3
   22872:	021b      	lsls	r3, r3, #8
   22874:	b29a      	uxth	r2, r3
   22876:	23f8      	movs	r3, #248	; 0xf8
   22878:	015b      	lsls	r3, r3, #5
   2287a:	4013      	ands	r3, r2
   2287c:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   2287e:	1cfb      	adds	r3, r7, #3
   22880:	781b      	ldrb	r3, [r3, #0]
   22882:	b29b      	uxth	r3, r3
   22884:	201f      	movs	r0, #31
   22886:	4003      	ands	r3, r0
   22888:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   2288a:	4313      	orrs	r3, r2
   2288c:	b29b      	uxth	r3, r3
   2288e:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   22890:	4a04      	ldr	r2, [pc, #16]	; (228a4 <events_attach_user+0x4c>)
   22892:	687b      	ldr	r3, [r7, #4]
   22894:	685b      	ldr	r3, [r3, #4]
   22896:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   22898:	2300      	movs	r3, #0
}
   2289a:	0018      	movs	r0, r3
   2289c:	46bd      	mov	sp, r7
   2289e:	b002      	add	sp, #8
   228a0:	bd80      	pop	{r7, pc}
   228a2:	46c0      	nop			; (mov r8, r8)
   228a4:	42000400 	.word	0x42000400

000228a8 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   228a8:	b580      	push	{r7, lr}
   228aa:	b084      	sub	sp, #16
   228ac:	af00      	add	r7, sp, #0
   228ae:	60f8      	str	r0, [r7, #12]
   228b0:	60b9      	str	r1, [r7, #8]
   228b2:	1dfb      	adds	r3, r7, #7
   228b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   228b6:	1dfb      	adds	r3, r7, #7
   228b8:	781b      	ldrb	r3, [r3, #0]
   228ba:	68fa      	ldr	r2, [r7, #12]
   228bc:	009b      	lsls	r3, r3, #2
   228be:	18d3      	adds	r3, r2, r3
   228c0:	3304      	adds	r3, #4
   228c2:	68ba      	ldr	r2, [r7, #8]
   228c4:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   228c6:	68fb      	ldr	r3, [r7, #12]
   228c8:	7e1b      	ldrb	r3, [r3, #24]
   228ca:	b25a      	sxtb	r2, r3
   228cc:	1dfb      	adds	r3, r7, #7
   228ce:	781b      	ldrb	r3, [r3, #0]
   228d0:	2101      	movs	r1, #1
   228d2:	4099      	lsls	r1, r3
   228d4:	000b      	movs	r3, r1
   228d6:	b25b      	sxtb	r3, r3
   228d8:	4313      	orrs	r3, r2
   228da:	b25b      	sxtb	r3, r3
   228dc:	b2da      	uxtb	r2, r3
   228de:	68fb      	ldr	r3, [r7, #12]
   228e0:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   228e2:	2300      	movs	r3, #0
}
   228e4:	0018      	movs	r0, r3
   228e6:	46bd      	mov	sp, r7
   228e8:	b004      	add	sp, #16
   228ea:	bd80      	pop	{r7, pc}

000228ec <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   228ec:	b580      	push	{r7, lr}
   228ee:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   228f0:	2000      	movs	r0, #0
   228f2:	4b02      	ldr	r3, [pc, #8]	; (228fc <AC_Handler+0x10>)
   228f4:	4798      	blx	r3
}
   228f6:	46c0      	nop			; (mov r8, r8)
   228f8:	46bd      	mov	sp, r7
   228fa:	bd80      	pop	{r7, pc}
   228fc:	00022901 	.word	0x00022901

00022900 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   22900:	b580      	push	{r7, lr}
   22902:	b084      	sub	sp, #16
   22904:	af00      	add	r7, sp, #0
   22906:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   22908:	4b23      	ldr	r3, [pc, #140]	; (22998 <_ac_interrupt_handler+0x98>)
   2290a:	687a      	ldr	r2, [r7, #4]
   2290c:	0092      	lsls	r2, r2, #2
   2290e:	58d3      	ldr	r3, [r2, r3]
   22910:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   22912:	4b21      	ldr	r3, [pc, #132]	; (22998 <_ac_interrupt_handler+0x98>)
   22914:	687a      	ldr	r2, [r7, #4]
   22916:	0092      	lsls	r2, r2, #2
   22918:	58d3      	ldr	r3, [r2, r3]
   2291a:	681b      	ldr	r3, [r3, #0]
   2291c:	799b      	ldrb	r3, [r3, #6]
   2291e:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   22920:	68fb      	ldr	r3, [r7, #12]
   22922:	7e1b      	ldrb	r3, [r3, #24]
   22924:	68f9      	ldr	r1, [r7, #12]
   22926:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   22928:	400b      	ands	r3, r1
   2292a:	b2d9      	uxtb	r1, r3
   2292c:	230b      	movs	r3, #11
   2292e:	18fb      	adds	r3, r7, r3
   22930:	400a      	ands	r2, r1
   22932:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   22934:	230b      	movs	r3, #11
   22936:	18fb      	adds	r3, r7, r3
   22938:	781b      	ldrb	r3, [r3, #0]
   2293a:	2201      	movs	r2, #1
   2293c:	4013      	ands	r3, r2
   2293e:	d008      	beq.n	22952 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   22940:	68fb      	ldr	r3, [r7, #12]
   22942:	685b      	ldr	r3, [r3, #4]
   22944:	68fa      	ldr	r2, [r7, #12]
   22946:	0010      	movs	r0, r2
   22948:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   2294a:	68fb      	ldr	r3, [r7, #12]
   2294c:	681b      	ldr	r3, [r3, #0]
   2294e:	2201      	movs	r2, #1
   22950:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   22952:	230b      	movs	r3, #11
   22954:	18fb      	adds	r3, r7, r3
   22956:	781b      	ldrb	r3, [r3, #0]
   22958:	2202      	movs	r2, #2
   2295a:	4013      	ands	r3, r2
   2295c:	d008      	beq.n	22970 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   2295e:	68fb      	ldr	r3, [r7, #12]
   22960:	689b      	ldr	r3, [r3, #8]
   22962:	68fa      	ldr	r2, [r7, #12]
   22964:	0010      	movs	r0, r2
   22966:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   22968:	68fb      	ldr	r3, [r7, #12]
   2296a:	681b      	ldr	r3, [r3, #0]
   2296c:	2202      	movs	r2, #2
   2296e:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   22970:	230b      	movs	r3, #11
   22972:	18fb      	adds	r3, r7, r3
   22974:	781b      	ldrb	r3, [r3, #0]
   22976:	2210      	movs	r2, #16
   22978:	4013      	ands	r3, r2
   2297a:	d008      	beq.n	2298e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   2297c:	68fb      	ldr	r3, [r7, #12]
   2297e:	695b      	ldr	r3, [r3, #20]
   22980:	68fa      	ldr	r2, [r7, #12]
   22982:	0010      	movs	r0, r2
   22984:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   22986:	68fb      	ldr	r3, [r7, #12]
   22988:	681b      	ldr	r3, [r3, #0]
   2298a:	2210      	movs	r2, #16
   2298c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2298e:	46c0      	nop			; (mov r8, r8)
   22990:	46bd      	mov	sp, r7
   22992:	b004      	add	sp, #16
   22994:	bd80      	pop	{r7, pc}
   22996:	46c0      	nop			; (mov r8, r8)
   22998:	20000984 	.word	0x20000984

0002299c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2299c:	b580      	push	{r7, lr}
   2299e:	af00      	add	r7, sp, #0
}
   229a0:	46c0      	nop			; (mov r8, r8)
   229a2:	46bd      	mov	sp, r7
   229a4:	bd80      	pop	{r7, pc}
	...

000229a8 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   229a8:	b580      	push	{r7, lr}
   229aa:	b082      	sub	sp, #8
   229ac:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   229ae:	4b07      	ldr	r3, [pc, #28]	; (229cc <nvm_is_ready+0x24>)
   229b0:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   229b2:	687b      	ldr	r3, [r7, #4]
   229b4:	7d1b      	ldrb	r3, [r3, #20]
   229b6:	b2db      	uxtb	r3, r3
   229b8:	001a      	movs	r2, r3
   229ba:	2301      	movs	r3, #1
   229bc:	4013      	ands	r3, r2
   229be:	1e5a      	subs	r2, r3, #1
   229c0:	4193      	sbcs	r3, r2
   229c2:	b2db      	uxtb	r3, r3
}
   229c4:	0018      	movs	r0, r3
   229c6:	46bd      	mov	sp, r7
   229c8:	b002      	add	sp, #8
   229ca:	bd80      	pop	{r7, pc}
   229cc:	41004000 	.word	0x41004000

000229d0 <system_apb_clock_set_mask>:
{
   229d0:	b580      	push	{r7, lr}
   229d2:	b082      	sub	sp, #8
   229d4:	af00      	add	r7, sp, #0
   229d6:	0002      	movs	r2, r0
   229d8:	6039      	str	r1, [r7, #0]
   229da:	1dfb      	adds	r3, r7, #7
   229dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   229de:	1dfb      	adds	r3, r7, #7
   229e0:	781b      	ldrb	r3, [r3, #0]
   229e2:	2b01      	cmp	r3, #1
   229e4:	d00a      	beq.n	229fc <system_apb_clock_set_mask+0x2c>
   229e6:	2b02      	cmp	r3, #2
   229e8:	d00f      	beq.n	22a0a <system_apb_clock_set_mask+0x3a>
   229ea:	2b00      	cmp	r3, #0
   229ec:	d114      	bne.n	22a18 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   229ee:	4b0e      	ldr	r3, [pc, #56]	; (22a28 <system_apb_clock_set_mask+0x58>)
   229f0:	4a0d      	ldr	r2, [pc, #52]	; (22a28 <system_apb_clock_set_mask+0x58>)
   229f2:	6991      	ldr	r1, [r2, #24]
   229f4:	683a      	ldr	r2, [r7, #0]
   229f6:	430a      	orrs	r2, r1
   229f8:	619a      	str	r2, [r3, #24]
			break;
   229fa:	e00f      	b.n	22a1c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   229fc:	4b0a      	ldr	r3, [pc, #40]	; (22a28 <system_apb_clock_set_mask+0x58>)
   229fe:	4a0a      	ldr	r2, [pc, #40]	; (22a28 <system_apb_clock_set_mask+0x58>)
   22a00:	69d1      	ldr	r1, [r2, #28]
   22a02:	683a      	ldr	r2, [r7, #0]
   22a04:	430a      	orrs	r2, r1
   22a06:	61da      	str	r2, [r3, #28]
			break;
   22a08:	e008      	b.n	22a1c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   22a0a:	4b07      	ldr	r3, [pc, #28]	; (22a28 <system_apb_clock_set_mask+0x58>)
   22a0c:	4a06      	ldr	r2, [pc, #24]	; (22a28 <system_apb_clock_set_mask+0x58>)
   22a0e:	6a11      	ldr	r1, [r2, #32]
   22a10:	683a      	ldr	r2, [r7, #0]
   22a12:	430a      	orrs	r2, r1
   22a14:	621a      	str	r2, [r3, #32]
			break;
   22a16:	e001      	b.n	22a1c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22a18:	2317      	movs	r3, #23
   22a1a:	e000      	b.n	22a1e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22a1c:	2300      	movs	r3, #0
}
   22a1e:	0018      	movs	r0, r3
   22a20:	46bd      	mov	sp, r7
   22a22:	b002      	add	sp, #8
   22a24:	bd80      	pop	{r7, pc}
   22a26:	46c0      	nop			; (mov r8, r8)
   22a28:	40000400 	.word	0x40000400

00022a2c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   22a2c:	b580      	push	{r7, lr}
   22a2e:	b084      	sub	sp, #16
   22a30:	af00      	add	r7, sp, #0
   22a32:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22a34:	4b2f      	ldr	r3, [pc, #188]	; (22af4 <nvm_set_config+0xc8>)
   22a36:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   22a38:	2104      	movs	r1, #4
   22a3a:	2001      	movs	r0, #1
   22a3c:	4b2e      	ldr	r3, [pc, #184]	; (22af8 <nvm_set_config+0xcc>)
   22a3e:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22a40:	68fb      	ldr	r3, [r7, #12]
   22a42:	2220      	movs	r2, #32
   22a44:	32ff      	adds	r2, #255	; 0xff
   22a46:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22a48:	4b2c      	ldr	r3, [pc, #176]	; (22afc <nvm_set_config+0xd0>)
   22a4a:	4798      	blx	r3
   22a4c:	0003      	movs	r3, r0
   22a4e:	001a      	movs	r2, r3
   22a50:	2301      	movs	r3, #1
   22a52:	4053      	eors	r3, r2
   22a54:	b2db      	uxtb	r3, r3
   22a56:	2b00      	cmp	r3, #0
   22a58:	d001      	beq.n	22a5e <nvm_set_config+0x32>
		return STATUS_BUSY;
   22a5a:	2305      	movs	r3, #5
   22a5c:	e045      	b.n	22aea <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   22a5e:	687b      	ldr	r3, [r7, #4]
   22a60:	781b      	ldrb	r3, [r3, #0]
   22a62:	021b      	lsls	r3, r3, #8
   22a64:	001a      	movs	r2, r3
   22a66:	23c0      	movs	r3, #192	; 0xc0
   22a68:	009b      	lsls	r3, r3, #2
   22a6a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22a6c:	687b      	ldr	r3, [r7, #4]
   22a6e:	785b      	ldrb	r3, [r3, #1]
   22a70:	01db      	lsls	r3, r3, #7
   22a72:	0019      	movs	r1, r3
   22a74:	23ff      	movs	r3, #255	; 0xff
   22a76:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   22a78:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22a7a:	687b      	ldr	r3, [r7, #4]
   22a7c:	789b      	ldrb	r3, [r3, #2]
   22a7e:	005b      	lsls	r3, r3, #1
   22a80:	0019      	movs	r1, r3
   22a82:	231e      	movs	r3, #30
   22a84:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   22a86:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22a88:	687b      	ldr	r3, [r7, #4]
   22a8a:	78db      	ldrb	r3, [r3, #3]
   22a8c:	049b      	lsls	r3, r3, #18
   22a8e:	0019      	movs	r1, r3
   22a90:	2380      	movs	r3, #128	; 0x80
   22a92:	02db      	lsls	r3, r3, #11
   22a94:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   22a96:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   22a98:	687b      	ldr	r3, [r7, #4]
   22a9a:	791b      	ldrb	r3, [r3, #4]
   22a9c:	041b      	lsls	r3, r3, #16
   22a9e:	0019      	movs	r1, r3
   22aa0:	23c0      	movs	r3, #192	; 0xc0
   22aa2:	029b      	lsls	r3, r3, #10
   22aa4:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   22aa6:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   22aa8:	68fb      	ldr	r3, [r7, #12]
   22aaa:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   22aac:	68fb      	ldr	r3, [r7, #12]
   22aae:	689b      	ldr	r3, [r3, #8]
   22ab0:	035b      	lsls	r3, r3, #13
   22ab2:	0f5b      	lsrs	r3, r3, #29
   22ab4:	b2db      	uxtb	r3, r3
   22ab6:	001a      	movs	r2, r3
   22ab8:	2308      	movs	r3, #8
   22aba:	4093      	lsls	r3, r2
   22abc:	b29a      	uxth	r2, r3
   22abe:	4b10      	ldr	r3, [pc, #64]	; (22b00 <nvm_set_config+0xd4>)
   22ac0:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   22ac2:	68fb      	ldr	r3, [r7, #12]
   22ac4:	689b      	ldr	r3, [r3, #8]
   22ac6:	b29a      	uxth	r2, r3
   22ac8:	4b0d      	ldr	r3, [pc, #52]	; (22b00 <nvm_set_config+0xd4>)
   22aca:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   22acc:	687b      	ldr	r3, [r7, #4]
   22ace:	785a      	ldrb	r2, [r3, #1]
   22ad0:	4b0b      	ldr	r3, [pc, #44]	; (22b00 <nvm_set_config+0xd4>)
   22ad2:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22ad4:	68fb      	ldr	r3, [r7, #12]
   22ad6:	8b1b      	ldrh	r3, [r3, #24]
   22ad8:	b29b      	uxth	r3, r3
   22ada:	001a      	movs	r2, r3
   22adc:	2380      	movs	r3, #128	; 0x80
   22ade:	005b      	lsls	r3, r3, #1
   22ae0:	4013      	ands	r3, r2
   22ae2:	d001      	beq.n	22ae8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   22ae4:	2310      	movs	r3, #16
   22ae6:	e000      	b.n	22aea <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   22ae8:	2300      	movs	r3, #0
}
   22aea:	0018      	movs	r0, r3
   22aec:	46bd      	mov	sp, r7
   22aee:	b004      	add	sp, #16
   22af0:	bd80      	pop	{r7, pc}
   22af2:	46c0      	nop			; (mov r8, r8)
   22af4:	41004000 	.word	0x41004000
   22af8:	000229d1 	.word	0x000229d1
   22afc:	000229a9 	.word	0x000229a9
   22b00:	20000414 	.word	0x20000414

00022b04 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   22b04:	b580      	push	{r7, lr}
   22b06:	b086      	sub	sp, #24
   22b08:	af00      	add	r7, sp, #0
   22b0a:	60b9      	str	r1, [r7, #8]
   22b0c:	607a      	str	r2, [r7, #4]
   22b0e:	230f      	movs	r3, #15
   22b10:	18fb      	adds	r3, r7, r3
   22b12:	1c02      	adds	r2, r0, #0
   22b14:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   22b16:	4b3a      	ldr	r3, [pc, #232]	; (22c00 <nvm_execute_command+0xfc>)
   22b18:	881b      	ldrh	r3, [r3, #0]
   22b1a:	001a      	movs	r2, r3
   22b1c:	4b38      	ldr	r3, [pc, #224]	; (22c00 <nvm_execute_command+0xfc>)
   22b1e:	885b      	ldrh	r3, [r3, #2]
   22b20:	435a      	muls	r2, r3
   22b22:	68bb      	ldr	r3, [r7, #8]
   22b24:	429a      	cmp	r2, r3
   22b26:	d209      	bcs.n	22b3c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   22b28:	68bb      	ldr	r3, [r7, #8]
   22b2a:	4a36      	ldr	r2, [pc, #216]	; (22c04 <nvm_execute_command+0x100>)
   22b2c:	4293      	cmp	r3, r2
   22b2e:	d903      	bls.n	22b38 <nvm_execute_command+0x34>
   22b30:	68bb      	ldr	r3, [r7, #8]
   22b32:	4a35      	ldr	r2, [pc, #212]	; (22c08 <nvm_execute_command+0x104>)
   22b34:	4293      	cmp	r3, r2
   22b36:	d901      	bls.n	22b3c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22b38:	2318      	movs	r3, #24
   22b3a:	e05c      	b.n	22bf6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22b3c:	4b33      	ldr	r3, [pc, #204]	; (22c0c <nvm_execute_command+0x108>)
   22b3e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   22b40:	697b      	ldr	r3, [r7, #20]
   22b42:	685b      	ldr	r3, [r3, #4]
   22b44:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   22b46:	693b      	ldr	r3, [r7, #16]
   22b48:	2280      	movs	r2, #128	; 0x80
   22b4a:	02d2      	lsls	r2, r2, #11
   22b4c:	431a      	orrs	r2, r3
   22b4e:	697b      	ldr	r3, [r7, #20]
   22b50:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22b52:	697b      	ldr	r3, [r7, #20]
   22b54:	2220      	movs	r2, #32
   22b56:	32ff      	adds	r2, #255	; 0xff
   22b58:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22b5a:	4b2d      	ldr	r3, [pc, #180]	; (22c10 <nvm_execute_command+0x10c>)
   22b5c:	4798      	blx	r3
   22b5e:	0003      	movs	r3, r0
   22b60:	001a      	movs	r2, r3
   22b62:	2301      	movs	r3, #1
   22b64:	4053      	eors	r3, r2
   22b66:	b2db      	uxtb	r3, r3
   22b68:	2b00      	cmp	r3, #0
   22b6a:	d004      	beq.n	22b76 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   22b6c:	697b      	ldr	r3, [r7, #20]
   22b6e:	693a      	ldr	r2, [r7, #16]
   22b70:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   22b72:	2305      	movs	r3, #5
   22b74:	e03f      	b.n	22bf6 <nvm_execute_command+0xf2>
	}

	switch (command) {
   22b76:	230f      	movs	r3, #15
   22b78:	18fb      	adds	r3, r7, r3
   22b7a:	781b      	ldrb	r3, [r3, #0]
   22b7c:	2b45      	cmp	r3, #69	; 0x45
   22b7e:	d81d      	bhi.n	22bbc <nvm_execute_command+0xb8>
   22b80:	009a      	lsls	r2, r3, #2
   22b82:	4b24      	ldr	r3, [pc, #144]	; (22c14 <nvm_execute_command+0x110>)
   22b84:	18d3      	adds	r3, r2, r3
   22b86:	681b      	ldr	r3, [r3, #0]
   22b88:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   22b8a:	697b      	ldr	r3, [r7, #20]
   22b8c:	8b1b      	ldrh	r3, [r3, #24]
   22b8e:	b29b      	uxth	r3, r3
   22b90:	001a      	movs	r2, r3
   22b92:	2380      	movs	r3, #128	; 0x80
   22b94:	005b      	lsls	r3, r3, #1
   22b96:	4013      	ands	r3, r2
   22b98:	d004      	beq.n	22ba4 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   22b9a:	697b      	ldr	r3, [r7, #20]
   22b9c:	693a      	ldr	r2, [r7, #16]
   22b9e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   22ba0:	2310      	movs	r3, #16
   22ba2:	e028      	b.n	22bf6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22ba4:	68bb      	ldr	r3, [r7, #8]
   22ba6:	089b      	lsrs	r3, r3, #2
   22ba8:	005a      	lsls	r2, r3, #1
   22baa:	697b      	ldr	r3, [r7, #20]
   22bac:	61da      	str	r2, [r3, #28]
			break;
   22bae:	e00b      	b.n	22bc8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   22bb0:	68bb      	ldr	r3, [r7, #8]
   22bb2:	089b      	lsrs	r3, r3, #2
   22bb4:	005a      	lsls	r2, r3, #1
   22bb6:	697b      	ldr	r3, [r7, #20]
   22bb8:	61da      	str	r2, [r3, #28]
			break;
   22bba:	e005      	b.n	22bc8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   22bbc:	697b      	ldr	r3, [r7, #20]
   22bbe:	693a      	ldr	r2, [r7, #16]
   22bc0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   22bc2:	2317      	movs	r3, #23
   22bc4:	e017      	b.n	22bf6 <nvm_execute_command+0xf2>
			break;
   22bc6:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   22bc8:	230f      	movs	r3, #15
   22bca:	18fb      	adds	r3, r7, r3
   22bcc:	781b      	ldrb	r3, [r3, #0]
   22bce:	b29b      	uxth	r3, r3
   22bd0:	4a11      	ldr	r2, [pc, #68]	; (22c18 <nvm_execute_command+0x114>)
   22bd2:	4313      	orrs	r3, r2
   22bd4:	b29a      	uxth	r2, r3
   22bd6:	697b      	ldr	r3, [r7, #20]
   22bd8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   22bda:	46c0      	nop			; (mov r8, r8)
   22bdc:	4b0c      	ldr	r3, [pc, #48]	; (22c10 <nvm_execute_command+0x10c>)
   22bde:	4798      	blx	r3
   22be0:	0003      	movs	r3, r0
   22be2:	001a      	movs	r2, r3
   22be4:	2301      	movs	r3, #1
   22be6:	4053      	eors	r3, r2
   22be8:	b2db      	uxtb	r3, r3
   22bea:	2b00      	cmp	r3, #0
   22bec:	d1f6      	bne.n	22bdc <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   22bee:	697b      	ldr	r3, [r7, #20]
   22bf0:	693a      	ldr	r2, [r7, #16]
   22bf2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   22bf4:	2300      	movs	r3, #0
}
   22bf6:	0018      	movs	r0, r3
   22bf8:	46bd      	mov	sp, r7
   22bfa:	b006      	add	sp, #24
   22bfc:	bd80      	pop	{r7, pc}
   22bfe:	46c0      	nop			; (mov r8, r8)
   22c00:	20000414 	.word	0x20000414
   22c04:	00803fff 	.word	0x00803fff
   22c08:	00806000 	.word	0x00806000
   22c0c:	41004000 	.word	0x41004000
   22c10:	000229a9 	.word	0x000229a9
   22c14:	0002abbc 	.word	0x0002abbc
   22c18:	ffffa500 	.word	0xffffa500

00022c1c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   22c1c:	b580      	push	{r7, lr}
   22c1e:	b088      	sub	sp, #32
   22c20:	af00      	add	r7, sp, #0
   22c22:	60f8      	str	r0, [r7, #12]
   22c24:	60b9      	str	r1, [r7, #8]
   22c26:	1dbb      	adds	r3, r7, #6
   22c28:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22c2a:	4b4a      	ldr	r3, [pc, #296]	; (22d54 <nvm_write_buffer+0x138>)
   22c2c:	881b      	ldrh	r3, [r3, #0]
   22c2e:	001a      	movs	r2, r3
   22c30:	4b48      	ldr	r3, [pc, #288]	; (22d54 <nvm_write_buffer+0x138>)
   22c32:	885b      	ldrh	r3, [r3, #2]
   22c34:	435a      	muls	r2, r3
	if (destination_address >
   22c36:	68fb      	ldr	r3, [r7, #12]
   22c38:	429a      	cmp	r2, r3
   22c3a:	d201      	bcs.n	22c40 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22c3c:	2318      	movs	r3, #24
   22c3e:	e084      	b.n	22d4a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   22c40:	4b44      	ldr	r3, [pc, #272]	; (22d54 <nvm_write_buffer+0x138>)
   22c42:	881b      	ldrh	r3, [r3, #0]
   22c44:	3b01      	subs	r3, #1
   22c46:	001a      	movs	r2, r3
   22c48:	68fb      	ldr	r3, [r7, #12]
   22c4a:	4013      	ands	r3, r2
   22c4c:	d001      	beq.n	22c52 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22c4e:	2318      	movs	r3, #24
   22c50:	e07b      	b.n	22d4a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22c52:	4b40      	ldr	r3, [pc, #256]	; (22d54 <nvm_write_buffer+0x138>)
   22c54:	881b      	ldrh	r3, [r3, #0]
   22c56:	1dba      	adds	r2, r7, #6
   22c58:	8812      	ldrh	r2, [r2, #0]
   22c5a:	429a      	cmp	r2, r3
   22c5c:	d901      	bls.n	22c62 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22c5e:	2317      	movs	r3, #23
   22c60:	e073      	b.n	22d4a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22c62:	4b3d      	ldr	r3, [pc, #244]	; (22d58 <nvm_write_buffer+0x13c>)
   22c64:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22c66:	4b3d      	ldr	r3, [pc, #244]	; (22d5c <nvm_write_buffer+0x140>)
   22c68:	4798      	blx	r3
   22c6a:	0003      	movs	r3, r0
   22c6c:	001a      	movs	r2, r3
   22c6e:	2301      	movs	r3, #1
   22c70:	4053      	eors	r3, r2
   22c72:	b2db      	uxtb	r3, r3
   22c74:	2b00      	cmp	r3, #0
   22c76:	d001      	beq.n	22c7c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   22c78:	2305      	movs	r3, #5
   22c7a:	e066      	b.n	22d4a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   22c7c:	697b      	ldr	r3, [r7, #20]
   22c7e:	4a38      	ldr	r2, [pc, #224]	; (22d60 <nvm_write_buffer+0x144>)
   22c80:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   22c82:	46c0      	nop			; (mov r8, r8)
   22c84:	4b35      	ldr	r3, [pc, #212]	; (22d5c <nvm_write_buffer+0x140>)
   22c86:	4798      	blx	r3
   22c88:	0003      	movs	r3, r0
   22c8a:	001a      	movs	r2, r3
   22c8c:	2301      	movs	r3, #1
   22c8e:	4053      	eors	r3, r2
   22c90:	b2db      	uxtb	r3, r3
   22c92:	2b00      	cmp	r3, #0
   22c94:	d1f6      	bne.n	22c84 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22c96:	697b      	ldr	r3, [r7, #20]
   22c98:	2220      	movs	r2, #32
   22c9a:	32ff      	adds	r2, #255	; 0xff
   22c9c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   22c9e:	68fb      	ldr	r3, [r7, #12]
   22ca0:	085b      	lsrs	r3, r3, #1
   22ca2:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22ca4:	231a      	movs	r3, #26
   22ca6:	18fb      	adds	r3, r7, r3
   22ca8:	2200      	movs	r2, #0
   22caa:	801a      	strh	r2, [r3, #0]
   22cac:	e032      	b.n	22d14 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   22cae:	231a      	movs	r3, #26
   22cb0:	18fb      	adds	r3, r7, r3
   22cb2:	881b      	ldrh	r3, [r3, #0]
   22cb4:	68ba      	ldr	r2, [r7, #8]
   22cb6:	18d3      	adds	r3, r2, r3
   22cb8:	781a      	ldrb	r2, [r3, #0]
   22cba:	2318      	movs	r3, #24
   22cbc:	18fb      	adds	r3, r7, r3
   22cbe:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22cc0:	231a      	movs	r3, #26
   22cc2:	18fb      	adds	r3, r7, r3
   22cc4:	881a      	ldrh	r2, [r3, #0]
   22cc6:	1dbb      	adds	r3, r7, #6
   22cc8:	881b      	ldrh	r3, [r3, #0]
   22cca:	3b01      	subs	r3, #1
   22ccc:	429a      	cmp	r2, r3
   22cce:	da11      	bge.n	22cf4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   22cd0:	231a      	movs	r3, #26
   22cd2:	18fb      	adds	r3, r7, r3
   22cd4:	881b      	ldrh	r3, [r3, #0]
   22cd6:	3301      	adds	r3, #1
   22cd8:	68ba      	ldr	r2, [r7, #8]
   22cda:	18d3      	adds	r3, r2, r3
   22cdc:	781b      	ldrb	r3, [r3, #0]
   22cde:	021b      	lsls	r3, r3, #8
   22ce0:	b21a      	sxth	r2, r3
   22ce2:	2318      	movs	r3, #24
   22ce4:	18fb      	adds	r3, r7, r3
   22ce6:	2100      	movs	r1, #0
   22ce8:	5e5b      	ldrsh	r3, [r3, r1]
   22cea:	4313      	orrs	r3, r2
   22cec:	b21a      	sxth	r2, r3
   22cee:	2318      	movs	r3, #24
   22cf0:	18fb      	adds	r3, r7, r3
   22cf2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   22cf4:	69fb      	ldr	r3, [r7, #28]
   22cf6:	1c5a      	adds	r2, r3, #1
   22cf8:	61fa      	str	r2, [r7, #28]
   22cfa:	005b      	lsls	r3, r3, #1
   22cfc:	001a      	movs	r2, r3
   22cfe:	2318      	movs	r3, #24
   22d00:	18fb      	adds	r3, r7, r3
   22d02:	881b      	ldrh	r3, [r3, #0]
   22d04:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22d06:	231a      	movs	r3, #26
   22d08:	18fb      	adds	r3, r7, r3
   22d0a:	221a      	movs	r2, #26
   22d0c:	18ba      	adds	r2, r7, r2
   22d0e:	8812      	ldrh	r2, [r2, #0]
   22d10:	3202      	adds	r2, #2
   22d12:	801a      	strh	r2, [r3, #0]
   22d14:	231a      	movs	r3, #26
   22d16:	18fa      	adds	r2, r7, r3
   22d18:	1dbb      	adds	r3, r7, #6
   22d1a:	8812      	ldrh	r2, [r2, #0]
   22d1c:	881b      	ldrh	r3, [r3, #0]
   22d1e:	429a      	cmp	r2, r3
   22d20:	d3c5      	bcc.n	22cae <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   22d22:	4b0c      	ldr	r3, [pc, #48]	; (22d54 <nvm_write_buffer+0x138>)
   22d24:	791b      	ldrb	r3, [r3, #4]
   22d26:	2201      	movs	r2, #1
   22d28:	4053      	eors	r3, r2
   22d2a:	b2db      	uxtb	r3, r3
   22d2c:	2b00      	cmp	r3, #0
   22d2e:	d00b      	beq.n	22d48 <nvm_write_buffer+0x12c>
   22d30:	1dbb      	adds	r3, r7, #6
   22d32:	881b      	ldrh	r3, [r3, #0]
   22d34:	2b3f      	cmp	r3, #63	; 0x3f
   22d36:	d807      	bhi.n	22d48 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   22d38:	68fb      	ldr	r3, [r7, #12]
   22d3a:	2200      	movs	r2, #0
   22d3c:	0019      	movs	r1, r3
   22d3e:	2004      	movs	r0, #4
   22d40:	4b08      	ldr	r3, [pc, #32]	; (22d64 <nvm_write_buffer+0x148>)
   22d42:	4798      	blx	r3
   22d44:	0003      	movs	r3, r0
   22d46:	e000      	b.n	22d4a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   22d48:	2300      	movs	r3, #0
}
   22d4a:	0018      	movs	r0, r3
   22d4c:	46bd      	mov	sp, r7
   22d4e:	b008      	add	sp, #32
   22d50:	bd80      	pop	{r7, pc}
   22d52:	46c0      	nop			; (mov r8, r8)
   22d54:	20000414 	.word	0x20000414
   22d58:	41004000 	.word	0x41004000
   22d5c:	000229a9 	.word	0x000229a9
   22d60:	ffffa544 	.word	0xffffa544
   22d64:	00022b05 	.word	0x00022b05

00022d68 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   22d68:	b580      	push	{r7, lr}
   22d6a:	b088      	sub	sp, #32
   22d6c:	af00      	add	r7, sp, #0
   22d6e:	60f8      	str	r0, [r7, #12]
   22d70:	60b9      	str	r1, [r7, #8]
   22d72:	1dbb      	adds	r3, r7, #6
   22d74:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22d76:	4b38      	ldr	r3, [pc, #224]	; (22e58 <nvm_read_buffer+0xf0>)
   22d78:	881b      	ldrh	r3, [r3, #0]
   22d7a:	001a      	movs	r2, r3
   22d7c:	4b36      	ldr	r3, [pc, #216]	; (22e58 <nvm_read_buffer+0xf0>)
   22d7e:	885b      	ldrh	r3, [r3, #2]
   22d80:	435a      	muls	r2, r3
	if (source_address >
   22d82:	68fb      	ldr	r3, [r7, #12]
   22d84:	429a      	cmp	r2, r3
   22d86:	d201      	bcs.n	22d8c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   22d88:	2318      	movs	r3, #24
   22d8a:	e060      	b.n	22e4e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   22d8c:	4b32      	ldr	r3, [pc, #200]	; (22e58 <nvm_read_buffer+0xf0>)
   22d8e:	881b      	ldrh	r3, [r3, #0]
   22d90:	3b01      	subs	r3, #1
   22d92:	001a      	movs	r2, r3
   22d94:	68fb      	ldr	r3, [r7, #12]
   22d96:	4013      	ands	r3, r2
   22d98:	d001      	beq.n	22d9e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   22d9a:	2318      	movs	r3, #24
   22d9c:	e057      	b.n	22e4e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   22d9e:	4b2e      	ldr	r3, [pc, #184]	; (22e58 <nvm_read_buffer+0xf0>)
   22da0:	881b      	ldrh	r3, [r3, #0]
   22da2:	1dba      	adds	r2, r7, #6
   22da4:	8812      	ldrh	r2, [r2, #0]
   22da6:	429a      	cmp	r2, r3
   22da8:	d901      	bls.n	22dae <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   22daa:	2317      	movs	r3, #23
   22dac:	e04f      	b.n	22e4e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22dae:	4b2b      	ldr	r3, [pc, #172]	; (22e5c <nvm_read_buffer+0xf4>)
   22db0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22db2:	4b2b      	ldr	r3, [pc, #172]	; (22e60 <nvm_read_buffer+0xf8>)
   22db4:	4798      	blx	r3
   22db6:	0003      	movs	r3, r0
   22db8:	001a      	movs	r2, r3
   22dba:	2301      	movs	r3, #1
   22dbc:	4053      	eors	r3, r2
   22dbe:	b2db      	uxtb	r3, r3
   22dc0:	2b00      	cmp	r3, #0
   22dc2:	d001      	beq.n	22dc8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   22dc4:	2305      	movs	r3, #5
   22dc6:	e042      	b.n	22e4e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22dc8:	697b      	ldr	r3, [r7, #20]
   22dca:	2220      	movs	r2, #32
   22dcc:	32ff      	adds	r2, #255	; 0xff
   22dce:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   22dd0:	68fb      	ldr	r3, [r7, #12]
   22dd2:	085b      	lsrs	r3, r3, #1
   22dd4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   22dd6:	231a      	movs	r3, #26
   22dd8:	18fb      	adds	r3, r7, r3
   22dda:	2200      	movs	r2, #0
   22ddc:	801a      	strh	r2, [r3, #0]
   22dde:	e02e      	b.n	22e3e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   22de0:	69fb      	ldr	r3, [r7, #28]
   22de2:	1c5a      	adds	r2, r3, #1
   22de4:	61fa      	str	r2, [r7, #28]
   22de6:	005b      	lsls	r3, r3, #1
   22de8:	001a      	movs	r2, r3
   22dea:	2312      	movs	r3, #18
   22dec:	18fb      	adds	r3, r7, r3
   22dee:	8812      	ldrh	r2, [r2, #0]
   22df0:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   22df2:	231a      	movs	r3, #26
   22df4:	18fb      	adds	r3, r7, r3
   22df6:	881b      	ldrh	r3, [r3, #0]
   22df8:	68ba      	ldr	r2, [r7, #8]
   22dfa:	18d3      	adds	r3, r2, r3
   22dfc:	2212      	movs	r2, #18
   22dfe:	18ba      	adds	r2, r7, r2
   22e00:	8812      	ldrh	r2, [r2, #0]
   22e02:	b2d2      	uxtb	r2, r2
   22e04:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   22e06:	231a      	movs	r3, #26
   22e08:	18fb      	adds	r3, r7, r3
   22e0a:	881a      	ldrh	r2, [r3, #0]
   22e0c:	1dbb      	adds	r3, r7, #6
   22e0e:	881b      	ldrh	r3, [r3, #0]
   22e10:	3b01      	subs	r3, #1
   22e12:	429a      	cmp	r2, r3
   22e14:	da0c      	bge.n	22e30 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   22e16:	231a      	movs	r3, #26
   22e18:	18fb      	adds	r3, r7, r3
   22e1a:	881b      	ldrh	r3, [r3, #0]
   22e1c:	3301      	adds	r3, #1
   22e1e:	68ba      	ldr	r2, [r7, #8]
   22e20:	18d3      	adds	r3, r2, r3
   22e22:	2212      	movs	r2, #18
   22e24:	18ba      	adds	r2, r7, r2
   22e26:	8812      	ldrh	r2, [r2, #0]
   22e28:	0a12      	lsrs	r2, r2, #8
   22e2a:	b292      	uxth	r2, r2
   22e2c:	b2d2      	uxtb	r2, r2
   22e2e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   22e30:	231a      	movs	r3, #26
   22e32:	18fb      	adds	r3, r7, r3
   22e34:	221a      	movs	r2, #26
   22e36:	18ba      	adds	r2, r7, r2
   22e38:	8812      	ldrh	r2, [r2, #0]
   22e3a:	3202      	adds	r2, #2
   22e3c:	801a      	strh	r2, [r3, #0]
   22e3e:	231a      	movs	r3, #26
   22e40:	18fa      	adds	r2, r7, r3
   22e42:	1dbb      	adds	r3, r7, #6
   22e44:	8812      	ldrh	r2, [r2, #0]
   22e46:	881b      	ldrh	r3, [r3, #0]
   22e48:	429a      	cmp	r2, r3
   22e4a:	d3c9      	bcc.n	22de0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   22e4c:	2300      	movs	r3, #0
}
   22e4e:	0018      	movs	r0, r3
   22e50:	46bd      	mov	sp, r7
   22e52:	b008      	add	sp, #32
   22e54:	bd80      	pop	{r7, pc}
   22e56:	46c0      	nop			; (mov r8, r8)
   22e58:	20000414 	.word	0x20000414
   22e5c:	41004000 	.word	0x41004000
   22e60:	000229a9 	.word	0x000229a9

00022e64 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   22e64:	b580      	push	{r7, lr}
   22e66:	b084      	sub	sp, #16
   22e68:	af00      	add	r7, sp, #0
   22e6a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   22e6c:	4b23      	ldr	r3, [pc, #140]	; (22efc <nvm_erase_row+0x98>)
   22e6e:	881b      	ldrh	r3, [r3, #0]
   22e70:	001a      	movs	r2, r3
   22e72:	4b22      	ldr	r3, [pc, #136]	; (22efc <nvm_erase_row+0x98>)
   22e74:	885b      	ldrh	r3, [r3, #2]
   22e76:	435a      	muls	r2, r3
	if (row_address >
   22e78:	687b      	ldr	r3, [r7, #4]
   22e7a:	429a      	cmp	r2, r3
   22e7c:	d201      	bcs.n	22e82 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   22e7e:	2318      	movs	r3, #24
   22e80:	e037      	b.n	22ef2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   22e82:	4b1e      	ldr	r3, [pc, #120]	; (22efc <nvm_erase_row+0x98>)
   22e84:	881b      	ldrh	r3, [r3, #0]
   22e86:	009b      	lsls	r3, r3, #2
   22e88:	3b01      	subs	r3, #1
   22e8a:	001a      	movs	r2, r3
   22e8c:	687b      	ldr	r3, [r7, #4]
   22e8e:	4013      	ands	r3, r2
   22e90:	d001      	beq.n	22e96 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   22e92:	2318      	movs	r3, #24
   22e94:	e02d      	b.n	22ef2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22e96:	4b1a      	ldr	r3, [pc, #104]	; (22f00 <nvm_erase_row+0x9c>)
   22e98:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   22e9a:	4b1a      	ldr	r3, [pc, #104]	; (22f04 <nvm_erase_row+0xa0>)
   22e9c:	4798      	blx	r3
   22e9e:	0003      	movs	r3, r0
   22ea0:	001a      	movs	r2, r3
   22ea2:	2301      	movs	r3, #1
   22ea4:	4053      	eors	r3, r2
   22ea6:	b2db      	uxtb	r3, r3
   22ea8:	2b00      	cmp	r3, #0
   22eaa:	d001      	beq.n	22eb0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   22eac:	2305      	movs	r3, #5
   22eae:	e020      	b.n	22ef2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22eb0:	68fb      	ldr	r3, [r7, #12]
   22eb2:	2220      	movs	r2, #32
   22eb4:	32ff      	adds	r2, #255	; 0xff
   22eb6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   22eb8:	687b      	ldr	r3, [r7, #4]
   22eba:	089b      	lsrs	r3, r3, #2
   22ebc:	005a      	lsls	r2, r3, #1
   22ebe:	68fb      	ldr	r3, [r7, #12]
   22ec0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   22ec2:	68fb      	ldr	r3, [r7, #12]
   22ec4:	4a10      	ldr	r2, [pc, #64]	; (22f08 <nvm_erase_row+0xa4>)
   22ec6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   22ec8:	46c0      	nop			; (mov r8, r8)
   22eca:	4b0e      	ldr	r3, [pc, #56]	; (22f04 <nvm_erase_row+0xa0>)
   22ecc:	4798      	blx	r3
   22ece:	0003      	movs	r3, r0
   22ed0:	001a      	movs	r2, r3
   22ed2:	2301      	movs	r3, #1
   22ed4:	4053      	eors	r3, r2
   22ed6:	b2db      	uxtb	r3, r3
   22ed8:	2b00      	cmp	r3, #0
   22eda:	d1f6      	bne.n	22eca <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   22edc:	68fb      	ldr	r3, [r7, #12]
   22ede:	8b1b      	ldrh	r3, [r3, #24]
   22ee0:	b29b      	uxth	r3, r3
   22ee2:	b2db      	uxtb	r3, r3
   22ee4:	001a      	movs	r2, r3
   22ee6:	231c      	movs	r3, #28
   22ee8:	4013      	ands	r3, r2
   22eea:	d001      	beq.n	22ef0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   22eec:	2304      	movs	r3, #4
   22eee:	e000      	b.n	22ef2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   22ef0:	2300      	movs	r3, #0
}
   22ef2:	0018      	movs	r0, r3
   22ef4:	46bd      	mov	sp, r7
   22ef6:	b004      	add	sp, #16
   22ef8:	bd80      	pop	{r7, pc}
   22efa:	46c0      	nop			; (mov r8, r8)
   22efc:	20000414 	.word	0x20000414
   22f00:	41004000 	.word	0x41004000
   22f04:	000229a9 	.word	0x000229a9
   22f08:	ffffa502 	.word	0xffffa502

00022f0c <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   22f0c:	b580      	push	{r7, lr}
   22f0e:	b086      	sub	sp, #24
   22f10:	af00      	add	r7, sp, #0
   22f12:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   22f14:	4b2a      	ldr	r3, [pc, #168]	; (22fc0 <nvm_get_parameters+0xb4>)
   22f16:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   22f18:	697b      	ldr	r3, [r7, #20]
   22f1a:	2220      	movs	r2, #32
   22f1c:	32ff      	adds	r2, #255	; 0xff
   22f1e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   22f20:	697b      	ldr	r3, [r7, #20]
   22f22:	689b      	ldr	r3, [r3, #8]
   22f24:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   22f26:	693b      	ldr	r3, [r7, #16]
   22f28:	0c1b      	lsrs	r3, r3, #16
   22f2a:	2207      	movs	r2, #7
   22f2c:	4013      	ands	r3, r2
   22f2e:	2208      	movs	r2, #8
   22f30:	409a      	lsls	r2, r3
   22f32:	0013      	movs	r3, r2
	parameters->page_size =
   22f34:	b2da      	uxtb	r2, r3
   22f36:	687b      	ldr	r3, [r7, #4]
   22f38:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   22f3a:	693b      	ldr	r3, [r7, #16]
   22f3c:	b29a      	uxth	r2, r3
   22f3e:	687b      	ldr	r3, [r7, #4]
   22f40:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   22f42:	4b20      	ldr	r3, [pc, #128]	; (22fc4 <nvm_get_parameters+0xb8>)
   22f44:	881b      	ldrh	r3, [r3, #0]
   22f46:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   22f48:	091b      	lsrs	r3, r3, #4
   22f4a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   22f4c:	230e      	movs	r3, #14
   22f4e:	18fb      	adds	r3, r7, r3
   22f50:	2107      	movs	r1, #7
   22f52:	400a      	ands	r2, r1
   22f54:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   22f56:	230e      	movs	r3, #14
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	881b      	ldrh	r3, [r3, #0]
   22f5c:	2b07      	cmp	r3, #7
   22f5e:	d103      	bne.n	22f68 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   22f60:	687b      	ldr	r3, [r7, #4]
   22f62:	2200      	movs	r2, #0
   22f64:	605a      	str	r2, [r3, #4]
   22f66:	e00a      	b.n	22f7e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   22f68:	230e      	movs	r3, #14
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	881b      	ldrh	r3, [r3, #0]
   22f6e:	2206      	movs	r2, #6
   22f70:	1ad3      	subs	r3, r2, r3
   22f72:	2204      	movs	r2, #4
   22f74:	409a      	lsls	r2, r3
   22f76:	0013      	movs	r3, r2
   22f78:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   22f7a:	687b      	ldr	r3, [r7, #4]
   22f7c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   22f7e:	4b11      	ldr	r3, [pc, #68]	; (22fc4 <nvm_get_parameters+0xb8>)
   22f80:	881b      	ldrh	r3, [r3, #0]
   22f82:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   22f84:	230c      	movs	r3, #12
   22f86:	18fb      	adds	r3, r7, r3
   22f88:	2107      	movs	r1, #7
   22f8a:	400a      	ands	r2, r1
   22f8c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   22f8e:	230c      	movs	r3, #12
   22f90:	18fb      	adds	r3, r7, r3
   22f92:	881b      	ldrh	r3, [r3, #0]
   22f94:	2b07      	cmp	r3, #7
   22f96:	d103      	bne.n	22fa0 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   22f98:	687b      	ldr	r3, [r7, #4]
   22f9a:	2200      	movs	r2, #0
   22f9c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   22f9e:	e00a      	b.n	22fb6 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   22fa0:	230c      	movs	r3, #12
   22fa2:	18fb      	adds	r3, r7, r3
   22fa4:	881b      	ldrh	r3, [r3, #0]
   22fa6:	2207      	movs	r2, #7
   22fa8:	1ad3      	subs	r3, r2, r3
   22faa:	2204      	movs	r2, #4
   22fac:	409a      	lsls	r2, r3
   22fae:	0013      	movs	r3, r2
   22fb0:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   22fb2:	687b      	ldr	r3, [r7, #4]
   22fb4:	609a      	str	r2, [r3, #8]
}
   22fb6:	46c0      	nop			; (mov r8, r8)
   22fb8:	46bd      	mov	sp, r7
   22fba:	b006      	add	sp, #24
   22fbc:	bd80      	pop	{r7, pc}
   22fbe:	46c0      	nop			; (mov r8, r8)
   22fc0:	41004000 	.word	0x41004000
   22fc4:	00804000 	.word	0x00804000

00022fc8 <system_pinmux_get_config_defaults>:
{
   22fc8:	b580      	push	{r7, lr}
   22fca:	b082      	sub	sp, #8
   22fcc:	af00      	add	r7, sp, #0
   22fce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22fd0:	687b      	ldr	r3, [r7, #4]
   22fd2:	2280      	movs	r2, #128	; 0x80
   22fd4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   22fd6:	687b      	ldr	r3, [r7, #4]
   22fd8:	2200      	movs	r2, #0
   22fda:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22fdc:	687b      	ldr	r3, [r7, #4]
   22fde:	2201      	movs	r2, #1
   22fe0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22fe2:	687b      	ldr	r3, [r7, #4]
   22fe4:	2200      	movs	r2, #0
   22fe6:	70da      	strb	r2, [r3, #3]
}
   22fe8:	46c0      	nop			; (mov r8, r8)
   22fea:	46bd      	mov	sp, r7
   22fec:	b002      	add	sp, #8
   22fee:	bd80      	pop	{r7, pc}

00022ff0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   22ff0:	b580      	push	{r7, lr}
   22ff2:	b084      	sub	sp, #16
   22ff4:	af00      	add	r7, sp, #0
   22ff6:	0002      	movs	r2, r0
   22ff8:	6039      	str	r1, [r7, #0]
   22ffa:	1dfb      	adds	r3, r7, #7
   22ffc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   22ffe:	230c      	movs	r3, #12
   23000:	18fb      	adds	r3, r7, r3
   23002:	0018      	movs	r0, r3
   23004:	4b10      	ldr	r3, [pc, #64]	; (23048 <port_pin_set_config+0x58>)
   23006:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   23008:	230c      	movs	r3, #12
   2300a:	18fb      	adds	r3, r7, r3
   2300c:	2280      	movs	r2, #128	; 0x80
   2300e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   23010:	683b      	ldr	r3, [r7, #0]
   23012:	781a      	ldrb	r2, [r3, #0]
   23014:	230c      	movs	r3, #12
   23016:	18fb      	adds	r3, r7, r3
   23018:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2301a:	683b      	ldr	r3, [r7, #0]
   2301c:	785a      	ldrb	r2, [r3, #1]
   2301e:	230c      	movs	r3, #12
   23020:	18fb      	adds	r3, r7, r3
   23022:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   23024:	683b      	ldr	r3, [r7, #0]
   23026:	789a      	ldrb	r2, [r3, #2]
   23028:	230c      	movs	r3, #12
   2302a:	18fb      	adds	r3, r7, r3
   2302c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2302e:	230c      	movs	r3, #12
   23030:	18fa      	adds	r2, r7, r3
   23032:	1dfb      	adds	r3, r7, #7
   23034:	781b      	ldrb	r3, [r3, #0]
   23036:	0011      	movs	r1, r2
   23038:	0018      	movs	r0, r3
   2303a:	4b04      	ldr	r3, [pc, #16]	; (2304c <port_pin_set_config+0x5c>)
   2303c:	4798      	blx	r3
}
   2303e:	46c0      	nop			; (mov r8, r8)
   23040:	46bd      	mov	sp, r7
   23042:	b004      	add	sp, #16
   23044:	bd80      	pop	{r7, pc}
   23046:	46c0      	nop			; (mov r8, r8)
   23048:	00022fc9 	.word	0x00022fc9
   2304c:	00024d21 	.word	0x00024d21

00023050 <nvm_get_config_defaults>:
{
   23050:	b580      	push	{r7, lr}
   23052:	b082      	sub	sp, #8
   23054:	af00      	add	r7, sp, #0
   23056:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   23058:	687b      	ldr	r3, [r7, #4]
   2305a:	2200      	movs	r2, #0
   2305c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   2305e:	687b      	ldr	r3, [r7, #4]
   23060:	2201      	movs	r2, #1
   23062:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   23064:	4b08      	ldr	r3, [pc, #32]	; (23088 <nvm_get_config_defaults+0x38>)
   23066:	685b      	ldr	r3, [r3, #4]
   23068:	06db      	lsls	r3, r3, #27
   2306a:	0f1b      	lsrs	r3, r3, #28
   2306c:	b2db      	uxtb	r3, r3
   2306e:	001a      	movs	r2, r3
   23070:	687b      	ldr	r3, [r7, #4]
   23072:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   23074:	687b      	ldr	r3, [r7, #4]
   23076:	2200      	movs	r2, #0
   23078:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   2307a:	687b      	ldr	r3, [r7, #4]
   2307c:	2200      	movs	r2, #0
   2307e:	711a      	strb	r2, [r3, #4]
}
   23080:	46c0      	nop			; (mov r8, r8)
   23082:	46bd      	mov	sp, r7
   23084:	b002      	add	sp, #8
   23086:	bd80      	pop	{r7, pc}
   23088:	41004000 	.word	0x41004000

0002308c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   2308c:	b590      	push	{r4, r7, lr}
   2308e:	b085      	sub	sp, #20
   23090:	af00      	add	r7, sp, #0
   23092:	0002      	movs	r2, r0
   23094:	1dfb      	adds	r3, r7, #7
   23096:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23098:	230f      	movs	r3, #15
   2309a:	18fb      	adds	r3, r7, r3
   2309c:	2200      	movs	r2, #0
   2309e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   230a0:	4b0a      	ldr	r3, [pc, #40]	; (230cc <_eeprom_emulator_nvm_erase_row+0x40>)
   230a2:	685b      	ldr	r3, [r3, #4]
   230a4:	1dfa      	adds	r2, r7, #7
   230a6:	7812      	ldrb	r2, [r2, #0]
   230a8:	0212      	lsls	r2, r2, #8
   230aa:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   230ac:	220f      	movs	r2, #15
   230ae:	18bc      	adds	r4, r7, r2
   230b0:	0018      	movs	r0, r3
   230b2:	4b07      	ldr	r3, [pc, #28]	; (230d0 <_eeprom_emulator_nvm_erase_row+0x44>)
   230b4:	4798      	blx	r3
   230b6:	0003      	movs	r3, r0
   230b8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   230ba:	230f      	movs	r3, #15
   230bc:	18fb      	adds	r3, r7, r3
   230be:	781b      	ldrb	r3, [r3, #0]
   230c0:	2b05      	cmp	r3, #5
   230c2:	d0ed      	beq.n	230a0 <_eeprom_emulator_nvm_erase_row+0x14>
}
   230c4:	46c0      	nop			; (mov r8, r8)
   230c6:	46bd      	mov	sp, r7
   230c8:	b005      	add	sp, #20
   230ca:	bd90      	pop	{r4, r7, pc}
   230cc:	2000041c 	.word	0x2000041c
   230d0:	00022e65 	.word	0x00022e65

000230d4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   230d4:	b590      	push	{r4, r7, lr}
   230d6:	b085      	sub	sp, #20
   230d8:	af00      	add	r7, sp, #0
   230da:	0002      	movs	r2, r0
   230dc:	6039      	str	r1, [r7, #0]
   230de:	1dbb      	adds	r3, r7, #6
   230e0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   230e2:	230f      	movs	r3, #15
   230e4:	18fb      	adds	r3, r7, r3
   230e6:	2200      	movs	r2, #0
   230e8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   230ea:	4b0c      	ldr	r3, [pc, #48]	; (2311c <_eeprom_emulator_nvm_fill_cache+0x48>)
   230ec:	685a      	ldr	r2, [r3, #4]
   230ee:	1dbb      	adds	r3, r7, #6
   230f0:	881b      	ldrh	r3, [r3, #0]
   230f2:	019b      	lsls	r3, r3, #6
   230f4:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   230f6:	0018      	movs	r0, r3
   230f8:	230f      	movs	r3, #15
   230fa:	18fc      	adds	r4, r7, r3
   230fc:	683b      	ldr	r3, [r7, #0]
   230fe:	2240      	movs	r2, #64	; 0x40
   23100:	0019      	movs	r1, r3
   23102:	4b07      	ldr	r3, [pc, #28]	; (23120 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   23104:	4798      	blx	r3
   23106:	0003      	movs	r3, r0
   23108:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   2310a:	230f      	movs	r3, #15
   2310c:	18fb      	adds	r3, r7, r3
   2310e:	781b      	ldrb	r3, [r3, #0]
   23110:	2b05      	cmp	r3, #5
   23112:	d0ea      	beq.n	230ea <_eeprom_emulator_nvm_fill_cache+0x16>
}
   23114:	46c0      	nop			; (mov r8, r8)
   23116:	46bd      	mov	sp, r7
   23118:	b005      	add	sp, #20
   2311a:	bd90      	pop	{r4, r7, pc}
   2311c:	2000041c 	.word	0x2000041c
   23120:	00022c1d 	.word	0x00022c1d

00023124 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   23124:	b590      	push	{r4, r7, lr}
   23126:	b085      	sub	sp, #20
   23128:	af00      	add	r7, sp, #0
   2312a:	0002      	movs	r2, r0
   2312c:	1dbb      	adds	r3, r7, #6
   2312e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23130:	230f      	movs	r3, #15
   23132:	18fb      	adds	r3, r7, r3
   23134:	2200      	movs	r2, #0
   23136:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   23138:	4b0b      	ldr	r3, [pc, #44]	; (23168 <_eeprom_emulator_nvm_commit_cache+0x44>)
   2313a:	685a      	ldr	r2, [r3, #4]
   2313c:	1dbb      	adds	r3, r7, #6
   2313e:	881b      	ldrh	r3, [r3, #0]
   23140:	019b      	lsls	r3, r3, #6
   23142:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   23144:	220f      	movs	r2, #15
   23146:	18bc      	adds	r4, r7, r2
   23148:	2200      	movs	r2, #0
   2314a:	0019      	movs	r1, r3
   2314c:	2004      	movs	r0, #4
   2314e:	4b07      	ldr	r3, [pc, #28]	; (2316c <_eeprom_emulator_nvm_commit_cache+0x48>)
   23150:	4798      	blx	r3
   23152:	0003      	movs	r3, r0
   23154:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23156:	230f      	movs	r3, #15
   23158:	18fb      	adds	r3, r7, r3
   2315a:	781b      	ldrb	r3, [r3, #0]
   2315c:	2b05      	cmp	r3, #5
   2315e:	d0eb      	beq.n	23138 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   23160:	46c0      	nop			; (mov r8, r8)
   23162:	46bd      	mov	sp, r7
   23164:	b005      	add	sp, #20
   23166:	bd90      	pop	{r4, r7, pc}
   23168:	2000041c 	.word	0x2000041c
   2316c:	00022b05 	.word	0x00022b05

00023170 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   23170:	b590      	push	{r4, r7, lr}
   23172:	b085      	sub	sp, #20
   23174:	af00      	add	r7, sp, #0
   23176:	0002      	movs	r2, r0
   23178:	6039      	str	r1, [r7, #0]
   2317a:	1dbb      	adds	r3, r7, #6
   2317c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   2317e:	230f      	movs	r3, #15
   23180:	18fb      	adds	r3, r7, r3
   23182:	2200      	movs	r2, #0
   23184:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   23186:	4b0c      	ldr	r3, [pc, #48]	; (231b8 <_eeprom_emulator_nvm_read_page+0x48>)
   23188:	685a      	ldr	r2, [r3, #4]
   2318a:	1dbb      	adds	r3, r7, #6
   2318c:	881b      	ldrh	r3, [r3, #0]
   2318e:	019b      	lsls	r3, r3, #6
   23190:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   23192:	0018      	movs	r0, r3
   23194:	230f      	movs	r3, #15
   23196:	18fc      	adds	r4, r7, r3
   23198:	683b      	ldr	r3, [r7, #0]
   2319a:	2240      	movs	r2, #64	; 0x40
   2319c:	0019      	movs	r1, r3
   2319e:	4b07      	ldr	r3, [pc, #28]	; (231bc <_eeprom_emulator_nvm_read_page+0x4c>)
   231a0:	4798      	blx	r3
   231a2:	0003      	movs	r3, r0
   231a4:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   231a6:	230f      	movs	r3, #15
   231a8:	18fb      	adds	r3, r7, r3
   231aa:	781b      	ldrb	r3, [r3, #0]
   231ac:	2b05      	cmp	r3, #5
   231ae:	d0ea      	beq.n	23186 <_eeprom_emulator_nvm_read_page+0x16>
}
   231b0:	46c0      	nop			; (mov r8, r8)
   231b2:	46bd      	mov	sp, r7
   231b4:	b005      	add	sp, #20
   231b6:	bd90      	pop	{r4, r7, pc}
   231b8:	2000041c 	.word	0x2000041c
   231bc:	00022d69 	.word	0x00022d69

000231c0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   231c0:	b580      	push	{r7, lr}
   231c2:	b092      	sub	sp, #72	; 0x48
   231c4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   231c6:	2346      	movs	r3, #70	; 0x46
   231c8:	18fb      	adds	r3, r7, r3
   231ca:	2200      	movs	r2, #0
   231cc:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   231ce:	4b32      	ldr	r3, [pc, #200]	; (23298 <_eeprom_emulator_format_memory+0xd8>)
   231d0:	2287      	movs	r2, #135	; 0x87
   231d2:	2100      	movs	r1, #0
   231d4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   231d6:	4b30      	ldr	r3, [pc, #192]	; (23298 <_eeprom_emulator_format_memory+0xd8>)
   231d8:	2287      	movs	r2, #135	; 0x87
   231da:	5c9b      	ldrb	r3, [r3, r2]
   231dc:	0018      	movs	r0, r3
   231de:	4b2f      	ldr	r3, [pc, #188]	; (2329c <_eeprom_emulator_format_memory+0xdc>)
   231e0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   231e2:	2344      	movs	r3, #68	; 0x44
   231e4:	18fb      	adds	r3, r7, r3
   231e6:	2204      	movs	r2, #4
   231e8:	801a      	strh	r2, [r3, #0]
   231ea:	e04a      	b.n	23282 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   231ec:	2344      	movs	r3, #68	; 0x44
   231ee:	18fb      	adds	r3, r7, r3
   231f0:	881a      	ldrh	r2, [r3, #0]
   231f2:	4b29      	ldr	r3, [pc, #164]	; (23298 <_eeprom_emulator_format_memory+0xd8>)
   231f4:	891b      	ldrh	r3, [r3, #8]
   231f6:	3b01      	subs	r3, #1
   231f8:	429a      	cmp	r2, r3
   231fa:	d03a      	beq.n	23272 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   231fc:	2344      	movs	r3, #68	; 0x44
   231fe:	18fb      	adds	r3, r7, r3
   23200:	881b      	ldrh	r3, [r3, #0]
   23202:	2203      	movs	r2, #3
   23204:	4013      	ands	r3, r2
   23206:	b29b      	uxth	r3, r3
   23208:	2b00      	cmp	r3, #0
   2320a:	d108      	bne.n	2321e <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   2320c:	2344      	movs	r3, #68	; 0x44
   2320e:	18fb      	adds	r3, r7, r3
   23210:	881b      	ldrh	r3, [r3, #0]
   23212:	089b      	lsrs	r3, r3, #2
   23214:	b29b      	uxth	r3, r3
   23216:	b2db      	uxtb	r3, r3
   23218:	0018      	movs	r0, r3
   2321a:	4b20      	ldr	r3, [pc, #128]	; (2329c <_eeprom_emulator_format_memory+0xdc>)
   2321c:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   2321e:	2344      	movs	r3, #68	; 0x44
   23220:	18fb      	adds	r3, r7, r3
   23222:	881b      	ldrh	r3, [r3, #0]
   23224:	2203      	movs	r2, #3
   23226:	4013      	ands	r3, r2
   23228:	b29b      	uxth	r3, r3
   2322a:	2b01      	cmp	r3, #1
   2322c:	d822      	bhi.n	23274 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   2322e:	1d3b      	adds	r3, r7, #4
   23230:	2240      	movs	r2, #64	; 0x40
   23232:	21ff      	movs	r1, #255	; 0xff
   23234:	0018      	movs	r0, r3
   23236:	4b1a      	ldr	r3, [pc, #104]	; (232a0 <_eeprom_emulator_format_memory+0xe0>)
   23238:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   2323a:	2346      	movs	r3, #70	; 0x46
   2323c:	18fb      	adds	r3, r7, r3
   2323e:	881b      	ldrh	r3, [r3, #0]
   23240:	b2da      	uxtb	r2, r3
   23242:	1d3b      	adds	r3, r7, #4
   23244:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   23246:	1d3a      	adds	r2, r7, #4
   23248:	2344      	movs	r3, #68	; 0x44
   2324a:	18fb      	adds	r3, r7, r3
   2324c:	881b      	ldrh	r3, [r3, #0]
   2324e:	0011      	movs	r1, r2
   23250:	0018      	movs	r0, r3
   23252:	4b14      	ldr	r3, [pc, #80]	; (232a4 <_eeprom_emulator_format_memory+0xe4>)
   23254:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   23256:	2344      	movs	r3, #68	; 0x44
   23258:	18fb      	adds	r3, r7, r3
   2325a:	881b      	ldrh	r3, [r3, #0]
   2325c:	0018      	movs	r0, r3
   2325e:	4b12      	ldr	r3, [pc, #72]	; (232a8 <_eeprom_emulator_format_memory+0xe8>)
   23260:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   23262:	2346      	movs	r3, #70	; 0x46
   23264:	18fb      	adds	r3, r7, r3
   23266:	881a      	ldrh	r2, [r3, #0]
   23268:	2346      	movs	r3, #70	; 0x46
   2326a:	18fb      	adds	r3, r7, r3
   2326c:	3201      	adds	r2, #1
   2326e:	801a      	strh	r2, [r3, #0]
   23270:	e000      	b.n	23274 <_eeprom_emulator_format_memory+0xb4>
			continue;
   23272:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   23274:	2344      	movs	r3, #68	; 0x44
   23276:	18fb      	adds	r3, r7, r3
   23278:	881a      	ldrh	r2, [r3, #0]
   2327a:	2344      	movs	r3, #68	; 0x44
   2327c:	18fb      	adds	r3, r7, r3
   2327e:	3201      	adds	r2, #1
   23280:	801a      	strh	r2, [r3, #0]
   23282:	4b05      	ldr	r3, [pc, #20]	; (23298 <_eeprom_emulator_format_memory+0xd8>)
   23284:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23286:	2244      	movs	r2, #68	; 0x44
   23288:	18ba      	adds	r2, r7, r2
   2328a:	8812      	ldrh	r2, [r2, #0]
   2328c:	429a      	cmp	r2, r3
   2328e:	d3ad      	bcc.n	231ec <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   23290:	46c0      	nop			; (mov r8, r8)
   23292:	46bd      	mov	sp, r7
   23294:	b012      	add	sp, #72	; 0x48
   23296:	bd80      	pop	{r7, pc}
   23298:	2000041c 	.word	0x2000041c
   2329c:	0002308d 	.word	0x0002308d
   232a0:	00028e93 	.word	0x00028e93
   232a4:	000230d5 	.word	0x000230d5
   232a8:	00023125 	.word	0x00023125

000232ac <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   232ac:	b580      	push	{r7, lr}
   232ae:	b082      	sub	sp, #8
   232b0:	af00      	add	r7, sp, #0
   232b2:	0002      	movs	r2, r0
   232b4:	1dbb      	adds	r3, r7, #6
   232b6:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   232b8:	4b14      	ldr	r3, [pc, #80]	; (2330c <_eeprom_emulator_is_full_row+0x60>)
   232ba:	685a      	ldr	r2, [r3, #4]
   232bc:	1dbb      	adds	r3, r7, #6
   232be:	881b      	ldrh	r3, [r3, #0]
   232c0:	019b      	lsls	r3, r3, #6
   232c2:	18d3      	adds	r3, r2, r3
   232c4:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   232c6:	4b11      	ldr	r3, [pc, #68]	; (2330c <_eeprom_emulator_is_full_row+0x60>)
   232c8:	6859      	ldr	r1, [r3, #4]
   232ca:	1dbb      	adds	r3, r7, #6
   232cc:	881b      	ldrh	r3, [r3, #0]
   232ce:	3302      	adds	r3, #2
   232d0:	019b      	lsls	r3, r3, #6
   232d2:	18cb      	adds	r3, r1, r3
   232d4:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   232d6:	429a      	cmp	r2, r3
   232d8:	d011      	beq.n	232fe <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   232da:	4b0c      	ldr	r3, [pc, #48]	; (2330c <_eeprom_emulator_is_full_row+0x60>)
   232dc:	685a      	ldr	r2, [r3, #4]
   232de:	1dbb      	adds	r3, r7, #6
   232e0:	881b      	ldrh	r3, [r3, #0]
   232e2:	3301      	adds	r3, #1
   232e4:	019b      	lsls	r3, r3, #6
   232e6:	18d3      	adds	r3, r2, r3
   232e8:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   232ea:	4b08      	ldr	r3, [pc, #32]	; (2330c <_eeprom_emulator_is_full_row+0x60>)
   232ec:	6859      	ldr	r1, [r3, #4]
   232ee:	1dbb      	adds	r3, r7, #6
   232f0:	881b      	ldrh	r3, [r3, #0]
   232f2:	3302      	adds	r3, #2
   232f4:	019b      	lsls	r3, r3, #6
   232f6:	18cb      	adds	r3, r1, r3
   232f8:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   232fa:	429a      	cmp	r2, r3
   232fc:	d101      	bne.n	23302 <_eeprom_emulator_is_full_row+0x56>
		return true;
   232fe:	2301      	movs	r3, #1
   23300:	e000      	b.n	23304 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   23302:	2300      	movs	r3, #0
	}
}
   23304:	0018      	movs	r0, r3
   23306:	46bd      	mov	sp, r7
   23308:	b002      	add	sp, #8
   2330a:	bd80      	pop	{r7, pc}
   2330c:	2000041c 	.word	0x2000041c

00023310 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   23310:	b580      	push	{r7, lr}
   23312:	b082      	sub	sp, #8
   23314:	af00      	add	r7, sp, #0
   23316:	0002      	movs	r2, r0
   23318:	1dbb      	adds	r3, r7, #6
   2331a:	801a      	strh	r2, [r3, #0]
   2331c:	1d3b      	adds	r3, r7, #4
   2331e:	1c0a      	adds	r2, r1, #0
   23320:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   23322:	1dbb      	adds	r3, r7, #6
   23324:	881b      	ldrh	r3, [r3, #0]
   23326:	0018      	movs	r0, r3
   23328:	4b0c      	ldr	r3, [pc, #48]	; (2335c <_eeprom_emulator_erase_invalid_page+0x4c>)
   2332a:	4798      	blx	r3
   2332c:	1e03      	subs	r3, r0, #0
   2332e:	d008      	beq.n	23342 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   23330:	1dbb      	adds	r3, r7, #6
   23332:	881b      	ldrh	r3, [r3, #0]
   23334:	089b      	lsrs	r3, r3, #2
   23336:	b29b      	uxth	r3, r3
   23338:	b2db      	uxtb	r3, r3
   2333a:	0018      	movs	r0, r3
   2333c:	4b08      	ldr	r3, [pc, #32]	; (23360 <_eeprom_emulator_erase_invalid_page+0x50>)
   2333e:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   23340:	e007      	b.n	23352 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   23342:	1d3b      	adds	r3, r7, #4
   23344:	881b      	ldrh	r3, [r3, #0]
   23346:	089b      	lsrs	r3, r3, #2
   23348:	b29b      	uxth	r3, r3
   2334a:	b2db      	uxtb	r3, r3
   2334c:	0018      	movs	r0, r3
   2334e:	4b04      	ldr	r3, [pc, #16]	; (23360 <_eeprom_emulator_erase_invalid_page+0x50>)
   23350:	4798      	blx	r3
}
   23352:	46c0      	nop			; (mov r8, r8)
   23354:	46bd      	mov	sp, r7
   23356:	b002      	add	sp, #8
   23358:	bd80      	pop	{r7, pc}
   2335a:	46c0      	nop			; (mov r8, r8)
   2335c:	000232ad 	.word	0x000232ad
   23360:	0002308d 	.word	0x0002308d

00023364 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   23364:	b580      	push	{r7, lr}
   23366:	b082      	sub	sp, #8
   23368:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   2336a:	1dbb      	adds	r3, r7, #6
   2336c:	2200      	movs	r2, #0
   2336e:	801a      	strh	r2, [r3, #0]
   23370:	1d3b      	adds	r3, r7, #4
   23372:	2200      	movs	r2, #0
   23374:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23376:	1dbb      	adds	r3, r7, #6
   23378:	2200      	movs	r2, #0
   2337a:	801a      	strh	r2, [r3, #0]
   2337c:	e04a      	b.n	23414 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   2337e:	4b2a      	ldr	r3, [pc, #168]	; (23428 <_eeprom_emulator_check_logical_page+0xc4>)
   23380:	685a      	ldr	r2, [r3, #4]
   23382:	1dbb      	adds	r3, r7, #6
   23384:	881b      	ldrh	r3, [r3, #0]
   23386:	019b      	lsls	r3, r3, #6
   23388:	18d3      	adds	r3, r2, r3
   2338a:	781a      	ldrb	r2, [r3, #0]
   2338c:	1cbb      	adds	r3, r7, #2
   2338e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23390:	1cbb      	adds	r3, r7, #2
   23392:	881b      	ldrh	r3, [r3, #0]
   23394:	2bff      	cmp	r3, #255	; 0xff
   23396:	d037      	beq.n	23408 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23398:	1d3b      	adds	r3, r7, #4
   2339a:	1dba      	adds	r2, r7, #6
   2339c:	8812      	ldrh	r2, [r2, #0]
   2339e:	3204      	adds	r2, #4
   233a0:	801a      	strh	r2, [r3, #0]
   233a2:	e02a      	b.n	233fa <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   233a4:	1d3b      	adds	r3, r7, #4
   233a6:	881a      	ldrh	r2, [r3, #0]
   233a8:	4b1f      	ldr	r3, [pc, #124]	; (23428 <_eeprom_emulator_check_logical_page+0xc4>)
   233aa:	891b      	ldrh	r3, [r3, #8]
   233ac:	3b01      	subs	r3, #1
   233ae:	429a      	cmp	r2, r3
   233b0:	d01b      	beq.n	233ea <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   233b2:	4b1d      	ldr	r3, [pc, #116]	; (23428 <_eeprom_emulator_check_logical_page+0xc4>)
   233b4:	685a      	ldr	r2, [r3, #4]
   233b6:	1d3b      	adds	r3, r7, #4
   233b8:	881b      	ldrh	r3, [r3, #0]
   233ba:	019b      	lsls	r3, r3, #6
   233bc:	18d3      	adds	r3, r2, r3
   233be:	781a      	ldrb	r2, [r3, #0]
   233c0:	003b      	movs	r3, r7
   233c2:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   233c4:	003b      	movs	r3, r7
   233c6:	881b      	ldrh	r3, [r3, #0]
   233c8:	2bff      	cmp	r3, #255	; 0xff
   233ca:	d010      	beq.n	233ee <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   233cc:	1cba      	adds	r2, r7, #2
   233ce:	003b      	movs	r3, r7
   233d0:	8812      	ldrh	r2, [r2, #0]
   233d2:	881b      	ldrh	r3, [r3, #0]
   233d4:	429a      	cmp	r2, r3
   233d6:	d10b      	bne.n	233f0 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   233d8:	1d3b      	adds	r3, r7, #4
   233da:	881a      	ldrh	r2, [r3, #0]
   233dc:	1dbb      	adds	r3, r7, #6
   233de:	881b      	ldrh	r3, [r3, #0]
   233e0:	0011      	movs	r1, r2
   233e2:	0018      	movs	r0, r3
   233e4:	4b11      	ldr	r3, [pc, #68]	; (2342c <_eeprom_emulator_check_logical_page+0xc8>)
   233e6:	4798      	blx	r3
   233e8:	e002      	b.n	233f0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   233ea:	46c0      	nop			; (mov r8, r8)
   233ec:	e000      	b.n	233f0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   233ee:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   233f0:	1d3b      	adds	r3, r7, #4
   233f2:	1d3a      	adds	r2, r7, #4
   233f4:	8812      	ldrh	r2, [r2, #0]
   233f6:	3204      	adds	r2, #4
   233f8:	801a      	strh	r2, [r3, #0]
   233fa:	4b0b      	ldr	r3, [pc, #44]	; (23428 <_eeprom_emulator_check_logical_page+0xc4>)
   233fc:	891b      	ldrh	r3, [r3, #8]
   233fe:	1d3a      	adds	r2, r7, #4
   23400:	8812      	ldrh	r2, [r2, #0]
   23402:	429a      	cmp	r2, r3
   23404:	d3ce      	bcc.n	233a4 <_eeprom_emulator_check_logical_page+0x40>
   23406:	e000      	b.n	2340a <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   23408:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   2340a:	1dbb      	adds	r3, r7, #6
   2340c:	1dba      	adds	r2, r7, #6
   2340e:	8812      	ldrh	r2, [r2, #0]
   23410:	3204      	adds	r2, #4
   23412:	801a      	strh	r2, [r3, #0]
   23414:	4b04      	ldr	r3, [pc, #16]	; (23428 <_eeprom_emulator_check_logical_page+0xc4>)
   23416:	891b      	ldrh	r3, [r3, #8]
   23418:	1dba      	adds	r2, r7, #6
   2341a:	8812      	ldrh	r2, [r2, #0]
   2341c:	429a      	cmp	r2, r3
   2341e:	d3ae      	bcc.n	2337e <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   23420:	46c0      	nop			; (mov r8, r8)
   23422:	46bd      	mov	sp, r7
   23424:	b002      	add	sp, #8
   23426:	bd80      	pop	{r7, pc}
   23428:	2000041c 	.word	0x2000041c
   2342c:	00023311 	.word	0x00023311

00023430 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   23430:	b580      	push	{r7, lr}
   23432:	b084      	sub	sp, #16
   23434:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   23436:	4b51      	ldr	r3, [pc, #324]	; (2357c <_eeprom_emulator_update_page_mapping+0x14c>)
   23438:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2343a:	230e      	movs	r3, #14
   2343c:	18fb      	adds	r3, r7, r3
   2343e:	2200      	movs	r2, #0
   23440:	801a      	strh	r2, [r3, #0]
   23442:	e033      	b.n	234ac <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   23444:	230e      	movs	r3, #14
   23446:	18fb      	adds	r3, r7, r3
   23448:	881a      	ldrh	r2, [r3, #0]
   2344a:	4b4d      	ldr	r3, [pc, #308]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   2344c:	891b      	ldrh	r3, [r3, #8]
   2344e:	3b01      	subs	r3, #1
   23450:	429a      	cmp	r2, r3
   23452:	d023      	beq.n	2349c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   23454:	4b4a      	ldr	r3, [pc, #296]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   23456:	685a      	ldr	r2, [r3, #4]
   23458:	230e      	movs	r3, #14
   2345a:	18fb      	adds	r3, r7, r3
   2345c:	881b      	ldrh	r3, [r3, #0]
   2345e:	019b      	lsls	r3, r3, #6
   23460:	18d3      	adds	r3, r2, r3
   23462:	781a      	ldrb	r2, [r3, #0]
   23464:	2308      	movs	r3, #8
   23466:	18fb      	adds	r3, r7, r3
   23468:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   2346a:	2308      	movs	r3, #8
   2346c:	18fb      	adds	r3, r7, r3
   2346e:	881b      	ldrh	r3, [r3, #0]
   23470:	2bff      	cmp	r3, #255	; 0xff
   23472:	d014      	beq.n	2349e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   23474:	4b42      	ldr	r3, [pc, #264]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   23476:	7a9b      	ldrb	r3, [r3, #10]
   23478:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   2347a:	2208      	movs	r2, #8
   2347c:	18ba      	adds	r2, r7, r2
   2347e:	8812      	ldrh	r2, [r2, #0]
   23480:	429a      	cmp	r2, r3
   23482:	d20c      	bcs.n	2349e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23484:	2308      	movs	r3, #8
   23486:	18fb      	adds	r3, r7, r3
   23488:	881b      	ldrh	r3, [r3, #0]
   2348a:	220e      	movs	r2, #14
   2348c:	18ba      	adds	r2, r7, r2
   2348e:	8812      	ldrh	r2, [r2, #0]
   23490:	b2d1      	uxtb	r1, r2
   23492:	4a3b      	ldr	r2, [pc, #236]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   23494:	18d3      	adds	r3, r2, r3
   23496:	1c0a      	adds	r2, r1, #0
   23498:	72da      	strb	r2, [r3, #11]
   2349a:	e000      	b.n	2349e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   2349c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   2349e:	230e      	movs	r3, #14
   234a0:	18fb      	adds	r3, r7, r3
   234a2:	881a      	ldrh	r2, [r3, #0]
   234a4:	230e      	movs	r3, #14
   234a6:	18fb      	adds	r3, r7, r3
   234a8:	3201      	adds	r2, #1
   234aa:	801a      	strh	r2, [r3, #0]
   234ac:	4b34      	ldr	r3, [pc, #208]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   234ae:	891b      	ldrh	r3, [r3, #8]
   234b0:	220e      	movs	r2, #14
   234b2:	18ba      	adds	r2, r7, r2
   234b4:	8812      	ldrh	r2, [r2, #0]
   234b6:	429a      	cmp	r2, r3
   234b8:	d3c4      	bcc.n	23444 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   234ba:	4b31      	ldr	r3, [pc, #196]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   234bc:	2287      	movs	r2, #135	; 0x87
   234be:	213f      	movs	r1, #63	; 0x3f
   234c0:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   234c2:	230c      	movs	r3, #12
   234c4:	18fb      	adds	r3, r7, r3
   234c6:	2200      	movs	r2, #0
   234c8:	801a      	strh	r2, [r3, #0]
   234ca:	e04a      	b.n	23562 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   234cc:	230b      	movs	r3, #11
   234ce:	18fb      	adds	r3, r7, r3
   234d0:	2201      	movs	r2, #1
   234d2:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   234d4:	230a      	movs	r3, #10
   234d6:	18fb      	adds	r3, r7, r3
   234d8:	2200      	movs	r2, #0
   234da:	701a      	strb	r2, [r3, #0]
   234dc:	e028      	b.n	23530 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   234de:	230c      	movs	r3, #12
   234e0:	18fb      	adds	r3, r7, r3
   234e2:	881b      	ldrh	r3, [r3, #0]
   234e4:	009b      	lsls	r3, r3, #2
   234e6:	b299      	uxth	r1, r3
   234e8:	230a      	movs	r3, #10
   234ea:	18fb      	adds	r3, r7, r3
   234ec:	781b      	ldrb	r3, [r3, #0]
   234ee:	b29a      	uxth	r2, r3
   234f0:	1dbb      	adds	r3, r7, #6
   234f2:	188a      	adds	r2, r1, r2
   234f4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   234f6:	1dbb      	adds	r3, r7, #6
   234f8:	881a      	ldrh	r2, [r3, #0]
   234fa:	4b21      	ldr	r3, [pc, #132]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   234fc:	891b      	ldrh	r3, [r3, #8]
   234fe:	3b01      	subs	r3, #1
   23500:	429a      	cmp	r2, r3
   23502:	d00d      	beq.n	23520 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23504:	4b1e      	ldr	r3, [pc, #120]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   23506:	685a      	ldr	r2, [r3, #4]
   23508:	1dbb      	adds	r3, r7, #6
   2350a:	881b      	ldrh	r3, [r3, #0]
   2350c:	019b      	lsls	r3, r3, #6
   2350e:	18d3      	adds	r3, r2, r3
   23510:	781b      	ldrb	r3, [r3, #0]
   23512:	2bff      	cmp	r3, #255	; 0xff
   23514:	d005      	beq.n	23522 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23516:	230b      	movs	r3, #11
   23518:	18fb      	adds	r3, r7, r3
   2351a:	2200      	movs	r2, #0
   2351c:	701a      	strb	r2, [r3, #0]
   2351e:	e000      	b.n	23522 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23520:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23522:	230a      	movs	r3, #10
   23524:	18fb      	adds	r3, r7, r3
   23526:	781a      	ldrb	r2, [r3, #0]
   23528:	230a      	movs	r3, #10
   2352a:	18fb      	adds	r3, r7, r3
   2352c:	3201      	adds	r2, #1
   2352e:	701a      	strb	r2, [r3, #0]
   23530:	230a      	movs	r3, #10
   23532:	18fb      	adds	r3, r7, r3
   23534:	781b      	ldrb	r3, [r3, #0]
   23536:	2b03      	cmp	r3, #3
   23538:	d9d1      	bls.n	234de <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   2353a:	230b      	movs	r3, #11
   2353c:	18fb      	adds	r3, r7, r3
   2353e:	781b      	ldrb	r3, [r3, #0]
   23540:	2b00      	cmp	r3, #0
   23542:	d007      	beq.n	23554 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   23544:	230c      	movs	r3, #12
   23546:	18fb      	adds	r3, r7, r3
   23548:	881b      	ldrh	r3, [r3, #0]
   2354a:	b2d9      	uxtb	r1, r3
   2354c:	4b0c      	ldr	r3, [pc, #48]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   2354e:	2287      	movs	r2, #135	; 0x87
   23550:	5499      	strb	r1, [r3, r2]
			break;
   23552:	e00f      	b.n	23574 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23554:	230c      	movs	r3, #12
   23556:	18fb      	adds	r3, r7, r3
   23558:	881a      	ldrh	r2, [r3, #0]
   2355a:	230c      	movs	r3, #12
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	3201      	adds	r2, #1
   23560:	801a      	strh	r2, [r3, #0]
   23562:	4b07      	ldr	r3, [pc, #28]	; (23580 <_eeprom_emulator_update_page_mapping+0x150>)
   23564:	891b      	ldrh	r3, [r3, #8]
   23566:	089b      	lsrs	r3, r3, #2
   23568:	b29b      	uxth	r3, r3
   2356a:	220c      	movs	r2, #12
   2356c:	18ba      	adds	r2, r7, r2
   2356e:	8812      	ldrh	r2, [r2, #0]
   23570:	429a      	cmp	r2, r3
   23572:	d3ab      	bcc.n	234cc <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   23574:	46c0      	nop			; (mov r8, r8)
   23576:	46bd      	mov	sp, r7
   23578:	b004      	add	sp, #16
   2357a:	bd80      	pop	{r7, pc}
   2357c:	00023365 	.word	0x00023365
   23580:	2000041c 	.word	0x2000041c

00023584 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23584:	b580      	push	{r7, lr}
   23586:	b084      	sub	sp, #16
   23588:	af00      	add	r7, sp, #0
   2358a:	0002      	movs	r2, r0
   2358c:	6039      	str	r1, [r7, #0]
   2358e:	1dfb      	adds	r3, r7, #7
   23590:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23592:	230e      	movs	r3, #14
   23594:	18fb      	adds	r3, r7, r3
   23596:	1dfa      	adds	r2, r7, #7
   23598:	7812      	ldrb	r2, [r2, #0]
   2359a:	0892      	lsrs	r2, r2, #2
   2359c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   2359e:	230d      	movs	r3, #13
   235a0:	18fb      	adds	r3, r7, r3
   235a2:	1dfa      	adds	r2, r7, #7
   235a4:	7812      	ldrb	r2, [r2, #0]
   235a6:	2103      	movs	r1, #3
   235a8:	400a      	ands	r2, r1
   235aa:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   235ac:	230f      	movs	r3, #15
   235ae:	18fb      	adds	r3, r7, r3
   235b0:	220d      	movs	r2, #13
   235b2:	18ba      	adds	r2, r7, r2
   235b4:	7812      	ldrb	r2, [r2, #0]
   235b6:	701a      	strb	r2, [r3, #0]
   235b8:	e023      	b.n	23602 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   235ba:	230e      	movs	r3, #14
   235bc:	18fb      	adds	r3, r7, r3
   235be:	781b      	ldrb	r3, [r3, #0]
   235c0:	009b      	lsls	r3, r3, #2
   235c2:	b2d9      	uxtb	r1, r3
   235c4:	230c      	movs	r3, #12
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	220f      	movs	r2, #15
   235ca:	18ba      	adds	r2, r7, r2
   235cc:	7812      	ldrb	r2, [r2, #0]
   235ce:	188a      	adds	r2, r1, r2
   235d0:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   235d2:	4b11      	ldr	r3, [pc, #68]	; (23618 <_eeprom_emulator_is_page_free_on_row+0x94>)
   235d4:	685a      	ldr	r2, [r3, #4]
   235d6:	230c      	movs	r3, #12
   235d8:	18fb      	adds	r3, r7, r3
   235da:	781b      	ldrb	r3, [r3, #0]
   235dc:	019b      	lsls	r3, r3, #6
   235de:	18d3      	adds	r3, r2, r3
   235e0:	781b      	ldrb	r3, [r3, #0]
   235e2:	2bff      	cmp	r3, #255	; 0xff
   235e4:	d106      	bne.n	235f4 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   235e6:	683b      	ldr	r3, [r7, #0]
   235e8:	220c      	movs	r2, #12
   235ea:	18ba      	adds	r2, r7, r2
   235ec:	7812      	ldrb	r2, [r2, #0]
   235ee:	701a      	strb	r2, [r3, #0]
			return true;
   235f0:	2301      	movs	r3, #1
   235f2:	e00c      	b.n	2360e <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   235f4:	230f      	movs	r3, #15
   235f6:	18fb      	adds	r3, r7, r3
   235f8:	781a      	ldrb	r2, [r3, #0]
   235fa:	230f      	movs	r3, #15
   235fc:	18fb      	adds	r3, r7, r3
   235fe:	3201      	adds	r2, #1
   23600:	701a      	strb	r2, [r3, #0]
   23602:	230f      	movs	r3, #15
   23604:	18fb      	adds	r3, r7, r3
   23606:	781b      	ldrb	r3, [r3, #0]
   23608:	2b03      	cmp	r3, #3
   2360a:	d9d6      	bls.n	235ba <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   2360c:	2300      	movs	r3, #0
}
   2360e:	0018      	movs	r0, r3
   23610:	46bd      	mov	sp, r7
   23612:	b004      	add	sp, #16
   23614:	bd80      	pop	{r7, pc}
   23616:	46c0      	nop			; (mov r8, r8)
   23618:	2000041c 	.word	0x2000041c

0002361c <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   2361c:	b580      	push	{r7, lr}
   2361e:	b086      	sub	sp, #24
   23620:	af00      	add	r7, sp, #0
   23622:	603a      	str	r2, [r7, #0]
   23624:	1dfb      	adds	r3, r7, #7
   23626:	1c02      	adds	r2, r0, #0
   23628:	701a      	strb	r2, [r3, #0]
   2362a:	1dbb      	adds	r3, r7, #6
   2362c:	1c0a      	adds	r2, r1, #0
   2362e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23630:	2314      	movs	r3, #20
   23632:	18fb      	adds	r3, r7, r3
   23634:	2200      	movs	r2, #0
   23636:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   23638:	4b69      	ldr	r3, [pc, #420]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2363a:	685b      	ldr	r3, [r3, #4]
   2363c:	1dfa      	adds	r2, r7, #7
   2363e:	7812      	ldrb	r2, [r2, #0]
   23640:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   23642:	189b      	adds	r3, r3, r2
   23644:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   23646:	693b      	ldr	r3, [r7, #16]
   23648:	781a      	ldrb	r2, [r3, #0]
   2364a:	2308      	movs	r3, #8
   2364c:	18fb      	adds	r3, r7, r3
   2364e:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   23650:	1dfb      	adds	r3, r7, #7
   23652:	781b      	ldrb	r3, [r3, #0]
   23654:	009b      	lsls	r3, r3, #2
   23656:	b2da      	uxtb	r2, r3
   23658:	2308      	movs	r3, #8
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   2365e:	693b      	ldr	r3, [r7, #16]
   23660:	3340      	adds	r3, #64	; 0x40
   23662:	781a      	ldrb	r2, [r3, #0]
   23664:	2308      	movs	r3, #8
   23666:	18fb      	adds	r3, r7, r3
   23668:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   2366a:	1dfb      	adds	r3, r7, #7
   2366c:	781b      	ldrb	r3, [r3, #0]
   2366e:	009b      	lsls	r3, r3, #2
   23670:	b2db      	uxtb	r3, r3
   23672:	3301      	adds	r3, #1
   23674:	b2da      	uxtb	r2, r3
   23676:	2308      	movs	r3, #8
   23678:	18fb      	adds	r3, r7, r3
   2367a:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   2367c:	2317      	movs	r3, #23
   2367e:	18fb      	adds	r3, r7, r3
   23680:	2200      	movs	r2, #0
   23682:	701a      	strb	r2, [r3, #0]
   23684:	e03a      	b.n	236fc <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23686:	2316      	movs	r3, #22
   23688:	18fb      	adds	r3, r7, r3
   2368a:	2202      	movs	r2, #2
   2368c:	701a      	strb	r2, [r3, #0]
   2368e:	e029      	b.n	236e4 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23690:	2317      	movs	r3, #23
   23692:	18fb      	adds	r3, r7, r3
   23694:	781a      	ldrb	r2, [r3, #0]
   23696:	2308      	movs	r3, #8
   23698:	18fb      	adds	r3, r7, r3
   2369a:	0052      	lsls	r2, r2, #1
   2369c:	5cd2      	ldrb	r2, [r2, r3]
   2369e:	2316      	movs	r3, #22
   236a0:	18fb      	adds	r3, r7, r3
   236a2:	781b      	ldrb	r3, [r3, #0]
   236a4:	019b      	lsls	r3, r3, #6
   236a6:	6939      	ldr	r1, [r7, #16]
   236a8:	18cb      	adds	r3, r1, r3
   236aa:	781b      	ldrb	r3, [r3, #0]
   236ac:	429a      	cmp	r2, r3
   236ae:	d112      	bne.n	236d6 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   236b0:	2317      	movs	r3, #23
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   236b6:	1dfa      	adds	r2, r7, #7
   236b8:	7812      	ldrb	r2, [r2, #0]
   236ba:	0092      	lsls	r2, r2, #2
   236bc:	b2d1      	uxtb	r1, r2
   236be:	2216      	movs	r2, #22
   236c0:	18ba      	adds	r2, r7, r2
   236c2:	7812      	ldrb	r2, [r2, #0]
   236c4:	188a      	adds	r2, r1, r2
   236c6:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   236c8:	2208      	movs	r2, #8
   236ca:	18ba      	adds	r2, r7, r2
   236cc:	005b      	lsls	r3, r3, #1
   236ce:	18d3      	adds	r3, r2, r3
   236d0:	3301      	adds	r3, #1
   236d2:	1c0a      	adds	r2, r1, #0
   236d4:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   236d6:	2316      	movs	r3, #22
   236d8:	18fb      	adds	r3, r7, r3
   236da:	781a      	ldrb	r2, [r3, #0]
   236dc:	2316      	movs	r3, #22
   236de:	18fb      	adds	r3, r7, r3
   236e0:	3201      	adds	r2, #1
   236e2:	701a      	strb	r2, [r3, #0]
   236e4:	2316      	movs	r3, #22
   236e6:	18fb      	adds	r3, r7, r3
   236e8:	781b      	ldrb	r3, [r3, #0]
   236ea:	2b03      	cmp	r3, #3
   236ec:	d9d0      	bls.n	23690 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   236ee:	2317      	movs	r3, #23
   236f0:	18fb      	adds	r3, r7, r3
   236f2:	781a      	ldrb	r2, [r3, #0]
   236f4:	2317      	movs	r3, #23
   236f6:	18fb      	adds	r3, r7, r3
   236f8:	3201      	adds	r2, #1
   236fa:	701a      	strb	r2, [r3, #0]
   236fc:	2317      	movs	r3, #23
   236fe:	18fb      	adds	r3, r7, r3
   23700:	781b      	ldrb	r3, [r3, #0]
   23702:	2b01      	cmp	r3, #1
   23704:	d9bf      	bls.n	23686 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23706:	2315      	movs	r3, #21
   23708:	18fb      	adds	r3, r7, r3
   2370a:	2200      	movs	r2, #0
   2370c:	701a      	strb	r2, [r3, #0]
   2370e:	e051      	b.n	237b4 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23710:	4b33      	ldr	r3, [pc, #204]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23712:	2287      	movs	r2, #135	; 0x87
   23714:	5c9b      	ldrb	r3, [r3, r2]
   23716:	009a      	lsls	r2, r3, #2
   23718:	2315      	movs	r3, #21
   2371a:	18fb      	adds	r3, r7, r3
   2371c:	781b      	ldrb	r3, [r3, #0]
   2371e:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23720:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23722:	4b30      	ldr	r3, [pc, #192]	; (237e4 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23724:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23726:	2315      	movs	r3, #21
   23728:	18fb      	adds	r3, r7, r3
   2372a:	781a      	ldrb	r2, [r3, #0]
   2372c:	2308      	movs	r3, #8
   2372e:	18fb      	adds	r3, r7, r3
   23730:	0052      	lsls	r2, r2, #1
   23732:	5cd3      	ldrb	r3, [r2, r3]
   23734:	1dba      	adds	r2, r7, #6
   23736:	7812      	ldrb	r2, [r2, #0]
   23738:	429a      	cmp	r2, r3
   2373a:	d10d      	bne.n	23758 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   2373c:	4b28      	ldr	r3, [pc, #160]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2373e:	1dba      	adds	r2, r7, #6
   23740:	2188      	movs	r1, #136	; 0x88
   23742:	7812      	ldrb	r2, [r2, #0]
   23744:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   23746:	4b26      	ldr	r3, [pc, #152]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23748:	228c      	movs	r2, #140	; 0x8c
   2374a:	6839      	ldr	r1, [r7, #0]
   2374c:	189b      	adds	r3, r3, r2
   2374e:	223c      	movs	r2, #60	; 0x3c
   23750:	0018      	movs	r0, r3
   23752:	4b25      	ldr	r3, [pc, #148]	; (237e8 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   23754:	4798      	blx	r3
   23756:	e00e      	b.n	23776 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   23758:	2315      	movs	r3, #21
   2375a:	18fb      	adds	r3, r7, r3
   2375c:	781b      	ldrb	r3, [r3, #0]
   2375e:	2208      	movs	r2, #8
   23760:	18ba      	adds	r2, r7, r2
   23762:	005b      	lsls	r3, r3, #1
   23764:	18d3      	adds	r3, r2, r3
   23766:	3301      	adds	r3, #1
   23768:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   2376a:	b29b      	uxth	r3, r3
   2376c:	4a1f      	ldr	r2, [pc, #124]	; (237ec <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2376e:	0011      	movs	r1, r2
   23770:	0018      	movs	r0, r3
   23772:	4b1f      	ldr	r3, [pc, #124]	; (237f0 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   23774:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23776:	68fb      	ldr	r3, [r7, #12]
   23778:	b29b      	uxth	r3, r3
   2377a:	4a1c      	ldr	r2, [pc, #112]	; (237ec <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2377c:	0011      	movs	r1, r2
   2377e:	0018      	movs	r0, r3
   23780:	4b1c      	ldr	r3, [pc, #112]	; (237f4 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23782:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23784:	2315      	movs	r3, #21
   23786:	18fb      	adds	r3, r7, r3
   23788:	781a      	ldrb	r2, [r3, #0]
   2378a:	2308      	movs	r3, #8
   2378c:	18fb      	adds	r3, r7, r3
   2378e:	0052      	lsls	r2, r2, #1
   23790:	5cd3      	ldrb	r3, [r2, r3]
   23792:	0019      	movs	r1, r3
   23794:	68fb      	ldr	r3, [r7, #12]
   23796:	b2da      	uxtb	r2, r3
   23798:	4b11      	ldr	r3, [pc, #68]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2379a:	185b      	adds	r3, r3, r1
   2379c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2379e:	4b10      	ldr	r3, [pc, #64]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   237a0:	22c8      	movs	r2, #200	; 0xc8
   237a2:	2101      	movs	r1, #1
   237a4:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   237a6:	2315      	movs	r3, #21
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	781a      	ldrb	r2, [r3, #0]
   237ac:	2315      	movs	r3, #21
   237ae:	18fb      	adds	r3, r7, r3
   237b0:	3201      	adds	r2, #1
   237b2:	701a      	strb	r2, [r3, #0]
   237b4:	2315      	movs	r3, #21
   237b6:	18fb      	adds	r3, r7, r3
   237b8:	781b      	ldrb	r3, [r3, #0]
   237ba:	2b01      	cmp	r3, #1
   237bc:	d9a8      	bls.n	23710 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   237be:	1dfb      	adds	r3, r7, #7
   237c0:	781b      	ldrb	r3, [r3, #0]
   237c2:	0018      	movs	r0, r3
   237c4:	4b0c      	ldr	r3, [pc, #48]	; (237f8 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   237c6:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   237c8:	4b05      	ldr	r3, [pc, #20]	; (237e0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   237ca:	1dfa      	adds	r2, r7, #7
   237cc:	2187      	movs	r1, #135	; 0x87
   237ce:	7812      	ldrb	r2, [r2, #0]
   237d0:	545a      	strb	r2, [r3, r1]

	return error_code;
   237d2:	2314      	movs	r3, #20
   237d4:	18fb      	adds	r3, r7, r3
   237d6:	781b      	ldrb	r3, [r3, #0]
}
   237d8:	0018      	movs	r0, r3
   237da:	46bd      	mov	sp, r7
   237dc:	b006      	add	sp, #24
   237de:	bd80      	pop	{r7, pc}
   237e0:	2000041c 	.word	0x2000041c
   237e4:	00023c19 	.word	0x00023c19
   237e8:	00028e5d 	.word	0x00028e5d
   237ec:	200004a4 	.word	0x200004a4
   237f0:	00023171 	.word	0x00023171
   237f4:	000230d5 	.word	0x000230d5
   237f8:	0002308d 	.word	0x0002308d

000237fc <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   237fc:	b590      	push	{r4, r7, lr}
   237fe:	b095      	sub	sp, #84	; 0x54
   23800:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23802:	2340      	movs	r3, #64	; 0x40
   23804:	18fb      	adds	r3, r7, r3
   23806:	4a29      	ldr	r2, [pc, #164]	; (238ac <_eeprom_emulator_create_master_page+0xb0>)
   23808:	ca13      	ldmia	r2!, {r0, r1, r4}
   2380a:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   2380c:	003b      	movs	r3, r7
   2380e:	2240      	movs	r2, #64	; 0x40
   23810:	21ff      	movs	r1, #255	; 0xff
   23812:	0018      	movs	r0, r3
   23814:	4b26      	ldr	r3, [pc, #152]	; (238b0 <_eeprom_emulator_create_master_page+0xb4>)
   23816:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23818:	234f      	movs	r3, #79	; 0x4f
   2381a:	18fb      	adds	r3, r7, r3
   2381c:	2200      	movs	r2, #0
   2381e:	701a      	strb	r2, [r3, #0]
   23820:	e013      	b.n	2384a <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   23822:	234f      	movs	r3, #79	; 0x4f
   23824:	18fb      	adds	r3, r7, r3
   23826:	781a      	ldrb	r2, [r3, #0]
   23828:	234f      	movs	r3, #79	; 0x4f
   2382a:	18fb      	adds	r3, r7, r3
   2382c:	7819      	ldrb	r1, [r3, #0]
   2382e:	2340      	movs	r3, #64	; 0x40
   23830:	18fb      	adds	r3, r7, r3
   23832:	0089      	lsls	r1, r1, #2
   23834:	58c9      	ldr	r1, [r1, r3]
   23836:	003b      	movs	r3, r7
   23838:	0092      	lsls	r2, r2, #2
   2383a:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   2383c:	234f      	movs	r3, #79	; 0x4f
   2383e:	18fb      	adds	r3, r7, r3
   23840:	781a      	ldrb	r2, [r3, #0]
   23842:	234f      	movs	r3, #79	; 0x4f
   23844:	18fb      	adds	r3, r7, r3
   23846:	3201      	adds	r2, #1
   23848:	701a      	strb	r2, [r3, #0]
   2384a:	234f      	movs	r3, #79	; 0x4f
   2384c:	18fb      	adds	r3, r7, r3
   2384e:	781b      	ldrb	r3, [r3, #0]
   23850:	2b02      	cmp	r3, #2
   23852:	d9e6      	bls.n	23822 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   23854:	003b      	movs	r3, r7
   23856:	2201      	movs	r2, #1
   23858:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   2385a:	003b      	movs	r3, r7
   2385c:	2201      	movs	r2, #1
   2385e:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   23860:	003b      	movs	r3, r7
   23862:	2200      	movs	r2, #0
   23864:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   23866:	003b      	movs	r3, r7
   23868:	2200      	movs	r2, #0
   2386a:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   2386c:	4b11      	ldr	r3, [pc, #68]	; (238b4 <_eeprom_emulator_create_master_page+0xb8>)
   2386e:	891b      	ldrh	r3, [r3, #8]
   23870:	3b01      	subs	r3, #1
   23872:	2b00      	cmp	r3, #0
   23874:	da00      	bge.n	23878 <_eeprom_emulator_create_master_page+0x7c>
   23876:	3303      	adds	r3, #3
   23878:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   2387a:	b2db      	uxtb	r3, r3
   2387c:	0018      	movs	r0, r3
   2387e:	4b0e      	ldr	r3, [pc, #56]	; (238b8 <_eeprom_emulator_create_master_page+0xbc>)
   23880:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   23882:	4b0c      	ldr	r3, [pc, #48]	; (238b4 <_eeprom_emulator_create_master_page+0xb8>)
   23884:	891b      	ldrh	r3, [r3, #8]
   23886:	3b01      	subs	r3, #1
   23888:	b29b      	uxth	r3, r3
   2388a:	003a      	movs	r2, r7
   2388c:	0011      	movs	r1, r2
   2388e:	0018      	movs	r0, r3
   23890:	4b0a      	ldr	r3, [pc, #40]	; (238bc <_eeprom_emulator_create_master_page+0xc0>)
   23892:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   23894:	4b07      	ldr	r3, [pc, #28]	; (238b4 <_eeprom_emulator_create_master_page+0xb8>)
   23896:	891b      	ldrh	r3, [r3, #8]
   23898:	3b01      	subs	r3, #1
   2389a:	b29b      	uxth	r3, r3
   2389c:	0018      	movs	r0, r3
   2389e:	4b08      	ldr	r3, [pc, #32]	; (238c0 <_eeprom_emulator_create_master_page+0xc4>)
   238a0:	4798      	blx	r3
}
   238a2:	46c0      	nop			; (mov r8, r8)
   238a4:	46bd      	mov	sp, r7
   238a6:	b015      	add	sp, #84	; 0x54
   238a8:	bd90      	pop	{r4, r7, pc}
   238aa:	46c0      	nop			; (mov r8, r8)
   238ac:	0002acd4 	.word	0x0002acd4
   238b0:	00028e93 	.word	0x00028e93
   238b4:	2000041c 	.word	0x2000041c
   238b8:	0002308d 	.word	0x0002308d
   238bc:	000230d5 	.word	0x000230d5
   238c0:	00023125 	.word	0x00023125

000238c4 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   238c4:	b590      	push	{r4, r7, lr}
   238c6:	b095      	sub	sp, #84	; 0x54
   238c8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   238ca:	2340      	movs	r3, #64	; 0x40
   238cc:	18fb      	adds	r3, r7, r3
   238ce:	4a22      	ldr	r2, [pc, #136]	; (23958 <_eeprom_emulator_verify_master_page+0x94>)
   238d0:	ca13      	ldmia	r2!, {r0, r1, r4}
   238d2:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   238d4:	4b21      	ldr	r3, [pc, #132]	; (2395c <_eeprom_emulator_verify_master_page+0x98>)
   238d6:	891b      	ldrh	r3, [r3, #8]
   238d8:	3b01      	subs	r3, #1
   238da:	b29b      	uxth	r3, r3
   238dc:	003a      	movs	r2, r7
   238de:	0011      	movs	r1, r2
   238e0:	0018      	movs	r0, r3
   238e2:	4b1f      	ldr	r3, [pc, #124]	; (23960 <_eeprom_emulator_verify_master_page+0x9c>)
   238e4:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   238e6:	234f      	movs	r3, #79	; 0x4f
   238e8:	18fb      	adds	r3, r7, r3
   238ea:	2200      	movs	r2, #0
   238ec:	701a      	strb	r2, [r3, #0]
   238ee:	e017      	b.n	23920 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   238f0:	234f      	movs	r3, #79	; 0x4f
   238f2:	18fb      	adds	r3, r7, r3
   238f4:	781a      	ldrb	r2, [r3, #0]
   238f6:	003b      	movs	r3, r7
   238f8:	0092      	lsls	r2, r2, #2
   238fa:	58d2      	ldr	r2, [r2, r3]
   238fc:	234f      	movs	r3, #79	; 0x4f
   238fe:	18fb      	adds	r3, r7, r3
   23900:	7819      	ldrb	r1, [r3, #0]
   23902:	2340      	movs	r3, #64	; 0x40
   23904:	18fb      	adds	r3, r7, r3
   23906:	0089      	lsls	r1, r1, #2
   23908:	58cb      	ldr	r3, [r1, r3]
   2390a:	429a      	cmp	r2, r3
   2390c:	d001      	beq.n	23912 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   2390e:	231a      	movs	r3, #26
   23910:	e01e      	b.n	23950 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23912:	234f      	movs	r3, #79	; 0x4f
   23914:	18fb      	adds	r3, r7, r3
   23916:	781a      	ldrb	r2, [r3, #0]
   23918:	234f      	movs	r3, #79	; 0x4f
   2391a:	18fb      	adds	r3, r7, r3
   2391c:	3201      	adds	r2, #1
   2391e:	701a      	strb	r2, [r3, #0]
   23920:	234f      	movs	r3, #79	; 0x4f
   23922:	18fb      	adds	r3, r7, r3
   23924:	781b      	ldrb	r3, [r3, #0]
   23926:	2b02      	cmp	r3, #2
   23928:	d9e2      	bls.n	238f0 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   2392a:	003b      	movs	r3, r7
   2392c:	7bdb      	ldrb	r3, [r3, #15]
   2392e:	2b01      	cmp	r3, #1
   23930:	d001      	beq.n	23936 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   23932:	2310      	movs	r3, #16
   23934:	e00c      	b.n	23950 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   23936:	003b      	movs	r3, r7
   23938:	7b1b      	ldrb	r3, [r3, #12]
   2393a:	2b01      	cmp	r3, #1
   2393c:	d001      	beq.n	23942 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   2393e:	2310      	movs	r3, #16
   23940:	e006      	b.n	23950 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   23942:	003b      	movs	r3, r7
   23944:	7b5b      	ldrb	r3, [r3, #13]
   23946:	2b00      	cmp	r3, #0
   23948:	d001      	beq.n	2394e <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   2394a:	2310      	movs	r3, #16
   2394c:	e000      	b.n	23950 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   2394e:	2300      	movs	r3, #0
}
   23950:	0018      	movs	r0, r3
   23952:	46bd      	mov	sp, r7
   23954:	b015      	add	sp, #84	; 0x54
   23956:	bd90      	pop	{r4, r7, pc}
   23958:	0002acd4 	.word	0x0002acd4
   2395c:	2000041c 	.word	0x2000041c
   23960:	00023171 	.word	0x00023171

00023964 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   23964:	b590      	push	{r4, r7, lr}
   23966:	b087      	sub	sp, #28
   23968:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2396a:	2317      	movs	r3, #23
   2396c:	18fb      	adds	r3, r7, r3
   2396e:	2200      	movs	r2, #0
   23970:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   23972:	2310      	movs	r3, #16
   23974:	18fb      	adds	r3, r7, r3
   23976:	0018      	movs	r0, r3
   23978:	4b2e      	ldr	r3, [pc, #184]	; (23a34 <eeprom_emulator_init+0xd0>)
   2397a:	4798      	blx	r3
	config.manual_page_write = true;
   2397c:	2310      	movs	r3, #16
   2397e:	18fb      	adds	r3, r7, r3
   23980:	2201      	movs	r2, #1
   23982:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   23984:	2317      	movs	r3, #23
   23986:	18fc      	adds	r4, r7, r3
   23988:	2310      	movs	r3, #16
   2398a:	18fb      	adds	r3, r7, r3
   2398c:	0018      	movs	r0, r3
   2398e:	4b2a      	ldr	r3, [pc, #168]	; (23a38 <eeprom_emulator_init+0xd4>)
   23990:	4798      	blx	r3
   23992:	0003      	movs	r3, r0
   23994:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23996:	2317      	movs	r3, #23
   23998:	18fb      	adds	r3, r7, r3
   2399a:	781b      	ldrb	r3, [r3, #0]
   2399c:	2b05      	cmp	r3, #5
   2399e:	d0f1      	beq.n	23984 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   239a0:	1d3b      	adds	r3, r7, #4
   239a2:	0018      	movs	r0, r3
   239a4:	4b25      	ldr	r3, [pc, #148]	; (23a3c <eeprom_emulator_init+0xd8>)
   239a6:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   239a8:	1d3b      	adds	r3, r7, #4
   239aa:	685b      	ldr	r3, [r3, #4]
   239ac:	2b0b      	cmp	r3, #11
   239ae:	d801      	bhi.n	239b4 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   239b0:	2316      	movs	r3, #22
   239b2:	e03b      	b.n	23a2c <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   239b4:	1d3b      	adds	r3, r7, #4
   239b6:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   239b8:	b29a      	uxth	r2, r3
   239ba:	4b21      	ldr	r3, [pc, #132]	; (23a40 <eeprom_emulator_init+0xdc>)
   239bc:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   239be:	1d3b      	adds	r3, r7, #4
   239c0:	685b      	ldr	r3, [r3, #4]
   239c2:	3b08      	subs	r3, #8
   239c4:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   239c6:	b2da      	uxtb	r2, r3
   239c8:	4b1d      	ldr	r3, [pc, #116]	; (23a40 <eeprom_emulator_init+0xdc>)
   239ca:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   239cc:	4b1c      	ldr	r3, [pc, #112]	; (23a40 <eeprom_emulator_init+0xdc>)
   239ce:	891b      	ldrh	r3, [r3, #8]
   239d0:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   239d2:	0013      	movs	r3, r2
   239d4:	069b      	lsls	r3, r3, #26
   239d6:	1a9b      	subs	r3, r3, r2
   239d8:	019b      	lsls	r3, r3, #6
   239da:	2280      	movs	r2, #128	; 0x80
   239dc:	02d2      	lsls	r2, r2, #11
   239de:	4694      	mov	ip, r2
   239e0:	4463      	add	r3, ip
   239e2:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   239e4:	4b16      	ldr	r3, [pc, #88]	; (23a40 <eeprom_emulator_init+0xdc>)
   239e6:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   239e8:	4b15      	ldr	r3, [pc, #84]	; (23a40 <eeprom_emulator_init+0xdc>)
   239ea:	22c8      	movs	r2, #200	; 0xc8
   239ec:	2100      	movs	r1, #0
   239ee:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   239f0:	4b14      	ldr	r3, [pc, #80]	; (23a44 <eeprom_emulator_init+0xe0>)
   239f2:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   239f4:	4b12      	ldr	r3, [pc, #72]	; (23a40 <eeprom_emulator_init+0xdc>)
   239f6:	2287      	movs	r2, #135	; 0x87
   239f8:	5c9b      	ldrb	r3, [r3, r2]
   239fa:	2b3f      	cmp	r3, #63	; 0x3f
   239fc:	d101      	bne.n	23a02 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   239fe:	231a      	movs	r3, #26
   23a00:	e014      	b.n	23a2c <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   23a02:	2317      	movs	r3, #23
   23a04:	18fc      	adds	r4, r7, r3
   23a06:	4b10      	ldr	r3, [pc, #64]	; (23a48 <eeprom_emulator_init+0xe4>)
   23a08:	4798      	blx	r3
   23a0a:	0003      	movs	r3, r0
   23a0c:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   23a0e:	2317      	movs	r3, #23
   23a10:	18fb      	adds	r3, r7, r3
   23a12:	781b      	ldrb	r3, [r3, #0]
   23a14:	2b00      	cmp	r3, #0
   23a16:	d003      	beq.n	23a20 <eeprom_emulator_init+0xbc>
		return error_code;
   23a18:	2317      	movs	r3, #23
   23a1a:	18fb      	adds	r3, r7, r3
   23a1c:	781b      	ldrb	r3, [r3, #0]
   23a1e:	e005      	b.n	23a2c <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   23a20:	4b07      	ldr	r3, [pc, #28]	; (23a40 <eeprom_emulator_init+0xdc>)
   23a22:	2201      	movs	r2, #1
   23a24:	701a      	strb	r2, [r3, #0]

	return error_code;
   23a26:	2317      	movs	r3, #23
   23a28:	18fb      	adds	r3, r7, r3
   23a2a:	781b      	ldrb	r3, [r3, #0]
}
   23a2c:	0018      	movs	r0, r3
   23a2e:	46bd      	mov	sp, r7
   23a30:	b007      	add	sp, #28
   23a32:	bd90      	pop	{r4, r7, pc}
   23a34:	00023051 	.word	0x00023051
   23a38:	00022a2d 	.word	0x00022a2d
   23a3c:	00022f0d 	.word	0x00022f0d
   23a40:	2000041c 	.word	0x2000041c
   23a44:	00023431 	.word	0x00023431
   23a48:	000238c5 	.word	0x000238c5

00023a4c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   23a4c:	b580      	push	{r7, lr}
   23a4e:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   23a50:	4b04      	ldr	r3, [pc, #16]	; (23a64 <eeprom_emulator_erase_memory+0x18>)
   23a52:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   23a54:	4b04      	ldr	r3, [pc, #16]	; (23a68 <eeprom_emulator_erase_memory+0x1c>)
   23a56:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   23a58:	4b04      	ldr	r3, [pc, #16]	; (23a6c <eeprom_emulator_erase_memory+0x20>)
   23a5a:	4798      	blx	r3
}
   23a5c:	46c0      	nop			; (mov r8, r8)
   23a5e:	46bd      	mov	sp, r7
   23a60:	bd80      	pop	{r7, pc}
   23a62:	46c0      	nop			; (mov r8, r8)
   23a64:	000231c1 	.word	0x000231c1
   23a68:	000237fd 	.word	0x000237fd
   23a6c:	00023431 	.word	0x00023431

00023a70 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23a70:	b590      	push	{r4, r7, lr}
   23a72:	b085      	sub	sp, #20
   23a74:	af00      	add	r7, sp, #0
   23a76:	0002      	movs	r2, r0
   23a78:	6039      	str	r1, [r7, #0]
   23a7a:	1dfb      	adds	r3, r7, #7
   23a7c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   23a7e:	4b38      	ldr	r3, [pc, #224]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23a80:	781b      	ldrb	r3, [r3, #0]
   23a82:	2201      	movs	r2, #1
   23a84:	4053      	eors	r3, r2
   23a86:	b2db      	uxtb	r3, r3
   23a88:	2b00      	cmp	r3, #0
   23a8a:	d001      	beq.n	23a90 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23a8c:	231f      	movs	r3, #31
   23a8e:	e063      	b.n	23b58 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23a90:	4b33      	ldr	r3, [pc, #204]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23a92:	7a9b      	ldrb	r3, [r3, #10]
   23a94:	1dfa      	adds	r2, r7, #7
   23a96:	7812      	ldrb	r2, [r2, #0]
   23a98:	429a      	cmp	r2, r3
   23a9a:	d301      	bcc.n	23aa0 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23a9c:	2318      	movs	r3, #24
   23a9e:	e05b      	b.n	23b58 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   23aa0:	4b2f      	ldr	r3, [pc, #188]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23aa2:	22c8      	movs	r2, #200	; 0xc8
   23aa4:	5c9b      	ldrb	r3, [r3, r2]
   23aa6:	2b00      	cmp	r3, #0
   23aa8:	d008      	beq.n	23abc <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   23aaa:	4b2d      	ldr	r3, [pc, #180]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23aac:	2288      	movs	r2, #136	; 0x88
   23aae:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23ab0:	1dfa      	adds	r2, r7, #7
   23ab2:	7812      	ldrb	r2, [r2, #0]
   23ab4:	429a      	cmp	r2, r3
   23ab6:	d001      	beq.n	23abc <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23ab8:	4b2a      	ldr	r3, [pc, #168]	; (23b64 <eeprom_emulator_write_page+0xf4>)
   23aba:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   23abc:	230e      	movs	r3, #14
   23abe:	18fb      	adds	r3, r7, r3
   23ac0:	2200      	movs	r2, #0
   23ac2:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   23ac4:	1dfb      	adds	r3, r7, #7
   23ac6:	781b      	ldrb	r3, [r3, #0]
   23ac8:	4a25      	ldr	r2, [pc, #148]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23aca:	18d3      	adds	r3, r2, r3
   23acc:	7adb      	ldrb	r3, [r3, #11]
   23ace:	220f      	movs	r2, #15
   23ad0:	18bc      	adds	r4, r7, r2
   23ad2:	220e      	movs	r2, #14
   23ad4:	18ba      	adds	r2, r7, r2
   23ad6:	0011      	movs	r1, r2
   23ad8:	0018      	movs	r0, r3
   23ada:	4b23      	ldr	r3, [pc, #140]	; (23b68 <eeprom_emulator_write_page+0xf8>)
   23adc:	4798      	blx	r3
   23ade:	0003      	movs	r3, r0
   23ae0:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   23ae2:	230f      	movs	r3, #15
   23ae4:	18fb      	adds	r3, r7, r3
   23ae6:	781b      	ldrb	r3, [r3, #0]
   23ae8:	2201      	movs	r2, #1
   23aea:	4053      	eors	r3, r2
   23aec:	b2db      	uxtb	r3, r3
   23aee:	2b00      	cmp	r3, #0
   23af0:	d00e      	beq.n	23b10 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   23af2:	1dfb      	adds	r3, r7, #7
   23af4:	781b      	ldrb	r3, [r3, #0]
   23af6:	4a1a      	ldr	r2, [pc, #104]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23af8:	18d3      	adds	r3, r2, r3
   23afa:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   23afc:	089b      	lsrs	r3, r3, #2
   23afe:	b2d8      	uxtb	r0, r3
   23b00:	683a      	ldr	r2, [r7, #0]
   23b02:	1dfb      	adds	r3, r7, #7
   23b04:	781b      	ldrb	r3, [r3, #0]
   23b06:	0019      	movs	r1, r3
   23b08:	4b18      	ldr	r3, [pc, #96]	; (23b6c <eeprom_emulator_write_page+0xfc>)
   23b0a:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   23b0c:	2300      	movs	r3, #0
   23b0e:	e023      	b.n	23b58 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   23b10:	4b13      	ldr	r3, [pc, #76]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23b12:	1dfa      	adds	r2, r7, #7
   23b14:	2188      	movs	r1, #136	; 0x88
   23b16:	7812      	ldrb	r2, [r2, #0]
   23b18:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   23b1a:	4b11      	ldr	r3, [pc, #68]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23b1c:	228c      	movs	r2, #140	; 0x8c
   23b1e:	6839      	ldr	r1, [r7, #0]
   23b20:	189b      	adds	r3, r3, r2
   23b22:	223c      	movs	r2, #60	; 0x3c
   23b24:	0018      	movs	r0, r3
   23b26:	4b12      	ldr	r3, [pc, #72]	; (23b70 <eeprom_emulator_write_page+0x100>)
   23b28:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23b2a:	230e      	movs	r3, #14
   23b2c:	18fb      	adds	r3, r7, r3
   23b2e:	781b      	ldrb	r3, [r3, #0]
   23b30:	b29b      	uxth	r3, r3
   23b32:	4a10      	ldr	r2, [pc, #64]	; (23b74 <eeprom_emulator_write_page+0x104>)
   23b34:	0011      	movs	r1, r2
   23b36:	0018      	movs	r0, r3
   23b38:	4b0f      	ldr	r3, [pc, #60]	; (23b78 <eeprom_emulator_write_page+0x108>)
   23b3a:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   23b3c:	1dfb      	adds	r3, r7, #7
   23b3e:	781b      	ldrb	r3, [r3, #0]
   23b40:	220e      	movs	r2, #14
   23b42:	18ba      	adds	r2, r7, r2
   23b44:	7811      	ldrb	r1, [r2, #0]
   23b46:	4a06      	ldr	r2, [pc, #24]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23b48:	18d3      	adds	r3, r2, r3
   23b4a:	1c0a      	adds	r2, r1, #0
   23b4c:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   23b4e:	4b04      	ldr	r3, [pc, #16]	; (23b60 <eeprom_emulator_write_page+0xf0>)
   23b50:	22c8      	movs	r2, #200	; 0xc8
   23b52:	2101      	movs	r1, #1
   23b54:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   23b56:	2300      	movs	r3, #0
}
   23b58:	0018      	movs	r0, r3
   23b5a:	46bd      	mov	sp, r7
   23b5c:	b005      	add	sp, #20
   23b5e:	bd90      	pop	{r4, r7, pc}
   23b60:	2000041c 	.word	0x2000041c
   23b64:	00023c19 	.word	0x00023c19
   23b68:	00023585 	.word	0x00023585
   23b6c:	0002361d 	.word	0x0002361d
   23b70:	00028e5d 	.word	0x00028e5d
   23b74:	200004a4 	.word	0x200004a4
   23b78:	000230d5 	.word	0x000230d5

00023b7c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   23b7c:	b580      	push	{r7, lr}
   23b7e:	b092      	sub	sp, #72	; 0x48
   23b80:	af00      	add	r7, sp, #0
   23b82:	0002      	movs	r2, r0
   23b84:	6039      	str	r1, [r7, #0]
   23b86:	1dfb      	adds	r3, r7, #7
   23b88:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   23b8a:	4b20      	ldr	r3, [pc, #128]	; (23c0c <eeprom_emulator_read_page+0x90>)
   23b8c:	781b      	ldrb	r3, [r3, #0]
   23b8e:	2201      	movs	r2, #1
   23b90:	4053      	eors	r3, r2
   23b92:	b2db      	uxtb	r3, r3
   23b94:	2b00      	cmp	r3, #0
   23b96:	d001      	beq.n	23b9c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   23b98:	231f      	movs	r3, #31
   23b9a:	e033      	b.n	23c04 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   23b9c:	4b1b      	ldr	r3, [pc, #108]	; (23c0c <eeprom_emulator_read_page+0x90>)
   23b9e:	7a9b      	ldrb	r3, [r3, #10]
   23ba0:	1dfa      	adds	r2, r7, #7
   23ba2:	7812      	ldrb	r2, [r2, #0]
   23ba4:	429a      	cmp	r2, r3
   23ba6:	d301      	bcc.n	23bac <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   23ba8:	2318      	movs	r3, #24
   23baa:	e02b      	b.n	23c04 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   23bac:	4b17      	ldr	r3, [pc, #92]	; (23c0c <eeprom_emulator_read_page+0x90>)
   23bae:	22c8      	movs	r2, #200	; 0xc8
   23bb0:	5c9b      	ldrb	r3, [r3, r2]
   23bb2:	2b00      	cmp	r3, #0
   23bb4:	d010      	beq.n	23bd8 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   23bb6:	4b15      	ldr	r3, [pc, #84]	; (23c0c <eeprom_emulator_read_page+0x90>)
   23bb8:	2288      	movs	r2, #136	; 0x88
   23bba:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   23bbc:	1dfa      	adds	r2, r7, #7
   23bbe:	7812      	ldrb	r2, [r2, #0]
   23bc0:	429a      	cmp	r2, r3
   23bc2:	d109      	bne.n	23bd8 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   23bc4:	6839      	ldr	r1, [r7, #0]
   23bc6:	4b11      	ldr	r3, [pc, #68]	; (23c0c <eeprom_emulator_read_page+0x90>)
   23bc8:	228c      	movs	r2, #140	; 0x8c
   23bca:	0008      	movs	r0, r1
   23bcc:	189b      	adds	r3, r3, r2
   23bce:	223c      	movs	r2, #60	; 0x3c
   23bd0:	0019      	movs	r1, r3
   23bd2:	4b0f      	ldr	r3, [pc, #60]	; (23c10 <eeprom_emulator_read_page+0x94>)
   23bd4:	4798      	blx	r3
   23bd6:	e014      	b.n	23c02 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   23bd8:	1dfb      	adds	r3, r7, #7
   23bda:	781b      	ldrb	r3, [r3, #0]
   23bdc:	4a0b      	ldr	r2, [pc, #44]	; (23c0c <eeprom_emulator_read_page+0x90>)
   23bde:	18d3      	adds	r3, r2, r3
   23be0:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   23be2:	b29b      	uxth	r3, r3
   23be4:	2208      	movs	r2, #8
   23be6:	18ba      	adds	r2, r7, r2
   23be8:	0011      	movs	r1, r2
   23bea:	0018      	movs	r0, r3
   23bec:	4b09      	ldr	r3, [pc, #36]	; (23c14 <eeprom_emulator_read_page+0x98>)
   23bee:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   23bf0:	683a      	ldr	r2, [r7, #0]
   23bf2:	2308      	movs	r3, #8
   23bf4:	18fb      	adds	r3, r7, r3
   23bf6:	0010      	movs	r0, r2
   23bf8:	3304      	adds	r3, #4
   23bfa:	223c      	movs	r2, #60	; 0x3c
   23bfc:	0019      	movs	r1, r3
   23bfe:	4b04      	ldr	r3, [pc, #16]	; (23c10 <eeprom_emulator_read_page+0x94>)
   23c00:	4798      	blx	r3
	}

	return STATUS_OK;
   23c02:	2300      	movs	r3, #0
}
   23c04:	0018      	movs	r0, r3
   23c06:	46bd      	mov	sp, r7
   23c08:	b012      	add	sp, #72	; 0x48
   23c0a:	bd80      	pop	{r7, pc}
   23c0c:	2000041c 	.word	0x2000041c
   23c10:	00028e5d 	.word	0x00028e5d
   23c14:	00023171 	.word	0x00023171

00023c18 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   23c18:	b580      	push	{r7, lr}
   23c1a:	b082      	sub	sp, #8
   23c1c:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   23c1e:	1dfb      	adds	r3, r7, #7
   23c20:	2200      	movs	r2, #0
   23c22:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   23c24:	4b10      	ldr	r3, [pc, #64]	; (23c68 <eeprom_emulator_commit_page_buffer+0x50>)
   23c26:	22c8      	movs	r2, #200	; 0xc8
   23c28:	5c9b      	ldrb	r3, [r3, r2]
   23c2a:	2201      	movs	r2, #1
   23c2c:	4053      	eors	r3, r2
   23c2e:	b2db      	uxtb	r3, r3
   23c30:	2b00      	cmp	r3, #0
   23c32:	d001      	beq.n	23c38 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   23c34:	2300      	movs	r3, #0
   23c36:	e013      	b.n	23c60 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   23c38:	1dbb      	adds	r3, r7, #6
   23c3a:	4a0b      	ldr	r2, [pc, #44]	; (23c68 <eeprom_emulator_commit_page_buffer+0x50>)
   23c3c:	2188      	movs	r1, #136	; 0x88
   23c3e:	5c52      	ldrb	r2, [r2, r1]
   23c40:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   23c42:	1dbb      	adds	r3, r7, #6
   23c44:	781b      	ldrb	r3, [r3, #0]
   23c46:	4a08      	ldr	r2, [pc, #32]	; (23c68 <eeprom_emulator_commit_page_buffer+0x50>)
   23c48:	18d3      	adds	r3, r2, r3
   23c4a:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   23c4c:	b29b      	uxth	r3, r3
   23c4e:	0018      	movs	r0, r3
   23c50:	4b06      	ldr	r3, [pc, #24]	; (23c6c <eeprom_emulator_commit_page_buffer+0x54>)
   23c52:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   23c54:	4b04      	ldr	r3, [pc, #16]	; (23c68 <eeprom_emulator_commit_page_buffer+0x50>)
   23c56:	22c8      	movs	r2, #200	; 0xc8
   23c58:	2100      	movs	r1, #0
   23c5a:	5499      	strb	r1, [r3, r2]

	return error_code;
   23c5c:	1dfb      	adds	r3, r7, #7
   23c5e:	781b      	ldrb	r3, [r3, #0]
}
   23c60:	0018      	movs	r0, r3
   23c62:	46bd      	mov	sp, r7
   23c64:	b002      	add	sp, #8
   23c66:	bd80      	pop	{r7, pc}
   23c68:	2000041c 	.word	0x2000041c
   23c6c:	00023125 	.word	0x00023125

00023c70 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23c70:	b580      	push	{r7, lr}
   23c72:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   23c74:	46c0      	nop			; (mov r8, r8)
   23c76:	46bd      	mov	sp, r7
   23c78:	bd80      	pop	{r7, pc}
	...

00023c7c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   23c7c:	b580      	push	{r7, lr}
   23c7e:	b082      	sub	sp, #8
   23c80:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   23c82:	4b10      	ldr	r3, [pc, #64]	; (23cc4 <cpu_irq_enter_critical+0x48>)
   23c84:	681b      	ldr	r3, [r3, #0]
   23c86:	2b00      	cmp	r3, #0
   23c88:	d112      	bne.n	23cb0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   23c8a:	f3ef 8310 	mrs	r3, PRIMASK
   23c8e:	607b      	str	r3, [r7, #4]
  return(result);
   23c90:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   23c92:	2b00      	cmp	r3, #0
   23c94:	d109      	bne.n	23caa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   23c96:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   23c98:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   23c9c:	4b0a      	ldr	r3, [pc, #40]	; (23cc8 <cpu_irq_enter_critical+0x4c>)
   23c9e:	2200      	movs	r2, #0
   23ca0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   23ca2:	4b0a      	ldr	r3, [pc, #40]	; (23ccc <cpu_irq_enter_critical+0x50>)
   23ca4:	2201      	movs	r2, #1
   23ca6:	701a      	strb	r2, [r3, #0]
   23ca8:	e002      	b.n	23cb0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   23caa:	4b08      	ldr	r3, [pc, #32]	; (23ccc <cpu_irq_enter_critical+0x50>)
   23cac:	2200      	movs	r2, #0
   23cae:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   23cb0:	4b04      	ldr	r3, [pc, #16]	; (23cc4 <cpu_irq_enter_critical+0x48>)
   23cb2:	681b      	ldr	r3, [r3, #0]
   23cb4:	1c5a      	adds	r2, r3, #1
   23cb6:	4b03      	ldr	r3, [pc, #12]	; (23cc4 <cpu_irq_enter_critical+0x48>)
   23cb8:	601a      	str	r2, [r3, #0]
}
   23cba:	46c0      	nop			; (mov r8, r8)
   23cbc:	46bd      	mov	sp, r7
   23cbe:	b002      	add	sp, #8
   23cc0:	bd80      	pop	{r7, pc}
   23cc2:	46c0      	nop			; (mov r8, r8)
   23cc4:	200004e8 	.word	0x200004e8
   23cc8:	20000028 	.word	0x20000028
   23ccc:	200004ec 	.word	0x200004ec

00023cd0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   23cd0:	b580      	push	{r7, lr}
   23cd2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   23cd4:	4b0b      	ldr	r3, [pc, #44]	; (23d04 <cpu_irq_leave_critical+0x34>)
   23cd6:	681b      	ldr	r3, [r3, #0]
   23cd8:	1e5a      	subs	r2, r3, #1
   23cda:	4b0a      	ldr	r3, [pc, #40]	; (23d04 <cpu_irq_leave_critical+0x34>)
   23cdc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   23cde:	4b09      	ldr	r3, [pc, #36]	; (23d04 <cpu_irq_leave_critical+0x34>)
   23ce0:	681b      	ldr	r3, [r3, #0]
   23ce2:	2b00      	cmp	r3, #0
   23ce4:	d10a      	bne.n	23cfc <cpu_irq_leave_critical+0x2c>
   23ce6:	4b08      	ldr	r3, [pc, #32]	; (23d08 <cpu_irq_leave_critical+0x38>)
   23ce8:	781b      	ldrb	r3, [r3, #0]
   23cea:	b2db      	uxtb	r3, r3
   23cec:	2b00      	cmp	r3, #0
   23cee:	d005      	beq.n	23cfc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   23cf0:	4b06      	ldr	r3, [pc, #24]	; (23d0c <cpu_irq_leave_critical+0x3c>)
   23cf2:	2201      	movs	r2, #1
   23cf4:	701a      	strb	r2, [r3, #0]
   23cf6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   23cfa:	b662      	cpsie	i
	}
}
   23cfc:	46c0      	nop			; (mov r8, r8)
   23cfe:	46bd      	mov	sp, r7
   23d00:	bd80      	pop	{r7, pc}
   23d02:	46c0      	nop			; (mov r8, r8)
   23d04:	200004e8 	.word	0x200004e8
   23d08:	200004ec 	.word	0x200004ec
   23d0c:	20000028 	.word	0x20000028

00023d10 <system_gclk_gen_get_config_defaults>:
{
   23d10:	b580      	push	{r7, lr}
   23d12:	b082      	sub	sp, #8
   23d14:	af00      	add	r7, sp, #0
   23d16:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   23d18:	687b      	ldr	r3, [r7, #4]
   23d1a:	2201      	movs	r2, #1
   23d1c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   23d1e:	687b      	ldr	r3, [r7, #4]
   23d20:	2200      	movs	r2, #0
   23d22:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   23d24:	687b      	ldr	r3, [r7, #4]
   23d26:	2206      	movs	r2, #6
   23d28:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   23d2a:	687b      	ldr	r3, [r7, #4]
   23d2c:	2200      	movs	r2, #0
   23d2e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   23d30:	687b      	ldr	r3, [r7, #4]
   23d32:	2200      	movs	r2, #0
   23d34:	725a      	strb	r2, [r3, #9]
}
   23d36:	46c0      	nop			; (mov r8, r8)
   23d38:	46bd      	mov	sp, r7
   23d3a:	b002      	add	sp, #8
   23d3c:	bd80      	pop	{r7, pc}

00023d3e <system_gclk_chan_get_config_defaults>:
{
   23d3e:	b580      	push	{r7, lr}
   23d40:	b082      	sub	sp, #8
   23d42:	af00      	add	r7, sp, #0
   23d44:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23d46:	687b      	ldr	r3, [r7, #4]
   23d48:	2200      	movs	r2, #0
   23d4a:	701a      	strb	r2, [r3, #0]
}
   23d4c:	46c0      	nop			; (mov r8, r8)
   23d4e:	46bd      	mov	sp, r7
   23d50:	b002      	add	sp, #8
   23d52:	bd80      	pop	{r7, pc}

00023d54 <system_clock_source_xosc32k_get_config_defaults>:
{
   23d54:	b580      	push	{r7, lr}
   23d56:	b082      	sub	sp, #8
   23d58:	af00      	add	r7, sp, #0
   23d5a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   23d5c:	687b      	ldr	r3, [r7, #4]
   23d5e:	2200      	movs	r2, #0
   23d60:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   23d62:	687b      	ldr	r3, [r7, #4]
   23d64:	2204      	movs	r2, #4
   23d66:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   23d68:	687b      	ldr	r3, [r7, #4]
   23d6a:	2200      	movs	r2, #0
   23d6c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   23d6e:	687b      	ldr	r3, [r7, #4]
   23d70:	2280      	movs	r2, #128	; 0x80
   23d72:	0212      	lsls	r2, r2, #8
   23d74:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   23d76:	687b      	ldr	r3, [r7, #4]
   23d78:	2200      	movs	r2, #0
   23d7a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   23d7c:	687b      	ldr	r3, [r7, #4]
   23d7e:	2201      	movs	r2, #1
   23d80:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   23d82:	687b      	ldr	r3, [r7, #4]
   23d84:	2200      	movs	r2, #0
   23d86:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   23d88:	687b      	ldr	r3, [r7, #4]
   23d8a:	2201      	movs	r2, #1
   23d8c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   23d8e:	687b      	ldr	r3, [r7, #4]
   23d90:	2200      	movs	r2, #0
   23d92:	739a      	strb	r2, [r3, #14]
}
   23d94:	46c0      	nop			; (mov r8, r8)
   23d96:	46bd      	mov	sp, r7
   23d98:	b002      	add	sp, #8
   23d9a:	bd80      	pop	{r7, pc}

00023d9c <system_clock_source_osc8m_get_config_defaults>:
{
   23d9c:	b580      	push	{r7, lr}
   23d9e:	b082      	sub	sp, #8
   23da0:	af00      	add	r7, sp, #0
   23da2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   23da4:	687b      	ldr	r3, [r7, #4]
   23da6:	2203      	movs	r2, #3
   23da8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   23daa:	687b      	ldr	r3, [r7, #4]
   23dac:	2200      	movs	r2, #0
   23dae:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   23db0:	687b      	ldr	r3, [r7, #4]
   23db2:	2201      	movs	r2, #1
   23db4:	709a      	strb	r2, [r3, #2]
}
   23db6:	46c0      	nop			; (mov r8, r8)
   23db8:	46bd      	mov	sp, r7
   23dba:	b002      	add	sp, #8
   23dbc:	bd80      	pop	{r7, pc}

00023dbe <system_clock_source_dfll_get_config_defaults>:
{
   23dbe:	b580      	push	{r7, lr}
   23dc0:	b082      	sub	sp, #8
   23dc2:	af00      	add	r7, sp, #0
   23dc4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   23dc6:	687b      	ldr	r3, [r7, #4]
   23dc8:	2200      	movs	r2, #0
   23dca:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   23dcc:	687b      	ldr	r3, [r7, #4]
   23dce:	2200      	movs	r2, #0
   23dd0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   23dd2:	687b      	ldr	r3, [r7, #4]
   23dd4:	2200      	movs	r2, #0
   23dd6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   23dd8:	687b      	ldr	r3, [r7, #4]
   23dda:	2200      	movs	r2, #0
   23ddc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   23dde:	687b      	ldr	r3, [r7, #4]
   23de0:	2200      	movs	r2, #0
   23de2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   23de4:	687b      	ldr	r3, [r7, #4]
   23de6:	2201      	movs	r2, #1
   23de8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   23dea:	687b      	ldr	r3, [r7, #4]
   23dec:	2207      	movs	r2, #7
   23dee:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   23df0:	687b      	ldr	r3, [r7, #4]
   23df2:	223f      	movs	r2, #63	; 0x3f
   23df4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   23df6:	687b      	ldr	r3, [r7, #4]
   23df8:	2201      	movs	r2, #1
   23dfa:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   23dfc:	687b      	ldr	r3, [r7, #4]
   23dfe:	2201      	movs	r2, #1
   23e00:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   23e02:	687b      	ldr	r3, [r7, #4]
   23e04:	2206      	movs	r2, #6
   23e06:	821a      	strh	r2, [r3, #16]
}
   23e08:	46c0      	nop			; (mov r8, r8)
   23e0a:	46bd      	mov	sp, r7
   23e0c:	b002      	add	sp, #8
   23e0e:	bd80      	pop	{r7, pc}

00023e10 <system_cpu_clock_set_divider>:
{
   23e10:	b580      	push	{r7, lr}
   23e12:	b082      	sub	sp, #8
   23e14:	af00      	add	r7, sp, #0
   23e16:	0002      	movs	r2, r0
   23e18:	1dfb      	adds	r3, r7, #7
   23e1a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   23e1c:	4a03      	ldr	r2, [pc, #12]	; (23e2c <system_cpu_clock_set_divider+0x1c>)
   23e1e:	1dfb      	adds	r3, r7, #7
   23e20:	781b      	ldrb	r3, [r3, #0]
   23e22:	7213      	strb	r3, [r2, #8]
}
   23e24:	46c0      	nop			; (mov r8, r8)
   23e26:	46bd      	mov	sp, r7
   23e28:	b002      	add	sp, #8
   23e2a:	bd80      	pop	{r7, pc}
   23e2c:	40000400 	.word	0x40000400

00023e30 <system_apb_clock_set_divider>:
{
   23e30:	b580      	push	{r7, lr}
   23e32:	b082      	sub	sp, #8
   23e34:	af00      	add	r7, sp, #0
   23e36:	0002      	movs	r2, r0
   23e38:	1dfb      	adds	r3, r7, #7
   23e3a:	701a      	strb	r2, [r3, #0]
   23e3c:	1dbb      	adds	r3, r7, #6
   23e3e:	1c0a      	adds	r2, r1, #0
   23e40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   23e42:	1dfb      	adds	r3, r7, #7
   23e44:	781b      	ldrb	r3, [r3, #0]
   23e46:	2b01      	cmp	r3, #1
   23e48:	d008      	beq.n	23e5c <system_apb_clock_set_divider+0x2c>
   23e4a:	2b02      	cmp	r3, #2
   23e4c:	d00b      	beq.n	23e66 <system_apb_clock_set_divider+0x36>
   23e4e:	2b00      	cmp	r3, #0
   23e50:	d10e      	bne.n	23e70 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   23e52:	4a0b      	ldr	r2, [pc, #44]	; (23e80 <system_apb_clock_set_divider+0x50>)
   23e54:	1dbb      	adds	r3, r7, #6
   23e56:	781b      	ldrb	r3, [r3, #0]
   23e58:	7253      	strb	r3, [r2, #9]
			break;
   23e5a:	e00b      	b.n	23e74 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   23e5c:	4a08      	ldr	r2, [pc, #32]	; (23e80 <system_apb_clock_set_divider+0x50>)
   23e5e:	1dbb      	adds	r3, r7, #6
   23e60:	781b      	ldrb	r3, [r3, #0]
   23e62:	7293      	strb	r3, [r2, #10]
			break;
   23e64:	e006      	b.n	23e74 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   23e66:	4a06      	ldr	r2, [pc, #24]	; (23e80 <system_apb_clock_set_divider+0x50>)
   23e68:	1dbb      	adds	r3, r7, #6
   23e6a:	781b      	ldrb	r3, [r3, #0]
   23e6c:	72d3      	strb	r3, [r2, #11]
			break;
   23e6e:	e001      	b.n	23e74 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   23e70:	2317      	movs	r3, #23
   23e72:	e000      	b.n	23e76 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   23e74:	2300      	movs	r3, #0
}
   23e76:	0018      	movs	r0, r3
   23e78:	46bd      	mov	sp, r7
   23e7a:	b002      	add	sp, #8
   23e7c:	bd80      	pop	{r7, pc}
   23e7e:	46c0      	nop			; (mov r8, r8)
   23e80:	40000400 	.word	0x40000400

00023e84 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   23e84:	b580      	push	{r7, lr}
   23e86:	b082      	sub	sp, #8
   23e88:	af00      	add	r7, sp, #0
   23e8a:	0002      	movs	r2, r0
   23e8c:	1dfb      	adds	r3, r7, #7
   23e8e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   23e90:	4a08      	ldr	r2, [pc, #32]	; (23eb4 <system_flash_set_waitstates+0x30>)
   23e92:	1dfb      	adds	r3, r7, #7
   23e94:	781b      	ldrb	r3, [r3, #0]
   23e96:	210f      	movs	r1, #15
   23e98:	400b      	ands	r3, r1
   23e9a:	b2d9      	uxtb	r1, r3
   23e9c:	6853      	ldr	r3, [r2, #4]
   23e9e:	200f      	movs	r0, #15
   23ea0:	4001      	ands	r1, r0
   23ea2:	0049      	lsls	r1, r1, #1
   23ea4:	201e      	movs	r0, #30
   23ea6:	4383      	bics	r3, r0
   23ea8:	430b      	orrs	r3, r1
   23eaa:	6053      	str	r3, [r2, #4]
}
   23eac:	46c0      	nop			; (mov r8, r8)
   23eae:	46bd      	mov	sp, r7
   23eb0:	b002      	add	sp, #8
   23eb2:	bd80      	pop	{r7, pc}
   23eb4:	41004000 	.word	0x41004000

00023eb8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   23eb8:	b580      	push	{r7, lr}
   23eba:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   23ebc:	46c0      	nop			; (mov r8, r8)
   23ebe:	4b04      	ldr	r3, [pc, #16]	; (23ed0 <_system_dfll_wait_for_sync+0x18>)
   23ec0:	68db      	ldr	r3, [r3, #12]
   23ec2:	2210      	movs	r2, #16
   23ec4:	4013      	ands	r3, r2
   23ec6:	d0fa      	beq.n	23ebe <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   23ec8:	46c0      	nop			; (mov r8, r8)
   23eca:	46bd      	mov	sp, r7
   23ecc:	bd80      	pop	{r7, pc}
   23ece:	46c0      	nop			; (mov r8, r8)
   23ed0:	40000800 	.word	0x40000800

00023ed4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   23ed4:	b580      	push	{r7, lr}
   23ed6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   23ed8:	4b0c      	ldr	r3, [pc, #48]	; (23f0c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23eda:	2202      	movs	r2, #2
   23edc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23ede:	4b0c      	ldr	r3, [pc, #48]	; (23f10 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23ee0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   23ee2:	4a0a      	ldr	r2, [pc, #40]	; (23f0c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23ee4:	4b0b      	ldr	r3, [pc, #44]	; (23f14 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23ee6:	689b      	ldr	r3, [r3, #8]
   23ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   23eea:	4a08      	ldr	r2, [pc, #32]	; (23f0c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23eec:	4b09      	ldr	r3, [pc, #36]	; (23f14 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23eee:	685b      	ldr	r3, [r3, #4]
   23ef0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   23ef2:	4b06      	ldr	r3, [pc, #24]	; (23f0c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23ef4:	2200      	movs	r2, #0
   23ef6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   23ef8:	4b05      	ldr	r3, [pc, #20]	; (23f10 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   23efa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   23efc:	4a03      	ldr	r2, [pc, #12]	; (23f0c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   23efe:	4b05      	ldr	r3, [pc, #20]	; (23f14 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   23f00:	681b      	ldr	r3, [r3, #0]
   23f02:	b29b      	uxth	r3, r3
   23f04:	8493      	strh	r3, [r2, #36]	; 0x24
}
   23f06:	46c0      	nop			; (mov r8, r8)
   23f08:	46bd      	mov	sp, r7
   23f0a:	bd80      	pop	{r7, pc}
   23f0c:	40000800 	.word	0x40000800
   23f10:	00023eb9 	.word	0x00023eb9
   23f14:	200004f0 	.word	0x200004f0

00023f18 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   23f18:	b580      	push	{r7, lr}
   23f1a:	b082      	sub	sp, #8
   23f1c:	af00      	add	r7, sp, #0
   23f1e:	0002      	movs	r2, r0
   23f20:	1dfb      	adds	r3, r7, #7
   23f22:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   23f24:	1dfb      	adds	r3, r7, #7
   23f26:	781b      	ldrb	r3, [r3, #0]
   23f28:	2b08      	cmp	r3, #8
   23f2a:	d841      	bhi.n	23fb0 <system_clock_source_get_hz+0x98>
   23f2c:	009a      	lsls	r2, r3, #2
   23f2e:	4b23      	ldr	r3, [pc, #140]	; (23fbc <system_clock_source_get_hz+0xa4>)
   23f30:	18d3      	adds	r3, r2, r3
   23f32:	681b      	ldr	r3, [r3, #0]
   23f34:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   23f36:	4b22      	ldr	r3, [pc, #136]	; (23fc0 <system_clock_source_get_hz+0xa8>)
   23f38:	691b      	ldr	r3, [r3, #16]
   23f3a:	e03a      	b.n	23fb2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   23f3c:	4b21      	ldr	r3, [pc, #132]	; (23fc4 <system_clock_source_get_hz+0xac>)
   23f3e:	6a1b      	ldr	r3, [r3, #32]
   23f40:	059b      	lsls	r3, r3, #22
   23f42:	0f9b      	lsrs	r3, r3, #30
   23f44:	b2db      	uxtb	r3, r3
   23f46:	001a      	movs	r2, r3
   23f48:	4b1f      	ldr	r3, [pc, #124]	; (23fc8 <system_clock_source_get_hz+0xb0>)
   23f4a:	40d3      	lsrs	r3, r2
   23f4c:	e031      	b.n	23fb2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   23f4e:	2380      	movs	r3, #128	; 0x80
   23f50:	021b      	lsls	r3, r3, #8
   23f52:	e02e      	b.n	23fb2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   23f54:	2380      	movs	r3, #128	; 0x80
   23f56:	021b      	lsls	r3, r3, #8
   23f58:	e02b      	b.n	23fb2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   23f5a:	4b19      	ldr	r3, [pc, #100]	; (23fc0 <system_clock_source_get_hz+0xa8>)
   23f5c:	695b      	ldr	r3, [r3, #20]
   23f5e:	e028      	b.n	23fb2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   23f60:	4b17      	ldr	r3, [pc, #92]	; (23fc0 <system_clock_source_get_hz+0xa8>)
   23f62:	681b      	ldr	r3, [r3, #0]
   23f64:	2202      	movs	r2, #2
   23f66:	4013      	ands	r3, r2
   23f68:	d101      	bne.n	23f6e <system_clock_source_get_hz+0x56>
			return 0;
   23f6a:	2300      	movs	r3, #0
   23f6c:	e021      	b.n	23fb2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   23f6e:	4b17      	ldr	r3, [pc, #92]	; (23fcc <system_clock_source_get_hz+0xb4>)
   23f70:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   23f72:	4b13      	ldr	r3, [pc, #76]	; (23fc0 <system_clock_source_get_hz+0xa8>)
   23f74:	681b      	ldr	r3, [r3, #0]
   23f76:	2224      	movs	r2, #36	; 0x24
   23f78:	4013      	ands	r3, r2
   23f7a:	2b04      	cmp	r3, #4
   23f7c:	d109      	bne.n	23f92 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23f7e:	2000      	movs	r0, #0
   23f80:	4b13      	ldr	r3, [pc, #76]	; (23fd0 <system_clock_source_get_hz+0xb8>)
   23f82:	4798      	blx	r3
   23f84:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   23f86:	4b0e      	ldr	r3, [pc, #56]	; (23fc0 <system_clock_source_get_hz+0xa8>)
   23f88:	689b      	ldr	r3, [r3, #8]
   23f8a:	041b      	lsls	r3, r3, #16
   23f8c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   23f8e:	4353      	muls	r3, r2
   23f90:	e00f      	b.n	23fb2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   23f92:	4b10      	ldr	r3, [pc, #64]	; (23fd4 <system_clock_source_get_hz+0xbc>)
   23f94:	e00d      	b.n	23fb2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   23f96:	4a0b      	ldr	r2, [pc, #44]	; (23fc4 <system_clock_source_get_hz+0xac>)
   23f98:	2350      	movs	r3, #80	; 0x50
   23f9a:	5cd3      	ldrb	r3, [r2, r3]
   23f9c:	b2db      	uxtb	r3, r3
   23f9e:	001a      	movs	r2, r3
   23fa0:	2304      	movs	r3, #4
   23fa2:	4013      	ands	r3, r2
   23fa4:	d101      	bne.n	23faa <system_clock_source_get_hz+0x92>
			return 0;
   23fa6:	2300      	movs	r3, #0
   23fa8:	e003      	b.n	23fb2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   23faa:	4b05      	ldr	r3, [pc, #20]	; (23fc0 <system_clock_source_get_hz+0xa8>)
   23fac:	68db      	ldr	r3, [r3, #12]
   23fae:	e000      	b.n	23fb2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   23fb0:	2300      	movs	r3, #0
	}
}
   23fb2:	0018      	movs	r0, r3
   23fb4:	46bd      	mov	sp, r7
   23fb6:	b002      	add	sp, #8
   23fb8:	bd80      	pop	{r7, pc}
   23fba:	46c0      	nop			; (mov r8, r8)
   23fbc:	0002ace0 	.word	0x0002ace0
   23fc0:	200004f0 	.word	0x200004f0
   23fc4:	40000800 	.word	0x40000800
   23fc8:	007a1200 	.word	0x007a1200
   23fcc:	00023eb9 	.word	0x00023eb9
   23fd0:	00024b59 	.word	0x00024b59
   23fd4:	02dc6c00 	.word	0x02dc6c00

00023fd8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   23fd8:	b580      	push	{r7, lr}
   23fda:	b084      	sub	sp, #16
   23fdc:	af00      	add	r7, sp, #0
   23fde:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   23fe0:	4b1a      	ldr	r3, [pc, #104]	; (2404c <system_clock_source_osc8m_set_config+0x74>)
   23fe2:	6a1b      	ldr	r3, [r3, #32]
   23fe4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   23fe6:	687b      	ldr	r3, [r7, #4]
   23fe8:	781b      	ldrb	r3, [r3, #0]
   23fea:	1c1a      	adds	r2, r3, #0
   23fec:	2303      	movs	r3, #3
   23fee:	4013      	ands	r3, r2
   23ff0:	b2da      	uxtb	r2, r3
   23ff2:	230d      	movs	r3, #13
   23ff4:	18fb      	adds	r3, r7, r3
   23ff6:	2103      	movs	r1, #3
   23ff8:	400a      	ands	r2, r1
   23ffa:	0010      	movs	r0, r2
   23ffc:	781a      	ldrb	r2, [r3, #0]
   23ffe:	2103      	movs	r1, #3
   24000:	438a      	bics	r2, r1
   24002:	1c11      	adds	r1, r2, #0
   24004:	1c02      	adds	r2, r0, #0
   24006:	430a      	orrs	r2, r1
   24008:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2400a:	687b      	ldr	r3, [r7, #4]
   2400c:	789a      	ldrb	r2, [r3, #2]
   2400e:	230c      	movs	r3, #12
   24010:	18fb      	adds	r3, r7, r3
   24012:	01d0      	lsls	r0, r2, #7
   24014:	781a      	ldrb	r2, [r3, #0]
   24016:	217f      	movs	r1, #127	; 0x7f
   24018:	400a      	ands	r2, r1
   2401a:	1c11      	adds	r1, r2, #0
   2401c:	1c02      	adds	r2, r0, #0
   2401e:	430a      	orrs	r2, r1
   24020:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24022:	687b      	ldr	r3, [r7, #4]
   24024:	785a      	ldrb	r2, [r3, #1]
   24026:	230c      	movs	r3, #12
   24028:	18fb      	adds	r3, r7, r3
   2402a:	2101      	movs	r1, #1
   2402c:	400a      	ands	r2, r1
   2402e:	0190      	lsls	r0, r2, #6
   24030:	781a      	ldrb	r2, [r3, #0]
   24032:	2140      	movs	r1, #64	; 0x40
   24034:	438a      	bics	r2, r1
   24036:	1c11      	adds	r1, r2, #0
   24038:	1c02      	adds	r2, r0, #0
   2403a:	430a      	orrs	r2, r1
   2403c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2403e:	4b03      	ldr	r3, [pc, #12]	; (2404c <system_clock_source_osc8m_set_config+0x74>)
   24040:	68fa      	ldr	r2, [r7, #12]
   24042:	621a      	str	r2, [r3, #32]
}
   24044:	46c0      	nop			; (mov r8, r8)
   24046:	46bd      	mov	sp, r7
   24048:	b004      	add	sp, #16
   2404a:	bd80      	pop	{r7, pc}
   2404c:	40000800 	.word	0x40000800

00024050 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   24050:	b580      	push	{r7, lr}
   24052:	b084      	sub	sp, #16
   24054:	af00      	add	r7, sp, #0
   24056:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   24058:	4a43      	ldr	r2, [pc, #268]	; (24168 <system_clock_source_xosc32k_set_config+0x118>)
   2405a:	230c      	movs	r3, #12
   2405c:	18fb      	adds	r3, r7, r3
   2405e:	8a92      	ldrh	r2, [r2, #20]
   24060:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   24062:	687b      	ldr	r3, [r7, #4]
   24064:	785b      	ldrb	r3, [r3, #1]
   24066:	1c1a      	adds	r2, r3, #0
   24068:	2307      	movs	r3, #7
   2406a:	4013      	ands	r3, r2
   2406c:	b2da      	uxtb	r2, r3
   2406e:	230c      	movs	r3, #12
   24070:	18fb      	adds	r3, r7, r3
   24072:	2107      	movs	r1, #7
   24074:	400a      	ands	r2, r1
   24076:	0010      	movs	r0, r2
   24078:	785a      	ldrb	r2, [r3, #1]
   2407a:	2107      	movs	r1, #7
   2407c:	438a      	bics	r2, r1
   2407e:	1c11      	adds	r1, r2, #0
   24080:	1c02      	adds	r2, r0, #0
   24082:	430a      	orrs	r2, r1
   24084:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   24086:	687b      	ldr	r3, [r7, #4]
   24088:	781b      	ldrb	r3, [r3, #0]
   2408a:	2b00      	cmp	r3, #0
   2408c:	d106      	bne.n	2409c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   2408e:	230c      	movs	r3, #12
   24090:	18fb      	adds	r3, r7, r3
   24092:	781a      	ldrb	r2, [r3, #0]
   24094:	2104      	movs	r1, #4
   24096:	430a      	orrs	r2, r1
   24098:	701a      	strb	r2, [r3, #0]
   2409a:	e005      	b.n	240a8 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   2409c:	230c      	movs	r3, #12
   2409e:	18fb      	adds	r3, r7, r3
   240a0:	781a      	ldrb	r2, [r3, #0]
   240a2:	2104      	movs	r1, #4
   240a4:	438a      	bics	r2, r1
   240a6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   240a8:	687b      	ldr	r3, [r7, #4]
   240aa:	789a      	ldrb	r2, [r3, #2]
   240ac:	230c      	movs	r3, #12
   240ae:	18fb      	adds	r3, r7, r3
   240b0:	2101      	movs	r1, #1
   240b2:	400a      	ands	r2, r1
   240b4:	0150      	lsls	r0, r2, #5
   240b6:	781a      	ldrb	r2, [r3, #0]
   240b8:	2120      	movs	r1, #32
   240ba:	438a      	bics	r2, r1
   240bc:	1c11      	adds	r1, r2, #0
   240be:	1c02      	adds	r2, r0, #0
   240c0:	430a      	orrs	r2, r1
   240c2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   240c4:	687b      	ldr	r3, [r7, #4]
   240c6:	78da      	ldrb	r2, [r3, #3]
   240c8:	230c      	movs	r3, #12
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	2101      	movs	r1, #1
   240ce:	400a      	ands	r2, r1
   240d0:	0110      	lsls	r0, r2, #4
   240d2:	781a      	ldrb	r2, [r3, #0]
   240d4:	2110      	movs	r1, #16
   240d6:	438a      	bics	r2, r1
   240d8:	1c11      	adds	r1, r2, #0
   240da:	1c02      	adds	r2, r0, #0
   240dc:	430a      	orrs	r2, r1
   240de:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   240e0:	687b      	ldr	r3, [r7, #4]
   240e2:	791a      	ldrb	r2, [r3, #4]
   240e4:	230c      	movs	r3, #12
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	2101      	movs	r1, #1
   240ea:	400a      	ands	r2, r1
   240ec:	00d0      	lsls	r0, r2, #3
   240ee:	781a      	ldrb	r2, [r3, #0]
   240f0:	2108      	movs	r1, #8
   240f2:	438a      	bics	r2, r1
   240f4:	1c11      	adds	r1, r2, #0
   240f6:	1c02      	adds	r2, r0, #0
   240f8:	430a      	orrs	r2, r1
   240fa:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   240fc:	687b      	ldr	r3, [r7, #4]
   240fe:	7b5a      	ldrb	r2, [r3, #13]
   24100:	230c      	movs	r3, #12
   24102:	18fb      	adds	r3, r7, r3
   24104:	01d0      	lsls	r0, r2, #7
   24106:	781a      	ldrb	r2, [r3, #0]
   24108:	217f      	movs	r1, #127	; 0x7f
   2410a:	400a      	ands	r2, r1
   2410c:	1c11      	adds	r1, r2, #0
   2410e:	1c02      	adds	r2, r0, #0
   24110:	430a      	orrs	r2, r1
   24112:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24114:	687b      	ldr	r3, [r7, #4]
   24116:	7b1a      	ldrb	r2, [r3, #12]
   24118:	230c      	movs	r3, #12
   2411a:	18fb      	adds	r3, r7, r3
   2411c:	2101      	movs	r1, #1
   2411e:	400a      	ands	r2, r1
   24120:	0190      	lsls	r0, r2, #6
   24122:	781a      	ldrb	r2, [r3, #0]
   24124:	2140      	movs	r1, #64	; 0x40
   24126:	438a      	bics	r2, r1
   24128:	1c11      	adds	r1, r2, #0
   2412a:	1c02      	adds	r2, r0, #0
   2412c:	430a      	orrs	r2, r1
   2412e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   24130:	687b      	ldr	r3, [r7, #4]
   24132:	7b9a      	ldrb	r2, [r3, #14]
   24134:	230c      	movs	r3, #12
   24136:	18fb      	adds	r3, r7, r3
   24138:	2101      	movs	r1, #1
   2413a:	400a      	ands	r2, r1
   2413c:	0110      	lsls	r0, r2, #4
   2413e:	785a      	ldrb	r2, [r3, #1]
   24140:	2110      	movs	r1, #16
   24142:	438a      	bics	r2, r1
   24144:	1c11      	adds	r1, r2, #0
   24146:	1c02      	adds	r2, r0, #0
   24148:	430a      	orrs	r2, r1
   2414a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   2414c:	687b      	ldr	r3, [r7, #4]
   2414e:	689a      	ldr	r2, [r3, #8]
   24150:	4b06      	ldr	r3, [pc, #24]	; (2416c <system_clock_source_xosc32k_set_config+0x11c>)
   24152:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   24154:	4a04      	ldr	r2, [pc, #16]	; (24168 <system_clock_source_xosc32k_set_config+0x118>)
   24156:	230c      	movs	r3, #12
   24158:	18fb      	adds	r3, r7, r3
   2415a:	881b      	ldrh	r3, [r3, #0]
   2415c:	8293      	strh	r3, [r2, #20]
}
   2415e:	46c0      	nop			; (mov r8, r8)
   24160:	46bd      	mov	sp, r7
   24162:	b004      	add	sp, #16
   24164:	bd80      	pop	{r7, pc}
   24166:	46c0      	nop			; (mov r8, r8)
   24168:	40000800 	.word	0x40000800
   2416c:	200004f0 	.word	0x200004f0

00024170 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   24170:	b580      	push	{r7, lr}
   24172:	b082      	sub	sp, #8
   24174:	af00      	add	r7, sp, #0
   24176:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   24178:	687b      	ldr	r3, [r7, #4]
   2417a:	7a1b      	ldrb	r3, [r3, #8]
   2417c:	029b      	lsls	r3, r3, #10
   2417e:	041b      	lsls	r3, r3, #16
   24180:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   24182:	687b      	ldr	r3, [r7, #4]
   24184:	895b      	ldrh	r3, [r3, #10]
   24186:	059b      	lsls	r3, r3, #22
   24188:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   2418a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   2418c:	4b2a      	ldr	r3, [pc, #168]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   2418e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   24190:	687b      	ldr	r3, [r7, #4]
   24192:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   24194:	687b      	ldr	r3, [r7, #4]
   24196:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   24198:	4313      	orrs	r3, r2
   2419a:	b2db      	uxtb	r3, r3
   2419c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   2419e:	687b      	ldr	r3, [r7, #4]
   241a0:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   241a2:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   241a4:	687a      	ldr	r2, [r7, #4]
   241a6:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   241a8:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   241aa:	687b      	ldr	r3, [r7, #4]
   241ac:	785b      	ldrb	r3, [r3, #1]
   241ae:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   241b0:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   241b2:	4b21      	ldr	r3, [pc, #132]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   241b4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   241b6:	687b      	ldr	r3, [r7, #4]
   241b8:	781b      	ldrb	r3, [r3, #0]
   241ba:	2b04      	cmp	r3, #4
   241bc:	d116      	bne.n	241ec <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   241be:	687b      	ldr	r3, [r7, #4]
   241c0:	7b1b      	ldrb	r3, [r3, #12]
   241c2:	069b      	lsls	r3, r3, #26
   241c4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   241c6:	687b      	ldr	r3, [r7, #4]
   241c8:	89db      	ldrh	r3, [r3, #14]
   241ca:	041b      	lsls	r3, r3, #16
   241cc:	0019      	movs	r1, r3
   241ce:	4b1b      	ldr	r3, [pc, #108]	; (2423c <system_clock_source_dfll_set_config+0xcc>)
   241d0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   241d2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   241d4:	687a      	ldr	r2, [r7, #4]
   241d6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   241d8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   241da:	4b17      	ldr	r3, [pc, #92]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   241dc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   241de:	4b16      	ldr	r3, [pc, #88]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   241e0:	681b      	ldr	r3, [r3, #0]
   241e2:	687a      	ldr	r2, [r7, #4]
   241e4:	7812      	ldrb	r2, [r2, #0]
   241e6:	431a      	orrs	r2, r3
   241e8:	4b13      	ldr	r3, [pc, #76]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   241ea:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   241ec:	687b      	ldr	r3, [r7, #4]
   241ee:	781b      	ldrb	r3, [r3, #0]
   241f0:	2b20      	cmp	r3, #32
   241f2:	d11c      	bne.n	2422e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   241f4:	687b      	ldr	r3, [r7, #4]
   241f6:	7b1b      	ldrb	r3, [r3, #12]
   241f8:	069b      	lsls	r3, r3, #26
   241fa:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   241fc:	687b      	ldr	r3, [r7, #4]
   241fe:	89db      	ldrh	r3, [r3, #14]
   24200:	041b      	lsls	r3, r3, #16
   24202:	0019      	movs	r1, r3
   24204:	4b0d      	ldr	r3, [pc, #52]	; (2423c <system_clock_source_dfll_set_config+0xcc>)
   24206:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24208:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   2420a:	687a      	ldr	r2, [r7, #4]
   2420c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   2420e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   24210:	4b09      	ldr	r3, [pc, #36]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   24212:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   24214:	4b08      	ldr	r3, [pc, #32]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   24216:	681b      	ldr	r3, [r3, #0]
   24218:	687a      	ldr	r2, [r7, #4]
   2421a:	7812      	ldrb	r2, [r2, #0]
   2421c:	2104      	movs	r1, #4
   2421e:	430a      	orrs	r2, r1
   24220:	b2d2      	uxtb	r2, r2
   24222:	4313      	orrs	r3, r2
   24224:	2280      	movs	r2, #128	; 0x80
   24226:	00d2      	lsls	r2, r2, #3
   24228:	431a      	orrs	r2, r3
   2422a:	4b03      	ldr	r3, [pc, #12]	; (24238 <system_clock_source_dfll_set_config+0xc8>)
   2422c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   2422e:	46c0      	nop			; (mov r8, r8)
   24230:	46bd      	mov	sp, r7
   24232:	b002      	add	sp, #8
   24234:	bd80      	pop	{r7, pc}
   24236:	46c0      	nop			; (mov r8, r8)
   24238:	200004f0 	.word	0x200004f0
   2423c:	03ff0000 	.word	0x03ff0000

00024240 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   24240:	b580      	push	{r7, lr}
   24242:	b082      	sub	sp, #8
   24244:	af00      	add	r7, sp, #0
   24246:	0002      	movs	r2, r0
   24248:	1dfb      	adds	r3, r7, #7
   2424a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2424c:	1dfb      	adds	r3, r7, #7
   2424e:	781b      	ldrb	r3, [r3, #0]
   24250:	2b08      	cmp	r3, #8
   24252:	d83b      	bhi.n	242cc <system_clock_source_enable+0x8c>
   24254:	009a      	lsls	r2, r3, #2
   24256:	4b21      	ldr	r3, [pc, #132]	; (242dc <system_clock_source_enable+0x9c>)
   24258:	18d3      	adds	r3, r2, r3
   2425a:	681b      	ldr	r3, [r3, #0]
   2425c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2425e:	4b20      	ldr	r3, [pc, #128]	; (242e0 <system_clock_source_enable+0xa0>)
   24260:	4a1f      	ldr	r2, [pc, #124]	; (242e0 <system_clock_source_enable+0xa0>)
   24262:	6a12      	ldr	r2, [r2, #32]
   24264:	2102      	movs	r1, #2
   24266:	430a      	orrs	r2, r1
   24268:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2426a:	2300      	movs	r3, #0
   2426c:	e031      	b.n	242d2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2426e:	4b1c      	ldr	r3, [pc, #112]	; (242e0 <system_clock_source_enable+0xa0>)
   24270:	4a1b      	ldr	r2, [pc, #108]	; (242e0 <system_clock_source_enable+0xa0>)
   24272:	6992      	ldr	r2, [r2, #24]
   24274:	2102      	movs	r1, #2
   24276:	430a      	orrs	r2, r1
   24278:	619a      	str	r2, [r3, #24]
		break;
   2427a:	e029      	b.n	242d0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2427c:	4a18      	ldr	r2, [pc, #96]	; (242e0 <system_clock_source_enable+0xa0>)
   2427e:	4b18      	ldr	r3, [pc, #96]	; (242e0 <system_clock_source_enable+0xa0>)
   24280:	8a1b      	ldrh	r3, [r3, #16]
   24282:	b29b      	uxth	r3, r3
   24284:	2102      	movs	r1, #2
   24286:	430b      	orrs	r3, r1
   24288:	b29b      	uxth	r3, r3
   2428a:	8213      	strh	r3, [r2, #16]
		break;
   2428c:	e020      	b.n	242d0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2428e:	4a14      	ldr	r2, [pc, #80]	; (242e0 <system_clock_source_enable+0xa0>)
   24290:	4b13      	ldr	r3, [pc, #76]	; (242e0 <system_clock_source_enable+0xa0>)
   24292:	8a9b      	ldrh	r3, [r3, #20]
   24294:	b29b      	uxth	r3, r3
   24296:	2102      	movs	r1, #2
   24298:	430b      	orrs	r3, r1
   2429a:	b29b      	uxth	r3, r3
   2429c:	8293      	strh	r3, [r2, #20]
		break;
   2429e:	e017      	b.n	242d0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   242a0:	4b10      	ldr	r3, [pc, #64]	; (242e4 <system_clock_source_enable+0xa4>)
   242a2:	681b      	ldr	r3, [r3, #0]
   242a4:	2202      	movs	r2, #2
   242a6:	431a      	orrs	r2, r3
   242a8:	4b0e      	ldr	r3, [pc, #56]	; (242e4 <system_clock_source_enable+0xa4>)
   242aa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   242ac:	4b0e      	ldr	r3, [pc, #56]	; (242e8 <system_clock_source_enable+0xa8>)
   242ae:	4798      	blx	r3
		break;
   242b0:	e00e      	b.n	242d0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   242b2:	4a0b      	ldr	r2, [pc, #44]	; (242e0 <system_clock_source_enable+0xa0>)
   242b4:	490a      	ldr	r1, [pc, #40]	; (242e0 <system_clock_source_enable+0xa0>)
   242b6:	2344      	movs	r3, #68	; 0x44
   242b8:	5ccb      	ldrb	r3, [r1, r3]
   242ba:	b2db      	uxtb	r3, r3
   242bc:	2102      	movs	r1, #2
   242be:	430b      	orrs	r3, r1
   242c0:	b2d9      	uxtb	r1, r3
   242c2:	2344      	movs	r3, #68	; 0x44
   242c4:	54d1      	strb	r1, [r2, r3]
		break;
   242c6:	e003      	b.n	242d0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   242c8:	2300      	movs	r3, #0
   242ca:	e002      	b.n	242d2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   242cc:	2317      	movs	r3, #23
   242ce:	e000      	b.n	242d2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   242d0:	2300      	movs	r3, #0
}
   242d2:	0018      	movs	r0, r3
   242d4:	46bd      	mov	sp, r7
   242d6:	b002      	add	sp, #8
   242d8:	bd80      	pop	{r7, pc}
   242da:	46c0      	nop			; (mov r8, r8)
   242dc:	0002ad04 	.word	0x0002ad04
   242e0:	40000800 	.word	0x40000800
   242e4:	200004f0 	.word	0x200004f0
   242e8:	00023ed5 	.word	0x00023ed5

000242ec <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   242ec:	b580      	push	{r7, lr}
   242ee:	b084      	sub	sp, #16
   242f0:	af00      	add	r7, sp, #0
   242f2:	0002      	movs	r2, r0
   242f4:	1dfb      	adds	r3, r7, #7
   242f6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   242f8:	2300      	movs	r3, #0
   242fa:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   242fc:	1dfb      	adds	r3, r7, #7
   242fe:	781b      	ldrb	r3, [r3, #0]
   24300:	2b08      	cmp	r3, #8
   24302:	d821      	bhi.n	24348 <system_clock_source_is_ready+0x5c>
   24304:	009a      	lsls	r2, r3, #2
   24306:	4b18      	ldr	r3, [pc, #96]	; (24368 <system_clock_source_is_ready+0x7c>)
   24308:	18d3      	adds	r3, r2, r3
   2430a:	681b      	ldr	r3, [r3, #0]
   2430c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2430e:	2308      	movs	r3, #8
   24310:	60fb      	str	r3, [r7, #12]
		break;
   24312:	e01b      	b.n	2434c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   24314:	2304      	movs	r3, #4
   24316:	60fb      	str	r3, [r7, #12]
		break;
   24318:	e018      	b.n	2434c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2431a:	2301      	movs	r3, #1
   2431c:	60fb      	str	r3, [r7, #12]
		break;
   2431e:	e015      	b.n	2434c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   24320:	2302      	movs	r3, #2
   24322:	60fb      	str	r3, [r7, #12]
		break;
   24324:	e012      	b.n	2434c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   24326:	23d0      	movs	r3, #208	; 0xd0
   24328:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   2432a:	e00f      	b.n	2434c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2432c:	4a0f      	ldr	r2, [pc, #60]	; (2436c <system_clock_source_is_ready+0x80>)
   2432e:	2350      	movs	r3, #80	; 0x50
   24330:	5cd3      	ldrb	r3, [r2, r3]
   24332:	b2db      	uxtb	r3, r3
   24334:	001a      	movs	r2, r3
   24336:	2303      	movs	r3, #3
   24338:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2433a:	3b03      	subs	r3, #3
   2433c:	425a      	negs	r2, r3
   2433e:	4153      	adcs	r3, r2
   24340:	b2db      	uxtb	r3, r3
   24342:	e00c      	b.n	2435e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   24344:	2301      	movs	r3, #1
   24346:	e00a      	b.n	2435e <system_clock_source_is_ready+0x72>

	default:
		return false;
   24348:	2300      	movs	r3, #0
   2434a:	e008      	b.n	2435e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2434c:	4b07      	ldr	r3, [pc, #28]	; (2436c <system_clock_source_is_ready+0x80>)
   2434e:	68db      	ldr	r3, [r3, #12]
   24350:	68fa      	ldr	r2, [r7, #12]
   24352:	401a      	ands	r2, r3
   24354:	68fb      	ldr	r3, [r7, #12]
   24356:	1ad3      	subs	r3, r2, r3
   24358:	425a      	negs	r2, r3
   2435a:	4153      	adcs	r3, r2
   2435c:	b2db      	uxtb	r3, r3
}
   2435e:	0018      	movs	r0, r3
   24360:	46bd      	mov	sp, r7
   24362:	b004      	add	sp, #16
   24364:	bd80      	pop	{r7, pc}
   24366:	46c0      	nop			; (mov r8, r8)
   24368:	0002ad28 	.word	0x0002ad28
   2436c:	40000800 	.word	0x40000800

00024370 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   24370:	b580      	push	{r7, lr}
   24372:	b082      	sub	sp, #8
   24374:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   24376:	003b      	movs	r3, r7
   24378:	2202      	movs	r2, #2
   2437a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2437c:	2300      	movs	r3, #0
   2437e:	607b      	str	r3, [r7, #4]
   24380:	e009      	b.n	24396 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24382:	687b      	ldr	r3, [r7, #4]
   24384:	b2db      	uxtb	r3, r3
   24386:	003a      	movs	r2, r7
   24388:	0011      	movs	r1, r2
   2438a:	0018      	movs	r0, r3
   2438c:	4b05      	ldr	r3, [pc, #20]	; (243a4 <_switch_peripheral_gclk+0x34>)
   2438e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24390:	687b      	ldr	r3, [r7, #4]
   24392:	3301      	adds	r3, #1
   24394:	607b      	str	r3, [r7, #4]
   24396:	687b      	ldr	r3, [r7, #4]
   24398:	2b24      	cmp	r3, #36	; 0x24
   2439a:	d9f2      	bls.n	24382 <_switch_peripheral_gclk+0x12>
	}
}
   2439c:	46c0      	nop			; (mov r8, r8)
   2439e:	46bd      	mov	sp, r7
   243a0:	b002      	add	sp, #8
   243a2:	bd80      	pop	{r7, pc}
   243a4:	00024a35 	.word	0x00024a35

000243a8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   243a8:	b580      	push	{r7, lr}
   243aa:	b0aa      	sub	sp, #168	; 0xa8
   243ac:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   243ae:	4bc1      	ldr	r3, [pc, #772]	; (246b4 <system_clock_init+0x30c>)
   243b0:	22c2      	movs	r2, #194	; 0xc2
   243b2:	00d2      	lsls	r2, r2, #3
   243b4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   243b6:	2002      	movs	r0, #2
   243b8:	4bbf      	ldr	r3, [pc, #764]	; (246b8 <system_clock_init+0x310>)
   243ba:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   243bc:	4bbf      	ldr	r3, [pc, #764]	; (246bc <system_clock_init+0x314>)
   243be:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   243c0:	2394      	movs	r3, #148	; 0x94
   243c2:	18fb      	adds	r3, r7, r3
   243c4:	0018      	movs	r0, r3
   243c6:	4bbe      	ldr	r3, [pc, #760]	; (246c0 <system_clock_init+0x318>)
   243c8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   243ca:	2394      	movs	r3, #148	; 0x94
   243cc:	18fb      	adds	r3, r7, r3
   243ce:	2280      	movs	r2, #128	; 0x80
   243d0:	0212      	lsls	r2, r2, #8
   243d2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   243d4:	2394      	movs	r3, #148	; 0x94
   243d6:	18fb      	adds	r3, r7, r3
   243d8:	2200      	movs	r2, #0
   243da:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   243dc:	2394      	movs	r3, #148	; 0x94
   243de:	18fb      	adds	r3, r7, r3
   243e0:	2206      	movs	r2, #6
   243e2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   243e4:	2394      	movs	r3, #148	; 0x94
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	2200      	movs	r2, #0
   243ea:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   243ec:	2394      	movs	r3, #148	; 0x94
   243ee:	18fb      	adds	r3, r7, r3
   243f0:	2200      	movs	r2, #0
   243f2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   243f4:	2394      	movs	r3, #148	; 0x94
   243f6:	18fb      	adds	r3, r7, r3
   243f8:	2201      	movs	r2, #1
   243fa:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   243fc:	2394      	movs	r3, #148	; 0x94
   243fe:	18fb      	adds	r3, r7, r3
   24400:	2200      	movs	r2, #0
   24402:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   24404:	2394      	movs	r3, #148	; 0x94
   24406:	18fb      	adds	r3, r7, r3
   24408:	2201      	movs	r2, #1
   2440a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   2440c:	2394      	movs	r3, #148	; 0x94
   2440e:	18fb      	adds	r3, r7, r3
   24410:	0018      	movs	r0, r3
   24412:	4bac      	ldr	r3, [pc, #688]	; (246c4 <system_clock_init+0x31c>)
   24414:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24416:	2005      	movs	r0, #5
   24418:	4bab      	ldr	r3, [pc, #684]	; (246c8 <system_clock_init+0x320>)
   2441a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   2441c:	46c0      	nop			; (mov r8, r8)
   2441e:	2005      	movs	r0, #5
   24420:	4baa      	ldr	r3, [pc, #680]	; (246cc <system_clock_init+0x324>)
   24422:	4798      	blx	r3
   24424:	0003      	movs	r3, r0
   24426:	001a      	movs	r2, r3
   24428:	2301      	movs	r3, #1
   2442a:	4053      	eors	r3, r2
   2442c:	b2db      	uxtb	r3, r3
   2442e:	2b00      	cmp	r3, #0
   24430:	d1f5      	bne.n	2441e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   24432:	2380      	movs	r3, #128	; 0x80
   24434:	18fb      	adds	r3, r7, r3
   24436:	0018      	movs	r0, r3
   24438:	4ba5      	ldr	r3, [pc, #660]	; (246d0 <system_clock_init+0x328>)
   2443a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   2443c:	2380      	movs	r3, #128	; 0x80
   2443e:	18fb      	adds	r3, r7, r3
   24440:	2204      	movs	r2, #4
   24442:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   24444:	2380      	movs	r3, #128	; 0x80
   24446:	18fb      	adds	r3, r7, r3
   24448:	2200      	movs	r2, #0
   2444a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   2444c:	4ba1      	ldr	r3, [pc, #644]	; (246d4 <system_clock_init+0x32c>)
   2444e:	681b      	ldr	r3, [r3, #0]
   24450:	0e9b      	lsrs	r3, r3, #26
   24452:	22a4      	movs	r2, #164	; 0xa4
   24454:	18ba      	adds	r2, r7, r2
   24456:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   24458:	23a4      	movs	r3, #164	; 0xa4
   2445a:	18fb      	adds	r3, r7, r3
   2445c:	681b      	ldr	r3, [r3, #0]
   2445e:	2b3f      	cmp	r3, #63	; 0x3f
   24460:	d103      	bne.n	2446a <system_clock_init+0xc2>
		coarse = 0x1f;
   24462:	231f      	movs	r3, #31
   24464:	22a4      	movs	r2, #164	; 0xa4
   24466:	18ba      	adds	r2, r7, r2
   24468:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   2446a:	23a4      	movs	r3, #164	; 0xa4
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	681b      	ldr	r3, [r3, #0]
   24470:	b2da      	uxtb	r2, r3
   24472:	2380      	movs	r3, #128	; 0x80
   24474:	18fb      	adds	r3, r7, r3
   24476:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   24478:	2380      	movs	r3, #128	; 0x80
   2447a:	18fb      	adds	r3, r7, r3
   2447c:	2200      	movs	r2, #0
   2447e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24480:	2380      	movs	r3, #128	; 0x80
   24482:	18fb      	adds	r3, r7, r3
   24484:	2200      	movs	r2, #0
   24486:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24488:	2380      	movs	r3, #128	; 0x80
   2448a:	18fb      	adds	r3, r7, r3
   2448c:	2200      	movs	r2, #0
   2448e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24490:	2380      	movs	r3, #128	; 0x80
   24492:	18fb      	adds	r3, r7, r3
   24494:	2200      	movs	r2, #0
   24496:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24498:	2380      	movs	r3, #128	; 0x80
   2449a:	18fb      	adds	r3, r7, r3
   2449c:	22b7      	movs	r2, #183	; 0xb7
   2449e:	00d2      	lsls	r2, r2, #3
   244a0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   244a2:	2380      	movs	r3, #128	; 0x80
   244a4:	18fb      	adds	r3, r7, r3
   244a6:	2203      	movs	r2, #3
   244a8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   244aa:	2380      	movs	r3, #128	; 0x80
   244ac:	18fb      	adds	r3, r7, r3
   244ae:	221f      	movs	r2, #31
   244b0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   244b2:	2380      	movs	r3, #128	; 0x80
   244b4:	18fb      	adds	r3, r7, r3
   244b6:	0018      	movs	r0, r3
   244b8:	4b87      	ldr	r3, [pc, #540]	; (246d8 <system_clock_init+0x330>)
   244ba:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   244bc:	237c      	movs	r3, #124	; 0x7c
   244be:	18fb      	adds	r3, r7, r3
   244c0:	0018      	movs	r0, r3
   244c2:	4b86      	ldr	r3, [pc, #536]	; (246dc <system_clock_init+0x334>)
   244c4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   244c6:	237c      	movs	r3, #124	; 0x7c
   244c8:	18fb      	adds	r3, r7, r3
   244ca:	2200      	movs	r2, #0
   244cc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   244ce:	237c      	movs	r3, #124	; 0x7c
   244d0:	18fb      	adds	r3, r7, r3
   244d2:	2201      	movs	r2, #1
   244d4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   244d6:	237c      	movs	r3, #124	; 0x7c
   244d8:	18fb      	adds	r3, r7, r3
   244da:	2201      	movs	r2, #1
   244dc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   244de:	237c      	movs	r3, #124	; 0x7c
   244e0:	18fb      	adds	r3, r7, r3
   244e2:	0018      	movs	r0, r3
   244e4:	4b7e      	ldr	r3, [pc, #504]	; (246e0 <system_clock_init+0x338>)
   244e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   244e8:	2006      	movs	r0, #6
   244ea:	4b77      	ldr	r3, [pc, #476]	; (246c8 <system_clock_init+0x320>)
   244ec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   244ee:	4b7d      	ldr	r3, [pc, #500]	; (246e4 <system_clock_init+0x33c>)
   244f0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   244f2:	2364      	movs	r3, #100	; 0x64
   244f4:	18fb      	adds	r3, r7, r3
   244f6:	0018      	movs	r0, r3
   244f8:	4b7b      	ldr	r3, [pc, #492]	; (246e8 <system_clock_init+0x340>)
   244fa:	4798      	blx	r3
   244fc:	2364      	movs	r3, #100	; 0x64
   244fe:	18fb      	adds	r3, r7, r3
   24500:	2205      	movs	r2, #5
   24502:	701a      	strb	r2, [r3, #0]
   24504:	2364      	movs	r3, #100	; 0x64
   24506:	18fb      	adds	r3, r7, r3
   24508:	2201      	movs	r2, #1
   2450a:	605a      	str	r2, [r3, #4]
   2450c:	2364      	movs	r3, #100	; 0x64
   2450e:	18fb      	adds	r3, r7, r3
   24510:	2200      	movs	r2, #0
   24512:	721a      	strb	r2, [r3, #8]
   24514:	2364      	movs	r3, #100	; 0x64
   24516:	18fb      	adds	r3, r7, r3
   24518:	2200      	movs	r2, #0
   2451a:	725a      	strb	r2, [r3, #9]
   2451c:	2364      	movs	r3, #100	; 0x64
   2451e:	18fb      	adds	r3, r7, r3
   24520:	0019      	movs	r1, r3
   24522:	2001      	movs	r0, #1
   24524:	4b71      	ldr	r3, [pc, #452]	; (246ec <system_clock_init+0x344>)
   24526:	4798      	blx	r3
   24528:	2001      	movs	r0, #1
   2452a:	4b71      	ldr	r3, [pc, #452]	; (246f0 <system_clock_init+0x348>)
   2452c:	4798      	blx	r3
   2452e:	234c      	movs	r3, #76	; 0x4c
   24530:	18fb      	adds	r3, r7, r3
   24532:	0018      	movs	r0, r3
   24534:	4b6c      	ldr	r3, [pc, #432]	; (246e8 <system_clock_init+0x340>)
   24536:	4798      	blx	r3
   24538:	234c      	movs	r3, #76	; 0x4c
   2453a:	18fb      	adds	r3, r7, r3
   2453c:	2206      	movs	r2, #6
   2453e:	701a      	strb	r2, [r3, #0]
   24540:	234c      	movs	r3, #76	; 0x4c
   24542:	18fb      	adds	r3, r7, r3
   24544:	2201      	movs	r2, #1
   24546:	605a      	str	r2, [r3, #4]
   24548:	234c      	movs	r3, #76	; 0x4c
   2454a:	18fb      	adds	r3, r7, r3
   2454c:	2201      	movs	r2, #1
   2454e:	721a      	strb	r2, [r3, #8]
   24550:	234c      	movs	r3, #76	; 0x4c
   24552:	18fb      	adds	r3, r7, r3
   24554:	2200      	movs	r2, #0
   24556:	725a      	strb	r2, [r3, #9]
   24558:	234c      	movs	r3, #76	; 0x4c
   2455a:	18fb      	adds	r3, r7, r3
   2455c:	0019      	movs	r1, r3
   2455e:	2003      	movs	r0, #3
   24560:	4b62      	ldr	r3, [pc, #392]	; (246ec <system_clock_init+0x344>)
   24562:	4798      	blx	r3
   24564:	2003      	movs	r0, #3
   24566:	4b62      	ldr	r3, [pc, #392]	; (246f0 <system_clock_init+0x348>)
   24568:	4798      	blx	r3
   2456a:	2340      	movs	r3, #64	; 0x40
   2456c:	18fb      	adds	r3, r7, r3
   2456e:	0018      	movs	r0, r3
   24570:	4b5d      	ldr	r3, [pc, #372]	; (246e8 <system_clock_init+0x340>)
   24572:	4798      	blx	r3
   24574:	2340      	movs	r3, #64	; 0x40
   24576:	18fb      	adds	r3, r7, r3
   24578:	2203      	movs	r2, #3
   2457a:	701a      	strb	r2, [r3, #0]
   2457c:	2340      	movs	r3, #64	; 0x40
   2457e:	18fb      	adds	r3, r7, r3
   24580:	2220      	movs	r2, #32
   24582:	605a      	str	r2, [r3, #4]
   24584:	2340      	movs	r3, #64	; 0x40
   24586:	18fb      	adds	r3, r7, r3
   24588:	2200      	movs	r2, #0
   2458a:	721a      	strb	r2, [r3, #8]
   2458c:	2340      	movs	r3, #64	; 0x40
   2458e:	18fb      	adds	r3, r7, r3
   24590:	2200      	movs	r2, #0
   24592:	725a      	strb	r2, [r3, #9]
   24594:	2340      	movs	r3, #64	; 0x40
   24596:	18fb      	adds	r3, r7, r3
   24598:	0019      	movs	r1, r3
   2459a:	2004      	movs	r0, #4
   2459c:	4b53      	ldr	r3, [pc, #332]	; (246ec <system_clock_init+0x344>)
   2459e:	4798      	blx	r3
   245a0:	2004      	movs	r0, #4
   245a2:	4b53      	ldr	r3, [pc, #332]	; (246f0 <system_clock_init+0x348>)
   245a4:	4798      	blx	r3
   245a6:	2334      	movs	r3, #52	; 0x34
   245a8:	18fb      	adds	r3, r7, r3
   245aa:	0018      	movs	r0, r3
   245ac:	4b4e      	ldr	r3, [pc, #312]	; (246e8 <system_clock_init+0x340>)
   245ae:	4798      	blx	r3
   245b0:	2334      	movs	r3, #52	; 0x34
   245b2:	18fb      	adds	r3, r7, r3
   245b4:	2207      	movs	r2, #7
   245b6:	701a      	strb	r2, [r3, #0]
   245b8:	2334      	movs	r3, #52	; 0x34
   245ba:	18fb      	adds	r3, r7, r3
   245bc:	2201      	movs	r2, #1
   245be:	605a      	str	r2, [r3, #4]
   245c0:	2334      	movs	r3, #52	; 0x34
   245c2:	18fb      	adds	r3, r7, r3
   245c4:	2200      	movs	r2, #0
   245c6:	721a      	strb	r2, [r3, #8]
   245c8:	2334      	movs	r3, #52	; 0x34
   245ca:	18fb      	adds	r3, r7, r3
   245cc:	2200      	movs	r2, #0
   245ce:	725a      	strb	r2, [r3, #9]
   245d0:	2334      	movs	r3, #52	; 0x34
   245d2:	18fb      	adds	r3, r7, r3
   245d4:	0019      	movs	r1, r3
   245d6:	2005      	movs	r0, #5
   245d8:	4b44      	ldr	r3, [pc, #272]	; (246ec <system_clock_init+0x344>)
   245da:	4798      	blx	r3
   245dc:	2005      	movs	r0, #5
   245de:	4b44      	ldr	r3, [pc, #272]	; (246f0 <system_clock_init+0x348>)
   245e0:	4798      	blx	r3
   245e2:	2328      	movs	r3, #40	; 0x28
   245e4:	18fb      	adds	r3, r7, r3
   245e6:	0018      	movs	r0, r3
   245e8:	4b3f      	ldr	r3, [pc, #252]	; (246e8 <system_clock_init+0x340>)
   245ea:	4798      	blx	r3
   245ec:	2328      	movs	r3, #40	; 0x28
   245ee:	18fb      	adds	r3, r7, r3
   245f0:	2206      	movs	r2, #6
   245f2:	701a      	strb	r2, [r3, #0]
   245f4:	2328      	movs	r3, #40	; 0x28
   245f6:	18fb      	adds	r3, r7, r3
   245f8:	2201      	movs	r2, #1
   245fa:	605a      	str	r2, [r3, #4]
   245fc:	2328      	movs	r3, #40	; 0x28
   245fe:	18fb      	adds	r3, r7, r3
   24600:	2201      	movs	r2, #1
   24602:	721a      	strb	r2, [r3, #8]
   24604:	2328      	movs	r3, #40	; 0x28
   24606:	18fb      	adds	r3, r7, r3
   24608:	2200      	movs	r2, #0
   2460a:	725a      	strb	r2, [r3, #9]
   2460c:	2328      	movs	r3, #40	; 0x28
   2460e:	18fb      	adds	r3, r7, r3
   24610:	0019      	movs	r1, r3
   24612:	2006      	movs	r0, #6
   24614:	4b35      	ldr	r3, [pc, #212]	; (246ec <system_clock_init+0x344>)
   24616:	4798      	blx	r3
   24618:	2006      	movs	r0, #6
   2461a:	4b35      	ldr	r3, [pc, #212]	; (246f0 <system_clock_init+0x348>)
   2461c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   2461e:	230c      	movs	r3, #12
   24620:	18fb      	adds	r3, r7, r3
   24622:	0018      	movs	r0, r3
   24624:	4b33      	ldr	r3, [pc, #204]	; (246f4 <system_clock_init+0x34c>)
   24626:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24628:	230c      	movs	r3, #12
   2462a:	18fb      	adds	r3, r7, r3
   2462c:	2201      	movs	r2, #1
   2462e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   24630:	230c      	movs	r3, #12
   24632:	18fb      	adds	r3, r7, r3
   24634:	0019      	movs	r1, r3
   24636:	2000      	movs	r0, #0
   24638:	4b2f      	ldr	r3, [pc, #188]	; (246f8 <system_clock_init+0x350>)
   2463a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   2463c:	2000      	movs	r0, #0
   2463e:	4b2f      	ldr	r3, [pc, #188]	; (246fc <system_clock_init+0x354>)
   24640:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   24642:	2007      	movs	r0, #7
   24644:	4b20      	ldr	r3, [pc, #128]	; (246c8 <system_clock_init+0x320>)
   24646:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   24648:	46c0      	nop			; (mov r8, r8)
   2464a:	2007      	movs	r0, #7
   2464c:	4b1f      	ldr	r3, [pc, #124]	; (246cc <system_clock_init+0x324>)
   2464e:	4798      	blx	r3
   24650:	0003      	movs	r3, r0
   24652:	001a      	movs	r2, r3
   24654:	2301      	movs	r3, #1
   24656:	4053      	eors	r3, r2
   24658:	b2db      	uxtb	r3, r3
   2465a:	2b00      	cmp	r3, #0
   2465c:	d1f5      	bne.n	2464a <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2465e:	2000      	movs	r0, #0
   24660:	4b27      	ldr	r3, [pc, #156]	; (24700 <system_clock_init+0x358>)
   24662:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   24664:	2100      	movs	r1, #0
   24666:	2000      	movs	r0, #0
   24668:	4b26      	ldr	r3, [pc, #152]	; (24704 <system_clock_init+0x35c>)
   2466a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2466c:	2100      	movs	r1, #0
   2466e:	2001      	movs	r0, #1
   24670:	4b24      	ldr	r3, [pc, #144]	; (24704 <system_clock_init+0x35c>)
   24672:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   24674:	2100      	movs	r1, #0
   24676:	2002      	movs	r0, #2
   24678:	4b22      	ldr	r3, [pc, #136]	; (24704 <system_clock_init+0x35c>)
   2467a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2467c:	003b      	movs	r3, r7
   2467e:	0018      	movs	r0, r3
   24680:	4b19      	ldr	r3, [pc, #100]	; (246e8 <system_clock_init+0x340>)
   24682:	4798      	blx	r3
   24684:	003b      	movs	r3, r7
   24686:	2207      	movs	r2, #7
   24688:	701a      	strb	r2, [r3, #0]
   2468a:	003b      	movs	r3, r7
   2468c:	2201      	movs	r2, #1
   2468e:	605a      	str	r2, [r3, #4]
   24690:	003b      	movs	r3, r7
   24692:	2200      	movs	r2, #0
   24694:	721a      	strb	r2, [r3, #8]
   24696:	003b      	movs	r3, r7
   24698:	2200      	movs	r2, #0
   2469a:	725a      	strb	r2, [r3, #9]
   2469c:	003b      	movs	r3, r7
   2469e:	0019      	movs	r1, r3
   246a0:	2000      	movs	r0, #0
   246a2:	4b12      	ldr	r3, [pc, #72]	; (246ec <system_clock_init+0x344>)
   246a4:	4798      	blx	r3
   246a6:	2000      	movs	r0, #0
   246a8:	4b11      	ldr	r3, [pc, #68]	; (246f0 <system_clock_init+0x348>)
   246aa:	4798      	blx	r3
#endif
}
   246ac:	46c0      	nop			; (mov r8, r8)
   246ae:	46bd      	mov	sp, r7
   246b0:	b02a      	add	sp, #168	; 0xa8
   246b2:	bd80      	pop	{r7, pc}
   246b4:	40000800 	.word	0x40000800
   246b8:	00023e85 	.word	0x00023e85
   246bc:	00024371 	.word	0x00024371
   246c0:	00023d55 	.word	0x00023d55
   246c4:	00024051 	.word	0x00024051
   246c8:	00024241 	.word	0x00024241
   246cc:	000242ed 	.word	0x000242ed
   246d0:	00023dbf 	.word	0x00023dbf
   246d4:	00806024 	.word	0x00806024
   246d8:	00024171 	.word	0x00024171
   246dc:	00023d9d 	.word	0x00023d9d
   246e0:	00023fd9 	.word	0x00023fd9
   246e4:	000247ad 	.word	0x000247ad
   246e8:	00023d11 	.word	0x00023d11
   246ec:	000247dd 	.word	0x000247dd
   246f0:	00024901 	.word	0x00024901
   246f4:	00023d3f 	.word	0x00023d3f
   246f8:	00024a35 	.word	0x00024a35
   246fc:	00024a79 	.word	0x00024a79
   24700:	00023e11 	.word	0x00023e11
   24704:	00023e31 	.word	0x00023e31

00024708 <system_apb_clock_set_mask>:
{
   24708:	b580      	push	{r7, lr}
   2470a:	b082      	sub	sp, #8
   2470c:	af00      	add	r7, sp, #0
   2470e:	0002      	movs	r2, r0
   24710:	6039      	str	r1, [r7, #0]
   24712:	1dfb      	adds	r3, r7, #7
   24714:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24716:	1dfb      	adds	r3, r7, #7
   24718:	781b      	ldrb	r3, [r3, #0]
   2471a:	2b01      	cmp	r3, #1
   2471c:	d00a      	beq.n	24734 <system_apb_clock_set_mask+0x2c>
   2471e:	2b02      	cmp	r3, #2
   24720:	d00f      	beq.n	24742 <system_apb_clock_set_mask+0x3a>
   24722:	2b00      	cmp	r3, #0
   24724:	d114      	bne.n	24750 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24726:	4b0e      	ldr	r3, [pc, #56]	; (24760 <system_apb_clock_set_mask+0x58>)
   24728:	4a0d      	ldr	r2, [pc, #52]	; (24760 <system_apb_clock_set_mask+0x58>)
   2472a:	6991      	ldr	r1, [r2, #24]
   2472c:	683a      	ldr	r2, [r7, #0]
   2472e:	430a      	orrs	r2, r1
   24730:	619a      	str	r2, [r3, #24]
			break;
   24732:	e00f      	b.n	24754 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24734:	4b0a      	ldr	r3, [pc, #40]	; (24760 <system_apb_clock_set_mask+0x58>)
   24736:	4a0a      	ldr	r2, [pc, #40]	; (24760 <system_apb_clock_set_mask+0x58>)
   24738:	69d1      	ldr	r1, [r2, #28]
   2473a:	683a      	ldr	r2, [r7, #0]
   2473c:	430a      	orrs	r2, r1
   2473e:	61da      	str	r2, [r3, #28]
			break;
   24740:	e008      	b.n	24754 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24742:	4b07      	ldr	r3, [pc, #28]	; (24760 <system_apb_clock_set_mask+0x58>)
   24744:	4a06      	ldr	r2, [pc, #24]	; (24760 <system_apb_clock_set_mask+0x58>)
   24746:	6a11      	ldr	r1, [r2, #32]
   24748:	683a      	ldr	r2, [r7, #0]
   2474a:	430a      	orrs	r2, r1
   2474c:	621a      	str	r2, [r3, #32]
			break;
   2474e:	e001      	b.n	24754 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24750:	2317      	movs	r3, #23
   24752:	e000      	b.n	24756 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24754:	2300      	movs	r3, #0
}
   24756:	0018      	movs	r0, r3
   24758:	46bd      	mov	sp, r7
   2475a:	b002      	add	sp, #8
   2475c:	bd80      	pop	{r7, pc}
   2475e:	46c0      	nop			; (mov r8, r8)
   24760:	40000400 	.word	0x40000400

00024764 <system_interrupt_enter_critical_section>:
{
   24764:	b580      	push	{r7, lr}
   24766:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   24768:	4b02      	ldr	r3, [pc, #8]	; (24774 <system_interrupt_enter_critical_section+0x10>)
   2476a:	4798      	blx	r3
}
   2476c:	46c0      	nop			; (mov r8, r8)
   2476e:	46bd      	mov	sp, r7
   24770:	bd80      	pop	{r7, pc}
   24772:	46c0      	nop			; (mov r8, r8)
   24774:	00023c7d 	.word	0x00023c7d

00024778 <system_interrupt_leave_critical_section>:
{
   24778:	b580      	push	{r7, lr}
   2477a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2477c:	4b02      	ldr	r3, [pc, #8]	; (24788 <system_interrupt_leave_critical_section+0x10>)
   2477e:	4798      	blx	r3
}
   24780:	46c0      	nop			; (mov r8, r8)
   24782:	46bd      	mov	sp, r7
   24784:	bd80      	pop	{r7, pc}
   24786:	46c0      	nop			; (mov r8, r8)
   24788:	00023cd1 	.word	0x00023cd1

0002478c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2478c:	b580      	push	{r7, lr}
   2478e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24790:	4b05      	ldr	r3, [pc, #20]	; (247a8 <system_gclk_is_syncing+0x1c>)
   24792:	785b      	ldrb	r3, [r3, #1]
   24794:	b2db      	uxtb	r3, r3
   24796:	b25b      	sxtb	r3, r3
   24798:	2b00      	cmp	r3, #0
   2479a:	da01      	bge.n	247a0 <system_gclk_is_syncing+0x14>
		return true;
   2479c:	2301      	movs	r3, #1
   2479e:	e000      	b.n	247a2 <system_gclk_is_syncing+0x16>
	}

	return false;
   247a0:	2300      	movs	r3, #0
}
   247a2:	0018      	movs	r0, r3
   247a4:	46bd      	mov	sp, r7
   247a6:	bd80      	pop	{r7, pc}
   247a8:	40000c00 	.word	0x40000c00

000247ac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   247ac:	b580      	push	{r7, lr}
   247ae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   247b0:	2108      	movs	r1, #8
   247b2:	2000      	movs	r0, #0
   247b4:	4b07      	ldr	r3, [pc, #28]	; (247d4 <system_gclk_init+0x28>)
   247b6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   247b8:	4b07      	ldr	r3, [pc, #28]	; (247d8 <system_gclk_init+0x2c>)
   247ba:	2201      	movs	r2, #1
   247bc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   247be:	46c0      	nop			; (mov r8, r8)
   247c0:	4b05      	ldr	r3, [pc, #20]	; (247d8 <system_gclk_init+0x2c>)
   247c2:	781b      	ldrb	r3, [r3, #0]
   247c4:	b2db      	uxtb	r3, r3
   247c6:	001a      	movs	r2, r3
   247c8:	2301      	movs	r3, #1
   247ca:	4013      	ands	r3, r2
   247cc:	d1f8      	bne.n	247c0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   247ce:	46c0      	nop			; (mov r8, r8)
   247d0:	46bd      	mov	sp, r7
   247d2:	bd80      	pop	{r7, pc}
   247d4:	00024709 	.word	0x00024709
   247d8:	40000c00 	.word	0x40000c00

000247dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   247dc:	b580      	push	{r7, lr}
   247de:	b086      	sub	sp, #24
   247e0:	af00      	add	r7, sp, #0
   247e2:	0002      	movs	r2, r0
   247e4:	6039      	str	r1, [r7, #0]
   247e6:	1dfb      	adds	r3, r7, #7
   247e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   247ea:	1dfb      	adds	r3, r7, #7
   247ec:	781b      	ldrb	r3, [r3, #0]
   247ee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   247f0:	1dfb      	adds	r3, r7, #7
   247f2:	781b      	ldrb	r3, [r3, #0]
   247f4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   247f6:	683b      	ldr	r3, [r7, #0]
   247f8:	781b      	ldrb	r3, [r3, #0]
   247fa:	021b      	lsls	r3, r3, #8
   247fc:	001a      	movs	r2, r3
   247fe:	697b      	ldr	r3, [r7, #20]
   24800:	4313      	orrs	r3, r2
   24802:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   24804:	683b      	ldr	r3, [r7, #0]
   24806:	785b      	ldrb	r3, [r3, #1]
   24808:	2b00      	cmp	r3, #0
   2480a:	d004      	beq.n	24816 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2480c:	697b      	ldr	r3, [r7, #20]
   2480e:	2280      	movs	r2, #128	; 0x80
   24810:	02d2      	lsls	r2, r2, #11
   24812:	4313      	orrs	r3, r2
   24814:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24816:	683b      	ldr	r3, [r7, #0]
   24818:	7a5b      	ldrb	r3, [r3, #9]
   2481a:	2b00      	cmp	r3, #0
   2481c:	d004      	beq.n	24828 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2481e:	697b      	ldr	r3, [r7, #20]
   24820:	2280      	movs	r2, #128	; 0x80
   24822:	0312      	lsls	r2, r2, #12
   24824:	4313      	orrs	r3, r2
   24826:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   24828:	683b      	ldr	r3, [r7, #0]
   2482a:	685b      	ldr	r3, [r3, #4]
   2482c:	2b01      	cmp	r3, #1
   2482e:	d92c      	bls.n	2488a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   24830:	683b      	ldr	r3, [r7, #0]
   24832:	685a      	ldr	r2, [r3, #4]
   24834:	683b      	ldr	r3, [r7, #0]
   24836:	685b      	ldr	r3, [r3, #4]
   24838:	3b01      	subs	r3, #1
   2483a:	4013      	ands	r3, r2
   2483c:	d11a      	bne.n	24874 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2483e:	2300      	movs	r3, #0
   24840:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   24842:	2302      	movs	r3, #2
   24844:	60bb      	str	r3, [r7, #8]
   24846:	e005      	b.n	24854 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   24848:	68fb      	ldr	r3, [r7, #12]
   2484a:	3301      	adds	r3, #1
   2484c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2484e:	68bb      	ldr	r3, [r7, #8]
   24850:	005b      	lsls	r3, r3, #1
   24852:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   24854:	683b      	ldr	r3, [r7, #0]
   24856:	685a      	ldr	r2, [r3, #4]
   24858:	68bb      	ldr	r3, [r7, #8]
   2485a:	429a      	cmp	r2, r3
   2485c:	d8f4      	bhi.n	24848 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2485e:	68fb      	ldr	r3, [r7, #12]
   24860:	021b      	lsls	r3, r3, #8
   24862:	693a      	ldr	r2, [r7, #16]
   24864:	4313      	orrs	r3, r2
   24866:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   24868:	697b      	ldr	r3, [r7, #20]
   2486a:	2280      	movs	r2, #128	; 0x80
   2486c:	0352      	lsls	r2, r2, #13
   2486e:	4313      	orrs	r3, r2
   24870:	617b      	str	r3, [r7, #20]
   24872:	e00a      	b.n	2488a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   24874:	683b      	ldr	r3, [r7, #0]
   24876:	685b      	ldr	r3, [r3, #4]
   24878:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2487a:	693a      	ldr	r2, [r7, #16]
   2487c:	4313      	orrs	r3, r2
   2487e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   24880:	697b      	ldr	r3, [r7, #20]
   24882:	2280      	movs	r2, #128	; 0x80
   24884:	0292      	lsls	r2, r2, #10
   24886:	4313      	orrs	r3, r2
   24888:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2488a:	683b      	ldr	r3, [r7, #0]
   2488c:	7a1b      	ldrb	r3, [r3, #8]
   2488e:	2b00      	cmp	r3, #0
   24890:	d004      	beq.n	2489c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   24892:	697b      	ldr	r3, [r7, #20]
   24894:	2280      	movs	r2, #128	; 0x80
   24896:	0392      	lsls	r2, r2, #14
   24898:	4313      	orrs	r3, r2
   2489a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2489c:	46c0      	nop			; (mov r8, r8)
   2489e:	4b13      	ldr	r3, [pc, #76]	; (248ec <system_gclk_gen_set_config+0x110>)
   248a0:	4798      	blx	r3
   248a2:	1e03      	subs	r3, r0, #0
   248a4:	d1fb      	bne.n	2489e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   248a6:	4b12      	ldr	r3, [pc, #72]	; (248f0 <system_gclk_gen_set_config+0x114>)
   248a8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   248aa:	4a12      	ldr	r2, [pc, #72]	; (248f4 <system_gclk_gen_set_config+0x118>)
   248ac:	1dfb      	adds	r3, r7, #7
   248ae:	781b      	ldrb	r3, [r3, #0]
   248b0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   248b2:	46c0      	nop			; (mov r8, r8)
   248b4:	4b0d      	ldr	r3, [pc, #52]	; (248ec <system_gclk_gen_set_config+0x110>)
   248b6:	4798      	blx	r3
   248b8:	1e03      	subs	r3, r0, #0
   248ba:	d1fb      	bne.n	248b4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   248bc:	4b0e      	ldr	r3, [pc, #56]	; (248f8 <system_gclk_gen_set_config+0x11c>)
   248be:	693a      	ldr	r2, [r7, #16]
   248c0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   248c2:	46c0      	nop			; (mov r8, r8)
   248c4:	4b09      	ldr	r3, [pc, #36]	; (248ec <system_gclk_gen_set_config+0x110>)
   248c6:	4798      	blx	r3
   248c8:	1e03      	subs	r3, r0, #0
   248ca:	d1fb      	bne.n	248c4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   248cc:	4b0a      	ldr	r3, [pc, #40]	; (248f8 <system_gclk_gen_set_config+0x11c>)
   248ce:	4a0a      	ldr	r2, [pc, #40]	; (248f8 <system_gclk_gen_set_config+0x11c>)
   248d0:	6851      	ldr	r1, [r2, #4]
   248d2:	2280      	movs	r2, #128	; 0x80
   248d4:	0252      	lsls	r2, r2, #9
   248d6:	4011      	ands	r1, r2
   248d8:	697a      	ldr	r2, [r7, #20]
   248da:	430a      	orrs	r2, r1
   248dc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   248de:	4b07      	ldr	r3, [pc, #28]	; (248fc <system_gclk_gen_set_config+0x120>)
   248e0:	4798      	blx	r3
}
   248e2:	46c0      	nop			; (mov r8, r8)
   248e4:	46bd      	mov	sp, r7
   248e6:	b006      	add	sp, #24
   248e8:	bd80      	pop	{r7, pc}
   248ea:	46c0      	nop			; (mov r8, r8)
   248ec:	0002478d 	.word	0x0002478d
   248f0:	00024765 	.word	0x00024765
   248f4:	40000c08 	.word	0x40000c08
   248f8:	40000c00 	.word	0x40000c00
   248fc:	00024779 	.word	0x00024779

00024900 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   24900:	b580      	push	{r7, lr}
   24902:	b082      	sub	sp, #8
   24904:	af00      	add	r7, sp, #0
   24906:	0002      	movs	r2, r0
   24908:	1dfb      	adds	r3, r7, #7
   2490a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2490c:	46c0      	nop			; (mov r8, r8)
   2490e:	4b0e      	ldr	r3, [pc, #56]	; (24948 <system_gclk_gen_enable+0x48>)
   24910:	4798      	blx	r3
   24912:	1e03      	subs	r3, r0, #0
   24914:	d1fb      	bne.n	2490e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24916:	4b0d      	ldr	r3, [pc, #52]	; (2494c <system_gclk_gen_enable+0x4c>)
   24918:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2491a:	4a0d      	ldr	r2, [pc, #52]	; (24950 <system_gclk_gen_enable+0x50>)
   2491c:	1dfb      	adds	r3, r7, #7
   2491e:	781b      	ldrb	r3, [r3, #0]
   24920:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   24922:	46c0      	nop			; (mov r8, r8)
   24924:	4b08      	ldr	r3, [pc, #32]	; (24948 <system_gclk_gen_enable+0x48>)
   24926:	4798      	blx	r3
   24928:	1e03      	subs	r3, r0, #0
   2492a:	d1fb      	bne.n	24924 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2492c:	4b09      	ldr	r3, [pc, #36]	; (24954 <system_gclk_gen_enable+0x54>)
   2492e:	4a09      	ldr	r2, [pc, #36]	; (24954 <system_gclk_gen_enable+0x54>)
   24930:	6852      	ldr	r2, [r2, #4]
   24932:	2180      	movs	r1, #128	; 0x80
   24934:	0249      	lsls	r1, r1, #9
   24936:	430a      	orrs	r2, r1
   24938:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2493a:	4b07      	ldr	r3, [pc, #28]	; (24958 <system_gclk_gen_enable+0x58>)
   2493c:	4798      	blx	r3
}
   2493e:	46c0      	nop			; (mov r8, r8)
   24940:	46bd      	mov	sp, r7
   24942:	b002      	add	sp, #8
   24944:	bd80      	pop	{r7, pc}
   24946:	46c0      	nop			; (mov r8, r8)
   24948:	0002478d 	.word	0x0002478d
   2494c:	00024765 	.word	0x00024765
   24950:	40000c04 	.word	0x40000c04
   24954:	40000c00 	.word	0x40000c00
   24958:	00024779 	.word	0x00024779

0002495c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2495c:	b580      	push	{r7, lr}
   2495e:	b086      	sub	sp, #24
   24960:	af00      	add	r7, sp, #0
   24962:	0002      	movs	r2, r0
   24964:	1dfb      	adds	r3, r7, #7
   24966:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   24968:	46c0      	nop			; (mov r8, r8)
   2496a:	4b2a      	ldr	r3, [pc, #168]	; (24a14 <system_gclk_gen_get_hz+0xb8>)
   2496c:	4798      	blx	r3
   2496e:	1e03      	subs	r3, r0, #0
   24970:	d1fb      	bne.n	2496a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   24972:	4b29      	ldr	r3, [pc, #164]	; (24a18 <system_gclk_gen_get_hz+0xbc>)
   24974:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   24976:	4a29      	ldr	r2, [pc, #164]	; (24a1c <system_gclk_gen_get_hz+0xc0>)
   24978:	1dfb      	adds	r3, r7, #7
   2497a:	781b      	ldrb	r3, [r3, #0]
   2497c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2497e:	46c0      	nop			; (mov r8, r8)
   24980:	4b24      	ldr	r3, [pc, #144]	; (24a14 <system_gclk_gen_get_hz+0xb8>)
   24982:	4798      	blx	r3
   24984:	1e03      	subs	r3, r0, #0
   24986:	d1fb      	bne.n	24980 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   24988:	4b25      	ldr	r3, [pc, #148]	; (24a20 <system_gclk_gen_get_hz+0xc4>)
   2498a:	685b      	ldr	r3, [r3, #4]
   2498c:	04db      	lsls	r3, r3, #19
   2498e:	0edb      	lsrs	r3, r3, #27
   24990:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   24992:	0018      	movs	r0, r3
   24994:	4b23      	ldr	r3, [pc, #140]	; (24a24 <system_gclk_gen_get_hz+0xc8>)
   24996:	4798      	blx	r3
   24998:	0003      	movs	r3, r0
   2499a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2499c:	4a1f      	ldr	r2, [pc, #124]	; (24a1c <system_gclk_gen_get_hz+0xc0>)
   2499e:	1dfb      	adds	r3, r7, #7
   249a0:	781b      	ldrb	r3, [r3, #0]
   249a2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   249a4:	4b1e      	ldr	r3, [pc, #120]	; (24a20 <system_gclk_gen_get_hz+0xc4>)
   249a6:	685b      	ldr	r3, [r3, #4]
   249a8:	02db      	lsls	r3, r3, #11
   249aa:	0fdb      	lsrs	r3, r3, #31
   249ac:	b2da      	uxtb	r2, r3
   249ae:	2313      	movs	r3, #19
   249b0:	18fb      	adds	r3, r7, r3
   249b2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   249b4:	4a1c      	ldr	r2, [pc, #112]	; (24a28 <system_gclk_gen_get_hz+0xcc>)
   249b6:	1dfb      	adds	r3, r7, #7
   249b8:	781b      	ldrb	r3, [r3, #0]
   249ba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   249bc:	46c0      	nop			; (mov r8, r8)
   249be:	4b15      	ldr	r3, [pc, #84]	; (24a14 <system_gclk_gen_get_hz+0xb8>)
   249c0:	4798      	blx	r3
   249c2:	1e03      	subs	r3, r0, #0
   249c4:	d1fb      	bne.n	249be <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   249c6:	4b16      	ldr	r3, [pc, #88]	; (24a20 <system_gclk_gen_get_hz+0xc4>)
   249c8:	689b      	ldr	r3, [r3, #8]
   249ca:	021b      	lsls	r3, r3, #8
   249cc:	0c1b      	lsrs	r3, r3, #16
   249ce:	b29b      	uxth	r3, r3
   249d0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   249d2:	4b16      	ldr	r3, [pc, #88]	; (24a2c <system_gclk_gen_get_hz+0xd0>)
   249d4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   249d6:	2313      	movs	r3, #19
   249d8:	18fb      	adds	r3, r7, r3
   249da:	781b      	ldrb	r3, [r3, #0]
   249dc:	2b00      	cmp	r3, #0
   249de:	d109      	bne.n	249f4 <system_gclk_gen_get_hz+0x98>
   249e0:	68fb      	ldr	r3, [r7, #12]
   249e2:	2b01      	cmp	r3, #1
   249e4:	d906      	bls.n	249f4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   249e6:	4b12      	ldr	r3, [pc, #72]	; (24a30 <system_gclk_gen_get_hz+0xd4>)
   249e8:	68f9      	ldr	r1, [r7, #12]
   249ea:	6978      	ldr	r0, [r7, #20]
   249ec:	4798      	blx	r3
   249ee:	0003      	movs	r3, r0
   249f0:	617b      	str	r3, [r7, #20]
   249f2:	e00a      	b.n	24a0a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   249f4:	2313      	movs	r3, #19
   249f6:	18fb      	adds	r3, r7, r3
   249f8:	781b      	ldrb	r3, [r3, #0]
   249fa:	2b00      	cmp	r3, #0
   249fc:	d005      	beq.n	24a0a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   249fe:	68fb      	ldr	r3, [r7, #12]
   24a00:	3301      	adds	r3, #1
   24a02:	697a      	ldr	r2, [r7, #20]
   24a04:	40da      	lsrs	r2, r3
   24a06:	0013      	movs	r3, r2
   24a08:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   24a0a:	697b      	ldr	r3, [r7, #20]
}
   24a0c:	0018      	movs	r0, r3
   24a0e:	46bd      	mov	sp, r7
   24a10:	b006      	add	sp, #24
   24a12:	bd80      	pop	{r7, pc}
   24a14:	0002478d 	.word	0x0002478d
   24a18:	00024765 	.word	0x00024765
   24a1c:	40000c04 	.word	0x40000c04
   24a20:	40000c00 	.word	0x40000c00
   24a24:	00023f19 	.word	0x00023f19
   24a28:	40000c08 	.word	0x40000c08
   24a2c:	00024779 	.word	0x00024779
   24a30:	0002657d 	.word	0x0002657d

00024a34 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   24a34:	b580      	push	{r7, lr}
   24a36:	b084      	sub	sp, #16
   24a38:	af00      	add	r7, sp, #0
   24a3a:	0002      	movs	r2, r0
   24a3c:	6039      	str	r1, [r7, #0]
   24a3e:	1dfb      	adds	r3, r7, #7
   24a40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   24a42:	1dfb      	adds	r3, r7, #7
   24a44:	781b      	ldrb	r3, [r3, #0]
   24a46:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   24a48:	683b      	ldr	r3, [r7, #0]
   24a4a:	781b      	ldrb	r3, [r3, #0]
   24a4c:	021b      	lsls	r3, r3, #8
   24a4e:	001a      	movs	r2, r3
   24a50:	68fb      	ldr	r3, [r7, #12]
   24a52:	4313      	orrs	r3, r2
   24a54:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   24a56:	1dfb      	adds	r3, r7, #7
   24a58:	781b      	ldrb	r3, [r3, #0]
   24a5a:	0018      	movs	r0, r3
   24a5c:	4b04      	ldr	r3, [pc, #16]	; (24a70 <system_gclk_chan_set_config+0x3c>)
   24a5e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   24a60:	4b04      	ldr	r3, [pc, #16]	; (24a74 <system_gclk_chan_set_config+0x40>)
   24a62:	68fa      	ldr	r2, [r7, #12]
   24a64:	b292      	uxth	r2, r2
   24a66:	805a      	strh	r2, [r3, #2]
}
   24a68:	46c0      	nop			; (mov r8, r8)
   24a6a:	46bd      	mov	sp, r7
   24a6c:	b004      	add	sp, #16
   24a6e:	bd80      	pop	{r7, pc}
   24a70:	00024ac1 	.word	0x00024ac1
   24a74:	40000c00 	.word	0x40000c00

00024a78 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   24a78:	b580      	push	{r7, lr}
   24a7a:	b082      	sub	sp, #8
   24a7c:	af00      	add	r7, sp, #0
   24a7e:	0002      	movs	r2, r0
   24a80:	1dfb      	adds	r3, r7, #7
   24a82:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24a84:	4b0a      	ldr	r3, [pc, #40]	; (24ab0 <system_gclk_chan_enable+0x38>)
   24a86:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24a88:	4a0a      	ldr	r2, [pc, #40]	; (24ab4 <system_gclk_chan_enable+0x3c>)
   24a8a:	1dfb      	adds	r3, r7, #7
   24a8c:	781b      	ldrb	r3, [r3, #0]
   24a8e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   24a90:	4909      	ldr	r1, [pc, #36]	; (24ab8 <system_gclk_chan_enable+0x40>)
   24a92:	4b09      	ldr	r3, [pc, #36]	; (24ab8 <system_gclk_chan_enable+0x40>)
   24a94:	885b      	ldrh	r3, [r3, #2]
   24a96:	b29b      	uxth	r3, r3
   24a98:	2280      	movs	r2, #128	; 0x80
   24a9a:	01d2      	lsls	r2, r2, #7
   24a9c:	4313      	orrs	r3, r2
   24a9e:	b29b      	uxth	r3, r3
   24aa0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   24aa2:	4b06      	ldr	r3, [pc, #24]	; (24abc <system_gclk_chan_enable+0x44>)
   24aa4:	4798      	blx	r3
}
   24aa6:	46c0      	nop			; (mov r8, r8)
   24aa8:	46bd      	mov	sp, r7
   24aaa:	b002      	add	sp, #8
   24aac:	bd80      	pop	{r7, pc}
   24aae:	46c0      	nop			; (mov r8, r8)
   24ab0:	00024765 	.word	0x00024765
   24ab4:	40000c02 	.word	0x40000c02
   24ab8:	40000c00 	.word	0x40000c00
   24abc:	00024779 	.word	0x00024779

00024ac0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   24ac0:	b580      	push	{r7, lr}
   24ac2:	b084      	sub	sp, #16
   24ac4:	af00      	add	r7, sp, #0
   24ac6:	0002      	movs	r2, r0
   24ac8:	1dfb      	adds	r3, r7, #7
   24aca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   24acc:	4b1c      	ldr	r3, [pc, #112]	; (24b40 <system_gclk_chan_disable+0x80>)
   24ace:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24ad0:	4a1c      	ldr	r2, [pc, #112]	; (24b44 <system_gclk_chan_disable+0x84>)
   24ad2:	1dfb      	adds	r3, r7, #7
   24ad4:	781b      	ldrb	r3, [r3, #0]
   24ad6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   24ad8:	4b1b      	ldr	r3, [pc, #108]	; (24b48 <system_gclk_chan_disable+0x88>)
   24ada:	885b      	ldrh	r3, [r3, #2]
   24adc:	051b      	lsls	r3, r3, #20
   24ade:	0f1b      	lsrs	r3, r3, #28
   24ae0:	b2db      	uxtb	r3, r3
   24ae2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   24ae4:	4a18      	ldr	r2, [pc, #96]	; (24b48 <system_gclk_chan_disable+0x88>)
   24ae6:	8853      	ldrh	r3, [r2, #2]
   24ae8:	4918      	ldr	r1, [pc, #96]	; (24b4c <system_gclk_chan_disable+0x8c>)
   24aea:	400b      	ands	r3, r1
   24aec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   24aee:	4a16      	ldr	r2, [pc, #88]	; (24b48 <system_gclk_chan_disable+0x88>)
   24af0:	4b15      	ldr	r3, [pc, #84]	; (24b48 <system_gclk_chan_disable+0x88>)
   24af2:	885b      	ldrh	r3, [r3, #2]
   24af4:	b29b      	uxth	r3, r3
   24af6:	4916      	ldr	r1, [pc, #88]	; (24b50 <system_gclk_chan_disable+0x90>)
   24af8:	400b      	ands	r3, r1
   24afa:	b29b      	uxth	r3, r3
   24afc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   24afe:	46c0      	nop			; (mov r8, r8)
   24b00:	4b11      	ldr	r3, [pc, #68]	; (24b48 <system_gclk_chan_disable+0x88>)
   24b02:	885b      	ldrh	r3, [r3, #2]
   24b04:	b29b      	uxth	r3, r3
   24b06:	001a      	movs	r2, r3
   24b08:	2380      	movs	r3, #128	; 0x80
   24b0a:	01db      	lsls	r3, r3, #7
   24b0c:	4013      	ands	r3, r2
   24b0e:	d1f7      	bne.n	24b00 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   24b10:	4a0d      	ldr	r2, [pc, #52]	; (24b48 <system_gclk_chan_disable+0x88>)
   24b12:	68fb      	ldr	r3, [r7, #12]
   24b14:	b2db      	uxtb	r3, r3
   24b16:	1c19      	adds	r1, r3, #0
   24b18:	230f      	movs	r3, #15
   24b1a:	400b      	ands	r3, r1
   24b1c:	b2d9      	uxtb	r1, r3
   24b1e:	8853      	ldrh	r3, [r2, #2]
   24b20:	1c08      	adds	r0, r1, #0
   24b22:	210f      	movs	r1, #15
   24b24:	4001      	ands	r1, r0
   24b26:	0208      	lsls	r0, r1, #8
   24b28:	4908      	ldr	r1, [pc, #32]	; (24b4c <system_gclk_chan_disable+0x8c>)
   24b2a:	400b      	ands	r3, r1
   24b2c:	1c19      	adds	r1, r3, #0
   24b2e:	1c03      	adds	r3, r0, #0
   24b30:	430b      	orrs	r3, r1
   24b32:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   24b34:	4b07      	ldr	r3, [pc, #28]	; (24b54 <system_gclk_chan_disable+0x94>)
   24b36:	4798      	blx	r3
}
   24b38:	46c0      	nop			; (mov r8, r8)
   24b3a:	46bd      	mov	sp, r7
   24b3c:	b004      	add	sp, #16
   24b3e:	bd80      	pop	{r7, pc}
   24b40:	00024765 	.word	0x00024765
   24b44:	40000c02 	.word	0x40000c02
   24b48:	40000c00 	.word	0x40000c00
   24b4c:	fffff0ff 	.word	0xfffff0ff
   24b50:	ffffbfff 	.word	0xffffbfff
   24b54:	00024779 	.word	0x00024779

00024b58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   24b58:	b580      	push	{r7, lr}
   24b5a:	b084      	sub	sp, #16
   24b5c:	af00      	add	r7, sp, #0
   24b5e:	0002      	movs	r2, r0
   24b60:	1dfb      	adds	r3, r7, #7
   24b62:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   24b64:	4b0d      	ldr	r3, [pc, #52]	; (24b9c <system_gclk_chan_get_hz+0x44>)
   24b66:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   24b68:	4a0d      	ldr	r2, [pc, #52]	; (24ba0 <system_gclk_chan_get_hz+0x48>)
   24b6a:	1dfb      	adds	r3, r7, #7
   24b6c:	781b      	ldrb	r3, [r3, #0]
   24b6e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   24b70:	4b0c      	ldr	r3, [pc, #48]	; (24ba4 <system_gclk_chan_get_hz+0x4c>)
   24b72:	885b      	ldrh	r3, [r3, #2]
   24b74:	051b      	lsls	r3, r3, #20
   24b76:	0f1b      	lsrs	r3, r3, #28
   24b78:	b2da      	uxtb	r2, r3
   24b7a:	230f      	movs	r3, #15
   24b7c:	18fb      	adds	r3, r7, r3
   24b7e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   24b80:	4b09      	ldr	r3, [pc, #36]	; (24ba8 <system_gclk_chan_get_hz+0x50>)
   24b82:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   24b84:	230f      	movs	r3, #15
   24b86:	18fb      	adds	r3, r7, r3
   24b88:	781b      	ldrb	r3, [r3, #0]
   24b8a:	0018      	movs	r0, r3
   24b8c:	4b07      	ldr	r3, [pc, #28]	; (24bac <system_gclk_chan_get_hz+0x54>)
   24b8e:	4798      	blx	r3
   24b90:	0003      	movs	r3, r0
}
   24b92:	0018      	movs	r0, r3
   24b94:	46bd      	mov	sp, r7
   24b96:	b004      	add	sp, #16
   24b98:	bd80      	pop	{r7, pc}
   24b9a:	46c0      	nop			; (mov r8, r8)
   24b9c:	00024765 	.word	0x00024765
   24ba0:	40000c02 	.word	0x40000c02
   24ba4:	40000c00 	.word	0x40000c00
   24ba8:	00024779 	.word	0x00024779
   24bac:	0002495d 	.word	0x0002495d

00024bb0 <system_pinmux_get_group_from_gpio_pin>:
{
   24bb0:	b580      	push	{r7, lr}
   24bb2:	b084      	sub	sp, #16
   24bb4:	af00      	add	r7, sp, #0
   24bb6:	0002      	movs	r2, r0
   24bb8:	1dfb      	adds	r3, r7, #7
   24bba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24bbc:	230f      	movs	r3, #15
   24bbe:	18fb      	adds	r3, r7, r3
   24bc0:	1dfa      	adds	r2, r7, #7
   24bc2:	7812      	ldrb	r2, [r2, #0]
   24bc4:	09d2      	lsrs	r2, r2, #7
   24bc6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24bc8:	230e      	movs	r3, #14
   24bca:	18fb      	adds	r3, r7, r3
   24bcc:	1dfa      	adds	r2, r7, #7
   24bce:	7812      	ldrb	r2, [r2, #0]
   24bd0:	0952      	lsrs	r2, r2, #5
   24bd2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24bd4:	4b0d      	ldr	r3, [pc, #52]	; (24c0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24bd6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24bd8:	230f      	movs	r3, #15
   24bda:	18fb      	adds	r3, r7, r3
   24bdc:	781b      	ldrb	r3, [r3, #0]
   24bde:	2b00      	cmp	r3, #0
   24be0:	d10f      	bne.n	24c02 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24be2:	230f      	movs	r3, #15
   24be4:	18fb      	adds	r3, r7, r3
   24be6:	781b      	ldrb	r3, [r3, #0]
   24be8:	009b      	lsls	r3, r3, #2
   24bea:	2210      	movs	r2, #16
   24bec:	4694      	mov	ip, r2
   24bee:	44bc      	add	ip, r7
   24bf0:	4463      	add	r3, ip
   24bf2:	3b08      	subs	r3, #8
   24bf4:	681a      	ldr	r2, [r3, #0]
   24bf6:	230e      	movs	r3, #14
   24bf8:	18fb      	adds	r3, r7, r3
   24bfa:	781b      	ldrb	r3, [r3, #0]
   24bfc:	01db      	lsls	r3, r3, #7
   24bfe:	18d3      	adds	r3, r2, r3
   24c00:	e000      	b.n	24c04 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24c02:	2300      	movs	r3, #0
}
   24c04:	0018      	movs	r0, r3
   24c06:	46bd      	mov	sp, r7
   24c08:	b004      	add	sp, #16
   24c0a:	bd80      	pop	{r7, pc}
   24c0c:	41004400 	.word	0x41004400

00024c10 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   24c10:	b580      	push	{r7, lr}
   24c12:	b088      	sub	sp, #32
   24c14:	af00      	add	r7, sp, #0
   24c16:	60f8      	str	r0, [r7, #12]
   24c18:	60b9      	str	r1, [r7, #8]
   24c1a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   24c1c:	2300      	movs	r3, #0
   24c1e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   24c20:	687b      	ldr	r3, [r7, #4]
   24c22:	78db      	ldrb	r3, [r3, #3]
   24c24:	2201      	movs	r2, #1
   24c26:	4053      	eors	r3, r2
   24c28:	b2db      	uxtb	r3, r3
   24c2a:	2b00      	cmp	r3, #0
   24c2c:	d035      	beq.n	24c9a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   24c2e:	687b      	ldr	r3, [r7, #4]
   24c30:	781b      	ldrb	r3, [r3, #0]
   24c32:	2b80      	cmp	r3, #128	; 0x80
   24c34:	d00b      	beq.n	24c4e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   24c36:	69fb      	ldr	r3, [r7, #28]
   24c38:	2280      	movs	r2, #128	; 0x80
   24c3a:	0252      	lsls	r2, r2, #9
   24c3c:	4313      	orrs	r3, r2
   24c3e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   24c40:	687b      	ldr	r3, [r7, #4]
   24c42:	781b      	ldrb	r3, [r3, #0]
   24c44:	061b      	lsls	r3, r3, #24
   24c46:	001a      	movs	r2, r3
   24c48:	69fb      	ldr	r3, [r7, #28]
   24c4a:	4313      	orrs	r3, r2
   24c4c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   24c4e:	687b      	ldr	r3, [r7, #4]
   24c50:	785b      	ldrb	r3, [r3, #1]
   24c52:	2b00      	cmp	r3, #0
   24c54:	d003      	beq.n	24c5e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24c56:	687b      	ldr	r3, [r7, #4]
   24c58:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   24c5a:	2b02      	cmp	r3, #2
   24c5c:	d110      	bne.n	24c80 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   24c5e:	69fb      	ldr	r3, [r7, #28]
   24c60:	2280      	movs	r2, #128	; 0x80
   24c62:	0292      	lsls	r2, r2, #10
   24c64:	4313      	orrs	r3, r2
   24c66:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   24c68:	687b      	ldr	r3, [r7, #4]
   24c6a:	789b      	ldrb	r3, [r3, #2]
   24c6c:	2b00      	cmp	r3, #0
   24c6e:	d004      	beq.n	24c7a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   24c70:	69fb      	ldr	r3, [r7, #28]
   24c72:	2280      	movs	r2, #128	; 0x80
   24c74:	02d2      	lsls	r2, r2, #11
   24c76:	4313      	orrs	r3, r2
   24c78:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   24c7a:	68fb      	ldr	r3, [r7, #12]
   24c7c:	68ba      	ldr	r2, [r7, #8]
   24c7e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24c80:	687b      	ldr	r3, [r7, #4]
   24c82:	785b      	ldrb	r3, [r3, #1]
   24c84:	2b01      	cmp	r3, #1
   24c86:	d003      	beq.n	24c90 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24c88:	687b      	ldr	r3, [r7, #4]
   24c8a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24c8c:	2b02      	cmp	r3, #2
   24c8e:	d107      	bne.n	24ca0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   24c90:	69fb      	ldr	r3, [r7, #28]
   24c92:	4a22      	ldr	r2, [pc, #136]	; (24d1c <_system_pinmux_config+0x10c>)
   24c94:	4013      	ands	r3, r2
   24c96:	61fb      	str	r3, [r7, #28]
   24c98:	e002      	b.n	24ca0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   24c9a:	68fb      	ldr	r3, [r7, #12]
   24c9c:	68ba      	ldr	r2, [r7, #8]
   24c9e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   24ca0:	68bb      	ldr	r3, [r7, #8]
   24ca2:	041b      	lsls	r3, r3, #16
   24ca4:	0c1b      	lsrs	r3, r3, #16
   24ca6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   24ca8:	68bb      	ldr	r3, [r7, #8]
   24caa:	0c1b      	lsrs	r3, r3, #16
   24cac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24cae:	69ba      	ldr	r2, [r7, #24]
   24cb0:	69fb      	ldr	r3, [r7, #28]
   24cb2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   24cb4:	22a0      	movs	r2, #160	; 0xa0
   24cb6:	05d2      	lsls	r2, r2, #23
   24cb8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24cba:	68fb      	ldr	r3, [r7, #12]
   24cbc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24cbe:	697a      	ldr	r2, [r7, #20]
   24cc0:	69fb      	ldr	r3, [r7, #28]
   24cc2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   24cc4:	22d0      	movs	r2, #208	; 0xd0
   24cc6:	0612      	lsls	r2, r2, #24
   24cc8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   24cca:	68fb      	ldr	r3, [r7, #12]
   24ccc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   24cce:	687b      	ldr	r3, [r7, #4]
   24cd0:	78db      	ldrb	r3, [r3, #3]
   24cd2:	2201      	movs	r2, #1
   24cd4:	4053      	eors	r3, r2
   24cd6:	b2db      	uxtb	r3, r3
   24cd8:	2b00      	cmp	r3, #0
   24cda:	d01a      	beq.n	24d12 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   24cdc:	69fa      	ldr	r2, [r7, #28]
   24cde:	2380      	movs	r3, #128	; 0x80
   24ce0:	02db      	lsls	r3, r3, #11
   24ce2:	4013      	ands	r3, r2
   24ce4:	d00a      	beq.n	24cfc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   24ce6:	687b      	ldr	r3, [r7, #4]
   24ce8:	789b      	ldrb	r3, [r3, #2]
   24cea:	2b01      	cmp	r3, #1
   24cec:	d103      	bne.n	24cf6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   24cee:	68fb      	ldr	r3, [r7, #12]
   24cf0:	68ba      	ldr	r2, [r7, #8]
   24cf2:	619a      	str	r2, [r3, #24]
   24cf4:	e002      	b.n	24cfc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   24cf6:	68fb      	ldr	r3, [r7, #12]
   24cf8:	68ba      	ldr	r2, [r7, #8]
   24cfa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24cfc:	687b      	ldr	r3, [r7, #4]
   24cfe:	785b      	ldrb	r3, [r3, #1]
   24d00:	2b01      	cmp	r3, #1
   24d02:	d003      	beq.n	24d0c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   24d04:	687b      	ldr	r3, [r7, #4]
   24d06:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   24d08:	2b02      	cmp	r3, #2
   24d0a:	d102      	bne.n	24d12 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   24d0c:	68fb      	ldr	r3, [r7, #12]
   24d0e:	68ba      	ldr	r2, [r7, #8]
   24d10:	609a      	str	r2, [r3, #8]
		}
	}
}
   24d12:	46c0      	nop			; (mov r8, r8)
   24d14:	46bd      	mov	sp, r7
   24d16:	b008      	add	sp, #32
   24d18:	bd80      	pop	{r7, pc}
   24d1a:	46c0      	nop			; (mov r8, r8)
   24d1c:	fffbffff 	.word	0xfffbffff

00024d20 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   24d20:	b580      	push	{r7, lr}
   24d22:	b084      	sub	sp, #16
   24d24:	af00      	add	r7, sp, #0
   24d26:	0002      	movs	r2, r0
   24d28:	6039      	str	r1, [r7, #0]
   24d2a:	1dfb      	adds	r3, r7, #7
   24d2c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24d2e:	1dfb      	adds	r3, r7, #7
   24d30:	781b      	ldrb	r3, [r3, #0]
   24d32:	0018      	movs	r0, r3
   24d34:	4b0a      	ldr	r3, [pc, #40]	; (24d60 <system_pinmux_pin_set_config+0x40>)
   24d36:	4798      	blx	r3
   24d38:	0003      	movs	r3, r0
   24d3a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   24d3c:	1dfb      	adds	r3, r7, #7
   24d3e:	781b      	ldrb	r3, [r3, #0]
   24d40:	221f      	movs	r2, #31
   24d42:	4013      	ands	r3, r2
   24d44:	2201      	movs	r2, #1
   24d46:	409a      	lsls	r2, r3
   24d48:	0013      	movs	r3, r2
   24d4a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   24d4c:	683a      	ldr	r2, [r7, #0]
   24d4e:	68b9      	ldr	r1, [r7, #8]
   24d50:	68fb      	ldr	r3, [r7, #12]
   24d52:	0018      	movs	r0, r3
   24d54:	4b03      	ldr	r3, [pc, #12]	; (24d64 <system_pinmux_pin_set_config+0x44>)
   24d56:	4798      	blx	r3
}
   24d58:	46c0      	nop			; (mov r8, r8)
   24d5a:	46bd      	mov	sp, r7
   24d5c:	b004      	add	sp, #16
   24d5e:	bd80      	pop	{r7, pc}
   24d60:	00024bb1 	.word	0x00024bb1
   24d64:	00024c11 	.word	0x00024c11

00024d68 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   24d68:	b580      	push	{r7, lr}
   24d6a:	af00      	add	r7, sp, #0
	return;
   24d6c:	46c0      	nop			; (mov r8, r8)
}
   24d6e:	46bd      	mov	sp, r7
   24d70:	bd80      	pop	{r7, pc}
	...

00024d74 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   24d74:	b580      	push	{r7, lr}
   24d76:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   24d78:	4b06      	ldr	r3, [pc, #24]	; (24d94 <system_init+0x20>)
   24d7a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   24d7c:	4b06      	ldr	r3, [pc, #24]	; (24d98 <system_init+0x24>)
   24d7e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   24d80:	4b06      	ldr	r3, [pc, #24]	; (24d9c <system_init+0x28>)
   24d82:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   24d84:	4b06      	ldr	r3, [pc, #24]	; (24da0 <system_init+0x2c>)
   24d86:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   24d88:	4b06      	ldr	r3, [pc, #24]	; (24da4 <system_init+0x30>)
   24d8a:	4798      	blx	r3
}
   24d8c:	46c0      	nop			; (mov r8, r8)
   24d8e:	46bd      	mov	sp, r7
   24d90:	bd80      	pop	{r7, pc}
   24d92:	46c0      	nop			; (mov r8, r8)
   24d94:	000243a9 	.word	0x000243a9
   24d98:	00023c71 	.word	0x00023c71
   24d9c:	00022739 	.word	0x00022739
   24da0:	0001de49 	.word	0x0001de49
   24da4:	00024d69 	.word	0x00024d69

00024da8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   24da8:	b580      	push	{r7, lr}
   24daa:	b082      	sub	sp, #8
   24dac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   24dae:	4b2f      	ldr	r3, [pc, #188]	; (24e6c <Reset_Handler+0xc4>)
   24db0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   24db2:	4b2f      	ldr	r3, [pc, #188]	; (24e70 <Reset_Handler+0xc8>)
   24db4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   24db6:	687a      	ldr	r2, [r7, #4]
   24db8:	683b      	ldr	r3, [r7, #0]
   24dba:	429a      	cmp	r2, r3
   24dbc:	d00c      	beq.n	24dd8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   24dbe:	e007      	b.n	24dd0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   24dc0:	683b      	ldr	r3, [r7, #0]
   24dc2:	1d1a      	adds	r2, r3, #4
   24dc4:	603a      	str	r2, [r7, #0]
   24dc6:	687a      	ldr	r2, [r7, #4]
   24dc8:	1d11      	adds	r1, r2, #4
   24dca:	6079      	str	r1, [r7, #4]
   24dcc:	6812      	ldr	r2, [r2, #0]
   24dce:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   24dd0:	683a      	ldr	r2, [r7, #0]
   24dd2:	4b28      	ldr	r3, [pc, #160]	; (24e74 <Reset_Handler+0xcc>)
   24dd4:	429a      	cmp	r2, r3
   24dd6:	d3f3      	bcc.n	24dc0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   24dd8:	4b27      	ldr	r3, [pc, #156]	; (24e78 <Reset_Handler+0xd0>)
   24dda:	603b      	str	r3, [r7, #0]
   24ddc:	e004      	b.n	24de8 <Reset_Handler+0x40>
                *pDest++ = 0;
   24dde:	683b      	ldr	r3, [r7, #0]
   24de0:	1d1a      	adds	r2, r3, #4
   24de2:	603a      	str	r2, [r7, #0]
   24de4:	2200      	movs	r2, #0
   24de6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   24de8:	683a      	ldr	r2, [r7, #0]
   24dea:	4b24      	ldr	r3, [pc, #144]	; (24e7c <Reset_Handler+0xd4>)
   24dec:	429a      	cmp	r2, r3
   24dee:	d3f6      	bcc.n	24dde <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   24df0:	4b23      	ldr	r3, [pc, #140]	; (24e80 <Reset_Handler+0xd8>)
   24df2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   24df4:	4b23      	ldr	r3, [pc, #140]	; (24e84 <Reset_Handler+0xdc>)
   24df6:	687a      	ldr	r2, [r7, #4]
   24df8:	21ff      	movs	r1, #255	; 0xff
   24dfa:	438a      	bics	r2, r1
   24dfc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   24dfe:	4a22      	ldr	r2, [pc, #136]	; (24e88 <Reset_Handler+0xe0>)
   24e00:	2390      	movs	r3, #144	; 0x90
   24e02:	005b      	lsls	r3, r3, #1
   24e04:	2102      	movs	r1, #2
   24e06:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   24e08:	4a20      	ldr	r2, [pc, #128]	; (24e8c <Reset_Handler+0xe4>)
   24e0a:	78d3      	ldrb	r3, [r2, #3]
   24e0c:	2103      	movs	r1, #3
   24e0e:	438b      	bics	r3, r1
   24e10:	1c19      	adds	r1, r3, #0
   24e12:	2302      	movs	r3, #2
   24e14:	430b      	orrs	r3, r1
   24e16:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   24e18:	4a1c      	ldr	r2, [pc, #112]	; (24e8c <Reset_Handler+0xe4>)
   24e1a:	78d3      	ldrb	r3, [r2, #3]
   24e1c:	210c      	movs	r1, #12
   24e1e:	438b      	bics	r3, r1
   24e20:	1c19      	adds	r1, r3, #0
   24e22:	2308      	movs	r3, #8
   24e24:	430b      	orrs	r3, r1
   24e26:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   24e28:	4a19      	ldr	r2, [pc, #100]	; (24e90 <Reset_Handler+0xe8>)
   24e2a:	7b93      	ldrb	r3, [r2, #14]
   24e2c:	2130      	movs	r1, #48	; 0x30
   24e2e:	438b      	bics	r3, r1
   24e30:	1c19      	adds	r1, r3, #0
   24e32:	2320      	movs	r3, #32
   24e34:	430b      	orrs	r3, r1
   24e36:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   24e38:	4a15      	ldr	r2, [pc, #84]	; (24e90 <Reset_Handler+0xe8>)
   24e3a:	7b93      	ldrb	r3, [r2, #14]
   24e3c:	210c      	movs	r1, #12
   24e3e:	438b      	bics	r3, r1
   24e40:	1c19      	adds	r1, r3, #0
   24e42:	2308      	movs	r3, #8
   24e44:	430b      	orrs	r3, r1
   24e46:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   24e48:	4a11      	ldr	r2, [pc, #68]	; (24e90 <Reset_Handler+0xe8>)
   24e4a:	7b93      	ldrb	r3, [r2, #14]
   24e4c:	2103      	movs	r1, #3
   24e4e:	438b      	bics	r3, r1
   24e50:	1c19      	adds	r1, r3, #0
   24e52:	2302      	movs	r3, #2
   24e54:	430b      	orrs	r3, r1
   24e56:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   24e58:	4a0e      	ldr	r2, [pc, #56]	; (24e94 <Reset_Handler+0xec>)
   24e5a:	6853      	ldr	r3, [r2, #4]
   24e5c:	2180      	movs	r1, #128	; 0x80
   24e5e:	430b      	orrs	r3, r1
   24e60:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   24e62:	4b0d      	ldr	r3, [pc, #52]	; (24e98 <Reset_Handler+0xf0>)
   24e64:	4798      	blx	r3

        /* Branch to main function */
        main();
   24e66:	4b0d      	ldr	r3, [pc, #52]	; (24e9c <Reset_Handler+0xf4>)
   24e68:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   24e6a:	e7fe      	b.n	24e6a <Reset_Handler+0xc2>
   24e6c:	0002b034 	.word	0x0002b034
   24e70:	20000000 	.word	0x20000000
   24e74:	200001fc 	.word	0x200001fc
   24e78:	20000200 	.word	0x20000200
   24e7c:	2000098c 	.word	0x2000098c
   24e80:	00010000 	.word	0x00010000
   24e84:	e000ed00 	.word	0xe000ed00
   24e88:	41007000 	.word	0x41007000
   24e8c:	41005000 	.word	0x41005000
   24e90:	41004800 	.word	0x41004800
   24e94:	41004000 	.word	0x41004000
   24e98:	00028da5 	.word	0x00028da5
   24e9c:	000250d1 	.word	0x000250d1

00024ea0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   24ea0:	b580      	push	{r7, lr}
   24ea2:	af00      	add	r7, sp, #0
        while (1) {
   24ea4:	e7fe      	b.n	24ea4 <Dummy_Handler+0x4>
	...

00024ea8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   24ea8:	b580      	push	{r7, lr}
   24eaa:	b084      	sub	sp, #16
   24eac:	af00      	add	r7, sp, #0
   24eae:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   24eb0:	4b0a      	ldr	r3, [pc, #40]	; (24edc <_sbrk+0x34>)
   24eb2:	681b      	ldr	r3, [r3, #0]
   24eb4:	2b00      	cmp	r3, #0
   24eb6:	d102      	bne.n	24ebe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   24eb8:	4b08      	ldr	r3, [pc, #32]	; (24edc <_sbrk+0x34>)
   24eba:	4a09      	ldr	r2, [pc, #36]	; (24ee0 <_sbrk+0x38>)
   24ebc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   24ebe:	4b07      	ldr	r3, [pc, #28]	; (24edc <_sbrk+0x34>)
   24ec0:	681b      	ldr	r3, [r3, #0]
   24ec2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   24ec4:	4b05      	ldr	r3, [pc, #20]	; (24edc <_sbrk+0x34>)
   24ec6:	681a      	ldr	r2, [r3, #0]
   24ec8:	687b      	ldr	r3, [r7, #4]
   24eca:	18d2      	adds	r2, r2, r3
   24ecc:	4b03      	ldr	r3, [pc, #12]	; (24edc <_sbrk+0x34>)
   24ece:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   24ed0:	68fb      	ldr	r3, [r7, #12]
}
   24ed2:	0018      	movs	r0, r3
   24ed4:	46bd      	mov	sp, r7
   24ed6:	b004      	add	sp, #16
   24ed8:	bd80      	pop	{r7, pc}
   24eda:	46c0      	nop			; (mov r8, r8)
   24edc:	20000508 	.word	0x20000508
   24ee0:	20002990 	.word	0x20002990

00024ee4 <system_apb_clock_clear_mask>:
{
   24ee4:	b580      	push	{r7, lr}
   24ee6:	b082      	sub	sp, #8
   24ee8:	af00      	add	r7, sp, #0
   24eea:	0002      	movs	r2, r0
   24eec:	6039      	str	r1, [r7, #0]
   24eee:	1dfb      	adds	r3, r7, #7
   24ef0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24ef2:	1dfb      	adds	r3, r7, #7
   24ef4:	781b      	ldrb	r3, [r3, #0]
   24ef6:	2b01      	cmp	r3, #1
   24ef8:	d00b      	beq.n	24f12 <system_apb_clock_clear_mask+0x2e>
   24efa:	2b02      	cmp	r3, #2
   24efc:	d011      	beq.n	24f22 <system_apb_clock_clear_mask+0x3e>
   24efe:	2b00      	cmp	r3, #0
   24f00:	d117      	bne.n	24f32 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   24f02:	4b0f      	ldr	r3, [pc, #60]	; (24f40 <system_apb_clock_clear_mask+0x5c>)
   24f04:	4a0e      	ldr	r2, [pc, #56]	; (24f40 <system_apb_clock_clear_mask+0x5c>)
   24f06:	6992      	ldr	r2, [r2, #24]
   24f08:	6839      	ldr	r1, [r7, #0]
   24f0a:	43c9      	mvns	r1, r1
   24f0c:	400a      	ands	r2, r1
   24f0e:	619a      	str	r2, [r3, #24]
			break;
   24f10:	e011      	b.n	24f36 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   24f12:	4b0b      	ldr	r3, [pc, #44]	; (24f40 <system_apb_clock_clear_mask+0x5c>)
   24f14:	4a0a      	ldr	r2, [pc, #40]	; (24f40 <system_apb_clock_clear_mask+0x5c>)
   24f16:	69d2      	ldr	r2, [r2, #28]
   24f18:	6839      	ldr	r1, [r7, #0]
   24f1a:	43c9      	mvns	r1, r1
   24f1c:	400a      	ands	r2, r1
   24f1e:	61da      	str	r2, [r3, #28]
			break;
   24f20:	e009      	b.n	24f36 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   24f22:	4b07      	ldr	r3, [pc, #28]	; (24f40 <system_apb_clock_clear_mask+0x5c>)
   24f24:	4a06      	ldr	r2, [pc, #24]	; (24f40 <system_apb_clock_clear_mask+0x5c>)
   24f26:	6a12      	ldr	r2, [r2, #32]
   24f28:	6839      	ldr	r1, [r7, #0]
   24f2a:	43c9      	mvns	r1, r1
   24f2c:	400a      	ands	r2, r1
   24f2e:	621a      	str	r2, [r3, #32]
			break;
   24f30:	e001      	b.n	24f36 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   24f32:	2317      	movs	r3, #23
   24f34:	e000      	b.n	24f38 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   24f36:	2300      	movs	r3, #0
}
   24f38:	0018      	movs	r0, r3
   24f3a:	46bd      	mov	sp, r7
   24f3c:	b002      	add	sp, #8
   24f3e:	bd80      	pop	{r7, pc}
   24f40:	40000400 	.word	0x40000400

00024f44 <system_interrupt_enable_global>:
{
   24f44:	b580      	push	{r7, lr}
   24f46:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   24f48:	4b04      	ldr	r3, [pc, #16]	; (24f5c <system_interrupt_enable_global+0x18>)
   24f4a:	2201      	movs	r2, #1
   24f4c:	701a      	strb	r2, [r3, #0]
   24f4e:	f3bf 8f5f 	dmb	sy
   24f52:	b662      	cpsie	i
}
   24f54:	46c0      	nop			; (mov r8, r8)
   24f56:	46bd      	mov	sp, r7
   24f58:	bd80      	pop	{r7, pc}
   24f5a:	46c0      	nop			; (mov r8, r8)
   24f5c:	20000028 	.word	0x20000028

00024f60 <system_pinmux_get_group_from_gpio_pin>:
{
   24f60:	b580      	push	{r7, lr}
   24f62:	b084      	sub	sp, #16
   24f64:	af00      	add	r7, sp, #0
   24f66:	0002      	movs	r2, r0
   24f68:	1dfb      	adds	r3, r7, #7
   24f6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24f6c:	230f      	movs	r3, #15
   24f6e:	18fb      	adds	r3, r7, r3
   24f70:	1dfa      	adds	r2, r7, #7
   24f72:	7812      	ldrb	r2, [r2, #0]
   24f74:	09d2      	lsrs	r2, r2, #7
   24f76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24f78:	230e      	movs	r3, #14
   24f7a:	18fb      	adds	r3, r7, r3
   24f7c:	1dfa      	adds	r2, r7, #7
   24f7e:	7812      	ldrb	r2, [r2, #0]
   24f80:	0952      	lsrs	r2, r2, #5
   24f82:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24f84:	4b0d      	ldr	r3, [pc, #52]	; (24fbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24f86:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24f88:	230f      	movs	r3, #15
   24f8a:	18fb      	adds	r3, r7, r3
   24f8c:	781b      	ldrb	r3, [r3, #0]
   24f8e:	2b00      	cmp	r3, #0
   24f90:	d10f      	bne.n	24fb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24f92:	230f      	movs	r3, #15
   24f94:	18fb      	adds	r3, r7, r3
   24f96:	781b      	ldrb	r3, [r3, #0]
   24f98:	009b      	lsls	r3, r3, #2
   24f9a:	2210      	movs	r2, #16
   24f9c:	4694      	mov	ip, r2
   24f9e:	44bc      	add	ip, r7
   24fa0:	4463      	add	r3, ip
   24fa2:	3b08      	subs	r3, #8
   24fa4:	681a      	ldr	r2, [r3, #0]
   24fa6:	230e      	movs	r3, #14
   24fa8:	18fb      	adds	r3, r7, r3
   24faa:	781b      	ldrb	r3, [r3, #0]
   24fac:	01db      	lsls	r3, r3, #7
   24fae:	18d3      	adds	r3, r2, r3
   24fb0:	e000      	b.n	24fb4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24fb2:	2300      	movs	r3, #0
}
   24fb4:	0018      	movs	r0, r3
   24fb6:	46bd      	mov	sp, r7
   24fb8:	b004      	add	sp, #16
   24fba:	bd80      	pop	{r7, pc}
   24fbc:	41004400 	.word	0x41004400

00024fc0 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   24fc0:	b580      	push	{r7, lr}
   24fc2:	b084      	sub	sp, #16
   24fc4:	af00      	add	r7, sp, #0
   24fc6:	0002      	movs	r2, r0
   24fc8:	1dfb      	adds	r3, r7, #7
   24fca:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   24fcc:	4b1a      	ldr	r3, [pc, #104]	; (25038 <system_set_sleepmode+0x78>)
   24fce:	699b      	ldr	r3, [r3, #24]
   24fd0:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   24fd2:	68fa      	ldr	r2, [r7, #12]
   24fd4:	23f0      	movs	r3, #240	; 0xf0
   24fd6:	011b      	lsls	r3, r3, #4
   24fd8:	4013      	ands	r3, r2
   24fda:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   24fdc:	68fb      	ldr	r3, [r7, #12]
   24fde:	0a1b      	lsrs	r3, r3, #8
   24fe0:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   24fe2:	68fb      	ldr	r3, [r7, #12]
   24fe4:	2b02      	cmp	r3, #2
   24fe6:	d805      	bhi.n	24ff4 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   24fe8:	4a14      	ldr	r2, [pc, #80]	; (2503c <system_set_sleepmode+0x7c>)
   24fea:	6853      	ldr	r3, [r2, #4]
   24fec:	21c0      	movs	r1, #192	; 0xc0
   24fee:	0089      	lsls	r1, r1, #2
   24ff0:	430b      	orrs	r3, r1
   24ff2:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   24ff4:	1dfb      	adds	r3, r7, #7
   24ff6:	781b      	ldrb	r3, [r3, #0]
   24ff8:	2b00      	cmp	r3, #0
   24ffa:	db16      	blt.n	2502a <system_set_sleepmode+0x6a>
   24ffc:	2b02      	cmp	r3, #2
   24ffe:	dd02      	ble.n	25006 <system_set_sleepmode+0x46>
   25000:	2b03      	cmp	r3, #3
   25002:	d00b      	beq.n	2501c <system_set_sleepmode+0x5c>
   25004:	e011      	b.n	2502a <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   25006:	4b0e      	ldr	r3, [pc, #56]	; (25040 <system_set_sleepmode+0x80>)
   25008:	4a0d      	ldr	r2, [pc, #52]	; (25040 <system_set_sleepmode+0x80>)
   2500a:	6912      	ldr	r2, [r2, #16]
   2500c:	2104      	movs	r1, #4
   2500e:	438a      	bics	r2, r1
   25010:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   25012:	4a0c      	ldr	r2, [pc, #48]	; (25044 <system_set_sleepmode+0x84>)
   25014:	1dfb      	adds	r3, r7, #7
   25016:	781b      	ldrb	r3, [r3, #0]
   25018:	7053      	strb	r3, [r2, #1]
			break;
   2501a:	e008      	b.n	2502e <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   2501c:	4b08      	ldr	r3, [pc, #32]	; (25040 <system_set_sleepmode+0x80>)
   2501e:	4a08      	ldr	r2, [pc, #32]	; (25040 <system_set_sleepmode+0x80>)
   25020:	6912      	ldr	r2, [r2, #16]
   25022:	2104      	movs	r1, #4
   25024:	430a      	orrs	r2, r1
   25026:	611a      	str	r2, [r3, #16]
			break;
   25028:	e001      	b.n	2502e <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   2502a:	2317      	movs	r3, #23
   2502c:	e000      	b.n	25030 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   2502e:	2300      	movs	r3, #0
}
   25030:	0018      	movs	r0, r3
   25032:	46bd      	mov	sp, r7
   25034:	b004      	add	sp, #16
   25036:	bd80      	pop	{r7, pc}
   25038:	41002000 	.word	0x41002000
   2503c:	41004000 	.word	0x41004000
   25040:	e000ed00 	.word	0xe000ed00
   25044:	40000400 	.word	0x40000400

00025048 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   25048:	b580      	push	{r7, lr}
   2504a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   2504c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   25050:	bf30      	wfi
	__DSB();
	__WFI();
}
   25052:	46c0      	nop			; (mov r8, r8)
   25054:	46bd      	mov	sp, r7
   25056:	bd80      	pop	{r7, pc}

00025058 <port_get_group_from_gpio_pin>:
{
   25058:	b580      	push	{r7, lr}
   2505a:	b082      	sub	sp, #8
   2505c:	af00      	add	r7, sp, #0
   2505e:	0002      	movs	r2, r0
   25060:	1dfb      	adds	r3, r7, #7
   25062:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25064:	1dfb      	adds	r3, r7, #7
   25066:	781b      	ldrb	r3, [r3, #0]
   25068:	0018      	movs	r0, r3
   2506a:	4b03      	ldr	r3, [pc, #12]	; (25078 <port_get_group_from_gpio_pin+0x20>)
   2506c:	4798      	blx	r3
   2506e:	0003      	movs	r3, r0
}
   25070:	0018      	movs	r0, r3
   25072:	46bd      	mov	sp, r7
   25074:	b002      	add	sp, #8
   25076:	bd80      	pop	{r7, pc}
   25078:	00024f61 	.word	0x00024f61

0002507c <port_pin_set_output_level>:
{
   2507c:	b580      	push	{r7, lr}
   2507e:	b084      	sub	sp, #16
   25080:	af00      	add	r7, sp, #0
   25082:	0002      	movs	r2, r0
   25084:	1dfb      	adds	r3, r7, #7
   25086:	701a      	strb	r2, [r3, #0]
   25088:	1dbb      	adds	r3, r7, #6
   2508a:	1c0a      	adds	r2, r1, #0
   2508c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2508e:	1dfb      	adds	r3, r7, #7
   25090:	781b      	ldrb	r3, [r3, #0]
   25092:	0018      	movs	r0, r3
   25094:	4b0d      	ldr	r3, [pc, #52]	; (250cc <port_pin_set_output_level+0x50>)
   25096:	4798      	blx	r3
   25098:	0003      	movs	r3, r0
   2509a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2509c:	1dfb      	adds	r3, r7, #7
   2509e:	781b      	ldrb	r3, [r3, #0]
   250a0:	221f      	movs	r2, #31
   250a2:	4013      	ands	r3, r2
   250a4:	2201      	movs	r2, #1
   250a6:	409a      	lsls	r2, r3
   250a8:	0013      	movs	r3, r2
   250aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   250ac:	1dbb      	adds	r3, r7, #6
   250ae:	781b      	ldrb	r3, [r3, #0]
   250b0:	2b00      	cmp	r3, #0
   250b2:	d003      	beq.n	250bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   250b4:	68fb      	ldr	r3, [r7, #12]
   250b6:	68ba      	ldr	r2, [r7, #8]
   250b8:	619a      	str	r2, [r3, #24]
}
   250ba:	e002      	b.n	250c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   250bc:	68fb      	ldr	r3, [r7, #12]
   250be:	68ba      	ldr	r2, [r7, #8]
   250c0:	615a      	str	r2, [r3, #20]
}
   250c2:	46c0      	nop			; (mov r8, r8)
   250c4:	46bd      	mov	sp, r7
   250c6:	b004      	add	sp, #16
   250c8:	bd80      	pop	{r7, pc}
   250ca:	46c0      	nop			; (mov r8, r8)
   250cc:	00025059 	.word	0x00025059

000250d0 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   250d0:	b590      	push	{r4, r7, lr}
   250d2:	b083      	sub	sp, #12
   250d4:	af02      	add	r7, sp, #8
	system_init();
   250d6:	4b18      	ldr	r3, [pc, #96]	; (25138 <main+0x68>)
   250d8:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   250da:	2111      	movs	r1, #17
   250dc:	2000      	movs	r0, #0
   250de:	4b17      	ldr	r3, [pc, #92]	; (2513c <main+0x6c>)
   250e0:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   250e2:	2103      	movs	r1, #3
   250e4:	2001      	movs	r0, #1
   250e6:	4b15      	ldr	r3, [pc, #84]	; (2513c <main+0x6c>)
   250e8:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   250ea:	4b15      	ldr	r3, [pc, #84]	; (25140 <main+0x70>)
   250ec:	0019      	movs	r1, r3
   250ee:	2002      	movs	r0, #2
   250f0:	4b12      	ldr	r3, [pc, #72]	; (2513c <main+0x6c>)
   250f2:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   250f4:	4a13      	ldr	r2, [pc, #76]	; (25144 <main+0x74>)
   250f6:	6853      	ldr	r3, [r2, #4]
   250f8:	21c0      	movs	r1, #192	; 0xc0
   250fa:	0089      	lsls	r1, r1, #2
   250fc:	430b      	orrs	r3, r1
   250fe:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   25100:	2003      	movs	r0, #3
   25102:	4b11      	ldr	r3, [pc, #68]	; (25148 <main+0x78>)
   25104:	4798      	blx	r3
	
	system_interrupt_enable_global();
   25106:	4b11      	ldr	r3, [pc, #68]	; (2514c <main+0x7c>)
   25108:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   2510a:	4b11      	ldr	r3, [pc, #68]	; (25150 <main+0x80>)
   2510c:	4798      	blx	r3
	init_eeprom();
   2510e:	4b11      	ldr	r3, [pc, #68]	; (25154 <main+0x84>)
   25110:	4798      	blx	r3
	
	
	
	start_lcd_service();
   25112:	4b11      	ldr	r3, [pc, #68]	; (25158 <main+0x88>)
   25114:	4798      	blx	r3
	start_gsm_service();
   25116:	4b11      	ldr	r3, [pc, #68]	; (2515c <main+0x8c>)
   25118:	4798      	blx	r3
	start_motor_service();
   2511a:	4b11      	ldr	r3, [pc, #68]	; (25160 <main+0x90>)
   2511c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   2511e:	4811      	ldr	r0, [pc, #68]	; (25164 <main+0x94>)
   25120:	2300      	movs	r3, #0
   25122:	9301      	str	r3, [sp, #4]
   25124:	2301      	movs	r3, #1
   25126:	9300      	str	r3, [sp, #0]
   25128:	2300      	movs	r3, #0
   2512a:	2264      	movs	r2, #100	; 0x64
   2512c:	2100      	movs	r1, #0
   2512e:	4c0e      	ldr	r4, [pc, #56]	; (25168 <main+0x98>)
   25130:	47a0      	blx	r4
	
	vTaskStartScheduler();
   25132:	4b0e      	ldr	r3, [pc, #56]	; (2516c <main+0x9c>)
   25134:	4798      	blx	r3
	
	for (;;)
   25136:	e7fe      	b.n	25136 <main+0x66>
   25138:	00024d75 	.word	0x00024d75
   2513c:	00024ee5 	.word	0x00024ee5
   25140:	00060001 	.word	0x00060001
   25144:	41004000 	.word	0x41004000
   25148:	00024fc1 	.word	0x00024fc1
   2514c:	00024f45 	.word	0x00024f45
   25150:	0002299d 	.word	0x0002299d
   25154:	00010151 	.word	0x00010151
   25158:	00018919 	.word	0x00018919
   2515c:	00018035 	.word	0x00018035
   25160:	0001c2e5 	.word	0x0001c2e5
   25164:	000251b9 	.word	0x000251b9
   25168:	0001fc29 	.word	0x0001fc29
   2516c:	000200fd 	.word	0x000200fd

00025170 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   25170:	b580      	push	{r7, lr}
   25172:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   25174:	4b0d      	ldr	r3, [pc, #52]	; (251ac <checkSleepElligible+0x3c>)
   25176:	4798      	blx	r3
   25178:	0003      	movs	r3, r0
   2517a:	001a      	movs	r2, r3
   2517c:	2301      	movs	r3, #1
   2517e:	4053      	eors	r3, r2
   25180:	b2db      	uxtb	r3, r3
   25182:	2b00      	cmp	r3, #0
   25184:	d009      	beq.n	2519a <checkSleepElligible+0x2a>
   25186:	4b0a      	ldr	r3, [pc, #40]	; (251b0 <checkSleepElligible+0x40>)
   25188:	4798      	blx	r3
   2518a:	1e03      	subs	r3, r0, #0
   2518c:	d005      	beq.n	2519a <checkSleepElligible+0x2a>
   2518e:	4b09      	ldr	r3, [pc, #36]	; (251b4 <checkSleepElligible+0x44>)
   25190:	4798      	blx	r3
   25192:	1e03      	subs	r3, r0, #0
   25194:	d001      	beq.n	2519a <checkSleepElligible+0x2a>
   25196:	2301      	movs	r3, #1
   25198:	e000      	b.n	2519c <checkSleepElligible+0x2c>
   2519a:	2300      	movs	r3, #0
   2519c:	1c1a      	adds	r2, r3, #0
   2519e:	2301      	movs	r3, #1
   251a0:	4013      	ands	r3, r2
   251a2:	b2db      	uxtb	r3, r3
}
   251a4:	0018      	movs	r0, r3
   251a6:	46bd      	mov	sp, r7
   251a8:	bd80      	pop	{r7, pc}
   251aa:	46c0      	nop			; (mov r8, r8)
   251ac:	0001ab65 	.word	0x0001ab65
   251b0:	0001c609 	.word	0x0001c609
   251b4:	000180fd 	.word	0x000180fd

000251b8 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   251b8:	b580      	push	{r7, lr}
   251ba:	b084      	sub	sp, #16
   251bc:	af00      	add	r7, sp, #0
   251be:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   251c0:	4b34      	ldr	r3, [pc, #208]	; (25294 <vTask_sleep_manager+0xdc>)
   251c2:	4798      	blx	r3
   251c4:	1e03      	subs	r3, r0, #0
   251c6:	d060      	beq.n	2528a <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   251c8:	4b33      	ldr	r3, [pc, #204]	; (25298 <vTask_sleep_manager+0xe0>)
   251ca:	781b      	ldrb	r3, [r3, #0]
   251cc:	2201      	movs	r2, #1
   251ce:	4053      	eors	r3, r2
   251d0:	b2db      	uxtb	r3, r3
   251d2:	2b00      	cmp	r3, #0
   251d4:	d008      	beq.n	251e8 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   251d6:	4b31      	ldr	r3, [pc, #196]	; (2529c <vTask_sleep_manager+0xe4>)
   251d8:	4798      	blx	r3
   251da:	0002      	movs	r2, r0
   251dc:	4b30      	ldr	r3, [pc, #192]	; (252a0 <vTask_sleep_manager+0xe8>)
   251de:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   251e0:	4b2d      	ldr	r3, [pc, #180]	; (25298 <vTask_sleep_manager+0xe0>)
   251e2:	2201      	movs	r2, #1
   251e4:	701a      	strb	r2, [r3, #0]
   251e6:	e7eb      	b.n	251c0 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   251e8:	4b2b      	ldr	r3, [pc, #172]	; (25298 <vTask_sleep_manager+0xe0>)
   251ea:	781b      	ldrb	r3, [r3, #0]
   251ec:	2b00      	cmp	r3, #0
   251ee:	d0e7      	beq.n	251c0 <vTask_sleep_manager+0x8>
   251f0:	4b2a      	ldr	r3, [pc, #168]	; (2529c <vTask_sleep_manager+0xe4>)
   251f2:	4798      	blx	r3
   251f4:	0002      	movs	r2, r0
   251f6:	4b2a      	ldr	r3, [pc, #168]	; (252a0 <vTask_sleep_manager+0xe8>)
   251f8:	681b      	ldr	r3, [r3, #0]
   251fa:	1ad3      	subs	r3, r2, r3
   251fc:	4a29      	ldr	r2, [pc, #164]	; (252a4 <vTask_sleep_manager+0xec>)
   251fe:	4293      	cmp	r3, r2
   25200:	d9de      	bls.n	251c0 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   25202:	230f      	movs	r3, #15
   25204:	18fb      	adds	r3, r7, r3
   25206:	220a      	movs	r2, #10
   25208:	701a      	strb	r2, [r3, #0]
				bool led=false;
   2520a:	230e      	movs	r3, #14
   2520c:	18fb      	adds	r3, r7, r3
   2520e:	2200      	movs	r2, #0
   25210:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   25212:	230e      	movs	r3, #14
   25214:	18fb      	adds	r3, r7, r3
   25216:	781b      	ldrb	r3, [r3, #0]
   25218:	1e5a      	subs	r2, r3, #1
   2521a:	4193      	sbcs	r3, r2
   2521c:	b2db      	uxtb	r3, r3
   2521e:	2201      	movs	r2, #1
   25220:	4053      	eors	r3, r2
   25222:	b2db      	uxtb	r3, r3
   25224:	001a      	movs	r2, r3
   25226:	230e      	movs	r3, #14
   25228:	18fb      	adds	r3, r7, r3
   2522a:	701a      	strb	r2, [r3, #0]
   2522c:	781a      	ldrb	r2, [r3, #0]
   2522e:	2101      	movs	r1, #1
   25230:	400a      	ands	r2, r1
   25232:	701a      	strb	r2, [r3, #0]
					if(led)
   25234:	230e      	movs	r3, #14
   25236:	18fb      	adds	r3, r7, r3
   25238:	781b      	ldrb	r3, [r3, #0]
   2523a:	2b00      	cmp	r3, #0
   2523c:	d004      	beq.n	25248 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   2523e:	2100      	movs	r1, #0
   25240:	2027      	movs	r0, #39	; 0x27
   25242:	4b19      	ldr	r3, [pc, #100]	; (252a8 <vTask_sleep_manager+0xf0>)
   25244:	4798      	blx	r3
   25246:	e003      	b.n	25250 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   25248:	2101      	movs	r1, #1
   2524a:	2027      	movs	r0, #39	; 0x27
   2524c:	4b16      	ldr	r3, [pc, #88]	; (252a8 <vTask_sleep_manager+0xf0>)
   2524e:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   25250:	4b12      	ldr	r3, [pc, #72]	; (2529c <vTask_sleep_manager+0xe4>)
   25252:	4798      	blx	r3
   25254:	0002      	movs	r2, r0
   25256:	4b12      	ldr	r3, [pc, #72]	; (252a0 <vTask_sleep_manager+0xe8>)
   25258:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   2525a:	46c0      	nop			; (mov r8, r8)
   2525c:	4b0f      	ldr	r3, [pc, #60]	; (2529c <vTask_sleep_manager+0xe4>)
   2525e:	4798      	blx	r3
   25260:	0002      	movs	r2, r0
   25262:	4b0f      	ldr	r3, [pc, #60]	; (252a0 <vTask_sleep_manager+0xe8>)
   25264:	681b      	ldr	r3, [r3, #0]
   25266:	1ad3      	subs	r3, r2, r3
   25268:	2bc7      	cmp	r3, #199	; 0xc7
   2526a:	d9f7      	bls.n	2525c <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   2526c:	230f      	movs	r3, #15
   2526e:	18fb      	adds	r3, r7, r3
   25270:	220f      	movs	r2, #15
   25272:	18ba      	adds	r2, r7, r2
   25274:	7812      	ldrb	r2, [r2, #0]
   25276:	3a01      	subs	r2, #1
   25278:	701a      	strb	r2, [r3, #0]
   2527a:	230f      	movs	r3, #15
   2527c:	18fb      	adds	r3, r7, r3
   2527e:	781b      	ldrb	r3, [r3, #0]
   25280:	2b00      	cmp	r3, #0
   25282:	d1c6      	bne.n	25212 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   25284:	4b09      	ldr	r3, [pc, #36]	; (252ac <vTask_sleep_manager+0xf4>)
   25286:	4798      	blx	r3
   25288:	e79a      	b.n	251c0 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   2528a:	4b03      	ldr	r3, [pc, #12]	; (25298 <vTask_sleep_manager+0xe0>)
   2528c:	2200      	movs	r2, #0
   2528e:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   25290:	e796      	b.n	251c0 <vTask_sleep_manager+0x8>
   25292:	46c0      	nop			; (mov r8, r8)
   25294:	00025171 	.word	0x00025171
   25298:	2000050c 	.word	0x2000050c
   2529c:	000202cd 	.word	0x000202cd
   252a0:	20000510 	.word	0x20000510
   252a4:	00004650 	.word	0x00004650
   252a8:	0002507d 	.word	0x0002507d
   252ac:	000252b1 	.word	0x000252b1

000252b0 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   252b0:	b580      	push	{r7, lr}
   252b2:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   252b4:	4b07      	ldr	r3, [pc, #28]	; (252d4 <gotoSleep+0x24>)
   252b6:	4798      	blx	r3
	
	lcd_in_sleep = true;
   252b8:	4b07      	ldr	r3, [pc, #28]	; (252d8 <gotoSleep+0x28>)
   252ba:	2201      	movs	r2, #1
   252bc:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   252be:	4b07      	ldr	r3, [pc, #28]	; (252dc <gotoSleep+0x2c>)
   252c0:	2201      	movs	r2, #1
   252c2:	701a      	strb	r2, [r3, #0]
	system_sleep();
   252c4:	4b06      	ldr	r3, [pc, #24]	; (252e0 <gotoSleep+0x30>)
   252c6:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   252c8:	4b06      	ldr	r3, [pc, #24]	; (252e4 <gotoSleep+0x34>)
   252ca:	2201      	movs	r2, #1
   252cc:	701a      	strb	r2, [r3, #0]
   252ce:	46c0      	nop			; (mov r8, r8)
   252d0:	46bd      	mov	sp, r7
   252d2:	bd80      	pop	{r7, pc}
   252d4:	00013b01 	.word	0x00013b01
   252d8:	20000863 	.word	0x20000863
   252dc:	20000864 	.word	0x20000864
   252e0:	00025049 	.word	0x00025049
   252e4:	20000840 	.word	0x20000840

000252e8 <pow>:
   252e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   252ea:	4657      	mov	r7, sl
   252ec:	464e      	mov	r6, r9
   252ee:	46de      	mov	lr, fp
   252f0:	4645      	mov	r5, r8
   252f2:	b5e0      	push	{r5, r6, r7, lr}
   252f4:	b08f      	sub	sp, #60	; 0x3c
   252f6:	001d      	movs	r5, r3
   252f8:	0006      	movs	r6, r0
   252fa:	000f      	movs	r7, r1
   252fc:	0014      	movs	r4, r2
   252fe:	f000 f9ff 	bl	25700 <__ieee754_pow>
   25302:	4bc7      	ldr	r3, [pc, #796]	; (25620 <pow+0x338>)
   25304:	9000      	str	r0, [sp, #0]
   25306:	9101      	str	r1, [sp, #4]
   25308:	469a      	mov	sl, r3
   2530a:	781b      	ldrb	r3, [r3, #0]
   2530c:	b25b      	sxtb	r3, r3
   2530e:	4699      	mov	r9, r3
   25310:	3301      	adds	r3, #1
   25312:	d03e      	beq.n	25392 <pow+0xaa>
   25314:	0022      	movs	r2, r4
   25316:	002b      	movs	r3, r5
   25318:	0020      	movs	r0, r4
   2531a:	0029      	movs	r1, r5
   2531c:	f003 fbe2 	bl	28ae4 <__aeabi_dcmpun>
   25320:	4683      	mov	fp, r0
   25322:	2800      	cmp	r0, #0
   25324:	d135      	bne.n	25392 <pow+0xaa>
   25326:	0032      	movs	r2, r6
   25328:	003b      	movs	r3, r7
   2532a:	0030      	movs	r0, r6
   2532c:	0039      	movs	r1, r7
   2532e:	f003 fbd9 	bl	28ae4 <__aeabi_dcmpun>
   25332:	2200      	movs	r2, #0
   25334:	9003      	str	r0, [sp, #12]
   25336:	2800      	cmp	r0, #0
   25338:	d000      	beq.n	2533c <pow+0x54>
   2533a:	e0b6      	b.n	254aa <pow+0x1c2>
   2533c:	2300      	movs	r3, #0
   2533e:	0030      	movs	r0, r6
   25340:	0039      	movs	r1, r7
   25342:	f001 faa1 	bl	26888 <__aeabi_dcmpeq>
   25346:	2800      	cmp	r0, #0
   25348:	d02c      	beq.n	253a4 <pow+0xbc>
   2534a:	2200      	movs	r2, #0
   2534c:	2300      	movs	r3, #0
   2534e:	0020      	movs	r0, r4
   25350:	0029      	movs	r1, r5
   25352:	f001 fa99 	bl	26888 <__aeabi_dcmpeq>
   25356:	4683      	mov	fp, r0
   25358:	2800      	cmp	r0, #0
   2535a:	d100      	bne.n	2535e <pow+0x76>
   2535c:	e077      	b.n	2544e <pow+0x166>
   2535e:	ab04      	add	r3, sp, #16
   25360:	4698      	mov	r8, r3
   25362:	2301      	movs	r3, #1
   25364:	4642      	mov	r2, r8
   25366:	9304      	str	r3, [sp, #16]
   25368:	4bae      	ldr	r3, [pc, #696]	; (25624 <pow+0x33c>)
   2536a:	6053      	str	r3, [r2, #4]
   2536c:	4643      	mov	r3, r8
   2536e:	9a03      	ldr	r2, [sp, #12]
   25370:	611c      	str	r4, [r3, #16]
   25372:	615d      	str	r5, [r3, #20]
   25374:	621a      	str	r2, [r3, #32]
   25376:	609e      	str	r6, [r3, #8]
   25378:	60df      	str	r7, [r3, #12]
   2537a:	4642      	mov	r2, r8
   2537c:	2300      	movs	r3, #0
   2537e:	2400      	movs	r4, #0
   25380:	6193      	str	r3, [r2, #24]
   25382:	61d4      	str	r4, [r2, #28]
   25384:	464b      	mov	r3, r9
   25386:	2b00      	cmp	r3, #0
   25388:	d04d      	beq.n	25426 <pow+0x13e>
   2538a:	2300      	movs	r3, #0
   2538c:	4ca6      	ldr	r4, [pc, #664]	; (25628 <pow+0x340>)
   2538e:	9300      	str	r3, [sp, #0]
   25390:	9401      	str	r4, [sp, #4]
   25392:	9800      	ldr	r0, [sp, #0]
   25394:	9901      	ldr	r1, [sp, #4]
   25396:	b00f      	add	sp, #60	; 0x3c
   25398:	bc3c      	pop	{r2, r3, r4, r5}
   2539a:	4690      	mov	r8, r2
   2539c:	4699      	mov	r9, r3
   2539e:	46a2      	mov	sl, r4
   253a0:	46ab      	mov	fp, r5
   253a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   253a4:	9800      	ldr	r0, [sp, #0]
   253a6:	9901      	ldr	r1, [sp, #4]
   253a8:	f000 ffc4 	bl	26334 <finite>
   253ac:	4681      	mov	r9, r0
   253ae:	2800      	cmp	r0, #0
   253b0:	d100      	bne.n	253b4 <pow+0xcc>
   253b2:	e09b      	b.n	254ec <pow+0x204>
   253b4:	9800      	ldr	r0, [sp, #0]
   253b6:	9901      	ldr	r1, [sp, #4]
   253b8:	2200      	movs	r2, #0
   253ba:	2300      	movs	r3, #0
   253bc:	f001 fa64 	bl	26888 <__aeabi_dcmpeq>
   253c0:	2800      	cmp	r0, #0
   253c2:	d0e6      	beq.n	25392 <pow+0xaa>
   253c4:	0030      	movs	r0, r6
   253c6:	0039      	movs	r1, r7
   253c8:	f000 ffb4 	bl	26334 <finite>
   253cc:	2800      	cmp	r0, #0
   253ce:	d0e0      	beq.n	25392 <pow+0xaa>
   253d0:	0020      	movs	r0, r4
   253d2:	0029      	movs	r1, r5
   253d4:	f000 ffae 	bl	26334 <finite>
   253d8:	2800      	cmp	r0, #0
   253da:	d0da      	beq.n	25392 <pow+0xaa>
   253dc:	ab04      	add	r3, sp, #16
   253de:	4698      	mov	r8, r3
   253e0:	2304      	movs	r3, #4
   253e2:	4642      	mov	r2, r8
   253e4:	9304      	str	r3, [sp, #16]
   253e6:	4b8f      	ldr	r3, [pc, #572]	; (25624 <pow+0x33c>)
   253e8:	6114      	str	r4, [r2, #16]
   253ea:	6155      	str	r5, [r2, #20]
   253ec:	6053      	str	r3, [r2, #4]
   253ee:	2300      	movs	r3, #0
   253f0:	2400      	movs	r4, #0
   253f2:	6213      	str	r3, [r2, #32]
   253f4:	2300      	movs	r3, #0
   253f6:	6193      	str	r3, [r2, #24]
   253f8:	61d4      	str	r4, [r2, #28]
   253fa:	4653      	mov	r3, sl
   253fc:	781b      	ldrb	r3, [r3, #0]
   253fe:	6096      	str	r6, [r2, #8]
   25400:	60d7      	str	r7, [r2, #12]
   25402:	b25b      	sxtb	r3, r3
   25404:	2b02      	cmp	r3, #2
   25406:	d004      	beq.n	25412 <pow+0x12a>
   25408:	4640      	mov	r0, r8
   2540a:	f000 ff9d 	bl	26348 <matherr>
   2540e:	2800      	cmp	r0, #0
   25410:	d10e      	bne.n	25430 <pow+0x148>
   25412:	f003 fcc1 	bl	28d98 <__errno>
   25416:	2322      	movs	r3, #34	; 0x22
   25418:	6003      	str	r3, [r0, #0]
   2541a:	e009      	b.n	25430 <pow+0x148>
   2541c:	4642      	mov	r2, r8
   2541e:	2300      	movs	r3, #0
   25420:	2400      	movs	r4, #0
   25422:	6193      	str	r3, [r2, #24]
   25424:	61d4      	str	r4, [r2, #28]
   25426:	4640      	mov	r0, r8
   25428:	f000 ff8e 	bl	26348 <matherr>
   2542c:	2800      	cmp	r0, #0
   2542e:	d037      	beq.n	254a0 <pow+0x1b8>
   25430:	4643      	mov	r3, r8
   25432:	6a1b      	ldr	r3, [r3, #32]
   25434:	2b00      	cmp	r3, #0
   25436:	d004      	beq.n	25442 <pow+0x15a>
   25438:	f003 fcae 	bl	28d98 <__errno>
   2543c:	4643      	mov	r3, r8
   2543e:	6a1b      	ldr	r3, [r3, #32]
   25440:	6003      	str	r3, [r0, #0]
   25442:	4643      	mov	r3, r8
   25444:	69dc      	ldr	r4, [r3, #28]
   25446:	699b      	ldr	r3, [r3, #24]
   25448:	9300      	str	r3, [sp, #0]
   2544a:	9401      	str	r4, [sp, #4]
   2544c:	e7a1      	b.n	25392 <pow+0xaa>
   2544e:	0020      	movs	r0, r4
   25450:	0029      	movs	r1, r5
   25452:	f000 ff6f 	bl	26334 <finite>
   25456:	2800      	cmp	r0, #0
   25458:	d09b      	beq.n	25392 <pow+0xaa>
   2545a:	2200      	movs	r2, #0
   2545c:	2300      	movs	r3, #0
   2545e:	0020      	movs	r0, r4
   25460:	0029      	movs	r1, r5
   25462:	f001 fa17 	bl	26894 <__aeabi_dcmplt>
   25466:	2800      	cmp	r0, #0
   25468:	d100      	bne.n	2546c <pow+0x184>
   2546a:	e792      	b.n	25392 <pow+0xaa>
   2546c:	ab04      	add	r3, sp, #16
   2546e:	4698      	mov	r8, r3
   25470:	2301      	movs	r3, #1
   25472:	4642      	mov	r2, r8
   25474:	9304      	str	r3, [sp, #16]
   25476:	4b6b      	ldr	r3, [pc, #428]	; (25624 <pow+0x33c>)
   25478:	6053      	str	r3, [r2, #4]
   2547a:	4643      	mov	r3, r8
   2547c:	465a      	mov	r2, fp
   2547e:	609e      	str	r6, [r3, #8]
   25480:	60df      	str	r7, [r3, #12]
   25482:	621a      	str	r2, [r3, #32]
   25484:	611c      	str	r4, [r3, #16]
   25486:	615d      	str	r5, [r3, #20]
   25488:	4653      	mov	r3, sl
   2548a:	781b      	ldrb	r3, [r3, #0]
   2548c:	b25b      	sxtb	r3, r3
   2548e:	2b00      	cmp	r3, #0
   25490:	d0c4      	beq.n	2541c <pow+0x134>
   25492:	2000      	movs	r0, #0
   25494:	4642      	mov	r2, r8
   25496:	4965      	ldr	r1, [pc, #404]	; (2562c <pow+0x344>)
   25498:	6190      	str	r0, [r2, #24]
   2549a:	61d1      	str	r1, [r2, #28]
   2549c:	2b02      	cmp	r3, #2
   2549e:	d1c2      	bne.n	25426 <pow+0x13e>
   254a0:	f003 fc7a 	bl	28d98 <__errno>
   254a4:	2321      	movs	r3, #33	; 0x21
   254a6:	6003      	str	r3, [r0, #0]
   254a8:	e7c2      	b.n	25430 <pow+0x148>
   254aa:	2300      	movs	r3, #0
   254ac:	0020      	movs	r0, r4
   254ae:	0029      	movs	r1, r5
   254b0:	f001 f9ea 	bl	26888 <__aeabi_dcmpeq>
   254b4:	2800      	cmp	r0, #0
   254b6:	d100      	bne.n	254ba <pow+0x1d2>
   254b8:	e76b      	b.n	25392 <pow+0xaa>
   254ba:	ab04      	add	r3, sp, #16
   254bc:	4698      	mov	r8, r3
   254be:	2301      	movs	r3, #1
   254c0:	4642      	mov	r2, r8
   254c2:	9304      	str	r3, [sp, #16]
   254c4:	4b57      	ldr	r3, [pc, #348]	; (25624 <pow+0x33c>)
   254c6:	4641      	mov	r1, r8
   254c8:	6053      	str	r3, [r2, #4]
   254ca:	4643      	mov	r3, r8
   254cc:	465a      	mov	r2, fp
   254ce:	621a      	str	r2, [r3, #32]
   254d0:	2200      	movs	r2, #0
   254d2:	609e      	str	r6, [r3, #8]
   254d4:	60df      	str	r7, [r3, #12]
   254d6:	611c      	str	r4, [r3, #16]
   254d8:	615d      	str	r5, [r3, #20]
   254da:	4b53      	ldr	r3, [pc, #332]	; (25628 <pow+0x340>)
   254dc:	618a      	str	r2, [r1, #24]
   254de:	61cb      	str	r3, [r1, #28]
   254e0:	9200      	str	r2, [sp, #0]
   254e2:	9301      	str	r3, [sp, #4]
   254e4:	464b      	mov	r3, r9
   254e6:	2b02      	cmp	r3, #2
   254e8:	d19d      	bne.n	25426 <pow+0x13e>
   254ea:	e752      	b.n	25392 <pow+0xaa>
   254ec:	0030      	movs	r0, r6
   254ee:	0039      	movs	r1, r7
   254f0:	f000 ff20 	bl	26334 <finite>
   254f4:	2800      	cmp	r0, #0
   254f6:	d100      	bne.n	254fa <pow+0x212>
   254f8:	e75c      	b.n	253b4 <pow+0xcc>
   254fa:	0020      	movs	r0, r4
   254fc:	0029      	movs	r1, r5
   254fe:	f000 ff19 	bl	26334 <finite>
   25502:	2800      	cmp	r0, #0
   25504:	d100      	bne.n	25508 <pow+0x220>
   25506:	e755      	b.n	253b4 <pow+0xcc>
   25508:	9800      	ldr	r0, [sp, #0]
   2550a:	9901      	ldr	r1, [sp, #4]
   2550c:	000b      	movs	r3, r1
   2550e:	0002      	movs	r2, r0
   25510:	f003 fae8 	bl	28ae4 <__aeabi_dcmpun>
   25514:	ab04      	add	r3, sp, #16
   25516:	4698      	mov	r8, r3
   25518:	2800      	cmp	r0, #0
   2551a:	d161      	bne.n	255e0 <pow+0x2f8>
   2551c:	2303      	movs	r3, #3
   2551e:	4642      	mov	r2, r8
   25520:	9304      	str	r3, [sp, #16]
   25522:	4b40      	ldr	r3, [pc, #256]	; (25624 <pow+0x33c>)
   25524:	6210      	str	r0, [r2, #32]
   25526:	6053      	str	r3, [r2, #4]
   25528:	4653      	mov	r3, sl
   2552a:	781b      	ldrb	r3, [r3, #0]
   2552c:	6096      	str	r6, [r2, #8]
   2552e:	60d7      	str	r7, [r2, #12]
   25530:	b25b      	sxtb	r3, r3
   25532:	6114      	str	r4, [r2, #16]
   25534:	6155      	str	r5, [r2, #20]
   25536:	4699      	mov	r9, r3
   25538:	2b00      	cmp	r3, #0
   2553a:	d12f      	bne.n	2559c <pow+0x2b4>
   2553c:	22e0      	movs	r2, #224	; 0xe0
   2553e:	4641      	mov	r1, r8
   25540:	4b3b      	ldr	r3, [pc, #236]	; (25630 <pow+0x348>)
   25542:	0612      	lsls	r2, r2, #24
   25544:	618a      	str	r2, [r1, #24]
   25546:	61cb      	str	r3, [r1, #28]
   25548:	0030      	movs	r0, r6
   2554a:	2200      	movs	r2, #0
   2554c:	2300      	movs	r3, #0
   2554e:	0039      	movs	r1, r7
   25550:	f001 f9a0 	bl	26894 <__aeabi_dcmplt>
   25554:	2800      	cmp	r0, #0
   25556:	d100      	bne.n	2555a <pow+0x272>
   25558:	e756      	b.n	25408 <pow+0x120>
   2555a:	2200      	movs	r2, #0
   2555c:	4b35      	ldr	r3, [pc, #212]	; (25634 <pow+0x34c>)
   2555e:	0020      	movs	r0, r4
   25560:	0029      	movs	r1, r5
   25562:	f002 fd29 	bl	27fb8 <__aeabi_dmul>
   25566:	0004      	movs	r4, r0
   25568:	000d      	movs	r5, r1
   2556a:	f000 fef5 	bl	26358 <rint>
   2556e:	0002      	movs	r2, r0
   25570:	000b      	movs	r3, r1
   25572:	0020      	movs	r0, r4
   25574:	0029      	movs	r1, r5
   25576:	f001 f987 	bl	26888 <__aeabi_dcmpeq>
   2557a:	2800      	cmp	r0, #0
   2557c:	d105      	bne.n	2558a <pow+0x2a2>
   2557e:	22e0      	movs	r2, #224	; 0xe0
   25580:	4b2d      	ldr	r3, [pc, #180]	; (25638 <pow+0x350>)
   25582:	0612      	lsls	r2, r2, #24
   25584:	4641      	mov	r1, r8
   25586:	618a      	str	r2, [r1, #24]
   25588:	61cb      	str	r3, [r1, #28]
   2558a:	4653      	mov	r3, sl
   2558c:	781b      	ldrb	r3, [r3, #0]
   2558e:	b25b      	sxtb	r3, r3
   25590:	4699      	mov	r9, r3
   25592:	464b      	mov	r3, r9
   25594:	2b02      	cmp	r3, #2
   25596:	d000      	beq.n	2559a <pow+0x2b2>
   25598:	e736      	b.n	25408 <pow+0x120>
   2559a:	e73a      	b.n	25412 <pow+0x12a>
   2559c:	2200      	movs	r2, #0
   2559e:	4641      	mov	r1, r8
   255a0:	4b26      	ldr	r3, [pc, #152]	; (2563c <pow+0x354>)
   255a2:	0030      	movs	r0, r6
   255a4:	618a      	str	r2, [r1, #24]
   255a6:	61cb      	str	r3, [r1, #28]
   255a8:	2200      	movs	r2, #0
   255aa:	2300      	movs	r3, #0
   255ac:	0039      	movs	r1, r7
   255ae:	f001 f971 	bl	26894 <__aeabi_dcmplt>
   255b2:	2800      	cmp	r0, #0
   255b4:	d0ed      	beq.n	25592 <pow+0x2aa>
   255b6:	2200      	movs	r2, #0
   255b8:	4b1e      	ldr	r3, [pc, #120]	; (25634 <pow+0x34c>)
   255ba:	0020      	movs	r0, r4
   255bc:	0029      	movs	r1, r5
   255be:	f002 fcfb 	bl	27fb8 <__aeabi_dmul>
   255c2:	0004      	movs	r4, r0
   255c4:	000d      	movs	r5, r1
   255c6:	f000 fec7 	bl	26358 <rint>
   255ca:	0002      	movs	r2, r0
   255cc:	000b      	movs	r3, r1
   255ce:	0020      	movs	r0, r4
   255d0:	0029      	movs	r1, r5
   255d2:	f001 f959 	bl	26888 <__aeabi_dcmpeq>
   255d6:	2800      	cmp	r0, #0
   255d8:	d1d7      	bne.n	2558a <pow+0x2a2>
   255da:	2200      	movs	r2, #0
   255dc:	4b13      	ldr	r3, [pc, #76]	; (2562c <pow+0x344>)
   255de:	e7d1      	b.n	25584 <pow+0x29c>
   255e0:	2301      	movs	r3, #1
   255e2:	4642      	mov	r2, r8
   255e4:	9304      	str	r3, [sp, #16]
   255e6:	4b0f      	ldr	r3, [pc, #60]	; (25624 <pow+0x33c>)
   255e8:	6053      	str	r3, [r2, #4]
   255ea:	4643      	mov	r3, r8
   255ec:	464a      	mov	r2, r9
   255ee:	611c      	str	r4, [r3, #16]
   255f0:	615d      	str	r5, [r3, #20]
   255f2:	621a      	str	r2, [r3, #32]
   255f4:	609e      	str	r6, [r3, #8]
   255f6:	60df      	str	r7, [r3, #12]
   255f8:	2400      	movs	r4, #0
   255fa:	4653      	mov	r3, sl
   255fc:	571c      	ldrsb	r4, [r3, r4]
   255fe:	2c00      	cmp	r4, #0
   25600:	d100      	bne.n	25604 <pow+0x31c>
   25602:	e70b      	b.n	2541c <pow+0x134>
   25604:	2300      	movs	r3, #0
   25606:	2200      	movs	r2, #0
   25608:	0019      	movs	r1, r3
   2560a:	0010      	movs	r0, r2
   2560c:	f002 f8a0 	bl	27750 <__aeabi_ddiv>
   25610:	4643      	mov	r3, r8
   25612:	6198      	str	r0, [r3, #24]
   25614:	61d9      	str	r1, [r3, #28]
   25616:	2c02      	cmp	r4, #2
   25618:	d100      	bne.n	2561c <pow+0x334>
   2561a:	e741      	b.n	254a0 <pow+0x1b8>
   2561c:	e703      	b.n	25426 <pow+0x13e>
   2561e:	46c0      	nop			; (mov r8, r8)
   25620:	20000029 	.word	0x20000029
   25624:	0002ad4c 	.word	0x0002ad4c
   25628:	3ff00000 	.word	0x3ff00000
   2562c:	fff00000 	.word	0xfff00000
   25630:	47efffff 	.word	0x47efffff
   25634:	3fe00000 	.word	0x3fe00000
   25638:	c7efffff 	.word	0xc7efffff
   2563c:	7ff00000 	.word	0x7ff00000

00025640 <sqrt>:
   25640:	b5f0      	push	{r4, r5, r6, r7, lr}
   25642:	4647      	mov	r7, r8
   25644:	46ce      	mov	lr, r9
   25646:	b580      	push	{r7, lr}
   25648:	b08d      	sub	sp, #52	; 0x34
   2564a:	0004      	movs	r4, r0
   2564c:	000d      	movs	r5, r1
   2564e:	f000 fd8d 	bl	2616c <__ieee754_sqrt>
   25652:	4b29      	ldr	r3, [pc, #164]	; (256f8 <sqrt+0xb8>)
   25654:	0006      	movs	r6, r0
   25656:	781b      	ldrb	r3, [r3, #0]
   25658:	000f      	movs	r7, r1
   2565a:	b25b      	sxtb	r3, r3
   2565c:	4698      	mov	r8, r3
   2565e:	3301      	adds	r3, #1
   25660:	d010      	beq.n	25684 <sqrt+0x44>
   25662:	0022      	movs	r2, r4
   25664:	002b      	movs	r3, r5
   25666:	0020      	movs	r0, r4
   25668:	0029      	movs	r1, r5
   2566a:	f003 fa3b 	bl	28ae4 <__aeabi_dcmpun>
   2566e:	4681      	mov	r9, r0
   25670:	2800      	cmp	r0, #0
   25672:	d107      	bne.n	25684 <sqrt+0x44>
   25674:	2200      	movs	r2, #0
   25676:	2300      	movs	r3, #0
   25678:	0020      	movs	r0, r4
   2567a:	0029      	movs	r1, r5
   2567c:	f001 f90a 	bl	26894 <__aeabi_dcmplt>
   25680:	2800      	cmp	r0, #0
   25682:	d106      	bne.n	25692 <sqrt+0x52>
   25684:	0030      	movs	r0, r6
   25686:	0039      	movs	r1, r7
   25688:	b00d      	add	sp, #52	; 0x34
   2568a:	bc0c      	pop	{r2, r3}
   2568c:	4690      	mov	r8, r2
   2568e:	4699      	mov	r9, r3
   25690:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25692:	2301      	movs	r3, #1
   25694:	9302      	str	r3, [sp, #8]
   25696:	4b19      	ldr	r3, [pc, #100]	; (256fc <sqrt+0xbc>)
   25698:	9406      	str	r4, [sp, #24]
   2569a:	9507      	str	r5, [sp, #28]
   2569c:	9303      	str	r3, [sp, #12]
   2569e:	464b      	mov	r3, r9
   256a0:	930a      	str	r3, [sp, #40]	; 0x28
   256a2:	4643      	mov	r3, r8
   256a4:	9404      	str	r4, [sp, #16]
   256a6:	9505      	str	r5, [sp, #20]
   256a8:	2b00      	cmp	r3, #0
   256aa:	d015      	beq.n	256d8 <sqrt+0x98>
   256ac:	2300      	movs	r3, #0
   256ae:	2200      	movs	r2, #0
   256b0:	0019      	movs	r1, r3
   256b2:	0010      	movs	r0, r2
   256b4:	f002 f84c 	bl	27750 <__aeabi_ddiv>
   256b8:	4643      	mov	r3, r8
   256ba:	9008      	str	r0, [sp, #32]
   256bc:	9109      	str	r1, [sp, #36]	; 0x24
   256be:	2b02      	cmp	r3, #2
   256c0:	d10e      	bne.n	256e0 <sqrt+0xa0>
   256c2:	f003 fb69 	bl	28d98 <__errno>
   256c6:	2321      	movs	r3, #33	; 0x21
   256c8:	6003      	str	r3, [r0, #0]
   256ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   256cc:	9301      	str	r3, [sp, #4]
   256ce:	2b00      	cmp	r3, #0
   256d0:	d10c      	bne.n	256ec <sqrt+0xac>
   256d2:	9e08      	ldr	r6, [sp, #32]
   256d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   256d6:	e7d5      	b.n	25684 <sqrt+0x44>
   256d8:	2300      	movs	r3, #0
   256da:	2400      	movs	r4, #0
   256dc:	9308      	str	r3, [sp, #32]
   256de:	9409      	str	r4, [sp, #36]	; 0x24
   256e0:	a802      	add	r0, sp, #8
   256e2:	f000 fe31 	bl	26348 <matherr>
   256e6:	2800      	cmp	r0, #0
   256e8:	d1ef      	bne.n	256ca <sqrt+0x8a>
   256ea:	e7ea      	b.n	256c2 <sqrt+0x82>
   256ec:	f003 fb54 	bl	28d98 <__errno>
   256f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   256f2:	9301      	str	r3, [sp, #4]
   256f4:	6003      	str	r3, [r0, #0]
   256f6:	e7ec      	b.n	256d2 <sqrt+0x92>
   256f8:	20000029 	.word	0x20000029
   256fc:	0002ad50 	.word	0x0002ad50

00025700 <__ieee754_pow>:
   25700:	b5f0      	push	{r4, r5, r6, r7, lr}
   25702:	4657      	mov	r7, sl
   25704:	464e      	mov	r6, r9
   25706:	4645      	mov	r5, r8
   25708:	46de      	mov	lr, fp
   2570a:	001c      	movs	r4, r3
   2570c:	0013      	movs	r3, r2
   2570e:	b5e0      	push	{r5, r6, r7, lr}
   25710:	0065      	lsls	r5, r4, #1
   25712:	b091      	sub	sp, #68	; 0x44
   25714:	086d      	lsrs	r5, r5, #1
   25716:	9300      	str	r3, [sp, #0]
   25718:	9401      	str	r4, [sp, #4]
   2571a:	0007      	movs	r7, r0
   2571c:	000e      	movs	r6, r1
   2571e:	4680      	mov	r8, r0
   25720:	4689      	mov	r9, r1
   25722:	46a2      	mov	sl, r4
   25724:	432b      	orrs	r3, r5
   25726:	d031      	beq.n	2578c <__ieee754_pow+0x8c>
   25728:	4b67      	ldr	r3, [pc, #412]	; (258c8 <__ieee754_pow+0x1c8>)
   2572a:	0074      	lsls	r4, r6, #1
   2572c:	0864      	lsrs	r4, r4, #1
   2572e:	429c      	cmp	r4, r3
   25730:	dc27      	bgt.n	25782 <__ieee754_pow+0x82>
   25732:	d024      	beq.n	2577e <__ieee754_pow+0x7e>
   25734:	429d      	cmp	r5, r3
   25736:	dc24      	bgt.n	25782 <__ieee754_pow+0x82>
   25738:	4b63      	ldr	r3, [pc, #396]	; (258c8 <__ieee754_pow+0x1c8>)
   2573a:	429d      	cmp	r5, r3
   2573c:	d100      	bne.n	25740 <__ieee754_pow+0x40>
   2573e:	e081      	b.n	25844 <__ieee754_pow+0x144>
   25740:	2300      	movs	r3, #0
   25742:	469b      	mov	fp, r3
   25744:	464b      	mov	r3, r9
   25746:	2b00      	cmp	r3, #0
   25748:	da00      	bge.n	2574c <__ieee754_pow+0x4c>
   2574a:	e07f      	b.n	2584c <__ieee754_pow+0x14c>
   2574c:	2a00      	cmp	r2, #0
   2574e:	d12c      	bne.n	257aa <__ieee754_pow+0xaa>
   25750:	4b5d      	ldr	r3, [pc, #372]	; (258c8 <__ieee754_pow+0x1c8>)
   25752:	429d      	cmp	r5, r3
   25754:	d100      	bne.n	25758 <__ieee754_pow+0x58>
   25756:	e097      	b.n	25888 <__ieee754_pow+0x188>
   25758:	4b5c      	ldr	r3, [pc, #368]	; (258cc <__ieee754_pow+0x1cc>)
   2575a:	429d      	cmp	r5, r3
   2575c:	d066      	beq.n	2582c <__ieee754_pow+0x12c>
   2575e:	2380      	movs	r3, #128	; 0x80
   25760:	05db      	lsls	r3, r3, #23
   25762:	459a      	cmp	sl, r3
   25764:	d100      	bne.n	25768 <__ieee754_pow+0x68>
   25766:	e3b9      	b.n	25edc <__ieee754_pow+0x7dc>
   25768:	4b59      	ldr	r3, [pc, #356]	; (258d0 <__ieee754_pow+0x1d0>)
   2576a:	459a      	cmp	sl, r3
   2576c:	d11d      	bne.n	257aa <__ieee754_pow+0xaa>
   2576e:	464b      	mov	r3, r9
   25770:	2b00      	cmp	r3, #0
   25772:	db1a      	blt.n	257aa <__ieee754_pow+0xaa>
   25774:	0038      	movs	r0, r7
   25776:	0031      	movs	r1, r6
   25778:	f000 fcf8 	bl	2616c <__ieee754_sqrt>
   2577c:	e008      	b.n	25790 <__ieee754_pow+0x90>
   2577e:	2800      	cmp	r0, #0
   25780:	d00d      	beq.n	2579e <__ieee754_pow+0x9e>
   25782:	4b54      	ldr	r3, [pc, #336]	; (258d4 <__ieee754_pow+0x1d4>)
   25784:	469c      	mov	ip, r3
   25786:	4464      	add	r4, ip
   25788:	4327      	orrs	r7, r4
   2578a:	d10a      	bne.n	257a2 <__ieee754_pow+0xa2>
   2578c:	2000      	movs	r0, #0
   2578e:	494f      	ldr	r1, [pc, #316]	; (258cc <__ieee754_pow+0x1cc>)
   25790:	b011      	add	sp, #68	; 0x44
   25792:	bc3c      	pop	{r2, r3, r4, r5}
   25794:	4690      	mov	r8, r2
   25796:	4699      	mov	r9, r3
   25798:	46a2      	mov	sl, r4
   2579a:	46ab      	mov	fp, r5
   2579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2579e:	42a5      	cmp	r5, r4
   257a0:	ddca      	ble.n	25738 <__ieee754_pow+0x38>
   257a2:	484d      	ldr	r0, [pc, #308]	; (258d8 <__ieee754_pow+0x1d8>)
   257a4:	f000 fdd2 	bl	2634c <nan>
   257a8:	e7f2      	b.n	25790 <__ieee754_pow+0x90>
   257aa:	0038      	movs	r0, r7
   257ac:	0031      	movs	r1, r6
   257ae:	f000 fdbd 	bl	2632c <fabs>
   257b2:	4643      	mov	r3, r8
   257b4:	2b00      	cmp	r3, #0
   257b6:	d11d      	bne.n	257f4 <__ieee754_pow+0xf4>
   257b8:	2c00      	cmp	r4, #0
   257ba:	d004      	beq.n	257c6 <__ieee754_pow+0xc6>
   257bc:	4a43      	ldr	r2, [pc, #268]	; (258cc <__ieee754_pow+0x1cc>)
   257be:	00b3      	lsls	r3, r6, #2
   257c0:	089b      	lsrs	r3, r3, #2
   257c2:	4293      	cmp	r3, r2
   257c4:	d116      	bne.n	257f4 <__ieee754_pow+0xf4>
   257c6:	4653      	mov	r3, sl
   257c8:	2b00      	cmp	r3, #0
   257ca:	da00      	bge.n	257ce <__ieee754_pow+0xce>
   257cc:	e3c5      	b.n	25f5a <__ieee754_pow+0x85a>
   257ce:	464b      	mov	r3, r9
   257d0:	2b00      	cmp	r3, #0
   257d2:	dadd      	bge.n	25790 <__ieee754_pow+0x90>
   257d4:	4b3f      	ldr	r3, [pc, #252]	; (258d4 <__ieee754_pow+0x1d4>)
   257d6:	469c      	mov	ip, r3
   257d8:	465b      	mov	r3, fp
   257da:	4464      	add	r4, ip
   257dc:	431c      	orrs	r4, r3
   257de:	d101      	bne.n	257e4 <__ieee754_pow+0xe4>
   257e0:	f000 fc53 	bl	2608a <__ieee754_pow+0x98a>
   257e4:	465b      	mov	r3, fp
   257e6:	2b01      	cmp	r3, #1
   257e8:	d1d2      	bne.n	25790 <__ieee754_pow+0x90>
   257ea:	2480      	movs	r4, #128	; 0x80
   257ec:	0624      	lsls	r4, r4, #24
   257ee:	190b      	adds	r3, r1, r4
   257f0:	0019      	movs	r1, r3
   257f2:	e7cd      	b.n	25790 <__ieee754_pow+0x90>
   257f4:	0ff3      	lsrs	r3, r6, #31
   257f6:	3b01      	subs	r3, #1
   257f8:	4698      	mov	r8, r3
   257fa:	465b      	mov	r3, fp
   257fc:	4642      	mov	r2, r8
   257fe:	4313      	orrs	r3, r2
   25800:	d057      	beq.n	258b2 <__ieee754_pow+0x1b2>
   25802:	4b36      	ldr	r3, [pc, #216]	; (258dc <__ieee754_pow+0x1dc>)
   25804:	429d      	cmp	r5, r3
   25806:	dd77      	ble.n	258f8 <__ieee754_pow+0x1f8>
   25808:	4b35      	ldr	r3, [pc, #212]	; (258e0 <__ieee754_pow+0x1e0>)
   2580a:	429d      	cmp	r5, r3
   2580c:	dc00      	bgt.n	25810 <__ieee754_pow+0x110>
   2580e:	e3b1      	b.n	25f74 <__ieee754_pow+0x874>
   25810:	4b34      	ldr	r3, [pc, #208]	; (258e4 <__ieee754_pow+0x1e4>)
   25812:	429c      	cmp	r4, r3
   25814:	dc00      	bgt.n	25818 <__ieee754_pow+0x118>
   25816:	e3a8      	b.n	25f6a <__ieee754_pow+0x86a>
   25818:	4653      	mov	r3, sl
   2581a:	2b00      	cmp	r3, #0
   2581c:	dd43      	ble.n	258a6 <__ieee754_pow+0x1a6>
   2581e:	4a32      	ldr	r2, [pc, #200]	; (258e8 <__ieee754_pow+0x1e8>)
   25820:	4b32      	ldr	r3, [pc, #200]	; (258ec <__ieee754_pow+0x1ec>)
   25822:	0010      	movs	r0, r2
   25824:	0019      	movs	r1, r3
   25826:	f002 fbc7 	bl	27fb8 <__aeabi_dmul>
   2582a:	e7b1      	b.n	25790 <__ieee754_pow+0x90>
   2582c:	4653      	mov	r3, sl
   2582e:	0038      	movs	r0, r7
   25830:	0031      	movs	r1, r6
   25832:	2b00      	cmp	r3, #0
   25834:	daac      	bge.n	25790 <__ieee754_pow+0x90>
   25836:	003a      	movs	r2, r7
   25838:	0033      	movs	r3, r6
   2583a:	2000      	movs	r0, #0
   2583c:	4923      	ldr	r1, [pc, #140]	; (258cc <__ieee754_pow+0x1cc>)
   2583e:	f001 ff87 	bl	27750 <__aeabi_ddiv>
   25842:	e7a5      	b.n	25790 <__ieee754_pow+0x90>
   25844:	2a00      	cmp	r2, #0
   25846:	d100      	bne.n	2584a <__ieee754_pow+0x14a>
   25848:	e77a      	b.n	25740 <__ieee754_pow+0x40>
   2584a:	e79a      	b.n	25782 <__ieee754_pow+0x82>
   2584c:	4b28      	ldr	r3, [pc, #160]	; (258f0 <__ieee754_pow+0x1f0>)
   2584e:	429d      	cmp	r5, r3
   25850:	dc2c      	bgt.n	258ac <__ieee754_pow+0x1ac>
   25852:	4b24      	ldr	r3, [pc, #144]	; (258e4 <__ieee754_pow+0x1e4>)
   25854:	429d      	cmp	r5, r3
   25856:	dc00      	bgt.n	2585a <__ieee754_pow+0x15a>
   25858:	e778      	b.n	2574c <__ieee754_pow+0x4c>
   2585a:	4926      	ldr	r1, [pc, #152]	; (258f4 <__ieee754_pow+0x1f4>)
   2585c:	152b      	asrs	r3, r5, #20
   2585e:	468c      	mov	ip, r1
   25860:	4463      	add	r3, ip
   25862:	2b14      	cmp	r3, #20
   25864:	dc01      	bgt.n	2586a <__ieee754_pow+0x16a>
   25866:	f000 fbf3 	bl	26050 <__ieee754_pow+0x950>
   2586a:	2134      	movs	r1, #52	; 0x34
   2586c:	1acb      	subs	r3, r1, r3
   2586e:	9900      	ldr	r1, [sp, #0]
   25870:	40d9      	lsrs	r1, r3
   25872:	0008      	movs	r0, r1
   25874:	4098      	lsls	r0, r3
   25876:	4282      	cmp	r2, r0
   25878:	d000      	beq.n	2587c <__ieee754_pow+0x17c>
   2587a:	e767      	b.n	2574c <__ieee754_pow+0x4c>
   2587c:	2301      	movs	r3, #1
   2587e:	4019      	ands	r1, r3
   25880:	3301      	adds	r3, #1
   25882:	1a5b      	subs	r3, r3, r1
   25884:	469b      	mov	fp, r3
   25886:	e761      	b.n	2574c <__ieee754_pow+0x4c>
   25888:	4b12      	ldr	r3, [pc, #72]	; (258d4 <__ieee754_pow+0x1d4>)
   2588a:	18e3      	adds	r3, r4, r3
   2588c:	431f      	orrs	r7, r3
   2588e:	d100      	bne.n	25892 <__ieee754_pow+0x192>
   25890:	e77c      	b.n	2578c <__ieee754_pow+0x8c>
   25892:	4b14      	ldr	r3, [pc, #80]	; (258e4 <__ieee754_pow+0x1e4>)
   25894:	429c      	cmp	r4, r3
   25896:	dc00      	bgt.n	2589a <__ieee754_pow+0x19a>
   25898:	e327      	b.n	25eea <__ieee754_pow+0x7ea>
   2589a:	9800      	ldr	r0, [sp, #0]
   2589c:	9901      	ldr	r1, [sp, #4]
   2589e:	4653      	mov	r3, sl
   258a0:	2b00      	cmp	r3, #0
   258a2:	db00      	blt.n	258a6 <__ieee754_pow+0x1a6>
   258a4:	e774      	b.n	25790 <__ieee754_pow+0x90>
   258a6:	2000      	movs	r0, #0
   258a8:	2100      	movs	r1, #0
   258aa:	e771      	b.n	25790 <__ieee754_pow+0x90>
   258ac:	2302      	movs	r3, #2
   258ae:	469b      	mov	fp, r3
   258b0:	e74c      	b.n	2574c <__ieee754_pow+0x4c>
   258b2:	003a      	movs	r2, r7
   258b4:	0033      	movs	r3, r6
   258b6:	0038      	movs	r0, r7
   258b8:	0031      	movs	r1, r6
   258ba:	f002 fdfd 	bl	284b8 <__aeabi_dsub>
   258be:	0002      	movs	r2, r0
   258c0:	000b      	movs	r3, r1
   258c2:	f001 ff45 	bl	27750 <__aeabi_ddiv>
   258c6:	e763      	b.n	25790 <__ieee754_pow+0x90>
   258c8:	7ff00000 	.word	0x7ff00000
   258cc:	3ff00000 	.word	0x3ff00000
   258d0:	3fe00000 	.word	0x3fe00000
   258d4:	c0100000 	.word	0xc0100000
   258d8:	0002ad54 	.word	0x0002ad54
   258dc:	41e00000 	.word	0x41e00000
   258e0:	43f00000 	.word	0x43f00000
   258e4:	3fefffff 	.word	0x3fefffff
   258e8:	8800759c 	.word	0x8800759c
   258ec:	7e37e43c 	.word	0x7e37e43c
   258f0:	433fffff 	.word	0x433fffff
   258f4:	fffffc01 	.word	0xfffffc01
   258f8:	4be9      	ldr	r3, [pc, #932]	; (25ca0 <__ieee754_pow+0x5a0>)
   258fa:	2200      	movs	r2, #0
   258fc:	429c      	cmp	r4, r3
   258fe:	dc06      	bgt.n	2590e <__ieee754_pow+0x20e>
   25900:	2200      	movs	r2, #0
   25902:	4be8      	ldr	r3, [pc, #928]	; (25ca4 <__ieee754_pow+0x5a4>)
   25904:	f002 fb58 	bl	27fb8 <__aeabi_dmul>
   25908:	2235      	movs	r2, #53	; 0x35
   2590a:	000c      	movs	r4, r1
   2590c:	4252      	negs	r2, r2
   2590e:	4de6      	ldr	r5, [pc, #920]	; (25ca8 <__ieee754_pow+0x5a8>)
   25910:	1523      	asrs	r3, r4, #20
   25912:	46ac      	mov	ip, r5
   25914:	4463      	add	r3, ip
   25916:	4699      	mov	r9, r3
   25918:	0324      	lsls	r4, r4, #12
   2591a:	4de4      	ldr	r5, [pc, #912]	; (25cac <__ieee754_pow+0x5ac>)
   2591c:	4be4      	ldr	r3, [pc, #912]	; (25cb0 <__ieee754_pow+0x5b0>)
   2591e:	0b24      	lsrs	r4, r4, #12
   25920:	4491      	add	r9, r2
   25922:	4325      	orrs	r5, r4
   25924:	429c      	cmp	r4, r3
   25926:	dd09      	ble.n	2593c <__ieee754_pow+0x23c>
   25928:	4be2      	ldr	r3, [pc, #904]	; (25cb4 <__ieee754_pow+0x5b4>)
   2592a:	429c      	cmp	r4, r3
   2592c:	dc00      	bgt.n	25930 <__ieee754_pow+0x230>
   2592e:	e3b6      	b.n	2609e <__ieee754_pow+0x99e>
   25930:	2301      	movs	r3, #1
   25932:	469c      	mov	ip, r3
   25934:	4be0      	ldr	r3, [pc, #896]	; (25cb8 <__ieee754_pow+0x5b8>)
   25936:	44e1      	add	r9, ip
   25938:	469c      	mov	ip, r3
   2593a:	4465      	add	r5, ip
   2593c:	2300      	movs	r3, #0
   2593e:	2400      	movs	r4, #0
   25940:	2200      	movs	r2, #0
   25942:	9308      	str	r3, [sp, #32]
   25944:	9409      	str	r4, [sp, #36]	; 0x24
   25946:	930c      	str	r3, [sp, #48]	; 0x30
   25948:	940d      	str	r4, [sp, #52]	; 0x34
   2594a:	2400      	movs	r4, #0
   2594c:	4bd7      	ldr	r3, [pc, #860]	; (25cac <__ieee754_pow+0x5ac>)
   2594e:	9206      	str	r2, [sp, #24]
   25950:	9307      	str	r3, [sp, #28]
   25952:	9a06      	ldr	r2, [sp, #24]
   25954:	9b07      	ldr	r3, [sp, #28]
   25956:	0029      	movs	r1, r5
   25958:	900a      	str	r0, [sp, #40]	; 0x28
   2595a:	910b      	str	r1, [sp, #44]	; 0x2c
   2595c:	f002 fdac 	bl	284b8 <__aeabi_dsub>
   25960:	9a06      	ldr	r2, [sp, #24]
   25962:	9b07      	ldr	r3, [sp, #28]
   25964:	0006      	movs	r6, r0
   25966:	000f      	movs	r7, r1
   25968:	980a      	ldr	r0, [sp, #40]	; 0x28
   2596a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2596c:	f001 fbe0 	bl	27130 <__aeabi_dadd>
   25970:	0002      	movs	r2, r0
   25972:	000b      	movs	r3, r1
   25974:	2000      	movs	r0, #0
   25976:	49cd      	ldr	r1, [pc, #820]	; (25cac <__ieee754_pow+0x5ac>)
   25978:	f001 feea 	bl	27750 <__aeabi_ddiv>
   2597c:	000a      	movs	r2, r1
   2597e:	0001      	movs	r1, r0
   25980:	0013      	movs	r3, r2
   25982:	910e      	str	r1, [sp, #56]	; 0x38
   25984:	920f      	str	r2, [sp, #60]	; 0x3c
   25986:	0002      	movs	r2, r0
   25988:	0039      	movs	r1, r7
   2598a:	0030      	movs	r0, r6
   2598c:	f002 fb14 	bl	27fb8 <__aeabi_dmul>
   25990:	000a      	movs	r2, r1
   25992:	0001      	movs	r1, r0
   25994:	2080      	movs	r0, #128	; 0x80
   25996:	9104      	str	r1, [sp, #16]
   25998:	9205      	str	r2, [sp, #20]
   2599a:	0013      	movs	r3, r2
   2599c:	2200      	movs	r2, #0
   2599e:	1069      	asrs	r1, r5, #1
   259a0:	2580      	movs	r5, #128	; 0x80
   259a2:	0300      	lsls	r0, r0, #12
   259a4:	4684      	mov	ip, r0
   259a6:	9202      	str	r2, [sp, #8]
   259a8:	9303      	str	r3, [sp, #12]
   259aa:	2200      	movs	r2, #0
   259ac:	05ad      	lsls	r5, r5, #22
   259ae:	430d      	orrs	r5, r1
   259b0:	4465      	add	r5, ip
   259b2:	192b      	adds	r3, r5, r4
   259b4:	9802      	ldr	r0, [sp, #8]
   259b6:	9903      	ldr	r1, [sp, #12]
   259b8:	0014      	movs	r4, r2
   259ba:	001d      	movs	r5, r3
   259bc:	f002 fafc 	bl	27fb8 <__aeabi_dmul>
   259c0:	0002      	movs	r2, r0
   259c2:	000b      	movs	r3, r1
   259c4:	0030      	movs	r0, r6
   259c6:	0039      	movs	r1, r7
   259c8:	f002 fd76 	bl	284b8 <__aeabi_dsub>
   259cc:	9a06      	ldr	r2, [sp, #24]
   259ce:	9b07      	ldr	r3, [sp, #28]
   259d0:	0006      	movs	r6, r0
   259d2:	000f      	movs	r7, r1
   259d4:	0020      	movs	r0, r4
   259d6:	0029      	movs	r1, r5
   259d8:	f002 fd6e 	bl	284b8 <__aeabi_dsub>
   259dc:	0002      	movs	r2, r0
   259de:	000b      	movs	r3, r1
   259e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   259e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   259e4:	f002 fd68 	bl	284b8 <__aeabi_dsub>
   259e8:	9a02      	ldr	r2, [sp, #8]
   259ea:	9b03      	ldr	r3, [sp, #12]
   259ec:	f002 fae4 	bl	27fb8 <__aeabi_dmul>
   259f0:	0002      	movs	r2, r0
   259f2:	000b      	movs	r3, r1
   259f4:	0030      	movs	r0, r6
   259f6:	0039      	movs	r1, r7
   259f8:	f002 fd5e 	bl	284b8 <__aeabi_dsub>
   259fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   259fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25a00:	f002 fada 	bl	27fb8 <__aeabi_dmul>
   25a04:	9d04      	ldr	r5, [sp, #16]
   25a06:	9e05      	ldr	r6, [sp, #20]
   25a08:	9006      	str	r0, [sp, #24]
   25a0a:	9107      	str	r1, [sp, #28]
   25a0c:	002a      	movs	r2, r5
   25a0e:	0033      	movs	r3, r6
   25a10:	0028      	movs	r0, r5
   25a12:	0031      	movs	r1, r6
   25a14:	f002 fad0 	bl	27fb8 <__aeabi_dmul>
   25a18:	0006      	movs	r6, r0
   25a1a:	000f      	movs	r7, r1
   25a1c:	4aa7      	ldr	r2, [pc, #668]	; (25cbc <__ieee754_pow+0x5bc>)
   25a1e:	4ba8      	ldr	r3, [pc, #672]	; (25cc0 <__ieee754_pow+0x5c0>)
   25a20:	f002 faca 	bl	27fb8 <__aeabi_dmul>
   25a24:	4aa7      	ldr	r2, [pc, #668]	; (25cc4 <__ieee754_pow+0x5c4>)
   25a26:	4ba8      	ldr	r3, [pc, #672]	; (25cc8 <__ieee754_pow+0x5c8>)
   25a28:	f001 fb82 	bl	27130 <__aeabi_dadd>
   25a2c:	0032      	movs	r2, r6
   25a2e:	003b      	movs	r3, r7
   25a30:	f002 fac2 	bl	27fb8 <__aeabi_dmul>
   25a34:	4aa5      	ldr	r2, [pc, #660]	; (25ccc <__ieee754_pow+0x5cc>)
   25a36:	4ba6      	ldr	r3, [pc, #664]	; (25cd0 <__ieee754_pow+0x5d0>)
   25a38:	f001 fb7a 	bl	27130 <__aeabi_dadd>
   25a3c:	0032      	movs	r2, r6
   25a3e:	003b      	movs	r3, r7
   25a40:	f002 faba 	bl	27fb8 <__aeabi_dmul>
   25a44:	4aa3      	ldr	r2, [pc, #652]	; (25cd4 <__ieee754_pow+0x5d4>)
   25a46:	4ba4      	ldr	r3, [pc, #656]	; (25cd8 <__ieee754_pow+0x5d8>)
   25a48:	f001 fb72 	bl	27130 <__aeabi_dadd>
   25a4c:	0032      	movs	r2, r6
   25a4e:	003b      	movs	r3, r7
   25a50:	f002 fab2 	bl	27fb8 <__aeabi_dmul>
   25a54:	4aa1      	ldr	r2, [pc, #644]	; (25cdc <__ieee754_pow+0x5dc>)
   25a56:	4ba2      	ldr	r3, [pc, #648]	; (25ce0 <__ieee754_pow+0x5e0>)
   25a58:	f001 fb6a 	bl	27130 <__aeabi_dadd>
   25a5c:	0032      	movs	r2, r6
   25a5e:	003b      	movs	r3, r7
   25a60:	f002 faaa 	bl	27fb8 <__aeabi_dmul>
   25a64:	4a9f      	ldr	r2, [pc, #636]	; (25ce4 <__ieee754_pow+0x5e4>)
   25a66:	4ba0      	ldr	r3, [pc, #640]	; (25ce8 <__ieee754_pow+0x5e8>)
   25a68:	f001 fb62 	bl	27130 <__aeabi_dadd>
   25a6c:	0032      	movs	r2, r6
   25a6e:	0004      	movs	r4, r0
   25a70:	000d      	movs	r5, r1
   25a72:	003b      	movs	r3, r7
   25a74:	0030      	movs	r0, r6
   25a76:	0039      	movs	r1, r7
   25a78:	f002 fa9e 	bl	27fb8 <__aeabi_dmul>
   25a7c:	0002      	movs	r2, r0
   25a7e:	000b      	movs	r3, r1
   25a80:	0020      	movs	r0, r4
   25a82:	0029      	movs	r1, r5
   25a84:	f002 fa98 	bl	27fb8 <__aeabi_dmul>
   25a88:	9e02      	ldr	r6, [sp, #8]
   25a8a:	9f03      	ldr	r7, [sp, #12]
   25a8c:	0004      	movs	r4, r0
   25a8e:	000d      	movs	r5, r1
   25a90:	9804      	ldr	r0, [sp, #16]
   25a92:	9905      	ldr	r1, [sp, #20]
   25a94:	0032      	movs	r2, r6
   25a96:	003b      	movs	r3, r7
   25a98:	f001 fb4a 	bl	27130 <__aeabi_dadd>
   25a9c:	9a06      	ldr	r2, [sp, #24]
   25a9e:	9b07      	ldr	r3, [sp, #28]
   25aa0:	f002 fa8a 	bl	27fb8 <__aeabi_dmul>
   25aa4:	0022      	movs	r2, r4
   25aa6:	002b      	movs	r3, r5
   25aa8:	f001 fb42 	bl	27130 <__aeabi_dadd>
   25aac:	0032      	movs	r2, r6
   25aae:	900a      	str	r0, [sp, #40]	; 0x28
   25ab0:	910b      	str	r1, [sp, #44]	; 0x2c
   25ab2:	003b      	movs	r3, r7
   25ab4:	0030      	movs	r0, r6
   25ab6:	0039      	movs	r1, r7
   25ab8:	9602      	str	r6, [sp, #8]
   25aba:	9703      	str	r7, [sp, #12]
   25abc:	f002 fa7c 	bl	27fb8 <__aeabi_dmul>
   25ac0:	2200      	movs	r2, #0
   25ac2:	4b8a      	ldr	r3, [pc, #552]	; (25cec <__ieee754_pow+0x5ec>)
   25ac4:	0004      	movs	r4, r0
   25ac6:	000d      	movs	r5, r1
   25ac8:	f001 fb32 	bl	27130 <__aeabi_dadd>
   25acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25ad0:	f001 fb2e 	bl	27130 <__aeabi_dadd>
   25ad4:	2600      	movs	r6, #0
   25ad6:	000f      	movs	r7, r1
   25ad8:	0032      	movs	r2, r6
   25ada:	000b      	movs	r3, r1
   25adc:	9802      	ldr	r0, [sp, #8]
   25ade:	9903      	ldr	r1, [sp, #12]
   25ae0:	f002 fa6a 	bl	27fb8 <__aeabi_dmul>
   25ae4:	2200      	movs	r2, #0
   25ae6:	9002      	str	r0, [sp, #8]
   25ae8:	9103      	str	r1, [sp, #12]
   25aea:	4b80      	ldr	r3, [pc, #512]	; (25cec <__ieee754_pow+0x5ec>)
   25aec:	0030      	movs	r0, r6
   25aee:	0039      	movs	r1, r7
   25af0:	f002 fce2 	bl	284b8 <__aeabi_dsub>
   25af4:	0022      	movs	r2, r4
   25af6:	002b      	movs	r3, r5
   25af8:	f002 fcde 	bl	284b8 <__aeabi_dsub>
   25afc:	0002      	movs	r2, r0
   25afe:	000b      	movs	r3, r1
   25b00:	980a      	ldr	r0, [sp, #40]	; 0x28
   25b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25b04:	f002 fcd8 	bl	284b8 <__aeabi_dsub>
   25b08:	9a04      	ldr	r2, [sp, #16]
   25b0a:	9b05      	ldr	r3, [sp, #20]
   25b0c:	f002 fa54 	bl	27fb8 <__aeabi_dmul>
   25b10:	0032      	movs	r2, r6
   25b12:	0004      	movs	r4, r0
   25b14:	000d      	movs	r5, r1
   25b16:	9806      	ldr	r0, [sp, #24]
   25b18:	9907      	ldr	r1, [sp, #28]
   25b1a:	003b      	movs	r3, r7
   25b1c:	f002 fa4c 	bl	27fb8 <__aeabi_dmul>
   25b20:	0002      	movs	r2, r0
   25b22:	000b      	movs	r3, r1
   25b24:	0020      	movs	r0, r4
   25b26:	0029      	movs	r1, r5
   25b28:	f001 fb02 	bl	27130 <__aeabi_dadd>
   25b2c:	0004      	movs	r4, r0
   25b2e:	000d      	movs	r5, r1
   25b30:	0002      	movs	r2, r0
   25b32:	000b      	movs	r3, r1
   25b34:	9802      	ldr	r0, [sp, #8]
   25b36:	9903      	ldr	r1, [sp, #12]
   25b38:	f001 fafa 	bl	27130 <__aeabi_dadd>
   25b3c:	2600      	movs	r6, #0
   25b3e:	22e0      	movs	r2, #224	; 0xe0
   25b40:	4b6b      	ldr	r3, [pc, #428]	; (25cf0 <__ieee754_pow+0x5f0>)
   25b42:	0612      	lsls	r2, r2, #24
   25b44:	0030      	movs	r0, r6
   25b46:	000f      	movs	r7, r1
   25b48:	f002 fa36 	bl	27fb8 <__aeabi_dmul>
   25b4c:	9a02      	ldr	r2, [sp, #8]
   25b4e:	9b03      	ldr	r3, [sp, #12]
   25b50:	9004      	str	r0, [sp, #16]
   25b52:	9105      	str	r1, [sp, #20]
   25b54:	0030      	movs	r0, r6
   25b56:	0039      	movs	r1, r7
   25b58:	f002 fcae 	bl	284b8 <__aeabi_dsub>
   25b5c:	0002      	movs	r2, r0
   25b5e:	000b      	movs	r3, r1
   25b60:	0020      	movs	r0, r4
   25b62:	0029      	movs	r1, r5
   25b64:	f002 fca8 	bl	284b8 <__aeabi_dsub>
   25b68:	4a62      	ldr	r2, [pc, #392]	; (25cf4 <__ieee754_pow+0x5f4>)
   25b6a:	4b61      	ldr	r3, [pc, #388]	; (25cf0 <__ieee754_pow+0x5f0>)
   25b6c:	f002 fa24 	bl	27fb8 <__aeabi_dmul>
   25b70:	4a61      	ldr	r2, [pc, #388]	; (25cf8 <__ieee754_pow+0x5f8>)
   25b72:	0004      	movs	r4, r0
   25b74:	000d      	movs	r5, r1
   25b76:	4b61      	ldr	r3, [pc, #388]	; (25cfc <__ieee754_pow+0x5fc>)
   25b78:	0030      	movs	r0, r6
   25b7a:	0039      	movs	r1, r7
   25b7c:	f002 fa1c 	bl	27fb8 <__aeabi_dmul>
   25b80:	0002      	movs	r2, r0
   25b82:	000b      	movs	r3, r1
   25b84:	0020      	movs	r0, r4
   25b86:	0029      	movs	r1, r5
   25b88:	f001 fad2 	bl	27130 <__aeabi_dadd>
   25b8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25b90:	f001 face 	bl	27130 <__aeabi_dadd>
   25b94:	0006      	movs	r6, r0
   25b96:	4648      	mov	r0, r9
   25b98:	000f      	movs	r7, r1
   25b9a:	f002 fff7 	bl	28b8c <__aeabi_i2d>
   25b9e:	0004      	movs	r4, r0
   25ba0:	000d      	movs	r5, r1
   25ba2:	9804      	ldr	r0, [sp, #16]
   25ba4:	9905      	ldr	r1, [sp, #20]
   25ba6:	0032      	movs	r2, r6
   25ba8:	003b      	movs	r3, r7
   25baa:	f001 fac1 	bl	27130 <__aeabi_dadd>
   25bae:	9a08      	ldr	r2, [sp, #32]
   25bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25bb2:	f001 fabd 	bl	27130 <__aeabi_dadd>
   25bb6:	0022      	movs	r2, r4
   25bb8:	002b      	movs	r3, r5
   25bba:	f001 fab9 	bl	27130 <__aeabi_dadd>
   25bbe:	2000      	movs	r0, #0
   25bc0:	0022      	movs	r2, r4
   25bc2:	002b      	movs	r3, r5
   25bc4:	9002      	str	r0, [sp, #8]
   25bc6:	9103      	str	r1, [sp, #12]
   25bc8:	f002 fc76 	bl	284b8 <__aeabi_dsub>
   25bcc:	9a08      	ldr	r2, [sp, #32]
   25bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25bd0:	f002 fc72 	bl	284b8 <__aeabi_dsub>
   25bd4:	9a04      	ldr	r2, [sp, #16]
   25bd6:	9b05      	ldr	r3, [sp, #20]
   25bd8:	f002 fc6e 	bl	284b8 <__aeabi_dsub>
   25bdc:	0002      	movs	r2, r0
   25bde:	000b      	movs	r3, r1
   25be0:	0030      	movs	r0, r6
   25be2:	0039      	movs	r1, r7
   25be4:	f002 fc68 	bl	284b8 <__aeabi_dsub>
   25be8:	9004      	str	r0, [sp, #16]
   25bea:	9105      	str	r1, [sp, #20]
   25bec:	465b      	mov	r3, fp
   25bee:	4642      	mov	r2, r8
   25bf0:	3b01      	subs	r3, #1
   25bf2:	4313      	orrs	r3, r2
   25bf4:	d100      	bne.n	25bf8 <__ieee754_pow+0x4f8>
   25bf6:	e1ab      	b.n	25f50 <__ieee754_pow+0x850>
   25bf8:	2300      	movs	r3, #0
   25bfa:	4c2c      	ldr	r4, [pc, #176]	; (25cac <__ieee754_pow+0x5ac>)
   25bfc:	9306      	str	r3, [sp, #24]
   25bfe:	9407      	str	r4, [sp, #28]
   25c00:	9800      	ldr	r0, [sp, #0]
   25c02:	9901      	ldr	r1, [sp, #4]
   25c04:	2600      	movs	r6, #0
   25c06:	000b      	movs	r3, r1
   25c08:	0032      	movs	r2, r6
   25c0a:	000f      	movs	r7, r1
   25c0c:	f002 fc54 	bl	284b8 <__aeabi_dsub>
   25c10:	9a02      	ldr	r2, [sp, #8]
   25c12:	9b03      	ldr	r3, [sp, #12]
   25c14:	f002 f9d0 	bl	27fb8 <__aeabi_dmul>
   25c18:	9a00      	ldr	r2, [sp, #0]
   25c1a:	9b01      	ldr	r3, [sp, #4]
   25c1c:	0004      	movs	r4, r0
   25c1e:	000d      	movs	r5, r1
   25c20:	9804      	ldr	r0, [sp, #16]
   25c22:	9905      	ldr	r1, [sp, #20]
   25c24:	f002 f9c8 	bl	27fb8 <__aeabi_dmul>
   25c28:	0002      	movs	r2, r0
   25c2a:	000b      	movs	r3, r1
   25c2c:	0020      	movs	r0, r4
   25c2e:	0029      	movs	r1, r5
   25c30:	f001 fa7e 	bl	27130 <__aeabi_dadd>
   25c34:	0004      	movs	r4, r0
   25c36:	000d      	movs	r5, r1
   25c38:	9802      	ldr	r0, [sp, #8]
   25c3a:	9903      	ldr	r1, [sp, #12]
   25c3c:	0032      	movs	r2, r6
   25c3e:	003b      	movs	r3, r7
   25c40:	9400      	str	r4, [sp, #0]
   25c42:	9501      	str	r5, [sp, #4]
   25c44:	f002 f9b8 	bl	27fb8 <__aeabi_dmul>
   25c48:	0002      	movs	r2, r0
   25c4a:	000b      	movs	r3, r1
   25c4c:	0006      	movs	r6, r0
   25c4e:	000f      	movs	r7, r1
   25c50:	0020      	movs	r0, r4
   25c52:	0029      	movs	r1, r5
   25c54:	f001 fa6c 	bl	27130 <__aeabi_dadd>
   25c58:	4b29      	ldr	r3, [pc, #164]	; (25d00 <__ieee754_pow+0x600>)
   25c5a:	0004      	movs	r4, r0
   25c5c:	000d      	movs	r5, r1
   25c5e:	0002      	movs	r2, r0
   25c60:	468b      	mov	fp, r1
   25c62:	4299      	cmp	r1, r3
   25c64:	dc00      	bgt.n	25c68 <__ieee754_pow+0x568>
   25c66:	e14f      	b.n	25f08 <__ieee754_pow+0x808>
   25c68:	4b26      	ldr	r3, [pc, #152]	; (25d04 <__ieee754_pow+0x604>)
   25c6a:	18cb      	adds	r3, r1, r3
   25c6c:	4303      	orrs	r3, r0
   25c6e:	d000      	beq.n	25c72 <__ieee754_pow+0x572>
   25c70:	e1e2      	b.n	26038 <__ieee754_pow+0x938>
   25c72:	9800      	ldr	r0, [sp, #0]
   25c74:	9901      	ldr	r1, [sp, #4]
   25c76:	4a24      	ldr	r2, [pc, #144]	; (25d08 <__ieee754_pow+0x608>)
   25c78:	4b24      	ldr	r3, [pc, #144]	; (25d0c <__ieee754_pow+0x60c>)
   25c7a:	f001 fa59 	bl	27130 <__aeabi_dadd>
   25c7e:	0032      	movs	r2, r6
   25c80:	9002      	str	r0, [sp, #8]
   25c82:	9103      	str	r1, [sp, #12]
   25c84:	003b      	movs	r3, r7
   25c86:	0020      	movs	r0, r4
   25c88:	0029      	movs	r1, r5
   25c8a:	f002 fc15 	bl	284b8 <__aeabi_dsub>
   25c8e:	0002      	movs	r2, r0
   25c90:	000b      	movs	r3, r1
   25c92:	9802      	ldr	r0, [sp, #8]
   25c94:	9903      	ldr	r1, [sp, #12]
   25c96:	f000 fe11 	bl	268bc <__aeabi_dcmpgt>
   25c9a:	46aa      	mov	sl, r5
   25c9c:	e038      	b.n	25d10 <__ieee754_pow+0x610>
   25c9e:	46c0      	nop			; (mov r8, r8)
   25ca0:	000fffff 	.word	0x000fffff
   25ca4:	43400000 	.word	0x43400000
   25ca8:	fffffc01 	.word	0xfffffc01
   25cac:	3ff00000 	.word	0x3ff00000
   25cb0:	0003988e 	.word	0x0003988e
   25cb4:	000bb679 	.word	0x000bb679
   25cb8:	fff00000 	.word	0xfff00000
   25cbc:	4a454eef 	.word	0x4a454eef
   25cc0:	3fca7e28 	.word	0x3fca7e28
   25cc4:	93c9db65 	.word	0x93c9db65
   25cc8:	3fcd864a 	.word	0x3fcd864a
   25ccc:	a91d4101 	.word	0xa91d4101
   25cd0:	3fd17460 	.word	0x3fd17460
   25cd4:	518f264d 	.word	0x518f264d
   25cd8:	3fd55555 	.word	0x3fd55555
   25cdc:	db6fabff 	.word	0xdb6fabff
   25ce0:	3fdb6db6 	.word	0x3fdb6db6
   25ce4:	33333303 	.word	0x33333303
   25ce8:	3fe33333 	.word	0x3fe33333
   25cec:	40080000 	.word	0x40080000
   25cf0:	3feec709 	.word	0x3feec709
   25cf4:	dc3a03fd 	.word	0xdc3a03fd
   25cf8:	145b01f5 	.word	0x145b01f5
   25cfc:	be3e2fe0 	.word	0xbe3e2fe0
   25d00:	408fffff 	.word	0x408fffff
   25d04:	bf700000 	.word	0xbf700000
   25d08:	652b82fe 	.word	0x652b82fe
   25d0c:	3c971547 	.word	0x3c971547
   25d10:	2800      	cmp	r0, #0
   25d12:	d000      	beq.n	25d16 <__ieee754_pow+0x616>
   25d14:	e190      	b.n	26038 <__ieee754_pow+0x938>
   25d16:	4aec      	ldr	r2, [pc, #944]	; (260c8 <__ieee754_pow+0x9c8>)
   25d18:	4653      	mov	r3, sl
   25d1a:	4694      	mov	ip, r2
   25d1c:	2280      	movs	r2, #128	; 0x80
   25d1e:	0352      	lsls	r2, r2, #13
   25d20:	0011      	movs	r1, r2
   25d22:	151b      	asrs	r3, r3, #20
   25d24:	4463      	add	r3, ip
   25d26:	4119      	asrs	r1, r3
   25d28:	000b      	movs	r3, r1
   25d2a:	4690      	mov	r8, r2
   25d2c:	4ae7      	ldr	r2, [pc, #924]	; (260cc <__ieee754_pow+0x9cc>)
   25d2e:	445b      	add	r3, fp
   25d30:	4694      	mov	ip, r2
   25d32:	005c      	lsls	r4, r3, #1
   25d34:	0d64      	lsrs	r4, r4, #21
   25d36:	4de6      	ldr	r5, [pc, #920]	; (260d0 <__ieee754_pow+0x9d0>)
   25d38:	4464      	add	r4, ip
   25d3a:	4125      	asrs	r5, r4
   25d3c:	001a      	movs	r2, r3
   25d3e:	43aa      	bics	r2, r5
   25d40:	0011      	movs	r1, r2
   25d42:	4642      	mov	r2, r8
   25d44:	031b      	lsls	r3, r3, #12
   25d46:	0b1b      	lsrs	r3, r3, #12
   25d48:	4313      	orrs	r3, r2
   25d4a:	2214      	movs	r2, #20
   25d4c:	1b14      	subs	r4, r2, r4
   25d4e:	4123      	asrs	r3, r4
   25d50:	4699      	mov	r9, r3
   25d52:	465b      	mov	r3, fp
   25d54:	2000      	movs	r0, #0
   25d56:	2b00      	cmp	r3, #0
   25d58:	da00      	bge.n	25d5c <__ieee754_pow+0x65c>
   25d5a:	e1b0      	b.n	260be <__ieee754_pow+0x9be>
   25d5c:	0002      	movs	r2, r0
   25d5e:	000b      	movs	r3, r1
   25d60:	0030      	movs	r0, r6
   25d62:	0039      	movs	r1, r7
   25d64:	f002 fba8 	bl	284b8 <__aeabi_dsub>
   25d68:	000b      	movs	r3, r1
   25d6a:	0002      	movs	r2, r0
   25d6c:	0006      	movs	r6, r0
   25d6e:	000f      	movs	r7, r1
   25d70:	9800      	ldr	r0, [sp, #0]
   25d72:	9901      	ldr	r1, [sp, #4]
   25d74:	f001 f9dc 	bl	27130 <__aeabi_dadd>
   25d78:	464b      	mov	r3, r9
   25d7a:	051b      	lsls	r3, r3, #20
   25d7c:	000d      	movs	r5, r1
   25d7e:	4698      	mov	r8, r3
   25d80:	2400      	movs	r4, #0
   25d82:	2200      	movs	r2, #0
   25d84:	4bd3      	ldr	r3, [pc, #844]	; (260d4 <__ieee754_pow+0x9d4>)
   25d86:	0020      	movs	r0, r4
   25d88:	0029      	movs	r1, r5
   25d8a:	f002 f915 	bl	27fb8 <__aeabi_dmul>
   25d8e:	0032      	movs	r2, r6
   25d90:	9002      	str	r0, [sp, #8]
   25d92:	9103      	str	r1, [sp, #12]
   25d94:	003b      	movs	r3, r7
   25d96:	0020      	movs	r0, r4
   25d98:	0029      	movs	r1, r5
   25d9a:	f002 fb8d 	bl	284b8 <__aeabi_dsub>
   25d9e:	0002      	movs	r2, r0
   25da0:	000b      	movs	r3, r1
   25da2:	9800      	ldr	r0, [sp, #0]
   25da4:	9901      	ldr	r1, [sp, #4]
   25da6:	f002 fb87 	bl	284b8 <__aeabi_dsub>
   25daa:	4acb      	ldr	r2, [pc, #812]	; (260d8 <__ieee754_pow+0x9d8>)
   25dac:	4bcb      	ldr	r3, [pc, #812]	; (260dc <__ieee754_pow+0x9dc>)
   25dae:	f002 f903 	bl	27fb8 <__aeabi_dmul>
   25db2:	4acb      	ldr	r2, [pc, #812]	; (260e0 <__ieee754_pow+0x9e0>)
   25db4:	0006      	movs	r6, r0
   25db6:	000f      	movs	r7, r1
   25db8:	4bca      	ldr	r3, [pc, #808]	; (260e4 <__ieee754_pow+0x9e4>)
   25dba:	0020      	movs	r0, r4
   25dbc:	0029      	movs	r1, r5
   25dbe:	f002 f8fb 	bl	27fb8 <__aeabi_dmul>
   25dc2:	0002      	movs	r2, r0
   25dc4:	000b      	movs	r3, r1
   25dc6:	0030      	movs	r0, r6
   25dc8:	0039      	movs	r1, r7
   25dca:	f001 f9b1 	bl	27130 <__aeabi_dadd>
   25dce:	0004      	movs	r4, r0
   25dd0:	000d      	movs	r5, r1
   25dd2:	0002      	movs	r2, r0
   25dd4:	000b      	movs	r3, r1
   25dd6:	9802      	ldr	r0, [sp, #8]
   25dd8:	9903      	ldr	r1, [sp, #12]
   25dda:	f001 f9a9 	bl	27130 <__aeabi_dadd>
   25dde:	9a02      	ldr	r2, [sp, #8]
   25de0:	9b03      	ldr	r3, [sp, #12]
   25de2:	0006      	movs	r6, r0
   25de4:	000f      	movs	r7, r1
   25de6:	f002 fb67 	bl	284b8 <__aeabi_dsub>
   25dea:	0002      	movs	r2, r0
   25dec:	000b      	movs	r3, r1
   25dee:	0020      	movs	r0, r4
   25df0:	0029      	movs	r1, r5
   25df2:	f002 fb61 	bl	284b8 <__aeabi_dsub>
   25df6:	0032      	movs	r2, r6
   25df8:	9000      	str	r0, [sp, #0]
   25dfa:	9101      	str	r1, [sp, #4]
   25dfc:	003b      	movs	r3, r7
   25dfe:	0030      	movs	r0, r6
   25e00:	0039      	movs	r1, r7
   25e02:	f002 f8d9 	bl	27fb8 <__aeabi_dmul>
   25e06:	0004      	movs	r4, r0
   25e08:	000d      	movs	r5, r1
   25e0a:	4ab7      	ldr	r2, [pc, #732]	; (260e8 <__ieee754_pow+0x9e8>)
   25e0c:	4bb7      	ldr	r3, [pc, #732]	; (260ec <__ieee754_pow+0x9ec>)
   25e0e:	f002 f8d3 	bl	27fb8 <__aeabi_dmul>
   25e12:	4ab7      	ldr	r2, [pc, #732]	; (260f0 <__ieee754_pow+0x9f0>)
   25e14:	4bb7      	ldr	r3, [pc, #732]	; (260f4 <__ieee754_pow+0x9f4>)
   25e16:	f002 fb4f 	bl	284b8 <__aeabi_dsub>
   25e1a:	0022      	movs	r2, r4
   25e1c:	002b      	movs	r3, r5
   25e1e:	f002 f8cb 	bl	27fb8 <__aeabi_dmul>
   25e22:	4ab5      	ldr	r2, [pc, #724]	; (260f8 <__ieee754_pow+0x9f8>)
   25e24:	4bb5      	ldr	r3, [pc, #724]	; (260fc <__ieee754_pow+0x9fc>)
   25e26:	f001 f983 	bl	27130 <__aeabi_dadd>
   25e2a:	0022      	movs	r2, r4
   25e2c:	002b      	movs	r3, r5
   25e2e:	f002 f8c3 	bl	27fb8 <__aeabi_dmul>
   25e32:	4ab3      	ldr	r2, [pc, #716]	; (26100 <__ieee754_pow+0xa00>)
   25e34:	4bb3      	ldr	r3, [pc, #716]	; (26104 <__ieee754_pow+0xa04>)
   25e36:	f002 fb3f 	bl	284b8 <__aeabi_dsub>
   25e3a:	0022      	movs	r2, r4
   25e3c:	002b      	movs	r3, r5
   25e3e:	f002 f8bb 	bl	27fb8 <__aeabi_dmul>
   25e42:	4ab1      	ldr	r2, [pc, #708]	; (26108 <__ieee754_pow+0xa08>)
   25e44:	4bb1      	ldr	r3, [pc, #708]	; (2610c <__ieee754_pow+0xa0c>)
   25e46:	f001 f973 	bl	27130 <__aeabi_dadd>
   25e4a:	0022      	movs	r2, r4
   25e4c:	002b      	movs	r3, r5
   25e4e:	f002 f8b3 	bl	27fb8 <__aeabi_dmul>
   25e52:	0002      	movs	r2, r0
   25e54:	000b      	movs	r3, r1
   25e56:	0030      	movs	r0, r6
   25e58:	0039      	movs	r1, r7
   25e5a:	f002 fb2d 	bl	284b8 <__aeabi_dsub>
   25e5e:	0004      	movs	r4, r0
   25e60:	000d      	movs	r5, r1
   25e62:	0002      	movs	r2, r0
   25e64:	000b      	movs	r3, r1
   25e66:	0030      	movs	r0, r6
   25e68:	0039      	movs	r1, r7
   25e6a:	f002 f8a5 	bl	27fb8 <__aeabi_dmul>
   25e6e:	2380      	movs	r3, #128	; 0x80
   25e70:	9002      	str	r0, [sp, #8]
   25e72:	9103      	str	r1, [sp, #12]
   25e74:	2200      	movs	r2, #0
   25e76:	05db      	lsls	r3, r3, #23
   25e78:	0020      	movs	r0, r4
   25e7a:	0029      	movs	r1, r5
   25e7c:	f002 fb1c 	bl	284b8 <__aeabi_dsub>
   25e80:	0002      	movs	r2, r0
   25e82:	000b      	movs	r3, r1
   25e84:	9802      	ldr	r0, [sp, #8]
   25e86:	9903      	ldr	r1, [sp, #12]
   25e88:	f001 fc62 	bl	27750 <__aeabi_ddiv>
   25e8c:	9a00      	ldr	r2, [sp, #0]
   25e8e:	9b01      	ldr	r3, [sp, #4]
   25e90:	0004      	movs	r4, r0
   25e92:	000d      	movs	r5, r1
   25e94:	0030      	movs	r0, r6
   25e96:	0039      	movs	r1, r7
   25e98:	f002 f88e 	bl	27fb8 <__aeabi_dmul>
   25e9c:	9a00      	ldr	r2, [sp, #0]
   25e9e:	9b01      	ldr	r3, [sp, #4]
   25ea0:	f001 f946 	bl	27130 <__aeabi_dadd>
   25ea4:	0002      	movs	r2, r0
   25ea6:	000b      	movs	r3, r1
   25ea8:	0020      	movs	r0, r4
   25eaa:	0029      	movs	r1, r5
   25eac:	f002 fb04 	bl	284b8 <__aeabi_dsub>
   25eb0:	0032      	movs	r2, r6
   25eb2:	003b      	movs	r3, r7
   25eb4:	f002 fb00 	bl	284b8 <__aeabi_dsub>
   25eb8:	0002      	movs	r2, r0
   25eba:	000b      	movs	r3, r1
   25ebc:	2000      	movs	r0, #0
   25ebe:	4994      	ldr	r1, [pc, #592]	; (26110 <__ieee754_pow+0xa10>)
   25ec0:	f002 fafa 	bl	284b8 <__aeabi_dsub>
   25ec4:	4643      	mov	r3, r8
   25ec6:	185b      	adds	r3, r3, r1
   25ec8:	151a      	asrs	r2, r3, #20
   25eca:	2a00      	cmp	r2, #0
   25ecc:	dc00      	bgt.n	25ed0 <__ieee754_pow+0x7d0>
   25ece:	e149      	b.n	26164 <__ieee754_pow+0xa64>
   25ed0:	0019      	movs	r1, r3
   25ed2:	9a06      	ldr	r2, [sp, #24]
   25ed4:	9b07      	ldr	r3, [sp, #28]
   25ed6:	f002 f86f 	bl	27fb8 <__aeabi_dmul>
   25eda:	e459      	b.n	25790 <__ieee754_pow+0x90>
   25edc:	003a      	movs	r2, r7
   25ede:	0033      	movs	r3, r6
   25ee0:	0038      	movs	r0, r7
   25ee2:	0031      	movs	r1, r6
   25ee4:	f002 f868 	bl	27fb8 <__aeabi_dmul>
   25ee8:	e452      	b.n	25790 <__ieee754_pow+0x90>
   25eea:	4653      	mov	r3, sl
   25eec:	2b00      	cmp	r3, #0
   25eee:	db00      	blt.n	25ef2 <__ieee754_pow+0x7f2>
   25ef0:	e4d9      	b.n	258a6 <__ieee754_pow+0x1a6>
   25ef2:	9c00      	ldr	r4, [sp, #0]
   25ef4:	9d01      	ldr	r5, [sp, #4]
   25ef6:	2280      	movs	r2, #128	; 0x80
   25ef8:	0612      	lsls	r2, r2, #24
   25efa:	002b      	movs	r3, r5
   25efc:	4694      	mov	ip, r2
   25efe:	4463      	add	r3, ip
   25f00:	0020      	movs	r0, r4
   25f02:	0019      	movs	r1, r3
   25f04:	f7ff fc44 	bl	25790 <__ieee754_pow+0x90>
   25f08:	004b      	lsls	r3, r1, #1
   25f0a:	085b      	lsrs	r3, r3, #1
   25f0c:	469a      	mov	sl, r3
   25f0e:	4b81      	ldr	r3, [pc, #516]	; (26114 <__ieee754_pow+0xa14>)
   25f10:	459a      	cmp	sl, r3
   25f12:	dc00      	bgt.n	25f16 <__ieee754_pow+0x816>
   25f14:	e0b1      	b.n	2607a <__ieee754_pow+0x97a>
   25f16:	4b80      	ldr	r3, [pc, #512]	; (26118 <__ieee754_pow+0xa18>)
   25f18:	445b      	add	r3, fp
   25f1a:	431a      	orrs	r2, r3
   25f1c:	d10c      	bne.n	25f38 <__ieee754_pow+0x838>
   25f1e:	0032      	movs	r2, r6
   25f20:	003b      	movs	r3, r7
   25f22:	f002 fac9 	bl	284b8 <__aeabi_dsub>
   25f26:	0002      	movs	r2, r0
   25f28:	000b      	movs	r3, r1
   25f2a:	9800      	ldr	r0, [sp, #0]
   25f2c:	9901      	ldr	r1, [sp, #4]
   25f2e:	f000 fcbb 	bl	268a8 <__aeabi_dcmple>
   25f32:	2800      	cmp	r0, #0
   25f34:	d100      	bne.n	25f38 <__ieee754_pow+0x838>
   25f36:	e6ee      	b.n	25d16 <__ieee754_pow+0x616>
   25f38:	9806      	ldr	r0, [sp, #24]
   25f3a:	9907      	ldr	r1, [sp, #28]
   25f3c:	4a77      	ldr	r2, [pc, #476]	; (2611c <__ieee754_pow+0xa1c>)
   25f3e:	4b78      	ldr	r3, [pc, #480]	; (26120 <__ieee754_pow+0xa20>)
   25f40:	f002 f83a 	bl	27fb8 <__aeabi_dmul>
   25f44:	4a75      	ldr	r2, [pc, #468]	; (2611c <__ieee754_pow+0xa1c>)
   25f46:	4b76      	ldr	r3, [pc, #472]	; (26120 <__ieee754_pow+0xa20>)
   25f48:	f002 f836 	bl	27fb8 <__aeabi_dmul>
   25f4c:	f7ff fc20 	bl	25790 <__ieee754_pow+0x90>
   25f50:	2300      	movs	r3, #0
   25f52:	4c74      	ldr	r4, [pc, #464]	; (26124 <__ieee754_pow+0xa24>)
   25f54:	9306      	str	r3, [sp, #24]
   25f56:	9407      	str	r4, [sp, #28]
   25f58:	e652      	b.n	25c00 <__ieee754_pow+0x500>
   25f5a:	0002      	movs	r2, r0
   25f5c:	000b      	movs	r3, r1
   25f5e:	2000      	movs	r0, #0
   25f60:	496b      	ldr	r1, [pc, #428]	; (26110 <__ieee754_pow+0xa10>)
   25f62:	f001 fbf5 	bl	27750 <__aeabi_ddiv>
   25f66:	f7ff fc32 	bl	257ce <__ieee754_pow+0xce>
   25f6a:	4653      	mov	r3, sl
   25f6c:	2b00      	cmp	r3, #0
   25f6e:	db00      	blt.n	25f72 <__ieee754_pow+0x872>
   25f70:	e499      	b.n	258a6 <__ieee754_pow+0x1a6>
   25f72:	e454      	b.n	2581e <__ieee754_pow+0x11e>
   25f74:	4b6c      	ldr	r3, [pc, #432]	; (26128 <__ieee754_pow+0xa28>)
   25f76:	429c      	cmp	r4, r3
   25f78:	ddf7      	ble.n	25f6a <__ieee754_pow+0x86a>
   25f7a:	4b65      	ldr	r3, [pc, #404]	; (26110 <__ieee754_pow+0xa10>)
   25f7c:	429c      	cmp	r4, r3
   25f7e:	dd00      	ble.n	25f82 <__ieee754_pow+0x882>
   25f80:	e44a      	b.n	25818 <__ieee754_pow+0x118>
   25f82:	2200      	movs	r2, #0
   25f84:	4b62      	ldr	r3, [pc, #392]	; (26110 <__ieee754_pow+0xa10>)
   25f86:	f002 fa97 	bl	284b8 <__aeabi_dsub>
   25f8a:	22c0      	movs	r2, #192	; 0xc0
   25f8c:	4b67      	ldr	r3, [pc, #412]	; (2612c <__ieee754_pow+0xa2c>)
   25f8e:	05d2      	lsls	r2, r2, #23
   25f90:	0004      	movs	r4, r0
   25f92:	000d      	movs	r5, r1
   25f94:	f002 f810 	bl	27fb8 <__aeabi_dmul>
   25f98:	4a65      	ldr	r2, [pc, #404]	; (26130 <__ieee754_pow+0xa30>)
   25f9a:	0006      	movs	r6, r0
   25f9c:	000f      	movs	r7, r1
   25f9e:	4b65      	ldr	r3, [pc, #404]	; (26134 <__ieee754_pow+0xa34>)
   25fa0:	0020      	movs	r0, r4
   25fa2:	0029      	movs	r1, r5
   25fa4:	f002 f808 	bl	27fb8 <__aeabi_dmul>
   25fa8:	2200      	movs	r2, #0
   25faa:	9002      	str	r0, [sp, #8]
   25fac:	9103      	str	r1, [sp, #12]
   25fae:	4b62      	ldr	r3, [pc, #392]	; (26138 <__ieee754_pow+0xa38>)
   25fb0:	0020      	movs	r0, r4
   25fb2:	0029      	movs	r1, r5
   25fb4:	f002 f800 	bl	27fb8 <__aeabi_dmul>
   25fb8:	0002      	movs	r2, r0
   25fba:	000b      	movs	r3, r1
   25fbc:	485f      	ldr	r0, [pc, #380]	; (2613c <__ieee754_pow+0xa3c>)
   25fbe:	4960      	ldr	r1, [pc, #384]	; (26140 <__ieee754_pow+0xa40>)
   25fc0:	f002 fa7a 	bl	284b8 <__aeabi_dsub>
   25fc4:	0022      	movs	r2, r4
   25fc6:	002b      	movs	r3, r5
   25fc8:	f001 fff6 	bl	27fb8 <__aeabi_dmul>
   25fcc:	0002      	movs	r2, r0
   25fce:	000b      	movs	r3, r1
   25fd0:	2000      	movs	r0, #0
   25fd2:	495c      	ldr	r1, [pc, #368]	; (26144 <__ieee754_pow+0xa44>)
   25fd4:	f002 fa70 	bl	284b8 <__aeabi_dsub>
   25fd8:	0022      	movs	r2, r4
   25fda:	9004      	str	r0, [sp, #16]
   25fdc:	9105      	str	r1, [sp, #20]
   25fde:	002b      	movs	r3, r5
   25fe0:	0020      	movs	r0, r4
   25fe2:	0029      	movs	r1, r5
   25fe4:	f001 ffe8 	bl	27fb8 <__aeabi_dmul>
   25fe8:	0002      	movs	r2, r0
   25fea:	000b      	movs	r3, r1
   25fec:	9804      	ldr	r0, [sp, #16]
   25fee:	9905      	ldr	r1, [sp, #20]
   25ff0:	f001 ffe2 	bl	27fb8 <__aeabi_dmul>
   25ff4:	4a54      	ldr	r2, [pc, #336]	; (26148 <__ieee754_pow+0xa48>)
   25ff6:	4b4d      	ldr	r3, [pc, #308]	; (2612c <__ieee754_pow+0xa2c>)
   25ff8:	f001 ffde 	bl	27fb8 <__aeabi_dmul>
   25ffc:	0002      	movs	r2, r0
   25ffe:	000b      	movs	r3, r1
   26000:	9802      	ldr	r0, [sp, #8]
   26002:	9903      	ldr	r1, [sp, #12]
   26004:	f002 fa58 	bl	284b8 <__aeabi_dsub>
   26008:	0002      	movs	r2, r0
   2600a:	000b      	movs	r3, r1
   2600c:	0004      	movs	r4, r0
   2600e:	000d      	movs	r5, r1
   26010:	0030      	movs	r0, r6
   26012:	0039      	movs	r1, r7
   26014:	f001 f88c 	bl	27130 <__aeabi_dadd>
   26018:	2000      	movs	r0, #0
   2601a:	0032      	movs	r2, r6
   2601c:	003b      	movs	r3, r7
   2601e:	9002      	str	r0, [sp, #8]
   26020:	9103      	str	r1, [sp, #12]
   26022:	f002 fa49 	bl	284b8 <__aeabi_dsub>
   26026:	0002      	movs	r2, r0
   26028:	000b      	movs	r3, r1
   2602a:	0020      	movs	r0, r4
   2602c:	0029      	movs	r1, r5
   2602e:	f002 fa43 	bl	284b8 <__aeabi_dsub>
   26032:	9004      	str	r0, [sp, #16]
   26034:	9105      	str	r1, [sp, #20]
   26036:	e5d9      	b.n	25bec <__ieee754_pow+0x4ec>
   26038:	4a44      	ldr	r2, [pc, #272]	; (2614c <__ieee754_pow+0xa4c>)
   2603a:	4b45      	ldr	r3, [pc, #276]	; (26150 <__ieee754_pow+0xa50>)
   2603c:	9806      	ldr	r0, [sp, #24]
   2603e:	9907      	ldr	r1, [sp, #28]
   26040:	f001 ffba 	bl	27fb8 <__aeabi_dmul>
   26044:	4a41      	ldr	r2, [pc, #260]	; (2614c <__ieee754_pow+0xa4c>)
   26046:	4b42      	ldr	r3, [pc, #264]	; (26150 <__ieee754_pow+0xa50>)
   26048:	f001 ffb6 	bl	27fb8 <__aeabi_dmul>
   2604c:	f7ff fba0 	bl	25790 <__ieee754_pow+0x90>
   26050:	2a00      	cmp	r2, #0
   26052:	d001      	beq.n	26058 <__ieee754_pow+0x958>
   26054:	f7ff fba9 	bl	257aa <__ieee754_pow+0xaa>
   26058:	3214      	adds	r2, #20
   2605a:	1ad3      	subs	r3, r2, r3
   2605c:	002a      	movs	r2, r5
   2605e:	411a      	asrs	r2, r3
   26060:	0011      	movs	r1, r2
   26062:	4099      	lsls	r1, r3
   26064:	428d      	cmp	r5, r1
   26066:	d001      	beq.n	2606c <__ieee754_pow+0x96c>
   26068:	f7ff fb76 	bl	25758 <__ieee754_pow+0x58>
   2606c:	2301      	movs	r3, #1
   2606e:	401a      	ands	r2, r3
   26070:	18db      	adds	r3, r3, r3
   26072:	1a9b      	subs	r3, r3, r2
   26074:	469b      	mov	fp, r3
   26076:	f7ff fb6f 	bl	25758 <__ieee754_pow+0x58>
   2607a:	2200      	movs	r2, #0
   2607c:	4b31      	ldr	r3, [pc, #196]	; (26144 <__ieee754_pow+0xa44>)
   2607e:	4690      	mov	r8, r2
   26080:	4691      	mov	r9, r2
   26082:	459a      	cmp	sl, r3
   26084:	dc00      	bgt.n	26088 <__ieee754_pow+0x988>
   26086:	e67b      	b.n	25d80 <__ieee754_pow+0x680>
   26088:	e645      	b.n	25d16 <__ieee754_pow+0x616>
   2608a:	0002      	movs	r2, r0
   2608c:	000b      	movs	r3, r1
   2608e:	f002 fa13 	bl	284b8 <__aeabi_dsub>
   26092:	0002      	movs	r2, r0
   26094:	000b      	movs	r3, r1
   26096:	f001 fb5b 	bl	27750 <__aeabi_ddiv>
   2609a:	f7ff fb79 	bl	25790 <__ieee754_pow+0x90>
   2609e:	2380      	movs	r3, #128	; 0x80
   260a0:	4c2c      	ldr	r4, [pc, #176]	; (26154 <__ieee754_pow+0xa54>)
   260a2:	05db      	lsls	r3, r3, #23
   260a4:	9308      	str	r3, [sp, #32]
   260a6:	9409      	str	r4, [sp, #36]	; 0x24
   260a8:	4b2b      	ldr	r3, [pc, #172]	; (26158 <__ieee754_pow+0xa58>)
   260aa:	4c2c      	ldr	r4, [pc, #176]	; (2615c <__ieee754_pow+0xa5c>)
   260ac:	2200      	movs	r2, #0
   260ae:	930c      	str	r3, [sp, #48]	; 0x30
   260b0:	940d      	str	r4, [sp, #52]	; 0x34
   260b2:	2480      	movs	r4, #128	; 0x80
   260b4:	4b2a      	ldr	r3, [pc, #168]	; (26160 <__ieee754_pow+0xa60>)
   260b6:	02e4      	lsls	r4, r4, #11
   260b8:	9206      	str	r2, [sp, #24]
   260ba:	9307      	str	r3, [sp, #28]
   260bc:	e449      	b.n	25952 <__ieee754_pow+0x252>
   260be:	464b      	mov	r3, r9
   260c0:	425b      	negs	r3, r3
   260c2:	4699      	mov	r9, r3
   260c4:	e64a      	b.n	25d5c <__ieee754_pow+0x65c>
   260c6:	46c0      	nop			; (mov r8, r8)
   260c8:	fffffc02 	.word	0xfffffc02
   260cc:	fffffc01 	.word	0xfffffc01
   260d0:	000fffff 	.word	0x000fffff
   260d4:	3fe62e43 	.word	0x3fe62e43
   260d8:	fefa39ef 	.word	0xfefa39ef
   260dc:	3fe62e42 	.word	0x3fe62e42
   260e0:	0ca86c39 	.word	0x0ca86c39
   260e4:	be205c61 	.word	0xbe205c61
   260e8:	72bea4d0 	.word	0x72bea4d0
   260ec:	3e663769 	.word	0x3e663769
   260f0:	c5d26bf1 	.word	0xc5d26bf1
   260f4:	3ebbbd41 	.word	0x3ebbbd41
   260f8:	af25de2c 	.word	0xaf25de2c
   260fc:	3f11566a 	.word	0x3f11566a
   26100:	16bebd93 	.word	0x16bebd93
   26104:	3f66c16c 	.word	0x3f66c16c
   26108:	5555553e 	.word	0x5555553e
   2610c:	3fc55555 	.word	0x3fc55555
   26110:	3ff00000 	.word	0x3ff00000
   26114:	4090cbff 	.word	0x4090cbff
   26118:	3f6f3400 	.word	0x3f6f3400
   2611c:	c2f8f359 	.word	0xc2f8f359
   26120:	01a56e1f 	.word	0x01a56e1f
   26124:	bff00000 	.word	0xbff00000
   26128:	3feffffe 	.word	0x3feffffe
   2612c:	3ff71547 	.word	0x3ff71547
   26130:	f85ddf44 	.word	0xf85ddf44
   26134:	3e54ae0b 	.word	0x3e54ae0b
   26138:	3fd00000 	.word	0x3fd00000
   2613c:	55555555 	.word	0x55555555
   26140:	3fd55555 	.word	0x3fd55555
   26144:	3fe00000 	.word	0x3fe00000
   26148:	652b82fe 	.word	0x652b82fe
   2614c:	8800759c 	.word	0x8800759c
   26150:	7e37e43c 	.word	0x7e37e43c
   26154:	3fe2b803 	.word	0x3fe2b803
   26158:	43cfd006 	.word	0x43cfd006
   2615c:	3e4cfdeb 	.word	0x3e4cfdeb
   26160:	3ff80000 	.word	0x3ff80000
   26164:	464a      	mov	r2, r9
   26166:	f000 f999 	bl	2649c <scalbn>
   2616a:	e6b2      	b.n	25ed2 <__ieee754_pow+0x7d2>

0002616c <__ieee754_sqrt>:
   2616c:	4b6c      	ldr	r3, [pc, #432]	; (26320 <__ieee754_sqrt+0x1b4>)
   2616e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26170:	000a      	movs	r2, r1
   26172:	4646      	mov	r6, r8
   26174:	000d      	movs	r5, r1
   26176:	46d6      	mov	lr, sl
   26178:	464f      	mov	r7, r9
   2617a:	0019      	movs	r1, r3
   2617c:	b5c0      	push	{r6, r7, lr}
   2617e:	0004      	movs	r4, r0
   26180:	0006      	movs	r6, r0
   26182:	4029      	ands	r1, r5
   26184:	4299      	cmp	r1, r3
   26186:	d100      	bne.n	2618a <__ieee754_sqrt+0x1e>
   26188:	e0a7      	b.n	262da <__ieee754_sqrt+0x16e>
   2618a:	2d00      	cmp	r5, #0
   2618c:	dc00      	bgt.n	26190 <__ieee754_sqrt+0x24>
   2618e:	e081      	b.n	26294 <__ieee754_sqrt+0x128>
   26190:	152f      	asrs	r7, r5, #20
   26192:	d100      	bne.n	26196 <__ieee754_sqrt+0x2a>
   26194:	e08e      	b.n	262b4 <__ieee754_sqrt+0x148>
   26196:	4b63      	ldr	r3, [pc, #396]	; (26324 <__ieee754_sqrt+0x1b8>)
   26198:	0312      	lsls	r2, r2, #12
   2619a:	469c      	mov	ip, r3
   2619c:	2380      	movs	r3, #128	; 0x80
   2619e:	0b12      	lsrs	r2, r2, #12
   261a0:	035b      	lsls	r3, r3, #13
   261a2:	4467      	add	r7, ip
   261a4:	431a      	orrs	r2, r3
   261a6:	07fb      	lsls	r3, r7, #31
   261a8:	d468      	bmi.n	2627c <__ieee754_sqrt+0x110>
   261aa:	107b      	asrs	r3, r7, #1
   261ac:	469c      	mov	ip, r3
   261ae:	0fe3      	lsrs	r3, r4, #31
   261b0:	189b      	adds	r3, r3, r2
   261b2:	189b      	adds	r3, r3, r2
   261b4:	2280      	movs	r2, #128	; 0x80
   261b6:	2116      	movs	r1, #22
   261b8:	2600      	movs	r6, #0
   261ba:	2500      	movs	r5, #0
   261bc:	0064      	lsls	r4, r4, #1
   261be:	0392      	lsls	r2, r2, #14
   261c0:	18a8      	adds	r0, r5, r2
   261c2:	4298      	cmp	r0, r3
   261c4:	dc02      	bgt.n	261cc <__ieee754_sqrt+0x60>
   261c6:	1885      	adds	r5, r0, r2
   261c8:	1a1b      	subs	r3, r3, r0
   261ca:	18b6      	adds	r6, r6, r2
   261cc:	0fe0      	lsrs	r0, r4, #31
   261ce:	005b      	lsls	r3, r3, #1
   261d0:	3901      	subs	r1, #1
   261d2:	181b      	adds	r3, r3, r0
   261d4:	0064      	lsls	r4, r4, #1
   261d6:	0852      	lsrs	r2, r2, #1
   261d8:	2900      	cmp	r1, #0
   261da:	d1f1      	bne.n	261c0 <__ieee754_sqrt+0x54>
   261dc:	2200      	movs	r2, #0
   261de:	4692      	mov	sl, r2
   261e0:	4690      	mov	r8, r2
   261e2:	2280      	movs	r2, #128	; 0x80
   261e4:	2020      	movs	r0, #32
   261e6:	0612      	lsls	r2, r2, #24
   261e8:	e009      	b.n	261fe <__ieee754_sqrt+0x92>
   261ea:	42ab      	cmp	r3, r5
   261ec:	d038      	beq.n	26260 <__ieee754_sqrt+0xf4>
   261ee:	0fe1      	lsrs	r1, r4, #31
   261f0:	18c9      	adds	r1, r1, r3
   261f2:	3801      	subs	r0, #1
   261f4:	18cb      	adds	r3, r1, r3
   261f6:	0064      	lsls	r4, r4, #1
   261f8:	0852      	lsrs	r2, r2, #1
   261fa:	2800      	cmp	r0, #0
   261fc:	d018      	beq.n	26230 <__ieee754_sqrt+0xc4>
   261fe:	4641      	mov	r1, r8
   26200:	1851      	adds	r1, r2, r1
   26202:	42ab      	cmp	r3, r5
   26204:	ddf1      	ble.n	261ea <__ieee754_sqrt+0x7e>
   26206:	188f      	adds	r7, r1, r2
   26208:	46b8      	mov	r8, r7
   2620a:	46a9      	mov	r9, r5
   2620c:	2900      	cmp	r1, #0
   2620e:	db30      	blt.n	26272 <__ieee754_sqrt+0x106>
   26210:	1b5b      	subs	r3, r3, r5
   26212:	428c      	cmp	r4, r1
   26214:	41ad      	sbcs	r5, r5
   26216:	426d      	negs	r5, r5
   26218:	1b5b      	subs	r3, r3, r5
   2621a:	1a64      	subs	r4, r4, r1
   2621c:	0fe1      	lsrs	r1, r4, #31
   2621e:	18c9      	adds	r1, r1, r3
   26220:	3801      	subs	r0, #1
   26222:	4492      	add	sl, r2
   26224:	464d      	mov	r5, r9
   26226:	18cb      	adds	r3, r1, r3
   26228:	0064      	lsls	r4, r4, #1
   2622a:	0852      	lsrs	r2, r2, #1
   2622c:	2800      	cmp	r0, #0
   2622e:	d1e6      	bne.n	261fe <__ieee754_sqrt+0x92>
   26230:	4323      	orrs	r3, r4
   26232:	d128      	bne.n	26286 <__ieee754_sqrt+0x11a>
   26234:	4653      	mov	r3, sl
   26236:	085b      	lsrs	r3, r3, #1
   26238:	493b      	ldr	r1, [pc, #236]	; (26328 <__ieee754_sqrt+0x1bc>)
   2623a:	1072      	asrs	r2, r6, #1
   2623c:	4688      	mov	r8, r1
   2623e:	4442      	add	r2, r8
   26240:	07f1      	lsls	r1, r6, #31
   26242:	d502      	bpl.n	2624a <__ieee754_sqrt+0xde>
   26244:	2180      	movs	r1, #128	; 0x80
   26246:	0609      	lsls	r1, r1, #24
   26248:	430b      	orrs	r3, r1
   2624a:	4661      	mov	r1, ip
   2624c:	001e      	movs	r6, r3
   2624e:	050f      	lsls	r7, r1, #20
   26250:	18bd      	adds	r5, r7, r2
   26252:	0030      	movs	r0, r6
   26254:	0029      	movs	r1, r5
   26256:	bc1c      	pop	{r2, r3, r4}
   26258:	4690      	mov	r8, r2
   2625a:	4699      	mov	r9, r3
   2625c:	46a2      	mov	sl, r4
   2625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26260:	42a1      	cmp	r1, r4
   26262:	d8c4      	bhi.n	261ee <__ieee754_sqrt+0x82>
   26264:	188f      	adds	r7, r1, r2
   26266:	46b8      	mov	r8, r7
   26268:	2900      	cmp	r1, #0
   2626a:	db42      	blt.n	262f2 <__ieee754_sqrt+0x186>
   2626c:	4699      	mov	r9, r3
   2626e:	2300      	movs	r3, #0
   26270:	e7d3      	b.n	2621a <__ieee754_sqrt+0xae>
   26272:	2f00      	cmp	r7, #0
   26274:	db2f      	blt.n	262d6 <__ieee754_sqrt+0x16a>
   26276:	1c6f      	adds	r7, r5, #1
   26278:	46b9      	mov	r9, r7
   2627a:	e7c9      	b.n	26210 <__ieee754_sqrt+0xa4>
   2627c:	0fe1      	lsrs	r1, r4, #31
   2627e:	0052      	lsls	r2, r2, #1
   26280:	188a      	adds	r2, r1, r2
   26282:	0064      	lsls	r4, r4, #1
   26284:	e791      	b.n	261aa <__ieee754_sqrt+0x3e>
   26286:	4653      	mov	r3, sl
   26288:	3301      	adds	r3, #1
   2628a:	d035      	beq.n	262f8 <__ieee754_sqrt+0x18c>
   2628c:	4653      	mov	r3, sl
   2628e:	3301      	adds	r3, #1
   26290:	085b      	lsrs	r3, r3, #1
   26292:	e7d1      	b.n	26238 <__ieee754_sqrt+0xcc>
   26294:	006b      	lsls	r3, r5, #1
   26296:	085b      	lsrs	r3, r3, #1
   26298:	4303      	orrs	r3, r0
   2629a:	d0da      	beq.n	26252 <__ieee754_sqrt+0xe6>
   2629c:	2700      	movs	r7, #0
   2629e:	2d00      	cmp	r5, #0
   262a0:	d132      	bne.n	26308 <__ieee754_sqrt+0x19c>
   262a2:	0ae2      	lsrs	r2, r4, #11
   262a4:	3f15      	subs	r7, #21
   262a6:	0564      	lsls	r4, r4, #21
   262a8:	2a00      	cmp	r2, #0
   262aa:	d0fa      	beq.n	262a2 <__ieee754_sqrt+0x136>
   262ac:	2380      	movs	r3, #128	; 0x80
   262ae:	035b      	lsls	r3, r3, #13
   262b0:	421a      	tst	r2, r3
   262b2:	d124      	bne.n	262fe <__ieee754_sqrt+0x192>
   262b4:	2080      	movs	r0, #128	; 0x80
   262b6:	2300      	movs	r3, #0
   262b8:	0340      	lsls	r0, r0, #13
   262ba:	e000      	b.n	262be <__ieee754_sqrt+0x152>
   262bc:	000b      	movs	r3, r1
   262be:	0052      	lsls	r2, r2, #1
   262c0:	1c59      	adds	r1, r3, #1
   262c2:	4202      	tst	r2, r0
   262c4:	d0fa      	beq.n	262bc <__ieee754_sqrt+0x150>
   262c6:	2020      	movs	r0, #32
   262c8:	1a40      	subs	r0, r0, r1
   262ca:	1aff      	subs	r7, r7, r3
   262cc:	0023      	movs	r3, r4
   262ce:	40c3      	lsrs	r3, r0
   262d0:	408c      	lsls	r4, r1
   262d2:	431a      	orrs	r2, r3
   262d4:	e75f      	b.n	26196 <__ieee754_sqrt+0x2a>
   262d6:	46a9      	mov	r9, r5
   262d8:	e79a      	b.n	26210 <__ieee754_sqrt+0xa4>
   262da:	002b      	movs	r3, r5
   262dc:	0002      	movs	r2, r0
   262de:	0029      	movs	r1, r5
   262e0:	f001 fe6a 	bl	27fb8 <__aeabi_dmul>
   262e4:	0032      	movs	r2, r6
   262e6:	002b      	movs	r3, r5
   262e8:	f000 ff22 	bl	27130 <__aeabi_dadd>
   262ec:	0006      	movs	r6, r0
   262ee:	000d      	movs	r5, r1
   262f0:	e7af      	b.n	26252 <__ieee754_sqrt+0xe6>
   262f2:	2f00      	cmp	r7, #0
   262f4:	dabf      	bge.n	26276 <__ieee754_sqrt+0x10a>
   262f6:	e7b9      	b.n	2626c <__ieee754_sqrt+0x100>
   262f8:	3601      	adds	r6, #1
   262fa:	2300      	movs	r3, #0
   262fc:	e79c      	b.n	26238 <__ieee754_sqrt+0xcc>
   262fe:	2301      	movs	r3, #1
   26300:	2100      	movs	r1, #0
   26302:	2020      	movs	r0, #32
   26304:	425b      	negs	r3, r3
   26306:	e7e0      	b.n	262ca <__ieee754_sqrt+0x15e>
   26308:	002b      	movs	r3, r5
   2630a:	0002      	movs	r2, r0
   2630c:	0029      	movs	r1, r5
   2630e:	f002 f8d3 	bl	284b8 <__aeabi_dsub>
   26312:	0002      	movs	r2, r0
   26314:	000b      	movs	r3, r1
   26316:	f001 fa1b 	bl	27750 <__aeabi_ddiv>
   2631a:	0006      	movs	r6, r0
   2631c:	000d      	movs	r5, r1
   2631e:	e798      	b.n	26252 <__ieee754_sqrt+0xe6>
   26320:	7ff00000 	.word	0x7ff00000
   26324:	fffffc01 	.word	0xfffffc01
   26328:	3fe00000 	.word	0x3fe00000

0002632c <fabs>:
   2632c:	0049      	lsls	r1, r1, #1
   2632e:	084b      	lsrs	r3, r1, #1
   26330:	0019      	movs	r1, r3
   26332:	4770      	bx	lr

00026334 <finite>:
   26334:	4b03      	ldr	r3, [pc, #12]	; (26344 <finite+0x10>)
   26336:	0048      	lsls	r0, r1, #1
   26338:	469c      	mov	ip, r3
   2633a:	0840      	lsrs	r0, r0, #1
   2633c:	4460      	add	r0, ip
   2633e:	0fc0      	lsrs	r0, r0, #31
   26340:	4770      	bx	lr
   26342:	46c0      	nop			; (mov r8, r8)
   26344:	80100000 	.word	0x80100000

00026348 <matherr>:
   26348:	2000      	movs	r0, #0
   2634a:	4770      	bx	lr

0002634c <nan>:
   2634c:	2000      	movs	r0, #0
   2634e:	4901      	ldr	r1, [pc, #4]	; (26354 <nan+0x8>)
   26350:	4770      	bx	lr
   26352:	46c0      	nop			; (mov r8, r8)
   26354:	7ff80000 	.word	0x7ff80000

00026358 <rint>:
   26358:	b5f0      	push	{r4, r5, r6, r7, lr}
   2635a:	46c6      	mov	lr, r8
   2635c:	b500      	push	{lr}
   2635e:	0fcb      	lsrs	r3, r1, #31
   26360:	4698      	mov	r8, r3
   26362:	4c4a      	ldr	r4, [pc, #296]	; (2648c <rint+0x134>)
   26364:	004b      	lsls	r3, r1, #1
   26366:	0d5b      	lsrs	r3, r3, #21
   26368:	191e      	adds	r6, r3, r4
   2636a:	b082      	sub	sp, #8
   2636c:	0007      	movs	r7, r0
   2636e:	000a      	movs	r2, r1
   26370:	2e13      	cmp	r6, #19
   26372:	dc35      	bgt.n	263e0 <rint+0x88>
   26374:	2e00      	cmp	r6, #0
   26376:	db57      	blt.n	26428 <rint+0xd0>
   26378:	4b45      	ldr	r3, [pc, #276]	; (26490 <rint+0x138>)
   2637a:	0004      	movs	r4, r0
   2637c:	4133      	asrs	r3, r6
   2637e:	001f      	movs	r7, r3
   26380:	400f      	ands	r7, r1
   26382:	4307      	orrs	r7, r0
   26384:	000d      	movs	r5, r1
   26386:	2f00      	cmp	r7, #0
   26388:	d024      	beq.n	263d4 <rint+0x7c>
   2638a:	085b      	lsrs	r3, r3, #1
   2638c:	001c      	movs	r4, r3
   2638e:	400c      	ands	r4, r1
   26390:	4320      	orrs	r0, r4
   26392:	2700      	movs	r7, #0
   26394:	2800      	cmp	r0, #0
   26396:	d007      	beq.n	263a8 <rint+0x50>
   26398:	2e13      	cmp	r6, #19
   2639a:	d100      	bne.n	2639e <rint+0x46>
   2639c:	e073      	b.n	26486 <rint+0x12e>
   2639e:	2280      	movs	r2, #128	; 0x80
   263a0:	02d2      	lsls	r2, r2, #11
   263a2:	4132      	asrs	r2, r6
   263a4:	4399      	bics	r1, r3
   263a6:	430a      	orrs	r2, r1
   263a8:	4643      	mov	r3, r8
   263aa:	00de      	lsls	r6, r3, #3
   263ac:	4b39      	ldr	r3, [pc, #228]	; (26494 <rint+0x13c>)
   263ae:	0011      	movs	r1, r2
   263b0:	199e      	adds	r6, r3, r6
   263b2:	6834      	ldr	r4, [r6, #0]
   263b4:	6875      	ldr	r5, [r6, #4]
   263b6:	0038      	movs	r0, r7
   263b8:	0022      	movs	r2, r4
   263ba:	002b      	movs	r3, r5
   263bc:	f000 feb8 	bl	27130 <__aeabi_dadd>
   263c0:	9000      	str	r0, [sp, #0]
   263c2:	9101      	str	r1, [sp, #4]
   263c4:	9800      	ldr	r0, [sp, #0]
   263c6:	9901      	ldr	r1, [sp, #4]
   263c8:	0022      	movs	r2, r4
   263ca:	002b      	movs	r3, r5
   263cc:	f002 f874 	bl	284b8 <__aeabi_dsub>
   263d0:	0004      	movs	r4, r0
   263d2:	000d      	movs	r5, r1
   263d4:	0020      	movs	r0, r4
   263d6:	0029      	movs	r1, r5
   263d8:	b002      	add	sp, #8
   263da:	bc04      	pop	{r2}
   263dc:	4690      	mov	r8, r2
   263de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   263e0:	2e33      	cmp	r6, #51	; 0x33
   263e2:	dd0c      	ble.n	263fe <rint+0xa6>
   263e4:	2380      	movs	r3, #128	; 0x80
   263e6:	0004      	movs	r4, r0
   263e8:	00db      	lsls	r3, r3, #3
   263ea:	000d      	movs	r5, r1
   263ec:	429e      	cmp	r6, r3
   263ee:	d1f1      	bne.n	263d4 <rint+0x7c>
   263f0:	0002      	movs	r2, r0
   263f2:	000b      	movs	r3, r1
   263f4:	f000 fe9c 	bl	27130 <__aeabi_dadd>
   263f8:	0004      	movs	r4, r0
   263fa:	000d      	movs	r5, r1
   263fc:	e7ea      	b.n	263d4 <rint+0x7c>
   263fe:	4c26      	ldr	r4, [pc, #152]	; (26498 <rint+0x140>)
   26400:	000d      	movs	r5, r1
   26402:	46a4      	mov	ip, r4
   26404:	2401      	movs	r4, #1
   26406:	4463      	add	r3, ip
   26408:	4264      	negs	r4, r4
   2640a:	40dc      	lsrs	r4, r3
   2640c:	46a4      	mov	ip, r4
   2640e:	4661      	mov	r1, ip
   26410:	0004      	movs	r4, r0
   26412:	4201      	tst	r1, r0
   26414:	d0de      	beq.n	263d4 <rint+0x7c>
   26416:	0849      	lsrs	r1, r1, #1
   26418:	4201      	tst	r1, r0
   2641a:	d0c5      	beq.n	263a8 <rint+0x50>
   2641c:	2780      	movs	r7, #128	; 0x80
   2641e:	05ff      	lsls	r7, r7, #23
   26420:	411f      	asrs	r7, r3
   26422:	4388      	bics	r0, r1
   26424:	4307      	orrs	r7, r0
   26426:	e7bf      	b.n	263a8 <rint+0x50>
   26428:	004b      	lsls	r3, r1, #1
   2642a:	085b      	lsrs	r3, r3, #1
   2642c:	4303      	orrs	r3, r0
   2642e:	0004      	movs	r4, r0
   26430:	000d      	movs	r5, r1
   26432:	2b00      	cmp	r3, #0
   26434:	d0ce      	beq.n	263d4 <rint+0x7c>
   26436:	030b      	lsls	r3, r1, #12
   26438:	0b1b      	lsrs	r3, r3, #12
   2643a:	4303      	orrs	r3, r0
   2643c:	001a      	movs	r2, r3
   2643e:	425b      	negs	r3, r3
   26440:	4313      	orrs	r3, r2
   26442:	2280      	movs	r2, #128	; 0x80
   26444:	0b1b      	lsrs	r3, r3, #12
   26446:	0312      	lsls	r2, r2, #12
   26448:	4013      	ands	r3, r2
   2644a:	0c4a      	lsrs	r2, r1, #17
   2644c:	0452      	lsls	r2, r2, #17
   2644e:	4313      	orrs	r3, r2
   26450:	0019      	movs	r1, r3
   26452:	4643      	mov	r3, r8
   26454:	00da      	lsls	r2, r3, #3
   26456:	4b0f      	ldr	r3, [pc, #60]	; (26494 <rint+0x13c>)
   26458:	189b      	adds	r3, r3, r2
   2645a:	681c      	ldr	r4, [r3, #0]
   2645c:	685d      	ldr	r5, [r3, #4]
   2645e:	0022      	movs	r2, r4
   26460:	002b      	movs	r3, r5
   26462:	f000 fe65 	bl	27130 <__aeabi_dadd>
   26466:	9000      	str	r0, [sp, #0]
   26468:	9101      	str	r1, [sp, #4]
   2646a:	9800      	ldr	r0, [sp, #0]
   2646c:	9901      	ldr	r1, [sp, #4]
   2646e:	0022      	movs	r2, r4
   26470:	002b      	movs	r3, r5
   26472:	f002 f821 	bl	284b8 <__aeabi_dsub>
   26476:	4642      	mov	r2, r8
   26478:	004b      	lsls	r3, r1, #1
   2647a:	085b      	lsrs	r3, r3, #1
   2647c:	07d6      	lsls	r6, r2, #31
   2647e:	4333      	orrs	r3, r6
   26480:	0004      	movs	r4, r0
   26482:	001d      	movs	r5, r3
   26484:	e7a6      	b.n	263d4 <rint+0x7c>
   26486:	2780      	movs	r7, #128	; 0x80
   26488:	063f      	lsls	r7, r7, #24
   2648a:	e788      	b.n	2639e <rint+0x46>
   2648c:	fffffc01 	.word	0xfffffc01
   26490:	000fffff 	.word	0x000fffff
   26494:	0002ad58 	.word	0x0002ad58
   26498:	fffffbed 	.word	0xfffffbed

0002649c <scalbn>:
   2649c:	004b      	lsls	r3, r1, #1
   2649e:	b570      	push	{r4, r5, r6, lr}
   264a0:	0d5b      	lsrs	r3, r3, #21
   264a2:	0014      	movs	r4, r2
   264a4:	000a      	movs	r2, r1
   264a6:	2b00      	cmp	r3, #0
   264a8:	d11a      	bne.n	264e0 <scalbn+0x44>
   264aa:	004b      	lsls	r3, r1, #1
   264ac:	085b      	lsrs	r3, r3, #1
   264ae:	4303      	orrs	r3, r0
   264b0:	d015      	beq.n	264de <scalbn+0x42>
   264b2:	2200      	movs	r2, #0
   264b4:	4b22      	ldr	r3, [pc, #136]	; (26540 <scalbn+0xa4>)
   264b6:	f001 fd7f 	bl	27fb8 <__aeabi_dmul>
   264ba:	4b22      	ldr	r3, [pc, #136]	; (26544 <scalbn+0xa8>)
   264bc:	000a      	movs	r2, r1
   264be:	429c      	cmp	r4, r3
   264c0:	db22      	blt.n	26508 <scalbn+0x6c>
   264c2:	004b      	lsls	r3, r1, #1
   264c4:	0d5b      	lsrs	r3, r3, #21
   264c6:	3b36      	subs	r3, #54	; 0x36
   264c8:	4d1f      	ldr	r5, [pc, #124]	; (26548 <scalbn+0xac>)
   264ca:	18e3      	adds	r3, r4, r3
   264cc:	42ab      	cmp	r3, r5
   264ce:	dc20      	bgt.n	26512 <scalbn+0x76>
   264d0:	2b00      	cmp	r3, #0
   264d2:	dd0d      	ble.n	264f0 <scalbn+0x54>
   264d4:	4c1d      	ldr	r4, [pc, #116]	; (2654c <scalbn+0xb0>)
   264d6:	051b      	lsls	r3, r3, #20
   264d8:	4022      	ands	r2, r4
   264da:	431a      	orrs	r2, r3
   264dc:	0011      	movs	r1, r2
   264de:	bd70      	pop	{r4, r5, r6, pc}
   264e0:	4d1b      	ldr	r5, [pc, #108]	; (26550 <scalbn+0xb4>)
   264e2:	42ab      	cmp	r3, r5
   264e4:	d1f0      	bne.n	264c8 <scalbn+0x2c>
   264e6:	0002      	movs	r2, r0
   264e8:	000b      	movs	r3, r1
   264ea:	f000 fe21 	bl	27130 <__aeabi_dadd>
   264ee:	e7f6      	b.n	264de <scalbn+0x42>
   264f0:	001d      	movs	r5, r3
   264f2:	3535      	adds	r5, #53	; 0x35
   264f4:	da18      	bge.n	26528 <scalbn+0x8c>
   264f6:	4b17      	ldr	r3, [pc, #92]	; (26554 <scalbn+0xb8>)
   264f8:	0002      	movs	r2, r0
   264fa:	429c      	cmp	r4, r3
   264fc:	dc0a      	bgt.n	26514 <scalbn+0x78>
   264fe:	000b      	movs	r3, r1
   26500:	4815      	ldr	r0, [pc, #84]	; (26558 <scalbn+0xbc>)
   26502:	4916      	ldr	r1, [pc, #88]	; (2655c <scalbn+0xc0>)
   26504:	f000 f832 	bl	2656c <copysign>
   26508:	4a13      	ldr	r2, [pc, #76]	; (26558 <scalbn+0xbc>)
   2650a:	4b14      	ldr	r3, [pc, #80]	; (2655c <scalbn+0xc0>)
   2650c:	f001 fd54 	bl	27fb8 <__aeabi_dmul>
   26510:	e7e5      	b.n	264de <scalbn+0x42>
   26512:	0002      	movs	r2, r0
   26514:	000b      	movs	r3, r1
   26516:	4812      	ldr	r0, [pc, #72]	; (26560 <scalbn+0xc4>)
   26518:	4912      	ldr	r1, [pc, #72]	; (26564 <scalbn+0xc8>)
   2651a:	f000 f827 	bl	2656c <copysign>
   2651e:	4a10      	ldr	r2, [pc, #64]	; (26560 <scalbn+0xc4>)
   26520:	4b10      	ldr	r3, [pc, #64]	; (26564 <scalbn+0xc8>)
   26522:	f001 fd49 	bl	27fb8 <__aeabi_dmul>
   26526:	e7da      	b.n	264de <scalbn+0x42>
   26528:	4c08      	ldr	r4, [pc, #32]	; (2654c <scalbn+0xb0>)
   2652a:	3336      	adds	r3, #54	; 0x36
   2652c:	4022      	ands	r2, r4
   2652e:	051b      	lsls	r3, r3, #20
   26530:	4313      	orrs	r3, r2
   26532:	0019      	movs	r1, r3
   26534:	2200      	movs	r2, #0
   26536:	4b0c      	ldr	r3, [pc, #48]	; (26568 <scalbn+0xcc>)
   26538:	f001 fd3e 	bl	27fb8 <__aeabi_dmul>
   2653c:	e7cf      	b.n	264de <scalbn+0x42>
   2653e:	46c0      	nop			; (mov r8, r8)
   26540:	43500000 	.word	0x43500000
   26544:	ffff3cb0 	.word	0xffff3cb0
   26548:	000007fe 	.word	0x000007fe
   2654c:	800fffff 	.word	0x800fffff
   26550:	000007ff 	.word	0x000007ff
   26554:	0000c350 	.word	0x0000c350
   26558:	c2f8f359 	.word	0xc2f8f359
   2655c:	01a56e1f 	.word	0x01a56e1f
   26560:	8800759c 	.word	0x8800759c
   26564:	7e37e43c 	.word	0x7e37e43c
   26568:	3c900000 	.word	0x3c900000

0002656c <copysign>:
   2656c:	b530      	push	{r4, r5, lr}
   2656e:	004a      	lsls	r2, r1, #1
   26570:	0fdb      	lsrs	r3, r3, #31
   26572:	07db      	lsls	r3, r3, #31
   26574:	0852      	lsrs	r2, r2, #1
   26576:	431a      	orrs	r2, r3
   26578:	0011      	movs	r1, r2
   2657a:	bd30      	pop	{r4, r5, pc}

0002657c <__udivsi3>:
   2657c:	2200      	movs	r2, #0
   2657e:	0843      	lsrs	r3, r0, #1
   26580:	428b      	cmp	r3, r1
   26582:	d374      	bcc.n	2666e <__udivsi3+0xf2>
   26584:	0903      	lsrs	r3, r0, #4
   26586:	428b      	cmp	r3, r1
   26588:	d35f      	bcc.n	2664a <__udivsi3+0xce>
   2658a:	0a03      	lsrs	r3, r0, #8
   2658c:	428b      	cmp	r3, r1
   2658e:	d344      	bcc.n	2661a <__udivsi3+0x9e>
   26590:	0b03      	lsrs	r3, r0, #12
   26592:	428b      	cmp	r3, r1
   26594:	d328      	bcc.n	265e8 <__udivsi3+0x6c>
   26596:	0c03      	lsrs	r3, r0, #16
   26598:	428b      	cmp	r3, r1
   2659a:	d30d      	bcc.n	265b8 <__udivsi3+0x3c>
   2659c:	22ff      	movs	r2, #255	; 0xff
   2659e:	0209      	lsls	r1, r1, #8
   265a0:	ba12      	rev	r2, r2
   265a2:	0c03      	lsrs	r3, r0, #16
   265a4:	428b      	cmp	r3, r1
   265a6:	d302      	bcc.n	265ae <__udivsi3+0x32>
   265a8:	1212      	asrs	r2, r2, #8
   265aa:	0209      	lsls	r1, r1, #8
   265ac:	d065      	beq.n	2667a <__udivsi3+0xfe>
   265ae:	0b03      	lsrs	r3, r0, #12
   265b0:	428b      	cmp	r3, r1
   265b2:	d319      	bcc.n	265e8 <__udivsi3+0x6c>
   265b4:	e000      	b.n	265b8 <__udivsi3+0x3c>
   265b6:	0a09      	lsrs	r1, r1, #8
   265b8:	0bc3      	lsrs	r3, r0, #15
   265ba:	428b      	cmp	r3, r1
   265bc:	d301      	bcc.n	265c2 <__udivsi3+0x46>
   265be:	03cb      	lsls	r3, r1, #15
   265c0:	1ac0      	subs	r0, r0, r3
   265c2:	4152      	adcs	r2, r2
   265c4:	0b83      	lsrs	r3, r0, #14
   265c6:	428b      	cmp	r3, r1
   265c8:	d301      	bcc.n	265ce <__udivsi3+0x52>
   265ca:	038b      	lsls	r3, r1, #14
   265cc:	1ac0      	subs	r0, r0, r3
   265ce:	4152      	adcs	r2, r2
   265d0:	0b43      	lsrs	r3, r0, #13
   265d2:	428b      	cmp	r3, r1
   265d4:	d301      	bcc.n	265da <__udivsi3+0x5e>
   265d6:	034b      	lsls	r3, r1, #13
   265d8:	1ac0      	subs	r0, r0, r3
   265da:	4152      	adcs	r2, r2
   265dc:	0b03      	lsrs	r3, r0, #12
   265de:	428b      	cmp	r3, r1
   265e0:	d301      	bcc.n	265e6 <__udivsi3+0x6a>
   265e2:	030b      	lsls	r3, r1, #12
   265e4:	1ac0      	subs	r0, r0, r3
   265e6:	4152      	adcs	r2, r2
   265e8:	0ac3      	lsrs	r3, r0, #11
   265ea:	428b      	cmp	r3, r1
   265ec:	d301      	bcc.n	265f2 <__udivsi3+0x76>
   265ee:	02cb      	lsls	r3, r1, #11
   265f0:	1ac0      	subs	r0, r0, r3
   265f2:	4152      	adcs	r2, r2
   265f4:	0a83      	lsrs	r3, r0, #10
   265f6:	428b      	cmp	r3, r1
   265f8:	d301      	bcc.n	265fe <__udivsi3+0x82>
   265fa:	028b      	lsls	r3, r1, #10
   265fc:	1ac0      	subs	r0, r0, r3
   265fe:	4152      	adcs	r2, r2
   26600:	0a43      	lsrs	r3, r0, #9
   26602:	428b      	cmp	r3, r1
   26604:	d301      	bcc.n	2660a <__udivsi3+0x8e>
   26606:	024b      	lsls	r3, r1, #9
   26608:	1ac0      	subs	r0, r0, r3
   2660a:	4152      	adcs	r2, r2
   2660c:	0a03      	lsrs	r3, r0, #8
   2660e:	428b      	cmp	r3, r1
   26610:	d301      	bcc.n	26616 <__udivsi3+0x9a>
   26612:	020b      	lsls	r3, r1, #8
   26614:	1ac0      	subs	r0, r0, r3
   26616:	4152      	adcs	r2, r2
   26618:	d2cd      	bcs.n	265b6 <__udivsi3+0x3a>
   2661a:	09c3      	lsrs	r3, r0, #7
   2661c:	428b      	cmp	r3, r1
   2661e:	d301      	bcc.n	26624 <__udivsi3+0xa8>
   26620:	01cb      	lsls	r3, r1, #7
   26622:	1ac0      	subs	r0, r0, r3
   26624:	4152      	adcs	r2, r2
   26626:	0983      	lsrs	r3, r0, #6
   26628:	428b      	cmp	r3, r1
   2662a:	d301      	bcc.n	26630 <__udivsi3+0xb4>
   2662c:	018b      	lsls	r3, r1, #6
   2662e:	1ac0      	subs	r0, r0, r3
   26630:	4152      	adcs	r2, r2
   26632:	0943      	lsrs	r3, r0, #5
   26634:	428b      	cmp	r3, r1
   26636:	d301      	bcc.n	2663c <__udivsi3+0xc0>
   26638:	014b      	lsls	r3, r1, #5
   2663a:	1ac0      	subs	r0, r0, r3
   2663c:	4152      	adcs	r2, r2
   2663e:	0903      	lsrs	r3, r0, #4
   26640:	428b      	cmp	r3, r1
   26642:	d301      	bcc.n	26648 <__udivsi3+0xcc>
   26644:	010b      	lsls	r3, r1, #4
   26646:	1ac0      	subs	r0, r0, r3
   26648:	4152      	adcs	r2, r2
   2664a:	08c3      	lsrs	r3, r0, #3
   2664c:	428b      	cmp	r3, r1
   2664e:	d301      	bcc.n	26654 <__udivsi3+0xd8>
   26650:	00cb      	lsls	r3, r1, #3
   26652:	1ac0      	subs	r0, r0, r3
   26654:	4152      	adcs	r2, r2
   26656:	0883      	lsrs	r3, r0, #2
   26658:	428b      	cmp	r3, r1
   2665a:	d301      	bcc.n	26660 <__udivsi3+0xe4>
   2665c:	008b      	lsls	r3, r1, #2
   2665e:	1ac0      	subs	r0, r0, r3
   26660:	4152      	adcs	r2, r2
   26662:	0843      	lsrs	r3, r0, #1
   26664:	428b      	cmp	r3, r1
   26666:	d301      	bcc.n	2666c <__udivsi3+0xf0>
   26668:	004b      	lsls	r3, r1, #1
   2666a:	1ac0      	subs	r0, r0, r3
   2666c:	4152      	adcs	r2, r2
   2666e:	1a41      	subs	r1, r0, r1
   26670:	d200      	bcs.n	26674 <__udivsi3+0xf8>
   26672:	4601      	mov	r1, r0
   26674:	4152      	adcs	r2, r2
   26676:	4610      	mov	r0, r2
   26678:	4770      	bx	lr
   2667a:	e7ff      	b.n	2667c <__udivsi3+0x100>
   2667c:	b501      	push	{r0, lr}
   2667e:	2000      	movs	r0, #0
   26680:	f000 f8f0 	bl	26864 <__aeabi_idiv0>
   26684:	bd02      	pop	{r1, pc}
   26686:	46c0      	nop			; (mov r8, r8)

00026688 <__aeabi_uidivmod>:
   26688:	2900      	cmp	r1, #0
   2668a:	d0f7      	beq.n	2667c <__udivsi3+0x100>
   2668c:	e776      	b.n	2657c <__udivsi3>
   2668e:	4770      	bx	lr

00026690 <__divsi3>:
   26690:	4603      	mov	r3, r0
   26692:	430b      	orrs	r3, r1
   26694:	d47f      	bmi.n	26796 <__divsi3+0x106>
   26696:	2200      	movs	r2, #0
   26698:	0843      	lsrs	r3, r0, #1
   2669a:	428b      	cmp	r3, r1
   2669c:	d374      	bcc.n	26788 <__divsi3+0xf8>
   2669e:	0903      	lsrs	r3, r0, #4
   266a0:	428b      	cmp	r3, r1
   266a2:	d35f      	bcc.n	26764 <__divsi3+0xd4>
   266a4:	0a03      	lsrs	r3, r0, #8
   266a6:	428b      	cmp	r3, r1
   266a8:	d344      	bcc.n	26734 <__divsi3+0xa4>
   266aa:	0b03      	lsrs	r3, r0, #12
   266ac:	428b      	cmp	r3, r1
   266ae:	d328      	bcc.n	26702 <__divsi3+0x72>
   266b0:	0c03      	lsrs	r3, r0, #16
   266b2:	428b      	cmp	r3, r1
   266b4:	d30d      	bcc.n	266d2 <__divsi3+0x42>
   266b6:	22ff      	movs	r2, #255	; 0xff
   266b8:	0209      	lsls	r1, r1, #8
   266ba:	ba12      	rev	r2, r2
   266bc:	0c03      	lsrs	r3, r0, #16
   266be:	428b      	cmp	r3, r1
   266c0:	d302      	bcc.n	266c8 <__divsi3+0x38>
   266c2:	1212      	asrs	r2, r2, #8
   266c4:	0209      	lsls	r1, r1, #8
   266c6:	d065      	beq.n	26794 <__divsi3+0x104>
   266c8:	0b03      	lsrs	r3, r0, #12
   266ca:	428b      	cmp	r3, r1
   266cc:	d319      	bcc.n	26702 <__divsi3+0x72>
   266ce:	e000      	b.n	266d2 <__divsi3+0x42>
   266d0:	0a09      	lsrs	r1, r1, #8
   266d2:	0bc3      	lsrs	r3, r0, #15
   266d4:	428b      	cmp	r3, r1
   266d6:	d301      	bcc.n	266dc <__divsi3+0x4c>
   266d8:	03cb      	lsls	r3, r1, #15
   266da:	1ac0      	subs	r0, r0, r3
   266dc:	4152      	adcs	r2, r2
   266de:	0b83      	lsrs	r3, r0, #14
   266e0:	428b      	cmp	r3, r1
   266e2:	d301      	bcc.n	266e8 <__divsi3+0x58>
   266e4:	038b      	lsls	r3, r1, #14
   266e6:	1ac0      	subs	r0, r0, r3
   266e8:	4152      	adcs	r2, r2
   266ea:	0b43      	lsrs	r3, r0, #13
   266ec:	428b      	cmp	r3, r1
   266ee:	d301      	bcc.n	266f4 <__divsi3+0x64>
   266f0:	034b      	lsls	r3, r1, #13
   266f2:	1ac0      	subs	r0, r0, r3
   266f4:	4152      	adcs	r2, r2
   266f6:	0b03      	lsrs	r3, r0, #12
   266f8:	428b      	cmp	r3, r1
   266fa:	d301      	bcc.n	26700 <__divsi3+0x70>
   266fc:	030b      	lsls	r3, r1, #12
   266fe:	1ac0      	subs	r0, r0, r3
   26700:	4152      	adcs	r2, r2
   26702:	0ac3      	lsrs	r3, r0, #11
   26704:	428b      	cmp	r3, r1
   26706:	d301      	bcc.n	2670c <__divsi3+0x7c>
   26708:	02cb      	lsls	r3, r1, #11
   2670a:	1ac0      	subs	r0, r0, r3
   2670c:	4152      	adcs	r2, r2
   2670e:	0a83      	lsrs	r3, r0, #10
   26710:	428b      	cmp	r3, r1
   26712:	d301      	bcc.n	26718 <__divsi3+0x88>
   26714:	028b      	lsls	r3, r1, #10
   26716:	1ac0      	subs	r0, r0, r3
   26718:	4152      	adcs	r2, r2
   2671a:	0a43      	lsrs	r3, r0, #9
   2671c:	428b      	cmp	r3, r1
   2671e:	d301      	bcc.n	26724 <__divsi3+0x94>
   26720:	024b      	lsls	r3, r1, #9
   26722:	1ac0      	subs	r0, r0, r3
   26724:	4152      	adcs	r2, r2
   26726:	0a03      	lsrs	r3, r0, #8
   26728:	428b      	cmp	r3, r1
   2672a:	d301      	bcc.n	26730 <__divsi3+0xa0>
   2672c:	020b      	lsls	r3, r1, #8
   2672e:	1ac0      	subs	r0, r0, r3
   26730:	4152      	adcs	r2, r2
   26732:	d2cd      	bcs.n	266d0 <__divsi3+0x40>
   26734:	09c3      	lsrs	r3, r0, #7
   26736:	428b      	cmp	r3, r1
   26738:	d301      	bcc.n	2673e <__divsi3+0xae>
   2673a:	01cb      	lsls	r3, r1, #7
   2673c:	1ac0      	subs	r0, r0, r3
   2673e:	4152      	adcs	r2, r2
   26740:	0983      	lsrs	r3, r0, #6
   26742:	428b      	cmp	r3, r1
   26744:	d301      	bcc.n	2674a <__divsi3+0xba>
   26746:	018b      	lsls	r3, r1, #6
   26748:	1ac0      	subs	r0, r0, r3
   2674a:	4152      	adcs	r2, r2
   2674c:	0943      	lsrs	r3, r0, #5
   2674e:	428b      	cmp	r3, r1
   26750:	d301      	bcc.n	26756 <__divsi3+0xc6>
   26752:	014b      	lsls	r3, r1, #5
   26754:	1ac0      	subs	r0, r0, r3
   26756:	4152      	adcs	r2, r2
   26758:	0903      	lsrs	r3, r0, #4
   2675a:	428b      	cmp	r3, r1
   2675c:	d301      	bcc.n	26762 <__divsi3+0xd2>
   2675e:	010b      	lsls	r3, r1, #4
   26760:	1ac0      	subs	r0, r0, r3
   26762:	4152      	adcs	r2, r2
   26764:	08c3      	lsrs	r3, r0, #3
   26766:	428b      	cmp	r3, r1
   26768:	d301      	bcc.n	2676e <__divsi3+0xde>
   2676a:	00cb      	lsls	r3, r1, #3
   2676c:	1ac0      	subs	r0, r0, r3
   2676e:	4152      	adcs	r2, r2
   26770:	0883      	lsrs	r3, r0, #2
   26772:	428b      	cmp	r3, r1
   26774:	d301      	bcc.n	2677a <__divsi3+0xea>
   26776:	008b      	lsls	r3, r1, #2
   26778:	1ac0      	subs	r0, r0, r3
   2677a:	4152      	adcs	r2, r2
   2677c:	0843      	lsrs	r3, r0, #1
   2677e:	428b      	cmp	r3, r1
   26780:	d301      	bcc.n	26786 <__divsi3+0xf6>
   26782:	004b      	lsls	r3, r1, #1
   26784:	1ac0      	subs	r0, r0, r3
   26786:	4152      	adcs	r2, r2
   26788:	1a41      	subs	r1, r0, r1
   2678a:	d200      	bcs.n	2678e <__divsi3+0xfe>
   2678c:	4601      	mov	r1, r0
   2678e:	4152      	adcs	r2, r2
   26790:	4610      	mov	r0, r2
   26792:	4770      	bx	lr
   26794:	e05d      	b.n	26852 <__divsi3+0x1c2>
   26796:	0fca      	lsrs	r2, r1, #31
   26798:	d000      	beq.n	2679c <__divsi3+0x10c>
   2679a:	4249      	negs	r1, r1
   2679c:	1003      	asrs	r3, r0, #32
   2679e:	d300      	bcc.n	267a2 <__divsi3+0x112>
   267a0:	4240      	negs	r0, r0
   267a2:	4053      	eors	r3, r2
   267a4:	2200      	movs	r2, #0
   267a6:	469c      	mov	ip, r3
   267a8:	0903      	lsrs	r3, r0, #4
   267aa:	428b      	cmp	r3, r1
   267ac:	d32d      	bcc.n	2680a <__divsi3+0x17a>
   267ae:	0a03      	lsrs	r3, r0, #8
   267b0:	428b      	cmp	r3, r1
   267b2:	d312      	bcc.n	267da <__divsi3+0x14a>
   267b4:	22fc      	movs	r2, #252	; 0xfc
   267b6:	0189      	lsls	r1, r1, #6
   267b8:	ba12      	rev	r2, r2
   267ba:	0a03      	lsrs	r3, r0, #8
   267bc:	428b      	cmp	r3, r1
   267be:	d30c      	bcc.n	267da <__divsi3+0x14a>
   267c0:	0189      	lsls	r1, r1, #6
   267c2:	1192      	asrs	r2, r2, #6
   267c4:	428b      	cmp	r3, r1
   267c6:	d308      	bcc.n	267da <__divsi3+0x14a>
   267c8:	0189      	lsls	r1, r1, #6
   267ca:	1192      	asrs	r2, r2, #6
   267cc:	428b      	cmp	r3, r1
   267ce:	d304      	bcc.n	267da <__divsi3+0x14a>
   267d0:	0189      	lsls	r1, r1, #6
   267d2:	d03a      	beq.n	2684a <__divsi3+0x1ba>
   267d4:	1192      	asrs	r2, r2, #6
   267d6:	e000      	b.n	267da <__divsi3+0x14a>
   267d8:	0989      	lsrs	r1, r1, #6
   267da:	09c3      	lsrs	r3, r0, #7
   267dc:	428b      	cmp	r3, r1
   267de:	d301      	bcc.n	267e4 <__divsi3+0x154>
   267e0:	01cb      	lsls	r3, r1, #7
   267e2:	1ac0      	subs	r0, r0, r3
   267e4:	4152      	adcs	r2, r2
   267e6:	0983      	lsrs	r3, r0, #6
   267e8:	428b      	cmp	r3, r1
   267ea:	d301      	bcc.n	267f0 <__divsi3+0x160>
   267ec:	018b      	lsls	r3, r1, #6
   267ee:	1ac0      	subs	r0, r0, r3
   267f0:	4152      	adcs	r2, r2
   267f2:	0943      	lsrs	r3, r0, #5
   267f4:	428b      	cmp	r3, r1
   267f6:	d301      	bcc.n	267fc <__divsi3+0x16c>
   267f8:	014b      	lsls	r3, r1, #5
   267fa:	1ac0      	subs	r0, r0, r3
   267fc:	4152      	adcs	r2, r2
   267fe:	0903      	lsrs	r3, r0, #4
   26800:	428b      	cmp	r3, r1
   26802:	d301      	bcc.n	26808 <__divsi3+0x178>
   26804:	010b      	lsls	r3, r1, #4
   26806:	1ac0      	subs	r0, r0, r3
   26808:	4152      	adcs	r2, r2
   2680a:	08c3      	lsrs	r3, r0, #3
   2680c:	428b      	cmp	r3, r1
   2680e:	d301      	bcc.n	26814 <__divsi3+0x184>
   26810:	00cb      	lsls	r3, r1, #3
   26812:	1ac0      	subs	r0, r0, r3
   26814:	4152      	adcs	r2, r2
   26816:	0883      	lsrs	r3, r0, #2
   26818:	428b      	cmp	r3, r1
   2681a:	d301      	bcc.n	26820 <__divsi3+0x190>
   2681c:	008b      	lsls	r3, r1, #2
   2681e:	1ac0      	subs	r0, r0, r3
   26820:	4152      	adcs	r2, r2
   26822:	d2d9      	bcs.n	267d8 <__divsi3+0x148>
   26824:	0843      	lsrs	r3, r0, #1
   26826:	428b      	cmp	r3, r1
   26828:	d301      	bcc.n	2682e <__divsi3+0x19e>
   2682a:	004b      	lsls	r3, r1, #1
   2682c:	1ac0      	subs	r0, r0, r3
   2682e:	4152      	adcs	r2, r2
   26830:	1a41      	subs	r1, r0, r1
   26832:	d200      	bcs.n	26836 <__divsi3+0x1a6>
   26834:	4601      	mov	r1, r0
   26836:	4663      	mov	r3, ip
   26838:	4152      	adcs	r2, r2
   2683a:	105b      	asrs	r3, r3, #1
   2683c:	4610      	mov	r0, r2
   2683e:	d301      	bcc.n	26844 <__divsi3+0x1b4>
   26840:	4240      	negs	r0, r0
   26842:	2b00      	cmp	r3, #0
   26844:	d500      	bpl.n	26848 <__divsi3+0x1b8>
   26846:	4249      	negs	r1, r1
   26848:	4770      	bx	lr
   2684a:	4663      	mov	r3, ip
   2684c:	105b      	asrs	r3, r3, #1
   2684e:	d300      	bcc.n	26852 <__divsi3+0x1c2>
   26850:	4240      	negs	r0, r0
   26852:	b501      	push	{r0, lr}
   26854:	2000      	movs	r0, #0
   26856:	f000 f805 	bl	26864 <__aeabi_idiv0>
   2685a:	bd02      	pop	{r1, pc}

0002685c <__aeabi_idivmod>:
   2685c:	2900      	cmp	r1, #0
   2685e:	d0f8      	beq.n	26852 <__divsi3+0x1c2>
   26860:	e716      	b.n	26690 <__divsi3>
   26862:	4770      	bx	lr

00026864 <__aeabi_idiv0>:
   26864:	4770      	bx	lr
   26866:	46c0      	nop			; (mov r8, r8)

00026868 <__aeabi_cdrcmple>:
   26868:	4684      	mov	ip, r0
   2686a:	1c10      	adds	r0, r2, #0
   2686c:	4662      	mov	r2, ip
   2686e:	468c      	mov	ip, r1
   26870:	1c19      	adds	r1, r3, #0
   26872:	4663      	mov	r3, ip
   26874:	e000      	b.n	26878 <__aeabi_cdcmpeq>
   26876:	46c0      	nop			; (mov r8, r8)

00026878 <__aeabi_cdcmpeq>:
   26878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2687a:	f001 fb3b 	bl	27ef4 <__ledf2>
   2687e:	2800      	cmp	r0, #0
   26880:	d401      	bmi.n	26886 <__aeabi_cdcmpeq+0xe>
   26882:	2100      	movs	r1, #0
   26884:	42c8      	cmn	r0, r1
   26886:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00026888 <__aeabi_dcmpeq>:
   26888:	b510      	push	{r4, lr}
   2688a:	f001 fa95 	bl	27db8 <__eqdf2>
   2688e:	4240      	negs	r0, r0
   26890:	3001      	adds	r0, #1
   26892:	bd10      	pop	{r4, pc}

00026894 <__aeabi_dcmplt>:
   26894:	b510      	push	{r4, lr}
   26896:	f001 fb2d 	bl	27ef4 <__ledf2>
   2689a:	2800      	cmp	r0, #0
   2689c:	db01      	blt.n	268a2 <__aeabi_dcmplt+0xe>
   2689e:	2000      	movs	r0, #0
   268a0:	bd10      	pop	{r4, pc}
   268a2:	2001      	movs	r0, #1
   268a4:	bd10      	pop	{r4, pc}
   268a6:	46c0      	nop			; (mov r8, r8)

000268a8 <__aeabi_dcmple>:
   268a8:	b510      	push	{r4, lr}
   268aa:	f001 fb23 	bl	27ef4 <__ledf2>
   268ae:	2800      	cmp	r0, #0
   268b0:	dd01      	ble.n	268b6 <__aeabi_dcmple+0xe>
   268b2:	2000      	movs	r0, #0
   268b4:	bd10      	pop	{r4, pc}
   268b6:	2001      	movs	r0, #1
   268b8:	bd10      	pop	{r4, pc}
   268ba:	46c0      	nop			; (mov r8, r8)

000268bc <__aeabi_dcmpgt>:
   268bc:	b510      	push	{r4, lr}
   268be:	f001 fab5 	bl	27e2c <__gedf2>
   268c2:	2800      	cmp	r0, #0
   268c4:	dc01      	bgt.n	268ca <__aeabi_dcmpgt+0xe>
   268c6:	2000      	movs	r0, #0
   268c8:	bd10      	pop	{r4, pc}
   268ca:	2001      	movs	r0, #1
   268cc:	bd10      	pop	{r4, pc}
   268ce:	46c0      	nop			; (mov r8, r8)

000268d0 <__aeabi_dcmpge>:
   268d0:	b510      	push	{r4, lr}
   268d2:	f001 faab 	bl	27e2c <__gedf2>
   268d6:	2800      	cmp	r0, #0
   268d8:	da01      	bge.n	268de <__aeabi_dcmpge+0xe>
   268da:	2000      	movs	r0, #0
   268dc:	bd10      	pop	{r4, pc}
   268de:	2001      	movs	r0, #1
   268e0:	bd10      	pop	{r4, pc}
   268e2:	46c0      	nop			; (mov r8, r8)

000268e4 <__aeabi_uldivmod>:
   268e4:	2b00      	cmp	r3, #0
   268e6:	d111      	bne.n	2690c <__aeabi_uldivmod+0x28>
   268e8:	2a00      	cmp	r2, #0
   268ea:	d10f      	bne.n	2690c <__aeabi_uldivmod+0x28>
   268ec:	2900      	cmp	r1, #0
   268ee:	d100      	bne.n	268f2 <__aeabi_uldivmod+0xe>
   268f0:	2800      	cmp	r0, #0
   268f2:	d002      	beq.n	268fa <__aeabi_uldivmod+0x16>
   268f4:	2100      	movs	r1, #0
   268f6:	43c9      	mvns	r1, r1
   268f8:	1c08      	adds	r0, r1, #0
   268fa:	b407      	push	{r0, r1, r2}
   268fc:	4802      	ldr	r0, [pc, #8]	; (26908 <__aeabi_uldivmod+0x24>)
   268fe:	a102      	add	r1, pc, #8	; (adr r1, 26908 <__aeabi_uldivmod+0x24>)
   26900:	1840      	adds	r0, r0, r1
   26902:	9002      	str	r0, [sp, #8]
   26904:	bd03      	pop	{r0, r1, pc}
   26906:	46c0      	nop			; (mov r8, r8)
   26908:	ffffff5d 	.word	0xffffff5d
   2690c:	b403      	push	{r0, r1}
   2690e:	4668      	mov	r0, sp
   26910:	b501      	push	{r0, lr}
   26912:	9802      	ldr	r0, [sp, #8]
   26914:	f000 f84e 	bl	269b4 <__udivmoddi4>
   26918:	9b01      	ldr	r3, [sp, #4]
   2691a:	469e      	mov	lr, r3
   2691c:	b002      	add	sp, #8
   2691e:	bc0c      	pop	{r2, r3}
   26920:	4770      	bx	lr
   26922:	46c0      	nop			; (mov r8, r8)

00026924 <__aeabi_lmul>:
   26924:	b5f0      	push	{r4, r5, r6, r7, lr}
   26926:	46ce      	mov	lr, r9
   26928:	4647      	mov	r7, r8
   2692a:	0415      	lsls	r5, r2, #16
   2692c:	0c2d      	lsrs	r5, r5, #16
   2692e:	002e      	movs	r6, r5
   26930:	b580      	push	{r7, lr}
   26932:	0407      	lsls	r7, r0, #16
   26934:	0c14      	lsrs	r4, r2, #16
   26936:	0c3f      	lsrs	r7, r7, #16
   26938:	4699      	mov	r9, r3
   2693a:	0c03      	lsrs	r3, r0, #16
   2693c:	437e      	muls	r6, r7
   2693e:	435d      	muls	r5, r3
   26940:	4367      	muls	r7, r4
   26942:	4363      	muls	r3, r4
   26944:	197f      	adds	r7, r7, r5
   26946:	0c34      	lsrs	r4, r6, #16
   26948:	19e4      	adds	r4, r4, r7
   2694a:	469c      	mov	ip, r3
   2694c:	42a5      	cmp	r5, r4
   2694e:	d903      	bls.n	26958 <__aeabi_lmul+0x34>
   26950:	2380      	movs	r3, #128	; 0x80
   26952:	025b      	lsls	r3, r3, #9
   26954:	4698      	mov	r8, r3
   26956:	44c4      	add	ip, r8
   26958:	464b      	mov	r3, r9
   2695a:	4351      	muls	r1, r2
   2695c:	4343      	muls	r3, r0
   2695e:	0436      	lsls	r6, r6, #16
   26960:	0c36      	lsrs	r6, r6, #16
   26962:	0c25      	lsrs	r5, r4, #16
   26964:	0424      	lsls	r4, r4, #16
   26966:	4465      	add	r5, ip
   26968:	19a4      	adds	r4, r4, r6
   2696a:	1859      	adds	r1, r3, r1
   2696c:	1949      	adds	r1, r1, r5
   2696e:	0020      	movs	r0, r4
   26970:	bc0c      	pop	{r2, r3}
   26972:	4690      	mov	r8, r2
   26974:	4699      	mov	r9, r3
   26976:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026978 <__aeabi_d2uiz>:
   26978:	b570      	push	{r4, r5, r6, lr}
   2697a:	2200      	movs	r2, #0
   2697c:	4b0c      	ldr	r3, [pc, #48]	; (269b0 <__aeabi_d2uiz+0x38>)
   2697e:	0004      	movs	r4, r0
   26980:	000d      	movs	r5, r1
   26982:	f7ff ffa5 	bl	268d0 <__aeabi_dcmpge>
   26986:	2800      	cmp	r0, #0
   26988:	d104      	bne.n	26994 <__aeabi_d2uiz+0x1c>
   2698a:	0020      	movs	r0, r4
   2698c:	0029      	movs	r1, r5
   2698e:	f002 f8c9 	bl	28b24 <__aeabi_d2iz>
   26992:	bd70      	pop	{r4, r5, r6, pc}
   26994:	4b06      	ldr	r3, [pc, #24]	; (269b0 <__aeabi_d2uiz+0x38>)
   26996:	2200      	movs	r2, #0
   26998:	0020      	movs	r0, r4
   2699a:	0029      	movs	r1, r5
   2699c:	f001 fd8c 	bl	284b8 <__aeabi_dsub>
   269a0:	f002 f8c0 	bl	28b24 <__aeabi_d2iz>
   269a4:	2380      	movs	r3, #128	; 0x80
   269a6:	061b      	lsls	r3, r3, #24
   269a8:	469c      	mov	ip, r3
   269aa:	4460      	add	r0, ip
   269ac:	e7f1      	b.n	26992 <__aeabi_d2uiz+0x1a>
   269ae:	46c0      	nop			; (mov r8, r8)
   269b0:	41e00000 	.word	0x41e00000

000269b4 <__udivmoddi4>:
   269b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   269b6:	4657      	mov	r7, sl
   269b8:	464e      	mov	r6, r9
   269ba:	4645      	mov	r5, r8
   269bc:	46de      	mov	lr, fp
   269be:	b5e0      	push	{r5, r6, r7, lr}
   269c0:	0004      	movs	r4, r0
   269c2:	b083      	sub	sp, #12
   269c4:	000d      	movs	r5, r1
   269c6:	4692      	mov	sl, r2
   269c8:	4699      	mov	r9, r3
   269ca:	428b      	cmp	r3, r1
   269cc:	d82f      	bhi.n	26a2e <__udivmoddi4+0x7a>
   269ce:	d02c      	beq.n	26a2a <__udivmoddi4+0x76>
   269d0:	4649      	mov	r1, r9
   269d2:	4650      	mov	r0, sl
   269d4:	f002 f9c4 	bl	28d60 <__clzdi2>
   269d8:	0029      	movs	r1, r5
   269da:	0006      	movs	r6, r0
   269dc:	0020      	movs	r0, r4
   269de:	f002 f9bf 	bl	28d60 <__clzdi2>
   269e2:	1a33      	subs	r3, r6, r0
   269e4:	4698      	mov	r8, r3
   269e6:	3b20      	subs	r3, #32
   269e8:	469b      	mov	fp, r3
   269ea:	d500      	bpl.n	269ee <__udivmoddi4+0x3a>
   269ec:	e074      	b.n	26ad8 <__udivmoddi4+0x124>
   269ee:	4653      	mov	r3, sl
   269f0:	465a      	mov	r2, fp
   269f2:	4093      	lsls	r3, r2
   269f4:	001f      	movs	r7, r3
   269f6:	4653      	mov	r3, sl
   269f8:	4642      	mov	r2, r8
   269fa:	4093      	lsls	r3, r2
   269fc:	001e      	movs	r6, r3
   269fe:	42af      	cmp	r7, r5
   26a00:	d829      	bhi.n	26a56 <__udivmoddi4+0xa2>
   26a02:	d026      	beq.n	26a52 <__udivmoddi4+0x9e>
   26a04:	465b      	mov	r3, fp
   26a06:	1ba4      	subs	r4, r4, r6
   26a08:	41bd      	sbcs	r5, r7
   26a0a:	2b00      	cmp	r3, #0
   26a0c:	da00      	bge.n	26a10 <__udivmoddi4+0x5c>
   26a0e:	e079      	b.n	26b04 <__udivmoddi4+0x150>
   26a10:	2200      	movs	r2, #0
   26a12:	2300      	movs	r3, #0
   26a14:	9200      	str	r2, [sp, #0]
   26a16:	9301      	str	r3, [sp, #4]
   26a18:	2301      	movs	r3, #1
   26a1a:	465a      	mov	r2, fp
   26a1c:	4093      	lsls	r3, r2
   26a1e:	9301      	str	r3, [sp, #4]
   26a20:	2301      	movs	r3, #1
   26a22:	4642      	mov	r2, r8
   26a24:	4093      	lsls	r3, r2
   26a26:	9300      	str	r3, [sp, #0]
   26a28:	e019      	b.n	26a5e <__udivmoddi4+0xaa>
   26a2a:	4282      	cmp	r2, r0
   26a2c:	d9d0      	bls.n	269d0 <__udivmoddi4+0x1c>
   26a2e:	2200      	movs	r2, #0
   26a30:	2300      	movs	r3, #0
   26a32:	9200      	str	r2, [sp, #0]
   26a34:	9301      	str	r3, [sp, #4]
   26a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26a38:	2b00      	cmp	r3, #0
   26a3a:	d001      	beq.n	26a40 <__udivmoddi4+0x8c>
   26a3c:	601c      	str	r4, [r3, #0]
   26a3e:	605d      	str	r5, [r3, #4]
   26a40:	9800      	ldr	r0, [sp, #0]
   26a42:	9901      	ldr	r1, [sp, #4]
   26a44:	b003      	add	sp, #12
   26a46:	bc3c      	pop	{r2, r3, r4, r5}
   26a48:	4690      	mov	r8, r2
   26a4a:	4699      	mov	r9, r3
   26a4c:	46a2      	mov	sl, r4
   26a4e:	46ab      	mov	fp, r5
   26a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a52:	42a3      	cmp	r3, r4
   26a54:	d9d6      	bls.n	26a04 <__udivmoddi4+0x50>
   26a56:	2200      	movs	r2, #0
   26a58:	2300      	movs	r3, #0
   26a5a:	9200      	str	r2, [sp, #0]
   26a5c:	9301      	str	r3, [sp, #4]
   26a5e:	4643      	mov	r3, r8
   26a60:	2b00      	cmp	r3, #0
   26a62:	d0e8      	beq.n	26a36 <__udivmoddi4+0x82>
   26a64:	07fb      	lsls	r3, r7, #31
   26a66:	0872      	lsrs	r2, r6, #1
   26a68:	431a      	orrs	r2, r3
   26a6a:	4646      	mov	r6, r8
   26a6c:	087b      	lsrs	r3, r7, #1
   26a6e:	e00e      	b.n	26a8e <__udivmoddi4+0xda>
   26a70:	42ab      	cmp	r3, r5
   26a72:	d101      	bne.n	26a78 <__udivmoddi4+0xc4>
   26a74:	42a2      	cmp	r2, r4
   26a76:	d80c      	bhi.n	26a92 <__udivmoddi4+0xde>
   26a78:	1aa4      	subs	r4, r4, r2
   26a7a:	419d      	sbcs	r5, r3
   26a7c:	2001      	movs	r0, #1
   26a7e:	1924      	adds	r4, r4, r4
   26a80:	416d      	adcs	r5, r5
   26a82:	2100      	movs	r1, #0
   26a84:	3e01      	subs	r6, #1
   26a86:	1824      	adds	r4, r4, r0
   26a88:	414d      	adcs	r5, r1
   26a8a:	2e00      	cmp	r6, #0
   26a8c:	d006      	beq.n	26a9c <__udivmoddi4+0xe8>
   26a8e:	42ab      	cmp	r3, r5
   26a90:	d9ee      	bls.n	26a70 <__udivmoddi4+0xbc>
   26a92:	3e01      	subs	r6, #1
   26a94:	1924      	adds	r4, r4, r4
   26a96:	416d      	adcs	r5, r5
   26a98:	2e00      	cmp	r6, #0
   26a9a:	d1f8      	bne.n	26a8e <__udivmoddi4+0xda>
   26a9c:	465b      	mov	r3, fp
   26a9e:	9800      	ldr	r0, [sp, #0]
   26aa0:	9901      	ldr	r1, [sp, #4]
   26aa2:	1900      	adds	r0, r0, r4
   26aa4:	4169      	adcs	r1, r5
   26aa6:	2b00      	cmp	r3, #0
   26aa8:	db22      	blt.n	26af0 <__udivmoddi4+0x13c>
   26aaa:	002b      	movs	r3, r5
   26aac:	465a      	mov	r2, fp
   26aae:	40d3      	lsrs	r3, r2
   26ab0:	002a      	movs	r2, r5
   26ab2:	4644      	mov	r4, r8
   26ab4:	40e2      	lsrs	r2, r4
   26ab6:	001c      	movs	r4, r3
   26ab8:	465b      	mov	r3, fp
   26aba:	0015      	movs	r5, r2
   26abc:	2b00      	cmp	r3, #0
   26abe:	db2c      	blt.n	26b1a <__udivmoddi4+0x166>
   26ac0:	0026      	movs	r6, r4
   26ac2:	409e      	lsls	r6, r3
   26ac4:	0033      	movs	r3, r6
   26ac6:	0026      	movs	r6, r4
   26ac8:	4647      	mov	r7, r8
   26aca:	40be      	lsls	r6, r7
   26acc:	0032      	movs	r2, r6
   26ace:	1a80      	subs	r0, r0, r2
   26ad0:	4199      	sbcs	r1, r3
   26ad2:	9000      	str	r0, [sp, #0]
   26ad4:	9101      	str	r1, [sp, #4]
   26ad6:	e7ae      	b.n	26a36 <__udivmoddi4+0x82>
   26ad8:	4642      	mov	r2, r8
   26ada:	2320      	movs	r3, #32
   26adc:	1a9b      	subs	r3, r3, r2
   26ade:	4652      	mov	r2, sl
   26ae0:	40da      	lsrs	r2, r3
   26ae2:	4641      	mov	r1, r8
   26ae4:	0013      	movs	r3, r2
   26ae6:	464a      	mov	r2, r9
   26ae8:	408a      	lsls	r2, r1
   26aea:	0017      	movs	r7, r2
   26aec:	431f      	orrs	r7, r3
   26aee:	e782      	b.n	269f6 <__udivmoddi4+0x42>
   26af0:	4642      	mov	r2, r8
   26af2:	2320      	movs	r3, #32
   26af4:	1a9b      	subs	r3, r3, r2
   26af6:	002a      	movs	r2, r5
   26af8:	4646      	mov	r6, r8
   26afa:	409a      	lsls	r2, r3
   26afc:	0023      	movs	r3, r4
   26afe:	40f3      	lsrs	r3, r6
   26b00:	4313      	orrs	r3, r2
   26b02:	e7d5      	b.n	26ab0 <__udivmoddi4+0xfc>
   26b04:	4642      	mov	r2, r8
   26b06:	2320      	movs	r3, #32
   26b08:	2100      	movs	r1, #0
   26b0a:	1a9b      	subs	r3, r3, r2
   26b0c:	2200      	movs	r2, #0
   26b0e:	9100      	str	r1, [sp, #0]
   26b10:	9201      	str	r2, [sp, #4]
   26b12:	2201      	movs	r2, #1
   26b14:	40da      	lsrs	r2, r3
   26b16:	9201      	str	r2, [sp, #4]
   26b18:	e782      	b.n	26a20 <__udivmoddi4+0x6c>
   26b1a:	4642      	mov	r2, r8
   26b1c:	2320      	movs	r3, #32
   26b1e:	0026      	movs	r6, r4
   26b20:	1a9b      	subs	r3, r3, r2
   26b22:	40de      	lsrs	r6, r3
   26b24:	002f      	movs	r7, r5
   26b26:	46b4      	mov	ip, r6
   26b28:	4097      	lsls	r7, r2
   26b2a:	4666      	mov	r6, ip
   26b2c:	003b      	movs	r3, r7
   26b2e:	4333      	orrs	r3, r6
   26b30:	e7c9      	b.n	26ac6 <__udivmoddi4+0x112>
   26b32:	46c0      	nop			; (mov r8, r8)

00026b34 <__aeabi_fdiv>:
   26b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   26b36:	4657      	mov	r7, sl
   26b38:	464e      	mov	r6, r9
   26b3a:	46de      	mov	lr, fp
   26b3c:	4645      	mov	r5, r8
   26b3e:	b5e0      	push	{r5, r6, r7, lr}
   26b40:	0244      	lsls	r4, r0, #9
   26b42:	0043      	lsls	r3, r0, #1
   26b44:	0fc6      	lsrs	r6, r0, #31
   26b46:	b083      	sub	sp, #12
   26b48:	1c0f      	adds	r7, r1, #0
   26b4a:	0a64      	lsrs	r4, r4, #9
   26b4c:	0e1b      	lsrs	r3, r3, #24
   26b4e:	46b2      	mov	sl, r6
   26b50:	d053      	beq.n	26bfa <__aeabi_fdiv+0xc6>
   26b52:	2bff      	cmp	r3, #255	; 0xff
   26b54:	d027      	beq.n	26ba6 <__aeabi_fdiv+0x72>
   26b56:	2280      	movs	r2, #128	; 0x80
   26b58:	00e4      	lsls	r4, r4, #3
   26b5a:	04d2      	lsls	r2, r2, #19
   26b5c:	4314      	orrs	r4, r2
   26b5e:	227f      	movs	r2, #127	; 0x7f
   26b60:	4252      	negs	r2, r2
   26b62:	4690      	mov	r8, r2
   26b64:	4498      	add	r8, r3
   26b66:	2300      	movs	r3, #0
   26b68:	4699      	mov	r9, r3
   26b6a:	469b      	mov	fp, r3
   26b6c:	027d      	lsls	r5, r7, #9
   26b6e:	0078      	lsls	r0, r7, #1
   26b70:	0ffb      	lsrs	r3, r7, #31
   26b72:	0a6d      	lsrs	r5, r5, #9
   26b74:	0e00      	lsrs	r0, r0, #24
   26b76:	9300      	str	r3, [sp, #0]
   26b78:	d024      	beq.n	26bc4 <__aeabi_fdiv+0x90>
   26b7a:	28ff      	cmp	r0, #255	; 0xff
   26b7c:	d046      	beq.n	26c0c <__aeabi_fdiv+0xd8>
   26b7e:	2380      	movs	r3, #128	; 0x80
   26b80:	2100      	movs	r1, #0
   26b82:	00ed      	lsls	r5, r5, #3
   26b84:	04db      	lsls	r3, r3, #19
   26b86:	431d      	orrs	r5, r3
   26b88:	387f      	subs	r0, #127	; 0x7f
   26b8a:	4647      	mov	r7, r8
   26b8c:	1a38      	subs	r0, r7, r0
   26b8e:	464f      	mov	r7, r9
   26b90:	430f      	orrs	r7, r1
   26b92:	00bf      	lsls	r7, r7, #2
   26b94:	46b9      	mov	r9, r7
   26b96:	0033      	movs	r3, r6
   26b98:	9a00      	ldr	r2, [sp, #0]
   26b9a:	4f87      	ldr	r7, [pc, #540]	; (26db8 <__aeabi_fdiv+0x284>)
   26b9c:	4053      	eors	r3, r2
   26b9e:	464a      	mov	r2, r9
   26ba0:	58ba      	ldr	r2, [r7, r2]
   26ba2:	9301      	str	r3, [sp, #4]
   26ba4:	4697      	mov	pc, r2
   26ba6:	2c00      	cmp	r4, #0
   26ba8:	d14e      	bne.n	26c48 <__aeabi_fdiv+0x114>
   26baa:	2308      	movs	r3, #8
   26bac:	4699      	mov	r9, r3
   26bae:	33f7      	adds	r3, #247	; 0xf7
   26bb0:	4698      	mov	r8, r3
   26bb2:	3bfd      	subs	r3, #253	; 0xfd
   26bb4:	469b      	mov	fp, r3
   26bb6:	027d      	lsls	r5, r7, #9
   26bb8:	0078      	lsls	r0, r7, #1
   26bba:	0ffb      	lsrs	r3, r7, #31
   26bbc:	0a6d      	lsrs	r5, r5, #9
   26bbe:	0e00      	lsrs	r0, r0, #24
   26bc0:	9300      	str	r3, [sp, #0]
   26bc2:	d1da      	bne.n	26b7a <__aeabi_fdiv+0x46>
   26bc4:	2d00      	cmp	r5, #0
   26bc6:	d126      	bne.n	26c16 <__aeabi_fdiv+0xe2>
   26bc8:	2000      	movs	r0, #0
   26bca:	2101      	movs	r1, #1
   26bcc:	0033      	movs	r3, r6
   26bce:	9a00      	ldr	r2, [sp, #0]
   26bd0:	4f7a      	ldr	r7, [pc, #488]	; (26dbc <__aeabi_fdiv+0x288>)
   26bd2:	4053      	eors	r3, r2
   26bd4:	4642      	mov	r2, r8
   26bd6:	1a10      	subs	r0, r2, r0
   26bd8:	464a      	mov	r2, r9
   26bda:	430a      	orrs	r2, r1
   26bdc:	0092      	lsls	r2, r2, #2
   26bde:	58ba      	ldr	r2, [r7, r2]
   26be0:	001d      	movs	r5, r3
   26be2:	4697      	mov	pc, r2
   26be4:	9b00      	ldr	r3, [sp, #0]
   26be6:	002c      	movs	r4, r5
   26be8:	469a      	mov	sl, r3
   26bea:	468b      	mov	fp, r1
   26bec:	465b      	mov	r3, fp
   26bee:	2b02      	cmp	r3, #2
   26bf0:	d131      	bne.n	26c56 <__aeabi_fdiv+0x122>
   26bf2:	4653      	mov	r3, sl
   26bf4:	21ff      	movs	r1, #255	; 0xff
   26bf6:	2400      	movs	r4, #0
   26bf8:	e038      	b.n	26c6c <__aeabi_fdiv+0x138>
   26bfa:	2c00      	cmp	r4, #0
   26bfc:	d117      	bne.n	26c2e <__aeabi_fdiv+0xfa>
   26bfe:	2304      	movs	r3, #4
   26c00:	4699      	mov	r9, r3
   26c02:	2300      	movs	r3, #0
   26c04:	4698      	mov	r8, r3
   26c06:	3301      	adds	r3, #1
   26c08:	469b      	mov	fp, r3
   26c0a:	e7af      	b.n	26b6c <__aeabi_fdiv+0x38>
   26c0c:	20ff      	movs	r0, #255	; 0xff
   26c0e:	2d00      	cmp	r5, #0
   26c10:	d10b      	bne.n	26c2a <__aeabi_fdiv+0xf6>
   26c12:	2102      	movs	r1, #2
   26c14:	e7da      	b.n	26bcc <__aeabi_fdiv+0x98>
   26c16:	0028      	movs	r0, r5
   26c18:	f002 f884 	bl	28d24 <__clzsi2>
   26c1c:	1f43      	subs	r3, r0, #5
   26c1e:	409d      	lsls	r5, r3
   26c20:	2376      	movs	r3, #118	; 0x76
   26c22:	425b      	negs	r3, r3
   26c24:	1a18      	subs	r0, r3, r0
   26c26:	2100      	movs	r1, #0
   26c28:	e7af      	b.n	26b8a <__aeabi_fdiv+0x56>
   26c2a:	2103      	movs	r1, #3
   26c2c:	e7ad      	b.n	26b8a <__aeabi_fdiv+0x56>
   26c2e:	0020      	movs	r0, r4
   26c30:	f002 f878 	bl	28d24 <__clzsi2>
   26c34:	1f43      	subs	r3, r0, #5
   26c36:	409c      	lsls	r4, r3
   26c38:	2376      	movs	r3, #118	; 0x76
   26c3a:	425b      	negs	r3, r3
   26c3c:	1a1b      	subs	r3, r3, r0
   26c3e:	4698      	mov	r8, r3
   26c40:	2300      	movs	r3, #0
   26c42:	4699      	mov	r9, r3
   26c44:	469b      	mov	fp, r3
   26c46:	e791      	b.n	26b6c <__aeabi_fdiv+0x38>
   26c48:	230c      	movs	r3, #12
   26c4a:	4699      	mov	r9, r3
   26c4c:	33f3      	adds	r3, #243	; 0xf3
   26c4e:	4698      	mov	r8, r3
   26c50:	3bfc      	subs	r3, #252	; 0xfc
   26c52:	469b      	mov	fp, r3
   26c54:	e78a      	b.n	26b6c <__aeabi_fdiv+0x38>
   26c56:	2b03      	cmp	r3, #3
   26c58:	d100      	bne.n	26c5c <__aeabi_fdiv+0x128>
   26c5a:	e0a5      	b.n	26da8 <__aeabi_fdiv+0x274>
   26c5c:	4655      	mov	r5, sl
   26c5e:	2b01      	cmp	r3, #1
   26c60:	d000      	beq.n	26c64 <__aeabi_fdiv+0x130>
   26c62:	e081      	b.n	26d68 <__aeabi_fdiv+0x234>
   26c64:	2301      	movs	r3, #1
   26c66:	2100      	movs	r1, #0
   26c68:	2400      	movs	r4, #0
   26c6a:	402b      	ands	r3, r5
   26c6c:	0264      	lsls	r4, r4, #9
   26c6e:	05c9      	lsls	r1, r1, #23
   26c70:	0a60      	lsrs	r0, r4, #9
   26c72:	07db      	lsls	r3, r3, #31
   26c74:	4308      	orrs	r0, r1
   26c76:	4318      	orrs	r0, r3
   26c78:	b003      	add	sp, #12
   26c7a:	bc3c      	pop	{r2, r3, r4, r5}
   26c7c:	4690      	mov	r8, r2
   26c7e:	4699      	mov	r9, r3
   26c80:	46a2      	mov	sl, r4
   26c82:	46ab      	mov	fp, r5
   26c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26c86:	2480      	movs	r4, #128	; 0x80
   26c88:	2300      	movs	r3, #0
   26c8a:	03e4      	lsls	r4, r4, #15
   26c8c:	21ff      	movs	r1, #255	; 0xff
   26c8e:	e7ed      	b.n	26c6c <__aeabi_fdiv+0x138>
   26c90:	21ff      	movs	r1, #255	; 0xff
   26c92:	2400      	movs	r4, #0
   26c94:	e7ea      	b.n	26c6c <__aeabi_fdiv+0x138>
   26c96:	2301      	movs	r3, #1
   26c98:	1a59      	subs	r1, r3, r1
   26c9a:	291b      	cmp	r1, #27
   26c9c:	dd66      	ble.n	26d6c <__aeabi_fdiv+0x238>
   26c9e:	9a01      	ldr	r2, [sp, #4]
   26ca0:	4013      	ands	r3, r2
   26ca2:	2100      	movs	r1, #0
   26ca4:	2400      	movs	r4, #0
   26ca6:	e7e1      	b.n	26c6c <__aeabi_fdiv+0x138>
   26ca8:	2380      	movs	r3, #128	; 0x80
   26caa:	03db      	lsls	r3, r3, #15
   26cac:	421c      	tst	r4, r3
   26cae:	d038      	beq.n	26d22 <__aeabi_fdiv+0x1ee>
   26cb0:	421d      	tst	r5, r3
   26cb2:	d051      	beq.n	26d58 <__aeabi_fdiv+0x224>
   26cb4:	431c      	orrs	r4, r3
   26cb6:	0264      	lsls	r4, r4, #9
   26cb8:	0a64      	lsrs	r4, r4, #9
   26cba:	0033      	movs	r3, r6
   26cbc:	21ff      	movs	r1, #255	; 0xff
   26cbe:	e7d5      	b.n	26c6c <__aeabi_fdiv+0x138>
   26cc0:	0163      	lsls	r3, r4, #5
   26cc2:	016c      	lsls	r4, r5, #5
   26cc4:	42a3      	cmp	r3, r4
   26cc6:	d23b      	bcs.n	26d40 <__aeabi_fdiv+0x20c>
   26cc8:	261b      	movs	r6, #27
   26cca:	2100      	movs	r1, #0
   26ccc:	3801      	subs	r0, #1
   26cce:	2501      	movs	r5, #1
   26cd0:	001f      	movs	r7, r3
   26cd2:	0049      	lsls	r1, r1, #1
   26cd4:	005b      	lsls	r3, r3, #1
   26cd6:	2f00      	cmp	r7, #0
   26cd8:	db01      	blt.n	26cde <__aeabi_fdiv+0x1aa>
   26cda:	429c      	cmp	r4, r3
   26cdc:	d801      	bhi.n	26ce2 <__aeabi_fdiv+0x1ae>
   26cde:	1b1b      	subs	r3, r3, r4
   26ce0:	4329      	orrs	r1, r5
   26ce2:	3e01      	subs	r6, #1
   26ce4:	2e00      	cmp	r6, #0
   26ce6:	d1f3      	bne.n	26cd0 <__aeabi_fdiv+0x19c>
   26ce8:	001c      	movs	r4, r3
   26cea:	1e63      	subs	r3, r4, #1
   26cec:	419c      	sbcs	r4, r3
   26cee:	430c      	orrs	r4, r1
   26cf0:	0001      	movs	r1, r0
   26cf2:	317f      	adds	r1, #127	; 0x7f
   26cf4:	2900      	cmp	r1, #0
   26cf6:	ddce      	ble.n	26c96 <__aeabi_fdiv+0x162>
   26cf8:	0763      	lsls	r3, r4, #29
   26cfa:	d004      	beq.n	26d06 <__aeabi_fdiv+0x1d2>
   26cfc:	230f      	movs	r3, #15
   26cfe:	4023      	ands	r3, r4
   26d00:	2b04      	cmp	r3, #4
   26d02:	d000      	beq.n	26d06 <__aeabi_fdiv+0x1d2>
   26d04:	3404      	adds	r4, #4
   26d06:	0123      	lsls	r3, r4, #4
   26d08:	d503      	bpl.n	26d12 <__aeabi_fdiv+0x1de>
   26d0a:	0001      	movs	r1, r0
   26d0c:	4b2c      	ldr	r3, [pc, #176]	; (26dc0 <__aeabi_fdiv+0x28c>)
   26d0e:	3180      	adds	r1, #128	; 0x80
   26d10:	401c      	ands	r4, r3
   26d12:	29fe      	cmp	r1, #254	; 0xfe
   26d14:	dd0d      	ble.n	26d32 <__aeabi_fdiv+0x1fe>
   26d16:	2301      	movs	r3, #1
   26d18:	9a01      	ldr	r2, [sp, #4]
   26d1a:	21ff      	movs	r1, #255	; 0xff
   26d1c:	4013      	ands	r3, r2
   26d1e:	2400      	movs	r4, #0
   26d20:	e7a4      	b.n	26c6c <__aeabi_fdiv+0x138>
   26d22:	2380      	movs	r3, #128	; 0x80
   26d24:	03db      	lsls	r3, r3, #15
   26d26:	431c      	orrs	r4, r3
   26d28:	0264      	lsls	r4, r4, #9
   26d2a:	0a64      	lsrs	r4, r4, #9
   26d2c:	0033      	movs	r3, r6
   26d2e:	21ff      	movs	r1, #255	; 0xff
   26d30:	e79c      	b.n	26c6c <__aeabi_fdiv+0x138>
   26d32:	2301      	movs	r3, #1
   26d34:	9a01      	ldr	r2, [sp, #4]
   26d36:	01a4      	lsls	r4, r4, #6
   26d38:	0a64      	lsrs	r4, r4, #9
   26d3a:	b2c9      	uxtb	r1, r1
   26d3c:	4013      	ands	r3, r2
   26d3e:	e795      	b.n	26c6c <__aeabi_fdiv+0x138>
   26d40:	1b1b      	subs	r3, r3, r4
   26d42:	261a      	movs	r6, #26
   26d44:	2101      	movs	r1, #1
   26d46:	e7c2      	b.n	26cce <__aeabi_fdiv+0x19a>
   26d48:	9b00      	ldr	r3, [sp, #0]
   26d4a:	468b      	mov	fp, r1
   26d4c:	469a      	mov	sl, r3
   26d4e:	2400      	movs	r4, #0
   26d50:	e74c      	b.n	26bec <__aeabi_fdiv+0xb8>
   26d52:	0263      	lsls	r3, r4, #9
   26d54:	d5e5      	bpl.n	26d22 <__aeabi_fdiv+0x1ee>
   26d56:	2500      	movs	r5, #0
   26d58:	2480      	movs	r4, #128	; 0x80
   26d5a:	03e4      	lsls	r4, r4, #15
   26d5c:	432c      	orrs	r4, r5
   26d5e:	0264      	lsls	r4, r4, #9
   26d60:	0a64      	lsrs	r4, r4, #9
   26d62:	9b00      	ldr	r3, [sp, #0]
   26d64:	21ff      	movs	r1, #255	; 0xff
   26d66:	e781      	b.n	26c6c <__aeabi_fdiv+0x138>
   26d68:	9501      	str	r5, [sp, #4]
   26d6a:	e7c1      	b.n	26cf0 <__aeabi_fdiv+0x1bc>
   26d6c:	0023      	movs	r3, r4
   26d6e:	2020      	movs	r0, #32
   26d70:	40cb      	lsrs	r3, r1
   26d72:	1a41      	subs	r1, r0, r1
   26d74:	408c      	lsls	r4, r1
   26d76:	1e61      	subs	r1, r4, #1
   26d78:	418c      	sbcs	r4, r1
   26d7a:	431c      	orrs	r4, r3
   26d7c:	0763      	lsls	r3, r4, #29
   26d7e:	d004      	beq.n	26d8a <__aeabi_fdiv+0x256>
   26d80:	230f      	movs	r3, #15
   26d82:	4023      	ands	r3, r4
   26d84:	2b04      	cmp	r3, #4
   26d86:	d000      	beq.n	26d8a <__aeabi_fdiv+0x256>
   26d88:	3404      	adds	r4, #4
   26d8a:	0163      	lsls	r3, r4, #5
   26d8c:	d505      	bpl.n	26d9a <__aeabi_fdiv+0x266>
   26d8e:	2301      	movs	r3, #1
   26d90:	9a01      	ldr	r2, [sp, #4]
   26d92:	2101      	movs	r1, #1
   26d94:	4013      	ands	r3, r2
   26d96:	2400      	movs	r4, #0
   26d98:	e768      	b.n	26c6c <__aeabi_fdiv+0x138>
   26d9a:	2301      	movs	r3, #1
   26d9c:	9a01      	ldr	r2, [sp, #4]
   26d9e:	01a4      	lsls	r4, r4, #6
   26da0:	0a64      	lsrs	r4, r4, #9
   26da2:	4013      	ands	r3, r2
   26da4:	2100      	movs	r1, #0
   26da6:	e761      	b.n	26c6c <__aeabi_fdiv+0x138>
   26da8:	2380      	movs	r3, #128	; 0x80
   26daa:	03db      	lsls	r3, r3, #15
   26dac:	431c      	orrs	r4, r3
   26dae:	0264      	lsls	r4, r4, #9
   26db0:	0a64      	lsrs	r4, r4, #9
   26db2:	4653      	mov	r3, sl
   26db4:	21ff      	movs	r1, #255	; 0xff
   26db6:	e759      	b.n	26c6c <__aeabi_fdiv+0x138>
   26db8:	0002ad68 	.word	0x0002ad68
   26dbc:	0002ada8 	.word	0x0002ada8
   26dc0:	f7ffffff 	.word	0xf7ffffff

00026dc4 <__aeabi_fmul>:
   26dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26dc6:	4657      	mov	r7, sl
   26dc8:	464e      	mov	r6, r9
   26dca:	4645      	mov	r5, r8
   26dcc:	46de      	mov	lr, fp
   26dce:	b5e0      	push	{r5, r6, r7, lr}
   26dd0:	0247      	lsls	r7, r0, #9
   26dd2:	0046      	lsls	r6, r0, #1
   26dd4:	4688      	mov	r8, r1
   26dd6:	0a7f      	lsrs	r7, r7, #9
   26dd8:	0e36      	lsrs	r6, r6, #24
   26dda:	0fc4      	lsrs	r4, r0, #31
   26ddc:	2e00      	cmp	r6, #0
   26dde:	d047      	beq.n	26e70 <__aeabi_fmul+0xac>
   26de0:	2eff      	cmp	r6, #255	; 0xff
   26de2:	d024      	beq.n	26e2e <__aeabi_fmul+0x6a>
   26de4:	00fb      	lsls	r3, r7, #3
   26de6:	2780      	movs	r7, #128	; 0x80
   26de8:	04ff      	lsls	r7, r7, #19
   26dea:	431f      	orrs	r7, r3
   26dec:	2300      	movs	r3, #0
   26dee:	4699      	mov	r9, r3
   26df0:	469a      	mov	sl, r3
   26df2:	3e7f      	subs	r6, #127	; 0x7f
   26df4:	4643      	mov	r3, r8
   26df6:	025d      	lsls	r5, r3, #9
   26df8:	0058      	lsls	r0, r3, #1
   26dfa:	0fdb      	lsrs	r3, r3, #31
   26dfc:	0a6d      	lsrs	r5, r5, #9
   26dfe:	0e00      	lsrs	r0, r0, #24
   26e00:	4698      	mov	r8, r3
   26e02:	d043      	beq.n	26e8c <__aeabi_fmul+0xc8>
   26e04:	28ff      	cmp	r0, #255	; 0xff
   26e06:	d03b      	beq.n	26e80 <__aeabi_fmul+0xbc>
   26e08:	00eb      	lsls	r3, r5, #3
   26e0a:	2580      	movs	r5, #128	; 0x80
   26e0c:	2200      	movs	r2, #0
   26e0e:	04ed      	lsls	r5, r5, #19
   26e10:	431d      	orrs	r5, r3
   26e12:	387f      	subs	r0, #127	; 0x7f
   26e14:	1836      	adds	r6, r6, r0
   26e16:	1c73      	adds	r3, r6, #1
   26e18:	4641      	mov	r1, r8
   26e1a:	469b      	mov	fp, r3
   26e1c:	464b      	mov	r3, r9
   26e1e:	4061      	eors	r1, r4
   26e20:	4313      	orrs	r3, r2
   26e22:	2b0f      	cmp	r3, #15
   26e24:	d864      	bhi.n	26ef0 <__aeabi_fmul+0x12c>
   26e26:	4875      	ldr	r0, [pc, #468]	; (26ffc <__aeabi_fmul+0x238>)
   26e28:	009b      	lsls	r3, r3, #2
   26e2a:	58c3      	ldr	r3, [r0, r3]
   26e2c:	469f      	mov	pc, r3
   26e2e:	2f00      	cmp	r7, #0
   26e30:	d142      	bne.n	26eb8 <__aeabi_fmul+0xf4>
   26e32:	2308      	movs	r3, #8
   26e34:	4699      	mov	r9, r3
   26e36:	3b06      	subs	r3, #6
   26e38:	26ff      	movs	r6, #255	; 0xff
   26e3a:	469a      	mov	sl, r3
   26e3c:	e7da      	b.n	26df4 <__aeabi_fmul+0x30>
   26e3e:	4641      	mov	r1, r8
   26e40:	2a02      	cmp	r2, #2
   26e42:	d028      	beq.n	26e96 <__aeabi_fmul+0xd2>
   26e44:	2a03      	cmp	r2, #3
   26e46:	d100      	bne.n	26e4a <__aeabi_fmul+0x86>
   26e48:	e0ce      	b.n	26fe8 <__aeabi_fmul+0x224>
   26e4a:	2a01      	cmp	r2, #1
   26e4c:	d000      	beq.n	26e50 <__aeabi_fmul+0x8c>
   26e4e:	e0ac      	b.n	26faa <__aeabi_fmul+0x1e6>
   26e50:	4011      	ands	r1, r2
   26e52:	2000      	movs	r0, #0
   26e54:	2200      	movs	r2, #0
   26e56:	b2cc      	uxtb	r4, r1
   26e58:	0240      	lsls	r0, r0, #9
   26e5a:	05d2      	lsls	r2, r2, #23
   26e5c:	0a40      	lsrs	r0, r0, #9
   26e5e:	07e4      	lsls	r4, r4, #31
   26e60:	4310      	orrs	r0, r2
   26e62:	4320      	orrs	r0, r4
   26e64:	bc3c      	pop	{r2, r3, r4, r5}
   26e66:	4690      	mov	r8, r2
   26e68:	4699      	mov	r9, r3
   26e6a:	46a2      	mov	sl, r4
   26e6c:	46ab      	mov	fp, r5
   26e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26e70:	2f00      	cmp	r7, #0
   26e72:	d115      	bne.n	26ea0 <__aeabi_fmul+0xdc>
   26e74:	2304      	movs	r3, #4
   26e76:	4699      	mov	r9, r3
   26e78:	3b03      	subs	r3, #3
   26e7a:	2600      	movs	r6, #0
   26e7c:	469a      	mov	sl, r3
   26e7e:	e7b9      	b.n	26df4 <__aeabi_fmul+0x30>
   26e80:	20ff      	movs	r0, #255	; 0xff
   26e82:	2202      	movs	r2, #2
   26e84:	2d00      	cmp	r5, #0
   26e86:	d0c5      	beq.n	26e14 <__aeabi_fmul+0x50>
   26e88:	2203      	movs	r2, #3
   26e8a:	e7c3      	b.n	26e14 <__aeabi_fmul+0x50>
   26e8c:	2d00      	cmp	r5, #0
   26e8e:	d119      	bne.n	26ec4 <__aeabi_fmul+0x100>
   26e90:	2000      	movs	r0, #0
   26e92:	2201      	movs	r2, #1
   26e94:	e7be      	b.n	26e14 <__aeabi_fmul+0x50>
   26e96:	2401      	movs	r4, #1
   26e98:	22ff      	movs	r2, #255	; 0xff
   26e9a:	400c      	ands	r4, r1
   26e9c:	2000      	movs	r0, #0
   26e9e:	e7db      	b.n	26e58 <__aeabi_fmul+0x94>
   26ea0:	0038      	movs	r0, r7
   26ea2:	f001 ff3f 	bl	28d24 <__clzsi2>
   26ea6:	2676      	movs	r6, #118	; 0x76
   26ea8:	1f43      	subs	r3, r0, #5
   26eaa:	409f      	lsls	r7, r3
   26eac:	2300      	movs	r3, #0
   26eae:	4276      	negs	r6, r6
   26eb0:	1a36      	subs	r6, r6, r0
   26eb2:	4699      	mov	r9, r3
   26eb4:	469a      	mov	sl, r3
   26eb6:	e79d      	b.n	26df4 <__aeabi_fmul+0x30>
   26eb8:	230c      	movs	r3, #12
   26eba:	4699      	mov	r9, r3
   26ebc:	3b09      	subs	r3, #9
   26ebe:	26ff      	movs	r6, #255	; 0xff
   26ec0:	469a      	mov	sl, r3
   26ec2:	e797      	b.n	26df4 <__aeabi_fmul+0x30>
   26ec4:	0028      	movs	r0, r5
   26ec6:	f001 ff2d 	bl	28d24 <__clzsi2>
   26eca:	1f43      	subs	r3, r0, #5
   26ecc:	409d      	lsls	r5, r3
   26ece:	2376      	movs	r3, #118	; 0x76
   26ed0:	425b      	negs	r3, r3
   26ed2:	1a18      	subs	r0, r3, r0
   26ed4:	2200      	movs	r2, #0
   26ed6:	e79d      	b.n	26e14 <__aeabi_fmul+0x50>
   26ed8:	2080      	movs	r0, #128	; 0x80
   26eda:	2400      	movs	r4, #0
   26edc:	03c0      	lsls	r0, r0, #15
   26ede:	22ff      	movs	r2, #255	; 0xff
   26ee0:	e7ba      	b.n	26e58 <__aeabi_fmul+0x94>
   26ee2:	003d      	movs	r5, r7
   26ee4:	4652      	mov	r2, sl
   26ee6:	e7ab      	b.n	26e40 <__aeabi_fmul+0x7c>
   26ee8:	003d      	movs	r5, r7
   26eea:	0021      	movs	r1, r4
   26eec:	4652      	mov	r2, sl
   26eee:	e7a7      	b.n	26e40 <__aeabi_fmul+0x7c>
   26ef0:	0c3b      	lsrs	r3, r7, #16
   26ef2:	469c      	mov	ip, r3
   26ef4:	042a      	lsls	r2, r5, #16
   26ef6:	0c12      	lsrs	r2, r2, #16
   26ef8:	0c2b      	lsrs	r3, r5, #16
   26efa:	0014      	movs	r4, r2
   26efc:	4660      	mov	r0, ip
   26efe:	4665      	mov	r5, ip
   26f00:	043f      	lsls	r7, r7, #16
   26f02:	0c3f      	lsrs	r7, r7, #16
   26f04:	437c      	muls	r4, r7
   26f06:	4342      	muls	r2, r0
   26f08:	435d      	muls	r5, r3
   26f0a:	437b      	muls	r3, r7
   26f0c:	0c27      	lsrs	r7, r4, #16
   26f0e:	189b      	adds	r3, r3, r2
   26f10:	18ff      	adds	r7, r7, r3
   26f12:	42ba      	cmp	r2, r7
   26f14:	d903      	bls.n	26f1e <__aeabi_fmul+0x15a>
   26f16:	2380      	movs	r3, #128	; 0x80
   26f18:	025b      	lsls	r3, r3, #9
   26f1a:	469c      	mov	ip, r3
   26f1c:	4465      	add	r5, ip
   26f1e:	0424      	lsls	r4, r4, #16
   26f20:	043a      	lsls	r2, r7, #16
   26f22:	0c24      	lsrs	r4, r4, #16
   26f24:	1912      	adds	r2, r2, r4
   26f26:	0193      	lsls	r3, r2, #6
   26f28:	1e5c      	subs	r4, r3, #1
   26f2a:	41a3      	sbcs	r3, r4
   26f2c:	0c3f      	lsrs	r7, r7, #16
   26f2e:	0e92      	lsrs	r2, r2, #26
   26f30:	197d      	adds	r5, r7, r5
   26f32:	431a      	orrs	r2, r3
   26f34:	01ad      	lsls	r5, r5, #6
   26f36:	4315      	orrs	r5, r2
   26f38:	012b      	lsls	r3, r5, #4
   26f3a:	d504      	bpl.n	26f46 <__aeabi_fmul+0x182>
   26f3c:	2301      	movs	r3, #1
   26f3e:	465e      	mov	r6, fp
   26f40:	086a      	lsrs	r2, r5, #1
   26f42:	401d      	ands	r5, r3
   26f44:	4315      	orrs	r5, r2
   26f46:	0032      	movs	r2, r6
   26f48:	327f      	adds	r2, #127	; 0x7f
   26f4a:	2a00      	cmp	r2, #0
   26f4c:	dd25      	ble.n	26f9a <__aeabi_fmul+0x1d6>
   26f4e:	076b      	lsls	r3, r5, #29
   26f50:	d004      	beq.n	26f5c <__aeabi_fmul+0x198>
   26f52:	230f      	movs	r3, #15
   26f54:	402b      	ands	r3, r5
   26f56:	2b04      	cmp	r3, #4
   26f58:	d000      	beq.n	26f5c <__aeabi_fmul+0x198>
   26f5a:	3504      	adds	r5, #4
   26f5c:	012b      	lsls	r3, r5, #4
   26f5e:	d503      	bpl.n	26f68 <__aeabi_fmul+0x1a4>
   26f60:	0032      	movs	r2, r6
   26f62:	4b27      	ldr	r3, [pc, #156]	; (27000 <__aeabi_fmul+0x23c>)
   26f64:	3280      	adds	r2, #128	; 0x80
   26f66:	401d      	ands	r5, r3
   26f68:	2afe      	cmp	r2, #254	; 0xfe
   26f6a:	dc94      	bgt.n	26e96 <__aeabi_fmul+0xd2>
   26f6c:	2401      	movs	r4, #1
   26f6e:	01a8      	lsls	r0, r5, #6
   26f70:	0a40      	lsrs	r0, r0, #9
   26f72:	b2d2      	uxtb	r2, r2
   26f74:	400c      	ands	r4, r1
   26f76:	e76f      	b.n	26e58 <__aeabi_fmul+0x94>
   26f78:	2080      	movs	r0, #128	; 0x80
   26f7a:	03c0      	lsls	r0, r0, #15
   26f7c:	4207      	tst	r7, r0
   26f7e:	d007      	beq.n	26f90 <__aeabi_fmul+0x1cc>
   26f80:	4205      	tst	r5, r0
   26f82:	d105      	bne.n	26f90 <__aeabi_fmul+0x1cc>
   26f84:	4328      	orrs	r0, r5
   26f86:	0240      	lsls	r0, r0, #9
   26f88:	0a40      	lsrs	r0, r0, #9
   26f8a:	4644      	mov	r4, r8
   26f8c:	22ff      	movs	r2, #255	; 0xff
   26f8e:	e763      	b.n	26e58 <__aeabi_fmul+0x94>
   26f90:	4338      	orrs	r0, r7
   26f92:	0240      	lsls	r0, r0, #9
   26f94:	0a40      	lsrs	r0, r0, #9
   26f96:	22ff      	movs	r2, #255	; 0xff
   26f98:	e75e      	b.n	26e58 <__aeabi_fmul+0x94>
   26f9a:	2401      	movs	r4, #1
   26f9c:	1aa3      	subs	r3, r4, r2
   26f9e:	2b1b      	cmp	r3, #27
   26fa0:	dd05      	ble.n	26fae <__aeabi_fmul+0x1ea>
   26fa2:	400c      	ands	r4, r1
   26fa4:	2200      	movs	r2, #0
   26fa6:	2000      	movs	r0, #0
   26fa8:	e756      	b.n	26e58 <__aeabi_fmul+0x94>
   26faa:	465e      	mov	r6, fp
   26fac:	e7cb      	b.n	26f46 <__aeabi_fmul+0x182>
   26fae:	002a      	movs	r2, r5
   26fb0:	2020      	movs	r0, #32
   26fb2:	40da      	lsrs	r2, r3
   26fb4:	1ac3      	subs	r3, r0, r3
   26fb6:	409d      	lsls	r5, r3
   26fb8:	002b      	movs	r3, r5
   26fba:	1e5d      	subs	r5, r3, #1
   26fbc:	41ab      	sbcs	r3, r5
   26fbe:	4313      	orrs	r3, r2
   26fc0:	075a      	lsls	r2, r3, #29
   26fc2:	d004      	beq.n	26fce <__aeabi_fmul+0x20a>
   26fc4:	220f      	movs	r2, #15
   26fc6:	401a      	ands	r2, r3
   26fc8:	2a04      	cmp	r2, #4
   26fca:	d000      	beq.n	26fce <__aeabi_fmul+0x20a>
   26fcc:	3304      	adds	r3, #4
   26fce:	015a      	lsls	r2, r3, #5
   26fd0:	d504      	bpl.n	26fdc <__aeabi_fmul+0x218>
   26fd2:	2401      	movs	r4, #1
   26fd4:	2201      	movs	r2, #1
   26fd6:	400c      	ands	r4, r1
   26fd8:	2000      	movs	r0, #0
   26fda:	e73d      	b.n	26e58 <__aeabi_fmul+0x94>
   26fdc:	2401      	movs	r4, #1
   26fde:	019b      	lsls	r3, r3, #6
   26fe0:	0a58      	lsrs	r0, r3, #9
   26fe2:	400c      	ands	r4, r1
   26fe4:	2200      	movs	r2, #0
   26fe6:	e737      	b.n	26e58 <__aeabi_fmul+0x94>
   26fe8:	2080      	movs	r0, #128	; 0x80
   26fea:	2401      	movs	r4, #1
   26fec:	03c0      	lsls	r0, r0, #15
   26fee:	4328      	orrs	r0, r5
   26ff0:	0240      	lsls	r0, r0, #9
   26ff2:	0a40      	lsrs	r0, r0, #9
   26ff4:	400c      	ands	r4, r1
   26ff6:	22ff      	movs	r2, #255	; 0xff
   26ff8:	e72e      	b.n	26e58 <__aeabi_fmul+0x94>
   26ffa:	46c0      	nop			; (mov r8, r8)
   26ffc:	0002ade8 	.word	0x0002ade8
   27000:	f7ffffff 	.word	0xf7ffffff

00027004 <__aeabi_i2f>:
   27004:	b570      	push	{r4, r5, r6, lr}
   27006:	2800      	cmp	r0, #0
   27008:	d030      	beq.n	2706c <__aeabi_i2f+0x68>
   2700a:	17c3      	asrs	r3, r0, #31
   2700c:	18c4      	adds	r4, r0, r3
   2700e:	405c      	eors	r4, r3
   27010:	0fc5      	lsrs	r5, r0, #31
   27012:	0020      	movs	r0, r4
   27014:	f001 fe86 	bl	28d24 <__clzsi2>
   27018:	239e      	movs	r3, #158	; 0x9e
   2701a:	1a1b      	subs	r3, r3, r0
   2701c:	2b96      	cmp	r3, #150	; 0x96
   2701e:	dc0d      	bgt.n	2703c <__aeabi_i2f+0x38>
   27020:	2296      	movs	r2, #150	; 0x96
   27022:	1ad2      	subs	r2, r2, r3
   27024:	4094      	lsls	r4, r2
   27026:	002a      	movs	r2, r5
   27028:	0264      	lsls	r4, r4, #9
   2702a:	0a64      	lsrs	r4, r4, #9
   2702c:	b2db      	uxtb	r3, r3
   2702e:	0264      	lsls	r4, r4, #9
   27030:	05db      	lsls	r3, r3, #23
   27032:	0a60      	lsrs	r0, r4, #9
   27034:	07d2      	lsls	r2, r2, #31
   27036:	4318      	orrs	r0, r3
   27038:	4310      	orrs	r0, r2
   2703a:	bd70      	pop	{r4, r5, r6, pc}
   2703c:	2b99      	cmp	r3, #153	; 0x99
   2703e:	dc19      	bgt.n	27074 <__aeabi_i2f+0x70>
   27040:	2299      	movs	r2, #153	; 0x99
   27042:	1ad2      	subs	r2, r2, r3
   27044:	2a00      	cmp	r2, #0
   27046:	dd29      	ble.n	2709c <__aeabi_i2f+0x98>
   27048:	4094      	lsls	r4, r2
   2704a:	0022      	movs	r2, r4
   2704c:	4c14      	ldr	r4, [pc, #80]	; (270a0 <__aeabi_i2f+0x9c>)
   2704e:	4014      	ands	r4, r2
   27050:	0751      	lsls	r1, r2, #29
   27052:	d004      	beq.n	2705e <__aeabi_i2f+0x5a>
   27054:	210f      	movs	r1, #15
   27056:	400a      	ands	r2, r1
   27058:	2a04      	cmp	r2, #4
   2705a:	d000      	beq.n	2705e <__aeabi_i2f+0x5a>
   2705c:	3404      	adds	r4, #4
   2705e:	0162      	lsls	r2, r4, #5
   27060:	d413      	bmi.n	2708a <__aeabi_i2f+0x86>
   27062:	01a4      	lsls	r4, r4, #6
   27064:	0a64      	lsrs	r4, r4, #9
   27066:	b2db      	uxtb	r3, r3
   27068:	002a      	movs	r2, r5
   2706a:	e7e0      	b.n	2702e <__aeabi_i2f+0x2a>
   2706c:	2200      	movs	r2, #0
   2706e:	2300      	movs	r3, #0
   27070:	2400      	movs	r4, #0
   27072:	e7dc      	b.n	2702e <__aeabi_i2f+0x2a>
   27074:	2205      	movs	r2, #5
   27076:	0021      	movs	r1, r4
   27078:	1a12      	subs	r2, r2, r0
   2707a:	40d1      	lsrs	r1, r2
   2707c:	22b9      	movs	r2, #185	; 0xb9
   2707e:	1ad2      	subs	r2, r2, r3
   27080:	4094      	lsls	r4, r2
   27082:	1e62      	subs	r2, r4, #1
   27084:	4194      	sbcs	r4, r2
   27086:	430c      	orrs	r4, r1
   27088:	e7da      	b.n	27040 <__aeabi_i2f+0x3c>
   2708a:	4b05      	ldr	r3, [pc, #20]	; (270a0 <__aeabi_i2f+0x9c>)
   2708c:	002a      	movs	r2, r5
   2708e:	401c      	ands	r4, r3
   27090:	239f      	movs	r3, #159	; 0x9f
   27092:	01a4      	lsls	r4, r4, #6
   27094:	1a1b      	subs	r3, r3, r0
   27096:	0a64      	lsrs	r4, r4, #9
   27098:	b2db      	uxtb	r3, r3
   2709a:	e7c8      	b.n	2702e <__aeabi_i2f+0x2a>
   2709c:	0022      	movs	r2, r4
   2709e:	e7d5      	b.n	2704c <__aeabi_i2f+0x48>
   270a0:	fbffffff 	.word	0xfbffffff

000270a4 <__aeabi_ui2f>:
   270a4:	b510      	push	{r4, lr}
   270a6:	1e04      	subs	r4, r0, #0
   270a8:	d027      	beq.n	270fa <__aeabi_ui2f+0x56>
   270aa:	f001 fe3b 	bl	28d24 <__clzsi2>
   270ae:	239e      	movs	r3, #158	; 0x9e
   270b0:	1a1b      	subs	r3, r3, r0
   270b2:	2b96      	cmp	r3, #150	; 0x96
   270b4:	dc0a      	bgt.n	270cc <__aeabi_ui2f+0x28>
   270b6:	2296      	movs	r2, #150	; 0x96
   270b8:	1ad2      	subs	r2, r2, r3
   270ba:	4094      	lsls	r4, r2
   270bc:	0264      	lsls	r4, r4, #9
   270be:	0a64      	lsrs	r4, r4, #9
   270c0:	b2db      	uxtb	r3, r3
   270c2:	0264      	lsls	r4, r4, #9
   270c4:	05db      	lsls	r3, r3, #23
   270c6:	0a60      	lsrs	r0, r4, #9
   270c8:	4318      	orrs	r0, r3
   270ca:	bd10      	pop	{r4, pc}
   270cc:	2b99      	cmp	r3, #153	; 0x99
   270ce:	dc17      	bgt.n	27100 <__aeabi_ui2f+0x5c>
   270d0:	2299      	movs	r2, #153	; 0x99
   270d2:	1ad2      	subs	r2, r2, r3
   270d4:	2a00      	cmp	r2, #0
   270d6:	dd27      	ble.n	27128 <__aeabi_ui2f+0x84>
   270d8:	4094      	lsls	r4, r2
   270da:	0022      	movs	r2, r4
   270dc:	4c13      	ldr	r4, [pc, #76]	; (2712c <__aeabi_ui2f+0x88>)
   270de:	4014      	ands	r4, r2
   270e0:	0751      	lsls	r1, r2, #29
   270e2:	d004      	beq.n	270ee <__aeabi_ui2f+0x4a>
   270e4:	210f      	movs	r1, #15
   270e6:	400a      	ands	r2, r1
   270e8:	2a04      	cmp	r2, #4
   270ea:	d000      	beq.n	270ee <__aeabi_ui2f+0x4a>
   270ec:	3404      	adds	r4, #4
   270ee:	0162      	lsls	r2, r4, #5
   270f0:	d412      	bmi.n	27118 <__aeabi_ui2f+0x74>
   270f2:	01a4      	lsls	r4, r4, #6
   270f4:	0a64      	lsrs	r4, r4, #9
   270f6:	b2db      	uxtb	r3, r3
   270f8:	e7e3      	b.n	270c2 <__aeabi_ui2f+0x1e>
   270fa:	2300      	movs	r3, #0
   270fc:	2400      	movs	r4, #0
   270fe:	e7e0      	b.n	270c2 <__aeabi_ui2f+0x1e>
   27100:	22b9      	movs	r2, #185	; 0xb9
   27102:	0021      	movs	r1, r4
   27104:	1ad2      	subs	r2, r2, r3
   27106:	4091      	lsls	r1, r2
   27108:	000a      	movs	r2, r1
   2710a:	1e51      	subs	r1, r2, #1
   2710c:	418a      	sbcs	r2, r1
   2710e:	2105      	movs	r1, #5
   27110:	1a09      	subs	r1, r1, r0
   27112:	40cc      	lsrs	r4, r1
   27114:	4314      	orrs	r4, r2
   27116:	e7db      	b.n	270d0 <__aeabi_ui2f+0x2c>
   27118:	4b04      	ldr	r3, [pc, #16]	; (2712c <__aeabi_ui2f+0x88>)
   2711a:	401c      	ands	r4, r3
   2711c:	239f      	movs	r3, #159	; 0x9f
   2711e:	01a4      	lsls	r4, r4, #6
   27120:	1a1b      	subs	r3, r3, r0
   27122:	0a64      	lsrs	r4, r4, #9
   27124:	b2db      	uxtb	r3, r3
   27126:	e7cc      	b.n	270c2 <__aeabi_ui2f+0x1e>
   27128:	0022      	movs	r2, r4
   2712a:	e7d7      	b.n	270dc <__aeabi_ui2f+0x38>
   2712c:	fbffffff 	.word	0xfbffffff

00027130 <__aeabi_dadd>:
   27130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27132:	4645      	mov	r5, r8
   27134:	46de      	mov	lr, fp
   27136:	4657      	mov	r7, sl
   27138:	464e      	mov	r6, r9
   2713a:	030c      	lsls	r4, r1, #12
   2713c:	b5e0      	push	{r5, r6, r7, lr}
   2713e:	004e      	lsls	r6, r1, #1
   27140:	0fc9      	lsrs	r1, r1, #31
   27142:	4688      	mov	r8, r1
   27144:	000d      	movs	r5, r1
   27146:	0a61      	lsrs	r1, r4, #9
   27148:	0f44      	lsrs	r4, r0, #29
   2714a:	430c      	orrs	r4, r1
   2714c:	00c7      	lsls	r7, r0, #3
   2714e:	0319      	lsls	r1, r3, #12
   27150:	0058      	lsls	r0, r3, #1
   27152:	0fdb      	lsrs	r3, r3, #31
   27154:	469b      	mov	fp, r3
   27156:	0a4b      	lsrs	r3, r1, #9
   27158:	0f51      	lsrs	r1, r2, #29
   2715a:	430b      	orrs	r3, r1
   2715c:	0d76      	lsrs	r6, r6, #21
   2715e:	0d40      	lsrs	r0, r0, #21
   27160:	0019      	movs	r1, r3
   27162:	00d2      	lsls	r2, r2, #3
   27164:	45d8      	cmp	r8, fp
   27166:	d100      	bne.n	2716a <__aeabi_dadd+0x3a>
   27168:	e0ae      	b.n	272c8 <__aeabi_dadd+0x198>
   2716a:	1a35      	subs	r5, r6, r0
   2716c:	2d00      	cmp	r5, #0
   2716e:	dc00      	bgt.n	27172 <__aeabi_dadd+0x42>
   27170:	e0f6      	b.n	27360 <__aeabi_dadd+0x230>
   27172:	2800      	cmp	r0, #0
   27174:	d10f      	bne.n	27196 <__aeabi_dadd+0x66>
   27176:	4313      	orrs	r3, r2
   27178:	d100      	bne.n	2717c <__aeabi_dadd+0x4c>
   2717a:	e0db      	b.n	27334 <__aeabi_dadd+0x204>
   2717c:	1e6b      	subs	r3, r5, #1
   2717e:	2b00      	cmp	r3, #0
   27180:	d000      	beq.n	27184 <__aeabi_dadd+0x54>
   27182:	e137      	b.n	273f4 <__aeabi_dadd+0x2c4>
   27184:	1aba      	subs	r2, r7, r2
   27186:	4297      	cmp	r7, r2
   27188:	41bf      	sbcs	r7, r7
   2718a:	1a64      	subs	r4, r4, r1
   2718c:	427f      	negs	r7, r7
   2718e:	1be4      	subs	r4, r4, r7
   27190:	2601      	movs	r6, #1
   27192:	0017      	movs	r7, r2
   27194:	e024      	b.n	271e0 <__aeabi_dadd+0xb0>
   27196:	4bc6      	ldr	r3, [pc, #792]	; (274b0 <__aeabi_dadd+0x380>)
   27198:	429e      	cmp	r6, r3
   2719a:	d04d      	beq.n	27238 <__aeabi_dadd+0x108>
   2719c:	2380      	movs	r3, #128	; 0x80
   2719e:	041b      	lsls	r3, r3, #16
   271a0:	4319      	orrs	r1, r3
   271a2:	2d38      	cmp	r5, #56	; 0x38
   271a4:	dd00      	ble.n	271a8 <__aeabi_dadd+0x78>
   271a6:	e107      	b.n	273b8 <__aeabi_dadd+0x288>
   271a8:	2d1f      	cmp	r5, #31
   271aa:	dd00      	ble.n	271ae <__aeabi_dadd+0x7e>
   271ac:	e138      	b.n	27420 <__aeabi_dadd+0x2f0>
   271ae:	2020      	movs	r0, #32
   271b0:	1b43      	subs	r3, r0, r5
   271b2:	469a      	mov	sl, r3
   271b4:	000b      	movs	r3, r1
   271b6:	4650      	mov	r0, sl
   271b8:	4083      	lsls	r3, r0
   271ba:	4699      	mov	r9, r3
   271bc:	0013      	movs	r3, r2
   271be:	4648      	mov	r0, r9
   271c0:	40eb      	lsrs	r3, r5
   271c2:	4318      	orrs	r0, r3
   271c4:	0003      	movs	r3, r0
   271c6:	4650      	mov	r0, sl
   271c8:	4082      	lsls	r2, r0
   271ca:	1e50      	subs	r0, r2, #1
   271cc:	4182      	sbcs	r2, r0
   271ce:	40e9      	lsrs	r1, r5
   271d0:	431a      	orrs	r2, r3
   271d2:	1aba      	subs	r2, r7, r2
   271d4:	1a61      	subs	r1, r4, r1
   271d6:	4297      	cmp	r7, r2
   271d8:	41a4      	sbcs	r4, r4
   271da:	0017      	movs	r7, r2
   271dc:	4264      	negs	r4, r4
   271de:	1b0c      	subs	r4, r1, r4
   271e0:	0223      	lsls	r3, r4, #8
   271e2:	d562      	bpl.n	272aa <__aeabi_dadd+0x17a>
   271e4:	0264      	lsls	r4, r4, #9
   271e6:	0a65      	lsrs	r5, r4, #9
   271e8:	2d00      	cmp	r5, #0
   271ea:	d100      	bne.n	271ee <__aeabi_dadd+0xbe>
   271ec:	e0df      	b.n	273ae <__aeabi_dadd+0x27e>
   271ee:	0028      	movs	r0, r5
   271f0:	f001 fd98 	bl	28d24 <__clzsi2>
   271f4:	0003      	movs	r3, r0
   271f6:	3b08      	subs	r3, #8
   271f8:	2b1f      	cmp	r3, #31
   271fa:	dd00      	ble.n	271fe <__aeabi_dadd+0xce>
   271fc:	e0d2      	b.n	273a4 <__aeabi_dadd+0x274>
   271fe:	2220      	movs	r2, #32
   27200:	003c      	movs	r4, r7
   27202:	1ad2      	subs	r2, r2, r3
   27204:	409d      	lsls	r5, r3
   27206:	40d4      	lsrs	r4, r2
   27208:	409f      	lsls	r7, r3
   2720a:	4325      	orrs	r5, r4
   2720c:	429e      	cmp	r6, r3
   2720e:	dd00      	ble.n	27212 <__aeabi_dadd+0xe2>
   27210:	e0c4      	b.n	2739c <__aeabi_dadd+0x26c>
   27212:	1b9e      	subs	r6, r3, r6
   27214:	1c73      	adds	r3, r6, #1
   27216:	2b1f      	cmp	r3, #31
   27218:	dd00      	ble.n	2721c <__aeabi_dadd+0xec>
   2721a:	e0f1      	b.n	27400 <__aeabi_dadd+0x2d0>
   2721c:	2220      	movs	r2, #32
   2721e:	0038      	movs	r0, r7
   27220:	0029      	movs	r1, r5
   27222:	1ad2      	subs	r2, r2, r3
   27224:	40d8      	lsrs	r0, r3
   27226:	4091      	lsls	r1, r2
   27228:	4097      	lsls	r7, r2
   2722a:	002c      	movs	r4, r5
   2722c:	4301      	orrs	r1, r0
   2722e:	1e78      	subs	r0, r7, #1
   27230:	4187      	sbcs	r7, r0
   27232:	40dc      	lsrs	r4, r3
   27234:	2600      	movs	r6, #0
   27236:	430f      	orrs	r7, r1
   27238:	077b      	lsls	r3, r7, #29
   2723a:	d009      	beq.n	27250 <__aeabi_dadd+0x120>
   2723c:	230f      	movs	r3, #15
   2723e:	403b      	ands	r3, r7
   27240:	2b04      	cmp	r3, #4
   27242:	d005      	beq.n	27250 <__aeabi_dadd+0x120>
   27244:	1d3b      	adds	r3, r7, #4
   27246:	42bb      	cmp	r3, r7
   27248:	41bf      	sbcs	r7, r7
   2724a:	427f      	negs	r7, r7
   2724c:	19e4      	adds	r4, r4, r7
   2724e:	001f      	movs	r7, r3
   27250:	0223      	lsls	r3, r4, #8
   27252:	d52c      	bpl.n	272ae <__aeabi_dadd+0x17e>
   27254:	4b96      	ldr	r3, [pc, #600]	; (274b0 <__aeabi_dadd+0x380>)
   27256:	3601      	adds	r6, #1
   27258:	429e      	cmp	r6, r3
   2725a:	d100      	bne.n	2725e <__aeabi_dadd+0x12e>
   2725c:	e09a      	b.n	27394 <__aeabi_dadd+0x264>
   2725e:	4645      	mov	r5, r8
   27260:	4b94      	ldr	r3, [pc, #592]	; (274b4 <__aeabi_dadd+0x384>)
   27262:	08ff      	lsrs	r7, r7, #3
   27264:	401c      	ands	r4, r3
   27266:	0760      	lsls	r0, r4, #29
   27268:	0576      	lsls	r6, r6, #21
   2726a:	0264      	lsls	r4, r4, #9
   2726c:	4307      	orrs	r7, r0
   2726e:	0b24      	lsrs	r4, r4, #12
   27270:	0d76      	lsrs	r6, r6, #21
   27272:	2100      	movs	r1, #0
   27274:	0324      	lsls	r4, r4, #12
   27276:	0b23      	lsrs	r3, r4, #12
   27278:	0d0c      	lsrs	r4, r1, #20
   2727a:	4a8f      	ldr	r2, [pc, #572]	; (274b8 <__aeabi_dadd+0x388>)
   2727c:	0524      	lsls	r4, r4, #20
   2727e:	431c      	orrs	r4, r3
   27280:	4014      	ands	r4, r2
   27282:	0533      	lsls	r3, r6, #20
   27284:	4323      	orrs	r3, r4
   27286:	005b      	lsls	r3, r3, #1
   27288:	07ed      	lsls	r5, r5, #31
   2728a:	085b      	lsrs	r3, r3, #1
   2728c:	432b      	orrs	r3, r5
   2728e:	0038      	movs	r0, r7
   27290:	0019      	movs	r1, r3
   27292:	bc3c      	pop	{r2, r3, r4, r5}
   27294:	4690      	mov	r8, r2
   27296:	4699      	mov	r9, r3
   27298:	46a2      	mov	sl, r4
   2729a:	46ab      	mov	fp, r5
   2729c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2729e:	4664      	mov	r4, ip
   272a0:	4304      	orrs	r4, r0
   272a2:	d100      	bne.n	272a6 <__aeabi_dadd+0x176>
   272a4:	e211      	b.n	276ca <__aeabi_dadd+0x59a>
   272a6:	0004      	movs	r4, r0
   272a8:	4667      	mov	r7, ip
   272aa:	077b      	lsls	r3, r7, #29
   272ac:	d1c6      	bne.n	2723c <__aeabi_dadd+0x10c>
   272ae:	4645      	mov	r5, r8
   272b0:	0760      	lsls	r0, r4, #29
   272b2:	08ff      	lsrs	r7, r7, #3
   272b4:	4307      	orrs	r7, r0
   272b6:	08e4      	lsrs	r4, r4, #3
   272b8:	4b7d      	ldr	r3, [pc, #500]	; (274b0 <__aeabi_dadd+0x380>)
   272ba:	429e      	cmp	r6, r3
   272bc:	d030      	beq.n	27320 <__aeabi_dadd+0x1f0>
   272be:	0324      	lsls	r4, r4, #12
   272c0:	0576      	lsls	r6, r6, #21
   272c2:	0b24      	lsrs	r4, r4, #12
   272c4:	0d76      	lsrs	r6, r6, #21
   272c6:	e7d4      	b.n	27272 <__aeabi_dadd+0x142>
   272c8:	1a33      	subs	r3, r6, r0
   272ca:	469a      	mov	sl, r3
   272cc:	2b00      	cmp	r3, #0
   272ce:	dd78      	ble.n	273c2 <__aeabi_dadd+0x292>
   272d0:	2800      	cmp	r0, #0
   272d2:	d031      	beq.n	27338 <__aeabi_dadd+0x208>
   272d4:	4876      	ldr	r0, [pc, #472]	; (274b0 <__aeabi_dadd+0x380>)
   272d6:	4286      	cmp	r6, r0
   272d8:	d0ae      	beq.n	27238 <__aeabi_dadd+0x108>
   272da:	2080      	movs	r0, #128	; 0x80
   272dc:	0400      	lsls	r0, r0, #16
   272de:	4301      	orrs	r1, r0
   272e0:	4653      	mov	r3, sl
   272e2:	2b38      	cmp	r3, #56	; 0x38
   272e4:	dc00      	bgt.n	272e8 <__aeabi_dadd+0x1b8>
   272e6:	e0e9      	b.n	274bc <__aeabi_dadd+0x38c>
   272e8:	430a      	orrs	r2, r1
   272ea:	1e51      	subs	r1, r2, #1
   272ec:	418a      	sbcs	r2, r1
   272ee:	2100      	movs	r1, #0
   272f0:	19d2      	adds	r2, r2, r7
   272f2:	42ba      	cmp	r2, r7
   272f4:	41bf      	sbcs	r7, r7
   272f6:	1909      	adds	r1, r1, r4
   272f8:	427c      	negs	r4, r7
   272fa:	0017      	movs	r7, r2
   272fc:	190c      	adds	r4, r1, r4
   272fe:	0223      	lsls	r3, r4, #8
   27300:	d5d3      	bpl.n	272aa <__aeabi_dadd+0x17a>
   27302:	4b6b      	ldr	r3, [pc, #428]	; (274b0 <__aeabi_dadd+0x380>)
   27304:	3601      	adds	r6, #1
   27306:	429e      	cmp	r6, r3
   27308:	d100      	bne.n	2730c <__aeabi_dadd+0x1dc>
   2730a:	e13a      	b.n	27582 <__aeabi_dadd+0x452>
   2730c:	2001      	movs	r0, #1
   2730e:	4b69      	ldr	r3, [pc, #420]	; (274b4 <__aeabi_dadd+0x384>)
   27310:	401c      	ands	r4, r3
   27312:	087b      	lsrs	r3, r7, #1
   27314:	4007      	ands	r7, r0
   27316:	431f      	orrs	r7, r3
   27318:	07e0      	lsls	r0, r4, #31
   2731a:	4307      	orrs	r7, r0
   2731c:	0864      	lsrs	r4, r4, #1
   2731e:	e78b      	b.n	27238 <__aeabi_dadd+0x108>
   27320:	0023      	movs	r3, r4
   27322:	433b      	orrs	r3, r7
   27324:	d100      	bne.n	27328 <__aeabi_dadd+0x1f8>
   27326:	e1cb      	b.n	276c0 <__aeabi_dadd+0x590>
   27328:	2280      	movs	r2, #128	; 0x80
   2732a:	0312      	lsls	r2, r2, #12
   2732c:	4314      	orrs	r4, r2
   2732e:	0324      	lsls	r4, r4, #12
   27330:	0b24      	lsrs	r4, r4, #12
   27332:	e79e      	b.n	27272 <__aeabi_dadd+0x142>
   27334:	002e      	movs	r6, r5
   27336:	e77f      	b.n	27238 <__aeabi_dadd+0x108>
   27338:	0008      	movs	r0, r1
   2733a:	4310      	orrs	r0, r2
   2733c:	d100      	bne.n	27340 <__aeabi_dadd+0x210>
   2733e:	e0b4      	b.n	274aa <__aeabi_dadd+0x37a>
   27340:	1e58      	subs	r0, r3, #1
   27342:	2800      	cmp	r0, #0
   27344:	d000      	beq.n	27348 <__aeabi_dadd+0x218>
   27346:	e0de      	b.n	27506 <__aeabi_dadd+0x3d6>
   27348:	18ba      	adds	r2, r7, r2
   2734a:	42ba      	cmp	r2, r7
   2734c:	419b      	sbcs	r3, r3
   2734e:	1864      	adds	r4, r4, r1
   27350:	425b      	negs	r3, r3
   27352:	18e4      	adds	r4, r4, r3
   27354:	0017      	movs	r7, r2
   27356:	2601      	movs	r6, #1
   27358:	0223      	lsls	r3, r4, #8
   2735a:	d5a6      	bpl.n	272aa <__aeabi_dadd+0x17a>
   2735c:	2602      	movs	r6, #2
   2735e:	e7d5      	b.n	2730c <__aeabi_dadd+0x1dc>
   27360:	2d00      	cmp	r5, #0
   27362:	d16e      	bne.n	27442 <__aeabi_dadd+0x312>
   27364:	1c70      	adds	r0, r6, #1
   27366:	0540      	lsls	r0, r0, #21
   27368:	0d40      	lsrs	r0, r0, #21
   2736a:	2801      	cmp	r0, #1
   2736c:	dc00      	bgt.n	27370 <__aeabi_dadd+0x240>
   2736e:	e0f9      	b.n	27564 <__aeabi_dadd+0x434>
   27370:	1ab8      	subs	r0, r7, r2
   27372:	4684      	mov	ip, r0
   27374:	4287      	cmp	r7, r0
   27376:	4180      	sbcs	r0, r0
   27378:	1ae5      	subs	r5, r4, r3
   2737a:	4240      	negs	r0, r0
   2737c:	1a2d      	subs	r5, r5, r0
   2737e:	0228      	lsls	r0, r5, #8
   27380:	d400      	bmi.n	27384 <__aeabi_dadd+0x254>
   27382:	e089      	b.n	27498 <__aeabi_dadd+0x368>
   27384:	1bd7      	subs	r7, r2, r7
   27386:	42ba      	cmp	r2, r7
   27388:	4192      	sbcs	r2, r2
   2738a:	1b1c      	subs	r4, r3, r4
   2738c:	4252      	negs	r2, r2
   2738e:	1aa5      	subs	r5, r4, r2
   27390:	46d8      	mov	r8, fp
   27392:	e729      	b.n	271e8 <__aeabi_dadd+0xb8>
   27394:	4645      	mov	r5, r8
   27396:	2400      	movs	r4, #0
   27398:	2700      	movs	r7, #0
   2739a:	e76a      	b.n	27272 <__aeabi_dadd+0x142>
   2739c:	4c45      	ldr	r4, [pc, #276]	; (274b4 <__aeabi_dadd+0x384>)
   2739e:	1af6      	subs	r6, r6, r3
   273a0:	402c      	ands	r4, r5
   273a2:	e749      	b.n	27238 <__aeabi_dadd+0x108>
   273a4:	003d      	movs	r5, r7
   273a6:	3828      	subs	r0, #40	; 0x28
   273a8:	4085      	lsls	r5, r0
   273aa:	2700      	movs	r7, #0
   273ac:	e72e      	b.n	2720c <__aeabi_dadd+0xdc>
   273ae:	0038      	movs	r0, r7
   273b0:	f001 fcb8 	bl	28d24 <__clzsi2>
   273b4:	3020      	adds	r0, #32
   273b6:	e71d      	b.n	271f4 <__aeabi_dadd+0xc4>
   273b8:	430a      	orrs	r2, r1
   273ba:	1e51      	subs	r1, r2, #1
   273bc:	418a      	sbcs	r2, r1
   273be:	2100      	movs	r1, #0
   273c0:	e707      	b.n	271d2 <__aeabi_dadd+0xa2>
   273c2:	2b00      	cmp	r3, #0
   273c4:	d000      	beq.n	273c8 <__aeabi_dadd+0x298>
   273c6:	e0f3      	b.n	275b0 <__aeabi_dadd+0x480>
   273c8:	1c70      	adds	r0, r6, #1
   273ca:	0543      	lsls	r3, r0, #21
   273cc:	0d5b      	lsrs	r3, r3, #21
   273ce:	2b01      	cmp	r3, #1
   273d0:	dc00      	bgt.n	273d4 <__aeabi_dadd+0x2a4>
   273d2:	e0ad      	b.n	27530 <__aeabi_dadd+0x400>
   273d4:	4b36      	ldr	r3, [pc, #216]	; (274b0 <__aeabi_dadd+0x380>)
   273d6:	4298      	cmp	r0, r3
   273d8:	d100      	bne.n	273dc <__aeabi_dadd+0x2ac>
   273da:	e0d1      	b.n	27580 <__aeabi_dadd+0x450>
   273dc:	18ba      	adds	r2, r7, r2
   273de:	42ba      	cmp	r2, r7
   273e0:	41bf      	sbcs	r7, r7
   273e2:	1864      	adds	r4, r4, r1
   273e4:	427f      	negs	r7, r7
   273e6:	19e4      	adds	r4, r4, r7
   273e8:	07e7      	lsls	r7, r4, #31
   273ea:	0852      	lsrs	r2, r2, #1
   273ec:	4317      	orrs	r7, r2
   273ee:	0864      	lsrs	r4, r4, #1
   273f0:	0006      	movs	r6, r0
   273f2:	e721      	b.n	27238 <__aeabi_dadd+0x108>
   273f4:	482e      	ldr	r0, [pc, #184]	; (274b0 <__aeabi_dadd+0x380>)
   273f6:	4285      	cmp	r5, r0
   273f8:	d100      	bne.n	273fc <__aeabi_dadd+0x2cc>
   273fa:	e093      	b.n	27524 <__aeabi_dadd+0x3f4>
   273fc:	001d      	movs	r5, r3
   273fe:	e6d0      	b.n	271a2 <__aeabi_dadd+0x72>
   27400:	0029      	movs	r1, r5
   27402:	3e1f      	subs	r6, #31
   27404:	40f1      	lsrs	r1, r6
   27406:	2b20      	cmp	r3, #32
   27408:	d100      	bne.n	2740c <__aeabi_dadd+0x2dc>
   2740a:	e08d      	b.n	27528 <__aeabi_dadd+0x3f8>
   2740c:	2240      	movs	r2, #64	; 0x40
   2740e:	1ad3      	subs	r3, r2, r3
   27410:	409d      	lsls	r5, r3
   27412:	432f      	orrs	r7, r5
   27414:	1e7d      	subs	r5, r7, #1
   27416:	41af      	sbcs	r7, r5
   27418:	2400      	movs	r4, #0
   2741a:	430f      	orrs	r7, r1
   2741c:	2600      	movs	r6, #0
   2741e:	e744      	b.n	272aa <__aeabi_dadd+0x17a>
   27420:	002b      	movs	r3, r5
   27422:	0008      	movs	r0, r1
   27424:	3b20      	subs	r3, #32
   27426:	40d8      	lsrs	r0, r3
   27428:	0003      	movs	r3, r0
   2742a:	2d20      	cmp	r5, #32
   2742c:	d100      	bne.n	27430 <__aeabi_dadd+0x300>
   2742e:	e07d      	b.n	2752c <__aeabi_dadd+0x3fc>
   27430:	2040      	movs	r0, #64	; 0x40
   27432:	1b45      	subs	r5, r0, r5
   27434:	40a9      	lsls	r1, r5
   27436:	430a      	orrs	r2, r1
   27438:	1e51      	subs	r1, r2, #1
   2743a:	418a      	sbcs	r2, r1
   2743c:	2100      	movs	r1, #0
   2743e:	431a      	orrs	r2, r3
   27440:	e6c7      	b.n	271d2 <__aeabi_dadd+0xa2>
   27442:	2e00      	cmp	r6, #0
   27444:	d050      	beq.n	274e8 <__aeabi_dadd+0x3b8>
   27446:	4e1a      	ldr	r6, [pc, #104]	; (274b0 <__aeabi_dadd+0x380>)
   27448:	42b0      	cmp	r0, r6
   2744a:	d057      	beq.n	274fc <__aeabi_dadd+0x3cc>
   2744c:	2680      	movs	r6, #128	; 0x80
   2744e:	426b      	negs	r3, r5
   27450:	4699      	mov	r9, r3
   27452:	0436      	lsls	r6, r6, #16
   27454:	4334      	orrs	r4, r6
   27456:	464b      	mov	r3, r9
   27458:	2b38      	cmp	r3, #56	; 0x38
   2745a:	dd00      	ble.n	2745e <__aeabi_dadd+0x32e>
   2745c:	e0d6      	b.n	2760c <__aeabi_dadd+0x4dc>
   2745e:	2b1f      	cmp	r3, #31
   27460:	dd00      	ble.n	27464 <__aeabi_dadd+0x334>
   27462:	e135      	b.n	276d0 <__aeabi_dadd+0x5a0>
   27464:	2620      	movs	r6, #32
   27466:	1af5      	subs	r5, r6, r3
   27468:	0026      	movs	r6, r4
   2746a:	40ae      	lsls	r6, r5
   2746c:	46b2      	mov	sl, r6
   2746e:	003e      	movs	r6, r7
   27470:	40de      	lsrs	r6, r3
   27472:	46ac      	mov	ip, r5
   27474:	0035      	movs	r5, r6
   27476:	4656      	mov	r6, sl
   27478:	432e      	orrs	r6, r5
   2747a:	4665      	mov	r5, ip
   2747c:	40af      	lsls	r7, r5
   2747e:	1e7d      	subs	r5, r7, #1
   27480:	41af      	sbcs	r7, r5
   27482:	40dc      	lsrs	r4, r3
   27484:	4337      	orrs	r7, r6
   27486:	1bd7      	subs	r7, r2, r7
   27488:	42ba      	cmp	r2, r7
   2748a:	4192      	sbcs	r2, r2
   2748c:	1b0c      	subs	r4, r1, r4
   2748e:	4252      	negs	r2, r2
   27490:	1aa4      	subs	r4, r4, r2
   27492:	0006      	movs	r6, r0
   27494:	46d8      	mov	r8, fp
   27496:	e6a3      	b.n	271e0 <__aeabi_dadd+0xb0>
   27498:	4664      	mov	r4, ip
   2749a:	4667      	mov	r7, ip
   2749c:	432c      	orrs	r4, r5
   2749e:	d000      	beq.n	274a2 <__aeabi_dadd+0x372>
   274a0:	e6a2      	b.n	271e8 <__aeabi_dadd+0xb8>
   274a2:	2500      	movs	r5, #0
   274a4:	2600      	movs	r6, #0
   274a6:	2700      	movs	r7, #0
   274a8:	e706      	b.n	272b8 <__aeabi_dadd+0x188>
   274aa:	001e      	movs	r6, r3
   274ac:	e6c4      	b.n	27238 <__aeabi_dadd+0x108>
   274ae:	46c0      	nop			; (mov r8, r8)
   274b0:	000007ff 	.word	0x000007ff
   274b4:	ff7fffff 	.word	0xff7fffff
   274b8:	800fffff 	.word	0x800fffff
   274bc:	2b1f      	cmp	r3, #31
   274be:	dc63      	bgt.n	27588 <__aeabi_dadd+0x458>
   274c0:	2020      	movs	r0, #32
   274c2:	1ac3      	subs	r3, r0, r3
   274c4:	0008      	movs	r0, r1
   274c6:	4098      	lsls	r0, r3
   274c8:	469c      	mov	ip, r3
   274ca:	4683      	mov	fp, r0
   274cc:	4653      	mov	r3, sl
   274ce:	0010      	movs	r0, r2
   274d0:	40d8      	lsrs	r0, r3
   274d2:	0003      	movs	r3, r0
   274d4:	4658      	mov	r0, fp
   274d6:	4318      	orrs	r0, r3
   274d8:	4663      	mov	r3, ip
   274da:	409a      	lsls	r2, r3
   274dc:	1e53      	subs	r3, r2, #1
   274de:	419a      	sbcs	r2, r3
   274e0:	4653      	mov	r3, sl
   274e2:	4302      	orrs	r2, r0
   274e4:	40d9      	lsrs	r1, r3
   274e6:	e703      	b.n	272f0 <__aeabi_dadd+0x1c0>
   274e8:	0026      	movs	r6, r4
   274ea:	433e      	orrs	r6, r7
   274ec:	d006      	beq.n	274fc <__aeabi_dadd+0x3cc>
   274ee:	43eb      	mvns	r3, r5
   274f0:	4699      	mov	r9, r3
   274f2:	2b00      	cmp	r3, #0
   274f4:	d0c7      	beq.n	27486 <__aeabi_dadd+0x356>
   274f6:	4e94      	ldr	r6, [pc, #592]	; (27748 <__aeabi_dadd+0x618>)
   274f8:	42b0      	cmp	r0, r6
   274fa:	d1ac      	bne.n	27456 <__aeabi_dadd+0x326>
   274fc:	000c      	movs	r4, r1
   274fe:	0017      	movs	r7, r2
   27500:	0006      	movs	r6, r0
   27502:	46d8      	mov	r8, fp
   27504:	e698      	b.n	27238 <__aeabi_dadd+0x108>
   27506:	4b90      	ldr	r3, [pc, #576]	; (27748 <__aeabi_dadd+0x618>)
   27508:	459a      	cmp	sl, r3
   2750a:	d00b      	beq.n	27524 <__aeabi_dadd+0x3f4>
   2750c:	4682      	mov	sl, r0
   2750e:	e6e7      	b.n	272e0 <__aeabi_dadd+0x1b0>
   27510:	2800      	cmp	r0, #0
   27512:	d000      	beq.n	27516 <__aeabi_dadd+0x3e6>
   27514:	e09e      	b.n	27654 <__aeabi_dadd+0x524>
   27516:	0018      	movs	r0, r3
   27518:	4310      	orrs	r0, r2
   2751a:	d100      	bne.n	2751e <__aeabi_dadd+0x3ee>
   2751c:	e0e9      	b.n	276f2 <__aeabi_dadd+0x5c2>
   2751e:	001c      	movs	r4, r3
   27520:	0017      	movs	r7, r2
   27522:	46d8      	mov	r8, fp
   27524:	4e88      	ldr	r6, [pc, #544]	; (27748 <__aeabi_dadd+0x618>)
   27526:	e687      	b.n	27238 <__aeabi_dadd+0x108>
   27528:	2500      	movs	r5, #0
   2752a:	e772      	b.n	27412 <__aeabi_dadd+0x2e2>
   2752c:	2100      	movs	r1, #0
   2752e:	e782      	b.n	27436 <__aeabi_dadd+0x306>
   27530:	0023      	movs	r3, r4
   27532:	433b      	orrs	r3, r7
   27534:	2e00      	cmp	r6, #0
   27536:	d000      	beq.n	2753a <__aeabi_dadd+0x40a>
   27538:	e0ab      	b.n	27692 <__aeabi_dadd+0x562>
   2753a:	2b00      	cmp	r3, #0
   2753c:	d100      	bne.n	27540 <__aeabi_dadd+0x410>
   2753e:	e0e7      	b.n	27710 <__aeabi_dadd+0x5e0>
   27540:	000b      	movs	r3, r1
   27542:	4313      	orrs	r3, r2
   27544:	d100      	bne.n	27548 <__aeabi_dadd+0x418>
   27546:	e677      	b.n	27238 <__aeabi_dadd+0x108>
   27548:	18ba      	adds	r2, r7, r2
   2754a:	42ba      	cmp	r2, r7
   2754c:	41bf      	sbcs	r7, r7
   2754e:	1864      	adds	r4, r4, r1
   27550:	427f      	negs	r7, r7
   27552:	19e4      	adds	r4, r4, r7
   27554:	0223      	lsls	r3, r4, #8
   27556:	d400      	bmi.n	2755a <__aeabi_dadd+0x42a>
   27558:	e0f2      	b.n	27740 <__aeabi_dadd+0x610>
   2755a:	4b7c      	ldr	r3, [pc, #496]	; (2774c <__aeabi_dadd+0x61c>)
   2755c:	0017      	movs	r7, r2
   2755e:	401c      	ands	r4, r3
   27560:	0006      	movs	r6, r0
   27562:	e669      	b.n	27238 <__aeabi_dadd+0x108>
   27564:	0020      	movs	r0, r4
   27566:	4338      	orrs	r0, r7
   27568:	2e00      	cmp	r6, #0
   2756a:	d1d1      	bne.n	27510 <__aeabi_dadd+0x3e0>
   2756c:	2800      	cmp	r0, #0
   2756e:	d15b      	bne.n	27628 <__aeabi_dadd+0x4f8>
   27570:	001c      	movs	r4, r3
   27572:	4314      	orrs	r4, r2
   27574:	d100      	bne.n	27578 <__aeabi_dadd+0x448>
   27576:	e0a8      	b.n	276ca <__aeabi_dadd+0x59a>
   27578:	001c      	movs	r4, r3
   2757a:	0017      	movs	r7, r2
   2757c:	46d8      	mov	r8, fp
   2757e:	e65b      	b.n	27238 <__aeabi_dadd+0x108>
   27580:	0006      	movs	r6, r0
   27582:	2400      	movs	r4, #0
   27584:	2700      	movs	r7, #0
   27586:	e697      	b.n	272b8 <__aeabi_dadd+0x188>
   27588:	4650      	mov	r0, sl
   2758a:	000b      	movs	r3, r1
   2758c:	3820      	subs	r0, #32
   2758e:	40c3      	lsrs	r3, r0
   27590:	4699      	mov	r9, r3
   27592:	4653      	mov	r3, sl
   27594:	2b20      	cmp	r3, #32
   27596:	d100      	bne.n	2759a <__aeabi_dadd+0x46a>
   27598:	e095      	b.n	276c6 <__aeabi_dadd+0x596>
   2759a:	2340      	movs	r3, #64	; 0x40
   2759c:	4650      	mov	r0, sl
   2759e:	1a1b      	subs	r3, r3, r0
   275a0:	4099      	lsls	r1, r3
   275a2:	430a      	orrs	r2, r1
   275a4:	1e51      	subs	r1, r2, #1
   275a6:	418a      	sbcs	r2, r1
   275a8:	464b      	mov	r3, r9
   275aa:	2100      	movs	r1, #0
   275ac:	431a      	orrs	r2, r3
   275ae:	e69f      	b.n	272f0 <__aeabi_dadd+0x1c0>
   275b0:	2e00      	cmp	r6, #0
   275b2:	d130      	bne.n	27616 <__aeabi_dadd+0x4e6>
   275b4:	0026      	movs	r6, r4
   275b6:	433e      	orrs	r6, r7
   275b8:	d067      	beq.n	2768a <__aeabi_dadd+0x55a>
   275ba:	43db      	mvns	r3, r3
   275bc:	469a      	mov	sl, r3
   275be:	2b00      	cmp	r3, #0
   275c0:	d01c      	beq.n	275fc <__aeabi_dadd+0x4cc>
   275c2:	4e61      	ldr	r6, [pc, #388]	; (27748 <__aeabi_dadd+0x618>)
   275c4:	42b0      	cmp	r0, r6
   275c6:	d060      	beq.n	2768a <__aeabi_dadd+0x55a>
   275c8:	4653      	mov	r3, sl
   275ca:	2b38      	cmp	r3, #56	; 0x38
   275cc:	dd00      	ble.n	275d0 <__aeabi_dadd+0x4a0>
   275ce:	e096      	b.n	276fe <__aeabi_dadd+0x5ce>
   275d0:	2b1f      	cmp	r3, #31
   275d2:	dd00      	ble.n	275d6 <__aeabi_dadd+0x4a6>
   275d4:	e09f      	b.n	27716 <__aeabi_dadd+0x5e6>
   275d6:	2620      	movs	r6, #32
   275d8:	1af3      	subs	r3, r6, r3
   275da:	0026      	movs	r6, r4
   275dc:	409e      	lsls	r6, r3
   275de:	469c      	mov	ip, r3
   275e0:	46b3      	mov	fp, r6
   275e2:	4653      	mov	r3, sl
   275e4:	003e      	movs	r6, r7
   275e6:	40de      	lsrs	r6, r3
   275e8:	0033      	movs	r3, r6
   275ea:	465e      	mov	r6, fp
   275ec:	431e      	orrs	r6, r3
   275ee:	4663      	mov	r3, ip
   275f0:	409f      	lsls	r7, r3
   275f2:	1e7b      	subs	r3, r7, #1
   275f4:	419f      	sbcs	r7, r3
   275f6:	4653      	mov	r3, sl
   275f8:	40dc      	lsrs	r4, r3
   275fa:	4337      	orrs	r7, r6
   275fc:	18bf      	adds	r7, r7, r2
   275fe:	4297      	cmp	r7, r2
   27600:	4192      	sbcs	r2, r2
   27602:	1864      	adds	r4, r4, r1
   27604:	4252      	negs	r2, r2
   27606:	18a4      	adds	r4, r4, r2
   27608:	0006      	movs	r6, r0
   2760a:	e678      	b.n	272fe <__aeabi_dadd+0x1ce>
   2760c:	4327      	orrs	r7, r4
   2760e:	1e7c      	subs	r4, r7, #1
   27610:	41a7      	sbcs	r7, r4
   27612:	2400      	movs	r4, #0
   27614:	e737      	b.n	27486 <__aeabi_dadd+0x356>
   27616:	4e4c      	ldr	r6, [pc, #304]	; (27748 <__aeabi_dadd+0x618>)
   27618:	42b0      	cmp	r0, r6
   2761a:	d036      	beq.n	2768a <__aeabi_dadd+0x55a>
   2761c:	2680      	movs	r6, #128	; 0x80
   2761e:	425b      	negs	r3, r3
   27620:	0436      	lsls	r6, r6, #16
   27622:	469a      	mov	sl, r3
   27624:	4334      	orrs	r4, r6
   27626:	e7cf      	b.n	275c8 <__aeabi_dadd+0x498>
   27628:	0018      	movs	r0, r3
   2762a:	4310      	orrs	r0, r2
   2762c:	d100      	bne.n	27630 <__aeabi_dadd+0x500>
   2762e:	e603      	b.n	27238 <__aeabi_dadd+0x108>
   27630:	1ab8      	subs	r0, r7, r2
   27632:	4684      	mov	ip, r0
   27634:	4567      	cmp	r7, ip
   27636:	41ad      	sbcs	r5, r5
   27638:	1ae0      	subs	r0, r4, r3
   2763a:	426d      	negs	r5, r5
   2763c:	1b40      	subs	r0, r0, r5
   2763e:	0205      	lsls	r5, r0, #8
   27640:	d400      	bmi.n	27644 <__aeabi_dadd+0x514>
   27642:	e62c      	b.n	2729e <__aeabi_dadd+0x16e>
   27644:	1bd7      	subs	r7, r2, r7
   27646:	42ba      	cmp	r2, r7
   27648:	4192      	sbcs	r2, r2
   2764a:	1b1c      	subs	r4, r3, r4
   2764c:	4252      	negs	r2, r2
   2764e:	1aa4      	subs	r4, r4, r2
   27650:	46d8      	mov	r8, fp
   27652:	e5f1      	b.n	27238 <__aeabi_dadd+0x108>
   27654:	0018      	movs	r0, r3
   27656:	4310      	orrs	r0, r2
   27658:	d100      	bne.n	2765c <__aeabi_dadd+0x52c>
   2765a:	e763      	b.n	27524 <__aeabi_dadd+0x3f4>
   2765c:	08f8      	lsrs	r0, r7, #3
   2765e:	0767      	lsls	r7, r4, #29
   27660:	4307      	orrs	r7, r0
   27662:	2080      	movs	r0, #128	; 0x80
   27664:	08e4      	lsrs	r4, r4, #3
   27666:	0300      	lsls	r0, r0, #12
   27668:	4204      	tst	r4, r0
   2766a:	d008      	beq.n	2767e <__aeabi_dadd+0x54e>
   2766c:	08dd      	lsrs	r5, r3, #3
   2766e:	4205      	tst	r5, r0
   27670:	d105      	bne.n	2767e <__aeabi_dadd+0x54e>
   27672:	08d2      	lsrs	r2, r2, #3
   27674:	0759      	lsls	r1, r3, #29
   27676:	4311      	orrs	r1, r2
   27678:	000f      	movs	r7, r1
   2767a:	002c      	movs	r4, r5
   2767c:	46d8      	mov	r8, fp
   2767e:	0f7b      	lsrs	r3, r7, #29
   27680:	00e4      	lsls	r4, r4, #3
   27682:	431c      	orrs	r4, r3
   27684:	00ff      	lsls	r7, r7, #3
   27686:	4e30      	ldr	r6, [pc, #192]	; (27748 <__aeabi_dadd+0x618>)
   27688:	e5d6      	b.n	27238 <__aeabi_dadd+0x108>
   2768a:	000c      	movs	r4, r1
   2768c:	0017      	movs	r7, r2
   2768e:	0006      	movs	r6, r0
   27690:	e5d2      	b.n	27238 <__aeabi_dadd+0x108>
   27692:	2b00      	cmp	r3, #0
   27694:	d038      	beq.n	27708 <__aeabi_dadd+0x5d8>
   27696:	000b      	movs	r3, r1
   27698:	4313      	orrs	r3, r2
   2769a:	d100      	bne.n	2769e <__aeabi_dadd+0x56e>
   2769c:	e742      	b.n	27524 <__aeabi_dadd+0x3f4>
   2769e:	08f8      	lsrs	r0, r7, #3
   276a0:	0767      	lsls	r7, r4, #29
   276a2:	4307      	orrs	r7, r0
   276a4:	2080      	movs	r0, #128	; 0x80
   276a6:	08e4      	lsrs	r4, r4, #3
   276a8:	0300      	lsls	r0, r0, #12
   276aa:	4204      	tst	r4, r0
   276ac:	d0e7      	beq.n	2767e <__aeabi_dadd+0x54e>
   276ae:	08cb      	lsrs	r3, r1, #3
   276b0:	4203      	tst	r3, r0
   276b2:	d1e4      	bne.n	2767e <__aeabi_dadd+0x54e>
   276b4:	08d2      	lsrs	r2, r2, #3
   276b6:	0749      	lsls	r1, r1, #29
   276b8:	4311      	orrs	r1, r2
   276ba:	000f      	movs	r7, r1
   276bc:	001c      	movs	r4, r3
   276be:	e7de      	b.n	2767e <__aeabi_dadd+0x54e>
   276c0:	2700      	movs	r7, #0
   276c2:	2400      	movs	r4, #0
   276c4:	e5d5      	b.n	27272 <__aeabi_dadd+0x142>
   276c6:	2100      	movs	r1, #0
   276c8:	e76b      	b.n	275a2 <__aeabi_dadd+0x472>
   276ca:	2500      	movs	r5, #0
   276cc:	2700      	movs	r7, #0
   276ce:	e5f3      	b.n	272b8 <__aeabi_dadd+0x188>
   276d0:	464e      	mov	r6, r9
   276d2:	0025      	movs	r5, r4
   276d4:	3e20      	subs	r6, #32
   276d6:	40f5      	lsrs	r5, r6
   276d8:	464b      	mov	r3, r9
   276da:	002e      	movs	r6, r5
   276dc:	2b20      	cmp	r3, #32
   276de:	d02d      	beq.n	2773c <__aeabi_dadd+0x60c>
   276e0:	2540      	movs	r5, #64	; 0x40
   276e2:	1aed      	subs	r5, r5, r3
   276e4:	40ac      	lsls	r4, r5
   276e6:	4327      	orrs	r7, r4
   276e8:	1e7c      	subs	r4, r7, #1
   276ea:	41a7      	sbcs	r7, r4
   276ec:	2400      	movs	r4, #0
   276ee:	4337      	orrs	r7, r6
   276f0:	e6c9      	b.n	27486 <__aeabi_dadd+0x356>
   276f2:	2480      	movs	r4, #128	; 0x80
   276f4:	2500      	movs	r5, #0
   276f6:	0324      	lsls	r4, r4, #12
   276f8:	4e13      	ldr	r6, [pc, #76]	; (27748 <__aeabi_dadd+0x618>)
   276fa:	2700      	movs	r7, #0
   276fc:	e5dc      	b.n	272b8 <__aeabi_dadd+0x188>
   276fe:	4327      	orrs	r7, r4
   27700:	1e7c      	subs	r4, r7, #1
   27702:	41a7      	sbcs	r7, r4
   27704:	2400      	movs	r4, #0
   27706:	e779      	b.n	275fc <__aeabi_dadd+0x4cc>
   27708:	000c      	movs	r4, r1
   2770a:	0017      	movs	r7, r2
   2770c:	4e0e      	ldr	r6, [pc, #56]	; (27748 <__aeabi_dadd+0x618>)
   2770e:	e593      	b.n	27238 <__aeabi_dadd+0x108>
   27710:	000c      	movs	r4, r1
   27712:	0017      	movs	r7, r2
   27714:	e590      	b.n	27238 <__aeabi_dadd+0x108>
   27716:	4656      	mov	r6, sl
   27718:	0023      	movs	r3, r4
   2771a:	3e20      	subs	r6, #32
   2771c:	40f3      	lsrs	r3, r6
   2771e:	4699      	mov	r9, r3
   27720:	4653      	mov	r3, sl
   27722:	2b20      	cmp	r3, #32
   27724:	d00e      	beq.n	27744 <__aeabi_dadd+0x614>
   27726:	2340      	movs	r3, #64	; 0x40
   27728:	4656      	mov	r6, sl
   2772a:	1b9b      	subs	r3, r3, r6
   2772c:	409c      	lsls	r4, r3
   2772e:	4327      	orrs	r7, r4
   27730:	1e7c      	subs	r4, r7, #1
   27732:	41a7      	sbcs	r7, r4
   27734:	464b      	mov	r3, r9
   27736:	2400      	movs	r4, #0
   27738:	431f      	orrs	r7, r3
   2773a:	e75f      	b.n	275fc <__aeabi_dadd+0x4cc>
   2773c:	2400      	movs	r4, #0
   2773e:	e7d2      	b.n	276e6 <__aeabi_dadd+0x5b6>
   27740:	0017      	movs	r7, r2
   27742:	e5b2      	b.n	272aa <__aeabi_dadd+0x17a>
   27744:	2400      	movs	r4, #0
   27746:	e7f2      	b.n	2772e <__aeabi_dadd+0x5fe>
   27748:	000007ff 	.word	0x000007ff
   2774c:	ff7fffff 	.word	0xff7fffff

00027750 <__aeabi_ddiv>:
   27750:	b5f0      	push	{r4, r5, r6, r7, lr}
   27752:	4657      	mov	r7, sl
   27754:	4645      	mov	r5, r8
   27756:	46de      	mov	lr, fp
   27758:	464e      	mov	r6, r9
   2775a:	b5e0      	push	{r5, r6, r7, lr}
   2775c:	004c      	lsls	r4, r1, #1
   2775e:	030e      	lsls	r6, r1, #12
   27760:	b087      	sub	sp, #28
   27762:	4683      	mov	fp, r0
   27764:	4692      	mov	sl, r2
   27766:	001d      	movs	r5, r3
   27768:	4680      	mov	r8, r0
   2776a:	0b36      	lsrs	r6, r6, #12
   2776c:	0d64      	lsrs	r4, r4, #21
   2776e:	0fcf      	lsrs	r7, r1, #31
   27770:	2c00      	cmp	r4, #0
   27772:	d04f      	beq.n	27814 <__aeabi_ddiv+0xc4>
   27774:	4b6f      	ldr	r3, [pc, #444]	; (27934 <__aeabi_ddiv+0x1e4>)
   27776:	429c      	cmp	r4, r3
   27778:	d035      	beq.n	277e6 <__aeabi_ddiv+0x96>
   2777a:	2380      	movs	r3, #128	; 0x80
   2777c:	0f42      	lsrs	r2, r0, #29
   2777e:	041b      	lsls	r3, r3, #16
   27780:	00f6      	lsls	r6, r6, #3
   27782:	4313      	orrs	r3, r2
   27784:	4333      	orrs	r3, r6
   27786:	4699      	mov	r9, r3
   27788:	00c3      	lsls	r3, r0, #3
   2778a:	4698      	mov	r8, r3
   2778c:	4b6a      	ldr	r3, [pc, #424]	; (27938 <__aeabi_ddiv+0x1e8>)
   2778e:	2600      	movs	r6, #0
   27790:	469c      	mov	ip, r3
   27792:	2300      	movs	r3, #0
   27794:	4464      	add	r4, ip
   27796:	9303      	str	r3, [sp, #12]
   27798:	032b      	lsls	r3, r5, #12
   2779a:	0b1b      	lsrs	r3, r3, #12
   2779c:	469b      	mov	fp, r3
   2779e:	006b      	lsls	r3, r5, #1
   277a0:	0fed      	lsrs	r5, r5, #31
   277a2:	4650      	mov	r0, sl
   277a4:	0d5b      	lsrs	r3, r3, #21
   277a6:	9501      	str	r5, [sp, #4]
   277a8:	d05e      	beq.n	27868 <__aeabi_ddiv+0x118>
   277aa:	4a62      	ldr	r2, [pc, #392]	; (27934 <__aeabi_ddiv+0x1e4>)
   277ac:	4293      	cmp	r3, r2
   277ae:	d053      	beq.n	27858 <__aeabi_ddiv+0x108>
   277b0:	465a      	mov	r2, fp
   277b2:	00d1      	lsls	r1, r2, #3
   277b4:	2280      	movs	r2, #128	; 0x80
   277b6:	0f40      	lsrs	r0, r0, #29
   277b8:	0412      	lsls	r2, r2, #16
   277ba:	4302      	orrs	r2, r0
   277bc:	430a      	orrs	r2, r1
   277be:	4693      	mov	fp, r2
   277c0:	4652      	mov	r2, sl
   277c2:	00d1      	lsls	r1, r2, #3
   277c4:	4a5c      	ldr	r2, [pc, #368]	; (27938 <__aeabi_ddiv+0x1e8>)
   277c6:	4694      	mov	ip, r2
   277c8:	2200      	movs	r2, #0
   277ca:	4463      	add	r3, ip
   277cc:	0038      	movs	r0, r7
   277ce:	4068      	eors	r0, r5
   277d0:	4684      	mov	ip, r0
   277d2:	9002      	str	r0, [sp, #8]
   277d4:	1ae4      	subs	r4, r4, r3
   277d6:	4316      	orrs	r6, r2
   277d8:	2e0f      	cmp	r6, #15
   277da:	d900      	bls.n	277de <__aeabi_ddiv+0x8e>
   277dc:	e0b4      	b.n	27948 <__aeabi_ddiv+0x1f8>
   277de:	4b57      	ldr	r3, [pc, #348]	; (2793c <__aeabi_ddiv+0x1ec>)
   277e0:	00b6      	lsls	r6, r6, #2
   277e2:	599b      	ldr	r3, [r3, r6]
   277e4:	469f      	mov	pc, r3
   277e6:	0003      	movs	r3, r0
   277e8:	4333      	orrs	r3, r6
   277ea:	4699      	mov	r9, r3
   277ec:	d16c      	bne.n	278c8 <__aeabi_ddiv+0x178>
   277ee:	2300      	movs	r3, #0
   277f0:	4698      	mov	r8, r3
   277f2:	3302      	adds	r3, #2
   277f4:	2608      	movs	r6, #8
   277f6:	9303      	str	r3, [sp, #12]
   277f8:	e7ce      	b.n	27798 <__aeabi_ddiv+0x48>
   277fa:	46cb      	mov	fp, r9
   277fc:	4641      	mov	r1, r8
   277fe:	9a03      	ldr	r2, [sp, #12]
   27800:	9701      	str	r7, [sp, #4]
   27802:	2a02      	cmp	r2, #2
   27804:	d165      	bne.n	278d2 <__aeabi_ddiv+0x182>
   27806:	9b01      	ldr	r3, [sp, #4]
   27808:	4c4a      	ldr	r4, [pc, #296]	; (27934 <__aeabi_ddiv+0x1e4>)
   2780a:	469c      	mov	ip, r3
   2780c:	2300      	movs	r3, #0
   2780e:	2200      	movs	r2, #0
   27810:	4698      	mov	r8, r3
   27812:	e06b      	b.n	278ec <__aeabi_ddiv+0x19c>
   27814:	0003      	movs	r3, r0
   27816:	4333      	orrs	r3, r6
   27818:	4699      	mov	r9, r3
   2781a:	d04e      	beq.n	278ba <__aeabi_ddiv+0x16a>
   2781c:	2e00      	cmp	r6, #0
   2781e:	d100      	bne.n	27822 <__aeabi_ddiv+0xd2>
   27820:	e1bc      	b.n	27b9c <__aeabi_ddiv+0x44c>
   27822:	0030      	movs	r0, r6
   27824:	f001 fa7e 	bl	28d24 <__clzsi2>
   27828:	0003      	movs	r3, r0
   2782a:	3b0b      	subs	r3, #11
   2782c:	2b1c      	cmp	r3, #28
   2782e:	dd00      	ble.n	27832 <__aeabi_ddiv+0xe2>
   27830:	e1ac      	b.n	27b8c <__aeabi_ddiv+0x43c>
   27832:	221d      	movs	r2, #29
   27834:	1ad3      	subs	r3, r2, r3
   27836:	465a      	mov	r2, fp
   27838:	0001      	movs	r1, r0
   2783a:	40da      	lsrs	r2, r3
   2783c:	3908      	subs	r1, #8
   2783e:	408e      	lsls	r6, r1
   27840:	0013      	movs	r3, r2
   27842:	4333      	orrs	r3, r6
   27844:	4699      	mov	r9, r3
   27846:	465b      	mov	r3, fp
   27848:	408b      	lsls	r3, r1
   2784a:	4698      	mov	r8, r3
   2784c:	2300      	movs	r3, #0
   2784e:	4c3c      	ldr	r4, [pc, #240]	; (27940 <__aeabi_ddiv+0x1f0>)
   27850:	2600      	movs	r6, #0
   27852:	1a24      	subs	r4, r4, r0
   27854:	9303      	str	r3, [sp, #12]
   27856:	e79f      	b.n	27798 <__aeabi_ddiv+0x48>
   27858:	4651      	mov	r1, sl
   2785a:	465a      	mov	r2, fp
   2785c:	4311      	orrs	r1, r2
   2785e:	d129      	bne.n	278b4 <__aeabi_ddiv+0x164>
   27860:	2200      	movs	r2, #0
   27862:	4693      	mov	fp, r2
   27864:	3202      	adds	r2, #2
   27866:	e7b1      	b.n	277cc <__aeabi_ddiv+0x7c>
   27868:	4659      	mov	r1, fp
   2786a:	4301      	orrs	r1, r0
   2786c:	d01e      	beq.n	278ac <__aeabi_ddiv+0x15c>
   2786e:	465b      	mov	r3, fp
   27870:	2b00      	cmp	r3, #0
   27872:	d100      	bne.n	27876 <__aeabi_ddiv+0x126>
   27874:	e19e      	b.n	27bb4 <__aeabi_ddiv+0x464>
   27876:	4658      	mov	r0, fp
   27878:	f001 fa54 	bl	28d24 <__clzsi2>
   2787c:	0003      	movs	r3, r0
   2787e:	3b0b      	subs	r3, #11
   27880:	2b1c      	cmp	r3, #28
   27882:	dd00      	ble.n	27886 <__aeabi_ddiv+0x136>
   27884:	e18f      	b.n	27ba6 <__aeabi_ddiv+0x456>
   27886:	0002      	movs	r2, r0
   27888:	4659      	mov	r1, fp
   2788a:	3a08      	subs	r2, #8
   2788c:	4091      	lsls	r1, r2
   2788e:	468b      	mov	fp, r1
   27890:	211d      	movs	r1, #29
   27892:	1acb      	subs	r3, r1, r3
   27894:	4651      	mov	r1, sl
   27896:	40d9      	lsrs	r1, r3
   27898:	000b      	movs	r3, r1
   2789a:	4659      	mov	r1, fp
   2789c:	430b      	orrs	r3, r1
   2789e:	4651      	mov	r1, sl
   278a0:	469b      	mov	fp, r3
   278a2:	4091      	lsls	r1, r2
   278a4:	4b26      	ldr	r3, [pc, #152]	; (27940 <__aeabi_ddiv+0x1f0>)
   278a6:	2200      	movs	r2, #0
   278a8:	1a1b      	subs	r3, r3, r0
   278aa:	e78f      	b.n	277cc <__aeabi_ddiv+0x7c>
   278ac:	2300      	movs	r3, #0
   278ae:	2201      	movs	r2, #1
   278b0:	469b      	mov	fp, r3
   278b2:	e78b      	b.n	277cc <__aeabi_ddiv+0x7c>
   278b4:	4651      	mov	r1, sl
   278b6:	2203      	movs	r2, #3
   278b8:	e788      	b.n	277cc <__aeabi_ddiv+0x7c>
   278ba:	2300      	movs	r3, #0
   278bc:	4698      	mov	r8, r3
   278be:	3301      	adds	r3, #1
   278c0:	2604      	movs	r6, #4
   278c2:	2400      	movs	r4, #0
   278c4:	9303      	str	r3, [sp, #12]
   278c6:	e767      	b.n	27798 <__aeabi_ddiv+0x48>
   278c8:	2303      	movs	r3, #3
   278ca:	46b1      	mov	r9, r6
   278cc:	9303      	str	r3, [sp, #12]
   278ce:	260c      	movs	r6, #12
   278d0:	e762      	b.n	27798 <__aeabi_ddiv+0x48>
   278d2:	2a03      	cmp	r2, #3
   278d4:	d100      	bne.n	278d8 <__aeabi_ddiv+0x188>
   278d6:	e25c      	b.n	27d92 <__aeabi_ddiv+0x642>
   278d8:	9b01      	ldr	r3, [sp, #4]
   278da:	2a01      	cmp	r2, #1
   278dc:	d000      	beq.n	278e0 <__aeabi_ddiv+0x190>
   278de:	e1e4      	b.n	27caa <__aeabi_ddiv+0x55a>
   278e0:	4013      	ands	r3, r2
   278e2:	469c      	mov	ip, r3
   278e4:	2300      	movs	r3, #0
   278e6:	2400      	movs	r4, #0
   278e8:	2200      	movs	r2, #0
   278ea:	4698      	mov	r8, r3
   278ec:	2100      	movs	r1, #0
   278ee:	0312      	lsls	r2, r2, #12
   278f0:	0b13      	lsrs	r3, r2, #12
   278f2:	0d0a      	lsrs	r2, r1, #20
   278f4:	0512      	lsls	r2, r2, #20
   278f6:	431a      	orrs	r2, r3
   278f8:	0523      	lsls	r3, r4, #20
   278fa:	4c12      	ldr	r4, [pc, #72]	; (27944 <__aeabi_ddiv+0x1f4>)
   278fc:	4640      	mov	r0, r8
   278fe:	4022      	ands	r2, r4
   27900:	4313      	orrs	r3, r2
   27902:	4662      	mov	r2, ip
   27904:	005b      	lsls	r3, r3, #1
   27906:	07d2      	lsls	r2, r2, #31
   27908:	085b      	lsrs	r3, r3, #1
   2790a:	4313      	orrs	r3, r2
   2790c:	0019      	movs	r1, r3
   2790e:	b007      	add	sp, #28
   27910:	bc3c      	pop	{r2, r3, r4, r5}
   27912:	4690      	mov	r8, r2
   27914:	4699      	mov	r9, r3
   27916:	46a2      	mov	sl, r4
   27918:	46ab      	mov	fp, r5
   2791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2791c:	2300      	movs	r3, #0
   2791e:	2280      	movs	r2, #128	; 0x80
   27920:	469c      	mov	ip, r3
   27922:	0312      	lsls	r2, r2, #12
   27924:	4698      	mov	r8, r3
   27926:	4c03      	ldr	r4, [pc, #12]	; (27934 <__aeabi_ddiv+0x1e4>)
   27928:	e7e0      	b.n	278ec <__aeabi_ddiv+0x19c>
   2792a:	2300      	movs	r3, #0
   2792c:	4c01      	ldr	r4, [pc, #4]	; (27934 <__aeabi_ddiv+0x1e4>)
   2792e:	2200      	movs	r2, #0
   27930:	4698      	mov	r8, r3
   27932:	e7db      	b.n	278ec <__aeabi_ddiv+0x19c>
   27934:	000007ff 	.word	0x000007ff
   27938:	fffffc01 	.word	0xfffffc01
   2793c:	0002ae28 	.word	0x0002ae28
   27940:	fffffc0d 	.word	0xfffffc0d
   27944:	800fffff 	.word	0x800fffff
   27948:	45d9      	cmp	r9, fp
   2794a:	d900      	bls.n	2794e <__aeabi_ddiv+0x1fe>
   2794c:	e139      	b.n	27bc2 <__aeabi_ddiv+0x472>
   2794e:	d100      	bne.n	27952 <__aeabi_ddiv+0x202>
   27950:	e134      	b.n	27bbc <__aeabi_ddiv+0x46c>
   27952:	2300      	movs	r3, #0
   27954:	4646      	mov	r6, r8
   27956:	464d      	mov	r5, r9
   27958:	469a      	mov	sl, r3
   2795a:	3c01      	subs	r4, #1
   2795c:	465b      	mov	r3, fp
   2795e:	0e0a      	lsrs	r2, r1, #24
   27960:	021b      	lsls	r3, r3, #8
   27962:	431a      	orrs	r2, r3
   27964:	020b      	lsls	r3, r1, #8
   27966:	0c17      	lsrs	r7, r2, #16
   27968:	9303      	str	r3, [sp, #12]
   2796a:	0413      	lsls	r3, r2, #16
   2796c:	0c1b      	lsrs	r3, r3, #16
   2796e:	0039      	movs	r1, r7
   27970:	0028      	movs	r0, r5
   27972:	4690      	mov	r8, r2
   27974:	9301      	str	r3, [sp, #4]
   27976:	f7fe fe01 	bl	2657c <__udivsi3>
   2797a:	0002      	movs	r2, r0
   2797c:	9b01      	ldr	r3, [sp, #4]
   2797e:	4683      	mov	fp, r0
   27980:	435a      	muls	r2, r3
   27982:	0028      	movs	r0, r5
   27984:	0039      	movs	r1, r7
   27986:	4691      	mov	r9, r2
   27988:	f7fe fe7e 	bl	26688 <__aeabi_uidivmod>
   2798c:	0c35      	lsrs	r5, r6, #16
   2798e:	0409      	lsls	r1, r1, #16
   27990:	430d      	orrs	r5, r1
   27992:	45a9      	cmp	r9, r5
   27994:	d90d      	bls.n	279b2 <__aeabi_ddiv+0x262>
   27996:	465b      	mov	r3, fp
   27998:	4445      	add	r5, r8
   2799a:	3b01      	subs	r3, #1
   2799c:	45a8      	cmp	r8, r5
   2799e:	d900      	bls.n	279a2 <__aeabi_ddiv+0x252>
   279a0:	e13a      	b.n	27c18 <__aeabi_ddiv+0x4c8>
   279a2:	45a9      	cmp	r9, r5
   279a4:	d800      	bhi.n	279a8 <__aeabi_ddiv+0x258>
   279a6:	e137      	b.n	27c18 <__aeabi_ddiv+0x4c8>
   279a8:	2302      	movs	r3, #2
   279aa:	425b      	negs	r3, r3
   279ac:	469c      	mov	ip, r3
   279ae:	4445      	add	r5, r8
   279b0:	44e3      	add	fp, ip
   279b2:	464b      	mov	r3, r9
   279b4:	1aeb      	subs	r3, r5, r3
   279b6:	0039      	movs	r1, r7
   279b8:	0018      	movs	r0, r3
   279ba:	9304      	str	r3, [sp, #16]
   279bc:	f7fe fdde 	bl	2657c <__udivsi3>
   279c0:	9b01      	ldr	r3, [sp, #4]
   279c2:	0005      	movs	r5, r0
   279c4:	4343      	muls	r3, r0
   279c6:	0039      	movs	r1, r7
   279c8:	9804      	ldr	r0, [sp, #16]
   279ca:	4699      	mov	r9, r3
   279cc:	f7fe fe5c 	bl	26688 <__aeabi_uidivmod>
   279d0:	0433      	lsls	r3, r6, #16
   279d2:	0409      	lsls	r1, r1, #16
   279d4:	0c1b      	lsrs	r3, r3, #16
   279d6:	430b      	orrs	r3, r1
   279d8:	4599      	cmp	r9, r3
   279da:	d909      	bls.n	279f0 <__aeabi_ddiv+0x2a0>
   279dc:	4443      	add	r3, r8
   279de:	1e6a      	subs	r2, r5, #1
   279e0:	4598      	cmp	r8, r3
   279e2:	d900      	bls.n	279e6 <__aeabi_ddiv+0x296>
   279e4:	e11a      	b.n	27c1c <__aeabi_ddiv+0x4cc>
   279e6:	4599      	cmp	r9, r3
   279e8:	d800      	bhi.n	279ec <__aeabi_ddiv+0x29c>
   279ea:	e117      	b.n	27c1c <__aeabi_ddiv+0x4cc>
   279ec:	3d02      	subs	r5, #2
   279ee:	4443      	add	r3, r8
   279f0:	464a      	mov	r2, r9
   279f2:	1a9b      	subs	r3, r3, r2
   279f4:	465a      	mov	r2, fp
   279f6:	0412      	lsls	r2, r2, #16
   279f8:	432a      	orrs	r2, r5
   279fa:	9903      	ldr	r1, [sp, #12]
   279fc:	4693      	mov	fp, r2
   279fe:	0c10      	lsrs	r0, r2, #16
   27a00:	0c0a      	lsrs	r2, r1, #16
   27a02:	4691      	mov	r9, r2
   27a04:	0409      	lsls	r1, r1, #16
   27a06:	465a      	mov	r2, fp
   27a08:	0c09      	lsrs	r1, r1, #16
   27a0a:	464e      	mov	r6, r9
   27a0c:	000d      	movs	r5, r1
   27a0e:	0412      	lsls	r2, r2, #16
   27a10:	0c12      	lsrs	r2, r2, #16
   27a12:	4345      	muls	r5, r0
   27a14:	9105      	str	r1, [sp, #20]
   27a16:	4351      	muls	r1, r2
   27a18:	4372      	muls	r2, r6
   27a1a:	4370      	muls	r0, r6
   27a1c:	1952      	adds	r2, r2, r5
   27a1e:	0c0e      	lsrs	r6, r1, #16
   27a20:	18b2      	adds	r2, r6, r2
   27a22:	4295      	cmp	r5, r2
   27a24:	d903      	bls.n	27a2e <__aeabi_ddiv+0x2de>
   27a26:	2580      	movs	r5, #128	; 0x80
   27a28:	026d      	lsls	r5, r5, #9
   27a2a:	46ac      	mov	ip, r5
   27a2c:	4460      	add	r0, ip
   27a2e:	0c15      	lsrs	r5, r2, #16
   27a30:	0409      	lsls	r1, r1, #16
   27a32:	0412      	lsls	r2, r2, #16
   27a34:	0c09      	lsrs	r1, r1, #16
   27a36:	1828      	adds	r0, r5, r0
   27a38:	1852      	adds	r2, r2, r1
   27a3a:	4283      	cmp	r3, r0
   27a3c:	d200      	bcs.n	27a40 <__aeabi_ddiv+0x2f0>
   27a3e:	e0ce      	b.n	27bde <__aeabi_ddiv+0x48e>
   27a40:	d100      	bne.n	27a44 <__aeabi_ddiv+0x2f4>
   27a42:	e0c8      	b.n	27bd6 <__aeabi_ddiv+0x486>
   27a44:	1a1d      	subs	r5, r3, r0
   27a46:	4653      	mov	r3, sl
   27a48:	1a9e      	subs	r6, r3, r2
   27a4a:	45b2      	cmp	sl, r6
   27a4c:	4192      	sbcs	r2, r2
   27a4e:	4252      	negs	r2, r2
   27a50:	1aab      	subs	r3, r5, r2
   27a52:	469a      	mov	sl, r3
   27a54:	4598      	cmp	r8, r3
   27a56:	d100      	bne.n	27a5a <__aeabi_ddiv+0x30a>
   27a58:	e117      	b.n	27c8a <__aeabi_ddiv+0x53a>
   27a5a:	0039      	movs	r1, r7
   27a5c:	0018      	movs	r0, r3
   27a5e:	f7fe fd8d 	bl	2657c <__udivsi3>
   27a62:	9b01      	ldr	r3, [sp, #4]
   27a64:	0005      	movs	r5, r0
   27a66:	4343      	muls	r3, r0
   27a68:	0039      	movs	r1, r7
   27a6a:	4650      	mov	r0, sl
   27a6c:	9304      	str	r3, [sp, #16]
   27a6e:	f7fe fe0b 	bl	26688 <__aeabi_uidivmod>
   27a72:	9804      	ldr	r0, [sp, #16]
   27a74:	040b      	lsls	r3, r1, #16
   27a76:	0c31      	lsrs	r1, r6, #16
   27a78:	4319      	orrs	r1, r3
   27a7a:	4288      	cmp	r0, r1
   27a7c:	d909      	bls.n	27a92 <__aeabi_ddiv+0x342>
   27a7e:	4441      	add	r1, r8
   27a80:	1e6b      	subs	r3, r5, #1
   27a82:	4588      	cmp	r8, r1
   27a84:	d900      	bls.n	27a88 <__aeabi_ddiv+0x338>
   27a86:	e107      	b.n	27c98 <__aeabi_ddiv+0x548>
   27a88:	4288      	cmp	r0, r1
   27a8a:	d800      	bhi.n	27a8e <__aeabi_ddiv+0x33e>
   27a8c:	e104      	b.n	27c98 <__aeabi_ddiv+0x548>
   27a8e:	3d02      	subs	r5, #2
   27a90:	4441      	add	r1, r8
   27a92:	9b04      	ldr	r3, [sp, #16]
   27a94:	1acb      	subs	r3, r1, r3
   27a96:	0018      	movs	r0, r3
   27a98:	0039      	movs	r1, r7
   27a9a:	9304      	str	r3, [sp, #16]
   27a9c:	f7fe fd6e 	bl	2657c <__udivsi3>
   27aa0:	9b01      	ldr	r3, [sp, #4]
   27aa2:	4682      	mov	sl, r0
   27aa4:	4343      	muls	r3, r0
   27aa6:	0039      	movs	r1, r7
   27aa8:	9804      	ldr	r0, [sp, #16]
   27aaa:	9301      	str	r3, [sp, #4]
   27aac:	f7fe fdec 	bl	26688 <__aeabi_uidivmod>
   27ab0:	9801      	ldr	r0, [sp, #4]
   27ab2:	040b      	lsls	r3, r1, #16
   27ab4:	0431      	lsls	r1, r6, #16
   27ab6:	0c09      	lsrs	r1, r1, #16
   27ab8:	4319      	orrs	r1, r3
   27aba:	4288      	cmp	r0, r1
   27abc:	d90d      	bls.n	27ada <__aeabi_ddiv+0x38a>
   27abe:	4653      	mov	r3, sl
   27ac0:	4441      	add	r1, r8
   27ac2:	3b01      	subs	r3, #1
   27ac4:	4588      	cmp	r8, r1
   27ac6:	d900      	bls.n	27aca <__aeabi_ddiv+0x37a>
   27ac8:	e0e8      	b.n	27c9c <__aeabi_ddiv+0x54c>
   27aca:	4288      	cmp	r0, r1
   27acc:	d800      	bhi.n	27ad0 <__aeabi_ddiv+0x380>
   27ace:	e0e5      	b.n	27c9c <__aeabi_ddiv+0x54c>
   27ad0:	2302      	movs	r3, #2
   27ad2:	425b      	negs	r3, r3
   27ad4:	469c      	mov	ip, r3
   27ad6:	4441      	add	r1, r8
   27ad8:	44e2      	add	sl, ip
   27ada:	9b01      	ldr	r3, [sp, #4]
   27adc:	042d      	lsls	r5, r5, #16
   27ade:	1ace      	subs	r6, r1, r3
   27ae0:	4651      	mov	r1, sl
   27ae2:	4329      	orrs	r1, r5
   27ae4:	9d05      	ldr	r5, [sp, #20]
   27ae6:	464f      	mov	r7, r9
   27ae8:	002a      	movs	r2, r5
   27aea:	040b      	lsls	r3, r1, #16
   27aec:	0c08      	lsrs	r0, r1, #16
   27aee:	0c1b      	lsrs	r3, r3, #16
   27af0:	435a      	muls	r2, r3
   27af2:	4345      	muls	r5, r0
   27af4:	437b      	muls	r3, r7
   27af6:	4378      	muls	r0, r7
   27af8:	195b      	adds	r3, r3, r5
   27afa:	0c17      	lsrs	r7, r2, #16
   27afc:	18fb      	adds	r3, r7, r3
   27afe:	429d      	cmp	r5, r3
   27b00:	d903      	bls.n	27b0a <__aeabi_ddiv+0x3ba>
   27b02:	2580      	movs	r5, #128	; 0x80
   27b04:	026d      	lsls	r5, r5, #9
   27b06:	46ac      	mov	ip, r5
   27b08:	4460      	add	r0, ip
   27b0a:	0c1d      	lsrs	r5, r3, #16
   27b0c:	0412      	lsls	r2, r2, #16
   27b0e:	041b      	lsls	r3, r3, #16
   27b10:	0c12      	lsrs	r2, r2, #16
   27b12:	1828      	adds	r0, r5, r0
   27b14:	189b      	adds	r3, r3, r2
   27b16:	4286      	cmp	r6, r0
   27b18:	d200      	bcs.n	27b1c <__aeabi_ddiv+0x3cc>
   27b1a:	e093      	b.n	27c44 <__aeabi_ddiv+0x4f4>
   27b1c:	d100      	bne.n	27b20 <__aeabi_ddiv+0x3d0>
   27b1e:	e08e      	b.n	27c3e <__aeabi_ddiv+0x4ee>
   27b20:	2301      	movs	r3, #1
   27b22:	4319      	orrs	r1, r3
   27b24:	4ba0      	ldr	r3, [pc, #640]	; (27da8 <__aeabi_ddiv+0x658>)
   27b26:	18e3      	adds	r3, r4, r3
   27b28:	2b00      	cmp	r3, #0
   27b2a:	dc00      	bgt.n	27b2e <__aeabi_ddiv+0x3de>
   27b2c:	e099      	b.n	27c62 <__aeabi_ddiv+0x512>
   27b2e:	074a      	lsls	r2, r1, #29
   27b30:	d000      	beq.n	27b34 <__aeabi_ddiv+0x3e4>
   27b32:	e09e      	b.n	27c72 <__aeabi_ddiv+0x522>
   27b34:	465a      	mov	r2, fp
   27b36:	01d2      	lsls	r2, r2, #7
   27b38:	d506      	bpl.n	27b48 <__aeabi_ddiv+0x3f8>
   27b3a:	465a      	mov	r2, fp
   27b3c:	4b9b      	ldr	r3, [pc, #620]	; (27dac <__aeabi_ddiv+0x65c>)
   27b3e:	401a      	ands	r2, r3
   27b40:	2380      	movs	r3, #128	; 0x80
   27b42:	4693      	mov	fp, r2
   27b44:	00db      	lsls	r3, r3, #3
   27b46:	18e3      	adds	r3, r4, r3
   27b48:	4a99      	ldr	r2, [pc, #612]	; (27db0 <__aeabi_ddiv+0x660>)
   27b4a:	4293      	cmp	r3, r2
   27b4c:	dd68      	ble.n	27c20 <__aeabi_ddiv+0x4d0>
   27b4e:	2301      	movs	r3, #1
   27b50:	9a02      	ldr	r2, [sp, #8]
   27b52:	4c98      	ldr	r4, [pc, #608]	; (27db4 <__aeabi_ddiv+0x664>)
   27b54:	401a      	ands	r2, r3
   27b56:	2300      	movs	r3, #0
   27b58:	4694      	mov	ip, r2
   27b5a:	4698      	mov	r8, r3
   27b5c:	2200      	movs	r2, #0
   27b5e:	e6c5      	b.n	278ec <__aeabi_ddiv+0x19c>
   27b60:	2280      	movs	r2, #128	; 0x80
   27b62:	464b      	mov	r3, r9
   27b64:	0312      	lsls	r2, r2, #12
   27b66:	4213      	tst	r3, r2
   27b68:	d00a      	beq.n	27b80 <__aeabi_ddiv+0x430>
   27b6a:	465b      	mov	r3, fp
   27b6c:	4213      	tst	r3, r2
   27b6e:	d106      	bne.n	27b7e <__aeabi_ddiv+0x42e>
   27b70:	431a      	orrs	r2, r3
   27b72:	0312      	lsls	r2, r2, #12
   27b74:	0b12      	lsrs	r2, r2, #12
   27b76:	46ac      	mov	ip, r5
   27b78:	4688      	mov	r8, r1
   27b7a:	4c8e      	ldr	r4, [pc, #568]	; (27db4 <__aeabi_ddiv+0x664>)
   27b7c:	e6b6      	b.n	278ec <__aeabi_ddiv+0x19c>
   27b7e:	464b      	mov	r3, r9
   27b80:	431a      	orrs	r2, r3
   27b82:	0312      	lsls	r2, r2, #12
   27b84:	0b12      	lsrs	r2, r2, #12
   27b86:	46bc      	mov	ip, r7
   27b88:	4c8a      	ldr	r4, [pc, #552]	; (27db4 <__aeabi_ddiv+0x664>)
   27b8a:	e6af      	b.n	278ec <__aeabi_ddiv+0x19c>
   27b8c:	0003      	movs	r3, r0
   27b8e:	465a      	mov	r2, fp
   27b90:	3b28      	subs	r3, #40	; 0x28
   27b92:	409a      	lsls	r2, r3
   27b94:	2300      	movs	r3, #0
   27b96:	4691      	mov	r9, r2
   27b98:	4698      	mov	r8, r3
   27b9a:	e657      	b.n	2784c <__aeabi_ddiv+0xfc>
   27b9c:	4658      	mov	r0, fp
   27b9e:	f001 f8c1 	bl	28d24 <__clzsi2>
   27ba2:	3020      	adds	r0, #32
   27ba4:	e640      	b.n	27828 <__aeabi_ddiv+0xd8>
   27ba6:	0003      	movs	r3, r0
   27ba8:	4652      	mov	r2, sl
   27baa:	3b28      	subs	r3, #40	; 0x28
   27bac:	409a      	lsls	r2, r3
   27bae:	2100      	movs	r1, #0
   27bb0:	4693      	mov	fp, r2
   27bb2:	e677      	b.n	278a4 <__aeabi_ddiv+0x154>
   27bb4:	f001 f8b6 	bl	28d24 <__clzsi2>
   27bb8:	3020      	adds	r0, #32
   27bba:	e65f      	b.n	2787c <__aeabi_ddiv+0x12c>
   27bbc:	4588      	cmp	r8, r1
   27bbe:	d200      	bcs.n	27bc2 <__aeabi_ddiv+0x472>
   27bc0:	e6c7      	b.n	27952 <__aeabi_ddiv+0x202>
   27bc2:	464b      	mov	r3, r9
   27bc4:	07de      	lsls	r6, r3, #31
   27bc6:	085d      	lsrs	r5, r3, #1
   27bc8:	4643      	mov	r3, r8
   27bca:	085b      	lsrs	r3, r3, #1
   27bcc:	431e      	orrs	r6, r3
   27bce:	4643      	mov	r3, r8
   27bd0:	07db      	lsls	r3, r3, #31
   27bd2:	469a      	mov	sl, r3
   27bd4:	e6c2      	b.n	2795c <__aeabi_ddiv+0x20c>
   27bd6:	2500      	movs	r5, #0
   27bd8:	4592      	cmp	sl, r2
   27bda:	d300      	bcc.n	27bde <__aeabi_ddiv+0x48e>
   27bdc:	e733      	b.n	27a46 <__aeabi_ddiv+0x2f6>
   27bde:	9e03      	ldr	r6, [sp, #12]
   27be0:	4659      	mov	r1, fp
   27be2:	46b4      	mov	ip, r6
   27be4:	44e2      	add	sl, ip
   27be6:	45b2      	cmp	sl, r6
   27be8:	41ad      	sbcs	r5, r5
   27bea:	426d      	negs	r5, r5
   27bec:	4445      	add	r5, r8
   27bee:	18eb      	adds	r3, r5, r3
   27bf0:	3901      	subs	r1, #1
   27bf2:	4598      	cmp	r8, r3
   27bf4:	d207      	bcs.n	27c06 <__aeabi_ddiv+0x4b6>
   27bf6:	4298      	cmp	r0, r3
   27bf8:	d900      	bls.n	27bfc <__aeabi_ddiv+0x4ac>
   27bfa:	e07f      	b.n	27cfc <__aeabi_ddiv+0x5ac>
   27bfc:	d100      	bne.n	27c00 <__aeabi_ddiv+0x4b0>
   27bfe:	e0bc      	b.n	27d7a <__aeabi_ddiv+0x62a>
   27c00:	1a1d      	subs	r5, r3, r0
   27c02:	468b      	mov	fp, r1
   27c04:	e71f      	b.n	27a46 <__aeabi_ddiv+0x2f6>
   27c06:	4598      	cmp	r8, r3
   27c08:	d1fa      	bne.n	27c00 <__aeabi_ddiv+0x4b0>
   27c0a:	9d03      	ldr	r5, [sp, #12]
   27c0c:	4555      	cmp	r5, sl
   27c0e:	d9f2      	bls.n	27bf6 <__aeabi_ddiv+0x4a6>
   27c10:	4643      	mov	r3, r8
   27c12:	468b      	mov	fp, r1
   27c14:	1a1d      	subs	r5, r3, r0
   27c16:	e716      	b.n	27a46 <__aeabi_ddiv+0x2f6>
   27c18:	469b      	mov	fp, r3
   27c1a:	e6ca      	b.n	279b2 <__aeabi_ddiv+0x262>
   27c1c:	0015      	movs	r5, r2
   27c1e:	e6e7      	b.n	279f0 <__aeabi_ddiv+0x2a0>
   27c20:	465a      	mov	r2, fp
   27c22:	08c9      	lsrs	r1, r1, #3
   27c24:	0752      	lsls	r2, r2, #29
   27c26:	430a      	orrs	r2, r1
   27c28:	055b      	lsls	r3, r3, #21
   27c2a:	4690      	mov	r8, r2
   27c2c:	0d5c      	lsrs	r4, r3, #21
   27c2e:	465a      	mov	r2, fp
   27c30:	2301      	movs	r3, #1
   27c32:	9902      	ldr	r1, [sp, #8]
   27c34:	0252      	lsls	r2, r2, #9
   27c36:	4019      	ands	r1, r3
   27c38:	0b12      	lsrs	r2, r2, #12
   27c3a:	468c      	mov	ip, r1
   27c3c:	e656      	b.n	278ec <__aeabi_ddiv+0x19c>
   27c3e:	2b00      	cmp	r3, #0
   27c40:	d100      	bne.n	27c44 <__aeabi_ddiv+0x4f4>
   27c42:	e76f      	b.n	27b24 <__aeabi_ddiv+0x3d4>
   27c44:	4446      	add	r6, r8
   27c46:	1e4a      	subs	r2, r1, #1
   27c48:	45b0      	cmp	r8, r6
   27c4a:	d929      	bls.n	27ca0 <__aeabi_ddiv+0x550>
   27c4c:	0011      	movs	r1, r2
   27c4e:	4286      	cmp	r6, r0
   27c50:	d000      	beq.n	27c54 <__aeabi_ddiv+0x504>
   27c52:	e765      	b.n	27b20 <__aeabi_ddiv+0x3d0>
   27c54:	9a03      	ldr	r2, [sp, #12]
   27c56:	4293      	cmp	r3, r2
   27c58:	d000      	beq.n	27c5c <__aeabi_ddiv+0x50c>
   27c5a:	e761      	b.n	27b20 <__aeabi_ddiv+0x3d0>
   27c5c:	e762      	b.n	27b24 <__aeabi_ddiv+0x3d4>
   27c5e:	2101      	movs	r1, #1
   27c60:	4249      	negs	r1, r1
   27c62:	2001      	movs	r0, #1
   27c64:	1ac2      	subs	r2, r0, r3
   27c66:	2a38      	cmp	r2, #56	; 0x38
   27c68:	dd21      	ble.n	27cae <__aeabi_ddiv+0x55e>
   27c6a:	9b02      	ldr	r3, [sp, #8]
   27c6c:	4003      	ands	r3, r0
   27c6e:	469c      	mov	ip, r3
   27c70:	e638      	b.n	278e4 <__aeabi_ddiv+0x194>
   27c72:	220f      	movs	r2, #15
   27c74:	400a      	ands	r2, r1
   27c76:	2a04      	cmp	r2, #4
   27c78:	d100      	bne.n	27c7c <__aeabi_ddiv+0x52c>
   27c7a:	e75b      	b.n	27b34 <__aeabi_ddiv+0x3e4>
   27c7c:	000a      	movs	r2, r1
   27c7e:	1d11      	adds	r1, r2, #4
   27c80:	4291      	cmp	r1, r2
   27c82:	4192      	sbcs	r2, r2
   27c84:	4252      	negs	r2, r2
   27c86:	4493      	add	fp, r2
   27c88:	e754      	b.n	27b34 <__aeabi_ddiv+0x3e4>
   27c8a:	4b47      	ldr	r3, [pc, #284]	; (27da8 <__aeabi_ddiv+0x658>)
   27c8c:	18e3      	adds	r3, r4, r3
   27c8e:	2b00      	cmp	r3, #0
   27c90:	dde5      	ble.n	27c5e <__aeabi_ddiv+0x50e>
   27c92:	2201      	movs	r2, #1
   27c94:	4252      	negs	r2, r2
   27c96:	e7f2      	b.n	27c7e <__aeabi_ddiv+0x52e>
   27c98:	001d      	movs	r5, r3
   27c9a:	e6fa      	b.n	27a92 <__aeabi_ddiv+0x342>
   27c9c:	469a      	mov	sl, r3
   27c9e:	e71c      	b.n	27ada <__aeabi_ddiv+0x38a>
   27ca0:	42b0      	cmp	r0, r6
   27ca2:	d839      	bhi.n	27d18 <__aeabi_ddiv+0x5c8>
   27ca4:	d06e      	beq.n	27d84 <__aeabi_ddiv+0x634>
   27ca6:	0011      	movs	r1, r2
   27ca8:	e73a      	b.n	27b20 <__aeabi_ddiv+0x3d0>
   27caa:	9302      	str	r3, [sp, #8]
   27cac:	e73a      	b.n	27b24 <__aeabi_ddiv+0x3d4>
   27cae:	2a1f      	cmp	r2, #31
   27cb0:	dc3c      	bgt.n	27d2c <__aeabi_ddiv+0x5dc>
   27cb2:	2320      	movs	r3, #32
   27cb4:	1a9b      	subs	r3, r3, r2
   27cb6:	000c      	movs	r4, r1
   27cb8:	4658      	mov	r0, fp
   27cba:	4099      	lsls	r1, r3
   27cbc:	4098      	lsls	r0, r3
   27cbe:	1e4b      	subs	r3, r1, #1
   27cc0:	4199      	sbcs	r1, r3
   27cc2:	465b      	mov	r3, fp
   27cc4:	40d4      	lsrs	r4, r2
   27cc6:	40d3      	lsrs	r3, r2
   27cc8:	4320      	orrs	r0, r4
   27cca:	4308      	orrs	r0, r1
   27ccc:	001a      	movs	r2, r3
   27cce:	0743      	lsls	r3, r0, #29
   27cd0:	d009      	beq.n	27ce6 <__aeabi_ddiv+0x596>
   27cd2:	230f      	movs	r3, #15
   27cd4:	4003      	ands	r3, r0
   27cd6:	2b04      	cmp	r3, #4
   27cd8:	d005      	beq.n	27ce6 <__aeabi_ddiv+0x596>
   27cda:	0001      	movs	r1, r0
   27cdc:	1d08      	adds	r0, r1, #4
   27cde:	4288      	cmp	r0, r1
   27ce0:	419b      	sbcs	r3, r3
   27ce2:	425b      	negs	r3, r3
   27ce4:	18d2      	adds	r2, r2, r3
   27ce6:	0213      	lsls	r3, r2, #8
   27ce8:	d53a      	bpl.n	27d60 <__aeabi_ddiv+0x610>
   27cea:	2301      	movs	r3, #1
   27cec:	9a02      	ldr	r2, [sp, #8]
   27cee:	2401      	movs	r4, #1
   27cf0:	401a      	ands	r2, r3
   27cf2:	2300      	movs	r3, #0
   27cf4:	4694      	mov	ip, r2
   27cf6:	4698      	mov	r8, r3
   27cf8:	2200      	movs	r2, #0
   27cfa:	e5f7      	b.n	278ec <__aeabi_ddiv+0x19c>
   27cfc:	2102      	movs	r1, #2
   27cfe:	4249      	negs	r1, r1
   27d00:	468c      	mov	ip, r1
   27d02:	9d03      	ldr	r5, [sp, #12]
   27d04:	44e3      	add	fp, ip
   27d06:	46ac      	mov	ip, r5
   27d08:	44e2      	add	sl, ip
   27d0a:	45aa      	cmp	sl, r5
   27d0c:	41ad      	sbcs	r5, r5
   27d0e:	426d      	negs	r5, r5
   27d10:	4445      	add	r5, r8
   27d12:	18ed      	adds	r5, r5, r3
   27d14:	1a2d      	subs	r5, r5, r0
   27d16:	e696      	b.n	27a46 <__aeabi_ddiv+0x2f6>
   27d18:	1e8a      	subs	r2, r1, #2
   27d1a:	9903      	ldr	r1, [sp, #12]
   27d1c:	004d      	lsls	r5, r1, #1
   27d1e:	428d      	cmp	r5, r1
   27d20:	4189      	sbcs	r1, r1
   27d22:	4249      	negs	r1, r1
   27d24:	4441      	add	r1, r8
   27d26:	1876      	adds	r6, r6, r1
   27d28:	9503      	str	r5, [sp, #12]
   27d2a:	e78f      	b.n	27c4c <__aeabi_ddiv+0x4fc>
   27d2c:	201f      	movs	r0, #31
   27d2e:	4240      	negs	r0, r0
   27d30:	1ac3      	subs	r3, r0, r3
   27d32:	4658      	mov	r0, fp
   27d34:	40d8      	lsrs	r0, r3
   27d36:	0003      	movs	r3, r0
   27d38:	2a20      	cmp	r2, #32
   27d3a:	d028      	beq.n	27d8e <__aeabi_ddiv+0x63e>
   27d3c:	2040      	movs	r0, #64	; 0x40
   27d3e:	465d      	mov	r5, fp
   27d40:	1a82      	subs	r2, r0, r2
   27d42:	4095      	lsls	r5, r2
   27d44:	4329      	orrs	r1, r5
   27d46:	1e4a      	subs	r2, r1, #1
   27d48:	4191      	sbcs	r1, r2
   27d4a:	4319      	orrs	r1, r3
   27d4c:	2307      	movs	r3, #7
   27d4e:	2200      	movs	r2, #0
   27d50:	400b      	ands	r3, r1
   27d52:	d009      	beq.n	27d68 <__aeabi_ddiv+0x618>
   27d54:	230f      	movs	r3, #15
   27d56:	2200      	movs	r2, #0
   27d58:	400b      	ands	r3, r1
   27d5a:	0008      	movs	r0, r1
   27d5c:	2b04      	cmp	r3, #4
   27d5e:	d1bd      	bne.n	27cdc <__aeabi_ddiv+0x58c>
   27d60:	0001      	movs	r1, r0
   27d62:	0753      	lsls	r3, r2, #29
   27d64:	0252      	lsls	r2, r2, #9
   27d66:	0b12      	lsrs	r2, r2, #12
   27d68:	08c9      	lsrs	r1, r1, #3
   27d6a:	4319      	orrs	r1, r3
   27d6c:	2301      	movs	r3, #1
   27d6e:	4688      	mov	r8, r1
   27d70:	9902      	ldr	r1, [sp, #8]
   27d72:	2400      	movs	r4, #0
   27d74:	4019      	ands	r1, r3
   27d76:	468c      	mov	ip, r1
   27d78:	e5b8      	b.n	278ec <__aeabi_ddiv+0x19c>
   27d7a:	4552      	cmp	r2, sl
   27d7c:	d8be      	bhi.n	27cfc <__aeabi_ddiv+0x5ac>
   27d7e:	468b      	mov	fp, r1
   27d80:	2500      	movs	r5, #0
   27d82:	e660      	b.n	27a46 <__aeabi_ddiv+0x2f6>
   27d84:	9d03      	ldr	r5, [sp, #12]
   27d86:	429d      	cmp	r5, r3
   27d88:	d3c6      	bcc.n	27d18 <__aeabi_ddiv+0x5c8>
   27d8a:	0011      	movs	r1, r2
   27d8c:	e762      	b.n	27c54 <__aeabi_ddiv+0x504>
   27d8e:	2500      	movs	r5, #0
   27d90:	e7d8      	b.n	27d44 <__aeabi_ddiv+0x5f4>
   27d92:	2280      	movs	r2, #128	; 0x80
   27d94:	465b      	mov	r3, fp
   27d96:	0312      	lsls	r2, r2, #12
   27d98:	431a      	orrs	r2, r3
   27d9a:	9b01      	ldr	r3, [sp, #4]
   27d9c:	0312      	lsls	r2, r2, #12
   27d9e:	0b12      	lsrs	r2, r2, #12
   27da0:	469c      	mov	ip, r3
   27da2:	4688      	mov	r8, r1
   27da4:	4c03      	ldr	r4, [pc, #12]	; (27db4 <__aeabi_ddiv+0x664>)
   27da6:	e5a1      	b.n	278ec <__aeabi_ddiv+0x19c>
   27da8:	000003ff 	.word	0x000003ff
   27dac:	feffffff 	.word	0xfeffffff
   27db0:	000007fe 	.word	0x000007fe
   27db4:	000007ff 	.word	0x000007ff

00027db8 <__eqdf2>:
   27db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27dba:	464f      	mov	r7, r9
   27dbc:	4646      	mov	r6, r8
   27dbe:	46d6      	mov	lr, sl
   27dc0:	005c      	lsls	r4, r3, #1
   27dc2:	b5c0      	push	{r6, r7, lr}
   27dc4:	031f      	lsls	r7, r3, #12
   27dc6:	0fdb      	lsrs	r3, r3, #31
   27dc8:	469a      	mov	sl, r3
   27dca:	4b17      	ldr	r3, [pc, #92]	; (27e28 <__eqdf2+0x70>)
   27dcc:	030e      	lsls	r6, r1, #12
   27dce:	004d      	lsls	r5, r1, #1
   27dd0:	4684      	mov	ip, r0
   27dd2:	4680      	mov	r8, r0
   27dd4:	0b36      	lsrs	r6, r6, #12
   27dd6:	0d6d      	lsrs	r5, r5, #21
   27dd8:	0fc9      	lsrs	r1, r1, #31
   27dda:	4691      	mov	r9, r2
   27ddc:	0b3f      	lsrs	r7, r7, #12
   27dde:	0d64      	lsrs	r4, r4, #21
   27de0:	2001      	movs	r0, #1
   27de2:	429d      	cmp	r5, r3
   27de4:	d008      	beq.n	27df8 <__eqdf2+0x40>
   27de6:	429c      	cmp	r4, r3
   27de8:	d001      	beq.n	27dee <__eqdf2+0x36>
   27dea:	42a5      	cmp	r5, r4
   27dec:	d00b      	beq.n	27e06 <__eqdf2+0x4e>
   27dee:	bc1c      	pop	{r2, r3, r4}
   27df0:	4690      	mov	r8, r2
   27df2:	4699      	mov	r9, r3
   27df4:	46a2      	mov	sl, r4
   27df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27df8:	4663      	mov	r3, ip
   27dfa:	4333      	orrs	r3, r6
   27dfc:	d1f7      	bne.n	27dee <__eqdf2+0x36>
   27dfe:	42ac      	cmp	r4, r5
   27e00:	d1f5      	bne.n	27dee <__eqdf2+0x36>
   27e02:	433a      	orrs	r2, r7
   27e04:	d1f3      	bne.n	27dee <__eqdf2+0x36>
   27e06:	2001      	movs	r0, #1
   27e08:	42be      	cmp	r6, r7
   27e0a:	d1f0      	bne.n	27dee <__eqdf2+0x36>
   27e0c:	45c8      	cmp	r8, r9
   27e0e:	d1ee      	bne.n	27dee <__eqdf2+0x36>
   27e10:	4551      	cmp	r1, sl
   27e12:	d007      	beq.n	27e24 <__eqdf2+0x6c>
   27e14:	2d00      	cmp	r5, #0
   27e16:	d1ea      	bne.n	27dee <__eqdf2+0x36>
   27e18:	4663      	mov	r3, ip
   27e1a:	431e      	orrs	r6, r3
   27e1c:	0030      	movs	r0, r6
   27e1e:	1e46      	subs	r6, r0, #1
   27e20:	41b0      	sbcs	r0, r6
   27e22:	e7e4      	b.n	27dee <__eqdf2+0x36>
   27e24:	2000      	movs	r0, #0
   27e26:	e7e2      	b.n	27dee <__eqdf2+0x36>
   27e28:	000007ff 	.word	0x000007ff

00027e2c <__gedf2>:
   27e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   27e2e:	4645      	mov	r5, r8
   27e30:	46de      	mov	lr, fp
   27e32:	4657      	mov	r7, sl
   27e34:	464e      	mov	r6, r9
   27e36:	b5e0      	push	{r5, r6, r7, lr}
   27e38:	031f      	lsls	r7, r3, #12
   27e3a:	0b3d      	lsrs	r5, r7, #12
   27e3c:	4f2c      	ldr	r7, [pc, #176]	; (27ef0 <__gedf2+0xc4>)
   27e3e:	030e      	lsls	r6, r1, #12
   27e40:	004c      	lsls	r4, r1, #1
   27e42:	46ab      	mov	fp, r5
   27e44:	005d      	lsls	r5, r3, #1
   27e46:	4684      	mov	ip, r0
   27e48:	0b36      	lsrs	r6, r6, #12
   27e4a:	0d64      	lsrs	r4, r4, #21
   27e4c:	0fc9      	lsrs	r1, r1, #31
   27e4e:	4690      	mov	r8, r2
   27e50:	0d6d      	lsrs	r5, r5, #21
   27e52:	0fdb      	lsrs	r3, r3, #31
   27e54:	42bc      	cmp	r4, r7
   27e56:	d02a      	beq.n	27eae <__gedf2+0x82>
   27e58:	4f25      	ldr	r7, [pc, #148]	; (27ef0 <__gedf2+0xc4>)
   27e5a:	42bd      	cmp	r5, r7
   27e5c:	d02d      	beq.n	27eba <__gedf2+0x8e>
   27e5e:	2c00      	cmp	r4, #0
   27e60:	d10f      	bne.n	27e82 <__gedf2+0x56>
   27e62:	4330      	orrs	r0, r6
   27e64:	0007      	movs	r7, r0
   27e66:	4681      	mov	r9, r0
   27e68:	4278      	negs	r0, r7
   27e6a:	4178      	adcs	r0, r7
   27e6c:	b2c0      	uxtb	r0, r0
   27e6e:	2d00      	cmp	r5, #0
   27e70:	d117      	bne.n	27ea2 <__gedf2+0x76>
   27e72:	465f      	mov	r7, fp
   27e74:	433a      	orrs	r2, r7
   27e76:	d114      	bne.n	27ea2 <__gedf2+0x76>
   27e78:	464b      	mov	r3, r9
   27e7a:	2000      	movs	r0, #0
   27e7c:	2b00      	cmp	r3, #0
   27e7e:	d00a      	beq.n	27e96 <__gedf2+0x6a>
   27e80:	e006      	b.n	27e90 <__gedf2+0x64>
   27e82:	2d00      	cmp	r5, #0
   27e84:	d102      	bne.n	27e8c <__gedf2+0x60>
   27e86:	4658      	mov	r0, fp
   27e88:	4302      	orrs	r2, r0
   27e8a:	d001      	beq.n	27e90 <__gedf2+0x64>
   27e8c:	4299      	cmp	r1, r3
   27e8e:	d018      	beq.n	27ec2 <__gedf2+0x96>
   27e90:	4248      	negs	r0, r1
   27e92:	2101      	movs	r1, #1
   27e94:	4308      	orrs	r0, r1
   27e96:	bc3c      	pop	{r2, r3, r4, r5}
   27e98:	4690      	mov	r8, r2
   27e9a:	4699      	mov	r9, r3
   27e9c:	46a2      	mov	sl, r4
   27e9e:	46ab      	mov	fp, r5
   27ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27ea2:	2800      	cmp	r0, #0
   27ea4:	d0f2      	beq.n	27e8c <__gedf2+0x60>
   27ea6:	2001      	movs	r0, #1
   27ea8:	3b01      	subs	r3, #1
   27eaa:	4318      	orrs	r0, r3
   27eac:	e7f3      	b.n	27e96 <__gedf2+0x6a>
   27eae:	0037      	movs	r7, r6
   27eb0:	4307      	orrs	r7, r0
   27eb2:	d0d1      	beq.n	27e58 <__gedf2+0x2c>
   27eb4:	2002      	movs	r0, #2
   27eb6:	4240      	negs	r0, r0
   27eb8:	e7ed      	b.n	27e96 <__gedf2+0x6a>
   27eba:	465f      	mov	r7, fp
   27ebc:	4317      	orrs	r7, r2
   27ebe:	d0ce      	beq.n	27e5e <__gedf2+0x32>
   27ec0:	e7f8      	b.n	27eb4 <__gedf2+0x88>
   27ec2:	42ac      	cmp	r4, r5
   27ec4:	dce4      	bgt.n	27e90 <__gedf2+0x64>
   27ec6:	da03      	bge.n	27ed0 <__gedf2+0xa4>
   27ec8:	1e48      	subs	r0, r1, #1
   27eca:	2101      	movs	r1, #1
   27ecc:	4308      	orrs	r0, r1
   27ece:	e7e2      	b.n	27e96 <__gedf2+0x6a>
   27ed0:	455e      	cmp	r6, fp
   27ed2:	d8dd      	bhi.n	27e90 <__gedf2+0x64>
   27ed4:	d006      	beq.n	27ee4 <__gedf2+0xb8>
   27ed6:	2000      	movs	r0, #0
   27ed8:	455e      	cmp	r6, fp
   27eda:	d2dc      	bcs.n	27e96 <__gedf2+0x6a>
   27edc:	2301      	movs	r3, #1
   27ede:	1e48      	subs	r0, r1, #1
   27ee0:	4318      	orrs	r0, r3
   27ee2:	e7d8      	b.n	27e96 <__gedf2+0x6a>
   27ee4:	45c4      	cmp	ip, r8
   27ee6:	d8d3      	bhi.n	27e90 <__gedf2+0x64>
   27ee8:	2000      	movs	r0, #0
   27eea:	45c4      	cmp	ip, r8
   27eec:	d3f6      	bcc.n	27edc <__gedf2+0xb0>
   27eee:	e7d2      	b.n	27e96 <__gedf2+0x6a>
   27ef0:	000007ff 	.word	0x000007ff

00027ef4 <__ledf2>:
   27ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ef6:	464e      	mov	r6, r9
   27ef8:	4645      	mov	r5, r8
   27efa:	46de      	mov	lr, fp
   27efc:	4657      	mov	r7, sl
   27efe:	005c      	lsls	r4, r3, #1
   27f00:	b5e0      	push	{r5, r6, r7, lr}
   27f02:	031f      	lsls	r7, r3, #12
   27f04:	0fdb      	lsrs	r3, r3, #31
   27f06:	4699      	mov	r9, r3
   27f08:	4b2a      	ldr	r3, [pc, #168]	; (27fb4 <__ledf2+0xc0>)
   27f0a:	030e      	lsls	r6, r1, #12
   27f0c:	004d      	lsls	r5, r1, #1
   27f0e:	0fc9      	lsrs	r1, r1, #31
   27f10:	4684      	mov	ip, r0
   27f12:	0b36      	lsrs	r6, r6, #12
   27f14:	0d6d      	lsrs	r5, r5, #21
   27f16:	468b      	mov	fp, r1
   27f18:	4690      	mov	r8, r2
   27f1a:	0b3f      	lsrs	r7, r7, #12
   27f1c:	0d64      	lsrs	r4, r4, #21
   27f1e:	429d      	cmp	r5, r3
   27f20:	d020      	beq.n	27f64 <__ledf2+0x70>
   27f22:	4b24      	ldr	r3, [pc, #144]	; (27fb4 <__ledf2+0xc0>)
   27f24:	429c      	cmp	r4, r3
   27f26:	d022      	beq.n	27f6e <__ledf2+0x7a>
   27f28:	2d00      	cmp	r5, #0
   27f2a:	d112      	bne.n	27f52 <__ledf2+0x5e>
   27f2c:	4330      	orrs	r0, r6
   27f2e:	4243      	negs	r3, r0
   27f30:	4143      	adcs	r3, r0
   27f32:	b2db      	uxtb	r3, r3
   27f34:	2c00      	cmp	r4, #0
   27f36:	d01f      	beq.n	27f78 <__ledf2+0x84>
   27f38:	2b00      	cmp	r3, #0
   27f3a:	d00c      	beq.n	27f56 <__ledf2+0x62>
   27f3c:	464b      	mov	r3, r9
   27f3e:	2001      	movs	r0, #1
   27f40:	3b01      	subs	r3, #1
   27f42:	4303      	orrs	r3, r0
   27f44:	0018      	movs	r0, r3
   27f46:	bc3c      	pop	{r2, r3, r4, r5}
   27f48:	4690      	mov	r8, r2
   27f4a:	4699      	mov	r9, r3
   27f4c:	46a2      	mov	sl, r4
   27f4e:	46ab      	mov	fp, r5
   27f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27f52:	2c00      	cmp	r4, #0
   27f54:	d016      	beq.n	27f84 <__ledf2+0x90>
   27f56:	45cb      	cmp	fp, r9
   27f58:	d017      	beq.n	27f8a <__ledf2+0x96>
   27f5a:	465b      	mov	r3, fp
   27f5c:	4259      	negs	r1, r3
   27f5e:	2301      	movs	r3, #1
   27f60:	430b      	orrs	r3, r1
   27f62:	e7ef      	b.n	27f44 <__ledf2+0x50>
   27f64:	0031      	movs	r1, r6
   27f66:	2302      	movs	r3, #2
   27f68:	4301      	orrs	r1, r0
   27f6a:	d1eb      	bne.n	27f44 <__ledf2+0x50>
   27f6c:	e7d9      	b.n	27f22 <__ledf2+0x2e>
   27f6e:	0039      	movs	r1, r7
   27f70:	2302      	movs	r3, #2
   27f72:	4311      	orrs	r1, r2
   27f74:	d1e6      	bne.n	27f44 <__ledf2+0x50>
   27f76:	e7d7      	b.n	27f28 <__ledf2+0x34>
   27f78:	433a      	orrs	r2, r7
   27f7a:	d1dd      	bne.n	27f38 <__ledf2+0x44>
   27f7c:	2300      	movs	r3, #0
   27f7e:	2800      	cmp	r0, #0
   27f80:	d0e0      	beq.n	27f44 <__ledf2+0x50>
   27f82:	e7ea      	b.n	27f5a <__ledf2+0x66>
   27f84:	433a      	orrs	r2, r7
   27f86:	d1e6      	bne.n	27f56 <__ledf2+0x62>
   27f88:	e7e7      	b.n	27f5a <__ledf2+0x66>
   27f8a:	42a5      	cmp	r5, r4
   27f8c:	dce5      	bgt.n	27f5a <__ledf2+0x66>
   27f8e:	db05      	blt.n	27f9c <__ledf2+0xa8>
   27f90:	42be      	cmp	r6, r7
   27f92:	d8e2      	bhi.n	27f5a <__ledf2+0x66>
   27f94:	d007      	beq.n	27fa6 <__ledf2+0xb2>
   27f96:	2300      	movs	r3, #0
   27f98:	42be      	cmp	r6, r7
   27f9a:	d2d3      	bcs.n	27f44 <__ledf2+0x50>
   27f9c:	4659      	mov	r1, fp
   27f9e:	2301      	movs	r3, #1
   27fa0:	3901      	subs	r1, #1
   27fa2:	430b      	orrs	r3, r1
   27fa4:	e7ce      	b.n	27f44 <__ledf2+0x50>
   27fa6:	45c4      	cmp	ip, r8
   27fa8:	d8d7      	bhi.n	27f5a <__ledf2+0x66>
   27faa:	2300      	movs	r3, #0
   27fac:	45c4      	cmp	ip, r8
   27fae:	d3f5      	bcc.n	27f9c <__ledf2+0xa8>
   27fb0:	e7c8      	b.n	27f44 <__ledf2+0x50>
   27fb2:	46c0      	nop			; (mov r8, r8)
   27fb4:	000007ff 	.word	0x000007ff

00027fb8 <__aeabi_dmul>:
   27fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27fba:	4657      	mov	r7, sl
   27fbc:	4645      	mov	r5, r8
   27fbe:	46de      	mov	lr, fp
   27fc0:	464e      	mov	r6, r9
   27fc2:	b5e0      	push	{r5, r6, r7, lr}
   27fc4:	030c      	lsls	r4, r1, #12
   27fc6:	4698      	mov	r8, r3
   27fc8:	004e      	lsls	r6, r1, #1
   27fca:	0b23      	lsrs	r3, r4, #12
   27fcc:	b087      	sub	sp, #28
   27fce:	0007      	movs	r7, r0
   27fd0:	4692      	mov	sl, r2
   27fd2:	469b      	mov	fp, r3
   27fd4:	0d76      	lsrs	r6, r6, #21
   27fd6:	0fcd      	lsrs	r5, r1, #31
   27fd8:	2e00      	cmp	r6, #0
   27fda:	d06b      	beq.n	280b4 <__aeabi_dmul+0xfc>
   27fdc:	4b6d      	ldr	r3, [pc, #436]	; (28194 <__aeabi_dmul+0x1dc>)
   27fde:	429e      	cmp	r6, r3
   27fe0:	d035      	beq.n	2804e <__aeabi_dmul+0x96>
   27fe2:	2480      	movs	r4, #128	; 0x80
   27fe4:	465b      	mov	r3, fp
   27fe6:	0f42      	lsrs	r2, r0, #29
   27fe8:	0424      	lsls	r4, r4, #16
   27fea:	00db      	lsls	r3, r3, #3
   27fec:	4314      	orrs	r4, r2
   27fee:	431c      	orrs	r4, r3
   27ff0:	00c3      	lsls	r3, r0, #3
   27ff2:	4699      	mov	r9, r3
   27ff4:	4b68      	ldr	r3, [pc, #416]	; (28198 <__aeabi_dmul+0x1e0>)
   27ff6:	46a3      	mov	fp, r4
   27ff8:	469c      	mov	ip, r3
   27ffa:	2300      	movs	r3, #0
   27ffc:	2700      	movs	r7, #0
   27ffe:	4466      	add	r6, ip
   28000:	9302      	str	r3, [sp, #8]
   28002:	4643      	mov	r3, r8
   28004:	031c      	lsls	r4, r3, #12
   28006:	005a      	lsls	r2, r3, #1
   28008:	0fdb      	lsrs	r3, r3, #31
   2800a:	4650      	mov	r0, sl
   2800c:	0b24      	lsrs	r4, r4, #12
   2800e:	0d52      	lsrs	r2, r2, #21
   28010:	4698      	mov	r8, r3
   28012:	d100      	bne.n	28016 <__aeabi_dmul+0x5e>
   28014:	e076      	b.n	28104 <__aeabi_dmul+0x14c>
   28016:	4b5f      	ldr	r3, [pc, #380]	; (28194 <__aeabi_dmul+0x1dc>)
   28018:	429a      	cmp	r2, r3
   2801a:	d06d      	beq.n	280f8 <__aeabi_dmul+0x140>
   2801c:	2380      	movs	r3, #128	; 0x80
   2801e:	0f41      	lsrs	r1, r0, #29
   28020:	041b      	lsls	r3, r3, #16
   28022:	430b      	orrs	r3, r1
   28024:	495c      	ldr	r1, [pc, #368]	; (28198 <__aeabi_dmul+0x1e0>)
   28026:	00e4      	lsls	r4, r4, #3
   28028:	468c      	mov	ip, r1
   2802a:	431c      	orrs	r4, r3
   2802c:	00c3      	lsls	r3, r0, #3
   2802e:	2000      	movs	r0, #0
   28030:	4462      	add	r2, ip
   28032:	4641      	mov	r1, r8
   28034:	18b6      	adds	r6, r6, r2
   28036:	4069      	eors	r1, r5
   28038:	1c72      	adds	r2, r6, #1
   2803a:	9101      	str	r1, [sp, #4]
   2803c:	4694      	mov	ip, r2
   2803e:	4307      	orrs	r7, r0
   28040:	2f0f      	cmp	r7, #15
   28042:	d900      	bls.n	28046 <__aeabi_dmul+0x8e>
   28044:	e0b0      	b.n	281a8 <__aeabi_dmul+0x1f0>
   28046:	4a55      	ldr	r2, [pc, #340]	; (2819c <__aeabi_dmul+0x1e4>)
   28048:	00bf      	lsls	r7, r7, #2
   2804a:	59d2      	ldr	r2, [r2, r7]
   2804c:	4697      	mov	pc, r2
   2804e:	465b      	mov	r3, fp
   28050:	4303      	orrs	r3, r0
   28052:	4699      	mov	r9, r3
   28054:	d000      	beq.n	28058 <__aeabi_dmul+0xa0>
   28056:	e087      	b.n	28168 <__aeabi_dmul+0x1b0>
   28058:	2300      	movs	r3, #0
   2805a:	469b      	mov	fp, r3
   2805c:	3302      	adds	r3, #2
   2805e:	2708      	movs	r7, #8
   28060:	9302      	str	r3, [sp, #8]
   28062:	e7ce      	b.n	28002 <__aeabi_dmul+0x4a>
   28064:	4642      	mov	r2, r8
   28066:	9201      	str	r2, [sp, #4]
   28068:	2802      	cmp	r0, #2
   2806a:	d067      	beq.n	2813c <__aeabi_dmul+0x184>
   2806c:	2803      	cmp	r0, #3
   2806e:	d100      	bne.n	28072 <__aeabi_dmul+0xba>
   28070:	e20e      	b.n	28490 <__aeabi_dmul+0x4d8>
   28072:	2801      	cmp	r0, #1
   28074:	d000      	beq.n	28078 <__aeabi_dmul+0xc0>
   28076:	e162      	b.n	2833e <__aeabi_dmul+0x386>
   28078:	2300      	movs	r3, #0
   2807a:	2400      	movs	r4, #0
   2807c:	2200      	movs	r2, #0
   2807e:	4699      	mov	r9, r3
   28080:	9901      	ldr	r1, [sp, #4]
   28082:	4001      	ands	r1, r0
   28084:	b2cd      	uxtb	r5, r1
   28086:	2100      	movs	r1, #0
   28088:	0312      	lsls	r2, r2, #12
   2808a:	0d0b      	lsrs	r3, r1, #20
   2808c:	0b12      	lsrs	r2, r2, #12
   2808e:	051b      	lsls	r3, r3, #20
   28090:	4313      	orrs	r3, r2
   28092:	4a43      	ldr	r2, [pc, #268]	; (281a0 <__aeabi_dmul+0x1e8>)
   28094:	0524      	lsls	r4, r4, #20
   28096:	4013      	ands	r3, r2
   28098:	431c      	orrs	r4, r3
   2809a:	0064      	lsls	r4, r4, #1
   2809c:	07ed      	lsls	r5, r5, #31
   2809e:	0864      	lsrs	r4, r4, #1
   280a0:	432c      	orrs	r4, r5
   280a2:	4648      	mov	r0, r9
   280a4:	0021      	movs	r1, r4
   280a6:	b007      	add	sp, #28
   280a8:	bc3c      	pop	{r2, r3, r4, r5}
   280aa:	4690      	mov	r8, r2
   280ac:	4699      	mov	r9, r3
   280ae:	46a2      	mov	sl, r4
   280b0:	46ab      	mov	fp, r5
   280b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   280b4:	4303      	orrs	r3, r0
   280b6:	4699      	mov	r9, r3
   280b8:	d04f      	beq.n	2815a <__aeabi_dmul+0x1a2>
   280ba:	465b      	mov	r3, fp
   280bc:	2b00      	cmp	r3, #0
   280be:	d100      	bne.n	280c2 <__aeabi_dmul+0x10a>
   280c0:	e189      	b.n	283d6 <__aeabi_dmul+0x41e>
   280c2:	4658      	mov	r0, fp
   280c4:	f000 fe2e 	bl	28d24 <__clzsi2>
   280c8:	0003      	movs	r3, r0
   280ca:	3b0b      	subs	r3, #11
   280cc:	2b1c      	cmp	r3, #28
   280ce:	dd00      	ble.n	280d2 <__aeabi_dmul+0x11a>
   280d0:	e17a      	b.n	283c8 <__aeabi_dmul+0x410>
   280d2:	221d      	movs	r2, #29
   280d4:	1ad3      	subs	r3, r2, r3
   280d6:	003a      	movs	r2, r7
   280d8:	0001      	movs	r1, r0
   280da:	465c      	mov	r4, fp
   280dc:	40da      	lsrs	r2, r3
   280de:	3908      	subs	r1, #8
   280e0:	408c      	lsls	r4, r1
   280e2:	0013      	movs	r3, r2
   280e4:	408f      	lsls	r7, r1
   280e6:	4323      	orrs	r3, r4
   280e8:	469b      	mov	fp, r3
   280ea:	46b9      	mov	r9, r7
   280ec:	2300      	movs	r3, #0
   280ee:	4e2d      	ldr	r6, [pc, #180]	; (281a4 <__aeabi_dmul+0x1ec>)
   280f0:	2700      	movs	r7, #0
   280f2:	1a36      	subs	r6, r6, r0
   280f4:	9302      	str	r3, [sp, #8]
   280f6:	e784      	b.n	28002 <__aeabi_dmul+0x4a>
   280f8:	4653      	mov	r3, sl
   280fa:	4323      	orrs	r3, r4
   280fc:	d12a      	bne.n	28154 <__aeabi_dmul+0x19c>
   280fe:	2400      	movs	r4, #0
   28100:	2002      	movs	r0, #2
   28102:	e796      	b.n	28032 <__aeabi_dmul+0x7a>
   28104:	4653      	mov	r3, sl
   28106:	4323      	orrs	r3, r4
   28108:	d020      	beq.n	2814c <__aeabi_dmul+0x194>
   2810a:	2c00      	cmp	r4, #0
   2810c:	d100      	bne.n	28110 <__aeabi_dmul+0x158>
   2810e:	e157      	b.n	283c0 <__aeabi_dmul+0x408>
   28110:	0020      	movs	r0, r4
   28112:	f000 fe07 	bl	28d24 <__clzsi2>
   28116:	0003      	movs	r3, r0
   28118:	3b0b      	subs	r3, #11
   2811a:	2b1c      	cmp	r3, #28
   2811c:	dd00      	ble.n	28120 <__aeabi_dmul+0x168>
   2811e:	e149      	b.n	283b4 <__aeabi_dmul+0x3fc>
   28120:	211d      	movs	r1, #29
   28122:	1acb      	subs	r3, r1, r3
   28124:	4651      	mov	r1, sl
   28126:	0002      	movs	r2, r0
   28128:	40d9      	lsrs	r1, r3
   2812a:	4653      	mov	r3, sl
   2812c:	3a08      	subs	r2, #8
   2812e:	4094      	lsls	r4, r2
   28130:	4093      	lsls	r3, r2
   28132:	430c      	orrs	r4, r1
   28134:	4a1b      	ldr	r2, [pc, #108]	; (281a4 <__aeabi_dmul+0x1ec>)
   28136:	1a12      	subs	r2, r2, r0
   28138:	2000      	movs	r0, #0
   2813a:	e77a      	b.n	28032 <__aeabi_dmul+0x7a>
   2813c:	2501      	movs	r5, #1
   2813e:	9b01      	ldr	r3, [sp, #4]
   28140:	4c14      	ldr	r4, [pc, #80]	; (28194 <__aeabi_dmul+0x1dc>)
   28142:	401d      	ands	r5, r3
   28144:	2300      	movs	r3, #0
   28146:	2200      	movs	r2, #0
   28148:	4699      	mov	r9, r3
   2814a:	e79c      	b.n	28086 <__aeabi_dmul+0xce>
   2814c:	2400      	movs	r4, #0
   2814e:	2200      	movs	r2, #0
   28150:	2001      	movs	r0, #1
   28152:	e76e      	b.n	28032 <__aeabi_dmul+0x7a>
   28154:	4653      	mov	r3, sl
   28156:	2003      	movs	r0, #3
   28158:	e76b      	b.n	28032 <__aeabi_dmul+0x7a>
   2815a:	2300      	movs	r3, #0
   2815c:	469b      	mov	fp, r3
   2815e:	3301      	adds	r3, #1
   28160:	2704      	movs	r7, #4
   28162:	2600      	movs	r6, #0
   28164:	9302      	str	r3, [sp, #8]
   28166:	e74c      	b.n	28002 <__aeabi_dmul+0x4a>
   28168:	2303      	movs	r3, #3
   2816a:	4681      	mov	r9, r0
   2816c:	270c      	movs	r7, #12
   2816e:	9302      	str	r3, [sp, #8]
   28170:	e747      	b.n	28002 <__aeabi_dmul+0x4a>
   28172:	2280      	movs	r2, #128	; 0x80
   28174:	2300      	movs	r3, #0
   28176:	2500      	movs	r5, #0
   28178:	0312      	lsls	r2, r2, #12
   2817a:	4699      	mov	r9, r3
   2817c:	4c05      	ldr	r4, [pc, #20]	; (28194 <__aeabi_dmul+0x1dc>)
   2817e:	e782      	b.n	28086 <__aeabi_dmul+0xce>
   28180:	465c      	mov	r4, fp
   28182:	464b      	mov	r3, r9
   28184:	9802      	ldr	r0, [sp, #8]
   28186:	e76f      	b.n	28068 <__aeabi_dmul+0xb0>
   28188:	465c      	mov	r4, fp
   2818a:	464b      	mov	r3, r9
   2818c:	9501      	str	r5, [sp, #4]
   2818e:	9802      	ldr	r0, [sp, #8]
   28190:	e76a      	b.n	28068 <__aeabi_dmul+0xb0>
   28192:	46c0      	nop			; (mov r8, r8)
   28194:	000007ff 	.word	0x000007ff
   28198:	fffffc01 	.word	0xfffffc01
   2819c:	0002ae68 	.word	0x0002ae68
   281a0:	800fffff 	.word	0x800fffff
   281a4:	fffffc0d 	.word	0xfffffc0d
   281a8:	464a      	mov	r2, r9
   281aa:	4649      	mov	r1, r9
   281ac:	0c17      	lsrs	r7, r2, #16
   281ae:	0c1a      	lsrs	r2, r3, #16
   281b0:	041b      	lsls	r3, r3, #16
   281b2:	0c1b      	lsrs	r3, r3, #16
   281b4:	0408      	lsls	r0, r1, #16
   281b6:	0019      	movs	r1, r3
   281b8:	0c00      	lsrs	r0, r0, #16
   281ba:	4341      	muls	r1, r0
   281bc:	0015      	movs	r5, r2
   281be:	4688      	mov	r8, r1
   281c0:	0019      	movs	r1, r3
   281c2:	437d      	muls	r5, r7
   281c4:	4379      	muls	r1, r7
   281c6:	9503      	str	r5, [sp, #12]
   281c8:	4689      	mov	r9, r1
   281ca:	0029      	movs	r1, r5
   281cc:	0015      	movs	r5, r2
   281ce:	4345      	muls	r5, r0
   281d0:	444d      	add	r5, r9
   281d2:	9502      	str	r5, [sp, #8]
   281d4:	4645      	mov	r5, r8
   281d6:	0c2d      	lsrs	r5, r5, #16
   281d8:	46aa      	mov	sl, r5
   281da:	9d02      	ldr	r5, [sp, #8]
   281dc:	4455      	add	r5, sl
   281de:	45a9      	cmp	r9, r5
   281e0:	d906      	bls.n	281f0 <__aeabi_dmul+0x238>
   281e2:	468a      	mov	sl, r1
   281e4:	2180      	movs	r1, #128	; 0x80
   281e6:	0249      	lsls	r1, r1, #9
   281e8:	4689      	mov	r9, r1
   281ea:	44ca      	add	sl, r9
   281ec:	4651      	mov	r1, sl
   281ee:	9103      	str	r1, [sp, #12]
   281f0:	0c29      	lsrs	r1, r5, #16
   281f2:	9104      	str	r1, [sp, #16]
   281f4:	4641      	mov	r1, r8
   281f6:	0409      	lsls	r1, r1, #16
   281f8:	042d      	lsls	r5, r5, #16
   281fa:	0c09      	lsrs	r1, r1, #16
   281fc:	4688      	mov	r8, r1
   281fe:	0029      	movs	r1, r5
   28200:	0c25      	lsrs	r5, r4, #16
   28202:	0424      	lsls	r4, r4, #16
   28204:	4441      	add	r1, r8
   28206:	0c24      	lsrs	r4, r4, #16
   28208:	9105      	str	r1, [sp, #20]
   2820a:	0021      	movs	r1, r4
   2820c:	4341      	muls	r1, r0
   2820e:	4688      	mov	r8, r1
   28210:	0021      	movs	r1, r4
   28212:	4379      	muls	r1, r7
   28214:	468a      	mov	sl, r1
   28216:	4368      	muls	r0, r5
   28218:	4641      	mov	r1, r8
   2821a:	4450      	add	r0, sl
   2821c:	4681      	mov	r9, r0
   2821e:	0c08      	lsrs	r0, r1, #16
   28220:	4448      	add	r0, r9
   28222:	436f      	muls	r7, r5
   28224:	4582      	cmp	sl, r0
   28226:	d903      	bls.n	28230 <__aeabi_dmul+0x278>
   28228:	2180      	movs	r1, #128	; 0x80
   2822a:	0249      	lsls	r1, r1, #9
   2822c:	4689      	mov	r9, r1
   2822e:	444f      	add	r7, r9
   28230:	0c01      	lsrs	r1, r0, #16
   28232:	4689      	mov	r9, r1
   28234:	0039      	movs	r1, r7
   28236:	4449      	add	r1, r9
   28238:	9102      	str	r1, [sp, #8]
   2823a:	4641      	mov	r1, r8
   2823c:	040f      	lsls	r7, r1, #16
   2823e:	9904      	ldr	r1, [sp, #16]
   28240:	0c3f      	lsrs	r7, r7, #16
   28242:	4688      	mov	r8, r1
   28244:	0400      	lsls	r0, r0, #16
   28246:	19c0      	adds	r0, r0, r7
   28248:	4480      	add	r8, r0
   2824a:	4641      	mov	r1, r8
   2824c:	9104      	str	r1, [sp, #16]
   2824e:	4659      	mov	r1, fp
   28250:	0c0f      	lsrs	r7, r1, #16
   28252:	0409      	lsls	r1, r1, #16
   28254:	0c09      	lsrs	r1, r1, #16
   28256:	4688      	mov	r8, r1
   28258:	4359      	muls	r1, r3
   2825a:	468a      	mov	sl, r1
   2825c:	0039      	movs	r1, r7
   2825e:	4351      	muls	r1, r2
   28260:	4689      	mov	r9, r1
   28262:	4641      	mov	r1, r8
   28264:	434a      	muls	r2, r1
   28266:	4651      	mov	r1, sl
   28268:	0c09      	lsrs	r1, r1, #16
   2826a:	468b      	mov	fp, r1
   2826c:	437b      	muls	r3, r7
   2826e:	18d2      	adds	r2, r2, r3
   28270:	445a      	add	r2, fp
   28272:	4293      	cmp	r3, r2
   28274:	d903      	bls.n	2827e <__aeabi_dmul+0x2c6>
   28276:	2380      	movs	r3, #128	; 0x80
   28278:	025b      	lsls	r3, r3, #9
   2827a:	469b      	mov	fp, r3
   2827c:	44d9      	add	r9, fp
   2827e:	4651      	mov	r1, sl
   28280:	0409      	lsls	r1, r1, #16
   28282:	0c09      	lsrs	r1, r1, #16
   28284:	468a      	mov	sl, r1
   28286:	4641      	mov	r1, r8
   28288:	4361      	muls	r1, r4
   2828a:	437c      	muls	r4, r7
   2828c:	0c13      	lsrs	r3, r2, #16
   2828e:	0412      	lsls	r2, r2, #16
   28290:	444b      	add	r3, r9
   28292:	4452      	add	r2, sl
   28294:	46a1      	mov	r9, r4
   28296:	468a      	mov	sl, r1
   28298:	003c      	movs	r4, r7
   2829a:	4641      	mov	r1, r8
   2829c:	436c      	muls	r4, r5
   2829e:	434d      	muls	r5, r1
   282a0:	4651      	mov	r1, sl
   282a2:	444d      	add	r5, r9
   282a4:	0c0f      	lsrs	r7, r1, #16
   282a6:	197d      	adds	r5, r7, r5
   282a8:	45a9      	cmp	r9, r5
   282aa:	d903      	bls.n	282b4 <__aeabi_dmul+0x2fc>
   282ac:	2180      	movs	r1, #128	; 0x80
   282ae:	0249      	lsls	r1, r1, #9
   282b0:	4688      	mov	r8, r1
   282b2:	4444      	add	r4, r8
   282b4:	9f04      	ldr	r7, [sp, #16]
   282b6:	9903      	ldr	r1, [sp, #12]
   282b8:	46b8      	mov	r8, r7
   282ba:	4441      	add	r1, r8
   282bc:	468b      	mov	fp, r1
   282be:	4583      	cmp	fp, r0
   282c0:	4180      	sbcs	r0, r0
   282c2:	4241      	negs	r1, r0
   282c4:	4688      	mov	r8, r1
   282c6:	4651      	mov	r1, sl
   282c8:	0408      	lsls	r0, r1, #16
   282ca:	042f      	lsls	r7, r5, #16
   282cc:	0c00      	lsrs	r0, r0, #16
   282ce:	183f      	adds	r7, r7, r0
   282d0:	4658      	mov	r0, fp
   282d2:	9902      	ldr	r1, [sp, #8]
   282d4:	1810      	adds	r0, r2, r0
   282d6:	4689      	mov	r9, r1
   282d8:	4290      	cmp	r0, r2
   282da:	4192      	sbcs	r2, r2
   282dc:	444f      	add	r7, r9
   282de:	46ba      	mov	sl, r7
   282e0:	4252      	negs	r2, r2
   282e2:	4699      	mov	r9, r3
   282e4:	4693      	mov	fp, r2
   282e6:	44c2      	add	sl, r8
   282e8:	44d1      	add	r9, sl
   282ea:	44cb      	add	fp, r9
   282ec:	428f      	cmp	r7, r1
   282ee:	41bf      	sbcs	r7, r7
   282f0:	45c2      	cmp	sl, r8
   282f2:	4189      	sbcs	r1, r1
   282f4:	4599      	cmp	r9, r3
   282f6:	419b      	sbcs	r3, r3
   282f8:	4593      	cmp	fp, r2
   282fa:	4192      	sbcs	r2, r2
   282fc:	427f      	negs	r7, r7
   282fe:	4249      	negs	r1, r1
   28300:	0c2d      	lsrs	r5, r5, #16
   28302:	4252      	negs	r2, r2
   28304:	430f      	orrs	r7, r1
   28306:	425b      	negs	r3, r3
   28308:	4313      	orrs	r3, r2
   2830a:	197f      	adds	r7, r7, r5
   2830c:	18ff      	adds	r7, r7, r3
   2830e:	465b      	mov	r3, fp
   28310:	193c      	adds	r4, r7, r4
   28312:	0ddb      	lsrs	r3, r3, #23
   28314:	9a05      	ldr	r2, [sp, #20]
   28316:	0264      	lsls	r4, r4, #9
   28318:	431c      	orrs	r4, r3
   2831a:	0243      	lsls	r3, r0, #9
   2831c:	4313      	orrs	r3, r2
   2831e:	1e5d      	subs	r5, r3, #1
   28320:	41ab      	sbcs	r3, r5
   28322:	465a      	mov	r2, fp
   28324:	0dc0      	lsrs	r0, r0, #23
   28326:	4303      	orrs	r3, r0
   28328:	0252      	lsls	r2, r2, #9
   2832a:	4313      	orrs	r3, r2
   2832c:	01e2      	lsls	r2, r4, #7
   2832e:	d556      	bpl.n	283de <__aeabi_dmul+0x426>
   28330:	2001      	movs	r0, #1
   28332:	085a      	lsrs	r2, r3, #1
   28334:	4003      	ands	r3, r0
   28336:	4313      	orrs	r3, r2
   28338:	07e2      	lsls	r2, r4, #31
   2833a:	4313      	orrs	r3, r2
   2833c:	0864      	lsrs	r4, r4, #1
   2833e:	485a      	ldr	r0, [pc, #360]	; (284a8 <__aeabi_dmul+0x4f0>)
   28340:	4460      	add	r0, ip
   28342:	2800      	cmp	r0, #0
   28344:	dd4d      	ble.n	283e2 <__aeabi_dmul+0x42a>
   28346:	075a      	lsls	r2, r3, #29
   28348:	d009      	beq.n	2835e <__aeabi_dmul+0x3a6>
   2834a:	220f      	movs	r2, #15
   2834c:	401a      	ands	r2, r3
   2834e:	2a04      	cmp	r2, #4
   28350:	d005      	beq.n	2835e <__aeabi_dmul+0x3a6>
   28352:	1d1a      	adds	r2, r3, #4
   28354:	429a      	cmp	r2, r3
   28356:	419b      	sbcs	r3, r3
   28358:	425b      	negs	r3, r3
   2835a:	18e4      	adds	r4, r4, r3
   2835c:	0013      	movs	r3, r2
   2835e:	01e2      	lsls	r2, r4, #7
   28360:	d504      	bpl.n	2836c <__aeabi_dmul+0x3b4>
   28362:	2080      	movs	r0, #128	; 0x80
   28364:	4a51      	ldr	r2, [pc, #324]	; (284ac <__aeabi_dmul+0x4f4>)
   28366:	00c0      	lsls	r0, r0, #3
   28368:	4014      	ands	r4, r2
   2836a:	4460      	add	r0, ip
   2836c:	4a50      	ldr	r2, [pc, #320]	; (284b0 <__aeabi_dmul+0x4f8>)
   2836e:	4290      	cmp	r0, r2
   28370:	dd00      	ble.n	28374 <__aeabi_dmul+0x3bc>
   28372:	e6e3      	b.n	2813c <__aeabi_dmul+0x184>
   28374:	2501      	movs	r5, #1
   28376:	08db      	lsrs	r3, r3, #3
   28378:	0762      	lsls	r2, r4, #29
   2837a:	431a      	orrs	r2, r3
   2837c:	0264      	lsls	r4, r4, #9
   2837e:	9b01      	ldr	r3, [sp, #4]
   28380:	4691      	mov	r9, r2
   28382:	0b22      	lsrs	r2, r4, #12
   28384:	0544      	lsls	r4, r0, #21
   28386:	0d64      	lsrs	r4, r4, #21
   28388:	401d      	ands	r5, r3
   2838a:	e67c      	b.n	28086 <__aeabi_dmul+0xce>
   2838c:	2280      	movs	r2, #128	; 0x80
   2838e:	4659      	mov	r1, fp
   28390:	0312      	lsls	r2, r2, #12
   28392:	4211      	tst	r1, r2
   28394:	d008      	beq.n	283a8 <__aeabi_dmul+0x3f0>
   28396:	4214      	tst	r4, r2
   28398:	d106      	bne.n	283a8 <__aeabi_dmul+0x3f0>
   2839a:	4322      	orrs	r2, r4
   2839c:	0312      	lsls	r2, r2, #12
   2839e:	0b12      	lsrs	r2, r2, #12
   283a0:	4645      	mov	r5, r8
   283a2:	4699      	mov	r9, r3
   283a4:	4c43      	ldr	r4, [pc, #268]	; (284b4 <__aeabi_dmul+0x4fc>)
   283a6:	e66e      	b.n	28086 <__aeabi_dmul+0xce>
   283a8:	465b      	mov	r3, fp
   283aa:	431a      	orrs	r2, r3
   283ac:	0312      	lsls	r2, r2, #12
   283ae:	0b12      	lsrs	r2, r2, #12
   283b0:	4c40      	ldr	r4, [pc, #256]	; (284b4 <__aeabi_dmul+0x4fc>)
   283b2:	e668      	b.n	28086 <__aeabi_dmul+0xce>
   283b4:	0003      	movs	r3, r0
   283b6:	4654      	mov	r4, sl
   283b8:	3b28      	subs	r3, #40	; 0x28
   283ba:	409c      	lsls	r4, r3
   283bc:	2300      	movs	r3, #0
   283be:	e6b9      	b.n	28134 <__aeabi_dmul+0x17c>
   283c0:	f000 fcb0 	bl	28d24 <__clzsi2>
   283c4:	3020      	adds	r0, #32
   283c6:	e6a6      	b.n	28116 <__aeabi_dmul+0x15e>
   283c8:	0003      	movs	r3, r0
   283ca:	3b28      	subs	r3, #40	; 0x28
   283cc:	409f      	lsls	r7, r3
   283ce:	2300      	movs	r3, #0
   283d0:	46bb      	mov	fp, r7
   283d2:	4699      	mov	r9, r3
   283d4:	e68a      	b.n	280ec <__aeabi_dmul+0x134>
   283d6:	f000 fca5 	bl	28d24 <__clzsi2>
   283da:	3020      	adds	r0, #32
   283dc:	e674      	b.n	280c8 <__aeabi_dmul+0x110>
   283de:	46b4      	mov	ip, r6
   283e0:	e7ad      	b.n	2833e <__aeabi_dmul+0x386>
   283e2:	2501      	movs	r5, #1
   283e4:	1a2a      	subs	r2, r5, r0
   283e6:	2a38      	cmp	r2, #56	; 0x38
   283e8:	dd06      	ble.n	283f8 <__aeabi_dmul+0x440>
   283ea:	9b01      	ldr	r3, [sp, #4]
   283ec:	2400      	movs	r4, #0
   283ee:	401d      	ands	r5, r3
   283f0:	2300      	movs	r3, #0
   283f2:	2200      	movs	r2, #0
   283f4:	4699      	mov	r9, r3
   283f6:	e646      	b.n	28086 <__aeabi_dmul+0xce>
   283f8:	2a1f      	cmp	r2, #31
   283fa:	dc21      	bgt.n	28440 <__aeabi_dmul+0x488>
   283fc:	2520      	movs	r5, #32
   283fe:	0020      	movs	r0, r4
   28400:	1aad      	subs	r5, r5, r2
   28402:	001e      	movs	r6, r3
   28404:	40ab      	lsls	r3, r5
   28406:	40a8      	lsls	r0, r5
   28408:	40d6      	lsrs	r6, r2
   2840a:	1e5d      	subs	r5, r3, #1
   2840c:	41ab      	sbcs	r3, r5
   2840e:	4330      	orrs	r0, r6
   28410:	4318      	orrs	r0, r3
   28412:	40d4      	lsrs	r4, r2
   28414:	0743      	lsls	r3, r0, #29
   28416:	d009      	beq.n	2842c <__aeabi_dmul+0x474>
   28418:	230f      	movs	r3, #15
   2841a:	4003      	ands	r3, r0
   2841c:	2b04      	cmp	r3, #4
   2841e:	d005      	beq.n	2842c <__aeabi_dmul+0x474>
   28420:	0003      	movs	r3, r0
   28422:	1d18      	adds	r0, r3, #4
   28424:	4298      	cmp	r0, r3
   28426:	419b      	sbcs	r3, r3
   28428:	425b      	negs	r3, r3
   2842a:	18e4      	adds	r4, r4, r3
   2842c:	0223      	lsls	r3, r4, #8
   2842e:	d521      	bpl.n	28474 <__aeabi_dmul+0x4bc>
   28430:	2501      	movs	r5, #1
   28432:	9b01      	ldr	r3, [sp, #4]
   28434:	2401      	movs	r4, #1
   28436:	401d      	ands	r5, r3
   28438:	2300      	movs	r3, #0
   2843a:	2200      	movs	r2, #0
   2843c:	4699      	mov	r9, r3
   2843e:	e622      	b.n	28086 <__aeabi_dmul+0xce>
   28440:	251f      	movs	r5, #31
   28442:	0021      	movs	r1, r4
   28444:	426d      	negs	r5, r5
   28446:	1a28      	subs	r0, r5, r0
   28448:	40c1      	lsrs	r1, r0
   2844a:	0008      	movs	r0, r1
   2844c:	2a20      	cmp	r2, #32
   2844e:	d01d      	beq.n	2848c <__aeabi_dmul+0x4d4>
   28450:	355f      	adds	r5, #95	; 0x5f
   28452:	1aaa      	subs	r2, r5, r2
   28454:	4094      	lsls	r4, r2
   28456:	4323      	orrs	r3, r4
   28458:	1e5c      	subs	r4, r3, #1
   2845a:	41a3      	sbcs	r3, r4
   2845c:	2507      	movs	r5, #7
   2845e:	4303      	orrs	r3, r0
   28460:	401d      	ands	r5, r3
   28462:	2200      	movs	r2, #0
   28464:	2d00      	cmp	r5, #0
   28466:	d009      	beq.n	2847c <__aeabi_dmul+0x4c4>
   28468:	220f      	movs	r2, #15
   2846a:	2400      	movs	r4, #0
   2846c:	401a      	ands	r2, r3
   2846e:	0018      	movs	r0, r3
   28470:	2a04      	cmp	r2, #4
   28472:	d1d6      	bne.n	28422 <__aeabi_dmul+0x46a>
   28474:	0003      	movs	r3, r0
   28476:	0765      	lsls	r5, r4, #29
   28478:	0264      	lsls	r4, r4, #9
   2847a:	0b22      	lsrs	r2, r4, #12
   2847c:	08db      	lsrs	r3, r3, #3
   2847e:	432b      	orrs	r3, r5
   28480:	2501      	movs	r5, #1
   28482:	4699      	mov	r9, r3
   28484:	9b01      	ldr	r3, [sp, #4]
   28486:	2400      	movs	r4, #0
   28488:	401d      	ands	r5, r3
   2848a:	e5fc      	b.n	28086 <__aeabi_dmul+0xce>
   2848c:	2400      	movs	r4, #0
   2848e:	e7e2      	b.n	28456 <__aeabi_dmul+0x49e>
   28490:	2280      	movs	r2, #128	; 0x80
   28492:	2501      	movs	r5, #1
   28494:	0312      	lsls	r2, r2, #12
   28496:	4322      	orrs	r2, r4
   28498:	9901      	ldr	r1, [sp, #4]
   2849a:	0312      	lsls	r2, r2, #12
   2849c:	0b12      	lsrs	r2, r2, #12
   2849e:	400d      	ands	r5, r1
   284a0:	4699      	mov	r9, r3
   284a2:	4c04      	ldr	r4, [pc, #16]	; (284b4 <__aeabi_dmul+0x4fc>)
   284a4:	e5ef      	b.n	28086 <__aeabi_dmul+0xce>
   284a6:	46c0      	nop			; (mov r8, r8)
   284a8:	000003ff 	.word	0x000003ff
   284ac:	feffffff 	.word	0xfeffffff
   284b0:	000007fe 	.word	0x000007fe
   284b4:	000007ff 	.word	0x000007ff

000284b8 <__aeabi_dsub>:
   284b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   284ba:	4646      	mov	r6, r8
   284bc:	46d6      	mov	lr, sl
   284be:	464f      	mov	r7, r9
   284c0:	030c      	lsls	r4, r1, #12
   284c2:	b5c0      	push	{r6, r7, lr}
   284c4:	0fcd      	lsrs	r5, r1, #31
   284c6:	004e      	lsls	r6, r1, #1
   284c8:	0a61      	lsrs	r1, r4, #9
   284ca:	0f44      	lsrs	r4, r0, #29
   284cc:	430c      	orrs	r4, r1
   284ce:	00c1      	lsls	r1, r0, #3
   284d0:	0058      	lsls	r0, r3, #1
   284d2:	0d40      	lsrs	r0, r0, #21
   284d4:	4684      	mov	ip, r0
   284d6:	468a      	mov	sl, r1
   284d8:	000f      	movs	r7, r1
   284da:	0319      	lsls	r1, r3, #12
   284dc:	0f50      	lsrs	r0, r2, #29
   284de:	0a49      	lsrs	r1, r1, #9
   284e0:	4301      	orrs	r1, r0
   284e2:	48c6      	ldr	r0, [pc, #792]	; (287fc <__aeabi_dsub+0x344>)
   284e4:	0d76      	lsrs	r6, r6, #21
   284e6:	46a8      	mov	r8, r5
   284e8:	0fdb      	lsrs	r3, r3, #31
   284ea:	00d2      	lsls	r2, r2, #3
   284ec:	4584      	cmp	ip, r0
   284ee:	d100      	bne.n	284f2 <__aeabi_dsub+0x3a>
   284f0:	e0d8      	b.n	286a4 <__aeabi_dsub+0x1ec>
   284f2:	2001      	movs	r0, #1
   284f4:	4043      	eors	r3, r0
   284f6:	42ab      	cmp	r3, r5
   284f8:	d100      	bne.n	284fc <__aeabi_dsub+0x44>
   284fa:	e0a6      	b.n	2864a <__aeabi_dsub+0x192>
   284fc:	4660      	mov	r0, ip
   284fe:	1a35      	subs	r5, r6, r0
   28500:	2d00      	cmp	r5, #0
   28502:	dc00      	bgt.n	28506 <__aeabi_dsub+0x4e>
   28504:	e105      	b.n	28712 <__aeabi_dsub+0x25a>
   28506:	2800      	cmp	r0, #0
   28508:	d110      	bne.n	2852c <__aeabi_dsub+0x74>
   2850a:	000b      	movs	r3, r1
   2850c:	4313      	orrs	r3, r2
   2850e:	d100      	bne.n	28512 <__aeabi_dsub+0x5a>
   28510:	e0d7      	b.n	286c2 <__aeabi_dsub+0x20a>
   28512:	1e6b      	subs	r3, r5, #1
   28514:	2b00      	cmp	r3, #0
   28516:	d000      	beq.n	2851a <__aeabi_dsub+0x62>
   28518:	e14b      	b.n	287b2 <__aeabi_dsub+0x2fa>
   2851a:	4653      	mov	r3, sl
   2851c:	1a9f      	subs	r7, r3, r2
   2851e:	45ba      	cmp	sl, r7
   28520:	4180      	sbcs	r0, r0
   28522:	1a64      	subs	r4, r4, r1
   28524:	4240      	negs	r0, r0
   28526:	1a24      	subs	r4, r4, r0
   28528:	2601      	movs	r6, #1
   2852a:	e01e      	b.n	2856a <__aeabi_dsub+0xb2>
   2852c:	4bb3      	ldr	r3, [pc, #716]	; (287fc <__aeabi_dsub+0x344>)
   2852e:	429e      	cmp	r6, r3
   28530:	d048      	beq.n	285c4 <__aeabi_dsub+0x10c>
   28532:	2380      	movs	r3, #128	; 0x80
   28534:	041b      	lsls	r3, r3, #16
   28536:	4319      	orrs	r1, r3
   28538:	2d38      	cmp	r5, #56	; 0x38
   2853a:	dd00      	ble.n	2853e <__aeabi_dsub+0x86>
   2853c:	e119      	b.n	28772 <__aeabi_dsub+0x2ba>
   2853e:	2d1f      	cmp	r5, #31
   28540:	dd00      	ble.n	28544 <__aeabi_dsub+0x8c>
   28542:	e14c      	b.n	287de <__aeabi_dsub+0x326>
   28544:	2320      	movs	r3, #32
   28546:	000f      	movs	r7, r1
   28548:	1b5b      	subs	r3, r3, r5
   2854a:	0010      	movs	r0, r2
   2854c:	409a      	lsls	r2, r3
   2854e:	409f      	lsls	r7, r3
   28550:	40e8      	lsrs	r0, r5
   28552:	1e53      	subs	r3, r2, #1
   28554:	419a      	sbcs	r2, r3
   28556:	40e9      	lsrs	r1, r5
   28558:	4307      	orrs	r7, r0
   2855a:	4317      	orrs	r7, r2
   2855c:	4653      	mov	r3, sl
   2855e:	1bdf      	subs	r7, r3, r7
   28560:	1a61      	subs	r1, r4, r1
   28562:	45ba      	cmp	sl, r7
   28564:	41a4      	sbcs	r4, r4
   28566:	4264      	negs	r4, r4
   28568:	1b0c      	subs	r4, r1, r4
   2856a:	0223      	lsls	r3, r4, #8
   2856c:	d400      	bmi.n	28570 <__aeabi_dsub+0xb8>
   2856e:	e0c5      	b.n	286fc <__aeabi_dsub+0x244>
   28570:	0264      	lsls	r4, r4, #9
   28572:	0a65      	lsrs	r5, r4, #9
   28574:	2d00      	cmp	r5, #0
   28576:	d100      	bne.n	2857a <__aeabi_dsub+0xc2>
   28578:	e0f6      	b.n	28768 <__aeabi_dsub+0x2b0>
   2857a:	0028      	movs	r0, r5
   2857c:	f000 fbd2 	bl	28d24 <__clzsi2>
   28580:	0003      	movs	r3, r0
   28582:	3b08      	subs	r3, #8
   28584:	2b1f      	cmp	r3, #31
   28586:	dd00      	ble.n	2858a <__aeabi_dsub+0xd2>
   28588:	e0e9      	b.n	2875e <__aeabi_dsub+0x2a6>
   2858a:	2220      	movs	r2, #32
   2858c:	003c      	movs	r4, r7
   2858e:	1ad2      	subs	r2, r2, r3
   28590:	409d      	lsls	r5, r3
   28592:	40d4      	lsrs	r4, r2
   28594:	409f      	lsls	r7, r3
   28596:	4325      	orrs	r5, r4
   28598:	429e      	cmp	r6, r3
   2859a:	dd00      	ble.n	2859e <__aeabi_dsub+0xe6>
   2859c:	e0db      	b.n	28756 <__aeabi_dsub+0x29e>
   2859e:	1b9e      	subs	r6, r3, r6
   285a0:	1c73      	adds	r3, r6, #1
   285a2:	2b1f      	cmp	r3, #31
   285a4:	dd00      	ble.n	285a8 <__aeabi_dsub+0xf0>
   285a6:	e10a      	b.n	287be <__aeabi_dsub+0x306>
   285a8:	2220      	movs	r2, #32
   285aa:	0038      	movs	r0, r7
   285ac:	1ad2      	subs	r2, r2, r3
   285ae:	0029      	movs	r1, r5
   285b0:	4097      	lsls	r7, r2
   285b2:	002c      	movs	r4, r5
   285b4:	4091      	lsls	r1, r2
   285b6:	40d8      	lsrs	r0, r3
   285b8:	1e7a      	subs	r2, r7, #1
   285ba:	4197      	sbcs	r7, r2
   285bc:	40dc      	lsrs	r4, r3
   285be:	2600      	movs	r6, #0
   285c0:	4301      	orrs	r1, r0
   285c2:	430f      	orrs	r7, r1
   285c4:	077b      	lsls	r3, r7, #29
   285c6:	d009      	beq.n	285dc <__aeabi_dsub+0x124>
   285c8:	230f      	movs	r3, #15
   285ca:	403b      	ands	r3, r7
   285cc:	2b04      	cmp	r3, #4
   285ce:	d005      	beq.n	285dc <__aeabi_dsub+0x124>
   285d0:	1d3b      	adds	r3, r7, #4
   285d2:	42bb      	cmp	r3, r7
   285d4:	41bf      	sbcs	r7, r7
   285d6:	427f      	negs	r7, r7
   285d8:	19e4      	adds	r4, r4, r7
   285da:	001f      	movs	r7, r3
   285dc:	0223      	lsls	r3, r4, #8
   285de:	d525      	bpl.n	2862c <__aeabi_dsub+0x174>
   285e0:	4b86      	ldr	r3, [pc, #536]	; (287fc <__aeabi_dsub+0x344>)
   285e2:	3601      	adds	r6, #1
   285e4:	429e      	cmp	r6, r3
   285e6:	d100      	bne.n	285ea <__aeabi_dsub+0x132>
   285e8:	e0af      	b.n	2874a <__aeabi_dsub+0x292>
   285ea:	4b85      	ldr	r3, [pc, #532]	; (28800 <__aeabi_dsub+0x348>)
   285ec:	2501      	movs	r5, #1
   285ee:	401c      	ands	r4, r3
   285f0:	4643      	mov	r3, r8
   285f2:	0762      	lsls	r2, r4, #29
   285f4:	08ff      	lsrs	r7, r7, #3
   285f6:	0264      	lsls	r4, r4, #9
   285f8:	0576      	lsls	r6, r6, #21
   285fa:	4317      	orrs	r7, r2
   285fc:	0b24      	lsrs	r4, r4, #12
   285fe:	0d76      	lsrs	r6, r6, #21
   28600:	401d      	ands	r5, r3
   28602:	2100      	movs	r1, #0
   28604:	0324      	lsls	r4, r4, #12
   28606:	0b23      	lsrs	r3, r4, #12
   28608:	0d0c      	lsrs	r4, r1, #20
   2860a:	4a7e      	ldr	r2, [pc, #504]	; (28804 <__aeabi_dsub+0x34c>)
   2860c:	0524      	lsls	r4, r4, #20
   2860e:	431c      	orrs	r4, r3
   28610:	4014      	ands	r4, r2
   28612:	0533      	lsls	r3, r6, #20
   28614:	4323      	orrs	r3, r4
   28616:	005b      	lsls	r3, r3, #1
   28618:	07ed      	lsls	r5, r5, #31
   2861a:	085b      	lsrs	r3, r3, #1
   2861c:	432b      	orrs	r3, r5
   2861e:	0038      	movs	r0, r7
   28620:	0019      	movs	r1, r3
   28622:	bc1c      	pop	{r2, r3, r4}
   28624:	4690      	mov	r8, r2
   28626:	4699      	mov	r9, r3
   28628:	46a2      	mov	sl, r4
   2862a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2862c:	2501      	movs	r5, #1
   2862e:	4643      	mov	r3, r8
   28630:	0762      	lsls	r2, r4, #29
   28632:	08ff      	lsrs	r7, r7, #3
   28634:	4317      	orrs	r7, r2
   28636:	08e4      	lsrs	r4, r4, #3
   28638:	401d      	ands	r5, r3
   2863a:	4b70      	ldr	r3, [pc, #448]	; (287fc <__aeabi_dsub+0x344>)
   2863c:	429e      	cmp	r6, r3
   2863e:	d036      	beq.n	286ae <__aeabi_dsub+0x1f6>
   28640:	0324      	lsls	r4, r4, #12
   28642:	0576      	lsls	r6, r6, #21
   28644:	0b24      	lsrs	r4, r4, #12
   28646:	0d76      	lsrs	r6, r6, #21
   28648:	e7db      	b.n	28602 <__aeabi_dsub+0x14a>
   2864a:	4663      	mov	r3, ip
   2864c:	1af3      	subs	r3, r6, r3
   2864e:	2b00      	cmp	r3, #0
   28650:	dc00      	bgt.n	28654 <__aeabi_dsub+0x19c>
   28652:	e094      	b.n	2877e <__aeabi_dsub+0x2c6>
   28654:	4660      	mov	r0, ip
   28656:	2800      	cmp	r0, #0
   28658:	d035      	beq.n	286c6 <__aeabi_dsub+0x20e>
   2865a:	4868      	ldr	r0, [pc, #416]	; (287fc <__aeabi_dsub+0x344>)
   2865c:	4286      	cmp	r6, r0
   2865e:	d0b1      	beq.n	285c4 <__aeabi_dsub+0x10c>
   28660:	2780      	movs	r7, #128	; 0x80
   28662:	043f      	lsls	r7, r7, #16
   28664:	4339      	orrs	r1, r7
   28666:	2b38      	cmp	r3, #56	; 0x38
   28668:	dc00      	bgt.n	2866c <__aeabi_dsub+0x1b4>
   2866a:	e0fd      	b.n	28868 <__aeabi_dsub+0x3b0>
   2866c:	430a      	orrs	r2, r1
   2866e:	0017      	movs	r7, r2
   28670:	2100      	movs	r1, #0
   28672:	1e7a      	subs	r2, r7, #1
   28674:	4197      	sbcs	r7, r2
   28676:	4457      	add	r7, sl
   28678:	4557      	cmp	r7, sl
   2867a:	4180      	sbcs	r0, r0
   2867c:	1909      	adds	r1, r1, r4
   2867e:	4244      	negs	r4, r0
   28680:	190c      	adds	r4, r1, r4
   28682:	0223      	lsls	r3, r4, #8
   28684:	d53a      	bpl.n	286fc <__aeabi_dsub+0x244>
   28686:	4b5d      	ldr	r3, [pc, #372]	; (287fc <__aeabi_dsub+0x344>)
   28688:	3601      	adds	r6, #1
   2868a:	429e      	cmp	r6, r3
   2868c:	d100      	bne.n	28690 <__aeabi_dsub+0x1d8>
   2868e:	e14b      	b.n	28928 <__aeabi_dsub+0x470>
   28690:	2201      	movs	r2, #1
   28692:	4b5b      	ldr	r3, [pc, #364]	; (28800 <__aeabi_dsub+0x348>)
   28694:	401c      	ands	r4, r3
   28696:	087b      	lsrs	r3, r7, #1
   28698:	4017      	ands	r7, r2
   2869a:	431f      	orrs	r7, r3
   2869c:	07e2      	lsls	r2, r4, #31
   2869e:	4317      	orrs	r7, r2
   286a0:	0864      	lsrs	r4, r4, #1
   286a2:	e78f      	b.n	285c4 <__aeabi_dsub+0x10c>
   286a4:	0008      	movs	r0, r1
   286a6:	4310      	orrs	r0, r2
   286a8:	d000      	beq.n	286ac <__aeabi_dsub+0x1f4>
   286aa:	e724      	b.n	284f6 <__aeabi_dsub+0x3e>
   286ac:	e721      	b.n	284f2 <__aeabi_dsub+0x3a>
   286ae:	0023      	movs	r3, r4
   286b0:	433b      	orrs	r3, r7
   286b2:	d100      	bne.n	286b6 <__aeabi_dsub+0x1fe>
   286b4:	e1b9      	b.n	28a2a <__aeabi_dsub+0x572>
   286b6:	2280      	movs	r2, #128	; 0x80
   286b8:	0312      	lsls	r2, r2, #12
   286ba:	4314      	orrs	r4, r2
   286bc:	0324      	lsls	r4, r4, #12
   286be:	0b24      	lsrs	r4, r4, #12
   286c0:	e79f      	b.n	28602 <__aeabi_dsub+0x14a>
   286c2:	002e      	movs	r6, r5
   286c4:	e77e      	b.n	285c4 <__aeabi_dsub+0x10c>
   286c6:	0008      	movs	r0, r1
   286c8:	4310      	orrs	r0, r2
   286ca:	d100      	bne.n	286ce <__aeabi_dsub+0x216>
   286cc:	e0ca      	b.n	28864 <__aeabi_dsub+0x3ac>
   286ce:	1e58      	subs	r0, r3, #1
   286d0:	4684      	mov	ip, r0
   286d2:	2800      	cmp	r0, #0
   286d4:	d000      	beq.n	286d8 <__aeabi_dsub+0x220>
   286d6:	e0e7      	b.n	288a8 <__aeabi_dsub+0x3f0>
   286d8:	4452      	add	r2, sl
   286da:	4552      	cmp	r2, sl
   286dc:	4180      	sbcs	r0, r0
   286de:	1864      	adds	r4, r4, r1
   286e0:	4240      	negs	r0, r0
   286e2:	1824      	adds	r4, r4, r0
   286e4:	0017      	movs	r7, r2
   286e6:	2601      	movs	r6, #1
   286e8:	0223      	lsls	r3, r4, #8
   286ea:	d507      	bpl.n	286fc <__aeabi_dsub+0x244>
   286ec:	2602      	movs	r6, #2
   286ee:	e7cf      	b.n	28690 <__aeabi_dsub+0x1d8>
   286f0:	4664      	mov	r4, ip
   286f2:	432c      	orrs	r4, r5
   286f4:	d100      	bne.n	286f8 <__aeabi_dsub+0x240>
   286f6:	e1b3      	b.n	28a60 <__aeabi_dsub+0x5a8>
   286f8:	002c      	movs	r4, r5
   286fa:	4667      	mov	r7, ip
   286fc:	077b      	lsls	r3, r7, #29
   286fe:	d000      	beq.n	28702 <__aeabi_dsub+0x24a>
   28700:	e762      	b.n	285c8 <__aeabi_dsub+0x110>
   28702:	0763      	lsls	r3, r4, #29
   28704:	08ff      	lsrs	r7, r7, #3
   28706:	431f      	orrs	r7, r3
   28708:	2501      	movs	r5, #1
   2870a:	4643      	mov	r3, r8
   2870c:	08e4      	lsrs	r4, r4, #3
   2870e:	401d      	ands	r5, r3
   28710:	e793      	b.n	2863a <__aeabi_dsub+0x182>
   28712:	2d00      	cmp	r5, #0
   28714:	d178      	bne.n	28808 <__aeabi_dsub+0x350>
   28716:	1c75      	adds	r5, r6, #1
   28718:	056d      	lsls	r5, r5, #21
   2871a:	0d6d      	lsrs	r5, r5, #21
   2871c:	2d01      	cmp	r5, #1
   2871e:	dc00      	bgt.n	28722 <__aeabi_dsub+0x26a>
   28720:	e0f2      	b.n	28908 <__aeabi_dsub+0x450>
   28722:	4650      	mov	r0, sl
   28724:	1a80      	subs	r0, r0, r2
   28726:	4582      	cmp	sl, r0
   28728:	41bf      	sbcs	r7, r7
   2872a:	1a65      	subs	r5, r4, r1
   2872c:	427f      	negs	r7, r7
   2872e:	1bed      	subs	r5, r5, r7
   28730:	4684      	mov	ip, r0
   28732:	0228      	lsls	r0, r5, #8
   28734:	d400      	bmi.n	28738 <__aeabi_dsub+0x280>
   28736:	e08c      	b.n	28852 <__aeabi_dsub+0x39a>
   28738:	4650      	mov	r0, sl
   2873a:	1a17      	subs	r7, r2, r0
   2873c:	42ba      	cmp	r2, r7
   2873e:	4192      	sbcs	r2, r2
   28740:	1b0c      	subs	r4, r1, r4
   28742:	4255      	negs	r5, r2
   28744:	1b65      	subs	r5, r4, r5
   28746:	4698      	mov	r8, r3
   28748:	e714      	b.n	28574 <__aeabi_dsub+0xbc>
   2874a:	2501      	movs	r5, #1
   2874c:	4643      	mov	r3, r8
   2874e:	2400      	movs	r4, #0
   28750:	401d      	ands	r5, r3
   28752:	2700      	movs	r7, #0
   28754:	e755      	b.n	28602 <__aeabi_dsub+0x14a>
   28756:	4c2a      	ldr	r4, [pc, #168]	; (28800 <__aeabi_dsub+0x348>)
   28758:	1af6      	subs	r6, r6, r3
   2875a:	402c      	ands	r4, r5
   2875c:	e732      	b.n	285c4 <__aeabi_dsub+0x10c>
   2875e:	003d      	movs	r5, r7
   28760:	3828      	subs	r0, #40	; 0x28
   28762:	4085      	lsls	r5, r0
   28764:	2700      	movs	r7, #0
   28766:	e717      	b.n	28598 <__aeabi_dsub+0xe0>
   28768:	0038      	movs	r0, r7
   2876a:	f000 fadb 	bl	28d24 <__clzsi2>
   2876e:	3020      	adds	r0, #32
   28770:	e706      	b.n	28580 <__aeabi_dsub+0xc8>
   28772:	430a      	orrs	r2, r1
   28774:	0017      	movs	r7, r2
   28776:	2100      	movs	r1, #0
   28778:	1e7a      	subs	r2, r7, #1
   2877a:	4197      	sbcs	r7, r2
   2877c:	e6ee      	b.n	2855c <__aeabi_dsub+0xa4>
   2877e:	2b00      	cmp	r3, #0
   28780:	d000      	beq.n	28784 <__aeabi_dsub+0x2cc>
   28782:	e0e5      	b.n	28950 <__aeabi_dsub+0x498>
   28784:	1c73      	adds	r3, r6, #1
   28786:	469c      	mov	ip, r3
   28788:	055b      	lsls	r3, r3, #21
   2878a:	0d5b      	lsrs	r3, r3, #21
   2878c:	2b01      	cmp	r3, #1
   2878e:	dc00      	bgt.n	28792 <__aeabi_dsub+0x2da>
   28790:	e09f      	b.n	288d2 <__aeabi_dsub+0x41a>
   28792:	4b1a      	ldr	r3, [pc, #104]	; (287fc <__aeabi_dsub+0x344>)
   28794:	459c      	cmp	ip, r3
   28796:	d100      	bne.n	2879a <__aeabi_dsub+0x2e2>
   28798:	e0c5      	b.n	28926 <__aeabi_dsub+0x46e>
   2879a:	4452      	add	r2, sl
   2879c:	4552      	cmp	r2, sl
   2879e:	4180      	sbcs	r0, r0
   287a0:	1864      	adds	r4, r4, r1
   287a2:	4240      	negs	r0, r0
   287a4:	1824      	adds	r4, r4, r0
   287a6:	07e7      	lsls	r7, r4, #31
   287a8:	0852      	lsrs	r2, r2, #1
   287aa:	4317      	orrs	r7, r2
   287ac:	0864      	lsrs	r4, r4, #1
   287ae:	4666      	mov	r6, ip
   287b0:	e708      	b.n	285c4 <__aeabi_dsub+0x10c>
   287b2:	4812      	ldr	r0, [pc, #72]	; (287fc <__aeabi_dsub+0x344>)
   287b4:	4285      	cmp	r5, r0
   287b6:	d100      	bne.n	287ba <__aeabi_dsub+0x302>
   287b8:	e085      	b.n	288c6 <__aeabi_dsub+0x40e>
   287ba:	001d      	movs	r5, r3
   287bc:	e6bc      	b.n	28538 <__aeabi_dsub+0x80>
   287be:	0029      	movs	r1, r5
   287c0:	3e1f      	subs	r6, #31
   287c2:	40f1      	lsrs	r1, r6
   287c4:	2b20      	cmp	r3, #32
   287c6:	d100      	bne.n	287ca <__aeabi_dsub+0x312>
   287c8:	e07f      	b.n	288ca <__aeabi_dsub+0x412>
   287ca:	2240      	movs	r2, #64	; 0x40
   287cc:	1ad3      	subs	r3, r2, r3
   287ce:	409d      	lsls	r5, r3
   287d0:	432f      	orrs	r7, r5
   287d2:	1e7d      	subs	r5, r7, #1
   287d4:	41af      	sbcs	r7, r5
   287d6:	2400      	movs	r4, #0
   287d8:	430f      	orrs	r7, r1
   287da:	2600      	movs	r6, #0
   287dc:	e78e      	b.n	286fc <__aeabi_dsub+0x244>
   287de:	002b      	movs	r3, r5
   287e0:	000f      	movs	r7, r1
   287e2:	3b20      	subs	r3, #32
   287e4:	40df      	lsrs	r7, r3
   287e6:	2d20      	cmp	r5, #32
   287e8:	d071      	beq.n	288ce <__aeabi_dsub+0x416>
   287ea:	2340      	movs	r3, #64	; 0x40
   287ec:	1b5d      	subs	r5, r3, r5
   287ee:	40a9      	lsls	r1, r5
   287f0:	430a      	orrs	r2, r1
   287f2:	1e51      	subs	r1, r2, #1
   287f4:	418a      	sbcs	r2, r1
   287f6:	2100      	movs	r1, #0
   287f8:	4317      	orrs	r7, r2
   287fa:	e6af      	b.n	2855c <__aeabi_dsub+0xa4>
   287fc:	000007ff 	.word	0x000007ff
   28800:	ff7fffff 	.word	0xff7fffff
   28804:	800fffff 	.word	0x800fffff
   28808:	2e00      	cmp	r6, #0
   2880a:	d03e      	beq.n	2888a <__aeabi_dsub+0x3d2>
   2880c:	4eb3      	ldr	r6, [pc, #716]	; (28adc <__aeabi_dsub+0x624>)
   2880e:	45b4      	cmp	ip, r6
   28810:	d045      	beq.n	2889e <__aeabi_dsub+0x3e6>
   28812:	2680      	movs	r6, #128	; 0x80
   28814:	0436      	lsls	r6, r6, #16
   28816:	426d      	negs	r5, r5
   28818:	4334      	orrs	r4, r6
   2881a:	2d38      	cmp	r5, #56	; 0x38
   2881c:	dd00      	ble.n	28820 <__aeabi_dsub+0x368>
   2881e:	e0a8      	b.n	28972 <__aeabi_dsub+0x4ba>
   28820:	2d1f      	cmp	r5, #31
   28822:	dd00      	ble.n	28826 <__aeabi_dsub+0x36e>
   28824:	e11f      	b.n	28a66 <__aeabi_dsub+0x5ae>
   28826:	2620      	movs	r6, #32
   28828:	0027      	movs	r7, r4
   2882a:	4650      	mov	r0, sl
   2882c:	1b76      	subs	r6, r6, r5
   2882e:	40b7      	lsls	r7, r6
   28830:	40e8      	lsrs	r0, r5
   28832:	4307      	orrs	r7, r0
   28834:	4650      	mov	r0, sl
   28836:	40b0      	lsls	r0, r6
   28838:	1e46      	subs	r6, r0, #1
   2883a:	41b0      	sbcs	r0, r6
   2883c:	40ec      	lsrs	r4, r5
   2883e:	4338      	orrs	r0, r7
   28840:	1a17      	subs	r7, r2, r0
   28842:	42ba      	cmp	r2, r7
   28844:	4192      	sbcs	r2, r2
   28846:	1b0c      	subs	r4, r1, r4
   28848:	4252      	negs	r2, r2
   2884a:	1aa4      	subs	r4, r4, r2
   2884c:	4666      	mov	r6, ip
   2884e:	4698      	mov	r8, r3
   28850:	e68b      	b.n	2856a <__aeabi_dsub+0xb2>
   28852:	4664      	mov	r4, ip
   28854:	4667      	mov	r7, ip
   28856:	432c      	orrs	r4, r5
   28858:	d000      	beq.n	2885c <__aeabi_dsub+0x3a4>
   2885a:	e68b      	b.n	28574 <__aeabi_dsub+0xbc>
   2885c:	2500      	movs	r5, #0
   2885e:	2600      	movs	r6, #0
   28860:	2700      	movs	r7, #0
   28862:	e6ea      	b.n	2863a <__aeabi_dsub+0x182>
   28864:	001e      	movs	r6, r3
   28866:	e6ad      	b.n	285c4 <__aeabi_dsub+0x10c>
   28868:	2b1f      	cmp	r3, #31
   2886a:	dc60      	bgt.n	2892e <__aeabi_dsub+0x476>
   2886c:	2720      	movs	r7, #32
   2886e:	1af8      	subs	r0, r7, r3
   28870:	000f      	movs	r7, r1
   28872:	4684      	mov	ip, r0
   28874:	4087      	lsls	r7, r0
   28876:	0010      	movs	r0, r2
   28878:	40d8      	lsrs	r0, r3
   2887a:	4307      	orrs	r7, r0
   2887c:	4660      	mov	r0, ip
   2887e:	4082      	lsls	r2, r0
   28880:	1e50      	subs	r0, r2, #1
   28882:	4182      	sbcs	r2, r0
   28884:	40d9      	lsrs	r1, r3
   28886:	4317      	orrs	r7, r2
   28888:	e6f5      	b.n	28676 <__aeabi_dsub+0x1be>
   2888a:	0026      	movs	r6, r4
   2888c:	4650      	mov	r0, sl
   2888e:	4306      	orrs	r6, r0
   28890:	d005      	beq.n	2889e <__aeabi_dsub+0x3e6>
   28892:	43ed      	mvns	r5, r5
   28894:	2d00      	cmp	r5, #0
   28896:	d0d3      	beq.n	28840 <__aeabi_dsub+0x388>
   28898:	4e90      	ldr	r6, [pc, #576]	; (28adc <__aeabi_dsub+0x624>)
   2889a:	45b4      	cmp	ip, r6
   2889c:	d1bd      	bne.n	2881a <__aeabi_dsub+0x362>
   2889e:	000c      	movs	r4, r1
   288a0:	0017      	movs	r7, r2
   288a2:	4666      	mov	r6, ip
   288a4:	4698      	mov	r8, r3
   288a6:	e68d      	b.n	285c4 <__aeabi_dsub+0x10c>
   288a8:	488c      	ldr	r0, [pc, #560]	; (28adc <__aeabi_dsub+0x624>)
   288aa:	4283      	cmp	r3, r0
   288ac:	d00b      	beq.n	288c6 <__aeabi_dsub+0x40e>
   288ae:	4663      	mov	r3, ip
   288b0:	e6d9      	b.n	28666 <__aeabi_dsub+0x1ae>
   288b2:	2d00      	cmp	r5, #0
   288b4:	d000      	beq.n	288b8 <__aeabi_dsub+0x400>
   288b6:	e096      	b.n	289e6 <__aeabi_dsub+0x52e>
   288b8:	0008      	movs	r0, r1
   288ba:	4310      	orrs	r0, r2
   288bc:	d100      	bne.n	288c0 <__aeabi_dsub+0x408>
   288be:	e0e2      	b.n	28a86 <__aeabi_dsub+0x5ce>
   288c0:	000c      	movs	r4, r1
   288c2:	0017      	movs	r7, r2
   288c4:	4698      	mov	r8, r3
   288c6:	4e85      	ldr	r6, [pc, #532]	; (28adc <__aeabi_dsub+0x624>)
   288c8:	e67c      	b.n	285c4 <__aeabi_dsub+0x10c>
   288ca:	2500      	movs	r5, #0
   288cc:	e780      	b.n	287d0 <__aeabi_dsub+0x318>
   288ce:	2100      	movs	r1, #0
   288d0:	e78e      	b.n	287f0 <__aeabi_dsub+0x338>
   288d2:	0023      	movs	r3, r4
   288d4:	4650      	mov	r0, sl
   288d6:	4303      	orrs	r3, r0
   288d8:	2e00      	cmp	r6, #0
   288da:	d000      	beq.n	288de <__aeabi_dsub+0x426>
   288dc:	e0a8      	b.n	28a30 <__aeabi_dsub+0x578>
   288de:	2b00      	cmp	r3, #0
   288e0:	d100      	bne.n	288e4 <__aeabi_dsub+0x42c>
   288e2:	e0de      	b.n	28aa2 <__aeabi_dsub+0x5ea>
   288e4:	000b      	movs	r3, r1
   288e6:	4313      	orrs	r3, r2
   288e8:	d100      	bne.n	288ec <__aeabi_dsub+0x434>
   288ea:	e66b      	b.n	285c4 <__aeabi_dsub+0x10c>
   288ec:	4452      	add	r2, sl
   288ee:	4552      	cmp	r2, sl
   288f0:	4180      	sbcs	r0, r0
   288f2:	1864      	adds	r4, r4, r1
   288f4:	4240      	negs	r0, r0
   288f6:	1824      	adds	r4, r4, r0
   288f8:	0017      	movs	r7, r2
   288fa:	0223      	lsls	r3, r4, #8
   288fc:	d400      	bmi.n	28900 <__aeabi_dsub+0x448>
   288fe:	e6fd      	b.n	286fc <__aeabi_dsub+0x244>
   28900:	4b77      	ldr	r3, [pc, #476]	; (28ae0 <__aeabi_dsub+0x628>)
   28902:	4666      	mov	r6, ip
   28904:	401c      	ands	r4, r3
   28906:	e65d      	b.n	285c4 <__aeabi_dsub+0x10c>
   28908:	0025      	movs	r5, r4
   2890a:	4650      	mov	r0, sl
   2890c:	4305      	orrs	r5, r0
   2890e:	2e00      	cmp	r6, #0
   28910:	d1cf      	bne.n	288b2 <__aeabi_dsub+0x3fa>
   28912:	2d00      	cmp	r5, #0
   28914:	d14f      	bne.n	289b6 <__aeabi_dsub+0x4fe>
   28916:	000c      	movs	r4, r1
   28918:	4314      	orrs	r4, r2
   2891a:	d100      	bne.n	2891e <__aeabi_dsub+0x466>
   2891c:	e0a0      	b.n	28a60 <__aeabi_dsub+0x5a8>
   2891e:	000c      	movs	r4, r1
   28920:	0017      	movs	r7, r2
   28922:	4698      	mov	r8, r3
   28924:	e64e      	b.n	285c4 <__aeabi_dsub+0x10c>
   28926:	4666      	mov	r6, ip
   28928:	2400      	movs	r4, #0
   2892a:	2700      	movs	r7, #0
   2892c:	e685      	b.n	2863a <__aeabi_dsub+0x182>
   2892e:	001f      	movs	r7, r3
   28930:	0008      	movs	r0, r1
   28932:	3f20      	subs	r7, #32
   28934:	40f8      	lsrs	r0, r7
   28936:	0007      	movs	r7, r0
   28938:	2b20      	cmp	r3, #32
   2893a:	d100      	bne.n	2893e <__aeabi_dsub+0x486>
   2893c:	e08e      	b.n	28a5c <__aeabi_dsub+0x5a4>
   2893e:	2040      	movs	r0, #64	; 0x40
   28940:	1ac3      	subs	r3, r0, r3
   28942:	4099      	lsls	r1, r3
   28944:	430a      	orrs	r2, r1
   28946:	1e51      	subs	r1, r2, #1
   28948:	418a      	sbcs	r2, r1
   2894a:	2100      	movs	r1, #0
   2894c:	4317      	orrs	r7, r2
   2894e:	e692      	b.n	28676 <__aeabi_dsub+0x1be>
   28950:	2e00      	cmp	r6, #0
   28952:	d114      	bne.n	2897e <__aeabi_dsub+0x4c6>
   28954:	0026      	movs	r6, r4
   28956:	4650      	mov	r0, sl
   28958:	4306      	orrs	r6, r0
   2895a:	d062      	beq.n	28a22 <__aeabi_dsub+0x56a>
   2895c:	43db      	mvns	r3, r3
   2895e:	2b00      	cmp	r3, #0
   28960:	d15c      	bne.n	28a1c <__aeabi_dsub+0x564>
   28962:	1887      	adds	r7, r0, r2
   28964:	4297      	cmp	r7, r2
   28966:	4192      	sbcs	r2, r2
   28968:	1864      	adds	r4, r4, r1
   2896a:	4252      	negs	r2, r2
   2896c:	18a4      	adds	r4, r4, r2
   2896e:	4666      	mov	r6, ip
   28970:	e687      	b.n	28682 <__aeabi_dsub+0x1ca>
   28972:	4650      	mov	r0, sl
   28974:	4320      	orrs	r0, r4
   28976:	1e44      	subs	r4, r0, #1
   28978:	41a0      	sbcs	r0, r4
   2897a:	2400      	movs	r4, #0
   2897c:	e760      	b.n	28840 <__aeabi_dsub+0x388>
   2897e:	4e57      	ldr	r6, [pc, #348]	; (28adc <__aeabi_dsub+0x624>)
   28980:	45b4      	cmp	ip, r6
   28982:	d04e      	beq.n	28a22 <__aeabi_dsub+0x56a>
   28984:	2680      	movs	r6, #128	; 0x80
   28986:	0436      	lsls	r6, r6, #16
   28988:	425b      	negs	r3, r3
   2898a:	4334      	orrs	r4, r6
   2898c:	2b38      	cmp	r3, #56	; 0x38
   2898e:	dd00      	ble.n	28992 <__aeabi_dsub+0x4da>
   28990:	e07f      	b.n	28a92 <__aeabi_dsub+0x5da>
   28992:	2b1f      	cmp	r3, #31
   28994:	dd00      	ble.n	28998 <__aeabi_dsub+0x4e0>
   28996:	e08b      	b.n	28ab0 <__aeabi_dsub+0x5f8>
   28998:	2620      	movs	r6, #32
   2899a:	0027      	movs	r7, r4
   2899c:	4650      	mov	r0, sl
   2899e:	1af6      	subs	r6, r6, r3
   289a0:	40b7      	lsls	r7, r6
   289a2:	40d8      	lsrs	r0, r3
   289a4:	4307      	orrs	r7, r0
   289a6:	4650      	mov	r0, sl
   289a8:	40b0      	lsls	r0, r6
   289aa:	1e46      	subs	r6, r0, #1
   289ac:	41b0      	sbcs	r0, r6
   289ae:	4307      	orrs	r7, r0
   289b0:	40dc      	lsrs	r4, r3
   289b2:	18bf      	adds	r7, r7, r2
   289b4:	e7d6      	b.n	28964 <__aeabi_dsub+0x4ac>
   289b6:	000d      	movs	r5, r1
   289b8:	4315      	orrs	r5, r2
   289ba:	d100      	bne.n	289be <__aeabi_dsub+0x506>
   289bc:	e602      	b.n	285c4 <__aeabi_dsub+0x10c>
   289be:	4650      	mov	r0, sl
   289c0:	1a80      	subs	r0, r0, r2
   289c2:	4582      	cmp	sl, r0
   289c4:	41bf      	sbcs	r7, r7
   289c6:	1a65      	subs	r5, r4, r1
   289c8:	427f      	negs	r7, r7
   289ca:	1bed      	subs	r5, r5, r7
   289cc:	4684      	mov	ip, r0
   289ce:	0228      	lsls	r0, r5, #8
   289d0:	d400      	bmi.n	289d4 <__aeabi_dsub+0x51c>
   289d2:	e68d      	b.n	286f0 <__aeabi_dsub+0x238>
   289d4:	4650      	mov	r0, sl
   289d6:	1a17      	subs	r7, r2, r0
   289d8:	42ba      	cmp	r2, r7
   289da:	4192      	sbcs	r2, r2
   289dc:	1b0c      	subs	r4, r1, r4
   289de:	4252      	negs	r2, r2
   289e0:	1aa4      	subs	r4, r4, r2
   289e2:	4698      	mov	r8, r3
   289e4:	e5ee      	b.n	285c4 <__aeabi_dsub+0x10c>
   289e6:	000d      	movs	r5, r1
   289e8:	4315      	orrs	r5, r2
   289ea:	d100      	bne.n	289ee <__aeabi_dsub+0x536>
   289ec:	e76b      	b.n	288c6 <__aeabi_dsub+0x40e>
   289ee:	4650      	mov	r0, sl
   289f0:	0767      	lsls	r7, r4, #29
   289f2:	08c0      	lsrs	r0, r0, #3
   289f4:	4307      	orrs	r7, r0
   289f6:	2080      	movs	r0, #128	; 0x80
   289f8:	08e4      	lsrs	r4, r4, #3
   289fa:	0300      	lsls	r0, r0, #12
   289fc:	4204      	tst	r4, r0
   289fe:	d007      	beq.n	28a10 <__aeabi_dsub+0x558>
   28a00:	08cd      	lsrs	r5, r1, #3
   28a02:	4205      	tst	r5, r0
   28a04:	d104      	bne.n	28a10 <__aeabi_dsub+0x558>
   28a06:	002c      	movs	r4, r5
   28a08:	4698      	mov	r8, r3
   28a0a:	08d7      	lsrs	r7, r2, #3
   28a0c:	0749      	lsls	r1, r1, #29
   28a0e:	430f      	orrs	r7, r1
   28a10:	0f7b      	lsrs	r3, r7, #29
   28a12:	00e4      	lsls	r4, r4, #3
   28a14:	431c      	orrs	r4, r3
   28a16:	00ff      	lsls	r7, r7, #3
   28a18:	4e30      	ldr	r6, [pc, #192]	; (28adc <__aeabi_dsub+0x624>)
   28a1a:	e5d3      	b.n	285c4 <__aeabi_dsub+0x10c>
   28a1c:	4e2f      	ldr	r6, [pc, #188]	; (28adc <__aeabi_dsub+0x624>)
   28a1e:	45b4      	cmp	ip, r6
   28a20:	d1b4      	bne.n	2898c <__aeabi_dsub+0x4d4>
   28a22:	000c      	movs	r4, r1
   28a24:	0017      	movs	r7, r2
   28a26:	4666      	mov	r6, ip
   28a28:	e5cc      	b.n	285c4 <__aeabi_dsub+0x10c>
   28a2a:	2700      	movs	r7, #0
   28a2c:	2400      	movs	r4, #0
   28a2e:	e5e8      	b.n	28602 <__aeabi_dsub+0x14a>
   28a30:	2b00      	cmp	r3, #0
   28a32:	d039      	beq.n	28aa8 <__aeabi_dsub+0x5f0>
   28a34:	000b      	movs	r3, r1
   28a36:	4313      	orrs	r3, r2
   28a38:	d100      	bne.n	28a3c <__aeabi_dsub+0x584>
   28a3a:	e744      	b.n	288c6 <__aeabi_dsub+0x40e>
   28a3c:	08c0      	lsrs	r0, r0, #3
   28a3e:	0767      	lsls	r7, r4, #29
   28a40:	4307      	orrs	r7, r0
   28a42:	2080      	movs	r0, #128	; 0x80
   28a44:	08e4      	lsrs	r4, r4, #3
   28a46:	0300      	lsls	r0, r0, #12
   28a48:	4204      	tst	r4, r0
   28a4a:	d0e1      	beq.n	28a10 <__aeabi_dsub+0x558>
   28a4c:	08cb      	lsrs	r3, r1, #3
   28a4e:	4203      	tst	r3, r0
   28a50:	d1de      	bne.n	28a10 <__aeabi_dsub+0x558>
   28a52:	08d7      	lsrs	r7, r2, #3
   28a54:	0749      	lsls	r1, r1, #29
   28a56:	430f      	orrs	r7, r1
   28a58:	001c      	movs	r4, r3
   28a5a:	e7d9      	b.n	28a10 <__aeabi_dsub+0x558>
   28a5c:	2100      	movs	r1, #0
   28a5e:	e771      	b.n	28944 <__aeabi_dsub+0x48c>
   28a60:	2500      	movs	r5, #0
   28a62:	2700      	movs	r7, #0
   28a64:	e5e9      	b.n	2863a <__aeabi_dsub+0x182>
   28a66:	002e      	movs	r6, r5
   28a68:	0027      	movs	r7, r4
   28a6a:	3e20      	subs	r6, #32
   28a6c:	40f7      	lsrs	r7, r6
   28a6e:	2d20      	cmp	r5, #32
   28a70:	d02f      	beq.n	28ad2 <__aeabi_dsub+0x61a>
   28a72:	2640      	movs	r6, #64	; 0x40
   28a74:	1b75      	subs	r5, r6, r5
   28a76:	40ac      	lsls	r4, r5
   28a78:	4650      	mov	r0, sl
   28a7a:	4320      	orrs	r0, r4
   28a7c:	1e44      	subs	r4, r0, #1
   28a7e:	41a0      	sbcs	r0, r4
   28a80:	2400      	movs	r4, #0
   28a82:	4338      	orrs	r0, r7
   28a84:	e6dc      	b.n	28840 <__aeabi_dsub+0x388>
   28a86:	2480      	movs	r4, #128	; 0x80
   28a88:	2500      	movs	r5, #0
   28a8a:	0324      	lsls	r4, r4, #12
   28a8c:	4e13      	ldr	r6, [pc, #76]	; (28adc <__aeabi_dsub+0x624>)
   28a8e:	2700      	movs	r7, #0
   28a90:	e5d3      	b.n	2863a <__aeabi_dsub+0x182>
   28a92:	4650      	mov	r0, sl
   28a94:	4320      	orrs	r0, r4
   28a96:	0007      	movs	r7, r0
   28a98:	1e78      	subs	r0, r7, #1
   28a9a:	4187      	sbcs	r7, r0
   28a9c:	2400      	movs	r4, #0
   28a9e:	18bf      	adds	r7, r7, r2
   28aa0:	e760      	b.n	28964 <__aeabi_dsub+0x4ac>
   28aa2:	000c      	movs	r4, r1
   28aa4:	0017      	movs	r7, r2
   28aa6:	e58d      	b.n	285c4 <__aeabi_dsub+0x10c>
   28aa8:	000c      	movs	r4, r1
   28aaa:	0017      	movs	r7, r2
   28aac:	4e0b      	ldr	r6, [pc, #44]	; (28adc <__aeabi_dsub+0x624>)
   28aae:	e589      	b.n	285c4 <__aeabi_dsub+0x10c>
   28ab0:	001e      	movs	r6, r3
   28ab2:	0027      	movs	r7, r4
   28ab4:	3e20      	subs	r6, #32
   28ab6:	40f7      	lsrs	r7, r6
   28ab8:	2b20      	cmp	r3, #32
   28aba:	d00c      	beq.n	28ad6 <__aeabi_dsub+0x61e>
   28abc:	2640      	movs	r6, #64	; 0x40
   28abe:	1af3      	subs	r3, r6, r3
   28ac0:	409c      	lsls	r4, r3
   28ac2:	4650      	mov	r0, sl
   28ac4:	4320      	orrs	r0, r4
   28ac6:	1e44      	subs	r4, r0, #1
   28ac8:	41a0      	sbcs	r0, r4
   28aca:	4307      	orrs	r7, r0
   28acc:	2400      	movs	r4, #0
   28ace:	18bf      	adds	r7, r7, r2
   28ad0:	e748      	b.n	28964 <__aeabi_dsub+0x4ac>
   28ad2:	2400      	movs	r4, #0
   28ad4:	e7d0      	b.n	28a78 <__aeabi_dsub+0x5c0>
   28ad6:	2400      	movs	r4, #0
   28ad8:	e7f3      	b.n	28ac2 <__aeabi_dsub+0x60a>
   28ada:	46c0      	nop			; (mov r8, r8)
   28adc:	000007ff 	.word	0x000007ff
   28ae0:	ff7fffff 	.word	0xff7fffff

00028ae4 <__aeabi_dcmpun>:
   28ae4:	b570      	push	{r4, r5, r6, lr}
   28ae6:	4e0e      	ldr	r6, [pc, #56]	; (28b20 <__aeabi_dcmpun+0x3c>)
   28ae8:	030d      	lsls	r5, r1, #12
   28aea:	031c      	lsls	r4, r3, #12
   28aec:	0049      	lsls	r1, r1, #1
   28aee:	005b      	lsls	r3, r3, #1
   28af0:	0b2d      	lsrs	r5, r5, #12
   28af2:	0d49      	lsrs	r1, r1, #21
   28af4:	0b24      	lsrs	r4, r4, #12
   28af6:	0d5b      	lsrs	r3, r3, #21
   28af8:	42b1      	cmp	r1, r6
   28afa:	d004      	beq.n	28b06 <__aeabi_dcmpun+0x22>
   28afc:	4908      	ldr	r1, [pc, #32]	; (28b20 <__aeabi_dcmpun+0x3c>)
   28afe:	2000      	movs	r0, #0
   28b00:	428b      	cmp	r3, r1
   28b02:	d008      	beq.n	28b16 <__aeabi_dcmpun+0x32>
   28b04:	bd70      	pop	{r4, r5, r6, pc}
   28b06:	4305      	orrs	r5, r0
   28b08:	2001      	movs	r0, #1
   28b0a:	2d00      	cmp	r5, #0
   28b0c:	d1fa      	bne.n	28b04 <__aeabi_dcmpun+0x20>
   28b0e:	4904      	ldr	r1, [pc, #16]	; (28b20 <__aeabi_dcmpun+0x3c>)
   28b10:	2000      	movs	r0, #0
   28b12:	428b      	cmp	r3, r1
   28b14:	d1f6      	bne.n	28b04 <__aeabi_dcmpun+0x20>
   28b16:	4314      	orrs	r4, r2
   28b18:	0020      	movs	r0, r4
   28b1a:	1e44      	subs	r4, r0, #1
   28b1c:	41a0      	sbcs	r0, r4
   28b1e:	e7f1      	b.n	28b04 <__aeabi_dcmpun+0x20>
   28b20:	000007ff 	.word	0x000007ff

00028b24 <__aeabi_d2iz>:
   28b24:	b530      	push	{r4, r5, lr}
   28b26:	4d13      	ldr	r5, [pc, #76]	; (28b74 <__aeabi_d2iz+0x50>)
   28b28:	030a      	lsls	r2, r1, #12
   28b2a:	004b      	lsls	r3, r1, #1
   28b2c:	0b12      	lsrs	r2, r2, #12
   28b2e:	0d5b      	lsrs	r3, r3, #21
   28b30:	0fc9      	lsrs	r1, r1, #31
   28b32:	2400      	movs	r4, #0
   28b34:	42ab      	cmp	r3, r5
   28b36:	dd10      	ble.n	28b5a <__aeabi_d2iz+0x36>
   28b38:	4c0f      	ldr	r4, [pc, #60]	; (28b78 <__aeabi_d2iz+0x54>)
   28b3a:	42a3      	cmp	r3, r4
   28b3c:	dc0f      	bgt.n	28b5e <__aeabi_d2iz+0x3a>
   28b3e:	2480      	movs	r4, #128	; 0x80
   28b40:	4d0e      	ldr	r5, [pc, #56]	; (28b7c <__aeabi_d2iz+0x58>)
   28b42:	0364      	lsls	r4, r4, #13
   28b44:	4322      	orrs	r2, r4
   28b46:	1aed      	subs	r5, r5, r3
   28b48:	2d1f      	cmp	r5, #31
   28b4a:	dd0b      	ble.n	28b64 <__aeabi_d2iz+0x40>
   28b4c:	480c      	ldr	r0, [pc, #48]	; (28b80 <__aeabi_d2iz+0x5c>)
   28b4e:	1ac3      	subs	r3, r0, r3
   28b50:	40da      	lsrs	r2, r3
   28b52:	4254      	negs	r4, r2
   28b54:	2900      	cmp	r1, #0
   28b56:	d100      	bne.n	28b5a <__aeabi_d2iz+0x36>
   28b58:	0014      	movs	r4, r2
   28b5a:	0020      	movs	r0, r4
   28b5c:	bd30      	pop	{r4, r5, pc}
   28b5e:	4b09      	ldr	r3, [pc, #36]	; (28b84 <__aeabi_d2iz+0x60>)
   28b60:	18cc      	adds	r4, r1, r3
   28b62:	e7fa      	b.n	28b5a <__aeabi_d2iz+0x36>
   28b64:	4c08      	ldr	r4, [pc, #32]	; (28b88 <__aeabi_d2iz+0x64>)
   28b66:	40e8      	lsrs	r0, r5
   28b68:	46a4      	mov	ip, r4
   28b6a:	4463      	add	r3, ip
   28b6c:	409a      	lsls	r2, r3
   28b6e:	4302      	orrs	r2, r0
   28b70:	e7ef      	b.n	28b52 <__aeabi_d2iz+0x2e>
   28b72:	46c0      	nop			; (mov r8, r8)
   28b74:	000003fe 	.word	0x000003fe
   28b78:	0000041d 	.word	0x0000041d
   28b7c:	00000433 	.word	0x00000433
   28b80:	00000413 	.word	0x00000413
   28b84:	7fffffff 	.word	0x7fffffff
   28b88:	fffffbed 	.word	0xfffffbed

00028b8c <__aeabi_i2d>:
   28b8c:	b570      	push	{r4, r5, r6, lr}
   28b8e:	2800      	cmp	r0, #0
   28b90:	d030      	beq.n	28bf4 <__aeabi_i2d+0x68>
   28b92:	17c3      	asrs	r3, r0, #31
   28b94:	18c4      	adds	r4, r0, r3
   28b96:	405c      	eors	r4, r3
   28b98:	0fc5      	lsrs	r5, r0, #31
   28b9a:	0020      	movs	r0, r4
   28b9c:	f000 f8c2 	bl	28d24 <__clzsi2>
   28ba0:	4b17      	ldr	r3, [pc, #92]	; (28c00 <__aeabi_i2d+0x74>)
   28ba2:	4a18      	ldr	r2, [pc, #96]	; (28c04 <__aeabi_i2d+0x78>)
   28ba4:	1a1b      	subs	r3, r3, r0
   28ba6:	1ad2      	subs	r2, r2, r3
   28ba8:	2a1f      	cmp	r2, #31
   28baa:	dd18      	ble.n	28bde <__aeabi_i2d+0x52>
   28bac:	4a16      	ldr	r2, [pc, #88]	; (28c08 <__aeabi_i2d+0x7c>)
   28bae:	1ad2      	subs	r2, r2, r3
   28bb0:	4094      	lsls	r4, r2
   28bb2:	2200      	movs	r2, #0
   28bb4:	0324      	lsls	r4, r4, #12
   28bb6:	055b      	lsls	r3, r3, #21
   28bb8:	0b24      	lsrs	r4, r4, #12
   28bba:	0d5b      	lsrs	r3, r3, #21
   28bbc:	2100      	movs	r1, #0
   28bbe:	0010      	movs	r0, r2
   28bc0:	0324      	lsls	r4, r4, #12
   28bc2:	0d0a      	lsrs	r2, r1, #20
   28bc4:	0b24      	lsrs	r4, r4, #12
   28bc6:	0512      	lsls	r2, r2, #20
   28bc8:	4322      	orrs	r2, r4
   28bca:	4c10      	ldr	r4, [pc, #64]	; (28c0c <__aeabi_i2d+0x80>)
   28bcc:	051b      	lsls	r3, r3, #20
   28bce:	4022      	ands	r2, r4
   28bd0:	4313      	orrs	r3, r2
   28bd2:	005b      	lsls	r3, r3, #1
   28bd4:	07ed      	lsls	r5, r5, #31
   28bd6:	085b      	lsrs	r3, r3, #1
   28bd8:	432b      	orrs	r3, r5
   28bda:	0019      	movs	r1, r3
   28bdc:	bd70      	pop	{r4, r5, r6, pc}
   28bde:	0021      	movs	r1, r4
   28be0:	4091      	lsls	r1, r2
   28be2:	000a      	movs	r2, r1
   28be4:	210b      	movs	r1, #11
   28be6:	1a08      	subs	r0, r1, r0
   28be8:	40c4      	lsrs	r4, r0
   28bea:	055b      	lsls	r3, r3, #21
   28bec:	0324      	lsls	r4, r4, #12
   28bee:	0b24      	lsrs	r4, r4, #12
   28bf0:	0d5b      	lsrs	r3, r3, #21
   28bf2:	e7e3      	b.n	28bbc <__aeabi_i2d+0x30>
   28bf4:	2500      	movs	r5, #0
   28bf6:	2300      	movs	r3, #0
   28bf8:	2400      	movs	r4, #0
   28bfa:	2200      	movs	r2, #0
   28bfc:	e7de      	b.n	28bbc <__aeabi_i2d+0x30>
   28bfe:	46c0      	nop			; (mov r8, r8)
   28c00:	0000041e 	.word	0x0000041e
   28c04:	00000433 	.word	0x00000433
   28c08:	00000413 	.word	0x00000413
   28c0c:	800fffff 	.word	0x800fffff

00028c10 <__aeabi_ui2d>:
   28c10:	b510      	push	{r4, lr}
   28c12:	1e04      	subs	r4, r0, #0
   28c14:	d028      	beq.n	28c68 <__aeabi_ui2d+0x58>
   28c16:	f000 f885 	bl	28d24 <__clzsi2>
   28c1a:	4b15      	ldr	r3, [pc, #84]	; (28c70 <__aeabi_ui2d+0x60>)
   28c1c:	4a15      	ldr	r2, [pc, #84]	; (28c74 <__aeabi_ui2d+0x64>)
   28c1e:	1a1b      	subs	r3, r3, r0
   28c20:	1ad2      	subs	r2, r2, r3
   28c22:	2a1f      	cmp	r2, #31
   28c24:	dd15      	ble.n	28c52 <__aeabi_ui2d+0x42>
   28c26:	4a14      	ldr	r2, [pc, #80]	; (28c78 <__aeabi_ui2d+0x68>)
   28c28:	1ad2      	subs	r2, r2, r3
   28c2a:	4094      	lsls	r4, r2
   28c2c:	2200      	movs	r2, #0
   28c2e:	0324      	lsls	r4, r4, #12
   28c30:	055b      	lsls	r3, r3, #21
   28c32:	0b24      	lsrs	r4, r4, #12
   28c34:	0d5b      	lsrs	r3, r3, #21
   28c36:	2100      	movs	r1, #0
   28c38:	0010      	movs	r0, r2
   28c3a:	0324      	lsls	r4, r4, #12
   28c3c:	0d0a      	lsrs	r2, r1, #20
   28c3e:	0b24      	lsrs	r4, r4, #12
   28c40:	0512      	lsls	r2, r2, #20
   28c42:	4322      	orrs	r2, r4
   28c44:	4c0d      	ldr	r4, [pc, #52]	; (28c7c <__aeabi_ui2d+0x6c>)
   28c46:	051b      	lsls	r3, r3, #20
   28c48:	4022      	ands	r2, r4
   28c4a:	4313      	orrs	r3, r2
   28c4c:	005b      	lsls	r3, r3, #1
   28c4e:	0859      	lsrs	r1, r3, #1
   28c50:	bd10      	pop	{r4, pc}
   28c52:	0021      	movs	r1, r4
   28c54:	4091      	lsls	r1, r2
   28c56:	000a      	movs	r2, r1
   28c58:	210b      	movs	r1, #11
   28c5a:	1a08      	subs	r0, r1, r0
   28c5c:	40c4      	lsrs	r4, r0
   28c5e:	055b      	lsls	r3, r3, #21
   28c60:	0324      	lsls	r4, r4, #12
   28c62:	0b24      	lsrs	r4, r4, #12
   28c64:	0d5b      	lsrs	r3, r3, #21
   28c66:	e7e6      	b.n	28c36 <__aeabi_ui2d+0x26>
   28c68:	2300      	movs	r3, #0
   28c6a:	2400      	movs	r4, #0
   28c6c:	2200      	movs	r2, #0
   28c6e:	e7e2      	b.n	28c36 <__aeabi_ui2d+0x26>
   28c70:	0000041e 	.word	0x0000041e
   28c74:	00000433 	.word	0x00000433
   28c78:	00000413 	.word	0x00000413
   28c7c:	800fffff 	.word	0x800fffff

00028c80 <__aeabi_f2d>:
   28c80:	0041      	lsls	r1, r0, #1
   28c82:	0e09      	lsrs	r1, r1, #24
   28c84:	1c4b      	adds	r3, r1, #1
   28c86:	b570      	push	{r4, r5, r6, lr}
   28c88:	b2db      	uxtb	r3, r3
   28c8a:	0246      	lsls	r6, r0, #9
   28c8c:	0a75      	lsrs	r5, r6, #9
   28c8e:	0fc4      	lsrs	r4, r0, #31
   28c90:	2b01      	cmp	r3, #1
   28c92:	dd14      	ble.n	28cbe <__aeabi_f2d+0x3e>
   28c94:	23e0      	movs	r3, #224	; 0xe0
   28c96:	009b      	lsls	r3, r3, #2
   28c98:	076d      	lsls	r5, r5, #29
   28c9a:	0b36      	lsrs	r6, r6, #12
   28c9c:	18cb      	adds	r3, r1, r3
   28c9e:	2100      	movs	r1, #0
   28ca0:	0d0a      	lsrs	r2, r1, #20
   28ca2:	0028      	movs	r0, r5
   28ca4:	0512      	lsls	r2, r2, #20
   28ca6:	4d1c      	ldr	r5, [pc, #112]	; (28d18 <__aeabi_f2d+0x98>)
   28ca8:	4332      	orrs	r2, r6
   28caa:	055b      	lsls	r3, r3, #21
   28cac:	402a      	ands	r2, r5
   28cae:	085b      	lsrs	r3, r3, #1
   28cb0:	4313      	orrs	r3, r2
   28cb2:	005b      	lsls	r3, r3, #1
   28cb4:	07e4      	lsls	r4, r4, #31
   28cb6:	085b      	lsrs	r3, r3, #1
   28cb8:	4323      	orrs	r3, r4
   28cba:	0019      	movs	r1, r3
   28cbc:	bd70      	pop	{r4, r5, r6, pc}
   28cbe:	2900      	cmp	r1, #0
   28cc0:	d114      	bne.n	28cec <__aeabi_f2d+0x6c>
   28cc2:	2d00      	cmp	r5, #0
   28cc4:	d01e      	beq.n	28d04 <__aeabi_f2d+0x84>
   28cc6:	0028      	movs	r0, r5
   28cc8:	f000 f82c 	bl	28d24 <__clzsi2>
   28ccc:	280a      	cmp	r0, #10
   28cce:	dc1c      	bgt.n	28d0a <__aeabi_f2d+0x8a>
   28cd0:	230b      	movs	r3, #11
   28cd2:	002a      	movs	r2, r5
   28cd4:	1a1b      	subs	r3, r3, r0
   28cd6:	40da      	lsrs	r2, r3
   28cd8:	0003      	movs	r3, r0
   28cda:	3315      	adds	r3, #21
   28cdc:	409d      	lsls	r5, r3
   28cde:	4b0f      	ldr	r3, [pc, #60]	; (28d1c <__aeabi_f2d+0x9c>)
   28ce0:	0312      	lsls	r2, r2, #12
   28ce2:	1a1b      	subs	r3, r3, r0
   28ce4:	055b      	lsls	r3, r3, #21
   28ce6:	0b16      	lsrs	r6, r2, #12
   28ce8:	0d5b      	lsrs	r3, r3, #21
   28cea:	e7d8      	b.n	28c9e <__aeabi_f2d+0x1e>
   28cec:	2d00      	cmp	r5, #0
   28cee:	d006      	beq.n	28cfe <__aeabi_f2d+0x7e>
   28cf0:	0b32      	lsrs	r2, r6, #12
   28cf2:	2680      	movs	r6, #128	; 0x80
   28cf4:	0336      	lsls	r6, r6, #12
   28cf6:	076d      	lsls	r5, r5, #29
   28cf8:	4316      	orrs	r6, r2
   28cfa:	4b09      	ldr	r3, [pc, #36]	; (28d20 <__aeabi_f2d+0xa0>)
   28cfc:	e7cf      	b.n	28c9e <__aeabi_f2d+0x1e>
   28cfe:	4b08      	ldr	r3, [pc, #32]	; (28d20 <__aeabi_f2d+0xa0>)
   28d00:	2600      	movs	r6, #0
   28d02:	e7cc      	b.n	28c9e <__aeabi_f2d+0x1e>
   28d04:	2300      	movs	r3, #0
   28d06:	2600      	movs	r6, #0
   28d08:	e7c9      	b.n	28c9e <__aeabi_f2d+0x1e>
   28d0a:	0003      	movs	r3, r0
   28d0c:	002a      	movs	r2, r5
   28d0e:	3b0b      	subs	r3, #11
   28d10:	409a      	lsls	r2, r3
   28d12:	2500      	movs	r5, #0
   28d14:	e7e3      	b.n	28cde <__aeabi_f2d+0x5e>
   28d16:	46c0      	nop			; (mov r8, r8)
   28d18:	800fffff 	.word	0x800fffff
   28d1c:	00000389 	.word	0x00000389
   28d20:	000007ff 	.word	0x000007ff

00028d24 <__clzsi2>:
   28d24:	211c      	movs	r1, #28
   28d26:	2301      	movs	r3, #1
   28d28:	041b      	lsls	r3, r3, #16
   28d2a:	4298      	cmp	r0, r3
   28d2c:	d301      	bcc.n	28d32 <__clzsi2+0xe>
   28d2e:	0c00      	lsrs	r0, r0, #16
   28d30:	3910      	subs	r1, #16
   28d32:	0a1b      	lsrs	r3, r3, #8
   28d34:	4298      	cmp	r0, r3
   28d36:	d301      	bcc.n	28d3c <__clzsi2+0x18>
   28d38:	0a00      	lsrs	r0, r0, #8
   28d3a:	3908      	subs	r1, #8
   28d3c:	091b      	lsrs	r3, r3, #4
   28d3e:	4298      	cmp	r0, r3
   28d40:	d301      	bcc.n	28d46 <__clzsi2+0x22>
   28d42:	0900      	lsrs	r0, r0, #4
   28d44:	3904      	subs	r1, #4
   28d46:	a202      	add	r2, pc, #8	; (adr r2, 28d50 <__clzsi2+0x2c>)
   28d48:	5c10      	ldrb	r0, [r2, r0]
   28d4a:	1840      	adds	r0, r0, r1
   28d4c:	4770      	bx	lr
   28d4e:	46c0      	nop			; (mov r8, r8)
   28d50:	02020304 	.word	0x02020304
   28d54:	01010101 	.word	0x01010101
	...

00028d60 <__clzdi2>:
   28d60:	b510      	push	{r4, lr}
   28d62:	2900      	cmp	r1, #0
   28d64:	d103      	bne.n	28d6e <__clzdi2+0xe>
   28d66:	f7ff ffdd 	bl	28d24 <__clzsi2>
   28d6a:	3020      	adds	r0, #32
   28d6c:	e002      	b.n	28d74 <__clzdi2+0x14>
   28d6e:	1c08      	adds	r0, r1, #0
   28d70:	f7ff ffd8 	bl	28d24 <__clzsi2>
   28d74:	bd10      	pop	{r4, pc}
   28d76:	46c0      	nop			; (mov r8, r8)

00028d78 <atoi>:
   28d78:	b510      	push	{r4, lr}
   28d7a:	220a      	movs	r2, #10
   28d7c:	2100      	movs	r1, #0
   28d7e:	f000 fadd 	bl	2933c <strtol>
   28d82:	bd10      	pop	{r4, pc}

00028d84 <calloc>:
   28d84:	b510      	push	{r4, lr}
   28d86:	4b03      	ldr	r3, [pc, #12]	; (28d94 <calloc+0x10>)
   28d88:	000a      	movs	r2, r1
   28d8a:	0001      	movs	r1, r0
   28d8c:	6818      	ldr	r0, [r3, #0]
   28d8e:	f000 f888 	bl	28ea2 <_calloc_r>
   28d92:	bd10      	pop	{r4, pc}
   28d94:	2000002c 	.word	0x2000002c

00028d98 <__errno>:
   28d98:	4b01      	ldr	r3, [pc, #4]	; (28da0 <__errno+0x8>)
   28d9a:	6818      	ldr	r0, [r3, #0]
   28d9c:	4770      	bx	lr
   28d9e:	46c0      	nop			; (mov r8, r8)
   28da0:	2000002c 	.word	0x2000002c

00028da4 <__libc_init_array>:
   28da4:	b570      	push	{r4, r5, r6, lr}
   28da6:	2600      	movs	r6, #0
   28da8:	4d0c      	ldr	r5, [pc, #48]	; (28ddc <__libc_init_array+0x38>)
   28daa:	4c0d      	ldr	r4, [pc, #52]	; (28de0 <__libc_init_array+0x3c>)
   28dac:	1b64      	subs	r4, r4, r5
   28dae:	10a4      	asrs	r4, r4, #2
   28db0:	42a6      	cmp	r6, r4
   28db2:	d109      	bne.n	28dc8 <__libc_init_array+0x24>
   28db4:	2600      	movs	r6, #0
   28db6:	f002 f929 	bl	2b00c <_init>
   28dba:	4d0a      	ldr	r5, [pc, #40]	; (28de4 <__libc_init_array+0x40>)
   28dbc:	4c0a      	ldr	r4, [pc, #40]	; (28de8 <__libc_init_array+0x44>)
   28dbe:	1b64      	subs	r4, r4, r5
   28dc0:	10a4      	asrs	r4, r4, #2
   28dc2:	42a6      	cmp	r6, r4
   28dc4:	d105      	bne.n	28dd2 <__libc_init_array+0x2e>
   28dc6:	bd70      	pop	{r4, r5, r6, pc}
   28dc8:	00b3      	lsls	r3, r6, #2
   28dca:	58eb      	ldr	r3, [r5, r3]
   28dcc:	4798      	blx	r3
   28dce:	3601      	adds	r6, #1
   28dd0:	e7ee      	b.n	28db0 <__libc_init_array+0xc>
   28dd2:	00b3      	lsls	r3, r6, #2
   28dd4:	58eb      	ldr	r3, [r5, r3]
   28dd6:	4798      	blx	r3
   28dd8:	3601      	adds	r6, #1
   28dda:	e7f2      	b.n	28dc2 <__libc_init_array+0x1e>
   28ddc:	0002b018 	.word	0x0002b018
   28de0:	0002b018 	.word	0x0002b018
   28de4:	0002b018 	.word	0x0002b018
   28de8:	0002b01c 	.word	0x0002b01c

00028dec <__locale_ctype_ptr_l>:
   28dec:	30ec      	adds	r0, #236	; 0xec
   28dee:	6800      	ldr	r0, [r0, #0]
   28df0:	4770      	bx	lr
	...

00028df4 <__locale_ctype_ptr>:
   28df4:	4b04      	ldr	r3, [pc, #16]	; (28e08 <__locale_ctype_ptr+0x14>)
   28df6:	681b      	ldr	r3, [r3, #0]
   28df8:	6a1b      	ldr	r3, [r3, #32]
   28dfa:	2b00      	cmp	r3, #0
   28dfc:	d100      	bne.n	28e00 <__locale_ctype_ptr+0xc>
   28dfe:	4b03      	ldr	r3, [pc, #12]	; (28e0c <__locale_ctype_ptr+0x18>)
   28e00:	33ec      	adds	r3, #236	; 0xec
   28e02:	6818      	ldr	r0, [r3, #0]
   28e04:	4770      	bx	lr
   28e06:	46c0      	nop			; (mov r8, r8)
   28e08:	2000002c 	.word	0x2000002c
   28e0c:	20000090 	.word	0x20000090

00028e10 <malloc>:
   28e10:	b510      	push	{r4, lr}
   28e12:	4b03      	ldr	r3, [pc, #12]	; (28e20 <malloc+0x10>)
   28e14:	0001      	movs	r1, r0
   28e16:	6818      	ldr	r0, [r3, #0]
   28e18:	f000 f89c 	bl	28f54 <_malloc_r>
   28e1c:	bd10      	pop	{r4, pc}
   28e1e:	46c0      	nop			; (mov r8, r8)
   28e20:	2000002c 	.word	0x2000002c

00028e24 <free>:
   28e24:	b510      	push	{r4, lr}
   28e26:	4b03      	ldr	r3, [pc, #12]	; (28e34 <free+0x10>)
   28e28:	0001      	movs	r1, r0
   28e2a:	6818      	ldr	r0, [r3, #0]
   28e2c:	f000 f848 	bl	28ec0 <_free_r>
   28e30:	bd10      	pop	{r4, pc}
   28e32:	46c0      	nop			; (mov r8, r8)
   28e34:	2000002c 	.word	0x2000002c

00028e38 <__ascii_mbtowc>:
   28e38:	b082      	sub	sp, #8
   28e3a:	2900      	cmp	r1, #0
   28e3c:	d100      	bne.n	28e40 <__ascii_mbtowc+0x8>
   28e3e:	a901      	add	r1, sp, #4
   28e40:	1e10      	subs	r0, r2, #0
   28e42:	d006      	beq.n	28e52 <__ascii_mbtowc+0x1a>
   28e44:	2b00      	cmp	r3, #0
   28e46:	d006      	beq.n	28e56 <__ascii_mbtowc+0x1e>
   28e48:	7813      	ldrb	r3, [r2, #0]
   28e4a:	600b      	str	r3, [r1, #0]
   28e4c:	7810      	ldrb	r0, [r2, #0]
   28e4e:	1e43      	subs	r3, r0, #1
   28e50:	4198      	sbcs	r0, r3
   28e52:	b002      	add	sp, #8
   28e54:	4770      	bx	lr
   28e56:	2002      	movs	r0, #2
   28e58:	4240      	negs	r0, r0
   28e5a:	e7fa      	b.n	28e52 <__ascii_mbtowc+0x1a>

00028e5c <memcpy>:
   28e5c:	2300      	movs	r3, #0
   28e5e:	b510      	push	{r4, lr}
   28e60:	429a      	cmp	r2, r3
   28e62:	d100      	bne.n	28e66 <memcpy+0xa>
   28e64:	bd10      	pop	{r4, pc}
   28e66:	5ccc      	ldrb	r4, [r1, r3]
   28e68:	54c4      	strb	r4, [r0, r3]
   28e6a:	3301      	adds	r3, #1
   28e6c:	e7f8      	b.n	28e60 <memcpy+0x4>

00028e6e <memmove>:
   28e6e:	b510      	push	{r4, lr}
   28e70:	4288      	cmp	r0, r1
   28e72:	d902      	bls.n	28e7a <memmove+0xc>
   28e74:	188b      	adds	r3, r1, r2
   28e76:	4298      	cmp	r0, r3
   28e78:	d308      	bcc.n	28e8c <memmove+0x1e>
   28e7a:	2300      	movs	r3, #0
   28e7c:	429a      	cmp	r2, r3
   28e7e:	d007      	beq.n	28e90 <memmove+0x22>
   28e80:	5ccc      	ldrb	r4, [r1, r3]
   28e82:	54c4      	strb	r4, [r0, r3]
   28e84:	3301      	adds	r3, #1
   28e86:	e7f9      	b.n	28e7c <memmove+0xe>
   28e88:	5c8b      	ldrb	r3, [r1, r2]
   28e8a:	5483      	strb	r3, [r0, r2]
   28e8c:	3a01      	subs	r2, #1
   28e8e:	d2fb      	bcs.n	28e88 <memmove+0x1a>
   28e90:	bd10      	pop	{r4, pc}

00028e92 <memset>:
   28e92:	0003      	movs	r3, r0
   28e94:	1882      	adds	r2, r0, r2
   28e96:	4293      	cmp	r3, r2
   28e98:	d100      	bne.n	28e9c <memset+0xa>
   28e9a:	4770      	bx	lr
   28e9c:	7019      	strb	r1, [r3, #0]
   28e9e:	3301      	adds	r3, #1
   28ea0:	e7f9      	b.n	28e96 <memset+0x4>

00028ea2 <_calloc_r>:
   28ea2:	434a      	muls	r2, r1
   28ea4:	b570      	push	{r4, r5, r6, lr}
   28ea6:	0011      	movs	r1, r2
   28ea8:	0014      	movs	r4, r2
   28eaa:	f000 f853 	bl	28f54 <_malloc_r>
   28eae:	1e05      	subs	r5, r0, #0
   28eb0:	d003      	beq.n	28eba <_calloc_r+0x18>
   28eb2:	0022      	movs	r2, r4
   28eb4:	2100      	movs	r1, #0
   28eb6:	f7ff ffec 	bl	28e92 <memset>
   28eba:	0028      	movs	r0, r5
   28ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

00028ec0 <_free_r>:
   28ec0:	b570      	push	{r4, r5, r6, lr}
   28ec2:	0005      	movs	r5, r0
   28ec4:	2900      	cmp	r1, #0
   28ec6:	d010      	beq.n	28eea <_free_r+0x2a>
   28ec8:	1f0c      	subs	r4, r1, #4
   28eca:	6823      	ldr	r3, [r4, #0]
   28ecc:	2b00      	cmp	r3, #0
   28ece:	da00      	bge.n	28ed2 <_free_r+0x12>
   28ed0:	18e4      	adds	r4, r4, r3
   28ed2:	0028      	movs	r0, r5
   28ed4:	f000 fab4 	bl	29440 <__malloc_lock>
   28ed8:	4a1d      	ldr	r2, [pc, #116]	; (28f50 <_free_r+0x90>)
   28eda:	6813      	ldr	r3, [r2, #0]
   28edc:	2b00      	cmp	r3, #0
   28ede:	d105      	bne.n	28eec <_free_r+0x2c>
   28ee0:	6063      	str	r3, [r4, #4]
   28ee2:	6014      	str	r4, [r2, #0]
   28ee4:	0028      	movs	r0, r5
   28ee6:	f000 faac 	bl	29442 <__malloc_unlock>
   28eea:	bd70      	pop	{r4, r5, r6, pc}
   28eec:	42a3      	cmp	r3, r4
   28eee:	d909      	bls.n	28f04 <_free_r+0x44>
   28ef0:	6821      	ldr	r1, [r4, #0]
   28ef2:	1860      	adds	r0, r4, r1
   28ef4:	4283      	cmp	r3, r0
   28ef6:	d1f3      	bne.n	28ee0 <_free_r+0x20>
   28ef8:	6818      	ldr	r0, [r3, #0]
   28efa:	685b      	ldr	r3, [r3, #4]
   28efc:	1841      	adds	r1, r0, r1
   28efe:	6021      	str	r1, [r4, #0]
   28f00:	e7ee      	b.n	28ee0 <_free_r+0x20>
   28f02:	0013      	movs	r3, r2
   28f04:	685a      	ldr	r2, [r3, #4]
   28f06:	2a00      	cmp	r2, #0
   28f08:	d001      	beq.n	28f0e <_free_r+0x4e>
   28f0a:	42a2      	cmp	r2, r4
   28f0c:	d9f9      	bls.n	28f02 <_free_r+0x42>
   28f0e:	6819      	ldr	r1, [r3, #0]
   28f10:	1858      	adds	r0, r3, r1
   28f12:	42a0      	cmp	r0, r4
   28f14:	d10b      	bne.n	28f2e <_free_r+0x6e>
   28f16:	6820      	ldr	r0, [r4, #0]
   28f18:	1809      	adds	r1, r1, r0
   28f1a:	1858      	adds	r0, r3, r1
   28f1c:	6019      	str	r1, [r3, #0]
   28f1e:	4282      	cmp	r2, r0
   28f20:	d1e0      	bne.n	28ee4 <_free_r+0x24>
   28f22:	6810      	ldr	r0, [r2, #0]
   28f24:	6852      	ldr	r2, [r2, #4]
   28f26:	1841      	adds	r1, r0, r1
   28f28:	6019      	str	r1, [r3, #0]
   28f2a:	605a      	str	r2, [r3, #4]
   28f2c:	e7da      	b.n	28ee4 <_free_r+0x24>
   28f2e:	42a0      	cmp	r0, r4
   28f30:	d902      	bls.n	28f38 <_free_r+0x78>
   28f32:	230c      	movs	r3, #12
   28f34:	602b      	str	r3, [r5, #0]
   28f36:	e7d5      	b.n	28ee4 <_free_r+0x24>
   28f38:	6821      	ldr	r1, [r4, #0]
   28f3a:	1860      	adds	r0, r4, r1
   28f3c:	4282      	cmp	r2, r0
   28f3e:	d103      	bne.n	28f48 <_free_r+0x88>
   28f40:	6810      	ldr	r0, [r2, #0]
   28f42:	6852      	ldr	r2, [r2, #4]
   28f44:	1841      	adds	r1, r0, r1
   28f46:	6021      	str	r1, [r4, #0]
   28f48:	6062      	str	r2, [r4, #4]
   28f4a:	605c      	str	r4, [r3, #4]
   28f4c:	e7ca      	b.n	28ee4 <_free_r+0x24>
   28f4e:	46c0      	nop			; (mov r8, r8)
   28f50:	20000514 	.word	0x20000514

00028f54 <_malloc_r>:
   28f54:	2303      	movs	r3, #3
   28f56:	b570      	push	{r4, r5, r6, lr}
   28f58:	1ccd      	adds	r5, r1, #3
   28f5a:	439d      	bics	r5, r3
   28f5c:	3508      	adds	r5, #8
   28f5e:	0006      	movs	r6, r0
   28f60:	2d0c      	cmp	r5, #12
   28f62:	d21e      	bcs.n	28fa2 <_malloc_r+0x4e>
   28f64:	250c      	movs	r5, #12
   28f66:	42a9      	cmp	r1, r5
   28f68:	d81d      	bhi.n	28fa6 <_malloc_r+0x52>
   28f6a:	0030      	movs	r0, r6
   28f6c:	f000 fa68 	bl	29440 <__malloc_lock>
   28f70:	4a25      	ldr	r2, [pc, #148]	; (29008 <_malloc_r+0xb4>)
   28f72:	6814      	ldr	r4, [r2, #0]
   28f74:	0021      	movs	r1, r4
   28f76:	2900      	cmp	r1, #0
   28f78:	d119      	bne.n	28fae <_malloc_r+0x5a>
   28f7a:	4c24      	ldr	r4, [pc, #144]	; (2900c <_malloc_r+0xb8>)
   28f7c:	6823      	ldr	r3, [r4, #0]
   28f7e:	2b00      	cmp	r3, #0
   28f80:	d103      	bne.n	28f8a <_malloc_r+0x36>
   28f82:	0030      	movs	r0, r6
   28f84:	f000 f844 	bl	29010 <_sbrk_r>
   28f88:	6020      	str	r0, [r4, #0]
   28f8a:	0029      	movs	r1, r5
   28f8c:	0030      	movs	r0, r6
   28f8e:	f000 f83f 	bl	29010 <_sbrk_r>
   28f92:	1c43      	adds	r3, r0, #1
   28f94:	d12c      	bne.n	28ff0 <_malloc_r+0x9c>
   28f96:	230c      	movs	r3, #12
   28f98:	0030      	movs	r0, r6
   28f9a:	6033      	str	r3, [r6, #0]
   28f9c:	f000 fa51 	bl	29442 <__malloc_unlock>
   28fa0:	e003      	b.n	28faa <_malloc_r+0x56>
   28fa2:	2d00      	cmp	r5, #0
   28fa4:	dadf      	bge.n	28f66 <_malloc_r+0x12>
   28fa6:	230c      	movs	r3, #12
   28fa8:	6033      	str	r3, [r6, #0]
   28faa:	2000      	movs	r0, #0
   28fac:	bd70      	pop	{r4, r5, r6, pc}
   28fae:	680b      	ldr	r3, [r1, #0]
   28fb0:	1b5b      	subs	r3, r3, r5
   28fb2:	d41a      	bmi.n	28fea <_malloc_r+0x96>
   28fb4:	2b0b      	cmp	r3, #11
   28fb6:	d903      	bls.n	28fc0 <_malloc_r+0x6c>
   28fb8:	600b      	str	r3, [r1, #0]
   28fba:	18cc      	adds	r4, r1, r3
   28fbc:	6025      	str	r5, [r4, #0]
   28fbe:	e003      	b.n	28fc8 <_malloc_r+0x74>
   28fc0:	428c      	cmp	r4, r1
   28fc2:	d10e      	bne.n	28fe2 <_malloc_r+0x8e>
   28fc4:	6863      	ldr	r3, [r4, #4]
   28fc6:	6013      	str	r3, [r2, #0]
   28fc8:	0030      	movs	r0, r6
   28fca:	f000 fa3a 	bl	29442 <__malloc_unlock>
   28fce:	0020      	movs	r0, r4
   28fd0:	2207      	movs	r2, #7
   28fd2:	300b      	adds	r0, #11
   28fd4:	1d23      	adds	r3, r4, #4
   28fd6:	4390      	bics	r0, r2
   28fd8:	1ac3      	subs	r3, r0, r3
   28fda:	d0e7      	beq.n	28fac <_malloc_r+0x58>
   28fdc:	425a      	negs	r2, r3
   28fde:	50e2      	str	r2, [r4, r3]
   28fe0:	e7e4      	b.n	28fac <_malloc_r+0x58>
   28fe2:	684b      	ldr	r3, [r1, #4]
   28fe4:	6063      	str	r3, [r4, #4]
   28fe6:	000c      	movs	r4, r1
   28fe8:	e7ee      	b.n	28fc8 <_malloc_r+0x74>
   28fea:	000c      	movs	r4, r1
   28fec:	6849      	ldr	r1, [r1, #4]
   28fee:	e7c2      	b.n	28f76 <_malloc_r+0x22>
   28ff0:	2303      	movs	r3, #3
   28ff2:	1cc4      	adds	r4, r0, #3
   28ff4:	439c      	bics	r4, r3
   28ff6:	42a0      	cmp	r0, r4
   28ff8:	d0e0      	beq.n	28fbc <_malloc_r+0x68>
   28ffa:	1a21      	subs	r1, r4, r0
   28ffc:	0030      	movs	r0, r6
   28ffe:	f000 f807 	bl	29010 <_sbrk_r>
   29002:	1c43      	adds	r3, r0, #1
   29004:	d1da      	bne.n	28fbc <_malloc_r+0x68>
   29006:	e7c6      	b.n	28f96 <_malloc_r+0x42>
   29008:	20000514 	.word	0x20000514
   2900c:	20000518 	.word	0x20000518

00029010 <_sbrk_r>:
   29010:	2300      	movs	r3, #0
   29012:	b570      	push	{r4, r5, r6, lr}
   29014:	4c06      	ldr	r4, [pc, #24]	; (29030 <_sbrk_r+0x20>)
   29016:	0005      	movs	r5, r0
   29018:	0008      	movs	r0, r1
   2901a:	6023      	str	r3, [r4, #0]
   2901c:	f7fb ff44 	bl	24ea8 <_sbrk>
   29020:	1c43      	adds	r3, r0, #1
   29022:	d103      	bne.n	2902c <_sbrk_r+0x1c>
   29024:	6823      	ldr	r3, [r4, #0]
   29026:	2b00      	cmp	r3, #0
   29028:	d000      	beq.n	2902c <_sbrk_r+0x1c>
   2902a:	602b      	str	r3, [r5, #0]
   2902c:	bd70      	pop	{r4, r5, r6, pc}
   2902e:	46c0      	nop			; (mov r8, r8)
   29030:	20000988 	.word	0x20000988

00029034 <sniprintf>:
   29034:	b40c      	push	{r2, r3}
   29036:	b530      	push	{r4, r5, lr}
   29038:	4b16      	ldr	r3, [pc, #88]	; (29094 <sniprintf+0x60>)
   2903a:	b09d      	sub	sp, #116	; 0x74
   2903c:	1e0c      	subs	r4, r1, #0
   2903e:	681d      	ldr	r5, [r3, #0]
   29040:	da08      	bge.n	29054 <sniprintf+0x20>
   29042:	238b      	movs	r3, #139	; 0x8b
   29044:	2001      	movs	r0, #1
   29046:	602b      	str	r3, [r5, #0]
   29048:	4240      	negs	r0, r0
   2904a:	b01d      	add	sp, #116	; 0x74
   2904c:	bc30      	pop	{r4, r5}
   2904e:	bc08      	pop	{r3}
   29050:	b002      	add	sp, #8
   29052:	4718      	bx	r3
   29054:	2382      	movs	r3, #130	; 0x82
   29056:	a902      	add	r1, sp, #8
   29058:	009b      	lsls	r3, r3, #2
   2905a:	818b      	strh	r3, [r1, #12]
   2905c:	2300      	movs	r3, #0
   2905e:	9002      	str	r0, [sp, #8]
   29060:	6108      	str	r0, [r1, #16]
   29062:	429c      	cmp	r4, r3
   29064:	d000      	beq.n	29068 <sniprintf+0x34>
   29066:	1e63      	subs	r3, r4, #1
   29068:	608b      	str	r3, [r1, #8]
   2906a:	614b      	str	r3, [r1, #20]
   2906c:	2301      	movs	r3, #1
   2906e:	425b      	negs	r3, r3
   29070:	81cb      	strh	r3, [r1, #14]
   29072:	9a20      	ldr	r2, [sp, #128]	; 0x80
   29074:	ab21      	add	r3, sp, #132	; 0x84
   29076:	0028      	movs	r0, r5
   29078:	9301      	str	r3, [sp, #4]
   2907a:	f000 fa45 	bl	29508 <_svfiprintf_r>
   2907e:	1c43      	adds	r3, r0, #1
   29080:	da01      	bge.n	29086 <sniprintf+0x52>
   29082:	238b      	movs	r3, #139	; 0x8b
   29084:	602b      	str	r3, [r5, #0]
   29086:	2c00      	cmp	r4, #0
   29088:	d0df      	beq.n	2904a <sniprintf+0x16>
   2908a:	2300      	movs	r3, #0
   2908c:	9a02      	ldr	r2, [sp, #8]
   2908e:	7013      	strb	r3, [r2, #0]
   29090:	e7db      	b.n	2904a <sniprintf+0x16>
   29092:	46c0      	nop			; (mov r8, r8)
   29094:	2000002c 	.word	0x2000002c

00029098 <siprintf>:
   29098:	b40e      	push	{r1, r2, r3}
   2909a:	b510      	push	{r4, lr}
   2909c:	b09d      	sub	sp, #116	; 0x74
   2909e:	a902      	add	r1, sp, #8
   290a0:	9002      	str	r0, [sp, #8]
   290a2:	6108      	str	r0, [r1, #16]
   290a4:	480b      	ldr	r0, [pc, #44]	; (290d4 <siprintf+0x3c>)
   290a6:	2482      	movs	r4, #130	; 0x82
   290a8:	6088      	str	r0, [r1, #8]
   290aa:	6148      	str	r0, [r1, #20]
   290ac:	2001      	movs	r0, #1
   290ae:	4240      	negs	r0, r0
   290b0:	ab1f      	add	r3, sp, #124	; 0x7c
   290b2:	81c8      	strh	r0, [r1, #14]
   290b4:	4808      	ldr	r0, [pc, #32]	; (290d8 <siprintf+0x40>)
   290b6:	cb04      	ldmia	r3!, {r2}
   290b8:	00a4      	lsls	r4, r4, #2
   290ba:	6800      	ldr	r0, [r0, #0]
   290bc:	9301      	str	r3, [sp, #4]
   290be:	818c      	strh	r4, [r1, #12]
   290c0:	f000 fa22 	bl	29508 <_svfiprintf_r>
   290c4:	2300      	movs	r3, #0
   290c6:	9a02      	ldr	r2, [sp, #8]
   290c8:	7013      	strb	r3, [r2, #0]
   290ca:	b01d      	add	sp, #116	; 0x74
   290cc:	bc10      	pop	{r4}
   290ce:	bc08      	pop	{r3}
   290d0:	b003      	add	sp, #12
   290d2:	4718      	bx	r3
   290d4:	7fffffff 	.word	0x7fffffff
   290d8:	2000002c 	.word	0x2000002c

000290dc <strcat>:
   290dc:	0002      	movs	r2, r0
   290de:	b510      	push	{r4, lr}
   290e0:	7813      	ldrb	r3, [r2, #0]
   290e2:	2b00      	cmp	r3, #0
   290e4:	d105      	bne.n	290f2 <strcat+0x16>
   290e6:	5ccc      	ldrb	r4, [r1, r3]
   290e8:	54d4      	strb	r4, [r2, r3]
   290ea:	3301      	adds	r3, #1
   290ec:	2c00      	cmp	r4, #0
   290ee:	d1fa      	bne.n	290e6 <strcat+0xa>
   290f0:	bd10      	pop	{r4, pc}
   290f2:	3201      	adds	r2, #1
   290f4:	e7f4      	b.n	290e0 <strcat+0x4>

000290f6 <strchr>:
   290f6:	b2c9      	uxtb	r1, r1
   290f8:	7803      	ldrb	r3, [r0, #0]
   290fa:	2b00      	cmp	r3, #0
   290fc:	d004      	beq.n	29108 <strchr+0x12>
   290fe:	4299      	cmp	r1, r3
   29100:	d100      	bne.n	29104 <strchr+0xe>
   29102:	4770      	bx	lr
   29104:	3001      	adds	r0, #1
   29106:	e7f7      	b.n	290f8 <strchr+0x2>
   29108:	424b      	negs	r3, r1
   2910a:	4159      	adcs	r1, r3
   2910c:	4249      	negs	r1, r1
   2910e:	4008      	ands	r0, r1
   29110:	e7f7      	b.n	29102 <strchr+0xc>

00029112 <strcpy>:
   29112:	1c03      	adds	r3, r0, #0
   29114:	780a      	ldrb	r2, [r1, #0]
   29116:	3101      	adds	r1, #1
   29118:	701a      	strb	r2, [r3, #0]
   2911a:	3301      	adds	r3, #1
   2911c:	2a00      	cmp	r2, #0
   2911e:	d1f9      	bne.n	29114 <strcpy+0x2>
   29120:	4770      	bx	lr

00029122 <strlen>:
   29122:	2300      	movs	r3, #0
   29124:	5cc2      	ldrb	r2, [r0, r3]
   29126:	3301      	adds	r3, #1
   29128:	2a00      	cmp	r2, #0
   2912a:	d1fb      	bne.n	29124 <strlen+0x2>
   2912c:	1e58      	subs	r0, r3, #1
   2912e:	4770      	bx	lr

00029130 <strncmp>:
   29130:	2300      	movs	r3, #0
   29132:	b530      	push	{r4, r5, lr}
   29134:	429a      	cmp	r2, r3
   29136:	d00a      	beq.n	2914e <strncmp+0x1e>
   29138:	3a01      	subs	r2, #1
   2913a:	5cc4      	ldrb	r4, [r0, r3]
   2913c:	5ccd      	ldrb	r5, [r1, r3]
   2913e:	42ac      	cmp	r4, r5
   29140:	d104      	bne.n	2914c <strncmp+0x1c>
   29142:	429a      	cmp	r2, r3
   29144:	d002      	beq.n	2914c <strncmp+0x1c>
   29146:	3301      	adds	r3, #1
   29148:	2c00      	cmp	r4, #0
   2914a:	d1f6      	bne.n	2913a <strncmp+0xa>
   2914c:	1b63      	subs	r3, r4, r5
   2914e:	0018      	movs	r0, r3
   29150:	bd30      	pop	{r4, r5, pc}

00029152 <strstr>:
   29152:	b510      	push	{r4, lr}
   29154:	0002      	movs	r2, r0
   29156:	7800      	ldrb	r0, [r0, #0]
   29158:	2800      	cmp	r0, #0
   2915a:	d104      	bne.n	29166 <strstr+0x14>
   2915c:	7809      	ldrb	r1, [r1, #0]
   2915e:	2900      	cmp	r1, #0
   29160:	d00d      	beq.n	2917e <strstr+0x2c>
   29162:	bd10      	pop	{r4, pc}
   29164:	3201      	adds	r2, #1
   29166:	7810      	ldrb	r0, [r2, #0]
   29168:	2800      	cmp	r0, #0
   2916a:	d0fa      	beq.n	29162 <strstr+0x10>
   2916c:	2300      	movs	r3, #0
   2916e:	5cc8      	ldrb	r0, [r1, r3]
   29170:	2800      	cmp	r0, #0
   29172:	d004      	beq.n	2917e <strstr+0x2c>
   29174:	5cd4      	ldrb	r4, [r2, r3]
   29176:	4284      	cmp	r4, r0
   29178:	d1f4      	bne.n	29164 <strstr+0x12>
   2917a:	3301      	adds	r3, #1
   2917c:	e7f7      	b.n	2916e <strstr+0x1c>
   2917e:	0010      	movs	r0, r2
   29180:	e7ef      	b.n	29162 <strstr+0x10>
	...

00029184 <strtok>:
   29184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29186:	4b12      	ldr	r3, [pc, #72]	; (291d0 <strtok+0x4c>)
   29188:	0006      	movs	r6, r0
   2918a:	681d      	ldr	r5, [r3, #0]
   2918c:	000f      	movs	r7, r1
   2918e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   29190:	2c00      	cmp	r4, #0
   29192:	d116      	bne.n	291c2 <strtok+0x3e>
   29194:	2050      	movs	r0, #80	; 0x50
   29196:	f7ff fe3b 	bl	28e10 <malloc>
   2919a:	65a8      	str	r0, [r5, #88]	; 0x58
   2919c:	6004      	str	r4, [r0, #0]
   2919e:	6044      	str	r4, [r0, #4]
   291a0:	6084      	str	r4, [r0, #8]
   291a2:	60c4      	str	r4, [r0, #12]
   291a4:	6104      	str	r4, [r0, #16]
   291a6:	6144      	str	r4, [r0, #20]
   291a8:	6184      	str	r4, [r0, #24]
   291aa:	6284      	str	r4, [r0, #40]	; 0x28
   291ac:	62c4      	str	r4, [r0, #44]	; 0x2c
   291ae:	6304      	str	r4, [r0, #48]	; 0x30
   291b0:	6344      	str	r4, [r0, #52]	; 0x34
   291b2:	6384      	str	r4, [r0, #56]	; 0x38
   291b4:	63c4      	str	r4, [r0, #60]	; 0x3c
   291b6:	6404      	str	r4, [r0, #64]	; 0x40
   291b8:	6444      	str	r4, [r0, #68]	; 0x44
   291ba:	6484      	str	r4, [r0, #72]	; 0x48
   291bc:	64c4      	str	r4, [r0, #76]	; 0x4c
   291be:	7704      	strb	r4, [r0, #28]
   291c0:	6244      	str	r4, [r0, #36]	; 0x24
   291c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
   291c4:	0039      	movs	r1, r7
   291c6:	0030      	movs	r0, r6
   291c8:	2301      	movs	r3, #1
   291ca:	f000 f803 	bl	291d4 <__strtok_r>
   291ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291d0:	2000002c 	.word	0x2000002c

000291d4 <__strtok_r>:
   291d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   291d6:	2800      	cmp	r0, #0
   291d8:	d104      	bne.n	291e4 <__strtok_r+0x10>
   291da:	6810      	ldr	r0, [r2, #0]
   291dc:	2800      	cmp	r0, #0
   291de:	d101      	bne.n	291e4 <__strtok_r+0x10>
   291e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   291e2:	0020      	movs	r0, r4
   291e4:	000e      	movs	r6, r1
   291e6:	7805      	ldrb	r5, [r0, #0]
   291e8:	1c44      	adds	r4, r0, #1
   291ea:	7837      	ldrb	r7, [r6, #0]
   291ec:	2f00      	cmp	r7, #0
   291ee:	d104      	bne.n	291fa <__strtok_r+0x26>
   291f0:	2d00      	cmp	r5, #0
   291f2:	d110      	bne.n	29216 <__strtok_r+0x42>
   291f4:	6015      	str	r5, [r2, #0]
   291f6:	0028      	movs	r0, r5
   291f8:	e7f2      	b.n	291e0 <__strtok_r+0xc>
   291fa:	3601      	adds	r6, #1
   291fc:	42bd      	cmp	r5, r7
   291fe:	d1f4      	bne.n	291ea <__strtok_r+0x16>
   29200:	2b00      	cmp	r3, #0
   29202:	d1ee      	bne.n	291e2 <__strtok_r+0xe>
   29204:	6014      	str	r4, [r2, #0]
   29206:	7003      	strb	r3, [r0, #0]
   29208:	e7ea      	b.n	291e0 <__strtok_r+0xc>
   2920a:	0033      	movs	r3, r6
   2920c:	e00e      	b.n	2922c <__strtok_r+0x58>
   2920e:	3501      	adds	r5, #1
   29210:	001c      	movs	r4, r3
   29212:	2f00      	cmp	r7, #0
   29214:	d102      	bne.n	2921c <__strtok_r+0x48>
   29216:	000d      	movs	r5, r1
   29218:	7826      	ldrb	r6, [r4, #0]
   2921a:	1c63      	adds	r3, r4, #1
   2921c:	782f      	ldrb	r7, [r5, #0]
   2921e:	42be      	cmp	r6, r7
   29220:	d1f5      	bne.n	2920e <__strtok_r+0x3a>
   29222:	2e00      	cmp	r6, #0
   29224:	d0f1      	beq.n	2920a <__strtok_r+0x36>
   29226:	2400      	movs	r4, #0
   29228:	1e59      	subs	r1, r3, #1
   2922a:	700c      	strb	r4, [r1, #0]
   2922c:	6013      	str	r3, [r2, #0]
   2922e:	e7d7      	b.n	291e0 <__strtok_r+0xc>

00029230 <_strtol_l.isra.0>:
   29230:	b5f0      	push	{r4, r5, r6, r7, lr}
   29232:	001f      	movs	r7, r3
   29234:	000e      	movs	r6, r1
   29236:	b087      	sub	sp, #28
   29238:	9005      	str	r0, [sp, #20]
   2923a:	9103      	str	r1, [sp, #12]
   2923c:	9202      	str	r2, [sp, #8]
   2923e:	980c      	ldr	r0, [sp, #48]	; 0x30
   29240:	7834      	ldrb	r4, [r6, #0]
   29242:	f7ff fdd3 	bl	28dec <__locale_ctype_ptr_l>
   29246:	2208      	movs	r2, #8
   29248:	1900      	adds	r0, r0, r4
   2924a:	7843      	ldrb	r3, [r0, #1]
   2924c:	1c75      	adds	r5, r6, #1
   2924e:	4013      	ands	r3, r2
   29250:	d10c      	bne.n	2926c <_strtol_l.isra.0+0x3c>
   29252:	2c2d      	cmp	r4, #45	; 0x2d
   29254:	d10c      	bne.n	29270 <_strtol_l.isra.0+0x40>
   29256:	3301      	adds	r3, #1
   29258:	782c      	ldrb	r4, [r5, #0]
   2925a:	9301      	str	r3, [sp, #4]
   2925c:	1cb5      	adds	r5, r6, #2
   2925e:	2f00      	cmp	r7, #0
   29260:	d00c      	beq.n	2927c <_strtol_l.isra.0+0x4c>
   29262:	2f10      	cmp	r7, #16
   29264:	d114      	bne.n	29290 <_strtol_l.isra.0+0x60>
   29266:	2c30      	cmp	r4, #48	; 0x30
   29268:	d00a      	beq.n	29280 <_strtol_l.isra.0+0x50>
   2926a:	e011      	b.n	29290 <_strtol_l.isra.0+0x60>
   2926c:	002e      	movs	r6, r5
   2926e:	e7e6      	b.n	2923e <_strtol_l.isra.0+0xe>
   29270:	9301      	str	r3, [sp, #4]
   29272:	2c2b      	cmp	r4, #43	; 0x2b
   29274:	d1f3      	bne.n	2925e <_strtol_l.isra.0+0x2e>
   29276:	782c      	ldrb	r4, [r5, #0]
   29278:	1cb5      	adds	r5, r6, #2
   2927a:	e7f0      	b.n	2925e <_strtol_l.isra.0+0x2e>
   2927c:	2c30      	cmp	r4, #48	; 0x30
   2927e:	d12f      	bne.n	292e0 <_strtol_l.isra.0+0xb0>
   29280:	2220      	movs	r2, #32
   29282:	782b      	ldrb	r3, [r5, #0]
   29284:	4393      	bics	r3, r2
   29286:	2b58      	cmp	r3, #88	; 0x58
   29288:	d151      	bne.n	2932e <_strtol_l.isra.0+0xfe>
   2928a:	2710      	movs	r7, #16
   2928c:	786c      	ldrb	r4, [r5, #1]
   2928e:	3502      	adds	r5, #2
   29290:	9b01      	ldr	r3, [sp, #4]
   29292:	4a29      	ldr	r2, [pc, #164]	; (29338 <_strtol_l.isra.0+0x108>)
   29294:	0039      	movs	r1, r7
   29296:	189e      	adds	r6, r3, r2
   29298:	0030      	movs	r0, r6
   2929a:	f7fd f9f5 	bl	26688 <__aeabi_uidivmod>
   2929e:	0030      	movs	r0, r6
   292a0:	9104      	str	r1, [sp, #16]
   292a2:	0039      	movs	r1, r7
   292a4:	f7fd f96a 	bl	2657c <__udivsi3>
   292a8:	2101      	movs	r1, #1
   292aa:	2300      	movs	r3, #0
   292ac:	4249      	negs	r1, r1
   292ae:	0002      	movs	r2, r0
   292b0:	468c      	mov	ip, r1
   292b2:	0018      	movs	r0, r3
   292b4:	0021      	movs	r1, r4
   292b6:	3930      	subs	r1, #48	; 0x30
   292b8:	2909      	cmp	r1, #9
   292ba:	d813      	bhi.n	292e4 <_strtol_l.isra.0+0xb4>
   292bc:	000c      	movs	r4, r1
   292be:	42a7      	cmp	r7, r4
   292c0:	dd1c      	ble.n	292fc <_strtol_l.isra.0+0xcc>
   292c2:	1c59      	adds	r1, r3, #1
   292c4:	d009      	beq.n	292da <_strtol_l.isra.0+0xaa>
   292c6:	4663      	mov	r3, ip
   292c8:	4282      	cmp	r2, r0
   292ca:	d306      	bcc.n	292da <_strtol_l.isra.0+0xaa>
   292cc:	d102      	bne.n	292d4 <_strtol_l.isra.0+0xa4>
   292ce:	9904      	ldr	r1, [sp, #16]
   292d0:	42a1      	cmp	r1, r4
   292d2:	db02      	blt.n	292da <_strtol_l.isra.0+0xaa>
   292d4:	2301      	movs	r3, #1
   292d6:	4378      	muls	r0, r7
   292d8:	1820      	adds	r0, r4, r0
   292da:	782c      	ldrb	r4, [r5, #0]
   292dc:	3501      	adds	r5, #1
   292de:	e7e9      	b.n	292b4 <_strtol_l.isra.0+0x84>
   292e0:	270a      	movs	r7, #10
   292e2:	e7d5      	b.n	29290 <_strtol_l.isra.0+0x60>
   292e4:	0021      	movs	r1, r4
   292e6:	3941      	subs	r1, #65	; 0x41
   292e8:	2919      	cmp	r1, #25
   292ea:	d801      	bhi.n	292f0 <_strtol_l.isra.0+0xc0>
   292ec:	3c37      	subs	r4, #55	; 0x37
   292ee:	e7e6      	b.n	292be <_strtol_l.isra.0+0x8e>
   292f0:	0021      	movs	r1, r4
   292f2:	3961      	subs	r1, #97	; 0x61
   292f4:	2919      	cmp	r1, #25
   292f6:	d801      	bhi.n	292fc <_strtol_l.isra.0+0xcc>
   292f8:	3c57      	subs	r4, #87	; 0x57
   292fa:	e7e0      	b.n	292be <_strtol_l.isra.0+0x8e>
   292fc:	1c5a      	adds	r2, r3, #1
   292fe:	d108      	bne.n	29312 <_strtol_l.isra.0+0xe2>
   29300:	9a05      	ldr	r2, [sp, #20]
   29302:	3323      	adds	r3, #35	; 0x23
   29304:	6013      	str	r3, [r2, #0]
   29306:	9b02      	ldr	r3, [sp, #8]
   29308:	0030      	movs	r0, r6
   2930a:	2b00      	cmp	r3, #0
   2930c:	d10b      	bne.n	29326 <_strtol_l.isra.0+0xf6>
   2930e:	b007      	add	sp, #28
   29310:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29312:	9a01      	ldr	r2, [sp, #4]
   29314:	2a00      	cmp	r2, #0
   29316:	d000      	beq.n	2931a <_strtol_l.isra.0+0xea>
   29318:	4240      	negs	r0, r0
   2931a:	9a02      	ldr	r2, [sp, #8]
   2931c:	2a00      	cmp	r2, #0
   2931e:	d0f6      	beq.n	2930e <_strtol_l.isra.0+0xde>
   29320:	9a03      	ldr	r2, [sp, #12]
   29322:	2b00      	cmp	r3, #0
   29324:	d000      	beq.n	29328 <_strtol_l.isra.0+0xf8>
   29326:	1e6a      	subs	r2, r5, #1
   29328:	9b02      	ldr	r3, [sp, #8]
   2932a:	601a      	str	r2, [r3, #0]
   2932c:	e7ef      	b.n	2930e <_strtol_l.isra.0+0xde>
   2932e:	2430      	movs	r4, #48	; 0x30
   29330:	2f00      	cmp	r7, #0
   29332:	d1ad      	bne.n	29290 <_strtol_l.isra.0+0x60>
   29334:	3708      	adds	r7, #8
   29336:	e7ab      	b.n	29290 <_strtol_l.isra.0+0x60>
   29338:	7fffffff 	.word	0x7fffffff

0002933c <strtol>:
   2933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2933e:	0013      	movs	r3, r2
   29340:	4a06      	ldr	r2, [pc, #24]	; (2935c <strtol+0x20>)
   29342:	0005      	movs	r5, r0
   29344:	6810      	ldr	r0, [r2, #0]
   29346:	6a04      	ldr	r4, [r0, #32]
   29348:	2c00      	cmp	r4, #0
   2934a:	d100      	bne.n	2934e <strtol+0x12>
   2934c:	4c04      	ldr	r4, [pc, #16]	; (29360 <strtol+0x24>)
   2934e:	000a      	movs	r2, r1
   29350:	9400      	str	r4, [sp, #0]
   29352:	0029      	movs	r1, r5
   29354:	f7ff ff6c 	bl	29230 <_strtol_l.isra.0>
   29358:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2935a:	46c0      	nop			; (mov r8, r8)
   2935c:	2000002c 	.word	0x2000002c
   29360:	20000090 	.word	0x20000090

00029364 <__utoa>:
   29364:	b5f0      	push	{r4, r5, r6, r7, lr}
   29366:	0017      	movs	r7, r2
   29368:	b08f      	sub	sp, #60	; 0x3c
   2936a:	2225      	movs	r2, #37	; 0x25
   2936c:	0006      	movs	r6, r0
   2936e:	000d      	movs	r5, r1
   29370:	a804      	add	r0, sp, #16
   29372:	4918      	ldr	r1, [pc, #96]	; (293d4 <__utoa+0x70>)
   29374:	f7ff fd72 	bl	28e5c <memcpy>
   29378:	aa04      	add	r2, sp, #16
   2937a:	1ebb      	subs	r3, r7, #2
   2937c:	2400      	movs	r4, #0
   2937e:	9203      	str	r2, [sp, #12]
   29380:	2b22      	cmp	r3, #34	; 0x22
   29382:	d905      	bls.n	29390 <__utoa+0x2c>
   29384:	702c      	strb	r4, [r5, #0]
   29386:	0025      	movs	r5, r4
   29388:	0028      	movs	r0, r5
   2938a:	b00f      	add	sp, #60	; 0x3c
   2938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2938e:	9c01      	ldr	r4, [sp, #4]
   29390:	1c63      	adds	r3, r4, #1
   29392:	9301      	str	r3, [sp, #4]
   29394:	18eb      	adds	r3, r5, r3
   29396:	9300      	str	r3, [sp, #0]
   29398:	0030      	movs	r0, r6
   2939a:	3b01      	subs	r3, #1
   2939c:	0039      	movs	r1, r7
   2939e:	9302      	str	r3, [sp, #8]
   293a0:	f7fd f972 	bl	26688 <__aeabi_uidivmod>
   293a4:	9b03      	ldr	r3, [sp, #12]
   293a6:	9a02      	ldr	r2, [sp, #8]
   293a8:	5c5b      	ldrb	r3, [r3, r1]
   293aa:	0030      	movs	r0, r6
   293ac:	7013      	strb	r3, [r2, #0]
   293ae:	0039      	movs	r1, r7
   293b0:	f7fd f8e4 	bl	2657c <__udivsi3>
   293b4:	1e06      	subs	r6, r0, #0
   293b6:	d1ea      	bne.n	2938e <__utoa+0x2a>
   293b8:	9b00      	ldr	r3, [sp, #0]
   293ba:	7018      	strb	r0, [r3, #0]
   293bc:	002b      	movs	r3, r5
   293be:	1b5a      	subs	r2, r3, r5
   293c0:	4294      	cmp	r4, r2
   293c2:	dde1      	ble.n	29388 <__utoa+0x24>
   293c4:	781a      	ldrb	r2, [r3, #0]
   293c6:	5d29      	ldrb	r1, [r5, r4]
   293c8:	7019      	strb	r1, [r3, #0]
   293ca:	552a      	strb	r2, [r5, r4]
   293cc:	3301      	adds	r3, #1
   293ce:	3c01      	subs	r4, #1
   293d0:	e7f5      	b.n	293be <__utoa+0x5a>
   293d2:	46c0      	nop			; (mov r8, r8)
   293d4:	0002aeb2 	.word	0x0002aeb2

000293d8 <utoa>:
   293d8:	b510      	push	{r4, lr}
   293da:	f7ff ffc3 	bl	29364 <__utoa>
   293de:	bd10      	pop	{r4, pc}

000293e0 <_vsiprintf_r>:
   293e0:	b530      	push	{r4, r5, lr}
   293e2:	b09b      	sub	sp, #108	; 0x6c
   293e4:	9100      	str	r1, [sp, #0]
   293e6:	9104      	str	r1, [sp, #16]
   293e8:	4908      	ldr	r1, [pc, #32]	; (2940c <_vsiprintf_r+0x2c>)
   293ea:	466d      	mov	r5, sp
   293ec:	9102      	str	r1, [sp, #8]
   293ee:	9105      	str	r1, [sp, #20]
   293f0:	2101      	movs	r1, #1
   293f2:	2482      	movs	r4, #130	; 0x82
   293f4:	4249      	negs	r1, r1
   293f6:	81e9      	strh	r1, [r5, #14]
   293f8:	00a4      	lsls	r4, r4, #2
   293fa:	4669      	mov	r1, sp
   293fc:	81ac      	strh	r4, [r5, #12]
   293fe:	f000 f883 	bl	29508 <_svfiprintf_r>
   29402:	2300      	movs	r3, #0
   29404:	9a00      	ldr	r2, [sp, #0]
   29406:	7013      	strb	r3, [r2, #0]
   29408:	b01b      	add	sp, #108	; 0x6c
   2940a:	bd30      	pop	{r4, r5, pc}
   2940c:	7fffffff 	.word	0x7fffffff

00029410 <vsiprintf>:
   29410:	b510      	push	{r4, lr}
   29412:	0013      	movs	r3, r2
   29414:	000a      	movs	r2, r1
   29416:	0001      	movs	r1, r0
   29418:	4802      	ldr	r0, [pc, #8]	; (29424 <vsiprintf+0x14>)
   2941a:	6800      	ldr	r0, [r0, #0]
   2941c:	f7ff ffe0 	bl	293e0 <_vsiprintf_r>
   29420:	bd10      	pop	{r4, pc}
   29422:	46c0      	nop			; (mov r8, r8)
   29424:	2000002c 	.word	0x2000002c

00029428 <__ascii_wctomb>:
   29428:	1e0b      	subs	r3, r1, #0
   2942a:	d004      	beq.n	29436 <__ascii_wctomb+0xe>
   2942c:	2aff      	cmp	r2, #255	; 0xff
   2942e:	d904      	bls.n	2943a <__ascii_wctomb+0x12>
   29430:	238a      	movs	r3, #138	; 0x8a
   29432:	6003      	str	r3, [r0, #0]
   29434:	3b8b      	subs	r3, #139	; 0x8b
   29436:	0018      	movs	r0, r3
   29438:	4770      	bx	lr
   2943a:	700a      	strb	r2, [r1, #0]
   2943c:	2301      	movs	r3, #1
   2943e:	e7fa      	b.n	29436 <__ascii_wctomb+0xe>

00029440 <__malloc_lock>:
   29440:	4770      	bx	lr

00029442 <__malloc_unlock>:
   29442:	4770      	bx	lr

00029444 <__ssputs_r>:
   29444:	b5f0      	push	{r4, r5, r6, r7, lr}
   29446:	688e      	ldr	r6, [r1, #8]
   29448:	b085      	sub	sp, #20
   2944a:	0007      	movs	r7, r0
   2944c:	000c      	movs	r4, r1
   2944e:	9203      	str	r2, [sp, #12]
   29450:	9301      	str	r3, [sp, #4]
   29452:	429e      	cmp	r6, r3
   29454:	d839      	bhi.n	294ca <__ssputs_r+0x86>
   29456:	2390      	movs	r3, #144	; 0x90
   29458:	898a      	ldrh	r2, [r1, #12]
   2945a:	00db      	lsls	r3, r3, #3
   2945c:	421a      	tst	r2, r3
   2945e:	d034      	beq.n	294ca <__ssputs_r+0x86>
   29460:	2503      	movs	r5, #3
   29462:	6909      	ldr	r1, [r1, #16]
   29464:	6823      	ldr	r3, [r4, #0]
   29466:	1a5b      	subs	r3, r3, r1
   29468:	9302      	str	r3, [sp, #8]
   2946a:	6963      	ldr	r3, [r4, #20]
   2946c:	9802      	ldr	r0, [sp, #8]
   2946e:	435d      	muls	r5, r3
   29470:	0feb      	lsrs	r3, r5, #31
   29472:	195d      	adds	r5, r3, r5
   29474:	9b01      	ldr	r3, [sp, #4]
   29476:	106d      	asrs	r5, r5, #1
   29478:	3301      	adds	r3, #1
   2947a:	181b      	adds	r3, r3, r0
   2947c:	42ab      	cmp	r3, r5
   2947e:	d900      	bls.n	29482 <__ssputs_r+0x3e>
   29480:	001d      	movs	r5, r3
   29482:	0553      	lsls	r3, r2, #21
   29484:	d532      	bpl.n	294ec <__ssputs_r+0xa8>
   29486:	0029      	movs	r1, r5
   29488:	0038      	movs	r0, r7
   2948a:	f7ff fd63 	bl	28f54 <_malloc_r>
   2948e:	1e06      	subs	r6, r0, #0
   29490:	d109      	bne.n	294a6 <__ssputs_r+0x62>
   29492:	230c      	movs	r3, #12
   29494:	603b      	str	r3, [r7, #0]
   29496:	2340      	movs	r3, #64	; 0x40
   29498:	2001      	movs	r0, #1
   2949a:	89a2      	ldrh	r2, [r4, #12]
   2949c:	4240      	negs	r0, r0
   2949e:	4313      	orrs	r3, r2
   294a0:	81a3      	strh	r3, [r4, #12]
   294a2:	b005      	add	sp, #20
   294a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   294a6:	9a02      	ldr	r2, [sp, #8]
   294a8:	6921      	ldr	r1, [r4, #16]
   294aa:	f7ff fcd7 	bl	28e5c <memcpy>
   294ae:	89a3      	ldrh	r3, [r4, #12]
   294b0:	4a14      	ldr	r2, [pc, #80]	; (29504 <__ssputs_r+0xc0>)
   294b2:	401a      	ands	r2, r3
   294b4:	2380      	movs	r3, #128	; 0x80
   294b6:	4313      	orrs	r3, r2
   294b8:	81a3      	strh	r3, [r4, #12]
   294ba:	9b02      	ldr	r3, [sp, #8]
   294bc:	6126      	str	r6, [r4, #16]
   294be:	18f6      	adds	r6, r6, r3
   294c0:	6026      	str	r6, [r4, #0]
   294c2:	6165      	str	r5, [r4, #20]
   294c4:	9e01      	ldr	r6, [sp, #4]
   294c6:	1aed      	subs	r5, r5, r3
   294c8:	60a5      	str	r5, [r4, #8]
   294ca:	9b01      	ldr	r3, [sp, #4]
   294cc:	42b3      	cmp	r3, r6
   294ce:	d200      	bcs.n	294d2 <__ssputs_r+0x8e>
   294d0:	001e      	movs	r6, r3
   294d2:	0032      	movs	r2, r6
   294d4:	9903      	ldr	r1, [sp, #12]
   294d6:	6820      	ldr	r0, [r4, #0]
   294d8:	f7ff fcc9 	bl	28e6e <memmove>
   294dc:	68a3      	ldr	r3, [r4, #8]
   294de:	2000      	movs	r0, #0
   294e0:	1b9b      	subs	r3, r3, r6
   294e2:	60a3      	str	r3, [r4, #8]
   294e4:	6823      	ldr	r3, [r4, #0]
   294e6:	199e      	adds	r6, r3, r6
   294e8:	6026      	str	r6, [r4, #0]
   294ea:	e7da      	b.n	294a2 <__ssputs_r+0x5e>
   294ec:	002a      	movs	r2, r5
   294ee:	0038      	movs	r0, r7
   294f0:	f000 faa1 	bl	29a36 <_realloc_r>
   294f4:	1e06      	subs	r6, r0, #0
   294f6:	d1e0      	bne.n	294ba <__ssputs_r+0x76>
   294f8:	6921      	ldr	r1, [r4, #16]
   294fa:	0038      	movs	r0, r7
   294fc:	f7ff fce0 	bl	28ec0 <_free_r>
   29500:	e7c7      	b.n	29492 <__ssputs_r+0x4e>
   29502:	46c0      	nop			; (mov r8, r8)
   29504:	fffffb7f 	.word	0xfffffb7f

00029508 <_svfiprintf_r>:
   29508:	b5f0      	push	{r4, r5, r6, r7, lr}
   2950a:	b09f      	sub	sp, #124	; 0x7c
   2950c:	9002      	str	r0, [sp, #8]
   2950e:	9305      	str	r3, [sp, #20]
   29510:	898b      	ldrh	r3, [r1, #12]
   29512:	000f      	movs	r7, r1
   29514:	0016      	movs	r6, r2
   29516:	061b      	lsls	r3, r3, #24
   29518:	d511      	bpl.n	2953e <_svfiprintf_r+0x36>
   2951a:	690b      	ldr	r3, [r1, #16]
   2951c:	2b00      	cmp	r3, #0
   2951e:	d10e      	bne.n	2953e <_svfiprintf_r+0x36>
   29520:	2140      	movs	r1, #64	; 0x40
   29522:	f7ff fd17 	bl	28f54 <_malloc_r>
   29526:	6038      	str	r0, [r7, #0]
   29528:	6138      	str	r0, [r7, #16]
   2952a:	2800      	cmp	r0, #0
   2952c:	d105      	bne.n	2953a <_svfiprintf_r+0x32>
   2952e:	230c      	movs	r3, #12
   29530:	9a02      	ldr	r2, [sp, #8]
   29532:	3801      	subs	r0, #1
   29534:	6013      	str	r3, [r2, #0]
   29536:	b01f      	add	sp, #124	; 0x7c
   29538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2953a:	2340      	movs	r3, #64	; 0x40
   2953c:	617b      	str	r3, [r7, #20]
   2953e:	2300      	movs	r3, #0
   29540:	ad06      	add	r5, sp, #24
   29542:	616b      	str	r3, [r5, #20]
   29544:	3320      	adds	r3, #32
   29546:	766b      	strb	r3, [r5, #25]
   29548:	3310      	adds	r3, #16
   2954a:	76ab      	strb	r3, [r5, #26]
   2954c:	0034      	movs	r4, r6
   2954e:	7823      	ldrb	r3, [r4, #0]
   29550:	2b00      	cmp	r3, #0
   29552:	d147      	bne.n	295e4 <_svfiprintf_r+0xdc>
   29554:	1ba3      	subs	r3, r4, r6
   29556:	9304      	str	r3, [sp, #16]
   29558:	d00d      	beq.n	29576 <_svfiprintf_r+0x6e>
   2955a:	1ba3      	subs	r3, r4, r6
   2955c:	0032      	movs	r2, r6
   2955e:	0039      	movs	r1, r7
   29560:	9802      	ldr	r0, [sp, #8]
   29562:	f7ff ff6f 	bl	29444 <__ssputs_r>
   29566:	1c43      	adds	r3, r0, #1
   29568:	d100      	bne.n	2956c <_svfiprintf_r+0x64>
   2956a:	e0b5      	b.n	296d8 <_svfiprintf_r+0x1d0>
   2956c:	696a      	ldr	r2, [r5, #20]
   2956e:	9b04      	ldr	r3, [sp, #16]
   29570:	4694      	mov	ip, r2
   29572:	4463      	add	r3, ip
   29574:	616b      	str	r3, [r5, #20]
   29576:	7823      	ldrb	r3, [r4, #0]
   29578:	2b00      	cmp	r3, #0
   2957a:	d100      	bne.n	2957e <_svfiprintf_r+0x76>
   2957c:	e0ac      	b.n	296d8 <_svfiprintf_r+0x1d0>
   2957e:	2201      	movs	r2, #1
   29580:	2300      	movs	r3, #0
   29582:	4252      	negs	r2, r2
   29584:	606a      	str	r2, [r5, #4]
   29586:	a902      	add	r1, sp, #8
   29588:	3254      	adds	r2, #84	; 0x54
   2958a:	1852      	adds	r2, r2, r1
   2958c:	3401      	adds	r4, #1
   2958e:	602b      	str	r3, [r5, #0]
   29590:	60eb      	str	r3, [r5, #12]
   29592:	60ab      	str	r3, [r5, #8]
   29594:	7013      	strb	r3, [r2, #0]
   29596:	65ab      	str	r3, [r5, #88]	; 0x58
   29598:	4e58      	ldr	r6, [pc, #352]	; (296fc <_svfiprintf_r+0x1f4>)
   2959a:	2205      	movs	r2, #5
   2959c:	7821      	ldrb	r1, [r4, #0]
   2959e:	0030      	movs	r0, r6
   295a0:	f000 fa3e 	bl	29a20 <memchr>
   295a4:	1c62      	adds	r2, r4, #1
   295a6:	2800      	cmp	r0, #0
   295a8:	d120      	bne.n	295ec <_svfiprintf_r+0xe4>
   295aa:	6829      	ldr	r1, [r5, #0]
   295ac:	06cb      	lsls	r3, r1, #27
   295ae:	d504      	bpl.n	295ba <_svfiprintf_r+0xb2>
   295b0:	2353      	movs	r3, #83	; 0x53
   295b2:	ae02      	add	r6, sp, #8
   295b4:	3020      	adds	r0, #32
   295b6:	199b      	adds	r3, r3, r6
   295b8:	7018      	strb	r0, [r3, #0]
   295ba:	070b      	lsls	r3, r1, #28
   295bc:	d504      	bpl.n	295c8 <_svfiprintf_r+0xc0>
   295be:	2353      	movs	r3, #83	; 0x53
   295c0:	202b      	movs	r0, #43	; 0x2b
   295c2:	ae02      	add	r6, sp, #8
   295c4:	199b      	adds	r3, r3, r6
   295c6:	7018      	strb	r0, [r3, #0]
   295c8:	7823      	ldrb	r3, [r4, #0]
   295ca:	2b2a      	cmp	r3, #42	; 0x2a
   295cc:	d016      	beq.n	295fc <_svfiprintf_r+0xf4>
   295ce:	2000      	movs	r0, #0
   295d0:	210a      	movs	r1, #10
   295d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   295d4:	7822      	ldrb	r2, [r4, #0]
   295d6:	3a30      	subs	r2, #48	; 0x30
   295d8:	2a09      	cmp	r2, #9
   295da:	d955      	bls.n	29688 <_svfiprintf_r+0x180>
   295dc:	2800      	cmp	r0, #0
   295de:	d015      	beq.n	2960c <_svfiprintf_r+0x104>
   295e0:	9309      	str	r3, [sp, #36]	; 0x24
   295e2:	e013      	b.n	2960c <_svfiprintf_r+0x104>
   295e4:	2b25      	cmp	r3, #37	; 0x25
   295e6:	d0b5      	beq.n	29554 <_svfiprintf_r+0x4c>
   295e8:	3401      	adds	r4, #1
   295ea:	e7b0      	b.n	2954e <_svfiprintf_r+0x46>
   295ec:	2301      	movs	r3, #1
   295ee:	1b80      	subs	r0, r0, r6
   295f0:	4083      	lsls	r3, r0
   295f2:	6829      	ldr	r1, [r5, #0]
   295f4:	0014      	movs	r4, r2
   295f6:	430b      	orrs	r3, r1
   295f8:	602b      	str	r3, [r5, #0]
   295fa:	e7cd      	b.n	29598 <_svfiprintf_r+0x90>
   295fc:	9b05      	ldr	r3, [sp, #20]
   295fe:	1d18      	adds	r0, r3, #4
   29600:	681b      	ldr	r3, [r3, #0]
   29602:	9005      	str	r0, [sp, #20]
   29604:	2b00      	cmp	r3, #0
   29606:	db39      	blt.n	2967c <_svfiprintf_r+0x174>
   29608:	9309      	str	r3, [sp, #36]	; 0x24
   2960a:	0014      	movs	r4, r2
   2960c:	7823      	ldrb	r3, [r4, #0]
   2960e:	2b2e      	cmp	r3, #46	; 0x2e
   29610:	d10b      	bne.n	2962a <_svfiprintf_r+0x122>
   29612:	7863      	ldrb	r3, [r4, #1]
   29614:	1c62      	adds	r2, r4, #1
   29616:	2b2a      	cmp	r3, #42	; 0x2a
   29618:	d13e      	bne.n	29698 <_svfiprintf_r+0x190>
   2961a:	9b05      	ldr	r3, [sp, #20]
   2961c:	3402      	adds	r4, #2
   2961e:	1d1a      	adds	r2, r3, #4
   29620:	681b      	ldr	r3, [r3, #0]
   29622:	9205      	str	r2, [sp, #20]
   29624:	2b00      	cmp	r3, #0
   29626:	db34      	blt.n	29692 <_svfiprintf_r+0x18a>
   29628:	9307      	str	r3, [sp, #28]
   2962a:	4e35      	ldr	r6, [pc, #212]	; (29700 <_svfiprintf_r+0x1f8>)
   2962c:	7821      	ldrb	r1, [r4, #0]
   2962e:	2203      	movs	r2, #3
   29630:	0030      	movs	r0, r6
   29632:	f000 f9f5 	bl	29a20 <memchr>
   29636:	2800      	cmp	r0, #0
   29638:	d006      	beq.n	29648 <_svfiprintf_r+0x140>
   2963a:	2340      	movs	r3, #64	; 0x40
   2963c:	1b80      	subs	r0, r0, r6
   2963e:	4083      	lsls	r3, r0
   29640:	682a      	ldr	r2, [r5, #0]
   29642:	3401      	adds	r4, #1
   29644:	4313      	orrs	r3, r2
   29646:	602b      	str	r3, [r5, #0]
   29648:	7821      	ldrb	r1, [r4, #0]
   2964a:	2206      	movs	r2, #6
   2964c:	482d      	ldr	r0, [pc, #180]	; (29704 <_svfiprintf_r+0x1fc>)
   2964e:	1c66      	adds	r6, r4, #1
   29650:	7629      	strb	r1, [r5, #24]
   29652:	f000 f9e5 	bl	29a20 <memchr>
   29656:	2800      	cmp	r0, #0
   29658:	d046      	beq.n	296e8 <_svfiprintf_r+0x1e0>
   2965a:	4b2b      	ldr	r3, [pc, #172]	; (29708 <_svfiprintf_r+0x200>)
   2965c:	2b00      	cmp	r3, #0
   2965e:	d12f      	bne.n	296c0 <_svfiprintf_r+0x1b8>
   29660:	6829      	ldr	r1, [r5, #0]
   29662:	9b05      	ldr	r3, [sp, #20]
   29664:	2207      	movs	r2, #7
   29666:	05c9      	lsls	r1, r1, #23
   29668:	d528      	bpl.n	296bc <_svfiprintf_r+0x1b4>
   2966a:	189b      	adds	r3, r3, r2
   2966c:	4393      	bics	r3, r2
   2966e:	3308      	adds	r3, #8
   29670:	9305      	str	r3, [sp, #20]
   29672:	696b      	ldr	r3, [r5, #20]
   29674:	9a03      	ldr	r2, [sp, #12]
   29676:	189b      	adds	r3, r3, r2
   29678:	616b      	str	r3, [r5, #20]
   2967a:	e767      	b.n	2954c <_svfiprintf_r+0x44>
   2967c:	425b      	negs	r3, r3
   2967e:	60eb      	str	r3, [r5, #12]
   29680:	2302      	movs	r3, #2
   29682:	430b      	orrs	r3, r1
   29684:	602b      	str	r3, [r5, #0]
   29686:	e7c0      	b.n	2960a <_svfiprintf_r+0x102>
   29688:	434b      	muls	r3, r1
   2968a:	3401      	adds	r4, #1
   2968c:	189b      	adds	r3, r3, r2
   2968e:	2001      	movs	r0, #1
   29690:	e7a0      	b.n	295d4 <_svfiprintf_r+0xcc>
   29692:	2301      	movs	r3, #1
   29694:	425b      	negs	r3, r3
   29696:	e7c7      	b.n	29628 <_svfiprintf_r+0x120>
   29698:	2300      	movs	r3, #0
   2969a:	0014      	movs	r4, r2
   2969c:	200a      	movs	r0, #10
   2969e:	001a      	movs	r2, r3
   296a0:	606b      	str	r3, [r5, #4]
   296a2:	7821      	ldrb	r1, [r4, #0]
   296a4:	3930      	subs	r1, #48	; 0x30
   296a6:	2909      	cmp	r1, #9
   296a8:	d903      	bls.n	296b2 <_svfiprintf_r+0x1aa>
   296aa:	2b00      	cmp	r3, #0
   296ac:	d0bd      	beq.n	2962a <_svfiprintf_r+0x122>
   296ae:	9207      	str	r2, [sp, #28]
   296b0:	e7bb      	b.n	2962a <_svfiprintf_r+0x122>
   296b2:	4342      	muls	r2, r0
   296b4:	3401      	adds	r4, #1
   296b6:	1852      	adds	r2, r2, r1
   296b8:	2301      	movs	r3, #1
   296ba:	e7f2      	b.n	296a2 <_svfiprintf_r+0x19a>
   296bc:	3307      	adds	r3, #7
   296be:	e7d5      	b.n	2966c <_svfiprintf_r+0x164>
   296c0:	ab05      	add	r3, sp, #20
   296c2:	9300      	str	r3, [sp, #0]
   296c4:	003a      	movs	r2, r7
   296c6:	4b11      	ldr	r3, [pc, #68]	; (2970c <_svfiprintf_r+0x204>)
   296c8:	0029      	movs	r1, r5
   296ca:	9802      	ldr	r0, [sp, #8]
   296cc:	e000      	b.n	296d0 <_svfiprintf_r+0x1c8>
   296ce:	bf00      	nop
   296d0:	9003      	str	r0, [sp, #12]
   296d2:	9b03      	ldr	r3, [sp, #12]
   296d4:	3301      	adds	r3, #1
   296d6:	d1cc      	bne.n	29672 <_svfiprintf_r+0x16a>
   296d8:	89bb      	ldrh	r3, [r7, #12]
   296da:	980b      	ldr	r0, [sp, #44]	; 0x2c
   296dc:	065b      	lsls	r3, r3, #25
   296de:	d400      	bmi.n	296e2 <_svfiprintf_r+0x1da>
   296e0:	e729      	b.n	29536 <_svfiprintf_r+0x2e>
   296e2:	2001      	movs	r0, #1
   296e4:	4240      	negs	r0, r0
   296e6:	e726      	b.n	29536 <_svfiprintf_r+0x2e>
   296e8:	ab05      	add	r3, sp, #20
   296ea:	9300      	str	r3, [sp, #0]
   296ec:	003a      	movs	r2, r7
   296ee:	4b07      	ldr	r3, [pc, #28]	; (2970c <_svfiprintf_r+0x204>)
   296f0:	0029      	movs	r1, r5
   296f2:	9802      	ldr	r0, [sp, #8]
   296f4:	f000 f87a 	bl	297ec <_printf_i>
   296f8:	e7ea      	b.n	296d0 <_svfiprintf_r+0x1c8>
   296fa:	46c0      	nop			; (mov r8, r8)
   296fc:	0002afd8 	.word	0x0002afd8
   29700:	0002afde 	.word	0x0002afde
   29704:	0002afe2 	.word	0x0002afe2
   29708:	00000000 	.word	0x00000000
   2970c:	00029445 	.word	0x00029445

00029710 <_printf_common>:
   29710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29712:	0015      	movs	r5, r2
   29714:	9301      	str	r3, [sp, #4]
   29716:	688a      	ldr	r2, [r1, #8]
   29718:	690b      	ldr	r3, [r1, #16]
   2971a:	9000      	str	r0, [sp, #0]
   2971c:	000c      	movs	r4, r1
   2971e:	4293      	cmp	r3, r2
   29720:	da00      	bge.n	29724 <_printf_common+0x14>
   29722:	0013      	movs	r3, r2
   29724:	0022      	movs	r2, r4
   29726:	602b      	str	r3, [r5, #0]
   29728:	3243      	adds	r2, #67	; 0x43
   2972a:	7812      	ldrb	r2, [r2, #0]
   2972c:	2a00      	cmp	r2, #0
   2972e:	d001      	beq.n	29734 <_printf_common+0x24>
   29730:	3301      	adds	r3, #1
   29732:	602b      	str	r3, [r5, #0]
   29734:	6823      	ldr	r3, [r4, #0]
   29736:	069b      	lsls	r3, r3, #26
   29738:	d502      	bpl.n	29740 <_printf_common+0x30>
   2973a:	682b      	ldr	r3, [r5, #0]
   2973c:	3302      	adds	r3, #2
   2973e:	602b      	str	r3, [r5, #0]
   29740:	2706      	movs	r7, #6
   29742:	6823      	ldr	r3, [r4, #0]
   29744:	401f      	ands	r7, r3
   29746:	d027      	beq.n	29798 <_printf_common+0x88>
   29748:	0023      	movs	r3, r4
   2974a:	3343      	adds	r3, #67	; 0x43
   2974c:	781b      	ldrb	r3, [r3, #0]
   2974e:	1e5a      	subs	r2, r3, #1
   29750:	4193      	sbcs	r3, r2
   29752:	6822      	ldr	r2, [r4, #0]
   29754:	0692      	lsls	r2, r2, #26
   29756:	d430      	bmi.n	297ba <_printf_common+0xaa>
   29758:	0022      	movs	r2, r4
   2975a:	9901      	ldr	r1, [sp, #4]
   2975c:	3243      	adds	r2, #67	; 0x43
   2975e:	9800      	ldr	r0, [sp, #0]
   29760:	9e08      	ldr	r6, [sp, #32]
   29762:	47b0      	blx	r6
   29764:	1c43      	adds	r3, r0, #1
   29766:	d025      	beq.n	297b4 <_printf_common+0xa4>
   29768:	2306      	movs	r3, #6
   2976a:	6820      	ldr	r0, [r4, #0]
   2976c:	682a      	ldr	r2, [r5, #0]
   2976e:	68e1      	ldr	r1, [r4, #12]
   29770:	4003      	ands	r3, r0
   29772:	2500      	movs	r5, #0
   29774:	2b04      	cmp	r3, #4
   29776:	d103      	bne.n	29780 <_printf_common+0x70>
   29778:	1a8d      	subs	r5, r1, r2
   2977a:	43eb      	mvns	r3, r5
   2977c:	17db      	asrs	r3, r3, #31
   2977e:	401d      	ands	r5, r3
   29780:	68a3      	ldr	r3, [r4, #8]
   29782:	6922      	ldr	r2, [r4, #16]
   29784:	4293      	cmp	r3, r2
   29786:	dd01      	ble.n	2978c <_printf_common+0x7c>
   29788:	1a9b      	subs	r3, r3, r2
   2978a:	18ed      	adds	r5, r5, r3
   2978c:	2700      	movs	r7, #0
   2978e:	42bd      	cmp	r5, r7
   29790:	d120      	bne.n	297d4 <_printf_common+0xc4>
   29792:	2000      	movs	r0, #0
   29794:	e010      	b.n	297b8 <_printf_common+0xa8>
   29796:	3701      	adds	r7, #1
   29798:	68e3      	ldr	r3, [r4, #12]
   2979a:	682a      	ldr	r2, [r5, #0]
   2979c:	1a9b      	subs	r3, r3, r2
   2979e:	429f      	cmp	r7, r3
   297a0:	dad2      	bge.n	29748 <_printf_common+0x38>
   297a2:	0022      	movs	r2, r4
   297a4:	2301      	movs	r3, #1
   297a6:	3219      	adds	r2, #25
   297a8:	9901      	ldr	r1, [sp, #4]
   297aa:	9800      	ldr	r0, [sp, #0]
   297ac:	9e08      	ldr	r6, [sp, #32]
   297ae:	47b0      	blx	r6
   297b0:	1c43      	adds	r3, r0, #1
   297b2:	d1f0      	bne.n	29796 <_printf_common+0x86>
   297b4:	2001      	movs	r0, #1
   297b6:	4240      	negs	r0, r0
   297b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   297ba:	2030      	movs	r0, #48	; 0x30
   297bc:	18e1      	adds	r1, r4, r3
   297be:	3143      	adds	r1, #67	; 0x43
   297c0:	7008      	strb	r0, [r1, #0]
   297c2:	0021      	movs	r1, r4
   297c4:	1c5a      	adds	r2, r3, #1
   297c6:	3145      	adds	r1, #69	; 0x45
   297c8:	7809      	ldrb	r1, [r1, #0]
   297ca:	18a2      	adds	r2, r4, r2
   297cc:	3243      	adds	r2, #67	; 0x43
   297ce:	3302      	adds	r3, #2
   297d0:	7011      	strb	r1, [r2, #0]
   297d2:	e7c1      	b.n	29758 <_printf_common+0x48>
   297d4:	0022      	movs	r2, r4
   297d6:	2301      	movs	r3, #1
   297d8:	321a      	adds	r2, #26
   297da:	9901      	ldr	r1, [sp, #4]
   297dc:	9800      	ldr	r0, [sp, #0]
   297de:	9e08      	ldr	r6, [sp, #32]
   297e0:	47b0      	blx	r6
   297e2:	1c43      	adds	r3, r0, #1
   297e4:	d0e6      	beq.n	297b4 <_printf_common+0xa4>
   297e6:	3701      	adds	r7, #1
   297e8:	e7d1      	b.n	2978e <_printf_common+0x7e>
	...

000297ec <_printf_i>:
   297ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   297ee:	b08b      	sub	sp, #44	; 0x2c
   297f0:	9206      	str	r2, [sp, #24]
   297f2:	000a      	movs	r2, r1
   297f4:	3243      	adds	r2, #67	; 0x43
   297f6:	9307      	str	r3, [sp, #28]
   297f8:	9005      	str	r0, [sp, #20]
   297fa:	9204      	str	r2, [sp, #16]
   297fc:	7e0a      	ldrb	r2, [r1, #24]
   297fe:	000c      	movs	r4, r1
   29800:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29802:	2a6e      	cmp	r2, #110	; 0x6e
   29804:	d100      	bne.n	29808 <_printf_i+0x1c>
   29806:	e08f      	b.n	29928 <_printf_i+0x13c>
   29808:	d817      	bhi.n	2983a <_printf_i+0x4e>
   2980a:	2a63      	cmp	r2, #99	; 0x63
   2980c:	d02c      	beq.n	29868 <_printf_i+0x7c>
   2980e:	d808      	bhi.n	29822 <_printf_i+0x36>
   29810:	2a00      	cmp	r2, #0
   29812:	d100      	bne.n	29816 <_printf_i+0x2a>
   29814:	e099      	b.n	2994a <_printf_i+0x15e>
   29816:	2a58      	cmp	r2, #88	; 0x58
   29818:	d054      	beq.n	298c4 <_printf_i+0xd8>
   2981a:	0026      	movs	r6, r4
   2981c:	3642      	adds	r6, #66	; 0x42
   2981e:	7032      	strb	r2, [r6, #0]
   29820:	e029      	b.n	29876 <_printf_i+0x8a>
   29822:	2a64      	cmp	r2, #100	; 0x64
   29824:	d001      	beq.n	2982a <_printf_i+0x3e>
   29826:	2a69      	cmp	r2, #105	; 0x69
   29828:	d1f7      	bne.n	2981a <_printf_i+0x2e>
   2982a:	6821      	ldr	r1, [r4, #0]
   2982c:	681a      	ldr	r2, [r3, #0]
   2982e:	0608      	lsls	r0, r1, #24
   29830:	d523      	bpl.n	2987a <_printf_i+0x8e>
   29832:	1d11      	adds	r1, r2, #4
   29834:	6019      	str	r1, [r3, #0]
   29836:	6815      	ldr	r5, [r2, #0]
   29838:	e025      	b.n	29886 <_printf_i+0x9a>
   2983a:	2a73      	cmp	r2, #115	; 0x73
   2983c:	d100      	bne.n	29840 <_printf_i+0x54>
   2983e:	e088      	b.n	29952 <_printf_i+0x166>
   29840:	d808      	bhi.n	29854 <_printf_i+0x68>
   29842:	2a6f      	cmp	r2, #111	; 0x6f
   29844:	d029      	beq.n	2989a <_printf_i+0xae>
   29846:	2a70      	cmp	r2, #112	; 0x70
   29848:	d1e7      	bne.n	2981a <_printf_i+0x2e>
   2984a:	2220      	movs	r2, #32
   2984c:	6809      	ldr	r1, [r1, #0]
   2984e:	430a      	orrs	r2, r1
   29850:	6022      	str	r2, [r4, #0]
   29852:	e003      	b.n	2985c <_printf_i+0x70>
   29854:	2a75      	cmp	r2, #117	; 0x75
   29856:	d020      	beq.n	2989a <_printf_i+0xae>
   29858:	2a78      	cmp	r2, #120	; 0x78
   2985a:	d1de      	bne.n	2981a <_printf_i+0x2e>
   2985c:	0022      	movs	r2, r4
   2985e:	2178      	movs	r1, #120	; 0x78
   29860:	3245      	adds	r2, #69	; 0x45
   29862:	7011      	strb	r1, [r2, #0]
   29864:	4a6c      	ldr	r2, [pc, #432]	; (29a18 <_printf_i+0x22c>)
   29866:	e030      	b.n	298ca <_printf_i+0xde>
   29868:	000e      	movs	r6, r1
   2986a:	681a      	ldr	r2, [r3, #0]
   2986c:	3642      	adds	r6, #66	; 0x42
   2986e:	1d11      	adds	r1, r2, #4
   29870:	6019      	str	r1, [r3, #0]
   29872:	6813      	ldr	r3, [r2, #0]
   29874:	7033      	strb	r3, [r6, #0]
   29876:	2301      	movs	r3, #1
   29878:	e079      	b.n	2996e <_printf_i+0x182>
   2987a:	0649      	lsls	r1, r1, #25
   2987c:	d5d9      	bpl.n	29832 <_printf_i+0x46>
   2987e:	1d11      	adds	r1, r2, #4
   29880:	6019      	str	r1, [r3, #0]
   29882:	2300      	movs	r3, #0
   29884:	5ed5      	ldrsh	r5, [r2, r3]
   29886:	2d00      	cmp	r5, #0
   29888:	da03      	bge.n	29892 <_printf_i+0xa6>
   2988a:	232d      	movs	r3, #45	; 0x2d
   2988c:	9a04      	ldr	r2, [sp, #16]
   2988e:	426d      	negs	r5, r5
   29890:	7013      	strb	r3, [r2, #0]
   29892:	4b62      	ldr	r3, [pc, #392]	; (29a1c <_printf_i+0x230>)
   29894:	270a      	movs	r7, #10
   29896:	9303      	str	r3, [sp, #12]
   29898:	e02f      	b.n	298fa <_printf_i+0x10e>
   2989a:	6820      	ldr	r0, [r4, #0]
   2989c:	6819      	ldr	r1, [r3, #0]
   2989e:	0605      	lsls	r5, r0, #24
   298a0:	d503      	bpl.n	298aa <_printf_i+0xbe>
   298a2:	1d08      	adds	r0, r1, #4
   298a4:	6018      	str	r0, [r3, #0]
   298a6:	680d      	ldr	r5, [r1, #0]
   298a8:	e005      	b.n	298b6 <_printf_i+0xca>
   298aa:	0640      	lsls	r0, r0, #25
   298ac:	d5f9      	bpl.n	298a2 <_printf_i+0xb6>
   298ae:	680d      	ldr	r5, [r1, #0]
   298b0:	1d08      	adds	r0, r1, #4
   298b2:	6018      	str	r0, [r3, #0]
   298b4:	b2ad      	uxth	r5, r5
   298b6:	4b59      	ldr	r3, [pc, #356]	; (29a1c <_printf_i+0x230>)
   298b8:	2708      	movs	r7, #8
   298ba:	9303      	str	r3, [sp, #12]
   298bc:	2a6f      	cmp	r2, #111	; 0x6f
   298be:	d018      	beq.n	298f2 <_printf_i+0x106>
   298c0:	270a      	movs	r7, #10
   298c2:	e016      	b.n	298f2 <_printf_i+0x106>
   298c4:	3145      	adds	r1, #69	; 0x45
   298c6:	700a      	strb	r2, [r1, #0]
   298c8:	4a54      	ldr	r2, [pc, #336]	; (29a1c <_printf_i+0x230>)
   298ca:	9203      	str	r2, [sp, #12]
   298cc:	681a      	ldr	r2, [r3, #0]
   298ce:	6821      	ldr	r1, [r4, #0]
   298d0:	1d10      	adds	r0, r2, #4
   298d2:	6018      	str	r0, [r3, #0]
   298d4:	6815      	ldr	r5, [r2, #0]
   298d6:	0608      	lsls	r0, r1, #24
   298d8:	d522      	bpl.n	29920 <_printf_i+0x134>
   298da:	07cb      	lsls	r3, r1, #31
   298dc:	d502      	bpl.n	298e4 <_printf_i+0xf8>
   298de:	2320      	movs	r3, #32
   298e0:	4319      	orrs	r1, r3
   298e2:	6021      	str	r1, [r4, #0]
   298e4:	2710      	movs	r7, #16
   298e6:	2d00      	cmp	r5, #0
   298e8:	d103      	bne.n	298f2 <_printf_i+0x106>
   298ea:	2320      	movs	r3, #32
   298ec:	6822      	ldr	r2, [r4, #0]
   298ee:	439a      	bics	r2, r3
   298f0:	6022      	str	r2, [r4, #0]
   298f2:	0023      	movs	r3, r4
   298f4:	2200      	movs	r2, #0
   298f6:	3343      	adds	r3, #67	; 0x43
   298f8:	701a      	strb	r2, [r3, #0]
   298fa:	6863      	ldr	r3, [r4, #4]
   298fc:	60a3      	str	r3, [r4, #8]
   298fe:	2b00      	cmp	r3, #0
   29900:	db5c      	blt.n	299bc <_printf_i+0x1d0>
   29902:	2204      	movs	r2, #4
   29904:	6821      	ldr	r1, [r4, #0]
   29906:	4391      	bics	r1, r2
   29908:	6021      	str	r1, [r4, #0]
   2990a:	2d00      	cmp	r5, #0
   2990c:	d158      	bne.n	299c0 <_printf_i+0x1d4>
   2990e:	9e04      	ldr	r6, [sp, #16]
   29910:	2b00      	cmp	r3, #0
   29912:	d064      	beq.n	299de <_printf_i+0x1f2>
   29914:	0026      	movs	r6, r4
   29916:	9b03      	ldr	r3, [sp, #12]
   29918:	3642      	adds	r6, #66	; 0x42
   2991a:	781b      	ldrb	r3, [r3, #0]
   2991c:	7033      	strb	r3, [r6, #0]
   2991e:	e05e      	b.n	299de <_printf_i+0x1f2>
   29920:	0648      	lsls	r0, r1, #25
   29922:	d5da      	bpl.n	298da <_printf_i+0xee>
   29924:	b2ad      	uxth	r5, r5
   29926:	e7d8      	b.n	298da <_printf_i+0xee>
   29928:	6809      	ldr	r1, [r1, #0]
   2992a:	681a      	ldr	r2, [r3, #0]
   2992c:	0608      	lsls	r0, r1, #24
   2992e:	d505      	bpl.n	2993c <_printf_i+0x150>
   29930:	1d11      	adds	r1, r2, #4
   29932:	6019      	str	r1, [r3, #0]
   29934:	6813      	ldr	r3, [r2, #0]
   29936:	6962      	ldr	r2, [r4, #20]
   29938:	601a      	str	r2, [r3, #0]
   2993a:	e006      	b.n	2994a <_printf_i+0x15e>
   2993c:	0649      	lsls	r1, r1, #25
   2993e:	d5f7      	bpl.n	29930 <_printf_i+0x144>
   29940:	1d11      	adds	r1, r2, #4
   29942:	6019      	str	r1, [r3, #0]
   29944:	6813      	ldr	r3, [r2, #0]
   29946:	8aa2      	ldrh	r2, [r4, #20]
   29948:	801a      	strh	r2, [r3, #0]
   2994a:	2300      	movs	r3, #0
   2994c:	9e04      	ldr	r6, [sp, #16]
   2994e:	6123      	str	r3, [r4, #16]
   29950:	e054      	b.n	299fc <_printf_i+0x210>
   29952:	681a      	ldr	r2, [r3, #0]
   29954:	1d11      	adds	r1, r2, #4
   29956:	6019      	str	r1, [r3, #0]
   29958:	6816      	ldr	r6, [r2, #0]
   2995a:	2100      	movs	r1, #0
   2995c:	6862      	ldr	r2, [r4, #4]
   2995e:	0030      	movs	r0, r6
   29960:	f000 f85e 	bl	29a20 <memchr>
   29964:	2800      	cmp	r0, #0
   29966:	d001      	beq.n	2996c <_printf_i+0x180>
   29968:	1b80      	subs	r0, r0, r6
   2996a:	6060      	str	r0, [r4, #4]
   2996c:	6863      	ldr	r3, [r4, #4]
   2996e:	6123      	str	r3, [r4, #16]
   29970:	2300      	movs	r3, #0
   29972:	9a04      	ldr	r2, [sp, #16]
   29974:	7013      	strb	r3, [r2, #0]
   29976:	e041      	b.n	299fc <_printf_i+0x210>
   29978:	6923      	ldr	r3, [r4, #16]
   2997a:	0032      	movs	r2, r6
   2997c:	9906      	ldr	r1, [sp, #24]
   2997e:	9805      	ldr	r0, [sp, #20]
   29980:	9d07      	ldr	r5, [sp, #28]
   29982:	47a8      	blx	r5
   29984:	1c43      	adds	r3, r0, #1
   29986:	d043      	beq.n	29a10 <_printf_i+0x224>
   29988:	6823      	ldr	r3, [r4, #0]
   2998a:	2500      	movs	r5, #0
   2998c:	079b      	lsls	r3, r3, #30
   2998e:	d40f      	bmi.n	299b0 <_printf_i+0x1c4>
   29990:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29992:	68e0      	ldr	r0, [r4, #12]
   29994:	4298      	cmp	r0, r3
   29996:	da3d      	bge.n	29a14 <_printf_i+0x228>
   29998:	0018      	movs	r0, r3
   2999a:	e03b      	b.n	29a14 <_printf_i+0x228>
   2999c:	0022      	movs	r2, r4
   2999e:	2301      	movs	r3, #1
   299a0:	3219      	adds	r2, #25
   299a2:	9906      	ldr	r1, [sp, #24]
   299a4:	9805      	ldr	r0, [sp, #20]
   299a6:	9e07      	ldr	r6, [sp, #28]
   299a8:	47b0      	blx	r6
   299aa:	1c43      	adds	r3, r0, #1
   299ac:	d030      	beq.n	29a10 <_printf_i+0x224>
   299ae:	3501      	adds	r5, #1
   299b0:	68e3      	ldr	r3, [r4, #12]
   299b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   299b4:	1a9b      	subs	r3, r3, r2
   299b6:	429d      	cmp	r5, r3
   299b8:	dbf0      	blt.n	2999c <_printf_i+0x1b0>
   299ba:	e7e9      	b.n	29990 <_printf_i+0x1a4>
   299bc:	2d00      	cmp	r5, #0
   299be:	d0a9      	beq.n	29914 <_printf_i+0x128>
   299c0:	9e04      	ldr	r6, [sp, #16]
   299c2:	0028      	movs	r0, r5
   299c4:	0039      	movs	r1, r7
   299c6:	f7fc fe5f 	bl	26688 <__aeabi_uidivmod>
   299ca:	9b03      	ldr	r3, [sp, #12]
   299cc:	3e01      	subs	r6, #1
   299ce:	5c5b      	ldrb	r3, [r3, r1]
   299d0:	0028      	movs	r0, r5
   299d2:	7033      	strb	r3, [r6, #0]
   299d4:	0039      	movs	r1, r7
   299d6:	f7fc fdd1 	bl	2657c <__udivsi3>
   299da:	1e05      	subs	r5, r0, #0
   299dc:	d1f1      	bne.n	299c2 <_printf_i+0x1d6>
   299de:	2f08      	cmp	r7, #8
   299e0:	d109      	bne.n	299f6 <_printf_i+0x20a>
   299e2:	6823      	ldr	r3, [r4, #0]
   299e4:	07db      	lsls	r3, r3, #31
   299e6:	d506      	bpl.n	299f6 <_printf_i+0x20a>
   299e8:	6863      	ldr	r3, [r4, #4]
   299ea:	6922      	ldr	r2, [r4, #16]
   299ec:	4293      	cmp	r3, r2
   299ee:	dc02      	bgt.n	299f6 <_printf_i+0x20a>
   299f0:	2330      	movs	r3, #48	; 0x30
   299f2:	3e01      	subs	r6, #1
   299f4:	7033      	strb	r3, [r6, #0]
   299f6:	9b04      	ldr	r3, [sp, #16]
   299f8:	1b9b      	subs	r3, r3, r6
   299fa:	6123      	str	r3, [r4, #16]
   299fc:	9b07      	ldr	r3, [sp, #28]
   299fe:	aa09      	add	r2, sp, #36	; 0x24
   29a00:	9300      	str	r3, [sp, #0]
   29a02:	0021      	movs	r1, r4
   29a04:	9b06      	ldr	r3, [sp, #24]
   29a06:	9805      	ldr	r0, [sp, #20]
   29a08:	f7ff fe82 	bl	29710 <_printf_common>
   29a0c:	1c43      	adds	r3, r0, #1
   29a0e:	d1b3      	bne.n	29978 <_printf_i+0x18c>
   29a10:	2001      	movs	r0, #1
   29a12:	4240      	negs	r0, r0
   29a14:	b00b      	add	sp, #44	; 0x2c
   29a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29a18:	0002affa 	.word	0x0002affa
   29a1c:	0002afe9 	.word	0x0002afe9

00029a20 <memchr>:
   29a20:	b2c9      	uxtb	r1, r1
   29a22:	1882      	adds	r2, r0, r2
   29a24:	4290      	cmp	r0, r2
   29a26:	d101      	bne.n	29a2c <memchr+0xc>
   29a28:	2000      	movs	r0, #0
   29a2a:	4770      	bx	lr
   29a2c:	7803      	ldrb	r3, [r0, #0]
   29a2e:	428b      	cmp	r3, r1
   29a30:	d0fb      	beq.n	29a2a <memchr+0xa>
   29a32:	3001      	adds	r0, #1
   29a34:	e7f6      	b.n	29a24 <memchr+0x4>

00029a36 <_realloc_r>:
   29a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a38:	0007      	movs	r7, r0
   29a3a:	000d      	movs	r5, r1
   29a3c:	0016      	movs	r6, r2
   29a3e:	2900      	cmp	r1, #0
   29a40:	d105      	bne.n	29a4e <_realloc_r+0x18>
   29a42:	0011      	movs	r1, r2
   29a44:	f7ff fa86 	bl	28f54 <_malloc_r>
   29a48:	0004      	movs	r4, r0
   29a4a:	0020      	movs	r0, r4
   29a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29a4e:	2a00      	cmp	r2, #0
   29a50:	d103      	bne.n	29a5a <_realloc_r+0x24>
   29a52:	f7ff fa35 	bl	28ec0 <_free_r>
   29a56:	0034      	movs	r4, r6
   29a58:	e7f7      	b.n	29a4a <_realloc_r+0x14>
   29a5a:	f000 f812 	bl	29a82 <_malloc_usable_size_r>
   29a5e:	002c      	movs	r4, r5
   29a60:	4286      	cmp	r6, r0
   29a62:	d9f2      	bls.n	29a4a <_realloc_r+0x14>
   29a64:	0031      	movs	r1, r6
   29a66:	0038      	movs	r0, r7
   29a68:	f7ff fa74 	bl	28f54 <_malloc_r>
   29a6c:	1e04      	subs	r4, r0, #0
   29a6e:	d0ec      	beq.n	29a4a <_realloc_r+0x14>
   29a70:	0029      	movs	r1, r5
   29a72:	0032      	movs	r2, r6
   29a74:	f7ff f9f2 	bl	28e5c <memcpy>
   29a78:	0029      	movs	r1, r5
   29a7a:	0038      	movs	r0, r7
   29a7c:	f7ff fa20 	bl	28ec0 <_free_r>
   29a80:	e7e3      	b.n	29a4a <_realloc_r+0x14>

00029a82 <_malloc_usable_size_r>:
   29a82:	1f0b      	subs	r3, r1, #4
   29a84:	681b      	ldr	r3, [r3, #0]
   29a86:	1f18      	subs	r0, r3, #4
   29a88:	2b00      	cmp	r3, #0
   29a8a:	da01      	bge.n	29a90 <_malloc_usable_size_r+0xe>
   29a8c:	580b      	ldr	r3, [r1, r0]
   29a8e:	18c0      	adds	r0, r0, r3
   29a90:	4770      	bx	lr
   29a92:	0000      	movs	r0, r0
   29a94:	30303030 	.word	0x30303030
   29a98:	30303030 	.word	0x30303030
   29a9c:	00003030 	.word	0x00003030
   29aa0:	2e707466 	.word	0x2e707466
   29aa4:	76697264 	.word	0x76697264
   29aa8:	2e716865 	.word	0x2e716865
   29aac:	006d6f63 	.word	0x006d6f63
   29ab0:	7269662f 	.word	0x7269662f
   29ab4:	7261776d 	.word	0x7261776d
   29ab8:	00002f65 	.word	0x00002f65
   29abc:	75686172 	.word	0x75686172
   29ac0:	61726e6c 	.word	0x61726e6c
   29ac4:	646f6874 	.word	0x646f6874
   29ac8:	006c636b 	.word	0x006c636b
   29acc:	34333231 	.word	0x34333231
   29ad0:	38373635 	.word	0x38373635
   29ad4:	00000039 	.word	0x00000039
   29ad8:	6d726966 	.word	0x6d726966
   29adc:	65726177 	.word	0x65726177
   29ae0:	6e69622e 	.word	0x6e69622e
   29ae4:	00000000 	.word	0x00000000
   29ae8:	31343037 	.word	0x31343037
   29aec:	39363931 	.word	0x39363931
   29af0:	00003935 	.word	0x00003935
   29af4:	38393637 	.word	0x38393637
   29af8:	32393334 	.word	0x32393334
   29afc:	00003130 	.word	0x00003130
   29b00:	33383337 	.word	0x33383337
   29b04:	32343136 	.word	0x32343136
   29b08:	00003431 	.word	0x00003431
   29b0c:	33383337 	.word	0x33383337
   29b10:	36323236 	.word	0x36323236
   29b14:	00003837 	.word	0x00003837
   29b18:	36383539 	.word	0x36383539
   29b1c:	39353331 	.word	0x39353331
   29b20:	00003837 	.word	0x00003837
   29b24:	00003a50 	.word	0x00003a50
   29b28:	00003a53 	.word	0x00003a53
   29b2c:	0000000a 	.word	0x0000000a
   29b30:	00006425 	.word	0x00006425
   29b34:	204d5347 	.word	0x204d5347
   29b38:	656d6954 	.word	0x656d6954
   29b3c:	0074756f 	.word	0x0074756f
   29b40:	4f525245 	.word	0x4f525245
   29b44:	00000052 	.word	0x00000052
   29b48:	00004b4f 	.word	0x00004b4f
   29b4c:	000d5441 	.word	0x000d5441
   29b50:	492b5441 	.word	0x492b5441
   29b54:	303d4346 	.word	0x303d4346
   29b58:	000d302c 	.word	0x000d302c
   29b5c:	4552432b 	.word	0x4552432b
   29b60:	30203a47 	.word	0x30203a47
   29b64:	0000312c 	.word	0x0000312c
   29b68:	432b5441 	.word	0x432b5441
   29b6c:	3f474552 	.word	0x3f474552
   29b70:	0000000d 	.word	0x0000000d
   29b74:	4552432b 	.word	0x4552432b
   29b78:	30203a47 	.word	0x30203a47
   29b7c:	0000352c 	.word	0x0000352c
   29b80:	492b5441 	.word	0x492b5441
   29b84:	253d5250 	.word	0x253d5250
   29b88:	00000d64 	.word	0x00000d64
   29b8c:	492b5441 	.word	0x492b5441
   29b90:	303d5250 	.word	0x303d5250
   29b94:	0000000d 	.word	0x0000000d
   29b98:	432b5441 	.word	0x432b5441
   29b9c:	3d474552 	.word	0x3d474552
   29ba0:	00000d31 	.word	0x00000d31
   29ba4:	432b5441 	.word	0x432b5441
   29ba8:	3d4e5546 	.word	0x3d4e5546
   29bac:	00000d31 	.word	0x00000d31
   29bb0:	5546432b 	.word	0x5546432b
   29bb4:	31203a4e 	.word	0x31203a4e
   29bb8:	00000000 	.word	0x00000000
   29bbc:	432b5441 	.word	0x432b5441
   29bc0:	3f4e5546 	.word	0x3f4e5546
   29bc4:	0000000d 	.word	0x0000000d
   29bc8:	432b5441 	.word	0x432b5441
   29bcc:	3d4e5546 	.word	0x3d4e5546
   29bd0:	00000d30 	.word	0x00000d30
   29bd4:	5546432b 	.word	0x5546432b
   29bd8:	30203a4e 	.word	0x30203a4e
   29bdc:	00000000 	.word	0x00000000
   29be0:	432b5441 	.word	0x432b5441
   29be4:	3d4e5546 	.word	0x3d4e5546
   29be8:	0d312c31 	.word	0x0d312c31
   29bec:	00000000 	.word	0x00000000
   29bf0:	4950432b 	.word	0x4950432b
   29bf4:	52203a4e 	.word	0x52203a4e
   29bf8:	59444145 	.word	0x59444145
   29bfc:	00000000 	.word	0x00000000
   29c00:	432b5441 	.word	0x432b5441
   29c04:	3f4e4950 	.word	0x3f4e4950
   29c08:	0000000d 	.word	0x0000000d
   29c0c:	432b5441 	.word	0x432b5441
   29c10:	4144474d 	.word	0x4144474d
   29c14:	4544223d 	.word	0x4544223d
   29c18:	4c41204c 	.word	0x4c41204c
   29c1c:	000d224c 	.word	0x000d224c
   29c20:	57265441 	.word	0x57265441
   29c24:	0000000d 	.word	0x0000000d
   29c28:	432b5441 	.word	0x432b5441
   29c2c:	3d50494c 	.word	0x3d50494c
   29c30:	00000d31 	.word	0x00000d31
   29c34:	432b5441 	.word	0x432b5441
   29c38:	3d504c4f 	.word	0x3d504c4f
   29c3c:	00000d31 	.word	0x00000d31
   29c40:	432b5441 	.word	0x432b5441
   29c44:	4b4c4353 	.word	0x4b4c4353
   29c48:	000d313d 	.word	0x000d313d
   29c4c:	432b5441 	.word	0x432b5441
   29c50:	3f504c4f 	.word	0x3f504c4f
   29c54:	0000000d 	.word	0x0000000d
   29c58:	4c4f432b 	.word	0x4c4f432b
   29c5c:	00000050 	.word	0x00000050
   29c60:	0000003a 	.word	0x0000003a
   29c64:	0000002c 	.word	0x0000002c
   29c68:	432b5441 	.word	0x432b5441
   29c6c:	3d43434c 	.word	0x3d43434c
   29c70:	00000d31 	.word	0x00000d31
   29c74:	46265441 	.word	0x46265441
   29c78:	0000000d 	.word	0x0000000d
   29c7c:	30455441 	.word	0x30455441
   29c80:	0000000d 	.word	0x0000000d
   29c84:	432b5441 	.word	0x432b5441
   29c88:	3d46474d 	.word	0x3d46474d
   29c8c:	00000d31 	.word	0x00000d31
   29c90:	432b5441 	.word	0x432b5441
   29c94:	3d504d53 	.word	0x3d504d53
   29c98:	312c3731 	.word	0x312c3731
   29c9c:	302c3736 	.word	0x302c3736
   29ca0:	000d302c 	.word	0x000d302c
   29ca4:	432b5441 	.word	0x432b5441
   29ca8:	3d534153 	.word	0x3d534153
   29cac:	00000d30 	.word	0x00000d30
   29cb0:	432b5441 	.word	0x432b5441
   29cb4:	3d534153 	.word	0x3d534153
   29cb8:	00000d31 	.word	0x00000d31
   29cbc:	432b5441 	.word	0x432b5441
   29cc0:	000d5153 	.word	0x000d5153
   29cc4:	00003939 	.word	0x00003939
   29cc8:	432b5441 	.word	0x432b5441
   29ccc:	3d494d4e 	.word	0x3d494d4e
   29cd0:	2c312c32 	.word	0x2c312c32
   29cd4:	2c302c30 	.word	0x2c302c30
   29cd8:	00000d30 	.word	0x00000d30
   29cdc:	432b5441 	.word	0x432b5441
   29ce0:	3d494d4e 	.word	0x3d494d4e
   29ce4:	2c302c31 	.word	0x2c302c31
   29ce8:	2c302c30 	.word	0x2c302c30
   29cec:	00000d30 	.word	0x00000d30
   29cf0:	432b5441 	.word	0x432b5441
   29cf4:	3d53474d 	.word	0x3d53474d
   29cf8:	22732522 	.word	0x22732522
   29cfc:	0000000d 	.word	0x0000000d
   29d00:	0000003e 	.word	0x0000003e
   29d04:	0d1a7325 	.word	0x0d1a7325
   29d08:	00000000 	.word	0x00000000
   29d0c:	432b5441 	.word	0x432b5441
   29d10:	3d4c474d 	.word	0x3d4c474d
   29d14:	43455222 	.word	0x43455222
   29d18:	524e5520 	.word	0x524e5520
   29d1c:	22444145 	.word	0x22444145
   29d20:	0000000d 	.word	0x0000000d
   29d24:	432b5441 	.word	0x432b5441
   29d28:	3d4c474d 	.word	0x3d4c474d
   29d2c:	43455222 	.word	0x43455222
   29d30:	41455220 	.word	0x41455220
   29d34:	000d2244 	.word	0x000d2244
   29d38:	432b5441 	.word	0x432b5441
   29d3c:	3d4c474d 	.word	0x3d4c474d
   29d40:	4c4c4122 	.word	0x4c4c4122
   29d44:	00000d22 	.word	0x00000d22
   29d48:	4c474d43 	.word	0x4c474d43
   29d4c:	00000000 	.word	0x00000000
   29d50:	432b5441 	.word	0x432b5441
   29d54:	3d52474d 	.word	0x3d52474d
   29d58:	000d6425 	.word	0x000d6425
   29d5c:	474d432b 	.word	0x474d432b
   29d60:	00000052 	.word	0x00000052
   29d64:	25445441 	.word	0x25445441
   29d68:	000d3b73 	.word	0x000d3b73
   29d6c:	0d415441 	.word	0x0d415441
   29d70:	00000000 	.word	0x00000000
   29d74:	432b5441 	.word	0x432b5441
   29d78:	3d53544c 	.word	0x3d53544c
   29d7c:	00000d31 	.word	0x00000d31
   29d80:	432b5441 	.word	0x432b5441
   29d84:	3d53544c 	.word	0x3d53544c
   29d88:	00000d30 	.word	0x00000d30
   29d8c:	442b5441 	.word	0x442b5441
   29d90:	3d544544 	.word	0x3d544544
   29d94:	00000d31 	.word	0x00000d31
   29d98:	562b5441 	.word	0x562b5441
   29d9c:	223d5354 	.word	0x223d5354
   29da0:	0d227325 	.word	0x0d227325
   29da4:	00000000 	.word	0x00000000
   29da8:	432b5441 	.word	0x432b5441
   29dac:	0d505548 	.word	0x0d505548
   29db0:	00000000 	.word	0x00000000
   29db4:	432b5441 	.word	0x432b5441
   29db8:	3d415743 	.word	0x3d415743
   29dbc:	0d302c30 	.word	0x0d302c30
   29dc0:	00000000 	.word	0x00000000
   29dc4:	472b5441 	.word	0x472b5441
   29dc8:	55424d53 	.word	0x55424d53
   29dcc:	313d5953 	.word	0x313d5953
   29dd0:	0000000d 	.word	0x0000000d
   29dd4:	472b5441 	.word	0x472b5441
   29dd8:	55424d53 	.word	0x55424d53
   29ddc:	303d5953 	.word	0x303d5953
   29de0:	0000000d 	.word	0x0000000d
   29de4:	432b5441 	.word	0x432b5441
   29de8:	3d434552 	.word	0x3d434552
   29dec:	00000d35 	.word	0x00000d35
   29df0:	432b5441 	.word	0x432b5441
   29df4:	3d434552 	.word	0x3d434552
   29df8:	43222c34 	.word	0x43222c34
   29dfc:	73555c3a 	.word	0x73555c3a
   29e00:	255c7265 	.word	0x255c7265
   29e04:	6d612e63 	.word	0x6d612e63
   29e08:	302c2272 	.word	0x302c2272
   29e0c:	2c30392c 	.word	0x2c30392c
   29e10:	000d7525 	.word	0x000d7525
   29e14:	432b5441 	.word	0x432b5441
   29e18:	3f4b4c43 	.word	0x3f4b4c43
   29e1c:	0000000d 	.word	0x0000000d
   29e20:	00000022 	.word	0x00000022
   29e24:	0000002f 	.word	0x0000002f
   29e28:	0000002b 	.word	0x0000002b
   29e2c:	544d432b 	.word	0x544d432b
   29e30:	00003a49 	.word	0x00003a49
   29e34:	474e4952 	.word	0x474e4952
   29e38:	00000000 	.word	0x00000000
   29e3c:	494c432b 	.word	0x494c432b
   29e40:	00000050 	.word	0x00000050
   29e44:	43204f4e 	.word	0x43204f4e
   29e48:	49525241 	.word	0x49525241
   29e4c:	00005245 	.word	0x00005245
   29e50:	59535542 	.word	0x59535542
   29e54:	00000000 	.word	0x00000000
   29e58:	41204f4e 	.word	0x41204f4e
   29e5c:	4557534e 	.word	0x4557534e
   29e60:	00000052 	.word	0x00000052
   29e64:	4d54442b 	.word	0x4d54442b
   29e68:	00003a46 	.word	0x00003a46
   29e6c:	4552432b 	.word	0x4552432b
   29e70:	30203a43 	.word	0x30203a43
   29e74:	00000000 	.word	0x00000000
   29e78:	532b5441 	.word	0x532b5441
   29e7c:	52425041 	.word	0x52425041
   29e80:	312c333d 	.word	0x312c333d
   29e84:	4f43222c 	.word	0x4f43222c
   29e88:	5059544e 	.word	0x5059544e
   29e8c:	222c2245 	.word	0x222c2245
   29e90:	53525047 	.word	0x53525047
   29e94:	00000d22 	.word	0x00000d22
   29e98:	432b5441 	.word	0x432b5441
   29e9c:	3f53504f 	.word	0x3f53504f
   29ea0:	0000000d 	.word	0x0000000d
   29ea4:	504f432b 	.word	0x504f432b
   29ea8:	00003a53 	.word	0x00003a53
   29eac:	41454449 	.word	0x41454449
   29eb0:	00000000 	.word	0x00000000
   29eb4:	532b5441 	.word	0x532b5441
   29eb8:	52425041 	.word	0x52425041
   29ebc:	312c333d 	.word	0x312c333d
   29ec0:	5041222c 	.word	0x5041222c
   29ec4:	222c224e 	.word	0x222c224e
   29ec8:	65746e69 	.word	0x65746e69
   29ecc:	74656e72 	.word	0x74656e72
   29ed0:	00000d22 	.word	0x00000d22
   29ed4:	41444f56 	.word	0x41444f56
   29ed8:	00000000 	.word	0x00000000
   29edc:	532b5441 	.word	0x532b5441
   29ee0:	52425041 	.word	0x52425041
   29ee4:	312c333d 	.word	0x312c333d
   29ee8:	5041222c 	.word	0x5041222c
   29eec:	222c224e 	.word	0x222c224e
   29ef0:	22777777 	.word	0x22777777
   29ef4:	0000000d 	.word	0x0000000d
   29ef8:	4c4e5342 	.word	0x4c4e5342
   29efc:	00000000 	.word	0x00000000
   29f00:	532b5441 	.word	0x532b5441
   29f04:	52425041 	.word	0x52425041
   29f08:	312c333d 	.word	0x312c333d
   29f0c:	5041222c 	.word	0x5041222c
   29f10:	222c224e 	.word	0x222c224e
   29f14:	6c6e7362 	.word	0x6c6e7362
   29f18:	2274656e 	.word	0x2274656e
   29f1c:	0000000d 	.word	0x0000000d
   29f20:	54524941 	.word	0x54524941
   29f24:	00004c45 	.word	0x00004c45
   29f28:	532b5441 	.word	0x532b5441
   29f2c:	52425041 	.word	0x52425041
   29f30:	312c333d 	.word	0x312c333d
   29f34:	5041222c 	.word	0x5041222c
   29f38:	222c224e 	.word	0x222c224e
   29f3c:	74726961 	.word	0x74726961
   29f40:	70676c65 	.word	0x70676c65
   29f44:	632e7372 	.word	0x632e7372
   29f48:	0d226d6f 	.word	0x0d226d6f
   29f4c:	00000000 	.word	0x00000000
   29f50:	532b5441 	.word	0x532b5441
   29f54:	52425041 	.word	0x52425041
   29f58:	312c333d 	.word	0x312c333d
   29f5c:	5041222c 	.word	0x5041222c
   29f60:	222c224e 	.word	0x222c224e
   29f64:	00000d22 	.word	0x00000d22
   29f68:	532b5441 	.word	0x532b5441
   29f6c:	52425041 	.word	0x52425041
   29f70:	312c323d 	.word	0x312c323d
   29f74:	0000000d 	.word	0x0000000d
   29f78:	5041532b 	.word	0x5041532b
   29f7c:	203a5242 	.word	0x203a5242
   29f80:	00302c31 	.word	0x00302c31
   29f84:	5041532b 	.word	0x5041532b
   29f88:	203a5242 	.word	0x203a5242
   29f8c:	00312c31 	.word	0x00312c31
   29f90:	5041532b 	.word	0x5041532b
   29f94:	203a5242 	.word	0x203a5242
   29f98:	00322c31 	.word	0x00322c31
   29f9c:	5041532b 	.word	0x5041532b
   29fa0:	203a5242 	.word	0x203a5242
   29fa4:	00332c31 	.word	0x00332c31
   29fa8:	532b5441 	.word	0x532b5441
   29fac:	52425041 	.word	0x52425041
   29fb0:	312c313d 	.word	0x312c313d
   29fb4:	0000000d 	.word	0x0000000d
   29fb8:	532b5441 	.word	0x532b5441
   29fbc:	52425041 	.word	0x52425041
   29fc0:	312c303d 	.word	0x312c303d
   29fc4:	0000000d 	.word	0x0000000d
   29fc8:	462b5441 	.word	0x462b5441
   29fcc:	49435054 	.word	0x49435054
   29fd0:	0d313d44 	.word	0x0d313d44
   29fd4:	00000000 	.word	0x00000000
   29fd8:	462b5441 	.word	0x462b5441
   29fdc:	45535054 	.word	0x45535054
   29fe0:	223d5652 	.word	0x223d5652
   29fe4:	0d227325 	.word	0x0d227325
   29fe8:	00000000 	.word	0x00000000
   29fec:	462b5441 	.word	0x462b5441
   29ff0:	4e555054 	.word	0x4e555054
   29ff4:	7325223d 	.word	0x7325223d
   29ff8:	00000d22 	.word	0x00000d22
   29ffc:	462b5441 	.word	0x462b5441
   2a000:	57505054 	.word	0x57505054
   2a004:	7325223d 	.word	0x7325223d
   2a008:	00000d22 	.word	0x00000d22
   2a00c:	462b5441 	.word	0x462b5441
   2a010:	45475054 	.word	0x45475054
   2a014:	4d414e54 	.word	0x4d414e54
   2a018:	25223d45 	.word	0x25223d45
   2a01c:	000d2273 	.word	0x000d2273
   2a020:	462b5441 	.word	0x462b5441
   2a024:	45475054 	.word	0x45475054
   2a028:	54415054 	.word	0x54415054
   2a02c:	25223d48 	.word	0x25223d48
   2a030:	000d2273 	.word	0x000d2273
   2a034:	5054462b 	.word	0x5054462b
   2a038:	455a4953 	.word	0x455a4953
   2a03c:	2c31203a 	.word	0x2c31203a
   2a040:	00000000 	.word	0x00000000
   2a044:	462b5441 	.word	0x462b5441
   2a048:	49535054 	.word	0x49535054
   2a04c:	000d455a 	.word	0x000d455a
   2a050:	5054462b 	.word	0x5054462b
   2a054:	3a544547 	.word	0x3a544547
   2a058:	312c3120 	.word	0x312c3120
   2a05c:	00000000 	.word	0x00000000
   2a060:	462b5441 	.word	0x462b5441
   2a064:	45475054 	.word	0x45475054
   2a068:	0d313d54 	.word	0x0d313d54
   2a06c:	00000000 	.word	0x00000000
   2a070:	462b5441 	.word	0x462b5441
   2a074:	45475054 	.word	0x45475054
   2a078:	2c323d54 	.word	0x2c323d54
   2a07c:	000d6425 	.word	0x000d6425
   2a080:	5054462b 	.word	0x5054462b
   2a084:	3a544547 	.word	0x3a544547
   2a088:	00000020 	.word	0x00000020
   2a08c:	434c432b 	.word	0x434c432b
   2a090:	31203a43 	.word	0x31203a43
   2a094:	322c302c 	.word	0x322c302c
   2a098:	00000000 	.word	0x00000000
   2a09c:	434c432b 	.word	0x434c432b
   2a0a0:	31203a43 	.word	0x31203a43
   2a0a4:	332c302c 	.word	0x332c302c
   2a0a8:	00000000 	.word	0x00000000
   2a0ac:	434c432b 	.word	0x434c432b
   2a0b0:	31203a43 	.word	0x31203a43
   2a0b4:	302c302c 	.word	0x302c302c
   2a0b8:	00000000 	.word	0x00000000
   2a0bc:	434c432b 	.word	0x434c432b
   2a0c0:	31203a43 	.word	0x31203a43
   2a0c4:	362c302c 	.word	0x362c302c
	...
   2a0d0:	4e4f4d41 	.word	0x4e4f4d41
   2a0d4:	00000000 	.word	0x00000000
   2a0d8:	55475250 	.word	0x55475250
   2a0dc:	00004450 	.word	0x00004450
   2a0e0:	54494157 	.word	0x54494157
   2a0e4:	00000000 	.word	0x00000000
   2a0e8:	204d5347 	.word	0x204d5347
   2a0ec:	4c4c4143 	.word	0x4c4c4143
   2a0f0:	49415720 	.word	0x49415720
   2a0f4:	4e495454 	.word	0x4e495454
   2a0f8:	49442047 	.word	0x49442047
   2a0fc:	4c424153 	.word	0x4c424153
   2a100:	203a2045 	.word	0x203a2045
   2a104:	43435553 	.word	0x43435553
   2a108:	00535345 	.word	0x00535345
   2a10c:	204d5347 	.word	0x204d5347
   2a110:	4c4c4143 	.word	0x4c4c4143
   2a114:	49415720 	.word	0x49415720
   2a118:	4e495454 	.word	0x4e495454
   2a11c:	49442047 	.word	0x49442047
   2a120:	4c424153 	.word	0x4c424153
   2a124:	203a2045 	.word	0x203a2045
   2a128:	4c494146 	.word	0x4c494146
   2a12c:	00004445 	.word	0x00004445
   2a130:	41454c43 	.word	0x41454c43
   2a134:	4c4c4152 	.word	0x4c4c4152
   2a138:	00000000 	.word	0x00000000
   2a13c:	204c4c41 	.word	0x204c4c41
   2a140:	52455355 	.word	0x52455355
   2a144:	4d554e20 	.word	0x4d554e20
   2a148:	53524542 	.word	0x53524542
   2a14c:	454c4320 	.word	0x454c4320
   2a150:	44455241 	.word	0x44455241
   2a154:	00000000 	.word	0x00000000
   2a158:	41464544 	.word	0x41464544
   2a15c:	00544c55 	.word	0x00544c55
   2a160:	204c4c41 	.word	0x204c4c41
   2a164:	54544553 	.word	0x54544553
   2a168:	53474e49 	.word	0x53474e49
   2a16c:	45524120 	.word	0x45524120
   2a170:	574f4e20 	.word	0x574f4e20
   2a174:	43414620 	.word	0x43414620
   2a178:	59524f54 	.word	0x59524f54
   2a17c:	46454420 	.word	0x46454420
   2a180:	544c5541 	.word	0x544c5541
   2a184:	00000000 	.word	0x00000000
   2a188:	004d554e 	.word	0x004d554e
   2a18c:	4e206f4e 	.word	0x4e206f4e
   2a190:	65626d75 	.word	0x65626d75
   2a194:	45207372 	.word	0x45207372
   2a198:	74736978 	.word	0x74736978
   2a19c:	00000073 	.word	0x00000073
   2a1a0:	45534552 	.word	0x45534552
   2a1a4:	00000054 	.word	0x00000054
   2a1a8:	00444944 	.word	0x00444944
   2a1ac:	32422020 	.word	0x32422020
   2a1b0:	35302d30 	.word	0x35302d30
   2a1b4:	2d38302d 	.word	0x2d38302d
   2a1b8:	20203931 	.word	0x20203931
   2a1bc:	00000000 	.word	0x00000000
   2a1c0:	20756c25 	.word	0x20756c25
   2a1c4:	00007325 	.word	0x00007325
   2a1c8:	4f545541 	.word	0x4f545541
   2a1cc:	00004e4f 	.word	0x00004e4f
   2a1d0:	4f544f4d 	.word	0x4f544f4d
   2a1d4:	55412052 	.word	0x55412052
   2a1d8:	4e4f4f54 	.word	0x4e4f4f54
   2a1dc:	004e4f20 	.word	0x004e4f20
   2a1e0:	4f545541 	.word	0x4f545541
   2a1e4:	0046464f 	.word	0x0046464f
   2a1e8:	4f544f4d 	.word	0x4f544f4d
   2a1ec:	55412052 	.word	0x55412052
   2a1f0:	4e4f4f54 	.word	0x4e4f4f54
   2a1f4:	46464f20 	.word	0x46464f20
   2a1f8:	00000000 	.word	0x00000000
   2a1fc:	50594257 	.word	0x50594257
   2a200:	00004e4f 	.word	0x00004e4f
   2a204:	45544157 	.word	0x45544157
   2a208:	59422052 	.word	0x59422052
   2a20c:	53534150 	.word	0x53534150
   2a210:	004e4f20 	.word	0x004e4f20
   2a214:	50594257 	.word	0x50594257
   2a218:	0046464f 	.word	0x0046464f
   2a21c:	45544157 	.word	0x45544157
   2a220:	59422052 	.word	0x59422052
   2a224:	53534150 	.word	0x53534150
   2a228:	46464f20 	.word	0x46464f20
   2a22c:	00000000 	.word	0x00000000
   2a230:	4f505053 	.word	0x4f505053
   2a234:	0000004e 	.word	0x0000004e
   2a238:	20505053 	.word	0x20505053
   2a23c:	00004e4f 	.word	0x00004e4f
   2a240:	4f505053 	.word	0x4f505053
   2a244:	00004646 	.word	0x00004646
   2a248:	20505053 	.word	0x20505053
   2a24c:	0046464f 	.word	0x0046464f
   2a250:	56505053 	.word	0x56505053
   2a254:	00000000 	.word	0x00000000
   2a258:	20505053 	.word	0x20505053
   2a25c:	544c4f56 	.word	0x544c4f56
   2a260:	54455320 	.word	0x54455320
   2a264:	00000000 	.word	0x00000000
   2a268:	4f514553 	.word	0x4f514553
   2a26c:	0000004e 	.word	0x0000004e
   2a270:	50514553 	.word	0x50514553
   2a274:	004e4f20 	.word	0x004e4f20
   2a278:	4f514553 	.word	0x4f514553
   2a27c:	00004646 	.word	0x00004646
   2a280:	50514553 	.word	0x50514553
   2a284:	46464f20 	.word	0x46464f20
   2a288:	00000000 	.word	0x00000000
   2a28c:	00444e44 	.word	0x00444e44
   2a290:	20444e44 	.word	0x20444e44
   2a294:	0000203a 	.word	0x0000203a
   2a298:	004b4f20 	.word	0x004b4f20
   2a29c:	4b424446 	.word	0x4b424446
   2a2a0:	00000000 	.word	0x00000000
   2a2a4:	4b424446 	.word	0x4b424446
   2a2a8:	25203a20 	.word	0x25203a20
   2a2ac:	00000064 	.word	0x00000064
   2a2b0:	454d4f55 	.word	0x454d4f55
   2a2b4:	444f4854 	.word	0x444f4854
   2a2b8:	00000000 	.word	0x00000000
   2a2bc:	454d4f55 	.word	0x454d4f55
   2a2c0:	444f4854 	.word	0x444f4854
   2a2c4:	00203a20 	.word	0x00203a20
   2a2c8:	5942564d 	.word	0x5942564d
   2a2cc:	004e4f50 	.word	0x004e4f50
   2a2d0:	4f544f4d 	.word	0x4f544f4d
   2a2d4:	4f562052 	.word	0x4f562052
   2a2d8:	4741544c 	.word	0x4741544c
   2a2dc:	59422045 	.word	0x59422045
   2a2e0:	53534150 	.word	0x53534150
   2a2e4:	004e4f20 	.word	0x004e4f20
   2a2e8:	5942564d 	.word	0x5942564d
   2a2ec:	46464f50 	.word	0x46464f50
   2a2f0:	00000000 	.word	0x00000000
   2a2f4:	4f544f4d 	.word	0x4f544f4d
   2a2f8:	4f562052 	.word	0x4f562052
   2a2fc:	4741544c 	.word	0x4741544c
   2a300:	59422045 	.word	0x59422045
   2a304:	53534150 	.word	0x53534150
   2a308:	46464f20 	.word	0x46464f20
   2a30c:	00000000 	.word	0x00000000
   2a310:	5942564d 	.word	0x5942564d
   2a314:	00005450 	.word	0x00005450
   2a318:	6f746f4d 	.word	0x6f746f4d
   2a31c:	6f562072 	.word	0x6f562072
   2a320:	6761746c 	.word	0x6761746c
   2a324:	79422065 	.word	0x79422065
   2a328:	73736170 	.word	0x73736170
   2a32c:	6d695420 	.word	0x6d695420
   2a330:	65532065 	.word	0x65532065
   2a334:	6f742074 	.word	0x6f742074
   2a338:	00642520 	.word	0x00642520
   2a33c:	50534552 	.word	0x50534552
   2a340:	00000000 	.word	0x00000000
   2a344:	50534552 	.word	0x50534552
   2a348:	00203a20 	.word	0x00203a20
   2a34c:	0052564f 	.word	0x0052564f
   2a350:	2052564f 	.word	0x2052564f
   2a354:	20544553 	.word	0x20544553
   2a358:	00004b4f 	.word	0x00004b4f
   2a35c:	52444e55 	.word	0x52444e55
   2a360:	00000000 	.word	0x00000000
   2a364:	52444e55 	.word	0x52444e55
   2a368:	54455320 	.word	0x54455320
   2a36c:	004b4f20 	.word	0x004b4f20
   2a370:	41545341 	.word	0x41545341
   2a374:	00000054 	.word	0x00000054
   2a378:	75253a43 	.word	0x75253a43
   2a37c:	0a75252e 	.word	0x0a75252e
   2a380:	75253a4e 	.word	0x75253a4e
   2a384:	253a4f0a 	.word	0x253a4f0a
   2a388:	3a550a75 	.word	0x3a550a75
   2a38c:	4f0a7525 	.word	0x4f0a7525
   2a390:	75253a50 	.word	0x75253a50
   2a394:	3a50550a 	.word	0x3a50550a
   2a398:	00007525 	.word	0x00007525
   2a39c:	4f46564f 	.word	0x4f46564f
   2a3a0:	0000004e 	.word	0x0000004e
   2a3a4:	56455250 	.word	0x56455250
   2a3a8:	20544e45 	.word	0x20544e45
   2a3ac:	5245564f 	.word	0x5245564f
   2a3b0:	574f4c46 	.word	0x574f4c46
   2a3b4:	54455320 	.word	0x54455320
   2a3b8:	474e4954 	.word	0x474e4954
   2a3bc:	004e4f20 	.word	0x004e4f20
   2a3c0:	4f46564f 	.word	0x4f46564f
   2a3c4:	00004646 	.word	0x00004646
   2a3c8:	56455250 	.word	0x56455250
   2a3cc:	20544e45 	.word	0x20544e45
   2a3d0:	5245564f 	.word	0x5245564f
   2a3d4:	574f4c46 	.word	0x574f4c46
   2a3d8:	54455320 	.word	0x54455320
   2a3dc:	474e4954 	.word	0x474e4954
   2a3e0:	46464f20 	.word	0x46464f20
   2a3e4:	00000000 	.word	0x00000000
   2a3e8:	4f4d324d 	.word	0x4f4d324d
   2a3ec:	0000004e 	.word	0x0000004e
   2a3f0:	204d324d 	.word	0x204d324d
   2a3f4:	6e727554 	.word	0x6e727554
   2a3f8:	4f206465 	.word	0x4f206465
   2a3fc:	52202c6e 	.word	0x52202c6e
   2a400:	746f6d65 	.word	0x746f6d65
   2a404:	754e2065 	.word	0x754e2065
   2a408:	7265626d 	.word	0x7265626d
   2a40c:	726c4120 	.word	0x726c4120
   2a410:	79646165 	.word	0x79646165
   2a414:	72655620 	.word	0x72655620
   2a418:	65696669 	.word	0x65696669
   2a41c:	00000064 	.word	0x00000064
   2a420:	6f727245 	.word	0x6f727245
   2a424:	4d203a72 	.word	0x4d203a72
   2a428:	52204d32 	.word	0x52204d32
   2a42c:	746f6d65 	.word	0x746f6d65
   2a430:	754e2065 	.word	0x754e2065
   2a434:	7265626d 	.word	0x7265626d
   2a438:	746f4e20 	.word	0x746f4e20
   2a43c:	65725020 	.word	0x65725020
   2a440:	746e6573 	.word	0x746e6573
   2a444:	00000000 	.word	0x00000000
   2a448:	4f4d324d 	.word	0x4f4d324d
   2a44c:	00004646 	.word	0x00004646
   2a450:	204d324d 	.word	0x204d324d
   2a454:	54544553 	.word	0x54544553
   2a458:	20474e49 	.word	0x20474e49
   2a45c:	0046464f 	.word	0x0046464f
   2a460:	54415453 	.word	0x54415453
   2a464:	00005355 	.word	0x00005355
   2a468:	45544c41 	.word	0x45544c41
   2a46c:	54414e52 	.word	0x54414e52
   2a470:	554e2045 	.word	0x554e2045
   2a474:	5245424d 	.word	0x5245424d
   2a478:	004e4f20 	.word	0x004e4f20
   2a47c:	45544c41 	.word	0x45544c41
   2a480:	54414e52 	.word	0x54414e52
   2a484:	554e2045 	.word	0x554e2045
   2a488:	5245424d 	.word	0x5245424d
   2a48c:	544f4e20 	.word	0x544f4e20
   2a490:	45525020 	.word	0x45525020
   2a494:	544e4553 	.word	0x544e4553
   2a498:	00000000 	.word	0x00000000
   2a49c:	464f4d41 	.word	0x464f4d41
   2a4a0:	00000046 	.word	0x00000046
   2a4a4:	45544c41 	.word	0x45544c41
   2a4a8:	54414e52 	.word	0x54414e52
   2a4ac:	4f4d2045 	.word	0x4f4d2045
   2a4b0:	454c4942 	.word	0x454c4942
   2a4b4:	4d554e20 	.word	0x4d554e20
   2a4b8:	20524542 	.word	0x20524542
   2a4bc:	0046464f 	.word	0x0046464f
   2a4c0:	464f434e 	.word	0x464f434e
   2a4c4:	00000046 	.word	0x00000046
   2a4c8:	43204f4e 	.word	0x43204f4e
   2a4cc:	204c4c41 	.word	0x204c4c41
   2a4d0:	54544553 	.word	0x54544553
   2a4d4:	20474e49 	.word	0x20474e49
   2a4d8:	0046464f 	.word	0x0046464f
   2a4dc:	54544547 	.word	0x54544547
   2a4e0:	00454d49 	.word	0x00454d49
   2a4e4:	454d4954 	.word	0x454d4954
   2a4e8:	25203a20 	.word	0x25203a20
   2a4ec:	75253a75 	.word	0x75253a75
   2a4f0:	00000000 	.word	0x00000000
   2a4f4:	54544553 	.word	0x54544553
   2a4f8:	00454d49 	.word	0x00454d49
   2a4fc:	4954434e 	.word	0x4954434e
   2a500:	0000454d 	.word	0x0000454d
   2a504:	0000002d 	.word	0x0000002d
   2a508:	0000003a 	.word	0x0000003a
   2a50c:	43204f4e 	.word	0x43204f4e
   2a510:	204c4c41 	.word	0x204c4c41
   2a514:	494d4954 	.word	0x494d4954
   2a518:	2053474e 	.word	0x2053474e
   2a51c:	00544553 	.word	0x00544553
   2a520:	47415453 	.word	0x47415453
   2a524:	00000045 	.word	0x00000045
   2a528:	4c4c4143 	.word	0x4c4c4143
   2a52c:	41545320 	.word	0x41545320
   2a530:	53204547 	.word	0x53204547
   2a534:	54205445 	.word	0x54205445
   2a538:	203a204f 	.word	0x203a204f
   2a53c:	00006425 	.word	0x00006425
   2a540:	52415453 	.word	0x52415453
   2a544:	454d4954 	.word	0x454d4954
   2a548:	00000000 	.word	0x00000000
   2a54c:	41545320 	.word	0x41545320
   2a550:	4d495452 	.word	0x4d495452
   2a554:	45532045 	.word	0x45532045
   2a558:	4f542054 	.word	0x4f542054
   2a55c:	25203a20 	.word	0x25203a20
   2a560:	00000064 	.word	0x00000064
   2a564:	4f545541 	.word	0x4f545541
   2a568:	454d4954 	.word	0x454d4954
   2a56c:	00000000 	.word	0x00000000
   2a570:	54554120 	.word	0x54554120
   2a574:	4d49544f 	.word	0x4d49544f
   2a578:	45532045 	.word	0x45532045
   2a57c:	4f542054 	.word	0x4f542054
   2a580:	25203a20 	.word	0x25203a20
   2a584:	00000064 	.word	0x00000064
   2a588:	004c4142 	.word	0x004c4142
   2a58c:	002b504d 	.word	0x002b504d
   2a590:	4f4e2050 	.word	0x4f4e2050
   2a594:	44444120 	.word	0x44444120
   2a598:	00444544 	.word	0x00444544
   2a59c:	002b534d 	.word	0x002b534d
   2a5a0:	4f4e2053 	.word	0x4f4e2053
   2a5a4:	44444120 	.word	0x44444120
   2a5a8:	00444544 	.word	0x00444544
   2a5ac:	00002b4d 	.word	0x00002b4d
   2a5b0:	49424f4d 	.word	0x49424f4d
   2a5b4:	4e20454c 	.word	0x4e20454c
   2a5b8:	00003a4f 	.word	0x00003a4f
   2a5bc:	0000000a 	.word	0x0000000a
   2a5c0:	45444441 	.word	0x45444441
   2a5c4:	55532044 	.word	0x55532044
   2a5c8:	53454343 	.word	0x53454343
   2a5cc:	4c554653 	.word	0x4c554653
   2a5d0:	0000594c 	.word	0x0000594c
   2a5d4:	00002d4d 	.word	0x00002d4d
   2a5d8:	4f4d4552 	.word	0x4f4d4552
   2a5dc:	20444556 	.word	0x20444556
   2a5e0:	43435553 	.word	0x43435553
   2a5e4:	46535345 	.word	0x46535345
   2a5e8:	594c4c55 	.word	0x594c4c55
   2a5ec:	00000000 	.word	0x00000000
   2a5f0:	002b4d41 	.word	0x002b4d41
   2a5f4:	45544c41 	.word	0x45544c41
   2a5f8:	54414e52 	.word	0x54414e52
   2a5fc:	4f4d2045 	.word	0x4f4d2045
   2a600:	454c4942 	.word	0x454c4942
   2a604:	204f4e20 	.word	0x204f4e20
   2a608:	20444441 	.word	0x20444441
   2a60c:	43435553 	.word	0x43435553
   2a610:	00535345 	.word	0x00535345
   2a614:	002b4d4d 	.word	0x002b4d4d
   2a618:	204d324d 	.word	0x204d324d
   2a61c:	202e4f4e 	.word	0x202e4f4e
   2a620:	45444441 	.word	0x45444441
   2a624:	00000044 	.word	0x00000044
   2a628:	002b524d 	.word	0x002b524d
   2a62c:	204d324d 	.word	0x204d324d
   2a630:	4f4d4552 	.word	0x4f4d4552
   2a634:	4e204554 	.word	0x4e204554
   2a638:	41202e4f 	.word	0x41202e4f
   2a63c:	44454444 	.word	0x44454444
   2a640:	00000000 	.word	0x00000000
   2a644:	4f525245 	.word	0x4f525245
   2a648:	203a2052 	.word	0x203a2052
   2a64c:	00007325 	.word	0x00007325
   2a650:	00004e4f 	.word	0x00004e4f
   2a654:	48502032 	.word	0x48502032
   2a658:	00455341 	.word	0x00455341
   2a65c:	00004b4f 	.word	0x00004b4f
   2a660:	4f525245 	.word	0x4f525245
   2a664:	00000052 	.word	0x00000052
   2a668:	203a5952 	.word	0x203a5952
   2a66c:	59206425 	.word	0x59206425
   2a670:	25203a42 	.word	0x25203a42
   2a674:	52422064 	.word	0x52422064
   2a678:	6425203a 	.word	0x6425203a
   2a67c:	3a43410a 	.word	0x3a43410a
   2a680:	0a732520 	.word	0x0a732520
   2a684:	75716553 	.word	0x75716553
   2a688:	65636e65 	.word	0x65636e65
   2a68c:	7325203a 	.word	0x7325203a
   2a690:	746f4d0a 	.word	0x746f4d0a
   2a694:	203a726f 	.word	0x203a726f
   2a698:	430a7325 	.word	0x430a7325
   2a69c:	65727275 	.word	0x65727275
   2a6a0:	203a746e 	.word	0x203a746e
   2a6a4:	0a416425 	.word	0x0a416425
   2a6a8:	7774654e 	.word	0x7774654e
   2a6ac:	3a6b726f 	.word	0x3a6b726f
   2a6b0:	00642520 	.word	0x00642520
   2a6b4:	304d4d56 	.word	0x304d4d56
   2a6b8:	00000031 	.word	0x00000031
   2a6bc:	4f544f4d 	.word	0x4f544f4d
   2a6c0:	00002052 	.word	0x00002052
   2a6c4:	0046464f 	.word	0x0046464f
   2a6c8:	20572f46 	.word	0x20572f46
   2a6cc:	61647055 	.word	0x61647055
   2a6d0:	43206574 	.word	0x43206574
   2a6d4:	6c706d6f 	.word	0x6c706d6f
   2a6d8:	64657465 	.word	0x64657465
   2a6dc:	00000000 	.word	0x00000000
   2a6e0:	20572f46 	.word	0x20572f46
   2a6e4:	61647055 	.word	0x61647055
   2a6e8:	45206574 	.word	0x45206574
   2a6ec:	726f7272 	.word	0x726f7272
   2a6f0:	00000000 	.word	0x00000000
   2a6f4:	494d4441 	.word	0x494d4441
   2a6f8:	0000004e 	.word	0x0000004e
   2a6fc:	00000023 	.word	0x00000023
   2a700:	30524d56 	.word	0x30524d56
   2a704:	00000032 	.word	0x00000032
   2a708:	204d324d 	.word	0x204d324d
   2a70c:	4e525554 	.word	0x4e525554
   2a710:	4f204445 	.word	0x4f204445
   2a714:	0000004e 	.word	0x0000004e
   2a718:	0000203a 	.word	0x0000203a
   2a71c:	00017298 	.word	0x00017298
   2a720:	0001737e 	.word	0x0001737e
   2a724:	0001737e 	.word	0x0001737e
   2a728:	00017298 	.word	0x00017298
   2a72c:	0001737e 	.word	0x0001737e
   2a730:	0001737e 	.word	0x0001737e
   2a734:	0001737e 	.word	0x0001737e
   2a738:	0001737e 	.word	0x0001737e
   2a73c:	0001737e 	.word	0x0001737e
   2a740:	0001737e 	.word	0x0001737e
   2a744:	0001737e 	.word	0x0001737e
   2a748:	0001737e 	.word	0x0001737e
   2a74c:	00017298 	.word	0x00017298
   2a750:	0001737e 	.word	0x0001737e
   2a754:	0001737e 	.word	0x0001737e
   2a758:	0001737e 	.word	0x0001737e
   2a75c:	0001725a 	.word	0x0001725a
   2a760:	0001737e 	.word	0x0001737e
   2a764:	00017298 	.word	0x00017298
   2a768:	49524b20 	.word	0x49524b20
   2a76c:	414e4853 	.word	0x414e4853
   2a770:	4d532020 	.word	0x4d532020
   2a774:	20545241 	.word	0x20545241
   2a778:	00000000 	.word	0x00000000
   2a77c:	54202020 	.word	0x54202020
   2a780:	4e484345 	.word	0x4e484345
   2a784:	474f4c4f 	.word	0x474f4c4f
   2a788:	20202059 	.word	0x20202059
   2a78c:	00000000 	.word	0x00000000
   2a790:	4f532020 	.word	0x4f532020
   2a794:	41575446 	.word	0x41575446
   2a798:	56204552 	.word	0x56204552
   2a79c:	20205245 	.word	0x20205245
   2a7a0:	00000000 	.word	0x00000000
   2a7a4:	32422020 	.word	0x32422020
   2a7a8:	35302d30 	.word	0x35302d30
   2a7ac:	2d38302d 	.word	0x2d38302d
   2a7b0:	20203931 	.word	0x20203931
   2a7b4:	00000000 	.word	0x00000000
   2a7b8:	00007325 	.word	0x00007325
   2a7bc:	74696e49 	.word	0x74696e49
   2a7c0:	696c6169 	.word	0x696c6169
   2a7c4:	676e697a 	.word	0x676e697a
   2a7c8:	202e2e2e 	.word	0x202e2e2e
   2a7cc:	00000000 	.word	0x00000000
   2a7d0:	4d4d4f43 	.word	0x4d4d4f43
   2a7d4:	45444e41 	.word	0x45444e41
   2a7d8:	32762052 	.word	0x32762052
   2a7dc:	20202020 	.word	0x20202020
   2a7e0:	00000000 	.word	0x00000000
   2a7e4:	20595256 	.word	0x20595256
   2a7e8:	59562020 	.word	0x59562020
   2a7ec:	20202042 	.word	0x20202042
   2a7f0:	20524256 	.word	0x20524256
   2a7f4:	00000000 	.word	0x00000000
   2a7f8:	6c333025 	.word	0x6c333025
   2a7fc:	20202075 	.word	0x20202075
   2a800:	00000000 	.word	0x00000000
   2a804:	6c333025 	.word	0x6c333025
   2a808:	00002075 	.word	0x00002075
   2a80c:	4f544f4d 	.word	0x4f544f4d
   2a810:	20203a52 	.word	0x20203a52
   2a814:	2046464f 	.word	0x2046464f
   2a818:	20202020 	.word	0x20202020
   2a81c:	00000000 	.word	0x00000000
   2a820:	20202020 	.word	0x20202020
   2a824:	20202020 	.word	0x20202020
   2a828:	20202020 	.word	0x20202020
   2a82c:	20202020 	.word	0x20202020
   2a830:	00000000 	.word	0x00000000
   2a834:	4f544f4d 	.word	0x4f544f4d
   2a838:	55432052 	.word	0x55432052
   2a83c:	4e455252 	.word	0x4e455252
   2a840:	20203a54 	.word	0x20203a54
   2a844:	00000000 	.word	0x00000000
   2a848:	6c333025 	.word	0x6c333025
   2a84c:	30252e75 	.word	0x30252e75
   2a850:	20756c32 	.word	0x20756c32
   2a854:	20202020 	.word	0x20202020
   2a858:	20202020 	.word	0x20202020
   2a85c:	00202020 	.word	0x00202020
   2a860:	4f544f4d 	.word	0x4f544f4d
   2a864:	41572052 	.word	0x41572052
   2a868:	47415454 	.word	0x47415454
   2a86c:	20203a45 	.word	0x20203a45
   2a870:	00000000 	.word	0x00000000
   2a874:	6c333025 	.word	0x6c333025
   2a878:	30252e75 	.word	0x30252e75
   2a87c:	20756c32 	.word	0x20756c32
   2a880:	2020576b 	.word	0x2020576b
   2a884:	20202020 	.word	0x20202020
   2a888:	00202020 	.word	0x00202020
   2a88c:	48502033 	.word	0x48502033
   2a890:	20455341 	.word	0x20455341
   2a894:	3a514553 	.word	0x3a514553
   2a898:	00000000 	.word	0x00000000
   2a89c:	204b4f20 	.word	0x204b4f20
   2a8a0:	00000000 	.word	0x00000000
   2a8a4:	52524520 	.word	0x52524520
   2a8a8:	00000000 	.word	0x00000000
   2a8ac:	53414850 	.word	0x53414850
   2a8b0:	54532045 	.word	0x54532045
   2a8b4:	3a455441 	.word	0x3a455441
   2a8b8:	00000000 	.word	0x00000000
   2a8bc:	48503320 	.word	0x48503320
   2a8c0:	00000020 	.word	0x00000020
   2a8c4:	48503220 	.word	0x48503220
   2a8c8:	00000020 	.word	0x00000020
   2a8cc:	46464f20 	.word	0x46464f20
   2a8d0:	00000000 	.word	0x00000000
   2a8d4:	454c2d4f 	.word	0x454c2d4f
   2a8d8:	204c4556 	.word	0x204c4556
   2a8dc:	0000203a 	.word	0x0000203a
   2a8e0:	48474948 	.word	0x48474948
   2a8e4:	00002020 	.word	0x00002020
   2a8e8:	2044494d 	.word	0x2044494d
   2a8ec:	00002020 	.word	0x00002020
   2a8f0:	20574f4c 	.word	0x20574f4c
   2a8f4:	00002020 	.word	0x00002020
   2a8f8:	454c2d55 	.word	0x454c2d55
   2a8fc:	204c4556 	.word	0x204c4556
   2a900:	0000203a 	.word	0x0000203a
   2a904:	43545243 	.word	0x43545243
   2a908:	0000204c 	.word	0x0000204c
   2a90c:	74746142 	.word	0x74746142
   2a910:	50797265 	.word	0x50797265
   2a914:	203a7265 	.word	0x203a7265
   2a918:	25257525 	.word	0x25257525
   2a91c:	00000020 	.word	0x00000020
   2a920:	4e474953 	.word	0x4e474953
   2a924:	3a204c41 	.word	0x3a204c41
   2a928:	00000020 	.word	0x00000020
   2a92c:	20202020 	.word	0x20202020
   2a930:	00202020 	.word	0x00202020
   2a934:	4f434e49 	.word	0x4f434e49
   2a938:	474e494d 	.word	0x474e494d
   2a93c:	4c414320 	.word	0x4c414320
   2a940:	202e2e4c 	.word	0x202e2e4c
   2a944:	00000000 	.word	0x00000000
   2a948:	36312d25 	.word	0x36312d25
   2a94c:	00000073 	.word	0x00000073
   2a950:	43204e49 	.word	0x43204e49
   2a954:	2e4c4c41 	.word	0x2e4c4c41
   2a958:	20202e2e 	.word	0x20202e2e
   2a95c:	20202020 	.word	0x20202020
   2a960:	00000000 	.word	0x00000000
   2a964:	4c414944 	.word	0x4c414944
   2a968:	2e474e49 	.word	0x2e474e49
   2a96c:	20202e2e 	.word	0x20202e2e
   2a970:	20202020 	.word	0x20202020
   2a974:	00000000 	.word	0x00000000
   2a978:	4f434e49 	.word	0x4f434e49
   2a97c:	474e494d 	.word	0x474e494d
   2a980:	534d5320 	.word	0x534d5320
   2a984:	202e2e2e 	.word	0x202e2e2e
   2a988:	00000000 	.word	0x00000000
   2a98c:	4754554f 	.word	0x4754554f
   2a990:	474e494f 	.word	0x474e494f
   2a994:	534d5320 	.word	0x534d5320
   2a998:	202e2e2e 	.word	0x202e2e2e
	...
   2a9a4:	1f1f0000 	.word	0x1f1f0000
   2a9a8:	00000000 	.word	0x00000000
   2a9ac:	1f1f1f00 	.word	0x1f1f1f00
   2a9b0:	00000000 	.word	0x00000000
   2a9b4:	1f1f1f1f 	.word	0x1f1f1f1f
   2a9b8:	1f1f0000 	.word	0x1f1f0000
   2a9bc:	1f1f1f1f 	.word	0x1f1f1f1f
   2a9c0:	1f1f1f1f 	.word	0x1f1f1f1f
   2a9c4:	1f1f1f1f 	.word	0x1f1f1f1f
   2a9c8:	000187b2 	.word	0x000187b2
   2a9cc:	0001836e 	.word	0x0001836e
   2a9d0:	000183b2 	.word	0x000183b2
   2a9d4:	00018418 	.word	0x00018418
   2a9d8:	0001847a 	.word	0x0001847a
   2a9dc:	000184e8 	.word	0x000184e8
   2a9e0:	00018664 	.word	0x00018664
   2a9e4:	000186e6 	.word	0x000186e6
   2a9e8:	000187b0 	.word	0x000187b0
   2a9ec:	00018700 	.word	0x00018700
   2a9f0:	0001871e 	.word	0x0001871e
   2a9f4:	0001873c 	.word	0x0001873c
   2a9f8:	0001875a 	.word	0x0001875a
   2a9fc:	00018782 	.word	0x00018782
   2aa00:	756c255d 	.word	0x756c255d
   2aa04:	756c257b 	.word	0x756c257b
   2aa08:	756c257d 	.word	0x756c257d
   2aa0c:	00000000 	.word	0x00000000
   2aa10:	00000002 	.word	0x00000002
   2aa14:	00000003 	.word	0x00000003
   2aa18:	00000028 	.word	0x00000028
   2aa1c:	00000029 	.word	0x00000029
   2aa20:	00000004 	.word	0x00000004
   2aa24:	00000005 	.word	0x00000005
   2aa28:	00000006 	.word	0x00000006
   2aa2c:	00000007 	.word	0x00000007
   2aa30:	00000020 	.word	0x00000020
   2aa34:	00000021 	.word	0x00000021
   2aa38:	00000022 	.word	0x00000022
   2aa3c:	00000023 	.word	0x00000023
   2aa40:	00000024 	.word	0x00000024
   2aa44:	00000025 	.word	0x00000025
   2aa48:	00000026 	.word	0x00000026
   2aa4c:	00000027 	.word	0x00000027
   2aa50:	00000008 	.word	0x00000008
   2aa54:	00000009 	.word	0x00000009
   2aa58:	0000000a 	.word	0x0000000a
   2aa5c:	0000000b 	.word	0x0000000b
   2aa60:	0001d30e 	.word	0x0001d30e
   2aa64:	0001d314 	.word	0x0001d314
   2aa68:	0001d314 	.word	0x0001d314
   2aa6c:	0001d314 	.word	0x0001d314
   2aa70:	0001d314 	.word	0x0001d314
   2aa74:	0001d314 	.word	0x0001d314
   2aa78:	0001d314 	.word	0x0001d314
   2aa7c:	0001d314 	.word	0x0001d314
   2aa80:	0001d314 	.word	0x0001d314
   2aa84:	0001d314 	.word	0x0001d314
   2aa88:	0001d314 	.word	0x0001d314
   2aa8c:	0001d314 	.word	0x0001d314
   2aa90:	0001d314 	.word	0x0001d314
   2aa94:	0001d314 	.word	0x0001d314
   2aa98:	0001d314 	.word	0x0001d314
   2aa9c:	0001d314 	.word	0x0001d314
   2aaa0:	0001d2ec 	.word	0x0001d2ec
   2aaa4:	0001d314 	.word	0x0001d314
   2aaa8:	0001d314 	.word	0x0001d314
   2aaac:	0001d314 	.word	0x0001d314
   2aab0:	0001d314 	.word	0x0001d314
   2aab4:	0001d314 	.word	0x0001d314
   2aab8:	0001d314 	.word	0x0001d314
   2aabc:	0001d314 	.word	0x0001d314
   2aac0:	0001d314 	.word	0x0001d314
   2aac4:	0001d314 	.word	0x0001d314
   2aac8:	0001d314 	.word	0x0001d314
   2aacc:	0001d314 	.word	0x0001d314
   2aad0:	0001d314 	.word	0x0001d314
   2aad4:	0001d314 	.word	0x0001d314
   2aad8:	0001d314 	.word	0x0001d314
   2aadc:	0001d314 	.word	0x0001d314
   2aae0:	0001d308 	.word	0x0001d308
   2aae4:	0001d314 	.word	0x0001d314
   2aae8:	0001d314 	.word	0x0001d314
   2aaec:	0001d314 	.word	0x0001d314
   2aaf0:	0001d314 	.word	0x0001d314
   2aaf4:	0001d314 	.word	0x0001d314
   2aaf8:	0001d314 	.word	0x0001d314
   2aafc:	0001d314 	.word	0x0001d314
   2ab00:	0001d314 	.word	0x0001d314
   2ab04:	0001d314 	.word	0x0001d314
   2ab08:	0001d314 	.word	0x0001d314
   2ab0c:	0001d314 	.word	0x0001d314
   2ab10:	0001d314 	.word	0x0001d314
   2ab14:	0001d314 	.word	0x0001d314
   2ab18:	0001d314 	.word	0x0001d314
   2ab1c:	0001d314 	.word	0x0001d314
   2ab20:	0001d302 	.word	0x0001d302
   2ab24:	0001d2aa 	.word	0x0001d2aa
   2ab28:	0001d2c0 	.word	0x0001d2c0
   2ab2c:	0001d2d6 	.word	0x0001d2d6
   2ab30:	0001d290 	.word	0x0001d290
   2ab34:	42000800 	.word	0x42000800
   2ab38:	42000c00 	.word	0x42000c00
   2ab3c:	42001000 	.word	0x42001000
   2ab40:	42001400 	.word	0x42001400
   2ab44:	42001800 	.word	0x42001800
   2ab48:	42001c00 	.word	0x42001c00
   2ab4c:	454c4449 	.word	0x454c4449
   2ab50:	00000000 	.word	0x00000000
   2ab54:	20726d54 	.word	0x20726d54
   2ab58:	00637653 	.word	0x00637653
   2ab5c:	000212b0 	.word	0x000212b0
   2ab60:	000212b0 	.word	0x000212b0
   2ab64:	000212b0 	.word	0x000212b0
   2ab68:	0002133e 	.word	0x0002133e
   2ab6c:	00021308 	.word	0x00021308
   2ab70:	00021332 	.word	0x00021332
   2ab74:	000212b0 	.word	0x000212b0
   2ab78:	000212b0 	.word	0x000212b0
   2ab7c:	0002133e 	.word	0x0002133e
   2ab80:	00021308 	.word	0x00021308

0002ab84 <_tcc_intflag>:
   2ab84:	00000001 00000002 00000004 00000008     ................
   2ab94:	00001000 00002000 00004000 00008000     ..... ...@......
   2aba4:	00010000 00020000 00040000 00080000     ................
   2abb4:	0c0b0a09 00000e0d 00022bbc 00022bbc     .........+...+..
   2abc4:	00022bb0 00022bbc 00022bb0 00022b8a     .+...+...+...+..
   2abd4:	00022b8a 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2abe4:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2abf4:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac04:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac14:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac24:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac34:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac44:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac54:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac64:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac74:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac84:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2ac94:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2aca4:	00022bbc 00022bbc 00022bbc 00022bbc     .+...+...+...+..
   2acb4:	00022bbc 00022bbc 00022bb0 00022bb0     .+...+...+...+..
   2acc4:	00022bc6 00022bc6 00022bc6 00022bc6     .+...+...+...+..
   2acd4:	41744545 50524f4d 456d752e 00023f36     EEtAMORP.umE6?..
   2ace4:	00023fb0 00023fb0 00023f54 00023f4e     .?...?..T?..N?..
   2acf4:	00023f5a 00023f3c 00023f60 00023f96     Z?..<?..`?...?..
   2ad04:	0002427c 000242cc 000242cc 000242c8     |B...B...B...B..
   2ad14:	0002426e 0002428e 0002425e 000242a0     nB...B..^B...B..
   2ad24:	000242b2 0002431a 00024348 00024348     .B...C..HC..HC..
   2ad34:	00024344 00024314 00024320 0002430e     DC...C.. C...C..
   2ad44:	00024326 0002432c 00776f70 74727173     &C..,C..pow.sqrt
   2ad54:	00000000                                ....

0002ad58 <TWO52>:
   2ad58:	00000000 43300000 00000000 c3300000     ......0C......0.
   2ad68:	00026cc0 00026c90 00026ca2 00026be4     .l...l...l...k..
   2ad78:	00026ca2 00026c86 00026ca2 00026be4     .l...l...l...k..
   2ad88:	00026c90 00026c90 00026c86 00026be4     .l...l...l...k..
   2ad98:	00026bec 00026bec 00026bec 00026ca8     .k...k...k...l..
   2ada8:	00026c90 00026c90 00026c64 00026d48     .l...l..dl..Hm..
   2adb8:	00026c64 00026c86 00026c64 00026d48     dl...l..dl..Hm..
   2adc8:	00026c90 00026c90 00026c86 00026d48     .l...l...l..Hm..
   2add8:	00026bec 00026bec 00026bec 00026d52     .k...k...k..Rm..
   2ade8:	00026ef0 00026e40 00026e40 00026e3e     .n..@n..@n..>n..
   2adf8:	00026ee2 00026ee2 00026ed8 00026e3e     .n...n...n..>n..
   2ae08:	00026ee2 00026ed8 00026ee2 00026e3e     .n...n...n..>n..
   2ae18:	00026ee8 00026ee8 00026ee8 00026f78     .n...n...n..xo..
   2ae28:	00027948 0002792a 000278e4 00027802     Hy..*y...x...x..
   2ae38:	000278e4 0002791c 000278e4 00027802     .x...y...x...x..
   2ae48:	0002792a 0002792a 0002791c 00027802     *y..*y...y...x..
   2ae58:	000277fa 000277fa 000277fa 00027b60     .w...w...w..`{..
   2ae68:	000281a8 00028068 00028068 00028064     ....h...h...d...
   2ae78:	00028180 00028180 00028172 00028064     ........r...d...
   2ae88:	00028180 00028172 00028180 00028064     ....r.......d...
   2ae98:	00028188 00028188 00028188 0002838c     ................
   2aea8:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2aeb8:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2aec8:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002aed7 <_ctype_>:
   2aed7:	20202000 20202020 28282020 20282828     .         ((((( 
   2aee7:	20202020 20202020 20202020 20202020                     
   2aef7:	10108820 10101010 10101010 10101010      ...............
   2af07:	04040410 04040404 10040404 10101010     ................
   2af17:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2af27:	01010101 01010101 01010101 10101010     ................
   2af37:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2af47:	02020202 02020202 02020202 10101010     ................
   2af57:	00000020 00000000 00000000 00000000      ...............
	...
   2afd7:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2afe7:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2aff7:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2b007:	00666564 c0b5f800                                def..

0002b00c <_init>:
   2b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b00e:	46c0      	nop			; (mov r8, r8)
   2b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b012:	bc08      	pop	{r3}
   2b014:	469e      	mov	lr, r3
   2b016:	4770      	bx	lr

0002b018 <__init_array_start>:
   2b018:	000100dd 	.word	0x000100dd

0002b01c <_fini>:
   2b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b01e:	46c0      	nop			; (mov r8, r8)
   2b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b022:	bc08      	pop	{r3}
   2b024:	469e      	mov	lr, r3
   2b026:	4770      	bx	lr

0002b028 <__fini_array_start>:
   2b028:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	9429 0002 8e39 0002 0000 0000 aed7 0002     )...9...........
20000180:	aeb0 0002 afdd 0002 afdd 0002 afdd 0002     ................
20000190:	afdd 0002 afdd 0002 afdd 0002 afdd 0002     ................
200001a0:	afdd 0002 afdd 0002 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
